
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000626  00800200  0000688e  00006922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000688e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001003  00800826  00800826  00006f48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006f48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006fa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b68  00000000  00000000  00006fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000daf0  00000000  00000000  00007b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037dc  00000000  00000000  0001563c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006d9c  00000000  00000000  00018e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027b0  00000000  00000000  0001fbb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004330  00000000  00000000  00022364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c24e  00000000  00000000  00026694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a98  00000000  00000000  000328e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	bc c6       	rjmp	.+3448   	; 0xdaa <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f1 24 	jmp	0x49e2	; 0x49e2 <__vector_25>
      68:	0c 94 43 25 	jmp	0x4a86	; 0x4a86 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <__vector_36>
      94:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 24 2a 	jmp	0x5448	; 0x5448 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 1d 26 	jmp	0x4c3a	; 0x4c3a <__vector_51>
      d0:	0c 94 6f 26 	jmp	0x4cde	; 0x4cde <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__vector_54>
      dc:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c8 1a       	sub	r12, r24
      e6:	c8 1a       	sub	r12, r24
      e8:	c8 1a       	sub	r12, r24
      ea:	ff 1a       	sub	r15, r31
      ec:	07 1b       	sub	r16, r23
      ee:	1c 1b       	sub	r17, r28
      f0:	c8 1a       	sub	r12, r24
      f2:	c8 1a       	sub	r12, r24
      f4:	ff 1a       	sub	r15, r31
      f6:	07 1b       	sub	r16, r23
      f8:	46 2a       	or	r4, r22
      fa:	b6 2a       	or	r11, r22
      fc:	b6 2a       	or	r11, r22
      fe:	b6 2a       	or	r11, r22
     100:	b6 2a       	or	r11, r22
     102:	b6 2a       	or	r11, r22
     104:	b6 2a       	or	r11, r22
     106:	b6 2a       	or	r11, r22
     108:	46 2a       	or	r4, r22
     10a:	b6 2a       	or	r11, r22
     10c:	b6 2a       	or	r11, r22
     10e:	b6 2a       	or	r11, r22
     110:	b6 2a       	or	r11, r22
     112:	b6 2a       	or	r11, r22
     114:	b6 2a       	or	r11, r22
     116:	b6 2a       	or	r11, r22
     118:	48 2a       	or	r4, r24
     11a:	b6 2a       	or	r11, r22
     11c:	b6 2a       	or	r11, r22
     11e:	b6 2a       	or	r11, r22
     120:	b6 2a       	or	r11, r22
     122:	b6 2a       	or	r11, r22
     124:	b6 2a       	or	r11, r22
     126:	b6 2a       	or	r11, r22
     128:	b6 2a       	or	r11, r22
     12a:	b6 2a       	or	r11, r22
     12c:	b6 2a       	or	r11, r22
     12e:	b6 2a       	or	r11, r22
     130:	b6 2a       	or	r11, r22
     132:	b6 2a       	or	r11, r22
     134:	b6 2a       	or	r11, r22
     136:	b6 2a       	or	r11, r22
     138:	48 2a       	or	r4, r24
     13a:	b6 2a       	or	r11, r22
     13c:	b6 2a       	or	r11, r22
     13e:	b6 2a       	or	r11, r22
     140:	b6 2a       	or	r11, r22
     142:	b6 2a       	or	r11, r22
     144:	b6 2a       	or	r11, r22
     146:	b6 2a       	or	r11, r22
     148:	b6 2a       	or	r11, r22
     14a:	b6 2a       	or	r11, r22
     14c:	b6 2a       	or	r11, r22
     14e:	b6 2a       	or	r11, r22
     150:	b6 2a       	or	r11, r22
     152:	b6 2a       	or	r11, r22
     154:	b6 2a       	or	r11, r22
     156:	b6 2a       	or	r11, r22
     158:	b2 2a       	or	r11, r18
     15a:	b6 2a       	or	r11, r22
     15c:	b6 2a       	or	r11, r22
     15e:	b6 2a       	or	r11, r22
     160:	b6 2a       	or	r11, r22
     162:	b6 2a       	or	r11, r22
     164:	b6 2a       	or	r11, r22
     166:	b6 2a       	or	r11, r22
     168:	7d 2a       	or	r7, r29
     16a:	b6 2a       	or	r11, r22
     16c:	b6 2a       	or	r11, r22
     16e:	b6 2a       	or	r11, r22
     170:	b6 2a       	or	r11, r22
     172:	b6 2a       	or	r11, r22
     174:	b6 2a       	or	r11, r22
     176:	b6 2a       	or	r11, r22
     178:	b6 2a       	or	r11, r22
     17a:	b6 2a       	or	r11, r22
     17c:	b6 2a       	or	r11, r22
     17e:	b6 2a       	or	r11, r22
     180:	b6 2a       	or	r11, r22
     182:	b6 2a       	or	r11, r22
     184:	b6 2a       	or	r11, r22
     186:	b6 2a       	or	r11, r22
     188:	71 2a       	or	r7, r17
     18a:	b6 2a       	or	r11, r22
     18c:	b6 2a       	or	r11, r22
     18e:	b6 2a       	or	r11, r22
     190:	b6 2a       	or	r11, r22
     192:	b6 2a       	or	r11, r22
     194:	b6 2a       	or	r11, r22
     196:	b6 2a       	or	r11, r22
     198:	95 2a       	or	r9, r21

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <prvCheckTasksWaitingTermination>
     2a0:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	ba d4       	rcall	.+2420   	; 0xc1e <vPortYield>
     2aa:	0e 94 45 1b 	call	0x368a	; 0x368a <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 45 18 	call	0x308a	; 0x308a <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 3a 1a 	call	0x3474	; 0x3474 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 91 1a 	call	0x3522	; 0x3522 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	18 e0       	ldi	r17, 0x08	; 8
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ee e8       	ldi	r30, 0x8E	; 142
     2e6:	f8 e6       	ldi	r31, 0x68	; 104
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a6 32       	cpi	r26, 0x26	; 38
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	28 e1       	ldi	r18, 0x18	; 24
     2fa:	a6 e2       	ldi	r26, 0x26	; 38
     2fc:	b8 e0       	ldi	r27, 0x08	; 8
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a9 32       	cpi	r26, 0x29	; 41
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <main>
     30c:	0c 94 45 34 	jmp	0x688a	; 0x688a <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	uint8_t xBytesSent = 0;
	const TickType_t x100ms = pdMS_TO_TICKS(100);
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <measureEventGroup>
     34e:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <measureEventGroup+0x1>
     352:	b0 d1       	rcall	.+864    	; 0x6b4 <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <dataReadyEventGroup>
     36c:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <dataReadyEventGroup+0x1>
     370:	01 d1       	rcall	.+514    	; 0x574 <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 57 1c 	call	0x38ae	; 0x38ae <TempHumSensor_getTemp>
     38a:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <TempHumSensor_getHum>
     392:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <CO2_getPPM>
     39a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <set_CO2_ppm>
			lora_driver_payload_t payload = get_lora_package(2);
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	ce 01       	movw	r24, r28
     3a2:	05 96       	adiw	r24, 0x05	; 5
     3a4:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkBufferHandle,
     3a8:	06 e0       	ldi	r16, 0x06	; 6
     3aa:	10 e0       	ldi	r17, 0x00	; 0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	46 e1       	ldi	r20, 0x16	; 22
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	be 01       	movw	r22, r28
     3b6:	6b 5f       	subi	r22, 0xFB	; 251
     3b8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ba:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <uplinkBufferHandle>
     3be:	90 91 1d 18 	lds	r25, 0x181D	; 0x80181d <uplinkBufferHandle+0x1>
     3c2:	0e 94 33 0b 	call	0x1666	; 0x1666 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			x100ms);
			if(xBytesSent != sizeof(payload)){
     3c6:	86 31       	cpi	r24, 0x16	; 22
     3c8:	29 f0       	breq	.+10     	; 0x3d4 <main_application_task+0xc2>
				printf("Timed out.\n");
     3ca:	8f e6       	ldi	r24, 0x6F	; 111
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	0e 94 88 33 	call	0x6710	; 0x6710 <puts>
     3d2:	af cf       	rjmp	.-162    	; 0x332 <main_application_task+0x20>
				// 			printf("Bytes sent: %d\n", xBytesSent);
				// 			printf("Temp sent: %d\n", tem);
				// 			printf("Humidity sent: %d\n", hum);
				// 			printf("Size of payload: %d\n", sizeof(payload));
				//			receivePayload();
				printf("Bytes put in buffer: %d\n", xBytesSent);
     3d4:	99 27       	eor	r25, r25
     3d6:	9f 93       	push	r25
     3d8:	8f 93       	push	r24
     3da:	8a e7       	ldi	r24, 0x7A	; 122
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	a1 cf       	rjmp	.-190    	; 0x332 <main_application_task+0x20>

000003f0 <create_sensor_tasks>:
	,  NULL );
	
}

void create_sensor_tasks() {
	createCO2SensorTask();
     3f0:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <createCO2SensorTask>
	create_TempHumSensorTask();
     3f4:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <create_TempHumSensorTask>
     3f8:	08 95       	ret

000003fa <initialize_event_groups>:
}

void initialize_event_groups() {
	dataReadyEventGroup = xEventGroupCreate();
     3fa:	a9 d0       	rcall	.+338    	; 0x54e <xEventGroupCreate>
     3fc:	90 93 19 18 	sts	0x1819, r25	; 0x801819 <dataReadyEventGroup+0x1>
     400:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
     404:	a4 d0       	rcall	.+328    	; 0x54e <xEventGroupCreate>
     406:	90 93 1b 18 	sts	0x181B, r25	; 0x80181b <measureEventGroup+0x1>
     40a:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <measureEventGroup>
     40e:	08 95       	ret

00000410 <initialize_application>:
     410:	ef 92       	push	r14

MessageBufferHandle_t uplinkBufferHandle;

void main_application_task(void *pvParameters);

void initialize_application(){
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
	initialize_event_groups();
     416:	f1 df       	rcall	.-30     	; 0x3fa <initialize_event_groups>
	create_sensor_tasks();
     418:	eb df       	rcall	.-42     	; 0x3f0 <create_sensor_tasks>
	initialize_fan_controller();
     41a:	61 d0       	rcall	.+194    	; 0x4de <initialize_fan_controller>
     41c:	41 e0       	ldi	r20, 0x01	; 1
	uplinkBufferHandle = xMessageBufferCreate(100);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	84 e6       	ldi	r24, 0x64	; 100
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <xStreamBufferGenericCreate>
     42a:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <uplinkBufferHandle+0x1>
     42e:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <uplinkBufferHandle>
     432:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <setUplinkMessageBufferHandle>
	setUplinkMessageBufferHandle(uplinkBufferHandle);
     436:	e1 2c       	mov	r14, r1
	
	xTaskCreate(
     438:	f1 2c       	mov	r15, r1
     43a:	03 e0       	ldi	r16, 0x03	; 3
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	40 ec       	ldi	r20, 0xC0	; 192
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	63 e9       	ldi	r22, 0x93	; 147
     446:	72 e0       	ldi	r23, 0x02	; 2
     448:	89 e8       	ldi	r24, 0x89	; 137
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xTaskCreate>
     450:	0f 91       	pop	r16
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  3  
	,  NULL );
	
}
     452:	ff 90       	pop	r15
     454:	ef 90       	pop	r14
     456:	08 95       	ret

00000458 <get_max_temperature>:
static uint16_t max_humidity;
static uint16_t min_humidity;

int16_t get_max_temperature(){
	return max_temperature;
}
     458:	89 e1       	ldi	r24, 0x19	; 25
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	08 95       	ret

0000045e <fan_controller_task>:
	,  NULL
	,  3
	,  NULL );
}

void fan_controller_task(void *pvParameters) {
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	00 d0       	rcall	.+0      	; 0x464 <fan_controller_task+0x6>
     464:	1f 92       	push	r1
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
	int16_t thresholdTemperature = 0;
	uint16_t thresholdHumidity = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(5000); 
	xLastWakeTime = xTaskGetTickCount();
     46a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xTaskGetTickCount>
     46e:	69 83       	std	Y+1, r22	; 0x01
     470:	7a 83       	std	Y+2, r23	; 0x02
     472:	8b 83       	std	Y+3, r24	; 0x03
     474:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     476:	46 e3       	ldi	r20, 0x36	; 54
     478:	51 e0       	ldi	r21, 0x01	; 1
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	0e 94 71 11 	call	0x22e2	; 0x22e2 <xTaskDelayUntil>
		thresholdTemperature = get_max_temperature();
     486:	e8 df       	rcall	.-48     	; 0x458 <get_max_temperature>
     488:	7c 01       	movw	r14, r24
		
		measure_Temp_Hum();
     48a:	0e 94 0c 1c 	call	0x3818	; 0x3818 <measure_Temp_Hum>
		currentTemperature = TempHumSensor_getTemp();
     48e:	0e 94 57 1c 	call	0x38ae	; 0x38ae <TempHumSensor_getTemp>
     492:	8c 01       	movw	r16, r24
		currentHumidity = TempHumSensor_getHum();
     494:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <TempHumSensor_getHum>
		
		printf("Current temp: %d\n", currentTemperature/10);
     498:	c8 01       	movw	r24, r16
     49a:	6a e0       	ldi	r22, 0x0A	; 10
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	0e 94 75 30 	call	0x60ea	; 0x60ea <__divmodhi4>
     4a2:	8b 01       	movw	r16, r22
     4a4:	1f 93       	push	r17
     4a6:	6f 93       	push	r22
     4a8:	83 ea       	ldi	r24, 0xA3	; 163
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	9f 93       	push	r25
     4ae:	8f 93       	push	r24
     4b0:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
		printf("Threshold temp: %d\n", thresholdTemperature);
     4b4:	ff 92       	push	r15
     4b6:	ef 92       	push	r14
     4b8:	85 eb       	ldi	r24, 0xB5	; 181
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	9f 93       	push	r25
     4be:	8f 93       	push	r24
     4c0:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
		if(currentTemperature/10 > thresholdTemperature){
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	e0 16       	cp	r14, r16
     4d0:	f1 06       	cpc	r15, r17
     4d2:	14 f4       	brge	.+4      	; 0x4d8 <fan_controller_task+0x7a>
			PORTA = 0x00;
     4d4:	12 b8       	out	0x02, r1	; 2
     4d6:	cf cf       	rjmp	.-98     	; 0x476 <fan_controller_task+0x18>
		}
		else{
			PORTA = 0xFF;
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	82 b9       	out	0x02, r24	; 2
     4dc:	cc cf       	rjmp	.-104    	; 0x476 <fan_controller_task+0x18>

000004de <initialize_fan_controller>:
#include "Configuration.h"
#include "FanController.h"

void fan_controller_task(void *pvParameters);

void initialize_fan_controller(){
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
	
	DDRA = 0xFF;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFF;
     4e8:	82 b9       	out	0x02, r24	; 2
	
	xTaskCreate(
     4ea:	e1 2c       	mov	r14, r1
     4ec:	f1 2c       	mov	r15, r1
     4ee:	03 e0       	ldi	r16, 0x03	; 3
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 ec       	ldi	r20, 0xC0	; 192
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	69 ec       	ldi	r22, 0xC9	; 201
     4fa:	72 e0       	ldi	r23, 0x02	; 2
     4fc:	8f e2       	ldi	r24, 0x2F	; 47
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xTaskCreate>
	,  "FanController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  3
	,  NULL );
}
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	08 95       	ret

0000050c <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     50c:	0f 93       	push	r16
     50e:	01 11       	cpse	r16, r1
     510:	0c c0       	rjmp	.+24     	; 0x52a <prvTestWaitCondition+0x1e>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	82 23       	and	r24, r18
     518:	93 23       	and	r25, r19
     51a:	a4 23       	and	r26, r20
     51c:	b5 23       	and	r27, r21
     51e:	89 2b       	or	r24, r25
     520:	8a 2b       	or	r24, r26
     522:	8b 2b       	or	r24, r27
     524:	79 f4       	brne	.+30     	; 0x544 <prvTestWaitCondition+0x38>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	10 c0       	rjmp	.+32     	; 0x54a <prvTestWaitCondition+0x3e>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	82 23       	and	r24, r18
     530:	93 23       	and	r25, r19
     532:	a4 23       	and	r26, r20
     534:	b5 23       	and	r27, r21
     536:	28 17       	cp	r18, r24
     538:	39 07       	cpc	r19, r25
     53a:	4a 07       	cpc	r20, r26
     53c:	5b 07       	cpc	r21, r27
     53e:	21 f0       	breq	.+8      	; 0x548 <prvTestWaitCondition+0x3c>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	03 c0       	rjmp	.+6      	; 0x54a <prvTestWaitCondition+0x3e>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	01 c0       	rjmp	.+2      	; 0x54a <prvTestWaitCondition+0x3e>
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <xEventGroupCreate>:
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	8f e0       	ldi	r24, 0x0F	; 15
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	af d1       	rcall	.+862    	; 0x8b6 <pvPortMalloc>
     558:	ec 01       	movw	r28, r24
     55a:	00 97       	sbiw	r24, 0x00	; 0
     55c:	39 f0       	breq	.+14     	; 0x56c <xEventGroupCreate+0x1e>
     55e:	fc 01       	movw	r30, r24
     560:	11 92       	st	Z+, r1
     562:	11 92       	st	Z+, r1
     564:	11 92       	st	Z+, r1
     566:	11 92       	st	Z+, r1
     568:	cf 01       	movw	r24, r30
     56a:	8b d2       	rcall	.+1302   	; 0xa82 <vListInitialise>
     56c:	ce 01       	movw	r24, r28
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <xEventGroupWaitBits>:
     574:	2f 92       	push	r2
     576:	3f 92       	push	r3
     578:	4f 92       	push	r4
     57a:	5f 92       	push	r5
     57c:	6f 92       	push	r6
     57e:	7f 92       	push	r7
     580:	8f 92       	push	r8
     582:	9f 92       	push	r9
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	ec 01       	movw	r28, r24
     59a:	4a 01       	movw	r8, r20
     59c:	5b 01       	movw	r10, r22
     59e:	62 2e       	mov	r6, r18
     5a0:	70 2e       	mov	r7, r16
     5a2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vTaskSuspendAll>
     5a6:	28 80       	ld	r2, Y
     5a8:	39 80       	ldd	r3, Y+1	; 0x01
     5aa:	4a 80       	ldd	r4, Y+2	; 0x02
     5ac:	5b 80       	ldd	r5, Y+3	; 0x03
     5ae:	a5 01       	movw	r20, r10
     5b0:	94 01       	movw	r18, r8
     5b2:	c2 01       	movw	r24, r4
     5b4:	b1 01       	movw	r22, r2
     5b6:	aa df       	rcall	.-172    	; 0x50c <prvTestWaitCondition>
     5b8:	88 23       	and	r24, r24
     5ba:	a1 f0       	breq	.+40     	; 0x5e4 <xEventGroupWaitBits+0x70>
     5bc:	66 20       	and	r6, r6
     5be:	89 f1       	breq	.+98     	; 0x622 <xEventGroupWaitBits+0xae>
     5c0:	d5 01       	movw	r26, r10
     5c2:	c4 01       	movw	r24, r8
     5c4:	80 95       	com	r24
     5c6:	90 95       	com	r25
     5c8:	a0 95       	com	r26
     5ca:	b0 95       	com	r27
     5cc:	82 21       	and	r24, r2
     5ce:	93 21       	and	r25, r3
     5d0:	a4 21       	and	r26, r4
     5d2:	b5 21       	and	r27, r5
     5d4:	88 83       	st	Y, r24
     5d6:	99 83       	std	Y+1, r25	; 0x01
     5d8:	aa 83       	std	Y+2, r26	; 0x02
     5da:	bb 83       	std	Y+3, r27	; 0x03
     5dc:	c1 2c       	mov	r12, r1
     5de:	d1 2c       	mov	r13, r1
     5e0:	76 01       	movw	r14, r12
     5e2:	22 c0       	rjmp	.+68     	; 0x628 <xEventGroupWaitBits+0xb4>
     5e4:	c1 14       	cp	r12, r1
     5e6:	d1 04       	cpc	r13, r1
     5e8:	e1 04       	cpc	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	e9 f0       	breq	.+58     	; 0x628 <xEventGroupWaitBits+0xb4>
     5ee:	61 10       	cpse	r6, r1
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <xEventGroupWaitBits+0x86>
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	ba 01       	movw	r22, r20
     5f8:	04 c0       	rjmp	.+8      	; 0x602 <xEventGroupWaitBits+0x8e>
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	71 e0       	ldi	r23, 0x01	; 1
     602:	71 10       	cpse	r7, r1
     604:	74 60       	ori	r23, 0x04	; 4
     606:	48 29       	or	r20, r8
     608:	59 29       	or	r21, r9
     60a:	6a 29       	or	r22, r10
     60c:	7b 29       	or	r23, r11
     60e:	97 01       	movw	r18, r14
     610:	86 01       	movw	r16, r12
     612:	ce 01       	movw	r24, r28
     614:	04 96       	adiw	r24, 0x04	; 4
     616:	0e 94 6d 12 	call	0x24da	; 0x24da <vTaskPlaceOnUnorderedEventList>
     61a:	21 2c       	mov	r2, r1
     61c:	31 2c       	mov	r3, r1
     61e:	21 01       	movw	r4, r2
     620:	03 c0       	rjmp	.+6      	; 0x628 <xEventGroupWaitBits+0xb4>
     622:	c1 2c       	mov	r12, r1
     624:	d1 2c       	mov	r13, r1
     626:	76 01       	movw	r14, r12
     628:	0e 94 95 10 	call	0x212a	; 0x212a <xTaskResumeAll>
     62c:	cd 28       	or	r12, r13
     62e:	ce 28       	or	r12, r14
     630:	cf 28       	or	r12, r15
     632:	59 f1       	breq	.+86     	; 0x68a <xEventGroupWaitBits+0x116>
     634:	81 11       	cpse	r24, r1
     636:	01 c0       	rjmp	.+2      	; 0x63a <xEventGroupWaitBits+0xc6>
     638:	f2 d2       	rcall	.+1508   	; 0xc1e <vPortYield>
     63a:	0e 94 41 15 	call	0x2a82	; 0x2a82 <uxTaskResetEventItemValue>
     63e:	6b 01       	movw	r12, r22
     640:	7c 01       	movw	r14, r24
     642:	91 fd       	sbrc	r25, 1
     644:	1f c0       	rjmp	.+62     	; 0x684 <xEventGroupWaitBits+0x110>
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	0f 92       	push	r0
     64c:	c8 80       	ld	r12, Y
     64e:	d9 80       	ldd	r13, Y+1	; 0x01
     650:	ea 80       	ldd	r14, Y+2	; 0x02
     652:	fb 80       	ldd	r15, Y+3	; 0x03
     654:	07 2d       	mov	r16, r7
     656:	a5 01       	movw	r20, r10
     658:	94 01       	movw	r18, r8
     65a:	c7 01       	movw	r24, r14
     65c:	b6 01       	movw	r22, r12
     65e:	56 df       	rcall	.-340    	; 0x50c <prvTestWaitCondition>
     660:	88 23       	and	r24, r24
     662:	71 f0       	breq	.+28     	; 0x680 <xEventGroupWaitBits+0x10c>
     664:	66 20       	and	r6, r6
     666:	61 f0       	breq	.+24     	; 0x680 <xEventGroupWaitBits+0x10c>
     668:	80 94       	com	r8
     66a:	90 94       	com	r9
     66c:	a0 94       	com	r10
     66e:	b0 94       	com	r11
     670:	8c 20       	and	r8, r12
     672:	9d 20       	and	r9, r13
     674:	ae 20       	and	r10, r14
     676:	bf 20       	and	r11, r15
     678:	88 82       	st	Y, r8
     67a:	99 82       	std	Y+1, r9	; 0x01
     67c:	aa 82       	std	Y+2, r10	; 0x02
     67e:	bb 82       	std	Y+3, r11	; 0x03
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	16 01       	movw	r2, r12
     686:	27 01       	movw	r4, r14
     688:	55 24       	eor	r5, r5
     68a:	c2 01       	movw	r24, r4
     68c:	b1 01       	movw	r22, r2
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	af 90       	pop	r10
     6a2:	9f 90       	pop	r9
     6a4:	8f 90       	pop	r8
     6a6:	7f 90       	pop	r7
     6a8:	6f 90       	pop	r6
     6aa:	5f 90       	pop	r5
     6ac:	4f 90       	pop	r4
     6ae:	3f 90       	pop	r3
     6b0:	2f 90       	pop	r2
     6b2:	08 95       	ret

000006b4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     6b4:	4f 92       	push	r4
     6b6:	5f 92       	push	r5
     6b8:	6f 92       	push	r6
     6ba:	7f 92       	push	r7
     6bc:	af 92       	push	r10
     6be:	bf 92       	push	r11
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
     6d2:	6a 01       	movw	r12, r20
     6d4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     6d6:	8c 01       	movw	r16, r24
     6d8:	09 5f       	subi	r16, 0xF9	; 249
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     6dc:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     6e0:	eb 85       	ldd	r30, Y+11	; 0x0b
     6e2:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     6e4:	88 81       	ld	r24, Y
     6e6:	99 81       	ldd	r25, Y+1	; 0x01
     6e8:	aa 81       	ldd	r26, Y+2	; 0x02
     6ea:	bb 81       	ldd	r27, Y+3	; 0x03
     6ec:	c8 2a       	or	r12, r24
     6ee:	d9 2a       	or	r13, r25
     6f0:	ea 2a       	or	r14, r26
     6f2:	fb 2a       	or	r15, r27
     6f4:	c8 82       	st	Y, r12
     6f6:	d9 82       	std	Y+1, r13	; 0x01
     6f8:	ea 82       	std	Y+2, r14	; 0x02
     6fa:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     6fc:	c1 2c       	mov	r12, r1
     6fe:	d1 2c       	mov	r13, r1
     700:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     702:	3d c0       	rjmp	.+122    	; 0x77e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     704:	a4 80       	ldd	r10, Z+4	; 0x04
     706:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	a2 81       	ldd	r26, Z+2	; 0x02
     70e:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     710:	ac 01       	movw	r20, r24
     712:	bd 01       	movw	r22, r26
     714:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     716:	b2 fd       	sbrc	r27, 2
     718:	0e c0       	rjmp	.+28     	; 0x736 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     71a:	48 80       	ld	r4, Y
     71c:	59 80       	ldd	r5, Y+1	; 0x01
     71e:	6a 80       	ldd	r6, Y+2	; 0x02
     720:	7b 80       	ldd	r7, Y+3	; 0x03
     722:	44 22       	and	r4, r20
     724:	55 22       	and	r5, r21
     726:	66 22       	and	r6, r22
     728:	77 22       	and	r7, r23
     72a:	45 28       	or	r4, r5
     72c:	46 28       	or	r4, r6
     72e:	47 28       	or	r4, r7
     730:	89 f4       	brne	.+34     	; 0x754 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	12 c0       	rjmp	.+36     	; 0x75a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     736:	48 80       	ld	r4, Y
     738:	59 80       	ldd	r5, Y+1	; 0x01
     73a:	6a 80       	ldd	r6, Y+2	; 0x02
     73c:	7b 80       	ldd	r7, Y+3	; 0x03
     73e:	44 22       	and	r4, r20
     740:	55 22       	and	r5, r21
     742:	66 22       	and	r6, r22
     744:	77 22       	and	r7, r23
     746:	44 15       	cp	r20, r4
     748:	55 05       	cpc	r21, r5
     74a:	66 05       	cpc	r22, r6
     74c:	77 05       	cpc	r23, r7
     74e:	21 f0       	breq	.+8      	; 0x758 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	03 c0       	rjmp	.+6      	; 0x75a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	01 c0       	rjmp	.+2      	; 0x75a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     758:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     75a:	22 23       	and	r18, r18
     75c:	71 f0       	breq	.+28     	; 0x77a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     75e:	b0 ff       	sbrs	r27, 0
     760:	04 c0       	rjmp	.+8      	; 0x76a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     762:	c4 2a       	or	r12, r20
     764:	d5 2a       	or	r13, r21
     766:	e6 2a       	or	r14, r22
     768:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     76a:	48 81       	ld	r20, Y
     76c:	59 81       	ldd	r21, Y+1	; 0x01
     76e:	6a 81       	ldd	r22, Y+2	; 0x02
     770:	7b 81       	ldd	r23, Y+3	; 0x03
     772:	72 60       	ori	r23, 0x02	; 2
     774:	cf 01       	movw	r24, r30
     776:	0e 94 a8 13 	call	0x2750	; 0x2750 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     77a:	ea 2d       	mov	r30, r10
     77c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     77e:	e0 17       	cp	r30, r16
     780:	f1 07       	cpc	r31, r17
     782:	09 f0       	breq	.+2      	; 0x786 <xEventGroupSetBits+0xd2>
     784:	bf cf       	rjmp	.-130    	; 0x704 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     786:	c0 94       	com	r12
     788:	d0 94       	com	r13
     78a:	e0 94       	com	r14
     78c:	f0 94       	com	r15
     78e:	88 81       	ld	r24, Y
     790:	99 81       	ldd	r25, Y+1	; 0x01
     792:	aa 81       	ldd	r26, Y+2	; 0x02
     794:	bb 81       	ldd	r27, Y+3	; 0x03
     796:	c8 22       	and	r12, r24
     798:	d9 22       	and	r13, r25
     79a:	ea 22       	and	r14, r26
     79c:	fb 22       	and	r15, r27
     79e:	c8 82       	st	Y, r12
     7a0:	d9 82       	std	Y+1, r13	; 0x01
     7a2:	ea 82       	std	Y+2, r14	; 0x02
     7a4:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     7a6:	0e 94 95 10 	call	0x212a	; 0x212a <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     7aa:	68 81       	ld	r22, Y
     7ac:	79 81       	ldd	r23, Y+1	; 0x01
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	af 90       	pop	r10
     7c6:	7f 90       	pop	r7
     7c8:	6f 90       	pop	r6
     7ca:	5f 90       	pop	r5
     7cc:	4f 90       	pop	r4
     7ce:	08 95       	ret

000007d0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     7d0:	e2 e3       	ldi	r30, 0x32	; 50
     7d2:	f8 e0       	ldi	r31, 0x08	; 8
     7d4:	a6 e3       	ldi	r26, 0x36	; 54
     7d6:	b8 e0       	ldi	r27, 0x08	; 8
     7d8:	b1 83       	std	Z+1, r27	; 0x01
     7da:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     7dc:	13 82       	std	Z+3, r1	; 0x03
     7de:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     7e0:	ee ed       	ldi	r30, 0xDE	; 222
     7e2:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     7e4:	f0 93 31 08 	sts	0x0831, r31	; 0x800831 <pxEnd+0x1>
     7e8:	e0 93 30 08 	sts	0x0830, r30	; 0x800830 <pxEnd>
    pxEnd->xBlockSize = 0;
     7ec:	13 82       	std	Z+3, r1	; 0x03
     7ee:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     7f0:	11 82       	std	Z+1, r1	; 0x01
     7f2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     7f4:	88 ea       	ldi	r24, 0xA8	; 168
     7f6:	9d e0       	ldi	r25, 0x0D	; 13
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 93       	st	X, r25
     7fc:	8e 93       	st	-X, r24
     7fe:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     800:	ed 93       	st	X+, r30
     802:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     804:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <xMinimumEverFreeBytesRemaining+0x1>
     808:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     80c:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <xFreeBytesRemaining+0x1>
     810:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e8       	ldi	r25, 0x80	; 128
     818:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__data_end+0x1>
     81c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__data_end>
     820:	08 95       	ret

00000822 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     828:	a2 e3       	ldi	r26, 0x32	; 50
     82a:	b8 e0       	ldi	r27, 0x08	; 8
     82c:	01 c0       	rjmp	.+2      	; 0x830 <prvInsertBlockIntoFreeList+0xe>
     82e:	df 01       	movw	r26, r30
     830:	ed 91       	ld	r30, X+
     832:	fc 91       	ld	r31, X
     834:	11 97       	sbiw	r26, 0x01	; 1
     836:	ec 17       	cp	r30, r28
     838:	fd 07       	cpc	r31, r29
     83a:	c8 f3       	brcs	.-14     	; 0x82e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     83c:	12 96       	adiw	r26, 0x02	; 2
     83e:	8d 91       	ld	r24, X+
     840:	9c 91       	ld	r25, X
     842:	13 97       	sbiw	r26, 0x03	; 3
     844:	9d 01       	movw	r18, r26
     846:	28 0f       	add	r18, r24
     848:	39 1f       	adc	r19, r25
     84a:	c2 17       	cp	r28, r18
     84c:	d3 07       	cpc	r29, r19
     84e:	49 f4       	brne	.+18     	; 0x862 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     850:	2a 81       	ldd	r18, Y+2	; 0x02
     852:	3b 81       	ldd	r19, Y+3	; 0x03
     854:	82 0f       	add	r24, r18
     856:	93 1f       	adc	r25, r19
     858:	13 96       	adiw	r26, 0x03	; 3
     85a:	9c 93       	st	X, r25
     85c:	8e 93       	st	-X, r24
     85e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     860:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	9b 81       	ldd	r25, Y+3	; 0x03
     866:	9e 01       	movw	r18, r28
     868:	28 0f       	add	r18, r24
     86a:	39 1f       	adc	r19, r25
     86c:	e2 17       	cp	r30, r18
     86e:	f3 07       	cpc	r31, r19
     870:	c1 f4       	brne	.+48     	; 0x8a2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     872:	20 91 30 08 	lds	r18, 0x0830	; 0x800830 <pxEnd>
     876:	30 91 31 08 	lds	r19, 0x0831	; 0x800831 <pxEnd+0x1>
     87a:	e2 17       	cp	r30, r18
     87c:	f3 07       	cpc	r31, r19
     87e:	71 f0       	breq	.+28     	; 0x89c <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     880:	22 81       	ldd	r18, Z+2	; 0x02
     882:	33 81       	ldd	r19, Z+3	; 0x03
     884:	82 0f       	add	r24, r18
     886:	93 1f       	adc	r25, r19
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     88c:	ed 91       	ld	r30, X+
     88e:	fc 91       	ld	r31, X
     890:	11 97       	sbiw	r26, 0x01	; 1
     892:	80 81       	ld	r24, Z
     894:	91 81       	ldd	r25, Z+1	; 0x01
     896:	99 83       	std	Y+1, r25	; 0x01
     898:	88 83       	st	Y, r24
     89a:	05 c0       	rjmp	.+10     	; 0x8a6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     89c:	39 83       	std	Y+1, r19	; 0x01
     89e:	28 83       	st	Y, r18
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     8a2:	f9 83       	std	Y+1, r31	; 0x01
     8a4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     8a6:	ca 17       	cp	r28, r26
     8a8:	db 07       	cpc	r29, r27
     8aa:	11 f0       	breq	.+4      	; 0x8b0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     8ac:	cd 93       	st	X+, r28
     8ae:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     8c4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     8c8:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <pxEnd>
     8cc:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <pxEnd+0x1>
     8d0:	89 2b       	or	r24, r25
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     8d4:	7d df       	rcall	.-262    	; 0x7d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     8d6:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__data_end>
     8da:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <__data_end+0x1>
     8de:	80 23       	and	r24, r16
     8e0:	91 23       	and	r25, r17
     8e2:	89 2b       	or	r24, r25
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <pvPortMalloc+0x32>
     8e6:	76 c0       	rjmp	.+236    	; 0x9d4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     8e8:	01 15       	cp	r16, r1
     8ea:	11 05       	cpc	r17, r1
     8ec:	49 f0       	breq	.+18     	; 0x900 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     8ee:	c8 01       	movw	r24, r16
     8f0:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     8f2:	08 17       	cp	r16, r24
     8f4:	19 07       	cpc	r17, r25
     8f6:	18 f0       	brcs	.+6      	; 0x8fe <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     8fe:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     900:	01 15       	cp	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	09 f4       	brne	.+2      	; 0x908 <pvPortMalloc+0x52>
     906:	69 c0       	rjmp	.+210    	; 0x9da <pvPortMalloc+0x124>
     908:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <xFreeBytesRemaining>
     90c:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <xFreeBytesRemaining+0x1>
     910:	80 17       	cp	r24, r16
     912:	91 07       	cpc	r25, r17
     914:	08 f4       	brcc	.+2      	; 0x918 <pvPortMalloc+0x62>
     916:	64 c0       	rjmp	.+200    	; 0x9e0 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     918:	c0 91 32 08 	lds	r28, 0x0832	; 0x800832 <xStart>
     91c:	d0 91 33 08 	lds	r29, 0x0833	; 0x800833 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     920:	e2 e3       	ldi	r30, 0x32	; 50
     922:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     924:	02 c0       	rjmp	.+4      	; 0x92a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     926:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     928:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     92a:	8a 81       	ldd	r24, Y+2	; 0x02
     92c:	9b 81       	ldd	r25, Y+3	; 0x03
     92e:	80 17       	cp	r24, r16
     930:	91 07       	cpc	r25, r17
     932:	20 f4       	brcc	.+8      	; 0x93c <pvPortMalloc+0x86>
     934:	88 81       	ld	r24, Y
     936:	99 81       	ldd	r25, Y+1	; 0x01
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	a9 f7       	brne	.-22     	; 0x926 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     93c:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <pxEnd>
     940:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <pxEnd+0x1>
     944:	c8 17       	cp	r28, r24
     946:	d9 07       	cpc	r29, r25
     948:	09 f4       	brne	.+2      	; 0x94c <pvPortMalloc+0x96>
     94a:	4d c0       	rjmp	.+154    	; 0x9e6 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     94c:	e0 80       	ld	r14, Z
     94e:	f1 80       	ldd	r15, Z+1	; 0x01
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	e8 0e       	add	r14, r24
     954:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     956:	88 81       	ld	r24, Y
     958:	99 81       	ldd	r25, Y+1	; 0x01
     95a:	91 83       	std	Z+1, r25	; 0x01
     95c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     95e:	2a 81       	ldd	r18, Y+2	; 0x02
     960:	3b 81       	ldd	r19, Y+3	; 0x03
     962:	20 1b       	sub	r18, r16
     964:	31 0b       	sbc	r19, r17
     966:	29 30       	cpi	r18, 0x09	; 9
     968:	31 05       	cpc	r19, r1
     96a:	48 f0       	brcs	.+18     	; 0x97e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     96c:	ce 01       	movw	r24, r28
     96e:	80 0f       	add	r24, r16
     970:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     972:	fc 01       	movw	r30, r24
     974:	33 83       	std	Z+3, r19	; 0x03
     976:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     978:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     97a:	0a 83       	std	Y+2, r16	; 0x02
     97c:	52 df       	rcall	.-348    	; 0x822 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     97e:	2a 81       	ldd	r18, Y+2	; 0x02
     980:	3b 81       	ldd	r19, Y+3	; 0x03
     982:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <xFreeBytesRemaining>
     986:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <xFreeBytesRemaining+0x1>
     98a:	82 1b       	sub	r24, r18
     98c:	93 0b       	sbc	r25, r19
     98e:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <xFreeBytesRemaining+0x1>
     992:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     996:	40 91 2c 08 	lds	r20, 0x082C	; 0x80082c <xMinimumEverFreeBytesRemaining>
     99a:	50 91 2d 08 	lds	r21, 0x082D	; 0x80082d <xMinimumEverFreeBytesRemaining+0x1>
     99e:	84 17       	cp	r24, r20
     9a0:	95 07       	cpc	r25, r21
     9a2:	20 f4       	brcc	.+8      	; 0x9ac <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     9a4:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <xMinimumEverFreeBytesRemaining+0x1>
     9a8:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     9ac:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <__data_end>
     9b0:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <__data_end+0x1>
     9b4:	28 2b       	or	r18, r24
     9b6:	39 2b       	or	r19, r25
     9b8:	3b 83       	std	Y+3, r19	; 0x03
     9ba:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     9bc:	19 82       	std	Y+1, r1	; 0x01
     9be:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     9c0:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <xNumberOfSuccessfulAllocations>
     9c4:	90 91 2b 08 	lds	r25, 0x082B	; 0x80082b <xNumberOfSuccessfulAllocations+0x1>
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	90 93 2b 08 	sts	0x082B, r25	; 0x80082b <xNumberOfSuccessfulAllocations+0x1>
     9ce:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <xNumberOfSuccessfulAllocations>
     9d2:	0b c0       	rjmp	.+22     	; 0x9ea <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     9d4:	e1 2c       	mov	r14, r1
     9d6:	f1 2c       	mov	r15, r1
     9d8:	08 c0       	rjmp	.+16     	; 0x9ea <pvPortMalloc+0x134>
     9da:	e1 2c       	mov	r14, r1
     9dc:	f1 2c       	mov	r15, r1
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <pvPortMalloc+0x134>
     9e0:	e1 2c       	mov	r14, r1
     9e2:	f1 2c       	mov	r15, r1
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <pvPortMalloc+0x134>
     9e6:	e1 2c       	mov	r14, r1
     9e8:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     9ea:	0e 94 95 10 	call	0x212a	; 0x212a <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     9ee:	e1 14       	cp	r14, r1
     9f0:	f1 04       	cpc	r15, r1
     9f2:	11 f4       	brne	.+4      	; 0x9f8 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     9f4:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     9f8:	c7 01       	movw	r24, r14
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	08 95       	ret

00000a08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	91 f1       	breq	.+100    	; 0xa78 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     a14:	ec 01       	movw	r28, r24
     a16:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     a18:	4a 81       	ldd	r20, Y+2	; 0x02
     a1a:	5b 81       	ldd	r21, Y+3	; 0x03
     a1c:	20 91 26 08 	lds	r18, 0x0826	; 0x800826 <__data_end>
     a20:	30 91 27 08 	lds	r19, 0x0827	; 0x800827 <__data_end+0x1>
     a24:	ba 01       	movw	r22, r20
     a26:	62 23       	and	r22, r18
     a28:	73 23       	and	r23, r19
     a2a:	67 2b       	or	r22, r23
     a2c:	29 f1       	breq	.+74     	; 0xa78 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     a2e:	68 81       	ld	r22, Y
     a30:	79 81       	ldd	r23, Y+1	; 0x01
     a32:	67 2b       	or	r22, r23
     a34:	09 f5       	brne	.+66     	; 0xa78 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     a36:	20 95       	com	r18
     a38:	30 95       	com	r19
     a3a:	24 23       	and	r18, r20
     a3c:	35 23       	and	r19, r21
     a3e:	3b 83       	std	Y+3, r19	; 0x03
     a40:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     a42:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	9b 81       	ldd	r25, Y+3	; 0x03
     a4a:	20 91 2e 08 	lds	r18, 0x082E	; 0x80082e <xFreeBytesRemaining>
     a4e:	30 91 2f 08 	lds	r19, 0x082F	; 0x80082f <xFreeBytesRemaining+0x1>
     a52:	82 0f       	add	r24, r18
     a54:	93 1f       	adc	r25, r19
     a56:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <xFreeBytesRemaining+0x1>
     a5a:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     a5e:	ce 01       	movw	r24, r28
     a60:	e0 de       	rcall	.-576    	; 0x822 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     a62:	80 91 28 08 	lds	r24, 0x0828	; 0x800828 <xNumberOfSuccessfulFrees>
     a66:	90 91 29 08 	lds	r25, 0x0829	; 0x800829 <xNumberOfSuccessfulFrees+0x1>
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <xNumberOfSuccessfulFrees+0x1>
     a70:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     a74:	0e 94 95 10 	call	0x212a	; 0x212a <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	08 95       	ret

00000a82 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     a82:	fc 01       	movw	r30, r24
     a84:	03 96       	adiw	r24, 0x03	; 3
     a86:	92 83       	std	Z+2, r25	; 0x02
     a88:	81 83       	std	Z+1, r24	; 0x01
     a8a:	4f ef       	ldi	r20, 0xFF	; 255
     a8c:	5f ef       	ldi	r21, 0xFF	; 255
     a8e:	ba 01       	movw	r22, r20
     a90:	43 83       	std	Z+3, r20	; 0x03
     a92:	54 83       	std	Z+4, r21	; 0x04
     a94:	65 83       	std	Z+5, r22	; 0x05
     a96:	76 83       	std	Z+6, r23	; 0x06
     a98:	90 87       	std	Z+8, r25	; 0x08
     a9a:	87 83       	std	Z+7, r24	; 0x07
     a9c:	92 87       	std	Z+10, r25	; 0x0a
     a9e:	81 87       	std	Z+9, r24	; 0x09
     aa0:	10 82       	st	Z, r1
     aa2:	08 95       	ret

00000aa4 <vListInitialiseItem>:
     aa4:	fc 01       	movw	r30, r24
     aa6:	13 86       	std	Z+11, r1	; 0x0b
     aa8:	12 86       	std	Z+10, r1	; 0x0a
     aaa:	08 95       	ret

00000aac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     ab6:	08 81       	ld	r16, Y
     ab8:	19 81       	ldd	r17, Y+1	; 0x01
     aba:	2a 81       	ldd	r18, Y+2	; 0x02
     abc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     abe:	0f 3f       	cpi	r16, 0xFF	; 255
     ac0:	4f ef       	ldi	r20, 0xFF	; 255
     ac2:	14 07       	cpc	r17, r20
     ac4:	24 07       	cpc	r18, r20
     ac6:	34 07       	cpc	r19, r20
     ac8:	21 f4       	brne	.+8      	; 0xad2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     aca:	fc 01       	movw	r30, r24
     acc:	a1 85       	ldd	r26, Z+9	; 0x09
     ace:	b2 85       	ldd	r27, Z+10	; 0x0a
     ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     ad2:	dc 01       	movw	r26, r24
     ad4:	13 96       	adiw	r26, 0x03	; 3
     ad6:	01 c0       	rjmp	.+2      	; 0xada <vListInsert+0x2e>
     ad8:	df 01       	movw	r26, r30
     ada:	14 96       	adiw	r26, 0x04	; 4
     adc:	ed 91       	ld	r30, X+
     ade:	fc 91       	ld	r31, X
     ae0:	15 97       	sbiw	r26, 0x05	; 5
     ae2:	40 81       	ld	r20, Z
     ae4:	51 81       	ldd	r21, Z+1	; 0x01
     ae6:	62 81       	ldd	r22, Z+2	; 0x02
     ae8:	73 81       	ldd	r23, Z+3	; 0x03
     aea:	04 17       	cp	r16, r20
     aec:	15 07       	cpc	r17, r21
     aee:	26 07       	cpc	r18, r22
     af0:	37 07       	cpc	r19, r23
     af2:	90 f7       	brcc	.-28     	; 0xad8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     af4:	14 96       	adiw	r26, 0x04	; 4
     af6:	ed 91       	ld	r30, X+
     af8:	fc 91       	ld	r31, X
     afa:	15 97       	sbiw	r26, 0x05	; 5
     afc:	fd 83       	std	Y+5, r31	; 0x05
     afe:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b00:	d7 83       	std	Z+7, r29	; 0x07
     b02:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     b04:	bf 83       	std	Y+7, r27	; 0x07
     b06:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     b08:	15 96       	adiw	r26, 0x05	; 5
     b0a:	dc 93       	st	X, r29
     b0c:	ce 93       	st	-X, r28
     b0e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     b10:	9b 87       	std	Y+11, r25	; 0x0b
     b12:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     b14:	fc 01       	movw	r30, r24
     b16:	20 81       	ld	r18, Z
     b18:	2f 5f       	subi	r18, 0xFF	; 255
     b1a:	20 83       	st	Z, r18
}
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	08 95       	ret

00000b26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     b2c:	a2 85       	ldd	r26, Z+10	; 0x0a
     b2e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b30:	c4 81       	ldd	r28, Z+4	; 0x04
     b32:	d5 81       	ldd	r29, Z+5	; 0x05
     b34:	86 81       	ldd	r24, Z+6	; 0x06
     b36:	97 81       	ldd	r25, Z+7	; 0x07
     b38:	9f 83       	std	Y+7, r25	; 0x07
     b3a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b3c:	c6 81       	ldd	r28, Z+6	; 0x06
     b3e:	d7 81       	ldd	r29, Z+7	; 0x07
     b40:	84 81       	ldd	r24, Z+4	; 0x04
     b42:	95 81       	ldd	r25, Z+5	; 0x05
     b44:	9d 83       	std	Y+5, r25	; 0x05
     b46:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     b48:	11 96       	adiw	r26, 0x01	; 1
     b4a:	8d 91       	ld	r24, X+
     b4c:	9c 91       	ld	r25, X
     b4e:	12 97       	sbiw	r26, 0x02	; 2
     b50:	e8 17       	cp	r30, r24
     b52:	f9 07       	cpc	r31, r25
     b54:	31 f4       	brne	.+12     	; 0xb62 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b56:	86 81       	ldd	r24, Z+6	; 0x06
     b58:	97 81       	ldd	r25, Z+7	; 0x07
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	9c 93       	st	X, r25
     b5e:	8e 93       	st	-X, r24
     b60:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b62:	13 86       	std	Z+11, r1	; 0x0b
     b64:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     b66:	8c 91       	ld	r24, X
     b68:	81 50       	subi	r24, 0x01	; 1
     b6a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     b6c:	8c 91       	ld	r24, X
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     b74:	a8 95       	wdr
     b76:	90 ec       	ldi	r25, 0xC0	; 192
     b78:	88 e1       	ldi	r24, 0x18	; 24
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	a8 95       	wdr
     b80:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     b8a:	08 95       	ret

00000b8c <pxPortInitialiseStack>:
     b8c:	fc 01       	movw	r30, r24
     b8e:	60 83       	st	Z, r22
     b90:	31 97       	sbiw	r30, 0x01	; 1
     b92:	70 83       	st	Z, r23
     b94:	31 97       	sbiw	r30, 0x01	; 1
     b96:	10 82       	st	Z, r1
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	10 82       	st	Z, r1
     b9c:	31 97       	sbiw	r30, 0x01	; 1
     b9e:	20 e8       	ldi	r18, 0x80	; 128
     ba0:	20 83       	st	Z, r18
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	10 82       	st	Z, r1
     ba6:	31 97       	sbiw	r30, 0x01	; 1
     ba8:	10 82       	st	Z, r1
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	10 82       	st	Z, r1
     bae:	77 97       	sbiw	r30, 0x17	; 23
     bb0:	40 83       	st	Z, r20
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	50 83       	st	Z, r21
     bb6:	86 97       	sbiw	r24, 0x26	; 38
     bb8:	08 95       	ret

00000bba <xPortStartScheduler>:
     bba:	dc df       	rcall	.-72     	; 0xb74 <prvSetupTimerInterrupt>
     bbc:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
     bc0:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
     bc4:	cd 91       	ld	r28, X+
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	dd 91       	ld	r29, X+
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	7f 91       	pop	r23
     bde:	6f 91       	pop	r22
     be0:	5f 91       	pop	r21
     be2:	4f 91       	pop	r20
     be4:	3f 91       	pop	r19
     be6:	2f 91       	pop	r18
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	9f 90       	pop	r9
     bfa:	8f 90       	pop	r8
     bfc:	7f 90       	pop	r7
     bfe:	6f 90       	pop	r6
     c00:	5f 90       	pop	r5
     c02:	4f 90       	pop	r4
     c04:	3f 90       	pop	r3
     c06:	2f 90       	pop	r2
     c08:	1f 90       	pop	r1
     c0a:	0f 90       	pop	r0
     c0c:	0c be       	out	0x3c, r0	; 60
     c0e:	0f 90       	pop	r0
     c10:	0b be       	out	0x3b, r0	; 59
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	0f 90       	pop	r0
     c18:	08 95       	ret
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	08 95       	ret

00000c1e <vPortYield>:
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	0f 92       	push	r0
     c26:	0b b6       	in	r0, 0x3b	; 59
     c28:	0f 92       	push	r0
     c2a:	0c b6       	in	r0, 0x3c	; 60
     c2c:	0f 92       	push	r0
     c2e:	1f 92       	push	r1
     c30:	11 24       	eor	r1, r1
     c32:	2f 92       	push	r2
     c34:	3f 92       	push	r3
     c36:	4f 92       	push	r4
     c38:	5f 92       	push	r5
     c3a:	6f 92       	push	r6
     c3c:	7f 92       	push	r7
     c3e:	8f 92       	push	r8
     c40:	9f 92       	push	r9
     c42:	af 92       	push	r10
     c44:	bf 92       	push	r11
     c46:	cf 92       	push	r12
     c48:	df 92       	push	r13
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	2f 93       	push	r18
     c54:	3f 93       	push	r19
     c56:	4f 93       	push	r20
     c58:	5f 93       	push	r21
     c5a:	6f 93       	push	r22
     c5c:	7f 93       	push	r23
     c5e:	8f 93       	push	r24
     c60:	9f 93       	push	r25
     c62:	af 93       	push	r26
     c64:	bf 93       	push	r27
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ef 93       	push	r30
     c6c:	ff 93       	push	r31
     c6e:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
     c72:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
     c76:	0d b6       	in	r0, 0x3d	; 61
     c78:	0d 92       	st	X+, r0
     c7a:	0e b6       	in	r0, 0x3e	; 62
     c7c:	0d 92       	st	X+, r0
     c7e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <vTaskSwitchContext>
     c82:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
     c86:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
     c8a:	cd 91       	ld	r28, X+
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	dd 91       	ld	r29, X+
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	7f 91       	pop	r23
     ca4:	6f 91       	pop	r22
     ca6:	5f 91       	pop	r21
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	bf 90       	pop	r11
     cbc:	af 90       	pop	r10
     cbe:	9f 90       	pop	r9
     cc0:	8f 90       	pop	r8
     cc2:	7f 90       	pop	r7
     cc4:	6f 90       	pop	r6
     cc6:	5f 90       	pop	r5
     cc8:	4f 90       	pop	r4
     cca:	3f 90       	pop	r3
     ccc:	2f 90       	pop	r2
     cce:	1f 90       	pop	r1
     cd0:	0f 90       	pop	r0
     cd2:	0c be       	out	0x3c, r0	; 60
     cd4:	0f 90       	pop	r0
     cd6:	0b be       	out	0x3b, r0	; 59
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	08 95       	ret

00000ce0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	0f 92       	push	r0
     ce8:	0b b6       	in	r0, 0x3b	; 59
     cea:	0f 92       	push	r0
     cec:	0c b6       	in	r0, 0x3c	; 60
     cee:	0f 92       	push	r0
     cf0:	1f 92       	push	r1
     cf2:	11 24       	eor	r1, r1
     cf4:	2f 92       	push	r2
     cf6:	3f 92       	push	r3
     cf8:	4f 92       	push	r4
     cfa:	5f 92       	push	r5
     cfc:	6f 92       	push	r6
     cfe:	7f 92       	push	r7
     d00:	8f 92       	push	r8
     d02:	9f 92       	push	r9
     d04:	af 92       	push	r10
     d06:	bf 92       	push	r11
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
     d30:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
     d34:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
     d38:	0d b6       	in	r0, 0x3d	; 61
     d3a:	0d 92       	st	X+, r0
     d3c:	0e b6       	in	r0, 0x3e	; 62
     d3e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     d40:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     d42:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <xTaskIncrementTick>
     d46:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     d48:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     d4c:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
     d50:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
     d54:	cd 91       	ld	r28, X+
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	dd 91       	ld	r29, X+
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	bf 91       	pop	r27
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	cf 90       	pop	r12
     d84:	bf 90       	pop	r11
     d86:	af 90       	pop	r10
     d88:	9f 90       	pop	r9
     d8a:	8f 90       	pop	r8
     d8c:	7f 90       	pop	r7
     d8e:	6f 90       	pop	r6
     d90:	5f 90       	pop	r5
     d92:	4f 90       	pop	r4
     d94:	3f 90       	pop	r3
     d96:	2f 90       	pop	r2
     d98:	1f 90       	pop	r1
     d9a:	0f 90       	pop	r0
     d9c:	0c be       	out	0x3c, r0	; 60
     d9e:	0f 90       	pop	r0
     da0:	0b be       	out	0x3b, r0	; 59
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     da8:	08 95       	ret

00000daa <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     daa:	9a df       	rcall	.-204    	; 0xce0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     dac:	18 95       	reti

00000dae <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	0f 92       	push	r0
     db4:	fc 01       	movw	r30, r24
     db6:	86 8d       	ldd	r24, Z+30	; 0x1e
     db8:	81 11       	cpse	r24, r1
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <prvIsQueueEmpty+0x12>
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <prvIsQueueEmpty+0x14>
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0f 90       	pop	r0
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	08 95       	ret

00000dc8 <prvIsQueueFull>:
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	0f 92       	push	r0
     dce:	fc 01       	movw	r30, r24
     dd0:	26 8d       	ldd	r18, Z+30	; 0x1e
     dd2:	87 8d       	ldd	r24, Z+31	; 0x1f
     dd4:	28 13       	cpse	r18, r24
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <prvIsQueueFull+0x14>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	01 c0       	rjmp	.+2      	; 0xdde <prvIsQueueFull+0x16>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	08 95       	ret

00000de4 <prvCopyDataToQueue>:
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	ec 01       	movw	r28, r24
     dee:	04 2f       	mov	r16, r20
     df0:	1e 8d       	ldd	r17, Y+30	; 0x1e
     df2:	48 a1       	ldd	r20, Y+32	; 0x20
     df4:	41 11       	cpse	r20, r1
     df6:	0c c0       	rjmp	.+24     	; 0xe10 <prvCopyDataToQueue+0x2c>
     df8:	88 81       	ld	r24, Y
     dfa:	99 81       	ldd	r25, Y+1	; 0x01
     dfc:	89 2b       	or	r24, r25
     dfe:	09 f0       	breq	.+2      	; 0xe02 <prvCopyDataToQueue+0x1e>
     e00:	42 c0       	rjmp	.+132    	; 0xe86 <prvCopyDataToQueue+0xa2>
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	9d 81       	ldd	r25, Y+5	; 0x05
     e06:	0e 94 e6 14 	call	0x29cc	; 0x29cc <xTaskPriorityDisinherit>
     e0a:	1d 82       	std	Y+5, r1	; 0x05
     e0c:	1c 82       	std	Y+4, r1	; 0x04
     e0e:	42 c0       	rjmp	.+132    	; 0xe94 <prvCopyDataToQueue+0xb0>
     e10:	01 11       	cpse	r16, r1
     e12:	17 c0       	rjmp	.+46     	; 0xe42 <prvCopyDataToQueue+0x5e>
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	0e 94 ce 32 	call	0x659c	; 0x659c <memcpy>
     e1e:	28 a1       	ldd	r18, Y+32	; 0x20
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	9b 81       	ldd	r25, Y+3	; 0x03
     e24:	82 0f       	add	r24, r18
     e26:	91 1d       	adc	r25, r1
     e28:	9b 83       	std	Y+3, r25	; 0x03
     e2a:	8a 83       	std	Y+2, r24	; 0x02
     e2c:	2c 81       	ldd	r18, Y+4	; 0x04
     e2e:	3d 81       	ldd	r19, Y+5	; 0x05
     e30:	82 17       	cp	r24, r18
     e32:	93 07       	cpc	r25, r19
     e34:	50 f1       	brcs	.+84     	; 0xe8a <prvCopyDataToQueue+0xa6>
     e36:	88 81       	ld	r24, Y
     e38:	99 81       	ldd	r25, Y+1	; 0x01
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	29 c0       	rjmp	.+82     	; 0xe94 <prvCopyDataToQueue+0xb0>
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	8e 81       	ldd	r24, Y+6	; 0x06
     e46:	9f 81       	ldd	r25, Y+7	; 0x07
     e48:	0e 94 ce 32 	call	0x659c	; 0x659c <memcpy>
     e4c:	88 a1       	ldd	r24, Y+32	; 0x20
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	91 95       	neg	r25
     e52:	81 95       	neg	r24
     e54:	91 09       	sbc	r25, r1
     e56:	2e 81       	ldd	r18, Y+6	; 0x06
     e58:	3f 81       	ldd	r19, Y+7	; 0x07
     e5a:	28 0f       	add	r18, r24
     e5c:	39 1f       	adc	r19, r25
     e5e:	3f 83       	std	Y+7, r19	; 0x07
     e60:	2e 83       	std	Y+6, r18	; 0x06
     e62:	48 81       	ld	r20, Y
     e64:	59 81       	ldd	r21, Y+1	; 0x01
     e66:	24 17       	cp	r18, r20
     e68:	35 07       	cpc	r19, r21
     e6a:	30 f4       	brcc	.+12     	; 0xe78 <prvCopyDataToQueue+0x94>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	9f 83       	std	Y+7, r25	; 0x07
     e76:	8e 83       	std	Y+6, r24	; 0x06
     e78:	02 30       	cpi	r16, 0x02	; 2
     e7a:	49 f4       	brne	.+18     	; 0xe8e <prvCopyDataToQueue+0xaa>
     e7c:	11 23       	and	r17, r17
     e7e:	49 f0       	breq	.+18     	; 0xe92 <prvCopyDataToQueue+0xae>
     e80:	11 50       	subi	r17, 0x01	; 1
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	07 c0       	rjmp	.+14     	; 0xe94 <prvCopyDataToQueue+0xb0>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	05 c0       	rjmp	.+10     	; 0xe94 <prvCopyDataToQueue+0xb0>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <prvCopyDataToQueue+0xb0>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <prvCopyDataToQueue+0xb0>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	1f 5f       	subi	r17, 0xFF	; 255
     e96:	1e 8f       	std	Y+30, r17	; 0x1e
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	08 95       	ret

00000ea2 <prvCopyDataFromQueue>:
     ea2:	fc 01       	movw	r30, r24
     ea4:	40 a1       	ldd	r20, Z+32	; 0x20
     ea6:	44 23       	and	r20, r20
     ea8:	a9 f0       	breq	.+42     	; 0xed4 <prvCopyDataFromQueue+0x32>
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	26 81       	ldd	r18, Z+6	; 0x06
     eae:	37 81       	ldd	r19, Z+7	; 0x07
     eb0:	24 0f       	add	r18, r20
     eb2:	35 1f       	adc	r19, r21
     eb4:	37 83       	std	Z+7, r19	; 0x07
     eb6:	26 83       	std	Z+6, r18	; 0x06
     eb8:	84 81       	ldd	r24, Z+4	; 0x04
     eba:	95 81       	ldd	r25, Z+5	; 0x05
     ebc:	28 17       	cp	r18, r24
     ebe:	39 07       	cpc	r19, r25
     ec0:	20 f0       	brcs	.+8      	; 0xeca <prvCopyDataFromQueue+0x28>
     ec2:	80 81       	ld	r24, Z
     ec4:	91 81       	ldd	r25, Z+1	; 0x01
     ec6:	97 83       	std	Z+7, r25	; 0x07
     ec8:	86 83       	std	Z+6, r24	; 0x06
     eca:	cb 01       	movw	r24, r22
     ecc:	66 81       	ldd	r22, Z+6	; 0x06
     ece:	77 81       	ldd	r23, Z+7	; 0x07
     ed0:	0c 94 ce 32 	jmp	0x659c	; 0x659c <memcpy>
     ed4:	08 95       	ret

00000ed6 <prvUnlockQueue>:
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	0f 92       	push	r0
     ee4:	1a a1       	ldd	r17, Y+34	; 0x22
     ee6:	0b c0       	rjmp	.+22     	; 0xefe <prvUnlockQueue+0x28>
     ee8:	8b 89       	ldd	r24, Y+19	; 0x13
     eea:	88 23       	and	r24, r24
     eec:	51 f0       	breq	.+20     	; 0xf02 <prvUnlockQueue+0x2c>
     eee:	ce 01       	movw	r24, r28
     ef0:	43 96       	adiw	r24, 0x13	; 19
     ef2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <xTaskRemoveFromEventList>
     ef6:	81 11       	cpse	r24, r1
     ef8:	0e 94 cf 14 	call	0x299e	; 0x299e <vTaskMissedYield>
     efc:	11 50       	subi	r17, 0x01	; 1
     efe:	11 16       	cp	r1, r17
     f00:	9c f3       	brlt	.-26     	; 0xee8 <prvUnlockQueue+0x12>
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	8a a3       	std	Y+34, r24	; 0x22
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	0f 92       	push	r0
     f10:	19 a1       	ldd	r17, Y+33	; 0x21
     f12:	0b c0       	rjmp	.+22     	; 0xf2a <prvUnlockQueue+0x54>
     f14:	88 85       	ldd	r24, Y+8	; 0x08
     f16:	88 23       	and	r24, r24
     f18:	51 f0       	breq	.+20     	; 0xf2e <prvUnlockQueue+0x58>
     f1a:	ce 01       	movw	r24, r28
     f1c:	08 96       	adiw	r24, 0x08	; 8
     f1e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <xTaskRemoveFromEventList>
     f22:	81 11       	cpse	r24, r1
     f24:	0e 94 cf 14 	call	0x299e	; 0x299e <vTaskMissedYield>
     f28:	11 50       	subi	r17, 0x01	; 1
     f2a:	11 16       	cp	r1, r17
     f2c:	9c f3       	brlt	.-26     	; 0xf14 <prvUnlockQueue+0x3e>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	89 a3       	std	Y+33, r24	; 0x21
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <xQueueGenericReset>:
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	ec 01       	movw	r28, r24
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	0f 92       	push	r0
     f4a:	e8 81       	ld	r30, Y
     f4c:	f9 81       	ldd	r31, Y+1	; 0x01
     f4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f50:	28 a1       	ldd	r18, Y+32	; 0x20
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	82 9f       	mul	r24, r18
     f58:	a0 01       	movw	r20, r0
     f5a:	83 9f       	mul	r24, r19
     f5c:	50 0d       	add	r21, r0
     f5e:	92 9f       	mul	r25, r18
     f60:	50 0d       	add	r21, r0
     f62:	11 24       	eor	r1, r1
     f64:	4e 0f       	add	r20, r30
     f66:	5f 1f       	adc	r21, r31
     f68:	5d 83       	std	Y+5, r21	; 0x05
     f6a:	4c 83       	std	Y+4, r20	; 0x04
     f6c:	1e 8e       	std	Y+30, r1	; 0x1e
     f6e:	fb 83       	std	Y+3, r31	; 0x03
     f70:	ea 83       	std	Y+2, r30	; 0x02
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	28 9f       	mul	r18, r24
     f76:	a0 01       	movw	r20, r0
     f78:	29 9f       	mul	r18, r25
     f7a:	50 0d       	add	r21, r0
     f7c:	38 9f       	mul	r19, r24
     f7e:	50 0d       	add	r21, r0
     f80:	11 24       	eor	r1, r1
     f82:	cf 01       	movw	r24, r30
     f84:	84 0f       	add	r24, r20
     f86:	95 1f       	adc	r25, r21
     f88:	9f 83       	std	Y+7, r25	; 0x07
     f8a:	8e 83       	std	Y+6, r24	; 0x06
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	89 a3       	std	Y+33, r24	; 0x21
     f90:	8a a3       	std	Y+34, r24	; 0x22
     f92:	61 11       	cpse	r22, r1
     f94:	0b c0       	rjmp	.+22     	; 0xfac <xQueueGenericReset+0x6e>
     f96:	88 85       	ldd	r24, Y+8	; 0x08
     f98:	88 23       	and	r24, r24
     f9a:	71 f0       	breq	.+28     	; 0xfb8 <xQueueGenericReset+0x7a>
     f9c:	ce 01       	movw	r24, r28
     f9e:	08 96       	adiw	r24, 0x08	; 8
     fa0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <xTaskRemoveFromEventList>
     fa4:	88 23       	and	r24, r24
     fa6:	41 f0       	breq	.+16     	; 0xfb8 <xQueueGenericReset+0x7a>
     fa8:	3a de       	rcall	.-908    	; 0xc1e <vPortYield>
     faa:	06 c0       	rjmp	.+12     	; 0xfb8 <xQueueGenericReset+0x7a>
     fac:	ce 01       	movw	r24, r28
     fae:	08 96       	adiw	r24, 0x08	; 8
     fb0:	68 dd       	rcall	.-1328   	; 0xa82 <vListInitialise>
     fb2:	ce 01       	movw	r24, r28
     fb4:	43 96       	adiw	r24, 0x13	; 19
     fb6:	65 dd       	rcall	.-1334   	; 0xa82 <vListInitialise>
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <prvInitialiseNewQueue>:
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	f8 01       	movw	r30, r16
     fca:	61 11       	cpse	r22, r1
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <prvInitialiseNewQueue+0x10>
     fce:	11 83       	std	Z+1, r17	; 0x01
     fd0:	00 83       	st	Z, r16
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <prvInitialiseNewQueue+0x14>
     fd4:	51 83       	std	Z+1, r21	; 0x01
     fd6:	40 83       	st	Z, r20
     fd8:	87 8f       	std	Z+31, r24	; 0x1f
     fda:	60 a3       	std	Z+32, r22	; 0x20
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	cf 01       	movw	r24, r30
     fe0:	ae df       	rcall	.-164    	; 0xf3e <xQueueGenericReset>
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	08 95       	ret

00000fe8 <xQueueGenericCreate>:
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	f8 2e       	mov	r15, r24
     ff8:	e6 2e       	mov	r14, r22
     ffa:	d4 2e       	mov	r13, r20
     ffc:	86 9f       	mul	r24, r22
     ffe:	c0 01       	movw	r24, r0
    1000:	11 24       	eor	r1, r1
    1002:	83 96       	adiw	r24, 0x23	; 35
    1004:	58 dc       	rcall	.-1872   	; 0x8b6 <pvPortMalloc>
    1006:	ec 01       	movw	r28, r24
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	41 f0       	breq	.+16     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    100c:	8c 01       	movw	r16, r24
    100e:	2d 2d       	mov	r18, r13
    1010:	ac 01       	movw	r20, r24
    1012:	4d 5d       	subi	r20, 0xDD	; 221
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	6e 2d       	mov	r22, r14
    1018:	8f 2d       	mov	r24, r15
    101a:	d4 df       	rcall	.-88     	; 0xfc4 <prvInitialiseNewQueue>
    101c:	ce 01       	movw	r24, r28
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	08 95       	ret

0000102e <xQueueGenericSend>:
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	29 97       	sbiw	r28, 0x09	; 9
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	7c 01       	movw	r14, r24
    1050:	6b 01       	movw	r12, r22
    1052:	2e 83       	std	Y+6, r18	; 0x06
    1054:	3f 83       	std	Y+7, r19	; 0x07
    1056:	48 87       	std	Y+8, r20	; 0x08
    1058:	59 87       	std	Y+9, r21	; 0x09
    105a:	10 e0       	ldi	r17, 0x00	; 0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	0f 92       	push	r0
    1062:	f7 01       	movw	r30, r14
    1064:	96 8d       	ldd	r25, Z+30	; 0x1e
    1066:	87 8d       	ldd	r24, Z+31	; 0x1f
    1068:	98 17       	cp	r25, r24
    106a:	10 f0       	brcs	.+4      	; 0x1070 <xQueueGenericSend+0x42>
    106c:	02 30       	cpi	r16, 0x02	; 2
    106e:	b1 f4       	brne	.+44     	; 0x109c <xQueueGenericSend+0x6e>
    1070:	40 2f       	mov	r20, r16
    1072:	b6 01       	movw	r22, r12
    1074:	c7 01       	movw	r24, r14
    1076:	b6 de       	rcall	.-660    	; 0xde4 <prvCopyDataToQueue>
    1078:	f7 01       	movw	r30, r14
    107a:	93 89       	ldd	r25, Z+19	; 0x13
    107c:	99 23       	and	r25, r25
    107e:	41 f0       	breq	.+16     	; 0x1090 <xQueueGenericSend+0x62>
    1080:	c7 01       	movw	r24, r14
    1082:	43 96       	adiw	r24, 0x13	; 19
    1084:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <xTaskRemoveFromEventList>
    1088:	88 23       	and	r24, r24
    108a:	21 f0       	breq	.+8      	; 0x1094 <xQueueGenericSend+0x66>
    108c:	c8 dd       	rcall	.-1136   	; 0xc1e <vPortYield>
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <xQueueGenericSend+0x66>
    1090:	81 11       	cpse	r24, r1
    1092:	c5 dd       	rcall	.-1142   	; 0xc1e <vPortYield>
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	4b c0       	rjmp	.+150    	; 0x1132 <xQueueGenericSend+0x104>
    109c:	8e 81       	ldd	r24, Y+6	; 0x06
    109e:	9f 81       	ldd	r25, Y+7	; 0x07
    10a0:	a8 85       	ldd	r26, Y+8	; 0x08
    10a2:	b9 85       	ldd	r27, Y+9	; 0x09
    10a4:	89 2b       	or	r24, r25
    10a6:	8a 2b       	or	r24, r26
    10a8:	8b 2b       	or	r24, r27
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <xQueueGenericSend+0x86>
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <xQueueGenericSend+0x104>
    10b4:	11 11       	cpse	r17, r1
    10b6:	05 c0       	rjmp	.+10     	; 0x10c2 <xQueueGenericSend+0x94>
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	0e 94 58 14 	call	0x28b0	; 0x28b0 <vTaskInternalSetTimeOutState>
    10c0:	11 e0       	ldi	r17, 0x01	; 1
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	f1 d6       	rcall	.+3554   	; 0x1eaa <vTaskSuspendAll>
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	0f 92       	push	r0
    10ce:	f7 01       	movw	r30, r14
    10d0:	81 a1       	ldd	r24, Z+33	; 0x21
    10d2:	8f 3f       	cpi	r24, 0xFF	; 255
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <xQueueGenericSend+0xaa>
    10d6:	11 a2       	std	Z+33, r1	; 0x21
    10d8:	f7 01       	movw	r30, r14
    10da:	82 a1       	ldd	r24, Z+34	; 0x22
    10dc:	8f 3f       	cpi	r24, 0xFF	; 255
    10de:	09 f4       	brne	.+2      	; 0x10e2 <xQueueGenericSend+0xb4>
    10e0:	12 a2       	std	Z+34, r1	; 0x22
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	be 01       	movw	r22, r28
    10e8:	6a 5f       	subi	r22, 0xFA	; 250
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	ce 01       	movw	r24, r28
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <xTaskCheckForTimeOut>
    10f4:	81 11       	cpse	r24, r1
    10f6:	19 c0       	rjmp	.+50     	; 0x112a <xQueueGenericSend+0xfc>
    10f8:	c7 01       	movw	r24, r14
    10fa:	66 de       	rcall	.-820    	; 0xdc8 <prvIsQueueFull>
    10fc:	88 23       	and	r24, r24
    10fe:	81 f0       	breq	.+32     	; 0x1120 <xQueueGenericSend+0xf2>
    1100:	4e 81       	ldd	r20, Y+6	; 0x06
    1102:	5f 81       	ldd	r21, Y+7	; 0x07
    1104:	68 85       	ldd	r22, Y+8	; 0x08
    1106:	79 85       	ldd	r23, Y+9	; 0x09
    1108:	c7 01       	movw	r24, r14
    110a:	08 96       	adiw	r24, 0x08	; 8
    110c:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskPlaceOnEventList>
    1110:	c7 01       	movw	r24, r14
    1112:	e1 de       	rcall	.-574    	; 0xed6 <prvUnlockQueue>
    1114:	0e 94 95 10 	call	0x212a	; 0x212a <xTaskResumeAll>
    1118:	81 11       	cpse	r24, r1
    111a:	a0 cf       	rjmp	.-192    	; 0x105c <xQueueGenericSend+0x2e>
    111c:	80 dd       	rcall	.-1280   	; 0xc1e <vPortYield>
    111e:	9e cf       	rjmp	.-196    	; 0x105c <xQueueGenericSend+0x2e>
    1120:	c7 01       	movw	r24, r14
    1122:	d9 de       	rcall	.-590    	; 0xed6 <prvUnlockQueue>
    1124:	0e 94 95 10 	call	0x212a	; 0x212a <xTaskResumeAll>
    1128:	99 cf       	rjmp	.-206    	; 0x105c <xQueueGenericSend+0x2e>
    112a:	c7 01       	movw	r24, r14
    112c:	d4 de       	rcall	.-600    	; 0xed6 <prvUnlockQueue>
    112e:	fd d7       	rcall	.+4090   	; 0x212a <xTaskResumeAll>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	29 96       	adiw	r28, 0x09	; 9
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	08 95       	ret

00001150 <xQueueGenericSendFromISR>:
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	8a 01       	movw	r16, r20
    115e:	fc 01       	movw	r30, r24
    1160:	56 8d       	ldd	r21, Z+30	; 0x1e
    1162:	37 8d       	ldd	r19, Z+31	; 0x1f
    1164:	53 17       	cp	r21, r19
    1166:	10 f0       	brcs	.+4      	; 0x116c <xQueueGenericSendFromISR+0x1c>
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	f9 f4       	brne	.+62     	; 0x11aa <xQueueGenericSendFromISR+0x5a>
    116c:	42 2f       	mov	r20, r18
    116e:	78 01       	movw	r14, r16
    1170:	ec 01       	movw	r28, r24
    1172:	1a a1       	ldd	r17, Y+34	; 0x22
    1174:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1176:	ce 01       	movw	r24, r28
    1178:	35 de       	rcall	.-918    	; 0xde4 <prvCopyDataToQueue>
    117a:	1f 3f       	cpi	r17, 0xFF	; 255
    117c:	81 f4       	brne	.+32     	; 0x119e <xQueueGenericSendFromISR+0x4e>
    117e:	8b 89       	ldd	r24, Y+19	; 0x13
    1180:	88 23       	and	r24, r24
    1182:	a9 f0       	breq	.+42     	; 0x11ae <xQueueGenericSendFromISR+0x5e>
    1184:	ce 01       	movw	r24, r28
    1186:	43 96       	adiw	r24, 0x13	; 19
    1188:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <xTaskRemoveFromEventList>
    118c:	88 23       	and	r24, r24
    118e:	89 f0       	breq	.+34     	; 0x11b2 <xQueueGenericSendFromISR+0x62>
    1190:	e1 14       	cp	r14, r1
    1192:	f1 04       	cpc	r15, r1
    1194:	81 f0       	breq	.+32     	; 0x11b6 <xQueueGenericSendFromISR+0x66>
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	f7 01       	movw	r30, r14
    119a:	80 83       	st	Z, r24
    119c:	0d c0       	rjmp	.+26     	; 0x11b8 <xQueueGenericSendFromISR+0x68>
    119e:	ff 24       	eor	r15, r15
    11a0:	f3 94       	inc	r15
    11a2:	f1 0e       	add	r15, r17
    11a4:	fa a2       	std	Y+34, r15	; 0x22
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	07 c0       	rjmp	.+14     	; 0x11b8 <xQueueGenericSendFromISR+0x68>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <xQueueGenericSendFromISR+0x68>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <xQueueGenericSendFromISR+0x68>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <xQueueGenericSendFromISR+0x68>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	08 95       	ret

000011c6 <xQueueReceive>:
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	29 97       	sbiw	r28, 0x09	; 9
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	8c 01       	movw	r16, r24
    11e8:	6b 01       	movw	r12, r22
    11ea:	2e 83       	std	Y+6, r18	; 0x06
    11ec:	3f 83       	std	Y+7, r19	; 0x07
    11ee:	48 87       	std	Y+8, r20	; 0x08
    11f0:	59 87       	std	Y+9, r21	; 0x09
    11f2:	e1 2c       	mov	r14, r1
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	0f 92       	push	r0
    11fa:	f8 01       	movw	r30, r16
    11fc:	f6 8c       	ldd	r15, Z+30	; 0x1e
    11fe:	ff 20       	and	r15, r15
    1200:	99 f0       	breq	.+38     	; 0x1228 <xQueueReceive+0x62>
    1202:	b6 01       	movw	r22, r12
    1204:	c8 01       	movw	r24, r16
    1206:	4d de       	rcall	.-870    	; 0xea2 <prvCopyDataFromQueue>
    1208:	fa 94       	dec	r15
    120a:	f8 01       	movw	r30, r16
    120c:	f6 8e       	std	Z+30, r15	; 0x1e
    120e:	80 85       	ldd	r24, Z+8	; 0x08
    1210:	88 23       	and	r24, r24
    1212:	31 f0       	breq	.+12     	; 0x1220 <xQueueReceive+0x5a>
    1214:	c8 01       	movw	r24, r16
    1216:	08 96       	adiw	r24, 0x08	; 8
    1218:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <xTaskRemoveFromEventList>
    121c:	81 11       	cpse	r24, r1
    121e:	ff dc       	rcall	.-1538   	; 0xc1e <vPortYield>
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	4f c0       	rjmp	.+158    	; 0x12c6 <xQueueReceive+0x100>
    1228:	8e 81       	ldd	r24, Y+6	; 0x06
    122a:	9f 81       	ldd	r25, Y+7	; 0x07
    122c:	a8 85       	ldd	r26, Y+8	; 0x08
    122e:	b9 85       	ldd	r27, Y+9	; 0x09
    1230:	89 2b       	or	r24, r25
    1232:	8a 2b       	or	r24, r26
    1234:	8b 2b       	or	r24, r27
    1236:	21 f4       	brne	.+8      	; 0x1240 <xQueueReceive+0x7a>
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	43 c0       	rjmp	.+134    	; 0x12c6 <xQueueReceive+0x100>
    1240:	e1 10       	cpse	r14, r1
    1242:	06 c0       	rjmp	.+12     	; 0x1250 <xQueueReceive+0x8a>
    1244:	ce 01       	movw	r24, r28
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	0e 94 58 14 	call	0x28b0	; 0x28b0 <vTaskInternalSetTimeOutState>
    124c:	ee 24       	eor	r14, r14
    124e:	e3 94       	inc	r14
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	2a d6       	rcall	.+3156   	; 0x1eaa <vTaskSuspendAll>
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	0f 92       	push	r0
    125c:	f8 01       	movw	r30, r16
    125e:	81 a1       	ldd	r24, Z+33	; 0x21
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	09 f4       	brne	.+2      	; 0x1266 <xQueueReceive+0xa0>
    1264:	11 a2       	std	Z+33, r1	; 0x21
    1266:	f8 01       	movw	r30, r16
    1268:	82 a1       	ldd	r24, Z+34	; 0x22
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	09 f4       	brne	.+2      	; 0x1270 <xQueueReceive+0xaa>
    126e:	12 a2       	std	Z+34, r1	; 0x22
    1270:	0f 90       	pop	r0
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	be 01       	movw	r22, r28
    1276:	6a 5f       	subi	r22, 0xFA	; 250
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	ce 01       	movw	r24, r28
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <xTaskCheckForTimeOut>
    1282:	81 11       	cpse	r24, r1
    1284:	17 c0       	rjmp	.+46     	; 0x12b4 <xQueueReceive+0xee>
    1286:	c8 01       	movw	r24, r16
    1288:	92 dd       	rcall	.-1244   	; 0xdae <prvIsQueueEmpty>
    128a:	88 23       	and	r24, r24
    128c:	79 f0       	breq	.+30     	; 0x12ac <xQueueReceive+0xe6>
    128e:	4e 81       	ldd	r20, Y+6	; 0x06
    1290:	5f 81       	ldd	r21, Y+7	; 0x07
    1292:	68 85       	ldd	r22, Y+8	; 0x08
    1294:	79 85       	ldd	r23, Y+9	; 0x09
    1296:	c8 01       	movw	r24, r16
    1298:	43 96       	adiw	r24, 0x13	; 19
    129a:	0e 94 56 12 	call	0x24ac	; 0x24ac <vTaskPlaceOnEventList>
    129e:	c8 01       	movw	r24, r16
    12a0:	1a de       	rcall	.-972    	; 0xed6 <prvUnlockQueue>
    12a2:	43 d7       	rcall	.+3718   	; 0x212a <xTaskResumeAll>
    12a4:	81 11       	cpse	r24, r1
    12a6:	a6 cf       	rjmp	.-180    	; 0x11f4 <xQueueReceive+0x2e>
    12a8:	ba dc       	rcall	.-1676   	; 0xc1e <vPortYield>
    12aa:	a4 cf       	rjmp	.-184    	; 0x11f4 <xQueueReceive+0x2e>
    12ac:	c8 01       	movw	r24, r16
    12ae:	13 de       	rcall	.-986    	; 0xed6 <prvUnlockQueue>
    12b0:	3c d7       	rcall	.+3704   	; 0x212a <xTaskResumeAll>
    12b2:	a0 cf       	rjmp	.-192    	; 0x11f4 <xQueueReceive+0x2e>
    12b4:	c8 01       	movw	r24, r16
    12b6:	0f de       	rcall	.-994    	; 0xed6 <prvUnlockQueue>
    12b8:	38 d7       	rcall	.+3696   	; 0x212a <xTaskResumeAll>
    12ba:	c8 01       	movw	r24, r16
    12bc:	78 dd       	rcall	.-1296   	; 0xdae <prvIsQueueEmpty>
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <xQueueReceive+0xfe>
    12c2:	98 cf       	rjmp	.-208    	; 0x11f4 <xQueueReceive+0x2e>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	29 96       	adiw	r28, 0x09	; 9
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	df 90       	pop	r13
    12e0:	cf 90       	pop	r12
    12e2:	08 95       	ret

000012e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	0f 92       	push	r0
    12f0:	89 a1       	ldd	r24, Y+33	; 0x21
    12f2:	8f 3f       	cpi	r24, 0xFF	; 255
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <vQueueWaitForMessageRestricted+0x14>
    12f6:	19 a2       	std	Y+33, r1	; 0x21
    12f8:	8a a1       	ldd	r24, Y+34	; 0x22
    12fa:	8f 3f       	cpi	r24, 0xFF	; 255
    12fc:	09 f4       	brne	.+2      	; 0x1300 <vQueueWaitForMessageRestricted+0x1c>
    12fe:	1a a2       	std	Y+34, r1	; 0x22
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1304:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1306:	81 11       	cpse	r24, r1
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    130a:	ce 01       	movw	r24, r28
    130c:	43 96       	adiw	r24, 0x13	; 19
    130e:	0e 94 b7 12 	call	0x256e	; 0x256e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1312:	ce 01       	movw	r24, r28
    1314:	e0 dd       	rcall	.-1088   	; 0xed6 <prvUnlockQueue>
    }
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	08 95       	ret

0000131c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    131c:	fc 01       	movw	r30, r24
    131e:	44 81       	ldd	r20, Z+4	; 0x04
    1320:	55 81       	ldd	r21, Z+5	; 0x05
    1322:	22 81       	ldd	r18, Z+2	; 0x02
    1324:	33 81       	ldd	r19, Z+3	; 0x03
    1326:	24 0f       	add	r18, r20
    1328:	35 1f       	adc	r19, r21
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	b9 01       	movw	r22, r18
    1330:	68 1b       	sub	r22, r24
    1332:	79 0b       	sbc	r23, r25
    1334:	cb 01       	movw	r24, r22
    1336:	64 17       	cp	r22, r20
    1338:	75 07       	cpc	r23, r21
    133a:	10 f0       	brcs	.+4      	; 0x1340 <prvBytesInBuffer+0x24>
    133c:	84 1b       	sub	r24, r20
    133e:	95 0b       	sbc	r25, r21
    1340:	08 95       	ret

00001342 <prvInitialiseNewStreamBuffer>:
    1342:	0f 93       	push	r16
    1344:	fc 01       	movw	r30, r24
    1346:	8f e0       	ldi	r24, 0x0F	; 15
    1348:	df 01       	movw	r26, r30
    134a:	1d 92       	st	X+, r1
    134c:	8a 95       	dec	r24
    134e:	e9 f7       	brne	.-6      	; 0x134a <prvInitialiseNewStreamBuffer+0x8>
    1350:	75 87       	std	Z+13, r23	; 0x0d
    1352:	64 87       	std	Z+12, r22	; 0x0c
    1354:	55 83       	std	Z+5, r21	; 0x05
    1356:	44 83       	std	Z+4, r20	; 0x04
    1358:	37 83       	std	Z+7, r19	; 0x07
    135a:	26 83       	std	Z+6, r18	; 0x06
    135c:	06 87       	std	Z+14, r16	; 0x0e
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <prvWriteBytesToBuffer>:
    1362:	af 92       	push	r10
    1364:	bf 92       	push	r11
    1366:	cf 92       	push	r12
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	6c 01       	movw	r12, r24
    1378:	5b 01       	movw	r10, r22
    137a:	7a 01       	movw	r14, r20
    137c:	fc 01       	movw	r30, r24
    137e:	c2 81       	ldd	r28, Z+2	; 0x02
    1380:	d3 81       	ldd	r29, Z+3	; 0x03
    1382:	04 81       	ldd	r16, Z+4	; 0x04
    1384:	15 81       	ldd	r17, Z+5	; 0x05
    1386:	0c 1b       	sub	r16, r28
    1388:	1d 0b       	sbc	r17, r29
    138a:	40 17       	cp	r20, r16
    138c:	51 07       	cpc	r21, r17
    138e:	08 f4       	brcc	.+2      	; 0x1392 <prvWriteBytesToBuffer+0x30>
    1390:	8a 01       	movw	r16, r20
    1392:	f6 01       	movw	r30, r12
    1394:	84 85       	ldd	r24, Z+12	; 0x0c
    1396:	95 85       	ldd	r25, Z+13	; 0x0d
    1398:	a8 01       	movw	r20, r16
    139a:	b5 01       	movw	r22, r10
    139c:	8c 0f       	add	r24, r28
    139e:	9d 1f       	adc	r25, r29
    13a0:	0e 94 ce 32 	call	0x659c	; 0x659c <memcpy>
    13a4:	0e 15       	cp	r16, r14
    13a6:	1f 05       	cpc	r17, r15
    13a8:	58 f4       	brcc	.+22     	; 0x13c0 <prvWriteBytesToBuffer+0x5e>
    13aa:	a7 01       	movw	r20, r14
    13ac:	40 1b       	sub	r20, r16
    13ae:	51 0b       	sbc	r21, r17
    13b0:	b5 01       	movw	r22, r10
    13b2:	60 0f       	add	r22, r16
    13b4:	71 1f       	adc	r23, r17
    13b6:	f6 01       	movw	r30, r12
    13b8:	84 85       	ldd	r24, Z+12	; 0x0c
    13ba:	95 85       	ldd	r25, Z+13	; 0x0d
    13bc:	0e 94 ce 32 	call	0x659c	; 0x659c <memcpy>
    13c0:	ce 01       	movw	r24, r28
    13c2:	8e 0d       	add	r24, r14
    13c4:	9f 1d       	adc	r25, r15
    13c6:	f6 01       	movw	r30, r12
    13c8:	24 81       	ldd	r18, Z+4	; 0x04
    13ca:	35 81       	ldd	r19, Z+5	; 0x05
    13cc:	82 17       	cp	r24, r18
    13ce:	93 07       	cpc	r25, r19
    13d0:	10 f0       	brcs	.+4      	; 0x13d6 <prvWriteBytesToBuffer+0x74>
    13d2:	82 1b       	sub	r24, r18
    13d4:	93 0b       	sbc	r25, r19
    13d6:	f6 01       	movw	r30, r12
    13d8:	93 83       	std	Z+3, r25	; 0x03
    13da:	82 83       	std	Z+2, r24	; 0x02
    13dc:	c7 01       	movw	r24, r14
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	08 95       	ret

000013f4 <prvWriteMessageToBuffer>:
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	1f 92       	push	r1
    1406:	1f 92       	push	r1
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	7c 01       	movw	r14, r24
    140e:	6b 01       	movw	r12, r22
    1410:	5a 83       	std	Y+2, r21	; 0x02
    1412:	49 83       	std	Y+1, r20	; 0x01
    1414:	21 15       	cp	r18, r1
    1416:	31 05       	cpc	r19, r1
    1418:	c1 f0       	breq	.+48     	; 0x144a <prvWriteMessageToBuffer+0x56>
    141a:	fc 01       	movw	r30, r24
    141c:	86 85       	ldd	r24, Z+14	; 0x0e
    141e:	80 fd       	sbrc	r24, 0
    1420:	08 c0       	rjmp	.+16     	; 0x1432 <prvWriteMessageToBuffer+0x3e>
    1422:	42 17       	cp	r20, r18
    1424:	53 07       	cpc	r21, r19
    1426:	08 f4       	brcc	.+2      	; 0x142a <prvWriteMessageToBuffer+0x36>
    1428:	9a 01       	movw	r18, r20
    142a:	3a 83       	std	Y+2, r19	; 0x02
    142c:	29 83       	std	Y+1, r18	; 0x01
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	0f c0       	rjmp	.+30     	; 0x1450 <prvWriteMessageToBuffer+0x5c>
    1432:	20 17       	cp	r18, r16
    1434:	31 07       	cpc	r19, r17
    1436:	58 f0       	brcs	.+22     	; 0x144e <prvWriteMessageToBuffer+0x5a>
    1438:	42 e0       	ldi	r20, 0x02	; 2
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	be 01       	movw	r22, r28
    143e:	6f 5f       	subi	r22, 0xFF	; 255
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	c7 01       	movw	r24, r14
    1444:	8e df       	rcall	.-228    	; 0x1362 <prvWriteBytesToBuffer>
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <prvWriteMessageToBuffer+0x5c>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <prvWriteMessageToBuffer+0x5c>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	88 23       	and	r24, r24
    1452:	31 f0       	breq	.+12     	; 0x1460 <prvWriteMessageToBuffer+0x6c>
    1454:	49 81       	ldd	r20, Y+1	; 0x01
    1456:	5a 81       	ldd	r21, Y+2	; 0x02
    1458:	b6 01       	movw	r22, r12
    145a:	c7 01       	movw	r24, r14
    145c:	82 df       	rcall	.-252    	; 0x1362 <prvWriteBytesToBuffer>
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <prvWriteMessageToBuffer+0x70>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	cf 90       	pop	r12
    1478:	08 95       	ret

0000147a <prvReadBytesFromBuffer>:
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	7c 01       	movw	r14, r24
    1490:	5b 01       	movw	r10, r22
    1492:	e9 01       	movw	r28, r18
    1494:	42 17       	cp	r20, r18
    1496:	53 07       	cpc	r21, r19
    1498:	08 f4       	brcc	.+2      	; 0x149c <prvReadBytesFromBuffer+0x22>
    149a:	ea 01       	movw	r28, r20
    149c:	20 97       	sbiw	r28, 0x00	; 0
    149e:	81 f1       	breq	.+96     	; 0x1500 <prvReadBytesFromBuffer+0x86>
    14a0:	f7 01       	movw	r30, r14
    14a2:	00 81       	ld	r16, Z
    14a4:	11 81       	ldd	r17, Z+1	; 0x01
    14a6:	84 81       	ldd	r24, Z+4	; 0x04
    14a8:	95 81       	ldd	r25, Z+5	; 0x05
    14aa:	80 1b       	sub	r24, r16
    14ac:	91 0b       	sbc	r25, r17
    14ae:	6e 01       	movw	r12, r28
    14b0:	8c 17       	cp	r24, r28
    14b2:	9d 07       	cpc	r25, r29
    14b4:	08 f4       	brcc	.+2      	; 0x14b8 <prvReadBytesFromBuffer+0x3e>
    14b6:	6c 01       	movw	r12, r24
    14b8:	f7 01       	movw	r30, r14
    14ba:	64 85       	ldd	r22, Z+12	; 0x0c
    14bc:	75 85       	ldd	r23, Z+13	; 0x0d
    14be:	60 0f       	add	r22, r16
    14c0:	71 1f       	adc	r23, r17
    14c2:	a6 01       	movw	r20, r12
    14c4:	c5 01       	movw	r24, r10
    14c6:	0e 94 ce 32 	call	0x659c	; 0x659c <memcpy>
    14ca:	cc 16       	cp	r12, r28
    14cc:	dd 06       	cpc	r13, r29
    14ce:	58 f4       	brcc	.+22     	; 0x14e6 <prvReadBytesFromBuffer+0x6c>
    14d0:	ae 01       	movw	r20, r28
    14d2:	4c 19       	sub	r20, r12
    14d4:	5d 09       	sbc	r21, r13
    14d6:	f7 01       	movw	r30, r14
    14d8:	64 85       	ldd	r22, Z+12	; 0x0c
    14da:	75 85       	ldd	r23, Z+13	; 0x0d
    14dc:	c5 01       	movw	r24, r10
    14de:	8c 0d       	add	r24, r12
    14e0:	9d 1d       	adc	r25, r13
    14e2:	0e 94 ce 32 	call	0x659c	; 0x659c <memcpy>
    14e6:	0c 0f       	add	r16, r28
    14e8:	1d 1f       	adc	r17, r29
    14ea:	f7 01       	movw	r30, r14
    14ec:	84 81       	ldd	r24, Z+4	; 0x04
    14ee:	95 81       	ldd	r25, Z+5	; 0x05
    14f0:	08 17       	cp	r16, r24
    14f2:	19 07       	cpc	r17, r25
    14f4:	10 f0       	brcs	.+4      	; 0x14fa <prvReadBytesFromBuffer+0x80>
    14f6:	08 1b       	sub	r16, r24
    14f8:	19 0b       	sbc	r17, r25
    14fa:	f7 01       	movw	r30, r14
    14fc:	11 83       	std	Z+1, r17	; 0x01
    14fe:	00 83       	st	Z, r16
    1500:	ce 01       	movw	r24, r28
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	08 95       	ret

00001518 <prvReadMessageFromBuffer>:
    1518:	6f 92       	push	r6
    151a:	7f 92       	push	r7
    151c:	8f 92       	push	r8
    151e:	9f 92       	push	r9
    1520:	af 92       	push	r10
    1522:	bf 92       	push	r11
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	1f 92       	push	r1
    1536:	1f 92       	push	r1
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	6c 01       	movw	r12, r24
    153e:	4b 01       	movw	r8, r22
    1540:	5a 01       	movw	r10, r20
    1542:	79 01       	movw	r14, r18
    1544:	01 15       	cp	r16, r1
    1546:	11 05       	cpc	r17, r1
    1548:	b1 f0       	breq	.+44     	; 0x1576 <prvReadMessageFromBuffer+0x5e>
    154a:	fc 01       	movw	r30, r24
    154c:	60 80       	ld	r6, Z
    154e:	71 80       	ldd	r7, Z+1	; 0x01
    1550:	a8 01       	movw	r20, r16
    1552:	be 01       	movw	r22, r28
    1554:	6f 5f       	subi	r22, 0xFF	; 255
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	90 df       	rcall	.-224    	; 0x147a <prvReadBytesFromBuffer>
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	e0 1a       	sub	r14, r16
    1560:	f1 0a       	sbc	r15, r17
    1562:	a8 16       	cp	r10, r24
    1564:	b9 06       	cpc	r11, r25
    1566:	30 f4       	brcc	.+12     	; 0x1574 <prvReadMessageFromBuffer+0x5c>
    1568:	f6 01       	movw	r30, r12
    156a:	71 82       	std	Z+1, r7	; 0x01
    156c:	60 82       	st	Z, r6
    156e:	a1 2c       	mov	r10, r1
    1570:	b1 2c       	mov	r11, r1
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <prvReadMessageFromBuffer+0x5e>
    1574:	5c 01       	movw	r10, r24
    1576:	97 01       	movw	r18, r14
    1578:	a5 01       	movw	r20, r10
    157a:	b4 01       	movw	r22, r8
    157c:	c6 01       	movw	r24, r12
    157e:	7d df       	rcall	.-262    	; 0x147a <prvReadBytesFromBuffer>
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	ff 90       	pop	r15
    158e:	ef 90       	pop	r14
    1590:	df 90       	pop	r13
    1592:	cf 90       	pop	r12
    1594:	bf 90       	pop	r11
    1596:	af 90       	pop	r10
    1598:	9f 90       	pop	r9
    159a:	8f 90       	pop	r8
    159c:	7f 90       	pop	r7
    159e:	6f 90       	pop	r6
    15a0:	08 95       	ret

000015a2 <xStreamBufferGenericCreate>:
    15a2:	cf 92       	push	r12
    15a4:	df 92       	push	r13
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	ec 01       	movw	r28, r24
    15b2:	6b 01       	movw	r12, r22
    15b4:	41 30       	cpi	r20, 0x01	; 1
    15b6:	11 f4       	brne	.+4      	; 0x15bc <xStreamBufferGenericCreate+0x1a>
    15b8:	01 e0       	ldi	r16, 0x01	; 1
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <xStreamBufferGenericCreate+0x1c>
    15bc:	00 e0       	ldi	r16, 0x00	; 0
    15be:	c1 14       	cp	r12, r1
    15c0:	d1 04       	cpc	r13, r1
    15c2:	19 f4       	brne	.+6      	; 0x15ca <xStreamBufferGenericCreate+0x28>
    15c4:	cc 24       	eor	r12, r12
    15c6:	c3 94       	inc	r12
    15c8:	d1 2c       	mov	r13, r1
    15ca:	ce 01       	movw	r24, r28
    15cc:	40 96       	adiw	r24, 0x10	; 16
    15ce:	c8 17       	cp	r28, r24
    15d0:	d9 07       	cpc	r29, r25
    15d2:	20 f4       	brcc	.+8      	; 0x15dc <xStreamBufferGenericCreate+0x3a>
    15d4:	21 96       	adiw	r28, 0x01	; 1
    15d6:	6f d9       	rcall	.-3362   	; 0x8b6 <pvPortMalloc>
    15d8:	7c 01       	movw	r14, r24
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <xStreamBufferGenericCreate+0x3e>
    15dc:	e1 2c       	mov	r14, r1
    15de:	f1 2c       	mov	r15, r1
    15e0:	e1 14       	cp	r14, r1
    15e2:	f1 04       	cpc	r15, r1
    15e4:	39 f0       	breq	.+14     	; 0x15f4 <xStreamBufferGenericCreate+0x52>
    15e6:	96 01       	movw	r18, r12
    15e8:	ae 01       	movw	r20, r28
    15ea:	b7 01       	movw	r22, r14
    15ec:	61 5f       	subi	r22, 0xF1	; 241
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	c7 01       	movw	r24, r14
    15f2:	a7 de       	rcall	.-690    	; 0x1342 <prvInitialiseNewStreamBuffer>
    15f4:	c7 01       	movw	r24, r14
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	df 90       	pop	r13
    1602:	cf 90       	pop	r12
    1604:	08 95       	ret

00001606 <xStreamBufferReset>:
    1606:	0f 93       	push	r16
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	0f 92       	push	r0
    160e:	fc 01       	movw	r30, r24
    1610:	20 85       	ldd	r18, Z+8	; 0x08
    1612:	31 85       	ldd	r19, Z+9	; 0x09
    1614:	23 2b       	or	r18, r19
    1616:	71 f4       	brne	.+28     	; 0x1634 <xStreamBufferReset+0x2e>
    1618:	22 85       	ldd	r18, Z+10	; 0x0a
    161a:	33 85       	ldd	r19, Z+11	; 0x0b
    161c:	23 2b       	or	r18, r19
    161e:	61 f4       	brne	.+24     	; 0x1638 <xStreamBufferReset+0x32>
    1620:	26 81       	ldd	r18, Z+6	; 0x06
    1622:	37 81       	ldd	r19, Z+7	; 0x07
    1624:	44 81       	ldd	r20, Z+4	; 0x04
    1626:	55 81       	ldd	r21, Z+5	; 0x05
    1628:	64 85       	ldd	r22, Z+12	; 0x0c
    162a:	75 85       	ldd	r23, Z+13	; 0x0d
    162c:	06 85       	ldd	r16, Z+14	; 0x0e
    162e:	89 de       	rcall	.-750    	; 0x1342 <prvInitialiseNewStreamBuffer>
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	03 c0       	rjmp	.+6      	; 0x163a <xStreamBufferReset+0x34>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	01 c0       	rjmp	.+2      	; 0x163a <xStreamBufferReset+0x34>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	0f 90       	pop	r0
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret

00001642 <xStreamBufferSpacesAvailable>:
    1642:	fc 01       	movw	r30, r24
    1644:	24 81       	ldd	r18, Z+4	; 0x04
    1646:	35 81       	ldd	r19, Z+5	; 0x05
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	82 0f       	add	r24, r18
    164e:	93 1f       	adc	r25, r19
    1650:	42 81       	ldd	r20, Z+2	; 0x02
    1652:	53 81       	ldd	r21, Z+3	; 0x03
    1654:	84 1b       	sub	r24, r20
    1656:	95 0b       	sbc	r25, r21
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	82 17       	cp	r24, r18
    165c:	93 07       	cpc	r25, r19
    165e:	10 f0       	brcs	.+4      	; 0x1664 <xStreamBufferSpacesAvailable+0x22>
    1660:	82 1b       	sub	r24, r18
    1662:	93 0b       	sbc	r25, r19
    1664:	08 95       	ret

00001666 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1666:	2f 92       	push	r2
    1668:	3f 92       	push	r3
    166a:	4f 92       	push	r4
    166c:	5f 92       	push	r5
    166e:	6f 92       	push	r6
    1670:	7f 92       	push	r7
    1672:	8f 92       	push	r8
    1674:	9f 92       	push	r9
    1676:	af 92       	push	r10
    1678:	bf 92       	push	r11
    167a:	cf 92       	push	r12
    167c:	df 92       	push	r13
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	2b 97       	sbiw	r28, 0x0b	; 11
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	4c 01       	movw	r8, r24
    169c:	7b 87       	std	Y+11, r23	; 0x0b
    169e:	6a 87       	std	Y+10, r22	; 0x0a
    16a0:	1a 01       	movw	r2, r20
    16a2:	0e 83       	std	Y+6, r16	; 0x06
    16a4:	1f 83       	std	Y+7, r17	; 0x07
    16a6:	28 87       	std	Y+8, r18	; 0x08
    16a8:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    16aa:	fc 01       	movw	r30, r24
    16ac:	84 81       	ldd	r24, Z+4	; 0x04
    16ae:	95 81       	ldd	r25, Z+5	; 0x05
    16b0:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    16b2:	26 85       	ldd	r18, Z+14	; 0x0e
    16b4:	20 ff       	sbrs	r18, 0
    16b6:	0c c0       	rjmp	.+24     	; 0x16d0 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    16b8:	2a 01       	movw	r4, r20
    16ba:	f2 e0       	ldi	r31, 0x02	; 2
    16bc:	4f 0e       	add	r4, r31
    16be:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    16c0:	84 15       	cp	r24, r4
    16c2:	95 05       	cpc	r25, r5
    16c4:	58 f4       	brcc	.+22     	; 0x16dc <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    16c6:	1e 82       	std	Y+6, r1	; 0x06
    16c8:	1f 82       	std	Y+7, r1	; 0x07
    16ca:	18 86       	std	Y+8, r1	; 0x08
    16cc:	19 86       	std	Y+9, r1	; 0x09
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    16d0:	84 17       	cp	r24, r20
    16d2:	95 07       	cpc	r25, r21
    16d4:	10 f0       	brcs	.+4      	; 0x16da <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    16d6:	2a 01       	movw	r4, r20
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    16da:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    16dc:	8e 81       	ldd	r24, Y+6	; 0x06
    16de:	9f 81       	ldd	r25, Y+7	; 0x07
    16e0:	a8 85       	ldd	r26, Y+8	; 0x08
    16e2:	b9 85       	ldd	r27, Y+9	; 0x09
    16e4:	89 2b       	or	r24, r25
    16e6:	8a 2b       	or	r24, r26
    16e8:	8b 2b       	or	r24, r27
    16ea:	09 f4       	brne	.+2      	; 0x16ee <xStreamBufferSend+0x88>
    16ec:	38 c0       	rjmp	.+112    	; 0x175e <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    16ee:	ce 01       	movw	r24, r28
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	0e 94 42 14 	call	0x2884	; 0x2884 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16fc:	c4 01       	movw	r24, r8
    16fe:	a1 df       	rcall	.-190    	; 0x1642 <xStreamBufferSpacesAvailable>
    1700:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1702:	84 15       	cp	r24, r4
    1704:	95 05       	cpc	r25, r5
    1706:	40 f5       	brcc	.+80     	; 0x1758 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 2b 18 	call	0x3056	; 0x3056 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1712:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <xTaskGetCurrentTaskHandle>
    1716:	f4 01       	movw	r30, r8
    1718:	93 87       	std	Z+11, r25	; 0x0b
    171a:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1720:	ae 80       	ldd	r10, Y+6	; 0x06
    1722:	bf 80       	ldd	r11, Y+7	; 0x07
    1724:	c8 84       	ldd	r12, Y+8	; 0x08
    1726:	d9 84       	ldd	r13, Y+9	; 0x09
    1728:	e1 2c       	mov	r14, r1
    172a:	f1 2c       	mov	r15, r1
    172c:	00 e0       	ldi	r16, 0x00	; 0
    172e:	10 e0       	ldi	r17, 0x00	; 0
    1730:	98 01       	movw	r18, r16
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	ba 01       	movw	r22, r20
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    173e:	f4 01       	movw	r30, r8
    1740:	13 86       	std	Z+11, r1	; 0x0b
    1742:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1744:	be 01       	movw	r22, r28
    1746:	6a 5f       	subi	r22, 0xFA	; 250
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	ce 01       	movw	r24, r28
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <xTaskCheckForTimeOut>
    1752:	88 23       	and	r24, r24
    1754:	81 f2       	breq	.-96     	; 0x16f6 <xStreamBufferSend+0x90>
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
                    break;
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    175e:	61 2c       	mov	r6, r1
    1760:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1762:	61 14       	cp	r6, r1
    1764:	71 04       	cpc	r7, r1
    1766:	19 f4       	brne	.+6      	; 0x176e <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1768:	c4 01       	movw	r24, r8
    176a:	6b df       	rcall	.-298    	; 0x1642 <xStreamBufferSpacesAvailable>
    176c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    176e:	82 01       	movw	r16, r4
    1770:	93 01       	movw	r18, r6
    1772:	a1 01       	movw	r20, r2
    1774:	6a 85       	ldd	r22, Y+10	; 0x0a
    1776:	7b 85       	ldd	r23, Y+11	; 0x0b
    1778:	c4 01       	movw	r24, r8
    177a:	3c de       	rcall	.-904    	; 0x13f4 <prvWriteMessageToBuffer>
    177c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    177e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1780:	e9 f0       	breq	.+58     	; 0x17bc <xStreamBufferSend+0x156>
    1782:	c4 01       	movw	r24, r8
    1784:	cb dd       	rcall	.-1130   	; 0x131c <prvBytesInBuffer>
    1786:	f4 01       	movw	r30, r8
    1788:	26 81       	ldd	r18, Z+6	; 0x06
    178a:	37 81       	ldd	r19, Z+7	; 0x07
    178c:	82 17       	cp	r24, r18
    178e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1790:	a8 f0       	brcs	.+42     	; 0x17bc <xStreamBufferSend+0x156>
    1792:	8b d3       	rcall	.+1814   	; 0x1eaa <vTaskSuspendAll>
    1794:	f4 01       	movw	r30, r8
    1796:	80 85       	ldd	r24, Z+8	; 0x08
    1798:	91 85       	ldd	r25, Z+9	; 0x09
    179a:	89 2b       	or	r24, r25
    179c:	71 f0       	breq	.+28     	; 0x17ba <xStreamBufferSend+0x154>
    179e:	80 85       	ldd	r24, Z+8	; 0x08
    17a0:	91 85       	ldd	r25, Z+9	; 0x09
    17a2:	e1 2c       	mov	r14, r1
    17a4:	f1 2c       	mov	r15, r1
    17a6:	00 e0       	ldi	r16, 0x00	; 0
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	a9 01       	movw	r20, r18
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	0e 94 12 16 	call	0x2c24	; 0x2c24 <xTaskGenericNotify>
    17b4:	f4 01       	movw	r30, r8
    17b6:	11 86       	std	Z+9, r1	; 0x09
    17b8:	10 86       	std	Z+8, r1	; 0x08
    17ba:	b7 d4       	rcall	.+2414   	; 0x212a <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    17bc:	c6 01       	movw	r24, r12
    17be:	2b 96       	adiw	r28, 0x0b	; 11
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	bf 90       	pop	r11
    17dc:	af 90       	pop	r10
    17de:	9f 90       	pop	r9
    17e0:	8f 90       	pop	r8
    17e2:	7f 90       	pop	r7
    17e4:	6f 90       	pop	r6
    17e6:	5f 90       	pop	r5
    17e8:	4f 90       	pop	r4
    17ea:	3f 90       	pop	r3
    17ec:	2f 90       	pop	r2
    17ee:	08 95       	ret

000017f0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    17f0:	af 92       	push	r10
    17f2:	bf 92       	push	r11
    17f4:	cf 92       	push	r12
    17f6:	df 92       	push	r13
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	ec 01       	movw	r28, r24
    1806:	7b 01       	movw	r14, r22
    1808:	5a 01       	movw	r10, r20
    180a:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    180c:	8e 85       	ldd	r24, Y+14	; 0x0e
    180e:	80 ff       	sbrs	r24, 0
    1810:	04 c0       	rjmp	.+8      	; 0x181a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1812:	8a 01       	movw	r16, r20
    1814:	0e 5f       	subi	r16, 0xFE	; 254
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	01 c0       	rjmp	.+2      	; 0x181c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    181a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    181c:	ce 01       	movw	r24, r28
    181e:	11 df       	rcall	.-478    	; 0x1642 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1820:	9c 01       	movw	r18, r24
    1822:	a5 01       	movw	r20, r10
    1824:	b7 01       	movw	r22, r14
    1826:	ce 01       	movw	r24, r28
    1828:	e5 dd       	rcall	.-1078   	; 0x13f4 <prvWriteMessageToBuffer>
    182a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    182c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    182e:	c1 f0       	breq	.+48     	; 0x1860 <xStreamBufferSendFromISR+0x70>
    1830:	ce 01       	movw	r24, r28
    1832:	74 dd       	rcall	.-1304   	; 0x131c <prvBytesInBuffer>
    1834:	2e 81       	ldd	r18, Y+6	; 0x06
    1836:	3f 81       	ldd	r19, Y+7	; 0x07
    1838:	82 17       	cp	r24, r18
    183a:	93 07       	cpc	r25, r19
    183c:	88 f0       	brcs	.+34     	; 0x1860 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    183e:	88 85       	ldd	r24, Y+8	; 0x08
    1840:	99 85       	ldd	r25, Y+9	; 0x09
    1842:	89 2b       	or	r24, r25
    1844:	69 f0       	breq	.+26     	; 0x1860 <xStreamBufferSendFromISR+0x70>
    1846:	88 85       	ldd	r24, Y+8	; 0x08
    1848:	99 85       	ldd	r25, Y+9	; 0x09
    184a:	e1 2c       	mov	r14, r1
    184c:	f1 2c       	mov	r15, r1
    184e:	00 e0       	ldi	r16, 0x00	; 0
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	a9 01       	movw	r20, r18
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	0e 94 09 17 	call	0x2e12	; 0x2e12 <xTaskGenericNotifyFromISR>
    185c:	19 86       	std	Y+9, r1	; 0x09
    185e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1860:	c5 01       	movw	r24, r10
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	bf 90       	pop	r11
    1874:	af 90       	pop	r10
    1876:	08 95       	ret

00001878 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1878:	4f 92       	push	r4
    187a:	5f 92       	push	r5
    187c:	6f 92       	push	r6
    187e:	7f 92       	push	r7
    1880:	8f 92       	push	r8
    1882:	9f 92       	push	r9
    1884:	af 92       	push	r10
    1886:	bf 92       	push	r11
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	ec 01       	movw	r28, r24
    189a:	2b 01       	movw	r4, r22
    189c:	3a 01       	movw	r6, r20
    189e:	58 01       	movw	r10, r16
    18a0:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    18a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    18a4:	80 ff       	sbrs	r24, 0
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    18a8:	68 94       	set
    18aa:	88 24       	eor	r8, r8
    18ac:	81 f8       	bld	r8, 1
    18ae:	91 2c       	mov	r9, r1
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    18b2:	81 2c       	mov	r8, r1
    18b4:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    18b6:	a1 14       	cp	r10, r1
    18b8:	b1 04       	cpc	r11, r1
    18ba:	c1 04       	cpc	r12, r1
    18bc:	d1 04       	cpc	r13, r1
    18be:	41 f1       	breq	.+80     	; 0x1910 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18c6:	ce 01       	movw	r24, r28
    18c8:	29 dd       	rcall	.-1454   	; 0x131c <prvBytesInBuffer>
    18ca:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    18cc:	88 16       	cp	r8, r24
    18ce:	99 06       	cpc	r9, r25
    18d0:	48 f0       	brcs	.+18     	; 0x18e4 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 2b 18 	call	0x3056	; 0x3056 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    18dc:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <xTaskGetCurrentTaskHandle>
    18e0:	99 87       	std	Y+9, r25	; 0x09
    18e2:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    18e8:	8e 14       	cp	r8, r14
    18ea:	9f 04       	cpc	r9, r15
    18ec:	a0 f0       	brcs	.+40     	; 0x1916 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    18ee:	e1 2c       	mov	r14, r1
    18f0:	f1 2c       	mov	r15, r1
    18f2:	00 e0       	ldi	r16, 0x00	; 0
    18f4:	10 e0       	ldi	r17, 0x00	; 0
    18f6:	98 01       	movw	r18, r16
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	ba 01       	movw	r22, r20
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1904:	19 86       	std	Y+9, r1	; 0x09
    1906:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1908:	ce 01       	movw	r24, r28
    190a:	08 dd       	rcall	.-1520   	; 0x131c <prvBytesInBuffer>
    190c:	7c 01       	movw	r14, r24
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1910:	ce 01       	movw	r24, r28
    1912:	04 dd       	rcall	.-1528   	; 0x131c <prvBytesInBuffer>
    1914:	7c 01       	movw	r14, r24
    1916:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1918:	9f 04       	cpc	r9, r15
    191a:	e8 f4       	brcc	.+58     	; 0x1956 <xStreamBufferReceive+0xde>
    191c:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    191e:	97 01       	movw	r18, r14
    1920:	a3 01       	movw	r20, r6
    1922:	b2 01       	movw	r22, r4
    1924:	ce 01       	movw	r24, r28
    1926:	f8 dd       	rcall	.-1040   	; 0x1518 <prvReadMessageFromBuffer>
    1928:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    192a:	89 2b       	or	r24, r25
    192c:	b1 f0       	breq	.+44     	; 0x195a <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    192e:	bd d2       	rcall	.+1402   	; 0x1eaa <vTaskSuspendAll>
    1930:	8a 85       	ldd	r24, Y+10	; 0x0a
    1932:	9b 85       	ldd	r25, Y+11	; 0x0b
    1934:	89 2b       	or	r24, r25
    1936:	69 f0       	breq	.+26     	; 0x1952 <xStreamBufferReceive+0xda>
    1938:	8a 85       	ldd	r24, Y+10	; 0x0a
    193a:	9b 85       	ldd	r25, Y+11	; 0x0b
    193c:	e1 2c       	mov	r14, r1
    193e:	f1 2c       	mov	r15, r1
    1940:	00 e0       	ldi	r16, 0x00	; 0
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	a9 01       	movw	r20, r18
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <xTaskGenericNotify>
    194e:	1b 86       	std	Y+11, r1	; 0x0b
    1950:	1a 86       	std	Y+10, r1	; 0x0a
    1952:	eb d3       	rcall	.+2006   	; 0x212a <xTaskResumeAll>
    1954:	02 c0       	rjmp	.+4      	; 0x195a <xStreamBufferReceive+0xe2>
    1956:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1958:	d1 2c       	mov	r13, r1
    195a:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	df 90       	pop	r13
    196a:	cf 90       	pop	r12
    196c:	bf 90       	pop	r11
    196e:	af 90       	pop	r10
    1970:	9f 90       	pop	r9
    1972:	8f 90       	pop	r8
    1974:	7f 90       	pop	r7
    1976:	6f 90       	pop	r6
    1978:	5f 90       	pop	r5
    197a:	4f 90       	pop	r4
    197c:	08 95       	ret

0000197e <prvResetNextTaskUnblockTime>:
    197e:	e0 91 1b 16 	lds	r30, 0x161B	; 0x80161b <pxDelayedTaskList>
    1982:	f0 91 1c 16 	lds	r31, 0x161C	; 0x80161c <pxDelayedTaskList+0x1>
    1986:	80 81       	ld	r24, Z
    1988:	81 11       	cpse	r24, r1
    198a:	0c c0       	rjmp	.+24     	; 0x19a4 <prvResetNextTaskUnblockTime+0x26>
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	9f ef       	ldi	r25, 0xFF	; 255
    1990:	dc 01       	movw	r26, r24
    1992:	80 93 e5 15 	sts	0x15E5, r24	; 0x8015e5 <xNextTaskUnblockTime>
    1996:	90 93 e6 15 	sts	0x15E6, r25	; 0x8015e6 <xNextTaskUnblockTime+0x1>
    199a:	a0 93 e7 15 	sts	0x15E7, r26	; 0x8015e7 <xNextTaskUnblockTime+0x2>
    199e:	b0 93 e8 15 	sts	0x15E8, r27	; 0x8015e8 <xNextTaskUnblockTime+0x3>
    19a2:	08 95       	ret
    19a4:	e0 91 1b 16 	lds	r30, 0x161B	; 0x80161b <pxDelayedTaskList>
    19a8:	f0 91 1c 16 	lds	r31, 0x161C	; 0x80161c <pxDelayedTaskList+0x1>
    19ac:	07 80       	ldd	r0, Z+7	; 0x07
    19ae:	f0 85       	ldd	r31, Z+8	; 0x08
    19b0:	e0 2d       	mov	r30, r0
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	a2 81       	ldd	r26, Z+2	; 0x02
    19b8:	b3 81       	ldd	r27, Z+3	; 0x03
    19ba:	80 93 e5 15 	sts	0x15E5, r24	; 0x8015e5 <xNextTaskUnblockTime>
    19be:	90 93 e6 15 	sts	0x15E6, r25	; 0x8015e6 <xNextTaskUnblockTime+0x1>
    19c2:	a0 93 e7 15 	sts	0x15E7, r26	; 0x8015e7 <xNextTaskUnblockTime+0x2>
    19c6:	b0 93 e8 15 	sts	0x15E8, r27	; 0x8015e8 <xNextTaskUnblockTime+0x3>
    19ca:	08 95       	ret

000019cc <prvDeleteTCB>:
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	ec 01       	movw	r28, r24
    19d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d6:	18 d8       	rcall	.-4048   	; 0xa08 <vPortFree>
    19d8:	ce 01       	movw	r24, r28
    19da:	16 d8       	rcall	.-4052   	; 0xa08 <vPortFree>
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	08 95       	ret

000019e2 <prvInitialiseNewTask>:
    19e2:	4f 92       	push	r4
    19e4:	5f 92       	push	r5
    19e6:	6f 92       	push	r6
    19e8:	7f 92       	push	r7
    19ea:	8f 92       	push	r8
    19ec:	9f 92       	push	r9
    19ee:	af 92       	push	r10
    19f0:	bf 92       	push	r11
    19f2:	cf 92       	push	r12
    19f4:	df 92       	push	r13
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	0f 93       	push	r16
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	2c 01       	movw	r4, r24
    1a02:	5b 01       	movw	r10, r22
    1a04:	4a 01       	movw	r8, r20
    1a06:	39 01       	movw	r6, r18
    1a08:	e6 01       	movw	r28, r12
    1a0a:	65 ea       	ldi	r22, 0xA5	; 165
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a12:	0e 94 d7 32 	call	0x65ae	; 0x65ae <memset>
    1a16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a1a:	21 e0       	ldi	r18, 0x01	; 1
    1a1c:	82 1a       	sub	r8, r18
    1a1e:	91 08       	sbc	r9, r1
    1a20:	88 0e       	add	r8, r24
    1a22:	99 1e       	adc	r9, r25
    1a24:	a1 14       	cp	r10, r1
    1a26:	b1 04       	cpc	r11, r1
    1a28:	89 f4       	brne	.+34     	; 0x1a4c <prvInitialiseNewTask+0x6a>
    1a2a:	15 c0       	rjmp	.+42     	; 0x1a56 <prvInitialiseNewTask+0x74>
    1a2c:	82 2f       	mov	r24, r18
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	f5 01       	movw	r30, r10
    1a32:	e8 0f       	add	r30, r24
    1a34:	f9 1f       	adc	r31, r25
    1a36:	30 81       	ld	r19, Z
    1a38:	de 01       	movw	r26, r28
    1a3a:	a8 0f       	add	r26, r24
    1a3c:	b9 1f       	adc	r27, r25
    1a3e:	5d 96       	adiw	r26, 0x1d	; 29
    1a40:	3c 93       	st	X, r19
    1a42:	80 81       	ld	r24, Z
    1a44:	88 23       	and	r24, r24
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <prvInitialiseNewTask+0x70>
    1a48:	2f 5f       	subi	r18, 0xFF	; 255
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <prvInitialiseNewTask+0x6c>
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	20 31       	cpi	r18, 0x10	; 16
    1a50:	68 f3       	brcs	.-38     	; 0x1a2c <prvInitialiseNewTask+0x4a>
    1a52:	1c a6       	std	Y+44, r1	; 0x2c
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <prvInitialiseNewTask+0x76>
    1a56:	1d 8e       	std	Y+29, r1	; 0x1d
    1a58:	0a 30       	cpi	r16, 0x0A	; 10
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <prvInitialiseNewTask+0x7c>
    1a5c:	09 e0       	ldi	r16, 0x09	; 9
    1a5e:	0a 8f       	std	Y+26, r16	; 0x1a
    1a60:	0d a7       	std	Y+45, r16	; 0x2d
    1a62:	1e a6       	std	Y+46, r1	; 0x2e
    1a64:	ce 01       	movw	r24, r28
    1a66:	02 96       	adiw	r24, 0x02	; 2
    1a68:	1d d8       	rcall	.-4038   	; 0xaa4 <vListInitialiseItem>
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	0e 96       	adiw	r24, 0x0e	; 14
    1a6e:	1a d8       	rcall	.-4044   	; 0xaa4 <vListInitialiseItem>
    1a70:	db 87       	std	Y+11, r29	; 0x0b
    1a72:	ca 87       	std	Y+10, r28	; 0x0a
    1a74:	8a e0       	ldi	r24, 0x0A	; 10
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	80 1b       	sub	r24, r16
    1a7e:	91 09       	sbc	r25, r1
    1a80:	a1 09       	sbc	r26, r1
    1a82:	b1 09       	sbc	r27, r1
    1a84:	8e 87       	std	Y+14, r24	; 0x0e
    1a86:	9f 87       	std	Y+15, r25	; 0x0f
    1a88:	a8 8b       	std	Y+16, r26	; 0x10
    1a8a:	b9 8b       	std	Y+17, r27	; 0x11
    1a8c:	df 8b       	std	Y+23, r29	; 0x17
    1a8e:	ce 8b       	std	Y+22, r28	; 0x16
    1a90:	84 e0       	ldi	r24, 0x04	; 4
    1a92:	fe 01       	movw	r30, r28
    1a94:	bf 96       	adiw	r30, 0x2f	; 47
    1a96:	df 01       	movw	r26, r30
    1a98:	1d 92       	st	X+, r1
    1a9a:	8a 95       	dec	r24
    1a9c:	e9 f7       	brne	.-6      	; 0x1a98 <prvInitialiseNewTask+0xb6>
    1a9e:	1b aa       	std	Y+51, r1	; 0x33
    1aa0:	a3 01       	movw	r20, r6
    1aa2:	b2 01       	movw	r22, r4
    1aa4:	c4 01       	movw	r24, r8
    1aa6:	72 d8       	rcall	.-3868   	; 0xb8c <pxPortInitialiseStack>
    1aa8:	99 83       	std	Y+1, r25	; 0x01
    1aaa:	88 83       	st	Y, r24
    1aac:	e1 14       	cp	r14, r1
    1aae:	f1 04       	cpc	r15, r1
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <prvInitialiseNewTask+0xd6>
    1ab2:	f7 01       	movw	r30, r14
    1ab4:	d1 83       	std	Z+1, r29	; 0x01
    1ab6:	c0 83       	st	Z, r28
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	bf 90       	pop	r11
    1ac8:	af 90       	pop	r10
    1aca:	9f 90       	pop	r9
    1acc:	8f 90       	pop	r8
    1ace:	7f 90       	pop	r7
    1ad0:	6f 90       	pop	r6
    1ad2:	5f 90       	pop	r5
    1ad4:	4f 90       	pop	r4
    1ad6:	08 95       	ret

00001ad8 <prvInitialiseTaskLists>:
    1ad8:	cf 93       	push	r28
    1ada:	c0 e0       	ldi	r28, 0x00	; 0
    1adc:	09 c0       	rjmp	.+18     	; 0x1af0 <prvInitialiseTaskLists+0x18>
    1ade:	2b e0       	ldi	r18, 0x0B	; 11
    1ae0:	c2 9f       	mul	r28, r18
    1ae2:	c0 01       	movw	r24, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	8d 5c       	subi	r24, 0xCD	; 205
    1ae8:	99 4e       	sbci	r25, 0xE9	; 233
    1aea:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialise>
    1aee:	cf 5f       	subi	r28, 0xFF	; 255
    1af0:	ca 30       	cpi	r28, 0x0A	; 10
    1af2:	a8 f3       	brcs	.-22     	; 0x1ade <prvInitialiseTaskLists+0x6>
    1af4:	88 e2       	ldi	r24, 0x28	; 40
    1af6:	96 e1       	ldi	r25, 0x16	; 22
    1af8:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialise>
    1afc:	8d e1       	ldi	r24, 0x1D	; 29
    1afe:	96 e1       	ldi	r25, 0x16	; 22
    1b00:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialise>
    1b04:	8e e0       	ldi	r24, 0x0E	; 14
    1b06:	96 e1       	ldi	r25, 0x16	; 22
    1b08:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialise>
    1b0c:	83 e0       	ldi	r24, 0x03	; 3
    1b0e:	96 e1       	ldi	r25, 0x16	; 22
    1b10:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialise>
    1b14:	87 ef       	ldi	r24, 0xF7	; 247
    1b16:	95 e1       	ldi	r25, 0x15	; 21
    1b18:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialise>
    1b1c:	88 e2       	ldi	r24, 0x28	; 40
    1b1e:	96 e1       	ldi	r25, 0x16	; 22
    1b20:	90 93 1c 16 	sts	0x161C, r25	; 0x80161c <pxDelayedTaskList+0x1>
    1b24:	80 93 1b 16 	sts	0x161B, r24	; 0x80161b <pxDelayedTaskList>
    1b28:	8d e1       	ldi	r24, 0x1D	; 29
    1b2a:	96 e1       	ldi	r25, 0x16	; 22
    1b2c:	90 93 1a 16 	sts	0x161A, r25	; 0x80161a <pxOverflowDelayedTaskList+0x1>
    1b30:	80 93 19 16 	sts	0x1619, r24	; 0x801619 <pxOverflowDelayedTaskList>
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret

00001b38 <prvAddNewTaskToReadyList>:
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	ec 01       	movw	r28, r24
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	0f 92       	push	r0
    1b44:	80 91 f6 15 	lds	r24, 0x15F6	; 0x8015f6 <uxCurrentNumberOfTasks>
    1b48:	8f 5f       	subi	r24, 0xFF	; 255
    1b4a:	80 93 f6 15 	sts	0x15F6, r24	; 0x8015f6 <uxCurrentNumberOfTasks>
    1b4e:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1b52:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1b56:	89 2b       	or	r24, r25
    1b58:	51 f4       	brne	.+20     	; 0x1b6e <prvAddNewTaskToReadyList+0x36>
    1b5a:	d0 93 a2 16 	sts	0x16A2, r29	; 0x8016a2 <pxCurrentTCB+0x1>
    1b5e:	c0 93 a1 16 	sts	0x16A1, r28	; 0x8016a1 <pxCurrentTCB>
    1b62:	80 91 f6 15 	lds	r24, 0x15F6	; 0x8015f6 <uxCurrentNumberOfTasks>
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	91 f4       	brne	.+36     	; 0x1b8e <prvAddNewTaskToReadyList+0x56>
    1b6a:	b6 df       	rcall	.-148    	; 0x1ad8 <prvInitialiseTaskLists>
    1b6c:	10 c0       	rjmp	.+32     	; 0x1b8e <prvAddNewTaskToReadyList+0x56>
    1b6e:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <xSchedulerRunning>
    1b72:	81 11       	cpse	r24, r1
    1b74:	0c c0       	rjmp	.+24     	; 0x1b8e <prvAddNewTaskToReadyList+0x56>
    1b76:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1b7a:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1b7e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b80:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b82:	89 17       	cp	r24, r25
    1b84:	20 f0       	brcs	.+8      	; 0x1b8e <prvAddNewTaskToReadyList+0x56>
    1b86:	d0 93 a2 16 	sts	0x16A2, r29	; 0x8016a2 <pxCurrentTCB+0x1>
    1b8a:	c0 93 a1 16 	sts	0x16A1, r28	; 0x8016a1 <pxCurrentTCB>
    1b8e:	80 91 e9 15 	lds	r24, 0x15E9	; 0x8015e9 <uxTaskNumber>
    1b92:	8f 5f       	subi	r24, 0xFF	; 255
    1b94:	80 93 e9 15 	sts	0x15E9, r24	; 0x8015e9 <uxTaskNumber>
    1b98:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b9a:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <uxTopReadyPriority>
    1b9e:	8e 17       	cp	r24, r30
    1ba0:	10 f4       	brcc	.+4      	; 0x1ba6 <prvAddNewTaskToReadyList+0x6e>
    1ba2:	e0 93 f1 15 	sts	0x15F1, r30	; 0x8015f1 <uxTopReadyPriority>
    1ba6:	8b e0       	ldi	r24, 0x0B	; 11
    1ba8:	8e 9f       	mul	r24, r30
    1baa:	f0 01       	movw	r30, r0
    1bac:	11 24       	eor	r1, r1
    1bae:	ed 5c       	subi	r30, 0xCD	; 205
    1bb0:	f9 4e       	sbci	r31, 0xE9	; 233
    1bb2:	01 80       	ldd	r0, Z+1	; 0x01
    1bb4:	f2 81       	ldd	r31, Z+2	; 0x02
    1bb6:	e0 2d       	mov	r30, r0
    1bb8:	ff 83       	std	Y+7, r31	; 0x07
    1bba:	ee 83       	std	Y+6, r30	; 0x06
    1bbc:	26 81       	ldd	r18, Z+6	; 0x06
    1bbe:	37 81       	ldd	r19, Z+7	; 0x07
    1bc0:	39 87       	std	Y+9, r19	; 0x09
    1bc2:	28 87       	std	Y+8, r18	; 0x08
    1bc4:	a6 81       	ldd	r26, Z+6	; 0x06
    1bc6:	b7 81       	ldd	r27, Z+7	; 0x07
    1bc8:	9e 01       	movw	r18, r28
    1bca:	2e 5f       	subi	r18, 0xFE	; 254
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	15 96       	adiw	r26, 0x05	; 5
    1bd0:	3c 93       	st	X, r19
    1bd2:	2e 93       	st	-X, r18
    1bd4:	14 97       	sbiw	r26, 0x04	; 4
    1bd6:	37 83       	std	Z+7, r19	; 0x07
    1bd8:	26 83       	std	Z+6, r18	; 0x06
    1bda:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bdc:	8e 9f       	mul	r24, r30
    1bde:	f0 01       	movw	r30, r0
    1be0:	11 24       	eor	r1, r1
    1be2:	ed 5c       	subi	r30, 0xCD	; 205
    1be4:	f9 4e       	sbci	r31, 0xE9	; 233
    1be6:	fd 87       	std	Y+13, r31	; 0x0d
    1be8:	ec 87       	std	Y+12, r30	; 0x0c
    1bea:	80 81       	ld	r24, Z
    1bec:	8f 5f       	subi	r24, 0xFF	; 255
    1bee:	80 83       	st	Z, r24
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <xSchedulerRunning>
    1bf8:	88 23       	and	r24, r24
    1bfa:	49 f0       	breq	.+18     	; 0x1c0e <prvAddNewTaskToReadyList+0xd6>
    1bfc:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1c00:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1c04:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c06:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c08:	98 17       	cp	r25, r24
    1c0a:	08 f4       	brcc	.+2      	; 0x1c0e <prvAddNewTaskToReadyList+0xd6>
    1c0c:	08 d8       	rcall	.-4080   	; 0xc1e <vPortYield>
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	08 95       	ret

00001c14 <prvCheckTasksWaitingTermination>:
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	1b c0       	rjmp	.+54     	; 0x1c50 <prvCheckTasksWaitingTermination+0x3c>
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	0f 92       	push	r0
    1c20:	e0 91 0a 16 	lds	r30, 0x160A	; 0x80160a <xTasksWaitingTermination+0x7>
    1c24:	f0 91 0b 16 	lds	r31, 0x160B	; 0x80160b <xTasksWaitingTermination+0x8>
    1c28:	c0 85       	ldd	r28, Z+8	; 0x08
    1c2a:	d1 85       	ldd	r29, Z+9	; 0x09
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	02 96       	adiw	r24, 0x02	; 2
    1c30:	0e 94 93 05 	call	0xb26	; 0xb26 <uxListRemove>
    1c34:	80 91 f6 15 	lds	r24, 0x15F6	; 0x8015f6 <uxCurrentNumberOfTasks>
    1c38:	81 50       	subi	r24, 0x01	; 1
    1c3a:	80 93 f6 15 	sts	0x15F6, r24	; 0x8015f6 <uxCurrentNumberOfTasks>
    1c3e:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <uxDeletedTasksWaitingCleanUp>
    1c42:	81 50       	subi	r24, 0x01	; 1
    1c44:	80 93 02 16 	sts	0x1602, r24	; 0x801602 <uxDeletedTasksWaitingCleanUp>
    1c48:	0f 90       	pop	r0
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	be de       	rcall	.-644    	; 0x19cc <prvDeleteTCB>
    1c50:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <uxDeletedTasksWaitingCleanUp>
    1c54:	81 11       	cpse	r24, r1
    1c56:	e1 cf       	rjmp	.-62     	; 0x1c1a <prvCheckTasksWaitingTermination+0x6>
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <prvAddCurrentTaskToDelayedList>:
    1c5e:	8f 92       	push	r8
    1c60:	9f 92       	push	r9
    1c62:	af 92       	push	r10
    1c64:	bf 92       	push	r11
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	6b 01       	movw	r12, r22
    1c74:	7c 01       	movw	r14, r24
    1c76:	c4 2f       	mov	r28, r20
    1c78:	80 90 f2 15 	lds	r8, 0x15F2	; 0x8015f2 <xTickCount>
    1c7c:	90 90 f3 15 	lds	r9, 0x15F3	; 0x8015f3 <xTickCount+0x1>
    1c80:	a0 90 f4 15 	lds	r10, 0x15F4	; 0x8015f4 <xTickCount+0x2>
    1c84:	b0 90 f5 15 	lds	r11, 0x15F5	; 0x8015f5 <xTickCount+0x3>
    1c88:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1c8c:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1c90:	02 96       	adiw	r24, 0x02	; 2
    1c92:	0e 94 93 05 	call	0xb26	; 0xb26 <uxListRemove>
    1c96:	8f ef       	ldi	r24, 0xFF	; 255
    1c98:	c8 16       	cp	r12, r24
    1c9a:	d8 06       	cpc	r13, r24
    1c9c:	e8 06       	cpc	r14, r24
    1c9e:	f8 06       	cpc	r15, r24
    1ca0:	b1 f5       	brne	.+108    	; 0x1d0e <prvAddCurrentTaskToDelayedList+0xb0>
    1ca2:	cc 23       	and	r28, r28
    1ca4:	a1 f1       	breq	.+104    	; 0x1d0e <prvAddCurrentTaskToDelayedList+0xb0>
    1ca6:	e7 ef       	ldi	r30, 0xF7	; 247
    1ca8:	f5 e1       	ldi	r31, 0x15	; 21
    1caa:	a1 81       	ldd	r26, Z+1	; 0x01
    1cac:	b2 81       	ldd	r27, Z+2	; 0x02
    1cae:	c0 91 a1 16 	lds	r28, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1cb2:	d0 91 a2 16 	lds	r29, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1cb6:	bf 83       	std	Y+7, r27	; 0x07
    1cb8:	ae 83       	std	Y+6, r26	; 0x06
    1cba:	c0 91 a1 16 	lds	r28, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1cbe:	d0 91 a2 16 	lds	r29, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1cc2:	16 96       	adiw	r26, 0x06	; 6
    1cc4:	8d 91       	ld	r24, X+
    1cc6:	9c 91       	ld	r25, X
    1cc8:	17 97       	sbiw	r26, 0x07	; 7
    1cca:	99 87       	std	Y+9, r25	; 0x09
    1ccc:	88 87       	std	Y+8, r24	; 0x08
    1cce:	16 96       	adiw	r26, 0x06	; 6
    1cd0:	cd 91       	ld	r28, X+
    1cd2:	dc 91       	ld	r29, X
    1cd4:	17 97       	sbiw	r26, 0x07	; 7
    1cd6:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1cda:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1cde:	02 96       	adiw	r24, 0x02	; 2
    1ce0:	9d 83       	std	Y+5, r25	; 0x05
    1ce2:	8c 83       	std	Y+4, r24	; 0x04
    1ce4:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1ce8:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1cec:	02 96       	adiw	r24, 0x02	; 2
    1cee:	17 96       	adiw	r26, 0x07	; 7
    1cf0:	9c 93       	st	X, r25
    1cf2:	8e 93       	st	-X, r24
    1cf4:	16 97       	sbiw	r26, 0x06	; 6
    1cf6:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1cfa:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1cfe:	1d 96       	adiw	r26, 0x0d	; 13
    1d00:	fc 93       	st	X, r31
    1d02:	ee 93       	st	-X, r30
    1d04:	1c 97       	sbiw	r26, 0x0c	; 12
    1d06:	80 81       	ld	r24, Z
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	80 83       	st	Z, r24
    1d0c:	3f c0       	rjmp	.+126    	; 0x1d8c <prvAddCurrentTaskToDelayedList+0x12e>
    1d0e:	c8 0c       	add	r12, r8
    1d10:	d9 1c       	adc	r13, r9
    1d12:	ea 1c       	adc	r14, r10
    1d14:	fb 1c       	adc	r15, r11
    1d16:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1d1a:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1d1e:	c2 82       	std	Z+2, r12	; 0x02
    1d20:	d3 82       	std	Z+3, r13	; 0x03
    1d22:	e4 82       	std	Z+4, r14	; 0x04
    1d24:	f5 82       	std	Z+5, r15	; 0x05
    1d26:	c8 14       	cp	r12, r8
    1d28:	d9 04       	cpc	r13, r9
    1d2a:	ea 04       	cpc	r14, r10
    1d2c:	fb 04       	cpc	r15, r11
    1d2e:	68 f4       	brcc	.+26     	; 0x1d4a <prvAddCurrentTaskToDelayedList+0xec>
    1d30:	60 91 a1 16 	lds	r22, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1d34:	70 91 a2 16 	lds	r23, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1d38:	80 91 19 16 	lds	r24, 0x1619	; 0x801619 <pxOverflowDelayedTaskList>
    1d3c:	90 91 1a 16 	lds	r25, 0x161A	; 0x80161a <pxOverflowDelayedTaskList+0x1>
    1d40:	6e 5f       	subi	r22, 0xFE	; 254
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsert>
    1d48:	21 c0       	rjmp	.+66     	; 0x1d8c <prvAddCurrentTaskToDelayedList+0x12e>
    1d4a:	60 91 a1 16 	lds	r22, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    1d4e:	70 91 a2 16 	lds	r23, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    1d52:	80 91 1b 16 	lds	r24, 0x161B	; 0x80161b <pxDelayedTaskList>
    1d56:	90 91 1c 16 	lds	r25, 0x161C	; 0x80161c <pxDelayedTaskList+0x1>
    1d5a:	6e 5f       	subi	r22, 0xFE	; 254
    1d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5e:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsert>
    1d62:	80 91 e5 15 	lds	r24, 0x15E5	; 0x8015e5 <xNextTaskUnblockTime>
    1d66:	90 91 e6 15 	lds	r25, 0x15E6	; 0x8015e6 <xNextTaskUnblockTime+0x1>
    1d6a:	a0 91 e7 15 	lds	r26, 0x15E7	; 0x8015e7 <xNextTaskUnblockTime+0x2>
    1d6e:	b0 91 e8 15 	lds	r27, 0x15E8	; 0x8015e8 <xNextTaskUnblockTime+0x3>
    1d72:	c8 16       	cp	r12, r24
    1d74:	d9 06       	cpc	r13, r25
    1d76:	ea 06       	cpc	r14, r26
    1d78:	fb 06       	cpc	r15, r27
    1d7a:	40 f4       	brcc	.+16     	; 0x1d8c <prvAddCurrentTaskToDelayedList+0x12e>
    1d7c:	c0 92 e5 15 	sts	0x15E5, r12	; 0x8015e5 <xNextTaskUnblockTime>
    1d80:	d0 92 e6 15 	sts	0x15E6, r13	; 0x8015e6 <xNextTaskUnblockTime+0x1>
    1d84:	e0 92 e7 15 	sts	0x15E7, r14	; 0x8015e7 <xNextTaskUnblockTime+0x2>
    1d88:	f0 92 e8 15 	sts	0x15E8, r15	; 0x8015e8 <xNextTaskUnblockTime+0x3>
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	df 90       	pop	r13
    1d96:	cf 90       	pop	r12
    1d98:	bf 90       	pop	r11
    1d9a:	af 90       	pop	r10
    1d9c:	9f 90       	pop	r9
    1d9e:	8f 90       	pop	r8
    1da0:	08 95       	ret

00001da2 <xTaskCreate>:
    1da2:	2f 92       	push	r2
    1da4:	3f 92       	push	r3
    1da6:	4f 92       	push	r4
    1da8:	5f 92       	push	r5
    1daa:	6f 92       	push	r6
    1dac:	7f 92       	push	r7
    1dae:	8f 92       	push	r8
    1db0:	9f 92       	push	r9
    1db2:	af 92       	push	r10
    1db4:	bf 92       	push	r11
    1db6:	cf 92       	push	r12
    1db8:	df 92       	push	r13
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	3c 01       	movw	r6, r24
    1dc6:	1b 01       	movw	r2, r22
    1dc8:	4a 01       	movw	r8, r20
    1dca:	29 01       	movw	r4, r18
    1dcc:	ca 01       	movw	r24, r20
    1dce:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <pvPortMalloc>
    1dd2:	6c 01       	movw	r12, r24
    1dd4:	89 2b       	or	r24, r25
    1dd6:	71 f0       	breq	.+28     	; 0x1df4 <xTaskCreate+0x52>
    1dd8:	84 e3       	ldi	r24, 0x34	; 52
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <pvPortMalloc>
    1de0:	ec 01       	movw	r28, r24
    1de2:	89 2b       	or	r24, r25
    1de4:	19 f0       	breq	.+6      	; 0x1dec <xTaskCreate+0x4a>
    1de6:	dc 8e       	std	Y+28, r13	; 0x1c
    1de8:	cb 8e       	std	Y+27, r12	; 0x1b
    1dea:	06 c0       	rjmp	.+12     	; 0x1df8 <xTaskCreate+0x56>
    1dec:	c6 01       	movw	r24, r12
    1dee:	0e 94 04 05 	call	0xa08	; 0xa08 <vPortFree>
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <xTaskCreate+0x56>
    1df4:	c0 e0       	ldi	r28, 0x00	; 0
    1df6:	d0 e0       	ldi	r29, 0x00	; 0
    1df8:	20 97       	sbiw	r28, 0x00	; 0
    1dfa:	61 f0       	breq	.+24     	; 0x1e14 <xTaskCreate+0x72>
    1dfc:	a1 2c       	mov	r10, r1
    1dfe:	b1 2c       	mov	r11, r1
    1e00:	6e 01       	movw	r12, r28
    1e02:	92 01       	movw	r18, r4
    1e04:	a4 01       	movw	r20, r8
    1e06:	b1 01       	movw	r22, r2
    1e08:	c3 01       	movw	r24, r6
    1e0a:	eb dd       	rcall	.-1066   	; 0x19e2 <prvInitialiseNewTask>
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	94 de       	rcall	.-728    	; 0x1b38 <prvAddNewTaskToReadyList>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <xTaskCreate+0x74>
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	0f 91       	pop	r16
    1e1c:	ff 90       	pop	r15
    1e1e:	ef 90       	pop	r14
    1e20:	df 90       	pop	r13
    1e22:	cf 90       	pop	r12
    1e24:	bf 90       	pop	r11
    1e26:	af 90       	pop	r10
    1e28:	9f 90       	pop	r9
    1e2a:	8f 90       	pop	r8
    1e2c:	7f 90       	pop	r7
    1e2e:	6f 90       	pop	r6
    1e30:	5f 90       	pop	r5
    1e32:	4f 90       	pop	r4
    1e34:	3f 90       	pop	r3
    1e36:	2f 90       	pop	r2
    1e38:	08 95       	ret

00001e3a <vTaskStartScheduler>:
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	0f 2e       	mov	r0, r31
    1e42:	f3 ee       	ldi	r31, 0xE3	; 227
    1e44:	ef 2e       	mov	r14, r31
    1e46:	f5 e1       	ldi	r31, 0x15	; 21
    1e48:	ff 2e       	mov	r15, r31
    1e4a:	f0 2d       	mov	r31, r0
    1e4c:	00 e0       	ldi	r16, 0x00	; 0
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 ec       	ldi	r20, 0xC0	; 192
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	67 ed       	ldi	r22, 0xD7	; 215
    1e58:	72 e0       	ldi	r23, 0x02	; 2
    1e5a:	8e e4       	ldi	r24, 0x4E	; 78
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	a1 df       	rcall	.-190    	; 0x1da2 <xTaskCreate>
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	11 f4       	brne	.+4      	; 0x1e68 <vTaskStartScheduler+0x2e>
    1e64:	0e 94 cf 18 	call	0x319e	; 0x319e <xTimerCreateTimerTask>
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	c9 f4       	brne	.+50     	; 0x1e9e <vTaskStartScheduler+0x64>
    1e6c:	f8 94       	cli
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
    1e72:	dc 01       	movw	r26, r24
    1e74:	80 93 e5 15 	sts	0x15E5, r24	; 0x8015e5 <xNextTaskUnblockTime>
    1e78:	90 93 e6 15 	sts	0x15E6, r25	; 0x8015e6 <xNextTaskUnblockTime+0x1>
    1e7c:	a0 93 e7 15 	sts	0x15E7, r26	; 0x8015e7 <xNextTaskUnblockTime+0x2>
    1e80:	b0 93 e8 15 	sts	0x15E8, r27	; 0x8015e8 <xNextTaskUnblockTime+0x3>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	80 93 f0 15 	sts	0x15F0, r24	; 0x8015f0 <xSchedulerRunning>
    1e8a:	10 92 f2 15 	sts	0x15F2, r1	; 0x8015f2 <xTickCount>
    1e8e:	10 92 f3 15 	sts	0x15F3, r1	; 0x8015f3 <xTickCount+0x1>
    1e92:	10 92 f4 15 	sts	0x15F4, r1	; 0x8015f4 <xTickCount+0x2>
    1e96:	10 92 f5 15 	sts	0x15F5, r1	; 0x8015f5 <xTickCount+0x3>
    1e9a:	0e 94 dd 05 	call	0xbba	; 0xbba <xPortStartScheduler>
    1e9e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1ea2:	0f 91       	pop	r16
    1ea4:	ff 90       	pop	r15
    1ea6:	ef 90       	pop	r14
    1ea8:	08 95       	ret

00001eaa <vTaskSuspendAll>:
    1eaa:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <uxSchedulerSuspended>
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	80 93 e2 15 	sts	0x15E2, r24	; 0x8015e2 <uxSchedulerSuspended>
    1eb4:	08 95       	ret

00001eb6 <xTaskGetTickCount>:
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	0f 92       	push	r0
    1ebc:	60 91 f2 15 	lds	r22, 0x15F2	; 0x8015f2 <xTickCount>
    1ec0:	70 91 f3 15 	lds	r23, 0x15F3	; 0x8015f3 <xTickCount+0x1>
    1ec4:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <xTickCount+0x2>
    1ec8:	90 91 f5 15 	lds	r25, 0x15F5	; 0x8015f5 <xTickCount+0x3>
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	08 95       	ret

00001ed2 <xTaskIncrementTick>:
    1ed2:	cf 92       	push	r12
    1ed4:	df 92       	push	r13
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <uxSchedulerSuspended>
    1ee2:	81 11       	cpse	r24, r1
    1ee4:	05 c1       	rjmp	.+522    	; 0x20f0 <__DATA_REGION_LENGTH__+0xf0>
    1ee6:	c0 90 f2 15 	lds	r12, 0x15F2	; 0x8015f2 <xTickCount>
    1eea:	d0 90 f3 15 	lds	r13, 0x15F3	; 0x8015f3 <xTickCount+0x1>
    1eee:	e0 90 f4 15 	lds	r14, 0x15F4	; 0x8015f4 <xTickCount+0x2>
    1ef2:	f0 90 f5 15 	lds	r15, 0x15F5	; 0x8015f5 <xTickCount+0x3>
    1ef6:	8f ef       	ldi	r24, 0xFF	; 255
    1ef8:	c8 1a       	sub	r12, r24
    1efa:	d8 0a       	sbc	r13, r24
    1efc:	e8 0a       	sbc	r14, r24
    1efe:	f8 0a       	sbc	r15, r24
    1f00:	c0 92 f2 15 	sts	0x15F2, r12	; 0x8015f2 <xTickCount>
    1f04:	d0 92 f3 15 	sts	0x15F3, r13	; 0x8015f3 <xTickCount+0x1>
    1f08:	e0 92 f4 15 	sts	0x15F4, r14	; 0x8015f4 <xTickCount+0x2>
    1f0c:	f0 92 f5 15 	sts	0x15F5, r15	; 0x8015f5 <xTickCount+0x3>
    1f10:	c1 14       	cp	r12, r1
    1f12:	d1 04       	cpc	r13, r1
    1f14:	e1 04       	cpc	r14, r1
    1f16:	f1 04       	cpc	r15, r1
    1f18:	b1 f4       	brne	.+44     	; 0x1f46 <xTaskIncrementTick+0x74>
    1f1a:	80 91 1b 16 	lds	r24, 0x161B	; 0x80161b <pxDelayedTaskList>
    1f1e:	90 91 1c 16 	lds	r25, 0x161C	; 0x80161c <pxDelayedTaskList+0x1>
    1f22:	20 91 19 16 	lds	r18, 0x1619	; 0x801619 <pxOverflowDelayedTaskList>
    1f26:	30 91 1a 16 	lds	r19, 0x161A	; 0x80161a <pxOverflowDelayedTaskList+0x1>
    1f2a:	30 93 1c 16 	sts	0x161C, r19	; 0x80161c <pxDelayedTaskList+0x1>
    1f2e:	20 93 1b 16 	sts	0x161B, r18	; 0x80161b <pxDelayedTaskList>
    1f32:	90 93 1a 16 	sts	0x161A, r25	; 0x80161a <pxOverflowDelayedTaskList+0x1>
    1f36:	80 93 19 16 	sts	0x1619, r24	; 0x801619 <pxOverflowDelayedTaskList>
    1f3a:	80 91 ea 15 	lds	r24, 0x15EA	; 0x8015ea <xNumOfOverflows>
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	80 93 ea 15 	sts	0x15EA, r24	; 0x8015ea <xNumOfOverflows>
    1f44:	1c dd       	rcall	.-1480   	; 0x197e <prvResetNextTaskUnblockTime>
    1f46:	80 91 e5 15 	lds	r24, 0x15E5	; 0x8015e5 <xNextTaskUnblockTime>
    1f4a:	90 91 e6 15 	lds	r25, 0x15E6	; 0x8015e6 <xNextTaskUnblockTime+0x1>
    1f4e:	a0 91 e7 15 	lds	r26, 0x15E7	; 0x8015e7 <xNextTaskUnblockTime+0x2>
    1f52:	b0 91 e8 15 	lds	r27, 0x15E8	; 0x8015e8 <xNextTaskUnblockTime+0x3>
    1f56:	c8 16       	cp	r12, r24
    1f58:	d9 06       	cpc	r13, r25
    1f5a:	ea 06       	cpc	r14, r26
    1f5c:	fb 06       	cpc	r15, r27
    1f5e:	20 f4       	brcc	.+8      	; 0x1f68 <xTaskIncrementTick+0x96>
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	b2 c0       	rjmp	.+356    	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <xTaskIncrementTick+0x98>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	e0 91 1b 16 	lds	r30, 0x161B	; 0x80161b <pxDelayedTaskList>
    1f6e:	f0 91 1c 16 	lds	r31, 0x161C	; 0x80161c <pxDelayedTaskList+0x1>
    1f72:	90 81       	ld	r25, Z
    1f74:	91 11       	cpse	r25, r1
    1f76:	0c c0       	rjmp	.+24     	; 0x1f90 <xTaskIncrementTick+0xbe>
    1f78:	4f ef       	ldi	r20, 0xFF	; 255
    1f7a:	5f ef       	ldi	r21, 0xFF	; 255
    1f7c:	ba 01       	movw	r22, r20
    1f7e:	40 93 e5 15 	sts	0x15E5, r20	; 0x8015e5 <xNextTaskUnblockTime>
    1f82:	50 93 e6 15 	sts	0x15E6, r21	; 0x8015e6 <xNextTaskUnblockTime+0x1>
    1f86:	60 93 e7 15 	sts	0x15E7, r22	; 0x8015e7 <xNextTaskUnblockTime+0x2>
    1f8a:	70 93 e8 15 	sts	0x15E8, r23	; 0x8015e8 <xNextTaskUnblockTime+0x3>
    1f8e:	9c c0       	rjmp	.+312    	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    1f90:	e0 91 1b 16 	lds	r30, 0x161B	; 0x80161b <pxDelayedTaskList>
    1f94:	f0 91 1c 16 	lds	r31, 0x161C	; 0x80161c <pxDelayedTaskList+0x1>
    1f98:	07 80       	ldd	r0, Z+7	; 0x07
    1f9a:	f0 85       	ldd	r31, Z+8	; 0x08
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	00 84       	ldd	r0, Z+8	; 0x08
    1fa0:	f1 85       	ldd	r31, Z+9	; 0x09
    1fa2:	e0 2d       	mov	r30, r0
    1fa4:	42 81       	ldd	r20, Z+2	; 0x02
    1fa6:	53 81       	ldd	r21, Z+3	; 0x03
    1fa8:	64 81       	ldd	r22, Z+4	; 0x04
    1faa:	75 81       	ldd	r23, Z+5	; 0x05
    1fac:	c4 16       	cp	r12, r20
    1fae:	d5 06       	cpc	r13, r21
    1fb0:	e6 06       	cpc	r14, r22
    1fb2:	f7 06       	cpc	r15, r23
    1fb4:	48 f4       	brcc	.+18     	; 0x1fc8 <xTaskIncrementTick+0xf6>
    1fb6:	40 93 e5 15 	sts	0x15E5, r20	; 0x8015e5 <xNextTaskUnblockTime>
    1fba:	50 93 e6 15 	sts	0x15E6, r21	; 0x8015e6 <xNextTaskUnblockTime+0x1>
    1fbe:	60 93 e7 15 	sts	0x15E7, r22	; 0x8015e7 <xNextTaskUnblockTime+0x2>
    1fc2:	70 93 e8 15 	sts	0x15E8, r23	; 0x8015e8 <xNextTaskUnblockTime+0x3>
    1fc6:	80 c0       	rjmp	.+256    	; 0x20c8 <__DATA_REGION_LENGTH__+0xc8>
    1fc8:	a4 85       	ldd	r26, Z+12	; 0x0c
    1fca:	b5 85       	ldd	r27, Z+13	; 0x0d
    1fcc:	c6 81       	ldd	r28, Z+6	; 0x06
    1fce:	d7 81       	ldd	r29, Z+7	; 0x07
    1fd0:	20 85       	ldd	r18, Z+8	; 0x08
    1fd2:	31 85       	ldd	r19, Z+9	; 0x09
    1fd4:	3f 83       	std	Y+7, r19	; 0x07
    1fd6:	2e 83       	std	Y+6, r18	; 0x06
    1fd8:	c0 85       	ldd	r28, Z+8	; 0x08
    1fda:	d1 85       	ldd	r29, Z+9	; 0x09
    1fdc:	26 81       	ldd	r18, Z+6	; 0x06
    1fde:	37 81       	ldd	r19, Z+7	; 0x07
    1fe0:	3d 83       	std	Y+5, r19	; 0x05
    1fe2:	2c 83       	std	Y+4, r18	; 0x04
    1fe4:	11 96       	adiw	r26, 0x01	; 1
    1fe6:	4d 91       	ld	r20, X+
    1fe8:	5c 91       	ld	r21, X
    1fea:	12 97       	sbiw	r26, 0x02	; 2
    1fec:	9f 01       	movw	r18, r30
    1fee:	2e 5f       	subi	r18, 0xFE	; 254
    1ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff2:	42 17       	cp	r20, r18
    1ff4:	53 07       	cpc	r21, r19
    1ff6:	31 f4       	brne	.+12     	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    1ff8:	40 85       	ldd	r20, Z+8	; 0x08
    1ffa:	51 85       	ldd	r21, Z+9	; 0x09
    1ffc:	12 96       	adiw	r26, 0x02	; 2
    1ffe:	5c 93       	st	X, r21
    2000:	4e 93       	st	-X, r20
    2002:	11 97       	sbiw	r26, 0x01	; 1
    2004:	15 86       	std	Z+13, r1	; 0x0d
    2006:	14 86       	std	Z+12, r1	; 0x0c
    2008:	9c 91       	ld	r25, X
    200a:	91 50       	subi	r25, 0x01	; 1
    200c:	9c 93       	st	X, r25
    200e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2010:	b1 8d       	ldd	r27, Z+25	; 0x19
    2012:	10 97       	sbiw	r26, 0x00	; 0
    2014:	09 f1       	breq	.+66     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    2016:	c2 89       	ldd	r28, Z+18	; 0x12
    2018:	d3 89       	ldd	r29, Z+19	; 0x13
    201a:	44 89       	ldd	r20, Z+20	; 0x14
    201c:	55 89       	ldd	r21, Z+21	; 0x15
    201e:	5f 83       	std	Y+7, r21	; 0x07
    2020:	4e 83       	std	Y+6, r20	; 0x06
    2022:	c4 89       	ldd	r28, Z+20	; 0x14
    2024:	d5 89       	ldd	r29, Z+21	; 0x15
    2026:	42 89       	ldd	r20, Z+18	; 0x12
    2028:	53 89       	ldd	r21, Z+19	; 0x13
    202a:	5d 83       	std	Y+5, r21	; 0x05
    202c:	4c 83       	std	Y+4, r20	; 0x04
    202e:	11 96       	adiw	r26, 0x01	; 1
    2030:	6d 91       	ld	r22, X+
    2032:	7c 91       	ld	r23, X
    2034:	12 97       	sbiw	r26, 0x02	; 2
    2036:	af 01       	movw	r20, r30
    2038:	42 5f       	subi	r20, 0xF2	; 242
    203a:	5f 4f       	sbci	r21, 0xFF	; 255
    203c:	64 17       	cp	r22, r20
    203e:	75 07       	cpc	r23, r21
    2040:	31 f4       	brne	.+12     	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    2042:	44 89       	ldd	r20, Z+20	; 0x14
    2044:	55 89       	ldd	r21, Z+21	; 0x15
    2046:	12 96       	adiw	r26, 0x02	; 2
    2048:	5c 93       	st	X, r21
    204a:	4e 93       	st	-X, r20
    204c:	11 97       	sbiw	r26, 0x01	; 1
    204e:	11 8e       	std	Z+25, r1	; 0x19
    2050:	10 8e       	std	Z+24, r1	; 0x18
    2052:	9c 91       	ld	r25, X
    2054:	91 50       	subi	r25, 0x01	; 1
    2056:	9c 93       	st	X, r25
    2058:	a2 8d       	ldd	r26, Z+26	; 0x1a
    205a:	90 91 f1 15 	lds	r25, 0x15F1	; 0x8015f1 <uxTopReadyPriority>
    205e:	9a 17       	cp	r25, r26
    2060:	10 f4       	brcc	.+4      	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2062:	a0 93 f1 15 	sts	0x15F1, r26	; 0x8015f1 <uxTopReadyPriority>
    2066:	9b e0       	ldi	r25, 0x0B	; 11
    2068:	9a 9f       	mul	r25, r26
    206a:	d0 01       	movw	r26, r0
    206c:	11 24       	eor	r1, r1
    206e:	ad 5c       	subi	r26, 0xCD	; 205
    2070:	b9 4e       	sbci	r27, 0xE9	; 233
    2072:	11 96       	adiw	r26, 0x01	; 1
    2074:	0d 90       	ld	r0, X+
    2076:	bc 91       	ld	r27, X
    2078:	a0 2d       	mov	r26, r0
    207a:	b7 83       	std	Z+7, r27	; 0x07
    207c:	a6 83       	std	Z+6, r26	; 0x06
    207e:	16 96       	adiw	r26, 0x06	; 6
    2080:	4d 91       	ld	r20, X+
    2082:	5c 91       	ld	r21, X
    2084:	17 97       	sbiw	r26, 0x07	; 7
    2086:	51 87       	std	Z+9, r21	; 0x09
    2088:	40 87       	std	Z+8, r20	; 0x08
    208a:	16 96       	adiw	r26, 0x06	; 6
    208c:	cd 91       	ld	r28, X+
    208e:	dc 91       	ld	r29, X
    2090:	17 97       	sbiw	r26, 0x07	; 7
    2092:	3d 83       	std	Y+5, r19	; 0x05
    2094:	2c 83       	std	Y+4, r18	; 0x04
    2096:	17 96       	adiw	r26, 0x07	; 7
    2098:	3c 93       	st	X, r19
    209a:	2e 93       	st	-X, r18
    209c:	16 97       	sbiw	r26, 0x06	; 6
    209e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20a0:	9a 9f       	mul	r25, r26
    20a2:	d0 01       	movw	r26, r0
    20a4:	11 24       	eor	r1, r1
    20a6:	ad 5c       	subi	r26, 0xCD	; 205
    20a8:	b9 4e       	sbci	r27, 0xE9	; 233
    20aa:	b5 87       	std	Z+13, r27	; 0x0d
    20ac:	a4 87       	std	Z+12, r26	; 0x0c
    20ae:	9c 91       	ld	r25, X
    20b0:	9f 5f       	subi	r25, 0xFF	; 255
    20b2:	9c 93       	st	X, r25
    20b4:	22 8d       	ldd	r18, Z+26	; 0x1a
    20b6:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    20ba:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    20be:	92 8d       	ldd	r25, Z+26	; 0x1a
    20c0:	29 17       	cp	r18, r25
    20c2:	08 f0       	brcs	.+2      	; 0x20c6 <__DATA_REGION_LENGTH__+0xc6>
    20c4:	4f cf       	rjmp	.-354    	; 0x1f64 <xTaskIncrementTick+0x92>
    20c6:	51 cf       	rjmp	.-350    	; 0x1f6a <xTaskIncrementTick+0x98>
    20c8:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    20cc:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    20d0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    20d2:	9b e0       	ldi	r25, 0x0B	; 11
    20d4:	e9 9f       	mul	r30, r25
    20d6:	f0 01       	movw	r30, r0
    20d8:	11 24       	eor	r1, r1
    20da:	ed 5c       	subi	r30, 0xCD	; 205
    20dc:	f9 4e       	sbci	r31, 0xE9	; 233
    20de:	90 81       	ld	r25, Z
    20e0:	92 30       	cpi	r25, 0x02	; 2
    20e2:	08 f0       	brcs	.+2      	; 0x20e6 <__DATA_REGION_LENGTH__+0xe6>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 91 eb 15 	lds	r25, 0x15EB	; 0x8015eb <xYieldPending>
    20ea:	91 11       	cpse	r25, r1
    20ec:	16 c0       	rjmp	.+44     	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    20ee:	16 c0       	rjmp	.+44     	; 0x211c <__DATA_REGION_LENGTH__+0x11c>
    20f0:	80 91 ec 15 	lds	r24, 0x15EC	; 0x8015ec <xPendedTicks>
    20f4:	90 91 ed 15 	lds	r25, 0x15ED	; 0x8015ed <xPendedTicks+0x1>
    20f8:	a0 91 ee 15 	lds	r26, 0x15EE	; 0x8015ee <xPendedTicks+0x2>
    20fc:	b0 91 ef 15 	lds	r27, 0x15EF	; 0x8015ef <xPendedTicks+0x3>
    2100:	01 96       	adiw	r24, 0x01	; 1
    2102:	a1 1d       	adc	r26, r1
    2104:	b1 1d       	adc	r27, r1
    2106:	80 93 ec 15 	sts	0x15EC, r24	; 0x8015ec <xPendedTicks>
    210a:	90 93 ed 15 	sts	0x15ED, r25	; 0x8015ed <xPendedTicks+0x1>
    210e:	a0 93 ee 15 	sts	0x15EE, r26	; 0x8015ee <xPendedTicks+0x2>
    2112:	b0 93 ef 15 	sts	0x15EF, r27	; 0x8015ef <xPendedTicks+0x3>
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	01 c0       	rjmp	.+2      	; 0x211c <__DATA_REGION_LENGTH__+0x11c>
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	ff 90       	pop	r15
    2122:	ef 90       	pop	r14
    2124:	df 90       	pop	r13
    2126:	cf 90       	pop	r12
    2128:	08 95       	ret

0000212a <xTaskResumeAll>:
    212a:	cf 92       	push	r12
    212c:	df 92       	push	r13
    212e:	ef 92       	push	r14
    2130:	ff 92       	push	r15
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	0f 92       	push	r0
    213c:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <uxSchedulerSuspended>
    2140:	81 50       	subi	r24, 0x01	; 1
    2142:	80 93 e2 15 	sts	0x15E2, r24	; 0x8015e2 <uxSchedulerSuspended>
    2146:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <uxSchedulerSuspended>
    214a:	81 11       	cpse	r24, r1
    214c:	be c0       	rjmp	.+380    	; 0x22ca <__stack+0xcb>
    214e:	80 91 f6 15 	lds	r24, 0x15F6	; 0x8015f6 <uxCurrentNumberOfTasks>
    2152:	81 11       	cpse	r24, r1
    2154:	88 c0       	rjmp	.+272    	; 0x2266 <__stack+0x67>
    2156:	bc c0       	rjmp	.+376    	; 0x22d0 <__stack+0xd1>
    2158:	e0 91 15 16 	lds	r30, 0x1615	; 0x801615 <xPendingReadyList+0x7>
    215c:	f0 91 16 16 	lds	r31, 0x1616	; 0x801616 <xPendingReadyList+0x8>
    2160:	00 84       	ldd	r0, Z+8	; 0x08
    2162:	f1 85       	ldd	r31, Z+9	; 0x09
    2164:	e0 2d       	mov	r30, r0
    2166:	a0 8d       	ldd	r26, Z+24	; 0x18
    2168:	b1 8d       	ldd	r27, Z+25	; 0x19
    216a:	c2 89       	ldd	r28, Z+18	; 0x12
    216c:	d3 89       	ldd	r29, Z+19	; 0x13
    216e:	84 89       	ldd	r24, Z+20	; 0x14
    2170:	95 89       	ldd	r25, Z+21	; 0x15
    2172:	9f 83       	std	Y+7, r25	; 0x07
    2174:	8e 83       	std	Y+6, r24	; 0x06
    2176:	c4 89       	ldd	r28, Z+20	; 0x14
    2178:	d5 89       	ldd	r29, Z+21	; 0x15
    217a:	82 89       	ldd	r24, Z+18	; 0x12
    217c:	93 89       	ldd	r25, Z+19	; 0x13
    217e:	9d 83       	std	Y+5, r25	; 0x05
    2180:	8c 83       	std	Y+4, r24	; 0x04
    2182:	11 96       	adiw	r26, 0x01	; 1
    2184:	2d 91       	ld	r18, X+
    2186:	3c 91       	ld	r19, X
    2188:	12 97       	sbiw	r26, 0x02	; 2
    218a:	cf 01       	movw	r24, r30
    218c:	0e 96       	adiw	r24, 0x0e	; 14
    218e:	28 17       	cp	r18, r24
    2190:	39 07       	cpc	r19, r25
    2192:	31 f4       	brne	.+12     	; 0x21a0 <xTaskResumeAll+0x76>
    2194:	84 89       	ldd	r24, Z+20	; 0x14
    2196:	95 89       	ldd	r25, Z+21	; 0x15
    2198:	12 96       	adiw	r26, 0x02	; 2
    219a:	9c 93       	st	X, r25
    219c:	8e 93       	st	-X, r24
    219e:	11 97       	sbiw	r26, 0x01	; 1
    21a0:	11 8e       	std	Z+25, r1	; 0x19
    21a2:	10 8e       	std	Z+24, r1	; 0x18
    21a4:	8c 91       	ld	r24, X
    21a6:	81 50       	subi	r24, 0x01	; 1
    21a8:	8c 93       	st	X, r24
    21aa:	a4 85       	ldd	r26, Z+12	; 0x0c
    21ac:	b5 85       	ldd	r27, Z+13	; 0x0d
    21ae:	c6 81       	ldd	r28, Z+6	; 0x06
    21b0:	d7 81       	ldd	r29, Z+7	; 0x07
    21b2:	80 85       	ldd	r24, Z+8	; 0x08
    21b4:	91 85       	ldd	r25, Z+9	; 0x09
    21b6:	9f 83       	std	Y+7, r25	; 0x07
    21b8:	8e 83       	std	Y+6, r24	; 0x06
    21ba:	c0 85       	ldd	r28, Z+8	; 0x08
    21bc:	d1 85       	ldd	r29, Z+9	; 0x09
    21be:	86 81       	ldd	r24, Z+6	; 0x06
    21c0:	97 81       	ldd	r25, Z+7	; 0x07
    21c2:	9d 83       	std	Y+5, r25	; 0x05
    21c4:	8c 83       	std	Y+4, r24	; 0x04
    21c6:	11 96       	adiw	r26, 0x01	; 1
    21c8:	8d 91       	ld	r24, X+
    21ca:	9c 91       	ld	r25, X
    21cc:	12 97       	sbiw	r26, 0x02	; 2
    21ce:	9f 01       	movw	r18, r30
    21d0:	2e 5f       	subi	r18, 0xFE	; 254
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	82 17       	cp	r24, r18
    21d6:	93 07       	cpc	r25, r19
    21d8:	31 f4       	brne	.+12     	; 0x21e6 <xTaskResumeAll+0xbc>
    21da:	80 85       	ldd	r24, Z+8	; 0x08
    21dc:	91 85       	ldd	r25, Z+9	; 0x09
    21de:	12 96       	adiw	r26, 0x02	; 2
    21e0:	9c 93       	st	X, r25
    21e2:	8e 93       	st	-X, r24
    21e4:	11 97       	sbiw	r26, 0x01	; 1
    21e6:	15 86       	std	Z+13, r1	; 0x0d
    21e8:	14 86       	std	Z+12, r1	; 0x0c
    21ea:	8c 91       	ld	r24, X
    21ec:	81 50       	subi	r24, 0x01	; 1
    21ee:	8c 93       	st	X, r24
    21f0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21f2:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <uxTopReadyPriority>
    21f6:	8a 17       	cp	r24, r26
    21f8:	10 f4       	brcc	.+4      	; 0x21fe <xTaskResumeAll+0xd4>
    21fa:	a0 93 f1 15 	sts	0x15F1, r26	; 0x8015f1 <uxTopReadyPriority>
    21fe:	8b e0       	ldi	r24, 0x0B	; 11
    2200:	8a 9f       	mul	r24, r26
    2202:	d0 01       	movw	r26, r0
    2204:	11 24       	eor	r1, r1
    2206:	ad 5c       	subi	r26, 0xCD	; 205
    2208:	b9 4e       	sbci	r27, 0xE9	; 233
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	0d 90       	ld	r0, X+
    220e:	bc 91       	ld	r27, X
    2210:	a0 2d       	mov	r26, r0
    2212:	b7 83       	std	Z+7, r27	; 0x07
    2214:	a6 83       	std	Z+6, r26	; 0x06
    2216:	16 96       	adiw	r26, 0x06	; 6
    2218:	4d 91       	ld	r20, X+
    221a:	5c 91       	ld	r21, X
    221c:	17 97       	sbiw	r26, 0x07	; 7
    221e:	51 87       	std	Z+9, r21	; 0x09
    2220:	40 87       	std	Z+8, r20	; 0x08
    2222:	16 96       	adiw	r26, 0x06	; 6
    2224:	cd 91       	ld	r28, X+
    2226:	dc 91       	ld	r29, X
    2228:	17 97       	sbiw	r26, 0x07	; 7
    222a:	3d 83       	std	Y+5, r19	; 0x05
    222c:	2c 83       	std	Y+4, r18	; 0x04
    222e:	17 96       	adiw	r26, 0x07	; 7
    2230:	3c 93       	st	X, r19
    2232:	2e 93       	st	-X, r18
    2234:	16 97       	sbiw	r26, 0x06	; 6
    2236:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2238:	8a 9f       	mul	r24, r26
    223a:	d0 01       	movw	r26, r0
    223c:	11 24       	eor	r1, r1
    223e:	ad 5c       	subi	r26, 0xCD	; 205
    2240:	b9 4e       	sbci	r27, 0xE9	; 233
    2242:	b5 87       	std	Z+13, r27	; 0x0d
    2244:	a4 87       	std	Z+12, r26	; 0x0c
    2246:	8c 91       	ld	r24, X
    2248:	8f 5f       	subi	r24, 0xFF	; 255
    224a:	8c 93       	st	X, r24
    224c:	92 8d       	ldd	r25, Z+26	; 0x1a
    224e:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2252:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2256:	5a 96       	adiw	r26, 0x1a	; 26
    2258:	8c 91       	ld	r24, X
    225a:	98 17       	cp	r25, r24
    225c:	30 f0       	brcs	.+12     	; 0x226a <__stack+0x6b>
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <xYieldPending>
    2264:	02 c0       	rjmp	.+4      	; 0x226a <__stack+0x6b>
    2266:	e0 e0       	ldi	r30, 0x00	; 0
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <xPendingReadyList>
    226e:	81 11       	cpse	r24, r1
    2270:	73 cf       	rjmp	.-282    	; 0x2158 <xTaskResumeAll+0x2e>
    2272:	ef 2b       	or	r30, r31
    2274:	09 f0       	breq	.+2      	; 0x2278 <__stack+0x79>
    2276:	83 db       	rcall	.-2298   	; 0x197e <prvResetNextTaskUnblockTime>
    2278:	c0 90 ec 15 	lds	r12, 0x15EC	; 0x8015ec <xPendedTicks>
    227c:	d0 90 ed 15 	lds	r13, 0x15ED	; 0x8015ed <xPendedTicks+0x1>
    2280:	e0 90 ee 15 	lds	r14, 0x15EE	; 0x8015ee <xPendedTicks+0x2>
    2284:	f0 90 ef 15 	lds	r15, 0x15EF	; 0x8015ef <xPendedTicks+0x3>
    2288:	c1 14       	cp	r12, r1
    228a:	d1 04       	cpc	r13, r1
    228c:	e1 04       	cpc	r14, r1
    228e:	f1 04       	cpc	r15, r1
    2290:	a1 f0       	breq	.+40     	; 0x22ba <__stack+0xbb>
    2292:	1f de       	rcall	.-962    	; 0x1ed2 <xTaskIncrementTick>
    2294:	88 23       	and	r24, r24
    2296:	19 f0       	breq	.+6      	; 0x229e <__stack+0x9f>
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <xYieldPending>
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	c8 1a       	sub	r12, r24
    22a2:	d1 08       	sbc	r13, r1
    22a4:	e1 08       	sbc	r14, r1
    22a6:	f1 08       	sbc	r15, r1
    22a8:	a1 f7       	brne	.-24     	; 0x2292 <__stack+0x93>
    22aa:	10 92 ec 15 	sts	0x15EC, r1	; 0x8015ec <xPendedTicks>
    22ae:	10 92 ed 15 	sts	0x15ED, r1	; 0x8015ed <xPendedTicks+0x1>
    22b2:	10 92 ee 15 	sts	0x15EE, r1	; 0x8015ee <xPendedTicks+0x2>
    22b6:	10 92 ef 15 	sts	0x15EF, r1	; 0x8015ef <xPendedTicks+0x3>
    22ba:	80 91 eb 15 	lds	r24, 0x15EB	; 0x8015eb <xYieldPending>
    22be:	88 23       	and	r24, r24
    22c0:	31 f0       	breq	.+12     	; 0x22ce <__stack+0xcf>
    22c2:	0e 94 0f 06 	call	0xc1e	; 0xc1e <vPortYield>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <__stack+0xd1>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <__stack+0xd1>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	0f 90       	pop	r0
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	ff 90       	pop	r15
    22da:	ef 90       	pop	r14
    22dc:	df 90       	pop	r13
    22de:	cf 90       	pop	r12
    22e0:	08 95       	ret

000022e2 <xTaskDelayUntil>:
    22e2:	8f 92       	push	r8
    22e4:	9f 92       	push	r9
    22e6:	af 92       	push	r10
    22e8:	bf 92       	push	r11
    22ea:	cf 92       	push	r12
    22ec:	df 92       	push	r13
    22ee:	ef 92       	push	r14
    22f0:	ff 92       	push	r15
    22f2:	1f 93       	push	r17
    22f4:	cf 93       	push	r28
    22f6:	df 93       	push	r29
    22f8:	ec 01       	movw	r28, r24
    22fa:	6a 01       	movw	r12, r20
    22fc:	7b 01       	movw	r14, r22
    22fe:	d5 dd       	rcall	.-1110   	; 0x1eaa <vTaskSuspendAll>
    2300:	80 90 f2 15 	lds	r8, 0x15F2	; 0x8015f2 <xTickCount>
    2304:	90 90 f3 15 	lds	r9, 0x15F3	; 0x8015f3 <xTickCount+0x1>
    2308:	a0 90 f4 15 	lds	r10, 0x15F4	; 0x8015f4 <xTickCount+0x2>
    230c:	b0 90 f5 15 	lds	r11, 0x15F5	; 0x8015f5 <xTickCount+0x3>
    2310:	88 81       	ld	r24, Y
    2312:	99 81       	ldd	r25, Y+1	; 0x01
    2314:	aa 81       	ldd	r26, Y+2	; 0x02
    2316:	bb 81       	ldd	r27, Y+3	; 0x03
    2318:	ac 01       	movw	r20, r24
    231a:	bd 01       	movw	r22, r26
    231c:	4c 0d       	add	r20, r12
    231e:	5d 1d       	adc	r21, r13
    2320:	6e 1d       	adc	r22, r14
    2322:	7f 1d       	adc	r23, r15
    2324:	88 16       	cp	r8, r24
    2326:	99 06       	cpc	r9, r25
    2328:	aa 06       	cpc	r10, r26
    232a:	bb 06       	cpc	r11, r27
    232c:	60 f4       	brcc	.+24     	; 0x2346 <xTaskDelayUntil+0x64>
    232e:	48 17       	cp	r20, r24
    2330:	59 07       	cpc	r21, r25
    2332:	6a 07       	cpc	r22, r26
    2334:	7b 07       	cpc	r23, r27
    2336:	98 f4       	brcc	.+38     	; 0x235e <xTaskDelayUntil+0x7c>
    2338:	84 16       	cp	r8, r20
    233a:	95 06       	cpc	r9, r21
    233c:	a6 06       	cpc	r10, r22
    233e:	b7 06       	cpc	r11, r23
    2340:	80 f0       	brcs	.+32     	; 0x2362 <xTaskDelayUntil+0x80>
    2342:	10 e0       	ldi	r17, 0x00	; 0
    2344:	13 c0       	rjmp	.+38     	; 0x236c <xTaskDelayUntil+0x8a>
    2346:	48 17       	cp	r20, r24
    2348:	59 07       	cpc	r21, r25
    234a:	6a 07       	cpc	r22, r26
    234c:	7b 07       	cpc	r23, r27
    234e:	58 f0       	brcs	.+22     	; 0x2366 <xTaskDelayUntil+0x84>
    2350:	84 16       	cp	r8, r20
    2352:	95 06       	cpc	r9, r21
    2354:	a6 06       	cpc	r10, r22
    2356:	b7 06       	cpc	r11, r23
    2358:	40 f0       	brcs	.+16     	; 0x236a <xTaskDelayUntil+0x88>
    235a:	10 e0       	ldi	r17, 0x00	; 0
    235c:	07 c0       	rjmp	.+14     	; 0x236c <xTaskDelayUntil+0x8a>
    235e:	10 e0       	ldi	r17, 0x00	; 0
    2360:	05 c0       	rjmp	.+10     	; 0x236c <xTaskDelayUntil+0x8a>
    2362:	11 e0       	ldi	r17, 0x01	; 1
    2364:	03 c0       	rjmp	.+6      	; 0x236c <xTaskDelayUntil+0x8a>
    2366:	11 e0       	ldi	r17, 0x01	; 1
    2368:	01 c0       	rjmp	.+2      	; 0x236c <xTaskDelayUntil+0x8a>
    236a:	11 e0       	ldi	r17, 0x01	; 1
    236c:	48 83       	st	Y, r20
    236e:	59 83       	std	Y+1, r21	; 0x01
    2370:	6a 83       	std	Y+2, r22	; 0x02
    2372:	7b 83       	std	Y+3, r23	; 0x03
    2374:	11 23       	and	r17, r17
    2376:	41 f0       	breq	.+16     	; 0x2388 <xTaskDelayUntil+0xa6>
    2378:	cb 01       	movw	r24, r22
    237a:	ba 01       	movw	r22, r20
    237c:	68 19       	sub	r22, r8
    237e:	79 09       	sbc	r23, r9
    2380:	8a 09       	sbc	r24, r10
    2382:	9b 09       	sbc	r25, r11
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	6b dc       	rcall	.-1834   	; 0x1c5e <prvAddCurrentTaskToDelayedList>
    2388:	d0 de       	rcall	.-608    	; 0x212a <xTaskResumeAll>
    238a:	81 11       	cpse	r24, r1
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <xTaskDelayUntil+0xb0>
    238e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <vPortYield>
    2392:	81 2f       	mov	r24, r17
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	af 90       	pop	r10
    23a6:	9f 90       	pop	r9
    23a8:	8f 90       	pop	r8
    23aa:	08 95       	ret

000023ac <vTaskDelay>:
    23ac:	cf 92       	push	r12
    23ae:	df 92       	push	r13
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	6b 01       	movw	r12, r22
    23b6:	7c 01       	movw	r14, r24
    23b8:	67 2b       	or	r22, r23
    23ba:	68 2b       	or	r22, r24
    23bc:	69 2b       	or	r22, r25
    23be:	39 f0       	breq	.+14     	; 0x23ce <vTaskDelay+0x22>
    23c0:	74 dd       	rcall	.-1304   	; 0x1eaa <vTaskSuspendAll>
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	c7 01       	movw	r24, r14
    23c6:	b6 01       	movw	r22, r12
    23c8:	4a dc       	rcall	.-1900   	; 0x1c5e <prvAddCurrentTaskToDelayedList>
    23ca:	af de       	rcall	.-674    	; 0x212a <xTaskResumeAll>
    23cc:	01 c0       	rjmp	.+2      	; 0x23d0 <vTaskDelay+0x24>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	81 11       	cpse	r24, r1
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <vTaskDelay+0x2c>
    23d4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <vPortYield>
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	08 95       	ret

000023e2 <vTaskSwitchContext>:
    23e2:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <uxSchedulerSuspended>
    23e6:	88 23       	and	r24, r24
    23e8:	21 f0       	breq	.+8      	; 0x23f2 <vTaskSwitchContext+0x10>
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <xYieldPending>
    23f0:	08 95       	ret
    23f2:	10 92 eb 15 	sts	0x15EB, r1	; 0x8015eb <xYieldPending>
    23f6:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    23fa:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    23fe:	20 81       	ld	r18, Z
    2400:	31 81       	ldd	r19, Z+1	; 0x01
    2402:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2406:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    240a:	83 8d       	ldd	r24, Z+27	; 0x1b
    240c:	94 8d       	ldd	r25, Z+28	; 0x1c
    240e:	82 17       	cp	r24, r18
    2410:	93 07       	cpc	r25, r19
    2412:	60 f0       	brcs	.+24     	; 0x242c <vTaskSwitchContext+0x4a>
    2414:	60 91 a1 16 	lds	r22, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2418:	70 91 a2 16 	lds	r23, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    241c:	63 5e       	subi	r22, 0xE3	; 227
    241e:	7f 4f       	sbci	r23, 0xFF	; 255
    2420:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2424:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2428:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <vApplicationStackOverflowHook>
    242c:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <uxTopReadyPriority>
    2430:	01 c0       	rjmp	.+2      	; 0x2434 <vTaskSwitchContext+0x52>
    2432:	81 50       	subi	r24, 0x01	; 1
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	9b e0       	ldi	r25, 0x0B	; 11
    243a:	92 9f       	mul	r25, r18
    243c:	f0 01       	movw	r30, r0
    243e:	93 9f       	mul	r25, r19
    2440:	f0 0d       	add	r31, r0
    2442:	11 24       	eor	r1, r1
    2444:	ed 5c       	subi	r30, 0xCD	; 205
    2446:	f9 4e       	sbci	r31, 0xE9	; 233
    2448:	90 81       	ld	r25, Z
    244a:	99 23       	and	r25, r25
    244c:	91 f3       	breq	.-28     	; 0x2432 <vTaskSwitchContext+0x50>
    244e:	9b e0       	ldi	r25, 0x0B	; 11
    2450:	92 9f       	mul	r25, r18
    2452:	a0 01       	movw	r20, r0
    2454:	93 9f       	mul	r25, r19
    2456:	50 0d       	add	r21, r0
    2458:	11 24       	eor	r1, r1
    245a:	df 01       	movw	r26, r30
    245c:	01 80       	ldd	r0, Z+1	; 0x01
    245e:	f2 81       	ldd	r31, Z+2	; 0x02
    2460:	e0 2d       	mov	r30, r0
    2462:	04 80       	ldd	r0, Z+4	; 0x04
    2464:	f5 81       	ldd	r31, Z+5	; 0x05
    2466:	e0 2d       	mov	r30, r0
    2468:	12 96       	adiw	r26, 0x02	; 2
    246a:	fc 93       	st	X, r31
    246c:	ee 93       	st	-X, r30
    246e:	11 97       	sbiw	r26, 0x01	; 1
    2470:	4a 5c       	subi	r20, 0xCA	; 202
    2472:	59 4e       	sbci	r21, 0xE9	; 233
    2474:	e4 17       	cp	r30, r20
    2476:	f5 07       	cpc	r31, r21
    2478:	29 f4       	brne	.+10     	; 0x2484 <vTaskSwitchContext+0xa2>
    247a:	44 81       	ldd	r20, Z+4	; 0x04
    247c:	55 81       	ldd	r21, Z+5	; 0x05
    247e:	fd 01       	movw	r30, r26
    2480:	52 83       	std	Z+2, r21	; 0x02
    2482:	41 83       	std	Z+1, r20	; 0x01
    2484:	9b e0       	ldi	r25, 0x0B	; 11
    2486:	92 9f       	mul	r25, r18
    2488:	f0 01       	movw	r30, r0
    248a:	93 9f       	mul	r25, r19
    248c:	f0 0d       	add	r31, r0
    248e:	11 24       	eor	r1, r1
    2490:	ed 5c       	subi	r30, 0xCD	; 205
    2492:	f9 4e       	sbci	r31, 0xE9	; 233
    2494:	01 80       	ldd	r0, Z+1	; 0x01
    2496:	f2 81       	ldd	r31, Z+2	; 0x02
    2498:	e0 2d       	mov	r30, r0
    249a:	20 85       	ldd	r18, Z+8	; 0x08
    249c:	31 85       	ldd	r19, Z+9	; 0x09
    249e:	30 93 a2 16 	sts	0x16A2, r19	; 0x8016a2 <pxCurrentTCB+0x1>
    24a2:	20 93 a1 16 	sts	0x16A1, r18	; 0x8016a1 <pxCurrentTCB>
    24a6:	80 93 f1 15 	sts	0x15F1, r24	; 0x8015f1 <uxTopReadyPriority>
    24aa:	08 95       	ret

000024ac <vTaskPlaceOnEventList>:
    24ac:	cf 92       	push	r12
    24ae:	df 92       	push	r13
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	6a 01       	movw	r12, r20
    24b6:	7b 01       	movw	r14, r22
    24b8:	60 91 a1 16 	lds	r22, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    24bc:	70 91 a2 16 	lds	r23, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    24c0:	62 5f       	subi	r22, 0xF2	; 242
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsert>
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	c7 01       	movw	r24, r14
    24cc:	b6 01       	movw	r22, r12
    24ce:	c7 db       	rcall	.-2162   	; 0x1c5e <prvAddCurrentTaskToDelayedList>
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	df 90       	pop	r13
    24d6:	cf 90       	pop	r12
    24d8:	08 95       	ret

000024da <vTaskPlaceOnUnorderedEventList>:
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	fc 01       	movw	r30, r24
    24e4:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    24e8:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    24ec:	70 68       	ori	r23, 0x80	; 128
    24ee:	1e 96       	adiw	r26, 0x0e	; 14
    24f0:	4d 93       	st	X+, r20
    24f2:	5d 93       	st	X+, r21
    24f4:	6d 93       	st	X+, r22
    24f6:	7c 93       	st	X, r23
    24f8:	51 97       	sbiw	r26, 0x11	; 17
    24fa:	a1 81       	ldd	r26, Z+1	; 0x01
    24fc:	b2 81       	ldd	r27, Z+2	; 0x02
    24fe:	c0 91 a1 16 	lds	r28, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2502:	d0 91 a2 16 	lds	r29, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2506:	bb 8b       	std	Y+19, r27	; 0x13
    2508:	aa 8b       	std	Y+18, r26	; 0x12
    250a:	c0 91 a1 16 	lds	r28, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    250e:	d0 91 a2 16 	lds	r29, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2512:	16 96       	adiw	r26, 0x06	; 6
    2514:	8d 91       	ld	r24, X+
    2516:	9c 91       	ld	r25, X
    2518:	17 97       	sbiw	r26, 0x07	; 7
    251a:	9d 8b       	std	Y+21, r25	; 0x15
    251c:	8c 8b       	std	Y+20, r24	; 0x14
    251e:	16 96       	adiw	r26, 0x06	; 6
    2520:	cd 91       	ld	r28, X+
    2522:	dc 91       	ld	r29, X
    2524:	17 97       	sbiw	r26, 0x07	; 7
    2526:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    252a:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    252e:	0e 96       	adiw	r24, 0x0e	; 14
    2530:	9d 83       	std	Y+5, r25	; 0x05
    2532:	8c 83       	std	Y+4, r24	; 0x04
    2534:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2538:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    253c:	0e 96       	adiw	r24, 0x0e	; 14
    253e:	17 96       	adiw	r26, 0x07	; 7
    2540:	9c 93       	st	X, r25
    2542:	8e 93       	st	-X, r24
    2544:	16 97       	sbiw	r26, 0x06	; 6
    2546:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    254a:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    254e:	59 96       	adiw	r26, 0x19	; 25
    2550:	fc 93       	st	X, r31
    2552:	ee 93       	st	-X, r30
    2554:	58 97       	sbiw	r26, 0x18	; 24
    2556:	80 81       	ld	r24, Z
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	80 83       	st	Z, r24
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	c9 01       	movw	r24, r18
    2560:	b8 01       	movw	r22, r16
    2562:	7d db       	rcall	.-2310   	; 0x1c5e <prvAddCurrentTaskToDelayedList>
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	08 95       	ret

0000256e <vTaskPlaceOnEventListRestricted>:
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	fc 01       	movw	r30, r24
    2574:	cb 01       	movw	r24, r22
    2576:	ba 01       	movw	r22, r20
    2578:	a1 81       	ldd	r26, Z+1	; 0x01
    257a:	b2 81       	ldd	r27, Z+2	; 0x02
    257c:	c0 91 a1 16 	lds	r28, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2580:	d0 91 a2 16 	lds	r29, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2584:	bb 8b       	std	Y+19, r27	; 0x13
    2586:	aa 8b       	std	Y+18, r26	; 0x12
    2588:	c0 91 a1 16 	lds	r28, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    258c:	d0 91 a2 16 	lds	r29, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2590:	16 96       	adiw	r26, 0x06	; 6
    2592:	4d 91       	ld	r20, X+
    2594:	5c 91       	ld	r21, X
    2596:	17 97       	sbiw	r26, 0x07	; 7
    2598:	5d 8b       	std	Y+21, r21	; 0x15
    259a:	4c 8b       	std	Y+20, r20	; 0x14
    259c:	16 96       	adiw	r26, 0x06	; 6
    259e:	cd 91       	ld	r28, X+
    25a0:	dc 91       	ld	r29, X
    25a2:	17 97       	sbiw	r26, 0x07	; 7
    25a4:	40 91 a1 16 	lds	r20, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    25a8:	50 91 a2 16 	lds	r21, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    25ac:	42 5f       	subi	r20, 0xF2	; 242
    25ae:	5f 4f       	sbci	r21, 0xFF	; 255
    25b0:	5d 83       	std	Y+5, r21	; 0x05
    25b2:	4c 83       	std	Y+4, r20	; 0x04
    25b4:	40 91 a1 16 	lds	r20, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    25b8:	50 91 a2 16 	lds	r21, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    25bc:	42 5f       	subi	r20, 0xF2	; 242
    25be:	5f 4f       	sbci	r21, 0xFF	; 255
    25c0:	17 96       	adiw	r26, 0x07	; 7
    25c2:	5c 93       	st	X, r21
    25c4:	4e 93       	st	-X, r20
    25c6:	16 97       	sbiw	r26, 0x06	; 6
    25c8:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    25cc:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    25d0:	59 96       	adiw	r26, 0x19	; 25
    25d2:	fc 93       	st	X, r31
    25d4:	ee 93       	st	-X, r30
    25d6:	58 97       	sbiw	r26, 0x18	; 24
    25d8:	30 81       	ld	r19, Z
    25da:	3f 5f       	subi	r19, 0xFF	; 255
    25dc:	30 83       	st	Z, r19
    25de:	22 23       	and	r18, r18
    25e0:	19 f0       	breq	.+6      	; 0x25e8 <vTaskPlaceOnEventListRestricted+0x7a>
    25e2:	6f ef       	ldi	r22, 0xFF	; 255
    25e4:	7f ef       	ldi	r23, 0xFF	; 255
    25e6:	cb 01       	movw	r24, r22
    25e8:	42 2f       	mov	r20, r18
    25ea:	39 db       	rcall	.-2446   	; 0x1c5e <prvAddCurrentTaskToDelayedList>
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

000025f2 <xTaskRemoveFromEventList>:
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	dc 01       	movw	r26, r24
    25f8:	17 96       	adiw	r26, 0x07	; 7
    25fa:	ed 91       	ld	r30, X+
    25fc:	fc 91       	ld	r31, X
    25fe:	18 97       	sbiw	r26, 0x08	; 8
    2600:	00 84       	ldd	r0, Z+8	; 0x08
    2602:	f1 85       	ldd	r31, Z+9	; 0x09
    2604:	e0 2d       	mov	r30, r0
    2606:	a0 8d       	ldd	r26, Z+24	; 0x18
    2608:	b1 8d       	ldd	r27, Z+25	; 0x19
    260a:	c2 89       	ldd	r28, Z+18	; 0x12
    260c:	d3 89       	ldd	r29, Z+19	; 0x13
    260e:	84 89       	ldd	r24, Z+20	; 0x14
    2610:	95 89       	ldd	r25, Z+21	; 0x15
    2612:	9f 83       	std	Y+7, r25	; 0x07
    2614:	8e 83       	std	Y+6, r24	; 0x06
    2616:	c4 89       	ldd	r28, Z+20	; 0x14
    2618:	d5 89       	ldd	r29, Z+21	; 0x15
    261a:	82 89       	ldd	r24, Z+18	; 0x12
    261c:	93 89       	ldd	r25, Z+19	; 0x13
    261e:	9d 83       	std	Y+5, r25	; 0x05
    2620:	8c 83       	std	Y+4, r24	; 0x04
    2622:	11 96       	adiw	r26, 0x01	; 1
    2624:	8d 91       	ld	r24, X+
    2626:	9c 91       	ld	r25, X
    2628:	12 97       	sbiw	r26, 0x02	; 2
    262a:	9f 01       	movw	r18, r30
    262c:	22 5f       	subi	r18, 0xF2	; 242
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	82 17       	cp	r24, r18
    2632:	93 07       	cpc	r25, r19
    2634:	31 f4       	brne	.+12     	; 0x2642 <xTaskRemoveFromEventList+0x50>
    2636:	84 89       	ldd	r24, Z+20	; 0x14
    2638:	95 89       	ldd	r25, Z+21	; 0x15
    263a:	12 96       	adiw	r26, 0x02	; 2
    263c:	9c 93       	st	X, r25
    263e:	8e 93       	st	-X, r24
    2640:	11 97       	sbiw	r26, 0x01	; 1
    2642:	11 8e       	std	Z+25, r1	; 0x19
    2644:	10 8e       	std	Z+24, r1	; 0x18
    2646:	8c 91       	ld	r24, X
    2648:	81 50       	subi	r24, 0x01	; 1
    264a:	8c 93       	st	X, r24
    264c:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <uxSchedulerSuspended>
    2650:	81 11       	cpse	r24, r1
    2652:	52 c0       	rjmp	.+164    	; 0x26f8 <xTaskRemoveFromEventList+0x106>
    2654:	a4 85       	ldd	r26, Z+12	; 0x0c
    2656:	b5 85       	ldd	r27, Z+13	; 0x0d
    2658:	c6 81       	ldd	r28, Z+6	; 0x06
    265a:	d7 81       	ldd	r29, Z+7	; 0x07
    265c:	80 85       	ldd	r24, Z+8	; 0x08
    265e:	91 85       	ldd	r25, Z+9	; 0x09
    2660:	9f 83       	std	Y+7, r25	; 0x07
    2662:	8e 83       	std	Y+6, r24	; 0x06
    2664:	c0 85       	ldd	r28, Z+8	; 0x08
    2666:	d1 85       	ldd	r29, Z+9	; 0x09
    2668:	86 81       	ldd	r24, Z+6	; 0x06
    266a:	97 81       	ldd	r25, Z+7	; 0x07
    266c:	9d 83       	std	Y+5, r25	; 0x05
    266e:	8c 83       	std	Y+4, r24	; 0x04
    2670:	11 96       	adiw	r26, 0x01	; 1
    2672:	8d 91       	ld	r24, X+
    2674:	9c 91       	ld	r25, X
    2676:	12 97       	sbiw	r26, 0x02	; 2
    2678:	9f 01       	movw	r18, r30
    267a:	2e 5f       	subi	r18, 0xFE	; 254
    267c:	3f 4f       	sbci	r19, 0xFF	; 255
    267e:	82 17       	cp	r24, r18
    2680:	93 07       	cpc	r25, r19
    2682:	31 f4       	brne	.+12     	; 0x2690 <xTaskRemoveFromEventList+0x9e>
    2684:	80 85       	ldd	r24, Z+8	; 0x08
    2686:	91 85       	ldd	r25, Z+9	; 0x09
    2688:	12 96       	adiw	r26, 0x02	; 2
    268a:	9c 93       	st	X, r25
    268c:	8e 93       	st	-X, r24
    268e:	11 97       	sbiw	r26, 0x01	; 1
    2690:	15 86       	std	Z+13, r1	; 0x0d
    2692:	14 86       	std	Z+12, r1	; 0x0c
    2694:	8c 91       	ld	r24, X
    2696:	81 50       	subi	r24, 0x01	; 1
    2698:	8c 93       	st	X, r24
    269a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    269c:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <uxTopReadyPriority>
    26a0:	8a 17       	cp	r24, r26
    26a2:	10 f4       	brcc	.+4      	; 0x26a8 <xTaskRemoveFromEventList+0xb6>
    26a4:	a0 93 f1 15 	sts	0x15F1, r26	; 0x8015f1 <uxTopReadyPriority>
    26a8:	8b e0       	ldi	r24, 0x0B	; 11
    26aa:	8a 9f       	mul	r24, r26
    26ac:	d0 01       	movw	r26, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	ad 5c       	subi	r26, 0xCD	; 205
    26b2:	b9 4e       	sbci	r27, 0xE9	; 233
    26b4:	11 96       	adiw	r26, 0x01	; 1
    26b6:	0d 90       	ld	r0, X+
    26b8:	bc 91       	ld	r27, X
    26ba:	a0 2d       	mov	r26, r0
    26bc:	b7 83       	std	Z+7, r27	; 0x07
    26be:	a6 83       	std	Z+6, r26	; 0x06
    26c0:	16 96       	adiw	r26, 0x06	; 6
    26c2:	4d 91       	ld	r20, X+
    26c4:	5c 91       	ld	r21, X
    26c6:	17 97       	sbiw	r26, 0x07	; 7
    26c8:	51 87       	std	Z+9, r21	; 0x09
    26ca:	40 87       	std	Z+8, r20	; 0x08
    26cc:	16 96       	adiw	r26, 0x06	; 6
    26ce:	cd 91       	ld	r28, X+
    26d0:	dc 91       	ld	r29, X
    26d2:	17 97       	sbiw	r26, 0x07	; 7
    26d4:	3d 83       	std	Y+5, r19	; 0x05
    26d6:	2c 83       	std	Y+4, r18	; 0x04
    26d8:	17 96       	adiw	r26, 0x07	; 7
    26da:	3c 93       	st	X, r19
    26dc:	2e 93       	st	-X, r18
    26de:	16 97       	sbiw	r26, 0x06	; 6
    26e0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26e2:	8a 9f       	mul	r24, r26
    26e4:	d0 01       	movw	r26, r0
    26e6:	11 24       	eor	r1, r1
    26e8:	ad 5c       	subi	r26, 0xCD	; 205
    26ea:	b9 4e       	sbci	r27, 0xE9	; 233
    26ec:	b5 87       	std	Z+13, r27	; 0x0d
    26ee:	a4 87       	std	Z+12, r26	; 0x0c
    26f0:	8c 91       	ld	r24, X
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	8c 93       	st	X, r24
    26f6:	1c c0       	rjmp	.+56     	; 0x2730 <xTaskRemoveFromEventList+0x13e>
    26f8:	4e e0       	ldi	r20, 0x0E	; 14
    26fa:	56 e1       	ldi	r21, 0x16	; 22
    26fc:	da 01       	movw	r26, r20
    26fe:	11 96       	adiw	r26, 0x01	; 1
    2700:	cd 91       	ld	r28, X+
    2702:	dc 91       	ld	r29, X
    2704:	12 97       	sbiw	r26, 0x02	; 2
    2706:	d3 8b       	std	Z+19, r29	; 0x13
    2708:	c2 8b       	std	Z+18, r28	; 0x12
    270a:	8e 81       	ldd	r24, Y+6	; 0x06
    270c:	9f 81       	ldd	r25, Y+7	; 0x07
    270e:	95 8b       	std	Z+21, r25	; 0x15
    2710:	84 8b       	std	Z+20, r24	; 0x14
    2712:	8e 81       	ldd	r24, Y+6	; 0x06
    2714:	9f 81       	ldd	r25, Y+7	; 0x07
    2716:	dc 01       	movw	r26, r24
    2718:	15 96       	adiw	r26, 0x05	; 5
    271a:	3c 93       	st	X, r19
    271c:	2e 93       	st	-X, r18
    271e:	14 97       	sbiw	r26, 0x04	; 4
    2720:	3f 83       	std	Y+7, r19	; 0x07
    2722:	2e 83       	std	Y+6, r18	; 0x06
    2724:	51 8f       	std	Z+25, r21	; 0x19
    2726:	40 8f       	std	Z+24, r20	; 0x18
    2728:	da 01       	movw	r26, r20
    272a:	8c 91       	ld	r24, X
    272c:	8f 5f       	subi	r24, 0xFF	; 255
    272e:	8c 93       	st	X, r24
    2730:	92 8d       	ldd	r25, Z+26	; 0x1a
    2732:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2736:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    273a:	82 8d       	ldd	r24, Z+26	; 0x1a
    273c:	89 17       	cp	r24, r25
    273e:	20 f4       	brcc	.+8      	; 0x2748 <xTaskRemoveFromEventList+0x156>
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <xYieldPending>
    2746:	01 c0       	rjmp	.+2      	; 0x274a <xTaskRemoveFromEventList+0x158>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	08 95       	ret

00002750 <vTaskRemoveFromUnorderedEventList>:
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	dc 01       	movw	r26, r24
    2756:	70 68       	ori	r23, 0x80	; 128
    2758:	4d 93       	st	X+, r20
    275a:	5d 93       	st	X+, r21
    275c:	6d 93       	st	X+, r22
    275e:	7c 93       	st	X, r23
    2760:	13 97       	sbiw	r26, 0x03	; 3
    2762:	18 96       	adiw	r26, 0x08	; 8
    2764:	ed 91       	ld	r30, X+
    2766:	fc 91       	ld	r31, X
    2768:	19 97       	sbiw	r26, 0x09	; 9
    276a:	1a 96       	adiw	r26, 0x0a	; 10
    276c:	4d 91       	ld	r20, X+
    276e:	5c 91       	ld	r21, X
    2770:	1b 97       	sbiw	r26, 0x0b	; 11
    2772:	14 96       	adiw	r26, 0x04	; 4
    2774:	8d 91       	ld	r24, X+
    2776:	9c 91       	ld	r25, X
    2778:	15 97       	sbiw	r26, 0x05	; 5
    277a:	16 96       	adiw	r26, 0x06	; 6
    277c:	2d 91       	ld	r18, X+
    277e:	3c 91       	ld	r19, X
    2780:	17 97       	sbiw	r26, 0x07	; 7
    2782:	ec 01       	movw	r28, r24
    2784:	3f 83       	std	Y+7, r19	; 0x07
    2786:	2e 83       	std	Y+6, r18	; 0x06
    2788:	16 96       	adiw	r26, 0x06	; 6
    278a:	8d 91       	ld	r24, X+
    278c:	9c 91       	ld	r25, X
    278e:	17 97       	sbiw	r26, 0x07	; 7
    2790:	14 96       	adiw	r26, 0x04	; 4
    2792:	2d 91       	ld	r18, X+
    2794:	3c 91       	ld	r19, X
    2796:	15 97       	sbiw	r26, 0x05	; 5
    2798:	ec 01       	movw	r28, r24
    279a:	3d 83       	std	Y+5, r19	; 0x05
    279c:	2c 83       	std	Y+4, r18	; 0x04
    279e:	ea 01       	movw	r28, r20
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	a8 17       	cp	r26, r24
    27a6:	b9 07       	cpc	r27, r25
    27a8:	31 f4       	brne	.+12     	; 0x27b6 <vTaskRemoveFromUnorderedEventList+0x66>
    27aa:	16 96       	adiw	r26, 0x06	; 6
    27ac:	8d 91       	ld	r24, X+
    27ae:	9c 91       	ld	r25, X
    27b0:	17 97       	sbiw	r26, 0x07	; 7
    27b2:	9a 83       	std	Y+2, r25	; 0x02
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	1b 96       	adiw	r26, 0x0b	; 11
    27b8:	1c 92       	st	X, r1
    27ba:	1e 92       	st	-X, r1
    27bc:	1a 97       	sbiw	r26, 0x0a	; 10
    27be:	da 01       	movw	r26, r20
    27c0:	8c 91       	ld	r24, X
    27c2:	81 50       	subi	r24, 0x01	; 1
    27c4:	8c 93       	st	X, r24
    27c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    27c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    27ca:	c6 81       	ldd	r28, Z+6	; 0x06
    27cc:	d7 81       	ldd	r29, Z+7	; 0x07
    27ce:	80 85       	ldd	r24, Z+8	; 0x08
    27d0:	91 85       	ldd	r25, Z+9	; 0x09
    27d2:	9f 83       	std	Y+7, r25	; 0x07
    27d4:	8e 83       	std	Y+6, r24	; 0x06
    27d6:	c0 85       	ldd	r28, Z+8	; 0x08
    27d8:	d1 85       	ldd	r29, Z+9	; 0x09
    27da:	86 81       	ldd	r24, Z+6	; 0x06
    27dc:	97 81       	ldd	r25, Z+7	; 0x07
    27de:	9d 83       	std	Y+5, r25	; 0x05
    27e0:	8c 83       	std	Y+4, r24	; 0x04
    27e2:	11 96       	adiw	r26, 0x01	; 1
    27e4:	8d 91       	ld	r24, X+
    27e6:	9c 91       	ld	r25, X
    27e8:	12 97       	sbiw	r26, 0x02	; 2
    27ea:	9f 01       	movw	r18, r30
    27ec:	2e 5f       	subi	r18, 0xFE	; 254
    27ee:	3f 4f       	sbci	r19, 0xFF	; 255
    27f0:	82 17       	cp	r24, r18
    27f2:	93 07       	cpc	r25, r19
    27f4:	31 f4       	brne	.+12     	; 0x2802 <vTaskRemoveFromUnorderedEventList+0xb2>
    27f6:	80 85       	ldd	r24, Z+8	; 0x08
    27f8:	91 85       	ldd	r25, Z+9	; 0x09
    27fa:	12 96       	adiw	r26, 0x02	; 2
    27fc:	9c 93       	st	X, r25
    27fe:	8e 93       	st	-X, r24
    2800:	11 97       	sbiw	r26, 0x01	; 1
    2802:	15 86       	std	Z+13, r1	; 0x0d
    2804:	14 86       	std	Z+12, r1	; 0x0c
    2806:	8c 91       	ld	r24, X
    2808:	81 50       	subi	r24, 0x01	; 1
    280a:	8c 93       	st	X, r24
    280c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    280e:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <uxTopReadyPriority>
    2812:	8a 17       	cp	r24, r26
    2814:	10 f4       	brcc	.+4      	; 0x281a <vTaskRemoveFromUnorderedEventList+0xca>
    2816:	a0 93 f1 15 	sts	0x15F1, r26	; 0x8015f1 <uxTopReadyPriority>
    281a:	8b e0       	ldi	r24, 0x0B	; 11
    281c:	8a 9f       	mul	r24, r26
    281e:	d0 01       	movw	r26, r0
    2820:	11 24       	eor	r1, r1
    2822:	ad 5c       	subi	r26, 0xCD	; 205
    2824:	b9 4e       	sbci	r27, 0xE9	; 233
    2826:	11 96       	adiw	r26, 0x01	; 1
    2828:	0d 90       	ld	r0, X+
    282a:	bc 91       	ld	r27, X
    282c:	a0 2d       	mov	r26, r0
    282e:	b7 83       	std	Z+7, r27	; 0x07
    2830:	a6 83       	std	Z+6, r26	; 0x06
    2832:	16 96       	adiw	r26, 0x06	; 6
    2834:	4d 91       	ld	r20, X+
    2836:	5c 91       	ld	r21, X
    2838:	17 97       	sbiw	r26, 0x07	; 7
    283a:	51 87       	std	Z+9, r21	; 0x09
    283c:	40 87       	std	Z+8, r20	; 0x08
    283e:	16 96       	adiw	r26, 0x06	; 6
    2840:	cd 91       	ld	r28, X+
    2842:	dc 91       	ld	r29, X
    2844:	17 97       	sbiw	r26, 0x07	; 7
    2846:	3d 83       	std	Y+5, r19	; 0x05
    2848:	2c 83       	std	Y+4, r18	; 0x04
    284a:	17 96       	adiw	r26, 0x07	; 7
    284c:	3c 93       	st	X, r19
    284e:	2e 93       	st	-X, r18
    2850:	16 97       	sbiw	r26, 0x06	; 6
    2852:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2854:	8a 9f       	mul	r24, r26
    2856:	d0 01       	movw	r26, r0
    2858:	11 24       	eor	r1, r1
    285a:	ad 5c       	subi	r26, 0xCD	; 205
    285c:	b9 4e       	sbci	r27, 0xE9	; 233
    285e:	b5 87       	std	Z+13, r27	; 0x0d
    2860:	a4 87       	std	Z+12, r26	; 0x0c
    2862:	8c 91       	ld	r24, X
    2864:	8f 5f       	subi	r24, 0xFF	; 255
    2866:	8c 93       	st	X, r24
    2868:	92 8d       	ldd	r25, Z+26	; 0x1a
    286a:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    286e:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2872:	82 8d       	ldd	r24, Z+26	; 0x1a
    2874:	89 17       	cp	r24, r25
    2876:	18 f4       	brcc	.+6      	; 0x287e <vTaskRemoveFromUnorderedEventList+0x12e>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <xYieldPending>
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	08 95       	ret

00002884 <vTaskSetTimeOutState>:
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	0f 92       	push	r0
    288a:	20 91 ea 15 	lds	r18, 0x15EA	; 0x8015ea <xNumOfOverflows>
    288e:	fc 01       	movw	r30, r24
    2890:	20 83       	st	Z, r18
    2892:	40 91 f2 15 	lds	r20, 0x15F2	; 0x8015f2 <xTickCount>
    2896:	50 91 f3 15 	lds	r21, 0x15F3	; 0x8015f3 <xTickCount+0x1>
    289a:	60 91 f4 15 	lds	r22, 0x15F4	; 0x8015f4 <xTickCount+0x2>
    289e:	70 91 f5 15 	lds	r23, 0x15F5	; 0x8015f5 <xTickCount+0x3>
    28a2:	41 83       	std	Z+1, r20	; 0x01
    28a4:	52 83       	std	Z+2, r21	; 0x02
    28a6:	63 83       	std	Z+3, r22	; 0x03
    28a8:	74 83       	std	Z+4, r23	; 0x04
    28aa:	0f 90       	pop	r0
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	08 95       	ret

000028b0 <vTaskInternalSetTimeOutState>:
    28b0:	20 91 ea 15 	lds	r18, 0x15EA	; 0x8015ea <xNumOfOverflows>
    28b4:	fc 01       	movw	r30, r24
    28b6:	20 83       	st	Z, r18
    28b8:	40 91 f2 15 	lds	r20, 0x15F2	; 0x8015f2 <xTickCount>
    28bc:	50 91 f3 15 	lds	r21, 0x15F3	; 0x8015f3 <xTickCount+0x1>
    28c0:	60 91 f4 15 	lds	r22, 0x15F4	; 0x8015f4 <xTickCount+0x2>
    28c4:	70 91 f5 15 	lds	r23, 0x15F5	; 0x8015f5 <xTickCount+0x3>
    28c8:	41 83       	std	Z+1, r20	; 0x01
    28ca:	52 83       	std	Z+2, r21	; 0x02
    28cc:	63 83       	std	Z+3, r22	; 0x03
    28ce:	74 83       	std	Z+4, r23	; 0x04
    28d0:	08 95       	ret

000028d2 <xTaskCheckForTimeOut>:
    28d2:	8f 92       	push	r8
    28d4:	9f 92       	push	r9
    28d6:	af 92       	push	r10
    28d8:	bf 92       	push	r11
    28da:	cf 92       	push	r12
    28dc:	df 92       	push	r13
    28de:	ef 92       	push	r14
    28e0:	ff 92       	push	r15
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	fb 01       	movw	r30, r22
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	0f 92       	push	r0
    28f2:	c0 90 f2 15 	lds	r12, 0x15F2	; 0x8015f2 <xTickCount>
    28f6:	d0 90 f3 15 	lds	r13, 0x15F3	; 0x8015f3 <xTickCount+0x1>
    28fa:	e0 90 f4 15 	lds	r14, 0x15F4	; 0x8015f4 <xTickCount+0x2>
    28fe:	f0 90 f5 15 	lds	r15, 0x15F5	; 0x8015f5 <xTickCount+0x3>
    2902:	dc 01       	movw	r26, r24
    2904:	11 96       	adiw	r26, 0x01	; 1
    2906:	0d 91       	ld	r16, X+
    2908:	1d 91       	ld	r17, X+
    290a:	2d 91       	ld	r18, X+
    290c:	3c 91       	ld	r19, X
    290e:	14 97       	sbiw	r26, 0x04	; 4
    2910:	46 01       	movw	r8, r12
    2912:	57 01       	movw	r10, r14
    2914:	80 1a       	sub	r8, r16
    2916:	91 0a       	sbc	r9, r17
    2918:	a2 0a       	sbc	r10, r18
    291a:	b3 0a       	sbc	r11, r19
    291c:	40 81       	ld	r20, Z
    291e:	51 81       	ldd	r21, Z+1	; 0x01
    2920:	62 81       	ldd	r22, Z+2	; 0x02
    2922:	73 81       	ldd	r23, Z+3	; 0x03
    2924:	4f 3f       	cpi	r20, 0xFF	; 255
    2926:	bf ef       	ldi	r27, 0xFF	; 255
    2928:	5b 07       	cpc	r21, r27
    292a:	6b 07       	cpc	r22, r27
    292c:	7b 07       	cpc	r23, r27
    292e:	39 f1       	breq	.+78     	; 0x297e <xTaskCheckForTimeOut+0xac>
    2930:	ec 01       	movw	r28, r24
    2932:	b8 81       	ld	r27, Y
    2934:	a0 91 ea 15 	lds	r26, 0x15EA	; 0x8015ea <xNumOfOverflows>
    2938:	ba 17       	cp	r27, r26
    293a:	59 f0       	breq	.+22     	; 0x2952 <xTaskCheckForTimeOut+0x80>
    293c:	c0 16       	cp	r12, r16
    293e:	d1 06       	cpc	r13, r17
    2940:	e2 06       	cpc	r14, r18
    2942:	f3 06       	cpc	r15, r19
    2944:	30 f0       	brcs	.+12     	; 0x2952 <xTaskCheckForTimeOut+0x80>
    2946:	10 82       	st	Z, r1
    2948:	11 82       	std	Z+1, r1	; 0x01
    294a:	12 82       	std	Z+2, r1	; 0x02
    294c:	13 82       	std	Z+3, r1	; 0x03
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	17 c0       	rjmp	.+46     	; 0x2980 <xTaskCheckForTimeOut+0xae>
    2952:	84 16       	cp	r8, r20
    2954:	95 06       	cpc	r9, r21
    2956:	a6 06       	cpc	r10, r22
    2958:	b7 06       	cpc	r11, r23
    295a:	58 f4       	brcc	.+22     	; 0x2972 <xTaskCheckForTimeOut+0xa0>
    295c:	48 19       	sub	r20, r8
    295e:	59 09       	sbc	r21, r9
    2960:	6a 09       	sbc	r22, r10
    2962:	7b 09       	sbc	r23, r11
    2964:	40 83       	st	Z, r20
    2966:	51 83       	std	Z+1, r21	; 0x01
    2968:	62 83       	std	Z+2, r22	; 0x02
    296a:	73 83       	std	Z+3, r23	; 0x03
    296c:	a1 df       	rcall	.-190    	; 0x28b0 <vTaskInternalSetTimeOutState>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	07 c0       	rjmp	.+14     	; 0x2980 <xTaskCheckForTimeOut+0xae>
    2972:	10 82       	st	Z, r1
    2974:	11 82       	std	Z+1, r1	; 0x01
    2976:	12 82       	std	Z+2, r1	; 0x02
    2978:	13 82       	std	Z+3, r1	; 0x03
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <xTaskCheckForTimeOut+0xae>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	0f 90       	pop	r0
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	1f 91       	pop	r17
    298a:	0f 91       	pop	r16
    298c:	ff 90       	pop	r15
    298e:	ef 90       	pop	r14
    2990:	df 90       	pop	r13
    2992:	cf 90       	pop	r12
    2994:	bf 90       	pop	r11
    2996:	af 90       	pop	r10
    2998:	9f 90       	pop	r9
    299a:	8f 90       	pop	r8
    299c:	08 95       	ret

0000299e <vTaskMissedYield>:
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	80 93 eb 15 	sts	0x15EB, r24	; 0x8015eb <xYieldPending>
    29a4:	08 95       	ret

000029a6 <xTaskGetCurrentTaskHandle>:
    29a6:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    29aa:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    29ae:	08 95       	ret

000029b0 <xTaskGetSchedulerState>:
    29b0:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <xSchedulerRunning>
    29b4:	88 23       	and	r24, r24
    29b6:	31 f0       	breq	.+12     	; 0x29c4 <xTaskGetSchedulerState+0x14>
    29b8:	80 91 e2 15 	lds	r24, 0x15E2	; 0x8015e2 <uxSchedulerSuspended>
    29bc:	81 11       	cpse	r24, r1
    29be:	04 c0       	rjmp	.+8      	; 0x29c8 <xTaskGetSchedulerState+0x18>
    29c0:	82 e0       	ldi	r24, 0x02	; 2
    29c2:	08 95       	ret
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	08 95       	ret
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	08 95       	ret

000029cc <xTaskPriorityDisinherit>:
    29cc:	0f 93       	push	r16
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	fc 01       	movw	r30, r24
    29d6:	89 2b       	or	r24, r25
    29d8:	09 f4       	brne	.+2      	; 0x29dc <xTaskPriorityDisinherit+0x10>
    29da:	49 c0       	rjmp	.+146    	; 0x2a6e <xTaskPriorityDisinherit+0xa2>
    29dc:	86 a5       	ldd	r24, Z+46	; 0x2e
    29de:	81 50       	subi	r24, 0x01	; 1
    29e0:	86 a7       	std	Z+46, r24	; 0x2e
    29e2:	22 8d       	ldd	r18, Z+26	; 0x1a
    29e4:	95 a5       	ldd	r25, Z+45	; 0x2d
    29e6:	29 17       	cp	r18, r25
    29e8:	09 f4       	brne	.+2      	; 0x29ec <xTaskPriorityDisinherit+0x20>
    29ea:	43 c0       	rjmp	.+134    	; 0x2a72 <xTaskPriorityDisinherit+0xa6>
    29ec:	81 11       	cpse	r24, r1
    29ee:	43 c0       	rjmp	.+134    	; 0x2a76 <xTaskPriorityDisinherit+0xaa>
    29f0:	ef 01       	movw	r28, r30
    29f2:	8f 01       	movw	r16, r30
    29f4:	0e 5f       	subi	r16, 0xFE	; 254
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	c8 01       	movw	r24, r16
    29fa:	0e 94 93 05 	call	0xb26	; 0xb26 <uxListRemove>
    29fe:	ed a5       	ldd	r30, Y+45	; 0x2d
    2a00:	ea 8f       	std	Y+26, r30	; 0x1a
    2a02:	8a e0       	ldi	r24, 0x0A	; 10
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e0       	ldi	r26, 0x00	; 0
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	8e 1b       	sub	r24, r30
    2a0c:	91 09       	sbc	r25, r1
    2a0e:	a1 09       	sbc	r26, r1
    2a10:	b1 09       	sbc	r27, r1
    2a12:	8e 87       	std	Y+14, r24	; 0x0e
    2a14:	9f 87       	std	Y+15, r25	; 0x0f
    2a16:	a8 8b       	std	Y+16, r26	; 0x10
    2a18:	b9 8b       	std	Y+17, r27	; 0x11
    2a1a:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <uxTopReadyPriority>
    2a1e:	8e 17       	cp	r24, r30
    2a20:	10 f4       	brcc	.+4      	; 0x2a26 <xTaskPriorityDisinherit+0x5a>
    2a22:	e0 93 f1 15 	sts	0x15F1, r30	; 0x8015f1 <uxTopReadyPriority>
    2a26:	8b e0       	ldi	r24, 0x0B	; 11
    2a28:	8e 9f       	mul	r24, r30
    2a2a:	f0 01       	movw	r30, r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	ed 5c       	subi	r30, 0xCD	; 205
    2a30:	f9 4e       	sbci	r31, 0xE9	; 233
    2a32:	01 80       	ldd	r0, Z+1	; 0x01
    2a34:	f2 81       	ldd	r31, Z+2	; 0x02
    2a36:	e0 2d       	mov	r30, r0
    2a38:	ff 83       	std	Y+7, r31	; 0x07
    2a3a:	ee 83       	std	Y+6, r30	; 0x06
    2a3c:	26 81       	ldd	r18, Z+6	; 0x06
    2a3e:	37 81       	ldd	r19, Z+7	; 0x07
    2a40:	39 87       	std	Y+9, r19	; 0x09
    2a42:	28 87       	std	Y+8, r18	; 0x08
    2a44:	a6 81       	ldd	r26, Z+6	; 0x06
    2a46:	b7 81       	ldd	r27, Z+7	; 0x07
    2a48:	15 96       	adiw	r26, 0x05	; 5
    2a4a:	1c 93       	st	X, r17
    2a4c:	0e 93       	st	-X, r16
    2a4e:	14 97       	sbiw	r26, 0x04	; 4
    2a50:	17 83       	std	Z+7, r17	; 0x07
    2a52:	06 83       	std	Z+6, r16	; 0x06
    2a54:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a56:	8e 9f       	mul	r24, r30
    2a58:	f0 01       	movw	r30, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	ed 5c       	subi	r30, 0xCD	; 205
    2a5e:	f9 4e       	sbci	r31, 0xE9	; 233
    2a60:	fd 87       	std	Y+13, r31	; 0x0d
    2a62:	ec 87       	std	Y+12, r30	; 0x0c
    2a64:	80 81       	ld	r24, Z
    2a66:	8f 5f       	subi	r24, 0xFF	; 255
    2a68:	80 83       	st	Z, r24
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	05 c0       	rjmp	.+10     	; 0x2a78 <xTaskPriorityDisinherit+0xac>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	03 c0       	rjmp	.+6      	; 0x2a78 <xTaskPriorityDisinherit+0xac>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <xTaskPriorityDisinherit+0xac>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	08 95       	ret

00002a82 <uxTaskResetEventItemValue>:
    2a82:	cf 92       	push	r12
    2a84:	df 92       	push	r13
    2a86:	ef 92       	push	r14
    2a88:	ff 92       	push	r15
    2a8a:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2a8e:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2a92:	66 85       	ldd	r22, Z+14	; 0x0e
    2a94:	77 85       	ldd	r23, Z+15	; 0x0f
    2a96:	80 89       	ldd	r24, Z+16	; 0x10
    2a98:	91 89       	ldd	r25, Z+17	; 0x11
    2a9a:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2a9e:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2aa2:	a0 91 a1 16 	lds	r26, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2aa6:	b0 91 a2 16 	lds	r27, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2aaa:	5a 96       	adiw	r26, 0x1a	; 26
    2aac:	2c 91       	ld	r18, X
    2aae:	0f 2e       	mov	r0, r31
    2ab0:	fa e0       	ldi	r31, 0x0A	; 10
    2ab2:	cf 2e       	mov	r12, r31
    2ab4:	d1 2c       	mov	r13, r1
    2ab6:	e1 2c       	mov	r14, r1
    2ab8:	f1 2c       	mov	r15, r1
    2aba:	f0 2d       	mov	r31, r0
    2abc:	c2 1a       	sub	r12, r18
    2abe:	d1 08       	sbc	r13, r1
    2ac0:	e1 08       	sbc	r14, r1
    2ac2:	f1 08       	sbc	r15, r1
    2ac4:	c6 86       	std	Z+14, r12	; 0x0e
    2ac6:	d7 86       	std	Z+15, r13	; 0x0f
    2ac8:	e0 8a       	std	Z+16, r14	; 0x10
    2aca:	f1 8a       	std	Z+17, r15	; 0x11
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	df 90       	pop	r13
    2ad2:	cf 90       	pop	r12
    2ad4:	08 95       	ret

00002ad6 <xTaskGenericNotifyWait>:
    2ad6:	4f 92       	push	r4
    2ad8:	5f 92       	push	r5
    2ada:	6f 92       	push	r6
    2adc:	7f 92       	push	r7
    2ade:	af 92       	push	r10
    2ae0:	bf 92       	push	r11
    2ae2:	cf 92       	push	r12
    2ae4:	df 92       	push	r13
    2ae6:	ef 92       	push	r14
    2ae8:	ff 92       	push	r15
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	28 01       	movw	r4, r16
    2af4:	39 01       	movw	r6, r18
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	0f 92       	push	r0
    2afc:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2b00:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2b04:	c8 2f       	mov	r28, r24
    2b06:	d0 e0       	ldi	r29, 0x00	; 0
    2b08:	ec 0f       	add	r30, r28
    2b0a:	fd 1f       	adc	r31, r29
    2b0c:	83 a9       	ldd	r24, Z+51	; 0x33
    2b0e:	82 30       	cpi	r24, 0x02	; 2
    2b10:	71 f1       	breq	.+92     	; 0x2b6e <xTaskGenericNotifyWait+0x98>
    2b12:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2b16:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	e8 0f       	add	r30, r24
    2b26:	f9 1f       	adc	r31, r25
    2b28:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b2a:	90 a9       	ldd	r25, Z+48	; 0x30
    2b2c:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b2e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b30:	40 95       	com	r20
    2b32:	50 95       	com	r21
    2b34:	60 95       	com	r22
    2b36:	70 95       	com	r23
    2b38:	48 23       	and	r20, r24
    2b3a:	59 23       	and	r21, r25
    2b3c:	6a 23       	and	r22, r26
    2b3e:	7b 23       	and	r23, r27
    2b40:	47 a7       	std	Z+47, r20	; 0x2f
    2b42:	50 ab       	std	Z+48, r21	; 0x30
    2b44:	61 ab       	std	Z+49, r22	; 0x31
    2b46:	72 ab       	std	Z+50, r23	; 0x32
    2b48:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2b4c:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2b50:	ec 0f       	add	r30, r28
    2b52:	fd 1f       	adc	r31, r29
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	83 ab       	std	Z+51, r24	; 0x33
    2b58:	a1 14       	cp	r10, r1
    2b5a:	b1 04       	cpc	r11, r1
    2b5c:	c1 04       	cpc	r12, r1
    2b5e:	d1 04       	cpc	r13, r1
    2b60:	31 f0       	breq	.+12     	; 0x2b6e <xTaskGenericNotifyWait+0x98>
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	c6 01       	movw	r24, r12
    2b66:	b5 01       	movw	r22, r10
    2b68:	7a d8       	rcall	.-3852   	; 0x1c5e <prvAddCurrentTaskToDelayedList>
    2b6a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <vPortYield>
    2b6e:	0f 90       	pop	r0
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	0f 92       	push	r0
    2b78:	e1 14       	cp	r14, r1
    2b7a:	f1 04       	cpc	r15, r1
    2b7c:	a1 f0       	breq	.+40     	; 0x2ba6 <xTaskGenericNotifyWait+0xd0>
    2b7e:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2b82:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2b86:	ce 01       	movw	r24, r28
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	88 0f       	add	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	e8 0f       	add	r30, r24
    2b92:	f9 1f       	adc	r31, r25
    2b94:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b96:	90 a9       	ldd	r25, Z+48	; 0x30
    2b98:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b9a:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b9c:	f7 01       	movw	r30, r14
    2b9e:	80 83       	st	Z, r24
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	a2 83       	std	Z+2, r26	; 0x02
    2ba4:	b3 83       	std	Z+3, r27	; 0x03
    2ba6:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2baa:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2bae:	ec 0f       	add	r30, r28
    2bb0:	fd 1f       	adc	r31, r29
    2bb2:	83 a9       	ldd	r24, Z+51	; 0x33
    2bb4:	82 30       	cpi	r24, 0x02	; 2
    2bb6:	e9 f4       	brne	.+58     	; 0x2bf2 <xTaskGenericNotifyWait+0x11c>
    2bb8:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2bbc:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	88 0f       	add	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	e8 0f       	add	r30, r24
    2bcc:	f9 1f       	adc	r31, r25
    2bce:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bd0:	90 a9       	ldd	r25, Z+48	; 0x30
    2bd2:	a1 a9       	ldd	r26, Z+49	; 0x31
    2bd4:	b2 a9       	ldd	r27, Z+50	; 0x32
    2bd6:	40 94       	com	r4
    2bd8:	50 94       	com	r5
    2bda:	60 94       	com	r6
    2bdc:	70 94       	com	r7
    2bde:	48 22       	and	r4, r24
    2be0:	59 22       	and	r5, r25
    2be2:	6a 22       	and	r6, r26
    2be4:	7b 22       	and	r7, r27
    2be6:	47 a6       	std	Z+47, r4	; 0x2f
    2be8:	50 aa       	std	Z+48, r5	; 0x30
    2bea:	61 aa       	std	Z+49, r6	; 0x31
    2bec:	72 aa       	std	Z+50, r7	; 0x32
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	01 c0       	rjmp	.+2      	; 0x2bf4 <xTaskGenericNotifyWait+0x11e>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	20 91 a1 16 	lds	r18, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2bf8:	30 91 a2 16 	lds	r19, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2bfc:	c2 0f       	add	r28, r18
    2bfe:	d3 1f       	adc	r29, r19
    2c00:	1b aa       	std	Y+51, r1	; 0x33
    2c02:	0f 90       	pop	r0
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	1f 91       	pop	r17
    2c0c:	0f 91       	pop	r16
    2c0e:	ff 90       	pop	r15
    2c10:	ef 90       	pop	r14
    2c12:	df 90       	pop	r13
    2c14:	cf 90       	pop	r12
    2c16:	bf 90       	pop	r11
    2c18:	af 90       	pop	r10
    2c1a:	7f 90       	pop	r7
    2c1c:	6f 90       	pop	r6
    2c1e:	5f 90       	pop	r5
    2c20:	4f 90       	pop	r4
    2c22:	08 95       	ret

00002c24 <xTaskGenericNotify>:
    2c24:	8f 92       	push	r8
    2c26:	9f 92       	push	r9
    2c28:	af 92       	push	r10
    2c2a:	bf 92       	push	r11
    2c2c:	ef 92       	push	r14
    2c2e:	ff 92       	push	r15
    2c30:	0f 93       	push	r16
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	dc 01       	movw	r26, r24
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	0f 92       	push	r0
    2c3e:	e1 14       	cp	r14, r1
    2c40:	f1 04       	cpc	r15, r1
    2c42:	89 f0       	breq	.+34     	; 0x2c66 <xTaskGenericNotify+0x42>
    2c44:	e6 2f       	mov	r30, r22
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	ee 0f       	add	r30, r30
    2c4a:	ff 1f       	adc	r31, r31
    2c4c:	ee 0f       	add	r30, r30
    2c4e:	ff 1f       	adc	r31, r31
    2c50:	e8 0f       	add	r30, r24
    2c52:	f9 1f       	adc	r31, r25
    2c54:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c56:	90 a8       	ldd	r9, Z+48	; 0x30
    2c58:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c5a:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c5c:	f7 01       	movw	r30, r14
    2c5e:	80 82       	st	Z, r8
    2c60:	91 82       	std	Z+1, r9	; 0x01
    2c62:	a2 82       	std	Z+2, r10	; 0x02
    2c64:	b3 82       	std	Z+3, r11	; 0x03
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	fd 01       	movw	r30, r26
    2c6a:	e6 0f       	add	r30, r22
    2c6c:	f7 1f       	adc	r31, r23
    2c6e:	83 a9       	ldd	r24, Z+51	; 0x33
    2c70:	92 e0       	ldi	r25, 0x02	; 2
    2c72:	93 ab       	std	Z+51, r25	; 0x33
    2c74:	02 30       	cpi	r16, 0x02	; 2
    2c76:	01 f1       	breq	.+64     	; 0x2cb8 <xTaskGenericNotify+0x94>
    2c78:	18 f4       	brcc	.+6      	; 0x2c80 <xTaskGenericNotify+0x5c>
    2c7a:	01 30       	cpi	r16, 0x01	; 1
    2c7c:	31 f0       	breq	.+12     	; 0x2c8a <xTaskGenericNotify+0x66>
    2c7e:	4d c0       	rjmp	.+154    	; 0x2d1a <xTaskGenericNotify+0xf6>
    2c80:	03 30       	cpi	r16, 0x03	; 3
    2c82:	79 f1       	breq	.+94     	; 0x2ce2 <xTaskGenericNotify+0xbe>
    2c84:	04 30       	cpi	r16, 0x04	; 4
    2c86:	d1 f1       	breq	.+116    	; 0x2cfc <xTaskGenericNotify+0xd8>
    2c88:	48 c0       	rjmp	.+144    	; 0x2d1a <xTaskGenericNotify+0xf6>
    2c8a:	66 0f       	add	r22, r22
    2c8c:	77 1f       	adc	r23, r23
    2c8e:	66 0f       	add	r22, r22
    2c90:	77 1f       	adc	r23, r23
    2c92:	fd 01       	movw	r30, r26
    2c94:	e6 0f       	add	r30, r22
    2c96:	f7 1f       	adc	r31, r23
    2c98:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c9a:	90 a8       	ldd	r9, Z+48	; 0x30
    2c9c:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c9e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ca0:	ba 01       	movw	r22, r20
    2ca2:	a9 01       	movw	r20, r18
    2ca4:	48 29       	or	r20, r8
    2ca6:	59 29       	or	r21, r9
    2ca8:	6a 29       	or	r22, r10
    2caa:	7b 29       	or	r23, r11
    2cac:	47 a7       	std	Z+47, r20	; 0x2f
    2cae:	50 ab       	std	Z+48, r21	; 0x30
    2cb0:	61 ab       	std	Z+49, r22	; 0x31
    2cb2:	72 ab       	std	Z+50, r23	; 0x32
    2cb4:	01 e0       	ldi	r16, 0x01	; 1
    2cb6:	34 c0       	rjmp	.+104    	; 0x2d20 <xTaskGenericNotify+0xfc>
    2cb8:	66 0f       	add	r22, r22
    2cba:	77 1f       	adc	r23, r23
    2cbc:	66 0f       	add	r22, r22
    2cbe:	77 1f       	adc	r23, r23
    2cc0:	fd 01       	movw	r30, r26
    2cc2:	e6 0f       	add	r30, r22
    2cc4:	f7 1f       	adc	r31, r23
    2cc6:	47 a5       	ldd	r20, Z+47	; 0x2f
    2cc8:	50 a9       	ldd	r21, Z+48	; 0x30
    2cca:	61 a9       	ldd	r22, Z+49	; 0x31
    2ccc:	72 a9       	ldd	r23, Z+50	; 0x32
    2cce:	4f 5f       	subi	r20, 0xFF	; 255
    2cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd2:	6f 4f       	sbci	r22, 0xFF	; 255
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	47 a7       	std	Z+47, r20	; 0x2f
    2cd8:	50 ab       	std	Z+48, r21	; 0x30
    2cda:	61 ab       	std	Z+49, r22	; 0x31
    2cdc:	72 ab       	std	Z+50, r23	; 0x32
    2cde:	01 e0       	ldi	r16, 0x01	; 1
    2ce0:	1f c0       	rjmp	.+62     	; 0x2d20 <xTaskGenericNotify+0xfc>
    2ce2:	66 0f       	add	r22, r22
    2ce4:	77 1f       	adc	r23, r23
    2ce6:	66 0f       	add	r22, r22
    2ce8:	77 1f       	adc	r23, r23
    2cea:	fd 01       	movw	r30, r26
    2cec:	e6 0f       	add	r30, r22
    2cee:	f7 1f       	adc	r31, r23
    2cf0:	27 a7       	std	Z+47, r18	; 0x2f
    2cf2:	30 ab       	std	Z+48, r19	; 0x30
    2cf4:	41 ab       	std	Z+49, r20	; 0x31
    2cf6:	52 ab       	std	Z+50, r21	; 0x32
    2cf8:	01 e0       	ldi	r16, 0x01	; 1
    2cfa:	12 c0       	rjmp	.+36     	; 0x2d20 <xTaskGenericNotify+0xfc>
    2cfc:	82 30       	cpi	r24, 0x02	; 2
    2cfe:	79 f0       	breq	.+30     	; 0x2d1e <xTaskGenericNotify+0xfa>
    2d00:	66 0f       	add	r22, r22
    2d02:	77 1f       	adc	r23, r23
    2d04:	66 0f       	add	r22, r22
    2d06:	77 1f       	adc	r23, r23
    2d08:	fd 01       	movw	r30, r26
    2d0a:	e6 0f       	add	r30, r22
    2d0c:	f7 1f       	adc	r31, r23
    2d0e:	27 a7       	std	Z+47, r18	; 0x2f
    2d10:	30 ab       	std	Z+48, r19	; 0x30
    2d12:	41 ab       	std	Z+49, r20	; 0x31
    2d14:	52 ab       	std	Z+50, r21	; 0x32
    2d16:	01 e0       	ldi	r16, 0x01	; 1
    2d18:	03 c0       	rjmp	.+6      	; 0x2d20 <xTaskGenericNotify+0xfc>
    2d1a:	01 e0       	ldi	r16, 0x01	; 1
    2d1c:	01 c0       	rjmp	.+2      	; 0x2d20 <xTaskGenericNotify+0xfc>
    2d1e:	00 e0       	ldi	r16, 0x00	; 0
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	09 f0       	breq	.+2      	; 0x2d26 <xTaskGenericNotify+0x102>
    2d24:	69 c0       	rjmp	.+210    	; 0x2df8 <xTaskGenericNotify+0x1d4>
    2d26:	1c 96       	adiw	r26, 0x0c	; 12
    2d28:	ed 91       	ld	r30, X+
    2d2a:	fc 91       	ld	r31, X
    2d2c:	1d 97       	sbiw	r26, 0x0d	; 13
    2d2e:	16 96       	adiw	r26, 0x06	; 6
    2d30:	cd 91       	ld	r28, X+
    2d32:	dc 91       	ld	r29, X
    2d34:	17 97       	sbiw	r26, 0x07	; 7
    2d36:	18 96       	adiw	r26, 0x08	; 8
    2d38:	8d 91       	ld	r24, X+
    2d3a:	9c 91       	ld	r25, X
    2d3c:	19 97       	sbiw	r26, 0x09	; 9
    2d3e:	9f 83       	std	Y+7, r25	; 0x07
    2d40:	8e 83       	std	Y+6, r24	; 0x06
    2d42:	18 96       	adiw	r26, 0x08	; 8
    2d44:	cd 91       	ld	r28, X+
    2d46:	dc 91       	ld	r29, X
    2d48:	19 97       	sbiw	r26, 0x09	; 9
    2d4a:	16 96       	adiw	r26, 0x06	; 6
    2d4c:	8d 91       	ld	r24, X+
    2d4e:	9c 91       	ld	r25, X
    2d50:	17 97       	sbiw	r26, 0x07	; 7
    2d52:	9d 83       	std	Y+5, r25	; 0x05
    2d54:	8c 83       	std	Y+4, r24	; 0x04
    2d56:	81 81       	ldd	r24, Z+1	; 0x01
    2d58:	92 81       	ldd	r25, Z+2	; 0x02
    2d5a:	9d 01       	movw	r18, r26
    2d5c:	2e 5f       	subi	r18, 0xFE	; 254
    2d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d60:	82 17       	cp	r24, r18
    2d62:	93 07       	cpc	r25, r19
    2d64:	31 f4       	brne	.+12     	; 0x2d72 <xTaskGenericNotify+0x14e>
    2d66:	18 96       	adiw	r26, 0x08	; 8
    2d68:	8d 91       	ld	r24, X+
    2d6a:	9c 91       	ld	r25, X
    2d6c:	19 97       	sbiw	r26, 0x09	; 9
    2d6e:	92 83       	std	Z+2, r25	; 0x02
    2d70:	81 83       	std	Z+1, r24	; 0x01
    2d72:	1d 96       	adiw	r26, 0x0d	; 13
    2d74:	1c 92       	st	X, r1
    2d76:	1e 92       	st	-X, r1
    2d78:	1c 97       	sbiw	r26, 0x0c	; 12
    2d7a:	80 81       	ld	r24, Z
    2d7c:	81 50       	subi	r24, 0x01	; 1
    2d7e:	80 83       	st	Z, r24
    2d80:	5a 96       	adiw	r26, 0x1a	; 26
    2d82:	ec 91       	ld	r30, X
    2d84:	5a 97       	sbiw	r26, 0x1a	; 26
    2d86:	80 91 f1 15 	lds	r24, 0x15F1	; 0x8015f1 <uxTopReadyPriority>
    2d8a:	8e 17       	cp	r24, r30
    2d8c:	10 f4       	brcc	.+4      	; 0x2d92 <xTaskGenericNotify+0x16e>
    2d8e:	e0 93 f1 15 	sts	0x15F1, r30	; 0x8015f1 <uxTopReadyPriority>
    2d92:	8b e0       	ldi	r24, 0x0B	; 11
    2d94:	8e 9f       	mul	r24, r30
    2d96:	f0 01       	movw	r30, r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	ed 5c       	subi	r30, 0xCD	; 205
    2d9c:	f9 4e       	sbci	r31, 0xE9	; 233
    2d9e:	01 80       	ldd	r0, Z+1	; 0x01
    2da0:	f2 81       	ldd	r31, Z+2	; 0x02
    2da2:	e0 2d       	mov	r30, r0
    2da4:	17 96       	adiw	r26, 0x07	; 7
    2da6:	fc 93       	st	X, r31
    2da8:	ee 93       	st	-X, r30
    2daa:	16 97       	sbiw	r26, 0x06	; 6
    2dac:	46 81       	ldd	r20, Z+6	; 0x06
    2dae:	57 81       	ldd	r21, Z+7	; 0x07
    2db0:	19 96       	adiw	r26, 0x09	; 9
    2db2:	5c 93       	st	X, r21
    2db4:	4e 93       	st	-X, r20
    2db6:	18 97       	sbiw	r26, 0x08	; 8
    2db8:	c6 81       	ldd	r28, Z+6	; 0x06
    2dba:	d7 81       	ldd	r29, Z+7	; 0x07
    2dbc:	3d 83       	std	Y+5, r19	; 0x05
    2dbe:	2c 83       	std	Y+4, r18	; 0x04
    2dc0:	37 83       	std	Z+7, r19	; 0x07
    2dc2:	26 83       	std	Z+6, r18	; 0x06
    2dc4:	5a 96       	adiw	r26, 0x1a	; 26
    2dc6:	ec 91       	ld	r30, X
    2dc8:	5a 97       	sbiw	r26, 0x1a	; 26
    2dca:	8e 9f       	mul	r24, r30
    2dcc:	f0 01       	movw	r30, r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	ed 5c       	subi	r30, 0xCD	; 205
    2dd2:	f9 4e       	sbci	r31, 0xE9	; 233
    2dd4:	1d 96       	adiw	r26, 0x0d	; 13
    2dd6:	fc 93       	st	X, r31
    2dd8:	ee 93       	st	-X, r30
    2dda:	1c 97       	sbiw	r26, 0x0c	; 12
    2ddc:	80 81       	ld	r24, Z
    2dde:	8f 5f       	subi	r24, 0xFF	; 255
    2de0:	80 83       	st	Z, r24
    2de2:	5a 96       	adiw	r26, 0x1a	; 26
    2de4:	9c 91       	ld	r25, X
    2de6:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    2dea:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    2dee:	82 8d       	ldd	r24, Z+26	; 0x1a
    2df0:	89 17       	cp	r24, r25
    2df2:	10 f4       	brcc	.+4      	; 0x2df8 <xTaskGenericNotify+0x1d4>
    2df4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <vPortYield>
    2df8:	0f 90       	pop	r0
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	80 2f       	mov	r24, r16
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	0f 91       	pop	r16
    2e04:	ff 90       	pop	r15
    2e06:	ef 90       	pop	r14
    2e08:	bf 90       	pop	r11
    2e0a:	af 90       	pop	r10
    2e0c:	9f 90       	pop	r9
    2e0e:	8f 90       	pop	r8
    2e10:	08 95       	ret

00002e12 <xTaskGenericNotifyFromISR>:
    2e12:	8f 92       	push	r8
    2e14:	9f 92       	push	r9
    2e16:	af 92       	push	r10
    2e18:	bf 92       	push	r11
    2e1a:	cf 92       	push	r12
    2e1c:	df 92       	push	r13
    2e1e:	ef 92       	push	r14
    2e20:	ff 92       	push	r15
    2e22:	0f 93       	push	r16
    2e24:	cf 93       	push	r28
    2e26:	df 93       	push	r29
    2e28:	dc 01       	movw	r26, r24
    2e2a:	e1 14       	cp	r14, r1
    2e2c:	f1 04       	cpc	r15, r1
    2e2e:	89 f0       	breq	.+34     	; 0x2e52 <xTaskGenericNotifyFromISR+0x40>
    2e30:	e6 2f       	mov	r30, r22
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	ee 0f       	add	r30, r30
    2e36:	ff 1f       	adc	r31, r31
    2e38:	ee 0f       	add	r30, r30
    2e3a:	ff 1f       	adc	r31, r31
    2e3c:	e8 0f       	add	r30, r24
    2e3e:	f9 1f       	adc	r31, r25
    2e40:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e42:	90 a8       	ldd	r9, Z+48	; 0x30
    2e44:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e46:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e48:	f7 01       	movw	r30, r14
    2e4a:	80 82       	st	Z, r8
    2e4c:	91 82       	std	Z+1, r9	; 0x01
    2e4e:	a2 82       	std	Z+2, r10	; 0x02
    2e50:	b3 82       	std	Z+3, r11	; 0x03
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	fd 01       	movw	r30, r26
    2e56:	e6 0f       	add	r30, r22
    2e58:	f7 1f       	adc	r31, r23
    2e5a:	93 a9       	ldd	r25, Z+51	; 0x33
    2e5c:	82 e0       	ldi	r24, 0x02	; 2
    2e5e:	83 ab       	std	Z+51, r24	; 0x33
    2e60:	02 30       	cpi	r16, 0x02	; 2
    2e62:	01 f1       	breq	.+64     	; 0x2ea4 <xTaskGenericNotifyFromISR+0x92>
    2e64:	18 f4       	brcc	.+6      	; 0x2e6c <xTaskGenericNotifyFromISR+0x5a>
    2e66:	01 30       	cpi	r16, 0x01	; 1
    2e68:	31 f0       	breq	.+12     	; 0x2e76 <xTaskGenericNotifyFromISR+0x64>
    2e6a:	4d c0       	rjmp	.+154    	; 0x2f06 <xTaskGenericNotifyFromISR+0xf4>
    2e6c:	03 30       	cpi	r16, 0x03	; 3
    2e6e:	79 f1       	breq	.+94     	; 0x2ece <xTaskGenericNotifyFromISR+0xbc>
    2e70:	04 30       	cpi	r16, 0x04	; 4
    2e72:	d1 f1       	breq	.+116    	; 0x2ee8 <xTaskGenericNotifyFromISR+0xd6>
    2e74:	48 c0       	rjmp	.+144    	; 0x2f06 <xTaskGenericNotifyFromISR+0xf4>
    2e76:	66 0f       	add	r22, r22
    2e78:	77 1f       	adc	r23, r23
    2e7a:	66 0f       	add	r22, r22
    2e7c:	77 1f       	adc	r23, r23
    2e7e:	fd 01       	movw	r30, r26
    2e80:	e6 0f       	add	r30, r22
    2e82:	f7 1f       	adc	r31, r23
    2e84:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e86:	90 a8       	ldd	r9, Z+48	; 0x30
    2e88:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e8a:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e8c:	ba 01       	movw	r22, r20
    2e8e:	a9 01       	movw	r20, r18
    2e90:	48 29       	or	r20, r8
    2e92:	59 29       	or	r21, r9
    2e94:	6a 29       	or	r22, r10
    2e96:	7b 29       	or	r23, r11
    2e98:	47 a7       	std	Z+47, r20	; 0x2f
    2e9a:	50 ab       	std	Z+48, r21	; 0x30
    2e9c:	61 ab       	std	Z+49, r22	; 0x31
    2e9e:	72 ab       	std	Z+50, r23	; 0x32
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	34 c0       	rjmp	.+104    	; 0x2f0c <xTaskGenericNotifyFromISR+0xfa>
    2ea4:	66 0f       	add	r22, r22
    2ea6:	77 1f       	adc	r23, r23
    2ea8:	66 0f       	add	r22, r22
    2eaa:	77 1f       	adc	r23, r23
    2eac:	fd 01       	movw	r30, r26
    2eae:	e6 0f       	add	r30, r22
    2eb0:	f7 1f       	adc	r31, r23
    2eb2:	47 a5       	ldd	r20, Z+47	; 0x2f
    2eb4:	50 a9       	ldd	r21, Z+48	; 0x30
    2eb6:	61 a9       	ldd	r22, Z+49	; 0x31
    2eb8:	72 a9       	ldd	r23, Z+50	; 0x32
    2eba:	4f 5f       	subi	r20, 0xFF	; 255
    2ebc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ebe:	6f 4f       	sbci	r22, 0xFF	; 255
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec2:	47 a7       	std	Z+47, r20	; 0x2f
    2ec4:	50 ab       	std	Z+48, r21	; 0x30
    2ec6:	61 ab       	std	Z+49, r22	; 0x31
    2ec8:	72 ab       	std	Z+50, r23	; 0x32
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	1f c0       	rjmp	.+62     	; 0x2f0c <xTaskGenericNotifyFromISR+0xfa>
    2ece:	66 0f       	add	r22, r22
    2ed0:	77 1f       	adc	r23, r23
    2ed2:	66 0f       	add	r22, r22
    2ed4:	77 1f       	adc	r23, r23
    2ed6:	fd 01       	movw	r30, r26
    2ed8:	e6 0f       	add	r30, r22
    2eda:	f7 1f       	adc	r31, r23
    2edc:	27 a7       	std	Z+47, r18	; 0x2f
    2ede:	30 ab       	std	Z+48, r19	; 0x30
    2ee0:	41 ab       	std	Z+49, r20	; 0x31
    2ee2:	52 ab       	std	Z+50, r21	; 0x32
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	12 c0       	rjmp	.+36     	; 0x2f0c <xTaskGenericNotifyFromISR+0xfa>
    2ee8:	92 30       	cpi	r25, 0x02	; 2
    2eea:	79 f0       	breq	.+30     	; 0x2f0a <xTaskGenericNotifyFromISR+0xf8>
    2eec:	66 0f       	add	r22, r22
    2eee:	77 1f       	adc	r23, r23
    2ef0:	66 0f       	add	r22, r22
    2ef2:	77 1f       	adc	r23, r23
    2ef4:	fd 01       	movw	r30, r26
    2ef6:	e6 0f       	add	r30, r22
    2ef8:	f7 1f       	adc	r31, r23
    2efa:	27 a7       	std	Z+47, r18	; 0x2f
    2efc:	30 ab       	std	Z+48, r19	; 0x30
    2efe:	41 ab       	std	Z+49, r20	; 0x31
    2f00:	52 ab       	std	Z+50, r21	; 0x32
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	03 c0       	rjmp	.+6      	; 0x2f0c <xTaskGenericNotifyFromISR+0xfa>
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	01 c0       	rjmp	.+2      	; 0x2f0c <xTaskGenericNotifyFromISR+0xfa>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	91 30       	cpi	r25, 0x01	; 1
    2f0e:	09 f0       	breq	.+2      	; 0x2f12 <xTaskGenericNotifyFromISR+0x100>
    2f10:	96 c0       	rjmp	.+300    	; 0x303e <xTaskGenericNotifyFromISR+0x22c>
    2f12:	90 91 e2 15 	lds	r25, 0x15E2	; 0x8015e2 <uxSchedulerSuspended>
    2f16:	91 11       	cpse	r25, r1
    2f18:	5f c0       	rjmp	.+190    	; 0x2fd8 <xTaskGenericNotifyFromISR+0x1c6>
    2f1a:	1c 96       	adiw	r26, 0x0c	; 12
    2f1c:	ed 91       	ld	r30, X+
    2f1e:	fc 91       	ld	r31, X
    2f20:	1d 97       	sbiw	r26, 0x0d	; 13
    2f22:	16 96       	adiw	r26, 0x06	; 6
    2f24:	cd 91       	ld	r28, X+
    2f26:	dc 91       	ld	r29, X
    2f28:	17 97       	sbiw	r26, 0x07	; 7
    2f2a:	18 96       	adiw	r26, 0x08	; 8
    2f2c:	2d 91       	ld	r18, X+
    2f2e:	3c 91       	ld	r19, X
    2f30:	19 97       	sbiw	r26, 0x09	; 9
    2f32:	3f 83       	std	Y+7, r19	; 0x07
    2f34:	2e 83       	std	Y+6, r18	; 0x06
    2f36:	18 96       	adiw	r26, 0x08	; 8
    2f38:	cd 91       	ld	r28, X+
    2f3a:	dc 91       	ld	r29, X
    2f3c:	19 97       	sbiw	r26, 0x09	; 9
    2f3e:	16 96       	adiw	r26, 0x06	; 6
    2f40:	2d 91       	ld	r18, X+
    2f42:	3c 91       	ld	r19, X
    2f44:	17 97       	sbiw	r26, 0x07	; 7
    2f46:	3d 83       	std	Y+5, r19	; 0x05
    2f48:	2c 83       	std	Y+4, r18	; 0x04
    2f4a:	41 81       	ldd	r20, Z+1	; 0x01
    2f4c:	52 81       	ldd	r21, Z+2	; 0x02
    2f4e:	9d 01       	movw	r18, r26
    2f50:	2e 5f       	subi	r18, 0xFE	; 254
    2f52:	3f 4f       	sbci	r19, 0xFF	; 255
    2f54:	42 17       	cp	r20, r18
    2f56:	53 07       	cpc	r21, r19
    2f58:	31 f4       	brne	.+12     	; 0x2f66 <xTaskGenericNotifyFromISR+0x154>
    2f5a:	18 96       	adiw	r26, 0x08	; 8
    2f5c:	4d 91       	ld	r20, X+
    2f5e:	5c 91       	ld	r21, X
    2f60:	19 97       	sbiw	r26, 0x09	; 9
    2f62:	52 83       	std	Z+2, r21	; 0x02
    2f64:	41 83       	std	Z+1, r20	; 0x01
    2f66:	1d 96       	adiw	r26, 0x0d	; 13
    2f68:	1c 92       	st	X, r1
    2f6a:	1e 92       	st	-X, r1
    2f6c:	1c 97       	sbiw	r26, 0x0c	; 12
    2f6e:	90 81       	ld	r25, Z
    2f70:	91 50       	subi	r25, 0x01	; 1
    2f72:	90 83       	st	Z, r25
    2f74:	5a 96       	adiw	r26, 0x1a	; 26
    2f76:	ec 91       	ld	r30, X
    2f78:	5a 97       	sbiw	r26, 0x1a	; 26
    2f7a:	90 91 f1 15 	lds	r25, 0x15F1	; 0x8015f1 <uxTopReadyPriority>
    2f7e:	9e 17       	cp	r25, r30
    2f80:	10 f4       	brcc	.+4      	; 0x2f86 <xTaskGenericNotifyFromISR+0x174>
    2f82:	e0 93 f1 15 	sts	0x15F1, r30	; 0x8015f1 <uxTopReadyPriority>
    2f86:	9b e0       	ldi	r25, 0x0B	; 11
    2f88:	9e 9f       	mul	r25, r30
    2f8a:	f0 01       	movw	r30, r0
    2f8c:	11 24       	eor	r1, r1
    2f8e:	ed 5c       	subi	r30, 0xCD	; 205
    2f90:	f9 4e       	sbci	r31, 0xE9	; 233
    2f92:	01 80       	ldd	r0, Z+1	; 0x01
    2f94:	f2 81       	ldd	r31, Z+2	; 0x02
    2f96:	e0 2d       	mov	r30, r0
    2f98:	17 96       	adiw	r26, 0x07	; 7
    2f9a:	fc 93       	st	X, r31
    2f9c:	ee 93       	st	-X, r30
    2f9e:	16 97       	sbiw	r26, 0x06	; 6
    2fa0:	46 81       	ldd	r20, Z+6	; 0x06
    2fa2:	57 81       	ldd	r21, Z+7	; 0x07
    2fa4:	19 96       	adiw	r26, 0x09	; 9
    2fa6:	5c 93       	st	X, r21
    2fa8:	4e 93       	st	-X, r20
    2faa:	18 97       	sbiw	r26, 0x08	; 8
    2fac:	c6 81       	ldd	r28, Z+6	; 0x06
    2fae:	d7 81       	ldd	r29, Z+7	; 0x07
    2fb0:	3d 83       	std	Y+5, r19	; 0x05
    2fb2:	2c 83       	std	Y+4, r18	; 0x04
    2fb4:	37 83       	std	Z+7, r19	; 0x07
    2fb6:	26 83       	std	Z+6, r18	; 0x06
    2fb8:	5a 96       	adiw	r26, 0x1a	; 26
    2fba:	ec 91       	ld	r30, X
    2fbc:	5a 97       	sbiw	r26, 0x1a	; 26
    2fbe:	9e 9f       	mul	r25, r30
    2fc0:	f0 01       	movw	r30, r0
    2fc2:	11 24       	eor	r1, r1
    2fc4:	ed 5c       	subi	r30, 0xCD	; 205
    2fc6:	f9 4e       	sbci	r31, 0xE9	; 233
    2fc8:	1d 96       	adiw	r26, 0x0d	; 13
    2fca:	fc 93       	st	X, r31
    2fcc:	ee 93       	st	-X, r30
    2fce:	1c 97       	sbiw	r26, 0x0c	; 12
    2fd0:	90 81       	ld	r25, Z
    2fd2:	9f 5f       	subi	r25, 0xFF	; 255
    2fd4:	90 83       	st	Z, r25
    2fd6:	21 c0       	rjmp	.+66     	; 0x301a <xTaskGenericNotifyFromISR+0x208>
    2fd8:	6e e0       	ldi	r22, 0x0E	; 14
    2fda:	76 e1       	ldi	r23, 0x16	; 22
    2fdc:	fb 01       	movw	r30, r22
    2fde:	c1 81       	ldd	r28, Z+1	; 0x01
    2fe0:	d2 81       	ldd	r29, Z+2	; 0x02
    2fe2:	53 96       	adiw	r26, 0x13	; 19
    2fe4:	dc 93       	st	X, r29
    2fe6:	ce 93       	st	-X, r28
    2fe8:	52 97       	sbiw	r26, 0x12	; 18
    2fea:	2e 81       	ldd	r18, Y+6	; 0x06
    2fec:	3f 81       	ldd	r19, Y+7	; 0x07
    2fee:	55 96       	adiw	r26, 0x15	; 21
    2ff0:	3c 93       	st	X, r19
    2ff2:	2e 93       	st	-X, r18
    2ff4:	54 97       	sbiw	r26, 0x14	; 20
    2ff6:	4e 81       	ldd	r20, Y+6	; 0x06
    2ff8:	5f 81       	ldd	r21, Y+7	; 0x07
    2ffa:	9d 01       	movw	r18, r26
    2ffc:	22 5f       	subi	r18, 0xF2	; 242
    2ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    3000:	fa 01       	movw	r30, r20
    3002:	35 83       	std	Z+5, r19	; 0x05
    3004:	24 83       	std	Z+4, r18	; 0x04
    3006:	3f 83       	std	Y+7, r19	; 0x07
    3008:	2e 83       	std	Y+6, r18	; 0x06
    300a:	59 96       	adiw	r26, 0x19	; 25
    300c:	7c 93       	st	X, r23
    300e:	6e 93       	st	-X, r22
    3010:	58 97       	sbiw	r26, 0x18	; 24
    3012:	fb 01       	movw	r30, r22
    3014:	90 81       	ld	r25, Z
    3016:	9f 5f       	subi	r25, 0xFF	; 255
    3018:	90 83       	st	Z, r25
    301a:	5a 96       	adiw	r26, 0x1a	; 26
    301c:	2c 91       	ld	r18, X
    301e:	e0 91 a1 16 	lds	r30, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    3022:	f0 91 a2 16 	lds	r31, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>
    3026:	92 8d       	ldd	r25, Z+26	; 0x1a
    3028:	92 17       	cp	r25, r18
    302a:	48 f4       	brcc	.+18     	; 0x303e <xTaskGenericNotifyFromISR+0x22c>
    302c:	c1 14       	cp	r12, r1
    302e:	d1 04       	cpc	r13, r1
    3030:	19 f0       	breq	.+6      	; 0x3038 <xTaskGenericNotifyFromISR+0x226>
    3032:	91 e0       	ldi	r25, 0x01	; 1
    3034:	f6 01       	movw	r30, r12
    3036:	90 83       	st	Z, r25
    3038:	91 e0       	ldi	r25, 0x01	; 1
    303a:	90 93 eb 15 	sts	0x15EB, r25	; 0x8015eb <xYieldPending>
    303e:	df 91       	pop	r29
    3040:	cf 91       	pop	r28
    3042:	0f 91       	pop	r16
    3044:	ff 90       	pop	r15
    3046:	ef 90       	pop	r14
    3048:	df 90       	pop	r13
    304a:	cf 90       	pop	r12
    304c:	bf 90       	pop	r11
    304e:	af 90       	pop	r10
    3050:	9f 90       	pop	r9
    3052:	8f 90       	pop	r8
    3054:	08 95       	ret

00003056 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3056:	00 97       	sbiw	r24, 0x00	; 0
    3058:	21 f4       	brne	.+8      	; 0x3062 <xTaskGenericNotifyStateClear+0xc>
    305a:	80 91 a1 16 	lds	r24, 0x16A1	; 0x8016a1 <pxCurrentTCB>
    305e:	90 91 a2 16 	lds	r25, 0x16A2	; 0x8016a2 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3068:	70 e0       	ldi	r23, 0x00	; 0
    306a:	fc 01       	movw	r30, r24
    306c:	e6 0f       	add	r30, r22
    306e:	f7 1f       	adc	r31, r23
    3070:	23 a9       	ldd	r18, Z+51	; 0x33
    3072:	22 30       	cpi	r18, 0x02	; 2
    3074:	31 f4       	brne	.+12     	; 0x3082 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3076:	fc 01       	movw	r30, r24
    3078:	e6 0f       	add	r30, r22
    307a:	f7 1f       	adc	r31, r23
    307c:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	01 c0       	rjmp	.+2      	; 0x3084 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3082:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3084:	0f 90       	pop	r0
    3086:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3088:	08 95       	ret

0000308a <prvGetNextExpireTime>:
    308a:	dc 01       	movw	r26, r24
    308c:	e0 91 ad 16 	lds	r30, 0x16AD	; 0x8016ad <pxCurrentTimerList>
    3090:	f0 91 ae 16 	lds	r31, 0x16AE	; 0x8016ae <pxCurrentTimerList+0x1>
    3094:	80 81       	ld	r24, Z
    3096:	91 e0       	ldi	r25, 0x01	; 1
    3098:	81 11       	cpse	r24, r1
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	9c 93       	st	X, r25
    309e:	91 11       	cpse	r25, r1
    30a0:	08 c0       	rjmp	.+16     	; 0x30b2 <prvGetNextExpireTime+0x28>
    30a2:	07 80       	ldd	r0, Z+7	; 0x07
    30a4:	f0 85       	ldd	r31, Z+8	; 0x08
    30a6:	e0 2d       	mov	r30, r0
    30a8:	60 81       	ld	r22, Z
    30aa:	71 81       	ldd	r23, Z+1	; 0x01
    30ac:	82 81       	ldd	r24, Z+2	; 0x02
    30ae:	93 81       	ldd	r25, Z+3	; 0x03
    30b0:	08 95       	ret
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	cb 01       	movw	r24, r22
    30b8:	08 95       	ret

000030ba <prvInsertTimerInActiveList>:
    30ba:	cf 92       	push	r12
    30bc:	df 92       	push	r13
    30be:	ef 92       	push	r14
    30c0:	ff 92       	push	r15
    30c2:	0f 93       	push	r16
    30c4:	1f 93       	push	r17
    30c6:	fc 01       	movw	r30, r24
    30c8:	42 83       	std	Z+2, r20	; 0x02
    30ca:	53 83       	std	Z+3, r21	; 0x03
    30cc:	64 83       	std	Z+4, r22	; 0x04
    30ce:	75 83       	std	Z+5, r23	; 0x05
    30d0:	93 87       	std	Z+11, r25	; 0x0b
    30d2:	82 87       	std	Z+10, r24	; 0x0a
    30d4:	04 17       	cp	r16, r20
    30d6:	15 07       	cpc	r17, r21
    30d8:	26 07       	cpc	r18, r22
    30da:	37 07       	cpc	r19, r23
    30dc:	c0 f0       	brcs	.+48     	; 0x310e <prvInsertTimerInActiveList+0x54>
    30de:	0c 19       	sub	r16, r12
    30e0:	1d 09       	sbc	r17, r13
    30e2:	2e 09       	sbc	r18, r14
    30e4:	3f 09       	sbc	r19, r15
    30e6:	86 85       	ldd	r24, Z+14	; 0x0e
    30e8:	97 85       	ldd	r25, Z+15	; 0x0f
    30ea:	a0 89       	ldd	r26, Z+16	; 0x10
    30ec:	b1 89       	ldd	r27, Z+17	; 0x11
    30ee:	08 17       	cp	r16, r24
    30f0:	19 07       	cpc	r17, r25
    30f2:	2a 07       	cpc	r18, r26
    30f4:	3b 07       	cpc	r19, r27
    30f6:	00 f5       	brcc	.+64     	; 0x3138 <prvInsertTimerInActiveList+0x7e>
    30f8:	bf 01       	movw	r22, r30
    30fa:	6e 5f       	subi	r22, 0xFE	; 254
    30fc:	7f 4f       	sbci	r23, 0xFF	; 255
    30fe:	80 91 ab 16 	lds	r24, 0x16AB	; 0x8016ab <pxOverflowTimerList>
    3102:	90 91 ac 16 	lds	r25, 0x16AC	; 0x8016ac <pxOverflowTimerList+0x1>
    3106:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsert>
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	18 c0       	rjmp	.+48     	; 0x313e <prvInsertTimerInActiveList+0x84>
    310e:	0c 15       	cp	r16, r12
    3110:	1d 05       	cpc	r17, r13
    3112:	2e 05       	cpc	r18, r14
    3114:	3f 05       	cpc	r19, r15
    3116:	28 f4       	brcc	.+10     	; 0x3122 <prvInsertTimerInActiveList+0x68>
    3118:	4c 15       	cp	r20, r12
    311a:	5d 05       	cpc	r21, r13
    311c:	6e 05       	cpc	r22, r14
    311e:	7f 05       	cpc	r23, r15
    3120:	68 f4       	brcc	.+26     	; 0x313c <prvInsertTimerInActiveList+0x82>
    3122:	bf 01       	movw	r22, r30
    3124:	6e 5f       	subi	r22, 0xFE	; 254
    3126:	7f 4f       	sbci	r23, 0xFF	; 255
    3128:	80 91 ad 16 	lds	r24, 0x16AD	; 0x8016ad <pxCurrentTimerList>
    312c:	90 91 ae 16 	lds	r25, 0x16AE	; 0x8016ae <pxCurrentTimerList+0x1>
    3130:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsert>
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	03 c0       	rjmp	.+6      	; 0x313e <prvInsertTimerInActiveList+0x84>
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	01 c0       	rjmp	.+2      	; 0x313e <prvInsertTimerInActiveList+0x84>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	1f 91       	pop	r17
    3140:	0f 91       	pop	r16
    3142:	ff 90       	pop	r15
    3144:	ef 90       	pop	r14
    3146:	df 90       	pop	r13
    3148:	cf 90       	pop	r12
    314a:	08 95       	ret

0000314c <prvCheckForValidListAndQueue>:
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	0f 92       	push	r0
    3152:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <xTimerQueue>
    3156:	90 91 aa 16 	lds	r25, 0x16AA	; 0x8016aa <xTimerQueue+0x1>
    315a:	89 2b       	or	r24, r25
    315c:	e9 f4       	brne	.+58     	; 0x3198 <prvCheckForValidListAndQueue+0x4c>
    315e:	8a eb       	ldi	r24, 0xBA	; 186
    3160:	96 e1       	ldi	r25, 0x16	; 22
    3162:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialise>
    3166:	8f ea       	ldi	r24, 0xAF	; 175
    3168:	96 e1       	ldi	r25, 0x16	; 22
    316a:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialise>
    316e:	8a eb       	ldi	r24, 0xBA	; 186
    3170:	96 e1       	ldi	r25, 0x16	; 22
    3172:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <pxCurrentTimerList+0x1>
    3176:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <pxCurrentTimerList>
    317a:	8f ea       	ldi	r24, 0xAF	; 175
    317c:	96 e1       	ldi	r25, 0x16	; 22
    317e:	90 93 ac 16 	sts	0x16AC, r25	; 0x8016ac <pxOverflowTimerList+0x1>
    3182:	80 93 ab 16 	sts	0x16AB, r24	; 0x8016ab <pxOverflowTimerList>
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	67 e0       	ldi	r22, 0x07	; 7
    318a:	8a e0       	ldi	r24, 0x0A	; 10
    318c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <xQueueGenericCreate>
    3190:	90 93 aa 16 	sts	0x16AA, r25	; 0x8016aa <xTimerQueue+0x1>
    3194:	80 93 a9 16 	sts	0x16A9, r24	; 0x8016a9 <xTimerQueue>
    3198:	0f 90       	pop	r0
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	08 95       	ret

0000319e <xTimerCreateTimerTask>:
    319e:	ef 92       	push	r14
    31a0:	ff 92       	push	r15
    31a2:	0f 93       	push	r16
    31a4:	d3 df       	rcall	.-90     	; 0x314c <prvCheckForValidListAndQueue>
    31a6:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <xTimerQueue>
    31aa:	90 91 aa 16 	lds	r25, 0x16AA	; 0x8016aa <xTimerQueue+0x1>
    31ae:	89 2b       	or	r24, r25
    31b0:	91 f0       	breq	.+36     	; 0x31d6 <xTimerCreateTimerTask+0x38>
    31b2:	0f 2e       	mov	r0, r31
    31b4:	f7 ea       	ldi	r31, 0xA7	; 167
    31b6:	ef 2e       	mov	r14, r31
    31b8:	f6 e1       	ldi	r31, 0x16	; 22
    31ba:	ff 2e       	mov	r15, r31
    31bc:	f0 2d       	mov	r31, r0
    31be:	03 e0       	ldi	r16, 0x03	; 3
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 ec       	ldi	r20, 0xC0	; 192
    31c6:	50 e0       	ldi	r21, 0x00	; 0
    31c8:	6c ed       	ldi	r22, 0xDC	; 220
    31ca:	72 e0       	ldi	r23, 0x02	; 2
    31cc:	88 e5       	ldi	r24, 0x58	; 88
    31ce:	91 e0       	ldi	r25, 0x01	; 1
    31d0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xTaskCreate>
    31d4:	01 c0       	rjmp	.+2      	; 0x31d8 <xTimerCreateTimerTask+0x3a>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	0f 91       	pop	r16
    31da:	ff 90       	pop	r15
    31dc:	ef 90       	pop	r14
    31de:	08 95       	ret

000031e0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    31e0:	8f 92       	push	r8
    31e2:	9f 92       	push	r9
    31e4:	af 92       	push	r10
    31e6:	bf 92       	push	r11
    31e8:	cf 92       	push	r12
    31ea:	df 92       	push	r13
    31ec:	ef 92       	push	r14
    31ee:	ff 92       	push	r15
    31f0:	0f 93       	push	r16
    31f2:	1f 93       	push	r17
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	27 97       	sbiw	r28, 0x07	; 7
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3208:	e0 91 a9 16 	lds	r30, 0x16A9	; 0x8016a9 <xTimerQueue>
    320c:	f0 91 aa 16 	lds	r31, 0x16AA	; 0x8016aa <xTimerQueue+0x1>
    3210:	30 97       	sbiw	r30, 0x00	; 0
    3212:	81 f1       	breq	.+96     	; 0x3274 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3214:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3216:	2a 83       	std	Y+2, r18	; 0x02
    3218:	3b 83       	std	Y+3, r19	; 0x03
    321a:	4c 83       	std	Y+4, r20	; 0x04
    321c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    321e:	9f 83       	std	Y+7, r25	; 0x07
    3220:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3222:	66 30       	cpi	r22, 0x06	; 6
    3224:	f4 f4       	brge	.+60     	; 0x3262 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3226:	c4 db       	rcall	.-2168   	; 0x29b0 <xTaskGetSchedulerState>
    3228:	82 30       	cpi	r24, 0x02	; 2
    322a:	69 f4       	brne	.+26     	; 0x3246 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    322c:	00 e0       	ldi	r16, 0x00	; 0
    322e:	a7 01       	movw	r20, r14
    3230:	96 01       	movw	r18, r12
    3232:	be 01       	movw	r22, r28
    3234:	6f 5f       	subi	r22, 0xFF	; 255
    3236:	7f 4f       	sbci	r23, 0xFF	; 255
    3238:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <xTimerQueue>
    323c:	90 91 aa 16 	lds	r25, 0x16AA	; 0x8016aa <xTimerQueue+0x1>
    3240:	0e 94 17 08 	call	0x102e	; 0x102e <xQueueGenericSend>
    3244:	18 c0       	rjmp	.+48     	; 0x3276 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3246:	00 e0       	ldi	r16, 0x00	; 0
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	a9 01       	movw	r20, r18
    324e:	be 01       	movw	r22, r28
    3250:	6f 5f       	subi	r22, 0xFF	; 255
    3252:	7f 4f       	sbci	r23, 0xFF	; 255
    3254:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <xTimerQueue>
    3258:	90 91 aa 16 	lds	r25, 0x16AA	; 0x8016aa <xTimerQueue+0x1>
    325c:	0e 94 17 08 	call	0x102e	; 0x102e <xQueueGenericSend>
    3260:	0a c0       	rjmp	.+20     	; 0x3276 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	a8 01       	movw	r20, r16
    3266:	be 01       	movw	r22, r28
    3268:	6f 5f       	subi	r22, 0xFF	; 255
    326a:	7f 4f       	sbci	r23, 0xFF	; 255
    326c:	cf 01       	movw	r24, r30
    326e:	0e 94 a8 08 	call	0x1150	; 0x1150 <xQueueGenericSendFromISR>
    3272:	01 c0       	rjmp	.+2      	; 0x3276 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3274:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3276:	27 96       	adiw	r28, 0x07	; 7
    3278:	0f b6       	in	r0, 0x3f	; 63
    327a:	f8 94       	cli
    327c:	de bf       	out	0x3e, r29	; 62
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	cd bf       	out	0x3d, r28	; 61
    3282:	df 91       	pop	r29
    3284:	cf 91       	pop	r28
    3286:	1f 91       	pop	r17
    3288:	0f 91       	pop	r16
    328a:	ff 90       	pop	r15
    328c:	ef 90       	pop	r14
    328e:	df 90       	pop	r13
    3290:	cf 90       	pop	r12
    3292:	bf 90       	pop	r11
    3294:	af 90       	pop	r10
    3296:	9f 90       	pop	r9
    3298:	8f 90       	pop	r8
    329a:	08 95       	ret

0000329c <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    329c:	8f 92       	push	r8
    329e:	9f 92       	push	r9
    32a0:	af 92       	push	r10
    32a2:	bf 92       	push	r11
    32a4:	cf 92       	push	r12
    32a6:	df 92       	push	r13
    32a8:	ef 92       	push	r14
    32aa:	ff 92       	push	r15
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    32b4:	3b c0       	rjmp	.+118    	; 0x332c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    32b6:	07 80       	ldd	r0, Z+7	; 0x07
    32b8:	f0 85       	ldd	r31, Z+8	; 0x08
    32ba:	e0 2d       	mov	r30, r0
    32bc:	80 80       	ld	r8, Z
    32be:	91 80       	ldd	r9, Z+1	; 0x01
    32c0:	a2 80       	ldd	r10, Z+2	; 0x02
    32c2:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    32c4:	c0 85       	ldd	r28, Z+8	; 0x08
    32c6:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    32c8:	8e 01       	movw	r16, r28
    32ca:	0e 5f       	subi	r16, 0xFE	; 254
    32cc:	1f 4f       	sbci	r17, 0xFF	; 255
    32ce:	c8 01       	movw	r24, r16
    32d0:	0e 94 93 05 	call	0xb26	; 0xb26 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    32d4:	ec 89       	ldd	r30, Y+20	; 0x14
    32d6:	fd 89       	ldd	r31, Y+21	; 0x15
    32d8:	ce 01       	movw	r24, r28
    32da:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    32dc:	8e 89       	ldd	r24, Y+22	; 0x16
    32de:	82 ff       	sbrs	r24, 2
    32e0:	25 c0       	rjmp	.+74     	; 0x332c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    32e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    32e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    32e6:	a8 89       	ldd	r26, Y+16	; 0x10
    32e8:	b9 89       	ldd	r27, Y+17	; 0x11
    32ea:	88 0d       	add	r24, r8
    32ec:	99 1d       	adc	r25, r9
    32ee:	aa 1d       	adc	r26, r10
    32f0:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    32f2:	88 16       	cp	r8, r24
    32f4:	99 06       	cpc	r9, r25
    32f6:	aa 06       	cpc	r10, r26
    32f8:	bb 06       	cpc	r11, r27
    32fa:	70 f4       	brcc	.+28     	; 0x3318 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    32fc:	8a 83       	std	Y+2, r24	; 0x02
    32fe:	9b 83       	std	Y+3, r25	; 0x03
    3300:	ac 83       	std	Y+4, r26	; 0x04
    3302:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3304:	db 87       	std	Y+11, r29	; 0x0b
    3306:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3308:	b8 01       	movw	r22, r16
    330a:	80 91 ad 16 	lds	r24, 0x16AD	; 0x8016ad <pxCurrentTimerList>
    330e:	90 91 ae 16 	lds	r25, 0x16AE	; 0x8016ae <pxCurrentTimerList+0x1>
    3312:	0e 94 56 05 	call	0xaac	; 0xaac <vListInsert>
    3316:	0a c0       	rjmp	.+20     	; 0x332c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3318:	c1 2c       	mov	r12, r1
    331a:	d1 2c       	mov	r13, r1
    331c:	76 01       	movw	r14, r12
    331e:	00 e0       	ldi	r16, 0x00	; 0
    3320:	10 e0       	ldi	r17, 0x00	; 0
    3322:	a5 01       	movw	r20, r10
    3324:	94 01       	movw	r18, r8
    3326:	60 e0       	ldi	r22, 0x00	; 0
    3328:	ce 01       	movw	r24, r28
    332a:	5a df       	rcall	.-332    	; 0x31e0 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    332c:	e0 91 ad 16 	lds	r30, 0x16AD	; 0x8016ad <pxCurrentTimerList>
    3330:	f0 91 ae 16 	lds	r31, 0x16AE	; 0x8016ae <pxCurrentTimerList+0x1>
    3334:	80 81       	ld	r24, Z
    3336:	81 11       	cpse	r24, r1
    3338:	be cf       	rjmp	.-132    	; 0x32b6 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    333a:	80 91 ab 16 	lds	r24, 0x16AB	; 0x8016ab <pxOverflowTimerList>
    333e:	90 91 ac 16 	lds	r25, 0x16AC	; 0x8016ac <pxOverflowTimerList+0x1>
    3342:	90 93 ae 16 	sts	0x16AE, r25	; 0x8016ae <pxCurrentTimerList+0x1>
    3346:	80 93 ad 16 	sts	0x16AD, r24	; 0x8016ad <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    334a:	f0 93 ac 16 	sts	0x16AC, r31	; 0x8016ac <pxOverflowTimerList+0x1>
    334e:	e0 93 ab 16 	sts	0x16AB, r30	; 0x8016ab <pxOverflowTimerList>
    }
    3352:	df 91       	pop	r29
    3354:	cf 91       	pop	r28
    3356:	1f 91       	pop	r17
    3358:	0f 91       	pop	r16
    335a:	ff 90       	pop	r15
    335c:	ef 90       	pop	r14
    335e:	df 90       	pop	r13
    3360:	cf 90       	pop	r12
    3362:	bf 90       	pop	r11
    3364:	af 90       	pop	r10
    3366:	9f 90       	pop	r9
    3368:	8f 90       	pop	r8
    336a:	08 95       	ret

0000336c <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    336c:	cf 92       	push	r12
    336e:	df 92       	push	r13
    3370:	ef 92       	push	r14
    3372:	ff 92       	push	r15
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
    3378:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    337a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <xTaskGetTickCount>
    337e:	6b 01       	movw	r12, r22
    3380:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3382:	80 91 a3 16 	lds	r24, 0x16A3	; 0x8016a3 <xLastTime.2436>
    3386:	90 91 a4 16 	lds	r25, 0x16A4	; 0x8016a4 <xLastTime.2436+0x1>
    338a:	a0 91 a5 16 	lds	r26, 0x16A5	; 0x8016a5 <xLastTime.2436+0x2>
    338e:	b0 91 a6 16 	lds	r27, 0x16A6	; 0x8016a6 <xLastTime.2436+0x3>
    3392:	c8 16       	cp	r12, r24
    3394:	d9 06       	cpc	r13, r25
    3396:	ea 06       	cpc	r14, r26
    3398:	fb 06       	cpc	r15, r27
    339a:	20 f4       	brcc	.+8      	; 0x33a4 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    339c:	7f df       	rcall	.-258    	; 0x329c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	88 83       	st	Y, r24
    33a2:	01 c0       	rjmp	.+2      	; 0x33a6 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    33a4:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    33a6:	c0 92 a3 16 	sts	0x16A3, r12	; 0x8016a3 <xLastTime.2436>
    33aa:	d0 92 a4 16 	sts	0x16A4, r13	; 0x8016a4 <xLastTime.2436+0x1>
    33ae:	e0 92 a5 16 	sts	0x16A5, r14	; 0x8016a5 <xLastTime.2436+0x2>
    33b2:	f0 92 a6 16 	sts	0x16A6, r15	; 0x8016a6 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    33b6:	c7 01       	movw	r24, r14
    33b8:	b6 01       	movw	r22, r12
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	ff 90       	pop	r15
    33c0:	ef 90       	pop	r14
    33c2:	df 90       	pop	r13
    33c4:	cf 90       	pop	r12
    33c6:	08 95       	ret

000033c8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    33c8:	4f 92       	push	r4
    33ca:	5f 92       	push	r5
    33cc:	6f 92       	push	r6
    33ce:	7f 92       	push	r7
    33d0:	8f 92       	push	r8
    33d2:	9f 92       	push	r9
    33d4:	af 92       	push	r10
    33d6:	bf 92       	push	r11
    33d8:	cf 92       	push	r12
    33da:	df 92       	push	r13
    33dc:	ef 92       	push	r14
    33de:	ff 92       	push	r15
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	4b 01       	movw	r8, r22
    33ea:	5c 01       	movw	r10, r24
    33ec:	29 01       	movw	r4, r18
    33ee:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    33f0:	e0 91 ad 16 	lds	r30, 0x16AD	; 0x8016ad <pxCurrentTimerList>
    33f4:	f0 91 ae 16 	lds	r31, 0x16AE	; 0x8016ae <pxCurrentTimerList+0x1>
    33f8:	07 80       	ldd	r0, Z+7	; 0x07
    33fa:	f0 85       	ldd	r31, Z+8	; 0x08
    33fc:	e0 2d       	mov	r30, r0
    33fe:	c0 85       	ldd	r28, Z+8	; 0x08
    3400:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3402:	ce 01       	movw	r24, r28
    3404:	02 96       	adiw	r24, 0x02	; 2
    3406:	0e 94 93 05 	call	0xb26	; 0xb26 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    340a:	8e 89       	ldd	r24, Y+22	; 0x16
    340c:	82 ff       	sbrs	r24, 2
    340e:	1b c0       	rjmp	.+54     	; 0x3446 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3410:	4e 85       	ldd	r20, Y+14	; 0x0e
    3412:	5f 85       	ldd	r21, Y+15	; 0x0f
    3414:	68 89       	ldd	r22, Y+16	; 0x10
    3416:	79 89       	ldd	r23, Y+17	; 0x11
    3418:	48 0d       	add	r20, r8
    341a:	59 1d       	adc	r21, r9
    341c:	6a 1d       	adc	r22, r10
    341e:	7b 1d       	adc	r23, r11
    3420:	75 01       	movw	r14, r10
    3422:	64 01       	movw	r12, r8
    3424:	93 01       	movw	r18, r6
    3426:	82 01       	movw	r16, r4
    3428:	ce 01       	movw	r24, r28
    342a:	47 de       	rcall	.-882    	; 0x30ba <prvInsertTimerInActiveList>
    342c:	88 23       	and	r24, r24
    342e:	69 f0       	breq	.+26     	; 0x344a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3430:	c1 2c       	mov	r12, r1
    3432:	d1 2c       	mov	r13, r1
    3434:	76 01       	movw	r14, r12
    3436:	00 e0       	ldi	r16, 0x00	; 0
    3438:	10 e0       	ldi	r17, 0x00	; 0
    343a:	a5 01       	movw	r20, r10
    343c:	94 01       	movw	r18, r8
    343e:	60 e0       	ldi	r22, 0x00	; 0
    3440:	ce 01       	movw	r24, r28
    3442:	ce de       	rcall	.-612    	; 0x31e0 <xTimerGenericCommand>
    3444:	02 c0       	rjmp	.+4      	; 0x344a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3446:	8e 7f       	andi	r24, 0xFE	; 254
    3448:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    344a:	ec 89       	ldd	r30, Y+20	; 0x14
    344c:	fd 89       	ldd	r31, Y+21	; 0x15
    344e:	ce 01       	movw	r24, r28
    3450:	19 95       	eicall
    }
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	1f 91       	pop	r17
    3458:	0f 91       	pop	r16
    345a:	ff 90       	pop	r15
    345c:	ef 90       	pop	r14
    345e:	df 90       	pop	r13
    3460:	cf 90       	pop	r12
    3462:	bf 90       	pop	r11
    3464:	af 90       	pop	r10
    3466:	9f 90       	pop	r9
    3468:	8f 90       	pop	r8
    346a:	7f 90       	pop	r7
    346c:	6f 90       	pop	r6
    346e:	5f 90       	pop	r5
    3470:	4f 90       	pop	r4
    3472:	08 95       	ret

00003474 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3474:	8f 92       	push	r8
    3476:	9f 92       	push	r9
    3478:	af 92       	push	r10
    347a:	bf 92       	push	r11
    347c:	cf 92       	push	r12
    347e:	df 92       	push	r13
    3480:	ef 92       	push	r14
    3482:	ff 92       	push	r15
    3484:	1f 93       	push	r17
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	1f 92       	push	r1
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	6b 01       	movw	r12, r22
    3492:	7c 01       	movw	r14, r24
    3494:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3496:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    349a:	ce 01       	movw	r24, r28
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	66 df       	rcall	.-308    	; 0x336c <prvSampleTimeNow>
    34a0:	4b 01       	movw	r8, r22
    34a2:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	81 11       	cpse	r24, r1
    34a8:	2d c0       	rjmp	.+90     	; 0x3504 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    34aa:	11 11       	cpse	r17, r1
    34ac:	0d c0       	rjmp	.+26     	; 0x34c8 <prvProcessTimerOrBlockTask+0x54>
    34ae:	8c 14       	cp	r8, r12
    34b0:	9d 04       	cpc	r9, r13
    34b2:	ae 04       	cpc	r10, r14
    34b4:	bf 04       	cpc	r11, r15
    34b6:	40 f0       	brcs	.+16     	; 0x34c8 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    34b8:	0e 94 95 10 	call	0x212a	; 0x212a <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    34bc:	a5 01       	movw	r20, r10
    34be:	94 01       	movw	r18, r8
    34c0:	c7 01       	movw	r24, r14
    34c2:	b6 01       	movw	r22, r12
    34c4:	81 df       	rcall	.-254    	; 0x33c8 <prvProcessExpiredTimer>
    34c6:	20 c0       	rjmp	.+64     	; 0x3508 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    34c8:	11 23       	and	r17, r17
    34ca:	41 f0       	breq	.+16     	; 0x34dc <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    34cc:	e0 91 ab 16 	lds	r30, 0x16AB	; 0x8016ab <pxOverflowTimerList>
    34d0:	f0 91 ac 16 	lds	r31, 0x16AC	; 0x8016ac <pxOverflowTimerList+0x1>
    34d4:	80 81       	ld	r24, Z
    34d6:	11 e0       	ldi	r17, 0x01	; 1
    34d8:	81 11       	cpse	r24, r1
    34da:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    34dc:	b7 01       	movw	r22, r14
    34de:	a6 01       	movw	r20, r12
    34e0:	48 19       	sub	r20, r8
    34e2:	59 09       	sbc	r21, r9
    34e4:	6a 09       	sbc	r22, r10
    34e6:	7b 09       	sbc	r23, r11
    34e8:	21 2f       	mov	r18, r17
    34ea:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <xTimerQueue>
    34ee:	90 91 aa 16 	lds	r25, 0x16AA	; 0x8016aa <xTimerQueue+0x1>
    34f2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    34f6:	0e 94 95 10 	call	0x212a	; 0x212a <xTaskResumeAll>
    34fa:	81 11       	cpse	r24, r1
    34fc:	05 c0       	rjmp	.+10     	; 0x3508 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    34fe:	0e 94 0f 06 	call	0xc1e	; 0xc1e <vPortYield>
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3504:	0e 94 95 10 	call	0x212a	; 0x212a <xTaskResumeAll>
            }
        }
    }
    3508:	0f 90       	pop	r0
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	1f 91       	pop	r17
    3510:	ff 90       	pop	r15
    3512:	ef 90       	pop	r14
    3514:	df 90       	pop	r13
    3516:	cf 90       	pop	r12
    3518:	bf 90       	pop	r11
    351a:	af 90       	pop	r10
    351c:	9f 90       	pop	r9
    351e:	8f 90       	pop	r8
    3520:	08 95       	ret

00003522 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3522:	af 92       	push	r10
    3524:	bf 92       	push	r11
    3526:	cf 92       	push	r12
    3528:	df 92       	push	r13
    352a:	ef 92       	push	r14
    352c:	ff 92       	push	r15
    352e:	0f 93       	push	r16
    3530:	1f 93       	push	r17
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	28 97       	sbiw	r28, 0x08	; 8
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3546:	82 c0       	rjmp	.+260    	; 0x364c <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	88 23       	and	r24, r24
    354c:	0c f4       	brge	.+2      	; 0x3550 <prvProcessReceivedCommands+0x2e>
    354e:	7e c0       	rjmp	.+252    	; 0x364c <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3550:	ae 80       	ldd	r10, Y+6	; 0x06
    3552:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3554:	d5 01       	movw	r26, r10
    3556:	1c 96       	adiw	r26, 0x0c	; 12
    3558:	8d 91       	ld	r24, X+
    355a:	9c 91       	ld	r25, X
    355c:	1d 97       	sbiw	r26, 0x0d	; 13
    355e:	89 2b       	or	r24, r25
    3560:	21 f0       	breq	.+8      	; 0x356a <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3562:	c5 01       	movw	r24, r10
    3564:	02 96       	adiw	r24, 0x02	; 2
    3566:	0e 94 93 05 	call	0xb26	; 0xb26 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    356a:	ce 01       	movw	r24, r28
    356c:	08 96       	adiw	r24, 0x08	; 8
    356e:	fe de       	rcall	.-516    	; 0x336c <prvSampleTimeNow>
    3570:	8b 01       	movw	r16, r22
    3572:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3574:	e9 81       	ldd	r30, Y+1	; 0x01
    3576:	0e 2e       	mov	r0, r30
    3578:	00 0c       	add	r0, r0
    357a:	ff 0b       	sbc	r31, r31
    357c:	ea 30       	cpi	r30, 0x0A	; 10
    357e:	f1 05       	cpc	r31, r1
    3580:	08 f0       	brcs	.+2      	; 0x3584 <prvProcessReceivedCommands+0x62>
    3582:	64 c0       	rjmp	.+200    	; 0x364c <prvProcessReceivedCommands+0x12a>
    3584:	88 27       	eor	r24, r24
    3586:	ee 58       	subi	r30, 0x8E	; 142
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	8f 4f       	sbci	r24, 0xFF	; 255
    358c:	0c 94 aa 30 	jmp	0x6154	; 0x6154 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3590:	f5 01       	movw	r30, r10
    3592:	86 89       	ldd	r24, Z+22	; 0x16
    3594:	81 60       	ori	r24, 0x01	; 1
    3596:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3598:	ca 80       	ldd	r12, Y+2	; 0x02
    359a:	db 80       	ldd	r13, Y+3	; 0x03
    359c:	ec 80       	ldd	r14, Y+4	; 0x04
    359e:	fd 80       	ldd	r15, Y+5	; 0x05
    35a0:	46 85       	ldd	r20, Z+14	; 0x0e
    35a2:	57 85       	ldd	r21, Z+15	; 0x0f
    35a4:	60 89       	ldd	r22, Z+16	; 0x10
    35a6:	71 89       	ldd	r23, Z+17	; 0x11
    35a8:	4c 0d       	add	r20, r12
    35aa:	5d 1d       	adc	r21, r13
    35ac:	6e 1d       	adc	r22, r14
    35ae:	7f 1d       	adc	r23, r15
    35b0:	c5 01       	movw	r24, r10
    35b2:	83 dd       	rcall	.-1274   	; 0x30ba <prvInsertTimerInActiveList>
    35b4:	88 23       	and	r24, r24
    35b6:	09 f4       	brne	.+2      	; 0x35ba <prvProcessReceivedCommands+0x98>
    35b8:	49 c0       	rjmp	.+146    	; 0x364c <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    35ba:	d5 01       	movw	r26, r10
    35bc:	54 96       	adiw	r26, 0x14	; 20
    35be:	ed 91       	ld	r30, X+
    35c0:	fc 91       	ld	r31, X
    35c2:	55 97       	sbiw	r26, 0x15	; 21
    35c4:	c5 01       	movw	r24, r10
    35c6:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    35c8:	f5 01       	movw	r30, r10
    35ca:	86 89       	ldd	r24, Z+22	; 0x16
    35cc:	82 ff       	sbrs	r24, 2
    35ce:	3e c0       	rjmp	.+124    	; 0x364c <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    35d0:	4a 81       	ldd	r20, Y+2	; 0x02
    35d2:	5b 81       	ldd	r21, Y+3	; 0x03
    35d4:	6c 81       	ldd	r22, Y+4	; 0x04
    35d6:	7d 81       	ldd	r23, Y+5	; 0x05
    35d8:	86 85       	ldd	r24, Z+14	; 0x0e
    35da:	97 85       	ldd	r25, Z+15	; 0x0f
    35dc:	a0 89       	ldd	r26, Z+16	; 0x10
    35de:	b1 89       	ldd	r27, Z+17	; 0x11
    35e0:	9a 01       	movw	r18, r20
    35e2:	ab 01       	movw	r20, r22
    35e4:	28 0f       	add	r18, r24
    35e6:	39 1f       	adc	r19, r25
    35e8:	4a 1f       	adc	r20, r26
    35ea:	5b 1f       	adc	r21, r27
    35ec:	c1 2c       	mov	r12, r1
    35ee:	d1 2c       	mov	r13, r1
    35f0:	76 01       	movw	r14, r12
    35f2:	00 e0       	ldi	r16, 0x00	; 0
    35f4:	10 e0       	ldi	r17, 0x00	; 0
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	c5 01       	movw	r24, r10
    35fa:	f2 dd       	rcall	.-1052   	; 0x31e0 <xTimerGenericCommand>
    35fc:	27 c0       	rjmp	.+78     	; 0x364c <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    35fe:	d5 01       	movw	r26, r10
    3600:	56 96       	adiw	r26, 0x16	; 22
    3602:	8c 91       	ld	r24, X
    3604:	56 97       	sbiw	r26, 0x16	; 22
    3606:	8e 7f       	andi	r24, 0xFE	; 254
    3608:	56 96       	adiw	r26, 0x16	; 22
    360a:	8c 93       	st	X, r24
                        break;
    360c:	1f c0       	rjmp	.+62     	; 0x364c <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    360e:	f5 01       	movw	r30, r10
    3610:	86 89       	ldd	r24, Z+22	; 0x16
    3612:	81 60       	ori	r24, 0x01	; 1
    3614:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3616:	4a 81       	ldd	r20, Y+2	; 0x02
    3618:	5b 81       	ldd	r21, Y+3	; 0x03
    361a:	6c 81       	ldd	r22, Y+4	; 0x04
    361c:	7d 81       	ldd	r23, Y+5	; 0x05
    361e:	46 87       	std	Z+14, r20	; 0x0e
    3620:	57 87       	std	Z+15, r21	; 0x0f
    3622:	60 8b       	std	Z+16, r22	; 0x10
    3624:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3626:	40 0f       	add	r20, r16
    3628:	51 1f       	adc	r21, r17
    362a:	62 1f       	adc	r22, r18
    362c:	73 1f       	adc	r23, r19
    362e:	68 01       	movw	r12, r16
    3630:	79 01       	movw	r14, r18
    3632:	c5 01       	movw	r24, r10
    3634:	42 dd       	rcall	.-1404   	; 0x30ba <prvInsertTimerInActiveList>
                        break;
    3636:	0a c0       	rjmp	.+20     	; 0x364c <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3638:	f5 01       	movw	r30, r10
    363a:	86 89       	ldd	r24, Z+22	; 0x16
    363c:	81 fd       	sbrc	r24, 1
    363e:	04 c0       	rjmp	.+8      	; 0x3648 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3640:	c5 01       	movw	r24, r10
    3642:	0e 94 04 05 	call	0xa08	; 0xa08 <vPortFree>
    3646:	02 c0       	rjmp	.+4      	; 0x364c <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3648:	8e 7f       	andi	r24, 0xFE	; 254
    364a:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	a9 01       	movw	r20, r18
    3652:	be 01       	movw	r22, r28
    3654:	6f 5f       	subi	r22, 0xFF	; 255
    3656:	7f 4f       	sbci	r23, 0xFF	; 255
    3658:	80 91 a9 16 	lds	r24, 0x16A9	; 0x8016a9 <xTimerQueue>
    365c:	90 91 aa 16 	lds	r25, 0x16AA	; 0x8016aa <xTimerQueue+0x1>
    3660:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <xQueueReceive>
    3664:	81 11       	cpse	r24, r1
    3666:	70 cf       	rjmp	.-288    	; 0x3548 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3668:	28 96       	adiw	r28, 0x08	; 8
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    367c:	ff 90       	pop	r15
    367e:	ef 90       	pop	r14
    3680:	df 90       	pop	r13
    3682:	cf 90       	pop	r12
    3684:	bf 90       	pop	r11
    3686:	af 90       	pop	r10
    3688:	08 95       	ret

0000368a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    368a:	08 95       	ret

0000368c <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    368c:	84 b1       	in	r24, 0x04	; 4
    368e:	80 68       	ori	r24, 0x80	; 128
    3690:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3692:	85 b1       	in	r24, 0x05	; 5
    3694:	80 68       	ori	r24, 0x80	; 128
    3696:	85 b9       	out	0x05, r24	; 5
    3698:	08 95       	ret

0000369a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    369a:	83 b1       	in	r24, 0x03	; 3
    369c:	80 68       	ori	r24, 0x80	; 128
    369e:	83 b9       	out	0x03, r24	; 3
    36a0:	08 95       	ret

000036a2 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    36a2:	f4 df       	rcall	.-24     	; 0x368c <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36a4:	2f ef       	ldi	r18, 0xFF	; 255
    36a6:	80 e7       	ldi	r24, 0x70	; 112
    36a8:	92 e0       	ldi	r25, 0x02	; 2
    36aa:	21 50       	subi	r18, 0x01	; 1
    36ac:	80 40       	sbci	r24, 0x00	; 0
    36ae:	90 40       	sbci	r25, 0x00	; 0
    36b0:	e1 f7       	brne	.-8      	; 0x36aa <vApplicationMallocFailedHook+0x8>
    36b2:	00 c0       	rjmp	.+0      	; 0x36b4 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    36b4:	00 00       	nop
    36b6:	f1 df       	rcall	.-30     	; 0x369a <prvBlinkMainLed>
    36b8:	f5 cf       	rjmp	.-22     	; 0x36a4 <vApplicationMallocFailedHook+0x2>

000036ba <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    36ba:	e8 df       	rcall	.-48     	; 0x368c <prvSetMainLedOn>
    36bc:	2f ef       	ldi	r18, 0xFF	; 255
    36be:	87 ea       	ldi	r24, 0xA7	; 167
    36c0:	91 e6       	ldi	r25, 0x61	; 97
    36c2:	21 50       	subi	r18, 0x01	; 1
    36c4:	80 40       	sbci	r24, 0x00	; 0
    36c6:	90 40       	sbci	r25, 0x00	; 0
    36c8:	e1 f7       	brne	.-8      	; 0x36c2 <vApplicationStackOverflowHook+0x8>
    36ca:	00 c0       	rjmp	.+0      	; 0x36cc <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    36cc:	00 00       	nop
    36ce:	e5 df       	rcall	.-54     	; 0x369a <prvBlinkMainLed>
    36d0:	f5 cf       	rjmp	.-22     	; 0x36bc <vApplicationStackOverflowHook+0x2>

000036d2 <set_temperature_percent>:
static uint16_t humidityPercent;
static uint16_t CO2_PPM;
static uint8_t status = 0x10;

void set_temperature_percent(int16_t temperature){
	temperaturePercent = temperature;
    36d2:	90 93 ca 16 	sts	0x16CA, r25	; 0x8016ca <temperaturePercent+0x1>
    36d6:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <temperaturePercent>
    36da:	08 95       	ret

000036dc <set_humidity_percent>:
}

void set_humidity_percent(uint16_t humidity){
	humidityPercent = humidity;
    36dc:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <humidityPercent+0x1>
    36e0:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <humidityPercent>
    36e4:	08 95       	ret

000036e6 <set_CO2_ppm>:
}

void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    36e6:	90 93 c6 16 	sts	0x16C6, r25	; 0x8016c6 <CO2_PPM+0x1>
    36ea:	80 93 c5 16 	sts	0x16C5, r24	; 0x8016c5 <CO2_PPM>
    36ee:	08 95       	ret

000036f0 <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    36f0:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    36f2:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    36f4:	87 e0       	ldi	r24, 0x07	; 7
    36f6:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    36f8:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <temperaturePercent>
    36fc:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <temperaturePercent+0x1>
    3700:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    3702:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3704:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <humidityPercent>
    3708:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <humidityPercent+0x1>
    370c:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    370e:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    3710:	80 91 c5 16 	lds	r24, 0x16C5	; 0x8016c5 <CO2_PPM>
    3714:	90 91 c6 16 	lds	r25, 0x16C6	; 0x8016c6 <CO2_PPM+0x1>
    3718:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    371a:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    371c:	80 e1       	ldi	r24, 0x10	; 16
    371e:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    3720:	cf 01       	movw	r24, r30
    3722:	08 95       	ret

00003724 <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    3724:	90 93 cc 16 	sts	0x16CC, r25	; 0x8016cc <lastCO2ppm+0x1>
    3728:	80 93 cb 16 	sts	0x16CB, r24	; 0x8016cb <lastCO2ppm>
    372c:	08 95       	ret

0000372e <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	a8 d7       	rcall	.+3920   	; 0x4682 <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    3732:	82 e9       	ldi	r24, 0x92	; 146
    3734:	9b e1       	ldi	r25, 0x1B	; 27
    3736:	ca c7       	rjmp	.+3988   	; 0x46cc <mh_z19_injectCallBack>
    3738:	08 95       	ret

0000373a <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    373a:	cd d7       	rcall	.+3994   	; 0x46d6 <mh_z19_takeMeassuring>
    373c:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <rc>
	if (rc != MHZ19_OK)
    3740:	88 23       	and	r24, r24
    3742:	41 f0       	breq	.+16     	; 0x3754 <CO2_measure+0x1a>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
    3744:	84 ee       	ldi	r24, 0xE4	; 228
    3746:	92 e0       	ldi	r25, 0x02	; 2
    3748:	9f 93       	push	r25
    374a:	8f 93       	push	r24
    374c:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3754:	8b ec       	ldi	r24, 0xCB	; 203
    3756:	96 e1       	ldi	r25, 0x16	; 22
    3758:	ed d7       	rcall	.+4058   	; 0x4734 <mh_z19_getCo2Ppm>
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	90 93 cc 16 	sts	0x16CC, r25	; 0x8016cc <lastCO2ppm+0x1>
    3760:	80 93 cb 16 	sts	0x16CB, r24	; 0x8016cb <lastCO2ppm>
    3764:	08 95       	ret

00003766 <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3766:	cc 24       	eor	r12, r12
    3768:	ca 94       	dec	r12
    376a:	dc 2c       	mov	r13, r12
    376c:	76 01       	movw	r14, r12
    376e:	01 e0       	ldi	r16, 0x01	; 1
    3770:	21 e0       	ldi	r18, 0x01	; 1
    3772:	41 e0       	ldi	r20, 0x01	; 1
    3774:	50 e0       	ldi	r21, 0x00	; 0
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <measureEventGroup>
    377e:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <measureEventGroup+0x1>
    3782:	0e 94 ba 02 	call	0x574	; 0x574 <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3786:	60 ff       	sbrs	r22, 0
    3788:	ee cf       	rjmp	.-36     	; 0x3766 <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    378a:	d7 df       	rcall	.-82     	; 0x373a <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    378c:	42 e0       	ldi	r20, 0x02	; 2
    378e:	50 e0       	ldi	r21, 0x00	; 0
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	70 e0       	ldi	r23, 0x00	; 0
    3794:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <dataReadyEventGroup>
    3798:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <dataReadyEventGroup+0x1>
    379c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <xEventGroupSetBits>
    37a0:	e2 cf       	rjmp	.-60     	; 0x3766 <MeasureCo2Task>

000037a2 <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    37a2:	80 91 cb 16 	lds	r24, 0x16CB	; 0x8016cb <lastCO2ppm>
    37a6:	90 91 cc 16 	lds	r25, 0x16CC	; 0x8016cc <lastCO2ppm+0x1>
    37aa:	08 95       	ret

000037ac <createCO2SensorTask>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void createCO2SensorTask(){
    37ac:	ef 92       	push	r14
    37ae:	ff 92       	push	r15
    37b0:	0f 93       	push	r16
	
	//Initializing 
		CO2_createSensor();
    37b2:	bd df       	rcall	.-134    	; 0x372e <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    37b4:	e1 2c       	mov	r14, r1
    37b6:	f1 2c       	mov	r15, r1
    37b8:	00 e0       	ldi	r16, 0x00	; 0
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 ec       	ldi	r20, 0xC0	; 192
    37c0:	50 e0       	ldi	r21, 0x00	; 0
    37c2:	64 e1       	ldi	r22, 0x14	; 20
    37c4:	73 e0       	ldi	r23, 0x03	; 3
    37c6:	83 eb       	ldi	r24, 0xB3	; 179
    37c8:	9b e1       	ldi	r25, 0x1B	; 27
    37ca:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY,
		NULL);
}
    37ce:	0f 91       	pop	r16
    37d0:	ff 90       	pop	r15
    37d2:	ef 90       	pop	r14
    37d4:	08 95       	ret

000037d6 <initialise_TempHumSensor>:
void Temp_Hum_Main_Task(void *pvParameters);


void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    37d6:	0b d2       	rcall	.+1046   	; 0x3bee <hih8120_initialise>
    37d8:	88 23       	and	r24, r24
    37da:	41 f0       	breq	.+16     	; 0x37ec <initialise_TempHumSensor+0x16>
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{
		printf("Something went wrong while initialising tempHum sensor");
    37dc:	86 e2       	ldi	r24, 0x26	; 38
    37de:	93 e0       	ldi	r25, 0x03	; 3
    37e0:	9f 93       	push	r25
    37e2:	8f 93       	push	r24
    37e4:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	08 95       	ret

000037ee <create_TempHumSensorTask>:
	}
}


void create_TempHumSensorTask(){
    37ee:	ef 92       	push	r14
    37f0:	ff 92       	push	r15
    37f2:	0f 93       	push	r16
	initialise_TempHumSensor();
    37f4:	f0 df       	rcall	.-32     	; 0x37d6 <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    37f6:	e1 2c       	mov	r14, r1
    37f8:	f1 2c       	mov	r15, r1
    37fa:	00 e0       	ldi	r16, 0x00	; 0
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 ec       	ldi	r20, 0xC0	; 192
    3802:	50 e0       	ldi	r21, 0x00	; 0
    3804:	6d e5       	ldi	r22, 0x5D	; 93
    3806:	73 e0       	ldi	r23, 0x03	; 3
    3808:	89 e3       	ldi	r24, 0x39	; 57
    380a:	9c e1       	ldi	r25, 0x1C	; 28
    380c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY,
	NULL);
	
}
    3810:	0f 91       	pop	r16
    3812:	ff 90       	pop	r15
    3814:	ef 90       	pop	r14
    3816:	08 95       	ret

00003818 <measure_Temp_Hum>:

void measure_Temp_Hum(){
	
	if ( HIH8120_OK != hih8120_wakeup() )
    3818:	02 d2       	rcall	.+1028   	; 0x3c1e <hih8120_wakeup>
    381a:	88 23       	and	r24, r24
    381c:	41 f0       	breq	.+16     	; 0x382e <measure_Temp_Hum+0x16>
	{
		printf("Could not wake up temp hum sensor ");
    381e:	89 e6       	ldi	r24, 0x69	; 105
    3820:	93 e0       	ldi	r25, 0x03	; 3
    3822:	9f 93       	push	r25
    3824:	8f 93       	push	r24
    3826:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(60));
    382e:	63 e0       	ldi	r22, 0x03	; 3
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	0e 94 d6 11 	call	0x23ac	; 0x23ac <vTaskDelay>
	if ( HIH8120_OK !=  hih8120_measure() )
    383a:	06 d2       	rcall	.+1036   	; 0x3c48 <hih8120_measure>
    383c:	88 23       	and	r24, r24
    383e:	41 f0       	breq	.+16     	; 0x3850 <measure_Temp_Hum+0x38>
	{
		printf("Could not measure temp hum sensor ");
    3840:	8c e8       	ldi	r24, 0x8C	; 140
    3842:	93 e0       	ldi	r25, 0x03	; 3
    3844:	9f 93       	push	r25
    3846:	8f 93       	push	r24
    3848:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    384c:	0f 90       	pop	r0
    384e:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(50));
    3850:	63 e0       	ldi	r22, 0x03	; 3
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	0e 94 d6 11 	call	0x23ac	; 0x23ac <vTaskDelay>
	humidity = hih8120_getHumidityPercent_x10();
    385c:	1b d2       	rcall	.+1078   	; 0x3c94 <hih8120_getHumidityPercent_x10>
    385e:	90 93 d0 16 	sts	0x16D0, r25	; 0x8016d0 <humidity+0x1>
    3862:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <humidity>
	temperature = hih8120_getTemperature_x10();
    3866:	3c d2       	rcall	.+1144   	; 0x3ce0 <hih8120_getTemperature_x10>
    3868:	90 93 ce 16 	sts	0x16CE, r25	; 0x8016ce <temperature+0x1>
    386c:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <temperature>
    3870:	08 95       	ret

00003872 <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(void *pvParameters){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3872:	cc 24       	eor	r12, r12
    3874:	ca 94       	dec	r12
    3876:	dc 2c       	mov	r13, r12
    3878:	76 01       	movw	r14, r12
    387a:	01 e0       	ldi	r16, 0x01	; 1
    387c:	21 e0       	ldi	r18, 0x01	; 1
    387e:	44 e0       	ldi	r20, 0x04	; 4
    3880:	50 e0       	ldi	r21, 0x00	; 0
    3882:	60 e0       	ldi	r22, 0x00	; 0
    3884:	70 e0       	ldi	r23, 0x00	; 0
    3886:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <measureEventGroup>
    388a:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <measureEventGroup+0x1>
    388e:	0e 94 ba 02 	call	0x574	; 0x574 <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    3892:	62 ff       	sbrs	r22, 2
    3894:	ee cf       	rjmp	.-36     	; 0x3872 <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();			
    3896:	c0 df       	rcall	.-128    	; 0x3818 <measure_Temp_Hum>
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    3898:	48 e0       	ldi	r20, 0x08	; 8
    389a:	50 e0       	ldi	r21, 0x00	; 0
    389c:	60 e0       	ldi	r22, 0x00	; 0
    389e:	70 e0       	ldi	r23, 0x00	; 0
    38a0:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <dataReadyEventGroup>
    38a4:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <dataReadyEventGroup+0x1>
    38a8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <xEventGroupSetBits>
    38ac:	e2 cf       	rjmp	.-60     	; 0x3872 <Temp_Hum_Main_Task>

000038ae <TempHumSensor_getTemp>:
	temperature = hih8120_getTemperature_x10();
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    38ae:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <temperature>
    38b2:	90 91 ce 16 	lds	r25, 0x16CE	; 0x8016ce <temperature+0x1>
    38b6:	08 95       	ret

000038b8 <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    38b8:	80 91 cf 16 	lds	r24, 0x16CF	; 0x8016cf <humidity>
    38bc:	90 91 d0 16 	lds	r25, 0x16D0	; 0x8016d0 <humidity+0x1>
    38c0:	08 95       	ret

000038c2 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    38c2:	0f 93       	push	r16
    38c4:	1f 93       	push	r17
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	cd b7       	in	r28, 0x3d	; 61
    38cc:	de b7       	in	r29, 0x3e	; 62
    38ce:	64 97       	sbiw	r28, 0x14	; 20
    38d0:	0f b6       	in	r0, 0x3f	; 63
    38d2:	f8 94       	cli
    38d4:	de bf       	out	0x3e, r29	; 62
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	0e 94 bc 28 	call	0x5178	; 0x5178 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    38e0:	77 d3       	rcall	.+1774   	; 0x3fd0 <lora_driver_rn2483FactoryReset>
    38e2:	f3 d5       	rcall	.+3046   	; 0x44ca <lora_driver_mapReturnCodeToText>
    38e4:	9f 93       	push	r25
    38e6:	8f 93       	push	r24
    38e8:	8f ea       	ldi	r24, 0xAF	; 175
    38ea:	93 e0       	ldi	r25, 0x03	; 3
    38ec:	9f 93       	push	r25
    38ee:	8f 93       	push	r24
    38f0:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    38f4:	eb d4       	rcall	.+2518   	; 0x42cc <lora_driver_configureToEu868>
    38f6:	e9 d5       	rcall	.+3026   	; 0x44ca <lora_driver_mapReturnCodeToText>
    38f8:	9f 93       	push	r25
    38fa:	8f 93       	push	r24
    38fc:	82 ec       	ldi	r24, 0xC2	; 194
    38fe:	93 e0       	ldi	r25, 0x03	; 3
    3900:	9f 93       	push	r25
    3902:	8f 93       	push	r24
    3904:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    3908:	8e 01       	movw	r16, r28
    390a:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    390c:	1f 4f       	sbci	r17, 0xFF	; 255
    390e:	c8 01       	movw	r24, r16
    3910:	71 d3       	rcall	.+1762   	; 0x3ff4 <lora_driver_getRn2483Hweui>
    3912:	db d5       	rcall	.+2998   	; 0x44ca <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3914:	1f 93       	push	r17
    3916:	0f 93       	push	r16
    3918:	9f 93       	push	r25
    391a:	8f 93       	push	r24
    391c:	8b ed       	ldi	r24, 0xDB	; 219
    391e:	93 e0       	ldi	r25, 0x03	; 3
    3920:	9f 93       	push	r25
    3922:	8f 93       	push	r24
    3924:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3928:	c8 01       	movw	r24, r16
    392a:	80 d3       	rcall	.+1792   	; 0x402c <lora_driver_setDeviceIdentifier>
    392c:	ce d5       	rcall	.+2972   	; 0x44ca <lora_driver_mapReturnCodeToText>
    392e:	9f 93       	push	r25
    3930:	8f 93       	push	r24
    3932:	1f 93       	push	r17
    3934:	0f 93       	push	r16
    3936:	8f ee       	ldi	r24, 0xEF	; 239
    3938:	93 e0       	ldi	r25, 0x03	; 3
    393a:	9f 93       	push	r25
    393c:	8f 93       	push	r24
    393e:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3942:	a8 01       	movw	r20, r16
    3944:	64 e0       	ldi	r22, 0x04	; 4
    3946:	74 e0       	ldi	r23, 0x04	; 4
    3948:	85 e2       	ldi	r24, 0x25	; 37
    394a:	94 e0       	ldi	r25, 0x04	; 4
    394c:	9d d5       	rcall	.+2874   	; 0x4488 <lora_driver_setOtaaIdentity>
    394e:	bd d5       	rcall	.+2938   	; 0x44ca <lora_driver_mapReturnCodeToText>
    3950:	9f 93       	push	r25
    3952:	8f 93       	push	r24
    3954:	1f 93       	push	r17
    3956:	0f 93       	push	r16
    3958:	84 e0       	ldi	r24, 0x04	; 4
    395a:	94 e0       	ldi	r25, 0x04	; 4
    395c:	9f 93       	push	r25
    395e:	8f 93       	push	r24
    3960:	85 e2       	ldi	r24, 0x25	; 37
    3962:	94 e0       	ldi	r25, 0x04	; 4
    3964:	9f 93       	push	r25
    3966:	8f 93       	push	r24
    3968:	86 e3       	ldi	r24, 0x36	; 54
    396a:	94 e0       	ldi	r25, 0x04	; 4
    396c:	9f 93       	push	r25
    396e:	8f 93       	push	r24
    3970:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3974:	8e d3       	rcall	.+1820   	; 0x4092 <lora_driver_saveMac>
    3976:	a9 d5       	rcall	.+2898   	; 0x44ca <lora_driver_mapReturnCodeToText>
    3978:	9f 93       	push	r25
    397a:	8f 93       	push	r24
    397c:	8c e6       	ldi	r24, 0x6C	; 108
    397e:	94 e0       	ldi	r25, 0x04	; 4
    3980:	9f 93       	push	r25
    3982:	8f 93       	push	r24
    3984:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	78 d4       	rcall	.+2288   	; 0x4286 <lora_driver_setAdaptiveDataRate>
    3996:	99 d5       	rcall	.+2866   	; 0x44ca <lora_driver_mapReturnCodeToText>
    3998:	9f 93       	push	r25
    399a:	8f 93       	push	r24
    399c:	8b e7       	ldi	r24, 0x7B	; 123
    399e:	94 e0       	ldi	r25, 0x04	; 4
    39a0:	9f 93       	push	r25
    39a2:	8f 93       	push	r24
    39a4:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    39a8:	84 ef       	ldi	r24, 0xF4	; 244
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	77 d4       	rcall	.+2286   	; 0x429c <lora_driver_setReceiveDelay>
    39ae:	8d d5       	rcall	.+2842   	; 0x44ca <lora_driver_mapReturnCodeToText>
    39b0:	9f 93       	push	r25
    39b2:	8f 93       	push	r24
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	8f 93       	push	r24
    39b8:	84 ef       	ldi	r24, 0xF4	; 244
    39ba:	8f 93       	push	r24
    39bc:	8c e9       	ldi	r24, 0x9C	; 156
    39be:	94 e0       	ldi	r25, 0x04	; 4
    39c0:	9f 93       	push	r25
    39c2:	8f 93       	push	r24
    39c4:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    39c8:	0f b6       	in	r0, 0x3f	; 63
    39ca:	f8 94       	cli
    39cc:	de bf       	out	0x3e, r29	; 62
    39ce:	0f be       	out	0x3f, r0	; 63
    39d0:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    39d2:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	63 d3       	rcall	.+1734   	; 0x409e <lora_driver_join>
    39d8:	08 2f       	mov	r16, r24
    39da:	77 d5       	rcall	.+2798   	; 0x44ca <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    39dc:	9f 93       	push	r25
    39de:	8f 93       	push	r24
    39e0:	1f 92       	push	r1
    39e2:	1f 93       	push	r17
    39e4:	8c eb       	ldi	r24, 0xBC	; 188
    39e6:	94 e0       	ldi	r25, 0x04	; 4
    39e8:	9f 93       	push	r25
    39ea:	8f 93       	push	r24
    39ec:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	08 30       	cpi	r16, 0x08	; 8
    39fe:	59 f0       	breq	.+22     	; 0x3a16 <_lora_setup+0x154>
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	0e 94 20 29 	call	0x5240	; 0x5240 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3a06:	66 e3       	ldi	r22, 0x36	; 54
    3a08:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	0e 94 d6 11 	call	0x23ac	; 0x23ac <vTaskDelay>
    3a12:	11 50       	subi	r17, 0x01	; 1
    3a14:	f9 f6       	brne	.-66     	; 0x39d4 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3a16:	08 30       	cpi	r16, 0x08	; 8
    3a18:	21 f4       	brne	.+8      	; 0x3a22 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	0e 94 02 29 	call	0x5204	; 0x5204 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3a20:	09 c0       	rjmp	.+18     	; 0x3a34 <_lora_setup+0x172>
    3a22:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3a24:	0e 94 11 29 	call	0x5222	; 0x5222 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	0e 94 df 28 	call	0x51be	; 0x51be <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3a2e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3a32:	fd cf       	rjmp	.-6      	; 0x3a2e <_lora_setup+0x16c>
    3a34:	64 96       	adiw	r28, 0x14	; 20
    3a36:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3a38:	f8 94       	cli
    3a3a:	de bf       	out	0x3e, r29	; 62
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	cd bf       	out	0x3d, r28	; 61
    3a40:	df 91       	pop	r29
    3a42:	cf 91       	pop	r28
    3a44:	1f 91       	pop	r17
    3a46:	0f 91       	pop	r16
    3a48:	08 95       	ret

00003a4a <lora_handler_task>:
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	b3 d2       	rcall	.+1382   	; 0x3fb4 <lora_driver_resetRn2483>
/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    3a4e:	62 e0       	ldi	r22, 0x02	; 2
    3a50:	70 e0       	ldi	r23, 0x00	; 0
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	0e 94 d6 11 	call	0x23ac	; 0x23ac <vTaskDelay>
	lora_driver_resetRn2483(0);
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	ab d2       	rcall	.+1366   	; 0x3fb4 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3a5e:	66 e9       	ldi	r22, 0x96	; 150
    3a60:	70 e0       	ldi	r23, 0x00	; 0
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0e 94 d6 11 	call	0x23ac	; 0x23ac <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3a6a:	5d d2       	rcall	.+1210   	; 0x3f26 <lora_driver_flushBuffers>

	_lora_setup();
    3a6c:	2a df       	rcall	.-428    	; 0x38c2 <_lora_setup>
    3a6e:	e3 ed       	ldi	r30, 0xD3	; 211

	_uplink_payload.len = 7;
    3a70:	f6 e1       	ldi	r31, 0x16	; 22
    3a72:	87 e0       	ldi	r24, 0x07	; 7
    3a74:	81 83       	std	Z+1, r24	; 0x01
    3a76:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    3a78:	80 83       	st	Z, r24
    3a7a:	0f ef       	ldi	r16, 0xFF	; 255
		uint8_t status = 0;
		size_t xReceivedBytes = 0;
		const TickType_t xWaitingTime = portMAX_DELAY;

		
		xReceivedBytes = xMessageBufferReceive (uplinkBufferHandle,
    3a7c:	1f ef       	ldi	r17, 0xFF	; 255
    3a7e:	98 01       	movw	r18, r16
    3a80:	46 e1       	ldi	r20, 0x16	; 22
    3a82:	50 e0       	ldi	r21, 0x00	; 0
    3a84:	63 ed       	ldi	r22, 0xD3	; 211
    3a86:	76 e1       	ldi	r23, 0x16	; 22
    3a88:	80 91 d1 16 	lds	r24, 0x16D1	; 0x8016d1 <uplinkBufferHandle>
    3a8c:	90 91 d2 16 	lds	r25, 0x16D2	; 0x8016d2 <uplinkBufferHandle+0x1>
    3a90:	0e 94 3c 0c 	call	0x1878	; 0x1878 <xStreamBufferReceive>
    3a94:	89 2b       	or	r24, r25
		&_uplink_payload,
		sizeof(_uplink_payload),
		xWaitingTime);

		if(xReceivedBytes > 0){
    3a96:	89 f3       	breq	.-30     	; 0x3a7a <lora_handler_task+0x30>
    3a98:	e3 ed       	ldi	r30, 0xD3	; 211
			// 				printf("Number of bytes read from the message buffer: %d\n", xReceivedBytes);
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    3a9a:	f6 e1       	ldi	r31, 0x16	; 22
    3a9c:	82 81       	ldd	r24, Z+2	; 0x02
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	98 2f       	mov	r25, r24
    3aa2:	88 27       	eor	r24, r24
    3aa4:	23 81       	ldd	r18, Z+3	; 0x03
    3aa6:	82 2b       	or	r24, r18
    3aa8:	04 81       	ldd	r16, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    3aaa:	10 e0       	ldi	r17, 0x00	; 0
    3aac:	10 2f       	mov	r17, r16
    3aae:	00 27       	eor	r16, r16
    3ab0:	25 81       	ldd	r18, Z+5	; 0x05
    3ab2:	02 2b       	or	r16, r18
    3ab4:	c6 81       	ldd	r28, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    3ab6:	d0 e0       	ldi	r29, 0x00	; 0
    3ab8:	dc 2f       	mov	r29, r28
    3aba:	cc 27       	eor	r28, r28
    3abc:	27 81       	ldd	r18, Z+7	; 0x07
    3abe:	c2 2b       	or	r28, r18
    3ac0:	f0 84       	ldd	r15, Z+8	; 0x08
			status = _uplink_payload.bytes[6];
    3ac2:	9f 93       	push	r25
			
			printf("Temperature sent: %d\n", tem);
    3ac4:	8f 93       	push	r24
    3ac6:	8c ed       	ldi	r24, 0xDC	; 220
    3ac8:	94 e0       	ldi	r25, 0x04	; 4
    3aca:	9f 93       	push	r25
    3acc:	8f 93       	push	r24
    3ace:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    3ad2:	1f 93       	push	r17
			printf("Humidity sent: %d\n", hum);
    3ad4:	0f 93       	push	r16
    3ad6:	82 ef       	ldi	r24, 0xF2	; 242
    3ad8:	94 e0       	ldi	r25, 0x04	; 4
    3ada:	9f 93       	push	r25
    3adc:	8f 93       	push	r24
    3ade:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    3ae2:	df 93       	push	r29
			printf("CO2 sent: %d\n", co2);
    3ae4:	cf 93       	push	r28
    3ae6:	85 e0       	ldi	r24, 0x05	; 5
    3ae8:	95 e0       	ldi	r25, 0x05	; 5
    3aea:	9f 93       	push	r25
    3aec:	8f 93       	push	r24
    3aee:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    3af2:	1f 92       	push	r1
			printf("Status sent: %d\n", status);
    3af4:	ff 92       	push	r15
    3af6:	83 e1       	ldi	r24, 0x13	; 19
    3af8:	95 e0       	ldi	r25, 0x05	; 5
    3afa:	9f 93       	push	r25
    3afc:	8f 93       	push	r24
    3afe:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    3b02:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3b04:	0e 94 32 29 	call	0x5264	; 0x5264 <status_leds_shortPuls>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3b08:	63 ed       	ldi	r22, 0xD3	; 211
    3b0a:	76 e1       	ldi	r23, 0x16	; 22
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	f0 d2       	rcall	.+1504   	; 0x40f0 <lora_driver_sendUploadMessage>
    3b10:	dc d4       	rcall	.+2488   	; 0x44ca <lora_driver_mapReturnCodeToText>
    3b12:	9f 93       	push	r25
    3b14:	8f 93       	push	r24
    3b16:	84 e2       	ldi	r24, 0x24	; 36
    3b18:	95 e0       	ldi	r25, 0x05	; 5
    3b1a:	9f 93       	push	r25
    3b1c:	8f 93       	push	r24
    3b1e:	0e 94 74 33 	call	0x66e8	; 0x66e8 <printf>
    3b22:	8d b7       	in	r24, 0x3d	; 61
    3b24:	9e b7       	in	r25, 0x3e	; 62
    3b26:	44 96       	adiw	r24, 0x14	; 20
    3b28:	0f b6       	in	r0, 0x3f	; 63
    3b2a:	f8 94       	cli
    3b2c:	9e bf       	out	0x3e, r25	; 62
    3b2e:	0f be       	out	0x3f, r0	; 63
    3b30:	8d bf       	out	0x3d, r24	; 61
    3b32:	a3 cf       	rjmp	.-186    	; 0x3a7a <lora_handler_task+0x30>

00003b34 <setUplinkMessageBufferHandle>:
    3b34:	90 93 d2 16 	sts	0x16D2, r25	; 0x8016d2 <uplinkBufferHandle+0x1>

static lora_driver_payload_t _uplink_payload;
static MessageBufferHandle_t uplinkBufferHandle;

void setUplinkMessageBufferHandle(MessageBufferHandle_t uph){
	uplinkBufferHandle = uph;
    3b38:	80 93 d1 16 	sts	0x16D1, r24	; 0x8016d1 <uplinkBufferHandle>
    3b3c:	08 95       	ret

00003b3e <lora_handler_initialise>:
}

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3b3e:	ef 92       	push	r14
    3b40:	ff 92       	push	r15
    3b42:	0f 93       	push	r16
	xTaskCreate(
    3b44:	e1 2c       	mov	r14, r1
    3b46:	f1 2c       	mov	r15, r1
    3b48:	08 2f       	mov	r16, r24
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	48 e8       	ldi	r20, 0x88	; 136
    3b50:	51 e0       	ldi	r21, 0x01	; 1
    3b52:	69 e3       	ldi	r22, 0x39	; 57
    3b54:	75 e0       	ldi	r23, 0x05	; 5
    3b56:	85 e2       	ldi	r24, 0x25	; 37
    3b58:	9d e1       	ldi	r25, 0x1D	; 29
    3b5a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3b5e:	0f 91       	pop	r16
    3b60:	ff 90       	pop	r15
    3b62:	ef 90       	pop	r14
    3b64:	08 95       	ret

00003b66 <initializeSystem>:
/*-----------------------------------------------------------*/
void initializeSystem()
{	

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	0e 94 67 27 	call	0x4ece	; 0x4ece <stdio_initialise>


	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3b6c:	85 e0       	ldi	r24, 0x05	; 5
    3b6e:	0e 94 6e 28 	call	0x50dc	; 0x50dc <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3b72:	60 e0       	ldi	r22, 0x00	; 0
    3b74:	70 e0       	ldi	r23, 0x00	; 0
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	dd d1       	rcall	.+954    	; 0x3f34 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3b7a:	83 e0       	ldi	r24, 0x03	; 3
    3b7c:	e0 df       	rcall	.-64     	; 0x3b3e <lora_handler_initialise>
	
	initialize_application();
    3b7e:	0c 94 08 02 	jmp	0x410	; 0x410 <initialize_application>
    3b82:	08 95       	ret

00003b84 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
    3b84:	f0 df       	rcall	.-32     	; 0x3b66 <initializeSystem>
	printf("Program Started!!\n");
    3b86:	80 e4       	ldi	r24, 0x40	; 64
    3b88:	95 e0       	ldi	r25, 0x05	; 5
    3b8a:	0e 94 88 33 	call	0x6710	; 0x6710 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3b8e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <vTaskStartScheduler>
    3b92:	ff cf       	rjmp	.-2      	; 0x3b92 <main+0xe>

00003b94 <_hihTwiCallback>:
    3b94:	65 30       	cpi	r22, 0x05	; 5
    3b96:	f1 f4       	brne	.+60     	; 0x3bd4 <_hihTwiCallback+0x40>
    3b98:	fa 01       	movw	r30, r20
    3b9a:	80 81       	ld	r24, Z
    3b9c:	8f 73       	andi	r24, 0x3F	; 63
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	98 2f       	mov	r25, r24
    3ba2:	88 27       	eor	r24, r24
    3ba4:	21 81       	ldd	r18, Z+1	; 0x01
    3ba6:	82 2b       	or	r24, r18
    3ba8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3bac:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	f0 e4       	ldi	r31, 0x40	; 64
    3bb4:	8f 9f       	mul	r24, r31
    3bb6:	c0 01       	movw	r24, r0
    3bb8:	11 24       	eor	r1, r1
    3bba:	fa 01       	movw	r30, r20
    3bbc:	23 81       	ldd	r18, Z+3	; 0x03
    3bbe:	26 95       	lsr	r18
    3bc0:	26 95       	lsr	r18
    3bc2:	82 2b       	or	r24, r18
    3bc4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3bc8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	80 93 e9 16 	sts	0x16E9, r24	; 0x8016e9 <_measuringIsReady>
    3bd2:	08 95       	ret
    3bd4:	64 30       	cpi	r22, 0x04	; 4
    3bd6:	51 f0       	breq	.+20     	; 0x3bec <_hihTwiCallback+0x58>
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	90 e4       	ldi	r25, 0x40	; 64
    3bdc:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3be0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3be4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3be8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3bec:	08 95       	ret

00003bee <hih8120_initialise>:
    3bee:	0f 93       	push	r16
    3bf0:	1f 93       	push	r17
    3bf2:	0a ec       	ldi	r16, 0xCA	; 202
    3bf4:	1d e1       	ldi	r17, 0x1D	; 29
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	34 e2       	ldi	r19, 0x24	; 36
    3bfa:	44 ef       	ldi	r20, 0xF4	; 244
    3bfc:	50 e0       	ldi	r21, 0x00	; 0
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	87 e2       	ldi	r24, 0x27	; 39
    3c02:	0e 94 54 29 	call	0x52a8	; 0x52a8 <twiCreate>
    3c06:	90 93 eb 16 	sts	0x16EB, r25	; 0x8016eb <_hih8120Handler+0x1>
    3c0a:	80 93 ea 16 	sts	0x16EA, r24	; 0x8016ea <_hih8120Handler>
    3c0e:	21 e0       	ldi	r18, 0x01	; 1
    3c10:	89 2b       	or	r24, r25
    3c12:	09 f0       	breq	.+2      	; 0x3c16 <hih8120_initialise+0x28>
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	82 2f       	mov	r24, r18
    3c18:	1f 91       	pop	r17
    3c1a:	0f 91       	pop	r16
    3c1c:	08 95       	ret

00003c1e <hih8120_wakeup>:
    3c1e:	80 91 ea 16 	lds	r24, 0x16EA	; 0x8016ea <_hih8120Handler>
    3c22:	90 91 eb 16 	lds	r25, 0x16EB	; 0x8016eb <_hih8120Handler+0x1>
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	59 f0       	breq	.+22     	; 0x3c40 <hih8120_wakeup+0x22>
    3c2a:	40 e0       	ldi	r20, 0x00	; 0
    3c2c:	60 e0       	ldi	r22, 0x00	; 0
    3c2e:	70 e0       	ldi	r23, 0x00	; 0
    3c30:	0e 94 a5 29 	call	0x534a	; 0x534a <twiTransmit>
    3c34:	84 30       	cpi	r24, 0x04	; 4
    3c36:	31 f4       	brne	.+12     	; 0x3c44 <hih8120_wakeup+0x26>
    3c38:	10 92 e9 16 	sts	0x16E9, r1	; 0x8016e9 <_measuringIsReady>
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	08 95       	ret
    3c40:	82 e0       	ldi	r24, 0x02	; 2
    3c42:	08 95       	ret
    3c44:	83 e0       	ldi	r24, 0x03	; 3
    3c46:	08 95       	ret

00003c48 <hih8120_measure>:
    3c48:	80 91 ea 16 	lds	r24, 0x16EA	; 0x8016ea <_hih8120Handler>
    3c4c:	90 91 eb 16 	lds	r25, 0x16EB	; 0x8016eb <_hih8120Handler+0x1>
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	39 f0       	breq	.+14     	; 0x3c62 <hih8120_measure+0x1a>
    3c54:	64 e0       	ldi	r22, 0x04	; 4
    3c56:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <twiReceive>
    3c5a:	85 30       	cpi	r24, 0x05	; 5
    3c5c:	21 f0       	breq	.+8      	; 0x3c66 <hih8120_measure+0x1e>
    3c5e:	83 e0       	ldi	r24, 0x03	; 3
    3c60:	08 95       	ret
    3c62:	82 e0       	ldi	r24, 0x02	; 2
    3c64:	08 95       	ret
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	08 95       	ret

00003c6a <hih8120_getHumidity>:
    3c6a:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3c6e:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__floatunsisf>
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	48 ec       	ldi	r20, 0xC8	; 200
    3c80:	52 e4       	ldi	r21, 0x42	; 66
    3c82:	0e 94 12 30 	call	0x6024	; 0x6024 <__mulsf3>
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	38 ef       	ldi	r19, 0xF8	; 248
    3c8a:	4f e7       	ldi	r20, 0x7F	; 127
    3c8c:	56 e4       	ldi	r21, 0x46	; 70
    3c8e:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__divsf3>
    3c92:	08 95       	ret

00003c94 <hih8120_getHumidityPercent_x10>:
    3c94:	ea df       	rcall	.-44     	; 0x3c6a <hih8120_getHumidity>
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	40 e2       	ldi	r20, 0x20	; 32
    3c9c:	51 e4       	ldi	r21, 0x41	; 65
    3c9e:	0e 94 12 30 	call	0x6024	; 0x6024 <__mulsf3>
    3ca2:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__fixunssfsi>
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	08 95       	ret

00003caa <hih8120_getTemperature>:
    3caa:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3cae:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__floatunsisf>
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	45 e2       	ldi	r20, 0x25	; 37
    3cc0:	53 e4       	ldi	r21, 0x43	; 67
    3cc2:	0e 94 12 30 	call	0x6024	; 0x6024 <__mulsf3>
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	38 ef       	ldi	r19, 0xF8	; 248
    3cca:	4f e7       	ldi	r20, 0x7F	; 127
    3ccc:	56 e4       	ldi	r21, 0x46	; 70
    3cce:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <__divsf3>
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	40 e2       	ldi	r20, 0x20	; 32
    3cd8:	52 e4       	ldi	r21, 0x42	; 66
    3cda:	0c 94 86 2e 	jmp	0x5d0c	; 0x5d0c <__subsf3>
    3cde:	08 95       	ret

00003ce0 <hih8120_getTemperature_x10>:
    3ce0:	e4 df       	rcall	.-56     	; 0x3caa <hih8120_getTemperature>
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	40 e2       	ldi	r20, 0x20	; 32
    3ce8:	51 e4       	ldi	r21, 0x41	; 65
    3cea:	0e 94 12 30 	call	0x6024	; 0x6024 <__mulsf3>
    3cee:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <__fixsfsi>
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	08 95       	ret

00003cf6 <_serialCallBack>:
    3cf6:	0f 93       	push	r16
    3cf8:	1f 93       	push	r17
    3cfa:	cf 93       	push	r28
    3cfc:	df 93       	push	r29
    3cfe:	1f 92       	push	r1
    3d00:	1f 92       	push	r1
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	8c 01       	movw	r16, r24
    3d08:	19 82       	std	Y+1, r1	; 0x01
    3d0a:	2d c0       	rjmp	.+90     	; 0x3d66 <_serialCallBack+0x70>
    3d0c:	e0 91 23 17 	lds	r30, 0x1723	; 0x801723 <rec_buf_inp.2878>
    3d10:	ec 32       	cpi	r30, 0x2C	; 44
    3d12:	50 f4       	brcc	.+20     	; 0x3d28 <_serialCallBack+0x32>
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	8e 0f       	add	r24, r30
    3d18:	80 93 23 17 	sts	0x1723, r24	; 0x801723 <rec_buf_inp.2878>
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	eb 5a       	subi	r30, 0xAB	; 171
    3d20:	f8 4e       	sbci	r31, 0xE8	; 232
    3d22:	8a 81       	ldd	r24, Y+2	; 0x02
    3d24:	80 83       	st	Z, r24
    3d26:	02 c0       	rjmp	.+4      	; 0x3d2c <_serialCallBack+0x36>
    3d28:	10 92 23 17 	sts	0x1723, r1	; 0x801723 <rec_buf_inp.2878>
    3d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2e:	8a 30       	cpi	r24, 0x0A	; 10
    3d30:	d1 f4       	brne	.+52     	; 0x3d66 <_serialCallBack+0x70>
    3d32:	40 91 23 17 	lds	r20, 0x1723	; 0x801723 <rec_buf_inp.2878>
    3d36:	50 e0       	ldi	r21, 0x00	; 0
    3d38:	fa 01       	movw	r30, r20
    3d3a:	ed 5a       	subi	r30, 0xAD	; 173
    3d3c:	f8 4e       	sbci	r31, 0xE8	; 232
    3d3e:	10 82       	st	Z, r1
    3d40:	41 50       	subi	r20, 0x01	; 1
    3d42:	51 09       	sbc	r21, r1
    3d44:	9e 01       	movw	r18, r28
    3d46:	2f 5f       	subi	r18, 0xFF	; 255
    3d48:	3f 4f       	sbci	r19, 0xFF	; 255
    3d4a:	65 e5       	ldi	r22, 0x55	; 85
    3d4c:	77 e1       	ldi	r23, 0x17	; 23
    3d4e:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <_serialReplyBufferHandle>
    3d52:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <_serialReplyBufferHandle+0x1>
    3d56:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xStreamBufferSendFromISR>
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	81 11       	cpse	r24, r1
    3d5e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <vPortYield>
    3d62:	10 92 23 17 	sts	0x1723, r1	; 0x801723 <rec_buf_inp.2878>
    3d66:	be 01       	movw	r22, r28
    3d68:	6e 5f       	subi	r22, 0xFE	; 254
    3d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6c:	c8 01       	movw	r24, r16
    3d6e:	19 d6       	rcall	.+3122   	; 0x49a2 <serial_getByte>
    3d70:	88 23       	and	r24, r24
    3d72:	61 f2       	breq	.-104    	; 0x3d0c <_serialCallBack+0x16>
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	df 91       	pop	r29
    3d7a:	cf 91       	pop	r28
    3d7c:	1f 91       	pop	r17
    3d7e:	0f 91       	pop	r16
    3d80:	08 95       	ret

00003d82 <_uploadMessage>:
    3d82:	0f 93       	push	r16
    3d84:	1f 93       	push	r17
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	8c 01       	movw	r16, r24
    3d8c:	eb 01       	movw	r28, r22
    3d8e:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <_serialReplyBufferHandle>
    3d92:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <_serialReplyBufferHandle+0x1>
    3d96:	0e 94 03 0b 	call	0x1606	; 0x1606 <xStreamBufferReset>
    3d9a:	b8 01       	movw	r22, r16
    3d9c:	8c ee       	ldi	r24, 0xEC	; 236
    3d9e:	96 e1       	ldi	r25, 0x16	; 22
    3da0:	0e 94 0e 33 	call	0x661c	; 0x661c <strcpy>
    3da4:	20 97       	sbiw	r28, 0x00	; 0
    3da6:	79 f0       	breq	.+30     	; 0x3dc6 <_uploadMessage+0x44>
    3da8:	ec ee       	ldi	r30, 0xEC	; 236
    3daa:	f6 e1       	ldi	r31, 0x16	; 22
    3dac:	01 90       	ld	r0, Z+
    3dae:	00 20       	and	r0, r0
    3db0:	e9 f7       	brne	.-6      	; 0x3dac <_uploadMessage+0x2a>
    3db2:	31 97       	sbiw	r30, 0x01	; 1
    3db4:	80 e2       	ldi	r24, 0x20	; 32
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	80 83       	st	Z, r24
    3dbc:	be 01       	movw	r22, r28
    3dbe:	8c ee       	ldi	r24, 0xEC	; 236
    3dc0:	96 e1       	ldi	r25, 0x16	; 22
    3dc2:	0e 94 03 33 	call	0x6606	; 0x6606 <strcat>
    3dc6:	ec ee       	ldi	r30, 0xEC	; 236
    3dc8:	f6 e1       	ldi	r31, 0x16	; 22
    3dca:	df 01       	movw	r26, r30
    3dcc:	0d 90       	ld	r0, X+
    3dce:	00 20       	and	r0, r0
    3dd0:	e9 f7       	brne	.-6      	; 0x3dcc <_uploadMessage+0x4a>
    3dd2:	11 97       	sbiw	r26, 0x01	; 1
    3dd4:	8d e0       	ldi	r24, 0x0D	; 13
    3dd6:	9a e0       	ldi	r25, 0x0A	; 10
    3dd8:	11 96       	adiw	r26, 0x01	; 1
    3dda:	9c 93       	st	X, r25
    3ddc:	8e 93       	st	-X, r24
    3dde:	12 96       	adiw	r26, 0x02	; 2
    3de0:	1c 92       	st	X, r1
    3de2:	01 90       	ld	r0, Z+
    3de4:	00 20       	and	r0, r0
    3de6:	e9 f7       	brne	.-6      	; 0x3de2 <_uploadMessage+0x60>
    3de8:	31 97       	sbiw	r30, 0x01	; 1
    3dea:	ec 5e       	subi	r30, 0xEC	; 236
    3dec:	f6 41       	sbci	r31, 0x16	; 22
    3dee:	ae 2f       	mov	r26, r30
    3df0:	8c ee       	ldi	r24, 0xEC	; 236
    3df2:	96 e1       	ldi	r25, 0x16	; 22
    3df4:	ac 01       	movw	r20, r24
    3df6:	6a 2f       	mov	r22, r26
    3df8:	80 91 28 17 	lds	r24, 0x1728	; 0x801728 <_rn2483_serial>
    3dfc:	90 91 29 17 	lds	r25, 0x1729	; 0x801729 <_rn2483_serial+0x1>
    3e00:	7b d5       	rcall	.+2806   	; 0x48f8 <serial_sendBytes>
    3e02:	81 11       	cpse	r24, r1
    3e04:	11 c0       	rjmp	.+34     	; 0x3e28 <_uploadMessage+0xa6>
    3e06:	08 e2       	ldi	r16, 0x28	; 40
    3e08:	15 e0       	ldi	r17, 0x05	; 5
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	4d e2       	ldi	r20, 0x2D	; 45
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	6f ea       	ldi	r22, 0xAF	; 175
    3e14:	77 e1       	ldi	r23, 0x17	; 23
    3e16:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <_serialReplyBufferHandle>
    3e1a:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <_serialReplyBufferHandle+0x1>
    3e1e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <xStreamBufferReceive>
    3e22:	8f ea       	ldi	r24, 0xAF	; 175
    3e24:	97 e1       	ldi	r25, 0x17	; 23
    3e26:	02 c0       	rjmp	.+4      	; 0x3e2c <_uploadMessage+0xaa>
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	08 95       	ret

00003e36 <_reply2ReturnCode>:
    3e36:	2f 92       	push	r2
    3e38:	3f 92       	push	r3
    3e3a:	4f 92       	push	r4
    3e3c:	5f 92       	push	r5
    3e3e:	6f 92       	push	r6
    3e40:	7f 92       	push	r7
    3e42:	8f 92       	push	r8
    3e44:	9f 92       	push	r9
    3e46:	af 92       	push	r10
    3e48:	bf 92       	push	r11
    3e4a:	cf 92       	push	r12
    3e4c:	df 92       	push	r13
    3e4e:	ef 92       	push	r14
    3e50:	ff 92       	push	r15
    3e52:	0f 93       	push	r16
    3e54:	1f 93       	push	r17
    3e56:	cf 93       	push	r28
    3e58:	df 93       	push	r29
    3e5a:	5c 01       	movw	r10, r24
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	01 90       	ld	r0, Z+
    3e60:	00 20       	and	r0, r0
    3e62:	e9 f7       	brne	.-6      	; 0x3e5e <_reply2ReturnCode+0x28>
    3e64:	31 97       	sbiw	r30, 0x01	; 1
    3e66:	6f 01       	movw	r12, r30
    3e68:	c8 1a       	sub	r12, r24
    3e6a:	d9 0a       	sbc	r13, r25
    3e6c:	5c 2c       	mov	r5, r12
    3e6e:	0f 2e       	mov	r0, r31
    3e70:	fb ee       	ldi	r31, 0xEB	; 235
    3e72:	8f 2e       	mov	r8, r31
    3e74:	f7 e0       	ldi	r31, 0x07	; 7
    3e76:	9f 2e       	mov	r9, r31
    3e78:	f0 2d       	mov	r31, r0
    3e7a:	e1 2c       	mov	r14, r1
    3e7c:	f1 2c       	mov	r15, r1
    3e7e:	4c 2c       	mov	r4, r12
    3e80:	37 01       	movw	r6, r14
    3e82:	f4 01       	movw	r30, r8
    3e84:	01 81       	ldd	r16, Z+1	; 0x01
    3e86:	12 81       	ldd	r17, Z+2	; 0x02
    3e88:	e8 01       	movw	r28, r16
    3e8a:	09 90       	ld	r0, Y+
    3e8c:	00 20       	and	r0, r0
    3e8e:	e9 f7       	brne	.-6      	; 0x3e8a <_reply2ReturnCode+0x54>
    3e90:	21 97       	sbiw	r28, 0x01	; 1
    3e92:	c0 1b       	sub	r28, r16
    3e94:	d1 0b       	sbc	r29, r17
    3e96:	3c 2e       	mov	r3, r28
    3e98:	f9 e0       	ldi	r31, 0x09	; 9
    3e9a:	cf 16       	cp	r12, r31
    3e9c:	d1 04       	cpc	r13, r1
    3e9e:	58 f0       	brcs	.+22     	; 0x3eb6 <_reply2ReturnCode+0x80>
    3ea0:	f4 01       	movw	r30, r8
    3ea2:	20 80       	ld	r2, Z
    3ea4:	fe e0       	ldi	r31, 0x0E	; 14
    3ea6:	2f 12       	cpse	r2, r31
    3ea8:	06 c0       	rjmp	.+12     	; 0x3eb6 <_reply2ReturnCode+0x80>
    3eaa:	b8 01       	movw	r22, r16
    3eac:	c5 01       	movw	r24, r10
    3eae:	0e 94 de 32 	call	0x65bc	; 0x65bc <strcasestr>
    3eb2:	89 2b       	or	r24, r25
    3eb4:	09 f5       	brne	.+66     	; 0x3ef8 <_reply2ReturnCode+0xc2>
    3eb6:	44 2d       	mov	r20, r4
    3eb8:	35 14       	cp	r3, r5
    3eba:	08 f4       	brcc	.+2      	; 0x3ebe <_reply2ReturnCode+0x88>
    3ebc:	4c 2f       	mov	r20, r28
    3ebe:	50 e0       	ldi	r21, 0x00	; 0
    3ec0:	b8 01       	movw	r22, r16
    3ec2:	c5 01       	movw	r24, r10
    3ec4:	0e 94 15 33 	call	0x662a	; 0x662a <strncasecmp>
    3ec8:	89 2b       	or	r24, r25
    3eca:	49 f4       	brne	.+18     	; 0x3ede <_reply2ReturnCode+0xa8>
    3ecc:	f3 01       	movw	r30, r6
    3ece:	ee 0f       	add	r30, r30
    3ed0:	ff 1f       	adc	r31, r31
    3ed2:	e6 0d       	add	r30, r6
    3ed4:	f7 1d       	adc	r31, r7
    3ed6:	e5 51       	subi	r30, 0x15	; 21
    3ed8:	f8 4f       	sbci	r31, 0xF8	; 248
    3eda:	20 80       	ld	r2, Z
    3edc:	0d c0       	rjmp	.+26     	; 0x3ef8 <_reply2ReturnCode+0xc2>
    3ede:	8f ef       	ldi	r24, 0xFF	; 255
    3ee0:	e8 1a       	sub	r14, r24
    3ee2:	f8 0a       	sbc	r15, r24
    3ee4:	e3 e0       	ldi	r30, 0x03	; 3
    3ee6:	8e 0e       	add	r8, r30
    3ee8:	91 1c       	adc	r9, r1
    3eea:	f1 e1       	ldi	r31, 0x11	; 17
    3eec:	ef 16       	cp	r14, r31
    3eee:	f1 04       	cpc	r15, r1
    3ef0:	39 f6       	brne	.-114    	; 0x3e80 <_reply2ReturnCode+0x4a>
    3ef2:	68 94       	set
    3ef4:	22 24       	eor	r2, r2
    3ef6:	24 f8       	bld	r2, 4
    3ef8:	82 2d       	mov	r24, r2
    3efa:	df 91       	pop	r29
    3efc:	cf 91       	pop	r28
    3efe:	1f 91       	pop	r17
    3f00:	0f 91       	pop	r16
    3f02:	ff 90       	pop	r15
    3f04:	ef 90       	pop	r14
    3f06:	df 90       	pop	r13
    3f08:	cf 90       	pop	r12
    3f0a:	bf 90       	pop	r11
    3f0c:	af 90       	pop	r10
    3f0e:	9f 90       	pop	r9
    3f10:	8f 90       	pop	r8
    3f12:	7f 90       	pop	r7
    3f14:	6f 90       	pop	r6
    3f16:	5f 90       	pop	r5
    3f18:	4f 90       	pop	r4
    3f1a:	3f 90       	pop	r3
    3f1c:	2f 90       	pop	r2
    3f1e:	08 95       	ret

00003f20 <_uploadMessageRc>:
    3f20:	30 df       	rcall	.-416    	; 0x3d82 <_uploadMessage>
    3f22:	89 cf       	rjmp	.-238    	; 0x3e36 <_reply2ReturnCode>
    3f24:	08 95       	ret

00003f26 <lora_driver_flushBuffers>:
    3f26:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <_serialReplyBufferHandle>
    3f2a:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <_serialReplyBufferHandle+0x1>
    3f2e:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <xStreamBufferReset>
    3f32:	08 95       	ret

00003f34 <lora_driver_initialise>:
    3f34:	8f 92       	push	r8
    3f36:	9f 92       	push	r9
    3f38:	af 92       	push	r10
    3f3a:	cf 92       	push	r12
    3f3c:	ef 92       	push	r14
    3f3e:	0f 93       	push	r16
    3f40:	1f 93       	push	r17
    3f42:	cf 93       	push	r28
    3f44:	c8 2f       	mov	r28, r24
    3f46:	8b 01       	movw	r16, r22
    3f48:	41 e0       	ldi	r20, 0x01	; 1
    3f4a:	60 e0       	ldi	r22, 0x00	; 0
    3f4c:	70 e0       	ldi	r23, 0x00	; 0
    3f4e:	88 ec       	ldi	r24, 0xC8	; 200
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <xStreamBufferGenericCreate>
    3f56:	90 93 27 17 	sts	0x1727, r25	; 0x801727 <_serialReplyBufferHandle+0x1>
    3f5a:	80 93 26 17 	sts	0x1726, r24	; 0x801726 <_serialReplyBufferHandle>
    3f5e:	10 93 25 17 	sts	0x1725, r17	; 0x801725 <_downlinkMessageBuffer+0x1>
    3f62:	00 93 24 17 	sts	0x1724, r16	; 0x801724 <_downlinkMessageBuffer>
    3f66:	0f 2e       	mov	r0, r31
    3f68:	fb e7       	ldi	r31, 0x7B	; 123
    3f6a:	8f 2e       	mov	r8, r31
    3f6c:	fe e1       	ldi	r31, 0x1E	; 30
    3f6e:	9f 2e       	mov	r9, r31
    3f70:	f0 2d       	mov	r31, r0
    3f72:	68 94       	set
    3f74:	aa 24       	eor	r10, r10
    3f76:	a6 f8       	bld	r10, 6
    3f78:	68 94       	set
    3f7a:	cc 24       	eor	r12, r12
    3f7c:	c6 f8       	bld	r12, 6
    3f7e:	e1 2c       	mov	r14, r1
    3f80:	00 e0       	ldi	r16, 0x00	; 0
    3f82:	23 e0       	ldi	r18, 0x03	; 3
    3f84:	40 e0       	ldi	r20, 0x00	; 0
    3f86:	51 ee       	ldi	r21, 0xE1	; 225
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	70 e0       	ldi	r23, 0x00	; 0
    3f8c:	8c 2f       	mov	r24, r28
    3f8e:	e3 d3       	rcall	.+1990   	; 0x4756 <serial_create>
    3f90:	90 93 29 17 	sts	0x1729, r25	; 0x801729 <_rn2483_serial+0x1>
    3f94:	80 93 28 17 	sts	0x1728, r24	; 0x801728 <_rn2483_serial>
    3f98:	e7 e0       	ldi	r30, 0x07	; 7
    3f9a:	f1 e0       	ldi	r31, 0x01	; 1
    3f9c:	80 81       	ld	r24, Z
    3f9e:	80 61       	ori	r24, 0x10	; 16
    3fa0:	80 83       	st	Z, r24
    3fa2:	cf 91       	pop	r28
    3fa4:	1f 91       	pop	r17
    3fa6:	0f 91       	pop	r16
    3fa8:	ef 90       	pop	r14
    3faa:	cf 90       	pop	r12
    3fac:	af 90       	pop	r10
    3fae:	9f 90       	pop	r9
    3fb0:	8f 90       	pop	r8
    3fb2:	08 95       	ret

00003fb4 <lora_driver_resetRn2483>:
    3fb4:	88 23       	and	r24, r24
    3fb6:	31 f0       	breq	.+12     	; 0x3fc4 <lora_driver_resetRn2483+0x10>
    3fb8:	e8 e0       	ldi	r30, 0x08	; 8
    3fba:	f1 e0       	ldi	r31, 0x01	; 1
    3fbc:	80 81       	ld	r24, Z
    3fbe:	8f 7e       	andi	r24, 0xEF	; 239
    3fc0:	80 83       	st	Z, r24
    3fc2:	08 95       	ret
    3fc4:	e8 e0       	ldi	r30, 0x08	; 8
    3fc6:	f1 e0       	ldi	r31, 0x01	; 1
    3fc8:	80 81       	ld	r24, Z
    3fca:	80 61       	ori	r24, 0x10	; 16
    3fcc:	80 83       	st	Z, r24
    3fce:	08 95       	ret

00003fd0 <lora_driver_rn2483FactoryReset>:
    3fd0:	60 e0       	ldi	r22, 0x00	; 0
    3fd2:	70 e0       	ldi	r23, 0x00	; 0
    3fd4:	81 e7       	ldi	r24, 0x71	; 113
    3fd6:	95 e0       	ldi	r25, 0x05	; 5
    3fd8:	d4 de       	rcall	.-600    	; 0x3d82 <_uploadMessage>
    3fda:	ef ea       	ldi	r30, 0xAF	; 175
    3fdc:	f7 e1       	ldi	r31, 0x17	; 23
    3fde:	01 90       	ld	r0, Z+
    3fe0:	00 20       	and	r0, r0
    3fe2:	e9 f7       	brne	.-6      	; 0x3fde <lora_driver_rn2483FactoryReset+0xe>
    3fe4:	31 97       	sbiw	r30, 0x01	; 1
    3fe6:	ef 5a       	subi	r30, 0xAF	; 175
    3fe8:	f7 41       	sbci	r31, 0x17	; 23
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	75 97       	sbiw	r30, 0x15	; 21
    3fee:	08 f0       	brcs	.+2      	; 0x3ff2 <lora_driver_rn2483FactoryReset+0x22>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	08 95       	ret

00003ff4 <lora_driver_getRn2483Hweui>:
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
    3ff8:	ec 01       	movw	r28, r24
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	82 e8       	ldi	r24, 0x82	; 130
    4000:	95 e0       	ldi	r25, 0x05	; 5
    4002:	bf de       	rcall	.-642    	; 0x3d82 <_uploadMessage>
    4004:	ef ea       	ldi	r30, 0xAF	; 175
    4006:	f7 e1       	ldi	r31, 0x17	; 23
    4008:	01 90       	ld	r0, Z+
    400a:	00 20       	and	r0, r0
    400c:	e9 f7       	brne	.-6      	; 0x4008 <lora_driver_getRn2483Hweui+0x14>
    400e:	e0 5c       	subi	r30, 0xC0	; 192
    4010:	f7 41       	sbci	r31, 0x17	; 23
    4012:	39 f4       	brne	.+14     	; 0x4022 <lora_driver_getRn2483Hweui+0x2e>
    4014:	6f ea       	ldi	r22, 0xAF	; 175
    4016:	77 e1       	ldi	r23, 0x17	; 23
    4018:	ce 01       	movw	r24, r28
    401a:	0e 94 0e 33 	call	0x661c	; 0x661c <strcpy>
    401e:	80 e0       	ldi	r24, 0x00	; 0
    4020:	02 c0       	rjmp	.+4      	; 0x4026 <lora_driver_getRn2483Hweui+0x32>
    4022:	18 82       	st	Y, r1
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	df 91       	pop	r29
    4028:	cf 91       	pop	r28
    402a:	08 95       	ret

0000402c <lora_driver_setDeviceIdentifier>:
    402c:	fc 01       	movw	r30, r24
    402e:	01 90       	ld	r0, Z+
    4030:	00 20       	and	r0, r0
    4032:	e9 f7       	brne	.-6      	; 0x402e <lora_driver_setDeviceIdentifier+0x2>
    4034:	9f 01       	movw	r18, r30
    4036:	21 51       	subi	r18, 0x11	; 17
    4038:	31 09       	sbc	r19, r1
    403a:	28 17       	cp	r18, r24
    403c:	39 07       	cpc	r19, r25
    403e:	29 f4       	brne	.+10     	; 0x404a <lora_driver_setDeviceIdentifier+0x1e>
    4040:	bc 01       	movw	r22, r24
    4042:	80 eb       	ldi	r24, 0xB0	; 176
    4044:	95 e0       	ldi	r25, 0x05	; 5
    4046:	6c cf       	rjmp	.-296    	; 0x3f20 <_uploadMessageRc>
    4048:	08 95       	ret
    404a:	89 e0       	ldi	r24, 0x09	; 9
    404c:	08 95       	ret

0000404e <lora_driver_setApplicationIdentifier>:
    404e:	fc 01       	movw	r30, r24
    4050:	01 90       	ld	r0, Z+
    4052:	00 20       	and	r0, r0
    4054:	e9 f7       	brne	.-6      	; 0x4050 <lora_driver_setApplicationIdentifier+0x2>
    4056:	9f 01       	movw	r18, r30
    4058:	21 51       	subi	r18, 0x11	; 17
    405a:	31 09       	sbc	r19, r1
    405c:	28 17       	cp	r18, r24
    405e:	39 07       	cpc	r19, r25
    4060:	29 f4       	brne	.+10     	; 0x406c <lora_driver_setApplicationIdentifier+0x1e>
    4062:	bc 01       	movw	r22, r24
    4064:	8f eb       	ldi	r24, 0xBF	; 191
    4066:	95 e0       	ldi	r25, 0x05	; 5
    4068:	5b cf       	rjmp	.-330    	; 0x3f20 <_uploadMessageRc>
    406a:	08 95       	ret
    406c:	89 e0       	ldi	r24, 0x09	; 9
    406e:	08 95       	ret

00004070 <lora_driver_setApplicationKey>:
    4070:	fc 01       	movw	r30, r24
    4072:	01 90       	ld	r0, Z+
    4074:	00 20       	and	r0, r0
    4076:	e9 f7       	brne	.-6      	; 0x4072 <lora_driver_setApplicationKey+0x2>
    4078:	9f 01       	movw	r18, r30
    407a:	21 52       	subi	r18, 0x21	; 33
    407c:	31 09       	sbc	r19, r1
    407e:	28 17       	cp	r18, r24
    4080:	39 07       	cpc	r19, r25
    4082:	29 f4       	brne	.+10     	; 0x408e <lora_driver_setApplicationKey+0x1e>
    4084:	bc 01       	movw	r22, r24
    4086:	8e ec       	ldi	r24, 0xCE	; 206
    4088:	95 e0       	ldi	r25, 0x05	; 5
    408a:	4a cf       	rjmp	.-364    	; 0x3f20 <_uploadMessageRc>
    408c:	08 95       	ret
    408e:	89 e0       	ldi	r24, 0x09	; 9
    4090:	08 95       	ret

00004092 <lora_driver_saveMac>:
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	70 e0       	ldi	r23, 0x00	; 0
    4096:	8d e0       	ldi	r24, 0x0D	; 13
    4098:	96 e0       	ldi	r25, 0x06	; 6
    409a:	42 cf       	rjmp	.-380    	; 0x3f20 <_uploadMessageRc>
    409c:	08 95       	ret

0000409e <lora_driver_join>:
    409e:	0f 93       	push	r16
    40a0:	1f 93       	push	r17
    40a2:	e8 2f       	mov	r30, r24
    40a4:	f0 e0       	ldi	r31, 0x00	; 0
    40a6:	ee 0f       	add	r30, r30
    40a8:	ff 1f       	adc	r31, r31
    40aa:	e9 51       	subi	r30, 0x19	; 25
    40ac:	f8 4f       	sbci	r31, 0xF8	; 248
    40ae:	60 81       	ld	r22, Z
    40b0:	71 81       	ldd	r23, Z+1	; 0x01
    40b2:	86 e1       	ldi	r24, 0x16	; 22
    40b4:	96 e0       	ldi	r25, 0x06	; 6
    40b6:	34 df       	rcall	.-408    	; 0x3f20 <_uploadMessageRc>
    40b8:	81 11       	cpse	r24, r1
    40ba:	14 c0       	rjmp	.+40     	; 0x40e4 <lora_driver_join+0x46>
    40bc:	08 e2       	ldi	r16, 0x28	; 40
    40be:	15 e0       	ldi	r17, 0x05	; 5
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	4d e2       	ldi	r20, 0x2D	; 45
    40c6:	50 e0       	ldi	r21, 0x00	; 0
    40c8:	6f ea       	ldi	r22, 0xAF	; 175
    40ca:	77 e1       	ldi	r23, 0x17	; 23
    40cc:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <_serialReplyBufferHandle>
    40d0:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <_serialReplyBufferHandle+0x1>
    40d4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <xStreamBufferReceive>
    40d8:	88 23       	and	r24, r24
    40da:	21 f0       	breq	.+8      	; 0x40e4 <lora_driver_join+0x46>
    40dc:	8f ea       	ldi	r24, 0xAF	; 175
    40de:	97 e1       	ldi	r25, 0x17	; 23
    40e0:	aa de       	rcall	.-684    	; 0x3e36 <_reply2ReturnCode>
    40e2:	03 c0       	rjmp	.+6      	; 0x40ea <lora_driver_join+0x4c>
    40e4:	8f ea       	ldi	r24, 0xAF	; 175
    40e6:	97 e1       	ldi	r25, 0x17	; 23
    40e8:	a6 de       	rcall	.-692    	; 0x3e36 <_reply2ReturnCode>
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	08 95       	ret

000040f0 <lora_driver_sendUploadMessage>:
    40f0:	0f 93       	push	r16
    40f2:	1f 93       	push	r17
    40f4:	cf 93       	push	r28
    40f6:	df 93       	push	r29
    40f8:	1f 92       	push	r1
    40fa:	cd b7       	in	r28, 0x3d	; 61
    40fc:	de b7       	in	r29, 0x3e	; 62
    40fe:	db 01       	movw	r26, r22
    4100:	11 96       	adiw	r26, 0x01	; 1
    4102:	9c 91       	ld	r25, X
    4104:	11 97       	sbiw	r26, 0x01	; 1
    4106:	95 31       	cpi	r25, 0x15	; 21
    4108:	08 f0       	brcs	.+2      	; 0x410c <lora_driver_sendUploadMessage+0x1c>
    410a:	b4 c0       	rjmp	.+360    	; 0x4274 <lora_driver_sendUploadMessage+0x184>
    410c:	99 23       	and	r25, r25
    410e:	81 f1       	breq	.+96     	; 0x4170 <lora_driver_sendUploadMessage+0x80>
    4110:	60 e0       	ldi	r22, 0x00	; 0
    4112:	70 e0       	ldi	r23, 0x00	; 0
    4114:	27 2f       	mov	r18, r23
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	46 2f       	mov	r20, r22
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	fd 01       	movw	r30, r26
    411e:	e4 0f       	add	r30, r20
    4120:	f5 1f       	adc	r31, r21
    4122:	92 81       	ldd	r25, Z+2	; 0x02
    4124:	92 95       	swap	r25
    4126:	9f 70       	andi	r25, 0x0F	; 15
    4128:	9a 30       	cpi	r25, 0x0A	; 10
    412a:	10 f0       	brcs	.+4      	; 0x4130 <lora_driver_sendUploadMessage+0x40>
    412c:	99 5c       	subi	r25, 0xC9	; 201
    412e:	01 c0       	rjmp	.+2      	; 0x4132 <lora_driver_sendUploadMessage+0x42>
    4130:	90 5d       	subi	r25, 0xD0	; 208
    4132:	f9 01       	movw	r30, r18
    4134:	e0 5c       	subi	r30, 0xC0	; 192
    4136:	f8 4e       	sbci	r31, 0xE8	; 232
    4138:	90 83       	st	Z, r25
    413a:	2f 5f       	subi	r18, 0xFF	; 255
    413c:	3f 4f       	sbci	r19, 0xFF	; 255
    413e:	fd 01       	movw	r30, r26
    4140:	e4 0f       	add	r30, r20
    4142:	f5 1f       	adc	r31, r21
    4144:	92 81       	ldd	r25, Z+2	; 0x02
    4146:	9f 70       	andi	r25, 0x0F	; 15
    4148:	49 2f       	mov	r20, r25
    414a:	50 e0       	ldi	r21, 0x00	; 0
    414c:	4a 30       	cpi	r20, 0x0A	; 10
    414e:	51 05       	cpc	r21, r1
    4150:	14 f0       	brlt	.+4      	; 0x4156 <lora_driver_sendUploadMessage+0x66>
    4152:	99 5c       	subi	r25, 0xC9	; 201
    4154:	01 c0       	rjmp	.+2      	; 0x4158 <lora_driver_sendUploadMessage+0x68>
    4156:	90 5d       	subi	r25, 0xD0	; 208
    4158:	f9 01       	movw	r30, r18
    415a:	e0 5c       	subi	r30, 0xC0	; 192
    415c:	f8 4e       	sbci	r31, 0xE8	; 232
    415e:	90 83       	st	Z, r25
    4160:	7e 5f       	subi	r23, 0xFE	; 254
    4162:	6f 5f       	subi	r22, 0xFF	; 255
    4164:	11 96       	adiw	r26, 0x01	; 1
    4166:	9c 91       	ld	r25, X
    4168:	11 97       	sbiw	r26, 0x01	; 1
    416a:	69 17       	cp	r22, r25
    416c:	98 f2       	brcs	.-90     	; 0x4114 <lora_driver_sendUploadMessage+0x24>
    416e:	01 c0       	rjmp	.+2      	; 0x4172 <lora_driver_sendUploadMessage+0x82>
    4170:	70 e0       	ldi	r23, 0x00	; 0
    4172:	e7 2f       	mov	r30, r23
    4174:	f0 e0       	ldi	r31, 0x00	; 0
    4176:	e0 5c       	subi	r30, 0xC0	; 192
    4178:	f8 4e       	sbci	r31, 0xE8	; 232
    417a:	10 82       	st	Z, r1
    417c:	4c 91       	ld	r20, X
    417e:	81 11       	cpse	r24, r1
    4180:	03 c0       	rjmp	.+6      	; 0x4188 <lora_driver_sendUploadMessage+0x98>
    4182:	8f e1       	ldi	r24, 0x1F	; 31
    4184:	96 e0       	ldi	r25, 0x06	; 6
    4186:	02 c0       	rjmp	.+4      	; 0x418c <lora_driver_sendUploadMessage+0x9c>
    4188:	81 e2       	ldi	r24, 0x21	; 33
    418a:	96 e0       	ldi	r25, 0x06	; 6
    418c:	20 e4       	ldi	r18, 0x40	; 64
    418e:	37 e1       	ldi	r19, 0x17	; 23
    4190:	3f 93       	push	r19
    4192:	2f 93       	push	r18
    4194:	1f 92       	push	r1
    4196:	4f 93       	push	r20
    4198:	9f 93       	push	r25
    419a:	8f 93       	push	r24
    419c:	85 e2       	ldi	r24, 0x25	; 37
    419e:	96 e0       	ldi	r25, 0x06	; 6
    41a0:	9f 93       	push	r25
    41a2:	8f 93       	push	r24
    41a4:	82 e8       	ldi	r24, 0x82	; 130
    41a6:	97 e1       	ldi	r25, 0x17	; 23
    41a8:	9f 93       	push	r25
    41aa:	8f 93       	push	r24
    41ac:	0e 94 b8 33 	call	0x6770	; 0x6770 <sprintf>
    41b0:	60 e0       	ldi	r22, 0x00	; 0
    41b2:	70 e0       	ldi	r23, 0x00	; 0
    41b4:	82 e8       	ldi	r24, 0x82	; 130
    41b6:	97 e1       	ldi	r25, 0x17	; 23
    41b8:	b3 de       	rcall	.-666    	; 0x3f20 <_uploadMessageRc>
    41ba:	0f b6       	in	r0, 0x3f	; 63
    41bc:	f8 94       	cli
    41be:	de bf       	out	0x3e, r29	; 62
    41c0:	0f be       	out	0x3f, r0	; 63
    41c2:	cd bf       	out	0x3d, r28	; 61
    41c4:	81 11       	cpse	r24, r1
    41c6:	59 c0       	rjmp	.+178    	; 0x427a <lora_driver_sendUploadMessage+0x18a>
    41c8:	08 e2       	ldi	r16, 0x28	; 40
    41ca:	15 e0       	ldi	r17, 0x05	; 5
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	4d e2       	ldi	r20, 0x2D	; 45
    41d2:	50 e0       	ldi	r21, 0x00	; 0
    41d4:	6f ea       	ldi	r22, 0xAF	; 175
    41d6:	77 e1       	ldi	r23, 0x17	; 23
    41d8:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <_serialReplyBufferHandle>
    41dc:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <_serialReplyBufferHandle+0x1>
    41e0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <xStreamBufferReceive>
    41e4:	88 23       	and	r24, r24
    41e6:	09 f4       	brne	.+2      	; 0x41ea <lora_driver_sendUploadMessage+0xfa>
    41e8:	47 c0       	rjmp	.+142    	; 0x4278 <lora_driver_sendUploadMessage+0x188>
    41ea:	8f ea       	ldi	r24, 0xAF	; 175
    41ec:	97 e1       	ldi	r25, 0x17	; 23
    41ee:	23 de       	rcall	.-954    	; 0x3e36 <_reply2ReturnCode>
    41f0:	8e 30       	cpi	r24, 0x0E	; 14
    41f2:	09 f0       	breq	.+2      	; 0x41f6 <lora_driver_sendUploadMessage+0x106>
    41f4:	42 c0       	rjmp	.+132    	; 0x427a <lora_driver_sendUploadMessage+0x18a>
    41f6:	87 e0       	ldi	r24, 0x07	; 7
    41f8:	89 83       	std	Y+1, r24	; 0x01
    41fa:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <_downlinkMessageBuffer>
    41fe:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <_downlinkMessageBuffer+0x1>
    4202:	89 2b       	or	r24, r25
    4204:	a9 f1       	breq	.+106    	; 0x4270 <lora_driver_sendUploadMessage+0x180>
    4206:	be 01       	movw	r22, r28
    4208:	6f 5f       	subi	r22, 0xFF	; 255
    420a:	7f 4f       	sbci	r23, 0xFF	; 255
    420c:	8f ea       	ldi	r24, 0xAF	; 175
    420e:	97 e1       	ldi	r25, 0x17	; 23
    4210:	68 d1       	rcall	.+720    	; 0x44e2 <decode_port_no>
    4212:	80 93 2a 17 	sts	0x172A, r24	; 0x80172a <_downlinkPayload>
    4216:	e9 81       	ldd	r30, Y+1	; 0x01
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	e1 55       	subi	r30, 0x51	; 81
    421c:	f8 4e       	sbci	r31, 0xE8	; 232
    421e:	df 01       	movw	r26, r30
    4220:	0d 90       	ld	r0, X+
    4222:	00 20       	and	r0, r0
    4224:	e9 f7       	brne	.-6      	; 0x4220 <lora_driver_sendUploadMessage+0x130>
    4226:	11 97       	sbiw	r26, 0x01	; 1
    4228:	ae 1b       	sub	r26, r30
    422a:	bf 0b       	sbc	r27, r31
    422c:	aa 23       	and	r26, r26
    422e:	91 f0       	breq	.+36     	; 0x4254 <lora_driver_sendUploadMessage+0x164>
    4230:	bb 27       	eor	r27, r27
    4232:	cd 01       	movw	r24, r26
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	9c 01       	movw	r18, r24
    4238:	12 f4       	brpl	.+4      	; 0x423e <lora_driver_sendUploadMessage+0x14e>
    423a:	2f 5f       	subi	r18, 0xFF	; 255
    423c:	3f 4f       	sbci	r19, 0xFF	; 255
    423e:	35 95       	asr	r19
    4240:	27 95       	ror	r18
    4242:	20 93 2b 17 	sts	0x172B, r18	; 0x80172b <_downlinkPayload+0x1>
    4246:	af 01       	movw	r20, r30
    4248:	4f 5f       	subi	r20, 0xFF	; 255
    424a:	5f 4f       	sbci	r21, 0xFF	; 255
    424c:	64 e1       	ldi	r22, 0x14	; 20
    424e:	8c e2       	ldi	r24, 0x2C	; 44
    4250:	97 e1       	ldi	r25, 0x17	; 23
    4252:	73 d1       	rcall	.+742    	; 0x453a <decode_hexadecimal_string_bytes>
    4254:	01 e0       	ldi	r16, 0x01	; 1
    4256:	10 e0       	ldi	r17, 0x00	; 0
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	46 e1       	ldi	r20, 0x16	; 22
    425e:	50 e0       	ldi	r21, 0x00	; 0
    4260:	6a e2       	ldi	r22, 0x2A	; 42
    4262:	77 e1       	ldi	r23, 0x17	; 23
    4264:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <_downlinkMessageBuffer>
    4268:	90 91 25 17 	lds	r25, 0x1725	; 0x801725 <_downlinkMessageBuffer+0x1>
    426c:	0e 94 33 0b 	call	0x1666	; 0x1666 <xStreamBufferSend>
    4270:	8e e0       	ldi	r24, 0x0E	; 14
    4272:	03 c0       	rjmp	.+6      	; 0x427a <lora_driver_sendUploadMessage+0x18a>
    4274:	84 e1       	ldi	r24, 0x14	; 20
    4276:	01 c0       	rjmp	.+2      	; 0x427a <lora_driver_sendUploadMessage+0x18a>
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	0f 90       	pop	r0
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
    4280:	1f 91       	pop	r17
    4282:	0f 91       	pop	r16
    4284:	08 95       	ret

00004286 <lora_driver_setAdaptiveDataRate>:
    4286:	81 30       	cpi	r24, 0x01	; 1
    4288:	19 f0       	breq	.+6      	; 0x4290 <lora_driver_setAdaptiveDataRate+0xa>
    428a:	65 e3       	ldi	r22, 0x35	; 53
    428c:	76 e0       	ldi	r23, 0x06	; 6
    428e:	02 c0       	rjmp	.+4      	; 0x4294 <lora_driver_setAdaptiveDataRate+0xe>
    4290:	6e e0       	ldi	r22, 0x0E	; 14
    4292:	77 e0       	ldi	r23, 0x07	; 7
    4294:	89 e3       	ldi	r24, 0x39	; 57
    4296:	96 e0       	ldi	r25, 0x06	; 6
    4298:	43 ce       	rjmp	.-890    	; 0x3f20 <_uploadMessageRc>
    429a:	08 95       	ret

0000429c <lora_driver_setReceiveDelay>:
    429c:	9f 93       	push	r25
    429e:	8f 93       	push	r24
    42a0:	8a e6       	ldi	r24, 0x6A	; 106
    42a2:	96 e0       	ldi	r25, 0x06	; 6
    42a4:	9f 93       	push	r25
    42a6:	8f 93       	push	r24
    42a8:	82 e8       	ldi	r24, 0x82	; 130
    42aa:	97 e1       	ldi	r25, 0x17	; 23
    42ac:	9f 93       	push	r25
    42ae:	8f 93       	push	r24
    42b0:	0e 94 b8 33 	call	0x6770	; 0x6770 <sprintf>
    42b4:	60 e0       	ldi	r22, 0x00	; 0
    42b6:	70 e0       	ldi	r23, 0x00	; 0
    42b8:	82 e8       	ldi	r24, 0x82	; 130
    42ba:	97 e1       	ldi	r25, 0x17	; 23
    42bc:	31 de       	rcall	.-926    	; 0x3f20 <_uploadMessageRc>
    42be:	0f 90       	pop	r0
    42c0:	0f 90       	pop	r0
    42c2:	0f 90       	pop	r0
    42c4:	0f 90       	pop	r0
    42c6:	0f 90       	pop	r0
    42c8:	0f 90       	pop	r0
    42ca:	08 95       	ret

000042cc <lora_driver_configureToEu868>:
    42cc:	2f 92       	push	r2
    42ce:	3f 92       	push	r3
    42d0:	4f 92       	push	r4
    42d2:	5f 92       	push	r5
    42d4:	6f 92       	push	r6
    42d6:	7f 92       	push	r7
    42d8:	8f 92       	push	r8
    42da:	9f 92       	push	r9
    42dc:	af 92       	push	r10
    42de:	bf 92       	push	r11
    42e0:	cf 92       	push	r12
    42e2:	df 92       	push	r13
    42e4:	ef 92       	push	r14
    42e6:	ff 92       	push	r15
    42e8:	0f 93       	push	r16
    42ea:	1f 93       	push	r17
    42ec:	cf 93       	push	r28
    42ee:	df 93       	push	r29
    42f0:	cd b7       	in	r28, 0x3d	; 61
    42f2:	de b7       	in	r29, 0x3e	; 62
    42f4:	a0 97       	sbiw	r28, 0x20	; 32
    42f6:	0f b6       	in	r0, 0x3f	; 63
    42f8:	f8 94       	cli
    42fa:	de bf       	out	0x3e, r29	; 62
    42fc:	0f be       	out	0x3f, r0	; 63
    42fe:	cd bf       	out	0x3d, r28	; 61
    4300:	67 e9       	ldi	r22, 0x97	; 151
    4302:	76 e0       	ldi	r23, 0x06	; 6
    4304:	83 ea       	ldi	r24, 0xA3	; 163
    4306:	96 e0       	ldi	r25, 0x06	; 6
    4308:	3c dd       	rcall	.-1416   	; 0x3d82 <_uploadMessage>
    430a:	95 dd       	rcall	.-1238   	; 0x3e36 <_reply2ReturnCode>
    430c:	81 11       	cpse	r24, r1
    430e:	a3 c0       	rjmp	.+326    	; 0x4456 <lora_driver_configureToEu868+0x18a>
    4310:	80 e2       	ldi	r24, 0x20	; 32
    4312:	e2 e2       	ldi	r30, 0x22	; 34
    4314:	f2 e0       	ldi	r31, 0x02	; 2
    4316:	de 01       	movw	r26, r28
    4318:	11 96       	adiw	r26, 0x01	; 1
    431a:	01 90       	ld	r0, Z+
    431c:	0d 92       	st	X+, r0
    431e:	8a 95       	dec	r24
    4320:	e1 f7       	brne	.-8      	; 0x431a <lora_driver_configureToEu868+0x4e>
    4322:	9e 01       	movw	r18, r28
    4324:	2f 5f       	subi	r18, 0xFF	; 255
    4326:	3f 4f       	sbci	r19, 0xFF	; 255
    4328:	69 01       	movw	r12, r18
    432a:	e1 2c       	mov	r14, r1
    432c:	f1 2c       	mov	r15, r1
    432e:	0f 2e       	mov	r0, r31
    4330:	ff ea       	ldi	r31, 0xAF	; 175
    4332:	af 2e       	mov	r10, r31
    4334:	f6 e0       	ldi	r31, 0x06	; 6
    4336:	bf 2e       	mov	r11, r31
    4338:	f0 2d       	mov	r31, r0
    433a:	02 e8       	ldi	r16, 0x82	; 130
    433c:	17 e1       	ldi	r17, 0x17	; 23
    433e:	0f 2e       	mov	r0, r31
    4340:	f8 ec       	ldi	r31, 0xC8	; 200
    4342:	4f 2e       	mov	r4, r31
    4344:	f6 e0       	ldi	r31, 0x06	; 6
    4346:	5f 2e       	mov	r5, r31
    4348:	f0 2d       	mov	r31, r0
    434a:	0f 2e       	mov	r0, r31
    434c:	ff ed       	ldi	r31, 0xDF	; 223
    434e:	8f 2e       	mov	r8, r31
    4350:	f6 e0       	ldi	r31, 0x06	; 6
    4352:	9f 2e       	mov	r9, r31
    4354:	f0 2d       	mov	r31, r0
    4356:	0f 2e       	mov	r0, r31
    4358:	f9 ef       	ldi	r31, 0xF9	; 249
    435a:	6f 2e       	mov	r6, r31
    435c:	f6 e0       	ldi	r31, 0x06	; 6
    435e:	7f 2e       	mov	r7, r31
    4360:	f0 2d       	mov	r31, r0
    4362:	3e 2c       	mov	r3, r14
    4364:	2f 2c       	mov	r2, r15
    4366:	ff 92       	push	r15
    4368:	ef 92       	push	r14
    436a:	bf 92       	push	r11
    436c:	af 92       	push	r10
    436e:	1f 93       	push	r17
    4370:	0f 93       	push	r16
    4372:	0e 94 b8 33 	call	0x6770	; 0x6770 <sprintf>
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	70 e0       	ldi	r23, 0x00	; 0
    437a:	c8 01       	movw	r24, r16
    437c:	02 dd       	rcall	.-1532   	; 0x3d82 <_uploadMessage>
    437e:	5b dd       	rcall	.-1354   	; 0x3e36 <_reply2ReturnCode>
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	0f 90       	pop	r0
    438c:	81 11       	cpse	r24, r1
    438e:	63 c0       	rjmp	.+198    	; 0x4456 <lora_driver_configureToEu868+0x18a>
    4390:	32 e0       	ldi	r19, 0x02	; 2
    4392:	3e 15       	cp	r19, r14
    4394:	e8 f4       	brcc	.+58     	; 0x43d0 <lora_driver_configureToEu868+0x104>
    4396:	f6 01       	movw	r30, r12
    4398:	83 81       	ldd	r24, Z+3	; 0x03
    439a:	8f 93       	push	r24
    439c:	82 81       	ldd	r24, Z+2	; 0x02
    439e:	8f 93       	push	r24
    43a0:	81 81       	ldd	r24, Z+1	; 0x01
    43a2:	8f 93       	push	r24
    43a4:	80 81       	ld	r24, Z
    43a6:	8f 93       	push	r24
    43a8:	ff 92       	push	r15
    43aa:	ef 92       	push	r14
    43ac:	5f 92       	push	r5
    43ae:	4f 92       	push	r4
    43b0:	1f 93       	push	r17
    43b2:	0f 93       	push	r16
    43b4:	0e 94 b8 33 	call	0x6770	; 0x6770 <sprintf>
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	70 e0       	ldi	r23, 0x00	; 0
    43bc:	c8 01       	movw	r24, r16
    43be:	e1 dc       	rcall	.-1598   	; 0x3d82 <_uploadMessage>
    43c0:	3a dd       	rcall	.-1420   	; 0x3e36 <_reply2ReturnCode>
    43c2:	0f b6       	in	r0, 0x3f	; 63
    43c4:	f8 94       	cli
    43c6:	de bf       	out	0x3e, r29	; 62
    43c8:	0f be       	out	0x3f, r0	; 63
    43ca:	cd bf       	out	0x3d, r28	; 61
    43cc:	81 11       	cpse	r24, r1
    43ce:	43 c0       	rjmp	.+134    	; 0x4456 <lora_driver_configureToEu868+0x18a>
    43d0:	2f 92       	push	r2
    43d2:	3f 92       	push	r3
    43d4:	9f 92       	push	r9
    43d6:	8f 92       	push	r8
    43d8:	1f 93       	push	r17
    43da:	0f 93       	push	r16
    43dc:	0e 94 b8 33 	call	0x6770	; 0x6770 <sprintf>
    43e0:	60 e0       	ldi	r22, 0x00	; 0
    43e2:	70 e0       	ldi	r23, 0x00	; 0
    43e4:	c8 01       	movw	r24, r16
    43e6:	cd dc       	rcall	.-1638   	; 0x3d82 <_uploadMessage>
    43e8:	26 dd       	rcall	.-1460   	; 0x3e36 <_reply2ReturnCode>
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	0f 90       	pop	r0
    43f4:	0f 90       	pop	r0
    43f6:	81 11       	cpse	r24, r1
    43f8:	2e c0       	rjmp	.+92     	; 0x4456 <lora_driver_configureToEu868+0x18a>
    43fa:	2f 92       	push	r2
    43fc:	3f 92       	push	r3
    43fe:	7f 92       	push	r7
    4400:	6f 92       	push	r6
    4402:	1f 93       	push	r17
    4404:	0f 93       	push	r16
    4406:	0e 94 b8 33 	call	0x6770	; 0x6770 <sprintf>
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	70 e0       	ldi	r23, 0x00	; 0
    440e:	c8 01       	movw	r24, r16
    4410:	b8 dc       	rcall	.-1680   	; 0x3d82 <_uploadMessage>
    4412:	11 dd       	rcall	.-1502   	; 0x3e36 <_reply2ReturnCode>
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
    441a:	0f 90       	pop	r0
    441c:	0f 90       	pop	r0
    441e:	0f 90       	pop	r0
    4420:	81 11       	cpse	r24, r1
    4422:	19 c0       	rjmp	.+50     	; 0x4456 <lora_driver_configureToEu868+0x18a>
    4424:	3f ef       	ldi	r19, 0xFF	; 255
    4426:	e3 1a       	sub	r14, r19
    4428:	f3 0a       	sbc	r15, r19
    442a:	84 e0       	ldi	r24, 0x04	; 4
    442c:	c8 0e       	add	r12, r24
    442e:	d1 1c       	adc	r13, r1
    4430:	98 e0       	ldi	r25, 0x08	; 8
    4432:	e9 16       	cp	r14, r25
    4434:	f1 04       	cpc	r15, r1
    4436:	09 f0       	breq	.+2      	; 0x443a <lora_driver_configureToEu868+0x16e>
    4438:	94 cf       	rjmp	.-216    	; 0x4362 <lora_driver_configureToEu868+0x96>
    443a:	60 e0       	ldi	r22, 0x00	; 0
    443c:	70 e0       	ldi	r23, 0x00	; 0
    443e:	81 e1       	ldi	r24, 0x11	; 17
    4440:	97 e0       	ldi	r25, 0x07	; 7
    4442:	9f dc       	rcall	.-1730   	; 0x3d82 <_uploadMessage>
    4444:	f8 dc       	rcall	.-1552   	; 0x3e36 <_reply2ReturnCode>
    4446:	81 11       	cpse	r24, r1
    4448:	06 c0       	rjmp	.+12     	; 0x4456 <lora_driver_configureToEu868+0x18a>
    444a:	60 e0       	ldi	r22, 0x00	; 0
    444c:	70 e0       	ldi	r23, 0x00	; 0
    444e:	82 e2       	ldi	r24, 0x22	; 34
    4450:	97 e0       	ldi	r25, 0x07	; 7
    4452:	97 dc       	rcall	.-1746   	; 0x3d82 <_uploadMessage>
    4454:	f0 dc       	rcall	.-1568   	; 0x3e36 <_reply2ReturnCode>
    4456:	a0 96       	adiw	r28, 0x20	; 32
    4458:	0f b6       	in	r0, 0x3f	; 63
    445a:	f8 94       	cli
    445c:	de bf       	out	0x3e, r29	; 62
    445e:	0f be       	out	0x3f, r0	; 63
    4460:	cd bf       	out	0x3d, r28	; 61
    4462:	df 91       	pop	r29
    4464:	cf 91       	pop	r28
    4466:	1f 91       	pop	r17
    4468:	0f 91       	pop	r16
    446a:	ff 90       	pop	r15
    446c:	ef 90       	pop	r14
    446e:	df 90       	pop	r13
    4470:	cf 90       	pop	r12
    4472:	bf 90       	pop	r11
    4474:	af 90       	pop	r10
    4476:	9f 90       	pop	r9
    4478:	8f 90       	pop	r8
    447a:	7f 90       	pop	r7
    447c:	6f 90       	pop	r6
    447e:	5f 90       	pop	r5
    4480:	4f 90       	pop	r4
    4482:	3f 90       	pop	r3
    4484:	2f 90       	pop	r2
    4486:	08 95       	ret

00004488 <lora_driver_setOtaaIdentity>:
    4488:	ef 92       	push	r14
    448a:	ff 92       	push	r15
    448c:	0f 93       	push	r16
    448e:	1f 93       	push	r17
    4490:	cf 93       	push	r28
    4492:	df 93       	push	r29
    4494:	ec 01       	movw	r28, r24
    4496:	8b 01       	movw	r16, r22
    4498:	7a 01       	movw	r14, r20
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	f4 de       	rcall	.-536    	; 0x4286 <lora_driver_setAdaptiveDataRate>
    449e:	81 11       	cpse	r24, r1
    44a0:	0d c0       	rjmp	.+26     	; 0x44bc <lora_driver_setOtaaIdentity+0x34>
    44a2:	ce 01       	movw	r24, r28
    44a4:	d4 dd       	rcall	.-1112   	; 0x404e <lora_driver_setApplicationIdentifier>
    44a6:	81 11       	cpse	r24, r1
    44a8:	09 c0       	rjmp	.+18     	; 0x44bc <lora_driver_setOtaaIdentity+0x34>
    44aa:	c8 01       	movw	r24, r16
    44ac:	e1 dd       	rcall	.-1086   	; 0x4070 <lora_driver_setApplicationKey>
    44ae:	81 11       	cpse	r24, r1
    44b0:	05 c0       	rjmp	.+10     	; 0x44bc <lora_driver_setOtaaIdentity+0x34>
    44b2:	c7 01       	movw	r24, r14
    44b4:	bb dd       	rcall	.-1162   	; 0x402c <lora_driver_setDeviceIdentifier>
    44b6:	81 11       	cpse	r24, r1
    44b8:	01 c0       	rjmp	.+2      	; 0x44bc <lora_driver_setOtaaIdentity+0x34>
    44ba:	eb dd       	rcall	.-1066   	; 0x4092 <lora_driver_saveMac>
    44bc:	df 91       	pop	r29
    44be:	cf 91       	pop	r28
    44c0:	1f 91       	pop	r17
    44c2:	0f 91       	pop	r16
    44c4:	ff 90       	pop	r15
    44c6:	ef 90       	pop	r14
    44c8:	08 95       	ret

000044ca <lora_driver_mapReturnCodeToText>:
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	fc 01       	movw	r30, r24
    44ce:	ee 0f       	add	r30, r30
    44d0:	ff 1f       	adc	r31, r31
    44d2:	8e 0f       	add	r24, r30
    44d4:	9f 1f       	adc	r25, r31
    44d6:	fc 01       	movw	r30, r24
    44d8:	e5 51       	subi	r30, 0x15	; 21
    44da:	f8 4f       	sbci	r31, 0xF8	; 248
    44dc:	81 81       	ldd	r24, Z+1	; 0x01
    44de:	92 81       	ldd	r25, Z+2	; 0x02
    44e0:	08 95       	ret

000044e2 <decode_port_no>:
    44e2:	dc 01       	movw	r26, r24
    44e4:	00 97       	sbiw	r24, 0x00	; 0
    44e6:	29 f1       	breq	.+74     	; 0x4532 <decode_port_no+0x50>
    44e8:	fb 01       	movw	r30, r22
    44ea:	20 81       	ld	r18, Z
    44ec:	fc 01       	movw	r30, r24
    44ee:	01 90       	ld	r0, Z+
    44f0:	00 20       	and	r0, r0
    44f2:	e9 f7       	brne	.-6      	; 0x44ee <decode_port_no+0xc>
    44f4:	31 97       	sbiw	r30, 0x01	; 1
    44f6:	e8 1b       	sub	r30, r24
    44f8:	f9 0b       	sbc	r31, r25
    44fa:	82 2f       	mov	r24, r18
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	e8 17       	cp	r30, r24
    4500:	f9 07       	cpc	r31, r25
    4502:	c8 f0       	brcs	.+50     	; 0x4536 <decode_port_no+0x54>
    4504:	80 e0       	ldi	r24, 0x00	; 0
    4506:	08 c0       	rjmp	.+16     	; 0x4518 <decode_port_no+0x36>
    4508:	88 0f       	add	r24, r24
    450a:	38 2f       	mov	r19, r24
    450c:	33 0f       	add	r19, r19
    450e:	33 0f       	add	r19, r19
    4510:	83 0f       	add	r24, r19
    4512:	80 53       	subi	r24, 0x30	; 48
    4514:	89 0f       	add	r24, r25
    4516:	2f 5f       	subi	r18, 0xFF	; 255
    4518:	fd 01       	movw	r30, r26
    451a:	e2 0f       	add	r30, r18
    451c:	f1 1d       	adc	r31, r1
    451e:	90 81       	ld	r25, Z
    4520:	30 ed       	ldi	r19, 0xD0	; 208
    4522:	39 0f       	add	r19, r25
    4524:	3a 30       	cpi	r19, 0x0A	; 10
    4526:	10 f4       	brcc	.+4      	; 0x452c <decode_port_no+0x4a>
    4528:	91 11       	cpse	r25, r1
    452a:	ee cf       	rjmp	.-36     	; 0x4508 <decode_port_no+0x26>
    452c:	fb 01       	movw	r30, r22
    452e:	20 83       	st	Z, r18
    4530:	08 95       	ret
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	08 95       	ret
    4536:	80 e0       	ldi	r24, 0x00	; 0
    4538:	08 95       	ret

0000453a <decode_hexadecimal_string_bytes>:
    453a:	0f 93       	push	r16
    453c:	1f 93       	push	r17
    453e:	cf 93       	push	r28
    4540:	df 93       	push	r29
    4542:	dc 01       	movw	r26, r24
    4544:	ea 01       	movw	r28, r20
    4546:	20 97       	sbiw	r28, 0x00	; 0
    4548:	e1 f1       	breq	.+120    	; 0x45c2 <decode_hexadecimal_string_bytes+0x88>
    454a:	fa 01       	movw	r30, r20
    454c:	01 90       	ld	r0, Z+
    454e:	00 20       	and	r0, r0
    4550:	e9 f7       	brne	.-6      	; 0x454c <decode_hexadecimal_string_bytes+0x12>
    4552:	31 97       	sbiw	r30, 0x01	; 1
    4554:	e4 1b       	sub	r30, r20
    4556:	f5 0b       	sbc	r31, r21
    4558:	32 97       	sbiw	r30, 0x02	; 2
    455a:	10 f5       	brcc	.+68     	; 0x45a0 <decode_hexadecimal_string_bytes+0x66>
    455c:	32 c0       	rjmp	.+100    	; 0x45c2 <decode_hexadecimal_string_bytes+0x88>
    455e:	8d 01       	movw	r16, r26
    4560:	04 0f       	add	r16, r20
    4562:	15 1f       	adc	r17, r21
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	ae 01       	movw	r20, r28
    4568:	42 0f       	add	r20, r18
    456a:	53 1f       	adc	r21, r19
    456c:	fa 01       	movw	r30, r20
    456e:	90 81       	ld	r25, Z
    4570:	91 34       	cpi	r25, 0x41	; 65
    4572:	28 f0       	brcs	.+10     	; 0x457e <decode_hexadecimal_string_bytes+0x44>
    4574:	97 53       	subi	r25, 0x37	; 55
    4576:	59 2f       	mov	r21, r25
    4578:	52 95       	swap	r21
    457a:	50 7f       	andi	r21, 0xF0	; 240
    457c:	03 c0       	rjmp	.+6      	; 0x4584 <decode_hexadecimal_string_bytes+0x4a>
    457e:	59 2f       	mov	r21, r25
    4580:	52 95       	swap	r21
    4582:	50 7f       	andi	r21, 0xF0	; 240
    4584:	2c 0f       	add	r18, r28
    4586:	3d 1f       	adc	r19, r29
    4588:	f9 01       	movw	r30, r18
    458a:	91 81       	ldd	r25, Z+1	; 0x01
    458c:	91 34       	cpi	r25, 0x41	; 65
    458e:	10 f0       	brcs	.+4      	; 0x4594 <decode_hexadecimal_string_bytes+0x5a>
    4590:	97 53       	subi	r25, 0x37	; 55
    4592:	01 c0       	rjmp	.+2      	; 0x4596 <decode_hexadecimal_string_bytes+0x5c>
    4594:	90 53       	subi	r25, 0x30	; 48
    4596:	95 0f       	add	r25, r21
    4598:	f8 01       	movw	r30, r16
    459a:	90 83       	st	Z, r25
    459c:	8f 5f       	subi	r24, 0xFF	; 255
    459e:	01 c0       	rjmp	.+2      	; 0x45a2 <decode_hexadecimal_string_bytes+0x68>
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	28 2f       	mov	r18, r24
    45a4:	22 0f       	add	r18, r18
    45a6:	48 2f       	mov	r20, r24
    45a8:	50 e0       	ldi	r21, 0x00	; 0
    45aa:	fe 01       	movw	r30, r28
    45ac:	01 90       	ld	r0, Z+
    45ae:	00 20       	and	r0, r0
    45b0:	e9 f7       	brne	.-6      	; 0x45ac <decode_hexadecimal_string_bytes+0x72>
    45b2:	31 97       	sbiw	r30, 0x01	; 1
    45b4:	ec 1b       	sub	r30, r28
    45b6:	fd 0b       	sbc	r31, r29
    45b8:	4e 17       	cp	r20, r30
    45ba:	5f 07       	cpc	r21, r31
    45bc:	10 f4       	brcc	.+4      	; 0x45c2 <decode_hexadecimal_string_bytes+0x88>
    45be:	86 13       	cpse	r24, r22
    45c0:	ce cf       	rjmp	.-100    	; 0x455e <decode_hexadecimal_string_bytes+0x24>
    45c2:	df 91       	pop	r29
    45c4:	cf 91       	pop	r28
    45c6:	1f 91       	pop	r17
    45c8:	0f 91       	pop	r16
    45ca:	08 95       	ret

000045cc <_serialCallBack>:
    45cc:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <crc_sum.1945>
    45d0:	86 0f       	add	r24, r22
    45d2:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <crc_sum.1945>
    45d6:	90 91 e2 17 	lds	r25, 0x17E2	; 0x8017e2 <_mh_state>
    45da:	91 30       	cpi	r25, 0x01	; 1
    45dc:	79 f0       	breq	.+30     	; 0x45fc <_serialCallBack+0x30>
    45de:	28 f0       	brcs	.+10     	; 0x45ea <_serialCallBack+0x1e>
    45e0:	92 30       	cpi	r25, 0x02	; 2
    45e2:	a9 f0       	breq	.+42     	; 0x460e <_serialCallBack+0x42>
    45e4:	93 30       	cpi	r25, 0x03	; 3
    45e6:	19 f1       	breq	.+70     	; 0x462e <_serialCallBack+0x62>
    45e8:	08 95       	ret
    45ea:	6f 3f       	cpi	r22, 0xFF	; 255
    45ec:	09 f0       	breq	.+2      	; 0x45f0 <_serialCallBack+0x24>
    45ee:	48 c0       	rjmp	.+144    	; 0x4680 <_serialCallBack+0xb4>
    45f0:	10 92 df 17 	sts	0x17DF, r1	; 0x8017df <crc_sum.1945>
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <_mh_state>
    45fa:	08 95       	ret
    45fc:	66 38       	cpi	r22, 0x86	; 134
    45fe:	09 f0       	breq	.+2      	; 0x4602 <_serialCallBack+0x36>
    4600:	3f c0       	rjmp	.+126    	; 0x4680 <_serialCallBack+0xb4>
    4602:	10 92 de 17 	sts	0x17DE, r1	; 0x8017de <inDex.1943>
    4606:	82 e0       	ldi	r24, 0x02	; 2
    4608:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <_mh_state>
    460c:	08 95       	ret
    460e:	e0 91 de 17 	lds	r30, 0x17DE	; 0x8017de <inDex.1943>
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	8e 0f       	add	r24, r30
    4616:	80 93 de 17 	sts	0x17DE, r24	; 0x8017de <inDex.1943>
    461a:	f0 e0       	ldi	r31, 0x00	; 0
    461c:	e4 52       	subi	r30, 0x24	; 36
    461e:	f8 4e       	sbci	r31, 0xE8	; 232
    4620:	60 83       	st	Z, r22
    4622:	82 30       	cpi	r24, 0x02	; 2
    4624:	69 f5       	brne	.+90     	; 0x4680 <_serialCallBack+0xb4>
    4626:	83 e0       	ldi	r24, 0x03	; 3
    4628:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <_mh_state>
    462c:	08 95       	ret
    462e:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <inDex.1943>
    4632:	21 e0       	ldi	r18, 0x01	; 1
    4634:	29 0f       	add	r18, r25
    4636:	20 93 de 17 	sts	0x17DE, r18	; 0x8017de <inDex.1943>
    463a:	96 30       	cpi	r25, 0x06	; 6
    463c:	09 f5       	brne	.+66     	; 0x4680 <_serialCallBack+0xb4>
    463e:	81 11       	cpse	r24, r1
    4640:	0e c0       	rjmp	.+28     	; 0x465e <_serialCallBack+0x92>
    4642:	ec ed       	ldi	r30, 0xDC	; 220
    4644:	f7 e1       	ldi	r31, 0x17	; 23
    4646:	80 81       	ld	r24, Z
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	98 2f       	mov	r25, r24
    464c:	88 27       	eor	r24, r24
    464e:	21 81       	ldd	r18, Z+1	; 0x01
    4650:	82 0f       	add	r24, r18
    4652:	91 1d       	adc	r25, r1
    4654:	90 93 e4 17 	sts	0x17E4, r25	; 0x8017e4 <_ppm+0x1>
    4658:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <_ppm>
    465c:	04 c0       	rjmp	.+8      	; 0x4666 <_serialCallBack+0x9a>
    465e:	10 92 e4 17 	sts	0x17E4, r1	; 0x8017e4 <_ppm+0x1>
    4662:	10 92 e3 17 	sts	0x17E3, r1	; 0x8017e3 <_ppm>
    4666:	10 92 e2 17 	sts	0x17E2, r1	; 0x8017e2 <_mh_state>
    466a:	e0 91 e0 17 	lds	r30, 0x17E0	; 0x8017e0 <_appCallBack>
    466e:	f0 91 e1 17 	lds	r31, 0x17E1	; 0x8017e1 <_appCallBack+0x1>
    4672:	30 97       	sbiw	r30, 0x00	; 0
    4674:	29 f0       	breq	.+10     	; 0x4680 <_serialCallBack+0xb4>
    4676:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <_ppm>
    467a:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <_ppm+0x1>
    467e:	19 95       	eicall
    4680:	08 95       	ret

00004682 <mh_z19_initialise>:
    4682:	8f 92       	push	r8
    4684:	9f 92       	push	r9
    4686:	af 92       	push	r10
    4688:	cf 92       	push	r12
    468a:	ef 92       	push	r14
    468c:	0f 93       	push	r16
    468e:	0f 2e       	mov	r0, r31
    4690:	f6 ee       	ldi	r31, 0xE6	; 230
    4692:	8f 2e       	mov	r8, r31
    4694:	f2 e2       	ldi	r31, 0x22	; 34
    4696:	9f 2e       	mov	r9, r31
    4698:	f0 2d       	mov	r31, r0
    469a:	68 94       	set
    469c:	aa 24       	eor	r10, r10
    469e:	a4 f8       	bld	r10, 4
    46a0:	68 94       	set
    46a2:	cc 24       	eor	r12, r12
    46a4:	c4 f8       	bld	r12, 4
    46a6:	e1 2c       	mov	r14, r1
    46a8:	00 e0       	ldi	r16, 0x00	; 0
    46aa:	23 e0       	ldi	r18, 0x03	; 3
    46ac:	40 e8       	ldi	r20, 0x80	; 128
    46ae:	55 e2       	ldi	r21, 0x25	; 37
    46b0:	60 e0       	ldi	r22, 0x00	; 0
    46b2:	70 e0       	ldi	r23, 0x00	; 0
    46b4:	50 d0       	rcall	.+160    	; 0x4756 <serial_create>
    46b6:	90 93 e6 17 	sts	0x17E6, r25	; 0x8017e6 <_serial+0x1>
    46ba:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <_serial>
    46be:	0f 91       	pop	r16
    46c0:	ef 90       	pop	r14
    46c2:	cf 90       	pop	r12
    46c4:	af 90       	pop	r10
    46c6:	9f 90       	pop	r9
    46c8:	8f 90       	pop	r8
    46ca:	08 95       	ret

000046cc <mh_z19_injectCallBack>:
    46cc:	90 93 e1 17 	sts	0x17E1, r25	; 0x8017e1 <_appCallBack+0x1>
    46d0:	80 93 e0 17 	sts	0x17E0, r24	; 0x8017e0 <_appCallBack>
    46d4:	08 95       	ret

000046d6 <mh_z19_takeMeassuring>:
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	cd b7       	in	r28, 0x3d	; 61
    46dc:	de b7       	in	r29, 0x3e	; 62
    46de:	29 97       	sbiw	r28, 0x09	; 9
    46e0:	0f b6       	in	r0, 0x3f	; 63
    46e2:	f8 94       	cli
    46e4:	de bf       	out	0x3e, r29	; 62
    46e6:	0f be       	out	0x3f, r0	; 63
    46e8:	cd bf       	out	0x3d, r28	; 61
    46ea:	89 e0       	ldi	r24, 0x09	; 9
    46ec:	e2 e4       	ldi	r30, 0x42	; 66
    46ee:	f2 e0       	ldi	r31, 0x02	; 2
    46f0:	9e 01       	movw	r18, r28
    46f2:	2f 5f       	subi	r18, 0xFF	; 255
    46f4:	3f 4f       	sbci	r19, 0xFF	; 255
    46f6:	d9 01       	movw	r26, r18
    46f8:	01 90       	ld	r0, Z+
    46fa:	0d 92       	st	X+, r0
    46fc:	8a 95       	dec	r24
    46fe:	e1 f7       	brne	.-8      	; 0x46f8 <mh_z19_takeMeassuring+0x22>
    4700:	10 92 e4 17 	sts	0x17E4, r1	; 0x8017e4 <_ppm+0x1>
    4704:	10 92 e3 17 	sts	0x17E3, r1	; 0x8017e3 <_ppm>
    4708:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <_serial>
    470c:	90 91 e6 17 	lds	r25, 0x17E6	; 0x8017e6 <_serial+0x1>
    4710:	00 97       	sbiw	r24, 0x00	; 0
    4712:	31 f0       	breq	.+12     	; 0x4720 <mh_z19_takeMeassuring+0x4a>
    4714:	42 2f       	mov	r20, r18
    4716:	53 2f       	mov	r21, r19
    4718:	69 e0       	ldi	r22, 0x09	; 9
    471a:	ee d0       	rcall	.+476    	; 0x48f8 <serial_sendBytes>
    471c:	80 e0       	ldi	r24, 0x00	; 0
    471e:	01 c0       	rjmp	.+2      	; 0x4722 <mh_z19_takeMeassuring+0x4c>
    4720:	82 e0       	ldi	r24, 0x02	; 2
    4722:	29 96       	adiw	r28, 0x09	; 9
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	de bf       	out	0x3e, r29	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	cd bf       	out	0x3d, r28	; 61
    472e:	df 91       	pop	r29
    4730:	cf 91       	pop	r28
    4732:	08 95       	ret

00004734 <mh_z19_getCo2Ppm>:
    4734:	20 91 e3 17 	lds	r18, 0x17E3	; 0x8017e3 <_ppm>
    4738:	30 91 e4 17 	lds	r19, 0x17E4	; 0x8017e4 <_ppm+0x1>
    473c:	21 15       	cp	r18, r1
    473e:	31 05       	cpc	r19, r1
    4740:	29 f4       	brne	.+10     	; 0x474c <mh_z19_getCo2Ppm+0x18>
    4742:	fc 01       	movw	r30, r24
    4744:	11 82       	std	Z+1, r1	; 0x01
    4746:	10 82       	st	Z, r1
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	08 95       	ret
    474c:	fc 01       	movw	r30, r24
    474e:	31 83       	std	Z+1, r19	; 0x01
    4750:	20 83       	st	Z, r18
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	08 95       	ret

00004756 <serial_create>:
    4756:	2f 92       	push	r2
    4758:	3f 92       	push	r3
    475a:	4f 92       	push	r4
    475c:	5f 92       	push	r5
    475e:	6f 92       	push	r6
    4760:	7f 92       	push	r7
    4762:	8f 92       	push	r8
    4764:	9f 92       	push	r9
    4766:	af 92       	push	r10
    4768:	cf 92       	push	r12
    476a:	ef 92       	push	r14
    476c:	ff 92       	push	r15
    476e:	0f 93       	push	r16
    4770:	1f 93       	push	r17
    4772:	cf 93       	push	r28
    4774:	df 93       	push	r29
    4776:	cd b7       	in	r28, 0x3d	; 61
    4778:	de b7       	in	r29, 0x3e	; 62
    477a:	f8 2e       	mov	r15, r24
    477c:	2a 01       	movw	r4, r20
    477e:	3b 01       	movw	r6, r22
    4780:	88 e0       	ldi	r24, 0x08	; 8
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	0e 94 c6 30 	call	0x618c	; 0x618c <malloc>
    4788:	8c 01       	movw	r16, r24
    478a:	8f 2d       	mov	r24, r15
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	fc 01       	movw	r30, r24
    4790:	ee 0f       	add	r30, r30
    4792:	ff 1f       	adc	r31, r31
    4794:	e9 51       	subi	r30, 0x19	; 25
    4796:	f8 4e       	sbci	r31, 0xE8	; 232
    4798:	11 83       	std	Z+1, r17	; 0x01
    479a:	00 83       	st	Z, r16
    479c:	01 15       	cp	r16, r1
    479e:	11 05       	cpc	r17, r1
    47a0:	09 f4       	brne	.+2      	; 0x47a4 <serial_create+0x4e>
    47a2:	6d c0       	rjmp	.+218    	; 0x487e <serial_create+0x128>
    47a4:	88 0f       	add	r24, r24
    47a6:	99 1f       	adc	r25, r25
    47a8:	fc 01       	movw	r30, r24
    47aa:	e5 5f       	subi	r30, 0xF5	; 245
    47ac:	fd 4f       	sbci	r31, 0xFD	; 253
    47ae:	80 81       	ld	r24, Z
    47b0:	91 81       	ldd	r25, Z+1	; 0x01
    47b2:	d8 01       	movw	r26, r16
    47b4:	8d 93       	st	X+, r24
    47b6:	9c 93       	st	X, r25
    47b8:	8c 2d       	mov	r24, r12
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	88 0f       	add	r24, r24
    47be:	99 1f       	adc	r25, r25
    47c0:	88 0f       	add	r24, r24
    47c2:	99 1f       	adc	r25, r25
    47c4:	0e 94 c6 30 	call	0x618c	; 0x618c <malloc>
    47c8:	1c 01       	movw	r2, r24
    47ca:	86 e0       	ldi	r24, 0x06	; 6
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	0e 94 c6 30 	call	0x618c	; 0x618c <malloc>
    47d2:	7c 01       	movw	r14, r24
    47d4:	4c 2d       	mov	r20, r12
    47d6:	b1 01       	movw	r22, r2
    47d8:	f4 d6       	rcall	.+3560   	; 0x55c2 <fifo_init>
    47da:	f8 01       	movw	r30, r16
    47dc:	f5 82       	std	Z+5, r15	; 0x05
    47de:	e4 82       	std	Z+4, r14	; 0x04
    47e0:	8a 2d       	mov	r24, r10
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	88 0f       	add	r24, r24
    47e6:	99 1f       	adc	r25, r25
    47e8:	88 0f       	add	r24, r24
    47ea:	99 1f       	adc	r25, r25
    47ec:	0e 94 c6 30 	call	0x618c	; 0x618c <malloc>
    47f0:	1c 01       	movw	r2, r24
    47f2:	86 e0       	ldi	r24, 0x06	; 6
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	0e 94 c6 30 	call	0x618c	; 0x618c <malloc>
    47fa:	7c 01       	movw	r14, r24
    47fc:	4a 2d       	mov	r20, r10
    47fe:	b1 01       	movw	r22, r2
    4800:	e0 d6       	rcall	.+3520   	; 0x55c2 <fifo_init>
    4802:	d8 01       	movw	r26, r16
    4804:	13 96       	adiw	r26, 0x03	; 3
    4806:	fc 92       	st	X, r15
    4808:	ee 92       	st	-X, r14
    480a:	12 97       	sbiw	r26, 0x02	; 2
    480c:	17 96       	adiw	r26, 0x07	; 7
    480e:	9c 92       	st	X, r9
    4810:	8e 92       	st	-X, r8
    4812:	16 97       	sbiw	r26, 0x06	; 6
    4814:	ff b6       	in	r15, 0x3f	; 63
    4816:	f8 94       	cli
    4818:	ed 91       	ld	r30, X+
    481a:	fc 91       	ld	r31, X
    481c:	11 97       	sbiw	r26, 0x01	; 1
    481e:	36 97       	sbiw	r30, 0x06	; 6
    4820:	80 81       	ld	r24, Z
    4822:	82 60       	ori	r24, 0x02	; 2
    4824:	80 83       	st	Z, r24
    4826:	8d 90       	ld	r8, X+
    4828:	9c 90       	ld	r9, X
    482a:	c3 01       	movw	r24, r6
    482c:	b2 01       	movw	r22, r4
    482e:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__floatunsisf>
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e0       	ldi	r20, 0x00	; 0
    4838:	51 e4       	ldi	r21, 0x41	; 65
    483a:	0e 94 12 30 	call	0x6024	; 0x6024 <__mulsf3>
    483e:	9b 01       	movw	r18, r22
    4840:	ac 01       	movw	r20, r24
    4842:	60 e0       	ldi	r22, 0x00	; 0
    4844:	74 e2       	ldi	r23, 0x24	; 36
    4846:	84 e7       	ldi	r24, 0x74	; 116
    4848:	9b e4       	ldi	r25, 0x4B	; 75
    484a:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <__divsf3>
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	40 e8       	ldi	r20, 0x80	; 128
    4854:	5f e3       	ldi	r21, 0x3F	; 63
    4856:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <__subsf3>
    485a:	0e 94 58 2f 	call	0x5eb0	; 0x5eb0 <__fixunssfsi>
    485e:	f4 01       	movw	r30, r8
    4860:	32 97       	sbiw	r30, 0x02	; 2
    4862:	60 83       	st	Z, r22
    4864:	d8 01       	movw	r26, r16
    4866:	ed 91       	ld	r30, X+
    4868:	fc 91       	ld	r31, X
    486a:	11 97       	sbiw	r26, 0x01	; 1
    486c:	35 97       	sbiw	r30, 0x05	; 5
    486e:	88 e9       	ldi	r24, 0x98	; 152
    4870:	80 83       	st	Z, r24
    4872:	ed 91       	ld	r30, X+
    4874:	fc 91       	ld	r31, X
    4876:	34 97       	sbiw	r30, 0x04	; 4
    4878:	86 e0       	ldi	r24, 0x06	; 6
    487a:	80 83       	st	Z, r24
    487c:	ff be       	out	0x3f, r15	; 63
    487e:	c8 01       	movw	r24, r16
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	1f 91       	pop	r17
    4886:	0f 91       	pop	r16
    4888:	ff 90       	pop	r15
    488a:	ef 90       	pop	r14
    488c:	cf 90       	pop	r12
    488e:	af 90       	pop	r10
    4890:	9f 90       	pop	r9
    4892:	8f 90       	pop	r8
    4894:	7f 90       	pop	r7
    4896:	6f 90       	pop	r6
    4898:	5f 90       	pop	r5
    489a:	4f 90       	pop	r4
    489c:	3f 90       	pop	r3
    489e:	2f 90       	pop	r2
    48a0:	08 95       	ret

000048a2 <serial_sendByte>:
    48a2:	cf 93       	push	r28
    48a4:	df 93       	push	r29
    48a6:	dc 01       	movw	r26, r24
    48a8:	89 2b       	or	r24, r25
    48aa:	01 f1       	breq	.+64     	; 0x48ec <serial_sendByte+0x4a>
    48ac:	12 96       	adiw	r26, 0x02	; 2
    48ae:	ed 91       	ld	r30, X+
    48b0:	fc 91       	ld	r31, X
    48b2:	13 97       	sbiw	r26, 0x03	; 3
    48b4:	93 81       	ldd	r25, Z+3	; 0x03
    48b6:	82 81       	ldd	r24, Z+2	; 0x02
    48b8:	25 81       	ldd	r18, Z+5	; 0x05
    48ba:	98 1b       	sub	r25, r24
    48bc:	92 23       	and	r25, r18
    48be:	84 81       	ldd	r24, Z+4	; 0x04
    48c0:	98 17       	cp	r25, r24
    48c2:	b1 f0       	breq	.+44     	; 0x48f0 <serial_sendByte+0x4e>
    48c4:	83 81       	ldd	r24, Z+3	; 0x03
    48c6:	26 95       	lsr	r18
    48c8:	28 23       	and	r18, r24
    48ca:	c0 81       	ld	r28, Z
    48cc:	d1 81       	ldd	r29, Z+1	; 0x01
    48ce:	c2 0f       	add	r28, r18
    48d0:	d1 1d       	adc	r29, r1
    48d2:	68 83       	st	Y, r22
    48d4:	8f 5f       	subi	r24, 0xFF	; 255
    48d6:	95 81       	ldd	r25, Z+5	; 0x05
    48d8:	89 23       	and	r24, r25
    48da:	83 83       	std	Z+3, r24	; 0x03
    48dc:	ed 91       	ld	r30, X+
    48de:	fc 91       	ld	r31, X
    48e0:	35 97       	sbiw	r30, 0x05	; 5
    48e2:	80 81       	ld	r24, Z
    48e4:	80 62       	ori	r24, 0x20	; 32
    48e6:	80 83       	st	Z, r24
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	03 c0       	rjmp	.+6      	; 0x48f2 <serial_sendByte+0x50>
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	01 c0       	rjmp	.+2      	; 0x48f2 <serial_sendByte+0x50>
    48f0:	82 e0       	ldi	r24, 0x02	; 2
    48f2:	df 91       	pop	r29
    48f4:	cf 91       	pop	r28
    48f6:	08 95       	ret

000048f8 <serial_sendBytes>:
    48f8:	ef 92       	push	r14
    48fa:	ff 92       	push	r15
    48fc:	0f 93       	push	r16
    48fe:	1f 93       	push	r17
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	7c 01       	movw	r14, r24
    4906:	00 97       	sbiw	r24, 0x00	; 0
    4908:	09 f4       	brne	.+2      	; 0x490c <serial_sendBytes+0x14>
    490a:	41 c0       	rjmp	.+130    	; 0x498e <serial_sendBytes+0x96>
    490c:	dc 01       	movw	r26, r24
    490e:	12 96       	adiw	r26, 0x02	; 2
    4910:	ed 91       	ld	r30, X+
    4912:	fc 91       	ld	r31, X
    4914:	13 97       	sbiw	r26, 0x03	; 3
    4916:	93 81       	ldd	r25, Z+3	; 0x03
    4918:	82 81       	ldd	r24, Z+2	; 0x02
    491a:	98 1b       	sub	r25, r24
    491c:	85 81       	ldd	r24, Z+5	; 0x05
    491e:	98 23       	and	r25, r24
    4920:	84 81       	ldd	r24, Z+4	; 0x04
    4922:	89 1b       	sub	r24, r25
    4924:	86 17       	cp	r24, r22
    4926:	a8 f1       	brcs	.+106    	; 0x4992 <serial_sendBytes+0x9a>
    4928:	66 23       	and	r22, r22
    492a:	41 f1       	breq	.+80     	; 0x497c <serial_sendBytes+0x84>
    492c:	84 2f       	mov	r24, r20
    492e:	95 2f       	mov	r25, r21
    4930:	dc 01       	movw	r26, r24
    4932:	61 50       	subi	r22, 0x01	; 1
    4934:	46 2f       	mov	r20, r22
    4936:	50 e0       	ldi	r21, 0x00	; 0
    4938:	4f 5f       	subi	r20, 0xFF	; 255
    493a:	5f 4f       	sbci	r21, 0xFF	; 255
    493c:	48 0f       	add	r20, r24
    493e:	59 1f       	adc	r21, r25
    4940:	e7 01       	movw	r28, r14
    4942:	ea 81       	ldd	r30, Y+2	; 0x02
    4944:	fb 81       	ldd	r31, Y+3	; 0x03
    4946:	93 81       	ldd	r25, Z+3	; 0x03
    4948:	82 81       	ldd	r24, Z+2	; 0x02
    494a:	25 81       	ldd	r18, Z+5	; 0x05
    494c:	98 1b       	sub	r25, r24
    494e:	92 23       	and	r25, r18
    4950:	84 81       	ldd	r24, Z+4	; 0x04
    4952:	98 17       	cp	r25, r24
    4954:	79 f0       	breq	.+30     	; 0x4974 <serial_sendBytes+0x7c>
    4956:	8c 91       	ld	r24, X
    4958:	93 81       	ldd	r25, Z+3	; 0x03
    495a:	26 95       	lsr	r18
    495c:	29 23       	and	r18, r25
    495e:	60 81       	ld	r22, Z
    4960:	71 81       	ldd	r23, Z+1	; 0x01
    4962:	8b 01       	movw	r16, r22
    4964:	02 0f       	add	r16, r18
    4966:	11 1d       	adc	r17, r1
    4968:	e8 01       	movw	r28, r16
    496a:	88 83       	st	Y, r24
    496c:	9f 5f       	subi	r25, 0xFF	; 255
    496e:	85 81       	ldd	r24, Z+5	; 0x05
    4970:	98 23       	and	r25, r24
    4972:	93 83       	std	Z+3, r25	; 0x03
    4974:	11 96       	adiw	r26, 0x01	; 1
    4976:	a4 17       	cp	r26, r20
    4978:	b5 07       	cpc	r27, r21
    497a:	11 f7       	brne	.-60     	; 0x4940 <serial_sendBytes+0x48>
    497c:	d7 01       	movw	r26, r14
    497e:	ed 91       	ld	r30, X+
    4980:	fc 91       	ld	r31, X
    4982:	35 97       	sbiw	r30, 0x05	; 5
    4984:	80 81       	ld	r24, Z
    4986:	80 62       	ori	r24, 0x20	; 32
    4988:	80 83       	st	Z, r24
    498a:	80 e0       	ldi	r24, 0x00	; 0
    498c:	03 c0       	rjmp	.+6      	; 0x4994 <serial_sendBytes+0x9c>
    498e:	81 e0       	ldi	r24, 0x01	; 1
    4990:	01 c0       	rjmp	.+2      	; 0x4994 <serial_sendBytes+0x9c>
    4992:	82 e0       	ldi	r24, 0x02	; 2
    4994:	df 91       	pop	r29
    4996:	cf 91       	pop	r28
    4998:	1f 91       	pop	r17
    499a:	0f 91       	pop	r16
    499c:	ff 90       	pop	r15
    499e:	ef 90       	pop	r14
    49a0:	08 95       	ret

000049a2 <serial_getByte>:
    49a2:	00 97       	sbiw	r24, 0x00	; 0
    49a4:	d1 f0       	breq	.+52     	; 0x49da <serial_getByte+0x38>
    49a6:	dc 01       	movw	r26, r24
    49a8:	14 96       	adiw	r26, 0x04	; 4
    49aa:	ed 91       	ld	r30, X+
    49ac:	fc 91       	ld	r31, X
    49ae:	15 97       	sbiw	r26, 0x05	; 5
    49b0:	93 81       	ldd	r25, Z+3	; 0x03
    49b2:	82 81       	ldd	r24, Z+2	; 0x02
    49b4:	98 17       	cp	r25, r24
    49b6:	99 f0       	breq	.+38     	; 0x49de <serial_getByte+0x3c>
    49b8:	92 81       	ldd	r25, Z+2	; 0x02
    49ba:	85 81       	ldd	r24, Z+5	; 0x05
    49bc:	86 95       	lsr	r24
    49be:	89 23       	and	r24, r25
    49c0:	a0 81       	ld	r26, Z
    49c2:	b1 81       	ldd	r27, Z+1	; 0x01
    49c4:	a8 0f       	add	r26, r24
    49c6:	b1 1d       	adc	r27, r1
    49c8:	8c 91       	ld	r24, X
    49ca:	db 01       	movw	r26, r22
    49cc:	8c 93       	st	X, r24
    49ce:	9f 5f       	subi	r25, 0xFF	; 255
    49d0:	85 81       	ldd	r24, Z+5	; 0x05
    49d2:	98 23       	and	r25, r24
    49d4:	92 83       	std	Z+2, r25	; 0x02
    49d6:	80 e0       	ldi	r24, 0x00	; 0
    49d8:	08 95       	ret
    49da:	81 e0       	ldi	r24, 0x01	; 1
    49dc:	08 95       	ret
    49de:	83 e0       	ldi	r24, 0x03	; 3
    49e0:	08 95       	ret

000049e2 <__vector_25>:
    49e2:	1f 92       	push	r1
    49e4:	0f 92       	push	r0
    49e6:	0f b6       	in	r0, 0x3f	; 63
    49e8:	0f 92       	push	r0
    49ea:	11 24       	eor	r1, r1
    49ec:	0b b6       	in	r0, 0x3b	; 59
    49ee:	0f 92       	push	r0
    49f0:	2f 93       	push	r18
    49f2:	3f 93       	push	r19
    49f4:	4f 93       	push	r20
    49f6:	5f 93       	push	r21
    49f8:	6f 93       	push	r22
    49fa:	7f 93       	push	r23
    49fc:	8f 93       	push	r24
    49fe:	9f 93       	push	r25
    4a00:	af 93       	push	r26
    4a02:	bf 93       	push	r27
    4a04:	cf 93       	push	r28
    4a06:	df 93       	push	r29
    4a08:	ef 93       	push	r30
    4a0a:	ff 93       	push	r31
    4a0c:	a0 91 e7 17 	lds	r26, 0x17E7	; 0x8017e7 <_ser_handle>
    4a10:	b0 91 e8 17 	lds	r27, 0x17E8	; 0x8017e8 <_ser_handle+0x1>
    4a14:	10 97       	sbiw	r26, 0x00	; 0
    4a16:	11 f1       	breq	.+68     	; 0x4a5c <__vector_25+0x7a>
    4a18:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4a1c:	14 96       	adiw	r26, 0x04	; 4
    4a1e:	ed 91       	ld	r30, X+
    4a20:	fc 91       	ld	r31, X
    4a22:	15 97       	sbiw	r26, 0x05	; 5
    4a24:	93 81       	ldd	r25, Z+3	; 0x03
    4a26:	82 81       	ldd	r24, Z+2	; 0x02
    4a28:	25 81       	ldd	r18, Z+5	; 0x05
    4a2a:	98 1b       	sub	r25, r24
    4a2c:	92 23       	and	r25, r18
    4a2e:	84 81       	ldd	r24, Z+4	; 0x04
    4a30:	98 17       	cp	r25, r24
    4a32:	61 f0       	breq	.+24     	; 0x4a4c <__vector_25+0x6a>
    4a34:	83 81       	ldd	r24, Z+3	; 0x03
    4a36:	26 95       	lsr	r18
    4a38:	28 23       	and	r18, r24
    4a3a:	c0 81       	ld	r28, Z
    4a3c:	d1 81       	ldd	r29, Z+1	; 0x01
    4a3e:	c2 0f       	add	r28, r18
    4a40:	d1 1d       	adc	r29, r1
    4a42:	68 83       	st	Y, r22
    4a44:	8f 5f       	subi	r24, 0xFF	; 255
    4a46:	95 81       	ldd	r25, Z+5	; 0x05
    4a48:	89 23       	and	r24, r25
    4a4a:	83 83       	std	Z+3, r24	; 0x03
    4a4c:	16 96       	adiw	r26, 0x06	; 6
    4a4e:	ed 91       	ld	r30, X+
    4a50:	fc 91       	ld	r31, X
    4a52:	17 97       	sbiw	r26, 0x07	; 7
    4a54:	30 97       	sbiw	r30, 0x00	; 0
    4a56:	11 f0       	breq	.+4      	; 0x4a5c <__vector_25+0x7a>
    4a58:	cd 01       	movw	r24, r26
    4a5a:	19 95       	eicall
    4a5c:	ff 91       	pop	r31
    4a5e:	ef 91       	pop	r30
    4a60:	df 91       	pop	r29
    4a62:	cf 91       	pop	r28
    4a64:	bf 91       	pop	r27
    4a66:	af 91       	pop	r26
    4a68:	9f 91       	pop	r25
    4a6a:	8f 91       	pop	r24
    4a6c:	7f 91       	pop	r23
    4a6e:	6f 91       	pop	r22
    4a70:	5f 91       	pop	r21
    4a72:	4f 91       	pop	r20
    4a74:	3f 91       	pop	r19
    4a76:	2f 91       	pop	r18
    4a78:	0f 90       	pop	r0
    4a7a:	0b be       	out	0x3b, r0	; 59
    4a7c:	0f 90       	pop	r0
    4a7e:	0f be       	out	0x3f, r0	; 63
    4a80:	0f 90       	pop	r0
    4a82:	1f 90       	pop	r1
    4a84:	18 95       	reti

00004a86 <__vector_26>:
    4a86:	1f 92       	push	r1
    4a88:	0f 92       	push	r0
    4a8a:	0f b6       	in	r0, 0x3f	; 63
    4a8c:	0f 92       	push	r0
    4a8e:	11 24       	eor	r1, r1
    4a90:	0b b6       	in	r0, 0x3b	; 59
    4a92:	0f 92       	push	r0
    4a94:	2f 93       	push	r18
    4a96:	8f 93       	push	r24
    4a98:	9f 93       	push	r25
    4a9a:	af 93       	push	r26
    4a9c:	bf 93       	push	r27
    4a9e:	ef 93       	push	r30
    4aa0:	ff 93       	push	r31
    4aa2:	e0 91 e7 17 	lds	r30, 0x17E7	; 0x8017e7 <_ser_handle>
    4aa6:	f0 91 e8 17 	lds	r31, 0x17E8	; 0x8017e8 <_ser_handle+0x1>
    4aaa:	30 97       	sbiw	r30, 0x00	; 0
    4aac:	b9 f0       	breq	.+46     	; 0x4adc <__vector_26+0x56>
    4aae:	02 80       	ldd	r0, Z+2	; 0x02
    4ab0:	f3 81       	ldd	r31, Z+3	; 0x03
    4ab2:	e0 2d       	mov	r30, r0
    4ab4:	93 81       	ldd	r25, Z+3	; 0x03
    4ab6:	82 81       	ldd	r24, Z+2	; 0x02
    4ab8:	98 17       	cp	r25, r24
    4aba:	b1 f0       	breq	.+44     	; 0x4ae8 <__vector_26+0x62>
    4abc:	92 81       	ldd	r25, Z+2	; 0x02
    4abe:	85 81       	ldd	r24, Z+5	; 0x05
    4ac0:	28 2f       	mov	r18, r24
    4ac2:	26 95       	lsr	r18
    4ac4:	29 23       	and	r18, r25
    4ac6:	a0 81       	ld	r26, Z
    4ac8:	b1 81       	ldd	r27, Z+1	; 0x01
    4aca:	a2 0f       	add	r26, r18
    4acc:	b1 1d       	adc	r27, r1
    4ace:	2c 91       	ld	r18, X
    4ad0:	9f 5f       	subi	r25, 0xFF	; 255
    4ad2:	89 23       	and	r24, r25
    4ad4:	82 83       	std	Z+2, r24	; 0x02
    4ad6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4ada:	0b c0       	rjmp	.+22     	; 0x4af2 <__vector_26+0x6c>
    4adc:	e1 ec       	ldi	r30, 0xC1	; 193
    4ade:	f0 e0       	ldi	r31, 0x00	; 0
    4ae0:	80 81       	ld	r24, Z
    4ae2:	8f 7d       	andi	r24, 0xDF	; 223
    4ae4:	80 83       	st	Z, r24
    4ae6:	05 c0       	rjmp	.+10     	; 0x4af2 <__vector_26+0x6c>
    4ae8:	e1 ec       	ldi	r30, 0xC1	; 193
    4aea:	f0 e0       	ldi	r31, 0x00	; 0
    4aec:	80 81       	ld	r24, Z
    4aee:	8f 7d       	andi	r24, 0xDF	; 223
    4af0:	80 83       	st	Z, r24
    4af2:	ff 91       	pop	r31
    4af4:	ef 91       	pop	r30
    4af6:	bf 91       	pop	r27
    4af8:	af 91       	pop	r26
    4afa:	9f 91       	pop	r25
    4afc:	8f 91       	pop	r24
    4afe:	2f 91       	pop	r18
    4b00:	0f 90       	pop	r0
    4b02:	0b be       	out	0x3b, r0	; 59
    4b04:	0f 90       	pop	r0
    4b06:	0f be       	out	0x3f, r0	; 63
    4b08:	0f 90       	pop	r0
    4b0a:	1f 90       	pop	r1
    4b0c:	18 95       	reti

00004b0e <__vector_36>:
    4b0e:	1f 92       	push	r1
    4b10:	0f 92       	push	r0
    4b12:	0f b6       	in	r0, 0x3f	; 63
    4b14:	0f 92       	push	r0
    4b16:	11 24       	eor	r1, r1
    4b18:	0b b6       	in	r0, 0x3b	; 59
    4b1a:	0f 92       	push	r0
    4b1c:	2f 93       	push	r18
    4b1e:	3f 93       	push	r19
    4b20:	4f 93       	push	r20
    4b22:	5f 93       	push	r21
    4b24:	6f 93       	push	r22
    4b26:	7f 93       	push	r23
    4b28:	8f 93       	push	r24
    4b2a:	9f 93       	push	r25
    4b2c:	af 93       	push	r26
    4b2e:	bf 93       	push	r27
    4b30:	cf 93       	push	r28
    4b32:	df 93       	push	r29
    4b34:	ef 93       	push	r30
    4b36:	ff 93       	push	r31
    4b38:	a0 91 e9 17 	lds	r26, 0x17E9	; 0x8017e9 <_ser_handle+0x2>
    4b3c:	b0 91 ea 17 	lds	r27, 0x17EA	; 0x8017ea <_ser_handle+0x3>
    4b40:	10 97       	sbiw	r26, 0x00	; 0
    4b42:	11 f1       	breq	.+68     	; 0x4b88 <__vector_36+0x7a>
    4b44:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4b48:	14 96       	adiw	r26, 0x04	; 4
    4b4a:	ed 91       	ld	r30, X+
    4b4c:	fc 91       	ld	r31, X
    4b4e:	15 97       	sbiw	r26, 0x05	; 5
    4b50:	93 81       	ldd	r25, Z+3	; 0x03
    4b52:	82 81       	ldd	r24, Z+2	; 0x02
    4b54:	25 81       	ldd	r18, Z+5	; 0x05
    4b56:	98 1b       	sub	r25, r24
    4b58:	92 23       	and	r25, r18
    4b5a:	84 81       	ldd	r24, Z+4	; 0x04
    4b5c:	98 17       	cp	r25, r24
    4b5e:	61 f0       	breq	.+24     	; 0x4b78 <__vector_36+0x6a>
    4b60:	83 81       	ldd	r24, Z+3	; 0x03
    4b62:	26 95       	lsr	r18
    4b64:	28 23       	and	r18, r24
    4b66:	c0 81       	ld	r28, Z
    4b68:	d1 81       	ldd	r29, Z+1	; 0x01
    4b6a:	c2 0f       	add	r28, r18
    4b6c:	d1 1d       	adc	r29, r1
    4b6e:	68 83       	st	Y, r22
    4b70:	8f 5f       	subi	r24, 0xFF	; 255
    4b72:	95 81       	ldd	r25, Z+5	; 0x05
    4b74:	89 23       	and	r24, r25
    4b76:	83 83       	std	Z+3, r24	; 0x03
    4b78:	16 96       	adiw	r26, 0x06	; 6
    4b7a:	ed 91       	ld	r30, X+
    4b7c:	fc 91       	ld	r31, X
    4b7e:	17 97       	sbiw	r26, 0x07	; 7
    4b80:	30 97       	sbiw	r30, 0x00	; 0
    4b82:	11 f0       	breq	.+4      	; 0x4b88 <__vector_36+0x7a>
    4b84:	cd 01       	movw	r24, r26
    4b86:	19 95       	eicall
    4b88:	ff 91       	pop	r31
    4b8a:	ef 91       	pop	r30
    4b8c:	df 91       	pop	r29
    4b8e:	cf 91       	pop	r28
    4b90:	bf 91       	pop	r27
    4b92:	af 91       	pop	r26
    4b94:	9f 91       	pop	r25
    4b96:	8f 91       	pop	r24
    4b98:	7f 91       	pop	r23
    4b9a:	6f 91       	pop	r22
    4b9c:	5f 91       	pop	r21
    4b9e:	4f 91       	pop	r20
    4ba0:	3f 91       	pop	r19
    4ba2:	2f 91       	pop	r18
    4ba4:	0f 90       	pop	r0
    4ba6:	0b be       	out	0x3b, r0	; 59
    4ba8:	0f 90       	pop	r0
    4baa:	0f be       	out	0x3f, r0	; 63
    4bac:	0f 90       	pop	r0
    4bae:	1f 90       	pop	r1
    4bb0:	18 95       	reti

00004bb2 <__vector_37>:
    4bb2:	1f 92       	push	r1
    4bb4:	0f 92       	push	r0
    4bb6:	0f b6       	in	r0, 0x3f	; 63
    4bb8:	0f 92       	push	r0
    4bba:	11 24       	eor	r1, r1
    4bbc:	0b b6       	in	r0, 0x3b	; 59
    4bbe:	0f 92       	push	r0
    4bc0:	2f 93       	push	r18
    4bc2:	8f 93       	push	r24
    4bc4:	9f 93       	push	r25
    4bc6:	af 93       	push	r26
    4bc8:	bf 93       	push	r27
    4bca:	ef 93       	push	r30
    4bcc:	ff 93       	push	r31
    4bce:	e0 91 e9 17 	lds	r30, 0x17E9	; 0x8017e9 <_ser_handle+0x2>
    4bd2:	f0 91 ea 17 	lds	r31, 0x17EA	; 0x8017ea <_ser_handle+0x3>
    4bd6:	30 97       	sbiw	r30, 0x00	; 0
    4bd8:	b9 f0       	breq	.+46     	; 0x4c08 <__vector_37+0x56>
    4bda:	02 80       	ldd	r0, Z+2	; 0x02
    4bdc:	f3 81       	ldd	r31, Z+3	; 0x03
    4bde:	e0 2d       	mov	r30, r0
    4be0:	93 81       	ldd	r25, Z+3	; 0x03
    4be2:	82 81       	ldd	r24, Z+2	; 0x02
    4be4:	98 17       	cp	r25, r24
    4be6:	b1 f0       	breq	.+44     	; 0x4c14 <__vector_37+0x62>
    4be8:	92 81       	ldd	r25, Z+2	; 0x02
    4bea:	85 81       	ldd	r24, Z+5	; 0x05
    4bec:	28 2f       	mov	r18, r24
    4bee:	26 95       	lsr	r18
    4bf0:	29 23       	and	r18, r25
    4bf2:	a0 81       	ld	r26, Z
    4bf4:	b1 81       	ldd	r27, Z+1	; 0x01
    4bf6:	a2 0f       	add	r26, r18
    4bf8:	b1 1d       	adc	r27, r1
    4bfa:	2c 91       	ld	r18, X
    4bfc:	9f 5f       	subi	r25, 0xFF	; 255
    4bfe:	89 23       	and	r24, r25
    4c00:	82 83       	std	Z+2, r24	; 0x02
    4c02:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4c06:	0b c0       	rjmp	.+22     	; 0x4c1e <__vector_37+0x6c>
    4c08:	e9 ec       	ldi	r30, 0xC9	; 201
    4c0a:	f0 e0       	ldi	r31, 0x00	; 0
    4c0c:	80 81       	ld	r24, Z
    4c0e:	8f 7d       	andi	r24, 0xDF	; 223
    4c10:	80 83       	st	Z, r24
    4c12:	05 c0       	rjmp	.+10     	; 0x4c1e <__vector_37+0x6c>
    4c14:	e9 ec       	ldi	r30, 0xC9	; 201
    4c16:	f0 e0       	ldi	r31, 0x00	; 0
    4c18:	80 81       	ld	r24, Z
    4c1a:	8f 7d       	andi	r24, 0xDF	; 223
    4c1c:	80 83       	st	Z, r24
    4c1e:	ff 91       	pop	r31
    4c20:	ef 91       	pop	r30
    4c22:	bf 91       	pop	r27
    4c24:	af 91       	pop	r26
    4c26:	9f 91       	pop	r25
    4c28:	8f 91       	pop	r24
    4c2a:	2f 91       	pop	r18
    4c2c:	0f 90       	pop	r0
    4c2e:	0b be       	out	0x3b, r0	; 59
    4c30:	0f 90       	pop	r0
    4c32:	0f be       	out	0x3f, r0	; 63
    4c34:	0f 90       	pop	r0
    4c36:	1f 90       	pop	r1
    4c38:	18 95       	reti

00004c3a <__vector_51>:
    4c3a:	1f 92       	push	r1
    4c3c:	0f 92       	push	r0
    4c3e:	0f b6       	in	r0, 0x3f	; 63
    4c40:	0f 92       	push	r0
    4c42:	11 24       	eor	r1, r1
    4c44:	0b b6       	in	r0, 0x3b	; 59
    4c46:	0f 92       	push	r0
    4c48:	2f 93       	push	r18
    4c4a:	3f 93       	push	r19
    4c4c:	4f 93       	push	r20
    4c4e:	5f 93       	push	r21
    4c50:	6f 93       	push	r22
    4c52:	7f 93       	push	r23
    4c54:	8f 93       	push	r24
    4c56:	9f 93       	push	r25
    4c58:	af 93       	push	r26
    4c5a:	bf 93       	push	r27
    4c5c:	cf 93       	push	r28
    4c5e:	df 93       	push	r29
    4c60:	ef 93       	push	r30
    4c62:	ff 93       	push	r31
    4c64:	a0 91 eb 17 	lds	r26, 0x17EB	; 0x8017eb <_ser_handle+0x4>
    4c68:	b0 91 ec 17 	lds	r27, 0x17EC	; 0x8017ec <_ser_handle+0x5>
    4c6c:	10 97       	sbiw	r26, 0x00	; 0
    4c6e:	11 f1       	breq	.+68     	; 0x4cb4 <__vector_51+0x7a>
    4c70:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4c74:	14 96       	adiw	r26, 0x04	; 4
    4c76:	ed 91       	ld	r30, X+
    4c78:	fc 91       	ld	r31, X
    4c7a:	15 97       	sbiw	r26, 0x05	; 5
    4c7c:	93 81       	ldd	r25, Z+3	; 0x03
    4c7e:	82 81       	ldd	r24, Z+2	; 0x02
    4c80:	25 81       	ldd	r18, Z+5	; 0x05
    4c82:	98 1b       	sub	r25, r24
    4c84:	92 23       	and	r25, r18
    4c86:	84 81       	ldd	r24, Z+4	; 0x04
    4c88:	98 17       	cp	r25, r24
    4c8a:	61 f0       	breq	.+24     	; 0x4ca4 <__vector_51+0x6a>
    4c8c:	83 81       	ldd	r24, Z+3	; 0x03
    4c8e:	26 95       	lsr	r18
    4c90:	28 23       	and	r18, r24
    4c92:	c0 81       	ld	r28, Z
    4c94:	d1 81       	ldd	r29, Z+1	; 0x01
    4c96:	c2 0f       	add	r28, r18
    4c98:	d1 1d       	adc	r29, r1
    4c9a:	68 83       	st	Y, r22
    4c9c:	8f 5f       	subi	r24, 0xFF	; 255
    4c9e:	95 81       	ldd	r25, Z+5	; 0x05
    4ca0:	89 23       	and	r24, r25
    4ca2:	83 83       	std	Z+3, r24	; 0x03
    4ca4:	16 96       	adiw	r26, 0x06	; 6
    4ca6:	ed 91       	ld	r30, X+
    4ca8:	fc 91       	ld	r31, X
    4caa:	17 97       	sbiw	r26, 0x07	; 7
    4cac:	30 97       	sbiw	r30, 0x00	; 0
    4cae:	11 f0       	breq	.+4      	; 0x4cb4 <__vector_51+0x7a>
    4cb0:	cd 01       	movw	r24, r26
    4cb2:	19 95       	eicall
    4cb4:	ff 91       	pop	r31
    4cb6:	ef 91       	pop	r30
    4cb8:	df 91       	pop	r29
    4cba:	cf 91       	pop	r28
    4cbc:	bf 91       	pop	r27
    4cbe:	af 91       	pop	r26
    4cc0:	9f 91       	pop	r25
    4cc2:	8f 91       	pop	r24
    4cc4:	7f 91       	pop	r23
    4cc6:	6f 91       	pop	r22
    4cc8:	5f 91       	pop	r21
    4cca:	4f 91       	pop	r20
    4ccc:	3f 91       	pop	r19
    4cce:	2f 91       	pop	r18
    4cd0:	0f 90       	pop	r0
    4cd2:	0b be       	out	0x3b, r0	; 59
    4cd4:	0f 90       	pop	r0
    4cd6:	0f be       	out	0x3f, r0	; 63
    4cd8:	0f 90       	pop	r0
    4cda:	1f 90       	pop	r1
    4cdc:	18 95       	reti

00004cde <__vector_52>:
    4cde:	1f 92       	push	r1
    4ce0:	0f 92       	push	r0
    4ce2:	0f b6       	in	r0, 0x3f	; 63
    4ce4:	0f 92       	push	r0
    4ce6:	11 24       	eor	r1, r1
    4ce8:	0b b6       	in	r0, 0x3b	; 59
    4cea:	0f 92       	push	r0
    4cec:	2f 93       	push	r18
    4cee:	8f 93       	push	r24
    4cf0:	9f 93       	push	r25
    4cf2:	af 93       	push	r26
    4cf4:	bf 93       	push	r27
    4cf6:	ef 93       	push	r30
    4cf8:	ff 93       	push	r31
    4cfa:	e0 91 eb 17 	lds	r30, 0x17EB	; 0x8017eb <_ser_handle+0x4>
    4cfe:	f0 91 ec 17 	lds	r31, 0x17EC	; 0x8017ec <_ser_handle+0x5>
    4d02:	30 97       	sbiw	r30, 0x00	; 0
    4d04:	b9 f0       	breq	.+46     	; 0x4d34 <__vector_52+0x56>
    4d06:	02 80       	ldd	r0, Z+2	; 0x02
    4d08:	f3 81       	ldd	r31, Z+3	; 0x03
    4d0a:	e0 2d       	mov	r30, r0
    4d0c:	93 81       	ldd	r25, Z+3	; 0x03
    4d0e:	82 81       	ldd	r24, Z+2	; 0x02
    4d10:	98 17       	cp	r25, r24
    4d12:	b1 f0       	breq	.+44     	; 0x4d40 <__vector_52+0x62>
    4d14:	92 81       	ldd	r25, Z+2	; 0x02
    4d16:	85 81       	ldd	r24, Z+5	; 0x05
    4d18:	28 2f       	mov	r18, r24
    4d1a:	26 95       	lsr	r18
    4d1c:	29 23       	and	r18, r25
    4d1e:	a0 81       	ld	r26, Z
    4d20:	b1 81       	ldd	r27, Z+1	; 0x01
    4d22:	a2 0f       	add	r26, r18
    4d24:	b1 1d       	adc	r27, r1
    4d26:	2c 91       	ld	r18, X
    4d28:	9f 5f       	subi	r25, 0xFF	; 255
    4d2a:	89 23       	and	r24, r25
    4d2c:	82 83       	std	Z+2, r24	; 0x02
    4d2e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4d32:	0b c0       	rjmp	.+22     	; 0x4d4a <__vector_52+0x6c>
    4d34:	e1 ed       	ldi	r30, 0xD1	; 209
    4d36:	f0 e0       	ldi	r31, 0x00	; 0
    4d38:	80 81       	ld	r24, Z
    4d3a:	8f 7d       	andi	r24, 0xDF	; 223
    4d3c:	80 83       	st	Z, r24
    4d3e:	05 c0       	rjmp	.+10     	; 0x4d4a <__vector_52+0x6c>
    4d40:	e1 ed       	ldi	r30, 0xD1	; 209
    4d42:	f0 e0       	ldi	r31, 0x00	; 0
    4d44:	80 81       	ld	r24, Z
    4d46:	8f 7d       	andi	r24, 0xDF	; 223
    4d48:	80 83       	st	Z, r24
    4d4a:	ff 91       	pop	r31
    4d4c:	ef 91       	pop	r30
    4d4e:	bf 91       	pop	r27
    4d50:	af 91       	pop	r26
    4d52:	9f 91       	pop	r25
    4d54:	8f 91       	pop	r24
    4d56:	2f 91       	pop	r18
    4d58:	0f 90       	pop	r0
    4d5a:	0b be       	out	0x3b, r0	; 59
    4d5c:	0f 90       	pop	r0
    4d5e:	0f be       	out	0x3f, r0	; 63
    4d60:	0f 90       	pop	r0
    4d62:	1f 90       	pop	r1
    4d64:	18 95       	reti

00004d66 <__vector_54>:
    4d66:	1f 92       	push	r1
    4d68:	0f 92       	push	r0
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	0f 92       	push	r0
    4d6e:	11 24       	eor	r1, r1
    4d70:	0b b6       	in	r0, 0x3b	; 59
    4d72:	0f 92       	push	r0
    4d74:	2f 93       	push	r18
    4d76:	3f 93       	push	r19
    4d78:	4f 93       	push	r20
    4d7a:	5f 93       	push	r21
    4d7c:	6f 93       	push	r22
    4d7e:	7f 93       	push	r23
    4d80:	8f 93       	push	r24
    4d82:	9f 93       	push	r25
    4d84:	af 93       	push	r26
    4d86:	bf 93       	push	r27
    4d88:	cf 93       	push	r28
    4d8a:	df 93       	push	r29
    4d8c:	ef 93       	push	r30
    4d8e:	ff 93       	push	r31
    4d90:	a0 91 ed 17 	lds	r26, 0x17ED	; 0x8017ed <_ser_handle+0x6>
    4d94:	b0 91 ee 17 	lds	r27, 0x17EE	; 0x8017ee <_ser_handle+0x7>
    4d98:	10 97       	sbiw	r26, 0x00	; 0
    4d9a:	11 f1       	breq	.+68     	; 0x4de0 <__vector_54+0x7a>
    4d9c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4da0:	14 96       	adiw	r26, 0x04	; 4
    4da2:	ed 91       	ld	r30, X+
    4da4:	fc 91       	ld	r31, X
    4da6:	15 97       	sbiw	r26, 0x05	; 5
    4da8:	93 81       	ldd	r25, Z+3	; 0x03
    4daa:	82 81       	ldd	r24, Z+2	; 0x02
    4dac:	25 81       	ldd	r18, Z+5	; 0x05
    4dae:	98 1b       	sub	r25, r24
    4db0:	92 23       	and	r25, r18
    4db2:	84 81       	ldd	r24, Z+4	; 0x04
    4db4:	98 17       	cp	r25, r24
    4db6:	61 f0       	breq	.+24     	; 0x4dd0 <__vector_54+0x6a>
    4db8:	83 81       	ldd	r24, Z+3	; 0x03
    4dba:	26 95       	lsr	r18
    4dbc:	28 23       	and	r18, r24
    4dbe:	c0 81       	ld	r28, Z
    4dc0:	d1 81       	ldd	r29, Z+1	; 0x01
    4dc2:	c2 0f       	add	r28, r18
    4dc4:	d1 1d       	adc	r29, r1
    4dc6:	68 83       	st	Y, r22
    4dc8:	8f 5f       	subi	r24, 0xFF	; 255
    4dca:	95 81       	ldd	r25, Z+5	; 0x05
    4dcc:	89 23       	and	r24, r25
    4dce:	83 83       	std	Z+3, r24	; 0x03
    4dd0:	16 96       	adiw	r26, 0x06	; 6
    4dd2:	ed 91       	ld	r30, X+
    4dd4:	fc 91       	ld	r31, X
    4dd6:	17 97       	sbiw	r26, 0x07	; 7
    4dd8:	30 97       	sbiw	r30, 0x00	; 0
    4dda:	11 f0       	breq	.+4      	; 0x4de0 <__vector_54+0x7a>
    4ddc:	cd 01       	movw	r24, r26
    4dde:	19 95       	eicall
    4de0:	ff 91       	pop	r31
    4de2:	ef 91       	pop	r30
    4de4:	df 91       	pop	r29
    4de6:	cf 91       	pop	r28
    4de8:	bf 91       	pop	r27
    4dea:	af 91       	pop	r26
    4dec:	9f 91       	pop	r25
    4dee:	8f 91       	pop	r24
    4df0:	7f 91       	pop	r23
    4df2:	6f 91       	pop	r22
    4df4:	5f 91       	pop	r21
    4df6:	4f 91       	pop	r20
    4df8:	3f 91       	pop	r19
    4dfa:	2f 91       	pop	r18
    4dfc:	0f 90       	pop	r0
    4dfe:	0b be       	out	0x3b, r0	; 59
    4e00:	0f 90       	pop	r0
    4e02:	0f be       	out	0x3f, r0	; 63
    4e04:	0f 90       	pop	r0
    4e06:	1f 90       	pop	r1
    4e08:	18 95       	reti

00004e0a <__vector_55>:
    4e0a:	1f 92       	push	r1
    4e0c:	0f 92       	push	r0
    4e0e:	0f b6       	in	r0, 0x3f	; 63
    4e10:	0f 92       	push	r0
    4e12:	11 24       	eor	r1, r1
    4e14:	0b b6       	in	r0, 0x3b	; 59
    4e16:	0f 92       	push	r0
    4e18:	2f 93       	push	r18
    4e1a:	8f 93       	push	r24
    4e1c:	9f 93       	push	r25
    4e1e:	af 93       	push	r26
    4e20:	bf 93       	push	r27
    4e22:	ef 93       	push	r30
    4e24:	ff 93       	push	r31
    4e26:	e0 91 ed 17 	lds	r30, 0x17ED	; 0x8017ed <_ser_handle+0x6>
    4e2a:	f0 91 ee 17 	lds	r31, 0x17EE	; 0x8017ee <_ser_handle+0x7>
    4e2e:	30 97       	sbiw	r30, 0x00	; 0
    4e30:	b9 f0       	breq	.+46     	; 0x4e60 <__vector_55+0x56>
    4e32:	02 80       	ldd	r0, Z+2	; 0x02
    4e34:	f3 81       	ldd	r31, Z+3	; 0x03
    4e36:	e0 2d       	mov	r30, r0
    4e38:	93 81       	ldd	r25, Z+3	; 0x03
    4e3a:	82 81       	ldd	r24, Z+2	; 0x02
    4e3c:	98 17       	cp	r25, r24
    4e3e:	b1 f0       	breq	.+44     	; 0x4e6c <__vector_55+0x62>
    4e40:	92 81       	ldd	r25, Z+2	; 0x02
    4e42:	85 81       	ldd	r24, Z+5	; 0x05
    4e44:	28 2f       	mov	r18, r24
    4e46:	26 95       	lsr	r18
    4e48:	29 23       	and	r18, r25
    4e4a:	a0 81       	ld	r26, Z
    4e4c:	b1 81       	ldd	r27, Z+1	; 0x01
    4e4e:	a2 0f       	add	r26, r18
    4e50:	b1 1d       	adc	r27, r1
    4e52:	2c 91       	ld	r18, X
    4e54:	9f 5f       	subi	r25, 0xFF	; 255
    4e56:	89 23       	and	r24, r25
    4e58:	82 83       	std	Z+2, r24	; 0x02
    4e5a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4e5e:	0b c0       	rjmp	.+22     	; 0x4e76 <__vector_55+0x6c>
    4e60:	e1 e3       	ldi	r30, 0x31	; 49
    4e62:	f1 e0       	ldi	r31, 0x01	; 1
    4e64:	80 81       	ld	r24, Z
    4e66:	8f 7d       	andi	r24, 0xDF	; 223
    4e68:	80 83       	st	Z, r24
    4e6a:	05 c0       	rjmp	.+10     	; 0x4e76 <__vector_55+0x6c>
    4e6c:	e1 e3       	ldi	r30, 0x31	; 49
    4e6e:	f1 e0       	ldi	r31, 0x01	; 1
    4e70:	80 81       	ld	r24, Z
    4e72:	8f 7d       	andi	r24, 0xDF	; 223
    4e74:	80 83       	st	Z, r24
    4e76:	ff 91       	pop	r31
    4e78:	ef 91       	pop	r30
    4e7a:	bf 91       	pop	r27
    4e7c:	af 91       	pop	r26
    4e7e:	9f 91       	pop	r25
    4e80:	8f 91       	pop	r24
    4e82:	2f 91       	pop	r18
    4e84:	0f 90       	pop	r0
    4e86:	0b be       	out	0x3b, r0	; 59
    4e88:	0f 90       	pop	r0
    4e8a:	0f be       	out	0x3f, r0	; 63
    4e8c:	0f 90       	pop	r0
    4e8e:	1f 90       	pop	r1
    4e90:	18 95       	reti

00004e92 <usart_getchar>:
    4e92:	cf 93       	push	r28
    4e94:	df 93       	push	r29
    4e96:	1f 92       	push	r1
    4e98:	cd b7       	in	r28, 0x3d	; 61
    4e9a:	de b7       	in	r29, 0x3e	; 62
    4e9c:	be 01       	movw	r22, r28
    4e9e:	6f 5f       	subi	r22, 0xFF	; 255
    4ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ea2:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <_com_serial_instance>
    4ea6:	90 91 f0 17 	lds	r25, 0x17F0	; 0x8017f0 <_com_serial_instance+0x1>
    4eaa:	7b dd       	rcall	.-1290   	; 0x49a2 <serial_getByte>
    4eac:	81 11       	cpse	r24, r1
    4eae:	f6 cf       	rjmp	.-20     	; 0x4e9c <usart_getchar+0xa>
    4eb0:	89 81       	ldd	r24, Y+1	; 0x01
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	0f 90       	pop	r0
    4eb6:	df 91       	pop	r29
    4eb8:	cf 91       	pop	r28
    4eba:	08 95       	ret

00004ebc <usart_putchar>:
    4ebc:	68 2f       	mov	r22, r24
    4ebe:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <_com_serial_instance>
    4ec2:	90 91 f0 17 	lds	r25, 0x17F0	; 0x8017f0 <_com_serial_instance+0x1>
    4ec6:	ed dc       	rcall	.-1574   	; 0x48a2 <serial_sendByte>
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	08 95       	ret

00004ece <stdio_initialise>:
    4ece:	8f 92       	push	r8
    4ed0:	9f 92       	push	r9
    4ed2:	af 92       	push	r10
    4ed4:	cf 92       	push	r12
    4ed6:	ef 92       	push	r14
    4ed8:	0f 93       	push	r16
    4eda:	81 2c       	mov	r8, r1
    4edc:	91 2c       	mov	r9, r1
    4ede:	68 94       	set
    4ee0:	aa 24       	eor	r10, r10
    4ee2:	a7 f8       	bld	r10, 7
    4ee4:	68 94       	set
    4ee6:	cc 24       	eor	r12, r12
    4ee8:	c7 f8       	bld	r12, 7
    4eea:	e1 2c       	mov	r14, r1
    4eec:	00 e0       	ldi	r16, 0x00	; 0
    4eee:	23 e0       	ldi	r18, 0x03	; 3
    4ef0:	40 e0       	ldi	r20, 0x00	; 0
    4ef2:	51 ee       	ldi	r21, 0xE1	; 225
    4ef4:	60 e0       	ldi	r22, 0x00	; 0
    4ef6:	70 e0       	ldi	r23, 0x00	; 0
    4ef8:	2e dc       	rcall	.-1956   	; 0x4756 <serial_create>
    4efa:	90 93 f0 17 	sts	0x17F0, r25	; 0x8017f0 <_com_serial_instance+0x1>
    4efe:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <_com_serial_instance>
    4f02:	e3 e2       	ldi	r30, 0x23	; 35
    4f04:	f8 e1       	ldi	r31, 0x18	; 24
    4f06:	83 e1       	ldi	r24, 0x13	; 19
    4f08:	92 e0       	ldi	r25, 0x02	; 2
    4f0a:	91 83       	std	Z+1, r25	; 0x01
    4f0c:	80 83       	st	Z, r24
    4f0e:	93 83       	std	Z+3, r25	; 0x03
    4f10:	82 83       	std	Z+2, r24	; 0x02
    4f12:	0f 91       	pop	r16
    4f14:	ef 90       	pop	r14
    4f16:	cf 90       	pop	r12
    4f18:	af 90       	pop	r10
    4f1a:	9f 90       	pop	r9
    4f1c:	8f 90       	pop	r8
    4f1e:	08 95       	ret

00004f20 <_turn_off>:
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	fc 01       	movw	r30, r24
    4f24:	ee 0f       	add	r30, r30
    4f26:	ff 1f       	adc	r31, r31
    4f28:	e8 0f       	add	r30, r24
    4f2a:	f9 1f       	adc	r31, r25
    4f2c:	ee 0f       	add	r30, r30
    4f2e:	ff 1f       	adc	r31, r31
    4f30:	ef 50       	subi	r30, 0x0F	; 15
    4f32:	f8 4e       	sbci	r31, 0xE8	; 232
    4f34:	23 81       	ldd	r18, Z+3	; 0x03
    4f36:	21 11       	cpse	r18, r1
    4f38:	1f c0       	rjmp	.+62     	; 0x4f78 <_turn_off+0x58>
    4f3a:	9c 01       	movw	r18, r24
    4f3c:	22 0f       	add	r18, r18
    4f3e:	33 1f       	adc	r19, r19
    4f40:	f9 01       	movw	r30, r18
    4f42:	e8 0f       	add	r30, r24
    4f44:	f9 1f       	adc	r31, r25
    4f46:	ee 0f       	add	r30, r30
    4f48:	ff 1f       	adc	r31, r31
    4f4a:	ef 50       	subi	r30, 0x0F	; 15
    4f4c:	f8 4e       	sbci	r31, 0xE8	; 232
    4f4e:	a0 81       	ld	r26, Z
    4f50:	b1 81       	ldd	r27, Z+1	; 0x01
    4f52:	4c 91       	ld	r20, X
    4f54:	f9 01       	movw	r30, r18
    4f56:	e8 0f       	add	r30, r24
    4f58:	f9 1f       	adc	r31, r25
    4f5a:	ee 0f       	add	r30, r30
    4f5c:	ff 1f       	adc	r31, r31
    4f5e:	ef 50       	subi	r30, 0x0F	; 15
    4f60:	f8 4e       	sbci	r31, 0xE8	; 232
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	02 80       	ldd	r0, Z+2	; 0x02
    4f68:	02 c0       	rjmp	.+4      	; 0x4f6e <_turn_off+0x4e>
    4f6a:	88 0f       	add	r24, r24
    4f6c:	99 1f       	adc	r25, r25
    4f6e:	0a 94       	dec	r0
    4f70:	e2 f7       	brpl	.-8      	; 0x4f6a <_turn_off+0x4a>
    4f72:	84 2b       	or	r24, r20
    4f74:	8c 93       	st	X, r24
    4f76:	08 95       	ret
    4f78:	fc 01       	movw	r30, r24
    4f7a:	ee 0f       	add	r30, r30
    4f7c:	ff 1f       	adc	r31, r31
    4f7e:	df 01       	movw	r26, r30
    4f80:	a8 0f       	add	r26, r24
    4f82:	b9 1f       	adc	r27, r25
    4f84:	aa 0f       	add	r26, r26
    4f86:	bb 1f       	adc	r27, r27
    4f88:	af 50       	subi	r26, 0x0F	; 15
    4f8a:	b8 4e       	sbci	r27, 0xE8	; 232
    4f8c:	0d 90       	ld	r0, X+
    4f8e:	bc 91       	ld	r27, X
    4f90:	a0 2d       	mov	r26, r0
    4f92:	2c 91       	ld	r18, X
    4f94:	e8 0f       	add	r30, r24
    4f96:	f9 1f       	adc	r31, r25
    4f98:	ee 0f       	add	r30, r30
    4f9a:	ff 1f       	adc	r31, r31
    4f9c:	ef 50       	subi	r30, 0x0F	; 15
    4f9e:	f8 4e       	sbci	r31, 0xE8	; 232
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	02 80       	ldd	r0, Z+2	; 0x02
    4fa6:	02 c0       	rjmp	.+4      	; 0x4fac <_turn_off+0x8c>
    4fa8:	88 0f       	add	r24, r24
    4faa:	99 1f       	adc	r25, r25
    4fac:	0a 94       	dec	r0
    4fae:	e2 f7       	brpl	.-8      	; 0x4fa8 <_turn_off+0x88>
    4fb0:	80 95       	com	r24
    4fb2:	82 23       	and	r24, r18
    4fb4:	8c 93       	st	X, r24
    4fb6:	08 95       	ret

00004fb8 <_turn_on>:
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	fc 01       	movw	r30, r24
    4fbc:	ee 0f       	add	r30, r30
    4fbe:	ff 1f       	adc	r31, r31
    4fc0:	e8 0f       	add	r30, r24
    4fc2:	f9 1f       	adc	r31, r25
    4fc4:	ee 0f       	add	r30, r30
    4fc6:	ff 1f       	adc	r31, r31
    4fc8:	ef 50       	subi	r30, 0x0F	; 15
    4fca:	f8 4e       	sbci	r31, 0xE8	; 232
    4fcc:	23 81       	ldd	r18, Z+3	; 0x03
    4fce:	21 11       	cpse	r18, r1
    4fd0:	20 c0       	rjmp	.+64     	; 0x5012 <_turn_on+0x5a>
    4fd2:	9c 01       	movw	r18, r24
    4fd4:	22 0f       	add	r18, r18
    4fd6:	33 1f       	adc	r19, r19
    4fd8:	f9 01       	movw	r30, r18
    4fda:	e8 0f       	add	r30, r24
    4fdc:	f9 1f       	adc	r31, r25
    4fde:	ee 0f       	add	r30, r30
    4fe0:	ff 1f       	adc	r31, r31
    4fe2:	ef 50       	subi	r30, 0x0F	; 15
    4fe4:	f8 4e       	sbci	r31, 0xE8	; 232
    4fe6:	a0 81       	ld	r26, Z
    4fe8:	b1 81       	ldd	r27, Z+1	; 0x01
    4fea:	4c 91       	ld	r20, X
    4fec:	f9 01       	movw	r30, r18
    4fee:	e8 0f       	add	r30, r24
    4ff0:	f9 1f       	adc	r31, r25
    4ff2:	ee 0f       	add	r30, r30
    4ff4:	ff 1f       	adc	r31, r31
    4ff6:	ef 50       	subi	r30, 0x0F	; 15
    4ff8:	f8 4e       	sbci	r31, 0xE8	; 232
    4ffa:	81 e0       	ldi	r24, 0x01	; 1
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	02 80       	ldd	r0, Z+2	; 0x02
    5000:	02 c0       	rjmp	.+4      	; 0x5006 <_turn_on+0x4e>
    5002:	88 0f       	add	r24, r24
    5004:	99 1f       	adc	r25, r25
    5006:	0a 94       	dec	r0
    5008:	e2 f7       	brpl	.-8      	; 0x5002 <_turn_on+0x4a>
    500a:	80 95       	com	r24
    500c:	84 23       	and	r24, r20
    500e:	8c 93       	st	X, r24
    5010:	08 95       	ret
    5012:	fc 01       	movw	r30, r24
    5014:	ee 0f       	add	r30, r30
    5016:	ff 1f       	adc	r31, r31
    5018:	df 01       	movw	r26, r30
    501a:	a8 0f       	add	r26, r24
    501c:	b9 1f       	adc	r27, r25
    501e:	aa 0f       	add	r26, r26
    5020:	bb 1f       	adc	r27, r27
    5022:	af 50       	subi	r26, 0x0F	; 15
    5024:	b8 4e       	sbci	r27, 0xE8	; 232
    5026:	0d 90       	ld	r0, X+
    5028:	bc 91       	ld	r27, X
    502a:	a0 2d       	mov	r26, r0
    502c:	2c 91       	ld	r18, X
    502e:	e8 0f       	add	r30, r24
    5030:	f9 1f       	adc	r31, r25
    5032:	ee 0f       	add	r30, r30
    5034:	ff 1f       	adc	r31, r31
    5036:	ef 50       	subi	r30, 0x0F	; 15
    5038:	f8 4e       	sbci	r31, 0xE8	; 232
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	02 80       	ldd	r0, Z+2	; 0x02
    5040:	02 c0       	rjmp	.+4      	; 0x5046 <_turn_on+0x8e>
    5042:	88 0f       	add	r24, r24
    5044:	99 1f       	adc	r25, r25
    5046:	0a 94       	dec	r0
    5048:	e2 f7       	brpl	.-8      	; 0x5042 <_turn_on+0x8a>
    504a:	82 2b       	or	r24, r18
    504c:	8c 93       	st	X, r24
    504e:	08 95       	ret

00005050 <_hal_led_task>:
    5050:	cc 24       	eor	r12, r12
    5052:	c3 94       	inc	r12
    5054:	d1 2c       	mov	r13, r1
    5056:	68 94       	set
    5058:	bb 24       	eor	r11, r11
    505a:	b2 f8       	bld	r11, 2
    505c:	c1 ef       	ldi	r28, 0xF1	; 241
    505e:	d7 e1       	ldi	r29, 0x17	; 23
    5060:	10 e0       	ldi	r17, 0x00	; 0
    5062:	8c 81       	ldd	r24, Y+4	; 0x04
    5064:	81 30       	cpi	r24, 0x01	; 1
    5066:	81 f0       	breq	.+32     	; 0x5088 <_hal_led_task+0x38>
    5068:	18 f1       	brcs	.+70     	; 0x50b0 <_hal_led_task+0x60>
    506a:	82 30       	cpi	r24, 0x02	; 2
    506c:	61 f5       	brne	.+88     	; 0x50c6 <_hal_led_task+0x76>
    506e:	e8 81       	ld	r30, Y
    5070:	f9 81       	ldd	r31, Y+1	; 0x01
    5072:	20 81       	ld	r18, Z
    5074:	c6 01       	movw	r24, r12
    5076:	0a 80       	ldd	r0, Y+2	; 0x02
    5078:	02 c0       	rjmp	.+4      	; 0x507e <_hal_led_task+0x2e>
    507a:	88 0f       	add	r24, r24
    507c:	99 1f       	adc	r25, r25
    507e:	0a 94       	dec	r0
    5080:	e2 f7       	brpl	.-8      	; 0x507a <_hal_led_task+0x2a>
    5082:	82 27       	eor	r24, r18
    5084:	80 83       	st	Z, r24
    5086:	1f c0       	rjmp	.+62     	; 0x50c6 <_hal_led_task+0x76>
    5088:	8d 81       	ldd	r24, Y+5	; 0x05
    508a:	8f 5f       	subi	r24, 0xFF	; 255
    508c:	86 30       	cpi	r24, 0x06	; 6
    508e:	10 f4       	brcc	.+4      	; 0x5094 <_hal_led_task+0x44>
    5090:	8d 83       	std	Y+5, r24	; 0x05
    5092:	19 c0       	rjmp	.+50     	; 0x50c6 <_hal_led_task+0x76>
    5094:	1d 82       	std	Y+5, r1	; 0x05
    5096:	e8 81       	ld	r30, Y
    5098:	f9 81       	ldd	r31, Y+1	; 0x01
    509a:	20 81       	ld	r18, Z
    509c:	c6 01       	movw	r24, r12
    509e:	0a 80       	ldd	r0, Y+2	; 0x02
    50a0:	02 c0       	rjmp	.+4      	; 0x50a6 <_hal_led_task+0x56>
    50a2:	88 0f       	add	r24, r24
    50a4:	99 1f       	adc	r25, r25
    50a6:	0a 94       	dec	r0
    50a8:	e2 f7       	brpl	.-8      	; 0x50a2 <_hal_led_task+0x52>
    50aa:	82 27       	eor	r24, r18
    50ac:	80 83       	st	Z, r24
    50ae:	0b c0       	rjmp	.+22     	; 0x50c6 <_hal_led_task+0x76>
    50b0:	0d 81       	ldd	r16, Y+5	; 0x05
    50b2:	00 23       	and	r16, r16
    50b4:	29 f0       	breq	.+10     	; 0x50c0 <_hal_led_task+0x70>
    50b6:	81 2f       	mov	r24, r17
    50b8:	7f df       	rcall	.-258    	; 0x4fb8 <_turn_on>
    50ba:	01 50       	subi	r16, 0x01	; 1
    50bc:	0d 83       	std	Y+5, r16	; 0x05
    50be:	03 c0       	rjmp	.+6      	; 0x50c6 <_hal_led_task+0x76>
    50c0:	bc 82       	std	Y+4, r11	; 0x04
    50c2:	81 2f       	mov	r24, r17
    50c4:	2d df       	rcall	.-422    	; 0x4f20 <_turn_off>
    50c6:	1f 5f       	subi	r17, 0xFF	; 255
    50c8:	26 96       	adiw	r28, 0x06	; 6
    50ca:	14 30       	cpi	r17, 0x04	; 4
    50cc:	51 f6       	brne	.-108    	; 0x5062 <_hal_led_task+0x12>
    50ce:	6c e0       	ldi	r22, 0x0C	; 12
    50d0:	70 e0       	ldi	r23, 0x00	; 0
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	0e 94 d6 11 	call	0x23ac	; 0x23ac <vTaskDelay>
    50da:	c0 cf       	rjmp	.-128    	; 0x505c <_hal_led_task+0xc>

000050dc <status_leds_initialise>:
    50dc:	ef 92       	push	r14
    50de:	ff 92       	push	r15
    50e0:	0f 93       	push	r16
    50e2:	1f 93       	push	r17
    50e4:	cf 93       	push	r28
    50e6:	df 93       	push	r29
    50e8:	08 2f       	mov	r16, r24
    50ea:	80 e4       	ldi	r24, 0x40	; 64
    50ec:	87 b9       	out	0x07, r24	; 7
    50ee:	c1 ef       	ldi	r28, 0xF1	; 241
    50f0:	d7 e1       	ldi	r29, 0x17	; 23
    50f2:	0f 2e       	mov	r0, r31
    50f4:	f8 e2       	ldi	r31, 0x28	; 40
    50f6:	ef 2e       	mov	r14, r31
    50f8:	f1 2c       	mov	r15, r1
    50fa:	f0 2d       	mov	r31, r0
    50fc:	f9 82       	std	Y+1, r15	; 0x01
    50fe:	e8 82       	st	Y, r14
    5100:	86 e0       	ldi	r24, 0x06	; 6
    5102:	8a 83       	std	Y+2, r24	; 0x02
    5104:	1b 82       	std	Y+3, r1	; 0x03
    5106:	14 e0       	ldi	r17, 0x04	; 4
    5108:	1c 83       	std	Y+4, r17	; 0x04
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	09 df       	rcall	.-494    	; 0x4f20 <_turn_off>
    510e:	80 e8       	ldi	r24, 0x80	; 128
    5110:	87 b9       	out	0x07, r24	; 7
    5112:	ff 82       	std	Y+7, r15	; 0x07
    5114:	ee 82       	std	Y+6, r14	; 0x06
    5116:	87 e0       	ldi	r24, 0x07	; 7
    5118:	88 87       	std	Y+8, r24	; 0x08
    511a:	19 86       	std	Y+9, r1	; 0x09
    511c:	1a 87       	std	Y+10, r17	; 0x0a
    511e:	81 e0       	ldi	r24, 0x01	; 1
    5120:	ff de       	rcall	.-514    	; 0x4f20 <_turn_off>
    5122:	80 e2       	ldi	r24, 0x20	; 32
    5124:	83 bb       	out	0x13, r24	; 19
    5126:	84 e3       	ldi	r24, 0x34	; 52
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	9d 87       	std	Y+13, r25	; 0x0d
    512c:	8c 87       	std	Y+12, r24	; 0x0c
    512e:	85 e0       	ldi	r24, 0x05	; 5
    5130:	8e 87       	std	Y+14, r24	; 0x0e
    5132:	1f 86       	std	Y+15, r1	; 0x0f
    5134:	18 8b       	std	Y+16, r17	; 0x10
    5136:	82 e0       	ldi	r24, 0x02	; 2
    5138:	f3 de       	rcall	.-538    	; 0x4f20 <_turn_off>
    513a:	80 e1       	ldi	r24, 0x10	; 16
    513c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5140:	82 e0       	ldi	r24, 0x02	; 2
    5142:	91 e0       	ldi	r25, 0x01	; 1
    5144:	9b 8b       	std	Y+19, r25	; 0x13
    5146:	8a 8b       	std	Y+18, r24	; 0x12
    5148:	1c 8b       	std	Y+20, r17	; 0x14
    514a:	1d 8a       	std	Y+21, r1	; 0x15
    514c:	1e 8b       	std	Y+22, r17	; 0x16
    514e:	83 e0       	ldi	r24, 0x03	; 3
    5150:	e7 de       	rcall	.-562    	; 0x4f20 <_turn_off>
    5152:	e1 2c       	mov	r14, r1
    5154:	f1 2c       	mov	r15, r1
    5156:	20 e0       	ldi	r18, 0x00	; 0
    5158:	30 e0       	ldi	r19, 0x00	; 0
    515a:	40 ec       	ldi	r20, 0xC0	; 192
    515c:	50 e0       	ldi	r21, 0x00	; 0
    515e:	6e e1       	ldi	r22, 0x1E	; 30
    5160:	78 e0       	ldi	r23, 0x08	; 8
    5162:	88 e2       	ldi	r24, 0x28	; 40
    5164:	98 e2       	ldi	r25, 0x28	; 40
    5166:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xTaskCreate>
    516a:	df 91       	pop	r29
    516c:	cf 91       	pop	r28
    516e:	1f 91       	pop	r17
    5170:	0f 91       	pop	r16
    5172:	ff 90       	pop	r15
    5174:	ef 90       	pop	r14
    5176:	08 95       	ret

00005178 <status_leds_slowBlink>:
    5178:	cf 93       	push	r28
    517a:	df 93       	push	r29
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	fc 01       	movw	r30, r24
    5180:	ee 0f       	add	r30, r30
    5182:	ff 1f       	adc	r31, r31
    5184:	df 01       	movw	r26, r30
    5186:	a8 0f       	add	r26, r24
    5188:	b9 1f       	adc	r27, r25
    518a:	aa 0f       	add	r26, r26
    518c:	bb 1f       	adc	r27, r27
    518e:	af 50       	subi	r26, 0x0F	; 15
    5190:	b8 4e       	sbci	r27, 0xE8	; 232
    5192:	cd 91       	ld	r28, X+
    5194:	dc 91       	ld	r29, X
    5196:	11 97       	sbiw	r26, 0x01	; 1
    5198:	48 81       	ld	r20, Y
    519a:	21 e0       	ldi	r18, 0x01	; 1
    519c:	30 e0       	ldi	r19, 0x00	; 0
    519e:	12 96       	adiw	r26, 0x02	; 2
    51a0:	0c 90       	ld	r0, X
    51a2:	12 97       	sbiw	r26, 0x02	; 2
    51a4:	02 c0       	rjmp	.+4      	; 0x51aa <status_leds_slowBlink+0x32>
    51a6:	22 0f       	add	r18, r18
    51a8:	33 1f       	adc	r19, r19
    51aa:	0a 94       	dec	r0
    51ac:	e2 f7       	brpl	.-8      	; 0x51a6 <status_leds_slowBlink+0x2e>
    51ae:	24 27       	eor	r18, r20
    51b0:	28 83       	st	Y, r18
    51b2:	fd 01       	movw	r30, r26
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	84 83       	std	Z+4, r24	; 0x04
    51b8:	df 91       	pop	r29
    51ba:	cf 91       	pop	r28
    51bc:	08 95       	ret

000051be <status_leds_fastBlink>:
    51be:	cf 93       	push	r28
    51c0:	df 93       	push	r29
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	fc 01       	movw	r30, r24
    51c6:	ee 0f       	add	r30, r30
    51c8:	ff 1f       	adc	r31, r31
    51ca:	df 01       	movw	r26, r30
    51cc:	a8 0f       	add	r26, r24
    51ce:	b9 1f       	adc	r27, r25
    51d0:	aa 0f       	add	r26, r26
    51d2:	bb 1f       	adc	r27, r27
    51d4:	af 50       	subi	r26, 0x0F	; 15
    51d6:	b8 4e       	sbci	r27, 0xE8	; 232
    51d8:	cd 91       	ld	r28, X+
    51da:	dc 91       	ld	r29, X
    51dc:	11 97       	sbiw	r26, 0x01	; 1
    51de:	48 81       	ld	r20, Y
    51e0:	21 e0       	ldi	r18, 0x01	; 1
    51e2:	30 e0       	ldi	r19, 0x00	; 0
    51e4:	12 96       	adiw	r26, 0x02	; 2
    51e6:	0c 90       	ld	r0, X
    51e8:	12 97       	sbiw	r26, 0x02	; 2
    51ea:	02 c0       	rjmp	.+4      	; 0x51f0 <status_leds_fastBlink+0x32>
    51ec:	22 0f       	add	r18, r18
    51ee:	33 1f       	adc	r19, r19
    51f0:	0a 94       	dec	r0
    51f2:	e2 f7       	brpl	.-8      	; 0x51ec <status_leds_fastBlink+0x2e>
    51f4:	24 27       	eor	r18, r20
    51f6:	28 83       	st	Y, r18
    51f8:	fd 01       	movw	r30, r26
    51fa:	82 e0       	ldi	r24, 0x02	; 2
    51fc:	84 83       	std	Z+4, r24	; 0x04
    51fe:	df 91       	pop	r29
    5200:	cf 91       	pop	r28
    5202:	08 95       	ret

00005204 <status_leds_ledOn>:
    5204:	28 2f       	mov	r18, r24
    5206:	30 e0       	ldi	r19, 0x00	; 0
    5208:	f9 01       	movw	r30, r18
    520a:	ee 0f       	add	r30, r30
    520c:	ff 1f       	adc	r31, r31
    520e:	e2 0f       	add	r30, r18
    5210:	f3 1f       	adc	r31, r19
    5212:	ee 0f       	add	r30, r30
    5214:	ff 1f       	adc	r31, r31
    5216:	ef 50       	subi	r30, 0x0F	; 15
    5218:	f8 4e       	sbci	r31, 0xE8	; 232
    521a:	93 e0       	ldi	r25, 0x03	; 3
    521c:	94 83       	std	Z+4, r25	; 0x04
    521e:	cc ce       	rjmp	.-616    	; 0x4fb8 <_turn_on>
    5220:	08 95       	ret

00005222 <status_leds_ledOff>:
    5222:	28 2f       	mov	r18, r24
    5224:	30 e0       	ldi	r19, 0x00	; 0
    5226:	f9 01       	movw	r30, r18
    5228:	ee 0f       	add	r30, r30
    522a:	ff 1f       	adc	r31, r31
    522c:	e2 0f       	add	r30, r18
    522e:	f3 1f       	adc	r31, r19
    5230:	ee 0f       	add	r30, r30
    5232:	ff 1f       	adc	r31, r31
    5234:	ef 50       	subi	r30, 0x0F	; 15
    5236:	f8 4e       	sbci	r31, 0xE8	; 232
    5238:	94 e0       	ldi	r25, 0x04	; 4
    523a:	94 83       	std	Z+4, r25	; 0x04
    523c:	71 ce       	rjmp	.-798    	; 0x4f20 <_turn_off>
    523e:	08 95       	ret

00005240 <status_leds_longPuls>:
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	fc 01       	movw	r30, r24
    5244:	ee 0f       	add	r30, r30
    5246:	ff 1f       	adc	r31, r31
    5248:	df 01       	movw	r26, r30
    524a:	a8 0f       	add	r26, r24
    524c:	b9 1f       	adc	r27, r25
    524e:	aa 0f       	add	r26, r26
    5250:	bb 1f       	adc	r27, r27
    5252:	af 50       	subi	r26, 0x0F	; 15
    5254:	b8 4e       	sbci	r27, 0xE8	; 232
    5256:	26 e0       	ldi	r18, 0x06	; 6
    5258:	15 96       	adiw	r26, 0x05	; 5
    525a:	2c 93       	st	X, r18
    525c:	15 97       	sbiw	r26, 0x05	; 5
    525e:	fd 01       	movw	r30, r26
    5260:	14 82       	std	Z+4, r1	; 0x04
    5262:	08 95       	ret

00005264 <status_leds_shortPuls>:
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	fc 01       	movw	r30, r24
    5268:	ee 0f       	add	r30, r30
    526a:	ff 1f       	adc	r31, r31
    526c:	df 01       	movw	r26, r30
    526e:	a8 0f       	add	r26, r24
    5270:	b9 1f       	adc	r27, r25
    5272:	aa 0f       	add	r26, r26
    5274:	bb 1f       	adc	r27, r27
    5276:	af 50       	subi	r26, 0x0F	; 15
    5278:	b8 4e       	sbci	r27, 0xE8	; 232
    527a:	15 96       	adiw	r26, 0x05	; 5
    527c:	1c 92       	st	X, r1
    527e:	15 97       	sbiw	r26, 0x05	; 5
    5280:	fd 01       	movw	r30, r26
    5282:	14 82       	std	Z+4, r1	; 0x04
    5284:	08 95       	ret

00005286 <_initTwiInterface>:
    5286:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <_twiIsInitiated>
    528a:	81 11       	cpse	r24, r1
    528c:	0c c0       	rjmp	.+24     	; 0x52a6 <_initTwiInterface+0x20>
    528e:	8c e0       	ldi	r24, 0x0C	; 12
    5290:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5294:	8f ef       	ldi	r24, 0xFF	; 255
    5296:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    529a:	84 e0       	ldi	r24, 0x04	; 4
    529c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52a0:	81 e0       	ldi	r24, 0x01	; 1
    52a2:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <_twiIsInitiated>
    52a6:	08 95       	ret

000052a8 <twiCreate>:
    52a8:	af 92       	push	r10
    52aa:	bf 92       	push	r11
    52ac:	cf 92       	push	r12
    52ae:	df 92       	push	r13
    52b0:	ef 92       	push	r14
    52b2:	ff 92       	push	r15
    52b4:	0f 93       	push	r16
    52b6:	1f 93       	push	r17
    52b8:	cf 93       	push	r28
    52ba:	df 93       	push	r29
    52bc:	a8 2e       	mov	r10, r24
    52be:	b6 2e       	mov	r11, r22
    52c0:	69 01       	movw	r12, r18
    52c2:	7a 01       	movw	r14, r20
    52c4:	84 e0       	ldi	r24, 0x04	; 4
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	61 d7       	rcall	.+3778   	; 0x618c <malloc>
    52ca:	ec 01       	movw	r28, r24
    52cc:	89 2b       	or	r24, r25
    52ce:	61 f1       	breq	.+88     	; 0x5328 <twiCreate+0x80>
    52d0:	a8 82       	st	Y, r10
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	b8 12       	cpse	r11, r24
    52d6:	12 c0       	rjmp	.+36     	; 0x52fc <twiCreate+0x54>
    52d8:	c7 01       	movw	r24, r14
    52da:	b6 01       	movw	r22, r12
    52dc:	20 ea       	ldi	r18, 0xA0	; 160
    52de:	36 e8       	ldi	r19, 0x86	; 134
    52e0:	41 e0       	ldi	r20, 0x01	; 1
    52e2:	50 e0       	ldi	r21, 0x00	; 0
    52e4:	15 d7       	rcall	.+3626   	; 0x6110 <__udivmodsi4>
    52e6:	da 01       	movw	r26, r20
    52e8:	c9 01       	movw	r24, r18
    52ea:	40 97       	sbiw	r24, 0x10	; 16
    52ec:	a1 09       	sbc	r26, r1
    52ee:	b1 09       	sbc	r27, r1
    52f0:	b6 95       	lsr	r27
    52f2:	a7 95       	ror	r26
    52f4:	97 95       	ror	r25
    52f6:	87 95       	ror	r24
    52f8:	89 83       	std	Y+1, r24	; 0x01
    52fa:	11 c0       	rjmp	.+34     	; 0x531e <twiCreate+0x76>
    52fc:	c7 01       	movw	r24, r14
    52fe:	b6 01       	movw	r22, r12
    5300:	20 e8       	ldi	r18, 0x80	; 128
    5302:	3a e1       	ldi	r19, 0x1A	; 26
    5304:	46 e0       	ldi	r20, 0x06	; 6
    5306:	50 e0       	ldi	r21, 0x00	; 0
    5308:	03 d7       	rcall	.+3590   	; 0x6110 <__udivmodsi4>
    530a:	da 01       	movw	r26, r20
    530c:	c9 01       	movw	r24, r18
    530e:	40 97       	sbiw	r24, 0x10	; 16
    5310:	a1 09       	sbc	r26, r1
    5312:	b1 09       	sbc	r27, r1
    5314:	b6 95       	lsr	r27
    5316:	a7 95       	ror	r26
    5318:	97 95       	ror	r25
    531a:	87 95       	ror	r24
    531c:	89 83       	std	Y+1, r24	; 0x01
    531e:	1b 83       	std	Y+3, r17	; 0x03
    5320:	0a 83       	std	Y+2, r16	; 0x02
    5322:	8c 2f       	mov	r24, r28
    5324:	9d 2f       	mov	r25, r29
    5326:	02 c0       	rjmp	.+4      	; 0x532c <twiCreate+0x84>
    5328:	80 e0       	ldi	r24, 0x00	; 0
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	df 91       	pop	r29
    532e:	cf 91       	pop	r28
    5330:	1f 91       	pop	r17
    5332:	0f 91       	pop	r16
    5334:	ff 90       	pop	r15
    5336:	ef 90       	pop	r14
    5338:	df 90       	pop	r13
    533a:	cf 90       	pop	r12
    533c:	bf 90       	pop	r11
    533e:	af 90       	pop	r10
    5340:	08 95       	ret

00005342 <twiIsBusy>:
    5342:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5346:	81 70       	andi	r24, 0x01	; 1
    5348:	08 95       	ret

0000534a <twiTransmit>:
    534a:	ff 92       	push	r15
    534c:	0f 93       	push	r16
    534e:	1f 93       	push	r17
    5350:	cf 93       	push	r28
    5352:	df 93       	push	r29
    5354:	00 97       	sbiw	r24, 0x00	; 0
    5356:	d1 f1       	breq	.+116    	; 0x53cc <twiTransmit+0x82>
    5358:	4a 30       	cpi	r20, 0x0A	; 10
    535a:	d0 f5       	brcc	.+116    	; 0x53d0 <twiTransmit+0x86>
    535c:	f4 2e       	mov	r15, r20
    535e:	8b 01       	movw	r16, r22
    5360:	ec 01       	movw	r28, r24
    5362:	ef df       	rcall	.-34     	; 0x5342 <twiIsBusy>
    5364:	81 11       	cpse	r24, r1
    5366:	36 c0       	rjmp	.+108    	; 0x53d4 <twiTransmit+0x8a>
    5368:	80 91 0a 18 	lds	r24, 0x180A	; 0x80180a <_twiCurrentHandler>
    536c:	90 91 0b 18 	lds	r25, 0x180B	; 0x80180b <_twiCurrentHandler+0x1>
    5370:	c8 17       	cp	r28, r24
    5372:	d9 07       	cpc	r29, r25
    5374:	41 f0       	breq	.+16     	; 0x5386 <twiTransmit+0x3c>
    5376:	87 df       	rcall	.-242    	; 0x5286 <_initTwiInterface>
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    537e:	d0 93 0b 18 	sts	0x180B, r29	; 0x80180b <_twiCurrentHandler+0x1>
    5382:	c0 93 0a 18 	sts	0x180A, r28	; 0x80180a <_twiCurrentHandler>
    5386:	81 e0       	ldi	r24, 0x01	; 1
    5388:	8f 0d       	add	r24, r15
    538a:	80 93 0c 18 	sts	0x180C, r24	; 0x80180c <_twiMessageLen>
    538e:	88 81       	ld	r24, Y
    5390:	88 0f       	add	r24, r24
    5392:	80 93 0d 18 	sts	0x180D, r24	; 0x80180d <_twiMessageBuffer>
    5396:	ff 20       	and	r15, r15
    5398:	89 f0       	breq	.+34     	; 0x53bc <twiTransmit+0x72>
    539a:	f8 01       	movw	r30, r16
    539c:	ae e0       	ldi	r26, 0x0E	; 14
    539e:	b8 e1       	ldi	r27, 0x18	; 24
    53a0:	4f ef       	ldi	r20, 0xFF	; 255
    53a2:	4f 0d       	add	r20, r15
    53a4:	64 2f       	mov	r22, r20
    53a6:	70 e0       	ldi	r23, 0x00	; 0
    53a8:	cb 01       	movw	r24, r22
    53aa:	01 96       	adiw	r24, 0x01	; 1
    53ac:	b8 01       	movw	r22, r16
    53ae:	68 0f       	add	r22, r24
    53b0:	79 1f       	adc	r23, r25
    53b2:	81 91       	ld	r24, Z+
    53b4:	8d 93       	st	X+, r24
    53b6:	e6 17       	cp	r30, r22
    53b8:	f7 07       	cpc	r31, r23
    53ba:	d9 f7       	brne	.-10     	; 0x53b2 <twiTransmit+0x68>
    53bc:	88 ef       	ldi	r24, 0xF8	; 248
    53be:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    53c2:	85 ea       	ldi	r24, 0xA5	; 165
    53c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53c8:	84 e0       	ldi	r24, 0x04	; 4
    53ca:	05 c0       	rjmp	.+10     	; 0x53d6 <twiTransmit+0x8c>
    53cc:	86 e0       	ldi	r24, 0x06	; 6
    53ce:	03 c0       	rjmp	.+6      	; 0x53d6 <twiTransmit+0x8c>
    53d0:	87 e0       	ldi	r24, 0x07	; 7
    53d2:	01 c0       	rjmp	.+2      	; 0x53d6 <twiTransmit+0x8c>
    53d4:	82 e0       	ldi	r24, 0x02	; 2
    53d6:	df 91       	pop	r29
    53d8:	cf 91       	pop	r28
    53da:	1f 91       	pop	r17
    53dc:	0f 91       	pop	r16
    53de:	ff 90       	pop	r15
    53e0:	08 95       	ret

000053e2 <twiReceive>:
    53e2:	1f 93       	push	r17
    53e4:	cf 93       	push	r28
    53e6:	df 93       	push	r29
    53e8:	00 97       	sbiw	r24, 0x00	; 0
    53ea:	29 f1       	breq	.+74     	; 0x5436 <twiReceive+0x54>
    53ec:	6b 30       	cpi	r22, 0x0B	; 11
    53ee:	28 f5       	brcc	.+74     	; 0x543a <twiReceive+0x58>
    53f0:	16 2f       	mov	r17, r22
    53f2:	ec 01       	movw	r28, r24
    53f4:	a6 df       	rcall	.-180    	; 0x5342 <twiIsBusy>
    53f6:	81 11       	cpse	r24, r1
    53f8:	22 c0       	rjmp	.+68     	; 0x543e <twiReceive+0x5c>
    53fa:	80 91 0a 18 	lds	r24, 0x180A	; 0x80180a <_twiCurrentHandler>
    53fe:	90 91 0b 18 	lds	r25, 0x180B	; 0x80180b <_twiCurrentHandler+0x1>
    5402:	c8 17       	cp	r28, r24
    5404:	d9 07       	cpc	r29, r25
    5406:	41 f0       	breq	.+16     	; 0x5418 <twiReceive+0x36>
    5408:	3e df       	rcall	.-388    	; 0x5286 <_initTwiInterface>
    540a:	89 81       	ldd	r24, Y+1	; 0x01
    540c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5410:	d0 93 0b 18 	sts	0x180B, r29	; 0x80180b <_twiCurrentHandler+0x1>
    5414:	c0 93 0a 18 	sts	0x180A, r28	; 0x80180a <_twiCurrentHandler>
    5418:	10 93 0c 18 	sts	0x180C, r17	; 0x80180c <_twiMessageLen>
    541c:	88 81       	ld	r24, Y
    541e:	88 0f       	add	r24, r24
    5420:	81 60       	ori	r24, 0x01	; 1
    5422:	80 93 0d 18 	sts	0x180D, r24	; 0x80180d <_twiMessageBuffer>
    5426:	88 ef       	ldi	r24, 0xF8	; 248
    5428:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    542c:	85 ea       	ldi	r24, 0xA5	; 165
    542e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5432:	85 e0       	ldi	r24, 0x05	; 5
    5434:	05 c0       	rjmp	.+10     	; 0x5440 <twiReceive+0x5e>
    5436:	86 e0       	ldi	r24, 0x06	; 6
    5438:	03 c0       	rjmp	.+6      	; 0x5440 <twiReceive+0x5e>
    543a:	87 e0       	ldi	r24, 0x07	; 7
    543c:	01 c0       	rjmp	.+2      	; 0x5440 <twiReceive+0x5e>
    543e:	82 e0       	ldi	r24, 0x02	; 2
    5440:	df 91       	pop	r29
    5442:	cf 91       	pop	r28
    5444:	1f 91       	pop	r17
    5446:	08 95       	ret

00005448 <__vector_39>:
    5448:	1f 92       	push	r1
    544a:	0f 92       	push	r0
    544c:	0f b6       	in	r0, 0x3f	; 63
    544e:	0f 92       	push	r0
    5450:	11 24       	eor	r1, r1
    5452:	0b b6       	in	r0, 0x3b	; 59
    5454:	0f 92       	push	r0
    5456:	2f 93       	push	r18
    5458:	3f 93       	push	r19
    545a:	4f 93       	push	r20
    545c:	5f 93       	push	r21
    545e:	6f 93       	push	r22
    5460:	7f 93       	push	r23
    5462:	8f 93       	push	r24
    5464:	9f 93       	push	r25
    5466:	af 93       	push	r26
    5468:	bf 93       	push	r27
    546a:	ef 93       	push	r30
    546c:	ff 93       	push	r31
    546e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5472:	8e 2f       	mov	r24, r30
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	fc 01       	movw	r30, r24
    5478:	38 97       	sbiw	r30, 0x08	; 8
    547a:	e1 35       	cpi	r30, 0x51	; 81
    547c:	f1 05       	cpc	r31, r1
    547e:	08 f0       	brcs	.+2      	; 0x5482 <__vector_39+0x3a>
    5480:	75 c0       	rjmp	.+234    	; 0x556c <__vector_39+0x124>
    5482:	88 27       	eor	r24, r24
    5484:	e4 58       	subi	r30, 0x84	; 132
    5486:	ff 4f       	sbci	r31, 0xFF	; 255
    5488:	8f 4f       	sbci	r24, 0xFF	; 255
    548a:	64 c6       	rjmp	.+3272   	; 0x6154 <__tablejump2__>
    548c:	10 92 09 18 	sts	0x1809, r1	; 0x801809 <_index.1885>
    5490:	e0 91 09 18 	lds	r30, 0x1809	; 0x801809 <_index.1885>
    5494:	80 91 0c 18 	lds	r24, 0x180C	; 0x80180c <_twiMessageLen>
    5498:	e8 17       	cp	r30, r24
    549a:	70 f4       	brcc	.+28     	; 0x54b8 <__vector_39+0x70>
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	8e 0f       	add	r24, r30
    54a0:	80 93 09 18 	sts	0x1809, r24	; 0x801809 <_index.1885>
    54a4:	f0 e0       	ldi	r31, 0x00	; 0
    54a6:	e3 5f       	subi	r30, 0xF3	; 243
    54a8:	f7 4e       	sbci	r31, 0xE7	; 231
    54aa:	80 81       	ld	r24, Z
    54ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54b0:	85 e8       	ldi	r24, 0x85	; 133
    54b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54b6:	72 c0       	rjmp	.+228    	; 0x559c <__vector_39+0x154>
    54b8:	84 e9       	ldi	r24, 0x94	; 148
    54ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54be:	80 91 0a 18 	lds	r24, 0x180A	; 0x80180a <_twiCurrentHandler>
    54c2:	90 91 0b 18 	lds	r25, 0x180B	; 0x80180b <_twiCurrentHandler+0x1>
    54c6:	dc 01       	movw	r26, r24
    54c8:	12 96       	adiw	r26, 0x02	; 2
    54ca:	ed 91       	ld	r30, X+
    54cc:	fc 91       	ld	r31, X
    54ce:	13 97       	sbiw	r26, 0x03	; 3
    54d0:	30 97       	sbiw	r30, 0x00	; 0
    54d2:	09 f4       	brne	.+2      	; 0x54d6 <__vector_39+0x8e>
    54d4:	63 c0       	rjmp	.+198    	; 0x559c <__vector_39+0x154>
    54d6:	20 e0       	ldi	r18, 0x00	; 0
    54d8:	40 e0       	ldi	r20, 0x00	; 0
    54da:	50 e0       	ldi	r21, 0x00	; 0
    54dc:	64 e0       	ldi	r22, 0x04	; 4
    54de:	19 95       	eicall
    54e0:	5d c0       	rjmp	.+186    	; 0x559c <__vector_39+0x154>
    54e2:	e0 91 09 18 	lds	r30, 0x1809	; 0x801809 <_index.1885>
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	8e 0f       	add	r24, r30
    54ea:	80 93 09 18 	sts	0x1809, r24	; 0x801809 <_index.1885>
    54ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	e3 5f       	subi	r30, 0xF3	; 243
    54f6:	f7 4e       	sbci	r31, 0xE7	; 231
    54f8:	80 83       	st	Z, r24
    54fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    54fe:	80 34       	cpi	r24, 0x40	; 64
    5500:	11 f4       	brne	.+4      	; 0x5506 <__vector_39+0xbe>
    5502:	10 92 09 18 	sts	0x1809, r1	; 0x801809 <_index.1885>
    5506:	20 91 09 18 	lds	r18, 0x1809	; 0x801809 <_index.1885>
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	80 91 0c 18 	lds	r24, 0x180C	; 0x80180c <_twiMessageLen>
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	01 97       	sbiw	r24, 0x01	; 1
    5514:	28 17       	cp	r18, r24
    5516:	39 07       	cpc	r19, r25
    5518:	24 f4       	brge	.+8      	; 0x5522 <__vector_39+0xda>
    551a:	85 ec       	ldi	r24, 0xC5	; 197
    551c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5520:	3d c0       	rjmp	.+122    	; 0x559c <__vector_39+0x154>
    5522:	85 e8       	ldi	r24, 0x85	; 133
    5524:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5528:	39 c0       	rjmp	.+114    	; 0x559c <__vector_39+0x154>
    552a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    552e:	e0 91 09 18 	lds	r30, 0x1809	; 0x801809 <_index.1885>
    5532:	f0 e0       	ldi	r31, 0x00	; 0
    5534:	e3 5f       	subi	r30, 0xF3	; 243
    5536:	f7 4e       	sbci	r31, 0xE7	; 231
    5538:	80 83       	st	Z, r24
    553a:	84 e9       	ldi	r24, 0x94	; 148
    553c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5540:	80 91 0a 18 	lds	r24, 0x180A	; 0x80180a <_twiCurrentHandler>
    5544:	90 91 0b 18 	lds	r25, 0x180B	; 0x80180b <_twiCurrentHandler+0x1>
    5548:	dc 01       	movw	r26, r24
    554a:	12 96       	adiw	r26, 0x02	; 2
    554c:	ed 91       	ld	r30, X+
    554e:	fc 91       	ld	r31, X
    5550:	13 97       	sbiw	r26, 0x03	; 3
    5552:	30 97       	sbiw	r30, 0x00	; 0
    5554:	19 f1       	breq	.+70     	; 0x559c <__vector_39+0x154>
    5556:	20 91 0c 18 	lds	r18, 0x180C	; 0x80180c <_twiMessageLen>
    555a:	4d e0       	ldi	r20, 0x0D	; 13
    555c:	58 e1       	ldi	r21, 0x18	; 24
    555e:	65 e0       	ldi	r22, 0x05	; 5
    5560:	19 95       	eicall
    5562:	1c c0       	rjmp	.+56     	; 0x559c <__vector_39+0x154>
    5564:	85 ea       	ldi	r24, 0xA5	; 165
    5566:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    556a:	18 c0       	rjmp	.+48     	; 0x559c <__vector_39+0x154>
    556c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5570:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5574:	84 e0       	ldi	r24, 0x04	; 4
    5576:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    557a:	80 91 0a 18 	lds	r24, 0x180A	; 0x80180a <_twiCurrentHandler>
    557e:	90 91 0b 18 	lds	r25, 0x180B	; 0x80180b <_twiCurrentHandler+0x1>
    5582:	dc 01       	movw	r26, r24
    5584:	12 96       	adiw	r26, 0x02	; 2
    5586:	ed 91       	ld	r30, X+
    5588:	fc 91       	ld	r31, X
    558a:	13 97       	sbiw	r26, 0x03	; 3
    558c:	30 97       	sbiw	r30, 0x00	; 0
    558e:	31 f0       	breq	.+12     	; 0x559c <__vector_39+0x154>
    5590:	20 e0       	ldi	r18, 0x00	; 0
    5592:	40 e0       	ldi	r20, 0x00	; 0
    5594:	50 e0       	ldi	r21, 0x00	; 0
    5596:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    559a:	19 95       	eicall
    559c:	ff 91       	pop	r31
    559e:	ef 91       	pop	r30
    55a0:	bf 91       	pop	r27
    55a2:	af 91       	pop	r26
    55a4:	9f 91       	pop	r25
    55a6:	8f 91       	pop	r24
    55a8:	7f 91       	pop	r23
    55aa:	6f 91       	pop	r22
    55ac:	5f 91       	pop	r21
    55ae:	4f 91       	pop	r20
    55b0:	3f 91       	pop	r19
    55b2:	2f 91       	pop	r18
    55b4:	0f 90       	pop	r0
    55b6:	0b be       	out	0x3b, r0	; 59
    55b8:	0f 90       	pop	r0
    55ba:	0f be       	out	0x3f, r0	; 63
    55bc:	0f 90       	pop	r0
    55be:	1f 90       	pop	r1
    55c0:	18 95       	reti

000055c2 <fifo_init>:
    55c2:	fc 01       	movw	r30, r24
    55c4:	41 11       	cpse	r20, r1
    55c6:	01 c0       	rjmp	.+2      	; 0x55ca <fifo_init+0x8>
    55c8:	02 d7       	rcall	.+3588   	; 0x63ce <abort>
    55ca:	84 2f       	mov	r24, r20
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	9c 01       	movw	r18, r24
    55d0:	21 50       	subi	r18, 0x01	; 1
    55d2:	31 09       	sbc	r19, r1
    55d4:	82 23       	and	r24, r18
    55d6:	93 23       	and	r25, r19
    55d8:	89 2b       	or	r24, r25
    55da:	09 f0       	breq	.+2      	; 0x55de <fifo_init+0x1c>
    55dc:	f8 d6       	rcall	.+3568   	; 0x63ce <abort>
    55de:	41 38       	cpi	r20, 0x81	; 129
    55e0:	08 f0       	brcs	.+2      	; 0x55e4 <fifo_init+0x22>
    55e2:	f5 d6       	rcall	.+3562   	; 0x63ce <abort>
    55e4:	12 82       	std	Z+2, r1	; 0x02
    55e6:	13 82       	std	Z+3, r1	; 0x03
    55e8:	44 83       	std	Z+4, r20	; 0x04
    55ea:	44 0f       	add	r20, r20
    55ec:	41 50       	subi	r20, 0x01	; 1
    55ee:	45 83       	std	Z+5, r20	; 0x05
    55f0:	71 83       	std	Z+1, r23	; 0x01
    55f2:	60 83       	st	Z, r22
    55f4:	80 e0       	ldi	r24, 0x00	; 0
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	08 95       	ret

000055fa <vfprintf>:
    55fa:	2f 92       	push	r2
    55fc:	3f 92       	push	r3
    55fe:	4f 92       	push	r4
    5600:	5f 92       	push	r5
    5602:	6f 92       	push	r6
    5604:	7f 92       	push	r7
    5606:	8f 92       	push	r8
    5608:	9f 92       	push	r9
    560a:	af 92       	push	r10
    560c:	bf 92       	push	r11
    560e:	cf 92       	push	r12
    5610:	df 92       	push	r13
    5612:	ef 92       	push	r14
    5614:	ff 92       	push	r15
    5616:	0f 93       	push	r16
    5618:	1f 93       	push	r17
    561a:	cf 93       	push	r28
    561c:	df 93       	push	r29
    561e:	cd b7       	in	r28, 0x3d	; 61
    5620:	de b7       	in	r29, 0x3e	; 62
    5622:	60 97       	sbiw	r28, 0x10	; 16
    5624:	0f b6       	in	r0, 0x3f	; 63
    5626:	f8 94       	cli
    5628:	de bf       	out	0x3e, r29	; 62
    562a:	0f be       	out	0x3f, r0	; 63
    562c:	cd bf       	out	0x3d, r28	; 61
    562e:	7c 01       	movw	r14, r24
    5630:	1b 01       	movw	r2, r22
    5632:	6a 01       	movw	r12, r20
    5634:	fc 01       	movw	r30, r24
    5636:	17 82       	std	Z+7, r1	; 0x07
    5638:	16 82       	std	Z+6, r1	; 0x06
    563a:	83 81       	ldd	r24, Z+3	; 0x03
    563c:	81 ff       	sbrs	r24, 1
    563e:	2a c3       	rjmp	.+1620   	; 0x5c94 <vfprintf+0x69a>
    5640:	9e 01       	movw	r18, r28
    5642:	2f 5f       	subi	r18, 0xFF	; 255
    5644:	3f 4f       	sbci	r19, 0xFF	; 255
    5646:	39 01       	movw	r6, r18
    5648:	f7 01       	movw	r30, r14
    564a:	93 81       	ldd	r25, Z+3	; 0x03
    564c:	f1 01       	movw	r30, r2
    564e:	93 fd       	sbrc	r25, 3
    5650:	85 91       	lpm	r24, Z+
    5652:	93 ff       	sbrs	r25, 3
    5654:	81 91       	ld	r24, Z+
    5656:	1f 01       	movw	r2, r30
    5658:	88 23       	and	r24, r24
    565a:	09 f4       	brne	.+2      	; 0x565e <vfprintf+0x64>
    565c:	17 c3       	rjmp	.+1582   	; 0x5c8c <vfprintf+0x692>
    565e:	85 32       	cpi	r24, 0x25	; 37
    5660:	39 f4       	brne	.+14     	; 0x5670 <vfprintf+0x76>
    5662:	93 fd       	sbrc	r25, 3
    5664:	85 91       	lpm	r24, Z+
    5666:	93 ff       	sbrs	r25, 3
    5668:	81 91       	ld	r24, Z+
    566a:	1f 01       	movw	r2, r30
    566c:	85 32       	cpi	r24, 0x25	; 37
    566e:	31 f4       	brne	.+12     	; 0x567c <vfprintf+0x82>
    5670:	b7 01       	movw	r22, r14
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	fd d7       	rcall	.+4090   	; 0x6670 <fputc>
    5676:	56 01       	movw	r10, r12
    5678:	65 01       	movw	r12, r10
    567a:	e6 cf       	rjmp	.-52     	; 0x5648 <vfprintf+0x4e>
    567c:	10 e0       	ldi	r17, 0x00	; 0
    567e:	51 2c       	mov	r5, r1
    5680:	91 2c       	mov	r9, r1
    5682:	ff e1       	ldi	r31, 0x1F	; 31
    5684:	f9 15       	cp	r31, r9
    5686:	d8 f0       	brcs	.+54     	; 0x56be <vfprintf+0xc4>
    5688:	8b 32       	cpi	r24, 0x2B	; 43
    568a:	79 f0       	breq	.+30     	; 0x56aa <vfprintf+0xb0>
    568c:	38 f4       	brcc	.+14     	; 0x569c <vfprintf+0xa2>
    568e:	80 32       	cpi	r24, 0x20	; 32
    5690:	79 f0       	breq	.+30     	; 0x56b0 <vfprintf+0xb6>
    5692:	83 32       	cpi	r24, 0x23	; 35
    5694:	a1 f4       	brne	.+40     	; 0x56be <vfprintf+0xc4>
    5696:	f9 2d       	mov	r31, r9
    5698:	f0 61       	ori	r31, 0x10	; 16
    569a:	2e c0       	rjmp	.+92     	; 0x56f8 <vfprintf+0xfe>
    569c:	8d 32       	cpi	r24, 0x2D	; 45
    569e:	61 f0       	breq	.+24     	; 0x56b8 <vfprintf+0xbe>
    56a0:	80 33       	cpi	r24, 0x30	; 48
    56a2:	69 f4       	brne	.+26     	; 0x56be <vfprintf+0xc4>
    56a4:	29 2d       	mov	r18, r9
    56a6:	21 60       	ori	r18, 0x01	; 1
    56a8:	2d c0       	rjmp	.+90     	; 0x5704 <vfprintf+0x10a>
    56aa:	39 2d       	mov	r19, r9
    56ac:	32 60       	ori	r19, 0x02	; 2
    56ae:	93 2e       	mov	r9, r19
    56b0:	89 2d       	mov	r24, r9
    56b2:	84 60       	ori	r24, 0x04	; 4
    56b4:	98 2e       	mov	r9, r24
    56b6:	2a c0       	rjmp	.+84     	; 0x570c <vfprintf+0x112>
    56b8:	e9 2d       	mov	r30, r9
    56ba:	e8 60       	ori	r30, 0x08	; 8
    56bc:	15 c0       	rjmp	.+42     	; 0x56e8 <vfprintf+0xee>
    56be:	97 fc       	sbrc	r9, 7
    56c0:	2d c0       	rjmp	.+90     	; 0x571c <vfprintf+0x122>
    56c2:	20 ed       	ldi	r18, 0xD0	; 208
    56c4:	28 0f       	add	r18, r24
    56c6:	2a 30       	cpi	r18, 0x0A	; 10
    56c8:	88 f4       	brcc	.+34     	; 0x56ec <vfprintf+0xf2>
    56ca:	96 fe       	sbrs	r9, 6
    56cc:	06 c0       	rjmp	.+12     	; 0x56da <vfprintf+0xe0>
    56ce:	3a e0       	ldi	r19, 0x0A	; 10
    56d0:	13 9f       	mul	r17, r19
    56d2:	20 0d       	add	r18, r0
    56d4:	11 24       	eor	r1, r1
    56d6:	12 2f       	mov	r17, r18
    56d8:	19 c0       	rjmp	.+50     	; 0x570c <vfprintf+0x112>
    56da:	8a e0       	ldi	r24, 0x0A	; 10
    56dc:	58 9e       	mul	r5, r24
    56de:	20 0d       	add	r18, r0
    56e0:	11 24       	eor	r1, r1
    56e2:	52 2e       	mov	r5, r18
    56e4:	e9 2d       	mov	r30, r9
    56e6:	e0 62       	ori	r30, 0x20	; 32
    56e8:	9e 2e       	mov	r9, r30
    56ea:	10 c0       	rjmp	.+32     	; 0x570c <vfprintf+0x112>
    56ec:	8e 32       	cpi	r24, 0x2E	; 46
    56ee:	31 f4       	brne	.+12     	; 0x56fc <vfprintf+0x102>
    56f0:	96 fc       	sbrc	r9, 6
    56f2:	cc c2       	rjmp	.+1432   	; 0x5c8c <vfprintf+0x692>
    56f4:	f9 2d       	mov	r31, r9
    56f6:	f0 64       	ori	r31, 0x40	; 64
    56f8:	9f 2e       	mov	r9, r31
    56fa:	08 c0       	rjmp	.+16     	; 0x570c <vfprintf+0x112>
    56fc:	8c 36       	cpi	r24, 0x6C	; 108
    56fe:	21 f4       	brne	.+8      	; 0x5708 <vfprintf+0x10e>
    5700:	29 2d       	mov	r18, r9
    5702:	20 68       	ori	r18, 0x80	; 128
    5704:	92 2e       	mov	r9, r18
    5706:	02 c0       	rjmp	.+4      	; 0x570c <vfprintf+0x112>
    5708:	88 36       	cpi	r24, 0x68	; 104
    570a:	41 f4       	brne	.+16     	; 0x571c <vfprintf+0x122>
    570c:	f1 01       	movw	r30, r2
    570e:	93 fd       	sbrc	r25, 3
    5710:	85 91       	lpm	r24, Z+
    5712:	93 ff       	sbrs	r25, 3
    5714:	81 91       	ld	r24, Z+
    5716:	1f 01       	movw	r2, r30
    5718:	81 11       	cpse	r24, r1
    571a:	b3 cf       	rjmp	.-154    	; 0x5682 <vfprintf+0x88>
    571c:	9b eb       	ldi	r25, 0xBB	; 187
    571e:	98 0f       	add	r25, r24
    5720:	93 30       	cpi	r25, 0x03	; 3
    5722:	20 f4       	brcc	.+8      	; 0x572c <vfprintf+0x132>
    5724:	99 2d       	mov	r25, r9
    5726:	90 61       	ori	r25, 0x10	; 16
    5728:	80 5e       	subi	r24, 0xE0	; 224
    572a:	07 c0       	rjmp	.+14     	; 0x573a <vfprintf+0x140>
    572c:	9b e9       	ldi	r25, 0x9B	; 155
    572e:	98 0f       	add	r25, r24
    5730:	93 30       	cpi	r25, 0x03	; 3
    5732:	08 f0       	brcs	.+2      	; 0x5736 <vfprintf+0x13c>
    5734:	59 c1       	rjmp	.+690    	; 0x59e8 <vfprintf+0x3ee>
    5736:	99 2d       	mov	r25, r9
    5738:	9f 7e       	andi	r25, 0xEF	; 239
    573a:	96 ff       	sbrs	r25, 6
    573c:	16 e0       	ldi	r17, 0x06	; 6
    573e:	9f 73       	andi	r25, 0x3F	; 63
    5740:	99 2e       	mov	r9, r25
    5742:	85 36       	cpi	r24, 0x65	; 101
    5744:	19 f4       	brne	.+6      	; 0x574c <vfprintf+0x152>
    5746:	90 64       	ori	r25, 0x40	; 64
    5748:	99 2e       	mov	r9, r25
    574a:	08 c0       	rjmp	.+16     	; 0x575c <vfprintf+0x162>
    574c:	86 36       	cpi	r24, 0x66	; 102
    574e:	21 f4       	brne	.+8      	; 0x5758 <vfprintf+0x15e>
    5750:	39 2f       	mov	r19, r25
    5752:	30 68       	ori	r19, 0x80	; 128
    5754:	93 2e       	mov	r9, r19
    5756:	02 c0       	rjmp	.+4      	; 0x575c <vfprintf+0x162>
    5758:	11 11       	cpse	r17, r1
    575a:	11 50       	subi	r17, 0x01	; 1
    575c:	97 fe       	sbrs	r9, 7
    575e:	07 c0       	rjmp	.+14     	; 0x576e <vfprintf+0x174>
    5760:	1c 33       	cpi	r17, 0x3C	; 60
    5762:	50 f4       	brcc	.+20     	; 0x5778 <vfprintf+0x17e>
    5764:	44 24       	eor	r4, r4
    5766:	43 94       	inc	r4
    5768:	41 0e       	add	r4, r17
    576a:	27 e0       	ldi	r18, 0x07	; 7
    576c:	0b c0       	rjmp	.+22     	; 0x5784 <vfprintf+0x18a>
    576e:	18 30       	cpi	r17, 0x08	; 8
    5770:	38 f0       	brcs	.+14     	; 0x5780 <vfprintf+0x186>
    5772:	27 e0       	ldi	r18, 0x07	; 7
    5774:	17 e0       	ldi	r17, 0x07	; 7
    5776:	05 c0       	rjmp	.+10     	; 0x5782 <vfprintf+0x188>
    5778:	27 e0       	ldi	r18, 0x07	; 7
    577a:	9c e3       	ldi	r25, 0x3C	; 60
    577c:	49 2e       	mov	r4, r25
    577e:	02 c0       	rjmp	.+4      	; 0x5784 <vfprintf+0x18a>
    5780:	21 2f       	mov	r18, r17
    5782:	41 2c       	mov	r4, r1
    5784:	56 01       	movw	r10, r12
    5786:	84 e0       	ldi	r24, 0x04	; 4
    5788:	a8 0e       	add	r10, r24
    578a:	b1 1c       	adc	r11, r1
    578c:	f6 01       	movw	r30, r12
    578e:	60 81       	ld	r22, Z
    5790:	71 81       	ldd	r23, Z+1	; 0x01
    5792:	82 81       	ldd	r24, Z+2	; 0x02
    5794:	93 81       	ldd	r25, Z+3	; 0x03
    5796:	04 2d       	mov	r16, r4
    5798:	a3 01       	movw	r20, r6
    579a:	1d d6       	rcall	.+3130   	; 0x63d6 <__ftoa_engine>
    579c:	6c 01       	movw	r12, r24
    579e:	f9 81       	ldd	r31, Y+1	; 0x01
    57a0:	fc 87       	std	Y+12, r31	; 0x0c
    57a2:	f0 ff       	sbrs	r31, 0
    57a4:	02 c0       	rjmp	.+4      	; 0x57aa <vfprintf+0x1b0>
    57a6:	f3 ff       	sbrs	r31, 3
    57a8:	06 c0       	rjmp	.+12     	; 0x57b6 <vfprintf+0x1bc>
    57aa:	91 fc       	sbrc	r9, 1
    57ac:	06 c0       	rjmp	.+12     	; 0x57ba <vfprintf+0x1c0>
    57ae:	92 fe       	sbrs	r9, 2
    57b0:	06 c0       	rjmp	.+12     	; 0x57be <vfprintf+0x1c4>
    57b2:	00 e2       	ldi	r16, 0x20	; 32
    57b4:	05 c0       	rjmp	.+10     	; 0x57c0 <vfprintf+0x1c6>
    57b6:	0d e2       	ldi	r16, 0x2D	; 45
    57b8:	03 c0       	rjmp	.+6      	; 0x57c0 <vfprintf+0x1c6>
    57ba:	0b e2       	ldi	r16, 0x2B	; 43
    57bc:	01 c0       	rjmp	.+2      	; 0x57c0 <vfprintf+0x1c6>
    57be:	00 e0       	ldi	r16, 0x00	; 0
    57c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    57c2:	8c 70       	andi	r24, 0x0C	; 12
    57c4:	19 f0       	breq	.+6      	; 0x57cc <vfprintf+0x1d2>
    57c6:	01 11       	cpse	r16, r1
    57c8:	43 c2       	rjmp	.+1158   	; 0x5c50 <vfprintf+0x656>
    57ca:	80 c2       	rjmp	.+1280   	; 0x5ccc <vfprintf+0x6d2>
    57cc:	97 fe       	sbrs	r9, 7
    57ce:	10 c0       	rjmp	.+32     	; 0x57f0 <vfprintf+0x1f6>
    57d0:	4c 0c       	add	r4, r12
    57d2:	fc 85       	ldd	r31, Y+12	; 0x0c
    57d4:	f4 ff       	sbrs	r31, 4
    57d6:	04 c0       	rjmp	.+8      	; 0x57e0 <vfprintf+0x1e6>
    57d8:	8a 81       	ldd	r24, Y+2	; 0x02
    57da:	81 33       	cpi	r24, 0x31	; 49
    57dc:	09 f4       	brne	.+2      	; 0x57e0 <vfprintf+0x1e6>
    57de:	4a 94       	dec	r4
    57e0:	14 14       	cp	r1, r4
    57e2:	74 f5       	brge	.+92     	; 0x5840 <vfprintf+0x246>
    57e4:	28 e0       	ldi	r18, 0x08	; 8
    57e6:	24 15       	cp	r18, r4
    57e8:	78 f5       	brcc	.+94     	; 0x5848 <vfprintf+0x24e>
    57ea:	88 e0       	ldi	r24, 0x08	; 8
    57ec:	48 2e       	mov	r4, r24
    57ee:	2c c0       	rjmp	.+88     	; 0x5848 <vfprintf+0x24e>
    57f0:	96 fc       	sbrc	r9, 6
    57f2:	2a c0       	rjmp	.+84     	; 0x5848 <vfprintf+0x24e>
    57f4:	81 2f       	mov	r24, r17
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	8c 15       	cp	r24, r12
    57fa:	9d 05       	cpc	r25, r13
    57fc:	9c f0       	brlt	.+38     	; 0x5824 <vfprintf+0x22a>
    57fe:	3c ef       	ldi	r19, 0xFC	; 252
    5800:	c3 16       	cp	r12, r19
    5802:	3f ef       	ldi	r19, 0xFF	; 255
    5804:	d3 06       	cpc	r13, r19
    5806:	74 f0       	brlt	.+28     	; 0x5824 <vfprintf+0x22a>
    5808:	89 2d       	mov	r24, r9
    580a:	80 68       	ori	r24, 0x80	; 128
    580c:	98 2e       	mov	r9, r24
    580e:	0a c0       	rjmp	.+20     	; 0x5824 <vfprintf+0x22a>
    5810:	e2 e0       	ldi	r30, 0x02	; 2
    5812:	f0 e0       	ldi	r31, 0x00	; 0
    5814:	ec 0f       	add	r30, r28
    5816:	fd 1f       	adc	r31, r29
    5818:	e1 0f       	add	r30, r17
    581a:	f1 1d       	adc	r31, r1
    581c:	80 81       	ld	r24, Z
    581e:	80 33       	cpi	r24, 0x30	; 48
    5820:	19 f4       	brne	.+6      	; 0x5828 <vfprintf+0x22e>
    5822:	11 50       	subi	r17, 0x01	; 1
    5824:	11 11       	cpse	r17, r1
    5826:	f4 cf       	rjmp	.-24     	; 0x5810 <vfprintf+0x216>
    5828:	97 fe       	sbrs	r9, 7
    582a:	0e c0       	rjmp	.+28     	; 0x5848 <vfprintf+0x24e>
    582c:	44 24       	eor	r4, r4
    582e:	43 94       	inc	r4
    5830:	41 0e       	add	r4, r17
    5832:	81 2f       	mov	r24, r17
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	c8 16       	cp	r12, r24
    5838:	d9 06       	cpc	r13, r25
    583a:	2c f4       	brge	.+10     	; 0x5846 <vfprintf+0x24c>
    583c:	1c 19       	sub	r17, r12
    583e:	04 c0       	rjmp	.+8      	; 0x5848 <vfprintf+0x24e>
    5840:	44 24       	eor	r4, r4
    5842:	43 94       	inc	r4
    5844:	01 c0       	rjmp	.+2      	; 0x5848 <vfprintf+0x24e>
    5846:	10 e0       	ldi	r17, 0x00	; 0
    5848:	97 fe       	sbrs	r9, 7
    584a:	06 c0       	rjmp	.+12     	; 0x5858 <vfprintf+0x25e>
    584c:	1c 14       	cp	r1, r12
    584e:	1d 04       	cpc	r1, r13
    5850:	34 f4       	brge	.+12     	; 0x585e <vfprintf+0x264>
    5852:	c6 01       	movw	r24, r12
    5854:	01 96       	adiw	r24, 0x01	; 1
    5856:	05 c0       	rjmp	.+10     	; 0x5862 <vfprintf+0x268>
    5858:	85 e0       	ldi	r24, 0x05	; 5
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	02 c0       	rjmp	.+4      	; 0x5862 <vfprintf+0x268>
    585e:	81 e0       	ldi	r24, 0x01	; 1
    5860:	90 e0       	ldi	r25, 0x00	; 0
    5862:	01 11       	cpse	r16, r1
    5864:	01 96       	adiw	r24, 0x01	; 1
    5866:	11 23       	and	r17, r17
    5868:	31 f0       	breq	.+12     	; 0x5876 <vfprintf+0x27c>
    586a:	21 2f       	mov	r18, r17
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	2f 5f       	subi	r18, 0xFF	; 255
    5870:	3f 4f       	sbci	r19, 0xFF	; 255
    5872:	82 0f       	add	r24, r18
    5874:	93 1f       	adc	r25, r19
    5876:	25 2d       	mov	r18, r5
    5878:	30 e0       	ldi	r19, 0x00	; 0
    587a:	82 17       	cp	r24, r18
    587c:	93 07       	cpc	r25, r19
    587e:	14 f4       	brge	.+4      	; 0x5884 <vfprintf+0x28a>
    5880:	58 1a       	sub	r5, r24
    5882:	01 c0       	rjmp	.+2      	; 0x5886 <vfprintf+0x28c>
    5884:	51 2c       	mov	r5, r1
    5886:	89 2d       	mov	r24, r9
    5888:	89 70       	andi	r24, 0x09	; 9
    588a:	41 f4       	brne	.+16     	; 0x589c <vfprintf+0x2a2>
    588c:	55 20       	and	r5, r5
    588e:	31 f0       	breq	.+12     	; 0x589c <vfprintf+0x2a2>
    5890:	b7 01       	movw	r22, r14
    5892:	80 e2       	ldi	r24, 0x20	; 32
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	ec d6       	rcall	.+3544   	; 0x6670 <fputc>
    5898:	5a 94       	dec	r5
    589a:	f8 cf       	rjmp	.-16     	; 0x588c <vfprintf+0x292>
    589c:	00 23       	and	r16, r16
    589e:	21 f0       	breq	.+8      	; 0x58a8 <vfprintf+0x2ae>
    58a0:	b7 01       	movw	r22, r14
    58a2:	80 2f       	mov	r24, r16
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	e4 d6       	rcall	.+3528   	; 0x6670 <fputc>
    58a8:	93 fc       	sbrc	r9, 3
    58aa:	08 c0       	rjmp	.+16     	; 0x58bc <vfprintf+0x2c2>
    58ac:	55 20       	and	r5, r5
    58ae:	31 f0       	breq	.+12     	; 0x58bc <vfprintf+0x2c2>
    58b0:	b7 01       	movw	r22, r14
    58b2:	80 e3       	ldi	r24, 0x30	; 48
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	dc d6       	rcall	.+3512   	; 0x6670 <fputc>
    58b8:	5a 94       	dec	r5
    58ba:	f8 cf       	rjmp	.-16     	; 0x58ac <vfprintf+0x2b2>
    58bc:	97 fe       	sbrs	r9, 7
    58be:	4a c0       	rjmp	.+148    	; 0x5954 <vfprintf+0x35a>
    58c0:	46 01       	movw	r8, r12
    58c2:	d7 fe       	sbrs	r13, 7
    58c4:	02 c0       	rjmp	.+4      	; 0x58ca <vfprintf+0x2d0>
    58c6:	81 2c       	mov	r8, r1
    58c8:	91 2c       	mov	r9, r1
    58ca:	c6 01       	movw	r24, r12
    58cc:	88 19       	sub	r24, r8
    58ce:	99 09       	sbc	r25, r9
    58d0:	f3 01       	movw	r30, r6
    58d2:	e8 0f       	add	r30, r24
    58d4:	f9 1f       	adc	r31, r25
    58d6:	fe 87       	std	Y+14, r31	; 0x0e
    58d8:	ed 87       	std	Y+13, r30	; 0x0d
    58da:	96 01       	movw	r18, r12
    58dc:	24 19       	sub	r18, r4
    58de:	31 09       	sbc	r19, r1
    58e0:	38 8b       	std	Y+16, r19	; 0x10
    58e2:	2f 87       	std	Y+15, r18	; 0x0f
    58e4:	01 2f       	mov	r16, r17
    58e6:	10 e0       	ldi	r17, 0x00	; 0
    58e8:	11 95       	neg	r17
    58ea:	01 95       	neg	r16
    58ec:	11 09       	sbc	r17, r1
    58ee:	3f ef       	ldi	r19, 0xFF	; 255
    58f0:	83 16       	cp	r8, r19
    58f2:	93 06       	cpc	r9, r19
    58f4:	21 f4       	brne	.+8      	; 0x58fe <vfprintf+0x304>
    58f6:	b7 01       	movw	r22, r14
    58f8:	8e e2       	ldi	r24, 0x2E	; 46
    58fa:	90 e0       	ldi	r25, 0x00	; 0
    58fc:	b9 d6       	rcall	.+3442   	; 0x6670 <fputc>
    58fe:	c8 14       	cp	r12, r8
    5900:	d9 04       	cpc	r13, r9
    5902:	4c f0       	brlt	.+18     	; 0x5916 <vfprintf+0x31c>
    5904:	8f 85       	ldd	r24, Y+15	; 0x0f
    5906:	98 89       	ldd	r25, Y+16	; 0x10
    5908:	88 15       	cp	r24, r8
    590a:	99 05       	cpc	r25, r9
    590c:	24 f4       	brge	.+8      	; 0x5916 <vfprintf+0x31c>
    590e:	ed 85       	ldd	r30, Y+13	; 0x0d
    5910:	fe 85       	ldd	r31, Y+14	; 0x0e
    5912:	81 81       	ldd	r24, Z+1	; 0x01
    5914:	01 c0       	rjmp	.+2      	; 0x5918 <vfprintf+0x31e>
    5916:	80 e3       	ldi	r24, 0x30	; 48
    5918:	f1 e0       	ldi	r31, 0x01	; 1
    591a:	8f 1a       	sub	r8, r31
    591c:	91 08       	sbc	r9, r1
    591e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5920:	3e 85       	ldd	r19, Y+14	; 0x0e
    5922:	2f 5f       	subi	r18, 0xFF	; 255
    5924:	3f 4f       	sbci	r19, 0xFF	; 255
    5926:	3e 87       	std	Y+14, r19	; 0x0e
    5928:	2d 87       	std	Y+13, r18	; 0x0d
    592a:	80 16       	cp	r8, r16
    592c:	91 06       	cpc	r9, r17
    592e:	24 f0       	brlt	.+8      	; 0x5938 <vfprintf+0x33e>
    5930:	b7 01       	movw	r22, r14
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	9d d6       	rcall	.+3386   	; 0x6670 <fputc>
    5936:	db cf       	rjmp	.-74     	; 0x58ee <vfprintf+0x2f4>
    5938:	c8 14       	cp	r12, r8
    593a:	d9 04       	cpc	r13, r9
    593c:	41 f4       	brne	.+16     	; 0x594e <vfprintf+0x354>
    593e:	9a 81       	ldd	r25, Y+2	; 0x02
    5940:	96 33       	cpi	r25, 0x36	; 54
    5942:	20 f4       	brcc	.+8      	; 0x594c <vfprintf+0x352>
    5944:	95 33       	cpi	r25, 0x35	; 53
    5946:	19 f4       	brne	.+6      	; 0x594e <vfprintf+0x354>
    5948:	3c 85       	ldd	r19, Y+12	; 0x0c
    594a:	34 ff       	sbrs	r19, 4
    594c:	81 e3       	ldi	r24, 0x31	; 49
    594e:	b7 01       	movw	r22, r14
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	48 c0       	rjmp	.+144    	; 0x59e4 <vfprintf+0x3ea>
    5954:	8a 81       	ldd	r24, Y+2	; 0x02
    5956:	81 33       	cpi	r24, 0x31	; 49
    5958:	19 f0       	breq	.+6      	; 0x5960 <vfprintf+0x366>
    595a:	9c 85       	ldd	r25, Y+12	; 0x0c
    595c:	9f 7e       	andi	r25, 0xEF	; 239
    595e:	9c 87       	std	Y+12, r25	; 0x0c
    5960:	b7 01       	movw	r22, r14
    5962:	90 e0       	ldi	r25, 0x00	; 0
    5964:	85 d6       	rcall	.+3338   	; 0x6670 <fputc>
    5966:	11 11       	cpse	r17, r1
    5968:	05 c0       	rjmp	.+10     	; 0x5974 <vfprintf+0x37a>
    596a:	94 fc       	sbrc	r9, 4
    596c:	16 c0       	rjmp	.+44     	; 0x599a <vfprintf+0x3a0>
    596e:	85 e6       	ldi	r24, 0x65	; 101
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	15 c0       	rjmp	.+42     	; 0x599e <vfprintf+0x3a4>
    5974:	b7 01       	movw	r22, r14
    5976:	8e e2       	ldi	r24, 0x2E	; 46
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	7a d6       	rcall	.+3316   	; 0x6670 <fputc>
    597c:	1e 5f       	subi	r17, 0xFE	; 254
    597e:	82 e0       	ldi	r24, 0x02	; 2
    5980:	01 e0       	ldi	r16, 0x01	; 1
    5982:	08 0f       	add	r16, r24
    5984:	f3 01       	movw	r30, r6
    5986:	e8 0f       	add	r30, r24
    5988:	f1 1d       	adc	r31, r1
    598a:	80 81       	ld	r24, Z
    598c:	b7 01       	movw	r22, r14
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	6f d6       	rcall	.+3294   	; 0x6670 <fputc>
    5992:	80 2f       	mov	r24, r16
    5994:	01 13       	cpse	r16, r17
    5996:	f4 cf       	rjmp	.-24     	; 0x5980 <vfprintf+0x386>
    5998:	e8 cf       	rjmp	.-48     	; 0x596a <vfprintf+0x370>
    599a:	85 e4       	ldi	r24, 0x45	; 69
    599c:	90 e0       	ldi	r25, 0x00	; 0
    599e:	b7 01       	movw	r22, r14
    59a0:	67 d6       	rcall	.+3278   	; 0x6670 <fputc>
    59a2:	d7 fc       	sbrc	r13, 7
    59a4:	06 c0       	rjmp	.+12     	; 0x59b2 <vfprintf+0x3b8>
    59a6:	c1 14       	cp	r12, r1
    59a8:	d1 04       	cpc	r13, r1
    59aa:	41 f4       	brne	.+16     	; 0x59bc <vfprintf+0x3c2>
    59ac:	ec 85       	ldd	r30, Y+12	; 0x0c
    59ae:	e4 ff       	sbrs	r30, 4
    59b0:	05 c0       	rjmp	.+10     	; 0x59bc <vfprintf+0x3c2>
    59b2:	d1 94       	neg	r13
    59b4:	c1 94       	neg	r12
    59b6:	d1 08       	sbc	r13, r1
    59b8:	8d e2       	ldi	r24, 0x2D	; 45
    59ba:	01 c0       	rjmp	.+2      	; 0x59be <vfprintf+0x3c4>
    59bc:	8b e2       	ldi	r24, 0x2B	; 43
    59be:	b7 01       	movw	r22, r14
    59c0:	90 e0       	ldi	r25, 0x00	; 0
    59c2:	56 d6       	rcall	.+3244   	; 0x6670 <fputc>
    59c4:	80 e3       	ldi	r24, 0x30	; 48
    59c6:	2a e0       	ldi	r18, 0x0A	; 10
    59c8:	c2 16       	cp	r12, r18
    59ca:	d1 04       	cpc	r13, r1
    59cc:	2c f0       	brlt	.+10     	; 0x59d8 <vfprintf+0x3de>
    59ce:	8f 5f       	subi	r24, 0xFF	; 255
    59d0:	fa e0       	ldi	r31, 0x0A	; 10
    59d2:	cf 1a       	sub	r12, r31
    59d4:	d1 08       	sbc	r13, r1
    59d6:	f7 cf       	rjmp	.-18     	; 0x59c6 <vfprintf+0x3cc>
    59d8:	b7 01       	movw	r22, r14
    59da:	90 e0       	ldi	r25, 0x00	; 0
    59dc:	49 d6       	rcall	.+3218   	; 0x6670 <fputc>
    59de:	b7 01       	movw	r22, r14
    59e0:	c6 01       	movw	r24, r12
    59e2:	c0 96       	adiw	r24, 0x30	; 48
    59e4:	45 d6       	rcall	.+3210   	; 0x6670 <fputc>
    59e6:	49 c1       	rjmp	.+658    	; 0x5c7a <vfprintf+0x680>
    59e8:	83 36       	cpi	r24, 0x63	; 99
    59ea:	31 f0       	breq	.+12     	; 0x59f8 <vfprintf+0x3fe>
    59ec:	83 37       	cpi	r24, 0x73	; 115
    59ee:	79 f0       	breq	.+30     	; 0x5a0e <vfprintf+0x414>
    59f0:	83 35       	cpi	r24, 0x53	; 83
    59f2:	09 f0       	breq	.+2      	; 0x59f6 <vfprintf+0x3fc>
    59f4:	52 c0       	rjmp	.+164    	; 0x5a9a <vfprintf+0x4a0>
    59f6:	1f c0       	rjmp	.+62     	; 0x5a36 <vfprintf+0x43c>
    59f8:	56 01       	movw	r10, r12
    59fa:	32 e0       	ldi	r19, 0x02	; 2
    59fc:	a3 0e       	add	r10, r19
    59fe:	b1 1c       	adc	r11, r1
    5a00:	f6 01       	movw	r30, r12
    5a02:	80 81       	ld	r24, Z
    5a04:	89 83       	std	Y+1, r24	; 0x01
    5a06:	01 e0       	ldi	r16, 0x01	; 1
    5a08:	10 e0       	ldi	r17, 0x00	; 0
    5a0a:	63 01       	movw	r12, r6
    5a0c:	11 c0       	rjmp	.+34     	; 0x5a30 <vfprintf+0x436>
    5a0e:	56 01       	movw	r10, r12
    5a10:	f2 e0       	ldi	r31, 0x02	; 2
    5a12:	af 0e       	add	r10, r31
    5a14:	b1 1c       	adc	r11, r1
    5a16:	f6 01       	movw	r30, r12
    5a18:	c0 80       	ld	r12, Z
    5a1a:	d1 80       	ldd	r13, Z+1	; 0x01
    5a1c:	96 fe       	sbrs	r9, 6
    5a1e:	03 c0       	rjmp	.+6      	; 0x5a26 <vfprintf+0x42c>
    5a20:	61 2f       	mov	r22, r17
    5a22:	70 e0       	ldi	r23, 0x00	; 0
    5a24:	02 c0       	rjmp	.+4      	; 0x5a2a <vfprintf+0x430>
    5a26:	6f ef       	ldi	r22, 0xFF	; 255
    5a28:	7f ef       	ldi	r23, 0xFF	; 255
    5a2a:	c6 01       	movw	r24, r12
    5a2c:	16 d6       	rcall	.+3116   	; 0x665a <strnlen>
    5a2e:	8c 01       	movw	r16, r24
    5a30:	f9 2d       	mov	r31, r9
    5a32:	ff 77       	andi	r31, 0x7F	; 127
    5a34:	13 c0       	rjmp	.+38     	; 0x5a5c <vfprintf+0x462>
    5a36:	56 01       	movw	r10, r12
    5a38:	22 e0       	ldi	r18, 0x02	; 2
    5a3a:	a2 0e       	add	r10, r18
    5a3c:	b1 1c       	adc	r11, r1
    5a3e:	f6 01       	movw	r30, r12
    5a40:	c0 80       	ld	r12, Z
    5a42:	d1 80       	ldd	r13, Z+1	; 0x01
    5a44:	96 fe       	sbrs	r9, 6
    5a46:	03 c0       	rjmp	.+6      	; 0x5a4e <vfprintf+0x454>
    5a48:	61 2f       	mov	r22, r17
    5a4a:	70 e0       	ldi	r23, 0x00	; 0
    5a4c:	02 c0       	rjmp	.+4      	; 0x5a52 <vfprintf+0x458>
    5a4e:	6f ef       	ldi	r22, 0xFF	; 255
    5a50:	7f ef       	ldi	r23, 0xFF	; 255
    5a52:	c6 01       	movw	r24, r12
    5a54:	98 d5       	rcall	.+2864   	; 0x6586 <strnlen_P>
    5a56:	8c 01       	movw	r16, r24
    5a58:	f9 2d       	mov	r31, r9
    5a5a:	f0 68       	ori	r31, 0x80	; 128
    5a5c:	9f 2e       	mov	r9, r31
    5a5e:	f3 fd       	sbrc	r31, 3
    5a60:	18 c0       	rjmp	.+48     	; 0x5a92 <vfprintf+0x498>
    5a62:	85 2d       	mov	r24, r5
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	08 17       	cp	r16, r24
    5a68:	19 07       	cpc	r17, r25
    5a6a:	98 f4       	brcc	.+38     	; 0x5a92 <vfprintf+0x498>
    5a6c:	b7 01       	movw	r22, r14
    5a6e:	80 e2       	ldi	r24, 0x20	; 32
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	fe d5       	rcall	.+3068   	; 0x6670 <fputc>
    5a74:	5a 94       	dec	r5
    5a76:	f5 cf       	rjmp	.-22     	; 0x5a62 <vfprintf+0x468>
    5a78:	f6 01       	movw	r30, r12
    5a7a:	97 fc       	sbrc	r9, 7
    5a7c:	85 91       	lpm	r24, Z+
    5a7e:	97 fe       	sbrs	r9, 7
    5a80:	81 91       	ld	r24, Z+
    5a82:	6f 01       	movw	r12, r30
    5a84:	b7 01       	movw	r22, r14
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	f3 d5       	rcall	.+3046   	; 0x6670 <fputc>
    5a8a:	51 10       	cpse	r5, r1
    5a8c:	5a 94       	dec	r5
    5a8e:	01 50       	subi	r16, 0x01	; 1
    5a90:	11 09       	sbc	r17, r1
    5a92:	01 15       	cp	r16, r1
    5a94:	11 05       	cpc	r17, r1
    5a96:	81 f7       	brne	.-32     	; 0x5a78 <vfprintf+0x47e>
    5a98:	f0 c0       	rjmp	.+480    	; 0x5c7a <vfprintf+0x680>
    5a9a:	84 36       	cpi	r24, 0x64	; 100
    5a9c:	11 f0       	breq	.+4      	; 0x5aa2 <vfprintf+0x4a8>
    5a9e:	89 36       	cpi	r24, 0x69	; 105
    5aa0:	59 f5       	brne	.+86     	; 0x5af8 <vfprintf+0x4fe>
    5aa2:	56 01       	movw	r10, r12
    5aa4:	97 fe       	sbrs	r9, 7
    5aa6:	09 c0       	rjmp	.+18     	; 0x5aba <vfprintf+0x4c0>
    5aa8:	24 e0       	ldi	r18, 0x04	; 4
    5aaa:	a2 0e       	add	r10, r18
    5aac:	b1 1c       	adc	r11, r1
    5aae:	f6 01       	movw	r30, r12
    5ab0:	60 81       	ld	r22, Z
    5ab2:	71 81       	ldd	r23, Z+1	; 0x01
    5ab4:	82 81       	ldd	r24, Z+2	; 0x02
    5ab6:	93 81       	ldd	r25, Z+3	; 0x03
    5ab8:	0a c0       	rjmp	.+20     	; 0x5ace <vfprintf+0x4d4>
    5aba:	f2 e0       	ldi	r31, 0x02	; 2
    5abc:	af 0e       	add	r10, r31
    5abe:	b1 1c       	adc	r11, r1
    5ac0:	f6 01       	movw	r30, r12
    5ac2:	60 81       	ld	r22, Z
    5ac4:	71 81       	ldd	r23, Z+1	; 0x01
    5ac6:	07 2e       	mov	r0, r23
    5ac8:	00 0c       	add	r0, r0
    5aca:	88 0b       	sbc	r24, r24
    5acc:	99 0b       	sbc	r25, r25
    5ace:	f9 2d       	mov	r31, r9
    5ad0:	ff 76       	andi	r31, 0x6F	; 111
    5ad2:	9f 2e       	mov	r9, r31
    5ad4:	97 ff       	sbrs	r25, 7
    5ad6:	09 c0       	rjmp	.+18     	; 0x5aea <vfprintf+0x4f0>
    5ad8:	90 95       	com	r25
    5ada:	80 95       	com	r24
    5adc:	70 95       	com	r23
    5ade:	61 95       	neg	r22
    5ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae6:	f0 68       	ori	r31, 0x80	; 128
    5ae8:	9f 2e       	mov	r9, r31
    5aea:	2a e0       	ldi	r18, 0x0A	; 10
    5aec:	30 e0       	ldi	r19, 0x00	; 0
    5aee:	a3 01       	movw	r20, r6
    5af0:	6e d6       	rcall	.+3292   	; 0x67ce <__ultoa_invert>
    5af2:	c8 2e       	mov	r12, r24
    5af4:	c6 18       	sub	r12, r6
    5af6:	3e c0       	rjmp	.+124    	; 0x5b74 <vfprintf+0x57a>
    5af8:	09 2d       	mov	r16, r9
    5afa:	85 37       	cpi	r24, 0x75	; 117
    5afc:	21 f4       	brne	.+8      	; 0x5b06 <vfprintf+0x50c>
    5afe:	0f 7e       	andi	r16, 0xEF	; 239
    5b00:	2a e0       	ldi	r18, 0x0A	; 10
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	1d c0       	rjmp	.+58     	; 0x5b40 <vfprintf+0x546>
    5b06:	09 7f       	andi	r16, 0xF9	; 249
    5b08:	8f 36       	cpi	r24, 0x6F	; 111
    5b0a:	91 f0       	breq	.+36     	; 0x5b30 <vfprintf+0x536>
    5b0c:	18 f4       	brcc	.+6      	; 0x5b14 <vfprintf+0x51a>
    5b0e:	88 35       	cpi	r24, 0x58	; 88
    5b10:	59 f0       	breq	.+22     	; 0x5b28 <vfprintf+0x52e>
    5b12:	bc c0       	rjmp	.+376    	; 0x5c8c <vfprintf+0x692>
    5b14:	80 37       	cpi	r24, 0x70	; 112
    5b16:	19 f0       	breq	.+6      	; 0x5b1e <vfprintf+0x524>
    5b18:	88 37       	cpi	r24, 0x78	; 120
    5b1a:	11 f0       	breq	.+4      	; 0x5b20 <vfprintf+0x526>
    5b1c:	b7 c0       	rjmp	.+366    	; 0x5c8c <vfprintf+0x692>
    5b1e:	00 61       	ori	r16, 0x10	; 16
    5b20:	04 ff       	sbrs	r16, 4
    5b22:	09 c0       	rjmp	.+18     	; 0x5b36 <vfprintf+0x53c>
    5b24:	04 60       	ori	r16, 0x04	; 4
    5b26:	07 c0       	rjmp	.+14     	; 0x5b36 <vfprintf+0x53c>
    5b28:	94 fe       	sbrs	r9, 4
    5b2a:	08 c0       	rjmp	.+16     	; 0x5b3c <vfprintf+0x542>
    5b2c:	06 60       	ori	r16, 0x06	; 6
    5b2e:	06 c0       	rjmp	.+12     	; 0x5b3c <vfprintf+0x542>
    5b30:	28 e0       	ldi	r18, 0x08	; 8
    5b32:	30 e0       	ldi	r19, 0x00	; 0
    5b34:	05 c0       	rjmp	.+10     	; 0x5b40 <vfprintf+0x546>
    5b36:	20 e1       	ldi	r18, 0x10	; 16
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	02 c0       	rjmp	.+4      	; 0x5b40 <vfprintf+0x546>
    5b3c:	20 e1       	ldi	r18, 0x10	; 16
    5b3e:	32 e0       	ldi	r19, 0x02	; 2
    5b40:	56 01       	movw	r10, r12
    5b42:	07 ff       	sbrs	r16, 7
    5b44:	09 c0       	rjmp	.+18     	; 0x5b58 <vfprintf+0x55e>
    5b46:	84 e0       	ldi	r24, 0x04	; 4
    5b48:	a8 0e       	add	r10, r24
    5b4a:	b1 1c       	adc	r11, r1
    5b4c:	f6 01       	movw	r30, r12
    5b4e:	60 81       	ld	r22, Z
    5b50:	71 81       	ldd	r23, Z+1	; 0x01
    5b52:	82 81       	ldd	r24, Z+2	; 0x02
    5b54:	93 81       	ldd	r25, Z+3	; 0x03
    5b56:	08 c0       	rjmp	.+16     	; 0x5b68 <vfprintf+0x56e>
    5b58:	f2 e0       	ldi	r31, 0x02	; 2
    5b5a:	af 0e       	add	r10, r31
    5b5c:	b1 1c       	adc	r11, r1
    5b5e:	f6 01       	movw	r30, r12
    5b60:	60 81       	ld	r22, Z
    5b62:	71 81       	ldd	r23, Z+1	; 0x01
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	a3 01       	movw	r20, r6
    5b6a:	31 d6       	rcall	.+3170   	; 0x67ce <__ultoa_invert>
    5b6c:	c8 2e       	mov	r12, r24
    5b6e:	c6 18       	sub	r12, r6
    5b70:	0f 77       	andi	r16, 0x7F	; 127
    5b72:	90 2e       	mov	r9, r16
    5b74:	96 fe       	sbrs	r9, 6
    5b76:	0b c0       	rjmp	.+22     	; 0x5b8e <vfprintf+0x594>
    5b78:	09 2d       	mov	r16, r9
    5b7a:	0e 7f       	andi	r16, 0xFE	; 254
    5b7c:	c1 16       	cp	r12, r17
    5b7e:	50 f4       	brcc	.+20     	; 0x5b94 <vfprintf+0x59a>
    5b80:	94 fe       	sbrs	r9, 4
    5b82:	0a c0       	rjmp	.+20     	; 0x5b98 <vfprintf+0x59e>
    5b84:	92 fc       	sbrc	r9, 2
    5b86:	08 c0       	rjmp	.+16     	; 0x5b98 <vfprintf+0x59e>
    5b88:	09 2d       	mov	r16, r9
    5b8a:	0e 7e       	andi	r16, 0xEE	; 238
    5b8c:	05 c0       	rjmp	.+10     	; 0x5b98 <vfprintf+0x59e>
    5b8e:	dc 2c       	mov	r13, r12
    5b90:	09 2d       	mov	r16, r9
    5b92:	03 c0       	rjmp	.+6      	; 0x5b9a <vfprintf+0x5a0>
    5b94:	dc 2c       	mov	r13, r12
    5b96:	01 c0       	rjmp	.+2      	; 0x5b9a <vfprintf+0x5a0>
    5b98:	d1 2e       	mov	r13, r17
    5b9a:	04 ff       	sbrs	r16, 4
    5b9c:	0d c0       	rjmp	.+26     	; 0x5bb8 <vfprintf+0x5be>
    5b9e:	fe 01       	movw	r30, r28
    5ba0:	ec 0d       	add	r30, r12
    5ba2:	f1 1d       	adc	r31, r1
    5ba4:	80 81       	ld	r24, Z
    5ba6:	80 33       	cpi	r24, 0x30	; 48
    5ba8:	11 f4       	brne	.+4      	; 0x5bae <vfprintf+0x5b4>
    5baa:	09 7e       	andi	r16, 0xE9	; 233
    5bac:	09 c0       	rjmp	.+18     	; 0x5bc0 <vfprintf+0x5c6>
    5bae:	02 ff       	sbrs	r16, 2
    5bb0:	06 c0       	rjmp	.+12     	; 0x5bbe <vfprintf+0x5c4>
    5bb2:	d3 94       	inc	r13
    5bb4:	d3 94       	inc	r13
    5bb6:	04 c0       	rjmp	.+8      	; 0x5bc0 <vfprintf+0x5c6>
    5bb8:	80 2f       	mov	r24, r16
    5bba:	86 78       	andi	r24, 0x86	; 134
    5bbc:	09 f0       	breq	.+2      	; 0x5bc0 <vfprintf+0x5c6>
    5bbe:	d3 94       	inc	r13
    5bc0:	03 fd       	sbrc	r16, 3
    5bc2:	10 c0       	rjmp	.+32     	; 0x5be4 <vfprintf+0x5ea>
    5bc4:	00 ff       	sbrs	r16, 0
    5bc6:	06 c0       	rjmp	.+12     	; 0x5bd4 <vfprintf+0x5da>
    5bc8:	1c 2d       	mov	r17, r12
    5bca:	d5 14       	cp	r13, r5
    5bcc:	78 f4       	brcc	.+30     	; 0x5bec <vfprintf+0x5f2>
    5bce:	15 0d       	add	r17, r5
    5bd0:	1d 19       	sub	r17, r13
    5bd2:	0c c0       	rjmp	.+24     	; 0x5bec <vfprintf+0x5f2>
    5bd4:	d5 14       	cp	r13, r5
    5bd6:	50 f4       	brcc	.+20     	; 0x5bec <vfprintf+0x5f2>
    5bd8:	b7 01       	movw	r22, r14
    5bda:	80 e2       	ldi	r24, 0x20	; 32
    5bdc:	90 e0       	ldi	r25, 0x00	; 0
    5bde:	48 d5       	rcall	.+2704   	; 0x6670 <fputc>
    5be0:	d3 94       	inc	r13
    5be2:	f8 cf       	rjmp	.-16     	; 0x5bd4 <vfprintf+0x5da>
    5be4:	d5 14       	cp	r13, r5
    5be6:	10 f4       	brcc	.+4      	; 0x5bec <vfprintf+0x5f2>
    5be8:	5d 18       	sub	r5, r13
    5bea:	01 c0       	rjmp	.+2      	; 0x5bee <vfprintf+0x5f4>
    5bec:	51 2c       	mov	r5, r1
    5bee:	04 ff       	sbrs	r16, 4
    5bf0:	0f c0       	rjmp	.+30     	; 0x5c10 <vfprintf+0x616>
    5bf2:	b7 01       	movw	r22, r14
    5bf4:	80 e3       	ldi	r24, 0x30	; 48
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	3b d5       	rcall	.+2678   	; 0x6670 <fputc>
    5bfa:	02 ff       	sbrs	r16, 2
    5bfc:	16 c0       	rjmp	.+44     	; 0x5c2a <vfprintf+0x630>
    5bfe:	01 fd       	sbrc	r16, 1
    5c00:	03 c0       	rjmp	.+6      	; 0x5c08 <vfprintf+0x60e>
    5c02:	88 e7       	ldi	r24, 0x78	; 120
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	02 c0       	rjmp	.+4      	; 0x5c0c <vfprintf+0x612>
    5c08:	88 e5       	ldi	r24, 0x58	; 88
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	b7 01       	movw	r22, r14
    5c0e:	0c c0       	rjmp	.+24     	; 0x5c28 <vfprintf+0x62e>
    5c10:	80 2f       	mov	r24, r16
    5c12:	86 78       	andi	r24, 0x86	; 134
    5c14:	51 f0       	breq	.+20     	; 0x5c2a <vfprintf+0x630>
    5c16:	01 ff       	sbrs	r16, 1
    5c18:	02 c0       	rjmp	.+4      	; 0x5c1e <vfprintf+0x624>
    5c1a:	8b e2       	ldi	r24, 0x2B	; 43
    5c1c:	01 c0       	rjmp	.+2      	; 0x5c20 <vfprintf+0x626>
    5c1e:	80 e2       	ldi	r24, 0x20	; 32
    5c20:	07 fd       	sbrc	r16, 7
    5c22:	8d e2       	ldi	r24, 0x2D	; 45
    5c24:	b7 01       	movw	r22, r14
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	23 d5       	rcall	.+2630   	; 0x6670 <fputc>
    5c2a:	c1 16       	cp	r12, r17
    5c2c:	30 f4       	brcc	.+12     	; 0x5c3a <vfprintf+0x640>
    5c2e:	b7 01       	movw	r22, r14
    5c30:	80 e3       	ldi	r24, 0x30	; 48
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	1d d5       	rcall	.+2618   	; 0x6670 <fputc>
    5c36:	11 50       	subi	r17, 0x01	; 1
    5c38:	f8 cf       	rjmp	.-16     	; 0x5c2a <vfprintf+0x630>
    5c3a:	ca 94       	dec	r12
    5c3c:	f3 01       	movw	r30, r6
    5c3e:	ec 0d       	add	r30, r12
    5c40:	f1 1d       	adc	r31, r1
    5c42:	80 81       	ld	r24, Z
    5c44:	b7 01       	movw	r22, r14
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	13 d5       	rcall	.+2598   	; 0x6670 <fputc>
    5c4a:	c1 10       	cpse	r12, r1
    5c4c:	f6 cf       	rjmp	.-20     	; 0x5c3a <vfprintf+0x640>
    5c4e:	15 c0       	rjmp	.+42     	; 0x5c7a <vfprintf+0x680>
    5c50:	f4 e0       	ldi	r31, 0x04	; 4
    5c52:	f5 15       	cp	r31, r5
    5c54:	50 f5       	brcc	.+84     	; 0x5caa <vfprintf+0x6b0>
    5c56:	84 e0       	ldi	r24, 0x04	; 4
    5c58:	58 1a       	sub	r5, r24
    5c5a:	93 fe       	sbrs	r9, 3
    5c5c:	1e c0       	rjmp	.+60     	; 0x5c9a <vfprintf+0x6a0>
    5c5e:	01 11       	cpse	r16, r1
    5c60:	25 c0       	rjmp	.+74     	; 0x5cac <vfprintf+0x6b2>
    5c62:	2c 85       	ldd	r18, Y+12	; 0x0c
    5c64:	23 ff       	sbrs	r18, 3
    5c66:	27 c0       	rjmp	.+78     	; 0x5cb6 <vfprintf+0x6bc>
    5c68:	0a e9       	ldi	r16, 0x9A	; 154
    5c6a:	11 e0       	ldi	r17, 0x01	; 1
    5c6c:	39 2d       	mov	r19, r9
    5c6e:	30 71       	andi	r19, 0x10	; 16
    5c70:	93 2e       	mov	r9, r19
    5c72:	f8 01       	movw	r30, r16
    5c74:	84 91       	lpm	r24, Z
    5c76:	81 11       	cpse	r24, r1
    5c78:	21 c0       	rjmp	.+66     	; 0x5cbc <vfprintf+0x6c2>
    5c7a:	55 20       	and	r5, r5
    5c7c:	09 f4       	brne	.+2      	; 0x5c80 <vfprintf+0x686>
    5c7e:	fc cc       	rjmp	.-1544   	; 0x5678 <vfprintf+0x7e>
    5c80:	b7 01       	movw	r22, r14
    5c82:	80 e2       	ldi	r24, 0x20	; 32
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	f4 d4       	rcall	.+2536   	; 0x6670 <fputc>
    5c88:	5a 94       	dec	r5
    5c8a:	f7 cf       	rjmp	.-18     	; 0x5c7a <vfprintf+0x680>
    5c8c:	f7 01       	movw	r30, r14
    5c8e:	86 81       	ldd	r24, Z+6	; 0x06
    5c90:	97 81       	ldd	r25, Z+7	; 0x07
    5c92:	23 c0       	rjmp	.+70     	; 0x5cda <vfprintf+0x6e0>
    5c94:	8f ef       	ldi	r24, 0xFF	; 255
    5c96:	9f ef       	ldi	r25, 0xFF	; 255
    5c98:	20 c0       	rjmp	.+64     	; 0x5cda <vfprintf+0x6e0>
    5c9a:	b7 01       	movw	r22, r14
    5c9c:	80 e2       	ldi	r24, 0x20	; 32
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	e7 d4       	rcall	.+2510   	; 0x6670 <fputc>
    5ca2:	5a 94       	dec	r5
    5ca4:	51 10       	cpse	r5, r1
    5ca6:	f9 cf       	rjmp	.-14     	; 0x5c9a <vfprintf+0x6a0>
    5ca8:	da cf       	rjmp	.-76     	; 0x5c5e <vfprintf+0x664>
    5caa:	51 2c       	mov	r5, r1
    5cac:	b7 01       	movw	r22, r14
    5cae:	80 2f       	mov	r24, r16
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	de d4       	rcall	.+2492   	; 0x6670 <fputc>
    5cb4:	d6 cf       	rjmp	.-84     	; 0x5c62 <vfprintf+0x668>
    5cb6:	0e e9       	ldi	r16, 0x9E	; 158
    5cb8:	11 e0       	ldi	r17, 0x01	; 1
    5cba:	d8 cf       	rjmp	.-80     	; 0x5c6c <vfprintf+0x672>
    5cbc:	91 10       	cpse	r9, r1
    5cbe:	80 52       	subi	r24, 0x20	; 32
    5cc0:	b7 01       	movw	r22, r14
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	d5 d4       	rcall	.+2474   	; 0x6670 <fputc>
    5cc6:	0f 5f       	subi	r16, 0xFF	; 255
    5cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    5cca:	d3 cf       	rjmp	.-90     	; 0x5c72 <vfprintf+0x678>
    5ccc:	23 e0       	ldi	r18, 0x03	; 3
    5cce:	25 15       	cp	r18, r5
    5cd0:	10 f4       	brcc	.+4      	; 0x5cd6 <vfprintf+0x6dc>
    5cd2:	83 e0       	ldi	r24, 0x03	; 3
    5cd4:	c1 cf       	rjmp	.-126    	; 0x5c58 <vfprintf+0x65e>
    5cd6:	51 2c       	mov	r5, r1
    5cd8:	c4 cf       	rjmp	.-120    	; 0x5c62 <vfprintf+0x668>
    5cda:	60 96       	adiw	r28, 0x10	; 16
    5cdc:	0f b6       	in	r0, 0x3f	; 63
    5cde:	f8 94       	cli
    5ce0:	de bf       	out	0x3e, r29	; 62
    5ce2:	0f be       	out	0x3f, r0	; 63
    5ce4:	cd bf       	out	0x3d, r28	; 61
    5ce6:	df 91       	pop	r29
    5ce8:	cf 91       	pop	r28
    5cea:	1f 91       	pop	r17
    5cec:	0f 91       	pop	r16
    5cee:	ff 90       	pop	r15
    5cf0:	ef 90       	pop	r14
    5cf2:	df 90       	pop	r13
    5cf4:	cf 90       	pop	r12
    5cf6:	bf 90       	pop	r11
    5cf8:	af 90       	pop	r10
    5cfa:	9f 90       	pop	r9
    5cfc:	8f 90       	pop	r8
    5cfe:	7f 90       	pop	r7
    5d00:	6f 90       	pop	r6
    5d02:	5f 90       	pop	r5
    5d04:	4f 90       	pop	r4
    5d06:	3f 90       	pop	r3
    5d08:	2f 90       	pop	r2
    5d0a:	08 95       	ret

00005d0c <__subsf3>:
    5d0c:	50 58       	subi	r21, 0x80	; 128

00005d0e <__addsf3>:
    5d0e:	bb 27       	eor	r27, r27
    5d10:	aa 27       	eor	r26, r26
    5d12:	0e d0       	rcall	.+28     	; 0x5d30 <__addsf3x>
    5d14:	4d c1       	rjmp	.+666    	; 0x5fb0 <__fp_round>
    5d16:	3e d1       	rcall	.+636    	; 0x5f94 <__fp_pscA>
    5d18:	30 f0       	brcs	.+12     	; 0x5d26 <__addsf3+0x18>
    5d1a:	43 d1       	rcall	.+646    	; 0x5fa2 <__fp_pscB>
    5d1c:	20 f0       	brcs	.+8      	; 0x5d26 <__addsf3+0x18>
    5d1e:	31 f4       	brne	.+12     	; 0x5d2c <__addsf3+0x1e>
    5d20:	9f 3f       	cpi	r25, 0xFF	; 255
    5d22:	11 f4       	brne	.+4      	; 0x5d28 <__addsf3+0x1a>
    5d24:	1e f4       	brtc	.+6      	; 0x5d2c <__addsf3+0x1e>
    5d26:	33 c1       	rjmp	.+614    	; 0x5f8e <__fp_nan>
    5d28:	0e f4       	brtc	.+2      	; 0x5d2c <__addsf3+0x1e>
    5d2a:	e0 95       	com	r30
    5d2c:	e7 fb       	bst	r30, 7
    5d2e:	29 c1       	rjmp	.+594    	; 0x5f82 <__fp_inf>

00005d30 <__addsf3x>:
    5d30:	e9 2f       	mov	r30, r25
    5d32:	4f d1       	rcall	.+670    	; 0x5fd2 <__fp_split3>
    5d34:	80 f3       	brcs	.-32     	; 0x5d16 <__addsf3+0x8>
    5d36:	ba 17       	cp	r27, r26
    5d38:	62 07       	cpc	r22, r18
    5d3a:	73 07       	cpc	r23, r19
    5d3c:	84 07       	cpc	r24, r20
    5d3e:	95 07       	cpc	r25, r21
    5d40:	18 f0       	brcs	.+6      	; 0x5d48 <__addsf3x+0x18>
    5d42:	71 f4       	brne	.+28     	; 0x5d60 <__addsf3x+0x30>
    5d44:	9e f5       	brtc	.+102    	; 0x5dac <__addsf3x+0x7c>
    5d46:	67 c1       	rjmp	.+718    	; 0x6016 <__fp_zero>
    5d48:	0e f4       	brtc	.+2      	; 0x5d4c <__addsf3x+0x1c>
    5d4a:	e0 95       	com	r30
    5d4c:	0b 2e       	mov	r0, r27
    5d4e:	ba 2f       	mov	r27, r26
    5d50:	a0 2d       	mov	r26, r0
    5d52:	0b 01       	movw	r0, r22
    5d54:	b9 01       	movw	r22, r18
    5d56:	90 01       	movw	r18, r0
    5d58:	0c 01       	movw	r0, r24
    5d5a:	ca 01       	movw	r24, r20
    5d5c:	a0 01       	movw	r20, r0
    5d5e:	11 24       	eor	r1, r1
    5d60:	ff 27       	eor	r31, r31
    5d62:	59 1b       	sub	r21, r25
    5d64:	99 f0       	breq	.+38     	; 0x5d8c <__addsf3x+0x5c>
    5d66:	59 3f       	cpi	r21, 0xF9	; 249
    5d68:	50 f4       	brcc	.+20     	; 0x5d7e <__addsf3x+0x4e>
    5d6a:	50 3e       	cpi	r21, 0xE0	; 224
    5d6c:	68 f1       	brcs	.+90     	; 0x5dc8 <__addsf3x+0x98>
    5d6e:	1a 16       	cp	r1, r26
    5d70:	f0 40       	sbci	r31, 0x00	; 0
    5d72:	a2 2f       	mov	r26, r18
    5d74:	23 2f       	mov	r18, r19
    5d76:	34 2f       	mov	r19, r20
    5d78:	44 27       	eor	r20, r20
    5d7a:	58 5f       	subi	r21, 0xF8	; 248
    5d7c:	f3 cf       	rjmp	.-26     	; 0x5d64 <__addsf3x+0x34>
    5d7e:	46 95       	lsr	r20
    5d80:	37 95       	ror	r19
    5d82:	27 95       	ror	r18
    5d84:	a7 95       	ror	r26
    5d86:	f0 40       	sbci	r31, 0x00	; 0
    5d88:	53 95       	inc	r21
    5d8a:	c9 f7       	brne	.-14     	; 0x5d7e <__addsf3x+0x4e>
    5d8c:	7e f4       	brtc	.+30     	; 0x5dac <__addsf3x+0x7c>
    5d8e:	1f 16       	cp	r1, r31
    5d90:	ba 0b       	sbc	r27, r26
    5d92:	62 0b       	sbc	r22, r18
    5d94:	73 0b       	sbc	r23, r19
    5d96:	84 0b       	sbc	r24, r20
    5d98:	ba f0       	brmi	.+46     	; 0x5dc8 <__addsf3x+0x98>
    5d9a:	91 50       	subi	r25, 0x01	; 1
    5d9c:	a1 f0       	breq	.+40     	; 0x5dc6 <__addsf3x+0x96>
    5d9e:	ff 0f       	add	r31, r31
    5da0:	bb 1f       	adc	r27, r27
    5da2:	66 1f       	adc	r22, r22
    5da4:	77 1f       	adc	r23, r23
    5da6:	88 1f       	adc	r24, r24
    5da8:	c2 f7       	brpl	.-16     	; 0x5d9a <__addsf3x+0x6a>
    5daa:	0e c0       	rjmp	.+28     	; 0x5dc8 <__addsf3x+0x98>
    5dac:	ba 0f       	add	r27, r26
    5dae:	62 1f       	adc	r22, r18
    5db0:	73 1f       	adc	r23, r19
    5db2:	84 1f       	adc	r24, r20
    5db4:	48 f4       	brcc	.+18     	; 0x5dc8 <__addsf3x+0x98>
    5db6:	87 95       	ror	r24
    5db8:	77 95       	ror	r23
    5dba:	67 95       	ror	r22
    5dbc:	b7 95       	ror	r27
    5dbe:	f7 95       	ror	r31
    5dc0:	9e 3f       	cpi	r25, 0xFE	; 254
    5dc2:	08 f0       	brcs	.+2      	; 0x5dc6 <__addsf3x+0x96>
    5dc4:	b3 cf       	rjmp	.-154    	; 0x5d2c <__addsf3+0x1e>
    5dc6:	93 95       	inc	r25
    5dc8:	88 0f       	add	r24, r24
    5dca:	08 f0       	brcs	.+2      	; 0x5dce <__addsf3x+0x9e>
    5dcc:	99 27       	eor	r25, r25
    5dce:	ee 0f       	add	r30, r30
    5dd0:	97 95       	ror	r25
    5dd2:	87 95       	ror	r24
    5dd4:	08 95       	ret

00005dd6 <__divsf3>:
    5dd6:	0c d0       	rcall	.+24     	; 0x5df0 <__divsf3x>
    5dd8:	eb c0       	rjmp	.+470    	; 0x5fb0 <__fp_round>
    5dda:	e3 d0       	rcall	.+454    	; 0x5fa2 <__fp_pscB>
    5ddc:	40 f0       	brcs	.+16     	; 0x5dee <__divsf3+0x18>
    5dde:	da d0       	rcall	.+436    	; 0x5f94 <__fp_pscA>
    5de0:	30 f0       	brcs	.+12     	; 0x5dee <__divsf3+0x18>
    5de2:	21 f4       	brne	.+8      	; 0x5dec <__divsf3+0x16>
    5de4:	5f 3f       	cpi	r21, 0xFF	; 255
    5de6:	19 f0       	breq	.+6      	; 0x5dee <__divsf3+0x18>
    5de8:	cc c0       	rjmp	.+408    	; 0x5f82 <__fp_inf>
    5dea:	51 11       	cpse	r21, r1
    5dec:	15 c1       	rjmp	.+554    	; 0x6018 <__fp_szero>
    5dee:	cf c0       	rjmp	.+414    	; 0x5f8e <__fp_nan>

00005df0 <__divsf3x>:
    5df0:	f0 d0       	rcall	.+480    	; 0x5fd2 <__fp_split3>
    5df2:	98 f3       	brcs	.-26     	; 0x5dda <__divsf3+0x4>

00005df4 <__divsf3_pse>:
    5df4:	99 23       	and	r25, r25
    5df6:	c9 f3       	breq	.-14     	; 0x5dea <__divsf3+0x14>
    5df8:	55 23       	and	r21, r21
    5dfa:	b1 f3       	breq	.-20     	; 0x5de8 <__divsf3+0x12>
    5dfc:	95 1b       	sub	r25, r21
    5dfe:	55 0b       	sbc	r21, r21
    5e00:	bb 27       	eor	r27, r27
    5e02:	aa 27       	eor	r26, r26
    5e04:	62 17       	cp	r22, r18
    5e06:	73 07       	cpc	r23, r19
    5e08:	84 07       	cpc	r24, r20
    5e0a:	38 f0       	brcs	.+14     	; 0x5e1a <__divsf3_pse+0x26>
    5e0c:	9f 5f       	subi	r25, 0xFF	; 255
    5e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    5e10:	22 0f       	add	r18, r18
    5e12:	33 1f       	adc	r19, r19
    5e14:	44 1f       	adc	r20, r20
    5e16:	aa 1f       	adc	r26, r26
    5e18:	a9 f3       	breq	.-22     	; 0x5e04 <__divsf3_pse+0x10>
    5e1a:	33 d0       	rcall	.+102    	; 0x5e82 <__divsf3_pse+0x8e>
    5e1c:	0e 2e       	mov	r0, r30
    5e1e:	3a f0       	brmi	.+14     	; 0x5e2e <__divsf3_pse+0x3a>
    5e20:	e0 e8       	ldi	r30, 0x80	; 128
    5e22:	30 d0       	rcall	.+96     	; 0x5e84 <__divsf3_pse+0x90>
    5e24:	91 50       	subi	r25, 0x01	; 1
    5e26:	50 40       	sbci	r21, 0x00	; 0
    5e28:	e6 95       	lsr	r30
    5e2a:	00 1c       	adc	r0, r0
    5e2c:	ca f7       	brpl	.-14     	; 0x5e20 <__divsf3_pse+0x2c>
    5e2e:	29 d0       	rcall	.+82     	; 0x5e82 <__divsf3_pse+0x8e>
    5e30:	fe 2f       	mov	r31, r30
    5e32:	27 d0       	rcall	.+78     	; 0x5e82 <__divsf3_pse+0x8e>
    5e34:	66 0f       	add	r22, r22
    5e36:	77 1f       	adc	r23, r23
    5e38:	88 1f       	adc	r24, r24
    5e3a:	bb 1f       	adc	r27, r27
    5e3c:	26 17       	cp	r18, r22
    5e3e:	37 07       	cpc	r19, r23
    5e40:	48 07       	cpc	r20, r24
    5e42:	ab 07       	cpc	r26, r27
    5e44:	b0 e8       	ldi	r27, 0x80	; 128
    5e46:	09 f0       	breq	.+2      	; 0x5e4a <__divsf3_pse+0x56>
    5e48:	bb 0b       	sbc	r27, r27
    5e4a:	80 2d       	mov	r24, r0
    5e4c:	bf 01       	movw	r22, r30
    5e4e:	ff 27       	eor	r31, r31
    5e50:	93 58       	subi	r25, 0x83	; 131
    5e52:	5f 4f       	sbci	r21, 0xFF	; 255
    5e54:	2a f0       	brmi	.+10     	; 0x5e60 <__divsf3_pse+0x6c>
    5e56:	9e 3f       	cpi	r25, 0xFE	; 254
    5e58:	51 05       	cpc	r21, r1
    5e5a:	68 f0       	brcs	.+26     	; 0x5e76 <__divsf3_pse+0x82>
    5e5c:	92 c0       	rjmp	.+292    	; 0x5f82 <__fp_inf>
    5e5e:	dc c0       	rjmp	.+440    	; 0x6018 <__fp_szero>
    5e60:	5f 3f       	cpi	r21, 0xFF	; 255
    5e62:	ec f3       	brlt	.-6      	; 0x5e5e <__divsf3_pse+0x6a>
    5e64:	98 3e       	cpi	r25, 0xE8	; 232
    5e66:	dc f3       	brlt	.-10     	; 0x5e5e <__divsf3_pse+0x6a>
    5e68:	86 95       	lsr	r24
    5e6a:	77 95       	ror	r23
    5e6c:	67 95       	ror	r22
    5e6e:	b7 95       	ror	r27
    5e70:	f7 95       	ror	r31
    5e72:	9f 5f       	subi	r25, 0xFF	; 255
    5e74:	c9 f7       	brne	.-14     	; 0x5e68 <__divsf3_pse+0x74>
    5e76:	88 0f       	add	r24, r24
    5e78:	91 1d       	adc	r25, r1
    5e7a:	96 95       	lsr	r25
    5e7c:	87 95       	ror	r24
    5e7e:	97 f9       	bld	r25, 7
    5e80:	08 95       	ret
    5e82:	e1 e0       	ldi	r30, 0x01	; 1
    5e84:	66 0f       	add	r22, r22
    5e86:	77 1f       	adc	r23, r23
    5e88:	88 1f       	adc	r24, r24
    5e8a:	bb 1f       	adc	r27, r27
    5e8c:	62 17       	cp	r22, r18
    5e8e:	73 07       	cpc	r23, r19
    5e90:	84 07       	cpc	r24, r20
    5e92:	ba 07       	cpc	r27, r26
    5e94:	20 f0       	brcs	.+8      	; 0x5e9e <__divsf3_pse+0xaa>
    5e96:	62 1b       	sub	r22, r18
    5e98:	73 0b       	sbc	r23, r19
    5e9a:	84 0b       	sbc	r24, r20
    5e9c:	ba 0b       	sbc	r27, r26
    5e9e:	ee 1f       	adc	r30, r30
    5ea0:	88 f7       	brcc	.-30     	; 0x5e84 <__divsf3_pse+0x90>
    5ea2:	e0 95       	com	r30
    5ea4:	08 95       	ret

00005ea6 <__fixsfsi>:
    5ea6:	04 d0       	rcall	.+8      	; 0x5eb0 <__fixunssfsi>
    5ea8:	68 94       	set
    5eaa:	b1 11       	cpse	r27, r1
    5eac:	b5 c0       	rjmp	.+362    	; 0x6018 <__fp_szero>
    5eae:	08 95       	ret

00005eb0 <__fixunssfsi>:
    5eb0:	98 d0       	rcall	.+304    	; 0x5fe2 <__fp_splitA>
    5eb2:	88 f0       	brcs	.+34     	; 0x5ed6 <__fixunssfsi+0x26>
    5eb4:	9f 57       	subi	r25, 0x7F	; 127
    5eb6:	90 f0       	brcs	.+36     	; 0x5edc <__fixunssfsi+0x2c>
    5eb8:	b9 2f       	mov	r27, r25
    5eba:	99 27       	eor	r25, r25
    5ebc:	b7 51       	subi	r27, 0x17	; 23
    5ebe:	a0 f0       	brcs	.+40     	; 0x5ee8 <__fixunssfsi+0x38>
    5ec0:	d1 f0       	breq	.+52     	; 0x5ef6 <__fixunssfsi+0x46>
    5ec2:	66 0f       	add	r22, r22
    5ec4:	77 1f       	adc	r23, r23
    5ec6:	88 1f       	adc	r24, r24
    5ec8:	99 1f       	adc	r25, r25
    5eca:	1a f0       	brmi	.+6      	; 0x5ed2 <__fixunssfsi+0x22>
    5ecc:	ba 95       	dec	r27
    5ece:	c9 f7       	brne	.-14     	; 0x5ec2 <__fixunssfsi+0x12>
    5ed0:	12 c0       	rjmp	.+36     	; 0x5ef6 <__fixunssfsi+0x46>
    5ed2:	b1 30       	cpi	r27, 0x01	; 1
    5ed4:	81 f0       	breq	.+32     	; 0x5ef6 <__fixunssfsi+0x46>
    5ed6:	9f d0       	rcall	.+318    	; 0x6016 <__fp_zero>
    5ed8:	b1 e0       	ldi	r27, 0x01	; 1
    5eda:	08 95       	ret
    5edc:	9c c0       	rjmp	.+312    	; 0x6016 <__fp_zero>
    5ede:	67 2f       	mov	r22, r23
    5ee0:	78 2f       	mov	r23, r24
    5ee2:	88 27       	eor	r24, r24
    5ee4:	b8 5f       	subi	r27, 0xF8	; 248
    5ee6:	39 f0       	breq	.+14     	; 0x5ef6 <__fixunssfsi+0x46>
    5ee8:	b9 3f       	cpi	r27, 0xF9	; 249
    5eea:	cc f3       	brlt	.-14     	; 0x5ede <__fixunssfsi+0x2e>
    5eec:	86 95       	lsr	r24
    5eee:	77 95       	ror	r23
    5ef0:	67 95       	ror	r22
    5ef2:	b3 95       	inc	r27
    5ef4:	d9 f7       	brne	.-10     	; 0x5eec <__fixunssfsi+0x3c>
    5ef6:	3e f4       	brtc	.+14     	; 0x5f06 <__fixunssfsi+0x56>
    5ef8:	90 95       	com	r25
    5efa:	80 95       	com	r24
    5efc:	70 95       	com	r23
    5efe:	61 95       	neg	r22
    5f00:	7f 4f       	sbci	r23, 0xFF	; 255
    5f02:	8f 4f       	sbci	r24, 0xFF	; 255
    5f04:	9f 4f       	sbci	r25, 0xFF	; 255
    5f06:	08 95       	ret

00005f08 <__floatunsisf>:
    5f08:	e8 94       	clt
    5f0a:	09 c0       	rjmp	.+18     	; 0x5f1e <__floatsisf+0x12>

00005f0c <__floatsisf>:
    5f0c:	97 fb       	bst	r25, 7
    5f0e:	3e f4       	brtc	.+14     	; 0x5f1e <__floatsisf+0x12>
    5f10:	90 95       	com	r25
    5f12:	80 95       	com	r24
    5f14:	70 95       	com	r23
    5f16:	61 95       	neg	r22
    5f18:	7f 4f       	sbci	r23, 0xFF	; 255
    5f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    5f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f1e:	99 23       	and	r25, r25
    5f20:	a9 f0       	breq	.+42     	; 0x5f4c <__floatsisf+0x40>
    5f22:	f9 2f       	mov	r31, r25
    5f24:	96 e9       	ldi	r25, 0x96	; 150
    5f26:	bb 27       	eor	r27, r27
    5f28:	93 95       	inc	r25
    5f2a:	f6 95       	lsr	r31
    5f2c:	87 95       	ror	r24
    5f2e:	77 95       	ror	r23
    5f30:	67 95       	ror	r22
    5f32:	b7 95       	ror	r27
    5f34:	f1 11       	cpse	r31, r1
    5f36:	f8 cf       	rjmp	.-16     	; 0x5f28 <__floatsisf+0x1c>
    5f38:	fa f4       	brpl	.+62     	; 0x5f78 <__floatsisf+0x6c>
    5f3a:	bb 0f       	add	r27, r27
    5f3c:	11 f4       	brne	.+4      	; 0x5f42 <__floatsisf+0x36>
    5f3e:	60 ff       	sbrs	r22, 0
    5f40:	1b c0       	rjmp	.+54     	; 0x5f78 <__floatsisf+0x6c>
    5f42:	6f 5f       	subi	r22, 0xFF	; 255
    5f44:	7f 4f       	sbci	r23, 0xFF	; 255
    5f46:	8f 4f       	sbci	r24, 0xFF	; 255
    5f48:	9f 4f       	sbci	r25, 0xFF	; 255
    5f4a:	16 c0       	rjmp	.+44     	; 0x5f78 <__floatsisf+0x6c>
    5f4c:	88 23       	and	r24, r24
    5f4e:	11 f0       	breq	.+4      	; 0x5f54 <__floatsisf+0x48>
    5f50:	96 e9       	ldi	r25, 0x96	; 150
    5f52:	11 c0       	rjmp	.+34     	; 0x5f76 <__floatsisf+0x6a>
    5f54:	77 23       	and	r23, r23
    5f56:	21 f0       	breq	.+8      	; 0x5f60 <__floatsisf+0x54>
    5f58:	9e e8       	ldi	r25, 0x8E	; 142
    5f5a:	87 2f       	mov	r24, r23
    5f5c:	76 2f       	mov	r23, r22
    5f5e:	05 c0       	rjmp	.+10     	; 0x5f6a <__floatsisf+0x5e>
    5f60:	66 23       	and	r22, r22
    5f62:	71 f0       	breq	.+28     	; 0x5f80 <__floatsisf+0x74>
    5f64:	96 e8       	ldi	r25, 0x86	; 134
    5f66:	86 2f       	mov	r24, r22
    5f68:	70 e0       	ldi	r23, 0x00	; 0
    5f6a:	60 e0       	ldi	r22, 0x00	; 0
    5f6c:	2a f0       	brmi	.+10     	; 0x5f78 <__floatsisf+0x6c>
    5f6e:	9a 95       	dec	r25
    5f70:	66 0f       	add	r22, r22
    5f72:	77 1f       	adc	r23, r23
    5f74:	88 1f       	adc	r24, r24
    5f76:	da f7       	brpl	.-10     	; 0x5f6e <__floatsisf+0x62>
    5f78:	88 0f       	add	r24, r24
    5f7a:	96 95       	lsr	r25
    5f7c:	87 95       	ror	r24
    5f7e:	97 f9       	bld	r25, 7
    5f80:	08 95       	ret

00005f82 <__fp_inf>:
    5f82:	97 f9       	bld	r25, 7
    5f84:	9f 67       	ori	r25, 0x7F	; 127
    5f86:	80 e8       	ldi	r24, 0x80	; 128
    5f88:	70 e0       	ldi	r23, 0x00	; 0
    5f8a:	60 e0       	ldi	r22, 0x00	; 0
    5f8c:	08 95       	ret

00005f8e <__fp_nan>:
    5f8e:	9f ef       	ldi	r25, 0xFF	; 255
    5f90:	80 ec       	ldi	r24, 0xC0	; 192
    5f92:	08 95       	ret

00005f94 <__fp_pscA>:
    5f94:	00 24       	eor	r0, r0
    5f96:	0a 94       	dec	r0
    5f98:	16 16       	cp	r1, r22
    5f9a:	17 06       	cpc	r1, r23
    5f9c:	18 06       	cpc	r1, r24
    5f9e:	09 06       	cpc	r0, r25
    5fa0:	08 95       	ret

00005fa2 <__fp_pscB>:
    5fa2:	00 24       	eor	r0, r0
    5fa4:	0a 94       	dec	r0
    5fa6:	12 16       	cp	r1, r18
    5fa8:	13 06       	cpc	r1, r19
    5faa:	14 06       	cpc	r1, r20
    5fac:	05 06       	cpc	r0, r21
    5fae:	08 95       	ret

00005fb0 <__fp_round>:
    5fb0:	09 2e       	mov	r0, r25
    5fb2:	03 94       	inc	r0
    5fb4:	00 0c       	add	r0, r0
    5fb6:	11 f4       	brne	.+4      	; 0x5fbc <__fp_round+0xc>
    5fb8:	88 23       	and	r24, r24
    5fba:	52 f0       	brmi	.+20     	; 0x5fd0 <__fp_round+0x20>
    5fbc:	bb 0f       	add	r27, r27
    5fbe:	40 f4       	brcc	.+16     	; 0x5fd0 <__fp_round+0x20>
    5fc0:	bf 2b       	or	r27, r31
    5fc2:	11 f4       	brne	.+4      	; 0x5fc8 <__fp_round+0x18>
    5fc4:	60 ff       	sbrs	r22, 0
    5fc6:	04 c0       	rjmp	.+8      	; 0x5fd0 <__fp_round+0x20>
    5fc8:	6f 5f       	subi	r22, 0xFF	; 255
    5fca:	7f 4f       	sbci	r23, 0xFF	; 255
    5fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    5fce:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd0:	08 95       	ret

00005fd2 <__fp_split3>:
    5fd2:	57 fd       	sbrc	r21, 7
    5fd4:	90 58       	subi	r25, 0x80	; 128
    5fd6:	44 0f       	add	r20, r20
    5fd8:	55 1f       	adc	r21, r21
    5fda:	59 f0       	breq	.+22     	; 0x5ff2 <__fp_splitA+0x10>
    5fdc:	5f 3f       	cpi	r21, 0xFF	; 255
    5fde:	71 f0       	breq	.+28     	; 0x5ffc <__fp_splitA+0x1a>
    5fe0:	47 95       	ror	r20

00005fe2 <__fp_splitA>:
    5fe2:	88 0f       	add	r24, r24
    5fe4:	97 fb       	bst	r25, 7
    5fe6:	99 1f       	adc	r25, r25
    5fe8:	61 f0       	breq	.+24     	; 0x6002 <__fp_splitA+0x20>
    5fea:	9f 3f       	cpi	r25, 0xFF	; 255
    5fec:	79 f0       	breq	.+30     	; 0x600c <__fp_splitA+0x2a>
    5fee:	87 95       	ror	r24
    5ff0:	08 95       	ret
    5ff2:	12 16       	cp	r1, r18
    5ff4:	13 06       	cpc	r1, r19
    5ff6:	14 06       	cpc	r1, r20
    5ff8:	55 1f       	adc	r21, r21
    5ffa:	f2 cf       	rjmp	.-28     	; 0x5fe0 <__fp_split3+0xe>
    5ffc:	46 95       	lsr	r20
    5ffe:	f1 df       	rcall	.-30     	; 0x5fe2 <__fp_splitA>
    6000:	08 c0       	rjmp	.+16     	; 0x6012 <__fp_splitA+0x30>
    6002:	16 16       	cp	r1, r22
    6004:	17 06       	cpc	r1, r23
    6006:	18 06       	cpc	r1, r24
    6008:	99 1f       	adc	r25, r25
    600a:	f1 cf       	rjmp	.-30     	; 0x5fee <__fp_splitA+0xc>
    600c:	86 95       	lsr	r24
    600e:	71 05       	cpc	r23, r1
    6010:	61 05       	cpc	r22, r1
    6012:	08 94       	sec
    6014:	08 95       	ret

00006016 <__fp_zero>:
    6016:	e8 94       	clt

00006018 <__fp_szero>:
    6018:	bb 27       	eor	r27, r27
    601a:	66 27       	eor	r22, r22
    601c:	77 27       	eor	r23, r23
    601e:	cb 01       	movw	r24, r22
    6020:	97 f9       	bld	r25, 7
    6022:	08 95       	ret

00006024 <__mulsf3>:
    6024:	0b d0       	rcall	.+22     	; 0x603c <__mulsf3x>
    6026:	c4 cf       	rjmp	.-120    	; 0x5fb0 <__fp_round>
    6028:	b5 df       	rcall	.-150    	; 0x5f94 <__fp_pscA>
    602a:	28 f0       	brcs	.+10     	; 0x6036 <__mulsf3+0x12>
    602c:	ba df       	rcall	.-140    	; 0x5fa2 <__fp_pscB>
    602e:	18 f0       	brcs	.+6      	; 0x6036 <__mulsf3+0x12>
    6030:	95 23       	and	r25, r21
    6032:	09 f0       	breq	.+2      	; 0x6036 <__mulsf3+0x12>
    6034:	a6 cf       	rjmp	.-180    	; 0x5f82 <__fp_inf>
    6036:	ab cf       	rjmp	.-170    	; 0x5f8e <__fp_nan>
    6038:	11 24       	eor	r1, r1
    603a:	ee cf       	rjmp	.-36     	; 0x6018 <__fp_szero>

0000603c <__mulsf3x>:
    603c:	ca df       	rcall	.-108    	; 0x5fd2 <__fp_split3>
    603e:	a0 f3       	brcs	.-24     	; 0x6028 <__mulsf3+0x4>

00006040 <__mulsf3_pse>:
    6040:	95 9f       	mul	r25, r21
    6042:	d1 f3       	breq	.-12     	; 0x6038 <__mulsf3+0x14>
    6044:	95 0f       	add	r25, r21
    6046:	50 e0       	ldi	r21, 0x00	; 0
    6048:	55 1f       	adc	r21, r21
    604a:	62 9f       	mul	r22, r18
    604c:	f0 01       	movw	r30, r0
    604e:	72 9f       	mul	r23, r18
    6050:	bb 27       	eor	r27, r27
    6052:	f0 0d       	add	r31, r0
    6054:	b1 1d       	adc	r27, r1
    6056:	63 9f       	mul	r22, r19
    6058:	aa 27       	eor	r26, r26
    605a:	f0 0d       	add	r31, r0
    605c:	b1 1d       	adc	r27, r1
    605e:	aa 1f       	adc	r26, r26
    6060:	64 9f       	mul	r22, r20
    6062:	66 27       	eor	r22, r22
    6064:	b0 0d       	add	r27, r0
    6066:	a1 1d       	adc	r26, r1
    6068:	66 1f       	adc	r22, r22
    606a:	82 9f       	mul	r24, r18
    606c:	22 27       	eor	r18, r18
    606e:	b0 0d       	add	r27, r0
    6070:	a1 1d       	adc	r26, r1
    6072:	62 1f       	adc	r22, r18
    6074:	73 9f       	mul	r23, r19
    6076:	b0 0d       	add	r27, r0
    6078:	a1 1d       	adc	r26, r1
    607a:	62 1f       	adc	r22, r18
    607c:	83 9f       	mul	r24, r19
    607e:	a0 0d       	add	r26, r0
    6080:	61 1d       	adc	r22, r1
    6082:	22 1f       	adc	r18, r18
    6084:	74 9f       	mul	r23, r20
    6086:	33 27       	eor	r19, r19
    6088:	a0 0d       	add	r26, r0
    608a:	61 1d       	adc	r22, r1
    608c:	23 1f       	adc	r18, r19
    608e:	84 9f       	mul	r24, r20
    6090:	60 0d       	add	r22, r0
    6092:	21 1d       	adc	r18, r1
    6094:	82 2f       	mov	r24, r18
    6096:	76 2f       	mov	r23, r22
    6098:	6a 2f       	mov	r22, r26
    609a:	11 24       	eor	r1, r1
    609c:	9f 57       	subi	r25, 0x7F	; 127
    609e:	50 40       	sbci	r21, 0x00	; 0
    60a0:	8a f0       	brmi	.+34     	; 0x60c4 <__mulsf3_pse+0x84>
    60a2:	e1 f0       	breq	.+56     	; 0x60dc <__mulsf3_pse+0x9c>
    60a4:	88 23       	and	r24, r24
    60a6:	4a f0       	brmi	.+18     	; 0x60ba <__mulsf3_pse+0x7a>
    60a8:	ee 0f       	add	r30, r30
    60aa:	ff 1f       	adc	r31, r31
    60ac:	bb 1f       	adc	r27, r27
    60ae:	66 1f       	adc	r22, r22
    60b0:	77 1f       	adc	r23, r23
    60b2:	88 1f       	adc	r24, r24
    60b4:	91 50       	subi	r25, 0x01	; 1
    60b6:	50 40       	sbci	r21, 0x00	; 0
    60b8:	a9 f7       	brne	.-22     	; 0x60a4 <__mulsf3_pse+0x64>
    60ba:	9e 3f       	cpi	r25, 0xFE	; 254
    60bc:	51 05       	cpc	r21, r1
    60be:	70 f0       	brcs	.+28     	; 0x60dc <__mulsf3_pse+0x9c>
    60c0:	60 cf       	rjmp	.-320    	; 0x5f82 <__fp_inf>
    60c2:	aa cf       	rjmp	.-172    	; 0x6018 <__fp_szero>
    60c4:	5f 3f       	cpi	r21, 0xFF	; 255
    60c6:	ec f3       	brlt	.-6      	; 0x60c2 <__mulsf3_pse+0x82>
    60c8:	98 3e       	cpi	r25, 0xE8	; 232
    60ca:	dc f3       	brlt	.-10     	; 0x60c2 <__mulsf3_pse+0x82>
    60cc:	86 95       	lsr	r24
    60ce:	77 95       	ror	r23
    60d0:	67 95       	ror	r22
    60d2:	b7 95       	ror	r27
    60d4:	f7 95       	ror	r31
    60d6:	e7 95       	ror	r30
    60d8:	9f 5f       	subi	r25, 0xFF	; 255
    60da:	c1 f7       	brne	.-16     	; 0x60cc <__mulsf3_pse+0x8c>
    60dc:	fe 2b       	or	r31, r30
    60de:	88 0f       	add	r24, r24
    60e0:	91 1d       	adc	r25, r1
    60e2:	96 95       	lsr	r25
    60e4:	87 95       	ror	r24
    60e6:	97 f9       	bld	r25, 7
    60e8:	08 95       	ret

000060ea <__divmodhi4>:
    60ea:	97 fb       	bst	r25, 7
    60ec:	07 2e       	mov	r0, r23
    60ee:	16 f4       	brtc	.+4      	; 0x60f4 <__divmodhi4+0xa>
    60f0:	00 94       	com	r0
    60f2:	06 d0       	rcall	.+12     	; 0x6100 <__divmodhi4_neg1>
    60f4:	77 fd       	sbrc	r23, 7
    60f6:	08 d0       	rcall	.+16     	; 0x6108 <__divmodhi4_neg2>
    60f8:	35 d0       	rcall	.+106    	; 0x6164 <__udivmodhi4>
    60fa:	07 fc       	sbrc	r0, 7
    60fc:	05 d0       	rcall	.+10     	; 0x6108 <__divmodhi4_neg2>
    60fe:	3e f4       	brtc	.+14     	; 0x610e <__divmodhi4_exit>

00006100 <__divmodhi4_neg1>:
    6100:	90 95       	com	r25
    6102:	81 95       	neg	r24
    6104:	9f 4f       	sbci	r25, 0xFF	; 255
    6106:	08 95       	ret

00006108 <__divmodhi4_neg2>:
    6108:	70 95       	com	r23
    610a:	61 95       	neg	r22
    610c:	7f 4f       	sbci	r23, 0xFF	; 255

0000610e <__divmodhi4_exit>:
    610e:	08 95       	ret

00006110 <__udivmodsi4>:
    6110:	a1 e2       	ldi	r26, 0x21	; 33
    6112:	1a 2e       	mov	r1, r26
    6114:	aa 1b       	sub	r26, r26
    6116:	bb 1b       	sub	r27, r27
    6118:	fd 01       	movw	r30, r26
    611a:	0d c0       	rjmp	.+26     	; 0x6136 <__udivmodsi4_ep>

0000611c <__udivmodsi4_loop>:
    611c:	aa 1f       	adc	r26, r26
    611e:	bb 1f       	adc	r27, r27
    6120:	ee 1f       	adc	r30, r30
    6122:	ff 1f       	adc	r31, r31
    6124:	a2 17       	cp	r26, r18
    6126:	b3 07       	cpc	r27, r19
    6128:	e4 07       	cpc	r30, r20
    612a:	f5 07       	cpc	r31, r21
    612c:	20 f0       	brcs	.+8      	; 0x6136 <__udivmodsi4_ep>
    612e:	a2 1b       	sub	r26, r18
    6130:	b3 0b       	sbc	r27, r19
    6132:	e4 0b       	sbc	r30, r20
    6134:	f5 0b       	sbc	r31, r21

00006136 <__udivmodsi4_ep>:
    6136:	66 1f       	adc	r22, r22
    6138:	77 1f       	adc	r23, r23
    613a:	88 1f       	adc	r24, r24
    613c:	99 1f       	adc	r25, r25
    613e:	1a 94       	dec	r1
    6140:	69 f7       	brne	.-38     	; 0x611c <__udivmodsi4_loop>
    6142:	60 95       	com	r22
    6144:	70 95       	com	r23
    6146:	80 95       	com	r24
    6148:	90 95       	com	r25
    614a:	9b 01       	movw	r18, r22
    614c:	ac 01       	movw	r20, r24
    614e:	bd 01       	movw	r22, r26
    6150:	cf 01       	movw	r24, r30
    6152:	08 95       	ret

00006154 <__tablejump2__>:
    6154:	ee 0f       	add	r30, r30
    6156:	ff 1f       	adc	r31, r31
    6158:	88 1f       	adc	r24, r24
    615a:	8b bf       	out	0x3b, r24	; 59
    615c:	07 90       	elpm	r0, Z+
    615e:	f6 91       	elpm	r31, Z
    6160:	e0 2d       	mov	r30, r0
    6162:	19 94       	eijmp

00006164 <__udivmodhi4>:
    6164:	aa 1b       	sub	r26, r26
    6166:	bb 1b       	sub	r27, r27
    6168:	51 e1       	ldi	r21, 0x11	; 17
    616a:	07 c0       	rjmp	.+14     	; 0x617a <__udivmodhi4_ep>

0000616c <__udivmodhi4_loop>:
    616c:	aa 1f       	adc	r26, r26
    616e:	bb 1f       	adc	r27, r27
    6170:	a6 17       	cp	r26, r22
    6172:	b7 07       	cpc	r27, r23
    6174:	10 f0       	brcs	.+4      	; 0x617a <__udivmodhi4_ep>
    6176:	a6 1b       	sub	r26, r22
    6178:	b7 0b       	sbc	r27, r23

0000617a <__udivmodhi4_ep>:
    617a:	88 1f       	adc	r24, r24
    617c:	99 1f       	adc	r25, r25
    617e:	5a 95       	dec	r21
    6180:	a9 f7       	brne	.-22     	; 0x616c <__udivmodhi4_loop>
    6182:	80 95       	com	r24
    6184:	90 95       	com	r25
    6186:	bc 01       	movw	r22, r24
    6188:	cd 01       	movw	r24, r26
    618a:	08 95       	ret

0000618c <malloc>:
    618c:	0f 93       	push	r16
    618e:	1f 93       	push	r17
    6190:	cf 93       	push	r28
    6192:	df 93       	push	r29
    6194:	82 30       	cpi	r24, 0x02	; 2
    6196:	91 05       	cpc	r25, r1
    6198:	10 f4       	brcc	.+4      	; 0x619e <malloc+0x12>
    619a:	82 e0       	ldi	r24, 0x02	; 2
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	e0 91 21 18 	lds	r30, 0x1821	; 0x801821 <__flp>
    61a2:	f0 91 22 18 	lds	r31, 0x1822	; 0x801822 <__flp+0x1>
    61a6:	20 e0       	ldi	r18, 0x00	; 0
    61a8:	30 e0       	ldi	r19, 0x00	; 0
    61aa:	a0 e0       	ldi	r26, 0x00	; 0
    61ac:	b0 e0       	ldi	r27, 0x00	; 0
    61ae:	30 97       	sbiw	r30, 0x00	; 0
    61b0:	19 f1       	breq	.+70     	; 0x61f8 <malloc+0x6c>
    61b2:	40 81       	ld	r20, Z
    61b4:	51 81       	ldd	r21, Z+1	; 0x01
    61b6:	02 81       	ldd	r16, Z+2	; 0x02
    61b8:	13 81       	ldd	r17, Z+3	; 0x03
    61ba:	48 17       	cp	r20, r24
    61bc:	59 07       	cpc	r21, r25
    61be:	c8 f0       	brcs	.+50     	; 0x61f2 <malloc+0x66>
    61c0:	84 17       	cp	r24, r20
    61c2:	95 07       	cpc	r25, r21
    61c4:	69 f4       	brne	.+26     	; 0x61e0 <malloc+0x54>
    61c6:	10 97       	sbiw	r26, 0x00	; 0
    61c8:	31 f0       	breq	.+12     	; 0x61d6 <malloc+0x4a>
    61ca:	12 96       	adiw	r26, 0x02	; 2
    61cc:	0c 93       	st	X, r16
    61ce:	12 97       	sbiw	r26, 0x02	; 2
    61d0:	13 96       	adiw	r26, 0x03	; 3
    61d2:	1c 93       	st	X, r17
    61d4:	27 c0       	rjmp	.+78     	; 0x6224 <malloc+0x98>
    61d6:	00 93 21 18 	sts	0x1821, r16	; 0x801821 <__flp>
    61da:	10 93 22 18 	sts	0x1822, r17	; 0x801822 <__flp+0x1>
    61de:	22 c0       	rjmp	.+68     	; 0x6224 <malloc+0x98>
    61e0:	21 15       	cp	r18, r1
    61e2:	31 05       	cpc	r19, r1
    61e4:	19 f0       	breq	.+6      	; 0x61ec <malloc+0x60>
    61e6:	42 17       	cp	r20, r18
    61e8:	53 07       	cpc	r21, r19
    61ea:	18 f4       	brcc	.+6      	; 0x61f2 <malloc+0x66>
    61ec:	9a 01       	movw	r18, r20
    61ee:	bd 01       	movw	r22, r26
    61f0:	ef 01       	movw	r28, r30
    61f2:	df 01       	movw	r26, r30
    61f4:	f8 01       	movw	r30, r16
    61f6:	db cf       	rjmp	.-74     	; 0x61ae <malloc+0x22>
    61f8:	21 15       	cp	r18, r1
    61fa:	31 05       	cpc	r19, r1
    61fc:	f9 f0       	breq	.+62     	; 0x623c <malloc+0xb0>
    61fe:	28 1b       	sub	r18, r24
    6200:	39 0b       	sbc	r19, r25
    6202:	24 30       	cpi	r18, 0x04	; 4
    6204:	31 05       	cpc	r19, r1
    6206:	80 f4       	brcc	.+32     	; 0x6228 <malloc+0x9c>
    6208:	8a 81       	ldd	r24, Y+2	; 0x02
    620a:	9b 81       	ldd	r25, Y+3	; 0x03
    620c:	61 15       	cp	r22, r1
    620e:	71 05       	cpc	r23, r1
    6210:	21 f0       	breq	.+8      	; 0x621a <malloc+0x8e>
    6212:	fb 01       	movw	r30, r22
    6214:	93 83       	std	Z+3, r25	; 0x03
    6216:	82 83       	std	Z+2, r24	; 0x02
    6218:	04 c0       	rjmp	.+8      	; 0x6222 <malloc+0x96>
    621a:	90 93 22 18 	sts	0x1822, r25	; 0x801822 <__flp+0x1>
    621e:	80 93 21 18 	sts	0x1821, r24	; 0x801821 <__flp>
    6222:	fe 01       	movw	r30, r28
    6224:	32 96       	adiw	r30, 0x02	; 2
    6226:	44 c0       	rjmp	.+136    	; 0x62b0 <malloc+0x124>
    6228:	fe 01       	movw	r30, r28
    622a:	e2 0f       	add	r30, r18
    622c:	f3 1f       	adc	r31, r19
    622e:	81 93       	st	Z+, r24
    6230:	91 93       	st	Z+, r25
    6232:	22 50       	subi	r18, 0x02	; 2
    6234:	31 09       	sbc	r19, r1
    6236:	39 83       	std	Y+1, r19	; 0x01
    6238:	28 83       	st	Y, r18
    623a:	3a c0       	rjmp	.+116    	; 0x62b0 <malloc+0x124>
    623c:	20 91 1f 18 	lds	r18, 0x181F	; 0x80181f <__brkval>
    6240:	30 91 20 18 	lds	r19, 0x1820	; 0x801820 <__brkval+0x1>
    6244:	23 2b       	or	r18, r19
    6246:	41 f4       	brne	.+16     	; 0x6258 <malloc+0xcc>
    6248:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    624c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6250:	30 93 20 18 	sts	0x1820, r19	; 0x801820 <__brkval+0x1>
    6254:	20 93 1f 18 	sts	0x181F, r18	; 0x80181f <__brkval>
    6258:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    625c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6260:	21 15       	cp	r18, r1
    6262:	31 05       	cpc	r19, r1
    6264:	41 f4       	brne	.+16     	; 0x6276 <malloc+0xea>
    6266:	2d b7       	in	r18, 0x3d	; 61
    6268:	3e b7       	in	r19, 0x3e	; 62
    626a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    626e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6272:	24 1b       	sub	r18, r20
    6274:	35 0b       	sbc	r19, r21
    6276:	e0 91 1f 18 	lds	r30, 0x181F	; 0x80181f <__brkval>
    627a:	f0 91 20 18 	lds	r31, 0x1820	; 0x801820 <__brkval+0x1>
    627e:	e2 17       	cp	r30, r18
    6280:	f3 07       	cpc	r31, r19
    6282:	a0 f4       	brcc	.+40     	; 0x62ac <malloc+0x120>
    6284:	2e 1b       	sub	r18, r30
    6286:	3f 0b       	sbc	r19, r31
    6288:	28 17       	cp	r18, r24
    628a:	39 07       	cpc	r19, r25
    628c:	78 f0       	brcs	.+30     	; 0x62ac <malloc+0x120>
    628e:	ac 01       	movw	r20, r24
    6290:	4e 5f       	subi	r20, 0xFE	; 254
    6292:	5f 4f       	sbci	r21, 0xFF	; 255
    6294:	24 17       	cp	r18, r20
    6296:	35 07       	cpc	r19, r21
    6298:	48 f0       	brcs	.+18     	; 0x62ac <malloc+0x120>
    629a:	4e 0f       	add	r20, r30
    629c:	5f 1f       	adc	r21, r31
    629e:	50 93 20 18 	sts	0x1820, r21	; 0x801820 <__brkval+0x1>
    62a2:	40 93 1f 18 	sts	0x181F, r20	; 0x80181f <__brkval>
    62a6:	81 93       	st	Z+, r24
    62a8:	91 93       	st	Z+, r25
    62aa:	02 c0       	rjmp	.+4      	; 0x62b0 <malloc+0x124>
    62ac:	e0 e0       	ldi	r30, 0x00	; 0
    62ae:	f0 e0       	ldi	r31, 0x00	; 0
    62b0:	cf 01       	movw	r24, r30
    62b2:	df 91       	pop	r29
    62b4:	cf 91       	pop	r28
    62b6:	1f 91       	pop	r17
    62b8:	0f 91       	pop	r16
    62ba:	08 95       	ret

000062bc <free>:
    62bc:	cf 93       	push	r28
    62be:	df 93       	push	r29
    62c0:	00 97       	sbiw	r24, 0x00	; 0
    62c2:	09 f4       	brne	.+2      	; 0x62c6 <free+0xa>
    62c4:	81 c0       	rjmp	.+258    	; 0x63c8 <free+0x10c>
    62c6:	fc 01       	movw	r30, r24
    62c8:	32 97       	sbiw	r30, 0x02	; 2
    62ca:	13 82       	std	Z+3, r1	; 0x03
    62cc:	12 82       	std	Z+2, r1	; 0x02
    62ce:	a0 91 21 18 	lds	r26, 0x1821	; 0x801821 <__flp>
    62d2:	b0 91 22 18 	lds	r27, 0x1822	; 0x801822 <__flp+0x1>
    62d6:	10 97       	sbiw	r26, 0x00	; 0
    62d8:	81 f4       	brne	.+32     	; 0x62fa <free+0x3e>
    62da:	20 81       	ld	r18, Z
    62dc:	31 81       	ldd	r19, Z+1	; 0x01
    62de:	82 0f       	add	r24, r18
    62e0:	93 1f       	adc	r25, r19
    62e2:	20 91 1f 18 	lds	r18, 0x181F	; 0x80181f <__brkval>
    62e6:	30 91 20 18 	lds	r19, 0x1820	; 0x801820 <__brkval+0x1>
    62ea:	28 17       	cp	r18, r24
    62ec:	39 07       	cpc	r19, r25
    62ee:	51 f5       	brne	.+84     	; 0x6344 <free+0x88>
    62f0:	f0 93 20 18 	sts	0x1820, r31	; 0x801820 <__brkval+0x1>
    62f4:	e0 93 1f 18 	sts	0x181F, r30	; 0x80181f <__brkval>
    62f8:	67 c0       	rjmp	.+206    	; 0x63c8 <free+0x10c>
    62fa:	ed 01       	movw	r28, r26
    62fc:	20 e0       	ldi	r18, 0x00	; 0
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	ce 17       	cp	r28, r30
    6302:	df 07       	cpc	r29, r31
    6304:	40 f4       	brcc	.+16     	; 0x6316 <free+0x5a>
    6306:	4a 81       	ldd	r20, Y+2	; 0x02
    6308:	5b 81       	ldd	r21, Y+3	; 0x03
    630a:	9e 01       	movw	r18, r28
    630c:	41 15       	cp	r20, r1
    630e:	51 05       	cpc	r21, r1
    6310:	f1 f0       	breq	.+60     	; 0x634e <free+0x92>
    6312:	ea 01       	movw	r28, r20
    6314:	f5 cf       	rjmp	.-22     	; 0x6300 <free+0x44>
    6316:	d3 83       	std	Z+3, r29	; 0x03
    6318:	c2 83       	std	Z+2, r28	; 0x02
    631a:	40 81       	ld	r20, Z
    631c:	51 81       	ldd	r21, Z+1	; 0x01
    631e:	84 0f       	add	r24, r20
    6320:	95 1f       	adc	r25, r21
    6322:	c8 17       	cp	r28, r24
    6324:	d9 07       	cpc	r29, r25
    6326:	59 f4       	brne	.+22     	; 0x633e <free+0x82>
    6328:	88 81       	ld	r24, Y
    632a:	99 81       	ldd	r25, Y+1	; 0x01
    632c:	84 0f       	add	r24, r20
    632e:	95 1f       	adc	r25, r21
    6330:	02 96       	adiw	r24, 0x02	; 2
    6332:	91 83       	std	Z+1, r25	; 0x01
    6334:	80 83       	st	Z, r24
    6336:	8a 81       	ldd	r24, Y+2	; 0x02
    6338:	9b 81       	ldd	r25, Y+3	; 0x03
    633a:	93 83       	std	Z+3, r25	; 0x03
    633c:	82 83       	std	Z+2, r24	; 0x02
    633e:	21 15       	cp	r18, r1
    6340:	31 05       	cpc	r19, r1
    6342:	29 f4       	brne	.+10     	; 0x634e <free+0x92>
    6344:	f0 93 22 18 	sts	0x1822, r31	; 0x801822 <__flp+0x1>
    6348:	e0 93 21 18 	sts	0x1821, r30	; 0x801821 <__flp>
    634c:	3d c0       	rjmp	.+122    	; 0x63c8 <free+0x10c>
    634e:	e9 01       	movw	r28, r18
    6350:	fb 83       	std	Y+3, r31	; 0x03
    6352:	ea 83       	std	Y+2, r30	; 0x02
    6354:	49 91       	ld	r20, Y+
    6356:	59 91       	ld	r21, Y+
    6358:	c4 0f       	add	r28, r20
    635a:	d5 1f       	adc	r29, r21
    635c:	ec 17       	cp	r30, r28
    635e:	fd 07       	cpc	r31, r29
    6360:	61 f4       	brne	.+24     	; 0x637a <free+0xbe>
    6362:	80 81       	ld	r24, Z
    6364:	91 81       	ldd	r25, Z+1	; 0x01
    6366:	84 0f       	add	r24, r20
    6368:	95 1f       	adc	r25, r21
    636a:	02 96       	adiw	r24, 0x02	; 2
    636c:	e9 01       	movw	r28, r18
    636e:	99 83       	std	Y+1, r25	; 0x01
    6370:	88 83       	st	Y, r24
    6372:	82 81       	ldd	r24, Z+2	; 0x02
    6374:	93 81       	ldd	r25, Z+3	; 0x03
    6376:	9b 83       	std	Y+3, r25	; 0x03
    6378:	8a 83       	std	Y+2, r24	; 0x02
    637a:	e0 e0       	ldi	r30, 0x00	; 0
    637c:	f0 e0       	ldi	r31, 0x00	; 0
    637e:	12 96       	adiw	r26, 0x02	; 2
    6380:	8d 91       	ld	r24, X+
    6382:	9c 91       	ld	r25, X
    6384:	13 97       	sbiw	r26, 0x03	; 3
    6386:	00 97       	sbiw	r24, 0x00	; 0
    6388:	19 f0       	breq	.+6      	; 0x6390 <free+0xd4>
    638a:	fd 01       	movw	r30, r26
    638c:	dc 01       	movw	r26, r24
    638e:	f7 cf       	rjmp	.-18     	; 0x637e <free+0xc2>
    6390:	8d 91       	ld	r24, X+
    6392:	9c 91       	ld	r25, X
    6394:	11 97       	sbiw	r26, 0x01	; 1
    6396:	9d 01       	movw	r18, r26
    6398:	2e 5f       	subi	r18, 0xFE	; 254
    639a:	3f 4f       	sbci	r19, 0xFF	; 255
    639c:	82 0f       	add	r24, r18
    639e:	93 1f       	adc	r25, r19
    63a0:	20 91 1f 18 	lds	r18, 0x181F	; 0x80181f <__brkval>
    63a4:	30 91 20 18 	lds	r19, 0x1820	; 0x801820 <__brkval+0x1>
    63a8:	28 17       	cp	r18, r24
    63aa:	39 07       	cpc	r19, r25
    63ac:	69 f4       	brne	.+26     	; 0x63c8 <free+0x10c>
    63ae:	30 97       	sbiw	r30, 0x00	; 0
    63b0:	29 f4       	brne	.+10     	; 0x63bc <free+0x100>
    63b2:	10 92 22 18 	sts	0x1822, r1	; 0x801822 <__flp+0x1>
    63b6:	10 92 21 18 	sts	0x1821, r1	; 0x801821 <__flp>
    63ba:	02 c0       	rjmp	.+4      	; 0x63c0 <free+0x104>
    63bc:	13 82       	std	Z+3, r1	; 0x03
    63be:	12 82       	std	Z+2, r1	; 0x02
    63c0:	b0 93 20 18 	sts	0x1820, r27	; 0x801820 <__brkval+0x1>
    63c4:	a0 93 1f 18 	sts	0x181F, r26	; 0x80181f <__brkval>
    63c8:	df 91       	pop	r29
    63ca:	cf 91       	pop	r28
    63cc:	08 95       	ret

000063ce <abort>:
    63ce:	81 e0       	ldi	r24, 0x01	; 1
    63d0:	90 e0       	ldi	r25, 0x00	; 0
    63d2:	f8 94       	cli
    63d4:	5a c2       	rjmp	.+1204   	; 0x688a <_exit>

000063d6 <__ftoa_engine>:
    63d6:	28 30       	cpi	r18, 0x08	; 8
    63d8:	08 f0       	brcs	.+2      	; 0x63dc <__ftoa_engine+0x6>
    63da:	27 e0       	ldi	r18, 0x07	; 7
    63dc:	33 27       	eor	r19, r19
    63de:	da 01       	movw	r26, r20
    63e0:	99 0f       	add	r25, r25
    63e2:	31 1d       	adc	r19, r1
    63e4:	87 fd       	sbrc	r24, 7
    63e6:	91 60       	ori	r25, 0x01	; 1
    63e8:	00 96       	adiw	r24, 0x00	; 0
    63ea:	61 05       	cpc	r22, r1
    63ec:	71 05       	cpc	r23, r1
    63ee:	39 f4       	brne	.+14     	; 0x63fe <__ftoa_engine+0x28>
    63f0:	32 60       	ori	r19, 0x02	; 2
    63f2:	2e 5f       	subi	r18, 0xFE	; 254
    63f4:	3d 93       	st	X+, r19
    63f6:	30 e3       	ldi	r19, 0x30	; 48
    63f8:	2a 95       	dec	r18
    63fa:	e1 f7       	brne	.-8      	; 0x63f4 <__ftoa_engine+0x1e>
    63fc:	08 95       	ret
    63fe:	9f 3f       	cpi	r25, 0xFF	; 255
    6400:	30 f0       	brcs	.+12     	; 0x640e <__ftoa_engine+0x38>
    6402:	80 38       	cpi	r24, 0x80	; 128
    6404:	71 05       	cpc	r23, r1
    6406:	61 05       	cpc	r22, r1
    6408:	09 f0       	breq	.+2      	; 0x640c <__ftoa_engine+0x36>
    640a:	3c 5f       	subi	r19, 0xFC	; 252
    640c:	3c 5f       	subi	r19, 0xFC	; 252
    640e:	3d 93       	st	X+, r19
    6410:	91 30       	cpi	r25, 0x01	; 1
    6412:	08 f0       	brcs	.+2      	; 0x6416 <__ftoa_engine+0x40>
    6414:	80 68       	ori	r24, 0x80	; 128
    6416:	91 1d       	adc	r25, r1
    6418:	df 93       	push	r29
    641a:	cf 93       	push	r28
    641c:	1f 93       	push	r17
    641e:	0f 93       	push	r16
    6420:	ff 92       	push	r15
    6422:	ef 92       	push	r14
    6424:	19 2f       	mov	r17, r25
    6426:	98 7f       	andi	r25, 0xF8	; 248
    6428:	96 95       	lsr	r25
    642a:	e9 2f       	mov	r30, r25
    642c:	96 95       	lsr	r25
    642e:	96 95       	lsr	r25
    6430:	e9 0f       	add	r30, r25
    6432:	ff 27       	eor	r31, r31
    6434:	e4 50       	subi	r30, 0x04	; 4
    6436:	fe 4f       	sbci	r31, 0xFE	; 254
    6438:	99 27       	eor	r25, r25
    643a:	33 27       	eor	r19, r19
    643c:	ee 24       	eor	r14, r14
    643e:	ff 24       	eor	r15, r15
    6440:	a7 01       	movw	r20, r14
    6442:	e7 01       	movw	r28, r14
    6444:	05 90       	lpm	r0, Z+
    6446:	08 94       	sec
    6448:	07 94       	ror	r0
    644a:	28 f4       	brcc	.+10     	; 0x6456 <__ftoa_engine+0x80>
    644c:	36 0f       	add	r19, r22
    644e:	e7 1e       	adc	r14, r23
    6450:	f8 1e       	adc	r15, r24
    6452:	49 1f       	adc	r20, r25
    6454:	51 1d       	adc	r21, r1
    6456:	66 0f       	add	r22, r22
    6458:	77 1f       	adc	r23, r23
    645a:	88 1f       	adc	r24, r24
    645c:	99 1f       	adc	r25, r25
    645e:	06 94       	lsr	r0
    6460:	a1 f7       	brne	.-24     	; 0x644a <__ftoa_engine+0x74>
    6462:	05 90       	lpm	r0, Z+
    6464:	07 94       	ror	r0
    6466:	28 f4       	brcc	.+10     	; 0x6472 <__ftoa_engine+0x9c>
    6468:	e7 0e       	add	r14, r23
    646a:	f8 1e       	adc	r15, r24
    646c:	49 1f       	adc	r20, r25
    646e:	56 1f       	adc	r21, r22
    6470:	c1 1d       	adc	r28, r1
    6472:	77 0f       	add	r23, r23
    6474:	88 1f       	adc	r24, r24
    6476:	99 1f       	adc	r25, r25
    6478:	66 1f       	adc	r22, r22
    647a:	06 94       	lsr	r0
    647c:	a1 f7       	brne	.-24     	; 0x6466 <__ftoa_engine+0x90>
    647e:	05 90       	lpm	r0, Z+
    6480:	07 94       	ror	r0
    6482:	28 f4       	brcc	.+10     	; 0x648e <__ftoa_engine+0xb8>
    6484:	f8 0e       	add	r15, r24
    6486:	49 1f       	adc	r20, r25
    6488:	56 1f       	adc	r21, r22
    648a:	c7 1f       	adc	r28, r23
    648c:	d1 1d       	adc	r29, r1
    648e:	88 0f       	add	r24, r24
    6490:	99 1f       	adc	r25, r25
    6492:	66 1f       	adc	r22, r22
    6494:	77 1f       	adc	r23, r23
    6496:	06 94       	lsr	r0
    6498:	a1 f7       	brne	.-24     	; 0x6482 <__ftoa_engine+0xac>
    649a:	05 90       	lpm	r0, Z+
    649c:	07 94       	ror	r0
    649e:	20 f4       	brcc	.+8      	; 0x64a8 <__ftoa_engine+0xd2>
    64a0:	49 0f       	add	r20, r25
    64a2:	56 1f       	adc	r21, r22
    64a4:	c7 1f       	adc	r28, r23
    64a6:	d8 1f       	adc	r29, r24
    64a8:	99 0f       	add	r25, r25
    64aa:	66 1f       	adc	r22, r22
    64ac:	77 1f       	adc	r23, r23
    64ae:	88 1f       	adc	r24, r24
    64b0:	06 94       	lsr	r0
    64b2:	a9 f7       	brne	.-22     	; 0x649e <__ftoa_engine+0xc8>
    64b4:	84 91       	lpm	r24, Z
    64b6:	10 95       	com	r17
    64b8:	17 70       	andi	r17, 0x07	; 7
    64ba:	41 f0       	breq	.+16     	; 0x64cc <__ftoa_engine+0xf6>
    64bc:	d6 95       	lsr	r29
    64be:	c7 95       	ror	r28
    64c0:	57 95       	ror	r21
    64c2:	47 95       	ror	r20
    64c4:	f7 94       	ror	r15
    64c6:	e7 94       	ror	r14
    64c8:	1a 95       	dec	r17
    64ca:	c1 f7       	brne	.-16     	; 0x64bc <__ftoa_engine+0xe6>
    64cc:	e2 ea       	ldi	r30, 0xA2	; 162
    64ce:	f1 e0       	ldi	r31, 0x01	; 1
    64d0:	68 94       	set
    64d2:	15 90       	lpm	r1, Z+
    64d4:	15 91       	lpm	r17, Z+
    64d6:	35 91       	lpm	r19, Z+
    64d8:	65 91       	lpm	r22, Z+
    64da:	95 91       	lpm	r25, Z+
    64dc:	05 90       	lpm	r0, Z+
    64de:	7f e2       	ldi	r23, 0x2F	; 47
    64e0:	73 95       	inc	r23
    64e2:	e1 18       	sub	r14, r1
    64e4:	f1 0a       	sbc	r15, r17
    64e6:	43 0b       	sbc	r20, r19
    64e8:	56 0b       	sbc	r21, r22
    64ea:	c9 0b       	sbc	r28, r25
    64ec:	d0 09       	sbc	r29, r0
    64ee:	c0 f7       	brcc	.-16     	; 0x64e0 <__ftoa_engine+0x10a>
    64f0:	e1 0c       	add	r14, r1
    64f2:	f1 1e       	adc	r15, r17
    64f4:	43 1f       	adc	r20, r19
    64f6:	56 1f       	adc	r21, r22
    64f8:	c9 1f       	adc	r28, r25
    64fa:	d0 1d       	adc	r29, r0
    64fc:	7e f4       	brtc	.+30     	; 0x651c <__ftoa_engine+0x146>
    64fe:	70 33       	cpi	r23, 0x30	; 48
    6500:	11 f4       	brne	.+4      	; 0x6506 <__ftoa_engine+0x130>
    6502:	8a 95       	dec	r24
    6504:	e6 cf       	rjmp	.-52     	; 0x64d2 <__ftoa_engine+0xfc>
    6506:	e8 94       	clt
    6508:	01 50       	subi	r16, 0x01	; 1
    650a:	30 f0       	brcs	.+12     	; 0x6518 <__ftoa_engine+0x142>
    650c:	08 0f       	add	r16, r24
    650e:	0a f4       	brpl	.+2      	; 0x6512 <__ftoa_engine+0x13c>
    6510:	00 27       	eor	r16, r16
    6512:	02 17       	cp	r16, r18
    6514:	08 f4       	brcc	.+2      	; 0x6518 <__ftoa_engine+0x142>
    6516:	20 2f       	mov	r18, r16
    6518:	23 95       	inc	r18
    651a:	02 2f       	mov	r16, r18
    651c:	7a 33       	cpi	r23, 0x3A	; 58
    651e:	28 f0       	brcs	.+10     	; 0x652a <__ftoa_engine+0x154>
    6520:	79 e3       	ldi	r23, 0x39	; 57
    6522:	7d 93       	st	X+, r23
    6524:	2a 95       	dec	r18
    6526:	e9 f7       	brne	.-6      	; 0x6522 <__ftoa_engine+0x14c>
    6528:	10 c0       	rjmp	.+32     	; 0x654a <__ftoa_engine+0x174>
    652a:	7d 93       	st	X+, r23
    652c:	2a 95       	dec	r18
    652e:	89 f6       	brne	.-94     	; 0x64d2 <__ftoa_engine+0xfc>
    6530:	06 94       	lsr	r0
    6532:	97 95       	ror	r25
    6534:	67 95       	ror	r22
    6536:	37 95       	ror	r19
    6538:	17 95       	ror	r17
    653a:	17 94       	ror	r1
    653c:	e1 18       	sub	r14, r1
    653e:	f1 0a       	sbc	r15, r17
    6540:	43 0b       	sbc	r20, r19
    6542:	56 0b       	sbc	r21, r22
    6544:	c9 0b       	sbc	r28, r25
    6546:	d0 09       	sbc	r29, r0
    6548:	98 f0       	brcs	.+38     	; 0x6570 <__ftoa_engine+0x19a>
    654a:	23 95       	inc	r18
    654c:	7e 91       	ld	r23, -X
    654e:	73 95       	inc	r23
    6550:	7a 33       	cpi	r23, 0x3A	; 58
    6552:	08 f0       	brcs	.+2      	; 0x6556 <__ftoa_engine+0x180>
    6554:	70 e3       	ldi	r23, 0x30	; 48
    6556:	7c 93       	st	X, r23
    6558:	20 13       	cpse	r18, r16
    655a:	b8 f7       	brcc	.-18     	; 0x654a <__ftoa_engine+0x174>
    655c:	7e 91       	ld	r23, -X
    655e:	70 61       	ori	r23, 0x10	; 16
    6560:	7d 93       	st	X+, r23
    6562:	30 f0       	brcs	.+12     	; 0x6570 <__ftoa_engine+0x19a>
    6564:	83 95       	inc	r24
    6566:	71 e3       	ldi	r23, 0x31	; 49
    6568:	7d 93       	st	X+, r23
    656a:	70 e3       	ldi	r23, 0x30	; 48
    656c:	2a 95       	dec	r18
    656e:	e1 f7       	brne	.-8      	; 0x6568 <__ftoa_engine+0x192>
    6570:	11 24       	eor	r1, r1
    6572:	ef 90       	pop	r14
    6574:	ff 90       	pop	r15
    6576:	0f 91       	pop	r16
    6578:	1f 91       	pop	r17
    657a:	cf 91       	pop	r28
    657c:	df 91       	pop	r29
    657e:	99 27       	eor	r25, r25
    6580:	87 fd       	sbrc	r24, 7
    6582:	90 95       	com	r25
    6584:	08 95       	ret

00006586 <strnlen_P>:
    6586:	fc 01       	movw	r30, r24
    6588:	05 90       	lpm	r0, Z+
    658a:	61 50       	subi	r22, 0x01	; 1
    658c:	70 40       	sbci	r23, 0x00	; 0
    658e:	01 10       	cpse	r0, r1
    6590:	d8 f7       	brcc	.-10     	; 0x6588 <strnlen_P+0x2>
    6592:	80 95       	com	r24
    6594:	90 95       	com	r25
    6596:	8e 0f       	add	r24, r30
    6598:	9f 1f       	adc	r25, r31
    659a:	08 95       	ret

0000659c <memcpy>:
    659c:	fb 01       	movw	r30, r22
    659e:	dc 01       	movw	r26, r24
    65a0:	02 c0       	rjmp	.+4      	; 0x65a6 <memcpy+0xa>
    65a2:	01 90       	ld	r0, Z+
    65a4:	0d 92       	st	X+, r0
    65a6:	41 50       	subi	r20, 0x01	; 1
    65a8:	50 40       	sbci	r21, 0x00	; 0
    65aa:	d8 f7       	brcc	.-10     	; 0x65a2 <memcpy+0x6>
    65ac:	08 95       	ret

000065ae <memset>:
    65ae:	dc 01       	movw	r26, r24
    65b0:	01 c0       	rjmp	.+2      	; 0x65b4 <memset+0x6>
    65b2:	6d 93       	st	X+, r22
    65b4:	41 50       	subi	r20, 0x01	; 1
    65b6:	50 40       	sbci	r21, 0x00	; 0
    65b8:	e0 f7       	brcc	.-8      	; 0x65b2 <memset+0x4>
    65ba:	08 95       	ret

000065bc <strcasestr>:
    65bc:	fb 01       	movw	r30, r22
    65be:	51 91       	ld	r21, Z+
    65c0:	55 23       	and	r21, r21
    65c2:	b1 f0       	breq	.+44     	; 0x65f0 <strcasestr+0x34>
    65c4:	bf 01       	movw	r22, r30
    65c6:	dc 01       	movw	r26, r24
    65c8:	05 2e       	mov	r0, r21
    65ca:	4d 91       	ld	r20, X+
    65cc:	44 23       	and	r20, r20
    65ce:	69 f0       	breq	.+26     	; 0x65ea <strcasestr+0x2e>
    65d0:	10 d0       	rcall	.+32     	; 0x65f2 <strcasestr+0x36>
    65d2:	d9 f7       	brne	.-10     	; 0x65ca <strcasestr+0xe>
    65d4:	cd 01       	movw	r24, r26
    65d6:	01 90       	ld	r0, Z+
    65d8:	00 20       	and	r0, r0
    65da:	49 f0       	breq	.+18     	; 0x65ee <strcasestr+0x32>
    65dc:	4d 91       	ld	r20, X+
    65de:	41 11       	cpse	r20, r1
    65e0:	08 d0       	rcall	.+16     	; 0x65f2 <strcasestr+0x36>
    65e2:	c9 f3       	breq	.-14     	; 0x65d6 <strcasestr+0x1a>
    65e4:	fb 01       	movw	r30, r22
    65e6:	41 11       	cpse	r20, r1
    65e8:	ee cf       	rjmp	.-36     	; 0x65c6 <strcasestr+0xa>
    65ea:	81 e0       	ldi	r24, 0x01	; 1
    65ec:	90 e0       	ldi	r25, 0x00	; 0
    65ee:	01 97       	sbiw	r24, 0x01	; 1
    65f0:	08 95       	ret
    65f2:	40 25       	eor	r20, r0
    65f4:	39 f0       	breq	.+14     	; 0x6604 <strcasestr+0x48>
    65f6:	40 32       	cpi	r20, 0x20	; 32
    65f8:	29 f4       	brne	.+10     	; 0x6604 <strcasestr+0x48>
    65fa:	40 29       	or	r20, r0
    65fc:	4b 57       	subi	r20, 0x7B	; 123
    65fe:	46 5e       	subi	r20, 0xE6	; 230
    6600:	08 f0       	brcs	.+2      	; 0x6604 <strcasestr+0x48>
    6602:	18 94       	sez
    6604:	08 95       	ret

00006606 <strcat>:
    6606:	fb 01       	movw	r30, r22
    6608:	dc 01       	movw	r26, r24
    660a:	0d 90       	ld	r0, X+
    660c:	00 20       	and	r0, r0
    660e:	e9 f7       	brne	.-6      	; 0x660a <strcat+0x4>
    6610:	11 97       	sbiw	r26, 0x01	; 1
    6612:	01 90       	ld	r0, Z+
    6614:	0d 92       	st	X+, r0
    6616:	00 20       	and	r0, r0
    6618:	e1 f7       	brne	.-8      	; 0x6612 <strcat+0xc>
    661a:	08 95       	ret

0000661c <strcpy>:
    661c:	fb 01       	movw	r30, r22
    661e:	dc 01       	movw	r26, r24
    6620:	01 90       	ld	r0, Z+
    6622:	0d 92       	st	X+, r0
    6624:	00 20       	and	r0, r0
    6626:	e1 f7       	brne	.-8      	; 0x6620 <strcpy+0x4>
    6628:	08 95       	ret

0000662a <strncasecmp>:
    662a:	fb 01       	movw	r30, r22
    662c:	dc 01       	movw	r26, r24
    662e:	41 50       	subi	r20, 0x01	; 1
    6630:	50 40       	sbci	r21, 0x00	; 0
    6632:	88 f0       	brcs	.+34     	; 0x6656 <strncasecmp+0x2c>
    6634:	8d 91       	ld	r24, X+
    6636:	81 34       	cpi	r24, 0x41	; 65
    6638:	1c f0       	brlt	.+6      	; 0x6640 <strncasecmp+0x16>
    663a:	8b 35       	cpi	r24, 0x5B	; 91
    663c:	0c f4       	brge	.+2      	; 0x6640 <strncasecmp+0x16>
    663e:	80 5e       	subi	r24, 0xE0	; 224
    6640:	61 91       	ld	r22, Z+
    6642:	61 34       	cpi	r22, 0x41	; 65
    6644:	1c f0       	brlt	.+6      	; 0x664c <strncasecmp+0x22>
    6646:	6b 35       	cpi	r22, 0x5B	; 91
    6648:	0c f4       	brge	.+2      	; 0x664c <strncasecmp+0x22>
    664a:	60 5e       	subi	r22, 0xE0	; 224
    664c:	86 1b       	sub	r24, r22
    664e:	61 11       	cpse	r22, r1
    6650:	71 f3       	breq	.-36     	; 0x662e <strncasecmp+0x4>
    6652:	99 0b       	sbc	r25, r25
    6654:	08 95       	ret
    6656:	88 1b       	sub	r24, r24
    6658:	fc cf       	rjmp	.-8      	; 0x6652 <strncasecmp+0x28>

0000665a <strnlen>:
    665a:	fc 01       	movw	r30, r24
    665c:	61 50       	subi	r22, 0x01	; 1
    665e:	70 40       	sbci	r23, 0x00	; 0
    6660:	01 90       	ld	r0, Z+
    6662:	01 10       	cpse	r0, r1
    6664:	d8 f7       	brcc	.-10     	; 0x665c <strnlen+0x2>
    6666:	80 95       	com	r24
    6668:	90 95       	com	r25
    666a:	8e 0f       	add	r24, r30
    666c:	9f 1f       	adc	r25, r31
    666e:	08 95       	ret

00006670 <fputc>:
    6670:	0f 93       	push	r16
    6672:	1f 93       	push	r17
    6674:	cf 93       	push	r28
    6676:	df 93       	push	r29
    6678:	fb 01       	movw	r30, r22
    667a:	23 81       	ldd	r18, Z+3	; 0x03
    667c:	21 fd       	sbrc	r18, 1
    667e:	03 c0       	rjmp	.+6      	; 0x6686 <fputc+0x16>
    6680:	8f ef       	ldi	r24, 0xFF	; 255
    6682:	9f ef       	ldi	r25, 0xFF	; 255
    6684:	2c c0       	rjmp	.+88     	; 0x66de <fputc+0x6e>
    6686:	22 ff       	sbrs	r18, 2
    6688:	16 c0       	rjmp	.+44     	; 0x66b6 <fputc+0x46>
    668a:	46 81       	ldd	r20, Z+6	; 0x06
    668c:	57 81       	ldd	r21, Z+7	; 0x07
    668e:	24 81       	ldd	r18, Z+4	; 0x04
    6690:	35 81       	ldd	r19, Z+5	; 0x05
    6692:	42 17       	cp	r20, r18
    6694:	53 07       	cpc	r21, r19
    6696:	44 f4       	brge	.+16     	; 0x66a8 <fputc+0x38>
    6698:	a0 81       	ld	r26, Z
    669a:	b1 81       	ldd	r27, Z+1	; 0x01
    669c:	9d 01       	movw	r18, r26
    669e:	2f 5f       	subi	r18, 0xFF	; 255
    66a0:	3f 4f       	sbci	r19, 0xFF	; 255
    66a2:	31 83       	std	Z+1, r19	; 0x01
    66a4:	20 83       	st	Z, r18
    66a6:	8c 93       	st	X, r24
    66a8:	26 81       	ldd	r18, Z+6	; 0x06
    66aa:	37 81       	ldd	r19, Z+7	; 0x07
    66ac:	2f 5f       	subi	r18, 0xFF	; 255
    66ae:	3f 4f       	sbci	r19, 0xFF	; 255
    66b0:	37 83       	std	Z+7, r19	; 0x07
    66b2:	26 83       	std	Z+6, r18	; 0x06
    66b4:	14 c0       	rjmp	.+40     	; 0x66de <fputc+0x6e>
    66b6:	8b 01       	movw	r16, r22
    66b8:	ec 01       	movw	r28, r24
    66ba:	fb 01       	movw	r30, r22
    66bc:	00 84       	ldd	r0, Z+8	; 0x08
    66be:	f1 85       	ldd	r31, Z+9	; 0x09
    66c0:	e0 2d       	mov	r30, r0
    66c2:	19 95       	eicall
    66c4:	89 2b       	or	r24, r25
    66c6:	e1 f6       	brne	.-72     	; 0x6680 <fputc+0x10>
    66c8:	d8 01       	movw	r26, r16
    66ca:	16 96       	adiw	r26, 0x06	; 6
    66cc:	8d 91       	ld	r24, X+
    66ce:	9c 91       	ld	r25, X
    66d0:	17 97       	sbiw	r26, 0x07	; 7
    66d2:	01 96       	adiw	r24, 0x01	; 1
    66d4:	17 96       	adiw	r26, 0x07	; 7
    66d6:	9c 93       	st	X, r25
    66d8:	8e 93       	st	-X, r24
    66da:	16 97       	sbiw	r26, 0x06	; 6
    66dc:	ce 01       	movw	r24, r28
    66de:	df 91       	pop	r29
    66e0:	cf 91       	pop	r28
    66e2:	1f 91       	pop	r17
    66e4:	0f 91       	pop	r16
    66e6:	08 95       	ret

000066e8 <printf>:
    66e8:	cf 93       	push	r28
    66ea:	df 93       	push	r29
    66ec:	cd b7       	in	r28, 0x3d	; 61
    66ee:	de b7       	in	r29, 0x3e	; 62
    66f0:	ae 01       	movw	r20, r28
    66f2:	4a 5f       	subi	r20, 0xFA	; 250
    66f4:	5f 4f       	sbci	r21, 0xFF	; 255
    66f6:	fa 01       	movw	r30, r20
    66f8:	61 91       	ld	r22, Z+
    66fa:	71 91       	ld	r23, Z+
    66fc:	af 01       	movw	r20, r30
    66fe:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <__iob+0x2>
    6702:	90 91 26 18 	lds	r25, 0x1826	; 0x801826 <__iob+0x3>
    6706:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <vfprintf>
    670a:	df 91       	pop	r29
    670c:	cf 91       	pop	r28
    670e:	08 95       	ret

00006710 <puts>:
    6710:	0f 93       	push	r16
    6712:	1f 93       	push	r17
    6714:	cf 93       	push	r28
    6716:	df 93       	push	r29
    6718:	e0 91 25 18 	lds	r30, 0x1825	; 0x801825 <__iob+0x2>
    671c:	f0 91 26 18 	lds	r31, 0x1826	; 0x801826 <__iob+0x3>
    6720:	23 81       	ldd	r18, Z+3	; 0x03
    6722:	21 ff       	sbrs	r18, 1
    6724:	1b c0       	rjmp	.+54     	; 0x675c <puts+0x4c>
    6726:	8c 01       	movw	r16, r24
    6728:	d0 e0       	ldi	r29, 0x00	; 0
    672a:	c0 e0       	ldi	r28, 0x00	; 0
    672c:	f8 01       	movw	r30, r16
    672e:	81 91       	ld	r24, Z+
    6730:	8f 01       	movw	r16, r30
    6732:	60 91 25 18 	lds	r22, 0x1825	; 0x801825 <__iob+0x2>
    6736:	70 91 26 18 	lds	r23, 0x1826	; 0x801826 <__iob+0x3>
    673a:	db 01       	movw	r26, r22
    673c:	18 96       	adiw	r26, 0x08	; 8
    673e:	ed 91       	ld	r30, X+
    6740:	fc 91       	ld	r31, X
    6742:	19 97       	sbiw	r26, 0x09	; 9
    6744:	88 23       	and	r24, r24
    6746:	31 f0       	breq	.+12     	; 0x6754 <puts+0x44>
    6748:	19 95       	eicall
    674a:	89 2b       	or	r24, r25
    674c:	79 f3       	breq	.-34     	; 0x672c <puts+0x1c>
    674e:	df ef       	ldi	r29, 0xFF	; 255
    6750:	cf ef       	ldi	r28, 0xFF	; 255
    6752:	ec cf       	rjmp	.-40     	; 0x672c <puts+0x1c>
    6754:	8a e0       	ldi	r24, 0x0A	; 10
    6756:	19 95       	eicall
    6758:	89 2b       	or	r24, r25
    675a:	19 f0       	breq	.+6      	; 0x6762 <puts+0x52>
    675c:	8f ef       	ldi	r24, 0xFF	; 255
    675e:	9f ef       	ldi	r25, 0xFF	; 255
    6760:	02 c0       	rjmp	.+4      	; 0x6766 <puts+0x56>
    6762:	8d 2f       	mov	r24, r29
    6764:	9c 2f       	mov	r25, r28
    6766:	df 91       	pop	r29
    6768:	cf 91       	pop	r28
    676a:	1f 91       	pop	r17
    676c:	0f 91       	pop	r16
    676e:	08 95       	ret

00006770 <sprintf>:
    6770:	0f 93       	push	r16
    6772:	1f 93       	push	r17
    6774:	cf 93       	push	r28
    6776:	df 93       	push	r29
    6778:	cd b7       	in	r28, 0x3d	; 61
    677a:	de b7       	in	r29, 0x3e	; 62
    677c:	2e 97       	sbiw	r28, 0x0e	; 14
    677e:	0f b6       	in	r0, 0x3f	; 63
    6780:	f8 94       	cli
    6782:	de bf       	out	0x3e, r29	; 62
    6784:	0f be       	out	0x3f, r0	; 63
    6786:	cd bf       	out	0x3d, r28	; 61
    6788:	0e 89       	ldd	r16, Y+22	; 0x16
    678a:	1f 89       	ldd	r17, Y+23	; 0x17
    678c:	86 e0       	ldi	r24, 0x06	; 6
    678e:	8c 83       	std	Y+4, r24	; 0x04
    6790:	1a 83       	std	Y+2, r17	; 0x02
    6792:	09 83       	std	Y+1, r16	; 0x01
    6794:	8f ef       	ldi	r24, 0xFF	; 255
    6796:	9f e7       	ldi	r25, 0x7F	; 127
    6798:	9e 83       	std	Y+6, r25	; 0x06
    679a:	8d 83       	std	Y+5, r24	; 0x05
    679c:	ae 01       	movw	r20, r28
    679e:	46 5e       	subi	r20, 0xE6	; 230
    67a0:	5f 4f       	sbci	r21, 0xFF	; 255
    67a2:	68 8d       	ldd	r22, Y+24	; 0x18
    67a4:	79 8d       	ldd	r23, Y+25	; 0x19
    67a6:	ce 01       	movw	r24, r28
    67a8:	01 96       	adiw	r24, 0x01	; 1
    67aa:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <vfprintf>
    67ae:	ef 81       	ldd	r30, Y+7	; 0x07
    67b0:	f8 85       	ldd	r31, Y+8	; 0x08
    67b2:	e0 0f       	add	r30, r16
    67b4:	f1 1f       	adc	r31, r17
    67b6:	10 82       	st	Z, r1
    67b8:	2e 96       	adiw	r28, 0x0e	; 14
    67ba:	0f b6       	in	r0, 0x3f	; 63
    67bc:	f8 94       	cli
    67be:	de bf       	out	0x3e, r29	; 62
    67c0:	0f be       	out	0x3f, r0	; 63
    67c2:	cd bf       	out	0x3d, r28	; 61
    67c4:	df 91       	pop	r29
    67c6:	cf 91       	pop	r28
    67c8:	1f 91       	pop	r17
    67ca:	0f 91       	pop	r16
    67cc:	08 95       	ret

000067ce <__ultoa_invert>:
    67ce:	fa 01       	movw	r30, r20
    67d0:	aa 27       	eor	r26, r26
    67d2:	28 30       	cpi	r18, 0x08	; 8
    67d4:	51 f1       	breq	.+84     	; 0x682a <__ultoa_invert+0x5c>
    67d6:	20 31       	cpi	r18, 0x10	; 16
    67d8:	81 f1       	breq	.+96     	; 0x683a <__ultoa_invert+0x6c>
    67da:	e8 94       	clt
    67dc:	6f 93       	push	r22
    67de:	6e 7f       	andi	r22, 0xFE	; 254
    67e0:	6e 5f       	subi	r22, 0xFE	; 254
    67e2:	7f 4f       	sbci	r23, 0xFF	; 255
    67e4:	8f 4f       	sbci	r24, 0xFF	; 255
    67e6:	9f 4f       	sbci	r25, 0xFF	; 255
    67e8:	af 4f       	sbci	r26, 0xFF	; 255
    67ea:	b1 e0       	ldi	r27, 0x01	; 1
    67ec:	3e d0       	rcall	.+124    	; 0x686a <__ultoa_invert+0x9c>
    67ee:	b4 e0       	ldi	r27, 0x04	; 4
    67f0:	3c d0       	rcall	.+120    	; 0x686a <__ultoa_invert+0x9c>
    67f2:	67 0f       	add	r22, r23
    67f4:	78 1f       	adc	r23, r24
    67f6:	89 1f       	adc	r24, r25
    67f8:	9a 1f       	adc	r25, r26
    67fa:	a1 1d       	adc	r26, r1
    67fc:	68 0f       	add	r22, r24
    67fe:	79 1f       	adc	r23, r25
    6800:	8a 1f       	adc	r24, r26
    6802:	91 1d       	adc	r25, r1
    6804:	a1 1d       	adc	r26, r1
    6806:	6a 0f       	add	r22, r26
    6808:	71 1d       	adc	r23, r1
    680a:	81 1d       	adc	r24, r1
    680c:	91 1d       	adc	r25, r1
    680e:	a1 1d       	adc	r26, r1
    6810:	20 d0       	rcall	.+64     	; 0x6852 <__ultoa_invert+0x84>
    6812:	09 f4       	brne	.+2      	; 0x6816 <__ultoa_invert+0x48>
    6814:	68 94       	set
    6816:	3f 91       	pop	r19
    6818:	2a e0       	ldi	r18, 0x0A	; 10
    681a:	26 9f       	mul	r18, r22
    681c:	11 24       	eor	r1, r1
    681e:	30 19       	sub	r19, r0
    6820:	30 5d       	subi	r19, 0xD0	; 208
    6822:	31 93       	st	Z+, r19
    6824:	de f6       	brtc	.-74     	; 0x67dc <__ultoa_invert+0xe>
    6826:	cf 01       	movw	r24, r30
    6828:	08 95       	ret
    682a:	46 2f       	mov	r20, r22
    682c:	47 70       	andi	r20, 0x07	; 7
    682e:	40 5d       	subi	r20, 0xD0	; 208
    6830:	41 93       	st	Z+, r20
    6832:	b3 e0       	ldi	r27, 0x03	; 3
    6834:	0f d0       	rcall	.+30     	; 0x6854 <__ultoa_invert+0x86>
    6836:	c9 f7       	brne	.-14     	; 0x682a <__ultoa_invert+0x5c>
    6838:	f6 cf       	rjmp	.-20     	; 0x6826 <__ultoa_invert+0x58>
    683a:	46 2f       	mov	r20, r22
    683c:	4f 70       	andi	r20, 0x0F	; 15
    683e:	40 5d       	subi	r20, 0xD0	; 208
    6840:	4a 33       	cpi	r20, 0x3A	; 58
    6842:	18 f0       	brcs	.+6      	; 0x684a <__ultoa_invert+0x7c>
    6844:	49 5d       	subi	r20, 0xD9	; 217
    6846:	31 fd       	sbrc	r19, 1
    6848:	40 52       	subi	r20, 0x20	; 32
    684a:	41 93       	st	Z+, r20
    684c:	02 d0       	rcall	.+4      	; 0x6852 <__ultoa_invert+0x84>
    684e:	a9 f7       	brne	.-22     	; 0x683a <__ultoa_invert+0x6c>
    6850:	ea cf       	rjmp	.-44     	; 0x6826 <__ultoa_invert+0x58>
    6852:	b4 e0       	ldi	r27, 0x04	; 4
    6854:	a6 95       	lsr	r26
    6856:	97 95       	ror	r25
    6858:	87 95       	ror	r24
    685a:	77 95       	ror	r23
    685c:	67 95       	ror	r22
    685e:	ba 95       	dec	r27
    6860:	c9 f7       	brne	.-14     	; 0x6854 <__ultoa_invert+0x86>
    6862:	00 97       	sbiw	r24, 0x00	; 0
    6864:	61 05       	cpc	r22, r1
    6866:	71 05       	cpc	r23, r1
    6868:	08 95       	ret
    686a:	9b 01       	movw	r18, r22
    686c:	ac 01       	movw	r20, r24
    686e:	0a 2e       	mov	r0, r26
    6870:	06 94       	lsr	r0
    6872:	57 95       	ror	r21
    6874:	47 95       	ror	r20
    6876:	37 95       	ror	r19
    6878:	27 95       	ror	r18
    687a:	ba 95       	dec	r27
    687c:	c9 f7       	brne	.-14     	; 0x6870 <__ultoa_invert+0xa2>
    687e:	62 0f       	add	r22, r18
    6880:	73 1f       	adc	r23, r19
    6882:	84 1f       	adc	r24, r20
    6884:	95 1f       	adc	r25, r21
    6886:	a0 1d       	adc	r26, r0
    6888:	08 95       	ret

0000688a <_exit>:
    688a:	f8 94       	cli

0000688c <__stop_program>:
    688c:	ff cf       	rjmp	.-2      	; 0x688c <__stop_program>
