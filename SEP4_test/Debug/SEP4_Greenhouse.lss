
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007f8  00800200  000075ec  00007680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000075ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001037  008009f8  008009f8  00007e78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007e78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d60  00000000  00000000  00007f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fac5  00000000  00000000  00008c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000041ab  00000000  00000000  00018739  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007d2e  00000000  00000000  0001c8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c58  00000000  00000000  00024614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004eef  00000000  00000000  0002726c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d3e0  00000000  00000000  0002c15b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c30  00000000  00000000  0003953b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__vector_12>
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ee 29 	jmp	0x53dc	; 0x53dc <__vector_25>
      68:	0c 94 40 2a 	jmp	0x5480	; 0x5480 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 84 2a 	jmp	0x5508	; 0x5508 <__vector_36>
      94:	0c 94 d6 2a 	jmp	0x55ac	; 0x55ac <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9b 30 	jmp	0x6136	; 0x6136 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 1a 2b 	jmp	0x5634	; 0x5634 <__vector_51>
      d0:	0c 94 6c 2b 	jmp	0x56d8	; 0x56d8 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b0 2b 	jmp	0x5760	; 0x5760 <__vector_54>
      dc:	0c 94 02 2c 	jmp	0x5804	; 0x5804 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9a 1e       	adc	r9, r26
      e6:	9a 1e       	adc	r9, r26
      e8:	9a 1e       	adc	r9, r26
      ea:	d1 1e       	adc	r13, r17
      ec:	d9 1e       	adc	r13, r25
      ee:	ee 1e       	adc	r14, r30
      f0:	9a 1e       	adc	r9, r26
      f2:	9a 1e       	adc	r9, r26
      f4:	d1 1e       	adc	r13, r17
      f6:	d9 1e       	adc	r13, r25
      f8:	bd 30       	cpi	r27, 0x0D	; 13
      fa:	2d 31       	cpi	r18, 0x1D	; 29
      fc:	2d 31       	cpi	r18, 0x1D	; 29
      fe:	2d 31       	cpi	r18, 0x1D	; 29
     100:	2d 31       	cpi	r18, 0x1D	; 29
     102:	2d 31       	cpi	r18, 0x1D	; 29
     104:	2d 31       	cpi	r18, 0x1D	; 29
     106:	2d 31       	cpi	r18, 0x1D	; 29
     108:	bd 30       	cpi	r27, 0x0D	; 13
     10a:	2d 31       	cpi	r18, 0x1D	; 29
     10c:	2d 31       	cpi	r18, 0x1D	; 29
     10e:	2d 31       	cpi	r18, 0x1D	; 29
     110:	2d 31       	cpi	r18, 0x1D	; 29
     112:	2d 31       	cpi	r18, 0x1D	; 29
     114:	2d 31       	cpi	r18, 0x1D	; 29
     116:	2d 31       	cpi	r18, 0x1D	; 29
     118:	bf 30       	cpi	r27, 0x0F	; 15
     11a:	2d 31       	cpi	r18, 0x1D	; 29
     11c:	2d 31       	cpi	r18, 0x1D	; 29
     11e:	2d 31       	cpi	r18, 0x1D	; 29
     120:	2d 31       	cpi	r18, 0x1D	; 29
     122:	2d 31       	cpi	r18, 0x1D	; 29
     124:	2d 31       	cpi	r18, 0x1D	; 29
     126:	2d 31       	cpi	r18, 0x1D	; 29
     128:	2d 31       	cpi	r18, 0x1D	; 29
     12a:	2d 31       	cpi	r18, 0x1D	; 29
     12c:	2d 31       	cpi	r18, 0x1D	; 29
     12e:	2d 31       	cpi	r18, 0x1D	; 29
     130:	2d 31       	cpi	r18, 0x1D	; 29
     132:	2d 31       	cpi	r18, 0x1D	; 29
     134:	2d 31       	cpi	r18, 0x1D	; 29
     136:	2d 31       	cpi	r18, 0x1D	; 29
     138:	bf 30       	cpi	r27, 0x0F	; 15
     13a:	2d 31       	cpi	r18, 0x1D	; 29
     13c:	2d 31       	cpi	r18, 0x1D	; 29
     13e:	2d 31       	cpi	r18, 0x1D	; 29
     140:	2d 31       	cpi	r18, 0x1D	; 29
     142:	2d 31       	cpi	r18, 0x1D	; 29
     144:	2d 31       	cpi	r18, 0x1D	; 29
     146:	2d 31       	cpi	r18, 0x1D	; 29
     148:	2d 31       	cpi	r18, 0x1D	; 29
     14a:	2d 31       	cpi	r18, 0x1D	; 29
     14c:	2d 31       	cpi	r18, 0x1D	; 29
     14e:	2d 31       	cpi	r18, 0x1D	; 29
     150:	2d 31       	cpi	r18, 0x1D	; 29
     152:	2d 31       	cpi	r18, 0x1D	; 29
     154:	2d 31       	cpi	r18, 0x1D	; 29
     156:	2d 31       	cpi	r18, 0x1D	; 29
     158:	29 31       	cpi	r18, 0x19	; 25
     15a:	2d 31       	cpi	r18, 0x1D	; 29
     15c:	2d 31       	cpi	r18, 0x1D	; 29
     15e:	2d 31       	cpi	r18, 0x1D	; 29
     160:	2d 31       	cpi	r18, 0x1D	; 29
     162:	2d 31       	cpi	r18, 0x1D	; 29
     164:	2d 31       	cpi	r18, 0x1D	; 29
     166:	2d 31       	cpi	r18, 0x1D	; 29
     168:	f4 30       	cpi	r31, 0x04	; 4
     16a:	2d 31       	cpi	r18, 0x1D	; 29
     16c:	2d 31       	cpi	r18, 0x1D	; 29
     16e:	2d 31       	cpi	r18, 0x1D	; 29
     170:	2d 31       	cpi	r18, 0x1D	; 29
     172:	2d 31       	cpi	r18, 0x1D	; 29
     174:	2d 31       	cpi	r18, 0x1D	; 29
     176:	2d 31       	cpi	r18, 0x1D	; 29
     178:	2d 31       	cpi	r18, 0x1D	; 29
     17a:	2d 31       	cpi	r18, 0x1D	; 29
     17c:	2d 31       	cpi	r18, 0x1D	; 29
     17e:	2d 31       	cpi	r18, 0x1D	; 29
     180:	2d 31       	cpi	r18, 0x1D	; 29
     182:	2d 31       	cpi	r18, 0x1D	; 29
     184:	2d 31       	cpi	r18, 0x1D	; 29
     186:	2d 31       	cpi	r18, 0x1D	; 29
     188:	e8 30       	cpi	r30, 0x08	; 8
     18a:	2d 31       	cpi	r18, 0x1D	; 29
     18c:	2d 31       	cpi	r18, 0x1D	; 29
     18e:	2d 31       	cpi	r18, 0x1D	; 29
     190:	2d 31       	cpi	r18, 0x1D	; 29
     192:	2d 31       	cpi	r18, 0x1D	; 29
     194:	2d 31       	cpi	r18, 0x1D	; 29
     196:	2d 31       	cpi	r18, 0x1D	; 29
     198:	0c 31       	cpi	r16, 0x1C	; 28

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 db 10 	call	0x21b6	; 0x21b6 <prvCheckTasksWaitingTermination>
     2a0:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	a5 d6       	rcall	.+3402   	; 0xff4 <vPortYield>
     2aa:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 17 1c 	call	0x382e	; 0x382e <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	19 e0       	ldi	r17, 0x09	; 9
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ec ee       	ldi	r30, 0xEC	; 236
     2e6:	f5 e7       	ldi	r31, 0x75	; 117
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a8 3f       	cpi	r26, 0xF8	; 248
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	2a e1       	ldi	r18, 0x1A	; 26
     2fa:	a8 ef       	ldi	r26, 0xF8	; 248
     2fc:	b9 e0       	ldi	r27, 0x09	; 9
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	af 32       	cpi	r26, 0x2F	; 47
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 89 22 	call	0x4512	; 0x4512 <main>
     30c:	0c 94 f4 3a 	jmp	0x75e8	; 0x75e8 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
// 	const TickType_t xFrequency = pdMS_TO_TICKS(10000); 
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 2c 12 	call	0x2458	; 0x2458 <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 42 14 	call	0x2884	; 0x2884 <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e1       	ldi	r20, 0x15	; 21
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <measureEventGroup>
     34e:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <measureEventGroup+0x1>
     352:	9b d3       	rcall	.+1846   	; 0xa8a <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e2       	ldi	r20, 0x2A	; 42
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <dataReadyEventGroup>
     36c:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <dataReadyEventGroup+0x1>
     370:	ec d2       	rcall	.+1496   	; 0x94a <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 72       	andi	r24, 0x2A	; 42
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 cd 20 	call	0x419a	; 0x419a <TempHumSensor_getTemp>
     38a:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <TempHumSensor_getHum>
     392:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <CO2_getPPM>
     39a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <set_CO2_ppm>
			
			
			if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     39e:	4a e0       	ldi	r20, 0x0A	; 10
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <configSemaphore>
     3aa:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <configSemaphore+0x1>
     3ae:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xQueueSemaphoreTake>
     3b2:	81 30       	cpi	r24, 0x01	; 1
				set_status(get_system_status());
     3b4:	79 f4       	brne	.+30     	; 0x3d4 <main_application_task+0xc2>
     3b6:	4b d0       	rcall	.+150    	; 0x44e <get_system_status>
     3b8:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <set_status>
				xSemaphoreGive(configSemaphore);
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <configSemaphore>
     3cc:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <configSemaphore+0x1>
     3d0:	0e 94 12 0a 	call	0x1424	; 0x1424 <xQueueGenericSend>
			}
			
			lora_driver_payload_t payload = get_lora_package(2);
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	ce 01       	movw	r24, r28
     3d8:	05 96       	adiw	r24, 0x05	; 5
     3da:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3de:	0f ef       	ldi	r16, 0xFF	; 255
     3e0:	1f ef       	ldi	r17, 0xFF	; 255
     3e2:	98 01       	movw	r18, r16
     3e4:	46 e1       	ldi	r20, 0x16	; 22
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	be 01       	movw	r22, r28
     3ea:	6b 5f       	subi	r22, 0xFB	; 251
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	80 91 21 1a 	lds	r24, 0x1A21	; 0x801a21 <uplinkMessageBufferHandle>
     3f2:	90 91 22 1a 	lds	r25, 0x1A22	; 0x801a22 <uplinkMessageBufferHandle+0x1>
     3f6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     3fa:	86 31       	cpi	r24, 0x16	; 22
     3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	99 cf       	rjmp	.-206    	; 0x332 <main_application_task+0x20>
				printf("Timed out.\n");
     400:	8f e6       	ldi	r24, 0x6F	; 111
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 37 3a 	call	0x746e	; 0x746e <puts>
     408:	94 cf       	rjmp	.-216    	; 0x332 <main_application_task+0x20>

0000040a <create_main_application_task>:



void main_application_task(void *pvParameters);

void create_main_application_task(UBaseType_t priority){
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
		
	xTaskCreate(
     410:	e1 2c       	mov	r14, r1
     412:	f1 2c       	mov	r15, r1
     414:	08 2f       	mov	r16, r24
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	40 ec       	ldi	r20, 0xC0	; 192
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	6a e7       	ldi	r22, 0x7A	; 122
     420:	72 e0       	ldi	r23, 0x02	; 2
     422:	89 e8       	ldi	r24, 0x89	; 137
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + priority 
	,  NULL );
	
}
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <set_system_status>:

void set_max_co2(uint16_t maxCO2){
	max_co2 = maxCO2;
}

void set_min_co2(uint16_t minCO2){
     432:	87 3f       	cpi	r24, 0xF7	; 247
     434:	30 f0       	brcs	.+12     	; 0x442 <set_system_status+0x10>
     436:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <__data_end>
     43a:	89 23       	and	r24, r25
     43c:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <__data_end>
     440:	08 95       	ret
     442:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <__data_end>
     446:	89 2b       	or	r24, r25
     448:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <__data_end>
     44c:	08 95       	ret

0000044e <get_system_status>:
     44e:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <__data_end>
     452:	08 95       	ret

00000454 <get_max_temperature>:
     454:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <max_temperature>
     458:	90 91 fe 09 	lds	r25, 0x09FE	; 0x8009fe <max_temperature+0x1>
     45c:	08 95       	ret

0000045e <set_max_temperature>:
     45e:	90 93 fe 09 	sts	0x09FE, r25	; 0x8009fe <max_temperature+0x1>
     462:	80 93 fd 09 	sts	0x09FD, r24	; 0x8009fd <max_temperature>
     466:	08 95       	ret

00000468 <get_max_humidity>:
     468:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <max_humidity>
     46c:	90 91 fc 09 	lds	r25, 0x09FC	; 0x8009fc <max_humidity+0x1>
     470:	08 95       	ret

00000472 <set_max_humidity>:
     472:	90 93 fc 09 	sts	0x09FC, r25	; 0x8009fc <max_humidity+0x1>
     476:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <max_humidity>
     47a:	08 95       	ret

0000047c <get_max_co2>:
     47c:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <max_co2>
     480:	90 91 fa 09 	lds	r25, 0x09FA	; 0x8009fa <max_co2+0x1>
     484:	08 95       	ret

00000486 <set_max_co2>:
     486:	90 93 fa 09 	sts	0x09FA, r25	; 0x8009fa <max_co2+0x1>
     48a:	80 93 f9 09 	sts	0x09F9, r24	; 0x8009f9 <max_co2>
     48e:	08 95       	ret

00000490 <setConfiguration>:
static uint16_t max_co2 = 0;
static uint16_t min_co2 = 0;
static uint8_t system_status = 0;


void setConfiguration(lora_driver_payload_t payload){
     490:	4f 92       	push	r4
     492:	5f 92       	push	r5
     494:	6f 92       	push	r6
     496:	7f 92       	push	r7
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	uint16_t newMaxHum = 0;
	uint16_t newMinHum = 0;
	uint16_t newMaxCO2 = 0;
	uint16_t newMinCO2 = 0;
	
	newMaxTemp = (payload.bytes[0] << 8 | payload.bytes[1]);
     4b4:	8e 89       	ldd	r24, Y+22	; 0x16
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	98 2f       	mov	r25, r24
     4ba:	88 27       	eor	r24, r24
     4bc:	2f 89       	ldd	r18, Y+23	; 0x17
     4be:	82 2b       	or	r24, r18
	newMinTemp = (payload.bytes[2] << 8 | payload.bytes[3]);
     4c0:	a8 8c       	ldd	r10, Y+24	; 0x18
     4c2:	b1 2c       	mov	r11, r1
     4c4:	ba 2c       	mov	r11, r10
     4c6:	aa 24       	eor	r10, r10
     4c8:	29 8d       	ldd	r18, Y+25	; 0x19
     4ca:	a2 2a       	or	r10, r18
	newMaxHum = (payload.bytes[4] << 8 | payload.bytes[5]);
     4cc:	6a 8c       	ldd	r6, Y+26	; 0x1a
     4ce:	71 2c       	mov	r7, r1
     4d0:	76 2c       	mov	r7, r6
     4d2:	66 24       	eor	r6, r6
     4d4:	2b 8d       	ldd	r18, Y+27	; 0x1b
     4d6:	62 2a       	or	r6, r18
	newMinHum = (payload.bytes[6] << 8 | payload.bytes[7]);
     4d8:	cc 8c       	ldd	r12, Y+28	; 0x1c
     4da:	d1 2c       	mov	r13, r1
     4dc:	dc 2c       	mov	r13, r12
     4de:	cc 24       	eor	r12, r12
     4e0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     4e2:	c2 2a       	or	r12, r18
	newMaxCO2 = (payload.bytes[8] << 8 | payload.bytes[9]);
     4e4:	0e 8d       	ldd	r16, Y+30	; 0x1e
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	10 2f       	mov	r17, r16
     4ea:	00 27       	eor	r16, r16
     4ec:	2f 8d       	ldd	r18, Y+31	; 0x1f
     4ee:	02 2b       	or	r16, r18
	newMinCO2 =(payload.bytes[10] << 8 | payload.bytes[11]);
     4f0:	e8 a0       	ldd	r14, Y+32	; 0x20
     4f2:	f1 2c       	mov	r15, r1
     4f4:	fe 2c       	mov	r15, r14
     4f6:	ee 24       	eor	r14, r14
     4f8:	29 a1       	ldd	r18, Y+33	; 0x21
     4fa:	e2 2a       	or	r14, r18
	
	set_max_temperature(newMaxTemp/10);
     4fc:	0f 2e       	mov	r0, r31
     4fe:	fa e0       	ldi	r31, 0x0A	; 10
     500:	8f 2e       	mov	r8, r31
     502:	91 2c       	mov	r9, r1
     504:	f0 2d       	mov	r31, r0
     506:	b4 01       	movw	r22, r8
     508:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <__divmodhi4>
     50c:	56 2e       	mov	r5, r22
     50e:	47 2e       	mov	r4, r23
     510:	86 2f       	mov	r24, r22
     512:	97 2f       	mov	r25, r23
     514:	a4 df       	rcall	.-184    	; 0x45e <set_max_temperature>
	set_min_temperature(newMinTemp/10);
     516:	c5 01       	movw	r24, r10
     518:	b4 01       	movw	r22, r8
     51a:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <__divmodhi4>
     51e:	96 2e       	mov	r9, r22
     520:	87 2e       	mov	r8, r23
	set_max_humidity(newMaxHum/10);
     522:	93 01       	movw	r18, r6
     524:	ad ec       	ldi	r26, 0xCD	; 205
     526:	bc ec       	ldi	r27, 0xCC	; 204
     528:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__umulhisi3>
     52c:	5c 01       	movw	r10, r24
     52e:	b6 94       	lsr	r11
     530:	a7 94       	ror	r10
     532:	b6 94       	lsr	r11
     534:	a7 94       	ror	r10
     536:	b6 94       	lsr	r11
     538:	a7 94       	ror	r10
     53a:	c5 01       	movw	r24, r10
     53c:	9a df       	rcall	.-204    	; 0x472 <set_max_humidity>
	set_min_humidity(newMinHum/10);
     53e:	96 01       	movw	r18, r12
     540:	ad ec       	ldi	r26, 0xCD	; 205
     542:	bc ec       	ldi	r27, 0xCC	; 204
     544:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__umulhisi3>
     548:	6c 01       	movw	r12, r24
     54a:	d6 94       	lsr	r13
     54c:	c7 94       	ror	r12
     54e:	d6 94       	lsr	r13
     550:	c7 94       	ror	r12
     552:	d6 94       	lsr	r13
     554:	c7 94       	ror	r12
	set_max_co2(newMaxCO2);
     556:	80 2f       	mov	r24, r16
     558:	91 2f       	mov	r25, r17
     55a:	95 df       	rcall	.-214    	; 0x486 <set_max_co2>
	set_min_co2(newMinCO2);
	
	printf("DOWNLINK CONF MIN/MAX, tmp: %d/%dC, hum: %d/%d%%, co2: %d/%dppm\n", newMaxTemp/10, newMinTemp/10, newMaxHum/10, newMinHum/10, newMaxCO2, newMinCO2);
     55c:	ff 92       	push	r15
     55e:	ef 92       	push	r14
     560:	1f 93       	push	r17
     562:	0f 93       	push	r16
     564:	df 92       	push	r13
     566:	cf 92       	push	r12
     568:	bf 92       	push	r11
     56a:	af 92       	push	r10
     56c:	8f 92       	push	r8
     56e:	9f 92       	push	r9
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	8a e8       	ldi	r24, 0x8A	; 138
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
}
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	bf 90       	pop	r11
     59c:	af 90       	pop	r10
     59e:	9f 90       	pop	r9
     5a0:	8f 90       	pop	r8
     5a2:	7f 90       	pop	r7
     5a4:	6f 90       	pop	r6
     5a6:	5f 90       	pop	r5
     5a8:	4f 90       	pop	r4
     5aa:	08 95       	ret

000005ac <lora_downlink_handler_task>:
	uint8_t xReceivedBytes = 0;
	
	for(;;){
		
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle, 
     5ac:	0f ef       	ldi	r16, 0xFF	; 255
     5ae:	1f ef       	ldi	r17, 0xFF	; 255
     5b0:	98 01       	movw	r18, r16
     5b2:	46 e1       	ldi	r20, 0x16	; 22
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	6f ef       	ldi	r22, 0xFF	; 255
     5b8:	79 e0       	ldi	r23, 0x09	; 9
     5ba:	80 91 23 1a 	lds	r24, 0x1A23	; 0x801a23 <downlinkMessageBufferHandle>
     5be:	90 91 24 1a 	lds	r25, 0x1A24	; 0x801a24 <downlinkMessageBufferHandle+0x1>
     5c2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xStreamBufferReceive>
		&_downlink_payload, 
		sizeof(lora_driver_payload_t), 
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     5c6:	88 23       	and	r24, r24
     5c8:	89 f3       	breq	.-30     	; 0x5ac <lora_downlink_handler_task>
			printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     5ca:	ef ef       	ldi	r30, 0xFF	; 255
     5cc:	f9 e0       	ldi	r31, 0x09	; 9
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	80 81       	ld	r24, Z
     5d2:	1f 92       	push	r1
     5d4:	9f 93       	push	r25
     5d6:	1f 92       	push	r1
     5d8:	8f 93       	push	r24
     5da:	8b ec       	ldi	r24, 0xCB	; 203
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
			
			if(configSemaphore != NULL){
     5e6:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <configSemaphore>
     5ea:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <configSemaphore+0x1>
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	b9 f2       	breq	.-82     	; 0x5ac <lora_downlink_handler_task>
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     5fe:	4a e0       	ldi	r20, 0x0A	; 10
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xQueueSemaphoreTake>
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	39 f5       	brne	.+78     	; 0x65c <lora_downlink_handler_task+0xb0>
					setConfiguration(_downlink_payload);
     60e:	8d b7       	in	r24, 0x3d	; 61
     610:	9e b7       	in	r25, 0x3e	; 62
     612:	46 97       	sbiw	r24, 0x16	; 22
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	9e bf       	out	0x3e, r25	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	8d bf       	out	0x3d, r24	; 61
     61e:	ad b7       	in	r26, 0x3d	; 61
     620:	be b7       	in	r27, 0x3e	; 62
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	86 e1       	ldi	r24, 0x16	; 22
     626:	ef ef       	ldi	r30, 0xFF	; 255
     628:	f9 e0       	ldi	r31, 0x09	; 9
     62a:	01 90       	ld	r0, Z+
     62c:	0d 92       	st	X+, r0
     62e:	8a 95       	dec	r24
     630:	e1 f7       	brne	.-8      	; 0x62a <lora_downlink_handler_task+0x7e>
     632:	2e df       	rcall	.-420    	; 0x490 <setConfiguration>
					xSemaphoreGive(configSemaphore);
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	a9 01       	movw	r20, r18
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <configSemaphore>
     644:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <configSemaphore+0x1>
     648:	ed d6       	rcall	.+3546   	; 0x1424 <xQueueGenericSend>
     64a:	8d b7       	in	r24, 0x3d	; 61
     64c:	9e b7       	in	r25, 0x3e	; 62
     64e:	46 96       	adiw	r24, 0x16	; 22
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	9e bf       	out	0x3e, r25	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	8d bf       	out	0x3d, r24	; 61
     65a:	a8 cf       	rjmp	.-176    	; 0x5ac <lora_downlink_handler_task>
				}
				else{
					printf("Couldn't obtain semaphore.\n");
     65c:	8d ef       	ldi	r24, 0xFD	; 253
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	0e 94 37 3a 	call	0x746e	; 0x746e <puts>
     664:	a3 cf       	rjmp	.-186    	; 0x5ac <lora_downlink_handler_task>

00000666 <create_lora_downlink_handler_task>:

void lora_downlink_handler_task(void *pvParameters);

static lora_driver_payload_t _downlink_payload;

void create_lora_downlink_handler_task(UBaseType_t priority){
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
		xTaskCreate(
     66c:	e1 2c       	mov	r14, r1
     66e:	f1 2c       	mov	r15, r1
     670:	08 2f       	mov	r16, r24
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	48 e8       	ldi	r20, 0x88	; 136
     678:	51 e0       	ldi	r21, 0x01	; 1
     67a:	68 e1       	ldi	r22, 0x18	; 24
     67c:	73 e0       	ldi	r23, 0x03	; 3
     67e:	86 ed       	ldi	r24, 0xD6	; 214
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskCreate>
		,  "LRHandDownlink"
		,  configMINIMAL_STACK_SIZE+200
		,  NULL
		,  tskIDLE_PRIORITY + priority
		,  NULL );
}
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	08 95       	ret

0000068e <create_actions_controller_task>:
void actions_controller_task(void *pvParameters);
void temperature_action(int16_t currentTemp, int16_t thresholdTemp);
void humidity_action(uint16_t currentHum, uint16_t thresholdHum);
void co2_action(uint16_t currentCO2, uint16_t thresholdCO2);

void create_actions_controller_task(UBaseType_t priority){
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
	
	DDRA = 0xFF;
     694:	9f ef       	ldi	r25, 0xFF	; 255
     696:	91 b9       	out	0x01, r25	; 1
	PORTA = 0xFF;
     698:	92 b9       	out	0x02, r25	; 2
	
	xTaskCreate(
     69a:	e1 2c       	mov	r14, r1
     69c:	f1 2c       	mov	r15, r1
     69e:	08 2f       	mov	r16, r24
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 ec       	ldi	r20, 0xC0	; 192
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	67 e2       	ldi	r22, 0x27	; 39
     6aa:	73 e0       	ldi	r23, 0x03	; 3
     6ac:	84 ea       	ldi	r24, 0xA4	; 164
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskCreate>
	,  "FanController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <temperature_action>:
			}	
		}
	}
}

void temperature_action(int16_t currentTemp, int16_t thresholdTemp){
     6bc:	9b 01       	movw	r18, r22
	if(currentTemp/10 > thresholdTemp){
     6be:	6a e0       	ldi	r22, 0x0A	; 10
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <__divmodhi4>
     6c6:	26 17       	cp	r18, r22
     6c8:	37 07       	cpc	r19, r23
     6ca:	54 f4       	brge	.+20     	; 0x6e0 <temperature_action+0x24>
		servo_set_position(0, 100);
     6cc:	64 e6       	ldi	r22, 0x64	; 100
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 26 21 	call	0x424c	; 0x424c <servo_set_position>
		PORTA &= ~(1 << 0);
     6d4:	82 b1       	in	r24, 0x02	; 2
     6d6:	8e 7f       	andi	r24, 0xFE	; 254
     6d8:	82 b9       	out	0x02, r24	; 2
		set_system_status(TEMPERATURE_ACTION_ON);
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	aa ce       	rjmp	.-684    	; 0x432 <set_system_status>
     6de:	08 95       	ret
	}
	else{
		servo_set_position(0, -100);
     6e0:	6c e9       	ldi	r22, 0x9C	; 156
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	0e 94 26 21 	call	0x424c	; 0x424c <servo_set_position>
		PORTA |= (1 << 0);
     6e8:	82 b1       	in	r24, 0x02	; 2
     6ea:	81 60       	ori	r24, 0x01	; 1
     6ec:	82 b9       	out	0x02, r24	; 2
		set_system_status(TEMPERATURE_ACTION_OFF);
     6ee:	8e ef       	ldi	r24, 0xFE	; 254
     6f0:	a0 ce       	rjmp	.-704    	; 0x432 <set_system_status>
     6f2:	08 95       	ret

000006f4 <humidity_action>:
	}
}
void humidity_action(uint16_t currentHum, uint16_t thresholdHum){
     6f4:	ab 01       	movw	r20, r22
	if(currentHum/10 > thresholdHum){
     6f6:	9c 01       	movw	r18, r24
     6f8:	ad ec       	ldi	r26, 0xCD	; 205
     6fa:	bc ec       	ldi	r27, 0xCC	; 204
     6fc:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__umulhisi3>
     700:	96 95       	lsr	r25
     702:	87 95       	ror	r24
     704:	96 95       	lsr	r25
     706:	87 95       	ror	r24
     708:	96 95       	lsr	r25
     70a:	87 95       	ror	r24
     70c:	48 17       	cp	r20, r24
     70e:	59 07       	cpc	r21, r25
     710:	30 f4       	brcc	.+12     	; 0x71e <humidity_action+0x2a>
		PORTA &= ~(1 << 1);
     712:	82 b1       	in	r24, 0x02	; 2
     714:	8d 7f       	andi	r24, 0xFD	; 253
     716:	82 b9       	out	0x02, r24	; 2
		set_system_status(HUMIDITY_ACTION_ON);
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	8b ce       	rjmp	.-746    	; 0x432 <set_system_status>
     71c:	08 95       	ret
	}
	else{
		PORTA |= (1 << 1);
     71e:	82 b1       	in	r24, 0x02	; 2
     720:	82 60       	ori	r24, 0x02	; 2
     722:	82 b9       	out	0x02, r24	; 2
		set_system_status(HUMIDITY_ACTION_OFF);
     724:	8d ef       	ldi	r24, 0xFD	; 253
     726:	85 ce       	rjmp	.-758    	; 0x432 <set_system_status>
     728:	08 95       	ret

0000072a <co2_action>:
	}
}
void co2_action(uint16_t currentCO2, uint16_t thresholdCO2){
	if(currentCO2 > thresholdCO2){
     72a:	68 17       	cp	r22, r24
     72c:	79 07       	cpc	r23, r25
     72e:	30 f4       	brcc	.+12     	; 0x73c <co2_action+0x12>
		PORTA &= ~(1 << 2);
     730:	82 b1       	in	r24, 0x02	; 2
     732:	8b 7f       	andi	r24, 0xFB	; 251
     734:	82 b9       	out	0x02, r24	; 2
		set_system_status(CO2_ACTION_ON);
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	7c ce       	rjmp	.-776    	; 0x432 <set_system_status>
     73a:	08 95       	ret
	}
	else{
		PORTA |= (1 << 2);
     73c:	82 b1       	in	r24, 0x02	; 2
     73e:	84 60       	ori	r24, 0x04	; 4
     740:	82 b9       	out	0x02, r24	; 2
		set_system_status(CO2_ACTION_OFF);
     742:	8b ef       	ldi	r24, 0xFB	; 251
     744:	76 ce       	rjmp	.-788    	; 0x432 <set_system_status>
     746:	08 95       	ret

00000748 <actions_controller_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void actions_controller_task(void *pvParameters) {
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	00 d0       	rcall	.+0      	; 0x74e <actions_controller_task+0x6>
     74e:	1f 92       	push	r1
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
	uint16_t thresholdCO2 = 0;
	float currentLight = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(60000); 
	xLastWakeTime = xTaskGetTickCount();
     754:	0e 94 2c 12 	call	0x2458	; 0x2458 <xTaskGetTickCount>
     758:	69 83       	std	Y+1, r22	; 0x01
     75a:	7a 83       	std	Y+2, r23	; 0x02
     75c:	8b 83       	std	Y+3, r24	; 0x03
     75e:	9c 83       	std	Y+4, r25	; 0x04
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
	uint16_t currentHumidity = 0;
	uint16_t thresholdHumidity = 0;
	uint16_t currentCO2 = 0;
	uint16_t thresholdCO2 = 0;
     760:	61 2c       	mov	r6, r1
     762:	71 2c       	mov	r7, r1
void actions_controller_task(void *pvParameters) {
	
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
	uint16_t currentHumidity = 0;
	uint16_t thresholdHumidity = 0;
     764:	81 2c       	mov	r8, r1
     766:	91 2c       	mov	r9, r1
}

void actions_controller_task(void *pvParameters) {
	
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
     768:	a1 2c       	mov	r10, r1
     76a:	b1 2c       	mov	r11, r1
	const TickType_t xFrequency = pdMS_TO_TICKS(60000); 
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     76c:	48 e8       	ldi	r20, 0x88	; 136
     76e:	5e e0       	ldi	r21, 0x0E	; 14
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	0e 94 42 14 	call	0x2884	; 0x2884 <xTaskDelayUntil>
		

		if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     77c:	4a e0       	ldi	r20, 0x0A	; 10
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <configSemaphore>
     788:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <configSemaphore+0x1>
     78c:	c5 d7       	rcall	.+3978   	; 0x1718 <xQueueSemaphoreTake>
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	89 f4       	brne	.+34     	; 0x7b4 <actions_controller_task+0x6c>
			thresholdTemperature = get_max_temperature();
     792:	60 de       	rcall	.-832    	; 0x454 <get_max_temperature>
     794:	5c 01       	movw	r10, r24
			thresholdHumidity = get_max_humidity();
     796:	68 de       	rcall	.-816    	; 0x468 <get_max_humidity>
     798:	4c 01       	movw	r8, r24
			thresholdCO2 = get_max_co2();
     79a:	70 de       	rcall	.-800    	; 0x47c <get_max_co2>
     79c:	3c 01       	movw	r6, r24
     79e:	00 e0       	ldi	r16, 0x00	; 0
			xSemaphoreGive(configSemaphore);
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	a9 01       	movw	r20, r18
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <configSemaphore>
     7ae:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <configSemaphore+0x1>
     7b2:	38 d6       	rcall	.+3184   	; 0x1424 <xQueueGenericSend>
     7b4:	45 e1       	ldi	r20, 0x15	; 21
			}
			
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);		
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <measureEventGroup>
     7c0:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <measureEventGroup+0x1>
     7c4:	62 d1       	rcall	.+708    	; 0xa8a <xEventGroupSetBits>
     7c6:	cc 24       	eor	r12, r12
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     7c8:	ca 94       	dec	r12
     7ca:	dc 2c       	mov	r13, r12
     7cc:	76 01       	movw	r14, r12
     7ce:	01 e0       	ldi	r16, 0x01	; 1
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	4a e2       	ldi	r20, 0x2A	; 42
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <dataReadyEventGroup>
     7de:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <dataReadyEventGroup+0x1>
     7e2:	b3 d0       	rcall	.+358    	; 0x94a <xEventGroupWaitBits>
     7e4:	dc 01       	movw	r26, r24
				
		if (uxBits&(ALL_READY_BITS)){
     7e6:	cb 01       	movw	r24, r22
     7e8:	8a 72       	andi	r24, 0x2A	; 42
     7ea:	99 27       	eor	r25, r25
     7ec:	aa 27       	eor	r26, r26
     7ee:	bb 27       	eor	r27, r27
     7f0:	89 2b       	or	r24, r25
     7f2:	8a 2b       	or	r24, r26
     7f4:	8b 2b       	or	r24, r27
     7f6:	09 f4       	brne	.+2      	; 0x7fa <actions_controller_task+0xb2>
     7f8:	b9 cf       	rjmp	.-142    	; 0x76c <actions_controller_task+0x24>
     7fa:	0e 94 cd 20 	call	0x419a	; 0x419a <TempHumSensor_getTemp>
			currentTemperature = TempHumSensor_getTemp();
     7fe:	7c 01       	movw	r14, r24
     800:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <TempHumSensor_getHum>
			currentHumidity = TempHumSensor_getHum();
     804:	8c 01       	movw	r16, r24
     806:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <CO2_getPPM>
			currentCO2 = CO2_getPPM();
     80a:	c8 2e       	mov	r12, r24
     80c:	d9 2e       	mov	r13, r25
     80e:	0e 94 40 20 	call	0x4080	; 0x4080 <light_sensor_get_lux>
			currentLight = light_sensor_get_lux();
     812:	9f 93       	push	r25
			printf("CURR/THRS: tmp %d/%dC, hum %d/%d%%, co2 %d/%dppm, (light %5.2flux)\n", 
     814:	8f 93       	push	r24
     816:	7f 93       	push	r23
     818:	6f 93       	push	r22
     81a:	7f 92       	push	r7
     81c:	6f 92       	push	r6
     81e:	df 92       	push	r13
     820:	cf 92       	push	r12
     822:	9f 92       	push	r9
     824:	8f 92       	push	r8
     826:	98 01       	movw	r18, r16
     828:	ad ec       	ldi	r26, 0xCD	; 205
     82a:	bc ec       	ldi	r27, 0xCC	; 204
     82c:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <__umulhisi3>
     830:	96 95       	lsr	r25
     832:	87 95       	ror	r24
     834:	96 95       	lsr	r25
     836:	87 95       	ror	r24
     838:	96 95       	lsr	r25
     83a:	87 95       	ror	r24
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	bf 92       	push	r11
     842:	af 92       	push	r10
     844:	c7 01       	movw	r24, r14
     846:	6a e0       	ldi	r22, 0x0A	; 10
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <__divmodhi4>
     84e:	7f 93       	push	r23
     850:	6f 93       	push	r22
     852:	85 e3       	ldi	r24, 0x35	; 53
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
     85e:	0f b6       	in	r0, 0x3f	; 63
			currentTemperature/10, thresholdTemperature, currentHumidity/10, thresholdHumidity, currentCO2, thresholdCO2, currentLight);
			
			if(!(thresholdTemperature == 0 && thresholdHumidity == 0 && thresholdCO2 == 0)){
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	a1 14       	cp	r10, r1
     86a:	b1 04       	cpc	r11, r1
     86c:	31 f4       	brne	.+12     	; 0x87a <actions_controller_task+0x132>
     86e:	81 14       	cp	r8, r1
     870:	91 04       	cpc	r9, r1
     872:	19 f4       	brne	.+6      	; 0x87a <actions_controller_task+0x132>
     874:	61 14       	cp	r6, r1
     876:	71 04       	cpc	r7, r1
     878:	79 f1       	breq	.+94     	; 0x8d8 <actions_controller_task+0x190>
     87a:	4a e0       	ldi	r20, 0x0A	; 10
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <configSemaphore>
     886:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <configSemaphore+0x1>
     88a:	46 d7       	rcall	.+3724   	; 0x1718 <xQueueSemaphoreTake>
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	09 f0       	breq	.+2      	; 0x892 <actions_controller_task+0x14a>
					temperature_action(currentTemperature, thresholdTemperature);
     890:	6d cf       	rjmp	.-294    	; 0x76c <actions_controller_task+0x24>
     892:	b5 01       	movw	r22, r10
					humidity_action(currentHumidity, thresholdHumidity);
     894:	c7 01       	movw	r24, r14
     896:	12 df       	rcall	.-476    	; 0x6bc <temperature_action>
     898:	b4 01       	movw	r22, r8
     89a:	c8 01       	movw	r24, r16
					co2_action(currentCO2, thresholdCO2);
     89c:	2b df       	rcall	.-426    	; 0x6f4 <humidity_action>
     89e:	b3 01       	movw	r22, r6
     8a0:	8c 2d       	mov	r24, r12
     8a2:	9d 2d       	mov	r25, r13
     8a4:	42 df       	rcall	.-380    	; 0x72a <co2_action>
					printf("status: %x\n", get_system_status());
     8a6:	d3 dd       	rcall	.-1114   	; 0x44e <get_system_status>
     8a8:	1f 92       	push	r1
     8aa:	8f 93       	push	r24
     8ac:	89 e7       	ldi	r24, 0x79	; 121
     8ae:	93 e0       	ldi	r25, 0x03	; 3
     8b0:	9f 93       	push	r25
     8b2:	8f 93       	push	r24
     8b4:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
					xSemaphoreGive(configSemaphore);
     8b8:	00 e0       	ldi	r16, 0x00	; 0
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	a9 01       	movw	r20, r18
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <configSemaphore>
     8c8:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <configSemaphore+0x1>
     8cc:	ab d5       	rcall	.+2902   	; 0x1424 <xQueueGenericSend>
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	4a cf       	rjmp	.-364    	; 0x76c <actions_controller_task+0x24>
     8d8:	85 e8       	ldi	r24, 0x85	; 133
				}
			}
			else{
				printf("No config yet.\n");
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 37 3a 	call	0x746e	; 0x746e <puts>
     8e0:	45 cf       	rjmp	.-374    	; 0x76c <actions_controller_task+0x24>

000008e2 <prvTestWaitCondition>:
     8e2:	0f 93       	push	r16
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     8e4:	01 11       	cpse	r16, r1
     8e6:	0c c0       	rjmp	.+24     	; 0x900 <prvTestWaitCondition+0x1e>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	82 23       	and	r24, r18
     8ee:	93 23       	and	r25, r19
     8f0:	a4 23       	and	r26, r20
     8f2:	b5 23       	and	r27, r21
     8f4:	89 2b       	or	r24, r25
     8f6:	8a 2b       	or	r24, r26
     8f8:	8b 2b       	or	r24, r27
     8fa:	79 f4       	brne	.+30     	; 0x91a <prvTestWaitCondition+0x38>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	10 c0       	rjmp	.+32     	; 0x920 <prvTestWaitCondition+0x3e>
     900:	dc 01       	movw	r26, r24
     902:	cb 01       	movw	r24, r22
     904:	82 23       	and	r24, r18
     906:	93 23       	and	r25, r19
     908:	a4 23       	and	r26, r20
     90a:	b5 23       	and	r27, r21
     90c:	28 17       	cp	r18, r24
     90e:	39 07       	cpc	r19, r25
     910:	4a 07       	cpc	r20, r26
     912:	5b 07       	cpc	r21, r27
     914:	21 f0       	breq	.+8      	; 0x91e <prvTestWaitCondition+0x3c>
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	03 c0       	rjmp	.+6      	; 0x920 <prvTestWaitCondition+0x3e>
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	01 c0       	rjmp	.+2      	; 0x920 <prvTestWaitCondition+0x3e>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <xEventGroupCreate>:
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	8f e0       	ldi	r24, 0x0F	; 15
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	af d1       	rcall	.+862    	; 0xc8c <pvPortMalloc>
     92e:	ec 01       	movw	r28, r24
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	39 f0       	breq	.+14     	; 0x942 <xEventGroupCreate+0x1e>
     934:	fc 01       	movw	r30, r24
     936:	11 92       	st	Z+, r1
     938:	11 92       	st	Z+, r1
     93a:	11 92       	st	Z+, r1
     93c:	11 92       	st	Z+, r1
     93e:	cf 01       	movw	r24, r30
     940:	8b d2       	rcall	.+1302   	; 0xe58 <vListInitialise>
     942:	ce 01       	movw	r24, r28
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <xEventGroupWaitBits>:
     94a:	2f 92       	push	r2
     94c:	3f 92       	push	r3
     94e:	4f 92       	push	r4
     950:	5f 92       	push	r5
     952:	6f 92       	push	r6
     954:	7f 92       	push	r7
     956:	8f 92       	push	r8
     958:	9f 92       	push	r9
     95a:	af 92       	push	r10
     95c:	bf 92       	push	r11
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
     970:	4a 01       	movw	r8, r20
     972:	5b 01       	movw	r10, r22
     974:	62 2e       	mov	r6, r18
     976:	70 2e       	mov	r7, r16
     978:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskSuspendAll>
     97c:	28 80       	ld	r2, Y
     97e:	39 80       	ldd	r3, Y+1	; 0x01
     980:	4a 80       	ldd	r4, Y+2	; 0x02
     982:	5b 80       	ldd	r5, Y+3	; 0x03
     984:	a5 01       	movw	r20, r10
     986:	94 01       	movw	r18, r8
     988:	c2 01       	movw	r24, r4
     98a:	b1 01       	movw	r22, r2
     98c:	aa df       	rcall	.-172    	; 0x8e2 <prvTestWaitCondition>
     98e:	88 23       	and	r24, r24
     990:	a1 f0       	breq	.+40     	; 0x9ba <xEventGroupWaitBits+0x70>
     992:	66 20       	and	r6, r6
     994:	89 f1       	breq	.+98     	; 0x9f8 <xEventGroupWaitBits+0xae>
     996:	d5 01       	movw	r26, r10
     998:	c4 01       	movw	r24, r8
     99a:	80 95       	com	r24
     99c:	90 95       	com	r25
     99e:	a0 95       	com	r26
     9a0:	b0 95       	com	r27
     9a2:	82 21       	and	r24, r2
     9a4:	93 21       	and	r25, r3
     9a6:	a4 21       	and	r26, r4
     9a8:	b5 21       	and	r27, r5
     9aa:	88 83       	st	Y, r24
     9ac:	99 83       	std	Y+1, r25	; 0x01
     9ae:	aa 83       	std	Y+2, r26	; 0x02
     9b0:	bb 83       	std	Y+3, r27	; 0x03
     9b2:	c1 2c       	mov	r12, r1
     9b4:	d1 2c       	mov	r13, r1
     9b6:	76 01       	movw	r14, r12
     9b8:	22 c0       	rjmp	.+68     	; 0x9fe <xEventGroupWaitBits+0xb4>
     9ba:	c1 14       	cp	r12, r1
     9bc:	d1 04       	cpc	r13, r1
     9be:	e1 04       	cpc	r14, r1
     9c0:	f1 04       	cpc	r15, r1
     9c2:	e9 f0       	breq	.+58     	; 0x9fe <xEventGroupWaitBits+0xb4>
     9c4:	61 10       	cpse	r6, r1
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <xEventGroupWaitBits+0x86>
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	ba 01       	movw	r22, r20
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <xEventGroupWaitBits+0x8e>
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	71 e0       	ldi	r23, 0x01	; 1
     9d8:	71 10       	cpse	r7, r1
     9da:	74 60       	ori	r23, 0x04	; 4
     9dc:	48 29       	or	r20, r8
     9de:	59 29       	or	r21, r9
     9e0:	6a 29       	or	r22, r10
     9e2:	7b 29       	or	r23, r11
     9e4:	97 01       	movw	r18, r14
     9e6:	86 01       	movw	r16, r12
     9e8:	ce 01       	movw	r24, r28
     9ea:	04 96       	adiw	r24, 0x04	; 4
     9ec:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <vTaskPlaceOnUnorderedEventList>
     9f0:	21 2c       	mov	r2, r1
     9f2:	31 2c       	mov	r3, r1
     9f4:	21 01       	movw	r4, r2
     9f6:	03 c0       	rjmp	.+6      	; 0x9fe <xEventGroupWaitBits+0xb4>
     9f8:	c1 2c       	mov	r12, r1
     9fa:	d1 2c       	mov	r13, r1
     9fc:	76 01       	movw	r14, r12
     9fe:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>
     a02:	cd 28       	or	r12, r13
     a04:	ce 28       	or	r12, r14
     a06:	cf 28       	or	r12, r15
     a08:	59 f1       	breq	.+86     	; 0xa60 <xEventGroupWaitBits+0x116>
     a0a:	81 11       	cpse	r24, r1
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <xEventGroupWaitBits+0xc6>
     a0e:	f2 d2       	rcall	.+1508   	; 0xff4 <vPortYield>
     a10:	0e 94 00 19 	call	0x3200	; 0x3200 <uxTaskResetEventItemValue>
     a14:	6b 01       	movw	r12, r22
     a16:	7c 01       	movw	r14, r24
     a18:	91 fd       	sbrc	r25, 1
     a1a:	1f c0       	rjmp	.+62     	; 0xa5a <xEventGroupWaitBits+0x110>
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	0f 92       	push	r0
     a22:	c8 80       	ld	r12, Y
     a24:	d9 80       	ldd	r13, Y+1	; 0x01
     a26:	ea 80       	ldd	r14, Y+2	; 0x02
     a28:	fb 80       	ldd	r15, Y+3	; 0x03
     a2a:	07 2d       	mov	r16, r7
     a2c:	a5 01       	movw	r20, r10
     a2e:	94 01       	movw	r18, r8
     a30:	c7 01       	movw	r24, r14
     a32:	b6 01       	movw	r22, r12
     a34:	56 df       	rcall	.-340    	; 0x8e2 <prvTestWaitCondition>
     a36:	88 23       	and	r24, r24
     a38:	71 f0       	breq	.+28     	; 0xa56 <xEventGroupWaitBits+0x10c>
     a3a:	66 20       	and	r6, r6
     a3c:	61 f0       	breq	.+24     	; 0xa56 <xEventGroupWaitBits+0x10c>
     a3e:	80 94       	com	r8
     a40:	90 94       	com	r9
     a42:	a0 94       	com	r10
     a44:	b0 94       	com	r11
     a46:	8c 20       	and	r8, r12
     a48:	9d 20       	and	r9, r13
     a4a:	ae 20       	and	r10, r14
     a4c:	bf 20       	and	r11, r15
     a4e:	88 82       	st	Y, r8
     a50:	99 82       	std	Y+1, r9	; 0x01
     a52:	aa 82       	std	Y+2, r10	; 0x02
     a54:	bb 82       	std	Y+3, r11	; 0x03
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	16 01       	movw	r2, r12
     a5c:	27 01       	movw	r4, r14
     a5e:	55 24       	eor	r5, r5
     a60:	c2 01       	movw	r24, r4
     a62:	b1 01       	movw	r22, r2
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	9f 90       	pop	r9
     a7a:	8f 90       	pop	r8
     a7c:	7f 90       	pop	r7
     a7e:	6f 90       	pop	r6
     a80:	5f 90       	pop	r5
     a82:	4f 90       	pop	r4
     a84:	3f 90       	pop	r3
     a86:	2f 90       	pop	r2
     a88:	08 95       	ret

00000a8a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     a8a:	4f 92       	push	r4
     a8c:	5f 92       	push	r5
     a8e:	6f 92       	push	r6
     a90:	7f 92       	push	r7
     a92:	af 92       	push	r10
     a94:	bf 92       	push	r11
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	ec 01       	movw	r28, r24
     aa8:	6a 01       	movw	r12, r20
     aaa:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     aac:	8c 01       	movw	r16, r24
     aae:	09 5f       	subi	r16, 0xF9	; 249
     ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     ab2:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     ab6:	eb 85       	ldd	r30, Y+11	; 0x0b
     ab8:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     aba:	88 81       	ld	r24, Y
     abc:	99 81       	ldd	r25, Y+1	; 0x01
     abe:	aa 81       	ldd	r26, Y+2	; 0x02
     ac0:	bb 81       	ldd	r27, Y+3	; 0x03
     ac2:	c8 2a       	or	r12, r24
     ac4:	d9 2a       	or	r13, r25
     ac6:	ea 2a       	or	r14, r26
     ac8:	fb 2a       	or	r15, r27
     aca:	c8 82       	st	Y, r12
     acc:	d9 82       	std	Y+1, r13	; 0x01
     ace:	ea 82       	std	Y+2, r14	; 0x02
     ad0:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     ad2:	c1 2c       	mov	r12, r1
     ad4:	d1 2c       	mov	r13, r1
     ad6:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     ad8:	3d c0       	rjmp	.+122    	; 0xb54 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     ada:	a4 80       	ldd	r10, Z+4	; 0x04
     adc:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	a2 81       	ldd	r26, Z+2	; 0x02
     ae4:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     ae6:	ac 01       	movw	r20, r24
     ae8:	bd 01       	movw	r22, r26
     aea:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     aec:	b2 fd       	sbrc	r27, 2
     aee:	0e c0       	rjmp	.+28     	; 0xb0c <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     af0:	48 80       	ld	r4, Y
     af2:	59 80       	ldd	r5, Y+1	; 0x01
     af4:	6a 80       	ldd	r6, Y+2	; 0x02
     af6:	7b 80       	ldd	r7, Y+3	; 0x03
     af8:	44 22       	and	r4, r20
     afa:	55 22       	and	r5, r21
     afc:	66 22       	and	r6, r22
     afe:	77 22       	and	r7, r23
     b00:	45 28       	or	r4, r5
     b02:	46 28       	or	r4, r6
     b04:	47 28       	or	r4, r7
     b06:	89 f4       	brne	.+34     	; 0xb2a <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	12 c0       	rjmp	.+36     	; 0xb30 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     b0c:	48 80       	ld	r4, Y
     b0e:	59 80       	ldd	r5, Y+1	; 0x01
     b10:	6a 80       	ldd	r6, Y+2	; 0x02
     b12:	7b 80       	ldd	r7, Y+3	; 0x03
     b14:	44 22       	and	r4, r20
     b16:	55 22       	and	r5, r21
     b18:	66 22       	and	r6, r22
     b1a:	77 22       	and	r7, r23
     b1c:	44 15       	cp	r20, r4
     b1e:	55 05       	cpc	r21, r5
     b20:	66 05       	cpc	r22, r6
     b22:	77 05       	cpc	r23, r7
     b24:	21 f0       	breq	.+8      	; 0xb2e <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     b2a:	21 e0       	ldi	r18, 0x01	; 1
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     b2e:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     b30:	22 23       	and	r18, r18
     b32:	71 f0       	breq	.+28     	; 0xb50 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     b34:	b0 ff       	sbrs	r27, 0
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     b38:	c4 2a       	or	r12, r20
     b3a:	d5 2a       	or	r13, r21
     b3c:	e6 2a       	or	r14, r22
     b3e:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     b40:	48 81       	ld	r20, Y
     b42:	59 81       	ldd	r21, Y+1	; 0x01
     b44:	6a 81       	ldd	r22, Y+2	; 0x02
     b46:	7b 81       	ldd	r23, Y+3	; 0x03
     b48:	72 60       	ori	r23, 0x02	; 2
     b4a:	cf 01       	movw	r24, r30
     b4c:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b50:	ea 2d       	mov	r30, r10
     b52:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     b54:	e0 17       	cp	r30, r16
     b56:	f1 07       	cpc	r31, r17
     b58:	09 f0       	breq	.+2      	; 0xb5c <xEventGroupSetBits+0xd2>
     b5a:	bf cf       	rjmp	.-130    	; 0xada <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     b5c:	c0 94       	com	r12
     b5e:	d0 94       	com	r13
     b60:	e0 94       	com	r14
     b62:	f0 94       	com	r15
     b64:	88 81       	ld	r24, Y
     b66:	99 81       	ldd	r25, Y+1	; 0x01
     b68:	aa 81       	ldd	r26, Y+2	; 0x02
     b6a:	bb 81       	ldd	r27, Y+3	; 0x03
     b6c:	c8 22       	and	r12, r24
     b6e:	d9 22       	and	r13, r25
     b70:	ea 22       	and	r14, r26
     b72:	fb 22       	and	r15, r27
     b74:	c8 82       	st	Y, r12
     b76:	d9 82       	std	Y+1, r13	; 0x01
     b78:	ea 82       	std	Y+2, r14	; 0x02
     b7a:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     b7c:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     b80:	68 81       	ld	r22, Y
     b82:	79 81       	ldd	r23, Y+1	; 0x01
     b84:	8a 81       	ldd	r24, Y+2	; 0x02
     b86:	9b 81       	ldd	r25, Y+3	; 0x03
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	7f 90       	pop	r7
     b9e:	6f 90       	pop	r6
     ba0:	5f 90       	pop	r5
     ba2:	4f 90       	pop	r4
     ba4:	08 95       	ret

00000ba6 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     ba6:	e1 e2       	ldi	r30, 0x21	; 33
     ba8:	fa e0       	ldi	r31, 0x0A	; 10
     baa:	a5 e2       	ldi	r26, 0x25	; 37
     bac:	ba e0       	ldi	r27, 0x0A	; 10
     bae:	b1 83       	std	Z+1, r27	; 0x01
     bb0:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     bb2:	13 82       	std	Z+3, r1	; 0x03
     bb4:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     bb6:	ed ec       	ldi	r30, 0xCD	; 205
     bb8:	f7 e1       	ldi	r31, 0x17	; 23
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     bba:	f0 93 20 0a 	sts	0x0A20, r31	; 0x800a20 <pxEnd+0x1>
     bbe:	e0 93 1f 0a 	sts	0x0A1F, r30	; 0x800a1f <pxEnd>
    pxEnd->xBlockSize = 0;
     bc2:	13 82       	std	Z+3, r1	; 0x03
     bc4:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     bc6:	11 82       	std	Z+1, r1	; 0x01
     bc8:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     bca:	88 ea       	ldi	r24, 0xA8	; 168
     bcc:	9d e0       	ldi	r25, 0x0D	; 13
     bce:	13 96       	adiw	r26, 0x03	; 3
     bd0:	9c 93       	st	X, r25
     bd2:	8e 93       	st	-X, r24
     bd4:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     bd6:	ed 93       	st	X+, r30
     bd8:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     bda:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <xMinimumEverFreeBytesRemaining+0x1>
     bde:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     be2:	90 93 1e 0a 	sts	0x0A1E, r25	; 0x800a1e <xFreeBytesRemaining+0x1>
     be6:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e8       	ldi	r25, 0x80	; 128
     bee:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <xBlockAllocatedBit+0x1>
     bf2:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <xBlockAllocatedBit>
     bf6:	08 95       	ret

00000bf8 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     bfe:	a1 e2       	ldi	r26, 0x21	; 33
     c00:	ba e0       	ldi	r27, 0x0A	; 10
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <prvInsertBlockIntoFreeList+0xe>
     c04:	df 01       	movw	r26, r30
     c06:	ed 91       	ld	r30, X+
     c08:	fc 91       	ld	r31, X
     c0a:	11 97       	sbiw	r26, 0x01	; 1
     c0c:	ec 17       	cp	r30, r28
     c0e:	fd 07       	cpc	r31, r29
     c10:	c8 f3       	brcs	.-14     	; 0xc04 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     c12:	12 96       	adiw	r26, 0x02	; 2
     c14:	8d 91       	ld	r24, X+
     c16:	9c 91       	ld	r25, X
     c18:	13 97       	sbiw	r26, 0x03	; 3
     c1a:	9d 01       	movw	r18, r26
     c1c:	28 0f       	add	r18, r24
     c1e:	39 1f       	adc	r19, r25
     c20:	c2 17       	cp	r28, r18
     c22:	d3 07       	cpc	r29, r19
     c24:	49 f4       	brne	.+18     	; 0xc38 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     c26:	2a 81       	ldd	r18, Y+2	; 0x02
     c28:	3b 81       	ldd	r19, Y+3	; 0x03
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	13 96       	adiw	r26, 0x03	; 3
     c30:	9c 93       	st	X, r25
     c32:	8e 93       	st	-X, r24
     c34:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     c36:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	9e 01       	movw	r18, r28
     c3e:	28 0f       	add	r18, r24
     c40:	39 1f       	adc	r19, r25
     c42:	e2 17       	cp	r30, r18
     c44:	f3 07       	cpc	r31, r19
     c46:	c1 f4       	brne	.+48     	; 0xc78 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     c48:	20 91 1f 0a 	lds	r18, 0x0A1F	; 0x800a1f <pxEnd>
     c4c:	30 91 20 0a 	lds	r19, 0x0A20	; 0x800a20 <pxEnd+0x1>
     c50:	e2 17       	cp	r30, r18
     c52:	f3 07       	cpc	r31, r19
     c54:	71 f0       	breq	.+28     	; 0xc72 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     c56:	22 81       	ldd	r18, Z+2	; 0x02
     c58:	33 81       	ldd	r19, Z+3	; 0x03
     c5a:	82 0f       	add	r24, r18
     c5c:	93 1f       	adc	r25, r19
     c5e:	9b 83       	std	Y+3, r25	; 0x03
     c60:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     c62:	ed 91       	ld	r30, X+
     c64:	fc 91       	ld	r31, X
     c66:	11 97       	sbiw	r26, 0x01	; 1
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	99 83       	std	Y+1, r25	; 0x01
     c6e:	88 83       	st	Y, r24
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     c72:	39 83       	std	Y+1, r19	; 0x01
     c74:	28 83       	st	Y, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     c78:	f9 83       	std	Y+1, r31	; 0x01
     c7a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     c7c:	ca 17       	cp	r28, r26
     c7e:	db 07       	cpc	r29, r27
     c80:	11 f0       	breq	.+4      	; 0xc86 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     c82:	cd 93       	st	X+, r28
     c84:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     c9a:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     c9e:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <pxEnd>
     ca2:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <pxEnd+0x1>
     ca6:	89 2b       	or	r24, r25
     ca8:	09 f4       	brne	.+2      	; 0xcac <pvPortMalloc+0x20>
        {
            prvHeapInit();
     caa:	7d df       	rcall	.-262    	; 0xba6 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     cac:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <xBlockAllocatedBit>
     cb0:	90 91 16 0a 	lds	r25, 0x0A16	; 0x800a16 <xBlockAllocatedBit+0x1>
     cb4:	80 23       	and	r24, r16
     cb6:	91 23       	and	r25, r17
     cb8:	89 2b       	or	r24, r25
     cba:	09 f0       	breq	.+2      	; 0xcbe <pvPortMalloc+0x32>
     cbc:	76 c0       	rjmp	.+236    	; 0xdaa <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     cbe:	01 15       	cp	r16, r1
     cc0:	11 05       	cpc	r17, r1
     cc2:	49 f0       	breq	.+18     	; 0xcd6 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     cc4:	c8 01       	movw	r24, r16
     cc6:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     cc8:	08 17       	cp	r16, r24
     cca:	19 07       	cpc	r17, r25
     ccc:	18 f0       	brcs	.+6      	; 0xcd4 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     cce:	00 e0       	ldi	r16, 0x00	; 0
     cd0:	10 e0       	ldi	r17, 0x00	; 0
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     cd4:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     cd6:	01 15       	cp	r16, r1
     cd8:	11 05       	cpc	r17, r1
     cda:	09 f4       	brne	.+2      	; 0xcde <pvPortMalloc+0x52>
     cdc:	69 c0       	rjmp	.+210    	; 0xdb0 <pvPortMalloc+0x124>
     cde:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <xFreeBytesRemaining>
     ce2:	90 91 1e 0a 	lds	r25, 0x0A1E	; 0x800a1e <xFreeBytesRemaining+0x1>
     ce6:	80 17       	cp	r24, r16
     ce8:	91 07       	cpc	r25, r17
     cea:	08 f4       	brcc	.+2      	; 0xcee <pvPortMalloc+0x62>
     cec:	64 c0       	rjmp	.+200    	; 0xdb6 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     cee:	c0 91 21 0a 	lds	r28, 0x0A21	; 0x800a21 <xStart>
     cf2:	d0 91 22 0a 	lds	r29, 0x0A22	; 0x800a22 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     cf6:	e1 e2       	ldi	r30, 0x21	; 33
     cf8:	fa e0       	ldi	r31, 0x0A	; 10
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     cfc:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     cfe:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	9b 81       	ldd	r25, Y+3	; 0x03
     d04:	80 17       	cp	r24, r16
     d06:	91 07       	cpc	r25, r17
     d08:	20 f4       	brcc	.+8      	; 0xd12 <pvPortMalloc+0x86>
     d0a:	88 81       	ld	r24, Y
     d0c:	99 81       	ldd	r25, Y+1	; 0x01
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	a9 f7       	brne	.-22     	; 0xcfc <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     d12:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <pxEnd>
     d16:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <pxEnd+0x1>
     d1a:	c8 17       	cp	r28, r24
     d1c:	d9 07       	cpc	r29, r25
     d1e:	09 f4       	brne	.+2      	; 0xd22 <pvPortMalloc+0x96>
     d20:	4d c0       	rjmp	.+154    	; 0xdbc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     d22:	e0 80       	ld	r14, Z
     d24:	f1 80       	ldd	r15, Z+1	; 0x01
     d26:	84 e0       	ldi	r24, 0x04	; 4
     d28:	e8 0e       	add	r14, r24
     d2a:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     d2c:	88 81       	ld	r24, Y
     d2e:	99 81       	ldd	r25, Y+1	; 0x01
     d30:	91 83       	std	Z+1, r25	; 0x01
     d32:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     d34:	2a 81       	ldd	r18, Y+2	; 0x02
     d36:	3b 81       	ldd	r19, Y+3	; 0x03
     d38:	20 1b       	sub	r18, r16
     d3a:	31 0b       	sbc	r19, r17
     d3c:	29 30       	cpi	r18, 0x09	; 9
     d3e:	31 05       	cpc	r19, r1
     d40:	48 f0       	brcs	.+18     	; 0xd54 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     d42:	ce 01       	movw	r24, r28
     d44:	80 0f       	add	r24, r16
     d46:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     d48:	fc 01       	movw	r30, r24
     d4a:	33 83       	std	Z+3, r19	; 0x03
     d4c:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     d4e:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     d50:	0a 83       	std	Y+2, r16	; 0x02
     d52:	52 df       	rcall	.-348    	; 0xbf8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     d54:	2a 81       	ldd	r18, Y+2	; 0x02
     d56:	3b 81       	ldd	r19, Y+3	; 0x03
     d58:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <xFreeBytesRemaining>
     d5c:	90 91 1e 0a 	lds	r25, 0x0A1E	; 0x800a1e <xFreeBytesRemaining+0x1>
     d60:	82 1b       	sub	r24, r18
     d62:	93 0b       	sbc	r25, r19
     d64:	90 93 1e 0a 	sts	0x0A1E, r25	; 0x800a1e <xFreeBytesRemaining+0x1>
     d68:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     d6c:	40 91 1b 0a 	lds	r20, 0x0A1B	; 0x800a1b <xMinimumEverFreeBytesRemaining>
     d70:	50 91 1c 0a 	lds	r21, 0x0A1C	; 0x800a1c <xMinimumEverFreeBytesRemaining+0x1>
     d74:	84 17       	cp	r24, r20
     d76:	95 07       	cpc	r25, r21
     d78:	20 f4       	brcc	.+8      	; 0xd82 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     d7a:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <xMinimumEverFreeBytesRemaining+0x1>
     d7e:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     d82:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <xBlockAllocatedBit>
     d86:	90 91 16 0a 	lds	r25, 0x0A16	; 0x800a16 <xBlockAllocatedBit+0x1>
     d8a:	28 2b       	or	r18, r24
     d8c:	39 2b       	or	r19, r25
     d8e:	3b 83       	std	Y+3, r19	; 0x03
     d90:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     d92:	19 82       	std	Y+1, r1	; 0x01
     d94:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     d96:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <xNumberOfSuccessfulAllocations>
     d9a:	90 91 1a 0a 	lds	r25, 0x0A1A	; 0x800a1a <xNumberOfSuccessfulAllocations+0x1>
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	90 93 1a 0a 	sts	0x0A1A, r25	; 0x800a1a <xNumberOfSuccessfulAllocations+0x1>
     da4:	80 93 19 0a 	sts	0x0A19, r24	; 0x800a19 <xNumberOfSuccessfulAllocations>
     da8:	0b c0       	rjmp	.+22     	; 0xdc0 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     daa:	e1 2c       	mov	r14, r1
     dac:	f1 2c       	mov	r15, r1
     dae:	08 c0       	rjmp	.+16     	; 0xdc0 <pvPortMalloc+0x134>
     db0:	e1 2c       	mov	r14, r1
     db2:	f1 2c       	mov	r15, r1
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <pvPortMalloc+0x134>
     db6:	e1 2c       	mov	r14, r1
     db8:	f1 2c       	mov	r15, r1
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <pvPortMalloc+0x134>
     dbc:	e1 2c       	mov	r14, r1
     dbe:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     dc0:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     dc4:	e1 14       	cp	r14, r1
     dc6:	f1 04       	cpc	r15, r1
     dc8:	11 f4       	brne	.+4      	; 0xdce <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     dca:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     dce:	c7 01       	movw	r24, r14
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	08 95       	ret

00000dde <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	91 f1       	breq	.+100    	; 0xe4e <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     dea:	ec 01       	movw	r28, r24
     dec:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     dee:	4a 81       	ldd	r20, Y+2	; 0x02
     df0:	5b 81       	ldd	r21, Y+3	; 0x03
     df2:	20 91 15 0a 	lds	r18, 0x0A15	; 0x800a15 <xBlockAllocatedBit>
     df6:	30 91 16 0a 	lds	r19, 0x0A16	; 0x800a16 <xBlockAllocatedBit+0x1>
     dfa:	ba 01       	movw	r22, r20
     dfc:	62 23       	and	r22, r18
     dfe:	73 23       	and	r23, r19
     e00:	67 2b       	or	r22, r23
     e02:	29 f1       	breq	.+74     	; 0xe4e <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     e04:	68 81       	ld	r22, Y
     e06:	79 81       	ldd	r23, Y+1	; 0x01
     e08:	67 2b       	or	r22, r23
     e0a:	09 f5       	brne	.+66     	; 0xe4e <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     e0c:	20 95       	com	r18
     e0e:	30 95       	com	r19
     e10:	24 23       	and	r18, r20
     e12:	35 23       	and	r19, r21
     e14:	3b 83       	std	Y+3, r19	; 0x03
     e16:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     e18:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	9b 81       	ldd	r25, Y+3	; 0x03
     e20:	20 91 1d 0a 	lds	r18, 0x0A1D	; 0x800a1d <xFreeBytesRemaining>
     e24:	30 91 1e 0a 	lds	r19, 0x0A1E	; 0x800a1e <xFreeBytesRemaining+0x1>
     e28:	82 0f       	add	r24, r18
     e2a:	93 1f       	adc	r25, r19
     e2c:	90 93 1e 0a 	sts	0x0A1E, r25	; 0x800a1e <xFreeBytesRemaining+0x1>
     e30:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     e34:	ce 01       	movw	r24, r28
     e36:	e0 de       	rcall	.-576    	; 0xbf8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     e38:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <xNumberOfSuccessfulFrees>
     e3c:	90 91 18 0a 	lds	r25, 0x0A18	; 0x800a18 <xNumberOfSuccessfulFrees+0x1>
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	90 93 18 0a 	sts	0x0A18, r25	; 0x800a18 <xNumberOfSuccessfulFrees+0x1>
     e46:	80 93 17 0a 	sts	0x0A17, r24	; 0x800a17 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     e4a:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	08 95       	ret

00000e58 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     e58:	fc 01       	movw	r30, r24
     e5a:	03 96       	adiw	r24, 0x03	; 3
     e5c:	92 83       	std	Z+2, r25	; 0x02
     e5e:	81 83       	std	Z+1, r24	; 0x01
     e60:	4f ef       	ldi	r20, 0xFF	; 255
     e62:	5f ef       	ldi	r21, 0xFF	; 255
     e64:	ba 01       	movw	r22, r20
     e66:	43 83       	std	Z+3, r20	; 0x03
     e68:	54 83       	std	Z+4, r21	; 0x04
     e6a:	65 83       	std	Z+5, r22	; 0x05
     e6c:	76 83       	std	Z+6, r23	; 0x06
     e6e:	90 87       	std	Z+8, r25	; 0x08
     e70:	87 83       	std	Z+7, r24	; 0x07
     e72:	92 87       	std	Z+10, r25	; 0x0a
     e74:	81 87       	std	Z+9, r24	; 0x09
     e76:	10 82       	st	Z, r1
     e78:	08 95       	ret

00000e7a <vListInitialiseItem>:
     e7a:	fc 01       	movw	r30, r24
     e7c:	13 86       	std	Z+11, r1	; 0x0b
     e7e:	12 86       	std	Z+10, r1	; 0x0a
     e80:	08 95       	ret

00000e82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e8c:	08 81       	ld	r16, Y
     e8e:	19 81       	ldd	r17, Y+1	; 0x01
     e90:	2a 81       	ldd	r18, Y+2	; 0x02
     e92:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     e94:	0f 3f       	cpi	r16, 0xFF	; 255
     e96:	4f ef       	ldi	r20, 0xFF	; 255
     e98:	14 07       	cpc	r17, r20
     e9a:	24 07       	cpc	r18, r20
     e9c:	34 07       	cpc	r19, r20
     e9e:	21 f4       	brne	.+8      	; 0xea8 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     ea0:	fc 01       	movw	r30, r24
     ea2:	a1 85       	ldd	r26, Z+9	; 0x09
     ea4:	b2 85       	ldd	r27, Z+10	; 0x0a
     ea6:	11 c0       	rjmp	.+34     	; 0xeca <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     ea8:	dc 01       	movw	r26, r24
     eaa:	13 96       	adiw	r26, 0x03	; 3
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <vListInsert+0x2e>
     eae:	df 01       	movw	r26, r30
     eb0:	14 96       	adiw	r26, 0x04	; 4
     eb2:	ed 91       	ld	r30, X+
     eb4:	fc 91       	ld	r31, X
     eb6:	15 97       	sbiw	r26, 0x05	; 5
     eb8:	40 81       	ld	r20, Z
     eba:	51 81       	ldd	r21, Z+1	; 0x01
     ebc:	62 81       	ldd	r22, Z+2	; 0x02
     ebe:	73 81       	ldd	r23, Z+3	; 0x03
     ec0:	04 17       	cp	r16, r20
     ec2:	15 07       	cpc	r17, r21
     ec4:	26 07       	cpc	r18, r22
     ec6:	37 07       	cpc	r19, r23
     ec8:	90 f7       	brcc	.-28     	; 0xeae <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     eca:	14 96       	adiw	r26, 0x04	; 4
     ecc:	ed 91       	ld	r30, X+
     ece:	fc 91       	ld	r31, X
     ed0:	15 97       	sbiw	r26, 0x05	; 5
     ed2:	fd 83       	std	Y+5, r31	; 0x05
     ed4:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ed6:	d7 83       	std	Z+7, r29	; 0x07
     ed8:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     eda:	bf 83       	std	Y+7, r27	; 0x07
     edc:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     ede:	15 96       	adiw	r26, 0x05	; 5
     ee0:	dc 93       	st	X, r29
     ee2:	ce 93       	st	-X, r28
     ee4:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     ee6:	9b 87       	std	Y+11, r25	; 0x0b
     ee8:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     eea:	fc 01       	movw	r30, r24
     eec:	20 81       	ld	r18, Z
     eee:	2f 5f       	subi	r18, 0xFF	; 255
     ef0:	20 83       	st	Z, r18
}
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     f02:	a2 85       	ldd	r26, Z+10	; 0x0a
     f04:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     f06:	c4 81       	ldd	r28, Z+4	; 0x04
     f08:	d5 81       	ldd	r29, Z+5	; 0x05
     f0a:	86 81       	ldd	r24, Z+6	; 0x06
     f0c:	97 81       	ldd	r25, Z+7	; 0x07
     f0e:	9f 83       	std	Y+7, r25	; 0x07
     f10:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f12:	c6 81       	ldd	r28, Z+6	; 0x06
     f14:	d7 81       	ldd	r29, Z+7	; 0x07
     f16:	84 81       	ldd	r24, Z+4	; 0x04
     f18:	95 81       	ldd	r25, Z+5	; 0x05
     f1a:	9d 83       	std	Y+5, r25	; 0x05
     f1c:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     f1e:	11 96       	adiw	r26, 0x01	; 1
     f20:	8d 91       	ld	r24, X+
     f22:	9c 91       	ld	r25, X
     f24:	12 97       	sbiw	r26, 0x02	; 2
     f26:	e8 17       	cp	r30, r24
     f28:	f9 07       	cpc	r31, r25
     f2a:	31 f4       	brne	.+12     	; 0xf38 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     f2c:	86 81       	ldd	r24, Z+6	; 0x06
     f2e:	97 81       	ldd	r25, Z+7	; 0x07
     f30:	12 96       	adiw	r26, 0x02	; 2
     f32:	9c 93       	st	X, r25
     f34:	8e 93       	st	-X, r24
     f36:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     f38:	13 86       	std	Z+11, r1	; 0x0b
     f3a:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     f3c:	8c 91       	ld	r24, X
     f3e:	81 50       	subi	r24, 0x01	; 1
     f40:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     f42:	8c 91       	ld	r24, X
}
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     f4a:	a8 95       	wdr
     f4c:	90 ec       	ldi	r25, 0xC0	; 192
     f4e:	88 e1       	ldi	r24, 0x18	; 24
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	a8 95       	wdr
     f56:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f60:	08 95       	ret

00000f62 <pxPortInitialiseStack>:
     f62:	fc 01       	movw	r30, r24
     f64:	60 83       	st	Z, r22
     f66:	31 97       	sbiw	r30, 0x01	; 1
     f68:	70 83       	st	Z, r23
     f6a:	31 97       	sbiw	r30, 0x01	; 1
     f6c:	10 82       	st	Z, r1
     f6e:	31 97       	sbiw	r30, 0x01	; 1
     f70:	10 82       	st	Z, r1
     f72:	31 97       	sbiw	r30, 0x01	; 1
     f74:	20 e8       	ldi	r18, 0x80	; 128
     f76:	20 83       	st	Z, r18
     f78:	31 97       	sbiw	r30, 0x01	; 1
     f7a:	10 82       	st	Z, r1
     f7c:	31 97       	sbiw	r30, 0x01	; 1
     f7e:	10 82       	st	Z, r1
     f80:	31 97       	sbiw	r30, 0x01	; 1
     f82:	10 82       	st	Z, r1
     f84:	77 97       	sbiw	r30, 0x17	; 23
     f86:	40 83       	st	Z, r20
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	50 83       	st	Z, r21
     f8c:	86 97       	sbiw	r24, 0x26	; 38
     f8e:	08 95       	ret

00000f90 <xPortStartScheduler>:
     f90:	dc df       	rcall	.-72     	; 0xf4a <prvSetupTimerInterrupt>
     f92:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
     f96:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
     f9a:	cd 91       	ld	r28, X+
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	dd 91       	ld	r29, X+
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	bf 91       	pop	r27
     fac:	af 91       	pop	r26
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	7f 91       	pop	r23
     fb4:	6f 91       	pop	r22
     fb6:	5f 91       	pop	r21
     fb8:	4f 91       	pop	r20
     fba:	3f 91       	pop	r19
     fbc:	2f 91       	pop	r18
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	bf 90       	pop	r11
     fcc:	af 90       	pop	r10
     fce:	9f 90       	pop	r9
     fd0:	8f 90       	pop	r8
     fd2:	7f 90       	pop	r7
     fd4:	6f 90       	pop	r6
     fd6:	5f 90       	pop	r5
     fd8:	4f 90       	pop	r4
     fda:	3f 90       	pop	r3
     fdc:	2f 90       	pop	r2
     fde:	1f 90       	pop	r1
     fe0:	0f 90       	pop	r0
     fe2:	0c be       	out	0x3c, r0	; 60
     fe4:	0f 90       	pop	r0
     fe6:	0b be       	out	0x3b, r0	; 59
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	08 95       	ret
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	08 95       	ret

00000ff4 <vPortYield>:
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	0f 92       	push	r0
     ffc:	0b b6       	in	r0, 0x3b	; 59
     ffe:	0f 92       	push	r0
    1000:	0c b6       	in	r0, 0x3c	; 60
    1002:	0f 92       	push	r0
    1004:	1f 92       	push	r1
    1006:	11 24       	eor	r1, r1
    1008:	2f 92       	push	r2
    100a:	3f 92       	push	r3
    100c:	4f 92       	push	r4
    100e:	5f 92       	push	r5
    1010:	6f 92       	push	r6
    1012:	7f 92       	push	r7
    1014:	8f 92       	push	r8
    1016:	9f 92       	push	r9
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31
    1044:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    1048:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    104c:	0d b6       	in	r0, 0x3d	; 61
    104e:	0d 92       	st	X+, r0
    1050:	0e b6       	in	r0, 0x3e	; 62
    1052:	0d 92       	st	X+, r0
    1054:	0e 94 c2 14 	call	0x2984	; 0x2984 <vTaskSwitchContext>
    1058:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    105c:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    1060:	cd 91       	ld	r28, X+
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	dd 91       	ld	r29, X+
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	bf 90       	pop	r11
    1092:	af 90       	pop	r10
    1094:	9f 90       	pop	r9
    1096:	8f 90       	pop	r8
    1098:	7f 90       	pop	r7
    109a:	6f 90       	pop	r6
    109c:	5f 90       	pop	r5
    109e:	4f 90       	pop	r4
    10a0:	3f 90       	pop	r3
    10a2:	2f 90       	pop	r2
    10a4:	1f 90       	pop	r1
    10a6:	0f 90       	pop	r0
    10a8:	0c be       	out	0x3c, r0	; 60
    10aa:	0f 90       	pop	r0
    10ac:	0b be       	out	0x3b, r0	; 59
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	08 95       	ret

000010b6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	0f 92       	push	r0
    10be:	0b b6       	in	r0, 0x3b	; 59
    10c0:	0f 92       	push	r0
    10c2:	0c b6       	in	r0, 0x3c	; 60
    10c4:	0f 92       	push	r0
    10c6:	1f 92       	push	r1
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 92       	push	r2
    10cc:	3f 92       	push	r3
    10ce:	4f 92       	push	r4
    10d0:	5f 92       	push	r5
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
    1106:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    110a:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    110e:	0d b6       	in	r0, 0x3d	; 61
    1110:	0d 92       	st	X+, r0
    1112:	0e b6       	in	r0, 0x3e	; 62
    1114:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1116:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1118:	0e 94 3a 12 	call	0x2474	; 0x2474 <xTaskIncrementTick>
    111c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    111e:	0e 94 c2 14 	call	0x2984	; 0x2984 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1122:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    1126:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    112a:	cd 91       	ld	r28, X+
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	dd 91       	ld	r29, X+
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	ff 91       	pop	r31
    1134:	ef 91       	pop	r30
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	bf 91       	pop	r27
    113c:	af 91       	pop	r26
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	7f 91       	pop	r23
    1144:	6f 91       	pop	r22
    1146:	5f 91       	pop	r21
    1148:	4f 91       	pop	r20
    114a:	3f 91       	pop	r19
    114c:	2f 91       	pop	r18
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	bf 90       	pop	r11
    115c:	af 90       	pop	r10
    115e:	9f 90       	pop	r9
    1160:	8f 90       	pop	r8
    1162:	7f 90       	pop	r7
    1164:	6f 90       	pop	r6
    1166:	5f 90       	pop	r5
    1168:	4f 90       	pop	r4
    116a:	3f 90       	pop	r3
    116c:	2f 90       	pop	r2
    116e:	1f 90       	pop	r1
    1170:	0f 90       	pop	r0
    1172:	0c be       	out	0x3c, r0	; 60
    1174:	0f 90       	pop	r0
    1176:	0b be       	out	0x3b, r0	; 59
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    117e:	08 95       	ret

00001180 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1180:	9a df       	rcall	.-204    	; 0x10b6 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1182:	18 95       	reti

00001184 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1184:	dc 01       	movw	r26, r24
    1186:	53 96       	adiw	r26, 0x13	; 19
    1188:	2c 91       	ld	r18, X
    118a:	53 97       	sbiw	r26, 0x13	; 19
    118c:	22 23       	and	r18, r18
    118e:	41 f0       	breq	.+16     	; 0x11a0 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1190:	5a 96       	adiw	r26, 0x1a	; 26
    1192:	ed 91       	ld	r30, X+
    1194:	fc 91       	ld	r31, X
    1196:	5b 97       	sbiw	r26, 0x1b	; 27
    1198:	90 81       	ld	r25, Z
    119a:	8a e0       	ldi	r24, 0x0A	; 10
    119c:	89 1b       	sub	r24, r25
    119e:	08 95       	ret
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	08 95       	ret

000011a4 <prvIsQueueEmpty>:
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	0f 92       	push	r0
    11aa:	fc 01       	movw	r30, r24
    11ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    11ae:	81 11       	cpse	r24, r1
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <prvIsQueueEmpty+0x12>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <prvIsQueueEmpty+0x14>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	08 95       	ret

000011be <prvIsQueueFull>:
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	0f 92       	push	r0
    11c4:	fc 01       	movw	r30, r24
    11c6:	26 8d       	ldd	r18, Z+30	; 0x1e
    11c8:	87 8d       	ldd	r24, Z+31	; 0x1f
    11ca:	28 13       	cpse	r18, r24
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <prvIsQueueFull+0x14>
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <prvIsQueueFull+0x16>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	08 95       	ret

000011da <prvCopyDataToQueue>:
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	ec 01       	movw	r28, r24
    11e4:	04 2f       	mov	r16, r20
    11e6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    11e8:	48 a1       	ldd	r20, Y+32	; 0x20
    11ea:	41 11       	cpse	r20, r1
    11ec:	0c c0       	rjmp	.+24     	; 0x1206 <prvCopyDataToQueue+0x2c>
    11ee:	88 81       	ld	r24, Y
    11f0:	99 81       	ldd	r25, Y+1	; 0x01
    11f2:	89 2b       	or	r24, r25
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <prvCopyDataToQueue+0x1e>
    11f6:	42 c0       	rjmp	.+132    	; 0x127c <prvCopyDataToQueue+0xa2>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	0e 94 3e 18 	call	0x307c	; 0x307c <xTaskPriorityDisinherit>
    1200:	1d 82       	std	Y+5, r1	; 0x05
    1202:	1c 82       	std	Y+4, r1	; 0x04
    1204:	42 c0       	rjmp	.+132    	; 0x128a <prvCopyDataToQueue+0xb0>
    1206:	01 11       	cpse	r16, r1
    1208:	17 c0       	rjmp	.+46     	; 0x1238 <prvCopyDataToQueue+0x5e>
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	9b 81       	ldd	r25, Y+3	; 0x03
    1210:	0e 94 7d 39 	call	0x72fa	; 0x72fa <memcpy>
    1214:	28 a1       	ldd	r18, Y+32	; 0x20
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	9b 81       	ldd	r25, Y+3	; 0x03
    121a:	82 0f       	add	r24, r18
    121c:	91 1d       	adc	r25, r1
    121e:	9b 83       	std	Y+3, r25	; 0x03
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	2c 81       	ldd	r18, Y+4	; 0x04
    1224:	3d 81       	ldd	r19, Y+5	; 0x05
    1226:	82 17       	cp	r24, r18
    1228:	93 07       	cpc	r25, r19
    122a:	50 f1       	brcs	.+84     	; 0x1280 <prvCopyDataToQueue+0xa6>
    122c:	88 81       	ld	r24, Y
    122e:	99 81       	ldd	r25, Y+1	; 0x01
    1230:	9b 83       	std	Y+3, r25	; 0x03
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	29 c0       	rjmp	.+82     	; 0x128a <prvCopyDataToQueue+0xb0>
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	8e 81       	ldd	r24, Y+6	; 0x06
    123c:	9f 81       	ldd	r25, Y+7	; 0x07
    123e:	0e 94 7d 39 	call	0x72fa	; 0x72fa <memcpy>
    1242:	88 a1       	ldd	r24, Y+32	; 0x20
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	91 95       	neg	r25
    1248:	81 95       	neg	r24
    124a:	91 09       	sbc	r25, r1
    124c:	2e 81       	ldd	r18, Y+6	; 0x06
    124e:	3f 81       	ldd	r19, Y+7	; 0x07
    1250:	28 0f       	add	r18, r24
    1252:	39 1f       	adc	r19, r25
    1254:	3f 83       	std	Y+7, r19	; 0x07
    1256:	2e 83       	std	Y+6, r18	; 0x06
    1258:	48 81       	ld	r20, Y
    125a:	59 81       	ldd	r21, Y+1	; 0x01
    125c:	24 17       	cp	r18, r20
    125e:	35 07       	cpc	r19, r21
    1260:	30 f4       	brcc	.+12     	; 0x126e <prvCopyDataToQueue+0x94>
    1262:	2c 81       	ldd	r18, Y+4	; 0x04
    1264:	3d 81       	ldd	r19, Y+5	; 0x05
    1266:	82 0f       	add	r24, r18
    1268:	93 1f       	adc	r25, r19
    126a:	9f 83       	std	Y+7, r25	; 0x07
    126c:	8e 83       	std	Y+6, r24	; 0x06
    126e:	02 30       	cpi	r16, 0x02	; 2
    1270:	49 f4       	brne	.+18     	; 0x1284 <prvCopyDataToQueue+0xaa>
    1272:	11 23       	and	r17, r17
    1274:	49 f0       	breq	.+18     	; 0x1288 <prvCopyDataToQueue+0xae>
    1276:	11 50       	subi	r17, 0x01	; 1
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	07 c0       	rjmp	.+14     	; 0x128a <prvCopyDataToQueue+0xb0>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	05 c0       	rjmp	.+10     	; 0x128a <prvCopyDataToQueue+0xb0>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	03 c0       	rjmp	.+6      	; 0x128a <prvCopyDataToQueue+0xb0>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	01 c0       	rjmp	.+2      	; 0x128a <prvCopyDataToQueue+0xb0>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	1f 5f       	subi	r17, 0xFF	; 255
    128c:	1e 8f       	std	Y+30, r17	; 0x1e
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <prvCopyDataFromQueue>:
    1298:	fc 01       	movw	r30, r24
    129a:	40 a1       	ldd	r20, Z+32	; 0x20
    129c:	44 23       	and	r20, r20
    129e:	a9 f0       	breq	.+42     	; 0x12ca <prvCopyDataFromQueue+0x32>
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	26 81       	ldd	r18, Z+6	; 0x06
    12a4:	37 81       	ldd	r19, Z+7	; 0x07
    12a6:	24 0f       	add	r18, r20
    12a8:	35 1f       	adc	r19, r21
    12aa:	37 83       	std	Z+7, r19	; 0x07
    12ac:	26 83       	std	Z+6, r18	; 0x06
    12ae:	84 81       	ldd	r24, Z+4	; 0x04
    12b0:	95 81       	ldd	r25, Z+5	; 0x05
    12b2:	28 17       	cp	r18, r24
    12b4:	39 07       	cpc	r19, r25
    12b6:	20 f0       	brcs	.+8      	; 0x12c0 <prvCopyDataFromQueue+0x28>
    12b8:	80 81       	ld	r24, Z
    12ba:	91 81       	ldd	r25, Z+1	; 0x01
    12bc:	97 83       	std	Z+7, r25	; 0x07
    12be:	86 83       	std	Z+6, r24	; 0x06
    12c0:	cb 01       	movw	r24, r22
    12c2:	66 81       	ldd	r22, Z+6	; 0x06
    12c4:	77 81       	ldd	r23, Z+7	; 0x07
    12c6:	0c 94 7d 39 	jmp	0x72fa	; 0x72fa <memcpy>
    12ca:	08 95       	ret

000012cc <prvUnlockQueue>:
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	ec 01       	movw	r28, r24
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	0f 92       	push	r0
    12da:	1a a1       	ldd	r17, Y+34	; 0x22
    12dc:	0b c0       	rjmp	.+22     	; 0x12f4 <prvUnlockQueue+0x28>
    12de:	8b 89       	ldd	r24, Y+19	; 0x13
    12e0:	88 23       	and	r24, r24
    12e2:	51 f0       	breq	.+20     	; 0x12f8 <prvUnlockQueue+0x2c>
    12e4:	ce 01       	movw	r24, r28
    12e6:	43 96       	adiw	r24, 0x13	; 19
    12e8:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <xTaskRemoveFromEventList>
    12ec:	81 11       	cpse	r24, r1
    12ee:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <vTaskMissedYield>
    12f2:	11 50       	subi	r17, 0x01	; 1
    12f4:	11 16       	cp	r1, r17
    12f6:	9c f3       	brlt	.-26     	; 0x12de <prvUnlockQueue+0x12>
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	8a a3       	std	Y+34, r24	; 0x22
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	0f 92       	push	r0
    1306:	19 a1       	ldd	r17, Y+33	; 0x21
    1308:	0b c0       	rjmp	.+22     	; 0x1320 <prvUnlockQueue+0x54>
    130a:	88 85       	ldd	r24, Y+8	; 0x08
    130c:	88 23       	and	r24, r24
    130e:	51 f0       	breq	.+20     	; 0x1324 <prvUnlockQueue+0x58>
    1310:	ce 01       	movw	r24, r28
    1312:	08 96       	adiw	r24, 0x08	; 8
    1314:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <xTaskRemoveFromEventList>
    1318:	81 11       	cpse	r24, r1
    131a:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <vTaskMissedYield>
    131e:	11 50       	subi	r17, 0x01	; 1
    1320:	11 16       	cp	r1, r17
    1322:	9c f3       	brlt	.-26     	; 0x130a <prvUnlockQueue+0x3e>
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	89 a3       	std	Y+33, r24	; 0x21
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	08 95       	ret

00001334 <xQueueGenericReset>:
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	0f 92       	push	r0
    1340:	e8 81       	ld	r30, Y
    1342:	f9 81       	ldd	r31, Y+1	; 0x01
    1344:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1346:	28 a1       	ldd	r18, Y+32	; 0x20
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	82 9f       	mul	r24, r18
    134e:	a0 01       	movw	r20, r0
    1350:	83 9f       	mul	r24, r19
    1352:	50 0d       	add	r21, r0
    1354:	92 9f       	mul	r25, r18
    1356:	50 0d       	add	r21, r0
    1358:	11 24       	eor	r1, r1
    135a:	4e 0f       	add	r20, r30
    135c:	5f 1f       	adc	r21, r31
    135e:	5d 83       	std	Y+5, r21	; 0x05
    1360:	4c 83       	std	Y+4, r20	; 0x04
    1362:	1e 8e       	std	Y+30, r1	; 0x1e
    1364:	fb 83       	std	Y+3, r31	; 0x03
    1366:	ea 83       	std	Y+2, r30	; 0x02
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	28 9f       	mul	r18, r24
    136c:	a0 01       	movw	r20, r0
    136e:	29 9f       	mul	r18, r25
    1370:	50 0d       	add	r21, r0
    1372:	38 9f       	mul	r19, r24
    1374:	50 0d       	add	r21, r0
    1376:	11 24       	eor	r1, r1
    1378:	cf 01       	movw	r24, r30
    137a:	84 0f       	add	r24, r20
    137c:	95 1f       	adc	r25, r21
    137e:	9f 83       	std	Y+7, r25	; 0x07
    1380:	8e 83       	std	Y+6, r24	; 0x06
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	89 a3       	std	Y+33, r24	; 0x21
    1386:	8a a3       	std	Y+34, r24	; 0x22
    1388:	61 11       	cpse	r22, r1
    138a:	0b c0       	rjmp	.+22     	; 0x13a2 <xQueueGenericReset+0x6e>
    138c:	88 85       	ldd	r24, Y+8	; 0x08
    138e:	88 23       	and	r24, r24
    1390:	71 f0       	breq	.+28     	; 0x13ae <xQueueGenericReset+0x7a>
    1392:	ce 01       	movw	r24, r28
    1394:	08 96       	adiw	r24, 0x08	; 8
    1396:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <xTaskRemoveFromEventList>
    139a:	88 23       	and	r24, r24
    139c:	41 f0       	breq	.+16     	; 0x13ae <xQueueGenericReset+0x7a>
    139e:	2a de       	rcall	.-940    	; 0xff4 <vPortYield>
    13a0:	06 c0       	rjmp	.+12     	; 0x13ae <xQueueGenericReset+0x7a>
    13a2:	ce 01       	movw	r24, r28
    13a4:	08 96       	adiw	r24, 0x08	; 8
    13a6:	58 dd       	rcall	.-1360   	; 0xe58 <vListInitialise>
    13a8:	ce 01       	movw	r24, r28
    13aa:	43 96       	adiw	r24, 0x13	; 19
    13ac:	55 dd       	rcall	.-1366   	; 0xe58 <vListInitialise>
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <prvInitialiseNewQueue>:
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	f8 01       	movw	r30, r16
    13c0:	61 11       	cpse	r22, r1
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <prvInitialiseNewQueue+0x10>
    13c4:	11 83       	std	Z+1, r17	; 0x01
    13c6:	00 83       	st	Z, r16
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <prvInitialiseNewQueue+0x14>
    13ca:	51 83       	std	Z+1, r21	; 0x01
    13cc:	40 83       	st	Z, r20
    13ce:	87 8f       	std	Z+31, r24	; 0x1f
    13d0:	60 a3       	std	Z+32, r22	; 0x20
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	cf 01       	movw	r24, r30
    13d6:	ae df       	rcall	.-164    	; 0x1334 <xQueueGenericReset>
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	08 95       	ret

000013de <xQueueGenericCreate>:
    13de:	df 92       	push	r13
    13e0:	ef 92       	push	r14
    13e2:	ff 92       	push	r15
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	f8 2e       	mov	r15, r24
    13ee:	e6 2e       	mov	r14, r22
    13f0:	d4 2e       	mov	r13, r20
    13f2:	86 9f       	mul	r24, r22
    13f4:	c0 01       	movw	r24, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	83 96       	adiw	r24, 0x23	; 35
    13fa:	48 dc       	rcall	.-1904   	; 0xc8c <pvPortMalloc>
    13fc:	ec 01       	movw	r28, r24
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	41 f0       	breq	.+16     	; 0x1412 <xQueueGenericCreate+0x34>
    1402:	8c 01       	movw	r16, r24
    1404:	2d 2d       	mov	r18, r13
    1406:	ac 01       	movw	r20, r24
    1408:	4d 5d       	subi	r20, 0xDD	; 221
    140a:	5f 4f       	sbci	r21, 0xFF	; 255
    140c:	6e 2d       	mov	r22, r14
    140e:	8f 2d       	mov	r24, r15
    1410:	d4 df       	rcall	.-88     	; 0x13ba <prvInitialiseNewQueue>
    1412:	ce 01       	movw	r24, r28
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	08 95       	ret

00001424 <xQueueGenericSend>:
    1424:	cf 92       	push	r12
    1426:	df 92       	push	r13
    1428:	ef 92       	push	r14
    142a:	ff 92       	push	r15
    142c:	0f 93       	push	r16
    142e:	1f 93       	push	r17
    1430:	cf 93       	push	r28
    1432:	df 93       	push	r29
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	29 97       	sbiw	r28, 0x09	; 9
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	7c 01       	movw	r14, r24
    1446:	6b 01       	movw	r12, r22
    1448:	2e 83       	std	Y+6, r18	; 0x06
    144a:	3f 83       	std	Y+7, r19	; 0x07
    144c:	48 87       	std	Y+8, r20	; 0x08
    144e:	59 87       	std	Y+9, r21	; 0x09
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	0f 92       	push	r0
    1458:	f7 01       	movw	r30, r14
    145a:	96 8d       	ldd	r25, Z+30	; 0x1e
    145c:	87 8d       	ldd	r24, Z+31	; 0x1f
    145e:	98 17       	cp	r25, r24
    1460:	10 f0       	brcs	.+4      	; 0x1466 <xQueueGenericSend+0x42>
    1462:	02 30       	cpi	r16, 0x02	; 2
    1464:	b1 f4       	brne	.+44     	; 0x1492 <xQueueGenericSend+0x6e>
    1466:	40 2f       	mov	r20, r16
    1468:	b6 01       	movw	r22, r12
    146a:	c7 01       	movw	r24, r14
    146c:	b6 de       	rcall	.-660    	; 0x11da <prvCopyDataToQueue>
    146e:	f7 01       	movw	r30, r14
    1470:	93 89       	ldd	r25, Z+19	; 0x13
    1472:	99 23       	and	r25, r25
    1474:	41 f0       	breq	.+16     	; 0x1486 <xQueueGenericSend+0x62>
    1476:	c7 01       	movw	r24, r14
    1478:	43 96       	adiw	r24, 0x13	; 19
    147a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <xTaskRemoveFromEventList>
    147e:	88 23       	and	r24, r24
    1480:	21 f0       	breq	.+8      	; 0x148a <xQueueGenericSend+0x66>
    1482:	b8 dd       	rcall	.-1168   	; 0xff4 <vPortYield>
    1484:	02 c0       	rjmp	.+4      	; 0x148a <xQueueGenericSend+0x66>
    1486:	81 11       	cpse	r24, r1
    1488:	b5 dd       	rcall	.-1174   	; 0xff4 <vPortYield>
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	4c c0       	rjmp	.+152    	; 0x152a <xQueueGenericSend+0x106>
    1492:	8e 81       	ldd	r24, Y+6	; 0x06
    1494:	9f 81       	ldd	r25, Y+7	; 0x07
    1496:	a8 85       	ldd	r26, Y+8	; 0x08
    1498:	b9 85       	ldd	r27, Y+9	; 0x09
    149a:	89 2b       	or	r24, r25
    149c:	8a 2b       	or	r24, r26
    149e:	8b 2b       	or	r24, r27
    14a0:	21 f4       	brne	.+8      	; 0x14aa <xQueueGenericSend+0x86>
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	40 c0       	rjmp	.+128    	; 0x152a <xQueueGenericSend+0x106>
    14aa:	11 11       	cpse	r17, r1
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <xQueueGenericSend+0x94>
    14ae:	ce 01       	movw	r24, r28
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	0e 94 29 17 	call	0x2e52	; 0x2e52 <vTaskInternalSetTimeOutState>
    14b6:	11 e0       	ldi	r17, 0x01	; 1
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	c7 d7       	rcall	.+3982   	; 0x244c <vTaskSuspendAll>
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	0f 92       	push	r0
    14c4:	f7 01       	movw	r30, r14
    14c6:	81 a1       	ldd	r24, Z+33	; 0x21
    14c8:	8f 3f       	cpi	r24, 0xFF	; 255
    14ca:	09 f4       	brne	.+2      	; 0x14ce <xQueueGenericSend+0xaa>
    14cc:	11 a2       	std	Z+33, r1	; 0x21
    14ce:	f7 01       	movw	r30, r14
    14d0:	82 a1       	ldd	r24, Z+34	; 0x22
    14d2:	8f 3f       	cpi	r24, 0xFF	; 255
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <xQueueGenericSend+0xb4>
    14d6:	12 a2       	std	Z+34, r1	; 0x22
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	be 01       	movw	r22, r28
    14de:	6a 5f       	subi	r22, 0xFA	; 250
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	ce 01       	movw	r24, r28
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <xTaskCheckForTimeOut>
    14ea:	81 11       	cpse	r24, r1
    14ec:	19 c0       	rjmp	.+50     	; 0x1520 <xQueueGenericSend+0xfc>
    14ee:	c7 01       	movw	r24, r14
    14f0:	66 de       	rcall	.-820    	; 0x11be <prvIsQueueFull>
    14f2:	88 23       	and	r24, r24
    14f4:	81 f0       	breq	.+32     	; 0x1516 <xQueueGenericSend+0xf2>
    14f6:	4e 81       	ldd	r20, Y+6	; 0x06
    14f8:	5f 81       	ldd	r21, Y+7	; 0x07
    14fa:	68 85       	ldd	r22, Y+8	; 0x08
    14fc:	79 85       	ldd	r23, Y+9	; 0x09
    14fe:	c7 01       	movw	r24, r14
    1500:	08 96       	adiw	r24, 0x08	; 8
    1502:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vTaskPlaceOnEventList>
    1506:	c7 01       	movw	r24, r14
    1508:	e1 de       	rcall	.-574    	; 0x12cc <prvUnlockQueue>
    150a:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>
    150e:	81 11       	cpse	r24, r1
    1510:	a0 cf       	rjmp	.-192    	; 0x1452 <xQueueGenericSend+0x2e>
    1512:	70 dd       	rcall	.-1312   	; 0xff4 <vPortYield>
    1514:	9e cf       	rjmp	.-196    	; 0x1452 <xQueueGenericSend+0x2e>
    1516:	c7 01       	movw	r24, r14
    1518:	d9 de       	rcall	.-590    	; 0x12cc <prvUnlockQueue>
    151a:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>
    151e:	99 cf       	rjmp	.-206    	; 0x1452 <xQueueGenericSend+0x2e>
    1520:	c7 01       	movw	r24, r14
    1522:	d4 de       	rcall	.-600    	; 0x12cc <prvUnlockQueue>
    1524:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	29 96       	adiw	r28, 0x09	; 9
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	ff 90       	pop	r15
    1540:	ef 90       	pop	r14
    1542:	df 90       	pop	r13
    1544:	cf 90       	pop	r12
    1546:	08 95       	ret

00001548 <prvInitialiseMutex>:
    1548:	0f 93       	push	r16
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	69 f0       	breq	.+26     	; 0x1568 <prvInitialiseMutex+0x20>
    154e:	fc 01       	movw	r30, r24
    1550:	15 82       	std	Z+5, r1	; 0x05
    1552:	14 82       	std	Z+4, r1	; 0x04
    1554:	11 82       	std	Z+1, r1	; 0x01
    1556:	10 82       	st	Z, r1
    1558:	16 82       	std	Z+6, r1	; 0x06
    155a:	00 e0       	ldi	r16, 0x00	; 0
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	a9 01       	movw	r20, r18
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	5e df       	rcall	.-324    	; 0x1424 <xQueueGenericSend>
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <xQueueCreateMutex>:
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	48 2f       	mov	r20, r24
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	33 df       	rcall	.-410    	; 0x13de <xQueueGenericCreate>
    1578:	ec 01       	movw	r28, r24
    157a:	e6 df       	rcall	.-52     	; 0x1548 <prvInitialiseMutex>
    157c:	ce 01       	movw	r24, r28
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <xQueueGenericSendFromISR>:
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	8a 01       	movw	r16, r20
    1592:	fc 01       	movw	r30, r24
    1594:	56 8d       	ldd	r21, Z+30	; 0x1e
    1596:	37 8d       	ldd	r19, Z+31	; 0x1f
    1598:	53 17       	cp	r21, r19
    159a:	10 f0       	brcs	.+4      	; 0x15a0 <xQueueGenericSendFromISR+0x1c>
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	f9 f4       	brne	.+62     	; 0x15de <xQueueGenericSendFromISR+0x5a>
    15a0:	42 2f       	mov	r20, r18
    15a2:	78 01       	movw	r14, r16
    15a4:	ec 01       	movw	r28, r24
    15a6:	1a a1       	ldd	r17, Y+34	; 0x22
    15a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15aa:	ce 01       	movw	r24, r28
    15ac:	16 de       	rcall	.-980    	; 0x11da <prvCopyDataToQueue>
    15ae:	1f 3f       	cpi	r17, 0xFF	; 255
    15b0:	81 f4       	brne	.+32     	; 0x15d2 <xQueueGenericSendFromISR+0x4e>
    15b2:	8b 89       	ldd	r24, Y+19	; 0x13
    15b4:	88 23       	and	r24, r24
    15b6:	a9 f0       	breq	.+42     	; 0x15e2 <xQueueGenericSendFromISR+0x5e>
    15b8:	ce 01       	movw	r24, r28
    15ba:	43 96       	adiw	r24, 0x13	; 19
    15bc:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <xTaskRemoveFromEventList>
    15c0:	88 23       	and	r24, r24
    15c2:	89 f0       	breq	.+34     	; 0x15e6 <xQueueGenericSendFromISR+0x62>
    15c4:	e1 14       	cp	r14, r1
    15c6:	f1 04       	cpc	r15, r1
    15c8:	81 f0       	breq	.+32     	; 0x15ea <xQueueGenericSendFromISR+0x66>
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	f7 01       	movw	r30, r14
    15ce:	80 83       	st	Z, r24
    15d0:	0d c0       	rjmp	.+26     	; 0x15ec <xQueueGenericSendFromISR+0x68>
    15d2:	ff 24       	eor	r15, r15
    15d4:	f3 94       	inc	r15
    15d6:	f1 0e       	add	r15, r17
    15d8:	fa a2       	std	Y+34, r15	; 0x22
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <xQueueGenericSendFromISR+0x68>
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	05 c0       	rjmp	.+10     	; 0x15ec <xQueueGenericSendFromISR+0x68>
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <xQueueGenericSendFromISR+0x68>
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <xQueueGenericSendFromISR+0x68>
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	08 95       	ret

000015fa <xQueueReceive>:
    15fa:	cf 92       	push	r12
    15fc:	df 92       	push	r13
    15fe:	ef 92       	push	r14
    1600:	ff 92       	push	r15
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	29 97       	sbiw	r28, 0x09	; 9
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	8c 01       	movw	r16, r24
    161c:	6b 01       	movw	r12, r22
    161e:	2e 83       	std	Y+6, r18	; 0x06
    1620:	3f 83       	std	Y+7, r19	; 0x07
    1622:	48 87       	std	Y+8, r20	; 0x08
    1624:	59 87       	std	Y+9, r21	; 0x09
    1626:	e1 2c       	mov	r14, r1
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	0f 92       	push	r0
    162e:	f8 01       	movw	r30, r16
    1630:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1632:	ff 20       	and	r15, r15
    1634:	99 f0       	breq	.+38     	; 0x165c <xQueueReceive+0x62>
    1636:	b6 01       	movw	r22, r12
    1638:	c8 01       	movw	r24, r16
    163a:	2e de       	rcall	.-932    	; 0x1298 <prvCopyDataFromQueue>
    163c:	fa 94       	dec	r15
    163e:	f8 01       	movw	r30, r16
    1640:	f6 8e       	std	Z+30, r15	; 0x1e
    1642:	80 85       	ldd	r24, Z+8	; 0x08
    1644:	88 23       	and	r24, r24
    1646:	31 f0       	breq	.+12     	; 0x1654 <xQueueReceive+0x5a>
    1648:	c8 01       	movw	r24, r16
    164a:	08 96       	adiw	r24, 0x08	; 8
    164c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <xTaskRemoveFromEventList>
    1650:	81 11       	cpse	r24, r1
    1652:	d0 dc       	rcall	.-1632   	; 0xff4 <vPortYield>
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	4f c0       	rjmp	.+158    	; 0x16fa <xQueueReceive+0x100>
    165c:	8e 81       	ldd	r24, Y+6	; 0x06
    165e:	9f 81       	ldd	r25, Y+7	; 0x07
    1660:	a8 85       	ldd	r26, Y+8	; 0x08
    1662:	b9 85       	ldd	r27, Y+9	; 0x09
    1664:	89 2b       	or	r24, r25
    1666:	8a 2b       	or	r24, r26
    1668:	8b 2b       	or	r24, r27
    166a:	21 f4       	brne	.+8      	; 0x1674 <xQueueReceive+0x7a>
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	43 c0       	rjmp	.+134    	; 0x16fa <xQueueReceive+0x100>
    1674:	e1 10       	cpse	r14, r1
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <xQueueReceive+0x8a>
    1678:	ce 01       	movw	r24, r28
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	0e 94 29 17 	call	0x2e52	; 0x2e52 <vTaskInternalSetTimeOutState>
    1680:	ee 24       	eor	r14, r14
    1682:	e3 94       	inc	r14
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	e1 d6       	rcall	.+3522   	; 0x244c <vTaskSuspendAll>
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	0f 92       	push	r0
    1690:	f8 01       	movw	r30, r16
    1692:	81 a1       	ldd	r24, Z+33	; 0x21
    1694:	8f 3f       	cpi	r24, 0xFF	; 255
    1696:	09 f4       	brne	.+2      	; 0x169a <xQueueReceive+0xa0>
    1698:	11 a2       	std	Z+33, r1	; 0x21
    169a:	f8 01       	movw	r30, r16
    169c:	82 a1       	ldd	r24, Z+34	; 0x22
    169e:	8f 3f       	cpi	r24, 0xFF	; 255
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <xQueueReceive+0xaa>
    16a2:	12 a2       	std	Z+34, r1	; 0x22
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	be 01       	movw	r22, r28
    16aa:	6a 5f       	subi	r22, 0xFA	; 250
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	ce 01       	movw	r24, r28
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <xTaskCheckForTimeOut>
    16b6:	81 11       	cpse	r24, r1
    16b8:	17 c0       	rjmp	.+46     	; 0x16e8 <xQueueReceive+0xee>
    16ba:	c8 01       	movw	r24, r16
    16bc:	73 dd       	rcall	.-1306   	; 0x11a4 <prvIsQueueEmpty>
    16be:	88 23       	and	r24, r24
    16c0:	79 f0       	breq	.+30     	; 0x16e0 <xQueueReceive+0xe6>
    16c2:	4e 81       	ldd	r20, Y+6	; 0x06
    16c4:	5f 81       	ldd	r21, Y+7	; 0x07
    16c6:	68 85       	ldd	r22, Y+8	; 0x08
    16c8:	79 85       	ldd	r23, Y+9	; 0x09
    16ca:	c8 01       	movw	r24, r16
    16cc:	43 96       	adiw	r24, 0x13	; 19
    16ce:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vTaskPlaceOnEventList>
    16d2:	c8 01       	movw	r24, r16
    16d4:	fb dd       	rcall	.-1034   	; 0x12cc <prvUnlockQueue>
    16d6:	fa d7       	rcall	.+4084   	; 0x26cc <xTaskResumeAll>
    16d8:	81 11       	cpse	r24, r1
    16da:	a6 cf       	rjmp	.-180    	; 0x1628 <xQueueReceive+0x2e>
    16dc:	8b dc       	rcall	.-1770   	; 0xff4 <vPortYield>
    16de:	a4 cf       	rjmp	.-184    	; 0x1628 <xQueueReceive+0x2e>
    16e0:	c8 01       	movw	r24, r16
    16e2:	f4 dd       	rcall	.-1048   	; 0x12cc <prvUnlockQueue>
    16e4:	f3 d7       	rcall	.+4070   	; 0x26cc <xTaskResumeAll>
    16e6:	a0 cf       	rjmp	.-192    	; 0x1628 <xQueueReceive+0x2e>
    16e8:	c8 01       	movw	r24, r16
    16ea:	f0 dd       	rcall	.-1056   	; 0x12cc <prvUnlockQueue>
    16ec:	ef d7       	rcall	.+4062   	; 0x26cc <xTaskResumeAll>
    16ee:	c8 01       	movw	r24, r16
    16f0:	59 dd       	rcall	.-1358   	; 0x11a4 <prvIsQueueEmpty>
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <xQueueReceive+0xfe>
    16f6:	98 cf       	rjmp	.-208    	; 0x1628 <xQueueReceive+0x2e>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	29 96       	adiw	r28, 0x09	; 9
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	08 95       	ret

00001718 <xQueueSemaphoreTake>:
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	29 97       	sbiw	r28, 0x09	; 9
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	8c 01       	movw	r16, r24
    1736:	4e 83       	std	Y+6, r20	; 0x06
    1738:	5f 83       	std	Y+7, r21	; 0x07
    173a:	68 87       	std	Y+8, r22	; 0x08
    173c:	79 87       	std	Y+9, r23	; 0x09
    173e:	e1 2c       	mov	r14, r1
    1740:	f1 2c       	mov	r15, r1
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	0f 92       	push	r0
    1748:	f8 01       	movw	r30, r16
    174a:	86 8d       	ldd	r24, Z+30	; 0x1e
    174c:	88 23       	and	r24, r24
    174e:	c9 f0       	breq	.+50     	; 0x1782 <xQueueSemaphoreTake+0x6a>
    1750:	81 50       	subi	r24, 0x01	; 1
    1752:	86 8f       	std	Z+30, r24	; 0x1e
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	89 2b       	or	r24, r25
    175a:	29 f4       	brne	.+10     	; 0x1766 <xQueueSemaphoreTake+0x4e>
    175c:	0e 94 2a 19 	call	0x3254	; 0x3254 <pvTaskIncrementMutexHeldCount>
    1760:	f8 01       	movw	r30, r16
    1762:	95 83       	std	Z+5, r25	; 0x05
    1764:	84 83       	std	Z+4, r24	; 0x04
    1766:	f8 01       	movw	r30, r16
    1768:	80 85       	ldd	r24, Z+8	; 0x08
    176a:	88 23       	and	r24, r24
    176c:	31 f0       	breq	.+12     	; 0x177a <xQueueSemaphoreTake+0x62>
    176e:	c8 01       	movw	r24, r16
    1770:	08 96       	adiw	r24, 0x08	; 8
    1772:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <xTaskRemoveFromEventList>
    1776:	81 11       	cpse	r24, r1
    1778:	3d dc       	rcall	.-1926   	; 0xff4 <vPortYield>
    177a:	0f 90       	pop	r0
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	6f c0       	rjmp	.+222    	; 0x1860 <xQueueSemaphoreTake+0x148>
    1782:	8e 81       	ldd	r24, Y+6	; 0x06
    1784:	9f 81       	ldd	r25, Y+7	; 0x07
    1786:	a8 85       	ldd	r26, Y+8	; 0x08
    1788:	b9 85       	ldd	r27, Y+9	; 0x09
    178a:	89 2b       	or	r24, r25
    178c:	8a 2b       	or	r24, r26
    178e:	8b 2b       	or	r24, r27
    1790:	21 f4       	brne	.+8      	; 0x179a <xQueueSemaphoreTake+0x82>
    1792:	0f 90       	pop	r0
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	63 c0       	rjmp	.+198    	; 0x1860 <xQueueSemaphoreTake+0x148>
    179a:	f1 10       	cpse	r15, r1
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <xQueueSemaphoreTake+0x92>
    179e:	ce 01       	movw	r24, r28
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	0e 94 29 17 	call	0x2e52	; 0x2e52 <vTaskInternalSetTimeOutState>
    17a6:	ff 24       	eor	r15, r15
    17a8:	f3 94       	inc	r15
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	4e d6       	rcall	.+3228   	; 0x244c <vTaskSuspendAll>
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	0f 92       	push	r0
    17b6:	f8 01       	movw	r30, r16
    17b8:	81 a1       	ldd	r24, Z+33	; 0x21
    17ba:	8f 3f       	cpi	r24, 0xFF	; 255
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <xQueueSemaphoreTake+0xa8>
    17be:	11 a2       	std	Z+33, r1	; 0x21
    17c0:	f8 01       	movw	r30, r16
    17c2:	82 a1       	ldd	r24, Z+34	; 0x22
    17c4:	8f 3f       	cpi	r24, 0xFF	; 255
    17c6:	09 f4       	brne	.+2      	; 0x17ca <xQueueSemaphoreTake+0xb2>
    17c8:	12 a2       	std	Z+34, r1	; 0x22
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	be 01       	movw	r22, r28
    17d0:	6a 5f       	subi	r22, 0xFA	; 250
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <xTaskCheckForTimeOut>
    17dc:	81 11       	cpse	r24, r1
    17de:	26 c0       	rjmp	.+76     	; 0x182c <xQueueSemaphoreTake+0x114>
    17e0:	c8 01       	movw	r24, r16
    17e2:	e0 dc       	rcall	.-1600   	; 0x11a4 <prvIsQueueEmpty>
    17e4:	88 23       	and	r24, r24
    17e6:	f1 f0       	breq	.+60     	; 0x1824 <xQueueSemaphoreTake+0x10c>
    17e8:	f8 01       	movw	r30, r16
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	89 2b       	or	r24, r25
    17f0:	51 f4       	brne	.+20     	; 0x1806 <xQueueSemaphoreTake+0xee>
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	0f 92       	push	r0
    17f8:	84 81       	ldd	r24, Z+4	; 0x04
    17fa:	95 81       	ldd	r25, Z+5	; 0x05
    17fc:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <xTaskPriorityInherit>
    1800:	e8 2e       	mov	r14, r24
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	4e 81       	ldd	r20, Y+6	; 0x06
    1808:	5f 81       	ldd	r21, Y+7	; 0x07
    180a:	68 85       	ldd	r22, Y+8	; 0x08
    180c:	79 85       	ldd	r23, Y+9	; 0x09
    180e:	c8 01       	movw	r24, r16
    1810:	43 96       	adiw	r24, 0x13	; 19
    1812:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <vTaskPlaceOnEventList>
    1816:	c8 01       	movw	r24, r16
    1818:	59 dd       	rcall	.-1358   	; 0x12cc <prvUnlockQueue>
    181a:	58 d7       	rcall	.+3760   	; 0x26cc <xTaskResumeAll>
    181c:	81 11       	cpse	r24, r1
    181e:	91 cf       	rjmp	.-222    	; 0x1742 <xQueueSemaphoreTake+0x2a>
    1820:	e9 db       	rcall	.-2094   	; 0xff4 <vPortYield>
    1822:	8f cf       	rjmp	.-226    	; 0x1742 <xQueueSemaphoreTake+0x2a>
    1824:	c8 01       	movw	r24, r16
    1826:	52 dd       	rcall	.-1372   	; 0x12cc <prvUnlockQueue>
    1828:	51 d7       	rcall	.+3746   	; 0x26cc <xTaskResumeAll>
    182a:	8b cf       	rjmp	.-234    	; 0x1742 <xQueueSemaphoreTake+0x2a>
    182c:	c8 01       	movw	r24, r16
    182e:	4e dd       	rcall	.-1380   	; 0x12cc <prvUnlockQueue>
    1830:	4d d7       	rcall	.+3738   	; 0x26cc <xTaskResumeAll>
    1832:	c8 01       	movw	r24, r16
    1834:	b7 dc       	rcall	.-1682   	; 0x11a4 <prvIsQueueEmpty>
    1836:	88 23       	and	r24, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <xQueueSemaphoreTake+0x124>
    183a:	83 cf       	rjmp	.-250    	; 0x1742 <xQueueSemaphoreTake+0x2a>
    183c:	ee 20       	and	r14, r14
    183e:	79 f0       	breq	.+30     	; 0x185e <xQueueSemaphoreTake+0x146>
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	0f 92       	push	r0
    1846:	c8 01       	movw	r24, r16
    1848:	9d dc       	rcall	.-1734   	; 0x1184 <prvGetDisinheritPriorityAfterTimeout>
    184a:	68 2f       	mov	r22, r24
    184c:	f8 01       	movw	r30, r16
    184e:	84 81       	ldd	r24, Z+4	; 0x04
    1850:	95 81       	ldd	r25, Z+5	; 0x05
    1852:	0e 94 99 18 	call	0x3132	; 0x3132 <vTaskPriorityDisinheritAfterTimeout>
    1856:	0f 90       	pop	r0
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <xQueueSemaphoreTake+0x148>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	29 96       	adiw	r28, 0x09	; 9
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	ef 90       	pop	r14
    1878:	08 95       	ret

0000187a <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	0f 92       	push	r0
    1886:	89 a1       	ldd	r24, Y+33	; 0x21
    1888:	8f 3f       	cpi	r24, 0xFF	; 255
    188a:	09 f4       	brne	.+2      	; 0x188e <vQueueWaitForMessageRestricted+0x14>
    188c:	19 a2       	std	Y+33, r1	; 0x21
    188e:	8a a1       	ldd	r24, Y+34	; 0x22
    1890:	8f 3f       	cpi	r24, 0xFF	; 255
    1892:	09 f4       	brne	.+2      	; 0x1896 <vQueueWaitForMessageRestricted+0x1c>
    1894:	1a a2       	std	Y+34, r1	; 0x22
    1896:	0f 90       	pop	r0
    1898:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    189a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    189c:	81 11       	cpse	r24, r1
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18a0:	ce 01       	movw	r24, r28
    18a2:	43 96       	adiw	r24, 0x13	; 19
    18a4:	0e 94 88 15 	call	0x2b10	; 0x2b10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    18a8:	ce 01       	movw	r24, r28
    18aa:	10 dd       	rcall	.-1504   	; 0x12cc <prvUnlockQueue>
    }
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    18b2:	fc 01       	movw	r30, r24
    18b4:	44 81       	ldd	r20, Z+4	; 0x04
    18b6:	55 81       	ldd	r21, Z+5	; 0x05
    18b8:	22 81       	ldd	r18, Z+2	; 0x02
    18ba:	33 81       	ldd	r19, Z+3	; 0x03
    18bc:	24 0f       	add	r18, r20
    18be:	35 1f       	adc	r19, r21
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	b9 01       	movw	r22, r18
    18c6:	68 1b       	sub	r22, r24
    18c8:	79 0b       	sbc	r23, r25
    18ca:	cb 01       	movw	r24, r22
    18cc:	64 17       	cp	r22, r20
    18ce:	75 07       	cpc	r23, r21
    18d0:	10 f0       	brcs	.+4      	; 0x18d6 <prvBytesInBuffer+0x24>
    18d2:	84 1b       	sub	r24, r20
    18d4:	95 0b       	sbc	r25, r21
    18d6:	08 95       	ret

000018d8 <prvInitialiseNewStreamBuffer>:
    18d8:	0f 93       	push	r16
    18da:	fc 01       	movw	r30, r24
    18dc:	8f e0       	ldi	r24, 0x0F	; 15
    18de:	df 01       	movw	r26, r30
    18e0:	1d 92       	st	X+, r1
    18e2:	8a 95       	dec	r24
    18e4:	e9 f7       	brne	.-6      	; 0x18e0 <prvInitialiseNewStreamBuffer+0x8>
    18e6:	75 87       	std	Z+13, r23	; 0x0d
    18e8:	64 87       	std	Z+12, r22	; 0x0c
    18ea:	55 83       	std	Z+5, r21	; 0x05
    18ec:	44 83       	std	Z+4, r20	; 0x04
    18ee:	37 83       	std	Z+7, r19	; 0x07
    18f0:	26 83       	std	Z+6, r18	; 0x06
    18f2:	06 87       	std	Z+14, r16	; 0x0e
    18f4:	0f 91       	pop	r16
    18f6:	08 95       	ret

000018f8 <prvWriteBytesToBuffer>:
    18f8:	af 92       	push	r10
    18fa:	bf 92       	push	r11
    18fc:	cf 92       	push	r12
    18fe:	df 92       	push	r13
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	6c 01       	movw	r12, r24
    190e:	5b 01       	movw	r10, r22
    1910:	7a 01       	movw	r14, r20
    1912:	fc 01       	movw	r30, r24
    1914:	c2 81       	ldd	r28, Z+2	; 0x02
    1916:	d3 81       	ldd	r29, Z+3	; 0x03
    1918:	04 81       	ldd	r16, Z+4	; 0x04
    191a:	15 81       	ldd	r17, Z+5	; 0x05
    191c:	0c 1b       	sub	r16, r28
    191e:	1d 0b       	sbc	r17, r29
    1920:	40 17       	cp	r20, r16
    1922:	51 07       	cpc	r21, r17
    1924:	08 f4       	brcc	.+2      	; 0x1928 <prvWriteBytesToBuffer+0x30>
    1926:	8a 01       	movw	r16, r20
    1928:	f6 01       	movw	r30, r12
    192a:	84 85       	ldd	r24, Z+12	; 0x0c
    192c:	95 85       	ldd	r25, Z+13	; 0x0d
    192e:	a8 01       	movw	r20, r16
    1930:	b5 01       	movw	r22, r10
    1932:	8c 0f       	add	r24, r28
    1934:	9d 1f       	adc	r25, r29
    1936:	0e 94 7d 39 	call	0x72fa	; 0x72fa <memcpy>
    193a:	0e 15       	cp	r16, r14
    193c:	1f 05       	cpc	r17, r15
    193e:	58 f4       	brcc	.+22     	; 0x1956 <prvWriteBytesToBuffer+0x5e>
    1940:	a7 01       	movw	r20, r14
    1942:	40 1b       	sub	r20, r16
    1944:	51 0b       	sbc	r21, r17
    1946:	b5 01       	movw	r22, r10
    1948:	60 0f       	add	r22, r16
    194a:	71 1f       	adc	r23, r17
    194c:	f6 01       	movw	r30, r12
    194e:	84 85       	ldd	r24, Z+12	; 0x0c
    1950:	95 85       	ldd	r25, Z+13	; 0x0d
    1952:	0e 94 7d 39 	call	0x72fa	; 0x72fa <memcpy>
    1956:	ce 01       	movw	r24, r28
    1958:	8e 0d       	add	r24, r14
    195a:	9f 1d       	adc	r25, r15
    195c:	f6 01       	movw	r30, r12
    195e:	24 81       	ldd	r18, Z+4	; 0x04
    1960:	35 81       	ldd	r19, Z+5	; 0x05
    1962:	82 17       	cp	r24, r18
    1964:	93 07       	cpc	r25, r19
    1966:	10 f0       	brcs	.+4      	; 0x196c <prvWriteBytesToBuffer+0x74>
    1968:	82 1b       	sub	r24, r18
    196a:	93 0b       	sbc	r25, r19
    196c:	f6 01       	movw	r30, r12
    196e:	93 83       	std	Z+3, r25	; 0x03
    1970:	82 83       	std	Z+2, r24	; 0x02
    1972:	c7 01       	movw	r24, r14
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	df 90       	pop	r13
    1982:	cf 90       	pop	r12
    1984:	bf 90       	pop	r11
    1986:	af 90       	pop	r10
    1988:	08 95       	ret

0000198a <prvWriteMessageToBuffer>:
    198a:	cf 92       	push	r12
    198c:	df 92       	push	r13
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	1f 92       	push	r1
    199c:	1f 92       	push	r1
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	7c 01       	movw	r14, r24
    19a4:	6b 01       	movw	r12, r22
    19a6:	5a 83       	std	Y+2, r21	; 0x02
    19a8:	49 83       	std	Y+1, r20	; 0x01
    19aa:	21 15       	cp	r18, r1
    19ac:	31 05       	cpc	r19, r1
    19ae:	c1 f0       	breq	.+48     	; 0x19e0 <prvWriteMessageToBuffer+0x56>
    19b0:	fc 01       	movw	r30, r24
    19b2:	86 85       	ldd	r24, Z+14	; 0x0e
    19b4:	80 fd       	sbrc	r24, 0
    19b6:	08 c0       	rjmp	.+16     	; 0x19c8 <prvWriteMessageToBuffer+0x3e>
    19b8:	42 17       	cp	r20, r18
    19ba:	53 07       	cpc	r21, r19
    19bc:	08 f4       	brcc	.+2      	; 0x19c0 <prvWriteMessageToBuffer+0x36>
    19be:	9a 01       	movw	r18, r20
    19c0:	3a 83       	std	Y+2, r19	; 0x02
    19c2:	29 83       	std	Y+1, r18	; 0x01
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	0f c0       	rjmp	.+30     	; 0x19e6 <prvWriteMessageToBuffer+0x5c>
    19c8:	20 17       	cp	r18, r16
    19ca:	31 07       	cpc	r19, r17
    19cc:	58 f0       	brcs	.+22     	; 0x19e4 <prvWriteMessageToBuffer+0x5a>
    19ce:	42 e0       	ldi	r20, 0x02	; 2
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	be 01       	movw	r22, r28
    19d4:	6f 5f       	subi	r22, 0xFF	; 255
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	c7 01       	movw	r24, r14
    19da:	8e df       	rcall	.-228    	; 0x18f8 <prvWriteBytesToBuffer>
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <prvWriteMessageToBuffer+0x5c>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <prvWriteMessageToBuffer+0x5c>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	88 23       	and	r24, r24
    19e8:	31 f0       	breq	.+12     	; 0x19f6 <prvWriteMessageToBuffer+0x6c>
    19ea:	49 81       	ldd	r20, Y+1	; 0x01
    19ec:	5a 81       	ldd	r21, Y+2	; 0x02
    19ee:	b6 01       	movw	r22, r12
    19f0:	c7 01       	movw	r24, r14
    19f2:	82 df       	rcall	.-252    	; 0x18f8 <prvWriteBytesToBuffer>
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <prvWriteMessageToBuffer+0x70>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	ef 90       	pop	r14
    1a0a:	df 90       	pop	r13
    1a0c:	cf 90       	pop	r12
    1a0e:	08 95       	ret

00001a10 <prvReadBytesFromBuffer>:
    1a10:	af 92       	push	r10
    1a12:	bf 92       	push	r11
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	7c 01       	movw	r14, r24
    1a26:	5b 01       	movw	r10, r22
    1a28:	e9 01       	movw	r28, r18
    1a2a:	42 17       	cp	r20, r18
    1a2c:	53 07       	cpc	r21, r19
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <prvReadBytesFromBuffer+0x22>
    1a30:	ea 01       	movw	r28, r20
    1a32:	20 97       	sbiw	r28, 0x00	; 0
    1a34:	81 f1       	breq	.+96     	; 0x1a96 <prvReadBytesFromBuffer+0x86>
    1a36:	f7 01       	movw	r30, r14
    1a38:	00 81       	ld	r16, Z
    1a3a:	11 81       	ldd	r17, Z+1	; 0x01
    1a3c:	84 81       	ldd	r24, Z+4	; 0x04
    1a3e:	95 81       	ldd	r25, Z+5	; 0x05
    1a40:	80 1b       	sub	r24, r16
    1a42:	91 0b       	sbc	r25, r17
    1a44:	6e 01       	movw	r12, r28
    1a46:	8c 17       	cp	r24, r28
    1a48:	9d 07       	cpc	r25, r29
    1a4a:	08 f4       	brcc	.+2      	; 0x1a4e <prvReadBytesFromBuffer+0x3e>
    1a4c:	6c 01       	movw	r12, r24
    1a4e:	f7 01       	movw	r30, r14
    1a50:	64 85       	ldd	r22, Z+12	; 0x0c
    1a52:	75 85       	ldd	r23, Z+13	; 0x0d
    1a54:	60 0f       	add	r22, r16
    1a56:	71 1f       	adc	r23, r17
    1a58:	a6 01       	movw	r20, r12
    1a5a:	c5 01       	movw	r24, r10
    1a5c:	0e 94 7d 39 	call	0x72fa	; 0x72fa <memcpy>
    1a60:	cc 16       	cp	r12, r28
    1a62:	dd 06       	cpc	r13, r29
    1a64:	58 f4       	brcc	.+22     	; 0x1a7c <prvReadBytesFromBuffer+0x6c>
    1a66:	ae 01       	movw	r20, r28
    1a68:	4c 19       	sub	r20, r12
    1a6a:	5d 09       	sbc	r21, r13
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	64 85       	ldd	r22, Z+12	; 0x0c
    1a70:	75 85       	ldd	r23, Z+13	; 0x0d
    1a72:	c5 01       	movw	r24, r10
    1a74:	8c 0d       	add	r24, r12
    1a76:	9d 1d       	adc	r25, r13
    1a78:	0e 94 7d 39 	call	0x72fa	; 0x72fa <memcpy>
    1a7c:	0c 0f       	add	r16, r28
    1a7e:	1d 1f       	adc	r17, r29
    1a80:	f7 01       	movw	r30, r14
    1a82:	84 81       	ldd	r24, Z+4	; 0x04
    1a84:	95 81       	ldd	r25, Z+5	; 0x05
    1a86:	08 17       	cp	r16, r24
    1a88:	19 07       	cpc	r17, r25
    1a8a:	10 f0       	brcs	.+4      	; 0x1a90 <prvReadBytesFromBuffer+0x80>
    1a8c:	08 1b       	sub	r16, r24
    1a8e:	19 0b       	sbc	r17, r25
    1a90:	f7 01       	movw	r30, r14
    1a92:	11 83       	std	Z+1, r17	; 0x01
    1a94:	00 83       	st	Z, r16
    1a96:	ce 01       	movw	r24, r28
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	ff 90       	pop	r15
    1aa2:	ef 90       	pop	r14
    1aa4:	df 90       	pop	r13
    1aa6:	cf 90       	pop	r12
    1aa8:	bf 90       	pop	r11
    1aaa:	af 90       	pop	r10
    1aac:	08 95       	ret

00001aae <prvReadMessageFromBuffer>:
    1aae:	6f 92       	push	r6
    1ab0:	7f 92       	push	r7
    1ab2:	8f 92       	push	r8
    1ab4:	9f 92       	push	r9
    1ab6:	af 92       	push	r10
    1ab8:	bf 92       	push	r11
    1aba:	cf 92       	push	r12
    1abc:	df 92       	push	r13
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	1f 92       	push	r1
    1acc:	1f 92       	push	r1
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	6c 01       	movw	r12, r24
    1ad4:	4b 01       	movw	r8, r22
    1ad6:	5a 01       	movw	r10, r20
    1ad8:	79 01       	movw	r14, r18
    1ada:	01 15       	cp	r16, r1
    1adc:	11 05       	cpc	r17, r1
    1ade:	b1 f0       	breq	.+44     	; 0x1b0c <prvReadMessageFromBuffer+0x5e>
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	60 80       	ld	r6, Z
    1ae4:	71 80       	ldd	r7, Z+1	; 0x01
    1ae6:	a8 01       	movw	r20, r16
    1ae8:	be 01       	movw	r22, r28
    1aea:	6f 5f       	subi	r22, 0xFF	; 255
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	90 df       	rcall	.-224    	; 0x1a10 <prvReadBytesFromBuffer>
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	e0 1a       	sub	r14, r16
    1af6:	f1 0a       	sbc	r15, r17
    1af8:	a8 16       	cp	r10, r24
    1afa:	b9 06       	cpc	r11, r25
    1afc:	30 f4       	brcc	.+12     	; 0x1b0a <prvReadMessageFromBuffer+0x5c>
    1afe:	f6 01       	movw	r30, r12
    1b00:	71 82       	std	Z+1, r7	; 0x01
    1b02:	60 82       	st	Z, r6
    1b04:	a1 2c       	mov	r10, r1
    1b06:	b1 2c       	mov	r11, r1
    1b08:	01 c0       	rjmp	.+2      	; 0x1b0c <prvReadMessageFromBuffer+0x5e>
    1b0a:	5c 01       	movw	r10, r24
    1b0c:	97 01       	movw	r18, r14
    1b0e:	a5 01       	movw	r20, r10
    1b10:	b4 01       	movw	r22, r8
    1b12:	c6 01       	movw	r24, r12
    1b14:	7d df       	rcall	.-262    	; 0x1a10 <prvReadBytesFromBuffer>
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	df 90       	pop	r13
    1b28:	cf 90       	pop	r12
    1b2a:	bf 90       	pop	r11
    1b2c:	af 90       	pop	r10
    1b2e:	9f 90       	pop	r9
    1b30:	8f 90       	pop	r8
    1b32:	7f 90       	pop	r7
    1b34:	6f 90       	pop	r6
    1b36:	08 95       	ret

00001b38 <xStreamBufferGenericCreate>:
    1b38:	cf 92       	push	r12
    1b3a:	df 92       	push	r13
    1b3c:	ef 92       	push	r14
    1b3e:	ff 92       	push	r15
    1b40:	0f 93       	push	r16
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	ec 01       	movw	r28, r24
    1b48:	6b 01       	movw	r12, r22
    1b4a:	41 30       	cpi	r20, 0x01	; 1
    1b4c:	11 f4       	brne	.+4      	; 0x1b52 <xStreamBufferGenericCreate+0x1a>
    1b4e:	01 e0       	ldi	r16, 0x01	; 1
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <xStreamBufferGenericCreate+0x1c>
    1b52:	00 e0       	ldi	r16, 0x00	; 0
    1b54:	c1 14       	cp	r12, r1
    1b56:	d1 04       	cpc	r13, r1
    1b58:	19 f4       	brne	.+6      	; 0x1b60 <xStreamBufferGenericCreate+0x28>
    1b5a:	cc 24       	eor	r12, r12
    1b5c:	c3 94       	inc	r12
    1b5e:	d1 2c       	mov	r13, r1
    1b60:	ce 01       	movw	r24, r28
    1b62:	40 96       	adiw	r24, 0x10	; 16
    1b64:	c8 17       	cp	r28, r24
    1b66:	d9 07       	cpc	r29, r25
    1b68:	20 f4       	brcc	.+8      	; 0x1b72 <xStreamBufferGenericCreate+0x3a>
    1b6a:	21 96       	adiw	r28, 0x01	; 1
    1b6c:	8f d8       	rcall	.-3810   	; 0xc8c <pvPortMalloc>
    1b6e:	7c 01       	movw	r14, r24
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <xStreamBufferGenericCreate+0x3e>
    1b72:	e1 2c       	mov	r14, r1
    1b74:	f1 2c       	mov	r15, r1
    1b76:	e1 14       	cp	r14, r1
    1b78:	f1 04       	cpc	r15, r1
    1b7a:	39 f0       	breq	.+14     	; 0x1b8a <xStreamBufferGenericCreate+0x52>
    1b7c:	96 01       	movw	r18, r12
    1b7e:	ae 01       	movw	r20, r28
    1b80:	b7 01       	movw	r22, r14
    1b82:	61 5f       	subi	r22, 0xF1	; 241
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	c7 01       	movw	r24, r14
    1b88:	a7 de       	rcall	.-690    	; 0x18d8 <prvInitialiseNewStreamBuffer>
    1b8a:	c7 01       	movw	r24, r14
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	0f 91       	pop	r16
    1b92:	ff 90       	pop	r15
    1b94:	ef 90       	pop	r14
    1b96:	df 90       	pop	r13
    1b98:	cf 90       	pop	r12
    1b9a:	08 95       	ret

00001b9c <xStreamBufferReset>:
    1b9c:	0f 93       	push	r16
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	0f 92       	push	r0
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	20 85       	ldd	r18, Z+8	; 0x08
    1ba8:	31 85       	ldd	r19, Z+9	; 0x09
    1baa:	23 2b       	or	r18, r19
    1bac:	71 f4       	brne	.+28     	; 0x1bca <xStreamBufferReset+0x2e>
    1bae:	22 85       	ldd	r18, Z+10	; 0x0a
    1bb0:	33 85       	ldd	r19, Z+11	; 0x0b
    1bb2:	23 2b       	or	r18, r19
    1bb4:	61 f4       	brne	.+24     	; 0x1bce <xStreamBufferReset+0x32>
    1bb6:	26 81       	ldd	r18, Z+6	; 0x06
    1bb8:	37 81       	ldd	r19, Z+7	; 0x07
    1bba:	44 81       	ldd	r20, Z+4	; 0x04
    1bbc:	55 81       	ldd	r21, Z+5	; 0x05
    1bbe:	64 85       	ldd	r22, Z+12	; 0x0c
    1bc0:	75 85       	ldd	r23, Z+13	; 0x0d
    1bc2:	06 85       	ldd	r16, Z+14	; 0x0e
    1bc4:	89 de       	rcall	.-750    	; 0x18d8 <prvInitialiseNewStreamBuffer>
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	03 c0       	rjmp	.+6      	; 0x1bd0 <xStreamBufferReset+0x34>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <xStreamBufferReset+0x34>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	0f 91       	pop	r16
    1bd6:	08 95       	ret

00001bd8 <xStreamBufferSpacesAvailable>:
    1bd8:	fc 01       	movw	r30, r24
    1bda:	24 81       	ldd	r18, Z+4	; 0x04
    1bdc:	35 81       	ldd	r19, Z+5	; 0x05
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	82 0f       	add	r24, r18
    1be4:	93 1f       	adc	r25, r19
    1be6:	42 81       	ldd	r20, Z+2	; 0x02
    1be8:	53 81       	ldd	r21, Z+3	; 0x03
    1bea:	84 1b       	sub	r24, r20
    1bec:	95 0b       	sbc	r25, r21
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	82 17       	cp	r24, r18
    1bf2:	93 07       	cpc	r25, r19
    1bf4:	10 f0       	brcs	.+4      	; 0x1bfa <xStreamBufferSpacesAvailable+0x22>
    1bf6:	82 1b       	sub	r24, r18
    1bf8:	93 0b       	sbc	r25, r19
    1bfa:	08 95       	ret

00001bfc <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1bfc:	2f 92       	push	r2
    1bfe:	3f 92       	push	r3
    1c00:	4f 92       	push	r4
    1c02:	5f 92       	push	r5
    1c04:	6f 92       	push	r6
    1c06:	7f 92       	push	r7
    1c08:	8f 92       	push	r8
    1c0a:	9f 92       	push	r9
    1c0c:	af 92       	push	r10
    1c0e:	bf 92       	push	r11
    1c10:	cf 92       	push	r12
    1c12:	df 92       	push	r13
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	2b 97       	sbiw	r28, 0x0b	; 11
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	4c 01       	movw	r8, r24
    1c32:	7b 87       	std	Y+11, r23	; 0x0b
    1c34:	6a 87       	std	Y+10, r22	; 0x0a
    1c36:	1a 01       	movw	r2, r20
    1c38:	0e 83       	std	Y+6, r16	; 0x06
    1c3a:	1f 83       	std	Y+7, r17	; 0x07
    1c3c:	28 87       	std	Y+8, r18	; 0x08
    1c3e:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1c40:	fc 01       	movw	r30, r24
    1c42:	84 81       	ldd	r24, Z+4	; 0x04
    1c44:	95 81       	ldd	r25, Z+5	; 0x05
    1c46:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c48:	26 85       	ldd	r18, Z+14	; 0x0e
    1c4a:	20 ff       	sbrs	r18, 0
    1c4c:	0c c0       	rjmp	.+24     	; 0x1c66 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c4e:	2a 01       	movw	r4, r20
    1c50:	f2 e0       	ldi	r31, 0x02	; 2
    1c52:	4f 0e       	add	r4, r31
    1c54:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1c56:	84 15       	cp	r24, r4
    1c58:	95 05       	cpc	r25, r5
    1c5a:	58 f4       	brcc	.+22     	; 0x1c72 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1c5c:	1e 82       	std	Y+6, r1	; 0x06
    1c5e:	1f 82       	std	Y+7, r1	; 0x07
    1c60:	18 86       	std	Y+8, r1	; 0x08
    1c62:	19 86       	std	Y+9, r1	; 0x09
    1c64:	06 c0       	rjmp	.+12     	; 0x1c72 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1c66:	84 17       	cp	r24, r20
    1c68:	95 07       	cpc	r25, r21
    1c6a:	10 f0       	brcs	.+4      	; 0x1c70 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1c6c:	2a 01       	movw	r4, r20
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1c70:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c72:	8e 81       	ldd	r24, Y+6	; 0x06
    1c74:	9f 81       	ldd	r25, Y+7	; 0x07
    1c76:	a8 85       	ldd	r26, Y+8	; 0x08
    1c78:	b9 85       	ldd	r27, Y+9	; 0x09
    1c7a:	89 2b       	or	r24, r25
    1c7c:	8a 2b       	or	r24, r26
    1c7e:	8b 2b       	or	r24, r27
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <xStreamBufferSend+0x88>
    1c82:	38 c0       	rjmp	.+112    	; 0x1cf4 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1c84:	ce 01       	movw	r24, r28
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	0e 94 13 17 	call	0x2e26	; 0x2e26 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1c92:	c4 01       	movw	r24, r8
    1c94:	a1 df       	rcall	.-190    	; 0x1bd8 <xStreamBufferSpacesAvailable>
    1c96:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1c98:	84 15       	cp	r24, r4
    1c9a:	95 05       	cpc	r25, r5
    1c9c:	40 f5       	brcc	.+80     	; 0x1cee <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1ca8:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <xTaskGetCurrentTaskHandle>
    1cac:	f4 01       	movw	r30, r8
    1cae:	93 87       	std	Z+11, r25	; 0x0b
    1cb0:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1cb6:	ae 80       	ldd	r10, Y+6	; 0x06
    1cb8:	bf 80       	ldd	r11, Y+7	; 0x07
    1cba:	c8 84       	ldd	r12, Y+8	; 0x08
    1cbc:	d9 84       	ldd	r13, Y+9	; 0x09
    1cbe:	e1 2c       	mov	r14, r1
    1cc0:	f1 2c       	mov	r15, r1
    1cc2:	00 e0       	ldi	r16, 0x00	; 0
    1cc4:	10 e0       	ldi	r17, 0x00	; 0
    1cc6:	98 01       	movw	r18, r16
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	ba 01       	movw	r22, r20
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	0e 94 3c 19 	call	0x3278	; 0x3278 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1cd4:	f4 01       	movw	r30, r8
    1cd6:	13 86       	std	Z+11, r1	; 0x0b
    1cd8:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1cda:	be 01       	movw	r22, r28
    1cdc:	6a 5f       	subi	r22, 0xFA	; 250
    1cde:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <xTaskCheckForTimeOut>
    1ce8:	88 23       	and	r24, r24
    1cea:	81 f2       	breq	.-96     	; 0x1c8c <xStreamBufferSend+0x90>
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
                    break;
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1cf4:	61 2c       	mov	r6, r1
    1cf6:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1cf8:	61 14       	cp	r6, r1
    1cfa:	71 04       	cpc	r7, r1
    1cfc:	19 f4       	brne	.+6      	; 0x1d04 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1cfe:	c4 01       	movw	r24, r8
    1d00:	6b df       	rcall	.-298    	; 0x1bd8 <xStreamBufferSpacesAvailable>
    1d02:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1d04:	82 01       	movw	r16, r4
    1d06:	93 01       	movw	r18, r6
    1d08:	a1 01       	movw	r20, r2
    1d0a:	6a 85       	ldd	r22, Y+10	; 0x0a
    1d0c:	7b 85       	ldd	r23, Y+11	; 0x0b
    1d0e:	c4 01       	movw	r24, r8
    1d10:	3c de       	rcall	.-904    	; 0x198a <prvWriteMessageToBuffer>
    1d12:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1d14:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1d16:	e9 f0       	breq	.+58     	; 0x1d52 <xStreamBufferSend+0x156>
    1d18:	c4 01       	movw	r24, r8
    1d1a:	cb dd       	rcall	.-1130   	; 0x18b2 <prvBytesInBuffer>
    1d1c:	f4 01       	movw	r30, r8
    1d1e:	26 81       	ldd	r18, Z+6	; 0x06
    1d20:	37 81       	ldd	r19, Z+7	; 0x07
    1d22:	82 17       	cp	r24, r18
    1d24:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1d26:	a8 f0       	brcs	.+42     	; 0x1d52 <xStreamBufferSend+0x156>
    1d28:	91 d3       	rcall	.+1826   	; 0x244c <vTaskSuspendAll>
    1d2a:	f4 01       	movw	r30, r8
    1d2c:	80 85       	ldd	r24, Z+8	; 0x08
    1d2e:	91 85       	ldd	r25, Z+9	; 0x09
    1d30:	89 2b       	or	r24, r25
    1d32:	71 f0       	breq	.+28     	; 0x1d50 <xStreamBufferSend+0x154>
    1d34:	80 85       	ldd	r24, Z+8	; 0x08
    1d36:	91 85       	ldd	r25, Z+9	; 0x09
    1d38:	e1 2c       	mov	r14, r1
    1d3a:	f1 2c       	mov	r15, r1
    1d3c:	00 e0       	ldi	r16, 0x00	; 0
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	a9 01       	movw	r20, r18
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <xTaskGenericNotify>
    1d4a:	f4 01       	movw	r30, r8
    1d4c:	11 86       	std	Z+9, r1	; 0x09
    1d4e:	10 86       	std	Z+8, r1	; 0x08
    1d50:	bd d4       	rcall	.+2426   	; 0x26cc <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1d52:	c6 01       	movw	r24, r12
    1d54:	2b 96       	adiw	r28, 0x0b	; 11
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	bf 90       	pop	r11
    1d72:	af 90       	pop	r10
    1d74:	9f 90       	pop	r9
    1d76:	8f 90       	pop	r8
    1d78:	7f 90       	pop	r7
    1d7a:	6f 90       	pop	r6
    1d7c:	5f 90       	pop	r5
    1d7e:	4f 90       	pop	r4
    1d80:	3f 90       	pop	r3
    1d82:	2f 90       	pop	r2
    1d84:	08 95       	ret

00001d86 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1d86:	af 92       	push	r10
    1d88:	bf 92       	push	r11
    1d8a:	cf 92       	push	r12
    1d8c:	df 92       	push	r13
    1d8e:	ef 92       	push	r14
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	ec 01       	movw	r28, r24
    1d9c:	7b 01       	movw	r14, r22
    1d9e:	5a 01       	movw	r10, r20
    1da0:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1da2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1da4:	80 ff       	sbrs	r24, 0
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1da8:	8a 01       	movw	r16, r20
    1daa:	0e 5f       	subi	r16, 0xFE	; 254
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1db0:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1db2:	ce 01       	movw	r24, r28
    1db4:	11 df       	rcall	.-478    	; 0x1bd8 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1db6:	9c 01       	movw	r18, r24
    1db8:	a5 01       	movw	r20, r10
    1dba:	b7 01       	movw	r22, r14
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	e5 dd       	rcall	.-1078   	; 0x198a <prvWriteMessageToBuffer>
    1dc0:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1dc2:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1dc4:	c1 f0       	breq	.+48     	; 0x1df6 <xStreamBufferSendFromISR+0x70>
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	74 dd       	rcall	.-1304   	; 0x18b2 <prvBytesInBuffer>
    1dca:	2e 81       	ldd	r18, Y+6	; 0x06
    1dcc:	3f 81       	ldd	r19, Y+7	; 0x07
    1dce:	82 17       	cp	r24, r18
    1dd0:	93 07       	cpc	r25, r19
    1dd2:	88 f0       	brcs	.+34     	; 0x1df6 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1dd4:	88 85       	ldd	r24, Y+8	; 0x08
    1dd6:	99 85       	ldd	r25, Y+9	; 0x09
    1dd8:	89 2b       	or	r24, r25
    1dda:	69 f0       	breq	.+26     	; 0x1df6 <xStreamBufferSendFromISR+0x70>
    1ddc:	88 85       	ldd	r24, Y+8	; 0x08
    1dde:	99 85       	ldd	r25, Y+9	; 0x09
    1de0:	e1 2c       	mov	r14, r1
    1de2:	f1 2c       	mov	r15, r1
    1de4:	00 e0       	ldi	r16, 0x00	; 0
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	a9 01       	movw	r20, r18
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <xTaskGenericNotifyFromISR>
    1df2:	19 86       	std	Y+9, r1	; 0x09
    1df4:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1df6:	c5 01       	movw	r24, r10
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	ff 90       	pop	r15
    1e02:	ef 90       	pop	r14
    1e04:	df 90       	pop	r13
    1e06:	cf 90       	pop	r12
    1e08:	bf 90       	pop	r11
    1e0a:	af 90       	pop	r10
    1e0c:	08 95       	ret

00001e0e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1e0e:	4f 92       	push	r4
    1e10:	5f 92       	push	r5
    1e12:	6f 92       	push	r6
    1e14:	7f 92       	push	r7
    1e16:	8f 92       	push	r8
    1e18:	9f 92       	push	r9
    1e1a:	af 92       	push	r10
    1e1c:	bf 92       	push	r11
    1e1e:	cf 92       	push	r12
    1e20:	df 92       	push	r13
    1e22:	ef 92       	push	r14
    1e24:	ff 92       	push	r15
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	ec 01       	movw	r28, r24
    1e30:	2b 01       	movw	r4, r22
    1e32:	3a 01       	movw	r6, r20
    1e34:	58 01       	movw	r10, r16
    1e36:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1e38:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e3a:	80 ff       	sbrs	r24, 0
    1e3c:	05 c0       	rjmp	.+10     	; 0x1e48 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1e3e:	68 94       	set
    1e40:	88 24       	eor	r8, r8
    1e42:	81 f8       	bld	r8, 1
    1e44:	91 2c       	mov	r9, r1
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1e48:	81 2c       	mov	r8, r1
    1e4a:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1e4c:	a1 14       	cp	r10, r1
    1e4e:	b1 04       	cpc	r11, r1
    1e50:	c1 04       	cpc	r12, r1
    1e52:	d1 04       	cpc	r13, r1
    1e54:	41 f1       	breq	.+80     	; 0x1ea6 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	29 dd       	rcall	.-1454   	; 0x18b2 <prvBytesInBuffer>
    1e60:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e62:	88 16       	cp	r8, r24
    1e64:	99 06       	cpc	r9, r25
    1e66:	48 f0       	brcs	.+18     	; 0x1e7a <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1e72:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <xTaskGetCurrentTaskHandle>
    1e76:	99 87       	std	Y+9, r25	; 0x09
    1e78:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1e7a:	0f 90       	pop	r0
    1e7c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e7e:	8e 14       	cp	r8, r14
    1e80:	9f 04       	cpc	r9, r15
    1e82:	a0 f0       	brcs	.+40     	; 0x1eac <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1e84:	e1 2c       	mov	r14, r1
    1e86:	f1 2c       	mov	r15, r1
    1e88:	00 e0       	ldi	r16, 0x00	; 0
    1e8a:	10 e0       	ldi	r17, 0x00	; 0
    1e8c:	98 01       	movw	r18, r16
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	50 e0       	ldi	r21, 0x00	; 0
    1e92:	ba 01       	movw	r22, r20
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	0e 94 3c 19 	call	0x3278	; 0x3278 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1e9a:	19 86       	std	Y+9, r1	; 0x09
    1e9c:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	08 dd       	rcall	.-1520   	; 0x18b2 <prvBytesInBuffer>
    1ea2:	7c 01       	movw	r14, r24
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	04 dd       	rcall	.-1528   	; 0x18b2 <prvBytesInBuffer>
    1eaa:	7c 01       	movw	r14, r24
    1eac:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1eae:	9f 04       	cpc	r9, r15
    1eb0:	e8 f4       	brcc	.+58     	; 0x1eec <xStreamBufferReceive+0xde>
    1eb2:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1eb4:	97 01       	movw	r18, r14
    1eb6:	a3 01       	movw	r20, r6
    1eb8:	b2 01       	movw	r22, r4
    1eba:	ce 01       	movw	r24, r28
    1ebc:	f8 dd       	rcall	.-1040   	; 0x1aae <prvReadMessageFromBuffer>
    1ebe:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1ec0:	89 2b       	or	r24, r25
    1ec2:	b1 f0       	breq	.+44     	; 0x1ef0 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1ec4:	c3 d2       	rcall	.+1414   	; 0x244c <vTaskSuspendAll>
    1ec6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eca:	89 2b       	or	r24, r25
    1ecc:	69 f0       	breq	.+26     	; 0x1ee8 <xStreamBufferReceive+0xda>
    1ece:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ed2:	e1 2c       	mov	r14, r1
    1ed4:	f1 2c       	mov	r15, r1
    1ed6:	00 e0       	ldi	r16, 0x00	; 0
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	a9 01       	movw	r20, r18
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <xTaskGenericNotify>
    1ee4:	1b 86       	std	Y+11, r1	; 0x0b
    1ee6:	1a 86       	std	Y+10, r1	; 0x0a
    1ee8:	f1 d3       	rcall	.+2018   	; 0x26cc <xTaskResumeAll>
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <xStreamBufferReceive+0xe2>
    1eec:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1eee:	d1 2c       	mov	r13, r1
    1ef0:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	bf 90       	pop	r11
    1f04:	af 90       	pop	r10
    1f06:	9f 90       	pop	r9
    1f08:	8f 90       	pop	r8
    1f0a:	7f 90       	pop	r7
    1f0c:	6f 90       	pop	r6
    1f0e:	5f 90       	pop	r5
    1f10:	4f 90       	pop	r4
    1f12:	08 95       	ret

00001f14 <prvResetNextTaskUnblockTime>:
    1f14:	e0 91 0a 18 	lds	r30, 0x180A	; 0x80180a <pxDelayedTaskList>
    1f18:	f0 91 0b 18 	lds	r31, 0x180B	; 0x80180b <pxDelayedTaskList+0x1>
    1f1c:	80 81       	ld	r24, Z
    1f1e:	81 11       	cpse	r24, r1
    1f20:	0c c0       	rjmp	.+24     	; 0x1f3a <prvResetNextTaskUnblockTime+0x26>
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	9f ef       	ldi	r25, 0xFF	; 255
    1f26:	dc 01       	movw	r26, r24
    1f28:	80 93 d4 17 	sts	0x17D4, r24	; 0x8017d4 <xNextTaskUnblockTime>
    1f2c:	90 93 d5 17 	sts	0x17D5, r25	; 0x8017d5 <xNextTaskUnblockTime+0x1>
    1f30:	a0 93 d6 17 	sts	0x17D6, r26	; 0x8017d6 <xNextTaskUnblockTime+0x2>
    1f34:	b0 93 d7 17 	sts	0x17D7, r27	; 0x8017d7 <xNextTaskUnblockTime+0x3>
    1f38:	08 95       	ret
    1f3a:	e0 91 0a 18 	lds	r30, 0x180A	; 0x80180a <pxDelayedTaskList>
    1f3e:	f0 91 0b 18 	lds	r31, 0x180B	; 0x80180b <pxDelayedTaskList+0x1>
    1f42:	07 80       	ldd	r0, Z+7	; 0x07
    1f44:	f0 85       	ldd	r31, Z+8	; 0x08
    1f46:	e0 2d       	mov	r30, r0
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
    1f4c:	a2 81       	ldd	r26, Z+2	; 0x02
    1f4e:	b3 81       	ldd	r27, Z+3	; 0x03
    1f50:	80 93 d4 17 	sts	0x17D4, r24	; 0x8017d4 <xNextTaskUnblockTime>
    1f54:	90 93 d5 17 	sts	0x17D5, r25	; 0x8017d5 <xNextTaskUnblockTime+0x1>
    1f58:	a0 93 d6 17 	sts	0x17D6, r26	; 0x8017d6 <xNextTaskUnblockTime+0x2>
    1f5c:	b0 93 d7 17 	sts	0x17D7, r27	; 0x8017d7 <xNextTaskUnblockTime+0x3>
    1f60:	08 95       	ret

00001f62 <prvDeleteTCB>:
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	ec 01       	movw	r28, r24
    1f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6c:	0e 94 ef 06 	call	0xdde	; 0xdde <vPortFree>
    1f70:	ce 01       	movw	r24, r28
    1f72:	0e 94 ef 06 	call	0xdde	; 0xdde <vPortFree>
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <prvInitialiseNewTask>:
    1f7c:	4f 92       	push	r4
    1f7e:	5f 92       	push	r5
    1f80:	6f 92       	push	r6
    1f82:	7f 92       	push	r7
    1f84:	8f 92       	push	r8
    1f86:	9f 92       	push	r9
    1f88:	af 92       	push	r10
    1f8a:	bf 92       	push	r11
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	2c 01       	movw	r4, r24
    1f9c:	5b 01       	movw	r10, r22
    1f9e:	4a 01       	movw	r8, r20
    1fa0:	39 01       	movw	r6, r18
    1fa2:	e6 01       	movw	r28, r12
    1fa4:	65 ea       	ldi	r22, 0xA5	; 165
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fac:	0e 94 86 39 	call	0x730c	; 0x730c <memset>
    1fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb4:	21 e0       	ldi	r18, 0x01	; 1
    1fb6:	82 1a       	sub	r8, r18
    1fb8:	91 08       	sbc	r9, r1
    1fba:	88 0e       	add	r8, r24
    1fbc:	99 1e       	adc	r9, r25
    1fbe:	a1 14       	cp	r10, r1
    1fc0:	b1 04       	cpc	r11, r1
    1fc2:	89 f4       	brne	.+34     	; 0x1fe6 <prvInitialiseNewTask+0x6a>
    1fc4:	15 c0       	rjmp	.+42     	; 0x1ff0 <prvInitialiseNewTask+0x74>
    1fc6:	82 2f       	mov	r24, r18
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	f5 01       	movw	r30, r10
    1fcc:	e8 0f       	add	r30, r24
    1fce:	f9 1f       	adc	r31, r25
    1fd0:	30 81       	ld	r19, Z
    1fd2:	de 01       	movw	r26, r28
    1fd4:	a8 0f       	add	r26, r24
    1fd6:	b9 1f       	adc	r27, r25
    1fd8:	5d 96       	adiw	r26, 0x1d	; 29
    1fda:	3c 93       	st	X, r19
    1fdc:	80 81       	ld	r24, Z
    1fde:	88 23       	and	r24, r24
    1fe0:	29 f0       	breq	.+10     	; 0x1fec <prvInitialiseNewTask+0x70>
    1fe2:	2f 5f       	subi	r18, 0xFF	; 255
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <prvInitialiseNewTask+0x6c>
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	20 31       	cpi	r18, 0x10	; 16
    1fea:	68 f3       	brcs	.-38     	; 0x1fc6 <prvInitialiseNewTask+0x4a>
    1fec:	1c a6       	std	Y+44, r1	; 0x2c
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <prvInitialiseNewTask+0x76>
    1ff0:	1d 8e       	std	Y+29, r1	; 0x1d
    1ff2:	0a 30       	cpi	r16, 0x0A	; 10
    1ff4:	08 f0       	brcs	.+2      	; 0x1ff8 <prvInitialiseNewTask+0x7c>
    1ff6:	09 e0       	ldi	r16, 0x09	; 9
    1ff8:	0a 8f       	std	Y+26, r16	; 0x1a
    1ffa:	0d a7       	std	Y+45, r16	; 0x2d
    1ffc:	1e a6       	std	Y+46, r1	; 0x2e
    1ffe:	ce 01       	movw	r24, r28
    2000:	02 96       	adiw	r24, 0x02	; 2
    2002:	0e 94 3d 07 	call	0xe7a	; 0xe7a <vListInitialiseItem>
    2006:	ce 01       	movw	r24, r28
    2008:	0e 96       	adiw	r24, 0x0e	; 14
    200a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <vListInitialiseItem>
    200e:	db 87       	std	Y+11, r29	; 0x0b
    2010:	ca 87       	std	Y+10, r28	; 0x0a
    2012:	8a e0       	ldi	r24, 0x0A	; 10
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	80 1b       	sub	r24, r16
    201c:	91 09       	sbc	r25, r1
    201e:	a1 09       	sbc	r26, r1
    2020:	b1 09       	sbc	r27, r1
    2022:	8e 87       	std	Y+14, r24	; 0x0e
    2024:	9f 87       	std	Y+15, r25	; 0x0f
    2026:	a8 8b       	std	Y+16, r26	; 0x10
    2028:	b9 8b       	std	Y+17, r27	; 0x11
    202a:	df 8b       	std	Y+23, r29	; 0x17
    202c:	ce 8b       	std	Y+22, r28	; 0x16
    202e:	84 e0       	ldi	r24, 0x04	; 4
    2030:	fe 01       	movw	r30, r28
    2032:	bf 96       	adiw	r30, 0x2f	; 47
    2034:	df 01       	movw	r26, r30
    2036:	1d 92       	st	X+, r1
    2038:	8a 95       	dec	r24
    203a:	e9 f7       	brne	.-6      	; 0x2036 <__DATA_REGION_LENGTH__+0x36>
    203c:	1b aa       	std	Y+51, r1	; 0x33
    203e:	a3 01       	movw	r20, r6
    2040:	b2 01       	movw	r22, r4
    2042:	c4 01       	movw	r24, r8
    2044:	0e 94 b1 07 	call	0xf62	; 0xf62 <pxPortInitialiseStack>
    2048:	99 83       	std	Y+1, r25	; 0x01
    204a:	88 83       	st	Y, r24
    204c:	e1 14       	cp	r14, r1
    204e:	f1 04       	cpc	r15, r1
    2050:	19 f0       	breq	.+6      	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    2052:	f7 01       	movw	r30, r14
    2054:	d1 83       	std	Z+1, r29	; 0x01
    2056:	c0 83       	st	Z, r28
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	cf 90       	pop	r12
    2066:	bf 90       	pop	r11
    2068:	af 90       	pop	r10
    206a:	9f 90       	pop	r9
    206c:	8f 90       	pop	r8
    206e:	7f 90       	pop	r7
    2070:	6f 90       	pop	r6
    2072:	5f 90       	pop	r5
    2074:	4f 90       	pop	r4
    2076:	08 95       	ret

00002078 <prvInitialiseTaskLists>:
    2078:	cf 93       	push	r28
    207a:	c0 e0       	ldi	r28, 0x00	; 0
    207c:	09 c0       	rjmp	.+18     	; 0x2090 <prvInitialiseTaskLists+0x18>
    207e:	2b e0       	ldi	r18, 0x0B	; 11
    2080:	c2 9f       	mul	r28, r18
    2082:	c0 01       	movw	r24, r0
    2084:	11 24       	eor	r1, r1
    2086:	8e 5d       	subi	r24, 0xDE	; 222
    2088:	97 4e       	sbci	r25, 0xE7	; 231
    208a:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialise>
    208e:	cf 5f       	subi	r28, 0xFF	; 255
    2090:	ca 30       	cpi	r28, 0x0A	; 10
    2092:	a8 f3       	brcs	.-22     	; 0x207e <prvInitialiseTaskLists+0x6>
    2094:	87 e1       	ldi	r24, 0x17	; 23
    2096:	98 e1       	ldi	r25, 0x18	; 24
    2098:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialise>
    209c:	8c e0       	ldi	r24, 0x0C	; 12
    209e:	98 e1       	ldi	r25, 0x18	; 24
    20a0:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialise>
    20a4:	8d ef       	ldi	r24, 0xFD	; 253
    20a6:	97 e1       	ldi	r25, 0x17	; 23
    20a8:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialise>
    20ac:	82 ef       	ldi	r24, 0xF2	; 242
    20ae:	97 e1       	ldi	r25, 0x17	; 23
    20b0:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialise>
    20b4:	86 ee       	ldi	r24, 0xE6	; 230
    20b6:	97 e1       	ldi	r25, 0x17	; 23
    20b8:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialise>
    20bc:	87 e1       	ldi	r24, 0x17	; 23
    20be:	98 e1       	ldi	r25, 0x18	; 24
    20c0:	90 93 0b 18 	sts	0x180B, r25	; 0x80180b <pxDelayedTaskList+0x1>
    20c4:	80 93 0a 18 	sts	0x180A, r24	; 0x80180a <pxDelayedTaskList>
    20c8:	8c e0       	ldi	r24, 0x0C	; 12
    20ca:	98 e1       	ldi	r25, 0x18	; 24
    20cc:	90 93 09 18 	sts	0x1809, r25	; 0x801809 <pxOverflowDelayedTaskList+0x1>
    20d0:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <pxOverflowDelayedTaskList>
    20d4:	cf 91       	pop	r28
    20d6:	08 95       	ret

000020d8 <prvAddNewTaskToReadyList>:
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	ec 01       	movw	r28, r24
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	0f 92       	push	r0
    20e4:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <uxCurrentNumberOfTasks>
    20e8:	8f 5f       	subi	r24, 0xFF	; 255
    20ea:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <uxCurrentNumberOfTasks>
    20ee:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    20f2:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    20f6:	89 2b       	or	r24, r25
    20f8:	51 f4       	brne	.+20     	; 0x210e <prvAddNewTaskToReadyList+0x36>
    20fa:	d0 93 91 18 	sts	0x1891, r29	; 0x801891 <pxCurrentTCB+0x1>
    20fe:	c0 93 90 18 	sts	0x1890, r28	; 0x801890 <pxCurrentTCB>
    2102:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <uxCurrentNumberOfTasks>
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	91 f4       	brne	.+36     	; 0x212e <prvAddNewTaskToReadyList+0x56>
    210a:	b6 df       	rcall	.-148    	; 0x2078 <prvInitialiseTaskLists>
    210c:	10 c0       	rjmp	.+32     	; 0x212e <prvAddNewTaskToReadyList+0x56>
    210e:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <xSchedulerRunning>
    2112:	81 11       	cpse	r24, r1
    2114:	0c c0       	rjmp	.+24     	; 0x212e <prvAddNewTaskToReadyList+0x56>
    2116:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    211a:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    211e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2120:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2122:	89 17       	cp	r24, r25
    2124:	20 f0       	brcs	.+8      	; 0x212e <prvAddNewTaskToReadyList+0x56>
    2126:	d0 93 91 18 	sts	0x1891, r29	; 0x801891 <pxCurrentTCB+0x1>
    212a:	c0 93 90 18 	sts	0x1890, r28	; 0x801890 <pxCurrentTCB>
    212e:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <uxTaskNumber>
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <uxTaskNumber>
    2138:	ea 8d       	ldd	r30, Y+26	; 0x1a
    213a:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    213e:	8e 17       	cp	r24, r30
    2140:	10 f4       	brcc	.+4      	; 0x2146 <prvAddNewTaskToReadyList+0x6e>
    2142:	e0 93 e0 17 	sts	0x17E0, r30	; 0x8017e0 <uxTopReadyPriority>
    2146:	8b e0       	ldi	r24, 0x0B	; 11
    2148:	8e 9f       	mul	r24, r30
    214a:	f0 01       	movw	r30, r0
    214c:	11 24       	eor	r1, r1
    214e:	ee 5d       	subi	r30, 0xDE	; 222
    2150:	f7 4e       	sbci	r31, 0xE7	; 231
    2152:	01 80       	ldd	r0, Z+1	; 0x01
    2154:	f2 81       	ldd	r31, Z+2	; 0x02
    2156:	e0 2d       	mov	r30, r0
    2158:	ff 83       	std	Y+7, r31	; 0x07
    215a:	ee 83       	std	Y+6, r30	; 0x06
    215c:	26 81       	ldd	r18, Z+6	; 0x06
    215e:	37 81       	ldd	r19, Z+7	; 0x07
    2160:	39 87       	std	Y+9, r19	; 0x09
    2162:	28 87       	std	Y+8, r18	; 0x08
    2164:	a6 81       	ldd	r26, Z+6	; 0x06
    2166:	b7 81       	ldd	r27, Z+7	; 0x07
    2168:	9e 01       	movw	r18, r28
    216a:	2e 5f       	subi	r18, 0xFE	; 254
    216c:	3f 4f       	sbci	r19, 0xFF	; 255
    216e:	15 96       	adiw	r26, 0x05	; 5
    2170:	3c 93       	st	X, r19
    2172:	2e 93       	st	-X, r18
    2174:	14 97       	sbiw	r26, 0x04	; 4
    2176:	37 83       	std	Z+7, r19	; 0x07
    2178:	26 83       	std	Z+6, r18	; 0x06
    217a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    217c:	8e 9f       	mul	r24, r30
    217e:	f0 01       	movw	r30, r0
    2180:	11 24       	eor	r1, r1
    2182:	ee 5d       	subi	r30, 0xDE	; 222
    2184:	f7 4e       	sbci	r31, 0xE7	; 231
    2186:	fd 87       	std	Y+13, r31	; 0x0d
    2188:	ec 87       	std	Y+12, r30	; 0x0c
    218a:	80 81       	ld	r24, Z
    218c:	8f 5f       	subi	r24, 0xFF	; 255
    218e:	80 83       	st	Z, r24
    2190:	0f 90       	pop	r0
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <xSchedulerRunning>
    2198:	88 23       	and	r24, r24
    219a:	51 f0       	breq	.+20     	; 0x21b0 <prvAddNewTaskToReadyList+0xd8>
    219c:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    21a0:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    21a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    21a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21a8:	98 17       	cp	r25, r24
    21aa:	10 f4       	brcc	.+4      	; 0x21b0 <prvAddNewTaskToReadyList+0xd8>
    21ac:	0e 94 fa 07 	call	0xff4	; 0xff4 <vPortYield>
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	08 95       	ret

000021b6 <prvCheckTasksWaitingTermination>:
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	1b c0       	rjmp	.+54     	; 0x21f2 <prvCheckTasksWaitingTermination+0x3c>
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	0f 92       	push	r0
    21c2:	e0 91 f9 17 	lds	r30, 0x17F9	; 0x8017f9 <xTasksWaitingTermination+0x7>
    21c6:	f0 91 fa 17 	lds	r31, 0x17FA	; 0x8017fa <xTasksWaitingTermination+0x8>
    21ca:	c0 85       	ldd	r28, Z+8	; 0x08
    21cc:	d1 85       	ldd	r29, Z+9	; 0x09
    21ce:	ce 01       	movw	r24, r28
    21d0:	02 96       	adiw	r24, 0x02	; 2
    21d2:	0e 94 7e 07 	call	0xefc	; 0xefc <uxListRemove>
    21d6:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <uxCurrentNumberOfTasks>
    21da:	81 50       	subi	r24, 0x01	; 1
    21dc:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <uxCurrentNumberOfTasks>
    21e0:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <uxDeletedTasksWaitingCleanUp>
    21e4:	81 50       	subi	r24, 0x01	; 1
    21e6:	80 93 f1 17 	sts	0x17F1, r24	; 0x8017f1 <uxDeletedTasksWaitingCleanUp>
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	ce 01       	movw	r24, r28
    21f0:	b8 de       	rcall	.-656    	; 0x1f62 <prvDeleteTCB>
    21f2:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <uxDeletedTasksWaitingCleanUp>
    21f6:	81 11       	cpse	r24, r1
    21f8:	e1 cf       	rjmp	.-62     	; 0x21bc <prvCheckTasksWaitingTermination+0x6>
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	08 95       	ret

00002200 <prvAddCurrentTaskToDelayedList>:
    2200:	8f 92       	push	r8
    2202:	9f 92       	push	r9
    2204:	af 92       	push	r10
    2206:	bf 92       	push	r11
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	6b 01       	movw	r12, r22
    2216:	7c 01       	movw	r14, r24
    2218:	c4 2f       	mov	r28, r20
    221a:	80 90 e1 17 	lds	r8, 0x17E1	; 0x8017e1 <xTickCount>
    221e:	90 90 e2 17 	lds	r9, 0x17E2	; 0x8017e2 <xTickCount+0x1>
    2222:	a0 90 e3 17 	lds	r10, 0x17E3	; 0x8017e3 <xTickCount+0x2>
    2226:	b0 90 e4 17 	lds	r11, 0x17E4	; 0x8017e4 <xTickCount+0x3>
    222a:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    222e:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2232:	02 96       	adiw	r24, 0x02	; 2
    2234:	0e 94 7e 07 	call	0xefc	; 0xefc <uxListRemove>
    2238:	8f ef       	ldi	r24, 0xFF	; 255
    223a:	c8 16       	cp	r12, r24
    223c:	d8 06       	cpc	r13, r24
    223e:	e8 06       	cpc	r14, r24
    2240:	f8 06       	cpc	r15, r24
    2242:	b1 f5       	brne	.+108    	; 0x22b0 <prvAddCurrentTaskToDelayedList+0xb0>
    2244:	cc 23       	and	r28, r28
    2246:	a1 f1       	breq	.+104    	; 0x22b0 <prvAddCurrentTaskToDelayedList+0xb0>
    2248:	e6 ee       	ldi	r30, 0xE6	; 230
    224a:	f7 e1       	ldi	r31, 0x17	; 23
    224c:	a1 81       	ldd	r26, Z+1	; 0x01
    224e:	b2 81       	ldd	r27, Z+2	; 0x02
    2250:	c0 91 90 18 	lds	r28, 0x1890	; 0x801890 <pxCurrentTCB>
    2254:	d0 91 91 18 	lds	r29, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2258:	bf 83       	std	Y+7, r27	; 0x07
    225a:	ae 83       	std	Y+6, r26	; 0x06
    225c:	c0 91 90 18 	lds	r28, 0x1890	; 0x801890 <pxCurrentTCB>
    2260:	d0 91 91 18 	lds	r29, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2264:	16 96       	adiw	r26, 0x06	; 6
    2266:	8d 91       	ld	r24, X+
    2268:	9c 91       	ld	r25, X
    226a:	17 97       	sbiw	r26, 0x07	; 7
    226c:	99 87       	std	Y+9, r25	; 0x09
    226e:	88 87       	std	Y+8, r24	; 0x08
    2270:	16 96       	adiw	r26, 0x06	; 6
    2272:	cd 91       	ld	r28, X+
    2274:	dc 91       	ld	r29, X
    2276:	17 97       	sbiw	r26, 0x07	; 7
    2278:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    227c:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2280:	02 96       	adiw	r24, 0x02	; 2
    2282:	9d 83       	std	Y+5, r25	; 0x05
    2284:	8c 83       	std	Y+4, r24	; 0x04
    2286:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    228a:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    228e:	02 96       	adiw	r24, 0x02	; 2
    2290:	17 96       	adiw	r26, 0x07	; 7
    2292:	9c 93       	st	X, r25
    2294:	8e 93       	st	-X, r24
    2296:	16 97       	sbiw	r26, 0x06	; 6
    2298:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    229c:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    22a0:	1d 96       	adiw	r26, 0x0d	; 13
    22a2:	fc 93       	st	X, r31
    22a4:	ee 93       	st	-X, r30
    22a6:	1c 97       	sbiw	r26, 0x0c	; 12
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	80 83       	st	Z, r24
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <prvAddCurrentTaskToDelayedList+0x12e>
    22b0:	c8 0c       	add	r12, r8
    22b2:	d9 1c       	adc	r13, r9
    22b4:	ea 1c       	adc	r14, r10
    22b6:	fb 1c       	adc	r15, r11
    22b8:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    22bc:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    22c0:	c2 82       	std	Z+2, r12	; 0x02
    22c2:	d3 82       	std	Z+3, r13	; 0x03
    22c4:	e4 82       	std	Z+4, r14	; 0x04
    22c6:	f5 82       	std	Z+5, r15	; 0x05
    22c8:	c8 14       	cp	r12, r8
    22ca:	d9 04       	cpc	r13, r9
    22cc:	ea 04       	cpc	r14, r10
    22ce:	fb 04       	cpc	r15, r11
    22d0:	68 f4       	brcc	.+26     	; 0x22ec <prvAddCurrentTaskToDelayedList+0xec>
    22d2:	60 91 90 18 	lds	r22, 0x1890	; 0x801890 <pxCurrentTCB>
    22d6:	70 91 91 18 	lds	r23, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    22da:	80 91 08 18 	lds	r24, 0x1808	; 0x801808 <pxOverflowDelayedTaskList>
    22de:	90 91 09 18 	lds	r25, 0x1809	; 0x801809 <pxOverflowDelayedTaskList+0x1>
    22e2:	6e 5f       	subi	r22, 0xFE	; 254
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInsert>
    22ea:	21 c0       	rjmp	.+66     	; 0x232e <prvAddCurrentTaskToDelayedList+0x12e>
    22ec:	60 91 90 18 	lds	r22, 0x1890	; 0x801890 <pxCurrentTCB>
    22f0:	70 91 91 18 	lds	r23, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    22f4:	80 91 0a 18 	lds	r24, 0x180A	; 0x80180a <pxDelayedTaskList>
    22f8:	90 91 0b 18 	lds	r25, 0x180B	; 0x80180b <pxDelayedTaskList+0x1>
    22fc:	6e 5f       	subi	r22, 0xFE	; 254
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2300:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInsert>
    2304:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xNextTaskUnblockTime>
    2308:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <xNextTaskUnblockTime+0x1>
    230c:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <xNextTaskUnblockTime+0x2>
    2310:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <xNextTaskUnblockTime+0x3>
    2314:	c8 16       	cp	r12, r24
    2316:	d9 06       	cpc	r13, r25
    2318:	ea 06       	cpc	r14, r26
    231a:	fb 06       	cpc	r15, r27
    231c:	40 f4       	brcc	.+16     	; 0x232e <prvAddCurrentTaskToDelayedList+0x12e>
    231e:	c0 92 d4 17 	sts	0x17D4, r12	; 0x8017d4 <xNextTaskUnblockTime>
    2322:	d0 92 d5 17 	sts	0x17D5, r13	; 0x8017d5 <xNextTaskUnblockTime+0x1>
    2326:	e0 92 d6 17 	sts	0x17D6, r14	; 0x8017d6 <xNextTaskUnblockTime+0x2>
    232a:	f0 92 d7 17 	sts	0x17D7, r15	; 0x8017d7 <xNextTaskUnblockTime+0x3>
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	ff 90       	pop	r15
    2334:	ef 90       	pop	r14
    2336:	df 90       	pop	r13
    2338:	cf 90       	pop	r12
    233a:	bf 90       	pop	r11
    233c:	af 90       	pop	r10
    233e:	9f 90       	pop	r9
    2340:	8f 90       	pop	r8
    2342:	08 95       	ret

00002344 <xTaskCreate>:
    2344:	2f 92       	push	r2
    2346:	3f 92       	push	r3
    2348:	4f 92       	push	r4
    234a:	5f 92       	push	r5
    234c:	6f 92       	push	r6
    234e:	7f 92       	push	r7
    2350:	8f 92       	push	r8
    2352:	9f 92       	push	r9
    2354:	af 92       	push	r10
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	3c 01       	movw	r6, r24
    2368:	1b 01       	movw	r2, r22
    236a:	4a 01       	movw	r8, r20
    236c:	29 01       	movw	r4, r18
    236e:	ca 01       	movw	r24, r20
    2370:	0e 94 46 06 	call	0xc8c	; 0xc8c <pvPortMalloc>
    2374:	6c 01       	movw	r12, r24
    2376:	89 2b       	or	r24, r25
    2378:	71 f0       	breq	.+28     	; 0x2396 <xTaskCreate+0x52>
    237a:	84 e3       	ldi	r24, 0x34	; 52
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 46 06 	call	0xc8c	; 0xc8c <pvPortMalloc>
    2382:	ec 01       	movw	r28, r24
    2384:	89 2b       	or	r24, r25
    2386:	19 f0       	breq	.+6      	; 0x238e <xTaskCreate+0x4a>
    2388:	dc 8e       	std	Y+28, r13	; 0x1c
    238a:	cb 8e       	std	Y+27, r12	; 0x1b
    238c:	06 c0       	rjmp	.+12     	; 0x239a <xTaskCreate+0x56>
    238e:	c6 01       	movw	r24, r12
    2390:	0e 94 ef 06 	call	0xdde	; 0xdde <vPortFree>
    2394:	02 c0       	rjmp	.+4      	; 0x239a <xTaskCreate+0x56>
    2396:	c0 e0       	ldi	r28, 0x00	; 0
    2398:	d0 e0       	ldi	r29, 0x00	; 0
    239a:	20 97       	sbiw	r28, 0x00	; 0
    239c:	61 f0       	breq	.+24     	; 0x23b6 <xTaskCreate+0x72>
    239e:	a1 2c       	mov	r10, r1
    23a0:	b1 2c       	mov	r11, r1
    23a2:	6e 01       	movw	r12, r28
    23a4:	92 01       	movw	r18, r4
    23a6:	a4 01       	movw	r20, r8
    23a8:	b1 01       	movw	r22, r2
    23aa:	c3 01       	movw	r24, r6
    23ac:	e7 dd       	rcall	.-1074   	; 0x1f7c <prvInitialiseNewTask>
    23ae:	ce 01       	movw	r24, r28
    23b0:	93 de       	rcall	.-730    	; 0x20d8 <prvAddNewTaskToReadyList>
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	01 c0       	rjmp	.+2      	; 0x23b8 <xTaskCreate+0x74>
    23b6:	8f ef       	ldi	r24, 0xFF	; 255
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	cf 90       	pop	r12
    23c6:	bf 90       	pop	r11
    23c8:	af 90       	pop	r10
    23ca:	9f 90       	pop	r9
    23cc:	8f 90       	pop	r8
    23ce:	7f 90       	pop	r7
    23d0:	6f 90       	pop	r6
    23d2:	5f 90       	pop	r5
    23d4:	4f 90       	pop	r4
    23d6:	3f 90       	pop	r3
    23d8:	2f 90       	pop	r2
    23da:	08 95       	ret

000023dc <vTaskStartScheduler>:
    23dc:	ef 92       	push	r14
    23de:	ff 92       	push	r15
    23e0:	0f 93       	push	r16
    23e2:	0f 2e       	mov	r0, r31
    23e4:	f2 ed       	ldi	r31, 0xD2	; 210
    23e6:	ef 2e       	mov	r14, r31
    23e8:	f7 e1       	ldi	r31, 0x17	; 23
    23ea:	ff 2e       	mov	r15, r31
    23ec:	f0 2d       	mov	r31, r0
    23ee:	00 e0       	ldi	r16, 0x00	; 0
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 ec       	ldi	r20, 0xC0	; 192
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	64 e9       	ldi	r22, 0x94	; 148
    23fa:	73 e0       	ldi	r23, 0x03	; 3
    23fc:	8e e4       	ldi	r24, 0x4E	; 78
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	a1 df       	rcall	.-190    	; 0x2344 <xTaskCreate>
    2402:	81 30       	cpi	r24, 0x01	; 1
    2404:	11 f4       	brne	.+4      	; 0x240a <vTaskStartScheduler+0x2e>
    2406:	0e 94 a1 1c 	call	0x3942	; 0x3942 <xTimerCreateTimerTask>
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	c9 f4       	brne	.+50     	; 0x2440 <vTaskStartScheduler+0x64>
    240e:	f8 94       	cli
    2410:	8f ef       	ldi	r24, 0xFF	; 255
    2412:	9f ef       	ldi	r25, 0xFF	; 255
    2414:	dc 01       	movw	r26, r24
    2416:	80 93 d4 17 	sts	0x17D4, r24	; 0x8017d4 <xNextTaskUnblockTime>
    241a:	90 93 d5 17 	sts	0x17D5, r25	; 0x8017d5 <xNextTaskUnblockTime+0x1>
    241e:	a0 93 d6 17 	sts	0x17D6, r26	; 0x8017d6 <xNextTaskUnblockTime+0x2>
    2422:	b0 93 d7 17 	sts	0x17D7, r27	; 0x8017d7 <xNextTaskUnblockTime+0x3>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <xSchedulerRunning>
    242c:	10 92 e1 17 	sts	0x17E1, r1	; 0x8017e1 <xTickCount>
    2430:	10 92 e2 17 	sts	0x17E2, r1	; 0x8017e2 <xTickCount+0x1>
    2434:	10 92 e3 17 	sts	0x17E3, r1	; 0x8017e3 <xTickCount+0x2>
    2438:	10 92 e4 17 	sts	0x17E4, r1	; 0x8017e4 <xTickCount+0x3>
    243c:	0e 94 c8 07 	call	0xf90	; 0xf90 <xPortStartScheduler>
    2440:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	08 95       	ret

0000244c <vTaskSuspendAll>:
    244c:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxSchedulerSuspended>
    2450:	8f 5f       	subi	r24, 0xFF	; 255
    2452:	80 93 d1 17 	sts	0x17D1, r24	; 0x8017d1 <uxSchedulerSuspended>
    2456:	08 95       	ret

00002458 <xTaskGetTickCount>:
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	0f 92       	push	r0
    245e:	60 91 e1 17 	lds	r22, 0x17E1	; 0x8017e1 <xTickCount>
    2462:	70 91 e2 17 	lds	r23, 0x17E2	; 0x8017e2 <xTickCount+0x1>
    2466:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <xTickCount+0x2>
    246a:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <xTickCount+0x3>
    246e:	0f 90       	pop	r0
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	08 95       	ret

00002474 <xTaskIncrementTick>:
    2474:	cf 92       	push	r12
    2476:	df 92       	push	r13
    2478:	ef 92       	push	r14
    247a:	ff 92       	push	r15
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxSchedulerSuspended>
    2484:	81 11       	cpse	r24, r1
    2486:	05 c1       	rjmp	.+522    	; 0x2692 <xTaskIncrementTick+0x21e>
    2488:	c0 90 e1 17 	lds	r12, 0x17E1	; 0x8017e1 <xTickCount>
    248c:	d0 90 e2 17 	lds	r13, 0x17E2	; 0x8017e2 <xTickCount+0x1>
    2490:	e0 90 e3 17 	lds	r14, 0x17E3	; 0x8017e3 <xTickCount+0x2>
    2494:	f0 90 e4 17 	lds	r15, 0x17E4	; 0x8017e4 <xTickCount+0x3>
    2498:	8f ef       	ldi	r24, 0xFF	; 255
    249a:	c8 1a       	sub	r12, r24
    249c:	d8 0a       	sbc	r13, r24
    249e:	e8 0a       	sbc	r14, r24
    24a0:	f8 0a       	sbc	r15, r24
    24a2:	c0 92 e1 17 	sts	0x17E1, r12	; 0x8017e1 <xTickCount>
    24a6:	d0 92 e2 17 	sts	0x17E2, r13	; 0x8017e2 <xTickCount+0x1>
    24aa:	e0 92 e3 17 	sts	0x17E3, r14	; 0x8017e3 <xTickCount+0x2>
    24ae:	f0 92 e4 17 	sts	0x17E4, r15	; 0x8017e4 <xTickCount+0x3>
    24b2:	c1 14       	cp	r12, r1
    24b4:	d1 04       	cpc	r13, r1
    24b6:	e1 04       	cpc	r14, r1
    24b8:	f1 04       	cpc	r15, r1
    24ba:	b1 f4       	brne	.+44     	; 0x24e8 <xTaskIncrementTick+0x74>
    24bc:	80 91 0a 18 	lds	r24, 0x180A	; 0x80180a <pxDelayedTaskList>
    24c0:	90 91 0b 18 	lds	r25, 0x180B	; 0x80180b <pxDelayedTaskList+0x1>
    24c4:	20 91 08 18 	lds	r18, 0x1808	; 0x801808 <pxOverflowDelayedTaskList>
    24c8:	30 91 09 18 	lds	r19, 0x1809	; 0x801809 <pxOverflowDelayedTaskList+0x1>
    24cc:	30 93 0b 18 	sts	0x180B, r19	; 0x80180b <pxDelayedTaskList+0x1>
    24d0:	20 93 0a 18 	sts	0x180A, r18	; 0x80180a <pxDelayedTaskList>
    24d4:	90 93 09 18 	sts	0x1809, r25	; 0x801809 <pxOverflowDelayedTaskList+0x1>
    24d8:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <pxOverflowDelayedTaskList>
    24dc:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <xNumOfOverflows>
    24e0:	8f 5f       	subi	r24, 0xFF	; 255
    24e2:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <xNumOfOverflows>
    24e6:	16 dd       	rcall	.-1492   	; 0x1f14 <prvResetNextTaskUnblockTime>
    24e8:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xNextTaskUnblockTime>
    24ec:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <xNextTaskUnblockTime+0x1>
    24f0:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <xNextTaskUnblockTime+0x2>
    24f4:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <xNextTaskUnblockTime+0x3>
    24f8:	c8 16       	cp	r12, r24
    24fa:	d9 06       	cpc	r13, r25
    24fc:	ea 06       	cpc	r14, r26
    24fe:	fb 06       	cpc	r15, r27
    2500:	20 f4       	brcc	.+8      	; 0x250a <xTaskIncrementTick+0x96>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	b2 c0       	rjmp	.+356    	; 0x266a <xTaskIncrementTick+0x1f6>
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	01 c0       	rjmp	.+2      	; 0x250c <xTaskIncrementTick+0x98>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	e0 91 0a 18 	lds	r30, 0x180A	; 0x80180a <pxDelayedTaskList>
    2510:	f0 91 0b 18 	lds	r31, 0x180B	; 0x80180b <pxDelayedTaskList+0x1>
    2514:	90 81       	ld	r25, Z
    2516:	91 11       	cpse	r25, r1
    2518:	0c c0       	rjmp	.+24     	; 0x2532 <xTaskIncrementTick+0xbe>
    251a:	4f ef       	ldi	r20, 0xFF	; 255
    251c:	5f ef       	ldi	r21, 0xFF	; 255
    251e:	ba 01       	movw	r22, r20
    2520:	40 93 d4 17 	sts	0x17D4, r20	; 0x8017d4 <xNextTaskUnblockTime>
    2524:	50 93 d5 17 	sts	0x17D5, r21	; 0x8017d5 <xNextTaskUnblockTime+0x1>
    2528:	60 93 d6 17 	sts	0x17D6, r22	; 0x8017d6 <xNextTaskUnblockTime+0x2>
    252c:	70 93 d7 17 	sts	0x17D7, r23	; 0x8017d7 <xNextTaskUnblockTime+0x3>
    2530:	9c c0       	rjmp	.+312    	; 0x266a <xTaskIncrementTick+0x1f6>
    2532:	e0 91 0a 18 	lds	r30, 0x180A	; 0x80180a <pxDelayedTaskList>
    2536:	f0 91 0b 18 	lds	r31, 0x180B	; 0x80180b <pxDelayedTaskList+0x1>
    253a:	07 80       	ldd	r0, Z+7	; 0x07
    253c:	f0 85       	ldd	r31, Z+8	; 0x08
    253e:	e0 2d       	mov	r30, r0
    2540:	00 84       	ldd	r0, Z+8	; 0x08
    2542:	f1 85       	ldd	r31, Z+9	; 0x09
    2544:	e0 2d       	mov	r30, r0
    2546:	42 81       	ldd	r20, Z+2	; 0x02
    2548:	53 81       	ldd	r21, Z+3	; 0x03
    254a:	64 81       	ldd	r22, Z+4	; 0x04
    254c:	75 81       	ldd	r23, Z+5	; 0x05
    254e:	c4 16       	cp	r12, r20
    2550:	d5 06       	cpc	r13, r21
    2552:	e6 06       	cpc	r14, r22
    2554:	f7 06       	cpc	r15, r23
    2556:	48 f4       	brcc	.+18     	; 0x256a <xTaskIncrementTick+0xf6>
    2558:	40 93 d4 17 	sts	0x17D4, r20	; 0x8017d4 <xNextTaskUnblockTime>
    255c:	50 93 d5 17 	sts	0x17D5, r21	; 0x8017d5 <xNextTaskUnblockTime+0x1>
    2560:	60 93 d6 17 	sts	0x17D6, r22	; 0x8017d6 <xNextTaskUnblockTime+0x2>
    2564:	70 93 d7 17 	sts	0x17D7, r23	; 0x8017d7 <xNextTaskUnblockTime+0x3>
    2568:	80 c0       	rjmp	.+256    	; 0x266a <xTaskIncrementTick+0x1f6>
    256a:	a4 85       	ldd	r26, Z+12	; 0x0c
    256c:	b5 85       	ldd	r27, Z+13	; 0x0d
    256e:	c6 81       	ldd	r28, Z+6	; 0x06
    2570:	d7 81       	ldd	r29, Z+7	; 0x07
    2572:	20 85       	ldd	r18, Z+8	; 0x08
    2574:	31 85       	ldd	r19, Z+9	; 0x09
    2576:	3f 83       	std	Y+7, r19	; 0x07
    2578:	2e 83       	std	Y+6, r18	; 0x06
    257a:	c0 85       	ldd	r28, Z+8	; 0x08
    257c:	d1 85       	ldd	r29, Z+9	; 0x09
    257e:	26 81       	ldd	r18, Z+6	; 0x06
    2580:	37 81       	ldd	r19, Z+7	; 0x07
    2582:	3d 83       	std	Y+5, r19	; 0x05
    2584:	2c 83       	std	Y+4, r18	; 0x04
    2586:	11 96       	adiw	r26, 0x01	; 1
    2588:	4d 91       	ld	r20, X+
    258a:	5c 91       	ld	r21, X
    258c:	12 97       	sbiw	r26, 0x02	; 2
    258e:	9f 01       	movw	r18, r30
    2590:	2e 5f       	subi	r18, 0xFE	; 254
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	42 17       	cp	r20, r18
    2596:	53 07       	cpc	r21, r19
    2598:	31 f4       	brne	.+12     	; 0x25a6 <xTaskIncrementTick+0x132>
    259a:	40 85       	ldd	r20, Z+8	; 0x08
    259c:	51 85       	ldd	r21, Z+9	; 0x09
    259e:	12 96       	adiw	r26, 0x02	; 2
    25a0:	5c 93       	st	X, r21
    25a2:	4e 93       	st	-X, r20
    25a4:	11 97       	sbiw	r26, 0x01	; 1
    25a6:	15 86       	std	Z+13, r1	; 0x0d
    25a8:	14 86       	std	Z+12, r1	; 0x0c
    25aa:	9c 91       	ld	r25, X
    25ac:	91 50       	subi	r25, 0x01	; 1
    25ae:	9c 93       	st	X, r25
    25b0:	a0 8d       	ldd	r26, Z+24	; 0x18
    25b2:	b1 8d       	ldd	r27, Z+25	; 0x19
    25b4:	10 97       	sbiw	r26, 0x00	; 0
    25b6:	09 f1       	breq	.+66     	; 0x25fa <xTaskIncrementTick+0x186>
    25b8:	c2 89       	ldd	r28, Z+18	; 0x12
    25ba:	d3 89       	ldd	r29, Z+19	; 0x13
    25bc:	44 89       	ldd	r20, Z+20	; 0x14
    25be:	55 89       	ldd	r21, Z+21	; 0x15
    25c0:	5f 83       	std	Y+7, r21	; 0x07
    25c2:	4e 83       	std	Y+6, r20	; 0x06
    25c4:	c4 89       	ldd	r28, Z+20	; 0x14
    25c6:	d5 89       	ldd	r29, Z+21	; 0x15
    25c8:	42 89       	ldd	r20, Z+18	; 0x12
    25ca:	53 89       	ldd	r21, Z+19	; 0x13
    25cc:	5d 83       	std	Y+5, r21	; 0x05
    25ce:	4c 83       	std	Y+4, r20	; 0x04
    25d0:	11 96       	adiw	r26, 0x01	; 1
    25d2:	6d 91       	ld	r22, X+
    25d4:	7c 91       	ld	r23, X
    25d6:	12 97       	sbiw	r26, 0x02	; 2
    25d8:	af 01       	movw	r20, r30
    25da:	42 5f       	subi	r20, 0xF2	; 242
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	64 17       	cp	r22, r20
    25e0:	75 07       	cpc	r23, r21
    25e2:	31 f4       	brne	.+12     	; 0x25f0 <xTaskIncrementTick+0x17c>
    25e4:	44 89       	ldd	r20, Z+20	; 0x14
    25e6:	55 89       	ldd	r21, Z+21	; 0x15
    25e8:	12 96       	adiw	r26, 0x02	; 2
    25ea:	5c 93       	st	X, r21
    25ec:	4e 93       	st	-X, r20
    25ee:	11 97       	sbiw	r26, 0x01	; 1
    25f0:	11 8e       	std	Z+25, r1	; 0x19
    25f2:	10 8e       	std	Z+24, r1	; 0x18
    25f4:	9c 91       	ld	r25, X
    25f6:	91 50       	subi	r25, 0x01	; 1
    25f8:	9c 93       	st	X, r25
    25fa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25fc:	90 91 e0 17 	lds	r25, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    2600:	9a 17       	cp	r25, r26
    2602:	10 f4       	brcc	.+4      	; 0x2608 <xTaskIncrementTick+0x194>
    2604:	a0 93 e0 17 	sts	0x17E0, r26	; 0x8017e0 <uxTopReadyPriority>
    2608:	9b e0       	ldi	r25, 0x0B	; 11
    260a:	9a 9f       	mul	r25, r26
    260c:	d0 01       	movw	r26, r0
    260e:	11 24       	eor	r1, r1
    2610:	ae 5d       	subi	r26, 0xDE	; 222
    2612:	b7 4e       	sbci	r27, 0xE7	; 231
    2614:	11 96       	adiw	r26, 0x01	; 1
    2616:	0d 90       	ld	r0, X+
    2618:	bc 91       	ld	r27, X
    261a:	a0 2d       	mov	r26, r0
    261c:	b7 83       	std	Z+7, r27	; 0x07
    261e:	a6 83       	std	Z+6, r26	; 0x06
    2620:	16 96       	adiw	r26, 0x06	; 6
    2622:	4d 91       	ld	r20, X+
    2624:	5c 91       	ld	r21, X
    2626:	17 97       	sbiw	r26, 0x07	; 7
    2628:	51 87       	std	Z+9, r21	; 0x09
    262a:	40 87       	std	Z+8, r20	; 0x08
    262c:	16 96       	adiw	r26, 0x06	; 6
    262e:	cd 91       	ld	r28, X+
    2630:	dc 91       	ld	r29, X
    2632:	17 97       	sbiw	r26, 0x07	; 7
    2634:	3d 83       	std	Y+5, r19	; 0x05
    2636:	2c 83       	std	Y+4, r18	; 0x04
    2638:	17 96       	adiw	r26, 0x07	; 7
    263a:	3c 93       	st	X, r19
    263c:	2e 93       	st	-X, r18
    263e:	16 97       	sbiw	r26, 0x06	; 6
    2640:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2642:	9a 9f       	mul	r25, r26
    2644:	d0 01       	movw	r26, r0
    2646:	11 24       	eor	r1, r1
    2648:	ae 5d       	subi	r26, 0xDE	; 222
    264a:	b7 4e       	sbci	r27, 0xE7	; 231
    264c:	b5 87       	std	Z+13, r27	; 0x0d
    264e:	a4 87       	std	Z+12, r26	; 0x0c
    2650:	9c 91       	ld	r25, X
    2652:	9f 5f       	subi	r25, 0xFF	; 255
    2654:	9c 93       	st	X, r25
    2656:	22 8d       	ldd	r18, Z+26	; 0x1a
    2658:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    265c:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2660:	92 8d       	ldd	r25, Z+26	; 0x1a
    2662:	29 17       	cp	r18, r25
    2664:	08 f0       	brcs	.+2      	; 0x2668 <xTaskIncrementTick+0x1f4>
    2666:	4f cf       	rjmp	.-354    	; 0x2506 <xTaskIncrementTick+0x92>
    2668:	51 cf       	rjmp	.-350    	; 0x250c <xTaskIncrementTick+0x98>
    266a:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    266e:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2672:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2674:	9b e0       	ldi	r25, 0x0B	; 11
    2676:	e9 9f       	mul	r30, r25
    2678:	f0 01       	movw	r30, r0
    267a:	11 24       	eor	r1, r1
    267c:	ee 5d       	subi	r30, 0xDE	; 222
    267e:	f7 4e       	sbci	r31, 0xE7	; 231
    2680:	90 81       	ld	r25, Z
    2682:	92 30       	cpi	r25, 0x02	; 2
    2684:	08 f0       	brcs	.+2      	; 0x2688 <xTaskIncrementTick+0x214>
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 91 da 17 	lds	r25, 0x17DA	; 0x8017da <xYieldPending>
    268c:	91 11       	cpse	r25, r1
    268e:	16 c0       	rjmp	.+44     	; 0x26bc <xTaskIncrementTick+0x248>
    2690:	16 c0       	rjmp	.+44     	; 0x26be <xTaskIncrementTick+0x24a>
    2692:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <xPendedTicks>
    2696:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <xPendedTicks+0x1>
    269a:	a0 91 dd 17 	lds	r26, 0x17DD	; 0x8017dd <xPendedTicks+0x2>
    269e:	b0 91 de 17 	lds	r27, 0x17DE	; 0x8017de <xPendedTicks+0x3>
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	a1 1d       	adc	r26, r1
    26a6:	b1 1d       	adc	r27, r1
    26a8:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <xPendedTicks>
    26ac:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <xPendedTicks+0x1>
    26b0:	a0 93 dd 17 	sts	0x17DD, r26	; 0x8017dd <xPendedTicks+0x2>
    26b4:	b0 93 de 17 	sts	0x17DE, r27	; 0x8017de <xPendedTicks+0x3>
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	01 c0       	rjmp	.+2      	; 0x26be <xTaskIncrementTick+0x24a>
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	ff 90       	pop	r15
    26c4:	ef 90       	pop	r14
    26c6:	df 90       	pop	r13
    26c8:	cf 90       	pop	r12
    26ca:	08 95       	ret

000026cc <xTaskResumeAll>:
    26cc:	cf 92       	push	r12
    26ce:	df 92       	push	r13
    26d0:	ef 92       	push	r14
    26d2:	ff 92       	push	r15
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	0f 92       	push	r0
    26de:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxSchedulerSuspended>
    26e2:	81 50       	subi	r24, 0x01	; 1
    26e4:	80 93 d1 17 	sts	0x17D1, r24	; 0x8017d1 <uxSchedulerSuspended>
    26e8:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxSchedulerSuspended>
    26ec:	81 11       	cpse	r24, r1
    26ee:	be c0       	rjmp	.+380    	; 0x286c <xTaskResumeAll+0x1a0>
    26f0:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <uxCurrentNumberOfTasks>
    26f4:	81 11       	cpse	r24, r1
    26f6:	88 c0       	rjmp	.+272    	; 0x2808 <xTaskResumeAll+0x13c>
    26f8:	bc c0       	rjmp	.+376    	; 0x2872 <xTaskResumeAll+0x1a6>
    26fa:	e0 91 04 18 	lds	r30, 0x1804	; 0x801804 <xPendingReadyList+0x7>
    26fe:	f0 91 05 18 	lds	r31, 0x1805	; 0x801805 <xPendingReadyList+0x8>
    2702:	00 84       	ldd	r0, Z+8	; 0x08
    2704:	f1 85       	ldd	r31, Z+9	; 0x09
    2706:	e0 2d       	mov	r30, r0
    2708:	a0 8d       	ldd	r26, Z+24	; 0x18
    270a:	b1 8d       	ldd	r27, Z+25	; 0x19
    270c:	c2 89       	ldd	r28, Z+18	; 0x12
    270e:	d3 89       	ldd	r29, Z+19	; 0x13
    2710:	84 89       	ldd	r24, Z+20	; 0x14
    2712:	95 89       	ldd	r25, Z+21	; 0x15
    2714:	9f 83       	std	Y+7, r25	; 0x07
    2716:	8e 83       	std	Y+6, r24	; 0x06
    2718:	c4 89       	ldd	r28, Z+20	; 0x14
    271a:	d5 89       	ldd	r29, Z+21	; 0x15
    271c:	82 89       	ldd	r24, Z+18	; 0x12
    271e:	93 89       	ldd	r25, Z+19	; 0x13
    2720:	9d 83       	std	Y+5, r25	; 0x05
    2722:	8c 83       	std	Y+4, r24	; 0x04
    2724:	11 96       	adiw	r26, 0x01	; 1
    2726:	2d 91       	ld	r18, X+
    2728:	3c 91       	ld	r19, X
    272a:	12 97       	sbiw	r26, 0x02	; 2
    272c:	cf 01       	movw	r24, r30
    272e:	0e 96       	adiw	r24, 0x0e	; 14
    2730:	28 17       	cp	r18, r24
    2732:	39 07       	cpc	r19, r25
    2734:	31 f4       	brne	.+12     	; 0x2742 <xTaskResumeAll+0x76>
    2736:	84 89       	ldd	r24, Z+20	; 0x14
    2738:	95 89       	ldd	r25, Z+21	; 0x15
    273a:	12 96       	adiw	r26, 0x02	; 2
    273c:	9c 93       	st	X, r25
    273e:	8e 93       	st	-X, r24
    2740:	11 97       	sbiw	r26, 0x01	; 1
    2742:	11 8e       	std	Z+25, r1	; 0x19
    2744:	10 8e       	std	Z+24, r1	; 0x18
    2746:	8c 91       	ld	r24, X
    2748:	81 50       	subi	r24, 0x01	; 1
    274a:	8c 93       	st	X, r24
    274c:	a4 85       	ldd	r26, Z+12	; 0x0c
    274e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2750:	c6 81       	ldd	r28, Z+6	; 0x06
    2752:	d7 81       	ldd	r29, Z+7	; 0x07
    2754:	80 85       	ldd	r24, Z+8	; 0x08
    2756:	91 85       	ldd	r25, Z+9	; 0x09
    2758:	9f 83       	std	Y+7, r25	; 0x07
    275a:	8e 83       	std	Y+6, r24	; 0x06
    275c:	c0 85       	ldd	r28, Z+8	; 0x08
    275e:	d1 85       	ldd	r29, Z+9	; 0x09
    2760:	86 81       	ldd	r24, Z+6	; 0x06
    2762:	97 81       	ldd	r25, Z+7	; 0x07
    2764:	9d 83       	std	Y+5, r25	; 0x05
    2766:	8c 83       	std	Y+4, r24	; 0x04
    2768:	11 96       	adiw	r26, 0x01	; 1
    276a:	8d 91       	ld	r24, X+
    276c:	9c 91       	ld	r25, X
    276e:	12 97       	sbiw	r26, 0x02	; 2
    2770:	9f 01       	movw	r18, r30
    2772:	2e 5f       	subi	r18, 0xFE	; 254
    2774:	3f 4f       	sbci	r19, 0xFF	; 255
    2776:	82 17       	cp	r24, r18
    2778:	93 07       	cpc	r25, r19
    277a:	31 f4       	brne	.+12     	; 0x2788 <xTaskResumeAll+0xbc>
    277c:	80 85       	ldd	r24, Z+8	; 0x08
    277e:	91 85       	ldd	r25, Z+9	; 0x09
    2780:	12 96       	adiw	r26, 0x02	; 2
    2782:	9c 93       	st	X, r25
    2784:	8e 93       	st	-X, r24
    2786:	11 97       	sbiw	r26, 0x01	; 1
    2788:	15 86       	std	Z+13, r1	; 0x0d
    278a:	14 86       	std	Z+12, r1	; 0x0c
    278c:	8c 91       	ld	r24, X
    278e:	81 50       	subi	r24, 0x01	; 1
    2790:	8c 93       	st	X, r24
    2792:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2794:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    2798:	8a 17       	cp	r24, r26
    279a:	10 f4       	brcc	.+4      	; 0x27a0 <xTaskResumeAll+0xd4>
    279c:	a0 93 e0 17 	sts	0x17E0, r26	; 0x8017e0 <uxTopReadyPriority>
    27a0:	8b e0       	ldi	r24, 0x0B	; 11
    27a2:	8a 9f       	mul	r24, r26
    27a4:	d0 01       	movw	r26, r0
    27a6:	11 24       	eor	r1, r1
    27a8:	ae 5d       	subi	r26, 0xDE	; 222
    27aa:	b7 4e       	sbci	r27, 0xE7	; 231
    27ac:	11 96       	adiw	r26, 0x01	; 1
    27ae:	0d 90       	ld	r0, X+
    27b0:	bc 91       	ld	r27, X
    27b2:	a0 2d       	mov	r26, r0
    27b4:	b7 83       	std	Z+7, r27	; 0x07
    27b6:	a6 83       	std	Z+6, r26	; 0x06
    27b8:	16 96       	adiw	r26, 0x06	; 6
    27ba:	4d 91       	ld	r20, X+
    27bc:	5c 91       	ld	r21, X
    27be:	17 97       	sbiw	r26, 0x07	; 7
    27c0:	51 87       	std	Z+9, r21	; 0x09
    27c2:	40 87       	std	Z+8, r20	; 0x08
    27c4:	16 96       	adiw	r26, 0x06	; 6
    27c6:	cd 91       	ld	r28, X+
    27c8:	dc 91       	ld	r29, X
    27ca:	17 97       	sbiw	r26, 0x07	; 7
    27cc:	3d 83       	std	Y+5, r19	; 0x05
    27ce:	2c 83       	std	Y+4, r18	; 0x04
    27d0:	17 96       	adiw	r26, 0x07	; 7
    27d2:	3c 93       	st	X, r19
    27d4:	2e 93       	st	-X, r18
    27d6:	16 97       	sbiw	r26, 0x06	; 6
    27d8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27da:	8a 9f       	mul	r24, r26
    27dc:	d0 01       	movw	r26, r0
    27de:	11 24       	eor	r1, r1
    27e0:	ae 5d       	subi	r26, 0xDE	; 222
    27e2:	b7 4e       	sbci	r27, 0xE7	; 231
    27e4:	b5 87       	std	Z+13, r27	; 0x0d
    27e6:	a4 87       	std	Z+12, r26	; 0x0c
    27e8:	8c 91       	ld	r24, X
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	8c 93       	st	X, r24
    27ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    27f0:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    27f4:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    27f8:	5a 96       	adiw	r26, 0x1a	; 26
    27fa:	8c 91       	ld	r24, X
    27fc:	98 17       	cp	r25, r24
    27fe:	30 f0       	brcs	.+12     	; 0x280c <xTaskResumeAll+0x140>
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <xYieldPending>
    2806:	02 c0       	rjmp	.+4      	; 0x280c <xTaskResumeAll+0x140>
    2808:	e0 e0       	ldi	r30, 0x00	; 0
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <xPendingReadyList>
    2810:	81 11       	cpse	r24, r1
    2812:	73 cf       	rjmp	.-282    	; 0x26fa <xTaskResumeAll+0x2e>
    2814:	ef 2b       	or	r30, r31
    2816:	09 f0       	breq	.+2      	; 0x281a <xTaskResumeAll+0x14e>
    2818:	7d db       	rcall	.-2310   	; 0x1f14 <prvResetNextTaskUnblockTime>
    281a:	c0 90 db 17 	lds	r12, 0x17DB	; 0x8017db <xPendedTicks>
    281e:	d0 90 dc 17 	lds	r13, 0x17DC	; 0x8017dc <xPendedTicks+0x1>
    2822:	e0 90 dd 17 	lds	r14, 0x17DD	; 0x8017dd <xPendedTicks+0x2>
    2826:	f0 90 de 17 	lds	r15, 0x17DE	; 0x8017de <xPendedTicks+0x3>
    282a:	c1 14       	cp	r12, r1
    282c:	d1 04       	cpc	r13, r1
    282e:	e1 04       	cpc	r14, r1
    2830:	f1 04       	cpc	r15, r1
    2832:	a1 f0       	breq	.+40     	; 0x285c <xTaskResumeAll+0x190>
    2834:	1f de       	rcall	.-962    	; 0x2474 <xTaskIncrementTick>
    2836:	88 23       	and	r24, r24
    2838:	19 f0       	breq	.+6      	; 0x2840 <xTaskResumeAll+0x174>
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <xYieldPending>
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	c8 1a       	sub	r12, r24
    2844:	d1 08       	sbc	r13, r1
    2846:	e1 08       	sbc	r14, r1
    2848:	f1 08       	sbc	r15, r1
    284a:	a1 f7       	brne	.-24     	; 0x2834 <xTaskResumeAll+0x168>
    284c:	10 92 db 17 	sts	0x17DB, r1	; 0x8017db <xPendedTicks>
    2850:	10 92 dc 17 	sts	0x17DC, r1	; 0x8017dc <xPendedTicks+0x1>
    2854:	10 92 dd 17 	sts	0x17DD, r1	; 0x8017dd <xPendedTicks+0x2>
    2858:	10 92 de 17 	sts	0x17DE, r1	; 0x8017de <xPendedTicks+0x3>
    285c:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <xYieldPending>
    2860:	88 23       	and	r24, r24
    2862:	31 f0       	breq	.+12     	; 0x2870 <xTaskResumeAll+0x1a4>
    2864:	0e 94 fa 07 	call	0xff4	; 0xff4 <vPortYield>
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	03 c0       	rjmp	.+6      	; 0x2872 <xTaskResumeAll+0x1a6>
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <xTaskResumeAll+0x1a6>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	ff 90       	pop	r15
    287c:	ef 90       	pop	r14
    287e:	df 90       	pop	r13
    2880:	cf 90       	pop	r12
    2882:	08 95       	ret

00002884 <xTaskDelayUntil>:
    2884:	8f 92       	push	r8
    2886:	9f 92       	push	r9
    2888:	af 92       	push	r10
    288a:	bf 92       	push	r11
    288c:	cf 92       	push	r12
    288e:	df 92       	push	r13
    2890:	ef 92       	push	r14
    2892:	ff 92       	push	r15
    2894:	1f 93       	push	r17
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	ec 01       	movw	r28, r24
    289c:	6a 01       	movw	r12, r20
    289e:	7b 01       	movw	r14, r22
    28a0:	d5 dd       	rcall	.-1110   	; 0x244c <vTaskSuspendAll>
    28a2:	80 90 e1 17 	lds	r8, 0x17E1	; 0x8017e1 <xTickCount>
    28a6:	90 90 e2 17 	lds	r9, 0x17E2	; 0x8017e2 <xTickCount+0x1>
    28aa:	a0 90 e3 17 	lds	r10, 0x17E3	; 0x8017e3 <xTickCount+0x2>
    28ae:	b0 90 e4 17 	lds	r11, 0x17E4	; 0x8017e4 <xTickCount+0x3>
    28b2:	88 81       	ld	r24, Y
    28b4:	99 81       	ldd	r25, Y+1	; 0x01
    28b6:	aa 81       	ldd	r26, Y+2	; 0x02
    28b8:	bb 81       	ldd	r27, Y+3	; 0x03
    28ba:	ac 01       	movw	r20, r24
    28bc:	bd 01       	movw	r22, r26
    28be:	4c 0d       	add	r20, r12
    28c0:	5d 1d       	adc	r21, r13
    28c2:	6e 1d       	adc	r22, r14
    28c4:	7f 1d       	adc	r23, r15
    28c6:	88 16       	cp	r8, r24
    28c8:	99 06       	cpc	r9, r25
    28ca:	aa 06       	cpc	r10, r26
    28cc:	bb 06       	cpc	r11, r27
    28ce:	60 f4       	brcc	.+24     	; 0x28e8 <xTaskDelayUntil+0x64>
    28d0:	48 17       	cp	r20, r24
    28d2:	59 07       	cpc	r21, r25
    28d4:	6a 07       	cpc	r22, r26
    28d6:	7b 07       	cpc	r23, r27
    28d8:	98 f4       	brcc	.+38     	; 0x2900 <xTaskDelayUntil+0x7c>
    28da:	84 16       	cp	r8, r20
    28dc:	95 06       	cpc	r9, r21
    28de:	a6 06       	cpc	r10, r22
    28e0:	b7 06       	cpc	r11, r23
    28e2:	80 f0       	brcs	.+32     	; 0x2904 <xTaskDelayUntil+0x80>
    28e4:	10 e0       	ldi	r17, 0x00	; 0
    28e6:	13 c0       	rjmp	.+38     	; 0x290e <xTaskDelayUntil+0x8a>
    28e8:	48 17       	cp	r20, r24
    28ea:	59 07       	cpc	r21, r25
    28ec:	6a 07       	cpc	r22, r26
    28ee:	7b 07       	cpc	r23, r27
    28f0:	58 f0       	brcs	.+22     	; 0x2908 <xTaskDelayUntil+0x84>
    28f2:	84 16       	cp	r8, r20
    28f4:	95 06       	cpc	r9, r21
    28f6:	a6 06       	cpc	r10, r22
    28f8:	b7 06       	cpc	r11, r23
    28fa:	40 f0       	brcs	.+16     	; 0x290c <xTaskDelayUntil+0x88>
    28fc:	10 e0       	ldi	r17, 0x00	; 0
    28fe:	07 c0       	rjmp	.+14     	; 0x290e <xTaskDelayUntil+0x8a>
    2900:	10 e0       	ldi	r17, 0x00	; 0
    2902:	05 c0       	rjmp	.+10     	; 0x290e <xTaskDelayUntil+0x8a>
    2904:	11 e0       	ldi	r17, 0x01	; 1
    2906:	03 c0       	rjmp	.+6      	; 0x290e <xTaskDelayUntil+0x8a>
    2908:	11 e0       	ldi	r17, 0x01	; 1
    290a:	01 c0       	rjmp	.+2      	; 0x290e <xTaskDelayUntil+0x8a>
    290c:	11 e0       	ldi	r17, 0x01	; 1
    290e:	48 83       	st	Y, r20
    2910:	59 83       	std	Y+1, r21	; 0x01
    2912:	6a 83       	std	Y+2, r22	; 0x02
    2914:	7b 83       	std	Y+3, r23	; 0x03
    2916:	11 23       	and	r17, r17
    2918:	41 f0       	breq	.+16     	; 0x292a <xTaskDelayUntil+0xa6>
    291a:	cb 01       	movw	r24, r22
    291c:	ba 01       	movw	r22, r20
    291e:	68 19       	sub	r22, r8
    2920:	79 09       	sbc	r23, r9
    2922:	8a 09       	sbc	r24, r10
    2924:	9b 09       	sbc	r25, r11
    2926:	40 e0       	ldi	r20, 0x00	; 0
    2928:	6b dc       	rcall	.-1834   	; 0x2200 <prvAddCurrentTaskToDelayedList>
    292a:	d0 de       	rcall	.-608    	; 0x26cc <xTaskResumeAll>
    292c:	81 11       	cpse	r24, r1
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <xTaskDelayUntil+0xb0>
    2930:	0e 94 fa 07 	call	0xff4	; 0xff4 <vPortYield>
    2934:	81 2f       	mov	r24, r17
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	ff 90       	pop	r15
    293e:	ef 90       	pop	r14
    2940:	df 90       	pop	r13
    2942:	cf 90       	pop	r12
    2944:	bf 90       	pop	r11
    2946:	af 90       	pop	r10
    2948:	9f 90       	pop	r9
    294a:	8f 90       	pop	r8
    294c:	08 95       	ret

0000294e <vTaskDelay>:
    294e:	cf 92       	push	r12
    2950:	df 92       	push	r13
    2952:	ef 92       	push	r14
    2954:	ff 92       	push	r15
    2956:	6b 01       	movw	r12, r22
    2958:	7c 01       	movw	r14, r24
    295a:	67 2b       	or	r22, r23
    295c:	68 2b       	or	r22, r24
    295e:	69 2b       	or	r22, r25
    2960:	39 f0       	breq	.+14     	; 0x2970 <vTaskDelay+0x22>
    2962:	74 dd       	rcall	.-1304   	; 0x244c <vTaskSuspendAll>
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	c7 01       	movw	r24, r14
    2968:	b6 01       	movw	r22, r12
    296a:	4a dc       	rcall	.-1900   	; 0x2200 <prvAddCurrentTaskToDelayedList>
    296c:	af de       	rcall	.-674    	; 0x26cc <xTaskResumeAll>
    296e:	01 c0       	rjmp	.+2      	; 0x2972 <vTaskDelay+0x24>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	81 11       	cpse	r24, r1
    2974:	02 c0       	rjmp	.+4      	; 0x297a <vTaskDelay+0x2c>
    2976:	0e 94 fa 07 	call	0xff4	; 0xff4 <vPortYield>
    297a:	ff 90       	pop	r15
    297c:	ef 90       	pop	r14
    297e:	df 90       	pop	r13
    2980:	cf 90       	pop	r12
    2982:	08 95       	ret

00002984 <vTaskSwitchContext>:
    2984:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxSchedulerSuspended>
    2988:	88 23       	and	r24, r24
    298a:	21 f0       	breq	.+8      	; 0x2994 <vTaskSwitchContext+0x10>
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <xYieldPending>
    2992:	08 95       	ret
    2994:	10 92 da 17 	sts	0x17DA, r1	; 0x8017da <xYieldPending>
    2998:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    299c:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    29a0:	20 81       	ld	r18, Z
    29a2:	31 81       	ldd	r19, Z+1	; 0x01
    29a4:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    29a8:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    29ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    29ae:	94 8d       	ldd	r25, Z+28	; 0x1c
    29b0:	82 17       	cp	r24, r18
    29b2:	93 07       	cpc	r25, r19
    29b4:	60 f0       	brcs	.+24     	; 0x29ce <vTaskSwitchContext+0x4a>
    29b6:	60 91 90 18 	lds	r22, 0x1890	; 0x801890 <pxCurrentTCB>
    29ba:	70 91 91 18 	lds	r23, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    29be:	63 5e       	subi	r22, 0xE3	; 227
    29c0:	7f 4f       	sbci	r23, 0xFF	; 255
    29c2:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    29c6:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    29ca:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <vApplicationStackOverflowHook>
    29ce:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    29d2:	01 c0       	rjmp	.+2      	; 0x29d6 <vTaskSwitchContext+0x52>
    29d4:	81 50       	subi	r24, 0x01	; 1
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	9b e0       	ldi	r25, 0x0B	; 11
    29dc:	92 9f       	mul	r25, r18
    29de:	f0 01       	movw	r30, r0
    29e0:	93 9f       	mul	r25, r19
    29e2:	f0 0d       	add	r31, r0
    29e4:	11 24       	eor	r1, r1
    29e6:	ee 5d       	subi	r30, 0xDE	; 222
    29e8:	f7 4e       	sbci	r31, 0xE7	; 231
    29ea:	90 81       	ld	r25, Z
    29ec:	99 23       	and	r25, r25
    29ee:	91 f3       	breq	.-28     	; 0x29d4 <vTaskSwitchContext+0x50>
    29f0:	9b e0       	ldi	r25, 0x0B	; 11
    29f2:	92 9f       	mul	r25, r18
    29f4:	a0 01       	movw	r20, r0
    29f6:	93 9f       	mul	r25, r19
    29f8:	50 0d       	add	r21, r0
    29fa:	11 24       	eor	r1, r1
    29fc:	df 01       	movw	r26, r30
    29fe:	01 80       	ldd	r0, Z+1	; 0x01
    2a00:	f2 81       	ldd	r31, Z+2	; 0x02
    2a02:	e0 2d       	mov	r30, r0
    2a04:	04 80       	ldd	r0, Z+4	; 0x04
    2a06:	f5 81       	ldd	r31, Z+5	; 0x05
    2a08:	e0 2d       	mov	r30, r0
    2a0a:	12 96       	adiw	r26, 0x02	; 2
    2a0c:	fc 93       	st	X, r31
    2a0e:	ee 93       	st	-X, r30
    2a10:	11 97       	sbiw	r26, 0x01	; 1
    2a12:	4b 5d       	subi	r20, 0xDB	; 219
    2a14:	57 4e       	sbci	r21, 0xE7	; 231
    2a16:	e4 17       	cp	r30, r20
    2a18:	f5 07       	cpc	r31, r21
    2a1a:	29 f4       	brne	.+10     	; 0x2a26 <vTaskSwitchContext+0xa2>
    2a1c:	44 81       	ldd	r20, Z+4	; 0x04
    2a1e:	55 81       	ldd	r21, Z+5	; 0x05
    2a20:	fd 01       	movw	r30, r26
    2a22:	52 83       	std	Z+2, r21	; 0x02
    2a24:	41 83       	std	Z+1, r20	; 0x01
    2a26:	9b e0       	ldi	r25, 0x0B	; 11
    2a28:	92 9f       	mul	r25, r18
    2a2a:	f0 01       	movw	r30, r0
    2a2c:	93 9f       	mul	r25, r19
    2a2e:	f0 0d       	add	r31, r0
    2a30:	11 24       	eor	r1, r1
    2a32:	ee 5d       	subi	r30, 0xDE	; 222
    2a34:	f7 4e       	sbci	r31, 0xE7	; 231
    2a36:	01 80       	ldd	r0, Z+1	; 0x01
    2a38:	f2 81       	ldd	r31, Z+2	; 0x02
    2a3a:	e0 2d       	mov	r30, r0
    2a3c:	20 85       	ldd	r18, Z+8	; 0x08
    2a3e:	31 85       	ldd	r19, Z+9	; 0x09
    2a40:	30 93 91 18 	sts	0x1891, r19	; 0x801891 <pxCurrentTCB+0x1>
    2a44:	20 93 90 18 	sts	0x1890, r18	; 0x801890 <pxCurrentTCB>
    2a48:	80 93 e0 17 	sts	0x17E0, r24	; 0x8017e0 <uxTopReadyPriority>
    2a4c:	08 95       	ret

00002a4e <vTaskPlaceOnEventList>:
    2a4e:	cf 92       	push	r12
    2a50:	df 92       	push	r13
    2a52:	ef 92       	push	r14
    2a54:	ff 92       	push	r15
    2a56:	6a 01       	movw	r12, r20
    2a58:	7b 01       	movw	r14, r22
    2a5a:	60 91 90 18 	lds	r22, 0x1890	; 0x801890 <pxCurrentTCB>
    2a5e:	70 91 91 18 	lds	r23, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2a62:	62 5f       	subi	r22, 0xF2	; 242
    2a64:	7f 4f       	sbci	r23, 0xFF	; 255
    2a66:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInsert>
    2a6a:	41 e0       	ldi	r20, 0x01	; 1
    2a6c:	c7 01       	movw	r24, r14
    2a6e:	b6 01       	movw	r22, r12
    2a70:	c7 db       	rcall	.-2162   	; 0x2200 <prvAddCurrentTaskToDelayedList>
    2a72:	ff 90       	pop	r15
    2a74:	ef 90       	pop	r14
    2a76:	df 90       	pop	r13
    2a78:	cf 90       	pop	r12
    2a7a:	08 95       	ret

00002a7c <vTaskPlaceOnUnorderedEventList>:
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	fc 01       	movw	r30, r24
    2a86:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    2a8a:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2a8e:	70 68       	ori	r23, 0x80	; 128
    2a90:	1e 96       	adiw	r26, 0x0e	; 14
    2a92:	4d 93       	st	X+, r20
    2a94:	5d 93       	st	X+, r21
    2a96:	6d 93       	st	X+, r22
    2a98:	7c 93       	st	X, r23
    2a9a:	51 97       	sbiw	r26, 0x11	; 17
    2a9c:	a1 81       	ldd	r26, Z+1	; 0x01
    2a9e:	b2 81       	ldd	r27, Z+2	; 0x02
    2aa0:	c0 91 90 18 	lds	r28, 0x1890	; 0x801890 <pxCurrentTCB>
    2aa4:	d0 91 91 18 	lds	r29, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2aa8:	bb 8b       	std	Y+19, r27	; 0x13
    2aaa:	aa 8b       	std	Y+18, r26	; 0x12
    2aac:	c0 91 90 18 	lds	r28, 0x1890	; 0x801890 <pxCurrentTCB>
    2ab0:	d0 91 91 18 	lds	r29, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2ab4:	16 96       	adiw	r26, 0x06	; 6
    2ab6:	8d 91       	ld	r24, X+
    2ab8:	9c 91       	ld	r25, X
    2aba:	17 97       	sbiw	r26, 0x07	; 7
    2abc:	9d 8b       	std	Y+21, r25	; 0x15
    2abe:	8c 8b       	std	Y+20, r24	; 0x14
    2ac0:	16 96       	adiw	r26, 0x06	; 6
    2ac2:	cd 91       	ld	r28, X+
    2ac4:	dc 91       	ld	r29, X
    2ac6:	17 97       	sbiw	r26, 0x07	; 7
    2ac8:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    2acc:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2ad0:	0e 96       	adiw	r24, 0x0e	; 14
    2ad2:	9d 83       	std	Y+5, r25	; 0x05
    2ad4:	8c 83       	std	Y+4, r24	; 0x04
    2ad6:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    2ada:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2ade:	0e 96       	adiw	r24, 0x0e	; 14
    2ae0:	17 96       	adiw	r26, 0x07	; 7
    2ae2:	9c 93       	st	X, r25
    2ae4:	8e 93       	st	-X, r24
    2ae6:	16 97       	sbiw	r26, 0x06	; 6
    2ae8:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    2aec:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2af0:	59 96       	adiw	r26, 0x19	; 25
    2af2:	fc 93       	st	X, r31
    2af4:	ee 93       	st	-X, r30
    2af6:	58 97       	sbiw	r26, 0x18	; 24
    2af8:	80 81       	ld	r24, Z
    2afa:	8f 5f       	subi	r24, 0xFF	; 255
    2afc:	80 83       	st	Z, r24
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	c9 01       	movw	r24, r18
    2b02:	b8 01       	movw	r22, r16
    2b04:	7d db       	rcall	.-2310   	; 0x2200 <prvAddCurrentTaskToDelayedList>
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	1f 91       	pop	r17
    2b0c:	0f 91       	pop	r16
    2b0e:	08 95       	ret

00002b10 <vTaskPlaceOnEventListRestricted>:
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	fc 01       	movw	r30, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	ba 01       	movw	r22, r20
    2b1a:	a1 81       	ldd	r26, Z+1	; 0x01
    2b1c:	b2 81       	ldd	r27, Z+2	; 0x02
    2b1e:	c0 91 90 18 	lds	r28, 0x1890	; 0x801890 <pxCurrentTCB>
    2b22:	d0 91 91 18 	lds	r29, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2b26:	bb 8b       	std	Y+19, r27	; 0x13
    2b28:	aa 8b       	std	Y+18, r26	; 0x12
    2b2a:	c0 91 90 18 	lds	r28, 0x1890	; 0x801890 <pxCurrentTCB>
    2b2e:	d0 91 91 18 	lds	r29, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2b32:	16 96       	adiw	r26, 0x06	; 6
    2b34:	4d 91       	ld	r20, X+
    2b36:	5c 91       	ld	r21, X
    2b38:	17 97       	sbiw	r26, 0x07	; 7
    2b3a:	5d 8b       	std	Y+21, r21	; 0x15
    2b3c:	4c 8b       	std	Y+20, r20	; 0x14
    2b3e:	16 96       	adiw	r26, 0x06	; 6
    2b40:	cd 91       	ld	r28, X+
    2b42:	dc 91       	ld	r29, X
    2b44:	17 97       	sbiw	r26, 0x07	; 7
    2b46:	40 91 90 18 	lds	r20, 0x1890	; 0x801890 <pxCurrentTCB>
    2b4a:	50 91 91 18 	lds	r21, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2b4e:	42 5f       	subi	r20, 0xF2	; 242
    2b50:	5f 4f       	sbci	r21, 0xFF	; 255
    2b52:	5d 83       	std	Y+5, r21	; 0x05
    2b54:	4c 83       	std	Y+4, r20	; 0x04
    2b56:	40 91 90 18 	lds	r20, 0x1890	; 0x801890 <pxCurrentTCB>
    2b5a:	50 91 91 18 	lds	r21, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2b5e:	42 5f       	subi	r20, 0xF2	; 242
    2b60:	5f 4f       	sbci	r21, 0xFF	; 255
    2b62:	17 96       	adiw	r26, 0x07	; 7
    2b64:	5c 93       	st	X, r21
    2b66:	4e 93       	st	-X, r20
    2b68:	16 97       	sbiw	r26, 0x06	; 6
    2b6a:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    2b6e:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2b72:	59 96       	adiw	r26, 0x19	; 25
    2b74:	fc 93       	st	X, r31
    2b76:	ee 93       	st	-X, r30
    2b78:	58 97       	sbiw	r26, 0x18	; 24
    2b7a:	30 81       	ld	r19, Z
    2b7c:	3f 5f       	subi	r19, 0xFF	; 255
    2b7e:	30 83       	st	Z, r19
    2b80:	22 23       	and	r18, r18
    2b82:	19 f0       	breq	.+6      	; 0x2b8a <vTaskPlaceOnEventListRestricted+0x7a>
    2b84:	6f ef       	ldi	r22, 0xFF	; 255
    2b86:	7f ef       	ldi	r23, 0xFF	; 255
    2b88:	cb 01       	movw	r24, r22
    2b8a:	42 2f       	mov	r20, r18
    2b8c:	39 db       	rcall	.-2446   	; 0x2200 <prvAddCurrentTaskToDelayedList>
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	08 95       	ret

00002b94 <xTaskRemoveFromEventList>:
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	dc 01       	movw	r26, r24
    2b9a:	17 96       	adiw	r26, 0x07	; 7
    2b9c:	ed 91       	ld	r30, X+
    2b9e:	fc 91       	ld	r31, X
    2ba0:	18 97       	sbiw	r26, 0x08	; 8
    2ba2:	00 84       	ldd	r0, Z+8	; 0x08
    2ba4:	f1 85       	ldd	r31, Z+9	; 0x09
    2ba6:	e0 2d       	mov	r30, r0
    2ba8:	a0 8d       	ldd	r26, Z+24	; 0x18
    2baa:	b1 8d       	ldd	r27, Z+25	; 0x19
    2bac:	c2 89       	ldd	r28, Z+18	; 0x12
    2bae:	d3 89       	ldd	r29, Z+19	; 0x13
    2bb0:	84 89       	ldd	r24, Z+20	; 0x14
    2bb2:	95 89       	ldd	r25, Z+21	; 0x15
    2bb4:	9f 83       	std	Y+7, r25	; 0x07
    2bb6:	8e 83       	std	Y+6, r24	; 0x06
    2bb8:	c4 89       	ldd	r28, Z+20	; 0x14
    2bba:	d5 89       	ldd	r29, Z+21	; 0x15
    2bbc:	82 89       	ldd	r24, Z+18	; 0x12
    2bbe:	93 89       	ldd	r25, Z+19	; 0x13
    2bc0:	9d 83       	std	Y+5, r25	; 0x05
    2bc2:	8c 83       	std	Y+4, r24	; 0x04
    2bc4:	11 96       	adiw	r26, 0x01	; 1
    2bc6:	8d 91       	ld	r24, X+
    2bc8:	9c 91       	ld	r25, X
    2bca:	12 97       	sbiw	r26, 0x02	; 2
    2bcc:	9f 01       	movw	r18, r30
    2bce:	22 5f       	subi	r18, 0xF2	; 242
    2bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd2:	82 17       	cp	r24, r18
    2bd4:	93 07       	cpc	r25, r19
    2bd6:	31 f4       	brne	.+12     	; 0x2be4 <xTaskRemoveFromEventList+0x50>
    2bd8:	84 89       	ldd	r24, Z+20	; 0x14
    2bda:	95 89       	ldd	r25, Z+21	; 0x15
    2bdc:	12 96       	adiw	r26, 0x02	; 2
    2bde:	9c 93       	st	X, r25
    2be0:	8e 93       	st	-X, r24
    2be2:	11 97       	sbiw	r26, 0x01	; 1
    2be4:	11 8e       	std	Z+25, r1	; 0x19
    2be6:	10 8e       	std	Z+24, r1	; 0x18
    2be8:	8c 91       	ld	r24, X
    2bea:	81 50       	subi	r24, 0x01	; 1
    2bec:	8c 93       	st	X, r24
    2bee:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxSchedulerSuspended>
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	52 c0       	rjmp	.+164    	; 0x2c9a <xTaskRemoveFromEventList+0x106>
    2bf6:	a4 85       	ldd	r26, Z+12	; 0x0c
    2bf8:	b5 85       	ldd	r27, Z+13	; 0x0d
    2bfa:	c6 81       	ldd	r28, Z+6	; 0x06
    2bfc:	d7 81       	ldd	r29, Z+7	; 0x07
    2bfe:	80 85       	ldd	r24, Z+8	; 0x08
    2c00:	91 85       	ldd	r25, Z+9	; 0x09
    2c02:	9f 83       	std	Y+7, r25	; 0x07
    2c04:	8e 83       	std	Y+6, r24	; 0x06
    2c06:	c0 85       	ldd	r28, Z+8	; 0x08
    2c08:	d1 85       	ldd	r29, Z+9	; 0x09
    2c0a:	86 81       	ldd	r24, Z+6	; 0x06
    2c0c:	97 81       	ldd	r25, Z+7	; 0x07
    2c0e:	9d 83       	std	Y+5, r25	; 0x05
    2c10:	8c 83       	std	Y+4, r24	; 0x04
    2c12:	11 96       	adiw	r26, 0x01	; 1
    2c14:	8d 91       	ld	r24, X+
    2c16:	9c 91       	ld	r25, X
    2c18:	12 97       	sbiw	r26, 0x02	; 2
    2c1a:	9f 01       	movw	r18, r30
    2c1c:	2e 5f       	subi	r18, 0xFE	; 254
    2c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c20:	82 17       	cp	r24, r18
    2c22:	93 07       	cpc	r25, r19
    2c24:	31 f4       	brne	.+12     	; 0x2c32 <xTaskRemoveFromEventList+0x9e>
    2c26:	80 85       	ldd	r24, Z+8	; 0x08
    2c28:	91 85       	ldd	r25, Z+9	; 0x09
    2c2a:	12 96       	adiw	r26, 0x02	; 2
    2c2c:	9c 93       	st	X, r25
    2c2e:	8e 93       	st	-X, r24
    2c30:	11 97       	sbiw	r26, 0x01	; 1
    2c32:	15 86       	std	Z+13, r1	; 0x0d
    2c34:	14 86       	std	Z+12, r1	; 0x0c
    2c36:	8c 91       	ld	r24, X
    2c38:	81 50       	subi	r24, 0x01	; 1
    2c3a:	8c 93       	st	X, r24
    2c3c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c3e:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    2c42:	8a 17       	cp	r24, r26
    2c44:	10 f4       	brcc	.+4      	; 0x2c4a <xTaskRemoveFromEventList+0xb6>
    2c46:	a0 93 e0 17 	sts	0x17E0, r26	; 0x8017e0 <uxTopReadyPriority>
    2c4a:	8b e0       	ldi	r24, 0x0B	; 11
    2c4c:	8a 9f       	mul	r24, r26
    2c4e:	d0 01       	movw	r26, r0
    2c50:	11 24       	eor	r1, r1
    2c52:	ae 5d       	subi	r26, 0xDE	; 222
    2c54:	b7 4e       	sbci	r27, 0xE7	; 231
    2c56:	11 96       	adiw	r26, 0x01	; 1
    2c58:	0d 90       	ld	r0, X+
    2c5a:	bc 91       	ld	r27, X
    2c5c:	a0 2d       	mov	r26, r0
    2c5e:	b7 83       	std	Z+7, r27	; 0x07
    2c60:	a6 83       	std	Z+6, r26	; 0x06
    2c62:	16 96       	adiw	r26, 0x06	; 6
    2c64:	4d 91       	ld	r20, X+
    2c66:	5c 91       	ld	r21, X
    2c68:	17 97       	sbiw	r26, 0x07	; 7
    2c6a:	51 87       	std	Z+9, r21	; 0x09
    2c6c:	40 87       	std	Z+8, r20	; 0x08
    2c6e:	16 96       	adiw	r26, 0x06	; 6
    2c70:	cd 91       	ld	r28, X+
    2c72:	dc 91       	ld	r29, X
    2c74:	17 97       	sbiw	r26, 0x07	; 7
    2c76:	3d 83       	std	Y+5, r19	; 0x05
    2c78:	2c 83       	std	Y+4, r18	; 0x04
    2c7a:	17 96       	adiw	r26, 0x07	; 7
    2c7c:	3c 93       	st	X, r19
    2c7e:	2e 93       	st	-X, r18
    2c80:	16 97       	sbiw	r26, 0x06	; 6
    2c82:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c84:	8a 9f       	mul	r24, r26
    2c86:	d0 01       	movw	r26, r0
    2c88:	11 24       	eor	r1, r1
    2c8a:	ae 5d       	subi	r26, 0xDE	; 222
    2c8c:	b7 4e       	sbci	r27, 0xE7	; 231
    2c8e:	b5 87       	std	Z+13, r27	; 0x0d
    2c90:	a4 87       	std	Z+12, r26	; 0x0c
    2c92:	8c 91       	ld	r24, X
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	8c 93       	st	X, r24
    2c98:	1c c0       	rjmp	.+56     	; 0x2cd2 <xTaskRemoveFromEventList+0x13e>
    2c9a:	4d ef       	ldi	r20, 0xFD	; 253
    2c9c:	57 e1       	ldi	r21, 0x17	; 23
    2c9e:	da 01       	movw	r26, r20
    2ca0:	11 96       	adiw	r26, 0x01	; 1
    2ca2:	cd 91       	ld	r28, X+
    2ca4:	dc 91       	ld	r29, X
    2ca6:	12 97       	sbiw	r26, 0x02	; 2
    2ca8:	d3 8b       	std	Z+19, r29	; 0x13
    2caa:	c2 8b       	std	Z+18, r28	; 0x12
    2cac:	8e 81       	ldd	r24, Y+6	; 0x06
    2cae:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb0:	95 8b       	std	Z+21, r25	; 0x15
    2cb2:	84 8b       	std	Z+20, r24	; 0x14
    2cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb8:	dc 01       	movw	r26, r24
    2cba:	15 96       	adiw	r26, 0x05	; 5
    2cbc:	3c 93       	st	X, r19
    2cbe:	2e 93       	st	-X, r18
    2cc0:	14 97       	sbiw	r26, 0x04	; 4
    2cc2:	3f 83       	std	Y+7, r19	; 0x07
    2cc4:	2e 83       	std	Y+6, r18	; 0x06
    2cc6:	51 8f       	std	Z+25, r21	; 0x19
    2cc8:	40 8f       	std	Z+24, r20	; 0x18
    2cca:	da 01       	movw	r26, r20
    2ccc:	8c 91       	ld	r24, X
    2cce:	8f 5f       	subi	r24, 0xFF	; 255
    2cd0:	8c 93       	st	X, r24
    2cd2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cd4:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    2cd8:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2cdc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cde:	89 17       	cp	r24, r25
    2ce0:	20 f4       	brcc	.+8      	; 0x2cea <xTaskRemoveFromEventList+0x156>
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <xYieldPending>
    2ce8:	01 c0       	rjmp	.+2      	; 0x2cec <xTaskRemoveFromEventList+0x158>
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	08 95       	ret

00002cf2 <vTaskRemoveFromUnorderedEventList>:
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	70 68       	ori	r23, 0x80	; 128
    2cfa:	4d 93       	st	X+, r20
    2cfc:	5d 93       	st	X+, r21
    2cfe:	6d 93       	st	X+, r22
    2d00:	7c 93       	st	X, r23
    2d02:	13 97       	sbiw	r26, 0x03	; 3
    2d04:	18 96       	adiw	r26, 0x08	; 8
    2d06:	ed 91       	ld	r30, X+
    2d08:	fc 91       	ld	r31, X
    2d0a:	19 97       	sbiw	r26, 0x09	; 9
    2d0c:	1a 96       	adiw	r26, 0x0a	; 10
    2d0e:	4d 91       	ld	r20, X+
    2d10:	5c 91       	ld	r21, X
    2d12:	1b 97       	sbiw	r26, 0x0b	; 11
    2d14:	14 96       	adiw	r26, 0x04	; 4
    2d16:	8d 91       	ld	r24, X+
    2d18:	9c 91       	ld	r25, X
    2d1a:	15 97       	sbiw	r26, 0x05	; 5
    2d1c:	16 96       	adiw	r26, 0x06	; 6
    2d1e:	2d 91       	ld	r18, X+
    2d20:	3c 91       	ld	r19, X
    2d22:	17 97       	sbiw	r26, 0x07	; 7
    2d24:	ec 01       	movw	r28, r24
    2d26:	3f 83       	std	Y+7, r19	; 0x07
    2d28:	2e 83       	std	Y+6, r18	; 0x06
    2d2a:	16 96       	adiw	r26, 0x06	; 6
    2d2c:	8d 91       	ld	r24, X+
    2d2e:	9c 91       	ld	r25, X
    2d30:	17 97       	sbiw	r26, 0x07	; 7
    2d32:	14 96       	adiw	r26, 0x04	; 4
    2d34:	2d 91       	ld	r18, X+
    2d36:	3c 91       	ld	r19, X
    2d38:	15 97       	sbiw	r26, 0x05	; 5
    2d3a:	ec 01       	movw	r28, r24
    2d3c:	3d 83       	std	Y+5, r19	; 0x05
    2d3e:	2c 83       	std	Y+4, r18	; 0x04
    2d40:	ea 01       	movw	r28, r20
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	a8 17       	cp	r26, r24
    2d48:	b9 07       	cpc	r27, r25
    2d4a:	31 f4       	brne	.+12     	; 0x2d58 <vTaskRemoveFromUnorderedEventList+0x66>
    2d4c:	16 96       	adiw	r26, 0x06	; 6
    2d4e:	8d 91       	ld	r24, X+
    2d50:	9c 91       	ld	r25, X
    2d52:	17 97       	sbiw	r26, 0x07	; 7
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	89 83       	std	Y+1, r24	; 0x01
    2d58:	1b 96       	adiw	r26, 0x0b	; 11
    2d5a:	1c 92       	st	X, r1
    2d5c:	1e 92       	st	-X, r1
    2d5e:	1a 97       	sbiw	r26, 0x0a	; 10
    2d60:	da 01       	movw	r26, r20
    2d62:	8c 91       	ld	r24, X
    2d64:	81 50       	subi	r24, 0x01	; 1
    2d66:	8c 93       	st	X, r24
    2d68:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d6a:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d6c:	c6 81       	ldd	r28, Z+6	; 0x06
    2d6e:	d7 81       	ldd	r29, Z+7	; 0x07
    2d70:	80 85       	ldd	r24, Z+8	; 0x08
    2d72:	91 85       	ldd	r25, Z+9	; 0x09
    2d74:	9f 83       	std	Y+7, r25	; 0x07
    2d76:	8e 83       	std	Y+6, r24	; 0x06
    2d78:	c0 85       	ldd	r28, Z+8	; 0x08
    2d7a:	d1 85       	ldd	r29, Z+9	; 0x09
    2d7c:	86 81       	ldd	r24, Z+6	; 0x06
    2d7e:	97 81       	ldd	r25, Z+7	; 0x07
    2d80:	9d 83       	std	Y+5, r25	; 0x05
    2d82:	8c 83       	std	Y+4, r24	; 0x04
    2d84:	11 96       	adiw	r26, 0x01	; 1
    2d86:	8d 91       	ld	r24, X+
    2d88:	9c 91       	ld	r25, X
    2d8a:	12 97       	sbiw	r26, 0x02	; 2
    2d8c:	9f 01       	movw	r18, r30
    2d8e:	2e 5f       	subi	r18, 0xFE	; 254
    2d90:	3f 4f       	sbci	r19, 0xFF	; 255
    2d92:	82 17       	cp	r24, r18
    2d94:	93 07       	cpc	r25, r19
    2d96:	31 f4       	brne	.+12     	; 0x2da4 <vTaskRemoveFromUnorderedEventList+0xb2>
    2d98:	80 85       	ldd	r24, Z+8	; 0x08
    2d9a:	91 85       	ldd	r25, Z+9	; 0x09
    2d9c:	12 96       	adiw	r26, 0x02	; 2
    2d9e:	9c 93       	st	X, r25
    2da0:	8e 93       	st	-X, r24
    2da2:	11 97       	sbiw	r26, 0x01	; 1
    2da4:	15 86       	std	Z+13, r1	; 0x0d
    2da6:	14 86       	std	Z+12, r1	; 0x0c
    2da8:	8c 91       	ld	r24, X
    2daa:	81 50       	subi	r24, 0x01	; 1
    2dac:	8c 93       	st	X, r24
    2dae:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2db0:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    2db4:	8a 17       	cp	r24, r26
    2db6:	10 f4       	brcc	.+4      	; 0x2dbc <vTaskRemoveFromUnorderedEventList+0xca>
    2db8:	a0 93 e0 17 	sts	0x17E0, r26	; 0x8017e0 <uxTopReadyPriority>
    2dbc:	8b e0       	ldi	r24, 0x0B	; 11
    2dbe:	8a 9f       	mul	r24, r26
    2dc0:	d0 01       	movw	r26, r0
    2dc2:	11 24       	eor	r1, r1
    2dc4:	ae 5d       	subi	r26, 0xDE	; 222
    2dc6:	b7 4e       	sbci	r27, 0xE7	; 231
    2dc8:	11 96       	adiw	r26, 0x01	; 1
    2dca:	0d 90       	ld	r0, X+
    2dcc:	bc 91       	ld	r27, X
    2dce:	a0 2d       	mov	r26, r0
    2dd0:	b7 83       	std	Z+7, r27	; 0x07
    2dd2:	a6 83       	std	Z+6, r26	; 0x06
    2dd4:	16 96       	adiw	r26, 0x06	; 6
    2dd6:	4d 91       	ld	r20, X+
    2dd8:	5c 91       	ld	r21, X
    2dda:	17 97       	sbiw	r26, 0x07	; 7
    2ddc:	51 87       	std	Z+9, r21	; 0x09
    2dde:	40 87       	std	Z+8, r20	; 0x08
    2de0:	16 96       	adiw	r26, 0x06	; 6
    2de2:	cd 91       	ld	r28, X+
    2de4:	dc 91       	ld	r29, X
    2de6:	17 97       	sbiw	r26, 0x07	; 7
    2de8:	3d 83       	std	Y+5, r19	; 0x05
    2dea:	2c 83       	std	Y+4, r18	; 0x04
    2dec:	17 96       	adiw	r26, 0x07	; 7
    2dee:	3c 93       	st	X, r19
    2df0:	2e 93       	st	-X, r18
    2df2:	16 97       	sbiw	r26, 0x06	; 6
    2df4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2df6:	8a 9f       	mul	r24, r26
    2df8:	d0 01       	movw	r26, r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	ae 5d       	subi	r26, 0xDE	; 222
    2dfe:	b7 4e       	sbci	r27, 0xE7	; 231
    2e00:	b5 87       	std	Z+13, r27	; 0x0d
    2e02:	a4 87       	std	Z+12, r26	; 0x0c
    2e04:	8c 91       	ld	r24, X
    2e06:	8f 5f       	subi	r24, 0xFF	; 255
    2e08:	8c 93       	st	X, r24
    2e0a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e0c:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    2e10:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2e14:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e16:	89 17       	cp	r24, r25
    2e18:	18 f4       	brcc	.+6      	; 0x2e20 <vTaskRemoveFromUnorderedEventList+0x12e>
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <xYieldPending>
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	08 95       	ret

00002e26 <vTaskSetTimeOutState>:
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	0f 92       	push	r0
    2e2c:	20 91 d9 17 	lds	r18, 0x17D9	; 0x8017d9 <xNumOfOverflows>
    2e30:	fc 01       	movw	r30, r24
    2e32:	20 83       	st	Z, r18
    2e34:	40 91 e1 17 	lds	r20, 0x17E1	; 0x8017e1 <xTickCount>
    2e38:	50 91 e2 17 	lds	r21, 0x17E2	; 0x8017e2 <xTickCount+0x1>
    2e3c:	60 91 e3 17 	lds	r22, 0x17E3	; 0x8017e3 <xTickCount+0x2>
    2e40:	70 91 e4 17 	lds	r23, 0x17E4	; 0x8017e4 <xTickCount+0x3>
    2e44:	41 83       	std	Z+1, r20	; 0x01
    2e46:	52 83       	std	Z+2, r21	; 0x02
    2e48:	63 83       	std	Z+3, r22	; 0x03
    2e4a:	74 83       	std	Z+4, r23	; 0x04
    2e4c:	0f 90       	pop	r0
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	08 95       	ret

00002e52 <vTaskInternalSetTimeOutState>:
    2e52:	20 91 d9 17 	lds	r18, 0x17D9	; 0x8017d9 <xNumOfOverflows>
    2e56:	fc 01       	movw	r30, r24
    2e58:	20 83       	st	Z, r18
    2e5a:	40 91 e1 17 	lds	r20, 0x17E1	; 0x8017e1 <xTickCount>
    2e5e:	50 91 e2 17 	lds	r21, 0x17E2	; 0x8017e2 <xTickCount+0x1>
    2e62:	60 91 e3 17 	lds	r22, 0x17E3	; 0x8017e3 <xTickCount+0x2>
    2e66:	70 91 e4 17 	lds	r23, 0x17E4	; 0x8017e4 <xTickCount+0x3>
    2e6a:	41 83       	std	Z+1, r20	; 0x01
    2e6c:	52 83       	std	Z+2, r21	; 0x02
    2e6e:	63 83       	std	Z+3, r22	; 0x03
    2e70:	74 83       	std	Z+4, r23	; 0x04
    2e72:	08 95       	ret

00002e74 <xTaskCheckForTimeOut>:
    2e74:	8f 92       	push	r8
    2e76:	9f 92       	push	r9
    2e78:	af 92       	push	r10
    2e7a:	bf 92       	push	r11
    2e7c:	cf 92       	push	r12
    2e7e:	df 92       	push	r13
    2e80:	ef 92       	push	r14
    2e82:	ff 92       	push	r15
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	fb 01       	movw	r30, r22
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	0f 92       	push	r0
    2e94:	c0 90 e1 17 	lds	r12, 0x17E1	; 0x8017e1 <xTickCount>
    2e98:	d0 90 e2 17 	lds	r13, 0x17E2	; 0x8017e2 <xTickCount+0x1>
    2e9c:	e0 90 e3 17 	lds	r14, 0x17E3	; 0x8017e3 <xTickCount+0x2>
    2ea0:	f0 90 e4 17 	lds	r15, 0x17E4	; 0x8017e4 <xTickCount+0x3>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	11 96       	adiw	r26, 0x01	; 1
    2ea8:	0d 91       	ld	r16, X+
    2eaa:	1d 91       	ld	r17, X+
    2eac:	2d 91       	ld	r18, X+
    2eae:	3c 91       	ld	r19, X
    2eb0:	14 97       	sbiw	r26, 0x04	; 4
    2eb2:	46 01       	movw	r8, r12
    2eb4:	57 01       	movw	r10, r14
    2eb6:	80 1a       	sub	r8, r16
    2eb8:	91 0a       	sbc	r9, r17
    2eba:	a2 0a       	sbc	r10, r18
    2ebc:	b3 0a       	sbc	r11, r19
    2ebe:	40 81       	ld	r20, Z
    2ec0:	51 81       	ldd	r21, Z+1	; 0x01
    2ec2:	62 81       	ldd	r22, Z+2	; 0x02
    2ec4:	73 81       	ldd	r23, Z+3	; 0x03
    2ec6:	4f 3f       	cpi	r20, 0xFF	; 255
    2ec8:	bf ef       	ldi	r27, 0xFF	; 255
    2eca:	5b 07       	cpc	r21, r27
    2ecc:	6b 07       	cpc	r22, r27
    2ece:	7b 07       	cpc	r23, r27
    2ed0:	39 f1       	breq	.+78     	; 0x2f20 <xTaskCheckForTimeOut+0xac>
    2ed2:	ec 01       	movw	r28, r24
    2ed4:	b8 81       	ld	r27, Y
    2ed6:	a0 91 d9 17 	lds	r26, 0x17D9	; 0x8017d9 <xNumOfOverflows>
    2eda:	ba 17       	cp	r27, r26
    2edc:	59 f0       	breq	.+22     	; 0x2ef4 <xTaskCheckForTimeOut+0x80>
    2ede:	c0 16       	cp	r12, r16
    2ee0:	d1 06       	cpc	r13, r17
    2ee2:	e2 06       	cpc	r14, r18
    2ee4:	f3 06       	cpc	r15, r19
    2ee6:	30 f0       	brcs	.+12     	; 0x2ef4 <xTaskCheckForTimeOut+0x80>
    2ee8:	10 82       	st	Z, r1
    2eea:	11 82       	std	Z+1, r1	; 0x01
    2eec:	12 82       	std	Z+2, r1	; 0x02
    2eee:	13 82       	std	Z+3, r1	; 0x03
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	17 c0       	rjmp	.+46     	; 0x2f22 <xTaskCheckForTimeOut+0xae>
    2ef4:	84 16       	cp	r8, r20
    2ef6:	95 06       	cpc	r9, r21
    2ef8:	a6 06       	cpc	r10, r22
    2efa:	b7 06       	cpc	r11, r23
    2efc:	58 f4       	brcc	.+22     	; 0x2f14 <xTaskCheckForTimeOut+0xa0>
    2efe:	48 19       	sub	r20, r8
    2f00:	59 09       	sbc	r21, r9
    2f02:	6a 09       	sbc	r22, r10
    2f04:	7b 09       	sbc	r23, r11
    2f06:	40 83       	st	Z, r20
    2f08:	51 83       	std	Z+1, r21	; 0x01
    2f0a:	62 83       	std	Z+2, r22	; 0x02
    2f0c:	73 83       	std	Z+3, r23	; 0x03
    2f0e:	a1 df       	rcall	.-190    	; 0x2e52 <vTaskInternalSetTimeOutState>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	07 c0       	rjmp	.+14     	; 0x2f22 <xTaskCheckForTimeOut+0xae>
    2f14:	10 82       	st	Z, r1
    2f16:	11 82       	std	Z+1, r1	; 0x01
    2f18:	12 82       	std	Z+2, r1	; 0x02
    2f1a:	13 82       	std	Z+3, r1	; 0x03
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <xTaskCheckForTimeOut+0xae>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	0f 90       	pop	r0
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	ff 90       	pop	r15
    2f30:	ef 90       	pop	r14
    2f32:	df 90       	pop	r13
    2f34:	cf 90       	pop	r12
    2f36:	bf 90       	pop	r11
    2f38:	af 90       	pop	r10
    2f3a:	9f 90       	pop	r9
    2f3c:	8f 90       	pop	r8
    2f3e:	08 95       	ret

00002f40 <vTaskMissedYield>:
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <xYieldPending>
    2f46:	08 95       	ret

00002f48 <xTaskGetCurrentTaskHandle>:
    2f48:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    2f4c:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2f50:	08 95       	ret

00002f52 <xTaskGetSchedulerState>:
    2f52:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <xSchedulerRunning>
    2f56:	88 23       	and	r24, r24
    2f58:	31 f0       	breq	.+12     	; 0x2f66 <xTaskGetSchedulerState+0x14>
    2f5a:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <uxSchedulerSuspended>
    2f5e:	81 11       	cpse	r24, r1
    2f60:	04 c0       	rjmp	.+8      	; 0x2f6a <xTaskGetSchedulerState+0x18>
    2f62:	82 e0       	ldi	r24, 0x02	; 2
    2f64:	08 95       	ret
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	08 95       	ret
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	08 95       	ret

00002f6e <xTaskPriorityInherit>:
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	fc 01       	movw	r30, r24
    2f78:	89 2b       	or	r24, r25
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <xTaskPriorityInherit+0x10>
    2f7c:	77 c0       	rjmp	.+238    	; 0x306c <xTaskPriorityInherit+0xfe>
    2f7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f80:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    2f84:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2f88:	5a 96       	adiw	r26, 0x1a	; 26
    2f8a:	9c 91       	ld	r25, X
    2f8c:	89 17       	cp	r24, r25
    2f8e:	08 f0       	brcs	.+2      	; 0x2f92 <xTaskPriorityInherit+0x24>
    2f90:	63 c0       	rjmp	.+198    	; 0x3058 <xTaskPriorityInherit+0xea>
    2f92:	46 85       	ldd	r20, Z+14	; 0x0e
    2f94:	57 85       	ldd	r21, Z+15	; 0x0f
    2f96:	60 89       	ldd	r22, Z+16	; 0x10
    2f98:	71 89       	ldd	r23, Z+17	; 0x11
    2f9a:	77 23       	and	r23, r23
    2f9c:	94 f0       	brlt	.+36     	; 0x2fc2 <xTaskPriorityInherit+0x54>
    2f9e:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    2fa2:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2fa6:	5a 96       	adiw	r26, 0x1a	; 26
    2fa8:	9c 91       	ld	r25, X
    2faa:	4a e0       	ldi	r20, 0x0A	; 10
    2fac:	50 e0       	ldi	r21, 0x00	; 0
    2fae:	60 e0       	ldi	r22, 0x00	; 0
    2fb0:	70 e0       	ldi	r23, 0x00	; 0
    2fb2:	49 1b       	sub	r20, r25
    2fb4:	51 09       	sbc	r21, r1
    2fb6:	61 09       	sbc	r22, r1
    2fb8:	71 09       	sbc	r23, r1
    2fba:	46 87       	std	Z+14, r20	; 0x0e
    2fbc:	57 87       	std	Z+15, r21	; 0x0f
    2fbe:	60 8b       	std	Z+16, r22	; 0x10
    2fc0:	71 8b       	std	Z+17, r23	; 0x11
    2fc2:	24 85       	ldd	r18, Z+12	; 0x0c
    2fc4:	35 85       	ldd	r19, Z+13	; 0x0d
    2fc6:	4b e0       	ldi	r20, 0x0B	; 11
    2fc8:	84 9f       	mul	r24, r20
    2fca:	c0 01       	movw	r24, r0
    2fcc:	11 24       	eor	r1, r1
    2fce:	8e 5d       	subi	r24, 0xDE	; 222
    2fd0:	97 4e       	sbci	r25, 0xE7	; 231
    2fd2:	28 17       	cp	r18, r24
    2fd4:	39 07       	cpc	r19, r25
    2fd6:	b9 f5       	brne	.+110    	; 0x3046 <xTaskPriorityInherit+0xd8>
    2fd8:	ef 01       	movw	r28, r30
    2fda:	8f 01       	movw	r16, r30
    2fdc:	0e 5f       	subi	r16, 0xFE	; 254
    2fde:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe0:	c8 01       	movw	r24, r16
    2fe2:	0e 94 7e 07 	call	0xefc	; 0xefc <uxListRemove>
    2fe6:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    2fea:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    2fee:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ff0:	ea 8f       	std	Y+26, r30	; 0x1a
    2ff2:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    2ff6:	8e 17       	cp	r24, r30
    2ff8:	10 f4       	brcc	.+4      	; 0x2ffe <xTaskPriorityInherit+0x90>
    2ffa:	e0 93 e0 17 	sts	0x17E0, r30	; 0x8017e0 <uxTopReadyPriority>
    2ffe:	8b e0       	ldi	r24, 0x0B	; 11
    3000:	8e 9f       	mul	r24, r30
    3002:	f0 01       	movw	r30, r0
    3004:	11 24       	eor	r1, r1
    3006:	ee 5d       	subi	r30, 0xDE	; 222
    3008:	f7 4e       	sbci	r31, 0xE7	; 231
    300a:	01 80       	ldd	r0, Z+1	; 0x01
    300c:	f2 81       	ldd	r31, Z+2	; 0x02
    300e:	e0 2d       	mov	r30, r0
    3010:	ff 83       	std	Y+7, r31	; 0x07
    3012:	ee 83       	std	Y+6, r30	; 0x06
    3014:	26 81       	ldd	r18, Z+6	; 0x06
    3016:	37 81       	ldd	r19, Z+7	; 0x07
    3018:	39 87       	std	Y+9, r19	; 0x09
    301a:	28 87       	std	Y+8, r18	; 0x08
    301c:	a6 81       	ldd	r26, Z+6	; 0x06
    301e:	b7 81       	ldd	r27, Z+7	; 0x07
    3020:	15 96       	adiw	r26, 0x05	; 5
    3022:	1c 93       	st	X, r17
    3024:	0e 93       	st	-X, r16
    3026:	14 97       	sbiw	r26, 0x04	; 4
    3028:	17 83       	std	Z+7, r17	; 0x07
    302a:	06 83       	std	Z+6, r16	; 0x06
    302c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    302e:	8e 9f       	mul	r24, r30
    3030:	f0 01       	movw	r30, r0
    3032:	11 24       	eor	r1, r1
    3034:	ee 5d       	subi	r30, 0xDE	; 222
    3036:	f7 4e       	sbci	r31, 0xE7	; 231
    3038:	fd 87       	std	Y+13, r31	; 0x0d
    303a:	ec 87       	std	Y+12, r30	; 0x0c
    303c:	80 81       	ld	r24, Z
    303e:	8f 5f       	subi	r24, 0xFF	; 255
    3040:	80 83       	st	Z, r24
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	16 c0       	rjmp	.+44     	; 0x3072 <xTaskPriorityInherit+0x104>
    3046:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    304a:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    304e:	5a 96       	adiw	r26, 0x1a	; 26
    3050:	8c 91       	ld	r24, X
    3052:	82 8f       	std	Z+26, r24	; 0x1a
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	0d c0       	rjmp	.+26     	; 0x3072 <xTaskPriorityInherit+0x104>
    3058:	95 a5       	ldd	r25, Z+45	; 0x2d
    305a:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    305e:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    3062:	82 8d       	ldd	r24, Z+26	; 0x1a
    3064:	98 17       	cp	r25, r24
    3066:	20 f0       	brcs	.+8      	; 0x3070 <xTaskPriorityInherit+0x102>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	03 c0       	rjmp	.+6      	; 0x3072 <xTaskPriorityInherit+0x104>
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	01 c0       	rjmp	.+2      	; 0x3072 <xTaskPriorityInherit+0x104>
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	df 91       	pop	r29
    3074:	cf 91       	pop	r28
    3076:	1f 91       	pop	r17
    3078:	0f 91       	pop	r16
    307a:	08 95       	ret

0000307c <xTaskPriorityDisinherit>:
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	fc 01       	movw	r30, r24
    3086:	89 2b       	or	r24, r25
    3088:	09 f4       	brne	.+2      	; 0x308c <xTaskPriorityDisinherit+0x10>
    308a:	49 c0       	rjmp	.+146    	; 0x311e <xTaskPriorityDisinherit+0xa2>
    308c:	86 a5       	ldd	r24, Z+46	; 0x2e
    308e:	81 50       	subi	r24, 0x01	; 1
    3090:	86 a7       	std	Z+46, r24	; 0x2e
    3092:	22 8d       	ldd	r18, Z+26	; 0x1a
    3094:	95 a5       	ldd	r25, Z+45	; 0x2d
    3096:	29 17       	cp	r18, r25
    3098:	09 f4       	brne	.+2      	; 0x309c <xTaskPriorityDisinherit+0x20>
    309a:	43 c0       	rjmp	.+134    	; 0x3122 <xTaskPriorityDisinherit+0xa6>
    309c:	81 11       	cpse	r24, r1
    309e:	43 c0       	rjmp	.+134    	; 0x3126 <xTaskPriorityDisinherit+0xaa>
    30a0:	ef 01       	movw	r28, r30
    30a2:	8f 01       	movw	r16, r30
    30a4:	0e 5f       	subi	r16, 0xFE	; 254
    30a6:	1f 4f       	sbci	r17, 0xFF	; 255
    30a8:	c8 01       	movw	r24, r16
    30aa:	0e 94 7e 07 	call	0xefc	; 0xefc <uxListRemove>
    30ae:	ed a5       	ldd	r30, Y+45	; 0x2d
    30b0:	ea 8f       	std	Y+26, r30	; 0x1a
    30b2:	8a e0       	ldi	r24, 0x0A	; 10
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	a0 e0       	ldi	r26, 0x00	; 0
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	8e 1b       	sub	r24, r30
    30bc:	91 09       	sbc	r25, r1
    30be:	a1 09       	sbc	r26, r1
    30c0:	b1 09       	sbc	r27, r1
    30c2:	8e 87       	std	Y+14, r24	; 0x0e
    30c4:	9f 87       	std	Y+15, r25	; 0x0f
    30c6:	a8 8b       	std	Y+16, r26	; 0x10
    30c8:	b9 8b       	std	Y+17, r27	; 0x11
    30ca:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    30ce:	8e 17       	cp	r24, r30
    30d0:	10 f4       	brcc	.+4      	; 0x30d6 <xTaskPriorityDisinherit+0x5a>
    30d2:	e0 93 e0 17 	sts	0x17E0, r30	; 0x8017e0 <uxTopReadyPriority>
    30d6:	8b e0       	ldi	r24, 0x0B	; 11
    30d8:	8e 9f       	mul	r24, r30
    30da:	f0 01       	movw	r30, r0
    30dc:	11 24       	eor	r1, r1
    30de:	ee 5d       	subi	r30, 0xDE	; 222
    30e0:	f7 4e       	sbci	r31, 0xE7	; 231
    30e2:	01 80       	ldd	r0, Z+1	; 0x01
    30e4:	f2 81       	ldd	r31, Z+2	; 0x02
    30e6:	e0 2d       	mov	r30, r0
    30e8:	ff 83       	std	Y+7, r31	; 0x07
    30ea:	ee 83       	std	Y+6, r30	; 0x06
    30ec:	26 81       	ldd	r18, Z+6	; 0x06
    30ee:	37 81       	ldd	r19, Z+7	; 0x07
    30f0:	39 87       	std	Y+9, r19	; 0x09
    30f2:	28 87       	std	Y+8, r18	; 0x08
    30f4:	a6 81       	ldd	r26, Z+6	; 0x06
    30f6:	b7 81       	ldd	r27, Z+7	; 0x07
    30f8:	15 96       	adiw	r26, 0x05	; 5
    30fa:	1c 93       	st	X, r17
    30fc:	0e 93       	st	-X, r16
    30fe:	14 97       	sbiw	r26, 0x04	; 4
    3100:	17 83       	std	Z+7, r17	; 0x07
    3102:	06 83       	std	Z+6, r16	; 0x06
    3104:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3106:	8e 9f       	mul	r24, r30
    3108:	f0 01       	movw	r30, r0
    310a:	11 24       	eor	r1, r1
    310c:	ee 5d       	subi	r30, 0xDE	; 222
    310e:	f7 4e       	sbci	r31, 0xE7	; 231
    3110:	fd 87       	std	Y+13, r31	; 0x0d
    3112:	ec 87       	std	Y+12, r30	; 0x0c
    3114:	80 81       	ld	r24, Z
    3116:	8f 5f       	subi	r24, 0xFF	; 255
    3118:	80 83       	st	Z, r24
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	05 c0       	rjmp	.+10     	; 0x3128 <xTaskPriorityDisinherit+0xac>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	03 c0       	rjmp	.+6      	; 0x3128 <xTaskPriorityDisinherit+0xac>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	01 c0       	rjmp	.+2      	; 0x3128 <xTaskPriorityDisinherit+0xac>
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	1f 91       	pop	r17
    312e:	0f 91       	pop	r16
    3130:	08 95       	ret

00003132 <vTaskPriorityDisinheritAfterTimeout>:
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	fc 01       	movw	r30, r24
    313c:	89 2b       	or	r24, r25
    313e:	09 f4       	brne	.+2      	; 0x3142 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3140:	5a c0       	rjmp	.+180    	; 0x31f6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3142:	85 a5       	ldd	r24, Z+45	; 0x2d
    3144:	86 17       	cp	r24, r22
    3146:	08 f4       	brcc	.+2      	; 0x314a <vTaskPriorityDisinheritAfterTimeout+0x18>
    3148:	86 2f       	mov	r24, r22
    314a:	92 8d       	ldd	r25, Z+26	; 0x1a
    314c:	89 17       	cp	r24, r25
    314e:	09 f4       	brne	.+2      	; 0x3152 <vTaskPriorityDisinheritAfterTimeout+0x20>
    3150:	52 c0       	rjmp	.+164    	; 0x31f6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3152:	26 a5       	ldd	r18, Z+46	; 0x2e
    3154:	21 30       	cpi	r18, 0x01	; 1
    3156:	09 f0       	breq	.+2      	; 0x315a <vTaskPriorityDisinheritAfterTimeout+0x28>
    3158:	4e c0       	rjmp	.+156    	; 0x31f6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    315a:	82 8f       	std	Z+26, r24	; 0x1a
    315c:	46 85       	ldd	r20, Z+14	; 0x0e
    315e:	57 85       	ldd	r21, Z+15	; 0x0f
    3160:	60 89       	ldd	r22, Z+16	; 0x10
    3162:	71 89       	ldd	r23, Z+17	; 0x11
    3164:	77 23       	and	r23, r23
    3166:	64 f0       	brlt	.+24     	; 0x3180 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3168:	4a e0       	ldi	r20, 0x0A	; 10
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	48 1b       	sub	r20, r24
    3172:	51 09       	sbc	r21, r1
    3174:	61 09       	sbc	r22, r1
    3176:	71 09       	sbc	r23, r1
    3178:	46 87       	std	Z+14, r20	; 0x0e
    317a:	57 87       	std	Z+15, r21	; 0x0f
    317c:	60 8b       	std	Z+16, r22	; 0x10
    317e:	71 8b       	std	Z+17, r23	; 0x11
    3180:	24 85       	ldd	r18, Z+12	; 0x0c
    3182:	35 85       	ldd	r19, Z+13	; 0x0d
    3184:	4b e0       	ldi	r20, 0x0B	; 11
    3186:	94 9f       	mul	r25, r20
    3188:	c0 01       	movw	r24, r0
    318a:	11 24       	eor	r1, r1
    318c:	8e 5d       	subi	r24, 0xDE	; 222
    318e:	97 4e       	sbci	r25, 0xE7	; 231
    3190:	28 17       	cp	r18, r24
    3192:	39 07       	cpc	r19, r25
    3194:	81 f5       	brne	.+96     	; 0x31f6 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3196:	ef 01       	movw	r28, r30
    3198:	8f 01       	movw	r16, r30
    319a:	0e 5f       	subi	r16, 0xFE	; 254
    319c:	1f 4f       	sbci	r17, 0xFF	; 255
    319e:	c8 01       	movw	r24, r16
    31a0:	0e 94 7e 07 	call	0xefc	; 0xefc <uxListRemove>
    31a4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    31a6:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    31aa:	8e 17       	cp	r24, r30
    31ac:	10 f4       	brcc	.+4      	; 0x31b2 <vTaskPriorityDisinheritAfterTimeout+0x80>
    31ae:	e0 93 e0 17 	sts	0x17E0, r30	; 0x8017e0 <uxTopReadyPriority>
    31b2:	8b e0       	ldi	r24, 0x0B	; 11
    31b4:	8e 9f       	mul	r24, r30
    31b6:	f0 01       	movw	r30, r0
    31b8:	11 24       	eor	r1, r1
    31ba:	ee 5d       	subi	r30, 0xDE	; 222
    31bc:	f7 4e       	sbci	r31, 0xE7	; 231
    31be:	01 80       	ldd	r0, Z+1	; 0x01
    31c0:	f2 81       	ldd	r31, Z+2	; 0x02
    31c2:	e0 2d       	mov	r30, r0
    31c4:	ff 83       	std	Y+7, r31	; 0x07
    31c6:	ee 83       	std	Y+6, r30	; 0x06
    31c8:	26 81       	ldd	r18, Z+6	; 0x06
    31ca:	37 81       	ldd	r19, Z+7	; 0x07
    31cc:	39 87       	std	Y+9, r19	; 0x09
    31ce:	28 87       	std	Y+8, r18	; 0x08
    31d0:	a6 81       	ldd	r26, Z+6	; 0x06
    31d2:	b7 81       	ldd	r27, Z+7	; 0x07
    31d4:	15 96       	adiw	r26, 0x05	; 5
    31d6:	1c 93       	st	X, r17
    31d8:	0e 93       	st	-X, r16
    31da:	14 97       	sbiw	r26, 0x04	; 4
    31dc:	17 83       	std	Z+7, r17	; 0x07
    31de:	06 83       	std	Z+6, r16	; 0x06
    31e0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    31e2:	8e 9f       	mul	r24, r30
    31e4:	f0 01       	movw	r30, r0
    31e6:	11 24       	eor	r1, r1
    31e8:	ee 5d       	subi	r30, 0xDE	; 222
    31ea:	f7 4e       	sbci	r31, 0xE7	; 231
    31ec:	fd 87       	std	Y+13, r31	; 0x0d
    31ee:	ec 87       	std	Y+12, r30	; 0x0c
    31f0:	80 81       	ld	r24, Z
    31f2:	8f 5f       	subi	r24, 0xFF	; 255
    31f4:	80 83       	st	Z, r24
    31f6:	df 91       	pop	r29
    31f8:	cf 91       	pop	r28
    31fa:	1f 91       	pop	r17
    31fc:	0f 91       	pop	r16
    31fe:	08 95       	ret

00003200 <uxTaskResetEventItemValue>:
    3200:	cf 92       	push	r12
    3202:	df 92       	push	r13
    3204:	ef 92       	push	r14
    3206:	ff 92       	push	r15
    3208:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    320c:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    3210:	66 85       	ldd	r22, Z+14	; 0x0e
    3212:	77 85       	ldd	r23, Z+15	; 0x0f
    3214:	80 89       	ldd	r24, Z+16	; 0x10
    3216:	91 89       	ldd	r25, Z+17	; 0x11
    3218:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    321c:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    3220:	a0 91 90 18 	lds	r26, 0x1890	; 0x801890 <pxCurrentTCB>
    3224:	b0 91 91 18 	lds	r27, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    3228:	5a 96       	adiw	r26, 0x1a	; 26
    322a:	2c 91       	ld	r18, X
    322c:	0f 2e       	mov	r0, r31
    322e:	fa e0       	ldi	r31, 0x0A	; 10
    3230:	cf 2e       	mov	r12, r31
    3232:	d1 2c       	mov	r13, r1
    3234:	e1 2c       	mov	r14, r1
    3236:	f1 2c       	mov	r15, r1
    3238:	f0 2d       	mov	r31, r0
    323a:	c2 1a       	sub	r12, r18
    323c:	d1 08       	sbc	r13, r1
    323e:	e1 08       	sbc	r14, r1
    3240:	f1 08       	sbc	r15, r1
    3242:	c6 86       	std	Z+14, r12	; 0x0e
    3244:	d7 86       	std	Z+15, r13	; 0x0f
    3246:	e0 8a       	std	Z+16, r14	; 0x10
    3248:	f1 8a       	std	Z+17, r15	; 0x11
    324a:	ff 90       	pop	r15
    324c:	ef 90       	pop	r14
    324e:	df 90       	pop	r13
    3250:	cf 90       	pop	r12
    3252:	08 95       	ret

00003254 <pvTaskIncrementMutexHeldCount>:
    3254:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    3258:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    325c:	89 2b       	or	r24, r25
    325e:	39 f0       	breq	.+14     	; 0x326e <pvTaskIncrementMutexHeldCount+0x1a>
    3260:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    3264:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    3268:	86 a5       	ldd	r24, Z+46	; 0x2e
    326a:	8f 5f       	subi	r24, 0xFF	; 255
    326c:	86 a7       	std	Z+46, r24	; 0x2e
    326e:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    3272:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    3276:	08 95       	ret

00003278 <xTaskGenericNotifyWait>:
    3278:	4f 92       	push	r4
    327a:	5f 92       	push	r5
    327c:	6f 92       	push	r6
    327e:	7f 92       	push	r7
    3280:	af 92       	push	r10
    3282:	bf 92       	push	r11
    3284:	cf 92       	push	r12
    3286:	df 92       	push	r13
    3288:	ef 92       	push	r14
    328a:	ff 92       	push	r15
    328c:	0f 93       	push	r16
    328e:	1f 93       	push	r17
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	28 01       	movw	r4, r16
    3296:	39 01       	movw	r6, r18
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	0f 92       	push	r0
    329e:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    32a2:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    32a6:	c8 2f       	mov	r28, r24
    32a8:	d0 e0       	ldi	r29, 0x00	; 0
    32aa:	ec 0f       	add	r30, r28
    32ac:	fd 1f       	adc	r31, r29
    32ae:	83 a9       	ldd	r24, Z+51	; 0x33
    32b0:	82 30       	cpi	r24, 0x02	; 2
    32b2:	79 f1       	breq	.+94     	; 0x3312 <xTaskGenericNotifyWait+0x9a>
    32b4:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    32b8:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    32bc:	ce 01       	movw	r24, r28
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	e8 0f       	add	r30, r24
    32c8:	f9 1f       	adc	r31, r25
    32ca:	87 a5       	ldd	r24, Z+47	; 0x2f
    32cc:	90 a9       	ldd	r25, Z+48	; 0x30
    32ce:	a1 a9       	ldd	r26, Z+49	; 0x31
    32d0:	b2 a9       	ldd	r27, Z+50	; 0x32
    32d2:	40 95       	com	r20
    32d4:	50 95       	com	r21
    32d6:	60 95       	com	r22
    32d8:	70 95       	com	r23
    32da:	48 23       	and	r20, r24
    32dc:	59 23       	and	r21, r25
    32de:	6a 23       	and	r22, r26
    32e0:	7b 23       	and	r23, r27
    32e2:	47 a7       	std	Z+47, r20	; 0x2f
    32e4:	50 ab       	std	Z+48, r21	; 0x30
    32e6:	61 ab       	std	Z+49, r22	; 0x31
    32e8:	72 ab       	std	Z+50, r23	; 0x32
    32ea:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    32ee:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    32f2:	ec 0f       	add	r30, r28
    32f4:	fd 1f       	adc	r31, r29
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	83 ab       	std	Z+51, r24	; 0x33
    32fa:	a1 14       	cp	r10, r1
    32fc:	b1 04       	cpc	r11, r1
    32fe:	c1 04       	cpc	r12, r1
    3300:	d1 04       	cpc	r13, r1
    3302:	39 f0       	breq	.+14     	; 0x3312 <xTaskGenericNotifyWait+0x9a>
    3304:	41 e0       	ldi	r20, 0x01	; 1
    3306:	c6 01       	movw	r24, r12
    3308:	b5 01       	movw	r22, r10
    330a:	0e 94 00 11 	call	0x2200	; 0x2200 <prvAddCurrentTaskToDelayedList>
    330e:	0e 94 fa 07 	call	0xff4	; 0xff4 <vPortYield>
    3312:	0f 90       	pop	r0
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	0f 92       	push	r0
    331c:	e1 14       	cp	r14, r1
    331e:	f1 04       	cpc	r15, r1
    3320:	a1 f0       	breq	.+40     	; 0x334a <xTaskGenericNotifyWait+0xd2>
    3322:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    3326:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    332a:	ce 01       	movw	r24, r28
    332c:	88 0f       	add	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	e8 0f       	add	r30, r24
    3336:	f9 1f       	adc	r31, r25
    3338:	87 a5       	ldd	r24, Z+47	; 0x2f
    333a:	90 a9       	ldd	r25, Z+48	; 0x30
    333c:	a1 a9       	ldd	r26, Z+49	; 0x31
    333e:	b2 a9       	ldd	r27, Z+50	; 0x32
    3340:	f7 01       	movw	r30, r14
    3342:	80 83       	st	Z, r24
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	a2 83       	std	Z+2, r26	; 0x02
    3348:	b3 83       	std	Z+3, r27	; 0x03
    334a:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    334e:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    3352:	ec 0f       	add	r30, r28
    3354:	fd 1f       	adc	r31, r29
    3356:	83 a9       	ldd	r24, Z+51	; 0x33
    3358:	82 30       	cpi	r24, 0x02	; 2
    335a:	e9 f4       	brne	.+58     	; 0x3396 <xTaskGenericNotifyWait+0x11e>
    335c:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    3360:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    3364:	ce 01       	movw	r24, r28
    3366:	88 0f       	add	r24, r24
    3368:	99 1f       	adc	r25, r25
    336a:	88 0f       	add	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	e8 0f       	add	r30, r24
    3370:	f9 1f       	adc	r31, r25
    3372:	87 a5       	ldd	r24, Z+47	; 0x2f
    3374:	90 a9       	ldd	r25, Z+48	; 0x30
    3376:	a1 a9       	ldd	r26, Z+49	; 0x31
    3378:	b2 a9       	ldd	r27, Z+50	; 0x32
    337a:	40 94       	com	r4
    337c:	50 94       	com	r5
    337e:	60 94       	com	r6
    3380:	70 94       	com	r7
    3382:	48 22       	and	r4, r24
    3384:	59 22       	and	r5, r25
    3386:	6a 22       	and	r6, r26
    3388:	7b 22       	and	r7, r27
    338a:	47 a6       	std	Z+47, r4	; 0x2f
    338c:	50 aa       	std	Z+48, r5	; 0x30
    338e:	61 aa       	std	Z+49, r6	; 0x31
    3390:	72 aa       	std	Z+50, r7	; 0x32
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	01 c0       	rjmp	.+2      	; 0x3398 <xTaskGenericNotifyWait+0x120>
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	20 91 90 18 	lds	r18, 0x1890	; 0x801890 <pxCurrentTCB>
    339c:	30 91 91 18 	lds	r19, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    33a0:	c2 0f       	add	r28, r18
    33a2:	d3 1f       	adc	r29, r19
    33a4:	1b aa       	std	Y+51, r1	; 0x33
    33a6:	0f 90       	pop	r0
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	df 90       	pop	r13
    33b8:	cf 90       	pop	r12
    33ba:	bf 90       	pop	r11
    33bc:	af 90       	pop	r10
    33be:	7f 90       	pop	r7
    33c0:	6f 90       	pop	r6
    33c2:	5f 90       	pop	r5
    33c4:	4f 90       	pop	r4
    33c6:	08 95       	ret

000033c8 <xTaskGenericNotify>:
    33c8:	8f 92       	push	r8
    33ca:	9f 92       	push	r9
    33cc:	af 92       	push	r10
    33ce:	bf 92       	push	r11
    33d0:	ef 92       	push	r14
    33d2:	ff 92       	push	r15
    33d4:	0f 93       	push	r16
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	dc 01       	movw	r26, r24
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	0f 92       	push	r0
    33e2:	e1 14       	cp	r14, r1
    33e4:	f1 04       	cpc	r15, r1
    33e6:	89 f0       	breq	.+34     	; 0x340a <xTaskGenericNotify+0x42>
    33e8:	e6 2f       	mov	r30, r22
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	ee 0f       	add	r30, r30
    33ee:	ff 1f       	adc	r31, r31
    33f0:	ee 0f       	add	r30, r30
    33f2:	ff 1f       	adc	r31, r31
    33f4:	e8 0f       	add	r30, r24
    33f6:	f9 1f       	adc	r31, r25
    33f8:	87 a4       	ldd	r8, Z+47	; 0x2f
    33fa:	90 a8       	ldd	r9, Z+48	; 0x30
    33fc:	a1 a8       	ldd	r10, Z+49	; 0x31
    33fe:	b2 a8       	ldd	r11, Z+50	; 0x32
    3400:	f7 01       	movw	r30, r14
    3402:	80 82       	st	Z, r8
    3404:	91 82       	std	Z+1, r9	; 0x01
    3406:	a2 82       	std	Z+2, r10	; 0x02
    3408:	b3 82       	std	Z+3, r11	; 0x03
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	fd 01       	movw	r30, r26
    340e:	e6 0f       	add	r30, r22
    3410:	f7 1f       	adc	r31, r23
    3412:	83 a9       	ldd	r24, Z+51	; 0x33
    3414:	92 e0       	ldi	r25, 0x02	; 2
    3416:	93 ab       	std	Z+51, r25	; 0x33
    3418:	02 30       	cpi	r16, 0x02	; 2
    341a:	01 f1       	breq	.+64     	; 0x345c <xTaskGenericNotify+0x94>
    341c:	18 f4       	brcc	.+6      	; 0x3424 <xTaskGenericNotify+0x5c>
    341e:	01 30       	cpi	r16, 0x01	; 1
    3420:	31 f0       	breq	.+12     	; 0x342e <xTaskGenericNotify+0x66>
    3422:	4d c0       	rjmp	.+154    	; 0x34be <xTaskGenericNotify+0xf6>
    3424:	03 30       	cpi	r16, 0x03	; 3
    3426:	79 f1       	breq	.+94     	; 0x3486 <xTaskGenericNotify+0xbe>
    3428:	04 30       	cpi	r16, 0x04	; 4
    342a:	d1 f1       	breq	.+116    	; 0x34a0 <xTaskGenericNotify+0xd8>
    342c:	48 c0       	rjmp	.+144    	; 0x34be <xTaskGenericNotify+0xf6>
    342e:	66 0f       	add	r22, r22
    3430:	77 1f       	adc	r23, r23
    3432:	66 0f       	add	r22, r22
    3434:	77 1f       	adc	r23, r23
    3436:	fd 01       	movw	r30, r26
    3438:	e6 0f       	add	r30, r22
    343a:	f7 1f       	adc	r31, r23
    343c:	87 a4       	ldd	r8, Z+47	; 0x2f
    343e:	90 a8       	ldd	r9, Z+48	; 0x30
    3440:	a1 a8       	ldd	r10, Z+49	; 0x31
    3442:	b2 a8       	ldd	r11, Z+50	; 0x32
    3444:	ba 01       	movw	r22, r20
    3446:	a9 01       	movw	r20, r18
    3448:	48 29       	or	r20, r8
    344a:	59 29       	or	r21, r9
    344c:	6a 29       	or	r22, r10
    344e:	7b 29       	or	r23, r11
    3450:	47 a7       	std	Z+47, r20	; 0x2f
    3452:	50 ab       	std	Z+48, r21	; 0x30
    3454:	61 ab       	std	Z+49, r22	; 0x31
    3456:	72 ab       	std	Z+50, r23	; 0x32
    3458:	01 e0       	ldi	r16, 0x01	; 1
    345a:	34 c0       	rjmp	.+104    	; 0x34c4 <xTaskGenericNotify+0xfc>
    345c:	66 0f       	add	r22, r22
    345e:	77 1f       	adc	r23, r23
    3460:	66 0f       	add	r22, r22
    3462:	77 1f       	adc	r23, r23
    3464:	fd 01       	movw	r30, r26
    3466:	e6 0f       	add	r30, r22
    3468:	f7 1f       	adc	r31, r23
    346a:	47 a5       	ldd	r20, Z+47	; 0x2f
    346c:	50 a9       	ldd	r21, Z+48	; 0x30
    346e:	61 a9       	ldd	r22, Z+49	; 0x31
    3470:	72 a9       	ldd	r23, Z+50	; 0x32
    3472:	4f 5f       	subi	r20, 0xFF	; 255
    3474:	5f 4f       	sbci	r21, 0xFF	; 255
    3476:	6f 4f       	sbci	r22, 0xFF	; 255
    3478:	7f 4f       	sbci	r23, 0xFF	; 255
    347a:	47 a7       	std	Z+47, r20	; 0x2f
    347c:	50 ab       	std	Z+48, r21	; 0x30
    347e:	61 ab       	std	Z+49, r22	; 0x31
    3480:	72 ab       	std	Z+50, r23	; 0x32
    3482:	01 e0       	ldi	r16, 0x01	; 1
    3484:	1f c0       	rjmp	.+62     	; 0x34c4 <xTaskGenericNotify+0xfc>
    3486:	66 0f       	add	r22, r22
    3488:	77 1f       	adc	r23, r23
    348a:	66 0f       	add	r22, r22
    348c:	77 1f       	adc	r23, r23
    348e:	fd 01       	movw	r30, r26
    3490:	e6 0f       	add	r30, r22
    3492:	f7 1f       	adc	r31, r23
    3494:	27 a7       	std	Z+47, r18	; 0x2f
    3496:	30 ab       	std	Z+48, r19	; 0x30
    3498:	41 ab       	std	Z+49, r20	; 0x31
    349a:	52 ab       	std	Z+50, r21	; 0x32
    349c:	01 e0       	ldi	r16, 0x01	; 1
    349e:	12 c0       	rjmp	.+36     	; 0x34c4 <xTaskGenericNotify+0xfc>
    34a0:	82 30       	cpi	r24, 0x02	; 2
    34a2:	79 f0       	breq	.+30     	; 0x34c2 <xTaskGenericNotify+0xfa>
    34a4:	66 0f       	add	r22, r22
    34a6:	77 1f       	adc	r23, r23
    34a8:	66 0f       	add	r22, r22
    34aa:	77 1f       	adc	r23, r23
    34ac:	fd 01       	movw	r30, r26
    34ae:	e6 0f       	add	r30, r22
    34b0:	f7 1f       	adc	r31, r23
    34b2:	27 a7       	std	Z+47, r18	; 0x2f
    34b4:	30 ab       	std	Z+48, r19	; 0x30
    34b6:	41 ab       	std	Z+49, r20	; 0x31
    34b8:	52 ab       	std	Z+50, r21	; 0x32
    34ba:	01 e0       	ldi	r16, 0x01	; 1
    34bc:	03 c0       	rjmp	.+6      	; 0x34c4 <xTaskGenericNotify+0xfc>
    34be:	01 e0       	ldi	r16, 0x01	; 1
    34c0:	01 c0       	rjmp	.+2      	; 0x34c4 <xTaskGenericNotify+0xfc>
    34c2:	00 e0       	ldi	r16, 0x00	; 0
    34c4:	81 30       	cpi	r24, 0x01	; 1
    34c6:	09 f0       	breq	.+2      	; 0x34ca <xTaskGenericNotify+0x102>
    34c8:	69 c0       	rjmp	.+210    	; 0x359c <xTaskGenericNotify+0x1d4>
    34ca:	1c 96       	adiw	r26, 0x0c	; 12
    34cc:	ed 91       	ld	r30, X+
    34ce:	fc 91       	ld	r31, X
    34d0:	1d 97       	sbiw	r26, 0x0d	; 13
    34d2:	16 96       	adiw	r26, 0x06	; 6
    34d4:	cd 91       	ld	r28, X+
    34d6:	dc 91       	ld	r29, X
    34d8:	17 97       	sbiw	r26, 0x07	; 7
    34da:	18 96       	adiw	r26, 0x08	; 8
    34dc:	8d 91       	ld	r24, X+
    34de:	9c 91       	ld	r25, X
    34e0:	19 97       	sbiw	r26, 0x09	; 9
    34e2:	9f 83       	std	Y+7, r25	; 0x07
    34e4:	8e 83       	std	Y+6, r24	; 0x06
    34e6:	18 96       	adiw	r26, 0x08	; 8
    34e8:	cd 91       	ld	r28, X+
    34ea:	dc 91       	ld	r29, X
    34ec:	19 97       	sbiw	r26, 0x09	; 9
    34ee:	16 96       	adiw	r26, 0x06	; 6
    34f0:	8d 91       	ld	r24, X+
    34f2:	9c 91       	ld	r25, X
    34f4:	17 97       	sbiw	r26, 0x07	; 7
    34f6:	9d 83       	std	Y+5, r25	; 0x05
    34f8:	8c 83       	std	Y+4, r24	; 0x04
    34fa:	81 81       	ldd	r24, Z+1	; 0x01
    34fc:	92 81       	ldd	r25, Z+2	; 0x02
    34fe:	9d 01       	movw	r18, r26
    3500:	2e 5f       	subi	r18, 0xFE	; 254
    3502:	3f 4f       	sbci	r19, 0xFF	; 255
    3504:	82 17       	cp	r24, r18
    3506:	93 07       	cpc	r25, r19
    3508:	31 f4       	brne	.+12     	; 0x3516 <xTaskGenericNotify+0x14e>
    350a:	18 96       	adiw	r26, 0x08	; 8
    350c:	8d 91       	ld	r24, X+
    350e:	9c 91       	ld	r25, X
    3510:	19 97       	sbiw	r26, 0x09	; 9
    3512:	92 83       	std	Z+2, r25	; 0x02
    3514:	81 83       	std	Z+1, r24	; 0x01
    3516:	1d 96       	adiw	r26, 0x0d	; 13
    3518:	1c 92       	st	X, r1
    351a:	1e 92       	st	-X, r1
    351c:	1c 97       	sbiw	r26, 0x0c	; 12
    351e:	80 81       	ld	r24, Z
    3520:	81 50       	subi	r24, 0x01	; 1
    3522:	80 83       	st	Z, r24
    3524:	5a 96       	adiw	r26, 0x1a	; 26
    3526:	ec 91       	ld	r30, X
    3528:	5a 97       	sbiw	r26, 0x1a	; 26
    352a:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    352e:	8e 17       	cp	r24, r30
    3530:	10 f4       	brcc	.+4      	; 0x3536 <xTaskGenericNotify+0x16e>
    3532:	e0 93 e0 17 	sts	0x17E0, r30	; 0x8017e0 <uxTopReadyPriority>
    3536:	8b e0       	ldi	r24, 0x0B	; 11
    3538:	8e 9f       	mul	r24, r30
    353a:	f0 01       	movw	r30, r0
    353c:	11 24       	eor	r1, r1
    353e:	ee 5d       	subi	r30, 0xDE	; 222
    3540:	f7 4e       	sbci	r31, 0xE7	; 231
    3542:	01 80       	ldd	r0, Z+1	; 0x01
    3544:	f2 81       	ldd	r31, Z+2	; 0x02
    3546:	e0 2d       	mov	r30, r0
    3548:	17 96       	adiw	r26, 0x07	; 7
    354a:	fc 93       	st	X, r31
    354c:	ee 93       	st	-X, r30
    354e:	16 97       	sbiw	r26, 0x06	; 6
    3550:	46 81       	ldd	r20, Z+6	; 0x06
    3552:	57 81       	ldd	r21, Z+7	; 0x07
    3554:	19 96       	adiw	r26, 0x09	; 9
    3556:	5c 93       	st	X, r21
    3558:	4e 93       	st	-X, r20
    355a:	18 97       	sbiw	r26, 0x08	; 8
    355c:	c6 81       	ldd	r28, Z+6	; 0x06
    355e:	d7 81       	ldd	r29, Z+7	; 0x07
    3560:	3d 83       	std	Y+5, r19	; 0x05
    3562:	2c 83       	std	Y+4, r18	; 0x04
    3564:	37 83       	std	Z+7, r19	; 0x07
    3566:	26 83       	std	Z+6, r18	; 0x06
    3568:	5a 96       	adiw	r26, 0x1a	; 26
    356a:	ec 91       	ld	r30, X
    356c:	5a 97       	sbiw	r26, 0x1a	; 26
    356e:	8e 9f       	mul	r24, r30
    3570:	f0 01       	movw	r30, r0
    3572:	11 24       	eor	r1, r1
    3574:	ee 5d       	subi	r30, 0xDE	; 222
    3576:	f7 4e       	sbci	r31, 0xE7	; 231
    3578:	1d 96       	adiw	r26, 0x0d	; 13
    357a:	fc 93       	st	X, r31
    357c:	ee 93       	st	-X, r30
    357e:	1c 97       	sbiw	r26, 0x0c	; 12
    3580:	80 81       	ld	r24, Z
    3582:	8f 5f       	subi	r24, 0xFF	; 255
    3584:	80 83       	st	Z, r24
    3586:	5a 96       	adiw	r26, 0x1a	; 26
    3588:	9c 91       	ld	r25, X
    358a:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    358e:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    3592:	82 8d       	ldd	r24, Z+26	; 0x1a
    3594:	89 17       	cp	r24, r25
    3596:	10 f4       	brcc	.+4      	; 0x359c <xTaskGenericNotify+0x1d4>
    3598:	0e 94 fa 07 	call	0xff4	; 0xff4 <vPortYield>
    359c:	0f 90       	pop	r0
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	80 2f       	mov	r24, r16
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	0f 91       	pop	r16
    35a8:	ff 90       	pop	r15
    35aa:	ef 90       	pop	r14
    35ac:	bf 90       	pop	r11
    35ae:	af 90       	pop	r10
    35b0:	9f 90       	pop	r9
    35b2:	8f 90       	pop	r8
    35b4:	08 95       	ret

000035b6 <xTaskGenericNotifyFromISR>:
    35b6:	8f 92       	push	r8
    35b8:	9f 92       	push	r9
    35ba:	af 92       	push	r10
    35bc:	bf 92       	push	r11
    35be:	cf 92       	push	r12
    35c0:	df 92       	push	r13
    35c2:	ef 92       	push	r14
    35c4:	ff 92       	push	r15
    35c6:	0f 93       	push	r16
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	dc 01       	movw	r26, r24
    35ce:	e1 14       	cp	r14, r1
    35d0:	f1 04       	cpc	r15, r1
    35d2:	89 f0       	breq	.+34     	; 0x35f6 <xTaskGenericNotifyFromISR+0x40>
    35d4:	e6 2f       	mov	r30, r22
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	ee 0f       	add	r30, r30
    35da:	ff 1f       	adc	r31, r31
    35dc:	ee 0f       	add	r30, r30
    35de:	ff 1f       	adc	r31, r31
    35e0:	e8 0f       	add	r30, r24
    35e2:	f9 1f       	adc	r31, r25
    35e4:	87 a4       	ldd	r8, Z+47	; 0x2f
    35e6:	90 a8       	ldd	r9, Z+48	; 0x30
    35e8:	a1 a8       	ldd	r10, Z+49	; 0x31
    35ea:	b2 a8       	ldd	r11, Z+50	; 0x32
    35ec:	f7 01       	movw	r30, r14
    35ee:	80 82       	st	Z, r8
    35f0:	91 82       	std	Z+1, r9	; 0x01
    35f2:	a2 82       	std	Z+2, r10	; 0x02
    35f4:	b3 82       	std	Z+3, r11	; 0x03
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	fd 01       	movw	r30, r26
    35fa:	e6 0f       	add	r30, r22
    35fc:	f7 1f       	adc	r31, r23
    35fe:	93 a9       	ldd	r25, Z+51	; 0x33
    3600:	82 e0       	ldi	r24, 0x02	; 2
    3602:	83 ab       	std	Z+51, r24	; 0x33
    3604:	02 30       	cpi	r16, 0x02	; 2
    3606:	01 f1       	breq	.+64     	; 0x3648 <xTaskGenericNotifyFromISR+0x92>
    3608:	18 f4       	brcc	.+6      	; 0x3610 <xTaskGenericNotifyFromISR+0x5a>
    360a:	01 30       	cpi	r16, 0x01	; 1
    360c:	31 f0       	breq	.+12     	; 0x361a <xTaskGenericNotifyFromISR+0x64>
    360e:	4d c0       	rjmp	.+154    	; 0x36aa <xTaskGenericNotifyFromISR+0xf4>
    3610:	03 30       	cpi	r16, 0x03	; 3
    3612:	79 f1       	breq	.+94     	; 0x3672 <xTaskGenericNotifyFromISR+0xbc>
    3614:	04 30       	cpi	r16, 0x04	; 4
    3616:	d1 f1       	breq	.+116    	; 0x368c <xTaskGenericNotifyFromISR+0xd6>
    3618:	48 c0       	rjmp	.+144    	; 0x36aa <xTaskGenericNotifyFromISR+0xf4>
    361a:	66 0f       	add	r22, r22
    361c:	77 1f       	adc	r23, r23
    361e:	66 0f       	add	r22, r22
    3620:	77 1f       	adc	r23, r23
    3622:	fd 01       	movw	r30, r26
    3624:	e6 0f       	add	r30, r22
    3626:	f7 1f       	adc	r31, r23
    3628:	87 a4       	ldd	r8, Z+47	; 0x2f
    362a:	90 a8       	ldd	r9, Z+48	; 0x30
    362c:	a1 a8       	ldd	r10, Z+49	; 0x31
    362e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3630:	ba 01       	movw	r22, r20
    3632:	a9 01       	movw	r20, r18
    3634:	48 29       	or	r20, r8
    3636:	59 29       	or	r21, r9
    3638:	6a 29       	or	r22, r10
    363a:	7b 29       	or	r23, r11
    363c:	47 a7       	std	Z+47, r20	; 0x2f
    363e:	50 ab       	std	Z+48, r21	; 0x30
    3640:	61 ab       	std	Z+49, r22	; 0x31
    3642:	72 ab       	std	Z+50, r23	; 0x32
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	34 c0       	rjmp	.+104    	; 0x36b0 <xTaskGenericNotifyFromISR+0xfa>
    3648:	66 0f       	add	r22, r22
    364a:	77 1f       	adc	r23, r23
    364c:	66 0f       	add	r22, r22
    364e:	77 1f       	adc	r23, r23
    3650:	fd 01       	movw	r30, r26
    3652:	e6 0f       	add	r30, r22
    3654:	f7 1f       	adc	r31, r23
    3656:	47 a5       	ldd	r20, Z+47	; 0x2f
    3658:	50 a9       	ldd	r21, Z+48	; 0x30
    365a:	61 a9       	ldd	r22, Z+49	; 0x31
    365c:	72 a9       	ldd	r23, Z+50	; 0x32
    365e:	4f 5f       	subi	r20, 0xFF	; 255
    3660:	5f 4f       	sbci	r21, 0xFF	; 255
    3662:	6f 4f       	sbci	r22, 0xFF	; 255
    3664:	7f 4f       	sbci	r23, 0xFF	; 255
    3666:	47 a7       	std	Z+47, r20	; 0x2f
    3668:	50 ab       	std	Z+48, r21	; 0x30
    366a:	61 ab       	std	Z+49, r22	; 0x31
    366c:	72 ab       	std	Z+50, r23	; 0x32
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	1f c0       	rjmp	.+62     	; 0x36b0 <xTaskGenericNotifyFromISR+0xfa>
    3672:	66 0f       	add	r22, r22
    3674:	77 1f       	adc	r23, r23
    3676:	66 0f       	add	r22, r22
    3678:	77 1f       	adc	r23, r23
    367a:	fd 01       	movw	r30, r26
    367c:	e6 0f       	add	r30, r22
    367e:	f7 1f       	adc	r31, r23
    3680:	27 a7       	std	Z+47, r18	; 0x2f
    3682:	30 ab       	std	Z+48, r19	; 0x30
    3684:	41 ab       	std	Z+49, r20	; 0x31
    3686:	52 ab       	std	Z+50, r21	; 0x32
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	12 c0       	rjmp	.+36     	; 0x36b0 <xTaskGenericNotifyFromISR+0xfa>
    368c:	92 30       	cpi	r25, 0x02	; 2
    368e:	79 f0       	breq	.+30     	; 0x36ae <xTaskGenericNotifyFromISR+0xf8>
    3690:	66 0f       	add	r22, r22
    3692:	77 1f       	adc	r23, r23
    3694:	66 0f       	add	r22, r22
    3696:	77 1f       	adc	r23, r23
    3698:	fd 01       	movw	r30, r26
    369a:	e6 0f       	add	r30, r22
    369c:	f7 1f       	adc	r31, r23
    369e:	27 a7       	std	Z+47, r18	; 0x2f
    36a0:	30 ab       	std	Z+48, r19	; 0x30
    36a2:	41 ab       	std	Z+49, r20	; 0x31
    36a4:	52 ab       	std	Z+50, r21	; 0x32
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	03 c0       	rjmp	.+6      	; 0x36b0 <xTaskGenericNotifyFromISR+0xfa>
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	01 c0       	rjmp	.+2      	; 0x36b0 <xTaskGenericNotifyFromISR+0xfa>
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	91 30       	cpi	r25, 0x01	; 1
    36b2:	09 f0       	breq	.+2      	; 0x36b6 <xTaskGenericNotifyFromISR+0x100>
    36b4:	96 c0       	rjmp	.+300    	; 0x37e2 <xTaskGenericNotifyFromISR+0x22c>
    36b6:	90 91 d1 17 	lds	r25, 0x17D1	; 0x8017d1 <uxSchedulerSuspended>
    36ba:	91 11       	cpse	r25, r1
    36bc:	5f c0       	rjmp	.+190    	; 0x377c <xTaskGenericNotifyFromISR+0x1c6>
    36be:	1c 96       	adiw	r26, 0x0c	; 12
    36c0:	ed 91       	ld	r30, X+
    36c2:	fc 91       	ld	r31, X
    36c4:	1d 97       	sbiw	r26, 0x0d	; 13
    36c6:	16 96       	adiw	r26, 0x06	; 6
    36c8:	cd 91       	ld	r28, X+
    36ca:	dc 91       	ld	r29, X
    36cc:	17 97       	sbiw	r26, 0x07	; 7
    36ce:	18 96       	adiw	r26, 0x08	; 8
    36d0:	2d 91       	ld	r18, X+
    36d2:	3c 91       	ld	r19, X
    36d4:	19 97       	sbiw	r26, 0x09	; 9
    36d6:	3f 83       	std	Y+7, r19	; 0x07
    36d8:	2e 83       	std	Y+6, r18	; 0x06
    36da:	18 96       	adiw	r26, 0x08	; 8
    36dc:	cd 91       	ld	r28, X+
    36de:	dc 91       	ld	r29, X
    36e0:	19 97       	sbiw	r26, 0x09	; 9
    36e2:	16 96       	adiw	r26, 0x06	; 6
    36e4:	2d 91       	ld	r18, X+
    36e6:	3c 91       	ld	r19, X
    36e8:	17 97       	sbiw	r26, 0x07	; 7
    36ea:	3d 83       	std	Y+5, r19	; 0x05
    36ec:	2c 83       	std	Y+4, r18	; 0x04
    36ee:	41 81       	ldd	r20, Z+1	; 0x01
    36f0:	52 81       	ldd	r21, Z+2	; 0x02
    36f2:	9d 01       	movw	r18, r26
    36f4:	2e 5f       	subi	r18, 0xFE	; 254
    36f6:	3f 4f       	sbci	r19, 0xFF	; 255
    36f8:	42 17       	cp	r20, r18
    36fa:	53 07       	cpc	r21, r19
    36fc:	31 f4       	brne	.+12     	; 0x370a <xTaskGenericNotifyFromISR+0x154>
    36fe:	18 96       	adiw	r26, 0x08	; 8
    3700:	4d 91       	ld	r20, X+
    3702:	5c 91       	ld	r21, X
    3704:	19 97       	sbiw	r26, 0x09	; 9
    3706:	52 83       	std	Z+2, r21	; 0x02
    3708:	41 83       	std	Z+1, r20	; 0x01
    370a:	1d 96       	adiw	r26, 0x0d	; 13
    370c:	1c 92       	st	X, r1
    370e:	1e 92       	st	-X, r1
    3710:	1c 97       	sbiw	r26, 0x0c	; 12
    3712:	90 81       	ld	r25, Z
    3714:	91 50       	subi	r25, 0x01	; 1
    3716:	90 83       	st	Z, r25
    3718:	5a 96       	adiw	r26, 0x1a	; 26
    371a:	ec 91       	ld	r30, X
    371c:	5a 97       	sbiw	r26, 0x1a	; 26
    371e:	90 91 e0 17 	lds	r25, 0x17E0	; 0x8017e0 <uxTopReadyPriority>
    3722:	9e 17       	cp	r25, r30
    3724:	10 f4       	brcc	.+4      	; 0x372a <xTaskGenericNotifyFromISR+0x174>
    3726:	e0 93 e0 17 	sts	0x17E0, r30	; 0x8017e0 <uxTopReadyPriority>
    372a:	9b e0       	ldi	r25, 0x0B	; 11
    372c:	9e 9f       	mul	r25, r30
    372e:	f0 01       	movw	r30, r0
    3730:	11 24       	eor	r1, r1
    3732:	ee 5d       	subi	r30, 0xDE	; 222
    3734:	f7 4e       	sbci	r31, 0xE7	; 231
    3736:	01 80       	ldd	r0, Z+1	; 0x01
    3738:	f2 81       	ldd	r31, Z+2	; 0x02
    373a:	e0 2d       	mov	r30, r0
    373c:	17 96       	adiw	r26, 0x07	; 7
    373e:	fc 93       	st	X, r31
    3740:	ee 93       	st	-X, r30
    3742:	16 97       	sbiw	r26, 0x06	; 6
    3744:	46 81       	ldd	r20, Z+6	; 0x06
    3746:	57 81       	ldd	r21, Z+7	; 0x07
    3748:	19 96       	adiw	r26, 0x09	; 9
    374a:	5c 93       	st	X, r21
    374c:	4e 93       	st	-X, r20
    374e:	18 97       	sbiw	r26, 0x08	; 8
    3750:	c6 81       	ldd	r28, Z+6	; 0x06
    3752:	d7 81       	ldd	r29, Z+7	; 0x07
    3754:	3d 83       	std	Y+5, r19	; 0x05
    3756:	2c 83       	std	Y+4, r18	; 0x04
    3758:	37 83       	std	Z+7, r19	; 0x07
    375a:	26 83       	std	Z+6, r18	; 0x06
    375c:	5a 96       	adiw	r26, 0x1a	; 26
    375e:	ec 91       	ld	r30, X
    3760:	5a 97       	sbiw	r26, 0x1a	; 26
    3762:	9e 9f       	mul	r25, r30
    3764:	f0 01       	movw	r30, r0
    3766:	11 24       	eor	r1, r1
    3768:	ee 5d       	subi	r30, 0xDE	; 222
    376a:	f7 4e       	sbci	r31, 0xE7	; 231
    376c:	1d 96       	adiw	r26, 0x0d	; 13
    376e:	fc 93       	st	X, r31
    3770:	ee 93       	st	-X, r30
    3772:	1c 97       	sbiw	r26, 0x0c	; 12
    3774:	90 81       	ld	r25, Z
    3776:	9f 5f       	subi	r25, 0xFF	; 255
    3778:	90 83       	st	Z, r25
    377a:	21 c0       	rjmp	.+66     	; 0x37be <xTaskGenericNotifyFromISR+0x208>
    377c:	6d ef       	ldi	r22, 0xFD	; 253
    377e:	77 e1       	ldi	r23, 0x17	; 23
    3780:	fb 01       	movw	r30, r22
    3782:	c1 81       	ldd	r28, Z+1	; 0x01
    3784:	d2 81       	ldd	r29, Z+2	; 0x02
    3786:	53 96       	adiw	r26, 0x13	; 19
    3788:	dc 93       	st	X, r29
    378a:	ce 93       	st	-X, r28
    378c:	52 97       	sbiw	r26, 0x12	; 18
    378e:	2e 81       	ldd	r18, Y+6	; 0x06
    3790:	3f 81       	ldd	r19, Y+7	; 0x07
    3792:	55 96       	adiw	r26, 0x15	; 21
    3794:	3c 93       	st	X, r19
    3796:	2e 93       	st	-X, r18
    3798:	54 97       	sbiw	r26, 0x14	; 20
    379a:	4e 81       	ldd	r20, Y+6	; 0x06
    379c:	5f 81       	ldd	r21, Y+7	; 0x07
    379e:	9d 01       	movw	r18, r26
    37a0:	22 5f       	subi	r18, 0xF2	; 242
    37a2:	3f 4f       	sbci	r19, 0xFF	; 255
    37a4:	fa 01       	movw	r30, r20
    37a6:	35 83       	std	Z+5, r19	; 0x05
    37a8:	24 83       	std	Z+4, r18	; 0x04
    37aa:	3f 83       	std	Y+7, r19	; 0x07
    37ac:	2e 83       	std	Y+6, r18	; 0x06
    37ae:	59 96       	adiw	r26, 0x19	; 25
    37b0:	7c 93       	st	X, r23
    37b2:	6e 93       	st	-X, r22
    37b4:	58 97       	sbiw	r26, 0x18	; 24
    37b6:	fb 01       	movw	r30, r22
    37b8:	90 81       	ld	r25, Z
    37ba:	9f 5f       	subi	r25, 0xFF	; 255
    37bc:	90 83       	st	Z, r25
    37be:	5a 96       	adiw	r26, 0x1a	; 26
    37c0:	2c 91       	ld	r18, X
    37c2:	e0 91 90 18 	lds	r30, 0x1890	; 0x801890 <pxCurrentTCB>
    37c6:	f0 91 91 18 	lds	r31, 0x1891	; 0x801891 <pxCurrentTCB+0x1>
    37ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    37cc:	92 17       	cp	r25, r18
    37ce:	48 f4       	brcc	.+18     	; 0x37e2 <xTaskGenericNotifyFromISR+0x22c>
    37d0:	c1 14       	cp	r12, r1
    37d2:	d1 04       	cpc	r13, r1
    37d4:	19 f0       	breq	.+6      	; 0x37dc <xTaskGenericNotifyFromISR+0x226>
    37d6:	91 e0       	ldi	r25, 0x01	; 1
    37d8:	f6 01       	movw	r30, r12
    37da:	90 83       	st	Z, r25
    37dc:	91 e0       	ldi	r25, 0x01	; 1
    37de:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <xYieldPending>
    37e2:	df 91       	pop	r29
    37e4:	cf 91       	pop	r28
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
    37f0:	bf 90       	pop	r11
    37f2:	af 90       	pop	r10
    37f4:	9f 90       	pop	r9
    37f6:	8f 90       	pop	r8
    37f8:	08 95       	ret

000037fa <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	21 f4       	brne	.+8      	; 0x3806 <xTaskGenericNotifyStateClear+0xc>
    37fe:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <pxCurrentTCB>
    3802:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    380c:	70 e0       	ldi	r23, 0x00	; 0
    380e:	fc 01       	movw	r30, r24
    3810:	e6 0f       	add	r30, r22
    3812:	f7 1f       	adc	r31, r23
    3814:	23 a9       	ldd	r18, Z+51	; 0x33
    3816:	22 30       	cpi	r18, 0x02	; 2
    3818:	31 f4       	brne	.+12     	; 0x3826 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    381a:	fc 01       	movw	r30, r24
    381c:	e6 0f       	add	r30, r22
    381e:	f7 1f       	adc	r31, r23
    3820:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	01 c0       	rjmp	.+2      	; 0x3828 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3826:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3828:	0f 90       	pop	r0
    382a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    382c:	08 95       	ret

0000382e <prvGetNextExpireTime>:
    382e:	dc 01       	movw	r26, r24
    3830:	e0 91 9c 18 	lds	r30, 0x189C	; 0x80189c <pxCurrentTimerList>
    3834:	f0 91 9d 18 	lds	r31, 0x189D	; 0x80189d <pxCurrentTimerList+0x1>
    3838:	80 81       	ld	r24, Z
    383a:	91 e0       	ldi	r25, 0x01	; 1
    383c:	81 11       	cpse	r24, r1
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	9c 93       	st	X, r25
    3842:	91 11       	cpse	r25, r1
    3844:	08 c0       	rjmp	.+16     	; 0x3856 <prvGetNextExpireTime+0x28>
    3846:	07 80       	ldd	r0, Z+7	; 0x07
    3848:	f0 85       	ldd	r31, Z+8	; 0x08
    384a:	e0 2d       	mov	r30, r0
    384c:	60 81       	ld	r22, Z
    384e:	71 81       	ldd	r23, Z+1	; 0x01
    3850:	82 81       	ldd	r24, Z+2	; 0x02
    3852:	93 81       	ldd	r25, Z+3	; 0x03
    3854:	08 95       	ret
    3856:	60 e0       	ldi	r22, 0x00	; 0
    3858:	70 e0       	ldi	r23, 0x00	; 0
    385a:	cb 01       	movw	r24, r22
    385c:	08 95       	ret

0000385e <prvInsertTimerInActiveList>:
    385e:	cf 92       	push	r12
    3860:	df 92       	push	r13
    3862:	ef 92       	push	r14
    3864:	ff 92       	push	r15
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    386a:	fc 01       	movw	r30, r24
    386c:	42 83       	std	Z+2, r20	; 0x02
    386e:	53 83       	std	Z+3, r21	; 0x03
    3870:	64 83       	std	Z+4, r22	; 0x04
    3872:	75 83       	std	Z+5, r23	; 0x05
    3874:	93 87       	std	Z+11, r25	; 0x0b
    3876:	82 87       	std	Z+10, r24	; 0x0a
    3878:	04 17       	cp	r16, r20
    387a:	15 07       	cpc	r17, r21
    387c:	26 07       	cpc	r18, r22
    387e:	37 07       	cpc	r19, r23
    3880:	c0 f0       	brcs	.+48     	; 0x38b2 <prvInsertTimerInActiveList+0x54>
    3882:	0c 19       	sub	r16, r12
    3884:	1d 09       	sbc	r17, r13
    3886:	2e 09       	sbc	r18, r14
    3888:	3f 09       	sbc	r19, r15
    388a:	86 85       	ldd	r24, Z+14	; 0x0e
    388c:	97 85       	ldd	r25, Z+15	; 0x0f
    388e:	a0 89       	ldd	r26, Z+16	; 0x10
    3890:	b1 89       	ldd	r27, Z+17	; 0x11
    3892:	08 17       	cp	r16, r24
    3894:	19 07       	cpc	r17, r25
    3896:	2a 07       	cpc	r18, r26
    3898:	3b 07       	cpc	r19, r27
    389a:	00 f5       	brcc	.+64     	; 0x38dc <prvInsertTimerInActiveList+0x7e>
    389c:	bf 01       	movw	r22, r30
    389e:	6e 5f       	subi	r22, 0xFE	; 254
    38a0:	7f 4f       	sbci	r23, 0xFF	; 255
    38a2:	80 91 9a 18 	lds	r24, 0x189A	; 0x80189a <pxOverflowTimerList>
    38a6:	90 91 9b 18 	lds	r25, 0x189B	; 0x80189b <pxOverflowTimerList+0x1>
    38aa:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInsert>
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	18 c0       	rjmp	.+48     	; 0x38e2 <prvInsertTimerInActiveList+0x84>
    38b2:	0c 15       	cp	r16, r12
    38b4:	1d 05       	cpc	r17, r13
    38b6:	2e 05       	cpc	r18, r14
    38b8:	3f 05       	cpc	r19, r15
    38ba:	28 f4       	brcc	.+10     	; 0x38c6 <prvInsertTimerInActiveList+0x68>
    38bc:	4c 15       	cp	r20, r12
    38be:	5d 05       	cpc	r21, r13
    38c0:	6e 05       	cpc	r22, r14
    38c2:	7f 05       	cpc	r23, r15
    38c4:	68 f4       	brcc	.+26     	; 0x38e0 <prvInsertTimerInActiveList+0x82>
    38c6:	bf 01       	movw	r22, r30
    38c8:	6e 5f       	subi	r22, 0xFE	; 254
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <pxCurrentTimerList>
    38d0:	90 91 9d 18 	lds	r25, 0x189D	; 0x80189d <pxCurrentTimerList+0x1>
    38d4:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInsert>
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	03 c0       	rjmp	.+6      	; 0x38e2 <prvInsertTimerInActiveList+0x84>
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	01 c0       	rjmp	.+2      	; 0x38e2 <prvInsertTimerInActiveList+0x84>
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	1f 91       	pop	r17
    38e4:	0f 91       	pop	r16
    38e6:	ff 90       	pop	r15
    38e8:	ef 90       	pop	r14
    38ea:	df 90       	pop	r13
    38ec:	cf 90       	pop	r12
    38ee:	08 95       	ret

000038f0 <prvCheckForValidListAndQueue>:
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	0f 92       	push	r0
    38f6:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <xTimerQueue>
    38fa:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <xTimerQueue+0x1>
    38fe:	89 2b       	or	r24, r25
    3900:	e9 f4       	brne	.+58     	; 0x393c <prvCheckForValidListAndQueue+0x4c>
    3902:	89 ea       	ldi	r24, 0xA9	; 169
    3904:	98 e1       	ldi	r25, 0x18	; 24
    3906:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialise>
    390a:	8e e9       	ldi	r24, 0x9E	; 158
    390c:	98 e1       	ldi	r25, 0x18	; 24
    390e:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialise>
    3912:	89 ea       	ldi	r24, 0xA9	; 169
    3914:	98 e1       	ldi	r25, 0x18	; 24
    3916:	90 93 9d 18 	sts	0x189D, r25	; 0x80189d <pxCurrentTimerList+0x1>
    391a:	80 93 9c 18 	sts	0x189C, r24	; 0x80189c <pxCurrentTimerList>
    391e:	8e e9       	ldi	r24, 0x9E	; 158
    3920:	98 e1       	ldi	r25, 0x18	; 24
    3922:	90 93 9b 18 	sts	0x189B, r25	; 0x80189b <pxOverflowTimerList+0x1>
    3926:	80 93 9a 18 	sts	0x189A, r24	; 0x80189a <pxOverflowTimerList>
    392a:	40 e0       	ldi	r20, 0x00	; 0
    392c:	67 e0       	ldi	r22, 0x07	; 7
    392e:	8a e0       	ldi	r24, 0x0A	; 10
    3930:	0e 94 ef 09 	call	0x13de	; 0x13de <xQueueGenericCreate>
    3934:	90 93 99 18 	sts	0x1899, r25	; 0x801899 <xTimerQueue+0x1>
    3938:	80 93 98 18 	sts	0x1898, r24	; 0x801898 <xTimerQueue>
    393c:	0f 90       	pop	r0
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	08 95       	ret

00003942 <xTimerCreateTimerTask>:
    3942:	ef 92       	push	r14
    3944:	ff 92       	push	r15
    3946:	0f 93       	push	r16
    3948:	d3 df       	rcall	.-90     	; 0x38f0 <prvCheckForValidListAndQueue>
    394a:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <xTimerQueue>
    394e:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <xTimerQueue+0x1>
    3952:	89 2b       	or	r24, r25
    3954:	91 f0       	breq	.+36     	; 0x397a <xTimerCreateTimerTask+0x38>
    3956:	0f 2e       	mov	r0, r31
    3958:	f6 e9       	ldi	r31, 0x96	; 150
    395a:	ef 2e       	mov	r14, r31
    395c:	f8 e1       	ldi	r31, 0x18	; 24
    395e:	ff 2e       	mov	r15, r31
    3960:	f0 2d       	mov	r31, r0
    3962:	03 e0       	ldi	r16, 0x03	; 3
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 ec       	ldi	r20, 0xC0	; 192
    396a:	50 e0       	ldi	r21, 0x00	; 0
    396c:	69 e9       	ldi	r22, 0x99	; 153
    396e:	73 e0       	ldi	r23, 0x03	; 3
    3970:	88 e5       	ldi	r24, 0x58	; 88
    3972:	91 e0       	ldi	r25, 0x01	; 1
    3974:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskCreate>
    3978:	01 c0       	rjmp	.+2      	; 0x397c <xTimerCreateTimerTask+0x3a>
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	0f 91       	pop	r16
    397e:	ff 90       	pop	r15
    3980:	ef 90       	pop	r14
    3982:	08 95       	ret

00003984 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3984:	8f 92       	push	r8
    3986:	9f 92       	push	r9
    3988:	af 92       	push	r10
    398a:	bf 92       	push	r11
    398c:	cf 92       	push	r12
    398e:	df 92       	push	r13
    3990:	ef 92       	push	r14
    3992:	ff 92       	push	r15
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	27 97       	sbiw	r28, 0x07	; 7
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    39ac:	e0 91 98 18 	lds	r30, 0x1898	; 0x801898 <xTimerQueue>
    39b0:	f0 91 99 18 	lds	r31, 0x1899	; 0x801899 <xTimerQueue+0x1>
    39b4:	30 97       	sbiw	r30, 0x00	; 0
    39b6:	81 f1       	breq	.+96     	; 0x3a18 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    39b8:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    39ba:	2a 83       	std	Y+2, r18	; 0x02
    39bc:	3b 83       	std	Y+3, r19	; 0x03
    39be:	4c 83       	std	Y+4, r20	; 0x04
    39c0:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    39c2:	9f 83       	std	Y+7, r25	; 0x07
    39c4:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    39c6:	66 30       	cpi	r22, 0x06	; 6
    39c8:	f4 f4       	brge	.+60     	; 0x3a06 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    39ca:	c3 da       	rcall	.-2682   	; 0x2f52 <xTaskGetSchedulerState>
    39cc:	82 30       	cpi	r24, 0x02	; 2
    39ce:	69 f4       	brne	.+26     	; 0x39ea <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    39d0:	00 e0       	ldi	r16, 0x00	; 0
    39d2:	a7 01       	movw	r20, r14
    39d4:	96 01       	movw	r18, r12
    39d6:	be 01       	movw	r22, r28
    39d8:	6f 5f       	subi	r22, 0xFF	; 255
    39da:	7f 4f       	sbci	r23, 0xFF	; 255
    39dc:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <xTimerQueue>
    39e0:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <xTimerQueue+0x1>
    39e4:	0e 94 12 0a 	call	0x1424	; 0x1424 <xQueueGenericSend>
    39e8:	18 c0       	rjmp	.+48     	; 0x3a1a <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    39ea:	00 e0       	ldi	r16, 0x00	; 0
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	a9 01       	movw	r20, r18
    39f2:	be 01       	movw	r22, r28
    39f4:	6f 5f       	subi	r22, 0xFF	; 255
    39f6:	7f 4f       	sbci	r23, 0xFF	; 255
    39f8:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <xTimerQueue>
    39fc:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <xTimerQueue+0x1>
    3a00:	0e 94 12 0a 	call	0x1424	; 0x1424 <xQueueGenericSend>
    3a04:	0a c0       	rjmp	.+20     	; 0x3a1a <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	a8 01       	movw	r20, r16
    3a0a:	be 01       	movw	r22, r28
    3a0c:	6f 5f       	subi	r22, 0xFF	; 255
    3a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a10:	cf 01       	movw	r24, r30
    3a12:	0e 94 c2 0a 	call	0x1584	; 0x1584 <xQueueGenericSendFromISR>
    3a16:	01 c0       	rjmp	.+2      	; 0x3a1a <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3a18:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3a1a:	27 96       	adiw	r28, 0x07	; 7
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	ff 90       	pop	r15
    3a30:	ef 90       	pop	r14
    3a32:	df 90       	pop	r13
    3a34:	cf 90       	pop	r12
    3a36:	bf 90       	pop	r11
    3a38:	af 90       	pop	r10
    3a3a:	9f 90       	pop	r9
    3a3c:	8f 90       	pop	r8
    3a3e:	08 95       	ret

00003a40 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3a40:	8f 92       	push	r8
    3a42:	9f 92       	push	r9
    3a44:	af 92       	push	r10
    3a46:	bf 92       	push	r11
    3a48:	cf 92       	push	r12
    3a4a:	df 92       	push	r13
    3a4c:	ef 92       	push	r14
    3a4e:	ff 92       	push	r15
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3a58:	3b c0       	rjmp	.+118    	; 0x3ad0 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3a5a:	07 80       	ldd	r0, Z+7	; 0x07
    3a5c:	f0 85       	ldd	r31, Z+8	; 0x08
    3a5e:	e0 2d       	mov	r30, r0
    3a60:	80 80       	ld	r8, Z
    3a62:	91 80       	ldd	r9, Z+1	; 0x01
    3a64:	a2 80       	ldd	r10, Z+2	; 0x02
    3a66:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a68:	c0 85       	ldd	r28, Z+8	; 0x08
    3a6a:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a6c:	8e 01       	movw	r16, r28
    3a6e:	0e 5f       	subi	r16, 0xFE	; 254
    3a70:	1f 4f       	sbci	r17, 0xFF	; 255
    3a72:	c8 01       	movw	r24, r16
    3a74:	0e 94 7e 07 	call	0xefc	; 0xefc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a78:	ec 89       	ldd	r30, Y+20	; 0x14
    3a7a:	fd 89       	ldd	r31, Y+21	; 0x15
    3a7c:	ce 01       	movw	r24, r28
    3a7e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3a80:	8e 89       	ldd	r24, Y+22	; 0x16
    3a82:	82 ff       	sbrs	r24, 2
    3a84:	25 c0       	rjmp	.+74     	; 0x3ad0 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3a86:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a88:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a8a:	a8 89       	ldd	r26, Y+16	; 0x10
    3a8c:	b9 89       	ldd	r27, Y+17	; 0x11
    3a8e:	88 0d       	add	r24, r8
    3a90:	99 1d       	adc	r25, r9
    3a92:	aa 1d       	adc	r26, r10
    3a94:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3a96:	88 16       	cp	r8, r24
    3a98:	99 06       	cpc	r9, r25
    3a9a:	aa 06       	cpc	r10, r26
    3a9c:	bb 06       	cpc	r11, r27
    3a9e:	70 f4       	brcc	.+28     	; 0x3abc <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3aa0:	8a 83       	std	Y+2, r24	; 0x02
    3aa2:	9b 83       	std	Y+3, r25	; 0x03
    3aa4:	ac 83       	std	Y+4, r26	; 0x04
    3aa6:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3aa8:	db 87       	std	Y+11, r29	; 0x0b
    3aaa:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3aac:	b8 01       	movw	r22, r16
    3aae:	80 91 9c 18 	lds	r24, 0x189C	; 0x80189c <pxCurrentTimerList>
    3ab2:	90 91 9d 18 	lds	r25, 0x189D	; 0x80189d <pxCurrentTimerList+0x1>
    3ab6:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInsert>
    3aba:	0a c0       	rjmp	.+20     	; 0x3ad0 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3abc:	c1 2c       	mov	r12, r1
    3abe:	d1 2c       	mov	r13, r1
    3ac0:	76 01       	movw	r14, r12
    3ac2:	00 e0       	ldi	r16, 0x00	; 0
    3ac4:	10 e0       	ldi	r17, 0x00	; 0
    3ac6:	a5 01       	movw	r20, r10
    3ac8:	94 01       	movw	r18, r8
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	ce 01       	movw	r24, r28
    3ace:	5a df       	rcall	.-332    	; 0x3984 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3ad0:	e0 91 9c 18 	lds	r30, 0x189C	; 0x80189c <pxCurrentTimerList>
    3ad4:	f0 91 9d 18 	lds	r31, 0x189D	; 0x80189d <pxCurrentTimerList+0x1>
    3ad8:	80 81       	ld	r24, Z
    3ada:	81 11       	cpse	r24, r1
    3adc:	be cf       	rjmp	.-132    	; 0x3a5a <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3ade:	80 91 9a 18 	lds	r24, 0x189A	; 0x80189a <pxOverflowTimerList>
    3ae2:	90 91 9b 18 	lds	r25, 0x189B	; 0x80189b <pxOverflowTimerList+0x1>
    3ae6:	90 93 9d 18 	sts	0x189D, r25	; 0x80189d <pxCurrentTimerList+0x1>
    3aea:	80 93 9c 18 	sts	0x189C, r24	; 0x80189c <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3aee:	f0 93 9b 18 	sts	0x189B, r31	; 0x80189b <pxOverflowTimerList+0x1>
    3af2:	e0 93 9a 18 	sts	0x189A, r30	; 0x80189a <pxOverflowTimerList>
    }
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	1f 91       	pop	r17
    3afc:	0f 91       	pop	r16
    3afe:	ff 90       	pop	r15
    3b00:	ef 90       	pop	r14
    3b02:	df 90       	pop	r13
    3b04:	cf 90       	pop	r12
    3b06:	bf 90       	pop	r11
    3b08:	af 90       	pop	r10
    3b0a:	9f 90       	pop	r9
    3b0c:	8f 90       	pop	r8
    3b0e:	08 95       	ret

00003b10 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3b10:	cf 92       	push	r12
    3b12:	df 92       	push	r13
    3b14:	ef 92       	push	r14
    3b16:	ff 92       	push	r15
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3b1e:	0e 94 2c 12 	call	0x2458	; 0x2458 <xTaskGetTickCount>
    3b22:	6b 01       	movw	r12, r22
    3b24:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3b26:	80 91 92 18 	lds	r24, 0x1892	; 0x801892 <xLastTime.2436>
    3b2a:	90 91 93 18 	lds	r25, 0x1893	; 0x801893 <xLastTime.2436+0x1>
    3b2e:	a0 91 94 18 	lds	r26, 0x1894	; 0x801894 <xLastTime.2436+0x2>
    3b32:	b0 91 95 18 	lds	r27, 0x1895	; 0x801895 <xLastTime.2436+0x3>
    3b36:	c8 16       	cp	r12, r24
    3b38:	d9 06       	cpc	r13, r25
    3b3a:	ea 06       	cpc	r14, r26
    3b3c:	fb 06       	cpc	r15, r27
    3b3e:	20 f4       	brcc	.+8      	; 0x3b48 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3b40:	7f df       	rcall	.-258    	; 0x3a40 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	88 83       	st	Y, r24
    3b46:	01 c0       	rjmp	.+2      	; 0x3b4a <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3b48:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3b4a:	c0 92 92 18 	sts	0x1892, r12	; 0x801892 <xLastTime.2436>
    3b4e:	d0 92 93 18 	sts	0x1893, r13	; 0x801893 <xLastTime.2436+0x1>
    3b52:	e0 92 94 18 	sts	0x1894, r14	; 0x801894 <xLastTime.2436+0x2>
    3b56:	f0 92 95 18 	sts	0x1895, r15	; 0x801895 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3b5a:	c7 01       	movw	r24, r14
    3b5c:	b6 01       	movw	r22, r12
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	ff 90       	pop	r15
    3b64:	ef 90       	pop	r14
    3b66:	df 90       	pop	r13
    3b68:	cf 90       	pop	r12
    3b6a:	08 95       	ret

00003b6c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3b6c:	4f 92       	push	r4
    3b6e:	5f 92       	push	r5
    3b70:	6f 92       	push	r6
    3b72:	7f 92       	push	r7
    3b74:	8f 92       	push	r8
    3b76:	9f 92       	push	r9
    3b78:	af 92       	push	r10
    3b7a:	bf 92       	push	r11
    3b7c:	cf 92       	push	r12
    3b7e:	df 92       	push	r13
    3b80:	ef 92       	push	r14
    3b82:	ff 92       	push	r15
    3b84:	0f 93       	push	r16
    3b86:	1f 93       	push	r17
    3b88:	cf 93       	push	r28
    3b8a:	df 93       	push	r29
    3b8c:	4b 01       	movw	r8, r22
    3b8e:	5c 01       	movw	r10, r24
    3b90:	29 01       	movw	r4, r18
    3b92:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3b94:	e0 91 9c 18 	lds	r30, 0x189C	; 0x80189c <pxCurrentTimerList>
    3b98:	f0 91 9d 18 	lds	r31, 0x189D	; 0x80189d <pxCurrentTimerList+0x1>
    3b9c:	07 80       	ldd	r0, Z+7	; 0x07
    3b9e:	f0 85       	ldd	r31, Z+8	; 0x08
    3ba0:	e0 2d       	mov	r30, r0
    3ba2:	c0 85       	ldd	r28, Z+8	; 0x08
    3ba4:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3ba6:	ce 01       	movw	r24, r28
    3ba8:	02 96       	adiw	r24, 0x02	; 2
    3baa:	0e 94 7e 07 	call	0xefc	; 0xefc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3bae:	8e 89       	ldd	r24, Y+22	; 0x16
    3bb0:	82 ff       	sbrs	r24, 2
    3bb2:	1b c0       	rjmp	.+54     	; 0x3bea <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3bb4:	4e 85       	ldd	r20, Y+14	; 0x0e
    3bb6:	5f 85       	ldd	r21, Y+15	; 0x0f
    3bb8:	68 89       	ldd	r22, Y+16	; 0x10
    3bba:	79 89       	ldd	r23, Y+17	; 0x11
    3bbc:	48 0d       	add	r20, r8
    3bbe:	59 1d       	adc	r21, r9
    3bc0:	6a 1d       	adc	r22, r10
    3bc2:	7b 1d       	adc	r23, r11
    3bc4:	75 01       	movw	r14, r10
    3bc6:	64 01       	movw	r12, r8
    3bc8:	93 01       	movw	r18, r6
    3bca:	82 01       	movw	r16, r4
    3bcc:	ce 01       	movw	r24, r28
    3bce:	47 de       	rcall	.-882    	; 0x385e <prvInsertTimerInActiveList>
    3bd0:	88 23       	and	r24, r24
    3bd2:	69 f0       	breq	.+26     	; 0x3bee <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3bd4:	c1 2c       	mov	r12, r1
    3bd6:	d1 2c       	mov	r13, r1
    3bd8:	76 01       	movw	r14, r12
    3bda:	00 e0       	ldi	r16, 0x00	; 0
    3bdc:	10 e0       	ldi	r17, 0x00	; 0
    3bde:	a5 01       	movw	r20, r10
    3be0:	94 01       	movw	r18, r8
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	ce 01       	movw	r24, r28
    3be6:	ce de       	rcall	.-612    	; 0x3984 <xTimerGenericCommand>
    3be8:	02 c0       	rjmp	.+4      	; 0x3bee <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bea:	8e 7f       	andi	r24, 0xFE	; 254
    3bec:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3bee:	ec 89       	ldd	r30, Y+20	; 0x14
    3bf0:	fd 89       	ldd	r31, Y+21	; 0x15
    3bf2:	ce 01       	movw	r24, r28
    3bf4:	19 95       	eicall
    }
    3bf6:	df 91       	pop	r29
    3bf8:	cf 91       	pop	r28
    3bfa:	1f 91       	pop	r17
    3bfc:	0f 91       	pop	r16
    3bfe:	ff 90       	pop	r15
    3c00:	ef 90       	pop	r14
    3c02:	df 90       	pop	r13
    3c04:	cf 90       	pop	r12
    3c06:	bf 90       	pop	r11
    3c08:	af 90       	pop	r10
    3c0a:	9f 90       	pop	r9
    3c0c:	8f 90       	pop	r8
    3c0e:	7f 90       	pop	r7
    3c10:	6f 90       	pop	r6
    3c12:	5f 90       	pop	r5
    3c14:	4f 90       	pop	r4
    3c16:	08 95       	ret

00003c18 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3c18:	8f 92       	push	r8
    3c1a:	9f 92       	push	r9
    3c1c:	af 92       	push	r10
    3c1e:	bf 92       	push	r11
    3c20:	cf 92       	push	r12
    3c22:	df 92       	push	r13
    3c24:	ef 92       	push	r14
    3c26:	ff 92       	push	r15
    3c28:	1f 93       	push	r17
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
    3c2e:	1f 92       	push	r1
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	6b 01       	movw	r12, r22
    3c36:	7c 01       	movw	r14, r24
    3c38:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3c3a:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c3e:	ce 01       	movw	r24, r28
    3c40:	01 96       	adiw	r24, 0x01	; 1
    3c42:	66 df       	rcall	.-308    	; 0x3b10 <prvSampleTimeNow>
    3c44:	4b 01       	movw	r8, r22
    3c46:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	81 11       	cpse	r24, r1
    3c4c:	2d c0       	rjmp	.+90     	; 0x3ca8 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3c4e:	11 11       	cpse	r17, r1
    3c50:	0d c0       	rjmp	.+26     	; 0x3c6c <prvProcessTimerOrBlockTask+0x54>
    3c52:	8c 14       	cp	r8, r12
    3c54:	9d 04       	cpc	r9, r13
    3c56:	ae 04       	cpc	r10, r14
    3c58:	bf 04       	cpc	r11, r15
    3c5a:	40 f0       	brcs	.+16     	; 0x3c6c <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3c5c:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3c60:	a5 01       	movw	r20, r10
    3c62:	94 01       	movw	r18, r8
    3c64:	c7 01       	movw	r24, r14
    3c66:	b6 01       	movw	r22, r12
    3c68:	81 df       	rcall	.-254    	; 0x3b6c <prvProcessExpiredTimer>
    3c6a:	20 c0       	rjmp	.+64     	; 0x3cac <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3c6c:	11 23       	and	r17, r17
    3c6e:	41 f0       	breq	.+16     	; 0x3c80 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3c70:	e0 91 9a 18 	lds	r30, 0x189A	; 0x80189a <pxOverflowTimerList>
    3c74:	f0 91 9b 18 	lds	r31, 0x189B	; 0x80189b <pxOverflowTimerList+0x1>
    3c78:	80 81       	ld	r24, Z
    3c7a:	11 e0       	ldi	r17, 0x01	; 1
    3c7c:	81 11       	cpse	r24, r1
    3c7e:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3c80:	b7 01       	movw	r22, r14
    3c82:	a6 01       	movw	r20, r12
    3c84:	48 19       	sub	r20, r8
    3c86:	59 09       	sbc	r21, r9
    3c88:	6a 09       	sbc	r22, r10
    3c8a:	7b 09       	sbc	r23, r11
    3c8c:	21 2f       	mov	r18, r17
    3c8e:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <xTimerQueue>
    3c92:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <xTimerQueue+0x1>
    3c96:	0e 94 3d 0c 	call	0x187a	; 0x187a <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3c9a:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>
    3c9e:	81 11       	cpse	r24, r1
    3ca0:	05 c0       	rjmp	.+10     	; 0x3cac <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3ca2:	0e 94 fa 07 	call	0xff4	; 0xff4 <vPortYield>
    3ca6:	02 c0       	rjmp	.+4      	; 0x3cac <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3ca8:	0e 94 66 13 	call	0x26cc	; 0x26cc <xTaskResumeAll>
            }
        }
    }
    3cac:	0f 90       	pop	r0
    3cae:	df 91       	pop	r29
    3cb0:	cf 91       	pop	r28
    3cb2:	1f 91       	pop	r17
    3cb4:	ff 90       	pop	r15
    3cb6:	ef 90       	pop	r14
    3cb8:	df 90       	pop	r13
    3cba:	cf 90       	pop	r12
    3cbc:	bf 90       	pop	r11
    3cbe:	af 90       	pop	r10
    3cc0:	9f 90       	pop	r9
    3cc2:	8f 90       	pop	r8
    3cc4:	08 95       	ret

00003cc6 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3cc6:	af 92       	push	r10
    3cc8:	bf 92       	push	r11
    3cca:	cf 92       	push	r12
    3ccc:	df 92       	push	r13
    3cce:	ef 92       	push	r14
    3cd0:	ff 92       	push	r15
    3cd2:	0f 93       	push	r16
    3cd4:	1f 93       	push	r17
    3cd6:	cf 93       	push	r28
    3cd8:	df 93       	push	r29
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	28 97       	sbiw	r28, 0x08	; 8
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	f8 94       	cli
    3ce4:	de bf       	out	0x3e, r29	; 62
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3cea:	82 c0       	rjmp	.+260    	; 0x3df0 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	88 23       	and	r24, r24
    3cf0:	0c f4       	brge	.+2      	; 0x3cf4 <prvProcessReceivedCommands+0x2e>
    3cf2:	7e c0       	rjmp	.+252    	; 0x3df0 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3cf4:	ae 80       	ldd	r10, Y+6	; 0x06
    3cf6:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3cf8:	d5 01       	movw	r26, r10
    3cfa:	1c 96       	adiw	r26, 0x0c	; 12
    3cfc:	8d 91       	ld	r24, X+
    3cfe:	9c 91       	ld	r25, X
    3d00:	1d 97       	sbiw	r26, 0x0d	; 13
    3d02:	89 2b       	or	r24, r25
    3d04:	21 f0       	breq	.+8      	; 0x3d0e <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3d06:	c5 01       	movw	r24, r10
    3d08:	02 96       	adiw	r24, 0x02	; 2
    3d0a:	0e 94 7e 07 	call	0xefc	; 0xefc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3d0e:	ce 01       	movw	r24, r28
    3d10:	08 96       	adiw	r24, 0x08	; 8
    3d12:	fe de       	rcall	.-516    	; 0x3b10 <prvSampleTimeNow>
    3d14:	8b 01       	movw	r16, r22
    3d16:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3d18:	e9 81       	ldd	r30, Y+1	; 0x01
    3d1a:	0e 2e       	mov	r0, r30
    3d1c:	00 0c       	add	r0, r0
    3d1e:	ff 0b       	sbc	r31, r31
    3d20:	ea 30       	cpi	r30, 0x0A	; 10
    3d22:	f1 05       	cpc	r31, r1
    3d24:	08 f0       	brcs	.+2      	; 0x3d28 <prvProcessReceivedCommands+0x62>
    3d26:	64 c0       	rjmp	.+200    	; 0x3df0 <prvProcessReceivedCommands+0x12a>
    3d28:	88 27       	eor	r24, r24
    3d2a:	ee 58       	subi	r30, 0x8E	; 142
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d30:	0c 94 4a 37 	jmp	0x6e94	; 0x6e94 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3d34:	f5 01       	movw	r30, r10
    3d36:	86 89       	ldd	r24, Z+22	; 0x16
    3d38:	81 60       	ori	r24, 0x01	; 1
    3d3a:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3d3c:	ca 80       	ldd	r12, Y+2	; 0x02
    3d3e:	db 80       	ldd	r13, Y+3	; 0x03
    3d40:	ec 80       	ldd	r14, Y+4	; 0x04
    3d42:	fd 80       	ldd	r15, Y+5	; 0x05
    3d44:	46 85       	ldd	r20, Z+14	; 0x0e
    3d46:	57 85       	ldd	r21, Z+15	; 0x0f
    3d48:	60 89       	ldd	r22, Z+16	; 0x10
    3d4a:	71 89       	ldd	r23, Z+17	; 0x11
    3d4c:	4c 0d       	add	r20, r12
    3d4e:	5d 1d       	adc	r21, r13
    3d50:	6e 1d       	adc	r22, r14
    3d52:	7f 1d       	adc	r23, r15
    3d54:	c5 01       	movw	r24, r10
    3d56:	83 dd       	rcall	.-1274   	; 0x385e <prvInsertTimerInActiveList>
    3d58:	88 23       	and	r24, r24
    3d5a:	09 f4       	brne	.+2      	; 0x3d5e <prvProcessReceivedCommands+0x98>
    3d5c:	49 c0       	rjmp	.+146    	; 0x3df0 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3d5e:	d5 01       	movw	r26, r10
    3d60:	54 96       	adiw	r26, 0x14	; 20
    3d62:	ed 91       	ld	r30, X+
    3d64:	fc 91       	ld	r31, X
    3d66:	55 97       	sbiw	r26, 0x15	; 21
    3d68:	c5 01       	movw	r24, r10
    3d6a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3d6c:	f5 01       	movw	r30, r10
    3d6e:	86 89       	ldd	r24, Z+22	; 0x16
    3d70:	82 ff       	sbrs	r24, 2
    3d72:	3e c0       	rjmp	.+124    	; 0x3df0 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3d74:	4a 81       	ldd	r20, Y+2	; 0x02
    3d76:	5b 81       	ldd	r21, Y+3	; 0x03
    3d78:	6c 81       	ldd	r22, Y+4	; 0x04
    3d7a:	7d 81       	ldd	r23, Y+5	; 0x05
    3d7c:	86 85       	ldd	r24, Z+14	; 0x0e
    3d7e:	97 85       	ldd	r25, Z+15	; 0x0f
    3d80:	a0 89       	ldd	r26, Z+16	; 0x10
    3d82:	b1 89       	ldd	r27, Z+17	; 0x11
    3d84:	9a 01       	movw	r18, r20
    3d86:	ab 01       	movw	r20, r22
    3d88:	28 0f       	add	r18, r24
    3d8a:	39 1f       	adc	r19, r25
    3d8c:	4a 1f       	adc	r20, r26
    3d8e:	5b 1f       	adc	r21, r27
    3d90:	c1 2c       	mov	r12, r1
    3d92:	d1 2c       	mov	r13, r1
    3d94:	76 01       	movw	r14, r12
    3d96:	00 e0       	ldi	r16, 0x00	; 0
    3d98:	10 e0       	ldi	r17, 0x00	; 0
    3d9a:	60 e0       	ldi	r22, 0x00	; 0
    3d9c:	c5 01       	movw	r24, r10
    3d9e:	f2 dd       	rcall	.-1052   	; 0x3984 <xTimerGenericCommand>
    3da0:	27 c0       	rjmp	.+78     	; 0x3df0 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3da2:	d5 01       	movw	r26, r10
    3da4:	56 96       	adiw	r26, 0x16	; 22
    3da6:	8c 91       	ld	r24, X
    3da8:	56 97       	sbiw	r26, 0x16	; 22
    3daa:	8e 7f       	andi	r24, 0xFE	; 254
    3dac:	56 96       	adiw	r26, 0x16	; 22
    3dae:	8c 93       	st	X, r24
                        break;
    3db0:	1f c0       	rjmp	.+62     	; 0x3df0 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3db2:	f5 01       	movw	r30, r10
    3db4:	86 89       	ldd	r24, Z+22	; 0x16
    3db6:	81 60       	ori	r24, 0x01	; 1
    3db8:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3dba:	4a 81       	ldd	r20, Y+2	; 0x02
    3dbc:	5b 81       	ldd	r21, Y+3	; 0x03
    3dbe:	6c 81       	ldd	r22, Y+4	; 0x04
    3dc0:	7d 81       	ldd	r23, Y+5	; 0x05
    3dc2:	46 87       	std	Z+14, r20	; 0x0e
    3dc4:	57 87       	std	Z+15, r21	; 0x0f
    3dc6:	60 8b       	std	Z+16, r22	; 0x10
    3dc8:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3dca:	40 0f       	add	r20, r16
    3dcc:	51 1f       	adc	r21, r17
    3dce:	62 1f       	adc	r22, r18
    3dd0:	73 1f       	adc	r23, r19
    3dd2:	68 01       	movw	r12, r16
    3dd4:	79 01       	movw	r14, r18
    3dd6:	c5 01       	movw	r24, r10
    3dd8:	42 dd       	rcall	.-1404   	; 0x385e <prvInsertTimerInActiveList>
                        break;
    3dda:	0a c0       	rjmp	.+20     	; 0x3df0 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3ddc:	f5 01       	movw	r30, r10
    3dde:	86 89       	ldd	r24, Z+22	; 0x16
    3de0:	81 fd       	sbrc	r24, 1
    3de2:	04 c0       	rjmp	.+8      	; 0x3dec <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3de4:	c5 01       	movw	r24, r10
    3de6:	0e 94 ef 06 	call	0xdde	; 0xdde <vPortFree>
    3dea:	02 c0       	rjmp	.+4      	; 0x3df0 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3dec:	8e 7f       	andi	r24, 0xFE	; 254
    3dee:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	a9 01       	movw	r20, r18
    3df6:	be 01       	movw	r22, r28
    3df8:	6f 5f       	subi	r22, 0xFF	; 255
    3dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfc:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <xTimerQueue>
    3e00:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <xTimerQueue+0x1>
    3e04:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <xQueueReceive>
    3e08:	81 11       	cpse	r24, r1
    3e0a:	70 cf       	rjmp	.-288    	; 0x3cec <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3e0c:	28 96       	adiw	r28, 0x08	; 8
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	cd bf       	out	0x3d, r28	; 61
    3e18:	df 91       	pop	r29
    3e1a:	cf 91       	pop	r28
    3e1c:	1f 91       	pop	r17
    3e1e:	0f 91       	pop	r16
    3e20:	ff 90       	pop	r15
    3e22:	ef 90       	pop	r14
    3e24:	df 90       	pop	r13
    3e26:	cf 90       	pop	r12
    3e28:	bf 90       	pop	r11
    3e2a:	af 90       	pop	r10
    3e2c:	08 95       	ret

00003e2e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3e2e:	08 95       	ret

00003e30 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3e30:	84 b1       	in	r24, 0x04	; 4
    3e32:	80 68       	ori	r24, 0x80	; 128
    3e34:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3e36:	85 b1       	in	r24, 0x05	; 5
    3e38:	80 68       	ori	r24, 0x80	; 128
    3e3a:	85 b9       	out	0x05, r24	; 5
    3e3c:	08 95       	ret

00003e3e <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3e3e:	83 b1       	in	r24, 0x03	; 3
    3e40:	80 68       	ori	r24, 0x80	; 128
    3e42:	83 b9       	out	0x03, r24	; 3
    3e44:	08 95       	ret

00003e46 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3e46:	f4 df       	rcall	.-24     	; 0x3e30 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3e48:	2f ef       	ldi	r18, 0xFF	; 255
    3e4a:	80 e7       	ldi	r24, 0x70	; 112
    3e4c:	92 e0       	ldi	r25, 0x02	; 2
    3e4e:	21 50       	subi	r18, 0x01	; 1
    3e50:	80 40       	sbci	r24, 0x00	; 0
    3e52:	90 40       	sbci	r25, 0x00	; 0
    3e54:	e1 f7       	brne	.-8      	; 0x3e4e <vApplicationMallocFailedHook+0x8>
    3e56:	00 c0       	rjmp	.+0      	; 0x3e58 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3e58:	00 00       	nop
    3e5a:	f1 df       	rcall	.-30     	; 0x3e3e <prvBlinkMainLed>
    3e5c:	f5 cf       	rjmp	.-22     	; 0x3e48 <vApplicationMallocFailedHook+0x2>

00003e5e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3e5e:	e8 df       	rcall	.-48     	; 0x3e30 <prvSetMainLedOn>
    3e60:	2f ef       	ldi	r18, 0xFF	; 255
    3e62:	87 ea       	ldi	r24, 0xA7	; 167
    3e64:	91 e6       	ldi	r25, 0x61	; 97
    3e66:	21 50       	subi	r18, 0x01	; 1
    3e68:	80 40       	sbci	r24, 0x00	; 0
    3e6a:	90 40       	sbci	r25, 0x00	; 0
    3e6c:	e1 f7       	brne	.-8      	; 0x3e66 <vApplicationStackOverflowHook+0x8>
    3e6e:	00 c0       	rjmp	.+0      	; 0x3e70 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3e70:	00 00       	nop
    3e72:	e5 df       	rcall	.-54     	; 0x3e3e <prvBlinkMainLed>
    3e74:	f5 cf       	rjmp	.-22     	; 0x3e60 <vApplicationStackOverflowHook+0x2>

00003e76 <set_temperature_percent>:
void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
}

void set_light_lux(float lux_measurement){
	lux = lux_measurement;
    3e76:	90 93 be 18 	sts	0x18BE, r25	; 0x8018be <temperaturePercent+0x1>
    3e7a:	80 93 bd 18 	sts	0x18BD, r24	; 0x8018bd <temperaturePercent>
    3e7e:	08 95       	ret

00003e80 <set_humidity_percent>:
    3e80:	90 93 bc 18 	sts	0x18BC, r25	; 0x8018bc <humidityPercent+0x1>
    3e84:	80 93 bb 18 	sts	0x18BB, r24	; 0x8018bb <humidityPercent>
    3e88:	08 95       	ret

00003e8a <set_CO2_ppm>:
    3e8a:	90 93 ba 18 	sts	0x18BA, r25	; 0x8018ba <CO2_PPM+0x1>
    3e8e:	80 93 b9 18 	sts	0x18B9, r24	; 0x8018b9 <CO2_PPM>
    3e92:	08 95       	ret

00003e94 <set_status>:
}

void set_status(uint8_t stat){
	status = stat;
    3e94:	80 93 b4 18 	sts	0x18B4, r24	; 0x8018b4 <status>
    3e98:	08 95       	ret

00003e9a <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    3e9a:	fc 01       	movw	r30, r24
	union float_bytes{
		float temp;
		uint8_t bytes[sizeof(float)];
		} holder;
		
		holder.temp = lux;
    3e9c:	30 91 b5 18 	lds	r19, 0x18B5	; 0x8018b5 <lux>
    3ea0:	20 91 b6 18 	lds	r18, 0x18B6	; 0x8018b6 <lux+0x1>
    3ea4:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <lux+0x2>
    3ea8:	80 91 b8 18 	lds	r24, 0x18B8	; 0x8018b8 <lux+0x3>
		
	
	lora_driver_payload_t payload;
	payload.portNo = port;
    3eac:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    3eae:	4b e0       	ldi	r20, 0x0B	; 11
    3eb0:	41 83       	std	Z+1, r20	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3eb2:	40 91 bd 18 	lds	r20, 0x18BD	; 0x8018bd <temperaturePercent>
    3eb6:	50 91 be 18 	lds	r21, 0x18BE	; 0x8018be <temperaturePercent+0x1>
    3eba:	52 83       	std	Z+2, r21	; 0x02
	payload.bytes[1] = temperaturePercent;
    3ebc:	43 83       	std	Z+3, r20	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3ebe:	40 91 bb 18 	lds	r20, 0x18BB	; 0x8018bb <humidityPercent>
    3ec2:	50 91 bc 18 	lds	r21, 0x18BC	; 0x8018bc <humidityPercent+0x1>
    3ec6:	54 83       	std	Z+4, r21	; 0x04
	payload.bytes[3] = humidityPercent;
    3ec8:	45 83       	std	Z+5, r20	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    3eca:	40 91 b9 18 	lds	r20, 0x18B9	; 0x8018b9 <CO2_PPM>
    3ece:	50 91 ba 18 	lds	r21, 0x18BA	; 0x8018ba <CO2_PPM+0x1>
    3ed2:	56 83       	std	Z+6, r21	; 0x06
	payload.bytes[5] = CO2_PPM;
    3ed4:	47 83       	std	Z+7, r20	; 0x07
	payload.bytes[6] = holder.bytes[0];
    3ed6:	30 87       	std	Z+8, r19	; 0x08
	payload.bytes[7] = holder.bytes[1];
    3ed8:	21 87       	std	Z+9, r18	; 0x09
	payload.bytes[8] = holder.bytes[2];
    3eda:	92 87       	std	Z+10, r25	; 0x0a
	payload.bytes[9] = holder.bytes[3];
    3edc:	83 87       	std	Z+11, r24	; 0x0b
	payload.bytes[10] = status;
    3ede:	80 91 b4 18 	lds	r24, 0x18B4	; 0x8018b4 <status>
    3ee2:	84 87       	std	Z+12, r24	; 0x0c
	
	return payload;
    3ee4:	cf 01       	movw	r24, r30
    3ee6:	08 95       	ret

00003ee8 <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    3ee8:	90 93 c0 18 	sts	0x18C0, r25	; 0x8018c0 <lastCO2ppm+0x1>
    3eec:	80 93 bf 18 	sts	0x18BF, r24	; 0x8018bf <lastCO2ppm>
    3ef0:	08 95       	ret

00003ef2 <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    3ef2:	83 e0       	ldi	r24, 0x03	; 3
    3ef4:	0e 94 08 28 	call	0x5010	; 0x5010 <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    3ef8:	84 e7       	ldi	r24, 0x74	; 116
    3efa:	9f e1       	ldi	r25, 0x1F	; 31
    3efc:	0c 94 2d 28 	jmp	0x505a	; 0x505a <mh_z19_injectCallBack>
    3f00:	08 95       	ret

00003f02 <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    3f02:	0e 94 32 28 	call	0x5064	; 0x5064 <mh_z19_takeMeassuring>
    3f06:	80 93 1a 1a 	sts	0x1A1A, r24	; 0x801a1a <rc>
	if (rc != MHZ19_OK)
    3f0a:	88 23       	and	r24, r24
    3f0c:	41 f0       	breq	.+16     	; 0x3f1e <CO2_measure+0x1c>
	{
		// Something went wrong
		printf("Something went wrong while measuring CO2!");
    3f0e:	81 ea       	ldi	r24, 0xA1	; 161
    3f10:	93 e0       	ldi	r25, 0x03	; 3
    3f12:	9f 93       	push	r25
    3f14:	8f 93       	push	r24
    3f16:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
    3f1a:	0f 90       	pop	r0
    3f1c:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3f1e:	8f eb       	ldi	r24, 0xBF	; 191
    3f20:	98 e1       	ldi	r25, 0x18	; 24
    3f22:	0e 94 61 28 	call	0x50c2	; 0x50c2 <mh_z19_getCo2Ppm>
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	90 93 c0 18 	sts	0x18C0, r25	; 0x8018c0 <lastCO2ppm+0x1>
    3f2c:	80 93 bf 18 	sts	0x18BF, r24	; 0x8018bf <lastCO2ppm>
    3f30:	08 95       	ret

00003f32 <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3f32:	cc 24       	eor	r12, r12
    3f34:	ca 94       	dec	r12
    3f36:	dc 2c       	mov	r13, r12
    3f38:	76 01       	movw	r14, r12
    3f3a:	01 e0       	ldi	r16, 0x01	; 1
    3f3c:	21 e0       	ldi	r18, 0x01	; 1
    3f3e:	41 e0       	ldi	r20, 0x01	; 1
    3f40:	50 e0       	ldi	r21, 0x00	; 0
    3f42:	60 e0       	ldi	r22, 0x00	; 0
    3f44:	70 e0       	ldi	r23, 0x00	; 0
    3f46:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <measureEventGroup>
    3f4a:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <measureEventGroup+0x1>
    3f4e:	0e 94 a5 04 	call	0x94a	; 0x94a <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3f52:	60 ff       	sbrs	r22, 0
    3f54:	ee cf       	rjmp	.-36     	; 0x3f32 <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    3f56:	d5 df       	rcall	.-86     	; 0x3f02 <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				vTaskDelay(pdMS_TO_TICKS(100));
    3f58:	66 e0       	ldi	r22, 0x06	; 6
    3f5a:	70 e0       	ldi	r23, 0x00	; 0
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	0e 94 a7 14 	call	0x294e	; 0x294e <vTaskDelay>
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    3f64:	42 e0       	ldi	r20, 0x02	; 2
    3f66:	50 e0       	ldi	r21, 0x00	; 0
    3f68:	60 e0       	ldi	r22, 0x00	; 0
    3f6a:	70 e0       	ldi	r23, 0x00	; 0
    3f6c:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <dataReadyEventGroup>
    3f70:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <dataReadyEventGroup+0x1>
    3f74:	0e 94 45 05 	call	0xa8a	; 0xa8a <xEventGroupSetBits>
    3f78:	dc cf       	rjmp	.-72     	; 0x3f32 <MeasureCo2Task>

00003f7a <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    3f7a:	80 91 bf 18 	lds	r24, 0x18BF	; 0x8018bf <lastCO2ppm>
    3f7e:	90 91 c0 18 	lds	r25, 0x18C0	; 0x8018c0 <lastCO2ppm+0x1>
    3f82:	08 95       	ret

00003f84 <create_CO2_sensor_task>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void create_CO2_sensor_task(UBaseType_t priority){
    3f84:	ef 92       	push	r14
    3f86:	ff 92       	push	r15
    3f88:	0f 93       	push	r16
    3f8a:	08 2f       	mov	r16, r24
	
	//Initializing 
		CO2_createSensor();
    3f8c:	b2 df       	rcall	.-156    	; 0x3ef2 <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    3f8e:	e1 2c       	mov	r14, r1
    3f90:	f1 2c       	mov	r15, r1
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 ec       	ldi	r20, 0xC0	; 192
    3f98:	50 e0       	ldi	r21, 0x00	; 0
    3f9a:	6b ec       	ldi	r22, 0xCB	; 203
    3f9c:	73 e0       	ldi	r23, 0x03	; 3
    3f9e:	89 e9       	ldi	r24, 0x99	; 153
    3fa0:	9f e1       	ldi	r25, 0x1F	; 31
    3fa2:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY + priority,
		NULL);
}
    3fa6:	0f 91       	pop	r16
    3fa8:	ff 90       	pop	r15
    3faa:	ef 90       	pop	r14
    3fac:	08 95       	ret

00003fae <tsl2591Callback>:
		printf("Couldn't initialize light sensor.\n");
	}
}

void tsl2591Callback(tsl2591_returnCode_t rc)
{
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
    3fb2:	00 d0       	rcall	.+0      	; 0x3fb4 <tsl2591Callback+0x6>
    3fb4:	1f 92       	push	r1
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
	float _lux;
	switch (rc)
    3fba:	81 30       	cpi	r24, 0x01	; 1
    3fbc:	c9 f4       	brne	.+50     	; 0x3ff0 <tsl2591Callback+0x42>
	{
		case TSL2591_DATA_READY:
		
		if ( TSL2591_OK == (rc = tsl2591_getLux(&_lux)) )
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	01 96       	adiw	r24, 0x01	; 1
    3fc2:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <tsl2591_getLux>
    3fc6:	81 11       	cpse	r24, r1
    3fc8:	0d c0       	rjmp	.+26     	; 0x3fe4 <tsl2591Callback+0x36>
		{
			lux = _lux;
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fce:	ab 81       	ldd	r26, Y+3	; 0x03
    3fd0:	bc 81       	ldd	r27, Y+4	; 0x04
    3fd2:	80 93 c1 18 	sts	0x18C1, r24	; 0x8018c1 <lux>
    3fd6:	90 93 c2 18 	sts	0x18C2, r25	; 0x8018c2 <lux+0x1>
    3fda:	a0 93 c3 18 	sts	0x18C3, r26	; 0x8018c3 <lux+0x2>
    3fde:	b0 93 c4 18 	sts	0x18C4, r27	; 0x8018c4 <lux+0x3>
    3fe2:	06 c0       	rjmp	.+12     	; 0x3ff0 <tsl2591Callback+0x42>
		}
		else if( TSL2591_OVERFLOW == rc )
    3fe4:	83 30       	cpi	r24, 0x03	; 3
    3fe6:	21 f4       	brne	.+8      	; 0x3ff0 <tsl2591Callback+0x42>
		{
			printf("Lux overflow - change gain and integration time\n");
    3fe8:	8d ed       	ldi	r24, 0xDD	; 221
    3fea:	93 e0       	ldi	r25, 0x03	; 3
    3fec:	0e 94 37 3a 	call	0x746e	; 0x746e <puts>
		break;
		
		default:
		break;
	}
}
    3ff0:	0f 90       	pop	r0
    3ff2:	0f 90       	pop	r0
    3ff4:	0f 90       	pop	r0
    3ff6:	0f 90       	pop	r0
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
    3ffc:	08 95       	ret

00003ffe <initialize_light_sensor>:
void light_sensor_measure();
void tsl2591Callback(tsl2591_returnCode_t rc);
void measure_light_task(void *pvParameters);

void initialize_light_sensor(){
	if(TSL2591_OK == tsl2591_initialise(tsl2591Callback)){
    3ffe:	87 ed       	ldi	r24, 0xD7	; 215
    4000:	9f e1       	ldi	r25, 0x1F	; 31
    4002:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <tsl2591_initialise>
    4006:	81 11       	cpse	r24, r1
    4008:	09 c0       	rjmp	.+18     	; 0x401c <initialize_light_sensor+0x1e>
		if(TSL2591_OK != tsl2591_enable()){
    400a:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <tsl2591_enable>
    400e:	88 23       	and	r24, r24
    4010:	49 f0       	breq	.+18     	; 0x4024 <initialize_light_sensor+0x26>
			printf("Couldn't power up light sensor.\n");
    4012:	8d e0       	ldi	r24, 0x0D	; 13
    4014:	94 e0       	ldi	r25, 0x04	; 4
    4016:	0c 94 37 3a 	jmp	0x746e	; 0x746e <puts>
    401a:	08 95       	ret
		}
	}
	else{
		printf("Couldn't initialize light sensor.\n");
    401c:	8d e2       	ldi	r24, 0x2D	; 45
    401e:	94 e0       	ldi	r25, 0x04	; 4
    4020:	0c 94 37 3a 	jmp	0x746e	; 0x746e <puts>
    4024:	08 95       	ret

00004026 <light_sensor_measure>:
		break;
	}
}

void light_sensor_measure(){
	if (TSL2591_OK != tsl2591_fetchData()){
    4026:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <tsl2591_fetchData>
    402a:	88 23       	and	r24, r24
    402c:	21 f0       	breq	.+8      	; 0x4036 <light_sensor_measure+0x10>
		printf("Couldn't fetch data from light sensor.\n");
    402e:	8f e4       	ldi	r24, 0x4F	; 79
    4030:	94 e0       	ldi	r25, 0x04	; 4
    4032:	0c 94 37 3a 	jmp	0x746e	; 0x746e <puts>
    4036:	08 95       	ret

00004038 <measure_light_task>:
}

void measure_light_task(void *pvParameters){
	for(;;){
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,LIGHT_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    4038:	cc 24       	eor	r12, r12
    403a:	ca 94       	dec	r12
    403c:	dc 2c       	mov	r13, r12
    403e:	76 01       	movw	r14, r12
    4040:	01 e0       	ldi	r16, 0x01	; 1
    4042:	21 e0       	ldi	r18, 0x01	; 1
    4044:	40 e1       	ldi	r20, 0x10	; 16
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	70 e0       	ldi	r23, 0x00	; 0
    404c:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <measureEventGroup>
    4050:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <measureEventGroup+0x1>
    4054:	0e 94 a5 04 	call	0x94a	; 0x94a <xEventGroupWaitBits>
		
		if((uxBits & (LIGHT_MEASURE_BIT)) == LIGHT_MEASURE_BIT){
    4058:	64 ff       	sbrs	r22, 4
    405a:	ee cf       	rjmp	.-36     	; 0x4038 <measure_light_task>
			light_sensor_measure();
    405c:	e4 df       	rcall	.-56     	; 0x4026 <light_sensor_measure>
			vTaskDelay(pdMS_TO_TICKS(50));
    405e:	63 e0       	ldi	r22, 0x03	; 3
    4060:	70 e0       	ldi	r23, 0x00	; 0
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	0e 94 a7 14 	call	0x294e	; 0x294e <vTaskDelay>
			xEventGroupSetBits(dataReadyEventGroup, LIGHT_READY_BIT);
    406a:	40 e2       	ldi	r20, 0x20	; 32
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	60 e0       	ldi	r22, 0x00	; 0
    4070:	70 e0       	ldi	r23, 0x00	; 0
    4072:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <dataReadyEventGroup>
    4076:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <dataReadyEventGroup+0x1>
    407a:	0e 94 45 05 	call	0xa8a	; 0xa8a <xEventGroupSetBits>
    407e:	dc cf       	rjmp	.-72     	; 0x4038 <measure_light_task>

00004080 <light_sensor_get_lux>:
		printf("Couldn't fetch data from light sensor.\n");
	}
}

float light_sensor_get_lux(){
	return lux;
    4080:	60 91 c1 18 	lds	r22, 0x18C1	; 0x8018c1 <lux>
    4084:	70 91 c2 18 	lds	r23, 0x18C2	; 0x8018c2 <lux+0x1>
    4088:	80 91 c3 18 	lds	r24, 0x18C3	; 0x8018c3 <lux+0x2>
    408c:	90 91 c4 18 	lds	r25, 0x18C4	; 0x8018c4 <lux+0x3>
}
    4090:	08 95       	ret

00004092 <create_light_sensor_task>:

void create_light_sensor_task(UBaseType_t priority){
    4092:	ef 92       	push	r14
    4094:	ff 92       	push	r15
    4096:	0f 93       	push	r16
    4098:	08 2f       	mov	r16, r24
	
	initialize_light_sensor();
    409a:	b1 df       	rcall	.-158    	; 0x3ffe <initialize_light_sensor>
	
	xTaskCreate(
    409c:	e1 2c       	mov	r14, r1
    409e:	f1 2c       	mov	r15, r1
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	40 ec       	ldi	r20, 0xC0	; 192
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	66 e7       	ldi	r22, 0x76	; 118
    40aa:	74 e0       	ldi	r23, 0x04	; 4
    40ac:	8c e1       	ldi	r24, 0x1C	; 28
    40ae:	90 e2       	ldi	r25, 0x20	; 32
    40b0:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskCreate>
	"MeasureLight",
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
}
    40b4:	0f 91       	pop	r16
    40b6:	ff 90       	pop	r15
    40b8:	ef 90       	pop	r14
    40ba:	08 95       	ret

000040bc <initialise_TempHumSensor>:
void Temp_Hum_Main_Task(void *pvParameters);
void tempHumSensor_printReturnCode(hih8120_driverReturnCode_t rc);

void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    40bc:	5f d2       	rcall	.+1214   	; 0x457c <hih8120_initialise>
    40be:	88 23       	and	r24, r24
    40c0:	41 f0       	breq	.+16     	; 0x40d2 <initialise_TempHumSensor+0x16>
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{
		printf("Something went wrong while initialising tempHum sensor");
    40c2:	83 e8       	ldi	r24, 0x83	; 131
    40c4:	94 e0       	ldi	r25, 0x04	; 4
    40c6:	9f 93       	push	r25
    40c8:	8f 93       	push	r24
    40ca:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
    40ce:	0f 90       	pop	r0
    40d0:	0f 90       	pop	r0
    40d2:	08 95       	ret

000040d4 <create_TempHum_sensor_task>:
	}
}


void create_TempHum_sensor_task(UBaseType_t priority){
    40d4:	ef 92       	push	r14
    40d6:	ff 92       	push	r15
    40d8:	0f 93       	push	r16
    40da:	08 2f       	mov	r16, r24
	initialise_TempHumSensor();
    40dc:	ef df       	rcall	.-34     	; 0x40bc <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    40de:	e1 2c       	mov	r14, r1
    40e0:	f1 2c       	mov	r15, r1
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	40 ec       	ldi	r20, 0xC0	; 192
    40e8:	50 e0       	ldi	r21, 0x00	; 0
    40ea:	6a eb       	ldi	r22, 0xBA	; 186
    40ec:	74 e0       	ldi	r23, 0x04	; 4
    40ee:	8f ea       	ldi	r24, 0xAF	; 175
    40f0:	90 e2       	ldi	r25, 0x20	; 32
    40f2:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
	
}
    40f6:	0f 91       	pop	r16
    40f8:	ff 90       	pop	r15
    40fa:	ef 90       	pop	r14
    40fc:	08 95       	ret

000040fe <tempHumSensor_printReturnCode>:
		case HIH8120_OK: returnCodeString = "HIH8120_OK";
		case HIH8120_OUT_OF_HEAP: returnCodeString = "HIH8120_OUT_OF_HEAP";
		case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED";
		case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY";
	}
	printf("RETURNCODE: %s \n", returnCodeString);
    40fe:	86 ec       	ldi	r24, 0xC6	; 198
    4100:	94 e0       	ldi	r25, 0x04	; 4
    4102:	9f 93       	push	r25
    4104:	8f 93       	push	r24
    4106:	87 ed       	ldi	r24, 0xD7	; 215
    4108:	94 e0       	ldi	r25, 0x04	; 4
    410a:	9f 93       	push	r25
    410c:	8f 93       	push	r24
    410e:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
}
    4112:	0f 90       	pop	r0
    4114:	0f 90       	pop	r0
    4116:	0f 90       	pop	r0
    4118:	0f 90       	pop	r0
    411a:	08 95       	ret

0000411c <measure_Temp_Hum>:
	
}

void measure_Temp_Hum(){
	
	if ( HIH8120_OK != hih8120_wakeup() )
    411c:	47 d2       	rcall	.+1166   	; 0x45ac <hih8120_wakeup>
    411e:	88 23       	and	r24, r24
    4120:	21 f0       	breq	.+8      	; 0x412a <measure_Temp_Hum+0xe>
	{
		printf("Could not wake up temp hum sensor \n");
    4122:	88 ee       	ldi	r24, 0xE8	; 232
    4124:	94 e0       	ldi	r25, 0x04	; 4
    4126:	0e 94 37 3a 	call	0x746e	; 0x746e <puts>
		// Something went wrong
		// Investigate the return code further
	}

	vTaskDelay(pdMS_TO_TICKS(60));
    412a:	63 e0       	ldi	r22, 0x03	; 3
    412c:	70 e0       	ldi	r23, 0x00	; 0
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	0e 94 a7 14 	call	0x294e	; 0x294e <vTaskDelay>
	
	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
	if (measure_rc != HIH8120_OK)
    4136:	4f d2       	rcall	.+1182   	; 0x45d6 <hih8120_measure>
	{
		tempHumSensor_printReturnCode(measure_rc);
    4138:	81 11       	cpse	r24, r1
    413a:	e1 df       	rcall	.-62     	; 0x40fe <tempHumSensor_printReturnCode>
	}
	vTaskDelay(pdMS_TO_TICKS(50));
    413c:	63 e0       	ldi	r22, 0x03	; 3
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	0e 94 a7 14 	call	0x294e	; 0x294e <vTaskDelay>
	
	humidity = hih8120_getHumidityPercent_x10();
    4148:	6c d2       	rcall	.+1240   	; 0x4622 <hih8120_getHumidityPercent_x10>
    414a:	90 93 c8 18 	sts	0x18C8, r25	; 0x8018c8 <humidity+0x1>
    414e:	80 93 c7 18 	sts	0x18C7, r24	; 0x8018c7 <humidity>
	temperature = hih8120_getTemperature_x10();	
    4152:	8d d2       	rcall	.+1306   	; 0x466e <hih8120_getTemperature_x10>
    4154:	90 93 c6 18 	sts	0x18C6, r25	; 0x8018c6 <temperature+0x1>
    4158:	80 93 c5 18 	sts	0x18C5, r24	; 0x8018c5 <temperature>
    415c:	08 95       	ret

0000415e <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(void *pvParameters){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    415e:	cc 24       	eor	r12, r12
    4160:	ca 94       	dec	r12
    4162:	dc 2c       	mov	r13, r12
    4164:	76 01       	movw	r14, r12
    4166:	01 e0       	ldi	r16, 0x01	; 1
    4168:	21 e0       	ldi	r18, 0x01	; 1
    416a:	44 e0       	ldi	r20, 0x04	; 4
    416c:	50 e0       	ldi	r21, 0x00	; 0
    416e:	60 e0       	ldi	r22, 0x00	; 0
    4170:	70 e0       	ldi	r23, 0x00	; 0
    4172:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <measureEventGroup>
    4176:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <measureEventGroup+0x1>
    417a:	0e 94 a5 04 	call	0x94a	; 0x94a <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    417e:	62 ff       	sbrs	r22, 2
    4180:	ee cf       	rjmp	.-36     	; 0x415e <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();			
    4182:	cc df       	rcall	.-104    	; 0x411c <measure_Temp_Hum>
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    4184:	48 e0       	ldi	r20, 0x08	; 8
    4186:	50 e0       	ldi	r21, 0x00	; 0
    4188:	60 e0       	ldi	r22, 0x00	; 0
    418a:	70 e0       	ldi	r23, 0x00	; 0
    418c:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <dataReadyEventGroup>
    4190:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <dataReadyEventGroup+0x1>
    4194:	0e 94 45 05 	call	0xa8a	; 0xa8a <xEventGroupSetBits>
    4198:	e2 cf       	rjmp	.-60     	; 0x415e <Temp_Hum_Main_Task>

0000419a <TempHumSensor_getTemp>:
	printf("RETURNCODE: %s \n", returnCodeString);
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    419a:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <temperature>
    419e:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <temperature+0x1>
    41a2:	08 95       	ret

000041a4 <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    41a4:	80 91 c7 18 	lds	r24, 0x18C7	; 0x8018c7 <humidity>
    41a8:	90 91 c8 18 	lds	r25, 0x18C8	; 0x8018c8 <humidity+0x1>
    41ac:	08 95       	ret

000041ae <initialize_event_groups>:
MessageBufferHandle_t downlinkMessageBufferHandle;
SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    41ae:	0e 94 92 04 	call	0x924	; 0x924 <xEventGroupCreate>
    41b2:	90 93 1e 1a 	sts	0x1A1E, r25	; 0x801a1e <dataReadyEventGroup+0x1>
    41b6:	80 93 1d 1a 	sts	0x1A1D, r24	; 0x801a1d <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    41ba:	0e 94 92 04 	call	0x924	; 0x924 <xEventGroupCreate>
    41be:	90 93 20 1a 	sts	0x1A20, r25	; 0x801a20 <measureEventGroup+0x1>
    41c2:	80 93 1f 1a 	sts	0x1A1F, r24	; 0x801a1f <measureEventGroup>
    41c6:	08 95       	ret

000041c8 <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    41c8:	41 e0       	ldi	r20, 0x01	; 1
    41ca:	60 e0       	ldi	r22, 0x00	; 0
    41cc:	70 e0       	ldi	r23, 0x00	; 0
    41ce:	8c e2       	ldi	r24, 0x2C	; 44
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <xStreamBufferGenericCreate>
    41d6:	90 93 22 1a 	sts	0x1A22, r25	; 0x801a22 <uplinkMessageBufferHandle+0x1>
    41da:	80 93 21 1a 	sts	0x1A21, r24	; 0x801a21 <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    41de:	89 2b       	or	r24, r25
    41e0:	21 f4       	brne	.+8      	; 0x41ea <initialize_message_buffers+0x22>
		printf("Failed to create uplink message buffer.\n");
    41e2:	8b e0       	ldi	r24, 0x0B	; 11
    41e4:	95 e0       	ldi	r25, 0x05	; 5
    41e6:	0e 94 37 3a 	call	0x746e	; 0x746e <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    41ea:	41 e0       	ldi	r20, 0x01	; 1
    41ec:	60 e0       	ldi	r22, 0x00	; 0
    41ee:	70 e0       	ldi	r23, 0x00	; 0
    41f0:	8c e2       	ldi	r24, 0x2C	; 44
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <xStreamBufferGenericCreate>
    41f8:	90 93 24 1a 	sts	0x1A24, r25	; 0x801a24 <downlinkMessageBufferHandle+0x1>
    41fc:	80 93 23 1a 	sts	0x1A23, r24	; 0x801a23 <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    4200:	89 2b       	or	r24, r25
    4202:	21 f4       	brne	.+8      	; 0x420c <initialize_message_buffers+0x44>
		printf("Failed to create downlink message buffer.\n");
    4204:	83 e3       	ldi	r24, 0x33	; 51
    4206:	95 e0       	ldi	r25, 0x05	; 5
    4208:	0c 94 37 3a 	jmp	0x746e	; 0x746e <puts>
    420c:	08 95       	ret

0000420e <initialize_semaphore>:
	}
}

 void initialize_semaphore(){
    420e:	0f 93       	push	r16
 	configSemaphore = xSemaphoreCreateMutex();
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	0e 94 b6 0a 	call	0x156c	; 0x156c <xQueueCreateMutex>
    4216:	90 93 1c 1a 	sts	0x1A1C, r25	; 0x801a1c <configSemaphore+0x1>
    421a:	80 93 1b 1a 	sts	0x1A1B, r24	; 0x801a1b <configSemaphore>
	 if(configSemaphore != NULL){
    421e:	00 97       	sbiw	r24, 0x00	; 0
    4220:	49 f0       	breq	.+18     	; 0x4234 <initialize_semaphore+0x26>
		 xSemaphoreGive(configSemaphore);
    4222:	00 e0       	ldi	r16, 0x00	; 0
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	a9 01       	movw	r20, r18
    422a:	60 e0       	ldi	r22, 0x00	; 0
    422c:	70 e0       	ldi	r23, 0x00	; 0
    422e:	0e 94 12 0a 	call	0x1424	; 0x1424 <xQueueGenericSend>
    4232:	08 c0       	rjmp	.+16     	; 0x4244 <initialize_semaphore+0x36>
	 }
	 else{
		 printf("Failed to create config semaphore");
    4234:	8d e5       	ldi	r24, 0x5D	; 93
    4236:	95 e0       	ldi	r25, 0x05	; 5
    4238:	9f 93       	push	r25
    423a:	8f 93       	push	r24
    423c:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
    4240:	0f 90       	pop	r0
    4242:	0f 90       	pop	r0
	 }
 }
    4244:	0f 91       	pop	r16
    4246:	08 95       	ret

00004248 <initialise_rc_servo>:
 */ 

#include "servoController.h"

void initialise_rc_servo(){
	rc_servo_initialise();
    4248:	65 c7       	rjmp	.+3786   	; 0x5114 <rc_servo_initialise>
    424a:	08 95       	ret

0000424c <servo_set_position>:
}
void servo_set_position(uint8_t servoNo, int8_t percent){
	rc_servo_setPosition(servoNo, percent);
    424c:	4b c7       	rjmp	.+3734   	; 0x50e4 <rc_servo_setPosition>
    424e:	08 95       	ret

00004250 <_lora_setup>:
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}

static void _lora_setup(void)
{
    4250:	0f 93       	push	r16
    4252:	1f 93       	push	r17
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
    425c:	64 97       	sbiw	r28, 0x14	; 20
    425e:	0f b6       	in	r0, 0x3f	; 63
    4260:	f8 94       	cli
    4262:	de bf       	out	0x3e, r29	; 62
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    426e:	77 d3       	rcall	.+1774   	; 0x495e <lora_driver_rn2483FactoryReset>
    4270:	f3 d5       	rcall	.+3046   	; 0x4e58 <lora_driver_mapReturnCodeToText>
    4272:	9f 93       	push	r25
    4274:	8f 93       	push	r24
    4276:	8f e7       	ldi	r24, 0x7F	; 127
    4278:	95 e0       	ldi	r25, 0x05	; 5
    427a:	9f 93       	push	r25
    427c:	8f 93       	push	r24
    427e:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    4282:	eb d4       	rcall	.+2518   	; 0x4c5a <lora_driver_configureToEu868>
    4284:	e9 d5       	rcall	.+3026   	; 0x4e58 <lora_driver_mapReturnCodeToText>
    4286:	9f 93       	push	r25
    4288:	8f 93       	push	r24
    428a:	82 e9       	ldi	r24, 0x92	; 146
    428c:	95 e0       	ldi	r25, 0x05	; 5
    428e:	9f 93       	push	r25
    4290:	8f 93       	push	r24
    4292:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
    4296:	8e 01       	movw	r16, r28
    4298:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    429a:	1f 4f       	sbci	r17, 0xFF	; 255
    429c:	c8 01       	movw	r24, r16
    429e:	71 d3       	rcall	.+1762   	; 0x4982 <lora_driver_getRn2483Hweui>
    42a0:	db d5       	rcall	.+2998   	; 0x4e58 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    42a2:	1f 93       	push	r17
    42a4:	0f 93       	push	r16
    42a6:	9f 93       	push	r25
    42a8:	8f 93       	push	r24
    42aa:	8b ea       	ldi	r24, 0xAB	; 171
    42ac:	95 e0       	ldi	r25, 0x05	; 5
    42ae:	9f 93       	push	r25
    42b0:	8f 93       	push	r24
    42b2:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    42b6:	c8 01       	movw	r24, r16
    42b8:	80 d3       	rcall	.+1792   	; 0x49ba <lora_driver_setDeviceIdentifier>
    42ba:	ce d5       	rcall	.+2972   	; 0x4e58 <lora_driver_mapReturnCodeToText>
    42bc:	9f 93       	push	r25
    42be:	8f 93       	push	r24
    42c0:	1f 93       	push	r17
    42c2:	0f 93       	push	r16
    42c4:	8f eb       	ldi	r24, 0xBF	; 191
    42c6:	95 e0       	ldi	r25, 0x05	; 5
    42c8:	9f 93       	push	r25
    42ca:	8f 93       	push	r24
    42cc:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    42d0:	a8 01       	movw	r20, r16
    42d2:	64 ed       	ldi	r22, 0xD4	; 212
    42d4:	75 e0       	ldi	r23, 0x05	; 5
    42d6:	85 ef       	ldi	r24, 0xF5	; 245
    42d8:	95 e0       	ldi	r25, 0x05	; 5
    42da:	9d d5       	rcall	.+2874   	; 0x4e16 <lora_driver_setOtaaIdentity>
    42dc:	bd d5       	rcall	.+2938   	; 0x4e58 <lora_driver_mapReturnCodeToText>
    42de:	9f 93       	push	r25
    42e0:	8f 93       	push	r24
    42e2:	1f 93       	push	r17
    42e4:	0f 93       	push	r16
    42e6:	84 ed       	ldi	r24, 0xD4	; 212
    42e8:	95 e0       	ldi	r25, 0x05	; 5
    42ea:	9f 93       	push	r25
    42ec:	8f 93       	push	r24
    42ee:	85 ef       	ldi	r24, 0xF5	; 245
    42f0:	95 e0       	ldi	r25, 0x05	; 5
    42f2:	9f 93       	push	r25
    42f4:	8f 93       	push	r24
    42f6:	86 e0       	ldi	r24, 0x06	; 6
    42f8:	96 e0       	ldi	r25, 0x06	; 6
    42fa:	9f 93       	push	r25
    42fc:	8f 93       	push	r24
    42fe:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    4302:	8e d3       	rcall	.+1820   	; 0x4a20 <lora_driver_saveMac>
    4304:	a9 d5       	rcall	.+2898   	; 0x4e58 <lora_driver_mapReturnCodeToText>
    4306:	9f 93       	push	r25
    4308:	8f 93       	push	r24
    430a:	8c e3       	ldi	r24, 0x3C	; 60
    430c:	96 e0       	ldi	r25, 0x06	; 6
    430e:	9f 93       	push	r25
    4310:	8f 93       	push	r24
    4312:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    4316:	0f b6       	in	r0, 0x3f	; 63
    4318:	f8 94       	cli
    431a:	de bf       	out	0x3e, r29	; 62
    431c:	0f be       	out	0x3f, r0	; 63
    431e:	cd bf       	out	0x3d, r28	; 61
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	78 d4       	rcall	.+2288   	; 0x4c14 <lora_driver_setAdaptiveDataRate>
    4324:	99 d5       	rcall	.+2866   	; 0x4e58 <lora_driver_mapReturnCodeToText>
    4326:	9f 93       	push	r25
    4328:	8f 93       	push	r24
    432a:	8b e4       	ldi	r24, 0x4B	; 75
    432c:	96 e0       	ldi	r25, 0x06	; 6
    432e:	9f 93       	push	r25
    4330:	8f 93       	push	r24
    4332:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    4336:	84 ef       	ldi	r24, 0xF4	; 244
    4338:	91 e0       	ldi	r25, 0x01	; 1
    433a:	77 d4       	rcall	.+2286   	; 0x4c2a <lora_driver_setReceiveDelay>
    433c:	8d d5       	rcall	.+2842   	; 0x4e58 <lora_driver_mapReturnCodeToText>
    433e:	9f 93       	push	r25
    4340:	8f 93       	push	r24
    4342:	81 e0       	ldi	r24, 0x01	; 1
    4344:	8f 93       	push	r24
    4346:	84 ef       	ldi	r24, 0xF4	; 244
    4348:	8f 93       	push	r24
    434a:	8c e6       	ldi	r24, 0x6C	; 108
    434c:	96 e0       	ldi	r25, 0x06	; 6
    434e:	9f 93       	push	r25
    4350:	8f 93       	push	r24
    4352:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	f8 94       	cli
    435a:	de bf       	out	0x3e, r29	; 62
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    4360:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	63 d3       	rcall	.+1734   	; 0x4a2c <lora_driver_join>
    4366:	08 2f       	mov	r16, r24
    4368:	77 d5       	rcall	.+2798   	; 0x4e58 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    436a:	9f 93       	push	r25
    436c:	8f 93       	push	r24
    436e:	1f 92       	push	r1
    4370:	1f 93       	push	r17
    4372:	8c e8       	ldi	r24, 0x8C	; 140
    4374:	96 e0       	ldi	r25, 0x06	; 6
    4376:	9f 93       	push	r25
    4378:	8f 93       	push	r24
    437a:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    4382:	0f 90       	pop	r0
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	08 30       	cpi	r16, 0x08	; 8
    438c:	59 f0       	breq	.+22     	; 0x43a4 <_lora_setup+0x154>
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    4394:	66 e3       	ldi	r22, 0x36	; 54
    4396:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	0e 94 a7 14 	call	0x294e	; 0x294e <vTaskDelay>
    43a0:	11 50       	subi	r17, 0x01	; 1
    43a2:	f9 f6       	brne	.-66     	; 0x4362 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    43a4:	08 30       	cpi	r16, 0x08	; 8
    43a6:	21 f4       	brne	.+8      	; 0x43b0 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    43ae:	09 c0       	rjmp	.+18     	; 0x43c2 <_lora_setup+0x172>
    43b0:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    43b2:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    43b6:	80 e0       	ldi	r24, 0x00	; 0
    43b8:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    43bc:	0e 94 fa 07 	call	0xff4	; 0xff4 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    43c0:	fd cf       	rjmp	.-6      	; 0x43bc <_lora_setup+0x16c>
    43c2:	64 96       	adiw	r28, 0x14	; 20
    43c4:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    43c6:	f8 94       	cli
    43c8:	de bf       	out	0x3e, r29	; 62
    43ca:	0f be       	out	0x3f, r0	; 63
    43cc:	cd bf       	out	0x3d, r28	; 61
    43ce:	df 91       	pop	r29
    43d0:	cf 91       	pop	r28
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	08 95       	ret

000043d8 <lora_uplink_handler_task>:
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	b3 d2       	rcall	.+1382   	; 0x4942 <lora_driver_resetRn2483>

void lora_uplink_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    43dc:	62 e0       	ldi	r22, 0x02	; 2
    43de:	70 e0       	ldi	r23, 0x00	; 0
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	0e 94 a7 14 	call	0x294e	; 0x294e <vTaskDelay>
	lora_driver_resetRn2483(0);
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	ab d2       	rcall	.+1366   	; 0x4942 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    43ec:	66 e9       	ldi	r22, 0x96	; 150
    43ee:	70 e0       	ldi	r23, 0x00	; 0
    43f0:	80 e0       	ldi	r24, 0x00	; 0
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	0e 94 a7 14 	call	0x294e	; 0x294e <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    43f8:	5d d2       	rcall	.+1210   	; 0x48b4 <lora_driver_flushBuffers>

	_lora_setup();
    43fa:	2a df       	rcall	.-428    	; 0x4250 <_lora_setup>
    43fc:	0f ef       	ldi	r16, 0xFF	; 255
			float temp;
			uint8_t bytes[sizeof(float)];
		} holder;
		
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    43fe:	1f ef       	ldi	r17, 0xFF	; 255
    4400:	98 01       	movw	r18, r16
    4402:	46 e1       	ldi	r20, 0x16	; 22
    4404:	50 e0       	ldi	r21, 0x00	; 0
    4406:	69 ec       	ldi	r22, 0xC9	; 201
    4408:	78 e1       	ldi	r23, 0x18	; 24
    440a:	80 91 21 1a 	lds	r24, 0x1A21	; 0x801a21 <uplinkMessageBufferHandle>
    440e:	90 91 22 1a 	lds	r25, 0x1A22	; 0x801a22 <uplinkMessageBufferHandle+0x1>
    4412:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xStreamBufferReceive>
    4416:	88 23       	and	r24, r24
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    4418:	89 f3       	breq	.-30     	; 0x43fc <lora_uplink_handler_task+0x24>
    441a:	e9 ec       	ldi	r30, 0xC9	; 201
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    441c:	f8 e1       	ldi	r31, 0x18	; 24
    441e:	82 81       	ldd	r24, Z+2	; 0x02
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	98 2f       	mov	r25, r24
    4424:	88 27       	eor	r24, r24
    4426:	23 81       	ldd	r18, Z+3	; 0x03
    4428:	82 2b       	or	r24, r18
    442a:	24 81       	ldd	r18, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	32 2f       	mov	r19, r18
    4430:	22 27       	eor	r18, r18
    4432:	45 81       	ldd	r20, Z+5	; 0x05
    4434:	24 2b       	or	r18, r20
    4436:	46 81       	ldd	r20, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    4438:	50 e0       	ldi	r21, 0x00	; 0
    443a:	54 2f       	mov	r21, r20
    443c:	44 27       	eor	r20, r20
    443e:	67 81       	ldd	r22, Z+7	; 0x07
    4440:	46 2b       	or	r20, r22
    4442:	60 85       	ldd	r22, Z+8	; 0x08
			holder.bytes[0] = _uplink_payload.bytes[6];
    4444:	71 85       	ldd	r23, Z+9	; 0x09
			holder.bytes[1] = _uplink_payload.bytes[7];
    4446:	a2 85       	ldd	r26, Z+10	; 0x0a
			holder.bytes[2] = _uplink_payload.bytes[8];
    4448:	b3 85       	ldd	r27, Z+11	; 0x0b
			holder.bytes[3] = _uplink_payload.bytes[9];
    444a:	e4 85       	ldd	r30, Z+12	; 0x0c
			status = _uplink_payload.bytes[10];
    444c:	1f 92       	push	r1
// 			printf("Temperature sent: %d\n", tem);
// 			printf("Humidity sent: %d\n", hum);
// 			printf("CO2 sent: %d\n", co2);
// 			printf("Light sent: %f\n", holder.temp);
// 			printf("Status sent: %d\n", status);
			printf("UPLINK SENT: temp %d C, hum %d%%, CO2 %dppm, light %5.2flux, status %d\n", tem, hum, co2, holder.temp, status);
    444e:	ef 93       	push	r30
    4450:	bf 93       	push	r27
    4452:	af 93       	push	r26
    4454:	7f 93       	push	r23
    4456:	6f 93       	push	r22
    4458:	5f 93       	push	r21
    445a:	4f 93       	push	r20
    445c:	3f 93       	push	r19
    445e:	2f 93       	push	r18
    4460:	9f 93       	push	r25
    4462:	8f 93       	push	r24
    4464:	8c ea       	ldi	r24, 0xAC	; 172
    4466:	96 e0       	ldi	r25, 0x06	; 6
    4468:	9f 93       	push	r25
    446a:	8f 93       	push	r24
    446c:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
    4470:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    4472:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <status_leds_shortPuls>
// 			sizeof(fakePayload),
// 			portMAX_DELAY);
			//---------------------------------------------
			
			
 			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    4476:	69 ec       	ldi	r22, 0xC9	; 201
    4478:	78 e1       	ldi	r23, 0x18	; 24
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	00 d3       	rcall	.+1536   	; 0x4a7e <lora_driver_sendUploadMessage>
    447e:	ec d4       	rcall	.+2520   	; 0x4e58 <lora_driver_mapReturnCodeToText>
    4480:	9f 93       	push	r25
    4482:	8f 93       	push	r24
    4484:	84 ef       	ldi	r24, 0xF4	; 244
    4486:	96 e0       	ldi	r25, 0x06	; 6
    4488:	9f 93       	push	r25
    448a:	8f 93       	push	r24
    448c:	0e 94 23 3a 	call	0x7446	; 0x7446 <printf>
    4490:	8d b7       	in	r24, 0x3d	; 61
    4492:	9e b7       	in	r25, 0x3e	; 62
    4494:	42 96       	adiw	r24, 0x12	; 18
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	9e bf       	out	0x3e, r25	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	8d bf       	out	0x3d, r24	; 61
    44a0:	ad cf       	rjmp	.-166    	; 0x43fc <lora_uplink_handler_task+0x24>

000044a2 <create_lora_uplink_handler_task>:
			
		}
	}
    44a2:	ef 92       	push	r14

void lora_uplink_handler_task(void *pvParameters);

static lora_driver_payload_t _uplink_payload;

void create_lora_uplink_handler_task(UBaseType_t priority){
    44a4:	ff 92       	push	r15
    44a6:	0f 93       	push	r16
	xTaskCreate(
    44a8:	e1 2c       	mov	r14, r1
    44aa:	f1 2c       	mov	r15, r1
    44ac:	08 2f       	mov	r16, r24
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	48 e8       	ldi	r20, 0x88	; 136
    44b4:	51 e0       	ldi	r21, 0x01	; 1
    44b6:	69 e0       	ldi	r22, 0x09	; 9
    44b8:	77 e0       	ldi	r23, 0x07	; 7
    44ba:	8c ee       	ldi	r24, 0xEC	; 236
    44bc:	91 e2       	ldi	r25, 0x21	; 33
    44be:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskCreate>
	,  "LRHandUplink"  
	,  configMINIMAL_STACK_SIZE+200  
	,  NULL
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}
    44c2:	0f 91       	pop	r16
    44c4:	ff 90       	pop	r15
    44c6:	ef 90       	pop	r14
    44c8:	08 95       	ret

000044ca <create_all_tasks>:
#include "downlinkHandler.h"
#include "servoController.h"


void create_all_tasks(){
	create_lora_uplink_handler_task(4);
    44ca:	84 e0       	ldi	r24, 0x04	; 4
    44cc:	ea df       	rcall	.-44     	; 0x44a2 <create_lora_uplink_handler_task>
	create_lora_downlink_handler_task(4);
    44ce:	84 e0       	ldi	r24, 0x04	; 4
    44d0:	0e 94 33 03 	call	0x666	; 0x666 <create_lora_downlink_handler_task>
	create_main_application_task(3);
    44d4:	83 e0       	ldi	r24, 0x03	; 3
    44d6:	0e 94 05 02 	call	0x40a	; 0x40a <create_main_application_task>
	create_CO2_sensor_task(1);
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	53 dd       	rcall	.-1370   	; 0x3f84 <create_CO2_sensor_task>
	create_TempHum_sensor_task(1);
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	f9 dd       	rcall	.-1038   	; 0x40d4 <create_TempHum_sensor_task>
 	create_light_sensor_task(2);
    44e2:	82 e0       	ldi	r24, 0x02	; 2
    44e4:	d6 dd       	rcall	.-1108   	; 0x4092 <create_light_sensor_task>
    44e6:	82 e0       	ldi	r24, 0x02	; 2
	create_actions_controller_task(2);
    44e8:	0c 94 47 03 	jmp	0x68e	; 0x68e <create_actions_controller_task>
    44ec:	08 95       	ret

000044ee <initializeSystem>:
    44ee:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    44f0:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    44f4:	85 e0       	ldi	r24, 0x05	; 5
    44f6:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <status_leds_initialise>

	initialize_event_groups();
    44fa:	59 de       	rcall	.-846    	; 0x41ae <initialize_event_groups>
	initialize_message_buffers();
    44fc:	65 de       	rcall	.-822    	; 0x41c8 <initialize_message_buffers>
	initialize_semaphore();
    44fe:	87 de       	rcall	.-754    	; 0x420e <initialize_semaphore>
    4500:	a3 de       	rcall	.-698    	; 0x4248 <initialise_rc_servo>
	initialise_rc_servo();
    4502:	60 91 23 1a 	lds	r22, 0x1A23	; 0x801a23 <downlinkMessageBufferHandle>
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    4506:	70 91 24 1a 	lds	r23, 0x1A24	; 0x801a24 <downlinkMessageBufferHandle+0x1>
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	da d1       	rcall	.+948    	; 0x48c2 <lora_driver_initialise>
    450e:	dd cf       	rjmp	.-70     	; 0x44ca <create_all_tasks>
	create_all_tasks();
    4510:	08 95       	ret

00004512 <main>:
    4512:	ed df       	rcall	.-38     	; 0x44ee <initializeSystem>
    4514:	86 e1       	ldi	r24, 0x16	; 22

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    4516:	97 e0       	ldi	r25, 0x07	; 7
    4518:	0e 94 37 3a 	call	0x746e	; 0x746e <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    451c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <vTaskStartScheduler>
    4520:	ff cf       	rjmp	.-2      	; 0x4520 <main+0xe>

00004522 <_hihTwiCallback>:
    4522:	65 30       	cpi	r22, 0x05	; 5
    4524:	f1 f4       	brne	.+60     	; 0x4562 <_hihTwiCallback+0x40>
    4526:	fa 01       	movw	r30, r20
    4528:	80 81       	ld	r24, Z
    452a:	8f 73       	andi	r24, 0x3F	; 63
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	98 2f       	mov	r25, r24
    4530:	88 27       	eor	r24, r24
    4532:	21 81       	ldd	r18, Z+1	; 0x01
    4534:	82 2b       	or	r24, r18
    4536:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    453a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    453e:	82 81       	ldd	r24, Z+2	; 0x02
    4540:	f0 e4       	ldi	r31, 0x40	; 64
    4542:	8f 9f       	mul	r24, r31
    4544:	c0 01       	movw	r24, r0
    4546:	11 24       	eor	r1, r1
    4548:	fa 01       	movw	r30, r20
    454a:	23 81       	ldd	r18, Z+3	; 0x03
    454c:	26 95       	lsr	r18
    454e:	26 95       	lsr	r18
    4550:	82 2b       	or	r24, r18
    4552:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4556:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	80 93 df 18 	sts	0x18DF, r24	; 0x8018df <_measuringIsReady>
    4560:	08 95       	ret
    4562:	64 30       	cpi	r22, 0x04	; 4
    4564:	51 f0       	breq	.+20     	; 0x457a <_hihTwiCallback+0x58>
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	90 e4       	ldi	r25, 0x40	; 64
    456a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    456e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4572:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4576:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    457a:	08 95       	ret

0000457c <hih8120_initialise>:
    457c:	0f 93       	push	r16
    457e:	1f 93       	push	r17
    4580:	01 e9       	ldi	r16, 0x91	; 145
    4582:	12 e2       	ldi	r17, 0x22	; 34
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	34 e2       	ldi	r19, 0x24	; 36
    4588:	44 ef       	ldi	r20, 0xF4	; 244
    458a:	50 e0       	ldi	r21, 0x00	; 0
    458c:	60 e0       	ldi	r22, 0x00	; 0
    458e:	87 e2       	ldi	r24, 0x27	; 39
    4590:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <twiCreate>
    4594:	90 93 e1 18 	sts	0x18E1, r25	; 0x8018e1 <_hih8120Handler+0x1>
    4598:	80 93 e0 18 	sts	0x18E0, r24	; 0x8018e0 <_hih8120Handler>
    459c:	21 e0       	ldi	r18, 0x01	; 1
    459e:	89 2b       	or	r24, r25
    45a0:	09 f0       	breq	.+2      	; 0x45a4 <hih8120_initialise+0x28>
    45a2:	20 e0       	ldi	r18, 0x00	; 0
    45a4:	82 2f       	mov	r24, r18
    45a6:	1f 91       	pop	r17
    45a8:	0f 91       	pop	r16
    45aa:	08 95       	ret

000045ac <hih8120_wakeup>:
    45ac:	80 91 e0 18 	lds	r24, 0x18E0	; 0x8018e0 <_hih8120Handler>
    45b0:	90 91 e1 18 	lds	r25, 0x18E1	; 0x8018e1 <_hih8120Handler+0x1>
    45b4:	00 97       	sbiw	r24, 0x00	; 0
    45b6:	59 f0       	breq	.+22     	; 0x45ce <hih8120_wakeup+0x22>
    45b8:	40 e0       	ldi	r20, 0x00	; 0
    45ba:	60 e0       	ldi	r22, 0x00	; 0
    45bc:	70 e0       	ldi	r23, 0x00	; 0
    45be:	0e 94 1c 30 	call	0x6038	; 0x6038 <twiTransmit>
    45c2:	84 30       	cpi	r24, 0x04	; 4
    45c4:	31 f4       	brne	.+12     	; 0x45d2 <hih8120_wakeup+0x26>
    45c6:	10 92 df 18 	sts	0x18DF, r1	; 0x8018df <_measuringIsReady>
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	08 95       	ret
    45ce:	82 e0       	ldi	r24, 0x02	; 2
    45d0:	08 95       	ret
    45d2:	83 e0       	ldi	r24, 0x03	; 3
    45d4:	08 95       	ret

000045d6 <hih8120_measure>:
    45d6:	80 91 e0 18 	lds	r24, 0x18E0	; 0x8018e0 <_hih8120Handler>
    45da:	90 91 e1 18 	lds	r25, 0x18E1	; 0x8018e1 <_hih8120Handler+0x1>
    45de:	00 97       	sbiw	r24, 0x00	; 0
    45e0:	39 f0       	breq	.+14     	; 0x45f0 <hih8120_measure+0x1a>
    45e2:	64 e0       	ldi	r22, 0x04	; 4
    45e4:	0e 94 68 30 	call	0x60d0	; 0x60d0 <twiReceive>
    45e8:	85 30       	cpi	r24, 0x05	; 5
    45ea:	21 f0       	breq	.+8      	; 0x45f4 <hih8120_measure+0x1e>
    45ec:	83 e0       	ldi	r24, 0x03	; 3
    45ee:	08 95       	ret
    45f0:	82 e0       	ldi	r24, 0x02	; 2
    45f2:	08 95       	ret
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	08 95       	ret

000045f8 <hih8120_getHumidity>:
    45f8:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    45fc:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	0e 94 fc 35 	call	0x6bf8	; 0x6bf8 <__floatunsisf>
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	48 ec       	ldi	r20, 0xC8	; 200
    460e:	52 e4       	ldi	r21, 0x42	; 66
    4610:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <__mulsf3>
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	38 ef       	ldi	r19, 0xF8	; 248
    4618:	4f e7       	ldi	r20, 0x7F	; 127
    461a:	56 e4       	ldi	r21, 0x46	; 70
    461c:	0c 94 63 35 	jmp	0x6ac6	; 0x6ac6 <__divsf3>
    4620:	08 95       	ret

00004622 <hih8120_getHumidityPercent_x10>:
    4622:	ea df       	rcall	.-44     	; 0x45f8 <hih8120_getHumidity>
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	40 e2       	ldi	r20, 0x20	; 32
    462a:	51 e4       	ldi	r21, 0x41	; 65
    462c:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <__mulsf3>
    4630:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <__fixunssfsi>
    4634:	cb 01       	movw	r24, r22
    4636:	08 95       	ret

00004638 <hih8120_getTemperature>:
    4638:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    463c:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4640:	80 e0       	ldi	r24, 0x00	; 0
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	0e 94 fc 35 	call	0x6bf8	; 0x6bf8 <__floatunsisf>
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	45 e2       	ldi	r20, 0x25	; 37
    464e:	53 e4       	ldi	r21, 0x43	; 67
    4650:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <__mulsf3>
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	38 ef       	ldi	r19, 0xF8	; 248
    4658:	4f e7       	ldi	r20, 0x7F	; 127
    465a:	56 e4       	ldi	r21, 0x46	; 70
    465c:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__divsf3>
    4660:	20 e0       	ldi	r18, 0x00	; 0
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	40 e2       	ldi	r20, 0x20	; 32
    4666:	52 e4       	ldi	r21, 0x42	; 66
    4668:	0c 94 fe 34 	jmp	0x69fc	; 0x69fc <__subsf3>
    466c:	08 95       	ret

0000466e <hih8120_getTemperature_x10>:
    466e:	e4 df       	rcall	.-56     	; 0x4638 <hih8120_getTemperature>
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	40 e2       	ldi	r20, 0x20	; 32
    4676:	51 e4       	ldi	r21, 0x41	; 65
    4678:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <__mulsf3>
    467c:	0e 94 cb 35 	call	0x6b96	; 0x6b96 <__fixsfsi>
    4680:	cb 01       	movw	r24, r22
    4682:	08 95       	ret

00004684 <_serialCallBack>:
    4684:	0f 93       	push	r16
    4686:	1f 93       	push	r17
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	1f 92       	push	r1
    468e:	1f 92       	push	r1
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
    4694:	8c 01       	movw	r16, r24
    4696:	19 82       	std	Y+1, r1	; 0x01
    4698:	2d c0       	rjmp	.+90     	; 0x46f4 <_serialCallBack+0x70>
    469a:	e0 91 19 19 	lds	r30, 0x1919	; 0x801919 <rec_buf_inp.2878>
    469e:	ec 32       	cpi	r30, 0x2C	; 44
    46a0:	50 f4       	brcc	.+20     	; 0x46b6 <_serialCallBack+0x32>
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	8e 0f       	add	r24, r30
    46a6:	80 93 19 19 	sts	0x1919, r24	; 0x801919 <rec_buf_inp.2878>
    46aa:	f0 e0       	ldi	r31, 0x00	; 0
    46ac:	e5 5b       	subi	r30, 0xB5	; 181
    46ae:	f6 4e       	sbci	r31, 0xE6	; 230
    46b0:	8a 81       	ldd	r24, Y+2	; 0x02
    46b2:	80 83       	st	Z, r24
    46b4:	02 c0       	rjmp	.+4      	; 0x46ba <_serialCallBack+0x36>
    46b6:	10 92 19 19 	sts	0x1919, r1	; 0x801919 <rec_buf_inp.2878>
    46ba:	8a 81       	ldd	r24, Y+2	; 0x02
    46bc:	8a 30       	cpi	r24, 0x0A	; 10
    46be:	d1 f4       	brne	.+52     	; 0x46f4 <_serialCallBack+0x70>
    46c0:	40 91 19 19 	lds	r20, 0x1919	; 0x801919 <rec_buf_inp.2878>
    46c4:	50 e0       	ldi	r21, 0x00	; 0
    46c6:	fa 01       	movw	r30, r20
    46c8:	e7 5b       	subi	r30, 0xB7	; 183
    46ca:	f6 4e       	sbci	r31, 0xE6	; 230
    46cc:	10 82       	st	Z, r1
    46ce:	41 50       	subi	r20, 0x01	; 1
    46d0:	51 09       	sbc	r21, r1
    46d2:	9e 01       	movw	r18, r28
    46d4:	2f 5f       	subi	r18, 0xFF	; 255
    46d6:	3f 4f       	sbci	r19, 0xFF	; 255
    46d8:	6b e4       	ldi	r22, 0x4B	; 75
    46da:	79 e1       	ldi	r23, 0x19	; 25
    46dc:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serialReplyBufferHandle>
    46e0:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serialReplyBufferHandle+0x1>
    46e4:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xStreamBufferSendFromISR>
    46e8:	89 81       	ldd	r24, Y+1	; 0x01
    46ea:	81 11       	cpse	r24, r1
    46ec:	0e 94 fa 07 	call	0xff4	; 0xff4 <vPortYield>
    46f0:	10 92 19 19 	sts	0x1919, r1	; 0x801919 <rec_buf_inp.2878>
    46f4:	be 01       	movw	r22, r28
    46f6:	6e 5f       	subi	r22, 0xFE	; 254
    46f8:	7f 4f       	sbci	r23, 0xFF	; 255
    46fa:	c8 01       	movw	r24, r16
    46fc:	4f d6       	rcall	.+3230   	; 0x539c <serial_getByte>
    46fe:	88 23       	and	r24, r24
    4700:	61 f2       	breq	.-104    	; 0x469a <_serialCallBack+0x16>
    4702:	0f 90       	pop	r0
    4704:	0f 90       	pop	r0
    4706:	df 91       	pop	r29
    4708:	cf 91       	pop	r28
    470a:	1f 91       	pop	r17
    470c:	0f 91       	pop	r16
    470e:	08 95       	ret

00004710 <_uploadMessage>:
    4710:	0f 93       	push	r16
    4712:	1f 93       	push	r17
    4714:	cf 93       	push	r28
    4716:	df 93       	push	r29
    4718:	8c 01       	movw	r16, r24
    471a:	eb 01       	movw	r28, r22
    471c:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serialReplyBufferHandle>
    4720:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serialReplyBufferHandle+0x1>
    4724:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <xStreamBufferReset>
    4728:	b8 01       	movw	r22, r16
    472a:	82 ee       	ldi	r24, 0xE2	; 226
    472c:	98 e1       	ldi	r25, 0x18	; 24
    472e:	0e 94 bd 39 	call	0x737a	; 0x737a <strcpy>
    4732:	20 97       	sbiw	r28, 0x00	; 0
    4734:	79 f0       	breq	.+30     	; 0x4754 <_uploadMessage+0x44>
    4736:	e2 ee       	ldi	r30, 0xE2	; 226
    4738:	f8 e1       	ldi	r31, 0x18	; 24
    473a:	01 90       	ld	r0, Z+
    473c:	00 20       	and	r0, r0
    473e:	e9 f7       	brne	.-6      	; 0x473a <_uploadMessage+0x2a>
    4740:	31 97       	sbiw	r30, 0x01	; 1
    4742:	80 e2       	ldi	r24, 0x20	; 32
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	91 83       	std	Z+1, r25	; 0x01
    4748:	80 83       	st	Z, r24
    474a:	be 01       	movw	r22, r28
    474c:	82 ee       	ldi	r24, 0xE2	; 226
    474e:	98 e1       	ldi	r25, 0x18	; 24
    4750:	0e 94 b2 39 	call	0x7364	; 0x7364 <strcat>
    4754:	e2 ee       	ldi	r30, 0xE2	; 226
    4756:	f8 e1       	ldi	r31, 0x18	; 24
    4758:	df 01       	movw	r26, r30
    475a:	0d 90       	ld	r0, X+
    475c:	00 20       	and	r0, r0
    475e:	e9 f7       	brne	.-6      	; 0x475a <_uploadMessage+0x4a>
    4760:	11 97       	sbiw	r26, 0x01	; 1
    4762:	8d e0       	ldi	r24, 0x0D	; 13
    4764:	9a e0       	ldi	r25, 0x0A	; 10
    4766:	11 96       	adiw	r26, 0x01	; 1
    4768:	9c 93       	st	X, r25
    476a:	8e 93       	st	-X, r24
    476c:	12 96       	adiw	r26, 0x02	; 2
    476e:	1c 92       	st	X, r1
    4770:	01 90       	ld	r0, Z+
    4772:	00 20       	and	r0, r0
    4774:	e9 f7       	brne	.-6      	; 0x4770 <_uploadMessage+0x60>
    4776:	31 97       	sbiw	r30, 0x01	; 1
    4778:	e2 5e       	subi	r30, 0xE2	; 226
    477a:	f8 41       	sbci	r31, 0x18	; 24
    477c:	ae 2f       	mov	r26, r30
    477e:	82 ee       	ldi	r24, 0xE2	; 226
    4780:	98 e1       	ldi	r25, 0x18	; 24
    4782:	ac 01       	movw	r20, r24
    4784:	6a 2f       	mov	r22, r26
    4786:	80 91 1e 19 	lds	r24, 0x191E	; 0x80191e <_rn2483_serial>
    478a:	90 91 1f 19 	lds	r25, 0x191F	; 0x80191f <_rn2483_serial+0x1>
    478e:	b1 d5       	rcall	.+2914   	; 0x52f2 <serial_sendBytes>
    4790:	81 11       	cpse	r24, r1
    4792:	11 c0       	rjmp	.+34     	; 0x47b6 <_uploadMessage+0xa6>
    4794:	08 e2       	ldi	r16, 0x28	; 40
    4796:	15 e0       	ldi	r17, 0x05	; 5
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	4d e2       	ldi	r20, 0x2D	; 45
    479e:	50 e0       	ldi	r21, 0x00	; 0
    47a0:	65 ea       	ldi	r22, 0xA5	; 165
    47a2:	79 e1       	ldi	r23, 0x19	; 25
    47a4:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serialReplyBufferHandle>
    47a8:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serialReplyBufferHandle+0x1>
    47ac:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xStreamBufferReceive>
    47b0:	85 ea       	ldi	r24, 0xA5	; 165
    47b2:	99 e1       	ldi	r25, 0x19	; 25
    47b4:	02 c0       	rjmp	.+4      	; 0x47ba <_uploadMessage+0xaa>
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	1f 91       	pop	r17
    47c0:	0f 91       	pop	r16
    47c2:	08 95       	ret

000047c4 <_reply2ReturnCode>:
    47c4:	2f 92       	push	r2
    47c6:	3f 92       	push	r3
    47c8:	4f 92       	push	r4
    47ca:	5f 92       	push	r5
    47cc:	6f 92       	push	r6
    47ce:	7f 92       	push	r7
    47d0:	8f 92       	push	r8
    47d2:	9f 92       	push	r9
    47d4:	af 92       	push	r10
    47d6:	bf 92       	push	r11
    47d8:	cf 92       	push	r12
    47da:	df 92       	push	r13
    47dc:	ef 92       	push	r14
    47de:	ff 92       	push	r15
    47e0:	0f 93       	push	r16
    47e2:	1f 93       	push	r17
    47e4:	cf 93       	push	r28
    47e6:	df 93       	push	r29
    47e8:	5c 01       	movw	r10, r24
    47ea:	fc 01       	movw	r30, r24
    47ec:	01 90       	ld	r0, Z+
    47ee:	00 20       	and	r0, r0
    47f0:	e9 f7       	brne	.-6      	; 0x47ec <_reply2ReturnCode+0x28>
    47f2:	31 97       	sbiw	r30, 0x01	; 1
    47f4:	6f 01       	movw	r12, r30
    47f6:	c8 1a       	sub	r12, r24
    47f8:	d9 0a       	sbc	r13, r25
    47fa:	5c 2c       	mov	r5, r12
    47fc:	0f 2e       	mov	r0, r31
    47fe:	fc eb       	ldi	r31, 0xBC	; 188
    4800:	8f 2e       	mov	r8, r31
    4802:	f9 e0       	ldi	r31, 0x09	; 9
    4804:	9f 2e       	mov	r9, r31
    4806:	f0 2d       	mov	r31, r0
    4808:	e1 2c       	mov	r14, r1
    480a:	f1 2c       	mov	r15, r1
    480c:	4c 2c       	mov	r4, r12
    480e:	37 01       	movw	r6, r14
    4810:	f4 01       	movw	r30, r8
    4812:	01 81       	ldd	r16, Z+1	; 0x01
    4814:	12 81       	ldd	r17, Z+2	; 0x02
    4816:	e8 01       	movw	r28, r16
    4818:	09 90       	ld	r0, Y+
    481a:	00 20       	and	r0, r0
    481c:	e9 f7       	brne	.-6      	; 0x4818 <_reply2ReturnCode+0x54>
    481e:	21 97       	sbiw	r28, 0x01	; 1
    4820:	c0 1b       	sub	r28, r16
    4822:	d1 0b       	sbc	r29, r17
    4824:	3c 2e       	mov	r3, r28
    4826:	f9 e0       	ldi	r31, 0x09	; 9
    4828:	cf 16       	cp	r12, r31
    482a:	d1 04       	cpc	r13, r1
    482c:	58 f0       	brcs	.+22     	; 0x4844 <_reply2ReturnCode+0x80>
    482e:	f4 01       	movw	r30, r8
    4830:	20 80       	ld	r2, Z
    4832:	fe e0       	ldi	r31, 0x0E	; 14
    4834:	2f 12       	cpse	r2, r31
    4836:	06 c0       	rjmp	.+12     	; 0x4844 <_reply2ReturnCode+0x80>
    4838:	b8 01       	movw	r22, r16
    483a:	c5 01       	movw	r24, r10
    483c:	0e 94 8d 39 	call	0x731a	; 0x731a <strcasestr>
    4840:	89 2b       	or	r24, r25
    4842:	09 f5       	brne	.+66     	; 0x4886 <_reply2ReturnCode+0xc2>
    4844:	44 2d       	mov	r20, r4
    4846:	35 14       	cp	r3, r5
    4848:	08 f4       	brcc	.+2      	; 0x484c <_reply2ReturnCode+0x88>
    484a:	4c 2f       	mov	r20, r28
    484c:	50 e0       	ldi	r21, 0x00	; 0
    484e:	b8 01       	movw	r22, r16
    4850:	c5 01       	movw	r24, r10
    4852:	0e 94 c4 39 	call	0x7388	; 0x7388 <strncasecmp>
    4856:	89 2b       	or	r24, r25
    4858:	49 f4       	brne	.+18     	; 0x486c <_reply2ReturnCode+0xa8>
    485a:	f3 01       	movw	r30, r6
    485c:	ee 0f       	add	r30, r30
    485e:	ff 1f       	adc	r31, r31
    4860:	e6 0d       	add	r30, r6
    4862:	f7 1d       	adc	r31, r7
    4864:	e4 54       	subi	r30, 0x44	; 68
    4866:	f6 4f       	sbci	r31, 0xF6	; 246
    4868:	20 80       	ld	r2, Z
    486a:	0d c0       	rjmp	.+26     	; 0x4886 <_reply2ReturnCode+0xc2>
    486c:	8f ef       	ldi	r24, 0xFF	; 255
    486e:	e8 1a       	sub	r14, r24
    4870:	f8 0a       	sbc	r15, r24
    4872:	e3 e0       	ldi	r30, 0x03	; 3
    4874:	8e 0e       	add	r8, r30
    4876:	91 1c       	adc	r9, r1
    4878:	f1 e1       	ldi	r31, 0x11	; 17
    487a:	ef 16       	cp	r14, r31
    487c:	f1 04       	cpc	r15, r1
    487e:	39 f6       	brne	.-114    	; 0x480e <_reply2ReturnCode+0x4a>
    4880:	68 94       	set
    4882:	22 24       	eor	r2, r2
    4884:	24 f8       	bld	r2, 4
    4886:	82 2d       	mov	r24, r2
    4888:	df 91       	pop	r29
    488a:	cf 91       	pop	r28
    488c:	1f 91       	pop	r17
    488e:	0f 91       	pop	r16
    4890:	ff 90       	pop	r15
    4892:	ef 90       	pop	r14
    4894:	df 90       	pop	r13
    4896:	cf 90       	pop	r12
    4898:	bf 90       	pop	r11
    489a:	af 90       	pop	r10
    489c:	9f 90       	pop	r9
    489e:	8f 90       	pop	r8
    48a0:	7f 90       	pop	r7
    48a2:	6f 90       	pop	r6
    48a4:	5f 90       	pop	r5
    48a6:	4f 90       	pop	r4
    48a8:	3f 90       	pop	r3
    48aa:	2f 90       	pop	r2
    48ac:	08 95       	ret

000048ae <_uploadMessageRc>:
    48ae:	30 df       	rcall	.-416    	; 0x4710 <_uploadMessage>
    48b0:	89 cf       	rjmp	.-238    	; 0x47c4 <_reply2ReturnCode>
    48b2:	08 95       	ret

000048b4 <lora_driver_flushBuffers>:
    48b4:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serialReplyBufferHandle>
    48b8:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serialReplyBufferHandle+0x1>
    48bc:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <xStreamBufferReset>
    48c0:	08 95       	ret

000048c2 <lora_driver_initialise>:
    48c2:	8f 92       	push	r8
    48c4:	9f 92       	push	r9
    48c6:	af 92       	push	r10
    48c8:	cf 92       	push	r12
    48ca:	ef 92       	push	r14
    48cc:	0f 93       	push	r16
    48ce:	1f 93       	push	r17
    48d0:	cf 93       	push	r28
    48d2:	c8 2f       	mov	r28, r24
    48d4:	8b 01       	movw	r16, r22
    48d6:	41 e0       	ldi	r20, 0x01	; 1
    48d8:	60 e0       	ldi	r22, 0x00	; 0
    48da:	70 e0       	ldi	r23, 0x00	; 0
    48dc:	88 ec       	ldi	r24, 0xC8	; 200
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <xStreamBufferGenericCreate>
    48e4:	90 93 1d 19 	sts	0x191D, r25	; 0x80191d <_serialReplyBufferHandle+0x1>
    48e8:	80 93 1c 19 	sts	0x191C, r24	; 0x80191c <_serialReplyBufferHandle>
    48ec:	10 93 1b 19 	sts	0x191B, r17	; 0x80191b <_downlinkMessageBuffer+0x1>
    48f0:	00 93 1a 19 	sts	0x191A, r16	; 0x80191a <_downlinkMessageBuffer>
    48f4:	0f 2e       	mov	r0, r31
    48f6:	f2 e4       	ldi	r31, 0x42	; 66
    48f8:	8f 2e       	mov	r8, r31
    48fa:	f3 e2       	ldi	r31, 0x23	; 35
    48fc:	9f 2e       	mov	r9, r31
    48fe:	f0 2d       	mov	r31, r0
    4900:	68 94       	set
    4902:	aa 24       	eor	r10, r10
    4904:	a6 f8       	bld	r10, 6
    4906:	68 94       	set
    4908:	cc 24       	eor	r12, r12
    490a:	c6 f8       	bld	r12, 6
    490c:	e1 2c       	mov	r14, r1
    490e:	00 e0       	ldi	r16, 0x00	; 0
    4910:	23 e0       	ldi	r18, 0x03	; 3
    4912:	40 e0       	ldi	r20, 0x00	; 0
    4914:	51 ee       	ldi	r21, 0xE1	; 225
    4916:	60 e0       	ldi	r22, 0x00	; 0
    4918:	70 e0       	ldi	r23, 0x00	; 0
    491a:	8c 2f       	mov	r24, r28
    491c:	17 d4       	rcall	.+2094   	; 0x514c <serial_create>
    491e:	90 93 1f 19 	sts	0x191F, r25	; 0x80191f <_rn2483_serial+0x1>
    4922:	80 93 1e 19 	sts	0x191E, r24	; 0x80191e <_rn2483_serial>
    4926:	e7 e0       	ldi	r30, 0x07	; 7
    4928:	f1 e0       	ldi	r31, 0x01	; 1
    492a:	80 81       	ld	r24, Z
    492c:	80 61       	ori	r24, 0x10	; 16
    492e:	80 83       	st	Z, r24
    4930:	cf 91       	pop	r28
    4932:	1f 91       	pop	r17
    4934:	0f 91       	pop	r16
    4936:	ef 90       	pop	r14
    4938:	cf 90       	pop	r12
    493a:	af 90       	pop	r10
    493c:	9f 90       	pop	r9
    493e:	8f 90       	pop	r8
    4940:	08 95       	ret

00004942 <lora_driver_resetRn2483>:
    4942:	88 23       	and	r24, r24
    4944:	31 f0       	breq	.+12     	; 0x4952 <lora_driver_resetRn2483+0x10>
    4946:	e8 e0       	ldi	r30, 0x08	; 8
    4948:	f1 e0       	ldi	r31, 0x01	; 1
    494a:	80 81       	ld	r24, Z
    494c:	8f 7e       	andi	r24, 0xEF	; 239
    494e:	80 83       	st	Z, r24
    4950:	08 95       	ret
    4952:	e8 e0       	ldi	r30, 0x08	; 8
    4954:	f1 e0       	ldi	r31, 0x01	; 1
    4956:	80 81       	ld	r24, Z
    4958:	80 61       	ori	r24, 0x10	; 16
    495a:	80 83       	st	Z, r24
    495c:	08 95       	ret

0000495e <lora_driver_rn2483FactoryReset>:
    495e:	60 e0       	ldi	r22, 0x00	; 0
    4960:	70 e0       	ldi	r23, 0x00	; 0
    4962:	87 e4       	ldi	r24, 0x47	; 71
    4964:	97 e0       	ldi	r25, 0x07	; 7
    4966:	d4 de       	rcall	.-600    	; 0x4710 <_uploadMessage>
    4968:	e5 ea       	ldi	r30, 0xA5	; 165
    496a:	f9 e1       	ldi	r31, 0x19	; 25
    496c:	01 90       	ld	r0, Z+
    496e:	00 20       	and	r0, r0
    4970:	e9 f7       	brne	.-6      	; 0x496c <lora_driver_rn2483FactoryReset+0xe>
    4972:	31 97       	sbiw	r30, 0x01	; 1
    4974:	e5 5a       	subi	r30, 0xA5	; 165
    4976:	f9 41       	sbci	r31, 0x19	; 25
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	75 97       	sbiw	r30, 0x15	; 21
    497c:	08 f0       	brcs	.+2      	; 0x4980 <lora_driver_rn2483FactoryReset+0x22>
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	08 95       	ret

00004982 <lora_driver_getRn2483Hweui>:
    4982:	cf 93       	push	r28
    4984:	df 93       	push	r29
    4986:	ec 01       	movw	r28, r24
    4988:	60 e0       	ldi	r22, 0x00	; 0
    498a:	70 e0       	ldi	r23, 0x00	; 0
    498c:	88 e5       	ldi	r24, 0x58	; 88
    498e:	97 e0       	ldi	r25, 0x07	; 7
    4990:	bf de       	rcall	.-642    	; 0x4710 <_uploadMessage>
    4992:	e5 ea       	ldi	r30, 0xA5	; 165
    4994:	f9 e1       	ldi	r31, 0x19	; 25
    4996:	01 90       	ld	r0, Z+
    4998:	00 20       	and	r0, r0
    499a:	e9 f7       	brne	.-6      	; 0x4996 <lora_driver_getRn2483Hweui+0x14>
    499c:	e6 5b       	subi	r30, 0xB6	; 182
    499e:	f9 41       	sbci	r31, 0x19	; 25
    49a0:	39 f4       	brne	.+14     	; 0x49b0 <lora_driver_getRn2483Hweui+0x2e>
    49a2:	65 ea       	ldi	r22, 0xA5	; 165
    49a4:	79 e1       	ldi	r23, 0x19	; 25
    49a6:	ce 01       	movw	r24, r28
    49a8:	0e 94 bd 39 	call	0x737a	; 0x737a <strcpy>
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	02 c0       	rjmp	.+4      	; 0x49b4 <lora_driver_getRn2483Hweui+0x32>
    49b0:	18 82       	st	Y, r1
    49b2:	81 e0       	ldi	r24, 0x01	; 1
    49b4:	df 91       	pop	r29
    49b6:	cf 91       	pop	r28
    49b8:	08 95       	ret

000049ba <lora_driver_setDeviceIdentifier>:
    49ba:	fc 01       	movw	r30, r24
    49bc:	01 90       	ld	r0, Z+
    49be:	00 20       	and	r0, r0
    49c0:	e9 f7       	brne	.-6      	; 0x49bc <lora_driver_setDeviceIdentifier+0x2>
    49c2:	9f 01       	movw	r18, r30
    49c4:	21 51       	subi	r18, 0x11	; 17
    49c6:	31 09       	sbc	r19, r1
    49c8:	28 17       	cp	r18, r24
    49ca:	39 07       	cpc	r19, r25
    49cc:	29 f4       	brne	.+10     	; 0x49d8 <lora_driver_setDeviceIdentifier+0x1e>
    49ce:	bc 01       	movw	r22, r24
    49d0:	86 e8       	ldi	r24, 0x86	; 134
    49d2:	97 e0       	ldi	r25, 0x07	; 7
    49d4:	6c cf       	rjmp	.-296    	; 0x48ae <_uploadMessageRc>
    49d6:	08 95       	ret
    49d8:	89 e0       	ldi	r24, 0x09	; 9
    49da:	08 95       	ret

000049dc <lora_driver_setApplicationIdentifier>:
    49dc:	fc 01       	movw	r30, r24
    49de:	01 90       	ld	r0, Z+
    49e0:	00 20       	and	r0, r0
    49e2:	e9 f7       	brne	.-6      	; 0x49de <lora_driver_setApplicationIdentifier+0x2>
    49e4:	9f 01       	movw	r18, r30
    49e6:	21 51       	subi	r18, 0x11	; 17
    49e8:	31 09       	sbc	r19, r1
    49ea:	28 17       	cp	r18, r24
    49ec:	39 07       	cpc	r19, r25
    49ee:	29 f4       	brne	.+10     	; 0x49fa <lora_driver_setApplicationIdentifier+0x1e>
    49f0:	bc 01       	movw	r22, r24
    49f2:	85 e9       	ldi	r24, 0x95	; 149
    49f4:	97 e0       	ldi	r25, 0x07	; 7
    49f6:	5b cf       	rjmp	.-330    	; 0x48ae <_uploadMessageRc>
    49f8:	08 95       	ret
    49fa:	89 e0       	ldi	r24, 0x09	; 9
    49fc:	08 95       	ret

000049fe <lora_driver_setApplicationKey>:
    49fe:	fc 01       	movw	r30, r24
    4a00:	01 90       	ld	r0, Z+
    4a02:	00 20       	and	r0, r0
    4a04:	e9 f7       	brne	.-6      	; 0x4a00 <lora_driver_setApplicationKey+0x2>
    4a06:	9f 01       	movw	r18, r30
    4a08:	21 52       	subi	r18, 0x21	; 33
    4a0a:	31 09       	sbc	r19, r1
    4a0c:	28 17       	cp	r18, r24
    4a0e:	39 07       	cpc	r19, r25
    4a10:	29 f4       	brne	.+10     	; 0x4a1c <lora_driver_setApplicationKey+0x1e>
    4a12:	bc 01       	movw	r22, r24
    4a14:	84 ea       	ldi	r24, 0xA4	; 164
    4a16:	97 e0       	ldi	r25, 0x07	; 7
    4a18:	4a cf       	rjmp	.-364    	; 0x48ae <_uploadMessageRc>
    4a1a:	08 95       	ret
    4a1c:	89 e0       	ldi	r24, 0x09	; 9
    4a1e:	08 95       	ret

00004a20 <lora_driver_saveMac>:
    4a20:	60 e0       	ldi	r22, 0x00	; 0
    4a22:	70 e0       	ldi	r23, 0x00	; 0
    4a24:	83 ee       	ldi	r24, 0xE3	; 227
    4a26:	97 e0       	ldi	r25, 0x07	; 7
    4a28:	42 cf       	rjmp	.-380    	; 0x48ae <_uploadMessageRc>
    4a2a:	08 95       	ret

00004a2c <lora_driver_join>:
    4a2c:	0f 93       	push	r16
    4a2e:	1f 93       	push	r17
    4a30:	e8 2f       	mov	r30, r24
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	ee 0f       	add	r30, r30
    4a36:	ff 1f       	adc	r31, r31
    4a38:	e8 54       	subi	r30, 0x48	; 72
    4a3a:	f6 4f       	sbci	r31, 0xF6	; 246
    4a3c:	60 81       	ld	r22, Z
    4a3e:	71 81       	ldd	r23, Z+1	; 0x01
    4a40:	8c ee       	ldi	r24, 0xEC	; 236
    4a42:	97 e0       	ldi	r25, 0x07	; 7
    4a44:	34 df       	rcall	.-408    	; 0x48ae <_uploadMessageRc>
    4a46:	81 11       	cpse	r24, r1
    4a48:	14 c0       	rjmp	.+40     	; 0x4a72 <lora_driver_join+0x46>
    4a4a:	08 e2       	ldi	r16, 0x28	; 40
    4a4c:	15 e0       	ldi	r17, 0x05	; 5
    4a4e:	20 e0       	ldi	r18, 0x00	; 0
    4a50:	30 e0       	ldi	r19, 0x00	; 0
    4a52:	4d e2       	ldi	r20, 0x2D	; 45
    4a54:	50 e0       	ldi	r21, 0x00	; 0
    4a56:	65 ea       	ldi	r22, 0xA5	; 165
    4a58:	79 e1       	ldi	r23, 0x19	; 25
    4a5a:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serialReplyBufferHandle>
    4a5e:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serialReplyBufferHandle+0x1>
    4a62:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xStreamBufferReceive>
    4a66:	88 23       	and	r24, r24
    4a68:	21 f0       	breq	.+8      	; 0x4a72 <lora_driver_join+0x46>
    4a6a:	85 ea       	ldi	r24, 0xA5	; 165
    4a6c:	99 e1       	ldi	r25, 0x19	; 25
    4a6e:	aa de       	rcall	.-684    	; 0x47c4 <_reply2ReturnCode>
    4a70:	03 c0       	rjmp	.+6      	; 0x4a78 <lora_driver_join+0x4c>
    4a72:	85 ea       	ldi	r24, 0xA5	; 165
    4a74:	99 e1       	ldi	r25, 0x19	; 25
    4a76:	a6 de       	rcall	.-692    	; 0x47c4 <_reply2ReturnCode>
    4a78:	1f 91       	pop	r17
    4a7a:	0f 91       	pop	r16
    4a7c:	08 95       	ret

00004a7e <lora_driver_sendUploadMessage>:
    4a7e:	0f 93       	push	r16
    4a80:	1f 93       	push	r17
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	1f 92       	push	r1
    4a88:	cd b7       	in	r28, 0x3d	; 61
    4a8a:	de b7       	in	r29, 0x3e	; 62
    4a8c:	db 01       	movw	r26, r22
    4a8e:	11 96       	adiw	r26, 0x01	; 1
    4a90:	9c 91       	ld	r25, X
    4a92:	11 97       	sbiw	r26, 0x01	; 1
    4a94:	95 31       	cpi	r25, 0x15	; 21
    4a96:	08 f0       	brcs	.+2      	; 0x4a9a <lora_driver_sendUploadMessage+0x1c>
    4a98:	b4 c0       	rjmp	.+360    	; 0x4c02 <lora_driver_sendUploadMessage+0x184>
    4a9a:	99 23       	and	r25, r25
    4a9c:	81 f1       	breq	.+96     	; 0x4afe <lora_driver_sendUploadMessage+0x80>
    4a9e:	60 e0       	ldi	r22, 0x00	; 0
    4aa0:	70 e0       	ldi	r23, 0x00	; 0
    4aa2:	27 2f       	mov	r18, r23
    4aa4:	30 e0       	ldi	r19, 0x00	; 0
    4aa6:	46 2f       	mov	r20, r22
    4aa8:	50 e0       	ldi	r21, 0x00	; 0
    4aaa:	fd 01       	movw	r30, r26
    4aac:	e4 0f       	add	r30, r20
    4aae:	f5 1f       	adc	r31, r21
    4ab0:	92 81       	ldd	r25, Z+2	; 0x02
    4ab2:	92 95       	swap	r25
    4ab4:	9f 70       	andi	r25, 0x0F	; 15
    4ab6:	9a 30       	cpi	r25, 0x0A	; 10
    4ab8:	10 f0       	brcs	.+4      	; 0x4abe <lora_driver_sendUploadMessage+0x40>
    4aba:	99 5c       	subi	r25, 0xC9	; 201
    4abc:	01 c0       	rjmp	.+2      	; 0x4ac0 <lora_driver_sendUploadMessage+0x42>
    4abe:	90 5d       	subi	r25, 0xD0	; 208
    4ac0:	f9 01       	movw	r30, r18
    4ac2:	ea 5c       	subi	r30, 0xCA	; 202
    4ac4:	f6 4e       	sbci	r31, 0xE6	; 230
    4ac6:	90 83       	st	Z, r25
    4ac8:	2f 5f       	subi	r18, 0xFF	; 255
    4aca:	3f 4f       	sbci	r19, 0xFF	; 255
    4acc:	fd 01       	movw	r30, r26
    4ace:	e4 0f       	add	r30, r20
    4ad0:	f5 1f       	adc	r31, r21
    4ad2:	92 81       	ldd	r25, Z+2	; 0x02
    4ad4:	9f 70       	andi	r25, 0x0F	; 15
    4ad6:	49 2f       	mov	r20, r25
    4ad8:	50 e0       	ldi	r21, 0x00	; 0
    4ada:	4a 30       	cpi	r20, 0x0A	; 10
    4adc:	51 05       	cpc	r21, r1
    4ade:	14 f0       	brlt	.+4      	; 0x4ae4 <lora_driver_sendUploadMessage+0x66>
    4ae0:	99 5c       	subi	r25, 0xC9	; 201
    4ae2:	01 c0       	rjmp	.+2      	; 0x4ae6 <lora_driver_sendUploadMessage+0x68>
    4ae4:	90 5d       	subi	r25, 0xD0	; 208
    4ae6:	f9 01       	movw	r30, r18
    4ae8:	ea 5c       	subi	r30, 0xCA	; 202
    4aea:	f6 4e       	sbci	r31, 0xE6	; 230
    4aec:	90 83       	st	Z, r25
    4aee:	7e 5f       	subi	r23, 0xFE	; 254
    4af0:	6f 5f       	subi	r22, 0xFF	; 255
    4af2:	11 96       	adiw	r26, 0x01	; 1
    4af4:	9c 91       	ld	r25, X
    4af6:	11 97       	sbiw	r26, 0x01	; 1
    4af8:	69 17       	cp	r22, r25
    4afa:	98 f2       	brcs	.-90     	; 0x4aa2 <lora_driver_sendUploadMessage+0x24>
    4afc:	01 c0       	rjmp	.+2      	; 0x4b00 <lora_driver_sendUploadMessage+0x82>
    4afe:	70 e0       	ldi	r23, 0x00	; 0
    4b00:	e7 2f       	mov	r30, r23
    4b02:	f0 e0       	ldi	r31, 0x00	; 0
    4b04:	ea 5c       	subi	r30, 0xCA	; 202
    4b06:	f6 4e       	sbci	r31, 0xE6	; 230
    4b08:	10 82       	st	Z, r1
    4b0a:	4c 91       	ld	r20, X
    4b0c:	81 11       	cpse	r24, r1
    4b0e:	03 c0       	rjmp	.+6      	; 0x4b16 <lora_driver_sendUploadMessage+0x98>
    4b10:	85 ef       	ldi	r24, 0xF5	; 245
    4b12:	97 e0       	ldi	r25, 0x07	; 7
    4b14:	02 c0       	rjmp	.+4      	; 0x4b1a <lora_driver_sendUploadMessage+0x9c>
    4b16:	87 ef       	ldi	r24, 0xF7	; 247
    4b18:	97 e0       	ldi	r25, 0x07	; 7
    4b1a:	26 e3       	ldi	r18, 0x36	; 54
    4b1c:	39 e1       	ldi	r19, 0x19	; 25
    4b1e:	3f 93       	push	r19
    4b20:	2f 93       	push	r18
    4b22:	1f 92       	push	r1
    4b24:	4f 93       	push	r20
    4b26:	9f 93       	push	r25
    4b28:	8f 93       	push	r24
    4b2a:	8b ef       	ldi	r24, 0xFB	; 251
    4b2c:	97 e0       	ldi	r25, 0x07	; 7
    4b2e:	9f 93       	push	r25
    4b30:	8f 93       	push	r24
    4b32:	88 e7       	ldi	r24, 0x78	; 120
    4b34:	99 e1       	ldi	r25, 0x19	; 25
    4b36:	9f 93       	push	r25
    4b38:	8f 93       	push	r24
    4b3a:	0e 94 67 3a 	call	0x74ce	; 0x74ce <sprintf>
    4b3e:	60 e0       	ldi	r22, 0x00	; 0
    4b40:	70 e0       	ldi	r23, 0x00	; 0
    4b42:	88 e7       	ldi	r24, 0x78	; 120
    4b44:	99 e1       	ldi	r25, 0x19	; 25
    4b46:	b3 de       	rcall	.-666    	; 0x48ae <_uploadMessageRc>
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	f8 94       	cli
    4b4c:	de bf       	out	0x3e, r29	; 62
    4b4e:	0f be       	out	0x3f, r0	; 63
    4b50:	cd bf       	out	0x3d, r28	; 61
    4b52:	81 11       	cpse	r24, r1
    4b54:	59 c0       	rjmp	.+178    	; 0x4c08 <lora_driver_sendUploadMessage+0x18a>
    4b56:	08 e2       	ldi	r16, 0x28	; 40
    4b58:	15 e0       	ldi	r17, 0x05	; 5
    4b5a:	20 e0       	ldi	r18, 0x00	; 0
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	4d e2       	ldi	r20, 0x2D	; 45
    4b60:	50 e0       	ldi	r21, 0x00	; 0
    4b62:	65 ea       	ldi	r22, 0xA5	; 165
    4b64:	79 e1       	ldi	r23, 0x19	; 25
    4b66:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_serialReplyBufferHandle>
    4b6a:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_serialReplyBufferHandle+0x1>
    4b6e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <xStreamBufferReceive>
    4b72:	88 23       	and	r24, r24
    4b74:	09 f4       	brne	.+2      	; 0x4b78 <lora_driver_sendUploadMessage+0xfa>
    4b76:	47 c0       	rjmp	.+142    	; 0x4c06 <lora_driver_sendUploadMessage+0x188>
    4b78:	85 ea       	ldi	r24, 0xA5	; 165
    4b7a:	99 e1       	ldi	r25, 0x19	; 25
    4b7c:	23 de       	rcall	.-954    	; 0x47c4 <_reply2ReturnCode>
    4b7e:	8e 30       	cpi	r24, 0x0E	; 14
    4b80:	09 f0       	breq	.+2      	; 0x4b84 <lora_driver_sendUploadMessage+0x106>
    4b82:	42 c0       	rjmp	.+132    	; 0x4c08 <lora_driver_sendUploadMessage+0x18a>
    4b84:	87 e0       	ldi	r24, 0x07	; 7
    4b86:	89 83       	std	Y+1, r24	; 0x01
    4b88:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_downlinkMessageBuffer>
    4b8c:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_downlinkMessageBuffer+0x1>
    4b90:	89 2b       	or	r24, r25
    4b92:	a9 f1       	breq	.+106    	; 0x4bfe <lora_driver_sendUploadMessage+0x180>
    4b94:	be 01       	movw	r22, r28
    4b96:	6f 5f       	subi	r22, 0xFF	; 255
    4b98:	7f 4f       	sbci	r23, 0xFF	; 255
    4b9a:	85 ea       	ldi	r24, 0xA5	; 165
    4b9c:	99 e1       	ldi	r25, 0x19	; 25
    4b9e:	68 d1       	rcall	.+720    	; 0x4e70 <decode_port_no>
    4ba0:	80 93 20 19 	sts	0x1920, r24	; 0x801920 <_downlinkPayload>
    4ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	eb 55       	subi	r30, 0x5B	; 91
    4baa:	f6 4e       	sbci	r31, 0xE6	; 230
    4bac:	df 01       	movw	r26, r30
    4bae:	0d 90       	ld	r0, X+
    4bb0:	00 20       	and	r0, r0
    4bb2:	e9 f7       	brne	.-6      	; 0x4bae <lora_driver_sendUploadMessage+0x130>
    4bb4:	11 97       	sbiw	r26, 0x01	; 1
    4bb6:	ae 1b       	sub	r26, r30
    4bb8:	bf 0b       	sbc	r27, r31
    4bba:	aa 23       	and	r26, r26
    4bbc:	91 f0       	breq	.+36     	; 0x4be2 <lora_driver_sendUploadMessage+0x164>
    4bbe:	bb 27       	eor	r27, r27
    4bc0:	cd 01       	movw	r24, r26
    4bc2:	01 97       	sbiw	r24, 0x01	; 1
    4bc4:	9c 01       	movw	r18, r24
    4bc6:	12 f4       	brpl	.+4      	; 0x4bcc <lora_driver_sendUploadMessage+0x14e>
    4bc8:	2f 5f       	subi	r18, 0xFF	; 255
    4bca:	3f 4f       	sbci	r19, 0xFF	; 255
    4bcc:	35 95       	asr	r19
    4bce:	27 95       	ror	r18
    4bd0:	20 93 21 19 	sts	0x1921, r18	; 0x801921 <_downlinkPayload+0x1>
    4bd4:	af 01       	movw	r20, r30
    4bd6:	4f 5f       	subi	r20, 0xFF	; 255
    4bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    4bda:	64 e1       	ldi	r22, 0x14	; 20
    4bdc:	82 e2       	ldi	r24, 0x22	; 34
    4bde:	99 e1       	ldi	r25, 0x19	; 25
    4be0:	73 d1       	rcall	.+742    	; 0x4ec8 <decode_hexadecimal_string_bytes>
    4be2:	01 e0       	ldi	r16, 0x01	; 1
    4be4:	10 e0       	ldi	r17, 0x00	; 0
    4be6:	20 e0       	ldi	r18, 0x00	; 0
    4be8:	30 e0       	ldi	r19, 0x00	; 0
    4bea:	46 e1       	ldi	r20, 0x16	; 22
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	60 e2       	ldi	r22, 0x20	; 32
    4bf0:	79 e1       	ldi	r23, 0x19	; 25
    4bf2:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_downlinkMessageBuffer>
    4bf6:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_downlinkMessageBuffer+0x1>
    4bfa:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <xStreamBufferSend>
    4bfe:	8e e0       	ldi	r24, 0x0E	; 14
    4c00:	03 c0       	rjmp	.+6      	; 0x4c08 <lora_driver_sendUploadMessage+0x18a>
    4c02:	84 e1       	ldi	r24, 0x14	; 20
    4c04:	01 c0       	rjmp	.+2      	; 0x4c08 <lora_driver_sendUploadMessage+0x18a>
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	0f 90       	pop	r0
    4c0a:	df 91       	pop	r29
    4c0c:	cf 91       	pop	r28
    4c0e:	1f 91       	pop	r17
    4c10:	0f 91       	pop	r16
    4c12:	08 95       	ret

00004c14 <lora_driver_setAdaptiveDataRate>:
    4c14:	81 30       	cpi	r24, 0x01	; 1
    4c16:	19 f0       	breq	.+6      	; 0x4c1e <lora_driver_setAdaptiveDataRate+0xa>
    4c18:	6b e0       	ldi	r22, 0x0B	; 11
    4c1a:	78 e0       	ldi	r23, 0x08	; 8
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <lora_driver_setAdaptiveDataRate+0xe>
    4c1e:	64 ee       	ldi	r22, 0xE4	; 228
    4c20:	78 e0       	ldi	r23, 0x08	; 8
    4c22:	8f e0       	ldi	r24, 0x0F	; 15
    4c24:	98 e0       	ldi	r25, 0x08	; 8
    4c26:	43 ce       	rjmp	.-890    	; 0x48ae <_uploadMessageRc>
    4c28:	08 95       	ret

00004c2a <lora_driver_setReceiveDelay>:
    4c2a:	9f 93       	push	r25
    4c2c:	8f 93       	push	r24
    4c2e:	80 e4       	ldi	r24, 0x40	; 64
    4c30:	98 e0       	ldi	r25, 0x08	; 8
    4c32:	9f 93       	push	r25
    4c34:	8f 93       	push	r24
    4c36:	88 e7       	ldi	r24, 0x78	; 120
    4c38:	99 e1       	ldi	r25, 0x19	; 25
    4c3a:	9f 93       	push	r25
    4c3c:	8f 93       	push	r24
    4c3e:	0e 94 67 3a 	call	0x74ce	; 0x74ce <sprintf>
    4c42:	60 e0       	ldi	r22, 0x00	; 0
    4c44:	70 e0       	ldi	r23, 0x00	; 0
    4c46:	88 e7       	ldi	r24, 0x78	; 120
    4c48:	99 e1       	ldi	r25, 0x19	; 25
    4c4a:	31 de       	rcall	.-926    	; 0x48ae <_uploadMessageRc>
    4c4c:	0f 90       	pop	r0
    4c4e:	0f 90       	pop	r0
    4c50:	0f 90       	pop	r0
    4c52:	0f 90       	pop	r0
    4c54:	0f 90       	pop	r0
    4c56:	0f 90       	pop	r0
    4c58:	08 95       	ret

00004c5a <lora_driver_configureToEu868>:
    4c5a:	2f 92       	push	r2
    4c5c:	3f 92       	push	r3
    4c5e:	4f 92       	push	r4
    4c60:	5f 92       	push	r5
    4c62:	6f 92       	push	r6
    4c64:	7f 92       	push	r7
    4c66:	8f 92       	push	r8
    4c68:	9f 92       	push	r9
    4c6a:	af 92       	push	r10
    4c6c:	bf 92       	push	r11
    4c6e:	cf 92       	push	r12
    4c70:	df 92       	push	r13
    4c72:	ef 92       	push	r14
    4c74:	ff 92       	push	r15
    4c76:	0f 93       	push	r16
    4c78:	1f 93       	push	r17
    4c7a:	cf 93       	push	r28
    4c7c:	df 93       	push	r29
    4c7e:	cd b7       	in	r28, 0x3d	; 61
    4c80:	de b7       	in	r29, 0x3e	; 62
    4c82:	a0 97       	sbiw	r28, 0x20	; 32
    4c84:	0f b6       	in	r0, 0x3f	; 63
    4c86:	f8 94       	cli
    4c88:	de bf       	out	0x3e, r29	; 62
    4c8a:	0f be       	out	0x3f, r0	; 63
    4c8c:	cd bf       	out	0x3d, r28	; 61
    4c8e:	6d e6       	ldi	r22, 0x6D	; 109
    4c90:	78 e0       	ldi	r23, 0x08	; 8
    4c92:	89 e7       	ldi	r24, 0x79	; 121
    4c94:	98 e0       	ldi	r25, 0x08	; 8
    4c96:	3c dd       	rcall	.-1416   	; 0x4710 <_uploadMessage>
    4c98:	95 dd       	rcall	.-1238   	; 0x47c4 <_reply2ReturnCode>
    4c9a:	81 11       	cpse	r24, r1
    4c9c:	a3 c0       	rjmp	.+326    	; 0x4de4 <lora_driver_configureToEu868+0x18a>
    4c9e:	80 e2       	ldi	r24, 0x20	; 32
    4ca0:	e2 e2       	ldi	r30, 0x22	; 34
    4ca2:	f2 e0       	ldi	r31, 0x02	; 2
    4ca4:	de 01       	movw	r26, r28
    4ca6:	11 96       	adiw	r26, 0x01	; 1
    4ca8:	01 90       	ld	r0, Z+
    4caa:	0d 92       	st	X+, r0
    4cac:	8a 95       	dec	r24
    4cae:	e1 f7       	brne	.-8      	; 0x4ca8 <lora_driver_configureToEu868+0x4e>
    4cb0:	9e 01       	movw	r18, r28
    4cb2:	2f 5f       	subi	r18, 0xFF	; 255
    4cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb6:	69 01       	movw	r12, r18
    4cb8:	e1 2c       	mov	r14, r1
    4cba:	f1 2c       	mov	r15, r1
    4cbc:	0f 2e       	mov	r0, r31
    4cbe:	f5 e8       	ldi	r31, 0x85	; 133
    4cc0:	af 2e       	mov	r10, r31
    4cc2:	f8 e0       	ldi	r31, 0x08	; 8
    4cc4:	bf 2e       	mov	r11, r31
    4cc6:	f0 2d       	mov	r31, r0
    4cc8:	08 e7       	ldi	r16, 0x78	; 120
    4cca:	19 e1       	ldi	r17, 0x19	; 25
    4ccc:	0f 2e       	mov	r0, r31
    4cce:	fe e9       	ldi	r31, 0x9E	; 158
    4cd0:	4f 2e       	mov	r4, r31
    4cd2:	f8 e0       	ldi	r31, 0x08	; 8
    4cd4:	5f 2e       	mov	r5, r31
    4cd6:	f0 2d       	mov	r31, r0
    4cd8:	0f 2e       	mov	r0, r31
    4cda:	f5 eb       	ldi	r31, 0xB5	; 181
    4cdc:	8f 2e       	mov	r8, r31
    4cde:	f8 e0       	ldi	r31, 0x08	; 8
    4ce0:	9f 2e       	mov	r9, r31
    4ce2:	f0 2d       	mov	r31, r0
    4ce4:	0f 2e       	mov	r0, r31
    4ce6:	ff ec       	ldi	r31, 0xCF	; 207
    4ce8:	6f 2e       	mov	r6, r31
    4cea:	f8 e0       	ldi	r31, 0x08	; 8
    4cec:	7f 2e       	mov	r7, r31
    4cee:	f0 2d       	mov	r31, r0
    4cf0:	3e 2c       	mov	r3, r14
    4cf2:	2f 2c       	mov	r2, r15
    4cf4:	ff 92       	push	r15
    4cf6:	ef 92       	push	r14
    4cf8:	bf 92       	push	r11
    4cfa:	af 92       	push	r10
    4cfc:	1f 93       	push	r17
    4cfe:	0f 93       	push	r16
    4d00:	0e 94 67 3a 	call	0x74ce	; 0x74ce <sprintf>
    4d04:	60 e0       	ldi	r22, 0x00	; 0
    4d06:	70 e0       	ldi	r23, 0x00	; 0
    4d08:	c8 01       	movw	r24, r16
    4d0a:	02 dd       	rcall	.-1532   	; 0x4710 <_uploadMessage>
    4d0c:	5b dd       	rcall	.-1354   	; 0x47c4 <_reply2ReturnCode>
    4d0e:	0f 90       	pop	r0
    4d10:	0f 90       	pop	r0
    4d12:	0f 90       	pop	r0
    4d14:	0f 90       	pop	r0
    4d16:	0f 90       	pop	r0
    4d18:	0f 90       	pop	r0
    4d1a:	81 11       	cpse	r24, r1
    4d1c:	63 c0       	rjmp	.+198    	; 0x4de4 <lora_driver_configureToEu868+0x18a>
    4d1e:	32 e0       	ldi	r19, 0x02	; 2
    4d20:	3e 15       	cp	r19, r14
    4d22:	e8 f4       	brcc	.+58     	; 0x4d5e <lora_driver_configureToEu868+0x104>
    4d24:	f6 01       	movw	r30, r12
    4d26:	83 81       	ldd	r24, Z+3	; 0x03
    4d28:	8f 93       	push	r24
    4d2a:	82 81       	ldd	r24, Z+2	; 0x02
    4d2c:	8f 93       	push	r24
    4d2e:	81 81       	ldd	r24, Z+1	; 0x01
    4d30:	8f 93       	push	r24
    4d32:	80 81       	ld	r24, Z
    4d34:	8f 93       	push	r24
    4d36:	ff 92       	push	r15
    4d38:	ef 92       	push	r14
    4d3a:	5f 92       	push	r5
    4d3c:	4f 92       	push	r4
    4d3e:	1f 93       	push	r17
    4d40:	0f 93       	push	r16
    4d42:	0e 94 67 3a 	call	0x74ce	; 0x74ce <sprintf>
    4d46:	60 e0       	ldi	r22, 0x00	; 0
    4d48:	70 e0       	ldi	r23, 0x00	; 0
    4d4a:	c8 01       	movw	r24, r16
    4d4c:	e1 dc       	rcall	.-1598   	; 0x4710 <_uploadMessage>
    4d4e:	3a dd       	rcall	.-1420   	; 0x47c4 <_reply2ReturnCode>
    4d50:	0f b6       	in	r0, 0x3f	; 63
    4d52:	f8 94       	cli
    4d54:	de bf       	out	0x3e, r29	; 62
    4d56:	0f be       	out	0x3f, r0	; 63
    4d58:	cd bf       	out	0x3d, r28	; 61
    4d5a:	81 11       	cpse	r24, r1
    4d5c:	43 c0       	rjmp	.+134    	; 0x4de4 <lora_driver_configureToEu868+0x18a>
    4d5e:	2f 92       	push	r2
    4d60:	3f 92       	push	r3
    4d62:	9f 92       	push	r9
    4d64:	8f 92       	push	r8
    4d66:	1f 93       	push	r17
    4d68:	0f 93       	push	r16
    4d6a:	0e 94 67 3a 	call	0x74ce	; 0x74ce <sprintf>
    4d6e:	60 e0       	ldi	r22, 0x00	; 0
    4d70:	70 e0       	ldi	r23, 0x00	; 0
    4d72:	c8 01       	movw	r24, r16
    4d74:	cd dc       	rcall	.-1638   	; 0x4710 <_uploadMessage>
    4d76:	26 dd       	rcall	.-1460   	; 0x47c4 <_reply2ReturnCode>
    4d78:	0f 90       	pop	r0
    4d7a:	0f 90       	pop	r0
    4d7c:	0f 90       	pop	r0
    4d7e:	0f 90       	pop	r0
    4d80:	0f 90       	pop	r0
    4d82:	0f 90       	pop	r0
    4d84:	81 11       	cpse	r24, r1
    4d86:	2e c0       	rjmp	.+92     	; 0x4de4 <lora_driver_configureToEu868+0x18a>
    4d88:	2f 92       	push	r2
    4d8a:	3f 92       	push	r3
    4d8c:	7f 92       	push	r7
    4d8e:	6f 92       	push	r6
    4d90:	1f 93       	push	r17
    4d92:	0f 93       	push	r16
    4d94:	0e 94 67 3a 	call	0x74ce	; 0x74ce <sprintf>
    4d98:	60 e0       	ldi	r22, 0x00	; 0
    4d9a:	70 e0       	ldi	r23, 0x00	; 0
    4d9c:	c8 01       	movw	r24, r16
    4d9e:	b8 dc       	rcall	.-1680   	; 0x4710 <_uploadMessage>
    4da0:	11 dd       	rcall	.-1502   	; 0x47c4 <_reply2ReturnCode>
    4da2:	0f 90       	pop	r0
    4da4:	0f 90       	pop	r0
    4da6:	0f 90       	pop	r0
    4da8:	0f 90       	pop	r0
    4daa:	0f 90       	pop	r0
    4dac:	0f 90       	pop	r0
    4dae:	81 11       	cpse	r24, r1
    4db0:	19 c0       	rjmp	.+50     	; 0x4de4 <lora_driver_configureToEu868+0x18a>
    4db2:	3f ef       	ldi	r19, 0xFF	; 255
    4db4:	e3 1a       	sub	r14, r19
    4db6:	f3 0a       	sbc	r15, r19
    4db8:	84 e0       	ldi	r24, 0x04	; 4
    4dba:	c8 0e       	add	r12, r24
    4dbc:	d1 1c       	adc	r13, r1
    4dbe:	98 e0       	ldi	r25, 0x08	; 8
    4dc0:	e9 16       	cp	r14, r25
    4dc2:	f1 04       	cpc	r15, r1
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <lora_driver_configureToEu868+0x16e>
    4dc6:	94 cf       	rjmp	.-216    	; 0x4cf0 <lora_driver_configureToEu868+0x96>
    4dc8:	60 e0       	ldi	r22, 0x00	; 0
    4dca:	70 e0       	ldi	r23, 0x00	; 0
    4dcc:	87 ee       	ldi	r24, 0xE7	; 231
    4dce:	98 e0       	ldi	r25, 0x08	; 8
    4dd0:	9f dc       	rcall	.-1730   	; 0x4710 <_uploadMessage>
    4dd2:	f8 dc       	rcall	.-1552   	; 0x47c4 <_reply2ReturnCode>
    4dd4:	81 11       	cpse	r24, r1
    4dd6:	06 c0       	rjmp	.+12     	; 0x4de4 <lora_driver_configureToEu868+0x18a>
    4dd8:	60 e0       	ldi	r22, 0x00	; 0
    4dda:	70 e0       	ldi	r23, 0x00	; 0
    4ddc:	88 ef       	ldi	r24, 0xF8	; 248
    4dde:	98 e0       	ldi	r25, 0x08	; 8
    4de0:	97 dc       	rcall	.-1746   	; 0x4710 <_uploadMessage>
    4de2:	f0 dc       	rcall	.-1568   	; 0x47c4 <_reply2ReturnCode>
    4de4:	a0 96       	adiw	r28, 0x20	; 32
    4de6:	0f b6       	in	r0, 0x3f	; 63
    4de8:	f8 94       	cli
    4dea:	de bf       	out	0x3e, r29	; 62
    4dec:	0f be       	out	0x3f, r0	; 63
    4dee:	cd bf       	out	0x3d, r28	; 61
    4df0:	df 91       	pop	r29
    4df2:	cf 91       	pop	r28
    4df4:	1f 91       	pop	r17
    4df6:	0f 91       	pop	r16
    4df8:	ff 90       	pop	r15
    4dfa:	ef 90       	pop	r14
    4dfc:	df 90       	pop	r13
    4dfe:	cf 90       	pop	r12
    4e00:	bf 90       	pop	r11
    4e02:	af 90       	pop	r10
    4e04:	9f 90       	pop	r9
    4e06:	8f 90       	pop	r8
    4e08:	7f 90       	pop	r7
    4e0a:	6f 90       	pop	r6
    4e0c:	5f 90       	pop	r5
    4e0e:	4f 90       	pop	r4
    4e10:	3f 90       	pop	r3
    4e12:	2f 90       	pop	r2
    4e14:	08 95       	ret

00004e16 <lora_driver_setOtaaIdentity>:
    4e16:	ef 92       	push	r14
    4e18:	ff 92       	push	r15
    4e1a:	0f 93       	push	r16
    4e1c:	1f 93       	push	r17
    4e1e:	cf 93       	push	r28
    4e20:	df 93       	push	r29
    4e22:	ec 01       	movw	r28, r24
    4e24:	8b 01       	movw	r16, r22
    4e26:	7a 01       	movw	r14, r20
    4e28:	81 e0       	ldi	r24, 0x01	; 1
    4e2a:	f4 de       	rcall	.-536    	; 0x4c14 <lora_driver_setAdaptiveDataRate>
    4e2c:	81 11       	cpse	r24, r1
    4e2e:	0d c0       	rjmp	.+26     	; 0x4e4a <lora_driver_setOtaaIdentity+0x34>
    4e30:	ce 01       	movw	r24, r28
    4e32:	d4 dd       	rcall	.-1112   	; 0x49dc <lora_driver_setApplicationIdentifier>
    4e34:	81 11       	cpse	r24, r1
    4e36:	09 c0       	rjmp	.+18     	; 0x4e4a <lora_driver_setOtaaIdentity+0x34>
    4e38:	c8 01       	movw	r24, r16
    4e3a:	e1 dd       	rcall	.-1086   	; 0x49fe <lora_driver_setApplicationKey>
    4e3c:	81 11       	cpse	r24, r1
    4e3e:	05 c0       	rjmp	.+10     	; 0x4e4a <lora_driver_setOtaaIdentity+0x34>
    4e40:	c7 01       	movw	r24, r14
    4e42:	bb dd       	rcall	.-1162   	; 0x49ba <lora_driver_setDeviceIdentifier>
    4e44:	81 11       	cpse	r24, r1
    4e46:	01 c0       	rjmp	.+2      	; 0x4e4a <lora_driver_setOtaaIdentity+0x34>
    4e48:	eb dd       	rcall	.-1066   	; 0x4a20 <lora_driver_saveMac>
    4e4a:	df 91       	pop	r29
    4e4c:	cf 91       	pop	r28
    4e4e:	1f 91       	pop	r17
    4e50:	0f 91       	pop	r16
    4e52:	ff 90       	pop	r15
    4e54:	ef 90       	pop	r14
    4e56:	08 95       	ret

00004e58 <lora_driver_mapReturnCodeToText>:
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	fc 01       	movw	r30, r24
    4e5c:	ee 0f       	add	r30, r30
    4e5e:	ff 1f       	adc	r31, r31
    4e60:	8e 0f       	add	r24, r30
    4e62:	9f 1f       	adc	r25, r31
    4e64:	fc 01       	movw	r30, r24
    4e66:	e4 54       	subi	r30, 0x44	; 68
    4e68:	f6 4f       	sbci	r31, 0xF6	; 246
    4e6a:	81 81       	ldd	r24, Z+1	; 0x01
    4e6c:	92 81       	ldd	r25, Z+2	; 0x02
    4e6e:	08 95       	ret

00004e70 <decode_port_no>:
    4e70:	dc 01       	movw	r26, r24
    4e72:	00 97       	sbiw	r24, 0x00	; 0
    4e74:	29 f1       	breq	.+74     	; 0x4ec0 <decode_port_no+0x50>
    4e76:	fb 01       	movw	r30, r22
    4e78:	20 81       	ld	r18, Z
    4e7a:	fc 01       	movw	r30, r24
    4e7c:	01 90       	ld	r0, Z+
    4e7e:	00 20       	and	r0, r0
    4e80:	e9 f7       	brne	.-6      	; 0x4e7c <decode_port_no+0xc>
    4e82:	31 97       	sbiw	r30, 0x01	; 1
    4e84:	e8 1b       	sub	r30, r24
    4e86:	f9 0b       	sbc	r31, r25
    4e88:	82 2f       	mov	r24, r18
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	e8 17       	cp	r30, r24
    4e8e:	f9 07       	cpc	r31, r25
    4e90:	c8 f0       	brcs	.+50     	; 0x4ec4 <decode_port_no+0x54>
    4e92:	80 e0       	ldi	r24, 0x00	; 0
    4e94:	08 c0       	rjmp	.+16     	; 0x4ea6 <decode_port_no+0x36>
    4e96:	88 0f       	add	r24, r24
    4e98:	38 2f       	mov	r19, r24
    4e9a:	33 0f       	add	r19, r19
    4e9c:	33 0f       	add	r19, r19
    4e9e:	83 0f       	add	r24, r19
    4ea0:	80 53       	subi	r24, 0x30	; 48
    4ea2:	89 0f       	add	r24, r25
    4ea4:	2f 5f       	subi	r18, 0xFF	; 255
    4ea6:	fd 01       	movw	r30, r26
    4ea8:	e2 0f       	add	r30, r18
    4eaa:	f1 1d       	adc	r31, r1
    4eac:	90 81       	ld	r25, Z
    4eae:	30 ed       	ldi	r19, 0xD0	; 208
    4eb0:	39 0f       	add	r19, r25
    4eb2:	3a 30       	cpi	r19, 0x0A	; 10
    4eb4:	10 f4       	brcc	.+4      	; 0x4eba <decode_port_no+0x4a>
    4eb6:	91 11       	cpse	r25, r1
    4eb8:	ee cf       	rjmp	.-36     	; 0x4e96 <decode_port_no+0x26>
    4eba:	fb 01       	movw	r30, r22
    4ebc:	20 83       	st	Z, r18
    4ebe:	08 95       	ret
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	08 95       	ret
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	08 95       	ret

00004ec8 <decode_hexadecimal_string_bytes>:
    4ec8:	0f 93       	push	r16
    4eca:	1f 93       	push	r17
    4ecc:	cf 93       	push	r28
    4ece:	df 93       	push	r29
    4ed0:	dc 01       	movw	r26, r24
    4ed2:	ea 01       	movw	r28, r20
    4ed4:	20 97       	sbiw	r28, 0x00	; 0
    4ed6:	e1 f1       	breq	.+120    	; 0x4f50 <decode_hexadecimal_string_bytes+0x88>
    4ed8:	fa 01       	movw	r30, r20
    4eda:	01 90       	ld	r0, Z+
    4edc:	00 20       	and	r0, r0
    4ede:	e9 f7       	brne	.-6      	; 0x4eda <decode_hexadecimal_string_bytes+0x12>
    4ee0:	31 97       	sbiw	r30, 0x01	; 1
    4ee2:	e4 1b       	sub	r30, r20
    4ee4:	f5 0b       	sbc	r31, r21
    4ee6:	32 97       	sbiw	r30, 0x02	; 2
    4ee8:	10 f5       	brcc	.+68     	; 0x4f2e <decode_hexadecimal_string_bytes+0x66>
    4eea:	32 c0       	rjmp	.+100    	; 0x4f50 <decode_hexadecimal_string_bytes+0x88>
    4eec:	8d 01       	movw	r16, r26
    4eee:	04 0f       	add	r16, r20
    4ef0:	15 1f       	adc	r17, r21
    4ef2:	30 e0       	ldi	r19, 0x00	; 0
    4ef4:	ae 01       	movw	r20, r28
    4ef6:	42 0f       	add	r20, r18
    4ef8:	53 1f       	adc	r21, r19
    4efa:	fa 01       	movw	r30, r20
    4efc:	90 81       	ld	r25, Z
    4efe:	91 34       	cpi	r25, 0x41	; 65
    4f00:	28 f0       	brcs	.+10     	; 0x4f0c <decode_hexadecimal_string_bytes+0x44>
    4f02:	97 53       	subi	r25, 0x37	; 55
    4f04:	59 2f       	mov	r21, r25
    4f06:	52 95       	swap	r21
    4f08:	50 7f       	andi	r21, 0xF0	; 240
    4f0a:	03 c0       	rjmp	.+6      	; 0x4f12 <decode_hexadecimal_string_bytes+0x4a>
    4f0c:	59 2f       	mov	r21, r25
    4f0e:	52 95       	swap	r21
    4f10:	50 7f       	andi	r21, 0xF0	; 240
    4f12:	2c 0f       	add	r18, r28
    4f14:	3d 1f       	adc	r19, r29
    4f16:	f9 01       	movw	r30, r18
    4f18:	91 81       	ldd	r25, Z+1	; 0x01
    4f1a:	91 34       	cpi	r25, 0x41	; 65
    4f1c:	10 f0       	brcs	.+4      	; 0x4f22 <decode_hexadecimal_string_bytes+0x5a>
    4f1e:	97 53       	subi	r25, 0x37	; 55
    4f20:	01 c0       	rjmp	.+2      	; 0x4f24 <decode_hexadecimal_string_bytes+0x5c>
    4f22:	90 53       	subi	r25, 0x30	; 48
    4f24:	95 0f       	add	r25, r21
    4f26:	f8 01       	movw	r30, r16
    4f28:	90 83       	st	Z, r25
    4f2a:	8f 5f       	subi	r24, 0xFF	; 255
    4f2c:	01 c0       	rjmp	.+2      	; 0x4f30 <decode_hexadecimal_string_bytes+0x68>
    4f2e:	80 e0       	ldi	r24, 0x00	; 0
    4f30:	28 2f       	mov	r18, r24
    4f32:	22 0f       	add	r18, r18
    4f34:	48 2f       	mov	r20, r24
    4f36:	50 e0       	ldi	r21, 0x00	; 0
    4f38:	fe 01       	movw	r30, r28
    4f3a:	01 90       	ld	r0, Z+
    4f3c:	00 20       	and	r0, r0
    4f3e:	e9 f7       	brne	.-6      	; 0x4f3a <decode_hexadecimal_string_bytes+0x72>
    4f40:	31 97       	sbiw	r30, 0x01	; 1
    4f42:	ec 1b       	sub	r30, r28
    4f44:	fd 0b       	sbc	r31, r29
    4f46:	4e 17       	cp	r20, r30
    4f48:	5f 07       	cpc	r21, r31
    4f4a:	10 f4       	brcc	.+4      	; 0x4f50 <decode_hexadecimal_string_bytes+0x88>
    4f4c:	86 13       	cpse	r24, r22
    4f4e:	ce cf       	rjmp	.-100    	; 0x4eec <decode_hexadecimal_string_bytes+0x24>
    4f50:	df 91       	pop	r29
    4f52:	cf 91       	pop	r28
    4f54:	1f 91       	pop	r17
    4f56:	0f 91       	pop	r16
    4f58:	08 95       	ret

00004f5a <_serialCallBack>:
    4f5a:	80 91 d5 19 	lds	r24, 0x19D5	; 0x8019d5 <crc_sum.1945>
    4f5e:	86 0f       	add	r24, r22
    4f60:	80 93 d5 19 	sts	0x19D5, r24	; 0x8019d5 <crc_sum.1945>
    4f64:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <_mh_state>
    4f68:	91 30       	cpi	r25, 0x01	; 1
    4f6a:	79 f0       	breq	.+30     	; 0x4f8a <_serialCallBack+0x30>
    4f6c:	28 f0       	brcs	.+10     	; 0x4f78 <_serialCallBack+0x1e>
    4f6e:	92 30       	cpi	r25, 0x02	; 2
    4f70:	a9 f0       	breq	.+42     	; 0x4f9c <_serialCallBack+0x42>
    4f72:	93 30       	cpi	r25, 0x03	; 3
    4f74:	19 f1       	breq	.+70     	; 0x4fbc <_serialCallBack+0x62>
    4f76:	08 95       	ret
    4f78:	6f 3f       	cpi	r22, 0xFF	; 255
    4f7a:	09 f0       	breq	.+2      	; 0x4f7e <_serialCallBack+0x24>
    4f7c:	48 c0       	rjmp	.+144    	; 0x500e <_serialCallBack+0xb4>
    4f7e:	10 92 d5 19 	sts	0x19D5, r1	; 0x8019d5 <crc_sum.1945>
    4f82:	81 e0       	ldi	r24, 0x01	; 1
    4f84:	80 93 d8 19 	sts	0x19D8, r24	; 0x8019d8 <_mh_state>
    4f88:	08 95       	ret
    4f8a:	66 38       	cpi	r22, 0x86	; 134
    4f8c:	09 f0       	breq	.+2      	; 0x4f90 <_serialCallBack+0x36>
    4f8e:	3f c0       	rjmp	.+126    	; 0x500e <_serialCallBack+0xb4>
    4f90:	10 92 d4 19 	sts	0x19D4, r1	; 0x8019d4 <inDex.1943>
    4f94:	82 e0       	ldi	r24, 0x02	; 2
    4f96:	80 93 d8 19 	sts	0x19D8, r24	; 0x8019d8 <_mh_state>
    4f9a:	08 95       	ret
    4f9c:	e0 91 d4 19 	lds	r30, 0x19D4	; 0x8019d4 <inDex.1943>
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	8e 0f       	add	r24, r30
    4fa4:	80 93 d4 19 	sts	0x19D4, r24	; 0x8019d4 <inDex.1943>
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	ee 52       	subi	r30, 0x2E	; 46
    4fac:	f6 4e       	sbci	r31, 0xE6	; 230
    4fae:	60 83       	st	Z, r22
    4fb0:	82 30       	cpi	r24, 0x02	; 2
    4fb2:	69 f5       	brne	.+90     	; 0x500e <_serialCallBack+0xb4>
    4fb4:	83 e0       	ldi	r24, 0x03	; 3
    4fb6:	80 93 d8 19 	sts	0x19D8, r24	; 0x8019d8 <_mh_state>
    4fba:	08 95       	ret
    4fbc:	90 91 d4 19 	lds	r25, 0x19D4	; 0x8019d4 <inDex.1943>
    4fc0:	21 e0       	ldi	r18, 0x01	; 1
    4fc2:	29 0f       	add	r18, r25
    4fc4:	20 93 d4 19 	sts	0x19D4, r18	; 0x8019d4 <inDex.1943>
    4fc8:	96 30       	cpi	r25, 0x06	; 6
    4fca:	09 f5       	brne	.+66     	; 0x500e <_serialCallBack+0xb4>
    4fcc:	81 11       	cpse	r24, r1
    4fce:	0e c0       	rjmp	.+28     	; 0x4fec <_serialCallBack+0x92>
    4fd0:	e2 ed       	ldi	r30, 0xD2	; 210
    4fd2:	f9 e1       	ldi	r31, 0x19	; 25
    4fd4:	80 81       	ld	r24, Z
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	98 2f       	mov	r25, r24
    4fda:	88 27       	eor	r24, r24
    4fdc:	21 81       	ldd	r18, Z+1	; 0x01
    4fde:	82 0f       	add	r24, r18
    4fe0:	91 1d       	adc	r25, r1
    4fe2:	90 93 da 19 	sts	0x19DA, r25	; 0x8019da <_ppm+0x1>
    4fe6:	80 93 d9 19 	sts	0x19D9, r24	; 0x8019d9 <_ppm>
    4fea:	04 c0       	rjmp	.+8      	; 0x4ff4 <_serialCallBack+0x9a>
    4fec:	10 92 da 19 	sts	0x19DA, r1	; 0x8019da <_ppm+0x1>
    4ff0:	10 92 d9 19 	sts	0x19D9, r1	; 0x8019d9 <_ppm>
    4ff4:	10 92 d8 19 	sts	0x19D8, r1	; 0x8019d8 <_mh_state>
    4ff8:	e0 91 d6 19 	lds	r30, 0x19D6	; 0x8019d6 <_appCallBack>
    4ffc:	f0 91 d7 19 	lds	r31, 0x19D7	; 0x8019d7 <_appCallBack+0x1>
    5000:	30 97       	sbiw	r30, 0x00	; 0
    5002:	29 f0       	breq	.+10     	; 0x500e <_serialCallBack+0xb4>
    5004:	80 91 d9 19 	lds	r24, 0x19D9	; 0x8019d9 <_ppm>
    5008:	90 91 da 19 	lds	r25, 0x19DA	; 0x8019da <_ppm+0x1>
    500c:	19 95       	eicall
    500e:	08 95       	ret

00005010 <mh_z19_initialise>:
    5010:	8f 92       	push	r8
    5012:	9f 92       	push	r9
    5014:	af 92       	push	r10
    5016:	cf 92       	push	r12
    5018:	ef 92       	push	r14
    501a:	0f 93       	push	r16
    501c:	0f 2e       	mov	r0, r31
    501e:	fd ea       	ldi	r31, 0xAD	; 173
    5020:	8f 2e       	mov	r8, r31
    5022:	f7 e2       	ldi	r31, 0x27	; 39
    5024:	9f 2e       	mov	r9, r31
    5026:	f0 2d       	mov	r31, r0
    5028:	68 94       	set
    502a:	aa 24       	eor	r10, r10
    502c:	a4 f8       	bld	r10, 4
    502e:	68 94       	set
    5030:	cc 24       	eor	r12, r12
    5032:	c4 f8       	bld	r12, 4
    5034:	e1 2c       	mov	r14, r1
    5036:	00 e0       	ldi	r16, 0x00	; 0
    5038:	23 e0       	ldi	r18, 0x03	; 3
    503a:	40 e8       	ldi	r20, 0x80	; 128
    503c:	55 e2       	ldi	r21, 0x25	; 37
    503e:	60 e0       	ldi	r22, 0x00	; 0
    5040:	70 e0       	ldi	r23, 0x00	; 0
    5042:	84 d0       	rcall	.+264    	; 0x514c <serial_create>
    5044:	90 93 dc 19 	sts	0x19DC, r25	; 0x8019dc <_serial+0x1>
    5048:	80 93 db 19 	sts	0x19DB, r24	; 0x8019db <_serial>
    504c:	0f 91       	pop	r16
    504e:	ef 90       	pop	r14
    5050:	cf 90       	pop	r12
    5052:	af 90       	pop	r10
    5054:	9f 90       	pop	r9
    5056:	8f 90       	pop	r8
    5058:	08 95       	ret

0000505a <mh_z19_injectCallBack>:
    505a:	90 93 d7 19 	sts	0x19D7, r25	; 0x8019d7 <_appCallBack+0x1>
    505e:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <_appCallBack>
    5062:	08 95       	ret

00005064 <mh_z19_takeMeassuring>:
    5064:	cf 93       	push	r28
    5066:	df 93       	push	r29
    5068:	cd b7       	in	r28, 0x3d	; 61
    506a:	de b7       	in	r29, 0x3e	; 62
    506c:	29 97       	sbiw	r28, 0x09	; 9
    506e:	0f b6       	in	r0, 0x3f	; 63
    5070:	f8 94       	cli
    5072:	de bf       	out	0x3e, r29	; 62
    5074:	0f be       	out	0x3f, r0	; 63
    5076:	cd bf       	out	0x3d, r28	; 61
    5078:	89 e0       	ldi	r24, 0x09	; 9
    507a:	e2 e4       	ldi	r30, 0x42	; 66
    507c:	f2 e0       	ldi	r31, 0x02	; 2
    507e:	9e 01       	movw	r18, r28
    5080:	2f 5f       	subi	r18, 0xFF	; 255
    5082:	3f 4f       	sbci	r19, 0xFF	; 255
    5084:	d9 01       	movw	r26, r18
    5086:	01 90       	ld	r0, Z+
    5088:	0d 92       	st	X+, r0
    508a:	8a 95       	dec	r24
    508c:	e1 f7       	brne	.-8      	; 0x5086 <mh_z19_takeMeassuring+0x22>
    508e:	10 92 da 19 	sts	0x19DA, r1	; 0x8019da <_ppm+0x1>
    5092:	10 92 d9 19 	sts	0x19D9, r1	; 0x8019d9 <_ppm>
    5096:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <_serial>
    509a:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <_serial+0x1>
    509e:	00 97       	sbiw	r24, 0x00	; 0
    50a0:	31 f0       	breq	.+12     	; 0x50ae <mh_z19_takeMeassuring+0x4a>
    50a2:	42 2f       	mov	r20, r18
    50a4:	53 2f       	mov	r21, r19
    50a6:	69 e0       	ldi	r22, 0x09	; 9
    50a8:	24 d1       	rcall	.+584    	; 0x52f2 <serial_sendBytes>
    50aa:	80 e0       	ldi	r24, 0x00	; 0
    50ac:	01 c0       	rjmp	.+2      	; 0x50b0 <mh_z19_takeMeassuring+0x4c>
    50ae:	82 e0       	ldi	r24, 0x02	; 2
    50b0:	29 96       	adiw	r28, 0x09	; 9
    50b2:	0f b6       	in	r0, 0x3f	; 63
    50b4:	f8 94       	cli
    50b6:	de bf       	out	0x3e, r29	; 62
    50b8:	0f be       	out	0x3f, r0	; 63
    50ba:	cd bf       	out	0x3d, r28	; 61
    50bc:	df 91       	pop	r29
    50be:	cf 91       	pop	r28
    50c0:	08 95       	ret

000050c2 <mh_z19_getCo2Ppm>:
    50c2:	20 91 d9 19 	lds	r18, 0x19D9	; 0x8019d9 <_ppm>
    50c6:	30 91 da 19 	lds	r19, 0x19DA	; 0x8019da <_ppm+0x1>
    50ca:	21 15       	cp	r18, r1
    50cc:	31 05       	cpc	r19, r1
    50ce:	29 f4       	brne	.+10     	; 0x50da <mh_z19_getCo2Ppm+0x18>
    50d0:	fc 01       	movw	r30, r24
    50d2:	11 82       	std	Z+1, r1	; 0x01
    50d4:	10 82       	st	Z, r1
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	08 95       	ret
    50da:	fc 01       	movw	r30, r24
    50dc:	31 83       	std	Z+1, r19	; 0x01
    50de:	20 83       	st	Z, r18
    50e0:	80 e0       	ldi	r24, 0x00	; 0
    50e2:	08 95       	ret

000050e4 <rc_servo_setPosition>:
    50e4:	65 36       	cpi	r22, 0x65	; 101
    50e6:	0c f0       	brlt	.+2      	; 0x50ea <rc_servo_setPosition+0x6>
    50e8:	64 e6       	ldi	r22, 0x64	; 100
    50ea:	6c 39       	cpi	r22, 0x9C	; 156
    50ec:	0c f4       	brge	.+2      	; 0x50f0 <rc_servo_setPosition+0xc>
    50ee:	6c e9       	ldi	r22, 0x9C	; 156
    50f0:	96 ef       	ldi	r25, 0xF6	; 246
    50f2:	69 02       	muls	r22, r25
    50f4:	b0 01       	movw	r22, r0
    50f6:	11 24       	eor	r1, r1
    50f8:	68 54       	subi	r22, 0x48	; 72
    50fa:	74 4f       	sbci	r23, 0xF4	; 244
    50fc:	81 11       	cpse	r24, r1
    50fe:	05 c0       	rjmp	.+10     	; 0x510a <rc_servo_setPosition+0x26>
    5100:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    5104:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    5108:	08 95       	ret
    510a:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    510e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    5112:	08 95       	ret

00005114 <rc_servo_initialise>:
    5114:	ea e0       	ldi	r30, 0x0A	; 10
    5116:	f1 e0       	ldi	r31, 0x01	; 1
    5118:	80 81       	ld	r24, Z
    511a:	88 61       	ori	r24, 0x18	; 24
    511c:	80 83       	st	Z, r24
    511e:	8f e3       	ldi	r24, 0x3F	; 63
    5120:	9c e9       	ldi	r25, 0x9C	; 156
    5122:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    5126:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    512a:	60 e0       	ldi	r22, 0x00	; 0
    512c:	80 e0       	ldi	r24, 0x00	; 0
    512e:	da df       	rcall	.-76     	; 0x50e4 <rc_servo_setPosition>
    5130:	60 e0       	ldi	r22, 0x00	; 0
    5132:	81 e0       	ldi	r24, 0x01	; 1
    5134:	d7 df       	rcall	.-82     	; 0x50e4 <rc_servo_setPosition>
    5136:	e0 e2       	ldi	r30, 0x20	; 32
    5138:	f1 e0       	ldi	r31, 0x01	; 1
    513a:	80 81       	ld	r24, Z
    513c:	82 6a       	ori	r24, 0xA2	; 162
    513e:	80 83       	st	Z, r24
    5140:	e1 e2       	ldi	r30, 0x21	; 33
    5142:	f1 e0       	ldi	r31, 0x01	; 1
    5144:	80 81       	ld	r24, Z
    5146:	8a 61       	ori	r24, 0x1A	; 26
    5148:	80 83       	st	Z, r24
    514a:	08 95       	ret

0000514c <serial_create>:
    514c:	2f 92       	push	r2
    514e:	3f 92       	push	r3
    5150:	4f 92       	push	r4
    5152:	5f 92       	push	r5
    5154:	6f 92       	push	r6
    5156:	7f 92       	push	r7
    5158:	8f 92       	push	r8
    515a:	9f 92       	push	r9
    515c:	af 92       	push	r10
    515e:	cf 92       	push	r12
    5160:	ef 92       	push	r14
    5162:	ff 92       	push	r15
    5164:	0f 93       	push	r16
    5166:	1f 93       	push	r17
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	cd b7       	in	r28, 0x3d	; 61
    516e:	de b7       	in	r29, 0x3e	; 62
    5170:	f8 2e       	mov	r15, r24
    5172:	2a 01       	movw	r4, r20
    5174:	3b 01       	movw	r6, r22
    5176:	88 e0       	ldi	r24, 0x08	; 8
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	0e 94 75 37 	call	0x6eea	; 0x6eea <malloc>
    517e:	8c 01       	movw	r16, r24
    5180:	8f 2d       	mov	r24, r15
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	fc 01       	movw	r30, r24
    5186:	ee 0f       	add	r30, r30
    5188:	ff 1f       	adc	r31, r31
    518a:	e3 52       	subi	r30, 0x23	; 35
    518c:	f6 4e       	sbci	r31, 0xE6	; 230
    518e:	11 83       	std	Z+1, r17	; 0x01
    5190:	00 83       	st	Z, r16
    5192:	01 15       	cp	r16, r1
    5194:	11 05       	cpc	r17, r1
    5196:	09 f4       	brne	.+2      	; 0x519a <serial_create+0x4e>
    5198:	6f c0       	rjmp	.+222    	; 0x5278 <serial_create+0x12c>
    519a:	88 0f       	add	r24, r24
    519c:	99 1f       	adc	r25, r25
    519e:	fc 01       	movw	r30, r24
    51a0:	e5 5f       	subi	r30, 0xF5	; 245
    51a2:	fd 4f       	sbci	r31, 0xFD	; 253
    51a4:	80 81       	ld	r24, Z
    51a6:	91 81       	ldd	r25, Z+1	; 0x01
    51a8:	d8 01       	movw	r26, r16
    51aa:	8d 93       	st	X+, r24
    51ac:	9c 93       	st	X, r25
    51ae:	8c 2d       	mov	r24, r12
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	88 0f       	add	r24, r24
    51b4:	99 1f       	adc	r25, r25
    51b6:	88 0f       	add	r24, r24
    51b8:	99 1f       	adc	r25, r25
    51ba:	0e 94 75 37 	call	0x6eea	; 0x6eea <malloc>
    51be:	1c 01       	movw	r2, r24
    51c0:	86 e0       	ldi	r24, 0x06	; 6
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	0e 94 75 37 	call	0x6eea	; 0x6eea <malloc>
    51c8:	7c 01       	movw	r14, r24
    51ca:	4c 2d       	mov	r20, r12
    51cc:	b1 01       	movw	r22, r2
    51ce:	0e 94 58 31 	call	0x62b0	; 0x62b0 <fifo_init>
    51d2:	f8 01       	movw	r30, r16
    51d4:	f5 82       	std	Z+5, r15	; 0x05
    51d6:	e4 82       	std	Z+4, r14	; 0x04
    51d8:	8a 2d       	mov	r24, r10
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	88 0f       	add	r24, r24
    51de:	99 1f       	adc	r25, r25
    51e0:	88 0f       	add	r24, r24
    51e2:	99 1f       	adc	r25, r25
    51e4:	0e 94 75 37 	call	0x6eea	; 0x6eea <malloc>
    51e8:	1c 01       	movw	r2, r24
    51ea:	86 e0       	ldi	r24, 0x06	; 6
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	0e 94 75 37 	call	0x6eea	; 0x6eea <malloc>
    51f2:	7c 01       	movw	r14, r24
    51f4:	4a 2d       	mov	r20, r10
    51f6:	b1 01       	movw	r22, r2
    51f8:	0e 94 58 31 	call	0x62b0	; 0x62b0 <fifo_init>
    51fc:	d8 01       	movw	r26, r16
    51fe:	13 96       	adiw	r26, 0x03	; 3
    5200:	fc 92       	st	X, r15
    5202:	ee 92       	st	-X, r14
    5204:	12 97       	sbiw	r26, 0x02	; 2
    5206:	17 96       	adiw	r26, 0x07	; 7
    5208:	9c 92       	st	X, r9
    520a:	8e 92       	st	-X, r8
    520c:	16 97       	sbiw	r26, 0x06	; 6
    520e:	ff b6       	in	r15, 0x3f	; 63
    5210:	f8 94       	cli
    5212:	ed 91       	ld	r30, X+
    5214:	fc 91       	ld	r31, X
    5216:	11 97       	sbiw	r26, 0x01	; 1
    5218:	36 97       	sbiw	r30, 0x06	; 6
    521a:	80 81       	ld	r24, Z
    521c:	82 60       	ori	r24, 0x02	; 2
    521e:	80 83       	st	Z, r24
    5220:	8d 90       	ld	r8, X+
    5222:	9c 90       	ld	r9, X
    5224:	c3 01       	movw	r24, r6
    5226:	b2 01       	movw	r22, r4
    5228:	0e 94 fc 35 	call	0x6bf8	; 0x6bf8 <__floatunsisf>
    522c:	20 e0       	ldi	r18, 0x00	; 0
    522e:	30 e0       	ldi	r19, 0x00	; 0
    5230:	40 e0       	ldi	r20, 0x00	; 0
    5232:	51 e4       	ldi	r21, 0x41	; 65
    5234:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <__mulsf3>
    5238:	9b 01       	movw	r18, r22
    523a:	ac 01       	movw	r20, r24
    523c:	60 e0       	ldi	r22, 0x00	; 0
    523e:	74 e2       	ldi	r23, 0x24	; 36
    5240:	84 e7       	ldi	r24, 0x74	; 116
    5242:	9b e4       	ldi	r25, 0x4B	; 75
    5244:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__divsf3>
    5248:	20 e0       	ldi	r18, 0x00	; 0
    524a:	30 e0       	ldi	r19, 0x00	; 0
    524c:	40 e8       	ldi	r20, 0x80	; 128
    524e:	5f e3       	ldi	r21, 0x3F	; 63
    5250:	0e 94 fe 34 	call	0x69fc	; 0x69fc <__subsf3>
    5254:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <__fixunssfsi>
    5258:	f4 01       	movw	r30, r8
    525a:	32 97       	sbiw	r30, 0x02	; 2
    525c:	60 83       	st	Z, r22
    525e:	d8 01       	movw	r26, r16
    5260:	ed 91       	ld	r30, X+
    5262:	fc 91       	ld	r31, X
    5264:	11 97       	sbiw	r26, 0x01	; 1
    5266:	35 97       	sbiw	r30, 0x05	; 5
    5268:	88 e9       	ldi	r24, 0x98	; 152
    526a:	80 83       	st	Z, r24
    526c:	ed 91       	ld	r30, X+
    526e:	fc 91       	ld	r31, X
    5270:	34 97       	sbiw	r30, 0x04	; 4
    5272:	86 e0       	ldi	r24, 0x06	; 6
    5274:	80 83       	st	Z, r24
    5276:	ff be       	out	0x3f, r15	; 63
    5278:	c8 01       	movw	r24, r16
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	ff 90       	pop	r15
    5284:	ef 90       	pop	r14
    5286:	cf 90       	pop	r12
    5288:	af 90       	pop	r10
    528a:	9f 90       	pop	r9
    528c:	8f 90       	pop	r8
    528e:	7f 90       	pop	r7
    5290:	6f 90       	pop	r6
    5292:	5f 90       	pop	r5
    5294:	4f 90       	pop	r4
    5296:	3f 90       	pop	r3
    5298:	2f 90       	pop	r2
    529a:	08 95       	ret

0000529c <serial_sendByte>:
    529c:	cf 93       	push	r28
    529e:	df 93       	push	r29
    52a0:	dc 01       	movw	r26, r24
    52a2:	89 2b       	or	r24, r25
    52a4:	01 f1       	breq	.+64     	; 0x52e6 <serial_sendByte+0x4a>
    52a6:	12 96       	adiw	r26, 0x02	; 2
    52a8:	ed 91       	ld	r30, X+
    52aa:	fc 91       	ld	r31, X
    52ac:	13 97       	sbiw	r26, 0x03	; 3
    52ae:	93 81       	ldd	r25, Z+3	; 0x03
    52b0:	82 81       	ldd	r24, Z+2	; 0x02
    52b2:	25 81       	ldd	r18, Z+5	; 0x05
    52b4:	98 1b       	sub	r25, r24
    52b6:	92 23       	and	r25, r18
    52b8:	84 81       	ldd	r24, Z+4	; 0x04
    52ba:	98 17       	cp	r25, r24
    52bc:	b1 f0       	breq	.+44     	; 0x52ea <serial_sendByte+0x4e>
    52be:	83 81       	ldd	r24, Z+3	; 0x03
    52c0:	26 95       	lsr	r18
    52c2:	28 23       	and	r18, r24
    52c4:	c0 81       	ld	r28, Z
    52c6:	d1 81       	ldd	r29, Z+1	; 0x01
    52c8:	c2 0f       	add	r28, r18
    52ca:	d1 1d       	adc	r29, r1
    52cc:	68 83       	st	Y, r22
    52ce:	8f 5f       	subi	r24, 0xFF	; 255
    52d0:	95 81       	ldd	r25, Z+5	; 0x05
    52d2:	89 23       	and	r24, r25
    52d4:	83 83       	std	Z+3, r24	; 0x03
    52d6:	ed 91       	ld	r30, X+
    52d8:	fc 91       	ld	r31, X
    52da:	35 97       	sbiw	r30, 0x05	; 5
    52dc:	80 81       	ld	r24, Z
    52de:	80 62       	ori	r24, 0x20	; 32
    52e0:	80 83       	st	Z, r24
    52e2:	80 e0       	ldi	r24, 0x00	; 0
    52e4:	03 c0       	rjmp	.+6      	; 0x52ec <serial_sendByte+0x50>
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	01 c0       	rjmp	.+2      	; 0x52ec <serial_sendByte+0x50>
    52ea:	82 e0       	ldi	r24, 0x02	; 2
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	08 95       	ret

000052f2 <serial_sendBytes>:
    52f2:	ef 92       	push	r14
    52f4:	ff 92       	push	r15
    52f6:	0f 93       	push	r16
    52f8:	1f 93       	push	r17
    52fa:	cf 93       	push	r28
    52fc:	df 93       	push	r29
    52fe:	7c 01       	movw	r14, r24
    5300:	00 97       	sbiw	r24, 0x00	; 0
    5302:	09 f4       	brne	.+2      	; 0x5306 <serial_sendBytes+0x14>
    5304:	41 c0       	rjmp	.+130    	; 0x5388 <serial_sendBytes+0x96>
    5306:	dc 01       	movw	r26, r24
    5308:	12 96       	adiw	r26, 0x02	; 2
    530a:	ed 91       	ld	r30, X+
    530c:	fc 91       	ld	r31, X
    530e:	13 97       	sbiw	r26, 0x03	; 3
    5310:	93 81       	ldd	r25, Z+3	; 0x03
    5312:	82 81       	ldd	r24, Z+2	; 0x02
    5314:	98 1b       	sub	r25, r24
    5316:	85 81       	ldd	r24, Z+5	; 0x05
    5318:	98 23       	and	r25, r24
    531a:	84 81       	ldd	r24, Z+4	; 0x04
    531c:	89 1b       	sub	r24, r25
    531e:	86 17       	cp	r24, r22
    5320:	a8 f1       	brcs	.+106    	; 0x538c <serial_sendBytes+0x9a>
    5322:	66 23       	and	r22, r22
    5324:	41 f1       	breq	.+80     	; 0x5376 <serial_sendBytes+0x84>
    5326:	84 2f       	mov	r24, r20
    5328:	95 2f       	mov	r25, r21
    532a:	dc 01       	movw	r26, r24
    532c:	61 50       	subi	r22, 0x01	; 1
    532e:	46 2f       	mov	r20, r22
    5330:	50 e0       	ldi	r21, 0x00	; 0
    5332:	4f 5f       	subi	r20, 0xFF	; 255
    5334:	5f 4f       	sbci	r21, 0xFF	; 255
    5336:	48 0f       	add	r20, r24
    5338:	59 1f       	adc	r21, r25
    533a:	e7 01       	movw	r28, r14
    533c:	ea 81       	ldd	r30, Y+2	; 0x02
    533e:	fb 81       	ldd	r31, Y+3	; 0x03
    5340:	93 81       	ldd	r25, Z+3	; 0x03
    5342:	82 81       	ldd	r24, Z+2	; 0x02
    5344:	25 81       	ldd	r18, Z+5	; 0x05
    5346:	98 1b       	sub	r25, r24
    5348:	92 23       	and	r25, r18
    534a:	84 81       	ldd	r24, Z+4	; 0x04
    534c:	98 17       	cp	r25, r24
    534e:	79 f0       	breq	.+30     	; 0x536e <serial_sendBytes+0x7c>
    5350:	8c 91       	ld	r24, X
    5352:	93 81       	ldd	r25, Z+3	; 0x03
    5354:	26 95       	lsr	r18
    5356:	29 23       	and	r18, r25
    5358:	60 81       	ld	r22, Z
    535a:	71 81       	ldd	r23, Z+1	; 0x01
    535c:	8b 01       	movw	r16, r22
    535e:	02 0f       	add	r16, r18
    5360:	11 1d       	adc	r17, r1
    5362:	e8 01       	movw	r28, r16
    5364:	88 83       	st	Y, r24
    5366:	9f 5f       	subi	r25, 0xFF	; 255
    5368:	85 81       	ldd	r24, Z+5	; 0x05
    536a:	98 23       	and	r25, r24
    536c:	93 83       	std	Z+3, r25	; 0x03
    536e:	11 96       	adiw	r26, 0x01	; 1
    5370:	a4 17       	cp	r26, r20
    5372:	b5 07       	cpc	r27, r21
    5374:	11 f7       	brne	.-60     	; 0x533a <serial_sendBytes+0x48>
    5376:	d7 01       	movw	r26, r14
    5378:	ed 91       	ld	r30, X+
    537a:	fc 91       	ld	r31, X
    537c:	35 97       	sbiw	r30, 0x05	; 5
    537e:	80 81       	ld	r24, Z
    5380:	80 62       	ori	r24, 0x20	; 32
    5382:	80 83       	st	Z, r24
    5384:	80 e0       	ldi	r24, 0x00	; 0
    5386:	03 c0       	rjmp	.+6      	; 0x538e <serial_sendBytes+0x9c>
    5388:	81 e0       	ldi	r24, 0x01	; 1
    538a:	01 c0       	rjmp	.+2      	; 0x538e <serial_sendBytes+0x9c>
    538c:	82 e0       	ldi	r24, 0x02	; 2
    538e:	df 91       	pop	r29
    5390:	cf 91       	pop	r28
    5392:	1f 91       	pop	r17
    5394:	0f 91       	pop	r16
    5396:	ff 90       	pop	r15
    5398:	ef 90       	pop	r14
    539a:	08 95       	ret

0000539c <serial_getByte>:
    539c:	00 97       	sbiw	r24, 0x00	; 0
    539e:	d1 f0       	breq	.+52     	; 0x53d4 <serial_getByte+0x38>
    53a0:	dc 01       	movw	r26, r24
    53a2:	14 96       	adiw	r26, 0x04	; 4
    53a4:	ed 91       	ld	r30, X+
    53a6:	fc 91       	ld	r31, X
    53a8:	15 97       	sbiw	r26, 0x05	; 5
    53aa:	93 81       	ldd	r25, Z+3	; 0x03
    53ac:	82 81       	ldd	r24, Z+2	; 0x02
    53ae:	98 17       	cp	r25, r24
    53b0:	99 f0       	breq	.+38     	; 0x53d8 <serial_getByte+0x3c>
    53b2:	92 81       	ldd	r25, Z+2	; 0x02
    53b4:	85 81       	ldd	r24, Z+5	; 0x05
    53b6:	86 95       	lsr	r24
    53b8:	89 23       	and	r24, r25
    53ba:	a0 81       	ld	r26, Z
    53bc:	b1 81       	ldd	r27, Z+1	; 0x01
    53be:	a8 0f       	add	r26, r24
    53c0:	b1 1d       	adc	r27, r1
    53c2:	8c 91       	ld	r24, X
    53c4:	db 01       	movw	r26, r22
    53c6:	8c 93       	st	X, r24
    53c8:	9f 5f       	subi	r25, 0xFF	; 255
    53ca:	85 81       	ldd	r24, Z+5	; 0x05
    53cc:	98 23       	and	r25, r24
    53ce:	92 83       	std	Z+2, r25	; 0x02
    53d0:	80 e0       	ldi	r24, 0x00	; 0
    53d2:	08 95       	ret
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	08 95       	ret
    53d8:	83 e0       	ldi	r24, 0x03	; 3
    53da:	08 95       	ret

000053dc <__vector_25>:
    53dc:	1f 92       	push	r1
    53de:	0f 92       	push	r0
    53e0:	0f b6       	in	r0, 0x3f	; 63
    53e2:	0f 92       	push	r0
    53e4:	11 24       	eor	r1, r1
    53e6:	0b b6       	in	r0, 0x3b	; 59
    53e8:	0f 92       	push	r0
    53ea:	2f 93       	push	r18
    53ec:	3f 93       	push	r19
    53ee:	4f 93       	push	r20
    53f0:	5f 93       	push	r21
    53f2:	6f 93       	push	r22
    53f4:	7f 93       	push	r23
    53f6:	8f 93       	push	r24
    53f8:	9f 93       	push	r25
    53fa:	af 93       	push	r26
    53fc:	bf 93       	push	r27
    53fe:	cf 93       	push	r28
    5400:	df 93       	push	r29
    5402:	ef 93       	push	r30
    5404:	ff 93       	push	r31
    5406:	a0 91 dd 19 	lds	r26, 0x19DD	; 0x8019dd <_ser_handle>
    540a:	b0 91 de 19 	lds	r27, 0x19DE	; 0x8019de <_ser_handle+0x1>
    540e:	10 97       	sbiw	r26, 0x00	; 0
    5410:	11 f1       	breq	.+68     	; 0x5456 <__vector_25+0x7a>
    5412:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5416:	14 96       	adiw	r26, 0x04	; 4
    5418:	ed 91       	ld	r30, X+
    541a:	fc 91       	ld	r31, X
    541c:	15 97       	sbiw	r26, 0x05	; 5
    541e:	93 81       	ldd	r25, Z+3	; 0x03
    5420:	82 81       	ldd	r24, Z+2	; 0x02
    5422:	25 81       	ldd	r18, Z+5	; 0x05
    5424:	98 1b       	sub	r25, r24
    5426:	92 23       	and	r25, r18
    5428:	84 81       	ldd	r24, Z+4	; 0x04
    542a:	98 17       	cp	r25, r24
    542c:	61 f0       	breq	.+24     	; 0x5446 <__vector_25+0x6a>
    542e:	83 81       	ldd	r24, Z+3	; 0x03
    5430:	26 95       	lsr	r18
    5432:	28 23       	and	r18, r24
    5434:	c0 81       	ld	r28, Z
    5436:	d1 81       	ldd	r29, Z+1	; 0x01
    5438:	c2 0f       	add	r28, r18
    543a:	d1 1d       	adc	r29, r1
    543c:	68 83       	st	Y, r22
    543e:	8f 5f       	subi	r24, 0xFF	; 255
    5440:	95 81       	ldd	r25, Z+5	; 0x05
    5442:	89 23       	and	r24, r25
    5444:	83 83       	std	Z+3, r24	; 0x03
    5446:	16 96       	adiw	r26, 0x06	; 6
    5448:	ed 91       	ld	r30, X+
    544a:	fc 91       	ld	r31, X
    544c:	17 97       	sbiw	r26, 0x07	; 7
    544e:	30 97       	sbiw	r30, 0x00	; 0
    5450:	11 f0       	breq	.+4      	; 0x5456 <__vector_25+0x7a>
    5452:	cd 01       	movw	r24, r26
    5454:	19 95       	eicall
    5456:	ff 91       	pop	r31
    5458:	ef 91       	pop	r30
    545a:	df 91       	pop	r29
    545c:	cf 91       	pop	r28
    545e:	bf 91       	pop	r27
    5460:	af 91       	pop	r26
    5462:	9f 91       	pop	r25
    5464:	8f 91       	pop	r24
    5466:	7f 91       	pop	r23
    5468:	6f 91       	pop	r22
    546a:	5f 91       	pop	r21
    546c:	4f 91       	pop	r20
    546e:	3f 91       	pop	r19
    5470:	2f 91       	pop	r18
    5472:	0f 90       	pop	r0
    5474:	0b be       	out	0x3b, r0	; 59
    5476:	0f 90       	pop	r0
    5478:	0f be       	out	0x3f, r0	; 63
    547a:	0f 90       	pop	r0
    547c:	1f 90       	pop	r1
    547e:	18 95       	reti

00005480 <__vector_26>:
    5480:	1f 92       	push	r1
    5482:	0f 92       	push	r0
    5484:	0f b6       	in	r0, 0x3f	; 63
    5486:	0f 92       	push	r0
    5488:	11 24       	eor	r1, r1
    548a:	0b b6       	in	r0, 0x3b	; 59
    548c:	0f 92       	push	r0
    548e:	2f 93       	push	r18
    5490:	8f 93       	push	r24
    5492:	9f 93       	push	r25
    5494:	af 93       	push	r26
    5496:	bf 93       	push	r27
    5498:	ef 93       	push	r30
    549a:	ff 93       	push	r31
    549c:	e0 91 dd 19 	lds	r30, 0x19DD	; 0x8019dd <_ser_handle>
    54a0:	f0 91 de 19 	lds	r31, 0x19DE	; 0x8019de <_ser_handle+0x1>
    54a4:	30 97       	sbiw	r30, 0x00	; 0
    54a6:	b9 f0       	breq	.+46     	; 0x54d6 <__vector_26+0x56>
    54a8:	02 80       	ldd	r0, Z+2	; 0x02
    54aa:	f3 81       	ldd	r31, Z+3	; 0x03
    54ac:	e0 2d       	mov	r30, r0
    54ae:	93 81       	ldd	r25, Z+3	; 0x03
    54b0:	82 81       	ldd	r24, Z+2	; 0x02
    54b2:	98 17       	cp	r25, r24
    54b4:	b1 f0       	breq	.+44     	; 0x54e2 <__vector_26+0x62>
    54b6:	92 81       	ldd	r25, Z+2	; 0x02
    54b8:	85 81       	ldd	r24, Z+5	; 0x05
    54ba:	28 2f       	mov	r18, r24
    54bc:	26 95       	lsr	r18
    54be:	29 23       	and	r18, r25
    54c0:	a0 81       	ld	r26, Z
    54c2:	b1 81       	ldd	r27, Z+1	; 0x01
    54c4:	a2 0f       	add	r26, r18
    54c6:	b1 1d       	adc	r27, r1
    54c8:	2c 91       	ld	r18, X
    54ca:	9f 5f       	subi	r25, 0xFF	; 255
    54cc:	89 23       	and	r24, r25
    54ce:	82 83       	std	Z+2, r24	; 0x02
    54d0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    54d4:	0b c0       	rjmp	.+22     	; 0x54ec <__vector_26+0x6c>
    54d6:	e1 ec       	ldi	r30, 0xC1	; 193
    54d8:	f0 e0       	ldi	r31, 0x00	; 0
    54da:	80 81       	ld	r24, Z
    54dc:	8f 7d       	andi	r24, 0xDF	; 223
    54de:	80 83       	st	Z, r24
    54e0:	05 c0       	rjmp	.+10     	; 0x54ec <__vector_26+0x6c>
    54e2:	e1 ec       	ldi	r30, 0xC1	; 193
    54e4:	f0 e0       	ldi	r31, 0x00	; 0
    54e6:	80 81       	ld	r24, Z
    54e8:	8f 7d       	andi	r24, 0xDF	; 223
    54ea:	80 83       	st	Z, r24
    54ec:	ff 91       	pop	r31
    54ee:	ef 91       	pop	r30
    54f0:	bf 91       	pop	r27
    54f2:	af 91       	pop	r26
    54f4:	9f 91       	pop	r25
    54f6:	8f 91       	pop	r24
    54f8:	2f 91       	pop	r18
    54fa:	0f 90       	pop	r0
    54fc:	0b be       	out	0x3b, r0	; 59
    54fe:	0f 90       	pop	r0
    5500:	0f be       	out	0x3f, r0	; 63
    5502:	0f 90       	pop	r0
    5504:	1f 90       	pop	r1
    5506:	18 95       	reti

00005508 <__vector_36>:
    5508:	1f 92       	push	r1
    550a:	0f 92       	push	r0
    550c:	0f b6       	in	r0, 0x3f	; 63
    550e:	0f 92       	push	r0
    5510:	11 24       	eor	r1, r1
    5512:	0b b6       	in	r0, 0x3b	; 59
    5514:	0f 92       	push	r0
    5516:	2f 93       	push	r18
    5518:	3f 93       	push	r19
    551a:	4f 93       	push	r20
    551c:	5f 93       	push	r21
    551e:	6f 93       	push	r22
    5520:	7f 93       	push	r23
    5522:	8f 93       	push	r24
    5524:	9f 93       	push	r25
    5526:	af 93       	push	r26
    5528:	bf 93       	push	r27
    552a:	cf 93       	push	r28
    552c:	df 93       	push	r29
    552e:	ef 93       	push	r30
    5530:	ff 93       	push	r31
    5532:	a0 91 df 19 	lds	r26, 0x19DF	; 0x8019df <_ser_handle+0x2>
    5536:	b0 91 e0 19 	lds	r27, 0x19E0	; 0x8019e0 <_ser_handle+0x3>
    553a:	10 97       	sbiw	r26, 0x00	; 0
    553c:	11 f1       	breq	.+68     	; 0x5582 <__vector_36+0x7a>
    553e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5542:	14 96       	adiw	r26, 0x04	; 4
    5544:	ed 91       	ld	r30, X+
    5546:	fc 91       	ld	r31, X
    5548:	15 97       	sbiw	r26, 0x05	; 5
    554a:	93 81       	ldd	r25, Z+3	; 0x03
    554c:	82 81       	ldd	r24, Z+2	; 0x02
    554e:	25 81       	ldd	r18, Z+5	; 0x05
    5550:	98 1b       	sub	r25, r24
    5552:	92 23       	and	r25, r18
    5554:	84 81       	ldd	r24, Z+4	; 0x04
    5556:	98 17       	cp	r25, r24
    5558:	61 f0       	breq	.+24     	; 0x5572 <__vector_36+0x6a>
    555a:	83 81       	ldd	r24, Z+3	; 0x03
    555c:	26 95       	lsr	r18
    555e:	28 23       	and	r18, r24
    5560:	c0 81       	ld	r28, Z
    5562:	d1 81       	ldd	r29, Z+1	; 0x01
    5564:	c2 0f       	add	r28, r18
    5566:	d1 1d       	adc	r29, r1
    5568:	68 83       	st	Y, r22
    556a:	8f 5f       	subi	r24, 0xFF	; 255
    556c:	95 81       	ldd	r25, Z+5	; 0x05
    556e:	89 23       	and	r24, r25
    5570:	83 83       	std	Z+3, r24	; 0x03
    5572:	16 96       	adiw	r26, 0x06	; 6
    5574:	ed 91       	ld	r30, X+
    5576:	fc 91       	ld	r31, X
    5578:	17 97       	sbiw	r26, 0x07	; 7
    557a:	30 97       	sbiw	r30, 0x00	; 0
    557c:	11 f0       	breq	.+4      	; 0x5582 <__vector_36+0x7a>
    557e:	cd 01       	movw	r24, r26
    5580:	19 95       	eicall
    5582:	ff 91       	pop	r31
    5584:	ef 91       	pop	r30
    5586:	df 91       	pop	r29
    5588:	cf 91       	pop	r28
    558a:	bf 91       	pop	r27
    558c:	af 91       	pop	r26
    558e:	9f 91       	pop	r25
    5590:	8f 91       	pop	r24
    5592:	7f 91       	pop	r23
    5594:	6f 91       	pop	r22
    5596:	5f 91       	pop	r21
    5598:	4f 91       	pop	r20
    559a:	3f 91       	pop	r19
    559c:	2f 91       	pop	r18
    559e:	0f 90       	pop	r0
    55a0:	0b be       	out	0x3b, r0	; 59
    55a2:	0f 90       	pop	r0
    55a4:	0f be       	out	0x3f, r0	; 63
    55a6:	0f 90       	pop	r0
    55a8:	1f 90       	pop	r1
    55aa:	18 95       	reti

000055ac <__vector_37>:
    55ac:	1f 92       	push	r1
    55ae:	0f 92       	push	r0
    55b0:	0f b6       	in	r0, 0x3f	; 63
    55b2:	0f 92       	push	r0
    55b4:	11 24       	eor	r1, r1
    55b6:	0b b6       	in	r0, 0x3b	; 59
    55b8:	0f 92       	push	r0
    55ba:	2f 93       	push	r18
    55bc:	8f 93       	push	r24
    55be:	9f 93       	push	r25
    55c0:	af 93       	push	r26
    55c2:	bf 93       	push	r27
    55c4:	ef 93       	push	r30
    55c6:	ff 93       	push	r31
    55c8:	e0 91 df 19 	lds	r30, 0x19DF	; 0x8019df <_ser_handle+0x2>
    55cc:	f0 91 e0 19 	lds	r31, 0x19E0	; 0x8019e0 <_ser_handle+0x3>
    55d0:	30 97       	sbiw	r30, 0x00	; 0
    55d2:	b9 f0       	breq	.+46     	; 0x5602 <__vector_37+0x56>
    55d4:	02 80       	ldd	r0, Z+2	; 0x02
    55d6:	f3 81       	ldd	r31, Z+3	; 0x03
    55d8:	e0 2d       	mov	r30, r0
    55da:	93 81       	ldd	r25, Z+3	; 0x03
    55dc:	82 81       	ldd	r24, Z+2	; 0x02
    55de:	98 17       	cp	r25, r24
    55e0:	b1 f0       	breq	.+44     	; 0x560e <__vector_37+0x62>
    55e2:	92 81       	ldd	r25, Z+2	; 0x02
    55e4:	85 81       	ldd	r24, Z+5	; 0x05
    55e6:	28 2f       	mov	r18, r24
    55e8:	26 95       	lsr	r18
    55ea:	29 23       	and	r18, r25
    55ec:	a0 81       	ld	r26, Z
    55ee:	b1 81       	ldd	r27, Z+1	; 0x01
    55f0:	a2 0f       	add	r26, r18
    55f2:	b1 1d       	adc	r27, r1
    55f4:	2c 91       	ld	r18, X
    55f6:	9f 5f       	subi	r25, 0xFF	; 255
    55f8:	89 23       	and	r24, r25
    55fa:	82 83       	std	Z+2, r24	; 0x02
    55fc:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5600:	0b c0       	rjmp	.+22     	; 0x5618 <__vector_37+0x6c>
    5602:	e9 ec       	ldi	r30, 0xC9	; 201
    5604:	f0 e0       	ldi	r31, 0x00	; 0
    5606:	80 81       	ld	r24, Z
    5608:	8f 7d       	andi	r24, 0xDF	; 223
    560a:	80 83       	st	Z, r24
    560c:	05 c0       	rjmp	.+10     	; 0x5618 <__vector_37+0x6c>
    560e:	e9 ec       	ldi	r30, 0xC9	; 201
    5610:	f0 e0       	ldi	r31, 0x00	; 0
    5612:	80 81       	ld	r24, Z
    5614:	8f 7d       	andi	r24, 0xDF	; 223
    5616:	80 83       	st	Z, r24
    5618:	ff 91       	pop	r31
    561a:	ef 91       	pop	r30
    561c:	bf 91       	pop	r27
    561e:	af 91       	pop	r26
    5620:	9f 91       	pop	r25
    5622:	8f 91       	pop	r24
    5624:	2f 91       	pop	r18
    5626:	0f 90       	pop	r0
    5628:	0b be       	out	0x3b, r0	; 59
    562a:	0f 90       	pop	r0
    562c:	0f be       	out	0x3f, r0	; 63
    562e:	0f 90       	pop	r0
    5630:	1f 90       	pop	r1
    5632:	18 95       	reti

00005634 <__vector_51>:
    5634:	1f 92       	push	r1
    5636:	0f 92       	push	r0
    5638:	0f b6       	in	r0, 0x3f	; 63
    563a:	0f 92       	push	r0
    563c:	11 24       	eor	r1, r1
    563e:	0b b6       	in	r0, 0x3b	; 59
    5640:	0f 92       	push	r0
    5642:	2f 93       	push	r18
    5644:	3f 93       	push	r19
    5646:	4f 93       	push	r20
    5648:	5f 93       	push	r21
    564a:	6f 93       	push	r22
    564c:	7f 93       	push	r23
    564e:	8f 93       	push	r24
    5650:	9f 93       	push	r25
    5652:	af 93       	push	r26
    5654:	bf 93       	push	r27
    5656:	cf 93       	push	r28
    5658:	df 93       	push	r29
    565a:	ef 93       	push	r30
    565c:	ff 93       	push	r31
    565e:	a0 91 e1 19 	lds	r26, 0x19E1	; 0x8019e1 <_ser_handle+0x4>
    5662:	b0 91 e2 19 	lds	r27, 0x19E2	; 0x8019e2 <_ser_handle+0x5>
    5666:	10 97       	sbiw	r26, 0x00	; 0
    5668:	11 f1       	breq	.+68     	; 0x56ae <__vector_51+0x7a>
    566a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    566e:	14 96       	adiw	r26, 0x04	; 4
    5670:	ed 91       	ld	r30, X+
    5672:	fc 91       	ld	r31, X
    5674:	15 97       	sbiw	r26, 0x05	; 5
    5676:	93 81       	ldd	r25, Z+3	; 0x03
    5678:	82 81       	ldd	r24, Z+2	; 0x02
    567a:	25 81       	ldd	r18, Z+5	; 0x05
    567c:	98 1b       	sub	r25, r24
    567e:	92 23       	and	r25, r18
    5680:	84 81       	ldd	r24, Z+4	; 0x04
    5682:	98 17       	cp	r25, r24
    5684:	61 f0       	breq	.+24     	; 0x569e <__vector_51+0x6a>
    5686:	83 81       	ldd	r24, Z+3	; 0x03
    5688:	26 95       	lsr	r18
    568a:	28 23       	and	r18, r24
    568c:	c0 81       	ld	r28, Z
    568e:	d1 81       	ldd	r29, Z+1	; 0x01
    5690:	c2 0f       	add	r28, r18
    5692:	d1 1d       	adc	r29, r1
    5694:	68 83       	st	Y, r22
    5696:	8f 5f       	subi	r24, 0xFF	; 255
    5698:	95 81       	ldd	r25, Z+5	; 0x05
    569a:	89 23       	and	r24, r25
    569c:	83 83       	std	Z+3, r24	; 0x03
    569e:	16 96       	adiw	r26, 0x06	; 6
    56a0:	ed 91       	ld	r30, X+
    56a2:	fc 91       	ld	r31, X
    56a4:	17 97       	sbiw	r26, 0x07	; 7
    56a6:	30 97       	sbiw	r30, 0x00	; 0
    56a8:	11 f0       	breq	.+4      	; 0x56ae <__vector_51+0x7a>
    56aa:	cd 01       	movw	r24, r26
    56ac:	19 95       	eicall
    56ae:	ff 91       	pop	r31
    56b0:	ef 91       	pop	r30
    56b2:	df 91       	pop	r29
    56b4:	cf 91       	pop	r28
    56b6:	bf 91       	pop	r27
    56b8:	af 91       	pop	r26
    56ba:	9f 91       	pop	r25
    56bc:	8f 91       	pop	r24
    56be:	7f 91       	pop	r23
    56c0:	6f 91       	pop	r22
    56c2:	5f 91       	pop	r21
    56c4:	4f 91       	pop	r20
    56c6:	3f 91       	pop	r19
    56c8:	2f 91       	pop	r18
    56ca:	0f 90       	pop	r0
    56cc:	0b be       	out	0x3b, r0	; 59
    56ce:	0f 90       	pop	r0
    56d0:	0f be       	out	0x3f, r0	; 63
    56d2:	0f 90       	pop	r0
    56d4:	1f 90       	pop	r1
    56d6:	18 95       	reti

000056d8 <__vector_52>:
    56d8:	1f 92       	push	r1
    56da:	0f 92       	push	r0
    56dc:	0f b6       	in	r0, 0x3f	; 63
    56de:	0f 92       	push	r0
    56e0:	11 24       	eor	r1, r1
    56e2:	0b b6       	in	r0, 0x3b	; 59
    56e4:	0f 92       	push	r0
    56e6:	2f 93       	push	r18
    56e8:	8f 93       	push	r24
    56ea:	9f 93       	push	r25
    56ec:	af 93       	push	r26
    56ee:	bf 93       	push	r27
    56f0:	ef 93       	push	r30
    56f2:	ff 93       	push	r31
    56f4:	e0 91 e1 19 	lds	r30, 0x19E1	; 0x8019e1 <_ser_handle+0x4>
    56f8:	f0 91 e2 19 	lds	r31, 0x19E2	; 0x8019e2 <_ser_handle+0x5>
    56fc:	30 97       	sbiw	r30, 0x00	; 0
    56fe:	b9 f0       	breq	.+46     	; 0x572e <__vector_52+0x56>
    5700:	02 80       	ldd	r0, Z+2	; 0x02
    5702:	f3 81       	ldd	r31, Z+3	; 0x03
    5704:	e0 2d       	mov	r30, r0
    5706:	93 81       	ldd	r25, Z+3	; 0x03
    5708:	82 81       	ldd	r24, Z+2	; 0x02
    570a:	98 17       	cp	r25, r24
    570c:	b1 f0       	breq	.+44     	; 0x573a <__vector_52+0x62>
    570e:	92 81       	ldd	r25, Z+2	; 0x02
    5710:	85 81       	ldd	r24, Z+5	; 0x05
    5712:	28 2f       	mov	r18, r24
    5714:	26 95       	lsr	r18
    5716:	29 23       	and	r18, r25
    5718:	a0 81       	ld	r26, Z
    571a:	b1 81       	ldd	r27, Z+1	; 0x01
    571c:	a2 0f       	add	r26, r18
    571e:	b1 1d       	adc	r27, r1
    5720:	2c 91       	ld	r18, X
    5722:	9f 5f       	subi	r25, 0xFF	; 255
    5724:	89 23       	and	r24, r25
    5726:	82 83       	std	Z+2, r24	; 0x02
    5728:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    572c:	0b c0       	rjmp	.+22     	; 0x5744 <__vector_52+0x6c>
    572e:	e1 ed       	ldi	r30, 0xD1	; 209
    5730:	f0 e0       	ldi	r31, 0x00	; 0
    5732:	80 81       	ld	r24, Z
    5734:	8f 7d       	andi	r24, 0xDF	; 223
    5736:	80 83       	st	Z, r24
    5738:	05 c0       	rjmp	.+10     	; 0x5744 <__vector_52+0x6c>
    573a:	e1 ed       	ldi	r30, 0xD1	; 209
    573c:	f0 e0       	ldi	r31, 0x00	; 0
    573e:	80 81       	ld	r24, Z
    5740:	8f 7d       	andi	r24, 0xDF	; 223
    5742:	80 83       	st	Z, r24
    5744:	ff 91       	pop	r31
    5746:	ef 91       	pop	r30
    5748:	bf 91       	pop	r27
    574a:	af 91       	pop	r26
    574c:	9f 91       	pop	r25
    574e:	8f 91       	pop	r24
    5750:	2f 91       	pop	r18
    5752:	0f 90       	pop	r0
    5754:	0b be       	out	0x3b, r0	; 59
    5756:	0f 90       	pop	r0
    5758:	0f be       	out	0x3f, r0	; 63
    575a:	0f 90       	pop	r0
    575c:	1f 90       	pop	r1
    575e:	18 95       	reti

00005760 <__vector_54>:
    5760:	1f 92       	push	r1
    5762:	0f 92       	push	r0
    5764:	0f b6       	in	r0, 0x3f	; 63
    5766:	0f 92       	push	r0
    5768:	11 24       	eor	r1, r1
    576a:	0b b6       	in	r0, 0x3b	; 59
    576c:	0f 92       	push	r0
    576e:	2f 93       	push	r18
    5770:	3f 93       	push	r19
    5772:	4f 93       	push	r20
    5774:	5f 93       	push	r21
    5776:	6f 93       	push	r22
    5778:	7f 93       	push	r23
    577a:	8f 93       	push	r24
    577c:	9f 93       	push	r25
    577e:	af 93       	push	r26
    5780:	bf 93       	push	r27
    5782:	cf 93       	push	r28
    5784:	df 93       	push	r29
    5786:	ef 93       	push	r30
    5788:	ff 93       	push	r31
    578a:	a0 91 e3 19 	lds	r26, 0x19E3	; 0x8019e3 <_ser_handle+0x6>
    578e:	b0 91 e4 19 	lds	r27, 0x19E4	; 0x8019e4 <_ser_handle+0x7>
    5792:	10 97       	sbiw	r26, 0x00	; 0
    5794:	11 f1       	breq	.+68     	; 0x57da <__vector_54+0x7a>
    5796:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    579a:	14 96       	adiw	r26, 0x04	; 4
    579c:	ed 91       	ld	r30, X+
    579e:	fc 91       	ld	r31, X
    57a0:	15 97       	sbiw	r26, 0x05	; 5
    57a2:	93 81       	ldd	r25, Z+3	; 0x03
    57a4:	82 81       	ldd	r24, Z+2	; 0x02
    57a6:	25 81       	ldd	r18, Z+5	; 0x05
    57a8:	98 1b       	sub	r25, r24
    57aa:	92 23       	and	r25, r18
    57ac:	84 81       	ldd	r24, Z+4	; 0x04
    57ae:	98 17       	cp	r25, r24
    57b0:	61 f0       	breq	.+24     	; 0x57ca <__vector_54+0x6a>
    57b2:	83 81       	ldd	r24, Z+3	; 0x03
    57b4:	26 95       	lsr	r18
    57b6:	28 23       	and	r18, r24
    57b8:	c0 81       	ld	r28, Z
    57ba:	d1 81       	ldd	r29, Z+1	; 0x01
    57bc:	c2 0f       	add	r28, r18
    57be:	d1 1d       	adc	r29, r1
    57c0:	68 83       	st	Y, r22
    57c2:	8f 5f       	subi	r24, 0xFF	; 255
    57c4:	95 81       	ldd	r25, Z+5	; 0x05
    57c6:	89 23       	and	r24, r25
    57c8:	83 83       	std	Z+3, r24	; 0x03
    57ca:	16 96       	adiw	r26, 0x06	; 6
    57cc:	ed 91       	ld	r30, X+
    57ce:	fc 91       	ld	r31, X
    57d0:	17 97       	sbiw	r26, 0x07	; 7
    57d2:	30 97       	sbiw	r30, 0x00	; 0
    57d4:	11 f0       	breq	.+4      	; 0x57da <__vector_54+0x7a>
    57d6:	cd 01       	movw	r24, r26
    57d8:	19 95       	eicall
    57da:	ff 91       	pop	r31
    57dc:	ef 91       	pop	r30
    57de:	df 91       	pop	r29
    57e0:	cf 91       	pop	r28
    57e2:	bf 91       	pop	r27
    57e4:	af 91       	pop	r26
    57e6:	9f 91       	pop	r25
    57e8:	8f 91       	pop	r24
    57ea:	7f 91       	pop	r23
    57ec:	6f 91       	pop	r22
    57ee:	5f 91       	pop	r21
    57f0:	4f 91       	pop	r20
    57f2:	3f 91       	pop	r19
    57f4:	2f 91       	pop	r18
    57f6:	0f 90       	pop	r0
    57f8:	0b be       	out	0x3b, r0	; 59
    57fa:	0f 90       	pop	r0
    57fc:	0f be       	out	0x3f, r0	; 63
    57fe:	0f 90       	pop	r0
    5800:	1f 90       	pop	r1
    5802:	18 95       	reti

00005804 <__vector_55>:
    5804:	1f 92       	push	r1
    5806:	0f 92       	push	r0
    5808:	0f b6       	in	r0, 0x3f	; 63
    580a:	0f 92       	push	r0
    580c:	11 24       	eor	r1, r1
    580e:	0b b6       	in	r0, 0x3b	; 59
    5810:	0f 92       	push	r0
    5812:	2f 93       	push	r18
    5814:	8f 93       	push	r24
    5816:	9f 93       	push	r25
    5818:	af 93       	push	r26
    581a:	bf 93       	push	r27
    581c:	ef 93       	push	r30
    581e:	ff 93       	push	r31
    5820:	e0 91 e3 19 	lds	r30, 0x19E3	; 0x8019e3 <_ser_handle+0x6>
    5824:	f0 91 e4 19 	lds	r31, 0x19E4	; 0x8019e4 <_ser_handle+0x7>
    5828:	30 97       	sbiw	r30, 0x00	; 0
    582a:	b9 f0       	breq	.+46     	; 0x585a <__vector_55+0x56>
    582c:	02 80       	ldd	r0, Z+2	; 0x02
    582e:	f3 81       	ldd	r31, Z+3	; 0x03
    5830:	e0 2d       	mov	r30, r0
    5832:	93 81       	ldd	r25, Z+3	; 0x03
    5834:	82 81       	ldd	r24, Z+2	; 0x02
    5836:	98 17       	cp	r25, r24
    5838:	b1 f0       	breq	.+44     	; 0x5866 <__vector_55+0x62>
    583a:	92 81       	ldd	r25, Z+2	; 0x02
    583c:	85 81       	ldd	r24, Z+5	; 0x05
    583e:	28 2f       	mov	r18, r24
    5840:	26 95       	lsr	r18
    5842:	29 23       	and	r18, r25
    5844:	a0 81       	ld	r26, Z
    5846:	b1 81       	ldd	r27, Z+1	; 0x01
    5848:	a2 0f       	add	r26, r18
    584a:	b1 1d       	adc	r27, r1
    584c:	2c 91       	ld	r18, X
    584e:	9f 5f       	subi	r25, 0xFF	; 255
    5850:	89 23       	and	r24, r25
    5852:	82 83       	std	Z+2, r24	; 0x02
    5854:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5858:	0b c0       	rjmp	.+22     	; 0x5870 <__vector_55+0x6c>
    585a:	e1 e3       	ldi	r30, 0x31	; 49
    585c:	f1 e0       	ldi	r31, 0x01	; 1
    585e:	80 81       	ld	r24, Z
    5860:	8f 7d       	andi	r24, 0xDF	; 223
    5862:	80 83       	st	Z, r24
    5864:	05 c0       	rjmp	.+10     	; 0x5870 <__vector_55+0x6c>
    5866:	e1 e3       	ldi	r30, 0x31	; 49
    5868:	f1 e0       	ldi	r31, 0x01	; 1
    586a:	80 81       	ld	r24, Z
    586c:	8f 7d       	andi	r24, 0xDF	; 223
    586e:	80 83       	st	Z, r24
    5870:	ff 91       	pop	r31
    5872:	ef 91       	pop	r30
    5874:	bf 91       	pop	r27
    5876:	af 91       	pop	r26
    5878:	9f 91       	pop	r25
    587a:	8f 91       	pop	r24
    587c:	2f 91       	pop	r18
    587e:	0f 90       	pop	r0
    5880:	0b be       	out	0x3b, r0	; 59
    5882:	0f 90       	pop	r0
    5884:	0f be       	out	0x3f, r0	; 63
    5886:	0f 90       	pop	r0
    5888:	1f 90       	pop	r1
    588a:	18 95       	reti

0000588c <usart_getchar>:
    588c:	cf 93       	push	r28
    588e:	df 93       	push	r29
    5890:	1f 92       	push	r1
    5892:	cd b7       	in	r28, 0x3d	; 61
    5894:	de b7       	in	r29, 0x3e	; 62
    5896:	be 01       	movw	r22, r28
    5898:	6f 5f       	subi	r22, 0xFF	; 255
    589a:	7f 4f       	sbci	r23, 0xFF	; 255
    589c:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <_com_serial_instance>
    58a0:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <_com_serial_instance+0x1>
    58a4:	7b dd       	rcall	.-1290   	; 0x539c <serial_getByte>
    58a6:	81 11       	cpse	r24, r1
    58a8:	f6 cf       	rjmp	.-20     	; 0x5896 <usart_getchar+0xa>
    58aa:	89 81       	ldd	r24, Y+1	; 0x01
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	0f 90       	pop	r0
    58b0:	df 91       	pop	r29
    58b2:	cf 91       	pop	r28
    58b4:	08 95       	ret

000058b6 <usart_putchar>:
    58b6:	68 2f       	mov	r22, r24
    58b8:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <_com_serial_instance>
    58bc:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <_com_serial_instance+0x1>
    58c0:	ed dc       	rcall	.-1574   	; 0x529c <serial_sendByte>
    58c2:	80 e0       	ldi	r24, 0x00	; 0
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	08 95       	ret

000058c8 <stdio_initialise>:
    58c8:	8f 92       	push	r8
    58ca:	9f 92       	push	r9
    58cc:	af 92       	push	r10
    58ce:	cf 92       	push	r12
    58d0:	ef 92       	push	r14
    58d2:	0f 93       	push	r16
    58d4:	81 2c       	mov	r8, r1
    58d6:	91 2c       	mov	r9, r1
    58d8:	68 94       	set
    58da:	aa 24       	eor	r10, r10
    58dc:	a7 f8       	bld	r10, 7
    58de:	68 94       	set
    58e0:	cc 24       	eor	r12, r12
    58e2:	c7 f8       	bld	r12, 7
    58e4:	e1 2c       	mov	r14, r1
    58e6:	00 e0       	ldi	r16, 0x00	; 0
    58e8:	23 e0       	ldi	r18, 0x03	; 3
    58ea:	40 e0       	ldi	r20, 0x00	; 0
    58ec:	51 ee       	ldi	r21, 0xE1	; 225
    58ee:	60 e0       	ldi	r22, 0x00	; 0
    58f0:	70 e0       	ldi	r23, 0x00	; 0
    58f2:	2c dc       	rcall	.-1960   	; 0x514c <serial_create>
    58f4:	90 93 e6 19 	sts	0x19E6, r25	; 0x8019e6 <_com_serial_instance+0x1>
    58f8:	80 93 e5 19 	sts	0x19E5, r24	; 0x8019e5 <_com_serial_instance>
    58fc:	e9 e2       	ldi	r30, 0x29	; 41
    58fe:	fa e1       	ldi	r31, 0x1A	; 26
    5900:	83 e1       	ldi	r24, 0x13	; 19
    5902:	92 e0       	ldi	r25, 0x02	; 2
    5904:	91 83       	std	Z+1, r25	; 0x01
    5906:	80 83       	st	Z, r24
    5908:	93 83       	std	Z+3, r25	; 0x03
    590a:	82 83       	std	Z+2, r24	; 0x02
    590c:	0f 91       	pop	r16
    590e:	ef 90       	pop	r14
    5910:	cf 90       	pop	r12
    5912:	af 90       	pop	r10
    5914:	9f 90       	pop	r9
    5916:	8f 90       	pop	r8
    5918:	08 95       	ret

0000591a <_turn_off>:
    591a:	90 e0       	ldi	r25, 0x00	; 0
    591c:	fc 01       	movw	r30, r24
    591e:	ee 0f       	add	r30, r30
    5920:	ff 1f       	adc	r31, r31
    5922:	e8 0f       	add	r30, r24
    5924:	f9 1f       	adc	r31, r25
    5926:	ee 0f       	add	r30, r30
    5928:	ff 1f       	adc	r31, r31
    592a:	e9 51       	subi	r30, 0x19	; 25
    592c:	f6 4e       	sbci	r31, 0xE6	; 230
    592e:	23 81       	ldd	r18, Z+3	; 0x03
    5930:	21 11       	cpse	r18, r1
    5932:	1f c0       	rjmp	.+62     	; 0x5972 <_turn_off+0x58>
    5934:	9c 01       	movw	r18, r24
    5936:	22 0f       	add	r18, r18
    5938:	33 1f       	adc	r19, r19
    593a:	f9 01       	movw	r30, r18
    593c:	e8 0f       	add	r30, r24
    593e:	f9 1f       	adc	r31, r25
    5940:	ee 0f       	add	r30, r30
    5942:	ff 1f       	adc	r31, r31
    5944:	e9 51       	subi	r30, 0x19	; 25
    5946:	f6 4e       	sbci	r31, 0xE6	; 230
    5948:	a0 81       	ld	r26, Z
    594a:	b1 81       	ldd	r27, Z+1	; 0x01
    594c:	4c 91       	ld	r20, X
    594e:	f9 01       	movw	r30, r18
    5950:	e8 0f       	add	r30, r24
    5952:	f9 1f       	adc	r31, r25
    5954:	ee 0f       	add	r30, r30
    5956:	ff 1f       	adc	r31, r31
    5958:	e9 51       	subi	r30, 0x19	; 25
    595a:	f6 4e       	sbci	r31, 0xE6	; 230
    595c:	81 e0       	ldi	r24, 0x01	; 1
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	02 80       	ldd	r0, Z+2	; 0x02
    5962:	02 c0       	rjmp	.+4      	; 0x5968 <_turn_off+0x4e>
    5964:	88 0f       	add	r24, r24
    5966:	99 1f       	adc	r25, r25
    5968:	0a 94       	dec	r0
    596a:	e2 f7       	brpl	.-8      	; 0x5964 <_turn_off+0x4a>
    596c:	84 2b       	or	r24, r20
    596e:	8c 93       	st	X, r24
    5970:	08 95       	ret
    5972:	fc 01       	movw	r30, r24
    5974:	ee 0f       	add	r30, r30
    5976:	ff 1f       	adc	r31, r31
    5978:	df 01       	movw	r26, r30
    597a:	a8 0f       	add	r26, r24
    597c:	b9 1f       	adc	r27, r25
    597e:	aa 0f       	add	r26, r26
    5980:	bb 1f       	adc	r27, r27
    5982:	a9 51       	subi	r26, 0x19	; 25
    5984:	b6 4e       	sbci	r27, 0xE6	; 230
    5986:	0d 90       	ld	r0, X+
    5988:	bc 91       	ld	r27, X
    598a:	a0 2d       	mov	r26, r0
    598c:	2c 91       	ld	r18, X
    598e:	e8 0f       	add	r30, r24
    5990:	f9 1f       	adc	r31, r25
    5992:	ee 0f       	add	r30, r30
    5994:	ff 1f       	adc	r31, r31
    5996:	e9 51       	subi	r30, 0x19	; 25
    5998:	f6 4e       	sbci	r31, 0xE6	; 230
    599a:	81 e0       	ldi	r24, 0x01	; 1
    599c:	90 e0       	ldi	r25, 0x00	; 0
    599e:	02 80       	ldd	r0, Z+2	; 0x02
    59a0:	02 c0       	rjmp	.+4      	; 0x59a6 <_turn_off+0x8c>
    59a2:	88 0f       	add	r24, r24
    59a4:	99 1f       	adc	r25, r25
    59a6:	0a 94       	dec	r0
    59a8:	e2 f7       	brpl	.-8      	; 0x59a2 <_turn_off+0x88>
    59aa:	80 95       	com	r24
    59ac:	82 23       	and	r24, r18
    59ae:	8c 93       	st	X, r24
    59b0:	08 95       	ret

000059b2 <_turn_on>:
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	fc 01       	movw	r30, r24
    59b6:	ee 0f       	add	r30, r30
    59b8:	ff 1f       	adc	r31, r31
    59ba:	e8 0f       	add	r30, r24
    59bc:	f9 1f       	adc	r31, r25
    59be:	ee 0f       	add	r30, r30
    59c0:	ff 1f       	adc	r31, r31
    59c2:	e9 51       	subi	r30, 0x19	; 25
    59c4:	f6 4e       	sbci	r31, 0xE6	; 230
    59c6:	23 81       	ldd	r18, Z+3	; 0x03
    59c8:	21 11       	cpse	r18, r1
    59ca:	20 c0       	rjmp	.+64     	; 0x5a0c <_turn_on+0x5a>
    59cc:	9c 01       	movw	r18, r24
    59ce:	22 0f       	add	r18, r18
    59d0:	33 1f       	adc	r19, r19
    59d2:	f9 01       	movw	r30, r18
    59d4:	e8 0f       	add	r30, r24
    59d6:	f9 1f       	adc	r31, r25
    59d8:	ee 0f       	add	r30, r30
    59da:	ff 1f       	adc	r31, r31
    59dc:	e9 51       	subi	r30, 0x19	; 25
    59de:	f6 4e       	sbci	r31, 0xE6	; 230
    59e0:	a0 81       	ld	r26, Z
    59e2:	b1 81       	ldd	r27, Z+1	; 0x01
    59e4:	4c 91       	ld	r20, X
    59e6:	f9 01       	movw	r30, r18
    59e8:	e8 0f       	add	r30, r24
    59ea:	f9 1f       	adc	r31, r25
    59ec:	ee 0f       	add	r30, r30
    59ee:	ff 1f       	adc	r31, r31
    59f0:	e9 51       	subi	r30, 0x19	; 25
    59f2:	f6 4e       	sbci	r31, 0xE6	; 230
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	02 80       	ldd	r0, Z+2	; 0x02
    59fa:	02 c0       	rjmp	.+4      	; 0x5a00 <_turn_on+0x4e>
    59fc:	88 0f       	add	r24, r24
    59fe:	99 1f       	adc	r25, r25
    5a00:	0a 94       	dec	r0
    5a02:	e2 f7       	brpl	.-8      	; 0x59fc <_turn_on+0x4a>
    5a04:	80 95       	com	r24
    5a06:	84 23       	and	r24, r20
    5a08:	8c 93       	st	X, r24
    5a0a:	08 95       	ret
    5a0c:	fc 01       	movw	r30, r24
    5a0e:	ee 0f       	add	r30, r30
    5a10:	ff 1f       	adc	r31, r31
    5a12:	df 01       	movw	r26, r30
    5a14:	a8 0f       	add	r26, r24
    5a16:	b9 1f       	adc	r27, r25
    5a18:	aa 0f       	add	r26, r26
    5a1a:	bb 1f       	adc	r27, r27
    5a1c:	a9 51       	subi	r26, 0x19	; 25
    5a1e:	b6 4e       	sbci	r27, 0xE6	; 230
    5a20:	0d 90       	ld	r0, X+
    5a22:	bc 91       	ld	r27, X
    5a24:	a0 2d       	mov	r26, r0
    5a26:	2c 91       	ld	r18, X
    5a28:	e8 0f       	add	r30, r24
    5a2a:	f9 1f       	adc	r31, r25
    5a2c:	ee 0f       	add	r30, r30
    5a2e:	ff 1f       	adc	r31, r31
    5a30:	e9 51       	subi	r30, 0x19	; 25
    5a32:	f6 4e       	sbci	r31, 0xE6	; 230
    5a34:	81 e0       	ldi	r24, 0x01	; 1
    5a36:	90 e0       	ldi	r25, 0x00	; 0
    5a38:	02 80       	ldd	r0, Z+2	; 0x02
    5a3a:	02 c0       	rjmp	.+4      	; 0x5a40 <_turn_on+0x8e>
    5a3c:	88 0f       	add	r24, r24
    5a3e:	99 1f       	adc	r25, r25
    5a40:	0a 94       	dec	r0
    5a42:	e2 f7       	brpl	.-8      	; 0x5a3c <_turn_on+0x8a>
    5a44:	82 2b       	or	r24, r18
    5a46:	8c 93       	st	X, r24
    5a48:	08 95       	ret

00005a4a <_hal_led_task>:
    5a4a:	cc 24       	eor	r12, r12
    5a4c:	c3 94       	inc	r12
    5a4e:	d1 2c       	mov	r13, r1
    5a50:	68 94       	set
    5a52:	bb 24       	eor	r11, r11
    5a54:	b2 f8       	bld	r11, 2
    5a56:	c7 ee       	ldi	r28, 0xE7	; 231
    5a58:	d9 e1       	ldi	r29, 0x19	; 25
    5a5a:	10 e0       	ldi	r17, 0x00	; 0
    5a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    5a5e:	81 30       	cpi	r24, 0x01	; 1
    5a60:	81 f0       	breq	.+32     	; 0x5a82 <_hal_led_task+0x38>
    5a62:	18 f1       	brcs	.+70     	; 0x5aaa <_hal_led_task+0x60>
    5a64:	82 30       	cpi	r24, 0x02	; 2
    5a66:	61 f5       	brne	.+88     	; 0x5ac0 <_hal_led_task+0x76>
    5a68:	e8 81       	ld	r30, Y
    5a6a:	f9 81       	ldd	r31, Y+1	; 0x01
    5a6c:	20 81       	ld	r18, Z
    5a6e:	c6 01       	movw	r24, r12
    5a70:	0a 80       	ldd	r0, Y+2	; 0x02
    5a72:	02 c0       	rjmp	.+4      	; 0x5a78 <_hal_led_task+0x2e>
    5a74:	88 0f       	add	r24, r24
    5a76:	99 1f       	adc	r25, r25
    5a78:	0a 94       	dec	r0
    5a7a:	e2 f7       	brpl	.-8      	; 0x5a74 <_hal_led_task+0x2a>
    5a7c:	82 27       	eor	r24, r18
    5a7e:	80 83       	st	Z, r24
    5a80:	1f c0       	rjmp	.+62     	; 0x5ac0 <_hal_led_task+0x76>
    5a82:	8d 81       	ldd	r24, Y+5	; 0x05
    5a84:	8f 5f       	subi	r24, 0xFF	; 255
    5a86:	86 30       	cpi	r24, 0x06	; 6
    5a88:	10 f4       	brcc	.+4      	; 0x5a8e <_hal_led_task+0x44>
    5a8a:	8d 83       	std	Y+5, r24	; 0x05
    5a8c:	19 c0       	rjmp	.+50     	; 0x5ac0 <_hal_led_task+0x76>
    5a8e:	1d 82       	std	Y+5, r1	; 0x05
    5a90:	e8 81       	ld	r30, Y
    5a92:	f9 81       	ldd	r31, Y+1	; 0x01
    5a94:	20 81       	ld	r18, Z
    5a96:	c6 01       	movw	r24, r12
    5a98:	0a 80       	ldd	r0, Y+2	; 0x02
    5a9a:	02 c0       	rjmp	.+4      	; 0x5aa0 <_hal_led_task+0x56>
    5a9c:	88 0f       	add	r24, r24
    5a9e:	99 1f       	adc	r25, r25
    5aa0:	0a 94       	dec	r0
    5aa2:	e2 f7       	brpl	.-8      	; 0x5a9c <_hal_led_task+0x52>
    5aa4:	82 27       	eor	r24, r18
    5aa6:	80 83       	st	Z, r24
    5aa8:	0b c0       	rjmp	.+22     	; 0x5ac0 <_hal_led_task+0x76>
    5aaa:	0d 81       	ldd	r16, Y+5	; 0x05
    5aac:	00 23       	and	r16, r16
    5aae:	29 f0       	breq	.+10     	; 0x5aba <_hal_led_task+0x70>
    5ab0:	81 2f       	mov	r24, r17
    5ab2:	7f df       	rcall	.-258    	; 0x59b2 <_turn_on>
    5ab4:	01 50       	subi	r16, 0x01	; 1
    5ab6:	0d 83       	std	Y+5, r16	; 0x05
    5ab8:	03 c0       	rjmp	.+6      	; 0x5ac0 <_hal_led_task+0x76>
    5aba:	bc 82       	std	Y+4, r11	; 0x04
    5abc:	81 2f       	mov	r24, r17
    5abe:	2d df       	rcall	.-422    	; 0x591a <_turn_off>
    5ac0:	1f 5f       	subi	r17, 0xFF	; 255
    5ac2:	26 96       	adiw	r28, 0x06	; 6
    5ac4:	14 30       	cpi	r17, 0x04	; 4
    5ac6:	51 f6       	brne	.-108    	; 0x5a5c <_hal_led_task+0x12>
    5ac8:	6c e0       	ldi	r22, 0x0C	; 12
    5aca:	70 e0       	ldi	r23, 0x00	; 0
    5acc:	80 e0       	ldi	r24, 0x00	; 0
    5ace:	90 e0       	ldi	r25, 0x00	; 0
    5ad0:	0e 94 a7 14 	call	0x294e	; 0x294e <vTaskDelay>
    5ad4:	c0 cf       	rjmp	.-128    	; 0x5a56 <_hal_led_task+0xc>

00005ad6 <status_leds_initialise>:
    5ad6:	ef 92       	push	r14
    5ad8:	ff 92       	push	r15
    5ada:	0f 93       	push	r16
    5adc:	1f 93       	push	r17
    5ade:	cf 93       	push	r28
    5ae0:	df 93       	push	r29
    5ae2:	08 2f       	mov	r16, r24
    5ae4:	80 e4       	ldi	r24, 0x40	; 64
    5ae6:	87 b9       	out	0x07, r24	; 7
    5ae8:	c7 ee       	ldi	r28, 0xE7	; 231
    5aea:	d9 e1       	ldi	r29, 0x19	; 25
    5aec:	0f 2e       	mov	r0, r31
    5aee:	f8 e2       	ldi	r31, 0x28	; 40
    5af0:	ef 2e       	mov	r14, r31
    5af2:	f1 2c       	mov	r15, r1
    5af4:	f0 2d       	mov	r31, r0
    5af6:	f9 82       	std	Y+1, r15	; 0x01
    5af8:	e8 82       	st	Y, r14
    5afa:	86 e0       	ldi	r24, 0x06	; 6
    5afc:	8a 83       	std	Y+2, r24	; 0x02
    5afe:	1b 82       	std	Y+3, r1	; 0x03
    5b00:	14 e0       	ldi	r17, 0x04	; 4
    5b02:	1c 83       	std	Y+4, r17	; 0x04
    5b04:	80 e0       	ldi	r24, 0x00	; 0
    5b06:	09 df       	rcall	.-494    	; 0x591a <_turn_off>
    5b08:	80 e8       	ldi	r24, 0x80	; 128
    5b0a:	87 b9       	out	0x07, r24	; 7
    5b0c:	ff 82       	std	Y+7, r15	; 0x07
    5b0e:	ee 82       	std	Y+6, r14	; 0x06
    5b10:	87 e0       	ldi	r24, 0x07	; 7
    5b12:	88 87       	std	Y+8, r24	; 0x08
    5b14:	19 86       	std	Y+9, r1	; 0x09
    5b16:	1a 87       	std	Y+10, r17	; 0x0a
    5b18:	81 e0       	ldi	r24, 0x01	; 1
    5b1a:	ff de       	rcall	.-514    	; 0x591a <_turn_off>
    5b1c:	80 e2       	ldi	r24, 0x20	; 32
    5b1e:	83 bb       	out	0x13, r24	; 19
    5b20:	84 e3       	ldi	r24, 0x34	; 52
    5b22:	90 e0       	ldi	r25, 0x00	; 0
    5b24:	9d 87       	std	Y+13, r25	; 0x0d
    5b26:	8c 87       	std	Y+12, r24	; 0x0c
    5b28:	85 e0       	ldi	r24, 0x05	; 5
    5b2a:	8e 87       	std	Y+14, r24	; 0x0e
    5b2c:	1f 86       	std	Y+15, r1	; 0x0f
    5b2e:	18 8b       	std	Y+16, r17	; 0x10
    5b30:	82 e0       	ldi	r24, 0x02	; 2
    5b32:	f3 de       	rcall	.-538    	; 0x591a <_turn_off>
    5b34:	80 e1       	ldi	r24, 0x10	; 16
    5b36:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5b3a:	82 e0       	ldi	r24, 0x02	; 2
    5b3c:	91 e0       	ldi	r25, 0x01	; 1
    5b3e:	9b 8b       	std	Y+19, r25	; 0x13
    5b40:	8a 8b       	std	Y+18, r24	; 0x12
    5b42:	1c 8b       	std	Y+20, r17	; 0x14
    5b44:	1d 8a       	std	Y+21, r1	; 0x15
    5b46:	1e 8b       	std	Y+22, r17	; 0x16
    5b48:	83 e0       	ldi	r24, 0x03	; 3
    5b4a:	e7 de       	rcall	.-562    	; 0x591a <_turn_off>
    5b4c:	e1 2c       	mov	r14, r1
    5b4e:	f1 2c       	mov	r15, r1
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	30 e0       	ldi	r19, 0x00	; 0
    5b54:	40 ec       	ldi	r20, 0xC0	; 192
    5b56:	50 e0       	ldi	r21, 0x00	; 0
    5b58:	6f ee       	ldi	r22, 0xEF	; 239
    5b5a:	79 e0       	ldi	r23, 0x09	; 9
    5b5c:	85 e2       	ldi	r24, 0x25	; 37
    5b5e:	9d e2       	ldi	r25, 0x2D	; 45
    5b60:	0e 94 a2 11 	call	0x2344	; 0x2344 <xTaskCreate>
    5b64:	df 91       	pop	r29
    5b66:	cf 91       	pop	r28
    5b68:	1f 91       	pop	r17
    5b6a:	0f 91       	pop	r16
    5b6c:	ff 90       	pop	r15
    5b6e:	ef 90       	pop	r14
    5b70:	08 95       	ret

00005b72 <status_leds_slowBlink>:
    5b72:	cf 93       	push	r28
    5b74:	df 93       	push	r29
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	fc 01       	movw	r30, r24
    5b7a:	ee 0f       	add	r30, r30
    5b7c:	ff 1f       	adc	r31, r31
    5b7e:	df 01       	movw	r26, r30
    5b80:	a8 0f       	add	r26, r24
    5b82:	b9 1f       	adc	r27, r25
    5b84:	aa 0f       	add	r26, r26
    5b86:	bb 1f       	adc	r27, r27
    5b88:	a9 51       	subi	r26, 0x19	; 25
    5b8a:	b6 4e       	sbci	r27, 0xE6	; 230
    5b8c:	cd 91       	ld	r28, X+
    5b8e:	dc 91       	ld	r29, X
    5b90:	11 97       	sbiw	r26, 0x01	; 1
    5b92:	48 81       	ld	r20, Y
    5b94:	21 e0       	ldi	r18, 0x01	; 1
    5b96:	30 e0       	ldi	r19, 0x00	; 0
    5b98:	12 96       	adiw	r26, 0x02	; 2
    5b9a:	0c 90       	ld	r0, X
    5b9c:	12 97       	sbiw	r26, 0x02	; 2
    5b9e:	02 c0       	rjmp	.+4      	; 0x5ba4 <status_leds_slowBlink+0x32>
    5ba0:	22 0f       	add	r18, r18
    5ba2:	33 1f       	adc	r19, r19
    5ba4:	0a 94       	dec	r0
    5ba6:	e2 f7       	brpl	.-8      	; 0x5ba0 <status_leds_slowBlink+0x2e>
    5ba8:	24 27       	eor	r18, r20
    5baa:	28 83       	st	Y, r18
    5bac:	fd 01       	movw	r30, r26
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	84 83       	std	Z+4, r24	; 0x04
    5bb2:	df 91       	pop	r29
    5bb4:	cf 91       	pop	r28
    5bb6:	08 95       	ret

00005bb8 <status_leds_fastBlink>:
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	fc 01       	movw	r30, r24
    5bc0:	ee 0f       	add	r30, r30
    5bc2:	ff 1f       	adc	r31, r31
    5bc4:	df 01       	movw	r26, r30
    5bc6:	a8 0f       	add	r26, r24
    5bc8:	b9 1f       	adc	r27, r25
    5bca:	aa 0f       	add	r26, r26
    5bcc:	bb 1f       	adc	r27, r27
    5bce:	a9 51       	subi	r26, 0x19	; 25
    5bd0:	b6 4e       	sbci	r27, 0xE6	; 230
    5bd2:	cd 91       	ld	r28, X+
    5bd4:	dc 91       	ld	r29, X
    5bd6:	11 97       	sbiw	r26, 0x01	; 1
    5bd8:	48 81       	ld	r20, Y
    5bda:	21 e0       	ldi	r18, 0x01	; 1
    5bdc:	30 e0       	ldi	r19, 0x00	; 0
    5bde:	12 96       	adiw	r26, 0x02	; 2
    5be0:	0c 90       	ld	r0, X
    5be2:	12 97       	sbiw	r26, 0x02	; 2
    5be4:	02 c0       	rjmp	.+4      	; 0x5bea <status_leds_fastBlink+0x32>
    5be6:	22 0f       	add	r18, r18
    5be8:	33 1f       	adc	r19, r19
    5bea:	0a 94       	dec	r0
    5bec:	e2 f7       	brpl	.-8      	; 0x5be6 <status_leds_fastBlink+0x2e>
    5bee:	24 27       	eor	r18, r20
    5bf0:	28 83       	st	Y, r18
    5bf2:	fd 01       	movw	r30, r26
    5bf4:	82 e0       	ldi	r24, 0x02	; 2
    5bf6:	84 83       	std	Z+4, r24	; 0x04
    5bf8:	df 91       	pop	r29
    5bfa:	cf 91       	pop	r28
    5bfc:	08 95       	ret

00005bfe <status_leds_ledOn>:
    5bfe:	28 2f       	mov	r18, r24
    5c00:	30 e0       	ldi	r19, 0x00	; 0
    5c02:	f9 01       	movw	r30, r18
    5c04:	ee 0f       	add	r30, r30
    5c06:	ff 1f       	adc	r31, r31
    5c08:	e2 0f       	add	r30, r18
    5c0a:	f3 1f       	adc	r31, r19
    5c0c:	ee 0f       	add	r30, r30
    5c0e:	ff 1f       	adc	r31, r31
    5c10:	e9 51       	subi	r30, 0x19	; 25
    5c12:	f6 4e       	sbci	r31, 0xE6	; 230
    5c14:	93 e0       	ldi	r25, 0x03	; 3
    5c16:	94 83       	std	Z+4, r25	; 0x04
    5c18:	cc ce       	rjmp	.-616    	; 0x59b2 <_turn_on>
    5c1a:	08 95       	ret

00005c1c <status_leds_ledOff>:
    5c1c:	28 2f       	mov	r18, r24
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	f9 01       	movw	r30, r18
    5c22:	ee 0f       	add	r30, r30
    5c24:	ff 1f       	adc	r31, r31
    5c26:	e2 0f       	add	r30, r18
    5c28:	f3 1f       	adc	r31, r19
    5c2a:	ee 0f       	add	r30, r30
    5c2c:	ff 1f       	adc	r31, r31
    5c2e:	e9 51       	subi	r30, 0x19	; 25
    5c30:	f6 4e       	sbci	r31, 0xE6	; 230
    5c32:	94 e0       	ldi	r25, 0x04	; 4
    5c34:	94 83       	std	Z+4, r25	; 0x04
    5c36:	71 ce       	rjmp	.-798    	; 0x591a <_turn_off>
    5c38:	08 95       	ret

00005c3a <status_leds_longPuls>:
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	fc 01       	movw	r30, r24
    5c3e:	ee 0f       	add	r30, r30
    5c40:	ff 1f       	adc	r31, r31
    5c42:	df 01       	movw	r26, r30
    5c44:	a8 0f       	add	r26, r24
    5c46:	b9 1f       	adc	r27, r25
    5c48:	aa 0f       	add	r26, r26
    5c4a:	bb 1f       	adc	r27, r27
    5c4c:	a9 51       	subi	r26, 0x19	; 25
    5c4e:	b6 4e       	sbci	r27, 0xE6	; 230
    5c50:	26 e0       	ldi	r18, 0x06	; 6
    5c52:	15 96       	adiw	r26, 0x05	; 5
    5c54:	2c 93       	st	X, r18
    5c56:	15 97       	sbiw	r26, 0x05	; 5
    5c58:	fd 01       	movw	r30, r26
    5c5a:	14 82       	std	Z+4, r1	; 0x04
    5c5c:	08 95       	ret

00005c5e <status_leds_shortPuls>:
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	fc 01       	movw	r30, r24
    5c62:	ee 0f       	add	r30, r30
    5c64:	ff 1f       	adc	r31, r31
    5c66:	df 01       	movw	r26, r30
    5c68:	a8 0f       	add	r26, r24
    5c6a:	b9 1f       	adc	r27, r25
    5c6c:	aa 0f       	add	r26, r26
    5c6e:	bb 1f       	adc	r27, r27
    5c70:	a9 51       	subi	r26, 0x19	; 25
    5c72:	b6 4e       	sbci	r27, 0xE6	; 230
    5c74:	15 96       	adiw	r26, 0x05	; 5
    5c76:	1c 92       	st	X, r1
    5c78:	15 97       	sbiw	r26, 0x05	; 5
    5c7a:	fd 01       	movw	r30, r26
    5c7c:	14 82       	std	Z+4, r1	; 0x04
    5c7e:	08 95       	ret

00005c80 <_callBack>:
    5c80:	e0 91 07 1a 	lds	r30, 0x1A07	; 0x801a07 <_callBackFunction>
    5c84:	f0 91 08 1a 	lds	r31, 0x1A08	; 0x801a08 <_callBackFunction+0x1>
    5c88:	30 97       	sbiw	r30, 0x00	; 0
    5c8a:	09 f0       	breq	.+2      	; 0x5c8e <_callBack+0xe>
    5c8c:	19 95       	eicall
    5c8e:	08 95       	ret

00005c90 <_tsl2591TwiCallback>:
    5c90:	64 50       	subi	r22, 0x04	; 4
    5c92:	62 30       	cpi	r22, 0x02	; 2
    5c94:	08 f0       	brcs	.+2      	; 0x5c98 <_tsl2591TwiCallback+0x8>
    5c96:	3b c0       	rjmp	.+118    	; 0x5d0e <_tsl2591TwiCallback+0x7e>
    5c98:	20 91 06 1a 	lds	r18, 0x1A06	; 0x801a06 <_nextState>
    5c9c:	22 30       	cpi	r18, 0x02	; 2
    5c9e:	79 f0       	breq	.+30     	; 0x5cbe <_tsl2591TwiCallback+0x2e>
    5ca0:	18 f4       	brcc	.+6      	; 0x5ca8 <_tsl2591TwiCallback+0x18>
    5ca2:	21 30       	cpi	r18, 0x01	; 1
    5ca4:	31 f0       	breq	.+12     	; 0x5cb2 <_tsl2591TwiCallback+0x22>
    5ca6:	30 c0       	rjmp	.+96     	; 0x5d08 <_tsl2591TwiCallback+0x78>
    5ca8:	23 30       	cpi	r18, 0x03	; 3
    5caa:	81 f0       	breq	.+32     	; 0x5ccc <_tsl2591TwiCallback+0x3c>
    5cac:	24 30       	cpi	r18, 0x04	; 4
    5cae:	a1 f0       	breq	.+40     	; 0x5cd8 <_tsl2591TwiCallback+0x48>
    5cb0:	2b c0       	rjmp	.+86     	; 0x5d08 <_tsl2591TwiCallback+0x78>
    5cb2:	22 e0       	ldi	r18, 0x02	; 2
    5cb4:	20 93 06 1a 	sts	0x1A06, r18	; 0x801a06 <_nextState>
    5cb8:	61 e0       	ldi	r22, 0x01	; 1
    5cba:	0a c2       	rjmp	.+1044   	; 0x60d0 <twiReceive>
    5cbc:	08 95       	ret
    5cbe:	fa 01       	movw	r30, r20
    5cc0:	80 81       	ld	r24, Z
    5cc2:	80 93 03 1a 	sts	0x1A03, r24	; 0x801a03 <_deviceId>
    5cc6:	82 e0       	ldi	r24, 0x02	; 2
    5cc8:	db cf       	rjmp	.-74     	; 0x5c80 <_callBack>
    5cca:	08 95       	ret
    5ccc:	24 e0       	ldi	r18, 0x04	; 4
    5cce:	20 93 06 1a 	sts	0x1A06, r18	; 0x801a06 <_nextState>
    5cd2:	64 e0       	ldi	r22, 0x04	; 4
    5cd4:	fd c1       	rjmp	.+1018   	; 0x60d0 <twiReceive>
    5cd6:	08 95       	ret
    5cd8:	fa 01       	movw	r30, r20
    5cda:	81 81       	ldd	r24, Z+1	; 0x01
    5cdc:	90 e0       	ldi	r25, 0x00	; 0
    5cde:	98 2f       	mov	r25, r24
    5ce0:	88 27       	eor	r24, r24
    5ce2:	20 81       	ld	r18, Z
    5ce4:	82 2b       	or	r24, r18
    5ce6:	90 93 02 1a 	sts	0x1A02, r25	; 0x801a02 <_fullSpectrumRaw+0x1>
    5cea:	80 93 01 1a 	sts	0x1A01, r24	; 0x801a01 <_fullSpectrumRaw>
    5cee:	83 81       	ldd	r24, Z+3	; 0x03
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	98 2f       	mov	r25, r24
    5cf4:	88 27       	eor	r24, r24
    5cf6:	22 81       	ldd	r18, Z+2	; 0x02
    5cf8:	82 2b       	or	r24, r18
    5cfa:	90 93 00 1a 	sts	0x1A00, r25	; 0x801a00 <_infraredRaw+0x1>
    5cfe:	80 93 ff 19 	sts	0x19FF, r24	; 0x8019ff <_infraredRaw>
    5d02:	81 e0       	ldi	r24, 0x01	; 1
    5d04:	bd cf       	rjmp	.-134    	; 0x5c80 <_callBack>
    5d06:	08 95       	ret
    5d08:	80 e0       	ldi	r24, 0x00	; 0
    5d0a:	ba cf       	rjmp	.-140    	; 0x5c80 <_callBack>
    5d0c:	08 95       	ret
    5d0e:	10 92 06 1a 	sts	0x1A06, r1	; 0x801a06 <_nextState>
    5d12:	86 e0       	ldi	r24, 0x06	; 6
    5d14:	b5 cf       	rjmp	.-150    	; 0x5c80 <_callBack>
    5d16:	08 95       	ret

00005d18 <_twiTransmit>:
    5d18:	20 91 09 1a 	lds	r18, 0x1A09	; 0x801a09 <_twiHandler>
    5d1c:	30 91 0a 1a 	lds	r19, 0x1A0A	; 0x801a0a <_twiHandler+0x1>
    5d20:	21 15       	cp	r18, r1
    5d22:	31 05       	cpc	r19, r1
    5d24:	41 f0       	breq	.+16     	; 0x5d36 <_twiTransmit+0x1e>
    5d26:	46 2f       	mov	r20, r22
    5d28:	bc 01       	movw	r22, r24
    5d2a:	c9 01       	movw	r24, r18
    5d2c:	85 d1       	rcall	.+778    	; 0x6038 <twiTransmit>
    5d2e:	82 30       	cpi	r24, 0x02	; 2
    5d30:	21 f0       	breq	.+8      	; 0x5d3a <_twiTransmit+0x22>
    5d32:	80 e0       	ldi	r24, 0x00	; 0
    5d34:	08 95       	ret
    5d36:	87 e0       	ldi	r24, 0x07	; 7
    5d38:	08 95       	ret
    5d3a:	85 e0       	ldi	r24, 0x05	; 5
    5d3c:	08 95       	ret

00005d3e <tsl2591_initialise>:
    5d3e:	0f 93       	push	r16
    5d40:	1f 93       	push	r17
    5d42:	90 93 08 1a 	sts	0x1A08, r25	; 0x801a08 <_callBackFunction+0x1>
    5d46:	80 93 07 1a 	sts	0x1A07, r24	; 0x801a07 <_callBackFunction>
    5d4a:	08 e4       	ldi	r16, 0x48	; 72
    5d4c:	1e e2       	ldi	r17, 0x2E	; 46
    5d4e:	20 e0       	ldi	r18, 0x00	; 0
    5d50:	34 e2       	ldi	r19, 0x24	; 36
    5d52:	44 ef       	ldi	r20, 0xF4	; 244
    5d54:	50 e0       	ldi	r21, 0x00	; 0
    5d56:	60 e0       	ldi	r22, 0x00	; 0
    5d58:	89 e2       	ldi	r24, 0x29	; 41
    5d5a:	1d d1       	rcall	.+570    	; 0x5f96 <twiCreate>
    5d5c:	90 93 0a 1a 	sts	0x1A0A, r25	; 0x801a0a <_twiHandler+0x1>
    5d60:	80 93 09 1a 	sts	0x1A09, r24	; 0x801a09 <_twiHandler>
    5d64:	89 2b       	or	r24, r25
    5d66:	11 f0       	breq	.+4      	; 0x5d6c <tsl2591_initialise+0x2e>
    5d68:	80 e0       	ldi	r24, 0x00	; 0
    5d6a:	01 c0       	rjmp	.+2      	; 0x5d6e <tsl2591_initialise+0x30>
    5d6c:	88 e0       	ldi	r24, 0x08	; 8
    5d6e:	1f 91       	pop	r17
    5d70:	0f 91       	pop	r16
    5d72:	08 95       	ret

00005d74 <tsl2591_enable>:
    5d74:	cf 93       	push	r28
    5d76:	df 93       	push	r29
    5d78:	1f 92       	push	r1
    5d7a:	1f 92       	push	r1
    5d7c:	cd b7       	in	r28, 0x3d	; 61
    5d7e:	de b7       	in	r29, 0x3e	; 62
    5d80:	80 ea       	ldi	r24, 0xA0	; 160
    5d82:	89 83       	std	Y+1, r24	; 0x01
    5d84:	83 e0       	ldi	r24, 0x03	; 3
    5d86:	8a 83       	std	Y+2, r24	; 0x02
    5d88:	10 92 06 1a 	sts	0x1A06, r1	; 0x801a06 <_nextState>
    5d8c:	62 e0       	ldi	r22, 0x02	; 2
    5d8e:	ce 01       	movw	r24, r28
    5d90:	01 96       	adiw	r24, 0x01	; 1
    5d92:	c2 df       	rcall	.-124    	; 0x5d18 <_twiTransmit>
    5d94:	0f 90       	pop	r0
    5d96:	0f 90       	pop	r0
    5d98:	df 91       	pop	r29
    5d9a:	cf 91       	pop	r28
    5d9c:	08 95       	ret

00005d9e <tsl2591_fetchData>:
    5d9e:	cf 93       	push	r28
    5da0:	df 93       	push	r29
    5da2:	1f 92       	push	r1
    5da4:	cd b7       	in	r28, 0x3d	; 61
    5da6:	de b7       	in	r29, 0x3e	; 62
    5da8:	84 eb       	ldi	r24, 0xB4	; 180
    5daa:	89 83       	std	Y+1, r24	; 0x01
    5dac:	83 e0       	ldi	r24, 0x03	; 3
    5dae:	80 93 06 1a 	sts	0x1A06, r24	; 0x801a06 <_nextState>
    5db2:	61 e0       	ldi	r22, 0x01	; 1
    5db4:	ce 01       	movw	r24, r28
    5db6:	01 96       	adiw	r24, 0x01	; 1
    5db8:	af df       	rcall	.-162    	; 0x5d18 <_twiTransmit>
    5dba:	0f 90       	pop	r0
    5dbc:	df 91       	pop	r29
    5dbe:	cf 91       	pop	r28
    5dc0:	08 95       	ret

00005dc2 <tsl2591_getLux>:
    5dc2:	2f 92       	push	r2
    5dc4:	3f 92       	push	r3
    5dc6:	4f 92       	push	r4
    5dc8:	5f 92       	push	r5
    5dca:	6f 92       	push	r6
    5dcc:	7f 92       	push	r7
    5dce:	8f 92       	push	r8
    5dd0:	9f 92       	push	r9
    5dd2:	af 92       	push	r10
    5dd4:	bf 92       	push	r11
    5dd6:	cf 92       	push	r12
    5dd8:	df 92       	push	r13
    5dda:	ef 92       	push	r14
    5ddc:	ff 92       	push	r15
    5dde:	0f 93       	push	r16
    5de0:	1f 93       	push	r17
    5de2:	cf 93       	push	r28
    5de4:	df 93       	push	r29
    5de6:	c0 91 ff 19 	lds	r28, 0x19FF	; 0x8019ff <_infraredRaw>
    5dea:	d0 91 00 1a 	lds	r29, 0x1A00	; 0x801a00 <_infraredRaw+0x1>
    5dee:	cf 3f       	cpi	r28, 0xFF	; 255
    5df0:	2f ef       	ldi	r18, 0xFF	; 255
    5df2:	d2 07       	cpc	r29, r18
    5df4:	41 f0       	breq	.+16     	; 0x5e06 <tsl2591_getLux+0x44>
    5df6:	60 91 01 1a 	lds	r22, 0x1A01	; 0x801a01 <_fullSpectrumRaw>
    5dfa:	70 91 02 1a 	lds	r23, 0x1A02	; 0x801a02 <_fullSpectrumRaw+0x1>
    5dfe:	6f 3f       	cpi	r22, 0xFF	; 255
    5e00:	ef ef       	ldi	r30, 0xFF	; 255
    5e02:	7e 07       	cpc	r23, r30
    5e04:	59 f4       	brne	.+22     	; 0x5e1c <tsl2591_getLux+0x5a>
    5e06:	4f ef       	ldi	r20, 0xFF	; 255
    5e08:	5f ef       	ldi	r21, 0xFF	; 255
    5e0a:	6f e7       	ldi	r22, 0x7F	; 127
    5e0c:	7f e7       	ldi	r23, 0x7F	; 127
    5e0e:	fc 01       	movw	r30, r24
    5e10:	40 83       	st	Z, r20
    5e12:	51 83       	std	Z+1, r21	; 0x01
    5e14:	62 83       	std	Z+2, r22	; 0x02
    5e16:	73 83       	std	Z+3, r23	; 0x03
    5e18:	83 e0       	ldi	r24, 0x03	; 3
    5e1a:	99 c0       	rjmp	.+306    	; 0x5f4e <tsl2591_getLux+0x18c>
    5e1c:	1c 01       	movw	r2, r24
    5e1e:	80 e0       	ldi	r24, 0x00	; 0
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	ea d6       	rcall	.+3540   	; 0x6bf8 <__floatunsisf>
    5e24:	2b 01       	movw	r4, r22
    5e26:	3c 01       	movw	r6, r24
    5e28:	be 01       	movw	r22, r28
    5e2a:	80 e0       	ldi	r24, 0x00	; 0
    5e2c:	90 e0       	ldi	r25, 0x00	; 0
    5e2e:	e4 d6       	rcall	.+3528   	; 0x6bf8 <__floatunsisf>
    5e30:	4b 01       	movw	r8, r22
    5e32:	5c 01       	movw	r10, r24
    5e34:	80 91 04 1a 	lds	r24, 0x1A04	; 0x801a04 <_currentIntegrationTime>
    5e38:	90 e0       	ldi	r25, 0x00	; 0
    5e3a:	01 96       	adiw	r24, 0x01	; 1
    5e3c:	24 e6       	ldi	r18, 0x64	; 100
    5e3e:	28 9f       	mul	r18, r24
    5e40:	b0 01       	movw	r22, r0
    5e42:	29 9f       	mul	r18, r25
    5e44:	70 0d       	add	r23, r0
    5e46:	11 24       	eor	r1, r1
    5e48:	80 91 05 1a 	lds	r24, 0x1A05	; 0x801a05 <_currentGain>
    5e4c:	80 32       	cpi	r24, 0x20	; 32
    5e4e:	69 f0       	breq	.+26     	; 0x5e6a <tsl2591_getLux+0xa8>
    5e50:	80 33       	cpi	r24, 0x30	; 48
    5e52:	a1 f0       	breq	.+40     	; 0x5e7c <tsl2591_getLux+0xba>
    5e54:	80 31       	cpi	r24, 0x10	; 16
    5e56:	e1 f4       	brne	.+56     	; 0x5e90 <tsl2591_getLux+0xce>
    5e58:	0f 2e       	mov	r0, r31
    5e5a:	c1 2c       	mov	r12, r1
    5e5c:	d1 2c       	mov	r13, r1
    5e5e:	f8 ec       	ldi	r31, 0xC8	; 200
    5e60:	ef 2e       	mov	r14, r31
    5e62:	f1 e4       	ldi	r31, 0x41	; 65
    5e64:	ff 2e       	mov	r15, r31
    5e66:	f0 2d       	mov	r31, r0
    5e68:	1b c0       	rjmp	.+54     	; 0x5ea0 <tsl2591_getLux+0xde>
    5e6a:	0f 2e       	mov	r0, r31
    5e6c:	c1 2c       	mov	r12, r1
    5e6e:	d1 2c       	mov	r13, r1
    5e70:	f6 ed       	ldi	r31, 0xD6	; 214
    5e72:	ef 2e       	mov	r14, r31
    5e74:	f3 e4       	ldi	r31, 0x43	; 67
    5e76:	ff 2e       	mov	r15, r31
    5e78:	f0 2d       	mov	r31, r0
    5e7a:	12 c0       	rjmp	.+36     	; 0x5ea0 <tsl2591_getLux+0xde>
    5e7c:	0f 2e       	mov	r0, r31
    5e7e:	c1 2c       	mov	r12, r1
    5e80:	f0 e5       	ldi	r31, 0x50	; 80
    5e82:	df 2e       	mov	r13, r31
    5e84:	fa e1       	ldi	r31, 0x1A	; 26
    5e86:	ef 2e       	mov	r14, r31
    5e88:	f6 e4       	ldi	r31, 0x46	; 70
    5e8a:	ff 2e       	mov	r15, r31
    5e8c:	f0 2d       	mov	r31, r0
    5e8e:	08 c0       	rjmp	.+16     	; 0x5ea0 <tsl2591_getLux+0xde>
    5e90:	0f 2e       	mov	r0, r31
    5e92:	c1 2c       	mov	r12, r1
    5e94:	d1 2c       	mov	r13, r1
    5e96:	f0 e8       	ldi	r31, 0x80	; 128
    5e98:	ef 2e       	mov	r14, r31
    5e9a:	ff e3       	ldi	r31, 0x3F	; 63
    5e9c:	ff 2e       	mov	r15, r31
    5e9e:	f0 2d       	mov	r31, r0
    5ea0:	07 2e       	mov	r0, r23
    5ea2:	00 0c       	add	r0, r0
    5ea4:	88 0b       	sbc	r24, r24
    5ea6:	99 0b       	sbc	r25, r25
    5ea8:	a9 d6       	rcall	.+3410   	; 0x6bfc <__floatsisf>
    5eaa:	a7 01       	movw	r20, r14
    5eac:	96 01       	movw	r18, r12
    5eae:	36 d7       	rcall	.+3692   	; 0x6d1c <__mulsf3>
    5eb0:	20 e0       	ldi	r18, 0x00	; 0
    5eb2:	30 e0       	ldi	r19, 0x00	; 0
    5eb4:	4c ec       	ldi	r20, 0xCC	; 204
    5eb6:	53 e4       	ldi	r21, 0x43	; 67
    5eb8:	06 d6       	rcall	.+3084   	; 0x6ac6 <__divsf3>
    5eba:	6b 01       	movw	r12, r22
    5ebc:	7c 01       	movw	r14, r24
    5ebe:	25 e8       	ldi	r18, 0x85	; 133
    5ec0:	3b ee       	ldi	r19, 0xEB	; 235
    5ec2:	41 ed       	ldi	r20, 0xD1	; 209
    5ec4:	5f e3       	ldi	r21, 0x3F	; 63
    5ec6:	c5 01       	movw	r24, r10
    5ec8:	b4 01       	movw	r22, r8
    5eca:	28 d7       	rcall	.+3664   	; 0x6d1c <__mulsf3>
    5ecc:	9b 01       	movw	r18, r22
    5ece:	ac 01       	movw	r20, r24
    5ed0:	c3 01       	movw	r24, r6
    5ed2:	b2 01       	movw	r22, r4
    5ed4:	93 d5       	rcall	.+2854   	; 0x69fc <__subsf3>
    5ed6:	a7 01       	movw	r20, r14
    5ed8:	96 01       	movw	r18, r12
    5eda:	f5 d5       	rcall	.+3050   	; 0x6ac6 <__divsf3>
    5edc:	16 2f       	mov	r17, r22
    5ede:	d7 2f       	mov	r29, r23
    5ee0:	c8 2f       	mov	r28, r24
    5ee2:	09 2f       	mov	r16, r25
    5ee4:	2d e3       	ldi	r18, 0x3D	; 61
    5ee6:	3a e0       	ldi	r19, 0x0A	; 10
    5ee8:	47 e1       	ldi	r20, 0x17	; 23
    5eea:	5f e3       	ldi	r21, 0x3F	; 63
    5eec:	c3 01       	movw	r24, r6
    5eee:	b2 01       	movw	r22, r4
    5ef0:	15 d7       	rcall	.+3626   	; 0x6d1c <__mulsf3>
    5ef2:	2b 01       	movw	r4, r22
    5ef4:	3c 01       	movw	r6, r24
    5ef6:	26 ef       	ldi	r18, 0xF6	; 246
    5ef8:	38 e2       	ldi	r19, 0x28	; 40
    5efa:	4c e5       	ldi	r20, 0x5C	; 92
    5efc:	5f e3       	ldi	r21, 0x3F	; 63
    5efe:	c5 01       	movw	r24, r10
    5f00:	b4 01       	movw	r22, r8
    5f02:	0c d7       	rcall	.+3608   	; 0x6d1c <__mulsf3>
    5f04:	9b 01       	movw	r18, r22
    5f06:	ac 01       	movw	r20, r24
    5f08:	c3 01       	movw	r24, r6
    5f0a:	b2 01       	movw	r22, r4
    5f0c:	77 d5       	rcall	.+2798   	; 0x69fc <__subsf3>
    5f0e:	a7 01       	movw	r20, r14
    5f10:	96 01       	movw	r18, r12
    5f12:	d9 d5       	rcall	.+2994   	; 0x6ac6 <__divsf3>
    5f14:	c6 2e       	mov	r12, r22
    5f16:	d7 2e       	mov	r13, r23
    5f18:	e8 2e       	mov	r14, r24
    5f1a:	f9 2e       	mov	r15, r25
    5f1c:	26 2f       	mov	r18, r22
    5f1e:	37 2f       	mov	r19, r23
    5f20:	48 2f       	mov	r20, r24
    5f22:	59 2f       	mov	r21, r25
    5f24:	61 2f       	mov	r22, r17
    5f26:	7d 2f       	mov	r23, r29
    5f28:	8c 2f       	mov	r24, r28
    5f2a:	90 2f       	mov	r25, r16
    5f2c:	f3 d6       	rcall	.+3558   	; 0x6d14 <__gesf2>
    5f2e:	18 16       	cp	r1, r24
    5f30:	24 f0       	brlt	.+8      	; 0x5f3a <tsl2591_getLux+0x178>
    5f32:	1c 2d       	mov	r17, r12
    5f34:	dd 2d       	mov	r29, r13
    5f36:	ce 2d       	mov	r28, r14
    5f38:	0f 2d       	mov	r16, r15
    5f3a:	41 2f       	mov	r20, r17
    5f3c:	5d 2f       	mov	r21, r29
    5f3e:	6c 2f       	mov	r22, r28
    5f40:	70 2f       	mov	r23, r16
    5f42:	f1 01       	movw	r30, r2
    5f44:	40 83       	st	Z, r20
    5f46:	51 83       	std	Z+1, r21	; 0x01
    5f48:	62 83       	std	Z+2, r22	; 0x02
    5f4a:	73 83       	std	Z+3, r23	; 0x03
    5f4c:	80 e0       	ldi	r24, 0x00	; 0
    5f4e:	df 91       	pop	r29
    5f50:	cf 91       	pop	r28
    5f52:	1f 91       	pop	r17
    5f54:	0f 91       	pop	r16
    5f56:	ff 90       	pop	r15
    5f58:	ef 90       	pop	r14
    5f5a:	df 90       	pop	r13
    5f5c:	cf 90       	pop	r12
    5f5e:	bf 90       	pop	r11
    5f60:	af 90       	pop	r10
    5f62:	9f 90       	pop	r9
    5f64:	8f 90       	pop	r8
    5f66:	7f 90       	pop	r7
    5f68:	6f 90       	pop	r6
    5f6a:	5f 90       	pop	r5
    5f6c:	4f 90       	pop	r4
    5f6e:	3f 90       	pop	r3
    5f70:	2f 90       	pop	r2
    5f72:	08 95       	ret

00005f74 <_initTwiInterface>:
    5f74:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <_twiIsInitiated>
    5f78:	81 11       	cpse	r24, r1
    5f7a:	0c c0       	rjmp	.+24     	; 0x5f94 <_initTwiInterface+0x20>
    5f7c:	8c e0       	ldi	r24, 0x0C	; 12
    5f7e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5f82:	8f ef       	ldi	r24, 0xFF	; 255
    5f84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5f88:	84 e0       	ldi	r24, 0x04	; 4
    5f8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5f8e:	81 e0       	ldi	r24, 0x01	; 1
    5f90:	80 93 19 1a 	sts	0x1A19, r24	; 0x801a19 <_twiIsInitiated>
    5f94:	08 95       	ret

00005f96 <twiCreate>:
    5f96:	af 92       	push	r10
    5f98:	bf 92       	push	r11
    5f9a:	cf 92       	push	r12
    5f9c:	df 92       	push	r13
    5f9e:	ef 92       	push	r14
    5fa0:	ff 92       	push	r15
    5fa2:	0f 93       	push	r16
    5fa4:	1f 93       	push	r17
    5fa6:	cf 93       	push	r28
    5fa8:	df 93       	push	r29
    5faa:	a8 2e       	mov	r10, r24
    5fac:	b6 2e       	mov	r11, r22
    5fae:	69 01       	movw	r12, r18
    5fb0:	7a 01       	movw	r14, r20
    5fb2:	84 e0       	ldi	r24, 0x04	; 4
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	99 d7       	rcall	.+3890   	; 0x6eea <malloc>
    5fb8:	ec 01       	movw	r28, r24
    5fba:	89 2b       	or	r24, r25
    5fbc:	61 f1       	breq	.+88     	; 0x6016 <twiCreate+0x80>
    5fbe:	a8 82       	st	Y, r10
    5fc0:	81 e0       	ldi	r24, 0x01	; 1
    5fc2:	b8 12       	cpse	r11, r24
    5fc4:	12 c0       	rjmp	.+36     	; 0x5fea <twiCreate+0x54>
    5fc6:	c7 01       	movw	r24, r14
    5fc8:	b6 01       	movw	r22, r12
    5fca:	20 ea       	ldi	r18, 0xA0	; 160
    5fcc:	36 e8       	ldi	r19, 0x86	; 134
    5fce:	41 e0       	ldi	r20, 0x01	; 1
    5fd0:	50 e0       	ldi	r21, 0x00	; 0
    5fd2:	3e d7       	rcall	.+3708   	; 0x6e50 <__udivmodsi4>
    5fd4:	da 01       	movw	r26, r20
    5fd6:	c9 01       	movw	r24, r18
    5fd8:	40 97       	sbiw	r24, 0x10	; 16
    5fda:	a1 09       	sbc	r26, r1
    5fdc:	b1 09       	sbc	r27, r1
    5fde:	b6 95       	lsr	r27
    5fe0:	a7 95       	ror	r26
    5fe2:	97 95       	ror	r25
    5fe4:	87 95       	ror	r24
    5fe6:	89 83       	std	Y+1, r24	; 0x01
    5fe8:	11 c0       	rjmp	.+34     	; 0x600c <twiCreate+0x76>
    5fea:	c7 01       	movw	r24, r14
    5fec:	b6 01       	movw	r22, r12
    5fee:	20 e8       	ldi	r18, 0x80	; 128
    5ff0:	3a e1       	ldi	r19, 0x1A	; 26
    5ff2:	46 e0       	ldi	r20, 0x06	; 6
    5ff4:	50 e0       	ldi	r21, 0x00	; 0
    5ff6:	2c d7       	rcall	.+3672   	; 0x6e50 <__udivmodsi4>
    5ff8:	da 01       	movw	r26, r20
    5ffa:	c9 01       	movw	r24, r18
    5ffc:	40 97       	sbiw	r24, 0x10	; 16
    5ffe:	a1 09       	sbc	r26, r1
    6000:	b1 09       	sbc	r27, r1
    6002:	b6 95       	lsr	r27
    6004:	a7 95       	ror	r26
    6006:	97 95       	ror	r25
    6008:	87 95       	ror	r24
    600a:	89 83       	std	Y+1, r24	; 0x01
    600c:	1b 83       	std	Y+3, r17	; 0x03
    600e:	0a 83       	std	Y+2, r16	; 0x02
    6010:	8c 2f       	mov	r24, r28
    6012:	9d 2f       	mov	r25, r29
    6014:	02 c0       	rjmp	.+4      	; 0x601a <twiCreate+0x84>
    6016:	80 e0       	ldi	r24, 0x00	; 0
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	df 91       	pop	r29
    601c:	cf 91       	pop	r28
    601e:	1f 91       	pop	r17
    6020:	0f 91       	pop	r16
    6022:	ff 90       	pop	r15
    6024:	ef 90       	pop	r14
    6026:	df 90       	pop	r13
    6028:	cf 90       	pop	r12
    602a:	bf 90       	pop	r11
    602c:	af 90       	pop	r10
    602e:	08 95       	ret

00006030 <twiIsBusy>:
    6030:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6034:	81 70       	andi	r24, 0x01	; 1
    6036:	08 95       	ret

00006038 <twiTransmit>:
    6038:	ff 92       	push	r15
    603a:	0f 93       	push	r16
    603c:	1f 93       	push	r17
    603e:	cf 93       	push	r28
    6040:	df 93       	push	r29
    6042:	00 97       	sbiw	r24, 0x00	; 0
    6044:	d1 f1       	breq	.+116    	; 0x60ba <twiTransmit+0x82>
    6046:	4a 30       	cpi	r20, 0x0A	; 10
    6048:	d0 f5       	brcc	.+116    	; 0x60be <twiTransmit+0x86>
    604a:	f4 2e       	mov	r15, r20
    604c:	8b 01       	movw	r16, r22
    604e:	ec 01       	movw	r28, r24
    6050:	ef df       	rcall	.-34     	; 0x6030 <twiIsBusy>
    6052:	81 11       	cpse	r24, r1
    6054:	36 c0       	rjmp	.+108    	; 0x60c2 <twiTransmit+0x8a>
    6056:	80 91 0c 1a 	lds	r24, 0x1A0C	; 0x801a0c <_twiCurrentHandler>
    605a:	90 91 0d 1a 	lds	r25, 0x1A0D	; 0x801a0d <_twiCurrentHandler+0x1>
    605e:	c8 17       	cp	r28, r24
    6060:	d9 07       	cpc	r29, r25
    6062:	41 f0       	breq	.+16     	; 0x6074 <twiTransmit+0x3c>
    6064:	87 df       	rcall	.-242    	; 0x5f74 <_initTwiInterface>
    6066:	89 81       	ldd	r24, Y+1	; 0x01
    6068:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    606c:	d0 93 0d 1a 	sts	0x1A0D, r29	; 0x801a0d <_twiCurrentHandler+0x1>
    6070:	c0 93 0c 1a 	sts	0x1A0C, r28	; 0x801a0c <_twiCurrentHandler>
    6074:	81 e0       	ldi	r24, 0x01	; 1
    6076:	8f 0d       	add	r24, r15
    6078:	80 93 0e 1a 	sts	0x1A0E, r24	; 0x801a0e <_twiMessageLen>
    607c:	88 81       	ld	r24, Y
    607e:	88 0f       	add	r24, r24
    6080:	80 93 0f 1a 	sts	0x1A0F, r24	; 0x801a0f <_twiMessageBuffer>
    6084:	ff 20       	and	r15, r15
    6086:	89 f0       	breq	.+34     	; 0x60aa <twiTransmit+0x72>
    6088:	f8 01       	movw	r30, r16
    608a:	a0 e1       	ldi	r26, 0x10	; 16
    608c:	ba e1       	ldi	r27, 0x1A	; 26
    608e:	4f ef       	ldi	r20, 0xFF	; 255
    6090:	4f 0d       	add	r20, r15
    6092:	64 2f       	mov	r22, r20
    6094:	70 e0       	ldi	r23, 0x00	; 0
    6096:	cb 01       	movw	r24, r22
    6098:	01 96       	adiw	r24, 0x01	; 1
    609a:	b8 01       	movw	r22, r16
    609c:	68 0f       	add	r22, r24
    609e:	79 1f       	adc	r23, r25
    60a0:	81 91       	ld	r24, Z+
    60a2:	8d 93       	st	X+, r24
    60a4:	e6 17       	cp	r30, r22
    60a6:	f7 07       	cpc	r31, r23
    60a8:	d9 f7       	brne	.-10     	; 0x60a0 <twiTransmit+0x68>
    60aa:	88 ef       	ldi	r24, 0xF8	; 248
    60ac:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    60b0:	85 ea       	ldi	r24, 0xA5	; 165
    60b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60b6:	84 e0       	ldi	r24, 0x04	; 4
    60b8:	05 c0       	rjmp	.+10     	; 0x60c4 <twiTransmit+0x8c>
    60ba:	86 e0       	ldi	r24, 0x06	; 6
    60bc:	03 c0       	rjmp	.+6      	; 0x60c4 <twiTransmit+0x8c>
    60be:	87 e0       	ldi	r24, 0x07	; 7
    60c0:	01 c0       	rjmp	.+2      	; 0x60c4 <twiTransmit+0x8c>
    60c2:	82 e0       	ldi	r24, 0x02	; 2
    60c4:	df 91       	pop	r29
    60c6:	cf 91       	pop	r28
    60c8:	1f 91       	pop	r17
    60ca:	0f 91       	pop	r16
    60cc:	ff 90       	pop	r15
    60ce:	08 95       	ret

000060d0 <twiReceive>:
    60d0:	1f 93       	push	r17
    60d2:	cf 93       	push	r28
    60d4:	df 93       	push	r29
    60d6:	00 97       	sbiw	r24, 0x00	; 0
    60d8:	29 f1       	breq	.+74     	; 0x6124 <twiReceive+0x54>
    60da:	6b 30       	cpi	r22, 0x0B	; 11
    60dc:	28 f5       	brcc	.+74     	; 0x6128 <twiReceive+0x58>
    60de:	16 2f       	mov	r17, r22
    60e0:	ec 01       	movw	r28, r24
    60e2:	a6 df       	rcall	.-180    	; 0x6030 <twiIsBusy>
    60e4:	81 11       	cpse	r24, r1
    60e6:	22 c0       	rjmp	.+68     	; 0x612c <twiReceive+0x5c>
    60e8:	80 91 0c 1a 	lds	r24, 0x1A0C	; 0x801a0c <_twiCurrentHandler>
    60ec:	90 91 0d 1a 	lds	r25, 0x1A0D	; 0x801a0d <_twiCurrentHandler+0x1>
    60f0:	c8 17       	cp	r28, r24
    60f2:	d9 07       	cpc	r29, r25
    60f4:	41 f0       	breq	.+16     	; 0x6106 <twiReceive+0x36>
    60f6:	3e df       	rcall	.-388    	; 0x5f74 <_initTwiInterface>
    60f8:	89 81       	ldd	r24, Y+1	; 0x01
    60fa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    60fe:	d0 93 0d 1a 	sts	0x1A0D, r29	; 0x801a0d <_twiCurrentHandler+0x1>
    6102:	c0 93 0c 1a 	sts	0x1A0C, r28	; 0x801a0c <_twiCurrentHandler>
    6106:	10 93 0e 1a 	sts	0x1A0E, r17	; 0x801a0e <_twiMessageLen>
    610a:	88 81       	ld	r24, Y
    610c:	88 0f       	add	r24, r24
    610e:	81 60       	ori	r24, 0x01	; 1
    6110:	80 93 0f 1a 	sts	0x1A0F, r24	; 0x801a0f <_twiMessageBuffer>
    6114:	88 ef       	ldi	r24, 0xF8	; 248
    6116:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    611a:	85 ea       	ldi	r24, 0xA5	; 165
    611c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6120:	85 e0       	ldi	r24, 0x05	; 5
    6122:	05 c0       	rjmp	.+10     	; 0x612e <twiReceive+0x5e>
    6124:	86 e0       	ldi	r24, 0x06	; 6
    6126:	03 c0       	rjmp	.+6      	; 0x612e <twiReceive+0x5e>
    6128:	87 e0       	ldi	r24, 0x07	; 7
    612a:	01 c0       	rjmp	.+2      	; 0x612e <twiReceive+0x5e>
    612c:	82 e0       	ldi	r24, 0x02	; 2
    612e:	df 91       	pop	r29
    6130:	cf 91       	pop	r28
    6132:	1f 91       	pop	r17
    6134:	08 95       	ret

00006136 <__vector_39>:
    6136:	1f 92       	push	r1
    6138:	0f 92       	push	r0
    613a:	0f b6       	in	r0, 0x3f	; 63
    613c:	0f 92       	push	r0
    613e:	11 24       	eor	r1, r1
    6140:	0b b6       	in	r0, 0x3b	; 59
    6142:	0f 92       	push	r0
    6144:	2f 93       	push	r18
    6146:	3f 93       	push	r19
    6148:	4f 93       	push	r20
    614a:	5f 93       	push	r21
    614c:	6f 93       	push	r22
    614e:	7f 93       	push	r23
    6150:	8f 93       	push	r24
    6152:	9f 93       	push	r25
    6154:	af 93       	push	r26
    6156:	bf 93       	push	r27
    6158:	ef 93       	push	r30
    615a:	ff 93       	push	r31
    615c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6160:	8e 2f       	mov	r24, r30
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	fc 01       	movw	r30, r24
    6166:	38 97       	sbiw	r30, 0x08	; 8
    6168:	e1 35       	cpi	r30, 0x51	; 81
    616a:	f1 05       	cpc	r31, r1
    616c:	08 f0       	brcs	.+2      	; 0x6170 <__vector_39+0x3a>
    616e:	75 c0       	rjmp	.+234    	; 0x625a <__vector_39+0x124>
    6170:	88 27       	eor	r24, r24
    6172:	e4 58       	subi	r30, 0x84	; 132
    6174:	ff 4f       	sbci	r31, 0xFF	; 255
    6176:	8f 4f       	sbci	r24, 0xFF	; 255
    6178:	8d c6       	rjmp	.+3354   	; 0x6e94 <__tablejump2__>
    617a:	10 92 0b 1a 	sts	0x1A0B, r1	; 0x801a0b <_index.1885>
    617e:	e0 91 0b 1a 	lds	r30, 0x1A0B	; 0x801a0b <_index.1885>
    6182:	80 91 0e 1a 	lds	r24, 0x1A0E	; 0x801a0e <_twiMessageLen>
    6186:	e8 17       	cp	r30, r24
    6188:	70 f4       	brcc	.+28     	; 0x61a6 <__vector_39+0x70>
    618a:	81 e0       	ldi	r24, 0x01	; 1
    618c:	8e 0f       	add	r24, r30
    618e:	80 93 0b 1a 	sts	0x1A0B, r24	; 0x801a0b <_index.1885>
    6192:	f0 e0       	ldi	r31, 0x00	; 0
    6194:	e1 5f       	subi	r30, 0xF1	; 241
    6196:	f5 4e       	sbci	r31, 0xE5	; 229
    6198:	80 81       	ld	r24, Z
    619a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    619e:	85 e8       	ldi	r24, 0x85	; 133
    61a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61a4:	72 c0       	rjmp	.+228    	; 0x628a <__vector_39+0x154>
    61a6:	84 e9       	ldi	r24, 0x94	; 148
    61a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61ac:	80 91 0c 1a 	lds	r24, 0x1A0C	; 0x801a0c <_twiCurrentHandler>
    61b0:	90 91 0d 1a 	lds	r25, 0x1A0D	; 0x801a0d <_twiCurrentHandler+0x1>
    61b4:	dc 01       	movw	r26, r24
    61b6:	12 96       	adiw	r26, 0x02	; 2
    61b8:	ed 91       	ld	r30, X+
    61ba:	fc 91       	ld	r31, X
    61bc:	13 97       	sbiw	r26, 0x03	; 3
    61be:	30 97       	sbiw	r30, 0x00	; 0
    61c0:	09 f4       	brne	.+2      	; 0x61c4 <__vector_39+0x8e>
    61c2:	63 c0       	rjmp	.+198    	; 0x628a <__vector_39+0x154>
    61c4:	20 e0       	ldi	r18, 0x00	; 0
    61c6:	40 e0       	ldi	r20, 0x00	; 0
    61c8:	50 e0       	ldi	r21, 0x00	; 0
    61ca:	64 e0       	ldi	r22, 0x04	; 4
    61cc:	19 95       	eicall
    61ce:	5d c0       	rjmp	.+186    	; 0x628a <__vector_39+0x154>
    61d0:	e0 91 0b 1a 	lds	r30, 0x1A0B	; 0x801a0b <_index.1885>
    61d4:	81 e0       	ldi	r24, 0x01	; 1
    61d6:	8e 0f       	add	r24, r30
    61d8:	80 93 0b 1a 	sts	0x1A0B, r24	; 0x801a0b <_index.1885>
    61dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    61e0:	f0 e0       	ldi	r31, 0x00	; 0
    61e2:	e1 5f       	subi	r30, 0xF1	; 241
    61e4:	f5 4e       	sbci	r31, 0xE5	; 229
    61e6:	80 83       	st	Z, r24
    61e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    61ec:	80 34       	cpi	r24, 0x40	; 64
    61ee:	11 f4       	brne	.+4      	; 0x61f4 <__vector_39+0xbe>
    61f0:	10 92 0b 1a 	sts	0x1A0B, r1	; 0x801a0b <_index.1885>
    61f4:	20 91 0b 1a 	lds	r18, 0x1A0B	; 0x801a0b <_index.1885>
    61f8:	30 e0       	ldi	r19, 0x00	; 0
    61fa:	80 91 0e 1a 	lds	r24, 0x1A0E	; 0x801a0e <_twiMessageLen>
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	01 97       	sbiw	r24, 0x01	; 1
    6202:	28 17       	cp	r18, r24
    6204:	39 07       	cpc	r19, r25
    6206:	24 f4       	brge	.+8      	; 0x6210 <__vector_39+0xda>
    6208:	85 ec       	ldi	r24, 0xC5	; 197
    620a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    620e:	3d c0       	rjmp	.+122    	; 0x628a <__vector_39+0x154>
    6210:	85 e8       	ldi	r24, 0x85	; 133
    6212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6216:	39 c0       	rjmp	.+114    	; 0x628a <__vector_39+0x154>
    6218:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    621c:	e0 91 0b 1a 	lds	r30, 0x1A0B	; 0x801a0b <_index.1885>
    6220:	f0 e0       	ldi	r31, 0x00	; 0
    6222:	e1 5f       	subi	r30, 0xF1	; 241
    6224:	f5 4e       	sbci	r31, 0xE5	; 229
    6226:	80 83       	st	Z, r24
    6228:	84 e9       	ldi	r24, 0x94	; 148
    622a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    622e:	80 91 0c 1a 	lds	r24, 0x1A0C	; 0x801a0c <_twiCurrentHandler>
    6232:	90 91 0d 1a 	lds	r25, 0x1A0D	; 0x801a0d <_twiCurrentHandler+0x1>
    6236:	dc 01       	movw	r26, r24
    6238:	12 96       	adiw	r26, 0x02	; 2
    623a:	ed 91       	ld	r30, X+
    623c:	fc 91       	ld	r31, X
    623e:	13 97       	sbiw	r26, 0x03	; 3
    6240:	30 97       	sbiw	r30, 0x00	; 0
    6242:	19 f1       	breq	.+70     	; 0x628a <__vector_39+0x154>
    6244:	20 91 0e 1a 	lds	r18, 0x1A0E	; 0x801a0e <_twiMessageLen>
    6248:	4f e0       	ldi	r20, 0x0F	; 15
    624a:	5a e1       	ldi	r21, 0x1A	; 26
    624c:	65 e0       	ldi	r22, 0x05	; 5
    624e:	19 95       	eicall
    6250:	1c c0       	rjmp	.+56     	; 0x628a <__vector_39+0x154>
    6252:	85 ea       	ldi	r24, 0xA5	; 165
    6254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6258:	18 c0       	rjmp	.+48     	; 0x628a <__vector_39+0x154>
    625a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    625e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6262:	84 e0       	ldi	r24, 0x04	; 4
    6264:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6268:	80 91 0c 1a 	lds	r24, 0x1A0C	; 0x801a0c <_twiCurrentHandler>
    626c:	90 91 0d 1a 	lds	r25, 0x1A0D	; 0x801a0d <_twiCurrentHandler+0x1>
    6270:	dc 01       	movw	r26, r24
    6272:	12 96       	adiw	r26, 0x02	; 2
    6274:	ed 91       	ld	r30, X+
    6276:	fc 91       	ld	r31, X
    6278:	13 97       	sbiw	r26, 0x03	; 3
    627a:	30 97       	sbiw	r30, 0x00	; 0
    627c:	31 f0       	breq	.+12     	; 0x628a <__vector_39+0x154>
    627e:	20 e0       	ldi	r18, 0x00	; 0
    6280:	40 e0       	ldi	r20, 0x00	; 0
    6282:	50 e0       	ldi	r21, 0x00	; 0
    6284:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    6288:	19 95       	eicall
    628a:	ff 91       	pop	r31
    628c:	ef 91       	pop	r30
    628e:	bf 91       	pop	r27
    6290:	af 91       	pop	r26
    6292:	9f 91       	pop	r25
    6294:	8f 91       	pop	r24
    6296:	7f 91       	pop	r23
    6298:	6f 91       	pop	r22
    629a:	5f 91       	pop	r21
    629c:	4f 91       	pop	r20
    629e:	3f 91       	pop	r19
    62a0:	2f 91       	pop	r18
    62a2:	0f 90       	pop	r0
    62a4:	0b be       	out	0x3b, r0	; 59
    62a6:	0f 90       	pop	r0
    62a8:	0f be       	out	0x3f, r0	; 63
    62aa:	0f 90       	pop	r0
    62ac:	1f 90       	pop	r1
    62ae:	18 95       	reti

000062b0 <fifo_init>:
    62b0:	fc 01       	movw	r30, r24
    62b2:	41 11       	cpse	r20, r1
    62b4:	01 c0       	rjmp	.+2      	; 0x62b8 <fifo_init+0x8>
    62b6:	3a d7       	rcall	.+3700   	; 0x712c <abort>
    62b8:	84 2f       	mov	r24, r20
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	9c 01       	movw	r18, r24
    62be:	21 50       	subi	r18, 0x01	; 1
    62c0:	31 09       	sbc	r19, r1
    62c2:	82 23       	and	r24, r18
    62c4:	93 23       	and	r25, r19
    62c6:	89 2b       	or	r24, r25
    62c8:	09 f0       	breq	.+2      	; 0x62cc <fifo_init+0x1c>
    62ca:	30 d7       	rcall	.+3680   	; 0x712c <abort>
    62cc:	41 38       	cpi	r20, 0x81	; 129
    62ce:	08 f0       	brcs	.+2      	; 0x62d2 <fifo_init+0x22>
    62d0:	2d d7       	rcall	.+3674   	; 0x712c <abort>
    62d2:	12 82       	std	Z+2, r1	; 0x02
    62d4:	13 82       	std	Z+3, r1	; 0x03
    62d6:	44 83       	std	Z+4, r20	; 0x04
    62d8:	44 0f       	add	r20, r20
    62da:	41 50       	subi	r20, 0x01	; 1
    62dc:	45 83       	std	Z+5, r20	; 0x05
    62de:	71 83       	std	Z+1, r23	; 0x01
    62e0:	60 83       	st	Z, r22
    62e2:	80 e0       	ldi	r24, 0x00	; 0
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	08 95       	ret

000062e8 <vfprintf>:
    62e8:	2f 92       	push	r2
    62ea:	3f 92       	push	r3
    62ec:	4f 92       	push	r4
    62ee:	5f 92       	push	r5
    62f0:	6f 92       	push	r6
    62f2:	7f 92       	push	r7
    62f4:	8f 92       	push	r8
    62f6:	9f 92       	push	r9
    62f8:	af 92       	push	r10
    62fa:	bf 92       	push	r11
    62fc:	cf 92       	push	r12
    62fe:	df 92       	push	r13
    6300:	ef 92       	push	r14
    6302:	ff 92       	push	r15
    6304:	0f 93       	push	r16
    6306:	1f 93       	push	r17
    6308:	cf 93       	push	r28
    630a:	df 93       	push	r29
    630c:	cd b7       	in	r28, 0x3d	; 61
    630e:	de b7       	in	r29, 0x3e	; 62
    6310:	60 97       	sbiw	r28, 0x10	; 16
    6312:	0f b6       	in	r0, 0x3f	; 63
    6314:	f8 94       	cli
    6316:	de bf       	out	0x3e, r29	; 62
    6318:	0f be       	out	0x3f, r0	; 63
    631a:	cd bf       	out	0x3d, r28	; 61
    631c:	7c 01       	movw	r14, r24
    631e:	1b 01       	movw	r2, r22
    6320:	6a 01       	movw	r12, r20
    6322:	fc 01       	movw	r30, r24
    6324:	17 82       	std	Z+7, r1	; 0x07
    6326:	16 82       	std	Z+6, r1	; 0x06
    6328:	83 81       	ldd	r24, Z+3	; 0x03
    632a:	81 ff       	sbrs	r24, 1
    632c:	2b c3       	rjmp	.+1622   	; 0x6984 <vfprintf+0x69c>
    632e:	9e 01       	movw	r18, r28
    6330:	2f 5f       	subi	r18, 0xFF	; 255
    6332:	3f 4f       	sbci	r19, 0xFF	; 255
    6334:	39 01       	movw	r6, r18
    6336:	f7 01       	movw	r30, r14
    6338:	93 81       	ldd	r25, Z+3	; 0x03
    633a:	f1 01       	movw	r30, r2
    633c:	93 fd       	sbrc	r25, 3
    633e:	85 91       	lpm	r24, Z+
    6340:	93 ff       	sbrs	r25, 3
    6342:	81 91       	ld	r24, Z+
    6344:	1f 01       	movw	r2, r30
    6346:	88 23       	and	r24, r24
    6348:	09 f4       	brne	.+2      	; 0x634c <vfprintf+0x64>
    634a:	18 c3       	rjmp	.+1584   	; 0x697c <vfprintf+0x694>
    634c:	85 32       	cpi	r24, 0x25	; 37
    634e:	39 f4       	brne	.+14     	; 0x635e <vfprintf+0x76>
    6350:	93 fd       	sbrc	r25, 3
    6352:	85 91       	lpm	r24, Z+
    6354:	93 ff       	sbrs	r25, 3
    6356:	81 91       	ld	r24, Z+
    6358:	1f 01       	movw	r2, r30
    635a:	85 32       	cpi	r24, 0x25	; 37
    635c:	39 f4       	brne	.+14     	; 0x636c <vfprintf+0x84>
    635e:	b7 01       	movw	r22, r14
    6360:	90 e0       	ldi	r25, 0x00	; 0
    6362:	0e 94 e7 39 	call	0x73ce	; 0x73ce <fputc>
    6366:	56 01       	movw	r10, r12
    6368:	65 01       	movw	r12, r10
    636a:	e5 cf       	rjmp	.-54     	; 0x6336 <vfprintf+0x4e>
    636c:	10 e0       	ldi	r17, 0x00	; 0
    636e:	51 2c       	mov	r5, r1
    6370:	91 2c       	mov	r9, r1
    6372:	ff e1       	ldi	r31, 0x1F	; 31
    6374:	f9 15       	cp	r31, r9
    6376:	d8 f0       	brcs	.+54     	; 0x63ae <vfprintf+0xc6>
    6378:	8b 32       	cpi	r24, 0x2B	; 43
    637a:	79 f0       	breq	.+30     	; 0x639a <vfprintf+0xb2>
    637c:	38 f4       	brcc	.+14     	; 0x638c <vfprintf+0xa4>
    637e:	80 32       	cpi	r24, 0x20	; 32
    6380:	79 f0       	breq	.+30     	; 0x63a0 <vfprintf+0xb8>
    6382:	83 32       	cpi	r24, 0x23	; 35
    6384:	a1 f4       	brne	.+40     	; 0x63ae <vfprintf+0xc6>
    6386:	f9 2d       	mov	r31, r9
    6388:	f0 61       	ori	r31, 0x10	; 16
    638a:	2e c0       	rjmp	.+92     	; 0x63e8 <vfprintf+0x100>
    638c:	8d 32       	cpi	r24, 0x2D	; 45
    638e:	61 f0       	breq	.+24     	; 0x63a8 <vfprintf+0xc0>
    6390:	80 33       	cpi	r24, 0x30	; 48
    6392:	69 f4       	brne	.+26     	; 0x63ae <vfprintf+0xc6>
    6394:	29 2d       	mov	r18, r9
    6396:	21 60       	ori	r18, 0x01	; 1
    6398:	2d c0       	rjmp	.+90     	; 0x63f4 <vfprintf+0x10c>
    639a:	39 2d       	mov	r19, r9
    639c:	32 60       	ori	r19, 0x02	; 2
    639e:	93 2e       	mov	r9, r19
    63a0:	89 2d       	mov	r24, r9
    63a2:	84 60       	ori	r24, 0x04	; 4
    63a4:	98 2e       	mov	r9, r24
    63a6:	2a c0       	rjmp	.+84     	; 0x63fc <vfprintf+0x114>
    63a8:	e9 2d       	mov	r30, r9
    63aa:	e8 60       	ori	r30, 0x08	; 8
    63ac:	15 c0       	rjmp	.+42     	; 0x63d8 <vfprintf+0xf0>
    63ae:	97 fc       	sbrc	r9, 7
    63b0:	2d c0       	rjmp	.+90     	; 0x640c <vfprintf+0x124>
    63b2:	20 ed       	ldi	r18, 0xD0	; 208
    63b4:	28 0f       	add	r18, r24
    63b6:	2a 30       	cpi	r18, 0x0A	; 10
    63b8:	88 f4       	brcc	.+34     	; 0x63dc <vfprintf+0xf4>
    63ba:	96 fe       	sbrs	r9, 6
    63bc:	06 c0       	rjmp	.+12     	; 0x63ca <vfprintf+0xe2>
    63be:	3a e0       	ldi	r19, 0x0A	; 10
    63c0:	13 9f       	mul	r17, r19
    63c2:	20 0d       	add	r18, r0
    63c4:	11 24       	eor	r1, r1
    63c6:	12 2f       	mov	r17, r18
    63c8:	19 c0       	rjmp	.+50     	; 0x63fc <vfprintf+0x114>
    63ca:	8a e0       	ldi	r24, 0x0A	; 10
    63cc:	58 9e       	mul	r5, r24
    63ce:	20 0d       	add	r18, r0
    63d0:	11 24       	eor	r1, r1
    63d2:	52 2e       	mov	r5, r18
    63d4:	e9 2d       	mov	r30, r9
    63d6:	e0 62       	ori	r30, 0x20	; 32
    63d8:	9e 2e       	mov	r9, r30
    63da:	10 c0       	rjmp	.+32     	; 0x63fc <vfprintf+0x114>
    63dc:	8e 32       	cpi	r24, 0x2E	; 46
    63de:	31 f4       	brne	.+12     	; 0x63ec <vfprintf+0x104>
    63e0:	96 fc       	sbrc	r9, 6
    63e2:	cc c2       	rjmp	.+1432   	; 0x697c <vfprintf+0x694>
    63e4:	f9 2d       	mov	r31, r9
    63e6:	f0 64       	ori	r31, 0x40	; 64
    63e8:	9f 2e       	mov	r9, r31
    63ea:	08 c0       	rjmp	.+16     	; 0x63fc <vfprintf+0x114>
    63ec:	8c 36       	cpi	r24, 0x6C	; 108
    63ee:	21 f4       	brne	.+8      	; 0x63f8 <vfprintf+0x110>
    63f0:	29 2d       	mov	r18, r9
    63f2:	20 68       	ori	r18, 0x80	; 128
    63f4:	92 2e       	mov	r9, r18
    63f6:	02 c0       	rjmp	.+4      	; 0x63fc <vfprintf+0x114>
    63f8:	88 36       	cpi	r24, 0x68	; 104
    63fa:	41 f4       	brne	.+16     	; 0x640c <vfprintf+0x124>
    63fc:	f1 01       	movw	r30, r2
    63fe:	93 fd       	sbrc	r25, 3
    6400:	85 91       	lpm	r24, Z+
    6402:	93 ff       	sbrs	r25, 3
    6404:	81 91       	ld	r24, Z+
    6406:	1f 01       	movw	r2, r30
    6408:	81 11       	cpse	r24, r1
    640a:	b3 cf       	rjmp	.-154    	; 0x6372 <vfprintf+0x8a>
    640c:	9b eb       	ldi	r25, 0xBB	; 187
    640e:	98 0f       	add	r25, r24
    6410:	93 30       	cpi	r25, 0x03	; 3
    6412:	20 f4       	brcc	.+8      	; 0x641c <vfprintf+0x134>
    6414:	99 2d       	mov	r25, r9
    6416:	90 61       	ori	r25, 0x10	; 16
    6418:	80 5e       	subi	r24, 0xE0	; 224
    641a:	07 c0       	rjmp	.+14     	; 0x642a <vfprintf+0x142>
    641c:	9b e9       	ldi	r25, 0x9B	; 155
    641e:	98 0f       	add	r25, r24
    6420:	93 30       	cpi	r25, 0x03	; 3
    6422:	08 f0       	brcs	.+2      	; 0x6426 <vfprintf+0x13e>
    6424:	59 c1       	rjmp	.+690    	; 0x66d8 <vfprintf+0x3f0>
    6426:	99 2d       	mov	r25, r9
    6428:	9f 7e       	andi	r25, 0xEF	; 239
    642a:	96 ff       	sbrs	r25, 6
    642c:	16 e0       	ldi	r17, 0x06	; 6
    642e:	9f 73       	andi	r25, 0x3F	; 63
    6430:	99 2e       	mov	r9, r25
    6432:	85 36       	cpi	r24, 0x65	; 101
    6434:	19 f4       	brne	.+6      	; 0x643c <vfprintf+0x154>
    6436:	90 64       	ori	r25, 0x40	; 64
    6438:	99 2e       	mov	r9, r25
    643a:	08 c0       	rjmp	.+16     	; 0x644c <vfprintf+0x164>
    643c:	86 36       	cpi	r24, 0x66	; 102
    643e:	21 f4       	brne	.+8      	; 0x6448 <vfprintf+0x160>
    6440:	39 2f       	mov	r19, r25
    6442:	30 68       	ori	r19, 0x80	; 128
    6444:	93 2e       	mov	r9, r19
    6446:	02 c0       	rjmp	.+4      	; 0x644c <vfprintf+0x164>
    6448:	11 11       	cpse	r17, r1
    644a:	11 50       	subi	r17, 0x01	; 1
    644c:	97 fe       	sbrs	r9, 7
    644e:	07 c0       	rjmp	.+14     	; 0x645e <vfprintf+0x176>
    6450:	1c 33       	cpi	r17, 0x3C	; 60
    6452:	50 f4       	brcc	.+20     	; 0x6468 <vfprintf+0x180>
    6454:	44 24       	eor	r4, r4
    6456:	43 94       	inc	r4
    6458:	41 0e       	add	r4, r17
    645a:	27 e0       	ldi	r18, 0x07	; 7
    645c:	0b c0       	rjmp	.+22     	; 0x6474 <vfprintf+0x18c>
    645e:	18 30       	cpi	r17, 0x08	; 8
    6460:	38 f0       	brcs	.+14     	; 0x6470 <vfprintf+0x188>
    6462:	27 e0       	ldi	r18, 0x07	; 7
    6464:	17 e0       	ldi	r17, 0x07	; 7
    6466:	05 c0       	rjmp	.+10     	; 0x6472 <vfprintf+0x18a>
    6468:	27 e0       	ldi	r18, 0x07	; 7
    646a:	9c e3       	ldi	r25, 0x3C	; 60
    646c:	49 2e       	mov	r4, r25
    646e:	02 c0       	rjmp	.+4      	; 0x6474 <vfprintf+0x18c>
    6470:	21 2f       	mov	r18, r17
    6472:	41 2c       	mov	r4, r1
    6474:	56 01       	movw	r10, r12
    6476:	84 e0       	ldi	r24, 0x04	; 4
    6478:	a8 0e       	add	r10, r24
    647a:	b1 1c       	adc	r11, r1
    647c:	f6 01       	movw	r30, r12
    647e:	60 81       	ld	r22, Z
    6480:	71 81       	ldd	r23, Z+1	; 0x01
    6482:	82 81       	ldd	r24, Z+2	; 0x02
    6484:	93 81       	ldd	r25, Z+3	; 0x03
    6486:	04 2d       	mov	r16, r4
    6488:	a3 01       	movw	r20, r6
    648a:	54 d6       	rcall	.+3240   	; 0x7134 <__ftoa_engine>
    648c:	6c 01       	movw	r12, r24
    648e:	f9 81       	ldd	r31, Y+1	; 0x01
    6490:	fc 87       	std	Y+12, r31	; 0x0c
    6492:	f0 ff       	sbrs	r31, 0
    6494:	02 c0       	rjmp	.+4      	; 0x649a <vfprintf+0x1b2>
    6496:	f3 ff       	sbrs	r31, 3
    6498:	06 c0       	rjmp	.+12     	; 0x64a6 <vfprintf+0x1be>
    649a:	91 fc       	sbrc	r9, 1
    649c:	06 c0       	rjmp	.+12     	; 0x64aa <vfprintf+0x1c2>
    649e:	92 fe       	sbrs	r9, 2
    64a0:	06 c0       	rjmp	.+12     	; 0x64ae <vfprintf+0x1c6>
    64a2:	00 e2       	ldi	r16, 0x20	; 32
    64a4:	05 c0       	rjmp	.+10     	; 0x64b0 <vfprintf+0x1c8>
    64a6:	0d e2       	ldi	r16, 0x2D	; 45
    64a8:	03 c0       	rjmp	.+6      	; 0x64b0 <vfprintf+0x1c8>
    64aa:	0b e2       	ldi	r16, 0x2B	; 43
    64ac:	01 c0       	rjmp	.+2      	; 0x64b0 <vfprintf+0x1c8>
    64ae:	00 e0       	ldi	r16, 0x00	; 0
    64b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    64b2:	8c 70       	andi	r24, 0x0C	; 12
    64b4:	19 f0       	breq	.+6      	; 0x64bc <vfprintf+0x1d4>
    64b6:	01 11       	cpse	r16, r1
    64b8:	43 c2       	rjmp	.+1158   	; 0x6940 <vfprintf+0x658>
    64ba:	80 c2       	rjmp	.+1280   	; 0x69bc <vfprintf+0x6d4>
    64bc:	97 fe       	sbrs	r9, 7
    64be:	10 c0       	rjmp	.+32     	; 0x64e0 <vfprintf+0x1f8>
    64c0:	4c 0c       	add	r4, r12
    64c2:	fc 85       	ldd	r31, Y+12	; 0x0c
    64c4:	f4 ff       	sbrs	r31, 4
    64c6:	04 c0       	rjmp	.+8      	; 0x64d0 <vfprintf+0x1e8>
    64c8:	8a 81       	ldd	r24, Y+2	; 0x02
    64ca:	81 33       	cpi	r24, 0x31	; 49
    64cc:	09 f4       	brne	.+2      	; 0x64d0 <vfprintf+0x1e8>
    64ce:	4a 94       	dec	r4
    64d0:	14 14       	cp	r1, r4
    64d2:	74 f5       	brge	.+92     	; 0x6530 <vfprintf+0x248>
    64d4:	28 e0       	ldi	r18, 0x08	; 8
    64d6:	24 15       	cp	r18, r4
    64d8:	78 f5       	brcc	.+94     	; 0x6538 <vfprintf+0x250>
    64da:	88 e0       	ldi	r24, 0x08	; 8
    64dc:	48 2e       	mov	r4, r24
    64de:	2c c0       	rjmp	.+88     	; 0x6538 <vfprintf+0x250>
    64e0:	96 fc       	sbrc	r9, 6
    64e2:	2a c0       	rjmp	.+84     	; 0x6538 <vfprintf+0x250>
    64e4:	81 2f       	mov	r24, r17
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	8c 15       	cp	r24, r12
    64ea:	9d 05       	cpc	r25, r13
    64ec:	9c f0       	brlt	.+38     	; 0x6514 <vfprintf+0x22c>
    64ee:	3c ef       	ldi	r19, 0xFC	; 252
    64f0:	c3 16       	cp	r12, r19
    64f2:	3f ef       	ldi	r19, 0xFF	; 255
    64f4:	d3 06       	cpc	r13, r19
    64f6:	74 f0       	brlt	.+28     	; 0x6514 <vfprintf+0x22c>
    64f8:	89 2d       	mov	r24, r9
    64fa:	80 68       	ori	r24, 0x80	; 128
    64fc:	98 2e       	mov	r9, r24
    64fe:	0a c0       	rjmp	.+20     	; 0x6514 <vfprintf+0x22c>
    6500:	e2 e0       	ldi	r30, 0x02	; 2
    6502:	f0 e0       	ldi	r31, 0x00	; 0
    6504:	ec 0f       	add	r30, r28
    6506:	fd 1f       	adc	r31, r29
    6508:	e1 0f       	add	r30, r17
    650a:	f1 1d       	adc	r31, r1
    650c:	80 81       	ld	r24, Z
    650e:	80 33       	cpi	r24, 0x30	; 48
    6510:	19 f4       	brne	.+6      	; 0x6518 <vfprintf+0x230>
    6512:	11 50       	subi	r17, 0x01	; 1
    6514:	11 11       	cpse	r17, r1
    6516:	f4 cf       	rjmp	.-24     	; 0x6500 <vfprintf+0x218>
    6518:	97 fe       	sbrs	r9, 7
    651a:	0e c0       	rjmp	.+28     	; 0x6538 <vfprintf+0x250>
    651c:	44 24       	eor	r4, r4
    651e:	43 94       	inc	r4
    6520:	41 0e       	add	r4, r17
    6522:	81 2f       	mov	r24, r17
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	c8 16       	cp	r12, r24
    6528:	d9 06       	cpc	r13, r25
    652a:	2c f4       	brge	.+10     	; 0x6536 <vfprintf+0x24e>
    652c:	1c 19       	sub	r17, r12
    652e:	04 c0       	rjmp	.+8      	; 0x6538 <vfprintf+0x250>
    6530:	44 24       	eor	r4, r4
    6532:	43 94       	inc	r4
    6534:	01 c0       	rjmp	.+2      	; 0x6538 <vfprintf+0x250>
    6536:	10 e0       	ldi	r17, 0x00	; 0
    6538:	97 fe       	sbrs	r9, 7
    653a:	06 c0       	rjmp	.+12     	; 0x6548 <vfprintf+0x260>
    653c:	1c 14       	cp	r1, r12
    653e:	1d 04       	cpc	r1, r13
    6540:	34 f4       	brge	.+12     	; 0x654e <vfprintf+0x266>
    6542:	c6 01       	movw	r24, r12
    6544:	01 96       	adiw	r24, 0x01	; 1
    6546:	05 c0       	rjmp	.+10     	; 0x6552 <vfprintf+0x26a>
    6548:	85 e0       	ldi	r24, 0x05	; 5
    654a:	90 e0       	ldi	r25, 0x00	; 0
    654c:	02 c0       	rjmp	.+4      	; 0x6552 <vfprintf+0x26a>
    654e:	81 e0       	ldi	r24, 0x01	; 1
    6550:	90 e0       	ldi	r25, 0x00	; 0
    6552:	01 11       	cpse	r16, r1
    6554:	01 96       	adiw	r24, 0x01	; 1
    6556:	11 23       	and	r17, r17
    6558:	31 f0       	breq	.+12     	; 0x6566 <vfprintf+0x27e>
    655a:	21 2f       	mov	r18, r17
    655c:	30 e0       	ldi	r19, 0x00	; 0
    655e:	2f 5f       	subi	r18, 0xFF	; 255
    6560:	3f 4f       	sbci	r19, 0xFF	; 255
    6562:	82 0f       	add	r24, r18
    6564:	93 1f       	adc	r25, r19
    6566:	25 2d       	mov	r18, r5
    6568:	30 e0       	ldi	r19, 0x00	; 0
    656a:	82 17       	cp	r24, r18
    656c:	93 07       	cpc	r25, r19
    656e:	14 f4       	brge	.+4      	; 0x6574 <vfprintf+0x28c>
    6570:	58 1a       	sub	r5, r24
    6572:	01 c0       	rjmp	.+2      	; 0x6576 <vfprintf+0x28e>
    6574:	51 2c       	mov	r5, r1
    6576:	89 2d       	mov	r24, r9
    6578:	89 70       	andi	r24, 0x09	; 9
    657a:	41 f4       	brne	.+16     	; 0x658c <vfprintf+0x2a4>
    657c:	55 20       	and	r5, r5
    657e:	31 f0       	breq	.+12     	; 0x658c <vfprintf+0x2a4>
    6580:	b7 01       	movw	r22, r14
    6582:	80 e2       	ldi	r24, 0x20	; 32
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	23 d7       	rcall	.+3654   	; 0x73ce <fputc>
    6588:	5a 94       	dec	r5
    658a:	f8 cf       	rjmp	.-16     	; 0x657c <vfprintf+0x294>
    658c:	00 23       	and	r16, r16
    658e:	21 f0       	breq	.+8      	; 0x6598 <vfprintf+0x2b0>
    6590:	b7 01       	movw	r22, r14
    6592:	80 2f       	mov	r24, r16
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	1b d7       	rcall	.+3638   	; 0x73ce <fputc>
    6598:	93 fc       	sbrc	r9, 3
    659a:	08 c0       	rjmp	.+16     	; 0x65ac <vfprintf+0x2c4>
    659c:	55 20       	and	r5, r5
    659e:	31 f0       	breq	.+12     	; 0x65ac <vfprintf+0x2c4>
    65a0:	b7 01       	movw	r22, r14
    65a2:	80 e3       	ldi	r24, 0x30	; 48
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	13 d7       	rcall	.+3622   	; 0x73ce <fputc>
    65a8:	5a 94       	dec	r5
    65aa:	f8 cf       	rjmp	.-16     	; 0x659c <vfprintf+0x2b4>
    65ac:	97 fe       	sbrs	r9, 7
    65ae:	4a c0       	rjmp	.+148    	; 0x6644 <vfprintf+0x35c>
    65b0:	46 01       	movw	r8, r12
    65b2:	d7 fe       	sbrs	r13, 7
    65b4:	02 c0       	rjmp	.+4      	; 0x65ba <vfprintf+0x2d2>
    65b6:	81 2c       	mov	r8, r1
    65b8:	91 2c       	mov	r9, r1
    65ba:	c6 01       	movw	r24, r12
    65bc:	88 19       	sub	r24, r8
    65be:	99 09       	sbc	r25, r9
    65c0:	f3 01       	movw	r30, r6
    65c2:	e8 0f       	add	r30, r24
    65c4:	f9 1f       	adc	r31, r25
    65c6:	fe 87       	std	Y+14, r31	; 0x0e
    65c8:	ed 87       	std	Y+13, r30	; 0x0d
    65ca:	96 01       	movw	r18, r12
    65cc:	24 19       	sub	r18, r4
    65ce:	31 09       	sbc	r19, r1
    65d0:	38 8b       	std	Y+16, r19	; 0x10
    65d2:	2f 87       	std	Y+15, r18	; 0x0f
    65d4:	01 2f       	mov	r16, r17
    65d6:	10 e0       	ldi	r17, 0x00	; 0
    65d8:	11 95       	neg	r17
    65da:	01 95       	neg	r16
    65dc:	11 09       	sbc	r17, r1
    65de:	3f ef       	ldi	r19, 0xFF	; 255
    65e0:	83 16       	cp	r8, r19
    65e2:	93 06       	cpc	r9, r19
    65e4:	21 f4       	brne	.+8      	; 0x65ee <vfprintf+0x306>
    65e6:	b7 01       	movw	r22, r14
    65e8:	8e e2       	ldi	r24, 0x2E	; 46
    65ea:	90 e0       	ldi	r25, 0x00	; 0
    65ec:	f0 d6       	rcall	.+3552   	; 0x73ce <fputc>
    65ee:	c8 14       	cp	r12, r8
    65f0:	d9 04       	cpc	r13, r9
    65f2:	4c f0       	brlt	.+18     	; 0x6606 <vfprintf+0x31e>
    65f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    65f6:	98 89       	ldd	r25, Y+16	; 0x10
    65f8:	88 15       	cp	r24, r8
    65fa:	99 05       	cpc	r25, r9
    65fc:	24 f4       	brge	.+8      	; 0x6606 <vfprintf+0x31e>
    65fe:	ed 85       	ldd	r30, Y+13	; 0x0d
    6600:	fe 85       	ldd	r31, Y+14	; 0x0e
    6602:	81 81       	ldd	r24, Z+1	; 0x01
    6604:	01 c0       	rjmp	.+2      	; 0x6608 <vfprintf+0x320>
    6606:	80 e3       	ldi	r24, 0x30	; 48
    6608:	f1 e0       	ldi	r31, 0x01	; 1
    660a:	8f 1a       	sub	r8, r31
    660c:	91 08       	sbc	r9, r1
    660e:	2d 85       	ldd	r18, Y+13	; 0x0d
    6610:	3e 85       	ldd	r19, Y+14	; 0x0e
    6612:	2f 5f       	subi	r18, 0xFF	; 255
    6614:	3f 4f       	sbci	r19, 0xFF	; 255
    6616:	3e 87       	std	Y+14, r19	; 0x0e
    6618:	2d 87       	std	Y+13, r18	; 0x0d
    661a:	80 16       	cp	r8, r16
    661c:	91 06       	cpc	r9, r17
    661e:	24 f0       	brlt	.+8      	; 0x6628 <vfprintf+0x340>
    6620:	b7 01       	movw	r22, r14
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	d4 d6       	rcall	.+3496   	; 0x73ce <fputc>
    6626:	db cf       	rjmp	.-74     	; 0x65de <vfprintf+0x2f6>
    6628:	c8 14       	cp	r12, r8
    662a:	d9 04       	cpc	r13, r9
    662c:	41 f4       	brne	.+16     	; 0x663e <vfprintf+0x356>
    662e:	9a 81       	ldd	r25, Y+2	; 0x02
    6630:	96 33       	cpi	r25, 0x36	; 54
    6632:	20 f4       	brcc	.+8      	; 0x663c <vfprintf+0x354>
    6634:	95 33       	cpi	r25, 0x35	; 53
    6636:	19 f4       	brne	.+6      	; 0x663e <vfprintf+0x356>
    6638:	3c 85       	ldd	r19, Y+12	; 0x0c
    663a:	34 ff       	sbrs	r19, 4
    663c:	81 e3       	ldi	r24, 0x31	; 49
    663e:	b7 01       	movw	r22, r14
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	48 c0       	rjmp	.+144    	; 0x66d4 <vfprintf+0x3ec>
    6644:	8a 81       	ldd	r24, Y+2	; 0x02
    6646:	81 33       	cpi	r24, 0x31	; 49
    6648:	19 f0       	breq	.+6      	; 0x6650 <vfprintf+0x368>
    664a:	9c 85       	ldd	r25, Y+12	; 0x0c
    664c:	9f 7e       	andi	r25, 0xEF	; 239
    664e:	9c 87       	std	Y+12, r25	; 0x0c
    6650:	b7 01       	movw	r22, r14
    6652:	90 e0       	ldi	r25, 0x00	; 0
    6654:	bc d6       	rcall	.+3448   	; 0x73ce <fputc>
    6656:	11 11       	cpse	r17, r1
    6658:	05 c0       	rjmp	.+10     	; 0x6664 <vfprintf+0x37c>
    665a:	94 fc       	sbrc	r9, 4
    665c:	16 c0       	rjmp	.+44     	; 0x668a <vfprintf+0x3a2>
    665e:	85 e6       	ldi	r24, 0x65	; 101
    6660:	90 e0       	ldi	r25, 0x00	; 0
    6662:	15 c0       	rjmp	.+42     	; 0x668e <vfprintf+0x3a6>
    6664:	b7 01       	movw	r22, r14
    6666:	8e e2       	ldi	r24, 0x2E	; 46
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	b1 d6       	rcall	.+3426   	; 0x73ce <fputc>
    666c:	1e 5f       	subi	r17, 0xFE	; 254
    666e:	82 e0       	ldi	r24, 0x02	; 2
    6670:	01 e0       	ldi	r16, 0x01	; 1
    6672:	08 0f       	add	r16, r24
    6674:	f3 01       	movw	r30, r6
    6676:	e8 0f       	add	r30, r24
    6678:	f1 1d       	adc	r31, r1
    667a:	80 81       	ld	r24, Z
    667c:	b7 01       	movw	r22, r14
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	a6 d6       	rcall	.+3404   	; 0x73ce <fputc>
    6682:	80 2f       	mov	r24, r16
    6684:	01 13       	cpse	r16, r17
    6686:	f4 cf       	rjmp	.-24     	; 0x6670 <vfprintf+0x388>
    6688:	e8 cf       	rjmp	.-48     	; 0x665a <vfprintf+0x372>
    668a:	85 e4       	ldi	r24, 0x45	; 69
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	b7 01       	movw	r22, r14
    6690:	9e d6       	rcall	.+3388   	; 0x73ce <fputc>
    6692:	d7 fc       	sbrc	r13, 7
    6694:	06 c0       	rjmp	.+12     	; 0x66a2 <vfprintf+0x3ba>
    6696:	c1 14       	cp	r12, r1
    6698:	d1 04       	cpc	r13, r1
    669a:	41 f4       	brne	.+16     	; 0x66ac <vfprintf+0x3c4>
    669c:	ec 85       	ldd	r30, Y+12	; 0x0c
    669e:	e4 ff       	sbrs	r30, 4
    66a0:	05 c0       	rjmp	.+10     	; 0x66ac <vfprintf+0x3c4>
    66a2:	d1 94       	neg	r13
    66a4:	c1 94       	neg	r12
    66a6:	d1 08       	sbc	r13, r1
    66a8:	8d e2       	ldi	r24, 0x2D	; 45
    66aa:	01 c0       	rjmp	.+2      	; 0x66ae <vfprintf+0x3c6>
    66ac:	8b e2       	ldi	r24, 0x2B	; 43
    66ae:	b7 01       	movw	r22, r14
    66b0:	90 e0       	ldi	r25, 0x00	; 0
    66b2:	8d d6       	rcall	.+3354   	; 0x73ce <fputc>
    66b4:	80 e3       	ldi	r24, 0x30	; 48
    66b6:	2a e0       	ldi	r18, 0x0A	; 10
    66b8:	c2 16       	cp	r12, r18
    66ba:	d1 04       	cpc	r13, r1
    66bc:	2c f0       	brlt	.+10     	; 0x66c8 <vfprintf+0x3e0>
    66be:	8f 5f       	subi	r24, 0xFF	; 255
    66c0:	fa e0       	ldi	r31, 0x0A	; 10
    66c2:	cf 1a       	sub	r12, r31
    66c4:	d1 08       	sbc	r13, r1
    66c6:	f7 cf       	rjmp	.-18     	; 0x66b6 <vfprintf+0x3ce>
    66c8:	b7 01       	movw	r22, r14
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	80 d6       	rcall	.+3328   	; 0x73ce <fputc>
    66ce:	b7 01       	movw	r22, r14
    66d0:	c6 01       	movw	r24, r12
    66d2:	c0 96       	adiw	r24, 0x30	; 48
    66d4:	7c d6       	rcall	.+3320   	; 0x73ce <fputc>
    66d6:	49 c1       	rjmp	.+658    	; 0x696a <vfprintf+0x682>
    66d8:	83 36       	cpi	r24, 0x63	; 99
    66da:	31 f0       	breq	.+12     	; 0x66e8 <vfprintf+0x400>
    66dc:	83 37       	cpi	r24, 0x73	; 115
    66de:	79 f0       	breq	.+30     	; 0x66fe <vfprintf+0x416>
    66e0:	83 35       	cpi	r24, 0x53	; 83
    66e2:	09 f0       	breq	.+2      	; 0x66e6 <vfprintf+0x3fe>
    66e4:	52 c0       	rjmp	.+164    	; 0x678a <vfprintf+0x4a2>
    66e6:	1f c0       	rjmp	.+62     	; 0x6726 <vfprintf+0x43e>
    66e8:	56 01       	movw	r10, r12
    66ea:	32 e0       	ldi	r19, 0x02	; 2
    66ec:	a3 0e       	add	r10, r19
    66ee:	b1 1c       	adc	r11, r1
    66f0:	f6 01       	movw	r30, r12
    66f2:	80 81       	ld	r24, Z
    66f4:	89 83       	std	Y+1, r24	; 0x01
    66f6:	01 e0       	ldi	r16, 0x01	; 1
    66f8:	10 e0       	ldi	r17, 0x00	; 0
    66fa:	63 01       	movw	r12, r6
    66fc:	11 c0       	rjmp	.+34     	; 0x6720 <vfprintf+0x438>
    66fe:	56 01       	movw	r10, r12
    6700:	f2 e0       	ldi	r31, 0x02	; 2
    6702:	af 0e       	add	r10, r31
    6704:	b1 1c       	adc	r11, r1
    6706:	f6 01       	movw	r30, r12
    6708:	c0 80       	ld	r12, Z
    670a:	d1 80       	ldd	r13, Z+1	; 0x01
    670c:	96 fe       	sbrs	r9, 6
    670e:	03 c0       	rjmp	.+6      	; 0x6716 <vfprintf+0x42e>
    6710:	61 2f       	mov	r22, r17
    6712:	70 e0       	ldi	r23, 0x00	; 0
    6714:	02 c0       	rjmp	.+4      	; 0x671a <vfprintf+0x432>
    6716:	6f ef       	ldi	r22, 0xFF	; 255
    6718:	7f ef       	ldi	r23, 0xFF	; 255
    671a:	c6 01       	movw	r24, r12
    671c:	4d d6       	rcall	.+3226   	; 0x73b8 <strnlen>
    671e:	8c 01       	movw	r16, r24
    6720:	f9 2d       	mov	r31, r9
    6722:	ff 77       	andi	r31, 0x7F	; 127
    6724:	13 c0       	rjmp	.+38     	; 0x674c <vfprintf+0x464>
    6726:	56 01       	movw	r10, r12
    6728:	22 e0       	ldi	r18, 0x02	; 2
    672a:	a2 0e       	add	r10, r18
    672c:	b1 1c       	adc	r11, r1
    672e:	f6 01       	movw	r30, r12
    6730:	c0 80       	ld	r12, Z
    6732:	d1 80       	ldd	r13, Z+1	; 0x01
    6734:	96 fe       	sbrs	r9, 6
    6736:	03 c0       	rjmp	.+6      	; 0x673e <vfprintf+0x456>
    6738:	61 2f       	mov	r22, r17
    673a:	70 e0       	ldi	r23, 0x00	; 0
    673c:	02 c0       	rjmp	.+4      	; 0x6742 <vfprintf+0x45a>
    673e:	6f ef       	ldi	r22, 0xFF	; 255
    6740:	7f ef       	ldi	r23, 0xFF	; 255
    6742:	c6 01       	movw	r24, r12
    6744:	cf d5       	rcall	.+2974   	; 0x72e4 <strnlen_P>
    6746:	8c 01       	movw	r16, r24
    6748:	f9 2d       	mov	r31, r9
    674a:	f0 68       	ori	r31, 0x80	; 128
    674c:	9f 2e       	mov	r9, r31
    674e:	f3 fd       	sbrc	r31, 3
    6750:	18 c0       	rjmp	.+48     	; 0x6782 <vfprintf+0x49a>
    6752:	85 2d       	mov	r24, r5
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	08 17       	cp	r16, r24
    6758:	19 07       	cpc	r17, r25
    675a:	98 f4       	brcc	.+38     	; 0x6782 <vfprintf+0x49a>
    675c:	b7 01       	movw	r22, r14
    675e:	80 e2       	ldi	r24, 0x20	; 32
    6760:	90 e0       	ldi	r25, 0x00	; 0
    6762:	35 d6       	rcall	.+3178   	; 0x73ce <fputc>
    6764:	5a 94       	dec	r5
    6766:	f5 cf       	rjmp	.-22     	; 0x6752 <vfprintf+0x46a>
    6768:	f6 01       	movw	r30, r12
    676a:	97 fc       	sbrc	r9, 7
    676c:	85 91       	lpm	r24, Z+
    676e:	97 fe       	sbrs	r9, 7
    6770:	81 91       	ld	r24, Z+
    6772:	6f 01       	movw	r12, r30
    6774:	b7 01       	movw	r22, r14
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	2a d6       	rcall	.+3156   	; 0x73ce <fputc>
    677a:	51 10       	cpse	r5, r1
    677c:	5a 94       	dec	r5
    677e:	01 50       	subi	r16, 0x01	; 1
    6780:	11 09       	sbc	r17, r1
    6782:	01 15       	cp	r16, r1
    6784:	11 05       	cpc	r17, r1
    6786:	81 f7       	brne	.-32     	; 0x6768 <vfprintf+0x480>
    6788:	f0 c0       	rjmp	.+480    	; 0x696a <vfprintf+0x682>
    678a:	84 36       	cpi	r24, 0x64	; 100
    678c:	11 f0       	breq	.+4      	; 0x6792 <vfprintf+0x4aa>
    678e:	89 36       	cpi	r24, 0x69	; 105
    6790:	59 f5       	brne	.+86     	; 0x67e8 <vfprintf+0x500>
    6792:	56 01       	movw	r10, r12
    6794:	97 fe       	sbrs	r9, 7
    6796:	09 c0       	rjmp	.+18     	; 0x67aa <vfprintf+0x4c2>
    6798:	24 e0       	ldi	r18, 0x04	; 4
    679a:	a2 0e       	add	r10, r18
    679c:	b1 1c       	adc	r11, r1
    679e:	f6 01       	movw	r30, r12
    67a0:	60 81       	ld	r22, Z
    67a2:	71 81       	ldd	r23, Z+1	; 0x01
    67a4:	82 81       	ldd	r24, Z+2	; 0x02
    67a6:	93 81       	ldd	r25, Z+3	; 0x03
    67a8:	0a c0       	rjmp	.+20     	; 0x67be <vfprintf+0x4d6>
    67aa:	f2 e0       	ldi	r31, 0x02	; 2
    67ac:	af 0e       	add	r10, r31
    67ae:	b1 1c       	adc	r11, r1
    67b0:	f6 01       	movw	r30, r12
    67b2:	60 81       	ld	r22, Z
    67b4:	71 81       	ldd	r23, Z+1	; 0x01
    67b6:	07 2e       	mov	r0, r23
    67b8:	00 0c       	add	r0, r0
    67ba:	88 0b       	sbc	r24, r24
    67bc:	99 0b       	sbc	r25, r25
    67be:	f9 2d       	mov	r31, r9
    67c0:	ff 76       	andi	r31, 0x6F	; 111
    67c2:	9f 2e       	mov	r9, r31
    67c4:	97 ff       	sbrs	r25, 7
    67c6:	09 c0       	rjmp	.+18     	; 0x67da <vfprintf+0x4f2>
    67c8:	90 95       	com	r25
    67ca:	80 95       	com	r24
    67cc:	70 95       	com	r23
    67ce:	61 95       	neg	r22
    67d0:	7f 4f       	sbci	r23, 0xFF	; 255
    67d2:	8f 4f       	sbci	r24, 0xFF	; 255
    67d4:	9f 4f       	sbci	r25, 0xFF	; 255
    67d6:	f0 68       	ori	r31, 0x80	; 128
    67d8:	9f 2e       	mov	r9, r31
    67da:	2a e0       	ldi	r18, 0x0A	; 10
    67dc:	30 e0       	ldi	r19, 0x00	; 0
    67de:	a3 01       	movw	r20, r6
    67e0:	a5 d6       	rcall	.+3402   	; 0x752c <__ultoa_invert>
    67e2:	c8 2e       	mov	r12, r24
    67e4:	c6 18       	sub	r12, r6
    67e6:	3e c0       	rjmp	.+124    	; 0x6864 <vfprintf+0x57c>
    67e8:	09 2d       	mov	r16, r9
    67ea:	85 37       	cpi	r24, 0x75	; 117
    67ec:	21 f4       	brne	.+8      	; 0x67f6 <vfprintf+0x50e>
    67ee:	0f 7e       	andi	r16, 0xEF	; 239
    67f0:	2a e0       	ldi	r18, 0x0A	; 10
    67f2:	30 e0       	ldi	r19, 0x00	; 0
    67f4:	1d c0       	rjmp	.+58     	; 0x6830 <vfprintf+0x548>
    67f6:	09 7f       	andi	r16, 0xF9	; 249
    67f8:	8f 36       	cpi	r24, 0x6F	; 111
    67fa:	91 f0       	breq	.+36     	; 0x6820 <vfprintf+0x538>
    67fc:	18 f4       	brcc	.+6      	; 0x6804 <vfprintf+0x51c>
    67fe:	88 35       	cpi	r24, 0x58	; 88
    6800:	59 f0       	breq	.+22     	; 0x6818 <vfprintf+0x530>
    6802:	bc c0       	rjmp	.+376    	; 0x697c <vfprintf+0x694>
    6804:	80 37       	cpi	r24, 0x70	; 112
    6806:	19 f0       	breq	.+6      	; 0x680e <vfprintf+0x526>
    6808:	88 37       	cpi	r24, 0x78	; 120
    680a:	11 f0       	breq	.+4      	; 0x6810 <vfprintf+0x528>
    680c:	b7 c0       	rjmp	.+366    	; 0x697c <vfprintf+0x694>
    680e:	00 61       	ori	r16, 0x10	; 16
    6810:	04 ff       	sbrs	r16, 4
    6812:	09 c0       	rjmp	.+18     	; 0x6826 <vfprintf+0x53e>
    6814:	04 60       	ori	r16, 0x04	; 4
    6816:	07 c0       	rjmp	.+14     	; 0x6826 <vfprintf+0x53e>
    6818:	94 fe       	sbrs	r9, 4
    681a:	08 c0       	rjmp	.+16     	; 0x682c <vfprintf+0x544>
    681c:	06 60       	ori	r16, 0x06	; 6
    681e:	06 c0       	rjmp	.+12     	; 0x682c <vfprintf+0x544>
    6820:	28 e0       	ldi	r18, 0x08	; 8
    6822:	30 e0       	ldi	r19, 0x00	; 0
    6824:	05 c0       	rjmp	.+10     	; 0x6830 <vfprintf+0x548>
    6826:	20 e1       	ldi	r18, 0x10	; 16
    6828:	30 e0       	ldi	r19, 0x00	; 0
    682a:	02 c0       	rjmp	.+4      	; 0x6830 <vfprintf+0x548>
    682c:	20 e1       	ldi	r18, 0x10	; 16
    682e:	32 e0       	ldi	r19, 0x02	; 2
    6830:	56 01       	movw	r10, r12
    6832:	07 ff       	sbrs	r16, 7
    6834:	09 c0       	rjmp	.+18     	; 0x6848 <vfprintf+0x560>
    6836:	84 e0       	ldi	r24, 0x04	; 4
    6838:	a8 0e       	add	r10, r24
    683a:	b1 1c       	adc	r11, r1
    683c:	f6 01       	movw	r30, r12
    683e:	60 81       	ld	r22, Z
    6840:	71 81       	ldd	r23, Z+1	; 0x01
    6842:	82 81       	ldd	r24, Z+2	; 0x02
    6844:	93 81       	ldd	r25, Z+3	; 0x03
    6846:	08 c0       	rjmp	.+16     	; 0x6858 <vfprintf+0x570>
    6848:	f2 e0       	ldi	r31, 0x02	; 2
    684a:	af 0e       	add	r10, r31
    684c:	b1 1c       	adc	r11, r1
    684e:	f6 01       	movw	r30, r12
    6850:	60 81       	ld	r22, Z
    6852:	71 81       	ldd	r23, Z+1	; 0x01
    6854:	80 e0       	ldi	r24, 0x00	; 0
    6856:	90 e0       	ldi	r25, 0x00	; 0
    6858:	a3 01       	movw	r20, r6
    685a:	68 d6       	rcall	.+3280   	; 0x752c <__ultoa_invert>
    685c:	c8 2e       	mov	r12, r24
    685e:	c6 18       	sub	r12, r6
    6860:	0f 77       	andi	r16, 0x7F	; 127
    6862:	90 2e       	mov	r9, r16
    6864:	96 fe       	sbrs	r9, 6
    6866:	0b c0       	rjmp	.+22     	; 0x687e <vfprintf+0x596>
    6868:	09 2d       	mov	r16, r9
    686a:	0e 7f       	andi	r16, 0xFE	; 254
    686c:	c1 16       	cp	r12, r17
    686e:	50 f4       	brcc	.+20     	; 0x6884 <vfprintf+0x59c>
    6870:	94 fe       	sbrs	r9, 4
    6872:	0a c0       	rjmp	.+20     	; 0x6888 <vfprintf+0x5a0>
    6874:	92 fc       	sbrc	r9, 2
    6876:	08 c0       	rjmp	.+16     	; 0x6888 <vfprintf+0x5a0>
    6878:	09 2d       	mov	r16, r9
    687a:	0e 7e       	andi	r16, 0xEE	; 238
    687c:	05 c0       	rjmp	.+10     	; 0x6888 <vfprintf+0x5a0>
    687e:	dc 2c       	mov	r13, r12
    6880:	09 2d       	mov	r16, r9
    6882:	03 c0       	rjmp	.+6      	; 0x688a <vfprintf+0x5a2>
    6884:	dc 2c       	mov	r13, r12
    6886:	01 c0       	rjmp	.+2      	; 0x688a <vfprintf+0x5a2>
    6888:	d1 2e       	mov	r13, r17
    688a:	04 ff       	sbrs	r16, 4
    688c:	0d c0       	rjmp	.+26     	; 0x68a8 <vfprintf+0x5c0>
    688e:	fe 01       	movw	r30, r28
    6890:	ec 0d       	add	r30, r12
    6892:	f1 1d       	adc	r31, r1
    6894:	80 81       	ld	r24, Z
    6896:	80 33       	cpi	r24, 0x30	; 48
    6898:	11 f4       	brne	.+4      	; 0x689e <vfprintf+0x5b6>
    689a:	09 7e       	andi	r16, 0xE9	; 233
    689c:	09 c0       	rjmp	.+18     	; 0x68b0 <vfprintf+0x5c8>
    689e:	02 ff       	sbrs	r16, 2
    68a0:	06 c0       	rjmp	.+12     	; 0x68ae <vfprintf+0x5c6>
    68a2:	d3 94       	inc	r13
    68a4:	d3 94       	inc	r13
    68a6:	04 c0       	rjmp	.+8      	; 0x68b0 <vfprintf+0x5c8>
    68a8:	80 2f       	mov	r24, r16
    68aa:	86 78       	andi	r24, 0x86	; 134
    68ac:	09 f0       	breq	.+2      	; 0x68b0 <vfprintf+0x5c8>
    68ae:	d3 94       	inc	r13
    68b0:	03 fd       	sbrc	r16, 3
    68b2:	10 c0       	rjmp	.+32     	; 0x68d4 <vfprintf+0x5ec>
    68b4:	00 ff       	sbrs	r16, 0
    68b6:	06 c0       	rjmp	.+12     	; 0x68c4 <vfprintf+0x5dc>
    68b8:	1c 2d       	mov	r17, r12
    68ba:	d5 14       	cp	r13, r5
    68bc:	78 f4       	brcc	.+30     	; 0x68dc <vfprintf+0x5f4>
    68be:	15 0d       	add	r17, r5
    68c0:	1d 19       	sub	r17, r13
    68c2:	0c c0       	rjmp	.+24     	; 0x68dc <vfprintf+0x5f4>
    68c4:	d5 14       	cp	r13, r5
    68c6:	50 f4       	brcc	.+20     	; 0x68dc <vfprintf+0x5f4>
    68c8:	b7 01       	movw	r22, r14
    68ca:	80 e2       	ldi	r24, 0x20	; 32
    68cc:	90 e0       	ldi	r25, 0x00	; 0
    68ce:	7f d5       	rcall	.+2814   	; 0x73ce <fputc>
    68d0:	d3 94       	inc	r13
    68d2:	f8 cf       	rjmp	.-16     	; 0x68c4 <vfprintf+0x5dc>
    68d4:	d5 14       	cp	r13, r5
    68d6:	10 f4       	brcc	.+4      	; 0x68dc <vfprintf+0x5f4>
    68d8:	5d 18       	sub	r5, r13
    68da:	01 c0       	rjmp	.+2      	; 0x68de <vfprintf+0x5f6>
    68dc:	51 2c       	mov	r5, r1
    68de:	04 ff       	sbrs	r16, 4
    68e0:	0f c0       	rjmp	.+30     	; 0x6900 <vfprintf+0x618>
    68e2:	b7 01       	movw	r22, r14
    68e4:	80 e3       	ldi	r24, 0x30	; 48
    68e6:	90 e0       	ldi	r25, 0x00	; 0
    68e8:	72 d5       	rcall	.+2788   	; 0x73ce <fputc>
    68ea:	02 ff       	sbrs	r16, 2
    68ec:	16 c0       	rjmp	.+44     	; 0x691a <vfprintf+0x632>
    68ee:	01 fd       	sbrc	r16, 1
    68f0:	03 c0       	rjmp	.+6      	; 0x68f8 <vfprintf+0x610>
    68f2:	88 e7       	ldi	r24, 0x78	; 120
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	02 c0       	rjmp	.+4      	; 0x68fc <vfprintf+0x614>
    68f8:	88 e5       	ldi	r24, 0x58	; 88
    68fa:	90 e0       	ldi	r25, 0x00	; 0
    68fc:	b7 01       	movw	r22, r14
    68fe:	0c c0       	rjmp	.+24     	; 0x6918 <vfprintf+0x630>
    6900:	80 2f       	mov	r24, r16
    6902:	86 78       	andi	r24, 0x86	; 134
    6904:	51 f0       	breq	.+20     	; 0x691a <vfprintf+0x632>
    6906:	01 ff       	sbrs	r16, 1
    6908:	02 c0       	rjmp	.+4      	; 0x690e <vfprintf+0x626>
    690a:	8b e2       	ldi	r24, 0x2B	; 43
    690c:	01 c0       	rjmp	.+2      	; 0x6910 <vfprintf+0x628>
    690e:	80 e2       	ldi	r24, 0x20	; 32
    6910:	07 fd       	sbrc	r16, 7
    6912:	8d e2       	ldi	r24, 0x2D	; 45
    6914:	b7 01       	movw	r22, r14
    6916:	90 e0       	ldi	r25, 0x00	; 0
    6918:	5a d5       	rcall	.+2740   	; 0x73ce <fputc>
    691a:	c1 16       	cp	r12, r17
    691c:	30 f4       	brcc	.+12     	; 0x692a <vfprintf+0x642>
    691e:	b7 01       	movw	r22, r14
    6920:	80 e3       	ldi	r24, 0x30	; 48
    6922:	90 e0       	ldi	r25, 0x00	; 0
    6924:	54 d5       	rcall	.+2728   	; 0x73ce <fputc>
    6926:	11 50       	subi	r17, 0x01	; 1
    6928:	f8 cf       	rjmp	.-16     	; 0x691a <vfprintf+0x632>
    692a:	ca 94       	dec	r12
    692c:	f3 01       	movw	r30, r6
    692e:	ec 0d       	add	r30, r12
    6930:	f1 1d       	adc	r31, r1
    6932:	80 81       	ld	r24, Z
    6934:	b7 01       	movw	r22, r14
    6936:	90 e0       	ldi	r25, 0x00	; 0
    6938:	4a d5       	rcall	.+2708   	; 0x73ce <fputc>
    693a:	c1 10       	cpse	r12, r1
    693c:	f6 cf       	rjmp	.-20     	; 0x692a <vfprintf+0x642>
    693e:	15 c0       	rjmp	.+42     	; 0x696a <vfprintf+0x682>
    6940:	f4 e0       	ldi	r31, 0x04	; 4
    6942:	f5 15       	cp	r31, r5
    6944:	50 f5       	brcc	.+84     	; 0x699a <vfprintf+0x6b2>
    6946:	84 e0       	ldi	r24, 0x04	; 4
    6948:	58 1a       	sub	r5, r24
    694a:	93 fe       	sbrs	r9, 3
    694c:	1e c0       	rjmp	.+60     	; 0x698a <vfprintf+0x6a2>
    694e:	01 11       	cpse	r16, r1
    6950:	25 c0       	rjmp	.+74     	; 0x699c <vfprintf+0x6b4>
    6952:	2c 85       	ldd	r18, Y+12	; 0x0c
    6954:	23 ff       	sbrs	r18, 3
    6956:	27 c0       	rjmp	.+78     	; 0x69a6 <vfprintf+0x6be>
    6958:	0a e9       	ldi	r16, 0x9A	; 154
    695a:	11 e0       	ldi	r17, 0x01	; 1
    695c:	39 2d       	mov	r19, r9
    695e:	30 71       	andi	r19, 0x10	; 16
    6960:	93 2e       	mov	r9, r19
    6962:	f8 01       	movw	r30, r16
    6964:	84 91       	lpm	r24, Z
    6966:	81 11       	cpse	r24, r1
    6968:	21 c0       	rjmp	.+66     	; 0x69ac <vfprintf+0x6c4>
    696a:	55 20       	and	r5, r5
    696c:	09 f4       	brne	.+2      	; 0x6970 <vfprintf+0x688>
    696e:	fc cc       	rjmp	.-1544   	; 0x6368 <vfprintf+0x80>
    6970:	b7 01       	movw	r22, r14
    6972:	80 e2       	ldi	r24, 0x20	; 32
    6974:	90 e0       	ldi	r25, 0x00	; 0
    6976:	2b d5       	rcall	.+2646   	; 0x73ce <fputc>
    6978:	5a 94       	dec	r5
    697a:	f7 cf       	rjmp	.-18     	; 0x696a <vfprintf+0x682>
    697c:	f7 01       	movw	r30, r14
    697e:	86 81       	ldd	r24, Z+6	; 0x06
    6980:	97 81       	ldd	r25, Z+7	; 0x07
    6982:	23 c0       	rjmp	.+70     	; 0x69ca <vfprintf+0x6e2>
    6984:	8f ef       	ldi	r24, 0xFF	; 255
    6986:	9f ef       	ldi	r25, 0xFF	; 255
    6988:	20 c0       	rjmp	.+64     	; 0x69ca <vfprintf+0x6e2>
    698a:	b7 01       	movw	r22, r14
    698c:	80 e2       	ldi	r24, 0x20	; 32
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	1e d5       	rcall	.+2620   	; 0x73ce <fputc>
    6992:	5a 94       	dec	r5
    6994:	51 10       	cpse	r5, r1
    6996:	f9 cf       	rjmp	.-14     	; 0x698a <vfprintf+0x6a2>
    6998:	da cf       	rjmp	.-76     	; 0x694e <vfprintf+0x666>
    699a:	51 2c       	mov	r5, r1
    699c:	b7 01       	movw	r22, r14
    699e:	80 2f       	mov	r24, r16
    69a0:	90 e0       	ldi	r25, 0x00	; 0
    69a2:	15 d5       	rcall	.+2602   	; 0x73ce <fputc>
    69a4:	d6 cf       	rjmp	.-84     	; 0x6952 <vfprintf+0x66a>
    69a6:	0e e9       	ldi	r16, 0x9E	; 158
    69a8:	11 e0       	ldi	r17, 0x01	; 1
    69aa:	d8 cf       	rjmp	.-80     	; 0x695c <vfprintf+0x674>
    69ac:	91 10       	cpse	r9, r1
    69ae:	80 52       	subi	r24, 0x20	; 32
    69b0:	b7 01       	movw	r22, r14
    69b2:	90 e0       	ldi	r25, 0x00	; 0
    69b4:	0c d5       	rcall	.+2584   	; 0x73ce <fputc>
    69b6:	0f 5f       	subi	r16, 0xFF	; 255
    69b8:	1f 4f       	sbci	r17, 0xFF	; 255
    69ba:	d3 cf       	rjmp	.-90     	; 0x6962 <vfprintf+0x67a>
    69bc:	23 e0       	ldi	r18, 0x03	; 3
    69be:	25 15       	cp	r18, r5
    69c0:	10 f4       	brcc	.+4      	; 0x69c6 <vfprintf+0x6de>
    69c2:	83 e0       	ldi	r24, 0x03	; 3
    69c4:	c1 cf       	rjmp	.-126    	; 0x6948 <vfprintf+0x660>
    69c6:	51 2c       	mov	r5, r1
    69c8:	c4 cf       	rjmp	.-120    	; 0x6952 <vfprintf+0x66a>
    69ca:	60 96       	adiw	r28, 0x10	; 16
    69cc:	0f b6       	in	r0, 0x3f	; 63
    69ce:	f8 94       	cli
    69d0:	de bf       	out	0x3e, r29	; 62
    69d2:	0f be       	out	0x3f, r0	; 63
    69d4:	cd bf       	out	0x3d, r28	; 61
    69d6:	df 91       	pop	r29
    69d8:	cf 91       	pop	r28
    69da:	1f 91       	pop	r17
    69dc:	0f 91       	pop	r16
    69de:	ff 90       	pop	r15
    69e0:	ef 90       	pop	r14
    69e2:	df 90       	pop	r13
    69e4:	cf 90       	pop	r12
    69e6:	bf 90       	pop	r11
    69e8:	af 90       	pop	r10
    69ea:	9f 90       	pop	r9
    69ec:	8f 90       	pop	r8
    69ee:	7f 90       	pop	r7
    69f0:	6f 90       	pop	r6
    69f2:	5f 90       	pop	r5
    69f4:	4f 90       	pop	r4
    69f6:	3f 90       	pop	r3
    69f8:	2f 90       	pop	r2
    69fa:	08 95       	ret

000069fc <__subsf3>:
    69fc:	50 58       	subi	r21, 0x80	; 128

000069fe <__addsf3>:
    69fe:	bb 27       	eor	r27, r27
    6a00:	aa 27       	eor	r26, r26
    6a02:	0e d0       	rcall	.+28     	; 0x6a20 <__addsf3x>
    6a04:	4d c1       	rjmp	.+666    	; 0x6ca0 <__fp_round>
    6a06:	3e d1       	rcall	.+636    	; 0x6c84 <__fp_pscA>
    6a08:	30 f0       	brcs	.+12     	; 0x6a16 <__addsf3+0x18>
    6a0a:	43 d1       	rcall	.+646    	; 0x6c92 <__fp_pscB>
    6a0c:	20 f0       	brcs	.+8      	; 0x6a16 <__addsf3+0x18>
    6a0e:	31 f4       	brne	.+12     	; 0x6a1c <__addsf3+0x1e>
    6a10:	9f 3f       	cpi	r25, 0xFF	; 255
    6a12:	11 f4       	brne	.+4      	; 0x6a18 <__addsf3+0x1a>
    6a14:	1e f4       	brtc	.+6      	; 0x6a1c <__addsf3+0x1e>
    6a16:	33 c1       	rjmp	.+614    	; 0x6c7e <__fp_nan>
    6a18:	0e f4       	brtc	.+2      	; 0x6a1c <__addsf3+0x1e>
    6a1a:	e0 95       	com	r30
    6a1c:	e7 fb       	bst	r30, 7
    6a1e:	29 c1       	rjmp	.+594    	; 0x6c72 <__fp_inf>

00006a20 <__addsf3x>:
    6a20:	e9 2f       	mov	r30, r25
    6a22:	4f d1       	rcall	.+670    	; 0x6cc2 <__fp_split3>
    6a24:	80 f3       	brcs	.-32     	; 0x6a06 <__addsf3+0x8>
    6a26:	ba 17       	cp	r27, r26
    6a28:	62 07       	cpc	r22, r18
    6a2a:	73 07       	cpc	r23, r19
    6a2c:	84 07       	cpc	r24, r20
    6a2e:	95 07       	cpc	r25, r21
    6a30:	18 f0       	brcs	.+6      	; 0x6a38 <__addsf3x+0x18>
    6a32:	71 f4       	brne	.+28     	; 0x6a50 <__addsf3x+0x30>
    6a34:	9e f5       	brtc	.+102    	; 0x6a9c <__addsf3x+0x7c>
    6a36:	67 c1       	rjmp	.+718    	; 0x6d06 <__fp_zero>
    6a38:	0e f4       	brtc	.+2      	; 0x6a3c <__addsf3x+0x1c>
    6a3a:	e0 95       	com	r30
    6a3c:	0b 2e       	mov	r0, r27
    6a3e:	ba 2f       	mov	r27, r26
    6a40:	a0 2d       	mov	r26, r0
    6a42:	0b 01       	movw	r0, r22
    6a44:	b9 01       	movw	r22, r18
    6a46:	90 01       	movw	r18, r0
    6a48:	0c 01       	movw	r0, r24
    6a4a:	ca 01       	movw	r24, r20
    6a4c:	a0 01       	movw	r20, r0
    6a4e:	11 24       	eor	r1, r1
    6a50:	ff 27       	eor	r31, r31
    6a52:	59 1b       	sub	r21, r25
    6a54:	99 f0       	breq	.+38     	; 0x6a7c <__addsf3x+0x5c>
    6a56:	59 3f       	cpi	r21, 0xF9	; 249
    6a58:	50 f4       	brcc	.+20     	; 0x6a6e <__addsf3x+0x4e>
    6a5a:	50 3e       	cpi	r21, 0xE0	; 224
    6a5c:	68 f1       	brcs	.+90     	; 0x6ab8 <__addsf3x+0x98>
    6a5e:	1a 16       	cp	r1, r26
    6a60:	f0 40       	sbci	r31, 0x00	; 0
    6a62:	a2 2f       	mov	r26, r18
    6a64:	23 2f       	mov	r18, r19
    6a66:	34 2f       	mov	r19, r20
    6a68:	44 27       	eor	r20, r20
    6a6a:	58 5f       	subi	r21, 0xF8	; 248
    6a6c:	f3 cf       	rjmp	.-26     	; 0x6a54 <__addsf3x+0x34>
    6a6e:	46 95       	lsr	r20
    6a70:	37 95       	ror	r19
    6a72:	27 95       	ror	r18
    6a74:	a7 95       	ror	r26
    6a76:	f0 40       	sbci	r31, 0x00	; 0
    6a78:	53 95       	inc	r21
    6a7a:	c9 f7       	brne	.-14     	; 0x6a6e <__addsf3x+0x4e>
    6a7c:	7e f4       	brtc	.+30     	; 0x6a9c <__addsf3x+0x7c>
    6a7e:	1f 16       	cp	r1, r31
    6a80:	ba 0b       	sbc	r27, r26
    6a82:	62 0b       	sbc	r22, r18
    6a84:	73 0b       	sbc	r23, r19
    6a86:	84 0b       	sbc	r24, r20
    6a88:	ba f0       	brmi	.+46     	; 0x6ab8 <__addsf3x+0x98>
    6a8a:	91 50       	subi	r25, 0x01	; 1
    6a8c:	a1 f0       	breq	.+40     	; 0x6ab6 <__addsf3x+0x96>
    6a8e:	ff 0f       	add	r31, r31
    6a90:	bb 1f       	adc	r27, r27
    6a92:	66 1f       	adc	r22, r22
    6a94:	77 1f       	adc	r23, r23
    6a96:	88 1f       	adc	r24, r24
    6a98:	c2 f7       	brpl	.-16     	; 0x6a8a <__addsf3x+0x6a>
    6a9a:	0e c0       	rjmp	.+28     	; 0x6ab8 <__addsf3x+0x98>
    6a9c:	ba 0f       	add	r27, r26
    6a9e:	62 1f       	adc	r22, r18
    6aa0:	73 1f       	adc	r23, r19
    6aa2:	84 1f       	adc	r24, r20
    6aa4:	48 f4       	brcc	.+18     	; 0x6ab8 <__addsf3x+0x98>
    6aa6:	87 95       	ror	r24
    6aa8:	77 95       	ror	r23
    6aaa:	67 95       	ror	r22
    6aac:	b7 95       	ror	r27
    6aae:	f7 95       	ror	r31
    6ab0:	9e 3f       	cpi	r25, 0xFE	; 254
    6ab2:	08 f0       	brcs	.+2      	; 0x6ab6 <__addsf3x+0x96>
    6ab4:	b3 cf       	rjmp	.-154    	; 0x6a1c <__addsf3+0x1e>
    6ab6:	93 95       	inc	r25
    6ab8:	88 0f       	add	r24, r24
    6aba:	08 f0       	brcs	.+2      	; 0x6abe <__addsf3x+0x9e>
    6abc:	99 27       	eor	r25, r25
    6abe:	ee 0f       	add	r30, r30
    6ac0:	97 95       	ror	r25
    6ac2:	87 95       	ror	r24
    6ac4:	08 95       	ret

00006ac6 <__divsf3>:
    6ac6:	0c d0       	rcall	.+24     	; 0x6ae0 <__divsf3x>
    6ac8:	eb c0       	rjmp	.+470    	; 0x6ca0 <__fp_round>
    6aca:	e3 d0       	rcall	.+454    	; 0x6c92 <__fp_pscB>
    6acc:	40 f0       	brcs	.+16     	; 0x6ade <__divsf3+0x18>
    6ace:	da d0       	rcall	.+436    	; 0x6c84 <__fp_pscA>
    6ad0:	30 f0       	brcs	.+12     	; 0x6ade <__divsf3+0x18>
    6ad2:	21 f4       	brne	.+8      	; 0x6adc <__divsf3+0x16>
    6ad4:	5f 3f       	cpi	r21, 0xFF	; 255
    6ad6:	19 f0       	breq	.+6      	; 0x6ade <__divsf3+0x18>
    6ad8:	cc c0       	rjmp	.+408    	; 0x6c72 <__fp_inf>
    6ada:	51 11       	cpse	r21, r1
    6adc:	15 c1       	rjmp	.+554    	; 0x6d08 <__fp_szero>
    6ade:	cf c0       	rjmp	.+414    	; 0x6c7e <__fp_nan>

00006ae0 <__divsf3x>:
    6ae0:	f0 d0       	rcall	.+480    	; 0x6cc2 <__fp_split3>
    6ae2:	98 f3       	brcs	.-26     	; 0x6aca <__divsf3+0x4>

00006ae4 <__divsf3_pse>:
    6ae4:	99 23       	and	r25, r25
    6ae6:	c9 f3       	breq	.-14     	; 0x6ada <__divsf3+0x14>
    6ae8:	55 23       	and	r21, r21
    6aea:	b1 f3       	breq	.-20     	; 0x6ad8 <__divsf3+0x12>
    6aec:	95 1b       	sub	r25, r21
    6aee:	55 0b       	sbc	r21, r21
    6af0:	bb 27       	eor	r27, r27
    6af2:	aa 27       	eor	r26, r26
    6af4:	62 17       	cp	r22, r18
    6af6:	73 07       	cpc	r23, r19
    6af8:	84 07       	cpc	r24, r20
    6afa:	38 f0       	brcs	.+14     	; 0x6b0a <__divsf3_pse+0x26>
    6afc:	9f 5f       	subi	r25, 0xFF	; 255
    6afe:	5f 4f       	sbci	r21, 0xFF	; 255
    6b00:	22 0f       	add	r18, r18
    6b02:	33 1f       	adc	r19, r19
    6b04:	44 1f       	adc	r20, r20
    6b06:	aa 1f       	adc	r26, r26
    6b08:	a9 f3       	breq	.-22     	; 0x6af4 <__divsf3_pse+0x10>
    6b0a:	33 d0       	rcall	.+102    	; 0x6b72 <__divsf3_pse+0x8e>
    6b0c:	0e 2e       	mov	r0, r30
    6b0e:	3a f0       	brmi	.+14     	; 0x6b1e <__divsf3_pse+0x3a>
    6b10:	e0 e8       	ldi	r30, 0x80	; 128
    6b12:	30 d0       	rcall	.+96     	; 0x6b74 <__divsf3_pse+0x90>
    6b14:	91 50       	subi	r25, 0x01	; 1
    6b16:	50 40       	sbci	r21, 0x00	; 0
    6b18:	e6 95       	lsr	r30
    6b1a:	00 1c       	adc	r0, r0
    6b1c:	ca f7       	brpl	.-14     	; 0x6b10 <__divsf3_pse+0x2c>
    6b1e:	29 d0       	rcall	.+82     	; 0x6b72 <__divsf3_pse+0x8e>
    6b20:	fe 2f       	mov	r31, r30
    6b22:	27 d0       	rcall	.+78     	; 0x6b72 <__divsf3_pse+0x8e>
    6b24:	66 0f       	add	r22, r22
    6b26:	77 1f       	adc	r23, r23
    6b28:	88 1f       	adc	r24, r24
    6b2a:	bb 1f       	adc	r27, r27
    6b2c:	26 17       	cp	r18, r22
    6b2e:	37 07       	cpc	r19, r23
    6b30:	48 07       	cpc	r20, r24
    6b32:	ab 07       	cpc	r26, r27
    6b34:	b0 e8       	ldi	r27, 0x80	; 128
    6b36:	09 f0       	breq	.+2      	; 0x6b3a <__divsf3_pse+0x56>
    6b38:	bb 0b       	sbc	r27, r27
    6b3a:	80 2d       	mov	r24, r0
    6b3c:	bf 01       	movw	r22, r30
    6b3e:	ff 27       	eor	r31, r31
    6b40:	93 58       	subi	r25, 0x83	; 131
    6b42:	5f 4f       	sbci	r21, 0xFF	; 255
    6b44:	2a f0       	brmi	.+10     	; 0x6b50 <__divsf3_pse+0x6c>
    6b46:	9e 3f       	cpi	r25, 0xFE	; 254
    6b48:	51 05       	cpc	r21, r1
    6b4a:	68 f0       	brcs	.+26     	; 0x6b66 <__divsf3_pse+0x82>
    6b4c:	92 c0       	rjmp	.+292    	; 0x6c72 <__fp_inf>
    6b4e:	dc c0       	rjmp	.+440    	; 0x6d08 <__fp_szero>
    6b50:	5f 3f       	cpi	r21, 0xFF	; 255
    6b52:	ec f3       	brlt	.-6      	; 0x6b4e <__divsf3_pse+0x6a>
    6b54:	98 3e       	cpi	r25, 0xE8	; 232
    6b56:	dc f3       	brlt	.-10     	; 0x6b4e <__divsf3_pse+0x6a>
    6b58:	86 95       	lsr	r24
    6b5a:	77 95       	ror	r23
    6b5c:	67 95       	ror	r22
    6b5e:	b7 95       	ror	r27
    6b60:	f7 95       	ror	r31
    6b62:	9f 5f       	subi	r25, 0xFF	; 255
    6b64:	c9 f7       	brne	.-14     	; 0x6b58 <__divsf3_pse+0x74>
    6b66:	88 0f       	add	r24, r24
    6b68:	91 1d       	adc	r25, r1
    6b6a:	96 95       	lsr	r25
    6b6c:	87 95       	ror	r24
    6b6e:	97 f9       	bld	r25, 7
    6b70:	08 95       	ret
    6b72:	e1 e0       	ldi	r30, 0x01	; 1
    6b74:	66 0f       	add	r22, r22
    6b76:	77 1f       	adc	r23, r23
    6b78:	88 1f       	adc	r24, r24
    6b7a:	bb 1f       	adc	r27, r27
    6b7c:	62 17       	cp	r22, r18
    6b7e:	73 07       	cpc	r23, r19
    6b80:	84 07       	cpc	r24, r20
    6b82:	ba 07       	cpc	r27, r26
    6b84:	20 f0       	brcs	.+8      	; 0x6b8e <__divsf3_pse+0xaa>
    6b86:	62 1b       	sub	r22, r18
    6b88:	73 0b       	sbc	r23, r19
    6b8a:	84 0b       	sbc	r24, r20
    6b8c:	ba 0b       	sbc	r27, r26
    6b8e:	ee 1f       	adc	r30, r30
    6b90:	88 f7       	brcc	.-30     	; 0x6b74 <__divsf3_pse+0x90>
    6b92:	e0 95       	com	r30
    6b94:	08 95       	ret

00006b96 <__fixsfsi>:
    6b96:	04 d0       	rcall	.+8      	; 0x6ba0 <__fixunssfsi>
    6b98:	68 94       	set
    6b9a:	b1 11       	cpse	r27, r1
    6b9c:	b5 c0       	rjmp	.+362    	; 0x6d08 <__fp_szero>
    6b9e:	08 95       	ret

00006ba0 <__fixunssfsi>:
    6ba0:	98 d0       	rcall	.+304    	; 0x6cd2 <__fp_splitA>
    6ba2:	88 f0       	brcs	.+34     	; 0x6bc6 <__fixunssfsi+0x26>
    6ba4:	9f 57       	subi	r25, 0x7F	; 127
    6ba6:	90 f0       	brcs	.+36     	; 0x6bcc <__fixunssfsi+0x2c>
    6ba8:	b9 2f       	mov	r27, r25
    6baa:	99 27       	eor	r25, r25
    6bac:	b7 51       	subi	r27, 0x17	; 23
    6bae:	a0 f0       	brcs	.+40     	; 0x6bd8 <__fixunssfsi+0x38>
    6bb0:	d1 f0       	breq	.+52     	; 0x6be6 <__fixunssfsi+0x46>
    6bb2:	66 0f       	add	r22, r22
    6bb4:	77 1f       	adc	r23, r23
    6bb6:	88 1f       	adc	r24, r24
    6bb8:	99 1f       	adc	r25, r25
    6bba:	1a f0       	brmi	.+6      	; 0x6bc2 <__fixunssfsi+0x22>
    6bbc:	ba 95       	dec	r27
    6bbe:	c9 f7       	brne	.-14     	; 0x6bb2 <__fixunssfsi+0x12>
    6bc0:	12 c0       	rjmp	.+36     	; 0x6be6 <__fixunssfsi+0x46>
    6bc2:	b1 30       	cpi	r27, 0x01	; 1
    6bc4:	81 f0       	breq	.+32     	; 0x6be6 <__fixunssfsi+0x46>
    6bc6:	9f d0       	rcall	.+318    	; 0x6d06 <__fp_zero>
    6bc8:	b1 e0       	ldi	r27, 0x01	; 1
    6bca:	08 95       	ret
    6bcc:	9c c0       	rjmp	.+312    	; 0x6d06 <__fp_zero>
    6bce:	67 2f       	mov	r22, r23
    6bd0:	78 2f       	mov	r23, r24
    6bd2:	88 27       	eor	r24, r24
    6bd4:	b8 5f       	subi	r27, 0xF8	; 248
    6bd6:	39 f0       	breq	.+14     	; 0x6be6 <__fixunssfsi+0x46>
    6bd8:	b9 3f       	cpi	r27, 0xF9	; 249
    6bda:	cc f3       	brlt	.-14     	; 0x6bce <__fixunssfsi+0x2e>
    6bdc:	86 95       	lsr	r24
    6bde:	77 95       	ror	r23
    6be0:	67 95       	ror	r22
    6be2:	b3 95       	inc	r27
    6be4:	d9 f7       	brne	.-10     	; 0x6bdc <__fixunssfsi+0x3c>
    6be6:	3e f4       	brtc	.+14     	; 0x6bf6 <__fixunssfsi+0x56>
    6be8:	90 95       	com	r25
    6bea:	80 95       	com	r24
    6bec:	70 95       	com	r23
    6bee:	61 95       	neg	r22
    6bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    6bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    6bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    6bf6:	08 95       	ret

00006bf8 <__floatunsisf>:
    6bf8:	e8 94       	clt
    6bfa:	09 c0       	rjmp	.+18     	; 0x6c0e <__floatsisf+0x12>

00006bfc <__floatsisf>:
    6bfc:	97 fb       	bst	r25, 7
    6bfe:	3e f4       	brtc	.+14     	; 0x6c0e <__floatsisf+0x12>
    6c00:	90 95       	com	r25
    6c02:	80 95       	com	r24
    6c04:	70 95       	com	r23
    6c06:	61 95       	neg	r22
    6c08:	7f 4f       	sbci	r23, 0xFF	; 255
    6c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    6c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c0e:	99 23       	and	r25, r25
    6c10:	a9 f0       	breq	.+42     	; 0x6c3c <__floatsisf+0x40>
    6c12:	f9 2f       	mov	r31, r25
    6c14:	96 e9       	ldi	r25, 0x96	; 150
    6c16:	bb 27       	eor	r27, r27
    6c18:	93 95       	inc	r25
    6c1a:	f6 95       	lsr	r31
    6c1c:	87 95       	ror	r24
    6c1e:	77 95       	ror	r23
    6c20:	67 95       	ror	r22
    6c22:	b7 95       	ror	r27
    6c24:	f1 11       	cpse	r31, r1
    6c26:	f8 cf       	rjmp	.-16     	; 0x6c18 <__floatsisf+0x1c>
    6c28:	fa f4       	brpl	.+62     	; 0x6c68 <__floatsisf+0x6c>
    6c2a:	bb 0f       	add	r27, r27
    6c2c:	11 f4       	brne	.+4      	; 0x6c32 <__floatsisf+0x36>
    6c2e:	60 ff       	sbrs	r22, 0
    6c30:	1b c0       	rjmp	.+54     	; 0x6c68 <__floatsisf+0x6c>
    6c32:	6f 5f       	subi	r22, 0xFF	; 255
    6c34:	7f 4f       	sbci	r23, 0xFF	; 255
    6c36:	8f 4f       	sbci	r24, 0xFF	; 255
    6c38:	9f 4f       	sbci	r25, 0xFF	; 255
    6c3a:	16 c0       	rjmp	.+44     	; 0x6c68 <__floatsisf+0x6c>
    6c3c:	88 23       	and	r24, r24
    6c3e:	11 f0       	breq	.+4      	; 0x6c44 <__floatsisf+0x48>
    6c40:	96 e9       	ldi	r25, 0x96	; 150
    6c42:	11 c0       	rjmp	.+34     	; 0x6c66 <__floatsisf+0x6a>
    6c44:	77 23       	and	r23, r23
    6c46:	21 f0       	breq	.+8      	; 0x6c50 <__floatsisf+0x54>
    6c48:	9e e8       	ldi	r25, 0x8E	; 142
    6c4a:	87 2f       	mov	r24, r23
    6c4c:	76 2f       	mov	r23, r22
    6c4e:	05 c0       	rjmp	.+10     	; 0x6c5a <__floatsisf+0x5e>
    6c50:	66 23       	and	r22, r22
    6c52:	71 f0       	breq	.+28     	; 0x6c70 <__floatsisf+0x74>
    6c54:	96 e8       	ldi	r25, 0x86	; 134
    6c56:	86 2f       	mov	r24, r22
    6c58:	70 e0       	ldi	r23, 0x00	; 0
    6c5a:	60 e0       	ldi	r22, 0x00	; 0
    6c5c:	2a f0       	brmi	.+10     	; 0x6c68 <__floatsisf+0x6c>
    6c5e:	9a 95       	dec	r25
    6c60:	66 0f       	add	r22, r22
    6c62:	77 1f       	adc	r23, r23
    6c64:	88 1f       	adc	r24, r24
    6c66:	da f7       	brpl	.-10     	; 0x6c5e <__floatsisf+0x62>
    6c68:	88 0f       	add	r24, r24
    6c6a:	96 95       	lsr	r25
    6c6c:	87 95       	ror	r24
    6c6e:	97 f9       	bld	r25, 7
    6c70:	08 95       	ret

00006c72 <__fp_inf>:
    6c72:	97 f9       	bld	r25, 7
    6c74:	9f 67       	ori	r25, 0x7F	; 127
    6c76:	80 e8       	ldi	r24, 0x80	; 128
    6c78:	70 e0       	ldi	r23, 0x00	; 0
    6c7a:	60 e0       	ldi	r22, 0x00	; 0
    6c7c:	08 95       	ret

00006c7e <__fp_nan>:
    6c7e:	9f ef       	ldi	r25, 0xFF	; 255
    6c80:	80 ec       	ldi	r24, 0xC0	; 192
    6c82:	08 95       	ret

00006c84 <__fp_pscA>:
    6c84:	00 24       	eor	r0, r0
    6c86:	0a 94       	dec	r0
    6c88:	16 16       	cp	r1, r22
    6c8a:	17 06       	cpc	r1, r23
    6c8c:	18 06       	cpc	r1, r24
    6c8e:	09 06       	cpc	r0, r25
    6c90:	08 95       	ret

00006c92 <__fp_pscB>:
    6c92:	00 24       	eor	r0, r0
    6c94:	0a 94       	dec	r0
    6c96:	12 16       	cp	r1, r18
    6c98:	13 06       	cpc	r1, r19
    6c9a:	14 06       	cpc	r1, r20
    6c9c:	05 06       	cpc	r0, r21
    6c9e:	08 95       	ret

00006ca0 <__fp_round>:
    6ca0:	09 2e       	mov	r0, r25
    6ca2:	03 94       	inc	r0
    6ca4:	00 0c       	add	r0, r0
    6ca6:	11 f4       	brne	.+4      	; 0x6cac <__fp_round+0xc>
    6ca8:	88 23       	and	r24, r24
    6caa:	52 f0       	brmi	.+20     	; 0x6cc0 <__fp_round+0x20>
    6cac:	bb 0f       	add	r27, r27
    6cae:	40 f4       	brcc	.+16     	; 0x6cc0 <__fp_round+0x20>
    6cb0:	bf 2b       	or	r27, r31
    6cb2:	11 f4       	brne	.+4      	; 0x6cb8 <__fp_round+0x18>
    6cb4:	60 ff       	sbrs	r22, 0
    6cb6:	04 c0       	rjmp	.+8      	; 0x6cc0 <__fp_round+0x20>
    6cb8:	6f 5f       	subi	r22, 0xFF	; 255
    6cba:	7f 4f       	sbci	r23, 0xFF	; 255
    6cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    6cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    6cc0:	08 95       	ret

00006cc2 <__fp_split3>:
    6cc2:	57 fd       	sbrc	r21, 7
    6cc4:	90 58       	subi	r25, 0x80	; 128
    6cc6:	44 0f       	add	r20, r20
    6cc8:	55 1f       	adc	r21, r21
    6cca:	59 f0       	breq	.+22     	; 0x6ce2 <__fp_splitA+0x10>
    6ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    6cce:	71 f0       	breq	.+28     	; 0x6cec <__fp_splitA+0x1a>
    6cd0:	47 95       	ror	r20

00006cd2 <__fp_splitA>:
    6cd2:	88 0f       	add	r24, r24
    6cd4:	97 fb       	bst	r25, 7
    6cd6:	99 1f       	adc	r25, r25
    6cd8:	61 f0       	breq	.+24     	; 0x6cf2 <__fp_splitA+0x20>
    6cda:	9f 3f       	cpi	r25, 0xFF	; 255
    6cdc:	79 f0       	breq	.+30     	; 0x6cfc <__fp_splitA+0x2a>
    6cde:	87 95       	ror	r24
    6ce0:	08 95       	ret
    6ce2:	12 16       	cp	r1, r18
    6ce4:	13 06       	cpc	r1, r19
    6ce6:	14 06       	cpc	r1, r20
    6ce8:	55 1f       	adc	r21, r21
    6cea:	f2 cf       	rjmp	.-28     	; 0x6cd0 <__fp_split3+0xe>
    6cec:	46 95       	lsr	r20
    6cee:	f1 df       	rcall	.-30     	; 0x6cd2 <__fp_splitA>
    6cf0:	08 c0       	rjmp	.+16     	; 0x6d02 <__fp_splitA+0x30>
    6cf2:	16 16       	cp	r1, r22
    6cf4:	17 06       	cpc	r1, r23
    6cf6:	18 06       	cpc	r1, r24
    6cf8:	99 1f       	adc	r25, r25
    6cfa:	f1 cf       	rjmp	.-30     	; 0x6cde <__fp_splitA+0xc>
    6cfc:	86 95       	lsr	r24
    6cfe:	71 05       	cpc	r23, r1
    6d00:	61 05       	cpc	r22, r1
    6d02:	08 94       	sec
    6d04:	08 95       	ret

00006d06 <__fp_zero>:
    6d06:	e8 94       	clt

00006d08 <__fp_szero>:
    6d08:	bb 27       	eor	r27, r27
    6d0a:	66 27       	eor	r22, r22
    6d0c:	77 27       	eor	r23, r23
    6d0e:	cb 01       	movw	r24, r22
    6d10:	97 f9       	bld	r25, 7
    6d12:	08 95       	ret

00006d14 <__gesf2>:
    6d14:	66 d0       	rcall	.+204    	; 0x6de2 <__fp_cmp>
    6d16:	08 f4       	brcc	.+2      	; 0x6d1a <__gesf2+0x6>
    6d18:	8f ef       	ldi	r24, 0xFF	; 255
    6d1a:	08 95       	ret

00006d1c <__mulsf3>:
    6d1c:	0b d0       	rcall	.+22     	; 0x6d34 <__mulsf3x>
    6d1e:	c0 cf       	rjmp	.-128    	; 0x6ca0 <__fp_round>
    6d20:	b1 df       	rcall	.-158    	; 0x6c84 <__fp_pscA>
    6d22:	28 f0       	brcs	.+10     	; 0x6d2e <__mulsf3+0x12>
    6d24:	b6 df       	rcall	.-148    	; 0x6c92 <__fp_pscB>
    6d26:	18 f0       	brcs	.+6      	; 0x6d2e <__mulsf3+0x12>
    6d28:	95 23       	and	r25, r21
    6d2a:	09 f0       	breq	.+2      	; 0x6d2e <__mulsf3+0x12>
    6d2c:	a2 cf       	rjmp	.-188    	; 0x6c72 <__fp_inf>
    6d2e:	a7 cf       	rjmp	.-178    	; 0x6c7e <__fp_nan>
    6d30:	11 24       	eor	r1, r1
    6d32:	ea cf       	rjmp	.-44     	; 0x6d08 <__fp_szero>

00006d34 <__mulsf3x>:
    6d34:	c6 df       	rcall	.-116    	; 0x6cc2 <__fp_split3>
    6d36:	a0 f3       	brcs	.-24     	; 0x6d20 <__mulsf3+0x4>

00006d38 <__mulsf3_pse>:
    6d38:	95 9f       	mul	r25, r21
    6d3a:	d1 f3       	breq	.-12     	; 0x6d30 <__mulsf3+0x14>
    6d3c:	95 0f       	add	r25, r21
    6d3e:	50 e0       	ldi	r21, 0x00	; 0
    6d40:	55 1f       	adc	r21, r21
    6d42:	62 9f       	mul	r22, r18
    6d44:	f0 01       	movw	r30, r0
    6d46:	72 9f       	mul	r23, r18
    6d48:	bb 27       	eor	r27, r27
    6d4a:	f0 0d       	add	r31, r0
    6d4c:	b1 1d       	adc	r27, r1
    6d4e:	63 9f       	mul	r22, r19
    6d50:	aa 27       	eor	r26, r26
    6d52:	f0 0d       	add	r31, r0
    6d54:	b1 1d       	adc	r27, r1
    6d56:	aa 1f       	adc	r26, r26
    6d58:	64 9f       	mul	r22, r20
    6d5a:	66 27       	eor	r22, r22
    6d5c:	b0 0d       	add	r27, r0
    6d5e:	a1 1d       	adc	r26, r1
    6d60:	66 1f       	adc	r22, r22
    6d62:	82 9f       	mul	r24, r18
    6d64:	22 27       	eor	r18, r18
    6d66:	b0 0d       	add	r27, r0
    6d68:	a1 1d       	adc	r26, r1
    6d6a:	62 1f       	adc	r22, r18
    6d6c:	73 9f       	mul	r23, r19
    6d6e:	b0 0d       	add	r27, r0
    6d70:	a1 1d       	adc	r26, r1
    6d72:	62 1f       	adc	r22, r18
    6d74:	83 9f       	mul	r24, r19
    6d76:	a0 0d       	add	r26, r0
    6d78:	61 1d       	adc	r22, r1
    6d7a:	22 1f       	adc	r18, r18
    6d7c:	74 9f       	mul	r23, r20
    6d7e:	33 27       	eor	r19, r19
    6d80:	a0 0d       	add	r26, r0
    6d82:	61 1d       	adc	r22, r1
    6d84:	23 1f       	adc	r18, r19
    6d86:	84 9f       	mul	r24, r20
    6d88:	60 0d       	add	r22, r0
    6d8a:	21 1d       	adc	r18, r1
    6d8c:	82 2f       	mov	r24, r18
    6d8e:	76 2f       	mov	r23, r22
    6d90:	6a 2f       	mov	r22, r26
    6d92:	11 24       	eor	r1, r1
    6d94:	9f 57       	subi	r25, 0x7F	; 127
    6d96:	50 40       	sbci	r21, 0x00	; 0
    6d98:	8a f0       	brmi	.+34     	; 0x6dbc <__mulsf3_pse+0x84>
    6d9a:	e1 f0       	breq	.+56     	; 0x6dd4 <__mulsf3_pse+0x9c>
    6d9c:	88 23       	and	r24, r24
    6d9e:	4a f0       	brmi	.+18     	; 0x6db2 <__mulsf3_pse+0x7a>
    6da0:	ee 0f       	add	r30, r30
    6da2:	ff 1f       	adc	r31, r31
    6da4:	bb 1f       	adc	r27, r27
    6da6:	66 1f       	adc	r22, r22
    6da8:	77 1f       	adc	r23, r23
    6daa:	88 1f       	adc	r24, r24
    6dac:	91 50       	subi	r25, 0x01	; 1
    6dae:	50 40       	sbci	r21, 0x00	; 0
    6db0:	a9 f7       	brne	.-22     	; 0x6d9c <__mulsf3_pse+0x64>
    6db2:	9e 3f       	cpi	r25, 0xFE	; 254
    6db4:	51 05       	cpc	r21, r1
    6db6:	70 f0       	brcs	.+28     	; 0x6dd4 <__mulsf3_pse+0x9c>
    6db8:	5c cf       	rjmp	.-328    	; 0x6c72 <__fp_inf>
    6dba:	a6 cf       	rjmp	.-180    	; 0x6d08 <__fp_szero>
    6dbc:	5f 3f       	cpi	r21, 0xFF	; 255
    6dbe:	ec f3       	brlt	.-6      	; 0x6dba <__mulsf3_pse+0x82>
    6dc0:	98 3e       	cpi	r25, 0xE8	; 232
    6dc2:	dc f3       	brlt	.-10     	; 0x6dba <__mulsf3_pse+0x82>
    6dc4:	86 95       	lsr	r24
    6dc6:	77 95       	ror	r23
    6dc8:	67 95       	ror	r22
    6dca:	b7 95       	ror	r27
    6dcc:	f7 95       	ror	r31
    6dce:	e7 95       	ror	r30
    6dd0:	9f 5f       	subi	r25, 0xFF	; 255
    6dd2:	c1 f7       	brne	.-16     	; 0x6dc4 <__mulsf3_pse+0x8c>
    6dd4:	fe 2b       	or	r31, r30
    6dd6:	88 0f       	add	r24, r24
    6dd8:	91 1d       	adc	r25, r1
    6dda:	96 95       	lsr	r25
    6ddc:	87 95       	ror	r24
    6dde:	97 f9       	bld	r25, 7
    6de0:	08 95       	ret

00006de2 <__fp_cmp>:
    6de2:	99 0f       	add	r25, r25
    6de4:	00 08       	sbc	r0, r0
    6de6:	55 0f       	add	r21, r21
    6de8:	aa 0b       	sbc	r26, r26
    6dea:	e0 e8       	ldi	r30, 0x80	; 128
    6dec:	fe ef       	ldi	r31, 0xFE	; 254
    6dee:	16 16       	cp	r1, r22
    6df0:	17 06       	cpc	r1, r23
    6df2:	e8 07       	cpc	r30, r24
    6df4:	f9 07       	cpc	r31, r25
    6df6:	c0 f0       	brcs	.+48     	; 0x6e28 <__fp_cmp+0x46>
    6df8:	12 16       	cp	r1, r18
    6dfa:	13 06       	cpc	r1, r19
    6dfc:	e4 07       	cpc	r30, r20
    6dfe:	f5 07       	cpc	r31, r21
    6e00:	98 f0       	brcs	.+38     	; 0x6e28 <__fp_cmp+0x46>
    6e02:	62 1b       	sub	r22, r18
    6e04:	73 0b       	sbc	r23, r19
    6e06:	84 0b       	sbc	r24, r20
    6e08:	95 0b       	sbc	r25, r21
    6e0a:	39 f4       	brne	.+14     	; 0x6e1a <__fp_cmp+0x38>
    6e0c:	0a 26       	eor	r0, r26
    6e0e:	61 f0       	breq	.+24     	; 0x6e28 <__fp_cmp+0x46>
    6e10:	23 2b       	or	r18, r19
    6e12:	24 2b       	or	r18, r20
    6e14:	25 2b       	or	r18, r21
    6e16:	21 f4       	brne	.+8      	; 0x6e20 <__fp_cmp+0x3e>
    6e18:	08 95       	ret
    6e1a:	0a 26       	eor	r0, r26
    6e1c:	09 f4       	brne	.+2      	; 0x6e20 <__fp_cmp+0x3e>
    6e1e:	a1 40       	sbci	r26, 0x01	; 1
    6e20:	a6 95       	lsr	r26
    6e22:	8f ef       	ldi	r24, 0xFF	; 255
    6e24:	81 1d       	adc	r24, r1
    6e26:	81 1d       	adc	r24, r1
    6e28:	08 95       	ret

00006e2a <__divmodhi4>:
    6e2a:	97 fb       	bst	r25, 7
    6e2c:	07 2e       	mov	r0, r23
    6e2e:	16 f4       	brtc	.+4      	; 0x6e34 <__divmodhi4+0xa>
    6e30:	00 94       	com	r0
    6e32:	06 d0       	rcall	.+12     	; 0x6e40 <__divmodhi4_neg1>
    6e34:	77 fd       	sbrc	r23, 7
    6e36:	08 d0       	rcall	.+16     	; 0x6e48 <__divmodhi4_neg2>
    6e38:	44 d0       	rcall	.+136    	; 0x6ec2 <__udivmodhi4>
    6e3a:	07 fc       	sbrc	r0, 7
    6e3c:	05 d0       	rcall	.+10     	; 0x6e48 <__divmodhi4_neg2>
    6e3e:	3e f4       	brtc	.+14     	; 0x6e4e <__divmodhi4_exit>

00006e40 <__divmodhi4_neg1>:
    6e40:	90 95       	com	r25
    6e42:	81 95       	neg	r24
    6e44:	9f 4f       	sbci	r25, 0xFF	; 255
    6e46:	08 95       	ret

00006e48 <__divmodhi4_neg2>:
    6e48:	70 95       	com	r23
    6e4a:	61 95       	neg	r22
    6e4c:	7f 4f       	sbci	r23, 0xFF	; 255

00006e4e <__divmodhi4_exit>:
    6e4e:	08 95       	ret

00006e50 <__udivmodsi4>:
    6e50:	a1 e2       	ldi	r26, 0x21	; 33
    6e52:	1a 2e       	mov	r1, r26
    6e54:	aa 1b       	sub	r26, r26
    6e56:	bb 1b       	sub	r27, r27
    6e58:	fd 01       	movw	r30, r26
    6e5a:	0d c0       	rjmp	.+26     	; 0x6e76 <__udivmodsi4_ep>

00006e5c <__udivmodsi4_loop>:
    6e5c:	aa 1f       	adc	r26, r26
    6e5e:	bb 1f       	adc	r27, r27
    6e60:	ee 1f       	adc	r30, r30
    6e62:	ff 1f       	adc	r31, r31
    6e64:	a2 17       	cp	r26, r18
    6e66:	b3 07       	cpc	r27, r19
    6e68:	e4 07       	cpc	r30, r20
    6e6a:	f5 07       	cpc	r31, r21
    6e6c:	20 f0       	brcs	.+8      	; 0x6e76 <__udivmodsi4_ep>
    6e6e:	a2 1b       	sub	r26, r18
    6e70:	b3 0b       	sbc	r27, r19
    6e72:	e4 0b       	sbc	r30, r20
    6e74:	f5 0b       	sbc	r31, r21

00006e76 <__udivmodsi4_ep>:
    6e76:	66 1f       	adc	r22, r22
    6e78:	77 1f       	adc	r23, r23
    6e7a:	88 1f       	adc	r24, r24
    6e7c:	99 1f       	adc	r25, r25
    6e7e:	1a 94       	dec	r1
    6e80:	69 f7       	brne	.-38     	; 0x6e5c <__udivmodsi4_loop>
    6e82:	60 95       	com	r22
    6e84:	70 95       	com	r23
    6e86:	80 95       	com	r24
    6e88:	90 95       	com	r25
    6e8a:	9b 01       	movw	r18, r22
    6e8c:	ac 01       	movw	r20, r24
    6e8e:	bd 01       	movw	r22, r26
    6e90:	cf 01       	movw	r24, r30
    6e92:	08 95       	ret

00006e94 <__tablejump2__>:
    6e94:	ee 0f       	add	r30, r30
    6e96:	ff 1f       	adc	r31, r31
    6e98:	88 1f       	adc	r24, r24
    6e9a:	8b bf       	out	0x3b, r24	; 59
    6e9c:	07 90       	elpm	r0, Z+
    6e9e:	f6 91       	elpm	r31, Z
    6ea0:	e0 2d       	mov	r30, r0
    6ea2:	19 94       	eijmp

00006ea4 <__umulhisi3>:
    6ea4:	a2 9f       	mul	r26, r18
    6ea6:	b0 01       	movw	r22, r0
    6ea8:	b3 9f       	mul	r27, r19
    6eaa:	c0 01       	movw	r24, r0
    6eac:	a3 9f       	mul	r26, r19
    6eae:	70 0d       	add	r23, r0
    6eb0:	81 1d       	adc	r24, r1
    6eb2:	11 24       	eor	r1, r1
    6eb4:	91 1d       	adc	r25, r1
    6eb6:	b2 9f       	mul	r27, r18
    6eb8:	70 0d       	add	r23, r0
    6eba:	81 1d       	adc	r24, r1
    6ebc:	11 24       	eor	r1, r1
    6ebe:	91 1d       	adc	r25, r1
    6ec0:	08 95       	ret

00006ec2 <__udivmodhi4>:
    6ec2:	aa 1b       	sub	r26, r26
    6ec4:	bb 1b       	sub	r27, r27
    6ec6:	51 e1       	ldi	r21, 0x11	; 17
    6ec8:	07 c0       	rjmp	.+14     	; 0x6ed8 <__udivmodhi4_ep>

00006eca <__udivmodhi4_loop>:
    6eca:	aa 1f       	adc	r26, r26
    6ecc:	bb 1f       	adc	r27, r27
    6ece:	a6 17       	cp	r26, r22
    6ed0:	b7 07       	cpc	r27, r23
    6ed2:	10 f0       	brcs	.+4      	; 0x6ed8 <__udivmodhi4_ep>
    6ed4:	a6 1b       	sub	r26, r22
    6ed6:	b7 0b       	sbc	r27, r23

00006ed8 <__udivmodhi4_ep>:
    6ed8:	88 1f       	adc	r24, r24
    6eda:	99 1f       	adc	r25, r25
    6edc:	5a 95       	dec	r21
    6ede:	a9 f7       	brne	.-22     	; 0x6eca <__udivmodhi4_loop>
    6ee0:	80 95       	com	r24
    6ee2:	90 95       	com	r25
    6ee4:	bc 01       	movw	r22, r24
    6ee6:	cd 01       	movw	r24, r26
    6ee8:	08 95       	ret

00006eea <malloc>:
    6eea:	0f 93       	push	r16
    6eec:	1f 93       	push	r17
    6eee:	cf 93       	push	r28
    6ef0:	df 93       	push	r29
    6ef2:	82 30       	cpi	r24, 0x02	; 2
    6ef4:	91 05       	cpc	r25, r1
    6ef6:	10 f4       	brcc	.+4      	; 0x6efc <malloc+0x12>
    6ef8:	82 e0       	ldi	r24, 0x02	; 2
    6efa:	90 e0       	ldi	r25, 0x00	; 0
    6efc:	e0 91 27 1a 	lds	r30, 0x1A27	; 0x801a27 <__flp>
    6f00:	f0 91 28 1a 	lds	r31, 0x1A28	; 0x801a28 <__flp+0x1>
    6f04:	20 e0       	ldi	r18, 0x00	; 0
    6f06:	30 e0       	ldi	r19, 0x00	; 0
    6f08:	a0 e0       	ldi	r26, 0x00	; 0
    6f0a:	b0 e0       	ldi	r27, 0x00	; 0
    6f0c:	30 97       	sbiw	r30, 0x00	; 0
    6f0e:	19 f1       	breq	.+70     	; 0x6f56 <malloc+0x6c>
    6f10:	40 81       	ld	r20, Z
    6f12:	51 81       	ldd	r21, Z+1	; 0x01
    6f14:	02 81       	ldd	r16, Z+2	; 0x02
    6f16:	13 81       	ldd	r17, Z+3	; 0x03
    6f18:	48 17       	cp	r20, r24
    6f1a:	59 07       	cpc	r21, r25
    6f1c:	c8 f0       	brcs	.+50     	; 0x6f50 <malloc+0x66>
    6f1e:	84 17       	cp	r24, r20
    6f20:	95 07       	cpc	r25, r21
    6f22:	69 f4       	brne	.+26     	; 0x6f3e <malloc+0x54>
    6f24:	10 97       	sbiw	r26, 0x00	; 0
    6f26:	31 f0       	breq	.+12     	; 0x6f34 <malloc+0x4a>
    6f28:	12 96       	adiw	r26, 0x02	; 2
    6f2a:	0c 93       	st	X, r16
    6f2c:	12 97       	sbiw	r26, 0x02	; 2
    6f2e:	13 96       	adiw	r26, 0x03	; 3
    6f30:	1c 93       	st	X, r17
    6f32:	27 c0       	rjmp	.+78     	; 0x6f82 <malloc+0x98>
    6f34:	00 93 27 1a 	sts	0x1A27, r16	; 0x801a27 <__flp>
    6f38:	10 93 28 1a 	sts	0x1A28, r17	; 0x801a28 <__flp+0x1>
    6f3c:	22 c0       	rjmp	.+68     	; 0x6f82 <malloc+0x98>
    6f3e:	21 15       	cp	r18, r1
    6f40:	31 05       	cpc	r19, r1
    6f42:	19 f0       	breq	.+6      	; 0x6f4a <malloc+0x60>
    6f44:	42 17       	cp	r20, r18
    6f46:	53 07       	cpc	r21, r19
    6f48:	18 f4       	brcc	.+6      	; 0x6f50 <malloc+0x66>
    6f4a:	9a 01       	movw	r18, r20
    6f4c:	bd 01       	movw	r22, r26
    6f4e:	ef 01       	movw	r28, r30
    6f50:	df 01       	movw	r26, r30
    6f52:	f8 01       	movw	r30, r16
    6f54:	db cf       	rjmp	.-74     	; 0x6f0c <malloc+0x22>
    6f56:	21 15       	cp	r18, r1
    6f58:	31 05       	cpc	r19, r1
    6f5a:	f9 f0       	breq	.+62     	; 0x6f9a <malloc+0xb0>
    6f5c:	28 1b       	sub	r18, r24
    6f5e:	39 0b       	sbc	r19, r25
    6f60:	24 30       	cpi	r18, 0x04	; 4
    6f62:	31 05       	cpc	r19, r1
    6f64:	80 f4       	brcc	.+32     	; 0x6f86 <malloc+0x9c>
    6f66:	8a 81       	ldd	r24, Y+2	; 0x02
    6f68:	9b 81       	ldd	r25, Y+3	; 0x03
    6f6a:	61 15       	cp	r22, r1
    6f6c:	71 05       	cpc	r23, r1
    6f6e:	21 f0       	breq	.+8      	; 0x6f78 <malloc+0x8e>
    6f70:	fb 01       	movw	r30, r22
    6f72:	93 83       	std	Z+3, r25	; 0x03
    6f74:	82 83       	std	Z+2, r24	; 0x02
    6f76:	04 c0       	rjmp	.+8      	; 0x6f80 <malloc+0x96>
    6f78:	90 93 28 1a 	sts	0x1A28, r25	; 0x801a28 <__flp+0x1>
    6f7c:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <__flp>
    6f80:	fe 01       	movw	r30, r28
    6f82:	32 96       	adiw	r30, 0x02	; 2
    6f84:	44 c0       	rjmp	.+136    	; 0x700e <malloc+0x124>
    6f86:	fe 01       	movw	r30, r28
    6f88:	e2 0f       	add	r30, r18
    6f8a:	f3 1f       	adc	r31, r19
    6f8c:	81 93       	st	Z+, r24
    6f8e:	91 93       	st	Z+, r25
    6f90:	22 50       	subi	r18, 0x02	; 2
    6f92:	31 09       	sbc	r19, r1
    6f94:	39 83       	std	Y+1, r19	; 0x01
    6f96:	28 83       	st	Y, r18
    6f98:	3a c0       	rjmp	.+116    	; 0x700e <malloc+0x124>
    6f9a:	20 91 25 1a 	lds	r18, 0x1A25	; 0x801a25 <__brkval>
    6f9e:	30 91 26 1a 	lds	r19, 0x1A26	; 0x801a26 <__brkval+0x1>
    6fa2:	23 2b       	or	r18, r19
    6fa4:	41 f4       	brne	.+16     	; 0x6fb6 <malloc+0xcc>
    6fa6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6faa:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6fae:	30 93 26 1a 	sts	0x1A26, r19	; 0x801a26 <__brkval+0x1>
    6fb2:	20 93 25 1a 	sts	0x1A25, r18	; 0x801a25 <__brkval>
    6fb6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6fba:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6fbe:	21 15       	cp	r18, r1
    6fc0:	31 05       	cpc	r19, r1
    6fc2:	41 f4       	brne	.+16     	; 0x6fd4 <malloc+0xea>
    6fc4:	2d b7       	in	r18, 0x3d	; 61
    6fc6:	3e b7       	in	r19, 0x3e	; 62
    6fc8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6fcc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6fd0:	24 1b       	sub	r18, r20
    6fd2:	35 0b       	sbc	r19, r21
    6fd4:	e0 91 25 1a 	lds	r30, 0x1A25	; 0x801a25 <__brkval>
    6fd8:	f0 91 26 1a 	lds	r31, 0x1A26	; 0x801a26 <__brkval+0x1>
    6fdc:	e2 17       	cp	r30, r18
    6fde:	f3 07       	cpc	r31, r19
    6fe0:	a0 f4       	brcc	.+40     	; 0x700a <malloc+0x120>
    6fe2:	2e 1b       	sub	r18, r30
    6fe4:	3f 0b       	sbc	r19, r31
    6fe6:	28 17       	cp	r18, r24
    6fe8:	39 07       	cpc	r19, r25
    6fea:	78 f0       	brcs	.+30     	; 0x700a <malloc+0x120>
    6fec:	ac 01       	movw	r20, r24
    6fee:	4e 5f       	subi	r20, 0xFE	; 254
    6ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    6ff2:	24 17       	cp	r18, r20
    6ff4:	35 07       	cpc	r19, r21
    6ff6:	48 f0       	brcs	.+18     	; 0x700a <malloc+0x120>
    6ff8:	4e 0f       	add	r20, r30
    6ffa:	5f 1f       	adc	r21, r31
    6ffc:	50 93 26 1a 	sts	0x1A26, r21	; 0x801a26 <__brkval+0x1>
    7000:	40 93 25 1a 	sts	0x1A25, r20	; 0x801a25 <__brkval>
    7004:	81 93       	st	Z+, r24
    7006:	91 93       	st	Z+, r25
    7008:	02 c0       	rjmp	.+4      	; 0x700e <malloc+0x124>
    700a:	e0 e0       	ldi	r30, 0x00	; 0
    700c:	f0 e0       	ldi	r31, 0x00	; 0
    700e:	cf 01       	movw	r24, r30
    7010:	df 91       	pop	r29
    7012:	cf 91       	pop	r28
    7014:	1f 91       	pop	r17
    7016:	0f 91       	pop	r16
    7018:	08 95       	ret

0000701a <free>:
    701a:	cf 93       	push	r28
    701c:	df 93       	push	r29
    701e:	00 97       	sbiw	r24, 0x00	; 0
    7020:	09 f4       	brne	.+2      	; 0x7024 <free+0xa>
    7022:	81 c0       	rjmp	.+258    	; 0x7126 <free+0x10c>
    7024:	fc 01       	movw	r30, r24
    7026:	32 97       	sbiw	r30, 0x02	; 2
    7028:	13 82       	std	Z+3, r1	; 0x03
    702a:	12 82       	std	Z+2, r1	; 0x02
    702c:	a0 91 27 1a 	lds	r26, 0x1A27	; 0x801a27 <__flp>
    7030:	b0 91 28 1a 	lds	r27, 0x1A28	; 0x801a28 <__flp+0x1>
    7034:	10 97       	sbiw	r26, 0x00	; 0
    7036:	81 f4       	brne	.+32     	; 0x7058 <free+0x3e>
    7038:	20 81       	ld	r18, Z
    703a:	31 81       	ldd	r19, Z+1	; 0x01
    703c:	82 0f       	add	r24, r18
    703e:	93 1f       	adc	r25, r19
    7040:	20 91 25 1a 	lds	r18, 0x1A25	; 0x801a25 <__brkval>
    7044:	30 91 26 1a 	lds	r19, 0x1A26	; 0x801a26 <__brkval+0x1>
    7048:	28 17       	cp	r18, r24
    704a:	39 07       	cpc	r19, r25
    704c:	51 f5       	brne	.+84     	; 0x70a2 <free+0x88>
    704e:	f0 93 26 1a 	sts	0x1A26, r31	; 0x801a26 <__brkval+0x1>
    7052:	e0 93 25 1a 	sts	0x1A25, r30	; 0x801a25 <__brkval>
    7056:	67 c0       	rjmp	.+206    	; 0x7126 <free+0x10c>
    7058:	ed 01       	movw	r28, r26
    705a:	20 e0       	ldi	r18, 0x00	; 0
    705c:	30 e0       	ldi	r19, 0x00	; 0
    705e:	ce 17       	cp	r28, r30
    7060:	df 07       	cpc	r29, r31
    7062:	40 f4       	brcc	.+16     	; 0x7074 <free+0x5a>
    7064:	4a 81       	ldd	r20, Y+2	; 0x02
    7066:	5b 81       	ldd	r21, Y+3	; 0x03
    7068:	9e 01       	movw	r18, r28
    706a:	41 15       	cp	r20, r1
    706c:	51 05       	cpc	r21, r1
    706e:	f1 f0       	breq	.+60     	; 0x70ac <free+0x92>
    7070:	ea 01       	movw	r28, r20
    7072:	f5 cf       	rjmp	.-22     	; 0x705e <free+0x44>
    7074:	d3 83       	std	Z+3, r29	; 0x03
    7076:	c2 83       	std	Z+2, r28	; 0x02
    7078:	40 81       	ld	r20, Z
    707a:	51 81       	ldd	r21, Z+1	; 0x01
    707c:	84 0f       	add	r24, r20
    707e:	95 1f       	adc	r25, r21
    7080:	c8 17       	cp	r28, r24
    7082:	d9 07       	cpc	r29, r25
    7084:	59 f4       	brne	.+22     	; 0x709c <free+0x82>
    7086:	88 81       	ld	r24, Y
    7088:	99 81       	ldd	r25, Y+1	; 0x01
    708a:	84 0f       	add	r24, r20
    708c:	95 1f       	adc	r25, r21
    708e:	02 96       	adiw	r24, 0x02	; 2
    7090:	91 83       	std	Z+1, r25	; 0x01
    7092:	80 83       	st	Z, r24
    7094:	8a 81       	ldd	r24, Y+2	; 0x02
    7096:	9b 81       	ldd	r25, Y+3	; 0x03
    7098:	93 83       	std	Z+3, r25	; 0x03
    709a:	82 83       	std	Z+2, r24	; 0x02
    709c:	21 15       	cp	r18, r1
    709e:	31 05       	cpc	r19, r1
    70a0:	29 f4       	brne	.+10     	; 0x70ac <free+0x92>
    70a2:	f0 93 28 1a 	sts	0x1A28, r31	; 0x801a28 <__flp+0x1>
    70a6:	e0 93 27 1a 	sts	0x1A27, r30	; 0x801a27 <__flp>
    70aa:	3d c0       	rjmp	.+122    	; 0x7126 <free+0x10c>
    70ac:	e9 01       	movw	r28, r18
    70ae:	fb 83       	std	Y+3, r31	; 0x03
    70b0:	ea 83       	std	Y+2, r30	; 0x02
    70b2:	49 91       	ld	r20, Y+
    70b4:	59 91       	ld	r21, Y+
    70b6:	c4 0f       	add	r28, r20
    70b8:	d5 1f       	adc	r29, r21
    70ba:	ec 17       	cp	r30, r28
    70bc:	fd 07       	cpc	r31, r29
    70be:	61 f4       	brne	.+24     	; 0x70d8 <free+0xbe>
    70c0:	80 81       	ld	r24, Z
    70c2:	91 81       	ldd	r25, Z+1	; 0x01
    70c4:	84 0f       	add	r24, r20
    70c6:	95 1f       	adc	r25, r21
    70c8:	02 96       	adiw	r24, 0x02	; 2
    70ca:	e9 01       	movw	r28, r18
    70cc:	99 83       	std	Y+1, r25	; 0x01
    70ce:	88 83       	st	Y, r24
    70d0:	82 81       	ldd	r24, Z+2	; 0x02
    70d2:	93 81       	ldd	r25, Z+3	; 0x03
    70d4:	9b 83       	std	Y+3, r25	; 0x03
    70d6:	8a 83       	std	Y+2, r24	; 0x02
    70d8:	e0 e0       	ldi	r30, 0x00	; 0
    70da:	f0 e0       	ldi	r31, 0x00	; 0
    70dc:	12 96       	adiw	r26, 0x02	; 2
    70de:	8d 91       	ld	r24, X+
    70e0:	9c 91       	ld	r25, X
    70e2:	13 97       	sbiw	r26, 0x03	; 3
    70e4:	00 97       	sbiw	r24, 0x00	; 0
    70e6:	19 f0       	breq	.+6      	; 0x70ee <free+0xd4>
    70e8:	fd 01       	movw	r30, r26
    70ea:	dc 01       	movw	r26, r24
    70ec:	f7 cf       	rjmp	.-18     	; 0x70dc <free+0xc2>
    70ee:	8d 91       	ld	r24, X+
    70f0:	9c 91       	ld	r25, X
    70f2:	11 97       	sbiw	r26, 0x01	; 1
    70f4:	9d 01       	movw	r18, r26
    70f6:	2e 5f       	subi	r18, 0xFE	; 254
    70f8:	3f 4f       	sbci	r19, 0xFF	; 255
    70fa:	82 0f       	add	r24, r18
    70fc:	93 1f       	adc	r25, r19
    70fe:	20 91 25 1a 	lds	r18, 0x1A25	; 0x801a25 <__brkval>
    7102:	30 91 26 1a 	lds	r19, 0x1A26	; 0x801a26 <__brkval+0x1>
    7106:	28 17       	cp	r18, r24
    7108:	39 07       	cpc	r19, r25
    710a:	69 f4       	brne	.+26     	; 0x7126 <free+0x10c>
    710c:	30 97       	sbiw	r30, 0x00	; 0
    710e:	29 f4       	brne	.+10     	; 0x711a <free+0x100>
    7110:	10 92 28 1a 	sts	0x1A28, r1	; 0x801a28 <__flp+0x1>
    7114:	10 92 27 1a 	sts	0x1A27, r1	; 0x801a27 <__flp>
    7118:	02 c0       	rjmp	.+4      	; 0x711e <free+0x104>
    711a:	13 82       	std	Z+3, r1	; 0x03
    711c:	12 82       	std	Z+2, r1	; 0x02
    711e:	b0 93 26 1a 	sts	0x1A26, r27	; 0x801a26 <__brkval+0x1>
    7122:	a0 93 25 1a 	sts	0x1A25, r26	; 0x801a25 <__brkval>
    7126:	df 91       	pop	r29
    7128:	cf 91       	pop	r28
    712a:	08 95       	ret

0000712c <abort>:
    712c:	81 e0       	ldi	r24, 0x01	; 1
    712e:	90 e0       	ldi	r25, 0x00	; 0
    7130:	f8 94       	cli
    7132:	5a c2       	rjmp	.+1204   	; 0x75e8 <_exit>

00007134 <__ftoa_engine>:
    7134:	28 30       	cpi	r18, 0x08	; 8
    7136:	08 f0       	brcs	.+2      	; 0x713a <__ftoa_engine+0x6>
    7138:	27 e0       	ldi	r18, 0x07	; 7
    713a:	33 27       	eor	r19, r19
    713c:	da 01       	movw	r26, r20
    713e:	99 0f       	add	r25, r25
    7140:	31 1d       	adc	r19, r1
    7142:	87 fd       	sbrc	r24, 7
    7144:	91 60       	ori	r25, 0x01	; 1
    7146:	00 96       	adiw	r24, 0x00	; 0
    7148:	61 05       	cpc	r22, r1
    714a:	71 05       	cpc	r23, r1
    714c:	39 f4       	brne	.+14     	; 0x715c <__ftoa_engine+0x28>
    714e:	32 60       	ori	r19, 0x02	; 2
    7150:	2e 5f       	subi	r18, 0xFE	; 254
    7152:	3d 93       	st	X+, r19
    7154:	30 e3       	ldi	r19, 0x30	; 48
    7156:	2a 95       	dec	r18
    7158:	e1 f7       	brne	.-8      	; 0x7152 <__ftoa_engine+0x1e>
    715a:	08 95       	ret
    715c:	9f 3f       	cpi	r25, 0xFF	; 255
    715e:	30 f0       	brcs	.+12     	; 0x716c <__ftoa_engine+0x38>
    7160:	80 38       	cpi	r24, 0x80	; 128
    7162:	71 05       	cpc	r23, r1
    7164:	61 05       	cpc	r22, r1
    7166:	09 f0       	breq	.+2      	; 0x716a <__ftoa_engine+0x36>
    7168:	3c 5f       	subi	r19, 0xFC	; 252
    716a:	3c 5f       	subi	r19, 0xFC	; 252
    716c:	3d 93       	st	X+, r19
    716e:	91 30       	cpi	r25, 0x01	; 1
    7170:	08 f0       	brcs	.+2      	; 0x7174 <__ftoa_engine+0x40>
    7172:	80 68       	ori	r24, 0x80	; 128
    7174:	91 1d       	adc	r25, r1
    7176:	df 93       	push	r29
    7178:	cf 93       	push	r28
    717a:	1f 93       	push	r17
    717c:	0f 93       	push	r16
    717e:	ff 92       	push	r15
    7180:	ef 92       	push	r14
    7182:	19 2f       	mov	r17, r25
    7184:	98 7f       	andi	r25, 0xF8	; 248
    7186:	96 95       	lsr	r25
    7188:	e9 2f       	mov	r30, r25
    718a:	96 95       	lsr	r25
    718c:	96 95       	lsr	r25
    718e:	e9 0f       	add	r30, r25
    7190:	ff 27       	eor	r31, r31
    7192:	e4 50       	subi	r30, 0x04	; 4
    7194:	fe 4f       	sbci	r31, 0xFE	; 254
    7196:	99 27       	eor	r25, r25
    7198:	33 27       	eor	r19, r19
    719a:	ee 24       	eor	r14, r14
    719c:	ff 24       	eor	r15, r15
    719e:	a7 01       	movw	r20, r14
    71a0:	e7 01       	movw	r28, r14
    71a2:	05 90       	lpm	r0, Z+
    71a4:	08 94       	sec
    71a6:	07 94       	ror	r0
    71a8:	28 f4       	brcc	.+10     	; 0x71b4 <__ftoa_engine+0x80>
    71aa:	36 0f       	add	r19, r22
    71ac:	e7 1e       	adc	r14, r23
    71ae:	f8 1e       	adc	r15, r24
    71b0:	49 1f       	adc	r20, r25
    71b2:	51 1d       	adc	r21, r1
    71b4:	66 0f       	add	r22, r22
    71b6:	77 1f       	adc	r23, r23
    71b8:	88 1f       	adc	r24, r24
    71ba:	99 1f       	adc	r25, r25
    71bc:	06 94       	lsr	r0
    71be:	a1 f7       	brne	.-24     	; 0x71a8 <__ftoa_engine+0x74>
    71c0:	05 90       	lpm	r0, Z+
    71c2:	07 94       	ror	r0
    71c4:	28 f4       	brcc	.+10     	; 0x71d0 <__ftoa_engine+0x9c>
    71c6:	e7 0e       	add	r14, r23
    71c8:	f8 1e       	adc	r15, r24
    71ca:	49 1f       	adc	r20, r25
    71cc:	56 1f       	adc	r21, r22
    71ce:	c1 1d       	adc	r28, r1
    71d0:	77 0f       	add	r23, r23
    71d2:	88 1f       	adc	r24, r24
    71d4:	99 1f       	adc	r25, r25
    71d6:	66 1f       	adc	r22, r22
    71d8:	06 94       	lsr	r0
    71da:	a1 f7       	brne	.-24     	; 0x71c4 <__ftoa_engine+0x90>
    71dc:	05 90       	lpm	r0, Z+
    71de:	07 94       	ror	r0
    71e0:	28 f4       	brcc	.+10     	; 0x71ec <__ftoa_engine+0xb8>
    71e2:	f8 0e       	add	r15, r24
    71e4:	49 1f       	adc	r20, r25
    71e6:	56 1f       	adc	r21, r22
    71e8:	c7 1f       	adc	r28, r23
    71ea:	d1 1d       	adc	r29, r1
    71ec:	88 0f       	add	r24, r24
    71ee:	99 1f       	adc	r25, r25
    71f0:	66 1f       	adc	r22, r22
    71f2:	77 1f       	adc	r23, r23
    71f4:	06 94       	lsr	r0
    71f6:	a1 f7       	brne	.-24     	; 0x71e0 <__ftoa_engine+0xac>
    71f8:	05 90       	lpm	r0, Z+
    71fa:	07 94       	ror	r0
    71fc:	20 f4       	brcc	.+8      	; 0x7206 <__ftoa_engine+0xd2>
    71fe:	49 0f       	add	r20, r25
    7200:	56 1f       	adc	r21, r22
    7202:	c7 1f       	adc	r28, r23
    7204:	d8 1f       	adc	r29, r24
    7206:	99 0f       	add	r25, r25
    7208:	66 1f       	adc	r22, r22
    720a:	77 1f       	adc	r23, r23
    720c:	88 1f       	adc	r24, r24
    720e:	06 94       	lsr	r0
    7210:	a9 f7       	brne	.-22     	; 0x71fc <__ftoa_engine+0xc8>
    7212:	84 91       	lpm	r24, Z
    7214:	10 95       	com	r17
    7216:	17 70       	andi	r17, 0x07	; 7
    7218:	41 f0       	breq	.+16     	; 0x722a <__ftoa_engine+0xf6>
    721a:	d6 95       	lsr	r29
    721c:	c7 95       	ror	r28
    721e:	57 95       	ror	r21
    7220:	47 95       	ror	r20
    7222:	f7 94       	ror	r15
    7224:	e7 94       	ror	r14
    7226:	1a 95       	dec	r17
    7228:	c1 f7       	brne	.-16     	; 0x721a <__ftoa_engine+0xe6>
    722a:	e2 ea       	ldi	r30, 0xA2	; 162
    722c:	f1 e0       	ldi	r31, 0x01	; 1
    722e:	68 94       	set
    7230:	15 90       	lpm	r1, Z+
    7232:	15 91       	lpm	r17, Z+
    7234:	35 91       	lpm	r19, Z+
    7236:	65 91       	lpm	r22, Z+
    7238:	95 91       	lpm	r25, Z+
    723a:	05 90       	lpm	r0, Z+
    723c:	7f e2       	ldi	r23, 0x2F	; 47
    723e:	73 95       	inc	r23
    7240:	e1 18       	sub	r14, r1
    7242:	f1 0a       	sbc	r15, r17
    7244:	43 0b       	sbc	r20, r19
    7246:	56 0b       	sbc	r21, r22
    7248:	c9 0b       	sbc	r28, r25
    724a:	d0 09       	sbc	r29, r0
    724c:	c0 f7       	brcc	.-16     	; 0x723e <__ftoa_engine+0x10a>
    724e:	e1 0c       	add	r14, r1
    7250:	f1 1e       	adc	r15, r17
    7252:	43 1f       	adc	r20, r19
    7254:	56 1f       	adc	r21, r22
    7256:	c9 1f       	adc	r28, r25
    7258:	d0 1d       	adc	r29, r0
    725a:	7e f4       	brtc	.+30     	; 0x727a <__ftoa_engine+0x146>
    725c:	70 33       	cpi	r23, 0x30	; 48
    725e:	11 f4       	brne	.+4      	; 0x7264 <__ftoa_engine+0x130>
    7260:	8a 95       	dec	r24
    7262:	e6 cf       	rjmp	.-52     	; 0x7230 <__ftoa_engine+0xfc>
    7264:	e8 94       	clt
    7266:	01 50       	subi	r16, 0x01	; 1
    7268:	30 f0       	brcs	.+12     	; 0x7276 <__ftoa_engine+0x142>
    726a:	08 0f       	add	r16, r24
    726c:	0a f4       	brpl	.+2      	; 0x7270 <__ftoa_engine+0x13c>
    726e:	00 27       	eor	r16, r16
    7270:	02 17       	cp	r16, r18
    7272:	08 f4       	brcc	.+2      	; 0x7276 <__ftoa_engine+0x142>
    7274:	20 2f       	mov	r18, r16
    7276:	23 95       	inc	r18
    7278:	02 2f       	mov	r16, r18
    727a:	7a 33       	cpi	r23, 0x3A	; 58
    727c:	28 f0       	brcs	.+10     	; 0x7288 <__ftoa_engine+0x154>
    727e:	79 e3       	ldi	r23, 0x39	; 57
    7280:	7d 93       	st	X+, r23
    7282:	2a 95       	dec	r18
    7284:	e9 f7       	brne	.-6      	; 0x7280 <__ftoa_engine+0x14c>
    7286:	10 c0       	rjmp	.+32     	; 0x72a8 <__ftoa_engine+0x174>
    7288:	7d 93       	st	X+, r23
    728a:	2a 95       	dec	r18
    728c:	89 f6       	brne	.-94     	; 0x7230 <__ftoa_engine+0xfc>
    728e:	06 94       	lsr	r0
    7290:	97 95       	ror	r25
    7292:	67 95       	ror	r22
    7294:	37 95       	ror	r19
    7296:	17 95       	ror	r17
    7298:	17 94       	ror	r1
    729a:	e1 18       	sub	r14, r1
    729c:	f1 0a       	sbc	r15, r17
    729e:	43 0b       	sbc	r20, r19
    72a0:	56 0b       	sbc	r21, r22
    72a2:	c9 0b       	sbc	r28, r25
    72a4:	d0 09       	sbc	r29, r0
    72a6:	98 f0       	brcs	.+38     	; 0x72ce <__ftoa_engine+0x19a>
    72a8:	23 95       	inc	r18
    72aa:	7e 91       	ld	r23, -X
    72ac:	73 95       	inc	r23
    72ae:	7a 33       	cpi	r23, 0x3A	; 58
    72b0:	08 f0       	brcs	.+2      	; 0x72b4 <__ftoa_engine+0x180>
    72b2:	70 e3       	ldi	r23, 0x30	; 48
    72b4:	7c 93       	st	X, r23
    72b6:	20 13       	cpse	r18, r16
    72b8:	b8 f7       	brcc	.-18     	; 0x72a8 <__ftoa_engine+0x174>
    72ba:	7e 91       	ld	r23, -X
    72bc:	70 61       	ori	r23, 0x10	; 16
    72be:	7d 93       	st	X+, r23
    72c0:	30 f0       	brcs	.+12     	; 0x72ce <__ftoa_engine+0x19a>
    72c2:	83 95       	inc	r24
    72c4:	71 e3       	ldi	r23, 0x31	; 49
    72c6:	7d 93       	st	X+, r23
    72c8:	70 e3       	ldi	r23, 0x30	; 48
    72ca:	2a 95       	dec	r18
    72cc:	e1 f7       	brne	.-8      	; 0x72c6 <__ftoa_engine+0x192>
    72ce:	11 24       	eor	r1, r1
    72d0:	ef 90       	pop	r14
    72d2:	ff 90       	pop	r15
    72d4:	0f 91       	pop	r16
    72d6:	1f 91       	pop	r17
    72d8:	cf 91       	pop	r28
    72da:	df 91       	pop	r29
    72dc:	99 27       	eor	r25, r25
    72de:	87 fd       	sbrc	r24, 7
    72e0:	90 95       	com	r25
    72e2:	08 95       	ret

000072e4 <strnlen_P>:
    72e4:	fc 01       	movw	r30, r24
    72e6:	05 90       	lpm	r0, Z+
    72e8:	61 50       	subi	r22, 0x01	; 1
    72ea:	70 40       	sbci	r23, 0x00	; 0
    72ec:	01 10       	cpse	r0, r1
    72ee:	d8 f7       	brcc	.-10     	; 0x72e6 <strnlen_P+0x2>
    72f0:	80 95       	com	r24
    72f2:	90 95       	com	r25
    72f4:	8e 0f       	add	r24, r30
    72f6:	9f 1f       	adc	r25, r31
    72f8:	08 95       	ret

000072fa <memcpy>:
    72fa:	fb 01       	movw	r30, r22
    72fc:	dc 01       	movw	r26, r24
    72fe:	02 c0       	rjmp	.+4      	; 0x7304 <memcpy+0xa>
    7300:	01 90       	ld	r0, Z+
    7302:	0d 92       	st	X+, r0
    7304:	41 50       	subi	r20, 0x01	; 1
    7306:	50 40       	sbci	r21, 0x00	; 0
    7308:	d8 f7       	brcc	.-10     	; 0x7300 <memcpy+0x6>
    730a:	08 95       	ret

0000730c <memset>:
    730c:	dc 01       	movw	r26, r24
    730e:	01 c0       	rjmp	.+2      	; 0x7312 <memset+0x6>
    7310:	6d 93       	st	X+, r22
    7312:	41 50       	subi	r20, 0x01	; 1
    7314:	50 40       	sbci	r21, 0x00	; 0
    7316:	e0 f7       	brcc	.-8      	; 0x7310 <memset+0x4>
    7318:	08 95       	ret

0000731a <strcasestr>:
    731a:	fb 01       	movw	r30, r22
    731c:	51 91       	ld	r21, Z+
    731e:	55 23       	and	r21, r21
    7320:	b1 f0       	breq	.+44     	; 0x734e <strcasestr+0x34>
    7322:	bf 01       	movw	r22, r30
    7324:	dc 01       	movw	r26, r24
    7326:	05 2e       	mov	r0, r21
    7328:	4d 91       	ld	r20, X+
    732a:	44 23       	and	r20, r20
    732c:	69 f0       	breq	.+26     	; 0x7348 <strcasestr+0x2e>
    732e:	10 d0       	rcall	.+32     	; 0x7350 <strcasestr+0x36>
    7330:	d9 f7       	brne	.-10     	; 0x7328 <strcasestr+0xe>
    7332:	cd 01       	movw	r24, r26
    7334:	01 90       	ld	r0, Z+
    7336:	00 20       	and	r0, r0
    7338:	49 f0       	breq	.+18     	; 0x734c <strcasestr+0x32>
    733a:	4d 91       	ld	r20, X+
    733c:	41 11       	cpse	r20, r1
    733e:	08 d0       	rcall	.+16     	; 0x7350 <strcasestr+0x36>
    7340:	c9 f3       	breq	.-14     	; 0x7334 <strcasestr+0x1a>
    7342:	fb 01       	movw	r30, r22
    7344:	41 11       	cpse	r20, r1
    7346:	ee cf       	rjmp	.-36     	; 0x7324 <strcasestr+0xa>
    7348:	81 e0       	ldi	r24, 0x01	; 1
    734a:	90 e0       	ldi	r25, 0x00	; 0
    734c:	01 97       	sbiw	r24, 0x01	; 1
    734e:	08 95       	ret
    7350:	40 25       	eor	r20, r0
    7352:	39 f0       	breq	.+14     	; 0x7362 <strcasestr+0x48>
    7354:	40 32       	cpi	r20, 0x20	; 32
    7356:	29 f4       	brne	.+10     	; 0x7362 <strcasestr+0x48>
    7358:	40 29       	or	r20, r0
    735a:	4b 57       	subi	r20, 0x7B	; 123
    735c:	46 5e       	subi	r20, 0xE6	; 230
    735e:	08 f0       	brcs	.+2      	; 0x7362 <strcasestr+0x48>
    7360:	18 94       	sez
    7362:	08 95       	ret

00007364 <strcat>:
    7364:	fb 01       	movw	r30, r22
    7366:	dc 01       	movw	r26, r24
    7368:	0d 90       	ld	r0, X+
    736a:	00 20       	and	r0, r0
    736c:	e9 f7       	brne	.-6      	; 0x7368 <strcat+0x4>
    736e:	11 97       	sbiw	r26, 0x01	; 1
    7370:	01 90       	ld	r0, Z+
    7372:	0d 92       	st	X+, r0
    7374:	00 20       	and	r0, r0
    7376:	e1 f7       	brne	.-8      	; 0x7370 <strcat+0xc>
    7378:	08 95       	ret

0000737a <strcpy>:
    737a:	fb 01       	movw	r30, r22
    737c:	dc 01       	movw	r26, r24
    737e:	01 90       	ld	r0, Z+
    7380:	0d 92       	st	X+, r0
    7382:	00 20       	and	r0, r0
    7384:	e1 f7       	brne	.-8      	; 0x737e <strcpy+0x4>
    7386:	08 95       	ret

00007388 <strncasecmp>:
    7388:	fb 01       	movw	r30, r22
    738a:	dc 01       	movw	r26, r24
    738c:	41 50       	subi	r20, 0x01	; 1
    738e:	50 40       	sbci	r21, 0x00	; 0
    7390:	88 f0       	brcs	.+34     	; 0x73b4 <strncasecmp+0x2c>
    7392:	8d 91       	ld	r24, X+
    7394:	81 34       	cpi	r24, 0x41	; 65
    7396:	1c f0       	brlt	.+6      	; 0x739e <strncasecmp+0x16>
    7398:	8b 35       	cpi	r24, 0x5B	; 91
    739a:	0c f4       	brge	.+2      	; 0x739e <strncasecmp+0x16>
    739c:	80 5e       	subi	r24, 0xE0	; 224
    739e:	61 91       	ld	r22, Z+
    73a0:	61 34       	cpi	r22, 0x41	; 65
    73a2:	1c f0       	brlt	.+6      	; 0x73aa <strncasecmp+0x22>
    73a4:	6b 35       	cpi	r22, 0x5B	; 91
    73a6:	0c f4       	brge	.+2      	; 0x73aa <strncasecmp+0x22>
    73a8:	60 5e       	subi	r22, 0xE0	; 224
    73aa:	86 1b       	sub	r24, r22
    73ac:	61 11       	cpse	r22, r1
    73ae:	71 f3       	breq	.-36     	; 0x738c <strncasecmp+0x4>
    73b0:	99 0b       	sbc	r25, r25
    73b2:	08 95       	ret
    73b4:	88 1b       	sub	r24, r24
    73b6:	fc cf       	rjmp	.-8      	; 0x73b0 <strncasecmp+0x28>

000073b8 <strnlen>:
    73b8:	fc 01       	movw	r30, r24
    73ba:	61 50       	subi	r22, 0x01	; 1
    73bc:	70 40       	sbci	r23, 0x00	; 0
    73be:	01 90       	ld	r0, Z+
    73c0:	01 10       	cpse	r0, r1
    73c2:	d8 f7       	brcc	.-10     	; 0x73ba <strnlen+0x2>
    73c4:	80 95       	com	r24
    73c6:	90 95       	com	r25
    73c8:	8e 0f       	add	r24, r30
    73ca:	9f 1f       	adc	r25, r31
    73cc:	08 95       	ret

000073ce <fputc>:
    73ce:	0f 93       	push	r16
    73d0:	1f 93       	push	r17
    73d2:	cf 93       	push	r28
    73d4:	df 93       	push	r29
    73d6:	fb 01       	movw	r30, r22
    73d8:	23 81       	ldd	r18, Z+3	; 0x03
    73da:	21 fd       	sbrc	r18, 1
    73dc:	03 c0       	rjmp	.+6      	; 0x73e4 <fputc+0x16>
    73de:	8f ef       	ldi	r24, 0xFF	; 255
    73e0:	9f ef       	ldi	r25, 0xFF	; 255
    73e2:	2c c0       	rjmp	.+88     	; 0x743c <fputc+0x6e>
    73e4:	22 ff       	sbrs	r18, 2
    73e6:	16 c0       	rjmp	.+44     	; 0x7414 <fputc+0x46>
    73e8:	46 81       	ldd	r20, Z+6	; 0x06
    73ea:	57 81       	ldd	r21, Z+7	; 0x07
    73ec:	24 81       	ldd	r18, Z+4	; 0x04
    73ee:	35 81       	ldd	r19, Z+5	; 0x05
    73f0:	42 17       	cp	r20, r18
    73f2:	53 07       	cpc	r21, r19
    73f4:	44 f4       	brge	.+16     	; 0x7406 <fputc+0x38>
    73f6:	a0 81       	ld	r26, Z
    73f8:	b1 81       	ldd	r27, Z+1	; 0x01
    73fa:	9d 01       	movw	r18, r26
    73fc:	2f 5f       	subi	r18, 0xFF	; 255
    73fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7400:	31 83       	std	Z+1, r19	; 0x01
    7402:	20 83       	st	Z, r18
    7404:	8c 93       	st	X, r24
    7406:	26 81       	ldd	r18, Z+6	; 0x06
    7408:	37 81       	ldd	r19, Z+7	; 0x07
    740a:	2f 5f       	subi	r18, 0xFF	; 255
    740c:	3f 4f       	sbci	r19, 0xFF	; 255
    740e:	37 83       	std	Z+7, r19	; 0x07
    7410:	26 83       	std	Z+6, r18	; 0x06
    7412:	14 c0       	rjmp	.+40     	; 0x743c <fputc+0x6e>
    7414:	8b 01       	movw	r16, r22
    7416:	ec 01       	movw	r28, r24
    7418:	fb 01       	movw	r30, r22
    741a:	00 84       	ldd	r0, Z+8	; 0x08
    741c:	f1 85       	ldd	r31, Z+9	; 0x09
    741e:	e0 2d       	mov	r30, r0
    7420:	19 95       	eicall
    7422:	89 2b       	or	r24, r25
    7424:	e1 f6       	brne	.-72     	; 0x73de <fputc+0x10>
    7426:	d8 01       	movw	r26, r16
    7428:	16 96       	adiw	r26, 0x06	; 6
    742a:	8d 91       	ld	r24, X+
    742c:	9c 91       	ld	r25, X
    742e:	17 97       	sbiw	r26, 0x07	; 7
    7430:	01 96       	adiw	r24, 0x01	; 1
    7432:	17 96       	adiw	r26, 0x07	; 7
    7434:	9c 93       	st	X, r25
    7436:	8e 93       	st	-X, r24
    7438:	16 97       	sbiw	r26, 0x06	; 6
    743a:	ce 01       	movw	r24, r28
    743c:	df 91       	pop	r29
    743e:	cf 91       	pop	r28
    7440:	1f 91       	pop	r17
    7442:	0f 91       	pop	r16
    7444:	08 95       	ret

00007446 <printf>:
    7446:	cf 93       	push	r28
    7448:	df 93       	push	r29
    744a:	cd b7       	in	r28, 0x3d	; 61
    744c:	de b7       	in	r29, 0x3e	; 62
    744e:	ae 01       	movw	r20, r28
    7450:	4a 5f       	subi	r20, 0xFA	; 250
    7452:	5f 4f       	sbci	r21, 0xFF	; 255
    7454:	fa 01       	movw	r30, r20
    7456:	61 91       	ld	r22, Z+
    7458:	71 91       	ld	r23, Z+
    745a:	af 01       	movw	r20, r30
    745c:	80 91 2b 1a 	lds	r24, 0x1A2B	; 0x801a2b <__iob+0x2>
    7460:	90 91 2c 1a 	lds	r25, 0x1A2C	; 0x801a2c <__iob+0x3>
    7464:	0e 94 74 31 	call	0x62e8	; 0x62e8 <vfprintf>
    7468:	df 91       	pop	r29
    746a:	cf 91       	pop	r28
    746c:	08 95       	ret

0000746e <puts>:
    746e:	0f 93       	push	r16
    7470:	1f 93       	push	r17
    7472:	cf 93       	push	r28
    7474:	df 93       	push	r29
    7476:	e0 91 2b 1a 	lds	r30, 0x1A2B	; 0x801a2b <__iob+0x2>
    747a:	f0 91 2c 1a 	lds	r31, 0x1A2C	; 0x801a2c <__iob+0x3>
    747e:	23 81       	ldd	r18, Z+3	; 0x03
    7480:	21 ff       	sbrs	r18, 1
    7482:	1b c0       	rjmp	.+54     	; 0x74ba <puts+0x4c>
    7484:	8c 01       	movw	r16, r24
    7486:	d0 e0       	ldi	r29, 0x00	; 0
    7488:	c0 e0       	ldi	r28, 0x00	; 0
    748a:	f8 01       	movw	r30, r16
    748c:	81 91       	ld	r24, Z+
    748e:	8f 01       	movw	r16, r30
    7490:	60 91 2b 1a 	lds	r22, 0x1A2B	; 0x801a2b <__iob+0x2>
    7494:	70 91 2c 1a 	lds	r23, 0x1A2C	; 0x801a2c <__iob+0x3>
    7498:	db 01       	movw	r26, r22
    749a:	18 96       	adiw	r26, 0x08	; 8
    749c:	ed 91       	ld	r30, X+
    749e:	fc 91       	ld	r31, X
    74a0:	19 97       	sbiw	r26, 0x09	; 9
    74a2:	88 23       	and	r24, r24
    74a4:	31 f0       	breq	.+12     	; 0x74b2 <puts+0x44>
    74a6:	19 95       	eicall
    74a8:	89 2b       	or	r24, r25
    74aa:	79 f3       	breq	.-34     	; 0x748a <puts+0x1c>
    74ac:	df ef       	ldi	r29, 0xFF	; 255
    74ae:	cf ef       	ldi	r28, 0xFF	; 255
    74b0:	ec cf       	rjmp	.-40     	; 0x748a <puts+0x1c>
    74b2:	8a e0       	ldi	r24, 0x0A	; 10
    74b4:	19 95       	eicall
    74b6:	89 2b       	or	r24, r25
    74b8:	19 f0       	breq	.+6      	; 0x74c0 <puts+0x52>
    74ba:	8f ef       	ldi	r24, 0xFF	; 255
    74bc:	9f ef       	ldi	r25, 0xFF	; 255
    74be:	02 c0       	rjmp	.+4      	; 0x74c4 <puts+0x56>
    74c0:	8d 2f       	mov	r24, r29
    74c2:	9c 2f       	mov	r25, r28
    74c4:	df 91       	pop	r29
    74c6:	cf 91       	pop	r28
    74c8:	1f 91       	pop	r17
    74ca:	0f 91       	pop	r16
    74cc:	08 95       	ret

000074ce <sprintf>:
    74ce:	0f 93       	push	r16
    74d0:	1f 93       	push	r17
    74d2:	cf 93       	push	r28
    74d4:	df 93       	push	r29
    74d6:	cd b7       	in	r28, 0x3d	; 61
    74d8:	de b7       	in	r29, 0x3e	; 62
    74da:	2e 97       	sbiw	r28, 0x0e	; 14
    74dc:	0f b6       	in	r0, 0x3f	; 63
    74de:	f8 94       	cli
    74e0:	de bf       	out	0x3e, r29	; 62
    74e2:	0f be       	out	0x3f, r0	; 63
    74e4:	cd bf       	out	0x3d, r28	; 61
    74e6:	0e 89       	ldd	r16, Y+22	; 0x16
    74e8:	1f 89       	ldd	r17, Y+23	; 0x17
    74ea:	86 e0       	ldi	r24, 0x06	; 6
    74ec:	8c 83       	std	Y+4, r24	; 0x04
    74ee:	1a 83       	std	Y+2, r17	; 0x02
    74f0:	09 83       	std	Y+1, r16	; 0x01
    74f2:	8f ef       	ldi	r24, 0xFF	; 255
    74f4:	9f e7       	ldi	r25, 0x7F	; 127
    74f6:	9e 83       	std	Y+6, r25	; 0x06
    74f8:	8d 83       	std	Y+5, r24	; 0x05
    74fa:	ae 01       	movw	r20, r28
    74fc:	46 5e       	subi	r20, 0xE6	; 230
    74fe:	5f 4f       	sbci	r21, 0xFF	; 255
    7500:	68 8d       	ldd	r22, Y+24	; 0x18
    7502:	79 8d       	ldd	r23, Y+25	; 0x19
    7504:	ce 01       	movw	r24, r28
    7506:	01 96       	adiw	r24, 0x01	; 1
    7508:	0e 94 74 31 	call	0x62e8	; 0x62e8 <vfprintf>
    750c:	ef 81       	ldd	r30, Y+7	; 0x07
    750e:	f8 85       	ldd	r31, Y+8	; 0x08
    7510:	e0 0f       	add	r30, r16
    7512:	f1 1f       	adc	r31, r17
    7514:	10 82       	st	Z, r1
    7516:	2e 96       	adiw	r28, 0x0e	; 14
    7518:	0f b6       	in	r0, 0x3f	; 63
    751a:	f8 94       	cli
    751c:	de bf       	out	0x3e, r29	; 62
    751e:	0f be       	out	0x3f, r0	; 63
    7520:	cd bf       	out	0x3d, r28	; 61
    7522:	df 91       	pop	r29
    7524:	cf 91       	pop	r28
    7526:	1f 91       	pop	r17
    7528:	0f 91       	pop	r16
    752a:	08 95       	ret

0000752c <__ultoa_invert>:
    752c:	fa 01       	movw	r30, r20
    752e:	aa 27       	eor	r26, r26
    7530:	28 30       	cpi	r18, 0x08	; 8
    7532:	51 f1       	breq	.+84     	; 0x7588 <__ultoa_invert+0x5c>
    7534:	20 31       	cpi	r18, 0x10	; 16
    7536:	81 f1       	breq	.+96     	; 0x7598 <__ultoa_invert+0x6c>
    7538:	e8 94       	clt
    753a:	6f 93       	push	r22
    753c:	6e 7f       	andi	r22, 0xFE	; 254
    753e:	6e 5f       	subi	r22, 0xFE	; 254
    7540:	7f 4f       	sbci	r23, 0xFF	; 255
    7542:	8f 4f       	sbci	r24, 0xFF	; 255
    7544:	9f 4f       	sbci	r25, 0xFF	; 255
    7546:	af 4f       	sbci	r26, 0xFF	; 255
    7548:	b1 e0       	ldi	r27, 0x01	; 1
    754a:	3e d0       	rcall	.+124    	; 0x75c8 <__ultoa_invert+0x9c>
    754c:	b4 e0       	ldi	r27, 0x04	; 4
    754e:	3c d0       	rcall	.+120    	; 0x75c8 <__ultoa_invert+0x9c>
    7550:	67 0f       	add	r22, r23
    7552:	78 1f       	adc	r23, r24
    7554:	89 1f       	adc	r24, r25
    7556:	9a 1f       	adc	r25, r26
    7558:	a1 1d       	adc	r26, r1
    755a:	68 0f       	add	r22, r24
    755c:	79 1f       	adc	r23, r25
    755e:	8a 1f       	adc	r24, r26
    7560:	91 1d       	adc	r25, r1
    7562:	a1 1d       	adc	r26, r1
    7564:	6a 0f       	add	r22, r26
    7566:	71 1d       	adc	r23, r1
    7568:	81 1d       	adc	r24, r1
    756a:	91 1d       	adc	r25, r1
    756c:	a1 1d       	adc	r26, r1
    756e:	20 d0       	rcall	.+64     	; 0x75b0 <__ultoa_invert+0x84>
    7570:	09 f4       	brne	.+2      	; 0x7574 <__ultoa_invert+0x48>
    7572:	68 94       	set
    7574:	3f 91       	pop	r19
    7576:	2a e0       	ldi	r18, 0x0A	; 10
    7578:	26 9f       	mul	r18, r22
    757a:	11 24       	eor	r1, r1
    757c:	30 19       	sub	r19, r0
    757e:	30 5d       	subi	r19, 0xD0	; 208
    7580:	31 93       	st	Z+, r19
    7582:	de f6       	brtc	.-74     	; 0x753a <__ultoa_invert+0xe>
    7584:	cf 01       	movw	r24, r30
    7586:	08 95       	ret
    7588:	46 2f       	mov	r20, r22
    758a:	47 70       	andi	r20, 0x07	; 7
    758c:	40 5d       	subi	r20, 0xD0	; 208
    758e:	41 93       	st	Z+, r20
    7590:	b3 e0       	ldi	r27, 0x03	; 3
    7592:	0f d0       	rcall	.+30     	; 0x75b2 <__ultoa_invert+0x86>
    7594:	c9 f7       	brne	.-14     	; 0x7588 <__ultoa_invert+0x5c>
    7596:	f6 cf       	rjmp	.-20     	; 0x7584 <__ultoa_invert+0x58>
    7598:	46 2f       	mov	r20, r22
    759a:	4f 70       	andi	r20, 0x0F	; 15
    759c:	40 5d       	subi	r20, 0xD0	; 208
    759e:	4a 33       	cpi	r20, 0x3A	; 58
    75a0:	18 f0       	brcs	.+6      	; 0x75a8 <__ultoa_invert+0x7c>
    75a2:	49 5d       	subi	r20, 0xD9	; 217
    75a4:	31 fd       	sbrc	r19, 1
    75a6:	40 52       	subi	r20, 0x20	; 32
    75a8:	41 93       	st	Z+, r20
    75aa:	02 d0       	rcall	.+4      	; 0x75b0 <__ultoa_invert+0x84>
    75ac:	a9 f7       	brne	.-22     	; 0x7598 <__ultoa_invert+0x6c>
    75ae:	ea cf       	rjmp	.-44     	; 0x7584 <__ultoa_invert+0x58>
    75b0:	b4 e0       	ldi	r27, 0x04	; 4
    75b2:	a6 95       	lsr	r26
    75b4:	97 95       	ror	r25
    75b6:	87 95       	ror	r24
    75b8:	77 95       	ror	r23
    75ba:	67 95       	ror	r22
    75bc:	ba 95       	dec	r27
    75be:	c9 f7       	brne	.-14     	; 0x75b2 <__ultoa_invert+0x86>
    75c0:	00 97       	sbiw	r24, 0x00	; 0
    75c2:	61 05       	cpc	r22, r1
    75c4:	71 05       	cpc	r23, r1
    75c6:	08 95       	ret
    75c8:	9b 01       	movw	r18, r22
    75ca:	ac 01       	movw	r20, r24
    75cc:	0a 2e       	mov	r0, r26
    75ce:	06 94       	lsr	r0
    75d0:	57 95       	ror	r21
    75d2:	47 95       	ror	r20
    75d4:	37 95       	ror	r19
    75d6:	27 95       	ror	r18
    75d8:	ba 95       	dec	r27
    75da:	c9 f7       	brne	.-14     	; 0x75ce <__ultoa_invert+0xa2>
    75dc:	62 0f       	add	r22, r18
    75de:	73 1f       	adc	r23, r19
    75e0:	84 1f       	adc	r24, r20
    75e2:	95 1f       	adc	r25, r21
    75e4:	a0 1d       	adc	r26, r0
    75e6:	08 95       	ret

000075e8 <_exit>:
    75e8:	f8 94       	cli

000075ea <__stop_program>:
    75ea:	ff cf       	rjmp	.-2      	; 0x75ea <__stop_program>
