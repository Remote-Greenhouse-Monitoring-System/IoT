
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000054e  00800200  00005f54  00005fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000fed  0080074e  0080074e  00006536  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006536  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000960  00000000  00000000  000065d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000be60  00000000  00000000  00006f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d4e  00000000  00000000  00012d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005d55  00000000  00000000  00015ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002288  00000000  00000000  0001b838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c0a  00000000  00000000  0001dac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000af81  00000000  00000000  000216ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f8  00000000  00000000  0002c64b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5d c4       	rjmp	.+2234   	; 0x8ec <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 80 20 	jmp	0x4100	; 0x4100 <__vector_25>
      68:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 16 21 	jmp	0x422c	; 0x422c <__vector_36>
      94:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <__vector_51>
      d0:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__vector_54>
      dc:	0c 94 94 22 	jmp	0x4528	; 0x4528 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7a 17       	cp	r23, r26
      e6:	7a 17       	cp	r23, r26
      e8:	7a 17       	cp	r23, r26
      ea:	b1 17       	cp	r27, r17
      ec:	b9 17       	cp	r27, r25
      ee:	ce 17       	cp	r28, r30
      f0:	7a 17       	cp	r23, r26
      f2:	7a 17       	cp	r23, r26
      f4:	b1 17       	cp	r27, r17
      f6:	b9 17       	cp	r27, r25
      f8:	d5 25       	eor	r29, r5
      fa:	45 26       	eor	r4, r21
      fc:	45 26       	eor	r4, r21
      fe:	45 26       	eor	r4, r21
     100:	45 26       	eor	r4, r21
     102:	45 26       	eor	r4, r21
     104:	45 26       	eor	r4, r21
     106:	45 26       	eor	r4, r21
     108:	d5 25       	eor	r29, r5
     10a:	45 26       	eor	r4, r21
     10c:	45 26       	eor	r4, r21
     10e:	45 26       	eor	r4, r21
     110:	45 26       	eor	r4, r21
     112:	45 26       	eor	r4, r21
     114:	45 26       	eor	r4, r21
     116:	45 26       	eor	r4, r21
     118:	d7 25       	eor	r29, r7
     11a:	45 26       	eor	r4, r21
     11c:	45 26       	eor	r4, r21
     11e:	45 26       	eor	r4, r21
     120:	45 26       	eor	r4, r21
     122:	45 26       	eor	r4, r21
     124:	45 26       	eor	r4, r21
     126:	45 26       	eor	r4, r21
     128:	45 26       	eor	r4, r21
     12a:	45 26       	eor	r4, r21
     12c:	45 26       	eor	r4, r21
     12e:	45 26       	eor	r4, r21
     130:	45 26       	eor	r4, r21
     132:	45 26       	eor	r4, r21
     134:	45 26       	eor	r4, r21
     136:	45 26       	eor	r4, r21
     138:	d7 25       	eor	r29, r7
     13a:	45 26       	eor	r4, r21
     13c:	45 26       	eor	r4, r21
     13e:	45 26       	eor	r4, r21
     140:	45 26       	eor	r4, r21
     142:	45 26       	eor	r4, r21
     144:	45 26       	eor	r4, r21
     146:	45 26       	eor	r4, r21
     148:	45 26       	eor	r4, r21
     14a:	45 26       	eor	r4, r21
     14c:	45 26       	eor	r4, r21
     14e:	45 26       	eor	r4, r21
     150:	45 26       	eor	r4, r21
     152:	45 26       	eor	r4, r21
     154:	45 26       	eor	r4, r21
     156:	45 26       	eor	r4, r21
     158:	41 26       	eor	r4, r17
     15a:	45 26       	eor	r4, r21
     15c:	45 26       	eor	r4, r21
     15e:	45 26       	eor	r4, r21
     160:	45 26       	eor	r4, r21
     162:	45 26       	eor	r4, r21
     164:	45 26       	eor	r4, r21
     166:	45 26       	eor	r4, r21
     168:	0c 26       	eor	r0, r28
     16a:	45 26       	eor	r4, r21
     16c:	45 26       	eor	r4, r21
     16e:	45 26       	eor	r4, r21
     170:	45 26       	eor	r4, r21
     172:	45 26       	eor	r4, r21
     174:	45 26       	eor	r4, r21
     176:	45 26       	eor	r4, r21
     178:	45 26       	eor	r4, r21
     17a:	45 26       	eor	r4, r21
     17c:	45 26       	eor	r4, r21
     17e:	45 26       	eor	r4, r21
     180:	45 26       	eor	r4, r21
     182:	45 26       	eor	r4, r21
     184:	45 26       	eor	r4, r21
     186:	45 26       	eor	r4, r21
     188:	00 26       	eor	r0, r16
     18a:	45 26       	eor	r4, r21
     18c:	45 26       	eor	r4, r21
     18e:	45 26       	eor	r4, r21
     190:	45 26       	eor	r4, r21
     192:	45 26       	eor	r4, r21
     194:	45 26       	eor	r4, r21
     196:	45 26       	eor	r4, r21
     198:	24 26       	eor	r2, r20

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <prvCheckTasksWaitingTermination>
     2a0:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	5b d2       	rcall	.+1206   	; 0x760 <vPortYield>
     2aa:	0e 94 f7 17 	call	0x2fee	; 0x2fee <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 f7 14 	call	0x29ee	; 0x29ee <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 43 17 	call	0x2e86	; 0x2e86 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	17 e0       	ldi	r17, 0x07	; 7
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e4 e5       	ldi	r30, 0x54	; 84
     2e6:	ff e5       	ldi	r31, 0x5F	; 95
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ae 34       	cpi	r26, 0x4E	; 78
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	27 e1       	ldi	r18, 0x17	; 23
     2fa:	ae e4       	ldi	r26, 0x4E	; 78
     2fc:	b7 e0       	ldi	r27, 0x07	; 7
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ab 33       	cpi	r26, 0x3B	; 59
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 2c 1a 	call	0x3458	; 0x3458 <main>
     30c:	0c 94 a8 2f 	jmp	0x5f50	; 0x5f50 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     312:	ea e5       	ldi	r30, 0x5A	; 90
     314:	f7 e0       	ldi	r31, 0x07	; 7
     316:	ae e5       	ldi	r26, 0x5E	; 94
     318:	b7 e0       	ldi	r27, 0x07	; 7
     31a:	b1 83       	std	Z+1, r27	; 0x01
     31c:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     31e:	13 82       	std	Z+3, r1	; 0x03
     320:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     322:	e6 e0       	ldi	r30, 0x06	; 6
     324:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     326:	f0 93 59 07 	sts	0x0759, r31	; 0x800759 <pxEnd+0x1>
     32a:	e0 93 58 07 	sts	0x0758, r30	; 0x800758 <pxEnd>
    pxEnd->xBlockSize = 0;
     32e:	13 82       	std	Z+3, r1	; 0x03
     330:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     332:	11 82       	std	Z+1, r1	; 0x01
     334:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     336:	88 ea       	ldi	r24, 0xA8	; 168
     338:	9d e0       	ldi	r25, 0x0D	; 13
     33a:	13 96       	adiw	r26, 0x03	; 3
     33c:	9c 93       	st	X, r25
     33e:	8e 93       	st	-X, r24
     340:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     342:	ed 93       	st	X+, r30
     344:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     346:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <xMinimumEverFreeBytesRemaining+0x1>
     34a:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     34e:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <xFreeBytesRemaining+0x1>
     352:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e8       	ldi	r25, 0x80	; 128
     35a:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <__data_end+0x1>
     35e:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <__data_end>
     362:	08 95       	ret

00000364 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     36a:	aa e5       	ldi	r26, 0x5A	; 90
     36c:	b7 e0       	ldi	r27, 0x07	; 7
     36e:	01 c0       	rjmp	.+2      	; 0x372 <prvInsertBlockIntoFreeList+0xe>
     370:	df 01       	movw	r26, r30
     372:	ed 91       	ld	r30, X+
     374:	fc 91       	ld	r31, X
     376:	11 97       	sbiw	r26, 0x01	; 1
     378:	ec 17       	cp	r30, r28
     37a:	fd 07       	cpc	r31, r29
     37c:	c8 f3       	brcs	.-14     	; 0x370 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     37e:	12 96       	adiw	r26, 0x02	; 2
     380:	8d 91       	ld	r24, X+
     382:	9c 91       	ld	r25, X
     384:	13 97       	sbiw	r26, 0x03	; 3
     386:	9d 01       	movw	r18, r26
     388:	28 0f       	add	r18, r24
     38a:	39 1f       	adc	r19, r25
     38c:	c2 17       	cp	r28, r18
     38e:	d3 07       	cpc	r29, r19
     390:	49 f4       	brne	.+18     	; 0x3a4 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     392:	2a 81       	ldd	r18, Y+2	; 0x02
     394:	3b 81       	ldd	r19, Y+3	; 0x03
     396:	82 0f       	add	r24, r18
     398:	93 1f       	adc	r25, r19
     39a:	13 96       	adiw	r26, 0x03	; 3
     39c:	9c 93       	st	X, r25
     39e:	8e 93       	st	-X, r24
     3a0:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     3a2:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	9b 81       	ldd	r25, Y+3	; 0x03
     3a8:	9e 01       	movw	r18, r28
     3aa:	28 0f       	add	r18, r24
     3ac:	39 1f       	adc	r19, r25
     3ae:	e2 17       	cp	r30, r18
     3b0:	f3 07       	cpc	r31, r19
     3b2:	c1 f4       	brne	.+48     	; 0x3e4 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     3b4:	20 91 58 07 	lds	r18, 0x0758	; 0x800758 <pxEnd>
     3b8:	30 91 59 07 	lds	r19, 0x0759	; 0x800759 <pxEnd+0x1>
     3bc:	e2 17       	cp	r30, r18
     3be:	f3 07       	cpc	r31, r19
     3c0:	71 f0       	breq	.+28     	; 0x3de <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     3c2:	22 81       	ldd	r18, Z+2	; 0x02
     3c4:	33 81       	ldd	r19, Z+3	; 0x03
     3c6:	82 0f       	add	r24, r18
     3c8:	93 1f       	adc	r25, r19
     3ca:	9b 83       	std	Y+3, r25	; 0x03
     3cc:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     3ce:	ed 91       	ld	r30, X+
     3d0:	fc 91       	ld	r31, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	80 81       	ld	r24, Z
     3d6:	91 81       	ldd	r25, Z+1	; 0x01
     3d8:	99 83       	std	Y+1, r25	; 0x01
     3da:	88 83       	st	Y, r24
     3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     3de:	39 83       	std	Y+1, r19	; 0x01
     3e0:	28 83       	st	Y, r18
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     3e4:	f9 83       	std	Y+1, r31	; 0x01
     3e6:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     3e8:	ca 17       	cp	r28, r26
     3ea:	db 07       	cpc	r29, r27
     3ec:	11 f0       	breq	.+4      	; 0x3f2 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     3ee:	cd 93       	st	X+, r28
     3f0:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     406:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     40a:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <pxEnd>
     40e:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <pxEnd+0x1>
     412:	89 2b       	or	r24, r25
     414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
        {
            prvHeapInit();
     416:	7d df       	rcall	.-262    	; 0x312 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     418:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <__data_end>
     41c:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <__data_end+0x1>
     420:	80 23       	and	r24, r16
     422:	91 23       	and	r25, r17
     424:	89 2b       	or	r24, r25
     426:	09 f0       	breq	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	76 c0       	rjmp	.+236    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     42a:	01 15       	cp	r16, r1
     42c:	11 05       	cpc	r17, r1
     42e:	49 f0       	breq	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     430:	c8 01       	movw	r24, r16
     432:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     434:	08 17       	cp	r16, r24
     436:	19 07       	cpc	r17, r25
     438:	18 f0       	brcs	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     43a:	00 e0       	ldi	r16, 0x00	; 0
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     440:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     442:	01 15       	cp	r16, r1
     444:	11 05       	cpc	r17, r1
     446:	09 f4       	brne	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	69 c0       	rjmp	.+210    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     44a:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <xFreeBytesRemaining>
     44e:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <xFreeBytesRemaining+0x1>
     452:	80 17       	cp	r24, r16
     454:	91 07       	cpc	r25, r17
     456:	08 f4       	brcc	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	64 c0       	rjmp	.+200    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     45a:	c0 91 5a 07 	lds	r28, 0x075A	; 0x80075a <xStart>
     45e:	d0 91 5b 07 	lds	r29, 0x075B	; 0x80075b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     462:	ea e5       	ldi	r30, 0x5A	; 90
     464:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     466:	02 c0       	rjmp	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
                {
                    pxPreviousBlock = pxBlock;
     468:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     46a:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     46c:	8a 81       	ldd	r24, Y+2	; 0x02
     46e:	9b 81       	ldd	r25, Y+3	; 0x03
     470:	80 17       	cp	r24, r16
     472:	91 07       	cpc	r25, r17
     474:	20 f4       	brcc	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     476:	88 81       	ld	r24, Y
     478:	99 81       	ldd	r25, Y+1	; 0x01
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	a9 f7       	brne	.-22     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     47e:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <pxEnd>
     482:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <pxEnd+0x1>
     486:	c8 17       	cp	r28, r24
     488:	d9 07       	cpc	r29, r25
     48a:	09 f4       	brne	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	4d c0       	rjmp	.+154    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     48e:	e0 80       	ld	r14, Z
     490:	f1 80       	ldd	r15, Z+1	; 0x01
     492:	84 e0       	ldi	r24, 0x04	; 4
     494:	e8 0e       	add	r14, r24
     496:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     498:	88 81       	ld	r24, Y
     49a:	99 81       	ldd	r25, Y+1	; 0x01
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4a0:	2a 81       	ldd	r18, Y+2	; 0x02
     4a2:	3b 81       	ldd	r19, Y+3	; 0x03
     4a4:	20 1b       	sub	r18, r16
     4a6:	31 0b       	sbc	r19, r17
     4a8:	29 30       	cpi	r18, 0x09	; 9
     4aa:	31 05       	cpc	r19, r1
     4ac:	48 f0       	brcs	.+18     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     4ae:	ce 01       	movw	r24, r28
     4b0:	80 0f       	add	r24, r16
     4b2:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     4b4:	fc 01       	movw	r30, r24
     4b6:	33 83       	std	Z+3, r19	; 0x03
     4b8:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     4ba:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     4bc:	0a 83       	std	Y+2, r16	; 0x02
     4be:	52 df       	rcall	.-348    	; 0x364 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     4c0:	2a 81       	ldd	r18, Y+2	; 0x02
     4c2:	3b 81       	ldd	r19, Y+3	; 0x03
     4c4:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <xFreeBytesRemaining>
     4c8:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <xFreeBytesRemaining+0x1>
     4cc:	82 1b       	sub	r24, r18
     4ce:	93 0b       	sbc	r25, r19
     4d0:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <xFreeBytesRemaining+0x1>
     4d4:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     4d8:	40 91 54 07 	lds	r20, 0x0754	; 0x800754 <xMinimumEverFreeBytesRemaining>
     4dc:	50 91 55 07 	lds	r21, 0x0755	; 0x800755 <xMinimumEverFreeBytesRemaining+0x1>
     4e0:	84 17       	cp	r24, r20
     4e2:	95 07       	cpc	r25, r21
     4e4:	20 f4       	brcc	.+8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     4e6:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <xMinimumEverFreeBytesRemaining+0x1>
     4ea:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     4ee:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <__data_end>
     4f2:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <__data_end+0x1>
     4f6:	28 2b       	or	r18, r24
     4f8:	39 2b       	or	r19, r25
     4fa:	3b 83       	std	Y+3, r19	; 0x03
     4fc:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     4fe:	19 82       	std	Y+1, r1	; 0x01
     500:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     502:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <xNumberOfSuccessfulAllocations>
     506:	90 91 53 07 	lds	r25, 0x0753	; 0x800753 <xNumberOfSuccessfulAllocations+0x1>
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	90 93 53 07 	sts	0x0753, r25	; 0x800753 <xNumberOfSuccessfulAllocations+0x1>
     510:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <xNumberOfSuccessfulAllocations>
     514:	0b c0       	rjmp	.+22     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     516:	e1 2c       	mov	r14, r1
     518:	f1 2c       	mov	r15, r1
     51a:	08 c0       	rjmp	.+16     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     51c:	e1 2c       	mov	r14, r1
     51e:	f1 2c       	mov	r15, r1
     520:	05 c0       	rjmp	.+10     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     522:	e1 2c       	mov	r14, r1
     524:	f1 2c       	mov	r15, r1
     526:	02 c0       	rjmp	.+4      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     528:	e1 2c       	mov	r14, r1
     52a:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     52c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     530:	e1 14       	cp	r14, r1
     532:	f1 04       	cpc	r15, r1
     534:	11 f4       	brne	.+4      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     536:	0e 94 03 18 	call	0x3006	; 0x3006 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     53a:	c7 01       	movw	r24, r14
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     552:	00 97       	sbiw	r24, 0x00	; 0
     554:	91 f1       	breq	.+100    	; 0x5ba <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     556:	ec 01       	movw	r28, r24
     558:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     55a:	4a 81       	ldd	r20, Y+2	; 0x02
     55c:	5b 81       	ldd	r21, Y+3	; 0x03
     55e:	20 91 4e 07 	lds	r18, 0x074E	; 0x80074e <__data_end>
     562:	30 91 4f 07 	lds	r19, 0x074F	; 0x80074f <__data_end+0x1>
     566:	ba 01       	movw	r22, r20
     568:	62 23       	and	r22, r18
     56a:	73 23       	and	r23, r19
     56c:	67 2b       	or	r22, r23
     56e:	29 f1       	breq	.+74     	; 0x5ba <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     570:	68 81       	ld	r22, Y
     572:	79 81       	ldd	r23, Y+1	; 0x01
     574:	67 2b       	or	r22, r23
     576:	09 f5       	brne	.+66     	; 0x5ba <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     578:	20 95       	com	r18
     57a:	30 95       	com	r19
     57c:	24 23       	and	r18, r20
     57e:	35 23       	and	r19, r21
     580:	3b 83       	std	Y+3, r19	; 0x03
     582:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     584:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	9b 81       	ldd	r25, Y+3	; 0x03
     58c:	20 91 56 07 	lds	r18, 0x0756	; 0x800756 <xFreeBytesRemaining>
     590:	30 91 57 07 	lds	r19, 0x0757	; 0x800757 <xFreeBytesRemaining+0x1>
     594:	82 0f       	add	r24, r18
     596:	93 1f       	adc	r25, r19
     598:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <xFreeBytesRemaining+0x1>
     59c:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5a0:	ce 01       	movw	r24, r28
     5a2:	e0 de       	rcall	.-576    	; 0x364 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     5a4:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <xNumberOfSuccessfulFrees>
     5a8:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <xNumberOfSuccessfulFrees+0x1>
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <xNumberOfSuccessfulFrees+0x1>
     5b2:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     5b6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	08 95       	ret

000005c4 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     5c4:	fc 01       	movw	r30, r24
     5c6:	03 96       	adiw	r24, 0x03	; 3
     5c8:	92 83       	std	Z+2, r25	; 0x02
     5ca:	81 83       	std	Z+1, r24	; 0x01
     5cc:	4f ef       	ldi	r20, 0xFF	; 255
     5ce:	5f ef       	ldi	r21, 0xFF	; 255
     5d0:	ba 01       	movw	r22, r20
     5d2:	43 83       	std	Z+3, r20	; 0x03
     5d4:	54 83       	std	Z+4, r21	; 0x04
     5d6:	65 83       	std	Z+5, r22	; 0x05
     5d8:	76 83       	std	Z+6, r23	; 0x06
     5da:	90 87       	std	Z+8, r25	; 0x08
     5dc:	87 83       	std	Z+7, r24	; 0x07
     5de:	92 87       	std	Z+10, r25	; 0x0a
     5e0:	81 87       	std	Z+9, r24	; 0x09
     5e2:	10 82       	st	Z, r1
     5e4:	08 95       	ret

000005e6 <vListInitialiseItem>:
     5e6:	fc 01       	movw	r30, r24
     5e8:	13 86       	std	Z+11, r1	; 0x0b
     5ea:	12 86       	std	Z+10, r1	; 0x0a
     5ec:	08 95       	ret

000005ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     5f8:	08 81       	ld	r16, Y
     5fa:	19 81       	ldd	r17, Y+1	; 0x01
     5fc:	2a 81       	ldd	r18, Y+2	; 0x02
     5fe:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     600:	0f 3f       	cpi	r16, 0xFF	; 255
     602:	4f ef       	ldi	r20, 0xFF	; 255
     604:	14 07       	cpc	r17, r20
     606:	24 07       	cpc	r18, r20
     608:	34 07       	cpc	r19, r20
     60a:	21 f4       	brne	.+8      	; 0x614 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     60c:	fc 01       	movw	r30, r24
     60e:	a1 85       	ldd	r26, Z+9	; 0x09
     610:	b2 85       	ldd	r27, Z+10	; 0x0a
     612:	11 c0       	rjmp	.+34     	; 0x636 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     614:	dc 01       	movw	r26, r24
     616:	13 96       	adiw	r26, 0x03	; 3
     618:	01 c0       	rjmp	.+2      	; 0x61c <vListInsert+0x2e>
     61a:	df 01       	movw	r26, r30
     61c:	14 96       	adiw	r26, 0x04	; 4
     61e:	ed 91       	ld	r30, X+
     620:	fc 91       	ld	r31, X
     622:	15 97       	sbiw	r26, 0x05	; 5
     624:	40 81       	ld	r20, Z
     626:	51 81       	ldd	r21, Z+1	; 0x01
     628:	62 81       	ldd	r22, Z+2	; 0x02
     62a:	73 81       	ldd	r23, Z+3	; 0x03
     62c:	04 17       	cp	r16, r20
     62e:	15 07       	cpc	r17, r21
     630:	26 07       	cpc	r18, r22
     632:	37 07       	cpc	r19, r23
     634:	90 f7       	brcc	.-28     	; 0x61a <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     636:	14 96       	adiw	r26, 0x04	; 4
     638:	ed 91       	ld	r30, X+
     63a:	fc 91       	ld	r31, X
     63c:	15 97       	sbiw	r26, 0x05	; 5
     63e:	fd 83       	std	Y+5, r31	; 0x05
     640:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     642:	d7 83       	std	Z+7, r29	; 0x07
     644:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     646:	bf 83       	std	Y+7, r27	; 0x07
     648:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     64a:	15 96       	adiw	r26, 0x05	; 5
     64c:	dc 93       	st	X, r29
     64e:	ce 93       	st	-X, r28
     650:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     652:	9b 87       	std	Y+11, r25	; 0x0b
     654:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     656:	fc 01       	movw	r30, r24
     658:	20 81       	ld	r18, Z
     65a:	2f 5f       	subi	r18, 0xFF	; 255
     65c:	20 83       	st	Z, r18
}
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     66e:	a2 85       	ldd	r26, Z+10	; 0x0a
     670:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     672:	c4 81       	ldd	r28, Z+4	; 0x04
     674:	d5 81       	ldd	r29, Z+5	; 0x05
     676:	86 81       	ldd	r24, Z+6	; 0x06
     678:	97 81       	ldd	r25, Z+7	; 0x07
     67a:	9f 83       	std	Y+7, r25	; 0x07
     67c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     67e:	c6 81       	ldd	r28, Z+6	; 0x06
     680:	d7 81       	ldd	r29, Z+7	; 0x07
     682:	84 81       	ldd	r24, Z+4	; 0x04
     684:	95 81       	ldd	r25, Z+5	; 0x05
     686:	9d 83       	std	Y+5, r25	; 0x05
     688:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     68a:	11 96       	adiw	r26, 0x01	; 1
     68c:	8d 91       	ld	r24, X+
     68e:	9c 91       	ld	r25, X
     690:	12 97       	sbiw	r26, 0x02	; 2
     692:	e8 17       	cp	r30, r24
     694:	f9 07       	cpc	r31, r25
     696:	31 f4       	brne	.+12     	; 0x6a4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     698:	86 81       	ldd	r24, Z+6	; 0x06
     69a:	97 81       	ldd	r25, Z+7	; 0x07
     69c:	12 96       	adiw	r26, 0x02	; 2
     69e:	9c 93       	st	X, r25
     6a0:	8e 93       	st	-X, r24
     6a2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6a4:	13 86       	std	Z+11, r1	; 0x0b
     6a6:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     6a8:	8c 91       	ld	r24, X
     6aa:	81 50       	subi	r24, 0x01	; 1
     6ac:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     6ae:	8c 91       	ld	r24, X
}
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     6b6:	a8 95       	wdr
     6b8:	90 ec       	ldi	r25, 0xC0	; 192
     6ba:	88 e1       	ldi	r24, 0x18	; 24
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	a8 95       	wdr
     6c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     6cc:	08 95       	ret

000006ce <pxPortInitialiseStack>:
     6ce:	fc 01       	movw	r30, r24
     6d0:	60 83       	st	Z, r22
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	70 83       	st	Z, r23
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	10 82       	st	Z, r1
     6da:	31 97       	sbiw	r30, 0x01	; 1
     6dc:	10 82       	st	Z, r1
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	20 e8       	ldi	r18, 0x80	; 128
     6e2:	20 83       	st	Z, r18
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	10 82       	st	Z, r1
     6e8:	31 97       	sbiw	r30, 0x01	; 1
     6ea:	10 82       	st	Z, r1
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	10 82       	st	Z, r1
     6f0:	77 97       	sbiw	r30, 0x17	; 23
     6f2:	40 83       	st	Z, r20
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	50 83       	st	Z, r21
     6f8:	86 97       	sbiw	r24, 0x26	; 38
     6fa:	08 95       	ret

000006fc <xPortStartScheduler>:
     6fc:	dc df       	rcall	.-72     	; 0x6b6 <prvSetupTimerInterrupt>
     6fe:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     702:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     706:	cd 91       	ld	r28, X+
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	dd 91       	ld	r29, X+
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	7f 90       	pop	r7
     740:	6f 90       	pop	r6
     742:	5f 90       	pop	r5
     744:	4f 90       	pop	r4
     746:	3f 90       	pop	r3
     748:	2f 90       	pop	r2
     74a:	1f 90       	pop	r1
     74c:	0f 90       	pop	r0
     74e:	0c be       	out	0x3c, r0	; 60
     750:	0f 90       	pop	r0
     752:	0b be       	out	0x3b, r0	; 59
     754:	0f 90       	pop	r0
     756:	0f be       	out	0x3f, r0	; 63
     758:	0f 90       	pop	r0
     75a:	08 95       	ret
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	08 95       	ret

00000760 <vPortYield>:
     760:	0f 92       	push	r0
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	0f 92       	push	r0
     768:	0b b6       	in	r0, 0x3b	; 59
     76a:	0f 92       	push	r0
     76c:	0c b6       	in	r0, 0x3c	; 60
     76e:	0f 92       	push	r0
     770:	1f 92       	push	r1
     772:	11 24       	eor	r1, r1
     774:	2f 92       	push	r2
     776:	3f 92       	push	r3
     778:	4f 92       	push	r4
     77a:	5f 92       	push	r5
     77c:	6f 92       	push	r6
     77e:	7f 92       	push	r7
     780:	8f 92       	push	r8
     782:	9f 92       	push	r9
     784:	af 92       	push	r10
     786:	bf 92       	push	r11
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	2f 93       	push	r18
     796:	3f 93       	push	r19
     798:	4f 93       	push	r20
     79a:	5f 93       	push	r21
     79c:	6f 93       	push	r22
     79e:	7f 93       	push	r23
     7a0:	8f 93       	push	r24
     7a2:	9f 93       	push	r25
     7a4:	af 93       	push	r26
     7a6:	bf 93       	push	r27
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
     7b0:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     7b4:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     7b8:	0d b6       	in	r0, 0x3d	; 61
     7ba:	0d 92       	st	X+, r0
     7bc:	0e b6       	in	r0, 0x3e	; 62
     7be:	0d 92       	st	X+, r0
     7c0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <vTaskSwitchContext>
     7c4:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     7c8:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     7cc:	cd 91       	ld	r28, X+
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	dd 91       	ld	r29, X+
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	bf 90       	pop	r11
     7fe:	af 90       	pop	r10
     800:	9f 90       	pop	r9
     802:	8f 90       	pop	r8
     804:	7f 90       	pop	r7
     806:	6f 90       	pop	r6
     808:	5f 90       	pop	r5
     80a:	4f 90       	pop	r4
     80c:	3f 90       	pop	r3
     80e:	2f 90       	pop	r2
     810:	1f 90       	pop	r1
     812:	0f 90       	pop	r0
     814:	0c be       	out	0x3c, r0	; 60
     816:	0f 90       	pop	r0
     818:	0b be       	out	0x3b, r0	; 59
     81a:	0f 90       	pop	r0
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	0f 90       	pop	r0
     820:	08 95       	ret

00000822 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	0f 92       	push	r0
     82a:	0b b6       	in	r0, 0x3b	; 59
     82c:	0f 92       	push	r0
     82e:	0c b6       	in	r0, 0x3c	; 60
     830:	0f 92       	push	r0
     832:	1f 92       	push	r1
     834:	11 24       	eor	r1, r1
     836:	2f 92       	push	r2
     838:	3f 92       	push	r3
     83a:	4f 92       	push	r4
     83c:	5f 92       	push	r5
     83e:	6f 92       	push	r6
     840:	7f 92       	push	r7
     842:	8f 92       	push	r8
     844:	9f 92       	push	r9
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
     872:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     876:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     87a:	0d b6       	in	r0, 0x3d	; 61
     87c:	0d 92       	st	X+, r0
     87e:	0e b6       	in	r0, 0x3e	; 62
     880:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     882:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     884:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <xTaskIncrementTick>
     888:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     88a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     88e:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     892:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     896:	cd 91       	ld	r28, X+
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	dd 91       	ld	r29, X+
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	ff 91       	pop	r31
     8a0:	ef 91       	pop	r30
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	bf 91       	pop	r27
     8a8:	af 91       	pop	r26
     8aa:	9f 91       	pop	r25
     8ac:	8f 91       	pop	r24
     8ae:	7f 91       	pop	r23
     8b0:	6f 91       	pop	r22
     8b2:	5f 91       	pop	r21
     8b4:	4f 91       	pop	r20
     8b6:	3f 91       	pop	r19
     8b8:	2f 91       	pop	r18
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	bf 90       	pop	r11
     8c8:	af 90       	pop	r10
     8ca:	9f 90       	pop	r9
     8cc:	8f 90       	pop	r8
     8ce:	7f 90       	pop	r7
     8d0:	6f 90       	pop	r6
     8d2:	5f 90       	pop	r5
     8d4:	4f 90       	pop	r4
     8d6:	3f 90       	pop	r3
     8d8:	2f 90       	pop	r2
     8da:	1f 90       	pop	r1
     8dc:	0f 90       	pop	r0
     8de:	0c be       	out	0x3c, r0	; 60
     8e0:	0f 90       	pop	r0
     8e2:	0b be       	out	0x3b, r0	; 59
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8ea:	08 95       	ret

000008ec <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     8ec:	9a df       	rcall	.-204    	; 0x822 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     8ee:	18 95       	reti

000008f0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	0f 92       	push	r0
     8f6:	fc 01       	movw	r30, r24
     8f8:	86 8d       	ldd	r24, Z+30	; 0x1e
     8fa:	81 11       	cpse	r24, r1
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <prvIsQueueEmpty+0x12>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	01 c0       	rjmp	.+2      	; 0x904 <prvIsQueueEmpty+0x14>
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0f 90       	pop	r0
     906:	0f be       	out	0x3f, r0	; 63
     908:	08 95       	ret

0000090a <prvIsQueueFull>:
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	0f 92       	push	r0
     910:	fc 01       	movw	r30, r24
     912:	26 8d       	ldd	r18, Z+30	; 0x1e
     914:	87 8d       	ldd	r24, Z+31	; 0x1f
     916:	28 13       	cpse	r18, r24
     918:	02 c0       	rjmp	.+4      	; 0x91e <prvIsQueueFull+0x14>
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	01 c0       	rjmp	.+2      	; 0x920 <prvIsQueueFull+0x16>
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	08 95       	ret

00000926 <prvCopyDataToQueue>:
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
     930:	04 2f       	mov	r16, r20
     932:	1e 8d       	ldd	r17, Y+30	; 0x1e
     934:	48 a1       	ldd	r20, Y+32	; 0x20
     936:	41 11       	cpse	r20, r1
     938:	0c c0       	rjmp	.+24     	; 0x952 <prvCopyDataToQueue+0x2c>
     93a:	88 81       	ld	r24, Y
     93c:	99 81       	ldd	r25, Y+1	; 0x01
     93e:	89 2b       	or	r24, r25
     940:	09 f0       	breq	.+2      	; 0x944 <prvCopyDataToQueue+0x1e>
     942:	42 c0       	rjmp	.+132    	; 0x9c8 <prvCopyDataToQueue+0xa2>
     944:	8c 81       	ldd	r24, Y+4	; 0x04
     946:	9d 81       	ldd	r25, Y+5	; 0x05
     948:	0e 94 c2 11 	call	0x2384	; 0x2384 <xTaskPriorityDisinherit>
     94c:	1d 82       	std	Y+5, r1	; 0x05
     94e:	1c 82       	std	Y+4, r1	; 0x04
     950:	42 c0       	rjmp	.+132    	; 0x9d6 <prvCopyDataToQueue+0xb0>
     952:	01 11       	cpse	r16, r1
     954:	17 c0       	rjmp	.+46     	; 0x984 <prvCopyDataToQueue+0x5e>
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	9b 81       	ldd	r25, Y+3	; 0x03
     95c:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <memcpy>
     960:	28 a1       	ldd	r18, Y+32	; 0x20
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	9b 81       	ldd	r25, Y+3	; 0x03
     966:	82 0f       	add	r24, r18
     968:	91 1d       	adc	r25, r1
     96a:	9b 83       	std	Y+3, r25	; 0x03
     96c:	8a 83       	std	Y+2, r24	; 0x02
     96e:	2c 81       	ldd	r18, Y+4	; 0x04
     970:	3d 81       	ldd	r19, Y+5	; 0x05
     972:	82 17       	cp	r24, r18
     974:	93 07       	cpc	r25, r19
     976:	50 f1       	brcs	.+84     	; 0x9cc <prvCopyDataToQueue+0xa6>
     978:	88 81       	ld	r24, Y
     97a:	99 81       	ldd	r25, Y+1	; 0x01
     97c:	9b 83       	std	Y+3, r25	; 0x03
     97e:	8a 83       	std	Y+2, r24	; 0x02
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	29 c0       	rjmp	.+82     	; 0x9d6 <prvCopyDataToQueue+0xb0>
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	9f 81       	ldd	r25, Y+7	; 0x07
     98a:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <memcpy>
     98e:	88 a1       	ldd	r24, Y+32	; 0x20
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	91 95       	neg	r25
     994:	81 95       	neg	r24
     996:	91 09       	sbc	r25, r1
     998:	2e 81       	ldd	r18, Y+6	; 0x06
     99a:	3f 81       	ldd	r19, Y+7	; 0x07
     99c:	28 0f       	add	r18, r24
     99e:	39 1f       	adc	r19, r25
     9a0:	3f 83       	std	Y+7, r19	; 0x07
     9a2:	2e 83       	std	Y+6, r18	; 0x06
     9a4:	48 81       	ld	r20, Y
     9a6:	59 81       	ldd	r21, Y+1	; 0x01
     9a8:	24 17       	cp	r18, r20
     9aa:	35 07       	cpc	r19, r21
     9ac:	30 f4       	brcc	.+12     	; 0x9ba <prvCopyDataToQueue+0x94>
     9ae:	2c 81       	ldd	r18, Y+4	; 0x04
     9b0:	3d 81       	ldd	r19, Y+5	; 0x05
     9b2:	82 0f       	add	r24, r18
     9b4:	93 1f       	adc	r25, r19
     9b6:	9f 83       	std	Y+7, r25	; 0x07
     9b8:	8e 83       	std	Y+6, r24	; 0x06
     9ba:	02 30       	cpi	r16, 0x02	; 2
     9bc:	49 f4       	brne	.+18     	; 0x9d0 <prvCopyDataToQueue+0xaa>
     9be:	11 23       	and	r17, r17
     9c0:	49 f0       	breq	.+18     	; 0x9d4 <prvCopyDataToQueue+0xae>
     9c2:	11 50       	subi	r17, 0x01	; 1
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	07 c0       	rjmp	.+14     	; 0x9d6 <prvCopyDataToQueue+0xb0>
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <prvCopyDataToQueue+0xb0>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <prvCopyDataToQueue+0xb0>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <prvCopyDataToQueue+0xb0>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	1f 5f       	subi	r17, 0xFF	; 255
     9d8:	1e 8f       	std	Y+30, r17	; 0x1e
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <prvCopyDataFromQueue>:
     9e4:	fc 01       	movw	r30, r24
     9e6:	40 a1       	ldd	r20, Z+32	; 0x20
     9e8:	44 23       	and	r20, r20
     9ea:	a9 f0       	breq	.+42     	; 0xa16 <prvCopyDataFromQueue+0x32>
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	26 81       	ldd	r18, Z+6	; 0x06
     9f0:	37 81       	ldd	r19, Z+7	; 0x07
     9f2:	24 0f       	add	r18, r20
     9f4:	35 1f       	adc	r19, r21
     9f6:	37 83       	std	Z+7, r19	; 0x07
     9f8:	26 83       	std	Z+6, r18	; 0x06
     9fa:	84 81       	ldd	r24, Z+4	; 0x04
     9fc:	95 81       	ldd	r25, Z+5	; 0x05
     9fe:	28 17       	cp	r18, r24
     a00:	39 07       	cpc	r19, r25
     a02:	20 f0       	brcs	.+8      	; 0xa0c <prvCopyDataFromQueue+0x28>
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	97 83       	std	Z+7, r25	; 0x07
     a0a:	86 83       	std	Z+6, r24	; 0x06
     a0c:	cb 01       	movw	r24, r22
     a0e:	66 81       	ldd	r22, Z+6	; 0x06
     a10:	77 81       	ldd	r23, Z+7	; 0x07
     a12:	0c 94 31 2e 	jmp	0x5c62	; 0x5c62 <memcpy>
     a16:	08 95       	ret

00000a18 <prvUnlockQueue>:
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	0f 92       	push	r0
     a26:	1a a1       	ldd	r17, Y+34	; 0x22
     a28:	0b c0       	rjmp	.+22     	; 0xa40 <prvUnlockQueue+0x28>
     a2a:	8b 89       	ldd	r24, Y+19	; 0x13
     a2c:	88 23       	and	r24, r24
     a2e:	51 f0       	breq	.+20     	; 0xa44 <prvUnlockQueue+0x2c>
     a30:	ce 01       	movw	r24, r28
     a32:	43 96       	adiw	r24, 0x13	; 19
     a34:	0e 94 6f 10 	call	0x20de	; 0x20de <xTaskRemoveFromEventList>
     a38:	81 11       	cpse	r24, r1
     a3a:	0e 94 ab 11 	call	0x2356	; 0x2356 <vTaskMissedYield>
     a3e:	11 50       	subi	r17, 0x01	; 1
     a40:	11 16       	cp	r1, r17
     a42:	9c f3       	brlt	.-26     	; 0xa2a <prvUnlockQueue+0x12>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	8a a3       	std	Y+34, r24	; 0x22
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	0f 92       	push	r0
     a52:	19 a1       	ldd	r17, Y+33	; 0x21
     a54:	0b c0       	rjmp	.+22     	; 0xa6c <prvUnlockQueue+0x54>
     a56:	88 85       	ldd	r24, Y+8	; 0x08
     a58:	88 23       	and	r24, r24
     a5a:	51 f0       	breq	.+20     	; 0xa70 <prvUnlockQueue+0x58>
     a5c:	ce 01       	movw	r24, r28
     a5e:	08 96       	adiw	r24, 0x08	; 8
     a60:	0e 94 6f 10 	call	0x20de	; 0x20de <xTaskRemoveFromEventList>
     a64:	81 11       	cpse	r24, r1
     a66:	0e 94 ab 11 	call	0x2356	; 0x2356 <vTaskMissedYield>
     a6a:	11 50       	subi	r17, 0x01	; 1
     a6c:	11 16       	cp	r1, r17
     a6e:	9c f3       	brlt	.-26     	; 0xa56 <prvUnlockQueue+0x3e>
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	89 a3       	std	Y+33, r24	; 0x21
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	08 95       	ret

00000a80 <xQueueGenericReset>:
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	ec 01       	movw	r28, r24
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	0f 92       	push	r0
     a8c:	e8 81       	ld	r30, Y
     a8e:	f9 81       	ldd	r31, Y+1	; 0x01
     a90:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a92:	28 a1       	ldd	r18, Y+32	; 0x20
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	82 9f       	mul	r24, r18
     a9a:	a0 01       	movw	r20, r0
     a9c:	83 9f       	mul	r24, r19
     a9e:	50 0d       	add	r21, r0
     aa0:	92 9f       	mul	r25, r18
     aa2:	50 0d       	add	r21, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	4e 0f       	add	r20, r30
     aa8:	5f 1f       	adc	r21, r31
     aaa:	5d 83       	std	Y+5, r21	; 0x05
     aac:	4c 83       	std	Y+4, r20	; 0x04
     aae:	1e 8e       	std	Y+30, r1	; 0x1e
     ab0:	fb 83       	std	Y+3, r31	; 0x03
     ab2:	ea 83       	std	Y+2, r30	; 0x02
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	28 9f       	mul	r18, r24
     ab8:	a0 01       	movw	r20, r0
     aba:	29 9f       	mul	r18, r25
     abc:	50 0d       	add	r21, r0
     abe:	38 9f       	mul	r19, r24
     ac0:	50 0d       	add	r21, r0
     ac2:	11 24       	eor	r1, r1
     ac4:	cf 01       	movw	r24, r30
     ac6:	84 0f       	add	r24, r20
     ac8:	95 1f       	adc	r25, r21
     aca:	9f 83       	std	Y+7, r25	; 0x07
     acc:	8e 83       	std	Y+6, r24	; 0x06
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	89 a3       	std	Y+33, r24	; 0x21
     ad2:	8a a3       	std	Y+34, r24	; 0x22
     ad4:	61 11       	cpse	r22, r1
     ad6:	0b c0       	rjmp	.+22     	; 0xaee <xQueueGenericReset+0x6e>
     ad8:	88 85       	ldd	r24, Y+8	; 0x08
     ada:	88 23       	and	r24, r24
     adc:	71 f0       	breq	.+28     	; 0xafa <xQueueGenericReset+0x7a>
     ade:	ce 01       	movw	r24, r28
     ae0:	08 96       	adiw	r24, 0x08	; 8
     ae2:	0e 94 6f 10 	call	0x20de	; 0x20de <xTaskRemoveFromEventList>
     ae6:	88 23       	and	r24, r24
     ae8:	41 f0       	breq	.+16     	; 0xafa <xQueueGenericReset+0x7a>
     aea:	3a de       	rcall	.-908    	; 0x760 <vPortYield>
     aec:	06 c0       	rjmp	.+12     	; 0xafa <xQueueGenericReset+0x7a>
     aee:	ce 01       	movw	r24, r28
     af0:	08 96       	adiw	r24, 0x08	; 8
     af2:	68 dd       	rcall	.-1328   	; 0x5c4 <vListInitialise>
     af4:	ce 01       	movw	r24, r28
     af6:	43 96       	adiw	r24, 0x13	; 19
     af8:	65 dd       	rcall	.-1334   	; 0x5c4 <vListInitialise>
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <prvInitialiseNewQueue>:
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	f8 01       	movw	r30, r16
     b0c:	61 11       	cpse	r22, r1
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <prvInitialiseNewQueue+0x10>
     b10:	11 83       	std	Z+1, r17	; 0x01
     b12:	00 83       	st	Z, r16
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <prvInitialiseNewQueue+0x14>
     b16:	51 83       	std	Z+1, r21	; 0x01
     b18:	40 83       	st	Z, r20
     b1a:	87 8f       	std	Z+31, r24	; 0x1f
     b1c:	60 a3       	std	Z+32, r22	; 0x20
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	cf 01       	movw	r24, r30
     b22:	ae df       	rcall	.-164    	; 0xa80 <xQueueGenericReset>
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret

00000b2a <xQueueGenericCreate>:
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	f8 2e       	mov	r15, r24
     b3a:	e6 2e       	mov	r14, r22
     b3c:	d4 2e       	mov	r13, r20
     b3e:	86 9f       	mul	r24, r22
     b40:	c0 01       	movw	r24, r0
     b42:	11 24       	eor	r1, r1
     b44:	83 96       	adiw	r24, 0x23	; 35
     b46:	58 dc       	rcall	.-1872   	; 0x3f8 <pvPortMalloc>
     b48:	ec 01       	movw	r28, r24
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	41 f0       	breq	.+16     	; 0xb5e <xQueueGenericCreate+0x34>
     b4e:	8c 01       	movw	r16, r24
     b50:	2d 2d       	mov	r18, r13
     b52:	ac 01       	movw	r20, r24
     b54:	4d 5d       	subi	r20, 0xDD	; 221
     b56:	5f 4f       	sbci	r21, 0xFF	; 255
     b58:	6e 2d       	mov	r22, r14
     b5a:	8f 2d       	mov	r24, r15
     b5c:	d4 df       	rcall	.-88     	; 0xb06 <prvInitialiseNewQueue>
     b5e:	ce 01       	movw	r24, r28
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	08 95       	ret

00000b70 <xQueueGenericSend>:
     b70:	cf 92       	push	r12
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	29 97       	sbiw	r28, 0x09	; 9
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	7c 01       	movw	r14, r24
     b92:	6b 01       	movw	r12, r22
     b94:	2e 83       	std	Y+6, r18	; 0x06
     b96:	3f 83       	std	Y+7, r19	; 0x07
     b98:	48 87       	std	Y+8, r20	; 0x08
     b9a:	59 87       	std	Y+9, r21	; 0x09
     b9c:	10 e0       	ldi	r17, 0x00	; 0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	0f 92       	push	r0
     ba4:	f7 01       	movw	r30, r14
     ba6:	96 8d       	ldd	r25, Z+30	; 0x1e
     ba8:	87 8d       	ldd	r24, Z+31	; 0x1f
     baa:	98 17       	cp	r25, r24
     bac:	10 f0       	brcs	.+4      	; 0xbb2 <xQueueGenericSend+0x42>
     bae:	02 30       	cpi	r16, 0x02	; 2
     bb0:	b1 f4       	brne	.+44     	; 0xbde <xQueueGenericSend+0x6e>
     bb2:	40 2f       	mov	r20, r16
     bb4:	b6 01       	movw	r22, r12
     bb6:	c7 01       	movw	r24, r14
     bb8:	b6 de       	rcall	.-660    	; 0x926 <prvCopyDataToQueue>
     bba:	f7 01       	movw	r30, r14
     bbc:	93 89       	ldd	r25, Z+19	; 0x13
     bbe:	99 23       	and	r25, r25
     bc0:	41 f0       	breq	.+16     	; 0xbd2 <xQueueGenericSend+0x62>
     bc2:	c7 01       	movw	r24, r14
     bc4:	43 96       	adiw	r24, 0x13	; 19
     bc6:	0e 94 6f 10 	call	0x20de	; 0x20de <xTaskRemoveFromEventList>
     bca:	88 23       	and	r24, r24
     bcc:	21 f0       	breq	.+8      	; 0xbd6 <xQueueGenericSend+0x66>
     bce:	c8 dd       	rcall	.-1136   	; 0x760 <vPortYield>
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <xQueueGenericSend+0x66>
     bd2:	81 11       	cpse	r24, r1
     bd4:	c5 dd       	rcall	.-1142   	; 0x760 <vPortYield>
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	4c c0       	rjmp	.+152    	; 0xc76 <xQueueGenericSend+0x106>
     bde:	8e 81       	ldd	r24, Y+6	; 0x06
     be0:	9f 81       	ldd	r25, Y+7	; 0x07
     be2:	a8 85       	ldd	r26, Y+8	; 0x08
     be4:	b9 85       	ldd	r27, Y+9	; 0x09
     be6:	89 2b       	or	r24, r25
     be8:	8a 2b       	or	r24, r26
     bea:	8b 2b       	or	r24, r27
     bec:	21 f4       	brne	.+8      	; 0xbf6 <xQueueGenericSend+0x86>
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	40 c0       	rjmp	.+128    	; 0xc76 <xQueueGenericSend+0x106>
     bf6:	11 11       	cpse	r17, r1
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <xQueueGenericSend+0x94>
     bfa:	ce 01       	movw	r24, r28
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	0e 94 34 11 	call	0x2268	; 0x2268 <vTaskInternalSetTimeOutState>
     c02:	11 e0       	ldi	r17, 0x01	; 1
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	10 d7       	rcall	.+3616   	; 0x1a2a <vTaskSuspendAll>
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	0f 92       	push	r0
     c10:	f7 01       	movw	r30, r14
     c12:	81 a1       	ldd	r24, Z+33	; 0x21
     c14:	8f 3f       	cpi	r24, 0xFF	; 255
     c16:	09 f4       	brne	.+2      	; 0xc1a <xQueueGenericSend+0xaa>
     c18:	11 a2       	std	Z+33, r1	; 0x21
     c1a:	f7 01       	movw	r30, r14
     c1c:	82 a1       	ldd	r24, Z+34	; 0x22
     c1e:	8f 3f       	cpi	r24, 0xFF	; 255
     c20:	09 f4       	brne	.+2      	; 0xc24 <xQueueGenericSend+0xb4>
     c22:	12 a2       	std	Z+34, r1	; 0x22
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	be 01       	movw	r22, r28
     c2a:	6a 5f       	subi	r22, 0xFA	; 250
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	0e 94 45 11 	call	0x228a	; 0x228a <xTaskCheckForTimeOut>
     c36:	81 11       	cpse	r24, r1
     c38:	19 c0       	rjmp	.+50     	; 0xc6c <xQueueGenericSend+0xfc>
     c3a:	c7 01       	movw	r24, r14
     c3c:	66 de       	rcall	.-820    	; 0x90a <prvIsQueueFull>
     c3e:	88 23       	and	r24, r24
     c40:	81 f0       	breq	.+32     	; 0xc62 <xQueueGenericSend+0xf2>
     c42:	4e 81       	ldd	r20, Y+6	; 0x06
     c44:	5f 81       	ldd	r21, Y+7	; 0x07
     c46:	68 85       	ldd	r22, Y+8	; 0x08
     c48:	79 85       	ldd	r23, Y+9	; 0x09
     c4a:	c7 01       	movw	r24, r14
     c4c:	08 96       	adiw	r24, 0x08	; 8
     c4e:	0e 94 16 10 	call	0x202c	; 0x202c <vTaskPlaceOnEventList>
     c52:	c7 01       	movw	r24, r14
     c54:	e1 de       	rcall	.-574    	; 0xa18 <prvUnlockQueue>
     c56:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskResumeAll>
     c5a:	81 11       	cpse	r24, r1
     c5c:	a0 cf       	rjmp	.-192    	; 0xb9e <xQueueGenericSend+0x2e>
     c5e:	80 dd       	rcall	.-1280   	; 0x760 <vPortYield>
     c60:	9e cf       	rjmp	.-196    	; 0xb9e <xQueueGenericSend+0x2e>
     c62:	c7 01       	movw	r24, r14
     c64:	d9 de       	rcall	.-590    	; 0xa18 <prvUnlockQueue>
     c66:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskResumeAll>
     c6a:	99 cf       	rjmp	.-206    	; 0xb9e <xQueueGenericSend+0x2e>
     c6c:	c7 01       	movw	r24, r14
     c6e:	d4 de       	rcall	.-600    	; 0xa18 <prvUnlockQueue>
     c70:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskResumeAll>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	29 96       	adiw	r28, 0x09	; 9
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	08 95       	ret

00000c94 <prvInitialiseMutex>:
     c94:	0f 93       	push	r16
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	69 f0       	breq	.+26     	; 0xcb4 <prvInitialiseMutex+0x20>
     c9a:	fc 01       	movw	r30, r24
     c9c:	15 82       	std	Z+5, r1	; 0x05
     c9e:	14 82       	std	Z+4, r1	; 0x04
     ca0:	11 82       	std	Z+1, r1	; 0x01
     ca2:	10 82       	st	Z, r1
     ca4:	16 82       	std	Z+6, r1	; 0x06
     ca6:	00 e0       	ldi	r16, 0x00	; 0
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	a9 01       	movw	r20, r18
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	5e df       	rcall	.-324    	; 0xb70 <xQueueGenericSend>
     cb4:	0f 91       	pop	r16
     cb6:	08 95       	ret

00000cb8 <xQueueCreateMutex>:
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	48 2f       	mov	r20, r24
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	33 df       	rcall	.-410    	; 0xb2a <xQueueGenericCreate>
     cc4:	ec 01       	movw	r28, r24
     cc6:	e6 df       	rcall	.-52     	; 0xc94 <prvInitialiseMutex>
     cc8:	ce 01       	movw	r24, r28
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <xQueueGenericSendFromISR>:
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	8a 01       	movw	r16, r20
     cde:	fc 01       	movw	r30, r24
     ce0:	56 8d       	ldd	r21, Z+30	; 0x1e
     ce2:	37 8d       	ldd	r19, Z+31	; 0x1f
     ce4:	53 17       	cp	r21, r19
     ce6:	10 f0       	brcs	.+4      	; 0xcec <xQueueGenericSendFromISR+0x1c>
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	f9 f4       	brne	.+62     	; 0xd2a <xQueueGenericSendFromISR+0x5a>
     cec:	42 2f       	mov	r20, r18
     cee:	78 01       	movw	r14, r16
     cf0:	ec 01       	movw	r28, r24
     cf2:	1a a1       	ldd	r17, Y+34	; 0x22
     cf4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cf6:	ce 01       	movw	r24, r28
     cf8:	16 de       	rcall	.-980    	; 0x926 <prvCopyDataToQueue>
     cfa:	1f 3f       	cpi	r17, 0xFF	; 255
     cfc:	81 f4       	brne	.+32     	; 0xd1e <xQueueGenericSendFromISR+0x4e>
     cfe:	8b 89       	ldd	r24, Y+19	; 0x13
     d00:	88 23       	and	r24, r24
     d02:	a9 f0       	breq	.+42     	; 0xd2e <xQueueGenericSendFromISR+0x5e>
     d04:	ce 01       	movw	r24, r28
     d06:	43 96       	adiw	r24, 0x13	; 19
     d08:	0e 94 6f 10 	call	0x20de	; 0x20de <xTaskRemoveFromEventList>
     d0c:	88 23       	and	r24, r24
     d0e:	89 f0       	breq	.+34     	; 0xd32 <xQueueGenericSendFromISR+0x62>
     d10:	e1 14       	cp	r14, r1
     d12:	f1 04       	cpc	r15, r1
     d14:	81 f0       	breq	.+32     	; 0xd36 <xQueueGenericSendFromISR+0x66>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	f7 01       	movw	r30, r14
     d1a:	80 83       	st	Z, r24
     d1c:	0d c0       	rjmp	.+26     	; 0xd38 <xQueueGenericSendFromISR+0x68>
     d1e:	ff 24       	eor	r15, r15
     d20:	f3 94       	inc	r15
     d22:	f1 0e       	add	r15, r17
     d24:	fa a2       	std	Y+34, r15	; 0x22
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	07 c0       	rjmp	.+14     	; 0xd38 <xQueueGenericSendFromISR+0x68>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <xQueueGenericSendFromISR+0x68>
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <xQueueGenericSendFromISR+0x68>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <xQueueGenericSendFromISR+0x68>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	08 95       	ret

00000d46 <xQueueReceive>:
     d46:	cf 92       	push	r12
     d48:	df 92       	push	r13
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	29 97       	sbiw	r28, 0x09	; 9
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	8c 01       	movw	r16, r24
     d68:	6b 01       	movw	r12, r22
     d6a:	2e 83       	std	Y+6, r18	; 0x06
     d6c:	3f 83       	std	Y+7, r19	; 0x07
     d6e:	48 87       	std	Y+8, r20	; 0x08
     d70:	59 87       	std	Y+9, r21	; 0x09
     d72:	e1 2c       	mov	r14, r1
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	0f 92       	push	r0
     d7a:	f8 01       	movw	r30, r16
     d7c:	f6 8c       	ldd	r15, Z+30	; 0x1e
     d7e:	ff 20       	and	r15, r15
     d80:	99 f0       	breq	.+38     	; 0xda8 <xQueueReceive+0x62>
     d82:	b6 01       	movw	r22, r12
     d84:	c8 01       	movw	r24, r16
     d86:	2e de       	rcall	.-932    	; 0x9e4 <prvCopyDataFromQueue>
     d88:	fa 94       	dec	r15
     d8a:	f8 01       	movw	r30, r16
     d8c:	f6 8e       	std	Z+30, r15	; 0x1e
     d8e:	80 85       	ldd	r24, Z+8	; 0x08
     d90:	88 23       	and	r24, r24
     d92:	31 f0       	breq	.+12     	; 0xda0 <xQueueReceive+0x5a>
     d94:	c8 01       	movw	r24, r16
     d96:	08 96       	adiw	r24, 0x08	; 8
     d98:	0e 94 6f 10 	call	0x20de	; 0x20de <xTaskRemoveFromEventList>
     d9c:	81 11       	cpse	r24, r1
     d9e:	e0 dc       	rcall	.-1600   	; 0x760 <vPortYield>
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	4f c0       	rjmp	.+158    	; 0xe46 <xQueueReceive+0x100>
     da8:	8e 81       	ldd	r24, Y+6	; 0x06
     daa:	9f 81       	ldd	r25, Y+7	; 0x07
     dac:	a8 85       	ldd	r26, Y+8	; 0x08
     dae:	b9 85       	ldd	r27, Y+9	; 0x09
     db0:	89 2b       	or	r24, r25
     db2:	8a 2b       	or	r24, r26
     db4:	8b 2b       	or	r24, r27
     db6:	21 f4       	brne	.+8      	; 0xdc0 <xQueueReceive+0x7a>
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	43 c0       	rjmp	.+134    	; 0xe46 <xQueueReceive+0x100>
     dc0:	e1 10       	cpse	r14, r1
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <xQueueReceive+0x8a>
     dc4:	ce 01       	movw	r24, r28
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	0e 94 34 11 	call	0x2268	; 0x2268 <vTaskInternalSetTimeOutState>
     dcc:	ee 24       	eor	r14, r14
     dce:	e3 94       	inc	r14
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	2a d6       	rcall	.+3156   	; 0x1a2a <vTaskSuspendAll>
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	0f 92       	push	r0
     ddc:	f8 01       	movw	r30, r16
     dde:	81 a1       	ldd	r24, Z+33	; 0x21
     de0:	8f 3f       	cpi	r24, 0xFF	; 255
     de2:	09 f4       	brne	.+2      	; 0xde6 <xQueueReceive+0xa0>
     de4:	11 a2       	std	Z+33, r1	; 0x21
     de6:	f8 01       	movw	r30, r16
     de8:	82 a1       	ldd	r24, Z+34	; 0x22
     dea:	8f 3f       	cpi	r24, 0xFF	; 255
     dec:	09 f4       	brne	.+2      	; 0xdf0 <xQueueReceive+0xaa>
     dee:	12 a2       	std	Z+34, r1	; 0x22
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	be 01       	movw	r22, r28
     df6:	6a 5f       	subi	r22, 0xFA	; 250
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	ce 01       	movw	r24, r28
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	0e 94 45 11 	call	0x228a	; 0x228a <xTaskCheckForTimeOut>
     e02:	81 11       	cpse	r24, r1
     e04:	17 c0       	rjmp	.+46     	; 0xe34 <xQueueReceive+0xee>
     e06:	c8 01       	movw	r24, r16
     e08:	73 dd       	rcall	.-1306   	; 0x8f0 <prvIsQueueEmpty>
     e0a:	88 23       	and	r24, r24
     e0c:	79 f0       	breq	.+30     	; 0xe2c <xQueueReceive+0xe6>
     e0e:	4e 81       	ldd	r20, Y+6	; 0x06
     e10:	5f 81       	ldd	r21, Y+7	; 0x07
     e12:	68 85       	ldd	r22, Y+8	; 0x08
     e14:	79 85       	ldd	r23, Y+9	; 0x09
     e16:	c8 01       	movw	r24, r16
     e18:	43 96       	adiw	r24, 0x13	; 19
     e1a:	0e 94 16 10 	call	0x202c	; 0x202c <vTaskPlaceOnEventList>
     e1e:	c8 01       	movw	r24, r16
     e20:	fb dd       	rcall	.-1034   	; 0xa18 <prvUnlockQueue>
     e22:	43 d7       	rcall	.+3718   	; 0x1caa <xTaskResumeAll>
     e24:	81 11       	cpse	r24, r1
     e26:	a6 cf       	rjmp	.-180    	; 0xd74 <xQueueReceive+0x2e>
     e28:	9b dc       	rcall	.-1738   	; 0x760 <vPortYield>
     e2a:	a4 cf       	rjmp	.-184    	; 0xd74 <xQueueReceive+0x2e>
     e2c:	c8 01       	movw	r24, r16
     e2e:	f4 dd       	rcall	.-1048   	; 0xa18 <prvUnlockQueue>
     e30:	3c d7       	rcall	.+3704   	; 0x1caa <xTaskResumeAll>
     e32:	a0 cf       	rjmp	.-192    	; 0xd74 <xQueueReceive+0x2e>
     e34:	c8 01       	movw	r24, r16
     e36:	f0 dd       	rcall	.-1056   	; 0xa18 <prvUnlockQueue>
     e38:	38 d7       	rcall	.+3696   	; 0x1caa <xTaskResumeAll>
     e3a:	c8 01       	movw	r24, r16
     e3c:	59 dd       	rcall	.-1358   	; 0x8f0 <prvIsQueueEmpty>
     e3e:	88 23       	and	r24, r24
     e40:	09 f4       	brne	.+2      	; 0xe44 <xQueueReceive+0xfe>
     e42:	98 cf       	rjmp	.-208    	; 0xd74 <xQueueReceive+0x2e>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	29 96       	adiw	r28, 0x09	; 9
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	08 95       	ret

00000e64 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	0f 92       	push	r0
     e70:	89 a1       	ldd	r24, Y+33	; 0x21
     e72:	8f 3f       	cpi	r24, 0xFF	; 255
     e74:	09 f4       	brne	.+2      	; 0xe78 <vQueueWaitForMessageRestricted+0x14>
     e76:	19 a2       	std	Y+33, r1	; 0x21
     e78:	8a a1       	ldd	r24, Y+34	; 0x22
     e7a:	8f 3f       	cpi	r24, 0xFF	; 255
     e7c:	09 f4       	brne	.+2      	; 0xe80 <vQueueWaitForMessageRestricted+0x1c>
     e7e:	1a a2       	std	Y+34, r1	; 0x22
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     e84:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e86:	81 11       	cpse	r24, r1
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     e8a:	ce 01       	movw	r24, r28
     e8c:	43 96       	adiw	r24, 0x13	; 19
     e8e:	0e 94 2d 10 	call	0x205a	; 0x205a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     e92:	ce 01       	movw	r24, r28
     e94:	c1 dd       	rcall	.-1150   	; 0xa18 <prvUnlockQueue>
    }
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     e9c:	fc 01       	movw	r30, r24
     e9e:	44 81       	ldd	r20, Z+4	; 0x04
     ea0:	55 81       	ldd	r21, Z+5	; 0x05
     ea2:	22 81       	ldd	r18, Z+2	; 0x02
     ea4:	33 81       	ldd	r19, Z+3	; 0x03
     ea6:	24 0f       	add	r18, r20
     ea8:	35 1f       	adc	r19, r21
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	b9 01       	movw	r22, r18
     eb0:	68 1b       	sub	r22, r24
     eb2:	79 0b       	sbc	r23, r25
     eb4:	cb 01       	movw	r24, r22
     eb6:	64 17       	cp	r22, r20
     eb8:	75 07       	cpc	r23, r21
     eba:	10 f0       	brcs	.+4      	; 0xec0 <prvBytesInBuffer+0x24>
     ebc:	84 1b       	sub	r24, r20
     ebe:	95 0b       	sbc	r25, r21
     ec0:	08 95       	ret

00000ec2 <prvInitialiseNewStreamBuffer>:
     ec2:	0f 93       	push	r16
     ec4:	fc 01       	movw	r30, r24
     ec6:	8f e0       	ldi	r24, 0x0F	; 15
     ec8:	df 01       	movw	r26, r30
     eca:	1d 92       	st	X+, r1
     ecc:	8a 95       	dec	r24
     ece:	e9 f7       	brne	.-6      	; 0xeca <prvInitialiseNewStreamBuffer+0x8>
     ed0:	75 87       	std	Z+13, r23	; 0x0d
     ed2:	64 87       	std	Z+12, r22	; 0x0c
     ed4:	55 83       	std	Z+5, r21	; 0x05
     ed6:	44 83       	std	Z+4, r20	; 0x04
     ed8:	37 83       	std	Z+7, r19	; 0x07
     eda:	26 83       	std	Z+6, r18	; 0x06
     edc:	06 87       	std	Z+14, r16	; 0x0e
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <prvWriteBytesToBuffer>:
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	cf 92       	push	r12
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	6c 01       	movw	r12, r24
     ef8:	5b 01       	movw	r10, r22
     efa:	7a 01       	movw	r14, r20
     efc:	fc 01       	movw	r30, r24
     efe:	c2 81       	ldd	r28, Z+2	; 0x02
     f00:	d3 81       	ldd	r29, Z+3	; 0x03
     f02:	04 81       	ldd	r16, Z+4	; 0x04
     f04:	15 81       	ldd	r17, Z+5	; 0x05
     f06:	0c 1b       	sub	r16, r28
     f08:	1d 0b       	sbc	r17, r29
     f0a:	40 17       	cp	r20, r16
     f0c:	51 07       	cpc	r21, r17
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <prvWriteBytesToBuffer+0x30>
     f10:	8a 01       	movw	r16, r20
     f12:	f6 01       	movw	r30, r12
     f14:	84 85       	ldd	r24, Z+12	; 0x0c
     f16:	95 85       	ldd	r25, Z+13	; 0x0d
     f18:	a8 01       	movw	r20, r16
     f1a:	b5 01       	movw	r22, r10
     f1c:	8c 0f       	add	r24, r28
     f1e:	9d 1f       	adc	r25, r29
     f20:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <memcpy>
     f24:	0e 15       	cp	r16, r14
     f26:	1f 05       	cpc	r17, r15
     f28:	58 f4       	brcc	.+22     	; 0xf40 <prvWriteBytesToBuffer+0x5e>
     f2a:	a7 01       	movw	r20, r14
     f2c:	40 1b       	sub	r20, r16
     f2e:	51 0b       	sbc	r21, r17
     f30:	b5 01       	movw	r22, r10
     f32:	60 0f       	add	r22, r16
     f34:	71 1f       	adc	r23, r17
     f36:	f6 01       	movw	r30, r12
     f38:	84 85       	ldd	r24, Z+12	; 0x0c
     f3a:	95 85       	ldd	r25, Z+13	; 0x0d
     f3c:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <memcpy>
     f40:	ce 01       	movw	r24, r28
     f42:	8e 0d       	add	r24, r14
     f44:	9f 1d       	adc	r25, r15
     f46:	f6 01       	movw	r30, r12
     f48:	24 81       	ldd	r18, Z+4	; 0x04
     f4a:	35 81       	ldd	r19, Z+5	; 0x05
     f4c:	82 17       	cp	r24, r18
     f4e:	93 07       	cpc	r25, r19
     f50:	10 f0       	brcs	.+4      	; 0xf56 <prvWriteBytesToBuffer+0x74>
     f52:	82 1b       	sub	r24, r18
     f54:	93 0b       	sbc	r25, r19
     f56:	f6 01       	movw	r30, r12
     f58:	93 83       	std	Z+3, r25	; 0x03
     f5a:	82 83       	std	Z+2, r24	; 0x02
     f5c:	c7 01       	movw	r24, r14
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	bf 90       	pop	r11
     f70:	af 90       	pop	r10
     f72:	08 95       	ret

00000f74 <prvWriteMessageToBuffer>:
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	1f 92       	push	r1
     f86:	1f 92       	push	r1
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	7c 01       	movw	r14, r24
     f8e:	6b 01       	movw	r12, r22
     f90:	5a 83       	std	Y+2, r21	; 0x02
     f92:	49 83       	std	Y+1, r20	; 0x01
     f94:	21 15       	cp	r18, r1
     f96:	31 05       	cpc	r19, r1
     f98:	c1 f0       	breq	.+48     	; 0xfca <prvWriteMessageToBuffer+0x56>
     f9a:	fc 01       	movw	r30, r24
     f9c:	86 85       	ldd	r24, Z+14	; 0x0e
     f9e:	80 fd       	sbrc	r24, 0
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <prvWriteMessageToBuffer+0x3e>
     fa2:	42 17       	cp	r20, r18
     fa4:	53 07       	cpc	r21, r19
     fa6:	08 f4       	brcc	.+2      	; 0xfaa <prvWriteMessageToBuffer+0x36>
     fa8:	9a 01       	movw	r18, r20
     faa:	3a 83       	std	Y+2, r19	; 0x02
     fac:	29 83       	std	Y+1, r18	; 0x01
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	0f c0       	rjmp	.+30     	; 0xfd0 <prvWriteMessageToBuffer+0x5c>
     fb2:	20 17       	cp	r18, r16
     fb4:	31 07       	cpc	r19, r17
     fb6:	58 f0       	brcs	.+22     	; 0xfce <prvWriteMessageToBuffer+0x5a>
     fb8:	42 e0       	ldi	r20, 0x02	; 2
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	be 01       	movw	r22, r28
     fbe:	6f 5f       	subi	r22, 0xFF	; 255
     fc0:	7f 4f       	sbci	r23, 0xFF	; 255
     fc2:	c7 01       	movw	r24, r14
     fc4:	8e df       	rcall	.-228    	; 0xee2 <prvWriteBytesToBuffer>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <prvWriteMessageToBuffer+0x5c>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <prvWriteMessageToBuffer+0x5c>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	88 23       	and	r24, r24
     fd2:	31 f0       	breq	.+12     	; 0xfe0 <prvWriteMessageToBuffer+0x6c>
     fd4:	49 81       	ldd	r20, Y+1	; 0x01
     fd6:	5a 81       	ldd	r21, Y+2	; 0x02
     fd8:	b6 01       	movw	r22, r12
     fda:	c7 01       	movw	r24, r14
     fdc:	82 df       	rcall	.-252    	; 0xee2 <prvWriteBytesToBuffer>
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <prvWriteMessageToBuffer+0x70>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	08 95       	ret

00000ffa <prvReadBytesFromBuffer>:
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	7c 01       	movw	r14, r24
    1010:	5b 01       	movw	r10, r22
    1012:	e9 01       	movw	r28, r18
    1014:	42 17       	cp	r20, r18
    1016:	53 07       	cpc	r21, r19
    1018:	08 f4       	brcc	.+2      	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    101a:	ea 01       	movw	r28, r20
    101c:	20 97       	sbiw	r28, 0x00	; 0
    101e:	81 f1       	breq	.+96     	; 0x1080 <__EEPROM_REGION_LENGTH__+0x80>
    1020:	f7 01       	movw	r30, r14
    1022:	00 81       	ld	r16, Z
    1024:	11 81       	ldd	r17, Z+1	; 0x01
    1026:	84 81       	ldd	r24, Z+4	; 0x04
    1028:	95 81       	ldd	r25, Z+5	; 0x05
    102a:	80 1b       	sub	r24, r16
    102c:	91 0b       	sbc	r25, r17
    102e:	6e 01       	movw	r12, r28
    1030:	8c 17       	cp	r24, r28
    1032:	9d 07       	cpc	r25, r29
    1034:	08 f4       	brcc	.+2      	; 0x1038 <__EEPROM_REGION_LENGTH__+0x38>
    1036:	6c 01       	movw	r12, r24
    1038:	f7 01       	movw	r30, r14
    103a:	64 85       	ldd	r22, Z+12	; 0x0c
    103c:	75 85       	ldd	r23, Z+13	; 0x0d
    103e:	60 0f       	add	r22, r16
    1040:	71 1f       	adc	r23, r17
    1042:	a6 01       	movw	r20, r12
    1044:	c5 01       	movw	r24, r10
    1046:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <memcpy>
    104a:	cc 16       	cp	r12, r28
    104c:	dd 06       	cpc	r13, r29
    104e:	58 f4       	brcc	.+22     	; 0x1066 <__EEPROM_REGION_LENGTH__+0x66>
    1050:	ae 01       	movw	r20, r28
    1052:	4c 19       	sub	r20, r12
    1054:	5d 09       	sbc	r21, r13
    1056:	f7 01       	movw	r30, r14
    1058:	64 85       	ldd	r22, Z+12	; 0x0c
    105a:	75 85       	ldd	r23, Z+13	; 0x0d
    105c:	c5 01       	movw	r24, r10
    105e:	8c 0d       	add	r24, r12
    1060:	9d 1d       	adc	r25, r13
    1062:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <memcpy>
    1066:	0c 0f       	add	r16, r28
    1068:	1d 1f       	adc	r17, r29
    106a:	f7 01       	movw	r30, r14
    106c:	84 81       	ldd	r24, Z+4	; 0x04
    106e:	95 81       	ldd	r25, Z+5	; 0x05
    1070:	08 17       	cp	r16, r24
    1072:	19 07       	cpc	r17, r25
    1074:	10 f0       	brcs	.+4      	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1076:	08 1b       	sub	r16, r24
    1078:	19 0b       	sbc	r17, r25
    107a:	f7 01       	movw	r30, r14
    107c:	11 83       	std	Z+1, r17	; 0x01
    107e:	00 83       	st	Z, r16
    1080:	ce 01       	movw	r24, r28
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	df 90       	pop	r13
    1090:	cf 90       	pop	r12
    1092:	bf 90       	pop	r11
    1094:	af 90       	pop	r10
    1096:	08 95       	ret

00001098 <prvReadMessageFromBuffer>:
    1098:	6f 92       	push	r6
    109a:	7f 92       	push	r7
    109c:	8f 92       	push	r8
    109e:	9f 92       	push	r9
    10a0:	af 92       	push	r10
    10a2:	bf 92       	push	r11
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	1f 92       	push	r1
    10b6:	1f 92       	push	r1
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	6c 01       	movw	r12, r24
    10be:	4b 01       	movw	r8, r22
    10c0:	5a 01       	movw	r10, r20
    10c2:	79 01       	movw	r14, r18
    10c4:	01 15       	cp	r16, r1
    10c6:	11 05       	cpc	r17, r1
    10c8:	b1 f0       	breq	.+44     	; 0x10f6 <prvReadMessageFromBuffer+0x5e>
    10ca:	fc 01       	movw	r30, r24
    10cc:	60 80       	ld	r6, Z
    10ce:	71 80       	ldd	r7, Z+1	; 0x01
    10d0:	a8 01       	movw	r20, r16
    10d2:	be 01       	movw	r22, r28
    10d4:	6f 5f       	subi	r22, 0xFF	; 255
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	90 df       	rcall	.-224    	; 0xffa <prvReadBytesFromBuffer>
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	e0 1a       	sub	r14, r16
    10e0:	f1 0a       	sbc	r15, r17
    10e2:	a8 16       	cp	r10, r24
    10e4:	b9 06       	cpc	r11, r25
    10e6:	30 f4       	brcc	.+12     	; 0x10f4 <prvReadMessageFromBuffer+0x5c>
    10e8:	f6 01       	movw	r30, r12
    10ea:	71 82       	std	Z+1, r7	; 0x01
    10ec:	60 82       	st	Z, r6
    10ee:	a1 2c       	mov	r10, r1
    10f0:	b1 2c       	mov	r11, r1
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <prvReadMessageFromBuffer+0x5e>
    10f4:	5c 01       	movw	r10, r24
    10f6:	97 01       	movw	r18, r14
    10f8:	a5 01       	movw	r20, r10
    10fa:	b4 01       	movw	r22, r8
    10fc:	c6 01       	movw	r24, r12
    10fe:	7d df       	rcall	.-262    	; 0xffa <prvReadBytesFromBuffer>
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	cf 90       	pop	r12
    1114:	bf 90       	pop	r11
    1116:	af 90       	pop	r10
    1118:	9f 90       	pop	r9
    111a:	8f 90       	pop	r8
    111c:	7f 90       	pop	r7
    111e:	6f 90       	pop	r6
    1120:	08 95       	ret

00001122 <xStreamBufferGenericCreate>:
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	0f 93       	push	r16
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
    1132:	6b 01       	movw	r12, r22
    1134:	41 30       	cpi	r20, 0x01	; 1
    1136:	11 f4       	brne	.+4      	; 0x113c <xStreamBufferGenericCreate+0x1a>
    1138:	01 e0       	ldi	r16, 0x01	; 1
    113a:	01 c0       	rjmp	.+2      	; 0x113e <xStreamBufferGenericCreate+0x1c>
    113c:	00 e0       	ldi	r16, 0x00	; 0
    113e:	c1 14       	cp	r12, r1
    1140:	d1 04       	cpc	r13, r1
    1142:	19 f4       	brne	.+6      	; 0x114a <xStreamBufferGenericCreate+0x28>
    1144:	cc 24       	eor	r12, r12
    1146:	c3 94       	inc	r12
    1148:	d1 2c       	mov	r13, r1
    114a:	ce 01       	movw	r24, r28
    114c:	40 96       	adiw	r24, 0x10	; 16
    114e:	c8 17       	cp	r28, r24
    1150:	d9 07       	cpc	r29, r25
    1152:	20 f4       	brcc	.+8      	; 0x115c <xStreamBufferGenericCreate+0x3a>
    1154:	21 96       	adiw	r28, 0x01	; 1
    1156:	50 d9       	rcall	.-3424   	; 0x3f8 <pvPortMalloc>
    1158:	7c 01       	movw	r14, r24
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <xStreamBufferGenericCreate+0x3e>
    115c:	e1 2c       	mov	r14, r1
    115e:	f1 2c       	mov	r15, r1
    1160:	e1 14       	cp	r14, r1
    1162:	f1 04       	cpc	r15, r1
    1164:	39 f0       	breq	.+14     	; 0x1174 <xStreamBufferGenericCreate+0x52>
    1166:	96 01       	movw	r18, r12
    1168:	ae 01       	movw	r20, r28
    116a:	b7 01       	movw	r22, r14
    116c:	61 5f       	subi	r22, 0xF1	; 241
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	c7 01       	movw	r24, r14
    1172:	a7 de       	rcall	.-690    	; 0xec2 <prvInitialiseNewStreamBuffer>
    1174:	c7 01       	movw	r24, r14
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	08 95       	ret

00001186 <xStreamBufferReset>:
    1186:	0f 93       	push	r16
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	0f 92       	push	r0
    118e:	fc 01       	movw	r30, r24
    1190:	20 85       	ldd	r18, Z+8	; 0x08
    1192:	31 85       	ldd	r19, Z+9	; 0x09
    1194:	23 2b       	or	r18, r19
    1196:	71 f4       	brne	.+28     	; 0x11b4 <xStreamBufferReset+0x2e>
    1198:	22 85       	ldd	r18, Z+10	; 0x0a
    119a:	33 85       	ldd	r19, Z+11	; 0x0b
    119c:	23 2b       	or	r18, r19
    119e:	61 f4       	brne	.+24     	; 0x11b8 <xStreamBufferReset+0x32>
    11a0:	26 81       	ldd	r18, Z+6	; 0x06
    11a2:	37 81       	ldd	r19, Z+7	; 0x07
    11a4:	44 81       	ldd	r20, Z+4	; 0x04
    11a6:	55 81       	ldd	r21, Z+5	; 0x05
    11a8:	64 85       	ldd	r22, Z+12	; 0x0c
    11aa:	75 85       	ldd	r23, Z+13	; 0x0d
    11ac:	06 85       	ldd	r16, Z+14	; 0x0e
    11ae:	89 de       	rcall	.-750    	; 0xec2 <prvInitialiseNewStreamBuffer>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <xStreamBufferReset+0x34>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <xStreamBufferReset+0x34>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <xStreamBufferSpacesAvailable>:
    11c2:	fc 01       	movw	r30, r24
    11c4:	24 81       	ldd	r18, Z+4	; 0x04
    11c6:	35 81       	ldd	r19, Z+5	; 0x05
    11c8:	80 81       	ld	r24, Z
    11ca:	91 81       	ldd	r25, Z+1	; 0x01
    11cc:	82 0f       	add	r24, r18
    11ce:	93 1f       	adc	r25, r19
    11d0:	42 81       	ldd	r20, Z+2	; 0x02
    11d2:	53 81       	ldd	r21, Z+3	; 0x03
    11d4:	84 1b       	sub	r24, r20
    11d6:	95 0b       	sbc	r25, r21
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	82 17       	cp	r24, r18
    11dc:	93 07       	cpc	r25, r19
    11de:	10 f0       	brcs	.+4      	; 0x11e4 <xStreamBufferSpacesAvailable+0x22>
    11e0:	82 1b       	sub	r24, r18
    11e2:	93 0b       	sbc	r25, r19
    11e4:	08 95       	ret

000011e6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    11e6:	2f 92       	push	r2
    11e8:	3f 92       	push	r3
    11ea:	4f 92       	push	r4
    11ec:	5f 92       	push	r5
    11ee:	6f 92       	push	r6
    11f0:	7f 92       	push	r7
    11f2:	8f 92       	push	r8
    11f4:	9f 92       	push	r9
    11f6:	af 92       	push	r10
    11f8:	bf 92       	push	r11
    11fa:	cf 92       	push	r12
    11fc:	df 92       	push	r13
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	2b 97       	sbiw	r28, 0x0b	; 11
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	4c 01       	movw	r8, r24
    121c:	7b 87       	std	Y+11, r23	; 0x0b
    121e:	6a 87       	std	Y+10, r22	; 0x0a
    1220:	1a 01       	movw	r2, r20
    1222:	0e 83       	std	Y+6, r16	; 0x06
    1224:	1f 83       	std	Y+7, r17	; 0x07
    1226:	28 87       	std	Y+8, r18	; 0x08
    1228:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    122a:	fc 01       	movw	r30, r24
    122c:	84 81       	ldd	r24, Z+4	; 0x04
    122e:	95 81       	ldd	r25, Z+5	; 0x05
    1230:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1232:	26 85       	ldd	r18, Z+14	; 0x0e
    1234:	20 ff       	sbrs	r18, 0
    1236:	0c c0       	rjmp	.+24     	; 0x1250 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1238:	2a 01       	movw	r4, r20
    123a:	f2 e0       	ldi	r31, 0x02	; 2
    123c:	4f 0e       	add	r4, r31
    123e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1240:	84 15       	cp	r24, r4
    1242:	95 05       	cpc	r25, r5
    1244:	58 f4       	brcc	.+22     	; 0x125c <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1246:	1e 82       	std	Y+6, r1	; 0x06
    1248:	1f 82       	std	Y+7, r1	; 0x07
    124a:	18 86       	std	Y+8, r1	; 0x08
    124c:	19 86       	std	Y+9, r1	; 0x09
    124e:	06 c0       	rjmp	.+12     	; 0x125c <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1250:	84 17       	cp	r24, r20
    1252:	95 07       	cpc	r25, r21
    1254:	10 f0       	brcs	.+4      	; 0x125a <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1256:	2a 01       	movw	r4, r20
    1258:	01 c0       	rjmp	.+2      	; 0x125c <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    125a:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    125c:	8e 81       	ldd	r24, Y+6	; 0x06
    125e:	9f 81       	ldd	r25, Y+7	; 0x07
    1260:	a8 85       	ldd	r26, Y+8	; 0x08
    1262:	b9 85       	ldd	r27, Y+9	; 0x09
    1264:	89 2b       	or	r24, r25
    1266:	8a 2b       	or	r24, r26
    1268:	8b 2b       	or	r24, r27
    126a:	09 f4       	brne	.+2      	; 0x126e <xStreamBufferSend+0x88>
    126c:	36 c0       	rjmp	.+108    	; 0x12da <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	e4 d7       	rcall	.+4040   	; 0x223c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    127a:	c4 01       	movw	r24, r8
    127c:	a2 df       	rcall	.-188    	; 0x11c2 <xStreamBufferSpacesAvailable>
    127e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1280:	84 15       	cp	r24, r4
    1282:	95 05       	cpc	r25, r5
    1284:	38 f5       	brcc	.+78     	; 0x12d4 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 dd 14 	call	0x29ba	; 0x29ba <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1290:	0e 94 af 11 	call	0x235e	; 0x235e <xTaskGetCurrentTaskHandle>
    1294:	f4 01       	movw	r30, r8
    1296:	93 87       	std	Z+11, r25	; 0x0b
    1298:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    129e:	ae 80       	ldd	r10, Y+6	; 0x06
    12a0:	bf 80       	ldd	r11, Y+7	; 0x07
    12a2:	c8 84       	ldd	r12, Y+8	; 0x08
    12a4:	d9 84       	ldd	r13, Y+9	; 0x09
    12a6:	e1 2c       	mov	r14, r1
    12a8:	f1 2c       	mov	r15, r1
    12aa:	00 e0       	ldi	r16, 0x00	; 0
    12ac:	10 e0       	ldi	r17, 0x00	; 0
    12ae:	98 01       	movw	r18, r16
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	ba 01       	movw	r22, r20
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 1d 12 	call	0x243a	; 0x243a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    12bc:	f4 01       	movw	r30, r8
    12be:	13 86       	std	Z+11, r1	; 0x0b
    12c0:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    12c2:	be 01       	movw	r22, r28
    12c4:	6a 5f       	subi	r22, 0xFA	; 250
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	de d7       	rcall	.+4028   	; 0x228a <xTaskCheckForTimeOut>
    12ce:	88 23       	and	r24, r24
    12d0:	89 f2       	breq	.-94     	; 0x1274 <xStreamBufferSend+0x8e>
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
                    break;
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    12da:	61 2c       	mov	r6, r1
    12dc:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    12de:	61 14       	cp	r6, r1
    12e0:	71 04       	cpc	r7, r1
    12e2:	19 f4       	brne	.+6      	; 0x12ea <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12e4:	c4 01       	movw	r24, r8
    12e6:	6d df       	rcall	.-294    	; 0x11c2 <xStreamBufferSpacesAvailable>
    12e8:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    12ea:	82 01       	movw	r16, r4
    12ec:	93 01       	movw	r18, r6
    12ee:	a1 01       	movw	r20, r2
    12f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    12f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    12f4:	c4 01       	movw	r24, r8
    12f6:	3e de       	rcall	.-900    	; 0xf74 <prvWriteMessageToBuffer>
    12f8:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    12fa:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    12fc:	e9 f0       	breq	.+58     	; 0x1338 <xStreamBufferSend+0x152>
    12fe:	c4 01       	movw	r24, r8
    1300:	cd dd       	rcall	.-1126   	; 0xe9c <prvBytesInBuffer>
    1302:	f4 01       	movw	r30, r8
    1304:	26 81       	ldd	r18, Z+6	; 0x06
    1306:	37 81       	ldd	r19, Z+7	; 0x07
    1308:	82 17       	cp	r24, r18
    130a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    130c:	a8 f0       	brcs	.+42     	; 0x1338 <xStreamBufferSend+0x152>
    130e:	8d d3       	rcall	.+1818   	; 0x1a2a <vTaskSuspendAll>
    1310:	f4 01       	movw	r30, r8
    1312:	80 85       	ldd	r24, Z+8	; 0x08
    1314:	91 85       	ldd	r25, Z+9	; 0x09
    1316:	89 2b       	or	r24, r25
    1318:	71 f0       	breq	.+28     	; 0x1336 <xStreamBufferSend+0x150>
    131a:	80 85       	ldd	r24, Z+8	; 0x08
    131c:	91 85       	ldd	r25, Z+9	; 0x09
    131e:	e1 2c       	mov	r14, r1
    1320:	f1 2c       	mov	r15, r1
    1322:	00 e0       	ldi	r16, 0x00	; 0
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	a9 01       	movw	r20, r18
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	0e 94 c4 12 	call	0x2588	; 0x2588 <xTaskGenericNotify>
    1330:	f4 01       	movw	r30, r8
    1332:	11 86       	std	Z+9, r1	; 0x09
    1334:	10 86       	std	Z+8, r1	; 0x08
    1336:	b9 d4       	rcall	.+2418   	; 0x1caa <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1338:	c6 01       	movw	r24, r12
    133a:	2b 96       	adiw	r28, 0x0b	; 11
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
    1356:	bf 90       	pop	r11
    1358:	af 90       	pop	r10
    135a:	9f 90       	pop	r9
    135c:	8f 90       	pop	r8
    135e:	7f 90       	pop	r7
    1360:	6f 90       	pop	r6
    1362:	5f 90       	pop	r5
    1364:	4f 90       	pop	r4
    1366:	3f 90       	pop	r3
    1368:	2f 90       	pop	r2
    136a:	08 95       	ret

0000136c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	ec 01       	movw	r28, r24
    1382:	7b 01       	movw	r14, r22
    1384:	5a 01       	movw	r10, r20
    1386:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1388:	8e 85       	ldd	r24, Y+14	; 0x0e
    138a:	80 ff       	sbrs	r24, 0
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    138e:	8a 01       	movw	r16, r20
    1390:	0e 5f       	subi	r16, 0xFE	; 254
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1396:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1398:	ce 01       	movw	r24, r28
    139a:	13 df       	rcall	.-474    	; 0x11c2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    139c:	9c 01       	movw	r18, r24
    139e:	a5 01       	movw	r20, r10
    13a0:	b7 01       	movw	r22, r14
    13a2:	ce 01       	movw	r24, r28
    13a4:	e7 dd       	rcall	.-1074   	; 0xf74 <prvWriteMessageToBuffer>
    13a6:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    13a8:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    13aa:	c1 f0       	breq	.+48     	; 0x13dc <xStreamBufferSendFromISR+0x70>
    13ac:	ce 01       	movw	r24, r28
    13ae:	76 dd       	rcall	.-1300   	; 0xe9c <prvBytesInBuffer>
    13b0:	2e 81       	ldd	r18, Y+6	; 0x06
    13b2:	3f 81       	ldd	r19, Y+7	; 0x07
    13b4:	82 17       	cp	r24, r18
    13b6:	93 07       	cpc	r25, r19
    13b8:	88 f0       	brcs	.+34     	; 0x13dc <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    13ba:	88 85       	ldd	r24, Y+8	; 0x08
    13bc:	99 85       	ldd	r25, Y+9	; 0x09
    13be:	89 2b       	or	r24, r25
    13c0:	69 f0       	breq	.+26     	; 0x13dc <xStreamBufferSendFromISR+0x70>
    13c2:	88 85       	ldd	r24, Y+8	; 0x08
    13c4:	99 85       	ldd	r25, Y+9	; 0x09
    13c6:	e1 2c       	mov	r14, r1
    13c8:	f1 2c       	mov	r15, r1
    13ca:	00 e0       	ldi	r16, 0x00	; 0
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	a9 01       	movw	r20, r18
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	0e 94 bb 13 	call	0x2776	; 0x2776 <xTaskGenericNotifyFromISR>
    13d8:	19 86       	std	Y+9, r1	; 0x09
    13da:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    13dc:	c5 01       	movw	r24, r10
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	08 95       	ret

000013f4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    13f4:	4f 92       	push	r4
    13f6:	5f 92       	push	r5
    13f8:	6f 92       	push	r6
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	ec 01       	movw	r28, r24
    1416:	2b 01       	movw	r4, r22
    1418:	3a 01       	movw	r6, r20
    141a:	58 01       	movw	r10, r16
    141c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    141e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1420:	80 ff       	sbrs	r24, 0
    1422:	05 c0       	rjmp	.+10     	; 0x142e <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1424:	68 94       	set
    1426:	88 24       	eor	r8, r8
    1428:	81 f8       	bld	r8, 1
    142a:	91 2c       	mov	r9, r1
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    142e:	81 2c       	mov	r8, r1
    1430:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1432:	a1 14       	cp	r10, r1
    1434:	b1 04       	cpc	r11, r1
    1436:	c1 04       	cpc	r12, r1
    1438:	d1 04       	cpc	r13, r1
    143a:	31 f1       	breq	.+76     	; 0x1488 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1442:	ce 01       	movw	r24, r28
    1444:	2b dd       	rcall	.-1450   	; 0xe9c <prvBytesInBuffer>
    1446:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1448:	88 16       	cp	r8, r24
    144a:	99 06       	cpc	r9, r25
    144c:	40 f0       	brcs	.+16     	; 0x145e <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 dd 14 	call	0x29ba	; 0x29ba <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1458:	82 d7       	rcall	.+3844   	; 0x235e <xTaskGetCurrentTaskHandle>
    145a:	99 87       	std	Y+9, r25	; 0x09
    145c:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1462:	8e 14       	cp	r8, r14
    1464:	9f 04       	cpc	r9, r15
    1466:	98 f0       	brcs	.+38     	; 0x148e <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1468:	e1 2c       	mov	r14, r1
    146a:	f1 2c       	mov	r15, r1
    146c:	00 e0       	ldi	r16, 0x00	; 0
    146e:	10 e0       	ldi	r17, 0x00	; 0
    1470:	98 01       	movw	r18, r16
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	ba 01       	movw	r22, r20
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	df d7       	rcall	.+4030   	; 0x243a <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    147c:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    147e:	18 86       	std	Y+8, r1	; 0x08
    1480:	ce 01       	movw	r24, r28
    1482:	0c dd       	rcall	.-1512   	; 0xe9c <prvBytesInBuffer>
    1484:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1486:	03 c0       	rjmp	.+6      	; 0x148e <xStreamBufferReceive+0x9a>
    1488:	ce 01       	movw	r24, r28
    148a:	08 dd       	rcall	.-1520   	; 0xe9c <prvBytesInBuffer>
    148c:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    148e:	8e 14       	cp	r8, r14
    1490:	9f 04       	cpc	r9, r15
    1492:	e8 f4       	brcc	.+58     	; 0x14ce <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1494:	84 01       	movw	r16, r8
    1496:	97 01       	movw	r18, r14
    1498:	a3 01       	movw	r20, r6
    149a:	b2 01       	movw	r22, r4
    149c:	ce 01       	movw	r24, r28
    149e:	fc dd       	rcall	.-1032   	; 0x1098 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    14a0:	6c 01       	movw	r12, r24
    14a2:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    14a4:	b1 f0       	breq	.+44     	; 0x14d2 <xStreamBufferReceive+0xde>
    14a6:	c1 d2       	rcall	.+1410   	; 0x1a2a <vTaskSuspendAll>
    14a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    14aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ac:	89 2b       	or	r24, r25
    14ae:	69 f0       	breq	.+26     	; 0x14ca <xStreamBufferReceive+0xd6>
    14b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14b4:	e1 2c       	mov	r14, r1
    14b6:	f1 2c       	mov	r15, r1
    14b8:	00 e0       	ldi	r16, 0x00	; 0
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	a9 01       	movw	r20, r18
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	0e 94 c4 12 	call	0x2588	; 0x2588 <xTaskGenericNotify>
    14c6:	1b 86       	std	Y+11, r1	; 0x0b
    14c8:	1a 86       	std	Y+10, r1	; 0x0a
    14ca:	ef d3       	rcall	.+2014   	; 0x1caa <xTaskResumeAll>
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    14ce:	c1 2c       	mov	r12, r1
    14d0:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    14d2:	c6 01       	movw	r24, r12
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	bf 90       	pop	r11
    14e6:	af 90       	pop	r10
    14e8:	9f 90       	pop	r9
    14ea:	8f 90       	pop	r8
    14ec:	7f 90       	pop	r7
    14ee:	6f 90       	pop	r6
    14f0:	5f 90       	pop	r5
    14f2:	4f 90       	pop	r4
    14f4:	08 95       	ret

000014f6 <prvResetNextTaskUnblockTime>:
    14f6:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <pxDelayedTaskList>
    14fa:	f0 91 44 15 	lds	r31, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    14fe:	80 81       	ld	r24, Z
    1500:	81 11       	cpse	r24, r1
    1502:	0c c0       	rjmp	.+24     	; 0x151c <prvResetNextTaskUnblockTime+0x26>
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	9f ef       	ldi	r25, 0xFF	; 255
    1508:	dc 01       	movw	r26, r24
    150a:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xNextTaskUnblockTime>
    150e:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <xNextTaskUnblockTime+0x1>
    1512:	a0 93 0f 15 	sts	0x150F, r26	; 0x80150f <xNextTaskUnblockTime+0x2>
    1516:	b0 93 10 15 	sts	0x1510, r27	; 0x801510 <xNextTaskUnblockTime+0x3>
    151a:	08 95       	ret
    151c:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <pxDelayedTaskList>
    1520:	f0 91 44 15 	lds	r31, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    1524:	07 80       	ldd	r0, Z+7	; 0x07
    1526:	f0 85       	ldd	r31, Z+8	; 0x08
    1528:	e0 2d       	mov	r30, r0
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	a2 81       	ldd	r26, Z+2	; 0x02
    1530:	b3 81       	ldd	r27, Z+3	; 0x03
    1532:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xNextTaskUnblockTime>
    1536:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <xNextTaskUnblockTime+0x1>
    153a:	a0 93 0f 15 	sts	0x150F, r26	; 0x80150f <xNextTaskUnblockTime+0x2>
    153e:	b0 93 10 15 	sts	0x1510, r27	; 0x801510 <xNextTaskUnblockTime+0x3>
    1542:	08 95       	ret

00001544 <prvDeleteTCB>:
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	ec 01       	movw	r28, r24
    154a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    154c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    154e:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortFree>
    1552:	ce 01       	movw	r24, r28
    1554:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortFree>
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <prvInitialiseNewTask>:
    155e:	4f 92       	push	r4
    1560:	5f 92       	push	r5
    1562:	6f 92       	push	r6
    1564:	7f 92       	push	r7
    1566:	8f 92       	push	r8
    1568:	9f 92       	push	r9
    156a:	af 92       	push	r10
    156c:	bf 92       	push	r11
    156e:	cf 92       	push	r12
    1570:	df 92       	push	r13
    1572:	ef 92       	push	r14
    1574:	ff 92       	push	r15
    1576:	0f 93       	push	r16
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	2c 01       	movw	r4, r24
    157e:	5b 01       	movw	r10, r22
    1580:	4a 01       	movw	r8, r20
    1582:	39 01       	movw	r6, r18
    1584:	e6 01       	movw	r28, r12
    1586:	65 ea       	ldi	r22, 0xA5	; 165
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    158c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    158e:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <memset>
    1592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1596:	21 e0       	ldi	r18, 0x01	; 1
    1598:	82 1a       	sub	r8, r18
    159a:	91 08       	sbc	r9, r1
    159c:	88 0e       	add	r8, r24
    159e:	99 1e       	adc	r9, r25
    15a0:	a1 14       	cp	r10, r1
    15a2:	b1 04       	cpc	r11, r1
    15a4:	89 f4       	brne	.+34     	; 0x15c8 <prvInitialiseNewTask+0x6a>
    15a6:	15 c0       	rjmp	.+42     	; 0x15d2 <prvInitialiseNewTask+0x74>
    15a8:	82 2f       	mov	r24, r18
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	f5 01       	movw	r30, r10
    15ae:	e8 0f       	add	r30, r24
    15b0:	f9 1f       	adc	r31, r25
    15b2:	30 81       	ld	r19, Z
    15b4:	de 01       	movw	r26, r28
    15b6:	a8 0f       	add	r26, r24
    15b8:	b9 1f       	adc	r27, r25
    15ba:	5d 96       	adiw	r26, 0x1d	; 29
    15bc:	3c 93       	st	X, r19
    15be:	80 81       	ld	r24, Z
    15c0:	88 23       	and	r24, r24
    15c2:	29 f0       	breq	.+10     	; 0x15ce <prvInitialiseNewTask+0x70>
    15c4:	2f 5f       	subi	r18, 0xFF	; 255
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <prvInitialiseNewTask+0x6c>
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	20 31       	cpi	r18, 0x10	; 16
    15cc:	68 f3       	brcs	.-38     	; 0x15a8 <prvInitialiseNewTask+0x4a>
    15ce:	1c a6       	std	Y+44, r1	; 0x2c
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <prvInitialiseNewTask+0x76>
    15d2:	1d 8e       	std	Y+29, r1	; 0x1d
    15d4:	0a 30       	cpi	r16, 0x0A	; 10
    15d6:	08 f0       	brcs	.+2      	; 0x15da <prvInitialiseNewTask+0x7c>
    15d8:	09 e0       	ldi	r16, 0x09	; 9
    15da:	0a 8f       	std	Y+26, r16	; 0x1a
    15dc:	0d a7       	std	Y+45, r16	; 0x2d
    15de:	1e a6       	std	Y+46, r1	; 0x2e
    15e0:	ce 01       	movw	r24, r28
    15e2:	02 96       	adiw	r24, 0x02	; 2
    15e4:	00 d8       	rcall	.-4096   	; 0x5e6 <vListInitialiseItem>
    15e6:	ce 01       	movw	r24, r28
    15e8:	0e 96       	adiw	r24, 0x0e	; 14
    15ea:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <vListInitialiseItem>
    15ee:	db 87       	std	Y+11, r29	; 0x0b
    15f0:	ca 87       	std	Y+10, r28	; 0x0a
    15f2:	8a e0       	ldi	r24, 0x0A	; 10
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 e0       	ldi	r26, 0x00	; 0
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	80 1b       	sub	r24, r16
    15fc:	91 09       	sbc	r25, r1
    15fe:	a1 09       	sbc	r26, r1
    1600:	b1 09       	sbc	r27, r1
    1602:	8e 87       	std	Y+14, r24	; 0x0e
    1604:	9f 87       	std	Y+15, r25	; 0x0f
    1606:	a8 8b       	std	Y+16, r26	; 0x10
    1608:	b9 8b       	std	Y+17, r27	; 0x11
    160a:	df 8b       	std	Y+23, r29	; 0x17
    160c:	ce 8b       	std	Y+22, r28	; 0x16
    160e:	84 e0       	ldi	r24, 0x04	; 4
    1610:	fe 01       	movw	r30, r28
    1612:	bf 96       	adiw	r30, 0x2f	; 47
    1614:	df 01       	movw	r26, r30
    1616:	1d 92       	st	X+, r1
    1618:	8a 95       	dec	r24
    161a:	e9 f7       	brne	.-6      	; 0x1616 <prvInitialiseNewTask+0xb8>
    161c:	1b aa       	std	Y+51, r1	; 0x33
    161e:	a3 01       	movw	r20, r6
    1620:	b2 01       	movw	r22, r4
    1622:	c4 01       	movw	r24, r8
    1624:	54 d8       	rcall	.-3928   	; 0x6ce <pxPortInitialiseStack>
    1626:	99 83       	std	Y+1, r25	; 0x01
    1628:	88 83       	st	Y, r24
    162a:	e1 14       	cp	r14, r1
    162c:	f1 04       	cpc	r15, r1
    162e:	19 f0       	breq	.+6      	; 0x1636 <prvInitialiseNewTask+0xd8>
    1630:	f7 01       	movw	r30, r14
    1632:	d1 83       	std	Z+1, r29	; 0x01
    1634:	c0 83       	st	Z, r28
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	bf 90       	pop	r11
    1646:	af 90       	pop	r10
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	08 95       	ret

00001656 <prvInitialiseTaskLists>:
    1656:	cf 93       	push	r28
    1658:	c0 e0       	ldi	r28, 0x00	; 0
    165a:	09 c0       	rjmp	.+18     	; 0x166e <prvInitialiseTaskLists+0x18>
    165c:	2b e0       	ldi	r18, 0x0B	; 11
    165e:	c2 9f       	mul	r28, r18
    1660:	c0 01       	movw	r24, r0
    1662:	11 24       	eor	r1, r1
    1664:	85 5a       	subi	r24, 0xA5	; 165
    1666:	9a 4e       	sbci	r25, 0xEA	; 234
    1668:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vListInitialise>
    166c:	cf 5f       	subi	r28, 0xFF	; 255
    166e:	ca 30       	cpi	r28, 0x0A	; 10
    1670:	a8 f3       	brcs	.-22     	; 0x165c <prvInitialiseTaskLists+0x6>
    1672:	80 e5       	ldi	r24, 0x50	; 80
    1674:	95 e1       	ldi	r25, 0x15	; 21
    1676:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vListInitialise>
    167a:	85 e4       	ldi	r24, 0x45	; 69
    167c:	95 e1       	ldi	r25, 0x15	; 21
    167e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vListInitialise>
    1682:	86 e3       	ldi	r24, 0x36	; 54
    1684:	95 e1       	ldi	r25, 0x15	; 21
    1686:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vListInitialise>
    168a:	8b e2       	ldi	r24, 0x2B	; 43
    168c:	95 e1       	ldi	r25, 0x15	; 21
    168e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vListInitialise>
    1692:	8f e1       	ldi	r24, 0x1F	; 31
    1694:	95 e1       	ldi	r25, 0x15	; 21
    1696:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vListInitialise>
    169a:	80 e5       	ldi	r24, 0x50	; 80
    169c:	95 e1       	ldi	r25, 0x15	; 21
    169e:	90 93 44 15 	sts	0x1544, r25	; 0x801544 <pxDelayedTaskList+0x1>
    16a2:	80 93 43 15 	sts	0x1543, r24	; 0x801543 <pxDelayedTaskList>
    16a6:	85 e4       	ldi	r24, 0x45	; 69
    16a8:	95 e1       	ldi	r25, 0x15	; 21
    16aa:	90 93 42 15 	sts	0x1542, r25	; 0x801542 <pxOverflowDelayedTaskList+0x1>
    16ae:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <pxOverflowDelayedTaskList>
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <prvAddNewTaskToReadyList>:
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	ec 01       	movw	r28, r24
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	0f 92       	push	r0
    16c2:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <uxCurrentNumberOfTasks>
    16c6:	8f 5f       	subi	r24, 0xFF	; 255
    16c8:	80 93 1e 15 	sts	0x151E, r24	; 0x80151e <uxCurrentNumberOfTasks>
    16cc:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    16d0:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    16d4:	89 2b       	or	r24, r25
    16d6:	51 f4       	brne	.+20     	; 0x16ec <prvAddNewTaskToReadyList+0x36>
    16d8:	d0 93 ca 15 	sts	0x15CA, r29	; 0x8015ca <pxCurrentTCB+0x1>
    16dc:	c0 93 c9 15 	sts	0x15C9, r28	; 0x8015c9 <pxCurrentTCB>
    16e0:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <uxCurrentNumberOfTasks>
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 f4       	brne	.+36     	; 0x170c <prvAddNewTaskToReadyList+0x56>
    16e8:	b6 df       	rcall	.-148    	; 0x1656 <prvInitialiseTaskLists>
    16ea:	10 c0       	rjmp	.+32     	; 0x170c <prvAddNewTaskToReadyList+0x56>
    16ec:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <xSchedulerRunning>
    16f0:	81 11       	cpse	r24, r1
    16f2:	0c c0       	rjmp	.+24     	; 0x170c <prvAddNewTaskToReadyList+0x56>
    16f4:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    16f8:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    16fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    16fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1700:	89 17       	cp	r24, r25
    1702:	20 f0       	brcs	.+8      	; 0x170c <prvAddNewTaskToReadyList+0x56>
    1704:	d0 93 ca 15 	sts	0x15CA, r29	; 0x8015ca <pxCurrentTCB+0x1>
    1708:	c0 93 c9 15 	sts	0x15C9, r28	; 0x8015c9 <pxCurrentTCB>
    170c:	80 91 11 15 	lds	r24, 0x1511	; 0x801511 <uxTaskNumber>
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	80 93 11 15 	sts	0x1511, r24	; 0x801511 <uxTaskNumber>
    1716:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1718:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    171c:	8e 17       	cp	r24, r30
    171e:	10 f4       	brcc	.+4      	; 0x1724 <prvAddNewTaskToReadyList+0x6e>
    1720:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    1724:	8b e0       	ldi	r24, 0x0B	; 11
    1726:	8e 9f       	mul	r24, r30
    1728:	f0 01       	movw	r30, r0
    172a:	11 24       	eor	r1, r1
    172c:	e5 5a       	subi	r30, 0xA5	; 165
    172e:	fa 4e       	sbci	r31, 0xEA	; 234
    1730:	01 80       	ldd	r0, Z+1	; 0x01
    1732:	f2 81       	ldd	r31, Z+2	; 0x02
    1734:	e0 2d       	mov	r30, r0
    1736:	ff 83       	std	Y+7, r31	; 0x07
    1738:	ee 83       	std	Y+6, r30	; 0x06
    173a:	26 81       	ldd	r18, Z+6	; 0x06
    173c:	37 81       	ldd	r19, Z+7	; 0x07
    173e:	39 87       	std	Y+9, r19	; 0x09
    1740:	28 87       	std	Y+8, r18	; 0x08
    1742:	a6 81       	ldd	r26, Z+6	; 0x06
    1744:	b7 81       	ldd	r27, Z+7	; 0x07
    1746:	9e 01       	movw	r18, r28
    1748:	2e 5f       	subi	r18, 0xFE	; 254
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	15 96       	adiw	r26, 0x05	; 5
    174e:	3c 93       	st	X, r19
    1750:	2e 93       	st	-X, r18
    1752:	14 97       	sbiw	r26, 0x04	; 4
    1754:	37 83       	std	Z+7, r19	; 0x07
    1756:	26 83       	std	Z+6, r18	; 0x06
    1758:	ea 8d       	ldd	r30, Y+26	; 0x1a
    175a:	8e 9f       	mul	r24, r30
    175c:	f0 01       	movw	r30, r0
    175e:	11 24       	eor	r1, r1
    1760:	e5 5a       	subi	r30, 0xA5	; 165
    1762:	fa 4e       	sbci	r31, 0xEA	; 234
    1764:	fd 87       	std	Y+13, r31	; 0x0d
    1766:	ec 87       	std	Y+12, r30	; 0x0c
    1768:	80 81       	ld	r24, Z
    176a:	8f 5f       	subi	r24, 0xFF	; 255
    176c:	80 83       	st	Z, r24
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <xSchedulerRunning>
    1776:	88 23       	and	r24, r24
    1778:	51 f0       	breq	.+20     	; 0x178e <prvAddNewTaskToReadyList+0xd8>
    177a:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    177e:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1782:	92 8d       	ldd	r25, Z+26	; 0x1a
    1784:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1786:	98 17       	cp	r25, r24
    1788:	10 f4       	brcc	.+4      	; 0x178e <prvAddNewTaskToReadyList+0xd8>
    178a:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <prvCheckTasksWaitingTermination>:
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	1b c0       	rjmp	.+54     	; 0x17d0 <prvCheckTasksWaitingTermination+0x3c>
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	0f 92       	push	r0
    17a0:	e0 91 32 15 	lds	r30, 0x1532	; 0x801532 <xTasksWaitingTermination+0x7>
    17a4:	f0 91 33 15 	lds	r31, 0x1533	; 0x801533 <xTasksWaitingTermination+0x8>
    17a8:	c0 85       	ldd	r28, Z+8	; 0x08
    17aa:	d1 85       	ldd	r29, Z+9	; 0x09
    17ac:	ce 01       	movw	r24, r28
    17ae:	02 96       	adiw	r24, 0x02	; 2
    17b0:	0e 94 34 03 	call	0x668	; 0x668 <uxListRemove>
    17b4:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <uxCurrentNumberOfTasks>
    17b8:	81 50       	subi	r24, 0x01	; 1
    17ba:	80 93 1e 15 	sts	0x151E, r24	; 0x80151e <uxCurrentNumberOfTasks>
    17be:	80 91 2a 15 	lds	r24, 0x152A	; 0x80152a <uxDeletedTasksWaitingCleanUp>
    17c2:	81 50       	subi	r24, 0x01	; 1
    17c4:	80 93 2a 15 	sts	0x152A, r24	; 0x80152a <uxDeletedTasksWaitingCleanUp>
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	ce 01       	movw	r24, r28
    17ce:	ba de       	rcall	.-652    	; 0x1544 <prvDeleteTCB>
    17d0:	80 91 2a 15 	lds	r24, 0x152A	; 0x80152a <uxDeletedTasksWaitingCleanUp>
    17d4:	81 11       	cpse	r24, r1
    17d6:	e1 cf       	rjmp	.-62     	; 0x179a <prvCheckTasksWaitingTermination+0x6>
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	08 95       	ret

000017de <prvAddCurrentTaskToDelayedList>:
    17de:	8f 92       	push	r8
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	6b 01       	movw	r12, r22
    17f4:	7c 01       	movw	r14, r24
    17f6:	c4 2f       	mov	r28, r20
    17f8:	80 90 1a 15 	lds	r8, 0x151A	; 0x80151a <xTickCount>
    17fc:	90 90 1b 15 	lds	r9, 0x151B	; 0x80151b <xTickCount+0x1>
    1800:	a0 90 1c 15 	lds	r10, 0x151C	; 0x80151c <xTickCount+0x2>
    1804:	b0 90 1d 15 	lds	r11, 0x151D	; 0x80151d <xTickCount+0x3>
    1808:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    180c:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1810:	02 96       	adiw	r24, 0x02	; 2
    1812:	0e 94 34 03 	call	0x668	; 0x668 <uxListRemove>
    1816:	8f ef       	ldi	r24, 0xFF	; 255
    1818:	c8 16       	cp	r12, r24
    181a:	d8 06       	cpc	r13, r24
    181c:	e8 06       	cpc	r14, r24
    181e:	f8 06       	cpc	r15, r24
    1820:	b1 f5       	brne	.+108    	; 0x188e <prvAddCurrentTaskToDelayedList+0xb0>
    1822:	cc 23       	and	r28, r28
    1824:	a1 f1       	breq	.+104    	; 0x188e <prvAddCurrentTaskToDelayedList+0xb0>
    1826:	ef e1       	ldi	r30, 0x1F	; 31
    1828:	f5 e1       	ldi	r31, 0x15	; 21
    182a:	a1 81       	ldd	r26, Z+1	; 0x01
    182c:	b2 81       	ldd	r27, Z+2	; 0x02
    182e:	c0 91 c9 15 	lds	r28, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1832:	d0 91 ca 15 	lds	r29, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1836:	bf 83       	std	Y+7, r27	; 0x07
    1838:	ae 83       	std	Y+6, r26	; 0x06
    183a:	c0 91 c9 15 	lds	r28, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    183e:	d0 91 ca 15 	lds	r29, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1842:	16 96       	adiw	r26, 0x06	; 6
    1844:	8d 91       	ld	r24, X+
    1846:	9c 91       	ld	r25, X
    1848:	17 97       	sbiw	r26, 0x07	; 7
    184a:	99 87       	std	Y+9, r25	; 0x09
    184c:	88 87       	std	Y+8, r24	; 0x08
    184e:	16 96       	adiw	r26, 0x06	; 6
    1850:	cd 91       	ld	r28, X+
    1852:	dc 91       	ld	r29, X
    1854:	17 97       	sbiw	r26, 0x07	; 7
    1856:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    185a:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    185e:	02 96       	adiw	r24, 0x02	; 2
    1860:	9d 83       	std	Y+5, r25	; 0x05
    1862:	8c 83       	std	Y+4, r24	; 0x04
    1864:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1868:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    186c:	02 96       	adiw	r24, 0x02	; 2
    186e:	17 96       	adiw	r26, 0x07	; 7
    1870:	9c 93       	st	X, r25
    1872:	8e 93       	st	-X, r24
    1874:	16 97       	sbiw	r26, 0x06	; 6
    1876:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    187a:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    187e:	1d 96       	adiw	r26, 0x0d	; 13
    1880:	fc 93       	st	X, r31
    1882:	ee 93       	st	-X, r30
    1884:	1c 97       	sbiw	r26, 0x0c	; 12
    1886:	80 81       	ld	r24, Z
    1888:	8f 5f       	subi	r24, 0xFF	; 255
    188a:	80 83       	st	Z, r24
    188c:	3f c0       	rjmp	.+126    	; 0x190c <prvAddCurrentTaskToDelayedList+0x12e>
    188e:	c8 0c       	add	r12, r8
    1890:	d9 1c       	adc	r13, r9
    1892:	ea 1c       	adc	r14, r10
    1894:	fb 1c       	adc	r15, r11
    1896:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    189a:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    189e:	c2 82       	std	Z+2, r12	; 0x02
    18a0:	d3 82       	std	Z+3, r13	; 0x03
    18a2:	e4 82       	std	Z+4, r14	; 0x04
    18a4:	f5 82       	std	Z+5, r15	; 0x05
    18a6:	c8 14       	cp	r12, r8
    18a8:	d9 04       	cpc	r13, r9
    18aa:	ea 04       	cpc	r14, r10
    18ac:	fb 04       	cpc	r15, r11
    18ae:	68 f4       	brcc	.+26     	; 0x18ca <prvAddCurrentTaskToDelayedList+0xec>
    18b0:	60 91 c9 15 	lds	r22, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    18b4:	70 91 ca 15 	lds	r23, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    18b8:	80 91 41 15 	lds	r24, 0x1541	; 0x801541 <pxOverflowDelayedTaskList>
    18bc:	90 91 42 15 	lds	r25, 0x1542	; 0x801542 <pxOverflowDelayedTaskList+0x1>
    18c0:	6e 5f       	subi	r22, 0xFE	; 254
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsert>
    18c8:	21 c0       	rjmp	.+66     	; 0x190c <prvAddCurrentTaskToDelayedList+0x12e>
    18ca:	60 91 c9 15 	lds	r22, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    18ce:	70 91 ca 15 	lds	r23, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    18d2:	80 91 43 15 	lds	r24, 0x1543	; 0x801543 <pxDelayedTaskList>
    18d6:	90 91 44 15 	lds	r25, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    18da:	6e 5f       	subi	r22, 0xFE	; 254
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsert>
    18e2:	80 91 0d 15 	lds	r24, 0x150D	; 0x80150d <xNextTaskUnblockTime>
    18e6:	90 91 0e 15 	lds	r25, 0x150E	; 0x80150e <xNextTaskUnblockTime+0x1>
    18ea:	a0 91 0f 15 	lds	r26, 0x150F	; 0x80150f <xNextTaskUnblockTime+0x2>
    18ee:	b0 91 10 15 	lds	r27, 0x1510	; 0x801510 <xNextTaskUnblockTime+0x3>
    18f2:	c8 16       	cp	r12, r24
    18f4:	d9 06       	cpc	r13, r25
    18f6:	ea 06       	cpc	r14, r26
    18f8:	fb 06       	cpc	r15, r27
    18fa:	40 f4       	brcc	.+16     	; 0x190c <prvAddCurrentTaskToDelayedList+0x12e>
    18fc:	c0 92 0d 15 	sts	0x150D, r12	; 0x80150d <xNextTaskUnblockTime>
    1900:	d0 92 0e 15 	sts	0x150E, r13	; 0x80150e <xNextTaskUnblockTime+0x1>
    1904:	e0 92 0f 15 	sts	0x150F, r14	; 0x80150f <xNextTaskUnblockTime+0x2>
    1908:	f0 92 10 15 	sts	0x1510, r15	; 0x801510 <xNextTaskUnblockTime+0x3>
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	ff 90       	pop	r15
    1912:	ef 90       	pop	r14
    1914:	df 90       	pop	r13
    1916:	cf 90       	pop	r12
    1918:	bf 90       	pop	r11
    191a:	af 90       	pop	r10
    191c:	9f 90       	pop	r9
    191e:	8f 90       	pop	r8
    1920:	08 95       	ret

00001922 <xTaskCreate>:
    1922:	2f 92       	push	r2
    1924:	3f 92       	push	r3
    1926:	4f 92       	push	r4
    1928:	5f 92       	push	r5
    192a:	6f 92       	push	r6
    192c:	7f 92       	push	r7
    192e:	8f 92       	push	r8
    1930:	9f 92       	push	r9
    1932:	af 92       	push	r10
    1934:	bf 92       	push	r11
    1936:	cf 92       	push	r12
    1938:	df 92       	push	r13
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	0f 93       	push	r16
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	3c 01       	movw	r6, r24
    1946:	1b 01       	movw	r2, r22
    1948:	4a 01       	movw	r8, r20
    194a:	29 01       	movw	r4, r18
    194c:	ca 01       	movw	r24, r20
    194e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <pvPortMalloc>
    1952:	6c 01       	movw	r12, r24
    1954:	89 2b       	or	r24, r25
    1956:	71 f0       	breq	.+28     	; 0x1974 <xTaskCreate+0x52>
    1958:	84 e3       	ldi	r24, 0x34	; 52
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <pvPortMalloc>
    1960:	ec 01       	movw	r28, r24
    1962:	89 2b       	or	r24, r25
    1964:	19 f0       	breq	.+6      	; 0x196c <xTaskCreate+0x4a>
    1966:	dc 8e       	std	Y+28, r13	; 0x1c
    1968:	cb 8e       	std	Y+27, r12	; 0x1b
    196a:	06 c0       	rjmp	.+12     	; 0x1978 <xTaskCreate+0x56>
    196c:	c6 01       	movw	r24, r12
    196e:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortFree>
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <xTaskCreate+0x56>
    1974:	c0 e0       	ldi	r28, 0x00	; 0
    1976:	d0 e0       	ldi	r29, 0x00	; 0
    1978:	20 97       	sbiw	r28, 0x00	; 0
    197a:	61 f0       	breq	.+24     	; 0x1994 <xTaskCreate+0x72>
    197c:	a1 2c       	mov	r10, r1
    197e:	b1 2c       	mov	r11, r1
    1980:	6e 01       	movw	r12, r28
    1982:	92 01       	movw	r18, r4
    1984:	a4 01       	movw	r20, r8
    1986:	b1 01       	movw	r22, r2
    1988:	c3 01       	movw	r24, r6
    198a:	e9 dd       	rcall	.-1070   	; 0x155e <prvInitialiseNewTask>
    198c:	ce 01       	movw	r24, r28
    198e:	93 de       	rcall	.-730    	; 0x16b6 <prvAddNewTaskToReadyList>
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <xTaskCreate+0x74>
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	df 90       	pop	r13
    19a2:	cf 90       	pop	r12
    19a4:	bf 90       	pop	r11
    19a6:	af 90       	pop	r10
    19a8:	9f 90       	pop	r9
    19aa:	8f 90       	pop	r8
    19ac:	7f 90       	pop	r7
    19ae:	6f 90       	pop	r6
    19b0:	5f 90       	pop	r5
    19b2:	4f 90       	pop	r4
    19b4:	3f 90       	pop	r3
    19b6:	2f 90       	pop	r2
    19b8:	08 95       	ret

000019ba <vTaskStartScheduler>:
    19ba:	ef 92       	push	r14
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	0f 2e       	mov	r0, r31
    19c2:	fb e0       	ldi	r31, 0x0B	; 11
    19c4:	ef 2e       	mov	r14, r31
    19c6:	f5 e1       	ldi	r31, 0x15	; 21
    19c8:	ff 2e       	mov	r15, r31
    19ca:	f0 2d       	mov	r31, r0
    19cc:	00 e0       	ldi	r16, 0x00	; 0
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 ec       	ldi	r20, 0xC0	; 192
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	62 e4       	ldi	r22, 0x42	; 66
    19d8:	72 e0       	ldi	r23, 0x02	; 2
    19da:	8e e4       	ldi	r24, 0x4E	; 78
    19dc:	91 e0       	ldi	r25, 0x01	; 1
    19de:	a1 df       	rcall	.-190    	; 0x1922 <xTaskCreate>
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	11 f4       	brne	.+4      	; 0x19e8 <vTaskStartScheduler+0x2e>
    19e4:	0e 94 81 15 	call	0x2b02	; 0x2b02 <xTimerCreateTimerTask>
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	c9 f4       	brne	.+50     	; 0x1a1e <vTaskStartScheduler+0x64>
    19ec:	f8 94       	cli
    19ee:	8f ef       	ldi	r24, 0xFF	; 255
    19f0:	9f ef       	ldi	r25, 0xFF	; 255
    19f2:	dc 01       	movw	r26, r24
    19f4:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xNextTaskUnblockTime>
    19f8:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <xNextTaskUnblockTime+0x1>
    19fc:	a0 93 0f 15 	sts	0x150F, r26	; 0x80150f <xNextTaskUnblockTime+0x2>
    1a00:	b0 93 10 15 	sts	0x1510, r27	; 0x801510 <xNextTaskUnblockTime+0x3>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <xSchedulerRunning>
    1a0a:	10 92 1a 15 	sts	0x151A, r1	; 0x80151a <xTickCount>
    1a0e:	10 92 1b 15 	sts	0x151B, r1	; 0x80151b <xTickCount+0x1>
    1a12:	10 92 1c 15 	sts	0x151C, r1	; 0x80151c <xTickCount+0x2>
    1a16:	10 92 1d 15 	sts	0x151D, r1	; 0x80151d <xTickCount+0x3>
    1a1a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <xPortStartScheduler>
    1a1e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	08 95       	ret

00001a2a <vTaskSuspendAll>:
    1a2a:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    1a2e:	8f 5f       	subi	r24, 0xFF	; 255
    1a30:	80 93 0a 15 	sts	0x150A, r24	; 0x80150a <uxSchedulerSuspended>
    1a34:	08 95       	ret

00001a36 <xTaskGetTickCount>:
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	0f 92       	push	r0
    1a3c:	60 91 1a 15 	lds	r22, 0x151A	; 0x80151a <xTickCount>
    1a40:	70 91 1b 15 	lds	r23, 0x151B	; 0x80151b <xTickCount+0x1>
    1a44:	80 91 1c 15 	lds	r24, 0x151C	; 0x80151c <xTickCount+0x2>
    1a48:	90 91 1d 15 	lds	r25, 0x151D	; 0x80151d <xTickCount+0x3>
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	08 95       	ret

00001a52 <xTaskIncrementTick>:
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    1a62:	81 11       	cpse	r24, r1
    1a64:	05 c1       	rjmp	.+522    	; 0x1c70 <xTaskIncrementTick+0x21e>
    1a66:	c0 90 1a 15 	lds	r12, 0x151A	; 0x80151a <xTickCount>
    1a6a:	d0 90 1b 15 	lds	r13, 0x151B	; 0x80151b <xTickCount+0x1>
    1a6e:	e0 90 1c 15 	lds	r14, 0x151C	; 0x80151c <xTickCount+0x2>
    1a72:	f0 90 1d 15 	lds	r15, 0x151D	; 0x80151d <xTickCount+0x3>
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	c8 1a       	sub	r12, r24
    1a7a:	d8 0a       	sbc	r13, r24
    1a7c:	e8 0a       	sbc	r14, r24
    1a7e:	f8 0a       	sbc	r15, r24
    1a80:	c0 92 1a 15 	sts	0x151A, r12	; 0x80151a <xTickCount>
    1a84:	d0 92 1b 15 	sts	0x151B, r13	; 0x80151b <xTickCount+0x1>
    1a88:	e0 92 1c 15 	sts	0x151C, r14	; 0x80151c <xTickCount+0x2>
    1a8c:	f0 92 1d 15 	sts	0x151D, r15	; 0x80151d <xTickCount+0x3>
    1a90:	c1 14       	cp	r12, r1
    1a92:	d1 04       	cpc	r13, r1
    1a94:	e1 04       	cpc	r14, r1
    1a96:	f1 04       	cpc	r15, r1
    1a98:	b1 f4       	brne	.+44     	; 0x1ac6 <xTaskIncrementTick+0x74>
    1a9a:	80 91 43 15 	lds	r24, 0x1543	; 0x801543 <pxDelayedTaskList>
    1a9e:	90 91 44 15 	lds	r25, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    1aa2:	20 91 41 15 	lds	r18, 0x1541	; 0x801541 <pxOverflowDelayedTaskList>
    1aa6:	30 91 42 15 	lds	r19, 0x1542	; 0x801542 <pxOverflowDelayedTaskList+0x1>
    1aaa:	30 93 44 15 	sts	0x1544, r19	; 0x801544 <pxDelayedTaskList+0x1>
    1aae:	20 93 43 15 	sts	0x1543, r18	; 0x801543 <pxDelayedTaskList>
    1ab2:	90 93 42 15 	sts	0x1542, r25	; 0x801542 <pxOverflowDelayedTaskList+0x1>
    1ab6:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <pxOverflowDelayedTaskList>
    1aba:	80 91 12 15 	lds	r24, 0x1512	; 0x801512 <xNumOfOverflows>
    1abe:	8f 5f       	subi	r24, 0xFF	; 255
    1ac0:	80 93 12 15 	sts	0x1512, r24	; 0x801512 <xNumOfOverflows>
    1ac4:	18 dd       	rcall	.-1488   	; 0x14f6 <prvResetNextTaskUnblockTime>
    1ac6:	80 91 0d 15 	lds	r24, 0x150D	; 0x80150d <xNextTaskUnblockTime>
    1aca:	90 91 0e 15 	lds	r25, 0x150E	; 0x80150e <xNextTaskUnblockTime+0x1>
    1ace:	a0 91 0f 15 	lds	r26, 0x150F	; 0x80150f <xNextTaskUnblockTime+0x2>
    1ad2:	b0 91 10 15 	lds	r27, 0x1510	; 0x801510 <xNextTaskUnblockTime+0x3>
    1ad6:	c8 16       	cp	r12, r24
    1ad8:	d9 06       	cpc	r13, r25
    1ada:	ea 06       	cpc	r14, r26
    1adc:	fb 06       	cpc	r15, r27
    1ade:	20 f4       	brcc	.+8      	; 0x1ae8 <xTaskIncrementTick+0x96>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	b2 c0       	rjmp	.+356    	; 0x1c48 <xTaskIncrementTick+0x1f6>
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	01 c0       	rjmp	.+2      	; 0x1aea <xTaskIncrementTick+0x98>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <pxDelayedTaskList>
    1aee:	f0 91 44 15 	lds	r31, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    1af2:	90 81       	ld	r25, Z
    1af4:	91 11       	cpse	r25, r1
    1af6:	0c c0       	rjmp	.+24     	; 0x1b10 <xTaskIncrementTick+0xbe>
    1af8:	4f ef       	ldi	r20, 0xFF	; 255
    1afa:	5f ef       	ldi	r21, 0xFF	; 255
    1afc:	ba 01       	movw	r22, r20
    1afe:	40 93 0d 15 	sts	0x150D, r20	; 0x80150d <xNextTaskUnblockTime>
    1b02:	50 93 0e 15 	sts	0x150E, r21	; 0x80150e <xNextTaskUnblockTime+0x1>
    1b06:	60 93 0f 15 	sts	0x150F, r22	; 0x80150f <xNextTaskUnblockTime+0x2>
    1b0a:	70 93 10 15 	sts	0x1510, r23	; 0x801510 <xNextTaskUnblockTime+0x3>
    1b0e:	9c c0       	rjmp	.+312    	; 0x1c48 <xTaskIncrementTick+0x1f6>
    1b10:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <pxDelayedTaskList>
    1b14:	f0 91 44 15 	lds	r31, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    1b18:	07 80       	ldd	r0, Z+7	; 0x07
    1b1a:	f0 85       	ldd	r31, Z+8	; 0x08
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	00 84       	ldd	r0, Z+8	; 0x08
    1b20:	f1 85       	ldd	r31, Z+9	; 0x09
    1b22:	e0 2d       	mov	r30, r0
    1b24:	42 81       	ldd	r20, Z+2	; 0x02
    1b26:	53 81       	ldd	r21, Z+3	; 0x03
    1b28:	64 81       	ldd	r22, Z+4	; 0x04
    1b2a:	75 81       	ldd	r23, Z+5	; 0x05
    1b2c:	c4 16       	cp	r12, r20
    1b2e:	d5 06       	cpc	r13, r21
    1b30:	e6 06       	cpc	r14, r22
    1b32:	f7 06       	cpc	r15, r23
    1b34:	48 f4       	brcc	.+18     	; 0x1b48 <xTaskIncrementTick+0xf6>
    1b36:	40 93 0d 15 	sts	0x150D, r20	; 0x80150d <xNextTaskUnblockTime>
    1b3a:	50 93 0e 15 	sts	0x150E, r21	; 0x80150e <xNextTaskUnblockTime+0x1>
    1b3e:	60 93 0f 15 	sts	0x150F, r22	; 0x80150f <xNextTaskUnblockTime+0x2>
    1b42:	70 93 10 15 	sts	0x1510, r23	; 0x801510 <xNextTaskUnblockTime+0x3>
    1b46:	80 c0       	rjmp	.+256    	; 0x1c48 <xTaskIncrementTick+0x1f6>
    1b48:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b4a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b4c:	c6 81       	ldd	r28, Z+6	; 0x06
    1b4e:	d7 81       	ldd	r29, Z+7	; 0x07
    1b50:	20 85       	ldd	r18, Z+8	; 0x08
    1b52:	31 85       	ldd	r19, Z+9	; 0x09
    1b54:	3f 83       	std	Y+7, r19	; 0x07
    1b56:	2e 83       	std	Y+6, r18	; 0x06
    1b58:	c0 85       	ldd	r28, Z+8	; 0x08
    1b5a:	d1 85       	ldd	r29, Z+9	; 0x09
    1b5c:	26 81       	ldd	r18, Z+6	; 0x06
    1b5e:	37 81       	ldd	r19, Z+7	; 0x07
    1b60:	3d 83       	std	Y+5, r19	; 0x05
    1b62:	2c 83       	std	Y+4, r18	; 0x04
    1b64:	11 96       	adiw	r26, 0x01	; 1
    1b66:	4d 91       	ld	r20, X+
    1b68:	5c 91       	ld	r21, X
    1b6a:	12 97       	sbiw	r26, 0x02	; 2
    1b6c:	9f 01       	movw	r18, r30
    1b6e:	2e 5f       	subi	r18, 0xFE	; 254
    1b70:	3f 4f       	sbci	r19, 0xFF	; 255
    1b72:	42 17       	cp	r20, r18
    1b74:	53 07       	cpc	r21, r19
    1b76:	31 f4       	brne	.+12     	; 0x1b84 <xTaskIncrementTick+0x132>
    1b78:	40 85       	ldd	r20, Z+8	; 0x08
    1b7a:	51 85       	ldd	r21, Z+9	; 0x09
    1b7c:	12 96       	adiw	r26, 0x02	; 2
    1b7e:	5c 93       	st	X, r21
    1b80:	4e 93       	st	-X, r20
    1b82:	11 97       	sbiw	r26, 0x01	; 1
    1b84:	15 86       	std	Z+13, r1	; 0x0d
    1b86:	14 86       	std	Z+12, r1	; 0x0c
    1b88:	9c 91       	ld	r25, X
    1b8a:	91 50       	subi	r25, 0x01	; 1
    1b8c:	9c 93       	st	X, r25
    1b8e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b90:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b92:	10 97       	sbiw	r26, 0x00	; 0
    1b94:	09 f1       	breq	.+66     	; 0x1bd8 <xTaskIncrementTick+0x186>
    1b96:	c2 89       	ldd	r28, Z+18	; 0x12
    1b98:	d3 89       	ldd	r29, Z+19	; 0x13
    1b9a:	44 89       	ldd	r20, Z+20	; 0x14
    1b9c:	55 89       	ldd	r21, Z+21	; 0x15
    1b9e:	5f 83       	std	Y+7, r21	; 0x07
    1ba0:	4e 83       	std	Y+6, r20	; 0x06
    1ba2:	c4 89       	ldd	r28, Z+20	; 0x14
    1ba4:	d5 89       	ldd	r29, Z+21	; 0x15
    1ba6:	42 89       	ldd	r20, Z+18	; 0x12
    1ba8:	53 89       	ldd	r21, Z+19	; 0x13
    1baa:	5d 83       	std	Y+5, r21	; 0x05
    1bac:	4c 83       	std	Y+4, r20	; 0x04
    1bae:	11 96       	adiw	r26, 0x01	; 1
    1bb0:	6d 91       	ld	r22, X+
    1bb2:	7c 91       	ld	r23, X
    1bb4:	12 97       	sbiw	r26, 0x02	; 2
    1bb6:	af 01       	movw	r20, r30
    1bb8:	42 5f       	subi	r20, 0xF2	; 242
    1bba:	5f 4f       	sbci	r21, 0xFF	; 255
    1bbc:	64 17       	cp	r22, r20
    1bbe:	75 07       	cpc	r23, r21
    1bc0:	31 f4       	brne	.+12     	; 0x1bce <xTaskIncrementTick+0x17c>
    1bc2:	44 89       	ldd	r20, Z+20	; 0x14
    1bc4:	55 89       	ldd	r21, Z+21	; 0x15
    1bc6:	12 96       	adiw	r26, 0x02	; 2
    1bc8:	5c 93       	st	X, r21
    1bca:	4e 93       	st	-X, r20
    1bcc:	11 97       	sbiw	r26, 0x01	; 1
    1bce:	11 8e       	std	Z+25, r1	; 0x19
    1bd0:	10 8e       	std	Z+24, r1	; 0x18
    1bd2:	9c 91       	ld	r25, X
    1bd4:	91 50       	subi	r25, 0x01	; 1
    1bd6:	9c 93       	st	X, r25
    1bd8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1bda:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <uxTopReadyPriority>
    1bde:	9a 17       	cp	r25, r26
    1be0:	10 f4       	brcc	.+4      	; 0x1be6 <xTaskIncrementTick+0x194>
    1be2:	a0 93 19 15 	sts	0x1519, r26	; 0x801519 <uxTopReadyPriority>
    1be6:	9b e0       	ldi	r25, 0x0B	; 11
    1be8:	9a 9f       	mul	r25, r26
    1bea:	d0 01       	movw	r26, r0
    1bec:	11 24       	eor	r1, r1
    1bee:	a5 5a       	subi	r26, 0xA5	; 165
    1bf0:	ba 4e       	sbci	r27, 0xEA	; 234
    1bf2:	11 96       	adiw	r26, 0x01	; 1
    1bf4:	0d 90       	ld	r0, X+
    1bf6:	bc 91       	ld	r27, X
    1bf8:	a0 2d       	mov	r26, r0
    1bfa:	b7 83       	std	Z+7, r27	; 0x07
    1bfc:	a6 83       	std	Z+6, r26	; 0x06
    1bfe:	16 96       	adiw	r26, 0x06	; 6
    1c00:	4d 91       	ld	r20, X+
    1c02:	5c 91       	ld	r21, X
    1c04:	17 97       	sbiw	r26, 0x07	; 7
    1c06:	51 87       	std	Z+9, r21	; 0x09
    1c08:	40 87       	std	Z+8, r20	; 0x08
    1c0a:	16 96       	adiw	r26, 0x06	; 6
    1c0c:	cd 91       	ld	r28, X+
    1c0e:	dc 91       	ld	r29, X
    1c10:	17 97       	sbiw	r26, 0x07	; 7
    1c12:	3d 83       	std	Y+5, r19	; 0x05
    1c14:	2c 83       	std	Y+4, r18	; 0x04
    1c16:	17 96       	adiw	r26, 0x07	; 7
    1c18:	3c 93       	st	X, r19
    1c1a:	2e 93       	st	-X, r18
    1c1c:	16 97       	sbiw	r26, 0x06	; 6
    1c1e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c20:	9a 9f       	mul	r25, r26
    1c22:	d0 01       	movw	r26, r0
    1c24:	11 24       	eor	r1, r1
    1c26:	a5 5a       	subi	r26, 0xA5	; 165
    1c28:	ba 4e       	sbci	r27, 0xEA	; 234
    1c2a:	b5 87       	std	Z+13, r27	; 0x0d
    1c2c:	a4 87       	std	Z+12, r26	; 0x0c
    1c2e:	9c 91       	ld	r25, X
    1c30:	9f 5f       	subi	r25, 0xFF	; 255
    1c32:	9c 93       	st	X, r25
    1c34:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c36:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1c3a:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1c3e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c40:	29 17       	cp	r18, r25
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <xTaskIncrementTick+0x1f4>
    1c44:	4f cf       	rjmp	.-354    	; 0x1ae4 <xTaskIncrementTick+0x92>
    1c46:	51 cf       	rjmp	.-350    	; 0x1aea <xTaskIncrementTick+0x98>
    1c48:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1c4c:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1c50:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1c52:	9b e0       	ldi	r25, 0x0B	; 11
    1c54:	e9 9f       	mul	r30, r25
    1c56:	f0 01       	movw	r30, r0
    1c58:	11 24       	eor	r1, r1
    1c5a:	e5 5a       	subi	r30, 0xA5	; 165
    1c5c:	fa 4e       	sbci	r31, 0xEA	; 234
    1c5e:	90 81       	ld	r25, Z
    1c60:	92 30       	cpi	r25, 0x02	; 2
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <xTaskIncrementTick+0x214>
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 91 13 15 	lds	r25, 0x1513	; 0x801513 <xYieldPending>
    1c6a:	91 11       	cpse	r25, r1
    1c6c:	16 c0       	rjmp	.+44     	; 0x1c9a <xTaskIncrementTick+0x248>
    1c6e:	16 c0       	rjmp	.+44     	; 0x1c9c <xTaskIncrementTick+0x24a>
    1c70:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <xPendedTicks>
    1c74:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <xPendedTicks+0x1>
    1c78:	a0 91 16 15 	lds	r26, 0x1516	; 0x801516 <xPendedTicks+0x2>
    1c7c:	b0 91 17 15 	lds	r27, 0x1517	; 0x801517 <xPendedTicks+0x3>
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	a1 1d       	adc	r26, r1
    1c84:	b1 1d       	adc	r27, r1
    1c86:	80 93 14 15 	sts	0x1514, r24	; 0x801514 <xPendedTicks>
    1c8a:	90 93 15 15 	sts	0x1515, r25	; 0x801515 <xPendedTicks+0x1>
    1c8e:	a0 93 16 15 	sts	0x1516, r26	; 0x801516 <xPendedTicks+0x2>
    1c92:	b0 93 17 15 	sts	0x1517, r27	; 0x801517 <xPendedTicks+0x3>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	01 c0       	rjmp	.+2      	; 0x1c9c <xTaskIncrementTick+0x24a>
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	08 95       	ret

00001caa <xTaskResumeAll>:
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	0f 92       	push	r0
    1cbc:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    1cc0:	81 50       	subi	r24, 0x01	; 1
    1cc2:	80 93 0a 15 	sts	0x150A, r24	; 0x80150a <uxSchedulerSuspended>
    1cc6:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	be c0       	rjmp	.+380    	; 0x1e4a <xTaskResumeAll+0x1a0>
    1cce:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <uxCurrentNumberOfTasks>
    1cd2:	81 11       	cpse	r24, r1
    1cd4:	88 c0       	rjmp	.+272    	; 0x1de6 <xTaskResumeAll+0x13c>
    1cd6:	bc c0       	rjmp	.+376    	; 0x1e50 <xTaskResumeAll+0x1a6>
    1cd8:	e0 91 3d 15 	lds	r30, 0x153D	; 0x80153d <xPendingReadyList+0x7>
    1cdc:	f0 91 3e 15 	lds	r31, 0x153E	; 0x80153e <xPendingReadyList+0x8>
    1ce0:	00 84       	ldd	r0, Z+8	; 0x08
    1ce2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ce4:	e0 2d       	mov	r30, r0
    1ce6:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ce8:	b1 8d       	ldd	r27, Z+25	; 0x19
    1cea:	c2 89       	ldd	r28, Z+18	; 0x12
    1cec:	d3 89       	ldd	r29, Z+19	; 0x13
    1cee:	84 89       	ldd	r24, Z+20	; 0x14
    1cf0:	95 89       	ldd	r25, Z+21	; 0x15
    1cf2:	9f 83       	std	Y+7, r25	; 0x07
    1cf4:	8e 83       	std	Y+6, r24	; 0x06
    1cf6:	c4 89       	ldd	r28, Z+20	; 0x14
    1cf8:	d5 89       	ldd	r29, Z+21	; 0x15
    1cfa:	82 89       	ldd	r24, Z+18	; 0x12
    1cfc:	93 89       	ldd	r25, Z+19	; 0x13
    1cfe:	9d 83       	std	Y+5, r25	; 0x05
    1d00:	8c 83       	std	Y+4, r24	; 0x04
    1d02:	11 96       	adiw	r26, 0x01	; 1
    1d04:	2d 91       	ld	r18, X+
    1d06:	3c 91       	ld	r19, X
    1d08:	12 97       	sbiw	r26, 0x02	; 2
    1d0a:	cf 01       	movw	r24, r30
    1d0c:	0e 96       	adiw	r24, 0x0e	; 14
    1d0e:	28 17       	cp	r18, r24
    1d10:	39 07       	cpc	r19, r25
    1d12:	31 f4       	brne	.+12     	; 0x1d20 <xTaskResumeAll+0x76>
    1d14:	84 89       	ldd	r24, Z+20	; 0x14
    1d16:	95 89       	ldd	r25, Z+21	; 0x15
    1d18:	12 96       	adiw	r26, 0x02	; 2
    1d1a:	9c 93       	st	X, r25
    1d1c:	8e 93       	st	-X, r24
    1d1e:	11 97       	sbiw	r26, 0x01	; 1
    1d20:	11 8e       	std	Z+25, r1	; 0x19
    1d22:	10 8e       	std	Z+24, r1	; 0x18
    1d24:	8c 91       	ld	r24, X
    1d26:	81 50       	subi	r24, 0x01	; 1
    1d28:	8c 93       	st	X, r24
    1d2a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d2c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d2e:	c6 81       	ldd	r28, Z+6	; 0x06
    1d30:	d7 81       	ldd	r29, Z+7	; 0x07
    1d32:	80 85       	ldd	r24, Z+8	; 0x08
    1d34:	91 85       	ldd	r25, Z+9	; 0x09
    1d36:	9f 83       	std	Y+7, r25	; 0x07
    1d38:	8e 83       	std	Y+6, r24	; 0x06
    1d3a:	c0 85       	ldd	r28, Z+8	; 0x08
    1d3c:	d1 85       	ldd	r29, Z+9	; 0x09
    1d3e:	86 81       	ldd	r24, Z+6	; 0x06
    1d40:	97 81       	ldd	r25, Z+7	; 0x07
    1d42:	9d 83       	std	Y+5, r25	; 0x05
    1d44:	8c 83       	std	Y+4, r24	; 0x04
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	8d 91       	ld	r24, X+
    1d4a:	9c 91       	ld	r25, X
    1d4c:	12 97       	sbiw	r26, 0x02	; 2
    1d4e:	9f 01       	movw	r18, r30
    1d50:	2e 5f       	subi	r18, 0xFE	; 254
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    1d54:	82 17       	cp	r24, r18
    1d56:	93 07       	cpc	r25, r19
    1d58:	31 f4       	brne	.+12     	; 0x1d66 <xTaskResumeAll+0xbc>
    1d5a:	80 85       	ldd	r24, Z+8	; 0x08
    1d5c:	91 85       	ldd	r25, Z+9	; 0x09
    1d5e:	12 96       	adiw	r26, 0x02	; 2
    1d60:	9c 93       	st	X, r25
    1d62:	8e 93       	st	-X, r24
    1d64:	11 97       	sbiw	r26, 0x01	; 1
    1d66:	15 86       	std	Z+13, r1	; 0x0d
    1d68:	14 86       	std	Z+12, r1	; 0x0c
    1d6a:	8c 91       	ld	r24, X
    1d6c:	81 50       	subi	r24, 0x01	; 1
    1d6e:	8c 93       	st	X, r24
    1d70:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d72:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    1d76:	8a 17       	cp	r24, r26
    1d78:	10 f4       	brcc	.+4      	; 0x1d7e <xTaskResumeAll+0xd4>
    1d7a:	a0 93 19 15 	sts	0x1519, r26	; 0x801519 <uxTopReadyPriority>
    1d7e:	8b e0       	ldi	r24, 0x0B	; 11
    1d80:	8a 9f       	mul	r24, r26
    1d82:	d0 01       	movw	r26, r0
    1d84:	11 24       	eor	r1, r1
    1d86:	a5 5a       	subi	r26, 0xA5	; 165
    1d88:	ba 4e       	sbci	r27, 0xEA	; 234
    1d8a:	11 96       	adiw	r26, 0x01	; 1
    1d8c:	0d 90       	ld	r0, X+
    1d8e:	bc 91       	ld	r27, X
    1d90:	a0 2d       	mov	r26, r0
    1d92:	b7 83       	std	Z+7, r27	; 0x07
    1d94:	a6 83       	std	Z+6, r26	; 0x06
    1d96:	16 96       	adiw	r26, 0x06	; 6
    1d98:	4d 91       	ld	r20, X+
    1d9a:	5c 91       	ld	r21, X
    1d9c:	17 97       	sbiw	r26, 0x07	; 7
    1d9e:	51 87       	std	Z+9, r21	; 0x09
    1da0:	40 87       	std	Z+8, r20	; 0x08
    1da2:	16 96       	adiw	r26, 0x06	; 6
    1da4:	cd 91       	ld	r28, X+
    1da6:	dc 91       	ld	r29, X
    1da8:	17 97       	sbiw	r26, 0x07	; 7
    1daa:	3d 83       	std	Y+5, r19	; 0x05
    1dac:	2c 83       	std	Y+4, r18	; 0x04
    1dae:	17 96       	adiw	r26, 0x07	; 7
    1db0:	3c 93       	st	X, r19
    1db2:	2e 93       	st	-X, r18
    1db4:	16 97       	sbiw	r26, 0x06	; 6
    1db6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1db8:	8a 9f       	mul	r24, r26
    1dba:	d0 01       	movw	r26, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	a5 5a       	subi	r26, 0xA5	; 165
    1dc0:	ba 4e       	sbci	r27, 0xEA	; 234
    1dc2:	b5 87       	std	Z+13, r27	; 0x0d
    1dc4:	a4 87       	std	Z+12, r26	; 0x0c
    1dc6:	8c 91       	ld	r24, X
    1dc8:	8f 5f       	subi	r24, 0xFF	; 255
    1dca:	8c 93       	st	X, r24
    1dcc:	92 8d       	ldd	r25, Z+26	; 0x1a
    1dce:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1dd2:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1dd6:	5a 96       	adiw	r26, 0x1a	; 26
    1dd8:	8c 91       	ld	r24, X
    1dda:	98 17       	cp	r25, r24
    1ddc:	30 f0       	brcs	.+12     	; 0x1dea <xTaskResumeAll+0x140>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <xYieldPending>
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <xTaskResumeAll+0x140>
    1de6:	e0 e0       	ldi	r30, 0x00	; 0
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 91 36 15 	lds	r24, 0x1536	; 0x801536 <xPendingReadyList>
    1dee:	81 11       	cpse	r24, r1
    1df0:	73 cf       	rjmp	.-282    	; 0x1cd8 <xTaskResumeAll+0x2e>
    1df2:	ef 2b       	or	r30, r31
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <xTaskResumeAll+0x14e>
    1df6:	7f db       	rcall	.-2306   	; 0x14f6 <prvResetNextTaskUnblockTime>
    1df8:	c0 90 14 15 	lds	r12, 0x1514	; 0x801514 <xPendedTicks>
    1dfc:	d0 90 15 15 	lds	r13, 0x1515	; 0x801515 <xPendedTicks+0x1>
    1e00:	e0 90 16 15 	lds	r14, 0x1516	; 0x801516 <xPendedTicks+0x2>
    1e04:	f0 90 17 15 	lds	r15, 0x1517	; 0x801517 <xPendedTicks+0x3>
    1e08:	c1 14       	cp	r12, r1
    1e0a:	d1 04       	cpc	r13, r1
    1e0c:	e1 04       	cpc	r14, r1
    1e0e:	f1 04       	cpc	r15, r1
    1e10:	a1 f0       	breq	.+40     	; 0x1e3a <xTaskResumeAll+0x190>
    1e12:	1f de       	rcall	.-962    	; 0x1a52 <xTaskIncrementTick>
    1e14:	88 23       	and	r24, r24
    1e16:	19 f0       	breq	.+6      	; 0x1e1e <xTaskResumeAll+0x174>
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <xYieldPending>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	c8 1a       	sub	r12, r24
    1e22:	d1 08       	sbc	r13, r1
    1e24:	e1 08       	sbc	r14, r1
    1e26:	f1 08       	sbc	r15, r1
    1e28:	a1 f7       	brne	.-24     	; 0x1e12 <xTaskResumeAll+0x168>
    1e2a:	10 92 14 15 	sts	0x1514, r1	; 0x801514 <xPendedTicks>
    1e2e:	10 92 15 15 	sts	0x1515, r1	; 0x801515 <xPendedTicks+0x1>
    1e32:	10 92 16 15 	sts	0x1516, r1	; 0x801516 <xPendedTicks+0x2>
    1e36:	10 92 17 15 	sts	0x1517, r1	; 0x801517 <xPendedTicks+0x3>
    1e3a:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <xYieldPending>
    1e3e:	88 23       	and	r24, r24
    1e40:	31 f0       	breq	.+12     	; 0x1e4e <xTaskResumeAll+0x1a4>
    1e42:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	03 c0       	rjmp	.+6      	; 0x1e50 <xTaskResumeAll+0x1a6>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <xTaskResumeAll+0x1a6>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	0f 90       	pop	r0
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	ff 90       	pop	r15
    1e5a:	ef 90       	pop	r14
    1e5c:	df 90       	pop	r13
    1e5e:	cf 90       	pop	r12
    1e60:	08 95       	ret

00001e62 <xTaskDelayUntil>:
    1e62:	8f 92       	push	r8
    1e64:	9f 92       	push	r9
    1e66:	af 92       	push	r10
    1e68:	bf 92       	push	r11
    1e6a:	cf 92       	push	r12
    1e6c:	df 92       	push	r13
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	ec 01       	movw	r28, r24
    1e7a:	6a 01       	movw	r12, r20
    1e7c:	7b 01       	movw	r14, r22
    1e7e:	d5 dd       	rcall	.-1110   	; 0x1a2a <vTaskSuspendAll>
    1e80:	80 90 1a 15 	lds	r8, 0x151A	; 0x80151a <xTickCount>
    1e84:	90 90 1b 15 	lds	r9, 0x151B	; 0x80151b <xTickCount+0x1>
    1e88:	a0 90 1c 15 	lds	r10, 0x151C	; 0x80151c <xTickCount+0x2>
    1e8c:	b0 90 1d 15 	lds	r11, 0x151D	; 0x80151d <xTickCount+0x3>
    1e90:	88 81       	ld	r24, Y
    1e92:	99 81       	ldd	r25, Y+1	; 0x01
    1e94:	aa 81       	ldd	r26, Y+2	; 0x02
    1e96:	bb 81       	ldd	r27, Y+3	; 0x03
    1e98:	ac 01       	movw	r20, r24
    1e9a:	bd 01       	movw	r22, r26
    1e9c:	4c 0d       	add	r20, r12
    1e9e:	5d 1d       	adc	r21, r13
    1ea0:	6e 1d       	adc	r22, r14
    1ea2:	7f 1d       	adc	r23, r15
    1ea4:	88 16       	cp	r8, r24
    1ea6:	99 06       	cpc	r9, r25
    1ea8:	aa 06       	cpc	r10, r26
    1eaa:	bb 06       	cpc	r11, r27
    1eac:	60 f4       	brcc	.+24     	; 0x1ec6 <xTaskDelayUntil+0x64>
    1eae:	48 17       	cp	r20, r24
    1eb0:	59 07       	cpc	r21, r25
    1eb2:	6a 07       	cpc	r22, r26
    1eb4:	7b 07       	cpc	r23, r27
    1eb6:	98 f4       	brcc	.+38     	; 0x1ede <xTaskDelayUntil+0x7c>
    1eb8:	84 16       	cp	r8, r20
    1eba:	95 06       	cpc	r9, r21
    1ebc:	a6 06       	cpc	r10, r22
    1ebe:	b7 06       	cpc	r11, r23
    1ec0:	80 f0       	brcs	.+32     	; 0x1ee2 <xTaskDelayUntil+0x80>
    1ec2:	10 e0       	ldi	r17, 0x00	; 0
    1ec4:	13 c0       	rjmp	.+38     	; 0x1eec <xTaskDelayUntil+0x8a>
    1ec6:	48 17       	cp	r20, r24
    1ec8:	59 07       	cpc	r21, r25
    1eca:	6a 07       	cpc	r22, r26
    1ecc:	7b 07       	cpc	r23, r27
    1ece:	58 f0       	brcs	.+22     	; 0x1ee6 <xTaskDelayUntil+0x84>
    1ed0:	84 16       	cp	r8, r20
    1ed2:	95 06       	cpc	r9, r21
    1ed4:	a6 06       	cpc	r10, r22
    1ed6:	b7 06       	cpc	r11, r23
    1ed8:	40 f0       	brcs	.+16     	; 0x1eea <xTaskDelayUntil+0x88>
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	07 c0       	rjmp	.+14     	; 0x1eec <xTaskDelayUntil+0x8a>
    1ede:	10 e0       	ldi	r17, 0x00	; 0
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <xTaskDelayUntil+0x8a>
    1ee2:	11 e0       	ldi	r17, 0x01	; 1
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <xTaskDelayUntil+0x8a>
    1ee6:	11 e0       	ldi	r17, 0x01	; 1
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <xTaskDelayUntil+0x8a>
    1eea:	11 e0       	ldi	r17, 0x01	; 1
    1eec:	48 83       	st	Y, r20
    1eee:	59 83       	std	Y+1, r21	; 0x01
    1ef0:	6a 83       	std	Y+2, r22	; 0x02
    1ef2:	7b 83       	std	Y+3, r23	; 0x03
    1ef4:	11 23       	and	r17, r17
    1ef6:	41 f0       	breq	.+16     	; 0x1f08 <xTaskDelayUntil+0xa6>
    1ef8:	cb 01       	movw	r24, r22
    1efa:	ba 01       	movw	r22, r20
    1efc:	68 19       	sub	r22, r8
    1efe:	79 09       	sbc	r23, r9
    1f00:	8a 09       	sbc	r24, r10
    1f02:	9b 09       	sbc	r25, r11
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	6b dc       	rcall	.-1834   	; 0x17de <prvAddCurrentTaskToDelayedList>
    1f08:	d0 de       	rcall	.-608    	; 0x1caa <xTaskResumeAll>
    1f0a:	81 11       	cpse	r24, r1
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <xTaskDelayUntil+0xb0>
    1f0e:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    1f12:	81 2f       	mov	r24, r17
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	bf 90       	pop	r11
    1f24:	af 90       	pop	r10
    1f26:	9f 90       	pop	r9
    1f28:	8f 90       	pop	r8
    1f2a:	08 95       	ret

00001f2c <vTaskDelay>:
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	6b 01       	movw	r12, r22
    1f36:	7c 01       	movw	r14, r24
    1f38:	67 2b       	or	r22, r23
    1f3a:	68 2b       	or	r22, r24
    1f3c:	69 2b       	or	r22, r25
    1f3e:	39 f0       	breq	.+14     	; 0x1f4e <vTaskDelay+0x22>
    1f40:	74 dd       	rcall	.-1304   	; 0x1a2a <vTaskSuspendAll>
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	c7 01       	movw	r24, r14
    1f46:	b6 01       	movw	r22, r12
    1f48:	4a dc       	rcall	.-1900   	; 0x17de <prvAddCurrentTaskToDelayedList>
    1f4a:	af de       	rcall	.-674    	; 0x1caa <xTaskResumeAll>
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <vTaskDelay+0x24>
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	81 11       	cpse	r24, r1
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <vTaskDelay+0x2c>
    1f54:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    1f58:	ff 90       	pop	r15
    1f5a:	ef 90       	pop	r14
    1f5c:	df 90       	pop	r13
    1f5e:	cf 90       	pop	r12
    1f60:	08 95       	ret

00001f62 <vTaskSwitchContext>:
    1f62:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    1f66:	88 23       	and	r24, r24
    1f68:	21 f0       	breq	.+8      	; 0x1f72 <vTaskSwitchContext+0x10>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <xYieldPending>
    1f70:	08 95       	ret
    1f72:	10 92 13 15 	sts	0x1513, r1	; 0x801513 <xYieldPending>
    1f76:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1f7a:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1f7e:	20 81       	ld	r18, Z
    1f80:	31 81       	ldd	r19, Z+1	; 0x01
    1f82:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1f86:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1f8a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f8c:	94 8d       	ldd	r25, Z+28	; 0x1c
    1f8e:	82 17       	cp	r24, r18
    1f90:	93 07       	cpc	r25, r19
    1f92:	60 f0       	brcs	.+24     	; 0x1fac <vTaskSwitchContext+0x4a>
    1f94:	60 91 c9 15 	lds	r22, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1f98:	70 91 ca 15 	lds	r23, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1f9c:	63 5e       	subi	r22, 0xE3	; 227
    1f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa0:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1fa4:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1fa8:	0e 94 0f 18 	call	0x301e	; 0x301e <vApplicationStackOverflowHook>
    1fac:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <vTaskSwitchContext+0x52>
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	9b e0       	ldi	r25, 0x0B	; 11
    1fba:	92 9f       	mul	r25, r18
    1fbc:	f0 01       	movw	r30, r0
    1fbe:	93 9f       	mul	r25, r19
    1fc0:	f0 0d       	add	r31, r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	e5 5a       	subi	r30, 0xA5	; 165
    1fc6:	fa 4e       	sbci	r31, 0xEA	; 234
    1fc8:	90 81       	ld	r25, Z
    1fca:	99 23       	and	r25, r25
    1fcc:	91 f3       	breq	.-28     	; 0x1fb2 <vTaskSwitchContext+0x50>
    1fce:	9b e0       	ldi	r25, 0x0B	; 11
    1fd0:	92 9f       	mul	r25, r18
    1fd2:	a0 01       	movw	r20, r0
    1fd4:	93 9f       	mul	r25, r19
    1fd6:	50 0d       	add	r21, r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	df 01       	movw	r26, r30
    1fdc:	01 80       	ldd	r0, Z+1	; 0x01
    1fde:	f2 81       	ldd	r31, Z+2	; 0x02
    1fe0:	e0 2d       	mov	r30, r0
    1fe2:	04 80       	ldd	r0, Z+4	; 0x04
    1fe4:	f5 81       	ldd	r31, Z+5	; 0x05
    1fe6:	e0 2d       	mov	r30, r0
    1fe8:	12 96       	adiw	r26, 0x02	; 2
    1fea:	fc 93       	st	X, r31
    1fec:	ee 93       	st	-X, r30
    1fee:	11 97       	sbiw	r26, 0x01	; 1
    1ff0:	42 5a       	subi	r20, 0xA2	; 162
    1ff2:	5a 4e       	sbci	r21, 0xEA	; 234
    1ff4:	e4 17       	cp	r30, r20
    1ff6:	f5 07       	cpc	r31, r21
    1ff8:	29 f4       	brne	.+10     	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    1ffa:	44 81       	ldd	r20, Z+4	; 0x04
    1ffc:	55 81       	ldd	r21, Z+5	; 0x05
    1ffe:	fd 01       	movw	r30, r26
    2000:	52 83       	std	Z+2, r21	; 0x02
    2002:	41 83       	std	Z+1, r20	; 0x01
    2004:	9b e0       	ldi	r25, 0x0B	; 11
    2006:	92 9f       	mul	r25, r18
    2008:	f0 01       	movw	r30, r0
    200a:	93 9f       	mul	r25, r19
    200c:	f0 0d       	add	r31, r0
    200e:	11 24       	eor	r1, r1
    2010:	e5 5a       	subi	r30, 0xA5	; 165
    2012:	fa 4e       	sbci	r31, 0xEA	; 234
    2014:	01 80       	ldd	r0, Z+1	; 0x01
    2016:	f2 81       	ldd	r31, Z+2	; 0x02
    2018:	e0 2d       	mov	r30, r0
    201a:	20 85       	ldd	r18, Z+8	; 0x08
    201c:	31 85       	ldd	r19, Z+9	; 0x09
    201e:	30 93 ca 15 	sts	0x15CA, r19	; 0x8015ca <pxCurrentTCB+0x1>
    2022:	20 93 c9 15 	sts	0x15C9, r18	; 0x8015c9 <pxCurrentTCB>
    2026:	80 93 19 15 	sts	0x1519, r24	; 0x801519 <uxTopReadyPriority>
    202a:	08 95       	ret

0000202c <vTaskPlaceOnEventList>:
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	6a 01       	movw	r12, r20
    2036:	7b 01       	movw	r14, r22
    2038:	60 91 c9 15 	lds	r22, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    203c:	70 91 ca 15 	lds	r23, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2040:	62 5f       	subi	r22, 0xF2	; 242
    2042:	7f 4f       	sbci	r23, 0xFF	; 255
    2044:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsert>
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	c7 01       	movw	r24, r14
    204c:	b6 01       	movw	r22, r12
    204e:	c7 db       	rcall	.-2162   	; 0x17de <prvAddCurrentTaskToDelayedList>
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	cf 90       	pop	r12
    2058:	08 95       	ret

0000205a <vTaskPlaceOnEventListRestricted>:
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	fc 01       	movw	r30, r24
    2060:	cb 01       	movw	r24, r22
    2062:	ba 01       	movw	r22, r20
    2064:	a1 81       	ldd	r26, Z+1	; 0x01
    2066:	b2 81       	ldd	r27, Z+2	; 0x02
    2068:	c0 91 c9 15 	lds	r28, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    206c:	d0 91 ca 15 	lds	r29, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2070:	bb 8b       	std	Y+19, r27	; 0x13
    2072:	aa 8b       	std	Y+18, r26	; 0x12
    2074:	c0 91 c9 15 	lds	r28, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2078:	d0 91 ca 15 	lds	r29, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    207c:	16 96       	adiw	r26, 0x06	; 6
    207e:	4d 91       	ld	r20, X+
    2080:	5c 91       	ld	r21, X
    2082:	17 97       	sbiw	r26, 0x07	; 7
    2084:	5d 8b       	std	Y+21, r21	; 0x15
    2086:	4c 8b       	std	Y+20, r20	; 0x14
    2088:	16 96       	adiw	r26, 0x06	; 6
    208a:	cd 91       	ld	r28, X+
    208c:	dc 91       	ld	r29, X
    208e:	17 97       	sbiw	r26, 0x07	; 7
    2090:	40 91 c9 15 	lds	r20, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2094:	50 91 ca 15 	lds	r21, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2098:	42 5f       	subi	r20, 0xF2	; 242
    209a:	5f 4f       	sbci	r21, 0xFF	; 255
    209c:	5d 83       	std	Y+5, r21	; 0x05
    209e:	4c 83       	std	Y+4, r20	; 0x04
    20a0:	40 91 c9 15 	lds	r20, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    20a4:	50 91 ca 15 	lds	r21, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    20a8:	42 5f       	subi	r20, 0xF2	; 242
    20aa:	5f 4f       	sbci	r21, 0xFF	; 255
    20ac:	17 96       	adiw	r26, 0x07	; 7
    20ae:	5c 93       	st	X, r21
    20b0:	4e 93       	st	-X, r20
    20b2:	16 97       	sbiw	r26, 0x06	; 6
    20b4:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    20b8:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    20bc:	59 96       	adiw	r26, 0x19	; 25
    20be:	fc 93       	st	X, r31
    20c0:	ee 93       	st	-X, r30
    20c2:	58 97       	sbiw	r26, 0x18	; 24
    20c4:	30 81       	ld	r19, Z
    20c6:	3f 5f       	subi	r19, 0xFF	; 255
    20c8:	30 83       	st	Z, r19
    20ca:	22 23       	and	r18, r18
    20cc:	19 f0       	breq	.+6      	; 0x20d4 <vTaskPlaceOnEventListRestricted+0x7a>
    20ce:	6f ef       	ldi	r22, 0xFF	; 255
    20d0:	7f ef       	ldi	r23, 0xFF	; 255
    20d2:	cb 01       	movw	r24, r22
    20d4:	42 2f       	mov	r20, r18
    20d6:	83 db       	rcall	.-2298   	; 0x17de <prvAddCurrentTaskToDelayedList>
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	08 95       	ret

000020de <xTaskRemoveFromEventList>:
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	dc 01       	movw	r26, r24
    20e4:	17 96       	adiw	r26, 0x07	; 7
    20e6:	ed 91       	ld	r30, X+
    20e8:	fc 91       	ld	r31, X
    20ea:	18 97       	sbiw	r26, 0x08	; 8
    20ec:	00 84       	ldd	r0, Z+8	; 0x08
    20ee:	f1 85       	ldd	r31, Z+9	; 0x09
    20f0:	e0 2d       	mov	r30, r0
    20f2:	a0 8d       	ldd	r26, Z+24	; 0x18
    20f4:	b1 8d       	ldd	r27, Z+25	; 0x19
    20f6:	c2 89       	ldd	r28, Z+18	; 0x12
    20f8:	d3 89       	ldd	r29, Z+19	; 0x13
    20fa:	84 89       	ldd	r24, Z+20	; 0x14
    20fc:	95 89       	ldd	r25, Z+21	; 0x15
    20fe:	9f 83       	std	Y+7, r25	; 0x07
    2100:	8e 83       	std	Y+6, r24	; 0x06
    2102:	c4 89       	ldd	r28, Z+20	; 0x14
    2104:	d5 89       	ldd	r29, Z+21	; 0x15
    2106:	82 89       	ldd	r24, Z+18	; 0x12
    2108:	93 89       	ldd	r25, Z+19	; 0x13
    210a:	9d 83       	std	Y+5, r25	; 0x05
    210c:	8c 83       	std	Y+4, r24	; 0x04
    210e:	11 96       	adiw	r26, 0x01	; 1
    2110:	8d 91       	ld	r24, X+
    2112:	9c 91       	ld	r25, X
    2114:	12 97       	sbiw	r26, 0x02	; 2
    2116:	9f 01       	movw	r18, r30
    2118:	22 5f       	subi	r18, 0xF2	; 242
    211a:	3f 4f       	sbci	r19, 0xFF	; 255
    211c:	82 17       	cp	r24, r18
    211e:	93 07       	cpc	r25, r19
    2120:	31 f4       	brne	.+12     	; 0x212e <xTaskRemoveFromEventList+0x50>
    2122:	84 89       	ldd	r24, Z+20	; 0x14
    2124:	95 89       	ldd	r25, Z+21	; 0x15
    2126:	12 96       	adiw	r26, 0x02	; 2
    2128:	9c 93       	st	X, r25
    212a:	8e 93       	st	-X, r24
    212c:	11 97       	sbiw	r26, 0x01	; 1
    212e:	11 8e       	std	Z+25, r1	; 0x19
    2130:	10 8e       	std	Z+24, r1	; 0x18
    2132:	8c 91       	ld	r24, X
    2134:	81 50       	subi	r24, 0x01	; 1
    2136:	8c 93       	st	X, r24
    2138:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    213c:	81 11       	cpse	r24, r1
    213e:	52 c0       	rjmp	.+164    	; 0x21e4 <xTaskRemoveFromEventList+0x106>
    2140:	a4 85       	ldd	r26, Z+12	; 0x0c
    2142:	b5 85       	ldd	r27, Z+13	; 0x0d
    2144:	c6 81       	ldd	r28, Z+6	; 0x06
    2146:	d7 81       	ldd	r29, Z+7	; 0x07
    2148:	80 85       	ldd	r24, Z+8	; 0x08
    214a:	91 85       	ldd	r25, Z+9	; 0x09
    214c:	9f 83       	std	Y+7, r25	; 0x07
    214e:	8e 83       	std	Y+6, r24	; 0x06
    2150:	c0 85       	ldd	r28, Z+8	; 0x08
    2152:	d1 85       	ldd	r29, Z+9	; 0x09
    2154:	86 81       	ldd	r24, Z+6	; 0x06
    2156:	97 81       	ldd	r25, Z+7	; 0x07
    2158:	9d 83       	std	Y+5, r25	; 0x05
    215a:	8c 83       	std	Y+4, r24	; 0x04
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	8d 91       	ld	r24, X+
    2160:	9c 91       	ld	r25, X
    2162:	12 97       	sbiw	r26, 0x02	; 2
    2164:	9f 01       	movw	r18, r30
    2166:	2e 5f       	subi	r18, 0xFE	; 254
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	82 17       	cp	r24, r18
    216c:	93 07       	cpc	r25, r19
    216e:	31 f4       	brne	.+12     	; 0x217c <xTaskRemoveFromEventList+0x9e>
    2170:	80 85       	ldd	r24, Z+8	; 0x08
    2172:	91 85       	ldd	r25, Z+9	; 0x09
    2174:	12 96       	adiw	r26, 0x02	; 2
    2176:	9c 93       	st	X, r25
    2178:	8e 93       	st	-X, r24
    217a:	11 97       	sbiw	r26, 0x01	; 1
    217c:	15 86       	std	Z+13, r1	; 0x0d
    217e:	14 86       	std	Z+12, r1	; 0x0c
    2180:	8c 91       	ld	r24, X
    2182:	81 50       	subi	r24, 0x01	; 1
    2184:	8c 93       	st	X, r24
    2186:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2188:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    218c:	8a 17       	cp	r24, r26
    218e:	10 f4       	brcc	.+4      	; 0x2194 <xTaskRemoveFromEventList+0xb6>
    2190:	a0 93 19 15 	sts	0x1519, r26	; 0x801519 <uxTopReadyPriority>
    2194:	8b e0       	ldi	r24, 0x0B	; 11
    2196:	8a 9f       	mul	r24, r26
    2198:	d0 01       	movw	r26, r0
    219a:	11 24       	eor	r1, r1
    219c:	a5 5a       	subi	r26, 0xA5	; 165
    219e:	ba 4e       	sbci	r27, 0xEA	; 234
    21a0:	11 96       	adiw	r26, 0x01	; 1
    21a2:	0d 90       	ld	r0, X+
    21a4:	bc 91       	ld	r27, X
    21a6:	a0 2d       	mov	r26, r0
    21a8:	b7 83       	std	Z+7, r27	; 0x07
    21aa:	a6 83       	std	Z+6, r26	; 0x06
    21ac:	16 96       	adiw	r26, 0x06	; 6
    21ae:	4d 91       	ld	r20, X+
    21b0:	5c 91       	ld	r21, X
    21b2:	17 97       	sbiw	r26, 0x07	; 7
    21b4:	51 87       	std	Z+9, r21	; 0x09
    21b6:	40 87       	std	Z+8, r20	; 0x08
    21b8:	16 96       	adiw	r26, 0x06	; 6
    21ba:	cd 91       	ld	r28, X+
    21bc:	dc 91       	ld	r29, X
    21be:	17 97       	sbiw	r26, 0x07	; 7
    21c0:	3d 83       	std	Y+5, r19	; 0x05
    21c2:	2c 83       	std	Y+4, r18	; 0x04
    21c4:	17 96       	adiw	r26, 0x07	; 7
    21c6:	3c 93       	st	X, r19
    21c8:	2e 93       	st	-X, r18
    21ca:	16 97       	sbiw	r26, 0x06	; 6
    21cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21ce:	8a 9f       	mul	r24, r26
    21d0:	d0 01       	movw	r26, r0
    21d2:	11 24       	eor	r1, r1
    21d4:	a5 5a       	subi	r26, 0xA5	; 165
    21d6:	ba 4e       	sbci	r27, 0xEA	; 234
    21d8:	b5 87       	std	Z+13, r27	; 0x0d
    21da:	a4 87       	std	Z+12, r26	; 0x0c
    21dc:	8c 91       	ld	r24, X
    21de:	8f 5f       	subi	r24, 0xFF	; 255
    21e0:	8c 93       	st	X, r24
    21e2:	1c c0       	rjmp	.+56     	; 0x221c <__stack+0x1d>
    21e4:	46 e3       	ldi	r20, 0x36	; 54
    21e6:	55 e1       	ldi	r21, 0x15	; 21
    21e8:	da 01       	movw	r26, r20
    21ea:	11 96       	adiw	r26, 0x01	; 1
    21ec:	cd 91       	ld	r28, X+
    21ee:	dc 91       	ld	r29, X
    21f0:	12 97       	sbiw	r26, 0x02	; 2
    21f2:	d3 8b       	std	Z+19, r29	; 0x13
    21f4:	c2 8b       	std	Z+18, r28	; 0x12
    21f6:	8e 81       	ldd	r24, Y+6	; 0x06
    21f8:	9f 81       	ldd	r25, Y+7	; 0x07
    21fa:	95 8b       	std	Z+21, r25	; 0x15
    21fc:	84 8b       	std	Z+20, r24	; 0x14
    21fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2200:	9f 81       	ldd	r25, Y+7	; 0x07
    2202:	dc 01       	movw	r26, r24
    2204:	15 96       	adiw	r26, 0x05	; 5
    2206:	3c 93       	st	X, r19
    2208:	2e 93       	st	-X, r18
    220a:	14 97       	sbiw	r26, 0x04	; 4
    220c:	3f 83       	std	Y+7, r19	; 0x07
    220e:	2e 83       	std	Y+6, r18	; 0x06
    2210:	51 8f       	std	Z+25, r21	; 0x19
    2212:	40 8f       	std	Z+24, r20	; 0x18
    2214:	da 01       	movw	r26, r20
    2216:	8c 91       	ld	r24, X
    2218:	8f 5f       	subi	r24, 0xFF	; 255
    221a:	8c 93       	st	X, r24
    221c:	92 8d       	ldd	r25, Z+26	; 0x1a
    221e:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2222:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2226:	82 8d       	ldd	r24, Z+26	; 0x1a
    2228:	89 17       	cp	r24, r25
    222a:	20 f4       	brcc	.+8      	; 0x2234 <__stack+0x35>
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <xYieldPending>
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <__stack+0x37>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	08 95       	ret

0000223c <vTaskSetTimeOutState>:
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	0f 92       	push	r0
    2242:	20 91 12 15 	lds	r18, 0x1512	; 0x801512 <xNumOfOverflows>
    2246:	fc 01       	movw	r30, r24
    2248:	20 83       	st	Z, r18
    224a:	40 91 1a 15 	lds	r20, 0x151A	; 0x80151a <xTickCount>
    224e:	50 91 1b 15 	lds	r21, 0x151B	; 0x80151b <xTickCount+0x1>
    2252:	60 91 1c 15 	lds	r22, 0x151C	; 0x80151c <xTickCount+0x2>
    2256:	70 91 1d 15 	lds	r23, 0x151D	; 0x80151d <xTickCount+0x3>
    225a:	41 83       	std	Z+1, r20	; 0x01
    225c:	52 83       	std	Z+2, r21	; 0x02
    225e:	63 83       	std	Z+3, r22	; 0x03
    2260:	74 83       	std	Z+4, r23	; 0x04
    2262:	0f 90       	pop	r0
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	08 95       	ret

00002268 <vTaskInternalSetTimeOutState>:
    2268:	20 91 12 15 	lds	r18, 0x1512	; 0x801512 <xNumOfOverflows>
    226c:	fc 01       	movw	r30, r24
    226e:	20 83       	st	Z, r18
    2270:	40 91 1a 15 	lds	r20, 0x151A	; 0x80151a <xTickCount>
    2274:	50 91 1b 15 	lds	r21, 0x151B	; 0x80151b <xTickCount+0x1>
    2278:	60 91 1c 15 	lds	r22, 0x151C	; 0x80151c <xTickCount+0x2>
    227c:	70 91 1d 15 	lds	r23, 0x151D	; 0x80151d <xTickCount+0x3>
    2280:	41 83       	std	Z+1, r20	; 0x01
    2282:	52 83       	std	Z+2, r21	; 0x02
    2284:	63 83       	std	Z+3, r22	; 0x03
    2286:	74 83       	std	Z+4, r23	; 0x04
    2288:	08 95       	ret

0000228a <xTaskCheckForTimeOut>:
    228a:	8f 92       	push	r8
    228c:	9f 92       	push	r9
    228e:	af 92       	push	r10
    2290:	bf 92       	push	r11
    2292:	cf 92       	push	r12
    2294:	df 92       	push	r13
    2296:	ef 92       	push	r14
    2298:	ff 92       	push	r15
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	fb 01       	movw	r30, r22
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	0f 92       	push	r0
    22aa:	c0 90 1a 15 	lds	r12, 0x151A	; 0x80151a <xTickCount>
    22ae:	d0 90 1b 15 	lds	r13, 0x151B	; 0x80151b <xTickCount+0x1>
    22b2:	e0 90 1c 15 	lds	r14, 0x151C	; 0x80151c <xTickCount+0x2>
    22b6:	f0 90 1d 15 	lds	r15, 0x151D	; 0x80151d <xTickCount+0x3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	0d 91       	ld	r16, X+
    22c0:	1d 91       	ld	r17, X+
    22c2:	2d 91       	ld	r18, X+
    22c4:	3c 91       	ld	r19, X
    22c6:	14 97       	sbiw	r26, 0x04	; 4
    22c8:	46 01       	movw	r8, r12
    22ca:	57 01       	movw	r10, r14
    22cc:	80 1a       	sub	r8, r16
    22ce:	91 0a       	sbc	r9, r17
    22d0:	a2 0a       	sbc	r10, r18
    22d2:	b3 0a       	sbc	r11, r19
    22d4:	40 81       	ld	r20, Z
    22d6:	51 81       	ldd	r21, Z+1	; 0x01
    22d8:	62 81       	ldd	r22, Z+2	; 0x02
    22da:	73 81       	ldd	r23, Z+3	; 0x03
    22dc:	4f 3f       	cpi	r20, 0xFF	; 255
    22de:	bf ef       	ldi	r27, 0xFF	; 255
    22e0:	5b 07       	cpc	r21, r27
    22e2:	6b 07       	cpc	r22, r27
    22e4:	7b 07       	cpc	r23, r27
    22e6:	39 f1       	breq	.+78     	; 0x2336 <xTaskCheckForTimeOut+0xac>
    22e8:	ec 01       	movw	r28, r24
    22ea:	b8 81       	ld	r27, Y
    22ec:	a0 91 12 15 	lds	r26, 0x1512	; 0x801512 <xNumOfOverflows>
    22f0:	ba 17       	cp	r27, r26
    22f2:	59 f0       	breq	.+22     	; 0x230a <xTaskCheckForTimeOut+0x80>
    22f4:	c0 16       	cp	r12, r16
    22f6:	d1 06       	cpc	r13, r17
    22f8:	e2 06       	cpc	r14, r18
    22fa:	f3 06       	cpc	r15, r19
    22fc:	30 f0       	brcs	.+12     	; 0x230a <xTaskCheckForTimeOut+0x80>
    22fe:	10 82       	st	Z, r1
    2300:	11 82       	std	Z+1, r1	; 0x01
    2302:	12 82       	std	Z+2, r1	; 0x02
    2304:	13 82       	std	Z+3, r1	; 0x03
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	17 c0       	rjmp	.+46     	; 0x2338 <xTaskCheckForTimeOut+0xae>
    230a:	84 16       	cp	r8, r20
    230c:	95 06       	cpc	r9, r21
    230e:	a6 06       	cpc	r10, r22
    2310:	b7 06       	cpc	r11, r23
    2312:	58 f4       	brcc	.+22     	; 0x232a <xTaskCheckForTimeOut+0xa0>
    2314:	48 19       	sub	r20, r8
    2316:	59 09       	sbc	r21, r9
    2318:	6a 09       	sbc	r22, r10
    231a:	7b 09       	sbc	r23, r11
    231c:	40 83       	st	Z, r20
    231e:	51 83       	std	Z+1, r21	; 0x01
    2320:	62 83       	std	Z+2, r22	; 0x02
    2322:	73 83       	std	Z+3, r23	; 0x03
    2324:	a1 df       	rcall	.-190    	; 0x2268 <vTaskInternalSetTimeOutState>
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <xTaskCheckForTimeOut+0xae>
    232a:	10 82       	st	Z, r1
    232c:	11 82       	std	Z+1, r1	; 0x01
    232e:	12 82       	std	Z+2, r1	; 0x02
    2330:	13 82       	std	Z+3, r1	; 0x03
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <xTaskCheckForTimeOut+0xae>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	0f 90       	pop	r0
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	ff 90       	pop	r15
    2346:	ef 90       	pop	r14
    2348:	df 90       	pop	r13
    234a:	cf 90       	pop	r12
    234c:	bf 90       	pop	r11
    234e:	af 90       	pop	r10
    2350:	9f 90       	pop	r9
    2352:	8f 90       	pop	r8
    2354:	08 95       	ret

00002356 <vTaskMissedYield>:
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <xYieldPending>
    235c:	08 95       	ret

0000235e <xTaskGetCurrentTaskHandle>:
    235e:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2362:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2366:	08 95       	ret

00002368 <xTaskGetSchedulerState>:
    2368:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <xSchedulerRunning>
    236c:	88 23       	and	r24, r24
    236e:	31 f0       	breq	.+12     	; 0x237c <xTaskGetSchedulerState+0x14>
    2370:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    2374:	81 11       	cpse	r24, r1
    2376:	04 c0       	rjmp	.+8      	; 0x2380 <xTaskGetSchedulerState+0x18>
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	08 95       	ret
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	08 95       	ret
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	08 95       	ret

00002384 <xTaskPriorityDisinherit>:
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	fc 01       	movw	r30, r24
    238e:	89 2b       	or	r24, r25
    2390:	09 f4       	brne	.+2      	; 0x2394 <xTaskPriorityDisinherit+0x10>
    2392:	49 c0       	rjmp	.+146    	; 0x2426 <xTaskPriorityDisinherit+0xa2>
    2394:	86 a5       	ldd	r24, Z+46	; 0x2e
    2396:	81 50       	subi	r24, 0x01	; 1
    2398:	86 a7       	std	Z+46, r24	; 0x2e
    239a:	22 8d       	ldd	r18, Z+26	; 0x1a
    239c:	95 a5       	ldd	r25, Z+45	; 0x2d
    239e:	29 17       	cp	r18, r25
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <xTaskPriorityDisinherit+0x20>
    23a2:	43 c0       	rjmp	.+134    	; 0x242a <xTaskPriorityDisinherit+0xa6>
    23a4:	81 11       	cpse	r24, r1
    23a6:	43 c0       	rjmp	.+134    	; 0x242e <xTaskPriorityDisinherit+0xaa>
    23a8:	ef 01       	movw	r28, r30
    23aa:	8f 01       	movw	r16, r30
    23ac:	0e 5f       	subi	r16, 0xFE	; 254
    23ae:	1f 4f       	sbci	r17, 0xFF	; 255
    23b0:	c8 01       	movw	r24, r16
    23b2:	0e 94 34 03 	call	0x668	; 0x668 <uxListRemove>
    23b6:	ed a5       	ldd	r30, Y+45	; 0x2d
    23b8:	ea 8f       	std	Y+26, r30	; 0x1a
    23ba:	8a e0       	ldi	r24, 0x0A	; 10
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	8e 1b       	sub	r24, r30
    23c4:	91 09       	sbc	r25, r1
    23c6:	a1 09       	sbc	r26, r1
    23c8:	b1 09       	sbc	r27, r1
    23ca:	8e 87       	std	Y+14, r24	; 0x0e
    23cc:	9f 87       	std	Y+15, r25	; 0x0f
    23ce:	a8 8b       	std	Y+16, r26	; 0x10
    23d0:	b9 8b       	std	Y+17, r27	; 0x11
    23d2:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    23d6:	8e 17       	cp	r24, r30
    23d8:	10 f4       	brcc	.+4      	; 0x23de <xTaskPriorityDisinherit+0x5a>
    23da:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    23de:	8b e0       	ldi	r24, 0x0B	; 11
    23e0:	8e 9f       	mul	r24, r30
    23e2:	f0 01       	movw	r30, r0
    23e4:	11 24       	eor	r1, r1
    23e6:	e5 5a       	subi	r30, 0xA5	; 165
    23e8:	fa 4e       	sbci	r31, 0xEA	; 234
    23ea:	01 80       	ldd	r0, Z+1	; 0x01
    23ec:	f2 81       	ldd	r31, Z+2	; 0x02
    23ee:	e0 2d       	mov	r30, r0
    23f0:	ff 83       	std	Y+7, r31	; 0x07
    23f2:	ee 83       	std	Y+6, r30	; 0x06
    23f4:	26 81       	ldd	r18, Z+6	; 0x06
    23f6:	37 81       	ldd	r19, Z+7	; 0x07
    23f8:	39 87       	std	Y+9, r19	; 0x09
    23fa:	28 87       	std	Y+8, r18	; 0x08
    23fc:	a6 81       	ldd	r26, Z+6	; 0x06
    23fe:	b7 81       	ldd	r27, Z+7	; 0x07
    2400:	15 96       	adiw	r26, 0x05	; 5
    2402:	1c 93       	st	X, r17
    2404:	0e 93       	st	-X, r16
    2406:	14 97       	sbiw	r26, 0x04	; 4
    2408:	17 83       	std	Z+7, r17	; 0x07
    240a:	06 83       	std	Z+6, r16	; 0x06
    240c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    240e:	8e 9f       	mul	r24, r30
    2410:	f0 01       	movw	r30, r0
    2412:	11 24       	eor	r1, r1
    2414:	e5 5a       	subi	r30, 0xA5	; 165
    2416:	fa 4e       	sbci	r31, 0xEA	; 234
    2418:	fd 87       	std	Y+13, r31	; 0x0d
    241a:	ec 87       	std	Y+12, r30	; 0x0c
    241c:	80 81       	ld	r24, Z
    241e:	8f 5f       	subi	r24, 0xFF	; 255
    2420:	80 83       	st	Z, r24
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <xTaskPriorityDisinherit+0xac>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <xTaskPriorityDisinherit+0xac>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <xTaskPriorityDisinherit+0xac>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	1f 91       	pop	r17
    2436:	0f 91       	pop	r16
    2438:	08 95       	ret

0000243a <xTaskGenericNotifyWait>:
    243a:	4f 92       	push	r4
    243c:	5f 92       	push	r5
    243e:	6f 92       	push	r6
    2440:	7f 92       	push	r7
    2442:	af 92       	push	r10
    2444:	bf 92       	push	r11
    2446:	cf 92       	push	r12
    2448:	df 92       	push	r13
    244a:	ef 92       	push	r14
    244c:	ff 92       	push	r15
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	28 01       	movw	r4, r16
    2458:	39 01       	movw	r6, r18
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	0f 92       	push	r0
    2460:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2464:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2468:	c8 2f       	mov	r28, r24
    246a:	d0 e0       	ldi	r29, 0x00	; 0
    246c:	ec 0f       	add	r30, r28
    246e:	fd 1f       	adc	r31, r29
    2470:	83 a9       	ldd	r24, Z+51	; 0x33
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	71 f1       	breq	.+92     	; 0x24d2 <xTaskGenericNotifyWait+0x98>
    2476:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    247a:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    247e:	ce 01       	movw	r24, r28
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	e8 0f       	add	r30, r24
    248a:	f9 1f       	adc	r31, r25
    248c:	87 a5       	ldd	r24, Z+47	; 0x2f
    248e:	90 a9       	ldd	r25, Z+48	; 0x30
    2490:	a1 a9       	ldd	r26, Z+49	; 0x31
    2492:	b2 a9       	ldd	r27, Z+50	; 0x32
    2494:	40 95       	com	r20
    2496:	50 95       	com	r21
    2498:	60 95       	com	r22
    249a:	70 95       	com	r23
    249c:	48 23       	and	r20, r24
    249e:	59 23       	and	r21, r25
    24a0:	6a 23       	and	r22, r26
    24a2:	7b 23       	and	r23, r27
    24a4:	47 a7       	std	Z+47, r20	; 0x2f
    24a6:	50 ab       	std	Z+48, r21	; 0x30
    24a8:	61 ab       	std	Z+49, r22	; 0x31
    24aa:	72 ab       	std	Z+50, r23	; 0x32
    24ac:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    24b0:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    24b4:	ec 0f       	add	r30, r28
    24b6:	fd 1f       	adc	r31, r29
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	83 ab       	std	Z+51, r24	; 0x33
    24bc:	a1 14       	cp	r10, r1
    24be:	b1 04       	cpc	r11, r1
    24c0:	c1 04       	cpc	r12, r1
    24c2:	d1 04       	cpc	r13, r1
    24c4:	31 f0       	breq	.+12     	; 0x24d2 <xTaskGenericNotifyWait+0x98>
    24c6:	41 e0       	ldi	r20, 0x01	; 1
    24c8:	c6 01       	movw	r24, r12
    24ca:	b5 01       	movw	r22, r10
    24cc:	88 d9       	rcall	.-3312   	; 0x17de <prvAddCurrentTaskToDelayedList>
    24ce:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    24d2:	0f 90       	pop	r0
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	0f 92       	push	r0
    24dc:	e1 14       	cp	r14, r1
    24de:	f1 04       	cpc	r15, r1
    24e0:	a1 f0       	breq	.+40     	; 0x250a <xTaskGenericNotifyWait+0xd0>
    24e2:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    24e6:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    24ea:	ce 01       	movw	r24, r28
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	e8 0f       	add	r30, r24
    24f6:	f9 1f       	adc	r31, r25
    24f8:	87 a5       	ldd	r24, Z+47	; 0x2f
    24fa:	90 a9       	ldd	r25, Z+48	; 0x30
    24fc:	a1 a9       	ldd	r26, Z+49	; 0x31
    24fe:	b2 a9       	ldd	r27, Z+50	; 0x32
    2500:	f7 01       	movw	r30, r14
    2502:	80 83       	st	Z, r24
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	a2 83       	std	Z+2, r26	; 0x02
    2508:	b3 83       	std	Z+3, r27	; 0x03
    250a:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    250e:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2512:	ec 0f       	add	r30, r28
    2514:	fd 1f       	adc	r31, r29
    2516:	83 a9       	ldd	r24, Z+51	; 0x33
    2518:	82 30       	cpi	r24, 0x02	; 2
    251a:	e9 f4       	brne	.+58     	; 0x2556 <xTaskGenericNotifyWait+0x11c>
    251c:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2520:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2524:	ce 01       	movw	r24, r28
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	e8 0f       	add	r30, r24
    2530:	f9 1f       	adc	r31, r25
    2532:	87 a5       	ldd	r24, Z+47	; 0x2f
    2534:	90 a9       	ldd	r25, Z+48	; 0x30
    2536:	a1 a9       	ldd	r26, Z+49	; 0x31
    2538:	b2 a9       	ldd	r27, Z+50	; 0x32
    253a:	40 94       	com	r4
    253c:	50 94       	com	r5
    253e:	60 94       	com	r6
    2540:	70 94       	com	r7
    2542:	48 22       	and	r4, r24
    2544:	59 22       	and	r5, r25
    2546:	6a 22       	and	r6, r26
    2548:	7b 22       	and	r7, r27
    254a:	47 a6       	std	Z+47, r4	; 0x2f
    254c:	50 aa       	std	Z+48, r5	; 0x30
    254e:	61 aa       	std	Z+49, r6	; 0x31
    2550:	72 aa       	std	Z+50, r7	; 0x32
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	01 c0       	rjmp	.+2      	; 0x2558 <xTaskGenericNotifyWait+0x11e>
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	20 91 c9 15 	lds	r18, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    255c:	30 91 ca 15 	lds	r19, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2560:	c2 0f       	add	r28, r18
    2562:	d3 1f       	adc	r29, r19
    2564:	1b aa       	std	Y+51, r1	; 0x33
    2566:	0f 90       	pop	r0
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	ff 90       	pop	r15
    2574:	ef 90       	pop	r14
    2576:	df 90       	pop	r13
    2578:	cf 90       	pop	r12
    257a:	bf 90       	pop	r11
    257c:	af 90       	pop	r10
    257e:	7f 90       	pop	r7
    2580:	6f 90       	pop	r6
    2582:	5f 90       	pop	r5
    2584:	4f 90       	pop	r4
    2586:	08 95       	ret

00002588 <xTaskGenericNotify>:
    2588:	8f 92       	push	r8
    258a:	9f 92       	push	r9
    258c:	af 92       	push	r10
    258e:	bf 92       	push	r11
    2590:	ef 92       	push	r14
    2592:	ff 92       	push	r15
    2594:	0f 93       	push	r16
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	dc 01       	movw	r26, r24
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	0f 92       	push	r0
    25a2:	e1 14       	cp	r14, r1
    25a4:	f1 04       	cpc	r15, r1
    25a6:	89 f0       	breq	.+34     	; 0x25ca <xTaskGenericNotify+0x42>
    25a8:	e6 2f       	mov	r30, r22
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	ee 0f       	add	r30, r30
    25ae:	ff 1f       	adc	r31, r31
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	e8 0f       	add	r30, r24
    25b6:	f9 1f       	adc	r31, r25
    25b8:	87 a4       	ldd	r8, Z+47	; 0x2f
    25ba:	90 a8       	ldd	r9, Z+48	; 0x30
    25bc:	a1 a8       	ldd	r10, Z+49	; 0x31
    25be:	b2 a8       	ldd	r11, Z+50	; 0x32
    25c0:	f7 01       	movw	r30, r14
    25c2:	80 82       	st	Z, r8
    25c4:	91 82       	std	Z+1, r9	; 0x01
    25c6:	a2 82       	std	Z+2, r10	; 0x02
    25c8:	b3 82       	std	Z+3, r11	; 0x03
    25ca:	70 e0       	ldi	r23, 0x00	; 0
    25cc:	fd 01       	movw	r30, r26
    25ce:	e6 0f       	add	r30, r22
    25d0:	f7 1f       	adc	r31, r23
    25d2:	83 a9       	ldd	r24, Z+51	; 0x33
    25d4:	92 e0       	ldi	r25, 0x02	; 2
    25d6:	93 ab       	std	Z+51, r25	; 0x33
    25d8:	02 30       	cpi	r16, 0x02	; 2
    25da:	01 f1       	breq	.+64     	; 0x261c <xTaskGenericNotify+0x94>
    25dc:	18 f4       	brcc	.+6      	; 0x25e4 <xTaskGenericNotify+0x5c>
    25de:	01 30       	cpi	r16, 0x01	; 1
    25e0:	31 f0       	breq	.+12     	; 0x25ee <xTaskGenericNotify+0x66>
    25e2:	4d c0       	rjmp	.+154    	; 0x267e <xTaskGenericNotify+0xf6>
    25e4:	03 30       	cpi	r16, 0x03	; 3
    25e6:	79 f1       	breq	.+94     	; 0x2646 <xTaskGenericNotify+0xbe>
    25e8:	04 30       	cpi	r16, 0x04	; 4
    25ea:	d1 f1       	breq	.+116    	; 0x2660 <xTaskGenericNotify+0xd8>
    25ec:	48 c0       	rjmp	.+144    	; 0x267e <xTaskGenericNotify+0xf6>
    25ee:	66 0f       	add	r22, r22
    25f0:	77 1f       	adc	r23, r23
    25f2:	66 0f       	add	r22, r22
    25f4:	77 1f       	adc	r23, r23
    25f6:	fd 01       	movw	r30, r26
    25f8:	e6 0f       	add	r30, r22
    25fa:	f7 1f       	adc	r31, r23
    25fc:	87 a4       	ldd	r8, Z+47	; 0x2f
    25fe:	90 a8       	ldd	r9, Z+48	; 0x30
    2600:	a1 a8       	ldd	r10, Z+49	; 0x31
    2602:	b2 a8       	ldd	r11, Z+50	; 0x32
    2604:	ba 01       	movw	r22, r20
    2606:	a9 01       	movw	r20, r18
    2608:	48 29       	or	r20, r8
    260a:	59 29       	or	r21, r9
    260c:	6a 29       	or	r22, r10
    260e:	7b 29       	or	r23, r11
    2610:	47 a7       	std	Z+47, r20	; 0x2f
    2612:	50 ab       	std	Z+48, r21	; 0x30
    2614:	61 ab       	std	Z+49, r22	; 0x31
    2616:	72 ab       	std	Z+50, r23	; 0x32
    2618:	01 e0       	ldi	r16, 0x01	; 1
    261a:	34 c0       	rjmp	.+104    	; 0x2684 <xTaskGenericNotify+0xfc>
    261c:	66 0f       	add	r22, r22
    261e:	77 1f       	adc	r23, r23
    2620:	66 0f       	add	r22, r22
    2622:	77 1f       	adc	r23, r23
    2624:	fd 01       	movw	r30, r26
    2626:	e6 0f       	add	r30, r22
    2628:	f7 1f       	adc	r31, r23
    262a:	47 a5       	ldd	r20, Z+47	; 0x2f
    262c:	50 a9       	ldd	r21, Z+48	; 0x30
    262e:	61 a9       	ldd	r22, Z+49	; 0x31
    2630:	72 a9       	ldd	r23, Z+50	; 0x32
    2632:	4f 5f       	subi	r20, 0xFF	; 255
    2634:	5f 4f       	sbci	r21, 0xFF	; 255
    2636:	6f 4f       	sbci	r22, 0xFF	; 255
    2638:	7f 4f       	sbci	r23, 0xFF	; 255
    263a:	47 a7       	std	Z+47, r20	; 0x2f
    263c:	50 ab       	std	Z+48, r21	; 0x30
    263e:	61 ab       	std	Z+49, r22	; 0x31
    2640:	72 ab       	std	Z+50, r23	; 0x32
    2642:	01 e0       	ldi	r16, 0x01	; 1
    2644:	1f c0       	rjmp	.+62     	; 0x2684 <xTaskGenericNotify+0xfc>
    2646:	66 0f       	add	r22, r22
    2648:	77 1f       	adc	r23, r23
    264a:	66 0f       	add	r22, r22
    264c:	77 1f       	adc	r23, r23
    264e:	fd 01       	movw	r30, r26
    2650:	e6 0f       	add	r30, r22
    2652:	f7 1f       	adc	r31, r23
    2654:	27 a7       	std	Z+47, r18	; 0x2f
    2656:	30 ab       	std	Z+48, r19	; 0x30
    2658:	41 ab       	std	Z+49, r20	; 0x31
    265a:	52 ab       	std	Z+50, r21	; 0x32
    265c:	01 e0       	ldi	r16, 0x01	; 1
    265e:	12 c0       	rjmp	.+36     	; 0x2684 <xTaskGenericNotify+0xfc>
    2660:	82 30       	cpi	r24, 0x02	; 2
    2662:	79 f0       	breq	.+30     	; 0x2682 <xTaskGenericNotify+0xfa>
    2664:	66 0f       	add	r22, r22
    2666:	77 1f       	adc	r23, r23
    2668:	66 0f       	add	r22, r22
    266a:	77 1f       	adc	r23, r23
    266c:	fd 01       	movw	r30, r26
    266e:	e6 0f       	add	r30, r22
    2670:	f7 1f       	adc	r31, r23
    2672:	27 a7       	std	Z+47, r18	; 0x2f
    2674:	30 ab       	std	Z+48, r19	; 0x30
    2676:	41 ab       	std	Z+49, r20	; 0x31
    2678:	52 ab       	std	Z+50, r21	; 0x32
    267a:	01 e0       	ldi	r16, 0x01	; 1
    267c:	03 c0       	rjmp	.+6      	; 0x2684 <xTaskGenericNotify+0xfc>
    267e:	01 e0       	ldi	r16, 0x01	; 1
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <xTaskGenericNotify+0xfc>
    2682:	00 e0       	ldi	r16, 0x00	; 0
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	09 f0       	breq	.+2      	; 0x268a <xTaskGenericNotify+0x102>
    2688:	69 c0       	rjmp	.+210    	; 0x275c <xTaskGenericNotify+0x1d4>
    268a:	1c 96       	adiw	r26, 0x0c	; 12
    268c:	ed 91       	ld	r30, X+
    268e:	fc 91       	ld	r31, X
    2690:	1d 97       	sbiw	r26, 0x0d	; 13
    2692:	16 96       	adiw	r26, 0x06	; 6
    2694:	cd 91       	ld	r28, X+
    2696:	dc 91       	ld	r29, X
    2698:	17 97       	sbiw	r26, 0x07	; 7
    269a:	18 96       	adiw	r26, 0x08	; 8
    269c:	8d 91       	ld	r24, X+
    269e:	9c 91       	ld	r25, X
    26a0:	19 97       	sbiw	r26, 0x09	; 9
    26a2:	9f 83       	std	Y+7, r25	; 0x07
    26a4:	8e 83       	std	Y+6, r24	; 0x06
    26a6:	18 96       	adiw	r26, 0x08	; 8
    26a8:	cd 91       	ld	r28, X+
    26aa:	dc 91       	ld	r29, X
    26ac:	19 97       	sbiw	r26, 0x09	; 9
    26ae:	16 96       	adiw	r26, 0x06	; 6
    26b0:	8d 91       	ld	r24, X+
    26b2:	9c 91       	ld	r25, X
    26b4:	17 97       	sbiw	r26, 0x07	; 7
    26b6:	9d 83       	std	Y+5, r25	; 0x05
    26b8:	8c 83       	std	Y+4, r24	; 0x04
    26ba:	81 81       	ldd	r24, Z+1	; 0x01
    26bc:	92 81       	ldd	r25, Z+2	; 0x02
    26be:	9d 01       	movw	r18, r26
    26c0:	2e 5f       	subi	r18, 0xFE	; 254
    26c2:	3f 4f       	sbci	r19, 0xFF	; 255
    26c4:	82 17       	cp	r24, r18
    26c6:	93 07       	cpc	r25, r19
    26c8:	31 f4       	brne	.+12     	; 0x26d6 <xTaskGenericNotify+0x14e>
    26ca:	18 96       	adiw	r26, 0x08	; 8
    26cc:	8d 91       	ld	r24, X+
    26ce:	9c 91       	ld	r25, X
    26d0:	19 97       	sbiw	r26, 0x09	; 9
    26d2:	92 83       	std	Z+2, r25	; 0x02
    26d4:	81 83       	std	Z+1, r24	; 0x01
    26d6:	1d 96       	adiw	r26, 0x0d	; 13
    26d8:	1c 92       	st	X, r1
    26da:	1e 92       	st	-X, r1
    26dc:	1c 97       	sbiw	r26, 0x0c	; 12
    26de:	80 81       	ld	r24, Z
    26e0:	81 50       	subi	r24, 0x01	; 1
    26e2:	80 83       	st	Z, r24
    26e4:	5a 96       	adiw	r26, 0x1a	; 26
    26e6:	ec 91       	ld	r30, X
    26e8:	5a 97       	sbiw	r26, 0x1a	; 26
    26ea:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    26ee:	8e 17       	cp	r24, r30
    26f0:	10 f4       	brcc	.+4      	; 0x26f6 <xTaskGenericNotify+0x16e>
    26f2:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    26f6:	8b e0       	ldi	r24, 0x0B	; 11
    26f8:	8e 9f       	mul	r24, r30
    26fa:	f0 01       	movw	r30, r0
    26fc:	11 24       	eor	r1, r1
    26fe:	e5 5a       	subi	r30, 0xA5	; 165
    2700:	fa 4e       	sbci	r31, 0xEA	; 234
    2702:	01 80       	ldd	r0, Z+1	; 0x01
    2704:	f2 81       	ldd	r31, Z+2	; 0x02
    2706:	e0 2d       	mov	r30, r0
    2708:	17 96       	adiw	r26, 0x07	; 7
    270a:	fc 93       	st	X, r31
    270c:	ee 93       	st	-X, r30
    270e:	16 97       	sbiw	r26, 0x06	; 6
    2710:	46 81       	ldd	r20, Z+6	; 0x06
    2712:	57 81       	ldd	r21, Z+7	; 0x07
    2714:	19 96       	adiw	r26, 0x09	; 9
    2716:	5c 93       	st	X, r21
    2718:	4e 93       	st	-X, r20
    271a:	18 97       	sbiw	r26, 0x08	; 8
    271c:	c6 81       	ldd	r28, Z+6	; 0x06
    271e:	d7 81       	ldd	r29, Z+7	; 0x07
    2720:	3d 83       	std	Y+5, r19	; 0x05
    2722:	2c 83       	std	Y+4, r18	; 0x04
    2724:	37 83       	std	Z+7, r19	; 0x07
    2726:	26 83       	std	Z+6, r18	; 0x06
    2728:	5a 96       	adiw	r26, 0x1a	; 26
    272a:	ec 91       	ld	r30, X
    272c:	5a 97       	sbiw	r26, 0x1a	; 26
    272e:	8e 9f       	mul	r24, r30
    2730:	f0 01       	movw	r30, r0
    2732:	11 24       	eor	r1, r1
    2734:	e5 5a       	subi	r30, 0xA5	; 165
    2736:	fa 4e       	sbci	r31, 0xEA	; 234
    2738:	1d 96       	adiw	r26, 0x0d	; 13
    273a:	fc 93       	st	X, r31
    273c:	ee 93       	st	-X, r30
    273e:	1c 97       	sbiw	r26, 0x0c	; 12
    2740:	80 81       	ld	r24, Z
    2742:	8f 5f       	subi	r24, 0xFF	; 255
    2744:	80 83       	st	Z, r24
    2746:	5a 96       	adiw	r26, 0x1a	; 26
    2748:	9c 91       	ld	r25, X
    274a:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    274e:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2752:	82 8d       	ldd	r24, Z+26	; 0x1a
    2754:	89 17       	cp	r24, r25
    2756:	10 f4       	brcc	.+4      	; 0x275c <xTaskGenericNotify+0x1d4>
    2758:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    275c:	0f 90       	pop	r0
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	80 2f       	mov	r24, r16
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	0f 91       	pop	r16
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	bf 90       	pop	r11
    276e:	af 90       	pop	r10
    2770:	9f 90       	pop	r9
    2772:	8f 90       	pop	r8
    2774:	08 95       	ret

00002776 <xTaskGenericNotifyFromISR>:
    2776:	8f 92       	push	r8
    2778:	9f 92       	push	r9
    277a:	af 92       	push	r10
    277c:	bf 92       	push	r11
    277e:	cf 92       	push	r12
    2780:	df 92       	push	r13
    2782:	ef 92       	push	r14
    2784:	ff 92       	push	r15
    2786:	0f 93       	push	r16
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	dc 01       	movw	r26, r24
    278e:	e1 14       	cp	r14, r1
    2790:	f1 04       	cpc	r15, r1
    2792:	89 f0       	breq	.+34     	; 0x27b6 <xTaskGenericNotifyFromISR+0x40>
    2794:	e6 2f       	mov	r30, r22
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	e8 0f       	add	r30, r24
    27a2:	f9 1f       	adc	r31, r25
    27a4:	87 a4       	ldd	r8, Z+47	; 0x2f
    27a6:	90 a8       	ldd	r9, Z+48	; 0x30
    27a8:	a1 a8       	ldd	r10, Z+49	; 0x31
    27aa:	b2 a8       	ldd	r11, Z+50	; 0x32
    27ac:	f7 01       	movw	r30, r14
    27ae:	80 82       	st	Z, r8
    27b0:	91 82       	std	Z+1, r9	; 0x01
    27b2:	a2 82       	std	Z+2, r10	; 0x02
    27b4:	b3 82       	std	Z+3, r11	; 0x03
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	fd 01       	movw	r30, r26
    27ba:	e6 0f       	add	r30, r22
    27bc:	f7 1f       	adc	r31, r23
    27be:	93 a9       	ldd	r25, Z+51	; 0x33
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	83 ab       	std	Z+51, r24	; 0x33
    27c4:	02 30       	cpi	r16, 0x02	; 2
    27c6:	01 f1       	breq	.+64     	; 0x2808 <xTaskGenericNotifyFromISR+0x92>
    27c8:	18 f4       	brcc	.+6      	; 0x27d0 <xTaskGenericNotifyFromISR+0x5a>
    27ca:	01 30       	cpi	r16, 0x01	; 1
    27cc:	31 f0       	breq	.+12     	; 0x27da <xTaskGenericNotifyFromISR+0x64>
    27ce:	4d c0       	rjmp	.+154    	; 0x286a <xTaskGenericNotifyFromISR+0xf4>
    27d0:	03 30       	cpi	r16, 0x03	; 3
    27d2:	79 f1       	breq	.+94     	; 0x2832 <xTaskGenericNotifyFromISR+0xbc>
    27d4:	04 30       	cpi	r16, 0x04	; 4
    27d6:	d1 f1       	breq	.+116    	; 0x284c <xTaskGenericNotifyFromISR+0xd6>
    27d8:	48 c0       	rjmp	.+144    	; 0x286a <xTaskGenericNotifyFromISR+0xf4>
    27da:	66 0f       	add	r22, r22
    27dc:	77 1f       	adc	r23, r23
    27de:	66 0f       	add	r22, r22
    27e0:	77 1f       	adc	r23, r23
    27e2:	fd 01       	movw	r30, r26
    27e4:	e6 0f       	add	r30, r22
    27e6:	f7 1f       	adc	r31, r23
    27e8:	87 a4       	ldd	r8, Z+47	; 0x2f
    27ea:	90 a8       	ldd	r9, Z+48	; 0x30
    27ec:	a1 a8       	ldd	r10, Z+49	; 0x31
    27ee:	b2 a8       	ldd	r11, Z+50	; 0x32
    27f0:	ba 01       	movw	r22, r20
    27f2:	a9 01       	movw	r20, r18
    27f4:	48 29       	or	r20, r8
    27f6:	59 29       	or	r21, r9
    27f8:	6a 29       	or	r22, r10
    27fa:	7b 29       	or	r23, r11
    27fc:	47 a7       	std	Z+47, r20	; 0x2f
    27fe:	50 ab       	std	Z+48, r21	; 0x30
    2800:	61 ab       	std	Z+49, r22	; 0x31
    2802:	72 ab       	std	Z+50, r23	; 0x32
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	34 c0       	rjmp	.+104    	; 0x2870 <xTaskGenericNotifyFromISR+0xfa>
    2808:	66 0f       	add	r22, r22
    280a:	77 1f       	adc	r23, r23
    280c:	66 0f       	add	r22, r22
    280e:	77 1f       	adc	r23, r23
    2810:	fd 01       	movw	r30, r26
    2812:	e6 0f       	add	r30, r22
    2814:	f7 1f       	adc	r31, r23
    2816:	47 a5       	ldd	r20, Z+47	; 0x2f
    2818:	50 a9       	ldd	r21, Z+48	; 0x30
    281a:	61 a9       	ldd	r22, Z+49	; 0x31
    281c:	72 a9       	ldd	r23, Z+50	; 0x32
    281e:	4f 5f       	subi	r20, 0xFF	; 255
    2820:	5f 4f       	sbci	r21, 0xFF	; 255
    2822:	6f 4f       	sbci	r22, 0xFF	; 255
    2824:	7f 4f       	sbci	r23, 0xFF	; 255
    2826:	47 a7       	std	Z+47, r20	; 0x2f
    2828:	50 ab       	std	Z+48, r21	; 0x30
    282a:	61 ab       	std	Z+49, r22	; 0x31
    282c:	72 ab       	std	Z+50, r23	; 0x32
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	1f c0       	rjmp	.+62     	; 0x2870 <xTaskGenericNotifyFromISR+0xfa>
    2832:	66 0f       	add	r22, r22
    2834:	77 1f       	adc	r23, r23
    2836:	66 0f       	add	r22, r22
    2838:	77 1f       	adc	r23, r23
    283a:	fd 01       	movw	r30, r26
    283c:	e6 0f       	add	r30, r22
    283e:	f7 1f       	adc	r31, r23
    2840:	27 a7       	std	Z+47, r18	; 0x2f
    2842:	30 ab       	std	Z+48, r19	; 0x30
    2844:	41 ab       	std	Z+49, r20	; 0x31
    2846:	52 ab       	std	Z+50, r21	; 0x32
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	12 c0       	rjmp	.+36     	; 0x2870 <xTaskGenericNotifyFromISR+0xfa>
    284c:	92 30       	cpi	r25, 0x02	; 2
    284e:	79 f0       	breq	.+30     	; 0x286e <xTaskGenericNotifyFromISR+0xf8>
    2850:	66 0f       	add	r22, r22
    2852:	77 1f       	adc	r23, r23
    2854:	66 0f       	add	r22, r22
    2856:	77 1f       	adc	r23, r23
    2858:	fd 01       	movw	r30, r26
    285a:	e6 0f       	add	r30, r22
    285c:	f7 1f       	adc	r31, r23
    285e:	27 a7       	std	Z+47, r18	; 0x2f
    2860:	30 ab       	std	Z+48, r19	; 0x30
    2862:	41 ab       	std	Z+49, r20	; 0x31
    2864:	52 ab       	std	Z+50, r21	; 0x32
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	03 c0       	rjmp	.+6      	; 0x2870 <xTaskGenericNotifyFromISR+0xfa>
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <xTaskGenericNotifyFromISR+0xfa>
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	91 30       	cpi	r25, 0x01	; 1
    2872:	09 f0       	breq	.+2      	; 0x2876 <xTaskGenericNotifyFromISR+0x100>
    2874:	96 c0       	rjmp	.+300    	; 0x29a2 <xTaskGenericNotifyFromISR+0x22c>
    2876:	90 91 0a 15 	lds	r25, 0x150A	; 0x80150a <uxSchedulerSuspended>
    287a:	91 11       	cpse	r25, r1
    287c:	5f c0       	rjmp	.+190    	; 0x293c <xTaskGenericNotifyFromISR+0x1c6>
    287e:	1c 96       	adiw	r26, 0x0c	; 12
    2880:	ed 91       	ld	r30, X+
    2882:	fc 91       	ld	r31, X
    2884:	1d 97       	sbiw	r26, 0x0d	; 13
    2886:	16 96       	adiw	r26, 0x06	; 6
    2888:	cd 91       	ld	r28, X+
    288a:	dc 91       	ld	r29, X
    288c:	17 97       	sbiw	r26, 0x07	; 7
    288e:	18 96       	adiw	r26, 0x08	; 8
    2890:	2d 91       	ld	r18, X+
    2892:	3c 91       	ld	r19, X
    2894:	19 97       	sbiw	r26, 0x09	; 9
    2896:	3f 83       	std	Y+7, r19	; 0x07
    2898:	2e 83       	std	Y+6, r18	; 0x06
    289a:	18 96       	adiw	r26, 0x08	; 8
    289c:	cd 91       	ld	r28, X+
    289e:	dc 91       	ld	r29, X
    28a0:	19 97       	sbiw	r26, 0x09	; 9
    28a2:	16 96       	adiw	r26, 0x06	; 6
    28a4:	2d 91       	ld	r18, X+
    28a6:	3c 91       	ld	r19, X
    28a8:	17 97       	sbiw	r26, 0x07	; 7
    28aa:	3d 83       	std	Y+5, r19	; 0x05
    28ac:	2c 83       	std	Y+4, r18	; 0x04
    28ae:	41 81       	ldd	r20, Z+1	; 0x01
    28b0:	52 81       	ldd	r21, Z+2	; 0x02
    28b2:	9d 01       	movw	r18, r26
    28b4:	2e 5f       	subi	r18, 0xFE	; 254
    28b6:	3f 4f       	sbci	r19, 0xFF	; 255
    28b8:	42 17       	cp	r20, r18
    28ba:	53 07       	cpc	r21, r19
    28bc:	31 f4       	brne	.+12     	; 0x28ca <xTaskGenericNotifyFromISR+0x154>
    28be:	18 96       	adiw	r26, 0x08	; 8
    28c0:	4d 91       	ld	r20, X+
    28c2:	5c 91       	ld	r21, X
    28c4:	19 97       	sbiw	r26, 0x09	; 9
    28c6:	52 83       	std	Z+2, r21	; 0x02
    28c8:	41 83       	std	Z+1, r20	; 0x01
    28ca:	1d 96       	adiw	r26, 0x0d	; 13
    28cc:	1c 92       	st	X, r1
    28ce:	1e 92       	st	-X, r1
    28d0:	1c 97       	sbiw	r26, 0x0c	; 12
    28d2:	90 81       	ld	r25, Z
    28d4:	91 50       	subi	r25, 0x01	; 1
    28d6:	90 83       	st	Z, r25
    28d8:	5a 96       	adiw	r26, 0x1a	; 26
    28da:	ec 91       	ld	r30, X
    28dc:	5a 97       	sbiw	r26, 0x1a	; 26
    28de:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <uxTopReadyPriority>
    28e2:	9e 17       	cp	r25, r30
    28e4:	10 f4       	brcc	.+4      	; 0x28ea <xTaskGenericNotifyFromISR+0x174>
    28e6:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    28ea:	9b e0       	ldi	r25, 0x0B	; 11
    28ec:	9e 9f       	mul	r25, r30
    28ee:	f0 01       	movw	r30, r0
    28f0:	11 24       	eor	r1, r1
    28f2:	e5 5a       	subi	r30, 0xA5	; 165
    28f4:	fa 4e       	sbci	r31, 0xEA	; 234
    28f6:	01 80       	ldd	r0, Z+1	; 0x01
    28f8:	f2 81       	ldd	r31, Z+2	; 0x02
    28fa:	e0 2d       	mov	r30, r0
    28fc:	17 96       	adiw	r26, 0x07	; 7
    28fe:	fc 93       	st	X, r31
    2900:	ee 93       	st	-X, r30
    2902:	16 97       	sbiw	r26, 0x06	; 6
    2904:	46 81       	ldd	r20, Z+6	; 0x06
    2906:	57 81       	ldd	r21, Z+7	; 0x07
    2908:	19 96       	adiw	r26, 0x09	; 9
    290a:	5c 93       	st	X, r21
    290c:	4e 93       	st	-X, r20
    290e:	18 97       	sbiw	r26, 0x08	; 8
    2910:	c6 81       	ldd	r28, Z+6	; 0x06
    2912:	d7 81       	ldd	r29, Z+7	; 0x07
    2914:	3d 83       	std	Y+5, r19	; 0x05
    2916:	2c 83       	std	Y+4, r18	; 0x04
    2918:	37 83       	std	Z+7, r19	; 0x07
    291a:	26 83       	std	Z+6, r18	; 0x06
    291c:	5a 96       	adiw	r26, 0x1a	; 26
    291e:	ec 91       	ld	r30, X
    2920:	5a 97       	sbiw	r26, 0x1a	; 26
    2922:	9e 9f       	mul	r25, r30
    2924:	f0 01       	movw	r30, r0
    2926:	11 24       	eor	r1, r1
    2928:	e5 5a       	subi	r30, 0xA5	; 165
    292a:	fa 4e       	sbci	r31, 0xEA	; 234
    292c:	1d 96       	adiw	r26, 0x0d	; 13
    292e:	fc 93       	st	X, r31
    2930:	ee 93       	st	-X, r30
    2932:	1c 97       	sbiw	r26, 0x0c	; 12
    2934:	90 81       	ld	r25, Z
    2936:	9f 5f       	subi	r25, 0xFF	; 255
    2938:	90 83       	st	Z, r25
    293a:	21 c0       	rjmp	.+66     	; 0x297e <xTaskGenericNotifyFromISR+0x208>
    293c:	66 e3       	ldi	r22, 0x36	; 54
    293e:	75 e1       	ldi	r23, 0x15	; 21
    2940:	fb 01       	movw	r30, r22
    2942:	c1 81       	ldd	r28, Z+1	; 0x01
    2944:	d2 81       	ldd	r29, Z+2	; 0x02
    2946:	53 96       	adiw	r26, 0x13	; 19
    2948:	dc 93       	st	X, r29
    294a:	ce 93       	st	-X, r28
    294c:	52 97       	sbiw	r26, 0x12	; 18
    294e:	2e 81       	ldd	r18, Y+6	; 0x06
    2950:	3f 81       	ldd	r19, Y+7	; 0x07
    2952:	55 96       	adiw	r26, 0x15	; 21
    2954:	3c 93       	st	X, r19
    2956:	2e 93       	st	-X, r18
    2958:	54 97       	sbiw	r26, 0x14	; 20
    295a:	4e 81       	ldd	r20, Y+6	; 0x06
    295c:	5f 81       	ldd	r21, Y+7	; 0x07
    295e:	9d 01       	movw	r18, r26
    2960:	22 5f       	subi	r18, 0xF2	; 242
    2962:	3f 4f       	sbci	r19, 0xFF	; 255
    2964:	fa 01       	movw	r30, r20
    2966:	35 83       	std	Z+5, r19	; 0x05
    2968:	24 83       	std	Z+4, r18	; 0x04
    296a:	3f 83       	std	Y+7, r19	; 0x07
    296c:	2e 83       	std	Y+6, r18	; 0x06
    296e:	59 96       	adiw	r26, 0x19	; 25
    2970:	7c 93       	st	X, r23
    2972:	6e 93       	st	-X, r22
    2974:	58 97       	sbiw	r26, 0x18	; 24
    2976:	fb 01       	movw	r30, r22
    2978:	90 81       	ld	r25, Z
    297a:	9f 5f       	subi	r25, 0xFF	; 255
    297c:	90 83       	st	Z, r25
    297e:	5a 96       	adiw	r26, 0x1a	; 26
    2980:	2c 91       	ld	r18, X
    2982:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2986:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    298a:	92 8d       	ldd	r25, Z+26	; 0x1a
    298c:	92 17       	cp	r25, r18
    298e:	48 f4       	brcc	.+18     	; 0x29a2 <xTaskGenericNotifyFromISR+0x22c>
    2990:	c1 14       	cp	r12, r1
    2992:	d1 04       	cpc	r13, r1
    2994:	19 f0       	breq	.+6      	; 0x299c <xTaskGenericNotifyFromISR+0x226>
    2996:	91 e0       	ldi	r25, 0x01	; 1
    2998:	f6 01       	movw	r30, r12
    299a:	90 83       	st	Z, r25
    299c:	91 e0       	ldi	r25, 0x01	; 1
    299e:	90 93 13 15 	sts	0x1513, r25	; 0x801513 <xYieldPending>
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	ef 90       	pop	r14
    29ac:	df 90       	pop	r13
    29ae:	cf 90       	pop	r12
    29b0:	bf 90       	pop	r11
    29b2:	af 90       	pop	r10
    29b4:	9f 90       	pop	r9
    29b6:	8f 90       	pop	r8
    29b8:	08 95       	ret

000029ba <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	21 f4       	brne	.+8      	; 0x29c6 <xTaskGenericNotifyStateClear+0xc>
    29be:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    29c2:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    29cc:	70 e0       	ldi	r23, 0x00	; 0
    29ce:	fc 01       	movw	r30, r24
    29d0:	e6 0f       	add	r30, r22
    29d2:	f7 1f       	adc	r31, r23
    29d4:	23 a9       	ldd	r18, Z+51	; 0x33
    29d6:	22 30       	cpi	r18, 0x02	; 2
    29d8:	31 f4       	brne	.+12     	; 0x29e6 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    29da:	fc 01       	movw	r30, r24
    29dc:	e6 0f       	add	r30, r22
    29de:	f7 1f       	adc	r31, r23
    29e0:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	01 c0       	rjmp	.+2      	; 0x29e8 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    29e6:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    29e8:	0f 90       	pop	r0
    29ea:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    29ec:	08 95       	ret

000029ee <prvGetNextExpireTime>:
    29ee:	dc 01       	movw	r26, r24
    29f0:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
    29f4:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
    29f8:	80 81       	ld	r24, Z
    29fa:	91 e0       	ldi	r25, 0x01	; 1
    29fc:	81 11       	cpse	r24, r1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	9c 93       	st	X, r25
    2a02:	91 11       	cpse	r25, r1
    2a04:	08 c0       	rjmp	.+16     	; 0x2a16 <prvGetNextExpireTime+0x28>
    2a06:	07 80       	ldd	r0, Z+7	; 0x07
    2a08:	f0 85       	ldd	r31, Z+8	; 0x08
    2a0a:	e0 2d       	mov	r30, r0
    2a0c:	60 81       	ld	r22, Z
    2a0e:	71 81       	ldd	r23, Z+1	; 0x01
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	93 81       	ldd	r25, Z+3	; 0x03
    2a14:	08 95       	ret
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	08 95       	ret

00002a1e <prvInsertTimerInActiveList>:
    2a1e:	cf 92       	push	r12
    2a20:	df 92       	push	r13
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	42 83       	std	Z+2, r20	; 0x02
    2a2e:	53 83       	std	Z+3, r21	; 0x03
    2a30:	64 83       	std	Z+4, r22	; 0x04
    2a32:	75 83       	std	Z+5, r23	; 0x05
    2a34:	93 87       	std	Z+11, r25	; 0x0b
    2a36:	82 87       	std	Z+10, r24	; 0x0a
    2a38:	04 17       	cp	r16, r20
    2a3a:	15 07       	cpc	r17, r21
    2a3c:	26 07       	cpc	r18, r22
    2a3e:	37 07       	cpc	r19, r23
    2a40:	c0 f0       	brcs	.+48     	; 0x2a72 <prvInsertTimerInActiveList+0x54>
    2a42:	0c 19       	sub	r16, r12
    2a44:	1d 09       	sbc	r17, r13
    2a46:	2e 09       	sbc	r18, r14
    2a48:	3f 09       	sbc	r19, r15
    2a4a:	86 85       	ldd	r24, Z+14	; 0x0e
    2a4c:	97 85       	ldd	r25, Z+15	; 0x0f
    2a4e:	a0 89       	ldd	r26, Z+16	; 0x10
    2a50:	b1 89       	ldd	r27, Z+17	; 0x11
    2a52:	08 17       	cp	r16, r24
    2a54:	19 07       	cpc	r17, r25
    2a56:	2a 07       	cpc	r18, r26
    2a58:	3b 07       	cpc	r19, r27
    2a5a:	00 f5       	brcc	.+64     	; 0x2a9c <prvInsertTimerInActiveList+0x7e>
    2a5c:	bf 01       	movw	r22, r30
    2a5e:	6e 5f       	subi	r22, 0xFE	; 254
    2a60:	7f 4f       	sbci	r23, 0xFF	; 255
    2a62:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <pxOverflowTimerList>
    2a66:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <pxOverflowTimerList+0x1>
    2a6a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsert>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	18 c0       	rjmp	.+48     	; 0x2aa2 <prvInsertTimerInActiveList+0x84>
    2a72:	0c 15       	cp	r16, r12
    2a74:	1d 05       	cpc	r17, r13
    2a76:	2e 05       	cpc	r18, r14
    2a78:	3f 05       	cpc	r19, r15
    2a7a:	28 f4       	brcc	.+10     	; 0x2a86 <prvInsertTimerInActiveList+0x68>
    2a7c:	4c 15       	cp	r20, r12
    2a7e:	5d 05       	cpc	r21, r13
    2a80:	6e 05       	cpc	r22, r14
    2a82:	7f 05       	cpc	r23, r15
    2a84:	68 f4       	brcc	.+26     	; 0x2aa0 <prvInsertTimerInActiveList+0x82>
    2a86:	bf 01       	movw	r22, r30
    2a88:	6e 5f       	subi	r22, 0xFE	; 254
    2a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8c:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
    2a90:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
    2a94:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsert>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	03 c0       	rjmp	.+6      	; 0x2aa2 <prvInsertTimerInActiveList+0x84>
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	01 c0       	rjmp	.+2      	; 0x2aa2 <prvInsertTimerInActiveList+0x84>
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	1f 91       	pop	r17
    2aa4:	0f 91       	pop	r16
    2aa6:	ff 90       	pop	r15
    2aa8:	ef 90       	pop	r14
    2aaa:	df 90       	pop	r13
    2aac:	cf 90       	pop	r12
    2aae:	08 95       	ret

00002ab0 <prvCheckForValidListAndQueue>:
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	0f 92       	push	r0
    2ab6:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    2aba:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2abe:	89 2b       	or	r24, r25
    2ac0:	e9 f4       	brne	.+58     	; 0x2afc <prvCheckForValidListAndQueue+0x4c>
    2ac2:	82 ee       	ldi	r24, 0xE2	; 226
    2ac4:	95 e1       	ldi	r25, 0x15	; 21
    2ac6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vListInitialise>
    2aca:	87 ed       	ldi	r24, 0xD7	; 215
    2acc:	95 e1       	ldi	r25, 0x15	; 21
    2ace:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vListInitialise>
    2ad2:	82 ee       	ldi	r24, 0xE2	; 226
    2ad4:	95 e1       	ldi	r25, 0x15	; 21
    2ad6:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <pxCurrentTimerList+0x1>
    2ada:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <pxCurrentTimerList>
    2ade:	87 ed       	ldi	r24, 0xD7	; 215
    2ae0:	95 e1       	ldi	r25, 0x15	; 21
    2ae2:	90 93 d4 15 	sts	0x15D4, r25	; 0x8015d4 <pxOverflowTimerList+0x1>
    2ae6:	80 93 d3 15 	sts	0x15D3, r24	; 0x8015d3 <pxOverflowTimerList>
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	67 e0       	ldi	r22, 0x07	; 7
    2aee:	8a e0       	ldi	r24, 0x0A	; 10
    2af0:	0e 94 95 05 	call	0xb2a	; 0xb2a <xQueueGenericCreate>
    2af4:	90 93 d2 15 	sts	0x15D2, r25	; 0x8015d2 <xTimerQueue+0x1>
    2af8:	80 93 d1 15 	sts	0x15D1, r24	; 0x8015d1 <xTimerQueue>
    2afc:	0f 90       	pop	r0
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	08 95       	ret

00002b02 <xTimerCreateTimerTask>:
    2b02:	ef 92       	push	r14
    2b04:	ff 92       	push	r15
    2b06:	0f 93       	push	r16
    2b08:	d3 df       	rcall	.-90     	; 0x2ab0 <prvCheckForValidListAndQueue>
    2b0a:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    2b0e:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2b12:	89 2b       	or	r24, r25
    2b14:	91 f0       	breq	.+36     	; 0x2b3a <xTimerCreateTimerTask+0x38>
    2b16:	0f 2e       	mov	r0, r31
    2b18:	ff ec       	ldi	r31, 0xCF	; 207
    2b1a:	ef 2e       	mov	r14, r31
    2b1c:	f5 e1       	ldi	r31, 0x15	; 21
    2b1e:	ff 2e       	mov	r15, r31
    2b20:	f0 2d       	mov	r31, r0
    2b22:	03 e0       	ldi	r16, 0x03	; 3
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 ec       	ldi	r20, 0xC0	; 192
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	67 e4       	ldi	r22, 0x47	; 71
    2b2e:	72 e0       	ldi	r23, 0x02	; 2
    2b30:	88 e5       	ldi	r24, 0x58	; 88
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	0e 94 91 0c 	call	0x1922	; 0x1922 <xTaskCreate>
    2b38:	01 c0       	rjmp	.+2      	; 0x2b3c <xTimerCreateTimerTask+0x3a>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	0f 91       	pop	r16
    2b3e:	ff 90       	pop	r15
    2b40:	ef 90       	pop	r14
    2b42:	08 95       	ret

00002b44 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2b44:	8f 92       	push	r8
    2b46:	9f 92       	push	r9
    2b48:	af 92       	push	r10
    2b4a:	bf 92       	push	r11
    2b4c:	cf 92       	push	r12
    2b4e:	df 92       	push	r13
    2b50:	ef 92       	push	r14
    2b52:	ff 92       	push	r15
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	27 97       	sbiw	r28, 0x07	; 7
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2b6c:	e0 91 d1 15 	lds	r30, 0x15D1	; 0x8015d1 <xTimerQueue>
    2b70:	f0 91 d2 15 	lds	r31, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2b74:	30 97       	sbiw	r30, 0x00	; 0
    2b76:	81 f1       	breq	.+96     	; 0x2bd8 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2b78:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2b7a:	2a 83       	std	Y+2, r18	; 0x02
    2b7c:	3b 83       	std	Y+3, r19	; 0x03
    2b7e:	4c 83       	std	Y+4, r20	; 0x04
    2b80:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2b82:	9f 83       	std	Y+7, r25	; 0x07
    2b84:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2b86:	66 30       	cpi	r22, 0x06	; 6
    2b88:	f4 f4       	brge	.+60     	; 0x2bc6 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2b8a:	ee db       	rcall	.-2084   	; 0x2368 <xTaskGetSchedulerState>
    2b8c:	82 30       	cpi	r24, 0x02	; 2
    2b8e:	69 f4       	brne	.+26     	; 0x2baa <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2b90:	00 e0       	ldi	r16, 0x00	; 0
    2b92:	a7 01       	movw	r20, r14
    2b94:	96 01       	movw	r18, r12
    2b96:	be 01       	movw	r22, r28
    2b98:	6f 5f       	subi	r22, 0xFF	; 255
    2b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9c:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    2ba0:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2ba4:	0e 94 b8 05 	call	0xb70	; 0xb70 <xQueueGenericSend>
    2ba8:	18 c0       	rjmp	.+48     	; 0x2bda <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2baa:	00 e0       	ldi	r16, 0x00	; 0
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	a9 01       	movw	r20, r18
    2bb2:	be 01       	movw	r22, r28
    2bb4:	6f 5f       	subi	r22, 0xFF	; 255
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb8:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    2bbc:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2bc0:	0e 94 b8 05 	call	0xb70	; 0xb70 <xQueueGenericSend>
    2bc4:	0a c0       	rjmp	.+20     	; 0x2bda <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	a8 01       	movw	r20, r16
    2bca:	be 01       	movw	r22, r28
    2bcc:	6f 5f       	subi	r22, 0xFF	; 255
    2bce:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd0:	cf 01       	movw	r24, r30
    2bd2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <xQueueGenericSendFromISR>
    2bd6:	01 c0       	rjmp	.+2      	; 0x2bda <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2bda:	27 96       	adiw	r28, 0x07	; 7
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	1f 91       	pop	r17
    2bec:	0f 91       	pop	r16
    2bee:	ff 90       	pop	r15
    2bf0:	ef 90       	pop	r14
    2bf2:	df 90       	pop	r13
    2bf4:	cf 90       	pop	r12
    2bf6:	bf 90       	pop	r11
    2bf8:	af 90       	pop	r10
    2bfa:	9f 90       	pop	r9
    2bfc:	8f 90       	pop	r8
    2bfe:	08 95       	ret

00002c00 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2c00:	8f 92       	push	r8
    2c02:	9f 92       	push	r9
    2c04:	af 92       	push	r10
    2c06:	bf 92       	push	r11
    2c08:	cf 92       	push	r12
    2c0a:	df 92       	push	r13
    2c0c:	ef 92       	push	r14
    2c0e:	ff 92       	push	r15
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2c18:	3b c0       	rjmp	.+118    	; 0x2c90 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c1a:	07 80       	ldd	r0, Z+7	; 0x07
    2c1c:	f0 85       	ldd	r31, Z+8	; 0x08
    2c1e:	e0 2d       	mov	r30, r0
    2c20:	80 80       	ld	r8, Z
    2c22:	91 80       	ldd	r9, Z+1	; 0x01
    2c24:	a2 80       	ldd	r10, Z+2	; 0x02
    2c26:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c28:	c0 85       	ldd	r28, Z+8	; 0x08
    2c2a:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c2c:	8e 01       	movw	r16, r28
    2c2e:	0e 5f       	subi	r16, 0xFE	; 254
    2c30:	1f 4f       	sbci	r17, 0xFF	; 255
    2c32:	c8 01       	movw	r24, r16
    2c34:	0e 94 34 03 	call	0x668	; 0x668 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c38:	ec 89       	ldd	r30, Y+20	; 0x14
    2c3a:	fd 89       	ldd	r31, Y+21	; 0x15
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c40:	8e 89       	ldd	r24, Y+22	; 0x16
    2c42:	82 ff       	sbrs	r24, 2
    2c44:	25 c0       	rjmp	.+74     	; 0x2c90 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2c46:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c48:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c4a:	a8 89       	ldd	r26, Y+16	; 0x10
    2c4c:	b9 89       	ldd	r27, Y+17	; 0x11
    2c4e:	88 0d       	add	r24, r8
    2c50:	99 1d       	adc	r25, r9
    2c52:	aa 1d       	adc	r26, r10
    2c54:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2c56:	88 16       	cp	r8, r24
    2c58:	99 06       	cpc	r9, r25
    2c5a:	aa 06       	cpc	r10, r26
    2c5c:	bb 06       	cpc	r11, r27
    2c5e:	70 f4       	brcc	.+28     	; 0x2c7c <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2c60:	8a 83       	std	Y+2, r24	; 0x02
    2c62:	9b 83       	std	Y+3, r25	; 0x03
    2c64:	ac 83       	std	Y+4, r26	; 0x04
    2c66:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2c68:	db 87       	std	Y+11, r29	; 0x0b
    2c6a:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2c6c:	b8 01       	movw	r22, r16
    2c6e:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
    2c72:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
    2c76:	0e 94 f7 02 	call	0x5ee	; 0x5ee <vListInsert>
    2c7a:	0a c0       	rjmp	.+20     	; 0x2c90 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c7c:	c1 2c       	mov	r12, r1
    2c7e:	d1 2c       	mov	r13, r1
    2c80:	76 01       	movw	r14, r12
    2c82:	00 e0       	ldi	r16, 0x00	; 0
    2c84:	10 e0       	ldi	r17, 0x00	; 0
    2c86:	a5 01       	movw	r20, r10
    2c88:	94 01       	movw	r18, r8
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	5a df       	rcall	.-332    	; 0x2b44 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2c90:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
    2c94:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
    2c98:	80 81       	ld	r24, Z
    2c9a:	81 11       	cpse	r24, r1
    2c9c:	be cf       	rjmp	.-132    	; 0x2c1a <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2c9e:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <pxOverflowTimerList>
    2ca2:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <pxOverflowTimerList+0x1>
    2ca6:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <pxCurrentTimerList+0x1>
    2caa:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2cae:	f0 93 d4 15 	sts	0x15D4, r31	; 0x8015d4 <pxOverflowTimerList+0x1>
    2cb2:	e0 93 d3 15 	sts	0x15D3, r30	; 0x8015d3 <pxOverflowTimerList>
    }
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	ff 90       	pop	r15
    2cc0:	ef 90       	pop	r14
    2cc2:	df 90       	pop	r13
    2cc4:	cf 90       	pop	r12
    2cc6:	bf 90       	pop	r11
    2cc8:	af 90       	pop	r10
    2cca:	9f 90       	pop	r9
    2ccc:	8f 90       	pop	r8
    2cce:	08 95       	ret

00002cd0 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2cd0:	cf 92       	push	r12
    2cd2:	df 92       	push	r13
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2cde:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskGetTickCount>
    2ce2:	6b 01       	movw	r12, r22
    2ce4:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2ce6:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xLastTime.2436>
    2cea:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xLastTime.2436+0x1>
    2cee:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <xLastTime.2436+0x2>
    2cf2:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <xLastTime.2436+0x3>
    2cf6:	c8 16       	cp	r12, r24
    2cf8:	d9 06       	cpc	r13, r25
    2cfa:	ea 06       	cpc	r14, r26
    2cfc:	fb 06       	cpc	r15, r27
    2cfe:	20 f4       	brcc	.+8      	; 0x2d08 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2d00:	7f df       	rcall	.-258    	; 0x2c00 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	88 83       	st	Y, r24
    2d06:	01 c0       	rjmp	.+2      	; 0x2d0a <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2d08:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2d0a:	c0 92 cb 15 	sts	0x15CB, r12	; 0x8015cb <xLastTime.2436>
    2d0e:	d0 92 cc 15 	sts	0x15CC, r13	; 0x8015cc <xLastTime.2436+0x1>
    2d12:	e0 92 cd 15 	sts	0x15CD, r14	; 0x8015cd <xLastTime.2436+0x2>
    2d16:	f0 92 ce 15 	sts	0x15CE, r15	; 0x8015ce <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2d1a:	c7 01       	movw	r24, r14
    2d1c:	b6 01       	movw	r22, r12
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	08 95       	ret

00002d2c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2d2c:	4f 92       	push	r4
    2d2e:	5f 92       	push	r5
    2d30:	6f 92       	push	r6
    2d32:	7f 92       	push	r7
    2d34:	8f 92       	push	r8
    2d36:	9f 92       	push	r9
    2d38:	af 92       	push	r10
    2d3a:	bf 92       	push	r11
    2d3c:	cf 92       	push	r12
    2d3e:	df 92       	push	r13
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	4b 01       	movw	r8, r22
    2d4e:	5c 01       	movw	r10, r24
    2d50:	29 01       	movw	r4, r18
    2d52:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2d54:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
    2d58:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
    2d5c:	07 80       	ldd	r0, Z+7	; 0x07
    2d5e:	f0 85       	ldd	r31, Z+8	; 0x08
    2d60:	e0 2d       	mov	r30, r0
    2d62:	c0 85       	ldd	r28, Z+8	; 0x08
    2d64:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d66:	ce 01       	movw	r24, r28
    2d68:	02 96       	adiw	r24, 0x02	; 2
    2d6a:	0e 94 34 03 	call	0x668	; 0x668 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d6e:	8e 89       	ldd	r24, Y+22	; 0x16
    2d70:	82 ff       	sbrs	r24, 2
    2d72:	1b c0       	rjmp	.+54     	; 0x2daa <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2d74:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d76:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d78:	68 89       	ldd	r22, Y+16	; 0x10
    2d7a:	79 89       	ldd	r23, Y+17	; 0x11
    2d7c:	48 0d       	add	r20, r8
    2d7e:	59 1d       	adc	r21, r9
    2d80:	6a 1d       	adc	r22, r10
    2d82:	7b 1d       	adc	r23, r11
    2d84:	75 01       	movw	r14, r10
    2d86:	64 01       	movw	r12, r8
    2d88:	93 01       	movw	r18, r6
    2d8a:	82 01       	movw	r16, r4
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	47 de       	rcall	.-882    	; 0x2a1e <prvInsertTimerInActiveList>
    2d90:	88 23       	and	r24, r24
    2d92:	69 f0       	breq	.+26     	; 0x2dae <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d94:	c1 2c       	mov	r12, r1
    2d96:	d1 2c       	mov	r13, r1
    2d98:	76 01       	movw	r14, r12
    2d9a:	00 e0       	ldi	r16, 0x00	; 0
    2d9c:	10 e0       	ldi	r17, 0x00	; 0
    2d9e:	a5 01       	movw	r20, r10
    2da0:	94 01       	movw	r18, r8
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	ce 01       	movw	r24, r28
    2da6:	ce de       	rcall	.-612    	; 0x2b44 <xTimerGenericCommand>
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2daa:	8e 7f       	andi	r24, 0xFE	; 254
    2dac:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2dae:	ec 89       	ldd	r30, Y+20	; 0x14
    2db0:	fd 89       	ldd	r31, Y+21	; 0x15
    2db2:	ce 01       	movw	r24, r28
    2db4:	19 95       	eicall
    }
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	0f 91       	pop	r16
    2dbe:	ff 90       	pop	r15
    2dc0:	ef 90       	pop	r14
    2dc2:	df 90       	pop	r13
    2dc4:	cf 90       	pop	r12
    2dc6:	bf 90       	pop	r11
    2dc8:	af 90       	pop	r10
    2dca:	9f 90       	pop	r9
    2dcc:	8f 90       	pop	r8
    2dce:	7f 90       	pop	r7
    2dd0:	6f 90       	pop	r6
    2dd2:	5f 90       	pop	r5
    2dd4:	4f 90       	pop	r4
    2dd6:	08 95       	ret

00002dd8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2dd8:	8f 92       	push	r8
    2dda:	9f 92       	push	r9
    2ddc:	af 92       	push	r10
    2dde:	bf 92       	push	r11
    2de0:	cf 92       	push	r12
    2de2:	df 92       	push	r13
    2de4:	ef 92       	push	r14
    2de6:	ff 92       	push	r15
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	1f 92       	push	r1
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	6b 01       	movw	r12, r22
    2df6:	7c 01       	movw	r14, r24
    2df8:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2dfa:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2dfe:	ce 01       	movw	r24, r28
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	66 df       	rcall	.-308    	; 0x2cd0 <prvSampleTimeNow>
    2e04:	4b 01       	movw	r8, r22
    2e06:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	81 11       	cpse	r24, r1
    2e0c:	2d c0       	rjmp	.+90     	; 0x2e68 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2e0e:	11 11       	cpse	r17, r1
    2e10:	0d c0       	rjmp	.+26     	; 0x2e2c <prvProcessTimerOrBlockTask+0x54>
    2e12:	8c 14       	cp	r8, r12
    2e14:	9d 04       	cpc	r9, r13
    2e16:	ae 04       	cpc	r10, r14
    2e18:	bf 04       	cpc	r11, r15
    2e1a:	40 f0       	brcs	.+16     	; 0x2e2c <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2e1c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2e20:	a5 01       	movw	r20, r10
    2e22:	94 01       	movw	r18, r8
    2e24:	c7 01       	movw	r24, r14
    2e26:	b6 01       	movw	r22, r12
    2e28:	81 df       	rcall	.-254    	; 0x2d2c <prvProcessExpiredTimer>
    2e2a:	20 c0       	rjmp	.+64     	; 0x2e6c <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2e2c:	11 23       	and	r17, r17
    2e2e:	41 f0       	breq	.+16     	; 0x2e40 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2e30:	e0 91 d3 15 	lds	r30, 0x15D3	; 0x8015d3 <pxOverflowTimerList>
    2e34:	f0 91 d4 15 	lds	r31, 0x15D4	; 0x8015d4 <pxOverflowTimerList+0x1>
    2e38:	80 81       	ld	r24, Z
    2e3a:	11 e0       	ldi	r17, 0x01	; 1
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2e40:	b7 01       	movw	r22, r14
    2e42:	a6 01       	movw	r20, r12
    2e44:	48 19       	sub	r20, r8
    2e46:	59 09       	sbc	r21, r9
    2e48:	6a 09       	sbc	r22, r10
    2e4a:	7b 09       	sbc	r23, r11
    2e4c:	21 2f       	mov	r18, r17
    2e4e:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    2e52:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2e56:	0e 94 32 07 	call	0xe64	; 0xe64 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2e5a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskResumeAll>
    2e5e:	81 11       	cpse	r24, r1
    2e60:	05 c0       	rjmp	.+10     	; 0x2e6c <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2e62:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2e68:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskResumeAll>
            }
        }
    }
    2e6c:	0f 90       	pop	r0
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	1f 91       	pop	r17
    2e74:	ff 90       	pop	r15
    2e76:	ef 90       	pop	r14
    2e78:	df 90       	pop	r13
    2e7a:	cf 90       	pop	r12
    2e7c:	bf 90       	pop	r11
    2e7e:	af 90       	pop	r10
    2e80:	9f 90       	pop	r9
    2e82:	8f 90       	pop	r8
    2e84:	08 95       	ret

00002e86 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2e86:	af 92       	push	r10
    2e88:	bf 92       	push	r11
    2e8a:	cf 92       	push	r12
    2e8c:	df 92       	push	r13
    2e8e:	ef 92       	push	r14
    2e90:	ff 92       	push	r15
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	28 97       	sbiw	r28, 0x08	; 8
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2eaa:	82 c0       	rjmp	.+260    	; 0x2fb0 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	88 23       	and	r24, r24
    2eb0:	0c f4       	brge	.+2      	; 0x2eb4 <prvProcessReceivedCommands+0x2e>
    2eb2:	7e c0       	rjmp	.+252    	; 0x2fb0 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2eb4:	ae 80       	ldd	r10, Y+6	; 0x06
    2eb6:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2eb8:	d5 01       	movw	r26, r10
    2eba:	1c 96       	adiw	r26, 0x0c	; 12
    2ebc:	8d 91       	ld	r24, X+
    2ebe:	9c 91       	ld	r25, X
    2ec0:	1d 97       	sbiw	r26, 0x0d	; 13
    2ec2:	89 2b       	or	r24, r25
    2ec4:	21 f0       	breq	.+8      	; 0x2ece <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ec6:	c5 01       	movw	r24, r10
    2ec8:	02 96       	adiw	r24, 0x02	; 2
    2eca:	0e 94 34 03 	call	0x668	; 0x668 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2ece:	ce 01       	movw	r24, r28
    2ed0:	08 96       	adiw	r24, 0x08	; 8
    2ed2:	fe de       	rcall	.-516    	; 0x2cd0 <prvSampleTimeNow>
    2ed4:	8b 01       	movw	r16, r22
    2ed6:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eda:	0e 2e       	mov	r0, r30
    2edc:	00 0c       	add	r0, r0
    2ede:	ff 0b       	sbc	r31, r31
    2ee0:	ea 30       	cpi	r30, 0x0A	; 10
    2ee2:	f1 05       	cpc	r31, r1
    2ee4:	08 f0       	brcs	.+2      	; 0x2ee8 <prvProcessReceivedCommands+0x62>
    2ee6:	64 c0       	rjmp	.+200    	; 0x2fb0 <prvProcessReceivedCommands+0x12a>
    2ee8:	88 27       	eor	r24, r24
    2eea:	ee 58       	subi	r30, 0x8E	; 142
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	8f 4f       	sbci	r24, 0xFF	; 255
    2ef0:	0c 94 21 2c 	jmp	0x5842	; 0x5842 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2ef4:	f5 01       	movw	r30, r10
    2ef6:	86 89       	ldd	r24, Z+22	; 0x16
    2ef8:	81 60       	ori	r24, 0x01	; 1
    2efa:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2efc:	ca 80       	ldd	r12, Y+2	; 0x02
    2efe:	db 80       	ldd	r13, Y+3	; 0x03
    2f00:	ec 80       	ldd	r14, Y+4	; 0x04
    2f02:	fd 80       	ldd	r15, Y+5	; 0x05
    2f04:	46 85       	ldd	r20, Z+14	; 0x0e
    2f06:	57 85       	ldd	r21, Z+15	; 0x0f
    2f08:	60 89       	ldd	r22, Z+16	; 0x10
    2f0a:	71 89       	ldd	r23, Z+17	; 0x11
    2f0c:	4c 0d       	add	r20, r12
    2f0e:	5d 1d       	adc	r21, r13
    2f10:	6e 1d       	adc	r22, r14
    2f12:	7f 1d       	adc	r23, r15
    2f14:	c5 01       	movw	r24, r10
    2f16:	83 dd       	rcall	.-1274   	; 0x2a1e <prvInsertTimerInActiveList>
    2f18:	88 23       	and	r24, r24
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <prvProcessReceivedCommands+0x98>
    2f1c:	49 c0       	rjmp	.+146    	; 0x2fb0 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2f1e:	d5 01       	movw	r26, r10
    2f20:	54 96       	adiw	r26, 0x14	; 20
    2f22:	ed 91       	ld	r30, X+
    2f24:	fc 91       	ld	r31, X
    2f26:	55 97       	sbiw	r26, 0x15	; 21
    2f28:	c5 01       	movw	r24, r10
    2f2a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f2c:	f5 01       	movw	r30, r10
    2f2e:	86 89       	ldd	r24, Z+22	; 0x16
    2f30:	82 ff       	sbrs	r24, 2
    2f32:	3e c0       	rjmp	.+124    	; 0x2fb0 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2f34:	4a 81       	ldd	r20, Y+2	; 0x02
    2f36:	5b 81       	ldd	r21, Y+3	; 0x03
    2f38:	6c 81       	ldd	r22, Y+4	; 0x04
    2f3a:	7d 81       	ldd	r23, Y+5	; 0x05
    2f3c:	86 85       	ldd	r24, Z+14	; 0x0e
    2f3e:	97 85       	ldd	r25, Z+15	; 0x0f
    2f40:	a0 89       	ldd	r26, Z+16	; 0x10
    2f42:	b1 89       	ldd	r27, Z+17	; 0x11
    2f44:	9a 01       	movw	r18, r20
    2f46:	ab 01       	movw	r20, r22
    2f48:	28 0f       	add	r18, r24
    2f4a:	39 1f       	adc	r19, r25
    2f4c:	4a 1f       	adc	r20, r26
    2f4e:	5b 1f       	adc	r21, r27
    2f50:	c1 2c       	mov	r12, r1
    2f52:	d1 2c       	mov	r13, r1
    2f54:	76 01       	movw	r14, r12
    2f56:	00 e0       	ldi	r16, 0x00	; 0
    2f58:	10 e0       	ldi	r17, 0x00	; 0
    2f5a:	60 e0       	ldi	r22, 0x00	; 0
    2f5c:	c5 01       	movw	r24, r10
    2f5e:	f2 dd       	rcall	.-1052   	; 0x2b44 <xTimerGenericCommand>
    2f60:	27 c0       	rjmp	.+78     	; 0x2fb0 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f62:	d5 01       	movw	r26, r10
    2f64:	56 96       	adiw	r26, 0x16	; 22
    2f66:	8c 91       	ld	r24, X
    2f68:	56 97       	sbiw	r26, 0x16	; 22
    2f6a:	8e 7f       	andi	r24, 0xFE	; 254
    2f6c:	56 96       	adiw	r26, 0x16	; 22
    2f6e:	8c 93       	st	X, r24
                        break;
    2f70:	1f c0       	rjmp	.+62     	; 0x2fb0 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2f72:	f5 01       	movw	r30, r10
    2f74:	86 89       	ldd	r24, Z+22	; 0x16
    2f76:	81 60       	ori	r24, 0x01	; 1
    2f78:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2f7a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f7c:	5b 81       	ldd	r21, Y+3	; 0x03
    2f7e:	6c 81       	ldd	r22, Y+4	; 0x04
    2f80:	7d 81       	ldd	r23, Y+5	; 0x05
    2f82:	46 87       	std	Z+14, r20	; 0x0e
    2f84:	57 87       	std	Z+15, r21	; 0x0f
    2f86:	60 8b       	std	Z+16, r22	; 0x10
    2f88:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2f8a:	40 0f       	add	r20, r16
    2f8c:	51 1f       	adc	r21, r17
    2f8e:	62 1f       	adc	r22, r18
    2f90:	73 1f       	adc	r23, r19
    2f92:	68 01       	movw	r12, r16
    2f94:	79 01       	movw	r14, r18
    2f96:	c5 01       	movw	r24, r10
    2f98:	42 dd       	rcall	.-1404   	; 0x2a1e <prvInsertTimerInActiveList>
                        break;
    2f9a:	0a c0       	rjmp	.+20     	; 0x2fb0 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2f9c:	f5 01       	movw	r30, r10
    2f9e:	86 89       	ldd	r24, Z+22	; 0x16
    2fa0:	81 fd       	sbrc	r24, 1
    2fa2:	04 c0       	rjmp	.+8      	; 0x2fac <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2fa4:	c5 01       	movw	r24, r10
    2fa6:	0e 94 a5 02 	call	0x54a	; 0x54a <vPortFree>
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2fac:	8e 7f       	andi	r24, 0xFE	; 254
    2fae:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	a9 01       	movw	r20, r18
    2fb6:	be 01       	movw	r22, r28
    2fb8:	6f 5f       	subi	r22, 0xFF	; 255
    2fba:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbc:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    2fc0:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2fc4:	0e 94 a3 06 	call	0xd46	; 0xd46 <xQueueReceive>
    2fc8:	81 11       	cpse	r24, r1
    2fca:	70 cf       	rjmp	.-288    	; 0x2eac <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2fcc:	28 96       	adiw	r28, 0x08	; 8
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	ff 90       	pop	r15
    2fe2:	ef 90       	pop	r14
    2fe4:	df 90       	pop	r13
    2fe6:	cf 90       	pop	r12
    2fe8:	bf 90       	pop	r11
    2fea:	af 90       	pop	r10
    2fec:	08 95       	ret

00002fee <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2fee:	08 95       	ret

00002ff0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ff0:	84 b1       	in	r24, 0x04	; 4
    2ff2:	80 68       	ori	r24, 0x80	; 128
    2ff4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ff6:	85 b1       	in	r24, 0x05	; 5
    2ff8:	80 68       	ori	r24, 0x80	; 128
    2ffa:	85 b9       	out	0x05, r24	; 5
    2ffc:	08 95       	ret

00002ffe <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2ffe:	83 b1       	in	r24, 0x03	; 3
    3000:	80 68       	ori	r24, 0x80	; 128
    3002:	83 b9       	out	0x03, r24	; 3
    3004:	08 95       	ret

00003006 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3006:	f4 df       	rcall	.-24     	; 0x2ff0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3008:	2f ef       	ldi	r18, 0xFF	; 255
    300a:	80 e7       	ldi	r24, 0x70	; 112
    300c:	92 e0       	ldi	r25, 0x02	; 2
    300e:	21 50       	subi	r18, 0x01	; 1
    3010:	80 40       	sbci	r24, 0x00	; 0
    3012:	90 40       	sbci	r25, 0x00	; 0
    3014:	e1 f7       	brne	.-8      	; 0x300e <vApplicationMallocFailedHook+0x8>
    3016:	00 c0       	rjmp	.+0      	; 0x3018 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3018:	00 00       	nop
    301a:	f1 df       	rcall	.-30     	; 0x2ffe <prvBlinkMainLed>
    301c:	f5 cf       	rjmp	.-22     	; 0x3008 <vApplicationMallocFailedHook+0x2>

0000301e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    301e:	e8 df       	rcall	.-48     	; 0x2ff0 <prvSetMainLedOn>
    3020:	2f ef       	ldi	r18, 0xFF	; 255
    3022:	87 ea       	ldi	r24, 0xA7	; 167
    3024:	91 e6       	ldi	r25, 0x61	; 97
    3026:	21 50       	subi	r18, 0x01	; 1
    3028:	80 40       	sbci	r24, 0x00	; 0
    302a:	90 40       	sbci	r25, 0x00	; 0
    302c:	e1 f7       	brne	.-8      	; 0x3026 <vApplicationStackOverflowHook+0x8>
    302e:	00 c0       	rjmp	.+0      	; 0x3030 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3030:	00 00       	nop
    3032:	e5 df       	rcall	.-54     	; 0x2ffe <prvBlinkMainLed>
    3034:	f5 cf       	rjmp	.-22     	; 0x3020 <vApplicationStackOverflowHook+0x2>

00003036 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    3036:	0f 93       	push	r16
    3038:	1f 93       	push	r17
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	64 97       	sbiw	r28, 0x14	; 20
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	0e 94 4b 24 	call	0x4896	; 0x4896 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3054:	11 d4       	rcall	.+2082   	; 0x3878 <lora_driver_rn2483FactoryReset>
    3056:	8d d6       	rcall	.+3354   	; 0x3d72 <lora_driver_mapReturnCodeToText>
    3058:	9f 93       	push	r25
    305a:	8f 93       	push	r24
    305c:	8f e4       	ldi	r24, 0x4F	; 79
    305e:	92 e0       	ldi	r25, 0x02	; 2
    3060:	9f 93       	push	r25
    3062:	8f 93       	push	r24
    3064:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3068:	85 d5       	rcall	.+2826   	; 0x3b74 <lora_driver_configureToEu868>
    306a:	83 d6       	rcall	.+3334   	; 0x3d72 <lora_driver_mapReturnCodeToText>
    306c:	9f 93       	push	r25
    306e:	8f 93       	push	r24
    3070:	82 e6       	ldi	r24, 0x62	; 98
    3072:	92 e0       	ldi	r25, 0x02	; 2
    3074:	9f 93       	push	r25
    3076:	8f 93       	push	r24
    3078:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>
    307c:	8e 01       	movw	r16, r28
    307e:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3080:	1f 4f       	sbci	r17, 0xFF	; 255
    3082:	c8 01       	movw	r24, r16
    3084:	0b d4       	rcall	.+2070   	; 0x389c <lora_driver_getRn2483Hweui>
    3086:	75 d6       	rcall	.+3306   	; 0x3d72 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3088:	1f 93       	push	r17
    308a:	0f 93       	push	r16
    308c:	9f 93       	push	r25
    308e:	8f 93       	push	r24
    3090:	8b e7       	ldi	r24, 0x7B	; 123
    3092:	92 e0       	ldi	r25, 0x02	; 2
    3094:	9f 93       	push	r25
    3096:	8f 93       	push	r24
    3098:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    309c:	c8 01       	movw	r24, r16
    309e:	1a d4       	rcall	.+2100   	; 0x38d4 <lora_driver_setDeviceIdentifier>
    30a0:	68 d6       	rcall	.+3280   	; 0x3d72 <lora_driver_mapReturnCodeToText>
    30a2:	9f 93       	push	r25
    30a4:	8f 93       	push	r24
    30a6:	1f 93       	push	r17
    30a8:	0f 93       	push	r16
    30aa:	8f e8       	ldi	r24, 0x8F	; 143
    30ac:	92 e0       	ldi	r25, 0x02	; 2
    30ae:	9f 93       	push	r25
    30b0:	8f 93       	push	r24
    30b2:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    30b6:	a8 01       	movw	r20, r16
    30b8:	64 ea       	ldi	r22, 0xA4	; 164
    30ba:	72 e0       	ldi	r23, 0x02	; 2
    30bc:	85 ec       	ldi	r24, 0xC5	; 197
    30be:	92 e0       	ldi	r25, 0x02	; 2
    30c0:	37 d6       	rcall	.+3182   	; 0x3d30 <lora_driver_setOtaaIdentity>
    30c2:	57 d6       	rcall	.+3246   	; 0x3d72 <lora_driver_mapReturnCodeToText>
    30c4:	9f 93       	push	r25
    30c6:	8f 93       	push	r24
    30c8:	1f 93       	push	r17
    30ca:	0f 93       	push	r16
    30cc:	84 ea       	ldi	r24, 0xA4	; 164
    30ce:	92 e0       	ldi	r25, 0x02	; 2
    30d0:	9f 93       	push	r25
    30d2:	8f 93       	push	r24
    30d4:	85 ec       	ldi	r24, 0xC5	; 197
    30d6:	92 e0       	ldi	r25, 0x02	; 2
    30d8:	9f 93       	push	r25
    30da:	8f 93       	push	r24
    30dc:	86 ed       	ldi	r24, 0xD6	; 214
    30de:	92 e0       	ldi	r25, 0x02	; 2
    30e0:	9f 93       	push	r25
    30e2:	8f 93       	push	r24
    30e4:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    30e8:	28 d4       	rcall	.+2128   	; 0x393a <lora_driver_saveMac>
    30ea:	43 d6       	rcall	.+3206   	; 0x3d72 <lora_driver_mapReturnCodeToText>
    30ec:	9f 93       	push	r25
    30ee:	8f 93       	push	r24
    30f0:	8c e0       	ldi	r24, 0x0C	; 12
    30f2:	93 e0       	ldi	r25, 0x03	; 3
    30f4:	9f 93       	push	r25
    30f6:	8f 93       	push	r24
    30f8:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	12 d5       	rcall	.+2596   	; 0x3b2e <lora_driver_setAdaptiveDataRate>
    310a:	33 d6       	rcall	.+3174   	; 0x3d72 <lora_driver_mapReturnCodeToText>
    310c:	9f 93       	push	r25
    310e:	8f 93       	push	r24
    3110:	8b e1       	ldi	r24, 0x1B	; 27
    3112:	93 e0       	ldi	r25, 0x03	; 3
    3114:	9f 93       	push	r25
    3116:	8f 93       	push	r24
    3118:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    311c:	84 ef       	ldi	r24, 0xF4	; 244
    311e:	91 e0       	ldi	r25, 0x01	; 1
    3120:	11 d5       	rcall	.+2594   	; 0x3b44 <lora_driver_setReceiveDelay>
    3122:	27 d6       	rcall	.+3150   	; 0x3d72 <lora_driver_mapReturnCodeToText>
    3124:	9f 93       	push	r25
    3126:	8f 93       	push	r24
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	8f 93       	push	r24
    312c:	84 ef       	ldi	r24, 0xF4	; 244
    312e:	8f 93       	push	r24
    3130:	8c e3       	ldi	r24, 0x3C	; 60
    3132:	93 e0       	ldi	r25, 0x03	; 3
    3134:	9f 93       	push	r25
    3136:	8f 93       	push	r24
    3138:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3146:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	fd d3       	rcall	.+2042   	; 0x3946 <lora_driver_join>
    314c:	08 2f       	mov	r16, r24
    314e:	11 d6       	rcall	.+3106   	; 0x3d72 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3150:	9f 93       	push	r25
    3152:	8f 93       	push	r24
    3154:	1f 92       	push	r1
    3156:	1f 93       	push	r17
    3158:	8c e5       	ldi	r24, 0x5C	; 92
    315a:	93 e0       	ldi	r25, 0x03	; 3
    315c:	9f 93       	push	r25
    315e:	8f 93       	push	r24
    3160:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	08 30       	cpi	r16, 0x08	; 8
    3172:	59 f0       	breq	.+22     	; 0x318a <_lora_setup+0x154>
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	0e 94 af 24 	call	0x495e	; 0x495e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    317a:	66 e3       	ldi	r22, 0x36	; 54
    317c:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <vTaskDelay>
    3186:	11 50       	subi	r17, 0x01	; 1
    3188:	f9 f6       	brne	.-66     	; 0x3148 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    318a:	08 30       	cpi	r16, 0x08	; 8
    318c:	21 f4       	brne	.+8      	; 0x3196 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	0e 94 91 24 	call	0x4922	; 0x4922 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3194:	09 c0       	rjmp	.+18     	; 0x31a8 <_lora_setup+0x172>
    3196:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3198:	0e 94 a0 24 	call	0x4940	; 0x4940 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	0e 94 6e 24 	call	0x48dc	; 0x48dc <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    31a2:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    31a6:	fd cf       	rjmp	.-6      	; 0x31a2 <_lora_setup+0x16c>
    31a8:	64 96       	adiw	r28, 0x14	; 20
    31aa:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	08 95       	ret

000031be <lora_handler_task>:
    31be:	cf 93       	push	r28
    31c0:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    31c2:	00 d0       	rcall	.+0      	; 0x31c4 <lora_handler_task+0x6>
    31c4:	1f 92       	push	r1
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	47 d3       	rcall	.+1678   	; 0x385c <lora_driver_resetRn2483>
	vTaskDelay(2);
    31ce:	62 e0       	ldi	r22, 0x02	; 2
    31d0:	70 e0       	ldi	r23, 0x00	; 0
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <vTaskDelay>
	lora_driver_resetRn2483(0);
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	3f d3       	rcall	.+1662   	; 0x385c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    31de:	66 e9       	ldi	r22, 0x96	; 150
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    31ea:	f1 d2       	rcall	.+1506   	; 0x37ce <lora_driver_flushBuffers>

	_lora_setup();
    31ec:	24 df       	rcall	.-440    	; 0x3036 <_lora_setup>
    31ee:	ed ee       	ldi	r30, 0xED	; 237

	_uplink_payload.len = 6;
    31f0:	f5 e1       	ldi	r31, 0x15	; 21
    31f2:	86 e0       	ldi	r24, 0x06	; 6
    31f4:	81 83       	std	Z+1, r24	; 0x01
    31f6:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    31f8:	80 83       	st	Z, r24
    31fa:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    31fe:	69 83       	std	Y+1, r22	; 0x01
    3200:	7a 83       	std	Y+2, r23	; 0x02
    3202:	8b 83       	std	Y+3, r24	; 0x03
    3204:	9c 83       	std	Y+4, r25	; 0x04
    3206:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3208:	58 e4       	ldi	r21, 0x48	; 72
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	ce 01       	movw	r24, r28
    3210:	01 96       	adiw	r24, 0x01	; 1
    3212:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <xTaskDelayUntil>
    3216:	ed ee       	ldi	r30, 0xED	; 237
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2
		

		_uplink_payload.bytes[0] = hum >> 8;
    3218:	f5 e1       	ldi	r31, 0x15	; 21
    321a:	80 e3       	ldi	r24, 0x30	; 48
    321c:	82 83       	std	Z+2, r24	; 0x02
    321e:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    3220:	83 83       	std	Z+3, r24	; 0x03
    3222:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    3224:	84 83       	std	Z+4, r24	; 0x04
    3226:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    3228:	85 83       	std	Z+5, r24	; 0x05
    322a:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    322c:	86 83       	std	Z+6, r24	; 0x06
    322e:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3230:	87 83       	std	Z+7, r24	; 0x07
    3232:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3234:	0e 94 c1 24 	call	0x4982	; 0x4982 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3238:	6d ee       	ldi	r22, 0xED	; 237
    323a:	75 e1       	ldi	r23, 0x15	; 21
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	ac d3       	rcall	.+1880   	; 0x3998 <lora_driver_sendUploadMessage>
    3240:	98 d5       	rcall	.+2864   	; 0x3d72 <lora_driver_mapReturnCodeToText>
    3242:	9f 93       	push	r25
    3244:	8f 93       	push	r24
    3246:	8c e7       	ldi	r24, 0x7C	; 124
    3248:	93 e0       	ldi	r25, 0x03	; 3
    324a:	9f 93       	push	r25
    324c:	8f 93       	push	r24
    324e:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	d5 cf       	rjmp	.-86     	; 0x3206 <lora_handler_task+0x48>

0000325c <lora_handler_initialise>:
    325c:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    325e:	ff 92       	push	r15
    3260:	0f 93       	push	r16
	xTaskCreate(
    3262:	e1 2c       	mov	r14, r1
    3264:	f1 2c       	mov	r15, r1
    3266:	08 2f       	mov	r16, r24
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	48 e8       	ldi	r20, 0x88	; 136
    326e:	51 e0       	ldi	r21, 0x01	; 1
    3270:	61 e9       	ldi	r22, 0x91	; 145
    3272:	73 e0       	ldi	r23, 0x03	; 3
    3274:	8f ed       	ldi	r24, 0xDF	; 223
    3276:	98 e1       	ldi	r25, 0x18	; 24
    3278:	0e 94 91 0c 	call	0x1922	; 0x1922 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    327c:	0f 91       	pop	r16
    327e:	ff 90       	pop	r15
    3280:	ef 90       	pop	r14
    3282:	08 95       	ret

00003284 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	00 d0       	rcall	.+0      	; 0x328a <task1+0x6>
    328a:	1f 92       	push	r1
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 5000/portTICK_PERIOD_MS; // 5000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3290:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskGetTickCount>
    3294:	69 83       	std	Y+1, r22	; 0x01
    3296:	7a 83       	std	Y+2, r23	; 0x02
    3298:	8b 83       	std	Y+3, r24	; 0x03
    329a:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    329c:	48 e3       	ldi	r20, 0x38	; 56
    329e:	51 e0       	ldi	r21, 0x01	; 1
    32a0:	60 e0       	ldi	r22, 0x00	; 0
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	ce 01       	movw	r24, r28
    32a6:	01 96       	adiw	r24, 0x01	; 1
    32a8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    32ac:	88 e9       	ldi	r24, 0x98	; 152
    32ae:	93 e0       	ldi	r25, 0x03	; 3
    32b0:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
		PORTA ^= _BV(PA0);
    32b4:	92 b1       	in	r25, 0x02	; 2
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	89 27       	eor	r24, r25
    32ba:	82 b9       	out	0x02, r24	; 2
    32bc:	ef cf       	rjmp	.-34     	; 0x329c <task1+0x18>

000032be <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    32be:	cf 93       	push	r28
    32c0:	df 93       	push	r29
    32c2:	00 d0       	rcall	.+0      	; 0x32c4 <task2+0x6>
    32c4:	1f 92       	push	r1
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 10000/portTICK_PERIOD_MS; // 10000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    32ca:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskGetTickCount>
    32ce:	69 83       	std	Y+1, r22	; 0x01
    32d0:	7a 83       	std	Y+2, r23	; 0x02
    32d2:	8b 83       	std	Y+3, r24	; 0x03
    32d4:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    32d6:	41 e7       	ldi	r20, 0x71	; 113
    32d8:	52 e0       	ldi	r21, 0x02	; 2
    32da:	60 e0       	ldi	r22, 0x00	; 0
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	ce 01       	movw	r24, r28
    32e0:	01 96       	adiw	r24, 0x01	; 1
    32e2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <xTaskDelayUntil>
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    32e6:	8e e9       	ldi	r24, 0x9E	; 158
    32e8:	93 e0       	ldi	r25, 0x03	; 3
    32ea:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
		PORTA ^= _BV(PA7);
    32ee:	82 b1       	in	r24, 0x02	; 2
    32f0:	80 58       	subi	r24, 0x80	; 128
    32f2:	82 b9       	out	0x02, r24	; 2
    32f4:	f0 cf       	rjmp	.-32     	; 0x32d6 <task2+0x18>

000032f6 <temp_sensor_task>:
{
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    32f6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <xTaskGetTickCount>

	for(;;)
	{
		if ( HIH8120_OK != hih8120_wakeup() )
    32fa:	fb d0       	rcall	.+502    	; 0x34f2 <hih8120_wakeup>
    32fc:	88 23       	and	r24, r24
    32fe:	21 f0       	breq	.+8      	; 0x3308 <temp_sensor_task+0x12>
		{
			// Something went wrong
			// Investigate the return code further
			printf("Temperature and humidity sensor HIH8120 wakeup error.\n");
    3300:	84 ea       	ldi	r24, 0xA4	; 164
    3302:	93 e0       	ldi	r25, 0x03	; 3
    3304:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
		}
		
		vTaskDelay(1000);
    3308:	68 ee       	ldi	r22, 0xE8	; 232
    330a:	73 e0       	ldi	r23, 0x03	; 3
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <vTaskDelay>
		
		if ( HIH8120_OK !=  hih8120_measure() )
    3314:	03 d1       	rcall	.+518    	; 0x351c <hih8120_measure>
    3316:	88 23       	and	r24, r24
    3318:	21 f0       	breq	.+8      	; 0x3322 <temp_sensor_task+0x2c>
		{
			// Something went wrong
			// Investigate the return code further
			printf("Temperature and humidity sensor HIH8120 measure error.\n");
    331a:	8a ed       	ldi	r24, 0xDA	; 218
    331c:	93 e0       	ldi	r25, 0x03	; 3
    331e:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
		}
		vTaskDelay(100);
    3322:	64 e6       	ldi	r22, 0x64	; 100
    3324:	70 e0       	ldi	r23, 0x00	; 0
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <vTaskDelay>
		
		humidity = hih8120_getHumidity();
    332e:	07 d1       	rcall	.+526    	; 0x353e <hih8120_getHumidity>
    3330:	60 93 07 16 	sts	0x1607, r22	; 0x801607 <humidity>
    3334:	70 93 08 16 	sts	0x1608, r23	; 0x801608 <humidity+0x1>
    3338:	80 93 09 16 	sts	0x1609, r24	; 0x801609 <humidity+0x2>
    333c:	90 93 0a 16 	sts	0x160A, r25	; 0x80160a <humidity+0x3>
		temperature = hih8120_getTemperature();
    3340:	13 d1       	rcall	.+550    	; 0x3568 <hih8120_getTemperature>
    3342:	26 2f       	mov	r18, r22
    3344:	37 2f       	mov	r19, r23
    3346:	46 2f       	mov	r20, r22
    3348:	57 2f       	mov	r21, r23
    334a:	68 2f       	mov	r22, r24
    334c:	79 2f       	mov	r23, r25
    334e:	40 93 03 16 	sts	0x1603, r20	; 0x801603 <temperature>
    3352:	50 93 04 16 	sts	0x1604, r21	; 0x801604 <temperature+0x1>
    3356:	60 93 05 16 	sts	0x1605, r22	; 0x801605 <temperature+0x2>
    335a:	70 93 06 16 	sts	0x1606, r23	; 0x801606 <temperature+0x3>
		printf("Temperature: %3.2f degrees\n", temperature);
    335e:	9f 93       	push	r25
    3360:	8f 93       	push	r24
    3362:	3f 93       	push	r19
    3364:	2f 93       	push	r18
    3366:	81 e1       	ldi	r24, 0x11	; 17
    3368:	94 e0       	ldi	r25, 0x04	; 4
    336a:	9f 93       	push	r25
    336c:	8f 93       	push	r24
    336e:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>
		printf("Humidity: %3.2f percent\n", humidity);
    3372:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <humidity+0x3>
    3376:	8f 93       	push	r24
    3378:	80 91 09 16 	lds	r24, 0x1609	; 0x801609 <humidity+0x2>
    337c:	8f 93       	push	r24
    337e:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <humidity+0x1>
    3382:	8f 93       	push	r24
    3384:	80 91 07 16 	lds	r24, 0x1607	; 0x801607 <humidity>
    3388:	8f 93       	push	r24
    338a:	8d e2       	ldi	r24, 0x2D	; 45
    338c:	94 e0       	ldi	r25, 0x04	; 4
    338e:	9f 93       	push	r25
    3390:	8f 93       	push	r24
    3392:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <printf>

	}
    3396:	8d b7       	in	r24, 0x3d	; 61
    3398:	9e b7       	in	r25, 0x3e	; 62
    339a:	0c 96       	adiw	r24, 0x0c	; 12
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	9e bf       	out	0x3e, r25	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	8d bf       	out	0x3d, r24	; 61
    33a6:	a9 cf       	rjmp	.-174    	; 0x32fa <temp_sensor_task+0x4>

000033a8 <create_tasks_and_semaphores>:
float humidity = 0.0;
float temperature = 0.0;

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    33a8:	ef 92       	push	r14
    33aa:	ff 92       	push	r15
    33ac:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    33ae:	80 91 2f 17 	lds	r24, 0x172F	; 0x80172f <xTestSemaphore>
    33b2:	90 91 30 17 	lds	r25, 0x1730	; 0x801730 <xTestSemaphore+0x1>
    33b6:	89 2b       	or	r24, r25
    33b8:	89 f4       	brne	.+34     	; 0x33dc <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <xQueueCreateMutex>
    33c0:	90 93 30 17 	sts	0x1730, r25	; 0x801730 <xTestSemaphore+0x1>
    33c4:	80 93 2f 17 	sts	0x172F, r24	; 0x80172f <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    33c8:	00 97       	sbiw	r24, 0x00	; 0
    33ca:	41 f0       	breq	.+16     	; 0x33dc <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    33cc:	00 e0       	ldi	r16, 0x00	; 0
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	a9 01       	movw	r20, r18
    33d4:	60 e0       	ldi	r22, 0x00	; 0
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	0e 94 b8 05 	call	0xb70	; 0xb70 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    33dc:	e1 2c       	mov	r14, r1
    33de:	f1 2c       	mov	r15, r1
    33e0:	01 e0       	ldi	r16, 0x01	; 1
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 ec       	ldi	r20, 0xC0	; 192
    33e8:	50 e0       	ldi	r21, 0x00	; 0
    33ea:	68 e9       	ldi	r22, 0x98	; 152
    33ec:	73 e0       	ldi	r23, 0x03	; 3
    33ee:	82 e4       	ldi	r24, 0x42	; 66
    33f0:	99 e1       	ldi	r25, 0x19	; 25
    33f2:	0e 94 91 0c 	call	0x1922	; 0x1922 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 ec       	ldi	r20, 0xC0	; 192
    33fc:	50 e0       	ldi	r21, 0x00	; 0
    33fe:	6e e9       	ldi	r22, 0x9E	; 158
    3400:	73 e0       	ldi	r23, 0x03	; 3
    3402:	8f e5       	ldi	r24, 0x5F	; 95
    3404:	99 e1       	ldi	r25, 0x19	; 25
    3406:	0e 94 91 0c 	call	0x1922	; 0x1922 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    340a:	02 e0       	ldi	r16, 0x02	; 2
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	40 ec       	ldi	r20, 0xC0	; 192
    3412:	50 e0       	ldi	r21, 0x00	; 0
    3414:	66 e4       	ldi	r22, 0x46	; 70
    3416:	74 e0       	ldi	r23, 0x04	; 4
    3418:	8b e7       	ldi	r24, 0x7B	; 123
    341a:	99 e1       	ldi	r25, 0x19	; 25
    341c:	0e 94 91 0c 	call	0x1922	; 0x1922 <xTaskCreate>
	,  "HIH8120_task"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3420:	0f 91       	pop	r16
    3422:	ff 90       	pop	r15
    3424:	ef 90       	pop	r14
    3426:	08 95       	ret

00003428 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3428:	81 b1       	in	r24, 0x01	; 1
    342a:	81 68       	ori	r24, 0x81	; 129
    342c:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	0e 94 f6 22 	call	0x45ec	; 0x45ec <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    3434:	b9 df       	rcall	.-142    	; 0x33a8 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3436:	85 e0       	ldi	r24, 0x05	; 5
    3438:	0e 94 fd 23 	call	0x47fa	; 0x47fa <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	70 e0       	ldi	r23, 0x00	; 0
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	cc d1       	rcall	.+920    	; 0x37dc <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3444:	83 e0       	ldi	r24, 0x03	; 3
    3446:	0a df       	rcall	.-492    	; 0x325c <lora_handler_initialise>
	
	// Initialize temperature and humidity sensor
	if ( HIH8120_OK == hih8120_initialise() )
    3448:	3c d0       	rcall	.+120    	; 0x34c2 <hih8120_initialise>
    344a:	81 11       	cpse	r24, r1
    344c:	04 c0       	rjmp	.+8      	; 0x3456 <initialiseSystem+0x2e>
    344e:	83 e5       	ldi	r24, 0x53	; 83
	{
		// Driver initialised OK
		// Always check what hih8120_initialise() returns
		printf("HIH8120 initialized\n");
    3450:	94 e0       	ldi	r25, 0x04	; 4
    3452:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <puts>
    3456:	08 95       	ret

00003458 <main>:
    3458:	e7 df       	rcall	.-50     	; 0x3428 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    345a:	87 e6       	ldi	r24, 0x67	; 103
    345c:	94 e0       	ldi	r25, 0x04	; 4
    345e:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3462:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <vTaskStartScheduler>
    3466:	ff cf       	rjmp	.-2      	; 0x3466 <main+0xe>

00003468 <_hihTwiCallback>:
    3468:	65 30       	cpi	r22, 0x05	; 5
    346a:	f1 f4       	brne	.+60     	; 0x34a8 <_hihTwiCallback+0x40>
    346c:	fa 01       	movw	r30, r20
    346e:	80 81       	ld	r24, Z
    3470:	8f 73       	andi	r24, 0x3F	; 63
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	98 2f       	mov	r25, r24
    3476:	88 27       	eor	r24, r24
    3478:	21 81       	ldd	r18, Z+1	; 0x01
    347a:	82 2b       	or	r24, r18
    347c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3480:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3484:	82 81       	ldd	r24, Z+2	; 0x02
    3486:	f0 e4       	ldi	r31, 0x40	; 64
    3488:	8f 9f       	mul	r24, r31
    348a:	c0 01       	movw	r24, r0
    348c:	11 24       	eor	r1, r1
    348e:	fa 01       	movw	r30, r20
    3490:	23 81       	ldd	r18, Z+3	; 0x03
    3492:	26 95       	lsr	r18
    3494:	26 95       	lsr	r18
    3496:	82 2b       	or	r24, r18
    3498:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    349c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	80 93 0b 16 	sts	0x160B, r24	; 0x80160b <_measuringIsReady>
    34a6:	08 95       	ret
    34a8:	64 30       	cpi	r22, 0x04	; 4
    34aa:	51 f0       	breq	.+20     	; 0x34c0 <_hihTwiCallback+0x58>
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	90 e4       	ldi	r25, 0x40	; 64
    34b0:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    34b4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    34b8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    34bc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    34c0:	08 95       	ret

000034c2 <hih8120_initialise>:
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    34c6:	04 e3       	ldi	r16, 0x34	; 52
    34c8:	1a e1       	ldi	r17, 0x1A	; 26
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	34 e2       	ldi	r19, 0x24	; 36
    34ce:	44 ef       	ldi	r20, 0xF4	; 244
    34d0:	50 e0       	ldi	r21, 0x00	; 0
    34d2:	60 e0       	ldi	r22, 0x00	; 0
    34d4:	87 e2       	ldi	r24, 0x27	; 39
    34d6:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <twiCreate>
    34da:	90 93 0d 16 	sts	0x160D, r25	; 0x80160d <_hih8120Handler+0x1>
    34de:	80 93 0c 16 	sts	0x160C, r24	; 0x80160c <_hih8120Handler>
    34e2:	21 e0       	ldi	r18, 0x01	; 1
    34e4:	89 2b       	or	r24, r25
    34e6:	09 f0       	breq	.+2      	; 0x34ea <hih8120_initialise+0x28>
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	82 2f       	mov	r24, r18
    34ec:	1f 91       	pop	r17
    34ee:	0f 91       	pop	r16
    34f0:	08 95       	ret

000034f2 <hih8120_wakeup>:
    34f2:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <_hih8120Handler>
    34f6:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <_hih8120Handler+0x1>
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	59 f0       	breq	.+22     	; 0x3514 <hih8120_wakeup+0x22>
    34fe:	40 e0       	ldi	r20, 0x00	; 0
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	70 e0       	ldi	r23, 0x00	; 0
    3504:	0e 94 34 25 	call	0x4a68	; 0x4a68 <twiTransmit>
    3508:	84 30       	cpi	r24, 0x04	; 4
    350a:	31 f4       	brne	.+12     	; 0x3518 <hih8120_wakeup+0x26>
    350c:	10 92 0b 16 	sts	0x160B, r1	; 0x80160b <_measuringIsReady>
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	08 95       	ret
    3514:	82 e0       	ldi	r24, 0x02	; 2
    3516:	08 95       	ret
    3518:	83 e0       	ldi	r24, 0x03	; 3
    351a:	08 95       	ret

0000351c <hih8120_measure>:
    351c:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <_hih8120Handler>
    3520:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <_hih8120Handler+0x1>
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	39 f0       	breq	.+14     	; 0x3536 <hih8120_measure+0x1a>
    3528:	64 e0       	ldi	r22, 0x04	; 4
    352a:	0e 94 80 25 	call	0x4b00	; 0x4b00 <twiReceive>
    352e:	85 30       	cpi	r24, 0x05	; 5
    3530:	21 f0       	breq	.+8      	; 0x353a <hih8120_measure+0x1e>
    3532:	83 e0       	ldi	r24, 0x03	; 3
    3534:	08 95       	ret
    3536:	82 e0       	ldi	r24, 0x02	; 2
    3538:	08 95       	ret
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	08 95       	ret

0000353e <hih8120_getHumidity>:
    353e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3542:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	0e 94 0e 2b 	call	0x561c	; 0x561c <__floatunsisf>
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	48 ec       	ldi	r20, 0xC8	; 200
    3554:	52 e4       	ldi	r21, 0x42	; 66
    3556:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__mulsf3>
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	38 ef       	ldi	r19, 0xF8	; 248
    355e:	4f e7       	ldi	r20, 0x7F	; 127
    3560:	56 e4       	ldi	r21, 0x46	; 70
    3562:	0c 94 7a 2a 	jmp	0x54f4	; 0x54f4 <__divsf3>
    3566:	08 95       	ret

00003568 <hih8120_getTemperature>:
    3568:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    356c:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	0e 94 0e 2b 	call	0x561c	; 0x561c <__floatunsisf>
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	45 e2       	ldi	r20, 0x25	; 37
    357e:	53 e4       	ldi	r21, 0x43	; 67
    3580:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__mulsf3>
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	38 ef       	ldi	r19, 0xF8	; 248
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	56 e4       	ldi	r21, 0x46	; 70
    358c:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <__divsf3>
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	40 e2       	ldi	r20, 0x20	; 32
    3596:	52 e4       	ldi	r21, 0x42	; 66
    3598:	0c 94 15 2a 	jmp	0x542a	; 0x542a <__subsf3>
    359c:	08 95       	ret

0000359e <_serialCallBack>:
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	1f 92       	push	r1
    35a8:	1f 92       	push	r1
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	8c 01       	movw	r16, r24
    35b0:	19 82       	std	Y+1, r1	; 0x01
    35b2:	2d c0       	rjmp	.+90     	; 0x360e <_serialCallBack+0x70>
    35b4:	e0 91 45 16 	lds	r30, 0x1645	; 0x801645 <rec_buf_inp.2878>
    35b8:	ec 32       	cpi	r30, 0x2C	; 44
    35ba:	50 f4       	brcc	.+20     	; 0x35d0 <_serialCallBack+0x32>
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	8e 0f       	add	r24, r30
    35c0:	80 93 45 16 	sts	0x1645, r24	; 0x801645 <rec_buf_inp.2878>
    35c4:	f0 e0       	ldi	r31, 0x00	; 0
    35c6:	e9 58       	subi	r30, 0x89	; 137
    35c8:	f9 4e       	sbci	r31, 0xE9	; 233
    35ca:	8a 81       	ldd	r24, Y+2	; 0x02
    35cc:	80 83       	st	Z, r24
    35ce:	02 c0       	rjmp	.+4      	; 0x35d4 <_serialCallBack+0x36>
    35d0:	10 92 45 16 	sts	0x1645, r1	; 0x801645 <rec_buf_inp.2878>
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	8a 30       	cpi	r24, 0x0A	; 10
    35d8:	d1 f4       	brne	.+52     	; 0x360e <_serialCallBack+0x70>
    35da:	40 91 45 16 	lds	r20, 0x1645	; 0x801645 <rec_buf_inp.2878>
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	fa 01       	movw	r30, r20
    35e2:	eb 58       	subi	r30, 0x8B	; 139
    35e4:	f9 4e       	sbci	r31, 0xE9	; 233
    35e6:	10 82       	st	Z, r1
    35e8:	41 50       	subi	r20, 0x01	; 1
    35ea:	51 09       	sbc	r21, r1
    35ec:	9e 01       	movw	r18, r28
    35ee:	2f 5f       	subi	r18, 0xFF	; 255
    35f0:	3f 4f       	sbci	r19, 0xFF	; 255
    35f2:	67 e7       	ldi	r22, 0x77	; 119
    35f4:	76 e1       	ldi	r23, 0x16	; 22
    35f6:	80 91 48 16 	lds	r24, 0x1648	; 0x801648 <_serialReplyBufferHandle>
    35fa:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <_serialReplyBufferHandle+0x1>
    35fe:	0e 94 b6 09 	call	0x136c	; 0x136c <xStreamBufferSendFromISR>
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	81 11       	cpse	r24, r1
    3606:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    360a:	10 92 45 16 	sts	0x1645, r1	; 0x801645 <rec_buf_inp.2878>
    360e:	be 01       	movw	r22, r28
    3610:	6e 5f       	subi	r22, 0xFE	; 254
    3612:	7f 4f       	sbci	r23, 0xFF	; 255
    3614:	c8 01       	movw	r24, r16
    3616:	54 d5       	rcall	.+2728   	; 0x40c0 <serial_getByte>
    3618:	88 23       	and	r24, r24
    361a:	61 f2       	breq	.-104    	; 0x35b4 <_serialCallBack+0x16>
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	08 95       	ret

0000362a <_uploadMessage>:
    362a:	0f 93       	push	r16
    362c:	1f 93       	push	r17
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	8c 01       	movw	r16, r24
    3634:	eb 01       	movw	r28, r22
    3636:	80 91 48 16 	lds	r24, 0x1648	; 0x801648 <_serialReplyBufferHandle>
    363a:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <_serialReplyBufferHandle+0x1>
    363e:	0e 94 c3 08 	call	0x1186	; 0x1186 <xStreamBufferReset>
    3642:	b8 01       	movw	r22, r16
    3644:	8e e0       	ldi	r24, 0x0E	; 14
    3646:	96 e1       	ldi	r25, 0x16	; 22
    3648:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <strcpy>
    364c:	20 97       	sbiw	r28, 0x00	; 0
    364e:	79 f0       	breq	.+30     	; 0x366e <_uploadMessage+0x44>
    3650:	ee e0       	ldi	r30, 0x0E	; 14
    3652:	f6 e1       	ldi	r31, 0x16	; 22
    3654:	01 90       	ld	r0, Z+
    3656:	00 20       	and	r0, r0
    3658:	e9 f7       	brne	.-6      	; 0x3654 <_uploadMessage+0x2a>
    365a:	31 97       	sbiw	r30, 0x01	; 1
    365c:	80 e2       	ldi	r24, 0x20	; 32
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	80 83       	st	Z, r24
    3664:	be 01       	movw	r22, r28
    3666:	8e e0       	ldi	r24, 0x0E	; 14
    3668:	96 e1       	ldi	r25, 0x16	; 22
    366a:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <strcat>
    366e:	ee e0       	ldi	r30, 0x0E	; 14
    3670:	f6 e1       	ldi	r31, 0x16	; 22
    3672:	df 01       	movw	r26, r30
    3674:	0d 90       	ld	r0, X+
    3676:	00 20       	and	r0, r0
    3678:	e9 f7       	brne	.-6      	; 0x3674 <_uploadMessage+0x4a>
    367a:	11 97       	sbiw	r26, 0x01	; 1
    367c:	8d e0       	ldi	r24, 0x0D	; 13
    367e:	9a e0       	ldi	r25, 0x0A	; 10
    3680:	11 96       	adiw	r26, 0x01	; 1
    3682:	9c 93       	st	X, r25
    3684:	8e 93       	st	-X, r24
    3686:	12 96       	adiw	r26, 0x02	; 2
    3688:	1c 92       	st	X, r1
    368a:	01 90       	ld	r0, Z+
    368c:	00 20       	and	r0, r0
    368e:	e9 f7       	brne	.-6      	; 0x368a <_uploadMessage+0x60>
    3690:	31 97       	sbiw	r30, 0x01	; 1
    3692:	ee 50       	subi	r30, 0x0E	; 14
    3694:	f6 41       	sbci	r31, 0x16	; 22
    3696:	ae 2f       	mov	r26, r30
    3698:	8e e0       	ldi	r24, 0x0E	; 14
    369a:	96 e1       	ldi	r25, 0x16	; 22
    369c:	ac 01       	movw	r20, r24
    369e:	6a 2f       	mov	r22, r26
    36a0:	80 91 4a 16 	lds	r24, 0x164A	; 0x80164a <_rn2483_serial>
    36a4:	90 91 4b 16 	lds	r25, 0x164B	; 0x80164b <_rn2483_serial+0x1>
    36a8:	b6 d4       	rcall	.+2412   	; 0x4016 <serial_sendBytes>
    36aa:	81 11       	cpse	r24, r1
    36ac:	11 c0       	rjmp	.+34     	; 0x36d0 <_uploadMessage+0xa6>
    36ae:	08 e2       	ldi	r16, 0x28	; 40
    36b0:	15 e0       	ldi	r17, 0x05	; 5
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	4d e2       	ldi	r20, 0x2D	; 45
    36b8:	50 e0       	ldi	r21, 0x00	; 0
    36ba:	61 ed       	ldi	r22, 0xD1	; 209
    36bc:	76 e1       	ldi	r23, 0x16	; 22
    36be:	80 91 48 16 	lds	r24, 0x1648	; 0x801648 <_serialReplyBufferHandle>
    36c2:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <_serialReplyBufferHandle+0x1>
    36c6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <xStreamBufferReceive>
    36ca:	81 ed       	ldi	r24, 0xD1	; 209
    36cc:	96 e1       	ldi	r25, 0x16	; 22
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <_uploadMessage+0xaa>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	08 95       	ret

000036de <_reply2ReturnCode>:
    36de:	2f 92       	push	r2
    36e0:	3f 92       	push	r3
    36e2:	4f 92       	push	r4
    36e4:	5f 92       	push	r5
    36e6:	6f 92       	push	r6
    36e8:	7f 92       	push	r7
    36ea:	8f 92       	push	r8
    36ec:	9f 92       	push	r9
    36ee:	af 92       	push	r10
    36f0:	bf 92       	push	r11
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	5c 01       	movw	r10, r24
    3704:	fc 01       	movw	r30, r24
    3706:	01 90       	ld	r0, Z+
    3708:	00 20       	and	r0, r0
    370a:	e9 f7       	brne	.-6      	; 0x3706 <_reply2ReturnCode+0x28>
    370c:	31 97       	sbiw	r30, 0x01	; 1
    370e:	6f 01       	movw	r12, r30
    3710:	c8 1a       	sub	r12, r24
    3712:	d9 0a       	sbc	r13, r25
    3714:	5c 2c       	mov	r5, r12
    3716:	0f 2e       	mov	r0, r31
    3718:	f2 e1       	ldi	r31, 0x12	; 18
    371a:	8f 2e       	mov	r8, r31
    371c:	f7 e0       	ldi	r31, 0x07	; 7
    371e:	9f 2e       	mov	r9, r31
    3720:	f0 2d       	mov	r31, r0
    3722:	e1 2c       	mov	r14, r1
    3724:	f1 2c       	mov	r15, r1
    3726:	4c 2c       	mov	r4, r12
    3728:	37 01       	movw	r6, r14
    372a:	f4 01       	movw	r30, r8
    372c:	01 81       	ldd	r16, Z+1	; 0x01
    372e:	12 81       	ldd	r17, Z+2	; 0x02
    3730:	e8 01       	movw	r28, r16
    3732:	09 90       	ld	r0, Y+
    3734:	00 20       	and	r0, r0
    3736:	e9 f7       	brne	.-6      	; 0x3732 <_reply2ReturnCode+0x54>
    3738:	21 97       	sbiw	r28, 0x01	; 1
    373a:	c0 1b       	sub	r28, r16
    373c:	d1 0b       	sbc	r29, r17
    373e:	3c 2e       	mov	r3, r28
    3740:	f9 e0       	ldi	r31, 0x09	; 9
    3742:	cf 16       	cp	r12, r31
    3744:	d1 04       	cpc	r13, r1
    3746:	58 f0       	brcs	.+22     	; 0x375e <_reply2ReturnCode+0x80>
    3748:	f4 01       	movw	r30, r8
    374a:	20 80       	ld	r2, Z
    374c:	fe e0       	ldi	r31, 0x0E	; 14
    374e:	2f 12       	cpse	r2, r31
    3750:	06 c0       	rjmp	.+12     	; 0x375e <_reply2ReturnCode+0x80>
    3752:	b8 01       	movw	r22, r16
    3754:	c5 01       	movw	r24, r10
    3756:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <strcasestr>
    375a:	89 2b       	or	r24, r25
    375c:	09 f5       	brne	.+66     	; 0x37a0 <_reply2ReturnCode+0xc2>
    375e:	44 2d       	mov	r20, r4
    3760:	35 14       	cp	r3, r5
    3762:	08 f4       	brcc	.+2      	; 0x3766 <_reply2ReturnCode+0x88>
    3764:	4c 2f       	mov	r20, r28
    3766:	50 e0       	ldi	r21, 0x00	; 0
    3768:	b8 01       	movw	r22, r16
    376a:	c5 01       	movw	r24, r10
    376c:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <strncasecmp>
    3770:	89 2b       	or	r24, r25
    3772:	49 f4       	brne	.+18     	; 0x3786 <_reply2ReturnCode+0xa8>
    3774:	f3 01       	movw	r30, r6
    3776:	ee 0f       	add	r30, r30
    3778:	ff 1f       	adc	r31, r31
    377a:	e6 0d       	add	r30, r6
    377c:	f7 1d       	adc	r31, r7
    377e:	ee 5e       	subi	r30, 0xEE	; 238
    3780:	f8 4f       	sbci	r31, 0xF8	; 248
    3782:	20 80       	ld	r2, Z
    3784:	0d c0       	rjmp	.+26     	; 0x37a0 <_reply2ReturnCode+0xc2>
    3786:	8f ef       	ldi	r24, 0xFF	; 255
    3788:	e8 1a       	sub	r14, r24
    378a:	f8 0a       	sbc	r15, r24
    378c:	e3 e0       	ldi	r30, 0x03	; 3
    378e:	8e 0e       	add	r8, r30
    3790:	91 1c       	adc	r9, r1
    3792:	f1 e1       	ldi	r31, 0x11	; 17
    3794:	ef 16       	cp	r14, r31
    3796:	f1 04       	cpc	r15, r1
    3798:	39 f6       	brne	.-114    	; 0x3728 <_reply2ReturnCode+0x4a>
    379a:	68 94       	set
    379c:	22 24       	eor	r2, r2
    379e:	24 f8       	bld	r2, 4
    37a0:	82 2d       	mov	r24, r2
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
    37aa:	ff 90       	pop	r15
    37ac:	ef 90       	pop	r14
    37ae:	df 90       	pop	r13
    37b0:	cf 90       	pop	r12
    37b2:	bf 90       	pop	r11
    37b4:	af 90       	pop	r10
    37b6:	9f 90       	pop	r9
    37b8:	8f 90       	pop	r8
    37ba:	7f 90       	pop	r7
    37bc:	6f 90       	pop	r6
    37be:	5f 90       	pop	r5
    37c0:	4f 90       	pop	r4
    37c2:	3f 90       	pop	r3
    37c4:	2f 90       	pop	r2
    37c6:	08 95       	ret

000037c8 <_uploadMessageRc>:
    37c8:	30 df       	rcall	.-416    	; 0x362a <_uploadMessage>
    37ca:	89 cf       	rjmp	.-238    	; 0x36de <_reply2ReturnCode>
    37cc:	08 95       	ret

000037ce <lora_driver_flushBuffers>:
    37ce:	80 91 48 16 	lds	r24, 0x1648	; 0x801648 <_serialReplyBufferHandle>
    37d2:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <_serialReplyBufferHandle+0x1>
    37d6:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <xStreamBufferReset>
    37da:	08 95       	ret

000037dc <lora_driver_initialise>:
    37dc:	8f 92       	push	r8
    37de:	9f 92       	push	r9
    37e0:	af 92       	push	r10
    37e2:	cf 92       	push	r12
    37e4:	ef 92       	push	r14
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	c8 2f       	mov	r28, r24
    37ee:	8b 01       	movw	r16, r22
    37f0:	41 e0       	ldi	r20, 0x01	; 1
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	70 e0       	ldi	r23, 0x00	; 0
    37f6:	88 ec       	ldi	r24, 0xC8	; 200
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	0e 94 91 08 	call	0x1122	; 0x1122 <xStreamBufferGenericCreate>
    37fe:	90 93 49 16 	sts	0x1649, r25	; 0x801649 <_serialReplyBufferHandle+0x1>
    3802:	80 93 48 16 	sts	0x1648, r24	; 0x801648 <_serialReplyBufferHandle>
    3806:	10 93 47 16 	sts	0x1647, r17	; 0x801647 <_downlinkMessageBuffer+0x1>
    380a:	00 93 46 16 	sts	0x1646, r16	; 0x801646 <_downlinkMessageBuffer>
    380e:	0f 2e       	mov	r0, r31
    3810:	ff ec       	ldi	r31, 0xCF	; 207
    3812:	8f 2e       	mov	r8, r31
    3814:	fa e1       	ldi	r31, 0x1A	; 26
    3816:	9f 2e       	mov	r9, r31
    3818:	f0 2d       	mov	r31, r0
    381a:	68 94       	set
    381c:	aa 24       	eor	r10, r10
    381e:	a6 f8       	bld	r10, 6
    3820:	68 94       	set
    3822:	cc 24       	eor	r12, r12
    3824:	c6 f8       	bld	r12, 6
    3826:	e1 2c       	mov	r14, r1
    3828:	00 e0       	ldi	r16, 0x00	; 0
    382a:	23 e0       	ldi	r18, 0x03	; 3
    382c:	40 e0       	ldi	r20, 0x00	; 0
    382e:	51 ee       	ldi	r21, 0xE1	; 225
    3830:	60 e0       	ldi	r22, 0x00	; 0
    3832:	70 e0       	ldi	r23, 0x00	; 0
    3834:	8c 2f       	mov	r24, r28
    3836:	1e d3       	rcall	.+1596   	; 0x3e74 <serial_create>
    3838:	90 93 4b 16 	sts	0x164B, r25	; 0x80164b <_rn2483_serial+0x1>
    383c:	80 93 4a 16 	sts	0x164A, r24	; 0x80164a <_rn2483_serial>
    3840:	e7 e0       	ldi	r30, 0x07	; 7
    3842:	f1 e0       	ldi	r31, 0x01	; 1
    3844:	80 81       	ld	r24, Z
    3846:	80 61       	ori	r24, 0x10	; 16
    3848:	80 83       	st	Z, r24
    384a:	cf 91       	pop	r28
    384c:	1f 91       	pop	r17
    384e:	0f 91       	pop	r16
    3850:	ef 90       	pop	r14
    3852:	cf 90       	pop	r12
    3854:	af 90       	pop	r10
    3856:	9f 90       	pop	r9
    3858:	8f 90       	pop	r8
    385a:	08 95       	ret

0000385c <lora_driver_resetRn2483>:
    385c:	88 23       	and	r24, r24
    385e:	31 f0       	breq	.+12     	; 0x386c <lora_driver_resetRn2483+0x10>
    3860:	e8 e0       	ldi	r30, 0x08	; 8
    3862:	f1 e0       	ldi	r31, 0x01	; 1
    3864:	80 81       	ld	r24, Z
    3866:	8f 7e       	andi	r24, 0xEF	; 239
    3868:	80 83       	st	Z, r24
    386a:	08 95       	ret
    386c:	e8 e0       	ldi	r30, 0x08	; 8
    386e:	f1 e0       	ldi	r31, 0x01	; 1
    3870:	80 81       	ld	r24, Z
    3872:	80 61       	ori	r24, 0x10	; 16
    3874:	80 83       	st	Z, r24
    3876:	08 95       	ret

00003878 <lora_driver_rn2483FactoryReset>:
    3878:	60 e0       	ldi	r22, 0x00	; 0
    387a:	70 e0       	ldi	r23, 0x00	; 0
    387c:	88 e9       	ldi	r24, 0x98	; 152
    387e:	94 e0       	ldi	r25, 0x04	; 4
    3880:	d4 de       	rcall	.-600    	; 0x362a <_uploadMessage>
    3882:	e1 ed       	ldi	r30, 0xD1	; 209
    3884:	f6 e1       	ldi	r31, 0x16	; 22
    3886:	01 90       	ld	r0, Z+
    3888:	00 20       	and	r0, r0
    388a:	e9 f7       	brne	.-6      	; 0x3886 <lora_driver_rn2483FactoryReset+0xe>
    388c:	31 97       	sbiw	r30, 0x01	; 1
    388e:	e1 5d       	subi	r30, 0xD1	; 209
    3890:	f6 41       	sbci	r31, 0x16	; 22
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	75 97       	sbiw	r30, 0x15	; 21
    3896:	08 f0       	brcs	.+2      	; 0x389a <lora_driver_rn2483FactoryReset+0x22>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	08 95       	ret

0000389c <lora_driver_getRn2483Hweui>:
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	ec 01       	movw	r28, r24
    38a2:	60 e0       	ldi	r22, 0x00	; 0
    38a4:	70 e0       	ldi	r23, 0x00	; 0
    38a6:	89 ea       	ldi	r24, 0xA9	; 169
    38a8:	94 e0       	ldi	r25, 0x04	; 4
    38aa:	bf de       	rcall	.-642    	; 0x362a <_uploadMessage>
    38ac:	e1 ed       	ldi	r30, 0xD1	; 209
    38ae:	f6 e1       	ldi	r31, 0x16	; 22
    38b0:	01 90       	ld	r0, Z+
    38b2:	00 20       	and	r0, r0
    38b4:	e9 f7       	brne	.-6      	; 0x38b0 <lora_driver_getRn2483Hweui+0x14>
    38b6:	e2 5e       	subi	r30, 0xE2	; 226
    38b8:	f6 41       	sbci	r31, 0x16	; 22
    38ba:	39 f4       	brne	.+14     	; 0x38ca <lora_driver_getRn2483Hweui+0x2e>
    38bc:	61 ed       	ldi	r22, 0xD1	; 209
    38be:	76 e1       	ldi	r23, 0x16	; 22
    38c0:	ce 01       	movw	r24, r28
    38c2:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <strcpy>
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	02 c0       	rjmp	.+4      	; 0x38ce <lora_driver_getRn2483Hweui+0x32>
    38ca:	18 82       	st	Y, r1
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	df 91       	pop	r29
    38d0:	cf 91       	pop	r28
    38d2:	08 95       	ret

000038d4 <lora_driver_setDeviceIdentifier>:
    38d4:	fc 01       	movw	r30, r24
    38d6:	01 90       	ld	r0, Z+
    38d8:	00 20       	and	r0, r0
    38da:	e9 f7       	brne	.-6      	; 0x38d6 <lora_driver_setDeviceIdentifier+0x2>
    38dc:	9f 01       	movw	r18, r30
    38de:	21 51       	subi	r18, 0x11	; 17
    38e0:	31 09       	sbc	r19, r1
    38e2:	28 17       	cp	r18, r24
    38e4:	39 07       	cpc	r19, r25
    38e6:	29 f4       	brne	.+10     	; 0x38f2 <lora_driver_setDeviceIdentifier+0x1e>
    38e8:	bc 01       	movw	r22, r24
    38ea:	87 ed       	ldi	r24, 0xD7	; 215
    38ec:	94 e0       	ldi	r25, 0x04	; 4
    38ee:	6c cf       	rjmp	.-296    	; 0x37c8 <_uploadMessageRc>
    38f0:	08 95       	ret
    38f2:	89 e0       	ldi	r24, 0x09	; 9
    38f4:	08 95       	ret

000038f6 <lora_driver_setApplicationIdentifier>:
    38f6:	fc 01       	movw	r30, r24
    38f8:	01 90       	ld	r0, Z+
    38fa:	00 20       	and	r0, r0
    38fc:	e9 f7       	brne	.-6      	; 0x38f8 <lora_driver_setApplicationIdentifier+0x2>
    38fe:	9f 01       	movw	r18, r30
    3900:	21 51       	subi	r18, 0x11	; 17
    3902:	31 09       	sbc	r19, r1
    3904:	28 17       	cp	r18, r24
    3906:	39 07       	cpc	r19, r25
    3908:	29 f4       	brne	.+10     	; 0x3914 <lora_driver_setApplicationIdentifier+0x1e>
    390a:	bc 01       	movw	r22, r24
    390c:	86 ee       	ldi	r24, 0xE6	; 230
    390e:	94 e0       	ldi	r25, 0x04	; 4
    3910:	5b cf       	rjmp	.-330    	; 0x37c8 <_uploadMessageRc>
    3912:	08 95       	ret
    3914:	89 e0       	ldi	r24, 0x09	; 9
    3916:	08 95       	ret

00003918 <lora_driver_setApplicationKey>:
    3918:	fc 01       	movw	r30, r24
    391a:	01 90       	ld	r0, Z+
    391c:	00 20       	and	r0, r0
    391e:	e9 f7       	brne	.-6      	; 0x391a <lora_driver_setApplicationKey+0x2>
    3920:	9f 01       	movw	r18, r30
    3922:	21 52       	subi	r18, 0x21	; 33
    3924:	31 09       	sbc	r19, r1
    3926:	28 17       	cp	r18, r24
    3928:	39 07       	cpc	r19, r25
    392a:	29 f4       	brne	.+10     	; 0x3936 <lora_driver_setApplicationKey+0x1e>
    392c:	bc 01       	movw	r22, r24
    392e:	85 ef       	ldi	r24, 0xF5	; 245
    3930:	94 e0       	ldi	r25, 0x04	; 4
    3932:	4a cf       	rjmp	.-364    	; 0x37c8 <_uploadMessageRc>
    3934:	08 95       	ret
    3936:	89 e0       	ldi	r24, 0x09	; 9
    3938:	08 95       	ret

0000393a <lora_driver_saveMac>:
    393a:	60 e0       	ldi	r22, 0x00	; 0
    393c:	70 e0       	ldi	r23, 0x00	; 0
    393e:	84 e3       	ldi	r24, 0x34	; 52
    3940:	95 e0       	ldi	r25, 0x05	; 5
    3942:	42 cf       	rjmp	.-380    	; 0x37c8 <_uploadMessageRc>
    3944:	08 95       	ret

00003946 <lora_driver_join>:
    3946:	0f 93       	push	r16
    3948:	1f 93       	push	r17
    394a:	e8 2f       	mov	r30, r24
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	ee 0f       	add	r30, r30
    3950:	ff 1f       	adc	r31, r31
    3952:	e2 5f       	subi	r30, 0xF2	; 242
    3954:	f8 4f       	sbci	r31, 0xF8	; 248
    3956:	60 81       	ld	r22, Z
    3958:	71 81       	ldd	r23, Z+1	; 0x01
    395a:	8d e3       	ldi	r24, 0x3D	; 61
    395c:	95 e0       	ldi	r25, 0x05	; 5
    395e:	34 df       	rcall	.-408    	; 0x37c8 <_uploadMessageRc>
    3960:	81 11       	cpse	r24, r1
    3962:	14 c0       	rjmp	.+40     	; 0x398c <lora_driver_join+0x46>
    3964:	08 e2       	ldi	r16, 0x28	; 40
    3966:	15 e0       	ldi	r17, 0x05	; 5
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	4d e2       	ldi	r20, 0x2D	; 45
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	61 ed       	ldi	r22, 0xD1	; 209
    3972:	76 e1       	ldi	r23, 0x16	; 22
    3974:	80 91 48 16 	lds	r24, 0x1648	; 0x801648 <_serialReplyBufferHandle>
    3978:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <_serialReplyBufferHandle+0x1>
    397c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <xStreamBufferReceive>
    3980:	88 23       	and	r24, r24
    3982:	21 f0       	breq	.+8      	; 0x398c <lora_driver_join+0x46>
    3984:	81 ed       	ldi	r24, 0xD1	; 209
    3986:	96 e1       	ldi	r25, 0x16	; 22
    3988:	aa de       	rcall	.-684    	; 0x36de <_reply2ReturnCode>
    398a:	03 c0       	rjmp	.+6      	; 0x3992 <lora_driver_join+0x4c>
    398c:	81 ed       	ldi	r24, 0xD1	; 209
    398e:	96 e1       	ldi	r25, 0x16	; 22
    3990:	a6 de       	rcall	.-692    	; 0x36de <_reply2ReturnCode>
    3992:	1f 91       	pop	r17
    3994:	0f 91       	pop	r16
    3996:	08 95       	ret

00003998 <lora_driver_sendUploadMessage>:
    3998:	0f 93       	push	r16
    399a:	1f 93       	push	r17
    399c:	cf 93       	push	r28
    399e:	df 93       	push	r29
    39a0:	1f 92       	push	r1
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	db 01       	movw	r26, r22
    39a8:	11 96       	adiw	r26, 0x01	; 1
    39aa:	9c 91       	ld	r25, X
    39ac:	11 97       	sbiw	r26, 0x01	; 1
    39ae:	95 31       	cpi	r25, 0x15	; 21
    39b0:	08 f0       	brcs	.+2      	; 0x39b4 <lora_driver_sendUploadMessage+0x1c>
    39b2:	b4 c0       	rjmp	.+360    	; 0x3b1c <lora_driver_sendUploadMessage+0x184>
    39b4:	99 23       	and	r25, r25
    39b6:	81 f1       	breq	.+96     	; 0x3a18 <lora_driver_sendUploadMessage+0x80>
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	27 2f       	mov	r18, r23
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	46 2f       	mov	r20, r22
    39c2:	50 e0       	ldi	r21, 0x00	; 0
    39c4:	fd 01       	movw	r30, r26
    39c6:	e4 0f       	add	r30, r20
    39c8:	f5 1f       	adc	r31, r21
    39ca:	92 81       	ldd	r25, Z+2	; 0x02
    39cc:	92 95       	swap	r25
    39ce:	9f 70       	andi	r25, 0x0F	; 15
    39d0:	9a 30       	cpi	r25, 0x0A	; 10
    39d2:	10 f0       	brcs	.+4      	; 0x39d8 <lora_driver_sendUploadMessage+0x40>
    39d4:	99 5c       	subi	r25, 0xC9	; 201
    39d6:	01 c0       	rjmp	.+2      	; 0x39da <lora_driver_sendUploadMessage+0x42>
    39d8:	90 5d       	subi	r25, 0xD0	; 208
    39da:	f9 01       	movw	r30, r18
    39dc:	ee 59       	subi	r30, 0x9E	; 158
    39de:	f9 4e       	sbci	r31, 0xE9	; 233
    39e0:	90 83       	st	Z, r25
    39e2:	2f 5f       	subi	r18, 0xFF	; 255
    39e4:	3f 4f       	sbci	r19, 0xFF	; 255
    39e6:	fd 01       	movw	r30, r26
    39e8:	e4 0f       	add	r30, r20
    39ea:	f5 1f       	adc	r31, r21
    39ec:	92 81       	ldd	r25, Z+2	; 0x02
    39ee:	9f 70       	andi	r25, 0x0F	; 15
    39f0:	49 2f       	mov	r20, r25
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	4a 30       	cpi	r20, 0x0A	; 10
    39f6:	51 05       	cpc	r21, r1
    39f8:	14 f0       	brlt	.+4      	; 0x39fe <lora_driver_sendUploadMessage+0x66>
    39fa:	99 5c       	subi	r25, 0xC9	; 201
    39fc:	01 c0       	rjmp	.+2      	; 0x3a00 <lora_driver_sendUploadMessage+0x68>
    39fe:	90 5d       	subi	r25, 0xD0	; 208
    3a00:	f9 01       	movw	r30, r18
    3a02:	ee 59       	subi	r30, 0x9E	; 158
    3a04:	f9 4e       	sbci	r31, 0xE9	; 233
    3a06:	90 83       	st	Z, r25
    3a08:	7e 5f       	subi	r23, 0xFE	; 254
    3a0a:	6f 5f       	subi	r22, 0xFF	; 255
    3a0c:	11 96       	adiw	r26, 0x01	; 1
    3a0e:	9c 91       	ld	r25, X
    3a10:	11 97       	sbiw	r26, 0x01	; 1
    3a12:	69 17       	cp	r22, r25
    3a14:	98 f2       	brcs	.-90     	; 0x39bc <lora_driver_sendUploadMessage+0x24>
    3a16:	01 c0       	rjmp	.+2      	; 0x3a1a <lora_driver_sendUploadMessage+0x82>
    3a18:	70 e0       	ldi	r23, 0x00	; 0
    3a1a:	e7 2f       	mov	r30, r23
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	ee 59       	subi	r30, 0x9E	; 158
    3a20:	f9 4e       	sbci	r31, 0xE9	; 233
    3a22:	10 82       	st	Z, r1
    3a24:	4c 91       	ld	r20, X
    3a26:	81 11       	cpse	r24, r1
    3a28:	03 c0       	rjmp	.+6      	; 0x3a30 <lora_driver_sendUploadMessage+0x98>
    3a2a:	86 e4       	ldi	r24, 0x46	; 70
    3a2c:	95 e0       	ldi	r25, 0x05	; 5
    3a2e:	02 c0       	rjmp	.+4      	; 0x3a34 <lora_driver_sendUploadMessage+0x9c>
    3a30:	88 e4       	ldi	r24, 0x48	; 72
    3a32:	95 e0       	ldi	r25, 0x05	; 5
    3a34:	22 e6       	ldi	r18, 0x62	; 98
    3a36:	36 e1       	ldi	r19, 0x16	; 22
    3a38:	3f 93       	push	r19
    3a3a:	2f 93       	push	r18
    3a3c:	1f 92       	push	r1
    3a3e:	4f 93       	push	r20
    3a40:	9f 93       	push	r25
    3a42:	8f 93       	push	r24
    3a44:	8c e4       	ldi	r24, 0x4C	; 76
    3a46:	95 e0       	ldi	r25, 0x05	; 5
    3a48:	9f 93       	push	r25
    3a4a:	8f 93       	push	r24
    3a4c:	84 ea       	ldi	r24, 0xA4	; 164
    3a4e:	96 e1       	ldi	r25, 0x16	; 22
    3a50:	9f 93       	push	r25
    3a52:	8f 93       	push	r24
    3a54:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    3a58:	60 e0       	ldi	r22, 0x00	; 0
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
    3a5c:	84 ea       	ldi	r24, 0xA4	; 164
    3a5e:	96 e1       	ldi	r25, 0x16	; 22
    3a60:	b3 de       	rcall	.-666    	; 0x37c8 <_uploadMessageRc>
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	cd bf       	out	0x3d, r28	; 61
    3a6c:	81 11       	cpse	r24, r1
    3a6e:	59 c0       	rjmp	.+178    	; 0x3b22 <lora_driver_sendUploadMessage+0x18a>
    3a70:	08 e2       	ldi	r16, 0x28	; 40
    3a72:	15 e0       	ldi	r17, 0x05	; 5
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	4d e2       	ldi	r20, 0x2D	; 45
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	61 ed       	ldi	r22, 0xD1	; 209
    3a7e:	76 e1       	ldi	r23, 0x16	; 22
    3a80:	80 91 48 16 	lds	r24, 0x1648	; 0x801648 <_serialReplyBufferHandle>
    3a84:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <_serialReplyBufferHandle+0x1>
    3a88:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <xStreamBufferReceive>
    3a8c:	88 23       	and	r24, r24
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <lora_driver_sendUploadMessage+0xfa>
    3a90:	47 c0       	rjmp	.+142    	; 0x3b20 <lora_driver_sendUploadMessage+0x188>
    3a92:	81 ed       	ldi	r24, 0xD1	; 209
    3a94:	96 e1       	ldi	r25, 0x16	; 22
    3a96:	23 de       	rcall	.-954    	; 0x36de <_reply2ReturnCode>
    3a98:	8e 30       	cpi	r24, 0x0E	; 14
    3a9a:	09 f0       	breq	.+2      	; 0x3a9e <lora_driver_sendUploadMessage+0x106>
    3a9c:	42 c0       	rjmp	.+132    	; 0x3b22 <lora_driver_sendUploadMessage+0x18a>
    3a9e:	87 e0       	ldi	r24, 0x07	; 7
    3aa0:	89 83       	std	Y+1, r24	; 0x01
    3aa2:	80 91 46 16 	lds	r24, 0x1646	; 0x801646 <_downlinkMessageBuffer>
    3aa6:	90 91 47 16 	lds	r25, 0x1647	; 0x801647 <_downlinkMessageBuffer+0x1>
    3aaa:	89 2b       	or	r24, r25
    3aac:	a9 f1       	breq	.+106    	; 0x3b18 <lora_driver_sendUploadMessage+0x180>
    3aae:	be 01       	movw	r22, r28
    3ab0:	6f 5f       	subi	r22, 0xFF	; 255
    3ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab4:	81 ed       	ldi	r24, 0xD1	; 209
    3ab6:	96 e1       	ldi	r25, 0x16	; 22
    3ab8:	68 d1       	rcall	.+720    	; 0x3d8a <decode_port_no>
    3aba:	80 93 4c 16 	sts	0x164C, r24	; 0x80164c <_downlinkPayload>
    3abe:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	ef 52       	subi	r30, 0x2F	; 47
    3ac4:	f9 4e       	sbci	r31, 0xE9	; 233
    3ac6:	df 01       	movw	r26, r30
    3ac8:	0d 90       	ld	r0, X+
    3aca:	00 20       	and	r0, r0
    3acc:	e9 f7       	brne	.-6      	; 0x3ac8 <lora_driver_sendUploadMessage+0x130>
    3ace:	11 97       	sbiw	r26, 0x01	; 1
    3ad0:	ae 1b       	sub	r26, r30
    3ad2:	bf 0b       	sbc	r27, r31
    3ad4:	aa 23       	and	r26, r26
    3ad6:	91 f0       	breq	.+36     	; 0x3afc <lora_driver_sendUploadMessage+0x164>
    3ad8:	bb 27       	eor	r27, r27
    3ada:	cd 01       	movw	r24, r26
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	9c 01       	movw	r18, r24
    3ae0:	12 f4       	brpl	.+4      	; 0x3ae6 <lora_driver_sendUploadMessage+0x14e>
    3ae2:	2f 5f       	subi	r18, 0xFF	; 255
    3ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae6:	35 95       	asr	r19
    3ae8:	27 95       	ror	r18
    3aea:	20 93 4d 16 	sts	0x164D, r18	; 0x80164d <_downlinkPayload+0x1>
    3aee:	af 01       	movw	r20, r30
    3af0:	4f 5f       	subi	r20, 0xFF	; 255
    3af2:	5f 4f       	sbci	r21, 0xFF	; 255
    3af4:	64 e1       	ldi	r22, 0x14	; 20
    3af6:	8e e4       	ldi	r24, 0x4E	; 78
    3af8:	96 e1       	ldi	r25, 0x16	; 22
    3afa:	73 d1       	rcall	.+742    	; 0x3de2 <decode_hexadecimal_string_bytes>
    3afc:	01 e0       	ldi	r16, 0x01	; 1
    3afe:	10 e0       	ldi	r17, 0x00	; 0
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	46 e1       	ldi	r20, 0x16	; 22
    3b06:	50 e0       	ldi	r21, 0x00	; 0
    3b08:	6c e4       	ldi	r22, 0x4C	; 76
    3b0a:	76 e1       	ldi	r23, 0x16	; 22
    3b0c:	80 91 46 16 	lds	r24, 0x1646	; 0x801646 <_downlinkMessageBuffer>
    3b10:	90 91 47 16 	lds	r25, 0x1647	; 0x801647 <_downlinkMessageBuffer+0x1>
    3b14:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <xStreamBufferSend>
    3b18:	8e e0       	ldi	r24, 0x0E	; 14
    3b1a:	03 c0       	rjmp	.+6      	; 0x3b22 <lora_driver_sendUploadMessage+0x18a>
    3b1c:	84 e1       	ldi	r24, 0x14	; 20
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <lora_driver_sendUploadMessage+0x18a>
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	0f 90       	pop	r0
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	08 95       	ret

00003b2e <lora_driver_setAdaptiveDataRate>:
    3b2e:	81 30       	cpi	r24, 0x01	; 1
    3b30:	19 f0       	breq	.+6      	; 0x3b38 <lora_driver_setAdaptiveDataRate+0xa>
    3b32:	6c e5       	ldi	r22, 0x5C	; 92
    3b34:	75 e0       	ldi	r23, 0x05	; 5
    3b36:	02 c0       	rjmp	.+4      	; 0x3b3c <lora_driver_setAdaptiveDataRate+0xe>
    3b38:	65 e3       	ldi	r22, 0x35	; 53
    3b3a:	76 e0       	ldi	r23, 0x06	; 6
    3b3c:	80 e6       	ldi	r24, 0x60	; 96
    3b3e:	95 e0       	ldi	r25, 0x05	; 5
    3b40:	43 ce       	rjmp	.-890    	; 0x37c8 <_uploadMessageRc>
    3b42:	08 95       	ret

00003b44 <lora_driver_setReceiveDelay>:
    3b44:	9f 93       	push	r25
    3b46:	8f 93       	push	r24
    3b48:	81 e9       	ldi	r24, 0x91	; 145
    3b4a:	95 e0       	ldi	r25, 0x05	; 5
    3b4c:	9f 93       	push	r25
    3b4e:	8f 93       	push	r24
    3b50:	84 ea       	ldi	r24, 0xA4	; 164
    3b52:	96 e1       	ldi	r25, 0x16	; 22
    3b54:	9f 93       	push	r25
    3b56:	8f 93       	push	r24
    3b58:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    3b5c:	60 e0       	ldi	r22, 0x00	; 0
    3b5e:	70 e0       	ldi	r23, 0x00	; 0
    3b60:	84 ea       	ldi	r24, 0xA4	; 164
    3b62:	96 e1       	ldi	r25, 0x16	; 22
    3b64:	31 de       	rcall	.-926    	; 0x37c8 <_uploadMessageRc>
    3b66:	0f 90       	pop	r0
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	08 95       	ret

00003b74 <lora_driver_configureToEu868>:
    3b74:	2f 92       	push	r2
    3b76:	3f 92       	push	r3
    3b78:	4f 92       	push	r4
    3b7a:	5f 92       	push	r5
    3b7c:	6f 92       	push	r6
    3b7e:	7f 92       	push	r7
    3b80:	8f 92       	push	r8
    3b82:	9f 92       	push	r9
    3b84:	af 92       	push	r10
    3b86:	bf 92       	push	r11
    3b88:	cf 92       	push	r12
    3b8a:	df 92       	push	r13
    3b8c:	ef 92       	push	r14
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	a0 97       	sbiw	r28, 0x20	; 32
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	6e eb       	ldi	r22, 0xBE	; 190
    3baa:	75 e0       	ldi	r23, 0x05	; 5
    3bac:	8a ec       	ldi	r24, 0xCA	; 202
    3bae:	95 e0       	ldi	r25, 0x05	; 5
    3bb0:	3c dd       	rcall	.-1416   	; 0x362a <_uploadMessage>
    3bb2:	95 dd       	rcall	.-1238   	; 0x36de <_reply2ReturnCode>
    3bb4:	81 11       	cpse	r24, r1
    3bb6:	a3 c0       	rjmp	.+326    	; 0x3cfe <lora_driver_configureToEu868+0x18a>
    3bb8:	80 e2       	ldi	r24, 0x20	; 32
    3bba:	e2 e2       	ldi	r30, 0x22	; 34
    3bbc:	f2 e0       	ldi	r31, 0x02	; 2
    3bbe:	de 01       	movw	r26, r28
    3bc0:	11 96       	adiw	r26, 0x01	; 1
    3bc2:	01 90       	ld	r0, Z+
    3bc4:	0d 92       	st	X+, r0
    3bc6:	8a 95       	dec	r24
    3bc8:	e1 f7       	brne	.-8      	; 0x3bc2 <lora_driver_configureToEu868+0x4e>
    3bca:	9e 01       	movw	r18, r28
    3bcc:	2f 5f       	subi	r18, 0xFF	; 255
    3bce:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd0:	69 01       	movw	r12, r18
    3bd2:	e1 2c       	mov	r14, r1
    3bd4:	f1 2c       	mov	r15, r1
    3bd6:	0f 2e       	mov	r0, r31
    3bd8:	f6 ed       	ldi	r31, 0xD6	; 214
    3bda:	af 2e       	mov	r10, r31
    3bdc:	f5 e0       	ldi	r31, 0x05	; 5
    3bde:	bf 2e       	mov	r11, r31
    3be0:	f0 2d       	mov	r31, r0
    3be2:	04 ea       	ldi	r16, 0xA4	; 164
    3be4:	16 e1       	ldi	r17, 0x16	; 22
    3be6:	0f 2e       	mov	r0, r31
    3be8:	ff ee       	ldi	r31, 0xEF	; 239
    3bea:	4f 2e       	mov	r4, r31
    3bec:	f5 e0       	ldi	r31, 0x05	; 5
    3bee:	5f 2e       	mov	r5, r31
    3bf0:	f0 2d       	mov	r31, r0
    3bf2:	0f 2e       	mov	r0, r31
    3bf4:	f6 e0       	ldi	r31, 0x06	; 6
    3bf6:	8f 2e       	mov	r8, r31
    3bf8:	f6 e0       	ldi	r31, 0x06	; 6
    3bfa:	9f 2e       	mov	r9, r31
    3bfc:	f0 2d       	mov	r31, r0
    3bfe:	0f 2e       	mov	r0, r31
    3c00:	f0 e2       	ldi	r31, 0x20	; 32
    3c02:	6f 2e       	mov	r6, r31
    3c04:	f6 e0       	ldi	r31, 0x06	; 6
    3c06:	7f 2e       	mov	r7, r31
    3c08:	f0 2d       	mov	r31, r0
    3c0a:	3e 2c       	mov	r3, r14
    3c0c:	2f 2c       	mov	r2, r15
    3c0e:	ff 92       	push	r15
    3c10:	ef 92       	push	r14
    3c12:	bf 92       	push	r11
    3c14:	af 92       	push	r10
    3c16:	1f 93       	push	r17
    3c18:	0f 93       	push	r16
    3c1a:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    3c1e:	60 e0       	ldi	r22, 0x00	; 0
    3c20:	70 e0       	ldi	r23, 0x00	; 0
    3c22:	c8 01       	movw	r24, r16
    3c24:	02 dd       	rcall	.-1532   	; 0x362a <_uploadMessage>
    3c26:	5b dd       	rcall	.-1354   	; 0x36de <_reply2ReturnCode>
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	0f 90       	pop	r0
    3c30:	0f 90       	pop	r0
    3c32:	0f 90       	pop	r0
    3c34:	81 11       	cpse	r24, r1
    3c36:	63 c0       	rjmp	.+198    	; 0x3cfe <lora_driver_configureToEu868+0x18a>
    3c38:	32 e0       	ldi	r19, 0x02	; 2
    3c3a:	3e 15       	cp	r19, r14
    3c3c:	e8 f4       	brcc	.+58     	; 0x3c78 <lora_driver_configureToEu868+0x104>
    3c3e:	f6 01       	movw	r30, r12
    3c40:	83 81       	ldd	r24, Z+3	; 0x03
    3c42:	8f 93       	push	r24
    3c44:	82 81       	ldd	r24, Z+2	; 0x02
    3c46:	8f 93       	push	r24
    3c48:	81 81       	ldd	r24, Z+1	; 0x01
    3c4a:	8f 93       	push	r24
    3c4c:	80 81       	ld	r24, Z
    3c4e:	8f 93       	push	r24
    3c50:	ff 92       	push	r15
    3c52:	ef 92       	push	r14
    3c54:	5f 92       	push	r5
    3c56:	4f 92       	push	r4
    3c58:	1f 93       	push	r17
    3c5a:	0f 93       	push	r16
    3c5c:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    3c60:	60 e0       	ldi	r22, 0x00	; 0
    3c62:	70 e0       	ldi	r23, 0x00	; 0
    3c64:	c8 01       	movw	r24, r16
    3c66:	e1 dc       	rcall	.-1598   	; 0x362a <_uploadMessage>
    3c68:	3a dd       	rcall	.-1420   	; 0x36de <_reply2ReturnCode>
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	f8 94       	cli
    3c6e:	de bf       	out	0x3e, r29	; 62
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	cd bf       	out	0x3d, r28	; 61
    3c74:	81 11       	cpse	r24, r1
    3c76:	43 c0       	rjmp	.+134    	; 0x3cfe <lora_driver_configureToEu868+0x18a>
    3c78:	2f 92       	push	r2
    3c7a:	3f 92       	push	r3
    3c7c:	9f 92       	push	r9
    3c7e:	8f 92       	push	r8
    3c80:	1f 93       	push	r17
    3c82:	0f 93       	push	r16
    3c84:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    3c88:	60 e0       	ldi	r22, 0x00	; 0
    3c8a:	70 e0       	ldi	r23, 0x00	; 0
    3c8c:	c8 01       	movw	r24, r16
    3c8e:	cd dc       	rcall	.-1638   	; 0x362a <_uploadMessage>
    3c90:	26 dd       	rcall	.-1460   	; 0x36de <_reply2ReturnCode>
    3c92:	0f 90       	pop	r0
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	81 11       	cpse	r24, r1
    3ca0:	2e c0       	rjmp	.+92     	; 0x3cfe <lora_driver_configureToEu868+0x18a>
    3ca2:	2f 92       	push	r2
    3ca4:	3f 92       	push	r3
    3ca6:	7f 92       	push	r7
    3ca8:	6f 92       	push	r6
    3caa:	1f 93       	push	r17
    3cac:	0f 93       	push	r16
    3cae:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <sprintf>
    3cb2:	60 e0       	ldi	r22, 0x00	; 0
    3cb4:	70 e0       	ldi	r23, 0x00	; 0
    3cb6:	c8 01       	movw	r24, r16
    3cb8:	b8 dc       	rcall	.-1680   	; 0x362a <_uploadMessage>
    3cba:	11 dd       	rcall	.-1502   	; 0x36de <_reply2ReturnCode>
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	81 11       	cpse	r24, r1
    3cca:	19 c0       	rjmp	.+50     	; 0x3cfe <lora_driver_configureToEu868+0x18a>
    3ccc:	3f ef       	ldi	r19, 0xFF	; 255
    3cce:	e3 1a       	sub	r14, r19
    3cd0:	f3 0a       	sbc	r15, r19
    3cd2:	84 e0       	ldi	r24, 0x04	; 4
    3cd4:	c8 0e       	add	r12, r24
    3cd6:	d1 1c       	adc	r13, r1
    3cd8:	98 e0       	ldi	r25, 0x08	; 8
    3cda:	e9 16       	cp	r14, r25
    3cdc:	f1 04       	cpc	r15, r1
    3cde:	09 f0       	breq	.+2      	; 0x3ce2 <lora_driver_configureToEu868+0x16e>
    3ce0:	94 cf       	rjmp	.-216    	; 0x3c0a <lora_driver_configureToEu868+0x96>
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	70 e0       	ldi	r23, 0x00	; 0
    3ce6:	88 e3       	ldi	r24, 0x38	; 56
    3ce8:	96 e0       	ldi	r25, 0x06	; 6
    3cea:	9f dc       	rcall	.-1730   	; 0x362a <_uploadMessage>
    3cec:	f8 dc       	rcall	.-1552   	; 0x36de <_reply2ReturnCode>
    3cee:	81 11       	cpse	r24, r1
    3cf0:	06 c0       	rjmp	.+12     	; 0x3cfe <lora_driver_configureToEu868+0x18a>
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	89 e4       	ldi	r24, 0x49	; 73
    3cf8:	96 e0       	ldi	r25, 0x06	; 6
    3cfa:	97 dc       	rcall	.-1746   	; 0x362a <_uploadMessage>
    3cfc:	f0 dc       	rcall	.-1568   	; 0x36de <_reply2ReturnCode>
    3cfe:	a0 96       	adiw	r28, 0x20	; 32
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	cd bf       	out	0x3d, r28	; 61
    3d0a:	df 91       	pop	r29
    3d0c:	cf 91       	pop	r28
    3d0e:	1f 91       	pop	r17
    3d10:	0f 91       	pop	r16
    3d12:	ff 90       	pop	r15
    3d14:	ef 90       	pop	r14
    3d16:	df 90       	pop	r13
    3d18:	cf 90       	pop	r12
    3d1a:	bf 90       	pop	r11
    3d1c:	af 90       	pop	r10
    3d1e:	9f 90       	pop	r9
    3d20:	8f 90       	pop	r8
    3d22:	7f 90       	pop	r7
    3d24:	6f 90       	pop	r6
    3d26:	5f 90       	pop	r5
    3d28:	4f 90       	pop	r4
    3d2a:	3f 90       	pop	r3
    3d2c:	2f 90       	pop	r2
    3d2e:	08 95       	ret

00003d30 <lora_driver_setOtaaIdentity>:
    3d30:	ef 92       	push	r14
    3d32:	ff 92       	push	r15
    3d34:	0f 93       	push	r16
    3d36:	1f 93       	push	r17
    3d38:	cf 93       	push	r28
    3d3a:	df 93       	push	r29
    3d3c:	ec 01       	movw	r28, r24
    3d3e:	8b 01       	movw	r16, r22
    3d40:	7a 01       	movw	r14, r20
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	f4 de       	rcall	.-536    	; 0x3b2e <lora_driver_setAdaptiveDataRate>
    3d46:	81 11       	cpse	r24, r1
    3d48:	0d c0       	rjmp	.+26     	; 0x3d64 <lora_driver_setOtaaIdentity+0x34>
    3d4a:	ce 01       	movw	r24, r28
    3d4c:	d4 dd       	rcall	.-1112   	; 0x38f6 <lora_driver_setApplicationIdentifier>
    3d4e:	81 11       	cpse	r24, r1
    3d50:	09 c0       	rjmp	.+18     	; 0x3d64 <lora_driver_setOtaaIdentity+0x34>
    3d52:	c8 01       	movw	r24, r16
    3d54:	e1 dd       	rcall	.-1086   	; 0x3918 <lora_driver_setApplicationKey>
    3d56:	81 11       	cpse	r24, r1
    3d58:	05 c0       	rjmp	.+10     	; 0x3d64 <lora_driver_setOtaaIdentity+0x34>
    3d5a:	c7 01       	movw	r24, r14
    3d5c:	bb dd       	rcall	.-1162   	; 0x38d4 <lora_driver_setDeviceIdentifier>
    3d5e:	81 11       	cpse	r24, r1
    3d60:	01 c0       	rjmp	.+2      	; 0x3d64 <lora_driver_setOtaaIdentity+0x34>
    3d62:	eb dd       	rcall	.-1066   	; 0x393a <lora_driver_saveMac>
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	1f 91       	pop	r17
    3d6a:	0f 91       	pop	r16
    3d6c:	ff 90       	pop	r15
    3d6e:	ef 90       	pop	r14
    3d70:	08 95       	ret

00003d72 <lora_driver_mapReturnCodeToText>:
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	fc 01       	movw	r30, r24
    3d76:	ee 0f       	add	r30, r30
    3d78:	ff 1f       	adc	r31, r31
    3d7a:	8e 0f       	add	r24, r30
    3d7c:	9f 1f       	adc	r25, r31
    3d7e:	fc 01       	movw	r30, r24
    3d80:	ee 5e       	subi	r30, 0xEE	; 238
    3d82:	f8 4f       	sbci	r31, 0xF8	; 248
    3d84:	81 81       	ldd	r24, Z+1	; 0x01
    3d86:	92 81       	ldd	r25, Z+2	; 0x02
    3d88:	08 95       	ret

00003d8a <decode_port_no>:
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	00 97       	sbiw	r24, 0x00	; 0
    3d8e:	29 f1       	breq	.+74     	; 0x3dda <decode_port_no+0x50>
    3d90:	fb 01       	movw	r30, r22
    3d92:	20 81       	ld	r18, Z
    3d94:	fc 01       	movw	r30, r24
    3d96:	01 90       	ld	r0, Z+
    3d98:	00 20       	and	r0, r0
    3d9a:	e9 f7       	brne	.-6      	; 0x3d96 <decode_port_no+0xc>
    3d9c:	31 97       	sbiw	r30, 0x01	; 1
    3d9e:	e8 1b       	sub	r30, r24
    3da0:	f9 0b       	sbc	r31, r25
    3da2:	82 2f       	mov	r24, r18
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	e8 17       	cp	r30, r24
    3da8:	f9 07       	cpc	r31, r25
    3daa:	c8 f0       	brcs	.+50     	; 0x3dde <decode_port_no+0x54>
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	08 c0       	rjmp	.+16     	; 0x3dc0 <decode_port_no+0x36>
    3db0:	88 0f       	add	r24, r24
    3db2:	38 2f       	mov	r19, r24
    3db4:	33 0f       	add	r19, r19
    3db6:	33 0f       	add	r19, r19
    3db8:	83 0f       	add	r24, r19
    3dba:	80 53       	subi	r24, 0x30	; 48
    3dbc:	89 0f       	add	r24, r25
    3dbe:	2f 5f       	subi	r18, 0xFF	; 255
    3dc0:	fd 01       	movw	r30, r26
    3dc2:	e2 0f       	add	r30, r18
    3dc4:	f1 1d       	adc	r31, r1
    3dc6:	90 81       	ld	r25, Z
    3dc8:	30 ed       	ldi	r19, 0xD0	; 208
    3dca:	39 0f       	add	r19, r25
    3dcc:	3a 30       	cpi	r19, 0x0A	; 10
    3dce:	10 f4       	brcc	.+4      	; 0x3dd4 <decode_port_no+0x4a>
    3dd0:	91 11       	cpse	r25, r1
    3dd2:	ee cf       	rjmp	.-36     	; 0x3db0 <decode_port_no+0x26>
    3dd4:	fb 01       	movw	r30, r22
    3dd6:	20 83       	st	Z, r18
    3dd8:	08 95       	ret
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	08 95       	ret
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	08 95       	ret

00003de2 <decode_hexadecimal_string_bytes>:
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	dc 01       	movw	r26, r24
    3dec:	ea 01       	movw	r28, r20
    3dee:	20 97       	sbiw	r28, 0x00	; 0
    3df0:	e1 f1       	breq	.+120    	; 0x3e6a <decode_hexadecimal_string_bytes+0x88>
    3df2:	fa 01       	movw	r30, r20
    3df4:	01 90       	ld	r0, Z+
    3df6:	00 20       	and	r0, r0
    3df8:	e9 f7       	brne	.-6      	; 0x3df4 <decode_hexadecimal_string_bytes+0x12>
    3dfa:	31 97       	sbiw	r30, 0x01	; 1
    3dfc:	e4 1b       	sub	r30, r20
    3dfe:	f5 0b       	sbc	r31, r21
    3e00:	32 97       	sbiw	r30, 0x02	; 2
    3e02:	10 f5       	brcc	.+68     	; 0x3e48 <decode_hexadecimal_string_bytes+0x66>
    3e04:	32 c0       	rjmp	.+100    	; 0x3e6a <decode_hexadecimal_string_bytes+0x88>
    3e06:	8d 01       	movw	r16, r26
    3e08:	04 0f       	add	r16, r20
    3e0a:	15 1f       	adc	r17, r21
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	ae 01       	movw	r20, r28
    3e10:	42 0f       	add	r20, r18
    3e12:	53 1f       	adc	r21, r19
    3e14:	fa 01       	movw	r30, r20
    3e16:	90 81       	ld	r25, Z
    3e18:	91 34       	cpi	r25, 0x41	; 65
    3e1a:	28 f0       	brcs	.+10     	; 0x3e26 <decode_hexadecimal_string_bytes+0x44>
    3e1c:	97 53       	subi	r25, 0x37	; 55
    3e1e:	59 2f       	mov	r21, r25
    3e20:	52 95       	swap	r21
    3e22:	50 7f       	andi	r21, 0xF0	; 240
    3e24:	03 c0       	rjmp	.+6      	; 0x3e2c <decode_hexadecimal_string_bytes+0x4a>
    3e26:	59 2f       	mov	r21, r25
    3e28:	52 95       	swap	r21
    3e2a:	50 7f       	andi	r21, 0xF0	; 240
    3e2c:	2c 0f       	add	r18, r28
    3e2e:	3d 1f       	adc	r19, r29
    3e30:	f9 01       	movw	r30, r18
    3e32:	91 81       	ldd	r25, Z+1	; 0x01
    3e34:	91 34       	cpi	r25, 0x41	; 65
    3e36:	10 f0       	brcs	.+4      	; 0x3e3c <decode_hexadecimal_string_bytes+0x5a>
    3e38:	97 53       	subi	r25, 0x37	; 55
    3e3a:	01 c0       	rjmp	.+2      	; 0x3e3e <decode_hexadecimal_string_bytes+0x5c>
    3e3c:	90 53       	subi	r25, 0x30	; 48
    3e3e:	95 0f       	add	r25, r21
    3e40:	f8 01       	movw	r30, r16
    3e42:	90 83       	st	Z, r25
    3e44:	8f 5f       	subi	r24, 0xFF	; 255
    3e46:	01 c0       	rjmp	.+2      	; 0x3e4a <decode_hexadecimal_string_bytes+0x68>
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	28 2f       	mov	r18, r24
    3e4c:	22 0f       	add	r18, r18
    3e4e:	48 2f       	mov	r20, r24
    3e50:	50 e0       	ldi	r21, 0x00	; 0
    3e52:	fe 01       	movw	r30, r28
    3e54:	01 90       	ld	r0, Z+
    3e56:	00 20       	and	r0, r0
    3e58:	e9 f7       	brne	.-6      	; 0x3e54 <decode_hexadecimal_string_bytes+0x72>
    3e5a:	31 97       	sbiw	r30, 0x01	; 1
    3e5c:	ec 1b       	sub	r30, r28
    3e5e:	fd 0b       	sbc	r31, r29
    3e60:	4e 17       	cp	r20, r30
    3e62:	5f 07       	cpc	r21, r31
    3e64:	10 f4       	brcc	.+4      	; 0x3e6a <decode_hexadecimal_string_bytes+0x88>
    3e66:	86 13       	cpse	r24, r22
    3e68:	ce cf       	rjmp	.-100    	; 0x3e06 <decode_hexadecimal_string_bytes+0x24>
    3e6a:	df 91       	pop	r29
    3e6c:	cf 91       	pop	r28
    3e6e:	1f 91       	pop	r17
    3e70:	0f 91       	pop	r16
    3e72:	08 95       	ret

00003e74 <serial_create>:
    3e74:	2f 92       	push	r2
    3e76:	3f 92       	push	r3
    3e78:	4f 92       	push	r4
    3e7a:	5f 92       	push	r5
    3e7c:	6f 92       	push	r6
    3e7e:	7f 92       	push	r7
    3e80:	8f 92       	push	r8
    3e82:	9f 92       	push	r9
    3e84:	af 92       	push	r10
    3e86:	cf 92       	push	r12
    3e88:	ef 92       	push	r14
    3e8a:	ff 92       	push	r15
    3e8c:	0f 93       	push	r16
    3e8e:	1f 93       	push	r17
    3e90:	cf 93       	push	r28
    3e92:	df 93       	push	r29
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62
    3e98:	f8 2e       	mov	r15, r24
    3e9a:	2a 01       	movw	r4, r20
    3e9c:	3b 01       	movw	r6, r22
    3e9e:	88 e0       	ldi	r24, 0x08	; 8
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	0e 94 29 2c 	call	0x5852	; 0x5852 <malloc>
    3ea6:	8c 01       	movw	r16, r24
    3ea8:	8f 2d       	mov	r24, r15
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	fc 01       	movw	r30, r24
    3eae:	ee 0f       	add	r30, r30
    3eb0:	ff 1f       	adc	r31, r31
    3eb2:	e2 50       	subi	r30, 0x02	; 2
    3eb4:	f9 4e       	sbci	r31, 0xE9	; 233
    3eb6:	11 83       	std	Z+1, r17	; 0x01
    3eb8:	00 83       	st	Z, r16
    3eba:	01 15       	cp	r16, r1
    3ebc:	11 05       	cpc	r17, r1
    3ebe:	09 f4       	brne	.+2      	; 0x3ec2 <serial_create+0x4e>
    3ec0:	6d c0       	rjmp	.+218    	; 0x3f9c <serial_create+0x128>
    3ec2:	88 0f       	add	r24, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	e5 5f       	subi	r30, 0xF5	; 245
    3eca:	fd 4f       	sbci	r31, 0xFD	; 253
    3ecc:	80 81       	ld	r24, Z
    3ece:	91 81       	ldd	r25, Z+1	; 0x01
    3ed0:	d8 01       	movw	r26, r16
    3ed2:	8d 93       	st	X+, r24
    3ed4:	9c 93       	st	X, r25
    3ed6:	8c 2d       	mov	r24, r12
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	88 0f       	add	r24, r24
    3edc:	99 1f       	adc	r25, r25
    3ede:	88 0f       	add	r24, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	0e 94 29 2c 	call	0x5852	; 0x5852 <malloc>
    3ee6:	1c 01       	movw	r2, r24
    3ee8:	86 e0       	ldi	r24, 0x06	; 6
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	0e 94 29 2c 	call	0x5852	; 0x5852 <malloc>
    3ef0:	7c 01       	movw	r14, r24
    3ef2:	4c 2d       	mov	r20, r12
    3ef4:	b1 01       	movw	r22, r2
    3ef6:	f4 d6       	rcall	.+3560   	; 0x4ce0 <fifo_init>
    3ef8:	f8 01       	movw	r30, r16
    3efa:	f5 82       	std	Z+5, r15	; 0x05
    3efc:	e4 82       	std	Z+4, r14	; 0x04
    3efe:	8a 2d       	mov	r24, r10
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	88 0f       	add	r24, r24
    3f04:	99 1f       	adc	r25, r25
    3f06:	88 0f       	add	r24, r24
    3f08:	99 1f       	adc	r25, r25
    3f0a:	0e 94 29 2c 	call	0x5852	; 0x5852 <malloc>
    3f0e:	1c 01       	movw	r2, r24
    3f10:	86 e0       	ldi	r24, 0x06	; 6
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	0e 94 29 2c 	call	0x5852	; 0x5852 <malloc>
    3f18:	7c 01       	movw	r14, r24
    3f1a:	4a 2d       	mov	r20, r10
    3f1c:	b1 01       	movw	r22, r2
    3f1e:	e0 d6       	rcall	.+3520   	; 0x4ce0 <fifo_init>
    3f20:	d8 01       	movw	r26, r16
    3f22:	13 96       	adiw	r26, 0x03	; 3
    3f24:	fc 92       	st	X, r15
    3f26:	ee 92       	st	-X, r14
    3f28:	12 97       	sbiw	r26, 0x02	; 2
    3f2a:	17 96       	adiw	r26, 0x07	; 7
    3f2c:	9c 92       	st	X, r9
    3f2e:	8e 92       	st	-X, r8
    3f30:	16 97       	sbiw	r26, 0x06	; 6
    3f32:	ff b6       	in	r15, 0x3f	; 63
    3f34:	f8 94       	cli
    3f36:	ed 91       	ld	r30, X+
    3f38:	fc 91       	ld	r31, X
    3f3a:	11 97       	sbiw	r26, 0x01	; 1
    3f3c:	36 97       	sbiw	r30, 0x06	; 6
    3f3e:	80 81       	ld	r24, Z
    3f40:	82 60       	ori	r24, 0x02	; 2
    3f42:	80 83       	st	Z, r24
    3f44:	8d 90       	ld	r8, X+
    3f46:	9c 90       	ld	r9, X
    3f48:	c3 01       	movw	r24, r6
    3f4a:	b2 01       	movw	r22, r4
    3f4c:	0e 94 0e 2b 	call	0x561c	; 0x561c <__floatunsisf>
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	40 e0       	ldi	r20, 0x00	; 0
    3f56:	51 e4       	ldi	r21, 0x41	; 65
    3f58:	0e 94 9c 2b 	call	0x5738	; 0x5738 <__mulsf3>
    3f5c:	9b 01       	movw	r18, r22
    3f5e:	ac 01       	movw	r20, r24
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	74 e2       	ldi	r23, 0x24	; 36
    3f64:	84 e7       	ldi	r24, 0x74	; 116
    3f66:	9b e4       	ldi	r25, 0x4B	; 75
    3f68:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <__divsf3>
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e8       	ldi	r20, 0x80	; 128
    3f72:	5f e3       	ldi	r21, 0x3F	; 63
    3f74:	0e 94 15 2a 	call	0x542a	; 0x542a <__subsf3>
    3f78:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <__fixunssfsi>
    3f7c:	f4 01       	movw	r30, r8
    3f7e:	32 97       	sbiw	r30, 0x02	; 2
    3f80:	60 83       	st	Z, r22
    3f82:	d8 01       	movw	r26, r16
    3f84:	ed 91       	ld	r30, X+
    3f86:	fc 91       	ld	r31, X
    3f88:	11 97       	sbiw	r26, 0x01	; 1
    3f8a:	35 97       	sbiw	r30, 0x05	; 5
    3f8c:	88 e9       	ldi	r24, 0x98	; 152
    3f8e:	80 83       	st	Z, r24
    3f90:	ed 91       	ld	r30, X+
    3f92:	fc 91       	ld	r31, X
    3f94:	34 97       	sbiw	r30, 0x04	; 4
    3f96:	86 e0       	ldi	r24, 0x06	; 6
    3f98:	80 83       	st	Z, r24
    3f9a:	ff be       	out	0x3f, r15	; 63
    3f9c:	c8 01       	movw	r24, r16
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	1f 91       	pop	r17
    3fa4:	0f 91       	pop	r16
    3fa6:	ff 90       	pop	r15
    3fa8:	ef 90       	pop	r14
    3faa:	cf 90       	pop	r12
    3fac:	af 90       	pop	r10
    3fae:	9f 90       	pop	r9
    3fb0:	8f 90       	pop	r8
    3fb2:	7f 90       	pop	r7
    3fb4:	6f 90       	pop	r6
    3fb6:	5f 90       	pop	r5
    3fb8:	4f 90       	pop	r4
    3fba:	3f 90       	pop	r3
    3fbc:	2f 90       	pop	r2
    3fbe:	08 95       	ret

00003fc0 <serial_sendByte>:
    3fc0:	cf 93       	push	r28
    3fc2:	df 93       	push	r29
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	89 2b       	or	r24, r25
    3fc8:	01 f1       	breq	.+64     	; 0x400a <serial_sendByte+0x4a>
    3fca:	12 96       	adiw	r26, 0x02	; 2
    3fcc:	ed 91       	ld	r30, X+
    3fce:	fc 91       	ld	r31, X
    3fd0:	13 97       	sbiw	r26, 0x03	; 3
    3fd2:	93 81       	ldd	r25, Z+3	; 0x03
    3fd4:	82 81       	ldd	r24, Z+2	; 0x02
    3fd6:	25 81       	ldd	r18, Z+5	; 0x05
    3fd8:	98 1b       	sub	r25, r24
    3fda:	92 23       	and	r25, r18
    3fdc:	84 81       	ldd	r24, Z+4	; 0x04
    3fde:	98 17       	cp	r25, r24
    3fe0:	b1 f0       	breq	.+44     	; 0x400e <serial_sendByte+0x4e>
    3fe2:	83 81       	ldd	r24, Z+3	; 0x03
    3fe4:	26 95       	lsr	r18
    3fe6:	28 23       	and	r18, r24
    3fe8:	c0 81       	ld	r28, Z
    3fea:	d1 81       	ldd	r29, Z+1	; 0x01
    3fec:	c2 0f       	add	r28, r18
    3fee:	d1 1d       	adc	r29, r1
    3ff0:	68 83       	st	Y, r22
    3ff2:	8f 5f       	subi	r24, 0xFF	; 255
    3ff4:	95 81       	ldd	r25, Z+5	; 0x05
    3ff6:	89 23       	and	r24, r25
    3ff8:	83 83       	std	Z+3, r24	; 0x03
    3ffa:	ed 91       	ld	r30, X+
    3ffc:	fc 91       	ld	r31, X
    3ffe:	35 97       	sbiw	r30, 0x05	; 5
    4000:	80 81       	ld	r24, Z
    4002:	80 62       	ori	r24, 0x20	; 32
    4004:	80 83       	st	Z, r24
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	03 c0       	rjmp	.+6      	; 0x4010 <serial_sendByte+0x50>
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	01 c0       	rjmp	.+2      	; 0x4010 <serial_sendByte+0x50>
    400e:	82 e0       	ldi	r24, 0x02	; 2
    4010:	df 91       	pop	r29
    4012:	cf 91       	pop	r28
    4014:	08 95       	ret

00004016 <serial_sendBytes>:
    4016:	ef 92       	push	r14
    4018:	ff 92       	push	r15
    401a:	0f 93       	push	r16
    401c:	1f 93       	push	r17
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
    4022:	7c 01       	movw	r14, r24
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	09 f4       	brne	.+2      	; 0x402a <serial_sendBytes+0x14>
    4028:	41 c0       	rjmp	.+130    	; 0x40ac <serial_sendBytes+0x96>
    402a:	dc 01       	movw	r26, r24
    402c:	12 96       	adiw	r26, 0x02	; 2
    402e:	ed 91       	ld	r30, X+
    4030:	fc 91       	ld	r31, X
    4032:	13 97       	sbiw	r26, 0x03	; 3
    4034:	93 81       	ldd	r25, Z+3	; 0x03
    4036:	82 81       	ldd	r24, Z+2	; 0x02
    4038:	98 1b       	sub	r25, r24
    403a:	85 81       	ldd	r24, Z+5	; 0x05
    403c:	98 23       	and	r25, r24
    403e:	84 81       	ldd	r24, Z+4	; 0x04
    4040:	89 1b       	sub	r24, r25
    4042:	86 17       	cp	r24, r22
    4044:	a8 f1       	brcs	.+106    	; 0x40b0 <serial_sendBytes+0x9a>
    4046:	66 23       	and	r22, r22
    4048:	41 f1       	breq	.+80     	; 0x409a <serial_sendBytes+0x84>
    404a:	84 2f       	mov	r24, r20
    404c:	95 2f       	mov	r25, r21
    404e:	dc 01       	movw	r26, r24
    4050:	61 50       	subi	r22, 0x01	; 1
    4052:	46 2f       	mov	r20, r22
    4054:	50 e0       	ldi	r21, 0x00	; 0
    4056:	4f 5f       	subi	r20, 0xFF	; 255
    4058:	5f 4f       	sbci	r21, 0xFF	; 255
    405a:	48 0f       	add	r20, r24
    405c:	59 1f       	adc	r21, r25
    405e:	e7 01       	movw	r28, r14
    4060:	ea 81       	ldd	r30, Y+2	; 0x02
    4062:	fb 81       	ldd	r31, Y+3	; 0x03
    4064:	93 81       	ldd	r25, Z+3	; 0x03
    4066:	82 81       	ldd	r24, Z+2	; 0x02
    4068:	25 81       	ldd	r18, Z+5	; 0x05
    406a:	98 1b       	sub	r25, r24
    406c:	92 23       	and	r25, r18
    406e:	84 81       	ldd	r24, Z+4	; 0x04
    4070:	98 17       	cp	r25, r24
    4072:	79 f0       	breq	.+30     	; 0x4092 <serial_sendBytes+0x7c>
    4074:	8c 91       	ld	r24, X
    4076:	93 81       	ldd	r25, Z+3	; 0x03
    4078:	26 95       	lsr	r18
    407a:	29 23       	and	r18, r25
    407c:	60 81       	ld	r22, Z
    407e:	71 81       	ldd	r23, Z+1	; 0x01
    4080:	8b 01       	movw	r16, r22
    4082:	02 0f       	add	r16, r18
    4084:	11 1d       	adc	r17, r1
    4086:	e8 01       	movw	r28, r16
    4088:	88 83       	st	Y, r24
    408a:	9f 5f       	subi	r25, 0xFF	; 255
    408c:	85 81       	ldd	r24, Z+5	; 0x05
    408e:	98 23       	and	r25, r24
    4090:	93 83       	std	Z+3, r25	; 0x03
    4092:	11 96       	adiw	r26, 0x01	; 1
    4094:	a4 17       	cp	r26, r20
    4096:	b5 07       	cpc	r27, r21
    4098:	11 f7       	brne	.-60     	; 0x405e <serial_sendBytes+0x48>
    409a:	d7 01       	movw	r26, r14
    409c:	ed 91       	ld	r30, X+
    409e:	fc 91       	ld	r31, X
    40a0:	35 97       	sbiw	r30, 0x05	; 5
    40a2:	80 81       	ld	r24, Z
    40a4:	80 62       	ori	r24, 0x20	; 32
    40a6:	80 83       	st	Z, r24
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	03 c0       	rjmp	.+6      	; 0x40b2 <serial_sendBytes+0x9c>
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	01 c0       	rjmp	.+2      	; 0x40b2 <serial_sendBytes+0x9c>
    40b0:	82 e0       	ldi	r24, 0x02	; 2
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	1f 91       	pop	r17
    40b8:	0f 91       	pop	r16
    40ba:	ff 90       	pop	r15
    40bc:	ef 90       	pop	r14
    40be:	08 95       	ret

000040c0 <serial_getByte>:
    40c0:	00 97       	sbiw	r24, 0x00	; 0
    40c2:	d1 f0       	breq	.+52     	; 0x40f8 <serial_getByte+0x38>
    40c4:	dc 01       	movw	r26, r24
    40c6:	14 96       	adiw	r26, 0x04	; 4
    40c8:	ed 91       	ld	r30, X+
    40ca:	fc 91       	ld	r31, X
    40cc:	15 97       	sbiw	r26, 0x05	; 5
    40ce:	93 81       	ldd	r25, Z+3	; 0x03
    40d0:	82 81       	ldd	r24, Z+2	; 0x02
    40d2:	98 17       	cp	r25, r24
    40d4:	99 f0       	breq	.+38     	; 0x40fc <serial_getByte+0x3c>
    40d6:	92 81       	ldd	r25, Z+2	; 0x02
    40d8:	85 81       	ldd	r24, Z+5	; 0x05
    40da:	86 95       	lsr	r24
    40dc:	89 23       	and	r24, r25
    40de:	a0 81       	ld	r26, Z
    40e0:	b1 81       	ldd	r27, Z+1	; 0x01
    40e2:	a8 0f       	add	r26, r24
    40e4:	b1 1d       	adc	r27, r1
    40e6:	8c 91       	ld	r24, X
    40e8:	db 01       	movw	r26, r22
    40ea:	8c 93       	st	X, r24
    40ec:	9f 5f       	subi	r25, 0xFF	; 255
    40ee:	85 81       	ldd	r24, Z+5	; 0x05
    40f0:	98 23       	and	r25, r24
    40f2:	92 83       	std	Z+2, r25	; 0x02
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	08 95       	ret
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	08 95       	ret
    40fc:	83 e0       	ldi	r24, 0x03	; 3
    40fe:	08 95       	ret

00004100 <__vector_25>:
    4100:	1f 92       	push	r1
    4102:	0f 92       	push	r0
    4104:	0f b6       	in	r0, 0x3f	; 63
    4106:	0f 92       	push	r0
    4108:	11 24       	eor	r1, r1
    410a:	0b b6       	in	r0, 0x3b	; 59
    410c:	0f 92       	push	r0
    410e:	2f 93       	push	r18
    4110:	3f 93       	push	r19
    4112:	4f 93       	push	r20
    4114:	5f 93       	push	r21
    4116:	6f 93       	push	r22
    4118:	7f 93       	push	r23
    411a:	8f 93       	push	r24
    411c:	9f 93       	push	r25
    411e:	af 93       	push	r26
    4120:	bf 93       	push	r27
    4122:	cf 93       	push	r28
    4124:	df 93       	push	r29
    4126:	ef 93       	push	r30
    4128:	ff 93       	push	r31
    412a:	a0 91 fe 16 	lds	r26, 0x16FE	; 0x8016fe <_ser_handle>
    412e:	b0 91 ff 16 	lds	r27, 0x16FF	; 0x8016ff <_ser_handle+0x1>
    4132:	10 97       	sbiw	r26, 0x00	; 0
    4134:	11 f1       	breq	.+68     	; 0x417a <__vector_25+0x7a>
    4136:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    413a:	14 96       	adiw	r26, 0x04	; 4
    413c:	ed 91       	ld	r30, X+
    413e:	fc 91       	ld	r31, X
    4140:	15 97       	sbiw	r26, 0x05	; 5
    4142:	93 81       	ldd	r25, Z+3	; 0x03
    4144:	82 81       	ldd	r24, Z+2	; 0x02
    4146:	25 81       	ldd	r18, Z+5	; 0x05
    4148:	98 1b       	sub	r25, r24
    414a:	92 23       	and	r25, r18
    414c:	84 81       	ldd	r24, Z+4	; 0x04
    414e:	98 17       	cp	r25, r24
    4150:	61 f0       	breq	.+24     	; 0x416a <__vector_25+0x6a>
    4152:	83 81       	ldd	r24, Z+3	; 0x03
    4154:	26 95       	lsr	r18
    4156:	28 23       	and	r18, r24
    4158:	c0 81       	ld	r28, Z
    415a:	d1 81       	ldd	r29, Z+1	; 0x01
    415c:	c2 0f       	add	r28, r18
    415e:	d1 1d       	adc	r29, r1
    4160:	68 83       	st	Y, r22
    4162:	8f 5f       	subi	r24, 0xFF	; 255
    4164:	95 81       	ldd	r25, Z+5	; 0x05
    4166:	89 23       	and	r24, r25
    4168:	83 83       	std	Z+3, r24	; 0x03
    416a:	16 96       	adiw	r26, 0x06	; 6
    416c:	ed 91       	ld	r30, X+
    416e:	fc 91       	ld	r31, X
    4170:	17 97       	sbiw	r26, 0x07	; 7
    4172:	30 97       	sbiw	r30, 0x00	; 0
    4174:	11 f0       	breq	.+4      	; 0x417a <__vector_25+0x7a>
    4176:	cd 01       	movw	r24, r26
    4178:	19 95       	eicall
    417a:	ff 91       	pop	r31
    417c:	ef 91       	pop	r30
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	bf 91       	pop	r27
    4184:	af 91       	pop	r26
    4186:	9f 91       	pop	r25
    4188:	8f 91       	pop	r24
    418a:	7f 91       	pop	r23
    418c:	6f 91       	pop	r22
    418e:	5f 91       	pop	r21
    4190:	4f 91       	pop	r20
    4192:	3f 91       	pop	r19
    4194:	2f 91       	pop	r18
    4196:	0f 90       	pop	r0
    4198:	0b be       	out	0x3b, r0	; 59
    419a:	0f 90       	pop	r0
    419c:	0f be       	out	0x3f, r0	; 63
    419e:	0f 90       	pop	r0
    41a0:	1f 90       	pop	r1
    41a2:	18 95       	reti

000041a4 <__vector_26>:
    41a4:	1f 92       	push	r1
    41a6:	0f 92       	push	r0
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	0f 92       	push	r0
    41ac:	11 24       	eor	r1, r1
    41ae:	0b b6       	in	r0, 0x3b	; 59
    41b0:	0f 92       	push	r0
    41b2:	2f 93       	push	r18
    41b4:	8f 93       	push	r24
    41b6:	9f 93       	push	r25
    41b8:	af 93       	push	r26
    41ba:	bf 93       	push	r27
    41bc:	ef 93       	push	r30
    41be:	ff 93       	push	r31
    41c0:	e0 91 fe 16 	lds	r30, 0x16FE	; 0x8016fe <_ser_handle>
    41c4:	f0 91 ff 16 	lds	r31, 0x16FF	; 0x8016ff <_ser_handle+0x1>
    41c8:	30 97       	sbiw	r30, 0x00	; 0
    41ca:	b9 f0       	breq	.+46     	; 0x41fa <__vector_26+0x56>
    41cc:	02 80       	ldd	r0, Z+2	; 0x02
    41ce:	f3 81       	ldd	r31, Z+3	; 0x03
    41d0:	e0 2d       	mov	r30, r0
    41d2:	93 81       	ldd	r25, Z+3	; 0x03
    41d4:	82 81       	ldd	r24, Z+2	; 0x02
    41d6:	98 17       	cp	r25, r24
    41d8:	b1 f0       	breq	.+44     	; 0x4206 <__vector_26+0x62>
    41da:	92 81       	ldd	r25, Z+2	; 0x02
    41dc:	85 81       	ldd	r24, Z+5	; 0x05
    41de:	28 2f       	mov	r18, r24
    41e0:	26 95       	lsr	r18
    41e2:	29 23       	and	r18, r25
    41e4:	a0 81       	ld	r26, Z
    41e6:	b1 81       	ldd	r27, Z+1	; 0x01
    41e8:	a2 0f       	add	r26, r18
    41ea:	b1 1d       	adc	r27, r1
    41ec:	2c 91       	ld	r18, X
    41ee:	9f 5f       	subi	r25, 0xFF	; 255
    41f0:	89 23       	and	r24, r25
    41f2:	82 83       	std	Z+2, r24	; 0x02
    41f4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    41f8:	0b c0       	rjmp	.+22     	; 0x4210 <__vector_26+0x6c>
    41fa:	e1 ec       	ldi	r30, 0xC1	; 193
    41fc:	f0 e0       	ldi	r31, 0x00	; 0
    41fe:	80 81       	ld	r24, Z
    4200:	8f 7d       	andi	r24, 0xDF	; 223
    4202:	80 83       	st	Z, r24
    4204:	05 c0       	rjmp	.+10     	; 0x4210 <__vector_26+0x6c>
    4206:	e1 ec       	ldi	r30, 0xC1	; 193
    4208:	f0 e0       	ldi	r31, 0x00	; 0
    420a:	80 81       	ld	r24, Z
    420c:	8f 7d       	andi	r24, 0xDF	; 223
    420e:	80 83       	st	Z, r24
    4210:	ff 91       	pop	r31
    4212:	ef 91       	pop	r30
    4214:	bf 91       	pop	r27
    4216:	af 91       	pop	r26
    4218:	9f 91       	pop	r25
    421a:	8f 91       	pop	r24
    421c:	2f 91       	pop	r18
    421e:	0f 90       	pop	r0
    4220:	0b be       	out	0x3b, r0	; 59
    4222:	0f 90       	pop	r0
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	0f 90       	pop	r0
    4228:	1f 90       	pop	r1
    422a:	18 95       	reti

0000422c <__vector_36>:
    422c:	1f 92       	push	r1
    422e:	0f 92       	push	r0
    4230:	0f b6       	in	r0, 0x3f	; 63
    4232:	0f 92       	push	r0
    4234:	11 24       	eor	r1, r1
    4236:	0b b6       	in	r0, 0x3b	; 59
    4238:	0f 92       	push	r0
    423a:	2f 93       	push	r18
    423c:	3f 93       	push	r19
    423e:	4f 93       	push	r20
    4240:	5f 93       	push	r21
    4242:	6f 93       	push	r22
    4244:	7f 93       	push	r23
    4246:	8f 93       	push	r24
    4248:	9f 93       	push	r25
    424a:	af 93       	push	r26
    424c:	bf 93       	push	r27
    424e:	cf 93       	push	r28
    4250:	df 93       	push	r29
    4252:	ef 93       	push	r30
    4254:	ff 93       	push	r31
    4256:	a0 91 00 17 	lds	r26, 0x1700	; 0x801700 <_ser_handle+0x2>
    425a:	b0 91 01 17 	lds	r27, 0x1701	; 0x801701 <_ser_handle+0x3>
    425e:	10 97       	sbiw	r26, 0x00	; 0
    4260:	11 f1       	breq	.+68     	; 0x42a6 <__vector_36+0x7a>
    4262:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4266:	14 96       	adiw	r26, 0x04	; 4
    4268:	ed 91       	ld	r30, X+
    426a:	fc 91       	ld	r31, X
    426c:	15 97       	sbiw	r26, 0x05	; 5
    426e:	93 81       	ldd	r25, Z+3	; 0x03
    4270:	82 81       	ldd	r24, Z+2	; 0x02
    4272:	25 81       	ldd	r18, Z+5	; 0x05
    4274:	98 1b       	sub	r25, r24
    4276:	92 23       	and	r25, r18
    4278:	84 81       	ldd	r24, Z+4	; 0x04
    427a:	98 17       	cp	r25, r24
    427c:	61 f0       	breq	.+24     	; 0x4296 <__vector_36+0x6a>
    427e:	83 81       	ldd	r24, Z+3	; 0x03
    4280:	26 95       	lsr	r18
    4282:	28 23       	and	r18, r24
    4284:	c0 81       	ld	r28, Z
    4286:	d1 81       	ldd	r29, Z+1	; 0x01
    4288:	c2 0f       	add	r28, r18
    428a:	d1 1d       	adc	r29, r1
    428c:	68 83       	st	Y, r22
    428e:	8f 5f       	subi	r24, 0xFF	; 255
    4290:	95 81       	ldd	r25, Z+5	; 0x05
    4292:	89 23       	and	r24, r25
    4294:	83 83       	std	Z+3, r24	; 0x03
    4296:	16 96       	adiw	r26, 0x06	; 6
    4298:	ed 91       	ld	r30, X+
    429a:	fc 91       	ld	r31, X
    429c:	17 97       	sbiw	r26, 0x07	; 7
    429e:	30 97       	sbiw	r30, 0x00	; 0
    42a0:	11 f0       	breq	.+4      	; 0x42a6 <__vector_36+0x7a>
    42a2:	cd 01       	movw	r24, r26
    42a4:	19 95       	eicall
    42a6:	ff 91       	pop	r31
    42a8:	ef 91       	pop	r30
    42aa:	df 91       	pop	r29
    42ac:	cf 91       	pop	r28
    42ae:	bf 91       	pop	r27
    42b0:	af 91       	pop	r26
    42b2:	9f 91       	pop	r25
    42b4:	8f 91       	pop	r24
    42b6:	7f 91       	pop	r23
    42b8:	6f 91       	pop	r22
    42ba:	5f 91       	pop	r21
    42bc:	4f 91       	pop	r20
    42be:	3f 91       	pop	r19
    42c0:	2f 91       	pop	r18
    42c2:	0f 90       	pop	r0
    42c4:	0b be       	out	0x3b, r0	; 59
    42c6:	0f 90       	pop	r0
    42c8:	0f be       	out	0x3f, r0	; 63
    42ca:	0f 90       	pop	r0
    42cc:	1f 90       	pop	r1
    42ce:	18 95       	reti

000042d0 <__vector_37>:
    42d0:	1f 92       	push	r1
    42d2:	0f 92       	push	r0
    42d4:	0f b6       	in	r0, 0x3f	; 63
    42d6:	0f 92       	push	r0
    42d8:	11 24       	eor	r1, r1
    42da:	0b b6       	in	r0, 0x3b	; 59
    42dc:	0f 92       	push	r0
    42de:	2f 93       	push	r18
    42e0:	8f 93       	push	r24
    42e2:	9f 93       	push	r25
    42e4:	af 93       	push	r26
    42e6:	bf 93       	push	r27
    42e8:	ef 93       	push	r30
    42ea:	ff 93       	push	r31
    42ec:	e0 91 00 17 	lds	r30, 0x1700	; 0x801700 <_ser_handle+0x2>
    42f0:	f0 91 01 17 	lds	r31, 0x1701	; 0x801701 <_ser_handle+0x3>
    42f4:	30 97       	sbiw	r30, 0x00	; 0
    42f6:	b9 f0       	breq	.+46     	; 0x4326 <__vector_37+0x56>
    42f8:	02 80       	ldd	r0, Z+2	; 0x02
    42fa:	f3 81       	ldd	r31, Z+3	; 0x03
    42fc:	e0 2d       	mov	r30, r0
    42fe:	93 81       	ldd	r25, Z+3	; 0x03
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	98 17       	cp	r25, r24
    4304:	b1 f0       	breq	.+44     	; 0x4332 <__vector_37+0x62>
    4306:	92 81       	ldd	r25, Z+2	; 0x02
    4308:	85 81       	ldd	r24, Z+5	; 0x05
    430a:	28 2f       	mov	r18, r24
    430c:	26 95       	lsr	r18
    430e:	29 23       	and	r18, r25
    4310:	a0 81       	ld	r26, Z
    4312:	b1 81       	ldd	r27, Z+1	; 0x01
    4314:	a2 0f       	add	r26, r18
    4316:	b1 1d       	adc	r27, r1
    4318:	2c 91       	ld	r18, X
    431a:	9f 5f       	subi	r25, 0xFF	; 255
    431c:	89 23       	and	r24, r25
    431e:	82 83       	std	Z+2, r24	; 0x02
    4320:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4324:	0b c0       	rjmp	.+22     	; 0x433c <__vector_37+0x6c>
    4326:	e9 ec       	ldi	r30, 0xC9	; 201
    4328:	f0 e0       	ldi	r31, 0x00	; 0
    432a:	80 81       	ld	r24, Z
    432c:	8f 7d       	andi	r24, 0xDF	; 223
    432e:	80 83       	st	Z, r24
    4330:	05 c0       	rjmp	.+10     	; 0x433c <__vector_37+0x6c>
    4332:	e9 ec       	ldi	r30, 0xC9	; 201
    4334:	f0 e0       	ldi	r31, 0x00	; 0
    4336:	80 81       	ld	r24, Z
    4338:	8f 7d       	andi	r24, 0xDF	; 223
    433a:	80 83       	st	Z, r24
    433c:	ff 91       	pop	r31
    433e:	ef 91       	pop	r30
    4340:	bf 91       	pop	r27
    4342:	af 91       	pop	r26
    4344:	9f 91       	pop	r25
    4346:	8f 91       	pop	r24
    4348:	2f 91       	pop	r18
    434a:	0f 90       	pop	r0
    434c:	0b be       	out	0x3b, r0	; 59
    434e:	0f 90       	pop	r0
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	0f 90       	pop	r0
    4354:	1f 90       	pop	r1
    4356:	18 95       	reti

00004358 <__vector_51>:
    4358:	1f 92       	push	r1
    435a:	0f 92       	push	r0
    435c:	0f b6       	in	r0, 0x3f	; 63
    435e:	0f 92       	push	r0
    4360:	11 24       	eor	r1, r1
    4362:	0b b6       	in	r0, 0x3b	; 59
    4364:	0f 92       	push	r0
    4366:	2f 93       	push	r18
    4368:	3f 93       	push	r19
    436a:	4f 93       	push	r20
    436c:	5f 93       	push	r21
    436e:	6f 93       	push	r22
    4370:	7f 93       	push	r23
    4372:	8f 93       	push	r24
    4374:	9f 93       	push	r25
    4376:	af 93       	push	r26
    4378:	bf 93       	push	r27
    437a:	cf 93       	push	r28
    437c:	df 93       	push	r29
    437e:	ef 93       	push	r30
    4380:	ff 93       	push	r31
    4382:	a0 91 02 17 	lds	r26, 0x1702	; 0x801702 <_ser_handle+0x4>
    4386:	b0 91 03 17 	lds	r27, 0x1703	; 0x801703 <_ser_handle+0x5>
    438a:	10 97       	sbiw	r26, 0x00	; 0
    438c:	11 f1       	breq	.+68     	; 0x43d2 <__vector_51+0x7a>
    438e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4392:	14 96       	adiw	r26, 0x04	; 4
    4394:	ed 91       	ld	r30, X+
    4396:	fc 91       	ld	r31, X
    4398:	15 97       	sbiw	r26, 0x05	; 5
    439a:	93 81       	ldd	r25, Z+3	; 0x03
    439c:	82 81       	ldd	r24, Z+2	; 0x02
    439e:	25 81       	ldd	r18, Z+5	; 0x05
    43a0:	98 1b       	sub	r25, r24
    43a2:	92 23       	and	r25, r18
    43a4:	84 81       	ldd	r24, Z+4	; 0x04
    43a6:	98 17       	cp	r25, r24
    43a8:	61 f0       	breq	.+24     	; 0x43c2 <__vector_51+0x6a>
    43aa:	83 81       	ldd	r24, Z+3	; 0x03
    43ac:	26 95       	lsr	r18
    43ae:	28 23       	and	r18, r24
    43b0:	c0 81       	ld	r28, Z
    43b2:	d1 81       	ldd	r29, Z+1	; 0x01
    43b4:	c2 0f       	add	r28, r18
    43b6:	d1 1d       	adc	r29, r1
    43b8:	68 83       	st	Y, r22
    43ba:	8f 5f       	subi	r24, 0xFF	; 255
    43bc:	95 81       	ldd	r25, Z+5	; 0x05
    43be:	89 23       	and	r24, r25
    43c0:	83 83       	std	Z+3, r24	; 0x03
    43c2:	16 96       	adiw	r26, 0x06	; 6
    43c4:	ed 91       	ld	r30, X+
    43c6:	fc 91       	ld	r31, X
    43c8:	17 97       	sbiw	r26, 0x07	; 7
    43ca:	30 97       	sbiw	r30, 0x00	; 0
    43cc:	11 f0       	breq	.+4      	; 0x43d2 <__vector_51+0x7a>
    43ce:	cd 01       	movw	r24, r26
    43d0:	19 95       	eicall
    43d2:	ff 91       	pop	r31
    43d4:	ef 91       	pop	r30
    43d6:	df 91       	pop	r29
    43d8:	cf 91       	pop	r28
    43da:	bf 91       	pop	r27
    43dc:	af 91       	pop	r26
    43de:	9f 91       	pop	r25
    43e0:	8f 91       	pop	r24
    43e2:	7f 91       	pop	r23
    43e4:	6f 91       	pop	r22
    43e6:	5f 91       	pop	r21
    43e8:	4f 91       	pop	r20
    43ea:	3f 91       	pop	r19
    43ec:	2f 91       	pop	r18
    43ee:	0f 90       	pop	r0
    43f0:	0b be       	out	0x3b, r0	; 59
    43f2:	0f 90       	pop	r0
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	0f 90       	pop	r0
    43f8:	1f 90       	pop	r1
    43fa:	18 95       	reti

000043fc <__vector_52>:
    43fc:	1f 92       	push	r1
    43fe:	0f 92       	push	r0
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	0f 92       	push	r0
    4404:	11 24       	eor	r1, r1
    4406:	0b b6       	in	r0, 0x3b	; 59
    4408:	0f 92       	push	r0
    440a:	2f 93       	push	r18
    440c:	8f 93       	push	r24
    440e:	9f 93       	push	r25
    4410:	af 93       	push	r26
    4412:	bf 93       	push	r27
    4414:	ef 93       	push	r30
    4416:	ff 93       	push	r31
    4418:	e0 91 02 17 	lds	r30, 0x1702	; 0x801702 <_ser_handle+0x4>
    441c:	f0 91 03 17 	lds	r31, 0x1703	; 0x801703 <_ser_handle+0x5>
    4420:	30 97       	sbiw	r30, 0x00	; 0
    4422:	b9 f0       	breq	.+46     	; 0x4452 <__vector_52+0x56>
    4424:	02 80       	ldd	r0, Z+2	; 0x02
    4426:	f3 81       	ldd	r31, Z+3	; 0x03
    4428:	e0 2d       	mov	r30, r0
    442a:	93 81       	ldd	r25, Z+3	; 0x03
    442c:	82 81       	ldd	r24, Z+2	; 0x02
    442e:	98 17       	cp	r25, r24
    4430:	b1 f0       	breq	.+44     	; 0x445e <__vector_52+0x62>
    4432:	92 81       	ldd	r25, Z+2	; 0x02
    4434:	85 81       	ldd	r24, Z+5	; 0x05
    4436:	28 2f       	mov	r18, r24
    4438:	26 95       	lsr	r18
    443a:	29 23       	and	r18, r25
    443c:	a0 81       	ld	r26, Z
    443e:	b1 81       	ldd	r27, Z+1	; 0x01
    4440:	a2 0f       	add	r26, r18
    4442:	b1 1d       	adc	r27, r1
    4444:	2c 91       	ld	r18, X
    4446:	9f 5f       	subi	r25, 0xFF	; 255
    4448:	89 23       	and	r24, r25
    444a:	82 83       	std	Z+2, r24	; 0x02
    444c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4450:	0b c0       	rjmp	.+22     	; 0x4468 <__vector_52+0x6c>
    4452:	e1 ed       	ldi	r30, 0xD1	; 209
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	80 81       	ld	r24, Z
    4458:	8f 7d       	andi	r24, 0xDF	; 223
    445a:	80 83       	st	Z, r24
    445c:	05 c0       	rjmp	.+10     	; 0x4468 <__vector_52+0x6c>
    445e:	e1 ed       	ldi	r30, 0xD1	; 209
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	80 81       	ld	r24, Z
    4464:	8f 7d       	andi	r24, 0xDF	; 223
    4466:	80 83       	st	Z, r24
    4468:	ff 91       	pop	r31
    446a:	ef 91       	pop	r30
    446c:	bf 91       	pop	r27
    446e:	af 91       	pop	r26
    4470:	9f 91       	pop	r25
    4472:	8f 91       	pop	r24
    4474:	2f 91       	pop	r18
    4476:	0f 90       	pop	r0
    4478:	0b be       	out	0x3b, r0	; 59
    447a:	0f 90       	pop	r0
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	0f 90       	pop	r0
    4480:	1f 90       	pop	r1
    4482:	18 95       	reti

00004484 <__vector_54>:
    4484:	1f 92       	push	r1
    4486:	0f 92       	push	r0
    4488:	0f b6       	in	r0, 0x3f	; 63
    448a:	0f 92       	push	r0
    448c:	11 24       	eor	r1, r1
    448e:	0b b6       	in	r0, 0x3b	; 59
    4490:	0f 92       	push	r0
    4492:	2f 93       	push	r18
    4494:	3f 93       	push	r19
    4496:	4f 93       	push	r20
    4498:	5f 93       	push	r21
    449a:	6f 93       	push	r22
    449c:	7f 93       	push	r23
    449e:	8f 93       	push	r24
    44a0:	9f 93       	push	r25
    44a2:	af 93       	push	r26
    44a4:	bf 93       	push	r27
    44a6:	cf 93       	push	r28
    44a8:	df 93       	push	r29
    44aa:	ef 93       	push	r30
    44ac:	ff 93       	push	r31
    44ae:	a0 91 04 17 	lds	r26, 0x1704	; 0x801704 <_ser_handle+0x6>
    44b2:	b0 91 05 17 	lds	r27, 0x1705	; 0x801705 <_ser_handle+0x7>
    44b6:	10 97       	sbiw	r26, 0x00	; 0
    44b8:	11 f1       	breq	.+68     	; 0x44fe <__vector_54+0x7a>
    44ba:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    44be:	14 96       	adiw	r26, 0x04	; 4
    44c0:	ed 91       	ld	r30, X+
    44c2:	fc 91       	ld	r31, X
    44c4:	15 97       	sbiw	r26, 0x05	; 5
    44c6:	93 81       	ldd	r25, Z+3	; 0x03
    44c8:	82 81       	ldd	r24, Z+2	; 0x02
    44ca:	25 81       	ldd	r18, Z+5	; 0x05
    44cc:	98 1b       	sub	r25, r24
    44ce:	92 23       	and	r25, r18
    44d0:	84 81       	ldd	r24, Z+4	; 0x04
    44d2:	98 17       	cp	r25, r24
    44d4:	61 f0       	breq	.+24     	; 0x44ee <__vector_54+0x6a>
    44d6:	83 81       	ldd	r24, Z+3	; 0x03
    44d8:	26 95       	lsr	r18
    44da:	28 23       	and	r18, r24
    44dc:	c0 81       	ld	r28, Z
    44de:	d1 81       	ldd	r29, Z+1	; 0x01
    44e0:	c2 0f       	add	r28, r18
    44e2:	d1 1d       	adc	r29, r1
    44e4:	68 83       	st	Y, r22
    44e6:	8f 5f       	subi	r24, 0xFF	; 255
    44e8:	95 81       	ldd	r25, Z+5	; 0x05
    44ea:	89 23       	and	r24, r25
    44ec:	83 83       	std	Z+3, r24	; 0x03
    44ee:	16 96       	adiw	r26, 0x06	; 6
    44f0:	ed 91       	ld	r30, X+
    44f2:	fc 91       	ld	r31, X
    44f4:	17 97       	sbiw	r26, 0x07	; 7
    44f6:	30 97       	sbiw	r30, 0x00	; 0
    44f8:	11 f0       	breq	.+4      	; 0x44fe <__vector_54+0x7a>
    44fa:	cd 01       	movw	r24, r26
    44fc:	19 95       	eicall
    44fe:	ff 91       	pop	r31
    4500:	ef 91       	pop	r30
    4502:	df 91       	pop	r29
    4504:	cf 91       	pop	r28
    4506:	bf 91       	pop	r27
    4508:	af 91       	pop	r26
    450a:	9f 91       	pop	r25
    450c:	8f 91       	pop	r24
    450e:	7f 91       	pop	r23
    4510:	6f 91       	pop	r22
    4512:	5f 91       	pop	r21
    4514:	4f 91       	pop	r20
    4516:	3f 91       	pop	r19
    4518:	2f 91       	pop	r18
    451a:	0f 90       	pop	r0
    451c:	0b be       	out	0x3b, r0	; 59
    451e:	0f 90       	pop	r0
    4520:	0f be       	out	0x3f, r0	; 63
    4522:	0f 90       	pop	r0
    4524:	1f 90       	pop	r1
    4526:	18 95       	reti

00004528 <__vector_55>:
    4528:	1f 92       	push	r1
    452a:	0f 92       	push	r0
    452c:	0f b6       	in	r0, 0x3f	; 63
    452e:	0f 92       	push	r0
    4530:	11 24       	eor	r1, r1
    4532:	0b b6       	in	r0, 0x3b	; 59
    4534:	0f 92       	push	r0
    4536:	2f 93       	push	r18
    4538:	8f 93       	push	r24
    453a:	9f 93       	push	r25
    453c:	af 93       	push	r26
    453e:	bf 93       	push	r27
    4540:	ef 93       	push	r30
    4542:	ff 93       	push	r31
    4544:	e0 91 04 17 	lds	r30, 0x1704	; 0x801704 <_ser_handle+0x6>
    4548:	f0 91 05 17 	lds	r31, 0x1705	; 0x801705 <_ser_handle+0x7>
    454c:	30 97       	sbiw	r30, 0x00	; 0
    454e:	b9 f0       	breq	.+46     	; 0x457e <__vector_55+0x56>
    4550:	02 80       	ldd	r0, Z+2	; 0x02
    4552:	f3 81       	ldd	r31, Z+3	; 0x03
    4554:	e0 2d       	mov	r30, r0
    4556:	93 81       	ldd	r25, Z+3	; 0x03
    4558:	82 81       	ldd	r24, Z+2	; 0x02
    455a:	98 17       	cp	r25, r24
    455c:	b1 f0       	breq	.+44     	; 0x458a <__vector_55+0x62>
    455e:	92 81       	ldd	r25, Z+2	; 0x02
    4560:	85 81       	ldd	r24, Z+5	; 0x05
    4562:	28 2f       	mov	r18, r24
    4564:	26 95       	lsr	r18
    4566:	29 23       	and	r18, r25
    4568:	a0 81       	ld	r26, Z
    456a:	b1 81       	ldd	r27, Z+1	; 0x01
    456c:	a2 0f       	add	r26, r18
    456e:	b1 1d       	adc	r27, r1
    4570:	2c 91       	ld	r18, X
    4572:	9f 5f       	subi	r25, 0xFF	; 255
    4574:	89 23       	and	r24, r25
    4576:	82 83       	std	Z+2, r24	; 0x02
    4578:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    457c:	0b c0       	rjmp	.+22     	; 0x4594 <__vector_55+0x6c>
    457e:	e1 e3       	ldi	r30, 0x31	; 49
    4580:	f1 e0       	ldi	r31, 0x01	; 1
    4582:	80 81       	ld	r24, Z
    4584:	8f 7d       	andi	r24, 0xDF	; 223
    4586:	80 83       	st	Z, r24
    4588:	05 c0       	rjmp	.+10     	; 0x4594 <__vector_55+0x6c>
    458a:	e1 e3       	ldi	r30, 0x31	; 49
    458c:	f1 e0       	ldi	r31, 0x01	; 1
    458e:	80 81       	ld	r24, Z
    4590:	8f 7d       	andi	r24, 0xDF	; 223
    4592:	80 83       	st	Z, r24
    4594:	ff 91       	pop	r31
    4596:	ef 91       	pop	r30
    4598:	bf 91       	pop	r27
    459a:	af 91       	pop	r26
    459c:	9f 91       	pop	r25
    459e:	8f 91       	pop	r24
    45a0:	2f 91       	pop	r18
    45a2:	0f 90       	pop	r0
    45a4:	0b be       	out	0x3b, r0	; 59
    45a6:	0f 90       	pop	r0
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	0f 90       	pop	r0
    45ac:	1f 90       	pop	r1
    45ae:	18 95       	reti

000045b0 <usart_getchar>:
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	1f 92       	push	r1
    45b6:	cd b7       	in	r28, 0x3d	; 61
    45b8:	de b7       	in	r29, 0x3e	; 62
    45ba:	be 01       	movw	r22, r28
    45bc:	6f 5f       	subi	r22, 0xFF	; 255
    45be:	7f 4f       	sbci	r23, 0xFF	; 255
    45c0:	80 91 06 17 	lds	r24, 0x1706	; 0x801706 <_com_serial_instance>
    45c4:	90 91 07 17 	lds	r25, 0x1707	; 0x801707 <_com_serial_instance+0x1>
    45c8:	7b dd       	rcall	.-1290   	; 0x40c0 <serial_getByte>
    45ca:	81 11       	cpse	r24, r1
    45cc:	f6 cf       	rjmp	.-20     	; 0x45ba <usart_getchar+0xa>
    45ce:	89 81       	ldd	r24, Y+1	; 0x01
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	0f 90       	pop	r0
    45d4:	df 91       	pop	r29
    45d6:	cf 91       	pop	r28
    45d8:	08 95       	ret

000045da <usart_putchar>:
    45da:	68 2f       	mov	r22, r24
    45dc:	80 91 06 17 	lds	r24, 0x1706	; 0x801706 <_com_serial_instance>
    45e0:	90 91 07 17 	lds	r25, 0x1707	; 0x801707 <_com_serial_instance+0x1>
    45e4:	ed dc       	rcall	.-1574   	; 0x3fc0 <serial_sendByte>
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	08 95       	ret

000045ec <stdio_initialise>:
    45ec:	8f 92       	push	r8
    45ee:	9f 92       	push	r9
    45f0:	af 92       	push	r10
    45f2:	cf 92       	push	r12
    45f4:	ef 92       	push	r14
    45f6:	0f 93       	push	r16
    45f8:	81 2c       	mov	r8, r1
    45fa:	91 2c       	mov	r9, r1
    45fc:	68 94       	set
    45fe:	aa 24       	eor	r10, r10
    4600:	a7 f8       	bld	r10, 7
    4602:	68 94       	set
    4604:	cc 24       	eor	r12, r12
    4606:	c7 f8       	bld	r12, 7
    4608:	e1 2c       	mov	r14, r1
    460a:	00 e0       	ldi	r16, 0x00	; 0
    460c:	23 e0       	ldi	r18, 0x03	; 3
    460e:	40 e0       	ldi	r20, 0x00	; 0
    4610:	51 ee       	ldi	r21, 0xE1	; 225
    4612:	60 e0       	ldi	r22, 0x00	; 0
    4614:	70 e0       	ldi	r23, 0x00	; 0
    4616:	2e dc       	rcall	.-1956   	; 0x3e74 <serial_create>
    4618:	90 93 07 17 	sts	0x1707, r25	; 0x801707 <_com_serial_instance+0x1>
    461c:	80 93 06 17 	sts	0x1706, r24	; 0x801706 <_com_serial_instance>
    4620:	e5 e3       	ldi	r30, 0x35	; 53
    4622:	f7 e1       	ldi	r31, 0x17	; 23
    4624:	83 e1       	ldi	r24, 0x13	; 19
    4626:	92 e0       	ldi	r25, 0x02	; 2
    4628:	91 83       	std	Z+1, r25	; 0x01
    462a:	80 83       	st	Z, r24
    462c:	93 83       	std	Z+3, r25	; 0x03
    462e:	82 83       	std	Z+2, r24	; 0x02
    4630:	0f 91       	pop	r16
    4632:	ef 90       	pop	r14
    4634:	cf 90       	pop	r12
    4636:	af 90       	pop	r10
    4638:	9f 90       	pop	r9
    463a:	8f 90       	pop	r8
    463c:	08 95       	ret

0000463e <_turn_off>:
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	fc 01       	movw	r30, r24
    4642:	ee 0f       	add	r30, r30
    4644:	ff 1f       	adc	r31, r31
    4646:	e8 0f       	add	r30, r24
    4648:	f9 1f       	adc	r31, r25
    464a:	ee 0f       	add	r30, r30
    464c:	ff 1f       	adc	r31, r31
    464e:	e8 5f       	subi	r30, 0xF8	; 248
    4650:	f8 4e       	sbci	r31, 0xE8	; 232
    4652:	23 81       	ldd	r18, Z+3	; 0x03
    4654:	21 11       	cpse	r18, r1
    4656:	1f c0       	rjmp	.+62     	; 0x4696 <_turn_off+0x58>
    4658:	9c 01       	movw	r18, r24
    465a:	22 0f       	add	r18, r18
    465c:	33 1f       	adc	r19, r19
    465e:	f9 01       	movw	r30, r18
    4660:	e8 0f       	add	r30, r24
    4662:	f9 1f       	adc	r31, r25
    4664:	ee 0f       	add	r30, r30
    4666:	ff 1f       	adc	r31, r31
    4668:	e8 5f       	subi	r30, 0xF8	; 248
    466a:	f8 4e       	sbci	r31, 0xE8	; 232
    466c:	a0 81       	ld	r26, Z
    466e:	b1 81       	ldd	r27, Z+1	; 0x01
    4670:	4c 91       	ld	r20, X
    4672:	f9 01       	movw	r30, r18
    4674:	e8 0f       	add	r30, r24
    4676:	f9 1f       	adc	r31, r25
    4678:	ee 0f       	add	r30, r30
    467a:	ff 1f       	adc	r31, r31
    467c:	e8 5f       	subi	r30, 0xF8	; 248
    467e:	f8 4e       	sbci	r31, 0xE8	; 232
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	02 80       	ldd	r0, Z+2	; 0x02
    4686:	02 c0       	rjmp	.+4      	; 0x468c <_turn_off+0x4e>
    4688:	88 0f       	add	r24, r24
    468a:	99 1f       	adc	r25, r25
    468c:	0a 94       	dec	r0
    468e:	e2 f7       	brpl	.-8      	; 0x4688 <_turn_off+0x4a>
    4690:	84 2b       	or	r24, r20
    4692:	8c 93       	st	X, r24
    4694:	08 95       	ret
    4696:	fc 01       	movw	r30, r24
    4698:	ee 0f       	add	r30, r30
    469a:	ff 1f       	adc	r31, r31
    469c:	df 01       	movw	r26, r30
    469e:	a8 0f       	add	r26, r24
    46a0:	b9 1f       	adc	r27, r25
    46a2:	aa 0f       	add	r26, r26
    46a4:	bb 1f       	adc	r27, r27
    46a6:	a8 5f       	subi	r26, 0xF8	; 248
    46a8:	b8 4e       	sbci	r27, 0xE8	; 232
    46aa:	0d 90       	ld	r0, X+
    46ac:	bc 91       	ld	r27, X
    46ae:	a0 2d       	mov	r26, r0
    46b0:	2c 91       	ld	r18, X
    46b2:	e8 0f       	add	r30, r24
    46b4:	f9 1f       	adc	r31, r25
    46b6:	ee 0f       	add	r30, r30
    46b8:	ff 1f       	adc	r31, r31
    46ba:	e8 5f       	subi	r30, 0xF8	; 248
    46bc:	f8 4e       	sbci	r31, 0xE8	; 232
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	02 80       	ldd	r0, Z+2	; 0x02
    46c4:	02 c0       	rjmp	.+4      	; 0x46ca <_turn_off+0x8c>
    46c6:	88 0f       	add	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	0a 94       	dec	r0
    46cc:	e2 f7       	brpl	.-8      	; 0x46c6 <_turn_off+0x88>
    46ce:	80 95       	com	r24
    46d0:	82 23       	and	r24, r18
    46d2:	8c 93       	st	X, r24
    46d4:	08 95       	ret

000046d6 <_turn_on>:
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	fc 01       	movw	r30, r24
    46da:	ee 0f       	add	r30, r30
    46dc:	ff 1f       	adc	r31, r31
    46de:	e8 0f       	add	r30, r24
    46e0:	f9 1f       	adc	r31, r25
    46e2:	ee 0f       	add	r30, r30
    46e4:	ff 1f       	adc	r31, r31
    46e6:	e8 5f       	subi	r30, 0xF8	; 248
    46e8:	f8 4e       	sbci	r31, 0xE8	; 232
    46ea:	23 81       	ldd	r18, Z+3	; 0x03
    46ec:	21 11       	cpse	r18, r1
    46ee:	20 c0       	rjmp	.+64     	; 0x4730 <_turn_on+0x5a>
    46f0:	9c 01       	movw	r18, r24
    46f2:	22 0f       	add	r18, r18
    46f4:	33 1f       	adc	r19, r19
    46f6:	f9 01       	movw	r30, r18
    46f8:	e8 0f       	add	r30, r24
    46fa:	f9 1f       	adc	r31, r25
    46fc:	ee 0f       	add	r30, r30
    46fe:	ff 1f       	adc	r31, r31
    4700:	e8 5f       	subi	r30, 0xF8	; 248
    4702:	f8 4e       	sbci	r31, 0xE8	; 232
    4704:	a0 81       	ld	r26, Z
    4706:	b1 81       	ldd	r27, Z+1	; 0x01
    4708:	4c 91       	ld	r20, X
    470a:	f9 01       	movw	r30, r18
    470c:	e8 0f       	add	r30, r24
    470e:	f9 1f       	adc	r31, r25
    4710:	ee 0f       	add	r30, r30
    4712:	ff 1f       	adc	r31, r31
    4714:	e8 5f       	subi	r30, 0xF8	; 248
    4716:	f8 4e       	sbci	r31, 0xE8	; 232
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	02 80       	ldd	r0, Z+2	; 0x02
    471e:	02 c0       	rjmp	.+4      	; 0x4724 <_turn_on+0x4e>
    4720:	88 0f       	add	r24, r24
    4722:	99 1f       	adc	r25, r25
    4724:	0a 94       	dec	r0
    4726:	e2 f7       	brpl	.-8      	; 0x4720 <_turn_on+0x4a>
    4728:	80 95       	com	r24
    472a:	84 23       	and	r24, r20
    472c:	8c 93       	st	X, r24
    472e:	08 95       	ret
    4730:	fc 01       	movw	r30, r24
    4732:	ee 0f       	add	r30, r30
    4734:	ff 1f       	adc	r31, r31
    4736:	df 01       	movw	r26, r30
    4738:	a8 0f       	add	r26, r24
    473a:	b9 1f       	adc	r27, r25
    473c:	aa 0f       	add	r26, r26
    473e:	bb 1f       	adc	r27, r27
    4740:	a8 5f       	subi	r26, 0xF8	; 248
    4742:	b8 4e       	sbci	r27, 0xE8	; 232
    4744:	0d 90       	ld	r0, X+
    4746:	bc 91       	ld	r27, X
    4748:	a0 2d       	mov	r26, r0
    474a:	2c 91       	ld	r18, X
    474c:	e8 0f       	add	r30, r24
    474e:	f9 1f       	adc	r31, r25
    4750:	ee 0f       	add	r30, r30
    4752:	ff 1f       	adc	r31, r31
    4754:	e8 5f       	subi	r30, 0xF8	; 248
    4756:	f8 4e       	sbci	r31, 0xE8	; 232
    4758:	81 e0       	ldi	r24, 0x01	; 1
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	02 80       	ldd	r0, Z+2	; 0x02
    475e:	02 c0       	rjmp	.+4      	; 0x4764 <_turn_on+0x8e>
    4760:	88 0f       	add	r24, r24
    4762:	99 1f       	adc	r25, r25
    4764:	0a 94       	dec	r0
    4766:	e2 f7       	brpl	.-8      	; 0x4760 <_turn_on+0x8a>
    4768:	82 2b       	or	r24, r18
    476a:	8c 93       	st	X, r24
    476c:	08 95       	ret

0000476e <_hal_led_task>:
    476e:	cc 24       	eor	r12, r12
    4770:	c3 94       	inc	r12
    4772:	d1 2c       	mov	r13, r1
    4774:	68 94       	set
    4776:	bb 24       	eor	r11, r11
    4778:	b2 f8       	bld	r11, 2
    477a:	c8 e0       	ldi	r28, 0x08	; 8
    477c:	d7 e1       	ldi	r29, 0x17	; 23
    477e:	10 e0       	ldi	r17, 0x00	; 0
    4780:	8c 81       	ldd	r24, Y+4	; 0x04
    4782:	81 30       	cpi	r24, 0x01	; 1
    4784:	81 f0       	breq	.+32     	; 0x47a6 <_hal_led_task+0x38>
    4786:	18 f1       	brcs	.+70     	; 0x47ce <_hal_led_task+0x60>
    4788:	82 30       	cpi	r24, 0x02	; 2
    478a:	61 f5       	brne	.+88     	; 0x47e4 <_hal_led_task+0x76>
    478c:	e8 81       	ld	r30, Y
    478e:	f9 81       	ldd	r31, Y+1	; 0x01
    4790:	20 81       	ld	r18, Z
    4792:	c6 01       	movw	r24, r12
    4794:	0a 80       	ldd	r0, Y+2	; 0x02
    4796:	02 c0       	rjmp	.+4      	; 0x479c <_hal_led_task+0x2e>
    4798:	88 0f       	add	r24, r24
    479a:	99 1f       	adc	r25, r25
    479c:	0a 94       	dec	r0
    479e:	e2 f7       	brpl	.-8      	; 0x4798 <_hal_led_task+0x2a>
    47a0:	82 27       	eor	r24, r18
    47a2:	80 83       	st	Z, r24
    47a4:	1f c0       	rjmp	.+62     	; 0x47e4 <_hal_led_task+0x76>
    47a6:	8d 81       	ldd	r24, Y+5	; 0x05
    47a8:	8f 5f       	subi	r24, 0xFF	; 255
    47aa:	86 30       	cpi	r24, 0x06	; 6
    47ac:	10 f4       	brcc	.+4      	; 0x47b2 <_hal_led_task+0x44>
    47ae:	8d 83       	std	Y+5, r24	; 0x05
    47b0:	19 c0       	rjmp	.+50     	; 0x47e4 <_hal_led_task+0x76>
    47b2:	1d 82       	std	Y+5, r1	; 0x05
    47b4:	e8 81       	ld	r30, Y
    47b6:	f9 81       	ldd	r31, Y+1	; 0x01
    47b8:	20 81       	ld	r18, Z
    47ba:	c6 01       	movw	r24, r12
    47bc:	0a 80       	ldd	r0, Y+2	; 0x02
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <_hal_led_task+0x56>
    47c0:	88 0f       	add	r24, r24
    47c2:	99 1f       	adc	r25, r25
    47c4:	0a 94       	dec	r0
    47c6:	e2 f7       	brpl	.-8      	; 0x47c0 <_hal_led_task+0x52>
    47c8:	82 27       	eor	r24, r18
    47ca:	80 83       	st	Z, r24
    47cc:	0b c0       	rjmp	.+22     	; 0x47e4 <_hal_led_task+0x76>
    47ce:	0d 81       	ldd	r16, Y+5	; 0x05
    47d0:	00 23       	and	r16, r16
    47d2:	29 f0       	breq	.+10     	; 0x47de <_hal_led_task+0x70>
    47d4:	81 2f       	mov	r24, r17
    47d6:	7f df       	rcall	.-258    	; 0x46d6 <_turn_on>
    47d8:	01 50       	subi	r16, 0x01	; 1
    47da:	0d 83       	std	Y+5, r16	; 0x05
    47dc:	03 c0       	rjmp	.+6      	; 0x47e4 <_hal_led_task+0x76>
    47de:	bc 82       	std	Y+4, r11	; 0x04
    47e0:	81 2f       	mov	r24, r17
    47e2:	2d df       	rcall	.-422    	; 0x463e <_turn_off>
    47e4:	1f 5f       	subi	r17, 0xFF	; 255
    47e6:	26 96       	adiw	r28, 0x06	; 6
    47e8:	14 30       	cpi	r17, 0x04	; 4
    47ea:	51 f6       	brne	.-108    	; 0x4780 <_hal_led_task+0x12>
    47ec:	6c e0       	ldi	r22, 0x0C	; 12
    47ee:	70 e0       	ldi	r23, 0x00	; 0
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <vTaskDelay>
    47f8:	c0 cf       	rjmp	.-128    	; 0x477a <_hal_led_task+0xc>

000047fa <status_leds_initialise>:
    47fa:	ef 92       	push	r14
    47fc:	ff 92       	push	r15
    47fe:	0f 93       	push	r16
    4800:	1f 93       	push	r17
    4802:	cf 93       	push	r28
    4804:	df 93       	push	r29
    4806:	08 2f       	mov	r16, r24
    4808:	80 e4       	ldi	r24, 0x40	; 64
    480a:	87 b9       	out	0x07, r24	; 7
    480c:	c8 e0       	ldi	r28, 0x08	; 8
    480e:	d7 e1       	ldi	r29, 0x17	; 23
    4810:	0f 2e       	mov	r0, r31
    4812:	f8 e2       	ldi	r31, 0x28	; 40
    4814:	ef 2e       	mov	r14, r31
    4816:	f1 2c       	mov	r15, r1
    4818:	f0 2d       	mov	r31, r0
    481a:	f9 82       	std	Y+1, r15	; 0x01
    481c:	e8 82       	st	Y, r14
    481e:	86 e0       	ldi	r24, 0x06	; 6
    4820:	8a 83       	std	Y+2, r24	; 0x02
    4822:	1b 82       	std	Y+3, r1	; 0x03
    4824:	14 e0       	ldi	r17, 0x04	; 4
    4826:	1c 83       	std	Y+4, r17	; 0x04
    4828:	80 e0       	ldi	r24, 0x00	; 0
    482a:	09 df       	rcall	.-494    	; 0x463e <_turn_off>
    482c:	80 e8       	ldi	r24, 0x80	; 128
    482e:	87 b9       	out	0x07, r24	; 7
    4830:	ff 82       	std	Y+7, r15	; 0x07
    4832:	ee 82       	std	Y+6, r14	; 0x06
    4834:	87 e0       	ldi	r24, 0x07	; 7
    4836:	88 87       	std	Y+8, r24	; 0x08
    4838:	19 86       	std	Y+9, r1	; 0x09
    483a:	1a 87       	std	Y+10, r17	; 0x0a
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	ff de       	rcall	.-514    	; 0x463e <_turn_off>
    4840:	80 e2       	ldi	r24, 0x20	; 32
    4842:	83 bb       	out	0x13, r24	; 19
    4844:	84 e3       	ldi	r24, 0x34	; 52
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	9d 87       	std	Y+13, r25	; 0x0d
    484a:	8c 87       	std	Y+12, r24	; 0x0c
    484c:	85 e0       	ldi	r24, 0x05	; 5
    484e:	8e 87       	std	Y+14, r24	; 0x0e
    4850:	1f 86       	std	Y+15, r1	; 0x0f
    4852:	18 8b       	std	Y+16, r17	; 0x10
    4854:	82 e0       	ldi	r24, 0x02	; 2
    4856:	f3 de       	rcall	.-538    	; 0x463e <_turn_off>
    4858:	80 e1       	ldi	r24, 0x10	; 16
    485a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    485e:	82 e0       	ldi	r24, 0x02	; 2
    4860:	91 e0       	ldi	r25, 0x01	; 1
    4862:	9b 8b       	std	Y+19, r25	; 0x13
    4864:	8a 8b       	std	Y+18, r24	; 0x12
    4866:	1c 8b       	std	Y+20, r17	; 0x14
    4868:	1d 8a       	std	Y+21, r1	; 0x15
    486a:	1e 8b       	std	Y+22, r17	; 0x16
    486c:	83 e0       	ldi	r24, 0x03	; 3
    486e:	e7 de       	rcall	.-562    	; 0x463e <_turn_off>
    4870:	e1 2c       	mov	r14, r1
    4872:	f1 2c       	mov	r15, r1
    4874:	20 e0       	ldi	r18, 0x00	; 0
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	40 ec       	ldi	r20, 0xC0	; 192
    487a:	50 e0       	ldi	r21, 0x00	; 0
    487c:	65 e4       	ldi	r22, 0x45	; 69
    487e:	77 e0       	ldi	r23, 0x07	; 7
    4880:	87 eb       	ldi	r24, 0xB7	; 183
    4882:	93 e2       	ldi	r25, 0x23	; 35
    4884:	0e 94 91 0c 	call	0x1922	; 0x1922 <xTaskCreate>
    4888:	df 91       	pop	r29
    488a:	cf 91       	pop	r28
    488c:	1f 91       	pop	r17
    488e:	0f 91       	pop	r16
    4890:	ff 90       	pop	r15
    4892:	ef 90       	pop	r14
    4894:	08 95       	ret

00004896 <status_leds_slowBlink>:
    4896:	cf 93       	push	r28
    4898:	df 93       	push	r29
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	fc 01       	movw	r30, r24
    489e:	ee 0f       	add	r30, r30
    48a0:	ff 1f       	adc	r31, r31
    48a2:	df 01       	movw	r26, r30
    48a4:	a8 0f       	add	r26, r24
    48a6:	b9 1f       	adc	r27, r25
    48a8:	aa 0f       	add	r26, r26
    48aa:	bb 1f       	adc	r27, r27
    48ac:	a8 5f       	subi	r26, 0xF8	; 248
    48ae:	b8 4e       	sbci	r27, 0xE8	; 232
    48b0:	cd 91       	ld	r28, X+
    48b2:	dc 91       	ld	r29, X
    48b4:	11 97       	sbiw	r26, 0x01	; 1
    48b6:	48 81       	ld	r20, Y
    48b8:	21 e0       	ldi	r18, 0x01	; 1
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	12 96       	adiw	r26, 0x02	; 2
    48be:	0c 90       	ld	r0, X
    48c0:	12 97       	sbiw	r26, 0x02	; 2
    48c2:	02 c0       	rjmp	.+4      	; 0x48c8 <status_leds_slowBlink+0x32>
    48c4:	22 0f       	add	r18, r18
    48c6:	33 1f       	adc	r19, r19
    48c8:	0a 94       	dec	r0
    48ca:	e2 f7       	brpl	.-8      	; 0x48c4 <status_leds_slowBlink+0x2e>
    48cc:	24 27       	eor	r18, r20
    48ce:	28 83       	st	Y, r18
    48d0:	fd 01       	movw	r30, r26
    48d2:	81 e0       	ldi	r24, 0x01	; 1
    48d4:	84 83       	std	Z+4, r24	; 0x04
    48d6:	df 91       	pop	r29
    48d8:	cf 91       	pop	r28
    48da:	08 95       	ret

000048dc <status_leds_fastBlink>:
    48dc:	cf 93       	push	r28
    48de:	df 93       	push	r29
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	fc 01       	movw	r30, r24
    48e4:	ee 0f       	add	r30, r30
    48e6:	ff 1f       	adc	r31, r31
    48e8:	df 01       	movw	r26, r30
    48ea:	a8 0f       	add	r26, r24
    48ec:	b9 1f       	adc	r27, r25
    48ee:	aa 0f       	add	r26, r26
    48f0:	bb 1f       	adc	r27, r27
    48f2:	a8 5f       	subi	r26, 0xF8	; 248
    48f4:	b8 4e       	sbci	r27, 0xE8	; 232
    48f6:	cd 91       	ld	r28, X+
    48f8:	dc 91       	ld	r29, X
    48fa:	11 97       	sbiw	r26, 0x01	; 1
    48fc:	48 81       	ld	r20, Y
    48fe:	21 e0       	ldi	r18, 0x01	; 1
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	12 96       	adiw	r26, 0x02	; 2
    4904:	0c 90       	ld	r0, X
    4906:	12 97       	sbiw	r26, 0x02	; 2
    4908:	02 c0       	rjmp	.+4      	; 0x490e <status_leds_fastBlink+0x32>
    490a:	22 0f       	add	r18, r18
    490c:	33 1f       	adc	r19, r19
    490e:	0a 94       	dec	r0
    4910:	e2 f7       	brpl	.-8      	; 0x490a <status_leds_fastBlink+0x2e>
    4912:	24 27       	eor	r18, r20
    4914:	28 83       	st	Y, r18
    4916:	fd 01       	movw	r30, r26
    4918:	82 e0       	ldi	r24, 0x02	; 2
    491a:	84 83       	std	Z+4, r24	; 0x04
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	08 95       	ret

00004922 <status_leds_ledOn>:
    4922:	28 2f       	mov	r18, r24
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	f9 01       	movw	r30, r18
    4928:	ee 0f       	add	r30, r30
    492a:	ff 1f       	adc	r31, r31
    492c:	e2 0f       	add	r30, r18
    492e:	f3 1f       	adc	r31, r19
    4930:	ee 0f       	add	r30, r30
    4932:	ff 1f       	adc	r31, r31
    4934:	e8 5f       	subi	r30, 0xF8	; 248
    4936:	f8 4e       	sbci	r31, 0xE8	; 232
    4938:	93 e0       	ldi	r25, 0x03	; 3
    493a:	94 83       	std	Z+4, r25	; 0x04
    493c:	cc ce       	rjmp	.-616    	; 0x46d6 <_turn_on>
    493e:	08 95       	ret

00004940 <status_leds_ledOff>:
    4940:	28 2f       	mov	r18, r24
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	f9 01       	movw	r30, r18
    4946:	ee 0f       	add	r30, r30
    4948:	ff 1f       	adc	r31, r31
    494a:	e2 0f       	add	r30, r18
    494c:	f3 1f       	adc	r31, r19
    494e:	ee 0f       	add	r30, r30
    4950:	ff 1f       	adc	r31, r31
    4952:	e8 5f       	subi	r30, 0xF8	; 248
    4954:	f8 4e       	sbci	r31, 0xE8	; 232
    4956:	94 e0       	ldi	r25, 0x04	; 4
    4958:	94 83       	std	Z+4, r25	; 0x04
    495a:	71 ce       	rjmp	.-798    	; 0x463e <_turn_off>
    495c:	08 95       	ret

0000495e <status_leds_longPuls>:
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	fc 01       	movw	r30, r24
    4962:	ee 0f       	add	r30, r30
    4964:	ff 1f       	adc	r31, r31
    4966:	df 01       	movw	r26, r30
    4968:	a8 0f       	add	r26, r24
    496a:	b9 1f       	adc	r27, r25
    496c:	aa 0f       	add	r26, r26
    496e:	bb 1f       	adc	r27, r27
    4970:	a8 5f       	subi	r26, 0xF8	; 248
    4972:	b8 4e       	sbci	r27, 0xE8	; 232
    4974:	26 e0       	ldi	r18, 0x06	; 6
    4976:	15 96       	adiw	r26, 0x05	; 5
    4978:	2c 93       	st	X, r18
    497a:	15 97       	sbiw	r26, 0x05	; 5
    497c:	fd 01       	movw	r30, r26
    497e:	14 82       	std	Z+4, r1	; 0x04
    4980:	08 95       	ret

00004982 <status_leds_shortPuls>:
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	fc 01       	movw	r30, r24
    4986:	ee 0f       	add	r30, r30
    4988:	ff 1f       	adc	r31, r31
    498a:	df 01       	movw	r26, r30
    498c:	a8 0f       	add	r26, r24
    498e:	b9 1f       	adc	r27, r25
    4990:	aa 0f       	add	r26, r26
    4992:	bb 1f       	adc	r27, r27
    4994:	a8 5f       	subi	r26, 0xF8	; 248
    4996:	b8 4e       	sbci	r27, 0xE8	; 232
    4998:	15 96       	adiw	r26, 0x05	; 5
    499a:	1c 92       	st	X, r1
    499c:	15 97       	sbiw	r26, 0x05	; 5
    499e:	fd 01       	movw	r30, r26
    49a0:	14 82       	std	Z+4, r1	; 0x04
    49a2:	08 95       	ret

000049a4 <_initTwiInterface>:
    49a4:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <_twiIsInitiated>
    49a8:	81 11       	cpse	r24, r1
    49aa:	0c c0       	rjmp	.+24     	; 0x49c4 <_initTwiInterface+0x20>
    49ac:	8c e0       	ldi	r24, 0x0C	; 12
    49ae:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    49b2:	8f ef       	ldi	r24, 0xFF	; 255
    49b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    49b8:	84 e0       	ldi	r24, 0x04	; 4
    49ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <_twiIsInitiated>
    49c4:	08 95       	ret

000049c6 <twiCreate>:
    49c6:	af 92       	push	r10
    49c8:	bf 92       	push	r11
    49ca:	cf 92       	push	r12
    49cc:	df 92       	push	r13
    49ce:	ef 92       	push	r14
    49d0:	ff 92       	push	r15
    49d2:	0f 93       	push	r16
    49d4:	1f 93       	push	r17
    49d6:	cf 93       	push	r28
    49d8:	df 93       	push	r29
    49da:	a8 2e       	mov	r10, r24
    49dc:	b6 2e       	mov	r11, r22
    49de:	69 01       	movw	r12, r18
    49e0:	7a 01       	movw	r14, r20
    49e2:	84 e0       	ldi	r24, 0x04	; 4
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	35 d7       	rcall	.+3690   	; 0x5852 <malloc>
    49e8:	ec 01       	movw	r28, r24
    49ea:	89 2b       	or	r24, r25
    49ec:	61 f1       	breq	.+88     	; 0x4a46 <twiCreate+0x80>
    49ee:	a8 82       	st	Y, r10
    49f0:	81 e0       	ldi	r24, 0x01	; 1
    49f2:	b8 12       	cpse	r11, r24
    49f4:	12 c0       	rjmp	.+36     	; 0x4a1a <twiCreate+0x54>
    49f6:	c7 01       	movw	r24, r14
    49f8:	b6 01       	movw	r22, r12
    49fa:	20 ea       	ldi	r18, 0xA0	; 160
    49fc:	36 e8       	ldi	r19, 0x86	; 134
    49fe:	41 e0       	ldi	r20, 0x01	; 1
    4a00:	50 e0       	ldi	r21, 0x00	; 0
    4a02:	fd d6       	rcall	.+3578   	; 0x57fe <__udivmodsi4>
    4a04:	da 01       	movw	r26, r20
    4a06:	c9 01       	movw	r24, r18
    4a08:	40 97       	sbiw	r24, 0x10	; 16
    4a0a:	a1 09       	sbc	r26, r1
    4a0c:	b1 09       	sbc	r27, r1
    4a0e:	b6 95       	lsr	r27
    4a10:	a7 95       	ror	r26
    4a12:	97 95       	ror	r25
    4a14:	87 95       	ror	r24
    4a16:	89 83       	std	Y+1, r24	; 0x01
    4a18:	11 c0       	rjmp	.+34     	; 0x4a3c <twiCreate+0x76>
    4a1a:	c7 01       	movw	r24, r14
    4a1c:	b6 01       	movw	r22, r12
    4a1e:	20 e8       	ldi	r18, 0x80	; 128
    4a20:	3a e1       	ldi	r19, 0x1A	; 26
    4a22:	46 e0       	ldi	r20, 0x06	; 6
    4a24:	50 e0       	ldi	r21, 0x00	; 0
    4a26:	eb d6       	rcall	.+3542   	; 0x57fe <__udivmodsi4>
    4a28:	da 01       	movw	r26, r20
    4a2a:	c9 01       	movw	r24, r18
    4a2c:	40 97       	sbiw	r24, 0x10	; 16
    4a2e:	a1 09       	sbc	r26, r1
    4a30:	b1 09       	sbc	r27, r1
    4a32:	b6 95       	lsr	r27
    4a34:	a7 95       	ror	r26
    4a36:	97 95       	ror	r25
    4a38:	87 95       	ror	r24
    4a3a:	89 83       	std	Y+1, r24	; 0x01
    4a3c:	1b 83       	std	Y+3, r17	; 0x03
    4a3e:	0a 83       	std	Y+2, r16	; 0x02
    4a40:	8c 2f       	mov	r24, r28
    4a42:	9d 2f       	mov	r25, r29
    4a44:	02 c0       	rjmp	.+4      	; 0x4a4a <twiCreate+0x84>
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	df 91       	pop	r29
    4a4c:	cf 91       	pop	r28
    4a4e:	1f 91       	pop	r17
    4a50:	0f 91       	pop	r16
    4a52:	ff 90       	pop	r15
    4a54:	ef 90       	pop	r14
    4a56:	df 90       	pop	r13
    4a58:	cf 90       	pop	r12
    4a5a:	bf 90       	pop	r11
    4a5c:	af 90       	pop	r10
    4a5e:	08 95       	ret

00004a60 <twiIsBusy>:
    4a60:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4a64:	81 70       	andi	r24, 0x01	; 1
    4a66:	08 95       	ret

00004a68 <twiTransmit>:
    4a68:	ff 92       	push	r15
    4a6a:	0f 93       	push	r16
    4a6c:	1f 93       	push	r17
    4a6e:	cf 93       	push	r28
    4a70:	df 93       	push	r29
    4a72:	00 97       	sbiw	r24, 0x00	; 0
    4a74:	d1 f1       	breq	.+116    	; 0x4aea <twiTransmit+0x82>
    4a76:	4a 30       	cpi	r20, 0x0A	; 10
    4a78:	d0 f5       	brcc	.+116    	; 0x4aee <twiTransmit+0x86>
    4a7a:	f4 2e       	mov	r15, r20
    4a7c:	8b 01       	movw	r16, r22
    4a7e:	ec 01       	movw	r28, r24
    4a80:	ef df       	rcall	.-34     	; 0x4a60 <twiIsBusy>
    4a82:	81 11       	cpse	r24, r1
    4a84:	36 c0       	rjmp	.+108    	; 0x4af2 <twiTransmit+0x8a>
    4a86:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <_twiCurrentHandler>
    4a8a:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <_twiCurrentHandler+0x1>
    4a8e:	c8 17       	cp	r28, r24
    4a90:	d9 07       	cpc	r29, r25
    4a92:	41 f0       	breq	.+16     	; 0x4aa4 <twiTransmit+0x3c>
    4a94:	87 df       	rcall	.-242    	; 0x49a4 <_initTwiInterface>
    4a96:	89 81       	ldd	r24, Y+1	; 0x01
    4a98:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4a9c:	d0 93 22 17 	sts	0x1722, r29	; 0x801722 <_twiCurrentHandler+0x1>
    4aa0:	c0 93 21 17 	sts	0x1721, r28	; 0x801721 <_twiCurrentHandler>
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	8f 0d       	add	r24, r15
    4aa8:	80 93 23 17 	sts	0x1723, r24	; 0x801723 <_twiMessageLen>
    4aac:	88 81       	ld	r24, Y
    4aae:	88 0f       	add	r24, r24
    4ab0:	80 93 24 17 	sts	0x1724, r24	; 0x801724 <_twiMessageBuffer>
    4ab4:	ff 20       	and	r15, r15
    4ab6:	89 f0       	breq	.+34     	; 0x4ada <twiTransmit+0x72>
    4ab8:	f8 01       	movw	r30, r16
    4aba:	a5 e2       	ldi	r26, 0x25	; 37
    4abc:	b7 e1       	ldi	r27, 0x17	; 23
    4abe:	4f ef       	ldi	r20, 0xFF	; 255
    4ac0:	4f 0d       	add	r20, r15
    4ac2:	64 2f       	mov	r22, r20
    4ac4:	70 e0       	ldi	r23, 0x00	; 0
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	01 96       	adiw	r24, 0x01	; 1
    4aca:	b8 01       	movw	r22, r16
    4acc:	68 0f       	add	r22, r24
    4ace:	79 1f       	adc	r23, r25
    4ad0:	81 91       	ld	r24, Z+
    4ad2:	8d 93       	st	X+, r24
    4ad4:	e6 17       	cp	r30, r22
    4ad6:	f7 07       	cpc	r31, r23
    4ad8:	d9 f7       	brne	.-10     	; 0x4ad0 <twiTransmit+0x68>
    4ada:	88 ef       	ldi	r24, 0xF8	; 248
    4adc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4ae0:	85 ea       	ldi	r24, 0xA5	; 165
    4ae2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4ae6:	84 e0       	ldi	r24, 0x04	; 4
    4ae8:	05 c0       	rjmp	.+10     	; 0x4af4 <twiTransmit+0x8c>
    4aea:	86 e0       	ldi	r24, 0x06	; 6
    4aec:	03 c0       	rjmp	.+6      	; 0x4af4 <twiTransmit+0x8c>
    4aee:	87 e0       	ldi	r24, 0x07	; 7
    4af0:	01 c0       	rjmp	.+2      	; 0x4af4 <twiTransmit+0x8c>
    4af2:	82 e0       	ldi	r24, 0x02	; 2
    4af4:	df 91       	pop	r29
    4af6:	cf 91       	pop	r28
    4af8:	1f 91       	pop	r17
    4afa:	0f 91       	pop	r16
    4afc:	ff 90       	pop	r15
    4afe:	08 95       	ret

00004b00 <twiReceive>:
    4b00:	1f 93       	push	r17
    4b02:	cf 93       	push	r28
    4b04:	df 93       	push	r29
    4b06:	00 97       	sbiw	r24, 0x00	; 0
    4b08:	29 f1       	breq	.+74     	; 0x4b54 <twiReceive+0x54>
    4b0a:	6b 30       	cpi	r22, 0x0B	; 11
    4b0c:	28 f5       	brcc	.+74     	; 0x4b58 <twiReceive+0x58>
    4b0e:	16 2f       	mov	r17, r22
    4b10:	ec 01       	movw	r28, r24
    4b12:	a6 df       	rcall	.-180    	; 0x4a60 <twiIsBusy>
    4b14:	81 11       	cpse	r24, r1
    4b16:	22 c0       	rjmp	.+68     	; 0x4b5c <twiReceive+0x5c>
    4b18:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <_twiCurrentHandler>
    4b1c:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <_twiCurrentHandler+0x1>
    4b20:	c8 17       	cp	r28, r24
    4b22:	d9 07       	cpc	r29, r25
    4b24:	41 f0       	breq	.+16     	; 0x4b36 <twiReceive+0x36>
    4b26:	3e df       	rcall	.-388    	; 0x49a4 <_initTwiInterface>
    4b28:	89 81       	ldd	r24, Y+1	; 0x01
    4b2a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4b2e:	d0 93 22 17 	sts	0x1722, r29	; 0x801722 <_twiCurrentHandler+0x1>
    4b32:	c0 93 21 17 	sts	0x1721, r28	; 0x801721 <_twiCurrentHandler>
    4b36:	10 93 23 17 	sts	0x1723, r17	; 0x801723 <_twiMessageLen>
    4b3a:	88 81       	ld	r24, Y
    4b3c:	88 0f       	add	r24, r24
    4b3e:	81 60       	ori	r24, 0x01	; 1
    4b40:	80 93 24 17 	sts	0x1724, r24	; 0x801724 <_twiMessageBuffer>
    4b44:	88 ef       	ldi	r24, 0xF8	; 248
    4b46:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4b4a:	85 ea       	ldi	r24, 0xA5	; 165
    4b4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4b50:	85 e0       	ldi	r24, 0x05	; 5
    4b52:	05 c0       	rjmp	.+10     	; 0x4b5e <twiReceive+0x5e>
    4b54:	86 e0       	ldi	r24, 0x06	; 6
    4b56:	03 c0       	rjmp	.+6      	; 0x4b5e <twiReceive+0x5e>
    4b58:	87 e0       	ldi	r24, 0x07	; 7
    4b5a:	01 c0       	rjmp	.+2      	; 0x4b5e <twiReceive+0x5e>
    4b5c:	82 e0       	ldi	r24, 0x02	; 2
    4b5e:	df 91       	pop	r29
    4b60:	cf 91       	pop	r28
    4b62:	1f 91       	pop	r17
    4b64:	08 95       	ret

00004b66 <__vector_39>:
    4b66:	1f 92       	push	r1
    4b68:	0f 92       	push	r0
    4b6a:	0f b6       	in	r0, 0x3f	; 63
    4b6c:	0f 92       	push	r0
    4b6e:	11 24       	eor	r1, r1
    4b70:	0b b6       	in	r0, 0x3b	; 59
    4b72:	0f 92       	push	r0
    4b74:	2f 93       	push	r18
    4b76:	3f 93       	push	r19
    4b78:	4f 93       	push	r20
    4b7a:	5f 93       	push	r21
    4b7c:	6f 93       	push	r22
    4b7e:	7f 93       	push	r23
    4b80:	8f 93       	push	r24
    4b82:	9f 93       	push	r25
    4b84:	af 93       	push	r26
    4b86:	bf 93       	push	r27
    4b88:	ef 93       	push	r30
    4b8a:	ff 93       	push	r31
    4b8c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4b90:	8e 2f       	mov	r24, r30
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	fc 01       	movw	r30, r24
    4b96:	38 97       	sbiw	r30, 0x08	; 8
    4b98:	e1 35       	cpi	r30, 0x51	; 81
    4b9a:	f1 05       	cpc	r31, r1
    4b9c:	08 f0       	brcs	.+2      	; 0x4ba0 <__vector_39+0x3a>
    4b9e:	75 c0       	rjmp	.+234    	; 0x4c8a <__vector_39+0x124>
    4ba0:	88 27       	eor	r24, r24
    4ba2:	e4 58       	subi	r30, 0x84	; 132
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ba8:	4c c6       	rjmp	.+3224   	; 0x5842 <__tablejump2__>
    4baa:	10 92 20 17 	sts	0x1720, r1	; 0x801720 <_index.1885>
    4bae:	e0 91 20 17 	lds	r30, 0x1720	; 0x801720 <_index.1885>
    4bb2:	80 91 23 17 	lds	r24, 0x1723	; 0x801723 <_twiMessageLen>
    4bb6:	e8 17       	cp	r30, r24
    4bb8:	70 f4       	brcc	.+28     	; 0x4bd6 <__vector_39+0x70>
    4bba:	81 e0       	ldi	r24, 0x01	; 1
    4bbc:	8e 0f       	add	r24, r30
    4bbe:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <_index.1885>
    4bc2:	f0 e0       	ldi	r31, 0x00	; 0
    4bc4:	ec 5d       	subi	r30, 0xDC	; 220
    4bc6:	f8 4e       	sbci	r31, 0xE8	; 232
    4bc8:	80 81       	ld	r24, Z
    4bca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4bce:	85 e8       	ldi	r24, 0x85	; 133
    4bd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4bd4:	72 c0       	rjmp	.+228    	; 0x4cba <__vector_39+0x154>
    4bd6:	84 e9       	ldi	r24, 0x94	; 148
    4bd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4bdc:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <_twiCurrentHandler>
    4be0:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <_twiCurrentHandler+0x1>
    4be4:	dc 01       	movw	r26, r24
    4be6:	12 96       	adiw	r26, 0x02	; 2
    4be8:	ed 91       	ld	r30, X+
    4bea:	fc 91       	ld	r31, X
    4bec:	13 97       	sbiw	r26, 0x03	; 3
    4bee:	30 97       	sbiw	r30, 0x00	; 0
    4bf0:	09 f4       	brne	.+2      	; 0x4bf4 <__vector_39+0x8e>
    4bf2:	63 c0       	rjmp	.+198    	; 0x4cba <__vector_39+0x154>
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	40 e0       	ldi	r20, 0x00	; 0
    4bf8:	50 e0       	ldi	r21, 0x00	; 0
    4bfa:	64 e0       	ldi	r22, 0x04	; 4
    4bfc:	19 95       	eicall
    4bfe:	5d c0       	rjmp	.+186    	; 0x4cba <__vector_39+0x154>
    4c00:	e0 91 20 17 	lds	r30, 0x1720	; 0x801720 <_index.1885>
    4c04:	81 e0       	ldi	r24, 0x01	; 1
    4c06:	8e 0f       	add	r24, r30
    4c08:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <_index.1885>
    4c0c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4c10:	f0 e0       	ldi	r31, 0x00	; 0
    4c12:	ec 5d       	subi	r30, 0xDC	; 220
    4c14:	f8 4e       	sbci	r31, 0xE8	; 232
    4c16:	80 83       	st	Z, r24
    4c18:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4c1c:	80 34       	cpi	r24, 0x40	; 64
    4c1e:	11 f4       	brne	.+4      	; 0x4c24 <__vector_39+0xbe>
    4c20:	10 92 20 17 	sts	0x1720, r1	; 0x801720 <_index.1885>
    4c24:	20 91 20 17 	lds	r18, 0x1720	; 0x801720 <_index.1885>
    4c28:	30 e0       	ldi	r19, 0x00	; 0
    4c2a:	80 91 23 17 	lds	r24, 0x1723	; 0x801723 <_twiMessageLen>
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	01 97       	sbiw	r24, 0x01	; 1
    4c32:	28 17       	cp	r18, r24
    4c34:	39 07       	cpc	r19, r25
    4c36:	24 f4       	brge	.+8      	; 0x4c40 <__vector_39+0xda>
    4c38:	85 ec       	ldi	r24, 0xC5	; 197
    4c3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c3e:	3d c0       	rjmp	.+122    	; 0x4cba <__vector_39+0x154>
    4c40:	85 e8       	ldi	r24, 0x85	; 133
    4c42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c46:	39 c0       	rjmp	.+114    	; 0x4cba <__vector_39+0x154>
    4c48:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4c4c:	e0 91 20 17 	lds	r30, 0x1720	; 0x801720 <_index.1885>
    4c50:	f0 e0       	ldi	r31, 0x00	; 0
    4c52:	ec 5d       	subi	r30, 0xDC	; 220
    4c54:	f8 4e       	sbci	r31, 0xE8	; 232
    4c56:	80 83       	st	Z, r24
    4c58:	84 e9       	ldi	r24, 0x94	; 148
    4c5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c5e:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <_twiCurrentHandler>
    4c62:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <_twiCurrentHandler+0x1>
    4c66:	dc 01       	movw	r26, r24
    4c68:	12 96       	adiw	r26, 0x02	; 2
    4c6a:	ed 91       	ld	r30, X+
    4c6c:	fc 91       	ld	r31, X
    4c6e:	13 97       	sbiw	r26, 0x03	; 3
    4c70:	30 97       	sbiw	r30, 0x00	; 0
    4c72:	19 f1       	breq	.+70     	; 0x4cba <__vector_39+0x154>
    4c74:	20 91 23 17 	lds	r18, 0x1723	; 0x801723 <_twiMessageLen>
    4c78:	44 e2       	ldi	r20, 0x24	; 36
    4c7a:	57 e1       	ldi	r21, 0x17	; 23
    4c7c:	65 e0       	ldi	r22, 0x05	; 5
    4c7e:	19 95       	eicall
    4c80:	1c c0       	rjmp	.+56     	; 0x4cba <__vector_39+0x154>
    4c82:	85 ea       	ldi	r24, 0xA5	; 165
    4c84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c88:	18 c0       	rjmp	.+48     	; 0x4cba <__vector_39+0x154>
    4c8a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4c8e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4c92:	84 e0       	ldi	r24, 0x04	; 4
    4c94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4c98:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <_twiCurrentHandler>
    4c9c:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <_twiCurrentHandler+0x1>
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	12 96       	adiw	r26, 0x02	; 2
    4ca4:	ed 91       	ld	r30, X+
    4ca6:	fc 91       	ld	r31, X
    4ca8:	13 97       	sbiw	r26, 0x03	; 3
    4caa:	30 97       	sbiw	r30, 0x00	; 0
    4cac:	31 f0       	breq	.+12     	; 0x4cba <__vector_39+0x154>
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	40 e0       	ldi	r20, 0x00	; 0
    4cb2:	50 e0       	ldi	r21, 0x00	; 0
    4cb4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4cb8:	19 95       	eicall
    4cba:	ff 91       	pop	r31
    4cbc:	ef 91       	pop	r30
    4cbe:	bf 91       	pop	r27
    4cc0:	af 91       	pop	r26
    4cc2:	9f 91       	pop	r25
    4cc4:	8f 91       	pop	r24
    4cc6:	7f 91       	pop	r23
    4cc8:	6f 91       	pop	r22
    4cca:	5f 91       	pop	r21
    4ccc:	4f 91       	pop	r20
    4cce:	3f 91       	pop	r19
    4cd0:	2f 91       	pop	r18
    4cd2:	0f 90       	pop	r0
    4cd4:	0b be       	out	0x3b, r0	; 59
    4cd6:	0f 90       	pop	r0
    4cd8:	0f be       	out	0x3f, r0	; 63
    4cda:	0f 90       	pop	r0
    4cdc:	1f 90       	pop	r1
    4cde:	18 95       	reti

00004ce0 <fifo_init>:
    4ce0:	fc 01       	movw	r30, r24
    4ce2:	41 11       	cpse	r20, r1
    4ce4:	01 c0       	rjmp	.+2      	; 0x4ce8 <fifo_init+0x8>
    4ce6:	d6 d6       	rcall	.+3500   	; 0x5a94 <abort>
    4ce8:	84 2f       	mov	r24, r20
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	9c 01       	movw	r18, r24
    4cee:	21 50       	subi	r18, 0x01	; 1
    4cf0:	31 09       	sbc	r19, r1
    4cf2:	82 23       	and	r24, r18
    4cf4:	93 23       	and	r25, r19
    4cf6:	89 2b       	or	r24, r25
    4cf8:	09 f0       	breq	.+2      	; 0x4cfc <fifo_init+0x1c>
    4cfa:	cc d6       	rcall	.+3480   	; 0x5a94 <abort>
    4cfc:	41 38       	cpi	r20, 0x81	; 129
    4cfe:	08 f0       	brcs	.+2      	; 0x4d02 <fifo_init+0x22>
    4d00:	c9 d6       	rcall	.+3474   	; 0x5a94 <abort>
    4d02:	12 82       	std	Z+2, r1	; 0x02
    4d04:	13 82       	std	Z+3, r1	; 0x03
    4d06:	44 83       	std	Z+4, r20	; 0x04
    4d08:	44 0f       	add	r20, r20
    4d0a:	41 50       	subi	r20, 0x01	; 1
    4d0c:	45 83       	std	Z+5, r20	; 0x05
    4d0e:	71 83       	std	Z+1, r23	; 0x01
    4d10:	60 83       	st	Z, r22
    4d12:	80 e0       	ldi	r24, 0x00	; 0
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	08 95       	ret

00004d18 <vfprintf>:
    4d18:	2f 92       	push	r2
    4d1a:	3f 92       	push	r3
    4d1c:	4f 92       	push	r4
    4d1e:	5f 92       	push	r5
    4d20:	6f 92       	push	r6
    4d22:	7f 92       	push	r7
    4d24:	8f 92       	push	r8
    4d26:	9f 92       	push	r9
    4d28:	af 92       	push	r10
    4d2a:	bf 92       	push	r11
    4d2c:	cf 92       	push	r12
    4d2e:	df 92       	push	r13
    4d30:	ef 92       	push	r14
    4d32:	ff 92       	push	r15
    4d34:	0f 93       	push	r16
    4d36:	1f 93       	push	r17
    4d38:	cf 93       	push	r28
    4d3a:	df 93       	push	r29
    4d3c:	cd b7       	in	r28, 0x3d	; 61
    4d3e:	de b7       	in	r29, 0x3e	; 62
    4d40:	60 97       	sbiw	r28, 0x10	; 16
    4d42:	0f b6       	in	r0, 0x3f	; 63
    4d44:	f8 94       	cli
    4d46:	de bf       	out	0x3e, r29	; 62
    4d48:	0f be       	out	0x3f, r0	; 63
    4d4a:	cd bf       	out	0x3d, r28	; 61
    4d4c:	7c 01       	movw	r14, r24
    4d4e:	1b 01       	movw	r2, r22
    4d50:	6a 01       	movw	r12, r20
    4d52:	fc 01       	movw	r30, r24
    4d54:	17 82       	std	Z+7, r1	; 0x07
    4d56:	16 82       	std	Z+6, r1	; 0x06
    4d58:	83 81       	ldd	r24, Z+3	; 0x03
    4d5a:	81 ff       	sbrs	r24, 1
    4d5c:	2a c3       	rjmp	.+1620   	; 0x53b2 <vfprintf+0x69a>
    4d5e:	9e 01       	movw	r18, r28
    4d60:	2f 5f       	subi	r18, 0xFF	; 255
    4d62:	3f 4f       	sbci	r19, 0xFF	; 255
    4d64:	39 01       	movw	r6, r18
    4d66:	f7 01       	movw	r30, r14
    4d68:	93 81       	ldd	r25, Z+3	; 0x03
    4d6a:	f1 01       	movw	r30, r2
    4d6c:	93 fd       	sbrc	r25, 3
    4d6e:	85 91       	lpm	r24, Z+
    4d70:	93 ff       	sbrs	r25, 3
    4d72:	81 91       	ld	r24, Z+
    4d74:	1f 01       	movw	r2, r30
    4d76:	88 23       	and	r24, r24
    4d78:	09 f4       	brne	.+2      	; 0x4d7c <vfprintf+0x64>
    4d7a:	17 c3       	rjmp	.+1582   	; 0x53aa <vfprintf+0x692>
    4d7c:	85 32       	cpi	r24, 0x25	; 37
    4d7e:	39 f4       	brne	.+14     	; 0x4d8e <vfprintf+0x76>
    4d80:	93 fd       	sbrc	r25, 3
    4d82:	85 91       	lpm	r24, Z+
    4d84:	93 ff       	sbrs	r25, 3
    4d86:	81 91       	ld	r24, Z+
    4d88:	1f 01       	movw	r2, r30
    4d8a:	85 32       	cpi	r24, 0x25	; 37
    4d8c:	31 f4       	brne	.+12     	; 0x4d9a <vfprintf+0x82>
    4d8e:	b7 01       	movw	r22, r14
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	d1 d7       	rcall	.+4002   	; 0x5d36 <fputc>
    4d94:	56 01       	movw	r10, r12
    4d96:	65 01       	movw	r12, r10
    4d98:	e6 cf       	rjmp	.-52     	; 0x4d66 <vfprintf+0x4e>
    4d9a:	10 e0       	ldi	r17, 0x00	; 0
    4d9c:	51 2c       	mov	r5, r1
    4d9e:	91 2c       	mov	r9, r1
    4da0:	ff e1       	ldi	r31, 0x1F	; 31
    4da2:	f9 15       	cp	r31, r9
    4da4:	d8 f0       	brcs	.+54     	; 0x4ddc <vfprintf+0xc4>
    4da6:	8b 32       	cpi	r24, 0x2B	; 43
    4da8:	79 f0       	breq	.+30     	; 0x4dc8 <vfprintf+0xb0>
    4daa:	38 f4       	brcc	.+14     	; 0x4dba <vfprintf+0xa2>
    4dac:	80 32       	cpi	r24, 0x20	; 32
    4dae:	79 f0       	breq	.+30     	; 0x4dce <vfprintf+0xb6>
    4db0:	83 32       	cpi	r24, 0x23	; 35
    4db2:	a1 f4       	brne	.+40     	; 0x4ddc <vfprintf+0xc4>
    4db4:	f9 2d       	mov	r31, r9
    4db6:	f0 61       	ori	r31, 0x10	; 16
    4db8:	2e c0       	rjmp	.+92     	; 0x4e16 <vfprintf+0xfe>
    4dba:	8d 32       	cpi	r24, 0x2D	; 45
    4dbc:	61 f0       	breq	.+24     	; 0x4dd6 <vfprintf+0xbe>
    4dbe:	80 33       	cpi	r24, 0x30	; 48
    4dc0:	69 f4       	brne	.+26     	; 0x4ddc <vfprintf+0xc4>
    4dc2:	29 2d       	mov	r18, r9
    4dc4:	21 60       	ori	r18, 0x01	; 1
    4dc6:	2d c0       	rjmp	.+90     	; 0x4e22 <vfprintf+0x10a>
    4dc8:	39 2d       	mov	r19, r9
    4dca:	32 60       	ori	r19, 0x02	; 2
    4dcc:	93 2e       	mov	r9, r19
    4dce:	89 2d       	mov	r24, r9
    4dd0:	84 60       	ori	r24, 0x04	; 4
    4dd2:	98 2e       	mov	r9, r24
    4dd4:	2a c0       	rjmp	.+84     	; 0x4e2a <vfprintf+0x112>
    4dd6:	e9 2d       	mov	r30, r9
    4dd8:	e8 60       	ori	r30, 0x08	; 8
    4dda:	15 c0       	rjmp	.+42     	; 0x4e06 <vfprintf+0xee>
    4ddc:	97 fc       	sbrc	r9, 7
    4dde:	2d c0       	rjmp	.+90     	; 0x4e3a <vfprintf+0x122>
    4de0:	20 ed       	ldi	r18, 0xD0	; 208
    4de2:	28 0f       	add	r18, r24
    4de4:	2a 30       	cpi	r18, 0x0A	; 10
    4de6:	88 f4       	brcc	.+34     	; 0x4e0a <vfprintf+0xf2>
    4de8:	96 fe       	sbrs	r9, 6
    4dea:	06 c0       	rjmp	.+12     	; 0x4df8 <vfprintf+0xe0>
    4dec:	3a e0       	ldi	r19, 0x0A	; 10
    4dee:	13 9f       	mul	r17, r19
    4df0:	20 0d       	add	r18, r0
    4df2:	11 24       	eor	r1, r1
    4df4:	12 2f       	mov	r17, r18
    4df6:	19 c0       	rjmp	.+50     	; 0x4e2a <vfprintf+0x112>
    4df8:	8a e0       	ldi	r24, 0x0A	; 10
    4dfa:	58 9e       	mul	r5, r24
    4dfc:	20 0d       	add	r18, r0
    4dfe:	11 24       	eor	r1, r1
    4e00:	52 2e       	mov	r5, r18
    4e02:	e9 2d       	mov	r30, r9
    4e04:	e0 62       	ori	r30, 0x20	; 32
    4e06:	9e 2e       	mov	r9, r30
    4e08:	10 c0       	rjmp	.+32     	; 0x4e2a <vfprintf+0x112>
    4e0a:	8e 32       	cpi	r24, 0x2E	; 46
    4e0c:	31 f4       	brne	.+12     	; 0x4e1a <vfprintf+0x102>
    4e0e:	96 fc       	sbrc	r9, 6
    4e10:	cc c2       	rjmp	.+1432   	; 0x53aa <vfprintf+0x692>
    4e12:	f9 2d       	mov	r31, r9
    4e14:	f0 64       	ori	r31, 0x40	; 64
    4e16:	9f 2e       	mov	r9, r31
    4e18:	08 c0       	rjmp	.+16     	; 0x4e2a <vfprintf+0x112>
    4e1a:	8c 36       	cpi	r24, 0x6C	; 108
    4e1c:	21 f4       	brne	.+8      	; 0x4e26 <vfprintf+0x10e>
    4e1e:	29 2d       	mov	r18, r9
    4e20:	20 68       	ori	r18, 0x80	; 128
    4e22:	92 2e       	mov	r9, r18
    4e24:	02 c0       	rjmp	.+4      	; 0x4e2a <vfprintf+0x112>
    4e26:	88 36       	cpi	r24, 0x68	; 104
    4e28:	41 f4       	brne	.+16     	; 0x4e3a <vfprintf+0x122>
    4e2a:	f1 01       	movw	r30, r2
    4e2c:	93 fd       	sbrc	r25, 3
    4e2e:	85 91       	lpm	r24, Z+
    4e30:	93 ff       	sbrs	r25, 3
    4e32:	81 91       	ld	r24, Z+
    4e34:	1f 01       	movw	r2, r30
    4e36:	81 11       	cpse	r24, r1
    4e38:	b3 cf       	rjmp	.-154    	; 0x4da0 <vfprintf+0x88>
    4e3a:	9b eb       	ldi	r25, 0xBB	; 187
    4e3c:	98 0f       	add	r25, r24
    4e3e:	93 30       	cpi	r25, 0x03	; 3
    4e40:	20 f4       	brcc	.+8      	; 0x4e4a <vfprintf+0x132>
    4e42:	99 2d       	mov	r25, r9
    4e44:	90 61       	ori	r25, 0x10	; 16
    4e46:	80 5e       	subi	r24, 0xE0	; 224
    4e48:	07 c0       	rjmp	.+14     	; 0x4e58 <vfprintf+0x140>
    4e4a:	9b e9       	ldi	r25, 0x9B	; 155
    4e4c:	98 0f       	add	r25, r24
    4e4e:	93 30       	cpi	r25, 0x03	; 3
    4e50:	08 f0       	brcs	.+2      	; 0x4e54 <vfprintf+0x13c>
    4e52:	59 c1       	rjmp	.+690    	; 0x5106 <vfprintf+0x3ee>
    4e54:	99 2d       	mov	r25, r9
    4e56:	9f 7e       	andi	r25, 0xEF	; 239
    4e58:	96 ff       	sbrs	r25, 6
    4e5a:	16 e0       	ldi	r17, 0x06	; 6
    4e5c:	9f 73       	andi	r25, 0x3F	; 63
    4e5e:	99 2e       	mov	r9, r25
    4e60:	85 36       	cpi	r24, 0x65	; 101
    4e62:	19 f4       	brne	.+6      	; 0x4e6a <vfprintf+0x152>
    4e64:	90 64       	ori	r25, 0x40	; 64
    4e66:	99 2e       	mov	r9, r25
    4e68:	08 c0       	rjmp	.+16     	; 0x4e7a <vfprintf+0x162>
    4e6a:	86 36       	cpi	r24, 0x66	; 102
    4e6c:	21 f4       	brne	.+8      	; 0x4e76 <vfprintf+0x15e>
    4e6e:	39 2f       	mov	r19, r25
    4e70:	30 68       	ori	r19, 0x80	; 128
    4e72:	93 2e       	mov	r9, r19
    4e74:	02 c0       	rjmp	.+4      	; 0x4e7a <vfprintf+0x162>
    4e76:	11 11       	cpse	r17, r1
    4e78:	11 50       	subi	r17, 0x01	; 1
    4e7a:	97 fe       	sbrs	r9, 7
    4e7c:	07 c0       	rjmp	.+14     	; 0x4e8c <vfprintf+0x174>
    4e7e:	1c 33       	cpi	r17, 0x3C	; 60
    4e80:	50 f4       	brcc	.+20     	; 0x4e96 <vfprintf+0x17e>
    4e82:	44 24       	eor	r4, r4
    4e84:	43 94       	inc	r4
    4e86:	41 0e       	add	r4, r17
    4e88:	27 e0       	ldi	r18, 0x07	; 7
    4e8a:	0b c0       	rjmp	.+22     	; 0x4ea2 <vfprintf+0x18a>
    4e8c:	18 30       	cpi	r17, 0x08	; 8
    4e8e:	38 f0       	brcs	.+14     	; 0x4e9e <vfprintf+0x186>
    4e90:	27 e0       	ldi	r18, 0x07	; 7
    4e92:	17 e0       	ldi	r17, 0x07	; 7
    4e94:	05 c0       	rjmp	.+10     	; 0x4ea0 <vfprintf+0x188>
    4e96:	27 e0       	ldi	r18, 0x07	; 7
    4e98:	9c e3       	ldi	r25, 0x3C	; 60
    4e9a:	49 2e       	mov	r4, r25
    4e9c:	02 c0       	rjmp	.+4      	; 0x4ea2 <vfprintf+0x18a>
    4e9e:	21 2f       	mov	r18, r17
    4ea0:	41 2c       	mov	r4, r1
    4ea2:	56 01       	movw	r10, r12
    4ea4:	84 e0       	ldi	r24, 0x04	; 4
    4ea6:	a8 0e       	add	r10, r24
    4ea8:	b1 1c       	adc	r11, r1
    4eaa:	f6 01       	movw	r30, r12
    4eac:	60 81       	ld	r22, Z
    4eae:	71 81       	ldd	r23, Z+1	; 0x01
    4eb0:	82 81       	ldd	r24, Z+2	; 0x02
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	04 2d       	mov	r16, r4
    4eb6:	a3 01       	movw	r20, r6
    4eb8:	f1 d5       	rcall	.+3042   	; 0x5a9c <__ftoa_engine>
    4eba:	6c 01       	movw	r12, r24
    4ebc:	f9 81       	ldd	r31, Y+1	; 0x01
    4ebe:	fc 87       	std	Y+12, r31	; 0x0c
    4ec0:	f0 ff       	sbrs	r31, 0
    4ec2:	02 c0       	rjmp	.+4      	; 0x4ec8 <vfprintf+0x1b0>
    4ec4:	f3 ff       	sbrs	r31, 3
    4ec6:	06 c0       	rjmp	.+12     	; 0x4ed4 <vfprintf+0x1bc>
    4ec8:	91 fc       	sbrc	r9, 1
    4eca:	06 c0       	rjmp	.+12     	; 0x4ed8 <vfprintf+0x1c0>
    4ecc:	92 fe       	sbrs	r9, 2
    4ece:	06 c0       	rjmp	.+12     	; 0x4edc <vfprintf+0x1c4>
    4ed0:	00 e2       	ldi	r16, 0x20	; 32
    4ed2:	05 c0       	rjmp	.+10     	; 0x4ede <vfprintf+0x1c6>
    4ed4:	0d e2       	ldi	r16, 0x2D	; 45
    4ed6:	03 c0       	rjmp	.+6      	; 0x4ede <vfprintf+0x1c6>
    4ed8:	0b e2       	ldi	r16, 0x2B	; 43
    4eda:	01 c0       	rjmp	.+2      	; 0x4ede <vfprintf+0x1c6>
    4edc:	00 e0       	ldi	r16, 0x00	; 0
    4ede:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ee0:	8c 70       	andi	r24, 0x0C	; 12
    4ee2:	19 f0       	breq	.+6      	; 0x4eea <vfprintf+0x1d2>
    4ee4:	01 11       	cpse	r16, r1
    4ee6:	43 c2       	rjmp	.+1158   	; 0x536e <vfprintf+0x656>
    4ee8:	80 c2       	rjmp	.+1280   	; 0x53ea <vfprintf+0x6d2>
    4eea:	97 fe       	sbrs	r9, 7
    4eec:	10 c0       	rjmp	.+32     	; 0x4f0e <vfprintf+0x1f6>
    4eee:	4c 0c       	add	r4, r12
    4ef0:	fc 85       	ldd	r31, Y+12	; 0x0c
    4ef2:	f4 ff       	sbrs	r31, 4
    4ef4:	04 c0       	rjmp	.+8      	; 0x4efe <vfprintf+0x1e6>
    4ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef8:	81 33       	cpi	r24, 0x31	; 49
    4efa:	09 f4       	brne	.+2      	; 0x4efe <vfprintf+0x1e6>
    4efc:	4a 94       	dec	r4
    4efe:	14 14       	cp	r1, r4
    4f00:	74 f5       	brge	.+92     	; 0x4f5e <vfprintf+0x246>
    4f02:	28 e0       	ldi	r18, 0x08	; 8
    4f04:	24 15       	cp	r18, r4
    4f06:	78 f5       	brcc	.+94     	; 0x4f66 <vfprintf+0x24e>
    4f08:	88 e0       	ldi	r24, 0x08	; 8
    4f0a:	48 2e       	mov	r4, r24
    4f0c:	2c c0       	rjmp	.+88     	; 0x4f66 <vfprintf+0x24e>
    4f0e:	96 fc       	sbrc	r9, 6
    4f10:	2a c0       	rjmp	.+84     	; 0x4f66 <vfprintf+0x24e>
    4f12:	81 2f       	mov	r24, r17
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	8c 15       	cp	r24, r12
    4f18:	9d 05       	cpc	r25, r13
    4f1a:	9c f0       	brlt	.+38     	; 0x4f42 <vfprintf+0x22a>
    4f1c:	3c ef       	ldi	r19, 0xFC	; 252
    4f1e:	c3 16       	cp	r12, r19
    4f20:	3f ef       	ldi	r19, 0xFF	; 255
    4f22:	d3 06       	cpc	r13, r19
    4f24:	74 f0       	brlt	.+28     	; 0x4f42 <vfprintf+0x22a>
    4f26:	89 2d       	mov	r24, r9
    4f28:	80 68       	ori	r24, 0x80	; 128
    4f2a:	98 2e       	mov	r9, r24
    4f2c:	0a c0       	rjmp	.+20     	; 0x4f42 <vfprintf+0x22a>
    4f2e:	e2 e0       	ldi	r30, 0x02	; 2
    4f30:	f0 e0       	ldi	r31, 0x00	; 0
    4f32:	ec 0f       	add	r30, r28
    4f34:	fd 1f       	adc	r31, r29
    4f36:	e1 0f       	add	r30, r17
    4f38:	f1 1d       	adc	r31, r1
    4f3a:	80 81       	ld	r24, Z
    4f3c:	80 33       	cpi	r24, 0x30	; 48
    4f3e:	19 f4       	brne	.+6      	; 0x4f46 <vfprintf+0x22e>
    4f40:	11 50       	subi	r17, 0x01	; 1
    4f42:	11 11       	cpse	r17, r1
    4f44:	f4 cf       	rjmp	.-24     	; 0x4f2e <vfprintf+0x216>
    4f46:	97 fe       	sbrs	r9, 7
    4f48:	0e c0       	rjmp	.+28     	; 0x4f66 <vfprintf+0x24e>
    4f4a:	44 24       	eor	r4, r4
    4f4c:	43 94       	inc	r4
    4f4e:	41 0e       	add	r4, r17
    4f50:	81 2f       	mov	r24, r17
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	c8 16       	cp	r12, r24
    4f56:	d9 06       	cpc	r13, r25
    4f58:	2c f4       	brge	.+10     	; 0x4f64 <vfprintf+0x24c>
    4f5a:	1c 19       	sub	r17, r12
    4f5c:	04 c0       	rjmp	.+8      	; 0x4f66 <vfprintf+0x24e>
    4f5e:	44 24       	eor	r4, r4
    4f60:	43 94       	inc	r4
    4f62:	01 c0       	rjmp	.+2      	; 0x4f66 <vfprintf+0x24e>
    4f64:	10 e0       	ldi	r17, 0x00	; 0
    4f66:	97 fe       	sbrs	r9, 7
    4f68:	06 c0       	rjmp	.+12     	; 0x4f76 <vfprintf+0x25e>
    4f6a:	1c 14       	cp	r1, r12
    4f6c:	1d 04       	cpc	r1, r13
    4f6e:	34 f4       	brge	.+12     	; 0x4f7c <vfprintf+0x264>
    4f70:	c6 01       	movw	r24, r12
    4f72:	01 96       	adiw	r24, 0x01	; 1
    4f74:	05 c0       	rjmp	.+10     	; 0x4f80 <vfprintf+0x268>
    4f76:	85 e0       	ldi	r24, 0x05	; 5
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	02 c0       	rjmp	.+4      	; 0x4f80 <vfprintf+0x268>
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	01 11       	cpse	r16, r1
    4f82:	01 96       	adiw	r24, 0x01	; 1
    4f84:	11 23       	and	r17, r17
    4f86:	31 f0       	breq	.+12     	; 0x4f94 <vfprintf+0x27c>
    4f88:	21 2f       	mov	r18, r17
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	2f 5f       	subi	r18, 0xFF	; 255
    4f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f90:	82 0f       	add	r24, r18
    4f92:	93 1f       	adc	r25, r19
    4f94:	25 2d       	mov	r18, r5
    4f96:	30 e0       	ldi	r19, 0x00	; 0
    4f98:	82 17       	cp	r24, r18
    4f9a:	93 07       	cpc	r25, r19
    4f9c:	14 f4       	brge	.+4      	; 0x4fa2 <vfprintf+0x28a>
    4f9e:	58 1a       	sub	r5, r24
    4fa0:	01 c0       	rjmp	.+2      	; 0x4fa4 <vfprintf+0x28c>
    4fa2:	51 2c       	mov	r5, r1
    4fa4:	89 2d       	mov	r24, r9
    4fa6:	89 70       	andi	r24, 0x09	; 9
    4fa8:	41 f4       	brne	.+16     	; 0x4fba <vfprintf+0x2a2>
    4faa:	55 20       	and	r5, r5
    4fac:	31 f0       	breq	.+12     	; 0x4fba <vfprintf+0x2a2>
    4fae:	b7 01       	movw	r22, r14
    4fb0:	80 e2       	ldi	r24, 0x20	; 32
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	c0 d6       	rcall	.+3456   	; 0x5d36 <fputc>
    4fb6:	5a 94       	dec	r5
    4fb8:	f8 cf       	rjmp	.-16     	; 0x4faa <vfprintf+0x292>
    4fba:	00 23       	and	r16, r16
    4fbc:	21 f0       	breq	.+8      	; 0x4fc6 <vfprintf+0x2ae>
    4fbe:	b7 01       	movw	r22, r14
    4fc0:	80 2f       	mov	r24, r16
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	b8 d6       	rcall	.+3440   	; 0x5d36 <fputc>
    4fc6:	93 fc       	sbrc	r9, 3
    4fc8:	08 c0       	rjmp	.+16     	; 0x4fda <vfprintf+0x2c2>
    4fca:	55 20       	and	r5, r5
    4fcc:	31 f0       	breq	.+12     	; 0x4fda <vfprintf+0x2c2>
    4fce:	b7 01       	movw	r22, r14
    4fd0:	80 e3       	ldi	r24, 0x30	; 48
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	b0 d6       	rcall	.+3424   	; 0x5d36 <fputc>
    4fd6:	5a 94       	dec	r5
    4fd8:	f8 cf       	rjmp	.-16     	; 0x4fca <vfprintf+0x2b2>
    4fda:	97 fe       	sbrs	r9, 7
    4fdc:	4a c0       	rjmp	.+148    	; 0x5072 <vfprintf+0x35a>
    4fde:	46 01       	movw	r8, r12
    4fe0:	d7 fe       	sbrs	r13, 7
    4fe2:	02 c0       	rjmp	.+4      	; 0x4fe8 <vfprintf+0x2d0>
    4fe4:	81 2c       	mov	r8, r1
    4fe6:	91 2c       	mov	r9, r1
    4fe8:	c6 01       	movw	r24, r12
    4fea:	88 19       	sub	r24, r8
    4fec:	99 09       	sbc	r25, r9
    4fee:	f3 01       	movw	r30, r6
    4ff0:	e8 0f       	add	r30, r24
    4ff2:	f9 1f       	adc	r31, r25
    4ff4:	fe 87       	std	Y+14, r31	; 0x0e
    4ff6:	ed 87       	std	Y+13, r30	; 0x0d
    4ff8:	96 01       	movw	r18, r12
    4ffa:	24 19       	sub	r18, r4
    4ffc:	31 09       	sbc	r19, r1
    4ffe:	38 8b       	std	Y+16, r19	; 0x10
    5000:	2f 87       	std	Y+15, r18	; 0x0f
    5002:	01 2f       	mov	r16, r17
    5004:	10 e0       	ldi	r17, 0x00	; 0
    5006:	11 95       	neg	r17
    5008:	01 95       	neg	r16
    500a:	11 09       	sbc	r17, r1
    500c:	3f ef       	ldi	r19, 0xFF	; 255
    500e:	83 16       	cp	r8, r19
    5010:	93 06       	cpc	r9, r19
    5012:	21 f4       	brne	.+8      	; 0x501c <vfprintf+0x304>
    5014:	b7 01       	movw	r22, r14
    5016:	8e e2       	ldi	r24, 0x2E	; 46
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	8d d6       	rcall	.+3354   	; 0x5d36 <fputc>
    501c:	c8 14       	cp	r12, r8
    501e:	d9 04       	cpc	r13, r9
    5020:	4c f0       	brlt	.+18     	; 0x5034 <vfprintf+0x31c>
    5022:	8f 85       	ldd	r24, Y+15	; 0x0f
    5024:	98 89       	ldd	r25, Y+16	; 0x10
    5026:	88 15       	cp	r24, r8
    5028:	99 05       	cpc	r25, r9
    502a:	24 f4       	brge	.+8      	; 0x5034 <vfprintf+0x31c>
    502c:	ed 85       	ldd	r30, Y+13	; 0x0d
    502e:	fe 85       	ldd	r31, Y+14	; 0x0e
    5030:	81 81       	ldd	r24, Z+1	; 0x01
    5032:	01 c0       	rjmp	.+2      	; 0x5036 <vfprintf+0x31e>
    5034:	80 e3       	ldi	r24, 0x30	; 48
    5036:	f1 e0       	ldi	r31, 0x01	; 1
    5038:	8f 1a       	sub	r8, r31
    503a:	91 08       	sbc	r9, r1
    503c:	2d 85       	ldd	r18, Y+13	; 0x0d
    503e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5040:	2f 5f       	subi	r18, 0xFF	; 255
    5042:	3f 4f       	sbci	r19, 0xFF	; 255
    5044:	3e 87       	std	Y+14, r19	; 0x0e
    5046:	2d 87       	std	Y+13, r18	; 0x0d
    5048:	80 16       	cp	r8, r16
    504a:	91 06       	cpc	r9, r17
    504c:	24 f0       	brlt	.+8      	; 0x5056 <vfprintf+0x33e>
    504e:	b7 01       	movw	r22, r14
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	71 d6       	rcall	.+3298   	; 0x5d36 <fputc>
    5054:	db cf       	rjmp	.-74     	; 0x500c <vfprintf+0x2f4>
    5056:	c8 14       	cp	r12, r8
    5058:	d9 04       	cpc	r13, r9
    505a:	41 f4       	brne	.+16     	; 0x506c <vfprintf+0x354>
    505c:	9a 81       	ldd	r25, Y+2	; 0x02
    505e:	96 33       	cpi	r25, 0x36	; 54
    5060:	20 f4       	brcc	.+8      	; 0x506a <vfprintf+0x352>
    5062:	95 33       	cpi	r25, 0x35	; 53
    5064:	19 f4       	brne	.+6      	; 0x506c <vfprintf+0x354>
    5066:	3c 85       	ldd	r19, Y+12	; 0x0c
    5068:	34 ff       	sbrs	r19, 4
    506a:	81 e3       	ldi	r24, 0x31	; 49
    506c:	b7 01       	movw	r22, r14
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	48 c0       	rjmp	.+144    	; 0x5102 <vfprintf+0x3ea>
    5072:	8a 81       	ldd	r24, Y+2	; 0x02
    5074:	81 33       	cpi	r24, 0x31	; 49
    5076:	19 f0       	breq	.+6      	; 0x507e <vfprintf+0x366>
    5078:	9c 85       	ldd	r25, Y+12	; 0x0c
    507a:	9f 7e       	andi	r25, 0xEF	; 239
    507c:	9c 87       	std	Y+12, r25	; 0x0c
    507e:	b7 01       	movw	r22, r14
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	59 d6       	rcall	.+3250   	; 0x5d36 <fputc>
    5084:	11 11       	cpse	r17, r1
    5086:	05 c0       	rjmp	.+10     	; 0x5092 <vfprintf+0x37a>
    5088:	94 fc       	sbrc	r9, 4
    508a:	16 c0       	rjmp	.+44     	; 0x50b8 <vfprintf+0x3a0>
    508c:	85 e6       	ldi	r24, 0x65	; 101
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	15 c0       	rjmp	.+42     	; 0x50bc <vfprintf+0x3a4>
    5092:	b7 01       	movw	r22, r14
    5094:	8e e2       	ldi	r24, 0x2E	; 46
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	4e d6       	rcall	.+3228   	; 0x5d36 <fputc>
    509a:	1e 5f       	subi	r17, 0xFE	; 254
    509c:	82 e0       	ldi	r24, 0x02	; 2
    509e:	01 e0       	ldi	r16, 0x01	; 1
    50a0:	08 0f       	add	r16, r24
    50a2:	f3 01       	movw	r30, r6
    50a4:	e8 0f       	add	r30, r24
    50a6:	f1 1d       	adc	r31, r1
    50a8:	80 81       	ld	r24, Z
    50aa:	b7 01       	movw	r22, r14
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	43 d6       	rcall	.+3206   	; 0x5d36 <fputc>
    50b0:	80 2f       	mov	r24, r16
    50b2:	01 13       	cpse	r16, r17
    50b4:	f4 cf       	rjmp	.-24     	; 0x509e <vfprintf+0x386>
    50b6:	e8 cf       	rjmp	.-48     	; 0x5088 <vfprintf+0x370>
    50b8:	85 e4       	ldi	r24, 0x45	; 69
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	b7 01       	movw	r22, r14
    50be:	3b d6       	rcall	.+3190   	; 0x5d36 <fputc>
    50c0:	d7 fc       	sbrc	r13, 7
    50c2:	06 c0       	rjmp	.+12     	; 0x50d0 <vfprintf+0x3b8>
    50c4:	c1 14       	cp	r12, r1
    50c6:	d1 04       	cpc	r13, r1
    50c8:	41 f4       	brne	.+16     	; 0x50da <vfprintf+0x3c2>
    50ca:	ec 85       	ldd	r30, Y+12	; 0x0c
    50cc:	e4 ff       	sbrs	r30, 4
    50ce:	05 c0       	rjmp	.+10     	; 0x50da <vfprintf+0x3c2>
    50d0:	d1 94       	neg	r13
    50d2:	c1 94       	neg	r12
    50d4:	d1 08       	sbc	r13, r1
    50d6:	8d e2       	ldi	r24, 0x2D	; 45
    50d8:	01 c0       	rjmp	.+2      	; 0x50dc <vfprintf+0x3c4>
    50da:	8b e2       	ldi	r24, 0x2B	; 43
    50dc:	b7 01       	movw	r22, r14
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	2a d6       	rcall	.+3156   	; 0x5d36 <fputc>
    50e2:	80 e3       	ldi	r24, 0x30	; 48
    50e4:	2a e0       	ldi	r18, 0x0A	; 10
    50e6:	c2 16       	cp	r12, r18
    50e8:	d1 04       	cpc	r13, r1
    50ea:	2c f0       	brlt	.+10     	; 0x50f6 <vfprintf+0x3de>
    50ec:	8f 5f       	subi	r24, 0xFF	; 255
    50ee:	fa e0       	ldi	r31, 0x0A	; 10
    50f0:	cf 1a       	sub	r12, r31
    50f2:	d1 08       	sbc	r13, r1
    50f4:	f7 cf       	rjmp	.-18     	; 0x50e4 <vfprintf+0x3cc>
    50f6:	b7 01       	movw	r22, r14
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	1d d6       	rcall	.+3130   	; 0x5d36 <fputc>
    50fc:	b7 01       	movw	r22, r14
    50fe:	c6 01       	movw	r24, r12
    5100:	c0 96       	adiw	r24, 0x30	; 48
    5102:	19 d6       	rcall	.+3122   	; 0x5d36 <fputc>
    5104:	49 c1       	rjmp	.+658    	; 0x5398 <vfprintf+0x680>
    5106:	83 36       	cpi	r24, 0x63	; 99
    5108:	31 f0       	breq	.+12     	; 0x5116 <vfprintf+0x3fe>
    510a:	83 37       	cpi	r24, 0x73	; 115
    510c:	79 f0       	breq	.+30     	; 0x512c <vfprintf+0x414>
    510e:	83 35       	cpi	r24, 0x53	; 83
    5110:	09 f0       	breq	.+2      	; 0x5114 <vfprintf+0x3fc>
    5112:	52 c0       	rjmp	.+164    	; 0x51b8 <vfprintf+0x4a0>
    5114:	1f c0       	rjmp	.+62     	; 0x5154 <vfprintf+0x43c>
    5116:	56 01       	movw	r10, r12
    5118:	32 e0       	ldi	r19, 0x02	; 2
    511a:	a3 0e       	add	r10, r19
    511c:	b1 1c       	adc	r11, r1
    511e:	f6 01       	movw	r30, r12
    5120:	80 81       	ld	r24, Z
    5122:	89 83       	std	Y+1, r24	; 0x01
    5124:	01 e0       	ldi	r16, 0x01	; 1
    5126:	10 e0       	ldi	r17, 0x00	; 0
    5128:	63 01       	movw	r12, r6
    512a:	11 c0       	rjmp	.+34     	; 0x514e <vfprintf+0x436>
    512c:	56 01       	movw	r10, r12
    512e:	f2 e0       	ldi	r31, 0x02	; 2
    5130:	af 0e       	add	r10, r31
    5132:	b1 1c       	adc	r11, r1
    5134:	f6 01       	movw	r30, r12
    5136:	c0 80       	ld	r12, Z
    5138:	d1 80       	ldd	r13, Z+1	; 0x01
    513a:	96 fe       	sbrs	r9, 6
    513c:	03 c0       	rjmp	.+6      	; 0x5144 <vfprintf+0x42c>
    513e:	61 2f       	mov	r22, r17
    5140:	70 e0       	ldi	r23, 0x00	; 0
    5142:	02 c0       	rjmp	.+4      	; 0x5148 <vfprintf+0x430>
    5144:	6f ef       	ldi	r22, 0xFF	; 255
    5146:	7f ef       	ldi	r23, 0xFF	; 255
    5148:	c6 01       	movw	r24, r12
    514a:	ea d5       	rcall	.+3028   	; 0x5d20 <strnlen>
    514c:	8c 01       	movw	r16, r24
    514e:	f9 2d       	mov	r31, r9
    5150:	ff 77       	andi	r31, 0x7F	; 127
    5152:	13 c0       	rjmp	.+38     	; 0x517a <vfprintf+0x462>
    5154:	56 01       	movw	r10, r12
    5156:	22 e0       	ldi	r18, 0x02	; 2
    5158:	a2 0e       	add	r10, r18
    515a:	b1 1c       	adc	r11, r1
    515c:	f6 01       	movw	r30, r12
    515e:	c0 80       	ld	r12, Z
    5160:	d1 80       	ldd	r13, Z+1	; 0x01
    5162:	96 fe       	sbrs	r9, 6
    5164:	03 c0       	rjmp	.+6      	; 0x516c <vfprintf+0x454>
    5166:	61 2f       	mov	r22, r17
    5168:	70 e0       	ldi	r23, 0x00	; 0
    516a:	02 c0       	rjmp	.+4      	; 0x5170 <vfprintf+0x458>
    516c:	6f ef       	ldi	r22, 0xFF	; 255
    516e:	7f ef       	ldi	r23, 0xFF	; 255
    5170:	c6 01       	movw	r24, r12
    5172:	6c d5       	rcall	.+2776   	; 0x5c4c <strnlen_P>
    5174:	8c 01       	movw	r16, r24
    5176:	f9 2d       	mov	r31, r9
    5178:	f0 68       	ori	r31, 0x80	; 128
    517a:	9f 2e       	mov	r9, r31
    517c:	f3 fd       	sbrc	r31, 3
    517e:	18 c0       	rjmp	.+48     	; 0x51b0 <vfprintf+0x498>
    5180:	85 2d       	mov	r24, r5
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	08 17       	cp	r16, r24
    5186:	19 07       	cpc	r17, r25
    5188:	98 f4       	brcc	.+38     	; 0x51b0 <vfprintf+0x498>
    518a:	b7 01       	movw	r22, r14
    518c:	80 e2       	ldi	r24, 0x20	; 32
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	d2 d5       	rcall	.+2980   	; 0x5d36 <fputc>
    5192:	5a 94       	dec	r5
    5194:	f5 cf       	rjmp	.-22     	; 0x5180 <vfprintf+0x468>
    5196:	f6 01       	movw	r30, r12
    5198:	97 fc       	sbrc	r9, 7
    519a:	85 91       	lpm	r24, Z+
    519c:	97 fe       	sbrs	r9, 7
    519e:	81 91       	ld	r24, Z+
    51a0:	6f 01       	movw	r12, r30
    51a2:	b7 01       	movw	r22, r14
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	c7 d5       	rcall	.+2958   	; 0x5d36 <fputc>
    51a8:	51 10       	cpse	r5, r1
    51aa:	5a 94       	dec	r5
    51ac:	01 50       	subi	r16, 0x01	; 1
    51ae:	11 09       	sbc	r17, r1
    51b0:	01 15       	cp	r16, r1
    51b2:	11 05       	cpc	r17, r1
    51b4:	81 f7       	brne	.-32     	; 0x5196 <vfprintf+0x47e>
    51b6:	f0 c0       	rjmp	.+480    	; 0x5398 <vfprintf+0x680>
    51b8:	84 36       	cpi	r24, 0x64	; 100
    51ba:	11 f0       	breq	.+4      	; 0x51c0 <vfprintf+0x4a8>
    51bc:	89 36       	cpi	r24, 0x69	; 105
    51be:	59 f5       	brne	.+86     	; 0x5216 <vfprintf+0x4fe>
    51c0:	56 01       	movw	r10, r12
    51c2:	97 fe       	sbrs	r9, 7
    51c4:	09 c0       	rjmp	.+18     	; 0x51d8 <vfprintf+0x4c0>
    51c6:	24 e0       	ldi	r18, 0x04	; 4
    51c8:	a2 0e       	add	r10, r18
    51ca:	b1 1c       	adc	r11, r1
    51cc:	f6 01       	movw	r30, r12
    51ce:	60 81       	ld	r22, Z
    51d0:	71 81       	ldd	r23, Z+1	; 0x01
    51d2:	82 81       	ldd	r24, Z+2	; 0x02
    51d4:	93 81       	ldd	r25, Z+3	; 0x03
    51d6:	0a c0       	rjmp	.+20     	; 0x51ec <vfprintf+0x4d4>
    51d8:	f2 e0       	ldi	r31, 0x02	; 2
    51da:	af 0e       	add	r10, r31
    51dc:	b1 1c       	adc	r11, r1
    51de:	f6 01       	movw	r30, r12
    51e0:	60 81       	ld	r22, Z
    51e2:	71 81       	ldd	r23, Z+1	; 0x01
    51e4:	07 2e       	mov	r0, r23
    51e6:	00 0c       	add	r0, r0
    51e8:	88 0b       	sbc	r24, r24
    51ea:	99 0b       	sbc	r25, r25
    51ec:	f9 2d       	mov	r31, r9
    51ee:	ff 76       	andi	r31, 0x6F	; 111
    51f0:	9f 2e       	mov	r9, r31
    51f2:	97 ff       	sbrs	r25, 7
    51f4:	09 c0       	rjmp	.+18     	; 0x5208 <vfprintf+0x4f0>
    51f6:	90 95       	com	r25
    51f8:	80 95       	com	r24
    51fa:	70 95       	com	r23
    51fc:	61 95       	neg	r22
    51fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5200:	8f 4f       	sbci	r24, 0xFF	; 255
    5202:	9f 4f       	sbci	r25, 0xFF	; 255
    5204:	f0 68       	ori	r31, 0x80	; 128
    5206:	9f 2e       	mov	r9, r31
    5208:	2a e0       	ldi	r18, 0x0A	; 10
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	a3 01       	movw	r20, r6
    520e:	42 d6       	rcall	.+3204   	; 0x5e94 <__ultoa_invert>
    5210:	c8 2e       	mov	r12, r24
    5212:	c6 18       	sub	r12, r6
    5214:	3e c0       	rjmp	.+124    	; 0x5292 <vfprintf+0x57a>
    5216:	09 2d       	mov	r16, r9
    5218:	85 37       	cpi	r24, 0x75	; 117
    521a:	21 f4       	brne	.+8      	; 0x5224 <vfprintf+0x50c>
    521c:	0f 7e       	andi	r16, 0xEF	; 239
    521e:	2a e0       	ldi	r18, 0x0A	; 10
    5220:	30 e0       	ldi	r19, 0x00	; 0
    5222:	1d c0       	rjmp	.+58     	; 0x525e <vfprintf+0x546>
    5224:	09 7f       	andi	r16, 0xF9	; 249
    5226:	8f 36       	cpi	r24, 0x6F	; 111
    5228:	91 f0       	breq	.+36     	; 0x524e <vfprintf+0x536>
    522a:	18 f4       	brcc	.+6      	; 0x5232 <vfprintf+0x51a>
    522c:	88 35       	cpi	r24, 0x58	; 88
    522e:	59 f0       	breq	.+22     	; 0x5246 <vfprintf+0x52e>
    5230:	bc c0       	rjmp	.+376    	; 0x53aa <vfprintf+0x692>
    5232:	80 37       	cpi	r24, 0x70	; 112
    5234:	19 f0       	breq	.+6      	; 0x523c <vfprintf+0x524>
    5236:	88 37       	cpi	r24, 0x78	; 120
    5238:	11 f0       	breq	.+4      	; 0x523e <vfprintf+0x526>
    523a:	b7 c0       	rjmp	.+366    	; 0x53aa <vfprintf+0x692>
    523c:	00 61       	ori	r16, 0x10	; 16
    523e:	04 ff       	sbrs	r16, 4
    5240:	09 c0       	rjmp	.+18     	; 0x5254 <vfprintf+0x53c>
    5242:	04 60       	ori	r16, 0x04	; 4
    5244:	07 c0       	rjmp	.+14     	; 0x5254 <vfprintf+0x53c>
    5246:	94 fe       	sbrs	r9, 4
    5248:	08 c0       	rjmp	.+16     	; 0x525a <vfprintf+0x542>
    524a:	06 60       	ori	r16, 0x06	; 6
    524c:	06 c0       	rjmp	.+12     	; 0x525a <vfprintf+0x542>
    524e:	28 e0       	ldi	r18, 0x08	; 8
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	05 c0       	rjmp	.+10     	; 0x525e <vfprintf+0x546>
    5254:	20 e1       	ldi	r18, 0x10	; 16
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	02 c0       	rjmp	.+4      	; 0x525e <vfprintf+0x546>
    525a:	20 e1       	ldi	r18, 0x10	; 16
    525c:	32 e0       	ldi	r19, 0x02	; 2
    525e:	56 01       	movw	r10, r12
    5260:	07 ff       	sbrs	r16, 7
    5262:	09 c0       	rjmp	.+18     	; 0x5276 <vfprintf+0x55e>
    5264:	84 e0       	ldi	r24, 0x04	; 4
    5266:	a8 0e       	add	r10, r24
    5268:	b1 1c       	adc	r11, r1
    526a:	f6 01       	movw	r30, r12
    526c:	60 81       	ld	r22, Z
    526e:	71 81       	ldd	r23, Z+1	; 0x01
    5270:	82 81       	ldd	r24, Z+2	; 0x02
    5272:	93 81       	ldd	r25, Z+3	; 0x03
    5274:	08 c0       	rjmp	.+16     	; 0x5286 <vfprintf+0x56e>
    5276:	f2 e0       	ldi	r31, 0x02	; 2
    5278:	af 0e       	add	r10, r31
    527a:	b1 1c       	adc	r11, r1
    527c:	f6 01       	movw	r30, r12
    527e:	60 81       	ld	r22, Z
    5280:	71 81       	ldd	r23, Z+1	; 0x01
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	a3 01       	movw	r20, r6
    5288:	05 d6       	rcall	.+3082   	; 0x5e94 <__ultoa_invert>
    528a:	c8 2e       	mov	r12, r24
    528c:	c6 18       	sub	r12, r6
    528e:	0f 77       	andi	r16, 0x7F	; 127
    5290:	90 2e       	mov	r9, r16
    5292:	96 fe       	sbrs	r9, 6
    5294:	0b c0       	rjmp	.+22     	; 0x52ac <vfprintf+0x594>
    5296:	09 2d       	mov	r16, r9
    5298:	0e 7f       	andi	r16, 0xFE	; 254
    529a:	c1 16       	cp	r12, r17
    529c:	50 f4       	brcc	.+20     	; 0x52b2 <vfprintf+0x59a>
    529e:	94 fe       	sbrs	r9, 4
    52a0:	0a c0       	rjmp	.+20     	; 0x52b6 <vfprintf+0x59e>
    52a2:	92 fc       	sbrc	r9, 2
    52a4:	08 c0       	rjmp	.+16     	; 0x52b6 <vfprintf+0x59e>
    52a6:	09 2d       	mov	r16, r9
    52a8:	0e 7e       	andi	r16, 0xEE	; 238
    52aa:	05 c0       	rjmp	.+10     	; 0x52b6 <vfprintf+0x59e>
    52ac:	dc 2c       	mov	r13, r12
    52ae:	09 2d       	mov	r16, r9
    52b0:	03 c0       	rjmp	.+6      	; 0x52b8 <vfprintf+0x5a0>
    52b2:	dc 2c       	mov	r13, r12
    52b4:	01 c0       	rjmp	.+2      	; 0x52b8 <vfprintf+0x5a0>
    52b6:	d1 2e       	mov	r13, r17
    52b8:	04 ff       	sbrs	r16, 4
    52ba:	0d c0       	rjmp	.+26     	; 0x52d6 <vfprintf+0x5be>
    52bc:	fe 01       	movw	r30, r28
    52be:	ec 0d       	add	r30, r12
    52c0:	f1 1d       	adc	r31, r1
    52c2:	80 81       	ld	r24, Z
    52c4:	80 33       	cpi	r24, 0x30	; 48
    52c6:	11 f4       	brne	.+4      	; 0x52cc <vfprintf+0x5b4>
    52c8:	09 7e       	andi	r16, 0xE9	; 233
    52ca:	09 c0       	rjmp	.+18     	; 0x52de <vfprintf+0x5c6>
    52cc:	02 ff       	sbrs	r16, 2
    52ce:	06 c0       	rjmp	.+12     	; 0x52dc <vfprintf+0x5c4>
    52d0:	d3 94       	inc	r13
    52d2:	d3 94       	inc	r13
    52d4:	04 c0       	rjmp	.+8      	; 0x52de <vfprintf+0x5c6>
    52d6:	80 2f       	mov	r24, r16
    52d8:	86 78       	andi	r24, 0x86	; 134
    52da:	09 f0       	breq	.+2      	; 0x52de <vfprintf+0x5c6>
    52dc:	d3 94       	inc	r13
    52de:	03 fd       	sbrc	r16, 3
    52e0:	10 c0       	rjmp	.+32     	; 0x5302 <vfprintf+0x5ea>
    52e2:	00 ff       	sbrs	r16, 0
    52e4:	06 c0       	rjmp	.+12     	; 0x52f2 <vfprintf+0x5da>
    52e6:	1c 2d       	mov	r17, r12
    52e8:	d5 14       	cp	r13, r5
    52ea:	78 f4       	brcc	.+30     	; 0x530a <vfprintf+0x5f2>
    52ec:	15 0d       	add	r17, r5
    52ee:	1d 19       	sub	r17, r13
    52f0:	0c c0       	rjmp	.+24     	; 0x530a <vfprintf+0x5f2>
    52f2:	d5 14       	cp	r13, r5
    52f4:	50 f4       	brcc	.+20     	; 0x530a <vfprintf+0x5f2>
    52f6:	b7 01       	movw	r22, r14
    52f8:	80 e2       	ldi	r24, 0x20	; 32
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	1c d5       	rcall	.+2616   	; 0x5d36 <fputc>
    52fe:	d3 94       	inc	r13
    5300:	f8 cf       	rjmp	.-16     	; 0x52f2 <vfprintf+0x5da>
    5302:	d5 14       	cp	r13, r5
    5304:	10 f4       	brcc	.+4      	; 0x530a <vfprintf+0x5f2>
    5306:	5d 18       	sub	r5, r13
    5308:	01 c0       	rjmp	.+2      	; 0x530c <vfprintf+0x5f4>
    530a:	51 2c       	mov	r5, r1
    530c:	04 ff       	sbrs	r16, 4
    530e:	0f c0       	rjmp	.+30     	; 0x532e <vfprintf+0x616>
    5310:	b7 01       	movw	r22, r14
    5312:	80 e3       	ldi	r24, 0x30	; 48
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	0f d5       	rcall	.+2590   	; 0x5d36 <fputc>
    5318:	02 ff       	sbrs	r16, 2
    531a:	16 c0       	rjmp	.+44     	; 0x5348 <vfprintf+0x630>
    531c:	01 fd       	sbrc	r16, 1
    531e:	03 c0       	rjmp	.+6      	; 0x5326 <vfprintf+0x60e>
    5320:	88 e7       	ldi	r24, 0x78	; 120
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	02 c0       	rjmp	.+4      	; 0x532a <vfprintf+0x612>
    5326:	88 e5       	ldi	r24, 0x58	; 88
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	b7 01       	movw	r22, r14
    532c:	0c c0       	rjmp	.+24     	; 0x5346 <vfprintf+0x62e>
    532e:	80 2f       	mov	r24, r16
    5330:	86 78       	andi	r24, 0x86	; 134
    5332:	51 f0       	breq	.+20     	; 0x5348 <vfprintf+0x630>
    5334:	01 ff       	sbrs	r16, 1
    5336:	02 c0       	rjmp	.+4      	; 0x533c <vfprintf+0x624>
    5338:	8b e2       	ldi	r24, 0x2B	; 43
    533a:	01 c0       	rjmp	.+2      	; 0x533e <vfprintf+0x626>
    533c:	80 e2       	ldi	r24, 0x20	; 32
    533e:	07 fd       	sbrc	r16, 7
    5340:	8d e2       	ldi	r24, 0x2D	; 45
    5342:	b7 01       	movw	r22, r14
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	f7 d4       	rcall	.+2542   	; 0x5d36 <fputc>
    5348:	c1 16       	cp	r12, r17
    534a:	30 f4       	brcc	.+12     	; 0x5358 <vfprintf+0x640>
    534c:	b7 01       	movw	r22, r14
    534e:	80 e3       	ldi	r24, 0x30	; 48
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	f1 d4       	rcall	.+2530   	; 0x5d36 <fputc>
    5354:	11 50       	subi	r17, 0x01	; 1
    5356:	f8 cf       	rjmp	.-16     	; 0x5348 <vfprintf+0x630>
    5358:	ca 94       	dec	r12
    535a:	f3 01       	movw	r30, r6
    535c:	ec 0d       	add	r30, r12
    535e:	f1 1d       	adc	r31, r1
    5360:	80 81       	ld	r24, Z
    5362:	b7 01       	movw	r22, r14
    5364:	90 e0       	ldi	r25, 0x00	; 0
    5366:	e7 d4       	rcall	.+2510   	; 0x5d36 <fputc>
    5368:	c1 10       	cpse	r12, r1
    536a:	f6 cf       	rjmp	.-20     	; 0x5358 <vfprintf+0x640>
    536c:	15 c0       	rjmp	.+42     	; 0x5398 <vfprintf+0x680>
    536e:	f4 e0       	ldi	r31, 0x04	; 4
    5370:	f5 15       	cp	r31, r5
    5372:	50 f5       	brcc	.+84     	; 0x53c8 <vfprintf+0x6b0>
    5374:	84 e0       	ldi	r24, 0x04	; 4
    5376:	58 1a       	sub	r5, r24
    5378:	93 fe       	sbrs	r9, 3
    537a:	1e c0       	rjmp	.+60     	; 0x53b8 <vfprintf+0x6a0>
    537c:	01 11       	cpse	r16, r1
    537e:	25 c0       	rjmp	.+74     	; 0x53ca <vfprintf+0x6b2>
    5380:	2c 85       	ldd	r18, Y+12	; 0x0c
    5382:	23 ff       	sbrs	r18, 3
    5384:	27 c0       	rjmp	.+78     	; 0x53d4 <vfprintf+0x6bc>
    5386:	0a e9       	ldi	r16, 0x9A	; 154
    5388:	11 e0       	ldi	r17, 0x01	; 1
    538a:	39 2d       	mov	r19, r9
    538c:	30 71       	andi	r19, 0x10	; 16
    538e:	93 2e       	mov	r9, r19
    5390:	f8 01       	movw	r30, r16
    5392:	84 91       	lpm	r24, Z
    5394:	81 11       	cpse	r24, r1
    5396:	21 c0       	rjmp	.+66     	; 0x53da <vfprintf+0x6c2>
    5398:	55 20       	and	r5, r5
    539a:	09 f4       	brne	.+2      	; 0x539e <vfprintf+0x686>
    539c:	fc cc       	rjmp	.-1544   	; 0x4d96 <vfprintf+0x7e>
    539e:	b7 01       	movw	r22, r14
    53a0:	80 e2       	ldi	r24, 0x20	; 32
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	c8 d4       	rcall	.+2448   	; 0x5d36 <fputc>
    53a6:	5a 94       	dec	r5
    53a8:	f7 cf       	rjmp	.-18     	; 0x5398 <vfprintf+0x680>
    53aa:	f7 01       	movw	r30, r14
    53ac:	86 81       	ldd	r24, Z+6	; 0x06
    53ae:	97 81       	ldd	r25, Z+7	; 0x07
    53b0:	23 c0       	rjmp	.+70     	; 0x53f8 <vfprintf+0x6e0>
    53b2:	8f ef       	ldi	r24, 0xFF	; 255
    53b4:	9f ef       	ldi	r25, 0xFF	; 255
    53b6:	20 c0       	rjmp	.+64     	; 0x53f8 <vfprintf+0x6e0>
    53b8:	b7 01       	movw	r22, r14
    53ba:	80 e2       	ldi	r24, 0x20	; 32
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	bb d4       	rcall	.+2422   	; 0x5d36 <fputc>
    53c0:	5a 94       	dec	r5
    53c2:	51 10       	cpse	r5, r1
    53c4:	f9 cf       	rjmp	.-14     	; 0x53b8 <vfprintf+0x6a0>
    53c6:	da cf       	rjmp	.-76     	; 0x537c <vfprintf+0x664>
    53c8:	51 2c       	mov	r5, r1
    53ca:	b7 01       	movw	r22, r14
    53cc:	80 2f       	mov	r24, r16
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	b2 d4       	rcall	.+2404   	; 0x5d36 <fputc>
    53d2:	d6 cf       	rjmp	.-84     	; 0x5380 <vfprintf+0x668>
    53d4:	0e e9       	ldi	r16, 0x9E	; 158
    53d6:	11 e0       	ldi	r17, 0x01	; 1
    53d8:	d8 cf       	rjmp	.-80     	; 0x538a <vfprintf+0x672>
    53da:	91 10       	cpse	r9, r1
    53dc:	80 52       	subi	r24, 0x20	; 32
    53de:	b7 01       	movw	r22, r14
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	a9 d4       	rcall	.+2386   	; 0x5d36 <fputc>
    53e4:	0f 5f       	subi	r16, 0xFF	; 255
    53e6:	1f 4f       	sbci	r17, 0xFF	; 255
    53e8:	d3 cf       	rjmp	.-90     	; 0x5390 <vfprintf+0x678>
    53ea:	23 e0       	ldi	r18, 0x03	; 3
    53ec:	25 15       	cp	r18, r5
    53ee:	10 f4       	brcc	.+4      	; 0x53f4 <vfprintf+0x6dc>
    53f0:	83 e0       	ldi	r24, 0x03	; 3
    53f2:	c1 cf       	rjmp	.-126    	; 0x5376 <vfprintf+0x65e>
    53f4:	51 2c       	mov	r5, r1
    53f6:	c4 cf       	rjmp	.-120    	; 0x5380 <vfprintf+0x668>
    53f8:	60 96       	adiw	r28, 0x10	; 16
    53fa:	0f b6       	in	r0, 0x3f	; 63
    53fc:	f8 94       	cli
    53fe:	de bf       	out	0x3e, r29	; 62
    5400:	0f be       	out	0x3f, r0	; 63
    5402:	cd bf       	out	0x3d, r28	; 61
    5404:	df 91       	pop	r29
    5406:	cf 91       	pop	r28
    5408:	1f 91       	pop	r17
    540a:	0f 91       	pop	r16
    540c:	ff 90       	pop	r15
    540e:	ef 90       	pop	r14
    5410:	df 90       	pop	r13
    5412:	cf 90       	pop	r12
    5414:	bf 90       	pop	r11
    5416:	af 90       	pop	r10
    5418:	9f 90       	pop	r9
    541a:	8f 90       	pop	r8
    541c:	7f 90       	pop	r7
    541e:	6f 90       	pop	r6
    5420:	5f 90       	pop	r5
    5422:	4f 90       	pop	r4
    5424:	3f 90       	pop	r3
    5426:	2f 90       	pop	r2
    5428:	08 95       	ret

0000542a <__subsf3>:
    542a:	50 58       	subi	r21, 0x80	; 128

0000542c <__addsf3>:
    542c:	bb 27       	eor	r27, r27
    542e:	aa 27       	eor	r26, r26
    5430:	0e d0       	rcall	.+28     	; 0x544e <__addsf3x>
    5432:	48 c1       	rjmp	.+656    	; 0x56c4 <__fp_round>
    5434:	39 d1       	rcall	.+626    	; 0x56a8 <__fp_pscA>
    5436:	30 f0       	brcs	.+12     	; 0x5444 <__addsf3+0x18>
    5438:	3e d1       	rcall	.+636    	; 0x56b6 <__fp_pscB>
    543a:	20 f0       	brcs	.+8      	; 0x5444 <__addsf3+0x18>
    543c:	31 f4       	brne	.+12     	; 0x544a <__addsf3+0x1e>
    543e:	9f 3f       	cpi	r25, 0xFF	; 255
    5440:	11 f4       	brne	.+4      	; 0x5446 <__addsf3+0x1a>
    5442:	1e f4       	brtc	.+6      	; 0x544a <__addsf3+0x1e>
    5444:	2e c1       	rjmp	.+604    	; 0x56a2 <__fp_nan>
    5446:	0e f4       	brtc	.+2      	; 0x544a <__addsf3+0x1e>
    5448:	e0 95       	com	r30
    544a:	e7 fb       	bst	r30, 7
    544c:	24 c1       	rjmp	.+584    	; 0x5696 <__fp_inf>

0000544e <__addsf3x>:
    544e:	e9 2f       	mov	r30, r25
    5450:	4a d1       	rcall	.+660    	; 0x56e6 <__fp_split3>
    5452:	80 f3       	brcs	.-32     	; 0x5434 <__addsf3+0x8>
    5454:	ba 17       	cp	r27, r26
    5456:	62 07       	cpc	r22, r18
    5458:	73 07       	cpc	r23, r19
    545a:	84 07       	cpc	r24, r20
    545c:	95 07       	cpc	r25, r21
    545e:	18 f0       	brcs	.+6      	; 0x5466 <__addsf3x+0x18>
    5460:	71 f4       	brne	.+28     	; 0x547e <__addsf3x+0x30>
    5462:	9e f5       	brtc	.+102    	; 0x54ca <__addsf3x+0x7c>
    5464:	62 c1       	rjmp	.+708    	; 0x572a <__fp_zero>
    5466:	0e f4       	brtc	.+2      	; 0x546a <__addsf3x+0x1c>
    5468:	e0 95       	com	r30
    546a:	0b 2e       	mov	r0, r27
    546c:	ba 2f       	mov	r27, r26
    546e:	a0 2d       	mov	r26, r0
    5470:	0b 01       	movw	r0, r22
    5472:	b9 01       	movw	r22, r18
    5474:	90 01       	movw	r18, r0
    5476:	0c 01       	movw	r0, r24
    5478:	ca 01       	movw	r24, r20
    547a:	a0 01       	movw	r20, r0
    547c:	11 24       	eor	r1, r1
    547e:	ff 27       	eor	r31, r31
    5480:	59 1b       	sub	r21, r25
    5482:	99 f0       	breq	.+38     	; 0x54aa <__addsf3x+0x5c>
    5484:	59 3f       	cpi	r21, 0xF9	; 249
    5486:	50 f4       	brcc	.+20     	; 0x549c <__addsf3x+0x4e>
    5488:	50 3e       	cpi	r21, 0xE0	; 224
    548a:	68 f1       	brcs	.+90     	; 0x54e6 <__addsf3x+0x98>
    548c:	1a 16       	cp	r1, r26
    548e:	f0 40       	sbci	r31, 0x00	; 0
    5490:	a2 2f       	mov	r26, r18
    5492:	23 2f       	mov	r18, r19
    5494:	34 2f       	mov	r19, r20
    5496:	44 27       	eor	r20, r20
    5498:	58 5f       	subi	r21, 0xF8	; 248
    549a:	f3 cf       	rjmp	.-26     	; 0x5482 <__addsf3x+0x34>
    549c:	46 95       	lsr	r20
    549e:	37 95       	ror	r19
    54a0:	27 95       	ror	r18
    54a2:	a7 95       	ror	r26
    54a4:	f0 40       	sbci	r31, 0x00	; 0
    54a6:	53 95       	inc	r21
    54a8:	c9 f7       	brne	.-14     	; 0x549c <__addsf3x+0x4e>
    54aa:	7e f4       	brtc	.+30     	; 0x54ca <__addsf3x+0x7c>
    54ac:	1f 16       	cp	r1, r31
    54ae:	ba 0b       	sbc	r27, r26
    54b0:	62 0b       	sbc	r22, r18
    54b2:	73 0b       	sbc	r23, r19
    54b4:	84 0b       	sbc	r24, r20
    54b6:	ba f0       	brmi	.+46     	; 0x54e6 <__addsf3x+0x98>
    54b8:	91 50       	subi	r25, 0x01	; 1
    54ba:	a1 f0       	breq	.+40     	; 0x54e4 <__addsf3x+0x96>
    54bc:	ff 0f       	add	r31, r31
    54be:	bb 1f       	adc	r27, r27
    54c0:	66 1f       	adc	r22, r22
    54c2:	77 1f       	adc	r23, r23
    54c4:	88 1f       	adc	r24, r24
    54c6:	c2 f7       	brpl	.-16     	; 0x54b8 <__addsf3x+0x6a>
    54c8:	0e c0       	rjmp	.+28     	; 0x54e6 <__addsf3x+0x98>
    54ca:	ba 0f       	add	r27, r26
    54cc:	62 1f       	adc	r22, r18
    54ce:	73 1f       	adc	r23, r19
    54d0:	84 1f       	adc	r24, r20
    54d2:	48 f4       	brcc	.+18     	; 0x54e6 <__addsf3x+0x98>
    54d4:	87 95       	ror	r24
    54d6:	77 95       	ror	r23
    54d8:	67 95       	ror	r22
    54da:	b7 95       	ror	r27
    54dc:	f7 95       	ror	r31
    54de:	9e 3f       	cpi	r25, 0xFE	; 254
    54e0:	08 f0       	brcs	.+2      	; 0x54e4 <__addsf3x+0x96>
    54e2:	b3 cf       	rjmp	.-154    	; 0x544a <__addsf3+0x1e>
    54e4:	93 95       	inc	r25
    54e6:	88 0f       	add	r24, r24
    54e8:	08 f0       	brcs	.+2      	; 0x54ec <__addsf3x+0x9e>
    54ea:	99 27       	eor	r25, r25
    54ec:	ee 0f       	add	r30, r30
    54ee:	97 95       	ror	r25
    54f0:	87 95       	ror	r24
    54f2:	08 95       	ret

000054f4 <__divsf3>:
    54f4:	0c d0       	rcall	.+24     	; 0x550e <__divsf3x>
    54f6:	e6 c0       	rjmp	.+460    	; 0x56c4 <__fp_round>
    54f8:	de d0       	rcall	.+444    	; 0x56b6 <__fp_pscB>
    54fa:	40 f0       	brcs	.+16     	; 0x550c <__divsf3+0x18>
    54fc:	d5 d0       	rcall	.+426    	; 0x56a8 <__fp_pscA>
    54fe:	30 f0       	brcs	.+12     	; 0x550c <__divsf3+0x18>
    5500:	21 f4       	brne	.+8      	; 0x550a <__divsf3+0x16>
    5502:	5f 3f       	cpi	r21, 0xFF	; 255
    5504:	19 f0       	breq	.+6      	; 0x550c <__divsf3+0x18>
    5506:	c7 c0       	rjmp	.+398    	; 0x5696 <__fp_inf>
    5508:	51 11       	cpse	r21, r1
    550a:	10 c1       	rjmp	.+544    	; 0x572c <__fp_szero>
    550c:	ca c0       	rjmp	.+404    	; 0x56a2 <__fp_nan>

0000550e <__divsf3x>:
    550e:	eb d0       	rcall	.+470    	; 0x56e6 <__fp_split3>
    5510:	98 f3       	brcs	.-26     	; 0x54f8 <__divsf3+0x4>

00005512 <__divsf3_pse>:
    5512:	99 23       	and	r25, r25
    5514:	c9 f3       	breq	.-14     	; 0x5508 <__divsf3+0x14>
    5516:	55 23       	and	r21, r21
    5518:	b1 f3       	breq	.-20     	; 0x5506 <__divsf3+0x12>
    551a:	95 1b       	sub	r25, r21
    551c:	55 0b       	sbc	r21, r21
    551e:	bb 27       	eor	r27, r27
    5520:	aa 27       	eor	r26, r26
    5522:	62 17       	cp	r22, r18
    5524:	73 07       	cpc	r23, r19
    5526:	84 07       	cpc	r24, r20
    5528:	38 f0       	brcs	.+14     	; 0x5538 <__divsf3_pse+0x26>
    552a:	9f 5f       	subi	r25, 0xFF	; 255
    552c:	5f 4f       	sbci	r21, 0xFF	; 255
    552e:	22 0f       	add	r18, r18
    5530:	33 1f       	adc	r19, r19
    5532:	44 1f       	adc	r20, r20
    5534:	aa 1f       	adc	r26, r26
    5536:	a9 f3       	breq	.-22     	; 0x5522 <__divsf3_pse+0x10>
    5538:	33 d0       	rcall	.+102    	; 0x55a0 <__divsf3_pse+0x8e>
    553a:	0e 2e       	mov	r0, r30
    553c:	3a f0       	brmi	.+14     	; 0x554c <__divsf3_pse+0x3a>
    553e:	e0 e8       	ldi	r30, 0x80	; 128
    5540:	30 d0       	rcall	.+96     	; 0x55a2 <__divsf3_pse+0x90>
    5542:	91 50       	subi	r25, 0x01	; 1
    5544:	50 40       	sbci	r21, 0x00	; 0
    5546:	e6 95       	lsr	r30
    5548:	00 1c       	adc	r0, r0
    554a:	ca f7       	brpl	.-14     	; 0x553e <__divsf3_pse+0x2c>
    554c:	29 d0       	rcall	.+82     	; 0x55a0 <__divsf3_pse+0x8e>
    554e:	fe 2f       	mov	r31, r30
    5550:	27 d0       	rcall	.+78     	; 0x55a0 <__divsf3_pse+0x8e>
    5552:	66 0f       	add	r22, r22
    5554:	77 1f       	adc	r23, r23
    5556:	88 1f       	adc	r24, r24
    5558:	bb 1f       	adc	r27, r27
    555a:	26 17       	cp	r18, r22
    555c:	37 07       	cpc	r19, r23
    555e:	48 07       	cpc	r20, r24
    5560:	ab 07       	cpc	r26, r27
    5562:	b0 e8       	ldi	r27, 0x80	; 128
    5564:	09 f0       	breq	.+2      	; 0x5568 <__divsf3_pse+0x56>
    5566:	bb 0b       	sbc	r27, r27
    5568:	80 2d       	mov	r24, r0
    556a:	bf 01       	movw	r22, r30
    556c:	ff 27       	eor	r31, r31
    556e:	93 58       	subi	r25, 0x83	; 131
    5570:	5f 4f       	sbci	r21, 0xFF	; 255
    5572:	2a f0       	brmi	.+10     	; 0x557e <__divsf3_pse+0x6c>
    5574:	9e 3f       	cpi	r25, 0xFE	; 254
    5576:	51 05       	cpc	r21, r1
    5578:	68 f0       	brcs	.+26     	; 0x5594 <__divsf3_pse+0x82>
    557a:	8d c0       	rjmp	.+282    	; 0x5696 <__fp_inf>
    557c:	d7 c0       	rjmp	.+430    	; 0x572c <__fp_szero>
    557e:	5f 3f       	cpi	r21, 0xFF	; 255
    5580:	ec f3       	brlt	.-6      	; 0x557c <__divsf3_pse+0x6a>
    5582:	98 3e       	cpi	r25, 0xE8	; 232
    5584:	dc f3       	brlt	.-10     	; 0x557c <__divsf3_pse+0x6a>
    5586:	86 95       	lsr	r24
    5588:	77 95       	ror	r23
    558a:	67 95       	ror	r22
    558c:	b7 95       	ror	r27
    558e:	f7 95       	ror	r31
    5590:	9f 5f       	subi	r25, 0xFF	; 255
    5592:	c9 f7       	brne	.-14     	; 0x5586 <__divsf3_pse+0x74>
    5594:	88 0f       	add	r24, r24
    5596:	91 1d       	adc	r25, r1
    5598:	96 95       	lsr	r25
    559a:	87 95       	ror	r24
    559c:	97 f9       	bld	r25, 7
    559e:	08 95       	ret
    55a0:	e1 e0       	ldi	r30, 0x01	; 1
    55a2:	66 0f       	add	r22, r22
    55a4:	77 1f       	adc	r23, r23
    55a6:	88 1f       	adc	r24, r24
    55a8:	bb 1f       	adc	r27, r27
    55aa:	62 17       	cp	r22, r18
    55ac:	73 07       	cpc	r23, r19
    55ae:	84 07       	cpc	r24, r20
    55b0:	ba 07       	cpc	r27, r26
    55b2:	20 f0       	brcs	.+8      	; 0x55bc <__divsf3_pse+0xaa>
    55b4:	62 1b       	sub	r22, r18
    55b6:	73 0b       	sbc	r23, r19
    55b8:	84 0b       	sbc	r24, r20
    55ba:	ba 0b       	sbc	r27, r26
    55bc:	ee 1f       	adc	r30, r30
    55be:	88 f7       	brcc	.-30     	; 0x55a2 <__divsf3_pse+0x90>
    55c0:	e0 95       	com	r30
    55c2:	08 95       	ret

000055c4 <__fixunssfsi>:
    55c4:	98 d0       	rcall	.+304    	; 0x56f6 <__fp_splitA>
    55c6:	88 f0       	brcs	.+34     	; 0x55ea <__fixunssfsi+0x26>
    55c8:	9f 57       	subi	r25, 0x7F	; 127
    55ca:	90 f0       	brcs	.+36     	; 0x55f0 <__fixunssfsi+0x2c>
    55cc:	b9 2f       	mov	r27, r25
    55ce:	99 27       	eor	r25, r25
    55d0:	b7 51       	subi	r27, 0x17	; 23
    55d2:	a0 f0       	brcs	.+40     	; 0x55fc <__fixunssfsi+0x38>
    55d4:	d1 f0       	breq	.+52     	; 0x560a <__fixunssfsi+0x46>
    55d6:	66 0f       	add	r22, r22
    55d8:	77 1f       	adc	r23, r23
    55da:	88 1f       	adc	r24, r24
    55dc:	99 1f       	adc	r25, r25
    55de:	1a f0       	brmi	.+6      	; 0x55e6 <__fixunssfsi+0x22>
    55e0:	ba 95       	dec	r27
    55e2:	c9 f7       	brne	.-14     	; 0x55d6 <__fixunssfsi+0x12>
    55e4:	12 c0       	rjmp	.+36     	; 0x560a <__fixunssfsi+0x46>
    55e6:	b1 30       	cpi	r27, 0x01	; 1
    55e8:	81 f0       	breq	.+32     	; 0x560a <__fixunssfsi+0x46>
    55ea:	9f d0       	rcall	.+318    	; 0x572a <__fp_zero>
    55ec:	b1 e0       	ldi	r27, 0x01	; 1
    55ee:	08 95       	ret
    55f0:	9c c0       	rjmp	.+312    	; 0x572a <__fp_zero>
    55f2:	67 2f       	mov	r22, r23
    55f4:	78 2f       	mov	r23, r24
    55f6:	88 27       	eor	r24, r24
    55f8:	b8 5f       	subi	r27, 0xF8	; 248
    55fa:	39 f0       	breq	.+14     	; 0x560a <__fixunssfsi+0x46>
    55fc:	b9 3f       	cpi	r27, 0xF9	; 249
    55fe:	cc f3       	brlt	.-14     	; 0x55f2 <__fixunssfsi+0x2e>
    5600:	86 95       	lsr	r24
    5602:	77 95       	ror	r23
    5604:	67 95       	ror	r22
    5606:	b3 95       	inc	r27
    5608:	d9 f7       	brne	.-10     	; 0x5600 <__fixunssfsi+0x3c>
    560a:	3e f4       	brtc	.+14     	; 0x561a <__fixunssfsi+0x56>
    560c:	90 95       	com	r25
    560e:	80 95       	com	r24
    5610:	70 95       	com	r23
    5612:	61 95       	neg	r22
    5614:	7f 4f       	sbci	r23, 0xFF	; 255
    5616:	8f 4f       	sbci	r24, 0xFF	; 255
    5618:	9f 4f       	sbci	r25, 0xFF	; 255
    561a:	08 95       	ret

0000561c <__floatunsisf>:
    561c:	e8 94       	clt
    561e:	09 c0       	rjmp	.+18     	; 0x5632 <__floatsisf+0x12>

00005620 <__floatsisf>:
    5620:	97 fb       	bst	r25, 7
    5622:	3e f4       	brtc	.+14     	; 0x5632 <__floatsisf+0x12>
    5624:	90 95       	com	r25
    5626:	80 95       	com	r24
    5628:	70 95       	com	r23
    562a:	61 95       	neg	r22
    562c:	7f 4f       	sbci	r23, 0xFF	; 255
    562e:	8f 4f       	sbci	r24, 0xFF	; 255
    5630:	9f 4f       	sbci	r25, 0xFF	; 255
    5632:	99 23       	and	r25, r25
    5634:	a9 f0       	breq	.+42     	; 0x5660 <__floatsisf+0x40>
    5636:	f9 2f       	mov	r31, r25
    5638:	96 e9       	ldi	r25, 0x96	; 150
    563a:	bb 27       	eor	r27, r27
    563c:	93 95       	inc	r25
    563e:	f6 95       	lsr	r31
    5640:	87 95       	ror	r24
    5642:	77 95       	ror	r23
    5644:	67 95       	ror	r22
    5646:	b7 95       	ror	r27
    5648:	f1 11       	cpse	r31, r1
    564a:	f8 cf       	rjmp	.-16     	; 0x563c <__floatsisf+0x1c>
    564c:	fa f4       	brpl	.+62     	; 0x568c <__floatsisf+0x6c>
    564e:	bb 0f       	add	r27, r27
    5650:	11 f4       	brne	.+4      	; 0x5656 <__floatsisf+0x36>
    5652:	60 ff       	sbrs	r22, 0
    5654:	1b c0       	rjmp	.+54     	; 0x568c <__floatsisf+0x6c>
    5656:	6f 5f       	subi	r22, 0xFF	; 255
    5658:	7f 4f       	sbci	r23, 0xFF	; 255
    565a:	8f 4f       	sbci	r24, 0xFF	; 255
    565c:	9f 4f       	sbci	r25, 0xFF	; 255
    565e:	16 c0       	rjmp	.+44     	; 0x568c <__floatsisf+0x6c>
    5660:	88 23       	and	r24, r24
    5662:	11 f0       	breq	.+4      	; 0x5668 <__floatsisf+0x48>
    5664:	96 e9       	ldi	r25, 0x96	; 150
    5666:	11 c0       	rjmp	.+34     	; 0x568a <__floatsisf+0x6a>
    5668:	77 23       	and	r23, r23
    566a:	21 f0       	breq	.+8      	; 0x5674 <__floatsisf+0x54>
    566c:	9e e8       	ldi	r25, 0x8E	; 142
    566e:	87 2f       	mov	r24, r23
    5670:	76 2f       	mov	r23, r22
    5672:	05 c0       	rjmp	.+10     	; 0x567e <__floatsisf+0x5e>
    5674:	66 23       	and	r22, r22
    5676:	71 f0       	breq	.+28     	; 0x5694 <__floatsisf+0x74>
    5678:	96 e8       	ldi	r25, 0x86	; 134
    567a:	86 2f       	mov	r24, r22
    567c:	70 e0       	ldi	r23, 0x00	; 0
    567e:	60 e0       	ldi	r22, 0x00	; 0
    5680:	2a f0       	brmi	.+10     	; 0x568c <__floatsisf+0x6c>
    5682:	9a 95       	dec	r25
    5684:	66 0f       	add	r22, r22
    5686:	77 1f       	adc	r23, r23
    5688:	88 1f       	adc	r24, r24
    568a:	da f7       	brpl	.-10     	; 0x5682 <__floatsisf+0x62>
    568c:	88 0f       	add	r24, r24
    568e:	96 95       	lsr	r25
    5690:	87 95       	ror	r24
    5692:	97 f9       	bld	r25, 7
    5694:	08 95       	ret

00005696 <__fp_inf>:
    5696:	97 f9       	bld	r25, 7
    5698:	9f 67       	ori	r25, 0x7F	; 127
    569a:	80 e8       	ldi	r24, 0x80	; 128
    569c:	70 e0       	ldi	r23, 0x00	; 0
    569e:	60 e0       	ldi	r22, 0x00	; 0
    56a0:	08 95       	ret

000056a2 <__fp_nan>:
    56a2:	9f ef       	ldi	r25, 0xFF	; 255
    56a4:	80 ec       	ldi	r24, 0xC0	; 192
    56a6:	08 95       	ret

000056a8 <__fp_pscA>:
    56a8:	00 24       	eor	r0, r0
    56aa:	0a 94       	dec	r0
    56ac:	16 16       	cp	r1, r22
    56ae:	17 06       	cpc	r1, r23
    56b0:	18 06       	cpc	r1, r24
    56b2:	09 06       	cpc	r0, r25
    56b4:	08 95       	ret

000056b6 <__fp_pscB>:
    56b6:	00 24       	eor	r0, r0
    56b8:	0a 94       	dec	r0
    56ba:	12 16       	cp	r1, r18
    56bc:	13 06       	cpc	r1, r19
    56be:	14 06       	cpc	r1, r20
    56c0:	05 06       	cpc	r0, r21
    56c2:	08 95       	ret

000056c4 <__fp_round>:
    56c4:	09 2e       	mov	r0, r25
    56c6:	03 94       	inc	r0
    56c8:	00 0c       	add	r0, r0
    56ca:	11 f4       	brne	.+4      	; 0x56d0 <__fp_round+0xc>
    56cc:	88 23       	and	r24, r24
    56ce:	52 f0       	brmi	.+20     	; 0x56e4 <__fp_round+0x20>
    56d0:	bb 0f       	add	r27, r27
    56d2:	40 f4       	brcc	.+16     	; 0x56e4 <__fp_round+0x20>
    56d4:	bf 2b       	or	r27, r31
    56d6:	11 f4       	brne	.+4      	; 0x56dc <__fp_round+0x18>
    56d8:	60 ff       	sbrs	r22, 0
    56da:	04 c0       	rjmp	.+8      	; 0x56e4 <__fp_round+0x20>
    56dc:	6f 5f       	subi	r22, 0xFF	; 255
    56de:	7f 4f       	sbci	r23, 0xFF	; 255
    56e0:	8f 4f       	sbci	r24, 0xFF	; 255
    56e2:	9f 4f       	sbci	r25, 0xFF	; 255
    56e4:	08 95       	ret

000056e6 <__fp_split3>:
    56e6:	57 fd       	sbrc	r21, 7
    56e8:	90 58       	subi	r25, 0x80	; 128
    56ea:	44 0f       	add	r20, r20
    56ec:	55 1f       	adc	r21, r21
    56ee:	59 f0       	breq	.+22     	; 0x5706 <__fp_splitA+0x10>
    56f0:	5f 3f       	cpi	r21, 0xFF	; 255
    56f2:	71 f0       	breq	.+28     	; 0x5710 <__fp_splitA+0x1a>
    56f4:	47 95       	ror	r20

000056f6 <__fp_splitA>:
    56f6:	88 0f       	add	r24, r24
    56f8:	97 fb       	bst	r25, 7
    56fa:	99 1f       	adc	r25, r25
    56fc:	61 f0       	breq	.+24     	; 0x5716 <__fp_splitA+0x20>
    56fe:	9f 3f       	cpi	r25, 0xFF	; 255
    5700:	79 f0       	breq	.+30     	; 0x5720 <__fp_splitA+0x2a>
    5702:	87 95       	ror	r24
    5704:	08 95       	ret
    5706:	12 16       	cp	r1, r18
    5708:	13 06       	cpc	r1, r19
    570a:	14 06       	cpc	r1, r20
    570c:	55 1f       	adc	r21, r21
    570e:	f2 cf       	rjmp	.-28     	; 0x56f4 <__fp_split3+0xe>
    5710:	46 95       	lsr	r20
    5712:	f1 df       	rcall	.-30     	; 0x56f6 <__fp_splitA>
    5714:	08 c0       	rjmp	.+16     	; 0x5726 <__fp_splitA+0x30>
    5716:	16 16       	cp	r1, r22
    5718:	17 06       	cpc	r1, r23
    571a:	18 06       	cpc	r1, r24
    571c:	99 1f       	adc	r25, r25
    571e:	f1 cf       	rjmp	.-30     	; 0x5702 <__fp_splitA+0xc>
    5720:	86 95       	lsr	r24
    5722:	71 05       	cpc	r23, r1
    5724:	61 05       	cpc	r22, r1
    5726:	08 94       	sec
    5728:	08 95       	ret

0000572a <__fp_zero>:
    572a:	e8 94       	clt

0000572c <__fp_szero>:
    572c:	bb 27       	eor	r27, r27
    572e:	66 27       	eor	r22, r22
    5730:	77 27       	eor	r23, r23
    5732:	cb 01       	movw	r24, r22
    5734:	97 f9       	bld	r25, 7
    5736:	08 95       	ret

00005738 <__mulsf3>:
    5738:	0b d0       	rcall	.+22     	; 0x5750 <__mulsf3x>
    573a:	c4 cf       	rjmp	.-120    	; 0x56c4 <__fp_round>
    573c:	b5 df       	rcall	.-150    	; 0x56a8 <__fp_pscA>
    573e:	28 f0       	brcs	.+10     	; 0x574a <__mulsf3+0x12>
    5740:	ba df       	rcall	.-140    	; 0x56b6 <__fp_pscB>
    5742:	18 f0       	brcs	.+6      	; 0x574a <__mulsf3+0x12>
    5744:	95 23       	and	r25, r21
    5746:	09 f0       	breq	.+2      	; 0x574a <__mulsf3+0x12>
    5748:	a6 cf       	rjmp	.-180    	; 0x5696 <__fp_inf>
    574a:	ab cf       	rjmp	.-170    	; 0x56a2 <__fp_nan>
    574c:	11 24       	eor	r1, r1
    574e:	ee cf       	rjmp	.-36     	; 0x572c <__fp_szero>

00005750 <__mulsf3x>:
    5750:	ca df       	rcall	.-108    	; 0x56e6 <__fp_split3>
    5752:	a0 f3       	brcs	.-24     	; 0x573c <__mulsf3+0x4>

00005754 <__mulsf3_pse>:
    5754:	95 9f       	mul	r25, r21
    5756:	d1 f3       	breq	.-12     	; 0x574c <__mulsf3+0x14>
    5758:	95 0f       	add	r25, r21
    575a:	50 e0       	ldi	r21, 0x00	; 0
    575c:	55 1f       	adc	r21, r21
    575e:	62 9f       	mul	r22, r18
    5760:	f0 01       	movw	r30, r0
    5762:	72 9f       	mul	r23, r18
    5764:	bb 27       	eor	r27, r27
    5766:	f0 0d       	add	r31, r0
    5768:	b1 1d       	adc	r27, r1
    576a:	63 9f       	mul	r22, r19
    576c:	aa 27       	eor	r26, r26
    576e:	f0 0d       	add	r31, r0
    5770:	b1 1d       	adc	r27, r1
    5772:	aa 1f       	adc	r26, r26
    5774:	64 9f       	mul	r22, r20
    5776:	66 27       	eor	r22, r22
    5778:	b0 0d       	add	r27, r0
    577a:	a1 1d       	adc	r26, r1
    577c:	66 1f       	adc	r22, r22
    577e:	82 9f       	mul	r24, r18
    5780:	22 27       	eor	r18, r18
    5782:	b0 0d       	add	r27, r0
    5784:	a1 1d       	adc	r26, r1
    5786:	62 1f       	adc	r22, r18
    5788:	73 9f       	mul	r23, r19
    578a:	b0 0d       	add	r27, r0
    578c:	a1 1d       	adc	r26, r1
    578e:	62 1f       	adc	r22, r18
    5790:	83 9f       	mul	r24, r19
    5792:	a0 0d       	add	r26, r0
    5794:	61 1d       	adc	r22, r1
    5796:	22 1f       	adc	r18, r18
    5798:	74 9f       	mul	r23, r20
    579a:	33 27       	eor	r19, r19
    579c:	a0 0d       	add	r26, r0
    579e:	61 1d       	adc	r22, r1
    57a0:	23 1f       	adc	r18, r19
    57a2:	84 9f       	mul	r24, r20
    57a4:	60 0d       	add	r22, r0
    57a6:	21 1d       	adc	r18, r1
    57a8:	82 2f       	mov	r24, r18
    57aa:	76 2f       	mov	r23, r22
    57ac:	6a 2f       	mov	r22, r26
    57ae:	11 24       	eor	r1, r1
    57b0:	9f 57       	subi	r25, 0x7F	; 127
    57b2:	50 40       	sbci	r21, 0x00	; 0
    57b4:	8a f0       	brmi	.+34     	; 0x57d8 <__mulsf3_pse+0x84>
    57b6:	e1 f0       	breq	.+56     	; 0x57f0 <__mulsf3_pse+0x9c>
    57b8:	88 23       	and	r24, r24
    57ba:	4a f0       	brmi	.+18     	; 0x57ce <__mulsf3_pse+0x7a>
    57bc:	ee 0f       	add	r30, r30
    57be:	ff 1f       	adc	r31, r31
    57c0:	bb 1f       	adc	r27, r27
    57c2:	66 1f       	adc	r22, r22
    57c4:	77 1f       	adc	r23, r23
    57c6:	88 1f       	adc	r24, r24
    57c8:	91 50       	subi	r25, 0x01	; 1
    57ca:	50 40       	sbci	r21, 0x00	; 0
    57cc:	a9 f7       	brne	.-22     	; 0x57b8 <__mulsf3_pse+0x64>
    57ce:	9e 3f       	cpi	r25, 0xFE	; 254
    57d0:	51 05       	cpc	r21, r1
    57d2:	70 f0       	brcs	.+28     	; 0x57f0 <__mulsf3_pse+0x9c>
    57d4:	60 cf       	rjmp	.-320    	; 0x5696 <__fp_inf>
    57d6:	aa cf       	rjmp	.-172    	; 0x572c <__fp_szero>
    57d8:	5f 3f       	cpi	r21, 0xFF	; 255
    57da:	ec f3       	brlt	.-6      	; 0x57d6 <__mulsf3_pse+0x82>
    57dc:	98 3e       	cpi	r25, 0xE8	; 232
    57de:	dc f3       	brlt	.-10     	; 0x57d6 <__mulsf3_pse+0x82>
    57e0:	86 95       	lsr	r24
    57e2:	77 95       	ror	r23
    57e4:	67 95       	ror	r22
    57e6:	b7 95       	ror	r27
    57e8:	f7 95       	ror	r31
    57ea:	e7 95       	ror	r30
    57ec:	9f 5f       	subi	r25, 0xFF	; 255
    57ee:	c1 f7       	brne	.-16     	; 0x57e0 <__mulsf3_pse+0x8c>
    57f0:	fe 2b       	or	r31, r30
    57f2:	88 0f       	add	r24, r24
    57f4:	91 1d       	adc	r25, r1
    57f6:	96 95       	lsr	r25
    57f8:	87 95       	ror	r24
    57fa:	97 f9       	bld	r25, 7
    57fc:	08 95       	ret

000057fe <__udivmodsi4>:
    57fe:	a1 e2       	ldi	r26, 0x21	; 33
    5800:	1a 2e       	mov	r1, r26
    5802:	aa 1b       	sub	r26, r26
    5804:	bb 1b       	sub	r27, r27
    5806:	fd 01       	movw	r30, r26
    5808:	0d c0       	rjmp	.+26     	; 0x5824 <__udivmodsi4_ep>

0000580a <__udivmodsi4_loop>:
    580a:	aa 1f       	adc	r26, r26
    580c:	bb 1f       	adc	r27, r27
    580e:	ee 1f       	adc	r30, r30
    5810:	ff 1f       	adc	r31, r31
    5812:	a2 17       	cp	r26, r18
    5814:	b3 07       	cpc	r27, r19
    5816:	e4 07       	cpc	r30, r20
    5818:	f5 07       	cpc	r31, r21
    581a:	20 f0       	brcs	.+8      	; 0x5824 <__udivmodsi4_ep>
    581c:	a2 1b       	sub	r26, r18
    581e:	b3 0b       	sbc	r27, r19
    5820:	e4 0b       	sbc	r30, r20
    5822:	f5 0b       	sbc	r31, r21

00005824 <__udivmodsi4_ep>:
    5824:	66 1f       	adc	r22, r22
    5826:	77 1f       	adc	r23, r23
    5828:	88 1f       	adc	r24, r24
    582a:	99 1f       	adc	r25, r25
    582c:	1a 94       	dec	r1
    582e:	69 f7       	brne	.-38     	; 0x580a <__udivmodsi4_loop>
    5830:	60 95       	com	r22
    5832:	70 95       	com	r23
    5834:	80 95       	com	r24
    5836:	90 95       	com	r25
    5838:	9b 01       	movw	r18, r22
    583a:	ac 01       	movw	r20, r24
    583c:	bd 01       	movw	r22, r26
    583e:	cf 01       	movw	r24, r30
    5840:	08 95       	ret

00005842 <__tablejump2__>:
    5842:	ee 0f       	add	r30, r30
    5844:	ff 1f       	adc	r31, r31
    5846:	88 1f       	adc	r24, r24
    5848:	8b bf       	out	0x3b, r24	; 59
    584a:	07 90       	elpm	r0, Z+
    584c:	f6 91       	elpm	r31, Z
    584e:	e0 2d       	mov	r30, r0
    5850:	19 94       	eijmp

00005852 <malloc>:
    5852:	0f 93       	push	r16
    5854:	1f 93       	push	r17
    5856:	cf 93       	push	r28
    5858:	df 93       	push	r29
    585a:	82 30       	cpi	r24, 0x02	; 2
    585c:	91 05       	cpc	r25, r1
    585e:	10 f4       	brcc	.+4      	; 0x5864 <malloc+0x12>
    5860:	82 e0       	ldi	r24, 0x02	; 2
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	e0 91 33 17 	lds	r30, 0x1733	; 0x801733 <__flp>
    5868:	f0 91 34 17 	lds	r31, 0x1734	; 0x801734 <__flp+0x1>
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	a0 e0       	ldi	r26, 0x00	; 0
    5872:	b0 e0       	ldi	r27, 0x00	; 0
    5874:	30 97       	sbiw	r30, 0x00	; 0
    5876:	19 f1       	breq	.+70     	; 0x58be <malloc+0x6c>
    5878:	40 81       	ld	r20, Z
    587a:	51 81       	ldd	r21, Z+1	; 0x01
    587c:	02 81       	ldd	r16, Z+2	; 0x02
    587e:	13 81       	ldd	r17, Z+3	; 0x03
    5880:	48 17       	cp	r20, r24
    5882:	59 07       	cpc	r21, r25
    5884:	c8 f0       	brcs	.+50     	; 0x58b8 <malloc+0x66>
    5886:	84 17       	cp	r24, r20
    5888:	95 07       	cpc	r25, r21
    588a:	69 f4       	brne	.+26     	; 0x58a6 <malloc+0x54>
    588c:	10 97       	sbiw	r26, 0x00	; 0
    588e:	31 f0       	breq	.+12     	; 0x589c <malloc+0x4a>
    5890:	12 96       	adiw	r26, 0x02	; 2
    5892:	0c 93       	st	X, r16
    5894:	12 97       	sbiw	r26, 0x02	; 2
    5896:	13 96       	adiw	r26, 0x03	; 3
    5898:	1c 93       	st	X, r17
    589a:	27 c0       	rjmp	.+78     	; 0x58ea <malloc+0x98>
    589c:	00 93 33 17 	sts	0x1733, r16	; 0x801733 <__flp>
    58a0:	10 93 34 17 	sts	0x1734, r17	; 0x801734 <__flp+0x1>
    58a4:	22 c0       	rjmp	.+68     	; 0x58ea <malloc+0x98>
    58a6:	21 15       	cp	r18, r1
    58a8:	31 05       	cpc	r19, r1
    58aa:	19 f0       	breq	.+6      	; 0x58b2 <malloc+0x60>
    58ac:	42 17       	cp	r20, r18
    58ae:	53 07       	cpc	r21, r19
    58b0:	18 f4       	brcc	.+6      	; 0x58b8 <malloc+0x66>
    58b2:	9a 01       	movw	r18, r20
    58b4:	bd 01       	movw	r22, r26
    58b6:	ef 01       	movw	r28, r30
    58b8:	df 01       	movw	r26, r30
    58ba:	f8 01       	movw	r30, r16
    58bc:	db cf       	rjmp	.-74     	; 0x5874 <malloc+0x22>
    58be:	21 15       	cp	r18, r1
    58c0:	31 05       	cpc	r19, r1
    58c2:	f9 f0       	breq	.+62     	; 0x5902 <malloc+0xb0>
    58c4:	28 1b       	sub	r18, r24
    58c6:	39 0b       	sbc	r19, r25
    58c8:	24 30       	cpi	r18, 0x04	; 4
    58ca:	31 05       	cpc	r19, r1
    58cc:	80 f4       	brcc	.+32     	; 0x58ee <malloc+0x9c>
    58ce:	8a 81       	ldd	r24, Y+2	; 0x02
    58d0:	9b 81       	ldd	r25, Y+3	; 0x03
    58d2:	61 15       	cp	r22, r1
    58d4:	71 05       	cpc	r23, r1
    58d6:	21 f0       	breq	.+8      	; 0x58e0 <malloc+0x8e>
    58d8:	fb 01       	movw	r30, r22
    58da:	93 83       	std	Z+3, r25	; 0x03
    58dc:	82 83       	std	Z+2, r24	; 0x02
    58de:	04 c0       	rjmp	.+8      	; 0x58e8 <malloc+0x96>
    58e0:	90 93 34 17 	sts	0x1734, r25	; 0x801734 <__flp+0x1>
    58e4:	80 93 33 17 	sts	0x1733, r24	; 0x801733 <__flp>
    58e8:	fe 01       	movw	r30, r28
    58ea:	32 96       	adiw	r30, 0x02	; 2
    58ec:	44 c0       	rjmp	.+136    	; 0x5976 <malloc+0x124>
    58ee:	fe 01       	movw	r30, r28
    58f0:	e2 0f       	add	r30, r18
    58f2:	f3 1f       	adc	r31, r19
    58f4:	81 93       	st	Z+, r24
    58f6:	91 93       	st	Z+, r25
    58f8:	22 50       	subi	r18, 0x02	; 2
    58fa:	31 09       	sbc	r19, r1
    58fc:	39 83       	std	Y+1, r19	; 0x01
    58fe:	28 83       	st	Y, r18
    5900:	3a c0       	rjmp	.+116    	; 0x5976 <malloc+0x124>
    5902:	20 91 31 17 	lds	r18, 0x1731	; 0x801731 <__brkval>
    5906:	30 91 32 17 	lds	r19, 0x1732	; 0x801732 <__brkval+0x1>
    590a:	23 2b       	or	r18, r19
    590c:	41 f4       	brne	.+16     	; 0x591e <malloc+0xcc>
    590e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5912:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5916:	30 93 32 17 	sts	0x1732, r19	; 0x801732 <__brkval+0x1>
    591a:	20 93 31 17 	sts	0x1731, r18	; 0x801731 <__brkval>
    591e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5922:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5926:	21 15       	cp	r18, r1
    5928:	31 05       	cpc	r19, r1
    592a:	41 f4       	brne	.+16     	; 0x593c <malloc+0xea>
    592c:	2d b7       	in	r18, 0x3d	; 61
    592e:	3e b7       	in	r19, 0x3e	; 62
    5930:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5934:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5938:	24 1b       	sub	r18, r20
    593a:	35 0b       	sbc	r19, r21
    593c:	e0 91 31 17 	lds	r30, 0x1731	; 0x801731 <__brkval>
    5940:	f0 91 32 17 	lds	r31, 0x1732	; 0x801732 <__brkval+0x1>
    5944:	e2 17       	cp	r30, r18
    5946:	f3 07       	cpc	r31, r19
    5948:	a0 f4       	brcc	.+40     	; 0x5972 <malloc+0x120>
    594a:	2e 1b       	sub	r18, r30
    594c:	3f 0b       	sbc	r19, r31
    594e:	28 17       	cp	r18, r24
    5950:	39 07       	cpc	r19, r25
    5952:	78 f0       	brcs	.+30     	; 0x5972 <malloc+0x120>
    5954:	ac 01       	movw	r20, r24
    5956:	4e 5f       	subi	r20, 0xFE	; 254
    5958:	5f 4f       	sbci	r21, 0xFF	; 255
    595a:	24 17       	cp	r18, r20
    595c:	35 07       	cpc	r19, r21
    595e:	48 f0       	brcs	.+18     	; 0x5972 <malloc+0x120>
    5960:	4e 0f       	add	r20, r30
    5962:	5f 1f       	adc	r21, r31
    5964:	50 93 32 17 	sts	0x1732, r21	; 0x801732 <__brkval+0x1>
    5968:	40 93 31 17 	sts	0x1731, r20	; 0x801731 <__brkval>
    596c:	81 93       	st	Z+, r24
    596e:	91 93       	st	Z+, r25
    5970:	02 c0       	rjmp	.+4      	; 0x5976 <malloc+0x124>
    5972:	e0 e0       	ldi	r30, 0x00	; 0
    5974:	f0 e0       	ldi	r31, 0x00	; 0
    5976:	cf 01       	movw	r24, r30
    5978:	df 91       	pop	r29
    597a:	cf 91       	pop	r28
    597c:	1f 91       	pop	r17
    597e:	0f 91       	pop	r16
    5980:	08 95       	ret

00005982 <free>:
    5982:	cf 93       	push	r28
    5984:	df 93       	push	r29
    5986:	00 97       	sbiw	r24, 0x00	; 0
    5988:	09 f4       	brne	.+2      	; 0x598c <free+0xa>
    598a:	81 c0       	rjmp	.+258    	; 0x5a8e <free+0x10c>
    598c:	fc 01       	movw	r30, r24
    598e:	32 97       	sbiw	r30, 0x02	; 2
    5990:	13 82       	std	Z+3, r1	; 0x03
    5992:	12 82       	std	Z+2, r1	; 0x02
    5994:	a0 91 33 17 	lds	r26, 0x1733	; 0x801733 <__flp>
    5998:	b0 91 34 17 	lds	r27, 0x1734	; 0x801734 <__flp+0x1>
    599c:	10 97       	sbiw	r26, 0x00	; 0
    599e:	81 f4       	brne	.+32     	; 0x59c0 <free+0x3e>
    59a0:	20 81       	ld	r18, Z
    59a2:	31 81       	ldd	r19, Z+1	; 0x01
    59a4:	82 0f       	add	r24, r18
    59a6:	93 1f       	adc	r25, r19
    59a8:	20 91 31 17 	lds	r18, 0x1731	; 0x801731 <__brkval>
    59ac:	30 91 32 17 	lds	r19, 0x1732	; 0x801732 <__brkval+0x1>
    59b0:	28 17       	cp	r18, r24
    59b2:	39 07       	cpc	r19, r25
    59b4:	51 f5       	brne	.+84     	; 0x5a0a <free+0x88>
    59b6:	f0 93 32 17 	sts	0x1732, r31	; 0x801732 <__brkval+0x1>
    59ba:	e0 93 31 17 	sts	0x1731, r30	; 0x801731 <__brkval>
    59be:	67 c0       	rjmp	.+206    	; 0x5a8e <free+0x10c>
    59c0:	ed 01       	movw	r28, r26
    59c2:	20 e0       	ldi	r18, 0x00	; 0
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	ce 17       	cp	r28, r30
    59c8:	df 07       	cpc	r29, r31
    59ca:	40 f4       	brcc	.+16     	; 0x59dc <free+0x5a>
    59cc:	4a 81       	ldd	r20, Y+2	; 0x02
    59ce:	5b 81       	ldd	r21, Y+3	; 0x03
    59d0:	9e 01       	movw	r18, r28
    59d2:	41 15       	cp	r20, r1
    59d4:	51 05       	cpc	r21, r1
    59d6:	f1 f0       	breq	.+60     	; 0x5a14 <free+0x92>
    59d8:	ea 01       	movw	r28, r20
    59da:	f5 cf       	rjmp	.-22     	; 0x59c6 <free+0x44>
    59dc:	d3 83       	std	Z+3, r29	; 0x03
    59de:	c2 83       	std	Z+2, r28	; 0x02
    59e0:	40 81       	ld	r20, Z
    59e2:	51 81       	ldd	r21, Z+1	; 0x01
    59e4:	84 0f       	add	r24, r20
    59e6:	95 1f       	adc	r25, r21
    59e8:	c8 17       	cp	r28, r24
    59ea:	d9 07       	cpc	r29, r25
    59ec:	59 f4       	brne	.+22     	; 0x5a04 <free+0x82>
    59ee:	88 81       	ld	r24, Y
    59f0:	99 81       	ldd	r25, Y+1	; 0x01
    59f2:	84 0f       	add	r24, r20
    59f4:	95 1f       	adc	r25, r21
    59f6:	02 96       	adiw	r24, 0x02	; 2
    59f8:	91 83       	std	Z+1, r25	; 0x01
    59fa:	80 83       	st	Z, r24
    59fc:	8a 81       	ldd	r24, Y+2	; 0x02
    59fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5a00:	93 83       	std	Z+3, r25	; 0x03
    5a02:	82 83       	std	Z+2, r24	; 0x02
    5a04:	21 15       	cp	r18, r1
    5a06:	31 05       	cpc	r19, r1
    5a08:	29 f4       	brne	.+10     	; 0x5a14 <free+0x92>
    5a0a:	f0 93 34 17 	sts	0x1734, r31	; 0x801734 <__flp+0x1>
    5a0e:	e0 93 33 17 	sts	0x1733, r30	; 0x801733 <__flp>
    5a12:	3d c0       	rjmp	.+122    	; 0x5a8e <free+0x10c>
    5a14:	e9 01       	movw	r28, r18
    5a16:	fb 83       	std	Y+3, r31	; 0x03
    5a18:	ea 83       	std	Y+2, r30	; 0x02
    5a1a:	49 91       	ld	r20, Y+
    5a1c:	59 91       	ld	r21, Y+
    5a1e:	c4 0f       	add	r28, r20
    5a20:	d5 1f       	adc	r29, r21
    5a22:	ec 17       	cp	r30, r28
    5a24:	fd 07       	cpc	r31, r29
    5a26:	61 f4       	brne	.+24     	; 0x5a40 <free+0xbe>
    5a28:	80 81       	ld	r24, Z
    5a2a:	91 81       	ldd	r25, Z+1	; 0x01
    5a2c:	84 0f       	add	r24, r20
    5a2e:	95 1f       	adc	r25, r21
    5a30:	02 96       	adiw	r24, 0x02	; 2
    5a32:	e9 01       	movw	r28, r18
    5a34:	99 83       	std	Y+1, r25	; 0x01
    5a36:	88 83       	st	Y, r24
    5a38:	82 81       	ldd	r24, Z+2	; 0x02
    5a3a:	93 81       	ldd	r25, Z+3	; 0x03
    5a3c:	9b 83       	std	Y+3, r25	; 0x03
    5a3e:	8a 83       	std	Y+2, r24	; 0x02
    5a40:	e0 e0       	ldi	r30, 0x00	; 0
    5a42:	f0 e0       	ldi	r31, 0x00	; 0
    5a44:	12 96       	adiw	r26, 0x02	; 2
    5a46:	8d 91       	ld	r24, X+
    5a48:	9c 91       	ld	r25, X
    5a4a:	13 97       	sbiw	r26, 0x03	; 3
    5a4c:	00 97       	sbiw	r24, 0x00	; 0
    5a4e:	19 f0       	breq	.+6      	; 0x5a56 <free+0xd4>
    5a50:	fd 01       	movw	r30, r26
    5a52:	dc 01       	movw	r26, r24
    5a54:	f7 cf       	rjmp	.-18     	; 0x5a44 <free+0xc2>
    5a56:	8d 91       	ld	r24, X+
    5a58:	9c 91       	ld	r25, X
    5a5a:	11 97       	sbiw	r26, 0x01	; 1
    5a5c:	9d 01       	movw	r18, r26
    5a5e:	2e 5f       	subi	r18, 0xFE	; 254
    5a60:	3f 4f       	sbci	r19, 0xFF	; 255
    5a62:	82 0f       	add	r24, r18
    5a64:	93 1f       	adc	r25, r19
    5a66:	20 91 31 17 	lds	r18, 0x1731	; 0x801731 <__brkval>
    5a6a:	30 91 32 17 	lds	r19, 0x1732	; 0x801732 <__brkval+0x1>
    5a6e:	28 17       	cp	r18, r24
    5a70:	39 07       	cpc	r19, r25
    5a72:	69 f4       	brne	.+26     	; 0x5a8e <free+0x10c>
    5a74:	30 97       	sbiw	r30, 0x00	; 0
    5a76:	29 f4       	brne	.+10     	; 0x5a82 <free+0x100>
    5a78:	10 92 34 17 	sts	0x1734, r1	; 0x801734 <__flp+0x1>
    5a7c:	10 92 33 17 	sts	0x1733, r1	; 0x801733 <__flp>
    5a80:	02 c0       	rjmp	.+4      	; 0x5a86 <free+0x104>
    5a82:	13 82       	std	Z+3, r1	; 0x03
    5a84:	12 82       	std	Z+2, r1	; 0x02
    5a86:	b0 93 32 17 	sts	0x1732, r27	; 0x801732 <__brkval+0x1>
    5a8a:	a0 93 31 17 	sts	0x1731, r26	; 0x801731 <__brkval>
    5a8e:	df 91       	pop	r29
    5a90:	cf 91       	pop	r28
    5a92:	08 95       	ret

00005a94 <abort>:
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	90 e0       	ldi	r25, 0x00	; 0
    5a98:	f8 94       	cli
    5a9a:	5a c2       	rjmp	.+1204   	; 0x5f50 <_exit>

00005a9c <__ftoa_engine>:
    5a9c:	28 30       	cpi	r18, 0x08	; 8
    5a9e:	08 f0       	brcs	.+2      	; 0x5aa2 <__ftoa_engine+0x6>
    5aa0:	27 e0       	ldi	r18, 0x07	; 7
    5aa2:	33 27       	eor	r19, r19
    5aa4:	da 01       	movw	r26, r20
    5aa6:	99 0f       	add	r25, r25
    5aa8:	31 1d       	adc	r19, r1
    5aaa:	87 fd       	sbrc	r24, 7
    5aac:	91 60       	ori	r25, 0x01	; 1
    5aae:	00 96       	adiw	r24, 0x00	; 0
    5ab0:	61 05       	cpc	r22, r1
    5ab2:	71 05       	cpc	r23, r1
    5ab4:	39 f4       	brne	.+14     	; 0x5ac4 <__ftoa_engine+0x28>
    5ab6:	32 60       	ori	r19, 0x02	; 2
    5ab8:	2e 5f       	subi	r18, 0xFE	; 254
    5aba:	3d 93       	st	X+, r19
    5abc:	30 e3       	ldi	r19, 0x30	; 48
    5abe:	2a 95       	dec	r18
    5ac0:	e1 f7       	brne	.-8      	; 0x5aba <__ftoa_engine+0x1e>
    5ac2:	08 95       	ret
    5ac4:	9f 3f       	cpi	r25, 0xFF	; 255
    5ac6:	30 f0       	brcs	.+12     	; 0x5ad4 <__ftoa_engine+0x38>
    5ac8:	80 38       	cpi	r24, 0x80	; 128
    5aca:	71 05       	cpc	r23, r1
    5acc:	61 05       	cpc	r22, r1
    5ace:	09 f0       	breq	.+2      	; 0x5ad2 <__ftoa_engine+0x36>
    5ad0:	3c 5f       	subi	r19, 0xFC	; 252
    5ad2:	3c 5f       	subi	r19, 0xFC	; 252
    5ad4:	3d 93       	st	X+, r19
    5ad6:	91 30       	cpi	r25, 0x01	; 1
    5ad8:	08 f0       	brcs	.+2      	; 0x5adc <__ftoa_engine+0x40>
    5ada:	80 68       	ori	r24, 0x80	; 128
    5adc:	91 1d       	adc	r25, r1
    5ade:	df 93       	push	r29
    5ae0:	cf 93       	push	r28
    5ae2:	1f 93       	push	r17
    5ae4:	0f 93       	push	r16
    5ae6:	ff 92       	push	r15
    5ae8:	ef 92       	push	r14
    5aea:	19 2f       	mov	r17, r25
    5aec:	98 7f       	andi	r25, 0xF8	; 248
    5aee:	96 95       	lsr	r25
    5af0:	e9 2f       	mov	r30, r25
    5af2:	96 95       	lsr	r25
    5af4:	96 95       	lsr	r25
    5af6:	e9 0f       	add	r30, r25
    5af8:	ff 27       	eor	r31, r31
    5afa:	e4 50       	subi	r30, 0x04	; 4
    5afc:	fe 4f       	sbci	r31, 0xFE	; 254
    5afe:	99 27       	eor	r25, r25
    5b00:	33 27       	eor	r19, r19
    5b02:	ee 24       	eor	r14, r14
    5b04:	ff 24       	eor	r15, r15
    5b06:	a7 01       	movw	r20, r14
    5b08:	e7 01       	movw	r28, r14
    5b0a:	05 90       	lpm	r0, Z+
    5b0c:	08 94       	sec
    5b0e:	07 94       	ror	r0
    5b10:	28 f4       	brcc	.+10     	; 0x5b1c <__ftoa_engine+0x80>
    5b12:	36 0f       	add	r19, r22
    5b14:	e7 1e       	adc	r14, r23
    5b16:	f8 1e       	adc	r15, r24
    5b18:	49 1f       	adc	r20, r25
    5b1a:	51 1d       	adc	r21, r1
    5b1c:	66 0f       	add	r22, r22
    5b1e:	77 1f       	adc	r23, r23
    5b20:	88 1f       	adc	r24, r24
    5b22:	99 1f       	adc	r25, r25
    5b24:	06 94       	lsr	r0
    5b26:	a1 f7       	brne	.-24     	; 0x5b10 <__ftoa_engine+0x74>
    5b28:	05 90       	lpm	r0, Z+
    5b2a:	07 94       	ror	r0
    5b2c:	28 f4       	brcc	.+10     	; 0x5b38 <__ftoa_engine+0x9c>
    5b2e:	e7 0e       	add	r14, r23
    5b30:	f8 1e       	adc	r15, r24
    5b32:	49 1f       	adc	r20, r25
    5b34:	56 1f       	adc	r21, r22
    5b36:	c1 1d       	adc	r28, r1
    5b38:	77 0f       	add	r23, r23
    5b3a:	88 1f       	adc	r24, r24
    5b3c:	99 1f       	adc	r25, r25
    5b3e:	66 1f       	adc	r22, r22
    5b40:	06 94       	lsr	r0
    5b42:	a1 f7       	brne	.-24     	; 0x5b2c <__ftoa_engine+0x90>
    5b44:	05 90       	lpm	r0, Z+
    5b46:	07 94       	ror	r0
    5b48:	28 f4       	brcc	.+10     	; 0x5b54 <__ftoa_engine+0xb8>
    5b4a:	f8 0e       	add	r15, r24
    5b4c:	49 1f       	adc	r20, r25
    5b4e:	56 1f       	adc	r21, r22
    5b50:	c7 1f       	adc	r28, r23
    5b52:	d1 1d       	adc	r29, r1
    5b54:	88 0f       	add	r24, r24
    5b56:	99 1f       	adc	r25, r25
    5b58:	66 1f       	adc	r22, r22
    5b5a:	77 1f       	adc	r23, r23
    5b5c:	06 94       	lsr	r0
    5b5e:	a1 f7       	brne	.-24     	; 0x5b48 <__ftoa_engine+0xac>
    5b60:	05 90       	lpm	r0, Z+
    5b62:	07 94       	ror	r0
    5b64:	20 f4       	brcc	.+8      	; 0x5b6e <__ftoa_engine+0xd2>
    5b66:	49 0f       	add	r20, r25
    5b68:	56 1f       	adc	r21, r22
    5b6a:	c7 1f       	adc	r28, r23
    5b6c:	d8 1f       	adc	r29, r24
    5b6e:	99 0f       	add	r25, r25
    5b70:	66 1f       	adc	r22, r22
    5b72:	77 1f       	adc	r23, r23
    5b74:	88 1f       	adc	r24, r24
    5b76:	06 94       	lsr	r0
    5b78:	a9 f7       	brne	.-22     	; 0x5b64 <__ftoa_engine+0xc8>
    5b7a:	84 91       	lpm	r24, Z
    5b7c:	10 95       	com	r17
    5b7e:	17 70       	andi	r17, 0x07	; 7
    5b80:	41 f0       	breq	.+16     	; 0x5b92 <__ftoa_engine+0xf6>
    5b82:	d6 95       	lsr	r29
    5b84:	c7 95       	ror	r28
    5b86:	57 95       	ror	r21
    5b88:	47 95       	ror	r20
    5b8a:	f7 94       	ror	r15
    5b8c:	e7 94       	ror	r14
    5b8e:	1a 95       	dec	r17
    5b90:	c1 f7       	brne	.-16     	; 0x5b82 <__ftoa_engine+0xe6>
    5b92:	e2 ea       	ldi	r30, 0xA2	; 162
    5b94:	f1 e0       	ldi	r31, 0x01	; 1
    5b96:	68 94       	set
    5b98:	15 90       	lpm	r1, Z+
    5b9a:	15 91       	lpm	r17, Z+
    5b9c:	35 91       	lpm	r19, Z+
    5b9e:	65 91       	lpm	r22, Z+
    5ba0:	95 91       	lpm	r25, Z+
    5ba2:	05 90       	lpm	r0, Z+
    5ba4:	7f e2       	ldi	r23, 0x2F	; 47
    5ba6:	73 95       	inc	r23
    5ba8:	e1 18       	sub	r14, r1
    5baa:	f1 0a       	sbc	r15, r17
    5bac:	43 0b       	sbc	r20, r19
    5bae:	56 0b       	sbc	r21, r22
    5bb0:	c9 0b       	sbc	r28, r25
    5bb2:	d0 09       	sbc	r29, r0
    5bb4:	c0 f7       	brcc	.-16     	; 0x5ba6 <__ftoa_engine+0x10a>
    5bb6:	e1 0c       	add	r14, r1
    5bb8:	f1 1e       	adc	r15, r17
    5bba:	43 1f       	adc	r20, r19
    5bbc:	56 1f       	adc	r21, r22
    5bbe:	c9 1f       	adc	r28, r25
    5bc0:	d0 1d       	adc	r29, r0
    5bc2:	7e f4       	brtc	.+30     	; 0x5be2 <__ftoa_engine+0x146>
    5bc4:	70 33       	cpi	r23, 0x30	; 48
    5bc6:	11 f4       	brne	.+4      	; 0x5bcc <__ftoa_engine+0x130>
    5bc8:	8a 95       	dec	r24
    5bca:	e6 cf       	rjmp	.-52     	; 0x5b98 <__ftoa_engine+0xfc>
    5bcc:	e8 94       	clt
    5bce:	01 50       	subi	r16, 0x01	; 1
    5bd0:	30 f0       	brcs	.+12     	; 0x5bde <__ftoa_engine+0x142>
    5bd2:	08 0f       	add	r16, r24
    5bd4:	0a f4       	brpl	.+2      	; 0x5bd8 <__ftoa_engine+0x13c>
    5bd6:	00 27       	eor	r16, r16
    5bd8:	02 17       	cp	r16, r18
    5bda:	08 f4       	brcc	.+2      	; 0x5bde <__ftoa_engine+0x142>
    5bdc:	20 2f       	mov	r18, r16
    5bde:	23 95       	inc	r18
    5be0:	02 2f       	mov	r16, r18
    5be2:	7a 33       	cpi	r23, 0x3A	; 58
    5be4:	28 f0       	brcs	.+10     	; 0x5bf0 <__ftoa_engine+0x154>
    5be6:	79 e3       	ldi	r23, 0x39	; 57
    5be8:	7d 93       	st	X+, r23
    5bea:	2a 95       	dec	r18
    5bec:	e9 f7       	brne	.-6      	; 0x5be8 <__ftoa_engine+0x14c>
    5bee:	10 c0       	rjmp	.+32     	; 0x5c10 <__ftoa_engine+0x174>
    5bf0:	7d 93       	st	X+, r23
    5bf2:	2a 95       	dec	r18
    5bf4:	89 f6       	brne	.-94     	; 0x5b98 <__ftoa_engine+0xfc>
    5bf6:	06 94       	lsr	r0
    5bf8:	97 95       	ror	r25
    5bfa:	67 95       	ror	r22
    5bfc:	37 95       	ror	r19
    5bfe:	17 95       	ror	r17
    5c00:	17 94       	ror	r1
    5c02:	e1 18       	sub	r14, r1
    5c04:	f1 0a       	sbc	r15, r17
    5c06:	43 0b       	sbc	r20, r19
    5c08:	56 0b       	sbc	r21, r22
    5c0a:	c9 0b       	sbc	r28, r25
    5c0c:	d0 09       	sbc	r29, r0
    5c0e:	98 f0       	brcs	.+38     	; 0x5c36 <__ftoa_engine+0x19a>
    5c10:	23 95       	inc	r18
    5c12:	7e 91       	ld	r23, -X
    5c14:	73 95       	inc	r23
    5c16:	7a 33       	cpi	r23, 0x3A	; 58
    5c18:	08 f0       	brcs	.+2      	; 0x5c1c <__ftoa_engine+0x180>
    5c1a:	70 e3       	ldi	r23, 0x30	; 48
    5c1c:	7c 93       	st	X, r23
    5c1e:	20 13       	cpse	r18, r16
    5c20:	b8 f7       	brcc	.-18     	; 0x5c10 <__ftoa_engine+0x174>
    5c22:	7e 91       	ld	r23, -X
    5c24:	70 61       	ori	r23, 0x10	; 16
    5c26:	7d 93       	st	X+, r23
    5c28:	30 f0       	brcs	.+12     	; 0x5c36 <__ftoa_engine+0x19a>
    5c2a:	83 95       	inc	r24
    5c2c:	71 e3       	ldi	r23, 0x31	; 49
    5c2e:	7d 93       	st	X+, r23
    5c30:	70 e3       	ldi	r23, 0x30	; 48
    5c32:	2a 95       	dec	r18
    5c34:	e1 f7       	brne	.-8      	; 0x5c2e <__ftoa_engine+0x192>
    5c36:	11 24       	eor	r1, r1
    5c38:	ef 90       	pop	r14
    5c3a:	ff 90       	pop	r15
    5c3c:	0f 91       	pop	r16
    5c3e:	1f 91       	pop	r17
    5c40:	cf 91       	pop	r28
    5c42:	df 91       	pop	r29
    5c44:	99 27       	eor	r25, r25
    5c46:	87 fd       	sbrc	r24, 7
    5c48:	90 95       	com	r25
    5c4a:	08 95       	ret

00005c4c <strnlen_P>:
    5c4c:	fc 01       	movw	r30, r24
    5c4e:	05 90       	lpm	r0, Z+
    5c50:	61 50       	subi	r22, 0x01	; 1
    5c52:	70 40       	sbci	r23, 0x00	; 0
    5c54:	01 10       	cpse	r0, r1
    5c56:	d8 f7       	brcc	.-10     	; 0x5c4e <strnlen_P+0x2>
    5c58:	80 95       	com	r24
    5c5a:	90 95       	com	r25
    5c5c:	8e 0f       	add	r24, r30
    5c5e:	9f 1f       	adc	r25, r31
    5c60:	08 95       	ret

00005c62 <memcpy>:
    5c62:	fb 01       	movw	r30, r22
    5c64:	dc 01       	movw	r26, r24
    5c66:	02 c0       	rjmp	.+4      	; 0x5c6c <memcpy+0xa>
    5c68:	01 90       	ld	r0, Z+
    5c6a:	0d 92       	st	X+, r0
    5c6c:	41 50       	subi	r20, 0x01	; 1
    5c6e:	50 40       	sbci	r21, 0x00	; 0
    5c70:	d8 f7       	brcc	.-10     	; 0x5c68 <memcpy+0x6>
    5c72:	08 95       	ret

00005c74 <memset>:
    5c74:	dc 01       	movw	r26, r24
    5c76:	01 c0       	rjmp	.+2      	; 0x5c7a <memset+0x6>
    5c78:	6d 93       	st	X+, r22
    5c7a:	41 50       	subi	r20, 0x01	; 1
    5c7c:	50 40       	sbci	r21, 0x00	; 0
    5c7e:	e0 f7       	brcc	.-8      	; 0x5c78 <memset+0x4>
    5c80:	08 95       	ret

00005c82 <strcasestr>:
    5c82:	fb 01       	movw	r30, r22
    5c84:	51 91       	ld	r21, Z+
    5c86:	55 23       	and	r21, r21
    5c88:	b1 f0       	breq	.+44     	; 0x5cb6 <strcasestr+0x34>
    5c8a:	bf 01       	movw	r22, r30
    5c8c:	dc 01       	movw	r26, r24
    5c8e:	05 2e       	mov	r0, r21
    5c90:	4d 91       	ld	r20, X+
    5c92:	44 23       	and	r20, r20
    5c94:	69 f0       	breq	.+26     	; 0x5cb0 <strcasestr+0x2e>
    5c96:	10 d0       	rcall	.+32     	; 0x5cb8 <strcasestr+0x36>
    5c98:	d9 f7       	brne	.-10     	; 0x5c90 <strcasestr+0xe>
    5c9a:	cd 01       	movw	r24, r26
    5c9c:	01 90       	ld	r0, Z+
    5c9e:	00 20       	and	r0, r0
    5ca0:	49 f0       	breq	.+18     	; 0x5cb4 <strcasestr+0x32>
    5ca2:	4d 91       	ld	r20, X+
    5ca4:	41 11       	cpse	r20, r1
    5ca6:	08 d0       	rcall	.+16     	; 0x5cb8 <strcasestr+0x36>
    5ca8:	c9 f3       	breq	.-14     	; 0x5c9c <strcasestr+0x1a>
    5caa:	fb 01       	movw	r30, r22
    5cac:	41 11       	cpse	r20, r1
    5cae:	ee cf       	rjmp	.-36     	; 0x5c8c <strcasestr+0xa>
    5cb0:	81 e0       	ldi	r24, 0x01	; 1
    5cb2:	90 e0       	ldi	r25, 0x00	; 0
    5cb4:	01 97       	sbiw	r24, 0x01	; 1
    5cb6:	08 95       	ret
    5cb8:	40 25       	eor	r20, r0
    5cba:	39 f0       	breq	.+14     	; 0x5cca <strcasestr+0x48>
    5cbc:	40 32       	cpi	r20, 0x20	; 32
    5cbe:	29 f4       	brne	.+10     	; 0x5cca <strcasestr+0x48>
    5cc0:	40 29       	or	r20, r0
    5cc2:	4b 57       	subi	r20, 0x7B	; 123
    5cc4:	46 5e       	subi	r20, 0xE6	; 230
    5cc6:	08 f0       	brcs	.+2      	; 0x5cca <strcasestr+0x48>
    5cc8:	18 94       	sez
    5cca:	08 95       	ret

00005ccc <strcat>:
    5ccc:	fb 01       	movw	r30, r22
    5cce:	dc 01       	movw	r26, r24
    5cd0:	0d 90       	ld	r0, X+
    5cd2:	00 20       	and	r0, r0
    5cd4:	e9 f7       	brne	.-6      	; 0x5cd0 <strcat+0x4>
    5cd6:	11 97       	sbiw	r26, 0x01	; 1
    5cd8:	01 90       	ld	r0, Z+
    5cda:	0d 92       	st	X+, r0
    5cdc:	00 20       	and	r0, r0
    5cde:	e1 f7       	brne	.-8      	; 0x5cd8 <strcat+0xc>
    5ce0:	08 95       	ret

00005ce2 <strcpy>:
    5ce2:	fb 01       	movw	r30, r22
    5ce4:	dc 01       	movw	r26, r24
    5ce6:	01 90       	ld	r0, Z+
    5ce8:	0d 92       	st	X+, r0
    5cea:	00 20       	and	r0, r0
    5cec:	e1 f7       	brne	.-8      	; 0x5ce6 <strcpy+0x4>
    5cee:	08 95       	ret

00005cf0 <strncasecmp>:
    5cf0:	fb 01       	movw	r30, r22
    5cf2:	dc 01       	movw	r26, r24
    5cf4:	41 50       	subi	r20, 0x01	; 1
    5cf6:	50 40       	sbci	r21, 0x00	; 0
    5cf8:	88 f0       	brcs	.+34     	; 0x5d1c <strncasecmp+0x2c>
    5cfa:	8d 91       	ld	r24, X+
    5cfc:	81 34       	cpi	r24, 0x41	; 65
    5cfe:	1c f0       	brlt	.+6      	; 0x5d06 <strncasecmp+0x16>
    5d00:	8b 35       	cpi	r24, 0x5B	; 91
    5d02:	0c f4       	brge	.+2      	; 0x5d06 <strncasecmp+0x16>
    5d04:	80 5e       	subi	r24, 0xE0	; 224
    5d06:	61 91       	ld	r22, Z+
    5d08:	61 34       	cpi	r22, 0x41	; 65
    5d0a:	1c f0       	brlt	.+6      	; 0x5d12 <strncasecmp+0x22>
    5d0c:	6b 35       	cpi	r22, 0x5B	; 91
    5d0e:	0c f4       	brge	.+2      	; 0x5d12 <strncasecmp+0x22>
    5d10:	60 5e       	subi	r22, 0xE0	; 224
    5d12:	86 1b       	sub	r24, r22
    5d14:	61 11       	cpse	r22, r1
    5d16:	71 f3       	breq	.-36     	; 0x5cf4 <strncasecmp+0x4>
    5d18:	99 0b       	sbc	r25, r25
    5d1a:	08 95       	ret
    5d1c:	88 1b       	sub	r24, r24
    5d1e:	fc cf       	rjmp	.-8      	; 0x5d18 <strncasecmp+0x28>

00005d20 <strnlen>:
    5d20:	fc 01       	movw	r30, r24
    5d22:	61 50       	subi	r22, 0x01	; 1
    5d24:	70 40       	sbci	r23, 0x00	; 0
    5d26:	01 90       	ld	r0, Z+
    5d28:	01 10       	cpse	r0, r1
    5d2a:	d8 f7       	brcc	.-10     	; 0x5d22 <strnlen+0x2>
    5d2c:	80 95       	com	r24
    5d2e:	90 95       	com	r25
    5d30:	8e 0f       	add	r24, r30
    5d32:	9f 1f       	adc	r25, r31
    5d34:	08 95       	ret

00005d36 <fputc>:
    5d36:	0f 93       	push	r16
    5d38:	1f 93       	push	r17
    5d3a:	cf 93       	push	r28
    5d3c:	df 93       	push	r29
    5d3e:	fb 01       	movw	r30, r22
    5d40:	23 81       	ldd	r18, Z+3	; 0x03
    5d42:	21 fd       	sbrc	r18, 1
    5d44:	03 c0       	rjmp	.+6      	; 0x5d4c <fputc+0x16>
    5d46:	8f ef       	ldi	r24, 0xFF	; 255
    5d48:	9f ef       	ldi	r25, 0xFF	; 255
    5d4a:	2c c0       	rjmp	.+88     	; 0x5da4 <fputc+0x6e>
    5d4c:	22 ff       	sbrs	r18, 2
    5d4e:	16 c0       	rjmp	.+44     	; 0x5d7c <fputc+0x46>
    5d50:	46 81       	ldd	r20, Z+6	; 0x06
    5d52:	57 81       	ldd	r21, Z+7	; 0x07
    5d54:	24 81       	ldd	r18, Z+4	; 0x04
    5d56:	35 81       	ldd	r19, Z+5	; 0x05
    5d58:	42 17       	cp	r20, r18
    5d5a:	53 07       	cpc	r21, r19
    5d5c:	44 f4       	brge	.+16     	; 0x5d6e <fputc+0x38>
    5d5e:	a0 81       	ld	r26, Z
    5d60:	b1 81       	ldd	r27, Z+1	; 0x01
    5d62:	9d 01       	movw	r18, r26
    5d64:	2f 5f       	subi	r18, 0xFF	; 255
    5d66:	3f 4f       	sbci	r19, 0xFF	; 255
    5d68:	31 83       	std	Z+1, r19	; 0x01
    5d6a:	20 83       	st	Z, r18
    5d6c:	8c 93       	st	X, r24
    5d6e:	26 81       	ldd	r18, Z+6	; 0x06
    5d70:	37 81       	ldd	r19, Z+7	; 0x07
    5d72:	2f 5f       	subi	r18, 0xFF	; 255
    5d74:	3f 4f       	sbci	r19, 0xFF	; 255
    5d76:	37 83       	std	Z+7, r19	; 0x07
    5d78:	26 83       	std	Z+6, r18	; 0x06
    5d7a:	14 c0       	rjmp	.+40     	; 0x5da4 <fputc+0x6e>
    5d7c:	8b 01       	movw	r16, r22
    5d7e:	ec 01       	movw	r28, r24
    5d80:	fb 01       	movw	r30, r22
    5d82:	00 84       	ldd	r0, Z+8	; 0x08
    5d84:	f1 85       	ldd	r31, Z+9	; 0x09
    5d86:	e0 2d       	mov	r30, r0
    5d88:	19 95       	eicall
    5d8a:	89 2b       	or	r24, r25
    5d8c:	e1 f6       	brne	.-72     	; 0x5d46 <fputc+0x10>
    5d8e:	d8 01       	movw	r26, r16
    5d90:	16 96       	adiw	r26, 0x06	; 6
    5d92:	8d 91       	ld	r24, X+
    5d94:	9c 91       	ld	r25, X
    5d96:	17 97       	sbiw	r26, 0x07	; 7
    5d98:	01 96       	adiw	r24, 0x01	; 1
    5d9a:	17 96       	adiw	r26, 0x07	; 7
    5d9c:	9c 93       	st	X, r25
    5d9e:	8e 93       	st	-X, r24
    5da0:	16 97       	sbiw	r26, 0x06	; 6
    5da2:	ce 01       	movw	r24, r28
    5da4:	df 91       	pop	r29
    5da6:	cf 91       	pop	r28
    5da8:	1f 91       	pop	r17
    5daa:	0f 91       	pop	r16
    5dac:	08 95       	ret

00005dae <printf>:
    5dae:	cf 93       	push	r28
    5db0:	df 93       	push	r29
    5db2:	cd b7       	in	r28, 0x3d	; 61
    5db4:	de b7       	in	r29, 0x3e	; 62
    5db6:	ae 01       	movw	r20, r28
    5db8:	4a 5f       	subi	r20, 0xFA	; 250
    5dba:	5f 4f       	sbci	r21, 0xFF	; 255
    5dbc:	fa 01       	movw	r30, r20
    5dbe:	61 91       	ld	r22, Z+
    5dc0:	71 91       	ld	r23, Z+
    5dc2:	af 01       	movw	r20, r30
    5dc4:	80 91 37 17 	lds	r24, 0x1737	; 0x801737 <__iob+0x2>
    5dc8:	90 91 38 17 	lds	r25, 0x1738	; 0x801738 <__iob+0x3>
    5dcc:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <vfprintf>
    5dd0:	df 91       	pop	r29
    5dd2:	cf 91       	pop	r28
    5dd4:	08 95       	ret

00005dd6 <puts>:
    5dd6:	0f 93       	push	r16
    5dd8:	1f 93       	push	r17
    5dda:	cf 93       	push	r28
    5ddc:	df 93       	push	r29
    5dde:	e0 91 37 17 	lds	r30, 0x1737	; 0x801737 <__iob+0x2>
    5de2:	f0 91 38 17 	lds	r31, 0x1738	; 0x801738 <__iob+0x3>
    5de6:	23 81       	ldd	r18, Z+3	; 0x03
    5de8:	21 ff       	sbrs	r18, 1
    5dea:	1b c0       	rjmp	.+54     	; 0x5e22 <puts+0x4c>
    5dec:	8c 01       	movw	r16, r24
    5dee:	d0 e0       	ldi	r29, 0x00	; 0
    5df0:	c0 e0       	ldi	r28, 0x00	; 0
    5df2:	f8 01       	movw	r30, r16
    5df4:	81 91       	ld	r24, Z+
    5df6:	8f 01       	movw	r16, r30
    5df8:	60 91 37 17 	lds	r22, 0x1737	; 0x801737 <__iob+0x2>
    5dfc:	70 91 38 17 	lds	r23, 0x1738	; 0x801738 <__iob+0x3>
    5e00:	db 01       	movw	r26, r22
    5e02:	18 96       	adiw	r26, 0x08	; 8
    5e04:	ed 91       	ld	r30, X+
    5e06:	fc 91       	ld	r31, X
    5e08:	19 97       	sbiw	r26, 0x09	; 9
    5e0a:	88 23       	and	r24, r24
    5e0c:	31 f0       	breq	.+12     	; 0x5e1a <puts+0x44>
    5e0e:	19 95       	eicall
    5e10:	89 2b       	or	r24, r25
    5e12:	79 f3       	breq	.-34     	; 0x5df2 <puts+0x1c>
    5e14:	df ef       	ldi	r29, 0xFF	; 255
    5e16:	cf ef       	ldi	r28, 0xFF	; 255
    5e18:	ec cf       	rjmp	.-40     	; 0x5df2 <puts+0x1c>
    5e1a:	8a e0       	ldi	r24, 0x0A	; 10
    5e1c:	19 95       	eicall
    5e1e:	89 2b       	or	r24, r25
    5e20:	19 f0       	breq	.+6      	; 0x5e28 <puts+0x52>
    5e22:	8f ef       	ldi	r24, 0xFF	; 255
    5e24:	9f ef       	ldi	r25, 0xFF	; 255
    5e26:	02 c0       	rjmp	.+4      	; 0x5e2c <puts+0x56>
    5e28:	8d 2f       	mov	r24, r29
    5e2a:	9c 2f       	mov	r25, r28
    5e2c:	df 91       	pop	r29
    5e2e:	cf 91       	pop	r28
    5e30:	1f 91       	pop	r17
    5e32:	0f 91       	pop	r16
    5e34:	08 95       	ret

00005e36 <sprintf>:
    5e36:	0f 93       	push	r16
    5e38:	1f 93       	push	r17
    5e3a:	cf 93       	push	r28
    5e3c:	df 93       	push	r29
    5e3e:	cd b7       	in	r28, 0x3d	; 61
    5e40:	de b7       	in	r29, 0x3e	; 62
    5e42:	2e 97       	sbiw	r28, 0x0e	; 14
    5e44:	0f b6       	in	r0, 0x3f	; 63
    5e46:	f8 94       	cli
    5e48:	de bf       	out	0x3e, r29	; 62
    5e4a:	0f be       	out	0x3f, r0	; 63
    5e4c:	cd bf       	out	0x3d, r28	; 61
    5e4e:	0e 89       	ldd	r16, Y+22	; 0x16
    5e50:	1f 89       	ldd	r17, Y+23	; 0x17
    5e52:	86 e0       	ldi	r24, 0x06	; 6
    5e54:	8c 83       	std	Y+4, r24	; 0x04
    5e56:	1a 83       	std	Y+2, r17	; 0x02
    5e58:	09 83       	std	Y+1, r16	; 0x01
    5e5a:	8f ef       	ldi	r24, 0xFF	; 255
    5e5c:	9f e7       	ldi	r25, 0x7F	; 127
    5e5e:	9e 83       	std	Y+6, r25	; 0x06
    5e60:	8d 83       	std	Y+5, r24	; 0x05
    5e62:	ae 01       	movw	r20, r28
    5e64:	46 5e       	subi	r20, 0xE6	; 230
    5e66:	5f 4f       	sbci	r21, 0xFF	; 255
    5e68:	68 8d       	ldd	r22, Y+24	; 0x18
    5e6a:	79 8d       	ldd	r23, Y+25	; 0x19
    5e6c:	ce 01       	movw	r24, r28
    5e6e:	01 96       	adiw	r24, 0x01	; 1
    5e70:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <vfprintf>
    5e74:	ef 81       	ldd	r30, Y+7	; 0x07
    5e76:	f8 85       	ldd	r31, Y+8	; 0x08
    5e78:	e0 0f       	add	r30, r16
    5e7a:	f1 1f       	adc	r31, r17
    5e7c:	10 82       	st	Z, r1
    5e7e:	2e 96       	adiw	r28, 0x0e	; 14
    5e80:	0f b6       	in	r0, 0x3f	; 63
    5e82:	f8 94       	cli
    5e84:	de bf       	out	0x3e, r29	; 62
    5e86:	0f be       	out	0x3f, r0	; 63
    5e88:	cd bf       	out	0x3d, r28	; 61
    5e8a:	df 91       	pop	r29
    5e8c:	cf 91       	pop	r28
    5e8e:	1f 91       	pop	r17
    5e90:	0f 91       	pop	r16
    5e92:	08 95       	ret

00005e94 <__ultoa_invert>:
    5e94:	fa 01       	movw	r30, r20
    5e96:	aa 27       	eor	r26, r26
    5e98:	28 30       	cpi	r18, 0x08	; 8
    5e9a:	51 f1       	breq	.+84     	; 0x5ef0 <__ultoa_invert+0x5c>
    5e9c:	20 31       	cpi	r18, 0x10	; 16
    5e9e:	81 f1       	breq	.+96     	; 0x5f00 <__ultoa_invert+0x6c>
    5ea0:	e8 94       	clt
    5ea2:	6f 93       	push	r22
    5ea4:	6e 7f       	andi	r22, 0xFE	; 254
    5ea6:	6e 5f       	subi	r22, 0xFE	; 254
    5ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eaa:	8f 4f       	sbci	r24, 0xFF	; 255
    5eac:	9f 4f       	sbci	r25, 0xFF	; 255
    5eae:	af 4f       	sbci	r26, 0xFF	; 255
    5eb0:	b1 e0       	ldi	r27, 0x01	; 1
    5eb2:	3e d0       	rcall	.+124    	; 0x5f30 <__ultoa_invert+0x9c>
    5eb4:	b4 e0       	ldi	r27, 0x04	; 4
    5eb6:	3c d0       	rcall	.+120    	; 0x5f30 <__ultoa_invert+0x9c>
    5eb8:	67 0f       	add	r22, r23
    5eba:	78 1f       	adc	r23, r24
    5ebc:	89 1f       	adc	r24, r25
    5ebe:	9a 1f       	adc	r25, r26
    5ec0:	a1 1d       	adc	r26, r1
    5ec2:	68 0f       	add	r22, r24
    5ec4:	79 1f       	adc	r23, r25
    5ec6:	8a 1f       	adc	r24, r26
    5ec8:	91 1d       	adc	r25, r1
    5eca:	a1 1d       	adc	r26, r1
    5ecc:	6a 0f       	add	r22, r26
    5ece:	71 1d       	adc	r23, r1
    5ed0:	81 1d       	adc	r24, r1
    5ed2:	91 1d       	adc	r25, r1
    5ed4:	a1 1d       	adc	r26, r1
    5ed6:	20 d0       	rcall	.+64     	; 0x5f18 <__ultoa_invert+0x84>
    5ed8:	09 f4       	brne	.+2      	; 0x5edc <__ultoa_invert+0x48>
    5eda:	68 94       	set
    5edc:	3f 91       	pop	r19
    5ede:	2a e0       	ldi	r18, 0x0A	; 10
    5ee0:	26 9f       	mul	r18, r22
    5ee2:	11 24       	eor	r1, r1
    5ee4:	30 19       	sub	r19, r0
    5ee6:	30 5d       	subi	r19, 0xD0	; 208
    5ee8:	31 93       	st	Z+, r19
    5eea:	de f6       	brtc	.-74     	; 0x5ea2 <__ultoa_invert+0xe>
    5eec:	cf 01       	movw	r24, r30
    5eee:	08 95       	ret
    5ef0:	46 2f       	mov	r20, r22
    5ef2:	47 70       	andi	r20, 0x07	; 7
    5ef4:	40 5d       	subi	r20, 0xD0	; 208
    5ef6:	41 93       	st	Z+, r20
    5ef8:	b3 e0       	ldi	r27, 0x03	; 3
    5efa:	0f d0       	rcall	.+30     	; 0x5f1a <__ultoa_invert+0x86>
    5efc:	c9 f7       	brne	.-14     	; 0x5ef0 <__ultoa_invert+0x5c>
    5efe:	f6 cf       	rjmp	.-20     	; 0x5eec <__ultoa_invert+0x58>
    5f00:	46 2f       	mov	r20, r22
    5f02:	4f 70       	andi	r20, 0x0F	; 15
    5f04:	40 5d       	subi	r20, 0xD0	; 208
    5f06:	4a 33       	cpi	r20, 0x3A	; 58
    5f08:	18 f0       	brcs	.+6      	; 0x5f10 <__ultoa_invert+0x7c>
    5f0a:	49 5d       	subi	r20, 0xD9	; 217
    5f0c:	31 fd       	sbrc	r19, 1
    5f0e:	40 52       	subi	r20, 0x20	; 32
    5f10:	41 93       	st	Z+, r20
    5f12:	02 d0       	rcall	.+4      	; 0x5f18 <__ultoa_invert+0x84>
    5f14:	a9 f7       	brne	.-22     	; 0x5f00 <__ultoa_invert+0x6c>
    5f16:	ea cf       	rjmp	.-44     	; 0x5eec <__ultoa_invert+0x58>
    5f18:	b4 e0       	ldi	r27, 0x04	; 4
    5f1a:	a6 95       	lsr	r26
    5f1c:	97 95       	ror	r25
    5f1e:	87 95       	ror	r24
    5f20:	77 95       	ror	r23
    5f22:	67 95       	ror	r22
    5f24:	ba 95       	dec	r27
    5f26:	c9 f7       	brne	.-14     	; 0x5f1a <__ultoa_invert+0x86>
    5f28:	00 97       	sbiw	r24, 0x00	; 0
    5f2a:	61 05       	cpc	r22, r1
    5f2c:	71 05       	cpc	r23, r1
    5f2e:	08 95       	ret
    5f30:	9b 01       	movw	r18, r22
    5f32:	ac 01       	movw	r20, r24
    5f34:	0a 2e       	mov	r0, r26
    5f36:	06 94       	lsr	r0
    5f38:	57 95       	ror	r21
    5f3a:	47 95       	ror	r20
    5f3c:	37 95       	ror	r19
    5f3e:	27 95       	ror	r18
    5f40:	ba 95       	dec	r27
    5f42:	c9 f7       	brne	.-14     	; 0x5f36 <__ultoa_invert+0xa2>
    5f44:	62 0f       	add	r22, r18
    5f46:	73 1f       	adc	r23, r19
    5f48:	84 1f       	adc	r24, r20
    5f4a:	95 1f       	adc	r25, r21
    5f4c:	a0 1d       	adc	r26, r0
    5f4e:	08 95       	ret

00005f50 <_exit>:
    5f50:	f8 94       	cli

00005f52 <__stop_program>:
    5f52:	ff cf       	rjmp	.-2      	; 0x5f52 <__stop_program>
