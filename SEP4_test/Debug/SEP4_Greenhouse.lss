
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000073c  00800200  00006eae  00006f42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006eae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000101d  0080093c  0080093c  0000767e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000767e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000076dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c08  00000000  00000000  0000771c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e4e5  00000000  00000000  00008324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d15  00000000  00000000  00016809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007383  00000000  00000000  0001a51e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000028dc  00000000  00000000  000218a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000044dd  00000000  00000000  00024180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c57f  00000000  00000000  0002865d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  00034bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c7       	rjmp	.+3736   	; 0xeca <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 01 28 	jmp	0x5002	; 0x5002 <__vector_25>
      68:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 97 28 	jmp	0x512e	; 0x512e <__vector_36>
      94:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 34 2d 	jmp	0x5a68	; 0x5a68 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__vector_51>
      d0:	0c 94 7f 29 	jmp	0x52fe	; 0x52fe <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c3 29 	jmp	0x5386	; 0x5386 <__vector_54>
      dc:	0c 94 15 2a 	jmp	0x542a	; 0x542a <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3f 1d       	adc	r19, r15
      e6:	3f 1d       	adc	r19, r15
      e8:	3f 1d       	adc	r19, r15
      ea:	76 1d       	adc	r23, r6
      ec:	7e 1d       	adc	r23, r14
      ee:	93 1d       	adc	r25, r3
      f0:	3f 1d       	adc	r19, r15
      f2:	3f 1d       	adc	r19, r15
      f4:	76 1d       	adc	r23, r6
      f6:	7e 1d       	adc	r23, r14
      f8:	56 2d       	mov	r21, r6
      fa:	c6 2d       	mov	r28, r6
      fc:	c6 2d       	mov	r28, r6
      fe:	c6 2d       	mov	r28, r6
     100:	c6 2d       	mov	r28, r6
     102:	c6 2d       	mov	r28, r6
     104:	c6 2d       	mov	r28, r6
     106:	c6 2d       	mov	r28, r6
     108:	56 2d       	mov	r21, r6
     10a:	c6 2d       	mov	r28, r6
     10c:	c6 2d       	mov	r28, r6
     10e:	c6 2d       	mov	r28, r6
     110:	c6 2d       	mov	r28, r6
     112:	c6 2d       	mov	r28, r6
     114:	c6 2d       	mov	r28, r6
     116:	c6 2d       	mov	r28, r6
     118:	58 2d       	mov	r21, r8
     11a:	c6 2d       	mov	r28, r6
     11c:	c6 2d       	mov	r28, r6
     11e:	c6 2d       	mov	r28, r6
     120:	c6 2d       	mov	r28, r6
     122:	c6 2d       	mov	r28, r6
     124:	c6 2d       	mov	r28, r6
     126:	c6 2d       	mov	r28, r6
     128:	c6 2d       	mov	r28, r6
     12a:	c6 2d       	mov	r28, r6
     12c:	c6 2d       	mov	r28, r6
     12e:	c6 2d       	mov	r28, r6
     130:	c6 2d       	mov	r28, r6
     132:	c6 2d       	mov	r28, r6
     134:	c6 2d       	mov	r28, r6
     136:	c6 2d       	mov	r28, r6
     138:	58 2d       	mov	r21, r8
     13a:	c6 2d       	mov	r28, r6
     13c:	c6 2d       	mov	r28, r6
     13e:	c6 2d       	mov	r28, r6
     140:	c6 2d       	mov	r28, r6
     142:	c6 2d       	mov	r28, r6
     144:	c6 2d       	mov	r28, r6
     146:	c6 2d       	mov	r28, r6
     148:	c6 2d       	mov	r28, r6
     14a:	c6 2d       	mov	r28, r6
     14c:	c6 2d       	mov	r28, r6
     14e:	c6 2d       	mov	r28, r6
     150:	c6 2d       	mov	r28, r6
     152:	c6 2d       	mov	r28, r6
     154:	c6 2d       	mov	r28, r6
     156:	c6 2d       	mov	r28, r6
     158:	c2 2d       	mov	r28, r2
     15a:	c6 2d       	mov	r28, r6
     15c:	c6 2d       	mov	r28, r6
     15e:	c6 2d       	mov	r28, r6
     160:	c6 2d       	mov	r28, r6
     162:	c6 2d       	mov	r28, r6
     164:	c6 2d       	mov	r28, r6
     166:	c6 2d       	mov	r28, r6
     168:	8d 2d       	mov	r24, r13
     16a:	c6 2d       	mov	r28, r6
     16c:	c6 2d       	mov	r28, r6
     16e:	c6 2d       	mov	r28, r6
     170:	c6 2d       	mov	r28, r6
     172:	c6 2d       	mov	r28, r6
     174:	c6 2d       	mov	r28, r6
     176:	c6 2d       	mov	r28, r6
     178:	c6 2d       	mov	r28, r6
     17a:	c6 2d       	mov	r28, r6
     17c:	c6 2d       	mov	r28, r6
     17e:	c6 2d       	mov	r28, r6
     180:	c6 2d       	mov	r28, r6
     182:	c6 2d       	mov	r28, r6
     184:	c6 2d       	mov	r28, r6
     186:	c6 2d       	mov	r28, r6
     188:	81 2d       	mov	r24, r1
     18a:	c6 2d       	mov	r28, r6
     18c:	c6 2d       	mov	r28, r6
     18e:	c6 2d       	mov	r28, r6
     190:	c6 2d       	mov	r28, r6
     192:	c6 2d       	mov	r28, r6
     194:	c6 2d       	mov	r28, r6
     196:	c6 2d       	mov	r28, r6
     198:	a5 2d       	mov	r26, r5

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <prvCheckTasksWaitingTermination>
     2a0:	80 91 61 17 	lds	r24, 0x1761	; 0x801761 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	4a d5       	rcall	.+2708   	; 0xd3e <vPortYield>
     2aa:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 bc 1a 	call	0x3578	; 0x3578 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 b1 1c 	call	0x3962	; 0x3962 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	19 e0       	ldi	r17, 0x09	; 9
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ee ea       	ldi	r30, 0xAE	; 174
     2e6:	fe e6       	ldi	r31, 0x6E	; 110
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ac 33       	cpi	r26, 0x3C	; 60
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	29 e1       	ldi	r18, 0x19	; 25
     2fa:	ac e3       	ldi	r26, 0x3C	; 60
     2fc:	b9 e0       	ldi	r27, 0x09	; 9
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a9 35       	cpi	r26, 0x59	; 89
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 9e 20 	call	0x413c	; 0x413c <main>
     30c:	0c 94 55 37 	jmp	0x6eaa	; 0x6eaa <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <measureEventGroup>
     34e:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <measureEventGroup+0x1>
     352:	40 d2       	rcall	.+1152   	; 0x7d4 <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <dataReadyEventGroup>
     36c:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <dataReadyEventGroup+0x1>
     370:	91 d1       	rcall	.+802    	; 0x694 <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <TempHumSensor_getTemp>
     38a:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <TempHumSensor_getHum>
     392:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <CO2_getPPM>
     39a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <set_CO2_ppm>
			lora_driver_payload_t payload = get_lora_package(2);
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	ce 01       	movw	r24, r28
     3a2:	05 96       	adiw	r24, 0x05	; 5
     3a4:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3a8:	0f ef       	ldi	r16, 0xFF	; 255
     3aa:	1f ef       	ldi	r17, 0xFF	; 255
     3ac:	98 01       	movw	r18, r16
     3ae:	46 e1       	ldi	r20, 0x16	; 22
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	be 01       	movw	r22, r28
     3b4:	6b 5f       	subi	r22, 0xFB	; 251
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uplinkMessageBufferHandle>
     3bc:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <uplinkMessageBufferHandle+0x1>
     3c0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     3c4:	86 31       	cpi	r24, 0x16	; 22
     3c6:	29 f0       	breq	.+10     	; 0x3d2 <main_application_task+0xc0>
				printf("Timed out.\n");
     3c8:	81 e7       	ldi	r24, 0x71	; 113
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	0e 94 98 36 	call	0x6d30	; 0x6d30 <puts>
     3d0:	b0 cf       	rjmp	.-160    	; 0x332 <main_application_task+0x20>
				// 			printf("Bytes sent: %d\n", xBytesSent);
				// 			printf("Temp sent: %d\n", tem);
				// 			printf("Humidity sent: %d\n", hum);
				// 			printf("Size of payload: %d\n", sizeof(payload));
				//			receivePayload();
				printf("Bytes put in buffer: %d\n", xBytesSent);
     3d2:	99 27       	eor	r25, r25
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	8c e7       	ldi	r24, 0x7C	; 124
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	a2 cf       	rjmp	.-188    	; 0x332 <main_application_task+0x20>

000003ee <create_main_application_task>:



void main_application_task(void *pvParameters);

void create_main_application_task(UBaseType_t priority){
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
		
	xTaskCreate(
     3f4:	e1 2c       	mov	r14, r1
     3f6:	f1 2c       	mov	r15, r1
     3f8:	08 2f       	mov	r16, r24
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 ec       	ldi	r20, 0xC0	; 192
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	65 e9       	ldi	r22, 0x95	; 149
     404:	72 e0       	ldi	r23, 0x02	; 2
     406:	89 e8       	ldi	r24, 0x89	; 137
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + priority 
	,  NULL );
	
}
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	08 95       	ret

00000416 <get_max_temperature>:
	return max_temperature;
}

uint16_t get_max_humidity(){
	return max_humidity;
}
     416:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <max_temperature>
     41a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <max_temperature+0x1>
     41e:	08 95       	ret

00000420 <set_max_temperature>:

void set_max_temperature(int16_t maxTemp){
	max_temperature = maxTemp;
     420:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <max_temperature+0x1>
     424:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <max_temperature>
     428:	08 95       	ret

0000042a <set_max_humidity>:
}
void set_max_humidity(uint16_t maxHum){
	max_humidity = maxHum;
     42a:	90 93 3d 09 	sts	0x093D, r25	; 0x80093d <__data_end+0x1>
     42e:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <__data_end>
     432:	08 95       	ret

00000434 <setConfiguration>:
}


void setConfiguration(lora_driver_payload_t payload){
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
	int16_t newMaxTemp = 0;
	uint16_t newMaxHum = 0;
	newMaxTemp = (payload.bytes[0] << 8 | payload.bytes[1]);
     444:	ec 84       	ldd	r14, Y+12	; 0x0c
     446:	f1 2c       	mov	r15, r1
     448:	fe 2c       	mov	r15, r14
     44a:	ee 24       	eor	r14, r14
     44c:	8d 85       	ldd	r24, Y+13	; 0x0d
     44e:	e8 2a       	or	r14, r24
	newMaxHum = (payload.bytes[2] << 8 | payload.bytes[3]);
     450:	0e 85       	ldd	r16, Y+14	; 0x0e
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	10 2f       	mov	r17, r16
     456:	00 27       	eor	r16, r16
     458:	8f 85       	ldd	r24, Y+15	; 0x0f
     45a:	08 2b       	or	r16, r24
	set_max_temperature(newMaxTemp);
     45c:	c7 01       	movw	r24, r14
     45e:	e0 df       	rcall	.-64     	; 0x420 <set_max_temperature>
	set_max_humidity(newMaxHum);
     460:	80 2f       	mov	r24, r16
     462:	91 2f       	mov	r25, r17
     464:	e2 df       	rcall	.-60     	; 0x42a <set_max_humidity>
	printf("New config, max temp: %d, max hum: %d\n", newMaxTemp, newMaxHum);
     466:	1f 93       	push	r17
     468:	0f 93       	push	r16
     46a:	ff 92       	push	r15
     46c:	ef 92       	push	r14
     46e:	85 ea       	ldi	r24, 0xA5	; 165
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	08 95       	ret

00000494 <lora_downlink_handler_task>:
	uint8_t xReceivedBytes = 0;
	
	for(;;){
		
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle, 
     494:	0f ef       	ldi	r16, 0xFF	; 255
     496:	1f ef       	ldi	r17, 0xFF	; 255
     498:	98 01       	movw	r18, r16
     49a:	46 e1       	ldi	r20, 0x16	; 22
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	6e e3       	ldi	r22, 0x3E	; 62
     4a0:	79 e0       	ldi	r23, 0x09	; 9
     4a2:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <downlinkMessageBufferHandle>
     4a6:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <downlinkMessageBufferHandle+0x1>
     4aa:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <xStreamBufferReceive>
		&_downlink_payload, 
		sizeof(lora_driver_payload_t), 
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     4ae:	88 23       	and	r24, r24
     4b0:	89 f3       	breq	.-30     	; 0x494 <lora_downlink_handler_task>
			printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     4b2:	ee e3       	ldi	r30, 0x3E	; 62
     4b4:	f9 e0       	ldi	r31, 0x09	; 9
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	80 81       	ld	r24, Z
     4ba:	1f 92       	push	r1
     4bc:	9f 93       	push	r25
     4be:	1f 92       	push	r1
     4c0:	8f 93       	push	r24
     4c2:	8c ec       	ldi	r24, 0xCC	; 204
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	9f 93       	push	r25
     4c8:	8f 93       	push	r24
     4ca:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
			
			if(configSemaphore != NULL){
     4ce:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <configSemaphore>
     4d2:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <configSemaphore+0x1>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	b9 f2       	breq	.-82     	; 0x494 <lora_downlink_handler_task>
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     4e6:	4a e0       	ldi	r20, 0x0A	; 10
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	b9 d7       	rcall	.+3954   	; 0x1462 <xQueueSemaphoreTake>
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	39 f5       	brne	.+78     	; 0x542 <lora_downlink_handler_task+0xae>
					setConfiguration(_downlink_payload);
     4f4:	8d b7       	in	r24, 0x3d	; 61
     4f6:	9e b7       	in	r25, 0x3e	; 62
     4f8:	46 97       	sbiw	r24, 0x16	; 22
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	9e bf       	out	0x3e, r25	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	8d bf       	out	0x3d, r24	; 61
     504:	ad b7       	in	r26, 0x3d	; 61
     506:	be b7       	in	r27, 0x3e	; 62
     508:	11 96       	adiw	r26, 0x01	; 1
     50a:	86 e1       	ldi	r24, 0x16	; 22
     50c:	ee e3       	ldi	r30, 0x3E	; 62
     50e:	f9 e0       	ldi	r31, 0x09	; 9
     510:	01 90       	ld	r0, Z+
     512:	0d 92       	st	X+, r0
     514:	8a 95       	dec	r24
     516:	e1 f7       	brne	.-8      	; 0x510 <lora_downlink_handler_task+0x7c>
     518:	8d df       	rcall	.-230    	; 0x434 <setConfiguration>
					xSemaphoreGive(configSemaphore);
     51a:	00 e0       	ldi	r16, 0x00	; 0
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	a9 01       	movw	r20, r18
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <configSemaphore>
     52a:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <configSemaphore+0x1>
     52e:	1f d6       	rcall	.+3134   	; 0x116e <xQueueGenericSend>
     530:	8d b7       	in	r24, 0x3d	; 61
     532:	9e b7       	in	r25, 0x3e	; 62
     534:	46 96       	adiw	r24, 0x16	; 22
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	9e bf       	out	0x3e, r25	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	8d bf       	out	0x3d, r24	; 61
     540:	a9 cf       	rjmp	.-174    	; 0x494 <lora_downlink_handler_task>
				}
				else{
					printf("Couldn't obtain semaphore.\n");
     542:	8d ef       	ldi	r24, 0xFD	; 253
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 98 36 	call	0x6d30	; 0x6d30 <puts>
     54a:	a4 cf       	rjmp	.-184    	; 0x494 <lora_downlink_handler_task>

0000054c <create_lora_downlink_handler_task>:

void lora_downlink_handler_task(void *pvParameters);

static lora_driver_payload_t _downlink_payload;

void create_lora_downlink_handler_task(UBaseType_t priority){
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
		xTaskCreate(
     552:	e1 2c       	mov	r14, r1
     554:	f1 2c       	mov	r15, r1
     556:	08 2f       	mov	r16, r24
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	48 e8       	ldi	r20, 0x88	; 136
     55e:	51 e0       	ldi	r21, 0x01	; 1
     560:	68 e1       	ldi	r22, 0x18	; 24
     562:	73 e0       	ldi	r23, 0x03	; 3
     564:	8a e4       	ldi	r24, 0x4A	; 74
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskCreate>
		,  "LRHandDownlink"
		,  configMINIMAL_STACK_SIZE+200
		,  NULL
		,  tskIDLE_PRIORITY + priority
		,  NULL );
}
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	08 95       	ret

00000574 <fan_controller_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void fan_controller_task(void *pvParameters) {
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	00 d0       	rcall	.+0      	; 0x57a <fan_controller_task+0x6>
     57a:	1f 92       	push	r1
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
	int16_t thresholdTemperature = 0;
	uint16_t thresholdHumidity = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(5000); 
	xLastWakeTime = xTaskGetTickCount();
     580:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskGetTickCount>
     584:	69 83       	std	Y+1, r22	; 0x01
     586:	7a 83       	std	Y+2, r23	; 0x02
     588:	8b 83       	std	Y+3, r24	; 0x03
     58a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     58c:	46 e3       	ldi	r20, 0x36	; 54
     58e:	51 e0       	ldi	r21, 0x01	; 1
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	ce 01       	movw	r24, r28
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xTaskDelayUntil>
		thresholdTemperature = get_max_temperature();
     59c:	3c df       	rcall	.-392    	; 0x416 <get_max_temperature>
     59e:	7c 01       	movw	r14, r24
		
		measure_Temp_Hum();
     5a0:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <measure_Temp_Hum>
		currentTemperature = TempHumSensor_getTemp();
     5a4:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <TempHumSensor_getTemp>
     5a8:	8c 01       	movw	r16, r24
		currentHumidity = TempHumSensor_getHum();
     5aa:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <TempHumSensor_getHum>
		
		printf("Current temp: %d\n", currentTemperature/10);
     5ae:	c8 01       	movw	r24, r16
     5b0:	6a e0       	ldi	r22, 0x0A	; 10
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	0e 94 85 33 	call	0x670a	; 0x670a <__divmodhi4>
     5b8:	8b 01       	movw	r16, r22
     5ba:	1f 93       	push	r17
     5bc:	6f 93       	push	r22
     5be:	87 e2       	ldi	r24, 0x27	; 39
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
		printf("Threshold temp: %d\n", thresholdTemperature);
     5ca:	ff 92       	push	r15
     5cc:	ef 92       	push	r14
     5ce:	89 e3       	ldi	r24, 0x39	; 57
     5d0:	93 e0       	ldi	r25, 0x03	; 3
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
		if(currentTemperature/10 > thresholdTemperature){
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	e0 16       	cp	r14, r16
     5e6:	f1 06       	cpc	r15, r17
     5e8:	2c f4       	brge	.+10     	; 0x5f4 <fan_controller_task+0x80>
// 			PORTA = 0x00;
			servo_set_position(0, 100);
     5ea:	64 e6       	ldi	r22, 0x64	; 100
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <servo_set_position>
     5f2:	cc cf       	rjmp	.-104    	; 0x58c <fan_controller_task+0x18>
		}
		else{
// 			PORTA = 0xFF;
			servo_set_position(0, -100);
     5f4:	6c e9       	ldi	r22, 0x9C	; 156
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <servo_set_position>
     5fc:	c7 cf       	rjmp	.-114    	; 0x58c <fan_controller_task+0x18>

000005fe <create_fan_controller_task>:

#include "FanController.h"

void fan_controller_task(void *pvParameters);

void create_fan_controller_task(UBaseType_t priority){
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
	
	DDRA = 0xFF;
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	91 b9       	out	0x01, r25	; 1
	PORTA = 0xFF;
     608:	92 b9       	out	0x02, r25	; 2
	
	xTaskCreate(
     60a:	e1 2c       	mov	r14, r1
     60c:	f1 2c       	mov	r15, r1
     60e:	08 2f       	mov	r16, r24
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	40 ec       	ldi	r20, 0xC0	; 192
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	6d e4       	ldi	r22, 0x4D	; 77
     61a:	73 e0       	ldi	r23, 0x03	; 3
     61c:	8a eb       	ldi	r24, 0xBA	; 186
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskCreate>
	,  "FanController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	08 95       	ret

0000062c <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     62c:	0f 93       	push	r16
     62e:	01 11       	cpse	r16, r1
     630:	0c c0       	rjmp	.+24     	; 0x64a <prvTestWaitCondition+0x1e>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	82 23       	and	r24, r18
     638:	93 23       	and	r25, r19
     63a:	a4 23       	and	r26, r20
     63c:	b5 23       	and	r27, r21
     63e:	89 2b       	or	r24, r25
     640:	8a 2b       	or	r24, r26
     642:	8b 2b       	or	r24, r27
     644:	79 f4       	brne	.+30     	; 0x664 <prvTestWaitCondition+0x38>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	10 c0       	rjmp	.+32     	; 0x66a <prvTestWaitCondition+0x3e>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	82 23       	and	r24, r18
     650:	93 23       	and	r25, r19
     652:	a4 23       	and	r26, r20
     654:	b5 23       	and	r27, r21
     656:	28 17       	cp	r18, r24
     658:	39 07       	cpc	r19, r25
     65a:	4a 07       	cpc	r20, r26
     65c:	5b 07       	cpc	r21, r27
     65e:	21 f0       	breq	.+8      	; 0x668 <prvTestWaitCondition+0x3c>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	03 c0       	rjmp	.+6      	; 0x66a <prvTestWaitCondition+0x3e>
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	01 c0       	rjmp	.+2      	; 0x66a <prvTestWaitCondition+0x3e>
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	0f 91       	pop	r16
     66c:	08 95       	ret

0000066e <xEventGroupCreate>:
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	8f e0       	ldi	r24, 0x0F	; 15
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	af d1       	rcall	.+862    	; 0x9d6 <pvPortMalloc>
     678:	ec 01       	movw	r28, r24
     67a:	00 97       	sbiw	r24, 0x00	; 0
     67c:	39 f0       	breq	.+14     	; 0x68c <xEventGroupCreate+0x1e>
     67e:	fc 01       	movw	r30, r24
     680:	11 92       	st	Z+, r1
     682:	11 92       	st	Z+, r1
     684:	11 92       	st	Z+, r1
     686:	11 92       	st	Z+, r1
     688:	cf 01       	movw	r24, r30
     68a:	8b d2       	rcall	.+1302   	; 0xba2 <vListInitialise>
     68c:	ce 01       	movw	r24, r28
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <xEventGroupWaitBits>:
     694:	2f 92       	push	r2
     696:	3f 92       	push	r3
     698:	4f 92       	push	r4
     69a:	5f 92       	push	r5
     69c:	6f 92       	push	r6
     69e:	7f 92       	push	r7
     6a0:	8f 92       	push	r8
     6a2:	9f 92       	push	r9
     6a4:	af 92       	push	r10
     6a6:	bf 92       	push	r11
     6a8:	cf 92       	push	r12
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	ec 01       	movw	r28, r24
     6ba:	4a 01       	movw	r8, r20
     6bc:	5b 01       	movw	r10, r22
     6be:	62 2e       	mov	r6, r18
     6c0:	70 2e       	mov	r7, r16
     6c2:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskSuspendAll>
     6c6:	28 80       	ld	r2, Y
     6c8:	39 80       	ldd	r3, Y+1	; 0x01
     6ca:	4a 80       	ldd	r4, Y+2	; 0x02
     6cc:	5b 80       	ldd	r5, Y+3	; 0x03
     6ce:	a5 01       	movw	r20, r10
     6d0:	94 01       	movw	r18, r8
     6d2:	c2 01       	movw	r24, r4
     6d4:	b1 01       	movw	r22, r2
     6d6:	aa df       	rcall	.-172    	; 0x62c <prvTestWaitCondition>
     6d8:	88 23       	and	r24, r24
     6da:	a1 f0       	breq	.+40     	; 0x704 <xEventGroupWaitBits+0x70>
     6dc:	66 20       	and	r6, r6
     6de:	89 f1       	breq	.+98     	; 0x742 <xEventGroupWaitBits+0xae>
     6e0:	d5 01       	movw	r26, r10
     6e2:	c4 01       	movw	r24, r8
     6e4:	80 95       	com	r24
     6e6:	90 95       	com	r25
     6e8:	a0 95       	com	r26
     6ea:	b0 95       	com	r27
     6ec:	82 21       	and	r24, r2
     6ee:	93 21       	and	r25, r3
     6f0:	a4 21       	and	r26, r4
     6f2:	b5 21       	and	r27, r5
     6f4:	88 83       	st	Y, r24
     6f6:	99 83       	std	Y+1, r25	; 0x01
     6f8:	aa 83       	std	Y+2, r26	; 0x02
     6fa:	bb 83       	std	Y+3, r27	; 0x03
     6fc:	c1 2c       	mov	r12, r1
     6fe:	d1 2c       	mov	r13, r1
     700:	76 01       	movw	r14, r12
     702:	22 c0       	rjmp	.+68     	; 0x748 <xEventGroupWaitBits+0xb4>
     704:	c1 14       	cp	r12, r1
     706:	d1 04       	cpc	r13, r1
     708:	e1 04       	cpc	r14, r1
     70a:	f1 04       	cpc	r15, r1
     70c:	e9 f0       	breq	.+58     	; 0x748 <xEventGroupWaitBits+0xb4>
     70e:	61 10       	cpse	r6, r1
     710:	04 c0       	rjmp	.+8      	; 0x71a <xEventGroupWaitBits+0x86>
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	ba 01       	movw	r22, r20
     718:	04 c0       	rjmp	.+8      	; 0x722 <xEventGroupWaitBits+0x8e>
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	71 e0       	ldi	r23, 0x01	; 1
     722:	71 10       	cpse	r7, r1
     724:	74 60       	ori	r23, 0x04	; 4
     726:	48 29       	or	r20, r8
     728:	59 29       	or	r21, r9
     72a:	6a 29       	or	r22, r10
     72c:	7b 29       	or	r23, r11
     72e:	97 01       	movw	r18, r14
     730:	86 01       	movw	r16, r12
     732:	ce 01       	movw	r24, r28
     734:	04 96       	adiw	r24, 0x04	; 4
     736:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <vTaskPlaceOnUnorderedEventList>
     73a:	21 2c       	mov	r2, r1
     73c:	31 2c       	mov	r3, r1
     73e:	21 01       	movw	r4, r2
     740:	03 c0       	rjmp	.+6      	; 0x748 <xEventGroupWaitBits+0xb4>
     742:	c1 2c       	mov	r12, r1
     744:	d1 2c       	mov	r13, r1
     746:	76 01       	movw	r14, r12
     748:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>
     74c:	cd 28       	or	r12, r13
     74e:	ce 28       	or	r12, r14
     750:	cf 28       	or	r12, r15
     752:	59 f1       	breq	.+86     	; 0x7aa <xEventGroupWaitBits+0x116>
     754:	81 11       	cpse	r24, r1
     756:	01 c0       	rjmp	.+2      	; 0x75a <xEventGroupWaitBits+0xc6>
     758:	f2 d2       	rcall	.+1508   	; 0xd3e <vPortYield>
     75a:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <uxTaskResetEventItemValue>
     75e:	6b 01       	movw	r12, r22
     760:	7c 01       	movw	r14, r24
     762:	91 fd       	sbrc	r25, 1
     764:	1f c0       	rjmp	.+62     	; 0x7a4 <xEventGroupWaitBits+0x110>
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	0f 92       	push	r0
     76c:	c8 80       	ld	r12, Y
     76e:	d9 80       	ldd	r13, Y+1	; 0x01
     770:	ea 80       	ldd	r14, Y+2	; 0x02
     772:	fb 80       	ldd	r15, Y+3	; 0x03
     774:	07 2d       	mov	r16, r7
     776:	a5 01       	movw	r20, r10
     778:	94 01       	movw	r18, r8
     77a:	c7 01       	movw	r24, r14
     77c:	b6 01       	movw	r22, r12
     77e:	56 df       	rcall	.-340    	; 0x62c <prvTestWaitCondition>
     780:	88 23       	and	r24, r24
     782:	71 f0       	breq	.+28     	; 0x7a0 <xEventGroupWaitBits+0x10c>
     784:	66 20       	and	r6, r6
     786:	61 f0       	breq	.+24     	; 0x7a0 <xEventGroupWaitBits+0x10c>
     788:	80 94       	com	r8
     78a:	90 94       	com	r9
     78c:	a0 94       	com	r10
     78e:	b0 94       	com	r11
     790:	8c 20       	and	r8, r12
     792:	9d 20       	and	r9, r13
     794:	ae 20       	and	r10, r14
     796:	bf 20       	and	r11, r15
     798:	88 82       	st	Y, r8
     79a:	99 82       	std	Y+1, r9	; 0x01
     79c:	aa 82       	std	Y+2, r10	; 0x02
     79e:	bb 82       	std	Y+3, r11	; 0x03
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	16 01       	movw	r2, r12
     7a6:	27 01       	movw	r4, r14
     7a8:	55 24       	eor	r5, r5
     7aa:	c2 01       	movw	r24, r4
     7ac:	b1 01       	movw	r22, r2
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	cf 90       	pop	r12
     7be:	bf 90       	pop	r11
     7c0:	af 90       	pop	r10
     7c2:	9f 90       	pop	r9
     7c4:	8f 90       	pop	r8
     7c6:	7f 90       	pop	r7
     7c8:	6f 90       	pop	r6
     7ca:	5f 90       	pop	r5
     7cc:	4f 90       	pop	r4
     7ce:	3f 90       	pop	r3
     7d0:	2f 90       	pop	r2
     7d2:	08 95       	ret

000007d4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     7d4:	4f 92       	push	r4
     7d6:	5f 92       	push	r5
     7d8:	6f 92       	push	r6
     7da:	7f 92       	push	r7
     7dc:	af 92       	push	r10
     7de:	bf 92       	push	r11
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
     7f2:	6a 01       	movw	r12, r20
     7f4:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7f6:	8c 01       	movw	r16, r24
     7f8:	09 5f       	subi	r16, 0xF9	; 249
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     7fc:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     800:	eb 85       	ldd	r30, Y+11	; 0x0b
     802:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     804:	88 81       	ld	r24, Y
     806:	99 81       	ldd	r25, Y+1	; 0x01
     808:	aa 81       	ldd	r26, Y+2	; 0x02
     80a:	bb 81       	ldd	r27, Y+3	; 0x03
     80c:	c8 2a       	or	r12, r24
     80e:	d9 2a       	or	r13, r25
     810:	ea 2a       	or	r14, r26
     812:	fb 2a       	or	r15, r27
     814:	c8 82       	st	Y, r12
     816:	d9 82       	std	Y+1, r13	; 0x01
     818:	ea 82       	std	Y+2, r14	; 0x02
     81a:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     81c:	c1 2c       	mov	r12, r1
     81e:	d1 2c       	mov	r13, r1
     820:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     822:	3d c0       	rjmp	.+122    	; 0x89e <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     824:	a4 80       	ldd	r10, Z+4	; 0x04
     826:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     828:	80 81       	ld	r24, Z
     82a:	91 81       	ldd	r25, Z+1	; 0x01
     82c:	a2 81       	ldd	r26, Z+2	; 0x02
     82e:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     830:	ac 01       	movw	r20, r24
     832:	bd 01       	movw	r22, r26
     834:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     836:	b2 fd       	sbrc	r27, 2
     838:	0e c0       	rjmp	.+28     	; 0x856 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     83a:	48 80       	ld	r4, Y
     83c:	59 80       	ldd	r5, Y+1	; 0x01
     83e:	6a 80       	ldd	r6, Y+2	; 0x02
     840:	7b 80       	ldd	r7, Y+3	; 0x03
     842:	44 22       	and	r4, r20
     844:	55 22       	and	r5, r21
     846:	66 22       	and	r6, r22
     848:	77 22       	and	r7, r23
     84a:	45 28       	or	r4, r5
     84c:	46 28       	or	r4, r6
     84e:	47 28       	or	r4, r7
     850:	89 f4       	brne	.+34     	; 0x874 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	12 c0       	rjmp	.+36     	; 0x87a <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     856:	48 80       	ld	r4, Y
     858:	59 80       	ldd	r5, Y+1	; 0x01
     85a:	6a 80       	ldd	r6, Y+2	; 0x02
     85c:	7b 80       	ldd	r7, Y+3	; 0x03
     85e:	44 22       	and	r4, r20
     860:	55 22       	and	r5, r21
     862:	66 22       	and	r6, r22
     864:	77 22       	and	r7, r23
     866:	44 15       	cp	r20, r4
     868:	55 05       	cpc	r21, r5
     86a:	66 05       	cpc	r22, r6
     86c:	77 05       	cpc	r23, r7
     86e:	21 f0       	breq	.+8      	; 0x878 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	03 c0       	rjmp	.+6      	; 0x87a <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     874:	21 e0       	ldi	r18, 0x01	; 1
     876:	01 c0       	rjmp	.+2      	; 0x87a <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     878:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     87a:	22 23       	and	r18, r18
     87c:	71 f0       	breq	.+28     	; 0x89a <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     87e:	b0 ff       	sbrs	r27, 0
     880:	04 c0       	rjmp	.+8      	; 0x88a <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     882:	c4 2a       	or	r12, r20
     884:	d5 2a       	or	r13, r21
     886:	e6 2a       	or	r14, r22
     888:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     88a:	48 81       	ld	r20, Y
     88c:	59 81       	ldd	r21, Y+1	; 0x01
     88e:	6a 81       	ldd	r22, Y+2	; 0x02
     890:	7b 81       	ldd	r23, Y+3	; 0x03
     892:	72 60       	ori	r23, 0x02	; 2
     894:	cf 01       	movw	r24, r30
     896:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     89a:	ea 2d       	mov	r30, r10
     89c:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     89e:	e0 17       	cp	r30, r16
     8a0:	f1 07       	cpc	r31, r17
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <xEventGroupSetBits+0xd2>
     8a4:	bf cf       	rjmp	.-130    	; 0x824 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     8a6:	c0 94       	com	r12
     8a8:	d0 94       	com	r13
     8aa:	e0 94       	com	r14
     8ac:	f0 94       	com	r15
     8ae:	88 81       	ld	r24, Y
     8b0:	99 81       	ldd	r25, Y+1	; 0x01
     8b2:	aa 81       	ldd	r26, Y+2	; 0x02
     8b4:	bb 81       	ldd	r27, Y+3	; 0x03
     8b6:	c8 22       	and	r12, r24
     8b8:	d9 22       	and	r13, r25
     8ba:	ea 22       	and	r14, r26
     8bc:	fb 22       	and	r15, r27
     8be:	c8 82       	st	Y, r12
     8c0:	d9 82       	std	Y+1, r13	; 0x01
     8c2:	ea 82       	std	Y+2, r14	; 0x02
     8c4:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     8c6:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     8ca:	68 81       	ld	r22, Y
     8cc:	79 81       	ldd	r23, Y+1	; 0x01
     8ce:	8a 81       	ldd	r24, Y+2	; 0x02
     8d0:	9b 81       	ldd	r25, Y+3	; 0x03
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	7f 90       	pop	r7
     8e8:	6f 90       	pop	r6
     8ea:	5f 90       	pop	r5
     8ec:	4f 90       	pop	r4
     8ee:	08 95       	ret

000008f0 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8f0:	e0 e6       	ldi	r30, 0x60	; 96
     8f2:	f9 e0       	ldi	r31, 0x09	; 9
     8f4:	a4 e6       	ldi	r26, 0x64	; 100
     8f6:	b9 e0       	ldi	r27, 0x09	; 9
     8f8:	b1 83       	std	Z+1, r27	; 0x01
     8fa:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     8fc:	13 82       	std	Z+3, r1	; 0x03
     8fe:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     900:	ec e0       	ldi	r30, 0x0C	; 12
     902:	f7 e1       	ldi	r31, 0x17	; 23
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     904:	f0 93 5f 09 	sts	0x095F, r31	; 0x80095f <pxEnd+0x1>
     908:	e0 93 5e 09 	sts	0x095E, r30	; 0x80095e <pxEnd>
    pxEnd->xBlockSize = 0;
     90c:	13 82       	std	Z+3, r1	; 0x03
     90e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     910:	11 82       	std	Z+1, r1	; 0x01
     912:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     914:	88 ea       	ldi	r24, 0xA8	; 168
     916:	9d e0       	ldi	r25, 0x0D	; 13
     918:	13 96       	adiw	r26, 0x03	; 3
     91a:	9c 93       	st	X, r25
     91c:	8e 93       	st	-X, r24
     91e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     920:	ed 93       	st	X+, r30
     922:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     924:	90 93 5b 09 	sts	0x095B, r25	; 0x80095b <xMinimumEverFreeBytesRemaining+0x1>
     928:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     92c:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <xFreeBytesRemaining+0x1>
     930:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e8       	ldi	r25, 0x80	; 128
     938:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <xBlockAllocatedBit+0x1>
     93c:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <xBlockAllocatedBit>
     940:	08 95       	ret

00000942 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     948:	a0 e6       	ldi	r26, 0x60	; 96
     94a:	b9 e0       	ldi	r27, 0x09	; 9
     94c:	01 c0       	rjmp	.+2      	; 0x950 <prvInsertBlockIntoFreeList+0xe>
     94e:	df 01       	movw	r26, r30
     950:	ed 91       	ld	r30, X+
     952:	fc 91       	ld	r31, X
     954:	11 97       	sbiw	r26, 0x01	; 1
     956:	ec 17       	cp	r30, r28
     958:	fd 07       	cpc	r31, r29
     95a:	c8 f3       	brcs	.-14     	; 0x94e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     95c:	12 96       	adiw	r26, 0x02	; 2
     95e:	8d 91       	ld	r24, X+
     960:	9c 91       	ld	r25, X
     962:	13 97       	sbiw	r26, 0x03	; 3
     964:	9d 01       	movw	r18, r26
     966:	28 0f       	add	r18, r24
     968:	39 1f       	adc	r19, r25
     96a:	c2 17       	cp	r28, r18
     96c:	d3 07       	cpc	r29, r19
     96e:	49 f4       	brne	.+18     	; 0x982 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     970:	2a 81       	ldd	r18, Y+2	; 0x02
     972:	3b 81       	ldd	r19, Y+3	; 0x03
     974:	82 0f       	add	r24, r18
     976:	93 1f       	adc	r25, r19
     978:	13 96       	adiw	r26, 0x03	; 3
     97a:	9c 93       	st	X, r25
     97c:	8e 93       	st	-X, r24
     97e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     980:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	9b 81       	ldd	r25, Y+3	; 0x03
     986:	9e 01       	movw	r18, r28
     988:	28 0f       	add	r18, r24
     98a:	39 1f       	adc	r19, r25
     98c:	e2 17       	cp	r30, r18
     98e:	f3 07       	cpc	r31, r19
     990:	c1 f4       	brne	.+48     	; 0x9c2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     992:	20 91 5e 09 	lds	r18, 0x095E	; 0x80095e <pxEnd>
     996:	30 91 5f 09 	lds	r19, 0x095F	; 0x80095f <pxEnd+0x1>
     99a:	e2 17       	cp	r30, r18
     99c:	f3 07       	cpc	r31, r19
     99e:	71 f0       	breq	.+28     	; 0x9bc <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     9a0:	22 81       	ldd	r18, Z+2	; 0x02
     9a2:	33 81       	ldd	r19, Z+3	; 0x03
     9a4:	82 0f       	add	r24, r18
     9a6:	93 1f       	adc	r25, r19
     9a8:	9b 83       	std	Y+3, r25	; 0x03
     9aa:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     9ac:	ed 91       	ld	r30, X+
     9ae:	fc 91       	ld	r31, X
     9b0:	11 97       	sbiw	r26, 0x01	; 1
     9b2:	80 81       	ld	r24, Z
     9b4:	91 81       	ldd	r25, Z+1	; 0x01
     9b6:	99 83       	std	Y+1, r25	; 0x01
     9b8:	88 83       	st	Y, r24
     9ba:	05 c0       	rjmp	.+10     	; 0x9c6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     9bc:	39 83       	std	Y+1, r19	; 0x01
     9be:	28 83       	st	Y, r18
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     9c2:	f9 83       	std	Y+1, r31	; 0x01
     9c4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     9c6:	ca 17       	cp	r28, r26
     9c8:	db 07       	cpc	r29, r27
     9ca:	11 f0       	breq	.+4      	; 0x9d0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     9cc:	cd 93       	st	X+, r28
     9ce:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     9e4:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     9e8:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <pxEnd>
     9ec:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <pxEnd+0x1>
     9f0:	89 2b       	or	r24, r25
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     9f4:	7d df       	rcall	.-262    	; 0x8f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     9f6:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <xBlockAllocatedBit>
     9fa:	90 91 55 09 	lds	r25, 0x0955	; 0x800955 <xBlockAllocatedBit+0x1>
     9fe:	80 23       	and	r24, r16
     a00:	91 23       	and	r25, r17
     a02:	89 2b       	or	r24, r25
     a04:	09 f0       	breq	.+2      	; 0xa08 <pvPortMalloc+0x32>
     a06:	76 c0       	rjmp	.+236    	; 0xaf4 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a08:	01 15       	cp	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	49 f0       	breq	.+18     	; 0xa20 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a0e:	c8 01       	movw	r24, r16
     a10:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a12:	08 17       	cp	r16, r24
     a14:	19 07       	cpc	r17, r25
     a16:	18 f0       	brcs	.+6      	; 0xa1e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     a18:	00 e0       	ldi	r16, 0x00	; 0
     a1a:	10 e0       	ldi	r17, 0x00	; 0
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     a1e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a20:	01 15       	cp	r16, r1
     a22:	11 05       	cpc	r17, r1
     a24:	09 f4       	brne	.+2      	; 0xa28 <pvPortMalloc+0x52>
     a26:	69 c0       	rjmp	.+210    	; 0xafa <pvPortMalloc+0x124>
     a28:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <xFreeBytesRemaining>
     a2c:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <xFreeBytesRemaining+0x1>
     a30:	80 17       	cp	r24, r16
     a32:	91 07       	cpc	r25, r17
     a34:	08 f4       	brcc	.+2      	; 0xa38 <pvPortMalloc+0x62>
     a36:	64 c0       	rjmp	.+200    	; 0xb00 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a38:	c0 91 60 09 	lds	r28, 0x0960	; 0x800960 <xStart>
     a3c:	d0 91 61 09 	lds	r29, 0x0961	; 0x800961 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a40:	e0 e6       	ldi	r30, 0x60	; 96
     a42:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a46:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a48:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a4a:	8a 81       	ldd	r24, Y+2	; 0x02
     a4c:	9b 81       	ldd	r25, Y+3	; 0x03
     a4e:	80 17       	cp	r24, r16
     a50:	91 07       	cpc	r25, r17
     a52:	20 f4       	brcc	.+8      	; 0xa5c <pvPortMalloc+0x86>
     a54:	88 81       	ld	r24, Y
     a56:	99 81       	ldd	r25, Y+1	; 0x01
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	a9 f7       	brne	.-22     	; 0xa46 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     a5c:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <pxEnd>
     a60:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <pxEnd+0x1>
     a64:	c8 17       	cp	r28, r24
     a66:	d9 07       	cpc	r29, r25
     a68:	09 f4       	brne	.+2      	; 0xa6c <pvPortMalloc+0x96>
     a6a:	4d c0       	rjmp	.+154    	; 0xb06 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a6c:	e0 80       	ld	r14, Z
     a6e:	f1 80       	ldd	r15, Z+1	; 0x01
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	e8 0e       	add	r14, r24
     a74:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a76:	88 81       	ld	r24, Y
     a78:	99 81       	ldd	r25, Y+1	; 0x01
     a7a:	91 83       	std	Z+1, r25	; 0x01
     a7c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a7e:	2a 81       	ldd	r18, Y+2	; 0x02
     a80:	3b 81       	ldd	r19, Y+3	; 0x03
     a82:	20 1b       	sub	r18, r16
     a84:	31 0b       	sbc	r19, r17
     a86:	29 30       	cpi	r18, 0x09	; 9
     a88:	31 05       	cpc	r19, r1
     a8a:	48 f0       	brcs	.+18     	; 0xa9e <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a8c:	ce 01       	movw	r24, r28
     a8e:	80 0f       	add	r24, r16
     a90:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a92:	fc 01       	movw	r30, r24
     a94:	33 83       	std	Z+3, r19	; 0x03
     a96:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     a98:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     a9a:	0a 83       	std	Y+2, r16	; 0x02
     a9c:	52 df       	rcall	.-348    	; 0x942 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     a9e:	2a 81       	ldd	r18, Y+2	; 0x02
     aa0:	3b 81       	ldd	r19, Y+3	; 0x03
     aa2:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <xFreeBytesRemaining>
     aa6:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <xFreeBytesRemaining+0x1>
     aaa:	82 1b       	sub	r24, r18
     aac:	93 0b       	sbc	r25, r19
     aae:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <xFreeBytesRemaining+0x1>
     ab2:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     ab6:	40 91 5a 09 	lds	r20, 0x095A	; 0x80095a <xMinimumEverFreeBytesRemaining>
     aba:	50 91 5b 09 	lds	r21, 0x095B	; 0x80095b <xMinimumEverFreeBytesRemaining+0x1>
     abe:	84 17       	cp	r24, r20
     ac0:	95 07       	cpc	r25, r21
     ac2:	20 f4       	brcc	.+8      	; 0xacc <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     ac4:	90 93 5b 09 	sts	0x095B, r25	; 0x80095b <xMinimumEverFreeBytesRemaining+0x1>
     ac8:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     acc:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <xBlockAllocatedBit>
     ad0:	90 91 55 09 	lds	r25, 0x0955	; 0x800955 <xBlockAllocatedBit+0x1>
     ad4:	28 2b       	or	r18, r24
     ad6:	39 2b       	or	r19, r25
     ad8:	3b 83       	std	Y+3, r19	; 0x03
     ada:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     adc:	19 82       	std	Y+1, r1	; 0x01
     ade:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     ae0:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <xNumberOfSuccessfulAllocations>
     ae4:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <xNumberOfSuccessfulAllocations+0x1>
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <xNumberOfSuccessfulAllocations+0x1>
     aee:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <xNumberOfSuccessfulAllocations>
     af2:	0b c0       	rjmp	.+22     	; 0xb0a <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     af4:	e1 2c       	mov	r14, r1
     af6:	f1 2c       	mov	r15, r1
     af8:	08 c0       	rjmp	.+16     	; 0xb0a <pvPortMalloc+0x134>
     afa:	e1 2c       	mov	r14, r1
     afc:	f1 2c       	mov	r15, r1
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <pvPortMalloc+0x134>
     b00:	e1 2c       	mov	r14, r1
     b02:	f1 2c       	mov	r15, r1
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <pvPortMalloc+0x134>
     b06:	e1 2c       	mov	r14, r1
     b08:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b0a:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b0e:	e1 14       	cp	r14, r1
     b10:	f1 04       	cpc	r15, r1
     b12:	11 f4       	brne	.+4      	; 0xb18 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     b14:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     b18:	c7 01       	movw	r24, r14
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	08 95       	ret

00000b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	91 f1       	breq	.+100    	; 0xb98 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b34:	ec 01       	movw	r28, r24
     b36:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b38:	4a 81       	ldd	r20, Y+2	; 0x02
     b3a:	5b 81       	ldd	r21, Y+3	; 0x03
     b3c:	20 91 54 09 	lds	r18, 0x0954	; 0x800954 <xBlockAllocatedBit>
     b40:	30 91 55 09 	lds	r19, 0x0955	; 0x800955 <xBlockAllocatedBit+0x1>
     b44:	ba 01       	movw	r22, r20
     b46:	62 23       	and	r22, r18
     b48:	73 23       	and	r23, r19
     b4a:	67 2b       	or	r22, r23
     b4c:	29 f1       	breq	.+74     	; 0xb98 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b4e:	68 81       	ld	r22, Y
     b50:	79 81       	ldd	r23, Y+1	; 0x01
     b52:	67 2b       	or	r22, r23
     b54:	09 f5       	brne	.+66     	; 0xb98 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b56:	20 95       	com	r18
     b58:	30 95       	com	r19
     b5a:	24 23       	and	r18, r20
     b5c:	35 23       	and	r19, r21
     b5e:	3b 83       	std	Y+3, r19	; 0x03
     b60:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     b62:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     b66:	8a 81       	ldd	r24, Y+2	; 0x02
     b68:	9b 81       	ldd	r25, Y+3	; 0x03
     b6a:	20 91 5c 09 	lds	r18, 0x095C	; 0x80095c <xFreeBytesRemaining>
     b6e:	30 91 5d 09 	lds	r19, 0x095D	; 0x80095d <xFreeBytesRemaining+0x1>
     b72:	82 0f       	add	r24, r18
     b74:	93 1f       	adc	r25, r19
     b76:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <xFreeBytesRemaining+0x1>
     b7a:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b7e:	ce 01       	movw	r24, r28
     b80:	e0 de       	rcall	.-576    	; 0x942 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     b82:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <xNumberOfSuccessfulFrees>
     b86:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <xNumberOfSuccessfulFrees+0x1>
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	90 93 57 09 	sts	0x0957, r25	; 0x800957 <xNumberOfSuccessfulFrees+0x1>
     b90:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     b94:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     ba2:	fc 01       	movw	r30, r24
     ba4:	03 96       	adiw	r24, 0x03	; 3
     ba6:	92 83       	std	Z+2, r25	; 0x02
     ba8:	81 83       	std	Z+1, r24	; 0x01
     baa:	4f ef       	ldi	r20, 0xFF	; 255
     bac:	5f ef       	ldi	r21, 0xFF	; 255
     bae:	ba 01       	movw	r22, r20
     bb0:	43 83       	std	Z+3, r20	; 0x03
     bb2:	54 83       	std	Z+4, r21	; 0x04
     bb4:	65 83       	std	Z+5, r22	; 0x05
     bb6:	76 83       	std	Z+6, r23	; 0x06
     bb8:	90 87       	std	Z+8, r25	; 0x08
     bba:	87 83       	std	Z+7, r24	; 0x07
     bbc:	92 87       	std	Z+10, r25	; 0x0a
     bbe:	81 87       	std	Z+9, r24	; 0x09
     bc0:	10 82       	st	Z, r1
     bc2:	08 95       	ret

00000bc4 <vListInitialiseItem>:
     bc4:	fc 01       	movw	r30, r24
     bc6:	13 86       	std	Z+11, r1	; 0x0b
     bc8:	12 86       	std	Z+10, r1	; 0x0a
     bca:	08 95       	ret

00000bcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bd6:	08 81       	ld	r16, Y
     bd8:	19 81       	ldd	r17, Y+1	; 0x01
     bda:	2a 81       	ldd	r18, Y+2	; 0x02
     bdc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bde:	0f 3f       	cpi	r16, 0xFF	; 255
     be0:	4f ef       	ldi	r20, 0xFF	; 255
     be2:	14 07       	cpc	r17, r20
     be4:	24 07       	cpc	r18, r20
     be6:	34 07       	cpc	r19, r20
     be8:	21 f4       	brne	.+8      	; 0xbf2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     bea:	fc 01       	movw	r30, r24
     bec:	a1 85       	ldd	r26, Z+9	; 0x09
     bee:	b2 85       	ldd	r27, Z+10	; 0x0a
     bf0:	11 c0       	rjmp	.+34     	; 0xc14 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     bf2:	dc 01       	movw	r26, r24
     bf4:	13 96       	adiw	r26, 0x03	; 3
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <vListInsert+0x2e>
     bf8:	df 01       	movw	r26, r30
     bfa:	14 96       	adiw	r26, 0x04	; 4
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	15 97       	sbiw	r26, 0x05	; 5
     c02:	40 81       	ld	r20, Z
     c04:	51 81       	ldd	r21, Z+1	; 0x01
     c06:	62 81       	ldd	r22, Z+2	; 0x02
     c08:	73 81       	ldd	r23, Z+3	; 0x03
     c0a:	04 17       	cp	r16, r20
     c0c:	15 07       	cpc	r17, r21
     c0e:	26 07       	cpc	r18, r22
     c10:	37 07       	cpc	r19, r23
     c12:	90 f7       	brcc	.-28     	; 0xbf8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c14:	14 96       	adiw	r26, 0x04	; 4
     c16:	ed 91       	ld	r30, X+
     c18:	fc 91       	ld	r31, X
     c1a:	15 97       	sbiw	r26, 0x05	; 5
     c1c:	fd 83       	std	Y+5, r31	; 0x05
     c1e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c20:	d7 83       	std	Z+7, r29	; 0x07
     c22:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c24:	bf 83       	std	Y+7, r27	; 0x07
     c26:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c28:	15 96       	adiw	r26, 0x05	; 5
     c2a:	dc 93       	st	X, r29
     c2c:	ce 93       	st	-X, r28
     c2e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c30:	9b 87       	std	Y+11, r25	; 0x0b
     c32:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c34:	fc 01       	movw	r30, r24
     c36:	20 81       	ld	r18, Z
     c38:	2f 5f       	subi	r18, 0xFF	; 255
     c3a:	20 83       	st	Z, r18
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	08 95       	ret

00000c46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c4c:	a2 85       	ldd	r26, Z+10	; 0x0a
     c4e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c50:	c4 81       	ldd	r28, Z+4	; 0x04
     c52:	d5 81       	ldd	r29, Z+5	; 0x05
     c54:	86 81       	ldd	r24, Z+6	; 0x06
     c56:	97 81       	ldd	r25, Z+7	; 0x07
     c58:	9f 83       	std	Y+7, r25	; 0x07
     c5a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c5c:	c6 81       	ldd	r28, Z+6	; 0x06
     c5e:	d7 81       	ldd	r29, Z+7	; 0x07
     c60:	84 81       	ldd	r24, Z+4	; 0x04
     c62:	95 81       	ldd	r25, Z+5	; 0x05
     c64:	9d 83       	std	Y+5, r25	; 0x05
     c66:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	8d 91       	ld	r24, X+
     c6c:	9c 91       	ld	r25, X
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	e8 17       	cp	r30, r24
     c72:	f9 07       	cpc	r31, r25
     c74:	31 f4       	brne	.+12     	; 0xc82 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c76:	86 81       	ldd	r24, Z+6	; 0x06
     c78:	97 81       	ldd	r25, Z+7	; 0x07
     c7a:	12 96       	adiw	r26, 0x02	; 2
     c7c:	9c 93       	st	X, r25
     c7e:	8e 93       	st	-X, r24
     c80:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c82:	13 86       	std	Z+11, r1	; 0x0b
     c84:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     c86:	8c 91       	ld	r24, X
     c88:	81 50       	subi	r24, 0x01	; 1
     c8a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c8c:	8c 91       	ld	r24, X
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     c94:	a8 95       	wdr
     c96:	90 ec       	ldi	r25, 0xC0	; 192
     c98:	88 e1       	ldi	r24, 0x18	; 24
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	a8 95       	wdr
     ca0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     caa:	08 95       	ret

00000cac <pxPortInitialiseStack>:
     cac:	fc 01       	movw	r30, r24
     cae:	60 83       	st	Z, r22
     cb0:	31 97       	sbiw	r30, 0x01	; 1
     cb2:	70 83       	st	Z, r23
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	10 82       	st	Z, r1
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	10 82       	st	Z, r1
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	20 e8       	ldi	r18, 0x80	; 128
     cc0:	20 83       	st	Z, r18
     cc2:	31 97       	sbiw	r30, 0x01	; 1
     cc4:	10 82       	st	Z, r1
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	10 82       	st	Z, r1
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	10 82       	st	Z, r1
     cce:	77 97       	sbiw	r30, 0x17	; 23
     cd0:	40 83       	st	Z, r20
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	50 83       	st	Z, r21
     cd6:	86 97       	sbiw	r24, 0x26	; 38
     cd8:	08 95       	ret

00000cda <xPortStartScheduler>:
     cda:	dc df       	rcall	.-72     	; 0xc94 <prvSetupTimerInterrupt>
     cdc:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     ce0:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     ce4:	cd 91       	ld	r28, X+
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	dd 91       	ld	r29, X+
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	bf 91       	pop	r27
     cf6:	af 91       	pop	r26
     cf8:	9f 91       	pop	r25
     cfa:	8f 91       	pop	r24
     cfc:	7f 91       	pop	r23
     cfe:	6f 91       	pop	r22
     d00:	5f 91       	pop	r21
     d02:	4f 91       	pop	r20
     d04:	3f 91       	pop	r19
     d06:	2f 91       	pop	r18
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	bf 90       	pop	r11
     d16:	af 90       	pop	r10
     d18:	9f 90       	pop	r9
     d1a:	8f 90       	pop	r8
     d1c:	7f 90       	pop	r7
     d1e:	6f 90       	pop	r6
     d20:	5f 90       	pop	r5
     d22:	4f 90       	pop	r4
     d24:	3f 90       	pop	r3
     d26:	2f 90       	pop	r2
     d28:	1f 90       	pop	r1
     d2a:	0f 90       	pop	r0
     d2c:	0c be       	out	0x3c, r0	; 60
     d2e:	0f 90       	pop	r0
     d30:	0b be       	out	0x3b, r0	; 59
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	08 95       	ret
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	08 95       	ret

00000d3e <vPortYield>:
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	0f 92       	push	r0
     d46:	0b b6       	in	r0, 0x3b	; 59
     d48:	0f 92       	push	r0
     d4a:	0c b6       	in	r0, 0x3c	; 60
     d4c:	0f 92       	push	r0
     d4e:	1f 92       	push	r1
     d50:	11 24       	eor	r1, r1
     d52:	2f 92       	push	r2
     d54:	3f 92       	push	r3
     d56:	4f 92       	push	r4
     d58:	5f 92       	push	r5
     d5a:	6f 92       	push	r6
     d5c:	7f 92       	push	r7
     d5e:	8f 92       	push	r8
     d60:	9f 92       	push	r9
     d62:	af 92       	push	r10
     d64:	bf 92       	push	r11
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	ef 93       	push	r30
     d8c:	ff 93       	push	r31
     d8e:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     d92:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     d96:	0d b6       	in	r0, 0x3d	; 61
     d98:	0d 92       	st	X+, r0
     d9a:	0e b6       	in	r0, 0x3e	; 62
     d9c:	0d 92       	st	X+, r0
     d9e:	0e 94 67 13 	call	0x26ce	; 0x26ce <vTaskSwitchContext>
     da2:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     da6:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     daa:	cd 91       	ld	r28, X+
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	dd 91       	ld	r29, X+
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	bf 90       	pop	r11
     ddc:	af 90       	pop	r10
     dde:	9f 90       	pop	r9
     de0:	8f 90       	pop	r8
     de2:	7f 90       	pop	r7
     de4:	6f 90       	pop	r6
     de6:	5f 90       	pop	r5
     de8:	4f 90       	pop	r4
     dea:	3f 90       	pop	r3
     dec:	2f 90       	pop	r2
     dee:	1f 90       	pop	r1
     df0:	0f 90       	pop	r0
     df2:	0c be       	out	0x3c, r0	; 60
     df4:	0f 90       	pop	r0
     df6:	0b be       	out	0x3b, r0	; 59
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	08 95       	ret

00000e00 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	0f 92       	push	r0
     e08:	0b b6       	in	r0, 0x3b	; 59
     e0a:	0f 92       	push	r0
     e0c:	0c b6       	in	r0, 0x3c	; 60
     e0e:	0f 92       	push	r0
     e10:	1f 92       	push	r1
     e12:	11 24       	eor	r1, r1
     e14:	2f 92       	push	r2
     e16:	3f 92       	push	r3
     e18:	4f 92       	push	r4
     e1a:	5f 92       	push	r5
     e1c:	6f 92       	push	r6
     e1e:	7f 92       	push	r7
     e20:	8f 92       	push	r8
     e22:	9f 92       	push	r9
     e24:	af 92       	push	r10
     e26:	bf 92       	push	r11
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	2f 93       	push	r18
     e36:	3f 93       	push	r19
     e38:	4f 93       	push	r20
     e3a:	5f 93       	push	r21
     e3c:	6f 93       	push	r22
     e3e:	7f 93       	push	r23
     e40:	8f 93       	push	r24
     e42:	9f 93       	push	r25
     e44:	af 93       	push	r26
     e46:	bf 93       	push	r27
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     e54:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     e58:	0d b6       	in	r0, 0x3d	; 61
     e5a:	0d 92       	st	X+, r0
     e5c:	0e b6       	in	r0, 0x3e	; 62
     e5e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     e60:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     e62:	0e 94 df 10 	call	0x21be	; 0x21be <xTaskIncrementTick>
     e66:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e68:	0e 94 67 13 	call	0x26ce	; 0x26ce <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     e6c:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     e70:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     e74:	cd 91       	ld	r28, X+
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	dd 91       	ld	r29, X+
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	ff 91       	pop	r31
     e7e:	ef 91       	pop	r30
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
     ea4:	bf 90       	pop	r11
     ea6:	af 90       	pop	r10
     ea8:	9f 90       	pop	r9
     eaa:	8f 90       	pop	r8
     eac:	7f 90       	pop	r7
     eae:	6f 90       	pop	r6
     eb0:	5f 90       	pop	r5
     eb2:	4f 90       	pop	r4
     eb4:	3f 90       	pop	r3
     eb6:	2f 90       	pop	r2
     eb8:	1f 90       	pop	r1
     eba:	0f 90       	pop	r0
     ebc:	0c be       	out	0x3c, r0	; 60
     ebe:	0f 90       	pop	r0
     ec0:	0b be       	out	0x3b, r0	; 59
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ec8:	08 95       	ret

00000eca <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     eca:	9a df       	rcall	.-204    	; 0xe00 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ecc:	18 95       	reti

00000ece <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ece:	dc 01       	movw	r26, r24
     ed0:	53 96       	adiw	r26, 0x13	; 19
     ed2:	2c 91       	ld	r18, X
     ed4:	53 97       	sbiw	r26, 0x13	; 19
     ed6:	22 23       	and	r18, r18
     ed8:	41 f0       	breq	.+16     	; 0xeea <prvGetDisinheritPriorityAfterTimeout+0x1c>
     eda:	5a 96       	adiw	r26, 0x1a	; 26
     edc:	ed 91       	ld	r30, X+
     ede:	fc 91       	ld	r31, X
     ee0:	5b 97       	sbiw	r26, 0x1b	; 27
     ee2:	90 81       	ld	r25, Z
     ee4:	8a e0       	ldi	r24, 0x0A	; 10
     ee6:	89 1b       	sub	r24, r25
     ee8:	08 95       	ret
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	08 95       	ret

00000eee <prvIsQueueEmpty>:
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	0f 92       	push	r0
     ef4:	fc 01       	movw	r30, r24
     ef6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ef8:	81 11       	cpse	r24, r1
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <prvIsQueueEmpty+0x12>
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <prvIsQueueEmpty+0x14>
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	08 95       	ret

00000f08 <prvIsQueueFull>:
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	0f 92       	push	r0
     f0e:	fc 01       	movw	r30, r24
     f10:	26 8d       	ldd	r18, Z+30	; 0x1e
     f12:	87 8d       	ldd	r24, Z+31	; 0x1f
     f14:	28 13       	cpse	r18, r24
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <prvIsQueueFull+0x14>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <prvIsQueueFull+0x16>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	08 95       	ret

00000f24 <prvCopyDataToQueue>:
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
     f2e:	04 2f       	mov	r16, r20
     f30:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f32:	48 a1       	ldd	r20, Y+32	; 0x20
     f34:	41 11       	cpse	r20, r1
     f36:	0c c0       	rjmp	.+24     	; 0xf50 <prvCopyDataToQueue+0x2c>
     f38:	88 81       	ld	r24, Y
     f3a:	99 81       	ldd	r25, Y+1	; 0x01
     f3c:	89 2b       	or	r24, r25
     f3e:	09 f0       	breq	.+2      	; 0xf42 <prvCopyDataToQueue+0x1e>
     f40:	42 c0       	rjmp	.+132    	; 0xfc6 <prvCopyDataToQueue+0xa2>
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <xTaskPriorityDisinherit>
     f4a:	1d 82       	std	Y+5, r1	; 0x05
     f4c:	1c 82       	std	Y+4, r1	; 0x04
     f4e:	42 c0       	rjmp	.+132    	; 0xfd4 <prvCopyDataToQueue+0xb0>
     f50:	01 11       	cpse	r16, r1
     f52:	17 c0       	rjmp	.+46     	; 0xf82 <prvCopyDataToQueue+0x5e>
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	9b 81       	ldd	r25, Y+3	; 0x03
     f5a:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <memcpy>
     f5e:	28 a1       	ldd	r18, Y+32	; 0x20
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	9b 81       	ldd	r25, Y+3	; 0x03
     f64:	82 0f       	add	r24, r18
     f66:	91 1d       	adc	r25, r1
     f68:	9b 83       	std	Y+3, r25	; 0x03
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	2c 81       	ldd	r18, Y+4	; 0x04
     f6e:	3d 81       	ldd	r19, Y+5	; 0x05
     f70:	82 17       	cp	r24, r18
     f72:	93 07       	cpc	r25, r19
     f74:	50 f1       	brcs	.+84     	; 0xfca <prvCopyDataToQueue+0xa6>
     f76:	88 81       	ld	r24, Y
     f78:	99 81       	ldd	r25, Y+1	; 0x01
     f7a:	9b 83       	std	Y+3, r25	; 0x03
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	29 c0       	rjmp	.+82     	; 0xfd4 <prvCopyDataToQueue+0xb0>
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	8e 81       	ldd	r24, Y+6	; 0x06
     f86:	9f 81       	ldd	r25, Y+7	; 0x07
     f88:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <memcpy>
     f8c:	88 a1       	ldd	r24, Y+32	; 0x20
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	91 95       	neg	r25
     f92:	81 95       	neg	r24
     f94:	91 09       	sbc	r25, r1
     f96:	2e 81       	ldd	r18, Y+6	; 0x06
     f98:	3f 81       	ldd	r19, Y+7	; 0x07
     f9a:	28 0f       	add	r18, r24
     f9c:	39 1f       	adc	r19, r25
     f9e:	3f 83       	std	Y+7, r19	; 0x07
     fa0:	2e 83       	std	Y+6, r18	; 0x06
     fa2:	48 81       	ld	r20, Y
     fa4:	59 81       	ldd	r21, Y+1	; 0x01
     fa6:	24 17       	cp	r18, r20
     fa8:	35 07       	cpc	r19, r21
     faa:	30 f4       	brcc	.+12     	; 0xfb8 <prvCopyDataToQueue+0x94>
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	82 0f       	add	r24, r18
     fb2:	93 1f       	adc	r25, r19
     fb4:	9f 83       	std	Y+7, r25	; 0x07
     fb6:	8e 83       	std	Y+6, r24	; 0x06
     fb8:	02 30       	cpi	r16, 0x02	; 2
     fba:	49 f4       	brne	.+18     	; 0xfce <prvCopyDataToQueue+0xaa>
     fbc:	11 23       	and	r17, r17
     fbe:	49 f0       	breq	.+18     	; 0xfd2 <prvCopyDataToQueue+0xae>
     fc0:	11 50       	subi	r17, 0x01	; 1
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	07 c0       	rjmp	.+14     	; 0xfd4 <prvCopyDataToQueue+0xb0>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	05 c0       	rjmp	.+10     	; 0xfd4 <prvCopyDataToQueue+0xb0>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <prvCopyDataToQueue+0xb0>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <prvCopyDataToQueue+0xb0>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	1f 5f       	subi	r17, 0xFF	; 255
     fd6:	1e 8f       	std	Y+30, r17	; 0x1e
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	08 95       	ret

00000fe2 <prvCopyDataFromQueue>:
     fe2:	fc 01       	movw	r30, r24
     fe4:	40 a1       	ldd	r20, Z+32	; 0x20
     fe6:	44 23       	and	r20, r20
     fe8:	a9 f0       	breq	.+42     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	26 81       	ldd	r18, Z+6	; 0x06
     fee:	37 81       	ldd	r19, Z+7	; 0x07
     ff0:	24 0f       	add	r18, r20
     ff2:	35 1f       	adc	r19, r21
     ff4:	37 83       	std	Z+7, r19	; 0x07
     ff6:	26 83       	std	Z+6, r18	; 0x06
     ff8:	84 81       	ldd	r24, Z+4	; 0x04
     ffa:	95 81       	ldd	r25, Z+5	; 0x05
     ffc:	28 17       	cp	r18, r24
     ffe:	39 07       	cpc	r19, r25
    1000:	20 f0       	brcs	.+8      	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
    1002:	80 81       	ld	r24, Z
    1004:	91 81       	ldd	r25, Z+1	; 0x01
    1006:	97 83       	std	Z+7, r25	; 0x07
    1008:	86 83       	std	Z+6, r24	; 0x06
    100a:	cb 01       	movw	r24, r22
    100c:	66 81       	ldd	r22, Z+6	; 0x06
    100e:	77 81       	ldd	r23, Z+7	; 0x07
    1010:	0c 94 de 35 	jmp	0x6bbc	; 0x6bbc <memcpy>
    1014:	08 95       	ret

00001016 <prvUnlockQueue>:
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	ec 01       	movw	r28, r24
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	0f 92       	push	r0
    1024:	1a a1       	ldd	r17, Y+34	; 0x22
    1026:	0b c0       	rjmp	.+22     	; 0x103e <prvUnlockQueue+0x28>
    1028:	8b 89       	ldd	r24, Y+19	; 0x13
    102a:	88 23       	and	r24, r24
    102c:	51 f0       	breq	.+20     	; 0x1042 <prvUnlockQueue+0x2c>
    102e:	ce 01       	movw	r24, r28
    1030:	43 96       	adiw	r24, 0x13	; 19
    1032:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskRemoveFromEventList>
    1036:	81 11       	cpse	r24, r1
    1038:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <vTaskMissedYield>
    103c:	11 50       	subi	r17, 0x01	; 1
    103e:	11 16       	cp	r1, r17
    1040:	9c f3       	brlt	.-26     	; 0x1028 <prvUnlockQueue+0x12>
    1042:	8f ef       	ldi	r24, 0xFF	; 255
    1044:	8a a3       	std	Y+34, r24	; 0x22
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	0f 92       	push	r0
    1050:	19 a1       	ldd	r17, Y+33	; 0x21
    1052:	0b c0       	rjmp	.+22     	; 0x106a <prvUnlockQueue+0x54>
    1054:	88 85       	ldd	r24, Y+8	; 0x08
    1056:	88 23       	and	r24, r24
    1058:	51 f0       	breq	.+20     	; 0x106e <prvUnlockQueue+0x58>
    105a:	ce 01       	movw	r24, r28
    105c:	08 96       	adiw	r24, 0x08	; 8
    105e:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskRemoveFromEventList>
    1062:	81 11       	cpse	r24, r1
    1064:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <vTaskMissedYield>
    1068:	11 50       	subi	r17, 0x01	; 1
    106a:	11 16       	cp	r1, r17
    106c:	9c f3       	brlt	.-26     	; 0x1054 <prvUnlockQueue+0x3e>
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	89 a3       	std	Y+33, r24	; 0x21
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	08 95       	ret

0000107e <xQueueGenericReset>:
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	ec 01       	movw	r28, r24
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	0f 92       	push	r0
    108a:	e8 81       	ld	r30, Y
    108c:	f9 81       	ldd	r31, Y+1	; 0x01
    108e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1090:	28 a1       	ldd	r18, Y+32	; 0x20
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	82 9f       	mul	r24, r18
    1098:	a0 01       	movw	r20, r0
    109a:	83 9f       	mul	r24, r19
    109c:	50 0d       	add	r21, r0
    109e:	92 9f       	mul	r25, r18
    10a0:	50 0d       	add	r21, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	4e 0f       	add	r20, r30
    10a6:	5f 1f       	adc	r21, r31
    10a8:	5d 83       	std	Y+5, r21	; 0x05
    10aa:	4c 83       	std	Y+4, r20	; 0x04
    10ac:	1e 8e       	std	Y+30, r1	; 0x1e
    10ae:	fb 83       	std	Y+3, r31	; 0x03
    10b0:	ea 83       	std	Y+2, r30	; 0x02
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	28 9f       	mul	r18, r24
    10b6:	a0 01       	movw	r20, r0
    10b8:	29 9f       	mul	r18, r25
    10ba:	50 0d       	add	r21, r0
    10bc:	38 9f       	mul	r19, r24
    10be:	50 0d       	add	r21, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	cf 01       	movw	r24, r30
    10c4:	84 0f       	add	r24, r20
    10c6:	95 1f       	adc	r25, r21
    10c8:	9f 83       	std	Y+7, r25	; 0x07
    10ca:	8e 83       	std	Y+6, r24	; 0x06
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	89 a3       	std	Y+33, r24	; 0x21
    10d0:	8a a3       	std	Y+34, r24	; 0x22
    10d2:	61 11       	cpse	r22, r1
    10d4:	0b c0       	rjmp	.+22     	; 0x10ec <xQueueGenericReset+0x6e>
    10d6:	88 85       	ldd	r24, Y+8	; 0x08
    10d8:	88 23       	and	r24, r24
    10da:	71 f0       	breq	.+28     	; 0x10f8 <xQueueGenericReset+0x7a>
    10dc:	ce 01       	movw	r24, r28
    10de:	08 96       	adiw	r24, 0x08	; 8
    10e0:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskRemoveFromEventList>
    10e4:	88 23       	and	r24, r24
    10e6:	41 f0       	breq	.+16     	; 0x10f8 <xQueueGenericReset+0x7a>
    10e8:	2a de       	rcall	.-940    	; 0xd3e <vPortYield>
    10ea:	06 c0       	rjmp	.+12     	; 0x10f8 <xQueueGenericReset+0x7a>
    10ec:	ce 01       	movw	r24, r28
    10ee:	08 96       	adiw	r24, 0x08	; 8
    10f0:	58 dd       	rcall	.-1360   	; 0xba2 <vListInitialise>
    10f2:	ce 01       	movw	r24, r28
    10f4:	43 96       	adiw	r24, 0x13	; 19
    10f6:	55 dd       	rcall	.-1366   	; 0xba2 <vListInitialise>
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <prvInitialiseNewQueue>:
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	f8 01       	movw	r30, r16
    110a:	61 11       	cpse	r22, r1
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <prvInitialiseNewQueue+0x10>
    110e:	11 83       	std	Z+1, r17	; 0x01
    1110:	00 83       	st	Z, r16
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <prvInitialiseNewQueue+0x14>
    1114:	51 83       	std	Z+1, r21	; 0x01
    1116:	40 83       	st	Z, r20
    1118:	87 8f       	std	Z+31, r24	; 0x1f
    111a:	60 a3       	std	Z+32, r22	; 0x20
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	cf 01       	movw	r24, r30
    1120:	ae df       	rcall	.-164    	; 0x107e <xQueueGenericReset>
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <xQueueGenericCreate>:
    1128:	df 92       	push	r13
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	f8 2e       	mov	r15, r24
    1138:	e6 2e       	mov	r14, r22
    113a:	d4 2e       	mov	r13, r20
    113c:	86 9f       	mul	r24, r22
    113e:	c0 01       	movw	r24, r0
    1140:	11 24       	eor	r1, r1
    1142:	83 96       	adiw	r24, 0x23	; 35
    1144:	48 dc       	rcall	.-1904   	; 0x9d6 <pvPortMalloc>
    1146:	ec 01       	movw	r28, r24
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	41 f0       	breq	.+16     	; 0x115c <xQueueGenericCreate+0x34>
    114c:	8c 01       	movw	r16, r24
    114e:	2d 2d       	mov	r18, r13
    1150:	ac 01       	movw	r20, r24
    1152:	4d 5d       	subi	r20, 0xDD	; 221
    1154:	5f 4f       	sbci	r21, 0xFF	; 255
    1156:	6e 2d       	mov	r22, r14
    1158:	8f 2d       	mov	r24, r15
    115a:	d4 df       	rcall	.-88     	; 0x1104 <prvInitialiseNewQueue>
    115c:	ce 01       	movw	r24, r28
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	08 95       	ret

0000116e <xQueueGenericSend>:
    116e:	cf 92       	push	r12
    1170:	df 92       	push	r13
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	29 97       	sbiw	r28, 0x09	; 9
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	7c 01       	movw	r14, r24
    1190:	6b 01       	movw	r12, r22
    1192:	2e 83       	std	Y+6, r18	; 0x06
    1194:	3f 83       	std	Y+7, r19	; 0x07
    1196:	48 87       	std	Y+8, r20	; 0x08
    1198:	59 87       	std	Y+9, r21	; 0x09
    119a:	10 e0       	ldi	r17, 0x00	; 0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	0f 92       	push	r0
    11a2:	f7 01       	movw	r30, r14
    11a4:	96 8d       	ldd	r25, Z+30	; 0x1e
    11a6:	87 8d       	ldd	r24, Z+31	; 0x1f
    11a8:	98 17       	cp	r25, r24
    11aa:	10 f0       	brcs	.+4      	; 0x11b0 <xQueueGenericSend+0x42>
    11ac:	02 30       	cpi	r16, 0x02	; 2
    11ae:	b1 f4       	brne	.+44     	; 0x11dc <xQueueGenericSend+0x6e>
    11b0:	40 2f       	mov	r20, r16
    11b2:	b6 01       	movw	r22, r12
    11b4:	c7 01       	movw	r24, r14
    11b6:	b6 de       	rcall	.-660    	; 0xf24 <prvCopyDataToQueue>
    11b8:	f7 01       	movw	r30, r14
    11ba:	93 89       	ldd	r25, Z+19	; 0x13
    11bc:	99 23       	and	r25, r25
    11be:	41 f0       	breq	.+16     	; 0x11d0 <xQueueGenericSend+0x62>
    11c0:	c7 01       	movw	r24, r14
    11c2:	43 96       	adiw	r24, 0x13	; 19
    11c4:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskRemoveFromEventList>
    11c8:	88 23       	and	r24, r24
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <xQueueGenericSend+0x66>
    11cc:	b8 dd       	rcall	.-1168   	; 0xd3e <vPortYield>
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <xQueueGenericSend+0x66>
    11d0:	81 11       	cpse	r24, r1
    11d2:	b5 dd       	rcall	.-1174   	; 0xd3e <vPortYield>
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	4c c0       	rjmp	.+152    	; 0x1274 <xQueueGenericSend+0x106>
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	a8 85       	ldd	r26, Y+8	; 0x08
    11e2:	b9 85       	ldd	r27, Y+9	; 0x09
    11e4:	89 2b       	or	r24, r25
    11e6:	8a 2b       	or	r24, r26
    11e8:	8b 2b       	or	r24, r27
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <xQueueGenericSend+0x86>
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	40 c0       	rjmp	.+128    	; 0x1274 <xQueueGenericSend+0x106>
    11f4:	11 11       	cpse	r17, r1
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <xQueueGenericSend+0x94>
    11f8:	ce 01       	movw	r24, r28
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <vTaskInternalSetTimeOutState>
    1200:	11 e0       	ldi	r17, 0x01	; 1
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	c7 d7       	rcall	.+3982   	; 0x2196 <vTaskSuspendAll>
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	0f 92       	push	r0
    120e:	f7 01       	movw	r30, r14
    1210:	81 a1       	ldd	r24, Z+33	; 0x21
    1212:	8f 3f       	cpi	r24, 0xFF	; 255
    1214:	09 f4       	brne	.+2      	; 0x1218 <xQueueGenericSend+0xaa>
    1216:	11 a2       	std	Z+33, r1	; 0x21
    1218:	f7 01       	movw	r30, r14
    121a:	82 a1       	ldd	r24, Z+34	; 0x22
    121c:	8f 3f       	cpi	r24, 0xFF	; 255
    121e:	09 f4       	brne	.+2      	; 0x1222 <xQueueGenericSend+0xb4>
    1220:	12 a2       	std	Z+34, r1	; 0x22
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	be 01       	movw	r22, r28
    1228:	6a 5f       	subi	r22, 0xFA	; 250
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	ce 01       	movw	r24, r28
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskCheckForTimeOut>
    1234:	81 11       	cpse	r24, r1
    1236:	19 c0       	rjmp	.+50     	; 0x126a <xQueueGenericSend+0xfc>
    1238:	c7 01       	movw	r24, r14
    123a:	66 de       	rcall	.-820    	; 0xf08 <prvIsQueueFull>
    123c:	88 23       	and	r24, r24
    123e:	81 f0       	breq	.+32     	; 0x1260 <xQueueGenericSend+0xf2>
    1240:	4e 81       	ldd	r20, Y+6	; 0x06
    1242:	5f 81       	ldd	r21, Y+7	; 0x07
    1244:	68 85       	ldd	r22, Y+8	; 0x08
    1246:	79 85       	ldd	r23, Y+9	; 0x09
    1248:	c7 01       	movw	r24, r14
    124a:	08 96       	adiw	r24, 0x08	; 8
    124c:	0e 94 cc 13 	call	0x2798	; 0x2798 <vTaskPlaceOnEventList>
    1250:	c7 01       	movw	r24, r14
    1252:	e1 de       	rcall	.-574    	; 0x1016 <prvUnlockQueue>
    1254:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>
    1258:	81 11       	cpse	r24, r1
    125a:	a0 cf       	rjmp	.-192    	; 0x119c <xQueueGenericSend+0x2e>
    125c:	70 dd       	rcall	.-1312   	; 0xd3e <vPortYield>
    125e:	9e cf       	rjmp	.-196    	; 0x119c <xQueueGenericSend+0x2e>
    1260:	c7 01       	movw	r24, r14
    1262:	d9 de       	rcall	.-590    	; 0x1016 <prvUnlockQueue>
    1264:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>
    1268:	99 cf       	rjmp	.-206    	; 0x119c <xQueueGenericSend+0x2e>
    126a:	c7 01       	movw	r24, r14
    126c:	d4 de       	rcall	.-600    	; 0x1016 <prvUnlockQueue>
    126e:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	29 96       	adiw	r28, 0x09	; 9
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	08 95       	ret

00001292 <prvInitialiseMutex>:
    1292:	0f 93       	push	r16
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f0       	breq	.+26     	; 0x12b2 <prvInitialiseMutex+0x20>
    1298:	fc 01       	movw	r30, r24
    129a:	15 82       	std	Z+5, r1	; 0x05
    129c:	14 82       	std	Z+4, r1	; 0x04
    129e:	11 82       	std	Z+1, r1	; 0x01
    12a0:	10 82       	st	Z, r1
    12a2:	16 82       	std	Z+6, r1	; 0x06
    12a4:	00 e0       	ldi	r16, 0x00	; 0
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	a9 01       	movw	r20, r18
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	5e df       	rcall	.-324    	; 0x116e <xQueueGenericSend>
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <xQueueCreateMutex>:
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	48 2f       	mov	r20, r24
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	33 df       	rcall	.-410    	; 0x1128 <xQueueGenericCreate>
    12c2:	ec 01       	movw	r28, r24
    12c4:	e6 df       	rcall	.-52     	; 0x1292 <prvInitialiseMutex>
    12c6:	ce 01       	movw	r24, r28
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <xQueueGenericSendFromISR>:
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	8a 01       	movw	r16, r20
    12dc:	fc 01       	movw	r30, r24
    12de:	56 8d       	ldd	r21, Z+30	; 0x1e
    12e0:	37 8d       	ldd	r19, Z+31	; 0x1f
    12e2:	53 17       	cp	r21, r19
    12e4:	10 f0       	brcs	.+4      	; 0x12ea <xQueueGenericSendFromISR+0x1c>
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	f9 f4       	brne	.+62     	; 0x1328 <xQueueGenericSendFromISR+0x5a>
    12ea:	42 2f       	mov	r20, r18
    12ec:	78 01       	movw	r14, r16
    12ee:	ec 01       	movw	r28, r24
    12f0:	1a a1       	ldd	r17, Y+34	; 0x22
    12f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12f4:	ce 01       	movw	r24, r28
    12f6:	16 de       	rcall	.-980    	; 0xf24 <prvCopyDataToQueue>
    12f8:	1f 3f       	cpi	r17, 0xFF	; 255
    12fa:	81 f4       	brne	.+32     	; 0x131c <xQueueGenericSendFromISR+0x4e>
    12fc:	8b 89       	ldd	r24, Y+19	; 0x13
    12fe:	88 23       	and	r24, r24
    1300:	a9 f0       	breq	.+42     	; 0x132c <xQueueGenericSendFromISR+0x5e>
    1302:	ce 01       	movw	r24, r28
    1304:	43 96       	adiw	r24, 0x13	; 19
    1306:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskRemoveFromEventList>
    130a:	88 23       	and	r24, r24
    130c:	89 f0       	breq	.+34     	; 0x1330 <xQueueGenericSendFromISR+0x62>
    130e:	e1 14       	cp	r14, r1
    1310:	f1 04       	cpc	r15, r1
    1312:	81 f0       	breq	.+32     	; 0x1334 <xQueueGenericSendFromISR+0x66>
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	f7 01       	movw	r30, r14
    1318:	80 83       	st	Z, r24
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <xQueueGenericSendFromISR+0x68>
    131c:	ff 24       	eor	r15, r15
    131e:	f3 94       	inc	r15
    1320:	f1 0e       	add	r15, r17
    1322:	fa a2       	std	Y+34, r15	; 0x22
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <xQueueGenericSendFromISR+0x68>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <xQueueGenericSendFromISR+0x68>
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <xQueueGenericSendFromISR+0x68>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <xQueueGenericSendFromISR+0x68>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	08 95       	ret

00001344 <xQueueReceive>:
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	29 97       	sbiw	r28, 0x09	; 9
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	8c 01       	movw	r16, r24
    1366:	6b 01       	movw	r12, r22
    1368:	2e 83       	std	Y+6, r18	; 0x06
    136a:	3f 83       	std	Y+7, r19	; 0x07
    136c:	48 87       	std	Y+8, r20	; 0x08
    136e:	59 87       	std	Y+9, r21	; 0x09
    1370:	e1 2c       	mov	r14, r1
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	0f 92       	push	r0
    1378:	f8 01       	movw	r30, r16
    137a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    137c:	ff 20       	and	r15, r15
    137e:	99 f0       	breq	.+38     	; 0x13a6 <xQueueReceive+0x62>
    1380:	b6 01       	movw	r22, r12
    1382:	c8 01       	movw	r24, r16
    1384:	2e de       	rcall	.-932    	; 0xfe2 <prvCopyDataFromQueue>
    1386:	fa 94       	dec	r15
    1388:	f8 01       	movw	r30, r16
    138a:	f6 8e       	std	Z+30, r15	; 0x1e
    138c:	80 85       	ldd	r24, Z+8	; 0x08
    138e:	88 23       	and	r24, r24
    1390:	31 f0       	breq	.+12     	; 0x139e <xQueueReceive+0x5a>
    1392:	c8 01       	movw	r24, r16
    1394:	08 96       	adiw	r24, 0x08	; 8
    1396:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskRemoveFromEventList>
    139a:	81 11       	cpse	r24, r1
    139c:	d0 dc       	rcall	.-1632   	; 0xd3e <vPortYield>
    139e:	0f 90       	pop	r0
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	4f c0       	rjmp	.+158    	; 0x1444 <xQueueReceive+0x100>
    13a6:	8e 81       	ldd	r24, Y+6	; 0x06
    13a8:	9f 81       	ldd	r25, Y+7	; 0x07
    13aa:	a8 85       	ldd	r26, Y+8	; 0x08
    13ac:	b9 85       	ldd	r27, Y+9	; 0x09
    13ae:	89 2b       	or	r24, r25
    13b0:	8a 2b       	or	r24, r26
    13b2:	8b 2b       	or	r24, r27
    13b4:	21 f4       	brne	.+8      	; 0x13be <xQueueReceive+0x7a>
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	43 c0       	rjmp	.+134    	; 0x1444 <xQueueReceive+0x100>
    13be:	e1 10       	cpse	r14, r1
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <xQueueReceive+0x8a>
    13c2:	ce 01       	movw	r24, r28
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <vTaskInternalSetTimeOutState>
    13ca:	ee 24       	eor	r14, r14
    13cc:	e3 94       	inc	r14
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	e1 d6       	rcall	.+3522   	; 0x2196 <vTaskSuspendAll>
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	0f 92       	push	r0
    13da:	f8 01       	movw	r30, r16
    13dc:	81 a1       	ldd	r24, Z+33	; 0x21
    13de:	8f 3f       	cpi	r24, 0xFF	; 255
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <xQueueReceive+0xa0>
    13e2:	11 a2       	std	Z+33, r1	; 0x21
    13e4:	f8 01       	movw	r30, r16
    13e6:	82 a1       	ldd	r24, Z+34	; 0x22
    13e8:	8f 3f       	cpi	r24, 0xFF	; 255
    13ea:	09 f4       	brne	.+2      	; 0x13ee <xQueueReceive+0xaa>
    13ec:	12 a2       	std	Z+34, r1	; 0x22
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	be 01       	movw	r22, r28
    13f4:	6a 5f       	subi	r22, 0xFA	; 250
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskCheckForTimeOut>
    1400:	81 11       	cpse	r24, r1
    1402:	17 c0       	rjmp	.+46     	; 0x1432 <xQueueReceive+0xee>
    1404:	c8 01       	movw	r24, r16
    1406:	73 dd       	rcall	.-1306   	; 0xeee <prvIsQueueEmpty>
    1408:	88 23       	and	r24, r24
    140a:	79 f0       	breq	.+30     	; 0x142a <xQueueReceive+0xe6>
    140c:	4e 81       	ldd	r20, Y+6	; 0x06
    140e:	5f 81       	ldd	r21, Y+7	; 0x07
    1410:	68 85       	ldd	r22, Y+8	; 0x08
    1412:	79 85       	ldd	r23, Y+9	; 0x09
    1414:	c8 01       	movw	r24, r16
    1416:	43 96       	adiw	r24, 0x13	; 19
    1418:	0e 94 cc 13 	call	0x2798	; 0x2798 <vTaskPlaceOnEventList>
    141c:	c8 01       	movw	r24, r16
    141e:	fb dd       	rcall	.-1034   	; 0x1016 <prvUnlockQueue>
    1420:	fa d7       	rcall	.+4084   	; 0x2416 <xTaskResumeAll>
    1422:	81 11       	cpse	r24, r1
    1424:	a6 cf       	rjmp	.-180    	; 0x1372 <xQueueReceive+0x2e>
    1426:	8b dc       	rcall	.-1770   	; 0xd3e <vPortYield>
    1428:	a4 cf       	rjmp	.-184    	; 0x1372 <xQueueReceive+0x2e>
    142a:	c8 01       	movw	r24, r16
    142c:	f4 dd       	rcall	.-1048   	; 0x1016 <prvUnlockQueue>
    142e:	f3 d7       	rcall	.+4070   	; 0x2416 <xTaskResumeAll>
    1430:	a0 cf       	rjmp	.-192    	; 0x1372 <xQueueReceive+0x2e>
    1432:	c8 01       	movw	r24, r16
    1434:	f0 dd       	rcall	.-1056   	; 0x1016 <prvUnlockQueue>
    1436:	ef d7       	rcall	.+4062   	; 0x2416 <xTaskResumeAll>
    1438:	c8 01       	movw	r24, r16
    143a:	59 dd       	rcall	.-1358   	; 0xeee <prvIsQueueEmpty>
    143c:	88 23       	and	r24, r24
    143e:	09 f4       	brne	.+2      	; 0x1442 <xQueueReceive+0xfe>
    1440:	98 cf       	rjmp	.-208    	; 0x1372 <xQueueReceive+0x2e>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	29 96       	adiw	r28, 0x09	; 9
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
    1460:	08 95       	ret

00001462 <xQueueSemaphoreTake>:
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	29 97       	sbiw	r28, 0x09	; 9
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	8c 01       	movw	r16, r24
    1480:	4e 83       	std	Y+6, r20	; 0x06
    1482:	5f 83       	std	Y+7, r21	; 0x07
    1484:	68 87       	std	Y+8, r22	; 0x08
    1486:	79 87       	std	Y+9, r23	; 0x09
    1488:	e1 2c       	mov	r14, r1
    148a:	f1 2c       	mov	r15, r1
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	0f 92       	push	r0
    1492:	f8 01       	movw	r30, r16
    1494:	86 8d       	ldd	r24, Z+30	; 0x1e
    1496:	88 23       	and	r24, r24
    1498:	c9 f0       	breq	.+50     	; 0x14cc <xQueueSemaphoreTake+0x6a>
    149a:	81 50       	subi	r24, 0x01	; 1
    149c:	86 8f       	std	Z+30, r24	; 0x1e
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	89 2b       	or	r24, r25
    14a4:	29 f4       	brne	.+10     	; 0x14b0 <xQueueSemaphoreTake+0x4e>
    14a6:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <pvTaskIncrementMutexHeldCount>
    14aa:	f8 01       	movw	r30, r16
    14ac:	95 83       	std	Z+5, r25	; 0x05
    14ae:	84 83       	std	Z+4, r24	; 0x04
    14b0:	f8 01       	movw	r30, r16
    14b2:	80 85       	ldd	r24, Z+8	; 0x08
    14b4:	88 23       	and	r24, r24
    14b6:	31 f0       	breq	.+12     	; 0x14c4 <xQueueSemaphoreTake+0x62>
    14b8:	c8 01       	movw	r24, r16
    14ba:	08 96       	adiw	r24, 0x08	; 8
    14bc:	0e 94 6f 14 	call	0x28de	; 0x28de <xTaskRemoveFromEventList>
    14c0:	81 11       	cpse	r24, r1
    14c2:	3d dc       	rcall	.-1926   	; 0xd3e <vPortYield>
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	6f c0       	rjmp	.+222    	; 0x15aa <xQueueSemaphoreTake+0x148>
    14cc:	8e 81       	ldd	r24, Y+6	; 0x06
    14ce:	9f 81       	ldd	r25, Y+7	; 0x07
    14d0:	a8 85       	ldd	r26, Y+8	; 0x08
    14d2:	b9 85       	ldd	r27, Y+9	; 0x09
    14d4:	89 2b       	or	r24, r25
    14d6:	8a 2b       	or	r24, r26
    14d8:	8b 2b       	or	r24, r27
    14da:	21 f4       	brne	.+8      	; 0x14e4 <xQueueSemaphoreTake+0x82>
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	63 c0       	rjmp	.+198    	; 0x15aa <xQueueSemaphoreTake+0x148>
    14e4:	f1 10       	cpse	r15, r1
    14e6:	06 c0       	rjmp	.+12     	; 0x14f4 <xQueueSemaphoreTake+0x92>
    14e8:	ce 01       	movw	r24, r28
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <vTaskInternalSetTimeOutState>
    14f0:	ff 24       	eor	r15, r15
    14f2:	f3 94       	inc	r15
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	4e d6       	rcall	.+3228   	; 0x2196 <vTaskSuspendAll>
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	0f 92       	push	r0
    1500:	f8 01       	movw	r30, r16
    1502:	81 a1       	ldd	r24, Z+33	; 0x21
    1504:	8f 3f       	cpi	r24, 0xFF	; 255
    1506:	09 f4       	brne	.+2      	; 0x150a <xQueueSemaphoreTake+0xa8>
    1508:	11 a2       	std	Z+33, r1	; 0x21
    150a:	f8 01       	movw	r30, r16
    150c:	82 a1       	ldd	r24, Z+34	; 0x22
    150e:	8f 3f       	cpi	r24, 0xFF	; 255
    1510:	09 f4       	brne	.+2      	; 0x1514 <xQueueSemaphoreTake+0xb2>
    1512:	12 a2       	std	Z+34, r1	; 0x22
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	be 01       	movw	r22, r28
    151a:	6a 5f       	subi	r22, 0xFA	; 250
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	ce 01       	movw	r24, r28
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskCheckForTimeOut>
    1526:	81 11       	cpse	r24, r1
    1528:	26 c0       	rjmp	.+76     	; 0x1576 <xQueueSemaphoreTake+0x114>
    152a:	c8 01       	movw	r24, r16
    152c:	e0 dc       	rcall	.-1600   	; 0xeee <prvIsQueueEmpty>
    152e:	88 23       	and	r24, r24
    1530:	f1 f0       	breq	.+60     	; 0x156e <xQueueSemaphoreTake+0x10c>
    1532:	f8 01       	movw	r30, r16
    1534:	80 81       	ld	r24, Z
    1536:	91 81       	ldd	r25, Z+1	; 0x01
    1538:	89 2b       	or	r24, r25
    153a:	51 f4       	brne	.+20     	; 0x1550 <xQueueSemaphoreTake+0xee>
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	0f 92       	push	r0
    1542:	84 81       	ldd	r24, Z+4	; 0x04
    1544:	95 81       	ldd	r25, Z+5	; 0x05
    1546:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <xTaskPriorityInherit>
    154a:	e8 2e       	mov	r14, r24
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	4e 81       	ldd	r20, Y+6	; 0x06
    1552:	5f 81       	ldd	r21, Y+7	; 0x07
    1554:	68 85       	ldd	r22, Y+8	; 0x08
    1556:	79 85       	ldd	r23, Y+9	; 0x09
    1558:	c8 01       	movw	r24, r16
    155a:	43 96       	adiw	r24, 0x13	; 19
    155c:	0e 94 cc 13 	call	0x2798	; 0x2798 <vTaskPlaceOnEventList>
    1560:	c8 01       	movw	r24, r16
    1562:	59 dd       	rcall	.-1358   	; 0x1016 <prvUnlockQueue>
    1564:	58 d7       	rcall	.+3760   	; 0x2416 <xTaskResumeAll>
    1566:	81 11       	cpse	r24, r1
    1568:	91 cf       	rjmp	.-222    	; 0x148c <xQueueSemaphoreTake+0x2a>
    156a:	e9 db       	rcall	.-2094   	; 0xd3e <vPortYield>
    156c:	8f cf       	rjmp	.-226    	; 0x148c <xQueueSemaphoreTake+0x2a>
    156e:	c8 01       	movw	r24, r16
    1570:	52 dd       	rcall	.-1372   	; 0x1016 <prvUnlockQueue>
    1572:	51 d7       	rcall	.+3746   	; 0x2416 <xTaskResumeAll>
    1574:	8b cf       	rjmp	.-234    	; 0x148c <xQueueSemaphoreTake+0x2a>
    1576:	c8 01       	movw	r24, r16
    1578:	4e dd       	rcall	.-1380   	; 0x1016 <prvUnlockQueue>
    157a:	4d d7       	rcall	.+3738   	; 0x2416 <xTaskResumeAll>
    157c:	c8 01       	movw	r24, r16
    157e:	b7 dc       	rcall	.-1682   	; 0xeee <prvIsQueueEmpty>
    1580:	88 23       	and	r24, r24
    1582:	09 f4       	brne	.+2      	; 0x1586 <xQueueSemaphoreTake+0x124>
    1584:	83 cf       	rjmp	.-250    	; 0x148c <xQueueSemaphoreTake+0x2a>
    1586:	ee 20       	and	r14, r14
    1588:	79 f0       	breq	.+30     	; 0x15a8 <xQueueSemaphoreTake+0x146>
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	0f 92       	push	r0
    1590:	c8 01       	movw	r24, r16
    1592:	9d dc       	rcall	.-1734   	; 0xece <prvGetDisinheritPriorityAfterTimeout>
    1594:	68 2f       	mov	r22, r24
    1596:	f8 01       	movw	r30, r16
    1598:	84 81       	ldd	r24, Z+4	; 0x04
    159a:	95 81       	ldd	r25, Z+5	; 0x05
    159c:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <vTaskPriorityDisinheritAfterTimeout>
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <xQueueSemaphoreTake+0x148>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	29 96       	adiw	r28, 0x09	; 9
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	08 95       	ret

000015c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	0f 92       	push	r0
    15d0:	89 a1       	ldd	r24, Y+33	; 0x21
    15d2:	8f 3f       	cpi	r24, 0xFF	; 255
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <vQueueWaitForMessageRestricted+0x14>
    15d6:	19 a2       	std	Y+33, r1	; 0x21
    15d8:	8a a1       	ldd	r24, Y+34	; 0x22
    15da:	8f 3f       	cpi	r24, 0xFF	; 255
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <vQueueWaitForMessageRestricted+0x1c>
    15de:	1a a2       	std	Y+34, r1	; 0x22
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    15e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15e6:	81 11       	cpse	r24, r1
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    15ea:	ce 01       	movw	r24, r28
    15ec:	43 96       	adiw	r24, 0x13	; 19
    15ee:	0e 94 2d 14 	call	0x285a	; 0x285a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    15f2:	ce 01       	movw	r24, r28
    15f4:	10 dd       	rcall	.-1504   	; 0x1016 <prvUnlockQueue>
    }
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	08 95       	ret

000015fc <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    15fc:	fc 01       	movw	r30, r24
    15fe:	44 81       	ldd	r20, Z+4	; 0x04
    1600:	55 81       	ldd	r21, Z+5	; 0x05
    1602:	22 81       	ldd	r18, Z+2	; 0x02
    1604:	33 81       	ldd	r19, Z+3	; 0x03
    1606:	24 0f       	add	r18, r20
    1608:	35 1f       	adc	r19, r21
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	b9 01       	movw	r22, r18
    1610:	68 1b       	sub	r22, r24
    1612:	79 0b       	sbc	r23, r25
    1614:	cb 01       	movw	r24, r22
    1616:	64 17       	cp	r22, r20
    1618:	75 07       	cpc	r23, r21
    161a:	10 f0       	brcs	.+4      	; 0x1620 <prvBytesInBuffer+0x24>
    161c:	84 1b       	sub	r24, r20
    161e:	95 0b       	sbc	r25, r21
    1620:	08 95       	ret

00001622 <prvInitialiseNewStreamBuffer>:
    1622:	0f 93       	push	r16
    1624:	fc 01       	movw	r30, r24
    1626:	8f e0       	ldi	r24, 0x0F	; 15
    1628:	df 01       	movw	r26, r30
    162a:	1d 92       	st	X+, r1
    162c:	8a 95       	dec	r24
    162e:	e9 f7       	brne	.-6      	; 0x162a <prvInitialiseNewStreamBuffer+0x8>
    1630:	75 87       	std	Z+13, r23	; 0x0d
    1632:	64 87       	std	Z+12, r22	; 0x0c
    1634:	55 83       	std	Z+5, r21	; 0x05
    1636:	44 83       	std	Z+4, r20	; 0x04
    1638:	37 83       	std	Z+7, r19	; 0x07
    163a:	26 83       	std	Z+6, r18	; 0x06
    163c:	06 87       	std	Z+14, r16	; 0x0e
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret

00001642 <prvWriteBytesToBuffer>:
    1642:	af 92       	push	r10
    1644:	bf 92       	push	r11
    1646:	cf 92       	push	r12
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	6c 01       	movw	r12, r24
    1658:	5b 01       	movw	r10, r22
    165a:	7a 01       	movw	r14, r20
    165c:	fc 01       	movw	r30, r24
    165e:	c2 81       	ldd	r28, Z+2	; 0x02
    1660:	d3 81       	ldd	r29, Z+3	; 0x03
    1662:	04 81       	ldd	r16, Z+4	; 0x04
    1664:	15 81       	ldd	r17, Z+5	; 0x05
    1666:	0c 1b       	sub	r16, r28
    1668:	1d 0b       	sbc	r17, r29
    166a:	40 17       	cp	r20, r16
    166c:	51 07       	cpc	r21, r17
    166e:	08 f4       	brcc	.+2      	; 0x1672 <prvWriteBytesToBuffer+0x30>
    1670:	8a 01       	movw	r16, r20
    1672:	f6 01       	movw	r30, r12
    1674:	84 85       	ldd	r24, Z+12	; 0x0c
    1676:	95 85       	ldd	r25, Z+13	; 0x0d
    1678:	a8 01       	movw	r20, r16
    167a:	b5 01       	movw	r22, r10
    167c:	8c 0f       	add	r24, r28
    167e:	9d 1f       	adc	r25, r29
    1680:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <memcpy>
    1684:	0e 15       	cp	r16, r14
    1686:	1f 05       	cpc	r17, r15
    1688:	58 f4       	brcc	.+22     	; 0x16a0 <prvWriteBytesToBuffer+0x5e>
    168a:	a7 01       	movw	r20, r14
    168c:	40 1b       	sub	r20, r16
    168e:	51 0b       	sbc	r21, r17
    1690:	b5 01       	movw	r22, r10
    1692:	60 0f       	add	r22, r16
    1694:	71 1f       	adc	r23, r17
    1696:	f6 01       	movw	r30, r12
    1698:	84 85       	ldd	r24, Z+12	; 0x0c
    169a:	95 85       	ldd	r25, Z+13	; 0x0d
    169c:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <memcpy>
    16a0:	ce 01       	movw	r24, r28
    16a2:	8e 0d       	add	r24, r14
    16a4:	9f 1d       	adc	r25, r15
    16a6:	f6 01       	movw	r30, r12
    16a8:	24 81       	ldd	r18, Z+4	; 0x04
    16aa:	35 81       	ldd	r19, Z+5	; 0x05
    16ac:	82 17       	cp	r24, r18
    16ae:	93 07       	cpc	r25, r19
    16b0:	10 f0       	brcs	.+4      	; 0x16b6 <prvWriteBytesToBuffer+0x74>
    16b2:	82 1b       	sub	r24, r18
    16b4:	93 0b       	sbc	r25, r19
    16b6:	f6 01       	movw	r30, r12
    16b8:	93 83       	std	Z+3, r25	; 0x03
    16ba:	82 83       	std	Z+2, r24	; 0x02
    16bc:	c7 01       	movw	r24, r14
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16
    16c6:	ff 90       	pop	r15
    16c8:	ef 90       	pop	r14
    16ca:	df 90       	pop	r13
    16cc:	cf 90       	pop	r12
    16ce:	bf 90       	pop	r11
    16d0:	af 90       	pop	r10
    16d2:	08 95       	ret

000016d4 <prvWriteMessageToBuffer>:
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	1f 92       	push	r1
    16e6:	1f 92       	push	r1
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	7c 01       	movw	r14, r24
    16ee:	6b 01       	movw	r12, r22
    16f0:	5a 83       	std	Y+2, r21	; 0x02
    16f2:	49 83       	std	Y+1, r20	; 0x01
    16f4:	21 15       	cp	r18, r1
    16f6:	31 05       	cpc	r19, r1
    16f8:	c1 f0       	breq	.+48     	; 0x172a <prvWriteMessageToBuffer+0x56>
    16fa:	fc 01       	movw	r30, r24
    16fc:	86 85       	ldd	r24, Z+14	; 0x0e
    16fe:	80 fd       	sbrc	r24, 0
    1700:	08 c0       	rjmp	.+16     	; 0x1712 <prvWriteMessageToBuffer+0x3e>
    1702:	42 17       	cp	r20, r18
    1704:	53 07       	cpc	r21, r19
    1706:	08 f4       	brcc	.+2      	; 0x170a <prvWriteMessageToBuffer+0x36>
    1708:	9a 01       	movw	r18, r20
    170a:	3a 83       	std	Y+2, r19	; 0x02
    170c:	29 83       	std	Y+1, r18	; 0x01
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	0f c0       	rjmp	.+30     	; 0x1730 <prvWriteMessageToBuffer+0x5c>
    1712:	20 17       	cp	r18, r16
    1714:	31 07       	cpc	r19, r17
    1716:	58 f0       	brcs	.+22     	; 0x172e <prvWriteMessageToBuffer+0x5a>
    1718:	42 e0       	ldi	r20, 0x02	; 2
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	be 01       	movw	r22, r28
    171e:	6f 5f       	subi	r22, 0xFF	; 255
    1720:	7f 4f       	sbci	r23, 0xFF	; 255
    1722:	c7 01       	movw	r24, r14
    1724:	8e df       	rcall	.-228    	; 0x1642 <prvWriteBytesToBuffer>
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <prvWriteMessageToBuffer+0x5c>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <prvWriteMessageToBuffer+0x5c>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	88 23       	and	r24, r24
    1732:	31 f0       	breq	.+12     	; 0x1740 <prvWriteMessageToBuffer+0x6c>
    1734:	49 81       	ldd	r20, Y+1	; 0x01
    1736:	5a 81       	ldd	r21, Y+2	; 0x02
    1738:	b6 01       	movw	r22, r12
    173a:	c7 01       	movw	r24, r14
    173c:	82 df       	rcall	.-252    	; 0x1642 <prvWriteBytesToBuffer>
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <prvWriteMessageToBuffer+0x70>
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	df 90       	pop	r13
    1756:	cf 90       	pop	r12
    1758:	08 95       	ret

0000175a <prvReadBytesFromBuffer>:
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	7c 01       	movw	r14, r24
    1770:	5b 01       	movw	r10, r22
    1772:	e9 01       	movw	r28, r18
    1774:	42 17       	cp	r20, r18
    1776:	53 07       	cpc	r21, r19
    1778:	08 f4       	brcc	.+2      	; 0x177c <prvReadBytesFromBuffer+0x22>
    177a:	ea 01       	movw	r28, r20
    177c:	20 97       	sbiw	r28, 0x00	; 0
    177e:	81 f1       	breq	.+96     	; 0x17e0 <prvReadBytesFromBuffer+0x86>
    1780:	f7 01       	movw	r30, r14
    1782:	00 81       	ld	r16, Z
    1784:	11 81       	ldd	r17, Z+1	; 0x01
    1786:	84 81       	ldd	r24, Z+4	; 0x04
    1788:	95 81       	ldd	r25, Z+5	; 0x05
    178a:	80 1b       	sub	r24, r16
    178c:	91 0b       	sbc	r25, r17
    178e:	6e 01       	movw	r12, r28
    1790:	8c 17       	cp	r24, r28
    1792:	9d 07       	cpc	r25, r29
    1794:	08 f4       	brcc	.+2      	; 0x1798 <prvReadBytesFromBuffer+0x3e>
    1796:	6c 01       	movw	r12, r24
    1798:	f7 01       	movw	r30, r14
    179a:	64 85       	ldd	r22, Z+12	; 0x0c
    179c:	75 85       	ldd	r23, Z+13	; 0x0d
    179e:	60 0f       	add	r22, r16
    17a0:	71 1f       	adc	r23, r17
    17a2:	a6 01       	movw	r20, r12
    17a4:	c5 01       	movw	r24, r10
    17a6:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <memcpy>
    17aa:	cc 16       	cp	r12, r28
    17ac:	dd 06       	cpc	r13, r29
    17ae:	58 f4       	brcc	.+22     	; 0x17c6 <prvReadBytesFromBuffer+0x6c>
    17b0:	ae 01       	movw	r20, r28
    17b2:	4c 19       	sub	r20, r12
    17b4:	5d 09       	sbc	r21, r13
    17b6:	f7 01       	movw	r30, r14
    17b8:	64 85       	ldd	r22, Z+12	; 0x0c
    17ba:	75 85       	ldd	r23, Z+13	; 0x0d
    17bc:	c5 01       	movw	r24, r10
    17be:	8c 0d       	add	r24, r12
    17c0:	9d 1d       	adc	r25, r13
    17c2:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <memcpy>
    17c6:	0c 0f       	add	r16, r28
    17c8:	1d 1f       	adc	r17, r29
    17ca:	f7 01       	movw	r30, r14
    17cc:	84 81       	ldd	r24, Z+4	; 0x04
    17ce:	95 81       	ldd	r25, Z+5	; 0x05
    17d0:	08 17       	cp	r16, r24
    17d2:	19 07       	cpc	r17, r25
    17d4:	10 f0       	brcs	.+4      	; 0x17da <prvReadBytesFromBuffer+0x80>
    17d6:	08 1b       	sub	r16, r24
    17d8:	19 0b       	sbc	r17, r25
    17da:	f7 01       	movw	r30, r14
    17dc:	11 83       	std	Z+1, r17	; 0x01
    17de:	00 83       	st	Z, r16
    17e0:	ce 01       	movw	r24, r28
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	ff 90       	pop	r15
    17ec:	ef 90       	pop	r14
    17ee:	df 90       	pop	r13
    17f0:	cf 90       	pop	r12
    17f2:	bf 90       	pop	r11
    17f4:	af 90       	pop	r10
    17f6:	08 95       	ret

000017f8 <prvReadMessageFromBuffer>:
    17f8:	6f 92       	push	r6
    17fa:	7f 92       	push	r7
    17fc:	8f 92       	push	r8
    17fe:	9f 92       	push	r9
    1800:	af 92       	push	r10
    1802:	bf 92       	push	r11
    1804:	cf 92       	push	r12
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	1f 92       	push	r1
    1816:	1f 92       	push	r1
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	6c 01       	movw	r12, r24
    181e:	4b 01       	movw	r8, r22
    1820:	5a 01       	movw	r10, r20
    1822:	79 01       	movw	r14, r18
    1824:	01 15       	cp	r16, r1
    1826:	11 05       	cpc	r17, r1
    1828:	b1 f0       	breq	.+44     	; 0x1856 <prvReadMessageFromBuffer+0x5e>
    182a:	fc 01       	movw	r30, r24
    182c:	60 80       	ld	r6, Z
    182e:	71 80       	ldd	r7, Z+1	; 0x01
    1830:	a8 01       	movw	r20, r16
    1832:	be 01       	movw	r22, r28
    1834:	6f 5f       	subi	r22, 0xFF	; 255
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	90 df       	rcall	.-224    	; 0x175a <prvReadBytesFromBuffer>
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	e0 1a       	sub	r14, r16
    1840:	f1 0a       	sbc	r15, r17
    1842:	a8 16       	cp	r10, r24
    1844:	b9 06       	cpc	r11, r25
    1846:	30 f4       	brcc	.+12     	; 0x1854 <prvReadMessageFromBuffer+0x5c>
    1848:	f6 01       	movw	r30, r12
    184a:	71 82       	std	Z+1, r7	; 0x01
    184c:	60 82       	st	Z, r6
    184e:	a1 2c       	mov	r10, r1
    1850:	b1 2c       	mov	r11, r1
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <prvReadMessageFromBuffer+0x5e>
    1854:	5c 01       	movw	r10, r24
    1856:	97 01       	movw	r18, r14
    1858:	a5 01       	movw	r20, r10
    185a:	b4 01       	movw	r22, r8
    185c:	c6 01       	movw	r24, r12
    185e:	7d df       	rcall	.-262    	; 0x175a <prvReadBytesFromBuffer>
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	9f 90       	pop	r9
    187a:	8f 90       	pop	r8
    187c:	7f 90       	pop	r7
    187e:	6f 90       	pop	r6
    1880:	08 95       	ret

00001882 <xStreamBufferGenericCreate>:
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	ec 01       	movw	r28, r24
    1892:	6b 01       	movw	r12, r22
    1894:	41 30       	cpi	r20, 0x01	; 1
    1896:	11 f4       	brne	.+4      	; 0x189c <xStreamBufferGenericCreate+0x1a>
    1898:	01 e0       	ldi	r16, 0x01	; 1
    189a:	01 c0       	rjmp	.+2      	; 0x189e <xStreamBufferGenericCreate+0x1c>
    189c:	00 e0       	ldi	r16, 0x00	; 0
    189e:	c1 14       	cp	r12, r1
    18a0:	d1 04       	cpc	r13, r1
    18a2:	19 f4       	brne	.+6      	; 0x18aa <xStreamBufferGenericCreate+0x28>
    18a4:	cc 24       	eor	r12, r12
    18a6:	c3 94       	inc	r12
    18a8:	d1 2c       	mov	r13, r1
    18aa:	ce 01       	movw	r24, r28
    18ac:	40 96       	adiw	r24, 0x10	; 16
    18ae:	c8 17       	cp	r28, r24
    18b0:	d9 07       	cpc	r29, r25
    18b2:	20 f4       	brcc	.+8      	; 0x18bc <xStreamBufferGenericCreate+0x3a>
    18b4:	21 96       	adiw	r28, 0x01	; 1
    18b6:	8f d8       	rcall	.-3810   	; 0x9d6 <pvPortMalloc>
    18b8:	7c 01       	movw	r14, r24
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <xStreamBufferGenericCreate+0x3e>
    18bc:	e1 2c       	mov	r14, r1
    18be:	f1 2c       	mov	r15, r1
    18c0:	e1 14       	cp	r14, r1
    18c2:	f1 04       	cpc	r15, r1
    18c4:	39 f0       	breq	.+14     	; 0x18d4 <xStreamBufferGenericCreate+0x52>
    18c6:	96 01       	movw	r18, r12
    18c8:	ae 01       	movw	r20, r28
    18ca:	b7 01       	movw	r22, r14
    18cc:	61 5f       	subi	r22, 0xF1	; 241
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	c7 01       	movw	r24, r14
    18d2:	a7 de       	rcall	.-690    	; 0x1622 <prvInitialiseNewStreamBuffer>
    18d4:	c7 01       	movw	r24, r14
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	08 95       	ret

000018e6 <xStreamBufferReset>:
    18e6:	0f 93       	push	r16
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	0f 92       	push	r0
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 85       	ldd	r18, Z+8	; 0x08
    18f2:	31 85       	ldd	r19, Z+9	; 0x09
    18f4:	23 2b       	or	r18, r19
    18f6:	71 f4       	brne	.+28     	; 0x1914 <xStreamBufferReset+0x2e>
    18f8:	22 85       	ldd	r18, Z+10	; 0x0a
    18fa:	33 85       	ldd	r19, Z+11	; 0x0b
    18fc:	23 2b       	or	r18, r19
    18fe:	61 f4       	brne	.+24     	; 0x1918 <xStreamBufferReset+0x32>
    1900:	26 81       	ldd	r18, Z+6	; 0x06
    1902:	37 81       	ldd	r19, Z+7	; 0x07
    1904:	44 81       	ldd	r20, Z+4	; 0x04
    1906:	55 81       	ldd	r21, Z+5	; 0x05
    1908:	64 85       	ldd	r22, Z+12	; 0x0c
    190a:	75 85       	ldd	r23, Z+13	; 0x0d
    190c:	06 85       	ldd	r16, Z+14	; 0x0e
    190e:	89 de       	rcall	.-750    	; 0x1622 <prvInitialiseNewStreamBuffer>
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	03 c0       	rjmp	.+6      	; 0x191a <xStreamBufferReset+0x34>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	01 c0       	rjmp	.+2      	; 0x191a <xStreamBufferReset+0x34>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 91       	pop	r16
    1920:	08 95       	ret

00001922 <xStreamBufferSpacesAvailable>:
    1922:	fc 01       	movw	r30, r24
    1924:	24 81       	ldd	r18, Z+4	; 0x04
    1926:	35 81       	ldd	r19, Z+5	; 0x05
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	42 81       	ldd	r20, Z+2	; 0x02
    1932:	53 81       	ldd	r21, Z+3	; 0x03
    1934:	84 1b       	sub	r24, r20
    1936:	95 0b       	sbc	r25, r21
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	82 17       	cp	r24, r18
    193c:	93 07       	cpc	r25, r19
    193e:	10 f0       	brcs	.+4      	; 0x1944 <xStreamBufferSpacesAvailable+0x22>
    1940:	82 1b       	sub	r24, r18
    1942:	93 0b       	sbc	r25, r19
    1944:	08 95       	ret

00001946 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1946:	2f 92       	push	r2
    1948:	3f 92       	push	r3
    194a:	4f 92       	push	r4
    194c:	5f 92       	push	r5
    194e:	6f 92       	push	r6
    1950:	7f 92       	push	r7
    1952:	8f 92       	push	r8
    1954:	9f 92       	push	r9
    1956:	af 92       	push	r10
    1958:	bf 92       	push	r11
    195a:	cf 92       	push	r12
    195c:	df 92       	push	r13
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	2b 97       	sbiw	r28, 0x0b	; 11
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	4c 01       	movw	r8, r24
    197c:	7b 87       	std	Y+11, r23	; 0x0b
    197e:	6a 87       	std	Y+10, r22	; 0x0a
    1980:	1a 01       	movw	r2, r20
    1982:	0e 83       	std	Y+6, r16	; 0x06
    1984:	1f 83       	std	Y+7, r17	; 0x07
    1986:	28 87       	std	Y+8, r18	; 0x08
    1988:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    198a:	fc 01       	movw	r30, r24
    198c:	84 81       	ldd	r24, Z+4	; 0x04
    198e:	95 81       	ldd	r25, Z+5	; 0x05
    1990:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1992:	26 85       	ldd	r18, Z+14	; 0x0e
    1994:	20 ff       	sbrs	r18, 0
    1996:	0c c0       	rjmp	.+24     	; 0x19b0 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1998:	2a 01       	movw	r4, r20
    199a:	f2 e0       	ldi	r31, 0x02	; 2
    199c:	4f 0e       	add	r4, r31
    199e:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    19a0:	84 15       	cp	r24, r4
    19a2:	95 05       	cpc	r25, r5
    19a4:	58 f4       	brcc	.+22     	; 0x19bc <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    19a6:	1e 82       	std	Y+6, r1	; 0x06
    19a8:	1f 82       	std	Y+7, r1	; 0x07
    19aa:	18 86       	std	Y+8, r1	; 0x08
    19ac:	19 86       	std	Y+9, r1	; 0x09
    19ae:	06 c0       	rjmp	.+12     	; 0x19bc <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    19b0:	84 17       	cp	r24, r20
    19b2:	95 07       	cpc	r25, r21
    19b4:	10 f0       	brcs	.+4      	; 0x19ba <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    19b6:	2a 01       	movw	r4, r20
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    19ba:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19bc:	8e 81       	ldd	r24, Y+6	; 0x06
    19be:	9f 81       	ldd	r25, Y+7	; 0x07
    19c0:	a8 85       	ldd	r26, Y+8	; 0x08
    19c2:	b9 85       	ldd	r27, Y+9	; 0x09
    19c4:	89 2b       	or	r24, r25
    19c6:	8a 2b       	or	r24, r26
    19c8:	8b 2b       	or	r24, r27
    19ca:	09 f4       	brne	.+2      	; 0x19ce <xStreamBufferSend+0x88>
    19cc:	38 c0       	rjmp	.+112    	; 0x1a3e <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    19ce:	ce 01       	movw	r24, r28
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    19dc:	c4 01       	movw	r24, r8
    19de:	a1 df       	rcall	.-190    	; 0x1922 <xStreamBufferSpacesAvailable>
    19e0:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    19e2:	84 15       	cp	r24, r4
    19e4:	95 05       	cpc	r25, r5
    19e6:	40 f5       	brcc	.+80     	; 0x1a38 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 a2 1a 	call	0x3544	; 0x3544 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    19f2:	0e 94 49 16 	call	0x2c92	; 0x2c92 <xTaskGetCurrentTaskHandle>
    19f6:	f4 01       	movw	r30, r8
    19f8:	93 87       	std	Z+11, r25	; 0x0b
    19fa:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    19fc:	0f 90       	pop	r0
    19fe:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a00:	ae 80       	ldd	r10, Y+6	; 0x06
    1a02:	bf 80       	ldd	r11, Y+7	; 0x07
    1a04:	c8 84       	ldd	r12, Y+8	; 0x08
    1a06:	d9 84       	ldd	r13, Y+9	; 0x09
    1a08:	e1 2c       	mov	r14, r1
    1a0a:	f1 2c       	mov	r15, r1
    1a0c:	00 e0       	ldi	r16, 0x00	; 0
    1a0e:	10 e0       	ldi	r17, 0x00	; 0
    1a10:	98 01       	movw	r18, r16
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	ba 01       	movw	r22, r20
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1a1e:	f4 01       	movw	r30, r8
    1a20:	13 86       	std	Z+11, r1	; 0x0b
    1a22:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1a24:	be 01       	movw	r22, r28
    1a26:	6a 5f       	subi	r22, 0xFA	; 250
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <xTaskCheckForTimeOut>
    1a32:	88 23       	and	r24, r24
    1a34:	81 f2       	breq	.-96     	; 0x19d6 <xStreamBufferSend+0x90>
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
                    break;
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1a3e:	61 2c       	mov	r6, r1
    1a40:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1a42:	61 14       	cp	r6, r1
    1a44:	71 04       	cpc	r7, r1
    1a46:	19 f4       	brne	.+6      	; 0x1a4e <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a48:	c4 01       	movw	r24, r8
    1a4a:	6b df       	rcall	.-298    	; 0x1922 <xStreamBufferSpacesAvailable>
    1a4c:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a4e:	82 01       	movw	r16, r4
    1a50:	93 01       	movw	r18, r6
    1a52:	a1 01       	movw	r20, r2
    1a54:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a56:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a58:	c4 01       	movw	r24, r8
    1a5a:	3c de       	rcall	.-904    	; 0x16d4 <prvWriteMessageToBuffer>
    1a5c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1a5e:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a60:	e9 f0       	breq	.+58     	; 0x1a9c <xStreamBufferSend+0x156>
    1a62:	c4 01       	movw	r24, r8
    1a64:	cb dd       	rcall	.-1130   	; 0x15fc <prvBytesInBuffer>
    1a66:	f4 01       	movw	r30, r8
    1a68:	26 81       	ldd	r18, Z+6	; 0x06
    1a6a:	37 81       	ldd	r19, Z+7	; 0x07
    1a6c:	82 17       	cp	r24, r18
    1a6e:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1a70:	a8 f0       	brcs	.+42     	; 0x1a9c <xStreamBufferSend+0x156>
    1a72:	91 d3       	rcall	.+1826   	; 0x2196 <vTaskSuspendAll>
    1a74:	f4 01       	movw	r30, r8
    1a76:	80 85       	ldd	r24, Z+8	; 0x08
    1a78:	91 85       	ldd	r25, Z+9	; 0x09
    1a7a:	89 2b       	or	r24, r25
    1a7c:	71 f0       	breq	.+28     	; 0x1a9a <xStreamBufferSend+0x154>
    1a7e:	80 85       	ldd	r24, Z+8	; 0x08
    1a80:	91 85       	ldd	r25, Z+9	; 0x09
    1a82:	e1 2c       	mov	r14, r1
    1a84:	f1 2c       	mov	r15, r1
    1a86:	00 e0       	ldi	r16, 0x00	; 0
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	a9 01       	movw	r20, r18
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskGenericNotify>
    1a94:	f4 01       	movw	r30, r8
    1a96:	11 86       	std	Z+9, r1	; 0x09
    1a98:	10 86       	std	Z+8, r1	; 0x08
    1a9a:	bd d4       	rcall	.+2426   	; 0x2416 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1a9c:	c6 01       	movw	r24, r12
    1a9e:	2b 96       	adiw	r28, 0x0b	; 11
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	bf 90       	pop	r11
    1abc:	af 90       	pop	r10
    1abe:	9f 90       	pop	r9
    1ac0:	8f 90       	pop	r8
    1ac2:	7f 90       	pop	r7
    1ac4:	6f 90       	pop	r6
    1ac6:	5f 90       	pop	r5
    1ac8:	4f 90       	pop	r4
    1aca:	3f 90       	pop	r3
    1acc:	2f 90       	pop	r2
    1ace:	08 95       	ret

00001ad0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1ad0:	af 92       	push	r10
    1ad2:	bf 92       	push	r11
    1ad4:	cf 92       	push	r12
    1ad6:	df 92       	push	r13
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	ec 01       	movw	r28, r24
    1ae6:	7b 01       	movw	r14, r22
    1ae8:	5a 01       	movw	r10, r20
    1aea:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1aec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aee:	80 ff       	sbrs	r24, 0
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1af2:	8a 01       	movw	r16, r20
    1af4:	0e 5f       	subi	r16, 0xFE	; 254
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1afa:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1afc:	ce 01       	movw	r24, r28
    1afe:	11 df       	rcall	.-478    	; 0x1922 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b00:	9c 01       	movw	r18, r24
    1b02:	a5 01       	movw	r20, r10
    1b04:	b7 01       	movw	r22, r14
    1b06:	ce 01       	movw	r24, r28
    1b08:	e5 dd       	rcall	.-1078   	; 0x16d4 <prvWriteMessageToBuffer>
    1b0a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1b0c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b0e:	c1 f0       	breq	.+48     	; 0x1b40 <xStreamBufferSendFromISR+0x70>
    1b10:	ce 01       	movw	r24, r28
    1b12:	74 dd       	rcall	.-1304   	; 0x15fc <prvBytesInBuffer>
    1b14:	2e 81       	ldd	r18, Y+6	; 0x06
    1b16:	3f 81       	ldd	r19, Y+7	; 0x07
    1b18:	82 17       	cp	r24, r18
    1b1a:	93 07       	cpc	r25, r19
    1b1c:	88 f0       	brcs	.+34     	; 0x1b40 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1b1e:	88 85       	ldd	r24, Y+8	; 0x08
    1b20:	99 85       	ldd	r25, Y+9	; 0x09
    1b22:	89 2b       	or	r24, r25
    1b24:	69 f0       	breq	.+26     	; 0x1b40 <xStreamBufferSendFromISR+0x70>
    1b26:	88 85       	ldd	r24, Y+8	; 0x08
    1b28:	99 85       	ldd	r25, Y+9	; 0x09
    1b2a:	e1 2c       	mov	r14, r1
    1b2c:	f1 2c       	mov	r15, r1
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	a9 01       	movw	r20, r18
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	0e 94 80 19 	call	0x3300	; 0x3300 <xTaskGenericNotifyFromISR>
    1b3c:	19 86       	std	Y+9, r1	; 0x09
    1b3e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1b40:	c5 01       	movw	r24, r10
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	ff 90       	pop	r15
    1b4c:	ef 90       	pop	r14
    1b4e:	df 90       	pop	r13
    1b50:	cf 90       	pop	r12
    1b52:	bf 90       	pop	r11
    1b54:	af 90       	pop	r10
    1b56:	08 95       	ret

00001b58 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1b58:	4f 92       	push	r4
    1b5a:	5f 92       	push	r5
    1b5c:	6f 92       	push	r6
    1b5e:	7f 92       	push	r7
    1b60:	8f 92       	push	r8
    1b62:	9f 92       	push	r9
    1b64:	af 92       	push	r10
    1b66:	bf 92       	push	r11
    1b68:	cf 92       	push	r12
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	ec 01       	movw	r28, r24
    1b7a:	2b 01       	movw	r4, r22
    1b7c:	3a 01       	movw	r6, r20
    1b7e:	58 01       	movw	r10, r16
    1b80:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b84:	80 ff       	sbrs	r24, 0
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b88:	68 94       	set
    1b8a:	88 24       	eor	r8, r8
    1b8c:	81 f8       	bld	r8, 1
    1b8e:	91 2c       	mov	r9, r1
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1b92:	81 2c       	mov	r8, r1
    1b94:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1b96:	a1 14       	cp	r10, r1
    1b98:	b1 04       	cpc	r11, r1
    1b9a:	c1 04       	cpc	r12, r1
    1b9c:	d1 04       	cpc	r13, r1
    1b9e:	41 f1       	breq	.+80     	; 0x1bf0 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	29 dd       	rcall	.-1454   	; 0x15fc <prvBytesInBuffer>
    1baa:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bac:	88 16       	cp	r8, r24
    1bae:	99 06       	cpc	r9, r25
    1bb0:	48 f0       	brcs	.+18     	; 0x1bc4 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1bbc:	0e 94 49 16 	call	0x2c92	; 0x2c92 <xTaskGetCurrentTaskHandle>
    1bc0:	99 87       	std	Y+9, r25	; 0x09
    1bc2:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bc8:	8e 14       	cp	r8, r14
    1bca:	9f 04       	cpc	r9, r15
    1bcc:	a0 f0       	brcs	.+40     	; 0x1bf6 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1bce:	e1 2c       	mov	r14, r1
    1bd0:	f1 2c       	mov	r15, r1
    1bd2:	00 e0       	ldi	r16, 0x00	; 0
    1bd4:	10 e0       	ldi	r17, 0x00	; 0
    1bd6:	98 01       	movw	r18, r16
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	ba 01       	movw	r22, r20
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1be4:	19 86       	std	Y+9, r1	; 0x09
    1be6:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1be8:	ce 01       	movw	r24, r28
    1bea:	08 dd       	rcall	.-1520   	; 0x15fc <prvBytesInBuffer>
    1bec:	7c 01       	movw	r14, r24
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	04 dd       	rcall	.-1528   	; 0x15fc <prvBytesInBuffer>
    1bf4:	7c 01       	movw	r14, r24
    1bf6:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1bf8:	9f 04       	cpc	r9, r15
    1bfa:	e8 f4       	brcc	.+58     	; 0x1c36 <xStreamBufferReceive+0xde>
    1bfc:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1bfe:	97 01       	movw	r18, r14
    1c00:	a3 01       	movw	r20, r6
    1c02:	b2 01       	movw	r22, r4
    1c04:	ce 01       	movw	r24, r28
    1c06:	f8 dd       	rcall	.-1040   	; 0x17f8 <prvReadMessageFromBuffer>
    1c08:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c0a:	89 2b       	or	r24, r25
    1c0c:	b1 f0       	breq	.+44     	; 0x1c3a <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c0e:	c3 d2       	rcall	.+1414   	; 0x2196 <vTaskSuspendAll>
    1c10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c14:	89 2b       	or	r24, r25
    1c16:	69 f0       	breq	.+26     	; 0x1c32 <xStreamBufferReceive+0xda>
    1c18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c1c:	e1 2c       	mov	r14, r1
    1c1e:	f1 2c       	mov	r15, r1
    1c20:	00 e0       	ldi	r16, 0x00	; 0
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	a9 01       	movw	r20, r18
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	0e 94 89 18 	call	0x3112	; 0x3112 <xTaskGenericNotify>
    1c2e:	1b 86       	std	Y+11, r1	; 0x0b
    1c30:	1a 86       	std	Y+10, r1	; 0x0a
    1c32:	f1 d3       	rcall	.+2018   	; 0x2416 <xTaskResumeAll>
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <xStreamBufferReceive+0xe2>
    1c36:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1c38:	d1 2c       	mov	r13, r1
    1c3a:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	cf 90       	pop	r12
    1c4c:	bf 90       	pop	r11
    1c4e:	af 90       	pop	r10
    1c50:	9f 90       	pop	r9
    1c52:	8f 90       	pop	r8
    1c54:	7f 90       	pop	r7
    1c56:	6f 90       	pop	r6
    1c58:	5f 90       	pop	r5
    1c5a:	4f 90       	pop	r4
    1c5c:	08 95       	ret

00001c5e <prvResetNextTaskUnblockTime>:
    1c5e:	e0 91 49 17 	lds	r30, 0x1749	; 0x801749 <pxDelayedTaskList>
    1c62:	f0 91 4a 17 	lds	r31, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    1c66:	80 81       	ld	r24, Z
    1c68:	81 11       	cpse	r24, r1
    1c6a:	0c c0       	rjmp	.+24     	; 0x1c84 <prvResetNextTaskUnblockTime+0x26>
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	9f ef       	ldi	r25, 0xFF	; 255
    1c70:	dc 01       	movw	r26, r24
    1c72:	80 93 13 17 	sts	0x1713, r24	; 0x801713 <xNextTaskUnblockTime>
    1c76:	90 93 14 17 	sts	0x1714, r25	; 0x801714 <xNextTaskUnblockTime+0x1>
    1c7a:	a0 93 15 17 	sts	0x1715, r26	; 0x801715 <xNextTaskUnblockTime+0x2>
    1c7e:	b0 93 16 17 	sts	0x1716, r27	; 0x801716 <xNextTaskUnblockTime+0x3>
    1c82:	08 95       	ret
    1c84:	e0 91 49 17 	lds	r30, 0x1749	; 0x801749 <pxDelayedTaskList>
    1c88:	f0 91 4a 17 	lds	r31, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    1c8c:	07 80       	ldd	r0, Z+7	; 0x07
    1c8e:	f0 85       	ldd	r31, Z+8	; 0x08
    1c90:	e0 2d       	mov	r30, r0
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	a2 81       	ldd	r26, Z+2	; 0x02
    1c98:	b3 81       	ldd	r27, Z+3	; 0x03
    1c9a:	80 93 13 17 	sts	0x1713, r24	; 0x801713 <xNextTaskUnblockTime>
    1c9e:	90 93 14 17 	sts	0x1714, r25	; 0x801714 <xNextTaskUnblockTime+0x1>
    1ca2:	a0 93 15 17 	sts	0x1715, r26	; 0x801715 <xNextTaskUnblockTime+0x2>
    1ca6:	b0 93 16 17 	sts	0x1716, r27	; 0x801716 <xNextTaskUnblockTime+0x3>
    1caa:	08 95       	ret

00001cac <prvDeleteTCB>:
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	ec 01       	movw	r28, r24
    1cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb6:	0e 94 94 05 	call	0xb28	; 0xb28 <vPortFree>
    1cba:	ce 01       	movw	r24, r28
    1cbc:	0e 94 94 05 	call	0xb28	; 0xb28 <vPortFree>
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	08 95       	ret

00001cc6 <prvInitialiseNewTask>:
    1cc6:	4f 92       	push	r4
    1cc8:	5f 92       	push	r5
    1cca:	6f 92       	push	r6
    1ccc:	7f 92       	push	r7
    1cce:	8f 92       	push	r8
    1cd0:	9f 92       	push	r9
    1cd2:	af 92       	push	r10
    1cd4:	bf 92       	push	r11
    1cd6:	cf 92       	push	r12
    1cd8:	df 92       	push	r13
    1cda:	ef 92       	push	r14
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	2c 01       	movw	r4, r24
    1ce6:	5b 01       	movw	r10, r22
    1ce8:	4a 01       	movw	r8, r20
    1cea:	39 01       	movw	r6, r18
    1cec:	e6 01       	movw	r28, r12
    1cee:	65 ea       	ldi	r22, 0xA5	; 165
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf6:	0e 94 e7 35 	call	0x6bce	; 0x6bce <memset>
    1cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfe:	21 e0       	ldi	r18, 0x01	; 1
    1d00:	82 1a       	sub	r8, r18
    1d02:	91 08       	sbc	r9, r1
    1d04:	88 0e       	add	r8, r24
    1d06:	99 1e       	adc	r9, r25
    1d08:	a1 14       	cp	r10, r1
    1d0a:	b1 04       	cpc	r11, r1
    1d0c:	89 f4       	brne	.+34     	; 0x1d30 <prvInitialiseNewTask+0x6a>
    1d0e:	15 c0       	rjmp	.+42     	; 0x1d3a <prvInitialiseNewTask+0x74>
    1d10:	82 2f       	mov	r24, r18
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	f5 01       	movw	r30, r10
    1d16:	e8 0f       	add	r30, r24
    1d18:	f9 1f       	adc	r31, r25
    1d1a:	30 81       	ld	r19, Z
    1d1c:	de 01       	movw	r26, r28
    1d1e:	a8 0f       	add	r26, r24
    1d20:	b9 1f       	adc	r27, r25
    1d22:	5d 96       	adiw	r26, 0x1d	; 29
    1d24:	3c 93       	st	X, r19
    1d26:	80 81       	ld	r24, Z
    1d28:	88 23       	and	r24, r24
    1d2a:	29 f0       	breq	.+10     	; 0x1d36 <prvInitialiseNewTask+0x70>
    1d2c:	2f 5f       	subi	r18, 0xFF	; 255
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <prvInitialiseNewTask+0x6c>
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	20 31       	cpi	r18, 0x10	; 16
    1d34:	68 f3       	brcs	.-38     	; 0x1d10 <prvInitialiseNewTask+0x4a>
    1d36:	1c a6       	std	Y+44, r1	; 0x2c
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <prvInitialiseNewTask+0x76>
    1d3a:	1d 8e       	std	Y+29, r1	; 0x1d
    1d3c:	0a 30       	cpi	r16, 0x0A	; 10
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <prvInitialiseNewTask+0x7c>
    1d40:	09 e0       	ldi	r16, 0x09	; 9
    1d42:	0a 8f       	std	Y+26, r16	; 0x1a
    1d44:	0d a7       	std	Y+45, r16	; 0x2d
    1d46:	1e a6       	std	Y+46, r1	; 0x2e
    1d48:	ce 01       	movw	r24, r28
    1d4a:	02 96       	adiw	r24, 0x02	; 2
    1d4c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <vListInitialiseItem>
    1d50:	ce 01       	movw	r24, r28
    1d52:	0e 96       	adiw	r24, 0x0e	; 14
    1d54:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <vListInitialiseItem>
    1d58:	db 87       	std	Y+11, r29	; 0x0b
    1d5a:	ca 87       	std	Y+10, r28	; 0x0a
    1d5c:	8a e0       	ldi	r24, 0x0A	; 10
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	80 1b       	sub	r24, r16
    1d66:	91 09       	sbc	r25, r1
    1d68:	a1 09       	sbc	r26, r1
    1d6a:	b1 09       	sbc	r27, r1
    1d6c:	8e 87       	std	Y+14, r24	; 0x0e
    1d6e:	9f 87       	std	Y+15, r25	; 0x0f
    1d70:	a8 8b       	std	Y+16, r26	; 0x10
    1d72:	b9 8b       	std	Y+17, r27	; 0x11
    1d74:	df 8b       	std	Y+23, r29	; 0x17
    1d76:	ce 8b       	std	Y+22, r28	; 0x16
    1d78:	84 e0       	ldi	r24, 0x04	; 4
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	bf 96       	adiw	r30, 0x2f	; 47
    1d7e:	df 01       	movw	r26, r30
    1d80:	1d 92       	st	X+, r1
    1d82:	8a 95       	dec	r24
    1d84:	e9 f7       	brne	.-6      	; 0x1d80 <prvInitialiseNewTask+0xba>
    1d86:	1b aa       	std	Y+51, r1	; 0x33
    1d88:	a3 01       	movw	r20, r6
    1d8a:	b2 01       	movw	r22, r4
    1d8c:	c4 01       	movw	r24, r8
    1d8e:	0e 94 56 06 	call	0xcac	; 0xcac <pxPortInitialiseStack>
    1d92:	99 83       	std	Y+1, r25	; 0x01
    1d94:	88 83       	st	Y, r24
    1d96:	e1 14       	cp	r14, r1
    1d98:	f1 04       	cpc	r15, r1
    1d9a:	19 f0       	breq	.+6      	; 0x1da2 <prvInitialiseNewTask+0xdc>
    1d9c:	f7 01       	movw	r30, r14
    1d9e:	d1 83       	std	Z+1, r29	; 0x01
    1da0:	c0 83       	st	Z, r28
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	cf 90       	pop	r12
    1db0:	bf 90       	pop	r11
    1db2:	af 90       	pop	r10
    1db4:	9f 90       	pop	r9
    1db6:	8f 90       	pop	r8
    1db8:	7f 90       	pop	r7
    1dba:	6f 90       	pop	r6
    1dbc:	5f 90       	pop	r5
    1dbe:	4f 90       	pop	r4
    1dc0:	08 95       	ret

00001dc2 <prvInitialiseTaskLists>:
    1dc2:	cf 93       	push	r28
    1dc4:	c0 e0       	ldi	r28, 0x00	; 0
    1dc6:	09 c0       	rjmp	.+18     	; 0x1dda <prvInitialiseTaskLists+0x18>
    1dc8:	2b e0       	ldi	r18, 0x0B	; 11
    1dca:	c2 9f       	mul	r28, r18
    1dcc:	c0 01       	movw	r24, r0
    1dce:	11 24       	eor	r1, r1
    1dd0:	8f 59       	subi	r24, 0x9F	; 159
    1dd2:	98 4e       	sbci	r25, 0xE8	; 232
    1dd4:	0e 94 d1 05 	call	0xba2	; 0xba2 <vListInitialise>
    1dd8:	cf 5f       	subi	r28, 0xFF	; 255
    1dda:	ca 30       	cpi	r28, 0x0A	; 10
    1ddc:	a8 f3       	brcs	.-22     	; 0x1dc8 <prvInitialiseTaskLists+0x6>
    1dde:	86 e5       	ldi	r24, 0x56	; 86
    1de0:	97 e1       	ldi	r25, 0x17	; 23
    1de2:	0e 94 d1 05 	call	0xba2	; 0xba2 <vListInitialise>
    1de6:	8b e4       	ldi	r24, 0x4B	; 75
    1de8:	97 e1       	ldi	r25, 0x17	; 23
    1dea:	0e 94 d1 05 	call	0xba2	; 0xba2 <vListInitialise>
    1dee:	8c e3       	ldi	r24, 0x3C	; 60
    1df0:	97 e1       	ldi	r25, 0x17	; 23
    1df2:	0e 94 d1 05 	call	0xba2	; 0xba2 <vListInitialise>
    1df6:	81 e3       	ldi	r24, 0x31	; 49
    1df8:	97 e1       	ldi	r25, 0x17	; 23
    1dfa:	0e 94 d1 05 	call	0xba2	; 0xba2 <vListInitialise>
    1dfe:	85 e2       	ldi	r24, 0x25	; 37
    1e00:	97 e1       	ldi	r25, 0x17	; 23
    1e02:	0e 94 d1 05 	call	0xba2	; 0xba2 <vListInitialise>
    1e06:	86 e5       	ldi	r24, 0x56	; 86
    1e08:	97 e1       	ldi	r25, 0x17	; 23
    1e0a:	90 93 4a 17 	sts	0x174A, r25	; 0x80174a <pxDelayedTaskList+0x1>
    1e0e:	80 93 49 17 	sts	0x1749, r24	; 0x801749 <pxDelayedTaskList>
    1e12:	8b e4       	ldi	r24, 0x4B	; 75
    1e14:	97 e1       	ldi	r25, 0x17	; 23
    1e16:	90 93 48 17 	sts	0x1748, r25	; 0x801748 <pxOverflowDelayedTaskList+0x1>
    1e1a:	80 93 47 17 	sts	0x1747, r24	; 0x801747 <pxOverflowDelayedTaskList>
    1e1e:	cf 91       	pop	r28
    1e20:	08 95       	ret

00001e22 <prvAddNewTaskToReadyList>:
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	ec 01       	movw	r28, r24
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	0f 92       	push	r0
    1e2e:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <uxCurrentNumberOfTasks>
    1e32:	8f 5f       	subi	r24, 0xFF	; 255
    1e34:	80 93 24 17 	sts	0x1724, r24	; 0x801724 <uxCurrentNumberOfTasks>
    1e38:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1e3c:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1e40:	89 2b       	or	r24, r25
    1e42:	51 f4       	brne	.+20     	; 0x1e58 <prvAddNewTaskToReadyList+0x36>
    1e44:	d0 93 d0 17 	sts	0x17D0, r29	; 0x8017d0 <pxCurrentTCB+0x1>
    1e48:	c0 93 cf 17 	sts	0x17CF, r28	; 0x8017cf <pxCurrentTCB>
    1e4c:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <uxCurrentNumberOfTasks>
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	91 f4       	brne	.+36     	; 0x1e78 <prvAddNewTaskToReadyList+0x56>
    1e54:	b6 df       	rcall	.-148    	; 0x1dc2 <prvInitialiseTaskLists>
    1e56:	10 c0       	rjmp	.+32     	; 0x1e78 <prvAddNewTaskToReadyList+0x56>
    1e58:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <xSchedulerRunning>
    1e5c:	81 11       	cpse	r24, r1
    1e5e:	0c c0       	rjmp	.+24     	; 0x1e78 <prvAddNewTaskToReadyList+0x56>
    1e60:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1e64:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1e68:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e6c:	89 17       	cp	r24, r25
    1e6e:	20 f0       	brcs	.+8      	; 0x1e78 <prvAddNewTaskToReadyList+0x56>
    1e70:	d0 93 d0 17 	sts	0x17D0, r29	; 0x8017d0 <pxCurrentTCB+0x1>
    1e74:	c0 93 cf 17 	sts	0x17CF, r28	; 0x8017cf <pxCurrentTCB>
    1e78:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <uxTaskNumber>
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	80 93 17 17 	sts	0x1717, r24	; 0x801717 <uxTaskNumber>
    1e82:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e84:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    1e88:	8e 17       	cp	r24, r30
    1e8a:	10 f4       	brcc	.+4      	; 0x1e90 <prvAddNewTaskToReadyList+0x6e>
    1e8c:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    1e90:	8b e0       	ldi	r24, 0x0B	; 11
    1e92:	8e 9f       	mul	r24, r30
    1e94:	f0 01       	movw	r30, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	ef 59       	subi	r30, 0x9F	; 159
    1e9a:	f8 4e       	sbci	r31, 0xE8	; 232
    1e9c:	01 80       	ldd	r0, Z+1	; 0x01
    1e9e:	f2 81       	ldd	r31, Z+2	; 0x02
    1ea0:	e0 2d       	mov	r30, r0
    1ea2:	ff 83       	std	Y+7, r31	; 0x07
    1ea4:	ee 83       	std	Y+6, r30	; 0x06
    1ea6:	26 81       	ldd	r18, Z+6	; 0x06
    1ea8:	37 81       	ldd	r19, Z+7	; 0x07
    1eaa:	39 87       	std	Y+9, r19	; 0x09
    1eac:	28 87       	std	Y+8, r18	; 0x08
    1eae:	a6 81       	ldd	r26, Z+6	; 0x06
    1eb0:	b7 81       	ldd	r27, Z+7	; 0x07
    1eb2:	9e 01       	movw	r18, r28
    1eb4:	2e 5f       	subi	r18, 0xFE	; 254
    1eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb8:	15 96       	adiw	r26, 0x05	; 5
    1eba:	3c 93       	st	X, r19
    1ebc:	2e 93       	st	-X, r18
    1ebe:	14 97       	sbiw	r26, 0x04	; 4
    1ec0:	37 83       	std	Z+7, r19	; 0x07
    1ec2:	26 83       	std	Z+6, r18	; 0x06
    1ec4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ec6:	8e 9f       	mul	r24, r30
    1ec8:	f0 01       	movw	r30, r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	ef 59       	subi	r30, 0x9F	; 159
    1ece:	f8 4e       	sbci	r31, 0xE8	; 232
    1ed0:	fd 87       	std	Y+13, r31	; 0x0d
    1ed2:	ec 87       	std	Y+12, r30	; 0x0c
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	80 83       	st	Z, r24
    1eda:	0f 90       	pop	r0
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <xSchedulerRunning>
    1ee2:	88 23       	and	r24, r24
    1ee4:	51 f0       	breq	.+20     	; 0x1efa <prvAddNewTaskToReadyList+0xd8>
    1ee6:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1eea:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1eee:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ef0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ef2:	98 17       	cp	r25, r24
    1ef4:	10 f4       	brcc	.+4      	; 0x1efa <prvAddNewTaskToReadyList+0xd8>
    1ef6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <vPortYield>
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <prvCheckTasksWaitingTermination>:
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	1b c0       	rjmp	.+54     	; 0x1f3c <prvCheckTasksWaitingTermination+0x3c>
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	0f 92       	push	r0
    1f0c:	e0 91 38 17 	lds	r30, 0x1738	; 0x801738 <xTasksWaitingTermination+0x7>
    1f10:	f0 91 39 17 	lds	r31, 0x1739	; 0x801739 <xTasksWaitingTermination+0x8>
    1f14:	c0 85       	ldd	r28, Z+8	; 0x08
    1f16:	d1 85       	ldd	r29, Z+9	; 0x09
    1f18:	ce 01       	movw	r24, r28
    1f1a:	02 96       	adiw	r24, 0x02	; 2
    1f1c:	0e 94 23 06 	call	0xc46	; 0xc46 <uxListRemove>
    1f20:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <uxCurrentNumberOfTasks>
    1f24:	81 50       	subi	r24, 0x01	; 1
    1f26:	80 93 24 17 	sts	0x1724, r24	; 0x801724 <uxCurrentNumberOfTasks>
    1f2a:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <uxDeletedTasksWaitingCleanUp>
    1f2e:	81 50       	subi	r24, 0x01	; 1
    1f30:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <uxDeletedTasksWaitingCleanUp>
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	ce 01       	movw	r24, r28
    1f3a:	b8 de       	rcall	.-656    	; 0x1cac <prvDeleteTCB>
    1f3c:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <uxDeletedTasksWaitingCleanUp>
    1f40:	81 11       	cpse	r24, r1
    1f42:	e1 cf       	rjmp	.-62     	; 0x1f06 <prvCheckTasksWaitingTermination+0x6>
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <prvAddCurrentTaskToDelayedList>:
    1f4a:	8f 92       	push	r8
    1f4c:	9f 92       	push	r9
    1f4e:	af 92       	push	r10
    1f50:	bf 92       	push	r11
    1f52:	cf 92       	push	r12
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	6b 01       	movw	r12, r22
    1f60:	7c 01       	movw	r14, r24
    1f62:	c4 2f       	mov	r28, r20
    1f64:	80 90 20 17 	lds	r8, 0x1720	; 0x801720 <xTickCount>
    1f68:	90 90 21 17 	lds	r9, 0x1721	; 0x801721 <xTickCount+0x1>
    1f6c:	a0 90 22 17 	lds	r10, 0x1722	; 0x801722 <xTickCount+0x2>
    1f70:	b0 90 23 17 	lds	r11, 0x1723	; 0x801723 <xTickCount+0x3>
    1f74:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1f78:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1f7c:	02 96       	adiw	r24, 0x02	; 2
    1f7e:	0e 94 23 06 	call	0xc46	; 0xc46 <uxListRemove>
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	c8 16       	cp	r12, r24
    1f86:	d8 06       	cpc	r13, r24
    1f88:	e8 06       	cpc	r14, r24
    1f8a:	f8 06       	cpc	r15, r24
    1f8c:	b1 f5       	brne	.+108    	; 0x1ffa <prvAddCurrentTaskToDelayedList+0xb0>
    1f8e:	cc 23       	and	r28, r28
    1f90:	a1 f1       	breq	.+104    	; 0x1ffa <prvAddCurrentTaskToDelayedList+0xb0>
    1f92:	e5 e2       	ldi	r30, 0x25	; 37
    1f94:	f7 e1       	ldi	r31, 0x17	; 23
    1f96:	a1 81       	ldd	r26, Z+1	; 0x01
    1f98:	b2 81       	ldd	r27, Z+2	; 0x02
    1f9a:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1f9e:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1fa2:	bf 83       	std	Y+7, r27	; 0x07
    1fa4:	ae 83       	std	Y+6, r26	; 0x06
    1fa6:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1faa:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1fae:	16 96       	adiw	r26, 0x06	; 6
    1fb0:	8d 91       	ld	r24, X+
    1fb2:	9c 91       	ld	r25, X
    1fb4:	17 97       	sbiw	r26, 0x07	; 7
    1fb6:	99 87       	std	Y+9, r25	; 0x09
    1fb8:	88 87       	std	Y+8, r24	; 0x08
    1fba:	16 96       	adiw	r26, 0x06	; 6
    1fbc:	cd 91       	ld	r28, X+
    1fbe:	dc 91       	ld	r29, X
    1fc0:	17 97       	sbiw	r26, 0x07	; 7
    1fc2:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1fc6:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1fca:	02 96       	adiw	r24, 0x02	; 2
    1fcc:	9d 83       	std	Y+5, r25	; 0x05
    1fce:	8c 83       	std	Y+4, r24	; 0x04
    1fd0:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1fd4:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1fd8:	02 96       	adiw	r24, 0x02	; 2
    1fda:	17 96       	adiw	r26, 0x07	; 7
    1fdc:	9c 93       	st	X, r25
    1fde:	8e 93       	st	-X, r24
    1fe0:	16 97       	sbiw	r26, 0x06	; 6
    1fe2:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1fe6:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1fea:	1d 96       	adiw	r26, 0x0d	; 13
    1fec:	fc 93       	st	X, r31
    1fee:	ee 93       	st	-X, r30
    1ff0:	1c 97       	sbiw	r26, 0x0c	; 12
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	80 83       	st	Z, r24
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    1ffa:	c8 0c       	add	r12, r8
    1ffc:	d9 1c       	adc	r13, r9
    1ffe:	ea 1c       	adc	r14, r10
    2000:	fb 1c       	adc	r15, r11
    2002:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2006:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    200a:	c2 82       	std	Z+2, r12	; 0x02
    200c:	d3 82       	std	Z+3, r13	; 0x03
    200e:	e4 82       	std	Z+4, r14	; 0x04
    2010:	f5 82       	std	Z+5, r15	; 0x05
    2012:	c8 14       	cp	r12, r8
    2014:	d9 04       	cpc	r13, r9
    2016:	ea 04       	cpc	r14, r10
    2018:	fb 04       	cpc	r15, r11
    201a:	68 f4       	brcc	.+26     	; 0x2036 <__DATA_REGION_LENGTH__+0x36>
    201c:	60 91 cf 17 	lds	r22, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2020:	70 91 d0 17 	lds	r23, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2024:	80 91 47 17 	lds	r24, 0x1747	; 0x801747 <pxOverflowDelayedTaskList>
    2028:	90 91 48 17 	lds	r25, 0x1748	; 0x801748 <pxOverflowDelayedTaskList+0x1>
    202c:	6e 5f       	subi	r22, 0xFE	; 254
    202e:	7f 4f       	sbci	r23, 0xFF	; 255
    2030:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsert>
    2034:	21 c0       	rjmp	.+66     	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    2036:	60 91 cf 17 	lds	r22, 0x17CF	; 0x8017cf <pxCurrentTCB>
    203a:	70 91 d0 17 	lds	r23, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    203e:	80 91 49 17 	lds	r24, 0x1749	; 0x801749 <pxDelayedTaskList>
    2042:	90 91 4a 17 	lds	r25, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    2046:	6e 5f       	subi	r22, 0xFE	; 254
    2048:	7f 4f       	sbci	r23, 0xFF	; 255
    204a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsert>
    204e:	80 91 13 17 	lds	r24, 0x1713	; 0x801713 <xNextTaskUnblockTime>
    2052:	90 91 14 17 	lds	r25, 0x1714	; 0x801714 <xNextTaskUnblockTime+0x1>
    2056:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <xNextTaskUnblockTime+0x2>
    205a:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <xNextTaskUnblockTime+0x3>
    205e:	c8 16       	cp	r12, r24
    2060:	d9 06       	cpc	r13, r25
    2062:	ea 06       	cpc	r14, r26
    2064:	fb 06       	cpc	r15, r27
    2066:	40 f4       	brcc	.+16     	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    2068:	c0 92 13 17 	sts	0x1713, r12	; 0x801713 <xNextTaskUnblockTime>
    206c:	d0 92 14 17 	sts	0x1714, r13	; 0x801714 <xNextTaskUnblockTime+0x1>
    2070:	e0 92 15 17 	sts	0x1715, r14	; 0x801715 <xNextTaskUnblockTime+0x2>
    2074:	f0 92 16 17 	sts	0x1716, r15	; 0x801716 <xNextTaskUnblockTime+0x3>
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	ff 90       	pop	r15
    207e:	ef 90       	pop	r14
    2080:	df 90       	pop	r13
    2082:	cf 90       	pop	r12
    2084:	bf 90       	pop	r11
    2086:	af 90       	pop	r10
    2088:	9f 90       	pop	r9
    208a:	8f 90       	pop	r8
    208c:	08 95       	ret

0000208e <xTaskCreate>:
    208e:	2f 92       	push	r2
    2090:	3f 92       	push	r3
    2092:	4f 92       	push	r4
    2094:	5f 92       	push	r5
    2096:	6f 92       	push	r6
    2098:	7f 92       	push	r7
    209a:	8f 92       	push	r8
    209c:	9f 92       	push	r9
    209e:	af 92       	push	r10
    20a0:	bf 92       	push	r11
    20a2:	cf 92       	push	r12
    20a4:	df 92       	push	r13
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	0f 93       	push	r16
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	3c 01       	movw	r6, r24
    20b2:	1b 01       	movw	r2, r22
    20b4:	4a 01       	movw	r8, r20
    20b6:	29 01       	movw	r4, r18
    20b8:	ca 01       	movw	r24, r20
    20ba:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <pvPortMalloc>
    20be:	6c 01       	movw	r12, r24
    20c0:	89 2b       	or	r24, r25
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <xTaskCreate+0x52>
    20c4:	84 e3       	ldi	r24, 0x34	; 52
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <pvPortMalloc>
    20cc:	ec 01       	movw	r28, r24
    20ce:	89 2b       	or	r24, r25
    20d0:	19 f0       	breq	.+6      	; 0x20d8 <xTaskCreate+0x4a>
    20d2:	dc 8e       	std	Y+28, r13	; 0x1c
    20d4:	cb 8e       	std	Y+27, r12	; 0x1b
    20d6:	06 c0       	rjmp	.+12     	; 0x20e4 <xTaskCreate+0x56>
    20d8:	c6 01       	movw	r24, r12
    20da:	0e 94 94 05 	call	0xb28	; 0xb28 <vPortFree>
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <xTaskCreate+0x56>
    20e0:	c0 e0       	ldi	r28, 0x00	; 0
    20e2:	d0 e0       	ldi	r29, 0x00	; 0
    20e4:	20 97       	sbiw	r28, 0x00	; 0
    20e6:	61 f0       	breq	.+24     	; 0x2100 <xTaskCreate+0x72>
    20e8:	a1 2c       	mov	r10, r1
    20ea:	b1 2c       	mov	r11, r1
    20ec:	6e 01       	movw	r12, r28
    20ee:	92 01       	movw	r18, r4
    20f0:	a4 01       	movw	r20, r8
    20f2:	b1 01       	movw	r22, r2
    20f4:	c3 01       	movw	r24, r6
    20f6:	e7 dd       	rcall	.-1074   	; 0x1cc6 <prvInitialiseNewTask>
    20f8:	ce 01       	movw	r24, r28
    20fa:	93 de       	rcall	.-730    	; 0x1e22 <prvAddNewTaskToReadyList>
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <xTaskCreate+0x74>
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
    210e:	cf 90       	pop	r12
    2110:	bf 90       	pop	r11
    2112:	af 90       	pop	r10
    2114:	9f 90       	pop	r9
    2116:	8f 90       	pop	r8
    2118:	7f 90       	pop	r7
    211a:	6f 90       	pop	r6
    211c:	5f 90       	pop	r5
    211e:	4f 90       	pop	r4
    2120:	3f 90       	pop	r3
    2122:	2f 90       	pop	r2
    2124:	08 95       	ret

00002126 <vTaskStartScheduler>:
    2126:	ef 92       	push	r14
    2128:	ff 92       	push	r15
    212a:	0f 93       	push	r16
    212c:	0f 2e       	mov	r0, r31
    212e:	f1 e1       	ldi	r31, 0x11	; 17
    2130:	ef 2e       	mov	r14, r31
    2132:	f7 e1       	ldi	r31, 0x17	; 23
    2134:	ff 2e       	mov	r15, r31
    2136:	f0 2d       	mov	r31, r0
    2138:	00 e0       	ldi	r16, 0x00	; 0
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 ec       	ldi	r20, 0xC0	; 192
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	6b e5       	ldi	r22, 0x5B	; 91
    2144:	73 e0       	ldi	r23, 0x03	; 3
    2146:	8e e4       	ldi	r24, 0x4E	; 78
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	a1 df       	rcall	.-190    	; 0x208e <xTaskCreate>
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	11 f4       	brne	.+4      	; 0x2154 <vTaskStartScheduler+0x2e>
    2150:	0e 94 46 1b 	call	0x368c	; 0x368c <xTimerCreateTimerTask>
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	c9 f4       	brne	.+50     	; 0x218a <vTaskStartScheduler+0x64>
    2158:	f8 94       	cli
    215a:	8f ef       	ldi	r24, 0xFF	; 255
    215c:	9f ef       	ldi	r25, 0xFF	; 255
    215e:	dc 01       	movw	r26, r24
    2160:	80 93 13 17 	sts	0x1713, r24	; 0x801713 <xNextTaskUnblockTime>
    2164:	90 93 14 17 	sts	0x1714, r25	; 0x801714 <xNextTaskUnblockTime+0x1>
    2168:	a0 93 15 17 	sts	0x1715, r26	; 0x801715 <xNextTaskUnblockTime+0x2>
    216c:	b0 93 16 17 	sts	0x1716, r27	; 0x801716 <xNextTaskUnblockTime+0x3>
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	80 93 1e 17 	sts	0x171E, r24	; 0x80171e <xSchedulerRunning>
    2176:	10 92 20 17 	sts	0x1720, r1	; 0x801720 <xTickCount>
    217a:	10 92 21 17 	sts	0x1721, r1	; 0x801721 <xTickCount+0x1>
    217e:	10 92 22 17 	sts	0x1722, r1	; 0x801722 <xTickCount+0x2>
    2182:	10 92 23 17 	sts	0x1723, r1	; 0x801723 <xTickCount+0x3>
    2186:	0e 94 6d 06 	call	0xcda	; 0xcda <xPortStartScheduler>
    218a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <uxTopUsedPriority>
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	08 95       	ret

00002196 <vTaskSuspendAll>:
    2196:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    219a:	8f 5f       	subi	r24, 0xFF	; 255
    219c:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxSchedulerSuspended>
    21a0:	08 95       	ret

000021a2 <xTaskGetTickCount>:
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	0f 92       	push	r0
    21a8:	60 91 20 17 	lds	r22, 0x1720	; 0x801720 <xTickCount>
    21ac:	70 91 21 17 	lds	r23, 0x1721	; 0x801721 <xTickCount+0x1>
    21b0:	80 91 22 17 	lds	r24, 0x1722	; 0x801722 <xTickCount+0x2>
    21b4:	90 91 23 17 	lds	r25, 0x1723	; 0x801723 <xTickCount+0x3>
    21b8:	0f 90       	pop	r0
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	08 95       	ret

000021be <xTaskIncrementTick>:
    21be:	cf 92       	push	r12
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    21ce:	81 11       	cpse	r24, r1
    21d0:	05 c1       	rjmp	.+522    	; 0x23dc <__stack+0x1dd>
    21d2:	c0 90 20 17 	lds	r12, 0x1720	; 0x801720 <xTickCount>
    21d6:	d0 90 21 17 	lds	r13, 0x1721	; 0x801721 <xTickCount+0x1>
    21da:	e0 90 22 17 	lds	r14, 0x1722	; 0x801722 <xTickCount+0x2>
    21de:	f0 90 23 17 	lds	r15, 0x1723	; 0x801723 <xTickCount+0x3>
    21e2:	8f ef       	ldi	r24, 0xFF	; 255
    21e4:	c8 1a       	sub	r12, r24
    21e6:	d8 0a       	sbc	r13, r24
    21e8:	e8 0a       	sbc	r14, r24
    21ea:	f8 0a       	sbc	r15, r24
    21ec:	c0 92 20 17 	sts	0x1720, r12	; 0x801720 <xTickCount>
    21f0:	d0 92 21 17 	sts	0x1721, r13	; 0x801721 <xTickCount+0x1>
    21f4:	e0 92 22 17 	sts	0x1722, r14	; 0x801722 <xTickCount+0x2>
    21f8:	f0 92 23 17 	sts	0x1723, r15	; 0x801723 <xTickCount+0x3>
    21fc:	c1 14       	cp	r12, r1
    21fe:	d1 04       	cpc	r13, r1
    2200:	e1 04       	cpc	r14, r1
    2202:	f1 04       	cpc	r15, r1
    2204:	b1 f4       	brne	.+44     	; 0x2232 <__stack+0x33>
    2206:	80 91 49 17 	lds	r24, 0x1749	; 0x801749 <pxDelayedTaskList>
    220a:	90 91 4a 17 	lds	r25, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    220e:	20 91 47 17 	lds	r18, 0x1747	; 0x801747 <pxOverflowDelayedTaskList>
    2212:	30 91 48 17 	lds	r19, 0x1748	; 0x801748 <pxOverflowDelayedTaskList+0x1>
    2216:	30 93 4a 17 	sts	0x174A, r19	; 0x80174a <pxDelayedTaskList+0x1>
    221a:	20 93 49 17 	sts	0x1749, r18	; 0x801749 <pxDelayedTaskList>
    221e:	90 93 48 17 	sts	0x1748, r25	; 0x801748 <pxOverflowDelayedTaskList+0x1>
    2222:	80 93 47 17 	sts	0x1747, r24	; 0x801747 <pxOverflowDelayedTaskList>
    2226:	80 91 18 17 	lds	r24, 0x1718	; 0x801718 <xNumOfOverflows>
    222a:	8f 5f       	subi	r24, 0xFF	; 255
    222c:	80 93 18 17 	sts	0x1718, r24	; 0x801718 <xNumOfOverflows>
    2230:	16 dd       	rcall	.-1492   	; 0x1c5e <prvResetNextTaskUnblockTime>
    2232:	80 91 13 17 	lds	r24, 0x1713	; 0x801713 <xNextTaskUnblockTime>
    2236:	90 91 14 17 	lds	r25, 0x1714	; 0x801714 <xNextTaskUnblockTime+0x1>
    223a:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <xNextTaskUnblockTime+0x2>
    223e:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <xNextTaskUnblockTime+0x3>
    2242:	c8 16       	cp	r12, r24
    2244:	d9 06       	cpc	r13, r25
    2246:	ea 06       	cpc	r14, r26
    2248:	fb 06       	cpc	r15, r27
    224a:	20 f4       	brcc	.+8      	; 0x2254 <__stack+0x55>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	b2 c0       	rjmp	.+356    	; 0x23b4 <__stack+0x1b5>
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	01 c0       	rjmp	.+2      	; 0x2256 <__stack+0x57>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	e0 91 49 17 	lds	r30, 0x1749	; 0x801749 <pxDelayedTaskList>
    225a:	f0 91 4a 17 	lds	r31, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    225e:	90 81       	ld	r25, Z
    2260:	91 11       	cpse	r25, r1
    2262:	0c c0       	rjmp	.+24     	; 0x227c <__stack+0x7d>
    2264:	4f ef       	ldi	r20, 0xFF	; 255
    2266:	5f ef       	ldi	r21, 0xFF	; 255
    2268:	ba 01       	movw	r22, r20
    226a:	40 93 13 17 	sts	0x1713, r20	; 0x801713 <xNextTaskUnblockTime>
    226e:	50 93 14 17 	sts	0x1714, r21	; 0x801714 <xNextTaskUnblockTime+0x1>
    2272:	60 93 15 17 	sts	0x1715, r22	; 0x801715 <xNextTaskUnblockTime+0x2>
    2276:	70 93 16 17 	sts	0x1716, r23	; 0x801716 <xNextTaskUnblockTime+0x3>
    227a:	9c c0       	rjmp	.+312    	; 0x23b4 <__stack+0x1b5>
    227c:	e0 91 49 17 	lds	r30, 0x1749	; 0x801749 <pxDelayedTaskList>
    2280:	f0 91 4a 17 	lds	r31, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    2284:	07 80       	ldd	r0, Z+7	; 0x07
    2286:	f0 85       	ldd	r31, Z+8	; 0x08
    2288:	e0 2d       	mov	r30, r0
    228a:	00 84       	ldd	r0, Z+8	; 0x08
    228c:	f1 85       	ldd	r31, Z+9	; 0x09
    228e:	e0 2d       	mov	r30, r0
    2290:	42 81       	ldd	r20, Z+2	; 0x02
    2292:	53 81       	ldd	r21, Z+3	; 0x03
    2294:	64 81       	ldd	r22, Z+4	; 0x04
    2296:	75 81       	ldd	r23, Z+5	; 0x05
    2298:	c4 16       	cp	r12, r20
    229a:	d5 06       	cpc	r13, r21
    229c:	e6 06       	cpc	r14, r22
    229e:	f7 06       	cpc	r15, r23
    22a0:	48 f4       	brcc	.+18     	; 0x22b4 <__stack+0xb5>
    22a2:	40 93 13 17 	sts	0x1713, r20	; 0x801713 <xNextTaskUnblockTime>
    22a6:	50 93 14 17 	sts	0x1714, r21	; 0x801714 <xNextTaskUnblockTime+0x1>
    22aa:	60 93 15 17 	sts	0x1715, r22	; 0x801715 <xNextTaskUnblockTime+0x2>
    22ae:	70 93 16 17 	sts	0x1716, r23	; 0x801716 <xNextTaskUnblockTime+0x3>
    22b2:	80 c0       	rjmp	.+256    	; 0x23b4 <__stack+0x1b5>
    22b4:	a4 85       	ldd	r26, Z+12	; 0x0c
    22b6:	b5 85       	ldd	r27, Z+13	; 0x0d
    22b8:	c6 81       	ldd	r28, Z+6	; 0x06
    22ba:	d7 81       	ldd	r29, Z+7	; 0x07
    22bc:	20 85       	ldd	r18, Z+8	; 0x08
    22be:	31 85       	ldd	r19, Z+9	; 0x09
    22c0:	3f 83       	std	Y+7, r19	; 0x07
    22c2:	2e 83       	std	Y+6, r18	; 0x06
    22c4:	c0 85       	ldd	r28, Z+8	; 0x08
    22c6:	d1 85       	ldd	r29, Z+9	; 0x09
    22c8:	26 81       	ldd	r18, Z+6	; 0x06
    22ca:	37 81       	ldd	r19, Z+7	; 0x07
    22cc:	3d 83       	std	Y+5, r19	; 0x05
    22ce:	2c 83       	std	Y+4, r18	; 0x04
    22d0:	11 96       	adiw	r26, 0x01	; 1
    22d2:	4d 91       	ld	r20, X+
    22d4:	5c 91       	ld	r21, X
    22d6:	12 97       	sbiw	r26, 0x02	; 2
    22d8:	9f 01       	movw	r18, r30
    22da:	2e 5f       	subi	r18, 0xFE	; 254
    22dc:	3f 4f       	sbci	r19, 0xFF	; 255
    22de:	42 17       	cp	r20, r18
    22e0:	53 07       	cpc	r21, r19
    22e2:	31 f4       	brne	.+12     	; 0x22f0 <__stack+0xf1>
    22e4:	40 85       	ldd	r20, Z+8	; 0x08
    22e6:	51 85       	ldd	r21, Z+9	; 0x09
    22e8:	12 96       	adiw	r26, 0x02	; 2
    22ea:	5c 93       	st	X, r21
    22ec:	4e 93       	st	-X, r20
    22ee:	11 97       	sbiw	r26, 0x01	; 1
    22f0:	15 86       	std	Z+13, r1	; 0x0d
    22f2:	14 86       	std	Z+12, r1	; 0x0c
    22f4:	9c 91       	ld	r25, X
    22f6:	91 50       	subi	r25, 0x01	; 1
    22f8:	9c 93       	st	X, r25
    22fa:	a0 8d       	ldd	r26, Z+24	; 0x18
    22fc:	b1 8d       	ldd	r27, Z+25	; 0x19
    22fe:	10 97       	sbiw	r26, 0x00	; 0
    2300:	09 f1       	breq	.+66     	; 0x2344 <__stack+0x145>
    2302:	c2 89       	ldd	r28, Z+18	; 0x12
    2304:	d3 89       	ldd	r29, Z+19	; 0x13
    2306:	44 89       	ldd	r20, Z+20	; 0x14
    2308:	55 89       	ldd	r21, Z+21	; 0x15
    230a:	5f 83       	std	Y+7, r21	; 0x07
    230c:	4e 83       	std	Y+6, r20	; 0x06
    230e:	c4 89       	ldd	r28, Z+20	; 0x14
    2310:	d5 89       	ldd	r29, Z+21	; 0x15
    2312:	42 89       	ldd	r20, Z+18	; 0x12
    2314:	53 89       	ldd	r21, Z+19	; 0x13
    2316:	5d 83       	std	Y+5, r21	; 0x05
    2318:	4c 83       	std	Y+4, r20	; 0x04
    231a:	11 96       	adiw	r26, 0x01	; 1
    231c:	6d 91       	ld	r22, X+
    231e:	7c 91       	ld	r23, X
    2320:	12 97       	sbiw	r26, 0x02	; 2
    2322:	af 01       	movw	r20, r30
    2324:	42 5f       	subi	r20, 0xF2	; 242
    2326:	5f 4f       	sbci	r21, 0xFF	; 255
    2328:	64 17       	cp	r22, r20
    232a:	75 07       	cpc	r23, r21
    232c:	31 f4       	brne	.+12     	; 0x233a <__stack+0x13b>
    232e:	44 89       	ldd	r20, Z+20	; 0x14
    2330:	55 89       	ldd	r21, Z+21	; 0x15
    2332:	12 96       	adiw	r26, 0x02	; 2
    2334:	5c 93       	st	X, r21
    2336:	4e 93       	st	-X, r20
    2338:	11 97       	sbiw	r26, 0x01	; 1
    233a:	11 8e       	std	Z+25, r1	; 0x19
    233c:	10 8e       	std	Z+24, r1	; 0x18
    233e:	9c 91       	ld	r25, X
    2340:	91 50       	subi	r25, 0x01	; 1
    2342:	9c 93       	st	X, r25
    2344:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2346:	90 91 1f 17 	lds	r25, 0x171F	; 0x80171f <uxTopReadyPriority>
    234a:	9a 17       	cp	r25, r26
    234c:	10 f4       	brcc	.+4      	; 0x2352 <__stack+0x153>
    234e:	a0 93 1f 17 	sts	0x171F, r26	; 0x80171f <uxTopReadyPriority>
    2352:	9b e0       	ldi	r25, 0x0B	; 11
    2354:	9a 9f       	mul	r25, r26
    2356:	d0 01       	movw	r26, r0
    2358:	11 24       	eor	r1, r1
    235a:	af 59       	subi	r26, 0x9F	; 159
    235c:	b8 4e       	sbci	r27, 0xE8	; 232
    235e:	11 96       	adiw	r26, 0x01	; 1
    2360:	0d 90       	ld	r0, X+
    2362:	bc 91       	ld	r27, X
    2364:	a0 2d       	mov	r26, r0
    2366:	b7 83       	std	Z+7, r27	; 0x07
    2368:	a6 83       	std	Z+6, r26	; 0x06
    236a:	16 96       	adiw	r26, 0x06	; 6
    236c:	4d 91       	ld	r20, X+
    236e:	5c 91       	ld	r21, X
    2370:	17 97       	sbiw	r26, 0x07	; 7
    2372:	51 87       	std	Z+9, r21	; 0x09
    2374:	40 87       	std	Z+8, r20	; 0x08
    2376:	16 96       	adiw	r26, 0x06	; 6
    2378:	cd 91       	ld	r28, X+
    237a:	dc 91       	ld	r29, X
    237c:	17 97       	sbiw	r26, 0x07	; 7
    237e:	3d 83       	std	Y+5, r19	; 0x05
    2380:	2c 83       	std	Y+4, r18	; 0x04
    2382:	17 96       	adiw	r26, 0x07	; 7
    2384:	3c 93       	st	X, r19
    2386:	2e 93       	st	-X, r18
    2388:	16 97       	sbiw	r26, 0x06	; 6
    238a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    238c:	9a 9f       	mul	r25, r26
    238e:	d0 01       	movw	r26, r0
    2390:	11 24       	eor	r1, r1
    2392:	af 59       	subi	r26, 0x9F	; 159
    2394:	b8 4e       	sbci	r27, 0xE8	; 232
    2396:	b5 87       	std	Z+13, r27	; 0x0d
    2398:	a4 87       	std	Z+12, r26	; 0x0c
    239a:	9c 91       	ld	r25, X
    239c:	9f 5f       	subi	r25, 0xFF	; 255
    239e:	9c 93       	st	X, r25
    23a0:	22 8d       	ldd	r18, Z+26	; 0x1a
    23a2:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    23a6:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    23aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    23ac:	29 17       	cp	r18, r25
    23ae:	08 f0       	brcs	.+2      	; 0x23b2 <__stack+0x1b3>
    23b0:	4f cf       	rjmp	.-354    	; 0x2250 <__stack+0x51>
    23b2:	51 cf       	rjmp	.-350    	; 0x2256 <__stack+0x57>
    23b4:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    23b8:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    23bc:	e2 8d       	ldd	r30, Z+26	; 0x1a
    23be:	9b e0       	ldi	r25, 0x0B	; 11
    23c0:	e9 9f       	mul	r30, r25
    23c2:	f0 01       	movw	r30, r0
    23c4:	11 24       	eor	r1, r1
    23c6:	ef 59       	subi	r30, 0x9F	; 159
    23c8:	f8 4e       	sbci	r31, 0xE8	; 232
    23ca:	90 81       	ld	r25, Z
    23cc:	92 30       	cpi	r25, 0x02	; 2
    23ce:	08 f0       	brcs	.+2      	; 0x23d2 <__stack+0x1d3>
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 91 19 17 	lds	r25, 0x1719	; 0x801719 <xYieldPending>
    23d6:	91 11       	cpse	r25, r1
    23d8:	16 c0       	rjmp	.+44     	; 0x2406 <__stack+0x207>
    23da:	16 c0       	rjmp	.+44     	; 0x2408 <__stack+0x209>
    23dc:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <xPendedTicks>
    23e0:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <xPendedTicks+0x1>
    23e4:	a0 91 1c 17 	lds	r26, 0x171C	; 0x80171c <xPendedTicks+0x2>
    23e8:	b0 91 1d 17 	lds	r27, 0x171D	; 0x80171d <xPendedTicks+0x3>
    23ec:	01 96       	adiw	r24, 0x01	; 1
    23ee:	a1 1d       	adc	r26, r1
    23f0:	b1 1d       	adc	r27, r1
    23f2:	80 93 1a 17 	sts	0x171A, r24	; 0x80171a <xPendedTicks>
    23f6:	90 93 1b 17 	sts	0x171B, r25	; 0x80171b <xPendedTicks+0x1>
    23fa:	a0 93 1c 17 	sts	0x171C, r26	; 0x80171c <xPendedTicks+0x2>
    23fe:	b0 93 1d 17 	sts	0x171D, r27	; 0x80171d <xPendedTicks+0x3>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <__stack+0x209>
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	08 95       	ret

00002416 <xTaskResumeAll>:
    2416:	cf 92       	push	r12
    2418:	df 92       	push	r13
    241a:	ef 92       	push	r14
    241c:	ff 92       	push	r15
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	0f 92       	push	r0
    2428:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    242c:	81 50       	subi	r24, 0x01	; 1
    242e:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxSchedulerSuspended>
    2432:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    2436:	81 11       	cpse	r24, r1
    2438:	be c0       	rjmp	.+380    	; 0x25b6 <xTaskResumeAll+0x1a0>
    243a:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <uxCurrentNumberOfTasks>
    243e:	81 11       	cpse	r24, r1
    2440:	88 c0       	rjmp	.+272    	; 0x2552 <xTaskResumeAll+0x13c>
    2442:	bc c0       	rjmp	.+376    	; 0x25bc <xTaskResumeAll+0x1a6>
    2444:	e0 91 43 17 	lds	r30, 0x1743	; 0x801743 <xPendingReadyList+0x7>
    2448:	f0 91 44 17 	lds	r31, 0x1744	; 0x801744 <xPendingReadyList+0x8>
    244c:	00 84       	ldd	r0, Z+8	; 0x08
    244e:	f1 85       	ldd	r31, Z+9	; 0x09
    2450:	e0 2d       	mov	r30, r0
    2452:	a0 8d       	ldd	r26, Z+24	; 0x18
    2454:	b1 8d       	ldd	r27, Z+25	; 0x19
    2456:	c2 89       	ldd	r28, Z+18	; 0x12
    2458:	d3 89       	ldd	r29, Z+19	; 0x13
    245a:	84 89       	ldd	r24, Z+20	; 0x14
    245c:	95 89       	ldd	r25, Z+21	; 0x15
    245e:	9f 83       	std	Y+7, r25	; 0x07
    2460:	8e 83       	std	Y+6, r24	; 0x06
    2462:	c4 89       	ldd	r28, Z+20	; 0x14
    2464:	d5 89       	ldd	r29, Z+21	; 0x15
    2466:	82 89       	ldd	r24, Z+18	; 0x12
    2468:	93 89       	ldd	r25, Z+19	; 0x13
    246a:	9d 83       	std	Y+5, r25	; 0x05
    246c:	8c 83       	std	Y+4, r24	; 0x04
    246e:	11 96       	adiw	r26, 0x01	; 1
    2470:	2d 91       	ld	r18, X+
    2472:	3c 91       	ld	r19, X
    2474:	12 97       	sbiw	r26, 0x02	; 2
    2476:	cf 01       	movw	r24, r30
    2478:	0e 96       	adiw	r24, 0x0e	; 14
    247a:	28 17       	cp	r18, r24
    247c:	39 07       	cpc	r19, r25
    247e:	31 f4       	brne	.+12     	; 0x248c <xTaskResumeAll+0x76>
    2480:	84 89       	ldd	r24, Z+20	; 0x14
    2482:	95 89       	ldd	r25, Z+21	; 0x15
    2484:	12 96       	adiw	r26, 0x02	; 2
    2486:	9c 93       	st	X, r25
    2488:	8e 93       	st	-X, r24
    248a:	11 97       	sbiw	r26, 0x01	; 1
    248c:	11 8e       	std	Z+25, r1	; 0x19
    248e:	10 8e       	std	Z+24, r1	; 0x18
    2490:	8c 91       	ld	r24, X
    2492:	81 50       	subi	r24, 0x01	; 1
    2494:	8c 93       	st	X, r24
    2496:	a4 85       	ldd	r26, Z+12	; 0x0c
    2498:	b5 85       	ldd	r27, Z+13	; 0x0d
    249a:	c6 81       	ldd	r28, Z+6	; 0x06
    249c:	d7 81       	ldd	r29, Z+7	; 0x07
    249e:	80 85       	ldd	r24, Z+8	; 0x08
    24a0:	91 85       	ldd	r25, Z+9	; 0x09
    24a2:	9f 83       	std	Y+7, r25	; 0x07
    24a4:	8e 83       	std	Y+6, r24	; 0x06
    24a6:	c0 85       	ldd	r28, Z+8	; 0x08
    24a8:	d1 85       	ldd	r29, Z+9	; 0x09
    24aa:	86 81       	ldd	r24, Z+6	; 0x06
    24ac:	97 81       	ldd	r25, Z+7	; 0x07
    24ae:	9d 83       	std	Y+5, r25	; 0x05
    24b0:	8c 83       	std	Y+4, r24	; 0x04
    24b2:	11 96       	adiw	r26, 0x01	; 1
    24b4:	8d 91       	ld	r24, X+
    24b6:	9c 91       	ld	r25, X
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	9f 01       	movw	r18, r30
    24bc:	2e 5f       	subi	r18, 0xFE	; 254
    24be:	3f 4f       	sbci	r19, 0xFF	; 255
    24c0:	82 17       	cp	r24, r18
    24c2:	93 07       	cpc	r25, r19
    24c4:	31 f4       	brne	.+12     	; 0x24d2 <xTaskResumeAll+0xbc>
    24c6:	80 85       	ldd	r24, Z+8	; 0x08
    24c8:	91 85       	ldd	r25, Z+9	; 0x09
    24ca:	12 96       	adiw	r26, 0x02	; 2
    24cc:	9c 93       	st	X, r25
    24ce:	8e 93       	st	-X, r24
    24d0:	11 97       	sbiw	r26, 0x01	; 1
    24d2:	15 86       	std	Z+13, r1	; 0x0d
    24d4:	14 86       	std	Z+12, r1	; 0x0c
    24d6:	8c 91       	ld	r24, X
    24d8:	81 50       	subi	r24, 0x01	; 1
    24da:	8c 93       	st	X, r24
    24dc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24de:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    24e2:	8a 17       	cp	r24, r26
    24e4:	10 f4       	brcc	.+4      	; 0x24ea <xTaskResumeAll+0xd4>
    24e6:	a0 93 1f 17 	sts	0x171F, r26	; 0x80171f <uxTopReadyPriority>
    24ea:	8b e0       	ldi	r24, 0x0B	; 11
    24ec:	8a 9f       	mul	r24, r26
    24ee:	d0 01       	movw	r26, r0
    24f0:	11 24       	eor	r1, r1
    24f2:	af 59       	subi	r26, 0x9F	; 159
    24f4:	b8 4e       	sbci	r27, 0xE8	; 232
    24f6:	11 96       	adiw	r26, 0x01	; 1
    24f8:	0d 90       	ld	r0, X+
    24fa:	bc 91       	ld	r27, X
    24fc:	a0 2d       	mov	r26, r0
    24fe:	b7 83       	std	Z+7, r27	; 0x07
    2500:	a6 83       	std	Z+6, r26	; 0x06
    2502:	16 96       	adiw	r26, 0x06	; 6
    2504:	4d 91       	ld	r20, X+
    2506:	5c 91       	ld	r21, X
    2508:	17 97       	sbiw	r26, 0x07	; 7
    250a:	51 87       	std	Z+9, r21	; 0x09
    250c:	40 87       	std	Z+8, r20	; 0x08
    250e:	16 96       	adiw	r26, 0x06	; 6
    2510:	cd 91       	ld	r28, X+
    2512:	dc 91       	ld	r29, X
    2514:	17 97       	sbiw	r26, 0x07	; 7
    2516:	3d 83       	std	Y+5, r19	; 0x05
    2518:	2c 83       	std	Y+4, r18	; 0x04
    251a:	17 96       	adiw	r26, 0x07	; 7
    251c:	3c 93       	st	X, r19
    251e:	2e 93       	st	-X, r18
    2520:	16 97       	sbiw	r26, 0x06	; 6
    2522:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2524:	8a 9f       	mul	r24, r26
    2526:	d0 01       	movw	r26, r0
    2528:	11 24       	eor	r1, r1
    252a:	af 59       	subi	r26, 0x9F	; 159
    252c:	b8 4e       	sbci	r27, 0xE8	; 232
    252e:	b5 87       	std	Z+13, r27	; 0x0d
    2530:	a4 87       	std	Z+12, r26	; 0x0c
    2532:	8c 91       	ld	r24, X
    2534:	8f 5f       	subi	r24, 0xFF	; 255
    2536:	8c 93       	st	X, r24
    2538:	92 8d       	ldd	r25, Z+26	; 0x1a
    253a:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    253e:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2542:	5a 96       	adiw	r26, 0x1a	; 26
    2544:	8c 91       	ld	r24, X
    2546:	98 17       	cp	r25, r24
    2548:	30 f0       	brcs	.+12     	; 0x2556 <xTaskResumeAll+0x140>
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <xTaskResumeAll+0x140>
    2552:	e0 e0       	ldi	r30, 0x00	; 0
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <xPendingReadyList>
    255a:	81 11       	cpse	r24, r1
    255c:	73 cf       	rjmp	.-282    	; 0x2444 <xTaskResumeAll+0x2e>
    255e:	ef 2b       	or	r30, r31
    2560:	09 f0       	breq	.+2      	; 0x2564 <xTaskResumeAll+0x14e>
    2562:	7d db       	rcall	.-2310   	; 0x1c5e <prvResetNextTaskUnblockTime>
    2564:	c0 90 1a 17 	lds	r12, 0x171A	; 0x80171a <xPendedTicks>
    2568:	d0 90 1b 17 	lds	r13, 0x171B	; 0x80171b <xPendedTicks+0x1>
    256c:	e0 90 1c 17 	lds	r14, 0x171C	; 0x80171c <xPendedTicks+0x2>
    2570:	f0 90 1d 17 	lds	r15, 0x171D	; 0x80171d <xPendedTicks+0x3>
    2574:	c1 14       	cp	r12, r1
    2576:	d1 04       	cpc	r13, r1
    2578:	e1 04       	cpc	r14, r1
    257a:	f1 04       	cpc	r15, r1
    257c:	a1 f0       	breq	.+40     	; 0x25a6 <xTaskResumeAll+0x190>
    257e:	1f de       	rcall	.-962    	; 0x21be <xTaskIncrementTick>
    2580:	88 23       	and	r24, r24
    2582:	19 f0       	breq	.+6      	; 0x258a <xTaskResumeAll+0x174>
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	c8 1a       	sub	r12, r24
    258e:	d1 08       	sbc	r13, r1
    2590:	e1 08       	sbc	r14, r1
    2592:	f1 08       	sbc	r15, r1
    2594:	a1 f7       	brne	.-24     	; 0x257e <xTaskResumeAll+0x168>
    2596:	10 92 1a 17 	sts	0x171A, r1	; 0x80171a <xPendedTicks>
    259a:	10 92 1b 17 	sts	0x171B, r1	; 0x80171b <xPendedTicks+0x1>
    259e:	10 92 1c 17 	sts	0x171C, r1	; 0x80171c <xPendedTicks+0x2>
    25a2:	10 92 1d 17 	sts	0x171D, r1	; 0x80171d <xPendedTicks+0x3>
    25a6:	80 91 19 17 	lds	r24, 0x1719	; 0x801719 <xYieldPending>
    25aa:	88 23       	and	r24, r24
    25ac:	31 f0       	breq	.+12     	; 0x25ba <xTaskResumeAll+0x1a4>
    25ae:	0e 94 9f 06 	call	0xd3e	; 0xd3e <vPortYield>
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	03 c0       	rjmp	.+6      	; 0x25bc <xTaskResumeAll+0x1a6>
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	01 c0       	rjmp	.+2      	; 0x25bc <xTaskResumeAll+0x1a6>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	0f 90       	pop	r0
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	df 90       	pop	r13
    25ca:	cf 90       	pop	r12
    25cc:	08 95       	ret

000025ce <xTaskDelayUntil>:
    25ce:	8f 92       	push	r8
    25d0:	9f 92       	push	r9
    25d2:	af 92       	push	r10
    25d4:	bf 92       	push	r11
    25d6:	cf 92       	push	r12
    25d8:	df 92       	push	r13
    25da:	ef 92       	push	r14
    25dc:	ff 92       	push	r15
    25de:	1f 93       	push	r17
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	ec 01       	movw	r28, r24
    25e6:	6a 01       	movw	r12, r20
    25e8:	7b 01       	movw	r14, r22
    25ea:	d5 dd       	rcall	.-1110   	; 0x2196 <vTaskSuspendAll>
    25ec:	80 90 20 17 	lds	r8, 0x1720	; 0x801720 <xTickCount>
    25f0:	90 90 21 17 	lds	r9, 0x1721	; 0x801721 <xTickCount+0x1>
    25f4:	a0 90 22 17 	lds	r10, 0x1722	; 0x801722 <xTickCount+0x2>
    25f8:	b0 90 23 17 	lds	r11, 0x1723	; 0x801723 <xTickCount+0x3>
    25fc:	88 81       	ld	r24, Y
    25fe:	99 81       	ldd	r25, Y+1	; 0x01
    2600:	aa 81       	ldd	r26, Y+2	; 0x02
    2602:	bb 81       	ldd	r27, Y+3	; 0x03
    2604:	ac 01       	movw	r20, r24
    2606:	bd 01       	movw	r22, r26
    2608:	4c 0d       	add	r20, r12
    260a:	5d 1d       	adc	r21, r13
    260c:	6e 1d       	adc	r22, r14
    260e:	7f 1d       	adc	r23, r15
    2610:	88 16       	cp	r8, r24
    2612:	99 06       	cpc	r9, r25
    2614:	aa 06       	cpc	r10, r26
    2616:	bb 06       	cpc	r11, r27
    2618:	60 f4       	brcc	.+24     	; 0x2632 <xTaskDelayUntil+0x64>
    261a:	48 17       	cp	r20, r24
    261c:	59 07       	cpc	r21, r25
    261e:	6a 07       	cpc	r22, r26
    2620:	7b 07       	cpc	r23, r27
    2622:	98 f4       	brcc	.+38     	; 0x264a <xTaskDelayUntil+0x7c>
    2624:	84 16       	cp	r8, r20
    2626:	95 06       	cpc	r9, r21
    2628:	a6 06       	cpc	r10, r22
    262a:	b7 06       	cpc	r11, r23
    262c:	80 f0       	brcs	.+32     	; 0x264e <xTaskDelayUntil+0x80>
    262e:	10 e0       	ldi	r17, 0x00	; 0
    2630:	13 c0       	rjmp	.+38     	; 0x2658 <xTaskDelayUntil+0x8a>
    2632:	48 17       	cp	r20, r24
    2634:	59 07       	cpc	r21, r25
    2636:	6a 07       	cpc	r22, r26
    2638:	7b 07       	cpc	r23, r27
    263a:	58 f0       	brcs	.+22     	; 0x2652 <xTaskDelayUntil+0x84>
    263c:	84 16       	cp	r8, r20
    263e:	95 06       	cpc	r9, r21
    2640:	a6 06       	cpc	r10, r22
    2642:	b7 06       	cpc	r11, r23
    2644:	40 f0       	brcs	.+16     	; 0x2656 <xTaskDelayUntil+0x88>
    2646:	10 e0       	ldi	r17, 0x00	; 0
    2648:	07 c0       	rjmp	.+14     	; 0x2658 <xTaskDelayUntil+0x8a>
    264a:	10 e0       	ldi	r17, 0x00	; 0
    264c:	05 c0       	rjmp	.+10     	; 0x2658 <xTaskDelayUntil+0x8a>
    264e:	11 e0       	ldi	r17, 0x01	; 1
    2650:	03 c0       	rjmp	.+6      	; 0x2658 <xTaskDelayUntil+0x8a>
    2652:	11 e0       	ldi	r17, 0x01	; 1
    2654:	01 c0       	rjmp	.+2      	; 0x2658 <xTaskDelayUntil+0x8a>
    2656:	11 e0       	ldi	r17, 0x01	; 1
    2658:	48 83       	st	Y, r20
    265a:	59 83       	std	Y+1, r21	; 0x01
    265c:	6a 83       	std	Y+2, r22	; 0x02
    265e:	7b 83       	std	Y+3, r23	; 0x03
    2660:	11 23       	and	r17, r17
    2662:	41 f0       	breq	.+16     	; 0x2674 <xTaskDelayUntil+0xa6>
    2664:	cb 01       	movw	r24, r22
    2666:	ba 01       	movw	r22, r20
    2668:	68 19       	sub	r22, r8
    266a:	79 09       	sbc	r23, r9
    266c:	8a 09       	sbc	r24, r10
    266e:	9b 09       	sbc	r25, r11
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	6b dc       	rcall	.-1834   	; 0x1f4a <prvAddCurrentTaskToDelayedList>
    2674:	d0 de       	rcall	.-608    	; 0x2416 <xTaskResumeAll>
    2676:	81 11       	cpse	r24, r1
    2678:	02 c0       	rjmp	.+4      	; 0x267e <xTaskDelayUntil+0xb0>
    267a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <vPortYield>
    267e:	81 2f       	mov	r24, r17
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	08 95       	ret

00002698 <vTaskDelay>:
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	6b 01       	movw	r12, r22
    26a2:	7c 01       	movw	r14, r24
    26a4:	67 2b       	or	r22, r23
    26a6:	68 2b       	or	r22, r24
    26a8:	69 2b       	or	r22, r25
    26aa:	39 f0       	breq	.+14     	; 0x26ba <vTaskDelay+0x22>
    26ac:	74 dd       	rcall	.-1304   	; 0x2196 <vTaskSuspendAll>
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	c7 01       	movw	r24, r14
    26b2:	b6 01       	movw	r22, r12
    26b4:	4a dc       	rcall	.-1900   	; 0x1f4a <prvAddCurrentTaskToDelayedList>
    26b6:	af de       	rcall	.-674    	; 0x2416 <xTaskResumeAll>
    26b8:	01 c0       	rjmp	.+2      	; 0x26bc <vTaskDelay+0x24>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	81 11       	cpse	r24, r1
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <vTaskDelay+0x2c>
    26c0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <vPortYield>
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	cf 90       	pop	r12
    26cc:	08 95       	ret

000026ce <vTaskSwitchContext>:
    26ce:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    26d2:	88 23       	and	r24, r24
    26d4:	21 f0       	breq	.+8      	; 0x26de <vTaskSwitchContext+0x10>
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    26dc:	08 95       	ret
    26de:	10 92 19 17 	sts	0x1719, r1	; 0x801719 <xYieldPending>
    26e2:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    26e6:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    26ea:	20 81       	ld	r18, Z
    26ec:	31 81       	ldd	r19, Z+1	; 0x01
    26ee:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    26f2:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    26f6:	83 8d       	ldd	r24, Z+27	; 0x1b
    26f8:	94 8d       	ldd	r25, Z+28	; 0x1c
    26fa:	82 17       	cp	r24, r18
    26fc:	93 07       	cpc	r25, r19
    26fe:	60 f0       	brcs	.+24     	; 0x2718 <vTaskSwitchContext+0x4a>
    2700:	60 91 cf 17 	lds	r22, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2704:	70 91 d0 17 	lds	r23, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2708:	63 5e       	subi	r22, 0xE3	; 227
    270a:	7f 4f       	sbci	r23, 0xFF	; 255
    270c:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2710:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2714:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <vApplicationStackOverflowHook>
    2718:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <vTaskSwitchContext+0x52>
    271e:	81 50       	subi	r24, 0x01	; 1
    2720:	28 2f       	mov	r18, r24
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	9b e0       	ldi	r25, 0x0B	; 11
    2726:	92 9f       	mul	r25, r18
    2728:	f0 01       	movw	r30, r0
    272a:	93 9f       	mul	r25, r19
    272c:	f0 0d       	add	r31, r0
    272e:	11 24       	eor	r1, r1
    2730:	ef 59       	subi	r30, 0x9F	; 159
    2732:	f8 4e       	sbci	r31, 0xE8	; 232
    2734:	90 81       	ld	r25, Z
    2736:	99 23       	and	r25, r25
    2738:	91 f3       	breq	.-28     	; 0x271e <vTaskSwitchContext+0x50>
    273a:	9b e0       	ldi	r25, 0x0B	; 11
    273c:	92 9f       	mul	r25, r18
    273e:	a0 01       	movw	r20, r0
    2740:	93 9f       	mul	r25, r19
    2742:	50 0d       	add	r21, r0
    2744:	11 24       	eor	r1, r1
    2746:	df 01       	movw	r26, r30
    2748:	01 80       	ldd	r0, Z+1	; 0x01
    274a:	f2 81       	ldd	r31, Z+2	; 0x02
    274c:	e0 2d       	mov	r30, r0
    274e:	04 80       	ldd	r0, Z+4	; 0x04
    2750:	f5 81       	ldd	r31, Z+5	; 0x05
    2752:	e0 2d       	mov	r30, r0
    2754:	12 96       	adiw	r26, 0x02	; 2
    2756:	fc 93       	st	X, r31
    2758:	ee 93       	st	-X, r30
    275a:	11 97       	sbiw	r26, 0x01	; 1
    275c:	4c 59       	subi	r20, 0x9C	; 156
    275e:	58 4e       	sbci	r21, 0xE8	; 232
    2760:	e4 17       	cp	r30, r20
    2762:	f5 07       	cpc	r31, r21
    2764:	29 f4       	brne	.+10     	; 0x2770 <vTaskSwitchContext+0xa2>
    2766:	44 81       	ldd	r20, Z+4	; 0x04
    2768:	55 81       	ldd	r21, Z+5	; 0x05
    276a:	fd 01       	movw	r30, r26
    276c:	52 83       	std	Z+2, r21	; 0x02
    276e:	41 83       	std	Z+1, r20	; 0x01
    2770:	9b e0       	ldi	r25, 0x0B	; 11
    2772:	92 9f       	mul	r25, r18
    2774:	f0 01       	movw	r30, r0
    2776:	93 9f       	mul	r25, r19
    2778:	f0 0d       	add	r31, r0
    277a:	11 24       	eor	r1, r1
    277c:	ef 59       	subi	r30, 0x9F	; 159
    277e:	f8 4e       	sbci	r31, 0xE8	; 232
    2780:	01 80       	ldd	r0, Z+1	; 0x01
    2782:	f2 81       	ldd	r31, Z+2	; 0x02
    2784:	e0 2d       	mov	r30, r0
    2786:	20 85       	ldd	r18, Z+8	; 0x08
    2788:	31 85       	ldd	r19, Z+9	; 0x09
    278a:	30 93 d0 17 	sts	0x17D0, r19	; 0x8017d0 <pxCurrentTCB+0x1>
    278e:	20 93 cf 17 	sts	0x17CF, r18	; 0x8017cf <pxCurrentTCB>
    2792:	80 93 1f 17 	sts	0x171F, r24	; 0x80171f <uxTopReadyPriority>
    2796:	08 95       	ret

00002798 <vTaskPlaceOnEventList>:
    2798:	cf 92       	push	r12
    279a:	df 92       	push	r13
    279c:	ef 92       	push	r14
    279e:	ff 92       	push	r15
    27a0:	6a 01       	movw	r12, r20
    27a2:	7b 01       	movw	r14, r22
    27a4:	60 91 cf 17 	lds	r22, 0x17CF	; 0x8017cf <pxCurrentTCB>
    27a8:	70 91 d0 17 	lds	r23, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    27ac:	62 5f       	subi	r22, 0xF2	; 242
    27ae:	7f 4f       	sbci	r23, 0xFF	; 255
    27b0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsert>
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	c7 01       	movw	r24, r14
    27b8:	b6 01       	movw	r22, r12
    27ba:	c7 db       	rcall	.-2162   	; 0x1f4a <prvAddCurrentTaskToDelayedList>
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	cf 90       	pop	r12
    27c4:	08 95       	ret

000027c6 <vTaskPlaceOnUnorderedEventList>:
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	fc 01       	movw	r30, r24
    27d0:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    27d4:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    27d8:	70 68       	ori	r23, 0x80	; 128
    27da:	1e 96       	adiw	r26, 0x0e	; 14
    27dc:	4d 93       	st	X+, r20
    27de:	5d 93       	st	X+, r21
    27e0:	6d 93       	st	X+, r22
    27e2:	7c 93       	st	X, r23
    27e4:	51 97       	sbiw	r26, 0x11	; 17
    27e6:	a1 81       	ldd	r26, Z+1	; 0x01
    27e8:	b2 81       	ldd	r27, Z+2	; 0x02
    27ea:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    27ee:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    27f2:	bb 8b       	std	Y+19, r27	; 0x13
    27f4:	aa 8b       	std	Y+18, r26	; 0x12
    27f6:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    27fa:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    27fe:	16 96       	adiw	r26, 0x06	; 6
    2800:	8d 91       	ld	r24, X+
    2802:	9c 91       	ld	r25, X
    2804:	17 97       	sbiw	r26, 0x07	; 7
    2806:	9d 8b       	std	Y+21, r25	; 0x15
    2808:	8c 8b       	std	Y+20, r24	; 0x14
    280a:	16 96       	adiw	r26, 0x06	; 6
    280c:	cd 91       	ld	r28, X+
    280e:	dc 91       	ld	r29, X
    2810:	17 97       	sbiw	r26, 0x07	; 7
    2812:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2816:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    281a:	0e 96       	adiw	r24, 0x0e	; 14
    281c:	9d 83       	std	Y+5, r25	; 0x05
    281e:	8c 83       	std	Y+4, r24	; 0x04
    2820:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2824:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2828:	0e 96       	adiw	r24, 0x0e	; 14
    282a:	17 96       	adiw	r26, 0x07	; 7
    282c:	9c 93       	st	X, r25
    282e:	8e 93       	st	-X, r24
    2830:	16 97       	sbiw	r26, 0x06	; 6
    2832:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2836:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    283a:	59 96       	adiw	r26, 0x19	; 25
    283c:	fc 93       	st	X, r31
    283e:	ee 93       	st	-X, r30
    2840:	58 97       	sbiw	r26, 0x18	; 24
    2842:	80 81       	ld	r24, Z
    2844:	8f 5f       	subi	r24, 0xFF	; 255
    2846:	80 83       	st	Z, r24
    2848:	41 e0       	ldi	r20, 0x01	; 1
    284a:	c9 01       	movw	r24, r18
    284c:	b8 01       	movw	r22, r16
    284e:	7d db       	rcall	.-2310   	; 0x1f4a <prvAddCurrentTaskToDelayedList>
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	08 95       	ret

0000285a <vTaskPlaceOnEventListRestricted>:
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	fc 01       	movw	r30, r24
    2860:	cb 01       	movw	r24, r22
    2862:	ba 01       	movw	r22, r20
    2864:	a1 81       	ldd	r26, Z+1	; 0x01
    2866:	b2 81       	ldd	r27, Z+2	; 0x02
    2868:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    286c:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2870:	bb 8b       	std	Y+19, r27	; 0x13
    2872:	aa 8b       	std	Y+18, r26	; 0x12
    2874:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2878:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    287c:	16 96       	adiw	r26, 0x06	; 6
    287e:	4d 91       	ld	r20, X+
    2880:	5c 91       	ld	r21, X
    2882:	17 97       	sbiw	r26, 0x07	; 7
    2884:	5d 8b       	std	Y+21, r21	; 0x15
    2886:	4c 8b       	std	Y+20, r20	; 0x14
    2888:	16 96       	adiw	r26, 0x06	; 6
    288a:	cd 91       	ld	r28, X+
    288c:	dc 91       	ld	r29, X
    288e:	17 97       	sbiw	r26, 0x07	; 7
    2890:	40 91 cf 17 	lds	r20, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2894:	50 91 d0 17 	lds	r21, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2898:	42 5f       	subi	r20, 0xF2	; 242
    289a:	5f 4f       	sbci	r21, 0xFF	; 255
    289c:	5d 83       	std	Y+5, r21	; 0x05
    289e:	4c 83       	std	Y+4, r20	; 0x04
    28a0:	40 91 cf 17 	lds	r20, 0x17CF	; 0x8017cf <pxCurrentTCB>
    28a4:	50 91 d0 17 	lds	r21, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    28a8:	42 5f       	subi	r20, 0xF2	; 242
    28aa:	5f 4f       	sbci	r21, 0xFF	; 255
    28ac:	17 96       	adiw	r26, 0x07	; 7
    28ae:	5c 93       	st	X, r21
    28b0:	4e 93       	st	-X, r20
    28b2:	16 97       	sbiw	r26, 0x06	; 6
    28b4:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    28b8:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    28bc:	59 96       	adiw	r26, 0x19	; 25
    28be:	fc 93       	st	X, r31
    28c0:	ee 93       	st	-X, r30
    28c2:	58 97       	sbiw	r26, 0x18	; 24
    28c4:	30 81       	ld	r19, Z
    28c6:	3f 5f       	subi	r19, 0xFF	; 255
    28c8:	30 83       	st	Z, r19
    28ca:	22 23       	and	r18, r18
    28cc:	19 f0       	breq	.+6      	; 0x28d4 <vTaskPlaceOnEventListRestricted+0x7a>
    28ce:	6f ef       	ldi	r22, 0xFF	; 255
    28d0:	7f ef       	ldi	r23, 0xFF	; 255
    28d2:	cb 01       	movw	r24, r22
    28d4:	42 2f       	mov	r20, r18
    28d6:	39 db       	rcall	.-2446   	; 0x1f4a <prvAddCurrentTaskToDelayedList>
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	08 95       	ret

000028de <xTaskRemoveFromEventList>:
    28de:	cf 93       	push	r28
    28e0:	df 93       	push	r29
    28e2:	dc 01       	movw	r26, r24
    28e4:	17 96       	adiw	r26, 0x07	; 7
    28e6:	ed 91       	ld	r30, X+
    28e8:	fc 91       	ld	r31, X
    28ea:	18 97       	sbiw	r26, 0x08	; 8
    28ec:	00 84       	ldd	r0, Z+8	; 0x08
    28ee:	f1 85       	ldd	r31, Z+9	; 0x09
    28f0:	e0 2d       	mov	r30, r0
    28f2:	a0 8d       	ldd	r26, Z+24	; 0x18
    28f4:	b1 8d       	ldd	r27, Z+25	; 0x19
    28f6:	c2 89       	ldd	r28, Z+18	; 0x12
    28f8:	d3 89       	ldd	r29, Z+19	; 0x13
    28fa:	84 89       	ldd	r24, Z+20	; 0x14
    28fc:	95 89       	ldd	r25, Z+21	; 0x15
    28fe:	9f 83       	std	Y+7, r25	; 0x07
    2900:	8e 83       	std	Y+6, r24	; 0x06
    2902:	c4 89       	ldd	r28, Z+20	; 0x14
    2904:	d5 89       	ldd	r29, Z+21	; 0x15
    2906:	82 89       	ldd	r24, Z+18	; 0x12
    2908:	93 89       	ldd	r25, Z+19	; 0x13
    290a:	9d 83       	std	Y+5, r25	; 0x05
    290c:	8c 83       	std	Y+4, r24	; 0x04
    290e:	11 96       	adiw	r26, 0x01	; 1
    2910:	8d 91       	ld	r24, X+
    2912:	9c 91       	ld	r25, X
    2914:	12 97       	sbiw	r26, 0x02	; 2
    2916:	9f 01       	movw	r18, r30
    2918:	22 5f       	subi	r18, 0xF2	; 242
    291a:	3f 4f       	sbci	r19, 0xFF	; 255
    291c:	82 17       	cp	r24, r18
    291e:	93 07       	cpc	r25, r19
    2920:	31 f4       	brne	.+12     	; 0x292e <xTaskRemoveFromEventList+0x50>
    2922:	84 89       	ldd	r24, Z+20	; 0x14
    2924:	95 89       	ldd	r25, Z+21	; 0x15
    2926:	12 96       	adiw	r26, 0x02	; 2
    2928:	9c 93       	st	X, r25
    292a:	8e 93       	st	-X, r24
    292c:	11 97       	sbiw	r26, 0x01	; 1
    292e:	11 8e       	std	Z+25, r1	; 0x19
    2930:	10 8e       	std	Z+24, r1	; 0x18
    2932:	8c 91       	ld	r24, X
    2934:	81 50       	subi	r24, 0x01	; 1
    2936:	8c 93       	st	X, r24
    2938:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    293c:	81 11       	cpse	r24, r1
    293e:	52 c0       	rjmp	.+164    	; 0x29e4 <xTaskRemoveFromEventList+0x106>
    2940:	a4 85       	ldd	r26, Z+12	; 0x0c
    2942:	b5 85       	ldd	r27, Z+13	; 0x0d
    2944:	c6 81       	ldd	r28, Z+6	; 0x06
    2946:	d7 81       	ldd	r29, Z+7	; 0x07
    2948:	80 85       	ldd	r24, Z+8	; 0x08
    294a:	91 85       	ldd	r25, Z+9	; 0x09
    294c:	9f 83       	std	Y+7, r25	; 0x07
    294e:	8e 83       	std	Y+6, r24	; 0x06
    2950:	c0 85       	ldd	r28, Z+8	; 0x08
    2952:	d1 85       	ldd	r29, Z+9	; 0x09
    2954:	86 81       	ldd	r24, Z+6	; 0x06
    2956:	97 81       	ldd	r25, Z+7	; 0x07
    2958:	9d 83       	std	Y+5, r25	; 0x05
    295a:	8c 83       	std	Y+4, r24	; 0x04
    295c:	11 96       	adiw	r26, 0x01	; 1
    295e:	8d 91       	ld	r24, X+
    2960:	9c 91       	ld	r25, X
    2962:	12 97       	sbiw	r26, 0x02	; 2
    2964:	9f 01       	movw	r18, r30
    2966:	2e 5f       	subi	r18, 0xFE	; 254
    2968:	3f 4f       	sbci	r19, 0xFF	; 255
    296a:	82 17       	cp	r24, r18
    296c:	93 07       	cpc	r25, r19
    296e:	31 f4       	brne	.+12     	; 0x297c <xTaskRemoveFromEventList+0x9e>
    2970:	80 85       	ldd	r24, Z+8	; 0x08
    2972:	91 85       	ldd	r25, Z+9	; 0x09
    2974:	12 96       	adiw	r26, 0x02	; 2
    2976:	9c 93       	st	X, r25
    2978:	8e 93       	st	-X, r24
    297a:	11 97       	sbiw	r26, 0x01	; 1
    297c:	15 86       	std	Z+13, r1	; 0x0d
    297e:	14 86       	std	Z+12, r1	; 0x0c
    2980:	8c 91       	ld	r24, X
    2982:	81 50       	subi	r24, 0x01	; 1
    2984:	8c 93       	st	X, r24
    2986:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2988:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    298c:	8a 17       	cp	r24, r26
    298e:	10 f4       	brcc	.+4      	; 0x2994 <xTaskRemoveFromEventList+0xb6>
    2990:	a0 93 1f 17 	sts	0x171F, r26	; 0x80171f <uxTopReadyPriority>
    2994:	8b e0       	ldi	r24, 0x0B	; 11
    2996:	8a 9f       	mul	r24, r26
    2998:	d0 01       	movw	r26, r0
    299a:	11 24       	eor	r1, r1
    299c:	af 59       	subi	r26, 0x9F	; 159
    299e:	b8 4e       	sbci	r27, 0xE8	; 232
    29a0:	11 96       	adiw	r26, 0x01	; 1
    29a2:	0d 90       	ld	r0, X+
    29a4:	bc 91       	ld	r27, X
    29a6:	a0 2d       	mov	r26, r0
    29a8:	b7 83       	std	Z+7, r27	; 0x07
    29aa:	a6 83       	std	Z+6, r26	; 0x06
    29ac:	16 96       	adiw	r26, 0x06	; 6
    29ae:	4d 91       	ld	r20, X+
    29b0:	5c 91       	ld	r21, X
    29b2:	17 97       	sbiw	r26, 0x07	; 7
    29b4:	51 87       	std	Z+9, r21	; 0x09
    29b6:	40 87       	std	Z+8, r20	; 0x08
    29b8:	16 96       	adiw	r26, 0x06	; 6
    29ba:	cd 91       	ld	r28, X+
    29bc:	dc 91       	ld	r29, X
    29be:	17 97       	sbiw	r26, 0x07	; 7
    29c0:	3d 83       	std	Y+5, r19	; 0x05
    29c2:	2c 83       	std	Y+4, r18	; 0x04
    29c4:	17 96       	adiw	r26, 0x07	; 7
    29c6:	3c 93       	st	X, r19
    29c8:	2e 93       	st	-X, r18
    29ca:	16 97       	sbiw	r26, 0x06	; 6
    29cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29ce:	8a 9f       	mul	r24, r26
    29d0:	d0 01       	movw	r26, r0
    29d2:	11 24       	eor	r1, r1
    29d4:	af 59       	subi	r26, 0x9F	; 159
    29d6:	b8 4e       	sbci	r27, 0xE8	; 232
    29d8:	b5 87       	std	Z+13, r27	; 0x0d
    29da:	a4 87       	std	Z+12, r26	; 0x0c
    29dc:	8c 91       	ld	r24, X
    29de:	8f 5f       	subi	r24, 0xFF	; 255
    29e0:	8c 93       	st	X, r24
    29e2:	1c c0       	rjmp	.+56     	; 0x2a1c <xTaskRemoveFromEventList+0x13e>
    29e4:	4c e3       	ldi	r20, 0x3C	; 60
    29e6:	57 e1       	ldi	r21, 0x17	; 23
    29e8:	da 01       	movw	r26, r20
    29ea:	11 96       	adiw	r26, 0x01	; 1
    29ec:	cd 91       	ld	r28, X+
    29ee:	dc 91       	ld	r29, X
    29f0:	12 97       	sbiw	r26, 0x02	; 2
    29f2:	d3 8b       	std	Z+19, r29	; 0x13
    29f4:	c2 8b       	std	Z+18, r28	; 0x12
    29f6:	8e 81       	ldd	r24, Y+6	; 0x06
    29f8:	9f 81       	ldd	r25, Y+7	; 0x07
    29fa:	95 8b       	std	Z+21, r25	; 0x15
    29fc:	84 8b       	std	Z+20, r24	; 0x14
    29fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2a00:	9f 81       	ldd	r25, Y+7	; 0x07
    2a02:	dc 01       	movw	r26, r24
    2a04:	15 96       	adiw	r26, 0x05	; 5
    2a06:	3c 93       	st	X, r19
    2a08:	2e 93       	st	-X, r18
    2a0a:	14 97       	sbiw	r26, 0x04	; 4
    2a0c:	3f 83       	std	Y+7, r19	; 0x07
    2a0e:	2e 83       	std	Y+6, r18	; 0x06
    2a10:	51 8f       	std	Z+25, r21	; 0x19
    2a12:	40 8f       	std	Z+24, r20	; 0x18
    2a14:	da 01       	movw	r26, r20
    2a16:	8c 91       	ld	r24, X
    2a18:	8f 5f       	subi	r24, 0xFF	; 255
    2a1a:	8c 93       	st	X, r24
    2a1c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a1e:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2a22:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2a26:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a28:	89 17       	cp	r24, r25
    2a2a:	20 f4       	brcc	.+8      	; 0x2a34 <xTaskRemoveFromEventList+0x156>
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    2a32:	01 c0       	rjmp	.+2      	; 0x2a36 <xTaskRemoveFromEventList+0x158>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	08 95       	ret

00002a3c <vTaskRemoveFromUnorderedEventList>:
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	dc 01       	movw	r26, r24
    2a42:	70 68       	ori	r23, 0x80	; 128
    2a44:	4d 93       	st	X+, r20
    2a46:	5d 93       	st	X+, r21
    2a48:	6d 93       	st	X+, r22
    2a4a:	7c 93       	st	X, r23
    2a4c:	13 97       	sbiw	r26, 0x03	; 3
    2a4e:	18 96       	adiw	r26, 0x08	; 8
    2a50:	ed 91       	ld	r30, X+
    2a52:	fc 91       	ld	r31, X
    2a54:	19 97       	sbiw	r26, 0x09	; 9
    2a56:	1a 96       	adiw	r26, 0x0a	; 10
    2a58:	4d 91       	ld	r20, X+
    2a5a:	5c 91       	ld	r21, X
    2a5c:	1b 97       	sbiw	r26, 0x0b	; 11
    2a5e:	14 96       	adiw	r26, 0x04	; 4
    2a60:	8d 91       	ld	r24, X+
    2a62:	9c 91       	ld	r25, X
    2a64:	15 97       	sbiw	r26, 0x05	; 5
    2a66:	16 96       	adiw	r26, 0x06	; 6
    2a68:	2d 91       	ld	r18, X+
    2a6a:	3c 91       	ld	r19, X
    2a6c:	17 97       	sbiw	r26, 0x07	; 7
    2a6e:	ec 01       	movw	r28, r24
    2a70:	3f 83       	std	Y+7, r19	; 0x07
    2a72:	2e 83       	std	Y+6, r18	; 0x06
    2a74:	16 96       	adiw	r26, 0x06	; 6
    2a76:	8d 91       	ld	r24, X+
    2a78:	9c 91       	ld	r25, X
    2a7a:	17 97       	sbiw	r26, 0x07	; 7
    2a7c:	14 96       	adiw	r26, 0x04	; 4
    2a7e:	2d 91       	ld	r18, X+
    2a80:	3c 91       	ld	r19, X
    2a82:	15 97       	sbiw	r26, 0x05	; 5
    2a84:	ec 01       	movw	r28, r24
    2a86:	3d 83       	std	Y+5, r19	; 0x05
    2a88:	2c 83       	std	Y+4, r18	; 0x04
    2a8a:	ea 01       	movw	r28, r20
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	a8 17       	cp	r26, r24
    2a92:	b9 07       	cpc	r27, r25
    2a94:	31 f4       	brne	.+12     	; 0x2aa2 <vTaskRemoveFromUnorderedEventList+0x66>
    2a96:	16 96       	adiw	r26, 0x06	; 6
    2a98:	8d 91       	ld	r24, X+
    2a9a:	9c 91       	ld	r25, X
    2a9c:	17 97       	sbiw	r26, 0x07	; 7
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	1b 96       	adiw	r26, 0x0b	; 11
    2aa4:	1c 92       	st	X, r1
    2aa6:	1e 92       	st	-X, r1
    2aa8:	1a 97       	sbiw	r26, 0x0a	; 10
    2aaa:	da 01       	movw	r26, r20
    2aac:	8c 91       	ld	r24, X
    2aae:	81 50       	subi	r24, 0x01	; 1
    2ab0:	8c 93       	st	X, r24
    2ab2:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ab4:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ab6:	c6 81       	ldd	r28, Z+6	; 0x06
    2ab8:	d7 81       	ldd	r29, Z+7	; 0x07
    2aba:	80 85       	ldd	r24, Z+8	; 0x08
    2abc:	91 85       	ldd	r25, Z+9	; 0x09
    2abe:	9f 83       	std	Y+7, r25	; 0x07
    2ac0:	8e 83       	std	Y+6, r24	; 0x06
    2ac2:	c0 85       	ldd	r28, Z+8	; 0x08
    2ac4:	d1 85       	ldd	r29, Z+9	; 0x09
    2ac6:	86 81       	ldd	r24, Z+6	; 0x06
    2ac8:	97 81       	ldd	r25, Z+7	; 0x07
    2aca:	9d 83       	std	Y+5, r25	; 0x05
    2acc:	8c 83       	std	Y+4, r24	; 0x04
    2ace:	11 96       	adiw	r26, 0x01	; 1
    2ad0:	8d 91       	ld	r24, X+
    2ad2:	9c 91       	ld	r25, X
    2ad4:	12 97       	sbiw	r26, 0x02	; 2
    2ad6:	9f 01       	movw	r18, r30
    2ad8:	2e 5f       	subi	r18, 0xFE	; 254
    2ada:	3f 4f       	sbci	r19, 0xFF	; 255
    2adc:	82 17       	cp	r24, r18
    2ade:	93 07       	cpc	r25, r19
    2ae0:	31 f4       	brne	.+12     	; 0x2aee <vTaskRemoveFromUnorderedEventList+0xb2>
    2ae2:	80 85       	ldd	r24, Z+8	; 0x08
    2ae4:	91 85       	ldd	r25, Z+9	; 0x09
    2ae6:	12 96       	adiw	r26, 0x02	; 2
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24
    2aec:	11 97       	sbiw	r26, 0x01	; 1
    2aee:	15 86       	std	Z+13, r1	; 0x0d
    2af0:	14 86       	std	Z+12, r1	; 0x0c
    2af2:	8c 91       	ld	r24, X
    2af4:	81 50       	subi	r24, 0x01	; 1
    2af6:	8c 93       	st	X, r24
    2af8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2afa:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2afe:	8a 17       	cp	r24, r26
    2b00:	10 f4       	brcc	.+4      	; 0x2b06 <vTaskRemoveFromUnorderedEventList+0xca>
    2b02:	a0 93 1f 17 	sts	0x171F, r26	; 0x80171f <uxTopReadyPriority>
    2b06:	8b e0       	ldi	r24, 0x0B	; 11
    2b08:	8a 9f       	mul	r24, r26
    2b0a:	d0 01       	movw	r26, r0
    2b0c:	11 24       	eor	r1, r1
    2b0e:	af 59       	subi	r26, 0x9F	; 159
    2b10:	b8 4e       	sbci	r27, 0xE8	; 232
    2b12:	11 96       	adiw	r26, 0x01	; 1
    2b14:	0d 90       	ld	r0, X+
    2b16:	bc 91       	ld	r27, X
    2b18:	a0 2d       	mov	r26, r0
    2b1a:	b7 83       	std	Z+7, r27	; 0x07
    2b1c:	a6 83       	std	Z+6, r26	; 0x06
    2b1e:	16 96       	adiw	r26, 0x06	; 6
    2b20:	4d 91       	ld	r20, X+
    2b22:	5c 91       	ld	r21, X
    2b24:	17 97       	sbiw	r26, 0x07	; 7
    2b26:	51 87       	std	Z+9, r21	; 0x09
    2b28:	40 87       	std	Z+8, r20	; 0x08
    2b2a:	16 96       	adiw	r26, 0x06	; 6
    2b2c:	cd 91       	ld	r28, X+
    2b2e:	dc 91       	ld	r29, X
    2b30:	17 97       	sbiw	r26, 0x07	; 7
    2b32:	3d 83       	std	Y+5, r19	; 0x05
    2b34:	2c 83       	std	Y+4, r18	; 0x04
    2b36:	17 96       	adiw	r26, 0x07	; 7
    2b38:	3c 93       	st	X, r19
    2b3a:	2e 93       	st	-X, r18
    2b3c:	16 97       	sbiw	r26, 0x06	; 6
    2b3e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b40:	8a 9f       	mul	r24, r26
    2b42:	d0 01       	movw	r26, r0
    2b44:	11 24       	eor	r1, r1
    2b46:	af 59       	subi	r26, 0x9F	; 159
    2b48:	b8 4e       	sbci	r27, 0xE8	; 232
    2b4a:	b5 87       	std	Z+13, r27	; 0x0d
    2b4c:	a4 87       	std	Z+12, r26	; 0x0c
    2b4e:	8c 91       	ld	r24, X
    2b50:	8f 5f       	subi	r24, 0xFF	; 255
    2b52:	8c 93       	st	X, r24
    2b54:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b56:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2b5a:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2b5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b60:	89 17       	cp	r24, r25
    2b62:	18 f4       	brcc	.+6      	; 0x2b6a <vTaskRemoveFromUnorderedEventList+0x12e>
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <vTaskSetTimeOutState>:
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	0f 92       	push	r0
    2b76:	20 91 18 17 	lds	r18, 0x1718	; 0x801718 <xNumOfOverflows>
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	20 83       	st	Z, r18
    2b7e:	40 91 20 17 	lds	r20, 0x1720	; 0x801720 <xTickCount>
    2b82:	50 91 21 17 	lds	r21, 0x1721	; 0x801721 <xTickCount+0x1>
    2b86:	60 91 22 17 	lds	r22, 0x1722	; 0x801722 <xTickCount+0x2>
    2b8a:	70 91 23 17 	lds	r23, 0x1723	; 0x801723 <xTickCount+0x3>
    2b8e:	41 83       	std	Z+1, r20	; 0x01
    2b90:	52 83       	std	Z+2, r21	; 0x02
    2b92:	63 83       	std	Z+3, r22	; 0x03
    2b94:	74 83       	std	Z+4, r23	; 0x04
    2b96:	0f 90       	pop	r0
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	08 95       	ret

00002b9c <vTaskInternalSetTimeOutState>:
    2b9c:	20 91 18 17 	lds	r18, 0x1718	; 0x801718 <xNumOfOverflows>
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	20 83       	st	Z, r18
    2ba4:	40 91 20 17 	lds	r20, 0x1720	; 0x801720 <xTickCount>
    2ba8:	50 91 21 17 	lds	r21, 0x1721	; 0x801721 <xTickCount+0x1>
    2bac:	60 91 22 17 	lds	r22, 0x1722	; 0x801722 <xTickCount+0x2>
    2bb0:	70 91 23 17 	lds	r23, 0x1723	; 0x801723 <xTickCount+0x3>
    2bb4:	41 83       	std	Z+1, r20	; 0x01
    2bb6:	52 83       	std	Z+2, r21	; 0x02
    2bb8:	63 83       	std	Z+3, r22	; 0x03
    2bba:	74 83       	std	Z+4, r23	; 0x04
    2bbc:	08 95       	ret

00002bbe <xTaskCheckForTimeOut>:
    2bbe:	8f 92       	push	r8
    2bc0:	9f 92       	push	r9
    2bc2:	af 92       	push	r10
    2bc4:	bf 92       	push	r11
    2bc6:	cf 92       	push	r12
    2bc8:	df 92       	push	r13
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	cf 93       	push	r28
    2bd4:	df 93       	push	r29
    2bd6:	fb 01       	movw	r30, r22
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	0f 92       	push	r0
    2bde:	c0 90 20 17 	lds	r12, 0x1720	; 0x801720 <xTickCount>
    2be2:	d0 90 21 17 	lds	r13, 0x1721	; 0x801721 <xTickCount+0x1>
    2be6:	e0 90 22 17 	lds	r14, 0x1722	; 0x801722 <xTickCount+0x2>
    2bea:	f0 90 23 17 	lds	r15, 0x1723	; 0x801723 <xTickCount+0x3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	11 96       	adiw	r26, 0x01	; 1
    2bf2:	0d 91       	ld	r16, X+
    2bf4:	1d 91       	ld	r17, X+
    2bf6:	2d 91       	ld	r18, X+
    2bf8:	3c 91       	ld	r19, X
    2bfa:	14 97       	sbiw	r26, 0x04	; 4
    2bfc:	46 01       	movw	r8, r12
    2bfe:	57 01       	movw	r10, r14
    2c00:	80 1a       	sub	r8, r16
    2c02:	91 0a       	sbc	r9, r17
    2c04:	a2 0a       	sbc	r10, r18
    2c06:	b3 0a       	sbc	r11, r19
    2c08:	40 81       	ld	r20, Z
    2c0a:	51 81       	ldd	r21, Z+1	; 0x01
    2c0c:	62 81       	ldd	r22, Z+2	; 0x02
    2c0e:	73 81       	ldd	r23, Z+3	; 0x03
    2c10:	4f 3f       	cpi	r20, 0xFF	; 255
    2c12:	bf ef       	ldi	r27, 0xFF	; 255
    2c14:	5b 07       	cpc	r21, r27
    2c16:	6b 07       	cpc	r22, r27
    2c18:	7b 07       	cpc	r23, r27
    2c1a:	39 f1       	breq	.+78     	; 0x2c6a <xTaskCheckForTimeOut+0xac>
    2c1c:	ec 01       	movw	r28, r24
    2c1e:	b8 81       	ld	r27, Y
    2c20:	a0 91 18 17 	lds	r26, 0x1718	; 0x801718 <xNumOfOverflows>
    2c24:	ba 17       	cp	r27, r26
    2c26:	59 f0       	breq	.+22     	; 0x2c3e <xTaskCheckForTimeOut+0x80>
    2c28:	c0 16       	cp	r12, r16
    2c2a:	d1 06       	cpc	r13, r17
    2c2c:	e2 06       	cpc	r14, r18
    2c2e:	f3 06       	cpc	r15, r19
    2c30:	30 f0       	brcs	.+12     	; 0x2c3e <xTaskCheckForTimeOut+0x80>
    2c32:	10 82       	st	Z, r1
    2c34:	11 82       	std	Z+1, r1	; 0x01
    2c36:	12 82       	std	Z+2, r1	; 0x02
    2c38:	13 82       	std	Z+3, r1	; 0x03
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	17 c0       	rjmp	.+46     	; 0x2c6c <xTaskCheckForTimeOut+0xae>
    2c3e:	84 16       	cp	r8, r20
    2c40:	95 06       	cpc	r9, r21
    2c42:	a6 06       	cpc	r10, r22
    2c44:	b7 06       	cpc	r11, r23
    2c46:	58 f4       	brcc	.+22     	; 0x2c5e <xTaskCheckForTimeOut+0xa0>
    2c48:	48 19       	sub	r20, r8
    2c4a:	59 09       	sbc	r21, r9
    2c4c:	6a 09       	sbc	r22, r10
    2c4e:	7b 09       	sbc	r23, r11
    2c50:	40 83       	st	Z, r20
    2c52:	51 83       	std	Z+1, r21	; 0x01
    2c54:	62 83       	std	Z+2, r22	; 0x02
    2c56:	73 83       	std	Z+3, r23	; 0x03
    2c58:	a1 df       	rcall	.-190    	; 0x2b9c <vTaskInternalSetTimeOutState>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	07 c0       	rjmp	.+14     	; 0x2c6c <xTaskCheckForTimeOut+0xae>
    2c5e:	10 82       	st	Z, r1
    2c60:	11 82       	std	Z+1, r1	; 0x01
    2c62:	12 82       	std	Z+2, r1	; 0x02
    2c64:	13 82       	std	Z+3, r1	; 0x03
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	01 c0       	rjmp	.+2      	; 0x2c6c <xTaskCheckForTimeOut+0xae>
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	ff 90       	pop	r15
    2c7a:	ef 90       	pop	r14
    2c7c:	df 90       	pop	r13
    2c7e:	cf 90       	pop	r12
    2c80:	bf 90       	pop	r11
    2c82:	af 90       	pop	r10
    2c84:	9f 90       	pop	r9
    2c86:	8f 90       	pop	r8
    2c88:	08 95       	ret

00002c8a <vTaskMissedYield>:
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    2c90:	08 95       	ret

00002c92 <xTaskGetCurrentTaskHandle>:
    2c92:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2c96:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2c9a:	08 95       	ret

00002c9c <xTaskGetSchedulerState>:
    2c9c:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <xSchedulerRunning>
    2ca0:	88 23       	and	r24, r24
    2ca2:	31 f0       	breq	.+12     	; 0x2cb0 <xTaskGetSchedulerState+0x14>
    2ca4:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    2ca8:	81 11       	cpse	r24, r1
    2caa:	04 c0       	rjmp	.+8      	; 0x2cb4 <xTaskGetSchedulerState+0x18>
    2cac:	82 e0       	ldi	r24, 0x02	; 2
    2cae:	08 95       	ret
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	08 95       	ret
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	08 95       	ret

00002cb8 <xTaskPriorityInherit>:
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	89 2b       	or	r24, r25
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <xTaskPriorityInherit+0x10>
    2cc6:	77 c0       	rjmp	.+238    	; 0x2db6 <xTaskPriorityInherit+0xfe>
    2cc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cca:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2cce:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2cd2:	5a 96       	adiw	r26, 0x1a	; 26
    2cd4:	9c 91       	ld	r25, X
    2cd6:	89 17       	cp	r24, r25
    2cd8:	08 f0       	brcs	.+2      	; 0x2cdc <xTaskPriorityInherit+0x24>
    2cda:	63 c0       	rjmp	.+198    	; 0x2da2 <xTaskPriorityInherit+0xea>
    2cdc:	46 85       	ldd	r20, Z+14	; 0x0e
    2cde:	57 85       	ldd	r21, Z+15	; 0x0f
    2ce0:	60 89       	ldd	r22, Z+16	; 0x10
    2ce2:	71 89       	ldd	r23, Z+17	; 0x11
    2ce4:	77 23       	and	r23, r23
    2ce6:	94 f0       	brlt	.+36     	; 0x2d0c <xTaskPriorityInherit+0x54>
    2ce8:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2cec:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2cf0:	5a 96       	adiw	r26, 0x1a	; 26
    2cf2:	9c 91       	ld	r25, X
    2cf4:	4a e0       	ldi	r20, 0x0A	; 10
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	60 e0       	ldi	r22, 0x00	; 0
    2cfa:	70 e0       	ldi	r23, 0x00	; 0
    2cfc:	49 1b       	sub	r20, r25
    2cfe:	51 09       	sbc	r21, r1
    2d00:	61 09       	sbc	r22, r1
    2d02:	71 09       	sbc	r23, r1
    2d04:	46 87       	std	Z+14, r20	; 0x0e
    2d06:	57 87       	std	Z+15, r21	; 0x0f
    2d08:	60 8b       	std	Z+16, r22	; 0x10
    2d0a:	71 8b       	std	Z+17, r23	; 0x11
    2d0c:	24 85       	ldd	r18, Z+12	; 0x0c
    2d0e:	35 85       	ldd	r19, Z+13	; 0x0d
    2d10:	4b e0       	ldi	r20, 0x0B	; 11
    2d12:	84 9f       	mul	r24, r20
    2d14:	c0 01       	movw	r24, r0
    2d16:	11 24       	eor	r1, r1
    2d18:	8f 59       	subi	r24, 0x9F	; 159
    2d1a:	98 4e       	sbci	r25, 0xE8	; 232
    2d1c:	28 17       	cp	r18, r24
    2d1e:	39 07       	cpc	r19, r25
    2d20:	b9 f5       	brne	.+110    	; 0x2d90 <xTaskPriorityInherit+0xd8>
    2d22:	ef 01       	movw	r28, r30
    2d24:	8f 01       	movw	r16, r30
    2d26:	0e 5f       	subi	r16, 0xFE	; 254
    2d28:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2a:	c8 01       	movw	r24, r16
    2d2c:	0e 94 23 06 	call	0xc46	; 0xc46 <uxListRemove>
    2d30:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2d34:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2d38:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2d3a:	ea 8f       	std	Y+26, r30	; 0x1a
    2d3c:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2d40:	8e 17       	cp	r24, r30
    2d42:	10 f4       	brcc	.+4      	; 0x2d48 <xTaskPriorityInherit+0x90>
    2d44:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    2d48:	8b e0       	ldi	r24, 0x0B	; 11
    2d4a:	8e 9f       	mul	r24, r30
    2d4c:	f0 01       	movw	r30, r0
    2d4e:	11 24       	eor	r1, r1
    2d50:	ef 59       	subi	r30, 0x9F	; 159
    2d52:	f8 4e       	sbci	r31, 0xE8	; 232
    2d54:	01 80       	ldd	r0, Z+1	; 0x01
    2d56:	f2 81       	ldd	r31, Z+2	; 0x02
    2d58:	e0 2d       	mov	r30, r0
    2d5a:	ff 83       	std	Y+7, r31	; 0x07
    2d5c:	ee 83       	std	Y+6, r30	; 0x06
    2d5e:	26 81       	ldd	r18, Z+6	; 0x06
    2d60:	37 81       	ldd	r19, Z+7	; 0x07
    2d62:	39 87       	std	Y+9, r19	; 0x09
    2d64:	28 87       	std	Y+8, r18	; 0x08
    2d66:	a6 81       	ldd	r26, Z+6	; 0x06
    2d68:	b7 81       	ldd	r27, Z+7	; 0x07
    2d6a:	15 96       	adiw	r26, 0x05	; 5
    2d6c:	1c 93       	st	X, r17
    2d6e:	0e 93       	st	-X, r16
    2d70:	14 97       	sbiw	r26, 0x04	; 4
    2d72:	17 83       	std	Z+7, r17	; 0x07
    2d74:	06 83       	std	Z+6, r16	; 0x06
    2d76:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d78:	8e 9f       	mul	r24, r30
    2d7a:	f0 01       	movw	r30, r0
    2d7c:	11 24       	eor	r1, r1
    2d7e:	ef 59       	subi	r30, 0x9F	; 159
    2d80:	f8 4e       	sbci	r31, 0xE8	; 232
    2d82:	fd 87       	std	Y+13, r31	; 0x0d
    2d84:	ec 87       	std	Y+12, r30	; 0x0c
    2d86:	80 81       	ld	r24, Z
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	80 83       	st	Z, r24
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	16 c0       	rjmp	.+44     	; 0x2dbc <xTaskPriorityInherit+0x104>
    2d90:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2d94:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2d98:	5a 96       	adiw	r26, 0x1a	; 26
    2d9a:	8c 91       	ld	r24, X
    2d9c:	82 8f       	std	Z+26, r24	; 0x1a
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	0d c0       	rjmp	.+26     	; 0x2dbc <xTaskPriorityInherit+0x104>
    2da2:	95 a5       	ldd	r25, Z+45	; 0x2d
    2da4:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2da8:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2dac:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dae:	98 17       	cp	r25, r24
    2db0:	20 f0       	brcs	.+8      	; 0x2dba <xTaskPriorityInherit+0x102>
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	03 c0       	rjmp	.+6      	; 0x2dbc <xTaskPriorityInherit+0x104>
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	01 c0       	rjmp	.+2      	; 0x2dbc <xTaskPriorityInherit+0x104>
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	08 95       	ret

00002dc6 <xTaskPriorityDisinherit>:
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	fc 01       	movw	r30, r24
    2dd0:	89 2b       	or	r24, r25
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <xTaskPriorityDisinherit+0x10>
    2dd4:	49 c0       	rjmp	.+146    	; 0x2e68 <xTaskPriorityDisinherit+0xa2>
    2dd6:	86 a5       	ldd	r24, Z+46	; 0x2e
    2dd8:	81 50       	subi	r24, 0x01	; 1
    2dda:	86 a7       	std	Z+46, r24	; 0x2e
    2ddc:	22 8d       	ldd	r18, Z+26	; 0x1a
    2dde:	95 a5       	ldd	r25, Z+45	; 0x2d
    2de0:	29 17       	cp	r18, r25
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <xTaskPriorityDisinherit+0x20>
    2de4:	43 c0       	rjmp	.+134    	; 0x2e6c <xTaskPriorityDisinherit+0xa6>
    2de6:	81 11       	cpse	r24, r1
    2de8:	43 c0       	rjmp	.+134    	; 0x2e70 <xTaskPriorityDisinherit+0xaa>
    2dea:	ef 01       	movw	r28, r30
    2dec:	8f 01       	movw	r16, r30
    2dee:	0e 5f       	subi	r16, 0xFE	; 254
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	c8 01       	movw	r24, r16
    2df4:	0e 94 23 06 	call	0xc46	; 0xc46 <uxListRemove>
    2df8:	ed a5       	ldd	r30, Y+45	; 0x2d
    2dfa:	ea 8f       	std	Y+26, r30	; 0x1a
    2dfc:	8a e0       	ldi	r24, 0x0A	; 10
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	a0 e0       	ldi	r26, 0x00	; 0
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	8e 1b       	sub	r24, r30
    2e06:	91 09       	sbc	r25, r1
    2e08:	a1 09       	sbc	r26, r1
    2e0a:	b1 09       	sbc	r27, r1
    2e0c:	8e 87       	std	Y+14, r24	; 0x0e
    2e0e:	9f 87       	std	Y+15, r25	; 0x0f
    2e10:	a8 8b       	std	Y+16, r26	; 0x10
    2e12:	b9 8b       	std	Y+17, r27	; 0x11
    2e14:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2e18:	8e 17       	cp	r24, r30
    2e1a:	10 f4       	brcc	.+4      	; 0x2e20 <xTaskPriorityDisinherit+0x5a>
    2e1c:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    2e20:	8b e0       	ldi	r24, 0x0B	; 11
    2e22:	8e 9f       	mul	r24, r30
    2e24:	f0 01       	movw	r30, r0
    2e26:	11 24       	eor	r1, r1
    2e28:	ef 59       	subi	r30, 0x9F	; 159
    2e2a:	f8 4e       	sbci	r31, 0xE8	; 232
    2e2c:	01 80       	ldd	r0, Z+1	; 0x01
    2e2e:	f2 81       	ldd	r31, Z+2	; 0x02
    2e30:	e0 2d       	mov	r30, r0
    2e32:	ff 83       	std	Y+7, r31	; 0x07
    2e34:	ee 83       	std	Y+6, r30	; 0x06
    2e36:	26 81       	ldd	r18, Z+6	; 0x06
    2e38:	37 81       	ldd	r19, Z+7	; 0x07
    2e3a:	39 87       	std	Y+9, r19	; 0x09
    2e3c:	28 87       	std	Y+8, r18	; 0x08
    2e3e:	a6 81       	ldd	r26, Z+6	; 0x06
    2e40:	b7 81       	ldd	r27, Z+7	; 0x07
    2e42:	15 96       	adiw	r26, 0x05	; 5
    2e44:	1c 93       	st	X, r17
    2e46:	0e 93       	st	-X, r16
    2e48:	14 97       	sbiw	r26, 0x04	; 4
    2e4a:	17 83       	std	Z+7, r17	; 0x07
    2e4c:	06 83       	std	Z+6, r16	; 0x06
    2e4e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e50:	8e 9f       	mul	r24, r30
    2e52:	f0 01       	movw	r30, r0
    2e54:	11 24       	eor	r1, r1
    2e56:	ef 59       	subi	r30, 0x9F	; 159
    2e58:	f8 4e       	sbci	r31, 0xE8	; 232
    2e5a:	fd 87       	std	Y+13, r31	; 0x0d
    2e5c:	ec 87       	std	Y+12, r30	; 0x0c
    2e5e:	80 81       	ld	r24, Z
    2e60:	8f 5f       	subi	r24, 0xFF	; 255
    2e62:	80 83       	st	Z, r24
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	05 c0       	rjmp	.+10     	; 0x2e72 <xTaskPriorityDisinherit+0xac>
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	03 c0       	rjmp	.+6      	; 0x2e72 <xTaskPriorityDisinherit+0xac>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <xTaskPriorityDisinherit+0xac>
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	1f 91       	pop	r17
    2e78:	0f 91       	pop	r16
    2e7a:	08 95       	ret

00002e7c <vTaskPriorityDisinheritAfterTimeout>:
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	fc 01       	movw	r30, r24
    2e86:	89 2b       	or	r24, r25
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <vTaskPriorityDisinheritAfterTimeout+0x10>
    2e8a:	5a c0       	rjmp	.+180    	; 0x2f40 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2e8c:	85 a5       	ldd	r24, Z+45	; 0x2d
    2e8e:	86 17       	cp	r24, r22
    2e90:	08 f4       	brcc	.+2      	; 0x2e94 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2e92:	86 2f       	mov	r24, r22
    2e94:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e96:	89 17       	cp	r24, r25
    2e98:	09 f4       	brne	.+2      	; 0x2e9c <vTaskPriorityDisinheritAfterTimeout+0x20>
    2e9a:	52 c0       	rjmp	.+164    	; 0x2f40 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2e9c:	26 a5       	ldd	r18, Z+46	; 0x2e
    2e9e:	21 30       	cpi	r18, 0x01	; 1
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2ea2:	4e c0       	rjmp	.+156    	; 0x2f40 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ea4:	82 8f       	std	Z+26, r24	; 0x1a
    2ea6:	46 85       	ldd	r20, Z+14	; 0x0e
    2ea8:	57 85       	ldd	r21, Z+15	; 0x0f
    2eaa:	60 89       	ldd	r22, Z+16	; 0x10
    2eac:	71 89       	ldd	r23, Z+17	; 0x11
    2eae:	77 23       	and	r23, r23
    2eb0:	64 f0       	brlt	.+24     	; 0x2eca <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2eb2:	4a e0       	ldi	r20, 0x0A	; 10
    2eb4:	50 e0       	ldi	r21, 0x00	; 0
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	48 1b       	sub	r20, r24
    2ebc:	51 09       	sbc	r21, r1
    2ebe:	61 09       	sbc	r22, r1
    2ec0:	71 09       	sbc	r23, r1
    2ec2:	46 87       	std	Z+14, r20	; 0x0e
    2ec4:	57 87       	std	Z+15, r21	; 0x0f
    2ec6:	60 8b       	std	Z+16, r22	; 0x10
    2ec8:	71 8b       	std	Z+17, r23	; 0x11
    2eca:	24 85       	ldd	r18, Z+12	; 0x0c
    2ecc:	35 85       	ldd	r19, Z+13	; 0x0d
    2ece:	4b e0       	ldi	r20, 0x0B	; 11
    2ed0:	94 9f       	mul	r25, r20
    2ed2:	c0 01       	movw	r24, r0
    2ed4:	11 24       	eor	r1, r1
    2ed6:	8f 59       	subi	r24, 0x9F	; 159
    2ed8:	98 4e       	sbci	r25, 0xE8	; 232
    2eda:	28 17       	cp	r18, r24
    2edc:	39 07       	cpc	r19, r25
    2ede:	81 f5       	brne	.+96     	; 0x2f40 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ee0:	ef 01       	movw	r28, r30
    2ee2:	8f 01       	movw	r16, r30
    2ee4:	0e 5f       	subi	r16, 0xFE	; 254
    2ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee8:	c8 01       	movw	r24, r16
    2eea:	0e 94 23 06 	call	0xc46	; 0xc46 <uxListRemove>
    2eee:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ef0:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2ef4:	8e 17       	cp	r24, r30
    2ef6:	10 f4       	brcc	.+4      	; 0x2efc <vTaskPriorityDisinheritAfterTimeout+0x80>
    2ef8:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    2efc:	8b e0       	ldi	r24, 0x0B	; 11
    2efe:	8e 9f       	mul	r24, r30
    2f00:	f0 01       	movw	r30, r0
    2f02:	11 24       	eor	r1, r1
    2f04:	ef 59       	subi	r30, 0x9F	; 159
    2f06:	f8 4e       	sbci	r31, 0xE8	; 232
    2f08:	01 80       	ldd	r0, Z+1	; 0x01
    2f0a:	f2 81       	ldd	r31, Z+2	; 0x02
    2f0c:	e0 2d       	mov	r30, r0
    2f0e:	ff 83       	std	Y+7, r31	; 0x07
    2f10:	ee 83       	std	Y+6, r30	; 0x06
    2f12:	26 81       	ldd	r18, Z+6	; 0x06
    2f14:	37 81       	ldd	r19, Z+7	; 0x07
    2f16:	39 87       	std	Y+9, r19	; 0x09
    2f18:	28 87       	std	Y+8, r18	; 0x08
    2f1a:	a6 81       	ldd	r26, Z+6	; 0x06
    2f1c:	b7 81       	ldd	r27, Z+7	; 0x07
    2f1e:	15 96       	adiw	r26, 0x05	; 5
    2f20:	1c 93       	st	X, r17
    2f22:	0e 93       	st	-X, r16
    2f24:	14 97       	sbiw	r26, 0x04	; 4
    2f26:	17 83       	std	Z+7, r17	; 0x07
    2f28:	06 83       	std	Z+6, r16	; 0x06
    2f2a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f2c:	8e 9f       	mul	r24, r30
    2f2e:	f0 01       	movw	r30, r0
    2f30:	11 24       	eor	r1, r1
    2f32:	ef 59       	subi	r30, 0x9F	; 159
    2f34:	f8 4e       	sbci	r31, 0xE8	; 232
    2f36:	fd 87       	std	Y+13, r31	; 0x0d
    2f38:	ec 87       	std	Y+12, r30	; 0x0c
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8f 5f       	subi	r24, 0xFF	; 255
    2f3e:	80 83       	st	Z, r24
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	1f 91       	pop	r17
    2f46:	0f 91       	pop	r16
    2f48:	08 95       	ret

00002f4a <uxTaskResetEventItemValue>:
    2f4a:	cf 92       	push	r12
    2f4c:	df 92       	push	r13
    2f4e:	ef 92       	push	r14
    2f50:	ff 92       	push	r15
    2f52:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2f56:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2f5a:	66 85       	ldd	r22, Z+14	; 0x0e
    2f5c:	77 85       	ldd	r23, Z+15	; 0x0f
    2f5e:	80 89       	ldd	r24, Z+16	; 0x10
    2f60:	91 89       	ldd	r25, Z+17	; 0x11
    2f62:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2f66:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2f6a:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2f6e:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2f72:	5a 96       	adiw	r26, 0x1a	; 26
    2f74:	2c 91       	ld	r18, X
    2f76:	0f 2e       	mov	r0, r31
    2f78:	fa e0       	ldi	r31, 0x0A	; 10
    2f7a:	cf 2e       	mov	r12, r31
    2f7c:	d1 2c       	mov	r13, r1
    2f7e:	e1 2c       	mov	r14, r1
    2f80:	f1 2c       	mov	r15, r1
    2f82:	f0 2d       	mov	r31, r0
    2f84:	c2 1a       	sub	r12, r18
    2f86:	d1 08       	sbc	r13, r1
    2f88:	e1 08       	sbc	r14, r1
    2f8a:	f1 08       	sbc	r15, r1
    2f8c:	c6 86       	std	Z+14, r12	; 0x0e
    2f8e:	d7 86       	std	Z+15, r13	; 0x0f
    2f90:	e0 8a       	std	Z+16, r14	; 0x10
    2f92:	f1 8a       	std	Z+17, r15	; 0x11
    2f94:	ff 90       	pop	r15
    2f96:	ef 90       	pop	r14
    2f98:	df 90       	pop	r13
    2f9a:	cf 90       	pop	r12
    2f9c:	08 95       	ret

00002f9e <pvTaskIncrementMutexHeldCount>:
    2f9e:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2fa2:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2fa6:	89 2b       	or	r24, r25
    2fa8:	39 f0       	breq	.+14     	; 0x2fb8 <pvTaskIncrementMutexHeldCount+0x1a>
    2faa:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2fae:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2fb2:	86 a5       	ldd	r24, Z+46	; 0x2e
    2fb4:	8f 5f       	subi	r24, 0xFF	; 255
    2fb6:	86 a7       	std	Z+46, r24	; 0x2e
    2fb8:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2fbc:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2fc0:	08 95       	ret

00002fc2 <xTaskGenericNotifyWait>:
    2fc2:	4f 92       	push	r4
    2fc4:	5f 92       	push	r5
    2fc6:	6f 92       	push	r6
    2fc8:	7f 92       	push	r7
    2fca:	af 92       	push	r10
    2fcc:	bf 92       	push	r11
    2fce:	cf 92       	push	r12
    2fd0:	df 92       	push	r13
    2fd2:	ef 92       	push	r14
    2fd4:	ff 92       	push	r15
    2fd6:	0f 93       	push	r16
    2fd8:	1f 93       	push	r17
    2fda:	cf 93       	push	r28
    2fdc:	df 93       	push	r29
    2fde:	28 01       	movw	r4, r16
    2fe0:	39 01       	movw	r6, r18
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	f8 94       	cli
    2fe6:	0f 92       	push	r0
    2fe8:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2fec:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2ff0:	c8 2f       	mov	r28, r24
    2ff2:	d0 e0       	ldi	r29, 0x00	; 0
    2ff4:	ec 0f       	add	r30, r28
    2ff6:	fd 1f       	adc	r31, r29
    2ff8:	83 a9       	ldd	r24, Z+51	; 0x33
    2ffa:	82 30       	cpi	r24, 0x02	; 2
    2ffc:	79 f1       	breq	.+94     	; 0x305c <xTaskGenericNotifyWait+0x9a>
    2ffe:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    3002:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    3006:	ce 01       	movw	r24, r28
    3008:	88 0f       	add	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	e8 0f       	add	r30, r24
    3012:	f9 1f       	adc	r31, r25
    3014:	87 a5       	ldd	r24, Z+47	; 0x2f
    3016:	90 a9       	ldd	r25, Z+48	; 0x30
    3018:	a1 a9       	ldd	r26, Z+49	; 0x31
    301a:	b2 a9       	ldd	r27, Z+50	; 0x32
    301c:	40 95       	com	r20
    301e:	50 95       	com	r21
    3020:	60 95       	com	r22
    3022:	70 95       	com	r23
    3024:	48 23       	and	r20, r24
    3026:	59 23       	and	r21, r25
    3028:	6a 23       	and	r22, r26
    302a:	7b 23       	and	r23, r27
    302c:	47 a7       	std	Z+47, r20	; 0x2f
    302e:	50 ab       	std	Z+48, r21	; 0x30
    3030:	61 ab       	std	Z+49, r22	; 0x31
    3032:	72 ab       	std	Z+50, r23	; 0x32
    3034:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    3038:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    303c:	ec 0f       	add	r30, r28
    303e:	fd 1f       	adc	r31, r29
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	83 ab       	std	Z+51, r24	; 0x33
    3044:	a1 14       	cp	r10, r1
    3046:	b1 04       	cpc	r11, r1
    3048:	c1 04       	cpc	r12, r1
    304a:	d1 04       	cpc	r13, r1
    304c:	39 f0       	breq	.+14     	; 0x305c <xTaskGenericNotifyWait+0x9a>
    304e:	41 e0       	ldi	r20, 0x01	; 1
    3050:	c6 01       	movw	r24, r12
    3052:	b5 01       	movw	r22, r10
    3054:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <prvAddCurrentTaskToDelayedList>
    3058:	0e 94 9f 06 	call	0xd3e	; 0xd3e <vPortYield>
    305c:	0f 90       	pop	r0
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	0f 92       	push	r0
    3066:	e1 14       	cp	r14, r1
    3068:	f1 04       	cpc	r15, r1
    306a:	a1 f0       	breq	.+40     	; 0x3094 <xTaskGenericNotifyWait+0xd2>
    306c:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    3070:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    3074:	ce 01       	movw	r24, r28
    3076:	88 0f       	add	r24, r24
    3078:	99 1f       	adc	r25, r25
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	e8 0f       	add	r30, r24
    3080:	f9 1f       	adc	r31, r25
    3082:	87 a5       	ldd	r24, Z+47	; 0x2f
    3084:	90 a9       	ldd	r25, Z+48	; 0x30
    3086:	a1 a9       	ldd	r26, Z+49	; 0x31
    3088:	b2 a9       	ldd	r27, Z+50	; 0x32
    308a:	f7 01       	movw	r30, r14
    308c:	80 83       	st	Z, r24
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	a2 83       	std	Z+2, r26	; 0x02
    3092:	b3 83       	std	Z+3, r27	; 0x03
    3094:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    3098:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    309c:	ec 0f       	add	r30, r28
    309e:	fd 1f       	adc	r31, r29
    30a0:	83 a9       	ldd	r24, Z+51	; 0x33
    30a2:	82 30       	cpi	r24, 0x02	; 2
    30a4:	e9 f4       	brne	.+58     	; 0x30e0 <xTaskGenericNotifyWait+0x11e>
    30a6:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    30aa:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    30ae:	ce 01       	movw	r24, r28
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	e8 0f       	add	r30, r24
    30ba:	f9 1f       	adc	r31, r25
    30bc:	87 a5       	ldd	r24, Z+47	; 0x2f
    30be:	90 a9       	ldd	r25, Z+48	; 0x30
    30c0:	a1 a9       	ldd	r26, Z+49	; 0x31
    30c2:	b2 a9       	ldd	r27, Z+50	; 0x32
    30c4:	40 94       	com	r4
    30c6:	50 94       	com	r5
    30c8:	60 94       	com	r6
    30ca:	70 94       	com	r7
    30cc:	48 22       	and	r4, r24
    30ce:	59 22       	and	r5, r25
    30d0:	6a 22       	and	r6, r26
    30d2:	7b 22       	and	r7, r27
    30d4:	47 a6       	std	Z+47, r4	; 0x2f
    30d6:	50 aa       	std	Z+48, r5	; 0x30
    30d8:	61 aa       	std	Z+49, r6	; 0x31
    30da:	72 aa       	std	Z+50, r7	; 0x32
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	01 c0       	rjmp	.+2      	; 0x30e2 <xTaskGenericNotifyWait+0x120>
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	20 91 cf 17 	lds	r18, 0x17CF	; 0x8017cf <pxCurrentTCB>
    30e6:	30 91 d0 17 	lds	r19, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    30ea:	c2 0f       	add	r28, r18
    30ec:	d3 1f       	adc	r29, r19
    30ee:	1b aa       	std	Y+51, r1	; 0x33
    30f0:	0f 90       	pop	r0
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	df 90       	pop	r13
    3102:	cf 90       	pop	r12
    3104:	bf 90       	pop	r11
    3106:	af 90       	pop	r10
    3108:	7f 90       	pop	r7
    310a:	6f 90       	pop	r6
    310c:	5f 90       	pop	r5
    310e:	4f 90       	pop	r4
    3110:	08 95       	ret

00003112 <xTaskGenericNotify>:
    3112:	8f 92       	push	r8
    3114:	9f 92       	push	r9
    3116:	af 92       	push	r10
    3118:	bf 92       	push	r11
    311a:	ef 92       	push	r14
    311c:	ff 92       	push	r15
    311e:	0f 93       	push	r16
    3120:	cf 93       	push	r28
    3122:	df 93       	push	r29
    3124:	dc 01       	movw	r26, r24
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	0f 92       	push	r0
    312c:	e1 14       	cp	r14, r1
    312e:	f1 04       	cpc	r15, r1
    3130:	89 f0       	breq	.+34     	; 0x3154 <xTaskGenericNotify+0x42>
    3132:	e6 2f       	mov	r30, r22
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	ee 0f       	add	r30, r30
    3138:	ff 1f       	adc	r31, r31
    313a:	ee 0f       	add	r30, r30
    313c:	ff 1f       	adc	r31, r31
    313e:	e8 0f       	add	r30, r24
    3140:	f9 1f       	adc	r31, r25
    3142:	87 a4       	ldd	r8, Z+47	; 0x2f
    3144:	90 a8       	ldd	r9, Z+48	; 0x30
    3146:	a1 a8       	ldd	r10, Z+49	; 0x31
    3148:	b2 a8       	ldd	r11, Z+50	; 0x32
    314a:	f7 01       	movw	r30, r14
    314c:	80 82       	st	Z, r8
    314e:	91 82       	std	Z+1, r9	; 0x01
    3150:	a2 82       	std	Z+2, r10	; 0x02
    3152:	b3 82       	std	Z+3, r11	; 0x03
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	fd 01       	movw	r30, r26
    3158:	e6 0f       	add	r30, r22
    315a:	f7 1f       	adc	r31, r23
    315c:	83 a9       	ldd	r24, Z+51	; 0x33
    315e:	92 e0       	ldi	r25, 0x02	; 2
    3160:	93 ab       	std	Z+51, r25	; 0x33
    3162:	02 30       	cpi	r16, 0x02	; 2
    3164:	01 f1       	breq	.+64     	; 0x31a6 <xTaskGenericNotify+0x94>
    3166:	18 f4       	brcc	.+6      	; 0x316e <xTaskGenericNotify+0x5c>
    3168:	01 30       	cpi	r16, 0x01	; 1
    316a:	31 f0       	breq	.+12     	; 0x3178 <xTaskGenericNotify+0x66>
    316c:	4d c0       	rjmp	.+154    	; 0x3208 <xTaskGenericNotify+0xf6>
    316e:	03 30       	cpi	r16, 0x03	; 3
    3170:	79 f1       	breq	.+94     	; 0x31d0 <xTaskGenericNotify+0xbe>
    3172:	04 30       	cpi	r16, 0x04	; 4
    3174:	d1 f1       	breq	.+116    	; 0x31ea <xTaskGenericNotify+0xd8>
    3176:	48 c0       	rjmp	.+144    	; 0x3208 <xTaskGenericNotify+0xf6>
    3178:	66 0f       	add	r22, r22
    317a:	77 1f       	adc	r23, r23
    317c:	66 0f       	add	r22, r22
    317e:	77 1f       	adc	r23, r23
    3180:	fd 01       	movw	r30, r26
    3182:	e6 0f       	add	r30, r22
    3184:	f7 1f       	adc	r31, r23
    3186:	87 a4       	ldd	r8, Z+47	; 0x2f
    3188:	90 a8       	ldd	r9, Z+48	; 0x30
    318a:	a1 a8       	ldd	r10, Z+49	; 0x31
    318c:	b2 a8       	ldd	r11, Z+50	; 0x32
    318e:	ba 01       	movw	r22, r20
    3190:	a9 01       	movw	r20, r18
    3192:	48 29       	or	r20, r8
    3194:	59 29       	or	r21, r9
    3196:	6a 29       	or	r22, r10
    3198:	7b 29       	or	r23, r11
    319a:	47 a7       	std	Z+47, r20	; 0x2f
    319c:	50 ab       	std	Z+48, r21	; 0x30
    319e:	61 ab       	std	Z+49, r22	; 0x31
    31a0:	72 ab       	std	Z+50, r23	; 0x32
    31a2:	01 e0       	ldi	r16, 0x01	; 1
    31a4:	34 c0       	rjmp	.+104    	; 0x320e <xTaskGenericNotify+0xfc>
    31a6:	66 0f       	add	r22, r22
    31a8:	77 1f       	adc	r23, r23
    31aa:	66 0f       	add	r22, r22
    31ac:	77 1f       	adc	r23, r23
    31ae:	fd 01       	movw	r30, r26
    31b0:	e6 0f       	add	r30, r22
    31b2:	f7 1f       	adc	r31, r23
    31b4:	47 a5       	ldd	r20, Z+47	; 0x2f
    31b6:	50 a9       	ldd	r21, Z+48	; 0x30
    31b8:	61 a9       	ldd	r22, Z+49	; 0x31
    31ba:	72 a9       	ldd	r23, Z+50	; 0x32
    31bc:	4f 5f       	subi	r20, 0xFF	; 255
    31be:	5f 4f       	sbci	r21, 0xFF	; 255
    31c0:	6f 4f       	sbci	r22, 0xFF	; 255
    31c2:	7f 4f       	sbci	r23, 0xFF	; 255
    31c4:	47 a7       	std	Z+47, r20	; 0x2f
    31c6:	50 ab       	std	Z+48, r21	; 0x30
    31c8:	61 ab       	std	Z+49, r22	; 0x31
    31ca:	72 ab       	std	Z+50, r23	; 0x32
    31cc:	01 e0       	ldi	r16, 0x01	; 1
    31ce:	1f c0       	rjmp	.+62     	; 0x320e <xTaskGenericNotify+0xfc>
    31d0:	66 0f       	add	r22, r22
    31d2:	77 1f       	adc	r23, r23
    31d4:	66 0f       	add	r22, r22
    31d6:	77 1f       	adc	r23, r23
    31d8:	fd 01       	movw	r30, r26
    31da:	e6 0f       	add	r30, r22
    31dc:	f7 1f       	adc	r31, r23
    31de:	27 a7       	std	Z+47, r18	; 0x2f
    31e0:	30 ab       	std	Z+48, r19	; 0x30
    31e2:	41 ab       	std	Z+49, r20	; 0x31
    31e4:	52 ab       	std	Z+50, r21	; 0x32
    31e6:	01 e0       	ldi	r16, 0x01	; 1
    31e8:	12 c0       	rjmp	.+36     	; 0x320e <xTaskGenericNotify+0xfc>
    31ea:	82 30       	cpi	r24, 0x02	; 2
    31ec:	79 f0       	breq	.+30     	; 0x320c <xTaskGenericNotify+0xfa>
    31ee:	66 0f       	add	r22, r22
    31f0:	77 1f       	adc	r23, r23
    31f2:	66 0f       	add	r22, r22
    31f4:	77 1f       	adc	r23, r23
    31f6:	fd 01       	movw	r30, r26
    31f8:	e6 0f       	add	r30, r22
    31fa:	f7 1f       	adc	r31, r23
    31fc:	27 a7       	std	Z+47, r18	; 0x2f
    31fe:	30 ab       	std	Z+48, r19	; 0x30
    3200:	41 ab       	std	Z+49, r20	; 0x31
    3202:	52 ab       	std	Z+50, r21	; 0x32
    3204:	01 e0       	ldi	r16, 0x01	; 1
    3206:	03 c0       	rjmp	.+6      	; 0x320e <xTaskGenericNotify+0xfc>
    3208:	01 e0       	ldi	r16, 0x01	; 1
    320a:	01 c0       	rjmp	.+2      	; 0x320e <xTaskGenericNotify+0xfc>
    320c:	00 e0       	ldi	r16, 0x00	; 0
    320e:	81 30       	cpi	r24, 0x01	; 1
    3210:	09 f0       	breq	.+2      	; 0x3214 <xTaskGenericNotify+0x102>
    3212:	69 c0       	rjmp	.+210    	; 0x32e6 <xTaskGenericNotify+0x1d4>
    3214:	1c 96       	adiw	r26, 0x0c	; 12
    3216:	ed 91       	ld	r30, X+
    3218:	fc 91       	ld	r31, X
    321a:	1d 97       	sbiw	r26, 0x0d	; 13
    321c:	16 96       	adiw	r26, 0x06	; 6
    321e:	cd 91       	ld	r28, X+
    3220:	dc 91       	ld	r29, X
    3222:	17 97       	sbiw	r26, 0x07	; 7
    3224:	18 96       	adiw	r26, 0x08	; 8
    3226:	8d 91       	ld	r24, X+
    3228:	9c 91       	ld	r25, X
    322a:	19 97       	sbiw	r26, 0x09	; 9
    322c:	9f 83       	std	Y+7, r25	; 0x07
    322e:	8e 83       	std	Y+6, r24	; 0x06
    3230:	18 96       	adiw	r26, 0x08	; 8
    3232:	cd 91       	ld	r28, X+
    3234:	dc 91       	ld	r29, X
    3236:	19 97       	sbiw	r26, 0x09	; 9
    3238:	16 96       	adiw	r26, 0x06	; 6
    323a:	8d 91       	ld	r24, X+
    323c:	9c 91       	ld	r25, X
    323e:	17 97       	sbiw	r26, 0x07	; 7
    3240:	9d 83       	std	Y+5, r25	; 0x05
    3242:	8c 83       	std	Y+4, r24	; 0x04
    3244:	81 81       	ldd	r24, Z+1	; 0x01
    3246:	92 81       	ldd	r25, Z+2	; 0x02
    3248:	9d 01       	movw	r18, r26
    324a:	2e 5f       	subi	r18, 0xFE	; 254
    324c:	3f 4f       	sbci	r19, 0xFF	; 255
    324e:	82 17       	cp	r24, r18
    3250:	93 07       	cpc	r25, r19
    3252:	31 f4       	brne	.+12     	; 0x3260 <xTaskGenericNotify+0x14e>
    3254:	18 96       	adiw	r26, 0x08	; 8
    3256:	8d 91       	ld	r24, X+
    3258:	9c 91       	ld	r25, X
    325a:	19 97       	sbiw	r26, 0x09	; 9
    325c:	92 83       	std	Z+2, r25	; 0x02
    325e:	81 83       	std	Z+1, r24	; 0x01
    3260:	1d 96       	adiw	r26, 0x0d	; 13
    3262:	1c 92       	st	X, r1
    3264:	1e 92       	st	-X, r1
    3266:	1c 97       	sbiw	r26, 0x0c	; 12
    3268:	80 81       	ld	r24, Z
    326a:	81 50       	subi	r24, 0x01	; 1
    326c:	80 83       	st	Z, r24
    326e:	5a 96       	adiw	r26, 0x1a	; 26
    3270:	ec 91       	ld	r30, X
    3272:	5a 97       	sbiw	r26, 0x1a	; 26
    3274:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    3278:	8e 17       	cp	r24, r30
    327a:	10 f4       	brcc	.+4      	; 0x3280 <xTaskGenericNotify+0x16e>
    327c:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    3280:	8b e0       	ldi	r24, 0x0B	; 11
    3282:	8e 9f       	mul	r24, r30
    3284:	f0 01       	movw	r30, r0
    3286:	11 24       	eor	r1, r1
    3288:	ef 59       	subi	r30, 0x9F	; 159
    328a:	f8 4e       	sbci	r31, 0xE8	; 232
    328c:	01 80       	ldd	r0, Z+1	; 0x01
    328e:	f2 81       	ldd	r31, Z+2	; 0x02
    3290:	e0 2d       	mov	r30, r0
    3292:	17 96       	adiw	r26, 0x07	; 7
    3294:	fc 93       	st	X, r31
    3296:	ee 93       	st	-X, r30
    3298:	16 97       	sbiw	r26, 0x06	; 6
    329a:	46 81       	ldd	r20, Z+6	; 0x06
    329c:	57 81       	ldd	r21, Z+7	; 0x07
    329e:	19 96       	adiw	r26, 0x09	; 9
    32a0:	5c 93       	st	X, r21
    32a2:	4e 93       	st	-X, r20
    32a4:	18 97       	sbiw	r26, 0x08	; 8
    32a6:	c6 81       	ldd	r28, Z+6	; 0x06
    32a8:	d7 81       	ldd	r29, Z+7	; 0x07
    32aa:	3d 83       	std	Y+5, r19	; 0x05
    32ac:	2c 83       	std	Y+4, r18	; 0x04
    32ae:	37 83       	std	Z+7, r19	; 0x07
    32b0:	26 83       	std	Z+6, r18	; 0x06
    32b2:	5a 96       	adiw	r26, 0x1a	; 26
    32b4:	ec 91       	ld	r30, X
    32b6:	5a 97       	sbiw	r26, 0x1a	; 26
    32b8:	8e 9f       	mul	r24, r30
    32ba:	f0 01       	movw	r30, r0
    32bc:	11 24       	eor	r1, r1
    32be:	ef 59       	subi	r30, 0x9F	; 159
    32c0:	f8 4e       	sbci	r31, 0xE8	; 232
    32c2:	1d 96       	adiw	r26, 0x0d	; 13
    32c4:	fc 93       	st	X, r31
    32c6:	ee 93       	st	-X, r30
    32c8:	1c 97       	sbiw	r26, 0x0c	; 12
    32ca:	80 81       	ld	r24, Z
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
    32ce:	80 83       	st	Z, r24
    32d0:	5a 96       	adiw	r26, 0x1a	; 26
    32d2:	9c 91       	ld	r25, X
    32d4:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    32d8:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    32dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    32de:	89 17       	cp	r24, r25
    32e0:	10 f4       	brcc	.+4      	; 0x32e6 <xTaskGenericNotify+0x1d4>
    32e2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <vPortYield>
    32e6:	0f 90       	pop	r0
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	80 2f       	mov	r24, r16
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	0f 91       	pop	r16
    32f2:	ff 90       	pop	r15
    32f4:	ef 90       	pop	r14
    32f6:	bf 90       	pop	r11
    32f8:	af 90       	pop	r10
    32fa:	9f 90       	pop	r9
    32fc:	8f 90       	pop	r8
    32fe:	08 95       	ret

00003300 <xTaskGenericNotifyFromISR>:
    3300:	8f 92       	push	r8
    3302:	9f 92       	push	r9
    3304:	af 92       	push	r10
    3306:	bf 92       	push	r11
    3308:	cf 92       	push	r12
    330a:	df 92       	push	r13
    330c:	ef 92       	push	r14
    330e:	ff 92       	push	r15
    3310:	0f 93       	push	r16
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	dc 01       	movw	r26, r24
    3318:	e1 14       	cp	r14, r1
    331a:	f1 04       	cpc	r15, r1
    331c:	89 f0       	breq	.+34     	; 0x3340 <xTaskGenericNotifyFromISR+0x40>
    331e:	e6 2f       	mov	r30, r22
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	ee 0f       	add	r30, r30
    3324:	ff 1f       	adc	r31, r31
    3326:	ee 0f       	add	r30, r30
    3328:	ff 1f       	adc	r31, r31
    332a:	e8 0f       	add	r30, r24
    332c:	f9 1f       	adc	r31, r25
    332e:	87 a4       	ldd	r8, Z+47	; 0x2f
    3330:	90 a8       	ldd	r9, Z+48	; 0x30
    3332:	a1 a8       	ldd	r10, Z+49	; 0x31
    3334:	b2 a8       	ldd	r11, Z+50	; 0x32
    3336:	f7 01       	movw	r30, r14
    3338:	80 82       	st	Z, r8
    333a:	91 82       	std	Z+1, r9	; 0x01
    333c:	a2 82       	std	Z+2, r10	; 0x02
    333e:	b3 82       	std	Z+3, r11	; 0x03
    3340:	70 e0       	ldi	r23, 0x00	; 0
    3342:	fd 01       	movw	r30, r26
    3344:	e6 0f       	add	r30, r22
    3346:	f7 1f       	adc	r31, r23
    3348:	93 a9       	ldd	r25, Z+51	; 0x33
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	83 ab       	std	Z+51, r24	; 0x33
    334e:	02 30       	cpi	r16, 0x02	; 2
    3350:	01 f1       	breq	.+64     	; 0x3392 <xTaskGenericNotifyFromISR+0x92>
    3352:	18 f4       	brcc	.+6      	; 0x335a <xTaskGenericNotifyFromISR+0x5a>
    3354:	01 30       	cpi	r16, 0x01	; 1
    3356:	31 f0       	breq	.+12     	; 0x3364 <xTaskGenericNotifyFromISR+0x64>
    3358:	4d c0       	rjmp	.+154    	; 0x33f4 <xTaskGenericNotifyFromISR+0xf4>
    335a:	03 30       	cpi	r16, 0x03	; 3
    335c:	79 f1       	breq	.+94     	; 0x33bc <xTaskGenericNotifyFromISR+0xbc>
    335e:	04 30       	cpi	r16, 0x04	; 4
    3360:	d1 f1       	breq	.+116    	; 0x33d6 <xTaskGenericNotifyFromISR+0xd6>
    3362:	48 c0       	rjmp	.+144    	; 0x33f4 <xTaskGenericNotifyFromISR+0xf4>
    3364:	66 0f       	add	r22, r22
    3366:	77 1f       	adc	r23, r23
    3368:	66 0f       	add	r22, r22
    336a:	77 1f       	adc	r23, r23
    336c:	fd 01       	movw	r30, r26
    336e:	e6 0f       	add	r30, r22
    3370:	f7 1f       	adc	r31, r23
    3372:	87 a4       	ldd	r8, Z+47	; 0x2f
    3374:	90 a8       	ldd	r9, Z+48	; 0x30
    3376:	a1 a8       	ldd	r10, Z+49	; 0x31
    3378:	b2 a8       	ldd	r11, Z+50	; 0x32
    337a:	ba 01       	movw	r22, r20
    337c:	a9 01       	movw	r20, r18
    337e:	48 29       	or	r20, r8
    3380:	59 29       	or	r21, r9
    3382:	6a 29       	or	r22, r10
    3384:	7b 29       	or	r23, r11
    3386:	47 a7       	std	Z+47, r20	; 0x2f
    3388:	50 ab       	std	Z+48, r21	; 0x30
    338a:	61 ab       	std	Z+49, r22	; 0x31
    338c:	72 ab       	std	Z+50, r23	; 0x32
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	34 c0       	rjmp	.+104    	; 0x33fa <xTaskGenericNotifyFromISR+0xfa>
    3392:	66 0f       	add	r22, r22
    3394:	77 1f       	adc	r23, r23
    3396:	66 0f       	add	r22, r22
    3398:	77 1f       	adc	r23, r23
    339a:	fd 01       	movw	r30, r26
    339c:	e6 0f       	add	r30, r22
    339e:	f7 1f       	adc	r31, r23
    33a0:	47 a5       	ldd	r20, Z+47	; 0x2f
    33a2:	50 a9       	ldd	r21, Z+48	; 0x30
    33a4:	61 a9       	ldd	r22, Z+49	; 0x31
    33a6:	72 a9       	ldd	r23, Z+50	; 0x32
    33a8:	4f 5f       	subi	r20, 0xFF	; 255
    33aa:	5f 4f       	sbci	r21, 0xFF	; 255
    33ac:	6f 4f       	sbci	r22, 0xFF	; 255
    33ae:	7f 4f       	sbci	r23, 0xFF	; 255
    33b0:	47 a7       	std	Z+47, r20	; 0x2f
    33b2:	50 ab       	std	Z+48, r21	; 0x30
    33b4:	61 ab       	std	Z+49, r22	; 0x31
    33b6:	72 ab       	std	Z+50, r23	; 0x32
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	1f c0       	rjmp	.+62     	; 0x33fa <xTaskGenericNotifyFromISR+0xfa>
    33bc:	66 0f       	add	r22, r22
    33be:	77 1f       	adc	r23, r23
    33c0:	66 0f       	add	r22, r22
    33c2:	77 1f       	adc	r23, r23
    33c4:	fd 01       	movw	r30, r26
    33c6:	e6 0f       	add	r30, r22
    33c8:	f7 1f       	adc	r31, r23
    33ca:	27 a7       	std	Z+47, r18	; 0x2f
    33cc:	30 ab       	std	Z+48, r19	; 0x30
    33ce:	41 ab       	std	Z+49, r20	; 0x31
    33d0:	52 ab       	std	Z+50, r21	; 0x32
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	12 c0       	rjmp	.+36     	; 0x33fa <xTaskGenericNotifyFromISR+0xfa>
    33d6:	92 30       	cpi	r25, 0x02	; 2
    33d8:	79 f0       	breq	.+30     	; 0x33f8 <xTaskGenericNotifyFromISR+0xf8>
    33da:	66 0f       	add	r22, r22
    33dc:	77 1f       	adc	r23, r23
    33de:	66 0f       	add	r22, r22
    33e0:	77 1f       	adc	r23, r23
    33e2:	fd 01       	movw	r30, r26
    33e4:	e6 0f       	add	r30, r22
    33e6:	f7 1f       	adc	r31, r23
    33e8:	27 a7       	std	Z+47, r18	; 0x2f
    33ea:	30 ab       	std	Z+48, r19	; 0x30
    33ec:	41 ab       	std	Z+49, r20	; 0x31
    33ee:	52 ab       	std	Z+50, r21	; 0x32
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	03 c0       	rjmp	.+6      	; 0x33fa <xTaskGenericNotifyFromISR+0xfa>
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <xTaskGenericNotifyFromISR+0xfa>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	91 30       	cpi	r25, 0x01	; 1
    33fc:	09 f0       	breq	.+2      	; 0x3400 <xTaskGenericNotifyFromISR+0x100>
    33fe:	96 c0       	rjmp	.+300    	; 0x352c <xTaskGenericNotifyFromISR+0x22c>
    3400:	90 91 10 17 	lds	r25, 0x1710	; 0x801710 <uxSchedulerSuspended>
    3404:	91 11       	cpse	r25, r1
    3406:	5f c0       	rjmp	.+190    	; 0x34c6 <xTaskGenericNotifyFromISR+0x1c6>
    3408:	1c 96       	adiw	r26, 0x0c	; 12
    340a:	ed 91       	ld	r30, X+
    340c:	fc 91       	ld	r31, X
    340e:	1d 97       	sbiw	r26, 0x0d	; 13
    3410:	16 96       	adiw	r26, 0x06	; 6
    3412:	cd 91       	ld	r28, X+
    3414:	dc 91       	ld	r29, X
    3416:	17 97       	sbiw	r26, 0x07	; 7
    3418:	18 96       	adiw	r26, 0x08	; 8
    341a:	2d 91       	ld	r18, X+
    341c:	3c 91       	ld	r19, X
    341e:	19 97       	sbiw	r26, 0x09	; 9
    3420:	3f 83       	std	Y+7, r19	; 0x07
    3422:	2e 83       	std	Y+6, r18	; 0x06
    3424:	18 96       	adiw	r26, 0x08	; 8
    3426:	cd 91       	ld	r28, X+
    3428:	dc 91       	ld	r29, X
    342a:	19 97       	sbiw	r26, 0x09	; 9
    342c:	16 96       	adiw	r26, 0x06	; 6
    342e:	2d 91       	ld	r18, X+
    3430:	3c 91       	ld	r19, X
    3432:	17 97       	sbiw	r26, 0x07	; 7
    3434:	3d 83       	std	Y+5, r19	; 0x05
    3436:	2c 83       	std	Y+4, r18	; 0x04
    3438:	41 81       	ldd	r20, Z+1	; 0x01
    343a:	52 81       	ldd	r21, Z+2	; 0x02
    343c:	9d 01       	movw	r18, r26
    343e:	2e 5f       	subi	r18, 0xFE	; 254
    3440:	3f 4f       	sbci	r19, 0xFF	; 255
    3442:	42 17       	cp	r20, r18
    3444:	53 07       	cpc	r21, r19
    3446:	31 f4       	brne	.+12     	; 0x3454 <xTaskGenericNotifyFromISR+0x154>
    3448:	18 96       	adiw	r26, 0x08	; 8
    344a:	4d 91       	ld	r20, X+
    344c:	5c 91       	ld	r21, X
    344e:	19 97       	sbiw	r26, 0x09	; 9
    3450:	52 83       	std	Z+2, r21	; 0x02
    3452:	41 83       	std	Z+1, r20	; 0x01
    3454:	1d 96       	adiw	r26, 0x0d	; 13
    3456:	1c 92       	st	X, r1
    3458:	1e 92       	st	-X, r1
    345a:	1c 97       	sbiw	r26, 0x0c	; 12
    345c:	90 81       	ld	r25, Z
    345e:	91 50       	subi	r25, 0x01	; 1
    3460:	90 83       	st	Z, r25
    3462:	5a 96       	adiw	r26, 0x1a	; 26
    3464:	ec 91       	ld	r30, X
    3466:	5a 97       	sbiw	r26, 0x1a	; 26
    3468:	90 91 1f 17 	lds	r25, 0x171F	; 0x80171f <uxTopReadyPriority>
    346c:	9e 17       	cp	r25, r30
    346e:	10 f4       	brcc	.+4      	; 0x3474 <xTaskGenericNotifyFromISR+0x174>
    3470:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    3474:	9b e0       	ldi	r25, 0x0B	; 11
    3476:	9e 9f       	mul	r25, r30
    3478:	f0 01       	movw	r30, r0
    347a:	11 24       	eor	r1, r1
    347c:	ef 59       	subi	r30, 0x9F	; 159
    347e:	f8 4e       	sbci	r31, 0xE8	; 232
    3480:	01 80       	ldd	r0, Z+1	; 0x01
    3482:	f2 81       	ldd	r31, Z+2	; 0x02
    3484:	e0 2d       	mov	r30, r0
    3486:	17 96       	adiw	r26, 0x07	; 7
    3488:	fc 93       	st	X, r31
    348a:	ee 93       	st	-X, r30
    348c:	16 97       	sbiw	r26, 0x06	; 6
    348e:	46 81       	ldd	r20, Z+6	; 0x06
    3490:	57 81       	ldd	r21, Z+7	; 0x07
    3492:	19 96       	adiw	r26, 0x09	; 9
    3494:	5c 93       	st	X, r21
    3496:	4e 93       	st	-X, r20
    3498:	18 97       	sbiw	r26, 0x08	; 8
    349a:	c6 81       	ldd	r28, Z+6	; 0x06
    349c:	d7 81       	ldd	r29, Z+7	; 0x07
    349e:	3d 83       	std	Y+5, r19	; 0x05
    34a0:	2c 83       	std	Y+4, r18	; 0x04
    34a2:	37 83       	std	Z+7, r19	; 0x07
    34a4:	26 83       	std	Z+6, r18	; 0x06
    34a6:	5a 96       	adiw	r26, 0x1a	; 26
    34a8:	ec 91       	ld	r30, X
    34aa:	5a 97       	sbiw	r26, 0x1a	; 26
    34ac:	9e 9f       	mul	r25, r30
    34ae:	f0 01       	movw	r30, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	ef 59       	subi	r30, 0x9F	; 159
    34b4:	f8 4e       	sbci	r31, 0xE8	; 232
    34b6:	1d 96       	adiw	r26, 0x0d	; 13
    34b8:	fc 93       	st	X, r31
    34ba:	ee 93       	st	-X, r30
    34bc:	1c 97       	sbiw	r26, 0x0c	; 12
    34be:	90 81       	ld	r25, Z
    34c0:	9f 5f       	subi	r25, 0xFF	; 255
    34c2:	90 83       	st	Z, r25
    34c4:	21 c0       	rjmp	.+66     	; 0x3508 <xTaskGenericNotifyFromISR+0x208>
    34c6:	6c e3       	ldi	r22, 0x3C	; 60
    34c8:	77 e1       	ldi	r23, 0x17	; 23
    34ca:	fb 01       	movw	r30, r22
    34cc:	c1 81       	ldd	r28, Z+1	; 0x01
    34ce:	d2 81       	ldd	r29, Z+2	; 0x02
    34d0:	53 96       	adiw	r26, 0x13	; 19
    34d2:	dc 93       	st	X, r29
    34d4:	ce 93       	st	-X, r28
    34d6:	52 97       	sbiw	r26, 0x12	; 18
    34d8:	2e 81       	ldd	r18, Y+6	; 0x06
    34da:	3f 81       	ldd	r19, Y+7	; 0x07
    34dc:	55 96       	adiw	r26, 0x15	; 21
    34de:	3c 93       	st	X, r19
    34e0:	2e 93       	st	-X, r18
    34e2:	54 97       	sbiw	r26, 0x14	; 20
    34e4:	4e 81       	ldd	r20, Y+6	; 0x06
    34e6:	5f 81       	ldd	r21, Y+7	; 0x07
    34e8:	9d 01       	movw	r18, r26
    34ea:	22 5f       	subi	r18, 0xF2	; 242
    34ec:	3f 4f       	sbci	r19, 0xFF	; 255
    34ee:	fa 01       	movw	r30, r20
    34f0:	35 83       	std	Z+5, r19	; 0x05
    34f2:	24 83       	std	Z+4, r18	; 0x04
    34f4:	3f 83       	std	Y+7, r19	; 0x07
    34f6:	2e 83       	std	Y+6, r18	; 0x06
    34f8:	59 96       	adiw	r26, 0x19	; 25
    34fa:	7c 93       	st	X, r23
    34fc:	6e 93       	st	-X, r22
    34fe:	58 97       	sbiw	r26, 0x18	; 24
    3500:	fb 01       	movw	r30, r22
    3502:	90 81       	ld	r25, Z
    3504:	9f 5f       	subi	r25, 0xFF	; 255
    3506:	90 83       	st	Z, r25
    3508:	5a 96       	adiw	r26, 0x1a	; 26
    350a:	2c 91       	ld	r18, X
    350c:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    3510:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    3514:	92 8d       	ldd	r25, Z+26	; 0x1a
    3516:	92 17       	cp	r25, r18
    3518:	48 f4       	brcc	.+18     	; 0x352c <xTaskGenericNotifyFromISR+0x22c>
    351a:	c1 14       	cp	r12, r1
    351c:	d1 04       	cpc	r13, r1
    351e:	19 f0       	breq	.+6      	; 0x3526 <xTaskGenericNotifyFromISR+0x226>
    3520:	91 e0       	ldi	r25, 0x01	; 1
    3522:	f6 01       	movw	r30, r12
    3524:	90 83       	st	Z, r25
    3526:	91 e0       	ldi	r25, 0x01	; 1
    3528:	90 93 19 17 	sts	0x1719, r25	; 0x801719 <xYieldPending>
    352c:	df 91       	pop	r29
    352e:	cf 91       	pop	r28
    3530:	0f 91       	pop	r16
    3532:	ff 90       	pop	r15
    3534:	ef 90       	pop	r14
    3536:	df 90       	pop	r13
    3538:	cf 90       	pop	r12
    353a:	bf 90       	pop	r11
    353c:	af 90       	pop	r10
    353e:	9f 90       	pop	r9
    3540:	8f 90       	pop	r8
    3542:	08 95       	ret

00003544 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3544:	00 97       	sbiw	r24, 0x00	; 0
    3546:	21 f4       	brne	.+8      	; 0x3550 <xTaskGenericNotifyStateClear+0xc>
    3548:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    354c:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3556:	70 e0       	ldi	r23, 0x00	; 0
    3558:	fc 01       	movw	r30, r24
    355a:	e6 0f       	add	r30, r22
    355c:	f7 1f       	adc	r31, r23
    355e:	23 a9       	ldd	r18, Z+51	; 0x33
    3560:	22 30       	cpi	r18, 0x02	; 2
    3562:	31 f4       	brne	.+12     	; 0x3570 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3564:	fc 01       	movw	r30, r24
    3566:	e6 0f       	add	r30, r22
    3568:	f7 1f       	adc	r31, r23
    356a:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3570:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3572:	0f 90       	pop	r0
    3574:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3576:	08 95       	ret

00003578 <prvGetNextExpireTime>:
    3578:	dc 01       	movw	r26, r24
    357a:	e0 91 db 17 	lds	r30, 0x17DB	; 0x8017db <pxCurrentTimerList>
    357e:	f0 91 dc 17 	lds	r31, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    3582:	80 81       	ld	r24, Z
    3584:	91 e0       	ldi	r25, 0x01	; 1
    3586:	81 11       	cpse	r24, r1
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	9c 93       	st	X, r25
    358c:	91 11       	cpse	r25, r1
    358e:	08 c0       	rjmp	.+16     	; 0x35a0 <prvGetNextExpireTime+0x28>
    3590:	07 80       	ldd	r0, Z+7	; 0x07
    3592:	f0 85       	ldd	r31, Z+8	; 0x08
    3594:	e0 2d       	mov	r30, r0
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	08 95       	ret
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	cb 01       	movw	r24, r22
    35a6:	08 95       	ret

000035a8 <prvInsertTimerInActiveList>:
    35a8:	cf 92       	push	r12
    35aa:	df 92       	push	r13
    35ac:	ef 92       	push	r14
    35ae:	ff 92       	push	r15
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	fc 01       	movw	r30, r24
    35b6:	42 83       	std	Z+2, r20	; 0x02
    35b8:	53 83       	std	Z+3, r21	; 0x03
    35ba:	64 83       	std	Z+4, r22	; 0x04
    35bc:	75 83       	std	Z+5, r23	; 0x05
    35be:	93 87       	std	Z+11, r25	; 0x0b
    35c0:	82 87       	std	Z+10, r24	; 0x0a
    35c2:	04 17       	cp	r16, r20
    35c4:	15 07       	cpc	r17, r21
    35c6:	26 07       	cpc	r18, r22
    35c8:	37 07       	cpc	r19, r23
    35ca:	c0 f0       	brcs	.+48     	; 0x35fc <prvInsertTimerInActiveList+0x54>
    35cc:	0c 19       	sub	r16, r12
    35ce:	1d 09       	sbc	r17, r13
    35d0:	2e 09       	sbc	r18, r14
    35d2:	3f 09       	sbc	r19, r15
    35d4:	86 85       	ldd	r24, Z+14	; 0x0e
    35d6:	97 85       	ldd	r25, Z+15	; 0x0f
    35d8:	a0 89       	ldd	r26, Z+16	; 0x10
    35da:	b1 89       	ldd	r27, Z+17	; 0x11
    35dc:	08 17       	cp	r16, r24
    35de:	19 07       	cpc	r17, r25
    35e0:	2a 07       	cpc	r18, r26
    35e2:	3b 07       	cpc	r19, r27
    35e4:	00 f5       	brcc	.+64     	; 0x3626 <prvInsertTimerInActiveList+0x7e>
    35e6:	bf 01       	movw	r22, r30
    35e8:	6e 5f       	subi	r22, 0xFE	; 254
    35ea:	7f 4f       	sbci	r23, 0xFF	; 255
    35ec:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <pxOverflowTimerList>
    35f0:	90 91 da 17 	lds	r25, 0x17DA	; 0x8017da <pxOverflowTimerList+0x1>
    35f4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsert>
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	18 c0       	rjmp	.+48     	; 0x362c <prvInsertTimerInActiveList+0x84>
    35fc:	0c 15       	cp	r16, r12
    35fe:	1d 05       	cpc	r17, r13
    3600:	2e 05       	cpc	r18, r14
    3602:	3f 05       	cpc	r19, r15
    3604:	28 f4       	brcc	.+10     	; 0x3610 <prvInsertTimerInActiveList+0x68>
    3606:	4c 15       	cp	r20, r12
    3608:	5d 05       	cpc	r21, r13
    360a:	6e 05       	cpc	r22, r14
    360c:	7f 05       	cpc	r23, r15
    360e:	68 f4       	brcc	.+26     	; 0x362a <prvInsertTimerInActiveList+0x82>
    3610:	bf 01       	movw	r22, r30
    3612:	6e 5f       	subi	r22, 0xFE	; 254
    3614:	7f 4f       	sbci	r23, 0xFF	; 255
    3616:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <pxCurrentTimerList>
    361a:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    361e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsert>
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	03 c0       	rjmp	.+6      	; 0x362c <prvInsertTimerInActiveList+0x84>
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	01 c0       	rjmp	.+2      	; 0x362c <prvInsertTimerInActiveList+0x84>
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	ff 90       	pop	r15
    3632:	ef 90       	pop	r14
    3634:	df 90       	pop	r13
    3636:	cf 90       	pop	r12
    3638:	08 95       	ret

0000363a <prvCheckForValidListAndQueue>:
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	0f 92       	push	r0
    3640:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    3644:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    3648:	89 2b       	or	r24, r25
    364a:	e9 f4       	brne	.+58     	; 0x3686 <prvCheckForValidListAndQueue+0x4c>
    364c:	88 ee       	ldi	r24, 0xE8	; 232
    364e:	97 e1       	ldi	r25, 0x17	; 23
    3650:	0e 94 d1 05 	call	0xba2	; 0xba2 <vListInitialise>
    3654:	8d ed       	ldi	r24, 0xDD	; 221
    3656:	97 e1       	ldi	r25, 0x17	; 23
    3658:	0e 94 d1 05 	call	0xba2	; 0xba2 <vListInitialise>
    365c:	88 ee       	ldi	r24, 0xE8	; 232
    365e:	97 e1       	ldi	r25, 0x17	; 23
    3660:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <pxCurrentTimerList+0x1>
    3664:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <pxCurrentTimerList>
    3668:	8d ed       	ldi	r24, 0xDD	; 221
    366a:	97 e1       	ldi	r25, 0x17	; 23
    366c:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <pxOverflowTimerList+0x1>
    3670:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <pxOverflowTimerList>
    3674:	40 e0       	ldi	r20, 0x00	; 0
    3676:	67 e0       	ldi	r22, 0x07	; 7
    3678:	8a e0       	ldi	r24, 0x0A	; 10
    367a:	0e 94 94 08 	call	0x1128	; 0x1128 <xQueueGenericCreate>
    367e:	90 93 d8 17 	sts	0x17D8, r25	; 0x8017d8 <xTimerQueue+0x1>
    3682:	80 93 d7 17 	sts	0x17D7, r24	; 0x8017d7 <xTimerQueue>
    3686:	0f 90       	pop	r0
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	08 95       	ret

0000368c <xTimerCreateTimerTask>:
    368c:	ef 92       	push	r14
    368e:	ff 92       	push	r15
    3690:	0f 93       	push	r16
    3692:	d3 df       	rcall	.-90     	; 0x363a <prvCheckForValidListAndQueue>
    3694:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    3698:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    369c:	89 2b       	or	r24, r25
    369e:	91 f0       	breq	.+36     	; 0x36c4 <xTimerCreateTimerTask+0x38>
    36a0:	0f 2e       	mov	r0, r31
    36a2:	f5 ed       	ldi	r31, 0xD5	; 213
    36a4:	ef 2e       	mov	r14, r31
    36a6:	f7 e1       	ldi	r31, 0x17	; 23
    36a8:	ff 2e       	mov	r15, r31
    36aa:	f0 2d       	mov	r31, r0
    36ac:	03 e0       	ldi	r16, 0x03	; 3
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	40 ec       	ldi	r20, 0xC0	; 192
    36b4:	50 e0       	ldi	r21, 0x00	; 0
    36b6:	60 e6       	ldi	r22, 0x60	; 96
    36b8:	73 e0       	ldi	r23, 0x03	; 3
    36ba:	88 e5       	ldi	r24, 0x58	; 88
    36bc:	91 e0       	ldi	r25, 0x01	; 1
    36be:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskCreate>
    36c2:	01 c0       	rjmp	.+2      	; 0x36c6 <xTimerCreateTimerTask+0x3a>
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	0f 91       	pop	r16
    36c8:	ff 90       	pop	r15
    36ca:	ef 90       	pop	r14
    36cc:	08 95       	ret

000036ce <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    36ce:	8f 92       	push	r8
    36d0:	9f 92       	push	r9
    36d2:	af 92       	push	r10
    36d4:	bf 92       	push	r11
    36d6:	cf 92       	push	r12
    36d8:	df 92       	push	r13
    36da:	ef 92       	push	r14
    36dc:	ff 92       	push	r15
    36de:	0f 93       	push	r16
    36e0:	1f 93       	push	r17
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
    36ea:	27 97       	sbiw	r28, 0x07	; 7
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    36f6:	e0 91 d7 17 	lds	r30, 0x17D7	; 0x8017d7 <xTimerQueue>
    36fa:	f0 91 d8 17 	lds	r31, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    36fe:	30 97       	sbiw	r30, 0x00	; 0
    3700:	81 f1       	breq	.+96     	; 0x3762 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3702:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3704:	2a 83       	std	Y+2, r18	; 0x02
    3706:	3b 83       	std	Y+3, r19	; 0x03
    3708:	4c 83       	std	Y+4, r20	; 0x04
    370a:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    370c:	9f 83       	std	Y+7, r25	; 0x07
    370e:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3710:	66 30       	cpi	r22, 0x06	; 6
    3712:	f4 f4       	brge	.+60     	; 0x3750 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3714:	c3 da       	rcall	.-2682   	; 0x2c9c <xTaskGetSchedulerState>
    3716:	82 30       	cpi	r24, 0x02	; 2
    3718:	69 f4       	brne	.+26     	; 0x3734 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    371a:	00 e0       	ldi	r16, 0x00	; 0
    371c:	a7 01       	movw	r20, r14
    371e:	96 01       	movw	r18, r12
    3720:	be 01       	movw	r22, r28
    3722:	6f 5f       	subi	r22, 0xFF	; 255
    3724:	7f 4f       	sbci	r23, 0xFF	; 255
    3726:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    372a:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    372e:	0e 94 b7 08 	call	0x116e	; 0x116e <xQueueGenericSend>
    3732:	18 c0       	rjmp	.+48     	; 0x3764 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3734:	00 e0       	ldi	r16, 0x00	; 0
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	a9 01       	movw	r20, r18
    373c:	be 01       	movw	r22, r28
    373e:	6f 5f       	subi	r22, 0xFF	; 255
    3740:	7f 4f       	sbci	r23, 0xFF	; 255
    3742:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    3746:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    374a:	0e 94 b7 08 	call	0x116e	; 0x116e <xQueueGenericSend>
    374e:	0a c0       	rjmp	.+20     	; 0x3764 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	a8 01       	movw	r20, r16
    3754:	be 01       	movw	r22, r28
    3756:	6f 5f       	subi	r22, 0xFF	; 255
    3758:	7f 4f       	sbci	r23, 0xFF	; 255
    375a:	cf 01       	movw	r24, r30
    375c:	0e 94 67 09 	call	0x12ce	; 0x12ce <xQueueGenericSendFromISR>
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3762:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3764:	27 96       	adiw	r28, 0x07	; 7
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	0f 91       	pop	r16
    3778:	ff 90       	pop	r15
    377a:	ef 90       	pop	r14
    377c:	df 90       	pop	r13
    377e:	cf 90       	pop	r12
    3780:	bf 90       	pop	r11
    3782:	af 90       	pop	r10
    3784:	9f 90       	pop	r9
    3786:	8f 90       	pop	r8
    3788:	08 95       	ret

0000378a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    378a:	8f 92       	push	r8
    378c:	9f 92       	push	r9
    378e:	af 92       	push	r10
    3790:	bf 92       	push	r11
    3792:	cf 92       	push	r12
    3794:	df 92       	push	r13
    3796:	ef 92       	push	r14
    3798:	ff 92       	push	r15
    379a:	0f 93       	push	r16
    379c:	1f 93       	push	r17
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    37a2:	3b c0       	rjmp	.+118    	; 0x381a <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    37a4:	07 80       	ldd	r0, Z+7	; 0x07
    37a6:	f0 85       	ldd	r31, Z+8	; 0x08
    37a8:	e0 2d       	mov	r30, r0
    37aa:	80 80       	ld	r8, Z
    37ac:	91 80       	ldd	r9, Z+1	; 0x01
    37ae:	a2 80       	ldd	r10, Z+2	; 0x02
    37b0:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37b2:	c0 85       	ldd	r28, Z+8	; 0x08
    37b4:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37b6:	8e 01       	movw	r16, r28
    37b8:	0e 5f       	subi	r16, 0xFE	; 254
    37ba:	1f 4f       	sbci	r17, 0xFF	; 255
    37bc:	c8 01       	movw	r24, r16
    37be:	0e 94 23 06 	call	0xc46	; 0xc46 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37c2:	ec 89       	ldd	r30, Y+20	; 0x14
    37c4:	fd 89       	ldd	r31, Y+21	; 0x15
    37c6:	ce 01       	movw	r24, r28
    37c8:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    37ca:	8e 89       	ldd	r24, Y+22	; 0x16
    37cc:	82 ff       	sbrs	r24, 2
    37ce:	25 c0       	rjmp	.+74     	; 0x381a <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    37d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    37d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    37d4:	a8 89       	ldd	r26, Y+16	; 0x10
    37d6:	b9 89       	ldd	r27, Y+17	; 0x11
    37d8:	88 0d       	add	r24, r8
    37da:	99 1d       	adc	r25, r9
    37dc:	aa 1d       	adc	r26, r10
    37de:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    37e0:	88 16       	cp	r8, r24
    37e2:	99 06       	cpc	r9, r25
    37e4:	aa 06       	cpc	r10, r26
    37e6:	bb 06       	cpc	r11, r27
    37e8:	70 f4       	brcc	.+28     	; 0x3806 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    37ea:	8a 83       	std	Y+2, r24	; 0x02
    37ec:	9b 83       	std	Y+3, r25	; 0x03
    37ee:	ac 83       	std	Y+4, r26	; 0x04
    37f0:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    37f2:	db 87       	std	Y+11, r29	; 0x0b
    37f4:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    37f6:	b8 01       	movw	r22, r16
    37f8:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <pxCurrentTimerList>
    37fc:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    3800:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsert>
    3804:	0a c0       	rjmp	.+20     	; 0x381a <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3806:	c1 2c       	mov	r12, r1
    3808:	d1 2c       	mov	r13, r1
    380a:	76 01       	movw	r14, r12
    380c:	00 e0       	ldi	r16, 0x00	; 0
    380e:	10 e0       	ldi	r17, 0x00	; 0
    3810:	a5 01       	movw	r20, r10
    3812:	94 01       	movw	r18, r8
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	ce 01       	movw	r24, r28
    3818:	5a df       	rcall	.-332    	; 0x36ce <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    381a:	e0 91 db 17 	lds	r30, 0x17DB	; 0x8017db <pxCurrentTimerList>
    381e:	f0 91 dc 17 	lds	r31, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    3822:	80 81       	ld	r24, Z
    3824:	81 11       	cpse	r24, r1
    3826:	be cf       	rjmp	.-132    	; 0x37a4 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3828:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <pxOverflowTimerList>
    382c:	90 91 da 17 	lds	r25, 0x17DA	; 0x8017da <pxOverflowTimerList+0x1>
    3830:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <pxCurrentTimerList+0x1>
    3834:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3838:	f0 93 da 17 	sts	0x17DA, r31	; 0x8017da <pxOverflowTimerList+0x1>
    383c:	e0 93 d9 17 	sts	0x17D9, r30	; 0x8017d9 <pxOverflowTimerList>
    }
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	1f 91       	pop	r17
    3846:	0f 91       	pop	r16
    3848:	ff 90       	pop	r15
    384a:	ef 90       	pop	r14
    384c:	df 90       	pop	r13
    384e:	cf 90       	pop	r12
    3850:	bf 90       	pop	r11
    3852:	af 90       	pop	r10
    3854:	9f 90       	pop	r9
    3856:	8f 90       	pop	r8
    3858:	08 95       	ret

0000385a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    385a:	cf 92       	push	r12
    385c:	df 92       	push	r13
    385e:	ef 92       	push	r14
    3860:	ff 92       	push	r15
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3868:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskGetTickCount>
    386c:	6b 01       	movw	r12, r22
    386e:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3870:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <xLastTime.2436>
    3874:	90 91 d2 17 	lds	r25, 0x17D2	; 0x8017d2 <xLastTime.2436+0x1>
    3878:	a0 91 d3 17 	lds	r26, 0x17D3	; 0x8017d3 <xLastTime.2436+0x2>
    387c:	b0 91 d4 17 	lds	r27, 0x17D4	; 0x8017d4 <xLastTime.2436+0x3>
    3880:	c8 16       	cp	r12, r24
    3882:	d9 06       	cpc	r13, r25
    3884:	ea 06       	cpc	r14, r26
    3886:	fb 06       	cpc	r15, r27
    3888:	20 f4       	brcc	.+8      	; 0x3892 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    388a:	7f df       	rcall	.-258    	; 0x378a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	88 83       	st	Y, r24
    3890:	01 c0       	rjmp	.+2      	; 0x3894 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3892:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3894:	c0 92 d1 17 	sts	0x17D1, r12	; 0x8017d1 <xLastTime.2436>
    3898:	d0 92 d2 17 	sts	0x17D2, r13	; 0x8017d2 <xLastTime.2436+0x1>
    389c:	e0 92 d3 17 	sts	0x17D3, r14	; 0x8017d3 <xLastTime.2436+0x2>
    38a0:	f0 92 d4 17 	sts	0x17D4, r15	; 0x8017d4 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    38a4:	c7 01       	movw	r24, r14
    38a6:	b6 01       	movw	r22, r12
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	ff 90       	pop	r15
    38ae:	ef 90       	pop	r14
    38b0:	df 90       	pop	r13
    38b2:	cf 90       	pop	r12
    38b4:	08 95       	ret

000038b6 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    38b6:	4f 92       	push	r4
    38b8:	5f 92       	push	r5
    38ba:	6f 92       	push	r6
    38bc:	7f 92       	push	r7
    38be:	8f 92       	push	r8
    38c0:	9f 92       	push	r9
    38c2:	af 92       	push	r10
    38c4:	bf 92       	push	r11
    38c6:	cf 92       	push	r12
    38c8:	df 92       	push	r13
    38ca:	ef 92       	push	r14
    38cc:	ff 92       	push	r15
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	4b 01       	movw	r8, r22
    38d8:	5c 01       	movw	r10, r24
    38da:	29 01       	movw	r4, r18
    38dc:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    38de:	e0 91 db 17 	lds	r30, 0x17DB	; 0x8017db <pxCurrentTimerList>
    38e2:	f0 91 dc 17 	lds	r31, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    38e6:	07 80       	ldd	r0, Z+7	; 0x07
    38e8:	f0 85       	ldd	r31, Z+8	; 0x08
    38ea:	e0 2d       	mov	r30, r0
    38ec:	c0 85       	ldd	r28, Z+8	; 0x08
    38ee:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    38f0:	ce 01       	movw	r24, r28
    38f2:	02 96       	adiw	r24, 0x02	; 2
    38f4:	0e 94 23 06 	call	0xc46	; 0xc46 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    38f8:	8e 89       	ldd	r24, Y+22	; 0x16
    38fa:	82 ff       	sbrs	r24, 2
    38fc:	1b c0       	rjmp	.+54     	; 0x3934 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    38fe:	4e 85       	ldd	r20, Y+14	; 0x0e
    3900:	5f 85       	ldd	r21, Y+15	; 0x0f
    3902:	68 89       	ldd	r22, Y+16	; 0x10
    3904:	79 89       	ldd	r23, Y+17	; 0x11
    3906:	48 0d       	add	r20, r8
    3908:	59 1d       	adc	r21, r9
    390a:	6a 1d       	adc	r22, r10
    390c:	7b 1d       	adc	r23, r11
    390e:	75 01       	movw	r14, r10
    3910:	64 01       	movw	r12, r8
    3912:	93 01       	movw	r18, r6
    3914:	82 01       	movw	r16, r4
    3916:	ce 01       	movw	r24, r28
    3918:	47 de       	rcall	.-882    	; 0x35a8 <prvInsertTimerInActiveList>
    391a:	88 23       	and	r24, r24
    391c:	69 f0       	breq	.+26     	; 0x3938 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    391e:	c1 2c       	mov	r12, r1
    3920:	d1 2c       	mov	r13, r1
    3922:	76 01       	movw	r14, r12
    3924:	00 e0       	ldi	r16, 0x00	; 0
    3926:	10 e0       	ldi	r17, 0x00	; 0
    3928:	a5 01       	movw	r20, r10
    392a:	94 01       	movw	r18, r8
    392c:	60 e0       	ldi	r22, 0x00	; 0
    392e:	ce 01       	movw	r24, r28
    3930:	ce de       	rcall	.-612    	; 0x36ce <xTimerGenericCommand>
    3932:	02 c0       	rjmp	.+4      	; 0x3938 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3934:	8e 7f       	andi	r24, 0xFE	; 254
    3936:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3938:	ec 89       	ldd	r30, Y+20	; 0x14
    393a:	fd 89       	ldd	r31, Y+21	; 0x15
    393c:	ce 01       	movw	r24, r28
    393e:	19 95       	eicall
    }
    3940:	df 91       	pop	r29
    3942:	cf 91       	pop	r28
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	ff 90       	pop	r15
    394a:	ef 90       	pop	r14
    394c:	df 90       	pop	r13
    394e:	cf 90       	pop	r12
    3950:	bf 90       	pop	r11
    3952:	af 90       	pop	r10
    3954:	9f 90       	pop	r9
    3956:	8f 90       	pop	r8
    3958:	7f 90       	pop	r7
    395a:	6f 90       	pop	r6
    395c:	5f 90       	pop	r5
    395e:	4f 90       	pop	r4
    3960:	08 95       	ret

00003962 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3962:	8f 92       	push	r8
    3964:	9f 92       	push	r9
    3966:	af 92       	push	r10
    3968:	bf 92       	push	r11
    396a:	cf 92       	push	r12
    396c:	df 92       	push	r13
    396e:	ef 92       	push	r14
    3970:	ff 92       	push	r15
    3972:	1f 93       	push	r17
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	1f 92       	push	r1
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	6b 01       	movw	r12, r22
    3980:	7c 01       	movw	r14, r24
    3982:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3984:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3988:	ce 01       	movw	r24, r28
    398a:	01 96       	adiw	r24, 0x01	; 1
    398c:	66 df       	rcall	.-308    	; 0x385a <prvSampleTimeNow>
    398e:	4b 01       	movw	r8, r22
    3990:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3992:	89 81       	ldd	r24, Y+1	; 0x01
    3994:	81 11       	cpse	r24, r1
    3996:	2d c0       	rjmp	.+90     	; 0x39f2 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3998:	11 11       	cpse	r17, r1
    399a:	0d c0       	rjmp	.+26     	; 0x39b6 <prvProcessTimerOrBlockTask+0x54>
    399c:	8c 14       	cp	r8, r12
    399e:	9d 04       	cpc	r9, r13
    39a0:	ae 04       	cpc	r10, r14
    39a2:	bf 04       	cpc	r11, r15
    39a4:	40 f0       	brcs	.+16     	; 0x39b6 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    39a6:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    39aa:	a5 01       	movw	r20, r10
    39ac:	94 01       	movw	r18, r8
    39ae:	c7 01       	movw	r24, r14
    39b0:	b6 01       	movw	r22, r12
    39b2:	81 df       	rcall	.-254    	; 0x38b6 <prvProcessExpiredTimer>
    39b4:	20 c0       	rjmp	.+64     	; 0x39f6 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    39b6:	11 23       	and	r17, r17
    39b8:	41 f0       	breq	.+16     	; 0x39ca <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    39ba:	e0 91 d9 17 	lds	r30, 0x17D9	; 0x8017d9 <pxOverflowTimerList>
    39be:	f0 91 da 17 	lds	r31, 0x17DA	; 0x8017da <pxOverflowTimerList+0x1>
    39c2:	80 81       	ld	r24, Z
    39c4:	11 e0       	ldi	r17, 0x01	; 1
    39c6:	81 11       	cpse	r24, r1
    39c8:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    39ca:	b7 01       	movw	r22, r14
    39cc:	a6 01       	movw	r20, r12
    39ce:	48 19       	sub	r20, r8
    39d0:	59 09       	sbc	r21, r9
    39d2:	6a 09       	sbc	r22, r10
    39d4:	7b 09       	sbc	r23, r11
    39d6:	21 2f       	mov	r18, r17
    39d8:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    39dc:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    39e0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    39e4:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>
    39e8:	81 11       	cpse	r24, r1
    39ea:	05 c0       	rjmp	.+10     	; 0x39f6 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    39ec:	0e 94 9f 06 	call	0xd3e	; 0xd3e <vPortYield>
    39f0:	02 c0       	rjmp	.+4      	; 0x39f6 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    39f2:	0e 94 0b 12 	call	0x2416	; 0x2416 <xTaskResumeAll>
            }
        }
    }
    39f6:	0f 90       	pop	r0
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	1f 91       	pop	r17
    39fe:	ff 90       	pop	r15
    3a00:	ef 90       	pop	r14
    3a02:	df 90       	pop	r13
    3a04:	cf 90       	pop	r12
    3a06:	bf 90       	pop	r11
    3a08:	af 90       	pop	r10
    3a0a:	9f 90       	pop	r9
    3a0c:	8f 90       	pop	r8
    3a0e:	08 95       	ret

00003a10 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3a10:	af 92       	push	r10
    3a12:	bf 92       	push	r11
    3a14:	cf 92       	push	r12
    3a16:	df 92       	push	r13
    3a18:	ef 92       	push	r14
    3a1a:	ff 92       	push	r15
    3a1c:	0f 93       	push	r16
    3a1e:	1f 93       	push	r17
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
    3a28:	28 97       	sbiw	r28, 0x08	; 8
    3a2a:	0f b6       	in	r0, 0x3f	; 63
    3a2c:	f8 94       	cli
    3a2e:	de bf       	out	0x3e, r29	; 62
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3a34:	82 c0       	rjmp	.+260    	; 0x3b3a <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	88 23       	and	r24, r24
    3a3a:	0c f4       	brge	.+2      	; 0x3a3e <prvProcessReceivedCommands+0x2e>
    3a3c:	7e c0       	rjmp	.+252    	; 0x3b3a <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3a3e:	ae 80       	ldd	r10, Y+6	; 0x06
    3a40:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3a42:	d5 01       	movw	r26, r10
    3a44:	1c 96       	adiw	r26, 0x0c	; 12
    3a46:	8d 91       	ld	r24, X+
    3a48:	9c 91       	ld	r25, X
    3a4a:	1d 97       	sbiw	r26, 0x0d	; 13
    3a4c:	89 2b       	or	r24, r25
    3a4e:	21 f0       	breq	.+8      	; 0x3a58 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a50:	c5 01       	movw	r24, r10
    3a52:	02 96       	adiw	r24, 0x02	; 2
    3a54:	0e 94 23 06 	call	0xc46	; 0xc46 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a58:	ce 01       	movw	r24, r28
    3a5a:	08 96       	adiw	r24, 0x08	; 8
    3a5c:	fe de       	rcall	.-516    	; 0x385a <prvSampleTimeNow>
    3a5e:	8b 01       	movw	r16, r22
    3a60:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3a62:	e9 81       	ldd	r30, Y+1	; 0x01
    3a64:	0e 2e       	mov	r0, r30
    3a66:	00 0c       	add	r0, r0
    3a68:	ff 0b       	sbc	r31, r31
    3a6a:	ea 30       	cpi	r30, 0x0A	; 10
    3a6c:	f1 05       	cpc	r31, r1
    3a6e:	08 f0       	brcs	.+2      	; 0x3a72 <prvProcessReceivedCommands+0x62>
    3a70:	64 c0       	rjmp	.+200    	; 0x3b3a <prvProcessReceivedCommands+0x12a>
    3a72:	88 27       	eor	r24, r24
    3a74:	ee 58       	subi	r30, 0x8E	; 142
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	8f 4f       	sbci	r24, 0xFF	; 255
    3a7a:	0c 94 ba 33 	jmp	0x6774	; 0x6774 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3a7e:	f5 01       	movw	r30, r10
    3a80:	86 89       	ldd	r24, Z+22	; 0x16
    3a82:	81 60       	ori	r24, 0x01	; 1
    3a84:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3a86:	ca 80       	ldd	r12, Y+2	; 0x02
    3a88:	db 80       	ldd	r13, Y+3	; 0x03
    3a8a:	ec 80       	ldd	r14, Y+4	; 0x04
    3a8c:	fd 80       	ldd	r15, Y+5	; 0x05
    3a8e:	46 85       	ldd	r20, Z+14	; 0x0e
    3a90:	57 85       	ldd	r21, Z+15	; 0x0f
    3a92:	60 89       	ldd	r22, Z+16	; 0x10
    3a94:	71 89       	ldd	r23, Z+17	; 0x11
    3a96:	4c 0d       	add	r20, r12
    3a98:	5d 1d       	adc	r21, r13
    3a9a:	6e 1d       	adc	r22, r14
    3a9c:	7f 1d       	adc	r23, r15
    3a9e:	c5 01       	movw	r24, r10
    3aa0:	83 dd       	rcall	.-1274   	; 0x35a8 <prvInsertTimerInActiveList>
    3aa2:	88 23       	and	r24, r24
    3aa4:	09 f4       	brne	.+2      	; 0x3aa8 <prvProcessReceivedCommands+0x98>
    3aa6:	49 c0       	rjmp	.+146    	; 0x3b3a <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3aa8:	d5 01       	movw	r26, r10
    3aaa:	54 96       	adiw	r26, 0x14	; 20
    3aac:	ed 91       	ld	r30, X+
    3aae:	fc 91       	ld	r31, X
    3ab0:	55 97       	sbiw	r26, 0x15	; 21
    3ab2:	c5 01       	movw	r24, r10
    3ab4:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3ab6:	f5 01       	movw	r30, r10
    3ab8:	86 89       	ldd	r24, Z+22	; 0x16
    3aba:	82 ff       	sbrs	r24, 2
    3abc:	3e c0       	rjmp	.+124    	; 0x3b3a <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3abe:	4a 81       	ldd	r20, Y+2	; 0x02
    3ac0:	5b 81       	ldd	r21, Y+3	; 0x03
    3ac2:	6c 81       	ldd	r22, Y+4	; 0x04
    3ac4:	7d 81       	ldd	r23, Y+5	; 0x05
    3ac6:	86 85       	ldd	r24, Z+14	; 0x0e
    3ac8:	97 85       	ldd	r25, Z+15	; 0x0f
    3aca:	a0 89       	ldd	r26, Z+16	; 0x10
    3acc:	b1 89       	ldd	r27, Z+17	; 0x11
    3ace:	9a 01       	movw	r18, r20
    3ad0:	ab 01       	movw	r20, r22
    3ad2:	28 0f       	add	r18, r24
    3ad4:	39 1f       	adc	r19, r25
    3ad6:	4a 1f       	adc	r20, r26
    3ad8:	5b 1f       	adc	r21, r27
    3ada:	c1 2c       	mov	r12, r1
    3adc:	d1 2c       	mov	r13, r1
    3ade:	76 01       	movw	r14, r12
    3ae0:	00 e0       	ldi	r16, 0x00	; 0
    3ae2:	10 e0       	ldi	r17, 0x00	; 0
    3ae4:	60 e0       	ldi	r22, 0x00	; 0
    3ae6:	c5 01       	movw	r24, r10
    3ae8:	f2 dd       	rcall	.-1052   	; 0x36ce <xTimerGenericCommand>
    3aea:	27 c0       	rjmp	.+78     	; 0x3b3a <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3aec:	d5 01       	movw	r26, r10
    3aee:	56 96       	adiw	r26, 0x16	; 22
    3af0:	8c 91       	ld	r24, X
    3af2:	56 97       	sbiw	r26, 0x16	; 22
    3af4:	8e 7f       	andi	r24, 0xFE	; 254
    3af6:	56 96       	adiw	r26, 0x16	; 22
    3af8:	8c 93       	st	X, r24
                        break;
    3afa:	1f c0       	rjmp	.+62     	; 0x3b3a <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3afc:	f5 01       	movw	r30, r10
    3afe:	86 89       	ldd	r24, Z+22	; 0x16
    3b00:	81 60       	ori	r24, 0x01	; 1
    3b02:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3b04:	4a 81       	ldd	r20, Y+2	; 0x02
    3b06:	5b 81       	ldd	r21, Y+3	; 0x03
    3b08:	6c 81       	ldd	r22, Y+4	; 0x04
    3b0a:	7d 81       	ldd	r23, Y+5	; 0x05
    3b0c:	46 87       	std	Z+14, r20	; 0x0e
    3b0e:	57 87       	std	Z+15, r21	; 0x0f
    3b10:	60 8b       	std	Z+16, r22	; 0x10
    3b12:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3b14:	40 0f       	add	r20, r16
    3b16:	51 1f       	adc	r21, r17
    3b18:	62 1f       	adc	r22, r18
    3b1a:	73 1f       	adc	r23, r19
    3b1c:	68 01       	movw	r12, r16
    3b1e:	79 01       	movw	r14, r18
    3b20:	c5 01       	movw	r24, r10
    3b22:	42 dd       	rcall	.-1404   	; 0x35a8 <prvInsertTimerInActiveList>
                        break;
    3b24:	0a c0       	rjmp	.+20     	; 0x3b3a <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3b26:	f5 01       	movw	r30, r10
    3b28:	86 89       	ldd	r24, Z+22	; 0x16
    3b2a:	81 fd       	sbrc	r24, 1
    3b2c:	04 c0       	rjmp	.+8      	; 0x3b36 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3b2e:	c5 01       	movw	r24, r10
    3b30:	0e 94 94 05 	call	0xb28	; 0xb28 <vPortFree>
    3b34:	02 c0       	rjmp	.+4      	; 0x3b3a <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b36:	8e 7f       	andi	r24, 0xFE	; 254
    3b38:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	a9 01       	movw	r20, r18
    3b40:	be 01       	movw	r22, r28
    3b42:	6f 5f       	subi	r22, 0xFF	; 255
    3b44:	7f 4f       	sbci	r23, 0xFF	; 255
    3b46:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    3b4a:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    3b4e:	0e 94 a2 09 	call	0x1344	; 0x1344 <xQueueReceive>
    3b52:	81 11       	cpse	r24, r1
    3b54:	70 cf       	rjmp	.-288    	; 0x3a36 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3b56:	28 96       	adiw	r28, 0x08	; 8
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	df 91       	pop	r29
    3b64:	cf 91       	pop	r28
    3b66:	1f 91       	pop	r17
    3b68:	0f 91       	pop	r16
    3b6a:	ff 90       	pop	r15
    3b6c:	ef 90       	pop	r14
    3b6e:	df 90       	pop	r13
    3b70:	cf 90       	pop	r12
    3b72:	bf 90       	pop	r11
    3b74:	af 90       	pop	r10
    3b76:	08 95       	ret

00003b78 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3b78:	08 95       	ret

00003b7a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3b7a:	84 b1       	in	r24, 0x04	; 4
    3b7c:	80 68       	ori	r24, 0x80	; 128
    3b7e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3b80:	85 b1       	in	r24, 0x05	; 5
    3b82:	80 68       	ori	r24, 0x80	; 128
    3b84:	85 b9       	out	0x05, r24	; 5
    3b86:	08 95       	ret

00003b88 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3b88:	83 b1       	in	r24, 0x03	; 3
    3b8a:	80 68       	ori	r24, 0x80	; 128
    3b8c:	83 b9       	out	0x03, r24	; 3
    3b8e:	08 95       	ret

00003b90 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3b90:	f4 df       	rcall	.-24     	; 0x3b7a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b92:	2f ef       	ldi	r18, 0xFF	; 255
    3b94:	80 e7       	ldi	r24, 0x70	; 112
    3b96:	92 e0       	ldi	r25, 0x02	; 2
    3b98:	21 50       	subi	r18, 0x01	; 1
    3b9a:	80 40       	sbci	r24, 0x00	; 0
    3b9c:	90 40       	sbci	r25, 0x00	; 0
    3b9e:	e1 f7       	brne	.-8      	; 0x3b98 <vApplicationMallocFailedHook+0x8>
    3ba0:	00 c0       	rjmp	.+0      	; 0x3ba2 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3ba2:	00 00       	nop
    3ba4:	f1 df       	rcall	.-30     	; 0x3b88 <prvBlinkMainLed>
    3ba6:	f5 cf       	rjmp	.-22     	; 0x3b92 <vApplicationMallocFailedHook+0x2>

00003ba8 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3ba8:	e8 df       	rcall	.-48     	; 0x3b7a <prvSetMainLedOn>
    3baa:	2f ef       	ldi	r18, 0xFF	; 255
    3bac:	87 ea       	ldi	r24, 0xA7	; 167
    3bae:	91 e6       	ldi	r25, 0x61	; 97
    3bb0:	21 50       	subi	r18, 0x01	; 1
    3bb2:	80 40       	sbci	r24, 0x00	; 0
    3bb4:	90 40       	sbci	r25, 0x00	; 0
    3bb6:	e1 f7       	brne	.-8      	; 0x3bb0 <vApplicationStackOverflowHook+0x8>
    3bb8:	00 c0       	rjmp	.+0      	; 0x3bba <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3bba:	00 00       	nop
    3bbc:	e5 df       	rcall	.-54     	; 0x3b88 <prvBlinkMainLed>
    3bbe:	f5 cf       	rjmp	.-22     	; 0x3baa <vApplicationStackOverflowHook+0x2>

00003bc0 <set_temperature_percent>:
static uint16_t humidityPercent;
static uint16_t CO2_PPM;
static uint8_t status = 0x10;

void set_temperature_percent(int16_t temperature){
	temperaturePercent = temperature;
    3bc0:	90 93 f8 17 	sts	0x17F8, r25	; 0x8017f8 <temperaturePercent+0x1>
    3bc4:	80 93 f7 17 	sts	0x17F7, r24	; 0x8017f7 <temperaturePercent>
    3bc8:	08 95       	ret

00003bca <set_humidity_percent>:
}

void set_humidity_percent(uint16_t humidity){
	humidityPercent = humidity;
    3bca:	90 93 f6 17 	sts	0x17F6, r25	; 0x8017f6 <humidityPercent+0x1>
    3bce:	80 93 f5 17 	sts	0x17F5, r24	; 0x8017f5 <humidityPercent>
    3bd2:	08 95       	ret

00003bd4 <set_CO2_ppm>:
}

void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    3bd4:	90 93 f4 17 	sts	0x17F4, r25	; 0x8017f4 <CO2_PPM+0x1>
    3bd8:	80 93 f3 17 	sts	0x17F3, r24	; 0x8017f3 <CO2_PPM>
    3bdc:	08 95       	ret

00003bde <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    3bde:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    3be0:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    3be2:	87 e0       	ldi	r24, 0x07	; 7
    3be4:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3be6:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <temperaturePercent>
    3bea:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <temperaturePercent+0x1>
    3bee:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    3bf0:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3bf2:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <humidityPercent>
    3bf6:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <humidityPercent+0x1>
    3bfa:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    3bfc:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    3bfe:	80 91 f3 17 	lds	r24, 0x17F3	; 0x8017f3 <CO2_PPM>
    3c02:	90 91 f4 17 	lds	r25, 0x17F4	; 0x8017f4 <CO2_PPM+0x1>
    3c06:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    3c08:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    3c0a:	80 e1       	ldi	r24, 0x10	; 16
    3c0c:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    3c0e:	cf 01       	movw	r24, r30
    3c10:	08 95       	ret

00003c12 <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    3c12:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <lastCO2ppm+0x1>
    3c16:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <lastCO2ppm>
    3c1a:	08 95       	ret

00003c1c <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    3c1c:	83 e0       	ldi	r24, 0x03	; 3
    3c1e:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    3c22:	89 e0       	ldi	r24, 0x09	; 9
    3c24:	9e e1       	ldi	r25, 0x1E	; 30
    3c26:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <mh_z19_injectCallBack>
    3c2a:	08 95       	ret

00003c2c <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    3c2c:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <mh_z19_takeMeassuring>
    3c30:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <rc>
	if (rc != MHZ19_OK)
    3c34:	88 23       	and	r24, r24
    3c36:	41 f0       	breq	.+16     	; 0x3c48 <CO2_measure+0x1c>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
    3c38:	88 e6       	ldi	r24, 0x68	; 104
    3c3a:	93 e0       	ldi	r25, 0x03	; 3
    3c3c:	9f 93       	push	r25
    3c3e:	8f 93       	push	r24
    3c40:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    3c44:	0f 90       	pop	r0
    3c46:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3c48:	89 ef       	ldi	r24, 0xF9	; 249
    3c4a:	97 e1       	ldi	r25, 0x17	; 23
    3c4c:	0e 94 76 26 	call	0x4cec	; 0x4cec <mh_z19_getCo2Ppm>
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <lastCO2ppm+0x1>
    3c56:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <lastCO2ppm>
    3c5a:	08 95       	ret

00003c5c <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3c5c:	cc 24       	eor	r12, r12
    3c5e:	ca 94       	dec	r12
    3c60:	dc 2c       	mov	r13, r12
    3c62:	76 01       	movw	r14, r12
    3c64:	01 e0       	ldi	r16, 0x01	; 1
    3c66:	21 e0       	ldi	r18, 0x01	; 1
    3c68:	41 e0       	ldi	r20, 0x01	; 1
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	60 e0       	ldi	r22, 0x00	; 0
    3c6e:	70 e0       	ldi	r23, 0x00	; 0
    3c70:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <measureEventGroup>
    3c74:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <measureEventGroup+0x1>
    3c78:	0e 94 4a 03 	call	0x694	; 0x694 <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3c7c:	60 ff       	sbrs	r22, 0
    3c7e:	ee cf       	rjmp	.-36     	; 0x3c5c <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    3c80:	d5 df       	rcall	.-86     	; 0x3c2c <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    3c82:	42 e0       	ldi	r20, 0x02	; 2
    3c84:	50 e0       	ldi	r21, 0x00	; 0
    3c86:	60 e0       	ldi	r22, 0x00	; 0
    3c88:	70 e0       	ldi	r23, 0x00	; 0
    3c8a:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <dataReadyEventGroup>
    3c8e:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <dataReadyEventGroup+0x1>
    3c92:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <xEventGroupSetBits>
    3c96:	e2 cf       	rjmp	.-60     	; 0x3c5c <MeasureCo2Task>

00003c98 <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    3c98:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <lastCO2ppm>
    3c9c:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <lastCO2ppm+0x1>
    3ca0:	08 95       	ret

00003ca2 <create_CO2_sensor_task>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void create_CO2_sensor_task(UBaseType_t priority){
    3ca2:	ef 92       	push	r14
    3ca4:	ff 92       	push	r15
    3ca6:	0f 93       	push	r16
    3ca8:	08 2f       	mov	r16, r24
	
	//Initializing 
		CO2_createSensor();
    3caa:	b8 df       	rcall	.-144    	; 0x3c1c <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    3cac:	e1 2c       	mov	r14, r1
    3cae:	f1 2c       	mov	r15, r1
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 ec       	ldi	r20, 0xC0	; 192
    3cb6:	50 e0       	ldi	r21, 0x00	; 0
    3cb8:	68 e9       	ldi	r22, 0x98	; 152
    3cba:	73 e0       	ldi	r23, 0x03	; 3
    3cbc:	8e e2       	ldi	r24, 0x2E	; 46
    3cbe:	9e e1       	ldi	r25, 0x1E	; 30
    3cc0:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY + priority,
		NULL);
}
    3cc4:	0f 91       	pop	r16
    3cc6:	ff 90       	pop	r15
    3cc8:	ef 90       	pop	r14
    3cca:	08 95       	ret

00003ccc <initialise_TempHumSensor>:
void Temp_Hum_Main_Task(void *pvParameters);


void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    3ccc:	6c d2       	rcall	.+1240   	; 0x41a6 <hih8120_initialise>
    3cce:	88 23       	and	r24, r24
    3cd0:	41 f0       	breq	.+16     	; 0x3ce2 <initialise_TempHumSensor+0x16>
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{
		printf("Something went wrong while initialising tempHum sensor");
    3cd2:	8a ea       	ldi	r24, 0xAA	; 170
    3cd4:	93 e0       	ldi	r25, 0x03	; 3
    3cd6:	9f 93       	push	r25
    3cd8:	8f 93       	push	r24
    3cda:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    3cde:	0f 90       	pop	r0
    3ce0:	0f 90       	pop	r0
    3ce2:	08 95       	ret

00003ce4 <create_TempHum_sensor_task>:
	}
}


void create_TempHum_sensor_task(UBaseType_t priority){
    3ce4:	ef 92       	push	r14
    3ce6:	ff 92       	push	r15
    3ce8:	0f 93       	push	r16
    3cea:	08 2f       	mov	r16, r24
	initialise_TempHumSensor();
    3cec:	ef df       	rcall	.-34     	; 0x3ccc <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    3cee:	e1 2c       	mov	r14, r1
    3cf0:	f1 2c       	mov	r15, r1
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 ec       	ldi	r20, 0xC0	; 192
    3cf8:	50 e0       	ldi	r21, 0x00	; 0
    3cfa:	61 ee       	ldi	r22, 0xE1	; 225
    3cfc:	73 e0       	ldi	r23, 0x03	; 3
    3cfe:	8c eb       	ldi	r24, 0xBC	; 188
    3d00:	9e e1       	ldi	r25, 0x1E	; 30
    3d02:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
	
}
    3d06:	0f 91       	pop	r16
    3d08:	ff 90       	pop	r15
    3d0a:	ef 90       	pop	r14
    3d0c:	08 95       	ret

00003d0e <measure_Temp_Hum>:

void measure_Temp_Hum(){
	
	if ( HIH8120_OK != hih8120_wakeup() )
    3d0e:	63 d2       	rcall	.+1222   	; 0x41d6 <hih8120_wakeup>
    3d10:	88 23       	and	r24, r24
    3d12:	21 f0       	breq	.+8      	; 0x3d1c <measure_Temp_Hum+0xe>
	{
		printf("Could not wake up temp hum sensor \n");
    3d14:	8d ee       	ldi	r24, 0xED	; 237
    3d16:	93 e0       	ldi	r25, 0x03	; 3
    3d18:	0e 94 98 36 	call	0x6d30	; 0x6d30 <puts>
		// Something went wrong
		// Investigate the return code further
	}

	vTaskDelay(pdMS_TO_TICKS(60));
    3d1c:	63 e0       	ldi	r22, 0x03	; 3
    3d1e:	70 e0       	ldi	r23, 0x00	; 0
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	0e 94 4c 13 	call	0x2698	; 0x2698 <vTaskDelay>
// 		humidity = hih8120_getHumidityPercent_x10();
// 		temperature = hih8120_getTemperature_x10();
// 		count = 0;
// 		//----------------------------
	
	int16_t returnCode = hih8120_measure();
    3d28:	6b d2       	rcall	.+1238   	; 0x4200 <hih8120_measure>
		case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED";		/**< Driver must be initialise before use */
		case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY";									/**< The two wire/I2C interface is busy */
	}
	
	
	if ( returnCode != HIH8120_OK  )
    3d2a:	88 23       	and	r24, r24
    3d2c:	71 f0       	breq	.+28     	; 0x3d4a <measure_Temp_Hum+0x3c>
	{
		printf("Could not measure temp hum sensor, code: %s \n", returnCodeString);
    3d2e:	80 e1       	ldi	r24, 0x10	; 16
    3d30:	94 e0       	ldi	r25, 0x04	; 4
    3d32:	9f 93       	push	r25
    3d34:	8f 93       	push	r24
    3d36:	81 e2       	ldi	r24, 0x21	; 33
    3d38:	94 e0       	ldi	r25, 0x04	; 4
    3d3a:	9f 93       	push	r25
    3d3c:	8f 93       	push	r24
    3d3e:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	
	vTaskDelay(pdMS_TO_TICKS(50));
    3d4a:	63 e0       	ldi	r22, 0x03	; 3
    3d4c:	70 e0       	ldi	r23, 0x00	; 0
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	0e 94 4c 13 	call	0x2698	; 0x2698 <vTaskDelay>
	humidity = hih8120_getHumidityPercent_x10();
    3d56:	7a d2       	rcall	.+1268   	; 0x424c <hih8120_getHumidityPercent_x10>
    3d58:	90 93 fe 17 	sts	0x17FE, r25	; 0x8017fe <humidity+0x1>
    3d5c:	80 93 fd 17 	sts	0x17FD, r24	; 0x8017fd <humidity>
	temperature = hih8120_getTemperature_x10();
    3d60:	9b d2       	rcall	.+1334   	; 0x4298 <hih8120_getTemperature_x10>
    3d62:	90 93 fc 17 	sts	0x17FC, r25	; 0x8017fc <temperature+0x1>
    3d66:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <temperature>
	vTaskDelay(pdMS_TO_TICKS(50));
    3d6a:	63 e0       	ldi	r22, 0x03	; 3
    3d6c:	70 e0       	ldi	r23, 0x00	; 0
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <vTaskDelay>
    3d76:	08 95       	ret

00003d78 <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(void *pvParameters){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3d78:	cc 24       	eor	r12, r12
    3d7a:	ca 94       	dec	r12
    3d7c:	dc 2c       	mov	r13, r12
    3d7e:	76 01       	movw	r14, r12
    3d80:	01 e0       	ldi	r16, 0x01	; 1
    3d82:	21 e0       	ldi	r18, 0x01	; 1
    3d84:	44 e0       	ldi	r20, 0x04	; 4
    3d86:	50 e0       	ldi	r21, 0x00	; 0
    3d88:	60 e0       	ldi	r22, 0x00	; 0
    3d8a:	70 e0       	ldi	r23, 0x00	; 0
    3d8c:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <measureEventGroup>
    3d90:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <measureEventGroup+0x1>
    3d94:	0e 94 4a 03 	call	0x694	; 0x694 <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    3d98:	62 ff       	sbrs	r22, 2
    3d9a:	ee cf       	rjmp	.-36     	; 0x3d78 <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();			
    3d9c:	b8 df       	rcall	.-144    	; 0x3d0e <measure_Temp_Hum>
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    3d9e:	48 e0       	ldi	r20, 0x08	; 8
    3da0:	50 e0       	ldi	r21, 0x00	; 0
    3da2:	60 e0       	ldi	r22, 0x00	; 0
    3da4:	70 e0       	ldi	r23, 0x00	; 0
    3da6:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <dataReadyEventGroup>
    3daa:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <dataReadyEventGroup+0x1>
    3dae:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <xEventGroupSetBits>
    3db2:	e2 cf       	rjmp	.-60     	; 0x3d78 <Temp_Hum_Main_Task>

00003db4 <TempHumSensor_getTemp>:
	
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    3db4:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <temperature>
    3db8:	90 91 fc 17 	lds	r25, 0x17FC	; 0x8017fc <temperature+0x1>
    3dbc:	08 95       	ret

00003dbe <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    3dbe:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <humidity>
    3dc2:	90 91 fe 17 	lds	r25, 0x17FE	; 0x8017fe <humidity+0x1>
    3dc6:	08 95       	ret

00003dc8 <initialize_event_groups>:
MessageBufferHandle_t downlinkMessageBufferHandle;
SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    3dc8:	0e 94 37 03 	call	0x66e	; 0x66e <xEventGroupCreate>
    3dcc:	90 93 48 19 	sts	0x1948, r25	; 0x801948 <dataReadyEventGroup+0x1>
    3dd0:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    3dd4:	0e 94 37 03 	call	0x66e	; 0x66e <xEventGroupCreate>
    3dd8:	90 93 4a 19 	sts	0x194A, r25	; 0x80194a <measureEventGroup+0x1>
    3ddc:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <measureEventGroup>
    3de0:	08 95       	ret

00003de2 <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3de2:	41 e0       	ldi	r20, 0x01	; 1
    3de4:	60 e0       	ldi	r22, 0x00	; 0
    3de6:	70 e0       	ldi	r23, 0x00	; 0
    3de8:	8c e2       	ldi	r24, 0x2C	; 44
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	0e 94 41 0c 	call	0x1882	; 0x1882 <xStreamBufferGenericCreate>
    3df0:	90 93 4c 19 	sts	0x194C, r25	; 0x80194c <uplinkMessageBufferHandle+0x1>
    3df4:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    3df8:	89 2b       	or	r24, r25
    3dfa:	21 f4       	brne	.+8      	; 0x3e04 <initialize_message_buffers+0x22>
		printf("Failed to create uplink message buffer.\n");
    3dfc:	8f e4       	ldi	r24, 0x4F	; 79
    3dfe:	94 e0       	ldi	r25, 0x04	; 4
    3e00:	0e 94 98 36 	call	0x6d30	; 0x6d30 <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3e04:	41 e0       	ldi	r20, 0x01	; 1
    3e06:	60 e0       	ldi	r22, 0x00	; 0
    3e08:	70 e0       	ldi	r23, 0x00	; 0
    3e0a:	8c e2       	ldi	r24, 0x2C	; 44
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	0e 94 41 0c 	call	0x1882	; 0x1882 <xStreamBufferGenericCreate>
    3e12:	90 93 4e 19 	sts	0x194E, r25	; 0x80194e <downlinkMessageBufferHandle+0x1>
    3e16:	80 93 4d 19 	sts	0x194D, r24	; 0x80194d <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    3e1a:	89 2b       	or	r24, r25
    3e1c:	21 f4       	brne	.+8      	; 0x3e26 <initialize_message_buffers+0x44>
		printf("Failed to create downlink message buffer.\n");
    3e1e:	87 e7       	ldi	r24, 0x77	; 119
    3e20:	94 e0       	ldi	r25, 0x04	; 4
    3e22:	0c 94 98 36 	jmp	0x6d30	; 0x6d30 <puts>
    3e26:	08 95       	ret

00003e28 <initialize_semaphore>:
	}
}

 void initialize_semaphore(){
    3e28:	0f 93       	push	r16
 	configSemaphore = xSemaphoreCreateMutex();
    3e2a:	81 e0       	ldi	r24, 0x01	; 1
    3e2c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <xQueueCreateMutex>
    3e30:	90 93 46 19 	sts	0x1946, r25	; 0x801946 <configSemaphore+0x1>
    3e34:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <configSemaphore>
	 if(configSemaphore != NULL){
    3e38:	00 97       	sbiw	r24, 0x00	; 0
    3e3a:	49 f0       	breq	.+18     	; 0x3e4e <initialize_semaphore+0x26>
		 xSemaphoreGive(configSemaphore);
    3e3c:	00 e0       	ldi	r16, 0x00	; 0
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	a9 01       	movw	r20, r18
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	70 e0       	ldi	r23, 0x00	; 0
    3e48:	0e 94 b7 08 	call	0x116e	; 0x116e <xQueueGenericSend>
    3e4c:	08 c0       	rjmp	.+16     	; 0x3e5e <initialize_semaphore+0x36>
	 }
	 else{
		 printf("Failed to create config semaphore");
    3e4e:	81 ea       	ldi	r24, 0xA1	; 161
    3e50:	94 e0       	ldi	r25, 0x04	; 4
    3e52:	9f 93       	push	r25
    3e54:	8f 93       	push	r24
    3e56:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
	 }
 }
    3e5e:	0f 91       	pop	r16
    3e60:	08 95       	ret

00003e62 <initialise_rc_servo>:
 */ 

#include "ServoController.h"

void initialise_rc_servo(){
	rc_servo_initialise();
    3e62:	6d c7       	rjmp	.+3802   	; 0x4d3e <rc_servo_initialise>
    3e64:	08 95       	ret

00003e66 <servo_set_position>:
}
void servo_set_position(uint8_t servoNo, int8_t percent){
	rc_servo_setPosition(servoNo, percent);
    3e66:	53 c7       	rjmp	.+3750   	; 0x4d0e <rc_servo_setPosition>
    3e68:	08 95       	ret

00003e6a <_lora_setup>:
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}

static void _lora_setup(void)
{
    3e6a:	0f 93       	push	r16
    3e6c:	1f 93       	push	r17
    3e6e:	cf 93       	push	r28
    3e70:	df 93       	push	r29
    3e72:	cd b7       	in	r28, 0x3d	; 61
    3e74:	de b7       	in	r29, 0x3e	; 62
    3e76:	64 97       	sbiw	r28, 0x14	; 20
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	0e 94 cc 2b 	call	0x5798	; 0x5798 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3e88:	7f d3       	rcall	.+1790   	; 0x4588 <lora_driver_rn2483FactoryReset>
    3e8a:	fb d5       	rcall	.+3062   	; 0x4a82 <lora_driver_mapReturnCodeToText>
    3e8c:	9f 93       	push	r25
    3e8e:	8f 93       	push	r24
    3e90:	83 ec       	ldi	r24, 0xC3	; 195
    3e92:	94 e0       	ldi	r25, 0x04	; 4
    3e94:	9f 93       	push	r25
    3e96:	8f 93       	push	r24
    3e98:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3e9c:	f3 d4       	rcall	.+2534   	; 0x4884 <lora_driver_configureToEu868>
    3e9e:	f1 d5       	rcall	.+3042   	; 0x4a82 <lora_driver_mapReturnCodeToText>
    3ea0:	9f 93       	push	r25
    3ea2:	8f 93       	push	r24
    3ea4:	86 ed       	ldi	r24, 0xD6	; 214
    3ea6:	94 e0       	ldi	r25, 0x04	; 4
    3ea8:	9f 93       	push	r25
    3eaa:	8f 93       	push	r24
    3eac:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    3eb0:	8e 01       	movw	r16, r28
    3eb2:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb6:	c8 01       	movw	r24, r16
    3eb8:	79 d3       	rcall	.+1778   	; 0x45ac <lora_driver_getRn2483Hweui>
    3eba:	e3 d5       	rcall	.+3014   	; 0x4a82 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3ebc:	1f 93       	push	r17
    3ebe:	0f 93       	push	r16
    3ec0:	9f 93       	push	r25
    3ec2:	8f 93       	push	r24
    3ec4:	8f ee       	ldi	r24, 0xEF	; 239
    3ec6:	94 e0       	ldi	r25, 0x04	; 4
    3ec8:	9f 93       	push	r25
    3eca:	8f 93       	push	r24
    3ecc:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3ed0:	c8 01       	movw	r24, r16
    3ed2:	88 d3       	rcall	.+1808   	; 0x45e4 <lora_driver_setDeviceIdentifier>
    3ed4:	d6 d5       	rcall	.+2988   	; 0x4a82 <lora_driver_mapReturnCodeToText>
    3ed6:	9f 93       	push	r25
    3ed8:	8f 93       	push	r24
    3eda:	1f 93       	push	r17
    3edc:	0f 93       	push	r16
    3ede:	83 e0       	ldi	r24, 0x03	; 3
    3ee0:	95 e0       	ldi	r25, 0x05	; 5
    3ee2:	9f 93       	push	r25
    3ee4:	8f 93       	push	r24
    3ee6:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3eea:	a8 01       	movw	r20, r16
    3eec:	68 e1       	ldi	r22, 0x18	; 24
    3eee:	75 e0       	ldi	r23, 0x05	; 5
    3ef0:	89 e3       	ldi	r24, 0x39	; 57
    3ef2:	95 e0       	ldi	r25, 0x05	; 5
    3ef4:	a5 d5       	rcall	.+2890   	; 0x4a40 <lora_driver_setOtaaIdentity>
    3ef6:	c5 d5       	rcall	.+2954   	; 0x4a82 <lora_driver_mapReturnCodeToText>
    3ef8:	9f 93       	push	r25
    3efa:	8f 93       	push	r24
    3efc:	1f 93       	push	r17
    3efe:	0f 93       	push	r16
    3f00:	88 e1       	ldi	r24, 0x18	; 24
    3f02:	95 e0       	ldi	r25, 0x05	; 5
    3f04:	9f 93       	push	r25
    3f06:	8f 93       	push	r24
    3f08:	89 e3       	ldi	r24, 0x39	; 57
    3f0a:	95 e0       	ldi	r25, 0x05	; 5
    3f0c:	9f 93       	push	r25
    3f0e:	8f 93       	push	r24
    3f10:	8a e4       	ldi	r24, 0x4A	; 74
    3f12:	95 e0       	ldi	r25, 0x05	; 5
    3f14:	9f 93       	push	r25
    3f16:	8f 93       	push	r24
    3f18:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3f1c:	96 d3       	rcall	.+1836   	; 0x464a <lora_driver_saveMac>
    3f1e:	b1 d5       	rcall	.+2914   	; 0x4a82 <lora_driver_mapReturnCodeToText>
    3f20:	9f 93       	push	r25
    3f22:	8f 93       	push	r24
    3f24:	80 e8       	ldi	r24, 0x80	; 128
    3f26:	95 e0       	ldi	r25, 0x05	; 5
    3f28:	9f 93       	push	r25
    3f2a:	8f 93       	push	r24
    3f2c:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	80 d4       	rcall	.+2304   	; 0x483e <lora_driver_setAdaptiveDataRate>
    3f3e:	a1 d5       	rcall	.+2882   	; 0x4a82 <lora_driver_mapReturnCodeToText>
    3f40:	9f 93       	push	r25
    3f42:	8f 93       	push	r24
    3f44:	8f e8       	ldi	r24, 0x8F	; 143
    3f46:	95 e0       	ldi	r25, 0x05	; 5
    3f48:	9f 93       	push	r25
    3f4a:	8f 93       	push	r24
    3f4c:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3f50:	84 ef       	ldi	r24, 0xF4	; 244
    3f52:	91 e0       	ldi	r25, 0x01	; 1
    3f54:	7f d4       	rcall	.+2302   	; 0x4854 <lora_driver_setReceiveDelay>
    3f56:	95 d5       	rcall	.+2858   	; 0x4a82 <lora_driver_mapReturnCodeToText>
    3f58:	9f 93       	push	r25
    3f5a:	8f 93       	push	r24
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	8f 93       	push	r24
    3f60:	84 ef       	ldi	r24, 0xF4	; 244
    3f62:	8f 93       	push	r24
    3f64:	80 eb       	ldi	r24, 0xB0	; 176
    3f66:	95 e0       	ldi	r25, 0x05	; 5
    3f68:	9f 93       	push	r25
    3f6a:	8f 93       	push	r24
    3f6c:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3f7a:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	6b d3       	rcall	.+1750   	; 0x4656 <lora_driver_join>
    3f80:	08 2f       	mov	r16, r24
    3f82:	7f d5       	rcall	.+2814   	; 0x4a82 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3f84:	9f 93       	push	r25
    3f86:	8f 93       	push	r24
    3f88:	1f 92       	push	r1
    3f8a:	1f 93       	push	r17
    3f8c:	80 ed       	ldi	r24, 0xD0	; 208
    3f8e:	95 e0       	ldi	r25, 0x05	; 5
    3f90:	9f 93       	push	r25
    3f92:	8f 93       	push	r24
    3f94:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    3f98:	0f 90       	pop	r0
    3f9a:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	0f 90       	pop	r0
    3fa2:	0f 90       	pop	r0
    3fa4:	08 30       	cpi	r16, 0x08	; 8
    3fa6:	59 f0       	breq	.+22     	; 0x3fbe <_lora_setup+0x154>
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	0e 94 30 2c 	call	0x5860	; 0x5860 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3fae:	66 e3       	ldi	r22, 0x36	; 54
    3fb0:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	0e 94 4c 13 	call	0x2698	; 0x2698 <vTaskDelay>
    3fba:	11 50       	subi	r17, 0x01	; 1
    3fbc:	f9 f6       	brne	.-66     	; 0x3f7c <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3fbe:	08 30       	cpi	r16, 0x08	; 8
    3fc0:	21 f4       	brne	.+8      	; 0x3fca <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	0e 94 12 2c 	call	0x5824	; 0x5824 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3fc8:	09 c0       	rjmp	.+18     	; 0x3fdc <_lora_setup+0x172>
    3fca:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3fcc:	0e 94 21 2c 	call	0x5842	; 0x5842 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	0e 94 ef 2b 	call	0x57de	; 0x57de <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3fd6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3fda:	fd cf       	rjmp	.-6      	; 0x3fd6 <_lora_setup+0x16c>
    3fdc:	64 96       	adiw	r28, 0x14	; 20
    3fde:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3fe0:	f8 94       	cli
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	cd bf       	out	0x3d, r28	; 61
    3fe8:	df 91       	pop	r29
    3fea:	cf 91       	pop	r28
    3fec:	1f 91       	pop	r17
    3fee:	0f 91       	pop	r16
    3ff0:	08 95       	ret

00003ff2 <lora_uplink_handler_task>:
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	bb d2       	rcall	.+1398   	; 0x456c <lora_driver_resetRn2483>

void lora_uplink_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    3ff6:	62 e0       	ldi	r22, 0x02	; 2
    3ff8:	70 e0       	ldi	r23, 0x00	; 0
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	0e 94 4c 13 	call	0x2698	; 0x2698 <vTaskDelay>
	lora_driver_resetRn2483(0);
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	b3 d2       	rcall	.+1382   	; 0x456c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    4006:	66 e9       	ldi	r22, 0x96	; 150
    4008:	70 e0       	ldi	r23, 0x00	; 0
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 4c 13 	call	0x2698	; 0x2698 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    4012:	65 d2       	rcall	.+1226   	; 0x44de <lora_driver_flushBuffers>

	_lora_setup();
    4014:	2a df       	rcall	.-428    	; 0x3e6a <_lora_setup>
    4016:	0f ef       	ldi	r16, 0xFF	; 255
		uint16_t hum = 0;
		uint16_t co2 = 0;
		uint8_t status = 0;
		uint8_t xReceivedBytes = 0;
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    4018:	1f ef       	ldi	r17, 0xFF	; 255
    401a:	98 01       	movw	r18, r16
    401c:	46 e1       	ldi	r20, 0x16	; 22
    401e:	50 e0       	ldi	r21, 0x00	; 0
    4020:	6f ef       	ldi	r22, 0xFF	; 255
    4022:	77 e1       	ldi	r23, 0x17	; 23
    4024:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uplinkMessageBufferHandle>
    4028:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <uplinkMessageBufferHandle+0x1>
    402c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <xStreamBufferReceive>
    4030:	88 23       	and	r24, r24
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    4032:	89 f3       	breq	.-30     	; 0x4016 <lora_uplink_handler_task+0x24>
    4034:	ef ef       	ldi	r30, 0xFF	; 255
			// 				printf("Number of bytes read from the message buffer: %d\n", xReceivedBytes);
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    4036:	f7 e1       	ldi	r31, 0x17	; 23
    4038:	82 81       	ldd	r24, Z+2	; 0x02
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	98 2f       	mov	r25, r24
    403e:	88 27       	eor	r24, r24
    4040:	23 81       	ldd	r18, Z+3	; 0x03
    4042:	82 2b       	or	r24, r18
    4044:	04 81       	ldd	r16, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    4046:	10 e0       	ldi	r17, 0x00	; 0
    4048:	10 2f       	mov	r17, r16
    404a:	00 27       	eor	r16, r16
    404c:	25 81       	ldd	r18, Z+5	; 0x05
    404e:	02 2b       	or	r16, r18
    4050:	c6 81       	ldd	r28, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    4052:	d0 e0       	ldi	r29, 0x00	; 0
    4054:	dc 2f       	mov	r29, r28
    4056:	cc 27       	eor	r28, r28
    4058:	27 81       	ldd	r18, Z+7	; 0x07
    405a:	c2 2b       	or	r28, r18
    405c:	f0 84       	ldd	r15, Z+8	; 0x08
			status = _uplink_payload.bytes[6];
    405e:	9f 93       	push	r25
			
			printf("Temperature sent: %d\n", tem);
    4060:	8f 93       	push	r24
    4062:	80 ef       	ldi	r24, 0xF0	; 240
    4064:	95 e0       	ldi	r25, 0x05	; 5
    4066:	9f 93       	push	r25
    4068:	8f 93       	push	r24
    406a:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    406e:	1f 93       	push	r17
			printf("Humidity sent: %d\n", hum);
    4070:	0f 93       	push	r16
    4072:	86 e0       	ldi	r24, 0x06	; 6
    4074:	96 e0       	ldi	r25, 0x06	; 6
    4076:	9f 93       	push	r25
    4078:	8f 93       	push	r24
    407a:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    407e:	df 93       	push	r29
			printf("CO2 sent: %d\n", co2);
    4080:	cf 93       	push	r28
    4082:	89 e1       	ldi	r24, 0x19	; 25
    4084:	96 e0       	ldi	r25, 0x06	; 6
    4086:	9f 93       	push	r25
    4088:	8f 93       	push	r24
    408a:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    408e:	1f 92       	push	r1
			printf("Status sent: %d\n", status);
    4090:	ff 92       	push	r15
    4092:	87 e2       	ldi	r24, 0x27	; 39
    4094:	96 e0       	ldi	r25, 0x06	; 6
    4096:	9f 93       	push	r25
    4098:	8f 93       	push	r24
    409a:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    409e:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    40a0:	0e 94 42 2c 	call	0x5884	; 0x5884 <status_leds_shortPuls>
			//WHAT THE HELL DOES THE FALSE DO 
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    40a4:	6f ef       	ldi	r22, 0xFF	; 255
    40a6:	77 e1       	ldi	r23, 0x17	; 23
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	fe d2       	rcall	.+1532   	; 0x46a8 <lora_driver_sendUploadMessage>
    40ac:	ea d4       	rcall	.+2516   	; 0x4a82 <lora_driver_mapReturnCodeToText>
    40ae:	9f 93       	push	r25
    40b0:	8f 93       	push	r24
    40b2:	88 e3       	ldi	r24, 0x38	; 56
    40b4:	96 e0       	ldi	r25, 0x06	; 6
    40b6:	9f 93       	push	r25
    40b8:	8f 93       	push	r24
    40ba:	0e 94 84 36 	call	0x6d08	; 0x6d08 <printf>
    40be:	8d b7       	in	r24, 0x3d	; 61
    40c0:	9e b7       	in	r25, 0x3e	; 62
    40c2:	44 96       	adiw	r24, 0x14	; 20
    40c4:	0f b6       	in	r0, 0x3f	; 63
    40c6:	f8 94       	cli
    40c8:	9e bf       	out	0x3e, r25	; 62
    40ca:	0f be       	out	0x3f, r0	; 63
    40cc:	8d bf       	out	0x3d, r24	; 61
    40ce:	a3 cf       	rjmp	.-186    	; 0x4016 <lora_uplink_handler_task+0x24>

000040d0 <create_lora_uplink_handler_task>:
    40d0:	ef 92       	push	r14

void lora_uplink_handler_task(void *pvParameters);

static lora_driver_payload_t _uplink_payload;

void create_lora_uplink_handler_task(UBaseType_t priority){
    40d2:	ff 92       	push	r15
    40d4:	0f 93       	push	r16
	xTaskCreate(
    40d6:	e1 2c       	mov	r14, r1
    40d8:	f1 2c       	mov	r15, r1
    40da:	08 2f       	mov	r16, r24
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	48 e8       	ldi	r20, 0x88	; 136
    40e2:	51 e0       	ldi	r21, 0x01	; 1
    40e4:	6d e4       	ldi	r22, 0x4D	; 77
    40e6:	76 e0       	ldi	r23, 0x06	; 6
    40e8:	89 ef       	ldi	r24, 0xF9	; 249
    40ea:	9f e1       	ldi	r25, 0x1F	; 31
    40ec:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskCreate>
	,  "LRHandUplink"  
	,  configMINIMAL_STACK_SIZE+200  
	,  NULL
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}
    40f0:	0f 91       	pop	r16
    40f2:	ff 90       	pop	r15
    40f4:	ef 90       	pop	r14
    40f6:	08 95       	ret

000040f8 <create_all_tasks>:
#include "DownlinkHandler.h"
#include "ServoController.h"


void create_all_tasks(){
	create_lora_uplink_handler_task(4);
    40f8:	84 e0       	ldi	r24, 0x04	; 4
    40fa:	ea df       	rcall	.-44     	; 0x40d0 <create_lora_uplink_handler_task>
	create_lora_downlink_handler_task(4);
    40fc:	84 e0       	ldi	r24, 0x04	; 4
    40fe:	0e 94 a6 02 	call	0x54c	; 0x54c <create_lora_downlink_handler_task>
	create_main_application_task(3);
    4102:	83 e0       	ldi	r24, 0x03	; 3
    4104:	0e 94 f7 01 	call	0x3ee	; 0x3ee <create_main_application_task>
	create_CO2_sensor_task(1);
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	cb dd       	rcall	.-1130   	; 0x3ca2 <create_CO2_sensor_task>
	create_TempHum_sensor_task(1);
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	ea dd       	rcall	.-1068   	; 0x3ce4 <create_TempHum_sensor_task>
    4110:	82 e0       	ldi	r24, 0x02	; 2
	create_fan_controller_task(2);
    4112:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <create_fan_controller_task>
    4116:	08 95       	ret

00004118 <initializeSystem>:
    4118:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    411a:	0e 94 77 2a 	call	0x54ee	; 0x54ee <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    411e:	85 e0       	ldi	r24, 0x05	; 5
    4120:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <status_leds_initialise>

	initialize_event_groups();
    4124:	51 de       	rcall	.-862    	; 0x3dc8 <initialize_event_groups>
	initialize_message_buffers();
    4126:	5d de       	rcall	.-838    	; 0x3de2 <initialize_message_buffers>
	initialize_semaphore();
    4128:	7f de       	rcall	.-770    	; 0x3e28 <initialize_semaphore>
    412a:	9b de       	rcall	.-714    	; 0x3e62 <initialise_rc_servo>
	initialise_rc_servo();
    412c:	60 91 4d 19 	lds	r22, 0x194D	; 0x80194d <downlinkMessageBufferHandle>
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    4130:	70 91 4e 19 	lds	r23, 0x194E	; 0x80194e <downlinkMessageBufferHandle+0x1>
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	da d1       	rcall	.+948    	; 0x44ec <lora_driver_initialise>
    4138:	df cf       	rjmp	.-66     	; 0x40f8 <create_all_tasks>
	create_all_tasks();
    413a:	08 95       	ret

0000413c <main>:
    413c:	ed df       	rcall	.-38     	; 0x4118 <initializeSystem>
    413e:	8a e5       	ldi	r24, 0x5A	; 90

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    4140:	96 e0       	ldi	r25, 0x06	; 6
    4142:	0e 94 98 36 	call	0x6d30	; 0x6d30 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    4146:	0e 94 93 10 	call	0x2126	; 0x2126 <vTaskStartScheduler>
    414a:	ff cf       	rjmp	.-2      	; 0x414a <main+0xe>

0000414c <_hihTwiCallback>:
    414c:	65 30       	cpi	r22, 0x05	; 5
    414e:	f1 f4       	brne	.+60     	; 0x418c <_hihTwiCallback+0x40>
    4150:	fa 01       	movw	r30, r20
    4152:	80 81       	ld	r24, Z
    4154:	8f 73       	andi	r24, 0x3F	; 63
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	98 2f       	mov	r25, r24
    415a:	88 27       	eor	r24, r24
    415c:	21 81       	ldd	r18, Z+1	; 0x01
    415e:	82 2b       	or	r24, r18
    4160:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <_hum+0x1>
    4164:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_hum>
    4168:	82 81       	ldd	r24, Z+2	; 0x02
    416a:	f0 e4       	ldi	r31, 0x40	; 64
    416c:	8f 9f       	mul	r24, r31
    416e:	c0 01       	movw	r24, r0
    4170:	11 24       	eor	r1, r1
    4172:	fa 01       	movw	r30, r20
    4174:	23 81       	ldd	r18, Z+3	; 0x03
    4176:	26 95       	lsr	r18
    4178:	26 95       	lsr	r18
    417a:	82 2b       	or	r24, r18
    417c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_temp+0x1>
    4180:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_temp>
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <_measuringIsReady>
    418a:	08 95       	ret
    418c:	64 30       	cpi	r22, 0x04	; 4
    418e:	51 f0       	breq	.+20     	; 0x41a4 <_hihTwiCallback+0x58>
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	90 e4       	ldi	r25, 0x40	; 64
    4194:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_temp+0x1>
    4198:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_temp>
    419c:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <_hum+0x1>
    41a0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_hum>
    41a4:	08 95       	ret

000041a6 <hih8120_initialise>:
    41a6:	0f 93       	push	r16
    41a8:	1f 93       	push	r17
    41aa:	06 ea       	ldi	r16, 0xA6	; 166
    41ac:	10 e2       	ldi	r17, 0x20	; 32
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	34 e2       	ldi	r19, 0x24	; 36
    41b2:	44 ef       	ldi	r20, 0xF4	; 244
    41b4:	50 e0       	ldi	r21, 0x00	; 0
    41b6:	60 e0       	ldi	r22, 0x00	; 0
    41b8:	87 e2       	ldi	r24, 0x27	; 39
    41ba:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <twiCreate>
    41be:	90 93 17 18 	sts	0x1817, r25	; 0x801817 <_hih8120Handler+0x1>
    41c2:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <_hih8120Handler>
    41c6:	21 e0       	ldi	r18, 0x01	; 1
    41c8:	89 2b       	or	r24, r25
    41ca:	09 f0       	breq	.+2      	; 0x41ce <hih8120_initialise+0x28>
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	82 2f       	mov	r24, r18
    41d0:	1f 91       	pop	r17
    41d2:	0f 91       	pop	r16
    41d4:	08 95       	ret

000041d6 <hih8120_wakeup>:
    41d6:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <_hih8120Handler>
    41da:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <_hih8120Handler+0x1>
    41de:	00 97       	sbiw	r24, 0x00	; 0
    41e0:	59 f0       	breq	.+22     	; 0x41f8 <hih8120_wakeup+0x22>
    41e2:	40 e0       	ldi	r20, 0x00	; 0
    41e4:	60 e0       	ldi	r22, 0x00	; 0
    41e6:	70 e0       	ldi	r23, 0x00	; 0
    41e8:	0e 94 b5 2c 	call	0x596a	; 0x596a <twiTransmit>
    41ec:	84 30       	cpi	r24, 0x04	; 4
    41ee:	31 f4       	brne	.+12     	; 0x41fc <hih8120_wakeup+0x26>
    41f0:	10 92 15 18 	sts	0x1815, r1	; 0x801815 <_measuringIsReady>
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	08 95       	ret
    41f8:	82 e0       	ldi	r24, 0x02	; 2
    41fa:	08 95       	ret
    41fc:	83 e0       	ldi	r24, 0x03	; 3
    41fe:	08 95       	ret

00004200 <hih8120_measure>:
    4200:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <_hih8120Handler>
    4204:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <_hih8120Handler+0x1>
    4208:	00 97       	sbiw	r24, 0x00	; 0
    420a:	39 f0       	breq	.+14     	; 0x421a <hih8120_measure+0x1a>
    420c:	64 e0       	ldi	r22, 0x04	; 4
    420e:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <twiReceive>
    4212:	85 30       	cpi	r24, 0x05	; 5
    4214:	21 f0       	breq	.+8      	; 0x421e <hih8120_measure+0x1e>
    4216:	83 e0       	ldi	r24, 0x03	; 3
    4218:	08 95       	ret
    421a:	82 e0       	ldi	r24, 0x02	; 2
    421c:	08 95       	ret
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	08 95       	ret

00004222 <hih8120_getHumidity>:
    4222:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <_hum>
    4226:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <_hum+0x1>
    422a:	80 e0       	ldi	r24, 0x00	; 0
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	0e 94 94 32 	call	0x6528	; 0x6528 <__floatunsisf>
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	48 ec       	ldi	r20, 0xC8	; 200
    4238:	52 e4       	ldi	r21, 0x42	; 66
    423a:	0e 94 22 33 	call	0x6644	; 0x6644 <__mulsf3>
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	38 ef       	ldi	r19, 0xF8	; 248
    4242:	4f e7       	ldi	r20, 0x7F	; 127
    4244:	56 e4       	ldi	r21, 0x46	; 70
    4246:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <__divsf3>
    424a:	08 95       	ret

0000424c <hih8120_getHumidityPercent_x10>:
    424c:	ea df       	rcall	.-44     	; 0x4222 <hih8120_getHumidity>
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	40 e2       	ldi	r20, 0x20	; 32
    4254:	51 e4       	ldi	r21, 0x41	; 65
    4256:	0e 94 22 33 	call	0x6644	; 0x6644 <__mulsf3>
    425a:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__fixunssfsi>
    425e:	cb 01       	movw	r24, r22
    4260:	08 95       	ret

00004262 <hih8120_getTemperature>:
    4262:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_temp>
    4266:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_temp+0x1>
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	0e 94 94 32 	call	0x6528	; 0x6528 <__floatunsisf>
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	45 e2       	ldi	r20, 0x25	; 37
    4278:	53 e4       	ldi	r21, 0x43	; 67
    427a:	0e 94 22 33 	call	0x6644	; 0x6644 <__mulsf3>
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	38 ef       	ldi	r19, 0xF8	; 248
    4282:	4f e7       	ldi	r20, 0x7F	; 127
    4284:	56 e4       	ldi	r21, 0x46	; 70
    4286:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divsf3>
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	40 e2       	ldi	r20, 0x20	; 32
    4290:	52 e4       	ldi	r21, 0x42	; 66
    4292:	0c 94 96 31 	jmp	0x632c	; 0x632c <__subsf3>
    4296:	08 95       	ret

00004298 <hih8120_getTemperature_x10>:
    4298:	e4 df       	rcall	.-56     	; 0x4262 <hih8120_getTemperature>
    429a:	20 e0       	ldi	r18, 0x00	; 0
    429c:	30 e0       	ldi	r19, 0x00	; 0
    429e:	40 e2       	ldi	r20, 0x20	; 32
    42a0:	51 e4       	ldi	r21, 0x41	; 65
    42a2:	0e 94 22 33 	call	0x6644	; 0x6644 <__mulsf3>
    42a6:	0e 94 63 32 	call	0x64c6	; 0x64c6 <__fixsfsi>
    42aa:	cb 01       	movw	r24, r22
    42ac:	08 95       	ret

000042ae <_serialCallBack>:
    42ae:	0f 93       	push	r16
    42b0:	1f 93       	push	r17
    42b2:	cf 93       	push	r28
    42b4:	df 93       	push	r29
    42b6:	1f 92       	push	r1
    42b8:	1f 92       	push	r1
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
    42be:	8c 01       	movw	r16, r24
    42c0:	19 82       	std	Y+1, r1	; 0x01
    42c2:	2d c0       	rjmp	.+90     	; 0x431e <_serialCallBack+0x70>
    42c4:	e0 91 4f 18 	lds	r30, 0x184F	; 0x80184f <rec_buf_inp.2878>
    42c8:	ec 32       	cpi	r30, 0x2C	; 44
    42ca:	50 f4       	brcc	.+20     	; 0x42e0 <_serialCallBack+0x32>
    42cc:	81 e0       	ldi	r24, 0x01	; 1
    42ce:	8e 0f       	add	r24, r30
    42d0:	80 93 4f 18 	sts	0x184F, r24	; 0x80184f <rec_buf_inp.2878>
    42d4:	f0 e0       	ldi	r31, 0x00	; 0
    42d6:	ef 57       	subi	r30, 0x7F	; 127
    42d8:	f7 4e       	sbci	r31, 0xE7	; 231
    42da:	8a 81       	ldd	r24, Y+2	; 0x02
    42dc:	80 83       	st	Z, r24
    42de:	02 c0       	rjmp	.+4      	; 0x42e4 <_serialCallBack+0x36>
    42e0:	10 92 4f 18 	sts	0x184F, r1	; 0x80184f <rec_buf_inp.2878>
    42e4:	8a 81       	ldd	r24, Y+2	; 0x02
    42e6:	8a 30       	cpi	r24, 0x0A	; 10
    42e8:	d1 f4       	brne	.+52     	; 0x431e <_serialCallBack+0x70>
    42ea:	40 91 4f 18 	lds	r20, 0x184F	; 0x80184f <rec_buf_inp.2878>
    42ee:	50 e0       	ldi	r21, 0x00	; 0
    42f0:	fa 01       	movw	r30, r20
    42f2:	e1 58       	subi	r30, 0x81	; 129
    42f4:	f7 4e       	sbci	r31, 0xE7	; 231
    42f6:	10 82       	st	Z, r1
    42f8:	41 50       	subi	r20, 0x01	; 1
    42fa:	51 09       	sbc	r21, r1
    42fc:	9e 01       	movw	r18, r28
    42fe:	2f 5f       	subi	r18, 0xFF	; 255
    4300:	3f 4f       	sbci	r19, 0xFF	; 255
    4302:	61 e8       	ldi	r22, 0x81	; 129
    4304:	78 e1       	ldi	r23, 0x18	; 24
    4306:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    430a:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    430e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <xStreamBufferSendFromISR>
    4312:	89 81       	ldd	r24, Y+1	; 0x01
    4314:	81 11       	cpse	r24, r1
    4316:	0e 94 9f 06 	call	0xd3e	; 0xd3e <vPortYield>
    431a:	10 92 4f 18 	sts	0x184F, r1	; 0x80184f <rec_buf_inp.2878>
    431e:	be 01       	movw	r22, r28
    4320:	6e 5f       	subi	r22, 0xFE	; 254
    4322:	7f 4f       	sbci	r23, 0xFF	; 255
    4324:	c8 01       	movw	r24, r16
    4326:	4d d6       	rcall	.+3226   	; 0x4fc2 <serial_getByte>
    4328:	88 23       	and	r24, r24
    432a:	61 f2       	breq	.-104    	; 0x42c4 <_serialCallBack+0x16>
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
    4330:	df 91       	pop	r29
    4332:	cf 91       	pop	r28
    4334:	1f 91       	pop	r17
    4336:	0f 91       	pop	r16
    4338:	08 95       	ret

0000433a <_uploadMessage>:
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	8c 01       	movw	r16, r24
    4344:	eb 01       	movw	r28, r22
    4346:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    434a:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    434e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <xStreamBufferReset>
    4352:	b8 01       	movw	r22, r16
    4354:	88 e1       	ldi	r24, 0x18	; 24
    4356:	98 e1       	ldi	r25, 0x18	; 24
    4358:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <strcpy>
    435c:	20 97       	sbiw	r28, 0x00	; 0
    435e:	79 f0       	breq	.+30     	; 0x437e <_uploadMessage+0x44>
    4360:	e8 e1       	ldi	r30, 0x18	; 24
    4362:	f8 e1       	ldi	r31, 0x18	; 24
    4364:	01 90       	ld	r0, Z+
    4366:	00 20       	and	r0, r0
    4368:	e9 f7       	brne	.-6      	; 0x4364 <_uploadMessage+0x2a>
    436a:	31 97       	sbiw	r30, 0x01	; 1
    436c:	80 e2       	ldi	r24, 0x20	; 32
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	91 83       	std	Z+1, r25	; 0x01
    4372:	80 83       	st	Z, r24
    4374:	be 01       	movw	r22, r28
    4376:	88 e1       	ldi	r24, 0x18	; 24
    4378:	98 e1       	ldi	r25, 0x18	; 24
    437a:	0e 94 13 36 	call	0x6c26	; 0x6c26 <strcat>
    437e:	e8 e1       	ldi	r30, 0x18	; 24
    4380:	f8 e1       	ldi	r31, 0x18	; 24
    4382:	df 01       	movw	r26, r30
    4384:	0d 90       	ld	r0, X+
    4386:	00 20       	and	r0, r0
    4388:	e9 f7       	brne	.-6      	; 0x4384 <_uploadMessage+0x4a>
    438a:	11 97       	sbiw	r26, 0x01	; 1
    438c:	8d e0       	ldi	r24, 0x0D	; 13
    438e:	9a e0       	ldi	r25, 0x0A	; 10
    4390:	11 96       	adiw	r26, 0x01	; 1
    4392:	9c 93       	st	X, r25
    4394:	8e 93       	st	-X, r24
    4396:	12 96       	adiw	r26, 0x02	; 2
    4398:	1c 92       	st	X, r1
    439a:	01 90       	ld	r0, Z+
    439c:	00 20       	and	r0, r0
    439e:	e9 f7       	brne	.-6      	; 0x439a <_uploadMessage+0x60>
    43a0:	31 97       	sbiw	r30, 0x01	; 1
    43a2:	e8 51       	subi	r30, 0x18	; 24
    43a4:	f8 41       	sbci	r31, 0x18	; 24
    43a6:	ae 2f       	mov	r26, r30
    43a8:	88 e1       	ldi	r24, 0x18	; 24
    43aa:	98 e1       	ldi	r25, 0x18	; 24
    43ac:	ac 01       	movw	r20, r24
    43ae:	6a 2f       	mov	r22, r26
    43b0:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <_rn2483_serial>
    43b4:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <_rn2483_serial+0x1>
    43b8:	af d5       	rcall	.+2910   	; 0x4f18 <serial_sendBytes>
    43ba:	81 11       	cpse	r24, r1
    43bc:	11 c0       	rjmp	.+34     	; 0x43e0 <_uploadMessage+0xa6>
    43be:	08 e2       	ldi	r16, 0x28	; 40
    43c0:	15 e0       	ldi	r17, 0x05	; 5
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	4d e2       	ldi	r20, 0x2D	; 45
    43c8:	50 e0       	ldi	r21, 0x00	; 0
    43ca:	6b ed       	ldi	r22, 0xDB	; 219
    43cc:	78 e1       	ldi	r23, 0x18	; 24
    43ce:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    43d2:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    43d6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <xStreamBufferReceive>
    43da:	8b ed       	ldi	r24, 0xDB	; 219
    43dc:	98 e1       	ldi	r25, 0x18	; 24
    43de:	02 c0       	rjmp	.+4      	; 0x43e4 <_uploadMessage+0xaa>
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	df 91       	pop	r29
    43e6:	cf 91       	pop	r28
    43e8:	1f 91       	pop	r17
    43ea:	0f 91       	pop	r16
    43ec:	08 95       	ret

000043ee <_reply2ReturnCode>:
    43ee:	2f 92       	push	r2
    43f0:	3f 92       	push	r3
    43f2:	4f 92       	push	r4
    43f4:	5f 92       	push	r5
    43f6:	6f 92       	push	r6
    43f8:	7f 92       	push	r7
    43fa:	8f 92       	push	r8
    43fc:	9f 92       	push	r9
    43fe:	af 92       	push	r10
    4400:	bf 92       	push	r11
    4402:	cf 92       	push	r12
    4404:	df 92       	push	r13
    4406:	ef 92       	push	r14
    4408:	ff 92       	push	r15
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	cf 93       	push	r28
    4410:	df 93       	push	r29
    4412:	5c 01       	movw	r10, r24
    4414:	fc 01       	movw	r30, r24
    4416:	01 90       	ld	r0, Z+
    4418:	00 20       	and	r0, r0
    441a:	e9 f7       	brne	.-6      	; 0x4416 <_reply2ReturnCode+0x28>
    441c:	31 97       	sbiw	r30, 0x01	; 1
    441e:	6f 01       	movw	r12, r30
    4420:	c8 1a       	sub	r12, r24
    4422:	d9 0a       	sbc	r13, r25
    4424:	5c 2c       	mov	r5, r12
    4426:	0f 2e       	mov	r0, r31
    4428:	f0 e0       	ldi	r31, 0x00	; 0
    442a:	8f 2e       	mov	r8, r31
    442c:	f9 e0       	ldi	r31, 0x09	; 9
    442e:	9f 2e       	mov	r9, r31
    4430:	f0 2d       	mov	r31, r0
    4432:	e1 2c       	mov	r14, r1
    4434:	f1 2c       	mov	r15, r1
    4436:	4c 2c       	mov	r4, r12
    4438:	37 01       	movw	r6, r14
    443a:	f4 01       	movw	r30, r8
    443c:	01 81       	ldd	r16, Z+1	; 0x01
    443e:	12 81       	ldd	r17, Z+2	; 0x02
    4440:	e8 01       	movw	r28, r16
    4442:	09 90       	ld	r0, Y+
    4444:	00 20       	and	r0, r0
    4446:	e9 f7       	brne	.-6      	; 0x4442 <_reply2ReturnCode+0x54>
    4448:	21 97       	sbiw	r28, 0x01	; 1
    444a:	c0 1b       	sub	r28, r16
    444c:	d1 0b       	sbc	r29, r17
    444e:	3c 2e       	mov	r3, r28
    4450:	f9 e0       	ldi	r31, 0x09	; 9
    4452:	cf 16       	cp	r12, r31
    4454:	d1 04       	cpc	r13, r1
    4456:	58 f0       	brcs	.+22     	; 0x446e <_reply2ReturnCode+0x80>
    4458:	f4 01       	movw	r30, r8
    445a:	20 80       	ld	r2, Z
    445c:	fe e0       	ldi	r31, 0x0E	; 14
    445e:	2f 12       	cpse	r2, r31
    4460:	06 c0       	rjmp	.+12     	; 0x446e <_reply2ReturnCode+0x80>
    4462:	b8 01       	movw	r22, r16
    4464:	c5 01       	movw	r24, r10
    4466:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <strcasestr>
    446a:	89 2b       	or	r24, r25
    446c:	09 f5       	brne	.+66     	; 0x44b0 <_reply2ReturnCode+0xc2>
    446e:	44 2d       	mov	r20, r4
    4470:	35 14       	cp	r3, r5
    4472:	08 f4       	brcc	.+2      	; 0x4476 <_reply2ReturnCode+0x88>
    4474:	4c 2f       	mov	r20, r28
    4476:	50 e0       	ldi	r21, 0x00	; 0
    4478:	b8 01       	movw	r22, r16
    447a:	c5 01       	movw	r24, r10
    447c:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <strncasecmp>
    4480:	89 2b       	or	r24, r25
    4482:	49 f4       	brne	.+18     	; 0x4496 <_reply2ReturnCode+0xa8>
    4484:	f3 01       	movw	r30, r6
    4486:	ee 0f       	add	r30, r30
    4488:	ff 1f       	adc	r31, r31
    448a:	e6 0d       	add	r30, r6
    448c:	f7 1d       	adc	r31, r7
    448e:	e0 50       	subi	r30, 0x00	; 0
    4490:	f7 4f       	sbci	r31, 0xF7	; 247
    4492:	20 80       	ld	r2, Z
    4494:	0d c0       	rjmp	.+26     	; 0x44b0 <_reply2ReturnCode+0xc2>
    4496:	8f ef       	ldi	r24, 0xFF	; 255
    4498:	e8 1a       	sub	r14, r24
    449a:	f8 0a       	sbc	r15, r24
    449c:	e3 e0       	ldi	r30, 0x03	; 3
    449e:	8e 0e       	add	r8, r30
    44a0:	91 1c       	adc	r9, r1
    44a2:	f1 e1       	ldi	r31, 0x11	; 17
    44a4:	ef 16       	cp	r14, r31
    44a6:	f1 04       	cpc	r15, r1
    44a8:	39 f6       	brne	.-114    	; 0x4438 <_reply2ReturnCode+0x4a>
    44aa:	68 94       	set
    44ac:	22 24       	eor	r2, r2
    44ae:	24 f8       	bld	r2, 4
    44b0:	82 2d       	mov	r24, r2
    44b2:	df 91       	pop	r29
    44b4:	cf 91       	pop	r28
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	ff 90       	pop	r15
    44bc:	ef 90       	pop	r14
    44be:	df 90       	pop	r13
    44c0:	cf 90       	pop	r12
    44c2:	bf 90       	pop	r11
    44c4:	af 90       	pop	r10
    44c6:	9f 90       	pop	r9
    44c8:	8f 90       	pop	r8
    44ca:	7f 90       	pop	r7
    44cc:	6f 90       	pop	r6
    44ce:	5f 90       	pop	r5
    44d0:	4f 90       	pop	r4
    44d2:	3f 90       	pop	r3
    44d4:	2f 90       	pop	r2
    44d6:	08 95       	ret

000044d8 <_uploadMessageRc>:
    44d8:	30 df       	rcall	.-416    	; 0x433a <_uploadMessage>
    44da:	89 cf       	rjmp	.-238    	; 0x43ee <_reply2ReturnCode>
    44dc:	08 95       	ret

000044de <lora_driver_flushBuffers>:
    44de:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    44e2:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    44e6:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <xStreamBufferReset>
    44ea:	08 95       	ret

000044ec <lora_driver_initialise>:
    44ec:	8f 92       	push	r8
    44ee:	9f 92       	push	r9
    44f0:	af 92       	push	r10
    44f2:	cf 92       	push	r12
    44f4:	ef 92       	push	r14
    44f6:	0f 93       	push	r16
    44f8:	1f 93       	push	r17
    44fa:	cf 93       	push	r28
    44fc:	c8 2f       	mov	r28, r24
    44fe:	8b 01       	movw	r16, r22
    4500:	41 e0       	ldi	r20, 0x01	; 1
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	88 ec       	ldi	r24, 0xC8	; 200
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	0e 94 41 0c 	call	0x1882	; 0x1882 <xStreamBufferGenericCreate>
    450e:	90 93 53 18 	sts	0x1853, r25	; 0x801853 <_serialReplyBufferHandle+0x1>
    4512:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <_serialReplyBufferHandle>
    4516:	10 93 51 18 	sts	0x1851, r17	; 0x801851 <_downlinkMessageBuffer+0x1>
    451a:	00 93 50 18 	sts	0x1850, r16	; 0x801850 <_downlinkMessageBuffer>
    451e:	0f 2e       	mov	r0, r31
    4520:	f7 e5       	ldi	r31, 0x57	; 87
    4522:	8f 2e       	mov	r8, r31
    4524:	f1 e2       	ldi	r31, 0x21	; 33
    4526:	9f 2e       	mov	r9, r31
    4528:	f0 2d       	mov	r31, r0
    452a:	68 94       	set
    452c:	aa 24       	eor	r10, r10
    452e:	a6 f8       	bld	r10, 6
    4530:	68 94       	set
    4532:	cc 24       	eor	r12, r12
    4534:	c6 f8       	bld	r12, 6
    4536:	e1 2c       	mov	r14, r1
    4538:	00 e0       	ldi	r16, 0x00	; 0
    453a:	23 e0       	ldi	r18, 0x03	; 3
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	51 ee       	ldi	r21, 0xE1	; 225
    4540:	60 e0       	ldi	r22, 0x00	; 0
    4542:	70 e0       	ldi	r23, 0x00	; 0
    4544:	8c 2f       	mov	r24, r28
    4546:	17 d4       	rcall	.+2094   	; 0x4d76 <serial_create>
    4548:	90 93 55 18 	sts	0x1855, r25	; 0x801855 <_rn2483_serial+0x1>
    454c:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <_rn2483_serial>
    4550:	e7 e0       	ldi	r30, 0x07	; 7
    4552:	f1 e0       	ldi	r31, 0x01	; 1
    4554:	80 81       	ld	r24, Z
    4556:	80 61       	ori	r24, 0x10	; 16
    4558:	80 83       	st	Z, r24
    455a:	cf 91       	pop	r28
    455c:	1f 91       	pop	r17
    455e:	0f 91       	pop	r16
    4560:	ef 90       	pop	r14
    4562:	cf 90       	pop	r12
    4564:	af 90       	pop	r10
    4566:	9f 90       	pop	r9
    4568:	8f 90       	pop	r8
    456a:	08 95       	ret

0000456c <lora_driver_resetRn2483>:
    456c:	88 23       	and	r24, r24
    456e:	31 f0       	breq	.+12     	; 0x457c <lora_driver_resetRn2483+0x10>
    4570:	e8 e0       	ldi	r30, 0x08	; 8
    4572:	f1 e0       	ldi	r31, 0x01	; 1
    4574:	80 81       	ld	r24, Z
    4576:	8f 7e       	andi	r24, 0xEF	; 239
    4578:	80 83       	st	Z, r24
    457a:	08 95       	ret
    457c:	e8 e0       	ldi	r30, 0x08	; 8
    457e:	f1 e0       	ldi	r31, 0x01	; 1
    4580:	80 81       	ld	r24, Z
    4582:	80 61       	ori	r24, 0x10	; 16
    4584:	80 83       	st	Z, r24
    4586:	08 95       	ret

00004588 <lora_driver_rn2483FactoryReset>:
    4588:	60 e0       	ldi	r22, 0x00	; 0
    458a:	70 e0       	ldi	r23, 0x00	; 0
    458c:	8b e8       	ldi	r24, 0x8B	; 139
    458e:	96 e0       	ldi	r25, 0x06	; 6
    4590:	d4 de       	rcall	.-600    	; 0x433a <_uploadMessage>
    4592:	eb ed       	ldi	r30, 0xDB	; 219
    4594:	f8 e1       	ldi	r31, 0x18	; 24
    4596:	01 90       	ld	r0, Z+
    4598:	00 20       	and	r0, r0
    459a:	e9 f7       	brne	.-6      	; 0x4596 <lora_driver_rn2483FactoryReset+0xe>
    459c:	31 97       	sbiw	r30, 0x01	; 1
    459e:	eb 5d       	subi	r30, 0xDB	; 219
    45a0:	f8 41       	sbci	r31, 0x18	; 24
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	75 97       	sbiw	r30, 0x15	; 21
    45a6:	08 f0       	brcs	.+2      	; 0x45aa <lora_driver_rn2483FactoryReset+0x22>
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	08 95       	ret

000045ac <lora_driver_getRn2483Hweui>:
    45ac:	cf 93       	push	r28
    45ae:	df 93       	push	r29
    45b0:	ec 01       	movw	r28, r24
    45b2:	60 e0       	ldi	r22, 0x00	; 0
    45b4:	70 e0       	ldi	r23, 0x00	; 0
    45b6:	8c e9       	ldi	r24, 0x9C	; 156
    45b8:	96 e0       	ldi	r25, 0x06	; 6
    45ba:	bf de       	rcall	.-642    	; 0x433a <_uploadMessage>
    45bc:	eb ed       	ldi	r30, 0xDB	; 219
    45be:	f8 e1       	ldi	r31, 0x18	; 24
    45c0:	01 90       	ld	r0, Z+
    45c2:	00 20       	and	r0, r0
    45c4:	e9 f7       	brne	.-6      	; 0x45c0 <lora_driver_getRn2483Hweui+0x14>
    45c6:	ec 5e       	subi	r30, 0xEC	; 236
    45c8:	f8 41       	sbci	r31, 0x18	; 24
    45ca:	39 f4       	brne	.+14     	; 0x45da <lora_driver_getRn2483Hweui+0x2e>
    45cc:	6b ed       	ldi	r22, 0xDB	; 219
    45ce:	78 e1       	ldi	r23, 0x18	; 24
    45d0:	ce 01       	movw	r24, r28
    45d2:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <strcpy>
    45d6:	80 e0       	ldi	r24, 0x00	; 0
    45d8:	02 c0       	rjmp	.+4      	; 0x45de <lora_driver_getRn2483Hweui+0x32>
    45da:	18 82       	st	Y, r1
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	df 91       	pop	r29
    45e0:	cf 91       	pop	r28
    45e2:	08 95       	ret

000045e4 <lora_driver_setDeviceIdentifier>:
    45e4:	fc 01       	movw	r30, r24
    45e6:	01 90       	ld	r0, Z+
    45e8:	00 20       	and	r0, r0
    45ea:	e9 f7       	brne	.-6      	; 0x45e6 <lora_driver_setDeviceIdentifier+0x2>
    45ec:	9f 01       	movw	r18, r30
    45ee:	21 51       	subi	r18, 0x11	; 17
    45f0:	31 09       	sbc	r19, r1
    45f2:	28 17       	cp	r18, r24
    45f4:	39 07       	cpc	r19, r25
    45f6:	29 f4       	brne	.+10     	; 0x4602 <lora_driver_setDeviceIdentifier+0x1e>
    45f8:	bc 01       	movw	r22, r24
    45fa:	8a ec       	ldi	r24, 0xCA	; 202
    45fc:	96 e0       	ldi	r25, 0x06	; 6
    45fe:	6c cf       	rjmp	.-296    	; 0x44d8 <_uploadMessageRc>
    4600:	08 95       	ret
    4602:	89 e0       	ldi	r24, 0x09	; 9
    4604:	08 95       	ret

00004606 <lora_driver_setApplicationIdentifier>:
    4606:	fc 01       	movw	r30, r24
    4608:	01 90       	ld	r0, Z+
    460a:	00 20       	and	r0, r0
    460c:	e9 f7       	brne	.-6      	; 0x4608 <lora_driver_setApplicationIdentifier+0x2>
    460e:	9f 01       	movw	r18, r30
    4610:	21 51       	subi	r18, 0x11	; 17
    4612:	31 09       	sbc	r19, r1
    4614:	28 17       	cp	r18, r24
    4616:	39 07       	cpc	r19, r25
    4618:	29 f4       	brne	.+10     	; 0x4624 <lora_driver_setApplicationIdentifier+0x1e>
    461a:	bc 01       	movw	r22, r24
    461c:	89 ed       	ldi	r24, 0xD9	; 217
    461e:	96 e0       	ldi	r25, 0x06	; 6
    4620:	5b cf       	rjmp	.-330    	; 0x44d8 <_uploadMessageRc>
    4622:	08 95       	ret
    4624:	89 e0       	ldi	r24, 0x09	; 9
    4626:	08 95       	ret

00004628 <lora_driver_setApplicationKey>:
    4628:	fc 01       	movw	r30, r24
    462a:	01 90       	ld	r0, Z+
    462c:	00 20       	and	r0, r0
    462e:	e9 f7       	brne	.-6      	; 0x462a <lora_driver_setApplicationKey+0x2>
    4630:	9f 01       	movw	r18, r30
    4632:	21 52       	subi	r18, 0x21	; 33
    4634:	31 09       	sbc	r19, r1
    4636:	28 17       	cp	r18, r24
    4638:	39 07       	cpc	r19, r25
    463a:	29 f4       	brne	.+10     	; 0x4646 <lora_driver_setApplicationKey+0x1e>
    463c:	bc 01       	movw	r22, r24
    463e:	88 ee       	ldi	r24, 0xE8	; 232
    4640:	96 e0       	ldi	r25, 0x06	; 6
    4642:	4a cf       	rjmp	.-364    	; 0x44d8 <_uploadMessageRc>
    4644:	08 95       	ret
    4646:	89 e0       	ldi	r24, 0x09	; 9
    4648:	08 95       	ret

0000464a <lora_driver_saveMac>:
    464a:	60 e0       	ldi	r22, 0x00	; 0
    464c:	70 e0       	ldi	r23, 0x00	; 0
    464e:	87 e2       	ldi	r24, 0x27	; 39
    4650:	97 e0       	ldi	r25, 0x07	; 7
    4652:	42 cf       	rjmp	.-380    	; 0x44d8 <_uploadMessageRc>
    4654:	08 95       	ret

00004656 <lora_driver_join>:
    4656:	0f 93       	push	r16
    4658:	1f 93       	push	r17
    465a:	e8 2f       	mov	r30, r24
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	ee 0f       	add	r30, r30
    4660:	ff 1f       	adc	r31, r31
    4662:	e4 50       	subi	r30, 0x04	; 4
    4664:	f7 4f       	sbci	r31, 0xF7	; 247
    4666:	60 81       	ld	r22, Z
    4668:	71 81       	ldd	r23, Z+1	; 0x01
    466a:	80 e3       	ldi	r24, 0x30	; 48
    466c:	97 e0       	ldi	r25, 0x07	; 7
    466e:	34 df       	rcall	.-408    	; 0x44d8 <_uploadMessageRc>
    4670:	81 11       	cpse	r24, r1
    4672:	14 c0       	rjmp	.+40     	; 0x469c <lora_driver_join+0x46>
    4674:	08 e2       	ldi	r16, 0x28	; 40
    4676:	15 e0       	ldi	r17, 0x05	; 5
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	4d e2       	ldi	r20, 0x2D	; 45
    467e:	50 e0       	ldi	r21, 0x00	; 0
    4680:	6b ed       	ldi	r22, 0xDB	; 219
    4682:	78 e1       	ldi	r23, 0x18	; 24
    4684:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    4688:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    468c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <xStreamBufferReceive>
    4690:	88 23       	and	r24, r24
    4692:	21 f0       	breq	.+8      	; 0x469c <lora_driver_join+0x46>
    4694:	8b ed       	ldi	r24, 0xDB	; 219
    4696:	98 e1       	ldi	r25, 0x18	; 24
    4698:	aa de       	rcall	.-684    	; 0x43ee <_reply2ReturnCode>
    469a:	03 c0       	rjmp	.+6      	; 0x46a2 <lora_driver_join+0x4c>
    469c:	8b ed       	ldi	r24, 0xDB	; 219
    469e:	98 e1       	ldi	r25, 0x18	; 24
    46a0:	a6 de       	rcall	.-692    	; 0x43ee <_reply2ReturnCode>
    46a2:	1f 91       	pop	r17
    46a4:	0f 91       	pop	r16
    46a6:	08 95       	ret

000046a8 <lora_driver_sendUploadMessage>:
    46a8:	0f 93       	push	r16
    46aa:	1f 93       	push	r17
    46ac:	cf 93       	push	r28
    46ae:	df 93       	push	r29
    46b0:	1f 92       	push	r1
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
    46b6:	db 01       	movw	r26, r22
    46b8:	11 96       	adiw	r26, 0x01	; 1
    46ba:	9c 91       	ld	r25, X
    46bc:	11 97       	sbiw	r26, 0x01	; 1
    46be:	95 31       	cpi	r25, 0x15	; 21
    46c0:	08 f0       	brcs	.+2      	; 0x46c4 <lora_driver_sendUploadMessage+0x1c>
    46c2:	b4 c0       	rjmp	.+360    	; 0x482c <lora_driver_sendUploadMessage+0x184>
    46c4:	99 23       	and	r25, r25
    46c6:	81 f1       	breq	.+96     	; 0x4728 <lora_driver_sendUploadMessage+0x80>
    46c8:	60 e0       	ldi	r22, 0x00	; 0
    46ca:	70 e0       	ldi	r23, 0x00	; 0
    46cc:	27 2f       	mov	r18, r23
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	46 2f       	mov	r20, r22
    46d2:	50 e0       	ldi	r21, 0x00	; 0
    46d4:	fd 01       	movw	r30, r26
    46d6:	e4 0f       	add	r30, r20
    46d8:	f5 1f       	adc	r31, r21
    46da:	92 81       	ldd	r25, Z+2	; 0x02
    46dc:	92 95       	swap	r25
    46de:	9f 70       	andi	r25, 0x0F	; 15
    46e0:	9a 30       	cpi	r25, 0x0A	; 10
    46e2:	10 f0       	brcs	.+4      	; 0x46e8 <lora_driver_sendUploadMessage+0x40>
    46e4:	99 5c       	subi	r25, 0xC9	; 201
    46e6:	01 c0       	rjmp	.+2      	; 0x46ea <lora_driver_sendUploadMessage+0x42>
    46e8:	90 5d       	subi	r25, 0xD0	; 208
    46ea:	f9 01       	movw	r30, r18
    46ec:	e4 59       	subi	r30, 0x94	; 148
    46ee:	f7 4e       	sbci	r31, 0xE7	; 231
    46f0:	90 83       	st	Z, r25
    46f2:	2f 5f       	subi	r18, 0xFF	; 255
    46f4:	3f 4f       	sbci	r19, 0xFF	; 255
    46f6:	fd 01       	movw	r30, r26
    46f8:	e4 0f       	add	r30, r20
    46fa:	f5 1f       	adc	r31, r21
    46fc:	92 81       	ldd	r25, Z+2	; 0x02
    46fe:	9f 70       	andi	r25, 0x0F	; 15
    4700:	49 2f       	mov	r20, r25
    4702:	50 e0       	ldi	r21, 0x00	; 0
    4704:	4a 30       	cpi	r20, 0x0A	; 10
    4706:	51 05       	cpc	r21, r1
    4708:	14 f0       	brlt	.+4      	; 0x470e <lora_driver_sendUploadMessage+0x66>
    470a:	99 5c       	subi	r25, 0xC9	; 201
    470c:	01 c0       	rjmp	.+2      	; 0x4710 <lora_driver_sendUploadMessage+0x68>
    470e:	90 5d       	subi	r25, 0xD0	; 208
    4710:	f9 01       	movw	r30, r18
    4712:	e4 59       	subi	r30, 0x94	; 148
    4714:	f7 4e       	sbci	r31, 0xE7	; 231
    4716:	90 83       	st	Z, r25
    4718:	7e 5f       	subi	r23, 0xFE	; 254
    471a:	6f 5f       	subi	r22, 0xFF	; 255
    471c:	11 96       	adiw	r26, 0x01	; 1
    471e:	9c 91       	ld	r25, X
    4720:	11 97       	sbiw	r26, 0x01	; 1
    4722:	69 17       	cp	r22, r25
    4724:	98 f2       	brcs	.-90     	; 0x46cc <lora_driver_sendUploadMessage+0x24>
    4726:	01 c0       	rjmp	.+2      	; 0x472a <lora_driver_sendUploadMessage+0x82>
    4728:	70 e0       	ldi	r23, 0x00	; 0
    472a:	e7 2f       	mov	r30, r23
    472c:	f0 e0       	ldi	r31, 0x00	; 0
    472e:	e4 59       	subi	r30, 0x94	; 148
    4730:	f7 4e       	sbci	r31, 0xE7	; 231
    4732:	10 82       	st	Z, r1
    4734:	4c 91       	ld	r20, X
    4736:	81 11       	cpse	r24, r1
    4738:	03 c0       	rjmp	.+6      	; 0x4740 <lora_driver_sendUploadMessage+0x98>
    473a:	89 e3       	ldi	r24, 0x39	; 57
    473c:	97 e0       	ldi	r25, 0x07	; 7
    473e:	02 c0       	rjmp	.+4      	; 0x4744 <lora_driver_sendUploadMessage+0x9c>
    4740:	8b e3       	ldi	r24, 0x3B	; 59
    4742:	97 e0       	ldi	r25, 0x07	; 7
    4744:	2c e6       	ldi	r18, 0x6C	; 108
    4746:	38 e1       	ldi	r19, 0x18	; 24
    4748:	3f 93       	push	r19
    474a:	2f 93       	push	r18
    474c:	1f 92       	push	r1
    474e:	4f 93       	push	r20
    4750:	9f 93       	push	r25
    4752:	8f 93       	push	r24
    4754:	8f e3       	ldi	r24, 0x3F	; 63
    4756:	97 e0       	ldi	r25, 0x07	; 7
    4758:	9f 93       	push	r25
    475a:	8f 93       	push	r24
    475c:	8e ea       	ldi	r24, 0xAE	; 174
    475e:	98 e1       	ldi	r25, 0x18	; 24
    4760:	9f 93       	push	r25
    4762:	8f 93       	push	r24
    4764:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <sprintf>
    4768:	60 e0       	ldi	r22, 0x00	; 0
    476a:	70 e0       	ldi	r23, 0x00	; 0
    476c:	8e ea       	ldi	r24, 0xAE	; 174
    476e:	98 e1       	ldi	r25, 0x18	; 24
    4770:	b3 de       	rcall	.-666    	; 0x44d8 <_uploadMessageRc>
    4772:	0f b6       	in	r0, 0x3f	; 63
    4774:	f8 94       	cli
    4776:	de bf       	out	0x3e, r29	; 62
    4778:	0f be       	out	0x3f, r0	; 63
    477a:	cd bf       	out	0x3d, r28	; 61
    477c:	81 11       	cpse	r24, r1
    477e:	59 c0       	rjmp	.+178    	; 0x4832 <lora_driver_sendUploadMessage+0x18a>
    4780:	08 e2       	ldi	r16, 0x28	; 40
    4782:	15 e0       	ldi	r17, 0x05	; 5
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	4d e2       	ldi	r20, 0x2D	; 45
    478a:	50 e0       	ldi	r21, 0x00	; 0
    478c:	6b ed       	ldi	r22, 0xDB	; 219
    478e:	78 e1       	ldi	r23, 0x18	; 24
    4790:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    4794:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    4798:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <xStreamBufferReceive>
    479c:	88 23       	and	r24, r24
    479e:	09 f4       	brne	.+2      	; 0x47a2 <lora_driver_sendUploadMessage+0xfa>
    47a0:	47 c0       	rjmp	.+142    	; 0x4830 <lora_driver_sendUploadMessage+0x188>
    47a2:	8b ed       	ldi	r24, 0xDB	; 219
    47a4:	98 e1       	ldi	r25, 0x18	; 24
    47a6:	23 de       	rcall	.-954    	; 0x43ee <_reply2ReturnCode>
    47a8:	8e 30       	cpi	r24, 0x0E	; 14
    47aa:	09 f0       	breq	.+2      	; 0x47ae <lora_driver_sendUploadMessage+0x106>
    47ac:	42 c0       	rjmp	.+132    	; 0x4832 <lora_driver_sendUploadMessage+0x18a>
    47ae:	87 e0       	ldi	r24, 0x07	; 7
    47b0:	89 83       	std	Y+1, r24	; 0x01
    47b2:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_downlinkMessageBuffer>
    47b6:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_downlinkMessageBuffer+0x1>
    47ba:	89 2b       	or	r24, r25
    47bc:	a9 f1       	breq	.+106    	; 0x4828 <lora_driver_sendUploadMessage+0x180>
    47be:	be 01       	movw	r22, r28
    47c0:	6f 5f       	subi	r22, 0xFF	; 255
    47c2:	7f 4f       	sbci	r23, 0xFF	; 255
    47c4:	8b ed       	ldi	r24, 0xDB	; 219
    47c6:	98 e1       	ldi	r25, 0x18	; 24
    47c8:	68 d1       	rcall	.+720    	; 0x4a9a <decode_port_no>
    47ca:	80 93 56 18 	sts	0x1856, r24	; 0x801856 <_downlinkPayload>
    47ce:	e9 81       	ldd	r30, Y+1	; 0x01
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	e5 52       	subi	r30, 0x25	; 37
    47d4:	f7 4e       	sbci	r31, 0xE7	; 231
    47d6:	df 01       	movw	r26, r30
    47d8:	0d 90       	ld	r0, X+
    47da:	00 20       	and	r0, r0
    47dc:	e9 f7       	brne	.-6      	; 0x47d8 <lora_driver_sendUploadMessage+0x130>
    47de:	11 97       	sbiw	r26, 0x01	; 1
    47e0:	ae 1b       	sub	r26, r30
    47e2:	bf 0b       	sbc	r27, r31
    47e4:	aa 23       	and	r26, r26
    47e6:	91 f0       	breq	.+36     	; 0x480c <lora_driver_sendUploadMessage+0x164>
    47e8:	bb 27       	eor	r27, r27
    47ea:	cd 01       	movw	r24, r26
    47ec:	01 97       	sbiw	r24, 0x01	; 1
    47ee:	9c 01       	movw	r18, r24
    47f0:	12 f4       	brpl	.+4      	; 0x47f6 <lora_driver_sendUploadMessage+0x14e>
    47f2:	2f 5f       	subi	r18, 0xFF	; 255
    47f4:	3f 4f       	sbci	r19, 0xFF	; 255
    47f6:	35 95       	asr	r19
    47f8:	27 95       	ror	r18
    47fa:	20 93 57 18 	sts	0x1857, r18	; 0x801857 <_downlinkPayload+0x1>
    47fe:	af 01       	movw	r20, r30
    4800:	4f 5f       	subi	r20, 0xFF	; 255
    4802:	5f 4f       	sbci	r21, 0xFF	; 255
    4804:	64 e1       	ldi	r22, 0x14	; 20
    4806:	88 e5       	ldi	r24, 0x58	; 88
    4808:	98 e1       	ldi	r25, 0x18	; 24
    480a:	73 d1       	rcall	.+742    	; 0x4af2 <decode_hexadecimal_string_bytes>
    480c:	01 e0       	ldi	r16, 0x01	; 1
    480e:	10 e0       	ldi	r17, 0x00	; 0
    4810:	20 e0       	ldi	r18, 0x00	; 0
    4812:	30 e0       	ldi	r19, 0x00	; 0
    4814:	46 e1       	ldi	r20, 0x16	; 22
    4816:	50 e0       	ldi	r21, 0x00	; 0
    4818:	66 e5       	ldi	r22, 0x56	; 86
    481a:	78 e1       	ldi	r23, 0x18	; 24
    481c:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_downlinkMessageBuffer>
    4820:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_downlinkMessageBuffer+0x1>
    4824:	0e 94 a3 0c 	call	0x1946	; 0x1946 <xStreamBufferSend>
    4828:	8e e0       	ldi	r24, 0x0E	; 14
    482a:	03 c0       	rjmp	.+6      	; 0x4832 <lora_driver_sendUploadMessage+0x18a>
    482c:	84 e1       	ldi	r24, 0x14	; 20
    482e:	01 c0       	rjmp	.+2      	; 0x4832 <lora_driver_sendUploadMessage+0x18a>
    4830:	80 e0       	ldi	r24, 0x00	; 0
    4832:	0f 90       	pop	r0
    4834:	df 91       	pop	r29
    4836:	cf 91       	pop	r28
    4838:	1f 91       	pop	r17
    483a:	0f 91       	pop	r16
    483c:	08 95       	ret

0000483e <lora_driver_setAdaptiveDataRate>:
    483e:	81 30       	cpi	r24, 0x01	; 1
    4840:	19 f0       	breq	.+6      	; 0x4848 <lora_driver_setAdaptiveDataRate+0xa>
    4842:	6f e4       	ldi	r22, 0x4F	; 79
    4844:	77 e0       	ldi	r23, 0x07	; 7
    4846:	02 c0       	rjmp	.+4      	; 0x484c <lora_driver_setAdaptiveDataRate+0xe>
    4848:	68 e2       	ldi	r22, 0x28	; 40
    484a:	78 e0       	ldi	r23, 0x08	; 8
    484c:	83 e5       	ldi	r24, 0x53	; 83
    484e:	97 e0       	ldi	r25, 0x07	; 7
    4850:	43 ce       	rjmp	.-890    	; 0x44d8 <_uploadMessageRc>
    4852:	08 95       	ret

00004854 <lora_driver_setReceiveDelay>:
    4854:	9f 93       	push	r25
    4856:	8f 93       	push	r24
    4858:	84 e8       	ldi	r24, 0x84	; 132
    485a:	97 e0       	ldi	r25, 0x07	; 7
    485c:	9f 93       	push	r25
    485e:	8f 93       	push	r24
    4860:	8e ea       	ldi	r24, 0xAE	; 174
    4862:	98 e1       	ldi	r25, 0x18	; 24
    4864:	9f 93       	push	r25
    4866:	8f 93       	push	r24
    4868:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <sprintf>
    486c:	60 e0       	ldi	r22, 0x00	; 0
    486e:	70 e0       	ldi	r23, 0x00	; 0
    4870:	8e ea       	ldi	r24, 0xAE	; 174
    4872:	98 e1       	ldi	r25, 0x18	; 24
    4874:	31 de       	rcall	.-926    	; 0x44d8 <_uploadMessageRc>
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	08 95       	ret

00004884 <lora_driver_configureToEu868>:
    4884:	2f 92       	push	r2
    4886:	3f 92       	push	r3
    4888:	4f 92       	push	r4
    488a:	5f 92       	push	r5
    488c:	6f 92       	push	r6
    488e:	7f 92       	push	r7
    4890:	8f 92       	push	r8
    4892:	9f 92       	push	r9
    4894:	af 92       	push	r10
    4896:	bf 92       	push	r11
    4898:	cf 92       	push	r12
    489a:	df 92       	push	r13
    489c:	ef 92       	push	r14
    489e:	ff 92       	push	r15
    48a0:	0f 93       	push	r16
    48a2:	1f 93       	push	r17
    48a4:	cf 93       	push	r28
    48a6:	df 93       	push	r29
    48a8:	cd b7       	in	r28, 0x3d	; 61
    48aa:	de b7       	in	r29, 0x3e	; 62
    48ac:	a0 97       	sbiw	r28, 0x20	; 32
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	f8 94       	cli
    48b2:	de bf       	out	0x3e, r29	; 62
    48b4:	0f be       	out	0x3f, r0	; 63
    48b6:	cd bf       	out	0x3d, r28	; 61
    48b8:	61 eb       	ldi	r22, 0xB1	; 177
    48ba:	77 e0       	ldi	r23, 0x07	; 7
    48bc:	8d eb       	ldi	r24, 0xBD	; 189
    48be:	97 e0       	ldi	r25, 0x07	; 7
    48c0:	3c dd       	rcall	.-1416   	; 0x433a <_uploadMessage>
    48c2:	95 dd       	rcall	.-1238   	; 0x43ee <_reply2ReturnCode>
    48c4:	81 11       	cpse	r24, r1
    48c6:	a3 c0       	rjmp	.+326    	; 0x4a0e <lora_driver_configureToEu868+0x18a>
    48c8:	80 e2       	ldi	r24, 0x20	; 32
    48ca:	e4 e2       	ldi	r30, 0x24	; 36
    48cc:	f2 e0       	ldi	r31, 0x02	; 2
    48ce:	de 01       	movw	r26, r28
    48d0:	11 96       	adiw	r26, 0x01	; 1
    48d2:	01 90       	ld	r0, Z+
    48d4:	0d 92       	st	X+, r0
    48d6:	8a 95       	dec	r24
    48d8:	e1 f7       	brne	.-8      	; 0x48d2 <lora_driver_configureToEu868+0x4e>
    48da:	9e 01       	movw	r18, r28
    48dc:	2f 5f       	subi	r18, 0xFF	; 255
    48de:	3f 4f       	sbci	r19, 0xFF	; 255
    48e0:	69 01       	movw	r12, r18
    48e2:	e1 2c       	mov	r14, r1
    48e4:	f1 2c       	mov	r15, r1
    48e6:	0f 2e       	mov	r0, r31
    48e8:	f9 ec       	ldi	r31, 0xC9	; 201
    48ea:	af 2e       	mov	r10, r31
    48ec:	f7 e0       	ldi	r31, 0x07	; 7
    48ee:	bf 2e       	mov	r11, r31
    48f0:	f0 2d       	mov	r31, r0
    48f2:	0e ea       	ldi	r16, 0xAE	; 174
    48f4:	18 e1       	ldi	r17, 0x18	; 24
    48f6:	0f 2e       	mov	r0, r31
    48f8:	f2 ee       	ldi	r31, 0xE2	; 226
    48fa:	4f 2e       	mov	r4, r31
    48fc:	f7 e0       	ldi	r31, 0x07	; 7
    48fe:	5f 2e       	mov	r5, r31
    4900:	f0 2d       	mov	r31, r0
    4902:	0f 2e       	mov	r0, r31
    4904:	f9 ef       	ldi	r31, 0xF9	; 249
    4906:	8f 2e       	mov	r8, r31
    4908:	f7 e0       	ldi	r31, 0x07	; 7
    490a:	9f 2e       	mov	r9, r31
    490c:	f0 2d       	mov	r31, r0
    490e:	0f 2e       	mov	r0, r31
    4910:	f3 e1       	ldi	r31, 0x13	; 19
    4912:	6f 2e       	mov	r6, r31
    4914:	f8 e0       	ldi	r31, 0x08	; 8
    4916:	7f 2e       	mov	r7, r31
    4918:	f0 2d       	mov	r31, r0
    491a:	3e 2c       	mov	r3, r14
    491c:	2f 2c       	mov	r2, r15
    491e:	ff 92       	push	r15
    4920:	ef 92       	push	r14
    4922:	bf 92       	push	r11
    4924:	af 92       	push	r10
    4926:	1f 93       	push	r17
    4928:	0f 93       	push	r16
    492a:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <sprintf>
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	70 e0       	ldi	r23, 0x00	; 0
    4932:	c8 01       	movw	r24, r16
    4934:	02 dd       	rcall	.-1532   	; 0x433a <_uploadMessage>
    4936:	5b dd       	rcall	.-1354   	; 0x43ee <_reply2ReturnCode>
    4938:	0f 90       	pop	r0
    493a:	0f 90       	pop	r0
    493c:	0f 90       	pop	r0
    493e:	0f 90       	pop	r0
    4940:	0f 90       	pop	r0
    4942:	0f 90       	pop	r0
    4944:	81 11       	cpse	r24, r1
    4946:	63 c0       	rjmp	.+198    	; 0x4a0e <lora_driver_configureToEu868+0x18a>
    4948:	32 e0       	ldi	r19, 0x02	; 2
    494a:	3e 15       	cp	r19, r14
    494c:	e8 f4       	brcc	.+58     	; 0x4988 <lora_driver_configureToEu868+0x104>
    494e:	f6 01       	movw	r30, r12
    4950:	83 81       	ldd	r24, Z+3	; 0x03
    4952:	8f 93       	push	r24
    4954:	82 81       	ldd	r24, Z+2	; 0x02
    4956:	8f 93       	push	r24
    4958:	81 81       	ldd	r24, Z+1	; 0x01
    495a:	8f 93       	push	r24
    495c:	80 81       	ld	r24, Z
    495e:	8f 93       	push	r24
    4960:	ff 92       	push	r15
    4962:	ef 92       	push	r14
    4964:	5f 92       	push	r5
    4966:	4f 92       	push	r4
    4968:	1f 93       	push	r17
    496a:	0f 93       	push	r16
    496c:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <sprintf>
    4970:	60 e0       	ldi	r22, 0x00	; 0
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	c8 01       	movw	r24, r16
    4976:	e1 dc       	rcall	.-1598   	; 0x433a <_uploadMessage>
    4978:	3a dd       	rcall	.-1420   	; 0x43ee <_reply2ReturnCode>
    497a:	0f b6       	in	r0, 0x3f	; 63
    497c:	f8 94       	cli
    497e:	de bf       	out	0x3e, r29	; 62
    4980:	0f be       	out	0x3f, r0	; 63
    4982:	cd bf       	out	0x3d, r28	; 61
    4984:	81 11       	cpse	r24, r1
    4986:	43 c0       	rjmp	.+134    	; 0x4a0e <lora_driver_configureToEu868+0x18a>
    4988:	2f 92       	push	r2
    498a:	3f 92       	push	r3
    498c:	9f 92       	push	r9
    498e:	8f 92       	push	r8
    4990:	1f 93       	push	r17
    4992:	0f 93       	push	r16
    4994:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <sprintf>
    4998:	60 e0       	ldi	r22, 0x00	; 0
    499a:	70 e0       	ldi	r23, 0x00	; 0
    499c:	c8 01       	movw	r24, r16
    499e:	cd dc       	rcall	.-1638   	; 0x433a <_uploadMessage>
    49a0:	26 dd       	rcall	.-1460   	; 0x43ee <_reply2ReturnCode>
    49a2:	0f 90       	pop	r0
    49a4:	0f 90       	pop	r0
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	81 11       	cpse	r24, r1
    49b0:	2e c0       	rjmp	.+92     	; 0x4a0e <lora_driver_configureToEu868+0x18a>
    49b2:	2f 92       	push	r2
    49b4:	3f 92       	push	r3
    49b6:	7f 92       	push	r7
    49b8:	6f 92       	push	r6
    49ba:	1f 93       	push	r17
    49bc:	0f 93       	push	r16
    49be:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <sprintf>
    49c2:	60 e0       	ldi	r22, 0x00	; 0
    49c4:	70 e0       	ldi	r23, 0x00	; 0
    49c6:	c8 01       	movw	r24, r16
    49c8:	b8 dc       	rcall	.-1680   	; 0x433a <_uploadMessage>
    49ca:	11 dd       	rcall	.-1502   	; 0x43ee <_reply2ReturnCode>
    49cc:	0f 90       	pop	r0
    49ce:	0f 90       	pop	r0
    49d0:	0f 90       	pop	r0
    49d2:	0f 90       	pop	r0
    49d4:	0f 90       	pop	r0
    49d6:	0f 90       	pop	r0
    49d8:	81 11       	cpse	r24, r1
    49da:	19 c0       	rjmp	.+50     	; 0x4a0e <lora_driver_configureToEu868+0x18a>
    49dc:	3f ef       	ldi	r19, 0xFF	; 255
    49de:	e3 1a       	sub	r14, r19
    49e0:	f3 0a       	sbc	r15, r19
    49e2:	84 e0       	ldi	r24, 0x04	; 4
    49e4:	c8 0e       	add	r12, r24
    49e6:	d1 1c       	adc	r13, r1
    49e8:	98 e0       	ldi	r25, 0x08	; 8
    49ea:	e9 16       	cp	r14, r25
    49ec:	f1 04       	cpc	r15, r1
    49ee:	09 f0       	breq	.+2      	; 0x49f2 <lora_driver_configureToEu868+0x16e>
    49f0:	94 cf       	rjmp	.-216    	; 0x491a <lora_driver_configureToEu868+0x96>
    49f2:	60 e0       	ldi	r22, 0x00	; 0
    49f4:	70 e0       	ldi	r23, 0x00	; 0
    49f6:	8b e2       	ldi	r24, 0x2B	; 43
    49f8:	98 e0       	ldi	r25, 0x08	; 8
    49fa:	9f dc       	rcall	.-1730   	; 0x433a <_uploadMessage>
    49fc:	f8 dc       	rcall	.-1552   	; 0x43ee <_reply2ReturnCode>
    49fe:	81 11       	cpse	r24, r1
    4a00:	06 c0       	rjmp	.+12     	; 0x4a0e <lora_driver_configureToEu868+0x18a>
    4a02:	60 e0       	ldi	r22, 0x00	; 0
    4a04:	70 e0       	ldi	r23, 0x00	; 0
    4a06:	8c e3       	ldi	r24, 0x3C	; 60
    4a08:	98 e0       	ldi	r25, 0x08	; 8
    4a0a:	97 dc       	rcall	.-1746   	; 0x433a <_uploadMessage>
    4a0c:	f0 dc       	rcall	.-1568   	; 0x43ee <_reply2ReturnCode>
    4a0e:	a0 96       	adiw	r28, 0x20	; 32
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	f8 94       	cli
    4a14:	de bf       	out	0x3e, r29	; 62
    4a16:	0f be       	out	0x3f, r0	; 63
    4a18:	cd bf       	out	0x3d, r28	; 61
    4a1a:	df 91       	pop	r29
    4a1c:	cf 91       	pop	r28
    4a1e:	1f 91       	pop	r17
    4a20:	0f 91       	pop	r16
    4a22:	ff 90       	pop	r15
    4a24:	ef 90       	pop	r14
    4a26:	df 90       	pop	r13
    4a28:	cf 90       	pop	r12
    4a2a:	bf 90       	pop	r11
    4a2c:	af 90       	pop	r10
    4a2e:	9f 90       	pop	r9
    4a30:	8f 90       	pop	r8
    4a32:	7f 90       	pop	r7
    4a34:	6f 90       	pop	r6
    4a36:	5f 90       	pop	r5
    4a38:	4f 90       	pop	r4
    4a3a:	3f 90       	pop	r3
    4a3c:	2f 90       	pop	r2
    4a3e:	08 95       	ret

00004a40 <lora_driver_setOtaaIdentity>:
    4a40:	ef 92       	push	r14
    4a42:	ff 92       	push	r15
    4a44:	0f 93       	push	r16
    4a46:	1f 93       	push	r17
    4a48:	cf 93       	push	r28
    4a4a:	df 93       	push	r29
    4a4c:	ec 01       	movw	r28, r24
    4a4e:	8b 01       	movw	r16, r22
    4a50:	7a 01       	movw	r14, r20
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	f4 de       	rcall	.-536    	; 0x483e <lora_driver_setAdaptiveDataRate>
    4a56:	81 11       	cpse	r24, r1
    4a58:	0d c0       	rjmp	.+26     	; 0x4a74 <lora_driver_setOtaaIdentity+0x34>
    4a5a:	ce 01       	movw	r24, r28
    4a5c:	d4 dd       	rcall	.-1112   	; 0x4606 <lora_driver_setApplicationIdentifier>
    4a5e:	81 11       	cpse	r24, r1
    4a60:	09 c0       	rjmp	.+18     	; 0x4a74 <lora_driver_setOtaaIdentity+0x34>
    4a62:	c8 01       	movw	r24, r16
    4a64:	e1 dd       	rcall	.-1086   	; 0x4628 <lora_driver_setApplicationKey>
    4a66:	81 11       	cpse	r24, r1
    4a68:	05 c0       	rjmp	.+10     	; 0x4a74 <lora_driver_setOtaaIdentity+0x34>
    4a6a:	c7 01       	movw	r24, r14
    4a6c:	bb dd       	rcall	.-1162   	; 0x45e4 <lora_driver_setDeviceIdentifier>
    4a6e:	81 11       	cpse	r24, r1
    4a70:	01 c0       	rjmp	.+2      	; 0x4a74 <lora_driver_setOtaaIdentity+0x34>
    4a72:	eb dd       	rcall	.-1066   	; 0x464a <lora_driver_saveMac>
    4a74:	df 91       	pop	r29
    4a76:	cf 91       	pop	r28
    4a78:	1f 91       	pop	r17
    4a7a:	0f 91       	pop	r16
    4a7c:	ff 90       	pop	r15
    4a7e:	ef 90       	pop	r14
    4a80:	08 95       	ret

00004a82 <lora_driver_mapReturnCodeToText>:
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	fc 01       	movw	r30, r24
    4a86:	ee 0f       	add	r30, r30
    4a88:	ff 1f       	adc	r31, r31
    4a8a:	8e 0f       	add	r24, r30
    4a8c:	9f 1f       	adc	r25, r31
    4a8e:	fc 01       	movw	r30, r24
    4a90:	e0 50       	subi	r30, 0x00	; 0
    4a92:	f7 4f       	sbci	r31, 0xF7	; 247
    4a94:	81 81       	ldd	r24, Z+1	; 0x01
    4a96:	92 81       	ldd	r25, Z+2	; 0x02
    4a98:	08 95       	ret

00004a9a <decode_port_no>:
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	00 97       	sbiw	r24, 0x00	; 0
    4a9e:	29 f1       	breq	.+74     	; 0x4aea <decode_port_no+0x50>
    4aa0:	fb 01       	movw	r30, r22
    4aa2:	20 81       	ld	r18, Z
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	01 90       	ld	r0, Z+
    4aa8:	00 20       	and	r0, r0
    4aaa:	e9 f7       	brne	.-6      	; 0x4aa6 <decode_port_no+0xc>
    4aac:	31 97       	sbiw	r30, 0x01	; 1
    4aae:	e8 1b       	sub	r30, r24
    4ab0:	f9 0b       	sbc	r31, r25
    4ab2:	82 2f       	mov	r24, r18
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	e8 17       	cp	r30, r24
    4ab8:	f9 07       	cpc	r31, r25
    4aba:	c8 f0       	brcs	.+50     	; 0x4aee <decode_port_no+0x54>
    4abc:	80 e0       	ldi	r24, 0x00	; 0
    4abe:	08 c0       	rjmp	.+16     	; 0x4ad0 <decode_port_no+0x36>
    4ac0:	88 0f       	add	r24, r24
    4ac2:	38 2f       	mov	r19, r24
    4ac4:	33 0f       	add	r19, r19
    4ac6:	33 0f       	add	r19, r19
    4ac8:	83 0f       	add	r24, r19
    4aca:	80 53       	subi	r24, 0x30	; 48
    4acc:	89 0f       	add	r24, r25
    4ace:	2f 5f       	subi	r18, 0xFF	; 255
    4ad0:	fd 01       	movw	r30, r26
    4ad2:	e2 0f       	add	r30, r18
    4ad4:	f1 1d       	adc	r31, r1
    4ad6:	90 81       	ld	r25, Z
    4ad8:	30 ed       	ldi	r19, 0xD0	; 208
    4ada:	39 0f       	add	r19, r25
    4adc:	3a 30       	cpi	r19, 0x0A	; 10
    4ade:	10 f4       	brcc	.+4      	; 0x4ae4 <decode_port_no+0x4a>
    4ae0:	91 11       	cpse	r25, r1
    4ae2:	ee cf       	rjmp	.-36     	; 0x4ac0 <decode_port_no+0x26>
    4ae4:	fb 01       	movw	r30, r22
    4ae6:	20 83       	st	Z, r18
    4ae8:	08 95       	ret
    4aea:	80 e0       	ldi	r24, 0x00	; 0
    4aec:	08 95       	ret
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	08 95       	ret

00004af2 <decode_hexadecimal_string_bytes>:
    4af2:	0f 93       	push	r16
    4af4:	1f 93       	push	r17
    4af6:	cf 93       	push	r28
    4af8:	df 93       	push	r29
    4afa:	dc 01       	movw	r26, r24
    4afc:	ea 01       	movw	r28, r20
    4afe:	20 97       	sbiw	r28, 0x00	; 0
    4b00:	e1 f1       	breq	.+120    	; 0x4b7a <decode_hexadecimal_string_bytes+0x88>
    4b02:	fa 01       	movw	r30, r20
    4b04:	01 90       	ld	r0, Z+
    4b06:	00 20       	and	r0, r0
    4b08:	e9 f7       	brne	.-6      	; 0x4b04 <decode_hexadecimal_string_bytes+0x12>
    4b0a:	31 97       	sbiw	r30, 0x01	; 1
    4b0c:	e4 1b       	sub	r30, r20
    4b0e:	f5 0b       	sbc	r31, r21
    4b10:	32 97       	sbiw	r30, 0x02	; 2
    4b12:	10 f5       	brcc	.+68     	; 0x4b58 <decode_hexadecimal_string_bytes+0x66>
    4b14:	32 c0       	rjmp	.+100    	; 0x4b7a <decode_hexadecimal_string_bytes+0x88>
    4b16:	8d 01       	movw	r16, r26
    4b18:	04 0f       	add	r16, r20
    4b1a:	15 1f       	adc	r17, r21
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	ae 01       	movw	r20, r28
    4b20:	42 0f       	add	r20, r18
    4b22:	53 1f       	adc	r21, r19
    4b24:	fa 01       	movw	r30, r20
    4b26:	90 81       	ld	r25, Z
    4b28:	91 34       	cpi	r25, 0x41	; 65
    4b2a:	28 f0       	brcs	.+10     	; 0x4b36 <decode_hexadecimal_string_bytes+0x44>
    4b2c:	97 53       	subi	r25, 0x37	; 55
    4b2e:	59 2f       	mov	r21, r25
    4b30:	52 95       	swap	r21
    4b32:	50 7f       	andi	r21, 0xF0	; 240
    4b34:	03 c0       	rjmp	.+6      	; 0x4b3c <decode_hexadecimal_string_bytes+0x4a>
    4b36:	59 2f       	mov	r21, r25
    4b38:	52 95       	swap	r21
    4b3a:	50 7f       	andi	r21, 0xF0	; 240
    4b3c:	2c 0f       	add	r18, r28
    4b3e:	3d 1f       	adc	r19, r29
    4b40:	f9 01       	movw	r30, r18
    4b42:	91 81       	ldd	r25, Z+1	; 0x01
    4b44:	91 34       	cpi	r25, 0x41	; 65
    4b46:	10 f0       	brcs	.+4      	; 0x4b4c <decode_hexadecimal_string_bytes+0x5a>
    4b48:	97 53       	subi	r25, 0x37	; 55
    4b4a:	01 c0       	rjmp	.+2      	; 0x4b4e <decode_hexadecimal_string_bytes+0x5c>
    4b4c:	90 53       	subi	r25, 0x30	; 48
    4b4e:	95 0f       	add	r25, r21
    4b50:	f8 01       	movw	r30, r16
    4b52:	90 83       	st	Z, r25
    4b54:	8f 5f       	subi	r24, 0xFF	; 255
    4b56:	01 c0       	rjmp	.+2      	; 0x4b5a <decode_hexadecimal_string_bytes+0x68>
    4b58:	80 e0       	ldi	r24, 0x00	; 0
    4b5a:	28 2f       	mov	r18, r24
    4b5c:	22 0f       	add	r18, r18
    4b5e:	48 2f       	mov	r20, r24
    4b60:	50 e0       	ldi	r21, 0x00	; 0
    4b62:	fe 01       	movw	r30, r28
    4b64:	01 90       	ld	r0, Z+
    4b66:	00 20       	and	r0, r0
    4b68:	e9 f7       	brne	.-6      	; 0x4b64 <decode_hexadecimal_string_bytes+0x72>
    4b6a:	31 97       	sbiw	r30, 0x01	; 1
    4b6c:	ec 1b       	sub	r30, r28
    4b6e:	fd 0b       	sbc	r31, r29
    4b70:	4e 17       	cp	r20, r30
    4b72:	5f 07       	cpc	r21, r31
    4b74:	10 f4       	brcc	.+4      	; 0x4b7a <decode_hexadecimal_string_bytes+0x88>
    4b76:	86 13       	cpse	r24, r22
    4b78:	ce cf       	rjmp	.-100    	; 0x4b16 <decode_hexadecimal_string_bytes+0x24>
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	1f 91       	pop	r17
    4b80:	0f 91       	pop	r16
    4b82:	08 95       	ret

00004b84 <_serialCallBack>:
    4b84:	80 91 0b 19 	lds	r24, 0x190B	; 0x80190b <crc_sum.1945>
    4b88:	86 0f       	add	r24, r22
    4b8a:	80 93 0b 19 	sts	0x190B, r24	; 0x80190b <crc_sum.1945>
    4b8e:	90 91 0e 19 	lds	r25, 0x190E	; 0x80190e <_mh_state>
    4b92:	91 30       	cpi	r25, 0x01	; 1
    4b94:	79 f0       	breq	.+30     	; 0x4bb4 <_serialCallBack+0x30>
    4b96:	28 f0       	brcs	.+10     	; 0x4ba2 <_serialCallBack+0x1e>
    4b98:	92 30       	cpi	r25, 0x02	; 2
    4b9a:	a9 f0       	breq	.+42     	; 0x4bc6 <_serialCallBack+0x42>
    4b9c:	93 30       	cpi	r25, 0x03	; 3
    4b9e:	19 f1       	breq	.+70     	; 0x4be6 <_serialCallBack+0x62>
    4ba0:	08 95       	ret
    4ba2:	6f 3f       	cpi	r22, 0xFF	; 255
    4ba4:	09 f0       	breq	.+2      	; 0x4ba8 <_serialCallBack+0x24>
    4ba6:	48 c0       	rjmp	.+144    	; 0x4c38 <_serialCallBack+0xb4>
    4ba8:	10 92 0b 19 	sts	0x190B, r1	; 0x80190b <crc_sum.1945>
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	80 93 0e 19 	sts	0x190E, r24	; 0x80190e <_mh_state>
    4bb2:	08 95       	ret
    4bb4:	66 38       	cpi	r22, 0x86	; 134
    4bb6:	09 f0       	breq	.+2      	; 0x4bba <_serialCallBack+0x36>
    4bb8:	3f c0       	rjmp	.+126    	; 0x4c38 <_serialCallBack+0xb4>
    4bba:	10 92 0a 19 	sts	0x190A, r1	; 0x80190a <inDex.1943>
    4bbe:	82 e0       	ldi	r24, 0x02	; 2
    4bc0:	80 93 0e 19 	sts	0x190E, r24	; 0x80190e <_mh_state>
    4bc4:	08 95       	ret
    4bc6:	e0 91 0a 19 	lds	r30, 0x190A	; 0x80190a <inDex.1943>
    4bca:	81 e0       	ldi	r24, 0x01	; 1
    4bcc:	8e 0f       	add	r24, r30
    4bce:	80 93 0a 19 	sts	0x190A, r24	; 0x80190a <inDex.1943>
    4bd2:	f0 e0       	ldi	r31, 0x00	; 0
    4bd4:	e8 5f       	subi	r30, 0xF8	; 248
    4bd6:	f6 4e       	sbci	r31, 0xE6	; 230
    4bd8:	60 83       	st	Z, r22
    4bda:	82 30       	cpi	r24, 0x02	; 2
    4bdc:	69 f5       	brne	.+90     	; 0x4c38 <_serialCallBack+0xb4>
    4bde:	83 e0       	ldi	r24, 0x03	; 3
    4be0:	80 93 0e 19 	sts	0x190E, r24	; 0x80190e <_mh_state>
    4be4:	08 95       	ret
    4be6:	90 91 0a 19 	lds	r25, 0x190A	; 0x80190a <inDex.1943>
    4bea:	21 e0       	ldi	r18, 0x01	; 1
    4bec:	29 0f       	add	r18, r25
    4bee:	20 93 0a 19 	sts	0x190A, r18	; 0x80190a <inDex.1943>
    4bf2:	96 30       	cpi	r25, 0x06	; 6
    4bf4:	09 f5       	brne	.+66     	; 0x4c38 <_serialCallBack+0xb4>
    4bf6:	81 11       	cpse	r24, r1
    4bf8:	0e c0       	rjmp	.+28     	; 0x4c16 <_serialCallBack+0x92>
    4bfa:	e8 e0       	ldi	r30, 0x08	; 8
    4bfc:	f9 e1       	ldi	r31, 0x19	; 25
    4bfe:	80 81       	ld	r24, Z
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	98 2f       	mov	r25, r24
    4c04:	88 27       	eor	r24, r24
    4c06:	21 81       	ldd	r18, Z+1	; 0x01
    4c08:	82 0f       	add	r24, r18
    4c0a:	91 1d       	adc	r25, r1
    4c0c:	90 93 10 19 	sts	0x1910, r25	; 0x801910 <_ppm+0x1>
    4c10:	80 93 0f 19 	sts	0x190F, r24	; 0x80190f <_ppm>
    4c14:	04 c0       	rjmp	.+8      	; 0x4c1e <_serialCallBack+0x9a>
    4c16:	10 92 10 19 	sts	0x1910, r1	; 0x801910 <_ppm+0x1>
    4c1a:	10 92 0f 19 	sts	0x190F, r1	; 0x80190f <_ppm>
    4c1e:	10 92 0e 19 	sts	0x190E, r1	; 0x80190e <_mh_state>
    4c22:	e0 91 0c 19 	lds	r30, 0x190C	; 0x80190c <_appCallBack>
    4c26:	f0 91 0d 19 	lds	r31, 0x190D	; 0x80190d <_appCallBack+0x1>
    4c2a:	30 97       	sbiw	r30, 0x00	; 0
    4c2c:	29 f0       	breq	.+10     	; 0x4c38 <_serialCallBack+0xb4>
    4c2e:	80 91 0f 19 	lds	r24, 0x190F	; 0x80190f <_ppm>
    4c32:	90 91 10 19 	lds	r25, 0x1910	; 0x801910 <_ppm+0x1>
    4c36:	19 95       	eicall
    4c38:	08 95       	ret

00004c3a <mh_z19_initialise>:
    4c3a:	8f 92       	push	r8
    4c3c:	9f 92       	push	r9
    4c3e:	af 92       	push	r10
    4c40:	cf 92       	push	r12
    4c42:	ef 92       	push	r14
    4c44:	0f 93       	push	r16
    4c46:	0f 2e       	mov	r0, r31
    4c48:	f2 ec       	ldi	r31, 0xC2	; 194
    4c4a:	8f 2e       	mov	r8, r31
    4c4c:	f5 e2       	ldi	r31, 0x25	; 37
    4c4e:	9f 2e       	mov	r9, r31
    4c50:	f0 2d       	mov	r31, r0
    4c52:	68 94       	set
    4c54:	aa 24       	eor	r10, r10
    4c56:	a4 f8       	bld	r10, 4
    4c58:	68 94       	set
    4c5a:	cc 24       	eor	r12, r12
    4c5c:	c4 f8       	bld	r12, 4
    4c5e:	e1 2c       	mov	r14, r1
    4c60:	00 e0       	ldi	r16, 0x00	; 0
    4c62:	23 e0       	ldi	r18, 0x03	; 3
    4c64:	40 e8       	ldi	r20, 0x80	; 128
    4c66:	55 e2       	ldi	r21, 0x25	; 37
    4c68:	60 e0       	ldi	r22, 0x00	; 0
    4c6a:	70 e0       	ldi	r23, 0x00	; 0
    4c6c:	84 d0       	rcall	.+264    	; 0x4d76 <serial_create>
    4c6e:	90 93 12 19 	sts	0x1912, r25	; 0x801912 <_serial+0x1>
    4c72:	80 93 11 19 	sts	0x1911, r24	; 0x801911 <_serial>
    4c76:	0f 91       	pop	r16
    4c78:	ef 90       	pop	r14
    4c7a:	cf 90       	pop	r12
    4c7c:	af 90       	pop	r10
    4c7e:	9f 90       	pop	r9
    4c80:	8f 90       	pop	r8
    4c82:	08 95       	ret

00004c84 <mh_z19_injectCallBack>:
    4c84:	90 93 0d 19 	sts	0x190D, r25	; 0x80190d <_appCallBack+0x1>
    4c88:	80 93 0c 19 	sts	0x190C, r24	; 0x80190c <_appCallBack>
    4c8c:	08 95       	ret

00004c8e <mh_z19_takeMeassuring>:
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	cd b7       	in	r28, 0x3d	; 61
    4c94:	de b7       	in	r29, 0x3e	; 62
    4c96:	29 97       	sbiw	r28, 0x09	; 9
    4c98:	0f b6       	in	r0, 0x3f	; 63
    4c9a:	f8 94       	cli
    4c9c:	de bf       	out	0x3e, r29	; 62
    4c9e:	0f be       	out	0x3f, r0	; 63
    4ca0:	cd bf       	out	0x3d, r28	; 61
    4ca2:	89 e0       	ldi	r24, 0x09	; 9
    4ca4:	e4 e4       	ldi	r30, 0x44	; 68
    4ca6:	f2 e0       	ldi	r31, 0x02	; 2
    4ca8:	9e 01       	movw	r18, r28
    4caa:	2f 5f       	subi	r18, 0xFF	; 255
    4cac:	3f 4f       	sbci	r19, 0xFF	; 255
    4cae:	d9 01       	movw	r26, r18
    4cb0:	01 90       	ld	r0, Z+
    4cb2:	0d 92       	st	X+, r0
    4cb4:	8a 95       	dec	r24
    4cb6:	e1 f7       	brne	.-8      	; 0x4cb0 <mh_z19_takeMeassuring+0x22>
    4cb8:	10 92 10 19 	sts	0x1910, r1	; 0x801910 <_ppm+0x1>
    4cbc:	10 92 0f 19 	sts	0x190F, r1	; 0x80190f <_ppm>
    4cc0:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <_serial>
    4cc4:	90 91 12 19 	lds	r25, 0x1912	; 0x801912 <_serial+0x1>
    4cc8:	00 97       	sbiw	r24, 0x00	; 0
    4cca:	31 f0       	breq	.+12     	; 0x4cd8 <mh_z19_takeMeassuring+0x4a>
    4ccc:	42 2f       	mov	r20, r18
    4cce:	53 2f       	mov	r21, r19
    4cd0:	69 e0       	ldi	r22, 0x09	; 9
    4cd2:	22 d1       	rcall	.+580    	; 0x4f18 <serial_sendBytes>
    4cd4:	80 e0       	ldi	r24, 0x00	; 0
    4cd6:	01 c0       	rjmp	.+2      	; 0x4cda <mh_z19_takeMeassuring+0x4c>
    4cd8:	82 e0       	ldi	r24, 0x02	; 2
    4cda:	29 96       	adiw	r28, 0x09	; 9
    4cdc:	0f b6       	in	r0, 0x3f	; 63
    4cde:	f8 94       	cli
    4ce0:	de bf       	out	0x3e, r29	; 62
    4ce2:	0f be       	out	0x3f, r0	; 63
    4ce4:	cd bf       	out	0x3d, r28	; 61
    4ce6:	df 91       	pop	r29
    4ce8:	cf 91       	pop	r28
    4cea:	08 95       	ret

00004cec <mh_z19_getCo2Ppm>:
    4cec:	20 91 0f 19 	lds	r18, 0x190F	; 0x80190f <_ppm>
    4cf0:	30 91 10 19 	lds	r19, 0x1910	; 0x801910 <_ppm+0x1>
    4cf4:	21 15       	cp	r18, r1
    4cf6:	31 05       	cpc	r19, r1
    4cf8:	29 f4       	brne	.+10     	; 0x4d04 <mh_z19_getCo2Ppm+0x18>
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	11 82       	std	Z+1, r1	; 0x01
    4cfe:	10 82       	st	Z, r1
    4d00:	81 e0       	ldi	r24, 0x01	; 1
    4d02:	08 95       	ret
    4d04:	fc 01       	movw	r30, r24
    4d06:	31 83       	std	Z+1, r19	; 0x01
    4d08:	20 83       	st	Z, r18
    4d0a:	80 e0       	ldi	r24, 0x00	; 0
    4d0c:	08 95       	ret

00004d0e <rc_servo_setPosition>:
    4d0e:	65 36       	cpi	r22, 0x65	; 101
    4d10:	0c f0       	brlt	.+2      	; 0x4d14 <rc_servo_setPosition+0x6>
    4d12:	64 e6       	ldi	r22, 0x64	; 100
    4d14:	6c 39       	cpi	r22, 0x9C	; 156
    4d16:	0c f4       	brge	.+2      	; 0x4d1a <rc_servo_setPosition+0xc>
    4d18:	6c e9       	ldi	r22, 0x9C	; 156
    4d1a:	96 ef       	ldi	r25, 0xF6	; 246
    4d1c:	69 02       	muls	r22, r25
    4d1e:	b0 01       	movw	r22, r0
    4d20:	11 24       	eor	r1, r1
    4d22:	68 54       	subi	r22, 0x48	; 72
    4d24:	74 4f       	sbci	r23, 0xF4	; 244
    4d26:	81 11       	cpse	r24, r1
    4d28:	05 c0       	rjmp	.+10     	; 0x4d34 <rc_servo_setPosition+0x26>
    4d2a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4d2e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4d32:	08 95       	ret
    4d34:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4d38:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4d3c:	08 95       	ret

00004d3e <rc_servo_initialise>:
    4d3e:	ea e0       	ldi	r30, 0x0A	; 10
    4d40:	f1 e0       	ldi	r31, 0x01	; 1
    4d42:	80 81       	ld	r24, Z
    4d44:	88 61       	ori	r24, 0x18	; 24
    4d46:	80 83       	st	Z, r24
    4d48:	8f e3       	ldi	r24, 0x3F	; 63
    4d4a:	9c e9       	ldi	r25, 0x9C	; 156
    4d4c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4d50:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4d54:	60 e0       	ldi	r22, 0x00	; 0
    4d56:	80 e0       	ldi	r24, 0x00	; 0
    4d58:	da df       	rcall	.-76     	; 0x4d0e <rc_servo_setPosition>
    4d5a:	60 e0       	ldi	r22, 0x00	; 0
    4d5c:	81 e0       	ldi	r24, 0x01	; 1
    4d5e:	d7 df       	rcall	.-82     	; 0x4d0e <rc_servo_setPosition>
    4d60:	e0 e2       	ldi	r30, 0x20	; 32
    4d62:	f1 e0       	ldi	r31, 0x01	; 1
    4d64:	80 81       	ld	r24, Z
    4d66:	82 6a       	ori	r24, 0xA2	; 162
    4d68:	80 83       	st	Z, r24
    4d6a:	e1 e2       	ldi	r30, 0x21	; 33
    4d6c:	f1 e0       	ldi	r31, 0x01	; 1
    4d6e:	80 81       	ld	r24, Z
    4d70:	8a 61       	ori	r24, 0x1A	; 26
    4d72:	80 83       	st	Z, r24
    4d74:	08 95       	ret

00004d76 <serial_create>:
    4d76:	2f 92       	push	r2
    4d78:	3f 92       	push	r3
    4d7a:	4f 92       	push	r4
    4d7c:	5f 92       	push	r5
    4d7e:	6f 92       	push	r6
    4d80:	7f 92       	push	r7
    4d82:	8f 92       	push	r8
    4d84:	9f 92       	push	r9
    4d86:	af 92       	push	r10
    4d88:	cf 92       	push	r12
    4d8a:	ef 92       	push	r14
    4d8c:	ff 92       	push	r15
    4d8e:	0f 93       	push	r16
    4d90:	1f 93       	push	r17
    4d92:	cf 93       	push	r28
    4d94:	df 93       	push	r29
    4d96:	cd b7       	in	r28, 0x3d	; 61
    4d98:	de b7       	in	r29, 0x3e	; 62
    4d9a:	f8 2e       	mov	r15, r24
    4d9c:	2a 01       	movw	r4, r20
    4d9e:	3b 01       	movw	r6, r22
    4da0:	88 e0       	ldi	r24, 0x08	; 8
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	0e 94 d6 33 	call	0x67ac	; 0x67ac <malloc>
    4da8:	8c 01       	movw	r16, r24
    4daa:	8f 2d       	mov	r24, r15
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	fc 01       	movw	r30, r24
    4db0:	ee 0f       	add	r30, r30
    4db2:	ff 1f       	adc	r31, r31
    4db4:	ed 5e       	subi	r30, 0xED	; 237
    4db6:	f6 4e       	sbci	r31, 0xE6	; 230
    4db8:	11 83       	std	Z+1, r17	; 0x01
    4dba:	00 83       	st	Z, r16
    4dbc:	01 15       	cp	r16, r1
    4dbe:	11 05       	cpc	r17, r1
    4dc0:	09 f4       	brne	.+2      	; 0x4dc4 <serial_create+0x4e>
    4dc2:	6d c0       	rjmp	.+218    	; 0x4e9e <serial_create+0x128>
    4dc4:	88 0f       	add	r24, r24
    4dc6:	99 1f       	adc	r25, r25
    4dc8:	fc 01       	movw	r30, r24
    4dca:	e3 5f       	subi	r30, 0xF3	; 243
    4dcc:	fd 4f       	sbci	r31, 0xFD	; 253
    4dce:	80 81       	ld	r24, Z
    4dd0:	91 81       	ldd	r25, Z+1	; 0x01
    4dd2:	d8 01       	movw	r26, r16
    4dd4:	8d 93       	st	X+, r24
    4dd6:	9c 93       	st	X, r25
    4dd8:	8c 2d       	mov	r24, r12
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	88 0f       	add	r24, r24
    4dde:	99 1f       	adc	r25, r25
    4de0:	88 0f       	add	r24, r24
    4de2:	99 1f       	adc	r25, r25
    4de4:	0e 94 d6 33 	call	0x67ac	; 0x67ac <malloc>
    4de8:	1c 01       	movw	r2, r24
    4dea:	86 e0       	ldi	r24, 0x06	; 6
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	0e 94 d6 33 	call	0x67ac	; 0x67ac <malloc>
    4df2:	7c 01       	movw	r14, r24
    4df4:	4c 2d       	mov	r20, r12
    4df6:	b1 01       	movw	r22, r2
    4df8:	f4 d6       	rcall	.+3560   	; 0x5be2 <fifo_init>
    4dfa:	f8 01       	movw	r30, r16
    4dfc:	f5 82       	std	Z+5, r15	; 0x05
    4dfe:	e4 82       	std	Z+4, r14	; 0x04
    4e00:	8a 2d       	mov	r24, r10
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	88 0f       	add	r24, r24
    4e06:	99 1f       	adc	r25, r25
    4e08:	88 0f       	add	r24, r24
    4e0a:	99 1f       	adc	r25, r25
    4e0c:	0e 94 d6 33 	call	0x67ac	; 0x67ac <malloc>
    4e10:	1c 01       	movw	r2, r24
    4e12:	86 e0       	ldi	r24, 0x06	; 6
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	0e 94 d6 33 	call	0x67ac	; 0x67ac <malloc>
    4e1a:	7c 01       	movw	r14, r24
    4e1c:	4a 2d       	mov	r20, r10
    4e1e:	b1 01       	movw	r22, r2
    4e20:	e0 d6       	rcall	.+3520   	; 0x5be2 <fifo_init>
    4e22:	d8 01       	movw	r26, r16
    4e24:	13 96       	adiw	r26, 0x03	; 3
    4e26:	fc 92       	st	X, r15
    4e28:	ee 92       	st	-X, r14
    4e2a:	12 97       	sbiw	r26, 0x02	; 2
    4e2c:	17 96       	adiw	r26, 0x07	; 7
    4e2e:	9c 92       	st	X, r9
    4e30:	8e 92       	st	-X, r8
    4e32:	16 97       	sbiw	r26, 0x06	; 6
    4e34:	ff b6       	in	r15, 0x3f	; 63
    4e36:	f8 94       	cli
    4e38:	ed 91       	ld	r30, X+
    4e3a:	fc 91       	ld	r31, X
    4e3c:	11 97       	sbiw	r26, 0x01	; 1
    4e3e:	36 97       	sbiw	r30, 0x06	; 6
    4e40:	80 81       	ld	r24, Z
    4e42:	82 60       	ori	r24, 0x02	; 2
    4e44:	80 83       	st	Z, r24
    4e46:	8d 90       	ld	r8, X+
    4e48:	9c 90       	ld	r9, X
    4e4a:	c3 01       	movw	r24, r6
    4e4c:	b2 01       	movw	r22, r4
    4e4e:	0e 94 94 32 	call	0x6528	; 0x6528 <__floatunsisf>
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	40 e0       	ldi	r20, 0x00	; 0
    4e58:	51 e4       	ldi	r21, 0x41	; 65
    4e5a:	0e 94 22 33 	call	0x6644	; 0x6644 <__mulsf3>
    4e5e:	9b 01       	movw	r18, r22
    4e60:	ac 01       	movw	r20, r24
    4e62:	60 e0       	ldi	r22, 0x00	; 0
    4e64:	74 e2       	ldi	r23, 0x24	; 36
    4e66:	84 e7       	ldi	r24, 0x74	; 116
    4e68:	9b e4       	ldi	r25, 0x4B	; 75
    4e6a:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divsf3>
    4e6e:	20 e0       	ldi	r18, 0x00	; 0
    4e70:	30 e0       	ldi	r19, 0x00	; 0
    4e72:	40 e8       	ldi	r20, 0x80	; 128
    4e74:	5f e3       	ldi	r21, 0x3F	; 63
    4e76:	0e 94 96 31 	call	0x632c	; 0x632c <__subsf3>
    4e7a:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__fixunssfsi>
    4e7e:	f4 01       	movw	r30, r8
    4e80:	32 97       	sbiw	r30, 0x02	; 2
    4e82:	60 83       	st	Z, r22
    4e84:	d8 01       	movw	r26, r16
    4e86:	ed 91       	ld	r30, X+
    4e88:	fc 91       	ld	r31, X
    4e8a:	11 97       	sbiw	r26, 0x01	; 1
    4e8c:	35 97       	sbiw	r30, 0x05	; 5
    4e8e:	88 e9       	ldi	r24, 0x98	; 152
    4e90:	80 83       	st	Z, r24
    4e92:	ed 91       	ld	r30, X+
    4e94:	fc 91       	ld	r31, X
    4e96:	34 97       	sbiw	r30, 0x04	; 4
    4e98:	86 e0       	ldi	r24, 0x06	; 6
    4e9a:	80 83       	st	Z, r24
    4e9c:	ff be       	out	0x3f, r15	; 63
    4e9e:	c8 01       	movw	r24, r16
    4ea0:	df 91       	pop	r29
    4ea2:	cf 91       	pop	r28
    4ea4:	1f 91       	pop	r17
    4ea6:	0f 91       	pop	r16
    4ea8:	ff 90       	pop	r15
    4eaa:	ef 90       	pop	r14
    4eac:	cf 90       	pop	r12
    4eae:	af 90       	pop	r10
    4eb0:	9f 90       	pop	r9
    4eb2:	8f 90       	pop	r8
    4eb4:	7f 90       	pop	r7
    4eb6:	6f 90       	pop	r6
    4eb8:	5f 90       	pop	r5
    4eba:	4f 90       	pop	r4
    4ebc:	3f 90       	pop	r3
    4ebe:	2f 90       	pop	r2
    4ec0:	08 95       	ret

00004ec2 <serial_sendByte>:
    4ec2:	cf 93       	push	r28
    4ec4:	df 93       	push	r29
    4ec6:	dc 01       	movw	r26, r24
    4ec8:	89 2b       	or	r24, r25
    4eca:	01 f1       	breq	.+64     	; 0x4f0c <serial_sendByte+0x4a>
    4ecc:	12 96       	adiw	r26, 0x02	; 2
    4ece:	ed 91       	ld	r30, X+
    4ed0:	fc 91       	ld	r31, X
    4ed2:	13 97       	sbiw	r26, 0x03	; 3
    4ed4:	93 81       	ldd	r25, Z+3	; 0x03
    4ed6:	82 81       	ldd	r24, Z+2	; 0x02
    4ed8:	25 81       	ldd	r18, Z+5	; 0x05
    4eda:	98 1b       	sub	r25, r24
    4edc:	92 23       	and	r25, r18
    4ede:	84 81       	ldd	r24, Z+4	; 0x04
    4ee0:	98 17       	cp	r25, r24
    4ee2:	b1 f0       	breq	.+44     	; 0x4f10 <serial_sendByte+0x4e>
    4ee4:	83 81       	ldd	r24, Z+3	; 0x03
    4ee6:	26 95       	lsr	r18
    4ee8:	28 23       	and	r18, r24
    4eea:	c0 81       	ld	r28, Z
    4eec:	d1 81       	ldd	r29, Z+1	; 0x01
    4eee:	c2 0f       	add	r28, r18
    4ef0:	d1 1d       	adc	r29, r1
    4ef2:	68 83       	st	Y, r22
    4ef4:	8f 5f       	subi	r24, 0xFF	; 255
    4ef6:	95 81       	ldd	r25, Z+5	; 0x05
    4ef8:	89 23       	and	r24, r25
    4efa:	83 83       	std	Z+3, r24	; 0x03
    4efc:	ed 91       	ld	r30, X+
    4efe:	fc 91       	ld	r31, X
    4f00:	35 97       	sbiw	r30, 0x05	; 5
    4f02:	80 81       	ld	r24, Z
    4f04:	80 62       	ori	r24, 0x20	; 32
    4f06:	80 83       	st	Z, r24
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	03 c0       	rjmp	.+6      	; 0x4f12 <serial_sendByte+0x50>
    4f0c:	81 e0       	ldi	r24, 0x01	; 1
    4f0e:	01 c0       	rjmp	.+2      	; 0x4f12 <serial_sendByte+0x50>
    4f10:	82 e0       	ldi	r24, 0x02	; 2
    4f12:	df 91       	pop	r29
    4f14:	cf 91       	pop	r28
    4f16:	08 95       	ret

00004f18 <serial_sendBytes>:
    4f18:	ef 92       	push	r14
    4f1a:	ff 92       	push	r15
    4f1c:	0f 93       	push	r16
    4f1e:	1f 93       	push	r17
    4f20:	cf 93       	push	r28
    4f22:	df 93       	push	r29
    4f24:	7c 01       	movw	r14, r24
    4f26:	00 97       	sbiw	r24, 0x00	; 0
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <serial_sendBytes+0x14>
    4f2a:	41 c0       	rjmp	.+130    	; 0x4fae <serial_sendBytes+0x96>
    4f2c:	dc 01       	movw	r26, r24
    4f2e:	12 96       	adiw	r26, 0x02	; 2
    4f30:	ed 91       	ld	r30, X+
    4f32:	fc 91       	ld	r31, X
    4f34:	13 97       	sbiw	r26, 0x03	; 3
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	82 81       	ldd	r24, Z+2	; 0x02
    4f3a:	98 1b       	sub	r25, r24
    4f3c:	85 81       	ldd	r24, Z+5	; 0x05
    4f3e:	98 23       	and	r25, r24
    4f40:	84 81       	ldd	r24, Z+4	; 0x04
    4f42:	89 1b       	sub	r24, r25
    4f44:	86 17       	cp	r24, r22
    4f46:	a8 f1       	brcs	.+106    	; 0x4fb2 <serial_sendBytes+0x9a>
    4f48:	66 23       	and	r22, r22
    4f4a:	41 f1       	breq	.+80     	; 0x4f9c <serial_sendBytes+0x84>
    4f4c:	84 2f       	mov	r24, r20
    4f4e:	95 2f       	mov	r25, r21
    4f50:	dc 01       	movw	r26, r24
    4f52:	61 50       	subi	r22, 0x01	; 1
    4f54:	46 2f       	mov	r20, r22
    4f56:	50 e0       	ldi	r21, 0x00	; 0
    4f58:	4f 5f       	subi	r20, 0xFF	; 255
    4f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f5c:	48 0f       	add	r20, r24
    4f5e:	59 1f       	adc	r21, r25
    4f60:	e7 01       	movw	r28, r14
    4f62:	ea 81       	ldd	r30, Y+2	; 0x02
    4f64:	fb 81       	ldd	r31, Y+3	; 0x03
    4f66:	93 81       	ldd	r25, Z+3	; 0x03
    4f68:	82 81       	ldd	r24, Z+2	; 0x02
    4f6a:	25 81       	ldd	r18, Z+5	; 0x05
    4f6c:	98 1b       	sub	r25, r24
    4f6e:	92 23       	and	r25, r18
    4f70:	84 81       	ldd	r24, Z+4	; 0x04
    4f72:	98 17       	cp	r25, r24
    4f74:	79 f0       	breq	.+30     	; 0x4f94 <serial_sendBytes+0x7c>
    4f76:	8c 91       	ld	r24, X
    4f78:	93 81       	ldd	r25, Z+3	; 0x03
    4f7a:	26 95       	lsr	r18
    4f7c:	29 23       	and	r18, r25
    4f7e:	60 81       	ld	r22, Z
    4f80:	71 81       	ldd	r23, Z+1	; 0x01
    4f82:	8b 01       	movw	r16, r22
    4f84:	02 0f       	add	r16, r18
    4f86:	11 1d       	adc	r17, r1
    4f88:	e8 01       	movw	r28, r16
    4f8a:	88 83       	st	Y, r24
    4f8c:	9f 5f       	subi	r25, 0xFF	; 255
    4f8e:	85 81       	ldd	r24, Z+5	; 0x05
    4f90:	98 23       	and	r25, r24
    4f92:	93 83       	std	Z+3, r25	; 0x03
    4f94:	11 96       	adiw	r26, 0x01	; 1
    4f96:	a4 17       	cp	r26, r20
    4f98:	b5 07       	cpc	r27, r21
    4f9a:	11 f7       	brne	.-60     	; 0x4f60 <serial_sendBytes+0x48>
    4f9c:	d7 01       	movw	r26, r14
    4f9e:	ed 91       	ld	r30, X+
    4fa0:	fc 91       	ld	r31, X
    4fa2:	35 97       	sbiw	r30, 0x05	; 5
    4fa4:	80 81       	ld	r24, Z
    4fa6:	80 62       	ori	r24, 0x20	; 32
    4fa8:	80 83       	st	Z, r24
    4faa:	80 e0       	ldi	r24, 0x00	; 0
    4fac:	03 c0       	rjmp	.+6      	; 0x4fb4 <serial_sendBytes+0x9c>
    4fae:	81 e0       	ldi	r24, 0x01	; 1
    4fb0:	01 c0       	rjmp	.+2      	; 0x4fb4 <serial_sendBytes+0x9c>
    4fb2:	82 e0       	ldi	r24, 0x02	; 2
    4fb4:	df 91       	pop	r29
    4fb6:	cf 91       	pop	r28
    4fb8:	1f 91       	pop	r17
    4fba:	0f 91       	pop	r16
    4fbc:	ff 90       	pop	r15
    4fbe:	ef 90       	pop	r14
    4fc0:	08 95       	ret

00004fc2 <serial_getByte>:
    4fc2:	00 97       	sbiw	r24, 0x00	; 0
    4fc4:	d1 f0       	breq	.+52     	; 0x4ffa <serial_getByte+0x38>
    4fc6:	dc 01       	movw	r26, r24
    4fc8:	14 96       	adiw	r26, 0x04	; 4
    4fca:	ed 91       	ld	r30, X+
    4fcc:	fc 91       	ld	r31, X
    4fce:	15 97       	sbiw	r26, 0x05	; 5
    4fd0:	93 81       	ldd	r25, Z+3	; 0x03
    4fd2:	82 81       	ldd	r24, Z+2	; 0x02
    4fd4:	98 17       	cp	r25, r24
    4fd6:	99 f0       	breq	.+38     	; 0x4ffe <serial_getByte+0x3c>
    4fd8:	92 81       	ldd	r25, Z+2	; 0x02
    4fda:	85 81       	ldd	r24, Z+5	; 0x05
    4fdc:	86 95       	lsr	r24
    4fde:	89 23       	and	r24, r25
    4fe0:	a0 81       	ld	r26, Z
    4fe2:	b1 81       	ldd	r27, Z+1	; 0x01
    4fe4:	a8 0f       	add	r26, r24
    4fe6:	b1 1d       	adc	r27, r1
    4fe8:	8c 91       	ld	r24, X
    4fea:	db 01       	movw	r26, r22
    4fec:	8c 93       	st	X, r24
    4fee:	9f 5f       	subi	r25, 0xFF	; 255
    4ff0:	85 81       	ldd	r24, Z+5	; 0x05
    4ff2:	98 23       	and	r25, r24
    4ff4:	92 83       	std	Z+2, r25	; 0x02
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	08 95       	ret
    4ffa:	81 e0       	ldi	r24, 0x01	; 1
    4ffc:	08 95       	ret
    4ffe:	83 e0       	ldi	r24, 0x03	; 3
    5000:	08 95       	ret

00005002 <__vector_25>:
    5002:	1f 92       	push	r1
    5004:	0f 92       	push	r0
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	0f 92       	push	r0
    500a:	11 24       	eor	r1, r1
    500c:	0b b6       	in	r0, 0x3b	; 59
    500e:	0f 92       	push	r0
    5010:	2f 93       	push	r18
    5012:	3f 93       	push	r19
    5014:	4f 93       	push	r20
    5016:	5f 93       	push	r21
    5018:	6f 93       	push	r22
    501a:	7f 93       	push	r23
    501c:	8f 93       	push	r24
    501e:	9f 93       	push	r25
    5020:	af 93       	push	r26
    5022:	bf 93       	push	r27
    5024:	cf 93       	push	r28
    5026:	df 93       	push	r29
    5028:	ef 93       	push	r30
    502a:	ff 93       	push	r31
    502c:	a0 91 13 19 	lds	r26, 0x1913	; 0x801913 <_ser_handle>
    5030:	b0 91 14 19 	lds	r27, 0x1914	; 0x801914 <_ser_handle+0x1>
    5034:	10 97       	sbiw	r26, 0x00	; 0
    5036:	11 f1       	breq	.+68     	; 0x507c <__vector_25+0x7a>
    5038:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    503c:	14 96       	adiw	r26, 0x04	; 4
    503e:	ed 91       	ld	r30, X+
    5040:	fc 91       	ld	r31, X
    5042:	15 97       	sbiw	r26, 0x05	; 5
    5044:	93 81       	ldd	r25, Z+3	; 0x03
    5046:	82 81       	ldd	r24, Z+2	; 0x02
    5048:	25 81       	ldd	r18, Z+5	; 0x05
    504a:	98 1b       	sub	r25, r24
    504c:	92 23       	and	r25, r18
    504e:	84 81       	ldd	r24, Z+4	; 0x04
    5050:	98 17       	cp	r25, r24
    5052:	61 f0       	breq	.+24     	; 0x506c <__vector_25+0x6a>
    5054:	83 81       	ldd	r24, Z+3	; 0x03
    5056:	26 95       	lsr	r18
    5058:	28 23       	and	r18, r24
    505a:	c0 81       	ld	r28, Z
    505c:	d1 81       	ldd	r29, Z+1	; 0x01
    505e:	c2 0f       	add	r28, r18
    5060:	d1 1d       	adc	r29, r1
    5062:	68 83       	st	Y, r22
    5064:	8f 5f       	subi	r24, 0xFF	; 255
    5066:	95 81       	ldd	r25, Z+5	; 0x05
    5068:	89 23       	and	r24, r25
    506a:	83 83       	std	Z+3, r24	; 0x03
    506c:	16 96       	adiw	r26, 0x06	; 6
    506e:	ed 91       	ld	r30, X+
    5070:	fc 91       	ld	r31, X
    5072:	17 97       	sbiw	r26, 0x07	; 7
    5074:	30 97       	sbiw	r30, 0x00	; 0
    5076:	11 f0       	breq	.+4      	; 0x507c <__vector_25+0x7a>
    5078:	cd 01       	movw	r24, r26
    507a:	19 95       	eicall
    507c:	ff 91       	pop	r31
    507e:	ef 91       	pop	r30
    5080:	df 91       	pop	r29
    5082:	cf 91       	pop	r28
    5084:	bf 91       	pop	r27
    5086:	af 91       	pop	r26
    5088:	9f 91       	pop	r25
    508a:	8f 91       	pop	r24
    508c:	7f 91       	pop	r23
    508e:	6f 91       	pop	r22
    5090:	5f 91       	pop	r21
    5092:	4f 91       	pop	r20
    5094:	3f 91       	pop	r19
    5096:	2f 91       	pop	r18
    5098:	0f 90       	pop	r0
    509a:	0b be       	out	0x3b, r0	; 59
    509c:	0f 90       	pop	r0
    509e:	0f be       	out	0x3f, r0	; 63
    50a0:	0f 90       	pop	r0
    50a2:	1f 90       	pop	r1
    50a4:	18 95       	reti

000050a6 <__vector_26>:
    50a6:	1f 92       	push	r1
    50a8:	0f 92       	push	r0
    50aa:	0f b6       	in	r0, 0x3f	; 63
    50ac:	0f 92       	push	r0
    50ae:	11 24       	eor	r1, r1
    50b0:	0b b6       	in	r0, 0x3b	; 59
    50b2:	0f 92       	push	r0
    50b4:	2f 93       	push	r18
    50b6:	8f 93       	push	r24
    50b8:	9f 93       	push	r25
    50ba:	af 93       	push	r26
    50bc:	bf 93       	push	r27
    50be:	ef 93       	push	r30
    50c0:	ff 93       	push	r31
    50c2:	e0 91 13 19 	lds	r30, 0x1913	; 0x801913 <_ser_handle>
    50c6:	f0 91 14 19 	lds	r31, 0x1914	; 0x801914 <_ser_handle+0x1>
    50ca:	30 97       	sbiw	r30, 0x00	; 0
    50cc:	b9 f0       	breq	.+46     	; 0x50fc <__vector_26+0x56>
    50ce:	02 80       	ldd	r0, Z+2	; 0x02
    50d0:	f3 81       	ldd	r31, Z+3	; 0x03
    50d2:	e0 2d       	mov	r30, r0
    50d4:	93 81       	ldd	r25, Z+3	; 0x03
    50d6:	82 81       	ldd	r24, Z+2	; 0x02
    50d8:	98 17       	cp	r25, r24
    50da:	b1 f0       	breq	.+44     	; 0x5108 <__vector_26+0x62>
    50dc:	92 81       	ldd	r25, Z+2	; 0x02
    50de:	85 81       	ldd	r24, Z+5	; 0x05
    50e0:	28 2f       	mov	r18, r24
    50e2:	26 95       	lsr	r18
    50e4:	29 23       	and	r18, r25
    50e6:	a0 81       	ld	r26, Z
    50e8:	b1 81       	ldd	r27, Z+1	; 0x01
    50ea:	a2 0f       	add	r26, r18
    50ec:	b1 1d       	adc	r27, r1
    50ee:	2c 91       	ld	r18, X
    50f0:	9f 5f       	subi	r25, 0xFF	; 255
    50f2:	89 23       	and	r24, r25
    50f4:	82 83       	std	Z+2, r24	; 0x02
    50f6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    50fa:	0b c0       	rjmp	.+22     	; 0x5112 <__vector_26+0x6c>
    50fc:	e1 ec       	ldi	r30, 0xC1	; 193
    50fe:	f0 e0       	ldi	r31, 0x00	; 0
    5100:	80 81       	ld	r24, Z
    5102:	8f 7d       	andi	r24, 0xDF	; 223
    5104:	80 83       	st	Z, r24
    5106:	05 c0       	rjmp	.+10     	; 0x5112 <__vector_26+0x6c>
    5108:	e1 ec       	ldi	r30, 0xC1	; 193
    510a:	f0 e0       	ldi	r31, 0x00	; 0
    510c:	80 81       	ld	r24, Z
    510e:	8f 7d       	andi	r24, 0xDF	; 223
    5110:	80 83       	st	Z, r24
    5112:	ff 91       	pop	r31
    5114:	ef 91       	pop	r30
    5116:	bf 91       	pop	r27
    5118:	af 91       	pop	r26
    511a:	9f 91       	pop	r25
    511c:	8f 91       	pop	r24
    511e:	2f 91       	pop	r18
    5120:	0f 90       	pop	r0
    5122:	0b be       	out	0x3b, r0	; 59
    5124:	0f 90       	pop	r0
    5126:	0f be       	out	0x3f, r0	; 63
    5128:	0f 90       	pop	r0
    512a:	1f 90       	pop	r1
    512c:	18 95       	reti

0000512e <__vector_36>:
    512e:	1f 92       	push	r1
    5130:	0f 92       	push	r0
    5132:	0f b6       	in	r0, 0x3f	; 63
    5134:	0f 92       	push	r0
    5136:	11 24       	eor	r1, r1
    5138:	0b b6       	in	r0, 0x3b	; 59
    513a:	0f 92       	push	r0
    513c:	2f 93       	push	r18
    513e:	3f 93       	push	r19
    5140:	4f 93       	push	r20
    5142:	5f 93       	push	r21
    5144:	6f 93       	push	r22
    5146:	7f 93       	push	r23
    5148:	8f 93       	push	r24
    514a:	9f 93       	push	r25
    514c:	af 93       	push	r26
    514e:	bf 93       	push	r27
    5150:	cf 93       	push	r28
    5152:	df 93       	push	r29
    5154:	ef 93       	push	r30
    5156:	ff 93       	push	r31
    5158:	a0 91 15 19 	lds	r26, 0x1915	; 0x801915 <_ser_handle+0x2>
    515c:	b0 91 16 19 	lds	r27, 0x1916	; 0x801916 <_ser_handle+0x3>
    5160:	10 97       	sbiw	r26, 0x00	; 0
    5162:	11 f1       	breq	.+68     	; 0x51a8 <__vector_36+0x7a>
    5164:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5168:	14 96       	adiw	r26, 0x04	; 4
    516a:	ed 91       	ld	r30, X+
    516c:	fc 91       	ld	r31, X
    516e:	15 97       	sbiw	r26, 0x05	; 5
    5170:	93 81       	ldd	r25, Z+3	; 0x03
    5172:	82 81       	ldd	r24, Z+2	; 0x02
    5174:	25 81       	ldd	r18, Z+5	; 0x05
    5176:	98 1b       	sub	r25, r24
    5178:	92 23       	and	r25, r18
    517a:	84 81       	ldd	r24, Z+4	; 0x04
    517c:	98 17       	cp	r25, r24
    517e:	61 f0       	breq	.+24     	; 0x5198 <__vector_36+0x6a>
    5180:	83 81       	ldd	r24, Z+3	; 0x03
    5182:	26 95       	lsr	r18
    5184:	28 23       	and	r18, r24
    5186:	c0 81       	ld	r28, Z
    5188:	d1 81       	ldd	r29, Z+1	; 0x01
    518a:	c2 0f       	add	r28, r18
    518c:	d1 1d       	adc	r29, r1
    518e:	68 83       	st	Y, r22
    5190:	8f 5f       	subi	r24, 0xFF	; 255
    5192:	95 81       	ldd	r25, Z+5	; 0x05
    5194:	89 23       	and	r24, r25
    5196:	83 83       	std	Z+3, r24	; 0x03
    5198:	16 96       	adiw	r26, 0x06	; 6
    519a:	ed 91       	ld	r30, X+
    519c:	fc 91       	ld	r31, X
    519e:	17 97       	sbiw	r26, 0x07	; 7
    51a0:	30 97       	sbiw	r30, 0x00	; 0
    51a2:	11 f0       	breq	.+4      	; 0x51a8 <__vector_36+0x7a>
    51a4:	cd 01       	movw	r24, r26
    51a6:	19 95       	eicall
    51a8:	ff 91       	pop	r31
    51aa:	ef 91       	pop	r30
    51ac:	df 91       	pop	r29
    51ae:	cf 91       	pop	r28
    51b0:	bf 91       	pop	r27
    51b2:	af 91       	pop	r26
    51b4:	9f 91       	pop	r25
    51b6:	8f 91       	pop	r24
    51b8:	7f 91       	pop	r23
    51ba:	6f 91       	pop	r22
    51bc:	5f 91       	pop	r21
    51be:	4f 91       	pop	r20
    51c0:	3f 91       	pop	r19
    51c2:	2f 91       	pop	r18
    51c4:	0f 90       	pop	r0
    51c6:	0b be       	out	0x3b, r0	; 59
    51c8:	0f 90       	pop	r0
    51ca:	0f be       	out	0x3f, r0	; 63
    51cc:	0f 90       	pop	r0
    51ce:	1f 90       	pop	r1
    51d0:	18 95       	reti

000051d2 <__vector_37>:
    51d2:	1f 92       	push	r1
    51d4:	0f 92       	push	r0
    51d6:	0f b6       	in	r0, 0x3f	; 63
    51d8:	0f 92       	push	r0
    51da:	11 24       	eor	r1, r1
    51dc:	0b b6       	in	r0, 0x3b	; 59
    51de:	0f 92       	push	r0
    51e0:	2f 93       	push	r18
    51e2:	8f 93       	push	r24
    51e4:	9f 93       	push	r25
    51e6:	af 93       	push	r26
    51e8:	bf 93       	push	r27
    51ea:	ef 93       	push	r30
    51ec:	ff 93       	push	r31
    51ee:	e0 91 15 19 	lds	r30, 0x1915	; 0x801915 <_ser_handle+0x2>
    51f2:	f0 91 16 19 	lds	r31, 0x1916	; 0x801916 <_ser_handle+0x3>
    51f6:	30 97       	sbiw	r30, 0x00	; 0
    51f8:	b9 f0       	breq	.+46     	; 0x5228 <__vector_37+0x56>
    51fa:	02 80       	ldd	r0, Z+2	; 0x02
    51fc:	f3 81       	ldd	r31, Z+3	; 0x03
    51fe:	e0 2d       	mov	r30, r0
    5200:	93 81       	ldd	r25, Z+3	; 0x03
    5202:	82 81       	ldd	r24, Z+2	; 0x02
    5204:	98 17       	cp	r25, r24
    5206:	b1 f0       	breq	.+44     	; 0x5234 <__vector_37+0x62>
    5208:	92 81       	ldd	r25, Z+2	; 0x02
    520a:	85 81       	ldd	r24, Z+5	; 0x05
    520c:	28 2f       	mov	r18, r24
    520e:	26 95       	lsr	r18
    5210:	29 23       	and	r18, r25
    5212:	a0 81       	ld	r26, Z
    5214:	b1 81       	ldd	r27, Z+1	; 0x01
    5216:	a2 0f       	add	r26, r18
    5218:	b1 1d       	adc	r27, r1
    521a:	2c 91       	ld	r18, X
    521c:	9f 5f       	subi	r25, 0xFF	; 255
    521e:	89 23       	and	r24, r25
    5220:	82 83       	std	Z+2, r24	; 0x02
    5222:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5226:	0b c0       	rjmp	.+22     	; 0x523e <__vector_37+0x6c>
    5228:	e9 ec       	ldi	r30, 0xC9	; 201
    522a:	f0 e0       	ldi	r31, 0x00	; 0
    522c:	80 81       	ld	r24, Z
    522e:	8f 7d       	andi	r24, 0xDF	; 223
    5230:	80 83       	st	Z, r24
    5232:	05 c0       	rjmp	.+10     	; 0x523e <__vector_37+0x6c>
    5234:	e9 ec       	ldi	r30, 0xC9	; 201
    5236:	f0 e0       	ldi	r31, 0x00	; 0
    5238:	80 81       	ld	r24, Z
    523a:	8f 7d       	andi	r24, 0xDF	; 223
    523c:	80 83       	st	Z, r24
    523e:	ff 91       	pop	r31
    5240:	ef 91       	pop	r30
    5242:	bf 91       	pop	r27
    5244:	af 91       	pop	r26
    5246:	9f 91       	pop	r25
    5248:	8f 91       	pop	r24
    524a:	2f 91       	pop	r18
    524c:	0f 90       	pop	r0
    524e:	0b be       	out	0x3b, r0	; 59
    5250:	0f 90       	pop	r0
    5252:	0f be       	out	0x3f, r0	; 63
    5254:	0f 90       	pop	r0
    5256:	1f 90       	pop	r1
    5258:	18 95       	reti

0000525a <__vector_51>:
    525a:	1f 92       	push	r1
    525c:	0f 92       	push	r0
    525e:	0f b6       	in	r0, 0x3f	; 63
    5260:	0f 92       	push	r0
    5262:	11 24       	eor	r1, r1
    5264:	0b b6       	in	r0, 0x3b	; 59
    5266:	0f 92       	push	r0
    5268:	2f 93       	push	r18
    526a:	3f 93       	push	r19
    526c:	4f 93       	push	r20
    526e:	5f 93       	push	r21
    5270:	6f 93       	push	r22
    5272:	7f 93       	push	r23
    5274:	8f 93       	push	r24
    5276:	9f 93       	push	r25
    5278:	af 93       	push	r26
    527a:	bf 93       	push	r27
    527c:	cf 93       	push	r28
    527e:	df 93       	push	r29
    5280:	ef 93       	push	r30
    5282:	ff 93       	push	r31
    5284:	a0 91 17 19 	lds	r26, 0x1917	; 0x801917 <_ser_handle+0x4>
    5288:	b0 91 18 19 	lds	r27, 0x1918	; 0x801918 <_ser_handle+0x5>
    528c:	10 97       	sbiw	r26, 0x00	; 0
    528e:	11 f1       	breq	.+68     	; 0x52d4 <__vector_51+0x7a>
    5290:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5294:	14 96       	adiw	r26, 0x04	; 4
    5296:	ed 91       	ld	r30, X+
    5298:	fc 91       	ld	r31, X
    529a:	15 97       	sbiw	r26, 0x05	; 5
    529c:	93 81       	ldd	r25, Z+3	; 0x03
    529e:	82 81       	ldd	r24, Z+2	; 0x02
    52a0:	25 81       	ldd	r18, Z+5	; 0x05
    52a2:	98 1b       	sub	r25, r24
    52a4:	92 23       	and	r25, r18
    52a6:	84 81       	ldd	r24, Z+4	; 0x04
    52a8:	98 17       	cp	r25, r24
    52aa:	61 f0       	breq	.+24     	; 0x52c4 <__vector_51+0x6a>
    52ac:	83 81       	ldd	r24, Z+3	; 0x03
    52ae:	26 95       	lsr	r18
    52b0:	28 23       	and	r18, r24
    52b2:	c0 81       	ld	r28, Z
    52b4:	d1 81       	ldd	r29, Z+1	; 0x01
    52b6:	c2 0f       	add	r28, r18
    52b8:	d1 1d       	adc	r29, r1
    52ba:	68 83       	st	Y, r22
    52bc:	8f 5f       	subi	r24, 0xFF	; 255
    52be:	95 81       	ldd	r25, Z+5	; 0x05
    52c0:	89 23       	and	r24, r25
    52c2:	83 83       	std	Z+3, r24	; 0x03
    52c4:	16 96       	adiw	r26, 0x06	; 6
    52c6:	ed 91       	ld	r30, X+
    52c8:	fc 91       	ld	r31, X
    52ca:	17 97       	sbiw	r26, 0x07	; 7
    52cc:	30 97       	sbiw	r30, 0x00	; 0
    52ce:	11 f0       	breq	.+4      	; 0x52d4 <__vector_51+0x7a>
    52d0:	cd 01       	movw	r24, r26
    52d2:	19 95       	eicall
    52d4:	ff 91       	pop	r31
    52d6:	ef 91       	pop	r30
    52d8:	df 91       	pop	r29
    52da:	cf 91       	pop	r28
    52dc:	bf 91       	pop	r27
    52de:	af 91       	pop	r26
    52e0:	9f 91       	pop	r25
    52e2:	8f 91       	pop	r24
    52e4:	7f 91       	pop	r23
    52e6:	6f 91       	pop	r22
    52e8:	5f 91       	pop	r21
    52ea:	4f 91       	pop	r20
    52ec:	3f 91       	pop	r19
    52ee:	2f 91       	pop	r18
    52f0:	0f 90       	pop	r0
    52f2:	0b be       	out	0x3b, r0	; 59
    52f4:	0f 90       	pop	r0
    52f6:	0f be       	out	0x3f, r0	; 63
    52f8:	0f 90       	pop	r0
    52fa:	1f 90       	pop	r1
    52fc:	18 95       	reti

000052fe <__vector_52>:
    52fe:	1f 92       	push	r1
    5300:	0f 92       	push	r0
    5302:	0f b6       	in	r0, 0x3f	; 63
    5304:	0f 92       	push	r0
    5306:	11 24       	eor	r1, r1
    5308:	0b b6       	in	r0, 0x3b	; 59
    530a:	0f 92       	push	r0
    530c:	2f 93       	push	r18
    530e:	8f 93       	push	r24
    5310:	9f 93       	push	r25
    5312:	af 93       	push	r26
    5314:	bf 93       	push	r27
    5316:	ef 93       	push	r30
    5318:	ff 93       	push	r31
    531a:	e0 91 17 19 	lds	r30, 0x1917	; 0x801917 <_ser_handle+0x4>
    531e:	f0 91 18 19 	lds	r31, 0x1918	; 0x801918 <_ser_handle+0x5>
    5322:	30 97       	sbiw	r30, 0x00	; 0
    5324:	b9 f0       	breq	.+46     	; 0x5354 <__vector_52+0x56>
    5326:	02 80       	ldd	r0, Z+2	; 0x02
    5328:	f3 81       	ldd	r31, Z+3	; 0x03
    532a:	e0 2d       	mov	r30, r0
    532c:	93 81       	ldd	r25, Z+3	; 0x03
    532e:	82 81       	ldd	r24, Z+2	; 0x02
    5330:	98 17       	cp	r25, r24
    5332:	b1 f0       	breq	.+44     	; 0x5360 <__vector_52+0x62>
    5334:	92 81       	ldd	r25, Z+2	; 0x02
    5336:	85 81       	ldd	r24, Z+5	; 0x05
    5338:	28 2f       	mov	r18, r24
    533a:	26 95       	lsr	r18
    533c:	29 23       	and	r18, r25
    533e:	a0 81       	ld	r26, Z
    5340:	b1 81       	ldd	r27, Z+1	; 0x01
    5342:	a2 0f       	add	r26, r18
    5344:	b1 1d       	adc	r27, r1
    5346:	2c 91       	ld	r18, X
    5348:	9f 5f       	subi	r25, 0xFF	; 255
    534a:	89 23       	and	r24, r25
    534c:	82 83       	std	Z+2, r24	; 0x02
    534e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5352:	0b c0       	rjmp	.+22     	; 0x536a <__vector_52+0x6c>
    5354:	e1 ed       	ldi	r30, 0xD1	; 209
    5356:	f0 e0       	ldi	r31, 0x00	; 0
    5358:	80 81       	ld	r24, Z
    535a:	8f 7d       	andi	r24, 0xDF	; 223
    535c:	80 83       	st	Z, r24
    535e:	05 c0       	rjmp	.+10     	; 0x536a <__vector_52+0x6c>
    5360:	e1 ed       	ldi	r30, 0xD1	; 209
    5362:	f0 e0       	ldi	r31, 0x00	; 0
    5364:	80 81       	ld	r24, Z
    5366:	8f 7d       	andi	r24, 0xDF	; 223
    5368:	80 83       	st	Z, r24
    536a:	ff 91       	pop	r31
    536c:	ef 91       	pop	r30
    536e:	bf 91       	pop	r27
    5370:	af 91       	pop	r26
    5372:	9f 91       	pop	r25
    5374:	8f 91       	pop	r24
    5376:	2f 91       	pop	r18
    5378:	0f 90       	pop	r0
    537a:	0b be       	out	0x3b, r0	; 59
    537c:	0f 90       	pop	r0
    537e:	0f be       	out	0x3f, r0	; 63
    5380:	0f 90       	pop	r0
    5382:	1f 90       	pop	r1
    5384:	18 95       	reti

00005386 <__vector_54>:
    5386:	1f 92       	push	r1
    5388:	0f 92       	push	r0
    538a:	0f b6       	in	r0, 0x3f	; 63
    538c:	0f 92       	push	r0
    538e:	11 24       	eor	r1, r1
    5390:	0b b6       	in	r0, 0x3b	; 59
    5392:	0f 92       	push	r0
    5394:	2f 93       	push	r18
    5396:	3f 93       	push	r19
    5398:	4f 93       	push	r20
    539a:	5f 93       	push	r21
    539c:	6f 93       	push	r22
    539e:	7f 93       	push	r23
    53a0:	8f 93       	push	r24
    53a2:	9f 93       	push	r25
    53a4:	af 93       	push	r26
    53a6:	bf 93       	push	r27
    53a8:	cf 93       	push	r28
    53aa:	df 93       	push	r29
    53ac:	ef 93       	push	r30
    53ae:	ff 93       	push	r31
    53b0:	a0 91 19 19 	lds	r26, 0x1919	; 0x801919 <_ser_handle+0x6>
    53b4:	b0 91 1a 19 	lds	r27, 0x191A	; 0x80191a <_ser_handle+0x7>
    53b8:	10 97       	sbiw	r26, 0x00	; 0
    53ba:	11 f1       	breq	.+68     	; 0x5400 <__vector_54+0x7a>
    53bc:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    53c0:	14 96       	adiw	r26, 0x04	; 4
    53c2:	ed 91       	ld	r30, X+
    53c4:	fc 91       	ld	r31, X
    53c6:	15 97       	sbiw	r26, 0x05	; 5
    53c8:	93 81       	ldd	r25, Z+3	; 0x03
    53ca:	82 81       	ldd	r24, Z+2	; 0x02
    53cc:	25 81       	ldd	r18, Z+5	; 0x05
    53ce:	98 1b       	sub	r25, r24
    53d0:	92 23       	and	r25, r18
    53d2:	84 81       	ldd	r24, Z+4	; 0x04
    53d4:	98 17       	cp	r25, r24
    53d6:	61 f0       	breq	.+24     	; 0x53f0 <__vector_54+0x6a>
    53d8:	83 81       	ldd	r24, Z+3	; 0x03
    53da:	26 95       	lsr	r18
    53dc:	28 23       	and	r18, r24
    53de:	c0 81       	ld	r28, Z
    53e0:	d1 81       	ldd	r29, Z+1	; 0x01
    53e2:	c2 0f       	add	r28, r18
    53e4:	d1 1d       	adc	r29, r1
    53e6:	68 83       	st	Y, r22
    53e8:	8f 5f       	subi	r24, 0xFF	; 255
    53ea:	95 81       	ldd	r25, Z+5	; 0x05
    53ec:	89 23       	and	r24, r25
    53ee:	83 83       	std	Z+3, r24	; 0x03
    53f0:	16 96       	adiw	r26, 0x06	; 6
    53f2:	ed 91       	ld	r30, X+
    53f4:	fc 91       	ld	r31, X
    53f6:	17 97       	sbiw	r26, 0x07	; 7
    53f8:	30 97       	sbiw	r30, 0x00	; 0
    53fa:	11 f0       	breq	.+4      	; 0x5400 <__vector_54+0x7a>
    53fc:	cd 01       	movw	r24, r26
    53fe:	19 95       	eicall
    5400:	ff 91       	pop	r31
    5402:	ef 91       	pop	r30
    5404:	df 91       	pop	r29
    5406:	cf 91       	pop	r28
    5408:	bf 91       	pop	r27
    540a:	af 91       	pop	r26
    540c:	9f 91       	pop	r25
    540e:	8f 91       	pop	r24
    5410:	7f 91       	pop	r23
    5412:	6f 91       	pop	r22
    5414:	5f 91       	pop	r21
    5416:	4f 91       	pop	r20
    5418:	3f 91       	pop	r19
    541a:	2f 91       	pop	r18
    541c:	0f 90       	pop	r0
    541e:	0b be       	out	0x3b, r0	; 59
    5420:	0f 90       	pop	r0
    5422:	0f be       	out	0x3f, r0	; 63
    5424:	0f 90       	pop	r0
    5426:	1f 90       	pop	r1
    5428:	18 95       	reti

0000542a <__vector_55>:
    542a:	1f 92       	push	r1
    542c:	0f 92       	push	r0
    542e:	0f b6       	in	r0, 0x3f	; 63
    5430:	0f 92       	push	r0
    5432:	11 24       	eor	r1, r1
    5434:	0b b6       	in	r0, 0x3b	; 59
    5436:	0f 92       	push	r0
    5438:	2f 93       	push	r18
    543a:	8f 93       	push	r24
    543c:	9f 93       	push	r25
    543e:	af 93       	push	r26
    5440:	bf 93       	push	r27
    5442:	ef 93       	push	r30
    5444:	ff 93       	push	r31
    5446:	e0 91 19 19 	lds	r30, 0x1919	; 0x801919 <_ser_handle+0x6>
    544a:	f0 91 1a 19 	lds	r31, 0x191A	; 0x80191a <_ser_handle+0x7>
    544e:	30 97       	sbiw	r30, 0x00	; 0
    5450:	b9 f0       	breq	.+46     	; 0x5480 <__vector_55+0x56>
    5452:	02 80       	ldd	r0, Z+2	; 0x02
    5454:	f3 81       	ldd	r31, Z+3	; 0x03
    5456:	e0 2d       	mov	r30, r0
    5458:	93 81       	ldd	r25, Z+3	; 0x03
    545a:	82 81       	ldd	r24, Z+2	; 0x02
    545c:	98 17       	cp	r25, r24
    545e:	b1 f0       	breq	.+44     	; 0x548c <__vector_55+0x62>
    5460:	92 81       	ldd	r25, Z+2	; 0x02
    5462:	85 81       	ldd	r24, Z+5	; 0x05
    5464:	28 2f       	mov	r18, r24
    5466:	26 95       	lsr	r18
    5468:	29 23       	and	r18, r25
    546a:	a0 81       	ld	r26, Z
    546c:	b1 81       	ldd	r27, Z+1	; 0x01
    546e:	a2 0f       	add	r26, r18
    5470:	b1 1d       	adc	r27, r1
    5472:	2c 91       	ld	r18, X
    5474:	9f 5f       	subi	r25, 0xFF	; 255
    5476:	89 23       	and	r24, r25
    5478:	82 83       	std	Z+2, r24	; 0x02
    547a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    547e:	0b c0       	rjmp	.+22     	; 0x5496 <__vector_55+0x6c>
    5480:	e1 e3       	ldi	r30, 0x31	; 49
    5482:	f1 e0       	ldi	r31, 0x01	; 1
    5484:	80 81       	ld	r24, Z
    5486:	8f 7d       	andi	r24, 0xDF	; 223
    5488:	80 83       	st	Z, r24
    548a:	05 c0       	rjmp	.+10     	; 0x5496 <__vector_55+0x6c>
    548c:	e1 e3       	ldi	r30, 0x31	; 49
    548e:	f1 e0       	ldi	r31, 0x01	; 1
    5490:	80 81       	ld	r24, Z
    5492:	8f 7d       	andi	r24, 0xDF	; 223
    5494:	80 83       	st	Z, r24
    5496:	ff 91       	pop	r31
    5498:	ef 91       	pop	r30
    549a:	bf 91       	pop	r27
    549c:	af 91       	pop	r26
    549e:	9f 91       	pop	r25
    54a0:	8f 91       	pop	r24
    54a2:	2f 91       	pop	r18
    54a4:	0f 90       	pop	r0
    54a6:	0b be       	out	0x3b, r0	; 59
    54a8:	0f 90       	pop	r0
    54aa:	0f be       	out	0x3f, r0	; 63
    54ac:	0f 90       	pop	r0
    54ae:	1f 90       	pop	r1
    54b0:	18 95       	reti

000054b2 <usart_getchar>:
    54b2:	cf 93       	push	r28
    54b4:	df 93       	push	r29
    54b6:	1f 92       	push	r1
    54b8:	cd b7       	in	r28, 0x3d	; 61
    54ba:	de b7       	in	r29, 0x3e	; 62
    54bc:	be 01       	movw	r22, r28
    54be:	6f 5f       	subi	r22, 0xFF	; 255
    54c0:	7f 4f       	sbci	r23, 0xFF	; 255
    54c2:	80 91 1b 19 	lds	r24, 0x191B	; 0x80191b <_com_serial_instance>
    54c6:	90 91 1c 19 	lds	r25, 0x191C	; 0x80191c <_com_serial_instance+0x1>
    54ca:	7b dd       	rcall	.-1290   	; 0x4fc2 <serial_getByte>
    54cc:	81 11       	cpse	r24, r1
    54ce:	f6 cf       	rjmp	.-20     	; 0x54bc <usart_getchar+0xa>
    54d0:	89 81       	ldd	r24, Y+1	; 0x01
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	0f 90       	pop	r0
    54d6:	df 91       	pop	r29
    54d8:	cf 91       	pop	r28
    54da:	08 95       	ret

000054dc <usart_putchar>:
    54dc:	68 2f       	mov	r22, r24
    54de:	80 91 1b 19 	lds	r24, 0x191B	; 0x80191b <_com_serial_instance>
    54e2:	90 91 1c 19 	lds	r25, 0x191C	; 0x80191c <_com_serial_instance+0x1>
    54e6:	ed dc       	rcall	.-1574   	; 0x4ec2 <serial_sendByte>
    54e8:	80 e0       	ldi	r24, 0x00	; 0
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	08 95       	ret

000054ee <stdio_initialise>:
    54ee:	8f 92       	push	r8
    54f0:	9f 92       	push	r9
    54f2:	af 92       	push	r10
    54f4:	cf 92       	push	r12
    54f6:	ef 92       	push	r14
    54f8:	0f 93       	push	r16
    54fa:	81 2c       	mov	r8, r1
    54fc:	91 2c       	mov	r9, r1
    54fe:	68 94       	set
    5500:	aa 24       	eor	r10, r10
    5502:	a7 f8       	bld	r10, 7
    5504:	68 94       	set
    5506:	cc 24       	eor	r12, r12
    5508:	c7 f8       	bld	r12, 7
    550a:	e1 2c       	mov	r14, r1
    550c:	00 e0       	ldi	r16, 0x00	; 0
    550e:	23 e0       	ldi	r18, 0x03	; 3
    5510:	40 e0       	ldi	r20, 0x00	; 0
    5512:	51 ee       	ldi	r21, 0xE1	; 225
    5514:	60 e0       	ldi	r22, 0x00	; 0
    5516:	70 e0       	ldi	r23, 0x00	; 0
    5518:	2e dc       	rcall	.-1956   	; 0x4d76 <serial_create>
    551a:	90 93 1c 19 	sts	0x191C, r25	; 0x80191c <_com_serial_instance+0x1>
    551e:	80 93 1b 19 	sts	0x191B, r24	; 0x80191b <_com_serial_instance>
    5522:	e3 e5       	ldi	r30, 0x53	; 83
    5524:	f9 e1       	ldi	r31, 0x19	; 25
    5526:	85 e1       	ldi	r24, 0x15	; 21
    5528:	92 e0       	ldi	r25, 0x02	; 2
    552a:	91 83       	std	Z+1, r25	; 0x01
    552c:	80 83       	st	Z, r24
    552e:	93 83       	std	Z+3, r25	; 0x03
    5530:	82 83       	std	Z+2, r24	; 0x02
    5532:	0f 91       	pop	r16
    5534:	ef 90       	pop	r14
    5536:	cf 90       	pop	r12
    5538:	af 90       	pop	r10
    553a:	9f 90       	pop	r9
    553c:	8f 90       	pop	r8
    553e:	08 95       	ret

00005540 <_turn_off>:
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	fc 01       	movw	r30, r24
    5544:	ee 0f       	add	r30, r30
    5546:	ff 1f       	adc	r31, r31
    5548:	e8 0f       	add	r30, r24
    554a:	f9 1f       	adc	r31, r25
    554c:	ee 0f       	add	r30, r30
    554e:	ff 1f       	adc	r31, r31
    5550:	e3 5e       	subi	r30, 0xE3	; 227
    5552:	f6 4e       	sbci	r31, 0xE6	; 230
    5554:	23 81       	ldd	r18, Z+3	; 0x03
    5556:	21 11       	cpse	r18, r1
    5558:	1f c0       	rjmp	.+62     	; 0x5598 <_turn_off+0x58>
    555a:	9c 01       	movw	r18, r24
    555c:	22 0f       	add	r18, r18
    555e:	33 1f       	adc	r19, r19
    5560:	f9 01       	movw	r30, r18
    5562:	e8 0f       	add	r30, r24
    5564:	f9 1f       	adc	r31, r25
    5566:	ee 0f       	add	r30, r30
    5568:	ff 1f       	adc	r31, r31
    556a:	e3 5e       	subi	r30, 0xE3	; 227
    556c:	f6 4e       	sbci	r31, 0xE6	; 230
    556e:	a0 81       	ld	r26, Z
    5570:	b1 81       	ldd	r27, Z+1	; 0x01
    5572:	4c 91       	ld	r20, X
    5574:	f9 01       	movw	r30, r18
    5576:	e8 0f       	add	r30, r24
    5578:	f9 1f       	adc	r31, r25
    557a:	ee 0f       	add	r30, r30
    557c:	ff 1f       	adc	r31, r31
    557e:	e3 5e       	subi	r30, 0xE3	; 227
    5580:	f6 4e       	sbci	r31, 0xE6	; 230
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	90 e0       	ldi	r25, 0x00	; 0
    5586:	02 80       	ldd	r0, Z+2	; 0x02
    5588:	02 c0       	rjmp	.+4      	; 0x558e <_turn_off+0x4e>
    558a:	88 0f       	add	r24, r24
    558c:	99 1f       	adc	r25, r25
    558e:	0a 94       	dec	r0
    5590:	e2 f7       	brpl	.-8      	; 0x558a <_turn_off+0x4a>
    5592:	84 2b       	or	r24, r20
    5594:	8c 93       	st	X, r24
    5596:	08 95       	ret
    5598:	fc 01       	movw	r30, r24
    559a:	ee 0f       	add	r30, r30
    559c:	ff 1f       	adc	r31, r31
    559e:	df 01       	movw	r26, r30
    55a0:	a8 0f       	add	r26, r24
    55a2:	b9 1f       	adc	r27, r25
    55a4:	aa 0f       	add	r26, r26
    55a6:	bb 1f       	adc	r27, r27
    55a8:	a3 5e       	subi	r26, 0xE3	; 227
    55aa:	b6 4e       	sbci	r27, 0xE6	; 230
    55ac:	0d 90       	ld	r0, X+
    55ae:	bc 91       	ld	r27, X
    55b0:	a0 2d       	mov	r26, r0
    55b2:	2c 91       	ld	r18, X
    55b4:	e8 0f       	add	r30, r24
    55b6:	f9 1f       	adc	r31, r25
    55b8:	ee 0f       	add	r30, r30
    55ba:	ff 1f       	adc	r31, r31
    55bc:	e3 5e       	subi	r30, 0xE3	; 227
    55be:	f6 4e       	sbci	r31, 0xE6	; 230
    55c0:	81 e0       	ldi	r24, 0x01	; 1
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	02 80       	ldd	r0, Z+2	; 0x02
    55c6:	02 c0       	rjmp	.+4      	; 0x55cc <_turn_off+0x8c>
    55c8:	88 0f       	add	r24, r24
    55ca:	99 1f       	adc	r25, r25
    55cc:	0a 94       	dec	r0
    55ce:	e2 f7       	brpl	.-8      	; 0x55c8 <_turn_off+0x88>
    55d0:	80 95       	com	r24
    55d2:	82 23       	and	r24, r18
    55d4:	8c 93       	st	X, r24
    55d6:	08 95       	ret

000055d8 <_turn_on>:
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	fc 01       	movw	r30, r24
    55dc:	ee 0f       	add	r30, r30
    55de:	ff 1f       	adc	r31, r31
    55e0:	e8 0f       	add	r30, r24
    55e2:	f9 1f       	adc	r31, r25
    55e4:	ee 0f       	add	r30, r30
    55e6:	ff 1f       	adc	r31, r31
    55e8:	e3 5e       	subi	r30, 0xE3	; 227
    55ea:	f6 4e       	sbci	r31, 0xE6	; 230
    55ec:	23 81       	ldd	r18, Z+3	; 0x03
    55ee:	21 11       	cpse	r18, r1
    55f0:	20 c0       	rjmp	.+64     	; 0x5632 <_turn_on+0x5a>
    55f2:	9c 01       	movw	r18, r24
    55f4:	22 0f       	add	r18, r18
    55f6:	33 1f       	adc	r19, r19
    55f8:	f9 01       	movw	r30, r18
    55fa:	e8 0f       	add	r30, r24
    55fc:	f9 1f       	adc	r31, r25
    55fe:	ee 0f       	add	r30, r30
    5600:	ff 1f       	adc	r31, r31
    5602:	e3 5e       	subi	r30, 0xE3	; 227
    5604:	f6 4e       	sbci	r31, 0xE6	; 230
    5606:	a0 81       	ld	r26, Z
    5608:	b1 81       	ldd	r27, Z+1	; 0x01
    560a:	4c 91       	ld	r20, X
    560c:	f9 01       	movw	r30, r18
    560e:	e8 0f       	add	r30, r24
    5610:	f9 1f       	adc	r31, r25
    5612:	ee 0f       	add	r30, r30
    5614:	ff 1f       	adc	r31, r31
    5616:	e3 5e       	subi	r30, 0xE3	; 227
    5618:	f6 4e       	sbci	r31, 0xE6	; 230
    561a:	81 e0       	ldi	r24, 0x01	; 1
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	02 80       	ldd	r0, Z+2	; 0x02
    5620:	02 c0       	rjmp	.+4      	; 0x5626 <_turn_on+0x4e>
    5622:	88 0f       	add	r24, r24
    5624:	99 1f       	adc	r25, r25
    5626:	0a 94       	dec	r0
    5628:	e2 f7       	brpl	.-8      	; 0x5622 <_turn_on+0x4a>
    562a:	80 95       	com	r24
    562c:	84 23       	and	r24, r20
    562e:	8c 93       	st	X, r24
    5630:	08 95       	ret
    5632:	fc 01       	movw	r30, r24
    5634:	ee 0f       	add	r30, r30
    5636:	ff 1f       	adc	r31, r31
    5638:	df 01       	movw	r26, r30
    563a:	a8 0f       	add	r26, r24
    563c:	b9 1f       	adc	r27, r25
    563e:	aa 0f       	add	r26, r26
    5640:	bb 1f       	adc	r27, r27
    5642:	a3 5e       	subi	r26, 0xE3	; 227
    5644:	b6 4e       	sbci	r27, 0xE6	; 230
    5646:	0d 90       	ld	r0, X+
    5648:	bc 91       	ld	r27, X
    564a:	a0 2d       	mov	r26, r0
    564c:	2c 91       	ld	r18, X
    564e:	e8 0f       	add	r30, r24
    5650:	f9 1f       	adc	r31, r25
    5652:	ee 0f       	add	r30, r30
    5654:	ff 1f       	adc	r31, r31
    5656:	e3 5e       	subi	r30, 0xE3	; 227
    5658:	f6 4e       	sbci	r31, 0xE6	; 230
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	02 80       	ldd	r0, Z+2	; 0x02
    5660:	02 c0       	rjmp	.+4      	; 0x5666 <_turn_on+0x8e>
    5662:	88 0f       	add	r24, r24
    5664:	99 1f       	adc	r25, r25
    5666:	0a 94       	dec	r0
    5668:	e2 f7       	brpl	.-8      	; 0x5662 <_turn_on+0x8a>
    566a:	82 2b       	or	r24, r18
    566c:	8c 93       	st	X, r24
    566e:	08 95       	ret

00005670 <_hal_led_task>:
    5670:	cc 24       	eor	r12, r12
    5672:	c3 94       	inc	r12
    5674:	d1 2c       	mov	r13, r1
    5676:	68 94       	set
    5678:	bb 24       	eor	r11, r11
    567a:	b2 f8       	bld	r11, 2
    567c:	cd e1       	ldi	r28, 0x1D	; 29
    567e:	d9 e1       	ldi	r29, 0x19	; 25
    5680:	10 e0       	ldi	r17, 0x00	; 0
    5682:	8c 81       	ldd	r24, Y+4	; 0x04
    5684:	81 30       	cpi	r24, 0x01	; 1
    5686:	81 f0       	breq	.+32     	; 0x56a8 <_hal_led_task+0x38>
    5688:	18 f1       	brcs	.+70     	; 0x56d0 <_hal_led_task+0x60>
    568a:	82 30       	cpi	r24, 0x02	; 2
    568c:	61 f5       	brne	.+88     	; 0x56e6 <_hal_led_task+0x76>
    568e:	e8 81       	ld	r30, Y
    5690:	f9 81       	ldd	r31, Y+1	; 0x01
    5692:	20 81       	ld	r18, Z
    5694:	c6 01       	movw	r24, r12
    5696:	0a 80       	ldd	r0, Y+2	; 0x02
    5698:	02 c0       	rjmp	.+4      	; 0x569e <_hal_led_task+0x2e>
    569a:	88 0f       	add	r24, r24
    569c:	99 1f       	adc	r25, r25
    569e:	0a 94       	dec	r0
    56a0:	e2 f7       	brpl	.-8      	; 0x569a <_hal_led_task+0x2a>
    56a2:	82 27       	eor	r24, r18
    56a4:	80 83       	st	Z, r24
    56a6:	1f c0       	rjmp	.+62     	; 0x56e6 <_hal_led_task+0x76>
    56a8:	8d 81       	ldd	r24, Y+5	; 0x05
    56aa:	8f 5f       	subi	r24, 0xFF	; 255
    56ac:	86 30       	cpi	r24, 0x06	; 6
    56ae:	10 f4       	brcc	.+4      	; 0x56b4 <_hal_led_task+0x44>
    56b0:	8d 83       	std	Y+5, r24	; 0x05
    56b2:	19 c0       	rjmp	.+50     	; 0x56e6 <_hal_led_task+0x76>
    56b4:	1d 82       	std	Y+5, r1	; 0x05
    56b6:	e8 81       	ld	r30, Y
    56b8:	f9 81       	ldd	r31, Y+1	; 0x01
    56ba:	20 81       	ld	r18, Z
    56bc:	c6 01       	movw	r24, r12
    56be:	0a 80       	ldd	r0, Y+2	; 0x02
    56c0:	02 c0       	rjmp	.+4      	; 0x56c6 <_hal_led_task+0x56>
    56c2:	88 0f       	add	r24, r24
    56c4:	99 1f       	adc	r25, r25
    56c6:	0a 94       	dec	r0
    56c8:	e2 f7       	brpl	.-8      	; 0x56c2 <_hal_led_task+0x52>
    56ca:	82 27       	eor	r24, r18
    56cc:	80 83       	st	Z, r24
    56ce:	0b c0       	rjmp	.+22     	; 0x56e6 <_hal_led_task+0x76>
    56d0:	0d 81       	ldd	r16, Y+5	; 0x05
    56d2:	00 23       	and	r16, r16
    56d4:	29 f0       	breq	.+10     	; 0x56e0 <_hal_led_task+0x70>
    56d6:	81 2f       	mov	r24, r17
    56d8:	7f df       	rcall	.-258    	; 0x55d8 <_turn_on>
    56da:	01 50       	subi	r16, 0x01	; 1
    56dc:	0d 83       	std	Y+5, r16	; 0x05
    56de:	03 c0       	rjmp	.+6      	; 0x56e6 <_hal_led_task+0x76>
    56e0:	bc 82       	std	Y+4, r11	; 0x04
    56e2:	81 2f       	mov	r24, r17
    56e4:	2d df       	rcall	.-422    	; 0x5540 <_turn_off>
    56e6:	1f 5f       	subi	r17, 0xFF	; 255
    56e8:	26 96       	adiw	r28, 0x06	; 6
    56ea:	14 30       	cpi	r17, 0x04	; 4
    56ec:	51 f6       	brne	.-108    	; 0x5682 <_hal_led_task+0x12>
    56ee:	6c e0       	ldi	r22, 0x0C	; 12
    56f0:	70 e0       	ldi	r23, 0x00	; 0
    56f2:	80 e0       	ldi	r24, 0x00	; 0
    56f4:	90 e0       	ldi	r25, 0x00	; 0
    56f6:	0e 94 4c 13 	call	0x2698	; 0x2698 <vTaskDelay>
    56fa:	c0 cf       	rjmp	.-128    	; 0x567c <_hal_led_task+0xc>

000056fc <status_leds_initialise>:
    56fc:	ef 92       	push	r14
    56fe:	ff 92       	push	r15
    5700:	0f 93       	push	r16
    5702:	1f 93       	push	r17
    5704:	cf 93       	push	r28
    5706:	df 93       	push	r29
    5708:	08 2f       	mov	r16, r24
    570a:	80 e4       	ldi	r24, 0x40	; 64
    570c:	87 b9       	out	0x07, r24	; 7
    570e:	cd e1       	ldi	r28, 0x1D	; 29
    5710:	d9 e1       	ldi	r29, 0x19	; 25
    5712:	0f 2e       	mov	r0, r31
    5714:	f8 e2       	ldi	r31, 0x28	; 40
    5716:	ef 2e       	mov	r14, r31
    5718:	f1 2c       	mov	r15, r1
    571a:	f0 2d       	mov	r31, r0
    571c:	f9 82       	std	Y+1, r15	; 0x01
    571e:	e8 82       	st	Y, r14
    5720:	86 e0       	ldi	r24, 0x06	; 6
    5722:	8a 83       	std	Y+2, r24	; 0x02
    5724:	1b 82       	std	Y+3, r1	; 0x03
    5726:	14 e0       	ldi	r17, 0x04	; 4
    5728:	1c 83       	std	Y+4, r17	; 0x04
    572a:	80 e0       	ldi	r24, 0x00	; 0
    572c:	09 df       	rcall	.-494    	; 0x5540 <_turn_off>
    572e:	80 e8       	ldi	r24, 0x80	; 128
    5730:	87 b9       	out	0x07, r24	; 7
    5732:	ff 82       	std	Y+7, r15	; 0x07
    5734:	ee 82       	std	Y+6, r14	; 0x06
    5736:	87 e0       	ldi	r24, 0x07	; 7
    5738:	88 87       	std	Y+8, r24	; 0x08
    573a:	19 86       	std	Y+9, r1	; 0x09
    573c:	1a 87       	std	Y+10, r17	; 0x0a
    573e:	81 e0       	ldi	r24, 0x01	; 1
    5740:	ff de       	rcall	.-514    	; 0x5540 <_turn_off>
    5742:	80 e2       	ldi	r24, 0x20	; 32
    5744:	83 bb       	out	0x13, r24	; 19
    5746:	84 e3       	ldi	r24, 0x34	; 52
    5748:	90 e0       	ldi	r25, 0x00	; 0
    574a:	9d 87       	std	Y+13, r25	; 0x0d
    574c:	8c 87       	std	Y+12, r24	; 0x0c
    574e:	85 e0       	ldi	r24, 0x05	; 5
    5750:	8e 87       	std	Y+14, r24	; 0x0e
    5752:	1f 86       	std	Y+15, r1	; 0x0f
    5754:	18 8b       	std	Y+16, r17	; 0x10
    5756:	82 e0       	ldi	r24, 0x02	; 2
    5758:	f3 de       	rcall	.-538    	; 0x5540 <_turn_off>
    575a:	80 e1       	ldi	r24, 0x10	; 16
    575c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5760:	82 e0       	ldi	r24, 0x02	; 2
    5762:	91 e0       	ldi	r25, 0x01	; 1
    5764:	9b 8b       	std	Y+19, r25	; 0x13
    5766:	8a 8b       	std	Y+18, r24	; 0x12
    5768:	1c 8b       	std	Y+20, r17	; 0x14
    576a:	1d 8a       	std	Y+21, r1	; 0x15
    576c:	1e 8b       	std	Y+22, r17	; 0x16
    576e:	83 e0       	ldi	r24, 0x03	; 3
    5770:	e7 de       	rcall	.-562    	; 0x5540 <_turn_off>
    5772:	e1 2c       	mov	r14, r1
    5774:	f1 2c       	mov	r15, r1
    5776:	20 e0       	ldi	r18, 0x00	; 0
    5778:	30 e0       	ldi	r19, 0x00	; 0
    577a:	40 ec       	ldi	r20, 0xC0	; 192
    577c:	50 e0       	ldi	r21, 0x00	; 0
    577e:	63 e3       	ldi	r22, 0x33	; 51
    5780:	79 e0       	ldi	r23, 0x09	; 9
    5782:	88 e3       	ldi	r24, 0x38	; 56
    5784:	9b e2       	ldi	r25, 0x2B	; 43
    5786:	0e 94 47 10 	call	0x208e	; 0x208e <xTaskCreate>
    578a:	df 91       	pop	r29
    578c:	cf 91       	pop	r28
    578e:	1f 91       	pop	r17
    5790:	0f 91       	pop	r16
    5792:	ff 90       	pop	r15
    5794:	ef 90       	pop	r14
    5796:	08 95       	ret

00005798 <status_leds_slowBlink>:
    5798:	cf 93       	push	r28
    579a:	df 93       	push	r29
    579c:	90 e0       	ldi	r25, 0x00	; 0
    579e:	fc 01       	movw	r30, r24
    57a0:	ee 0f       	add	r30, r30
    57a2:	ff 1f       	adc	r31, r31
    57a4:	df 01       	movw	r26, r30
    57a6:	a8 0f       	add	r26, r24
    57a8:	b9 1f       	adc	r27, r25
    57aa:	aa 0f       	add	r26, r26
    57ac:	bb 1f       	adc	r27, r27
    57ae:	a3 5e       	subi	r26, 0xE3	; 227
    57b0:	b6 4e       	sbci	r27, 0xE6	; 230
    57b2:	cd 91       	ld	r28, X+
    57b4:	dc 91       	ld	r29, X
    57b6:	11 97       	sbiw	r26, 0x01	; 1
    57b8:	48 81       	ld	r20, Y
    57ba:	21 e0       	ldi	r18, 0x01	; 1
    57bc:	30 e0       	ldi	r19, 0x00	; 0
    57be:	12 96       	adiw	r26, 0x02	; 2
    57c0:	0c 90       	ld	r0, X
    57c2:	12 97       	sbiw	r26, 0x02	; 2
    57c4:	02 c0       	rjmp	.+4      	; 0x57ca <status_leds_slowBlink+0x32>
    57c6:	22 0f       	add	r18, r18
    57c8:	33 1f       	adc	r19, r19
    57ca:	0a 94       	dec	r0
    57cc:	e2 f7       	brpl	.-8      	; 0x57c6 <status_leds_slowBlink+0x2e>
    57ce:	24 27       	eor	r18, r20
    57d0:	28 83       	st	Y, r18
    57d2:	fd 01       	movw	r30, r26
    57d4:	81 e0       	ldi	r24, 0x01	; 1
    57d6:	84 83       	std	Z+4, r24	; 0x04
    57d8:	df 91       	pop	r29
    57da:	cf 91       	pop	r28
    57dc:	08 95       	ret

000057de <status_leds_fastBlink>:
    57de:	cf 93       	push	r28
    57e0:	df 93       	push	r29
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	fc 01       	movw	r30, r24
    57e6:	ee 0f       	add	r30, r30
    57e8:	ff 1f       	adc	r31, r31
    57ea:	df 01       	movw	r26, r30
    57ec:	a8 0f       	add	r26, r24
    57ee:	b9 1f       	adc	r27, r25
    57f0:	aa 0f       	add	r26, r26
    57f2:	bb 1f       	adc	r27, r27
    57f4:	a3 5e       	subi	r26, 0xE3	; 227
    57f6:	b6 4e       	sbci	r27, 0xE6	; 230
    57f8:	cd 91       	ld	r28, X+
    57fa:	dc 91       	ld	r29, X
    57fc:	11 97       	sbiw	r26, 0x01	; 1
    57fe:	48 81       	ld	r20, Y
    5800:	21 e0       	ldi	r18, 0x01	; 1
    5802:	30 e0       	ldi	r19, 0x00	; 0
    5804:	12 96       	adiw	r26, 0x02	; 2
    5806:	0c 90       	ld	r0, X
    5808:	12 97       	sbiw	r26, 0x02	; 2
    580a:	02 c0       	rjmp	.+4      	; 0x5810 <status_leds_fastBlink+0x32>
    580c:	22 0f       	add	r18, r18
    580e:	33 1f       	adc	r19, r19
    5810:	0a 94       	dec	r0
    5812:	e2 f7       	brpl	.-8      	; 0x580c <status_leds_fastBlink+0x2e>
    5814:	24 27       	eor	r18, r20
    5816:	28 83       	st	Y, r18
    5818:	fd 01       	movw	r30, r26
    581a:	82 e0       	ldi	r24, 0x02	; 2
    581c:	84 83       	std	Z+4, r24	; 0x04
    581e:	df 91       	pop	r29
    5820:	cf 91       	pop	r28
    5822:	08 95       	ret

00005824 <status_leds_ledOn>:
    5824:	28 2f       	mov	r18, r24
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	f9 01       	movw	r30, r18
    582a:	ee 0f       	add	r30, r30
    582c:	ff 1f       	adc	r31, r31
    582e:	e2 0f       	add	r30, r18
    5830:	f3 1f       	adc	r31, r19
    5832:	ee 0f       	add	r30, r30
    5834:	ff 1f       	adc	r31, r31
    5836:	e3 5e       	subi	r30, 0xE3	; 227
    5838:	f6 4e       	sbci	r31, 0xE6	; 230
    583a:	93 e0       	ldi	r25, 0x03	; 3
    583c:	94 83       	std	Z+4, r25	; 0x04
    583e:	cc ce       	rjmp	.-616    	; 0x55d8 <_turn_on>
    5840:	08 95       	ret

00005842 <status_leds_ledOff>:
    5842:	28 2f       	mov	r18, r24
    5844:	30 e0       	ldi	r19, 0x00	; 0
    5846:	f9 01       	movw	r30, r18
    5848:	ee 0f       	add	r30, r30
    584a:	ff 1f       	adc	r31, r31
    584c:	e2 0f       	add	r30, r18
    584e:	f3 1f       	adc	r31, r19
    5850:	ee 0f       	add	r30, r30
    5852:	ff 1f       	adc	r31, r31
    5854:	e3 5e       	subi	r30, 0xE3	; 227
    5856:	f6 4e       	sbci	r31, 0xE6	; 230
    5858:	94 e0       	ldi	r25, 0x04	; 4
    585a:	94 83       	std	Z+4, r25	; 0x04
    585c:	71 ce       	rjmp	.-798    	; 0x5540 <_turn_off>
    585e:	08 95       	ret

00005860 <status_leds_longPuls>:
    5860:	90 e0       	ldi	r25, 0x00	; 0
    5862:	fc 01       	movw	r30, r24
    5864:	ee 0f       	add	r30, r30
    5866:	ff 1f       	adc	r31, r31
    5868:	df 01       	movw	r26, r30
    586a:	a8 0f       	add	r26, r24
    586c:	b9 1f       	adc	r27, r25
    586e:	aa 0f       	add	r26, r26
    5870:	bb 1f       	adc	r27, r27
    5872:	a3 5e       	subi	r26, 0xE3	; 227
    5874:	b6 4e       	sbci	r27, 0xE6	; 230
    5876:	26 e0       	ldi	r18, 0x06	; 6
    5878:	15 96       	adiw	r26, 0x05	; 5
    587a:	2c 93       	st	X, r18
    587c:	15 97       	sbiw	r26, 0x05	; 5
    587e:	fd 01       	movw	r30, r26
    5880:	14 82       	std	Z+4, r1	; 0x04
    5882:	08 95       	ret

00005884 <status_leds_shortPuls>:
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	fc 01       	movw	r30, r24
    5888:	ee 0f       	add	r30, r30
    588a:	ff 1f       	adc	r31, r31
    588c:	df 01       	movw	r26, r30
    588e:	a8 0f       	add	r26, r24
    5890:	b9 1f       	adc	r27, r25
    5892:	aa 0f       	add	r26, r26
    5894:	bb 1f       	adc	r27, r27
    5896:	a3 5e       	subi	r26, 0xE3	; 227
    5898:	b6 4e       	sbci	r27, 0xE6	; 230
    589a:	15 96       	adiw	r26, 0x05	; 5
    589c:	1c 92       	st	X, r1
    589e:	15 97       	sbiw	r26, 0x05	; 5
    58a0:	fd 01       	movw	r30, r26
    58a2:	14 82       	std	Z+4, r1	; 0x04
    58a4:	08 95       	ret

000058a6 <_initTwiInterface>:
    58a6:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <_twiIsInitiated>
    58aa:	81 11       	cpse	r24, r1
    58ac:	0c c0       	rjmp	.+24     	; 0x58c6 <_initTwiInterface+0x20>
    58ae:	8c e0       	ldi	r24, 0x0C	; 12
    58b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    58b4:	8f ef       	ldi	r24, 0xFF	; 255
    58b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    58ba:	84 e0       	ldi	r24, 0x04	; 4
    58bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58c0:	81 e0       	ldi	r24, 0x01	; 1
    58c2:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <_twiIsInitiated>
    58c6:	08 95       	ret

000058c8 <twiCreate>:
    58c8:	af 92       	push	r10
    58ca:	bf 92       	push	r11
    58cc:	cf 92       	push	r12
    58ce:	df 92       	push	r13
    58d0:	ef 92       	push	r14
    58d2:	ff 92       	push	r15
    58d4:	0f 93       	push	r16
    58d6:	1f 93       	push	r17
    58d8:	cf 93       	push	r28
    58da:	df 93       	push	r29
    58dc:	a8 2e       	mov	r10, r24
    58de:	b6 2e       	mov	r11, r22
    58e0:	69 01       	movw	r12, r18
    58e2:	7a 01       	movw	r14, r20
    58e4:	84 e0       	ldi	r24, 0x04	; 4
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	61 d7       	rcall	.+3778   	; 0x67ac <malloc>
    58ea:	ec 01       	movw	r28, r24
    58ec:	89 2b       	or	r24, r25
    58ee:	61 f1       	breq	.+88     	; 0x5948 <twiCreate+0x80>
    58f0:	a8 82       	st	Y, r10
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	b8 12       	cpse	r11, r24
    58f6:	12 c0       	rjmp	.+36     	; 0x591c <twiCreate+0x54>
    58f8:	c7 01       	movw	r24, r14
    58fa:	b6 01       	movw	r22, r12
    58fc:	20 ea       	ldi	r18, 0xA0	; 160
    58fe:	36 e8       	ldi	r19, 0x86	; 134
    5900:	41 e0       	ldi	r20, 0x01	; 1
    5902:	50 e0       	ldi	r21, 0x00	; 0
    5904:	15 d7       	rcall	.+3626   	; 0x6730 <__udivmodsi4>
    5906:	da 01       	movw	r26, r20
    5908:	c9 01       	movw	r24, r18
    590a:	40 97       	sbiw	r24, 0x10	; 16
    590c:	a1 09       	sbc	r26, r1
    590e:	b1 09       	sbc	r27, r1
    5910:	b6 95       	lsr	r27
    5912:	a7 95       	ror	r26
    5914:	97 95       	ror	r25
    5916:	87 95       	ror	r24
    5918:	89 83       	std	Y+1, r24	; 0x01
    591a:	11 c0       	rjmp	.+34     	; 0x593e <twiCreate+0x76>
    591c:	c7 01       	movw	r24, r14
    591e:	b6 01       	movw	r22, r12
    5920:	20 e8       	ldi	r18, 0x80	; 128
    5922:	3a e1       	ldi	r19, 0x1A	; 26
    5924:	46 e0       	ldi	r20, 0x06	; 6
    5926:	50 e0       	ldi	r21, 0x00	; 0
    5928:	03 d7       	rcall	.+3590   	; 0x6730 <__udivmodsi4>
    592a:	da 01       	movw	r26, r20
    592c:	c9 01       	movw	r24, r18
    592e:	40 97       	sbiw	r24, 0x10	; 16
    5930:	a1 09       	sbc	r26, r1
    5932:	b1 09       	sbc	r27, r1
    5934:	b6 95       	lsr	r27
    5936:	a7 95       	ror	r26
    5938:	97 95       	ror	r25
    593a:	87 95       	ror	r24
    593c:	89 83       	std	Y+1, r24	; 0x01
    593e:	1b 83       	std	Y+3, r17	; 0x03
    5940:	0a 83       	std	Y+2, r16	; 0x02
    5942:	8c 2f       	mov	r24, r28
    5944:	9d 2f       	mov	r25, r29
    5946:	02 c0       	rjmp	.+4      	; 0x594c <twiCreate+0x84>
    5948:	80 e0       	ldi	r24, 0x00	; 0
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	df 91       	pop	r29
    594e:	cf 91       	pop	r28
    5950:	1f 91       	pop	r17
    5952:	0f 91       	pop	r16
    5954:	ff 90       	pop	r15
    5956:	ef 90       	pop	r14
    5958:	df 90       	pop	r13
    595a:	cf 90       	pop	r12
    595c:	bf 90       	pop	r11
    595e:	af 90       	pop	r10
    5960:	08 95       	ret

00005962 <twiIsBusy>:
    5962:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5966:	81 70       	andi	r24, 0x01	; 1
    5968:	08 95       	ret

0000596a <twiTransmit>:
    596a:	ff 92       	push	r15
    596c:	0f 93       	push	r16
    596e:	1f 93       	push	r17
    5970:	cf 93       	push	r28
    5972:	df 93       	push	r29
    5974:	00 97       	sbiw	r24, 0x00	; 0
    5976:	d1 f1       	breq	.+116    	; 0x59ec <twiTransmit+0x82>
    5978:	4a 30       	cpi	r20, 0x0A	; 10
    597a:	d0 f5       	brcc	.+116    	; 0x59f0 <twiTransmit+0x86>
    597c:	f4 2e       	mov	r15, r20
    597e:	8b 01       	movw	r16, r22
    5980:	ec 01       	movw	r28, r24
    5982:	ef df       	rcall	.-34     	; 0x5962 <twiIsBusy>
    5984:	81 11       	cpse	r24, r1
    5986:	36 c0       	rjmp	.+108    	; 0x59f4 <twiTransmit+0x8a>
    5988:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    598c:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    5990:	c8 17       	cp	r28, r24
    5992:	d9 07       	cpc	r29, r25
    5994:	41 f0       	breq	.+16     	; 0x59a6 <twiTransmit+0x3c>
    5996:	87 df       	rcall	.-242    	; 0x58a6 <_initTwiInterface>
    5998:	89 81       	ldd	r24, Y+1	; 0x01
    599a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    599e:	d0 93 37 19 	sts	0x1937, r29	; 0x801937 <_twiCurrentHandler+0x1>
    59a2:	c0 93 36 19 	sts	0x1936, r28	; 0x801936 <_twiCurrentHandler>
    59a6:	81 e0       	ldi	r24, 0x01	; 1
    59a8:	8f 0d       	add	r24, r15
    59aa:	80 93 38 19 	sts	0x1938, r24	; 0x801938 <_twiMessageLen>
    59ae:	88 81       	ld	r24, Y
    59b0:	88 0f       	add	r24, r24
    59b2:	80 93 39 19 	sts	0x1939, r24	; 0x801939 <_twiMessageBuffer>
    59b6:	ff 20       	and	r15, r15
    59b8:	89 f0       	breq	.+34     	; 0x59dc <twiTransmit+0x72>
    59ba:	f8 01       	movw	r30, r16
    59bc:	aa e3       	ldi	r26, 0x3A	; 58
    59be:	b9 e1       	ldi	r27, 0x19	; 25
    59c0:	4f ef       	ldi	r20, 0xFF	; 255
    59c2:	4f 0d       	add	r20, r15
    59c4:	64 2f       	mov	r22, r20
    59c6:	70 e0       	ldi	r23, 0x00	; 0
    59c8:	cb 01       	movw	r24, r22
    59ca:	01 96       	adiw	r24, 0x01	; 1
    59cc:	b8 01       	movw	r22, r16
    59ce:	68 0f       	add	r22, r24
    59d0:	79 1f       	adc	r23, r25
    59d2:	81 91       	ld	r24, Z+
    59d4:	8d 93       	st	X+, r24
    59d6:	e6 17       	cp	r30, r22
    59d8:	f7 07       	cpc	r31, r23
    59da:	d9 f7       	brne	.-10     	; 0x59d2 <twiTransmit+0x68>
    59dc:	88 ef       	ldi	r24, 0xF8	; 248
    59de:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_twiCurrentState>
    59e2:	85 ea       	ldi	r24, 0xA5	; 165
    59e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59e8:	84 e0       	ldi	r24, 0x04	; 4
    59ea:	05 c0       	rjmp	.+10     	; 0x59f6 <twiTransmit+0x8c>
    59ec:	86 e0       	ldi	r24, 0x06	; 6
    59ee:	03 c0       	rjmp	.+6      	; 0x59f6 <twiTransmit+0x8c>
    59f0:	87 e0       	ldi	r24, 0x07	; 7
    59f2:	01 c0       	rjmp	.+2      	; 0x59f6 <twiTransmit+0x8c>
    59f4:	82 e0       	ldi	r24, 0x02	; 2
    59f6:	df 91       	pop	r29
    59f8:	cf 91       	pop	r28
    59fa:	1f 91       	pop	r17
    59fc:	0f 91       	pop	r16
    59fe:	ff 90       	pop	r15
    5a00:	08 95       	ret

00005a02 <twiReceive>:
    5a02:	1f 93       	push	r17
    5a04:	cf 93       	push	r28
    5a06:	df 93       	push	r29
    5a08:	00 97       	sbiw	r24, 0x00	; 0
    5a0a:	29 f1       	breq	.+74     	; 0x5a56 <twiReceive+0x54>
    5a0c:	6b 30       	cpi	r22, 0x0B	; 11
    5a0e:	28 f5       	brcc	.+74     	; 0x5a5a <twiReceive+0x58>
    5a10:	16 2f       	mov	r17, r22
    5a12:	ec 01       	movw	r28, r24
    5a14:	a6 df       	rcall	.-180    	; 0x5962 <twiIsBusy>
    5a16:	81 11       	cpse	r24, r1
    5a18:	22 c0       	rjmp	.+68     	; 0x5a5e <twiReceive+0x5c>
    5a1a:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    5a1e:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    5a22:	c8 17       	cp	r28, r24
    5a24:	d9 07       	cpc	r29, r25
    5a26:	41 f0       	breq	.+16     	; 0x5a38 <twiReceive+0x36>
    5a28:	3e df       	rcall	.-388    	; 0x58a6 <_initTwiInterface>
    5a2a:	89 81       	ldd	r24, Y+1	; 0x01
    5a2c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5a30:	d0 93 37 19 	sts	0x1937, r29	; 0x801937 <_twiCurrentHandler+0x1>
    5a34:	c0 93 36 19 	sts	0x1936, r28	; 0x801936 <_twiCurrentHandler>
    5a38:	10 93 38 19 	sts	0x1938, r17	; 0x801938 <_twiMessageLen>
    5a3c:	88 81       	ld	r24, Y
    5a3e:	88 0f       	add	r24, r24
    5a40:	81 60       	ori	r24, 0x01	; 1
    5a42:	80 93 39 19 	sts	0x1939, r24	; 0x801939 <_twiMessageBuffer>
    5a46:	88 ef       	ldi	r24, 0xF8	; 248
    5a48:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_twiCurrentState>
    5a4c:	85 ea       	ldi	r24, 0xA5	; 165
    5a4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a52:	85 e0       	ldi	r24, 0x05	; 5
    5a54:	05 c0       	rjmp	.+10     	; 0x5a60 <twiReceive+0x5e>
    5a56:	86 e0       	ldi	r24, 0x06	; 6
    5a58:	03 c0       	rjmp	.+6      	; 0x5a60 <twiReceive+0x5e>
    5a5a:	87 e0       	ldi	r24, 0x07	; 7
    5a5c:	01 c0       	rjmp	.+2      	; 0x5a60 <twiReceive+0x5e>
    5a5e:	82 e0       	ldi	r24, 0x02	; 2
    5a60:	df 91       	pop	r29
    5a62:	cf 91       	pop	r28
    5a64:	1f 91       	pop	r17
    5a66:	08 95       	ret

00005a68 <__vector_39>:
    5a68:	1f 92       	push	r1
    5a6a:	0f 92       	push	r0
    5a6c:	0f b6       	in	r0, 0x3f	; 63
    5a6e:	0f 92       	push	r0
    5a70:	11 24       	eor	r1, r1
    5a72:	0b b6       	in	r0, 0x3b	; 59
    5a74:	0f 92       	push	r0
    5a76:	2f 93       	push	r18
    5a78:	3f 93       	push	r19
    5a7a:	4f 93       	push	r20
    5a7c:	5f 93       	push	r21
    5a7e:	6f 93       	push	r22
    5a80:	7f 93       	push	r23
    5a82:	8f 93       	push	r24
    5a84:	9f 93       	push	r25
    5a86:	af 93       	push	r26
    5a88:	bf 93       	push	r27
    5a8a:	ef 93       	push	r30
    5a8c:	ff 93       	push	r31
    5a8e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a92:	8e 2f       	mov	r24, r30
    5a94:	90 e0       	ldi	r25, 0x00	; 0
    5a96:	fc 01       	movw	r30, r24
    5a98:	38 97       	sbiw	r30, 0x08	; 8
    5a9a:	e1 35       	cpi	r30, 0x51	; 81
    5a9c:	f1 05       	cpc	r31, r1
    5a9e:	08 f0       	brcs	.+2      	; 0x5aa2 <__vector_39+0x3a>
    5aa0:	75 c0       	rjmp	.+234    	; 0x5b8c <__vector_39+0x124>
    5aa2:	88 27       	eor	r24, r24
    5aa4:	e4 58       	subi	r30, 0x84	; 132
    5aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    5aaa:	64 c6       	rjmp	.+3272   	; 0x6774 <__tablejump2__>
    5aac:	10 92 35 19 	sts	0x1935, r1	; 0x801935 <_index.1885>
    5ab0:	e0 91 35 19 	lds	r30, 0x1935	; 0x801935 <_index.1885>
    5ab4:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <_twiMessageLen>
    5ab8:	e8 17       	cp	r30, r24
    5aba:	70 f4       	brcc	.+28     	; 0x5ad8 <__vector_39+0x70>
    5abc:	81 e0       	ldi	r24, 0x01	; 1
    5abe:	8e 0f       	add	r24, r30
    5ac0:	80 93 35 19 	sts	0x1935, r24	; 0x801935 <_index.1885>
    5ac4:	f0 e0       	ldi	r31, 0x00	; 0
    5ac6:	e7 5c       	subi	r30, 0xC7	; 199
    5ac8:	f6 4e       	sbci	r31, 0xE6	; 230
    5aca:	80 81       	ld	r24, Z
    5acc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5ad0:	85 e8       	ldi	r24, 0x85	; 133
    5ad2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ad6:	72 c0       	rjmp	.+228    	; 0x5bbc <__vector_39+0x154>
    5ad8:	84 e9       	ldi	r24, 0x94	; 148
    5ada:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ade:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    5ae2:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    5ae6:	dc 01       	movw	r26, r24
    5ae8:	12 96       	adiw	r26, 0x02	; 2
    5aea:	ed 91       	ld	r30, X+
    5aec:	fc 91       	ld	r31, X
    5aee:	13 97       	sbiw	r26, 0x03	; 3
    5af0:	30 97       	sbiw	r30, 0x00	; 0
    5af2:	09 f4       	brne	.+2      	; 0x5af6 <__vector_39+0x8e>
    5af4:	63 c0       	rjmp	.+198    	; 0x5bbc <__vector_39+0x154>
    5af6:	20 e0       	ldi	r18, 0x00	; 0
    5af8:	40 e0       	ldi	r20, 0x00	; 0
    5afa:	50 e0       	ldi	r21, 0x00	; 0
    5afc:	64 e0       	ldi	r22, 0x04	; 4
    5afe:	19 95       	eicall
    5b00:	5d c0       	rjmp	.+186    	; 0x5bbc <__vector_39+0x154>
    5b02:	e0 91 35 19 	lds	r30, 0x1935	; 0x801935 <_index.1885>
    5b06:	81 e0       	ldi	r24, 0x01	; 1
    5b08:	8e 0f       	add	r24, r30
    5b0a:	80 93 35 19 	sts	0x1935, r24	; 0x801935 <_index.1885>
    5b0e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5b12:	f0 e0       	ldi	r31, 0x00	; 0
    5b14:	e7 5c       	subi	r30, 0xC7	; 199
    5b16:	f6 4e       	sbci	r31, 0xE6	; 230
    5b18:	80 83       	st	Z, r24
    5b1a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5b1e:	80 34       	cpi	r24, 0x40	; 64
    5b20:	11 f4       	brne	.+4      	; 0x5b26 <__vector_39+0xbe>
    5b22:	10 92 35 19 	sts	0x1935, r1	; 0x801935 <_index.1885>
    5b26:	20 91 35 19 	lds	r18, 0x1935	; 0x801935 <_index.1885>
    5b2a:	30 e0       	ldi	r19, 0x00	; 0
    5b2c:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <_twiMessageLen>
    5b30:	90 e0       	ldi	r25, 0x00	; 0
    5b32:	01 97       	sbiw	r24, 0x01	; 1
    5b34:	28 17       	cp	r18, r24
    5b36:	39 07       	cpc	r19, r25
    5b38:	24 f4       	brge	.+8      	; 0x5b42 <__vector_39+0xda>
    5b3a:	85 ec       	ldi	r24, 0xC5	; 197
    5b3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b40:	3d c0       	rjmp	.+122    	; 0x5bbc <__vector_39+0x154>
    5b42:	85 e8       	ldi	r24, 0x85	; 133
    5b44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b48:	39 c0       	rjmp	.+114    	; 0x5bbc <__vector_39+0x154>
    5b4a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5b4e:	e0 91 35 19 	lds	r30, 0x1935	; 0x801935 <_index.1885>
    5b52:	f0 e0       	ldi	r31, 0x00	; 0
    5b54:	e7 5c       	subi	r30, 0xC7	; 199
    5b56:	f6 4e       	sbci	r31, 0xE6	; 230
    5b58:	80 83       	st	Z, r24
    5b5a:	84 e9       	ldi	r24, 0x94	; 148
    5b5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b60:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    5b64:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    5b68:	dc 01       	movw	r26, r24
    5b6a:	12 96       	adiw	r26, 0x02	; 2
    5b6c:	ed 91       	ld	r30, X+
    5b6e:	fc 91       	ld	r31, X
    5b70:	13 97       	sbiw	r26, 0x03	; 3
    5b72:	30 97       	sbiw	r30, 0x00	; 0
    5b74:	19 f1       	breq	.+70     	; 0x5bbc <__vector_39+0x154>
    5b76:	20 91 38 19 	lds	r18, 0x1938	; 0x801938 <_twiMessageLen>
    5b7a:	49 e3       	ldi	r20, 0x39	; 57
    5b7c:	59 e1       	ldi	r21, 0x19	; 25
    5b7e:	65 e0       	ldi	r22, 0x05	; 5
    5b80:	19 95       	eicall
    5b82:	1c c0       	rjmp	.+56     	; 0x5bbc <__vector_39+0x154>
    5b84:	85 ea       	ldi	r24, 0xA5	; 165
    5b86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b8a:	18 c0       	rjmp	.+48     	; 0x5bbc <__vector_39+0x154>
    5b8c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5b90:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_twiCurrentState>
    5b94:	84 e0       	ldi	r24, 0x04	; 4
    5b96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b9a:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    5b9e:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    5ba2:	dc 01       	movw	r26, r24
    5ba4:	12 96       	adiw	r26, 0x02	; 2
    5ba6:	ed 91       	ld	r30, X+
    5ba8:	fc 91       	ld	r31, X
    5baa:	13 97       	sbiw	r26, 0x03	; 3
    5bac:	30 97       	sbiw	r30, 0x00	; 0
    5bae:	31 f0       	breq	.+12     	; 0x5bbc <__vector_39+0x154>
    5bb0:	20 e0       	ldi	r18, 0x00	; 0
    5bb2:	40 e0       	ldi	r20, 0x00	; 0
    5bb4:	50 e0       	ldi	r21, 0x00	; 0
    5bb6:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <_twiCurrentState>
    5bba:	19 95       	eicall
    5bbc:	ff 91       	pop	r31
    5bbe:	ef 91       	pop	r30
    5bc0:	bf 91       	pop	r27
    5bc2:	af 91       	pop	r26
    5bc4:	9f 91       	pop	r25
    5bc6:	8f 91       	pop	r24
    5bc8:	7f 91       	pop	r23
    5bca:	6f 91       	pop	r22
    5bcc:	5f 91       	pop	r21
    5bce:	4f 91       	pop	r20
    5bd0:	3f 91       	pop	r19
    5bd2:	2f 91       	pop	r18
    5bd4:	0f 90       	pop	r0
    5bd6:	0b be       	out	0x3b, r0	; 59
    5bd8:	0f 90       	pop	r0
    5bda:	0f be       	out	0x3f, r0	; 63
    5bdc:	0f 90       	pop	r0
    5bde:	1f 90       	pop	r1
    5be0:	18 95       	reti

00005be2 <fifo_init>:
    5be2:	fc 01       	movw	r30, r24
    5be4:	41 11       	cpse	r20, r1
    5be6:	01 c0       	rjmp	.+2      	; 0x5bea <fifo_init+0x8>
    5be8:	02 d7       	rcall	.+3588   	; 0x69ee <abort>
    5bea:	84 2f       	mov	r24, r20
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	9c 01       	movw	r18, r24
    5bf0:	21 50       	subi	r18, 0x01	; 1
    5bf2:	31 09       	sbc	r19, r1
    5bf4:	82 23       	and	r24, r18
    5bf6:	93 23       	and	r25, r19
    5bf8:	89 2b       	or	r24, r25
    5bfa:	09 f0       	breq	.+2      	; 0x5bfe <fifo_init+0x1c>
    5bfc:	f8 d6       	rcall	.+3568   	; 0x69ee <abort>
    5bfe:	41 38       	cpi	r20, 0x81	; 129
    5c00:	08 f0       	brcs	.+2      	; 0x5c04 <fifo_init+0x22>
    5c02:	f5 d6       	rcall	.+3562   	; 0x69ee <abort>
    5c04:	12 82       	std	Z+2, r1	; 0x02
    5c06:	13 82       	std	Z+3, r1	; 0x03
    5c08:	44 83       	std	Z+4, r20	; 0x04
    5c0a:	44 0f       	add	r20, r20
    5c0c:	41 50       	subi	r20, 0x01	; 1
    5c0e:	45 83       	std	Z+5, r20	; 0x05
    5c10:	71 83       	std	Z+1, r23	; 0x01
    5c12:	60 83       	st	Z, r22
    5c14:	80 e0       	ldi	r24, 0x00	; 0
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	08 95       	ret

00005c1a <vfprintf>:
    5c1a:	2f 92       	push	r2
    5c1c:	3f 92       	push	r3
    5c1e:	4f 92       	push	r4
    5c20:	5f 92       	push	r5
    5c22:	6f 92       	push	r6
    5c24:	7f 92       	push	r7
    5c26:	8f 92       	push	r8
    5c28:	9f 92       	push	r9
    5c2a:	af 92       	push	r10
    5c2c:	bf 92       	push	r11
    5c2e:	cf 92       	push	r12
    5c30:	df 92       	push	r13
    5c32:	ef 92       	push	r14
    5c34:	ff 92       	push	r15
    5c36:	0f 93       	push	r16
    5c38:	1f 93       	push	r17
    5c3a:	cf 93       	push	r28
    5c3c:	df 93       	push	r29
    5c3e:	cd b7       	in	r28, 0x3d	; 61
    5c40:	de b7       	in	r29, 0x3e	; 62
    5c42:	60 97       	sbiw	r28, 0x10	; 16
    5c44:	0f b6       	in	r0, 0x3f	; 63
    5c46:	f8 94       	cli
    5c48:	de bf       	out	0x3e, r29	; 62
    5c4a:	0f be       	out	0x3f, r0	; 63
    5c4c:	cd bf       	out	0x3d, r28	; 61
    5c4e:	7c 01       	movw	r14, r24
    5c50:	1b 01       	movw	r2, r22
    5c52:	6a 01       	movw	r12, r20
    5c54:	fc 01       	movw	r30, r24
    5c56:	17 82       	std	Z+7, r1	; 0x07
    5c58:	16 82       	std	Z+6, r1	; 0x06
    5c5a:	83 81       	ldd	r24, Z+3	; 0x03
    5c5c:	81 ff       	sbrs	r24, 1
    5c5e:	2a c3       	rjmp	.+1620   	; 0x62b4 <vfprintf+0x69a>
    5c60:	9e 01       	movw	r18, r28
    5c62:	2f 5f       	subi	r18, 0xFF	; 255
    5c64:	3f 4f       	sbci	r19, 0xFF	; 255
    5c66:	39 01       	movw	r6, r18
    5c68:	f7 01       	movw	r30, r14
    5c6a:	93 81       	ldd	r25, Z+3	; 0x03
    5c6c:	f1 01       	movw	r30, r2
    5c6e:	93 fd       	sbrc	r25, 3
    5c70:	85 91       	lpm	r24, Z+
    5c72:	93 ff       	sbrs	r25, 3
    5c74:	81 91       	ld	r24, Z+
    5c76:	1f 01       	movw	r2, r30
    5c78:	88 23       	and	r24, r24
    5c7a:	09 f4       	brne	.+2      	; 0x5c7e <vfprintf+0x64>
    5c7c:	17 c3       	rjmp	.+1582   	; 0x62ac <vfprintf+0x692>
    5c7e:	85 32       	cpi	r24, 0x25	; 37
    5c80:	39 f4       	brne	.+14     	; 0x5c90 <vfprintf+0x76>
    5c82:	93 fd       	sbrc	r25, 3
    5c84:	85 91       	lpm	r24, Z+
    5c86:	93 ff       	sbrs	r25, 3
    5c88:	81 91       	ld	r24, Z+
    5c8a:	1f 01       	movw	r2, r30
    5c8c:	85 32       	cpi	r24, 0x25	; 37
    5c8e:	31 f4       	brne	.+12     	; 0x5c9c <vfprintf+0x82>
    5c90:	b7 01       	movw	r22, r14
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	fd d7       	rcall	.+4090   	; 0x6c90 <fputc>
    5c96:	56 01       	movw	r10, r12
    5c98:	65 01       	movw	r12, r10
    5c9a:	e6 cf       	rjmp	.-52     	; 0x5c68 <vfprintf+0x4e>
    5c9c:	10 e0       	ldi	r17, 0x00	; 0
    5c9e:	51 2c       	mov	r5, r1
    5ca0:	91 2c       	mov	r9, r1
    5ca2:	ff e1       	ldi	r31, 0x1F	; 31
    5ca4:	f9 15       	cp	r31, r9
    5ca6:	d8 f0       	brcs	.+54     	; 0x5cde <vfprintf+0xc4>
    5ca8:	8b 32       	cpi	r24, 0x2B	; 43
    5caa:	79 f0       	breq	.+30     	; 0x5cca <vfprintf+0xb0>
    5cac:	38 f4       	brcc	.+14     	; 0x5cbc <vfprintf+0xa2>
    5cae:	80 32       	cpi	r24, 0x20	; 32
    5cb0:	79 f0       	breq	.+30     	; 0x5cd0 <vfprintf+0xb6>
    5cb2:	83 32       	cpi	r24, 0x23	; 35
    5cb4:	a1 f4       	brne	.+40     	; 0x5cde <vfprintf+0xc4>
    5cb6:	f9 2d       	mov	r31, r9
    5cb8:	f0 61       	ori	r31, 0x10	; 16
    5cba:	2e c0       	rjmp	.+92     	; 0x5d18 <vfprintf+0xfe>
    5cbc:	8d 32       	cpi	r24, 0x2D	; 45
    5cbe:	61 f0       	breq	.+24     	; 0x5cd8 <vfprintf+0xbe>
    5cc0:	80 33       	cpi	r24, 0x30	; 48
    5cc2:	69 f4       	brne	.+26     	; 0x5cde <vfprintf+0xc4>
    5cc4:	29 2d       	mov	r18, r9
    5cc6:	21 60       	ori	r18, 0x01	; 1
    5cc8:	2d c0       	rjmp	.+90     	; 0x5d24 <vfprintf+0x10a>
    5cca:	39 2d       	mov	r19, r9
    5ccc:	32 60       	ori	r19, 0x02	; 2
    5cce:	93 2e       	mov	r9, r19
    5cd0:	89 2d       	mov	r24, r9
    5cd2:	84 60       	ori	r24, 0x04	; 4
    5cd4:	98 2e       	mov	r9, r24
    5cd6:	2a c0       	rjmp	.+84     	; 0x5d2c <vfprintf+0x112>
    5cd8:	e9 2d       	mov	r30, r9
    5cda:	e8 60       	ori	r30, 0x08	; 8
    5cdc:	15 c0       	rjmp	.+42     	; 0x5d08 <vfprintf+0xee>
    5cde:	97 fc       	sbrc	r9, 7
    5ce0:	2d c0       	rjmp	.+90     	; 0x5d3c <vfprintf+0x122>
    5ce2:	20 ed       	ldi	r18, 0xD0	; 208
    5ce4:	28 0f       	add	r18, r24
    5ce6:	2a 30       	cpi	r18, 0x0A	; 10
    5ce8:	88 f4       	brcc	.+34     	; 0x5d0c <vfprintf+0xf2>
    5cea:	96 fe       	sbrs	r9, 6
    5cec:	06 c0       	rjmp	.+12     	; 0x5cfa <vfprintf+0xe0>
    5cee:	3a e0       	ldi	r19, 0x0A	; 10
    5cf0:	13 9f       	mul	r17, r19
    5cf2:	20 0d       	add	r18, r0
    5cf4:	11 24       	eor	r1, r1
    5cf6:	12 2f       	mov	r17, r18
    5cf8:	19 c0       	rjmp	.+50     	; 0x5d2c <vfprintf+0x112>
    5cfa:	8a e0       	ldi	r24, 0x0A	; 10
    5cfc:	58 9e       	mul	r5, r24
    5cfe:	20 0d       	add	r18, r0
    5d00:	11 24       	eor	r1, r1
    5d02:	52 2e       	mov	r5, r18
    5d04:	e9 2d       	mov	r30, r9
    5d06:	e0 62       	ori	r30, 0x20	; 32
    5d08:	9e 2e       	mov	r9, r30
    5d0a:	10 c0       	rjmp	.+32     	; 0x5d2c <vfprintf+0x112>
    5d0c:	8e 32       	cpi	r24, 0x2E	; 46
    5d0e:	31 f4       	brne	.+12     	; 0x5d1c <vfprintf+0x102>
    5d10:	96 fc       	sbrc	r9, 6
    5d12:	cc c2       	rjmp	.+1432   	; 0x62ac <vfprintf+0x692>
    5d14:	f9 2d       	mov	r31, r9
    5d16:	f0 64       	ori	r31, 0x40	; 64
    5d18:	9f 2e       	mov	r9, r31
    5d1a:	08 c0       	rjmp	.+16     	; 0x5d2c <vfprintf+0x112>
    5d1c:	8c 36       	cpi	r24, 0x6C	; 108
    5d1e:	21 f4       	brne	.+8      	; 0x5d28 <vfprintf+0x10e>
    5d20:	29 2d       	mov	r18, r9
    5d22:	20 68       	ori	r18, 0x80	; 128
    5d24:	92 2e       	mov	r9, r18
    5d26:	02 c0       	rjmp	.+4      	; 0x5d2c <vfprintf+0x112>
    5d28:	88 36       	cpi	r24, 0x68	; 104
    5d2a:	41 f4       	brne	.+16     	; 0x5d3c <vfprintf+0x122>
    5d2c:	f1 01       	movw	r30, r2
    5d2e:	93 fd       	sbrc	r25, 3
    5d30:	85 91       	lpm	r24, Z+
    5d32:	93 ff       	sbrs	r25, 3
    5d34:	81 91       	ld	r24, Z+
    5d36:	1f 01       	movw	r2, r30
    5d38:	81 11       	cpse	r24, r1
    5d3a:	b3 cf       	rjmp	.-154    	; 0x5ca2 <vfprintf+0x88>
    5d3c:	9b eb       	ldi	r25, 0xBB	; 187
    5d3e:	98 0f       	add	r25, r24
    5d40:	93 30       	cpi	r25, 0x03	; 3
    5d42:	20 f4       	brcc	.+8      	; 0x5d4c <vfprintf+0x132>
    5d44:	99 2d       	mov	r25, r9
    5d46:	90 61       	ori	r25, 0x10	; 16
    5d48:	80 5e       	subi	r24, 0xE0	; 224
    5d4a:	07 c0       	rjmp	.+14     	; 0x5d5a <vfprintf+0x140>
    5d4c:	9b e9       	ldi	r25, 0x9B	; 155
    5d4e:	98 0f       	add	r25, r24
    5d50:	93 30       	cpi	r25, 0x03	; 3
    5d52:	08 f0       	brcs	.+2      	; 0x5d56 <vfprintf+0x13c>
    5d54:	59 c1       	rjmp	.+690    	; 0x6008 <vfprintf+0x3ee>
    5d56:	99 2d       	mov	r25, r9
    5d58:	9f 7e       	andi	r25, 0xEF	; 239
    5d5a:	96 ff       	sbrs	r25, 6
    5d5c:	16 e0       	ldi	r17, 0x06	; 6
    5d5e:	9f 73       	andi	r25, 0x3F	; 63
    5d60:	99 2e       	mov	r9, r25
    5d62:	85 36       	cpi	r24, 0x65	; 101
    5d64:	19 f4       	brne	.+6      	; 0x5d6c <vfprintf+0x152>
    5d66:	90 64       	ori	r25, 0x40	; 64
    5d68:	99 2e       	mov	r9, r25
    5d6a:	08 c0       	rjmp	.+16     	; 0x5d7c <vfprintf+0x162>
    5d6c:	86 36       	cpi	r24, 0x66	; 102
    5d6e:	21 f4       	brne	.+8      	; 0x5d78 <vfprintf+0x15e>
    5d70:	39 2f       	mov	r19, r25
    5d72:	30 68       	ori	r19, 0x80	; 128
    5d74:	93 2e       	mov	r9, r19
    5d76:	02 c0       	rjmp	.+4      	; 0x5d7c <vfprintf+0x162>
    5d78:	11 11       	cpse	r17, r1
    5d7a:	11 50       	subi	r17, 0x01	; 1
    5d7c:	97 fe       	sbrs	r9, 7
    5d7e:	07 c0       	rjmp	.+14     	; 0x5d8e <vfprintf+0x174>
    5d80:	1c 33       	cpi	r17, 0x3C	; 60
    5d82:	50 f4       	brcc	.+20     	; 0x5d98 <vfprintf+0x17e>
    5d84:	44 24       	eor	r4, r4
    5d86:	43 94       	inc	r4
    5d88:	41 0e       	add	r4, r17
    5d8a:	27 e0       	ldi	r18, 0x07	; 7
    5d8c:	0b c0       	rjmp	.+22     	; 0x5da4 <vfprintf+0x18a>
    5d8e:	18 30       	cpi	r17, 0x08	; 8
    5d90:	38 f0       	brcs	.+14     	; 0x5da0 <vfprintf+0x186>
    5d92:	27 e0       	ldi	r18, 0x07	; 7
    5d94:	17 e0       	ldi	r17, 0x07	; 7
    5d96:	05 c0       	rjmp	.+10     	; 0x5da2 <vfprintf+0x188>
    5d98:	27 e0       	ldi	r18, 0x07	; 7
    5d9a:	9c e3       	ldi	r25, 0x3C	; 60
    5d9c:	49 2e       	mov	r4, r25
    5d9e:	02 c0       	rjmp	.+4      	; 0x5da4 <vfprintf+0x18a>
    5da0:	21 2f       	mov	r18, r17
    5da2:	41 2c       	mov	r4, r1
    5da4:	56 01       	movw	r10, r12
    5da6:	84 e0       	ldi	r24, 0x04	; 4
    5da8:	a8 0e       	add	r10, r24
    5daa:	b1 1c       	adc	r11, r1
    5dac:	f6 01       	movw	r30, r12
    5dae:	60 81       	ld	r22, Z
    5db0:	71 81       	ldd	r23, Z+1	; 0x01
    5db2:	82 81       	ldd	r24, Z+2	; 0x02
    5db4:	93 81       	ldd	r25, Z+3	; 0x03
    5db6:	04 2d       	mov	r16, r4
    5db8:	a3 01       	movw	r20, r6
    5dba:	1d d6       	rcall	.+3130   	; 0x69f6 <__ftoa_engine>
    5dbc:	6c 01       	movw	r12, r24
    5dbe:	f9 81       	ldd	r31, Y+1	; 0x01
    5dc0:	fc 87       	std	Y+12, r31	; 0x0c
    5dc2:	f0 ff       	sbrs	r31, 0
    5dc4:	02 c0       	rjmp	.+4      	; 0x5dca <vfprintf+0x1b0>
    5dc6:	f3 ff       	sbrs	r31, 3
    5dc8:	06 c0       	rjmp	.+12     	; 0x5dd6 <vfprintf+0x1bc>
    5dca:	91 fc       	sbrc	r9, 1
    5dcc:	06 c0       	rjmp	.+12     	; 0x5dda <vfprintf+0x1c0>
    5dce:	92 fe       	sbrs	r9, 2
    5dd0:	06 c0       	rjmp	.+12     	; 0x5dde <vfprintf+0x1c4>
    5dd2:	00 e2       	ldi	r16, 0x20	; 32
    5dd4:	05 c0       	rjmp	.+10     	; 0x5de0 <vfprintf+0x1c6>
    5dd6:	0d e2       	ldi	r16, 0x2D	; 45
    5dd8:	03 c0       	rjmp	.+6      	; 0x5de0 <vfprintf+0x1c6>
    5dda:	0b e2       	ldi	r16, 0x2B	; 43
    5ddc:	01 c0       	rjmp	.+2      	; 0x5de0 <vfprintf+0x1c6>
    5dde:	00 e0       	ldi	r16, 0x00	; 0
    5de0:	8c 85       	ldd	r24, Y+12	; 0x0c
    5de2:	8c 70       	andi	r24, 0x0C	; 12
    5de4:	19 f0       	breq	.+6      	; 0x5dec <vfprintf+0x1d2>
    5de6:	01 11       	cpse	r16, r1
    5de8:	43 c2       	rjmp	.+1158   	; 0x6270 <vfprintf+0x656>
    5dea:	80 c2       	rjmp	.+1280   	; 0x62ec <vfprintf+0x6d2>
    5dec:	97 fe       	sbrs	r9, 7
    5dee:	10 c0       	rjmp	.+32     	; 0x5e10 <vfprintf+0x1f6>
    5df0:	4c 0c       	add	r4, r12
    5df2:	fc 85       	ldd	r31, Y+12	; 0x0c
    5df4:	f4 ff       	sbrs	r31, 4
    5df6:	04 c0       	rjmp	.+8      	; 0x5e00 <vfprintf+0x1e6>
    5df8:	8a 81       	ldd	r24, Y+2	; 0x02
    5dfa:	81 33       	cpi	r24, 0x31	; 49
    5dfc:	09 f4       	brne	.+2      	; 0x5e00 <vfprintf+0x1e6>
    5dfe:	4a 94       	dec	r4
    5e00:	14 14       	cp	r1, r4
    5e02:	74 f5       	brge	.+92     	; 0x5e60 <vfprintf+0x246>
    5e04:	28 e0       	ldi	r18, 0x08	; 8
    5e06:	24 15       	cp	r18, r4
    5e08:	78 f5       	brcc	.+94     	; 0x5e68 <vfprintf+0x24e>
    5e0a:	88 e0       	ldi	r24, 0x08	; 8
    5e0c:	48 2e       	mov	r4, r24
    5e0e:	2c c0       	rjmp	.+88     	; 0x5e68 <vfprintf+0x24e>
    5e10:	96 fc       	sbrc	r9, 6
    5e12:	2a c0       	rjmp	.+84     	; 0x5e68 <vfprintf+0x24e>
    5e14:	81 2f       	mov	r24, r17
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	8c 15       	cp	r24, r12
    5e1a:	9d 05       	cpc	r25, r13
    5e1c:	9c f0       	brlt	.+38     	; 0x5e44 <vfprintf+0x22a>
    5e1e:	3c ef       	ldi	r19, 0xFC	; 252
    5e20:	c3 16       	cp	r12, r19
    5e22:	3f ef       	ldi	r19, 0xFF	; 255
    5e24:	d3 06       	cpc	r13, r19
    5e26:	74 f0       	brlt	.+28     	; 0x5e44 <vfprintf+0x22a>
    5e28:	89 2d       	mov	r24, r9
    5e2a:	80 68       	ori	r24, 0x80	; 128
    5e2c:	98 2e       	mov	r9, r24
    5e2e:	0a c0       	rjmp	.+20     	; 0x5e44 <vfprintf+0x22a>
    5e30:	e2 e0       	ldi	r30, 0x02	; 2
    5e32:	f0 e0       	ldi	r31, 0x00	; 0
    5e34:	ec 0f       	add	r30, r28
    5e36:	fd 1f       	adc	r31, r29
    5e38:	e1 0f       	add	r30, r17
    5e3a:	f1 1d       	adc	r31, r1
    5e3c:	80 81       	ld	r24, Z
    5e3e:	80 33       	cpi	r24, 0x30	; 48
    5e40:	19 f4       	brne	.+6      	; 0x5e48 <vfprintf+0x22e>
    5e42:	11 50       	subi	r17, 0x01	; 1
    5e44:	11 11       	cpse	r17, r1
    5e46:	f4 cf       	rjmp	.-24     	; 0x5e30 <vfprintf+0x216>
    5e48:	97 fe       	sbrs	r9, 7
    5e4a:	0e c0       	rjmp	.+28     	; 0x5e68 <vfprintf+0x24e>
    5e4c:	44 24       	eor	r4, r4
    5e4e:	43 94       	inc	r4
    5e50:	41 0e       	add	r4, r17
    5e52:	81 2f       	mov	r24, r17
    5e54:	90 e0       	ldi	r25, 0x00	; 0
    5e56:	c8 16       	cp	r12, r24
    5e58:	d9 06       	cpc	r13, r25
    5e5a:	2c f4       	brge	.+10     	; 0x5e66 <vfprintf+0x24c>
    5e5c:	1c 19       	sub	r17, r12
    5e5e:	04 c0       	rjmp	.+8      	; 0x5e68 <vfprintf+0x24e>
    5e60:	44 24       	eor	r4, r4
    5e62:	43 94       	inc	r4
    5e64:	01 c0       	rjmp	.+2      	; 0x5e68 <vfprintf+0x24e>
    5e66:	10 e0       	ldi	r17, 0x00	; 0
    5e68:	97 fe       	sbrs	r9, 7
    5e6a:	06 c0       	rjmp	.+12     	; 0x5e78 <vfprintf+0x25e>
    5e6c:	1c 14       	cp	r1, r12
    5e6e:	1d 04       	cpc	r1, r13
    5e70:	34 f4       	brge	.+12     	; 0x5e7e <vfprintf+0x264>
    5e72:	c6 01       	movw	r24, r12
    5e74:	01 96       	adiw	r24, 0x01	; 1
    5e76:	05 c0       	rjmp	.+10     	; 0x5e82 <vfprintf+0x268>
    5e78:	85 e0       	ldi	r24, 0x05	; 5
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	02 c0       	rjmp	.+4      	; 0x5e82 <vfprintf+0x268>
    5e7e:	81 e0       	ldi	r24, 0x01	; 1
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	01 11       	cpse	r16, r1
    5e84:	01 96       	adiw	r24, 0x01	; 1
    5e86:	11 23       	and	r17, r17
    5e88:	31 f0       	breq	.+12     	; 0x5e96 <vfprintf+0x27c>
    5e8a:	21 2f       	mov	r18, r17
    5e8c:	30 e0       	ldi	r19, 0x00	; 0
    5e8e:	2f 5f       	subi	r18, 0xFF	; 255
    5e90:	3f 4f       	sbci	r19, 0xFF	; 255
    5e92:	82 0f       	add	r24, r18
    5e94:	93 1f       	adc	r25, r19
    5e96:	25 2d       	mov	r18, r5
    5e98:	30 e0       	ldi	r19, 0x00	; 0
    5e9a:	82 17       	cp	r24, r18
    5e9c:	93 07       	cpc	r25, r19
    5e9e:	14 f4       	brge	.+4      	; 0x5ea4 <vfprintf+0x28a>
    5ea0:	58 1a       	sub	r5, r24
    5ea2:	01 c0       	rjmp	.+2      	; 0x5ea6 <vfprintf+0x28c>
    5ea4:	51 2c       	mov	r5, r1
    5ea6:	89 2d       	mov	r24, r9
    5ea8:	89 70       	andi	r24, 0x09	; 9
    5eaa:	41 f4       	brne	.+16     	; 0x5ebc <vfprintf+0x2a2>
    5eac:	55 20       	and	r5, r5
    5eae:	31 f0       	breq	.+12     	; 0x5ebc <vfprintf+0x2a2>
    5eb0:	b7 01       	movw	r22, r14
    5eb2:	80 e2       	ldi	r24, 0x20	; 32
    5eb4:	90 e0       	ldi	r25, 0x00	; 0
    5eb6:	ec d6       	rcall	.+3544   	; 0x6c90 <fputc>
    5eb8:	5a 94       	dec	r5
    5eba:	f8 cf       	rjmp	.-16     	; 0x5eac <vfprintf+0x292>
    5ebc:	00 23       	and	r16, r16
    5ebe:	21 f0       	breq	.+8      	; 0x5ec8 <vfprintf+0x2ae>
    5ec0:	b7 01       	movw	r22, r14
    5ec2:	80 2f       	mov	r24, r16
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	e4 d6       	rcall	.+3528   	; 0x6c90 <fputc>
    5ec8:	93 fc       	sbrc	r9, 3
    5eca:	08 c0       	rjmp	.+16     	; 0x5edc <vfprintf+0x2c2>
    5ecc:	55 20       	and	r5, r5
    5ece:	31 f0       	breq	.+12     	; 0x5edc <vfprintf+0x2c2>
    5ed0:	b7 01       	movw	r22, r14
    5ed2:	80 e3       	ldi	r24, 0x30	; 48
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
    5ed6:	dc d6       	rcall	.+3512   	; 0x6c90 <fputc>
    5ed8:	5a 94       	dec	r5
    5eda:	f8 cf       	rjmp	.-16     	; 0x5ecc <vfprintf+0x2b2>
    5edc:	97 fe       	sbrs	r9, 7
    5ede:	4a c0       	rjmp	.+148    	; 0x5f74 <vfprintf+0x35a>
    5ee0:	46 01       	movw	r8, r12
    5ee2:	d7 fe       	sbrs	r13, 7
    5ee4:	02 c0       	rjmp	.+4      	; 0x5eea <vfprintf+0x2d0>
    5ee6:	81 2c       	mov	r8, r1
    5ee8:	91 2c       	mov	r9, r1
    5eea:	c6 01       	movw	r24, r12
    5eec:	88 19       	sub	r24, r8
    5eee:	99 09       	sbc	r25, r9
    5ef0:	f3 01       	movw	r30, r6
    5ef2:	e8 0f       	add	r30, r24
    5ef4:	f9 1f       	adc	r31, r25
    5ef6:	fe 87       	std	Y+14, r31	; 0x0e
    5ef8:	ed 87       	std	Y+13, r30	; 0x0d
    5efa:	96 01       	movw	r18, r12
    5efc:	24 19       	sub	r18, r4
    5efe:	31 09       	sbc	r19, r1
    5f00:	38 8b       	std	Y+16, r19	; 0x10
    5f02:	2f 87       	std	Y+15, r18	; 0x0f
    5f04:	01 2f       	mov	r16, r17
    5f06:	10 e0       	ldi	r17, 0x00	; 0
    5f08:	11 95       	neg	r17
    5f0a:	01 95       	neg	r16
    5f0c:	11 09       	sbc	r17, r1
    5f0e:	3f ef       	ldi	r19, 0xFF	; 255
    5f10:	83 16       	cp	r8, r19
    5f12:	93 06       	cpc	r9, r19
    5f14:	21 f4       	brne	.+8      	; 0x5f1e <vfprintf+0x304>
    5f16:	b7 01       	movw	r22, r14
    5f18:	8e e2       	ldi	r24, 0x2E	; 46
    5f1a:	90 e0       	ldi	r25, 0x00	; 0
    5f1c:	b9 d6       	rcall	.+3442   	; 0x6c90 <fputc>
    5f1e:	c8 14       	cp	r12, r8
    5f20:	d9 04       	cpc	r13, r9
    5f22:	4c f0       	brlt	.+18     	; 0x5f36 <vfprintf+0x31c>
    5f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f26:	98 89       	ldd	r25, Y+16	; 0x10
    5f28:	88 15       	cp	r24, r8
    5f2a:	99 05       	cpc	r25, r9
    5f2c:	24 f4       	brge	.+8      	; 0x5f36 <vfprintf+0x31c>
    5f2e:	ed 85       	ldd	r30, Y+13	; 0x0d
    5f30:	fe 85       	ldd	r31, Y+14	; 0x0e
    5f32:	81 81       	ldd	r24, Z+1	; 0x01
    5f34:	01 c0       	rjmp	.+2      	; 0x5f38 <vfprintf+0x31e>
    5f36:	80 e3       	ldi	r24, 0x30	; 48
    5f38:	f1 e0       	ldi	r31, 0x01	; 1
    5f3a:	8f 1a       	sub	r8, r31
    5f3c:	91 08       	sbc	r9, r1
    5f3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5f40:	3e 85       	ldd	r19, Y+14	; 0x0e
    5f42:	2f 5f       	subi	r18, 0xFF	; 255
    5f44:	3f 4f       	sbci	r19, 0xFF	; 255
    5f46:	3e 87       	std	Y+14, r19	; 0x0e
    5f48:	2d 87       	std	Y+13, r18	; 0x0d
    5f4a:	80 16       	cp	r8, r16
    5f4c:	91 06       	cpc	r9, r17
    5f4e:	24 f0       	brlt	.+8      	; 0x5f58 <vfprintf+0x33e>
    5f50:	b7 01       	movw	r22, r14
    5f52:	90 e0       	ldi	r25, 0x00	; 0
    5f54:	9d d6       	rcall	.+3386   	; 0x6c90 <fputc>
    5f56:	db cf       	rjmp	.-74     	; 0x5f0e <vfprintf+0x2f4>
    5f58:	c8 14       	cp	r12, r8
    5f5a:	d9 04       	cpc	r13, r9
    5f5c:	41 f4       	brne	.+16     	; 0x5f6e <vfprintf+0x354>
    5f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f60:	96 33       	cpi	r25, 0x36	; 54
    5f62:	20 f4       	brcc	.+8      	; 0x5f6c <vfprintf+0x352>
    5f64:	95 33       	cpi	r25, 0x35	; 53
    5f66:	19 f4       	brne	.+6      	; 0x5f6e <vfprintf+0x354>
    5f68:	3c 85       	ldd	r19, Y+12	; 0x0c
    5f6a:	34 ff       	sbrs	r19, 4
    5f6c:	81 e3       	ldi	r24, 0x31	; 49
    5f6e:	b7 01       	movw	r22, r14
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	48 c0       	rjmp	.+144    	; 0x6004 <vfprintf+0x3ea>
    5f74:	8a 81       	ldd	r24, Y+2	; 0x02
    5f76:	81 33       	cpi	r24, 0x31	; 49
    5f78:	19 f0       	breq	.+6      	; 0x5f80 <vfprintf+0x366>
    5f7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f7c:	9f 7e       	andi	r25, 0xEF	; 239
    5f7e:	9c 87       	std	Y+12, r25	; 0x0c
    5f80:	b7 01       	movw	r22, r14
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	85 d6       	rcall	.+3338   	; 0x6c90 <fputc>
    5f86:	11 11       	cpse	r17, r1
    5f88:	05 c0       	rjmp	.+10     	; 0x5f94 <vfprintf+0x37a>
    5f8a:	94 fc       	sbrc	r9, 4
    5f8c:	16 c0       	rjmp	.+44     	; 0x5fba <vfprintf+0x3a0>
    5f8e:	85 e6       	ldi	r24, 0x65	; 101
    5f90:	90 e0       	ldi	r25, 0x00	; 0
    5f92:	15 c0       	rjmp	.+42     	; 0x5fbe <vfprintf+0x3a4>
    5f94:	b7 01       	movw	r22, r14
    5f96:	8e e2       	ldi	r24, 0x2E	; 46
    5f98:	90 e0       	ldi	r25, 0x00	; 0
    5f9a:	7a d6       	rcall	.+3316   	; 0x6c90 <fputc>
    5f9c:	1e 5f       	subi	r17, 0xFE	; 254
    5f9e:	82 e0       	ldi	r24, 0x02	; 2
    5fa0:	01 e0       	ldi	r16, 0x01	; 1
    5fa2:	08 0f       	add	r16, r24
    5fa4:	f3 01       	movw	r30, r6
    5fa6:	e8 0f       	add	r30, r24
    5fa8:	f1 1d       	adc	r31, r1
    5faa:	80 81       	ld	r24, Z
    5fac:	b7 01       	movw	r22, r14
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	6f d6       	rcall	.+3294   	; 0x6c90 <fputc>
    5fb2:	80 2f       	mov	r24, r16
    5fb4:	01 13       	cpse	r16, r17
    5fb6:	f4 cf       	rjmp	.-24     	; 0x5fa0 <vfprintf+0x386>
    5fb8:	e8 cf       	rjmp	.-48     	; 0x5f8a <vfprintf+0x370>
    5fba:	85 e4       	ldi	r24, 0x45	; 69
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	b7 01       	movw	r22, r14
    5fc0:	67 d6       	rcall	.+3278   	; 0x6c90 <fputc>
    5fc2:	d7 fc       	sbrc	r13, 7
    5fc4:	06 c0       	rjmp	.+12     	; 0x5fd2 <vfprintf+0x3b8>
    5fc6:	c1 14       	cp	r12, r1
    5fc8:	d1 04       	cpc	r13, r1
    5fca:	41 f4       	brne	.+16     	; 0x5fdc <vfprintf+0x3c2>
    5fcc:	ec 85       	ldd	r30, Y+12	; 0x0c
    5fce:	e4 ff       	sbrs	r30, 4
    5fd0:	05 c0       	rjmp	.+10     	; 0x5fdc <vfprintf+0x3c2>
    5fd2:	d1 94       	neg	r13
    5fd4:	c1 94       	neg	r12
    5fd6:	d1 08       	sbc	r13, r1
    5fd8:	8d e2       	ldi	r24, 0x2D	; 45
    5fda:	01 c0       	rjmp	.+2      	; 0x5fde <vfprintf+0x3c4>
    5fdc:	8b e2       	ldi	r24, 0x2B	; 43
    5fde:	b7 01       	movw	r22, r14
    5fe0:	90 e0       	ldi	r25, 0x00	; 0
    5fe2:	56 d6       	rcall	.+3244   	; 0x6c90 <fputc>
    5fe4:	80 e3       	ldi	r24, 0x30	; 48
    5fe6:	2a e0       	ldi	r18, 0x0A	; 10
    5fe8:	c2 16       	cp	r12, r18
    5fea:	d1 04       	cpc	r13, r1
    5fec:	2c f0       	brlt	.+10     	; 0x5ff8 <vfprintf+0x3de>
    5fee:	8f 5f       	subi	r24, 0xFF	; 255
    5ff0:	fa e0       	ldi	r31, 0x0A	; 10
    5ff2:	cf 1a       	sub	r12, r31
    5ff4:	d1 08       	sbc	r13, r1
    5ff6:	f7 cf       	rjmp	.-18     	; 0x5fe6 <vfprintf+0x3cc>
    5ff8:	b7 01       	movw	r22, r14
    5ffa:	90 e0       	ldi	r25, 0x00	; 0
    5ffc:	49 d6       	rcall	.+3218   	; 0x6c90 <fputc>
    5ffe:	b7 01       	movw	r22, r14
    6000:	c6 01       	movw	r24, r12
    6002:	c0 96       	adiw	r24, 0x30	; 48
    6004:	45 d6       	rcall	.+3210   	; 0x6c90 <fputc>
    6006:	49 c1       	rjmp	.+658    	; 0x629a <vfprintf+0x680>
    6008:	83 36       	cpi	r24, 0x63	; 99
    600a:	31 f0       	breq	.+12     	; 0x6018 <vfprintf+0x3fe>
    600c:	83 37       	cpi	r24, 0x73	; 115
    600e:	79 f0       	breq	.+30     	; 0x602e <vfprintf+0x414>
    6010:	83 35       	cpi	r24, 0x53	; 83
    6012:	09 f0       	breq	.+2      	; 0x6016 <vfprintf+0x3fc>
    6014:	52 c0       	rjmp	.+164    	; 0x60ba <vfprintf+0x4a0>
    6016:	1f c0       	rjmp	.+62     	; 0x6056 <vfprintf+0x43c>
    6018:	56 01       	movw	r10, r12
    601a:	32 e0       	ldi	r19, 0x02	; 2
    601c:	a3 0e       	add	r10, r19
    601e:	b1 1c       	adc	r11, r1
    6020:	f6 01       	movw	r30, r12
    6022:	80 81       	ld	r24, Z
    6024:	89 83       	std	Y+1, r24	; 0x01
    6026:	01 e0       	ldi	r16, 0x01	; 1
    6028:	10 e0       	ldi	r17, 0x00	; 0
    602a:	63 01       	movw	r12, r6
    602c:	11 c0       	rjmp	.+34     	; 0x6050 <vfprintf+0x436>
    602e:	56 01       	movw	r10, r12
    6030:	f2 e0       	ldi	r31, 0x02	; 2
    6032:	af 0e       	add	r10, r31
    6034:	b1 1c       	adc	r11, r1
    6036:	f6 01       	movw	r30, r12
    6038:	c0 80       	ld	r12, Z
    603a:	d1 80       	ldd	r13, Z+1	; 0x01
    603c:	96 fe       	sbrs	r9, 6
    603e:	03 c0       	rjmp	.+6      	; 0x6046 <vfprintf+0x42c>
    6040:	61 2f       	mov	r22, r17
    6042:	70 e0       	ldi	r23, 0x00	; 0
    6044:	02 c0       	rjmp	.+4      	; 0x604a <vfprintf+0x430>
    6046:	6f ef       	ldi	r22, 0xFF	; 255
    6048:	7f ef       	ldi	r23, 0xFF	; 255
    604a:	c6 01       	movw	r24, r12
    604c:	16 d6       	rcall	.+3116   	; 0x6c7a <strnlen>
    604e:	8c 01       	movw	r16, r24
    6050:	f9 2d       	mov	r31, r9
    6052:	ff 77       	andi	r31, 0x7F	; 127
    6054:	13 c0       	rjmp	.+38     	; 0x607c <vfprintf+0x462>
    6056:	56 01       	movw	r10, r12
    6058:	22 e0       	ldi	r18, 0x02	; 2
    605a:	a2 0e       	add	r10, r18
    605c:	b1 1c       	adc	r11, r1
    605e:	f6 01       	movw	r30, r12
    6060:	c0 80       	ld	r12, Z
    6062:	d1 80       	ldd	r13, Z+1	; 0x01
    6064:	96 fe       	sbrs	r9, 6
    6066:	03 c0       	rjmp	.+6      	; 0x606e <vfprintf+0x454>
    6068:	61 2f       	mov	r22, r17
    606a:	70 e0       	ldi	r23, 0x00	; 0
    606c:	02 c0       	rjmp	.+4      	; 0x6072 <vfprintf+0x458>
    606e:	6f ef       	ldi	r22, 0xFF	; 255
    6070:	7f ef       	ldi	r23, 0xFF	; 255
    6072:	c6 01       	movw	r24, r12
    6074:	98 d5       	rcall	.+2864   	; 0x6ba6 <strnlen_P>
    6076:	8c 01       	movw	r16, r24
    6078:	f9 2d       	mov	r31, r9
    607a:	f0 68       	ori	r31, 0x80	; 128
    607c:	9f 2e       	mov	r9, r31
    607e:	f3 fd       	sbrc	r31, 3
    6080:	18 c0       	rjmp	.+48     	; 0x60b2 <vfprintf+0x498>
    6082:	85 2d       	mov	r24, r5
    6084:	90 e0       	ldi	r25, 0x00	; 0
    6086:	08 17       	cp	r16, r24
    6088:	19 07       	cpc	r17, r25
    608a:	98 f4       	brcc	.+38     	; 0x60b2 <vfprintf+0x498>
    608c:	b7 01       	movw	r22, r14
    608e:	80 e2       	ldi	r24, 0x20	; 32
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	fe d5       	rcall	.+3068   	; 0x6c90 <fputc>
    6094:	5a 94       	dec	r5
    6096:	f5 cf       	rjmp	.-22     	; 0x6082 <vfprintf+0x468>
    6098:	f6 01       	movw	r30, r12
    609a:	97 fc       	sbrc	r9, 7
    609c:	85 91       	lpm	r24, Z+
    609e:	97 fe       	sbrs	r9, 7
    60a0:	81 91       	ld	r24, Z+
    60a2:	6f 01       	movw	r12, r30
    60a4:	b7 01       	movw	r22, r14
    60a6:	90 e0       	ldi	r25, 0x00	; 0
    60a8:	f3 d5       	rcall	.+3046   	; 0x6c90 <fputc>
    60aa:	51 10       	cpse	r5, r1
    60ac:	5a 94       	dec	r5
    60ae:	01 50       	subi	r16, 0x01	; 1
    60b0:	11 09       	sbc	r17, r1
    60b2:	01 15       	cp	r16, r1
    60b4:	11 05       	cpc	r17, r1
    60b6:	81 f7       	brne	.-32     	; 0x6098 <vfprintf+0x47e>
    60b8:	f0 c0       	rjmp	.+480    	; 0x629a <vfprintf+0x680>
    60ba:	84 36       	cpi	r24, 0x64	; 100
    60bc:	11 f0       	breq	.+4      	; 0x60c2 <vfprintf+0x4a8>
    60be:	89 36       	cpi	r24, 0x69	; 105
    60c0:	59 f5       	brne	.+86     	; 0x6118 <vfprintf+0x4fe>
    60c2:	56 01       	movw	r10, r12
    60c4:	97 fe       	sbrs	r9, 7
    60c6:	09 c0       	rjmp	.+18     	; 0x60da <vfprintf+0x4c0>
    60c8:	24 e0       	ldi	r18, 0x04	; 4
    60ca:	a2 0e       	add	r10, r18
    60cc:	b1 1c       	adc	r11, r1
    60ce:	f6 01       	movw	r30, r12
    60d0:	60 81       	ld	r22, Z
    60d2:	71 81       	ldd	r23, Z+1	; 0x01
    60d4:	82 81       	ldd	r24, Z+2	; 0x02
    60d6:	93 81       	ldd	r25, Z+3	; 0x03
    60d8:	0a c0       	rjmp	.+20     	; 0x60ee <vfprintf+0x4d4>
    60da:	f2 e0       	ldi	r31, 0x02	; 2
    60dc:	af 0e       	add	r10, r31
    60de:	b1 1c       	adc	r11, r1
    60e0:	f6 01       	movw	r30, r12
    60e2:	60 81       	ld	r22, Z
    60e4:	71 81       	ldd	r23, Z+1	; 0x01
    60e6:	07 2e       	mov	r0, r23
    60e8:	00 0c       	add	r0, r0
    60ea:	88 0b       	sbc	r24, r24
    60ec:	99 0b       	sbc	r25, r25
    60ee:	f9 2d       	mov	r31, r9
    60f0:	ff 76       	andi	r31, 0x6F	; 111
    60f2:	9f 2e       	mov	r9, r31
    60f4:	97 ff       	sbrs	r25, 7
    60f6:	09 c0       	rjmp	.+18     	; 0x610a <vfprintf+0x4f0>
    60f8:	90 95       	com	r25
    60fa:	80 95       	com	r24
    60fc:	70 95       	com	r23
    60fe:	61 95       	neg	r22
    6100:	7f 4f       	sbci	r23, 0xFF	; 255
    6102:	8f 4f       	sbci	r24, 0xFF	; 255
    6104:	9f 4f       	sbci	r25, 0xFF	; 255
    6106:	f0 68       	ori	r31, 0x80	; 128
    6108:	9f 2e       	mov	r9, r31
    610a:	2a e0       	ldi	r18, 0x0A	; 10
    610c:	30 e0       	ldi	r19, 0x00	; 0
    610e:	a3 01       	movw	r20, r6
    6110:	6e d6       	rcall	.+3292   	; 0x6dee <__ultoa_invert>
    6112:	c8 2e       	mov	r12, r24
    6114:	c6 18       	sub	r12, r6
    6116:	3e c0       	rjmp	.+124    	; 0x6194 <vfprintf+0x57a>
    6118:	09 2d       	mov	r16, r9
    611a:	85 37       	cpi	r24, 0x75	; 117
    611c:	21 f4       	brne	.+8      	; 0x6126 <vfprintf+0x50c>
    611e:	0f 7e       	andi	r16, 0xEF	; 239
    6120:	2a e0       	ldi	r18, 0x0A	; 10
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	1d c0       	rjmp	.+58     	; 0x6160 <vfprintf+0x546>
    6126:	09 7f       	andi	r16, 0xF9	; 249
    6128:	8f 36       	cpi	r24, 0x6F	; 111
    612a:	91 f0       	breq	.+36     	; 0x6150 <vfprintf+0x536>
    612c:	18 f4       	brcc	.+6      	; 0x6134 <vfprintf+0x51a>
    612e:	88 35       	cpi	r24, 0x58	; 88
    6130:	59 f0       	breq	.+22     	; 0x6148 <vfprintf+0x52e>
    6132:	bc c0       	rjmp	.+376    	; 0x62ac <vfprintf+0x692>
    6134:	80 37       	cpi	r24, 0x70	; 112
    6136:	19 f0       	breq	.+6      	; 0x613e <vfprintf+0x524>
    6138:	88 37       	cpi	r24, 0x78	; 120
    613a:	11 f0       	breq	.+4      	; 0x6140 <vfprintf+0x526>
    613c:	b7 c0       	rjmp	.+366    	; 0x62ac <vfprintf+0x692>
    613e:	00 61       	ori	r16, 0x10	; 16
    6140:	04 ff       	sbrs	r16, 4
    6142:	09 c0       	rjmp	.+18     	; 0x6156 <vfprintf+0x53c>
    6144:	04 60       	ori	r16, 0x04	; 4
    6146:	07 c0       	rjmp	.+14     	; 0x6156 <vfprintf+0x53c>
    6148:	94 fe       	sbrs	r9, 4
    614a:	08 c0       	rjmp	.+16     	; 0x615c <vfprintf+0x542>
    614c:	06 60       	ori	r16, 0x06	; 6
    614e:	06 c0       	rjmp	.+12     	; 0x615c <vfprintf+0x542>
    6150:	28 e0       	ldi	r18, 0x08	; 8
    6152:	30 e0       	ldi	r19, 0x00	; 0
    6154:	05 c0       	rjmp	.+10     	; 0x6160 <vfprintf+0x546>
    6156:	20 e1       	ldi	r18, 0x10	; 16
    6158:	30 e0       	ldi	r19, 0x00	; 0
    615a:	02 c0       	rjmp	.+4      	; 0x6160 <vfprintf+0x546>
    615c:	20 e1       	ldi	r18, 0x10	; 16
    615e:	32 e0       	ldi	r19, 0x02	; 2
    6160:	56 01       	movw	r10, r12
    6162:	07 ff       	sbrs	r16, 7
    6164:	09 c0       	rjmp	.+18     	; 0x6178 <vfprintf+0x55e>
    6166:	84 e0       	ldi	r24, 0x04	; 4
    6168:	a8 0e       	add	r10, r24
    616a:	b1 1c       	adc	r11, r1
    616c:	f6 01       	movw	r30, r12
    616e:	60 81       	ld	r22, Z
    6170:	71 81       	ldd	r23, Z+1	; 0x01
    6172:	82 81       	ldd	r24, Z+2	; 0x02
    6174:	93 81       	ldd	r25, Z+3	; 0x03
    6176:	08 c0       	rjmp	.+16     	; 0x6188 <vfprintf+0x56e>
    6178:	f2 e0       	ldi	r31, 0x02	; 2
    617a:	af 0e       	add	r10, r31
    617c:	b1 1c       	adc	r11, r1
    617e:	f6 01       	movw	r30, r12
    6180:	60 81       	ld	r22, Z
    6182:	71 81       	ldd	r23, Z+1	; 0x01
    6184:	80 e0       	ldi	r24, 0x00	; 0
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	a3 01       	movw	r20, r6
    618a:	31 d6       	rcall	.+3170   	; 0x6dee <__ultoa_invert>
    618c:	c8 2e       	mov	r12, r24
    618e:	c6 18       	sub	r12, r6
    6190:	0f 77       	andi	r16, 0x7F	; 127
    6192:	90 2e       	mov	r9, r16
    6194:	96 fe       	sbrs	r9, 6
    6196:	0b c0       	rjmp	.+22     	; 0x61ae <vfprintf+0x594>
    6198:	09 2d       	mov	r16, r9
    619a:	0e 7f       	andi	r16, 0xFE	; 254
    619c:	c1 16       	cp	r12, r17
    619e:	50 f4       	brcc	.+20     	; 0x61b4 <vfprintf+0x59a>
    61a0:	94 fe       	sbrs	r9, 4
    61a2:	0a c0       	rjmp	.+20     	; 0x61b8 <vfprintf+0x59e>
    61a4:	92 fc       	sbrc	r9, 2
    61a6:	08 c0       	rjmp	.+16     	; 0x61b8 <vfprintf+0x59e>
    61a8:	09 2d       	mov	r16, r9
    61aa:	0e 7e       	andi	r16, 0xEE	; 238
    61ac:	05 c0       	rjmp	.+10     	; 0x61b8 <vfprintf+0x59e>
    61ae:	dc 2c       	mov	r13, r12
    61b0:	09 2d       	mov	r16, r9
    61b2:	03 c0       	rjmp	.+6      	; 0x61ba <vfprintf+0x5a0>
    61b4:	dc 2c       	mov	r13, r12
    61b6:	01 c0       	rjmp	.+2      	; 0x61ba <vfprintf+0x5a0>
    61b8:	d1 2e       	mov	r13, r17
    61ba:	04 ff       	sbrs	r16, 4
    61bc:	0d c0       	rjmp	.+26     	; 0x61d8 <vfprintf+0x5be>
    61be:	fe 01       	movw	r30, r28
    61c0:	ec 0d       	add	r30, r12
    61c2:	f1 1d       	adc	r31, r1
    61c4:	80 81       	ld	r24, Z
    61c6:	80 33       	cpi	r24, 0x30	; 48
    61c8:	11 f4       	brne	.+4      	; 0x61ce <vfprintf+0x5b4>
    61ca:	09 7e       	andi	r16, 0xE9	; 233
    61cc:	09 c0       	rjmp	.+18     	; 0x61e0 <vfprintf+0x5c6>
    61ce:	02 ff       	sbrs	r16, 2
    61d0:	06 c0       	rjmp	.+12     	; 0x61de <vfprintf+0x5c4>
    61d2:	d3 94       	inc	r13
    61d4:	d3 94       	inc	r13
    61d6:	04 c0       	rjmp	.+8      	; 0x61e0 <vfprintf+0x5c6>
    61d8:	80 2f       	mov	r24, r16
    61da:	86 78       	andi	r24, 0x86	; 134
    61dc:	09 f0       	breq	.+2      	; 0x61e0 <vfprintf+0x5c6>
    61de:	d3 94       	inc	r13
    61e0:	03 fd       	sbrc	r16, 3
    61e2:	10 c0       	rjmp	.+32     	; 0x6204 <vfprintf+0x5ea>
    61e4:	00 ff       	sbrs	r16, 0
    61e6:	06 c0       	rjmp	.+12     	; 0x61f4 <vfprintf+0x5da>
    61e8:	1c 2d       	mov	r17, r12
    61ea:	d5 14       	cp	r13, r5
    61ec:	78 f4       	brcc	.+30     	; 0x620c <vfprintf+0x5f2>
    61ee:	15 0d       	add	r17, r5
    61f0:	1d 19       	sub	r17, r13
    61f2:	0c c0       	rjmp	.+24     	; 0x620c <vfprintf+0x5f2>
    61f4:	d5 14       	cp	r13, r5
    61f6:	50 f4       	brcc	.+20     	; 0x620c <vfprintf+0x5f2>
    61f8:	b7 01       	movw	r22, r14
    61fa:	80 e2       	ldi	r24, 0x20	; 32
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	48 d5       	rcall	.+2704   	; 0x6c90 <fputc>
    6200:	d3 94       	inc	r13
    6202:	f8 cf       	rjmp	.-16     	; 0x61f4 <vfprintf+0x5da>
    6204:	d5 14       	cp	r13, r5
    6206:	10 f4       	brcc	.+4      	; 0x620c <vfprintf+0x5f2>
    6208:	5d 18       	sub	r5, r13
    620a:	01 c0       	rjmp	.+2      	; 0x620e <vfprintf+0x5f4>
    620c:	51 2c       	mov	r5, r1
    620e:	04 ff       	sbrs	r16, 4
    6210:	0f c0       	rjmp	.+30     	; 0x6230 <vfprintf+0x616>
    6212:	b7 01       	movw	r22, r14
    6214:	80 e3       	ldi	r24, 0x30	; 48
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	3b d5       	rcall	.+2678   	; 0x6c90 <fputc>
    621a:	02 ff       	sbrs	r16, 2
    621c:	16 c0       	rjmp	.+44     	; 0x624a <vfprintf+0x630>
    621e:	01 fd       	sbrc	r16, 1
    6220:	03 c0       	rjmp	.+6      	; 0x6228 <vfprintf+0x60e>
    6222:	88 e7       	ldi	r24, 0x78	; 120
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	02 c0       	rjmp	.+4      	; 0x622c <vfprintf+0x612>
    6228:	88 e5       	ldi	r24, 0x58	; 88
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	b7 01       	movw	r22, r14
    622e:	0c c0       	rjmp	.+24     	; 0x6248 <vfprintf+0x62e>
    6230:	80 2f       	mov	r24, r16
    6232:	86 78       	andi	r24, 0x86	; 134
    6234:	51 f0       	breq	.+20     	; 0x624a <vfprintf+0x630>
    6236:	01 ff       	sbrs	r16, 1
    6238:	02 c0       	rjmp	.+4      	; 0x623e <vfprintf+0x624>
    623a:	8b e2       	ldi	r24, 0x2B	; 43
    623c:	01 c0       	rjmp	.+2      	; 0x6240 <vfprintf+0x626>
    623e:	80 e2       	ldi	r24, 0x20	; 32
    6240:	07 fd       	sbrc	r16, 7
    6242:	8d e2       	ldi	r24, 0x2D	; 45
    6244:	b7 01       	movw	r22, r14
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	23 d5       	rcall	.+2630   	; 0x6c90 <fputc>
    624a:	c1 16       	cp	r12, r17
    624c:	30 f4       	brcc	.+12     	; 0x625a <vfprintf+0x640>
    624e:	b7 01       	movw	r22, r14
    6250:	80 e3       	ldi	r24, 0x30	; 48
    6252:	90 e0       	ldi	r25, 0x00	; 0
    6254:	1d d5       	rcall	.+2618   	; 0x6c90 <fputc>
    6256:	11 50       	subi	r17, 0x01	; 1
    6258:	f8 cf       	rjmp	.-16     	; 0x624a <vfprintf+0x630>
    625a:	ca 94       	dec	r12
    625c:	f3 01       	movw	r30, r6
    625e:	ec 0d       	add	r30, r12
    6260:	f1 1d       	adc	r31, r1
    6262:	80 81       	ld	r24, Z
    6264:	b7 01       	movw	r22, r14
    6266:	90 e0       	ldi	r25, 0x00	; 0
    6268:	13 d5       	rcall	.+2598   	; 0x6c90 <fputc>
    626a:	c1 10       	cpse	r12, r1
    626c:	f6 cf       	rjmp	.-20     	; 0x625a <vfprintf+0x640>
    626e:	15 c0       	rjmp	.+42     	; 0x629a <vfprintf+0x680>
    6270:	f4 e0       	ldi	r31, 0x04	; 4
    6272:	f5 15       	cp	r31, r5
    6274:	50 f5       	brcc	.+84     	; 0x62ca <vfprintf+0x6b0>
    6276:	84 e0       	ldi	r24, 0x04	; 4
    6278:	58 1a       	sub	r5, r24
    627a:	93 fe       	sbrs	r9, 3
    627c:	1e c0       	rjmp	.+60     	; 0x62ba <vfprintf+0x6a0>
    627e:	01 11       	cpse	r16, r1
    6280:	25 c0       	rjmp	.+74     	; 0x62cc <vfprintf+0x6b2>
    6282:	2c 85       	ldd	r18, Y+12	; 0x0c
    6284:	23 ff       	sbrs	r18, 3
    6286:	27 c0       	rjmp	.+78     	; 0x62d6 <vfprintf+0x6bc>
    6288:	0a e9       	ldi	r16, 0x9A	; 154
    628a:	11 e0       	ldi	r17, 0x01	; 1
    628c:	39 2d       	mov	r19, r9
    628e:	30 71       	andi	r19, 0x10	; 16
    6290:	93 2e       	mov	r9, r19
    6292:	f8 01       	movw	r30, r16
    6294:	84 91       	lpm	r24, Z
    6296:	81 11       	cpse	r24, r1
    6298:	21 c0       	rjmp	.+66     	; 0x62dc <vfprintf+0x6c2>
    629a:	55 20       	and	r5, r5
    629c:	09 f4       	brne	.+2      	; 0x62a0 <vfprintf+0x686>
    629e:	fc cc       	rjmp	.-1544   	; 0x5c98 <vfprintf+0x7e>
    62a0:	b7 01       	movw	r22, r14
    62a2:	80 e2       	ldi	r24, 0x20	; 32
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	f4 d4       	rcall	.+2536   	; 0x6c90 <fputc>
    62a8:	5a 94       	dec	r5
    62aa:	f7 cf       	rjmp	.-18     	; 0x629a <vfprintf+0x680>
    62ac:	f7 01       	movw	r30, r14
    62ae:	86 81       	ldd	r24, Z+6	; 0x06
    62b0:	97 81       	ldd	r25, Z+7	; 0x07
    62b2:	23 c0       	rjmp	.+70     	; 0x62fa <vfprintf+0x6e0>
    62b4:	8f ef       	ldi	r24, 0xFF	; 255
    62b6:	9f ef       	ldi	r25, 0xFF	; 255
    62b8:	20 c0       	rjmp	.+64     	; 0x62fa <vfprintf+0x6e0>
    62ba:	b7 01       	movw	r22, r14
    62bc:	80 e2       	ldi	r24, 0x20	; 32
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	e7 d4       	rcall	.+2510   	; 0x6c90 <fputc>
    62c2:	5a 94       	dec	r5
    62c4:	51 10       	cpse	r5, r1
    62c6:	f9 cf       	rjmp	.-14     	; 0x62ba <vfprintf+0x6a0>
    62c8:	da cf       	rjmp	.-76     	; 0x627e <vfprintf+0x664>
    62ca:	51 2c       	mov	r5, r1
    62cc:	b7 01       	movw	r22, r14
    62ce:	80 2f       	mov	r24, r16
    62d0:	90 e0       	ldi	r25, 0x00	; 0
    62d2:	de d4       	rcall	.+2492   	; 0x6c90 <fputc>
    62d4:	d6 cf       	rjmp	.-84     	; 0x6282 <vfprintf+0x668>
    62d6:	0e e9       	ldi	r16, 0x9E	; 158
    62d8:	11 e0       	ldi	r17, 0x01	; 1
    62da:	d8 cf       	rjmp	.-80     	; 0x628c <vfprintf+0x672>
    62dc:	91 10       	cpse	r9, r1
    62de:	80 52       	subi	r24, 0x20	; 32
    62e0:	b7 01       	movw	r22, r14
    62e2:	90 e0       	ldi	r25, 0x00	; 0
    62e4:	d5 d4       	rcall	.+2474   	; 0x6c90 <fputc>
    62e6:	0f 5f       	subi	r16, 0xFF	; 255
    62e8:	1f 4f       	sbci	r17, 0xFF	; 255
    62ea:	d3 cf       	rjmp	.-90     	; 0x6292 <vfprintf+0x678>
    62ec:	23 e0       	ldi	r18, 0x03	; 3
    62ee:	25 15       	cp	r18, r5
    62f0:	10 f4       	brcc	.+4      	; 0x62f6 <vfprintf+0x6dc>
    62f2:	83 e0       	ldi	r24, 0x03	; 3
    62f4:	c1 cf       	rjmp	.-126    	; 0x6278 <vfprintf+0x65e>
    62f6:	51 2c       	mov	r5, r1
    62f8:	c4 cf       	rjmp	.-120    	; 0x6282 <vfprintf+0x668>
    62fa:	60 96       	adiw	r28, 0x10	; 16
    62fc:	0f b6       	in	r0, 0x3f	; 63
    62fe:	f8 94       	cli
    6300:	de bf       	out	0x3e, r29	; 62
    6302:	0f be       	out	0x3f, r0	; 63
    6304:	cd bf       	out	0x3d, r28	; 61
    6306:	df 91       	pop	r29
    6308:	cf 91       	pop	r28
    630a:	1f 91       	pop	r17
    630c:	0f 91       	pop	r16
    630e:	ff 90       	pop	r15
    6310:	ef 90       	pop	r14
    6312:	df 90       	pop	r13
    6314:	cf 90       	pop	r12
    6316:	bf 90       	pop	r11
    6318:	af 90       	pop	r10
    631a:	9f 90       	pop	r9
    631c:	8f 90       	pop	r8
    631e:	7f 90       	pop	r7
    6320:	6f 90       	pop	r6
    6322:	5f 90       	pop	r5
    6324:	4f 90       	pop	r4
    6326:	3f 90       	pop	r3
    6328:	2f 90       	pop	r2
    632a:	08 95       	ret

0000632c <__subsf3>:
    632c:	50 58       	subi	r21, 0x80	; 128

0000632e <__addsf3>:
    632e:	bb 27       	eor	r27, r27
    6330:	aa 27       	eor	r26, r26
    6332:	0e d0       	rcall	.+28     	; 0x6350 <__addsf3x>
    6334:	4d c1       	rjmp	.+666    	; 0x65d0 <__fp_round>
    6336:	3e d1       	rcall	.+636    	; 0x65b4 <__fp_pscA>
    6338:	30 f0       	brcs	.+12     	; 0x6346 <__addsf3+0x18>
    633a:	43 d1       	rcall	.+646    	; 0x65c2 <__fp_pscB>
    633c:	20 f0       	brcs	.+8      	; 0x6346 <__addsf3+0x18>
    633e:	31 f4       	brne	.+12     	; 0x634c <__addsf3+0x1e>
    6340:	9f 3f       	cpi	r25, 0xFF	; 255
    6342:	11 f4       	brne	.+4      	; 0x6348 <__addsf3+0x1a>
    6344:	1e f4       	brtc	.+6      	; 0x634c <__addsf3+0x1e>
    6346:	33 c1       	rjmp	.+614    	; 0x65ae <__fp_nan>
    6348:	0e f4       	brtc	.+2      	; 0x634c <__addsf3+0x1e>
    634a:	e0 95       	com	r30
    634c:	e7 fb       	bst	r30, 7
    634e:	29 c1       	rjmp	.+594    	; 0x65a2 <__fp_inf>

00006350 <__addsf3x>:
    6350:	e9 2f       	mov	r30, r25
    6352:	4f d1       	rcall	.+670    	; 0x65f2 <__fp_split3>
    6354:	80 f3       	brcs	.-32     	; 0x6336 <__addsf3+0x8>
    6356:	ba 17       	cp	r27, r26
    6358:	62 07       	cpc	r22, r18
    635a:	73 07       	cpc	r23, r19
    635c:	84 07       	cpc	r24, r20
    635e:	95 07       	cpc	r25, r21
    6360:	18 f0       	brcs	.+6      	; 0x6368 <__addsf3x+0x18>
    6362:	71 f4       	brne	.+28     	; 0x6380 <__addsf3x+0x30>
    6364:	9e f5       	brtc	.+102    	; 0x63cc <__addsf3x+0x7c>
    6366:	67 c1       	rjmp	.+718    	; 0x6636 <__fp_zero>
    6368:	0e f4       	brtc	.+2      	; 0x636c <__addsf3x+0x1c>
    636a:	e0 95       	com	r30
    636c:	0b 2e       	mov	r0, r27
    636e:	ba 2f       	mov	r27, r26
    6370:	a0 2d       	mov	r26, r0
    6372:	0b 01       	movw	r0, r22
    6374:	b9 01       	movw	r22, r18
    6376:	90 01       	movw	r18, r0
    6378:	0c 01       	movw	r0, r24
    637a:	ca 01       	movw	r24, r20
    637c:	a0 01       	movw	r20, r0
    637e:	11 24       	eor	r1, r1
    6380:	ff 27       	eor	r31, r31
    6382:	59 1b       	sub	r21, r25
    6384:	99 f0       	breq	.+38     	; 0x63ac <__addsf3x+0x5c>
    6386:	59 3f       	cpi	r21, 0xF9	; 249
    6388:	50 f4       	brcc	.+20     	; 0x639e <__addsf3x+0x4e>
    638a:	50 3e       	cpi	r21, 0xE0	; 224
    638c:	68 f1       	brcs	.+90     	; 0x63e8 <__addsf3x+0x98>
    638e:	1a 16       	cp	r1, r26
    6390:	f0 40       	sbci	r31, 0x00	; 0
    6392:	a2 2f       	mov	r26, r18
    6394:	23 2f       	mov	r18, r19
    6396:	34 2f       	mov	r19, r20
    6398:	44 27       	eor	r20, r20
    639a:	58 5f       	subi	r21, 0xF8	; 248
    639c:	f3 cf       	rjmp	.-26     	; 0x6384 <__addsf3x+0x34>
    639e:	46 95       	lsr	r20
    63a0:	37 95       	ror	r19
    63a2:	27 95       	ror	r18
    63a4:	a7 95       	ror	r26
    63a6:	f0 40       	sbci	r31, 0x00	; 0
    63a8:	53 95       	inc	r21
    63aa:	c9 f7       	brne	.-14     	; 0x639e <__addsf3x+0x4e>
    63ac:	7e f4       	brtc	.+30     	; 0x63cc <__addsf3x+0x7c>
    63ae:	1f 16       	cp	r1, r31
    63b0:	ba 0b       	sbc	r27, r26
    63b2:	62 0b       	sbc	r22, r18
    63b4:	73 0b       	sbc	r23, r19
    63b6:	84 0b       	sbc	r24, r20
    63b8:	ba f0       	brmi	.+46     	; 0x63e8 <__addsf3x+0x98>
    63ba:	91 50       	subi	r25, 0x01	; 1
    63bc:	a1 f0       	breq	.+40     	; 0x63e6 <__addsf3x+0x96>
    63be:	ff 0f       	add	r31, r31
    63c0:	bb 1f       	adc	r27, r27
    63c2:	66 1f       	adc	r22, r22
    63c4:	77 1f       	adc	r23, r23
    63c6:	88 1f       	adc	r24, r24
    63c8:	c2 f7       	brpl	.-16     	; 0x63ba <__addsf3x+0x6a>
    63ca:	0e c0       	rjmp	.+28     	; 0x63e8 <__addsf3x+0x98>
    63cc:	ba 0f       	add	r27, r26
    63ce:	62 1f       	adc	r22, r18
    63d0:	73 1f       	adc	r23, r19
    63d2:	84 1f       	adc	r24, r20
    63d4:	48 f4       	brcc	.+18     	; 0x63e8 <__addsf3x+0x98>
    63d6:	87 95       	ror	r24
    63d8:	77 95       	ror	r23
    63da:	67 95       	ror	r22
    63dc:	b7 95       	ror	r27
    63de:	f7 95       	ror	r31
    63e0:	9e 3f       	cpi	r25, 0xFE	; 254
    63e2:	08 f0       	brcs	.+2      	; 0x63e6 <__addsf3x+0x96>
    63e4:	b3 cf       	rjmp	.-154    	; 0x634c <__addsf3+0x1e>
    63e6:	93 95       	inc	r25
    63e8:	88 0f       	add	r24, r24
    63ea:	08 f0       	brcs	.+2      	; 0x63ee <__addsf3x+0x9e>
    63ec:	99 27       	eor	r25, r25
    63ee:	ee 0f       	add	r30, r30
    63f0:	97 95       	ror	r25
    63f2:	87 95       	ror	r24
    63f4:	08 95       	ret

000063f6 <__divsf3>:
    63f6:	0c d0       	rcall	.+24     	; 0x6410 <__divsf3x>
    63f8:	eb c0       	rjmp	.+470    	; 0x65d0 <__fp_round>
    63fa:	e3 d0       	rcall	.+454    	; 0x65c2 <__fp_pscB>
    63fc:	40 f0       	brcs	.+16     	; 0x640e <__divsf3+0x18>
    63fe:	da d0       	rcall	.+436    	; 0x65b4 <__fp_pscA>
    6400:	30 f0       	brcs	.+12     	; 0x640e <__divsf3+0x18>
    6402:	21 f4       	brne	.+8      	; 0x640c <__divsf3+0x16>
    6404:	5f 3f       	cpi	r21, 0xFF	; 255
    6406:	19 f0       	breq	.+6      	; 0x640e <__divsf3+0x18>
    6408:	cc c0       	rjmp	.+408    	; 0x65a2 <__fp_inf>
    640a:	51 11       	cpse	r21, r1
    640c:	15 c1       	rjmp	.+554    	; 0x6638 <__fp_szero>
    640e:	cf c0       	rjmp	.+414    	; 0x65ae <__fp_nan>

00006410 <__divsf3x>:
    6410:	f0 d0       	rcall	.+480    	; 0x65f2 <__fp_split3>
    6412:	98 f3       	brcs	.-26     	; 0x63fa <__divsf3+0x4>

00006414 <__divsf3_pse>:
    6414:	99 23       	and	r25, r25
    6416:	c9 f3       	breq	.-14     	; 0x640a <__divsf3+0x14>
    6418:	55 23       	and	r21, r21
    641a:	b1 f3       	breq	.-20     	; 0x6408 <__divsf3+0x12>
    641c:	95 1b       	sub	r25, r21
    641e:	55 0b       	sbc	r21, r21
    6420:	bb 27       	eor	r27, r27
    6422:	aa 27       	eor	r26, r26
    6424:	62 17       	cp	r22, r18
    6426:	73 07       	cpc	r23, r19
    6428:	84 07       	cpc	r24, r20
    642a:	38 f0       	brcs	.+14     	; 0x643a <__divsf3_pse+0x26>
    642c:	9f 5f       	subi	r25, 0xFF	; 255
    642e:	5f 4f       	sbci	r21, 0xFF	; 255
    6430:	22 0f       	add	r18, r18
    6432:	33 1f       	adc	r19, r19
    6434:	44 1f       	adc	r20, r20
    6436:	aa 1f       	adc	r26, r26
    6438:	a9 f3       	breq	.-22     	; 0x6424 <__divsf3_pse+0x10>
    643a:	33 d0       	rcall	.+102    	; 0x64a2 <__divsf3_pse+0x8e>
    643c:	0e 2e       	mov	r0, r30
    643e:	3a f0       	brmi	.+14     	; 0x644e <__divsf3_pse+0x3a>
    6440:	e0 e8       	ldi	r30, 0x80	; 128
    6442:	30 d0       	rcall	.+96     	; 0x64a4 <__divsf3_pse+0x90>
    6444:	91 50       	subi	r25, 0x01	; 1
    6446:	50 40       	sbci	r21, 0x00	; 0
    6448:	e6 95       	lsr	r30
    644a:	00 1c       	adc	r0, r0
    644c:	ca f7       	brpl	.-14     	; 0x6440 <__divsf3_pse+0x2c>
    644e:	29 d0       	rcall	.+82     	; 0x64a2 <__divsf3_pse+0x8e>
    6450:	fe 2f       	mov	r31, r30
    6452:	27 d0       	rcall	.+78     	; 0x64a2 <__divsf3_pse+0x8e>
    6454:	66 0f       	add	r22, r22
    6456:	77 1f       	adc	r23, r23
    6458:	88 1f       	adc	r24, r24
    645a:	bb 1f       	adc	r27, r27
    645c:	26 17       	cp	r18, r22
    645e:	37 07       	cpc	r19, r23
    6460:	48 07       	cpc	r20, r24
    6462:	ab 07       	cpc	r26, r27
    6464:	b0 e8       	ldi	r27, 0x80	; 128
    6466:	09 f0       	breq	.+2      	; 0x646a <__divsf3_pse+0x56>
    6468:	bb 0b       	sbc	r27, r27
    646a:	80 2d       	mov	r24, r0
    646c:	bf 01       	movw	r22, r30
    646e:	ff 27       	eor	r31, r31
    6470:	93 58       	subi	r25, 0x83	; 131
    6472:	5f 4f       	sbci	r21, 0xFF	; 255
    6474:	2a f0       	brmi	.+10     	; 0x6480 <__divsf3_pse+0x6c>
    6476:	9e 3f       	cpi	r25, 0xFE	; 254
    6478:	51 05       	cpc	r21, r1
    647a:	68 f0       	brcs	.+26     	; 0x6496 <__divsf3_pse+0x82>
    647c:	92 c0       	rjmp	.+292    	; 0x65a2 <__fp_inf>
    647e:	dc c0       	rjmp	.+440    	; 0x6638 <__fp_szero>
    6480:	5f 3f       	cpi	r21, 0xFF	; 255
    6482:	ec f3       	brlt	.-6      	; 0x647e <__divsf3_pse+0x6a>
    6484:	98 3e       	cpi	r25, 0xE8	; 232
    6486:	dc f3       	brlt	.-10     	; 0x647e <__divsf3_pse+0x6a>
    6488:	86 95       	lsr	r24
    648a:	77 95       	ror	r23
    648c:	67 95       	ror	r22
    648e:	b7 95       	ror	r27
    6490:	f7 95       	ror	r31
    6492:	9f 5f       	subi	r25, 0xFF	; 255
    6494:	c9 f7       	brne	.-14     	; 0x6488 <__divsf3_pse+0x74>
    6496:	88 0f       	add	r24, r24
    6498:	91 1d       	adc	r25, r1
    649a:	96 95       	lsr	r25
    649c:	87 95       	ror	r24
    649e:	97 f9       	bld	r25, 7
    64a0:	08 95       	ret
    64a2:	e1 e0       	ldi	r30, 0x01	; 1
    64a4:	66 0f       	add	r22, r22
    64a6:	77 1f       	adc	r23, r23
    64a8:	88 1f       	adc	r24, r24
    64aa:	bb 1f       	adc	r27, r27
    64ac:	62 17       	cp	r22, r18
    64ae:	73 07       	cpc	r23, r19
    64b0:	84 07       	cpc	r24, r20
    64b2:	ba 07       	cpc	r27, r26
    64b4:	20 f0       	brcs	.+8      	; 0x64be <__divsf3_pse+0xaa>
    64b6:	62 1b       	sub	r22, r18
    64b8:	73 0b       	sbc	r23, r19
    64ba:	84 0b       	sbc	r24, r20
    64bc:	ba 0b       	sbc	r27, r26
    64be:	ee 1f       	adc	r30, r30
    64c0:	88 f7       	brcc	.-30     	; 0x64a4 <__divsf3_pse+0x90>
    64c2:	e0 95       	com	r30
    64c4:	08 95       	ret

000064c6 <__fixsfsi>:
    64c6:	04 d0       	rcall	.+8      	; 0x64d0 <__fixunssfsi>
    64c8:	68 94       	set
    64ca:	b1 11       	cpse	r27, r1
    64cc:	b5 c0       	rjmp	.+362    	; 0x6638 <__fp_szero>
    64ce:	08 95       	ret

000064d0 <__fixunssfsi>:
    64d0:	98 d0       	rcall	.+304    	; 0x6602 <__fp_splitA>
    64d2:	88 f0       	brcs	.+34     	; 0x64f6 <__fixunssfsi+0x26>
    64d4:	9f 57       	subi	r25, 0x7F	; 127
    64d6:	90 f0       	brcs	.+36     	; 0x64fc <__fixunssfsi+0x2c>
    64d8:	b9 2f       	mov	r27, r25
    64da:	99 27       	eor	r25, r25
    64dc:	b7 51       	subi	r27, 0x17	; 23
    64de:	a0 f0       	brcs	.+40     	; 0x6508 <__fixunssfsi+0x38>
    64e0:	d1 f0       	breq	.+52     	; 0x6516 <__fixunssfsi+0x46>
    64e2:	66 0f       	add	r22, r22
    64e4:	77 1f       	adc	r23, r23
    64e6:	88 1f       	adc	r24, r24
    64e8:	99 1f       	adc	r25, r25
    64ea:	1a f0       	brmi	.+6      	; 0x64f2 <__fixunssfsi+0x22>
    64ec:	ba 95       	dec	r27
    64ee:	c9 f7       	brne	.-14     	; 0x64e2 <__fixunssfsi+0x12>
    64f0:	12 c0       	rjmp	.+36     	; 0x6516 <__fixunssfsi+0x46>
    64f2:	b1 30       	cpi	r27, 0x01	; 1
    64f4:	81 f0       	breq	.+32     	; 0x6516 <__fixunssfsi+0x46>
    64f6:	9f d0       	rcall	.+318    	; 0x6636 <__fp_zero>
    64f8:	b1 e0       	ldi	r27, 0x01	; 1
    64fa:	08 95       	ret
    64fc:	9c c0       	rjmp	.+312    	; 0x6636 <__fp_zero>
    64fe:	67 2f       	mov	r22, r23
    6500:	78 2f       	mov	r23, r24
    6502:	88 27       	eor	r24, r24
    6504:	b8 5f       	subi	r27, 0xF8	; 248
    6506:	39 f0       	breq	.+14     	; 0x6516 <__fixunssfsi+0x46>
    6508:	b9 3f       	cpi	r27, 0xF9	; 249
    650a:	cc f3       	brlt	.-14     	; 0x64fe <__fixunssfsi+0x2e>
    650c:	86 95       	lsr	r24
    650e:	77 95       	ror	r23
    6510:	67 95       	ror	r22
    6512:	b3 95       	inc	r27
    6514:	d9 f7       	brne	.-10     	; 0x650c <__fixunssfsi+0x3c>
    6516:	3e f4       	brtc	.+14     	; 0x6526 <__fixunssfsi+0x56>
    6518:	90 95       	com	r25
    651a:	80 95       	com	r24
    651c:	70 95       	com	r23
    651e:	61 95       	neg	r22
    6520:	7f 4f       	sbci	r23, 0xFF	; 255
    6522:	8f 4f       	sbci	r24, 0xFF	; 255
    6524:	9f 4f       	sbci	r25, 0xFF	; 255
    6526:	08 95       	ret

00006528 <__floatunsisf>:
    6528:	e8 94       	clt
    652a:	09 c0       	rjmp	.+18     	; 0x653e <__floatsisf+0x12>

0000652c <__floatsisf>:
    652c:	97 fb       	bst	r25, 7
    652e:	3e f4       	brtc	.+14     	; 0x653e <__floatsisf+0x12>
    6530:	90 95       	com	r25
    6532:	80 95       	com	r24
    6534:	70 95       	com	r23
    6536:	61 95       	neg	r22
    6538:	7f 4f       	sbci	r23, 0xFF	; 255
    653a:	8f 4f       	sbci	r24, 0xFF	; 255
    653c:	9f 4f       	sbci	r25, 0xFF	; 255
    653e:	99 23       	and	r25, r25
    6540:	a9 f0       	breq	.+42     	; 0x656c <__floatsisf+0x40>
    6542:	f9 2f       	mov	r31, r25
    6544:	96 e9       	ldi	r25, 0x96	; 150
    6546:	bb 27       	eor	r27, r27
    6548:	93 95       	inc	r25
    654a:	f6 95       	lsr	r31
    654c:	87 95       	ror	r24
    654e:	77 95       	ror	r23
    6550:	67 95       	ror	r22
    6552:	b7 95       	ror	r27
    6554:	f1 11       	cpse	r31, r1
    6556:	f8 cf       	rjmp	.-16     	; 0x6548 <__floatsisf+0x1c>
    6558:	fa f4       	brpl	.+62     	; 0x6598 <__floatsisf+0x6c>
    655a:	bb 0f       	add	r27, r27
    655c:	11 f4       	brne	.+4      	; 0x6562 <__floatsisf+0x36>
    655e:	60 ff       	sbrs	r22, 0
    6560:	1b c0       	rjmp	.+54     	; 0x6598 <__floatsisf+0x6c>
    6562:	6f 5f       	subi	r22, 0xFF	; 255
    6564:	7f 4f       	sbci	r23, 0xFF	; 255
    6566:	8f 4f       	sbci	r24, 0xFF	; 255
    6568:	9f 4f       	sbci	r25, 0xFF	; 255
    656a:	16 c0       	rjmp	.+44     	; 0x6598 <__floatsisf+0x6c>
    656c:	88 23       	and	r24, r24
    656e:	11 f0       	breq	.+4      	; 0x6574 <__floatsisf+0x48>
    6570:	96 e9       	ldi	r25, 0x96	; 150
    6572:	11 c0       	rjmp	.+34     	; 0x6596 <__floatsisf+0x6a>
    6574:	77 23       	and	r23, r23
    6576:	21 f0       	breq	.+8      	; 0x6580 <__floatsisf+0x54>
    6578:	9e e8       	ldi	r25, 0x8E	; 142
    657a:	87 2f       	mov	r24, r23
    657c:	76 2f       	mov	r23, r22
    657e:	05 c0       	rjmp	.+10     	; 0x658a <__floatsisf+0x5e>
    6580:	66 23       	and	r22, r22
    6582:	71 f0       	breq	.+28     	; 0x65a0 <__floatsisf+0x74>
    6584:	96 e8       	ldi	r25, 0x86	; 134
    6586:	86 2f       	mov	r24, r22
    6588:	70 e0       	ldi	r23, 0x00	; 0
    658a:	60 e0       	ldi	r22, 0x00	; 0
    658c:	2a f0       	brmi	.+10     	; 0x6598 <__floatsisf+0x6c>
    658e:	9a 95       	dec	r25
    6590:	66 0f       	add	r22, r22
    6592:	77 1f       	adc	r23, r23
    6594:	88 1f       	adc	r24, r24
    6596:	da f7       	brpl	.-10     	; 0x658e <__floatsisf+0x62>
    6598:	88 0f       	add	r24, r24
    659a:	96 95       	lsr	r25
    659c:	87 95       	ror	r24
    659e:	97 f9       	bld	r25, 7
    65a0:	08 95       	ret

000065a2 <__fp_inf>:
    65a2:	97 f9       	bld	r25, 7
    65a4:	9f 67       	ori	r25, 0x7F	; 127
    65a6:	80 e8       	ldi	r24, 0x80	; 128
    65a8:	70 e0       	ldi	r23, 0x00	; 0
    65aa:	60 e0       	ldi	r22, 0x00	; 0
    65ac:	08 95       	ret

000065ae <__fp_nan>:
    65ae:	9f ef       	ldi	r25, 0xFF	; 255
    65b0:	80 ec       	ldi	r24, 0xC0	; 192
    65b2:	08 95       	ret

000065b4 <__fp_pscA>:
    65b4:	00 24       	eor	r0, r0
    65b6:	0a 94       	dec	r0
    65b8:	16 16       	cp	r1, r22
    65ba:	17 06       	cpc	r1, r23
    65bc:	18 06       	cpc	r1, r24
    65be:	09 06       	cpc	r0, r25
    65c0:	08 95       	ret

000065c2 <__fp_pscB>:
    65c2:	00 24       	eor	r0, r0
    65c4:	0a 94       	dec	r0
    65c6:	12 16       	cp	r1, r18
    65c8:	13 06       	cpc	r1, r19
    65ca:	14 06       	cpc	r1, r20
    65cc:	05 06       	cpc	r0, r21
    65ce:	08 95       	ret

000065d0 <__fp_round>:
    65d0:	09 2e       	mov	r0, r25
    65d2:	03 94       	inc	r0
    65d4:	00 0c       	add	r0, r0
    65d6:	11 f4       	brne	.+4      	; 0x65dc <__fp_round+0xc>
    65d8:	88 23       	and	r24, r24
    65da:	52 f0       	brmi	.+20     	; 0x65f0 <__fp_round+0x20>
    65dc:	bb 0f       	add	r27, r27
    65de:	40 f4       	brcc	.+16     	; 0x65f0 <__fp_round+0x20>
    65e0:	bf 2b       	or	r27, r31
    65e2:	11 f4       	brne	.+4      	; 0x65e8 <__fp_round+0x18>
    65e4:	60 ff       	sbrs	r22, 0
    65e6:	04 c0       	rjmp	.+8      	; 0x65f0 <__fp_round+0x20>
    65e8:	6f 5f       	subi	r22, 0xFF	; 255
    65ea:	7f 4f       	sbci	r23, 0xFF	; 255
    65ec:	8f 4f       	sbci	r24, 0xFF	; 255
    65ee:	9f 4f       	sbci	r25, 0xFF	; 255
    65f0:	08 95       	ret

000065f2 <__fp_split3>:
    65f2:	57 fd       	sbrc	r21, 7
    65f4:	90 58       	subi	r25, 0x80	; 128
    65f6:	44 0f       	add	r20, r20
    65f8:	55 1f       	adc	r21, r21
    65fa:	59 f0       	breq	.+22     	; 0x6612 <__fp_splitA+0x10>
    65fc:	5f 3f       	cpi	r21, 0xFF	; 255
    65fe:	71 f0       	breq	.+28     	; 0x661c <__fp_splitA+0x1a>
    6600:	47 95       	ror	r20

00006602 <__fp_splitA>:
    6602:	88 0f       	add	r24, r24
    6604:	97 fb       	bst	r25, 7
    6606:	99 1f       	adc	r25, r25
    6608:	61 f0       	breq	.+24     	; 0x6622 <__fp_splitA+0x20>
    660a:	9f 3f       	cpi	r25, 0xFF	; 255
    660c:	79 f0       	breq	.+30     	; 0x662c <__fp_splitA+0x2a>
    660e:	87 95       	ror	r24
    6610:	08 95       	ret
    6612:	12 16       	cp	r1, r18
    6614:	13 06       	cpc	r1, r19
    6616:	14 06       	cpc	r1, r20
    6618:	55 1f       	adc	r21, r21
    661a:	f2 cf       	rjmp	.-28     	; 0x6600 <__fp_split3+0xe>
    661c:	46 95       	lsr	r20
    661e:	f1 df       	rcall	.-30     	; 0x6602 <__fp_splitA>
    6620:	08 c0       	rjmp	.+16     	; 0x6632 <__fp_splitA+0x30>
    6622:	16 16       	cp	r1, r22
    6624:	17 06       	cpc	r1, r23
    6626:	18 06       	cpc	r1, r24
    6628:	99 1f       	adc	r25, r25
    662a:	f1 cf       	rjmp	.-30     	; 0x660e <__fp_splitA+0xc>
    662c:	86 95       	lsr	r24
    662e:	71 05       	cpc	r23, r1
    6630:	61 05       	cpc	r22, r1
    6632:	08 94       	sec
    6634:	08 95       	ret

00006636 <__fp_zero>:
    6636:	e8 94       	clt

00006638 <__fp_szero>:
    6638:	bb 27       	eor	r27, r27
    663a:	66 27       	eor	r22, r22
    663c:	77 27       	eor	r23, r23
    663e:	cb 01       	movw	r24, r22
    6640:	97 f9       	bld	r25, 7
    6642:	08 95       	ret

00006644 <__mulsf3>:
    6644:	0b d0       	rcall	.+22     	; 0x665c <__mulsf3x>
    6646:	c4 cf       	rjmp	.-120    	; 0x65d0 <__fp_round>
    6648:	b5 df       	rcall	.-150    	; 0x65b4 <__fp_pscA>
    664a:	28 f0       	brcs	.+10     	; 0x6656 <__mulsf3+0x12>
    664c:	ba df       	rcall	.-140    	; 0x65c2 <__fp_pscB>
    664e:	18 f0       	brcs	.+6      	; 0x6656 <__mulsf3+0x12>
    6650:	95 23       	and	r25, r21
    6652:	09 f0       	breq	.+2      	; 0x6656 <__mulsf3+0x12>
    6654:	a6 cf       	rjmp	.-180    	; 0x65a2 <__fp_inf>
    6656:	ab cf       	rjmp	.-170    	; 0x65ae <__fp_nan>
    6658:	11 24       	eor	r1, r1
    665a:	ee cf       	rjmp	.-36     	; 0x6638 <__fp_szero>

0000665c <__mulsf3x>:
    665c:	ca df       	rcall	.-108    	; 0x65f2 <__fp_split3>
    665e:	a0 f3       	brcs	.-24     	; 0x6648 <__mulsf3+0x4>

00006660 <__mulsf3_pse>:
    6660:	95 9f       	mul	r25, r21
    6662:	d1 f3       	breq	.-12     	; 0x6658 <__mulsf3+0x14>
    6664:	95 0f       	add	r25, r21
    6666:	50 e0       	ldi	r21, 0x00	; 0
    6668:	55 1f       	adc	r21, r21
    666a:	62 9f       	mul	r22, r18
    666c:	f0 01       	movw	r30, r0
    666e:	72 9f       	mul	r23, r18
    6670:	bb 27       	eor	r27, r27
    6672:	f0 0d       	add	r31, r0
    6674:	b1 1d       	adc	r27, r1
    6676:	63 9f       	mul	r22, r19
    6678:	aa 27       	eor	r26, r26
    667a:	f0 0d       	add	r31, r0
    667c:	b1 1d       	adc	r27, r1
    667e:	aa 1f       	adc	r26, r26
    6680:	64 9f       	mul	r22, r20
    6682:	66 27       	eor	r22, r22
    6684:	b0 0d       	add	r27, r0
    6686:	a1 1d       	adc	r26, r1
    6688:	66 1f       	adc	r22, r22
    668a:	82 9f       	mul	r24, r18
    668c:	22 27       	eor	r18, r18
    668e:	b0 0d       	add	r27, r0
    6690:	a1 1d       	adc	r26, r1
    6692:	62 1f       	adc	r22, r18
    6694:	73 9f       	mul	r23, r19
    6696:	b0 0d       	add	r27, r0
    6698:	a1 1d       	adc	r26, r1
    669a:	62 1f       	adc	r22, r18
    669c:	83 9f       	mul	r24, r19
    669e:	a0 0d       	add	r26, r0
    66a0:	61 1d       	adc	r22, r1
    66a2:	22 1f       	adc	r18, r18
    66a4:	74 9f       	mul	r23, r20
    66a6:	33 27       	eor	r19, r19
    66a8:	a0 0d       	add	r26, r0
    66aa:	61 1d       	adc	r22, r1
    66ac:	23 1f       	adc	r18, r19
    66ae:	84 9f       	mul	r24, r20
    66b0:	60 0d       	add	r22, r0
    66b2:	21 1d       	adc	r18, r1
    66b4:	82 2f       	mov	r24, r18
    66b6:	76 2f       	mov	r23, r22
    66b8:	6a 2f       	mov	r22, r26
    66ba:	11 24       	eor	r1, r1
    66bc:	9f 57       	subi	r25, 0x7F	; 127
    66be:	50 40       	sbci	r21, 0x00	; 0
    66c0:	8a f0       	brmi	.+34     	; 0x66e4 <__mulsf3_pse+0x84>
    66c2:	e1 f0       	breq	.+56     	; 0x66fc <__mulsf3_pse+0x9c>
    66c4:	88 23       	and	r24, r24
    66c6:	4a f0       	brmi	.+18     	; 0x66da <__mulsf3_pse+0x7a>
    66c8:	ee 0f       	add	r30, r30
    66ca:	ff 1f       	adc	r31, r31
    66cc:	bb 1f       	adc	r27, r27
    66ce:	66 1f       	adc	r22, r22
    66d0:	77 1f       	adc	r23, r23
    66d2:	88 1f       	adc	r24, r24
    66d4:	91 50       	subi	r25, 0x01	; 1
    66d6:	50 40       	sbci	r21, 0x00	; 0
    66d8:	a9 f7       	brne	.-22     	; 0x66c4 <__mulsf3_pse+0x64>
    66da:	9e 3f       	cpi	r25, 0xFE	; 254
    66dc:	51 05       	cpc	r21, r1
    66de:	70 f0       	brcs	.+28     	; 0x66fc <__mulsf3_pse+0x9c>
    66e0:	60 cf       	rjmp	.-320    	; 0x65a2 <__fp_inf>
    66e2:	aa cf       	rjmp	.-172    	; 0x6638 <__fp_szero>
    66e4:	5f 3f       	cpi	r21, 0xFF	; 255
    66e6:	ec f3       	brlt	.-6      	; 0x66e2 <__mulsf3_pse+0x82>
    66e8:	98 3e       	cpi	r25, 0xE8	; 232
    66ea:	dc f3       	brlt	.-10     	; 0x66e2 <__mulsf3_pse+0x82>
    66ec:	86 95       	lsr	r24
    66ee:	77 95       	ror	r23
    66f0:	67 95       	ror	r22
    66f2:	b7 95       	ror	r27
    66f4:	f7 95       	ror	r31
    66f6:	e7 95       	ror	r30
    66f8:	9f 5f       	subi	r25, 0xFF	; 255
    66fa:	c1 f7       	brne	.-16     	; 0x66ec <__mulsf3_pse+0x8c>
    66fc:	fe 2b       	or	r31, r30
    66fe:	88 0f       	add	r24, r24
    6700:	91 1d       	adc	r25, r1
    6702:	96 95       	lsr	r25
    6704:	87 95       	ror	r24
    6706:	97 f9       	bld	r25, 7
    6708:	08 95       	ret

0000670a <__divmodhi4>:
    670a:	97 fb       	bst	r25, 7
    670c:	07 2e       	mov	r0, r23
    670e:	16 f4       	brtc	.+4      	; 0x6714 <__divmodhi4+0xa>
    6710:	00 94       	com	r0
    6712:	06 d0       	rcall	.+12     	; 0x6720 <__divmodhi4_neg1>
    6714:	77 fd       	sbrc	r23, 7
    6716:	08 d0       	rcall	.+16     	; 0x6728 <__divmodhi4_neg2>
    6718:	35 d0       	rcall	.+106    	; 0x6784 <__udivmodhi4>
    671a:	07 fc       	sbrc	r0, 7
    671c:	05 d0       	rcall	.+10     	; 0x6728 <__divmodhi4_neg2>
    671e:	3e f4       	brtc	.+14     	; 0x672e <__divmodhi4_exit>

00006720 <__divmodhi4_neg1>:
    6720:	90 95       	com	r25
    6722:	81 95       	neg	r24
    6724:	9f 4f       	sbci	r25, 0xFF	; 255
    6726:	08 95       	ret

00006728 <__divmodhi4_neg2>:
    6728:	70 95       	com	r23
    672a:	61 95       	neg	r22
    672c:	7f 4f       	sbci	r23, 0xFF	; 255

0000672e <__divmodhi4_exit>:
    672e:	08 95       	ret

00006730 <__udivmodsi4>:
    6730:	a1 e2       	ldi	r26, 0x21	; 33
    6732:	1a 2e       	mov	r1, r26
    6734:	aa 1b       	sub	r26, r26
    6736:	bb 1b       	sub	r27, r27
    6738:	fd 01       	movw	r30, r26
    673a:	0d c0       	rjmp	.+26     	; 0x6756 <__udivmodsi4_ep>

0000673c <__udivmodsi4_loop>:
    673c:	aa 1f       	adc	r26, r26
    673e:	bb 1f       	adc	r27, r27
    6740:	ee 1f       	adc	r30, r30
    6742:	ff 1f       	adc	r31, r31
    6744:	a2 17       	cp	r26, r18
    6746:	b3 07       	cpc	r27, r19
    6748:	e4 07       	cpc	r30, r20
    674a:	f5 07       	cpc	r31, r21
    674c:	20 f0       	brcs	.+8      	; 0x6756 <__udivmodsi4_ep>
    674e:	a2 1b       	sub	r26, r18
    6750:	b3 0b       	sbc	r27, r19
    6752:	e4 0b       	sbc	r30, r20
    6754:	f5 0b       	sbc	r31, r21

00006756 <__udivmodsi4_ep>:
    6756:	66 1f       	adc	r22, r22
    6758:	77 1f       	adc	r23, r23
    675a:	88 1f       	adc	r24, r24
    675c:	99 1f       	adc	r25, r25
    675e:	1a 94       	dec	r1
    6760:	69 f7       	brne	.-38     	; 0x673c <__udivmodsi4_loop>
    6762:	60 95       	com	r22
    6764:	70 95       	com	r23
    6766:	80 95       	com	r24
    6768:	90 95       	com	r25
    676a:	9b 01       	movw	r18, r22
    676c:	ac 01       	movw	r20, r24
    676e:	bd 01       	movw	r22, r26
    6770:	cf 01       	movw	r24, r30
    6772:	08 95       	ret

00006774 <__tablejump2__>:
    6774:	ee 0f       	add	r30, r30
    6776:	ff 1f       	adc	r31, r31
    6778:	88 1f       	adc	r24, r24
    677a:	8b bf       	out	0x3b, r24	; 59
    677c:	07 90       	elpm	r0, Z+
    677e:	f6 91       	elpm	r31, Z
    6780:	e0 2d       	mov	r30, r0
    6782:	19 94       	eijmp

00006784 <__udivmodhi4>:
    6784:	aa 1b       	sub	r26, r26
    6786:	bb 1b       	sub	r27, r27
    6788:	51 e1       	ldi	r21, 0x11	; 17
    678a:	07 c0       	rjmp	.+14     	; 0x679a <__udivmodhi4_ep>

0000678c <__udivmodhi4_loop>:
    678c:	aa 1f       	adc	r26, r26
    678e:	bb 1f       	adc	r27, r27
    6790:	a6 17       	cp	r26, r22
    6792:	b7 07       	cpc	r27, r23
    6794:	10 f0       	brcs	.+4      	; 0x679a <__udivmodhi4_ep>
    6796:	a6 1b       	sub	r26, r22
    6798:	b7 0b       	sbc	r27, r23

0000679a <__udivmodhi4_ep>:
    679a:	88 1f       	adc	r24, r24
    679c:	99 1f       	adc	r25, r25
    679e:	5a 95       	dec	r21
    67a0:	a9 f7       	brne	.-22     	; 0x678c <__udivmodhi4_loop>
    67a2:	80 95       	com	r24
    67a4:	90 95       	com	r25
    67a6:	bc 01       	movw	r22, r24
    67a8:	cd 01       	movw	r24, r26
    67aa:	08 95       	ret

000067ac <malloc>:
    67ac:	0f 93       	push	r16
    67ae:	1f 93       	push	r17
    67b0:	cf 93       	push	r28
    67b2:	df 93       	push	r29
    67b4:	82 30       	cpi	r24, 0x02	; 2
    67b6:	91 05       	cpc	r25, r1
    67b8:	10 f4       	brcc	.+4      	; 0x67be <malloc+0x12>
    67ba:	82 e0       	ldi	r24, 0x02	; 2
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	e0 91 51 19 	lds	r30, 0x1951	; 0x801951 <__flp>
    67c2:	f0 91 52 19 	lds	r31, 0x1952	; 0x801952 <__flp+0x1>
    67c6:	20 e0       	ldi	r18, 0x00	; 0
    67c8:	30 e0       	ldi	r19, 0x00	; 0
    67ca:	a0 e0       	ldi	r26, 0x00	; 0
    67cc:	b0 e0       	ldi	r27, 0x00	; 0
    67ce:	30 97       	sbiw	r30, 0x00	; 0
    67d0:	19 f1       	breq	.+70     	; 0x6818 <malloc+0x6c>
    67d2:	40 81       	ld	r20, Z
    67d4:	51 81       	ldd	r21, Z+1	; 0x01
    67d6:	02 81       	ldd	r16, Z+2	; 0x02
    67d8:	13 81       	ldd	r17, Z+3	; 0x03
    67da:	48 17       	cp	r20, r24
    67dc:	59 07       	cpc	r21, r25
    67de:	c8 f0       	brcs	.+50     	; 0x6812 <malloc+0x66>
    67e0:	84 17       	cp	r24, r20
    67e2:	95 07       	cpc	r25, r21
    67e4:	69 f4       	brne	.+26     	; 0x6800 <malloc+0x54>
    67e6:	10 97       	sbiw	r26, 0x00	; 0
    67e8:	31 f0       	breq	.+12     	; 0x67f6 <malloc+0x4a>
    67ea:	12 96       	adiw	r26, 0x02	; 2
    67ec:	0c 93       	st	X, r16
    67ee:	12 97       	sbiw	r26, 0x02	; 2
    67f0:	13 96       	adiw	r26, 0x03	; 3
    67f2:	1c 93       	st	X, r17
    67f4:	27 c0       	rjmp	.+78     	; 0x6844 <malloc+0x98>
    67f6:	00 93 51 19 	sts	0x1951, r16	; 0x801951 <__flp>
    67fa:	10 93 52 19 	sts	0x1952, r17	; 0x801952 <__flp+0x1>
    67fe:	22 c0       	rjmp	.+68     	; 0x6844 <malloc+0x98>
    6800:	21 15       	cp	r18, r1
    6802:	31 05       	cpc	r19, r1
    6804:	19 f0       	breq	.+6      	; 0x680c <malloc+0x60>
    6806:	42 17       	cp	r20, r18
    6808:	53 07       	cpc	r21, r19
    680a:	18 f4       	brcc	.+6      	; 0x6812 <malloc+0x66>
    680c:	9a 01       	movw	r18, r20
    680e:	bd 01       	movw	r22, r26
    6810:	ef 01       	movw	r28, r30
    6812:	df 01       	movw	r26, r30
    6814:	f8 01       	movw	r30, r16
    6816:	db cf       	rjmp	.-74     	; 0x67ce <malloc+0x22>
    6818:	21 15       	cp	r18, r1
    681a:	31 05       	cpc	r19, r1
    681c:	f9 f0       	breq	.+62     	; 0x685c <malloc+0xb0>
    681e:	28 1b       	sub	r18, r24
    6820:	39 0b       	sbc	r19, r25
    6822:	24 30       	cpi	r18, 0x04	; 4
    6824:	31 05       	cpc	r19, r1
    6826:	80 f4       	brcc	.+32     	; 0x6848 <malloc+0x9c>
    6828:	8a 81       	ldd	r24, Y+2	; 0x02
    682a:	9b 81       	ldd	r25, Y+3	; 0x03
    682c:	61 15       	cp	r22, r1
    682e:	71 05       	cpc	r23, r1
    6830:	21 f0       	breq	.+8      	; 0x683a <malloc+0x8e>
    6832:	fb 01       	movw	r30, r22
    6834:	93 83       	std	Z+3, r25	; 0x03
    6836:	82 83       	std	Z+2, r24	; 0x02
    6838:	04 c0       	rjmp	.+8      	; 0x6842 <malloc+0x96>
    683a:	90 93 52 19 	sts	0x1952, r25	; 0x801952 <__flp+0x1>
    683e:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <__flp>
    6842:	fe 01       	movw	r30, r28
    6844:	32 96       	adiw	r30, 0x02	; 2
    6846:	44 c0       	rjmp	.+136    	; 0x68d0 <malloc+0x124>
    6848:	fe 01       	movw	r30, r28
    684a:	e2 0f       	add	r30, r18
    684c:	f3 1f       	adc	r31, r19
    684e:	81 93       	st	Z+, r24
    6850:	91 93       	st	Z+, r25
    6852:	22 50       	subi	r18, 0x02	; 2
    6854:	31 09       	sbc	r19, r1
    6856:	39 83       	std	Y+1, r19	; 0x01
    6858:	28 83       	st	Y, r18
    685a:	3a c0       	rjmp	.+116    	; 0x68d0 <malloc+0x124>
    685c:	20 91 4f 19 	lds	r18, 0x194F	; 0x80194f <__brkval>
    6860:	30 91 50 19 	lds	r19, 0x1950	; 0x801950 <__brkval+0x1>
    6864:	23 2b       	or	r18, r19
    6866:	41 f4       	brne	.+16     	; 0x6878 <malloc+0xcc>
    6868:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    686c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6870:	30 93 50 19 	sts	0x1950, r19	; 0x801950 <__brkval+0x1>
    6874:	20 93 4f 19 	sts	0x194F, r18	; 0x80194f <__brkval>
    6878:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    687c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6880:	21 15       	cp	r18, r1
    6882:	31 05       	cpc	r19, r1
    6884:	41 f4       	brne	.+16     	; 0x6896 <malloc+0xea>
    6886:	2d b7       	in	r18, 0x3d	; 61
    6888:	3e b7       	in	r19, 0x3e	; 62
    688a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    688e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6892:	24 1b       	sub	r18, r20
    6894:	35 0b       	sbc	r19, r21
    6896:	e0 91 4f 19 	lds	r30, 0x194F	; 0x80194f <__brkval>
    689a:	f0 91 50 19 	lds	r31, 0x1950	; 0x801950 <__brkval+0x1>
    689e:	e2 17       	cp	r30, r18
    68a0:	f3 07       	cpc	r31, r19
    68a2:	a0 f4       	brcc	.+40     	; 0x68cc <malloc+0x120>
    68a4:	2e 1b       	sub	r18, r30
    68a6:	3f 0b       	sbc	r19, r31
    68a8:	28 17       	cp	r18, r24
    68aa:	39 07       	cpc	r19, r25
    68ac:	78 f0       	brcs	.+30     	; 0x68cc <malloc+0x120>
    68ae:	ac 01       	movw	r20, r24
    68b0:	4e 5f       	subi	r20, 0xFE	; 254
    68b2:	5f 4f       	sbci	r21, 0xFF	; 255
    68b4:	24 17       	cp	r18, r20
    68b6:	35 07       	cpc	r19, r21
    68b8:	48 f0       	brcs	.+18     	; 0x68cc <malloc+0x120>
    68ba:	4e 0f       	add	r20, r30
    68bc:	5f 1f       	adc	r21, r31
    68be:	50 93 50 19 	sts	0x1950, r21	; 0x801950 <__brkval+0x1>
    68c2:	40 93 4f 19 	sts	0x194F, r20	; 0x80194f <__brkval>
    68c6:	81 93       	st	Z+, r24
    68c8:	91 93       	st	Z+, r25
    68ca:	02 c0       	rjmp	.+4      	; 0x68d0 <malloc+0x124>
    68cc:	e0 e0       	ldi	r30, 0x00	; 0
    68ce:	f0 e0       	ldi	r31, 0x00	; 0
    68d0:	cf 01       	movw	r24, r30
    68d2:	df 91       	pop	r29
    68d4:	cf 91       	pop	r28
    68d6:	1f 91       	pop	r17
    68d8:	0f 91       	pop	r16
    68da:	08 95       	ret

000068dc <free>:
    68dc:	cf 93       	push	r28
    68de:	df 93       	push	r29
    68e0:	00 97       	sbiw	r24, 0x00	; 0
    68e2:	09 f4       	brne	.+2      	; 0x68e6 <free+0xa>
    68e4:	81 c0       	rjmp	.+258    	; 0x69e8 <free+0x10c>
    68e6:	fc 01       	movw	r30, r24
    68e8:	32 97       	sbiw	r30, 0x02	; 2
    68ea:	13 82       	std	Z+3, r1	; 0x03
    68ec:	12 82       	std	Z+2, r1	; 0x02
    68ee:	a0 91 51 19 	lds	r26, 0x1951	; 0x801951 <__flp>
    68f2:	b0 91 52 19 	lds	r27, 0x1952	; 0x801952 <__flp+0x1>
    68f6:	10 97       	sbiw	r26, 0x00	; 0
    68f8:	81 f4       	brne	.+32     	; 0x691a <free+0x3e>
    68fa:	20 81       	ld	r18, Z
    68fc:	31 81       	ldd	r19, Z+1	; 0x01
    68fe:	82 0f       	add	r24, r18
    6900:	93 1f       	adc	r25, r19
    6902:	20 91 4f 19 	lds	r18, 0x194F	; 0x80194f <__brkval>
    6906:	30 91 50 19 	lds	r19, 0x1950	; 0x801950 <__brkval+0x1>
    690a:	28 17       	cp	r18, r24
    690c:	39 07       	cpc	r19, r25
    690e:	51 f5       	brne	.+84     	; 0x6964 <free+0x88>
    6910:	f0 93 50 19 	sts	0x1950, r31	; 0x801950 <__brkval+0x1>
    6914:	e0 93 4f 19 	sts	0x194F, r30	; 0x80194f <__brkval>
    6918:	67 c0       	rjmp	.+206    	; 0x69e8 <free+0x10c>
    691a:	ed 01       	movw	r28, r26
    691c:	20 e0       	ldi	r18, 0x00	; 0
    691e:	30 e0       	ldi	r19, 0x00	; 0
    6920:	ce 17       	cp	r28, r30
    6922:	df 07       	cpc	r29, r31
    6924:	40 f4       	brcc	.+16     	; 0x6936 <free+0x5a>
    6926:	4a 81       	ldd	r20, Y+2	; 0x02
    6928:	5b 81       	ldd	r21, Y+3	; 0x03
    692a:	9e 01       	movw	r18, r28
    692c:	41 15       	cp	r20, r1
    692e:	51 05       	cpc	r21, r1
    6930:	f1 f0       	breq	.+60     	; 0x696e <free+0x92>
    6932:	ea 01       	movw	r28, r20
    6934:	f5 cf       	rjmp	.-22     	; 0x6920 <free+0x44>
    6936:	d3 83       	std	Z+3, r29	; 0x03
    6938:	c2 83       	std	Z+2, r28	; 0x02
    693a:	40 81       	ld	r20, Z
    693c:	51 81       	ldd	r21, Z+1	; 0x01
    693e:	84 0f       	add	r24, r20
    6940:	95 1f       	adc	r25, r21
    6942:	c8 17       	cp	r28, r24
    6944:	d9 07       	cpc	r29, r25
    6946:	59 f4       	brne	.+22     	; 0x695e <free+0x82>
    6948:	88 81       	ld	r24, Y
    694a:	99 81       	ldd	r25, Y+1	; 0x01
    694c:	84 0f       	add	r24, r20
    694e:	95 1f       	adc	r25, r21
    6950:	02 96       	adiw	r24, 0x02	; 2
    6952:	91 83       	std	Z+1, r25	; 0x01
    6954:	80 83       	st	Z, r24
    6956:	8a 81       	ldd	r24, Y+2	; 0x02
    6958:	9b 81       	ldd	r25, Y+3	; 0x03
    695a:	93 83       	std	Z+3, r25	; 0x03
    695c:	82 83       	std	Z+2, r24	; 0x02
    695e:	21 15       	cp	r18, r1
    6960:	31 05       	cpc	r19, r1
    6962:	29 f4       	brne	.+10     	; 0x696e <free+0x92>
    6964:	f0 93 52 19 	sts	0x1952, r31	; 0x801952 <__flp+0x1>
    6968:	e0 93 51 19 	sts	0x1951, r30	; 0x801951 <__flp>
    696c:	3d c0       	rjmp	.+122    	; 0x69e8 <free+0x10c>
    696e:	e9 01       	movw	r28, r18
    6970:	fb 83       	std	Y+3, r31	; 0x03
    6972:	ea 83       	std	Y+2, r30	; 0x02
    6974:	49 91       	ld	r20, Y+
    6976:	59 91       	ld	r21, Y+
    6978:	c4 0f       	add	r28, r20
    697a:	d5 1f       	adc	r29, r21
    697c:	ec 17       	cp	r30, r28
    697e:	fd 07       	cpc	r31, r29
    6980:	61 f4       	brne	.+24     	; 0x699a <free+0xbe>
    6982:	80 81       	ld	r24, Z
    6984:	91 81       	ldd	r25, Z+1	; 0x01
    6986:	84 0f       	add	r24, r20
    6988:	95 1f       	adc	r25, r21
    698a:	02 96       	adiw	r24, 0x02	; 2
    698c:	e9 01       	movw	r28, r18
    698e:	99 83       	std	Y+1, r25	; 0x01
    6990:	88 83       	st	Y, r24
    6992:	82 81       	ldd	r24, Z+2	; 0x02
    6994:	93 81       	ldd	r25, Z+3	; 0x03
    6996:	9b 83       	std	Y+3, r25	; 0x03
    6998:	8a 83       	std	Y+2, r24	; 0x02
    699a:	e0 e0       	ldi	r30, 0x00	; 0
    699c:	f0 e0       	ldi	r31, 0x00	; 0
    699e:	12 96       	adiw	r26, 0x02	; 2
    69a0:	8d 91       	ld	r24, X+
    69a2:	9c 91       	ld	r25, X
    69a4:	13 97       	sbiw	r26, 0x03	; 3
    69a6:	00 97       	sbiw	r24, 0x00	; 0
    69a8:	19 f0       	breq	.+6      	; 0x69b0 <free+0xd4>
    69aa:	fd 01       	movw	r30, r26
    69ac:	dc 01       	movw	r26, r24
    69ae:	f7 cf       	rjmp	.-18     	; 0x699e <free+0xc2>
    69b0:	8d 91       	ld	r24, X+
    69b2:	9c 91       	ld	r25, X
    69b4:	11 97       	sbiw	r26, 0x01	; 1
    69b6:	9d 01       	movw	r18, r26
    69b8:	2e 5f       	subi	r18, 0xFE	; 254
    69ba:	3f 4f       	sbci	r19, 0xFF	; 255
    69bc:	82 0f       	add	r24, r18
    69be:	93 1f       	adc	r25, r19
    69c0:	20 91 4f 19 	lds	r18, 0x194F	; 0x80194f <__brkval>
    69c4:	30 91 50 19 	lds	r19, 0x1950	; 0x801950 <__brkval+0x1>
    69c8:	28 17       	cp	r18, r24
    69ca:	39 07       	cpc	r19, r25
    69cc:	69 f4       	brne	.+26     	; 0x69e8 <free+0x10c>
    69ce:	30 97       	sbiw	r30, 0x00	; 0
    69d0:	29 f4       	brne	.+10     	; 0x69dc <free+0x100>
    69d2:	10 92 52 19 	sts	0x1952, r1	; 0x801952 <__flp+0x1>
    69d6:	10 92 51 19 	sts	0x1951, r1	; 0x801951 <__flp>
    69da:	02 c0       	rjmp	.+4      	; 0x69e0 <free+0x104>
    69dc:	13 82       	std	Z+3, r1	; 0x03
    69de:	12 82       	std	Z+2, r1	; 0x02
    69e0:	b0 93 50 19 	sts	0x1950, r27	; 0x801950 <__brkval+0x1>
    69e4:	a0 93 4f 19 	sts	0x194F, r26	; 0x80194f <__brkval>
    69e8:	df 91       	pop	r29
    69ea:	cf 91       	pop	r28
    69ec:	08 95       	ret

000069ee <abort>:
    69ee:	81 e0       	ldi	r24, 0x01	; 1
    69f0:	90 e0       	ldi	r25, 0x00	; 0
    69f2:	f8 94       	cli
    69f4:	5a c2       	rjmp	.+1204   	; 0x6eaa <_exit>

000069f6 <__ftoa_engine>:
    69f6:	28 30       	cpi	r18, 0x08	; 8
    69f8:	08 f0       	brcs	.+2      	; 0x69fc <__ftoa_engine+0x6>
    69fa:	27 e0       	ldi	r18, 0x07	; 7
    69fc:	33 27       	eor	r19, r19
    69fe:	da 01       	movw	r26, r20
    6a00:	99 0f       	add	r25, r25
    6a02:	31 1d       	adc	r19, r1
    6a04:	87 fd       	sbrc	r24, 7
    6a06:	91 60       	ori	r25, 0x01	; 1
    6a08:	00 96       	adiw	r24, 0x00	; 0
    6a0a:	61 05       	cpc	r22, r1
    6a0c:	71 05       	cpc	r23, r1
    6a0e:	39 f4       	brne	.+14     	; 0x6a1e <__ftoa_engine+0x28>
    6a10:	32 60       	ori	r19, 0x02	; 2
    6a12:	2e 5f       	subi	r18, 0xFE	; 254
    6a14:	3d 93       	st	X+, r19
    6a16:	30 e3       	ldi	r19, 0x30	; 48
    6a18:	2a 95       	dec	r18
    6a1a:	e1 f7       	brne	.-8      	; 0x6a14 <__ftoa_engine+0x1e>
    6a1c:	08 95       	ret
    6a1e:	9f 3f       	cpi	r25, 0xFF	; 255
    6a20:	30 f0       	brcs	.+12     	; 0x6a2e <__ftoa_engine+0x38>
    6a22:	80 38       	cpi	r24, 0x80	; 128
    6a24:	71 05       	cpc	r23, r1
    6a26:	61 05       	cpc	r22, r1
    6a28:	09 f0       	breq	.+2      	; 0x6a2c <__ftoa_engine+0x36>
    6a2a:	3c 5f       	subi	r19, 0xFC	; 252
    6a2c:	3c 5f       	subi	r19, 0xFC	; 252
    6a2e:	3d 93       	st	X+, r19
    6a30:	91 30       	cpi	r25, 0x01	; 1
    6a32:	08 f0       	brcs	.+2      	; 0x6a36 <__ftoa_engine+0x40>
    6a34:	80 68       	ori	r24, 0x80	; 128
    6a36:	91 1d       	adc	r25, r1
    6a38:	df 93       	push	r29
    6a3a:	cf 93       	push	r28
    6a3c:	1f 93       	push	r17
    6a3e:	0f 93       	push	r16
    6a40:	ff 92       	push	r15
    6a42:	ef 92       	push	r14
    6a44:	19 2f       	mov	r17, r25
    6a46:	98 7f       	andi	r25, 0xF8	; 248
    6a48:	96 95       	lsr	r25
    6a4a:	e9 2f       	mov	r30, r25
    6a4c:	96 95       	lsr	r25
    6a4e:	96 95       	lsr	r25
    6a50:	e9 0f       	add	r30, r25
    6a52:	ff 27       	eor	r31, r31
    6a54:	e4 50       	subi	r30, 0x04	; 4
    6a56:	fe 4f       	sbci	r31, 0xFE	; 254
    6a58:	99 27       	eor	r25, r25
    6a5a:	33 27       	eor	r19, r19
    6a5c:	ee 24       	eor	r14, r14
    6a5e:	ff 24       	eor	r15, r15
    6a60:	a7 01       	movw	r20, r14
    6a62:	e7 01       	movw	r28, r14
    6a64:	05 90       	lpm	r0, Z+
    6a66:	08 94       	sec
    6a68:	07 94       	ror	r0
    6a6a:	28 f4       	brcc	.+10     	; 0x6a76 <__ftoa_engine+0x80>
    6a6c:	36 0f       	add	r19, r22
    6a6e:	e7 1e       	adc	r14, r23
    6a70:	f8 1e       	adc	r15, r24
    6a72:	49 1f       	adc	r20, r25
    6a74:	51 1d       	adc	r21, r1
    6a76:	66 0f       	add	r22, r22
    6a78:	77 1f       	adc	r23, r23
    6a7a:	88 1f       	adc	r24, r24
    6a7c:	99 1f       	adc	r25, r25
    6a7e:	06 94       	lsr	r0
    6a80:	a1 f7       	brne	.-24     	; 0x6a6a <__ftoa_engine+0x74>
    6a82:	05 90       	lpm	r0, Z+
    6a84:	07 94       	ror	r0
    6a86:	28 f4       	brcc	.+10     	; 0x6a92 <__ftoa_engine+0x9c>
    6a88:	e7 0e       	add	r14, r23
    6a8a:	f8 1e       	adc	r15, r24
    6a8c:	49 1f       	adc	r20, r25
    6a8e:	56 1f       	adc	r21, r22
    6a90:	c1 1d       	adc	r28, r1
    6a92:	77 0f       	add	r23, r23
    6a94:	88 1f       	adc	r24, r24
    6a96:	99 1f       	adc	r25, r25
    6a98:	66 1f       	adc	r22, r22
    6a9a:	06 94       	lsr	r0
    6a9c:	a1 f7       	brne	.-24     	; 0x6a86 <__ftoa_engine+0x90>
    6a9e:	05 90       	lpm	r0, Z+
    6aa0:	07 94       	ror	r0
    6aa2:	28 f4       	brcc	.+10     	; 0x6aae <__ftoa_engine+0xb8>
    6aa4:	f8 0e       	add	r15, r24
    6aa6:	49 1f       	adc	r20, r25
    6aa8:	56 1f       	adc	r21, r22
    6aaa:	c7 1f       	adc	r28, r23
    6aac:	d1 1d       	adc	r29, r1
    6aae:	88 0f       	add	r24, r24
    6ab0:	99 1f       	adc	r25, r25
    6ab2:	66 1f       	adc	r22, r22
    6ab4:	77 1f       	adc	r23, r23
    6ab6:	06 94       	lsr	r0
    6ab8:	a1 f7       	brne	.-24     	; 0x6aa2 <__ftoa_engine+0xac>
    6aba:	05 90       	lpm	r0, Z+
    6abc:	07 94       	ror	r0
    6abe:	20 f4       	brcc	.+8      	; 0x6ac8 <__ftoa_engine+0xd2>
    6ac0:	49 0f       	add	r20, r25
    6ac2:	56 1f       	adc	r21, r22
    6ac4:	c7 1f       	adc	r28, r23
    6ac6:	d8 1f       	adc	r29, r24
    6ac8:	99 0f       	add	r25, r25
    6aca:	66 1f       	adc	r22, r22
    6acc:	77 1f       	adc	r23, r23
    6ace:	88 1f       	adc	r24, r24
    6ad0:	06 94       	lsr	r0
    6ad2:	a9 f7       	brne	.-22     	; 0x6abe <__ftoa_engine+0xc8>
    6ad4:	84 91       	lpm	r24, Z
    6ad6:	10 95       	com	r17
    6ad8:	17 70       	andi	r17, 0x07	; 7
    6ada:	41 f0       	breq	.+16     	; 0x6aec <__ftoa_engine+0xf6>
    6adc:	d6 95       	lsr	r29
    6ade:	c7 95       	ror	r28
    6ae0:	57 95       	ror	r21
    6ae2:	47 95       	ror	r20
    6ae4:	f7 94       	ror	r15
    6ae6:	e7 94       	ror	r14
    6ae8:	1a 95       	dec	r17
    6aea:	c1 f7       	brne	.-16     	; 0x6adc <__ftoa_engine+0xe6>
    6aec:	e2 ea       	ldi	r30, 0xA2	; 162
    6aee:	f1 e0       	ldi	r31, 0x01	; 1
    6af0:	68 94       	set
    6af2:	15 90       	lpm	r1, Z+
    6af4:	15 91       	lpm	r17, Z+
    6af6:	35 91       	lpm	r19, Z+
    6af8:	65 91       	lpm	r22, Z+
    6afa:	95 91       	lpm	r25, Z+
    6afc:	05 90       	lpm	r0, Z+
    6afe:	7f e2       	ldi	r23, 0x2F	; 47
    6b00:	73 95       	inc	r23
    6b02:	e1 18       	sub	r14, r1
    6b04:	f1 0a       	sbc	r15, r17
    6b06:	43 0b       	sbc	r20, r19
    6b08:	56 0b       	sbc	r21, r22
    6b0a:	c9 0b       	sbc	r28, r25
    6b0c:	d0 09       	sbc	r29, r0
    6b0e:	c0 f7       	brcc	.-16     	; 0x6b00 <__ftoa_engine+0x10a>
    6b10:	e1 0c       	add	r14, r1
    6b12:	f1 1e       	adc	r15, r17
    6b14:	43 1f       	adc	r20, r19
    6b16:	56 1f       	adc	r21, r22
    6b18:	c9 1f       	adc	r28, r25
    6b1a:	d0 1d       	adc	r29, r0
    6b1c:	7e f4       	brtc	.+30     	; 0x6b3c <__ftoa_engine+0x146>
    6b1e:	70 33       	cpi	r23, 0x30	; 48
    6b20:	11 f4       	brne	.+4      	; 0x6b26 <__ftoa_engine+0x130>
    6b22:	8a 95       	dec	r24
    6b24:	e6 cf       	rjmp	.-52     	; 0x6af2 <__ftoa_engine+0xfc>
    6b26:	e8 94       	clt
    6b28:	01 50       	subi	r16, 0x01	; 1
    6b2a:	30 f0       	brcs	.+12     	; 0x6b38 <__ftoa_engine+0x142>
    6b2c:	08 0f       	add	r16, r24
    6b2e:	0a f4       	brpl	.+2      	; 0x6b32 <__ftoa_engine+0x13c>
    6b30:	00 27       	eor	r16, r16
    6b32:	02 17       	cp	r16, r18
    6b34:	08 f4       	brcc	.+2      	; 0x6b38 <__ftoa_engine+0x142>
    6b36:	20 2f       	mov	r18, r16
    6b38:	23 95       	inc	r18
    6b3a:	02 2f       	mov	r16, r18
    6b3c:	7a 33       	cpi	r23, 0x3A	; 58
    6b3e:	28 f0       	brcs	.+10     	; 0x6b4a <__ftoa_engine+0x154>
    6b40:	79 e3       	ldi	r23, 0x39	; 57
    6b42:	7d 93       	st	X+, r23
    6b44:	2a 95       	dec	r18
    6b46:	e9 f7       	brne	.-6      	; 0x6b42 <__ftoa_engine+0x14c>
    6b48:	10 c0       	rjmp	.+32     	; 0x6b6a <__ftoa_engine+0x174>
    6b4a:	7d 93       	st	X+, r23
    6b4c:	2a 95       	dec	r18
    6b4e:	89 f6       	brne	.-94     	; 0x6af2 <__ftoa_engine+0xfc>
    6b50:	06 94       	lsr	r0
    6b52:	97 95       	ror	r25
    6b54:	67 95       	ror	r22
    6b56:	37 95       	ror	r19
    6b58:	17 95       	ror	r17
    6b5a:	17 94       	ror	r1
    6b5c:	e1 18       	sub	r14, r1
    6b5e:	f1 0a       	sbc	r15, r17
    6b60:	43 0b       	sbc	r20, r19
    6b62:	56 0b       	sbc	r21, r22
    6b64:	c9 0b       	sbc	r28, r25
    6b66:	d0 09       	sbc	r29, r0
    6b68:	98 f0       	brcs	.+38     	; 0x6b90 <__ftoa_engine+0x19a>
    6b6a:	23 95       	inc	r18
    6b6c:	7e 91       	ld	r23, -X
    6b6e:	73 95       	inc	r23
    6b70:	7a 33       	cpi	r23, 0x3A	; 58
    6b72:	08 f0       	brcs	.+2      	; 0x6b76 <__ftoa_engine+0x180>
    6b74:	70 e3       	ldi	r23, 0x30	; 48
    6b76:	7c 93       	st	X, r23
    6b78:	20 13       	cpse	r18, r16
    6b7a:	b8 f7       	brcc	.-18     	; 0x6b6a <__ftoa_engine+0x174>
    6b7c:	7e 91       	ld	r23, -X
    6b7e:	70 61       	ori	r23, 0x10	; 16
    6b80:	7d 93       	st	X+, r23
    6b82:	30 f0       	brcs	.+12     	; 0x6b90 <__ftoa_engine+0x19a>
    6b84:	83 95       	inc	r24
    6b86:	71 e3       	ldi	r23, 0x31	; 49
    6b88:	7d 93       	st	X+, r23
    6b8a:	70 e3       	ldi	r23, 0x30	; 48
    6b8c:	2a 95       	dec	r18
    6b8e:	e1 f7       	brne	.-8      	; 0x6b88 <__ftoa_engine+0x192>
    6b90:	11 24       	eor	r1, r1
    6b92:	ef 90       	pop	r14
    6b94:	ff 90       	pop	r15
    6b96:	0f 91       	pop	r16
    6b98:	1f 91       	pop	r17
    6b9a:	cf 91       	pop	r28
    6b9c:	df 91       	pop	r29
    6b9e:	99 27       	eor	r25, r25
    6ba0:	87 fd       	sbrc	r24, 7
    6ba2:	90 95       	com	r25
    6ba4:	08 95       	ret

00006ba6 <strnlen_P>:
    6ba6:	fc 01       	movw	r30, r24
    6ba8:	05 90       	lpm	r0, Z+
    6baa:	61 50       	subi	r22, 0x01	; 1
    6bac:	70 40       	sbci	r23, 0x00	; 0
    6bae:	01 10       	cpse	r0, r1
    6bb0:	d8 f7       	brcc	.-10     	; 0x6ba8 <strnlen_P+0x2>
    6bb2:	80 95       	com	r24
    6bb4:	90 95       	com	r25
    6bb6:	8e 0f       	add	r24, r30
    6bb8:	9f 1f       	adc	r25, r31
    6bba:	08 95       	ret

00006bbc <memcpy>:
    6bbc:	fb 01       	movw	r30, r22
    6bbe:	dc 01       	movw	r26, r24
    6bc0:	02 c0       	rjmp	.+4      	; 0x6bc6 <memcpy+0xa>
    6bc2:	01 90       	ld	r0, Z+
    6bc4:	0d 92       	st	X+, r0
    6bc6:	41 50       	subi	r20, 0x01	; 1
    6bc8:	50 40       	sbci	r21, 0x00	; 0
    6bca:	d8 f7       	brcc	.-10     	; 0x6bc2 <memcpy+0x6>
    6bcc:	08 95       	ret

00006bce <memset>:
    6bce:	dc 01       	movw	r26, r24
    6bd0:	01 c0       	rjmp	.+2      	; 0x6bd4 <memset+0x6>
    6bd2:	6d 93       	st	X+, r22
    6bd4:	41 50       	subi	r20, 0x01	; 1
    6bd6:	50 40       	sbci	r21, 0x00	; 0
    6bd8:	e0 f7       	brcc	.-8      	; 0x6bd2 <memset+0x4>
    6bda:	08 95       	ret

00006bdc <strcasestr>:
    6bdc:	fb 01       	movw	r30, r22
    6bde:	51 91       	ld	r21, Z+
    6be0:	55 23       	and	r21, r21
    6be2:	b1 f0       	breq	.+44     	; 0x6c10 <strcasestr+0x34>
    6be4:	bf 01       	movw	r22, r30
    6be6:	dc 01       	movw	r26, r24
    6be8:	05 2e       	mov	r0, r21
    6bea:	4d 91       	ld	r20, X+
    6bec:	44 23       	and	r20, r20
    6bee:	69 f0       	breq	.+26     	; 0x6c0a <strcasestr+0x2e>
    6bf0:	10 d0       	rcall	.+32     	; 0x6c12 <strcasestr+0x36>
    6bf2:	d9 f7       	brne	.-10     	; 0x6bea <strcasestr+0xe>
    6bf4:	cd 01       	movw	r24, r26
    6bf6:	01 90       	ld	r0, Z+
    6bf8:	00 20       	and	r0, r0
    6bfa:	49 f0       	breq	.+18     	; 0x6c0e <strcasestr+0x32>
    6bfc:	4d 91       	ld	r20, X+
    6bfe:	41 11       	cpse	r20, r1
    6c00:	08 d0       	rcall	.+16     	; 0x6c12 <strcasestr+0x36>
    6c02:	c9 f3       	breq	.-14     	; 0x6bf6 <strcasestr+0x1a>
    6c04:	fb 01       	movw	r30, r22
    6c06:	41 11       	cpse	r20, r1
    6c08:	ee cf       	rjmp	.-36     	; 0x6be6 <strcasestr+0xa>
    6c0a:	81 e0       	ldi	r24, 0x01	; 1
    6c0c:	90 e0       	ldi	r25, 0x00	; 0
    6c0e:	01 97       	sbiw	r24, 0x01	; 1
    6c10:	08 95       	ret
    6c12:	40 25       	eor	r20, r0
    6c14:	39 f0       	breq	.+14     	; 0x6c24 <strcasestr+0x48>
    6c16:	40 32       	cpi	r20, 0x20	; 32
    6c18:	29 f4       	brne	.+10     	; 0x6c24 <strcasestr+0x48>
    6c1a:	40 29       	or	r20, r0
    6c1c:	4b 57       	subi	r20, 0x7B	; 123
    6c1e:	46 5e       	subi	r20, 0xE6	; 230
    6c20:	08 f0       	brcs	.+2      	; 0x6c24 <strcasestr+0x48>
    6c22:	18 94       	sez
    6c24:	08 95       	ret

00006c26 <strcat>:
    6c26:	fb 01       	movw	r30, r22
    6c28:	dc 01       	movw	r26, r24
    6c2a:	0d 90       	ld	r0, X+
    6c2c:	00 20       	and	r0, r0
    6c2e:	e9 f7       	brne	.-6      	; 0x6c2a <strcat+0x4>
    6c30:	11 97       	sbiw	r26, 0x01	; 1
    6c32:	01 90       	ld	r0, Z+
    6c34:	0d 92       	st	X+, r0
    6c36:	00 20       	and	r0, r0
    6c38:	e1 f7       	brne	.-8      	; 0x6c32 <strcat+0xc>
    6c3a:	08 95       	ret

00006c3c <strcpy>:
    6c3c:	fb 01       	movw	r30, r22
    6c3e:	dc 01       	movw	r26, r24
    6c40:	01 90       	ld	r0, Z+
    6c42:	0d 92       	st	X+, r0
    6c44:	00 20       	and	r0, r0
    6c46:	e1 f7       	brne	.-8      	; 0x6c40 <strcpy+0x4>
    6c48:	08 95       	ret

00006c4a <strncasecmp>:
    6c4a:	fb 01       	movw	r30, r22
    6c4c:	dc 01       	movw	r26, r24
    6c4e:	41 50       	subi	r20, 0x01	; 1
    6c50:	50 40       	sbci	r21, 0x00	; 0
    6c52:	88 f0       	brcs	.+34     	; 0x6c76 <strncasecmp+0x2c>
    6c54:	8d 91       	ld	r24, X+
    6c56:	81 34       	cpi	r24, 0x41	; 65
    6c58:	1c f0       	brlt	.+6      	; 0x6c60 <strncasecmp+0x16>
    6c5a:	8b 35       	cpi	r24, 0x5B	; 91
    6c5c:	0c f4       	brge	.+2      	; 0x6c60 <strncasecmp+0x16>
    6c5e:	80 5e       	subi	r24, 0xE0	; 224
    6c60:	61 91       	ld	r22, Z+
    6c62:	61 34       	cpi	r22, 0x41	; 65
    6c64:	1c f0       	brlt	.+6      	; 0x6c6c <strncasecmp+0x22>
    6c66:	6b 35       	cpi	r22, 0x5B	; 91
    6c68:	0c f4       	brge	.+2      	; 0x6c6c <strncasecmp+0x22>
    6c6a:	60 5e       	subi	r22, 0xE0	; 224
    6c6c:	86 1b       	sub	r24, r22
    6c6e:	61 11       	cpse	r22, r1
    6c70:	71 f3       	breq	.-36     	; 0x6c4e <strncasecmp+0x4>
    6c72:	99 0b       	sbc	r25, r25
    6c74:	08 95       	ret
    6c76:	88 1b       	sub	r24, r24
    6c78:	fc cf       	rjmp	.-8      	; 0x6c72 <strncasecmp+0x28>

00006c7a <strnlen>:
    6c7a:	fc 01       	movw	r30, r24
    6c7c:	61 50       	subi	r22, 0x01	; 1
    6c7e:	70 40       	sbci	r23, 0x00	; 0
    6c80:	01 90       	ld	r0, Z+
    6c82:	01 10       	cpse	r0, r1
    6c84:	d8 f7       	brcc	.-10     	; 0x6c7c <strnlen+0x2>
    6c86:	80 95       	com	r24
    6c88:	90 95       	com	r25
    6c8a:	8e 0f       	add	r24, r30
    6c8c:	9f 1f       	adc	r25, r31
    6c8e:	08 95       	ret

00006c90 <fputc>:
    6c90:	0f 93       	push	r16
    6c92:	1f 93       	push	r17
    6c94:	cf 93       	push	r28
    6c96:	df 93       	push	r29
    6c98:	fb 01       	movw	r30, r22
    6c9a:	23 81       	ldd	r18, Z+3	; 0x03
    6c9c:	21 fd       	sbrc	r18, 1
    6c9e:	03 c0       	rjmp	.+6      	; 0x6ca6 <fputc+0x16>
    6ca0:	8f ef       	ldi	r24, 0xFF	; 255
    6ca2:	9f ef       	ldi	r25, 0xFF	; 255
    6ca4:	2c c0       	rjmp	.+88     	; 0x6cfe <fputc+0x6e>
    6ca6:	22 ff       	sbrs	r18, 2
    6ca8:	16 c0       	rjmp	.+44     	; 0x6cd6 <fputc+0x46>
    6caa:	46 81       	ldd	r20, Z+6	; 0x06
    6cac:	57 81       	ldd	r21, Z+7	; 0x07
    6cae:	24 81       	ldd	r18, Z+4	; 0x04
    6cb0:	35 81       	ldd	r19, Z+5	; 0x05
    6cb2:	42 17       	cp	r20, r18
    6cb4:	53 07       	cpc	r21, r19
    6cb6:	44 f4       	brge	.+16     	; 0x6cc8 <fputc+0x38>
    6cb8:	a0 81       	ld	r26, Z
    6cba:	b1 81       	ldd	r27, Z+1	; 0x01
    6cbc:	9d 01       	movw	r18, r26
    6cbe:	2f 5f       	subi	r18, 0xFF	; 255
    6cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc2:	31 83       	std	Z+1, r19	; 0x01
    6cc4:	20 83       	st	Z, r18
    6cc6:	8c 93       	st	X, r24
    6cc8:	26 81       	ldd	r18, Z+6	; 0x06
    6cca:	37 81       	ldd	r19, Z+7	; 0x07
    6ccc:	2f 5f       	subi	r18, 0xFF	; 255
    6cce:	3f 4f       	sbci	r19, 0xFF	; 255
    6cd0:	37 83       	std	Z+7, r19	; 0x07
    6cd2:	26 83       	std	Z+6, r18	; 0x06
    6cd4:	14 c0       	rjmp	.+40     	; 0x6cfe <fputc+0x6e>
    6cd6:	8b 01       	movw	r16, r22
    6cd8:	ec 01       	movw	r28, r24
    6cda:	fb 01       	movw	r30, r22
    6cdc:	00 84       	ldd	r0, Z+8	; 0x08
    6cde:	f1 85       	ldd	r31, Z+9	; 0x09
    6ce0:	e0 2d       	mov	r30, r0
    6ce2:	19 95       	eicall
    6ce4:	89 2b       	or	r24, r25
    6ce6:	e1 f6       	brne	.-72     	; 0x6ca0 <fputc+0x10>
    6ce8:	d8 01       	movw	r26, r16
    6cea:	16 96       	adiw	r26, 0x06	; 6
    6cec:	8d 91       	ld	r24, X+
    6cee:	9c 91       	ld	r25, X
    6cf0:	17 97       	sbiw	r26, 0x07	; 7
    6cf2:	01 96       	adiw	r24, 0x01	; 1
    6cf4:	17 96       	adiw	r26, 0x07	; 7
    6cf6:	9c 93       	st	X, r25
    6cf8:	8e 93       	st	-X, r24
    6cfa:	16 97       	sbiw	r26, 0x06	; 6
    6cfc:	ce 01       	movw	r24, r28
    6cfe:	df 91       	pop	r29
    6d00:	cf 91       	pop	r28
    6d02:	1f 91       	pop	r17
    6d04:	0f 91       	pop	r16
    6d06:	08 95       	ret

00006d08 <printf>:
    6d08:	cf 93       	push	r28
    6d0a:	df 93       	push	r29
    6d0c:	cd b7       	in	r28, 0x3d	; 61
    6d0e:	de b7       	in	r29, 0x3e	; 62
    6d10:	ae 01       	movw	r20, r28
    6d12:	4a 5f       	subi	r20, 0xFA	; 250
    6d14:	5f 4f       	sbci	r21, 0xFF	; 255
    6d16:	fa 01       	movw	r30, r20
    6d18:	61 91       	ld	r22, Z+
    6d1a:	71 91       	ld	r23, Z+
    6d1c:	af 01       	movw	r20, r30
    6d1e:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <__iob+0x2>
    6d22:	90 91 56 19 	lds	r25, 0x1956	; 0x801956 <__iob+0x3>
    6d26:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <vfprintf>
    6d2a:	df 91       	pop	r29
    6d2c:	cf 91       	pop	r28
    6d2e:	08 95       	ret

00006d30 <puts>:
    6d30:	0f 93       	push	r16
    6d32:	1f 93       	push	r17
    6d34:	cf 93       	push	r28
    6d36:	df 93       	push	r29
    6d38:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <__iob+0x2>
    6d3c:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <__iob+0x3>
    6d40:	23 81       	ldd	r18, Z+3	; 0x03
    6d42:	21 ff       	sbrs	r18, 1
    6d44:	1b c0       	rjmp	.+54     	; 0x6d7c <puts+0x4c>
    6d46:	8c 01       	movw	r16, r24
    6d48:	d0 e0       	ldi	r29, 0x00	; 0
    6d4a:	c0 e0       	ldi	r28, 0x00	; 0
    6d4c:	f8 01       	movw	r30, r16
    6d4e:	81 91       	ld	r24, Z+
    6d50:	8f 01       	movw	r16, r30
    6d52:	60 91 55 19 	lds	r22, 0x1955	; 0x801955 <__iob+0x2>
    6d56:	70 91 56 19 	lds	r23, 0x1956	; 0x801956 <__iob+0x3>
    6d5a:	db 01       	movw	r26, r22
    6d5c:	18 96       	adiw	r26, 0x08	; 8
    6d5e:	ed 91       	ld	r30, X+
    6d60:	fc 91       	ld	r31, X
    6d62:	19 97       	sbiw	r26, 0x09	; 9
    6d64:	88 23       	and	r24, r24
    6d66:	31 f0       	breq	.+12     	; 0x6d74 <puts+0x44>
    6d68:	19 95       	eicall
    6d6a:	89 2b       	or	r24, r25
    6d6c:	79 f3       	breq	.-34     	; 0x6d4c <puts+0x1c>
    6d6e:	df ef       	ldi	r29, 0xFF	; 255
    6d70:	cf ef       	ldi	r28, 0xFF	; 255
    6d72:	ec cf       	rjmp	.-40     	; 0x6d4c <puts+0x1c>
    6d74:	8a e0       	ldi	r24, 0x0A	; 10
    6d76:	19 95       	eicall
    6d78:	89 2b       	or	r24, r25
    6d7a:	19 f0       	breq	.+6      	; 0x6d82 <puts+0x52>
    6d7c:	8f ef       	ldi	r24, 0xFF	; 255
    6d7e:	9f ef       	ldi	r25, 0xFF	; 255
    6d80:	02 c0       	rjmp	.+4      	; 0x6d86 <puts+0x56>
    6d82:	8d 2f       	mov	r24, r29
    6d84:	9c 2f       	mov	r25, r28
    6d86:	df 91       	pop	r29
    6d88:	cf 91       	pop	r28
    6d8a:	1f 91       	pop	r17
    6d8c:	0f 91       	pop	r16
    6d8e:	08 95       	ret

00006d90 <sprintf>:
    6d90:	0f 93       	push	r16
    6d92:	1f 93       	push	r17
    6d94:	cf 93       	push	r28
    6d96:	df 93       	push	r29
    6d98:	cd b7       	in	r28, 0x3d	; 61
    6d9a:	de b7       	in	r29, 0x3e	; 62
    6d9c:	2e 97       	sbiw	r28, 0x0e	; 14
    6d9e:	0f b6       	in	r0, 0x3f	; 63
    6da0:	f8 94       	cli
    6da2:	de bf       	out	0x3e, r29	; 62
    6da4:	0f be       	out	0x3f, r0	; 63
    6da6:	cd bf       	out	0x3d, r28	; 61
    6da8:	0e 89       	ldd	r16, Y+22	; 0x16
    6daa:	1f 89       	ldd	r17, Y+23	; 0x17
    6dac:	86 e0       	ldi	r24, 0x06	; 6
    6dae:	8c 83       	std	Y+4, r24	; 0x04
    6db0:	1a 83       	std	Y+2, r17	; 0x02
    6db2:	09 83       	std	Y+1, r16	; 0x01
    6db4:	8f ef       	ldi	r24, 0xFF	; 255
    6db6:	9f e7       	ldi	r25, 0x7F	; 127
    6db8:	9e 83       	std	Y+6, r25	; 0x06
    6dba:	8d 83       	std	Y+5, r24	; 0x05
    6dbc:	ae 01       	movw	r20, r28
    6dbe:	46 5e       	subi	r20, 0xE6	; 230
    6dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    6dc2:	68 8d       	ldd	r22, Y+24	; 0x18
    6dc4:	79 8d       	ldd	r23, Y+25	; 0x19
    6dc6:	ce 01       	movw	r24, r28
    6dc8:	01 96       	adiw	r24, 0x01	; 1
    6dca:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <vfprintf>
    6dce:	ef 81       	ldd	r30, Y+7	; 0x07
    6dd0:	f8 85       	ldd	r31, Y+8	; 0x08
    6dd2:	e0 0f       	add	r30, r16
    6dd4:	f1 1f       	adc	r31, r17
    6dd6:	10 82       	st	Z, r1
    6dd8:	2e 96       	adiw	r28, 0x0e	; 14
    6dda:	0f b6       	in	r0, 0x3f	; 63
    6ddc:	f8 94       	cli
    6dde:	de bf       	out	0x3e, r29	; 62
    6de0:	0f be       	out	0x3f, r0	; 63
    6de2:	cd bf       	out	0x3d, r28	; 61
    6de4:	df 91       	pop	r29
    6de6:	cf 91       	pop	r28
    6de8:	1f 91       	pop	r17
    6dea:	0f 91       	pop	r16
    6dec:	08 95       	ret

00006dee <__ultoa_invert>:
    6dee:	fa 01       	movw	r30, r20
    6df0:	aa 27       	eor	r26, r26
    6df2:	28 30       	cpi	r18, 0x08	; 8
    6df4:	51 f1       	breq	.+84     	; 0x6e4a <__ultoa_invert+0x5c>
    6df6:	20 31       	cpi	r18, 0x10	; 16
    6df8:	81 f1       	breq	.+96     	; 0x6e5a <__ultoa_invert+0x6c>
    6dfa:	e8 94       	clt
    6dfc:	6f 93       	push	r22
    6dfe:	6e 7f       	andi	r22, 0xFE	; 254
    6e00:	6e 5f       	subi	r22, 0xFE	; 254
    6e02:	7f 4f       	sbci	r23, 0xFF	; 255
    6e04:	8f 4f       	sbci	r24, 0xFF	; 255
    6e06:	9f 4f       	sbci	r25, 0xFF	; 255
    6e08:	af 4f       	sbci	r26, 0xFF	; 255
    6e0a:	b1 e0       	ldi	r27, 0x01	; 1
    6e0c:	3e d0       	rcall	.+124    	; 0x6e8a <__ultoa_invert+0x9c>
    6e0e:	b4 e0       	ldi	r27, 0x04	; 4
    6e10:	3c d0       	rcall	.+120    	; 0x6e8a <__ultoa_invert+0x9c>
    6e12:	67 0f       	add	r22, r23
    6e14:	78 1f       	adc	r23, r24
    6e16:	89 1f       	adc	r24, r25
    6e18:	9a 1f       	adc	r25, r26
    6e1a:	a1 1d       	adc	r26, r1
    6e1c:	68 0f       	add	r22, r24
    6e1e:	79 1f       	adc	r23, r25
    6e20:	8a 1f       	adc	r24, r26
    6e22:	91 1d       	adc	r25, r1
    6e24:	a1 1d       	adc	r26, r1
    6e26:	6a 0f       	add	r22, r26
    6e28:	71 1d       	adc	r23, r1
    6e2a:	81 1d       	adc	r24, r1
    6e2c:	91 1d       	adc	r25, r1
    6e2e:	a1 1d       	adc	r26, r1
    6e30:	20 d0       	rcall	.+64     	; 0x6e72 <__ultoa_invert+0x84>
    6e32:	09 f4       	brne	.+2      	; 0x6e36 <__ultoa_invert+0x48>
    6e34:	68 94       	set
    6e36:	3f 91       	pop	r19
    6e38:	2a e0       	ldi	r18, 0x0A	; 10
    6e3a:	26 9f       	mul	r18, r22
    6e3c:	11 24       	eor	r1, r1
    6e3e:	30 19       	sub	r19, r0
    6e40:	30 5d       	subi	r19, 0xD0	; 208
    6e42:	31 93       	st	Z+, r19
    6e44:	de f6       	brtc	.-74     	; 0x6dfc <__ultoa_invert+0xe>
    6e46:	cf 01       	movw	r24, r30
    6e48:	08 95       	ret
    6e4a:	46 2f       	mov	r20, r22
    6e4c:	47 70       	andi	r20, 0x07	; 7
    6e4e:	40 5d       	subi	r20, 0xD0	; 208
    6e50:	41 93       	st	Z+, r20
    6e52:	b3 e0       	ldi	r27, 0x03	; 3
    6e54:	0f d0       	rcall	.+30     	; 0x6e74 <__ultoa_invert+0x86>
    6e56:	c9 f7       	brne	.-14     	; 0x6e4a <__ultoa_invert+0x5c>
    6e58:	f6 cf       	rjmp	.-20     	; 0x6e46 <__ultoa_invert+0x58>
    6e5a:	46 2f       	mov	r20, r22
    6e5c:	4f 70       	andi	r20, 0x0F	; 15
    6e5e:	40 5d       	subi	r20, 0xD0	; 208
    6e60:	4a 33       	cpi	r20, 0x3A	; 58
    6e62:	18 f0       	brcs	.+6      	; 0x6e6a <__ultoa_invert+0x7c>
    6e64:	49 5d       	subi	r20, 0xD9	; 217
    6e66:	31 fd       	sbrc	r19, 1
    6e68:	40 52       	subi	r20, 0x20	; 32
    6e6a:	41 93       	st	Z+, r20
    6e6c:	02 d0       	rcall	.+4      	; 0x6e72 <__ultoa_invert+0x84>
    6e6e:	a9 f7       	brne	.-22     	; 0x6e5a <__ultoa_invert+0x6c>
    6e70:	ea cf       	rjmp	.-44     	; 0x6e46 <__ultoa_invert+0x58>
    6e72:	b4 e0       	ldi	r27, 0x04	; 4
    6e74:	a6 95       	lsr	r26
    6e76:	97 95       	ror	r25
    6e78:	87 95       	ror	r24
    6e7a:	77 95       	ror	r23
    6e7c:	67 95       	ror	r22
    6e7e:	ba 95       	dec	r27
    6e80:	c9 f7       	brne	.-14     	; 0x6e74 <__ultoa_invert+0x86>
    6e82:	00 97       	sbiw	r24, 0x00	; 0
    6e84:	61 05       	cpc	r22, r1
    6e86:	71 05       	cpc	r23, r1
    6e88:	08 95       	ret
    6e8a:	9b 01       	movw	r18, r22
    6e8c:	ac 01       	movw	r20, r24
    6e8e:	0a 2e       	mov	r0, r26
    6e90:	06 94       	lsr	r0
    6e92:	57 95       	ror	r21
    6e94:	47 95       	ror	r20
    6e96:	37 95       	ror	r19
    6e98:	27 95       	ror	r18
    6e9a:	ba 95       	dec	r27
    6e9c:	c9 f7       	brne	.-14     	; 0x6e90 <__ultoa_invert+0xa2>
    6e9e:	62 0f       	add	r22, r18
    6ea0:	73 1f       	adc	r23, r19
    6ea2:	84 1f       	adc	r24, r20
    6ea4:	95 1f       	adc	r25, r21
    6ea6:	a0 1d       	adc	r26, r0
    6ea8:	08 95       	ret

00006eaa <_exit>:
    6eaa:	f8 94       	cli

00006eac <__stop_program>:
    6eac:	ff cf       	rjmp	.-2      	; 0x6eac <__stop_program>
