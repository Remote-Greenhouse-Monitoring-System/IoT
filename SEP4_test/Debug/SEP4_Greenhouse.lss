
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006be  00800200  0000691a  000069ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000691a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001019  008008be  008008be  0000706c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000070c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ba8  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000df5b  00000000  00000000  00007cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a82  00000000  00000000  00015c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007013  00000000  00000000  0001968d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000280c  00000000  00000000  000206a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043aa  00000000  00000000  00022eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c386  00000000  00000000  00027256  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ab8  00000000  00000000  000335dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d3 c6       	rjmp	.+3494   	; 0xdd8 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <__vector_25>
      68:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <__vector_36>
      94:	0c 94 1f 26 	jmp	0x4c3e	; 0x4c3e <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 6a 2a 	jmp	0x54d4	; 0x54d4 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 63 26 	jmp	0x4cc6	; 0x4cc6 <__vector_51>
      d0:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__vector_54>
      dc:	0c 94 4b 27 	jmp	0x4e96	; 0x4e96 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	df 1a       	sub	r13, r31
      e6:	df 1a       	sub	r13, r31
      e8:	df 1a       	sub	r13, r31
      ea:	16 1b       	sub	r17, r22
      ec:	1e 1b       	sub	r17, r30
      ee:	33 1b       	sub	r19, r19
      f0:	df 1a       	sub	r13, r31
      f2:	df 1a       	sub	r13, r31
      f4:	16 1b       	sub	r17, r22
      f6:	1e 1b       	sub	r17, r30
      f8:	8c 2a       	or	r8, r28
      fa:	fc 2a       	or	r15, r28
      fc:	fc 2a       	or	r15, r28
      fe:	fc 2a       	or	r15, r28
     100:	fc 2a       	or	r15, r28
     102:	fc 2a       	or	r15, r28
     104:	fc 2a       	or	r15, r28
     106:	fc 2a       	or	r15, r28
     108:	8c 2a       	or	r8, r28
     10a:	fc 2a       	or	r15, r28
     10c:	fc 2a       	or	r15, r28
     10e:	fc 2a       	or	r15, r28
     110:	fc 2a       	or	r15, r28
     112:	fc 2a       	or	r15, r28
     114:	fc 2a       	or	r15, r28
     116:	fc 2a       	or	r15, r28
     118:	8e 2a       	or	r8, r30
     11a:	fc 2a       	or	r15, r28
     11c:	fc 2a       	or	r15, r28
     11e:	fc 2a       	or	r15, r28
     120:	fc 2a       	or	r15, r28
     122:	fc 2a       	or	r15, r28
     124:	fc 2a       	or	r15, r28
     126:	fc 2a       	or	r15, r28
     128:	fc 2a       	or	r15, r28
     12a:	fc 2a       	or	r15, r28
     12c:	fc 2a       	or	r15, r28
     12e:	fc 2a       	or	r15, r28
     130:	fc 2a       	or	r15, r28
     132:	fc 2a       	or	r15, r28
     134:	fc 2a       	or	r15, r28
     136:	fc 2a       	or	r15, r28
     138:	8e 2a       	or	r8, r30
     13a:	fc 2a       	or	r15, r28
     13c:	fc 2a       	or	r15, r28
     13e:	fc 2a       	or	r15, r28
     140:	fc 2a       	or	r15, r28
     142:	fc 2a       	or	r15, r28
     144:	fc 2a       	or	r15, r28
     146:	fc 2a       	or	r15, r28
     148:	fc 2a       	or	r15, r28
     14a:	fc 2a       	or	r15, r28
     14c:	fc 2a       	or	r15, r28
     14e:	fc 2a       	or	r15, r28
     150:	fc 2a       	or	r15, r28
     152:	fc 2a       	or	r15, r28
     154:	fc 2a       	or	r15, r28
     156:	fc 2a       	or	r15, r28
     158:	f8 2a       	or	r15, r24
     15a:	fc 2a       	or	r15, r28
     15c:	fc 2a       	or	r15, r28
     15e:	fc 2a       	or	r15, r28
     160:	fc 2a       	or	r15, r28
     162:	fc 2a       	or	r15, r28
     164:	fc 2a       	or	r15, r28
     166:	fc 2a       	or	r15, r28
     168:	c3 2a       	or	r12, r19
     16a:	fc 2a       	or	r15, r28
     16c:	fc 2a       	or	r15, r28
     16e:	fc 2a       	or	r15, r28
     170:	fc 2a       	or	r15, r28
     172:	fc 2a       	or	r15, r28
     174:	fc 2a       	or	r15, r28
     176:	fc 2a       	or	r15, r28
     178:	fc 2a       	or	r15, r28
     17a:	fc 2a       	or	r15, r28
     17c:	fc 2a       	or	r15, r28
     17e:	fc 2a       	or	r15, r28
     180:	fc 2a       	or	r15, r28
     182:	fc 2a       	or	r15, r28
     184:	fc 2a       	or	r15, r28
     186:	fc 2a       	or	r15, r28
     188:	b7 2a       	or	r11, r23
     18a:	fc 2a       	or	r15, r28
     18c:	fc 2a       	or	r15, r28
     18e:	fc 2a       	or	r15, r28
     190:	fc 2a       	or	r15, r28
     192:	fc 2a       	or	r15, r28
     194:	fc 2a       	or	r15, r28
     196:	fc 2a       	or	r15, r28
     198:	db 2a       	or	r13, r27

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <prvCheckTasksWaitingTermination>
     2a0:	80 91 e1 16 	lds	r24, 0x16E1	; 0x8016e1 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	d1 d4       	rcall	.+2466   	; 0xc4c <vPortYield>
     2aa:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 a8 1a 	call	0x3550	; 0x3550 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	18 e0       	ldi	r17, 0x08	; 8
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ea e1       	ldi	r30, 0x1A	; 26
     2e6:	f9 e6       	ldi	r31, 0x69	; 105
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ae 3b       	cpi	r26, 0xBE	; 190
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	28 e1       	ldi	r18, 0x18	; 24
     2fa:	ae eb       	ldi	r26, 0xBE	; 190
     2fc:	b8 e0       	ldi	r27, 0x08	; 8
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a7 3d       	cpi	r26, 0xD7	; 215
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <main>
     30c:	0c 94 8b 34 	jmp	0x6916	; 0x6916 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 c6 18 	lds	r24, 0x18C6	; 0x8018c6 <measureEventGroup>
     34e:	90 91 c7 18 	lds	r25, 0x18C7	; 0x8018c7 <measureEventGroup+0x1>
     352:	c7 d1       	rcall	.+910    	; 0x6e2 <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 c4 18 	lds	r24, 0x18C4	; 0x8018c4 <dataReadyEventGroup>
     36c:	90 91 c5 18 	lds	r25, 0x18C5	; 0x8018c5 <dataReadyEventGroup+0x1>
     370:	18 d1       	rcall	.+560    	; 0x5a2 <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TempHumSensor_getTemp>
     38a:	0e 94 80 1b 	call	0x3700	; 0x3700 <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <TempHumSensor_getHum>
     392:	0e 94 85 1b 	call	0x370a	; 0x370a <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <CO2_getPPM>
     39a:	0e 94 8a 1b 	call	0x3714	; 0x3714 <set_CO2_ppm>
			lora_driver_payload_t payload = get_lora_package(2);
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	ce 01       	movw	r24, r28
     3a2:	05 96       	adiw	r24, 0x05	; 5
     3a4:	0e 94 8f 1b 	call	0x371e	; 0x371e <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3a8:	0f ef       	ldi	r16, 0xFF	; 255
     3aa:	1f ef       	ldi	r17, 0xFF	; 255
     3ac:	98 01       	movw	r18, r16
     3ae:	46 e1       	ldi	r20, 0x16	; 22
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	be 01       	movw	r22, r28
     3b4:	6b 5f       	subi	r22, 0xFB	; 251
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	80 91 c8 18 	lds	r24, 0x18C8	; 0x8018c8 <uplinkMessageBufferHandle>
     3bc:	90 91 c9 18 	lds	r25, 0x18C9	; 0x8018c9 <uplinkMessageBufferHandle+0x1>
     3c0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     3c4:	86 31       	cpi	r24, 0x16	; 22
     3c6:	29 f0       	breq	.+10     	; 0x3d2 <main_application_task+0xc0>
				printf("Timed out.\n");
     3c8:	8f e6       	ldi	r24, 0x6F	; 111
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	0e 94 ce 33 	call	0x679c	; 0x679c <puts>
     3d0:	b0 cf       	rjmp	.-160    	; 0x332 <main_application_task+0x20>
				// 			printf("Bytes sent: %d\n", xBytesSent);
				// 			printf("Temp sent: %d\n", tem);
				// 			printf("Humidity sent: %d\n", hum);
				// 			printf("Size of payload: %d\n", sizeof(payload));
				//			receivePayload();
				printf("Bytes put in buffer: %d\n", xBytesSent);
     3d2:	99 27       	eor	r25, r25
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	8a e7       	ldi	r24, 0x7A	; 122
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	a2 cf       	rjmp	.-188    	; 0x332 <main_application_task+0x20>

000003ee <create_main_application_task>:
EventGroupHandle_t dataReadyEventGroup;
MessageBufferHandle_t uplinkMessageBufferHandle;

void main_application_task(void *pvParameters);

void create_main_application_task(UBaseType_t priority){
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
		
	xTaskCreate(
     3f4:	e1 2c       	mov	r14, r1
     3f6:	f1 2c       	mov	r15, r1
     3f8:	08 2f       	mov	r16, r24
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 ec       	ldi	r20, 0xC0	; 192
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	63 e9       	ldi	r22, 0x93	; 147
     404:	72 e0       	ldi	r23, 0x02	; 2
     406:	89 e8       	ldi	r24, 0x89	; 137
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + priority 
	,  NULL );
	
}
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	08 95       	ret

00000416 <get_max_temperature>:
static uint16_t max_humidity;
static uint16_t min_humidity;

int16_t get_max_temperature(){
	return max_temperature;
}
     416:	89 e1       	ldi	r24, 0x19	; 25
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	08 95       	ret

0000041c <lora_downlink_handler_task>:
	
	uint8_t xReceivedBytes = 0;
	
	for(;;){
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle, 
     41c:	0f ef       	ldi	r16, 0xFF	; 255
     41e:	1f ef       	ldi	r17, 0xFF	; 255
     420:	98 01       	movw	r18, r16
     422:	46 e1       	ldi	r20, 0x16	; 22
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	6e eb       	ldi	r22, 0xBE	; 190
     428:	78 e0       	ldi	r23, 0x08	; 8
     42a:	80 91 ca 18 	lds	r24, 0x18CA	; 0x8018ca <downlinkMessageBufferHandle>
     42e:	90 91 cb 18 	lds	r25, 0x18CB	; 0x8018cb <downlinkMessageBufferHandle+0x1>
     432:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <xStreamBufferReceive>
		&_downlink_payload, 
		sizeof(lora_driver_payload_t), 
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     436:	88 23       	and	r24, r24
     438:	89 f3       	breq	.-30     	; 0x41c <lora_downlink_handler_task>
			printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     43a:	ee eb       	ldi	r30, 0xBE	; 190
     43c:	f8 e0       	ldi	r31, 0x08	; 8
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	80 81       	ld	r24, Z
     442:	1f 92       	push	r1
     444:	9f 93       	push	r25
     446:	1f 92       	push	r1
     448:	8f 93       	push	r24
     44a:	83 ea       	ldi	r24, 0xA3	; 163
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	9f 93       	push	r25
     450:	8f 93       	push	r24
     452:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	dc cf       	rjmp	.-72     	; 0x41c <lora_downlink_handler_task>

00000464 <create_lora_downlink_handler_task>:
void lora_downlink_handler_task(void *pvParameters);

static lora_driver_payload_t _downlink_payload;
MessageBufferHandle_t downlinkMessageBufferHandle;

void create_lora_downlink_handler_task(UBaseType_t priority){
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
		xTaskCreate(
     46a:	e1 2c       	mov	r14, r1
     46c:	f1 2c       	mov	r15, r1
     46e:	08 2f       	mov	r16, r24
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	48 e8       	ldi	r20, 0x88	; 136
     476:	51 e0       	ldi	r21, 0x01	; 1
     478:	64 ed       	ldi	r22, 0xD4	; 212
     47a:	72 e0       	ldi	r23, 0x02	; 2
     47c:	8e e0       	ldi	r24, 0x0E	; 14
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskCreate>
		,  "LRHandDownlink"
		,  configMINIMAL_STACK_SIZE+200
		,  NULL
		,  tskIDLE_PRIORITY + priority
		,  NULL );
}
     484:	0f 91       	pop	r16
     486:	ff 90       	pop	r15
     488:	ef 90       	pop	r14
     48a:	08 95       	ret

0000048c <fan_controller_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void fan_controller_task(void *pvParameters) {
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	00 d0       	rcall	.+0      	; 0x492 <fan_controller_task+0x6>
     492:	1f 92       	push	r1
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
	int16_t thresholdTemperature = 0;
	uint16_t thresholdHumidity = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(120000); 
	xLastWakeTime = xTaskGetTickCount();
     498:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <xTaskGetTickCount>
     49c:	69 83       	std	Y+1, r22	; 0x01
     49e:	7a 83       	std	Y+2, r23	; 0x02
     4a0:	8b 83       	std	Y+3, r24	; 0x03
     4a2:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     4a4:	40 e1       	ldi	r20, 0x10	; 16
     4a6:	5d e1       	ldi	r21, 0x1D	; 29
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskDelayUntil>
		thresholdTemperature = get_max_temperature();
     4b4:	b0 df       	rcall	.-160    	; 0x416 <get_max_temperature>
     4b6:	7c 01       	movw	r14, r24
		
		measure_Temp_Hum();
     4b8:	0e 94 24 1c 	call	0x3848	; 0x3848 <measure_Temp_Hum>
		currentTemperature = TempHumSensor_getTemp();
     4bc:	0e 94 67 1c 	call	0x38ce	; 0x38ce <TempHumSensor_getTemp>
     4c0:	8c 01       	movw	r16, r24
		currentHumidity = TempHumSensor_getHum();
     4c2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <TempHumSensor_getHum>
		
		printf("Current temp: %d\n", currentTemperature/10);
     4c6:	c8 01       	movw	r24, r16
     4c8:	6a e0       	ldi	r22, 0x0A	; 10
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	0e 94 bb 30 	call	0x6176	; 0x6176 <__divmodhi4>
     4d0:	8b 01       	movw	r16, r22
     4d2:	1f 93       	push	r17
     4d4:	6f 93       	push	r22
     4d6:	83 ee       	ldi	r24, 0xE3	; 227
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
		printf("Threshold temp: %d\n", thresholdTemperature);
     4e2:	ff 92       	push	r15
     4e4:	ef 92       	push	r14
     4e6:	85 ef       	ldi	r24, 0xF5	; 245
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
		if(currentTemperature/10 > thresholdTemperature){
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	e0 16       	cp	r14, r16
     4fe:	f1 06       	cpc	r15, r17
     500:	14 f4       	brge	.+4      	; 0x506 <fan_controller_task+0x7a>
			PORTA = 0x00;
     502:	12 b8       	out	0x02, r1	; 2
     504:	cf cf       	rjmp	.-98     	; 0x4a4 <fan_controller_task+0x18>
		}
		else{
			PORTA = 0xFF;
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	82 b9       	out	0x02, r24	; 2
     50a:	cc cf       	rjmp	.-104    	; 0x4a4 <fan_controller_task+0x18>

0000050c <create_fan_controller_task>:

#include "FanController.h"

void fan_controller_task(void *pvParameters);

void create_fan_controller_task(UBaseType_t priority){
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
	
	DDRA = 0xFF;
     512:	9f ef       	ldi	r25, 0xFF	; 255
     514:	91 b9       	out	0x01, r25	; 1
	PORTA = 0xFF;
     516:	92 b9       	out	0x02, r25	; 2
	
	xTaskCreate(
     518:	e1 2c       	mov	r14, r1
     51a:	f1 2c       	mov	r15, r1
     51c:	08 2f       	mov	r16, r24
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 ec       	ldi	r20, 0xC0	; 192
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	69 e0       	ldi	r22, 0x09	; 9
     528:	73 e0       	ldi	r23, 0x03	; 3
     52a:	86 e4       	ldi	r24, 0x46	; 70
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskCreate>
	,  "FanController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	08 95       	ret

0000053a <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     53a:	0f 93       	push	r16
     53c:	01 11       	cpse	r16, r1
     53e:	0c c0       	rjmp	.+24     	; 0x558 <prvTestWaitCondition+0x1e>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	82 23       	and	r24, r18
     546:	93 23       	and	r25, r19
     548:	a4 23       	and	r26, r20
     54a:	b5 23       	and	r27, r21
     54c:	89 2b       	or	r24, r25
     54e:	8a 2b       	or	r24, r26
     550:	8b 2b       	or	r24, r27
     552:	79 f4       	brne	.+30     	; 0x572 <prvTestWaitCondition+0x38>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	10 c0       	rjmp	.+32     	; 0x578 <prvTestWaitCondition+0x3e>
     558:	dc 01       	movw	r26, r24
     55a:	cb 01       	movw	r24, r22
     55c:	82 23       	and	r24, r18
     55e:	93 23       	and	r25, r19
     560:	a4 23       	and	r26, r20
     562:	b5 23       	and	r27, r21
     564:	28 17       	cp	r18, r24
     566:	39 07       	cpc	r19, r25
     568:	4a 07       	cpc	r20, r26
     56a:	5b 07       	cpc	r21, r27
     56c:	21 f0       	breq	.+8      	; 0x576 <prvTestWaitCondition+0x3c>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	03 c0       	rjmp	.+6      	; 0x578 <prvTestWaitCondition+0x3e>
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	01 c0       	rjmp	.+2      	; 0x578 <prvTestWaitCondition+0x3e>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	0f 91       	pop	r16
     57a:	08 95       	ret

0000057c <xEventGroupCreate>:
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	8f e0       	ldi	r24, 0x0F	; 15
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	af d1       	rcall	.+862    	; 0x8e4 <pvPortMalloc>
     586:	ec 01       	movw	r28, r24
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	39 f0       	breq	.+14     	; 0x59a <xEventGroupCreate+0x1e>
     58c:	fc 01       	movw	r30, r24
     58e:	11 92       	st	Z+, r1
     590:	11 92       	st	Z+, r1
     592:	11 92       	st	Z+, r1
     594:	11 92       	st	Z+, r1
     596:	cf 01       	movw	r24, r30
     598:	8b d2       	rcall	.+1302   	; 0xab0 <vListInitialise>
     59a:	ce 01       	movw	r24, r28
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <xEventGroupWaitBits>:
     5a2:	2f 92       	push	r2
     5a4:	3f 92       	push	r3
     5a6:	4f 92       	push	r4
     5a8:	5f 92       	push	r5
     5aa:	6f 92       	push	r6
     5ac:	7f 92       	push	r7
     5ae:	8f 92       	push	r8
     5b0:	9f 92       	push	r9
     5b2:	af 92       	push	r10
     5b4:	bf 92       	push	r11
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	ec 01       	movw	r28, r24
     5c8:	4a 01       	movw	r8, r20
     5ca:	5b 01       	movw	r10, r22
     5cc:	62 2e       	mov	r6, r18
     5ce:	70 2e       	mov	r7, r16
     5d0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vTaskSuspendAll>
     5d4:	28 80       	ld	r2, Y
     5d6:	39 80       	ldd	r3, Y+1	; 0x01
     5d8:	4a 80       	ldd	r4, Y+2	; 0x02
     5da:	5b 80       	ldd	r5, Y+3	; 0x03
     5dc:	a5 01       	movw	r20, r10
     5de:	94 01       	movw	r18, r8
     5e0:	c2 01       	movw	r24, r4
     5e2:	b1 01       	movw	r22, r2
     5e4:	aa df       	rcall	.-172    	; 0x53a <prvTestWaitCondition>
     5e6:	88 23       	and	r24, r24
     5e8:	a1 f0       	breq	.+40     	; 0x612 <xEventGroupWaitBits+0x70>
     5ea:	66 20       	and	r6, r6
     5ec:	89 f1       	breq	.+98     	; 0x650 <xEventGroupWaitBits+0xae>
     5ee:	d5 01       	movw	r26, r10
     5f0:	c4 01       	movw	r24, r8
     5f2:	80 95       	com	r24
     5f4:	90 95       	com	r25
     5f6:	a0 95       	com	r26
     5f8:	b0 95       	com	r27
     5fa:	82 21       	and	r24, r2
     5fc:	93 21       	and	r25, r3
     5fe:	a4 21       	and	r26, r4
     600:	b5 21       	and	r27, r5
     602:	88 83       	st	Y, r24
     604:	99 83       	std	Y+1, r25	; 0x01
     606:	aa 83       	std	Y+2, r26	; 0x02
     608:	bb 83       	std	Y+3, r27	; 0x03
     60a:	c1 2c       	mov	r12, r1
     60c:	d1 2c       	mov	r13, r1
     60e:	76 01       	movw	r14, r12
     610:	22 c0       	rjmp	.+68     	; 0x656 <xEventGroupWaitBits+0xb4>
     612:	c1 14       	cp	r12, r1
     614:	d1 04       	cpc	r13, r1
     616:	e1 04       	cpc	r14, r1
     618:	f1 04       	cpc	r15, r1
     61a:	e9 f0       	breq	.+58     	; 0x656 <xEventGroupWaitBits+0xb4>
     61c:	61 10       	cpse	r6, r1
     61e:	04 c0       	rjmp	.+8      	; 0x628 <xEventGroupWaitBits+0x86>
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	ba 01       	movw	r22, r20
     626:	04 c0       	rjmp	.+8      	; 0x630 <xEventGroupWaitBits+0x8e>
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	71 e0       	ldi	r23, 0x01	; 1
     630:	71 10       	cpse	r7, r1
     632:	74 60       	ori	r23, 0x04	; 4
     634:	48 29       	or	r20, r8
     636:	59 29       	or	r21, r9
     638:	6a 29       	or	r22, r10
     63a:	7b 29       	or	r23, r11
     63c:	97 01       	movw	r18, r14
     63e:	86 01       	movw	r16, r12
     640:	ce 01       	movw	r24, r28
     642:	04 96       	adiw	r24, 0x04	; 4
     644:	0e 94 84 12 	call	0x2508	; 0x2508 <vTaskPlaceOnUnorderedEventList>
     648:	21 2c       	mov	r2, r1
     64a:	31 2c       	mov	r3, r1
     64c:	21 01       	movw	r4, r2
     64e:	03 c0       	rjmp	.+6      	; 0x656 <xEventGroupWaitBits+0xb4>
     650:	c1 2c       	mov	r12, r1
     652:	d1 2c       	mov	r13, r1
     654:	76 01       	movw	r14, r12
     656:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskResumeAll>
     65a:	cd 28       	or	r12, r13
     65c:	ce 28       	or	r12, r14
     65e:	cf 28       	or	r12, r15
     660:	59 f1       	breq	.+86     	; 0x6b8 <xEventGroupWaitBits+0x116>
     662:	81 11       	cpse	r24, r1
     664:	01 c0       	rjmp	.+2      	; 0x668 <xEventGroupWaitBits+0xc6>
     666:	f2 d2       	rcall	.+1508   	; 0xc4c <vPortYield>
     668:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <uxTaskResetEventItemValue>
     66c:	6b 01       	movw	r12, r22
     66e:	7c 01       	movw	r14, r24
     670:	91 fd       	sbrc	r25, 1
     672:	1f c0       	rjmp	.+62     	; 0x6b2 <xEventGroupWaitBits+0x110>
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	0f 92       	push	r0
     67a:	c8 80       	ld	r12, Y
     67c:	d9 80       	ldd	r13, Y+1	; 0x01
     67e:	ea 80       	ldd	r14, Y+2	; 0x02
     680:	fb 80       	ldd	r15, Y+3	; 0x03
     682:	07 2d       	mov	r16, r7
     684:	a5 01       	movw	r20, r10
     686:	94 01       	movw	r18, r8
     688:	c7 01       	movw	r24, r14
     68a:	b6 01       	movw	r22, r12
     68c:	56 df       	rcall	.-340    	; 0x53a <prvTestWaitCondition>
     68e:	88 23       	and	r24, r24
     690:	71 f0       	breq	.+28     	; 0x6ae <xEventGroupWaitBits+0x10c>
     692:	66 20       	and	r6, r6
     694:	61 f0       	breq	.+24     	; 0x6ae <xEventGroupWaitBits+0x10c>
     696:	80 94       	com	r8
     698:	90 94       	com	r9
     69a:	a0 94       	com	r10
     69c:	b0 94       	com	r11
     69e:	8c 20       	and	r8, r12
     6a0:	9d 20       	and	r9, r13
     6a2:	ae 20       	and	r10, r14
     6a4:	bf 20       	and	r11, r15
     6a6:	88 82       	st	Y, r8
     6a8:	99 82       	std	Y+1, r9	; 0x01
     6aa:	aa 82       	std	Y+2, r10	; 0x02
     6ac:	bb 82       	std	Y+3, r11	; 0x03
     6ae:	0f 90       	pop	r0
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	16 01       	movw	r2, r12
     6b4:	27 01       	movw	r4, r14
     6b6:	55 24       	eor	r5, r5
     6b8:	c2 01       	movw	r24, r4
     6ba:	b1 01       	movw	r22, r2
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	9f 90       	pop	r9
     6d2:	8f 90       	pop	r8
     6d4:	7f 90       	pop	r7
     6d6:	6f 90       	pop	r6
     6d8:	5f 90       	pop	r5
     6da:	4f 90       	pop	r4
     6dc:	3f 90       	pop	r3
     6de:	2f 90       	pop	r2
     6e0:	08 95       	ret

000006e2 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     6e2:	4f 92       	push	r4
     6e4:	5f 92       	push	r5
     6e6:	6f 92       	push	r6
     6e8:	7f 92       	push	r7
     6ea:	af 92       	push	r10
     6ec:	bf 92       	push	r11
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	ec 01       	movw	r28, r24
     700:	6a 01       	movw	r12, r20
     702:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     704:	8c 01       	movw	r16, r24
     706:	09 5f       	subi	r16, 0xF9	; 249
     708:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     70a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     70e:	eb 85       	ldd	r30, Y+11	; 0x0b
     710:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     712:	88 81       	ld	r24, Y
     714:	99 81       	ldd	r25, Y+1	; 0x01
     716:	aa 81       	ldd	r26, Y+2	; 0x02
     718:	bb 81       	ldd	r27, Y+3	; 0x03
     71a:	c8 2a       	or	r12, r24
     71c:	d9 2a       	or	r13, r25
     71e:	ea 2a       	or	r14, r26
     720:	fb 2a       	or	r15, r27
     722:	c8 82       	st	Y, r12
     724:	d9 82       	std	Y+1, r13	; 0x01
     726:	ea 82       	std	Y+2, r14	; 0x02
     728:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     72a:	c1 2c       	mov	r12, r1
     72c:	d1 2c       	mov	r13, r1
     72e:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     730:	3d c0       	rjmp	.+122    	; 0x7ac <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     732:	a4 80       	ldd	r10, Z+4	; 0x04
     734:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     736:	80 81       	ld	r24, Z
     738:	91 81       	ldd	r25, Z+1	; 0x01
     73a:	a2 81       	ldd	r26, Z+2	; 0x02
     73c:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     73e:	ac 01       	movw	r20, r24
     740:	bd 01       	movw	r22, r26
     742:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     744:	b2 fd       	sbrc	r27, 2
     746:	0e c0       	rjmp	.+28     	; 0x764 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     748:	48 80       	ld	r4, Y
     74a:	59 80       	ldd	r5, Y+1	; 0x01
     74c:	6a 80       	ldd	r6, Y+2	; 0x02
     74e:	7b 80       	ldd	r7, Y+3	; 0x03
     750:	44 22       	and	r4, r20
     752:	55 22       	and	r5, r21
     754:	66 22       	and	r6, r22
     756:	77 22       	and	r7, r23
     758:	45 28       	or	r4, r5
     75a:	46 28       	or	r4, r6
     75c:	47 28       	or	r4, r7
     75e:	89 f4       	brne	.+34     	; 0x782 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	12 c0       	rjmp	.+36     	; 0x788 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     764:	48 80       	ld	r4, Y
     766:	59 80       	ldd	r5, Y+1	; 0x01
     768:	6a 80       	ldd	r6, Y+2	; 0x02
     76a:	7b 80       	ldd	r7, Y+3	; 0x03
     76c:	44 22       	and	r4, r20
     76e:	55 22       	and	r5, r21
     770:	66 22       	and	r6, r22
     772:	77 22       	and	r7, r23
     774:	44 15       	cp	r20, r4
     776:	55 05       	cpc	r21, r5
     778:	66 05       	cpc	r22, r6
     77a:	77 05       	cpc	r23, r7
     77c:	21 f0       	breq	.+8      	; 0x786 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	03 c0       	rjmp	.+6      	; 0x788 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	01 c0       	rjmp	.+2      	; 0x788 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     786:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     788:	22 23       	and	r18, r18
     78a:	71 f0       	breq	.+28     	; 0x7a8 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     78c:	b0 ff       	sbrs	r27, 0
     78e:	04 c0       	rjmp	.+8      	; 0x798 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     790:	c4 2a       	or	r12, r20
     792:	d5 2a       	or	r13, r21
     794:	e6 2a       	or	r14, r22
     796:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     798:	48 81       	ld	r20, Y
     79a:	59 81       	ldd	r21, Y+1	; 0x01
     79c:	6a 81       	ldd	r22, Y+2	; 0x02
     79e:	7b 81       	ldd	r23, Y+3	; 0x03
     7a0:	72 60       	ori	r23, 0x02	; 2
     7a2:	cf 01       	movw	r24, r30
     7a4:	0e 94 bf 13 	call	0x277e	; 0x277e <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     7a8:	ea 2d       	mov	r30, r10
     7aa:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     7ac:	e0 17       	cp	r30, r16
     7ae:	f1 07       	cpc	r31, r17
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <xEventGroupSetBits+0xd2>
     7b2:	bf cf       	rjmp	.-130    	; 0x732 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     7b4:	c0 94       	com	r12
     7b6:	d0 94       	com	r13
     7b8:	e0 94       	com	r14
     7ba:	f0 94       	com	r15
     7bc:	88 81       	ld	r24, Y
     7be:	99 81       	ldd	r25, Y+1	; 0x01
     7c0:	aa 81       	ldd	r26, Y+2	; 0x02
     7c2:	bb 81       	ldd	r27, Y+3	; 0x03
     7c4:	c8 22       	and	r12, r24
     7c6:	d9 22       	and	r13, r25
     7c8:	ea 22       	and	r14, r26
     7ca:	fb 22       	and	r15, r27
     7cc:	c8 82       	st	Y, r12
     7ce:	d9 82       	std	Y+1, r13	; 0x01
     7d0:	ea 82       	std	Y+2, r14	; 0x02
     7d2:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     7d4:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     7d8:	68 81       	ld	r22, Y
     7da:	79 81       	ldd	r23, Y+1	; 0x01
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	9b 81       	ldd	r25, Y+3	; 0x03
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	bf 90       	pop	r11
     7f2:	af 90       	pop	r10
     7f4:	7f 90       	pop	r7
     7f6:	6f 90       	pop	r6
     7f8:	5f 90       	pop	r5
     7fa:	4f 90       	pop	r4
     7fc:	08 95       	ret

000007fe <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     7fe:	e0 ee       	ldi	r30, 0xE0	; 224
     800:	f8 e0       	ldi	r31, 0x08	; 8
     802:	a4 ee       	ldi	r26, 0xE4	; 228
     804:	b8 e0       	ldi	r27, 0x08	; 8
     806:	b1 83       	std	Z+1, r27	; 0x01
     808:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     80a:	13 82       	std	Z+3, r1	; 0x03
     80c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     80e:	ec e8       	ldi	r30, 0x8C	; 140
     810:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     812:	f0 93 df 08 	sts	0x08DF, r31	; 0x8008df <pxEnd+0x1>
     816:	e0 93 de 08 	sts	0x08DE, r30	; 0x8008de <pxEnd>
    pxEnd->xBlockSize = 0;
     81a:	13 82       	std	Z+3, r1	; 0x03
     81c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     81e:	11 82       	std	Z+1, r1	; 0x01
     820:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     822:	88 ea       	ldi	r24, 0xA8	; 168
     824:	9d e0       	ldi	r25, 0x0D	; 13
     826:	13 96       	adiw	r26, 0x03	; 3
     828:	9c 93       	st	X, r25
     82a:	8e 93       	st	-X, r24
     82c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     82e:	ed 93       	st	X+, r30
     830:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     832:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xMinimumEverFreeBytesRemaining+0x1>
     836:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     83a:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <xFreeBytesRemaining+0x1>
     83e:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e8       	ldi	r25, 0x80	; 128
     846:	90 93 d5 08 	sts	0x08D5, r25	; 0x8008d5 <xBlockAllocatedBit+0x1>
     84a:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <xBlockAllocatedBit>
     84e:	08 95       	ret

00000850 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     856:	a0 ee       	ldi	r26, 0xE0	; 224
     858:	b8 e0       	ldi	r27, 0x08	; 8
     85a:	01 c0       	rjmp	.+2      	; 0x85e <prvInsertBlockIntoFreeList+0xe>
     85c:	df 01       	movw	r26, r30
     85e:	ed 91       	ld	r30, X+
     860:	fc 91       	ld	r31, X
     862:	11 97       	sbiw	r26, 0x01	; 1
     864:	ec 17       	cp	r30, r28
     866:	fd 07       	cpc	r31, r29
     868:	c8 f3       	brcs	.-14     	; 0x85c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     86a:	12 96       	adiw	r26, 0x02	; 2
     86c:	8d 91       	ld	r24, X+
     86e:	9c 91       	ld	r25, X
     870:	13 97       	sbiw	r26, 0x03	; 3
     872:	9d 01       	movw	r18, r26
     874:	28 0f       	add	r18, r24
     876:	39 1f       	adc	r19, r25
     878:	c2 17       	cp	r28, r18
     87a:	d3 07       	cpc	r29, r19
     87c:	49 f4       	brne	.+18     	; 0x890 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     87e:	2a 81       	ldd	r18, Y+2	; 0x02
     880:	3b 81       	ldd	r19, Y+3	; 0x03
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	13 96       	adiw	r26, 0x03	; 3
     888:	9c 93       	st	X, r25
     88a:	8e 93       	st	-X, r24
     88c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     88e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	9b 81       	ldd	r25, Y+3	; 0x03
     894:	9e 01       	movw	r18, r28
     896:	28 0f       	add	r18, r24
     898:	39 1f       	adc	r19, r25
     89a:	e2 17       	cp	r30, r18
     89c:	f3 07       	cpc	r31, r19
     89e:	c1 f4       	brne	.+48     	; 0x8d0 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     8a0:	20 91 de 08 	lds	r18, 0x08DE	; 0x8008de <pxEnd>
     8a4:	30 91 df 08 	lds	r19, 0x08DF	; 0x8008df <pxEnd+0x1>
     8a8:	e2 17       	cp	r30, r18
     8aa:	f3 07       	cpc	r31, r19
     8ac:	71 f0       	breq	.+28     	; 0x8ca <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     8ae:	22 81       	ldd	r18, Z+2	; 0x02
     8b0:	33 81       	ldd	r19, Z+3	; 0x03
     8b2:	82 0f       	add	r24, r18
     8b4:	93 1f       	adc	r25, r19
     8b6:	9b 83       	std	Y+3, r25	; 0x03
     8b8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     8ba:	ed 91       	ld	r30, X+
     8bc:	fc 91       	ld	r31, X
     8be:	11 97       	sbiw	r26, 0x01	; 1
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	99 83       	std	Y+1, r25	; 0x01
     8c6:	88 83       	st	Y, r24
     8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     8ca:	39 83       	std	Y+1, r19	; 0x01
     8cc:	28 83       	st	Y, r18
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     8d0:	f9 83       	std	Y+1, r31	; 0x01
     8d2:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     8d4:	ca 17       	cp	r28, r26
     8d6:	db 07       	cpc	r29, r27
     8d8:	11 f0       	breq	.+4      	; 0x8de <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     8da:	cd 93       	st	X+, r28
     8dc:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     8f2:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     8f6:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <pxEnd>
     8fa:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <pxEnd+0x1>
     8fe:	89 2b       	or	r24, r25
     900:	09 f4       	brne	.+2      	; 0x904 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     902:	7d df       	rcall	.-262    	; 0x7fe <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     904:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <xBlockAllocatedBit>
     908:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <xBlockAllocatedBit+0x1>
     90c:	80 23       	and	r24, r16
     90e:	91 23       	and	r25, r17
     910:	89 2b       	or	r24, r25
     912:	09 f0       	breq	.+2      	; 0x916 <pvPortMalloc+0x32>
     914:	76 c0       	rjmp	.+236    	; 0xa02 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     916:	01 15       	cp	r16, r1
     918:	11 05       	cpc	r17, r1
     91a:	49 f0       	breq	.+18     	; 0x92e <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     91c:	c8 01       	movw	r24, r16
     91e:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     920:	08 17       	cp	r16, r24
     922:	19 07       	cpc	r17, r25
     924:	18 f0       	brcs	.+6      	; 0x92c <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     926:	00 e0       	ldi	r16, 0x00	; 0
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	01 c0       	rjmp	.+2      	; 0x92e <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     92c:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     92e:	01 15       	cp	r16, r1
     930:	11 05       	cpc	r17, r1
     932:	09 f4       	brne	.+2      	; 0x936 <pvPortMalloc+0x52>
     934:	69 c0       	rjmp	.+210    	; 0xa08 <pvPortMalloc+0x124>
     936:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <xFreeBytesRemaining>
     93a:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <xFreeBytesRemaining+0x1>
     93e:	80 17       	cp	r24, r16
     940:	91 07       	cpc	r25, r17
     942:	08 f4       	brcc	.+2      	; 0x946 <pvPortMalloc+0x62>
     944:	64 c0       	rjmp	.+200    	; 0xa0e <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     946:	c0 91 e0 08 	lds	r28, 0x08E0	; 0x8008e0 <xStart>
     94a:	d0 91 e1 08 	lds	r29, 0x08E1	; 0x8008e1 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     94e:	e0 ee       	ldi	r30, 0xE0	; 224
     950:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     952:	02 c0       	rjmp	.+4      	; 0x958 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     954:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     956:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	9b 81       	ldd	r25, Y+3	; 0x03
     95c:	80 17       	cp	r24, r16
     95e:	91 07       	cpc	r25, r17
     960:	20 f4       	brcc	.+8      	; 0x96a <pvPortMalloc+0x86>
     962:	88 81       	ld	r24, Y
     964:	99 81       	ldd	r25, Y+1	; 0x01
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	a9 f7       	brne	.-22     	; 0x954 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     96a:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <pxEnd>
     96e:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <pxEnd+0x1>
     972:	c8 17       	cp	r28, r24
     974:	d9 07       	cpc	r29, r25
     976:	09 f4       	brne	.+2      	; 0x97a <pvPortMalloc+0x96>
     978:	4d c0       	rjmp	.+154    	; 0xa14 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     97a:	e0 80       	ld	r14, Z
     97c:	f1 80       	ldd	r15, Z+1	; 0x01
     97e:	84 e0       	ldi	r24, 0x04	; 4
     980:	e8 0e       	add	r14, r24
     982:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     984:	88 81       	ld	r24, Y
     986:	99 81       	ldd	r25, Y+1	; 0x01
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     98c:	2a 81       	ldd	r18, Y+2	; 0x02
     98e:	3b 81       	ldd	r19, Y+3	; 0x03
     990:	20 1b       	sub	r18, r16
     992:	31 0b       	sbc	r19, r17
     994:	29 30       	cpi	r18, 0x09	; 9
     996:	31 05       	cpc	r19, r1
     998:	48 f0       	brcs	.+18     	; 0x9ac <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     99a:	ce 01       	movw	r24, r28
     99c:	80 0f       	add	r24, r16
     99e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     9a0:	fc 01       	movw	r30, r24
     9a2:	33 83       	std	Z+3, r19	; 0x03
     9a4:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     9a6:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     9a8:	0a 83       	std	Y+2, r16	; 0x02
     9aa:	52 df       	rcall	.-348    	; 0x850 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     9ac:	2a 81       	ldd	r18, Y+2	; 0x02
     9ae:	3b 81       	ldd	r19, Y+3	; 0x03
     9b0:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <xFreeBytesRemaining>
     9b4:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <xFreeBytesRemaining+0x1>
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <xFreeBytesRemaining+0x1>
     9c0:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     9c4:	40 91 da 08 	lds	r20, 0x08DA	; 0x8008da <xMinimumEverFreeBytesRemaining>
     9c8:	50 91 db 08 	lds	r21, 0x08DB	; 0x8008db <xMinimumEverFreeBytesRemaining+0x1>
     9cc:	84 17       	cp	r24, r20
     9ce:	95 07       	cpc	r25, r21
     9d0:	20 f4       	brcc	.+8      	; 0x9da <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     9d2:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <xMinimumEverFreeBytesRemaining+0x1>
     9d6:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     9da:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <xBlockAllocatedBit>
     9de:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <xBlockAllocatedBit+0x1>
     9e2:	28 2b       	or	r18, r24
     9e4:	39 2b       	or	r19, r25
     9e6:	3b 83       	std	Y+3, r19	; 0x03
     9e8:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     9ea:	19 82       	std	Y+1, r1	; 0x01
     9ec:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     9ee:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <xNumberOfSuccessfulAllocations>
     9f2:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <xNumberOfSuccessfulAllocations+0x1>
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <xNumberOfSuccessfulAllocations+0x1>
     9fc:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <xNumberOfSuccessfulAllocations>
     a00:	0b c0       	rjmp	.+22     	; 0xa18 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     a02:	e1 2c       	mov	r14, r1
     a04:	f1 2c       	mov	r15, r1
     a06:	08 c0       	rjmp	.+16     	; 0xa18 <pvPortMalloc+0x134>
     a08:	e1 2c       	mov	r14, r1
     a0a:	f1 2c       	mov	r15, r1
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <pvPortMalloc+0x134>
     a0e:	e1 2c       	mov	r14, r1
     a10:	f1 2c       	mov	r15, r1
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <pvPortMalloc+0x134>
     a14:	e1 2c       	mov	r14, r1
     a16:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     a18:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     a1c:	e1 14       	cp	r14, r1
     a1e:	f1 04       	cpc	r15, r1
     a20:	11 f4       	brne	.+4      	; 0xa26 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     a22:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     a26:	c7 01       	movw	r24, r14
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	08 95       	ret

00000a36 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     a3e:	00 97       	sbiw	r24, 0x00	; 0
     a40:	91 f1       	breq	.+100    	; 0xaa6 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     a42:	ec 01       	movw	r28, r24
     a44:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     a46:	4a 81       	ldd	r20, Y+2	; 0x02
     a48:	5b 81       	ldd	r21, Y+3	; 0x03
     a4a:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <xBlockAllocatedBit>
     a4e:	30 91 d5 08 	lds	r19, 0x08D5	; 0x8008d5 <xBlockAllocatedBit+0x1>
     a52:	ba 01       	movw	r22, r20
     a54:	62 23       	and	r22, r18
     a56:	73 23       	and	r23, r19
     a58:	67 2b       	or	r22, r23
     a5a:	29 f1       	breq	.+74     	; 0xaa6 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     a5c:	68 81       	ld	r22, Y
     a5e:	79 81       	ldd	r23, Y+1	; 0x01
     a60:	67 2b       	or	r22, r23
     a62:	09 f5       	brne	.+66     	; 0xaa6 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     a64:	20 95       	com	r18
     a66:	30 95       	com	r19
     a68:	24 23       	and	r18, r20
     a6a:	35 23       	and	r19, r21
     a6c:	3b 83       	std	Y+3, r19	; 0x03
     a6e:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     a70:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     a74:	8a 81       	ldd	r24, Y+2	; 0x02
     a76:	9b 81       	ldd	r25, Y+3	; 0x03
     a78:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <xFreeBytesRemaining>
     a7c:	30 91 dd 08 	lds	r19, 0x08DD	; 0x8008dd <xFreeBytesRemaining+0x1>
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <xFreeBytesRemaining+0x1>
     a88:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     a8c:	ce 01       	movw	r24, r28
     a8e:	e0 de       	rcall	.-576    	; 0x850 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     a90:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <xNumberOfSuccessfulFrees>
     a94:	90 91 d7 08 	lds	r25, 0x08D7	; 0x8008d7 <xNumberOfSuccessfulFrees+0x1>
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <xNumberOfSuccessfulFrees+0x1>
     a9e:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     aa2:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	08 95       	ret

00000ab0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     ab0:	fc 01       	movw	r30, r24
     ab2:	03 96       	adiw	r24, 0x03	; 3
     ab4:	92 83       	std	Z+2, r25	; 0x02
     ab6:	81 83       	std	Z+1, r24	; 0x01
     ab8:	4f ef       	ldi	r20, 0xFF	; 255
     aba:	5f ef       	ldi	r21, 0xFF	; 255
     abc:	ba 01       	movw	r22, r20
     abe:	43 83       	std	Z+3, r20	; 0x03
     ac0:	54 83       	std	Z+4, r21	; 0x04
     ac2:	65 83       	std	Z+5, r22	; 0x05
     ac4:	76 83       	std	Z+6, r23	; 0x06
     ac6:	90 87       	std	Z+8, r25	; 0x08
     ac8:	87 83       	std	Z+7, r24	; 0x07
     aca:	92 87       	std	Z+10, r25	; 0x0a
     acc:	81 87       	std	Z+9, r24	; 0x09
     ace:	10 82       	st	Z, r1
     ad0:	08 95       	ret

00000ad2 <vListInitialiseItem>:
     ad2:	fc 01       	movw	r30, r24
     ad4:	13 86       	std	Z+11, r1	; 0x0b
     ad6:	12 86       	std	Z+10, r1	; 0x0a
     ad8:	08 95       	ret

00000ada <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     ae4:	08 81       	ld	r16, Y
     ae6:	19 81       	ldd	r17, Y+1	; 0x01
     ae8:	2a 81       	ldd	r18, Y+2	; 0x02
     aea:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     aec:	0f 3f       	cpi	r16, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	14 07       	cpc	r17, r20
     af2:	24 07       	cpc	r18, r20
     af4:	34 07       	cpc	r19, r20
     af6:	21 f4       	brne	.+8      	; 0xb00 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     af8:	fc 01       	movw	r30, r24
     afa:	a1 85       	ldd	r26, Z+9	; 0x09
     afc:	b2 85       	ldd	r27, Z+10	; 0x0a
     afe:	11 c0       	rjmp	.+34     	; 0xb22 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     b00:	dc 01       	movw	r26, r24
     b02:	13 96       	adiw	r26, 0x03	; 3
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <vListInsert+0x2e>
     b06:	df 01       	movw	r26, r30
     b08:	14 96       	adiw	r26, 0x04	; 4
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	15 97       	sbiw	r26, 0x05	; 5
     b10:	40 81       	ld	r20, Z
     b12:	51 81       	ldd	r21, Z+1	; 0x01
     b14:	62 81       	ldd	r22, Z+2	; 0x02
     b16:	73 81       	ldd	r23, Z+3	; 0x03
     b18:	04 17       	cp	r16, r20
     b1a:	15 07       	cpc	r17, r21
     b1c:	26 07       	cpc	r18, r22
     b1e:	37 07       	cpc	r19, r23
     b20:	90 f7       	brcc	.-28     	; 0xb06 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     b22:	14 96       	adiw	r26, 0x04	; 4
     b24:	ed 91       	ld	r30, X+
     b26:	fc 91       	ld	r31, X
     b28:	15 97       	sbiw	r26, 0x05	; 5
     b2a:	fd 83       	std	Y+5, r31	; 0x05
     b2c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b2e:	d7 83       	std	Z+7, r29	; 0x07
     b30:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     b32:	bf 83       	std	Y+7, r27	; 0x07
     b34:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     b36:	15 96       	adiw	r26, 0x05	; 5
     b38:	dc 93       	st	X, r29
     b3a:	ce 93       	st	-X, r28
     b3c:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     b3e:	9b 87       	std	Y+11, r25	; 0x0b
     b40:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     b42:	fc 01       	movw	r30, r24
     b44:	20 81       	ld	r18, Z
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	20 83       	st	Z, r18
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     b5a:	a2 85       	ldd	r26, Z+10	; 0x0a
     b5c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b5e:	c4 81       	ldd	r28, Z+4	; 0x04
     b60:	d5 81       	ldd	r29, Z+5	; 0x05
     b62:	86 81       	ldd	r24, Z+6	; 0x06
     b64:	97 81       	ldd	r25, Z+7	; 0x07
     b66:	9f 83       	std	Y+7, r25	; 0x07
     b68:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b6a:	c6 81       	ldd	r28, Z+6	; 0x06
     b6c:	d7 81       	ldd	r29, Z+7	; 0x07
     b6e:	84 81       	ldd	r24, Z+4	; 0x04
     b70:	95 81       	ldd	r25, Z+5	; 0x05
     b72:	9d 83       	std	Y+5, r25	; 0x05
     b74:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     b76:	11 96       	adiw	r26, 0x01	; 1
     b78:	8d 91       	ld	r24, X+
     b7a:	9c 91       	ld	r25, X
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	e8 17       	cp	r30, r24
     b80:	f9 07       	cpc	r31, r25
     b82:	31 f4       	brne	.+12     	; 0xb90 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b84:	86 81       	ldd	r24, Z+6	; 0x06
     b86:	97 81       	ldd	r25, Z+7	; 0x07
     b88:	12 96       	adiw	r26, 0x02	; 2
     b8a:	9c 93       	st	X, r25
     b8c:	8e 93       	st	-X, r24
     b8e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b90:	13 86       	std	Z+11, r1	; 0x0b
     b92:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     b94:	8c 91       	ld	r24, X
     b96:	81 50       	subi	r24, 0x01	; 1
     b98:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     b9a:	8c 91       	ld	r24, X
}
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     ba2:	a8 95       	wdr
     ba4:	90 ec       	ldi	r25, 0xC0	; 192
     ba6:	88 e1       	ldi	r24, 0x18	; 24
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	a8 95       	wdr
     bae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     bb8:	08 95       	ret

00000bba <pxPortInitialiseStack>:
     bba:	fc 01       	movw	r30, r24
     bbc:	60 83       	st	Z, r22
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	70 83       	st	Z, r23
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	10 82       	st	Z, r1
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	10 82       	st	Z, r1
     bca:	31 97       	sbiw	r30, 0x01	; 1
     bcc:	20 e8       	ldi	r18, 0x80	; 128
     bce:	20 83       	st	Z, r18
     bd0:	31 97       	sbiw	r30, 0x01	; 1
     bd2:	10 82       	st	Z, r1
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	10 82       	st	Z, r1
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	10 82       	st	Z, r1
     bdc:	77 97       	sbiw	r30, 0x17	; 23
     bde:	40 83       	st	Z, r20
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	50 83       	st	Z, r21
     be4:	86 97       	sbiw	r24, 0x26	; 38
     be6:	08 95       	ret

00000be8 <xPortStartScheduler>:
     be8:	dc df       	rcall	.-72     	; 0xba2 <prvSetupTimerInterrupt>
     bea:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
     bee:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
     bf2:	cd 91       	ld	r28, X+
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	dd 91       	ld	r29, X+
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	ff 91       	pop	r31
     bfc:	ef 91       	pop	r30
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	9f 90       	pop	r9
     c28:	8f 90       	pop	r8
     c2a:	7f 90       	pop	r7
     c2c:	6f 90       	pop	r6
     c2e:	5f 90       	pop	r5
     c30:	4f 90       	pop	r4
     c32:	3f 90       	pop	r3
     c34:	2f 90       	pop	r2
     c36:	1f 90       	pop	r1
     c38:	0f 90       	pop	r0
     c3a:	0c be       	out	0x3c, r0	; 60
     c3c:	0f 90       	pop	r0
     c3e:	0b be       	out	0x3b, r0	; 59
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	0f 90       	pop	r0
     c46:	08 95       	ret
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	08 95       	ret

00000c4c <vPortYield>:
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	0f 92       	push	r0
     c54:	0b b6       	in	r0, 0x3b	; 59
     c56:	0f 92       	push	r0
     c58:	0c b6       	in	r0, 0x3c	; 60
     c5a:	0f 92       	push	r0
     c5c:	1f 92       	push	r1
     c5e:	11 24       	eor	r1, r1
     c60:	2f 92       	push	r2
     c62:	3f 92       	push	r3
     c64:	4f 92       	push	r4
     c66:	5f 92       	push	r5
     c68:	6f 92       	push	r6
     c6a:	7f 92       	push	r7
     c6c:	8f 92       	push	r8
     c6e:	9f 92       	push	r9
     c70:	af 92       	push	r10
     c72:	bf 92       	push	r11
     c74:	cf 92       	push	r12
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
     c9c:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
     ca0:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
     ca4:	0d b6       	in	r0, 0x3d	; 61
     ca6:	0d 92       	st	X+, r0
     ca8:	0e b6       	in	r0, 0x3e	; 62
     caa:	0d 92       	st	X+, r0
     cac:	0e 94 08 12 	call	0x2410	; 0x2410 <vTaskSwitchContext>
     cb0:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
     cb4:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
     cb8:	cd 91       	ld	r28, X+
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	dd 91       	ld	r29, X+
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	bf 90       	pop	r11
     cea:	af 90       	pop	r10
     cec:	9f 90       	pop	r9
     cee:	8f 90       	pop	r8
     cf0:	7f 90       	pop	r7
     cf2:	6f 90       	pop	r6
     cf4:	5f 90       	pop	r5
     cf6:	4f 90       	pop	r4
     cf8:	3f 90       	pop	r3
     cfa:	2f 90       	pop	r2
     cfc:	1f 90       	pop	r1
     cfe:	0f 90       	pop	r0
     d00:	0c be       	out	0x3c, r0	; 60
     d02:	0f 90       	pop	r0
     d04:	0b be       	out	0x3b, r0	; 59
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	08 95       	ret

00000d0e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	0f 92       	push	r0
     d16:	0b b6       	in	r0, 0x3b	; 59
     d18:	0f 92       	push	r0
     d1a:	0c b6       	in	r0, 0x3c	; 60
     d1c:	0f 92       	push	r0
     d1e:	1f 92       	push	r1
     d20:	11 24       	eor	r1, r1
     d22:	2f 92       	push	r2
     d24:	3f 92       	push	r3
     d26:	4f 92       	push	r4
     d28:	5f 92       	push	r5
     d2a:	6f 92       	push	r6
     d2c:	7f 92       	push	r7
     d2e:	8f 92       	push	r8
     d30:	9f 92       	push	r9
     d32:	af 92       	push	r10
     d34:	bf 92       	push	r11
     d36:	cf 92       	push	r12
     d38:	df 92       	push	r13
     d3a:	ef 92       	push	r14
     d3c:	ff 92       	push	r15
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	2f 93       	push	r18
     d44:	3f 93       	push	r19
     d46:	4f 93       	push	r20
     d48:	5f 93       	push	r21
     d4a:	6f 93       	push	r22
     d4c:	7f 93       	push	r23
     d4e:	8f 93       	push	r24
     d50:	9f 93       	push	r25
     d52:	af 93       	push	r26
     d54:	bf 93       	push	r27
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
     d5e:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
     d62:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
     d66:	0d b6       	in	r0, 0x3d	; 61
     d68:	0d 92       	st	X+, r0
     d6a:	0e b6       	in	r0, 0x3e	; 62
     d6c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     d6e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     d70:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <xTaskIncrementTick>
     d74:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     d76:	0e 94 08 12 	call	0x2410	; 0x2410 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     d7a:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
     d7e:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
     d82:	cd 91       	ld	r28, X+
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	dd 91       	ld	r29, X+
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	ff 91       	pop	r31
     d8c:	ef 91       	pop	r30
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	7f 91       	pop	r23
     d9c:	6f 91       	pop	r22
     d9e:	5f 91       	pop	r21
     da0:	4f 91       	pop	r20
     da2:	3f 91       	pop	r19
     da4:	2f 91       	pop	r18
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	9f 90       	pop	r9
     db8:	8f 90       	pop	r8
     dba:	7f 90       	pop	r7
     dbc:	6f 90       	pop	r6
     dbe:	5f 90       	pop	r5
     dc0:	4f 90       	pop	r4
     dc2:	3f 90       	pop	r3
     dc4:	2f 90       	pop	r2
     dc6:	1f 90       	pop	r1
     dc8:	0f 90       	pop	r0
     dca:	0c be       	out	0x3c, r0	; 60
     dcc:	0f 90       	pop	r0
     dce:	0b be       	out	0x3b, r0	; 59
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     dd6:	08 95       	ret

00000dd8 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     dd8:	9a df       	rcall	.-204    	; 0xd0e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     dda:	18 95       	reti

00000ddc <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	0f 92       	push	r0
     de2:	fc 01       	movw	r30, r24
     de4:	86 8d       	ldd	r24, Z+30	; 0x1e
     de6:	81 11       	cpse	r24, r1
     de8:	02 c0       	rjmp	.+4      	; 0xdee <prvIsQueueEmpty+0x12>
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <prvIsQueueEmpty+0x14>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	08 95       	ret

00000df6 <prvIsQueueFull>:
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	0f 92       	push	r0
     dfc:	fc 01       	movw	r30, r24
     dfe:	26 8d       	ldd	r18, Z+30	; 0x1e
     e00:	87 8d       	ldd	r24, Z+31	; 0x1f
     e02:	28 13       	cpse	r18, r24
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <prvIsQueueFull+0x14>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <prvIsQueueFull+0x16>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	08 95       	ret

00000e12 <prvCopyDataToQueue>:
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	ec 01       	movw	r28, r24
     e1c:	04 2f       	mov	r16, r20
     e1e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     e20:	48 a1       	ldd	r20, Y+32	; 0x20
     e22:	41 11       	cpse	r20, r1
     e24:	0c c0       	rjmp	.+24     	; 0xe3e <prvCopyDataToQueue+0x2c>
     e26:	88 81       	ld	r24, Y
     e28:	99 81       	ldd	r25, Y+1	; 0x01
     e2a:	89 2b       	or	r24, r25
     e2c:	09 f0       	breq	.+2      	; 0xe30 <prvCopyDataToQueue+0x1e>
     e2e:	42 c0       	rjmp	.+132    	; 0xeb4 <prvCopyDataToQueue+0xa2>
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
     e32:	9d 81       	ldd	r25, Y+5	; 0x05
     e34:	0e 94 fd 14 	call	0x29fa	; 0x29fa <xTaskPriorityDisinherit>
     e38:	1d 82       	std	Y+5, r1	; 0x05
     e3a:	1c 82       	std	Y+4, r1	; 0x04
     e3c:	42 c0       	rjmp	.+132    	; 0xec2 <prvCopyDataToQueue+0xb0>
     e3e:	01 11       	cpse	r16, r1
     e40:	17 c0       	rjmp	.+46     	; 0xe70 <prvCopyDataToQueue+0x5e>
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	0e 94 14 33 	call	0x6628	; 0x6628 <memcpy>
     e4c:	28 a1       	ldd	r18, Y+32	; 0x20
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	9b 81       	ldd	r25, Y+3	; 0x03
     e52:	82 0f       	add	r24, r18
     e54:	91 1d       	adc	r25, r1
     e56:	9b 83       	std	Y+3, r25	; 0x03
     e58:	8a 83       	std	Y+2, r24	; 0x02
     e5a:	2c 81       	ldd	r18, Y+4	; 0x04
     e5c:	3d 81       	ldd	r19, Y+5	; 0x05
     e5e:	82 17       	cp	r24, r18
     e60:	93 07       	cpc	r25, r19
     e62:	50 f1       	brcs	.+84     	; 0xeb8 <prvCopyDataToQueue+0xa6>
     e64:	88 81       	ld	r24, Y
     e66:	99 81       	ldd	r25, Y+1	; 0x01
     e68:	9b 83       	std	Y+3, r25	; 0x03
     e6a:	8a 83       	std	Y+2, r24	; 0x02
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	29 c0       	rjmp	.+82     	; 0xec2 <prvCopyDataToQueue+0xb0>
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	8e 81       	ldd	r24, Y+6	; 0x06
     e74:	9f 81       	ldd	r25, Y+7	; 0x07
     e76:	0e 94 14 33 	call	0x6628	; 0x6628 <memcpy>
     e7a:	88 a1       	ldd	r24, Y+32	; 0x20
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	91 95       	neg	r25
     e80:	81 95       	neg	r24
     e82:	91 09       	sbc	r25, r1
     e84:	2e 81       	ldd	r18, Y+6	; 0x06
     e86:	3f 81       	ldd	r19, Y+7	; 0x07
     e88:	28 0f       	add	r18, r24
     e8a:	39 1f       	adc	r19, r25
     e8c:	3f 83       	std	Y+7, r19	; 0x07
     e8e:	2e 83       	std	Y+6, r18	; 0x06
     e90:	48 81       	ld	r20, Y
     e92:	59 81       	ldd	r21, Y+1	; 0x01
     e94:	24 17       	cp	r18, r20
     e96:	35 07       	cpc	r19, r21
     e98:	30 f4       	brcc	.+12     	; 0xea6 <prvCopyDataToQueue+0x94>
     e9a:	2c 81       	ldd	r18, Y+4	; 0x04
     e9c:	3d 81       	ldd	r19, Y+5	; 0x05
     e9e:	82 0f       	add	r24, r18
     ea0:	93 1f       	adc	r25, r19
     ea2:	9f 83       	std	Y+7, r25	; 0x07
     ea4:	8e 83       	std	Y+6, r24	; 0x06
     ea6:	02 30       	cpi	r16, 0x02	; 2
     ea8:	49 f4       	brne	.+18     	; 0xebc <prvCopyDataToQueue+0xaa>
     eaa:	11 23       	and	r17, r17
     eac:	49 f0       	breq	.+18     	; 0xec0 <prvCopyDataToQueue+0xae>
     eae:	11 50       	subi	r17, 0x01	; 1
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <prvCopyDataToQueue+0xb0>
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <prvCopyDataToQueue+0xb0>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <prvCopyDataToQueue+0xb0>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <prvCopyDataToQueue+0xb0>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	1f 5f       	subi	r17, 0xFF	; 255
     ec4:	1e 8f       	std	Y+30, r17	; 0x1e
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	08 95       	ret

00000ed0 <prvCopyDataFromQueue>:
     ed0:	fc 01       	movw	r30, r24
     ed2:	40 a1       	ldd	r20, Z+32	; 0x20
     ed4:	44 23       	and	r20, r20
     ed6:	a9 f0       	breq	.+42     	; 0xf02 <prvCopyDataFromQueue+0x32>
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	26 81       	ldd	r18, Z+6	; 0x06
     edc:	37 81       	ldd	r19, Z+7	; 0x07
     ede:	24 0f       	add	r18, r20
     ee0:	35 1f       	adc	r19, r21
     ee2:	37 83       	std	Z+7, r19	; 0x07
     ee4:	26 83       	std	Z+6, r18	; 0x06
     ee6:	84 81       	ldd	r24, Z+4	; 0x04
     ee8:	95 81       	ldd	r25, Z+5	; 0x05
     eea:	28 17       	cp	r18, r24
     eec:	39 07       	cpc	r19, r25
     eee:	20 f0       	brcs	.+8      	; 0xef8 <prvCopyDataFromQueue+0x28>
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	97 83       	std	Z+7, r25	; 0x07
     ef6:	86 83       	std	Z+6, r24	; 0x06
     ef8:	cb 01       	movw	r24, r22
     efa:	66 81       	ldd	r22, Z+6	; 0x06
     efc:	77 81       	ldd	r23, Z+7	; 0x07
     efe:	0c 94 14 33 	jmp	0x6628	; 0x6628 <memcpy>
     f02:	08 95       	ret

00000f04 <prvUnlockQueue>:
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	ec 01       	movw	r28, r24
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	0f 92       	push	r0
     f12:	1a a1       	ldd	r17, Y+34	; 0x22
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <prvUnlockQueue+0x28>
     f16:	8b 89       	ldd	r24, Y+19	; 0x13
     f18:	88 23       	and	r24, r24
     f1a:	51 f0       	breq	.+20     	; 0xf30 <prvUnlockQueue+0x2c>
     f1c:	ce 01       	movw	r24, r28
     f1e:	43 96       	adiw	r24, 0x13	; 19
     f20:	0e 94 10 13 	call	0x2620	; 0x2620 <xTaskRemoveFromEventList>
     f24:	81 11       	cpse	r24, r1
     f26:	0e 94 e6 14 	call	0x29cc	; 0x29cc <vTaskMissedYield>
     f2a:	11 50       	subi	r17, 0x01	; 1
     f2c:	11 16       	cp	r1, r17
     f2e:	9c f3       	brlt	.-26     	; 0xf16 <prvUnlockQueue+0x12>
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	8a a3       	std	Y+34, r24	; 0x22
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	0f 92       	push	r0
     f3e:	19 a1       	ldd	r17, Y+33	; 0x21
     f40:	0b c0       	rjmp	.+22     	; 0xf58 <prvUnlockQueue+0x54>
     f42:	88 85       	ldd	r24, Y+8	; 0x08
     f44:	88 23       	and	r24, r24
     f46:	51 f0       	breq	.+20     	; 0xf5c <prvUnlockQueue+0x58>
     f48:	ce 01       	movw	r24, r28
     f4a:	08 96       	adiw	r24, 0x08	; 8
     f4c:	0e 94 10 13 	call	0x2620	; 0x2620 <xTaskRemoveFromEventList>
     f50:	81 11       	cpse	r24, r1
     f52:	0e 94 e6 14 	call	0x29cc	; 0x29cc <vTaskMissedYield>
     f56:	11 50       	subi	r17, 0x01	; 1
     f58:	11 16       	cp	r1, r17
     f5a:	9c f3       	brlt	.-26     	; 0xf42 <prvUnlockQueue+0x3e>
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	89 a3       	std	Y+33, r24	; 0x21
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	08 95       	ret

00000f6c <xQueueGenericReset>:
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	0f 92       	push	r0
     f78:	e8 81       	ld	r30, Y
     f7a:	f9 81       	ldd	r31, Y+1	; 0x01
     f7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f7e:	28 a1       	ldd	r18, Y+32	; 0x20
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	82 9f       	mul	r24, r18
     f86:	a0 01       	movw	r20, r0
     f88:	83 9f       	mul	r24, r19
     f8a:	50 0d       	add	r21, r0
     f8c:	92 9f       	mul	r25, r18
     f8e:	50 0d       	add	r21, r0
     f90:	11 24       	eor	r1, r1
     f92:	4e 0f       	add	r20, r30
     f94:	5f 1f       	adc	r21, r31
     f96:	5d 83       	std	Y+5, r21	; 0x05
     f98:	4c 83       	std	Y+4, r20	; 0x04
     f9a:	1e 8e       	std	Y+30, r1	; 0x1e
     f9c:	fb 83       	std	Y+3, r31	; 0x03
     f9e:	ea 83       	std	Y+2, r30	; 0x02
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	28 9f       	mul	r18, r24
     fa4:	a0 01       	movw	r20, r0
     fa6:	29 9f       	mul	r18, r25
     fa8:	50 0d       	add	r21, r0
     faa:	38 9f       	mul	r19, r24
     fac:	50 0d       	add	r21, r0
     fae:	11 24       	eor	r1, r1
     fb0:	cf 01       	movw	r24, r30
     fb2:	84 0f       	add	r24, r20
     fb4:	95 1f       	adc	r25, r21
     fb6:	9f 83       	std	Y+7, r25	; 0x07
     fb8:	8e 83       	std	Y+6, r24	; 0x06
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	89 a3       	std	Y+33, r24	; 0x21
     fbe:	8a a3       	std	Y+34, r24	; 0x22
     fc0:	61 11       	cpse	r22, r1
     fc2:	0b c0       	rjmp	.+22     	; 0xfda <xQueueGenericReset+0x6e>
     fc4:	88 85       	ldd	r24, Y+8	; 0x08
     fc6:	88 23       	and	r24, r24
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <xQueueGenericReset+0x7a>
     fca:	ce 01       	movw	r24, r28
     fcc:	08 96       	adiw	r24, 0x08	; 8
     fce:	0e 94 10 13 	call	0x2620	; 0x2620 <xTaskRemoveFromEventList>
     fd2:	88 23       	and	r24, r24
     fd4:	41 f0       	breq	.+16     	; 0xfe6 <xQueueGenericReset+0x7a>
     fd6:	3a de       	rcall	.-908    	; 0xc4c <vPortYield>
     fd8:	06 c0       	rjmp	.+12     	; 0xfe6 <xQueueGenericReset+0x7a>
     fda:	ce 01       	movw	r24, r28
     fdc:	08 96       	adiw	r24, 0x08	; 8
     fde:	68 dd       	rcall	.-1328   	; 0xab0 <vListInitialise>
     fe0:	ce 01       	movw	r24, r28
     fe2:	43 96       	adiw	r24, 0x13	; 19
     fe4:	65 dd       	rcall	.-1334   	; 0xab0 <vListInitialise>
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <prvInitialiseNewQueue>:
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	f8 01       	movw	r30, r16
     ff8:	61 11       	cpse	r22, r1
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ffc:	11 83       	std	Z+1, r17	; 0x01
     ffe:	00 83       	st	Z, r16
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <__EEPROM_REGION_LENGTH__+0x6>
    1002:	51 83       	std	Z+1, r21	; 0x01
    1004:	40 83       	st	Z, r20
    1006:	87 8f       	std	Z+31, r24	; 0x1f
    1008:	60 a3       	std	Z+32, r22	; 0x20
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	cf 01       	movw	r24, r30
    100e:	ae df       	rcall	.-164    	; 0xf6c <xQueueGenericReset>
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <xQueueGenericCreate>:
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	f8 2e       	mov	r15, r24
    1026:	e6 2e       	mov	r14, r22
    1028:	d4 2e       	mov	r13, r20
    102a:	86 9f       	mul	r24, r22
    102c:	c0 01       	movw	r24, r0
    102e:	11 24       	eor	r1, r1
    1030:	83 96       	adiw	r24, 0x23	; 35
    1032:	58 dc       	rcall	.-1872   	; 0x8e4 <pvPortMalloc>
    1034:	ec 01       	movw	r28, r24
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	41 f0       	breq	.+16     	; 0x104a <xQueueGenericCreate+0x34>
    103a:	8c 01       	movw	r16, r24
    103c:	2d 2d       	mov	r18, r13
    103e:	ac 01       	movw	r20, r24
    1040:	4d 5d       	subi	r20, 0xDD	; 221
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	6e 2d       	mov	r22, r14
    1046:	8f 2d       	mov	r24, r15
    1048:	d4 df       	rcall	.-88     	; 0xff2 <prvInitialiseNewQueue>
    104a:	ce 01       	movw	r24, r28
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	08 95       	ret

0000105c <xQueueGenericSend>:
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	29 97       	sbiw	r28, 0x09	; 9
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	7c 01       	movw	r14, r24
    107e:	6b 01       	movw	r12, r22
    1080:	2e 83       	std	Y+6, r18	; 0x06
    1082:	3f 83       	std	Y+7, r19	; 0x07
    1084:	48 87       	std	Y+8, r20	; 0x08
    1086:	59 87       	std	Y+9, r21	; 0x09
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	0f 92       	push	r0
    1090:	f7 01       	movw	r30, r14
    1092:	96 8d       	ldd	r25, Z+30	; 0x1e
    1094:	87 8d       	ldd	r24, Z+31	; 0x1f
    1096:	98 17       	cp	r25, r24
    1098:	10 f0       	brcs	.+4      	; 0x109e <xQueueGenericSend+0x42>
    109a:	02 30       	cpi	r16, 0x02	; 2
    109c:	b1 f4       	brne	.+44     	; 0x10ca <xQueueGenericSend+0x6e>
    109e:	40 2f       	mov	r20, r16
    10a0:	b6 01       	movw	r22, r12
    10a2:	c7 01       	movw	r24, r14
    10a4:	b6 de       	rcall	.-660    	; 0xe12 <prvCopyDataToQueue>
    10a6:	f7 01       	movw	r30, r14
    10a8:	93 89       	ldd	r25, Z+19	; 0x13
    10aa:	99 23       	and	r25, r25
    10ac:	41 f0       	breq	.+16     	; 0x10be <xQueueGenericSend+0x62>
    10ae:	c7 01       	movw	r24, r14
    10b0:	43 96       	adiw	r24, 0x13	; 19
    10b2:	0e 94 10 13 	call	0x2620	; 0x2620 <xTaskRemoveFromEventList>
    10b6:	88 23       	and	r24, r24
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <xQueueGenericSend+0x66>
    10ba:	c8 dd       	rcall	.-1136   	; 0xc4c <vPortYield>
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <xQueueGenericSend+0x66>
    10be:	81 11       	cpse	r24, r1
    10c0:	c5 dd       	rcall	.-1142   	; 0xc4c <vPortYield>
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	4b c0       	rjmp	.+150    	; 0x1160 <xQueueGenericSend+0x104>
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	9f 81       	ldd	r25, Y+7	; 0x07
    10ce:	a8 85       	ldd	r26, Y+8	; 0x08
    10d0:	b9 85       	ldd	r27, Y+9	; 0x09
    10d2:	89 2b       	or	r24, r25
    10d4:	8a 2b       	or	r24, r26
    10d6:	8b 2b       	or	r24, r27
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <xQueueGenericSend+0x86>
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <xQueueGenericSend+0x104>
    10e2:	11 11       	cpse	r17, r1
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <xQueueGenericSend+0x94>
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	0e 94 6f 14 	call	0x28de	; 0x28de <vTaskInternalSetTimeOutState>
    10ee:	11 e0       	ldi	r17, 0x01	; 1
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	f1 d6       	rcall	.+3554   	; 0x1ed8 <vTaskSuspendAll>
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	0f 92       	push	r0
    10fc:	f7 01       	movw	r30, r14
    10fe:	81 a1       	ldd	r24, Z+33	; 0x21
    1100:	8f 3f       	cpi	r24, 0xFF	; 255
    1102:	09 f4       	brne	.+2      	; 0x1106 <xQueueGenericSend+0xaa>
    1104:	11 a2       	std	Z+33, r1	; 0x21
    1106:	f7 01       	movw	r30, r14
    1108:	82 a1       	ldd	r24, Z+34	; 0x22
    110a:	8f 3f       	cpi	r24, 0xFF	; 255
    110c:	09 f4       	brne	.+2      	; 0x1110 <xQueueGenericSend+0xb4>
    110e:	12 a2       	std	Z+34, r1	; 0x22
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	be 01       	movw	r22, r28
    1116:	6a 5f       	subi	r22, 0xFA	; 250
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	0e 94 80 14 	call	0x2900	; 0x2900 <xTaskCheckForTimeOut>
    1122:	81 11       	cpse	r24, r1
    1124:	19 c0       	rjmp	.+50     	; 0x1158 <xQueueGenericSend+0xfc>
    1126:	c7 01       	movw	r24, r14
    1128:	66 de       	rcall	.-820    	; 0xdf6 <prvIsQueueFull>
    112a:	88 23       	and	r24, r24
    112c:	81 f0       	breq	.+32     	; 0x114e <xQueueGenericSend+0xf2>
    112e:	4e 81       	ldd	r20, Y+6	; 0x06
    1130:	5f 81       	ldd	r21, Y+7	; 0x07
    1132:	68 85       	ldd	r22, Y+8	; 0x08
    1134:	79 85       	ldd	r23, Y+9	; 0x09
    1136:	c7 01       	movw	r24, r14
    1138:	08 96       	adiw	r24, 0x08	; 8
    113a:	0e 94 6d 12 	call	0x24da	; 0x24da <vTaskPlaceOnEventList>
    113e:	c7 01       	movw	r24, r14
    1140:	e1 de       	rcall	.-574    	; 0xf04 <prvUnlockQueue>
    1142:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskResumeAll>
    1146:	81 11       	cpse	r24, r1
    1148:	a0 cf       	rjmp	.-192    	; 0x108a <xQueueGenericSend+0x2e>
    114a:	80 dd       	rcall	.-1280   	; 0xc4c <vPortYield>
    114c:	9e cf       	rjmp	.-196    	; 0x108a <xQueueGenericSend+0x2e>
    114e:	c7 01       	movw	r24, r14
    1150:	d9 de       	rcall	.-590    	; 0xf04 <prvUnlockQueue>
    1152:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskResumeAll>
    1156:	99 cf       	rjmp	.-206    	; 0x108a <xQueueGenericSend+0x2e>
    1158:	c7 01       	movw	r24, r14
    115a:	d4 de       	rcall	.-600    	; 0xf04 <prvUnlockQueue>
    115c:	fd d7       	rcall	.+4090   	; 0x2158 <xTaskResumeAll>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	29 96       	adiw	r28, 0x09	; 9
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	08 95       	ret

0000117e <xQueueGenericSendFromISR>:
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	8a 01       	movw	r16, r20
    118c:	fc 01       	movw	r30, r24
    118e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1190:	37 8d       	ldd	r19, Z+31	; 0x1f
    1192:	53 17       	cp	r21, r19
    1194:	10 f0       	brcs	.+4      	; 0x119a <xQueueGenericSendFromISR+0x1c>
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	f9 f4       	brne	.+62     	; 0x11d8 <xQueueGenericSendFromISR+0x5a>
    119a:	42 2f       	mov	r20, r18
    119c:	78 01       	movw	r14, r16
    119e:	ec 01       	movw	r28, r24
    11a0:	1a a1       	ldd	r17, Y+34	; 0x22
    11a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a4:	ce 01       	movw	r24, r28
    11a6:	35 de       	rcall	.-918    	; 0xe12 <prvCopyDataToQueue>
    11a8:	1f 3f       	cpi	r17, 0xFF	; 255
    11aa:	81 f4       	brne	.+32     	; 0x11cc <xQueueGenericSendFromISR+0x4e>
    11ac:	8b 89       	ldd	r24, Y+19	; 0x13
    11ae:	88 23       	and	r24, r24
    11b0:	a9 f0       	breq	.+42     	; 0x11dc <xQueueGenericSendFromISR+0x5e>
    11b2:	ce 01       	movw	r24, r28
    11b4:	43 96       	adiw	r24, 0x13	; 19
    11b6:	0e 94 10 13 	call	0x2620	; 0x2620 <xTaskRemoveFromEventList>
    11ba:	88 23       	and	r24, r24
    11bc:	89 f0       	breq	.+34     	; 0x11e0 <xQueueGenericSendFromISR+0x62>
    11be:	e1 14       	cp	r14, r1
    11c0:	f1 04       	cpc	r15, r1
    11c2:	81 f0       	breq	.+32     	; 0x11e4 <xQueueGenericSendFromISR+0x66>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	f7 01       	movw	r30, r14
    11c8:	80 83       	st	Z, r24
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <xQueueGenericSendFromISR+0x68>
    11cc:	ff 24       	eor	r15, r15
    11ce:	f3 94       	inc	r15
    11d0:	f1 0e       	add	r15, r17
    11d2:	fa a2       	std	Y+34, r15	; 0x22
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	07 c0       	rjmp	.+14     	; 0x11e6 <xQueueGenericSendFromISR+0x68>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <xQueueGenericSendFromISR+0x68>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <xQueueGenericSendFromISR+0x68>
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <xQueueGenericSendFromISR+0x68>
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	08 95       	ret

000011f4 <xQueueReceive>:
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	29 97       	sbiw	r28, 0x09	; 9
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	8c 01       	movw	r16, r24
    1216:	6b 01       	movw	r12, r22
    1218:	2e 83       	std	Y+6, r18	; 0x06
    121a:	3f 83       	std	Y+7, r19	; 0x07
    121c:	48 87       	std	Y+8, r20	; 0x08
    121e:	59 87       	std	Y+9, r21	; 0x09
    1220:	e1 2c       	mov	r14, r1
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	0f 92       	push	r0
    1228:	f8 01       	movw	r30, r16
    122a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    122c:	ff 20       	and	r15, r15
    122e:	99 f0       	breq	.+38     	; 0x1256 <xQueueReceive+0x62>
    1230:	b6 01       	movw	r22, r12
    1232:	c8 01       	movw	r24, r16
    1234:	4d de       	rcall	.-870    	; 0xed0 <prvCopyDataFromQueue>
    1236:	fa 94       	dec	r15
    1238:	f8 01       	movw	r30, r16
    123a:	f6 8e       	std	Z+30, r15	; 0x1e
    123c:	80 85       	ldd	r24, Z+8	; 0x08
    123e:	88 23       	and	r24, r24
    1240:	31 f0       	breq	.+12     	; 0x124e <xQueueReceive+0x5a>
    1242:	c8 01       	movw	r24, r16
    1244:	08 96       	adiw	r24, 0x08	; 8
    1246:	0e 94 10 13 	call	0x2620	; 0x2620 <xTaskRemoveFromEventList>
    124a:	81 11       	cpse	r24, r1
    124c:	ff dc       	rcall	.-1538   	; 0xc4c <vPortYield>
    124e:	0f 90       	pop	r0
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	4f c0       	rjmp	.+158    	; 0x12f4 <xQueueReceive+0x100>
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	9f 81       	ldd	r25, Y+7	; 0x07
    125a:	a8 85       	ldd	r26, Y+8	; 0x08
    125c:	b9 85       	ldd	r27, Y+9	; 0x09
    125e:	89 2b       	or	r24, r25
    1260:	8a 2b       	or	r24, r26
    1262:	8b 2b       	or	r24, r27
    1264:	21 f4       	brne	.+8      	; 0x126e <xQueueReceive+0x7a>
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	43 c0       	rjmp	.+134    	; 0x12f4 <xQueueReceive+0x100>
    126e:	e1 10       	cpse	r14, r1
    1270:	06 c0       	rjmp	.+12     	; 0x127e <xQueueReceive+0x8a>
    1272:	ce 01       	movw	r24, r28
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	0e 94 6f 14 	call	0x28de	; 0x28de <vTaskInternalSetTimeOutState>
    127a:	ee 24       	eor	r14, r14
    127c:	e3 94       	inc	r14
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	2a d6       	rcall	.+3156   	; 0x1ed8 <vTaskSuspendAll>
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	0f 92       	push	r0
    128a:	f8 01       	movw	r30, r16
    128c:	81 a1       	ldd	r24, Z+33	; 0x21
    128e:	8f 3f       	cpi	r24, 0xFF	; 255
    1290:	09 f4       	brne	.+2      	; 0x1294 <xQueueReceive+0xa0>
    1292:	11 a2       	std	Z+33, r1	; 0x21
    1294:	f8 01       	movw	r30, r16
    1296:	82 a1       	ldd	r24, Z+34	; 0x22
    1298:	8f 3f       	cpi	r24, 0xFF	; 255
    129a:	09 f4       	brne	.+2      	; 0x129e <xQueueReceive+0xaa>
    129c:	12 a2       	std	Z+34, r1	; 0x22
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	be 01       	movw	r22, r28
    12a4:	6a 5f       	subi	r22, 0xFA	; 250
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	ce 01       	movw	r24, r28
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	0e 94 80 14 	call	0x2900	; 0x2900 <xTaskCheckForTimeOut>
    12b0:	81 11       	cpse	r24, r1
    12b2:	17 c0       	rjmp	.+46     	; 0x12e2 <xQueueReceive+0xee>
    12b4:	c8 01       	movw	r24, r16
    12b6:	92 dd       	rcall	.-1244   	; 0xddc <prvIsQueueEmpty>
    12b8:	88 23       	and	r24, r24
    12ba:	79 f0       	breq	.+30     	; 0x12da <xQueueReceive+0xe6>
    12bc:	4e 81       	ldd	r20, Y+6	; 0x06
    12be:	5f 81       	ldd	r21, Y+7	; 0x07
    12c0:	68 85       	ldd	r22, Y+8	; 0x08
    12c2:	79 85       	ldd	r23, Y+9	; 0x09
    12c4:	c8 01       	movw	r24, r16
    12c6:	43 96       	adiw	r24, 0x13	; 19
    12c8:	0e 94 6d 12 	call	0x24da	; 0x24da <vTaskPlaceOnEventList>
    12cc:	c8 01       	movw	r24, r16
    12ce:	1a de       	rcall	.-972    	; 0xf04 <prvUnlockQueue>
    12d0:	43 d7       	rcall	.+3718   	; 0x2158 <xTaskResumeAll>
    12d2:	81 11       	cpse	r24, r1
    12d4:	a6 cf       	rjmp	.-180    	; 0x1222 <xQueueReceive+0x2e>
    12d6:	ba dc       	rcall	.-1676   	; 0xc4c <vPortYield>
    12d8:	a4 cf       	rjmp	.-184    	; 0x1222 <xQueueReceive+0x2e>
    12da:	c8 01       	movw	r24, r16
    12dc:	13 de       	rcall	.-986    	; 0xf04 <prvUnlockQueue>
    12de:	3c d7       	rcall	.+3704   	; 0x2158 <xTaskResumeAll>
    12e0:	a0 cf       	rjmp	.-192    	; 0x1222 <xQueueReceive+0x2e>
    12e2:	c8 01       	movw	r24, r16
    12e4:	0f de       	rcall	.-994    	; 0xf04 <prvUnlockQueue>
    12e6:	38 d7       	rcall	.+3696   	; 0x2158 <xTaskResumeAll>
    12e8:	c8 01       	movw	r24, r16
    12ea:	78 dd       	rcall	.-1296   	; 0xddc <prvIsQueueEmpty>
    12ec:	88 23       	and	r24, r24
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <xQueueReceive+0xfe>
    12f0:	98 cf       	rjmp	.-208    	; 0x1222 <xQueueReceive+0x2e>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	29 96       	adiw	r28, 0x09	; 9
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	ef 90       	pop	r14
    130c:	df 90       	pop	r13
    130e:	cf 90       	pop	r12
    1310:	08 95       	ret

00001312 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	0f 92       	push	r0
    131e:	89 a1       	ldd	r24, Y+33	; 0x21
    1320:	8f 3f       	cpi	r24, 0xFF	; 255
    1322:	09 f4       	brne	.+2      	; 0x1326 <vQueueWaitForMessageRestricted+0x14>
    1324:	19 a2       	std	Y+33, r1	; 0x21
    1326:	8a a1       	ldd	r24, Y+34	; 0x22
    1328:	8f 3f       	cpi	r24, 0xFF	; 255
    132a:	09 f4       	brne	.+2      	; 0x132e <vQueueWaitForMessageRestricted+0x1c>
    132c:	1a a2       	std	Y+34, r1	; 0x22
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1332:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1334:	81 11       	cpse	r24, r1
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1338:	ce 01       	movw	r24, r28
    133a:	43 96       	adiw	r24, 0x13	; 19
    133c:	0e 94 ce 12 	call	0x259c	; 0x259c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1340:	ce 01       	movw	r24, r28
    1342:	e0 dd       	rcall	.-1088   	; 0xf04 <prvUnlockQueue>
    }
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    134a:	fc 01       	movw	r30, r24
    134c:	44 81       	ldd	r20, Z+4	; 0x04
    134e:	55 81       	ldd	r21, Z+5	; 0x05
    1350:	22 81       	ldd	r18, Z+2	; 0x02
    1352:	33 81       	ldd	r19, Z+3	; 0x03
    1354:	24 0f       	add	r18, r20
    1356:	35 1f       	adc	r19, r21
    1358:	80 81       	ld	r24, Z
    135a:	91 81       	ldd	r25, Z+1	; 0x01
    135c:	b9 01       	movw	r22, r18
    135e:	68 1b       	sub	r22, r24
    1360:	79 0b       	sbc	r23, r25
    1362:	cb 01       	movw	r24, r22
    1364:	64 17       	cp	r22, r20
    1366:	75 07       	cpc	r23, r21
    1368:	10 f0       	brcs	.+4      	; 0x136e <prvBytesInBuffer+0x24>
    136a:	84 1b       	sub	r24, r20
    136c:	95 0b       	sbc	r25, r21
    136e:	08 95       	ret

00001370 <prvInitialiseNewStreamBuffer>:
    1370:	0f 93       	push	r16
    1372:	fc 01       	movw	r30, r24
    1374:	8f e0       	ldi	r24, 0x0F	; 15
    1376:	df 01       	movw	r26, r30
    1378:	1d 92       	st	X+, r1
    137a:	8a 95       	dec	r24
    137c:	e9 f7       	brne	.-6      	; 0x1378 <prvInitialiseNewStreamBuffer+0x8>
    137e:	75 87       	std	Z+13, r23	; 0x0d
    1380:	64 87       	std	Z+12, r22	; 0x0c
    1382:	55 83       	std	Z+5, r21	; 0x05
    1384:	44 83       	std	Z+4, r20	; 0x04
    1386:	37 83       	std	Z+7, r19	; 0x07
    1388:	26 83       	std	Z+6, r18	; 0x06
    138a:	06 87       	std	Z+14, r16	; 0x0e
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <prvWriteBytesToBuffer>:
    1390:	af 92       	push	r10
    1392:	bf 92       	push	r11
    1394:	cf 92       	push	r12
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	6c 01       	movw	r12, r24
    13a6:	5b 01       	movw	r10, r22
    13a8:	7a 01       	movw	r14, r20
    13aa:	fc 01       	movw	r30, r24
    13ac:	c2 81       	ldd	r28, Z+2	; 0x02
    13ae:	d3 81       	ldd	r29, Z+3	; 0x03
    13b0:	04 81       	ldd	r16, Z+4	; 0x04
    13b2:	15 81       	ldd	r17, Z+5	; 0x05
    13b4:	0c 1b       	sub	r16, r28
    13b6:	1d 0b       	sbc	r17, r29
    13b8:	40 17       	cp	r20, r16
    13ba:	51 07       	cpc	r21, r17
    13bc:	08 f4       	brcc	.+2      	; 0x13c0 <prvWriteBytesToBuffer+0x30>
    13be:	8a 01       	movw	r16, r20
    13c0:	f6 01       	movw	r30, r12
    13c2:	84 85       	ldd	r24, Z+12	; 0x0c
    13c4:	95 85       	ldd	r25, Z+13	; 0x0d
    13c6:	a8 01       	movw	r20, r16
    13c8:	b5 01       	movw	r22, r10
    13ca:	8c 0f       	add	r24, r28
    13cc:	9d 1f       	adc	r25, r29
    13ce:	0e 94 14 33 	call	0x6628	; 0x6628 <memcpy>
    13d2:	0e 15       	cp	r16, r14
    13d4:	1f 05       	cpc	r17, r15
    13d6:	58 f4       	brcc	.+22     	; 0x13ee <prvWriteBytesToBuffer+0x5e>
    13d8:	a7 01       	movw	r20, r14
    13da:	40 1b       	sub	r20, r16
    13dc:	51 0b       	sbc	r21, r17
    13de:	b5 01       	movw	r22, r10
    13e0:	60 0f       	add	r22, r16
    13e2:	71 1f       	adc	r23, r17
    13e4:	f6 01       	movw	r30, r12
    13e6:	84 85       	ldd	r24, Z+12	; 0x0c
    13e8:	95 85       	ldd	r25, Z+13	; 0x0d
    13ea:	0e 94 14 33 	call	0x6628	; 0x6628 <memcpy>
    13ee:	ce 01       	movw	r24, r28
    13f0:	8e 0d       	add	r24, r14
    13f2:	9f 1d       	adc	r25, r15
    13f4:	f6 01       	movw	r30, r12
    13f6:	24 81       	ldd	r18, Z+4	; 0x04
    13f8:	35 81       	ldd	r19, Z+5	; 0x05
    13fa:	82 17       	cp	r24, r18
    13fc:	93 07       	cpc	r25, r19
    13fe:	10 f0       	brcs	.+4      	; 0x1404 <prvWriteBytesToBuffer+0x74>
    1400:	82 1b       	sub	r24, r18
    1402:	93 0b       	sbc	r25, r19
    1404:	f6 01       	movw	r30, r12
    1406:	93 83       	std	Z+3, r25	; 0x03
    1408:	82 83       	std	Z+2, r24	; 0x02
    140a:	c7 01       	movw	r24, r14
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	ff 90       	pop	r15
    1416:	ef 90       	pop	r14
    1418:	df 90       	pop	r13
    141a:	cf 90       	pop	r12
    141c:	bf 90       	pop	r11
    141e:	af 90       	pop	r10
    1420:	08 95       	ret

00001422 <prvWriteMessageToBuffer>:
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	1f 92       	push	r1
    1434:	1f 92       	push	r1
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	7c 01       	movw	r14, r24
    143c:	6b 01       	movw	r12, r22
    143e:	5a 83       	std	Y+2, r21	; 0x02
    1440:	49 83       	std	Y+1, r20	; 0x01
    1442:	21 15       	cp	r18, r1
    1444:	31 05       	cpc	r19, r1
    1446:	c1 f0       	breq	.+48     	; 0x1478 <prvWriteMessageToBuffer+0x56>
    1448:	fc 01       	movw	r30, r24
    144a:	86 85       	ldd	r24, Z+14	; 0x0e
    144c:	80 fd       	sbrc	r24, 0
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <prvWriteMessageToBuffer+0x3e>
    1450:	42 17       	cp	r20, r18
    1452:	53 07       	cpc	r21, r19
    1454:	08 f4       	brcc	.+2      	; 0x1458 <prvWriteMessageToBuffer+0x36>
    1456:	9a 01       	movw	r18, r20
    1458:	3a 83       	std	Y+2, r19	; 0x02
    145a:	29 83       	std	Y+1, r18	; 0x01
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	0f c0       	rjmp	.+30     	; 0x147e <prvWriteMessageToBuffer+0x5c>
    1460:	20 17       	cp	r18, r16
    1462:	31 07       	cpc	r19, r17
    1464:	58 f0       	brcs	.+22     	; 0x147c <prvWriteMessageToBuffer+0x5a>
    1466:	42 e0       	ldi	r20, 0x02	; 2
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	be 01       	movw	r22, r28
    146c:	6f 5f       	subi	r22, 0xFF	; 255
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	c7 01       	movw	r24, r14
    1472:	8e df       	rcall	.-228    	; 0x1390 <prvWriteBytesToBuffer>
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	03 c0       	rjmp	.+6      	; 0x147e <prvWriteMessageToBuffer+0x5c>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	01 c0       	rjmp	.+2      	; 0x147e <prvWriteMessageToBuffer+0x5c>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	88 23       	and	r24, r24
    1480:	31 f0       	breq	.+12     	; 0x148e <prvWriteMessageToBuffer+0x6c>
    1482:	49 81       	ldd	r20, Y+1	; 0x01
    1484:	5a 81       	ldd	r21, Y+2	; 0x02
    1486:	b6 01       	movw	r22, r12
    1488:	c7 01       	movw	r24, r14
    148a:	82 df       	rcall	.-252    	; 0x1390 <prvWriteBytesToBuffer>
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <prvWriteMessageToBuffer+0x70>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	08 95       	ret

000014a8 <prvReadBytesFromBuffer>:
    14a8:	af 92       	push	r10
    14aa:	bf 92       	push	r11
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	7c 01       	movw	r14, r24
    14be:	5b 01       	movw	r10, r22
    14c0:	e9 01       	movw	r28, r18
    14c2:	42 17       	cp	r20, r18
    14c4:	53 07       	cpc	r21, r19
    14c6:	08 f4       	brcc	.+2      	; 0x14ca <prvReadBytesFromBuffer+0x22>
    14c8:	ea 01       	movw	r28, r20
    14ca:	20 97       	sbiw	r28, 0x00	; 0
    14cc:	81 f1       	breq	.+96     	; 0x152e <prvReadBytesFromBuffer+0x86>
    14ce:	f7 01       	movw	r30, r14
    14d0:	00 81       	ld	r16, Z
    14d2:	11 81       	ldd	r17, Z+1	; 0x01
    14d4:	84 81       	ldd	r24, Z+4	; 0x04
    14d6:	95 81       	ldd	r25, Z+5	; 0x05
    14d8:	80 1b       	sub	r24, r16
    14da:	91 0b       	sbc	r25, r17
    14dc:	6e 01       	movw	r12, r28
    14de:	8c 17       	cp	r24, r28
    14e0:	9d 07       	cpc	r25, r29
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <prvReadBytesFromBuffer+0x3e>
    14e4:	6c 01       	movw	r12, r24
    14e6:	f7 01       	movw	r30, r14
    14e8:	64 85       	ldd	r22, Z+12	; 0x0c
    14ea:	75 85       	ldd	r23, Z+13	; 0x0d
    14ec:	60 0f       	add	r22, r16
    14ee:	71 1f       	adc	r23, r17
    14f0:	a6 01       	movw	r20, r12
    14f2:	c5 01       	movw	r24, r10
    14f4:	0e 94 14 33 	call	0x6628	; 0x6628 <memcpy>
    14f8:	cc 16       	cp	r12, r28
    14fa:	dd 06       	cpc	r13, r29
    14fc:	58 f4       	brcc	.+22     	; 0x1514 <prvReadBytesFromBuffer+0x6c>
    14fe:	ae 01       	movw	r20, r28
    1500:	4c 19       	sub	r20, r12
    1502:	5d 09       	sbc	r21, r13
    1504:	f7 01       	movw	r30, r14
    1506:	64 85       	ldd	r22, Z+12	; 0x0c
    1508:	75 85       	ldd	r23, Z+13	; 0x0d
    150a:	c5 01       	movw	r24, r10
    150c:	8c 0d       	add	r24, r12
    150e:	9d 1d       	adc	r25, r13
    1510:	0e 94 14 33 	call	0x6628	; 0x6628 <memcpy>
    1514:	0c 0f       	add	r16, r28
    1516:	1d 1f       	adc	r17, r29
    1518:	f7 01       	movw	r30, r14
    151a:	84 81       	ldd	r24, Z+4	; 0x04
    151c:	95 81       	ldd	r25, Z+5	; 0x05
    151e:	08 17       	cp	r16, r24
    1520:	19 07       	cpc	r17, r25
    1522:	10 f0       	brcs	.+4      	; 0x1528 <prvReadBytesFromBuffer+0x80>
    1524:	08 1b       	sub	r16, r24
    1526:	19 0b       	sbc	r17, r25
    1528:	f7 01       	movw	r30, r14
    152a:	11 83       	std	Z+1, r17	; 0x01
    152c:	00 83       	st	Z, r16
    152e:	ce 01       	movw	r24, r28
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	cf 90       	pop	r12
    1540:	bf 90       	pop	r11
    1542:	af 90       	pop	r10
    1544:	08 95       	ret

00001546 <prvReadMessageFromBuffer>:
    1546:	6f 92       	push	r6
    1548:	7f 92       	push	r7
    154a:	8f 92       	push	r8
    154c:	9f 92       	push	r9
    154e:	af 92       	push	r10
    1550:	bf 92       	push	r11
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	1f 92       	push	r1
    1564:	1f 92       	push	r1
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	6c 01       	movw	r12, r24
    156c:	4b 01       	movw	r8, r22
    156e:	5a 01       	movw	r10, r20
    1570:	79 01       	movw	r14, r18
    1572:	01 15       	cp	r16, r1
    1574:	11 05       	cpc	r17, r1
    1576:	b1 f0       	breq	.+44     	; 0x15a4 <prvReadMessageFromBuffer+0x5e>
    1578:	fc 01       	movw	r30, r24
    157a:	60 80       	ld	r6, Z
    157c:	71 80       	ldd	r7, Z+1	; 0x01
    157e:	a8 01       	movw	r20, r16
    1580:	be 01       	movw	r22, r28
    1582:	6f 5f       	subi	r22, 0xFF	; 255
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	90 df       	rcall	.-224    	; 0x14a8 <prvReadBytesFromBuffer>
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	9a 81       	ldd	r25, Y+2	; 0x02
    158c:	e0 1a       	sub	r14, r16
    158e:	f1 0a       	sbc	r15, r17
    1590:	a8 16       	cp	r10, r24
    1592:	b9 06       	cpc	r11, r25
    1594:	30 f4       	brcc	.+12     	; 0x15a2 <prvReadMessageFromBuffer+0x5c>
    1596:	f6 01       	movw	r30, r12
    1598:	71 82       	std	Z+1, r7	; 0x01
    159a:	60 82       	st	Z, r6
    159c:	a1 2c       	mov	r10, r1
    159e:	b1 2c       	mov	r11, r1
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <prvReadMessageFromBuffer+0x5e>
    15a2:	5c 01       	movw	r10, r24
    15a4:	97 01       	movw	r18, r14
    15a6:	a5 01       	movw	r20, r10
    15a8:	b4 01       	movw	r22, r8
    15aa:	c6 01       	movw	r24, r12
    15ac:	7d df       	rcall	.-262    	; 0x14a8 <prvReadBytesFromBuffer>
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	7f 90       	pop	r7
    15cc:	6f 90       	pop	r6
    15ce:	08 95       	ret

000015d0 <xStreamBufferGenericCreate>:
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	ec 01       	movw	r28, r24
    15e0:	6b 01       	movw	r12, r22
    15e2:	41 30       	cpi	r20, 0x01	; 1
    15e4:	11 f4       	brne	.+4      	; 0x15ea <xStreamBufferGenericCreate+0x1a>
    15e6:	01 e0       	ldi	r16, 0x01	; 1
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <xStreamBufferGenericCreate+0x1c>
    15ea:	00 e0       	ldi	r16, 0x00	; 0
    15ec:	c1 14       	cp	r12, r1
    15ee:	d1 04       	cpc	r13, r1
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <xStreamBufferGenericCreate+0x28>
    15f2:	cc 24       	eor	r12, r12
    15f4:	c3 94       	inc	r12
    15f6:	d1 2c       	mov	r13, r1
    15f8:	ce 01       	movw	r24, r28
    15fa:	40 96       	adiw	r24, 0x10	; 16
    15fc:	c8 17       	cp	r28, r24
    15fe:	d9 07       	cpc	r29, r25
    1600:	20 f4       	brcc	.+8      	; 0x160a <xStreamBufferGenericCreate+0x3a>
    1602:	21 96       	adiw	r28, 0x01	; 1
    1604:	6f d9       	rcall	.-3362   	; 0x8e4 <pvPortMalloc>
    1606:	7c 01       	movw	r14, r24
    1608:	02 c0       	rjmp	.+4      	; 0x160e <xStreamBufferGenericCreate+0x3e>
    160a:	e1 2c       	mov	r14, r1
    160c:	f1 2c       	mov	r15, r1
    160e:	e1 14       	cp	r14, r1
    1610:	f1 04       	cpc	r15, r1
    1612:	39 f0       	breq	.+14     	; 0x1622 <xStreamBufferGenericCreate+0x52>
    1614:	96 01       	movw	r18, r12
    1616:	ae 01       	movw	r20, r28
    1618:	b7 01       	movw	r22, r14
    161a:	61 5f       	subi	r22, 0xF1	; 241
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	c7 01       	movw	r24, r14
    1620:	a7 de       	rcall	.-690    	; 0x1370 <prvInitialiseNewStreamBuffer>
    1622:	c7 01       	movw	r24, r14
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	08 95       	ret

00001634 <xStreamBufferReset>:
    1634:	0f 93       	push	r16
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	0f 92       	push	r0
    163c:	fc 01       	movw	r30, r24
    163e:	20 85       	ldd	r18, Z+8	; 0x08
    1640:	31 85       	ldd	r19, Z+9	; 0x09
    1642:	23 2b       	or	r18, r19
    1644:	71 f4       	brne	.+28     	; 0x1662 <xStreamBufferReset+0x2e>
    1646:	22 85       	ldd	r18, Z+10	; 0x0a
    1648:	33 85       	ldd	r19, Z+11	; 0x0b
    164a:	23 2b       	or	r18, r19
    164c:	61 f4       	brne	.+24     	; 0x1666 <xStreamBufferReset+0x32>
    164e:	26 81       	ldd	r18, Z+6	; 0x06
    1650:	37 81       	ldd	r19, Z+7	; 0x07
    1652:	44 81       	ldd	r20, Z+4	; 0x04
    1654:	55 81       	ldd	r21, Z+5	; 0x05
    1656:	64 85       	ldd	r22, Z+12	; 0x0c
    1658:	75 85       	ldd	r23, Z+13	; 0x0d
    165a:	06 85       	ldd	r16, Z+14	; 0x0e
    165c:	89 de       	rcall	.-750    	; 0x1370 <prvInitialiseNewStreamBuffer>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <xStreamBufferReset+0x34>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <xStreamBufferReset+0x34>
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <xStreamBufferSpacesAvailable>:
    1670:	fc 01       	movw	r30, r24
    1672:	24 81       	ldd	r18, Z+4	; 0x04
    1674:	35 81       	ldd	r19, Z+5	; 0x05
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	82 0f       	add	r24, r18
    167c:	93 1f       	adc	r25, r19
    167e:	42 81       	ldd	r20, Z+2	; 0x02
    1680:	53 81       	ldd	r21, Z+3	; 0x03
    1682:	84 1b       	sub	r24, r20
    1684:	95 0b       	sbc	r25, r21
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	82 17       	cp	r24, r18
    168a:	93 07       	cpc	r25, r19
    168c:	10 f0       	brcs	.+4      	; 0x1692 <xStreamBufferSpacesAvailable+0x22>
    168e:	82 1b       	sub	r24, r18
    1690:	93 0b       	sbc	r25, r19
    1692:	08 95       	ret

00001694 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1694:	2f 92       	push	r2
    1696:	3f 92       	push	r3
    1698:	4f 92       	push	r4
    169a:	5f 92       	push	r5
    169c:	6f 92       	push	r6
    169e:	7f 92       	push	r7
    16a0:	8f 92       	push	r8
    16a2:	9f 92       	push	r9
    16a4:	af 92       	push	r10
    16a6:	bf 92       	push	r11
    16a8:	cf 92       	push	r12
    16aa:	df 92       	push	r13
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	2b 97       	sbiw	r28, 0x0b	; 11
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	4c 01       	movw	r8, r24
    16ca:	7b 87       	std	Y+11, r23	; 0x0b
    16cc:	6a 87       	std	Y+10, r22	; 0x0a
    16ce:	1a 01       	movw	r2, r20
    16d0:	0e 83       	std	Y+6, r16	; 0x06
    16d2:	1f 83       	std	Y+7, r17	; 0x07
    16d4:	28 87       	std	Y+8, r18	; 0x08
    16d6:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    16d8:	fc 01       	movw	r30, r24
    16da:	84 81       	ldd	r24, Z+4	; 0x04
    16dc:	95 81       	ldd	r25, Z+5	; 0x05
    16de:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    16e0:	26 85       	ldd	r18, Z+14	; 0x0e
    16e2:	20 ff       	sbrs	r18, 0
    16e4:	0c c0       	rjmp	.+24     	; 0x16fe <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    16e6:	2a 01       	movw	r4, r20
    16e8:	f2 e0       	ldi	r31, 0x02	; 2
    16ea:	4f 0e       	add	r4, r31
    16ec:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    16ee:	84 15       	cp	r24, r4
    16f0:	95 05       	cpc	r25, r5
    16f2:	58 f4       	brcc	.+22     	; 0x170a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    16f4:	1e 82       	std	Y+6, r1	; 0x06
    16f6:	1f 82       	std	Y+7, r1	; 0x07
    16f8:	18 86       	std	Y+8, r1	; 0x08
    16fa:	19 86       	std	Y+9, r1	; 0x09
    16fc:	06 c0       	rjmp	.+12     	; 0x170a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    16fe:	84 17       	cp	r24, r20
    1700:	95 07       	cpc	r25, r21
    1702:	10 f0       	brcs	.+4      	; 0x1708 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1704:	2a 01       	movw	r4, r20
    1706:	01 c0       	rjmp	.+2      	; 0x170a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1708:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    170a:	8e 81       	ldd	r24, Y+6	; 0x06
    170c:	9f 81       	ldd	r25, Y+7	; 0x07
    170e:	a8 85       	ldd	r26, Y+8	; 0x08
    1710:	b9 85       	ldd	r27, Y+9	; 0x09
    1712:	89 2b       	or	r24, r25
    1714:	8a 2b       	or	r24, r26
    1716:	8b 2b       	or	r24, r27
    1718:	09 f4       	brne	.+2      	; 0x171c <xStreamBufferSend+0x88>
    171a:	38 c0       	rjmp	.+112    	; 0x178c <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    171c:	ce 01       	movw	r24, r28
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	0e 94 59 14 	call	0x28b2	; 0x28b2 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    172a:	c4 01       	movw	r24, r8
    172c:	a1 df       	rcall	.-190    	; 0x1670 <xStreamBufferSpacesAvailable>
    172e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1730:	84 15       	cp	r24, r4
    1732:	95 05       	cpc	r25, r5
    1734:	40 f5       	brcc	.+80     	; 0x1786 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 42 18 	call	0x3084	; 0x3084 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1740:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <xTaskGetCurrentTaskHandle>
    1744:	f4 01       	movw	r30, r8
    1746:	93 87       	std	Z+11, r25	; 0x0b
    1748:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    174e:	ae 80       	ldd	r10, Y+6	; 0x06
    1750:	bf 80       	ldd	r11, Y+7	; 0x07
    1752:	c8 84       	ldd	r12, Y+8	; 0x08
    1754:	d9 84       	ldd	r13, Y+9	; 0x09
    1756:	e1 2c       	mov	r14, r1
    1758:	f1 2c       	mov	r15, r1
    175a:	00 e0       	ldi	r16, 0x00	; 0
    175c:	10 e0       	ldi	r17, 0x00	; 0
    175e:	98 01       	movw	r18, r16
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	ba 01       	movw	r22, r20
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    176c:	f4 01       	movw	r30, r8
    176e:	13 86       	std	Z+11, r1	; 0x0b
    1770:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1772:	be 01       	movw	r22, r28
    1774:	6a 5f       	subi	r22, 0xFA	; 250
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	ce 01       	movw	r24, r28
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	0e 94 80 14 	call	0x2900	; 0x2900 <xTaskCheckForTimeOut>
    1780:	88 23       	and	r24, r24
    1782:	81 f2       	breq	.-96     	; 0x1724 <xStreamBufferSend+0x90>
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
                    break;
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    178c:	61 2c       	mov	r6, r1
    178e:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1790:	61 14       	cp	r6, r1
    1792:	71 04       	cpc	r7, r1
    1794:	19 f4       	brne	.+6      	; 0x179c <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1796:	c4 01       	movw	r24, r8
    1798:	6b df       	rcall	.-298    	; 0x1670 <xStreamBufferSpacesAvailable>
    179a:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    179c:	82 01       	movw	r16, r4
    179e:	93 01       	movw	r18, r6
    17a0:	a1 01       	movw	r20, r2
    17a2:	6a 85       	ldd	r22, Y+10	; 0x0a
    17a4:	7b 85       	ldd	r23, Y+11	; 0x0b
    17a6:	c4 01       	movw	r24, r8
    17a8:	3c de       	rcall	.-904    	; 0x1422 <prvWriteMessageToBuffer>
    17aa:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    17ac:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    17ae:	e9 f0       	breq	.+58     	; 0x17ea <xStreamBufferSend+0x156>
    17b0:	c4 01       	movw	r24, r8
    17b2:	cb dd       	rcall	.-1130   	; 0x134a <prvBytesInBuffer>
    17b4:	f4 01       	movw	r30, r8
    17b6:	26 81       	ldd	r18, Z+6	; 0x06
    17b8:	37 81       	ldd	r19, Z+7	; 0x07
    17ba:	82 17       	cp	r24, r18
    17bc:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    17be:	a8 f0       	brcs	.+42     	; 0x17ea <xStreamBufferSend+0x156>
    17c0:	8b d3       	rcall	.+1814   	; 0x1ed8 <vTaskSuspendAll>
    17c2:	f4 01       	movw	r30, r8
    17c4:	80 85       	ldd	r24, Z+8	; 0x08
    17c6:	91 85       	ldd	r25, Z+9	; 0x09
    17c8:	89 2b       	or	r24, r25
    17ca:	71 f0       	breq	.+28     	; 0x17e8 <xStreamBufferSend+0x154>
    17cc:	80 85       	ldd	r24, Z+8	; 0x08
    17ce:	91 85       	ldd	r25, Z+9	; 0x09
    17d0:	e1 2c       	mov	r14, r1
    17d2:	f1 2c       	mov	r15, r1
    17d4:	00 e0       	ldi	r16, 0x00	; 0
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	a9 01       	movw	r20, r18
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	0e 94 29 16 	call	0x2c52	; 0x2c52 <xTaskGenericNotify>
    17e2:	f4 01       	movw	r30, r8
    17e4:	11 86       	std	Z+9, r1	; 0x09
    17e6:	10 86       	std	Z+8, r1	; 0x08
    17e8:	b7 d4       	rcall	.+2414   	; 0x2158 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    17ea:	c6 01       	movw	r24, r12
    17ec:	2b 96       	adiw	r28, 0x0b	; 11
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	bf 90       	pop	r11
    180a:	af 90       	pop	r10
    180c:	9f 90       	pop	r9
    180e:	8f 90       	pop	r8
    1810:	7f 90       	pop	r7
    1812:	6f 90       	pop	r6
    1814:	5f 90       	pop	r5
    1816:	4f 90       	pop	r4
    1818:	3f 90       	pop	r3
    181a:	2f 90       	pop	r2
    181c:	08 95       	ret

0000181e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    181e:	af 92       	push	r10
    1820:	bf 92       	push	r11
    1822:	cf 92       	push	r12
    1824:	df 92       	push	r13
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ec 01       	movw	r28, r24
    1834:	7b 01       	movw	r14, r22
    1836:	5a 01       	movw	r10, r20
    1838:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    183a:	8e 85       	ldd	r24, Y+14	; 0x0e
    183c:	80 ff       	sbrs	r24, 0
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1840:	8a 01       	movw	r16, r20
    1842:	0e 5f       	subi	r16, 0xFE	; 254
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	01 c0       	rjmp	.+2      	; 0x184a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1848:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    184a:	ce 01       	movw	r24, r28
    184c:	11 df       	rcall	.-478    	; 0x1670 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    184e:	9c 01       	movw	r18, r24
    1850:	a5 01       	movw	r20, r10
    1852:	b7 01       	movw	r22, r14
    1854:	ce 01       	movw	r24, r28
    1856:	e5 dd       	rcall	.-1078   	; 0x1422 <prvWriteMessageToBuffer>
    1858:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    185a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    185c:	c1 f0       	breq	.+48     	; 0x188e <xStreamBufferSendFromISR+0x70>
    185e:	ce 01       	movw	r24, r28
    1860:	74 dd       	rcall	.-1304   	; 0x134a <prvBytesInBuffer>
    1862:	2e 81       	ldd	r18, Y+6	; 0x06
    1864:	3f 81       	ldd	r19, Y+7	; 0x07
    1866:	82 17       	cp	r24, r18
    1868:	93 07       	cpc	r25, r19
    186a:	88 f0       	brcs	.+34     	; 0x188e <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    186c:	88 85       	ldd	r24, Y+8	; 0x08
    186e:	99 85       	ldd	r25, Y+9	; 0x09
    1870:	89 2b       	or	r24, r25
    1872:	69 f0       	breq	.+26     	; 0x188e <xStreamBufferSendFromISR+0x70>
    1874:	88 85       	ldd	r24, Y+8	; 0x08
    1876:	99 85       	ldd	r25, Y+9	; 0x09
    1878:	e1 2c       	mov	r14, r1
    187a:	f1 2c       	mov	r15, r1
    187c:	00 e0       	ldi	r16, 0x00	; 0
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	a9 01       	movw	r20, r18
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	0e 94 20 17 	call	0x2e40	; 0x2e40 <xTaskGenericNotifyFromISR>
    188a:	19 86       	std	Y+9, r1	; 0x09
    188c:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    188e:	c5 01       	movw	r24, r10
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	cf 90       	pop	r12
    18a0:	bf 90       	pop	r11
    18a2:	af 90       	pop	r10
    18a4:	08 95       	ret

000018a6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    18a6:	4f 92       	push	r4
    18a8:	5f 92       	push	r5
    18aa:	6f 92       	push	r6
    18ac:	7f 92       	push	r7
    18ae:	8f 92       	push	r8
    18b0:	9f 92       	push	r9
    18b2:	af 92       	push	r10
    18b4:	bf 92       	push	r11
    18b6:	cf 92       	push	r12
    18b8:	df 92       	push	r13
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	ec 01       	movw	r28, r24
    18c8:	2b 01       	movw	r4, r22
    18ca:	3a 01       	movw	r6, r20
    18cc:	58 01       	movw	r10, r16
    18ce:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    18d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    18d2:	80 ff       	sbrs	r24, 0
    18d4:	05 c0       	rjmp	.+10     	; 0x18e0 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    18d6:	68 94       	set
    18d8:	88 24       	eor	r8, r8
    18da:	81 f8       	bld	r8, 1
    18dc:	91 2c       	mov	r9, r1
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    18e0:	81 2c       	mov	r8, r1
    18e2:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    18e4:	a1 14       	cp	r10, r1
    18e6:	b1 04       	cpc	r11, r1
    18e8:	c1 04       	cpc	r12, r1
    18ea:	d1 04       	cpc	r13, r1
    18ec:	41 f1       	breq	.+80     	; 0x193e <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18f4:	ce 01       	movw	r24, r28
    18f6:	29 dd       	rcall	.-1454   	; 0x134a <prvBytesInBuffer>
    18f8:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    18fa:	88 16       	cp	r8, r24
    18fc:	99 06       	cpc	r9, r25
    18fe:	48 f0       	brcs	.+18     	; 0x1912 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 42 18 	call	0x3084	; 0x3084 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    190a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <xTaskGetCurrentTaskHandle>
    190e:	99 87       	std	Y+9, r25	; 0x09
    1910:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1912:	0f 90       	pop	r0
    1914:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1916:	8e 14       	cp	r8, r14
    1918:	9f 04       	cpc	r9, r15
    191a:	a0 f0       	brcs	.+40     	; 0x1944 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    191c:	e1 2c       	mov	r14, r1
    191e:	f1 2c       	mov	r15, r1
    1920:	00 e0       	ldi	r16, 0x00	; 0
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	98 01       	movw	r18, r16
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	ba 01       	movw	r22, r20
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	0e 94 82 15 	call	0x2b04	; 0x2b04 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1932:	19 86       	std	Y+9, r1	; 0x09
    1934:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1936:	ce 01       	movw	r24, r28
    1938:	08 dd       	rcall	.-1520   	; 0x134a <prvBytesInBuffer>
    193a:	7c 01       	movw	r14, r24
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    193e:	ce 01       	movw	r24, r28
    1940:	04 dd       	rcall	.-1528   	; 0x134a <prvBytesInBuffer>
    1942:	7c 01       	movw	r14, r24
    1944:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1946:	9f 04       	cpc	r9, r15
    1948:	e8 f4       	brcc	.+58     	; 0x1984 <xStreamBufferReceive+0xde>
    194a:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    194c:	97 01       	movw	r18, r14
    194e:	a3 01       	movw	r20, r6
    1950:	b2 01       	movw	r22, r4
    1952:	ce 01       	movw	r24, r28
    1954:	f8 dd       	rcall	.-1040   	; 0x1546 <prvReadMessageFromBuffer>
    1956:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1958:	89 2b       	or	r24, r25
    195a:	b1 f0       	breq	.+44     	; 0x1988 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    195c:	bd d2       	rcall	.+1402   	; 0x1ed8 <vTaskSuspendAll>
    195e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1960:	9b 85       	ldd	r25, Y+11	; 0x0b
    1962:	89 2b       	or	r24, r25
    1964:	69 f0       	breq	.+26     	; 0x1980 <xStreamBufferReceive+0xda>
    1966:	8a 85       	ldd	r24, Y+10	; 0x0a
    1968:	9b 85       	ldd	r25, Y+11	; 0x0b
    196a:	e1 2c       	mov	r14, r1
    196c:	f1 2c       	mov	r15, r1
    196e:	00 e0       	ldi	r16, 0x00	; 0
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	0e 94 29 16 	call	0x2c52	; 0x2c52 <xTaskGenericNotify>
    197c:	1b 86       	std	Y+11, r1	; 0x0b
    197e:	1a 86       	std	Y+10, r1	; 0x0a
    1980:	eb d3       	rcall	.+2006   	; 0x2158 <xTaskResumeAll>
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <xStreamBufferReceive+0xe2>
    1984:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1986:	d1 2c       	mov	r13, r1
    1988:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	cf 90       	pop	r12
    199a:	bf 90       	pop	r11
    199c:	af 90       	pop	r10
    199e:	9f 90       	pop	r9
    19a0:	8f 90       	pop	r8
    19a2:	7f 90       	pop	r7
    19a4:	6f 90       	pop	r6
    19a6:	5f 90       	pop	r5
    19a8:	4f 90       	pop	r4
    19aa:	08 95       	ret

000019ac <prvResetNextTaskUnblockTime>:
    19ac:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxDelayedTaskList>
    19b0:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxDelayedTaskList+0x1>
    19b4:	80 81       	ld	r24, Z
    19b6:	81 11       	cpse	r24, r1
    19b8:	0c c0       	rjmp	.+24     	; 0x19d2 <prvResetNextTaskUnblockTime+0x26>
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	9f ef       	ldi	r25, 0xFF	; 255
    19be:	dc 01       	movw	r26, r24
    19c0:	80 93 93 16 	sts	0x1693, r24	; 0x801693 <xNextTaskUnblockTime>
    19c4:	90 93 94 16 	sts	0x1694, r25	; 0x801694 <xNextTaskUnblockTime+0x1>
    19c8:	a0 93 95 16 	sts	0x1695, r26	; 0x801695 <xNextTaskUnblockTime+0x2>
    19cc:	b0 93 96 16 	sts	0x1696, r27	; 0x801696 <xNextTaskUnblockTime+0x3>
    19d0:	08 95       	ret
    19d2:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxDelayedTaskList>
    19d6:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxDelayedTaskList+0x1>
    19da:	07 80       	ldd	r0, Z+7	; 0x07
    19dc:	f0 85       	ldd	r31, Z+8	; 0x08
    19de:	e0 2d       	mov	r30, r0
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
    19e4:	a2 81       	ldd	r26, Z+2	; 0x02
    19e6:	b3 81       	ldd	r27, Z+3	; 0x03
    19e8:	80 93 93 16 	sts	0x1693, r24	; 0x801693 <xNextTaskUnblockTime>
    19ec:	90 93 94 16 	sts	0x1694, r25	; 0x801694 <xNextTaskUnblockTime+0x1>
    19f0:	a0 93 95 16 	sts	0x1695, r26	; 0x801695 <xNextTaskUnblockTime+0x2>
    19f4:	b0 93 96 16 	sts	0x1696, r27	; 0x801696 <xNextTaskUnblockTime+0x3>
    19f8:	08 95       	ret

000019fa <prvDeleteTCB>:
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	ec 01       	movw	r28, r24
    1a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a04:	18 d8       	rcall	.-4048   	; 0xa36 <vPortFree>
    1a06:	ce 01       	movw	r24, r28
    1a08:	16 d8       	rcall	.-4052   	; 0xa36 <vPortFree>
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	08 95       	ret

00001a10 <prvInitialiseNewTask>:
    1a10:	4f 92       	push	r4
    1a12:	5f 92       	push	r5
    1a14:	6f 92       	push	r6
    1a16:	7f 92       	push	r7
    1a18:	8f 92       	push	r8
    1a1a:	9f 92       	push	r9
    1a1c:	af 92       	push	r10
    1a1e:	bf 92       	push	r11
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	0f 93       	push	r16
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	2c 01       	movw	r4, r24
    1a30:	5b 01       	movw	r10, r22
    1a32:	4a 01       	movw	r8, r20
    1a34:	39 01       	movw	r6, r18
    1a36:	e6 01       	movw	r28, r12
    1a38:	65 ea       	ldi	r22, 0xA5	; 165
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a40:	0e 94 1d 33 	call	0x663a	; 0x663a <memset>
    1a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a48:	21 e0       	ldi	r18, 0x01	; 1
    1a4a:	82 1a       	sub	r8, r18
    1a4c:	91 08       	sbc	r9, r1
    1a4e:	88 0e       	add	r8, r24
    1a50:	99 1e       	adc	r9, r25
    1a52:	a1 14       	cp	r10, r1
    1a54:	b1 04       	cpc	r11, r1
    1a56:	89 f4       	brne	.+34     	; 0x1a7a <prvInitialiseNewTask+0x6a>
    1a58:	15 c0       	rjmp	.+42     	; 0x1a84 <prvInitialiseNewTask+0x74>
    1a5a:	82 2f       	mov	r24, r18
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	f5 01       	movw	r30, r10
    1a60:	e8 0f       	add	r30, r24
    1a62:	f9 1f       	adc	r31, r25
    1a64:	30 81       	ld	r19, Z
    1a66:	de 01       	movw	r26, r28
    1a68:	a8 0f       	add	r26, r24
    1a6a:	b9 1f       	adc	r27, r25
    1a6c:	5d 96       	adiw	r26, 0x1d	; 29
    1a6e:	3c 93       	st	X, r19
    1a70:	80 81       	ld	r24, Z
    1a72:	88 23       	and	r24, r24
    1a74:	29 f0       	breq	.+10     	; 0x1a80 <prvInitialiseNewTask+0x70>
    1a76:	2f 5f       	subi	r18, 0xFF	; 255
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <prvInitialiseNewTask+0x6c>
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	20 31       	cpi	r18, 0x10	; 16
    1a7e:	68 f3       	brcs	.-38     	; 0x1a5a <prvInitialiseNewTask+0x4a>
    1a80:	1c a6       	std	Y+44, r1	; 0x2c
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <prvInitialiseNewTask+0x76>
    1a84:	1d 8e       	std	Y+29, r1	; 0x1d
    1a86:	0a 30       	cpi	r16, 0x0A	; 10
    1a88:	08 f0       	brcs	.+2      	; 0x1a8c <prvInitialiseNewTask+0x7c>
    1a8a:	09 e0       	ldi	r16, 0x09	; 9
    1a8c:	0a 8f       	std	Y+26, r16	; 0x1a
    1a8e:	0d a7       	std	Y+45, r16	; 0x2d
    1a90:	1e a6       	std	Y+46, r1	; 0x2e
    1a92:	ce 01       	movw	r24, r28
    1a94:	02 96       	adiw	r24, 0x02	; 2
    1a96:	1d d8       	rcall	.-4038   	; 0xad2 <vListInitialiseItem>
    1a98:	ce 01       	movw	r24, r28
    1a9a:	0e 96       	adiw	r24, 0x0e	; 14
    1a9c:	1a d8       	rcall	.-4044   	; 0xad2 <vListInitialiseItem>
    1a9e:	db 87       	std	Y+11, r29	; 0x0b
    1aa0:	ca 87       	std	Y+10, r28	; 0x0a
    1aa2:	8a e0       	ldi	r24, 0x0A	; 10
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e0       	ldi	r26, 0x00	; 0
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	80 1b       	sub	r24, r16
    1aac:	91 09       	sbc	r25, r1
    1aae:	a1 09       	sbc	r26, r1
    1ab0:	b1 09       	sbc	r27, r1
    1ab2:	8e 87       	std	Y+14, r24	; 0x0e
    1ab4:	9f 87       	std	Y+15, r25	; 0x0f
    1ab6:	a8 8b       	std	Y+16, r26	; 0x10
    1ab8:	b9 8b       	std	Y+17, r27	; 0x11
    1aba:	df 8b       	std	Y+23, r29	; 0x17
    1abc:	ce 8b       	std	Y+22, r28	; 0x16
    1abe:	84 e0       	ldi	r24, 0x04	; 4
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	bf 96       	adiw	r30, 0x2f	; 47
    1ac4:	df 01       	movw	r26, r30
    1ac6:	1d 92       	st	X+, r1
    1ac8:	8a 95       	dec	r24
    1aca:	e9 f7       	brne	.-6      	; 0x1ac6 <prvInitialiseNewTask+0xb6>
    1acc:	1b aa       	std	Y+51, r1	; 0x33
    1ace:	a3 01       	movw	r20, r6
    1ad0:	b2 01       	movw	r22, r4
    1ad2:	c4 01       	movw	r24, r8
    1ad4:	72 d8       	rcall	.-3868   	; 0xbba <pxPortInitialiseStack>
    1ad6:	99 83       	std	Y+1, r25	; 0x01
    1ad8:	88 83       	st	Y, r24
    1ada:	e1 14       	cp	r14, r1
    1adc:	f1 04       	cpc	r15, r1
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <prvInitialiseNewTask+0xd6>
    1ae0:	f7 01       	movw	r30, r14
    1ae2:	d1 83       	std	Z+1, r29	; 0x01
    1ae4:	c0 83       	st	Z, r28
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	cf 90       	pop	r12
    1af4:	bf 90       	pop	r11
    1af6:	af 90       	pop	r10
    1af8:	9f 90       	pop	r9
    1afa:	8f 90       	pop	r8
    1afc:	7f 90       	pop	r7
    1afe:	6f 90       	pop	r6
    1b00:	5f 90       	pop	r5
    1b02:	4f 90       	pop	r4
    1b04:	08 95       	ret

00001b06 <prvInitialiseTaskLists>:
    1b06:	cf 93       	push	r28
    1b08:	c0 e0       	ldi	r28, 0x00	; 0
    1b0a:	09 c0       	rjmp	.+18     	; 0x1b1e <prvInitialiseTaskLists+0x18>
    1b0c:	2b e0       	ldi	r18, 0x0B	; 11
    1b0e:	c2 9f       	mul	r28, r18
    1b10:	c0 01       	movw	r24, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	8f 51       	subi	r24, 0x1F	; 31
    1b16:	99 4e       	sbci	r25, 0xE9	; 233
    1b18:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialise>
    1b1c:	cf 5f       	subi	r28, 0xFF	; 255
    1b1e:	ca 30       	cpi	r28, 0x0A	; 10
    1b20:	a8 f3       	brcs	.-22     	; 0x1b0c <prvInitialiseTaskLists+0x6>
    1b22:	86 ed       	ldi	r24, 0xD6	; 214
    1b24:	96 e1       	ldi	r25, 0x16	; 22
    1b26:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialise>
    1b2a:	8b ec       	ldi	r24, 0xCB	; 203
    1b2c:	96 e1       	ldi	r25, 0x16	; 22
    1b2e:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialise>
    1b32:	8c eb       	ldi	r24, 0xBC	; 188
    1b34:	96 e1       	ldi	r25, 0x16	; 22
    1b36:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialise>
    1b3a:	81 eb       	ldi	r24, 0xB1	; 177
    1b3c:	96 e1       	ldi	r25, 0x16	; 22
    1b3e:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialise>
    1b42:	85 ea       	ldi	r24, 0xA5	; 165
    1b44:	96 e1       	ldi	r25, 0x16	; 22
    1b46:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialise>
    1b4a:	86 ed       	ldi	r24, 0xD6	; 214
    1b4c:	96 e1       	ldi	r25, 0x16	; 22
    1b4e:	90 93 ca 16 	sts	0x16CA, r25	; 0x8016ca <pxDelayedTaskList+0x1>
    1b52:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <pxDelayedTaskList>
    1b56:	8b ec       	ldi	r24, 0xCB	; 203
    1b58:	96 e1       	ldi	r25, 0x16	; 22
    1b5a:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <pxOverflowDelayedTaskList+0x1>
    1b5e:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <pxOverflowDelayedTaskList>
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <prvAddNewTaskToReadyList>:
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	ec 01       	movw	r28, r24
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	0f 92       	push	r0
    1b72:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <uxCurrentNumberOfTasks>
    1b76:	8f 5f       	subi	r24, 0xFF	; 255
    1b78:	80 93 a4 16 	sts	0x16A4, r24	; 0x8016a4 <uxCurrentNumberOfTasks>
    1b7c:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxCurrentTCB>
    1b80:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1b84:	89 2b       	or	r24, r25
    1b86:	51 f4       	brne	.+20     	; 0x1b9c <prvAddNewTaskToReadyList+0x36>
    1b88:	d0 93 50 17 	sts	0x1750, r29	; 0x801750 <pxCurrentTCB+0x1>
    1b8c:	c0 93 4f 17 	sts	0x174F, r28	; 0x80174f <pxCurrentTCB>
    1b90:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <uxCurrentNumberOfTasks>
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 f4       	brne	.+36     	; 0x1bbc <prvAddNewTaskToReadyList+0x56>
    1b98:	b6 df       	rcall	.-148    	; 0x1b06 <prvInitialiseTaskLists>
    1b9a:	10 c0       	rjmp	.+32     	; 0x1bbc <prvAddNewTaskToReadyList+0x56>
    1b9c:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <xSchedulerRunning>
    1ba0:	81 11       	cpse	r24, r1
    1ba2:	0c c0       	rjmp	.+24     	; 0x1bbc <prvAddNewTaskToReadyList+0x56>
    1ba4:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    1ba8:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1bac:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bb0:	89 17       	cp	r24, r25
    1bb2:	20 f0       	brcs	.+8      	; 0x1bbc <prvAddNewTaskToReadyList+0x56>
    1bb4:	d0 93 50 17 	sts	0x1750, r29	; 0x801750 <pxCurrentTCB+0x1>
    1bb8:	c0 93 4f 17 	sts	0x174F, r28	; 0x80174f <pxCurrentTCB>
    1bbc:	80 91 97 16 	lds	r24, 0x1697	; 0x801697 <uxTaskNumber>
    1bc0:	8f 5f       	subi	r24, 0xFF	; 255
    1bc2:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <uxTaskNumber>
    1bc6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bc8:	80 91 9f 16 	lds	r24, 0x169F	; 0x80169f <uxTopReadyPriority>
    1bcc:	8e 17       	cp	r24, r30
    1bce:	10 f4       	brcc	.+4      	; 0x1bd4 <prvAddNewTaskToReadyList+0x6e>
    1bd0:	e0 93 9f 16 	sts	0x169F, r30	; 0x80169f <uxTopReadyPriority>
    1bd4:	8b e0       	ldi	r24, 0x0B	; 11
    1bd6:	8e 9f       	mul	r24, r30
    1bd8:	f0 01       	movw	r30, r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	ef 51       	subi	r30, 0x1F	; 31
    1bde:	f9 4e       	sbci	r31, 0xE9	; 233
    1be0:	01 80       	ldd	r0, Z+1	; 0x01
    1be2:	f2 81       	ldd	r31, Z+2	; 0x02
    1be4:	e0 2d       	mov	r30, r0
    1be6:	ff 83       	std	Y+7, r31	; 0x07
    1be8:	ee 83       	std	Y+6, r30	; 0x06
    1bea:	26 81       	ldd	r18, Z+6	; 0x06
    1bec:	37 81       	ldd	r19, Z+7	; 0x07
    1bee:	39 87       	std	Y+9, r19	; 0x09
    1bf0:	28 87       	std	Y+8, r18	; 0x08
    1bf2:	a6 81       	ldd	r26, Z+6	; 0x06
    1bf4:	b7 81       	ldd	r27, Z+7	; 0x07
    1bf6:	9e 01       	movw	r18, r28
    1bf8:	2e 5f       	subi	r18, 0xFE	; 254
    1bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfc:	15 96       	adiw	r26, 0x05	; 5
    1bfe:	3c 93       	st	X, r19
    1c00:	2e 93       	st	-X, r18
    1c02:	14 97       	sbiw	r26, 0x04	; 4
    1c04:	37 83       	std	Z+7, r19	; 0x07
    1c06:	26 83       	std	Z+6, r18	; 0x06
    1c08:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c0a:	8e 9f       	mul	r24, r30
    1c0c:	f0 01       	movw	r30, r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	ef 51       	subi	r30, 0x1F	; 31
    1c12:	f9 4e       	sbci	r31, 0xE9	; 233
    1c14:	fd 87       	std	Y+13, r31	; 0x0d
    1c16:	ec 87       	std	Y+12, r30	; 0x0c
    1c18:	80 81       	ld	r24, Z
    1c1a:	8f 5f       	subi	r24, 0xFF	; 255
    1c1c:	80 83       	st	Z, r24
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <xSchedulerRunning>
    1c26:	88 23       	and	r24, r24
    1c28:	49 f0       	breq	.+18     	; 0x1c3c <prvAddNewTaskToReadyList+0xd6>
    1c2a:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    1c2e:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1c32:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c34:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c36:	98 17       	cp	r25, r24
    1c38:	08 f4       	brcc	.+2      	; 0x1c3c <prvAddNewTaskToReadyList+0xd6>
    1c3a:	08 d8       	rcall	.-4080   	; 0xc4c <vPortYield>
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <prvCheckTasksWaitingTermination>:
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	1b c0       	rjmp	.+54     	; 0x1c7e <prvCheckTasksWaitingTermination+0x3c>
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	0f 92       	push	r0
    1c4e:	e0 91 b8 16 	lds	r30, 0x16B8	; 0x8016b8 <xTasksWaitingTermination+0x7>
    1c52:	f0 91 b9 16 	lds	r31, 0x16B9	; 0x8016b9 <xTasksWaitingTermination+0x8>
    1c56:	c0 85       	ldd	r28, Z+8	; 0x08
    1c58:	d1 85       	ldd	r29, Z+9	; 0x09
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	02 96       	adiw	r24, 0x02	; 2
    1c5e:	0e 94 aa 05 	call	0xb54	; 0xb54 <uxListRemove>
    1c62:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <uxCurrentNumberOfTasks>
    1c66:	81 50       	subi	r24, 0x01	; 1
    1c68:	80 93 a4 16 	sts	0x16A4, r24	; 0x8016a4 <uxCurrentNumberOfTasks>
    1c6c:	80 91 b0 16 	lds	r24, 0x16B0	; 0x8016b0 <uxDeletedTasksWaitingCleanUp>
    1c70:	81 50       	subi	r24, 0x01	; 1
    1c72:	80 93 b0 16 	sts	0x16B0, r24	; 0x8016b0 <uxDeletedTasksWaitingCleanUp>
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	be de       	rcall	.-644    	; 0x19fa <prvDeleteTCB>
    1c7e:	80 91 b0 16 	lds	r24, 0x16B0	; 0x8016b0 <uxDeletedTasksWaitingCleanUp>
    1c82:	81 11       	cpse	r24, r1
    1c84:	e1 cf       	rjmp	.-62     	; 0x1c48 <prvCheckTasksWaitingTermination+0x6>
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <prvAddCurrentTaskToDelayedList>:
    1c8c:	8f 92       	push	r8
    1c8e:	9f 92       	push	r9
    1c90:	af 92       	push	r10
    1c92:	bf 92       	push	r11
    1c94:	cf 92       	push	r12
    1c96:	df 92       	push	r13
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	6b 01       	movw	r12, r22
    1ca2:	7c 01       	movw	r14, r24
    1ca4:	c4 2f       	mov	r28, r20
    1ca6:	80 90 a0 16 	lds	r8, 0x16A0	; 0x8016a0 <xTickCount>
    1caa:	90 90 a1 16 	lds	r9, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    1cae:	a0 90 a2 16 	lds	r10, 0x16A2	; 0x8016a2 <xTickCount+0x2>
    1cb2:	b0 90 a3 16 	lds	r11, 0x16A3	; 0x8016a3 <xTickCount+0x3>
    1cb6:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxCurrentTCB>
    1cba:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1cbe:	02 96       	adiw	r24, 0x02	; 2
    1cc0:	0e 94 aa 05 	call	0xb54	; 0xb54 <uxListRemove>
    1cc4:	8f ef       	ldi	r24, 0xFF	; 255
    1cc6:	c8 16       	cp	r12, r24
    1cc8:	d8 06       	cpc	r13, r24
    1cca:	e8 06       	cpc	r14, r24
    1ccc:	f8 06       	cpc	r15, r24
    1cce:	b1 f5       	brne	.+108    	; 0x1d3c <prvAddCurrentTaskToDelayedList+0xb0>
    1cd0:	cc 23       	and	r28, r28
    1cd2:	a1 f1       	breq	.+104    	; 0x1d3c <prvAddCurrentTaskToDelayedList+0xb0>
    1cd4:	e5 ea       	ldi	r30, 0xA5	; 165
    1cd6:	f6 e1       	ldi	r31, 0x16	; 22
    1cd8:	a1 81       	ldd	r26, Z+1	; 0x01
    1cda:	b2 81       	ldd	r27, Z+2	; 0x02
    1cdc:	c0 91 4f 17 	lds	r28, 0x174F	; 0x80174f <pxCurrentTCB>
    1ce0:	d0 91 50 17 	lds	r29, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1ce4:	bf 83       	std	Y+7, r27	; 0x07
    1ce6:	ae 83       	std	Y+6, r26	; 0x06
    1ce8:	c0 91 4f 17 	lds	r28, 0x174F	; 0x80174f <pxCurrentTCB>
    1cec:	d0 91 50 17 	lds	r29, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1cf0:	16 96       	adiw	r26, 0x06	; 6
    1cf2:	8d 91       	ld	r24, X+
    1cf4:	9c 91       	ld	r25, X
    1cf6:	17 97       	sbiw	r26, 0x07	; 7
    1cf8:	99 87       	std	Y+9, r25	; 0x09
    1cfa:	88 87       	std	Y+8, r24	; 0x08
    1cfc:	16 96       	adiw	r26, 0x06	; 6
    1cfe:	cd 91       	ld	r28, X+
    1d00:	dc 91       	ld	r29, X
    1d02:	17 97       	sbiw	r26, 0x07	; 7
    1d04:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxCurrentTCB>
    1d08:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1d0c:	02 96       	adiw	r24, 0x02	; 2
    1d0e:	9d 83       	std	Y+5, r25	; 0x05
    1d10:	8c 83       	std	Y+4, r24	; 0x04
    1d12:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxCurrentTCB>
    1d16:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1d1a:	02 96       	adiw	r24, 0x02	; 2
    1d1c:	17 96       	adiw	r26, 0x07	; 7
    1d1e:	9c 93       	st	X, r25
    1d20:	8e 93       	st	-X, r24
    1d22:	16 97       	sbiw	r26, 0x06	; 6
    1d24:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
    1d28:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1d2c:	1d 96       	adiw	r26, 0x0d	; 13
    1d2e:	fc 93       	st	X, r31
    1d30:	ee 93       	st	-X, r30
    1d32:	1c 97       	sbiw	r26, 0x0c	; 12
    1d34:	80 81       	ld	r24, Z
    1d36:	8f 5f       	subi	r24, 0xFF	; 255
    1d38:	80 83       	st	Z, r24
    1d3a:	3f c0       	rjmp	.+126    	; 0x1dba <prvAddCurrentTaskToDelayedList+0x12e>
    1d3c:	c8 0c       	add	r12, r8
    1d3e:	d9 1c       	adc	r13, r9
    1d40:	ea 1c       	adc	r14, r10
    1d42:	fb 1c       	adc	r15, r11
    1d44:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    1d48:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1d4c:	c2 82       	std	Z+2, r12	; 0x02
    1d4e:	d3 82       	std	Z+3, r13	; 0x03
    1d50:	e4 82       	std	Z+4, r14	; 0x04
    1d52:	f5 82       	std	Z+5, r15	; 0x05
    1d54:	c8 14       	cp	r12, r8
    1d56:	d9 04       	cpc	r13, r9
    1d58:	ea 04       	cpc	r14, r10
    1d5a:	fb 04       	cpc	r15, r11
    1d5c:	68 f4       	brcc	.+26     	; 0x1d78 <prvAddCurrentTaskToDelayedList+0xec>
    1d5e:	60 91 4f 17 	lds	r22, 0x174F	; 0x80174f <pxCurrentTCB>
    1d62:	70 91 50 17 	lds	r23, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1d66:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <pxOverflowDelayedTaskList>
    1d6a:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <pxOverflowDelayedTaskList+0x1>
    1d6e:	6e 5f       	subi	r22, 0xFE	; 254
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255
    1d72:	0e 94 6d 05 	call	0xada	; 0xada <vListInsert>
    1d76:	21 c0       	rjmp	.+66     	; 0x1dba <prvAddCurrentTaskToDelayedList+0x12e>
    1d78:	60 91 4f 17 	lds	r22, 0x174F	; 0x80174f <pxCurrentTCB>
    1d7c:	70 91 50 17 	lds	r23, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    1d80:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxDelayedTaskList>
    1d84:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxDelayedTaskList+0x1>
    1d88:	6e 5f       	subi	r22, 0xFE	; 254
    1d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8c:	0e 94 6d 05 	call	0xada	; 0xada <vListInsert>
    1d90:	80 91 93 16 	lds	r24, 0x1693	; 0x801693 <xNextTaskUnblockTime>
    1d94:	90 91 94 16 	lds	r25, 0x1694	; 0x801694 <xNextTaskUnblockTime+0x1>
    1d98:	a0 91 95 16 	lds	r26, 0x1695	; 0x801695 <xNextTaskUnblockTime+0x2>
    1d9c:	b0 91 96 16 	lds	r27, 0x1696	; 0x801696 <xNextTaskUnblockTime+0x3>
    1da0:	c8 16       	cp	r12, r24
    1da2:	d9 06       	cpc	r13, r25
    1da4:	ea 06       	cpc	r14, r26
    1da6:	fb 06       	cpc	r15, r27
    1da8:	40 f4       	brcc	.+16     	; 0x1dba <prvAddCurrentTaskToDelayedList+0x12e>
    1daa:	c0 92 93 16 	sts	0x1693, r12	; 0x801693 <xNextTaskUnblockTime>
    1dae:	d0 92 94 16 	sts	0x1694, r13	; 0x801694 <xNextTaskUnblockTime+0x1>
    1db2:	e0 92 95 16 	sts	0x1695, r14	; 0x801695 <xNextTaskUnblockTime+0x2>
    1db6:	f0 92 96 16 	sts	0x1696, r15	; 0x801696 <xNextTaskUnblockTime+0x3>
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	bf 90       	pop	r11
    1dc8:	af 90       	pop	r10
    1dca:	9f 90       	pop	r9
    1dcc:	8f 90       	pop	r8
    1dce:	08 95       	ret

00001dd0 <xTaskCreate>:
    1dd0:	2f 92       	push	r2
    1dd2:	3f 92       	push	r3
    1dd4:	4f 92       	push	r4
    1dd6:	5f 92       	push	r5
    1dd8:	6f 92       	push	r6
    1dda:	7f 92       	push	r7
    1ddc:	8f 92       	push	r8
    1dde:	9f 92       	push	r9
    1de0:	af 92       	push	r10
    1de2:	bf 92       	push	r11
    1de4:	cf 92       	push	r12
    1de6:	df 92       	push	r13
    1de8:	ef 92       	push	r14
    1dea:	ff 92       	push	r15
    1dec:	0f 93       	push	r16
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	3c 01       	movw	r6, r24
    1df4:	1b 01       	movw	r2, r22
    1df6:	4a 01       	movw	r8, r20
    1df8:	29 01       	movw	r4, r18
    1dfa:	ca 01       	movw	r24, r20
    1dfc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <pvPortMalloc>
    1e00:	6c 01       	movw	r12, r24
    1e02:	89 2b       	or	r24, r25
    1e04:	71 f0       	breq	.+28     	; 0x1e22 <xTaskCreate+0x52>
    1e06:	84 e3       	ldi	r24, 0x34	; 52
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <pvPortMalloc>
    1e0e:	ec 01       	movw	r28, r24
    1e10:	89 2b       	or	r24, r25
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <xTaskCreate+0x4a>
    1e14:	dc 8e       	std	Y+28, r13	; 0x1c
    1e16:	cb 8e       	std	Y+27, r12	; 0x1b
    1e18:	06 c0       	rjmp	.+12     	; 0x1e26 <xTaskCreate+0x56>
    1e1a:	c6 01       	movw	r24, r12
    1e1c:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortFree>
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <xTaskCreate+0x56>
    1e22:	c0 e0       	ldi	r28, 0x00	; 0
    1e24:	d0 e0       	ldi	r29, 0x00	; 0
    1e26:	20 97       	sbiw	r28, 0x00	; 0
    1e28:	61 f0       	breq	.+24     	; 0x1e42 <xTaskCreate+0x72>
    1e2a:	a1 2c       	mov	r10, r1
    1e2c:	b1 2c       	mov	r11, r1
    1e2e:	6e 01       	movw	r12, r28
    1e30:	92 01       	movw	r18, r4
    1e32:	a4 01       	movw	r20, r8
    1e34:	b1 01       	movw	r22, r2
    1e36:	c3 01       	movw	r24, r6
    1e38:	eb dd       	rcall	.-1066   	; 0x1a10 <prvInitialiseNewTask>
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	94 de       	rcall	.-728    	; 0x1b66 <prvAddNewTaskToReadyList>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <xTaskCreate+0x74>
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	0f 91       	pop	r16
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	bf 90       	pop	r11
    1e54:	af 90       	pop	r10
    1e56:	9f 90       	pop	r9
    1e58:	8f 90       	pop	r8
    1e5a:	7f 90       	pop	r7
    1e5c:	6f 90       	pop	r6
    1e5e:	5f 90       	pop	r5
    1e60:	4f 90       	pop	r4
    1e62:	3f 90       	pop	r3
    1e64:	2f 90       	pop	r2
    1e66:	08 95       	ret

00001e68 <vTaskStartScheduler>:
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	0f 2e       	mov	r0, r31
    1e70:	f1 e9       	ldi	r31, 0x91	; 145
    1e72:	ef 2e       	mov	r14, r31
    1e74:	f6 e1       	ldi	r31, 0x16	; 22
    1e76:	ff 2e       	mov	r15, r31
    1e78:	f0 2d       	mov	r31, r0
    1e7a:	00 e0       	ldi	r16, 0x00	; 0
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 ec       	ldi	r20, 0xC0	; 192
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	67 e1       	ldi	r22, 0x17	; 23
    1e86:	73 e0       	ldi	r23, 0x03	; 3
    1e88:	8e e4       	ldi	r24, 0x4E	; 78
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	a1 df       	rcall	.-190    	; 0x1dd0 <xTaskCreate>
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	11 f4       	brne	.+4      	; 0x1e96 <vTaskStartScheduler+0x2e>
    1e92:	0e 94 e6 18 	call	0x31cc	; 0x31cc <xTimerCreateTimerTask>
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	c9 f4       	brne	.+50     	; 0x1ecc <vTaskStartScheduler+0x64>
    1e9a:	f8 94       	cli
    1e9c:	8f ef       	ldi	r24, 0xFF	; 255
    1e9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	80 93 93 16 	sts	0x1693, r24	; 0x801693 <xNextTaskUnblockTime>
    1ea6:	90 93 94 16 	sts	0x1694, r25	; 0x801694 <xNextTaskUnblockTime+0x1>
    1eaa:	a0 93 95 16 	sts	0x1695, r26	; 0x801695 <xNextTaskUnblockTime+0x2>
    1eae:	b0 93 96 16 	sts	0x1696, r27	; 0x801696 <xNextTaskUnblockTime+0x3>
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	80 93 9e 16 	sts	0x169E, r24	; 0x80169e <xSchedulerRunning>
    1eb8:	10 92 a0 16 	sts	0x16A0, r1	; 0x8016a0 <xTickCount>
    1ebc:	10 92 a1 16 	sts	0x16A1, r1	; 0x8016a1 <xTickCount+0x1>
    1ec0:	10 92 a2 16 	sts	0x16A2, r1	; 0x8016a2 <xTickCount+0x2>
    1ec4:	10 92 a3 16 	sts	0x16A3, r1	; 0x8016a3 <xTickCount+0x3>
    1ec8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <xPortStartScheduler>
    1ecc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1ed0:	0f 91       	pop	r16
    1ed2:	ff 90       	pop	r15
    1ed4:	ef 90       	pop	r14
    1ed6:	08 95       	ret

00001ed8 <vTaskSuspendAll>:
    1ed8:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <uxSchedulerSuspended>
    1edc:	8f 5f       	subi	r24, 0xFF	; 255
    1ede:	80 93 90 16 	sts	0x1690, r24	; 0x801690 <uxSchedulerSuspended>
    1ee2:	08 95       	ret

00001ee4 <xTaskGetTickCount>:
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	0f 92       	push	r0
    1eea:	60 91 a0 16 	lds	r22, 0x16A0	; 0x8016a0 <xTickCount>
    1eee:	70 91 a1 16 	lds	r23, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    1ef2:	80 91 a2 16 	lds	r24, 0x16A2	; 0x8016a2 <xTickCount+0x2>
    1ef6:	90 91 a3 16 	lds	r25, 0x16A3	; 0x8016a3 <xTickCount+0x3>
    1efa:	0f 90       	pop	r0
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	08 95       	ret

00001f00 <xTaskIncrementTick>:
    1f00:	cf 92       	push	r12
    1f02:	df 92       	push	r13
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <uxSchedulerSuspended>
    1f10:	81 11       	cpse	r24, r1
    1f12:	05 c1       	rjmp	.+522    	; 0x211e <__DATA_REGION_LENGTH__+0x11e>
    1f14:	c0 90 a0 16 	lds	r12, 0x16A0	; 0x8016a0 <xTickCount>
    1f18:	d0 90 a1 16 	lds	r13, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    1f1c:	e0 90 a2 16 	lds	r14, 0x16A2	; 0x8016a2 <xTickCount+0x2>
    1f20:	f0 90 a3 16 	lds	r15, 0x16A3	; 0x8016a3 <xTickCount+0x3>
    1f24:	8f ef       	ldi	r24, 0xFF	; 255
    1f26:	c8 1a       	sub	r12, r24
    1f28:	d8 0a       	sbc	r13, r24
    1f2a:	e8 0a       	sbc	r14, r24
    1f2c:	f8 0a       	sbc	r15, r24
    1f2e:	c0 92 a0 16 	sts	0x16A0, r12	; 0x8016a0 <xTickCount>
    1f32:	d0 92 a1 16 	sts	0x16A1, r13	; 0x8016a1 <xTickCount+0x1>
    1f36:	e0 92 a2 16 	sts	0x16A2, r14	; 0x8016a2 <xTickCount+0x2>
    1f3a:	f0 92 a3 16 	sts	0x16A3, r15	; 0x8016a3 <xTickCount+0x3>
    1f3e:	c1 14       	cp	r12, r1
    1f40:	d1 04       	cpc	r13, r1
    1f42:	e1 04       	cpc	r14, r1
    1f44:	f1 04       	cpc	r15, r1
    1f46:	b1 f4       	brne	.+44     	; 0x1f74 <xTaskIncrementTick+0x74>
    1f48:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <pxDelayedTaskList>
    1f4c:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <pxDelayedTaskList+0x1>
    1f50:	20 91 c7 16 	lds	r18, 0x16C7	; 0x8016c7 <pxOverflowDelayedTaskList>
    1f54:	30 91 c8 16 	lds	r19, 0x16C8	; 0x8016c8 <pxOverflowDelayedTaskList+0x1>
    1f58:	30 93 ca 16 	sts	0x16CA, r19	; 0x8016ca <pxDelayedTaskList+0x1>
    1f5c:	20 93 c9 16 	sts	0x16C9, r18	; 0x8016c9 <pxDelayedTaskList>
    1f60:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <pxOverflowDelayedTaskList+0x1>
    1f64:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <pxOverflowDelayedTaskList>
    1f68:	80 91 98 16 	lds	r24, 0x1698	; 0x801698 <xNumOfOverflows>
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	80 93 98 16 	sts	0x1698, r24	; 0x801698 <xNumOfOverflows>
    1f72:	1c dd       	rcall	.-1480   	; 0x19ac <prvResetNextTaskUnblockTime>
    1f74:	80 91 93 16 	lds	r24, 0x1693	; 0x801693 <xNextTaskUnblockTime>
    1f78:	90 91 94 16 	lds	r25, 0x1694	; 0x801694 <xNextTaskUnblockTime+0x1>
    1f7c:	a0 91 95 16 	lds	r26, 0x1695	; 0x801695 <xNextTaskUnblockTime+0x2>
    1f80:	b0 91 96 16 	lds	r27, 0x1696	; 0x801696 <xNextTaskUnblockTime+0x3>
    1f84:	c8 16       	cp	r12, r24
    1f86:	d9 06       	cpc	r13, r25
    1f88:	ea 06       	cpc	r14, r26
    1f8a:	fb 06       	cpc	r15, r27
    1f8c:	20 f4       	brcc	.+8      	; 0x1f96 <xTaskIncrementTick+0x96>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	b2 c0       	rjmp	.+356    	; 0x20f6 <__DATA_REGION_LENGTH__+0xf6>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <xTaskIncrementTick+0x98>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxDelayedTaskList>
    1f9c:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxDelayedTaskList+0x1>
    1fa0:	90 81       	ld	r25, Z
    1fa2:	91 11       	cpse	r25, r1
    1fa4:	0c c0       	rjmp	.+24     	; 0x1fbe <xTaskIncrementTick+0xbe>
    1fa6:	4f ef       	ldi	r20, 0xFF	; 255
    1fa8:	5f ef       	ldi	r21, 0xFF	; 255
    1faa:	ba 01       	movw	r22, r20
    1fac:	40 93 93 16 	sts	0x1693, r20	; 0x801693 <xNextTaskUnblockTime>
    1fb0:	50 93 94 16 	sts	0x1694, r21	; 0x801694 <xNextTaskUnblockTime+0x1>
    1fb4:	60 93 95 16 	sts	0x1695, r22	; 0x801695 <xNextTaskUnblockTime+0x2>
    1fb8:	70 93 96 16 	sts	0x1696, r23	; 0x801696 <xNextTaskUnblockTime+0x3>
    1fbc:	9c c0       	rjmp	.+312    	; 0x20f6 <__DATA_REGION_LENGTH__+0xf6>
    1fbe:	e0 91 c9 16 	lds	r30, 0x16C9	; 0x8016c9 <pxDelayedTaskList>
    1fc2:	f0 91 ca 16 	lds	r31, 0x16CA	; 0x8016ca <pxDelayedTaskList+0x1>
    1fc6:	07 80       	ldd	r0, Z+7	; 0x07
    1fc8:	f0 85       	ldd	r31, Z+8	; 0x08
    1fca:	e0 2d       	mov	r30, r0
    1fcc:	00 84       	ldd	r0, Z+8	; 0x08
    1fce:	f1 85       	ldd	r31, Z+9	; 0x09
    1fd0:	e0 2d       	mov	r30, r0
    1fd2:	42 81       	ldd	r20, Z+2	; 0x02
    1fd4:	53 81       	ldd	r21, Z+3	; 0x03
    1fd6:	64 81       	ldd	r22, Z+4	; 0x04
    1fd8:	75 81       	ldd	r23, Z+5	; 0x05
    1fda:	c4 16       	cp	r12, r20
    1fdc:	d5 06       	cpc	r13, r21
    1fde:	e6 06       	cpc	r14, r22
    1fe0:	f7 06       	cpc	r15, r23
    1fe2:	48 f4       	brcc	.+18     	; 0x1ff6 <xTaskIncrementTick+0xf6>
    1fe4:	40 93 93 16 	sts	0x1693, r20	; 0x801693 <xNextTaskUnblockTime>
    1fe8:	50 93 94 16 	sts	0x1694, r21	; 0x801694 <xNextTaskUnblockTime+0x1>
    1fec:	60 93 95 16 	sts	0x1695, r22	; 0x801695 <xNextTaskUnblockTime+0x2>
    1ff0:	70 93 96 16 	sts	0x1696, r23	; 0x801696 <xNextTaskUnblockTime+0x3>
    1ff4:	80 c0       	rjmp	.+256    	; 0x20f6 <__DATA_REGION_LENGTH__+0xf6>
    1ff6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ff8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ffa:	c6 81       	ldd	r28, Z+6	; 0x06
    1ffc:	d7 81       	ldd	r29, Z+7	; 0x07
    1ffe:	20 85       	ldd	r18, Z+8	; 0x08
    2000:	31 85       	ldd	r19, Z+9	; 0x09
    2002:	3f 83       	std	Y+7, r19	; 0x07
    2004:	2e 83       	std	Y+6, r18	; 0x06
    2006:	c0 85       	ldd	r28, Z+8	; 0x08
    2008:	d1 85       	ldd	r29, Z+9	; 0x09
    200a:	26 81       	ldd	r18, Z+6	; 0x06
    200c:	37 81       	ldd	r19, Z+7	; 0x07
    200e:	3d 83       	std	Y+5, r19	; 0x05
    2010:	2c 83       	std	Y+4, r18	; 0x04
    2012:	11 96       	adiw	r26, 0x01	; 1
    2014:	4d 91       	ld	r20, X+
    2016:	5c 91       	ld	r21, X
    2018:	12 97       	sbiw	r26, 0x02	; 2
    201a:	9f 01       	movw	r18, r30
    201c:	2e 5f       	subi	r18, 0xFE	; 254
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	42 17       	cp	r20, r18
    2022:	53 07       	cpc	r21, r19
    2024:	31 f4       	brne	.+12     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2026:	40 85       	ldd	r20, Z+8	; 0x08
    2028:	51 85       	ldd	r21, Z+9	; 0x09
    202a:	12 96       	adiw	r26, 0x02	; 2
    202c:	5c 93       	st	X, r21
    202e:	4e 93       	st	-X, r20
    2030:	11 97       	sbiw	r26, 0x01	; 1
    2032:	15 86       	std	Z+13, r1	; 0x0d
    2034:	14 86       	std	Z+12, r1	; 0x0c
    2036:	9c 91       	ld	r25, X
    2038:	91 50       	subi	r25, 0x01	; 1
    203a:	9c 93       	st	X, r25
    203c:	a0 8d       	ldd	r26, Z+24	; 0x18
    203e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2040:	10 97       	sbiw	r26, 0x00	; 0
    2042:	09 f1       	breq	.+66     	; 0x2086 <__DATA_REGION_LENGTH__+0x86>
    2044:	c2 89       	ldd	r28, Z+18	; 0x12
    2046:	d3 89       	ldd	r29, Z+19	; 0x13
    2048:	44 89       	ldd	r20, Z+20	; 0x14
    204a:	55 89       	ldd	r21, Z+21	; 0x15
    204c:	5f 83       	std	Y+7, r21	; 0x07
    204e:	4e 83       	std	Y+6, r20	; 0x06
    2050:	c4 89       	ldd	r28, Z+20	; 0x14
    2052:	d5 89       	ldd	r29, Z+21	; 0x15
    2054:	42 89       	ldd	r20, Z+18	; 0x12
    2056:	53 89       	ldd	r21, Z+19	; 0x13
    2058:	5d 83       	std	Y+5, r21	; 0x05
    205a:	4c 83       	std	Y+4, r20	; 0x04
    205c:	11 96       	adiw	r26, 0x01	; 1
    205e:	6d 91       	ld	r22, X+
    2060:	7c 91       	ld	r23, X
    2062:	12 97       	sbiw	r26, 0x02	; 2
    2064:	af 01       	movw	r20, r30
    2066:	42 5f       	subi	r20, 0xF2	; 242
    2068:	5f 4f       	sbci	r21, 0xFF	; 255
    206a:	64 17       	cp	r22, r20
    206c:	75 07       	cpc	r23, r21
    206e:	31 f4       	brne	.+12     	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    2070:	44 89       	ldd	r20, Z+20	; 0x14
    2072:	55 89       	ldd	r21, Z+21	; 0x15
    2074:	12 96       	adiw	r26, 0x02	; 2
    2076:	5c 93       	st	X, r21
    2078:	4e 93       	st	-X, r20
    207a:	11 97       	sbiw	r26, 0x01	; 1
    207c:	11 8e       	std	Z+25, r1	; 0x19
    207e:	10 8e       	std	Z+24, r1	; 0x18
    2080:	9c 91       	ld	r25, X
    2082:	91 50       	subi	r25, 0x01	; 1
    2084:	9c 93       	st	X, r25
    2086:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2088:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <uxTopReadyPriority>
    208c:	9a 17       	cp	r25, r26
    208e:	10 f4       	brcc	.+4      	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
    2090:	a0 93 9f 16 	sts	0x169F, r26	; 0x80169f <uxTopReadyPriority>
    2094:	9b e0       	ldi	r25, 0x0B	; 11
    2096:	9a 9f       	mul	r25, r26
    2098:	d0 01       	movw	r26, r0
    209a:	11 24       	eor	r1, r1
    209c:	af 51       	subi	r26, 0x1F	; 31
    209e:	b9 4e       	sbci	r27, 0xE9	; 233
    20a0:	11 96       	adiw	r26, 0x01	; 1
    20a2:	0d 90       	ld	r0, X+
    20a4:	bc 91       	ld	r27, X
    20a6:	a0 2d       	mov	r26, r0
    20a8:	b7 83       	std	Z+7, r27	; 0x07
    20aa:	a6 83       	std	Z+6, r26	; 0x06
    20ac:	16 96       	adiw	r26, 0x06	; 6
    20ae:	4d 91       	ld	r20, X+
    20b0:	5c 91       	ld	r21, X
    20b2:	17 97       	sbiw	r26, 0x07	; 7
    20b4:	51 87       	std	Z+9, r21	; 0x09
    20b6:	40 87       	std	Z+8, r20	; 0x08
    20b8:	16 96       	adiw	r26, 0x06	; 6
    20ba:	cd 91       	ld	r28, X+
    20bc:	dc 91       	ld	r29, X
    20be:	17 97       	sbiw	r26, 0x07	; 7
    20c0:	3d 83       	std	Y+5, r19	; 0x05
    20c2:	2c 83       	std	Y+4, r18	; 0x04
    20c4:	17 96       	adiw	r26, 0x07	; 7
    20c6:	3c 93       	st	X, r19
    20c8:	2e 93       	st	-X, r18
    20ca:	16 97       	sbiw	r26, 0x06	; 6
    20cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20ce:	9a 9f       	mul	r25, r26
    20d0:	d0 01       	movw	r26, r0
    20d2:	11 24       	eor	r1, r1
    20d4:	af 51       	subi	r26, 0x1F	; 31
    20d6:	b9 4e       	sbci	r27, 0xE9	; 233
    20d8:	b5 87       	std	Z+13, r27	; 0x0d
    20da:	a4 87       	std	Z+12, r26	; 0x0c
    20dc:	9c 91       	ld	r25, X
    20de:	9f 5f       	subi	r25, 0xFF	; 255
    20e0:	9c 93       	st	X, r25
    20e2:	22 8d       	ldd	r18, Z+26	; 0x1a
    20e4:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    20e8:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    20ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    20ee:	29 17       	cp	r18, r25
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__DATA_REGION_LENGTH__+0xf4>
    20f2:	4f cf       	rjmp	.-354    	; 0x1f92 <xTaskIncrementTick+0x92>
    20f4:	51 cf       	rjmp	.-350    	; 0x1f98 <xTaskIncrementTick+0x98>
    20f6:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    20fa:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    20fe:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2100:	9b e0       	ldi	r25, 0x0B	; 11
    2102:	e9 9f       	mul	r30, r25
    2104:	f0 01       	movw	r30, r0
    2106:	11 24       	eor	r1, r1
    2108:	ef 51       	subi	r30, 0x1F	; 31
    210a:	f9 4e       	sbci	r31, 0xE9	; 233
    210c:	90 81       	ld	r25, Z
    210e:	92 30       	cpi	r25, 0x02	; 2
    2110:	08 f0       	brcs	.+2      	; 0x2114 <__DATA_REGION_LENGTH__+0x114>
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 91 99 16 	lds	r25, 0x1699	; 0x801699 <xYieldPending>
    2118:	91 11       	cpse	r25, r1
    211a:	16 c0       	rjmp	.+44     	; 0x2148 <__DATA_REGION_LENGTH__+0x148>
    211c:	16 c0       	rjmp	.+44     	; 0x214a <__DATA_REGION_LENGTH__+0x14a>
    211e:	80 91 9a 16 	lds	r24, 0x169A	; 0x80169a <xPendedTicks>
    2122:	90 91 9b 16 	lds	r25, 0x169B	; 0x80169b <xPendedTicks+0x1>
    2126:	a0 91 9c 16 	lds	r26, 0x169C	; 0x80169c <xPendedTicks+0x2>
    212a:	b0 91 9d 16 	lds	r27, 0x169D	; 0x80169d <xPendedTicks+0x3>
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	a1 1d       	adc	r26, r1
    2132:	b1 1d       	adc	r27, r1
    2134:	80 93 9a 16 	sts	0x169A, r24	; 0x80169a <xPendedTicks>
    2138:	90 93 9b 16 	sts	0x169B, r25	; 0x80169b <xPendedTicks+0x1>
    213c:	a0 93 9c 16 	sts	0x169C, r26	; 0x80169c <xPendedTicks+0x2>
    2140:	b0 93 9d 16 	sts	0x169D, r27	; 0x80169d <xPendedTicks+0x3>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	01 c0       	rjmp	.+2      	; 0x214a <__DATA_REGION_LENGTH__+0x14a>
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	ff 90       	pop	r15
    2150:	ef 90       	pop	r14
    2152:	df 90       	pop	r13
    2154:	cf 90       	pop	r12
    2156:	08 95       	ret

00002158 <xTaskResumeAll>:
    2158:	cf 92       	push	r12
    215a:	df 92       	push	r13
    215c:	ef 92       	push	r14
    215e:	ff 92       	push	r15
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	0f 92       	push	r0
    216a:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <uxSchedulerSuspended>
    216e:	81 50       	subi	r24, 0x01	; 1
    2170:	80 93 90 16 	sts	0x1690, r24	; 0x801690 <uxSchedulerSuspended>
    2174:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <uxSchedulerSuspended>
    2178:	81 11       	cpse	r24, r1
    217a:	be c0       	rjmp	.+380    	; 0x22f8 <__stack+0xf9>
    217c:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <uxCurrentNumberOfTasks>
    2180:	81 11       	cpse	r24, r1
    2182:	88 c0       	rjmp	.+272    	; 0x2294 <__stack+0x95>
    2184:	bc c0       	rjmp	.+376    	; 0x22fe <__stack+0xff>
    2186:	e0 91 c3 16 	lds	r30, 0x16C3	; 0x8016c3 <xPendingReadyList+0x7>
    218a:	f0 91 c4 16 	lds	r31, 0x16C4	; 0x8016c4 <xPendingReadyList+0x8>
    218e:	00 84       	ldd	r0, Z+8	; 0x08
    2190:	f1 85       	ldd	r31, Z+9	; 0x09
    2192:	e0 2d       	mov	r30, r0
    2194:	a0 8d       	ldd	r26, Z+24	; 0x18
    2196:	b1 8d       	ldd	r27, Z+25	; 0x19
    2198:	c2 89       	ldd	r28, Z+18	; 0x12
    219a:	d3 89       	ldd	r29, Z+19	; 0x13
    219c:	84 89       	ldd	r24, Z+20	; 0x14
    219e:	95 89       	ldd	r25, Z+21	; 0x15
    21a0:	9f 83       	std	Y+7, r25	; 0x07
    21a2:	8e 83       	std	Y+6, r24	; 0x06
    21a4:	c4 89       	ldd	r28, Z+20	; 0x14
    21a6:	d5 89       	ldd	r29, Z+21	; 0x15
    21a8:	82 89       	ldd	r24, Z+18	; 0x12
    21aa:	93 89       	ldd	r25, Z+19	; 0x13
    21ac:	9d 83       	std	Y+5, r25	; 0x05
    21ae:	8c 83       	std	Y+4, r24	; 0x04
    21b0:	11 96       	adiw	r26, 0x01	; 1
    21b2:	2d 91       	ld	r18, X+
    21b4:	3c 91       	ld	r19, X
    21b6:	12 97       	sbiw	r26, 0x02	; 2
    21b8:	cf 01       	movw	r24, r30
    21ba:	0e 96       	adiw	r24, 0x0e	; 14
    21bc:	28 17       	cp	r18, r24
    21be:	39 07       	cpc	r19, r25
    21c0:	31 f4       	brne	.+12     	; 0x21ce <xTaskResumeAll+0x76>
    21c2:	84 89       	ldd	r24, Z+20	; 0x14
    21c4:	95 89       	ldd	r25, Z+21	; 0x15
    21c6:	12 96       	adiw	r26, 0x02	; 2
    21c8:	9c 93       	st	X, r25
    21ca:	8e 93       	st	-X, r24
    21cc:	11 97       	sbiw	r26, 0x01	; 1
    21ce:	11 8e       	std	Z+25, r1	; 0x19
    21d0:	10 8e       	std	Z+24, r1	; 0x18
    21d2:	8c 91       	ld	r24, X
    21d4:	81 50       	subi	r24, 0x01	; 1
    21d6:	8c 93       	st	X, r24
    21d8:	a4 85       	ldd	r26, Z+12	; 0x0c
    21da:	b5 85       	ldd	r27, Z+13	; 0x0d
    21dc:	c6 81       	ldd	r28, Z+6	; 0x06
    21de:	d7 81       	ldd	r29, Z+7	; 0x07
    21e0:	80 85       	ldd	r24, Z+8	; 0x08
    21e2:	91 85       	ldd	r25, Z+9	; 0x09
    21e4:	9f 83       	std	Y+7, r25	; 0x07
    21e6:	8e 83       	std	Y+6, r24	; 0x06
    21e8:	c0 85       	ldd	r28, Z+8	; 0x08
    21ea:	d1 85       	ldd	r29, Z+9	; 0x09
    21ec:	86 81       	ldd	r24, Z+6	; 0x06
    21ee:	97 81       	ldd	r25, Z+7	; 0x07
    21f0:	9d 83       	std	Y+5, r25	; 0x05
    21f2:	8c 83       	std	Y+4, r24	; 0x04
    21f4:	11 96       	adiw	r26, 0x01	; 1
    21f6:	8d 91       	ld	r24, X+
    21f8:	9c 91       	ld	r25, X
    21fa:	12 97       	sbiw	r26, 0x02	; 2
    21fc:	9f 01       	movw	r18, r30
    21fe:	2e 5f       	subi	r18, 0xFE	; 254
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	82 17       	cp	r24, r18
    2204:	93 07       	cpc	r25, r19
    2206:	31 f4       	brne	.+12     	; 0x2214 <__stack+0x15>
    2208:	80 85       	ldd	r24, Z+8	; 0x08
    220a:	91 85       	ldd	r25, Z+9	; 0x09
    220c:	12 96       	adiw	r26, 0x02	; 2
    220e:	9c 93       	st	X, r25
    2210:	8e 93       	st	-X, r24
    2212:	11 97       	sbiw	r26, 0x01	; 1
    2214:	15 86       	std	Z+13, r1	; 0x0d
    2216:	14 86       	std	Z+12, r1	; 0x0c
    2218:	8c 91       	ld	r24, X
    221a:	81 50       	subi	r24, 0x01	; 1
    221c:	8c 93       	st	X, r24
    221e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2220:	80 91 9f 16 	lds	r24, 0x169F	; 0x80169f <uxTopReadyPriority>
    2224:	8a 17       	cp	r24, r26
    2226:	10 f4       	brcc	.+4      	; 0x222c <__stack+0x2d>
    2228:	a0 93 9f 16 	sts	0x169F, r26	; 0x80169f <uxTopReadyPriority>
    222c:	8b e0       	ldi	r24, 0x0B	; 11
    222e:	8a 9f       	mul	r24, r26
    2230:	d0 01       	movw	r26, r0
    2232:	11 24       	eor	r1, r1
    2234:	af 51       	subi	r26, 0x1F	; 31
    2236:	b9 4e       	sbci	r27, 0xE9	; 233
    2238:	11 96       	adiw	r26, 0x01	; 1
    223a:	0d 90       	ld	r0, X+
    223c:	bc 91       	ld	r27, X
    223e:	a0 2d       	mov	r26, r0
    2240:	b7 83       	std	Z+7, r27	; 0x07
    2242:	a6 83       	std	Z+6, r26	; 0x06
    2244:	16 96       	adiw	r26, 0x06	; 6
    2246:	4d 91       	ld	r20, X+
    2248:	5c 91       	ld	r21, X
    224a:	17 97       	sbiw	r26, 0x07	; 7
    224c:	51 87       	std	Z+9, r21	; 0x09
    224e:	40 87       	std	Z+8, r20	; 0x08
    2250:	16 96       	adiw	r26, 0x06	; 6
    2252:	cd 91       	ld	r28, X+
    2254:	dc 91       	ld	r29, X
    2256:	17 97       	sbiw	r26, 0x07	; 7
    2258:	3d 83       	std	Y+5, r19	; 0x05
    225a:	2c 83       	std	Y+4, r18	; 0x04
    225c:	17 96       	adiw	r26, 0x07	; 7
    225e:	3c 93       	st	X, r19
    2260:	2e 93       	st	-X, r18
    2262:	16 97       	sbiw	r26, 0x06	; 6
    2264:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2266:	8a 9f       	mul	r24, r26
    2268:	d0 01       	movw	r26, r0
    226a:	11 24       	eor	r1, r1
    226c:	af 51       	subi	r26, 0x1F	; 31
    226e:	b9 4e       	sbci	r27, 0xE9	; 233
    2270:	b5 87       	std	Z+13, r27	; 0x0d
    2272:	a4 87       	std	Z+12, r26	; 0x0c
    2274:	8c 91       	ld	r24, X
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	8c 93       	st	X, r24
    227a:	92 8d       	ldd	r25, Z+26	; 0x1a
    227c:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
    2280:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2284:	5a 96       	adiw	r26, 0x1a	; 26
    2286:	8c 91       	ld	r24, X
    2288:	98 17       	cp	r25, r24
    228a:	30 f0       	brcs	.+12     	; 0x2298 <__stack+0x99>
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <xYieldPending>
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <__stack+0x99>
    2294:	e0 e0       	ldi	r30, 0x00	; 0
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 91 bc 16 	lds	r24, 0x16BC	; 0x8016bc <xPendingReadyList>
    229c:	81 11       	cpse	r24, r1
    229e:	73 cf       	rjmp	.-282    	; 0x2186 <xTaskResumeAll+0x2e>
    22a0:	ef 2b       	or	r30, r31
    22a2:	09 f0       	breq	.+2      	; 0x22a6 <__stack+0xa7>
    22a4:	83 db       	rcall	.-2298   	; 0x19ac <prvResetNextTaskUnblockTime>
    22a6:	c0 90 9a 16 	lds	r12, 0x169A	; 0x80169a <xPendedTicks>
    22aa:	d0 90 9b 16 	lds	r13, 0x169B	; 0x80169b <xPendedTicks+0x1>
    22ae:	e0 90 9c 16 	lds	r14, 0x169C	; 0x80169c <xPendedTicks+0x2>
    22b2:	f0 90 9d 16 	lds	r15, 0x169D	; 0x80169d <xPendedTicks+0x3>
    22b6:	c1 14       	cp	r12, r1
    22b8:	d1 04       	cpc	r13, r1
    22ba:	e1 04       	cpc	r14, r1
    22bc:	f1 04       	cpc	r15, r1
    22be:	a1 f0       	breq	.+40     	; 0x22e8 <__stack+0xe9>
    22c0:	1f de       	rcall	.-962    	; 0x1f00 <xTaskIncrementTick>
    22c2:	88 23       	and	r24, r24
    22c4:	19 f0       	breq	.+6      	; 0x22cc <__stack+0xcd>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <xYieldPending>
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	c8 1a       	sub	r12, r24
    22d0:	d1 08       	sbc	r13, r1
    22d2:	e1 08       	sbc	r14, r1
    22d4:	f1 08       	sbc	r15, r1
    22d6:	a1 f7       	brne	.-24     	; 0x22c0 <__stack+0xc1>
    22d8:	10 92 9a 16 	sts	0x169A, r1	; 0x80169a <xPendedTicks>
    22dc:	10 92 9b 16 	sts	0x169B, r1	; 0x80169b <xPendedTicks+0x1>
    22e0:	10 92 9c 16 	sts	0x169C, r1	; 0x80169c <xPendedTicks+0x2>
    22e4:	10 92 9d 16 	sts	0x169D, r1	; 0x80169d <xPendedTicks+0x3>
    22e8:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <xYieldPending>
    22ec:	88 23       	and	r24, r24
    22ee:	31 f0       	breq	.+12     	; 0x22fc <__stack+0xfd>
    22f0:	0e 94 26 06 	call	0xc4c	; 0xc4c <vPortYield>
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	03 c0       	rjmp	.+6      	; 0x22fe <__stack+0xff>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	01 c0       	rjmp	.+2      	; 0x22fe <__stack+0xff>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	0f 90       	pop	r0
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	08 95       	ret

00002310 <xTaskDelayUntil>:
    2310:	8f 92       	push	r8
    2312:	9f 92       	push	r9
    2314:	af 92       	push	r10
    2316:	bf 92       	push	r11
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	ec 01       	movw	r28, r24
    2328:	6a 01       	movw	r12, r20
    232a:	7b 01       	movw	r14, r22
    232c:	d5 dd       	rcall	.-1110   	; 0x1ed8 <vTaskSuspendAll>
    232e:	80 90 a0 16 	lds	r8, 0x16A0	; 0x8016a0 <xTickCount>
    2332:	90 90 a1 16 	lds	r9, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    2336:	a0 90 a2 16 	lds	r10, 0x16A2	; 0x8016a2 <xTickCount+0x2>
    233a:	b0 90 a3 16 	lds	r11, 0x16A3	; 0x8016a3 <xTickCount+0x3>
    233e:	88 81       	ld	r24, Y
    2340:	99 81       	ldd	r25, Y+1	; 0x01
    2342:	aa 81       	ldd	r26, Y+2	; 0x02
    2344:	bb 81       	ldd	r27, Y+3	; 0x03
    2346:	ac 01       	movw	r20, r24
    2348:	bd 01       	movw	r22, r26
    234a:	4c 0d       	add	r20, r12
    234c:	5d 1d       	adc	r21, r13
    234e:	6e 1d       	adc	r22, r14
    2350:	7f 1d       	adc	r23, r15
    2352:	88 16       	cp	r8, r24
    2354:	99 06       	cpc	r9, r25
    2356:	aa 06       	cpc	r10, r26
    2358:	bb 06       	cpc	r11, r27
    235a:	60 f4       	brcc	.+24     	; 0x2374 <xTaskDelayUntil+0x64>
    235c:	48 17       	cp	r20, r24
    235e:	59 07       	cpc	r21, r25
    2360:	6a 07       	cpc	r22, r26
    2362:	7b 07       	cpc	r23, r27
    2364:	98 f4       	brcc	.+38     	; 0x238c <xTaskDelayUntil+0x7c>
    2366:	84 16       	cp	r8, r20
    2368:	95 06       	cpc	r9, r21
    236a:	a6 06       	cpc	r10, r22
    236c:	b7 06       	cpc	r11, r23
    236e:	80 f0       	brcs	.+32     	; 0x2390 <xTaskDelayUntil+0x80>
    2370:	10 e0       	ldi	r17, 0x00	; 0
    2372:	13 c0       	rjmp	.+38     	; 0x239a <xTaskDelayUntil+0x8a>
    2374:	48 17       	cp	r20, r24
    2376:	59 07       	cpc	r21, r25
    2378:	6a 07       	cpc	r22, r26
    237a:	7b 07       	cpc	r23, r27
    237c:	58 f0       	brcs	.+22     	; 0x2394 <xTaskDelayUntil+0x84>
    237e:	84 16       	cp	r8, r20
    2380:	95 06       	cpc	r9, r21
    2382:	a6 06       	cpc	r10, r22
    2384:	b7 06       	cpc	r11, r23
    2386:	40 f0       	brcs	.+16     	; 0x2398 <xTaskDelayUntil+0x88>
    2388:	10 e0       	ldi	r17, 0x00	; 0
    238a:	07 c0       	rjmp	.+14     	; 0x239a <xTaskDelayUntil+0x8a>
    238c:	10 e0       	ldi	r17, 0x00	; 0
    238e:	05 c0       	rjmp	.+10     	; 0x239a <xTaskDelayUntil+0x8a>
    2390:	11 e0       	ldi	r17, 0x01	; 1
    2392:	03 c0       	rjmp	.+6      	; 0x239a <xTaskDelayUntil+0x8a>
    2394:	11 e0       	ldi	r17, 0x01	; 1
    2396:	01 c0       	rjmp	.+2      	; 0x239a <xTaskDelayUntil+0x8a>
    2398:	11 e0       	ldi	r17, 0x01	; 1
    239a:	48 83       	st	Y, r20
    239c:	59 83       	std	Y+1, r21	; 0x01
    239e:	6a 83       	std	Y+2, r22	; 0x02
    23a0:	7b 83       	std	Y+3, r23	; 0x03
    23a2:	11 23       	and	r17, r17
    23a4:	41 f0       	breq	.+16     	; 0x23b6 <xTaskDelayUntil+0xa6>
    23a6:	cb 01       	movw	r24, r22
    23a8:	ba 01       	movw	r22, r20
    23aa:	68 19       	sub	r22, r8
    23ac:	79 09       	sbc	r23, r9
    23ae:	8a 09       	sbc	r24, r10
    23b0:	9b 09       	sbc	r25, r11
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	6b dc       	rcall	.-1834   	; 0x1c8c <prvAddCurrentTaskToDelayedList>
    23b6:	d0 de       	rcall	.-608    	; 0x2158 <xTaskResumeAll>
    23b8:	81 11       	cpse	r24, r1
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <xTaskDelayUntil+0xb0>
    23bc:	0e 94 26 06 	call	0xc4c	; 0xc4c <vPortYield>
    23c0:	81 2f       	mov	r24, r17
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	1f 91       	pop	r17
    23c8:	ff 90       	pop	r15
    23ca:	ef 90       	pop	r14
    23cc:	df 90       	pop	r13
    23ce:	cf 90       	pop	r12
    23d0:	bf 90       	pop	r11
    23d2:	af 90       	pop	r10
    23d4:	9f 90       	pop	r9
    23d6:	8f 90       	pop	r8
    23d8:	08 95       	ret

000023da <vTaskDelay>:
    23da:	cf 92       	push	r12
    23dc:	df 92       	push	r13
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	6b 01       	movw	r12, r22
    23e4:	7c 01       	movw	r14, r24
    23e6:	67 2b       	or	r22, r23
    23e8:	68 2b       	or	r22, r24
    23ea:	69 2b       	or	r22, r25
    23ec:	39 f0       	breq	.+14     	; 0x23fc <vTaskDelay+0x22>
    23ee:	74 dd       	rcall	.-1304   	; 0x1ed8 <vTaskSuspendAll>
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	c7 01       	movw	r24, r14
    23f4:	b6 01       	movw	r22, r12
    23f6:	4a dc       	rcall	.-1900   	; 0x1c8c <prvAddCurrentTaskToDelayedList>
    23f8:	af de       	rcall	.-674    	; 0x2158 <xTaskResumeAll>
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <vTaskDelay+0x24>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	81 11       	cpse	r24, r1
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <vTaskDelay+0x2c>
    2402:	0e 94 26 06 	call	0xc4c	; 0xc4c <vPortYield>
    2406:	ff 90       	pop	r15
    2408:	ef 90       	pop	r14
    240a:	df 90       	pop	r13
    240c:	cf 90       	pop	r12
    240e:	08 95       	ret

00002410 <vTaskSwitchContext>:
    2410:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <uxSchedulerSuspended>
    2414:	88 23       	and	r24, r24
    2416:	21 f0       	breq	.+8      	; 0x2420 <vTaskSwitchContext+0x10>
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <xYieldPending>
    241e:	08 95       	ret
    2420:	10 92 99 16 	sts	0x1699, r1	; 0x801699 <xYieldPending>
    2424:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2428:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    242c:	20 81       	ld	r18, Z
    242e:	31 81       	ldd	r19, Z+1	; 0x01
    2430:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2434:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2438:	83 8d       	ldd	r24, Z+27	; 0x1b
    243a:	94 8d       	ldd	r25, Z+28	; 0x1c
    243c:	82 17       	cp	r24, r18
    243e:	93 07       	cpc	r25, r19
    2440:	60 f0       	brcs	.+24     	; 0x245a <vTaskSwitchContext+0x4a>
    2442:	60 91 4f 17 	lds	r22, 0x174F	; 0x80174f <pxCurrentTCB>
    2446:	70 91 50 17 	lds	r23, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    244a:	63 5e       	subi	r22, 0xE3	; 227
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxCurrentTCB>
    2452:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2456:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <vApplicationStackOverflowHook>
    245a:	80 91 9f 16 	lds	r24, 0x169F	; 0x80169f <uxTopReadyPriority>
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <vTaskSwitchContext+0x52>
    2460:	81 50       	subi	r24, 0x01	; 1
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	9b e0       	ldi	r25, 0x0B	; 11
    2468:	92 9f       	mul	r25, r18
    246a:	f0 01       	movw	r30, r0
    246c:	93 9f       	mul	r25, r19
    246e:	f0 0d       	add	r31, r0
    2470:	11 24       	eor	r1, r1
    2472:	ef 51       	subi	r30, 0x1F	; 31
    2474:	f9 4e       	sbci	r31, 0xE9	; 233
    2476:	90 81       	ld	r25, Z
    2478:	99 23       	and	r25, r25
    247a:	91 f3       	breq	.-28     	; 0x2460 <vTaskSwitchContext+0x50>
    247c:	9b e0       	ldi	r25, 0x0B	; 11
    247e:	92 9f       	mul	r25, r18
    2480:	a0 01       	movw	r20, r0
    2482:	93 9f       	mul	r25, r19
    2484:	50 0d       	add	r21, r0
    2486:	11 24       	eor	r1, r1
    2488:	df 01       	movw	r26, r30
    248a:	01 80       	ldd	r0, Z+1	; 0x01
    248c:	f2 81       	ldd	r31, Z+2	; 0x02
    248e:	e0 2d       	mov	r30, r0
    2490:	04 80       	ldd	r0, Z+4	; 0x04
    2492:	f5 81       	ldd	r31, Z+5	; 0x05
    2494:	e0 2d       	mov	r30, r0
    2496:	12 96       	adiw	r26, 0x02	; 2
    2498:	fc 93       	st	X, r31
    249a:	ee 93       	st	-X, r30
    249c:	11 97       	sbiw	r26, 0x01	; 1
    249e:	4c 51       	subi	r20, 0x1C	; 28
    24a0:	59 4e       	sbci	r21, 0xE9	; 233
    24a2:	e4 17       	cp	r30, r20
    24a4:	f5 07       	cpc	r31, r21
    24a6:	29 f4       	brne	.+10     	; 0x24b2 <vTaskSwitchContext+0xa2>
    24a8:	44 81       	ldd	r20, Z+4	; 0x04
    24aa:	55 81       	ldd	r21, Z+5	; 0x05
    24ac:	fd 01       	movw	r30, r26
    24ae:	52 83       	std	Z+2, r21	; 0x02
    24b0:	41 83       	std	Z+1, r20	; 0x01
    24b2:	9b e0       	ldi	r25, 0x0B	; 11
    24b4:	92 9f       	mul	r25, r18
    24b6:	f0 01       	movw	r30, r0
    24b8:	93 9f       	mul	r25, r19
    24ba:	f0 0d       	add	r31, r0
    24bc:	11 24       	eor	r1, r1
    24be:	ef 51       	subi	r30, 0x1F	; 31
    24c0:	f9 4e       	sbci	r31, 0xE9	; 233
    24c2:	01 80       	ldd	r0, Z+1	; 0x01
    24c4:	f2 81       	ldd	r31, Z+2	; 0x02
    24c6:	e0 2d       	mov	r30, r0
    24c8:	20 85       	ldd	r18, Z+8	; 0x08
    24ca:	31 85       	ldd	r19, Z+9	; 0x09
    24cc:	30 93 50 17 	sts	0x1750, r19	; 0x801750 <pxCurrentTCB+0x1>
    24d0:	20 93 4f 17 	sts	0x174F, r18	; 0x80174f <pxCurrentTCB>
    24d4:	80 93 9f 16 	sts	0x169F, r24	; 0x80169f <uxTopReadyPriority>
    24d8:	08 95       	ret

000024da <vTaskPlaceOnEventList>:
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	6a 01       	movw	r12, r20
    24e4:	7b 01       	movw	r14, r22
    24e6:	60 91 4f 17 	lds	r22, 0x174F	; 0x80174f <pxCurrentTCB>
    24ea:	70 91 50 17 	lds	r23, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    24ee:	62 5f       	subi	r22, 0xF2	; 242
    24f0:	7f 4f       	sbci	r23, 0xFF	; 255
    24f2:	0e 94 6d 05 	call	0xada	; 0xada <vListInsert>
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	c7 01       	movw	r24, r14
    24fa:	b6 01       	movw	r22, r12
    24fc:	c7 db       	rcall	.-2162   	; 0x1c8c <prvAddCurrentTaskToDelayedList>
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	df 90       	pop	r13
    2504:	cf 90       	pop	r12
    2506:	08 95       	ret

00002508 <vTaskPlaceOnUnorderedEventList>:
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	fc 01       	movw	r30, r24
    2512:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
    2516:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    251a:	70 68       	ori	r23, 0x80	; 128
    251c:	1e 96       	adiw	r26, 0x0e	; 14
    251e:	4d 93       	st	X+, r20
    2520:	5d 93       	st	X+, r21
    2522:	6d 93       	st	X+, r22
    2524:	7c 93       	st	X, r23
    2526:	51 97       	sbiw	r26, 0x11	; 17
    2528:	a1 81       	ldd	r26, Z+1	; 0x01
    252a:	b2 81       	ldd	r27, Z+2	; 0x02
    252c:	c0 91 4f 17 	lds	r28, 0x174F	; 0x80174f <pxCurrentTCB>
    2530:	d0 91 50 17 	lds	r29, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2534:	bb 8b       	std	Y+19, r27	; 0x13
    2536:	aa 8b       	std	Y+18, r26	; 0x12
    2538:	c0 91 4f 17 	lds	r28, 0x174F	; 0x80174f <pxCurrentTCB>
    253c:	d0 91 50 17 	lds	r29, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2540:	16 96       	adiw	r26, 0x06	; 6
    2542:	8d 91       	ld	r24, X+
    2544:	9c 91       	ld	r25, X
    2546:	17 97       	sbiw	r26, 0x07	; 7
    2548:	9d 8b       	std	Y+21, r25	; 0x15
    254a:	8c 8b       	std	Y+20, r24	; 0x14
    254c:	16 96       	adiw	r26, 0x06	; 6
    254e:	cd 91       	ld	r28, X+
    2550:	dc 91       	ld	r29, X
    2552:	17 97       	sbiw	r26, 0x07	; 7
    2554:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxCurrentTCB>
    2558:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    255c:	0e 96       	adiw	r24, 0x0e	; 14
    255e:	9d 83       	std	Y+5, r25	; 0x05
    2560:	8c 83       	std	Y+4, r24	; 0x04
    2562:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxCurrentTCB>
    2566:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    256a:	0e 96       	adiw	r24, 0x0e	; 14
    256c:	17 96       	adiw	r26, 0x07	; 7
    256e:	9c 93       	st	X, r25
    2570:	8e 93       	st	-X, r24
    2572:	16 97       	sbiw	r26, 0x06	; 6
    2574:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
    2578:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    257c:	59 96       	adiw	r26, 0x19	; 25
    257e:	fc 93       	st	X, r31
    2580:	ee 93       	st	-X, r30
    2582:	58 97       	sbiw	r26, 0x18	; 24
    2584:	80 81       	ld	r24, Z
    2586:	8f 5f       	subi	r24, 0xFF	; 255
    2588:	80 83       	st	Z, r24
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	c9 01       	movw	r24, r18
    258e:	b8 01       	movw	r22, r16
    2590:	7d db       	rcall	.-2310   	; 0x1c8c <prvAddCurrentTaskToDelayedList>
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	1f 91       	pop	r17
    2598:	0f 91       	pop	r16
    259a:	08 95       	ret

0000259c <vTaskPlaceOnEventListRestricted>:
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	fc 01       	movw	r30, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	ba 01       	movw	r22, r20
    25a6:	a1 81       	ldd	r26, Z+1	; 0x01
    25a8:	b2 81       	ldd	r27, Z+2	; 0x02
    25aa:	c0 91 4f 17 	lds	r28, 0x174F	; 0x80174f <pxCurrentTCB>
    25ae:	d0 91 50 17 	lds	r29, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    25b2:	bb 8b       	std	Y+19, r27	; 0x13
    25b4:	aa 8b       	std	Y+18, r26	; 0x12
    25b6:	c0 91 4f 17 	lds	r28, 0x174F	; 0x80174f <pxCurrentTCB>
    25ba:	d0 91 50 17 	lds	r29, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    25be:	16 96       	adiw	r26, 0x06	; 6
    25c0:	4d 91       	ld	r20, X+
    25c2:	5c 91       	ld	r21, X
    25c4:	17 97       	sbiw	r26, 0x07	; 7
    25c6:	5d 8b       	std	Y+21, r21	; 0x15
    25c8:	4c 8b       	std	Y+20, r20	; 0x14
    25ca:	16 96       	adiw	r26, 0x06	; 6
    25cc:	cd 91       	ld	r28, X+
    25ce:	dc 91       	ld	r29, X
    25d0:	17 97       	sbiw	r26, 0x07	; 7
    25d2:	40 91 4f 17 	lds	r20, 0x174F	; 0x80174f <pxCurrentTCB>
    25d6:	50 91 50 17 	lds	r21, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    25da:	42 5f       	subi	r20, 0xF2	; 242
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	5d 83       	std	Y+5, r21	; 0x05
    25e0:	4c 83       	std	Y+4, r20	; 0x04
    25e2:	40 91 4f 17 	lds	r20, 0x174F	; 0x80174f <pxCurrentTCB>
    25e6:	50 91 50 17 	lds	r21, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    25ea:	42 5f       	subi	r20, 0xF2	; 242
    25ec:	5f 4f       	sbci	r21, 0xFF	; 255
    25ee:	17 96       	adiw	r26, 0x07	; 7
    25f0:	5c 93       	st	X, r21
    25f2:	4e 93       	st	-X, r20
    25f4:	16 97       	sbiw	r26, 0x06	; 6
    25f6:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
    25fa:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    25fe:	59 96       	adiw	r26, 0x19	; 25
    2600:	fc 93       	st	X, r31
    2602:	ee 93       	st	-X, r30
    2604:	58 97       	sbiw	r26, 0x18	; 24
    2606:	30 81       	ld	r19, Z
    2608:	3f 5f       	subi	r19, 0xFF	; 255
    260a:	30 83       	st	Z, r19
    260c:	22 23       	and	r18, r18
    260e:	19 f0       	breq	.+6      	; 0x2616 <vTaskPlaceOnEventListRestricted+0x7a>
    2610:	6f ef       	ldi	r22, 0xFF	; 255
    2612:	7f ef       	ldi	r23, 0xFF	; 255
    2614:	cb 01       	movw	r24, r22
    2616:	42 2f       	mov	r20, r18
    2618:	39 db       	rcall	.-2446   	; 0x1c8c <prvAddCurrentTaskToDelayedList>
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <xTaskRemoveFromEventList>:
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	dc 01       	movw	r26, r24
    2626:	17 96       	adiw	r26, 0x07	; 7
    2628:	ed 91       	ld	r30, X+
    262a:	fc 91       	ld	r31, X
    262c:	18 97       	sbiw	r26, 0x08	; 8
    262e:	00 84       	ldd	r0, Z+8	; 0x08
    2630:	f1 85       	ldd	r31, Z+9	; 0x09
    2632:	e0 2d       	mov	r30, r0
    2634:	a0 8d       	ldd	r26, Z+24	; 0x18
    2636:	b1 8d       	ldd	r27, Z+25	; 0x19
    2638:	c2 89       	ldd	r28, Z+18	; 0x12
    263a:	d3 89       	ldd	r29, Z+19	; 0x13
    263c:	84 89       	ldd	r24, Z+20	; 0x14
    263e:	95 89       	ldd	r25, Z+21	; 0x15
    2640:	9f 83       	std	Y+7, r25	; 0x07
    2642:	8e 83       	std	Y+6, r24	; 0x06
    2644:	c4 89       	ldd	r28, Z+20	; 0x14
    2646:	d5 89       	ldd	r29, Z+21	; 0x15
    2648:	82 89       	ldd	r24, Z+18	; 0x12
    264a:	93 89       	ldd	r25, Z+19	; 0x13
    264c:	9d 83       	std	Y+5, r25	; 0x05
    264e:	8c 83       	std	Y+4, r24	; 0x04
    2650:	11 96       	adiw	r26, 0x01	; 1
    2652:	8d 91       	ld	r24, X+
    2654:	9c 91       	ld	r25, X
    2656:	12 97       	sbiw	r26, 0x02	; 2
    2658:	9f 01       	movw	r18, r30
    265a:	22 5f       	subi	r18, 0xF2	; 242
    265c:	3f 4f       	sbci	r19, 0xFF	; 255
    265e:	82 17       	cp	r24, r18
    2660:	93 07       	cpc	r25, r19
    2662:	31 f4       	brne	.+12     	; 0x2670 <xTaskRemoveFromEventList+0x50>
    2664:	84 89       	ldd	r24, Z+20	; 0x14
    2666:	95 89       	ldd	r25, Z+21	; 0x15
    2668:	12 96       	adiw	r26, 0x02	; 2
    266a:	9c 93       	st	X, r25
    266c:	8e 93       	st	-X, r24
    266e:	11 97       	sbiw	r26, 0x01	; 1
    2670:	11 8e       	std	Z+25, r1	; 0x19
    2672:	10 8e       	std	Z+24, r1	; 0x18
    2674:	8c 91       	ld	r24, X
    2676:	81 50       	subi	r24, 0x01	; 1
    2678:	8c 93       	st	X, r24
    267a:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <uxSchedulerSuspended>
    267e:	81 11       	cpse	r24, r1
    2680:	52 c0       	rjmp	.+164    	; 0x2726 <xTaskRemoveFromEventList+0x106>
    2682:	a4 85       	ldd	r26, Z+12	; 0x0c
    2684:	b5 85       	ldd	r27, Z+13	; 0x0d
    2686:	c6 81       	ldd	r28, Z+6	; 0x06
    2688:	d7 81       	ldd	r29, Z+7	; 0x07
    268a:	80 85       	ldd	r24, Z+8	; 0x08
    268c:	91 85       	ldd	r25, Z+9	; 0x09
    268e:	9f 83       	std	Y+7, r25	; 0x07
    2690:	8e 83       	std	Y+6, r24	; 0x06
    2692:	c0 85       	ldd	r28, Z+8	; 0x08
    2694:	d1 85       	ldd	r29, Z+9	; 0x09
    2696:	86 81       	ldd	r24, Z+6	; 0x06
    2698:	97 81       	ldd	r25, Z+7	; 0x07
    269a:	9d 83       	std	Y+5, r25	; 0x05
    269c:	8c 83       	std	Y+4, r24	; 0x04
    269e:	11 96       	adiw	r26, 0x01	; 1
    26a0:	8d 91       	ld	r24, X+
    26a2:	9c 91       	ld	r25, X
    26a4:	12 97       	sbiw	r26, 0x02	; 2
    26a6:	9f 01       	movw	r18, r30
    26a8:	2e 5f       	subi	r18, 0xFE	; 254
    26aa:	3f 4f       	sbci	r19, 0xFF	; 255
    26ac:	82 17       	cp	r24, r18
    26ae:	93 07       	cpc	r25, r19
    26b0:	31 f4       	brne	.+12     	; 0x26be <xTaskRemoveFromEventList+0x9e>
    26b2:	80 85       	ldd	r24, Z+8	; 0x08
    26b4:	91 85       	ldd	r25, Z+9	; 0x09
    26b6:	12 96       	adiw	r26, 0x02	; 2
    26b8:	9c 93       	st	X, r25
    26ba:	8e 93       	st	-X, r24
    26bc:	11 97       	sbiw	r26, 0x01	; 1
    26be:	15 86       	std	Z+13, r1	; 0x0d
    26c0:	14 86       	std	Z+12, r1	; 0x0c
    26c2:	8c 91       	ld	r24, X
    26c4:	81 50       	subi	r24, 0x01	; 1
    26c6:	8c 93       	st	X, r24
    26c8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26ca:	80 91 9f 16 	lds	r24, 0x169F	; 0x80169f <uxTopReadyPriority>
    26ce:	8a 17       	cp	r24, r26
    26d0:	10 f4       	brcc	.+4      	; 0x26d6 <xTaskRemoveFromEventList+0xb6>
    26d2:	a0 93 9f 16 	sts	0x169F, r26	; 0x80169f <uxTopReadyPriority>
    26d6:	8b e0       	ldi	r24, 0x0B	; 11
    26d8:	8a 9f       	mul	r24, r26
    26da:	d0 01       	movw	r26, r0
    26dc:	11 24       	eor	r1, r1
    26de:	af 51       	subi	r26, 0x1F	; 31
    26e0:	b9 4e       	sbci	r27, 0xE9	; 233
    26e2:	11 96       	adiw	r26, 0x01	; 1
    26e4:	0d 90       	ld	r0, X+
    26e6:	bc 91       	ld	r27, X
    26e8:	a0 2d       	mov	r26, r0
    26ea:	b7 83       	std	Z+7, r27	; 0x07
    26ec:	a6 83       	std	Z+6, r26	; 0x06
    26ee:	16 96       	adiw	r26, 0x06	; 6
    26f0:	4d 91       	ld	r20, X+
    26f2:	5c 91       	ld	r21, X
    26f4:	17 97       	sbiw	r26, 0x07	; 7
    26f6:	51 87       	std	Z+9, r21	; 0x09
    26f8:	40 87       	std	Z+8, r20	; 0x08
    26fa:	16 96       	adiw	r26, 0x06	; 6
    26fc:	cd 91       	ld	r28, X+
    26fe:	dc 91       	ld	r29, X
    2700:	17 97       	sbiw	r26, 0x07	; 7
    2702:	3d 83       	std	Y+5, r19	; 0x05
    2704:	2c 83       	std	Y+4, r18	; 0x04
    2706:	17 96       	adiw	r26, 0x07	; 7
    2708:	3c 93       	st	X, r19
    270a:	2e 93       	st	-X, r18
    270c:	16 97       	sbiw	r26, 0x06	; 6
    270e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2710:	8a 9f       	mul	r24, r26
    2712:	d0 01       	movw	r26, r0
    2714:	11 24       	eor	r1, r1
    2716:	af 51       	subi	r26, 0x1F	; 31
    2718:	b9 4e       	sbci	r27, 0xE9	; 233
    271a:	b5 87       	std	Z+13, r27	; 0x0d
    271c:	a4 87       	std	Z+12, r26	; 0x0c
    271e:	8c 91       	ld	r24, X
    2720:	8f 5f       	subi	r24, 0xFF	; 255
    2722:	8c 93       	st	X, r24
    2724:	1c c0       	rjmp	.+56     	; 0x275e <xTaskRemoveFromEventList+0x13e>
    2726:	4c eb       	ldi	r20, 0xBC	; 188
    2728:	56 e1       	ldi	r21, 0x16	; 22
    272a:	da 01       	movw	r26, r20
    272c:	11 96       	adiw	r26, 0x01	; 1
    272e:	cd 91       	ld	r28, X+
    2730:	dc 91       	ld	r29, X
    2732:	12 97       	sbiw	r26, 0x02	; 2
    2734:	d3 8b       	std	Z+19, r29	; 0x13
    2736:	c2 8b       	std	Z+18, r28	; 0x12
    2738:	8e 81       	ldd	r24, Y+6	; 0x06
    273a:	9f 81       	ldd	r25, Y+7	; 0x07
    273c:	95 8b       	std	Z+21, r25	; 0x15
    273e:	84 8b       	std	Z+20, r24	; 0x14
    2740:	8e 81       	ldd	r24, Y+6	; 0x06
    2742:	9f 81       	ldd	r25, Y+7	; 0x07
    2744:	dc 01       	movw	r26, r24
    2746:	15 96       	adiw	r26, 0x05	; 5
    2748:	3c 93       	st	X, r19
    274a:	2e 93       	st	-X, r18
    274c:	14 97       	sbiw	r26, 0x04	; 4
    274e:	3f 83       	std	Y+7, r19	; 0x07
    2750:	2e 83       	std	Y+6, r18	; 0x06
    2752:	51 8f       	std	Z+25, r21	; 0x19
    2754:	40 8f       	std	Z+24, r20	; 0x18
    2756:	da 01       	movw	r26, r20
    2758:	8c 91       	ld	r24, X
    275a:	8f 5f       	subi	r24, 0xFF	; 255
    275c:	8c 93       	st	X, r24
    275e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2760:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2764:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2768:	82 8d       	ldd	r24, Z+26	; 0x1a
    276a:	89 17       	cp	r24, r25
    276c:	20 f4       	brcc	.+8      	; 0x2776 <xTaskRemoveFromEventList+0x156>
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <xYieldPending>
    2774:	01 c0       	rjmp	.+2      	; 0x2778 <xTaskRemoveFromEventList+0x158>
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	08 95       	ret

0000277e <vTaskRemoveFromUnorderedEventList>:
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	dc 01       	movw	r26, r24
    2784:	70 68       	ori	r23, 0x80	; 128
    2786:	4d 93       	st	X+, r20
    2788:	5d 93       	st	X+, r21
    278a:	6d 93       	st	X+, r22
    278c:	7c 93       	st	X, r23
    278e:	13 97       	sbiw	r26, 0x03	; 3
    2790:	18 96       	adiw	r26, 0x08	; 8
    2792:	ed 91       	ld	r30, X+
    2794:	fc 91       	ld	r31, X
    2796:	19 97       	sbiw	r26, 0x09	; 9
    2798:	1a 96       	adiw	r26, 0x0a	; 10
    279a:	4d 91       	ld	r20, X+
    279c:	5c 91       	ld	r21, X
    279e:	1b 97       	sbiw	r26, 0x0b	; 11
    27a0:	14 96       	adiw	r26, 0x04	; 4
    27a2:	8d 91       	ld	r24, X+
    27a4:	9c 91       	ld	r25, X
    27a6:	15 97       	sbiw	r26, 0x05	; 5
    27a8:	16 96       	adiw	r26, 0x06	; 6
    27aa:	2d 91       	ld	r18, X+
    27ac:	3c 91       	ld	r19, X
    27ae:	17 97       	sbiw	r26, 0x07	; 7
    27b0:	ec 01       	movw	r28, r24
    27b2:	3f 83       	std	Y+7, r19	; 0x07
    27b4:	2e 83       	std	Y+6, r18	; 0x06
    27b6:	16 96       	adiw	r26, 0x06	; 6
    27b8:	8d 91       	ld	r24, X+
    27ba:	9c 91       	ld	r25, X
    27bc:	17 97       	sbiw	r26, 0x07	; 7
    27be:	14 96       	adiw	r26, 0x04	; 4
    27c0:	2d 91       	ld	r18, X+
    27c2:	3c 91       	ld	r19, X
    27c4:	15 97       	sbiw	r26, 0x05	; 5
    27c6:	ec 01       	movw	r28, r24
    27c8:	3d 83       	std	Y+5, r19	; 0x05
    27ca:	2c 83       	std	Y+4, r18	; 0x04
    27cc:	ea 01       	movw	r28, r20
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	9a 81       	ldd	r25, Y+2	; 0x02
    27d2:	a8 17       	cp	r26, r24
    27d4:	b9 07       	cpc	r27, r25
    27d6:	31 f4       	brne	.+12     	; 0x27e4 <vTaskRemoveFromUnorderedEventList+0x66>
    27d8:	16 96       	adiw	r26, 0x06	; 6
    27da:	8d 91       	ld	r24, X+
    27dc:	9c 91       	ld	r25, X
    27de:	17 97       	sbiw	r26, 0x07	; 7
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
    27e4:	1b 96       	adiw	r26, 0x0b	; 11
    27e6:	1c 92       	st	X, r1
    27e8:	1e 92       	st	-X, r1
    27ea:	1a 97       	sbiw	r26, 0x0a	; 10
    27ec:	da 01       	movw	r26, r20
    27ee:	8c 91       	ld	r24, X
    27f0:	81 50       	subi	r24, 0x01	; 1
    27f2:	8c 93       	st	X, r24
    27f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    27f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    27f8:	c6 81       	ldd	r28, Z+6	; 0x06
    27fa:	d7 81       	ldd	r29, Z+7	; 0x07
    27fc:	80 85       	ldd	r24, Z+8	; 0x08
    27fe:	91 85       	ldd	r25, Z+9	; 0x09
    2800:	9f 83       	std	Y+7, r25	; 0x07
    2802:	8e 83       	std	Y+6, r24	; 0x06
    2804:	c0 85       	ldd	r28, Z+8	; 0x08
    2806:	d1 85       	ldd	r29, Z+9	; 0x09
    2808:	86 81       	ldd	r24, Z+6	; 0x06
    280a:	97 81       	ldd	r25, Z+7	; 0x07
    280c:	9d 83       	std	Y+5, r25	; 0x05
    280e:	8c 83       	std	Y+4, r24	; 0x04
    2810:	11 96       	adiw	r26, 0x01	; 1
    2812:	8d 91       	ld	r24, X+
    2814:	9c 91       	ld	r25, X
    2816:	12 97       	sbiw	r26, 0x02	; 2
    2818:	9f 01       	movw	r18, r30
    281a:	2e 5f       	subi	r18, 0xFE	; 254
    281c:	3f 4f       	sbci	r19, 0xFF	; 255
    281e:	82 17       	cp	r24, r18
    2820:	93 07       	cpc	r25, r19
    2822:	31 f4       	brne	.+12     	; 0x2830 <vTaskRemoveFromUnorderedEventList+0xb2>
    2824:	80 85       	ldd	r24, Z+8	; 0x08
    2826:	91 85       	ldd	r25, Z+9	; 0x09
    2828:	12 96       	adiw	r26, 0x02	; 2
    282a:	9c 93       	st	X, r25
    282c:	8e 93       	st	-X, r24
    282e:	11 97       	sbiw	r26, 0x01	; 1
    2830:	15 86       	std	Z+13, r1	; 0x0d
    2832:	14 86       	std	Z+12, r1	; 0x0c
    2834:	8c 91       	ld	r24, X
    2836:	81 50       	subi	r24, 0x01	; 1
    2838:	8c 93       	st	X, r24
    283a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    283c:	80 91 9f 16 	lds	r24, 0x169F	; 0x80169f <uxTopReadyPriority>
    2840:	8a 17       	cp	r24, r26
    2842:	10 f4       	brcc	.+4      	; 0x2848 <vTaskRemoveFromUnorderedEventList+0xca>
    2844:	a0 93 9f 16 	sts	0x169F, r26	; 0x80169f <uxTopReadyPriority>
    2848:	8b e0       	ldi	r24, 0x0B	; 11
    284a:	8a 9f       	mul	r24, r26
    284c:	d0 01       	movw	r26, r0
    284e:	11 24       	eor	r1, r1
    2850:	af 51       	subi	r26, 0x1F	; 31
    2852:	b9 4e       	sbci	r27, 0xE9	; 233
    2854:	11 96       	adiw	r26, 0x01	; 1
    2856:	0d 90       	ld	r0, X+
    2858:	bc 91       	ld	r27, X
    285a:	a0 2d       	mov	r26, r0
    285c:	b7 83       	std	Z+7, r27	; 0x07
    285e:	a6 83       	std	Z+6, r26	; 0x06
    2860:	16 96       	adiw	r26, 0x06	; 6
    2862:	4d 91       	ld	r20, X+
    2864:	5c 91       	ld	r21, X
    2866:	17 97       	sbiw	r26, 0x07	; 7
    2868:	51 87       	std	Z+9, r21	; 0x09
    286a:	40 87       	std	Z+8, r20	; 0x08
    286c:	16 96       	adiw	r26, 0x06	; 6
    286e:	cd 91       	ld	r28, X+
    2870:	dc 91       	ld	r29, X
    2872:	17 97       	sbiw	r26, 0x07	; 7
    2874:	3d 83       	std	Y+5, r19	; 0x05
    2876:	2c 83       	std	Y+4, r18	; 0x04
    2878:	17 96       	adiw	r26, 0x07	; 7
    287a:	3c 93       	st	X, r19
    287c:	2e 93       	st	-X, r18
    287e:	16 97       	sbiw	r26, 0x06	; 6
    2880:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2882:	8a 9f       	mul	r24, r26
    2884:	d0 01       	movw	r26, r0
    2886:	11 24       	eor	r1, r1
    2888:	af 51       	subi	r26, 0x1F	; 31
    288a:	b9 4e       	sbci	r27, 0xE9	; 233
    288c:	b5 87       	std	Z+13, r27	; 0x0d
    288e:	a4 87       	std	Z+12, r26	; 0x0c
    2890:	8c 91       	ld	r24, X
    2892:	8f 5f       	subi	r24, 0xFF	; 255
    2894:	8c 93       	st	X, r24
    2896:	92 8d       	ldd	r25, Z+26	; 0x1a
    2898:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    289c:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    28a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    28a2:	89 17       	cp	r24, r25
    28a4:	18 f4       	brcc	.+6      	; 0x28ac <vTaskRemoveFromUnorderedEventList+0x12e>
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <xYieldPending>
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <vTaskSetTimeOutState>:
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	0f 92       	push	r0
    28b8:	20 91 98 16 	lds	r18, 0x1698	; 0x801698 <xNumOfOverflows>
    28bc:	fc 01       	movw	r30, r24
    28be:	20 83       	st	Z, r18
    28c0:	40 91 a0 16 	lds	r20, 0x16A0	; 0x8016a0 <xTickCount>
    28c4:	50 91 a1 16 	lds	r21, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    28c8:	60 91 a2 16 	lds	r22, 0x16A2	; 0x8016a2 <xTickCount+0x2>
    28cc:	70 91 a3 16 	lds	r23, 0x16A3	; 0x8016a3 <xTickCount+0x3>
    28d0:	41 83       	std	Z+1, r20	; 0x01
    28d2:	52 83       	std	Z+2, r21	; 0x02
    28d4:	63 83       	std	Z+3, r22	; 0x03
    28d6:	74 83       	std	Z+4, r23	; 0x04
    28d8:	0f 90       	pop	r0
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	08 95       	ret

000028de <vTaskInternalSetTimeOutState>:
    28de:	20 91 98 16 	lds	r18, 0x1698	; 0x801698 <xNumOfOverflows>
    28e2:	fc 01       	movw	r30, r24
    28e4:	20 83       	st	Z, r18
    28e6:	40 91 a0 16 	lds	r20, 0x16A0	; 0x8016a0 <xTickCount>
    28ea:	50 91 a1 16 	lds	r21, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    28ee:	60 91 a2 16 	lds	r22, 0x16A2	; 0x8016a2 <xTickCount+0x2>
    28f2:	70 91 a3 16 	lds	r23, 0x16A3	; 0x8016a3 <xTickCount+0x3>
    28f6:	41 83       	std	Z+1, r20	; 0x01
    28f8:	52 83       	std	Z+2, r21	; 0x02
    28fa:	63 83       	std	Z+3, r22	; 0x03
    28fc:	74 83       	std	Z+4, r23	; 0x04
    28fe:	08 95       	ret

00002900 <xTaskCheckForTimeOut>:
    2900:	8f 92       	push	r8
    2902:	9f 92       	push	r9
    2904:	af 92       	push	r10
    2906:	bf 92       	push	r11
    2908:	cf 92       	push	r12
    290a:	df 92       	push	r13
    290c:	ef 92       	push	r14
    290e:	ff 92       	push	r15
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	fb 01       	movw	r30, r22
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	0f 92       	push	r0
    2920:	c0 90 a0 16 	lds	r12, 0x16A0	; 0x8016a0 <xTickCount>
    2924:	d0 90 a1 16 	lds	r13, 0x16A1	; 0x8016a1 <xTickCount+0x1>
    2928:	e0 90 a2 16 	lds	r14, 0x16A2	; 0x8016a2 <xTickCount+0x2>
    292c:	f0 90 a3 16 	lds	r15, 0x16A3	; 0x8016a3 <xTickCount+0x3>
    2930:	dc 01       	movw	r26, r24
    2932:	11 96       	adiw	r26, 0x01	; 1
    2934:	0d 91       	ld	r16, X+
    2936:	1d 91       	ld	r17, X+
    2938:	2d 91       	ld	r18, X+
    293a:	3c 91       	ld	r19, X
    293c:	14 97       	sbiw	r26, 0x04	; 4
    293e:	46 01       	movw	r8, r12
    2940:	57 01       	movw	r10, r14
    2942:	80 1a       	sub	r8, r16
    2944:	91 0a       	sbc	r9, r17
    2946:	a2 0a       	sbc	r10, r18
    2948:	b3 0a       	sbc	r11, r19
    294a:	40 81       	ld	r20, Z
    294c:	51 81       	ldd	r21, Z+1	; 0x01
    294e:	62 81       	ldd	r22, Z+2	; 0x02
    2950:	73 81       	ldd	r23, Z+3	; 0x03
    2952:	4f 3f       	cpi	r20, 0xFF	; 255
    2954:	bf ef       	ldi	r27, 0xFF	; 255
    2956:	5b 07       	cpc	r21, r27
    2958:	6b 07       	cpc	r22, r27
    295a:	7b 07       	cpc	r23, r27
    295c:	39 f1       	breq	.+78     	; 0x29ac <xTaskCheckForTimeOut+0xac>
    295e:	ec 01       	movw	r28, r24
    2960:	b8 81       	ld	r27, Y
    2962:	a0 91 98 16 	lds	r26, 0x1698	; 0x801698 <xNumOfOverflows>
    2966:	ba 17       	cp	r27, r26
    2968:	59 f0       	breq	.+22     	; 0x2980 <xTaskCheckForTimeOut+0x80>
    296a:	c0 16       	cp	r12, r16
    296c:	d1 06       	cpc	r13, r17
    296e:	e2 06       	cpc	r14, r18
    2970:	f3 06       	cpc	r15, r19
    2972:	30 f0       	brcs	.+12     	; 0x2980 <xTaskCheckForTimeOut+0x80>
    2974:	10 82       	st	Z, r1
    2976:	11 82       	std	Z+1, r1	; 0x01
    2978:	12 82       	std	Z+2, r1	; 0x02
    297a:	13 82       	std	Z+3, r1	; 0x03
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	17 c0       	rjmp	.+46     	; 0x29ae <xTaskCheckForTimeOut+0xae>
    2980:	84 16       	cp	r8, r20
    2982:	95 06       	cpc	r9, r21
    2984:	a6 06       	cpc	r10, r22
    2986:	b7 06       	cpc	r11, r23
    2988:	58 f4       	brcc	.+22     	; 0x29a0 <xTaskCheckForTimeOut+0xa0>
    298a:	48 19       	sub	r20, r8
    298c:	59 09       	sbc	r21, r9
    298e:	6a 09       	sbc	r22, r10
    2990:	7b 09       	sbc	r23, r11
    2992:	40 83       	st	Z, r20
    2994:	51 83       	std	Z+1, r21	; 0x01
    2996:	62 83       	std	Z+2, r22	; 0x02
    2998:	73 83       	std	Z+3, r23	; 0x03
    299a:	a1 df       	rcall	.-190    	; 0x28de <vTaskInternalSetTimeOutState>
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	07 c0       	rjmp	.+14     	; 0x29ae <xTaskCheckForTimeOut+0xae>
    29a0:	10 82       	st	Z, r1
    29a2:	11 82       	std	Z+1, r1	; 0x01
    29a4:	12 82       	std	Z+2, r1	; 0x02
    29a6:	13 82       	std	Z+3, r1	; 0x03
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	01 c0       	rjmp	.+2      	; 0x29ae <xTaskCheckForTimeOut+0xae>
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	0f 90       	pop	r0
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	ff 90       	pop	r15
    29bc:	ef 90       	pop	r14
    29be:	df 90       	pop	r13
    29c0:	cf 90       	pop	r12
    29c2:	bf 90       	pop	r11
    29c4:	af 90       	pop	r10
    29c6:	9f 90       	pop	r9
    29c8:	8f 90       	pop	r8
    29ca:	08 95       	ret

000029cc <vTaskMissedYield>:
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <xYieldPending>
    29d2:	08 95       	ret

000029d4 <xTaskGetCurrentTaskHandle>:
    29d4:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxCurrentTCB>
    29d8:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    29dc:	08 95       	ret

000029de <xTaskGetSchedulerState>:
    29de:	80 91 9e 16 	lds	r24, 0x169E	; 0x80169e <xSchedulerRunning>
    29e2:	88 23       	and	r24, r24
    29e4:	31 f0       	breq	.+12     	; 0x29f2 <xTaskGetSchedulerState+0x14>
    29e6:	80 91 90 16 	lds	r24, 0x1690	; 0x801690 <uxSchedulerSuspended>
    29ea:	81 11       	cpse	r24, r1
    29ec:	04 c0       	rjmp	.+8      	; 0x29f6 <xTaskGetSchedulerState+0x18>
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	08 95       	ret
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	08 95       	ret
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	08 95       	ret

000029fa <xTaskPriorityDisinherit>:
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	fc 01       	movw	r30, r24
    2a04:	89 2b       	or	r24, r25
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <xTaskPriorityDisinherit+0x10>
    2a08:	49 c0       	rjmp	.+146    	; 0x2a9c <xTaskPriorityDisinherit+0xa2>
    2a0a:	86 a5       	ldd	r24, Z+46	; 0x2e
    2a0c:	81 50       	subi	r24, 0x01	; 1
    2a0e:	86 a7       	std	Z+46, r24	; 0x2e
    2a10:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a12:	95 a5       	ldd	r25, Z+45	; 0x2d
    2a14:	29 17       	cp	r18, r25
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <xTaskPriorityDisinherit+0x20>
    2a18:	43 c0       	rjmp	.+134    	; 0x2aa0 <xTaskPriorityDisinherit+0xa6>
    2a1a:	81 11       	cpse	r24, r1
    2a1c:	43 c0       	rjmp	.+134    	; 0x2aa4 <xTaskPriorityDisinherit+0xaa>
    2a1e:	ef 01       	movw	r28, r30
    2a20:	8f 01       	movw	r16, r30
    2a22:	0e 5f       	subi	r16, 0xFE	; 254
    2a24:	1f 4f       	sbci	r17, 0xFF	; 255
    2a26:	c8 01       	movw	r24, r16
    2a28:	0e 94 aa 05 	call	0xb54	; 0xb54 <uxListRemove>
    2a2c:	ed a5       	ldd	r30, Y+45	; 0x2d
    2a2e:	ea 8f       	std	Y+26, r30	; 0x1a
    2a30:	8a e0       	ldi	r24, 0x0A	; 10
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 e0       	ldi	r26, 0x00	; 0
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	8e 1b       	sub	r24, r30
    2a3a:	91 09       	sbc	r25, r1
    2a3c:	a1 09       	sbc	r26, r1
    2a3e:	b1 09       	sbc	r27, r1
    2a40:	8e 87       	std	Y+14, r24	; 0x0e
    2a42:	9f 87       	std	Y+15, r25	; 0x0f
    2a44:	a8 8b       	std	Y+16, r26	; 0x10
    2a46:	b9 8b       	std	Y+17, r27	; 0x11
    2a48:	80 91 9f 16 	lds	r24, 0x169F	; 0x80169f <uxTopReadyPriority>
    2a4c:	8e 17       	cp	r24, r30
    2a4e:	10 f4       	brcc	.+4      	; 0x2a54 <xTaskPriorityDisinherit+0x5a>
    2a50:	e0 93 9f 16 	sts	0x169F, r30	; 0x80169f <uxTopReadyPriority>
    2a54:	8b e0       	ldi	r24, 0x0B	; 11
    2a56:	8e 9f       	mul	r24, r30
    2a58:	f0 01       	movw	r30, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	ef 51       	subi	r30, 0x1F	; 31
    2a5e:	f9 4e       	sbci	r31, 0xE9	; 233
    2a60:	01 80       	ldd	r0, Z+1	; 0x01
    2a62:	f2 81       	ldd	r31, Z+2	; 0x02
    2a64:	e0 2d       	mov	r30, r0
    2a66:	ff 83       	std	Y+7, r31	; 0x07
    2a68:	ee 83       	std	Y+6, r30	; 0x06
    2a6a:	26 81       	ldd	r18, Z+6	; 0x06
    2a6c:	37 81       	ldd	r19, Z+7	; 0x07
    2a6e:	39 87       	std	Y+9, r19	; 0x09
    2a70:	28 87       	std	Y+8, r18	; 0x08
    2a72:	a6 81       	ldd	r26, Z+6	; 0x06
    2a74:	b7 81       	ldd	r27, Z+7	; 0x07
    2a76:	15 96       	adiw	r26, 0x05	; 5
    2a78:	1c 93       	st	X, r17
    2a7a:	0e 93       	st	-X, r16
    2a7c:	14 97       	sbiw	r26, 0x04	; 4
    2a7e:	17 83       	std	Z+7, r17	; 0x07
    2a80:	06 83       	std	Z+6, r16	; 0x06
    2a82:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a84:	8e 9f       	mul	r24, r30
    2a86:	f0 01       	movw	r30, r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	ef 51       	subi	r30, 0x1F	; 31
    2a8c:	f9 4e       	sbci	r31, 0xE9	; 233
    2a8e:	fd 87       	std	Y+13, r31	; 0x0d
    2a90:	ec 87       	std	Y+12, r30	; 0x0c
    2a92:	80 81       	ld	r24, Z
    2a94:	8f 5f       	subi	r24, 0xFF	; 255
    2a96:	80 83       	st	Z, r24
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	05 c0       	rjmp	.+10     	; 0x2aa6 <xTaskPriorityDisinherit+0xac>
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	03 c0       	rjmp	.+6      	; 0x2aa6 <xTaskPriorityDisinherit+0xac>
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	01 c0       	rjmp	.+2      	; 0x2aa6 <xTaskPriorityDisinherit+0xac>
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	1f 91       	pop	r17
    2aac:	0f 91       	pop	r16
    2aae:	08 95       	ret

00002ab0 <uxTaskResetEventItemValue>:
    2ab0:	cf 92       	push	r12
    2ab2:	df 92       	push	r13
    2ab4:	ef 92       	push	r14
    2ab6:	ff 92       	push	r15
    2ab8:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2abc:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2ac0:	66 85       	ldd	r22, Z+14	; 0x0e
    2ac2:	77 85       	ldd	r23, Z+15	; 0x0f
    2ac4:	80 89       	ldd	r24, Z+16	; 0x10
    2ac6:	91 89       	ldd	r25, Z+17	; 0x11
    2ac8:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2acc:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2ad0:	a0 91 4f 17 	lds	r26, 0x174F	; 0x80174f <pxCurrentTCB>
    2ad4:	b0 91 50 17 	lds	r27, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2ad8:	5a 96       	adiw	r26, 0x1a	; 26
    2ada:	2c 91       	ld	r18, X
    2adc:	0f 2e       	mov	r0, r31
    2ade:	fa e0       	ldi	r31, 0x0A	; 10
    2ae0:	cf 2e       	mov	r12, r31
    2ae2:	d1 2c       	mov	r13, r1
    2ae4:	e1 2c       	mov	r14, r1
    2ae6:	f1 2c       	mov	r15, r1
    2ae8:	f0 2d       	mov	r31, r0
    2aea:	c2 1a       	sub	r12, r18
    2aec:	d1 08       	sbc	r13, r1
    2aee:	e1 08       	sbc	r14, r1
    2af0:	f1 08       	sbc	r15, r1
    2af2:	c6 86       	std	Z+14, r12	; 0x0e
    2af4:	d7 86       	std	Z+15, r13	; 0x0f
    2af6:	e0 8a       	std	Z+16, r14	; 0x10
    2af8:	f1 8a       	std	Z+17, r15	; 0x11
    2afa:	ff 90       	pop	r15
    2afc:	ef 90       	pop	r14
    2afe:	df 90       	pop	r13
    2b00:	cf 90       	pop	r12
    2b02:	08 95       	ret

00002b04 <xTaskGenericNotifyWait>:
    2b04:	4f 92       	push	r4
    2b06:	5f 92       	push	r5
    2b08:	6f 92       	push	r6
    2b0a:	7f 92       	push	r7
    2b0c:	af 92       	push	r10
    2b0e:	bf 92       	push	r11
    2b10:	cf 92       	push	r12
    2b12:	df 92       	push	r13
    2b14:	ef 92       	push	r14
    2b16:	ff 92       	push	r15
    2b18:	0f 93       	push	r16
    2b1a:	1f 93       	push	r17
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	28 01       	movw	r4, r16
    2b22:	39 01       	movw	r6, r18
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	0f 92       	push	r0
    2b2a:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2b2e:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2b32:	c8 2f       	mov	r28, r24
    2b34:	d0 e0       	ldi	r29, 0x00	; 0
    2b36:	ec 0f       	add	r30, r28
    2b38:	fd 1f       	adc	r31, r29
    2b3a:	83 a9       	ldd	r24, Z+51	; 0x33
    2b3c:	82 30       	cpi	r24, 0x02	; 2
    2b3e:	71 f1       	breq	.+92     	; 0x2b9c <xTaskGenericNotifyWait+0x98>
    2b40:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2b44:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2b48:	ce 01       	movw	r24, r28
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	e8 0f       	add	r30, r24
    2b54:	f9 1f       	adc	r31, r25
    2b56:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b58:	90 a9       	ldd	r25, Z+48	; 0x30
    2b5a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b5c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b5e:	40 95       	com	r20
    2b60:	50 95       	com	r21
    2b62:	60 95       	com	r22
    2b64:	70 95       	com	r23
    2b66:	48 23       	and	r20, r24
    2b68:	59 23       	and	r21, r25
    2b6a:	6a 23       	and	r22, r26
    2b6c:	7b 23       	and	r23, r27
    2b6e:	47 a7       	std	Z+47, r20	; 0x2f
    2b70:	50 ab       	std	Z+48, r21	; 0x30
    2b72:	61 ab       	std	Z+49, r22	; 0x31
    2b74:	72 ab       	std	Z+50, r23	; 0x32
    2b76:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2b7a:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2b7e:	ec 0f       	add	r30, r28
    2b80:	fd 1f       	adc	r31, r29
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	83 ab       	std	Z+51, r24	; 0x33
    2b86:	a1 14       	cp	r10, r1
    2b88:	b1 04       	cpc	r11, r1
    2b8a:	c1 04       	cpc	r12, r1
    2b8c:	d1 04       	cpc	r13, r1
    2b8e:	31 f0       	breq	.+12     	; 0x2b9c <xTaskGenericNotifyWait+0x98>
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	c6 01       	movw	r24, r12
    2b94:	b5 01       	movw	r22, r10
    2b96:	7a d8       	rcall	.-3852   	; 0x1c8c <prvAddCurrentTaskToDelayedList>
    2b98:	0e 94 26 06 	call	0xc4c	; 0xc4c <vPortYield>
    2b9c:	0f 90       	pop	r0
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	0f 92       	push	r0
    2ba6:	e1 14       	cp	r14, r1
    2ba8:	f1 04       	cpc	r15, r1
    2baa:	a1 f0       	breq	.+40     	; 0x2bd4 <xTaskGenericNotifyWait+0xd0>
    2bac:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2bb0:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	88 0f       	add	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	e8 0f       	add	r30, r24
    2bc0:	f9 1f       	adc	r31, r25
    2bc2:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bc4:	90 a9       	ldd	r25, Z+48	; 0x30
    2bc6:	a1 a9       	ldd	r26, Z+49	; 0x31
    2bc8:	b2 a9       	ldd	r27, Z+50	; 0x32
    2bca:	f7 01       	movw	r30, r14
    2bcc:	80 83       	st	Z, r24
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	a2 83       	std	Z+2, r26	; 0x02
    2bd2:	b3 83       	std	Z+3, r27	; 0x03
    2bd4:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2bd8:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2bdc:	ec 0f       	add	r30, r28
    2bde:	fd 1f       	adc	r31, r29
    2be0:	83 a9       	ldd	r24, Z+51	; 0x33
    2be2:	82 30       	cpi	r24, 0x02	; 2
    2be4:	e9 f4       	brne	.+58     	; 0x2c20 <xTaskGenericNotifyWait+0x11c>
    2be6:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2bea:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2bee:	ce 01       	movw	r24, r28
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	e8 0f       	add	r30, r24
    2bfa:	f9 1f       	adc	r31, r25
    2bfc:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bfe:	90 a9       	ldd	r25, Z+48	; 0x30
    2c00:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c02:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c04:	40 94       	com	r4
    2c06:	50 94       	com	r5
    2c08:	60 94       	com	r6
    2c0a:	70 94       	com	r7
    2c0c:	48 22       	and	r4, r24
    2c0e:	59 22       	and	r5, r25
    2c10:	6a 22       	and	r6, r26
    2c12:	7b 22       	and	r7, r27
    2c14:	47 a6       	std	Z+47, r4	; 0x2f
    2c16:	50 aa       	std	Z+48, r5	; 0x30
    2c18:	61 aa       	std	Z+49, r6	; 0x31
    2c1a:	72 aa       	std	Z+50, r7	; 0x32
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	01 c0       	rjmp	.+2      	; 0x2c22 <xTaskGenericNotifyWait+0x11e>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	20 91 4f 17 	lds	r18, 0x174F	; 0x80174f <pxCurrentTCB>
    2c26:	30 91 50 17 	lds	r19, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2c2a:	c2 0f       	add	r28, r18
    2c2c:	d3 1f       	adc	r29, r19
    2c2e:	1b aa       	std	Y+51, r1	; 0x33
    2c30:	0f 90       	pop	r0
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	ff 90       	pop	r15
    2c3e:	ef 90       	pop	r14
    2c40:	df 90       	pop	r13
    2c42:	cf 90       	pop	r12
    2c44:	bf 90       	pop	r11
    2c46:	af 90       	pop	r10
    2c48:	7f 90       	pop	r7
    2c4a:	6f 90       	pop	r6
    2c4c:	5f 90       	pop	r5
    2c4e:	4f 90       	pop	r4
    2c50:	08 95       	ret

00002c52 <xTaskGenericNotify>:
    2c52:	8f 92       	push	r8
    2c54:	9f 92       	push	r9
    2c56:	af 92       	push	r10
    2c58:	bf 92       	push	r11
    2c5a:	ef 92       	push	r14
    2c5c:	ff 92       	push	r15
    2c5e:	0f 93       	push	r16
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	dc 01       	movw	r26, r24
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	0f 92       	push	r0
    2c6c:	e1 14       	cp	r14, r1
    2c6e:	f1 04       	cpc	r15, r1
    2c70:	89 f0       	breq	.+34     	; 0x2c94 <xTaskGenericNotify+0x42>
    2c72:	e6 2f       	mov	r30, r22
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	ee 0f       	add	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	ee 0f       	add	r30, r30
    2c7c:	ff 1f       	adc	r31, r31
    2c7e:	e8 0f       	add	r30, r24
    2c80:	f9 1f       	adc	r31, r25
    2c82:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c84:	90 a8       	ldd	r9, Z+48	; 0x30
    2c86:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c88:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c8a:	f7 01       	movw	r30, r14
    2c8c:	80 82       	st	Z, r8
    2c8e:	91 82       	std	Z+1, r9	; 0x01
    2c90:	a2 82       	std	Z+2, r10	; 0x02
    2c92:	b3 82       	std	Z+3, r11	; 0x03
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	fd 01       	movw	r30, r26
    2c98:	e6 0f       	add	r30, r22
    2c9a:	f7 1f       	adc	r31, r23
    2c9c:	83 a9       	ldd	r24, Z+51	; 0x33
    2c9e:	92 e0       	ldi	r25, 0x02	; 2
    2ca0:	93 ab       	std	Z+51, r25	; 0x33
    2ca2:	02 30       	cpi	r16, 0x02	; 2
    2ca4:	01 f1       	breq	.+64     	; 0x2ce6 <xTaskGenericNotify+0x94>
    2ca6:	18 f4       	brcc	.+6      	; 0x2cae <xTaskGenericNotify+0x5c>
    2ca8:	01 30       	cpi	r16, 0x01	; 1
    2caa:	31 f0       	breq	.+12     	; 0x2cb8 <xTaskGenericNotify+0x66>
    2cac:	4d c0       	rjmp	.+154    	; 0x2d48 <xTaskGenericNotify+0xf6>
    2cae:	03 30       	cpi	r16, 0x03	; 3
    2cb0:	79 f1       	breq	.+94     	; 0x2d10 <xTaskGenericNotify+0xbe>
    2cb2:	04 30       	cpi	r16, 0x04	; 4
    2cb4:	d1 f1       	breq	.+116    	; 0x2d2a <xTaskGenericNotify+0xd8>
    2cb6:	48 c0       	rjmp	.+144    	; 0x2d48 <xTaskGenericNotify+0xf6>
    2cb8:	66 0f       	add	r22, r22
    2cba:	77 1f       	adc	r23, r23
    2cbc:	66 0f       	add	r22, r22
    2cbe:	77 1f       	adc	r23, r23
    2cc0:	fd 01       	movw	r30, r26
    2cc2:	e6 0f       	add	r30, r22
    2cc4:	f7 1f       	adc	r31, r23
    2cc6:	87 a4       	ldd	r8, Z+47	; 0x2f
    2cc8:	90 a8       	ldd	r9, Z+48	; 0x30
    2cca:	a1 a8       	ldd	r10, Z+49	; 0x31
    2ccc:	b2 a8       	ldd	r11, Z+50	; 0x32
    2cce:	ba 01       	movw	r22, r20
    2cd0:	a9 01       	movw	r20, r18
    2cd2:	48 29       	or	r20, r8
    2cd4:	59 29       	or	r21, r9
    2cd6:	6a 29       	or	r22, r10
    2cd8:	7b 29       	or	r23, r11
    2cda:	47 a7       	std	Z+47, r20	; 0x2f
    2cdc:	50 ab       	std	Z+48, r21	; 0x30
    2cde:	61 ab       	std	Z+49, r22	; 0x31
    2ce0:	72 ab       	std	Z+50, r23	; 0x32
    2ce2:	01 e0       	ldi	r16, 0x01	; 1
    2ce4:	34 c0       	rjmp	.+104    	; 0x2d4e <xTaskGenericNotify+0xfc>
    2ce6:	66 0f       	add	r22, r22
    2ce8:	77 1f       	adc	r23, r23
    2cea:	66 0f       	add	r22, r22
    2cec:	77 1f       	adc	r23, r23
    2cee:	fd 01       	movw	r30, r26
    2cf0:	e6 0f       	add	r30, r22
    2cf2:	f7 1f       	adc	r31, r23
    2cf4:	47 a5       	ldd	r20, Z+47	; 0x2f
    2cf6:	50 a9       	ldd	r21, Z+48	; 0x30
    2cf8:	61 a9       	ldd	r22, Z+49	; 0x31
    2cfa:	72 a9       	ldd	r23, Z+50	; 0x32
    2cfc:	4f 5f       	subi	r20, 0xFF	; 255
    2cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    2d00:	6f 4f       	sbci	r22, 0xFF	; 255
    2d02:	7f 4f       	sbci	r23, 0xFF	; 255
    2d04:	47 a7       	std	Z+47, r20	; 0x2f
    2d06:	50 ab       	std	Z+48, r21	; 0x30
    2d08:	61 ab       	std	Z+49, r22	; 0x31
    2d0a:	72 ab       	std	Z+50, r23	; 0x32
    2d0c:	01 e0       	ldi	r16, 0x01	; 1
    2d0e:	1f c0       	rjmp	.+62     	; 0x2d4e <xTaskGenericNotify+0xfc>
    2d10:	66 0f       	add	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	66 0f       	add	r22, r22
    2d16:	77 1f       	adc	r23, r23
    2d18:	fd 01       	movw	r30, r26
    2d1a:	e6 0f       	add	r30, r22
    2d1c:	f7 1f       	adc	r31, r23
    2d1e:	27 a7       	std	Z+47, r18	; 0x2f
    2d20:	30 ab       	std	Z+48, r19	; 0x30
    2d22:	41 ab       	std	Z+49, r20	; 0x31
    2d24:	52 ab       	std	Z+50, r21	; 0x32
    2d26:	01 e0       	ldi	r16, 0x01	; 1
    2d28:	12 c0       	rjmp	.+36     	; 0x2d4e <xTaskGenericNotify+0xfc>
    2d2a:	82 30       	cpi	r24, 0x02	; 2
    2d2c:	79 f0       	breq	.+30     	; 0x2d4c <xTaskGenericNotify+0xfa>
    2d2e:	66 0f       	add	r22, r22
    2d30:	77 1f       	adc	r23, r23
    2d32:	66 0f       	add	r22, r22
    2d34:	77 1f       	adc	r23, r23
    2d36:	fd 01       	movw	r30, r26
    2d38:	e6 0f       	add	r30, r22
    2d3a:	f7 1f       	adc	r31, r23
    2d3c:	27 a7       	std	Z+47, r18	; 0x2f
    2d3e:	30 ab       	std	Z+48, r19	; 0x30
    2d40:	41 ab       	std	Z+49, r20	; 0x31
    2d42:	52 ab       	std	Z+50, r21	; 0x32
    2d44:	01 e0       	ldi	r16, 0x01	; 1
    2d46:	03 c0       	rjmp	.+6      	; 0x2d4e <xTaskGenericNotify+0xfc>
    2d48:	01 e0       	ldi	r16, 0x01	; 1
    2d4a:	01 c0       	rjmp	.+2      	; 0x2d4e <xTaskGenericNotify+0xfc>
    2d4c:	00 e0       	ldi	r16, 0x00	; 0
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	09 f0       	breq	.+2      	; 0x2d54 <xTaskGenericNotify+0x102>
    2d52:	69 c0       	rjmp	.+210    	; 0x2e26 <xTaskGenericNotify+0x1d4>
    2d54:	1c 96       	adiw	r26, 0x0c	; 12
    2d56:	ed 91       	ld	r30, X+
    2d58:	fc 91       	ld	r31, X
    2d5a:	1d 97       	sbiw	r26, 0x0d	; 13
    2d5c:	16 96       	adiw	r26, 0x06	; 6
    2d5e:	cd 91       	ld	r28, X+
    2d60:	dc 91       	ld	r29, X
    2d62:	17 97       	sbiw	r26, 0x07	; 7
    2d64:	18 96       	adiw	r26, 0x08	; 8
    2d66:	8d 91       	ld	r24, X+
    2d68:	9c 91       	ld	r25, X
    2d6a:	19 97       	sbiw	r26, 0x09	; 9
    2d6c:	9f 83       	std	Y+7, r25	; 0x07
    2d6e:	8e 83       	std	Y+6, r24	; 0x06
    2d70:	18 96       	adiw	r26, 0x08	; 8
    2d72:	cd 91       	ld	r28, X+
    2d74:	dc 91       	ld	r29, X
    2d76:	19 97       	sbiw	r26, 0x09	; 9
    2d78:	16 96       	adiw	r26, 0x06	; 6
    2d7a:	8d 91       	ld	r24, X+
    2d7c:	9c 91       	ld	r25, X
    2d7e:	17 97       	sbiw	r26, 0x07	; 7
    2d80:	9d 83       	std	Y+5, r25	; 0x05
    2d82:	8c 83       	std	Y+4, r24	; 0x04
    2d84:	81 81       	ldd	r24, Z+1	; 0x01
    2d86:	92 81       	ldd	r25, Z+2	; 0x02
    2d88:	9d 01       	movw	r18, r26
    2d8a:	2e 5f       	subi	r18, 0xFE	; 254
    2d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8e:	82 17       	cp	r24, r18
    2d90:	93 07       	cpc	r25, r19
    2d92:	31 f4       	brne	.+12     	; 0x2da0 <xTaskGenericNotify+0x14e>
    2d94:	18 96       	adiw	r26, 0x08	; 8
    2d96:	8d 91       	ld	r24, X+
    2d98:	9c 91       	ld	r25, X
    2d9a:	19 97       	sbiw	r26, 0x09	; 9
    2d9c:	92 83       	std	Z+2, r25	; 0x02
    2d9e:	81 83       	std	Z+1, r24	; 0x01
    2da0:	1d 96       	adiw	r26, 0x0d	; 13
    2da2:	1c 92       	st	X, r1
    2da4:	1e 92       	st	-X, r1
    2da6:	1c 97       	sbiw	r26, 0x0c	; 12
    2da8:	80 81       	ld	r24, Z
    2daa:	81 50       	subi	r24, 0x01	; 1
    2dac:	80 83       	st	Z, r24
    2dae:	5a 96       	adiw	r26, 0x1a	; 26
    2db0:	ec 91       	ld	r30, X
    2db2:	5a 97       	sbiw	r26, 0x1a	; 26
    2db4:	80 91 9f 16 	lds	r24, 0x169F	; 0x80169f <uxTopReadyPriority>
    2db8:	8e 17       	cp	r24, r30
    2dba:	10 f4       	brcc	.+4      	; 0x2dc0 <xTaskGenericNotify+0x16e>
    2dbc:	e0 93 9f 16 	sts	0x169F, r30	; 0x80169f <uxTopReadyPriority>
    2dc0:	8b e0       	ldi	r24, 0x0B	; 11
    2dc2:	8e 9f       	mul	r24, r30
    2dc4:	f0 01       	movw	r30, r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	ef 51       	subi	r30, 0x1F	; 31
    2dca:	f9 4e       	sbci	r31, 0xE9	; 233
    2dcc:	01 80       	ldd	r0, Z+1	; 0x01
    2dce:	f2 81       	ldd	r31, Z+2	; 0x02
    2dd0:	e0 2d       	mov	r30, r0
    2dd2:	17 96       	adiw	r26, 0x07	; 7
    2dd4:	fc 93       	st	X, r31
    2dd6:	ee 93       	st	-X, r30
    2dd8:	16 97       	sbiw	r26, 0x06	; 6
    2dda:	46 81       	ldd	r20, Z+6	; 0x06
    2ddc:	57 81       	ldd	r21, Z+7	; 0x07
    2dde:	19 96       	adiw	r26, 0x09	; 9
    2de0:	5c 93       	st	X, r21
    2de2:	4e 93       	st	-X, r20
    2de4:	18 97       	sbiw	r26, 0x08	; 8
    2de6:	c6 81       	ldd	r28, Z+6	; 0x06
    2de8:	d7 81       	ldd	r29, Z+7	; 0x07
    2dea:	3d 83       	std	Y+5, r19	; 0x05
    2dec:	2c 83       	std	Y+4, r18	; 0x04
    2dee:	37 83       	std	Z+7, r19	; 0x07
    2df0:	26 83       	std	Z+6, r18	; 0x06
    2df2:	5a 96       	adiw	r26, 0x1a	; 26
    2df4:	ec 91       	ld	r30, X
    2df6:	5a 97       	sbiw	r26, 0x1a	; 26
    2df8:	8e 9f       	mul	r24, r30
    2dfa:	f0 01       	movw	r30, r0
    2dfc:	11 24       	eor	r1, r1
    2dfe:	ef 51       	subi	r30, 0x1F	; 31
    2e00:	f9 4e       	sbci	r31, 0xE9	; 233
    2e02:	1d 96       	adiw	r26, 0x0d	; 13
    2e04:	fc 93       	st	X, r31
    2e06:	ee 93       	st	-X, r30
    2e08:	1c 97       	sbiw	r26, 0x0c	; 12
    2e0a:	80 81       	ld	r24, Z
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	80 83       	st	Z, r24
    2e10:	5a 96       	adiw	r26, 0x1a	; 26
    2e12:	9c 91       	ld	r25, X
    2e14:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    2e18:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    2e1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e1e:	89 17       	cp	r24, r25
    2e20:	10 f4       	brcc	.+4      	; 0x2e26 <xTaskGenericNotify+0x1d4>
    2e22:	0e 94 26 06 	call	0xc4c	; 0xc4c <vPortYield>
    2e26:	0f 90       	pop	r0
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	80 2f       	mov	r24, r16
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	bf 90       	pop	r11
    2e38:	af 90       	pop	r10
    2e3a:	9f 90       	pop	r9
    2e3c:	8f 90       	pop	r8
    2e3e:	08 95       	ret

00002e40 <xTaskGenericNotifyFromISR>:
    2e40:	8f 92       	push	r8
    2e42:	9f 92       	push	r9
    2e44:	af 92       	push	r10
    2e46:	bf 92       	push	r11
    2e48:	cf 92       	push	r12
    2e4a:	df 92       	push	r13
    2e4c:	ef 92       	push	r14
    2e4e:	ff 92       	push	r15
    2e50:	0f 93       	push	r16
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	dc 01       	movw	r26, r24
    2e58:	e1 14       	cp	r14, r1
    2e5a:	f1 04       	cpc	r15, r1
    2e5c:	89 f0       	breq	.+34     	; 0x2e80 <xTaskGenericNotifyFromISR+0x40>
    2e5e:	e6 2f       	mov	r30, r22
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	ee 0f       	add	r30, r30
    2e64:	ff 1f       	adc	r31, r31
    2e66:	ee 0f       	add	r30, r30
    2e68:	ff 1f       	adc	r31, r31
    2e6a:	e8 0f       	add	r30, r24
    2e6c:	f9 1f       	adc	r31, r25
    2e6e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e70:	90 a8       	ldd	r9, Z+48	; 0x30
    2e72:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e74:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e76:	f7 01       	movw	r30, r14
    2e78:	80 82       	st	Z, r8
    2e7a:	91 82       	std	Z+1, r9	; 0x01
    2e7c:	a2 82       	std	Z+2, r10	; 0x02
    2e7e:	b3 82       	std	Z+3, r11	; 0x03
    2e80:	70 e0       	ldi	r23, 0x00	; 0
    2e82:	fd 01       	movw	r30, r26
    2e84:	e6 0f       	add	r30, r22
    2e86:	f7 1f       	adc	r31, r23
    2e88:	93 a9       	ldd	r25, Z+51	; 0x33
    2e8a:	82 e0       	ldi	r24, 0x02	; 2
    2e8c:	83 ab       	std	Z+51, r24	; 0x33
    2e8e:	02 30       	cpi	r16, 0x02	; 2
    2e90:	01 f1       	breq	.+64     	; 0x2ed2 <xTaskGenericNotifyFromISR+0x92>
    2e92:	18 f4       	brcc	.+6      	; 0x2e9a <xTaskGenericNotifyFromISR+0x5a>
    2e94:	01 30       	cpi	r16, 0x01	; 1
    2e96:	31 f0       	breq	.+12     	; 0x2ea4 <xTaskGenericNotifyFromISR+0x64>
    2e98:	4d c0       	rjmp	.+154    	; 0x2f34 <xTaskGenericNotifyFromISR+0xf4>
    2e9a:	03 30       	cpi	r16, 0x03	; 3
    2e9c:	79 f1       	breq	.+94     	; 0x2efc <xTaskGenericNotifyFromISR+0xbc>
    2e9e:	04 30       	cpi	r16, 0x04	; 4
    2ea0:	d1 f1       	breq	.+116    	; 0x2f16 <xTaskGenericNotifyFromISR+0xd6>
    2ea2:	48 c0       	rjmp	.+144    	; 0x2f34 <xTaskGenericNotifyFromISR+0xf4>
    2ea4:	66 0f       	add	r22, r22
    2ea6:	77 1f       	adc	r23, r23
    2ea8:	66 0f       	add	r22, r22
    2eaa:	77 1f       	adc	r23, r23
    2eac:	fd 01       	movw	r30, r26
    2eae:	e6 0f       	add	r30, r22
    2eb0:	f7 1f       	adc	r31, r23
    2eb2:	87 a4       	ldd	r8, Z+47	; 0x2f
    2eb4:	90 a8       	ldd	r9, Z+48	; 0x30
    2eb6:	a1 a8       	ldd	r10, Z+49	; 0x31
    2eb8:	b2 a8       	ldd	r11, Z+50	; 0x32
    2eba:	ba 01       	movw	r22, r20
    2ebc:	a9 01       	movw	r20, r18
    2ebe:	48 29       	or	r20, r8
    2ec0:	59 29       	or	r21, r9
    2ec2:	6a 29       	or	r22, r10
    2ec4:	7b 29       	or	r23, r11
    2ec6:	47 a7       	std	Z+47, r20	; 0x2f
    2ec8:	50 ab       	std	Z+48, r21	; 0x30
    2eca:	61 ab       	std	Z+49, r22	; 0x31
    2ecc:	72 ab       	std	Z+50, r23	; 0x32
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	34 c0       	rjmp	.+104    	; 0x2f3a <xTaskGenericNotifyFromISR+0xfa>
    2ed2:	66 0f       	add	r22, r22
    2ed4:	77 1f       	adc	r23, r23
    2ed6:	66 0f       	add	r22, r22
    2ed8:	77 1f       	adc	r23, r23
    2eda:	fd 01       	movw	r30, r26
    2edc:	e6 0f       	add	r30, r22
    2ede:	f7 1f       	adc	r31, r23
    2ee0:	47 a5       	ldd	r20, Z+47	; 0x2f
    2ee2:	50 a9       	ldd	r21, Z+48	; 0x30
    2ee4:	61 a9       	ldd	r22, Z+49	; 0x31
    2ee6:	72 a9       	ldd	r23, Z+50	; 0x32
    2ee8:	4f 5f       	subi	r20, 0xFF	; 255
    2eea:	5f 4f       	sbci	r21, 0xFF	; 255
    2eec:	6f 4f       	sbci	r22, 0xFF	; 255
    2eee:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef0:	47 a7       	std	Z+47, r20	; 0x2f
    2ef2:	50 ab       	std	Z+48, r21	; 0x30
    2ef4:	61 ab       	std	Z+49, r22	; 0x31
    2ef6:	72 ab       	std	Z+50, r23	; 0x32
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	1f c0       	rjmp	.+62     	; 0x2f3a <xTaskGenericNotifyFromISR+0xfa>
    2efc:	66 0f       	add	r22, r22
    2efe:	77 1f       	adc	r23, r23
    2f00:	66 0f       	add	r22, r22
    2f02:	77 1f       	adc	r23, r23
    2f04:	fd 01       	movw	r30, r26
    2f06:	e6 0f       	add	r30, r22
    2f08:	f7 1f       	adc	r31, r23
    2f0a:	27 a7       	std	Z+47, r18	; 0x2f
    2f0c:	30 ab       	std	Z+48, r19	; 0x30
    2f0e:	41 ab       	std	Z+49, r20	; 0x31
    2f10:	52 ab       	std	Z+50, r21	; 0x32
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	12 c0       	rjmp	.+36     	; 0x2f3a <xTaskGenericNotifyFromISR+0xfa>
    2f16:	92 30       	cpi	r25, 0x02	; 2
    2f18:	79 f0       	breq	.+30     	; 0x2f38 <xTaskGenericNotifyFromISR+0xf8>
    2f1a:	66 0f       	add	r22, r22
    2f1c:	77 1f       	adc	r23, r23
    2f1e:	66 0f       	add	r22, r22
    2f20:	77 1f       	adc	r23, r23
    2f22:	fd 01       	movw	r30, r26
    2f24:	e6 0f       	add	r30, r22
    2f26:	f7 1f       	adc	r31, r23
    2f28:	27 a7       	std	Z+47, r18	; 0x2f
    2f2a:	30 ab       	std	Z+48, r19	; 0x30
    2f2c:	41 ab       	std	Z+49, r20	; 0x31
    2f2e:	52 ab       	std	Z+50, r21	; 0x32
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	03 c0       	rjmp	.+6      	; 0x2f3a <xTaskGenericNotifyFromISR+0xfa>
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	01 c0       	rjmp	.+2      	; 0x2f3a <xTaskGenericNotifyFromISR+0xfa>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	91 30       	cpi	r25, 0x01	; 1
    2f3c:	09 f0       	breq	.+2      	; 0x2f40 <xTaskGenericNotifyFromISR+0x100>
    2f3e:	96 c0       	rjmp	.+300    	; 0x306c <xTaskGenericNotifyFromISR+0x22c>
    2f40:	90 91 90 16 	lds	r25, 0x1690	; 0x801690 <uxSchedulerSuspended>
    2f44:	91 11       	cpse	r25, r1
    2f46:	5f c0       	rjmp	.+190    	; 0x3006 <xTaskGenericNotifyFromISR+0x1c6>
    2f48:	1c 96       	adiw	r26, 0x0c	; 12
    2f4a:	ed 91       	ld	r30, X+
    2f4c:	fc 91       	ld	r31, X
    2f4e:	1d 97       	sbiw	r26, 0x0d	; 13
    2f50:	16 96       	adiw	r26, 0x06	; 6
    2f52:	cd 91       	ld	r28, X+
    2f54:	dc 91       	ld	r29, X
    2f56:	17 97       	sbiw	r26, 0x07	; 7
    2f58:	18 96       	adiw	r26, 0x08	; 8
    2f5a:	2d 91       	ld	r18, X+
    2f5c:	3c 91       	ld	r19, X
    2f5e:	19 97       	sbiw	r26, 0x09	; 9
    2f60:	3f 83       	std	Y+7, r19	; 0x07
    2f62:	2e 83       	std	Y+6, r18	; 0x06
    2f64:	18 96       	adiw	r26, 0x08	; 8
    2f66:	cd 91       	ld	r28, X+
    2f68:	dc 91       	ld	r29, X
    2f6a:	19 97       	sbiw	r26, 0x09	; 9
    2f6c:	16 96       	adiw	r26, 0x06	; 6
    2f6e:	2d 91       	ld	r18, X+
    2f70:	3c 91       	ld	r19, X
    2f72:	17 97       	sbiw	r26, 0x07	; 7
    2f74:	3d 83       	std	Y+5, r19	; 0x05
    2f76:	2c 83       	std	Y+4, r18	; 0x04
    2f78:	41 81       	ldd	r20, Z+1	; 0x01
    2f7a:	52 81       	ldd	r21, Z+2	; 0x02
    2f7c:	9d 01       	movw	r18, r26
    2f7e:	2e 5f       	subi	r18, 0xFE	; 254
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	42 17       	cp	r20, r18
    2f84:	53 07       	cpc	r21, r19
    2f86:	31 f4       	brne	.+12     	; 0x2f94 <xTaskGenericNotifyFromISR+0x154>
    2f88:	18 96       	adiw	r26, 0x08	; 8
    2f8a:	4d 91       	ld	r20, X+
    2f8c:	5c 91       	ld	r21, X
    2f8e:	19 97       	sbiw	r26, 0x09	; 9
    2f90:	52 83       	std	Z+2, r21	; 0x02
    2f92:	41 83       	std	Z+1, r20	; 0x01
    2f94:	1d 96       	adiw	r26, 0x0d	; 13
    2f96:	1c 92       	st	X, r1
    2f98:	1e 92       	st	-X, r1
    2f9a:	1c 97       	sbiw	r26, 0x0c	; 12
    2f9c:	90 81       	ld	r25, Z
    2f9e:	91 50       	subi	r25, 0x01	; 1
    2fa0:	90 83       	st	Z, r25
    2fa2:	5a 96       	adiw	r26, 0x1a	; 26
    2fa4:	ec 91       	ld	r30, X
    2fa6:	5a 97       	sbiw	r26, 0x1a	; 26
    2fa8:	90 91 9f 16 	lds	r25, 0x169F	; 0x80169f <uxTopReadyPriority>
    2fac:	9e 17       	cp	r25, r30
    2fae:	10 f4       	brcc	.+4      	; 0x2fb4 <xTaskGenericNotifyFromISR+0x174>
    2fb0:	e0 93 9f 16 	sts	0x169F, r30	; 0x80169f <uxTopReadyPriority>
    2fb4:	9b e0       	ldi	r25, 0x0B	; 11
    2fb6:	9e 9f       	mul	r25, r30
    2fb8:	f0 01       	movw	r30, r0
    2fba:	11 24       	eor	r1, r1
    2fbc:	ef 51       	subi	r30, 0x1F	; 31
    2fbe:	f9 4e       	sbci	r31, 0xE9	; 233
    2fc0:	01 80       	ldd	r0, Z+1	; 0x01
    2fc2:	f2 81       	ldd	r31, Z+2	; 0x02
    2fc4:	e0 2d       	mov	r30, r0
    2fc6:	17 96       	adiw	r26, 0x07	; 7
    2fc8:	fc 93       	st	X, r31
    2fca:	ee 93       	st	-X, r30
    2fcc:	16 97       	sbiw	r26, 0x06	; 6
    2fce:	46 81       	ldd	r20, Z+6	; 0x06
    2fd0:	57 81       	ldd	r21, Z+7	; 0x07
    2fd2:	19 96       	adiw	r26, 0x09	; 9
    2fd4:	5c 93       	st	X, r21
    2fd6:	4e 93       	st	-X, r20
    2fd8:	18 97       	sbiw	r26, 0x08	; 8
    2fda:	c6 81       	ldd	r28, Z+6	; 0x06
    2fdc:	d7 81       	ldd	r29, Z+7	; 0x07
    2fde:	3d 83       	std	Y+5, r19	; 0x05
    2fe0:	2c 83       	std	Y+4, r18	; 0x04
    2fe2:	37 83       	std	Z+7, r19	; 0x07
    2fe4:	26 83       	std	Z+6, r18	; 0x06
    2fe6:	5a 96       	adiw	r26, 0x1a	; 26
    2fe8:	ec 91       	ld	r30, X
    2fea:	5a 97       	sbiw	r26, 0x1a	; 26
    2fec:	9e 9f       	mul	r25, r30
    2fee:	f0 01       	movw	r30, r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	ef 51       	subi	r30, 0x1F	; 31
    2ff4:	f9 4e       	sbci	r31, 0xE9	; 233
    2ff6:	1d 96       	adiw	r26, 0x0d	; 13
    2ff8:	fc 93       	st	X, r31
    2ffa:	ee 93       	st	-X, r30
    2ffc:	1c 97       	sbiw	r26, 0x0c	; 12
    2ffe:	90 81       	ld	r25, Z
    3000:	9f 5f       	subi	r25, 0xFF	; 255
    3002:	90 83       	st	Z, r25
    3004:	21 c0       	rjmp	.+66     	; 0x3048 <xTaskGenericNotifyFromISR+0x208>
    3006:	6c eb       	ldi	r22, 0xBC	; 188
    3008:	76 e1       	ldi	r23, 0x16	; 22
    300a:	fb 01       	movw	r30, r22
    300c:	c1 81       	ldd	r28, Z+1	; 0x01
    300e:	d2 81       	ldd	r29, Z+2	; 0x02
    3010:	53 96       	adiw	r26, 0x13	; 19
    3012:	dc 93       	st	X, r29
    3014:	ce 93       	st	-X, r28
    3016:	52 97       	sbiw	r26, 0x12	; 18
    3018:	2e 81       	ldd	r18, Y+6	; 0x06
    301a:	3f 81       	ldd	r19, Y+7	; 0x07
    301c:	55 96       	adiw	r26, 0x15	; 21
    301e:	3c 93       	st	X, r19
    3020:	2e 93       	st	-X, r18
    3022:	54 97       	sbiw	r26, 0x14	; 20
    3024:	4e 81       	ldd	r20, Y+6	; 0x06
    3026:	5f 81       	ldd	r21, Y+7	; 0x07
    3028:	9d 01       	movw	r18, r26
    302a:	22 5f       	subi	r18, 0xF2	; 242
    302c:	3f 4f       	sbci	r19, 0xFF	; 255
    302e:	fa 01       	movw	r30, r20
    3030:	35 83       	std	Z+5, r19	; 0x05
    3032:	24 83       	std	Z+4, r18	; 0x04
    3034:	3f 83       	std	Y+7, r19	; 0x07
    3036:	2e 83       	std	Y+6, r18	; 0x06
    3038:	59 96       	adiw	r26, 0x19	; 25
    303a:	7c 93       	st	X, r23
    303c:	6e 93       	st	-X, r22
    303e:	58 97       	sbiw	r26, 0x18	; 24
    3040:	fb 01       	movw	r30, r22
    3042:	90 81       	ld	r25, Z
    3044:	9f 5f       	subi	r25, 0xFF	; 255
    3046:	90 83       	st	Z, r25
    3048:	5a 96       	adiw	r26, 0x1a	; 26
    304a:	2c 91       	ld	r18, X
    304c:	e0 91 4f 17 	lds	r30, 0x174F	; 0x80174f <pxCurrentTCB>
    3050:	f0 91 50 17 	lds	r31, 0x1750	; 0x801750 <pxCurrentTCB+0x1>
    3054:	92 8d       	ldd	r25, Z+26	; 0x1a
    3056:	92 17       	cp	r25, r18
    3058:	48 f4       	brcc	.+18     	; 0x306c <xTaskGenericNotifyFromISR+0x22c>
    305a:	c1 14       	cp	r12, r1
    305c:	d1 04       	cpc	r13, r1
    305e:	19 f0       	breq	.+6      	; 0x3066 <xTaskGenericNotifyFromISR+0x226>
    3060:	91 e0       	ldi	r25, 0x01	; 1
    3062:	f6 01       	movw	r30, r12
    3064:	90 83       	st	Z, r25
    3066:	91 e0       	ldi	r25, 0x01	; 1
    3068:	90 93 99 16 	sts	0x1699, r25	; 0x801699 <xYieldPending>
    306c:	df 91       	pop	r29
    306e:	cf 91       	pop	r28
    3070:	0f 91       	pop	r16
    3072:	ff 90       	pop	r15
    3074:	ef 90       	pop	r14
    3076:	df 90       	pop	r13
    3078:	cf 90       	pop	r12
    307a:	bf 90       	pop	r11
    307c:	af 90       	pop	r10
    307e:	9f 90       	pop	r9
    3080:	8f 90       	pop	r8
    3082:	08 95       	ret

00003084 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3084:	00 97       	sbiw	r24, 0x00	; 0
    3086:	21 f4       	brne	.+8      	; 0x3090 <xTaskGenericNotifyStateClear+0xc>
    3088:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <pxCurrentTCB>
    308c:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	fc 01       	movw	r30, r24
    309a:	e6 0f       	add	r30, r22
    309c:	f7 1f       	adc	r31, r23
    309e:	23 a9       	ldd	r18, Z+51	; 0x33
    30a0:	22 30       	cpi	r18, 0x02	; 2
    30a2:	31 f4       	brne	.+12     	; 0x30b0 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    30a4:	fc 01       	movw	r30, r24
    30a6:	e6 0f       	add	r30, r22
    30a8:	f7 1f       	adc	r31, r23
    30aa:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	01 c0       	rjmp	.+2      	; 0x30b2 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    30b0:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    30b2:	0f 90       	pop	r0
    30b4:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    30b6:	08 95       	ret

000030b8 <prvGetNextExpireTime>:
    30b8:	dc 01       	movw	r26, r24
    30ba:	e0 91 5b 17 	lds	r30, 0x175B	; 0x80175b <pxCurrentTimerList>
    30be:	f0 91 5c 17 	lds	r31, 0x175C	; 0x80175c <pxCurrentTimerList+0x1>
    30c2:	80 81       	ld	r24, Z
    30c4:	91 e0       	ldi	r25, 0x01	; 1
    30c6:	81 11       	cpse	r24, r1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	9c 93       	st	X, r25
    30cc:	91 11       	cpse	r25, r1
    30ce:	08 c0       	rjmp	.+16     	; 0x30e0 <prvGetNextExpireTime+0x28>
    30d0:	07 80       	ldd	r0, Z+7	; 0x07
    30d2:	f0 85       	ldd	r31, Z+8	; 0x08
    30d4:	e0 2d       	mov	r30, r0
    30d6:	60 81       	ld	r22, Z
    30d8:	71 81       	ldd	r23, Z+1	; 0x01
    30da:	82 81       	ldd	r24, Z+2	; 0x02
    30dc:	93 81       	ldd	r25, Z+3	; 0x03
    30de:	08 95       	ret
    30e0:	60 e0       	ldi	r22, 0x00	; 0
    30e2:	70 e0       	ldi	r23, 0x00	; 0
    30e4:	cb 01       	movw	r24, r22
    30e6:	08 95       	ret

000030e8 <prvInsertTimerInActiveList>:
    30e8:	cf 92       	push	r12
    30ea:	df 92       	push	r13
    30ec:	ef 92       	push	r14
    30ee:	ff 92       	push	r15
    30f0:	0f 93       	push	r16
    30f2:	1f 93       	push	r17
    30f4:	fc 01       	movw	r30, r24
    30f6:	42 83       	std	Z+2, r20	; 0x02
    30f8:	53 83       	std	Z+3, r21	; 0x03
    30fa:	64 83       	std	Z+4, r22	; 0x04
    30fc:	75 83       	std	Z+5, r23	; 0x05
    30fe:	93 87       	std	Z+11, r25	; 0x0b
    3100:	82 87       	std	Z+10, r24	; 0x0a
    3102:	04 17       	cp	r16, r20
    3104:	15 07       	cpc	r17, r21
    3106:	26 07       	cpc	r18, r22
    3108:	37 07       	cpc	r19, r23
    310a:	c0 f0       	brcs	.+48     	; 0x313c <prvInsertTimerInActiveList+0x54>
    310c:	0c 19       	sub	r16, r12
    310e:	1d 09       	sbc	r17, r13
    3110:	2e 09       	sbc	r18, r14
    3112:	3f 09       	sbc	r19, r15
    3114:	86 85       	ldd	r24, Z+14	; 0x0e
    3116:	97 85       	ldd	r25, Z+15	; 0x0f
    3118:	a0 89       	ldd	r26, Z+16	; 0x10
    311a:	b1 89       	ldd	r27, Z+17	; 0x11
    311c:	08 17       	cp	r16, r24
    311e:	19 07       	cpc	r17, r25
    3120:	2a 07       	cpc	r18, r26
    3122:	3b 07       	cpc	r19, r27
    3124:	00 f5       	brcc	.+64     	; 0x3166 <prvInsertTimerInActiveList+0x7e>
    3126:	bf 01       	movw	r22, r30
    3128:	6e 5f       	subi	r22, 0xFE	; 254
    312a:	7f 4f       	sbci	r23, 0xFF	; 255
    312c:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <pxOverflowTimerList>
    3130:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <pxOverflowTimerList+0x1>
    3134:	0e 94 6d 05 	call	0xada	; 0xada <vListInsert>
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	18 c0       	rjmp	.+48     	; 0x316c <prvInsertTimerInActiveList+0x84>
    313c:	0c 15       	cp	r16, r12
    313e:	1d 05       	cpc	r17, r13
    3140:	2e 05       	cpc	r18, r14
    3142:	3f 05       	cpc	r19, r15
    3144:	28 f4       	brcc	.+10     	; 0x3150 <prvInsertTimerInActiveList+0x68>
    3146:	4c 15       	cp	r20, r12
    3148:	5d 05       	cpc	r21, r13
    314a:	6e 05       	cpc	r22, r14
    314c:	7f 05       	cpc	r23, r15
    314e:	68 f4       	brcc	.+26     	; 0x316a <prvInsertTimerInActiveList+0x82>
    3150:	bf 01       	movw	r22, r30
    3152:	6e 5f       	subi	r22, 0xFE	; 254
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <pxCurrentTimerList>
    315a:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <pxCurrentTimerList+0x1>
    315e:	0e 94 6d 05 	call	0xada	; 0xada <vListInsert>
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	03 c0       	rjmp	.+6      	; 0x316c <prvInsertTimerInActiveList+0x84>
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	01 c0       	rjmp	.+2      	; 0x316c <prvInsertTimerInActiveList+0x84>
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	08 95       	ret

0000317a <prvCheckForValidListAndQueue>:
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	0f 92       	push	r0
    3180:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <xTimerQueue>
    3184:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <xTimerQueue+0x1>
    3188:	89 2b       	or	r24, r25
    318a:	e9 f4       	brne	.+58     	; 0x31c6 <prvCheckForValidListAndQueue+0x4c>
    318c:	88 e6       	ldi	r24, 0x68	; 104
    318e:	97 e1       	ldi	r25, 0x17	; 23
    3190:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialise>
    3194:	8d e5       	ldi	r24, 0x5D	; 93
    3196:	97 e1       	ldi	r25, 0x17	; 23
    3198:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialise>
    319c:	88 e6       	ldi	r24, 0x68	; 104
    319e:	97 e1       	ldi	r25, 0x17	; 23
    31a0:	90 93 5c 17 	sts	0x175C, r25	; 0x80175c <pxCurrentTimerList+0x1>
    31a4:	80 93 5b 17 	sts	0x175B, r24	; 0x80175b <pxCurrentTimerList>
    31a8:	8d e5       	ldi	r24, 0x5D	; 93
    31aa:	97 e1       	ldi	r25, 0x17	; 23
    31ac:	90 93 5a 17 	sts	0x175A, r25	; 0x80175a <pxOverflowTimerList+0x1>
    31b0:	80 93 59 17 	sts	0x1759, r24	; 0x801759 <pxOverflowTimerList>
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	67 e0       	ldi	r22, 0x07	; 7
    31b8:	8a e0       	ldi	r24, 0x0A	; 10
    31ba:	0e 94 0b 08 	call	0x1016	; 0x1016 <xQueueGenericCreate>
    31be:	90 93 58 17 	sts	0x1758, r25	; 0x801758 <xTimerQueue+0x1>
    31c2:	80 93 57 17 	sts	0x1757, r24	; 0x801757 <xTimerQueue>
    31c6:	0f 90       	pop	r0
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	08 95       	ret

000031cc <xTimerCreateTimerTask>:
    31cc:	ef 92       	push	r14
    31ce:	ff 92       	push	r15
    31d0:	0f 93       	push	r16
    31d2:	d3 df       	rcall	.-90     	; 0x317a <prvCheckForValidListAndQueue>
    31d4:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <xTimerQueue>
    31d8:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <xTimerQueue+0x1>
    31dc:	89 2b       	or	r24, r25
    31de:	91 f0       	breq	.+36     	; 0x3204 <xTimerCreateTimerTask+0x38>
    31e0:	0f 2e       	mov	r0, r31
    31e2:	f5 e5       	ldi	r31, 0x55	; 85
    31e4:	ef 2e       	mov	r14, r31
    31e6:	f7 e1       	ldi	r31, 0x17	; 23
    31e8:	ff 2e       	mov	r15, r31
    31ea:	f0 2d       	mov	r31, r0
    31ec:	03 e0       	ldi	r16, 0x03	; 3
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 ec       	ldi	r20, 0xC0	; 192
    31f4:	50 e0       	ldi	r21, 0x00	; 0
    31f6:	6c e1       	ldi	r22, 0x1C	; 28
    31f8:	73 e0       	ldi	r23, 0x03	; 3
    31fa:	88 e5       	ldi	r24, 0x58	; 88
    31fc:	91 e0       	ldi	r25, 0x01	; 1
    31fe:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskCreate>
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <xTimerCreateTimerTask+0x3a>
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	0f 91       	pop	r16
    3208:	ff 90       	pop	r15
    320a:	ef 90       	pop	r14
    320c:	08 95       	ret

0000320e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    320e:	8f 92       	push	r8
    3210:	9f 92       	push	r9
    3212:	af 92       	push	r10
    3214:	bf 92       	push	r11
    3216:	cf 92       	push	r12
    3218:	df 92       	push	r13
    321a:	ef 92       	push	r14
    321c:	ff 92       	push	r15
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	27 97       	sbiw	r28, 0x07	; 7
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3236:	e0 91 57 17 	lds	r30, 0x1757	; 0x801757 <xTimerQueue>
    323a:	f0 91 58 17 	lds	r31, 0x1758	; 0x801758 <xTimerQueue+0x1>
    323e:	30 97       	sbiw	r30, 0x00	; 0
    3240:	81 f1       	breq	.+96     	; 0x32a2 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3242:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3244:	2a 83       	std	Y+2, r18	; 0x02
    3246:	3b 83       	std	Y+3, r19	; 0x03
    3248:	4c 83       	std	Y+4, r20	; 0x04
    324a:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    324c:	9f 83       	std	Y+7, r25	; 0x07
    324e:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3250:	66 30       	cpi	r22, 0x06	; 6
    3252:	f4 f4       	brge	.+60     	; 0x3290 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3254:	c4 db       	rcall	.-2168   	; 0x29de <xTaskGetSchedulerState>
    3256:	82 30       	cpi	r24, 0x02	; 2
    3258:	69 f4       	brne	.+26     	; 0x3274 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    325a:	00 e0       	ldi	r16, 0x00	; 0
    325c:	a7 01       	movw	r20, r14
    325e:	96 01       	movw	r18, r12
    3260:	be 01       	movw	r22, r28
    3262:	6f 5f       	subi	r22, 0xFF	; 255
    3264:	7f 4f       	sbci	r23, 0xFF	; 255
    3266:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <xTimerQueue>
    326a:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <xTimerQueue+0x1>
    326e:	0e 94 2e 08 	call	0x105c	; 0x105c <xQueueGenericSend>
    3272:	18 c0       	rjmp	.+48     	; 0x32a4 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3274:	00 e0       	ldi	r16, 0x00	; 0
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	a9 01       	movw	r20, r18
    327c:	be 01       	movw	r22, r28
    327e:	6f 5f       	subi	r22, 0xFF	; 255
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <xTimerQueue>
    3286:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <xTimerQueue+0x1>
    328a:	0e 94 2e 08 	call	0x105c	; 0x105c <xQueueGenericSend>
    328e:	0a c0       	rjmp	.+20     	; 0x32a4 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	a8 01       	movw	r20, r16
    3294:	be 01       	movw	r22, r28
    3296:	6f 5f       	subi	r22, 0xFF	; 255
    3298:	7f 4f       	sbci	r23, 0xFF	; 255
    329a:	cf 01       	movw	r24, r30
    329c:	0e 94 bf 08 	call	0x117e	; 0x117e <xQueueGenericSendFromISR>
    32a0:	01 c0       	rjmp	.+2      	; 0x32a4 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    32a2:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    32a4:	27 96       	adiw	r28, 0x07	; 7
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	1f 91       	pop	r17
    32b6:	0f 91       	pop	r16
    32b8:	ff 90       	pop	r15
    32ba:	ef 90       	pop	r14
    32bc:	df 90       	pop	r13
    32be:	cf 90       	pop	r12
    32c0:	bf 90       	pop	r11
    32c2:	af 90       	pop	r10
    32c4:	9f 90       	pop	r9
    32c6:	8f 90       	pop	r8
    32c8:	08 95       	ret

000032ca <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    32ca:	8f 92       	push	r8
    32cc:	9f 92       	push	r9
    32ce:	af 92       	push	r10
    32d0:	bf 92       	push	r11
    32d2:	cf 92       	push	r12
    32d4:	df 92       	push	r13
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	0f 93       	push	r16
    32dc:	1f 93       	push	r17
    32de:	cf 93       	push	r28
    32e0:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    32e2:	3b c0       	rjmp	.+118    	; 0x335a <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    32e4:	07 80       	ldd	r0, Z+7	; 0x07
    32e6:	f0 85       	ldd	r31, Z+8	; 0x08
    32e8:	e0 2d       	mov	r30, r0
    32ea:	80 80       	ld	r8, Z
    32ec:	91 80       	ldd	r9, Z+1	; 0x01
    32ee:	a2 80       	ldd	r10, Z+2	; 0x02
    32f0:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    32f2:	c0 85       	ldd	r28, Z+8	; 0x08
    32f4:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    32f6:	8e 01       	movw	r16, r28
    32f8:	0e 5f       	subi	r16, 0xFE	; 254
    32fa:	1f 4f       	sbci	r17, 0xFF	; 255
    32fc:	c8 01       	movw	r24, r16
    32fe:	0e 94 aa 05 	call	0xb54	; 0xb54 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3302:	ec 89       	ldd	r30, Y+20	; 0x14
    3304:	fd 89       	ldd	r31, Y+21	; 0x15
    3306:	ce 01       	movw	r24, r28
    3308:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    330a:	8e 89       	ldd	r24, Y+22	; 0x16
    330c:	82 ff       	sbrs	r24, 2
    330e:	25 c0       	rjmp	.+74     	; 0x335a <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3310:	8e 85       	ldd	r24, Y+14	; 0x0e
    3312:	9f 85       	ldd	r25, Y+15	; 0x0f
    3314:	a8 89       	ldd	r26, Y+16	; 0x10
    3316:	b9 89       	ldd	r27, Y+17	; 0x11
    3318:	88 0d       	add	r24, r8
    331a:	99 1d       	adc	r25, r9
    331c:	aa 1d       	adc	r26, r10
    331e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3320:	88 16       	cp	r8, r24
    3322:	99 06       	cpc	r9, r25
    3324:	aa 06       	cpc	r10, r26
    3326:	bb 06       	cpc	r11, r27
    3328:	70 f4       	brcc	.+28     	; 0x3346 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    332a:	8a 83       	std	Y+2, r24	; 0x02
    332c:	9b 83       	std	Y+3, r25	; 0x03
    332e:	ac 83       	std	Y+4, r26	; 0x04
    3330:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3332:	db 87       	std	Y+11, r29	; 0x0b
    3334:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3336:	b8 01       	movw	r22, r16
    3338:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <pxCurrentTimerList>
    333c:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <pxCurrentTimerList+0x1>
    3340:	0e 94 6d 05 	call	0xada	; 0xada <vListInsert>
    3344:	0a c0       	rjmp	.+20     	; 0x335a <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3346:	c1 2c       	mov	r12, r1
    3348:	d1 2c       	mov	r13, r1
    334a:	76 01       	movw	r14, r12
    334c:	00 e0       	ldi	r16, 0x00	; 0
    334e:	10 e0       	ldi	r17, 0x00	; 0
    3350:	a5 01       	movw	r20, r10
    3352:	94 01       	movw	r18, r8
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	ce 01       	movw	r24, r28
    3358:	5a df       	rcall	.-332    	; 0x320e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    335a:	e0 91 5b 17 	lds	r30, 0x175B	; 0x80175b <pxCurrentTimerList>
    335e:	f0 91 5c 17 	lds	r31, 0x175C	; 0x80175c <pxCurrentTimerList+0x1>
    3362:	80 81       	ld	r24, Z
    3364:	81 11       	cpse	r24, r1
    3366:	be cf       	rjmp	.-132    	; 0x32e4 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3368:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <pxOverflowTimerList>
    336c:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <pxOverflowTimerList+0x1>
    3370:	90 93 5c 17 	sts	0x175C, r25	; 0x80175c <pxCurrentTimerList+0x1>
    3374:	80 93 5b 17 	sts	0x175B, r24	; 0x80175b <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3378:	f0 93 5a 17 	sts	0x175A, r31	; 0x80175a <pxOverflowTimerList+0x1>
    337c:	e0 93 59 17 	sts	0x1759, r30	; 0x801759 <pxOverflowTimerList>
    }
    3380:	df 91       	pop	r29
    3382:	cf 91       	pop	r28
    3384:	1f 91       	pop	r17
    3386:	0f 91       	pop	r16
    3388:	ff 90       	pop	r15
    338a:	ef 90       	pop	r14
    338c:	df 90       	pop	r13
    338e:	cf 90       	pop	r12
    3390:	bf 90       	pop	r11
    3392:	af 90       	pop	r10
    3394:	9f 90       	pop	r9
    3396:	8f 90       	pop	r8
    3398:	08 95       	ret

0000339a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    339a:	cf 92       	push	r12
    339c:	df 92       	push	r13
    339e:	ef 92       	push	r14
    33a0:	ff 92       	push	r15
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    33a6:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    33a8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <xTaskGetTickCount>
    33ac:	6b 01       	movw	r12, r22
    33ae:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    33b0:	80 91 51 17 	lds	r24, 0x1751	; 0x801751 <xLastTime.2436>
    33b4:	90 91 52 17 	lds	r25, 0x1752	; 0x801752 <xLastTime.2436+0x1>
    33b8:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <xLastTime.2436+0x2>
    33bc:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <xLastTime.2436+0x3>
    33c0:	c8 16       	cp	r12, r24
    33c2:	d9 06       	cpc	r13, r25
    33c4:	ea 06       	cpc	r14, r26
    33c6:	fb 06       	cpc	r15, r27
    33c8:	20 f4       	brcc	.+8      	; 0x33d2 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    33ca:	7f df       	rcall	.-258    	; 0x32ca <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	88 83       	st	Y, r24
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    33d2:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    33d4:	c0 92 51 17 	sts	0x1751, r12	; 0x801751 <xLastTime.2436>
    33d8:	d0 92 52 17 	sts	0x1752, r13	; 0x801752 <xLastTime.2436+0x1>
    33dc:	e0 92 53 17 	sts	0x1753, r14	; 0x801753 <xLastTime.2436+0x2>
    33e0:	f0 92 54 17 	sts	0x1754, r15	; 0x801754 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    33e4:	c7 01       	movw	r24, r14
    33e6:	b6 01       	movw	r22, r12
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	ff 90       	pop	r15
    33ee:	ef 90       	pop	r14
    33f0:	df 90       	pop	r13
    33f2:	cf 90       	pop	r12
    33f4:	08 95       	ret

000033f6 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    33f6:	4f 92       	push	r4
    33f8:	5f 92       	push	r5
    33fa:	6f 92       	push	r6
    33fc:	7f 92       	push	r7
    33fe:	8f 92       	push	r8
    3400:	9f 92       	push	r9
    3402:	af 92       	push	r10
    3404:	bf 92       	push	r11
    3406:	cf 92       	push	r12
    3408:	df 92       	push	r13
    340a:	ef 92       	push	r14
    340c:	ff 92       	push	r15
    340e:	0f 93       	push	r16
    3410:	1f 93       	push	r17
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	4b 01       	movw	r8, r22
    3418:	5c 01       	movw	r10, r24
    341a:	29 01       	movw	r4, r18
    341c:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    341e:	e0 91 5b 17 	lds	r30, 0x175B	; 0x80175b <pxCurrentTimerList>
    3422:	f0 91 5c 17 	lds	r31, 0x175C	; 0x80175c <pxCurrentTimerList+0x1>
    3426:	07 80       	ldd	r0, Z+7	; 0x07
    3428:	f0 85       	ldd	r31, Z+8	; 0x08
    342a:	e0 2d       	mov	r30, r0
    342c:	c0 85       	ldd	r28, Z+8	; 0x08
    342e:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3430:	ce 01       	movw	r24, r28
    3432:	02 96       	adiw	r24, 0x02	; 2
    3434:	0e 94 aa 05 	call	0xb54	; 0xb54 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3438:	8e 89       	ldd	r24, Y+22	; 0x16
    343a:	82 ff       	sbrs	r24, 2
    343c:	1b c0       	rjmp	.+54     	; 0x3474 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    343e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3440:	5f 85       	ldd	r21, Y+15	; 0x0f
    3442:	68 89       	ldd	r22, Y+16	; 0x10
    3444:	79 89       	ldd	r23, Y+17	; 0x11
    3446:	48 0d       	add	r20, r8
    3448:	59 1d       	adc	r21, r9
    344a:	6a 1d       	adc	r22, r10
    344c:	7b 1d       	adc	r23, r11
    344e:	75 01       	movw	r14, r10
    3450:	64 01       	movw	r12, r8
    3452:	93 01       	movw	r18, r6
    3454:	82 01       	movw	r16, r4
    3456:	ce 01       	movw	r24, r28
    3458:	47 de       	rcall	.-882    	; 0x30e8 <prvInsertTimerInActiveList>
    345a:	88 23       	and	r24, r24
    345c:	69 f0       	breq	.+26     	; 0x3478 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    345e:	c1 2c       	mov	r12, r1
    3460:	d1 2c       	mov	r13, r1
    3462:	76 01       	movw	r14, r12
    3464:	00 e0       	ldi	r16, 0x00	; 0
    3466:	10 e0       	ldi	r17, 0x00	; 0
    3468:	a5 01       	movw	r20, r10
    346a:	94 01       	movw	r18, r8
    346c:	60 e0       	ldi	r22, 0x00	; 0
    346e:	ce 01       	movw	r24, r28
    3470:	ce de       	rcall	.-612    	; 0x320e <xTimerGenericCommand>
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3474:	8e 7f       	andi	r24, 0xFE	; 254
    3476:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3478:	ec 89       	ldd	r30, Y+20	; 0x14
    347a:	fd 89       	ldd	r31, Y+21	; 0x15
    347c:	ce 01       	movw	r24, r28
    347e:	19 95       	eicall
    }
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	ff 90       	pop	r15
    348a:	ef 90       	pop	r14
    348c:	df 90       	pop	r13
    348e:	cf 90       	pop	r12
    3490:	bf 90       	pop	r11
    3492:	af 90       	pop	r10
    3494:	9f 90       	pop	r9
    3496:	8f 90       	pop	r8
    3498:	7f 90       	pop	r7
    349a:	6f 90       	pop	r6
    349c:	5f 90       	pop	r5
    349e:	4f 90       	pop	r4
    34a0:	08 95       	ret

000034a2 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    34a2:	8f 92       	push	r8
    34a4:	9f 92       	push	r9
    34a6:	af 92       	push	r10
    34a8:	bf 92       	push	r11
    34aa:	cf 92       	push	r12
    34ac:	df 92       	push	r13
    34ae:	ef 92       	push	r14
    34b0:	ff 92       	push	r15
    34b2:	1f 93       	push	r17
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	1f 92       	push	r1
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
    34be:	6b 01       	movw	r12, r22
    34c0:	7c 01       	movw	r14, r24
    34c2:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    34c4:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    34c8:	ce 01       	movw	r24, r28
    34ca:	01 96       	adiw	r24, 0x01	; 1
    34cc:	66 df       	rcall	.-308    	; 0x339a <prvSampleTimeNow>
    34ce:	4b 01       	movw	r8, r22
    34d0:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	81 11       	cpse	r24, r1
    34d6:	2d c0       	rjmp	.+90     	; 0x3532 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    34d8:	11 11       	cpse	r17, r1
    34da:	0d c0       	rjmp	.+26     	; 0x34f6 <prvProcessTimerOrBlockTask+0x54>
    34dc:	8c 14       	cp	r8, r12
    34de:	9d 04       	cpc	r9, r13
    34e0:	ae 04       	cpc	r10, r14
    34e2:	bf 04       	cpc	r11, r15
    34e4:	40 f0       	brcs	.+16     	; 0x34f6 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    34e6:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    34ea:	a5 01       	movw	r20, r10
    34ec:	94 01       	movw	r18, r8
    34ee:	c7 01       	movw	r24, r14
    34f0:	b6 01       	movw	r22, r12
    34f2:	81 df       	rcall	.-254    	; 0x33f6 <prvProcessExpiredTimer>
    34f4:	20 c0       	rjmp	.+64     	; 0x3536 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    34f6:	11 23       	and	r17, r17
    34f8:	41 f0       	breq	.+16     	; 0x350a <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    34fa:	e0 91 59 17 	lds	r30, 0x1759	; 0x801759 <pxOverflowTimerList>
    34fe:	f0 91 5a 17 	lds	r31, 0x175A	; 0x80175a <pxOverflowTimerList+0x1>
    3502:	80 81       	ld	r24, Z
    3504:	11 e0       	ldi	r17, 0x01	; 1
    3506:	81 11       	cpse	r24, r1
    3508:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    350a:	b7 01       	movw	r22, r14
    350c:	a6 01       	movw	r20, r12
    350e:	48 19       	sub	r20, r8
    3510:	59 09       	sbc	r21, r9
    3512:	6a 09       	sbc	r22, r10
    3514:	7b 09       	sbc	r23, r11
    3516:	21 2f       	mov	r18, r17
    3518:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <xTimerQueue>
    351c:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <xTimerQueue+0x1>
    3520:	0e 94 89 09 	call	0x1312	; 0x1312 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3524:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskResumeAll>
    3528:	81 11       	cpse	r24, r1
    352a:	05 c0       	rjmp	.+10     	; 0x3536 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    352c:	0e 94 26 06 	call	0xc4c	; 0xc4c <vPortYield>
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3532:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskResumeAll>
            }
        }
    }
    3536:	0f 90       	pop	r0
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	1f 91       	pop	r17
    353e:	ff 90       	pop	r15
    3540:	ef 90       	pop	r14
    3542:	df 90       	pop	r13
    3544:	cf 90       	pop	r12
    3546:	bf 90       	pop	r11
    3548:	af 90       	pop	r10
    354a:	9f 90       	pop	r9
    354c:	8f 90       	pop	r8
    354e:	08 95       	ret

00003550 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3550:	af 92       	push	r10
    3552:	bf 92       	push	r11
    3554:	cf 92       	push	r12
    3556:	df 92       	push	r13
    3558:	ef 92       	push	r14
    355a:	ff 92       	push	r15
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
    3568:	28 97       	sbiw	r28, 0x08	; 8
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3574:	82 c0       	rjmp	.+260    	; 0x367a <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	88 23       	and	r24, r24
    357a:	0c f4       	brge	.+2      	; 0x357e <prvProcessReceivedCommands+0x2e>
    357c:	7e c0       	rjmp	.+252    	; 0x367a <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    357e:	ae 80       	ldd	r10, Y+6	; 0x06
    3580:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3582:	d5 01       	movw	r26, r10
    3584:	1c 96       	adiw	r26, 0x0c	; 12
    3586:	8d 91       	ld	r24, X+
    3588:	9c 91       	ld	r25, X
    358a:	1d 97       	sbiw	r26, 0x0d	; 13
    358c:	89 2b       	or	r24, r25
    358e:	21 f0       	breq	.+8      	; 0x3598 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3590:	c5 01       	movw	r24, r10
    3592:	02 96       	adiw	r24, 0x02	; 2
    3594:	0e 94 aa 05 	call	0xb54	; 0xb54 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3598:	ce 01       	movw	r24, r28
    359a:	08 96       	adiw	r24, 0x08	; 8
    359c:	fe de       	rcall	.-516    	; 0x339a <prvSampleTimeNow>
    359e:	8b 01       	movw	r16, r22
    35a0:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    35a2:	e9 81       	ldd	r30, Y+1	; 0x01
    35a4:	0e 2e       	mov	r0, r30
    35a6:	00 0c       	add	r0, r0
    35a8:	ff 0b       	sbc	r31, r31
    35aa:	ea 30       	cpi	r30, 0x0A	; 10
    35ac:	f1 05       	cpc	r31, r1
    35ae:	08 f0       	brcs	.+2      	; 0x35b2 <prvProcessReceivedCommands+0x62>
    35b0:	64 c0       	rjmp	.+200    	; 0x367a <prvProcessReceivedCommands+0x12a>
    35b2:	88 27       	eor	r24, r24
    35b4:	ee 58       	subi	r30, 0x8E	; 142
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	8f 4f       	sbci	r24, 0xFF	; 255
    35ba:	0c 94 f0 30 	jmp	0x61e0	; 0x61e0 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    35be:	f5 01       	movw	r30, r10
    35c0:	86 89       	ldd	r24, Z+22	; 0x16
    35c2:	81 60       	ori	r24, 0x01	; 1
    35c4:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    35c6:	ca 80       	ldd	r12, Y+2	; 0x02
    35c8:	db 80       	ldd	r13, Y+3	; 0x03
    35ca:	ec 80       	ldd	r14, Y+4	; 0x04
    35cc:	fd 80       	ldd	r15, Y+5	; 0x05
    35ce:	46 85       	ldd	r20, Z+14	; 0x0e
    35d0:	57 85       	ldd	r21, Z+15	; 0x0f
    35d2:	60 89       	ldd	r22, Z+16	; 0x10
    35d4:	71 89       	ldd	r23, Z+17	; 0x11
    35d6:	4c 0d       	add	r20, r12
    35d8:	5d 1d       	adc	r21, r13
    35da:	6e 1d       	adc	r22, r14
    35dc:	7f 1d       	adc	r23, r15
    35de:	c5 01       	movw	r24, r10
    35e0:	83 dd       	rcall	.-1274   	; 0x30e8 <prvInsertTimerInActiveList>
    35e2:	88 23       	and	r24, r24
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <prvProcessReceivedCommands+0x98>
    35e6:	49 c0       	rjmp	.+146    	; 0x367a <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    35e8:	d5 01       	movw	r26, r10
    35ea:	54 96       	adiw	r26, 0x14	; 20
    35ec:	ed 91       	ld	r30, X+
    35ee:	fc 91       	ld	r31, X
    35f0:	55 97       	sbiw	r26, 0x15	; 21
    35f2:	c5 01       	movw	r24, r10
    35f4:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    35f6:	f5 01       	movw	r30, r10
    35f8:	86 89       	ldd	r24, Z+22	; 0x16
    35fa:	82 ff       	sbrs	r24, 2
    35fc:	3e c0       	rjmp	.+124    	; 0x367a <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    35fe:	4a 81       	ldd	r20, Y+2	; 0x02
    3600:	5b 81       	ldd	r21, Y+3	; 0x03
    3602:	6c 81       	ldd	r22, Y+4	; 0x04
    3604:	7d 81       	ldd	r23, Y+5	; 0x05
    3606:	86 85       	ldd	r24, Z+14	; 0x0e
    3608:	97 85       	ldd	r25, Z+15	; 0x0f
    360a:	a0 89       	ldd	r26, Z+16	; 0x10
    360c:	b1 89       	ldd	r27, Z+17	; 0x11
    360e:	9a 01       	movw	r18, r20
    3610:	ab 01       	movw	r20, r22
    3612:	28 0f       	add	r18, r24
    3614:	39 1f       	adc	r19, r25
    3616:	4a 1f       	adc	r20, r26
    3618:	5b 1f       	adc	r21, r27
    361a:	c1 2c       	mov	r12, r1
    361c:	d1 2c       	mov	r13, r1
    361e:	76 01       	movw	r14, r12
    3620:	00 e0       	ldi	r16, 0x00	; 0
    3622:	10 e0       	ldi	r17, 0x00	; 0
    3624:	60 e0       	ldi	r22, 0x00	; 0
    3626:	c5 01       	movw	r24, r10
    3628:	f2 dd       	rcall	.-1052   	; 0x320e <xTimerGenericCommand>
    362a:	27 c0       	rjmp	.+78     	; 0x367a <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    362c:	d5 01       	movw	r26, r10
    362e:	56 96       	adiw	r26, 0x16	; 22
    3630:	8c 91       	ld	r24, X
    3632:	56 97       	sbiw	r26, 0x16	; 22
    3634:	8e 7f       	andi	r24, 0xFE	; 254
    3636:	56 96       	adiw	r26, 0x16	; 22
    3638:	8c 93       	st	X, r24
                        break;
    363a:	1f c0       	rjmp	.+62     	; 0x367a <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    363c:	f5 01       	movw	r30, r10
    363e:	86 89       	ldd	r24, Z+22	; 0x16
    3640:	81 60       	ori	r24, 0x01	; 1
    3642:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3644:	4a 81       	ldd	r20, Y+2	; 0x02
    3646:	5b 81       	ldd	r21, Y+3	; 0x03
    3648:	6c 81       	ldd	r22, Y+4	; 0x04
    364a:	7d 81       	ldd	r23, Y+5	; 0x05
    364c:	46 87       	std	Z+14, r20	; 0x0e
    364e:	57 87       	std	Z+15, r21	; 0x0f
    3650:	60 8b       	std	Z+16, r22	; 0x10
    3652:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3654:	40 0f       	add	r20, r16
    3656:	51 1f       	adc	r21, r17
    3658:	62 1f       	adc	r22, r18
    365a:	73 1f       	adc	r23, r19
    365c:	68 01       	movw	r12, r16
    365e:	79 01       	movw	r14, r18
    3660:	c5 01       	movw	r24, r10
    3662:	42 dd       	rcall	.-1404   	; 0x30e8 <prvInsertTimerInActiveList>
                        break;
    3664:	0a c0       	rjmp	.+20     	; 0x367a <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3666:	f5 01       	movw	r30, r10
    3668:	86 89       	ldd	r24, Z+22	; 0x16
    366a:	81 fd       	sbrc	r24, 1
    366c:	04 c0       	rjmp	.+8      	; 0x3676 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    366e:	c5 01       	movw	r24, r10
    3670:	0e 94 1b 05 	call	0xa36	; 0xa36 <vPortFree>
    3674:	02 c0       	rjmp	.+4      	; 0x367a <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3676:	8e 7f       	andi	r24, 0xFE	; 254
    3678:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	a9 01       	movw	r20, r18
    3680:	be 01       	movw	r22, r28
    3682:	6f 5f       	subi	r22, 0xFF	; 255
    3684:	7f 4f       	sbci	r23, 0xFF	; 255
    3686:	80 91 57 17 	lds	r24, 0x1757	; 0x801757 <xTimerQueue>
    368a:	90 91 58 17 	lds	r25, 0x1758	; 0x801758 <xTimerQueue+0x1>
    368e:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <xQueueReceive>
    3692:	81 11       	cpse	r24, r1
    3694:	70 cf       	rjmp	.-288    	; 0x3576 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3696:	28 96       	adiw	r28, 0x08	; 8
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	ff 90       	pop	r15
    36ac:	ef 90       	pop	r14
    36ae:	df 90       	pop	r13
    36b0:	cf 90       	pop	r12
    36b2:	bf 90       	pop	r11
    36b4:	af 90       	pop	r10
    36b6:	08 95       	ret

000036b8 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    36b8:	08 95       	ret

000036ba <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    36ba:	84 b1       	in	r24, 0x04	; 4
    36bc:	80 68       	ori	r24, 0x80	; 128
    36be:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    36c0:	85 b1       	in	r24, 0x05	; 5
    36c2:	80 68       	ori	r24, 0x80	; 128
    36c4:	85 b9       	out	0x05, r24	; 5
    36c6:	08 95       	ret

000036c8 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    36c8:	83 b1       	in	r24, 0x03	; 3
    36ca:	80 68       	ori	r24, 0x80	; 128
    36cc:	83 b9       	out	0x03, r24	; 3
    36ce:	08 95       	ret

000036d0 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    36d0:	f4 df       	rcall	.-24     	; 0x36ba <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36d2:	2f ef       	ldi	r18, 0xFF	; 255
    36d4:	80 e7       	ldi	r24, 0x70	; 112
    36d6:	92 e0       	ldi	r25, 0x02	; 2
    36d8:	21 50       	subi	r18, 0x01	; 1
    36da:	80 40       	sbci	r24, 0x00	; 0
    36dc:	90 40       	sbci	r25, 0x00	; 0
    36de:	e1 f7       	brne	.-8      	; 0x36d8 <vApplicationMallocFailedHook+0x8>
    36e0:	00 c0       	rjmp	.+0      	; 0x36e2 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    36e2:	00 00       	nop
    36e4:	f1 df       	rcall	.-30     	; 0x36c8 <prvBlinkMainLed>
    36e6:	f5 cf       	rjmp	.-22     	; 0x36d2 <vApplicationMallocFailedHook+0x2>

000036e8 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    36e8:	e8 df       	rcall	.-48     	; 0x36ba <prvSetMainLedOn>
    36ea:	2f ef       	ldi	r18, 0xFF	; 255
    36ec:	87 ea       	ldi	r24, 0xA7	; 167
    36ee:	91 e6       	ldi	r25, 0x61	; 97
    36f0:	21 50       	subi	r18, 0x01	; 1
    36f2:	80 40       	sbci	r24, 0x00	; 0
    36f4:	90 40       	sbci	r25, 0x00	; 0
    36f6:	e1 f7       	brne	.-8      	; 0x36f0 <vApplicationStackOverflowHook+0x8>
    36f8:	00 c0       	rjmp	.+0      	; 0x36fa <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    36fa:	00 00       	nop
    36fc:	e5 df       	rcall	.-54     	; 0x36c8 <prvBlinkMainLed>
    36fe:	f5 cf       	rjmp	.-22     	; 0x36ea <vApplicationStackOverflowHook+0x2>

00003700 <set_temperature_percent>:
static uint16_t humidityPercent;
static uint16_t CO2_PPM;
static uint8_t status = 0x10;

void set_temperature_percent(int16_t temperature){
	temperaturePercent = temperature;
    3700:	90 93 78 17 	sts	0x1778, r25	; 0x801778 <temperaturePercent+0x1>
    3704:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <temperaturePercent>
    3708:	08 95       	ret

0000370a <set_humidity_percent>:
}

void set_humidity_percent(uint16_t humidity){
	humidityPercent = humidity;
    370a:	90 93 76 17 	sts	0x1776, r25	; 0x801776 <humidityPercent+0x1>
    370e:	80 93 75 17 	sts	0x1775, r24	; 0x801775 <humidityPercent>
    3712:	08 95       	ret

00003714 <set_CO2_ppm>:
}

void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    3714:	90 93 74 17 	sts	0x1774, r25	; 0x801774 <CO2_PPM+0x1>
    3718:	80 93 73 17 	sts	0x1773, r24	; 0x801773 <CO2_PPM>
    371c:	08 95       	ret

0000371e <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    371e:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    3720:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    3722:	87 e0       	ldi	r24, 0x07	; 7
    3724:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3726:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <temperaturePercent>
    372a:	90 91 78 17 	lds	r25, 0x1778	; 0x801778 <temperaturePercent+0x1>
    372e:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    3730:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3732:	80 91 75 17 	lds	r24, 0x1775	; 0x801775 <humidityPercent>
    3736:	90 91 76 17 	lds	r25, 0x1776	; 0x801776 <humidityPercent+0x1>
    373a:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    373c:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    373e:	80 91 73 17 	lds	r24, 0x1773	; 0x801773 <CO2_PPM>
    3742:	90 91 74 17 	lds	r25, 0x1774	; 0x801774 <CO2_PPM+0x1>
    3746:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    3748:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    374a:	80 e1       	ldi	r24, 0x10	; 16
    374c:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    374e:	cf 01       	movw	r24, r30
    3750:	08 95       	ret

00003752 <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    3752:	90 93 7a 17 	sts	0x177A, r25	; 0x80177a <lastCO2ppm+0x1>
    3756:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <lastCO2ppm>
    375a:	08 95       	ret

0000375c <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	d7 d7       	rcall	.+4014   	; 0x470e <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    3760:	89 ea       	ldi	r24, 0xA9	; 169
    3762:	9b e1       	ldi	r25, 0x1B	; 27
    3764:	f9 c7       	rjmp	.+4082   	; 0x4758 <mh_z19_injectCallBack>
    3766:	08 95       	ret

00003768 <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    3768:	fc d7       	rcall	.+4088   	; 0x4762 <mh_z19_takeMeassuring>
    376a:	80 93 cc 18 	sts	0x18CC, r24	; 0x8018cc <rc>
	if (rc != MHZ19_OK)
    376e:	88 23       	and	r24, r24
    3770:	41 f0       	breq	.+16     	; 0x3782 <CO2_measure+0x1a>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
    3772:	84 e2       	ldi	r24, 0x24	; 36
    3774:	93 e0       	ldi	r25, 0x03	; 3
    3776:	9f 93       	push	r25
    3778:	8f 93       	push	r24
    377a:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3782:	89 e7       	ldi	r24, 0x79	; 121
    3784:	97 e1       	ldi	r25, 0x17	; 23
    3786:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <mh_z19_getCo2Ppm>
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	90 93 7a 17 	sts	0x177A, r25	; 0x80177a <lastCO2ppm+0x1>
    3790:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <lastCO2ppm>
    3794:	08 95       	ret

00003796 <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3796:	cc 24       	eor	r12, r12
    3798:	ca 94       	dec	r12
    379a:	dc 2c       	mov	r13, r12
    379c:	76 01       	movw	r14, r12
    379e:	01 e0       	ldi	r16, 0x01	; 1
    37a0:	21 e0       	ldi	r18, 0x01	; 1
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	50 e0       	ldi	r21, 0x00	; 0
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	80 91 c6 18 	lds	r24, 0x18C6	; 0x8018c6 <measureEventGroup>
    37ae:	90 91 c7 18 	lds	r25, 0x18C7	; 0x8018c7 <measureEventGroup+0x1>
    37b2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    37b6:	60 ff       	sbrs	r22, 0
    37b8:	ee cf       	rjmp	.-36     	; 0x3796 <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    37ba:	d6 df       	rcall	.-84     	; 0x3768 <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    37bc:	42 e0       	ldi	r20, 0x02	; 2
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	60 e0       	ldi	r22, 0x00	; 0
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	80 91 c4 18 	lds	r24, 0x18C4	; 0x8018c4 <dataReadyEventGroup>
    37c8:	90 91 c5 18 	lds	r25, 0x18C5	; 0x8018c5 <dataReadyEventGroup+0x1>
    37cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <xEventGroupSetBits>
    37d0:	e2 cf       	rjmp	.-60     	; 0x3796 <MeasureCo2Task>

000037d2 <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    37d2:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <lastCO2ppm>
    37d6:	90 91 7a 17 	lds	r25, 0x177A	; 0x80177a <lastCO2ppm+0x1>
    37da:	08 95       	ret

000037dc <create_CO2_sensor_task>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void create_CO2_sensor_task(UBaseType_t priority){
    37dc:	ef 92       	push	r14
    37de:	ff 92       	push	r15
    37e0:	0f 93       	push	r16
    37e2:	08 2f       	mov	r16, r24
	
	//Initializing 
		CO2_createSensor();
    37e4:	bb df       	rcall	.-138    	; 0x375c <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    37e6:	e1 2c       	mov	r14, r1
    37e8:	f1 2c       	mov	r15, r1
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 ec       	ldi	r20, 0xC0	; 192
    37f0:	50 e0       	ldi	r21, 0x00	; 0
    37f2:	64 e5       	ldi	r22, 0x54	; 84
    37f4:	73 e0       	ldi	r23, 0x03	; 3
    37f6:	8b ec       	ldi	r24, 0xCB	; 203
    37f8:	9b e1       	ldi	r25, 0x1B	; 27
    37fa:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY + priority,
		NULL);
}
    37fe:	0f 91       	pop	r16
    3800:	ff 90       	pop	r15
    3802:	ef 90       	pop	r14
    3804:	08 95       	ret

00003806 <initialise_TempHumSensor>:
void Temp_Hum_Main_Task(void *pvParameters);


void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    3806:	39 d2       	rcall	.+1138   	; 0x3c7a <hih8120_initialise>
    3808:	88 23       	and	r24, r24
    380a:	41 f0       	breq	.+16     	; 0x381c <initialise_TempHumSensor+0x16>
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{
		printf("Something went wrong while initialising tempHum sensor");
    380c:	86 e6       	ldi	r24, 0x66	; 102
    380e:	93 e0       	ldi	r25, 0x03	; 3
    3810:	9f 93       	push	r25
    3812:	8f 93       	push	r24
    3814:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	08 95       	ret

0000381e <create_TempHum_sensor_task>:
	}
}


void create_TempHum_sensor_task(UBaseType_t priority){
    381e:	ef 92       	push	r14
    3820:	ff 92       	push	r15
    3822:	0f 93       	push	r16
    3824:	08 2f       	mov	r16, r24
	initialise_TempHumSensor();
    3826:	ef df       	rcall	.-34     	; 0x3806 <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    3828:	e1 2c       	mov	r14, r1
    382a:	f1 2c       	mov	r15, r1
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	40 ec       	ldi	r20, 0xC0	; 192
    3832:	50 e0       	ldi	r21, 0x00	; 0
    3834:	6d e9       	ldi	r22, 0x9D	; 157
    3836:	73 e0       	ldi	r23, 0x03	; 3
    3838:	89 e4       	ldi	r24, 0x49	; 73
    383a:	9c e1       	ldi	r25, 0x1C	; 28
    383c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
	
}
    3840:	0f 91       	pop	r16
    3842:	ff 90       	pop	r15
    3844:	ef 90       	pop	r14
    3846:	08 95       	ret

00003848 <measure_Temp_Hum>:

void measure_Temp_Hum(){
	
	if ( HIH8120_OK != hih8120_wakeup() )
    3848:	30 d2       	rcall	.+1120   	; 0x3caa <hih8120_wakeup>
    384a:	88 23       	and	r24, r24
    384c:	21 f0       	breq	.+8      	; 0x3856 <measure_Temp_Hum+0xe>
	{
		printf("Could not wake up temp hum sensor \n");
    384e:	89 ea       	ldi	r24, 0xA9	; 169
    3850:	93 e0       	ldi	r25, 0x03	; 3
    3852:	0e 94 ce 33 	call	0x679c	; 0x679c <puts>
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(60));
    3856:	63 e0       	ldi	r22, 0x03	; 3
    3858:	70 e0       	ldi	r23, 0x00	; 0
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	0e 94 ed 11 	call	0x23da	; 0x23da <vTaskDelay>
	if ( HIH8120_OK !=  hih8120_measure() )
    3862:	38 d2       	rcall	.+1136   	; 0x3cd4 <hih8120_measure>
    3864:	88 23       	and	r24, r24
    3866:	21 f0       	breq	.+8      	; 0x3870 <measure_Temp_Hum+0x28>
	{
		printf("Could not measure temp hum sensor \n");
    3868:	8c ec       	ldi	r24, 0xCC	; 204
    386a:	93 e0       	ldi	r25, 0x03	; 3
    386c:	0e 94 ce 33 	call	0x679c	; 0x679c <puts>
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(50));
    3870:	63 e0       	ldi	r22, 0x03	; 3
    3872:	70 e0       	ldi	r23, 0x00	; 0
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	0e 94 ed 11 	call	0x23da	; 0x23da <vTaskDelay>
	humidity = hih8120_getHumidityPercent_x10();
    387c:	51 d2       	rcall	.+1186   	; 0x3d20 <hih8120_getHumidityPercent_x10>
    387e:	90 93 7e 17 	sts	0x177E, r25	; 0x80177e <humidity+0x1>
    3882:	80 93 7d 17 	sts	0x177D, r24	; 0x80177d <humidity>
	temperature = hih8120_getTemperature_x10();
    3886:	72 d2       	rcall	.+1252   	; 0x3d6c <hih8120_getTemperature_x10>
    3888:	90 93 7c 17 	sts	0x177C, r25	; 0x80177c <temperature+0x1>
    388c:	80 93 7b 17 	sts	0x177B, r24	; 0x80177b <temperature>
    3890:	08 95       	ret

00003892 <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(void *pvParameters){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3892:	cc 24       	eor	r12, r12
    3894:	ca 94       	dec	r12
    3896:	dc 2c       	mov	r13, r12
    3898:	76 01       	movw	r14, r12
    389a:	01 e0       	ldi	r16, 0x01	; 1
    389c:	21 e0       	ldi	r18, 0x01	; 1
    389e:	44 e0       	ldi	r20, 0x04	; 4
    38a0:	50 e0       	ldi	r21, 0x00	; 0
    38a2:	60 e0       	ldi	r22, 0x00	; 0
    38a4:	70 e0       	ldi	r23, 0x00	; 0
    38a6:	80 91 c6 18 	lds	r24, 0x18C6	; 0x8018c6 <measureEventGroup>
    38aa:	90 91 c7 18 	lds	r25, 0x18C7	; 0x8018c7 <measureEventGroup+0x1>
    38ae:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    38b2:	62 ff       	sbrs	r22, 2
    38b4:	ee cf       	rjmp	.-36     	; 0x3892 <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();			
    38b6:	c8 df       	rcall	.-112    	; 0x3848 <measure_Temp_Hum>
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    38b8:	48 e0       	ldi	r20, 0x08	; 8
    38ba:	50 e0       	ldi	r21, 0x00	; 0
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	70 e0       	ldi	r23, 0x00	; 0
    38c0:	80 91 c4 18 	lds	r24, 0x18C4	; 0x8018c4 <dataReadyEventGroup>
    38c4:	90 91 c5 18 	lds	r25, 0x18C5	; 0x8018c5 <dataReadyEventGroup+0x1>
    38c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <xEventGroupSetBits>
    38cc:	e2 cf       	rjmp	.-60     	; 0x3892 <Temp_Hum_Main_Task>

000038ce <TempHumSensor_getTemp>:
	temperature = hih8120_getTemperature_x10();
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    38ce:	80 91 7b 17 	lds	r24, 0x177B	; 0x80177b <temperature>
    38d2:	90 91 7c 17 	lds	r25, 0x177C	; 0x80177c <temperature+0x1>
    38d6:	08 95       	ret

000038d8 <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    38d8:	80 91 7d 17 	lds	r24, 0x177D	; 0x80177d <humidity>
    38dc:	90 91 7e 17 	lds	r25, 0x177E	; 0x80177e <humidity+0x1>
    38e0:	08 95       	ret

000038e2 <initialize_event_groups>:
MessageBufferHandle_t uplinkMessageBufferHandle;
MessageBufferHandle_t downlinkMessageBufferHandle;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    38e2:	0e 94 be 02 	call	0x57c	; 0x57c <xEventGroupCreate>
    38e6:	90 93 c5 18 	sts	0x18C5, r25	; 0x8018c5 <dataReadyEventGroup+0x1>
    38ea:	80 93 c4 18 	sts	0x18C4, r24	; 0x8018c4 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    38ee:	0e 94 be 02 	call	0x57c	; 0x57c <xEventGroupCreate>
    38f2:	90 93 c7 18 	sts	0x18C7, r25	; 0x8018c7 <measureEventGroup+0x1>
    38f6:	80 93 c6 18 	sts	0x18C6, r24	; 0x8018c6 <measureEventGroup>
    38fa:	08 95       	ret

000038fc <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    38fc:	41 e0       	ldi	r20, 0x01	; 1
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	8c e2       	ldi	r24, 0x2C	; 44
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xStreamBufferGenericCreate>
    390a:	90 93 c9 18 	sts	0x18C9, r25	; 0x8018c9 <uplinkMessageBufferHandle+0x1>
    390e:	80 93 c8 18 	sts	0x18C8, r24	; 0x8018c8 <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL)
    3912:	89 2b       	or	r24, r25
    3914:	21 f4       	brne	.+8      	; 0x391e <initialize_message_buffers+0x22>
		printf("Failed to create uplink message buffer.\n");
    3916:	8f ee       	ldi	r24, 0xEF	; 239
    3918:	93 e0       	ldi	r25, 0x03	; 3
    391a:	0e 94 ce 33 	call	0x679c	; 0x679c <puts>
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    391e:	41 e0       	ldi	r20, 0x01	; 1
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	8c e2       	ldi	r24, 0x2C	; 44
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xStreamBufferGenericCreate>
    392c:	90 93 cb 18 	sts	0x18CB, r25	; 0x8018cb <downlinkMessageBufferHandle+0x1>
    3930:	80 93 ca 18 	sts	0x18CA, r24	; 0x8018ca <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL)
    3934:	89 2b       	or	r24, r25
    3936:	21 f4       	brne	.+8      	; 0x3940 <initialize_message_buffers+0x44>
		printf("Failed to create downlink message buffer.\n");
    3938:	87 e1       	ldi	r24, 0x17	; 23
    393a:	94 e0       	ldi	r25, 0x04	; 4
    393c:	0c 94 ce 33 	jmp	0x679c	; 0x679c <puts>
    3940:	08 95       	ret

00003942 <_lora_setup>:
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}

static void _lora_setup(void)
{
    3942:	0f 93       	push	r16
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	64 97       	sbiw	r28, 0x14	; 20
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	0e 94 02 29 	call	0x5204	; 0x5204 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3960:	7d d3       	rcall	.+1786   	; 0x405c <lora_driver_rn2483FactoryReset>
    3962:	f9 d5       	rcall	.+3058   	; 0x4556 <lora_driver_mapReturnCodeToText>
    3964:	9f 93       	push	r25
    3966:	8f 93       	push	r24
    3968:	81 e4       	ldi	r24, 0x41	; 65
    396a:	94 e0       	ldi	r25, 0x04	; 4
    396c:	9f 93       	push	r25
    396e:	8f 93       	push	r24
    3970:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3974:	f1 d4       	rcall	.+2530   	; 0x4358 <lora_driver_configureToEu868>
    3976:	ef d5       	rcall	.+3038   	; 0x4556 <lora_driver_mapReturnCodeToText>
    3978:	9f 93       	push	r25
    397a:	8f 93       	push	r24
    397c:	84 e5       	ldi	r24, 0x54	; 84
    397e:	94 e0       	ldi	r25, 0x04	; 4
    3980:	9f 93       	push	r25
    3982:	8f 93       	push	r24
    3984:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    3988:	8e 01       	movw	r16, r28
    398a:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    398c:	1f 4f       	sbci	r17, 0xFF	; 255
    398e:	c8 01       	movw	r24, r16
    3990:	77 d3       	rcall	.+1774   	; 0x4080 <lora_driver_getRn2483Hweui>
    3992:	e1 d5       	rcall	.+3010   	; 0x4556 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3994:	1f 93       	push	r17
    3996:	0f 93       	push	r16
    3998:	9f 93       	push	r25
    399a:	8f 93       	push	r24
    399c:	8d e6       	ldi	r24, 0x6D	; 109
    399e:	94 e0       	ldi	r25, 0x04	; 4
    39a0:	9f 93       	push	r25
    39a2:	8f 93       	push	r24
    39a4:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    39a8:	c8 01       	movw	r24, r16
    39aa:	86 d3       	rcall	.+1804   	; 0x40b8 <lora_driver_setDeviceIdentifier>
    39ac:	d4 d5       	rcall	.+2984   	; 0x4556 <lora_driver_mapReturnCodeToText>
    39ae:	9f 93       	push	r25
    39b0:	8f 93       	push	r24
    39b2:	1f 93       	push	r17
    39b4:	0f 93       	push	r16
    39b6:	81 e8       	ldi	r24, 0x81	; 129
    39b8:	94 e0       	ldi	r25, 0x04	; 4
    39ba:	9f 93       	push	r25
    39bc:	8f 93       	push	r24
    39be:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    39c2:	a8 01       	movw	r20, r16
    39c4:	66 e9       	ldi	r22, 0x96	; 150
    39c6:	74 e0       	ldi	r23, 0x04	; 4
    39c8:	87 eb       	ldi	r24, 0xB7	; 183
    39ca:	94 e0       	ldi	r25, 0x04	; 4
    39cc:	a3 d5       	rcall	.+2886   	; 0x4514 <lora_driver_setOtaaIdentity>
    39ce:	c3 d5       	rcall	.+2950   	; 0x4556 <lora_driver_mapReturnCodeToText>
    39d0:	9f 93       	push	r25
    39d2:	8f 93       	push	r24
    39d4:	1f 93       	push	r17
    39d6:	0f 93       	push	r16
    39d8:	86 e9       	ldi	r24, 0x96	; 150
    39da:	94 e0       	ldi	r25, 0x04	; 4
    39dc:	9f 93       	push	r25
    39de:	8f 93       	push	r24
    39e0:	87 eb       	ldi	r24, 0xB7	; 183
    39e2:	94 e0       	ldi	r25, 0x04	; 4
    39e4:	9f 93       	push	r25
    39e6:	8f 93       	push	r24
    39e8:	88 ec       	ldi	r24, 0xC8	; 200
    39ea:	94 e0       	ldi	r25, 0x04	; 4
    39ec:	9f 93       	push	r25
    39ee:	8f 93       	push	r24
    39f0:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    39f4:	94 d3       	rcall	.+1832   	; 0x411e <lora_driver_saveMac>
    39f6:	af d5       	rcall	.+2910   	; 0x4556 <lora_driver_mapReturnCodeToText>
    39f8:	9f 93       	push	r25
    39fa:	8f 93       	push	r24
    39fc:	8e ef       	ldi	r24, 0xFE	; 254
    39fe:	94 e0       	ldi	r25, 0x04	; 4
    3a00:	9f 93       	push	r25
    3a02:	8f 93       	push	r24
    3a04:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	7e d4       	rcall	.+2300   	; 0x4312 <lora_driver_setAdaptiveDataRate>
    3a16:	9f d5       	rcall	.+2878   	; 0x4556 <lora_driver_mapReturnCodeToText>
    3a18:	9f 93       	push	r25
    3a1a:	8f 93       	push	r24
    3a1c:	8d e0       	ldi	r24, 0x0D	; 13
    3a1e:	95 e0       	ldi	r25, 0x05	; 5
    3a20:	9f 93       	push	r25
    3a22:	8f 93       	push	r24
    3a24:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3a28:	84 ef       	ldi	r24, 0xF4	; 244
    3a2a:	91 e0       	ldi	r25, 0x01	; 1
    3a2c:	7d d4       	rcall	.+2298   	; 0x4328 <lora_driver_setReceiveDelay>
    3a2e:	93 d5       	rcall	.+2854   	; 0x4556 <lora_driver_mapReturnCodeToText>
    3a30:	9f 93       	push	r25
    3a32:	8f 93       	push	r24
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	8f 93       	push	r24
    3a38:	84 ef       	ldi	r24, 0xF4	; 244
    3a3a:	8f 93       	push	r24
    3a3c:	8e e2       	ldi	r24, 0x2E	; 46
    3a3e:	95 e0       	ldi	r25, 0x05	; 5
    3a40:	9f 93       	push	r25
    3a42:	8f 93       	push	r24
    3a44:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    3a48:	0f b6       	in	r0, 0x3f	; 63
    3a4a:	f8 94       	cli
    3a4c:	de bf       	out	0x3e, r29	; 62
    3a4e:	0f be       	out	0x3f, r0	; 63
    3a50:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3a52:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	69 d3       	rcall	.+1746   	; 0x412a <lora_driver_join>
    3a58:	08 2f       	mov	r16, r24
    3a5a:	7d d5       	rcall	.+2810   	; 0x4556 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3a5c:	9f 93       	push	r25
    3a5e:	8f 93       	push	r24
    3a60:	1f 92       	push	r1
    3a62:	1f 93       	push	r17
    3a64:	8e e4       	ldi	r24, 0x4E	; 78
    3a66:	95 e0       	ldi	r25, 0x05	; 5
    3a68:	9f 93       	push	r25
    3a6a:	8f 93       	push	r24
    3a6c:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3a74:	0f 90       	pop	r0
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	08 30       	cpi	r16, 0x08	; 8
    3a7e:	59 f0       	breq	.+22     	; 0x3a96 <_lora_setup+0x154>
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	0e 94 66 29 	call	0x52cc	; 0x52cc <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3a86:	66 e3       	ldi	r22, 0x36	; 54
    3a88:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	0e 94 ed 11 	call	0x23da	; 0x23da <vTaskDelay>
    3a92:	11 50       	subi	r17, 0x01	; 1
    3a94:	f9 f6       	brne	.-66     	; 0x3a54 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3a96:	08 30       	cpi	r16, 0x08	; 8
    3a98:	21 f4       	brne	.+8      	; 0x3aa2 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	0e 94 48 29 	call	0x5290	; 0x5290 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3aa0:	09 c0       	rjmp	.+18     	; 0x3ab4 <_lora_setup+0x172>
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3aa4:	0e 94 57 29 	call	0x52ae	; 0x52ae <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	0e 94 25 29 	call	0x524a	; 0x524a <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3aae:	0e 94 26 06 	call	0xc4c	; 0xc4c <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3ab2:	fd cf       	rjmp	.-6      	; 0x3aae <_lora_setup+0x16c>
    3ab4:	64 96       	adiw	r28, 0x14	; 20
    3ab6:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3ab8:	f8 94       	cli
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	cd bf       	out	0x3d, r28	; 61
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	08 95       	ret

00003aca <lora_uplink_handler_task>:
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	b9 d2       	rcall	.+1394   	; 0x4040 <lora_driver_resetRn2483>

void lora_uplink_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    3ace:	62 e0       	ldi	r22, 0x02	; 2
    3ad0:	70 e0       	ldi	r23, 0x00	; 0
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	0e 94 ed 11 	call	0x23da	; 0x23da <vTaskDelay>
	lora_driver_resetRn2483(0);
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	b1 d2       	rcall	.+1378   	; 0x4040 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3ade:	66 e9       	ldi	r22, 0x96	; 150
    3ae0:	70 e0       	ldi	r23, 0x00	; 0
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	0e 94 ed 11 	call	0x23da	; 0x23da <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3aea:	63 d2       	rcall	.+1222   	; 0x3fb2 <lora_driver_flushBuffers>

	_lora_setup();
    3aec:	2a df       	rcall	.-428    	; 0x3942 <_lora_setup>
    3aee:	0f ef       	ldi	r16, 0xFF	; 255
		uint16_t hum = 0;
		uint16_t co2 = 0;
		uint8_t status = 0;
		uint8_t xReceivedBytes = 0;
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    3af0:	1f ef       	ldi	r17, 0xFF	; 255
    3af2:	98 01       	movw	r18, r16
    3af4:	46 e1       	ldi	r20, 0x16	; 22
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	6f e7       	ldi	r22, 0x7F	; 127
    3afa:	77 e1       	ldi	r23, 0x17	; 23
    3afc:	80 91 c8 18 	lds	r24, 0x18C8	; 0x8018c8 <uplinkMessageBufferHandle>
    3b00:	90 91 c9 18 	lds	r25, 0x18C9	; 0x8018c9 <uplinkMessageBufferHandle+0x1>
    3b04:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <xStreamBufferReceive>
    3b08:	88 23       	and	r24, r24
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    3b0a:	89 f3       	breq	.-30     	; 0x3aee <lora_uplink_handler_task+0x24>
    3b0c:	ef e7       	ldi	r30, 0x7F	; 127
			// 				printf("Number of bytes read from the message buffer: %d\n", xReceivedBytes);
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    3b0e:	f7 e1       	ldi	r31, 0x17	; 23
    3b10:	82 81       	ldd	r24, Z+2	; 0x02
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	98 2f       	mov	r25, r24
    3b16:	88 27       	eor	r24, r24
    3b18:	23 81       	ldd	r18, Z+3	; 0x03
    3b1a:	82 2b       	or	r24, r18
    3b1c:	04 81       	ldd	r16, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    3b1e:	10 e0       	ldi	r17, 0x00	; 0
    3b20:	10 2f       	mov	r17, r16
    3b22:	00 27       	eor	r16, r16
    3b24:	25 81       	ldd	r18, Z+5	; 0x05
    3b26:	02 2b       	or	r16, r18
    3b28:	c6 81       	ldd	r28, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    3b2a:	d0 e0       	ldi	r29, 0x00	; 0
    3b2c:	dc 2f       	mov	r29, r28
    3b2e:	cc 27       	eor	r28, r28
    3b30:	27 81       	ldd	r18, Z+7	; 0x07
    3b32:	c2 2b       	or	r28, r18
    3b34:	f0 84       	ldd	r15, Z+8	; 0x08
			status = _uplink_payload.bytes[6];
    3b36:	9f 93       	push	r25
			
			printf("Temperature sent: %d\n", tem);
    3b38:	8f 93       	push	r24
    3b3a:	8e e6       	ldi	r24, 0x6E	; 110
    3b3c:	95 e0       	ldi	r25, 0x05	; 5
    3b3e:	9f 93       	push	r25
    3b40:	8f 93       	push	r24
    3b42:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    3b46:	1f 93       	push	r17
			printf("Humidity sent: %d\n", hum);
    3b48:	0f 93       	push	r16
    3b4a:	84 e8       	ldi	r24, 0x84	; 132
    3b4c:	95 e0       	ldi	r25, 0x05	; 5
    3b4e:	9f 93       	push	r25
    3b50:	8f 93       	push	r24
    3b52:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    3b56:	df 93       	push	r29
			printf("CO2 sent: %d\n", co2);
    3b58:	cf 93       	push	r28
    3b5a:	87 e9       	ldi	r24, 0x97	; 151
    3b5c:	95 e0       	ldi	r25, 0x05	; 5
    3b5e:	9f 93       	push	r25
    3b60:	8f 93       	push	r24
    3b62:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    3b66:	1f 92       	push	r1
			printf("Status sent: %d\n", status);
    3b68:	ff 92       	push	r15
    3b6a:	85 ea       	ldi	r24, 0xA5	; 165
    3b6c:	95 e0       	ldi	r25, 0x05	; 5
    3b6e:	9f 93       	push	r25
    3b70:	8f 93       	push	r24
    3b72:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    3b76:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3b78:	0e 94 78 29 	call	0x52f0	; 0x52f0 <status_leds_shortPuls>
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3b7c:	6f e7       	ldi	r22, 0x7F	; 127
    3b7e:	77 e1       	ldi	r23, 0x17	; 23
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	fc d2       	rcall	.+1528   	; 0x417c <lora_driver_sendUploadMessage>
    3b84:	e8 d4       	rcall	.+2512   	; 0x4556 <lora_driver_mapReturnCodeToText>
    3b86:	9f 93       	push	r25
    3b88:	8f 93       	push	r24
    3b8a:	86 eb       	ldi	r24, 0xB6	; 182
    3b8c:	95 e0       	ldi	r25, 0x05	; 5
    3b8e:	9f 93       	push	r25
    3b90:	8f 93       	push	r24
    3b92:	0e 94 ba 33 	call	0x6774	; 0x6774 <printf>
    3b96:	8d b7       	in	r24, 0x3d	; 61
    3b98:	9e b7       	in	r25, 0x3e	; 62
    3b9a:	44 96       	adiw	r24, 0x14	; 20
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	9e bf       	out	0x3e, r25	; 62
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	8d bf       	out	0x3d, r24	; 61
    3ba6:	a3 cf       	rjmp	.-186    	; 0x3aee <lora_uplink_handler_task+0x24>

00003ba8 <create_lora_uplink_handler_task>:
    3ba8:	ef 92       	push	r14
void lora_uplink_handler_task(void *pvParameters);

static lora_driver_payload_t _uplink_payload;
MessageBufferHandle_t uplinkMessageBufferHandle;

void create_lora_uplink_handler_task(UBaseType_t priority){
    3baa:	ff 92       	push	r15
    3bac:	0f 93       	push	r16
	xTaskCreate(
    3bae:	e1 2c       	mov	r14, r1
    3bb0:	f1 2c       	mov	r15, r1
    3bb2:	08 2f       	mov	r16, r24
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	48 e8       	ldi	r20, 0x88	; 136
    3bba:	51 e0       	ldi	r21, 0x01	; 1
    3bbc:	6b ec       	ldi	r22, 0xCB	; 203
    3bbe:	75 e0       	ldi	r23, 0x05	; 5
    3bc0:	85 e6       	ldi	r24, 0x65	; 101
    3bc2:	9d e1       	ldi	r25, 0x1D	; 29
    3bc4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskCreate>
	,  "LRHandUplink"  
	,  configMINIMAL_STACK_SIZE+200  
	,  NULL
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}
    3bc8:	0f 91       	pop	r16
    3bca:	ff 90       	pop	r15
    3bcc:	ef 90       	pop	r14
    3bce:	08 95       	ret

00003bd0 <create_all_tasks>:
#include "DownlinkHandler.h"

MessageBufferHandle_t downlinkMessageBufferHandle;

void create_all_tasks(){
	create_lora_uplink_handler_task(4);
    3bd0:	84 e0       	ldi	r24, 0x04	; 4
    3bd2:	ea df       	rcall	.-44     	; 0x3ba8 <create_lora_uplink_handler_task>
	create_lora_downlink_handler_task(4);
    3bd4:	84 e0       	ldi	r24, 0x04	; 4
    3bd6:	0e 94 32 02 	call	0x464	; 0x464 <create_lora_downlink_handler_task>
	create_main_application_task(3);
    3bda:	83 e0       	ldi	r24, 0x03	; 3
    3bdc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <create_main_application_task>
	create_CO2_sensor_task(2);
    3be0:	82 e0       	ldi	r24, 0x02	; 2
    3be2:	fc dd       	rcall	.-1032   	; 0x37dc <create_CO2_sensor_task>
	create_TempHum_sensor_task(2);
    3be4:	82 e0       	ldi	r24, 0x02	; 2
    3be6:	1b de       	rcall	.-970    	; 0x381e <create_TempHum_sensor_task>
    3be8:	82 e0       	ldi	r24, 0x02	; 2
	create_fan_controller_task(2);
    3bea:	0c 94 86 02 	jmp	0x50c	; 0x50c <create_fan_controller_task>
    3bee:	08 95       	ret

00003bf0 <initializeSystem>:
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3bf2:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3bf6:	85 e0       	ldi	r24, 0x05	; 5
    3bf8:	0e 94 b4 28 	call	0x5168	; 0x5168 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, downlinkMessageBufferHandle);
    3bfc:	60 91 ca 18 	lds	r22, 0x18CA	; 0x8018ca <downlinkMessageBufferHandle>
    3c00:	70 91 cb 18 	lds	r23, 0x18CB	; 0x8018cb <downlinkMessageBufferHandle+0x1>
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	dc d1       	rcall	.+952    	; 0x3fc0 <lora_driver_initialise>
	initialize_event_groups();
    3c08:	6c de       	rcall	.-808    	; 0x38e2 <initialize_event_groups>
	initialize_message_buffers();
    3c0a:	78 de       	rcall	.-784    	; 0x38fc <initialize_message_buffers>
    3c0c:	e1 cf       	rjmp	.-62     	; 0x3bd0 <create_all_tasks>
	create_all_tasks();
    3c0e:	08 95       	ret

00003c10 <main>:
    3c10:	ef df       	rcall	.-34     	; 0x3bf0 <initializeSystem>
    3c12:	88 ed       	ldi	r24, 0xD8	; 216

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    3c14:	95 e0       	ldi	r25, 0x05	; 5
    3c16:	0e 94 ce 33 	call	0x679c	; 0x679c <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3c1a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <vTaskStartScheduler>
    3c1e:	ff cf       	rjmp	.-2      	; 0x3c1e <main+0xe>

00003c20 <_hihTwiCallback>:
    3c20:	65 30       	cpi	r22, 0x05	; 5
    3c22:	f1 f4       	brne	.+60     	; 0x3c60 <_hihTwiCallback+0x40>
    3c24:	fa 01       	movw	r30, r20
    3c26:	80 81       	ld	r24, Z
    3c28:	8f 73       	andi	r24, 0x3F	; 63
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	98 2f       	mov	r25, r24
    3c2e:	88 27       	eor	r24, r24
    3c30:	21 81       	ldd	r18, Z+1	; 0x01
    3c32:	82 2b       	or	r24, r18
    3c34:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3c38:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3c3c:	82 81       	ldd	r24, Z+2	; 0x02
    3c3e:	f0 e4       	ldi	r31, 0x40	; 64
    3c40:	8f 9f       	mul	r24, r31
    3c42:	c0 01       	movw	r24, r0
    3c44:	11 24       	eor	r1, r1
    3c46:	fa 01       	movw	r30, r20
    3c48:	23 81       	ldd	r18, Z+3	; 0x03
    3c4a:	26 95       	lsr	r18
    3c4c:	26 95       	lsr	r18
    3c4e:	82 2b       	or	r24, r18
    3c50:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3c54:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	80 93 95 17 	sts	0x1795, r24	; 0x801795 <_measuringIsReady>
    3c5e:	08 95       	ret
    3c60:	64 30       	cpi	r22, 0x04	; 4
    3c62:	51 f0       	breq	.+20     	; 0x3c78 <_hihTwiCallback+0x58>
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e4       	ldi	r25, 0x40	; 64
    3c68:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3c6c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3c70:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3c74:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3c78:	08 95       	ret

00003c7a <hih8120_initialise>:
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	00 e1       	ldi	r16, 0x10	; 16
    3c80:	1e e1       	ldi	r17, 0x1E	; 30
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	34 e2       	ldi	r19, 0x24	; 36
    3c86:	44 ef       	ldi	r20, 0xF4	; 244
    3c88:	50 e0       	ldi	r21, 0x00	; 0
    3c8a:	60 e0       	ldi	r22, 0x00	; 0
    3c8c:	87 e2       	ldi	r24, 0x27	; 39
    3c8e:	0e 94 9a 29 	call	0x5334	; 0x5334 <twiCreate>
    3c92:	90 93 97 17 	sts	0x1797, r25	; 0x801797 <_hih8120Handler+0x1>
    3c96:	80 93 96 17 	sts	0x1796, r24	; 0x801796 <_hih8120Handler>
    3c9a:	21 e0       	ldi	r18, 0x01	; 1
    3c9c:	89 2b       	or	r24, r25
    3c9e:	09 f0       	breq	.+2      	; 0x3ca2 <hih8120_initialise+0x28>
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	82 2f       	mov	r24, r18
    3ca4:	1f 91       	pop	r17
    3ca6:	0f 91       	pop	r16
    3ca8:	08 95       	ret

00003caa <hih8120_wakeup>:
    3caa:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <_hih8120Handler>
    3cae:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <_hih8120Handler+0x1>
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	59 f0       	breq	.+22     	; 0x3ccc <hih8120_wakeup+0x22>
    3cb6:	40 e0       	ldi	r20, 0x00	; 0
    3cb8:	60 e0       	ldi	r22, 0x00	; 0
    3cba:	70 e0       	ldi	r23, 0x00	; 0
    3cbc:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <twiTransmit>
    3cc0:	84 30       	cpi	r24, 0x04	; 4
    3cc2:	31 f4       	brne	.+12     	; 0x3cd0 <hih8120_wakeup+0x26>
    3cc4:	10 92 95 17 	sts	0x1795, r1	; 0x801795 <_measuringIsReady>
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	08 95       	ret
    3ccc:	82 e0       	ldi	r24, 0x02	; 2
    3cce:	08 95       	ret
    3cd0:	83 e0       	ldi	r24, 0x03	; 3
    3cd2:	08 95       	ret

00003cd4 <hih8120_measure>:
    3cd4:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <_hih8120Handler>
    3cd8:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <_hih8120Handler+0x1>
    3cdc:	00 97       	sbiw	r24, 0x00	; 0
    3cde:	39 f0       	breq	.+14     	; 0x3cee <hih8120_measure+0x1a>
    3ce0:	64 e0       	ldi	r22, 0x04	; 4
    3ce2:	0e 94 37 2a 	call	0x546e	; 0x546e <twiReceive>
    3ce6:	85 30       	cpi	r24, 0x05	; 5
    3ce8:	21 f0       	breq	.+8      	; 0x3cf2 <hih8120_measure+0x1e>
    3cea:	83 e0       	ldi	r24, 0x03	; 3
    3cec:	08 95       	ret
    3cee:	82 e0       	ldi	r24, 0x02	; 2
    3cf0:	08 95       	ret
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	08 95       	ret

00003cf6 <hih8120_getHumidity>:
    3cf6:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3cfa:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__floatunsisf>
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	48 ec       	ldi	r20, 0xC8	; 200
    3d0c:	52 e4       	ldi	r21, 0x42	; 66
    3d0e:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__mulsf3>
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	38 ef       	ldi	r19, 0xF8	; 248
    3d16:	4f e7       	ldi	r20, 0x7F	; 127
    3d18:	56 e4       	ldi	r21, 0x46	; 70
    3d1a:	0c 94 31 2f 	jmp	0x5e62	; 0x5e62 <__divsf3>
    3d1e:	08 95       	ret

00003d20 <hih8120_getHumidityPercent_x10>:
    3d20:	ea df       	rcall	.-44     	; 0x3cf6 <hih8120_getHumidity>
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	40 e2       	ldi	r20, 0x20	; 32
    3d28:	51 e4       	ldi	r21, 0x41	; 65
    3d2a:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__mulsf3>
    3d2e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__fixunssfsi>
    3d32:	cb 01       	movw	r24, r22
    3d34:	08 95       	ret

00003d36 <hih8120_getTemperature>:
    3d36:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3d3a:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__floatunsisf>
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	45 e2       	ldi	r20, 0x25	; 37
    3d4c:	53 e4       	ldi	r21, 0x43	; 67
    3d4e:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__mulsf3>
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	38 ef       	ldi	r19, 0xF8	; 248
    3d56:	4f e7       	ldi	r20, 0x7F	; 127
    3d58:	56 e4       	ldi	r21, 0x46	; 70
    3d5a:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <__divsf3>
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e2       	ldi	r20, 0x20	; 32
    3d64:	52 e4       	ldi	r21, 0x42	; 66
    3d66:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <__subsf3>
    3d6a:	08 95       	ret

00003d6c <hih8120_getTemperature_x10>:
    3d6c:	e4 df       	rcall	.-56     	; 0x3d36 <hih8120_getTemperature>
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	40 e2       	ldi	r20, 0x20	; 32
    3d74:	51 e4       	ldi	r21, 0x41	; 65
    3d76:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__mulsf3>
    3d7a:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <__fixsfsi>
    3d7e:	cb 01       	movw	r24, r22
    3d80:	08 95       	ret

00003d82 <_serialCallBack>:
    3d82:	0f 93       	push	r16
    3d84:	1f 93       	push	r17
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	1f 92       	push	r1
    3d8c:	1f 92       	push	r1
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	8c 01       	movw	r16, r24
    3d94:	19 82       	std	Y+1, r1	; 0x01
    3d96:	2d c0       	rjmp	.+90     	; 0x3df2 <_serialCallBack+0x70>
    3d98:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <rec_buf_inp.2878>
    3d9c:	ec 32       	cpi	r30, 0x2C	; 44
    3d9e:	50 f4       	brcc	.+20     	; 0x3db4 <_serialCallBack+0x32>
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	8e 0f       	add	r24, r30
    3da4:	80 93 cf 17 	sts	0x17CF, r24	; 0x8017cf <rec_buf_inp.2878>
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	ef 5f       	subi	r30, 0xFF	; 255
    3dac:	f7 4e       	sbci	r31, 0xE7	; 231
    3dae:	8a 81       	ldd	r24, Y+2	; 0x02
    3db0:	80 83       	st	Z, r24
    3db2:	02 c0       	rjmp	.+4      	; 0x3db8 <_serialCallBack+0x36>
    3db4:	10 92 cf 17 	sts	0x17CF, r1	; 0x8017cf <rec_buf_inp.2878>
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dba:	8a 30       	cpi	r24, 0x0A	; 10
    3dbc:	d1 f4       	brne	.+52     	; 0x3df2 <_serialCallBack+0x70>
    3dbe:	40 91 cf 17 	lds	r20, 0x17CF	; 0x8017cf <rec_buf_inp.2878>
    3dc2:	50 e0       	ldi	r21, 0x00	; 0
    3dc4:	fa 01       	movw	r30, r20
    3dc6:	e1 50       	subi	r30, 0x01	; 1
    3dc8:	f8 4e       	sbci	r31, 0xE8	; 232
    3dca:	10 82       	st	Z, r1
    3dcc:	41 50       	subi	r20, 0x01	; 1
    3dce:	51 09       	sbc	r21, r1
    3dd0:	9e 01       	movw	r18, r28
    3dd2:	2f 5f       	subi	r18, 0xFF	; 255
    3dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd6:	61 e0       	ldi	r22, 0x01	; 1
    3dd8:	78 e1       	ldi	r23, 0x18	; 24
    3dda:	80 91 d2 17 	lds	r24, 0x17D2	; 0x8017d2 <_serialReplyBufferHandle>
    3dde:	90 91 d3 17 	lds	r25, 0x17D3	; 0x8017d3 <_serialReplyBufferHandle+0x1>
    3de2:	0e 94 0f 0c 	call	0x181e	; 0x181e <xStreamBufferSendFromISR>
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	81 11       	cpse	r24, r1
    3dea:	0e 94 26 06 	call	0xc4c	; 0xc4c <vPortYield>
    3dee:	10 92 cf 17 	sts	0x17CF, r1	; 0x8017cf <rec_buf_inp.2878>
    3df2:	be 01       	movw	r22, r28
    3df4:	6e 5f       	subi	r22, 0xFE	; 254
    3df6:	7f 4f       	sbci	r23, 0xFF	; 255
    3df8:	c8 01       	movw	r24, r16
    3dfa:	19 d6       	rcall	.+3122   	; 0x4a2e <serial_getByte>
    3dfc:	88 23       	and	r24, r24
    3dfe:	61 f2       	breq	.-104    	; 0x3d98 <_serialCallBack+0x16>
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
    3e04:	df 91       	pop	r29
    3e06:	cf 91       	pop	r28
    3e08:	1f 91       	pop	r17
    3e0a:	0f 91       	pop	r16
    3e0c:	08 95       	ret

00003e0e <_uploadMessage>:
    3e0e:	0f 93       	push	r16
    3e10:	1f 93       	push	r17
    3e12:	cf 93       	push	r28
    3e14:	df 93       	push	r29
    3e16:	8c 01       	movw	r16, r24
    3e18:	eb 01       	movw	r28, r22
    3e1a:	80 91 d2 17 	lds	r24, 0x17D2	; 0x8017d2 <_serialReplyBufferHandle>
    3e1e:	90 91 d3 17 	lds	r25, 0x17D3	; 0x8017d3 <_serialReplyBufferHandle+0x1>
    3e22:	0e 94 1a 0b 	call	0x1634	; 0x1634 <xStreamBufferReset>
    3e26:	b8 01       	movw	r22, r16
    3e28:	88 e9       	ldi	r24, 0x98	; 152
    3e2a:	97 e1       	ldi	r25, 0x17	; 23
    3e2c:	0e 94 54 33 	call	0x66a8	; 0x66a8 <strcpy>
    3e30:	20 97       	sbiw	r28, 0x00	; 0
    3e32:	79 f0       	breq	.+30     	; 0x3e52 <_uploadMessage+0x44>
    3e34:	e8 e9       	ldi	r30, 0x98	; 152
    3e36:	f7 e1       	ldi	r31, 0x17	; 23
    3e38:	01 90       	ld	r0, Z+
    3e3a:	00 20       	and	r0, r0
    3e3c:	e9 f7       	brne	.-6      	; 0x3e38 <_uploadMessage+0x2a>
    3e3e:	31 97       	sbiw	r30, 0x01	; 1
    3e40:	80 e2       	ldi	r24, 0x20	; 32
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	91 83       	std	Z+1, r25	; 0x01
    3e46:	80 83       	st	Z, r24
    3e48:	be 01       	movw	r22, r28
    3e4a:	88 e9       	ldi	r24, 0x98	; 152
    3e4c:	97 e1       	ldi	r25, 0x17	; 23
    3e4e:	0e 94 49 33 	call	0x6692	; 0x6692 <strcat>
    3e52:	e8 e9       	ldi	r30, 0x98	; 152
    3e54:	f7 e1       	ldi	r31, 0x17	; 23
    3e56:	df 01       	movw	r26, r30
    3e58:	0d 90       	ld	r0, X+
    3e5a:	00 20       	and	r0, r0
    3e5c:	e9 f7       	brne	.-6      	; 0x3e58 <_uploadMessage+0x4a>
    3e5e:	11 97       	sbiw	r26, 0x01	; 1
    3e60:	8d e0       	ldi	r24, 0x0D	; 13
    3e62:	9a e0       	ldi	r25, 0x0A	; 10
    3e64:	11 96       	adiw	r26, 0x01	; 1
    3e66:	9c 93       	st	X, r25
    3e68:	8e 93       	st	-X, r24
    3e6a:	12 96       	adiw	r26, 0x02	; 2
    3e6c:	1c 92       	st	X, r1
    3e6e:	01 90       	ld	r0, Z+
    3e70:	00 20       	and	r0, r0
    3e72:	e9 f7       	brne	.-6      	; 0x3e6e <_uploadMessage+0x60>
    3e74:	31 97       	sbiw	r30, 0x01	; 1
    3e76:	e8 59       	subi	r30, 0x98	; 152
    3e78:	f7 41       	sbci	r31, 0x17	; 23
    3e7a:	ae 2f       	mov	r26, r30
    3e7c:	88 e9       	ldi	r24, 0x98	; 152
    3e7e:	97 e1       	ldi	r25, 0x17	; 23
    3e80:	ac 01       	movw	r20, r24
    3e82:	6a 2f       	mov	r22, r26
    3e84:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <_rn2483_serial>
    3e88:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <_rn2483_serial+0x1>
    3e8c:	7b d5       	rcall	.+2806   	; 0x4984 <serial_sendBytes>
    3e8e:	81 11       	cpse	r24, r1
    3e90:	11 c0       	rjmp	.+34     	; 0x3eb4 <_uploadMessage+0xa6>
    3e92:	08 e2       	ldi	r16, 0x28	; 40
    3e94:	15 e0       	ldi	r17, 0x05	; 5
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	4d e2       	ldi	r20, 0x2D	; 45
    3e9c:	50 e0       	ldi	r21, 0x00	; 0
    3e9e:	6b e5       	ldi	r22, 0x5B	; 91
    3ea0:	78 e1       	ldi	r23, 0x18	; 24
    3ea2:	80 91 d2 17 	lds	r24, 0x17D2	; 0x8017d2 <_serialReplyBufferHandle>
    3ea6:	90 91 d3 17 	lds	r25, 0x17D3	; 0x8017d3 <_serialReplyBufferHandle+0x1>
    3eaa:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <xStreamBufferReceive>
    3eae:	8b e5       	ldi	r24, 0x5B	; 91
    3eb0:	98 e1       	ldi	r25, 0x18	; 24
    3eb2:	02 c0       	rjmp	.+4      	; 0x3eb8 <_uploadMessage+0xaa>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	1f 91       	pop	r17
    3ebe:	0f 91       	pop	r16
    3ec0:	08 95       	ret

00003ec2 <_reply2ReturnCode>:
    3ec2:	2f 92       	push	r2
    3ec4:	3f 92       	push	r3
    3ec6:	4f 92       	push	r4
    3ec8:	5f 92       	push	r5
    3eca:	6f 92       	push	r6
    3ecc:	7f 92       	push	r7
    3ece:	8f 92       	push	r8
    3ed0:	9f 92       	push	r9
    3ed2:	af 92       	push	r10
    3ed4:	bf 92       	push	r11
    3ed6:	cf 92       	push	r12
    3ed8:	df 92       	push	r13
    3eda:	ef 92       	push	r14
    3edc:	ff 92       	push	r15
    3ede:	0f 93       	push	r16
    3ee0:	1f 93       	push	r17
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	5c 01       	movw	r10, r24
    3ee8:	fc 01       	movw	r30, r24
    3eea:	01 90       	ld	r0, Z+
    3eec:	00 20       	and	r0, r0
    3eee:	e9 f7       	brne	.-6      	; 0x3eea <_reply2ReturnCode+0x28>
    3ef0:	31 97       	sbiw	r30, 0x01	; 1
    3ef2:	6f 01       	movw	r12, r30
    3ef4:	c8 1a       	sub	r12, r24
    3ef6:	d9 0a       	sbc	r13, r25
    3ef8:	5c 2c       	mov	r5, r12
    3efa:	0f 2e       	mov	r0, r31
    3efc:	f3 e8       	ldi	r31, 0x83	; 131
    3efe:	8f 2e       	mov	r8, r31
    3f00:	f8 e0       	ldi	r31, 0x08	; 8
    3f02:	9f 2e       	mov	r9, r31
    3f04:	f0 2d       	mov	r31, r0
    3f06:	e1 2c       	mov	r14, r1
    3f08:	f1 2c       	mov	r15, r1
    3f0a:	4c 2c       	mov	r4, r12
    3f0c:	37 01       	movw	r6, r14
    3f0e:	f4 01       	movw	r30, r8
    3f10:	01 81       	ldd	r16, Z+1	; 0x01
    3f12:	12 81       	ldd	r17, Z+2	; 0x02
    3f14:	e8 01       	movw	r28, r16
    3f16:	09 90       	ld	r0, Y+
    3f18:	00 20       	and	r0, r0
    3f1a:	e9 f7       	brne	.-6      	; 0x3f16 <_reply2ReturnCode+0x54>
    3f1c:	21 97       	sbiw	r28, 0x01	; 1
    3f1e:	c0 1b       	sub	r28, r16
    3f20:	d1 0b       	sbc	r29, r17
    3f22:	3c 2e       	mov	r3, r28
    3f24:	f9 e0       	ldi	r31, 0x09	; 9
    3f26:	cf 16       	cp	r12, r31
    3f28:	d1 04       	cpc	r13, r1
    3f2a:	58 f0       	brcs	.+22     	; 0x3f42 <_reply2ReturnCode+0x80>
    3f2c:	f4 01       	movw	r30, r8
    3f2e:	20 80       	ld	r2, Z
    3f30:	fe e0       	ldi	r31, 0x0E	; 14
    3f32:	2f 12       	cpse	r2, r31
    3f34:	06 c0       	rjmp	.+12     	; 0x3f42 <_reply2ReturnCode+0x80>
    3f36:	b8 01       	movw	r22, r16
    3f38:	c5 01       	movw	r24, r10
    3f3a:	0e 94 24 33 	call	0x6648	; 0x6648 <strcasestr>
    3f3e:	89 2b       	or	r24, r25
    3f40:	09 f5       	brne	.+66     	; 0x3f84 <_reply2ReturnCode+0xc2>
    3f42:	44 2d       	mov	r20, r4
    3f44:	35 14       	cp	r3, r5
    3f46:	08 f4       	brcc	.+2      	; 0x3f4a <_reply2ReturnCode+0x88>
    3f48:	4c 2f       	mov	r20, r28
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	b8 01       	movw	r22, r16
    3f4e:	c5 01       	movw	r24, r10
    3f50:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <strncasecmp>
    3f54:	89 2b       	or	r24, r25
    3f56:	49 f4       	brne	.+18     	; 0x3f6a <_reply2ReturnCode+0xa8>
    3f58:	f3 01       	movw	r30, r6
    3f5a:	ee 0f       	add	r30, r30
    3f5c:	ff 1f       	adc	r31, r31
    3f5e:	e6 0d       	add	r30, r6
    3f60:	f7 1d       	adc	r31, r7
    3f62:	ed 57       	subi	r30, 0x7D	; 125
    3f64:	f7 4f       	sbci	r31, 0xF7	; 247
    3f66:	20 80       	ld	r2, Z
    3f68:	0d c0       	rjmp	.+26     	; 0x3f84 <_reply2ReturnCode+0xc2>
    3f6a:	8f ef       	ldi	r24, 0xFF	; 255
    3f6c:	e8 1a       	sub	r14, r24
    3f6e:	f8 0a       	sbc	r15, r24
    3f70:	e3 e0       	ldi	r30, 0x03	; 3
    3f72:	8e 0e       	add	r8, r30
    3f74:	91 1c       	adc	r9, r1
    3f76:	f1 e1       	ldi	r31, 0x11	; 17
    3f78:	ef 16       	cp	r14, r31
    3f7a:	f1 04       	cpc	r15, r1
    3f7c:	39 f6       	brne	.-114    	; 0x3f0c <_reply2ReturnCode+0x4a>
    3f7e:	68 94       	set
    3f80:	22 24       	eor	r2, r2
    3f82:	24 f8       	bld	r2, 4
    3f84:	82 2d       	mov	r24, r2
    3f86:	df 91       	pop	r29
    3f88:	cf 91       	pop	r28
    3f8a:	1f 91       	pop	r17
    3f8c:	0f 91       	pop	r16
    3f8e:	ff 90       	pop	r15
    3f90:	ef 90       	pop	r14
    3f92:	df 90       	pop	r13
    3f94:	cf 90       	pop	r12
    3f96:	bf 90       	pop	r11
    3f98:	af 90       	pop	r10
    3f9a:	9f 90       	pop	r9
    3f9c:	8f 90       	pop	r8
    3f9e:	7f 90       	pop	r7
    3fa0:	6f 90       	pop	r6
    3fa2:	5f 90       	pop	r5
    3fa4:	4f 90       	pop	r4
    3fa6:	3f 90       	pop	r3
    3fa8:	2f 90       	pop	r2
    3faa:	08 95       	ret

00003fac <_uploadMessageRc>:
    3fac:	30 df       	rcall	.-416    	; 0x3e0e <_uploadMessage>
    3fae:	89 cf       	rjmp	.-238    	; 0x3ec2 <_reply2ReturnCode>
    3fb0:	08 95       	ret

00003fb2 <lora_driver_flushBuffers>:
    3fb2:	80 91 d2 17 	lds	r24, 0x17D2	; 0x8017d2 <_serialReplyBufferHandle>
    3fb6:	90 91 d3 17 	lds	r25, 0x17D3	; 0x8017d3 <_serialReplyBufferHandle+0x1>
    3fba:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <xStreamBufferReset>
    3fbe:	08 95       	ret

00003fc0 <lora_driver_initialise>:
    3fc0:	8f 92       	push	r8
    3fc2:	9f 92       	push	r9
    3fc4:	af 92       	push	r10
    3fc6:	cf 92       	push	r12
    3fc8:	ef 92       	push	r14
    3fca:	0f 93       	push	r16
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
    3fd0:	c8 2f       	mov	r28, r24
    3fd2:	8b 01       	movw	r16, r22
    3fd4:	41 e0       	ldi	r20, 0x01	; 1
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	88 ec       	ldi	r24, 0xC8	; 200
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xStreamBufferGenericCreate>
    3fe2:	90 93 d3 17 	sts	0x17D3, r25	; 0x8017d3 <_serialReplyBufferHandle+0x1>
    3fe6:	80 93 d2 17 	sts	0x17D2, r24	; 0x8017d2 <_serialReplyBufferHandle>
    3fea:	10 93 d1 17 	sts	0x17D1, r17	; 0x8017d1 <_downlinkMessageBuffer+0x1>
    3fee:	00 93 d0 17 	sts	0x17D0, r16	; 0x8017d0 <_downlinkMessageBuffer>
    3ff2:	0f 2e       	mov	r0, r31
    3ff4:	f1 ec       	ldi	r31, 0xC1	; 193
    3ff6:	8f 2e       	mov	r8, r31
    3ff8:	fe e1       	ldi	r31, 0x1E	; 30
    3ffa:	9f 2e       	mov	r9, r31
    3ffc:	f0 2d       	mov	r31, r0
    3ffe:	68 94       	set
    4000:	aa 24       	eor	r10, r10
    4002:	a6 f8       	bld	r10, 6
    4004:	68 94       	set
    4006:	cc 24       	eor	r12, r12
    4008:	c6 f8       	bld	r12, 6
    400a:	e1 2c       	mov	r14, r1
    400c:	00 e0       	ldi	r16, 0x00	; 0
    400e:	23 e0       	ldi	r18, 0x03	; 3
    4010:	40 e0       	ldi	r20, 0x00	; 0
    4012:	51 ee       	ldi	r21, 0xE1	; 225
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	8c 2f       	mov	r24, r28
    401a:	e3 d3       	rcall	.+1990   	; 0x47e2 <serial_create>
    401c:	90 93 d5 17 	sts	0x17D5, r25	; 0x8017d5 <_rn2483_serial+0x1>
    4020:	80 93 d4 17 	sts	0x17D4, r24	; 0x8017d4 <_rn2483_serial>
    4024:	e7 e0       	ldi	r30, 0x07	; 7
    4026:	f1 e0       	ldi	r31, 0x01	; 1
    4028:	80 81       	ld	r24, Z
    402a:	80 61       	ori	r24, 0x10	; 16
    402c:	80 83       	st	Z, r24
    402e:	cf 91       	pop	r28
    4030:	1f 91       	pop	r17
    4032:	0f 91       	pop	r16
    4034:	ef 90       	pop	r14
    4036:	cf 90       	pop	r12
    4038:	af 90       	pop	r10
    403a:	9f 90       	pop	r9
    403c:	8f 90       	pop	r8
    403e:	08 95       	ret

00004040 <lora_driver_resetRn2483>:
    4040:	88 23       	and	r24, r24
    4042:	31 f0       	breq	.+12     	; 0x4050 <lora_driver_resetRn2483+0x10>
    4044:	e8 e0       	ldi	r30, 0x08	; 8
    4046:	f1 e0       	ldi	r31, 0x01	; 1
    4048:	80 81       	ld	r24, Z
    404a:	8f 7e       	andi	r24, 0xEF	; 239
    404c:	80 83       	st	Z, r24
    404e:	08 95       	ret
    4050:	e8 e0       	ldi	r30, 0x08	; 8
    4052:	f1 e0       	ldi	r31, 0x01	; 1
    4054:	80 81       	ld	r24, Z
    4056:	80 61       	ori	r24, 0x10	; 16
    4058:	80 83       	st	Z, r24
    405a:	08 95       	ret

0000405c <lora_driver_rn2483FactoryReset>:
    405c:	60 e0       	ldi	r22, 0x00	; 0
    405e:	70 e0       	ldi	r23, 0x00	; 0
    4060:	89 e0       	ldi	r24, 0x09	; 9
    4062:	96 e0       	ldi	r25, 0x06	; 6
    4064:	d4 de       	rcall	.-600    	; 0x3e0e <_uploadMessage>
    4066:	eb e5       	ldi	r30, 0x5B	; 91
    4068:	f8 e1       	ldi	r31, 0x18	; 24
    406a:	01 90       	ld	r0, Z+
    406c:	00 20       	and	r0, r0
    406e:	e9 f7       	brne	.-6      	; 0x406a <lora_driver_rn2483FactoryReset+0xe>
    4070:	31 97       	sbiw	r30, 0x01	; 1
    4072:	eb 55       	subi	r30, 0x5B	; 91
    4074:	f8 41       	sbci	r31, 0x18	; 24
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	75 97       	sbiw	r30, 0x15	; 21
    407a:	08 f0       	brcs	.+2      	; 0x407e <lora_driver_rn2483FactoryReset+0x22>
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	08 95       	ret

00004080 <lora_driver_getRn2483Hweui>:
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	ec 01       	movw	r28, r24
    4086:	60 e0       	ldi	r22, 0x00	; 0
    4088:	70 e0       	ldi	r23, 0x00	; 0
    408a:	8a e1       	ldi	r24, 0x1A	; 26
    408c:	96 e0       	ldi	r25, 0x06	; 6
    408e:	bf de       	rcall	.-642    	; 0x3e0e <_uploadMessage>
    4090:	eb e5       	ldi	r30, 0x5B	; 91
    4092:	f8 e1       	ldi	r31, 0x18	; 24
    4094:	01 90       	ld	r0, Z+
    4096:	00 20       	and	r0, r0
    4098:	e9 f7       	brne	.-6      	; 0x4094 <lora_driver_getRn2483Hweui+0x14>
    409a:	ec 56       	subi	r30, 0x6C	; 108
    409c:	f8 41       	sbci	r31, 0x18	; 24
    409e:	39 f4       	brne	.+14     	; 0x40ae <lora_driver_getRn2483Hweui+0x2e>
    40a0:	6b e5       	ldi	r22, 0x5B	; 91
    40a2:	78 e1       	ldi	r23, 0x18	; 24
    40a4:	ce 01       	movw	r24, r28
    40a6:	0e 94 54 33 	call	0x66a8	; 0x66a8 <strcpy>
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	02 c0       	rjmp	.+4      	; 0x40b2 <lora_driver_getRn2483Hweui+0x32>
    40ae:	18 82       	st	Y, r1
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	08 95       	ret

000040b8 <lora_driver_setDeviceIdentifier>:
    40b8:	fc 01       	movw	r30, r24
    40ba:	01 90       	ld	r0, Z+
    40bc:	00 20       	and	r0, r0
    40be:	e9 f7       	brne	.-6      	; 0x40ba <lora_driver_setDeviceIdentifier+0x2>
    40c0:	9f 01       	movw	r18, r30
    40c2:	21 51       	subi	r18, 0x11	; 17
    40c4:	31 09       	sbc	r19, r1
    40c6:	28 17       	cp	r18, r24
    40c8:	39 07       	cpc	r19, r25
    40ca:	29 f4       	brne	.+10     	; 0x40d6 <lora_driver_setDeviceIdentifier+0x1e>
    40cc:	bc 01       	movw	r22, r24
    40ce:	88 e4       	ldi	r24, 0x48	; 72
    40d0:	96 e0       	ldi	r25, 0x06	; 6
    40d2:	6c cf       	rjmp	.-296    	; 0x3fac <_uploadMessageRc>
    40d4:	08 95       	ret
    40d6:	89 e0       	ldi	r24, 0x09	; 9
    40d8:	08 95       	ret

000040da <lora_driver_setApplicationIdentifier>:
    40da:	fc 01       	movw	r30, r24
    40dc:	01 90       	ld	r0, Z+
    40de:	00 20       	and	r0, r0
    40e0:	e9 f7       	brne	.-6      	; 0x40dc <lora_driver_setApplicationIdentifier+0x2>
    40e2:	9f 01       	movw	r18, r30
    40e4:	21 51       	subi	r18, 0x11	; 17
    40e6:	31 09       	sbc	r19, r1
    40e8:	28 17       	cp	r18, r24
    40ea:	39 07       	cpc	r19, r25
    40ec:	29 f4       	brne	.+10     	; 0x40f8 <lora_driver_setApplicationIdentifier+0x1e>
    40ee:	bc 01       	movw	r22, r24
    40f0:	87 e5       	ldi	r24, 0x57	; 87
    40f2:	96 e0       	ldi	r25, 0x06	; 6
    40f4:	5b cf       	rjmp	.-330    	; 0x3fac <_uploadMessageRc>
    40f6:	08 95       	ret
    40f8:	89 e0       	ldi	r24, 0x09	; 9
    40fa:	08 95       	ret

000040fc <lora_driver_setApplicationKey>:
    40fc:	fc 01       	movw	r30, r24
    40fe:	01 90       	ld	r0, Z+
    4100:	00 20       	and	r0, r0
    4102:	e9 f7       	brne	.-6      	; 0x40fe <lora_driver_setApplicationKey+0x2>
    4104:	9f 01       	movw	r18, r30
    4106:	21 52       	subi	r18, 0x21	; 33
    4108:	31 09       	sbc	r19, r1
    410a:	28 17       	cp	r18, r24
    410c:	39 07       	cpc	r19, r25
    410e:	29 f4       	brne	.+10     	; 0x411a <lora_driver_setApplicationKey+0x1e>
    4110:	bc 01       	movw	r22, r24
    4112:	86 e6       	ldi	r24, 0x66	; 102
    4114:	96 e0       	ldi	r25, 0x06	; 6
    4116:	4a cf       	rjmp	.-364    	; 0x3fac <_uploadMessageRc>
    4118:	08 95       	ret
    411a:	89 e0       	ldi	r24, 0x09	; 9
    411c:	08 95       	ret

0000411e <lora_driver_saveMac>:
    411e:	60 e0       	ldi	r22, 0x00	; 0
    4120:	70 e0       	ldi	r23, 0x00	; 0
    4122:	85 ea       	ldi	r24, 0xA5	; 165
    4124:	96 e0       	ldi	r25, 0x06	; 6
    4126:	42 cf       	rjmp	.-380    	; 0x3fac <_uploadMessageRc>
    4128:	08 95       	ret

0000412a <lora_driver_join>:
    412a:	0f 93       	push	r16
    412c:	1f 93       	push	r17
    412e:	e8 2f       	mov	r30, r24
    4130:	f0 e0       	ldi	r31, 0x00	; 0
    4132:	ee 0f       	add	r30, r30
    4134:	ff 1f       	adc	r31, r31
    4136:	e1 58       	subi	r30, 0x81	; 129
    4138:	f7 4f       	sbci	r31, 0xF7	; 247
    413a:	60 81       	ld	r22, Z
    413c:	71 81       	ldd	r23, Z+1	; 0x01
    413e:	8e ea       	ldi	r24, 0xAE	; 174
    4140:	96 e0       	ldi	r25, 0x06	; 6
    4142:	34 df       	rcall	.-408    	; 0x3fac <_uploadMessageRc>
    4144:	81 11       	cpse	r24, r1
    4146:	14 c0       	rjmp	.+40     	; 0x4170 <lora_driver_join+0x46>
    4148:	08 e2       	ldi	r16, 0x28	; 40
    414a:	15 e0       	ldi	r17, 0x05	; 5
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	4d e2       	ldi	r20, 0x2D	; 45
    4152:	50 e0       	ldi	r21, 0x00	; 0
    4154:	6b e5       	ldi	r22, 0x5B	; 91
    4156:	78 e1       	ldi	r23, 0x18	; 24
    4158:	80 91 d2 17 	lds	r24, 0x17D2	; 0x8017d2 <_serialReplyBufferHandle>
    415c:	90 91 d3 17 	lds	r25, 0x17D3	; 0x8017d3 <_serialReplyBufferHandle+0x1>
    4160:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <xStreamBufferReceive>
    4164:	88 23       	and	r24, r24
    4166:	21 f0       	breq	.+8      	; 0x4170 <lora_driver_join+0x46>
    4168:	8b e5       	ldi	r24, 0x5B	; 91
    416a:	98 e1       	ldi	r25, 0x18	; 24
    416c:	aa de       	rcall	.-684    	; 0x3ec2 <_reply2ReturnCode>
    416e:	03 c0       	rjmp	.+6      	; 0x4176 <lora_driver_join+0x4c>
    4170:	8b e5       	ldi	r24, 0x5B	; 91
    4172:	98 e1       	ldi	r25, 0x18	; 24
    4174:	a6 de       	rcall	.-692    	; 0x3ec2 <_reply2ReturnCode>
    4176:	1f 91       	pop	r17
    4178:	0f 91       	pop	r16
    417a:	08 95       	ret

0000417c <lora_driver_sendUploadMessage>:
    417c:	0f 93       	push	r16
    417e:	1f 93       	push	r17
    4180:	cf 93       	push	r28
    4182:	df 93       	push	r29
    4184:	1f 92       	push	r1
    4186:	cd b7       	in	r28, 0x3d	; 61
    4188:	de b7       	in	r29, 0x3e	; 62
    418a:	db 01       	movw	r26, r22
    418c:	11 96       	adiw	r26, 0x01	; 1
    418e:	9c 91       	ld	r25, X
    4190:	11 97       	sbiw	r26, 0x01	; 1
    4192:	95 31       	cpi	r25, 0x15	; 21
    4194:	08 f0       	brcs	.+2      	; 0x4198 <lora_driver_sendUploadMessage+0x1c>
    4196:	b4 c0       	rjmp	.+360    	; 0x4300 <lora_driver_sendUploadMessage+0x184>
    4198:	99 23       	and	r25, r25
    419a:	81 f1       	breq	.+96     	; 0x41fc <lora_driver_sendUploadMessage+0x80>
    419c:	60 e0       	ldi	r22, 0x00	; 0
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	27 2f       	mov	r18, r23
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	46 2f       	mov	r20, r22
    41a6:	50 e0       	ldi	r21, 0x00	; 0
    41a8:	fd 01       	movw	r30, r26
    41aa:	e4 0f       	add	r30, r20
    41ac:	f5 1f       	adc	r31, r21
    41ae:	92 81       	ldd	r25, Z+2	; 0x02
    41b0:	92 95       	swap	r25
    41b2:	9f 70       	andi	r25, 0x0F	; 15
    41b4:	9a 30       	cpi	r25, 0x0A	; 10
    41b6:	10 f0       	brcs	.+4      	; 0x41bc <lora_driver_sendUploadMessage+0x40>
    41b8:	99 5c       	subi	r25, 0xC9	; 201
    41ba:	01 c0       	rjmp	.+2      	; 0x41be <lora_driver_sendUploadMessage+0x42>
    41bc:	90 5d       	subi	r25, 0xD0	; 208
    41be:	f9 01       	movw	r30, r18
    41c0:	e4 51       	subi	r30, 0x14	; 20
    41c2:	f8 4e       	sbci	r31, 0xE8	; 232
    41c4:	90 83       	st	Z, r25
    41c6:	2f 5f       	subi	r18, 0xFF	; 255
    41c8:	3f 4f       	sbci	r19, 0xFF	; 255
    41ca:	fd 01       	movw	r30, r26
    41cc:	e4 0f       	add	r30, r20
    41ce:	f5 1f       	adc	r31, r21
    41d0:	92 81       	ldd	r25, Z+2	; 0x02
    41d2:	9f 70       	andi	r25, 0x0F	; 15
    41d4:	49 2f       	mov	r20, r25
    41d6:	50 e0       	ldi	r21, 0x00	; 0
    41d8:	4a 30       	cpi	r20, 0x0A	; 10
    41da:	51 05       	cpc	r21, r1
    41dc:	14 f0       	brlt	.+4      	; 0x41e2 <lora_driver_sendUploadMessage+0x66>
    41de:	99 5c       	subi	r25, 0xC9	; 201
    41e0:	01 c0       	rjmp	.+2      	; 0x41e4 <lora_driver_sendUploadMessage+0x68>
    41e2:	90 5d       	subi	r25, 0xD0	; 208
    41e4:	f9 01       	movw	r30, r18
    41e6:	e4 51       	subi	r30, 0x14	; 20
    41e8:	f8 4e       	sbci	r31, 0xE8	; 232
    41ea:	90 83       	st	Z, r25
    41ec:	7e 5f       	subi	r23, 0xFE	; 254
    41ee:	6f 5f       	subi	r22, 0xFF	; 255
    41f0:	11 96       	adiw	r26, 0x01	; 1
    41f2:	9c 91       	ld	r25, X
    41f4:	11 97       	sbiw	r26, 0x01	; 1
    41f6:	69 17       	cp	r22, r25
    41f8:	98 f2       	brcs	.-90     	; 0x41a0 <lora_driver_sendUploadMessage+0x24>
    41fa:	01 c0       	rjmp	.+2      	; 0x41fe <lora_driver_sendUploadMessage+0x82>
    41fc:	70 e0       	ldi	r23, 0x00	; 0
    41fe:	e7 2f       	mov	r30, r23
    4200:	f0 e0       	ldi	r31, 0x00	; 0
    4202:	e4 51       	subi	r30, 0x14	; 20
    4204:	f8 4e       	sbci	r31, 0xE8	; 232
    4206:	10 82       	st	Z, r1
    4208:	4c 91       	ld	r20, X
    420a:	81 11       	cpse	r24, r1
    420c:	03 c0       	rjmp	.+6      	; 0x4214 <lora_driver_sendUploadMessage+0x98>
    420e:	87 eb       	ldi	r24, 0xB7	; 183
    4210:	96 e0       	ldi	r25, 0x06	; 6
    4212:	02 c0       	rjmp	.+4      	; 0x4218 <lora_driver_sendUploadMessage+0x9c>
    4214:	89 eb       	ldi	r24, 0xB9	; 185
    4216:	96 e0       	ldi	r25, 0x06	; 6
    4218:	2c ee       	ldi	r18, 0xEC	; 236
    421a:	37 e1       	ldi	r19, 0x17	; 23
    421c:	3f 93       	push	r19
    421e:	2f 93       	push	r18
    4220:	1f 92       	push	r1
    4222:	4f 93       	push	r20
    4224:	9f 93       	push	r25
    4226:	8f 93       	push	r24
    4228:	8d eb       	ldi	r24, 0xBD	; 189
    422a:	96 e0       	ldi	r25, 0x06	; 6
    422c:	9f 93       	push	r25
    422e:	8f 93       	push	r24
    4230:	8e e2       	ldi	r24, 0x2E	; 46
    4232:	98 e1       	ldi	r25, 0x18	; 24
    4234:	9f 93       	push	r25
    4236:	8f 93       	push	r24
    4238:	0e 94 fe 33 	call	0x67fc	; 0x67fc <sprintf>
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	8e e2       	ldi	r24, 0x2E	; 46
    4242:	98 e1       	ldi	r25, 0x18	; 24
    4244:	b3 de       	rcall	.-666    	; 0x3fac <_uploadMessageRc>
    4246:	0f b6       	in	r0, 0x3f	; 63
    4248:	f8 94       	cli
    424a:	de bf       	out	0x3e, r29	; 62
    424c:	0f be       	out	0x3f, r0	; 63
    424e:	cd bf       	out	0x3d, r28	; 61
    4250:	81 11       	cpse	r24, r1
    4252:	59 c0       	rjmp	.+178    	; 0x4306 <lora_driver_sendUploadMessage+0x18a>
    4254:	08 e2       	ldi	r16, 0x28	; 40
    4256:	15 e0       	ldi	r17, 0x05	; 5
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	4d e2       	ldi	r20, 0x2D	; 45
    425e:	50 e0       	ldi	r21, 0x00	; 0
    4260:	6b e5       	ldi	r22, 0x5B	; 91
    4262:	78 e1       	ldi	r23, 0x18	; 24
    4264:	80 91 d2 17 	lds	r24, 0x17D2	; 0x8017d2 <_serialReplyBufferHandle>
    4268:	90 91 d3 17 	lds	r25, 0x17D3	; 0x8017d3 <_serialReplyBufferHandle+0x1>
    426c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <xStreamBufferReceive>
    4270:	88 23       	and	r24, r24
    4272:	09 f4       	brne	.+2      	; 0x4276 <lora_driver_sendUploadMessage+0xfa>
    4274:	47 c0       	rjmp	.+142    	; 0x4304 <lora_driver_sendUploadMessage+0x188>
    4276:	8b e5       	ldi	r24, 0x5B	; 91
    4278:	98 e1       	ldi	r25, 0x18	; 24
    427a:	23 de       	rcall	.-954    	; 0x3ec2 <_reply2ReturnCode>
    427c:	8e 30       	cpi	r24, 0x0E	; 14
    427e:	09 f0       	breq	.+2      	; 0x4282 <lora_driver_sendUploadMessage+0x106>
    4280:	42 c0       	rjmp	.+132    	; 0x4306 <lora_driver_sendUploadMessage+0x18a>
    4282:	87 e0       	ldi	r24, 0x07	; 7
    4284:	89 83       	std	Y+1, r24	; 0x01
    4286:	80 91 d0 17 	lds	r24, 0x17D0	; 0x8017d0 <_downlinkMessageBuffer>
    428a:	90 91 d1 17 	lds	r25, 0x17D1	; 0x8017d1 <_downlinkMessageBuffer+0x1>
    428e:	89 2b       	or	r24, r25
    4290:	a9 f1       	breq	.+106    	; 0x42fc <lora_driver_sendUploadMessage+0x180>
    4292:	be 01       	movw	r22, r28
    4294:	6f 5f       	subi	r22, 0xFF	; 255
    4296:	7f 4f       	sbci	r23, 0xFF	; 255
    4298:	8b e5       	ldi	r24, 0x5B	; 91
    429a:	98 e1       	ldi	r25, 0x18	; 24
    429c:	68 d1       	rcall	.+720    	; 0x456e <decode_port_no>
    429e:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <_downlinkPayload>
    42a2:	e9 81       	ldd	r30, Y+1	; 0x01
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	e5 5a       	subi	r30, 0xA5	; 165
    42a8:	f7 4e       	sbci	r31, 0xE7	; 231
    42aa:	df 01       	movw	r26, r30
    42ac:	0d 90       	ld	r0, X+
    42ae:	00 20       	and	r0, r0
    42b0:	e9 f7       	brne	.-6      	; 0x42ac <lora_driver_sendUploadMessage+0x130>
    42b2:	11 97       	sbiw	r26, 0x01	; 1
    42b4:	ae 1b       	sub	r26, r30
    42b6:	bf 0b       	sbc	r27, r31
    42b8:	aa 23       	and	r26, r26
    42ba:	91 f0       	breq	.+36     	; 0x42e0 <lora_driver_sendUploadMessage+0x164>
    42bc:	bb 27       	eor	r27, r27
    42be:	cd 01       	movw	r24, r26
    42c0:	01 97       	sbiw	r24, 0x01	; 1
    42c2:	9c 01       	movw	r18, r24
    42c4:	12 f4       	brpl	.+4      	; 0x42ca <lora_driver_sendUploadMessage+0x14e>
    42c6:	2f 5f       	subi	r18, 0xFF	; 255
    42c8:	3f 4f       	sbci	r19, 0xFF	; 255
    42ca:	35 95       	asr	r19
    42cc:	27 95       	ror	r18
    42ce:	20 93 d7 17 	sts	0x17D7, r18	; 0x8017d7 <_downlinkPayload+0x1>
    42d2:	af 01       	movw	r20, r30
    42d4:	4f 5f       	subi	r20, 0xFF	; 255
    42d6:	5f 4f       	sbci	r21, 0xFF	; 255
    42d8:	64 e1       	ldi	r22, 0x14	; 20
    42da:	88 ed       	ldi	r24, 0xD8	; 216
    42dc:	97 e1       	ldi	r25, 0x17	; 23
    42de:	73 d1       	rcall	.+742    	; 0x45c6 <decode_hexadecimal_string_bytes>
    42e0:	01 e0       	ldi	r16, 0x01	; 1
    42e2:	10 e0       	ldi	r17, 0x00	; 0
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	46 e1       	ldi	r20, 0x16	; 22
    42ea:	50 e0       	ldi	r21, 0x00	; 0
    42ec:	66 ed       	ldi	r22, 0xD6	; 214
    42ee:	77 e1       	ldi	r23, 0x17	; 23
    42f0:	80 91 d0 17 	lds	r24, 0x17D0	; 0x8017d0 <_downlinkMessageBuffer>
    42f4:	90 91 d1 17 	lds	r25, 0x17D1	; 0x8017d1 <_downlinkMessageBuffer+0x1>
    42f8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xStreamBufferSend>
    42fc:	8e e0       	ldi	r24, 0x0E	; 14
    42fe:	03 c0       	rjmp	.+6      	; 0x4306 <lora_driver_sendUploadMessage+0x18a>
    4300:	84 e1       	ldi	r24, 0x14	; 20
    4302:	01 c0       	rjmp	.+2      	; 0x4306 <lora_driver_sendUploadMessage+0x18a>
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	0f 90       	pop	r0
    4308:	df 91       	pop	r29
    430a:	cf 91       	pop	r28
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	08 95       	ret

00004312 <lora_driver_setAdaptiveDataRate>:
    4312:	81 30       	cpi	r24, 0x01	; 1
    4314:	19 f0       	breq	.+6      	; 0x431c <lora_driver_setAdaptiveDataRate+0xa>
    4316:	6d ec       	ldi	r22, 0xCD	; 205
    4318:	76 e0       	ldi	r23, 0x06	; 6
    431a:	02 c0       	rjmp	.+4      	; 0x4320 <lora_driver_setAdaptiveDataRate+0xe>
    431c:	66 ea       	ldi	r22, 0xA6	; 166
    431e:	77 e0       	ldi	r23, 0x07	; 7
    4320:	81 ed       	ldi	r24, 0xD1	; 209
    4322:	96 e0       	ldi	r25, 0x06	; 6
    4324:	43 ce       	rjmp	.-890    	; 0x3fac <_uploadMessageRc>
    4326:	08 95       	ret

00004328 <lora_driver_setReceiveDelay>:
    4328:	9f 93       	push	r25
    432a:	8f 93       	push	r24
    432c:	82 e0       	ldi	r24, 0x02	; 2
    432e:	97 e0       	ldi	r25, 0x07	; 7
    4330:	9f 93       	push	r25
    4332:	8f 93       	push	r24
    4334:	8e e2       	ldi	r24, 0x2E	; 46
    4336:	98 e1       	ldi	r25, 0x18	; 24
    4338:	9f 93       	push	r25
    433a:	8f 93       	push	r24
    433c:	0e 94 fe 33 	call	0x67fc	; 0x67fc <sprintf>
    4340:	60 e0       	ldi	r22, 0x00	; 0
    4342:	70 e0       	ldi	r23, 0x00	; 0
    4344:	8e e2       	ldi	r24, 0x2E	; 46
    4346:	98 e1       	ldi	r25, 0x18	; 24
    4348:	31 de       	rcall	.-926    	; 0x3fac <_uploadMessageRc>
    434a:	0f 90       	pop	r0
    434c:	0f 90       	pop	r0
    434e:	0f 90       	pop	r0
    4350:	0f 90       	pop	r0
    4352:	0f 90       	pop	r0
    4354:	0f 90       	pop	r0
    4356:	08 95       	ret

00004358 <lora_driver_configureToEu868>:
    4358:	2f 92       	push	r2
    435a:	3f 92       	push	r3
    435c:	4f 92       	push	r4
    435e:	5f 92       	push	r5
    4360:	6f 92       	push	r6
    4362:	7f 92       	push	r7
    4364:	8f 92       	push	r8
    4366:	9f 92       	push	r9
    4368:	af 92       	push	r10
    436a:	bf 92       	push	r11
    436c:	cf 92       	push	r12
    436e:	df 92       	push	r13
    4370:	ef 92       	push	r14
    4372:	ff 92       	push	r15
    4374:	0f 93       	push	r16
    4376:	1f 93       	push	r17
    4378:	cf 93       	push	r28
    437a:	df 93       	push	r29
    437c:	cd b7       	in	r28, 0x3d	; 61
    437e:	de b7       	in	r29, 0x3e	; 62
    4380:	a0 97       	sbiw	r28, 0x20	; 32
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	f8 94       	cli
    4386:	de bf       	out	0x3e, r29	; 62
    4388:	0f be       	out	0x3f, r0	; 63
    438a:	cd bf       	out	0x3d, r28	; 61
    438c:	6f e2       	ldi	r22, 0x2F	; 47
    438e:	77 e0       	ldi	r23, 0x07	; 7
    4390:	8b e3       	ldi	r24, 0x3B	; 59
    4392:	97 e0       	ldi	r25, 0x07	; 7
    4394:	3c dd       	rcall	.-1416   	; 0x3e0e <_uploadMessage>
    4396:	95 dd       	rcall	.-1238   	; 0x3ec2 <_reply2ReturnCode>
    4398:	81 11       	cpse	r24, r1
    439a:	a3 c0       	rjmp	.+326    	; 0x44e2 <lora_driver_configureToEu868+0x18a>
    439c:	80 e2       	ldi	r24, 0x20	; 32
    439e:	e2 e2       	ldi	r30, 0x22	; 34
    43a0:	f2 e0       	ldi	r31, 0x02	; 2
    43a2:	de 01       	movw	r26, r28
    43a4:	11 96       	adiw	r26, 0x01	; 1
    43a6:	01 90       	ld	r0, Z+
    43a8:	0d 92       	st	X+, r0
    43aa:	8a 95       	dec	r24
    43ac:	e1 f7       	brne	.-8      	; 0x43a6 <lora_driver_configureToEu868+0x4e>
    43ae:	9e 01       	movw	r18, r28
    43b0:	2f 5f       	subi	r18, 0xFF	; 255
    43b2:	3f 4f       	sbci	r19, 0xFF	; 255
    43b4:	69 01       	movw	r12, r18
    43b6:	e1 2c       	mov	r14, r1
    43b8:	f1 2c       	mov	r15, r1
    43ba:	0f 2e       	mov	r0, r31
    43bc:	f7 e4       	ldi	r31, 0x47	; 71
    43be:	af 2e       	mov	r10, r31
    43c0:	f7 e0       	ldi	r31, 0x07	; 7
    43c2:	bf 2e       	mov	r11, r31
    43c4:	f0 2d       	mov	r31, r0
    43c6:	0e e2       	ldi	r16, 0x2E	; 46
    43c8:	18 e1       	ldi	r17, 0x18	; 24
    43ca:	0f 2e       	mov	r0, r31
    43cc:	f0 e6       	ldi	r31, 0x60	; 96
    43ce:	4f 2e       	mov	r4, r31
    43d0:	f7 e0       	ldi	r31, 0x07	; 7
    43d2:	5f 2e       	mov	r5, r31
    43d4:	f0 2d       	mov	r31, r0
    43d6:	0f 2e       	mov	r0, r31
    43d8:	f7 e7       	ldi	r31, 0x77	; 119
    43da:	8f 2e       	mov	r8, r31
    43dc:	f7 e0       	ldi	r31, 0x07	; 7
    43de:	9f 2e       	mov	r9, r31
    43e0:	f0 2d       	mov	r31, r0
    43e2:	0f 2e       	mov	r0, r31
    43e4:	f1 e9       	ldi	r31, 0x91	; 145
    43e6:	6f 2e       	mov	r6, r31
    43e8:	f7 e0       	ldi	r31, 0x07	; 7
    43ea:	7f 2e       	mov	r7, r31
    43ec:	f0 2d       	mov	r31, r0
    43ee:	3e 2c       	mov	r3, r14
    43f0:	2f 2c       	mov	r2, r15
    43f2:	ff 92       	push	r15
    43f4:	ef 92       	push	r14
    43f6:	bf 92       	push	r11
    43f8:	af 92       	push	r10
    43fa:	1f 93       	push	r17
    43fc:	0f 93       	push	r16
    43fe:	0e 94 fe 33 	call	0x67fc	; 0x67fc <sprintf>
    4402:	60 e0       	ldi	r22, 0x00	; 0
    4404:	70 e0       	ldi	r23, 0x00	; 0
    4406:	c8 01       	movw	r24, r16
    4408:	02 dd       	rcall	.-1532   	; 0x3e0e <_uploadMessage>
    440a:	5b dd       	rcall	.-1354   	; 0x3ec2 <_reply2ReturnCode>
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	81 11       	cpse	r24, r1
    441a:	63 c0       	rjmp	.+198    	; 0x44e2 <lora_driver_configureToEu868+0x18a>
    441c:	32 e0       	ldi	r19, 0x02	; 2
    441e:	3e 15       	cp	r19, r14
    4420:	e8 f4       	brcc	.+58     	; 0x445c <lora_driver_configureToEu868+0x104>
    4422:	f6 01       	movw	r30, r12
    4424:	83 81       	ldd	r24, Z+3	; 0x03
    4426:	8f 93       	push	r24
    4428:	82 81       	ldd	r24, Z+2	; 0x02
    442a:	8f 93       	push	r24
    442c:	81 81       	ldd	r24, Z+1	; 0x01
    442e:	8f 93       	push	r24
    4430:	80 81       	ld	r24, Z
    4432:	8f 93       	push	r24
    4434:	ff 92       	push	r15
    4436:	ef 92       	push	r14
    4438:	5f 92       	push	r5
    443a:	4f 92       	push	r4
    443c:	1f 93       	push	r17
    443e:	0f 93       	push	r16
    4440:	0e 94 fe 33 	call	0x67fc	; 0x67fc <sprintf>
    4444:	60 e0       	ldi	r22, 0x00	; 0
    4446:	70 e0       	ldi	r23, 0x00	; 0
    4448:	c8 01       	movw	r24, r16
    444a:	e1 dc       	rcall	.-1598   	; 0x3e0e <_uploadMessage>
    444c:	3a dd       	rcall	.-1420   	; 0x3ec2 <_reply2ReturnCode>
    444e:	0f b6       	in	r0, 0x3f	; 63
    4450:	f8 94       	cli
    4452:	de bf       	out	0x3e, r29	; 62
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	cd bf       	out	0x3d, r28	; 61
    4458:	81 11       	cpse	r24, r1
    445a:	43 c0       	rjmp	.+134    	; 0x44e2 <lora_driver_configureToEu868+0x18a>
    445c:	2f 92       	push	r2
    445e:	3f 92       	push	r3
    4460:	9f 92       	push	r9
    4462:	8f 92       	push	r8
    4464:	1f 93       	push	r17
    4466:	0f 93       	push	r16
    4468:	0e 94 fe 33 	call	0x67fc	; 0x67fc <sprintf>
    446c:	60 e0       	ldi	r22, 0x00	; 0
    446e:	70 e0       	ldi	r23, 0x00	; 0
    4470:	c8 01       	movw	r24, r16
    4472:	cd dc       	rcall	.-1638   	; 0x3e0e <_uploadMessage>
    4474:	26 dd       	rcall	.-1460   	; 0x3ec2 <_reply2ReturnCode>
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	0f 90       	pop	r0
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	81 11       	cpse	r24, r1
    4484:	2e c0       	rjmp	.+92     	; 0x44e2 <lora_driver_configureToEu868+0x18a>
    4486:	2f 92       	push	r2
    4488:	3f 92       	push	r3
    448a:	7f 92       	push	r7
    448c:	6f 92       	push	r6
    448e:	1f 93       	push	r17
    4490:	0f 93       	push	r16
    4492:	0e 94 fe 33 	call	0x67fc	; 0x67fc <sprintf>
    4496:	60 e0       	ldi	r22, 0x00	; 0
    4498:	70 e0       	ldi	r23, 0x00	; 0
    449a:	c8 01       	movw	r24, r16
    449c:	b8 dc       	rcall	.-1680   	; 0x3e0e <_uploadMessage>
    449e:	11 dd       	rcall	.-1502   	; 0x3ec2 <_reply2ReturnCode>
    44a0:	0f 90       	pop	r0
    44a2:	0f 90       	pop	r0
    44a4:	0f 90       	pop	r0
    44a6:	0f 90       	pop	r0
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	81 11       	cpse	r24, r1
    44ae:	19 c0       	rjmp	.+50     	; 0x44e2 <lora_driver_configureToEu868+0x18a>
    44b0:	3f ef       	ldi	r19, 0xFF	; 255
    44b2:	e3 1a       	sub	r14, r19
    44b4:	f3 0a       	sbc	r15, r19
    44b6:	84 e0       	ldi	r24, 0x04	; 4
    44b8:	c8 0e       	add	r12, r24
    44ba:	d1 1c       	adc	r13, r1
    44bc:	98 e0       	ldi	r25, 0x08	; 8
    44be:	e9 16       	cp	r14, r25
    44c0:	f1 04       	cpc	r15, r1
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <lora_driver_configureToEu868+0x16e>
    44c4:	94 cf       	rjmp	.-216    	; 0x43ee <lora_driver_configureToEu868+0x96>
    44c6:	60 e0       	ldi	r22, 0x00	; 0
    44c8:	70 e0       	ldi	r23, 0x00	; 0
    44ca:	89 ea       	ldi	r24, 0xA9	; 169
    44cc:	97 e0       	ldi	r25, 0x07	; 7
    44ce:	9f dc       	rcall	.-1730   	; 0x3e0e <_uploadMessage>
    44d0:	f8 dc       	rcall	.-1552   	; 0x3ec2 <_reply2ReturnCode>
    44d2:	81 11       	cpse	r24, r1
    44d4:	06 c0       	rjmp	.+12     	; 0x44e2 <lora_driver_configureToEu868+0x18a>
    44d6:	60 e0       	ldi	r22, 0x00	; 0
    44d8:	70 e0       	ldi	r23, 0x00	; 0
    44da:	8a eb       	ldi	r24, 0xBA	; 186
    44dc:	97 e0       	ldi	r25, 0x07	; 7
    44de:	97 dc       	rcall	.-1746   	; 0x3e0e <_uploadMessage>
    44e0:	f0 dc       	rcall	.-1568   	; 0x3ec2 <_reply2ReturnCode>
    44e2:	a0 96       	adiw	r28, 0x20	; 32
    44e4:	0f b6       	in	r0, 0x3f	; 63
    44e6:	f8 94       	cli
    44e8:	de bf       	out	0x3e, r29	; 62
    44ea:	0f be       	out	0x3f, r0	; 63
    44ec:	cd bf       	out	0x3d, r28	; 61
    44ee:	df 91       	pop	r29
    44f0:	cf 91       	pop	r28
    44f2:	1f 91       	pop	r17
    44f4:	0f 91       	pop	r16
    44f6:	ff 90       	pop	r15
    44f8:	ef 90       	pop	r14
    44fa:	df 90       	pop	r13
    44fc:	cf 90       	pop	r12
    44fe:	bf 90       	pop	r11
    4500:	af 90       	pop	r10
    4502:	9f 90       	pop	r9
    4504:	8f 90       	pop	r8
    4506:	7f 90       	pop	r7
    4508:	6f 90       	pop	r6
    450a:	5f 90       	pop	r5
    450c:	4f 90       	pop	r4
    450e:	3f 90       	pop	r3
    4510:	2f 90       	pop	r2
    4512:	08 95       	ret

00004514 <lora_driver_setOtaaIdentity>:
    4514:	ef 92       	push	r14
    4516:	ff 92       	push	r15
    4518:	0f 93       	push	r16
    451a:	1f 93       	push	r17
    451c:	cf 93       	push	r28
    451e:	df 93       	push	r29
    4520:	ec 01       	movw	r28, r24
    4522:	8b 01       	movw	r16, r22
    4524:	7a 01       	movw	r14, r20
    4526:	81 e0       	ldi	r24, 0x01	; 1
    4528:	f4 de       	rcall	.-536    	; 0x4312 <lora_driver_setAdaptiveDataRate>
    452a:	81 11       	cpse	r24, r1
    452c:	0d c0       	rjmp	.+26     	; 0x4548 <lora_driver_setOtaaIdentity+0x34>
    452e:	ce 01       	movw	r24, r28
    4530:	d4 dd       	rcall	.-1112   	; 0x40da <lora_driver_setApplicationIdentifier>
    4532:	81 11       	cpse	r24, r1
    4534:	09 c0       	rjmp	.+18     	; 0x4548 <lora_driver_setOtaaIdentity+0x34>
    4536:	c8 01       	movw	r24, r16
    4538:	e1 dd       	rcall	.-1086   	; 0x40fc <lora_driver_setApplicationKey>
    453a:	81 11       	cpse	r24, r1
    453c:	05 c0       	rjmp	.+10     	; 0x4548 <lora_driver_setOtaaIdentity+0x34>
    453e:	c7 01       	movw	r24, r14
    4540:	bb dd       	rcall	.-1162   	; 0x40b8 <lora_driver_setDeviceIdentifier>
    4542:	81 11       	cpse	r24, r1
    4544:	01 c0       	rjmp	.+2      	; 0x4548 <lora_driver_setOtaaIdentity+0x34>
    4546:	eb dd       	rcall	.-1066   	; 0x411e <lora_driver_saveMac>
    4548:	df 91       	pop	r29
    454a:	cf 91       	pop	r28
    454c:	1f 91       	pop	r17
    454e:	0f 91       	pop	r16
    4550:	ff 90       	pop	r15
    4552:	ef 90       	pop	r14
    4554:	08 95       	ret

00004556 <lora_driver_mapReturnCodeToText>:
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	fc 01       	movw	r30, r24
    455a:	ee 0f       	add	r30, r30
    455c:	ff 1f       	adc	r31, r31
    455e:	8e 0f       	add	r24, r30
    4560:	9f 1f       	adc	r25, r31
    4562:	fc 01       	movw	r30, r24
    4564:	ed 57       	subi	r30, 0x7D	; 125
    4566:	f7 4f       	sbci	r31, 0xF7	; 247
    4568:	81 81       	ldd	r24, Z+1	; 0x01
    456a:	92 81       	ldd	r25, Z+2	; 0x02
    456c:	08 95       	ret

0000456e <decode_port_no>:
    456e:	dc 01       	movw	r26, r24
    4570:	00 97       	sbiw	r24, 0x00	; 0
    4572:	29 f1       	breq	.+74     	; 0x45be <decode_port_no+0x50>
    4574:	fb 01       	movw	r30, r22
    4576:	20 81       	ld	r18, Z
    4578:	fc 01       	movw	r30, r24
    457a:	01 90       	ld	r0, Z+
    457c:	00 20       	and	r0, r0
    457e:	e9 f7       	brne	.-6      	; 0x457a <decode_port_no+0xc>
    4580:	31 97       	sbiw	r30, 0x01	; 1
    4582:	e8 1b       	sub	r30, r24
    4584:	f9 0b       	sbc	r31, r25
    4586:	82 2f       	mov	r24, r18
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	e8 17       	cp	r30, r24
    458c:	f9 07       	cpc	r31, r25
    458e:	c8 f0       	brcs	.+50     	; 0x45c2 <decode_port_no+0x54>
    4590:	80 e0       	ldi	r24, 0x00	; 0
    4592:	08 c0       	rjmp	.+16     	; 0x45a4 <decode_port_no+0x36>
    4594:	88 0f       	add	r24, r24
    4596:	38 2f       	mov	r19, r24
    4598:	33 0f       	add	r19, r19
    459a:	33 0f       	add	r19, r19
    459c:	83 0f       	add	r24, r19
    459e:	80 53       	subi	r24, 0x30	; 48
    45a0:	89 0f       	add	r24, r25
    45a2:	2f 5f       	subi	r18, 0xFF	; 255
    45a4:	fd 01       	movw	r30, r26
    45a6:	e2 0f       	add	r30, r18
    45a8:	f1 1d       	adc	r31, r1
    45aa:	90 81       	ld	r25, Z
    45ac:	30 ed       	ldi	r19, 0xD0	; 208
    45ae:	39 0f       	add	r19, r25
    45b0:	3a 30       	cpi	r19, 0x0A	; 10
    45b2:	10 f4       	brcc	.+4      	; 0x45b8 <decode_port_no+0x4a>
    45b4:	91 11       	cpse	r25, r1
    45b6:	ee cf       	rjmp	.-36     	; 0x4594 <decode_port_no+0x26>
    45b8:	fb 01       	movw	r30, r22
    45ba:	20 83       	st	Z, r18
    45bc:	08 95       	ret
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	08 95       	ret
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	08 95       	ret

000045c6 <decode_hexadecimal_string_bytes>:
    45c6:	0f 93       	push	r16
    45c8:	1f 93       	push	r17
    45ca:	cf 93       	push	r28
    45cc:	df 93       	push	r29
    45ce:	dc 01       	movw	r26, r24
    45d0:	ea 01       	movw	r28, r20
    45d2:	20 97       	sbiw	r28, 0x00	; 0
    45d4:	e1 f1       	breq	.+120    	; 0x464e <decode_hexadecimal_string_bytes+0x88>
    45d6:	fa 01       	movw	r30, r20
    45d8:	01 90       	ld	r0, Z+
    45da:	00 20       	and	r0, r0
    45dc:	e9 f7       	brne	.-6      	; 0x45d8 <decode_hexadecimal_string_bytes+0x12>
    45de:	31 97       	sbiw	r30, 0x01	; 1
    45e0:	e4 1b       	sub	r30, r20
    45e2:	f5 0b       	sbc	r31, r21
    45e4:	32 97       	sbiw	r30, 0x02	; 2
    45e6:	10 f5       	brcc	.+68     	; 0x462c <decode_hexadecimal_string_bytes+0x66>
    45e8:	32 c0       	rjmp	.+100    	; 0x464e <decode_hexadecimal_string_bytes+0x88>
    45ea:	8d 01       	movw	r16, r26
    45ec:	04 0f       	add	r16, r20
    45ee:	15 1f       	adc	r17, r21
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	ae 01       	movw	r20, r28
    45f4:	42 0f       	add	r20, r18
    45f6:	53 1f       	adc	r21, r19
    45f8:	fa 01       	movw	r30, r20
    45fa:	90 81       	ld	r25, Z
    45fc:	91 34       	cpi	r25, 0x41	; 65
    45fe:	28 f0       	brcs	.+10     	; 0x460a <decode_hexadecimal_string_bytes+0x44>
    4600:	97 53       	subi	r25, 0x37	; 55
    4602:	59 2f       	mov	r21, r25
    4604:	52 95       	swap	r21
    4606:	50 7f       	andi	r21, 0xF0	; 240
    4608:	03 c0       	rjmp	.+6      	; 0x4610 <decode_hexadecimal_string_bytes+0x4a>
    460a:	59 2f       	mov	r21, r25
    460c:	52 95       	swap	r21
    460e:	50 7f       	andi	r21, 0xF0	; 240
    4610:	2c 0f       	add	r18, r28
    4612:	3d 1f       	adc	r19, r29
    4614:	f9 01       	movw	r30, r18
    4616:	91 81       	ldd	r25, Z+1	; 0x01
    4618:	91 34       	cpi	r25, 0x41	; 65
    461a:	10 f0       	brcs	.+4      	; 0x4620 <decode_hexadecimal_string_bytes+0x5a>
    461c:	97 53       	subi	r25, 0x37	; 55
    461e:	01 c0       	rjmp	.+2      	; 0x4622 <decode_hexadecimal_string_bytes+0x5c>
    4620:	90 53       	subi	r25, 0x30	; 48
    4622:	95 0f       	add	r25, r21
    4624:	f8 01       	movw	r30, r16
    4626:	90 83       	st	Z, r25
    4628:	8f 5f       	subi	r24, 0xFF	; 255
    462a:	01 c0       	rjmp	.+2      	; 0x462e <decode_hexadecimal_string_bytes+0x68>
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	28 2f       	mov	r18, r24
    4630:	22 0f       	add	r18, r18
    4632:	48 2f       	mov	r20, r24
    4634:	50 e0       	ldi	r21, 0x00	; 0
    4636:	fe 01       	movw	r30, r28
    4638:	01 90       	ld	r0, Z+
    463a:	00 20       	and	r0, r0
    463c:	e9 f7       	brne	.-6      	; 0x4638 <decode_hexadecimal_string_bytes+0x72>
    463e:	31 97       	sbiw	r30, 0x01	; 1
    4640:	ec 1b       	sub	r30, r28
    4642:	fd 0b       	sbc	r31, r29
    4644:	4e 17       	cp	r20, r30
    4646:	5f 07       	cpc	r21, r31
    4648:	10 f4       	brcc	.+4      	; 0x464e <decode_hexadecimal_string_bytes+0x88>
    464a:	86 13       	cpse	r24, r22
    464c:	ce cf       	rjmp	.-100    	; 0x45ea <decode_hexadecimal_string_bytes+0x24>
    464e:	df 91       	pop	r29
    4650:	cf 91       	pop	r28
    4652:	1f 91       	pop	r17
    4654:	0f 91       	pop	r16
    4656:	08 95       	ret

00004658 <_serialCallBack>:
    4658:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <crc_sum.1945>
    465c:	86 0f       	add	r24, r22
    465e:	80 93 8b 18 	sts	0x188B, r24	; 0x80188b <crc_sum.1945>
    4662:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <_mh_state>
    4666:	91 30       	cpi	r25, 0x01	; 1
    4668:	79 f0       	breq	.+30     	; 0x4688 <_serialCallBack+0x30>
    466a:	28 f0       	brcs	.+10     	; 0x4676 <_serialCallBack+0x1e>
    466c:	92 30       	cpi	r25, 0x02	; 2
    466e:	a9 f0       	breq	.+42     	; 0x469a <_serialCallBack+0x42>
    4670:	93 30       	cpi	r25, 0x03	; 3
    4672:	19 f1       	breq	.+70     	; 0x46ba <_serialCallBack+0x62>
    4674:	08 95       	ret
    4676:	6f 3f       	cpi	r22, 0xFF	; 255
    4678:	09 f0       	breq	.+2      	; 0x467c <_serialCallBack+0x24>
    467a:	48 c0       	rjmp	.+144    	; 0x470c <_serialCallBack+0xb4>
    467c:	10 92 8b 18 	sts	0x188B, r1	; 0x80188b <crc_sum.1945>
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <_mh_state>
    4686:	08 95       	ret
    4688:	66 38       	cpi	r22, 0x86	; 134
    468a:	09 f0       	breq	.+2      	; 0x468e <_serialCallBack+0x36>
    468c:	3f c0       	rjmp	.+126    	; 0x470c <_serialCallBack+0xb4>
    468e:	10 92 8a 18 	sts	0x188A, r1	; 0x80188a <inDex.1943>
    4692:	82 e0       	ldi	r24, 0x02	; 2
    4694:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <_mh_state>
    4698:	08 95       	ret
    469a:	e0 91 8a 18 	lds	r30, 0x188A	; 0x80188a <inDex.1943>
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	8e 0f       	add	r24, r30
    46a2:	80 93 8a 18 	sts	0x188A, r24	; 0x80188a <inDex.1943>
    46a6:	f0 e0       	ldi	r31, 0x00	; 0
    46a8:	e8 57       	subi	r30, 0x78	; 120
    46aa:	f7 4e       	sbci	r31, 0xE7	; 231
    46ac:	60 83       	st	Z, r22
    46ae:	82 30       	cpi	r24, 0x02	; 2
    46b0:	69 f5       	brne	.+90     	; 0x470c <_serialCallBack+0xb4>
    46b2:	83 e0       	ldi	r24, 0x03	; 3
    46b4:	80 93 8e 18 	sts	0x188E, r24	; 0x80188e <_mh_state>
    46b8:	08 95       	ret
    46ba:	90 91 8a 18 	lds	r25, 0x188A	; 0x80188a <inDex.1943>
    46be:	21 e0       	ldi	r18, 0x01	; 1
    46c0:	29 0f       	add	r18, r25
    46c2:	20 93 8a 18 	sts	0x188A, r18	; 0x80188a <inDex.1943>
    46c6:	96 30       	cpi	r25, 0x06	; 6
    46c8:	09 f5       	brne	.+66     	; 0x470c <_serialCallBack+0xb4>
    46ca:	81 11       	cpse	r24, r1
    46cc:	0e c0       	rjmp	.+28     	; 0x46ea <_serialCallBack+0x92>
    46ce:	e8 e8       	ldi	r30, 0x88	; 136
    46d0:	f8 e1       	ldi	r31, 0x18	; 24
    46d2:	80 81       	ld	r24, Z
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	98 2f       	mov	r25, r24
    46d8:	88 27       	eor	r24, r24
    46da:	21 81       	ldd	r18, Z+1	; 0x01
    46dc:	82 0f       	add	r24, r18
    46de:	91 1d       	adc	r25, r1
    46e0:	90 93 90 18 	sts	0x1890, r25	; 0x801890 <_ppm+0x1>
    46e4:	80 93 8f 18 	sts	0x188F, r24	; 0x80188f <_ppm>
    46e8:	04 c0       	rjmp	.+8      	; 0x46f2 <_serialCallBack+0x9a>
    46ea:	10 92 90 18 	sts	0x1890, r1	; 0x801890 <_ppm+0x1>
    46ee:	10 92 8f 18 	sts	0x188F, r1	; 0x80188f <_ppm>
    46f2:	10 92 8e 18 	sts	0x188E, r1	; 0x80188e <_mh_state>
    46f6:	e0 91 8c 18 	lds	r30, 0x188C	; 0x80188c <_appCallBack>
    46fa:	f0 91 8d 18 	lds	r31, 0x188D	; 0x80188d <_appCallBack+0x1>
    46fe:	30 97       	sbiw	r30, 0x00	; 0
    4700:	29 f0       	breq	.+10     	; 0x470c <_serialCallBack+0xb4>
    4702:	80 91 8f 18 	lds	r24, 0x188F	; 0x80188f <_ppm>
    4706:	90 91 90 18 	lds	r25, 0x1890	; 0x801890 <_ppm+0x1>
    470a:	19 95       	eicall
    470c:	08 95       	ret

0000470e <mh_z19_initialise>:
    470e:	8f 92       	push	r8
    4710:	9f 92       	push	r9
    4712:	af 92       	push	r10
    4714:	cf 92       	push	r12
    4716:	ef 92       	push	r14
    4718:	0f 93       	push	r16
    471a:	0f 2e       	mov	r0, r31
    471c:	fc e2       	ldi	r31, 0x2C	; 44
    471e:	8f 2e       	mov	r8, r31
    4720:	f3 e2       	ldi	r31, 0x23	; 35
    4722:	9f 2e       	mov	r9, r31
    4724:	f0 2d       	mov	r31, r0
    4726:	68 94       	set
    4728:	aa 24       	eor	r10, r10
    472a:	a4 f8       	bld	r10, 4
    472c:	68 94       	set
    472e:	cc 24       	eor	r12, r12
    4730:	c4 f8       	bld	r12, 4
    4732:	e1 2c       	mov	r14, r1
    4734:	00 e0       	ldi	r16, 0x00	; 0
    4736:	23 e0       	ldi	r18, 0x03	; 3
    4738:	40 e8       	ldi	r20, 0x80	; 128
    473a:	55 e2       	ldi	r21, 0x25	; 37
    473c:	60 e0       	ldi	r22, 0x00	; 0
    473e:	70 e0       	ldi	r23, 0x00	; 0
    4740:	50 d0       	rcall	.+160    	; 0x47e2 <serial_create>
    4742:	90 93 92 18 	sts	0x1892, r25	; 0x801892 <_serial+0x1>
    4746:	80 93 91 18 	sts	0x1891, r24	; 0x801891 <_serial>
    474a:	0f 91       	pop	r16
    474c:	ef 90       	pop	r14
    474e:	cf 90       	pop	r12
    4750:	af 90       	pop	r10
    4752:	9f 90       	pop	r9
    4754:	8f 90       	pop	r8
    4756:	08 95       	ret

00004758 <mh_z19_injectCallBack>:
    4758:	90 93 8d 18 	sts	0x188D, r25	; 0x80188d <_appCallBack+0x1>
    475c:	80 93 8c 18 	sts	0x188C, r24	; 0x80188c <_appCallBack>
    4760:	08 95       	ret

00004762 <mh_z19_takeMeassuring>:
    4762:	cf 93       	push	r28
    4764:	df 93       	push	r29
    4766:	cd b7       	in	r28, 0x3d	; 61
    4768:	de b7       	in	r29, 0x3e	; 62
    476a:	29 97       	sbiw	r28, 0x09	; 9
    476c:	0f b6       	in	r0, 0x3f	; 63
    476e:	f8 94       	cli
    4770:	de bf       	out	0x3e, r29	; 62
    4772:	0f be       	out	0x3f, r0	; 63
    4774:	cd bf       	out	0x3d, r28	; 61
    4776:	89 e0       	ldi	r24, 0x09	; 9
    4778:	e2 e4       	ldi	r30, 0x42	; 66
    477a:	f2 e0       	ldi	r31, 0x02	; 2
    477c:	9e 01       	movw	r18, r28
    477e:	2f 5f       	subi	r18, 0xFF	; 255
    4780:	3f 4f       	sbci	r19, 0xFF	; 255
    4782:	d9 01       	movw	r26, r18
    4784:	01 90       	ld	r0, Z+
    4786:	0d 92       	st	X+, r0
    4788:	8a 95       	dec	r24
    478a:	e1 f7       	brne	.-8      	; 0x4784 <mh_z19_takeMeassuring+0x22>
    478c:	10 92 90 18 	sts	0x1890, r1	; 0x801890 <_ppm+0x1>
    4790:	10 92 8f 18 	sts	0x188F, r1	; 0x80188f <_ppm>
    4794:	80 91 91 18 	lds	r24, 0x1891	; 0x801891 <_serial>
    4798:	90 91 92 18 	lds	r25, 0x1892	; 0x801892 <_serial+0x1>
    479c:	00 97       	sbiw	r24, 0x00	; 0
    479e:	31 f0       	breq	.+12     	; 0x47ac <mh_z19_takeMeassuring+0x4a>
    47a0:	42 2f       	mov	r20, r18
    47a2:	53 2f       	mov	r21, r19
    47a4:	69 e0       	ldi	r22, 0x09	; 9
    47a6:	ee d0       	rcall	.+476    	; 0x4984 <serial_sendBytes>
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	01 c0       	rjmp	.+2      	; 0x47ae <mh_z19_takeMeassuring+0x4c>
    47ac:	82 e0       	ldi	r24, 0x02	; 2
    47ae:	29 96       	adiw	r28, 0x09	; 9
    47b0:	0f b6       	in	r0, 0x3f	; 63
    47b2:	f8 94       	cli
    47b4:	de bf       	out	0x3e, r29	; 62
    47b6:	0f be       	out	0x3f, r0	; 63
    47b8:	cd bf       	out	0x3d, r28	; 61
    47ba:	df 91       	pop	r29
    47bc:	cf 91       	pop	r28
    47be:	08 95       	ret

000047c0 <mh_z19_getCo2Ppm>:
    47c0:	20 91 8f 18 	lds	r18, 0x188F	; 0x80188f <_ppm>
    47c4:	30 91 90 18 	lds	r19, 0x1890	; 0x801890 <_ppm+0x1>
    47c8:	21 15       	cp	r18, r1
    47ca:	31 05       	cpc	r19, r1
    47cc:	29 f4       	brne	.+10     	; 0x47d8 <mh_z19_getCo2Ppm+0x18>
    47ce:	fc 01       	movw	r30, r24
    47d0:	11 82       	std	Z+1, r1	; 0x01
    47d2:	10 82       	st	Z, r1
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	08 95       	ret
    47d8:	fc 01       	movw	r30, r24
    47da:	31 83       	std	Z+1, r19	; 0x01
    47dc:	20 83       	st	Z, r18
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	08 95       	ret

000047e2 <serial_create>:
    47e2:	2f 92       	push	r2
    47e4:	3f 92       	push	r3
    47e6:	4f 92       	push	r4
    47e8:	5f 92       	push	r5
    47ea:	6f 92       	push	r6
    47ec:	7f 92       	push	r7
    47ee:	8f 92       	push	r8
    47f0:	9f 92       	push	r9
    47f2:	af 92       	push	r10
    47f4:	cf 92       	push	r12
    47f6:	ef 92       	push	r14
    47f8:	ff 92       	push	r15
    47fa:	0f 93       	push	r16
    47fc:	1f 93       	push	r17
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	cd b7       	in	r28, 0x3d	; 61
    4804:	de b7       	in	r29, 0x3e	; 62
    4806:	f8 2e       	mov	r15, r24
    4808:	2a 01       	movw	r4, r20
    480a:	3b 01       	movw	r6, r22
    480c:	88 e0       	ldi	r24, 0x08	; 8
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	0e 94 0c 31 	call	0x6218	; 0x6218 <malloc>
    4814:	8c 01       	movw	r16, r24
    4816:	8f 2d       	mov	r24, r15
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	fc 01       	movw	r30, r24
    481c:	ee 0f       	add	r30, r30
    481e:	ff 1f       	adc	r31, r31
    4820:	ed 56       	subi	r30, 0x6D	; 109
    4822:	f7 4e       	sbci	r31, 0xE7	; 231
    4824:	11 83       	std	Z+1, r17	; 0x01
    4826:	00 83       	st	Z, r16
    4828:	01 15       	cp	r16, r1
    482a:	11 05       	cpc	r17, r1
    482c:	09 f4       	brne	.+2      	; 0x4830 <serial_create+0x4e>
    482e:	6d c0       	rjmp	.+218    	; 0x490a <serial_create+0x128>
    4830:	88 0f       	add	r24, r24
    4832:	99 1f       	adc	r25, r25
    4834:	fc 01       	movw	r30, r24
    4836:	e5 5f       	subi	r30, 0xF5	; 245
    4838:	fd 4f       	sbci	r31, 0xFD	; 253
    483a:	80 81       	ld	r24, Z
    483c:	91 81       	ldd	r25, Z+1	; 0x01
    483e:	d8 01       	movw	r26, r16
    4840:	8d 93       	st	X+, r24
    4842:	9c 93       	st	X, r25
    4844:	8c 2d       	mov	r24, r12
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	88 0f       	add	r24, r24
    484a:	99 1f       	adc	r25, r25
    484c:	88 0f       	add	r24, r24
    484e:	99 1f       	adc	r25, r25
    4850:	0e 94 0c 31 	call	0x6218	; 0x6218 <malloc>
    4854:	1c 01       	movw	r2, r24
    4856:	86 e0       	ldi	r24, 0x06	; 6
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	0e 94 0c 31 	call	0x6218	; 0x6218 <malloc>
    485e:	7c 01       	movw	r14, r24
    4860:	4c 2d       	mov	r20, r12
    4862:	b1 01       	movw	r22, r2
    4864:	f4 d6       	rcall	.+3560   	; 0x564e <fifo_init>
    4866:	f8 01       	movw	r30, r16
    4868:	f5 82       	std	Z+5, r15	; 0x05
    486a:	e4 82       	std	Z+4, r14	; 0x04
    486c:	8a 2d       	mov	r24, r10
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	88 0f       	add	r24, r24
    4872:	99 1f       	adc	r25, r25
    4874:	88 0f       	add	r24, r24
    4876:	99 1f       	adc	r25, r25
    4878:	0e 94 0c 31 	call	0x6218	; 0x6218 <malloc>
    487c:	1c 01       	movw	r2, r24
    487e:	86 e0       	ldi	r24, 0x06	; 6
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	0e 94 0c 31 	call	0x6218	; 0x6218 <malloc>
    4886:	7c 01       	movw	r14, r24
    4888:	4a 2d       	mov	r20, r10
    488a:	b1 01       	movw	r22, r2
    488c:	e0 d6       	rcall	.+3520   	; 0x564e <fifo_init>
    488e:	d8 01       	movw	r26, r16
    4890:	13 96       	adiw	r26, 0x03	; 3
    4892:	fc 92       	st	X, r15
    4894:	ee 92       	st	-X, r14
    4896:	12 97       	sbiw	r26, 0x02	; 2
    4898:	17 96       	adiw	r26, 0x07	; 7
    489a:	9c 92       	st	X, r9
    489c:	8e 92       	st	-X, r8
    489e:	16 97       	sbiw	r26, 0x06	; 6
    48a0:	ff b6       	in	r15, 0x3f	; 63
    48a2:	f8 94       	cli
    48a4:	ed 91       	ld	r30, X+
    48a6:	fc 91       	ld	r31, X
    48a8:	11 97       	sbiw	r26, 0x01	; 1
    48aa:	36 97       	sbiw	r30, 0x06	; 6
    48ac:	80 81       	ld	r24, Z
    48ae:	82 60       	ori	r24, 0x02	; 2
    48b0:	80 83       	st	Z, r24
    48b2:	8d 90       	ld	r8, X+
    48b4:	9c 90       	ld	r9, X
    48b6:	c3 01       	movw	r24, r6
    48b8:	b2 01       	movw	r22, r4
    48ba:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__floatunsisf>
    48be:	20 e0       	ldi	r18, 0x00	; 0
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	40 e0       	ldi	r20, 0x00	; 0
    48c4:	51 e4       	ldi	r21, 0x41	; 65
    48c6:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__mulsf3>
    48ca:	9b 01       	movw	r18, r22
    48cc:	ac 01       	movw	r20, r24
    48ce:	60 e0       	ldi	r22, 0x00	; 0
    48d0:	74 e2       	ldi	r23, 0x24	; 36
    48d2:	84 e7       	ldi	r24, 0x74	; 116
    48d4:	9b e4       	ldi	r25, 0x4B	; 75
    48d6:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <__divsf3>
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	40 e8       	ldi	r20, 0x80	; 128
    48e0:	5f e3       	ldi	r21, 0x3F	; 63
    48e2:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <__subsf3>
    48e6:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__fixunssfsi>
    48ea:	f4 01       	movw	r30, r8
    48ec:	32 97       	sbiw	r30, 0x02	; 2
    48ee:	60 83       	st	Z, r22
    48f0:	d8 01       	movw	r26, r16
    48f2:	ed 91       	ld	r30, X+
    48f4:	fc 91       	ld	r31, X
    48f6:	11 97       	sbiw	r26, 0x01	; 1
    48f8:	35 97       	sbiw	r30, 0x05	; 5
    48fa:	88 e9       	ldi	r24, 0x98	; 152
    48fc:	80 83       	st	Z, r24
    48fe:	ed 91       	ld	r30, X+
    4900:	fc 91       	ld	r31, X
    4902:	34 97       	sbiw	r30, 0x04	; 4
    4904:	86 e0       	ldi	r24, 0x06	; 6
    4906:	80 83       	st	Z, r24
    4908:	ff be       	out	0x3f, r15	; 63
    490a:	c8 01       	movw	r24, r16
    490c:	df 91       	pop	r29
    490e:	cf 91       	pop	r28
    4910:	1f 91       	pop	r17
    4912:	0f 91       	pop	r16
    4914:	ff 90       	pop	r15
    4916:	ef 90       	pop	r14
    4918:	cf 90       	pop	r12
    491a:	af 90       	pop	r10
    491c:	9f 90       	pop	r9
    491e:	8f 90       	pop	r8
    4920:	7f 90       	pop	r7
    4922:	6f 90       	pop	r6
    4924:	5f 90       	pop	r5
    4926:	4f 90       	pop	r4
    4928:	3f 90       	pop	r3
    492a:	2f 90       	pop	r2
    492c:	08 95       	ret

0000492e <serial_sendByte>:
    492e:	cf 93       	push	r28
    4930:	df 93       	push	r29
    4932:	dc 01       	movw	r26, r24
    4934:	89 2b       	or	r24, r25
    4936:	01 f1       	breq	.+64     	; 0x4978 <serial_sendByte+0x4a>
    4938:	12 96       	adiw	r26, 0x02	; 2
    493a:	ed 91       	ld	r30, X+
    493c:	fc 91       	ld	r31, X
    493e:	13 97       	sbiw	r26, 0x03	; 3
    4940:	93 81       	ldd	r25, Z+3	; 0x03
    4942:	82 81       	ldd	r24, Z+2	; 0x02
    4944:	25 81       	ldd	r18, Z+5	; 0x05
    4946:	98 1b       	sub	r25, r24
    4948:	92 23       	and	r25, r18
    494a:	84 81       	ldd	r24, Z+4	; 0x04
    494c:	98 17       	cp	r25, r24
    494e:	b1 f0       	breq	.+44     	; 0x497c <serial_sendByte+0x4e>
    4950:	83 81       	ldd	r24, Z+3	; 0x03
    4952:	26 95       	lsr	r18
    4954:	28 23       	and	r18, r24
    4956:	c0 81       	ld	r28, Z
    4958:	d1 81       	ldd	r29, Z+1	; 0x01
    495a:	c2 0f       	add	r28, r18
    495c:	d1 1d       	adc	r29, r1
    495e:	68 83       	st	Y, r22
    4960:	8f 5f       	subi	r24, 0xFF	; 255
    4962:	95 81       	ldd	r25, Z+5	; 0x05
    4964:	89 23       	and	r24, r25
    4966:	83 83       	std	Z+3, r24	; 0x03
    4968:	ed 91       	ld	r30, X+
    496a:	fc 91       	ld	r31, X
    496c:	35 97       	sbiw	r30, 0x05	; 5
    496e:	80 81       	ld	r24, Z
    4970:	80 62       	ori	r24, 0x20	; 32
    4972:	80 83       	st	Z, r24
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	03 c0       	rjmp	.+6      	; 0x497e <serial_sendByte+0x50>
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	01 c0       	rjmp	.+2      	; 0x497e <serial_sendByte+0x50>
    497c:	82 e0       	ldi	r24, 0x02	; 2
    497e:	df 91       	pop	r29
    4980:	cf 91       	pop	r28
    4982:	08 95       	ret

00004984 <serial_sendBytes>:
    4984:	ef 92       	push	r14
    4986:	ff 92       	push	r15
    4988:	0f 93       	push	r16
    498a:	1f 93       	push	r17
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	7c 01       	movw	r14, r24
    4992:	00 97       	sbiw	r24, 0x00	; 0
    4994:	09 f4       	brne	.+2      	; 0x4998 <serial_sendBytes+0x14>
    4996:	41 c0       	rjmp	.+130    	; 0x4a1a <serial_sendBytes+0x96>
    4998:	dc 01       	movw	r26, r24
    499a:	12 96       	adiw	r26, 0x02	; 2
    499c:	ed 91       	ld	r30, X+
    499e:	fc 91       	ld	r31, X
    49a0:	13 97       	sbiw	r26, 0x03	; 3
    49a2:	93 81       	ldd	r25, Z+3	; 0x03
    49a4:	82 81       	ldd	r24, Z+2	; 0x02
    49a6:	98 1b       	sub	r25, r24
    49a8:	85 81       	ldd	r24, Z+5	; 0x05
    49aa:	98 23       	and	r25, r24
    49ac:	84 81       	ldd	r24, Z+4	; 0x04
    49ae:	89 1b       	sub	r24, r25
    49b0:	86 17       	cp	r24, r22
    49b2:	a8 f1       	brcs	.+106    	; 0x4a1e <serial_sendBytes+0x9a>
    49b4:	66 23       	and	r22, r22
    49b6:	41 f1       	breq	.+80     	; 0x4a08 <serial_sendBytes+0x84>
    49b8:	84 2f       	mov	r24, r20
    49ba:	95 2f       	mov	r25, r21
    49bc:	dc 01       	movw	r26, r24
    49be:	61 50       	subi	r22, 0x01	; 1
    49c0:	46 2f       	mov	r20, r22
    49c2:	50 e0       	ldi	r21, 0x00	; 0
    49c4:	4f 5f       	subi	r20, 0xFF	; 255
    49c6:	5f 4f       	sbci	r21, 0xFF	; 255
    49c8:	48 0f       	add	r20, r24
    49ca:	59 1f       	adc	r21, r25
    49cc:	e7 01       	movw	r28, r14
    49ce:	ea 81       	ldd	r30, Y+2	; 0x02
    49d0:	fb 81       	ldd	r31, Y+3	; 0x03
    49d2:	93 81       	ldd	r25, Z+3	; 0x03
    49d4:	82 81       	ldd	r24, Z+2	; 0x02
    49d6:	25 81       	ldd	r18, Z+5	; 0x05
    49d8:	98 1b       	sub	r25, r24
    49da:	92 23       	and	r25, r18
    49dc:	84 81       	ldd	r24, Z+4	; 0x04
    49de:	98 17       	cp	r25, r24
    49e0:	79 f0       	breq	.+30     	; 0x4a00 <serial_sendBytes+0x7c>
    49e2:	8c 91       	ld	r24, X
    49e4:	93 81       	ldd	r25, Z+3	; 0x03
    49e6:	26 95       	lsr	r18
    49e8:	29 23       	and	r18, r25
    49ea:	60 81       	ld	r22, Z
    49ec:	71 81       	ldd	r23, Z+1	; 0x01
    49ee:	8b 01       	movw	r16, r22
    49f0:	02 0f       	add	r16, r18
    49f2:	11 1d       	adc	r17, r1
    49f4:	e8 01       	movw	r28, r16
    49f6:	88 83       	st	Y, r24
    49f8:	9f 5f       	subi	r25, 0xFF	; 255
    49fa:	85 81       	ldd	r24, Z+5	; 0x05
    49fc:	98 23       	and	r25, r24
    49fe:	93 83       	std	Z+3, r25	; 0x03
    4a00:	11 96       	adiw	r26, 0x01	; 1
    4a02:	a4 17       	cp	r26, r20
    4a04:	b5 07       	cpc	r27, r21
    4a06:	11 f7       	brne	.-60     	; 0x49cc <serial_sendBytes+0x48>
    4a08:	d7 01       	movw	r26, r14
    4a0a:	ed 91       	ld	r30, X+
    4a0c:	fc 91       	ld	r31, X
    4a0e:	35 97       	sbiw	r30, 0x05	; 5
    4a10:	80 81       	ld	r24, Z
    4a12:	80 62       	ori	r24, 0x20	; 32
    4a14:	80 83       	st	Z, r24
    4a16:	80 e0       	ldi	r24, 0x00	; 0
    4a18:	03 c0       	rjmp	.+6      	; 0x4a20 <serial_sendBytes+0x9c>
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	01 c0       	rjmp	.+2      	; 0x4a20 <serial_sendBytes+0x9c>
    4a1e:	82 e0       	ldi	r24, 0x02	; 2
    4a20:	df 91       	pop	r29
    4a22:	cf 91       	pop	r28
    4a24:	1f 91       	pop	r17
    4a26:	0f 91       	pop	r16
    4a28:	ff 90       	pop	r15
    4a2a:	ef 90       	pop	r14
    4a2c:	08 95       	ret

00004a2e <serial_getByte>:
    4a2e:	00 97       	sbiw	r24, 0x00	; 0
    4a30:	d1 f0       	breq	.+52     	; 0x4a66 <serial_getByte+0x38>
    4a32:	dc 01       	movw	r26, r24
    4a34:	14 96       	adiw	r26, 0x04	; 4
    4a36:	ed 91       	ld	r30, X+
    4a38:	fc 91       	ld	r31, X
    4a3a:	15 97       	sbiw	r26, 0x05	; 5
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	82 81       	ldd	r24, Z+2	; 0x02
    4a40:	98 17       	cp	r25, r24
    4a42:	99 f0       	breq	.+38     	; 0x4a6a <serial_getByte+0x3c>
    4a44:	92 81       	ldd	r25, Z+2	; 0x02
    4a46:	85 81       	ldd	r24, Z+5	; 0x05
    4a48:	86 95       	lsr	r24
    4a4a:	89 23       	and	r24, r25
    4a4c:	a0 81       	ld	r26, Z
    4a4e:	b1 81       	ldd	r27, Z+1	; 0x01
    4a50:	a8 0f       	add	r26, r24
    4a52:	b1 1d       	adc	r27, r1
    4a54:	8c 91       	ld	r24, X
    4a56:	db 01       	movw	r26, r22
    4a58:	8c 93       	st	X, r24
    4a5a:	9f 5f       	subi	r25, 0xFF	; 255
    4a5c:	85 81       	ldd	r24, Z+5	; 0x05
    4a5e:	98 23       	and	r25, r24
    4a60:	92 83       	std	Z+2, r25	; 0x02
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	08 95       	ret
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	08 95       	ret
    4a6a:	83 e0       	ldi	r24, 0x03	; 3
    4a6c:	08 95       	ret

00004a6e <__vector_25>:
    4a6e:	1f 92       	push	r1
    4a70:	0f 92       	push	r0
    4a72:	0f b6       	in	r0, 0x3f	; 63
    4a74:	0f 92       	push	r0
    4a76:	11 24       	eor	r1, r1
    4a78:	0b b6       	in	r0, 0x3b	; 59
    4a7a:	0f 92       	push	r0
    4a7c:	2f 93       	push	r18
    4a7e:	3f 93       	push	r19
    4a80:	4f 93       	push	r20
    4a82:	5f 93       	push	r21
    4a84:	6f 93       	push	r22
    4a86:	7f 93       	push	r23
    4a88:	8f 93       	push	r24
    4a8a:	9f 93       	push	r25
    4a8c:	af 93       	push	r26
    4a8e:	bf 93       	push	r27
    4a90:	cf 93       	push	r28
    4a92:	df 93       	push	r29
    4a94:	ef 93       	push	r30
    4a96:	ff 93       	push	r31
    4a98:	a0 91 93 18 	lds	r26, 0x1893	; 0x801893 <_ser_handle>
    4a9c:	b0 91 94 18 	lds	r27, 0x1894	; 0x801894 <_ser_handle+0x1>
    4aa0:	10 97       	sbiw	r26, 0x00	; 0
    4aa2:	11 f1       	breq	.+68     	; 0x4ae8 <__vector_25+0x7a>
    4aa4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4aa8:	14 96       	adiw	r26, 0x04	; 4
    4aaa:	ed 91       	ld	r30, X+
    4aac:	fc 91       	ld	r31, X
    4aae:	15 97       	sbiw	r26, 0x05	; 5
    4ab0:	93 81       	ldd	r25, Z+3	; 0x03
    4ab2:	82 81       	ldd	r24, Z+2	; 0x02
    4ab4:	25 81       	ldd	r18, Z+5	; 0x05
    4ab6:	98 1b       	sub	r25, r24
    4ab8:	92 23       	and	r25, r18
    4aba:	84 81       	ldd	r24, Z+4	; 0x04
    4abc:	98 17       	cp	r25, r24
    4abe:	61 f0       	breq	.+24     	; 0x4ad8 <__vector_25+0x6a>
    4ac0:	83 81       	ldd	r24, Z+3	; 0x03
    4ac2:	26 95       	lsr	r18
    4ac4:	28 23       	and	r18, r24
    4ac6:	c0 81       	ld	r28, Z
    4ac8:	d1 81       	ldd	r29, Z+1	; 0x01
    4aca:	c2 0f       	add	r28, r18
    4acc:	d1 1d       	adc	r29, r1
    4ace:	68 83       	st	Y, r22
    4ad0:	8f 5f       	subi	r24, 0xFF	; 255
    4ad2:	95 81       	ldd	r25, Z+5	; 0x05
    4ad4:	89 23       	and	r24, r25
    4ad6:	83 83       	std	Z+3, r24	; 0x03
    4ad8:	16 96       	adiw	r26, 0x06	; 6
    4ada:	ed 91       	ld	r30, X+
    4adc:	fc 91       	ld	r31, X
    4ade:	17 97       	sbiw	r26, 0x07	; 7
    4ae0:	30 97       	sbiw	r30, 0x00	; 0
    4ae2:	11 f0       	breq	.+4      	; 0x4ae8 <__vector_25+0x7a>
    4ae4:	cd 01       	movw	r24, r26
    4ae6:	19 95       	eicall
    4ae8:	ff 91       	pop	r31
    4aea:	ef 91       	pop	r30
    4aec:	df 91       	pop	r29
    4aee:	cf 91       	pop	r28
    4af0:	bf 91       	pop	r27
    4af2:	af 91       	pop	r26
    4af4:	9f 91       	pop	r25
    4af6:	8f 91       	pop	r24
    4af8:	7f 91       	pop	r23
    4afa:	6f 91       	pop	r22
    4afc:	5f 91       	pop	r21
    4afe:	4f 91       	pop	r20
    4b00:	3f 91       	pop	r19
    4b02:	2f 91       	pop	r18
    4b04:	0f 90       	pop	r0
    4b06:	0b be       	out	0x3b, r0	; 59
    4b08:	0f 90       	pop	r0
    4b0a:	0f be       	out	0x3f, r0	; 63
    4b0c:	0f 90       	pop	r0
    4b0e:	1f 90       	pop	r1
    4b10:	18 95       	reti

00004b12 <__vector_26>:
    4b12:	1f 92       	push	r1
    4b14:	0f 92       	push	r0
    4b16:	0f b6       	in	r0, 0x3f	; 63
    4b18:	0f 92       	push	r0
    4b1a:	11 24       	eor	r1, r1
    4b1c:	0b b6       	in	r0, 0x3b	; 59
    4b1e:	0f 92       	push	r0
    4b20:	2f 93       	push	r18
    4b22:	8f 93       	push	r24
    4b24:	9f 93       	push	r25
    4b26:	af 93       	push	r26
    4b28:	bf 93       	push	r27
    4b2a:	ef 93       	push	r30
    4b2c:	ff 93       	push	r31
    4b2e:	e0 91 93 18 	lds	r30, 0x1893	; 0x801893 <_ser_handle>
    4b32:	f0 91 94 18 	lds	r31, 0x1894	; 0x801894 <_ser_handle+0x1>
    4b36:	30 97       	sbiw	r30, 0x00	; 0
    4b38:	b9 f0       	breq	.+46     	; 0x4b68 <__vector_26+0x56>
    4b3a:	02 80       	ldd	r0, Z+2	; 0x02
    4b3c:	f3 81       	ldd	r31, Z+3	; 0x03
    4b3e:	e0 2d       	mov	r30, r0
    4b40:	93 81       	ldd	r25, Z+3	; 0x03
    4b42:	82 81       	ldd	r24, Z+2	; 0x02
    4b44:	98 17       	cp	r25, r24
    4b46:	b1 f0       	breq	.+44     	; 0x4b74 <__vector_26+0x62>
    4b48:	92 81       	ldd	r25, Z+2	; 0x02
    4b4a:	85 81       	ldd	r24, Z+5	; 0x05
    4b4c:	28 2f       	mov	r18, r24
    4b4e:	26 95       	lsr	r18
    4b50:	29 23       	and	r18, r25
    4b52:	a0 81       	ld	r26, Z
    4b54:	b1 81       	ldd	r27, Z+1	; 0x01
    4b56:	a2 0f       	add	r26, r18
    4b58:	b1 1d       	adc	r27, r1
    4b5a:	2c 91       	ld	r18, X
    4b5c:	9f 5f       	subi	r25, 0xFF	; 255
    4b5e:	89 23       	and	r24, r25
    4b60:	82 83       	std	Z+2, r24	; 0x02
    4b62:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4b66:	0b c0       	rjmp	.+22     	; 0x4b7e <__vector_26+0x6c>
    4b68:	e1 ec       	ldi	r30, 0xC1	; 193
    4b6a:	f0 e0       	ldi	r31, 0x00	; 0
    4b6c:	80 81       	ld	r24, Z
    4b6e:	8f 7d       	andi	r24, 0xDF	; 223
    4b70:	80 83       	st	Z, r24
    4b72:	05 c0       	rjmp	.+10     	; 0x4b7e <__vector_26+0x6c>
    4b74:	e1 ec       	ldi	r30, 0xC1	; 193
    4b76:	f0 e0       	ldi	r31, 0x00	; 0
    4b78:	80 81       	ld	r24, Z
    4b7a:	8f 7d       	andi	r24, 0xDF	; 223
    4b7c:	80 83       	st	Z, r24
    4b7e:	ff 91       	pop	r31
    4b80:	ef 91       	pop	r30
    4b82:	bf 91       	pop	r27
    4b84:	af 91       	pop	r26
    4b86:	9f 91       	pop	r25
    4b88:	8f 91       	pop	r24
    4b8a:	2f 91       	pop	r18
    4b8c:	0f 90       	pop	r0
    4b8e:	0b be       	out	0x3b, r0	; 59
    4b90:	0f 90       	pop	r0
    4b92:	0f be       	out	0x3f, r0	; 63
    4b94:	0f 90       	pop	r0
    4b96:	1f 90       	pop	r1
    4b98:	18 95       	reti

00004b9a <__vector_36>:
    4b9a:	1f 92       	push	r1
    4b9c:	0f 92       	push	r0
    4b9e:	0f b6       	in	r0, 0x3f	; 63
    4ba0:	0f 92       	push	r0
    4ba2:	11 24       	eor	r1, r1
    4ba4:	0b b6       	in	r0, 0x3b	; 59
    4ba6:	0f 92       	push	r0
    4ba8:	2f 93       	push	r18
    4baa:	3f 93       	push	r19
    4bac:	4f 93       	push	r20
    4bae:	5f 93       	push	r21
    4bb0:	6f 93       	push	r22
    4bb2:	7f 93       	push	r23
    4bb4:	8f 93       	push	r24
    4bb6:	9f 93       	push	r25
    4bb8:	af 93       	push	r26
    4bba:	bf 93       	push	r27
    4bbc:	cf 93       	push	r28
    4bbe:	df 93       	push	r29
    4bc0:	ef 93       	push	r30
    4bc2:	ff 93       	push	r31
    4bc4:	a0 91 95 18 	lds	r26, 0x1895	; 0x801895 <_ser_handle+0x2>
    4bc8:	b0 91 96 18 	lds	r27, 0x1896	; 0x801896 <_ser_handle+0x3>
    4bcc:	10 97       	sbiw	r26, 0x00	; 0
    4bce:	11 f1       	breq	.+68     	; 0x4c14 <__vector_36+0x7a>
    4bd0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4bd4:	14 96       	adiw	r26, 0x04	; 4
    4bd6:	ed 91       	ld	r30, X+
    4bd8:	fc 91       	ld	r31, X
    4bda:	15 97       	sbiw	r26, 0x05	; 5
    4bdc:	93 81       	ldd	r25, Z+3	; 0x03
    4bde:	82 81       	ldd	r24, Z+2	; 0x02
    4be0:	25 81       	ldd	r18, Z+5	; 0x05
    4be2:	98 1b       	sub	r25, r24
    4be4:	92 23       	and	r25, r18
    4be6:	84 81       	ldd	r24, Z+4	; 0x04
    4be8:	98 17       	cp	r25, r24
    4bea:	61 f0       	breq	.+24     	; 0x4c04 <__vector_36+0x6a>
    4bec:	83 81       	ldd	r24, Z+3	; 0x03
    4bee:	26 95       	lsr	r18
    4bf0:	28 23       	and	r18, r24
    4bf2:	c0 81       	ld	r28, Z
    4bf4:	d1 81       	ldd	r29, Z+1	; 0x01
    4bf6:	c2 0f       	add	r28, r18
    4bf8:	d1 1d       	adc	r29, r1
    4bfa:	68 83       	st	Y, r22
    4bfc:	8f 5f       	subi	r24, 0xFF	; 255
    4bfe:	95 81       	ldd	r25, Z+5	; 0x05
    4c00:	89 23       	and	r24, r25
    4c02:	83 83       	std	Z+3, r24	; 0x03
    4c04:	16 96       	adiw	r26, 0x06	; 6
    4c06:	ed 91       	ld	r30, X+
    4c08:	fc 91       	ld	r31, X
    4c0a:	17 97       	sbiw	r26, 0x07	; 7
    4c0c:	30 97       	sbiw	r30, 0x00	; 0
    4c0e:	11 f0       	breq	.+4      	; 0x4c14 <__vector_36+0x7a>
    4c10:	cd 01       	movw	r24, r26
    4c12:	19 95       	eicall
    4c14:	ff 91       	pop	r31
    4c16:	ef 91       	pop	r30
    4c18:	df 91       	pop	r29
    4c1a:	cf 91       	pop	r28
    4c1c:	bf 91       	pop	r27
    4c1e:	af 91       	pop	r26
    4c20:	9f 91       	pop	r25
    4c22:	8f 91       	pop	r24
    4c24:	7f 91       	pop	r23
    4c26:	6f 91       	pop	r22
    4c28:	5f 91       	pop	r21
    4c2a:	4f 91       	pop	r20
    4c2c:	3f 91       	pop	r19
    4c2e:	2f 91       	pop	r18
    4c30:	0f 90       	pop	r0
    4c32:	0b be       	out	0x3b, r0	; 59
    4c34:	0f 90       	pop	r0
    4c36:	0f be       	out	0x3f, r0	; 63
    4c38:	0f 90       	pop	r0
    4c3a:	1f 90       	pop	r1
    4c3c:	18 95       	reti

00004c3e <__vector_37>:
    4c3e:	1f 92       	push	r1
    4c40:	0f 92       	push	r0
    4c42:	0f b6       	in	r0, 0x3f	; 63
    4c44:	0f 92       	push	r0
    4c46:	11 24       	eor	r1, r1
    4c48:	0b b6       	in	r0, 0x3b	; 59
    4c4a:	0f 92       	push	r0
    4c4c:	2f 93       	push	r18
    4c4e:	8f 93       	push	r24
    4c50:	9f 93       	push	r25
    4c52:	af 93       	push	r26
    4c54:	bf 93       	push	r27
    4c56:	ef 93       	push	r30
    4c58:	ff 93       	push	r31
    4c5a:	e0 91 95 18 	lds	r30, 0x1895	; 0x801895 <_ser_handle+0x2>
    4c5e:	f0 91 96 18 	lds	r31, 0x1896	; 0x801896 <_ser_handle+0x3>
    4c62:	30 97       	sbiw	r30, 0x00	; 0
    4c64:	b9 f0       	breq	.+46     	; 0x4c94 <__vector_37+0x56>
    4c66:	02 80       	ldd	r0, Z+2	; 0x02
    4c68:	f3 81       	ldd	r31, Z+3	; 0x03
    4c6a:	e0 2d       	mov	r30, r0
    4c6c:	93 81       	ldd	r25, Z+3	; 0x03
    4c6e:	82 81       	ldd	r24, Z+2	; 0x02
    4c70:	98 17       	cp	r25, r24
    4c72:	b1 f0       	breq	.+44     	; 0x4ca0 <__vector_37+0x62>
    4c74:	92 81       	ldd	r25, Z+2	; 0x02
    4c76:	85 81       	ldd	r24, Z+5	; 0x05
    4c78:	28 2f       	mov	r18, r24
    4c7a:	26 95       	lsr	r18
    4c7c:	29 23       	and	r18, r25
    4c7e:	a0 81       	ld	r26, Z
    4c80:	b1 81       	ldd	r27, Z+1	; 0x01
    4c82:	a2 0f       	add	r26, r18
    4c84:	b1 1d       	adc	r27, r1
    4c86:	2c 91       	ld	r18, X
    4c88:	9f 5f       	subi	r25, 0xFF	; 255
    4c8a:	89 23       	and	r24, r25
    4c8c:	82 83       	std	Z+2, r24	; 0x02
    4c8e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4c92:	0b c0       	rjmp	.+22     	; 0x4caa <__vector_37+0x6c>
    4c94:	e9 ec       	ldi	r30, 0xC9	; 201
    4c96:	f0 e0       	ldi	r31, 0x00	; 0
    4c98:	80 81       	ld	r24, Z
    4c9a:	8f 7d       	andi	r24, 0xDF	; 223
    4c9c:	80 83       	st	Z, r24
    4c9e:	05 c0       	rjmp	.+10     	; 0x4caa <__vector_37+0x6c>
    4ca0:	e9 ec       	ldi	r30, 0xC9	; 201
    4ca2:	f0 e0       	ldi	r31, 0x00	; 0
    4ca4:	80 81       	ld	r24, Z
    4ca6:	8f 7d       	andi	r24, 0xDF	; 223
    4ca8:	80 83       	st	Z, r24
    4caa:	ff 91       	pop	r31
    4cac:	ef 91       	pop	r30
    4cae:	bf 91       	pop	r27
    4cb0:	af 91       	pop	r26
    4cb2:	9f 91       	pop	r25
    4cb4:	8f 91       	pop	r24
    4cb6:	2f 91       	pop	r18
    4cb8:	0f 90       	pop	r0
    4cba:	0b be       	out	0x3b, r0	; 59
    4cbc:	0f 90       	pop	r0
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	0f 90       	pop	r0
    4cc2:	1f 90       	pop	r1
    4cc4:	18 95       	reti

00004cc6 <__vector_51>:
    4cc6:	1f 92       	push	r1
    4cc8:	0f 92       	push	r0
    4cca:	0f b6       	in	r0, 0x3f	; 63
    4ccc:	0f 92       	push	r0
    4cce:	11 24       	eor	r1, r1
    4cd0:	0b b6       	in	r0, 0x3b	; 59
    4cd2:	0f 92       	push	r0
    4cd4:	2f 93       	push	r18
    4cd6:	3f 93       	push	r19
    4cd8:	4f 93       	push	r20
    4cda:	5f 93       	push	r21
    4cdc:	6f 93       	push	r22
    4cde:	7f 93       	push	r23
    4ce0:	8f 93       	push	r24
    4ce2:	9f 93       	push	r25
    4ce4:	af 93       	push	r26
    4ce6:	bf 93       	push	r27
    4ce8:	cf 93       	push	r28
    4cea:	df 93       	push	r29
    4cec:	ef 93       	push	r30
    4cee:	ff 93       	push	r31
    4cf0:	a0 91 97 18 	lds	r26, 0x1897	; 0x801897 <_ser_handle+0x4>
    4cf4:	b0 91 98 18 	lds	r27, 0x1898	; 0x801898 <_ser_handle+0x5>
    4cf8:	10 97       	sbiw	r26, 0x00	; 0
    4cfa:	11 f1       	breq	.+68     	; 0x4d40 <__vector_51+0x7a>
    4cfc:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4d00:	14 96       	adiw	r26, 0x04	; 4
    4d02:	ed 91       	ld	r30, X+
    4d04:	fc 91       	ld	r31, X
    4d06:	15 97       	sbiw	r26, 0x05	; 5
    4d08:	93 81       	ldd	r25, Z+3	; 0x03
    4d0a:	82 81       	ldd	r24, Z+2	; 0x02
    4d0c:	25 81       	ldd	r18, Z+5	; 0x05
    4d0e:	98 1b       	sub	r25, r24
    4d10:	92 23       	and	r25, r18
    4d12:	84 81       	ldd	r24, Z+4	; 0x04
    4d14:	98 17       	cp	r25, r24
    4d16:	61 f0       	breq	.+24     	; 0x4d30 <__vector_51+0x6a>
    4d18:	83 81       	ldd	r24, Z+3	; 0x03
    4d1a:	26 95       	lsr	r18
    4d1c:	28 23       	and	r18, r24
    4d1e:	c0 81       	ld	r28, Z
    4d20:	d1 81       	ldd	r29, Z+1	; 0x01
    4d22:	c2 0f       	add	r28, r18
    4d24:	d1 1d       	adc	r29, r1
    4d26:	68 83       	st	Y, r22
    4d28:	8f 5f       	subi	r24, 0xFF	; 255
    4d2a:	95 81       	ldd	r25, Z+5	; 0x05
    4d2c:	89 23       	and	r24, r25
    4d2e:	83 83       	std	Z+3, r24	; 0x03
    4d30:	16 96       	adiw	r26, 0x06	; 6
    4d32:	ed 91       	ld	r30, X+
    4d34:	fc 91       	ld	r31, X
    4d36:	17 97       	sbiw	r26, 0x07	; 7
    4d38:	30 97       	sbiw	r30, 0x00	; 0
    4d3a:	11 f0       	breq	.+4      	; 0x4d40 <__vector_51+0x7a>
    4d3c:	cd 01       	movw	r24, r26
    4d3e:	19 95       	eicall
    4d40:	ff 91       	pop	r31
    4d42:	ef 91       	pop	r30
    4d44:	df 91       	pop	r29
    4d46:	cf 91       	pop	r28
    4d48:	bf 91       	pop	r27
    4d4a:	af 91       	pop	r26
    4d4c:	9f 91       	pop	r25
    4d4e:	8f 91       	pop	r24
    4d50:	7f 91       	pop	r23
    4d52:	6f 91       	pop	r22
    4d54:	5f 91       	pop	r21
    4d56:	4f 91       	pop	r20
    4d58:	3f 91       	pop	r19
    4d5a:	2f 91       	pop	r18
    4d5c:	0f 90       	pop	r0
    4d5e:	0b be       	out	0x3b, r0	; 59
    4d60:	0f 90       	pop	r0
    4d62:	0f be       	out	0x3f, r0	; 63
    4d64:	0f 90       	pop	r0
    4d66:	1f 90       	pop	r1
    4d68:	18 95       	reti

00004d6a <__vector_52>:
    4d6a:	1f 92       	push	r1
    4d6c:	0f 92       	push	r0
    4d6e:	0f b6       	in	r0, 0x3f	; 63
    4d70:	0f 92       	push	r0
    4d72:	11 24       	eor	r1, r1
    4d74:	0b b6       	in	r0, 0x3b	; 59
    4d76:	0f 92       	push	r0
    4d78:	2f 93       	push	r18
    4d7a:	8f 93       	push	r24
    4d7c:	9f 93       	push	r25
    4d7e:	af 93       	push	r26
    4d80:	bf 93       	push	r27
    4d82:	ef 93       	push	r30
    4d84:	ff 93       	push	r31
    4d86:	e0 91 97 18 	lds	r30, 0x1897	; 0x801897 <_ser_handle+0x4>
    4d8a:	f0 91 98 18 	lds	r31, 0x1898	; 0x801898 <_ser_handle+0x5>
    4d8e:	30 97       	sbiw	r30, 0x00	; 0
    4d90:	b9 f0       	breq	.+46     	; 0x4dc0 <__vector_52+0x56>
    4d92:	02 80       	ldd	r0, Z+2	; 0x02
    4d94:	f3 81       	ldd	r31, Z+3	; 0x03
    4d96:	e0 2d       	mov	r30, r0
    4d98:	93 81       	ldd	r25, Z+3	; 0x03
    4d9a:	82 81       	ldd	r24, Z+2	; 0x02
    4d9c:	98 17       	cp	r25, r24
    4d9e:	b1 f0       	breq	.+44     	; 0x4dcc <__vector_52+0x62>
    4da0:	92 81       	ldd	r25, Z+2	; 0x02
    4da2:	85 81       	ldd	r24, Z+5	; 0x05
    4da4:	28 2f       	mov	r18, r24
    4da6:	26 95       	lsr	r18
    4da8:	29 23       	and	r18, r25
    4daa:	a0 81       	ld	r26, Z
    4dac:	b1 81       	ldd	r27, Z+1	; 0x01
    4dae:	a2 0f       	add	r26, r18
    4db0:	b1 1d       	adc	r27, r1
    4db2:	2c 91       	ld	r18, X
    4db4:	9f 5f       	subi	r25, 0xFF	; 255
    4db6:	89 23       	and	r24, r25
    4db8:	82 83       	std	Z+2, r24	; 0x02
    4dba:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4dbe:	0b c0       	rjmp	.+22     	; 0x4dd6 <__vector_52+0x6c>
    4dc0:	e1 ed       	ldi	r30, 0xD1	; 209
    4dc2:	f0 e0       	ldi	r31, 0x00	; 0
    4dc4:	80 81       	ld	r24, Z
    4dc6:	8f 7d       	andi	r24, 0xDF	; 223
    4dc8:	80 83       	st	Z, r24
    4dca:	05 c0       	rjmp	.+10     	; 0x4dd6 <__vector_52+0x6c>
    4dcc:	e1 ed       	ldi	r30, 0xD1	; 209
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	80 81       	ld	r24, Z
    4dd2:	8f 7d       	andi	r24, 0xDF	; 223
    4dd4:	80 83       	st	Z, r24
    4dd6:	ff 91       	pop	r31
    4dd8:	ef 91       	pop	r30
    4dda:	bf 91       	pop	r27
    4ddc:	af 91       	pop	r26
    4dde:	9f 91       	pop	r25
    4de0:	8f 91       	pop	r24
    4de2:	2f 91       	pop	r18
    4de4:	0f 90       	pop	r0
    4de6:	0b be       	out	0x3b, r0	; 59
    4de8:	0f 90       	pop	r0
    4dea:	0f be       	out	0x3f, r0	; 63
    4dec:	0f 90       	pop	r0
    4dee:	1f 90       	pop	r1
    4df0:	18 95       	reti

00004df2 <__vector_54>:
    4df2:	1f 92       	push	r1
    4df4:	0f 92       	push	r0
    4df6:	0f b6       	in	r0, 0x3f	; 63
    4df8:	0f 92       	push	r0
    4dfa:	11 24       	eor	r1, r1
    4dfc:	0b b6       	in	r0, 0x3b	; 59
    4dfe:	0f 92       	push	r0
    4e00:	2f 93       	push	r18
    4e02:	3f 93       	push	r19
    4e04:	4f 93       	push	r20
    4e06:	5f 93       	push	r21
    4e08:	6f 93       	push	r22
    4e0a:	7f 93       	push	r23
    4e0c:	8f 93       	push	r24
    4e0e:	9f 93       	push	r25
    4e10:	af 93       	push	r26
    4e12:	bf 93       	push	r27
    4e14:	cf 93       	push	r28
    4e16:	df 93       	push	r29
    4e18:	ef 93       	push	r30
    4e1a:	ff 93       	push	r31
    4e1c:	a0 91 99 18 	lds	r26, 0x1899	; 0x801899 <_ser_handle+0x6>
    4e20:	b0 91 9a 18 	lds	r27, 0x189A	; 0x80189a <_ser_handle+0x7>
    4e24:	10 97       	sbiw	r26, 0x00	; 0
    4e26:	11 f1       	breq	.+68     	; 0x4e6c <__vector_54+0x7a>
    4e28:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4e2c:	14 96       	adiw	r26, 0x04	; 4
    4e2e:	ed 91       	ld	r30, X+
    4e30:	fc 91       	ld	r31, X
    4e32:	15 97       	sbiw	r26, 0x05	; 5
    4e34:	93 81       	ldd	r25, Z+3	; 0x03
    4e36:	82 81       	ldd	r24, Z+2	; 0x02
    4e38:	25 81       	ldd	r18, Z+5	; 0x05
    4e3a:	98 1b       	sub	r25, r24
    4e3c:	92 23       	and	r25, r18
    4e3e:	84 81       	ldd	r24, Z+4	; 0x04
    4e40:	98 17       	cp	r25, r24
    4e42:	61 f0       	breq	.+24     	; 0x4e5c <__vector_54+0x6a>
    4e44:	83 81       	ldd	r24, Z+3	; 0x03
    4e46:	26 95       	lsr	r18
    4e48:	28 23       	and	r18, r24
    4e4a:	c0 81       	ld	r28, Z
    4e4c:	d1 81       	ldd	r29, Z+1	; 0x01
    4e4e:	c2 0f       	add	r28, r18
    4e50:	d1 1d       	adc	r29, r1
    4e52:	68 83       	st	Y, r22
    4e54:	8f 5f       	subi	r24, 0xFF	; 255
    4e56:	95 81       	ldd	r25, Z+5	; 0x05
    4e58:	89 23       	and	r24, r25
    4e5a:	83 83       	std	Z+3, r24	; 0x03
    4e5c:	16 96       	adiw	r26, 0x06	; 6
    4e5e:	ed 91       	ld	r30, X+
    4e60:	fc 91       	ld	r31, X
    4e62:	17 97       	sbiw	r26, 0x07	; 7
    4e64:	30 97       	sbiw	r30, 0x00	; 0
    4e66:	11 f0       	breq	.+4      	; 0x4e6c <__vector_54+0x7a>
    4e68:	cd 01       	movw	r24, r26
    4e6a:	19 95       	eicall
    4e6c:	ff 91       	pop	r31
    4e6e:	ef 91       	pop	r30
    4e70:	df 91       	pop	r29
    4e72:	cf 91       	pop	r28
    4e74:	bf 91       	pop	r27
    4e76:	af 91       	pop	r26
    4e78:	9f 91       	pop	r25
    4e7a:	8f 91       	pop	r24
    4e7c:	7f 91       	pop	r23
    4e7e:	6f 91       	pop	r22
    4e80:	5f 91       	pop	r21
    4e82:	4f 91       	pop	r20
    4e84:	3f 91       	pop	r19
    4e86:	2f 91       	pop	r18
    4e88:	0f 90       	pop	r0
    4e8a:	0b be       	out	0x3b, r0	; 59
    4e8c:	0f 90       	pop	r0
    4e8e:	0f be       	out	0x3f, r0	; 63
    4e90:	0f 90       	pop	r0
    4e92:	1f 90       	pop	r1
    4e94:	18 95       	reti

00004e96 <__vector_55>:
    4e96:	1f 92       	push	r1
    4e98:	0f 92       	push	r0
    4e9a:	0f b6       	in	r0, 0x3f	; 63
    4e9c:	0f 92       	push	r0
    4e9e:	11 24       	eor	r1, r1
    4ea0:	0b b6       	in	r0, 0x3b	; 59
    4ea2:	0f 92       	push	r0
    4ea4:	2f 93       	push	r18
    4ea6:	8f 93       	push	r24
    4ea8:	9f 93       	push	r25
    4eaa:	af 93       	push	r26
    4eac:	bf 93       	push	r27
    4eae:	ef 93       	push	r30
    4eb0:	ff 93       	push	r31
    4eb2:	e0 91 99 18 	lds	r30, 0x1899	; 0x801899 <_ser_handle+0x6>
    4eb6:	f0 91 9a 18 	lds	r31, 0x189A	; 0x80189a <_ser_handle+0x7>
    4eba:	30 97       	sbiw	r30, 0x00	; 0
    4ebc:	b9 f0       	breq	.+46     	; 0x4eec <__vector_55+0x56>
    4ebe:	02 80       	ldd	r0, Z+2	; 0x02
    4ec0:	f3 81       	ldd	r31, Z+3	; 0x03
    4ec2:	e0 2d       	mov	r30, r0
    4ec4:	93 81       	ldd	r25, Z+3	; 0x03
    4ec6:	82 81       	ldd	r24, Z+2	; 0x02
    4ec8:	98 17       	cp	r25, r24
    4eca:	b1 f0       	breq	.+44     	; 0x4ef8 <__vector_55+0x62>
    4ecc:	92 81       	ldd	r25, Z+2	; 0x02
    4ece:	85 81       	ldd	r24, Z+5	; 0x05
    4ed0:	28 2f       	mov	r18, r24
    4ed2:	26 95       	lsr	r18
    4ed4:	29 23       	and	r18, r25
    4ed6:	a0 81       	ld	r26, Z
    4ed8:	b1 81       	ldd	r27, Z+1	; 0x01
    4eda:	a2 0f       	add	r26, r18
    4edc:	b1 1d       	adc	r27, r1
    4ede:	2c 91       	ld	r18, X
    4ee0:	9f 5f       	subi	r25, 0xFF	; 255
    4ee2:	89 23       	and	r24, r25
    4ee4:	82 83       	std	Z+2, r24	; 0x02
    4ee6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4eea:	0b c0       	rjmp	.+22     	; 0x4f02 <__vector_55+0x6c>
    4eec:	e1 e3       	ldi	r30, 0x31	; 49
    4eee:	f1 e0       	ldi	r31, 0x01	; 1
    4ef0:	80 81       	ld	r24, Z
    4ef2:	8f 7d       	andi	r24, 0xDF	; 223
    4ef4:	80 83       	st	Z, r24
    4ef6:	05 c0       	rjmp	.+10     	; 0x4f02 <__vector_55+0x6c>
    4ef8:	e1 e3       	ldi	r30, 0x31	; 49
    4efa:	f1 e0       	ldi	r31, 0x01	; 1
    4efc:	80 81       	ld	r24, Z
    4efe:	8f 7d       	andi	r24, 0xDF	; 223
    4f00:	80 83       	st	Z, r24
    4f02:	ff 91       	pop	r31
    4f04:	ef 91       	pop	r30
    4f06:	bf 91       	pop	r27
    4f08:	af 91       	pop	r26
    4f0a:	9f 91       	pop	r25
    4f0c:	8f 91       	pop	r24
    4f0e:	2f 91       	pop	r18
    4f10:	0f 90       	pop	r0
    4f12:	0b be       	out	0x3b, r0	; 59
    4f14:	0f 90       	pop	r0
    4f16:	0f be       	out	0x3f, r0	; 63
    4f18:	0f 90       	pop	r0
    4f1a:	1f 90       	pop	r1
    4f1c:	18 95       	reti

00004f1e <usart_getchar>:
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29
    4f22:	1f 92       	push	r1
    4f24:	cd b7       	in	r28, 0x3d	; 61
    4f26:	de b7       	in	r29, 0x3e	; 62
    4f28:	be 01       	movw	r22, r28
    4f2a:	6f 5f       	subi	r22, 0xFF	; 255
    4f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f2e:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <_com_serial_instance>
    4f32:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <_com_serial_instance+0x1>
    4f36:	7b dd       	rcall	.-1290   	; 0x4a2e <serial_getByte>
    4f38:	81 11       	cpse	r24, r1
    4f3a:	f6 cf       	rjmp	.-20     	; 0x4f28 <usart_getchar+0xa>
    4f3c:	89 81       	ldd	r24, Y+1	; 0x01
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	0f 90       	pop	r0
    4f42:	df 91       	pop	r29
    4f44:	cf 91       	pop	r28
    4f46:	08 95       	ret

00004f48 <usart_putchar>:
    4f48:	68 2f       	mov	r22, r24
    4f4a:	80 91 9b 18 	lds	r24, 0x189B	; 0x80189b <_com_serial_instance>
    4f4e:	90 91 9c 18 	lds	r25, 0x189C	; 0x80189c <_com_serial_instance+0x1>
    4f52:	ed dc       	rcall	.-1574   	; 0x492e <serial_sendByte>
    4f54:	80 e0       	ldi	r24, 0x00	; 0
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	08 95       	ret

00004f5a <stdio_initialise>:
    4f5a:	8f 92       	push	r8
    4f5c:	9f 92       	push	r9
    4f5e:	af 92       	push	r10
    4f60:	cf 92       	push	r12
    4f62:	ef 92       	push	r14
    4f64:	0f 93       	push	r16
    4f66:	81 2c       	mov	r8, r1
    4f68:	91 2c       	mov	r9, r1
    4f6a:	68 94       	set
    4f6c:	aa 24       	eor	r10, r10
    4f6e:	a7 f8       	bld	r10, 7
    4f70:	68 94       	set
    4f72:	cc 24       	eor	r12, r12
    4f74:	c7 f8       	bld	r12, 7
    4f76:	e1 2c       	mov	r14, r1
    4f78:	00 e0       	ldi	r16, 0x00	; 0
    4f7a:	23 e0       	ldi	r18, 0x03	; 3
    4f7c:	40 e0       	ldi	r20, 0x00	; 0
    4f7e:	51 ee       	ldi	r21, 0xE1	; 225
    4f80:	60 e0       	ldi	r22, 0x00	; 0
    4f82:	70 e0       	ldi	r23, 0x00	; 0
    4f84:	2e dc       	rcall	.-1956   	; 0x47e2 <serial_create>
    4f86:	90 93 9c 18 	sts	0x189C, r25	; 0x80189c <_com_serial_instance+0x1>
    4f8a:	80 93 9b 18 	sts	0x189B, r24	; 0x80189b <_com_serial_instance>
    4f8e:	e1 ed       	ldi	r30, 0xD1	; 209
    4f90:	f8 e1       	ldi	r31, 0x18	; 24
    4f92:	83 e1       	ldi	r24, 0x13	; 19
    4f94:	92 e0       	ldi	r25, 0x02	; 2
    4f96:	91 83       	std	Z+1, r25	; 0x01
    4f98:	80 83       	st	Z, r24
    4f9a:	93 83       	std	Z+3, r25	; 0x03
    4f9c:	82 83       	std	Z+2, r24	; 0x02
    4f9e:	0f 91       	pop	r16
    4fa0:	ef 90       	pop	r14
    4fa2:	cf 90       	pop	r12
    4fa4:	af 90       	pop	r10
    4fa6:	9f 90       	pop	r9
    4fa8:	8f 90       	pop	r8
    4faa:	08 95       	ret

00004fac <_turn_off>:
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	fc 01       	movw	r30, r24
    4fb0:	ee 0f       	add	r30, r30
    4fb2:	ff 1f       	adc	r31, r31
    4fb4:	e8 0f       	add	r30, r24
    4fb6:	f9 1f       	adc	r31, r25
    4fb8:	ee 0f       	add	r30, r30
    4fba:	ff 1f       	adc	r31, r31
    4fbc:	e3 56       	subi	r30, 0x63	; 99
    4fbe:	f7 4e       	sbci	r31, 0xE7	; 231
    4fc0:	23 81       	ldd	r18, Z+3	; 0x03
    4fc2:	21 11       	cpse	r18, r1
    4fc4:	1f c0       	rjmp	.+62     	; 0x5004 <_turn_off+0x58>
    4fc6:	9c 01       	movw	r18, r24
    4fc8:	22 0f       	add	r18, r18
    4fca:	33 1f       	adc	r19, r19
    4fcc:	f9 01       	movw	r30, r18
    4fce:	e8 0f       	add	r30, r24
    4fd0:	f9 1f       	adc	r31, r25
    4fd2:	ee 0f       	add	r30, r30
    4fd4:	ff 1f       	adc	r31, r31
    4fd6:	e3 56       	subi	r30, 0x63	; 99
    4fd8:	f7 4e       	sbci	r31, 0xE7	; 231
    4fda:	a0 81       	ld	r26, Z
    4fdc:	b1 81       	ldd	r27, Z+1	; 0x01
    4fde:	4c 91       	ld	r20, X
    4fe0:	f9 01       	movw	r30, r18
    4fe2:	e8 0f       	add	r30, r24
    4fe4:	f9 1f       	adc	r31, r25
    4fe6:	ee 0f       	add	r30, r30
    4fe8:	ff 1f       	adc	r31, r31
    4fea:	e3 56       	subi	r30, 0x63	; 99
    4fec:	f7 4e       	sbci	r31, 0xE7	; 231
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	02 80       	ldd	r0, Z+2	; 0x02
    4ff4:	02 c0       	rjmp	.+4      	; 0x4ffa <_turn_off+0x4e>
    4ff6:	88 0f       	add	r24, r24
    4ff8:	99 1f       	adc	r25, r25
    4ffa:	0a 94       	dec	r0
    4ffc:	e2 f7       	brpl	.-8      	; 0x4ff6 <_turn_off+0x4a>
    4ffe:	84 2b       	or	r24, r20
    5000:	8c 93       	st	X, r24
    5002:	08 95       	ret
    5004:	fc 01       	movw	r30, r24
    5006:	ee 0f       	add	r30, r30
    5008:	ff 1f       	adc	r31, r31
    500a:	df 01       	movw	r26, r30
    500c:	a8 0f       	add	r26, r24
    500e:	b9 1f       	adc	r27, r25
    5010:	aa 0f       	add	r26, r26
    5012:	bb 1f       	adc	r27, r27
    5014:	a3 56       	subi	r26, 0x63	; 99
    5016:	b7 4e       	sbci	r27, 0xE7	; 231
    5018:	0d 90       	ld	r0, X+
    501a:	bc 91       	ld	r27, X
    501c:	a0 2d       	mov	r26, r0
    501e:	2c 91       	ld	r18, X
    5020:	e8 0f       	add	r30, r24
    5022:	f9 1f       	adc	r31, r25
    5024:	ee 0f       	add	r30, r30
    5026:	ff 1f       	adc	r31, r31
    5028:	e3 56       	subi	r30, 0x63	; 99
    502a:	f7 4e       	sbci	r31, 0xE7	; 231
    502c:	81 e0       	ldi	r24, 0x01	; 1
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	02 80       	ldd	r0, Z+2	; 0x02
    5032:	02 c0       	rjmp	.+4      	; 0x5038 <_turn_off+0x8c>
    5034:	88 0f       	add	r24, r24
    5036:	99 1f       	adc	r25, r25
    5038:	0a 94       	dec	r0
    503a:	e2 f7       	brpl	.-8      	; 0x5034 <_turn_off+0x88>
    503c:	80 95       	com	r24
    503e:	82 23       	and	r24, r18
    5040:	8c 93       	st	X, r24
    5042:	08 95       	ret

00005044 <_turn_on>:
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	fc 01       	movw	r30, r24
    5048:	ee 0f       	add	r30, r30
    504a:	ff 1f       	adc	r31, r31
    504c:	e8 0f       	add	r30, r24
    504e:	f9 1f       	adc	r31, r25
    5050:	ee 0f       	add	r30, r30
    5052:	ff 1f       	adc	r31, r31
    5054:	e3 56       	subi	r30, 0x63	; 99
    5056:	f7 4e       	sbci	r31, 0xE7	; 231
    5058:	23 81       	ldd	r18, Z+3	; 0x03
    505a:	21 11       	cpse	r18, r1
    505c:	20 c0       	rjmp	.+64     	; 0x509e <_turn_on+0x5a>
    505e:	9c 01       	movw	r18, r24
    5060:	22 0f       	add	r18, r18
    5062:	33 1f       	adc	r19, r19
    5064:	f9 01       	movw	r30, r18
    5066:	e8 0f       	add	r30, r24
    5068:	f9 1f       	adc	r31, r25
    506a:	ee 0f       	add	r30, r30
    506c:	ff 1f       	adc	r31, r31
    506e:	e3 56       	subi	r30, 0x63	; 99
    5070:	f7 4e       	sbci	r31, 0xE7	; 231
    5072:	a0 81       	ld	r26, Z
    5074:	b1 81       	ldd	r27, Z+1	; 0x01
    5076:	4c 91       	ld	r20, X
    5078:	f9 01       	movw	r30, r18
    507a:	e8 0f       	add	r30, r24
    507c:	f9 1f       	adc	r31, r25
    507e:	ee 0f       	add	r30, r30
    5080:	ff 1f       	adc	r31, r31
    5082:	e3 56       	subi	r30, 0x63	; 99
    5084:	f7 4e       	sbci	r31, 0xE7	; 231
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	02 80       	ldd	r0, Z+2	; 0x02
    508c:	02 c0       	rjmp	.+4      	; 0x5092 <_turn_on+0x4e>
    508e:	88 0f       	add	r24, r24
    5090:	99 1f       	adc	r25, r25
    5092:	0a 94       	dec	r0
    5094:	e2 f7       	brpl	.-8      	; 0x508e <_turn_on+0x4a>
    5096:	80 95       	com	r24
    5098:	84 23       	and	r24, r20
    509a:	8c 93       	st	X, r24
    509c:	08 95       	ret
    509e:	fc 01       	movw	r30, r24
    50a0:	ee 0f       	add	r30, r30
    50a2:	ff 1f       	adc	r31, r31
    50a4:	df 01       	movw	r26, r30
    50a6:	a8 0f       	add	r26, r24
    50a8:	b9 1f       	adc	r27, r25
    50aa:	aa 0f       	add	r26, r26
    50ac:	bb 1f       	adc	r27, r27
    50ae:	a3 56       	subi	r26, 0x63	; 99
    50b0:	b7 4e       	sbci	r27, 0xE7	; 231
    50b2:	0d 90       	ld	r0, X+
    50b4:	bc 91       	ld	r27, X
    50b6:	a0 2d       	mov	r26, r0
    50b8:	2c 91       	ld	r18, X
    50ba:	e8 0f       	add	r30, r24
    50bc:	f9 1f       	adc	r31, r25
    50be:	ee 0f       	add	r30, r30
    50c0:	ff 1f       	adc	r31, r31
    50c2:	e3 56       	subi	r30, 0x63	; 99
    50c4:	f7 4e       	sbci	r31, 0xE7	; 231
    50c6:	81 e0       	ldi	r24, 0x01	; 1
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	02 80       	ldd	r0, Z+2	; 0x02
    50cc:	02 c0       	rjmp	.+4      	; 0x50d2 <_turn_on+0x8e>
    50ce:	88 0f       	add	r24, r24
    50d0:	99 1f       	adc	r25, r25
    50d2:	0a 94       	dec	r0
    50d4:	e2 f7       	brpl	.-8      	; 0x50ce <_turn_on+0x8a>
    50d6:	82 2b       	or	r24, r18
    50d8:	8c 93       	st	X, r24
    50da:	08 95       	ret

000050dc <_hal_led_task>:
    50dc:	cc 24       	eor	r12, r12
    50de:	c3 94       	inc	r12
    50e0:	d1 2c       	mov	r13, r1
    50e2:	68 94       	set
    50e4:	bb 24       	eor	r11, r11
    50e6:	b2 f8       	bld	r11, 2
    50e8:	cd e9       	ldi	r28, 0x9D	; 157
    50ea:	d8 e1       	ldi	r29, 0x18	; 24
    50ec:	10 e0       	ldi	r17, 0x00	; 0
    50ee:	8c 81       	ldd	r24, Y+4	; 0x04
    50f0:	81 30       	cpi	r24, 0x01	; 1
    50f2:	81 f0       	breq	.+32     	; 0x5114 <_hal_led_task+0x38>
    50f4:	18 f1       	brcs	.+70     	; 0x513c <_hal_led_task+0x60>
    50f6:	82 30       	cpi	r24, 0x02	; 2
    50f8:	61 f5       	brne	.+88     	; 0x5152 <_hal_led_task+0x76>
    50fa:	e8 81       	ld	r30, Y
    50fc:	f9 81       	ldd	r31, Y+1	; 0x01
    50fe:	20 81       	ld	r18, Z
    5100:	c6 01       	movw	r24, r12
    5102:	0a 80       	ldd	r0, Y+2	; 0x02
    5104:	02 c0       	rjmp	.+4      	; 0x510a <_hal_led_task+0x2e>
    5106:	88 0f       	add	r24, r24
    5108:	99 1f       	adc	r25, r25
    510a:	0a 94       	dec	r0
    510c:	e2 f7       	brpl	.-8      	; 0x5106 <_hal_led_task+0x2a>
    510e:	82 27       	eor	r24, r18
    5110:	80 83       	st	Z, r24
    5112:	1f c0       	rjmp	.+62     	; 0x5152 <_hal_led_task+0x76>
    5114:	8d 81       	ldd	r24, Y+5	; 0x05
    5116:	8f 5f       	subi	r24, 0xFF	; 255
    5118:	86 30       	cpi	r24, 0x06	; 6
    511a:	10 f4       	brcc	.+4      	; 0x5120 <_hal_led_task+0x44>
    511c:	8d 83       	std	Y+5, r24	; 0x05
    511e:	19 c0       	rjmp	.+50     	; 0x5152 <_hal_led_task+0x76>
    5120:	1d 82       	std	Y+5, r1	; 0x05
    5122:	e8 81       	ld	r30, Y
    5124:	f9 81       	ldd	r31, Y+1	; 0x01
    5126:	20 81       	ld	r18, Z
    5128:	c6 01       	movw	r24, r12
    512a:	0a 80       	ldd	r0, Y+2	; 0x02
    512c:	02 c0       	rjmp	.+4      	; 0x5132 <_hal_led_task+0x56>
    512e:	88 0f       	add	r24, r24
    5130:	99 1f       	adc	r25, r25
    5132:	0a 94       	dec	r0
    5134:	e2 f7       	brpl	.-8      	; 0x512e <_hal_led_task+0x52>
    5136:	82 27       	eor	r24, r18
    5138:	80 83       	st	Z, r24
    513a:	0b c0       	rjmp	.+22     	; 0x5152 <_hal_led_task+0x76>
    513c:	0d 81       	ldd	r16, Y+5	; 0x05
    513e:	00 23       	and	r16, r16
    5140:	29 f0       	breq	.+10     	; 0x514c <_hal_led_task+0x70>
    5142:	81 2f       	mov	r24, r17
    5144:	7f df       	rcall	.-258    	; 0x5044 <_turn_on>
    5146:	01 50       	subi	r16, 0x01	; 1
    5148:	0d 83       	std	Y+5, r16	; 0x05
    514a:	03 c0       	rjmp	.+6      	; 0x5152 <_hal_led_task+0x76>
    514c:	bc 82       	std	Y+4, r11	; 0x04
    514e:	81 2f       	mov	r24, r17
    5150:	2d df       	rcall	.-422    	; 0x4fac <_turn_off>
    5152:	1f 5f       	subi	r17, 0xFF	; 255
    5154:	26 96       	adiw	r28, 0x06	; 6
    5156:	14 30       	cpi	r17, 0x04	; 4
    5158:	51 f6       	brne	.-108    	; 0x50ee <_hal_led_task+0x12>
    515a:	6c e0       	ldi	r22, 0x0C	; 12
    515c:	70 e0       	ldi	r23, 0x00	; 0
    515e:	80 e0       	ldi	r24, 0x00	; 0
    5160:	90 e0       	ldi	r25, 0x00	; 0
    5162:	0e 94 ed 11 	call	0x23da	; 0x23da <vTaskDelay>
    5166:	c0 cf       	rjmp	.-128    	; 0x50e8 <_hal_led_task+0xc>

00005168 <status_leds_initialise>:
    5168:	ef 92       	push	r14
    516a:	ff 92       	push	r15
    516c:	0f 93       	push	r16
    516e:	1f 93       	push	r17
    5170:	cf 93       	push	r28
    5172:	df 93       	push	r29
    5174:	08 2f       	mov	r16, r24
    5176:	80 e4       	ldi	r24, 0x40	; 64
    5178:	87 b9       	out	0x07, r24	; 7
    517a:	cd e9       	ldi	r28, 0x9D	; 157
    517c:	d8 e1       	ldi	r29, 0x18	; 24
    517e:	0f 2e       	mov	r0, r31
    5180:	f8 e2       	ldi	r31, 0x28	; 40
    5182:	ef 2e       	mov	r14, r31
    5184:	f1 2c       	mov	r15, r1
    5186:	f0 2d       	mov	r31, r0
    5188:	f9 82       	std	Y+1, r15	; 0x01
    518a:	e8 82       	st	Y, r14
    518c:	86 e0       	ldi	r24, 0x06	; 6
    518e:	8a 83       	std	Y+2, r24	; 0x02
    5190:	1b 82       	std	Y+3, r1	; 0x03
    5192:	14 e0       	ldi	r17, 0x04	; 4
    5194:	1c 83       	std	Y+4, r17	; 0x04
    5196:	80 e0       	ldi	r24, 0x00	; 0
    5198:	09 df       	rcall	.-494    	; 0x4fac <_turn_off>
    519a:	80 e8       	ldi	r24, 0x80	; 128
    519c:	87 b9       	out	0x07, r24	; 7
    519e:	ff 82       	std	Y+7, r15	; 0x07
    51a0:	ee 82       	std	Y+6, r14	; 0x06
    51a2:	87 e0       	ldi	r24, 0x07	; 7
    51a4:	88 87       	std	Y+8, r24	; 0x08
    51a6:	19 86       	std	Y+9, r1	; 0x09
    51a8:	1a 87       	std	Y+10, r17	; 0x0a
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	ff de       	rcall	.-514    	; 0x4fac <_turn_off>
    51ae:	80 e2       	ldi	r24, 0x20	; 32
    51b0:	83 bb       	out	0x13, r24	; 19
    51b2:	84 e3       	ldi	r24, 0x34	; 52
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	9d 87       	std	Y+13, r25	; 0x0d
    51b8:	8c 87       	std	Y+12, r24	; 0x0c
    51ba:	85 e0       	ldi	r24, 0x05	; 5
    51bc:	8e 87       	std	Y+14, r24	; 0x0e
    51be:	1f 86       	std	Y+15, r1	; 0x0f
    51c0:	18 8b       	std	Y+16, r17	; 0x10
    51c2:	82 e0       	ldi	r24, 0x02	; 2
    51c4:	f3 de       	rcall	.-538    	; 0x4fac <_turn_off>
    51c6:	80 e1       	ldi	r24, 0x10	; 16
    51c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    51cc:	82 e0       	ldi	r24, 0x02	; 2
    51ce:	91 e0       	ldi	r25, 0x01	; 1
    51d0:	9b 8b       	std	Y+19, r25	; 0x13
    51d2:	8a 8b       	std	Y+18, r24	; 0x12
    51d4:	1c 8b       	std	Y+20, r17	; 0x14
    51d6:	1d 8a       	std	Y+21, r1	; 0x15
    51d8:	1e 8b       	std	Y+22, r17	; 0x16
    51da:	83 e0       	ldi	r24, 0x03	; 3
    51dc:	e7 de       	rcall	.-562    	; 0x4fac <_turn_off>
    51de:	e1 2c       	mov	r14, r1
    51e0:	f1 2c       	mov	r15, r1
    51e2:	20 e0       	ldi	r18, 0x00	; 0
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	40 ec       	ldi	r20, 0xC0	; 192
    51e8:	50 e0       	ldi	r21, 0x00	; 0
    51ea:	66 eb       	ldi	r22, 0xB6	; 182
    51ec:	78 e0       	ldi	r23, 0x08	; 8
    51ee:	8e e6       	ldi	r24, 0x6E	; 110
    51f0:	98 e2       	ldi	r25, 0x28	; 40
    51f2:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <xTaskCreate>
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	1f 91       	pop	r17
    51fc:	0f 91       	pop	r16
    51fe:	ff 90       	pop	r15
    5200:	ef 90       	pop	r14
    5202:	08 95       	ret

00005204 <status_leds_slowBlink>:
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	fc 01       	movw	r30, r24
    520c:	ee 0f       	add	r30, r30
    520e:	ff 1f       	adc	r31, r31
    5210:	df 01       	movw	r26, r30
    5212:	a8 0f       	add	r26, r24
    5214:	b9 1f       	adc	r27, r25
    5216:	aa 0f       	add	r26, r26
    5218:	bb 1f       	adc	r27, r27
    521a:	a3 56       	subi	r26, 0x63	; 99
    521c:	b7 4e       	sbci	r27, 0xE7	; 231
    521e:	cd 91       	ld	r28, X+
    5220:	dc 91       	ld	r29, X
    5222:	11 97       	sbiw	r26, 0x01	; 1
    5224:	48 81       	ld	r20, Y
    5226:	21 e0       	ldi	r18, 0x01	; 1
    5228:	30 e0       	ldi	r19, 0x00	; 0
    522a:	12 96       	adiw	r26, 0x02	; 2
    522c:	0c 90       	ld	r0, X
    522e:	12 97       	sbiw	r26, 0x02	; 2
    5230:	02 c0       	rjmp	.+4      	; 0x5236 <status_leds_slowBlink+0x32>
    5232:	22 0f       	add	r18, r18
    5234:	33 1f       	adc	r19, r19
    5236:	0a 94       	dec	r0
    5238:	e2 f7       	brpl	.-8      	; 0x5232 <status_leds_slowBlink+0x2e>
    523a:	24 27       	eor	r18, r20
    523c:	28 83       	st	Y, r18
    523e:	fd 01       	movw	r30, r26
    5240:	81 e0       	ldi	r24, 0x01	; 1
    5242:	84 83       	std	Z+4, r24	; 0x04
    5244:	df 91       	pop	r29
    5246:	cf 91       	pop	r28
    5248:	08 95       	ret

0000524a <status_leds_fastBlink>:
    524a:	cf 93       	push	r28
    524c:	df 93       	push	r29
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	fc 01       	movw	r30, r24
    5252:	ee 0f       	add	r30, r30
    5254:	ff 1f       	adc	r31, r31
    5256:	df 01       	movw	r26, r30
    5258:	a8 0f       	add	r26, r24
    525a:	b9 1f       	adc	r27, r25
    525c:	aa 0f       	add	r26, r26
    525e:	bb 1f       	adc	r27, r27
    5260:	a3 56       	subi	r26, 0x63	; 99
    5262:	b7 4e       	sbci	r27, 0xE7	; 231
    5264:	cd 91       	ld	r28, X+
    5266:	dc 91       	ld	r29, X
    5268:	11 97       	sbiw	r26, 0x01	; 1
    526a:	48 81       	ld	r20, Y
    526c:	21 e0       	ldi	r18, 0x01	; 1
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	12 96       	adiw	r26, 0x02	; 2
    5272:	0c 90       	ld	r0, X
    5274:	12 97       	sbiw	r26, 0x02	; 2
    5276:	02 c0       	rjmp	.+4      	; 0x527c <status_leds_fastBlink+0x32>
    5278:	22 0f       	add	r18, r18
    527a:	33 1f       	adc	r19, r19
    527c:	0a 94       	dec	r0
    527e:	e2 f7       	brpl	.-8      	; 0x5278 <status_leds_fastBlink+0x2e>
    5280:	24 27       	eor	r18, r20
    5282:	28 83       	st	Y, r18
    5284:	fd 01       	movw	r30, r26
    5286:	82 e0       	ldi	r24, 0x02	; 2
    5288:	84 83       	std	Z+4, r24	; 0x04
    528a:	df 91       	pop	r29
    528c:	cf 91       	pop	r28
    528e:	08 95       	ret

00005290 <status_leds_ledOn>:
    5290:	28 2f       	mov	r18, r24
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	f9 01       	movw	r30, r18
    5296:	ee 0f       	add	r30, r30
    5298:	ff 1f       	adc	r31, r31
    529a:	e2 0f       	add	r30, r18
    529c:	f3 1f       	adc	r31, r19
    529e:	ee 0f       	add	r30, r30
    52a0:	ff 1f       	adc	r31, r31
    52a2:	e3 56       	subi	r30, 0x63	; 99
    52a4:	f7 4e       	sbci	r31, 0xE7	; 231
    52a6:	93 e0       	ldi	r25, 0x03	; 3
    52a8:	94 83       	std	Z+4, r25	; 0x04
    52aa:	cc ce       	rjmp	.-616    	; 0x5044 <_turn_on>
    52ac:	08 95       	ret

000052ae <status_leds_ledOff>:
    52ae:	28 2f       	mov	r18, r24
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	f9 01       	movw	r30, r18
    52b4:	ee 0f       	add	r30, r30
    52b6:	ff 1f       	adc	r31, r31
    52b8:	e2 0f       	add	r30, r18
    52ba:	f3 1f       	adc	r31, r19
    52bc:	ee 0f       	add	r30, r30
    52be:	ff 1f       	adc	r31, r31
    52c0:	e3 56       	subi	r30, 0x63	; 99
    52c2:	f7 4e       	sbci	r31, 0xE7	; 231
    52c4:	94 e0       	ldi	r25, 0x04	; 4
    52c6:	94 83       	std	Z+4, r25	; 0x04
    52c8:	71 ce       	rjmp	.-798    	; 0x4fac <_turn_off>
    52ca:	08 95       	ret

000052cc <status_leds_longPuls>:
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	fc 01       	movw	r30, r24
    52d0:	ee 0f       	add	r30, r30
    52d2:	ff 1f       	adc	r31, r31
    52d4:	df 01       	movw	r26, r30
    52d6:	a8 0f       	add	r26, r24
    52d8:	b9 1f       	adc	r27, r25
    52da:	aa 0f       	add	r26, r26
    52dc:	bb 1f       	adc	r27, r27
    52de:	a3 56       	subi	r26, 0x63	; 99
    52e0:	b7 4e       	sbci	r27, 0xE7	; 231
    52e2:	26 e0       	ldi	r18, 0x06	; 6
    52e4:	15 96       	adiw	r26, 0x05	; 5
    52e6:	2c 93       	st	X, r18
    52e8:	15 97       	sbiw	r26, 0x05	; 5
    52ea:	fd 01       	movw	r30, r26
    52ec:	14 82       	std	Z+4, r1	; 0x04
    52ee:	08 95       	ret

000052f0 <status_leds_shortPuls>:
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	fc 01       	movw	r30, r24
    52f4:	ee 0f       	add	r30, r30
    52f6:	ff 1f       	adc	r31, r31
    52f8:	df 01       	movw	r26, r30
    52fa:	a8 0f       	add	r26, r24
    52fc:	b9 1f       	adc	r27, r25
    52fe:	aa 0f       	add	r26, r26
    5300:	bb 1f       	adc	r27, r27
    5302:	a3 56       	subi	r26, 0x63	; 99
    5304:	b7 4e       	sbci	r27, 0xE7	; 231
    5306:	15 96       	adiw	r26, 0x05	; 5
    5308:	1c 92       	st	X, r1
    530a:	15 97       	sbiw	r26, 0x05	; 5
    530c:	fd 01       	movw	r30, r26
    530e:	14 82       	std	Z+4, r1	; 0x04
    5310:	08 95       	ret

00005312 <_initTwiInterface>:
    5312:	80 91 c3 18 	lds	r24, 0x18C3	; 0x8018c3 <_twiIsInitiated>
    5316:	81 11       	cpse	r24, r1
    5318:	0c c0       	rjmp	.+24     	; 0x5332 <_initTwiInterface+0x20>
    531a:	8c e0       	ldi	r24, 0x0C	; 12
    531c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5320:	8f ef       	ldi	r24, 0xFF	; 255
    5322:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5326:	84 e0       	ldi	r24, 0x04	; 4
    5328:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    532c:	81 e0       	ldi	r24, 0x01	; 1
    532e:	80 93 c3 18 	sts	0x18C3, r24	; 0x8018c3 <_twiIsInitiated>
    5332:	08 95       	ret

00005334 <twiCreate>:
    5334:	af 92       	push	r10
    5336:	bf 92       	push	r11
    5338:	cf 92       	push	r12
    533a:	df 92       	push	r13
    533c:	ef 92       	push	r14
    533e:	ff 92       	push	r15
    5340:	0f 93       	push	r16
    5342:	1f 93       	push	r17
    5344:	cf 93       	push	r28
    5346:	df 93       	push	r29
    5348:	a8 2e       	mov	r10, r24
    534a:	b6 2e       	mov	r11, r22
    534c:	69 01       	movw	r12, r18
    534e:	7a 01       	movw	r14, r20
    5350:	84 e0       	ldi	r24, 0x04	; 4
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	61 d7       	rcall	.+3778   	; 0x6218 <malloc>
    5356:	ec 01       	movw	r28, r24
    5358:	89 2b       	or	r24, r25
    535a:	61 f1       	breq	.+88     	; 0x53b4 <twiCreate+0x80>
    535c:	a8 82       	st	Y, r10
    535e:	81 e0       	ldi	r24, 0x01	; 1
    5360:	b8 12       	cpse	r11, r24
    5362:	12 c0       	rjmp	.+36     	; 0x5388 <twiCreate+0x54>
    5364:	c7 01       	movw	r24, r14
    5366:	b6 01       	movw	r22, r12
    5368:	20 ea       	ldi	r18, 0xA0	; 160
    536a:	36 e8       	ldi	r19, 0x86	; 134
    536c:	41 e0       	ldi	r20, 0x01	; 1
    536e:	50 e0       	ldi	r21, 0x00	; 0
    5370:	15 d7       	rcall	.+3626   	; 0x619c <__udivmodsi4>
    5372:	da 01       	movw	r26, r20
    5374:	c9 01       	movw	r24, r18
    5376:	40 97       	sbiw	r24, 0x10	; 16
    5378:	a1 09       	sbc	r26, r1
    537a:	b1 09       	sbc	r27, r1
    537c:	b6 95       	lsr	r27
    537e:	a7 95       	ror	r26
    5380:	97 95       	ror	r25
    5382:	87 95       	ror	r24
    5384:	89 83       	std	Y+1, r24	; 0x01
    5386:	11 c0       	rjmp	.+34     	; 0x53aa <twiCreate+0x76>
    5388:	c7 01       	movw	r24, r14
    538a:	b6 01       	movw	r22, r12
    538c:	20 e8       	ldi	r18, 0x80	; 128
    538e:	3a e1       	ldi	r19, 0x1A	; 26
    5390:	46 e0       	ldi	r20, 0x06	; 6
    5392:	50 e0       	ldi	r21, 0x00	; 0
    5394:	03 d7       	rcall	.+3590   	; 0x619c <__udivmodsi4>
    5396:	da 01       	movw	r26, r20
    5398:	c9 01       	movw	r24, r18
    539a:	40 97       	sbiw	r24, 0x10	; 16
    539c:	a1 09       	sbc	r26, r1
    539e:	b1 09       	sbc	r27, r1
    53a0:	b6 95       	lsr	r27
    53a2:	a7 95       	ror	r26
    53a4:	97 95       	ror	r25
    53a6:	87 95       	ror	r24
    53a8:	89 83       	std	Y+1, r24	; 0x01
    53aa:	1b 83       	std	Y+3, r17	; 0x03
    53ac:	0a 83       	std	Y+2, r16	; 0x02
    53ae:	8c 2f       	mov	r24, r28
    53b0:	9d 2f       	mov	r25, r29
    53b2:	02 c0       	rjmp	.+4      	; 0x53b8 <twiCreate+0x84>
    53b4:	80 e0       	ldi	r24, 0x00	; 0
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	df 91       	pop	r29
    53ba:	cf 91       	pop	r28
    53bc:	1f 91       	pop	r17
    53be:	0f 91       	pop	r16
    53c0:	ff 90       	pop	r15
    53c2:	ef 90       	pop	r14
    53c4:	df 90       	pop	r13
    53c6:	cf 90       	pop	r12
    53c8:	bf 90       	pop	r11
    53ca:	af 90       	pop	r10
    53cc:	08 95       	ret

000053ce <twiIsBusy>:
    53ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53d2:	81 70       	andi	r24, 0x01	; 1
    53d4:	08 95       	ret

000053d6 <twiTransmit>:
    53d6:	ff 92       	push	r15
    53d8:	0f 93       	push	r16
    53da:	1f 93       	push	r17
    53dc:	cf 93       	push	r28
    53de:	df 93       	push	r29
    53e0:	00 97       	sbiw	r24, 0x00	; 0
    53e2:	d1 f1       	breq	.+116    	; 0x5458 <twiTransmit+0x82>
    53e4:	4a 30       	cpi	r20, 0x0A	; 10
    53e6:	d0 f5       	brcc	.+116    	; 0x545c <twiTransmit+0x86>
    53e8:	f4 2e       	mov	r15, r20
    53ea:	8b 01       	movw	r16, r22
    53ec:	ec 01       	movw	r28, r24
    53ee:	ef df       	rcall	.-34     	; 0x53ce <twiIsBusy>
    53f0:	81 11       	cpse	r24, r1
    53f2:	36 c0       	rjmp	.+108    	; 0x5460 <twiTransmit+0x8a>
    53f4:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <_twiCurrentHandler>
    53f8:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <_twiCurrentHandler+0x1>
    53fc:	c8 17       	cp	r28, r24
    53fe:	d9 07       	cpc	r29, r25
    5400:	41 f0       	breq	.+16     	; 0x5412 <twiTransmit+0x3c>
    5402:	87 df       	rcall	.-242    	; 0x5312 <_initTwiInterface>
    5404:	89 81       	ldd	r24, Y+1	; 0x01
    5406:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    540a:	d0 93 b7 18 	sts	0x18B7, r29	; 0x8018b7 <_twiCurrentHandler+0x1>
    540e:	c0 93 b6 18 	sts	0x18B6, r28	; 0x8018b6 <_twiCurrentHandler>
    5412:	81 e0       	ldi	r24, 0x01	; 1
    5414:	8f 0d       	add	r24, r15
    5416:	80 93 b8 18 	sts	0x18B8, r24	; 0x8018b8 <_twiMessageLen>
    541a:	88 81       	ld	r24, Y
    541c:	88 0f       	add	r24, r24
    541e:	80 93 b9 18 	sts	0x18B9, r24	; 0x8018b9 <_twiMessageBuffer>
    5422:	ff 20       	and	r15, r15
    5424:	89 f0       	breq	.+34     	; 0x5448 <twiTransmit+0x72>
    5426:	f8 01       	movw	r30, r16
    5428:	aa eb       	ldi	r26, 0xBA	; 186
    542a:	b8 e1       	ldi	r27, 0x18	; 24
    542c:	4f ef       	ldi	r20, 0xFF	; 255
    542e:	4f 0d       	add	r20, r15
    5430:	64 2f       	mov	r22, r20
    5432:	70 e0       	ldi	r23, 0x00	; 0
    5434:	cb 01       	movw	r24, r22
    5436:	01 96       	adiw	r24, 0x01	; 1
    5438:	b8 01       	movw	r22, r16
    543a:	68 0f       	add	r22, r24
    543c:	79 1f       	adc	r23, r25
    543e:	81 91       	ld	r24, Z+
    5440:	8d 93       	st	X+, r24
    5442:	e6 17       	cp	r30, r22
    5444:	f7 07       	cpc	r31, r23
    5446:	d9 f7       	brne	.-10     	; 0x543e <twiTransmit+0x68>
    5448:	88 ef       	ldi	r24, 0xF8	; 248
    544a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    544e:	85 ea       	ldi	r24, 0xA5	; 165
    5450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5454:	84 e0       	ldi	r24, 0x04	; 4
    5456:	05 c0       	rjmp	.+10     	; 0x5462 <twiTransmit+0x8c>
    5458:	86 e0       	ldi	r24, 0x06	; 6
    545a:	03 c0       	rjmp	.+6      	; 0x5462 <twiTransmit+0x8c>
    545c:	87 e0       	ldi	r24, 0x07	; 7
    545e:	01 c0       	rjmp	.+2      	; 0x5462 <twiTransmit+0x8c>
    5460:	82 e0       	ldi	r24, 0x02	; 2
    5462:	df 91       	pop	r29
    5464:	cf 91       	pop	r28
    5466:	1f 91       	pop	r17
    5468:	0f 91       	pop	r16
    546a:	ff 90       	pop	r15
    546c:	08 95       	ret

0000546e <twiReceive>:
    546e:	1f 93       	push	r17
    5470:	cf 93       	push	r28
    5472:	df 93       	push	r29
    5474:	00 97       	sbiw	r24, 0x00	; 0
    5476:	29 f1       	breq	.+74     	; 0x54c2 <twiReceive+0x54>
    5478:	6b 30       	cpi	r22, 0x0B	; 11
    547a:	28 f5       	brcc	.+74     	; 0x54c6 <twiReceive+0x58>
    547c:	16 2f       	mov	r17, r22
    547e:	ec 01       	movw	r28, r24
    5480:	a6 df       	rcall	.-180    	; 0x53ce <twiIsBusy>
    5482:	81 11       	cpse	r24, r1
    5484:	22 c0       	rjmp	.+68     	; 0x54ca <twiReceive+0x5c>
    5486:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <_twiCurrentHandler>
    548a:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <_twiCurrentHandler+0x1>
    548e:	c8 17       	cp	r28, r24
    5490:	d9 07       	cpc	r29, r25
    5492:	41 f0       	breq	.+16     	; 0x54a4 <twiReceive+0x36>
    5494:	3e df       	rcall	.-388    	; 0x5312 <_initTwiInterface>
    5496:	89 81       	ldd	r24, Y+1	; 0x01
    5498:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    549c:	d0 93 b7 18 	sts	0x18B7, r29	; 0x8018b7 <_twiCurrentHandler+0x1>
    54a0:	c0 93 b6 18 	sts	0x18B6, r28	; 0x8018b6 <_twiCurrentHandler>
    54a4:	10 93 b8 18 	sts	0x18B8, r17	; 0x8018b8 <_twiMessageLen>
    54a8:	88 81       	ld	r24, Y
    54aa:	88 0f       	add	r24, r24
    54ac:	81 60       	ori	r24, 0x01	; 1
    54ae:	80 93 b9 18 	sts	0x18B9, r24	; 0x8018b9 <_twiMessageBuffer>
    54b2:	88 ef       	ldi	r24, 0xF8	; 248
    54b4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    54b8:	85 ea       	ldi	r24, 0xA5	; 165
    54ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54be:	85 e0       	ldi	r24, 0x05	; 5
    54c0:	05 c0       	rjmp	.+10     	; 0x54cc <twiReceive+0x5e>
    54c2:	86 e0       	ldi	r24, 0x06	; 6
    54c4:	03 c0       	rjmp	.+6      	; 0x54cc <twiReceive+0x5e>
    54c6:	87 e0       	ldi	r24, 0x07	; 7
    54c8:	01 c0       	rjmp	.+2      	; 0x54cc <twiReceive+0x5e>
    54ca:	82 e0       	ldi	r24, 0x02	; 2
    54cc:	df 91       	pop	r29
    54ce:	cf 91       	pop	r28
    54d0:	1f 91       	pop	r17
    54d2:	08 95       	ret

000054d4 <__vector_39>:
    54d4:	1f 92       	push	r1
    54d6:	0f 92       	push	r0
    54d8:	0f b6       	in	r0, 0x3f	; 63
    54da:	0f 92       	push	r0
    54dc:	11 24       	eor	r1, r1
    54de:	0b b6       	in	r0, 0x3b	; 59
    54e0:	0f 92       	push	r0
    54e2:	2f 93       	push	r18
    54e4:	3f 93       	push	r19
    54e6:	4f 93       	push	r20
    54e8:	5f 93       	push	r21
    54ea:	6f 93       	push	r22
    54ec:	7f 93       	push	r23
    54ee:	8f 93       	push	r24
    54f0:	9f 93       	push	r25
    54f2:	af 93       	push	r26
    54f4:	bf 93       	push	r27
    54f6:	ef 93       	push	r30
    54f8:	ff 93       	push	r31
    54fa:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    54fe:	8e 2f       	mov	r24, r30
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	fc 01       	movw	r30, r24
    5504:	38 97       	sbiw	r30, 0x08	; 8
    5506:	e1 35       	cpi	r30, 0x51	; 81
    5508:	f1 05       	cpc	r31, r1
    550a:	08 f0       	brcs	.+2      	; 0x550e <__vector_39+0x3a>
    550c:	75 c0       	rjmp	.+234    	; 0x55f8 <__vector_39+0x124>
    550e:	88 27       	eor	r24, r24
    5510:	e4 58       	subi	r30, 0x84	; 132
    5512:	ff 4f       	sbci	r31, 0xFF	; 255
    5514:	8f 4f       	sbci	r24, 0xFF	; 255
    5516:	64 c6       	rjmp	.+3272   	; 0x61e0 <__tablejump2__>
    5518:	10 92 b5 18 	sts	0x18B5, r1	; 0x8018b5 <_index.1885>
    551c:	e0 91 b5 18 	lds	r30, 0x18B5	; 0x8018b5 <_index.1885>
    5520:	80 91 b8 18 	lds	r24, 0x18B8	; 0x8018b8 <_twiMessageLen>
    5524:	e8 17       	cp	r30, r24
    5526:	70 f4       	brcc	.+28     	; 0x5544 <__vector_39+0x70>
    5528:	81 e0       	ldi	r24, 0x01	; 1
    552a:	8e 0f       	add	r24, r30
    552c:	80 93 b5 18 	sts	0x18B5, r24	; 0x8018b5 <_index.1885>
    5530:	f0 e0       	ldi	r31, 0x00	; 0
    5532:	e7 54       	subi	r30, 0x47	; 71
    5534:	f7 4e       	sbci	r31, 0xE7	; 231
    5536:	80 81       	ld	r24, Z
    5538:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    553c:	85 e8       	ldi	r24, 0x85	; 133
    553e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5542:	72 c0       	rjmp	.+228    	; 0x5628 <__vector_39+0x154>
    5544:	84 e9       	ldi	r24, 0x94	; 148
    5546:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    554a:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <_twiCurrentHandler>
    554e:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <_twiCurrentHandler+0x1>
    5552:	dc 01       	movw	r26, r24
    5554:	12 96       	adiw	r26, 0x02	; 2
    5556:	ed 91       	ld	r30, X+
    5558:	fc 91       	ld	r31, X
    555a:	13 97       	sbiw	r26, 0x03	; 3
    555c:	30 97       	sbiw	r30, 0x00	; 0
    555e:	09 f4       	brne	.+2      	; 0x5562 <__vector_39+0x8e>
    5560:	63 c0       	rjmp	.+198    	; 0x5628 <__vector_39+0x154>
    5562:	20 e0       	ldi	r18, 0x00	; 0
    5564:	40 e0       	ldi	r20, 0x00	; 0
    5566:	50 e0       	ldi	r21, 0x00	; 0
    5568:	64 e0       	ldi	r22, 0x04	; 4
    556a:	19 95       	eicall
    556c:	5d c0       	rjmp	.+186    	; 0x5628 <__vector_39+0x154>
    556e:	e0 91 b5 18 	lds	r30, 0x18B5	; 0x8018b5 <_index.1885>
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	8e 0f       	add	r24, r30
    5576:	80 93 b5 18 	sts	0x18B5, r24	; 0x8018b5 <_index.1885>
    557a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    557e:	f0 e0       	ldi	r31, 0x00	; 0
    5580:	e7 54       	subi	r30, 0x47	; 71
    5582:	f7 4e       	sbci	r31, 0xE7	; 231
    5584:	80 83       	st	Z, r24
    5586:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    558a:	80 34       	cpi	r24, 0x40	; 64
    558c:	11 f4       	brne	.+4      	; 0x5592 <__vector_39+0xbe>
    558e:	10 92 b5 18 	sts	0x18B5, r1	; 0x8018b5 <_index.1885>
    5592:	20 91 b5 18 	lds	r18, 0x18B5	; 0x8018b5 <_index.1885>
    5596:	30 e0       	ldi	r19, 0x00	; 0
    5598:	80 91 b8 18 	lds	r24, 0x18B8	; 0x8018b8 <_twiMessageLen>
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	01 97       	sbiw	r24, 0x01	; 1
    55a0:	28 17       	cp	r18, r24
    55a2:	39 07       	cpc	r19, r25
    55a4:	24 f4       	brge	.+8      	; 0x55ae <__vector_39+0xda>
    55a6:	85 ec       	ldi	r24, 0xC5	; 197
    55a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55ac:	3d c0       	rjmp	.+122    	; 0x5628 <__vector_39+0x154>
    55ae:	85 e8       	ldi	r24, 0x85	; 133
    55b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55b4:	39 c0       	rjmp	.+114    	; 0x5628 <__vector_39+0x154>
    55b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    55ba:	e0 91 b5 18 	lds	r30, 0x18B5	; 0x8018b5 <_index.1885>
    55be:	f0 e0       	ldi	r31, 0x00	; 0
    55c0:	e7 54       	subi	r30, 0x47	; 71
    55c2:	f7 4e       	sbci	r31, 0xE7	; 231
    55c4:	80 83       	st	Z, r24
    55c6:	84 e9       	ldi	r24, 0x94	; 148
    55c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55cc:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <_twiCurrentHandler>
    55d0:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <_twiCurrentHandler+0x1>
    55d4:	dc 01       	movw	r26, r24
    55d6:	12 96       	adiw	r26, 0x02	; 2
    55d8:	ed 91       	ld	r30, X+
    55da:	fc 91       	ld	r31, X
    55dc:	13 97       	sbiw	r26, 0x03	; 3
    55de:	30 97       	sbiw	r30, 0x00	; 0
    55e0:	19 f1       	breq	.+70     	; 0x5628 <__vector_39+0x154>
    55e2:	20 91 b8 18 	lds	r18, 0x18B8	; 0x8018b8 <_twiMessageLen>
    55e6:	49 eb       	ldi	r20, 0xB9	; 185
    55e8:	58 e1       	ldi	r21, 0x18	; 24
    55ea:	65 e0       	ldi	r22, 0x05	; 5
    55ec:	19 95       	eicall
    55ee:	1c c0       	rjmp	.+56     	; 0x5628 <__vector_39+0x154>
    55f0:	85 ea       	ldi	r24, 0xA5	; 165
    55f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55f6:	18 c0       	rjmp	.+48     	; 0x5628 <__vector_39+0x154>
    55f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55fc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5600:	84 e0       	ldi	r24, 0x04	; 4
    5602:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5606:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <_twiCurrentHandler>
    560a:	90 91 b7 18 	lds	r25, 0x18B7	; 0x8018b7 <_twiCurrentHandler+0x1>
    560e:	dc 01       	movw	r26, r24
    5610:	12 96       	adiw	r26, 0x02	; 2
    5612:	ed 91       	ld	r30, X+
    5614:	fc 91       	ld	r31, X
    5616:	13 97       	sbiw	r26, 0x03	; 3
    5618:	30 97       	sbiw	r30, 0x00	; 0
    561a:	31 f0       	breq	.+12     	; 0x5628 <__vector_39+0x154>
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	40 e0       	ldi	r20, 0x00	; 0
    5620:	50 e0       	ldi	r21, 0x00	; 0
    5622:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5626:	19 95       	eicall
    5628:	ff 91       	pop	r31
    562a:	ef 91       	pop	r30
    562c:	bf 91       	pop	r27
    562e:	af 91       	pop	r26
    5630:	9f 91       	pop	r25
    5632:	8f 91       	pop	r24
    5634:	7f 91       	pop	r23
    5636:	6f 91       	pop	r22
    5638:	5f 91       	pop	r21
    563a:	4f 91       	pop	r20
    563c:	3f 91       	pop	r19
    563e:	2f 91       	pop	r18
    5640:	0f 90       	pop	r0
    5642:	0b be       	out	0x3b, r0	; 59
    5644:	0f 90       	pop	r0
    5646:	0f be       	out	0x3f, r0	; 63
    5648:	0f 90       	pop	r0
    564a:	1f 90       	pop	r1
    564c:	18 95       	reti

0000564e <fifo_init>:
    564e:	fc 01       	movw	r30, r24
    5650:	41 11       	cpse	r20, r1
    5652:	01 c0       	rjmp	.+2      	; 0x5656 <fifo_init+0x8>
    5654:	02 d7       	rcall	.+3588   	; 0x645a <abort>
    5656:	84 2f       	mov	r24, r20
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	9c 01       	movw	r18, r24
    565c:	21 50       	subi	r18, 0x01	; 1
    565e:	31 09       	sbc	r19, r1
    5660:	82 23       	and	r24, r18
    5662:	93 23       	and	r25, r19
    5664:	89 2b       	or	r24, r25
    5666:	09 f0       	breq	.+2      	; 0x566a <fifo_init+0x1c>
    5668:	f8 d6       	rcall	.+3568   	; 0x645a <abort>
    566a:	41 38       	cpi	r20, 0x81	; 129
    566c:	08 f0       	brcs	.+2      	; 0x5670 <fifo_init+0x22>
    566e:	f5 d6       	rcall	.+3562   	; 0x645a <abort>
    5670:	12 82       	std	Z+2, r1	; 0x02
    5672:	13 82       	std	Z+3, r1	; 0x03
    5674:	44 83       	std	Z+4, r20	; 0x04
    5676:	44 0f       	add	r20, r20
    5678:	41 50       	subi	r20, 0x01	; 1
    567a:	45 83       	std	Z+5, r20	; 0x05
    567c:	71 83       	std	Z+1, r23	; 0x01
    567e:	60 83       	st	Z, r22
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	08 95       	ret

00005686 <vfprintf>:
    5686:	2f 92       	push	r2
    5688:	3f 92       	push	r3
    568a:	4f 92       	push	r4
    568c:	5f 92       	push	r5
    568e:	6f 92       	push	r6
    5690:	7f 92       	push	r7
    5692:	8f 92       	push	r8
    5694:	9f 92       	push	r9
    5696:	af 92       	push	r10
    5698:	bf 92       	push	r11
    569a:	cf 92       	push	r12
    569c:	df 92       	push	r13
    569e:	ef 92       	push	r14
    56a0:	ff 92       	push	r15
    56a2:	0f 93       	push	r16
    56a4:	1f 93       	push	r17
    56a6:	cf 93       	push	r28
    56a8:	df 93       	push	r29
    56aa:	cd b7       	in	r28, 0x3d	; 61
    56ac:	de b7       	in	r29, 0x3e	; 62
    56ae:	60 97       	sbiw	r28, 0x10	; 16
    56b0:	0f b6       	in	r0, 0x3f	; 63
    56b2:	f8 94       	cli
    56b4:	de bf       	out	0x3e, r29	; 62
    56b6:	0f be       	out	0x3f, r0	; 63
    56b8:	cd bf       	out	0x3d, r28	; 61
    56ba:	7c 01       	movw	r14, r24
    56bc:	1b 01       	movw	r2, r22
    56be:	6a 01       	movw	r12, r20
    56c0:	fc 01       	movw	r30, r24
    56c2:	17 82       	std	Z+7, r1	; 0x07
    56c4:	16 82       	std	Z+6, r1	; 0x06
    56c6:	83 81       	ldd	r24, Z+3	; 0x03
    56c8:	81 ff       	sbrs	r24, 1
    56ca:	2a c3       	rjmp	.+1620   	; 0x5d20 <vfprintf+0x69a>
    56cc:	9e 01       	movw	r18, r28
    56ce:	2f 5f       	subi	r18, 0xFF	; 255
    56d0:	3f 4f       	sbci	r19, 0xFF	; 255
    56d2:	39 01       	movw	r6, r18
    56d4:	f7 01       	movw	r30, r14
    56d6:	93 81       	ldd	r25, Z+3	; 0x03
    56d8:	f1 01       	movw	r30, r2
    56da:	93 fd       	sbrc	r25, 3
    56dc:	85 91       	lpm	r24, Z+
    56de:	93 ff       	sbrs	r25, 3
    56e0:	81 91       	ld	r24, Z+
    56e2:	1f 01       	movw	r2, r30
    56e4:	88 23       	and	r24, r24
    56e6:	09 f4       	brne	.+2      	; 0x56ea <vfprintf+0x64>
    56e8:	17 c3       	rjmp	.+1582   	; 0x5d18 <vfprintf+0x692>
    56ea:	85 32       	cpi	r24, 0x25	; 37
    56ec:	39 f4       	brne	.+14     	; 0x56fc <vfprintf+0x76>
    56ee:	93 fd       	sbrc	r25, 3
    56f0:	85 91       	lpm	r24, Z+
    56f2:	93 ff       	sbrs	r25, 3
    56f4:	81 91       	ld	r24, Z+
    56f6:	1f 01       	movw	r2, r30
    56f8:	85 32       	cpi	r24, 0x25	; 37
    56fa:	31 f4       	brne	.+12     	; 0x5708 <vfprintf+0x82>
    56fc:	b7 01       	movw	r22, r14
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	fd d7       	rcall	.+4090   	; 0x66fc <fputc>
    5702:	56 01       	movw	r10, r12
    5704:	65 01       	movw	r12, r10
    5706:	e6 cf       	rjmp	.-52     	; 0x56d4 <vfprintf+0x4e>
    5708:	10 e0       	ldi	r17, 0x00	; 0
    570a:	51 2c       	mov	r5, r1
    570c:	91 2c       	mov	r9, r1
    570e:	ff e1       	ldi	r31, 0x1F	; 31
    5710:	f9 15       	cp	r31, r9
    5712:	d8 f0       	brcs	.+54     	; 0x574a <vfprintf+0xc4>
    5714:	8b 32       	cpi	r24, 0x2B	; 43
    5716:	79 f0       	breq	.+30     	; 0x5736 <vfprintf+0xb0>
    5718:	38 f4       	brcc	.+14     	; 0x5728 <vfprintf+0xa2>
    571a:	80 32       	cpi	r24, 0x20	; 32
    571c:	79 f0       	breq	.+30     	; 0x573c <vfprintf+0xb6>
    571e:	83 32       	cpi	r24, 0x23	; 35
    5720:	a1 f4       	brne	.+40     	; 0x574a <vfprintf+0xc4>
    5722:	f9 2d       	mov	r31, r9
    5724:	f0 61       	ori	r31, 0x10	; 16
    5726:	2e c0       	rjmp	.+92     	; 0x5784 <vfprintf+0xfe>
    5728:	8d 32       	cpi	r24, 0x2D	; 45
    572a:	61 f0       	breq	.+24     	; 0x5744 <vfprintf+0xbe>
    572c:	80 33       	cpi	r24, 0x30	; 48
    572e:	69 f4       	brne	.+26     	; 0x574a <vfprintf+0xc4>
    5730:	29 2d       	mov	r18, r9
    5732:	21 60       	ori	r18, 0x01	; 1
    5734:	2d c0       	rjmp	.+90     	; 0x5790 <vfprintf+0x10a>
    5736:	39 2d       	mov	r19, r9
    5738:	32 60       	ori	r19, 0x02	; 2
    573a:	93 2e       	mov	r9, r19
    573c:	89 2d       	mov	r24, r9
    573e:	84 60       	ori	r24, 0x04	; 4
    5740:	98 2e       	mov	r9, r24
    5742:	2a c0       	rjmp	.+84     	; 0x5798 <vfprintf+0x112>
    5744:	e9 2d       	mov	r30, r9
    5746:	e8 60       	ori	r30, 0x08	; 8
    5748:	15 c0       	rjmp	.+42     	; 0x5774 <vfprintf+0xee>
    574a:	97 fc       	sbrc	r9, 7
    574c:	2d c0       	rjmp	.+90     	; 0x57a8 <vfprintf+0x122>
    574e:	20 ed       	ldi	r18, 0xD0	; 208
    5750:	28 0f       	add	r18, r24
    5752:	2a 30       	cpi	r18, 0x0A	; 10
    5754:	88 f4       	brcc	.+34     	; 0x5778 <vfprintf+0xf2>
    5756:	96 fe       	sbrs	r9, 6
    5758:	06 c0       	rjmp	.+12     	; 0x5766 <vfprintf+0xe0>
    575a:	3a e0       	ldi	r19, 0x0A	; 10
    575c:	13 9f       	mul	r17, r19
    575e:	20 0d       	add	r18, r0
    5760:	11 24       	eor	r1, r1
    5762:	12 2f       	mov	r17, r18
    5764:	19 c0       	rjmp	.+50     	; 0x5798 <vfprintf+0x112>
    5766:	8a e0       	ldi	r24, 0x0A	; 10
    5768:	58 9e       	mul	r5, r24
    576a:	20 0d       	add	r18, r0
    576c:	11 24       	eor	r1, r1
    576e:	52 2e       	mov	r5, r18
    5770:	e9 2d       	mov	r30, r9
    5772:	e0 62       	ori	r30, 0x20	; 32
    5774:	9e 2e       	mov	r9, r30
    5776:	10 c0       	rjmp	.+32     	; 0x5798 <vfprintf+0x112>
    5778:	8e 32       	cpi	r24, 0x2E	; 46
    577a:	31 f4       	brne	.+12     	; 0x5788 <vfprintf+0x102>
    577c:	96 fc       	sbrc	r9, 6
    577e:	cc c2       	rjmp	.+1432   	; 0x5d18 <vfprintf+0x692>
    5780:	f9 2d       	mov	r31, r9
    5782:	f0 64       	ori	r31, 0x40	; 64
    5784:	9f 2e       	mov	r9, r31
    5786:	08 c0       	rjmp	.+16     	; 0x5798 <vfprintf+0x112>
    5788:	8c 36       	cpi	r24, 0x6C	; 108
    578a:	21 f4       	brne	.+8      	; 0x5794 <vfprintf+0x10e>
    578c:	29 2d       	mov	r18, r9
    578e:	20 68       	ori	r18, 0x80	; 128
    5790:	92 2e       	mov	r9, r18
    5792:	02 c0       	rjmp	.+4      	; 0x5798 <vfprintf+0x112>
    5794:	88 36       	cpi	r24, 0x68	; 104
    5796:	41 f4       	brne	.+16     	; 0x57a8 <vfprintf+0x122>
    5798:	f1 01       	movw	r30, r2
    579a:	93 fd       	sbrc	r25, 3
    579c:	85 91       	lpm	r24, Z+
    579e:	93 ff       	sbrs	r25, 3
    57a0:	81 91       	ld	r24, Z+
    57a2:	1f 01       	movw	r2, r30
    57a4:	81 11       	cpse	r24, r1
    57a6:	b3 cf       	rjmp	.-154    	; 0x570e <vfprintf+0x88>
    57a8:	9b eb       	ldi	r25, 0xBB	; 187
    57aa:	98 0f       	add	r25, r24
    57ac:	93 30       	cpi	r25, 0x03	; 3
    57ae:	20 f4       	brcc	.+8      	; 0x57b8 <vfprintf+0x132>
    57b0:	99 2d       	mov	r25, r9
    57b2:	90 61       	ori	r25, 0x10	; 16
    57b4:	80 5e       	subi	r24, 0xE0	; 224
    57b6:	07 c0       	rjmp	.+14     	; 0x57c6 <vfprintf+0x140>
    57b8:	9b e9       	ldi	r25, 0x9B	; 155
    57ba:	98 0f       	add	r25, r24
    57bc:	93 30       	cpi	r25, 0x03	; 3
    57be:	08 f0       	brcs	.+2      	; 0x57c2 <vfprintf+0x13c>
    57c0:	59 c1       	rjmp	.+690    	; 0x5a74 <vfprintf+0x3ee>
    57c2:	99 2d       	mov	r25, r9
    57c4:	9f 7e       	andi	r25, 0xEF	; 239
    57c6:	96 ff       	sbrs	r25, 6
    57c8:	16 e0       	ldi	r17, 0x06	; 6
    57ca:	9f 73       	andi	r25, 0x3F	; 63
    57cc:	99 2e       	mov	r9, r25
    57ce:	85 36       	cpi	r24, 0x65	; 101
    57d0:	19 f4       	brne	.+6      	; 0x57d8 <vfprintf+0x152>
    57d2:	90 64       	ori	r25, 0x40	; 64
    57d4:	99 2e       	mov	r9, r25
    57d6:	08 c0       	rjmp	.+16     	; 0x57e8 <vfprintf+0x162>
    57d8:	86 36       	cpi	r24, 0x66	; 102
    57da:	21 f4       	brne	.+8      	; 0x57e4 <vfprintf+0x15e>
    57dc:	39 2f       	mov	r19, r25
    57de:	30 68       	ori	r19, 0x80	; 128
    57e0:	93 2e       	mov	r9, r19
    57e2:	02 c0       	rjmp	.+4      	; 0x57e8 <vfprintf+0x162>
    57e4:	11 11       	cpse	r17, r1
    57e6:	11 50       	subi	r17, 0x01	; 1
    57e8:	97 fe       	sbrs	r9, 7
    57ea:	07 c0       	rjmp	.+14     	; 0x57fa <vfprintf+0x174>
    57ec:	1c 33       	cpi	r17, 0x3C	; 60
    57ee:	50 f4       	brcc	.+20     	; 0x5804 <vfprintf+0x17e>
    57f0:	44 24       	eor	r4, r4
    57f2:	43 94       	inc	r4
    57f4:	41 0e       	add	r4, r17
    57f6:	27 e0       	ldi	r18, 0x07	; 7
    57f8:	0b c0       	rjmp	.+22     	; 0x5810 <vfprintf+0x18a>
    57fa:	18 30       	cpi	r17, 0x08	; 8
    57fc:	38 f0       	brcs	.+14     	; 0x580c <vfprintf+0x186>
    57fe:	27 e0       	ldi	r18, 0x07	; 7
    5800:	17 e0       	ldi	r17, 0x07	; 7
    5802:	05 c0       	rjmp	.+10     	; 0x580e <vfprintf+0x188>
    5804:	27 e0       	ldi	r18, 0x07	; 7
    5806:	9c e3       	ldi	r25, 0x3C	; 60
    5808:	49 2e       	mov	r4, r25
    580a:	02 c0       	rjmp	.+4      	; 0x5810 <vfprintf+0x18a>
    580c:	21 2f       	mov	r18, r17
    580e:	41 2c       	mov	r4, r1
    5810:	56 01       	movw	r10, r12
    5812:	84 e0       	ldi	r24, 0x04	; 4
    5814:	a8 0e       	add	r10, r24
    5816:	b1 1c       	adc	r11, r1
    5818:	f6 01       	movw	r30, r12
    581a:	60 81       	ld	r22, Z
    581c:	71 81       	ldd	r23, Z+1	; 0x01
    581e:	82 81       	ldd	r24, Z+2	; 0x02
    5820:	93 81       	ldd	r25, Z+3	; 0x03
    5822:	04 2d       	mov	r16, r4
    5824:	a3 01       	movw	r20, r6
    5826:	1d d6       	rcall	.+3130   	; 0x6462 <__ftoa_engine>
    5828:	6c 01       	movw	r12, r24
    582a:	f9 81       	ldd	r31, Y+1	; 0x01
    582c:	fc 87       	std	Y+12, r31	; 0x0c
    582e:	f0 ff       	sbrs	r31, 0
    5830:	02 c0       	rjmp	.+4      	; 0x5836 <vfprintf+0x1b0>
    5832:	f3 ff       	sbrs	r31, 3
    5834:	06 c0       	rjmp	.+12     	; 0x5842 <vfprintf+0x1bc>
    5836:	91 fc       	sbrc	r9, 1
    5838:	06 c0       	rjmp	.+12     	; 0x5846 <vfprintf+0x1c0>
    583a:	92 fe       	sbrs	r9, 2
    583c:	06 c0       	rjmp	.+12     	; 0x584a <vfprintf+0x1c4>
    583e:	00 e2       	ldi	r16, 0x20	; 32
    5840:	05 c0       	rjmp	.+10     	; 0x584c <vfprintf+0x1c6>
    5842:	0d e2       	ldi	r16, 0x2D	; 45
    5844:	03 c0       	rjmp	.+6      	; 0x584c <vfprintf+0x1c6>
    5846:	0b e2       	ldi	r16, 0x2B	; 43
    5848:	01 c0       	rjmp	.+2      	; 0x584c <vfprintf+0x1c6>
    584a:	00 e0       	ldi	r16, 0x00	; 0
    584c:	8c 85       	ldd	r24, Y+12	; 0x0c
    584e:	8c 70       	andi	r24, 0x0C	; 12
    5850:	19 f0       	breq	.+6      	; 0x5858 <vfprintf+0x1d2>
    5852:	01 11       	cpse	r16, r1
    5854:	43 c2       	rjmp	.+1158   	; 0x5cdc <vfprintf+0x656>
    5856:	80 c2       	rjmp	.+1280   	; 0x5d58 <vfprintf+0x6d2>
    5858:	97 fe       	sbrs	r9, 7
    585a:	10 c0       	rjmp	.+32     	; 0x587c <vfprintf+0x1f6>
    585c:	4c 0c       	add	r4, r12
    585e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5860:	f4 ff       	sbrs	r31, 4
    5862:	04 c0       	rjmp	.+8      	; 0x586c <vfprintf+0x1e6>
    5864:	8a 81       	ldd	r24, Y+2	; 0x02
    5866:	81 33       	cpi	r24, 0x31	; 49
    5868:	09 f4       	brne	.+2      	; 0x586c <vfprintf+0x1e6>
    586a:	4a 94       	dec	r4
    586c:	14 14       	cp	r1, r4
    586e:	74 f5       	brge	.+92     	; 0x58cc <vfprintf+0x246>
    5870:	28 e0       	ldi	r18, 0x08	; 8
    5872:	24 15       	cp	r18, r4
    5874:	78 f5       	brcc	.+94     	; 0x58d4 <vfprintf+0x24e>
    5876:	88 e0       	ldi	r24, 0x08	; 8
    5878:	48 2e       	mov	r4, r24
    587a:	2c c0       	rjmp	.+88     	; 0x58d4 <vfprintf+0x24e>
    587c:	96 fc       	sbrc	r9, 6
    587e:	2a c0       	rjmp	.+84     	; 0x58d4 <vfprintf+0x24e>
    5880:	81 2f       	mov	r24, r17
    5882:	90 e0       	ldi	r25, 0x00	; 0
    5884:	8c 15       	cp	r24, r12
    5886:	9d 05       	cpc	r25, r13
    5888:	9c f0       	brlt	.+38     	; 0x58b0 <vfprintf+0x22a>
    588a:	3c ef       	ldi	r19, 0xFC	; 252
    588c:	c3 16       	cp	r12, r19
    588e:	3f ef       	ldi	r19, 0xFF	; 255
    5890:	d3 06       	cpc	r13, r19
    5892:	74 f0       	brlt	.+28     	; 0x58b0 <vfprintf+0x22a>
    5894:	89 2d       	mov	r24, r9
    5896:	80 68       	ori	r24, 0x80	; 128
    5898:	98 2e       	mov	r9, r24
    589a:	0a c0       	rjmp	.+20     	; 0x58b0 <vfprintf+0x22a>
    589c:	e2 e0       	ldi	r30, 0x02	; 2
    589e:	f0 e0       	ldi	r31, 0x00	; 0
    58a0:	ec 0f       	add	r30, r28
    58a2:	fd 1f       	adc	r31, r29
    58a4:	e1 0f       	add	r30, r17
    58a6:	f1 1d       	adc	r31, r1
    58a8:	80 81       	ld	r24, Z
    58aa:	80 33       	cpi	r24, 0x30	; 48
    58ac:	19 f4       	brne	.+6      	; 0x58b4 <vfprintf+0x22e>
    58ae:	11 50       	subi	r17, 0x01	; 1
    58b0:	11 11       	cpse	r17, r1
    58b2:	f4 cf       	rjmp	.-24     	; 0x589c <vfprintf+0x216>
    58b4:	97 fe       	sbrs	r9, 7
    58b6:	0e c0       	rjmp	.+28     	; 0x58d4 <vfprintf+0x24e>
    58b8:	44 24       	eor	r4, r4
    58ba:	43 94       	inc	r4
    58bc:	41 0e       	add	r4, r17
    58be:	81 2f       	mov	r24, r17
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	c8 16       	cp	r12, r24
    58c4:	d9 06       	cpc	r13, r25
    58c6:	2c f4       	brge	.+10     	; 0x58d2 <vfprintf+0x24c>
    58c8:	1c 19       	sub	r17, r12
    58ca:	04 c0       	rjmp	.+8      	; 0x58d4 <vfprintf+0x24e>
    58cc:	44 24       	eor	r4, r4
    58ce:	43 94       	inc	r4
    58d0:	01 c0       	rjmp	.+2      	; 0x58d4 <vfprintf+0x24e>
    58d2:	10 e0       	ldi	r17, 0x00	; 0
    58d4:	97 fe       	sbrs	r9, 7
    58d6:	06 c0       	rjmp	.+12     	; 0x58e4 <vfprintf+0x25e>
    58d8:	1c 14       	cp	r1, r12
    58da:	1d 04       	cpc	r1, r13
    58dc:	34 f4       	brge	.+12     	; 0x58ea <vfprintf+0x264>
    58de:	c6 01       	movw	r24, r12
    58e0:	01 96       	adiw	r24, 0x01	; 1
    58e2:	05 c0       	rjmp	.+10     	; 0x58ee <vfprintf+0x268>
    58e4:	85 e0       	ldi	r24, 0x05	; 5
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	02 c0       	rjmp	.+4      	; 0x58ee <vfprintf+0x268>
    58ea:	81 e0       	ldi	r24, 0x01	; 1
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	01 11       	cpse	r16, r1
    58f0:	01 96       	adiw	r24, 0x01	; 1
    58f2:	11 23       	and	r17, r17
    58f4:	31 f0       	breq	.+12     	; 0x5902 <vfprintf+0x27c>
    58f6:	21 2f       	mov	r18, r17
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	2f 5f       	subi	r18, 0xFF	; 255
    58fc:	3f 4f       	sbci	r19, 0xFF	; 255
    58fe:	82 0f       	add	r24, r18
    5900:	93 1f       	adc	r25, r19
    5902:	25 2d       	mov	r18, r5
    5904:	30 e0       	ldi	r19, 0x00	; 0
    5906:	82 17       	cp	r24, r18
    5908:	93 07       	cpc	r25, r19
    590a:	14 f4       	brge	.+4      	; 0x5910 <vfprintf+0x28a>
    590c:	58 1a       	sub	r5, r24
    590e:	01 c0       	rjmp	.+2      	; 0x5912 <vfprintf+0x28c>
    5910:	51 2c       	mov	r5, r1
    5912:	89 2d       	mov	r24, r9
    5914:	89 70       	andi	r24, 0x09	; 9
    5916:	41 f4       	brne	.+16     	; 0x5928 <vfprintf+0x2a2>
    5918:	55 20       	and	r5, r5
    591a:	31 f0       	breq	.+12     	; 0x5928 <vfprintf+0x2a2>
    591c:	b7 01       	movw	r22, r14
    591e:	80 e2       	ldi	r24, 0x20	; 32
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	ec d6       	rcall	.+3544   	; 0x66fc <fputc>
    5924:	5a 94       	dec	r5
    5926:	f8 cf       	rjmp	.-16     	; 0x5918 <vfprintf+0x292>
    5928:	00 23       	and	r16, r16
    592a:	21 f0       	breq	.+8      	; 0x5934 <vfprintf+0x2ae>
    592c:	b7 01       	movw	r22, r14
    592e:	80 2f       	mov	r24, r16
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	e4 d6       	rcall	.+3528   	; 0x66fc <fputc>
    5934:	93 fc       	sbrc	r9, 3
    5936:	08 c0       	rjmp	.+16     	; 0x5948 <vfprintf+0x2c2>
    5938:	55 20       	and	r5, r5
    593a:	31 f0       	breq	.+12     	; 0x5948 <vfprintf+0x2c2>
    593c:	b7 01       	movw	r22, r14
    593e:	80 e3       	ldi	r24, 0x30	; 48
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	dc d6       	rcall	.+3512   	; 0x66fc <fputc>
    5944:	5a 94       	dec	r5
    5946:	f8 cf       	rjmp	.-16     	; 0x5938 <vfprintf+0x2b2>
    5948:	97 fe       	sbrs	r9, 7
    594a:	4a c0       	rjmp	.+148    	; 0x59e0 <vfprintf+0x35a>
    594c:	46 01       	movw	r8, r12
    594e:	d7 fe       	sbrs	r13, 7
    5950:	02 c0       	rjmp	.+4      	; 0x5956 <vfprintf+0x2d0>
    5952:	81 2c       	mov	r8, r1
    5954:	91 2c       	mov	r9, r1
    5956:	c6 01       	movw	r24, r12
    5958:	88 19       	sub	r24, r8
    595a:	99 09       	sbc	r25, r9
    595c:	f3 01       	movw	r30, r6
    595e:	e8 0f       	add	r30, r24
    5960:	f9 1f       	adc	r31, r25
    5962:	fe 87       	std	Y+14, r31	; 0x0e
    5964:	ed 87       	std	Y+13, r30	; 0x0d
    5966:	96 01       	movw	r18, r12
    5968:	24 19       	sub	r18, r4
    596a:	31 09       	sbc	r19, r1
    596c:	38 8b       	std	Y+16, r19	; 0x10
    596e:	2f 87       	std	Y+15, r18	; 0x0f
    5970:	01 2f       	mov	r16, r17
    5972:	10 e0       	ldi	r17, 0x00	; 0
    5974:	11 95       	neg	r17
    5976:	01 95       	neg	r16
    5978:	11 09       	sbc	r17, r1
    597a:	3f ef       	ldi	r19, 0xFF	; 255
    597c:	83 16       	cp	r8, r19
    597e:	93 06       	cpc	r9, r19
    5980:	21 f4       	brne	.+8      	; 0x598a <vfprintf+0x304>
    5982:	b7 01       	movw	r22, r14
    5984:	8e e2       	ldi	r24, 0x2E	; 46
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	b9 d6       	rcall	.+3442   	; 0x66fc <fputc>
    598a:	c8 14       	cp	r12, r8
    598c:	d9 04       	cpc	r13, r9
    598e:	4c f0       	brlt	.+18     	; 0x59a2 <vfprintf+0x31c>
    5990:	8f 85       	ldd	r24, Y+15	; 0x0f
    5992:	98 89       	ldd	r25, Y+16	; 0x10
    5994:	88 15       	cp	r24, r8
    5996:	99 05       	cpc	r25, r9
    5998:	24 f4       	brge	.+8      	; 0x59a2 <vfprintf+0x31c>
    599a:	ed 85       	ldd	r30, Y+13	; 0x0d
    599c:	fe 85       	ldd	r31, Y+14	; 0x0e
    599e:	81 81       	ldd	r24, Z+1	; 0x01
    59a0:	01 c0       	rjmp	.+2      	; 0x59a4 <vfprintf+0x31e>
    59a2:	80 e3       	ldi	r24, 0x30	; 48
    59a4:	f1 e0       	ldi	r31, 0x01	; 1
    59a6:	8f 1a       	sub	r8, r31
    59a8:	91 08       	sbc	r9, r1
    59aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    59ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    59ae:	2f 5f       	subi	r18, 0xFF	; 255
    59b0:	3f 4f       	sbci	r19, 0xFF	; 255
    59b2:	3e 87       	std	Y+14, r19	; 0x0e
    59b4:	2d 87       	std	Y+13, r18	; 0x0d
    59b6:	80 16       	cp	r8, r16
    59b8:	91 06       	cpc	r9, r17
    59ba:	24 f0       	brlt	.+8      	; 0x59c4 <vfprintf+0x33e>
    59bc:	b7 01       	movw	r22, r14
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	9d d6       	rcall	.+3386   	; 0x66fc <fputc>
    59c2:	db cf       	rjmp	.-74     	; 0x597a <vfprintf+0x2f4>
    59c4:	c8 14       	cp	r12, r8
    59c6:	d9 04       	cpc	r13, r9
    59c8:	41 f4       	brne	.+16     	; 0x59da <vfprintf+0x354>
    59ca:	9a 81       	ldd	r25, Y+2	; 0x02
    59cc:	96 33       	cpi	r25, 0x36	; 54
    59ce:	20 f4       	brcc	.+8      	; 0x59d8 <vfprintf+0x352>
    59d0:	95 33       	cpi	r25, 0x35	; 53
    59d2:	19 f4       	brne	.+6      	; 0x59da <vfprintf+0x354>
    59d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    59d6:	34 ff       	sbrs	r19, 4
    59d8:	81 e3       	ldi	r24, 0x31	; 49
    59da:	b7 01       	movw	r22, r14
    59dc:	90 e0       	ldi	r25, 0x00	; 0
    59de:	48 c0       	rjmp	.+144    	; 0x5a70 <vfprintf+0x3ea>
    59e0:	8a 81       	ldd	r24, Y+2	; 0x02
    59e2:	81 33       	cpi	r24, 0x31	; 49
    59e4:	19 f0       	breq	.+6      	; 0x59ec <vfprintf+0x366>
    59e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    59e8:	9f 7e       	andi	r25, 0xEF	; 239
    59ea:	9c 87       	std	Y+12, r25	; 0x0c
    59ec:	b7 01       	movw	r22, r14
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	85 d6       	rcall	.+3338   	; 0x66fc <fputc>
    59f2:	11 11       	cpse	r17, r1
    59f4:	05 c0       	rjmp	.+10     	; 0x5a00 <vfprintf+0x37a>
    59f6:	94 fc       	sbrc	r9, 4
    59f8:	16 c0       	rjmp	.+44     	; 0x5a26 <vfprintf+0x3a0>
    59fa:	85 e6       	ldi	r24, 0x65	; 101
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	15 c0       	rjmp	.+42     	; 0x5a2a <vfprintf+0x3a4>
    5a00:	b7 01       	movw	r22, r14
    5a02:	8e e2       	ldi	r24, 0x2E	; 46
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	7a d6       	rcall	.+3316   	; 0x66fc <fputc>
    5a08:	1e 5f       	subi	r17, 0xFE	; 254
    5a0a:	82 e0       	ldi	r24, 0x02	; 2
    5a0c:	01 e0       	ldi	r16, 0x01	; 1
    5a0e:	08 0f       	add	r16, r24
    5a10:	f3 01       	movw	r30, r6
    5a12:	e8 0f       	add	r30, r24
    5a14:	f1 1d       	adc	r31, r1
    5a16:	80 81       	ld	r24, Z
    5a18:	b7 01       	movw	r22, r14
    5a1a:	90 e0       	ldi	r25, 0x00	; 0
    5a1c:	6f d6       	rcall	.+3294   	; 0x66fc <fputc>
    5a1e:	80 2f       	mov	r24, r16
    5a20:	01 13       	cpse	r16, r17
    5a22:	f4 cf       	rjmp	.-24     	; 0x5a0c <vfprintf+0x386>
    5a24:	e8 cf       	rjmp	.-48     	; 0x59f6 <vfprintf+0x370>
    5a26:	85 e4       	ldi	r24, 0x45	; 69
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	b7 01       	movw	r22, r14
    5a2c:	67 d6       	rcall	.+3278   	; 0x66fc <fputc>
    5a2e:	d7 fc       	sbrc	r13, 7
    5a30:	06 c0       	rjmp	.+12     	; 0x5a3e <vfprintf+0x3b8>
    5a32:	c1 14       	cp	r12, r1
    5a34:	d1 04       	cpc	r13, r1
    5a36:	41 f4       	brne	.+16     	; 0x5a48 <vfprintf+0x3c2>
    5a38:	ec 85       	ldd	r30, Y+12	; 0x0c
    5a3a:	e4 ff       	sbrs	r30, 4
    5a3c:	05 c0       	rjmp	.+10     	; 0x5a48 <vfprintf+0x3c2>
    5a3e:	d1 94       	neg	r13
    5a40:	c1 94       	neg	r12
    5a42:	d1 08       	sbc	r13, r1
    5a44:	8d e2       	ldi	r24, 0x2D	; 45
    5a46:	01 c0       	rjmp	.+2      	; 0x5a4a <vfprintf+0x3c4>
    5a48:	8b e2       	ldi	r24, 0x2B	; 43
    5a4a:	b7 01       	movw	r22, r14
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	56 d6       	rcall	.+3244   	; 0x66fc <fputc>
    5a50:	80 e3       	ldi	r24, 0x30	; 48
    5a52:	2a e0       	ldi	r18, 0x0A	; 10
    5a54:	c2 16       	cp	r12, r18
    5a56:	d1 04       	cpc	r13, r1
    5a58:	2c f0       	brlt	.+10     	; 0x5a64 <vfprintf+0x3de>
    5a5a:	8f 5f       	subi	r24, 0xFF	; 255
    5a5c:	fa e0       	ldi	r31, 0x0A	; 10
    5a5e:	cf 1a       	sub	r12, r31
    5a60:	d1 08       	sbc	r13, r1
    5a62:	f7 cf       	rjmp	.-18     	; 0x5a52 <vfprintf+0x3cc>
    5a64:	b7 01       	movw	r22, r14
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	49 d6       	rcall	.+3218   	; 0x66fc <fputc>
    5a6a:	b7 01       	movw	r22, r14
    5a6c:	c6 01       	movw	r24, r12
    5a6e:	c0 96       	adiw	r24, 0x30	; 48
    5a70:	45 d6       	rcall	.+3210   	; 0x66fc <fputc>
    5a72:	49 c1       	rjmp	.+658    	; 0x5d06 <vfprintf+0x680>
    5a74:	83 36       	cpi	r24, 0x63	; 99
    5a76:	31 f0       	breq	.+12     	; 0x5a84 <vfprintf+0x3fe>
    5a78:	83 37       	cpi	r24, 0x73	; 115
    5a7a:	79 f0       	breq	.+30     	; 0x5a9a <vfprintf+0x414>
    5a7c:	83 35       	cpi	r24, 0x53	; 83
    5a7e:	09 f0       	breq	.+2      	; 0x5a82 <vfprintf+0x3fc>
    5a80:	52 c0       	rjmp	.+164    	; 0x5b26 <vfprintf+0x4a0>
    5a82:	1f c0       	rjmp	.+62     	; 0x5ac2 <vfprintf+0x43c>
    5a84:	56 01       	movw	r10, r12
    5a86:	32 e0       	ldi	r19, 0x02	; 2
    5a88:	a3 0e       	add	r10, r19
    5a8a:	b1 1c       	adc	r11, r1
    5a8c:	f6 01       	movw	r30, r12
    5a8e:	80 81       	ld	r24, Z
    5a90:	89 83       	std	Y+1, r24	; 0x01
    5a92:	01 e0       	ldi	r16, 0x01	; 1
    5a94:	10 e0       	ldi	r17, 0x00	; 0
    5a96:	63 01       	movw	r12, r6
    5a98:	11 c0       	rjmp	.+34     	; 0x5abc <vfprintf+0x436>
    5a9a:	56 01       	movw	r10, r12
    5a9c:	f2 e0       	ldi	r31, 0x02	; 2
    5a9e:	af 0e       	add	r10, r31
    5aa0:	b1 1c       	adc	r11, r1
    5aa2:	f6 01       	movw	r30, r12
    5aa4:	c0 80       	ld	r12, Z
    5aa6:	d1 80       	ldd	r13, Z+1	; 0x01
    5aa8:	96 fe       	sbrs	r9, 6
    5aaa:	03 c0       	rjmp	.+6      	; 0x5ab2 <vfprintf+0x42c>
    5aac:	61 2f       	mov	r22, r17
    5aae:	70 e0       	ldi	r23, 0x00	; 0
    5ab0:	02 c0       	rjmp	.+4      	; 0x5ab6 <vfprintf+0x430>
    5ab2:	6f ef       	ldi	r22, 0xFF	; 255
    5ab4:	7f ef       	ldi	r23, 0xFF	; 255
    5ab6:	c6 01       	movw	r24, r12
    5ab8:	16 d6       	rcall	.+3116   	; 0x66e6 <strnlen>
    5aba:	8c 01       	movw	r16, r24
    5abc:	f9 2d       	mov	r31, r9
    5abe:	ff 77       	andi	r31, 0x7F	; 127
    5ac0:	13 c0       	rjmp	.+38     	; 0x5ae8 <vfprintf+0x462>
    5ac2:	56 01       	movw	r10, r12
    5ac4:	22 e0       	ldi	r18, 0x02	; 2
    5ac6:	a2 0e       	add	r10, r18
    5ac8:	b1 1c       	adc	r11, r1
    5aca:	f6 01       	movw	r30, r12
    5acc:	c0 80       	ld	r12, Z
    5ace:	d1 80       	ldd	r13, Z+1	; 0x01
    5ad0:	96 fe       	sbrs	r9, 6
    5ad2:	03 c0       	rjmp	.+6      	; 0x5ada <vfprintf+0x454>
    5ad4:	61 2f       	mov	r22, r17
    5ad6:	70 e0       	ldi	r23, 0x00	; 0
    5ad8:	02 c0       	rjmp	.+4      	; 0x5ade <vfprintf+0x458>
    5ada:	6f ef       	ldi	r22, 0xFF	; 255
    5adc:	7f ef       	ldi	r23, 0xFF	; 255
    5ade:	c6 01       	movw	r24, r12
    5ae0:	98 d5       	rcall	.+2864   	; 0x6612 <strnlen_P>
    5ae2:	8c 01       	movw	r16, r24
    5ae4:	f9 2d       	mov	r31, r9
    5ae6:	f0 68       	ori	r31, 0x80	; 128
    5ae8:	9f 2e       	mov	r9, r31
    5aea:	f3 fd       	sbrc	r31, 3
    5aec:	18 c0       	rjmp	.+48     	; 0x5b1e <vfprintf+0x498>
    5aee:	85 2d       	mov	r24, r5
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	08 17       	cp	r16, r24
    5af4:	19 07       	cpc	r17, r25
    5af6:	98 f4       	brcc	.+38     	; 0x5b1e <vfprintf+0x498>
    5af8:	b7 01       	movw	r22, r14
    5afa:	80 e2       	ldi	r24, 0x20	; 32
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	fe d5       	rcall	.+3068   	; 0x66fc <fputc>
    5b00:	5a 94       	dec	r5
    5b02:	f5 cf       	rjmp	.-22     	; 0x5aee <vfprintf+0x468>
    5b04:	f6 01       	movw	r30, r12
    5b06:	97 fc       	sbrc	r9, 7
    5b08:	85 91       	lpm	r24, Z+
    5b0a:	97 fe       	sbrs	r9, 7
    5b0c:	81 91       	ld	r24, Z+
    5b0e:	6f 01       	movw	r12, r30
    5b10:	b7 01       	movw	r22, r14
    5b12:	90 e0       	ldi	r25, 0x00	; 0
    5b14:	f3 d5       	rcall	.+3046   	; 0x66fc <fputc>
    5b16:	51 10       	cpse	r5, r1
    5b18:	5a 94       	dec	r5
    5b1a:	01 50       	subi	r16, 0x01	; 1
    5b1c:	11 09       	sbc	r17, r1
    5b1e:	01 15       	cp	r16, r1
    5b20:	11 05       	cpc	r17, r1
    5b22:	81 f7       	brne	.-32     	; 0x5b04 <vfprintf+0x47e>
    5b24:	f0 c0       	rjmp	.+480    	; 0x5d06 <vfprintf+0x680>
    5b26:	84 36       	cpi	r24, 0x64	; 100
    5b28:	11 f0       	breq	.+4      	; 0x5b2e <vfprintf+0x4a8>
    5b2a:	89 36       	cpi	r24, 0x69	; 105
    5b2c:	59 f5       	brne	.+86     	; 0x5b84 <vfprintf+0x4fe>
    5b2e:	56 01       	movw	r10, r12
    5b30:	97 fe       	sbrs	r9, 7
    5b32:	09 c0       	rjmp	.+18     	; 0x5b46 <vfprintf+0x4c0>
    5b34:	24 e0       	ldi	r18, 0x04	; 4
    5b36:	a2 0e       	add	r10, r18
    5b38:	b1 1c       	adc	r11, r1
    5b3a:	f6 01       	movw	r30, r12
    5b3c:	60 81       	ld	r22, Z
    5b3e:	71 81       	ldd	r23, Z+1	; 0x01
    5b40:	82 81       	ldd	r24, Z+2	; 0x02
    5b42:	93 81       	ldd	r25, Z+3	; 0x03
    5b44:	0a c0       	rjmp	.+20     	; 0x5b5a <vfprintf+0x4d4>
    5b46:	f2 e0       	ldi	r31, 0x02	; 2
    5b48:	af 0e       	add	r10, r31
    5b4a:	b1 1c       	adc	r11, r1
    5b4c:	f6 01       	movw	r30, r12
    5b4e:	60 81       	ld	r22, Z
    5b50:	71 81       	ldd	r23, Z+1	; 0x01
    5b52:	07 2e       	mov	r0, r23
    5b54:	00 0c       	add	r0, r0
    5b56:	88 0b       	sbc	r24, r24
    5b58:	99 0b       	sbc	r25, r25
    5b5a:	f9 2d       	mov	r31, r9
    5b5c:	ff 76       	andi	r31, 0x6F	; 111
    5b5e:	9f 2e       	mov	r9, r31
    5b60:	97 ff       	sbrs	r25, 7
    5b62:	09 c0       	rjmp	.+18     	; 0x5b76 <vfprintf+0x4f0>
    5b64:	90 95       	com	r25
    5b66:	80 95       	com	r24
    5b68:	70 95       	com	r23
    5b6a:	61 95       	neg	r22
    5b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5b70:	9f 4f       	sbci	r25, 0xFF	; 255
    5b72:	f0 68       	ori	r31, 0x80	; 128
    5b74:	9f 2e       	mov	r9, r31
    5b76:	2a e0       	ldi	r18, 0x0A	; 10
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	a3 01       	movw	r20, r6
    5b7c:	6e d6       	rcall	.+3292   	; 0x685a <__ultoa_invert>
    5b7e:	c8 2e       	mov	r12, r24
    5b80:	c6 18       	sub	r12, r6
    5b82:	3e c0       	rjmp	.+124    	; 0x5c00 <vfprintf+0x57a>
    5b84:	09 2d       	mov	r16, r9
    5b86:	85 37       	cpi	r24, 0x75	; 117
    5b88:	21 f4       	brne	.+8      	; 0x5b92 <vfprintf+0x50c>
    5b8a:	0f 7e       	andi	r16, 0xEF	; 239
    5b8c:	2a e0       	ldi	r18, 0x0A	; 10
    5b8e:	30 e0       	ldi	r19, 0x00	; 0
    5b90:	1d c0       	rjmp	.+58     	; 0x5bcc <vfprintf+0x546>
    5b92:	09 7f       	andi	r16, 0xF9	; 249
    5b94:	8f 36       	cpi	r24, 0x6F	; 111
    5b96:	91 f0       	breq	.+36     	; 0x5bbc <vfprintf+0x536>
    5b98:	18 f4       	brcc	.+6      	; 0x5ba0 <vfprintf+0x51a>
    5b9a:	88 35       	cpi	r24, 0x58	; 88
    5b9c:	59 f0       	breq	.+22     	; 0x5bb4 <vfprintf+0x52e>
    5b9e:	bc c0       	rjmp	.+376    	; 0x5d18 <vfprintf+0x692>
    5ba0:	80 37       	cpi	r24, 0x70	; 112
    5ba2:	19 f0       	breq	.+6      	; 0x5baa <vfprintf+0x524>
    5ba4:	88 37       	cpi	r24, 0x78	; 120
    5ba6:	11 f0       	breq	.+4      	; 0x5bac <vfprintf+0x526>
    5ba8:	b7 c0       	rjmp	.+366    	; 0x5d18 <vfprintf+0x692>
    5baa:	00 61       	ori	r16, 0x10	; 16
    5bac:	04 ff       	sbrs	r16, 4
    5bae:	09 c0       	rjmp	.+18     	; 0x5bc2 <vfprintf+0x53c>
    5bb0:	04 60       	ori	r16, 0x04	; 4
    5bb2:	07 c0       	rjmp	.+14     	; 0x5bc2 <vfprintf+0x53c>
    5bb4:	94 fe       	sbrs	r9, 4
    5bb6:	08 c0       	rjmp	.+16     	; 0x5bc8 <vfprintf+0x542>
    5bb8:	06 60       	ori	r16, 0x06	; 6
    5bba:	06 c0       	rjmp	.+12     	; 0x5bc8 <vfprintf+0x542>
    5bbc:	28 e0       	ldi	r18, 0x08	; 8
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	05 c0       	rjmp	.+10     	; 0x5bcc <vfprintf+0x546>
    5bc2:	20 e1       	ldi	r18, 0x10	; 16
    5bc4:	30 e0       	ldi	r19, 0x00	; 0
    5bc6:	02 c0       	rjmp	.+4      	; 0x5bcc <vfprintf+0x546>
    5bc8:	20 e1       	ldi	r18, 0x10	; 16
    5bca:	32 e0       	ldi	r19, 0x02	; 2
    5bcc:	56 01       	movw	r10, r12
    5bce:	07 ff       	sbrs	r16, 7
    5bd0:	09 c0       	rjmp	.+18     	; 0x5be4 <vfprintf+0x55e>
    5bd2:	84 e0       	ldi	r24, 0x04	; 4
    5bd4:	a8 0e       	add	r10, r24
    5bd6:	b1 1c       	adc	r11, r1
    5bd8:	f6 01       	movw	r30, r12
    5bda:	60 81       	ld	r22, Z
    5bdc:	71 81       	ldd	r23, Z+1	; 0x01
    5bde:	82 81       	ldd	r24, Z+2	; 0x02
    5be0:	93 81       	ldd	r25, Z+3	; 0x03
    5be2:	08 c0       	rjmp	.+16     	; 0x5bf4 <vfprintf+0x56e>
    5be4:	f2 e0       	ldi	r31, 0x02	; 2
    5be6:	af 0e       	add	r10, r31
    5be8:	b1 1c       	adc	r11, r1
    5bea:	f6 01       	movw	r30, r12
    5bec:	60 81       	ld	r22, Z
    5bee:	71 81       	ldd	r23, Z+1	; 0x01
    5bf0:	80 e0       	ldi	r24, 0x00	; 0
    5bf2:	90 e0       	ldi	r25, 0x00	; 0
    5bf4:	a3 01       	movw	r20, r6
    5bf6:	31 d6       	rcall	.+3170   	; 0x685a <__ultoa_invert>
    5bf8:	c8 2e       	mov	r12, r24
    5bfa:	c6 18       	sub	r12, r6
    5bfc:	0f 77       	andi	r16, 0x7F	; 127
    5bfe:	90 2e       	mov	r9, r16
    5c00:	96 fe       	sbrs	r9, 6
    5c02:	0b c0       	rjmp	.+22     	; 0x5c1a <vfprintf+0x594>
    5c04:	09 2d       	mov	r16, r9
    5c06:	0e 7f       	andi	r16, 0xFE	; 254
    5c08:	c1 16       	cp	r12, r17
    5c0a:	50 f4       	brcc	.+20     	; 0x5c20 <vfprintf+0x59a>
    5c0c:	94 fe       	sbrs	r9, 4
    5c0e:	0a c0       	rjmp	.+20     	; 0x5c24 <vfprintf+0x59e>
    5c10:	92 fc       	sbrc	r9, 2
    5c12:	08 c0       	rjmp	.+16     	; 0x5c24 <vfprintf+0x59e>
    5c14:	09 2d       	mov	r16, r9
    5c16:	0e 7e       	andi	r16, 0xEE	; 238
    5c18:	05 c0       	rjmp	.+10     	; 0x5c24 <vfprintf+0x59e>
    5c1a:	dc 2c       	mov	r13, r12
    5c1c:	09 2d       	mov	r16, r9
    5c1e:	03 c0       	rjmp	.+6      	; 0x5c26 <vfprintf+0x5a0>
    5c20:	dc 2c       	mov	r13, r12
    5c22:	01 c0       	rjmp	.+2      	; 0x5c26 <vfprintf+0x5a0>
    5c24:	d1 2e       	mov	r13, r17
    5c26:	04 ff       	sbrs	r16, 4
    5c28:	0d c0       	rjmp	.+26     	; 0x5c44 <vfprintf+0x5be>
    5c2a:	fe 01       	movw	r30, r28
    5c2c:	ec 0d       	add	r30, r12
    5c2e:	f1 1d       	adc	r31, r1
    5c30:	80 81       	ld	r24, Z
    5c32:	80 33       	cpi	r24, 0x30	; 48
    5c34:	11 f4       	brne	.+4      	; 0x5c3a <vfprintf+0x5b4>
    5c36:	09 7e       	andi	r16, 0xE9	; 233
    5c38:	09 c0       	rjmp	.+18     	; 0x5c4c <vfprintf+0x5c6>
    5c3a:	02 ff       	sbrs	r16, 2
    5c3c:	06 c0       	rjmp	.+12     	; 0x5c4a <vfprintf+0x5c4>
    5c3e:	d3 94       	inc	r13
    5c40:	d3 94       	inc	r13
    5c42:	04 c0       	rjmp	.+8      	; 0x5c4c <vfprintf+0x5c6>
    5c44:	80 2f       	mov	r24, r16
    5c46:	86 78       	andi	r24, 0x86	; 134
    5c48:	09 f0       	breq	.+2      	; 0x5c4c <vfprintf+0x5c6>
    5c4a:	d3 94       	inc	r13
    5c4c:	03 fd       	sbrc	r16, 3
    5c4e:	10 c0       	rjmp	.+32     	; 0x5c70 <vfprintf+0x5ea>
    5c50:	00 ff       	sbrs	r16, 0
    5c52:	06 c0       	rjmp	.+12     	; 0x5c60 <vfprintf+0x5da>
    5c54:	1c 2d       	mov	r17, r12
    5c56:	d5 14       	cp	r13, r5
    5c58:	78 f4       	brcc	.+30     	; 0x5c78 <vfprintf+0x5f2>
    5c5a:	15 0d       	add	r17, r5
    5c5c:	1d 19       	sub	r17, r13
    5c5e:	0c c0       	rjmp	.+24     	; 0x5c78 <vfprintf+0x5f2>
    5c60:	d5 14       	cp	r13, r5
    5c62:	50 f4       	brcc	.+20     	; 0x5c78 <vfprintf+0x5f2>
    5c64:	b7 01       	movw	r22, r14
    5c66:	80 e2       	ldi	r24, 0x20	; 32
    5c68:	90 e0       	ldi	r25, 0x00	; 0
    5c6a:	48 d5       	rcall	.+2704   	; 0x66fc <fputc>
    5c6c:	d3 94       	inc	r13
    5c6e:	f8 cf       	rjmp	.-16     	; 0x5c60 <vfprintf+0x5da>
    5c70:	d5 14       	cp	r13, r5
    5c72:	10 f4       	brcc	.+4      	; 0x5c78 <vfprintf+0x5f2>
    5c74:	5d 18       	sub	r5, r13
    5c76:	01 c0       	rjmp	.+2      	; 0x5c7a <vfprintf+0x5f4>
    5c78:	51 2c       	mov	r5, r1
    5c7a:	04 ff       	sbrs	r16, 4
    5c7c:	0f c0       	rjmp	.+30     	; 0x5c9c <vfprintf+0x616>
    5c7e:	b7 01       	movw	r22, r14
    5c80:	80 e3       	ldi	r24, 0x30	; 48
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	3b d5       	rcall	.+2678   	; 0x66fc <fputc>
    5c86:	02 ff       	sbrs	r16, 2
    5c88:	16 c0       	rjmp	.+44     	; 0x5cb6 <vfprintf+0x630>
    5c8a:	01 fd       	sbrc	r16, 1
    5c8c:	03 c0       	rjmp	.+6      	; 0x5c94 <vfprintf+0x60e>
    5c8e:	88 e7       	ldi	r24, 0x78	; 120
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	02 c0       	rjmp	.+4      	; 0x5c98 <vfprintf+0x612>
    5c94:	88 e5       	ldi	r24, 0x58	; 88
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	b7 01       	movw	r22, r14
    5c9a:	0c c0       	rjmp	.+24     	; 0x5cb4 <vfprintf+0x62e>
    5c9c:	80 2f       	mov	r24, r16
    5c9e:	86 78       	andi	r24, 0x86	; 134
    5ca0:	51 f0       	breq	.+20     	; 0x5cb6 <vfprintf+0x630>
    5ca2:	01 ff       	sbrs	r16, 1
    5ca4:	02 c0       	rjmp	.+4      	; 0x5caa <vfprintf+0x624>
    5ca6:	8b e2       	ldi	r24, 0x2B	; 43
    5ca8:	01 c0       	rjmp	.+2      	; 0x5cac <vfprintf+0x626>
    5caa:	80 e2       	ldi	r24, 0x20	; 32
    5cac:	07 fd       	sbrc	r16, 7
    5cae:	8d e2       	ldi	r24, 0x2D	; 45
    5cb0:	b7 01       	movw	r22, r14
    5cb2:	90 e0       	ldi	r25, 0x00	; 0
    5cb4:	23 d5       	rcall	.+2630   	; 0x66fc <fputc>
    5cb6:	c1 16       	cp	r12, r17
    5cb8:	30 f4       	brcc	.+12     	; 0x5cc6 <vfprintf+0x640>
    5cba:	b7 01       	movw	r22, r14
    5cbc:	80 e3       	ldi	r24, 0x30	; 48
    5cbe:	90 e0       	ldi	r25, 0x00	; 0
    5cc0:	1d d5       	rcall	.+2618   	; 0x66fc <fputc>
    5cc2:	11 50       	subi	r17, 0x01	; 1
    5cc4:	f8 cf       	rjmp	.-16     	; 0x5cb6 <vfprintf+0x630>
    5cc6:	ca 94       	dec	r12
    5cc8:	f3 01       	movw	r30, r6
    5cca:	ec 0d       	add	r30, r12
    5ccc:	f1 1d       	adc	r31, r1
    5cce:	80 81       	ld	r24, Z
    5cd0:	b7 01       	movw	r22, r14
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	13 d5       	rcall	.+2598   	; 0x66fc <fputc>
    5cd6:	c1 10       	cpse	r12, r1
    5cd8:	f6 cf       	rjmp	.-20     	; 0x5cc6 <vfprintf+0x640>
    5cda:	15 c0       	rjmp	.+42     	; 0x5d06 <vfprintf+0x680>
    5cdc:	f4 e0       	ldi	r31, 0x04	; 4
    5cde:	f5 15       	cp	r31, r5
    5ce0:	50 f5       	brcc	.+84     	; 0x5d36 <vfprintf+0x6b0>
    5ce2:	84 e0       	ldi	r24, 0x04	; 4
    5ce4:	58 1a       	sub	r5, r24
    5ce6:	93 fe       	sbrs	r9, 3
    5ce8:	1e c0       	rjmp	.+60     	; 0x5d26 <vfprintf+0x6a0>
    5cea:	01 11       	cpse	r16, r1
    5cec:	25 c0       	rjmp	.+74     	; 0x5d38 <vfprintf+0x6b2>
    5cee:	2c 85       	ldd	r18, Y+12	; 0x0c
    5cf0:	23 ff       	sbrs	r18, 3
    5cf2:	27 c0       	rjmp	.+78     	; 0x5d42 <vfprintf+0x6bc>
    5cf4:	0a e9       	ldi	r16, 0x9A	; 154
    5cf6:	11 e0       	ldi	r17, 0x01	; 1
    5cf8:	39 2d       	mov	r19, r9
    5cfa:	30 71       	andi	r19, 0x10	; 16
    5cfc:	93 2e       	mov	r9, r19
    5cfe:	f8 01       	movw	r30, r16
    5d00:	84 91       	lpm	r24, Z
    5d02:	81 11       	cpse	r24, r1
    5d04:	21 c0       	rjmp	.+66     	; 0x5d48 <vfprintf+0x6c2>
    5d06:	55 20       	and	r5, r5
    5d08:	09 f4       	brne	.+2      	; 0x5d0c <vfprintf+0x686>
    5d0a:	fc cc       	rjmp	.-1544   	; 0x5704 <vfprintf+0x7e>
    5d0c:	b7 01       	movw	r22, r14
    5d0e:	80 e2       	ldi	r24, 0x20	; 32
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	f4 d4       	rcall	.+2536   	; 0x66fc <fputc>
    5d14:	5a 94       	dec	r5
    5d16:	f7 cf       	rjmp	.-18     	; 0x5d06 <vfprintf+0x680>
    5d18:	f7 01       	movw	r30, r14
    5d1a:	86 81       	ldd	r24, Z+6	; 0x06
    5d1c:	97 81       	ldd	r25, Z+7	; 0x07
    5d1e:	23 c0       	rjmp	.+70     	; 0x5d66 <vfprintf+0x6e0>
    5d20:	8f ef       	ldi	r24, 0xFF	; 255
    5d22:	9f ef       	ldi	r25, 0xFF	; 255
    5d24:	20 c0       	rjmp	.+64     	; 0x5d66 <vfprintf+0x6e0>
    5d26:	b7 01       	movw	r22, r14
    5d28:	80 e2       	ldi	r24, 0x20	; 32
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	e7 d4       	rcall	.+2510   	; 0x66fc <fputc>
    5d2e:	5a 94       	dec	r5
    5d30:	51 10       	cpse	r5, r1
    5d32:	f9 cf       	rjmp	.-14     	; 0x5d26 <vfprintf+0x6a0>
    5d34:	da cf       	rjmp	.-76     	; 0x5cea <vfprintf+0x664>
    5d36:	51 2c       	mov	r5, r1
    5d38:	b7 01       	movw	r22, r14
    5d3a:	80 2f       	mov	r24, r16
    5d3c:	90 e0       	ldi	r25, 0x00	; 0
    5d3e:	de d4       	rcall	.+2492   	; 0x66fc <fputc>
    5d40:	d6 cf       	rjmp	.-84     	; 0x5cee <vfprintf+0x668>
    5d42:	0e e9       	ldi	r16, 0x9E	; 158
    5d44:	11 e0       	ldi	r17, 0x01	; 1
    5d46:	d8 cf       	rjmp	.-80     	; 0x5cf8 <vfprintf+0x672>
    5d48:	91 10       	cpse	r9, r1
    5d4a:	80 52       	subi	r24, 0x20	; 32
    5d4c:	b7 01       	movw	r22, r14
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	d5 d4       	rcall	.+2474   	; 0x66fc <fputc>
    5d52:	0f 5f       	subi	r16, 0xFF	; 255
    5d54:	1f 4f       	sbci	r17, 0xFF	; 255
    5d56:	d3 cf       	rjmp	.-90     	; 0x5cfe <vfprintf+0x678>
    5d58:	23 e0       	ldi	r18, 0x03	; 3
    5d5a:	25 15       	cp	r18, r5
    5d5c:	10 f4       	brcc	.+4      	; 0x5d62 <vfprintf+0x6dc>
    5d5e:	83 e0       	ldi	r24, 0x03	; 3
    5d60:	c1 cf       	rjmp	.-126    	; 0x5ce4 <vfprintf+0x65e>
    5d62:	51 2c       	mov	r5, r1
    5d64:	c4 cf       	rjmp	.-120    	; 0x5cee <vfprintf+0x668>
    5d66:	60 96       	adiw	r28, 0x10	; 16
    5d68:	0f b6       	in	r0, 0x3f	; 63
    5d6a:	f8 94       	cli
    5d6c:	de bf       	out	0x3e, r29	; 62
    5d6e:	0f be       	out	0x3f, r0	; 63
    5d70:	cd bf       	out	0x3d, r28	; 61
    5d72:	df 91       	pop	r29
    5d74:	cf 91       	pop	r28
    5d76:	1f 91       	pop	r17
    5d78:	0f 91       	pop	r16
    5d7a:	ff 90       	pop	r15
    5d7c:	ef 90       	pop	r14
    5d7e:	df 90       	pop	r13
    5d80:	cf 90       	pop	r12
    5d82:	bf 90       	pop	r11
    5d84:	af 90       	pop	r10
    5d86:	9f 90       	pop	r9
    5d88:	8f 90       	pop	r8
    5d8a:	7f 90       	pop	r7
    5d8c:	6f 90       	pop	r6
    5d8e:	5f 90       	pop	r5
    5d90:	4f 90       	pop	r4
    5d92:	3f 90       	pop	r3
    5d94:	2f 90       	pop	r2
    5d96:	08 95       	ret

00005d98 <__subsf3>:
    5d98:	50 58       	subi	r21, 0x80	; 128

00005d9a <__addsf3>:
    5d9a:	bb 27       	eor	r27, r27
    5d9c:	aa 27       	eor	r26, r26
    5d9e:	0e d0       	rcall	.+28     	; 0x5dbc <__addsf3x>
    5da0:	4d c1       	rjmp	.+666    	; 0x603c <__fp_round>
    5da2:	3e d1       	rcall	.+636    	; 0x6020 <__fp_pscA>
    5da4:	30 f0       	brcs	.+12     	; 0x5db2 <__addsf3+0x18>
    5da6:	43 d1       	rcall	.+646    	; 0x602e <__fp_pscB>
    5da8:	20 f0       	brcs	.+8      	; 0x5db2 <__addsf3+0x18>
    5daa:	31 f4       	brne	.+12     	; 0x5db8 <__addsf3+0x1e>
    5dac:	9f 3f       	cpi	r25, 0xFF	; 255
    5dae:	11 f4       	brne	.+4      	; 0x5db4 <__addsf3+0x1a>
    5db0:	1e f4       	brtc	.+6      	; 0x5db8 <__addsf3+0x1e>
    5db2:	33 c1       	rjmp	.+614    	; 0x601a <__fp_nan>
    5db4:	0e f4       	brtc	.+2      	; 0x5db8 <__addsf3+0x1e>
    5db6:	e0 95       	com	r30
    5db8:	e7 fb       	bst	r30, 7
    5dba:	29 c1       	rjmp	.+594    	; 0x600e <__fp_inf>

00005dbc <__addsf3x>:
    5dbc:	e9 2f       	mov	r30, r25
    5dbe:	4f d1       	rcall	.+670    	; 0x605e <__fp_split3>
    5dc0:	80 f3       	brcs	.-32     	; 0x5da2 <__addsf3+0x8>
    5dc2:	ba 17       	cp	r27, r26
    5dc4:	62 07       	cpc	r22, r18
    5dc6:	73 07       	cpc	r23, r19
    5dc8:	84 07       	cpc	r24, r20
    5dca:	95 07       	cpc	r25, r21
    5dcc:	18 f0       	brcs	.+6      	; 0x5dd4 <__addsf3x+0x18>
    5dce:	71 f4       	brne	.+28     	; 0x5dec <__addsf3x+0x30>
    5dd0:	9e f5       	brtc	.+102    	; 0x5e38 <__addsf3x+0x7c>
    5dd2:	67 c1       	rjmp	.+718    	; 0x60a2 <__fp_zero>
    5dd4:	0e f4       	brtc	.+2      	; 0x5dd8 <__addsf3x+0x1c>
    5dd6:	e0 95       	com	r30
    5dd8:	0b 2e       	mov	r0, r27
    5dda:	ba 2f       	mov	r27, r26
    5ddc:	a0 2d       	mov	r26, r0
    5dde:	0b 01       	movw	r0, r22
    5de0:	b9 01       	movw	r22, r18
    5de2:	90 01       	movw	r18, r0
    5de4:	0c 01       	movw	r0, r24
    5de6:	ca 01       	movw	r24, r20
    5de8:	a0 01       	movw	r20, r0
    5dea:	11 24       	eor	r1, r1
    5dec:	ff 27       	eor	r31, r31
    5dee:	59 1b       	sub	r21, r25
    5df0:	99 f0       	breq	.+38     	; 0x5e18 <__addsf3x+0x5c>
    5df2:	59 3f       	cpi	r21, 0xF9	; 249
    5df4:	50 f4       	brcc	.+20     	; 0x5e0a <__addsf3x+0x4e>
    5df6:	50 3e       	cpi	r21, 0xE0	; 224
    5df8:	68 f1       	brcs	.+90     	; 0x5e54 <__addsf3x+0x98>
    5dfa:	1a 16       	cp	r1, r26
    5dfc:	f0 40       	sbci	r31, 0x00	; 0
    5dfe:	a2 2f       	mov	r26, r18
    5e00:	23 2f       	mov	r18, r19
    5e02:	34 2f       	mov	r19, r20
    5e04:	44 27       	eor	r20, r20
    5e06:	58 5f       	subi	r21, 0xF8	; 248
    5e08:	f3 cf       	rjmp	.-26     	; 0x5df0 <__addsf3x+0x34>
    5e0a:	46 95       	lsr	r20
    5e0c:	37 95       	ror	r19
    5e0e:	27 95       	ror	r18
    5e10:	a7 95       	ror	r26
    5e12:	f0 40       	sbci	r31, 0x00	; 0
    5e14:	53 95       	inc	r21
    5e16:	c9 f7       	brne	.-14     	; 0x5e0a <__addsf3x+0x4e>
    5e18:	7e f4       	brtc	.+30     	; 0x5e38 <__addsf3x+0x7c>
    5e1a:	1f 16       	cp	r1, r31
    5e1c:	ba 0b       	sbc	r27, r26
    5e1e:	62 0b       	sbc	r22, r18
    5e20:	73 0b       	sbc	r23, r19
    5e22:	84 0b       	sbc	r24, r20
    5e24:	ba f0       	brmi	.+46     	; 0x5e54 <__addsf3x+0x98>
    5e26:	91 50       	subi	r25, 0x01	; 1
    5e28:	a1 f0       	breq	.+40     	; 0x5e52 <__addsf3x+0x96>
    5e2a:	ff 0f       	add	r31, r31
    5e2c:	bb 1f       	adc	r27, r27
    5e2e:	66 1f       	adc	r22, r22
    5e30:	77 1f       	adc	r23, r23
    5e32:	88 1f       	adc	r24, r24
    5e34:	c2 f7       	brpl	.-16     	; 0x5e26 <__addsf3x+0x6a>
    5e36:	0e c0       	rjmp	.+28     	; 0x5e54 <__addsf3x+0x98>
    5e38:	ba 0f       	add	r27, r26
    5e3a:	62 1f       	adc	r22, r18
    5e3c:	73 1f       	adc	r23, r19
    5e3e:	84 1f       	adc	r24, r20
    5e40:	48 f4       	brcc	.+18     	; 0x5e54 <__addsf3x+0x98>
    5e42:	87 95       	ror	r24
    5e44:	77 95       	ror	r23
    5e46:	67 95       	ror	r22
    5e48:	b7 95       	ror	r27
    5e4a:	f7 95       	ror	r31
    5e4c:	9e 3f       	cpi	r25, 0xFE	; 254
    5e4e:	08 f0       	brcs	.+2      	; 0x5e52 <__addsf3x+0x96>
    5e50:	b3 cf       	rjmp	.-154    	; 0x5db8 <__addsf3+0x1e>
    5e52:	93 95       	inc	r25
    5e54:	88 0f       	add	r24, r24
    5e56:	08 f0       	brcs	.+2      	; 0x5e5a <__addsf3x+0x9e>
    5e58:	99 27       	eor	r25, r25
    5e5a:	ee 0f       	add	r30, r30
    5e5c:	97 95       	ror	r25
    5e5e:	87 95       	ror	r24
    5e60:	08 95       	ret

00005e62 <__divsf3>:
    5e62:	0c d0       	rcall	.+24     	; 0x5e7c <__divsf3x>
    5e64:	eb c0       	rjmp	.+470    	; 0x603c <__fp_round>
    5e66:	e3 d0       	rcall	.+454    	; 0x602e <__fp_pscB>
    5e68:	40 f0       	brcs	.+16     	; 0x5e7a <__divsf3+0x18>
    5e6a:	da d0       	rcall	.+436    	; 0x6020 <__fp_pscA>
    5e6c:	30 f0       	brcs	.+12     	; 0x5e7a <__divsf3+0x18>
    5e6e:	21 f4       	brne	.+8      	; 0x5e78 <__divsf3+0x16>
    5e70:	5f 3f       	cpi	r21, 0xFF	; 255
    5e72:	19 f0       	breq	.+6      	; 0x5e7a <__divsf3+0x18>
    5e74:	cc c0       	rjmp	.+408    	; 0x600e <__fp_inf>
    5e76:	51 11       	cpse	r21, r1
    5e78:	15 c1       	rjmp	.+554    	; 0x60a4 <__fp_szero>
    5e7a:	cf c0       	rjmp	.+414    	; 0x601a <__fp_nan>

00005e7c <__divsf3x>:
    5e7c:	f0 d0       	rcall	.+480    	; 0x605e <__fp_split3>
    5e7e:	98 f3       	brcs	.-26     	; 0x5e66 <__divsf3+0x4>

00005e80 <__divsf3_pse>:
    5e80:	99 23       	and	r25, r25
    5e82:	c9 f3       	breq	.-14     	; 0x5e76 <__divsf3+0x14>
    5e84:	55 23       	and	r21, r21
    5e86:	b1 f3       	breq	.-20     	; 0x5e74 <__divsf3+0x12>
    5e88:	95 1b       	sub	r25, r21
    5e8a:	55 0b       	sbc	r21, r21
    5e8c:	bb 27       	eor	r27, r27
    5e8e:	aa 27       	eor	r26, r26
    5e90:	62 17       	cp	r22, r18
    5e92:	73 07       	cpc	r23, r19
    5e94:	84 07       	cpc	r24, r20
    5e96:	38 f0       	brcs	.+14     	; 0x5ea6 <__divsf3_pse+0x26>
    5e98:	9f 5f       	subi	r25, 0xFF	; 255
    5e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    5e9c:	22 0f       	add	r18, r18
    5e9e:	33 1f       	adc	r19, r19
    5ea0:	44 1f       	adc	r20, r20
    5ea2:	aa 1f       	adc	r26, r26
    5ea4:	a9 f3       	breq	.-22     	; 0x5e90 <__divsf3_pse+0x10>
    5ea6:	33 d0       	rcall	.+102    	; 0x5f0e <__divsf3_pse+0x8e>
    5ea8:	0e 2e       	mov	r0, r30
    5eaa:	3a f0       	brmi	.+14     	; 0x5eba <__divsf3_pse+0x3a>
    5eac:	e0 e8       	ldi	r30, 0x80	; 128
    5eae:	30 d0       	rcall	.+96     	; 0x5f10 <__divsf3_pse+0x90>
    5eb0:	91 50       	subi	r25, 0x01	; 1
    5eb2:	50 40       	sbci	r21, 0x00	; 0
    5eb4:	e6 95       	lsr	r30
    5eb6:	00 1c       	adc	r0, r0
    5eb8:	ca f7       	brpl	.-14     	; 0x5eac <__divsf3_pse+0x2c>
    5eba:	29 d0       	rcall	.+82     	; 0x5f0e <__divsf3_pse+0x8e>
    5ebc:	fe 2f       	mov	r31, r30
    5ebe:	27 d0       	rcall	.+78     	; 0x5f0e <__divsf3_pse+0x8e>
    5ec0:	66 0f       	add	r22, r22
    5ec2:	77 1f       	adc	r23, r23
    5ec4:	88 1f       	adc	r24, r24
    5ec6:	bb 1f       	adc	r27, r27
    5ec8:	26 17       	cp	r18, r22
    5eca:	37 07       	cpc	r19, r23
    5ecc:	48 07       	cpc	r20, r24
    5ece:	ab 07       	cpc	r26, r27
    5ed0:	b0 e8       	ldi	r27, 0x80	; 128
    5ed2:	09 f0       	breq	.+2      	; 0x5ed6 <__divsf3_pse+0x56>
    5ed4:	bb 0b       	sbc	r27, r27
    5ed6:	80 2d       	mov	r24, r0
    5ed8:	bf 01       	movw	r22, r30
    5eda:	ff 27       	eor	r31, r31
    5edc:	93 58       	subi	r25, 0x83	; 131
    5ede:	5f 4f       	sbci	r21, 0xFF	; 255
    5ee0:	2a f0       	brmi	.+10     	; 0x5eec <__divsf3_pse+0x6c>
    5ee2:	9e 3f       	cpi	r25, 0xFE	; 254
    5ee4:	51 05       	cpc	r21, r1
    5ee6:	68 f0       	brcs	.+26     	; 0x5f02 <__divsf3_pse+0x82>
    5ee8:	92 c0       	rjmp	.+292    	; 0x600e <__fp_inf>
    5eea:	dc c0       	rjmp	.+440    	; 0x60a4 <__fp_szero>
    5eec:	5f 3f       	cpi	r21, 0xFF	; 255
    5eee:	ec f3       	brlt	.-6      	; 0x5eea <__divsf3_pse+0x6a>
    5ef0:	98 3e       	cpi	r25, 0xE8	; 232
    5ef2:	dc f3       	brlt	.-10     	; 0x5eea <__divsf3_pse+0x6a>
    5ef4:	86 95       	lsr	r24
    5ef6:	77 95       	ror	r23
    5ef8:	67 95       	ror	r22
    5efa:	b7 95       	ror	r27
    5efc:	f7 95       	ror	r31
    5efe:	9f 5f       	subi	r25, 0xFF	; 255
    5f00:	c9 f7       	brne	.-14     	; 0x5ef4 <__divsf3_pse+0x74>
    5f02:	88 0f       	add	r24, r24
    5f04:	91 1d       	adc	r25, r1
    5f06:	96 95       	lsr	r25
    5f08:	87 95       	ror	r24
    5f0a:	97 f9       	bld	r25, 7
    5f0c:	08 95       	ret
    5f0e:	e1 e0       	ldi	r30, 0x01	; 1
    5f10:	66 0f       	add	r22, r22
    5f12:	77 1f       	adc	r23, r23
    5f14:	88 1f       	adc	r24, r24
    5f16:	bb 1f       	adc	r27, r27
    5f18:	62 17       	cp	r22, r18
    5f1a:	73 07       	cpc	r23, r19
    5f1c:	84 07       	cpc	r24, r20
    5f1e:	ba 07       	cpc	r27, r26
    5f20:	20 f0       	brcs	.+8      	; 0x5f2a <__divsf3_pse+0xaa>
    5f22:	62 1b       	sub	r22, r18
    5f24:	73 0b       	sbc	r23, r19
    5f26:	84 0b       	sbc	r24, r20
    5f28:	ba 0b       	sbc	r27, r26
    5f2a:	ee 1f       	adc	r30, r30
    5f2c:	88 f7       	brcc	.-30     	; 0x5f10 <__divsf3_pse+0x90>
    5f2e:	e0 95       	com	r30
    5f30:	08 95       	ret

00005f32 <__fixsfsi>:
    5f32:	04 d0       	rcall	.+8      	; 0x5f3c <__fixunssfsi>
    5f34:	68 94       	set
    5f36:	b1 11       	cpse	r27, r1
    5f38:	b5 c0       	rjmp	.+362    	; 0x60a4 <__fp_szero>
    5f3a:	08 95       	ret

00005f3c <__fixunssfsi>:
    5f3c:	98 d0       	rcall	.+304    	; 0x606e <__fp_splitA>
    5f3e:	88 f0       	brcs	.+34     	; 0x5f62 <__fixunssfsi+0x26>
    5f40:	9f 57       	subi	r25, 0x7F	; 127
    5f42:	90 f0       	brcs	.+36     	; 0x5f68 <__fixunssfsi+0x2c>
    5f44:	b9 2f       	mov	r27, r25
    5f46:	99 27       	eor	r25, r25
    5f48:	b7 51       	subi	r27, 0x17	; 23
    5f4a:	a0 f0       	brcs	.+40     	; 0x5f74 <__fixunssfsi+0x38>
    5f4c:	d1 f0       	breq	.+52     	; 0x5f82 <__fixunssfsi+0x46>
    5f4e:	66 0f       	add	r22, r22
    5f50:	77 1f       	adc	r23, r23
    5f52:	88 1f       	adc	r24, r24
    5f54:	99 1f       	adc	r25, r25
    5f56:	1a f0       	brmi	.+6      	; 0x5f5e <__fixunssfsi+0x22>
    5f58:	ba 95       	dec	r27
    5f5a:	c9 f7       	brne	.-14     	; 0x5f4e <__fixunssfsi+0x12>
    5f5c:	12 c0       	rjmp	.+36     	; 0x5f82 <__fixunssfsi+0x46>
    5f5e:	b1 30       	cpi	r27, 0x01	; 1
    5f60:	81 f0       	breq	.+32     	; 0x5f82 <__fixunssfsi+0x46>
    5f62:	9f d0       	rcall	.+318    	; 0x60a2 <__fp_zero>
    5f64:	b1 e0       	ldi	r27, 0x01	; 1
    5f66:	08 95       	ret
    5f68:	9c c0       	rjmp	.+312    	; 0x60a2 <__fp_zero>
    5f6a:	67 2f       	mov	r22, r23
    5f6c:	78 2f       	mov	r23, r24
    5f6e:	88 27       	eor	r24, r24
    5f70:	b8 5f       	subi	r27, 0xF8	; 248
    5f72:	39 f0       	breq	.+14     	; 0x5f82 <__fixunssfsi+0x46>
    5f74:	b9 3f       	cpi	r27, 0xF9	; 249
    5f76:	cc f3       	brlt	.-14     	; 0x5f6a <__fixunssfsi+0x2e>
    5f78:	86 95       	lsr	r24
    5f7a:	77 95       	ror	r23
    5f7c:	67 95       	ror	r22
    5f7e:	b3 95       	inc	r27
    5f80:	d9 f7       	brne	.-10     	; 0x5f78 <__fixunssfsi+0x3c>
    5f82:	3e f4       	brtc	.+14     	; 0x5f92 <__fixunssfsi+0x56>
    5f84:	90 95       	com	r25
    5f86:	80 95       	com	r24
    5f88:	70 95       	com	r23
    5f8a:	61 95       	neg	r22
    5f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    5f90:	9f 4f       	sbci	r25, 0xFF	; 255
    5f92:	08 95       	ret

00005f94 <__floatunsisf>:
    5f94:	e8 94       	clt
    5f96:	09 c0       	rjmp	.+18     	; 0x5faa <__floatsisf+0x12>

00005f98 <__floatsisf>:
    5f98:	97 fb       	bst	r25, 7
    5f9a:	3e f4       	brtc	.+14     	; 0x5faa <__floatsisf+0x12>
    5f9c:	90 95       	com	r25
    5f9e:	80 95       	com	r24
    5fa0:	70 95       	com	r23
    5fa2:	61 95       	neg	r22
    5fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fa6:	8f 4f       	sbci	r24, 0xFF	; 255
    5fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    5faa:	99 23       	and	r25, r25
    5fac:	a9 f0       	breq	.+42     	; 0x5fd8 <__floatsisf+0x40>
    5fae:	f9 2f       	mov	r31, r25
    5fb0:	96 e9       	ldi	r25, 0x96	; 150
    5fb2:	bb 27       	eor	r27, r27
    5fb4:	93 95       	inc	r25
    5fb6:	f6 95       	lsr	r31
    5fb8:	87 95       	ror	r24
    5fba:	77 95       	ror	r23
    5fbc:	67 95       	ror	r22
    5fbe:	b7 95       	ror	r27
    5fc0:	f1 11       	cpse	r31, r1
    5fc2:	f8 cf       	rjmp	.-16     	; 0x5fb4 <__floatsisf+0x1c>
    5fc4:	fa f4       	brpl	.+62     	; 0x6004 <__floatsisf+0x6c>
    5fc6:	bb 0f       	add	r27, r27
    5fc8:	11 f4       	brne	.+4      	; 0x5fce <__floatsisf+0x36>
    5fca:	60 ff       	sbrs	r22, 0
    5fcc:	1b c0       	rjmp	.+54     	; 0x6004 <__floatsisf+0x6c>
    5fce:	6f 5f       	subi	r22, 0xFF	; 255
    5fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    5fd2:	8f 4f       	sbci	r24, 0xFF	; 255
    5fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd6:	16 c0       	rjmp	.+44     	; 0x6004 <__floatsisf+0x6c>
    5fd8:	88 23       	and	r24, r24
    5fda:	11 f0       	breq	.+4      	; 0x5fe0 <__floatsisf+0x48>
    5fdc:	96 e9       	ldi	r25, 0x96	; 150
    5fde:	11 c0       	rjmp	.+34     	; 0x6002 <__floatsisf+0x6a>
    5fe0:	77 23       	and	r23, r23
    5fe2:	21 f0       	breq	.+8      	; 0x5fec <__floatsisf+0x54>
    5fe4:	9e e8       	ldi	r25, 0x8E	; 142
    5fe6:	87 2f       	mov	r24, r23
    5fe8:	76 2f       	mov	r23, r22
    5fea:	05 c0       	rjmp	.+10     	; 0x5ff6 <__floatsisf+0x5e>
    5fec:	66 23       	and	r22, r22
    5fee:	71 f0       	breq	.+28     	; 0x600c <__floatsisf+0x74>
    5ff0:	96 e8       	ldi	r25, 0x86	; 134
    5ff2:	86 2f       	mov	r24, r22
    5ff4:	70 e0       	ldi	r23, 0x00	; 0
    5ff6:	60 e0       	ldi	r22, 0x00	; 0
    5ff8:	2a f0       	brmi	.+10     	; 0x6004 <__floatsisf+0x6c>
    5ffa:	9a 95       	dec	r25
    5ffc:	66 0f       	add	r22, r22
    5ffe:	77 1f       	adc	r23, r23
    6000:	88 1f       	adc	r24, r24
    6002:	da f7       	brpl	.-10     	; 0x5ffa <__floatsisf+0x62>
    6004:	88 0f       	add	r24, r24
    6006:	96 95       	lsr	r25
    6008:	87 95       	ror	r24
    600a:	97 f9       	bld	r25, 7
    600c:	08 95       	ret

0000600e <__fp_inf>:
    600e:	97 f9       	bld	r25, 7
    6010:	9f 67       	ori	r25, 0x7F	; 127
    6012:	80 e8       	ldi	r24, 0x80	; 128
    6014:	70 e0       	ldi	r23, 0x00	; 0
    6016:	60 e0       	ldi	r22, 0x00	; 0
    6018:	08 95       	ret

0000601a <__fp_nan>:
    601a:	9f ef       	ldi	r25, 0xFF	; 255
    601c:	80 ec       	ldi	r24, 0xC0	; 192
    601e:	08 95       	ret

00006020 <__fp_pscA>:
    6020:	00 24       	eor	r0, r0
    6022:	0a 94       	dec	r0
    6024:	16 16       	cp	r1, r22
    6026:	17 06       	cpc	r1, r23
    6028:	18 06       	cpc	r1, r24
    602a:	09 06       	cpc	r0, r25
    602c:	08 95       	ret

0000602e <__fp_pscB>:
    602e:	00 24       	eor	r0, r0
    6030:	0a 94       	dec	r0
    6032:	12 16       	cp	r1, r18
    6034:	13 06       	cpc	r1, r19
    6036:	14 06       	cpc	r1, r20
    6038:	05 06       	cpc	r0, r21
    603a:	08 95       	ret

0000603c <__fp_round>:
    603c:	09 2e       	mov	r0, r25
    603e:	03 94       	inc	r0
    6040:	00 0c       	add	r0, r0
    6042:	11 f4       	brne	.+4      	; 0x6048 <__fp_round+0xc>
    6044:	88 23       	and	r24, r24
    6046:	52 f0       	brmi	.+20     	; 0x605c <__fp_round+0x20>
    6048:	bb 0f       	add	r27, r27
    604a:	40 f4       	brcc	.+16     	; 0x605c <__fp_round+0x20>
    604c:	bf 2b       	or	r27, r31
    604e:	11 f4       	brne	.+4      	; 0x6054 <__fp_round+0x18>
    6050:	60 ff       	sbrs	r22, 0
    6052:	04 c0       	rjmp	.+8      	; 0x605c <__fp_round+0x20>
    6054:	6f 5f       	subi	r22, 0xFF	; 255
    6056:	7f 4f       	sbci	r23, 0xFF	; 255
    6058:	8f 4f       	sbci	r24, 0xFF	; 255
    605a:	9f 4f       	sbci	r25, 0xFF	; 255
    605c:	08 95       	ret

0000605e <__fp_split3>:
    605e:	57 fd       	sbrc	r21, 7
    6060:	90 58       	subi	r25, 0x80	; 128
    6062:	44 0f       	add	r20, r20
    6064:	55 1f       	adc	r21, r21
    6066:	59 f0       	breq	.+22     	; 0x607e <__fp_splitA+0x10>
    6068:	5f 3f       	cpi	r21, 0xFF	; 255
    606a:	71 f0       	breq	.+28     	; 0x6088 <__fp_splitA+0x1a>
    606c:	47 95       	ror	r20

0000606e <__fp_splitA>:
    606e:	88 0f       	add	r24, r24
    6070:	97 fb       	bst	r25, 7
    6072:	99 1f       	adc	r25, r25
    6074:	61 f0       	breq	.+24     	; 0x608e <__fp_splitA+0x20>
    6076:	9f 3f       	cpi	r25, 0xFF	; 255
    6078:	79 f0       	breq	.+30     	; 0x6098 <__fp_splitA+0x2a>
    607a:	87 95       	ror	r24
    607c:	08 95       	ret
    607e:	12 16       	cp	r1, r18
    6080:	13 06       	cpc	r1, r19
    6082:	14 06       	cpc	r1, r20
    6084:	55 1f       	adc	r21, r21
    6086:	f2 cf       	rjmp	.-28     	; 0x606c <__fp_split3+0xe>
    6088:	46 95       	lsr	r20
    608a:	f1 df       	rcall	.-30     	; 0x606e <__fp_splitA>
    608c:	08 c0       	rjmp	.+16     	; 0x609e <__fp_splitA+0x30>
    608e:	16 16       	cp	r1, r22
    6090:	17 06       	cpc	r1, r23
    6092:	18 06       	cpc	r1, r24
    6094:	99 1f       	adc	r25, r25
    6096:	f1 cf       	rjmp	.-30     	; 0x607a <__fp_splitA+0xc>
    6098:	86 95       	lsr	r24
    609a:	71 05       	cpc	r23, r1
    609c:	61 05       	cpc	r22, r1
    609e:	08 94       	sec
    60a0:	08 95       	ret

000060a2 <__fp_zero>:
    60a2:	e8 94       	clt

000060a4 <__fp_szero>:
    60a4:	bb 27       	eor	r27, r27
    60a6:	66 27       	eor	r22, r22
    60a8:	77 27       	eor	r23, r23
    60aa:	cb 01       	movw	r24, r22
    60ac:	97 f9       	bld	r25, 7
    60ae:	08 95       	ret

000060b0 <__mulsf3>:
    60b0:	0b d0       	rcall	.+22     	; 0x60c8 <__mulsf3x>
    60b2:	c4 cf       	rjmp	.-120    	; 0x603c <__fp_round>
    60b4:	b5 df       	rcall	.-150    	; 0x6020 <__fp_pscA>
    60b6:	28 f0       	brcs	.+10     	; 0x60c2 <__mulsf3+0x12>
    60b8:	ba df       	rcall	.-140    	; 0x602e <__fp_pscB>
    60ba:	18 f0       	brcs	.+6      	; 0x60c2 <__mulsf3+0x12>
    60bc:	95 23       	and	r25, r21
    60be:	09 f0       	breq	.+2      	; 0x60c2 <__mulsf3+0x12>
    60c0:	a6 cf       	rjmp	.-180    	; 0x600e <__fp_inf>
    60c2:	ab cf       	rjmp	.-170    	; 0x601a <__fp_nan>
    60c4:	11 24       	eor	r1, r1
    60c6:	ee cf       	rjmp	.-36     	; 0x60a4 <__fp_szero>

000060c8 <__mulsf3x>:
    60c8:	ca df       	rcall	.-108    	; 0x605e <__fp_split3>
    60ca:	a0 f3       	brcs	.-24     	; 0x60b4 <__mulsf3+0x4>

000060cc <__mulsf3_pse>:
    60cc:	95 9f       	mul	r25, r21
    60ce:	d1 f3       	breq	.-12     	; 0x60c4 <__mulsf3+0x14>
    60d0:	95 0f       	add	r25, r21
    60d2:	50 e0       	ldi	r21, 0x00	; 0
    60d4:	55 1f       	adc	r21, r21
    60d6:	62 9f       	mul	r22, r18
    60d8:	f0 01       	movw	r30, r0
    60da:	72 9f       	mul	r23, r18
    60dc:	bb 27       	eor	r27, r27
    60de:	f0 0d       	add	r31, r0
    60e0:	b1 1d       	adc	r27, r1
    60e2:	63 9f       	mul	r22, r19
    60e4:	aa 27       	eor	r26, r26
    60e6:	f0 0d       	add	r31, r0
    60e8:	b1 1d       	adc	r27, r1
    60ea:	aa 1f       	adc	r26, r26
    60ec:	64 9f       	mul	r22, r20
    60ee:	66 27       	eor	r22, r22
    60f0:	b0 0d       	add	r27, r0
    60f2:	a1 1d       	adc	r26, r1
    60f4:	66 1f       	adc	r22, r22
    60f6:	82 9f       	mul	r24, r18
    60f8:	22 27       	eor	r18, r18
    60fa:	b0 0d       	add	r27, r0
    60fc:	a1 1d       	adc	r26, r1
    60fe:	62 1f       	adc	r22, r18
    6100:	73 9f       	mul	r23, r19
    6102:	b0 0d       	add	r27, r0
    6104:	a1 1d       	adc	r26, r1
    6106:	62 1f       	adc	r22, r18
    6108:	83 9f       	mul	r24, r19
    610a:	a0 0d       	add	r26, r0
    610c:	61 1d       	adc	r22, r1
    610e:	22 1f       	adc	r18, r18
    6110:	74 9f       	mul	r23, r20
    6112:	33 27       	eor	r19, r19
    6114:	a0 0d       	add	r26, r0
    6116:	61 1d       	adc	r22, r1
    6118:	23 1f       	adc	r18, r19
    611a:	84 9f       	mul	r24, r20
    611c:	60 0d       	add	r22, r0
    611e:	21 1d       	adc	r18, r1
    6120:	82 2f       	mov	r24, r18
    6122:	76 2f       	mov	r23, r22
    6124:	6a 2f       	mov	r22, r26
    6126:	11 24       	eor	r1, r1
    6128:	9f 57       	subi	r25, 0x7F	; 127
    612a:	50 40       	sbci	r21, 0x00	; 0
    612c:	8a f0       	brmi	.+34     	; 0x6150 <__mulsf3_pse+0x84>
    612e:	e1 f0       	breq	.+56     	; 0x6168 <__mulsf3_pse+0x9c>
    6130:	88 23       	and	r24, r24
    6132:	4a f0       	brmi	.+18     	; 0x6146 <__mulsf3_pse+0x7a>
    6134:	ee 0f       	add	r30, r30
    6136:	ff 1f       	adc	r31, r31
    6138:	bb 1f       	adc	r27, r27
    613a:	66 1f       	adc	r22, r22
    613c:	77 1f       	adc	r23, r23
    613e:	88 1f       	adc	r24, r24
    6140:	91 50       	subi	r25, 0x01	; 1
    6142:	50 40       	sbci	r21, 0x00	; 0
    6144:	a9 f7       	brne	.-22     	; 0x6130 <__mulsf3_pse+0x64>
    6146:	9e 3f       	cpi	r25, 0xFE	; 254
    6148:	51 05       	cpc	r21, r1
    614a:	70 f0       	brcs	.+28     	; 0x6168 <__mulsf3_pse+0x9c>
    614c:	60 cf       	rjmp	.-320    	; 0x600e <__fp_inf>
    614e:	aa cf       	rjmp	.-172    	; 0x60a4 <__fp_szero>
    6150:	5f 3f       	cpi	r21, 0xFF	; 255
    6152:	ec f3       	brlt	.-6      	; 0x614e <__mulsf3_pse+0x82>
    6154:	98 3e       	cpi	r25, 0xE8	; 232
    6156:	dc f3       	brlt	.-10     	; 0x614e <__mulsf3_pse+0x82>
    6158:	86 95       	lsr	r24
    615a:	77 95       	ror	r23
    615c:	67 95       	ror	r22
    615e:	b7 95       	ror	r27
    6160:	f7 95       	ror	r31
    6162:	e7 95       	ror	r30
    6164:	9f 5f       	subi	r25, 0xFF	; 255
    6166:	c1 f7       	brne	.-16     	; 0x6158 <__mulsf3_pse+0x8c>
    6168:	fe 2b       	or	r31, r30
    616a:	88 0f       	add	r24, r24
    616c:	91 1d       	adc	r25, r1
    616e:	96 95       	lsr	r25
    6170:	87 95       	ror	r24
    6172:	97 f9       	bld	r25, 7
    6174:	08 95       	ret

00006176 <__divmodhi4>:
    6176:	97 fb       	bst	r25, 7
    6178:	07 2e       	mov	r0, r23
    617a:	16 f4       	brtc	.+4      	; 0x6180 <__divmodhi4+0xa>
    617c:	00 94       	com	r0
    617e:	06 d0       	rcall	.+12     	; 0x618c <__divmodhi4_neg1>
    6180:	77 fd       	sbrc	r23, 7
    6182:	08 d0       	rcall	.+16     	; 0x6194 <__divmodhi4_neg2>
    6184:	35 d0       	rcall	.+106    	; 0x61f0 <__udivmodhi4>
    6186:	07 fc       	sbrc	r0, 7
    6188:	05 d0       	rcall	.+10     	; 0x6194 <__divmodhi4_neg2>
    618a:	3e f4       	brtc	.+14     	; 0x619a <__divmodhi4_exit>

0000618c <__divmodhi4_neg1>:
    618c:	90 95       	com	r25
    618e:	81 95       	neg	r24
    6190:	9f 4f       	sbci	r25, 0xFF	; 255
    6192:	08 95       	ret

00006194 <__divmodhi4_neg2>:
    6194:	70 95       	com	r23
    6196:	61 95       	neg	r22
    6198:	7f 4f       	sbci	r23, 0xFF	; 255

0000619a <__divmodhi4_exit>:
    619a:	08 95       	ret

0000619c <__udivmodsi4>:
    619c:	a1 e2       	ldi	r26, 0x21	; 33
    619e:	1a 2e       	mov	r1, r26
    61a0:	aa 1b       	sub	r26, r26
    61a2:	bb 1b       	sub	r27, r27
    61a4:	fd 01       	movw	r30, r26
    61a6:	0d c0       	rjmp	.+26     	; 0x61c2 <__udivmodsi4_ep>

000061a8 <__udivmodsi4_loop>:
    61a8:	aa 1f       	adc	r26, r26
    61aa:	bb 1f       	adc	r27, r27
    61ac:	ee 1f       	adc	r30, r30
    61ae:	ff 1f       	adc	r31, r31
    61b0:	a2 17       	cp	r26, r18
    61b2:	b3 07       	cpc	r27, r19
    61b4:	e4 07       	cpc	r30, r20
    61b6:	f5 07       	cpc	r31, r21
    61b8:	20 f0       	brcs	.+8      	; 0x61c2 <__udivmodsi4_ep>
    61ba:	a2 1b       	sub	r26, r18
    61bc:	b3 0b       	sbc	r27, r19
    61be:	e4 0b       	sbc	r30, r20
    61c0:	f5 0b       	sbc	r31, r21

000061c2 <__udivmodsi4_ep>:
    61c2:	66 1f       	adc	r22, r22
    61c4:	77 1f       	adc	r23, r23
    61c6:	88 1f       	adc	r24, r24
    61c8:	99 1f       	adc	r25, r25
    61ca:	1a 94       	dec	r1
    61cc:	69 f7       	brne	.-38     	; 0x61a8 <__udivmodsi4_loop>
    61ce:	60 95       	com	r22
    61d0:	70 95       	com	r23
    61d2:	80 95       	com	r24
    61d4:	90 95       	com	r25
    61d6:	9b 01       	movw	r18, r22
    61d8:	ac 01       	movw	r20, r24
    61da:	bd 01       	movw	r22, r26
    61dc:	cf 01       	movw	r24, r30
    61de:	08 95       	ret

000061e0 <__tablejump2__>:
    61e0:	ee 0f       	add	r30, r30
    61e2:	ff 1f       	adc	r31, r31
    61e4:	88 1f       	adc	r24, r24
    61e6:	8b bf       	out	0x3b, r24	; 59
    61e8:	07 90       	elpm	r0, Z+
    61ea:	f6 91       	elpm	r31, Z
    61ec:	e0 2d       	mov	r30, r0
    61ee:	19 94       	eijmp

000061f0 <__udivmodhi4>:
    61f0:	aa 1b       	sub	r26, r26
    61f2:	bb 1b       	sub	r27, r27
    61f4:	51 e1       	ldi	r21, 0x11	; 17
    61f6:	07 c0       	rjmp	.+14     	; 0x6206 <__udivmodhi4_ep>

000061f8 <__udivmodhi4_loop>:
    61f8:	aa 1f       	adc	r26, r26
    61fa:	bb 1f       	adc	r27, r27
    61fc:	a6 17       	cp	r26, r22
    61fe:	b7 07       	cpc	r27, r23
    6200:	10 f0       	brcs	.+4      	; 0x6206 <__udivmodhi4_ep>
    6202:	a6 1b       	sub	r26, r22
    6204:	b7 0b       	sbc	r27, r23

00006206 <__udivmodhi4_ep>:
    6206:	88 1f       	adc	r24, r24
    6208:	99 1f       	adc	r25, r25
    620a:	5a 95       	dec	r21
    620c:	a9 f7       	brne	.-22     	; 0x61f8 <__udivmodhi4_loop>
    620e:	80 95       	com	r24
    6210:	90 95       	com	r25
    6212:	bc 01       	movw	r22, r24
    6214:	cd 01       	movw	r24, r26
    6216:	08 95       	ret

00006218 <malloc>:
    6218:	0f 93       	push	r16
    621a:	1f 93       	push	r17
    621c:	cf 93       	push	r28
    621e:	df 93       	push	r29
    6220:	82 30       	cpi	r24, 0x02	; 2
    6222:	91 05       	cpc	r25, r1
    6224:	10 f4       	brcc	.+4      	; 0x622a <malloc+0x12>
    6226:	82 e0       	ldi	r24, 0x02	; 2
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	e0 91 cf 18 	lds	r30, 0x18CF	; 0x8018cf <__flp>
    622e:	f0 91 d0 18 	lds	r31, 0x18D0	; 0x8018d0 <__flp+0x1>
    6232:	20 e0       	ldi	r18, 0x00	; 0
    6234:	30 e0       	ldi	r19, 0x00	; 0
    6236:	a0 e0       	ldi	r26, 0x00	; 0
    6238:	b0 e0       	ldi	r27, 0x00	; 0
    623a:	30 97       	sbiw	r30, 0x00	; 0
    623c:	19 f1       	breq	.+70     	; 0x6284 <malloc+0x6c>
    623e:	40 81       	ld	r20, Z
    6240:	51 81       	ldd	r21, Z+1	; 0x01
    6242:	02 81       	ldd	r16, Z+2	; 0x02
    6244:	13 81       	ldd	r17, Z+3	; 0x03
    6246:	48 17       	cp	r20, r24
    6248:	59 07       	cpc	r21, r25
    624a:	c8 f0       	brcs	.+50     	; 0x627e <malloc+0x66>
    624c:	84 17       	cp	r24, r20
    624e:	95 07       	cpc	r25, r21
    6250:	69 f4       	brne	.+26     	; 0x626c <malloc+0x54>
    6252:	10 97       	sbiw	r26, 0x00	; 0
    6254:	31 f0       	breq	.+12     	; 0x6262 <malloc+0x4a>
    6256:	12 96       	adiw	r26, 0x02	; 2
    6258:	0c 93       	st	X, r16
    625a:	12 97       	sbiw	r26, 0x02	; 2
    625c:	13 96       	adiw	r26, 0x03	; 3
    625e:	1c 93       	st	X, r17
    6260:	27 c0       	rjmp	.+78     	; 0x62b0 <malloc+0x98>
    6262:	00 93 cf 18 	sts	0x18CF, r16	; 0x8018cf <__flp>
    6266:	10 93 d0 18 	sts	0x18D0, r17	; 0x8018d0 <__flp+0x1>
    626a:	22 c0       	rjmp	.+68     	; 0x62b0 <malloc+0x98>
    626c:	21 15       	cp	r18, r1
    626e:	31 05       	cpc	r19, r1
    6270:	19 f0       	breq	.+6      	; 0x6278 <malloc+0x60>
    6272:	42 17       	cp	r20, r18
    6274:	53 07       	cpc	r21, r19
    6276:	18 f4       	brcc	.+6      	; 0x627e <malloc+0x66>
    6278:	9a 01       	movw	r18, r20
    627a:	bd 01       	movw	r22, r26
    627c:	ef 01       	movw	r28, r30
    627e:	df 01       	movw	r26, r30
    6280:	f8 01       	movw	r30, r16
    6282:	db cf       	rjmp	.-74     	; 0x623a <malloc+0x22>
    6284:	21 15       	cp	r18, r1
    6286:	31 05       	cpc	r19, r1
    6288:	f9 f0       	breq	.+62     	; 0x62c8 <malloc+0xb0>
    628a:	28 1b       	sub	r18, r24
    628c:	39 0b       	sbc	r19, r25
    628e:	24 30       	cpi	r18, 0x04	; 4
    6290:	31 05       	cpc	r19, r1
    6292:	80 f4       	brcc	.+32     	; 0x62b4 <malloc+0x9c>
    6294:	8a 81       	ldd	r24, Y+2	; 0x02
    6296:	9b 81       	ldd	r25, Y+3	; 0x03
    6298:	61 15       	cp	r22, r1
    629a:	71 05       	cpc	r23, r1
    629c:	21 f0       	breq	.+8      	; 0x62a6 <malloc+0x8e>
    629e:	fb 01       	movw	r30, r22
    62a0:	93 83       	std	Z+3, r25	; 0x03
    62a2:	82 83       	std	Z+2, r24	; 0x02
    62a4:	04 c0       	rjmp	.+8      	; 0x62ae <malloc+0x96>
    62a6:	90 93 d0 18 	sts	0x18D0, r25	; 0x8018d0 <__flp+0x1>
    62aa:	80 93 cf 18 	sts	0x18CF, r24	; 0x8018cf <__flp>
    62ae:	fe 01       	movw	r30, r28
    62b0:	32 96       	adiw	r30, 0x02	; 2
    62b2:	44 c0       	rjmp	.+136    	; 0x633c <malloc+0x124>
    62b4:	fe 01       	movw	r30, r28
    62b6:	e2 0f       	add	r30, r18
    62b8:	f3 1f       	adc	r31, r19
    62ba:	81 93       	st	Z+, r24
    62bc:	91 93       	st	Z+, r25
    62be:	22 50       	subi	r18, 0x02	; 2
    62c0:	31 09       	sbc	r19, r1
    62c2:	39 83       	std	Y+1, r19	; 0x01
    62c4:	28 83       	st	Y, r18
    62c6:	3a c0       	rjmp	.+116    	; 0x633c <malloc+0x124>
    62c8:	20 91 cd 18 	lds	r18, 0x18CD	; 0x8018cd <__brkval>
    62cc:	30 91 ce 18 	lds	r19, 0x18CE	; 0x8018ce <__brkval+0x1>
    62d0:	23 2b       	or	r18, r19
    62d2:	41 f4       	brne	.+16     	; 0x62e4 <malloc+0xcc>
    62d4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    62d8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    62dc:	30 93 ce 18 	sts	0x18CE, r19	; 0x8018ce <__brkval+0x1>
    62e0:	20 93 cd 18 	sts	0x18CD, r18	; 0x8018cd <__brkval>
    62e4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    62e8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    62ec:	21 15       	cp	r18, r1
    62ee:	31 05       	cpc	r19, r1
    62f0:	41 f4       	brne	.+16     	; 0x6302 <malloc+0xea>
    62f2:	2d b7       	in	r18, 0x3d	; 61
    62f4:	3e b7       	in	r19, 0x3e	; 62
    62f6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    62fa:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    62fe:	24 1b       	sub	r18, r20
    6300:	35 0b       	sbc	r19, r21
    6302:	e0 91 cd 18 	lds	r30, 0x18CD	; 0x8018cd <__brkval>
    6306:	f0 91 ce 18 	lds	r31, 0x18CE	; 0x8018ce <__brkval+0x1>
    630a:	e2 17       	cp	r30, r18
    630c:	f3 07       	cpc	r31, r19
    630e:	a0 f4       	brcc	.+40     	; 0x6338 <malloc+0x120>
    6310:	2e 1b       	sub	r18, r30
    6312:	3f 0b       	sbc	r19, r31
    6314:	28 17       	cp	r18, r24
    6316:	39 07       	cpc	r19, r25
    6318:	78 f0       	brcs	.+30     	; 0x6338 <malloc+0x120>
    631a:	ac 01       	movw	r20, r24
    631c:	4e 5f       	subi	r20, 0xFE	; 254
    631e:	5f 4f       	sbci	r21, 0xFF	; 255
    6320:	24 17       	cp	r18, r20
    6322:	35 07       	cpc	r19, r21
    6324:	48 f0       	brcs	.+18     	; 0x6338 <malloc+0x120>
    6326:	4e 0f       	add	r20, r30
    6328:	5f 1f       	adc	r21, r31
    632a:	50 93 ce 18 	sts	0x18CE, r21	; 0x8018ce <__brkval+0x1>
    632e:	40 93 cd 18 	sts	0x18CD, r20	; 0x8018cd <__brkval>
    6332:	81 93       	st	Z+, r24
    6334:	91 93       	st	Z+, r25
    6336:	02 c0       	rjmp	.+4      	; 0x633c <malloc+0x124>
    6338:	e0 e0       	ldi	r30, 0x00	; 0
    633a:	f0 e0       	ldi	r31, 0x00	; 0
    633c:	cf 01       	movw	r24, r30
    633e:	df 91       	pop	r29
    6340:	cf 91       	pop	r28
    6342:	1f 91       	pop	r17
    6344:	0f 91       	pop	r16
    6346:	08 95       	ret

00006348 <free>:
    6348:	cf 93       	push	r28
    634a:	df 93       	push	r29
    634c:	00 97       	sbiw	r24, 0x00	; 0
    634e:	09 f4       	brne	.+2      	; 0x6352 <free+0xa>
    6350:	81 c0       	rjmp	.+258    	; 0x6454 <free+0x10c>
    6352:	fc 01       	movw	r30, r24
    6354:	32 97       	sbiw	r30, 0x02	; 2
    6356:	13 82       	std	Z+3, r1	; 0x03
    6358:	12 82       	std	Z+2, r1	; 0x02
    635a:	a0 91 cf 18 	lds	r26, 0x18CF	; 0x8018cf <__flp>
    635e:	b0 91 d0 18 	lds	r27, 0x18D0	; 0x8018d0 <__flp+0x1>
    6362:	10 97       	sbiw	r26, 0x00	; 0
    6364:	81 f4       	brne	.+32     	; 0x6386 <free+0x3e>
    6366:	20 81       	ld	r18, Z
    6368:	31 81       	ldd	r19, Z+1	; 0x01
    636a:	82 0f       	add	r24, r18
    636c:	93 1f       	adc	r25, r19
    636e:	20 91 cd 18 	lds	r18, 0x18CD	; 0x8018cd <__brkval>
    6372:	30 91 ce 18 	lds	r19, 0x18CE	; 0x8018ce <__brkval+0x1>
    6376:	28 17       	cp	r18, r24
    6378:	39 07       	cpc	r19, r25
    637a:	51 f5       	brne	.+84     	; 0x63d0 <free+0x88>
    637c:	f0 93 ce 18 	sts	0x18CE, r31	; 0x8018ce <__brkval+0x1>
    6380:	e0 93 cd 18 	sts	0x18CD, r30	; 0x8018cd <__brkval>
    6384:	67 c0       	rjmp	.+206    	; 0x6454 <free+0x10c>
    6386:	ed 01       	movw	r28, r26
    6388:	20 e0       	ldi	r18, 0x00	; 0
    638a:	30 e0       	ldi	r19, 0x00	; 0
    638c:	ce 17       	cp	r28, r30
    638e:	df 07       	cpc	r29, r31
    6390:	40 f4       	brcc	.+16     	; 0x63a2 <free+0x5a>
    6392:	4a 81       	ldd	r20, Y+2	; 0x02
    6394:	5b 81       	ldd	r21, Y+3	; 0x03
    6396:	9e 01       	movw	r18, r28
    6398:	41 15       	cp	r20, r1
    639a:	51 05       	cpc	r21, r1
    639c:	f1 f0       	breq	.+60     	; 0x63da <free+0x92>
    639e:	ea 01       	movw	r28, r20
    63a0:	f5 cf       	rjmp	.-22     	; 0x638c <free+0x44>
    63a2:	d3 83       	std	Z+3, r29	; 0x03
    63a4:	c2 83       	std	Z+2, r28	; 0x02
    63a6:	40 81       	ld	r20, Z
    63a8:	51 81       	ldd	r21, Z+1	; 0x01
    63aa:	84 0f       	add	r24, r20
    63ac:	95 1f       	adc	r25, r21
    63ae:	c8 17       	cp	r28, r24
    63b0:	d9 07       	cpc	r29, r25
    63b2:	59 f4       	brne	.+22     	; 0x63ca <free+0x82>
    63b4:	88 81       	ld	r24, Y
    63b6:	99 81       	ldd	r25, Y+1	; 0x01
    63b8:	84 0f       	add	r24, r20
    63ba:	95 1f       	adc	r25, r21
    63bc:	02 96       	adiw	r24, 0x02	; 2
    63be:	91 83       	std	Z+1, r25	; 0x01
    63c0:	80 83       	st	Z, r24
    63c2:	8a 81       	ldd	r24, Y+2	; 0x02
    63c4:	9b 81       	ldd	r25, Y+3	; 0x03
    63c6:	93 83       	std	Z+3, r25	; 0x03
    63c8:	82 83       	std	Z+2, r24	; 0x02
    63ca:	21 15       	cp	r18, r1
    63cc:	31 05       	cpc	r19, r1
    63ce:	29 f4       	brne	.+10     	; 0x63da <free+0x92>
    63d0:	f0 93 d0 18 	sts	0x18D0, r31	; 0x8018d0 <__flp+0x1>
    63d4:	e0 93 cf 18 	sts	0x18CF, r30	; 0x8018cf <__flp>
    63d8:	3d c0       	rjmp	.+122    	; 0x6454 <free+0x10c>
    63da:	e9 01       	movw	r28, r18
    63dc:	fb 83       	std	Y+3, r31	; 0x03
    63de:	ea 83       	std	Y+2, r30	; 0x02
    63e0:	49 91       	ld	r20, Y+
    63e2:	59 91       	ld	r21, Y+
    63e4:	c4 0f       	add	r28, r20
    63e6:	d5 1f       	adc	r29, r21
    63e8:	ec 17       	cp	r30, r28
    63ea:	fd 07       	cpc	r31, r29
    63ec:	61 f4       	brne	.+24     	; 0x6406 <free+0xbe>
    63ee:	80 81       	ld	r24, Z
    63f0:	91 81       	ldd	r25, Z+1	; 0x01
    63f2:	84 0f       	add	r24, r20
    63f4:	95 1f       	adc	r25, r21
    63f6:	02 96       	adiw	r24, 0x02	; 2
    63f8:	e9 01       	movw	r28, r18
    63fa:	99 83       	std	Y+1, r25	; 0x01
    63fc:	88 83       	st	Y, r24
    63fe:	82 81       	ldd	r24, Z+2	; 0x02
    6400:	93 81       	ldd	r25, Z+3	; 0x03
    6402:	9b 83       	std	Y+3, r25	; 0x03
    6404:	8a 83       	std	Y+2, r24	; 0x02
    6406:	e0 e0       	ldi	r30, 0x00	; 0
    6408:	f0 e0       	ldi	r31, 0x00	; 0
    640a:	12 96       	adiw	r26, 0x02	; 2
    640c:	8d 91       	ld	r24, X+
    640e:	9c 91       	ld	r25, X
    6410:	13 97       	sbiw	r26, 0x03	; 3
    6412:	00 97       	sbiw	r24, 0x00	; 0
    6414:	19 f0       	breq	.+6      	; 0x641c <free+0xd4>
    6416:	fd 01       	movw	r30, r26
    6418:	dc 01       	movw	r26, r24
    641a:	f7 cf       	rjmp	.-18     	; 0x640a <free+0xc2>
    641c:	8d 91       	ld	r24, X+
    641e:	9c 91       	ld	r25, X
    6420:	11 97       	sbiw	r26, 0x01	; 1
    6422:	9d 01       	movw	r18, r26
    6424:	2e 5f       	subi	r18, 0xFE	; 254
    6426:	3f 4f       	sbci	r19, 0xFF	; 255
    6428:	82 0f       	add	r24, r18
    642a:	93 1f       	adc	r25, r19
    642c:	20 91 cd 18 	lds	r18, 0x18CD	; 0x8018cd <__brkval>
    6430:	30 91 ce 18 	lds	r19, 0x18CE	; 0x8018ce <__brkval+0x1>
    6434:	28 17       	cp	r18, r24
    6436:	39 07       	cpc	r19, r25
    6438:	69 f4       	brne	.+26     	; 0x6454 <free+0x10c>
    643a:	30 97       	sbiw	r30, 0x00	; 0
    643c:	29 f4       	brne	.+10     	; 0x6448 <free+0x100>
    643e:	10 92 d0 18 	sts	0x18D0, r1	; 0x8018d0 <__flp+0x1>
    6442:	10 92 cf 18 	sts	0x18CF, r1	; 0x8018cf <__flp>
    6446:	02 c0       	rjmp	.+4      	; 0x644c <free+0x104>
    6448:	13 82       	std	Z+3, r1	; 0x03
    644a:	12 82       	std	Z+2, r1	; 0x02
    644c:	b0 93 ce 18 	sts	0x18CE, r27	; 0x8018ce <__brkval+0x1>
    6450:	a0 93 cd 18 	sts	0x18CD, r26	; 0x8018cd <__brkval>
    6454:	df 91       	pop	r29
    6456:	cf 91       	pop	r28
    6458:	08 95       	ret

0000645a <abort>:
    645a:	81 e0       	ldi	r24, 0x01	; 1
    645c:	90 e0       	ldi	r25, 0x00	; 0
    645e:	f8 94       	cli
    6460:	5a c2       	rjmp	.+1204   	; 0x6916 <_exit>

00006462 <__ftoa_engine>:
    6462:	28 30       	cpi	r18, 0x08	; 8
    6464:	08 f0       	brcs	.+2      	; 0x6468 <__ftoa_engine+0x6>
    6466:	27 e0       	ldi	r18, 0x07	; 7
    6468:	33 27       	eor	r19, r19
    646a:	da 01       	movw	r26, r20
    646c:	99 0f       	add	r25, r25
    646e:	31 1d       	adc	r19, r1
    6470:	87 fd       	sbrc	r24, 7
    6472:	91 60       	ori	r25, 0x01	; 1
    6474:	00 96       	adiw	r24, 0x00	; 0
    6476:	61 05       	cpc	r22, r1
    6478:	71 05       	cpc	r23, r1
    647a:	39 f4       	brne	.+14     	; 0x648a <__ftoa_engine+0x28>
    647c:	32 60       	ori	r19, 0x02	; 2
    647e:	2e 5f       	subi	r18, 0xFE	; 254
    6480:	3d 93       	st	X+, r19
    6482:	30 e3       	ldi	r19, 0x30	; 48
    6484:	2a 95       	dec	r18
    6486:	e1 f7       	brne	.-8      	; 0x6480 <__ftoa_engine+0x1e>
    6488:	08 95       	ret
    648a:	9f 3f       	cpi	r25, 0xFF	; 255
    648c:	30 f0       	brcs	.+12     	; 0x649a <__ftoa_engine+0x38>
    648e:	80 38       	cpi	r24, 0x80	; 128
    6490:	71 05       	cpc	r23, r1
    6492:	61 05       	cpc	r22, r1
    6494:	09 f0       	breq	.+2      	; 0x6498 <__ftoa_engine+0x36>
    6496:	3c 5f       	subi	r19, 0xFC	; 252
    6498:	3c 5f       	subi	r19, 0xFC	; 252
    649a:	3d 93       	st	X+, r19
    649c:	91 30       	cpi	r25, 0x01	; 1
    649e:	08 f0       	brcs	.+2      	; 0x64a2 <__ftoa_engine+0x40>
    64a0:	80 68       	ori	r24, 0x80	; 128
    64a2:	91 1d       	adc	r25, r1
    64a4:	df 93       	push	r29
    64a6:	cf 93       	push	r28
    64a8:	1f 93       	push	r17
    64aa:	0f 93       	push	r16
    64ac:	ff 92       	push	r15
    64ae:	ef 92       	push	r14
    64b0:	19 2f       	mov	r17, r25
    64b2:	98 7f       	andi	r25, 0xF8	; 248
    64b4:	96 95       	lsr	r25
    64b6:	e9 2f       	mov	r30, r25
    64b8:	96 95       	lsr	r25
    64ba:	96 95       	lsr	r25
    64bc:	e9 0f       	add	r30, r25
    64be:	ff 27       	eor	r31, r31
    64c0:	e4 50       	subi	r30, 0x04	; 4
    64c2:	fe 4f       	sbci	r31, 0xFE	; 254
    64c4:	99 27       	eor	r25, r25
    64c6:	33 27       	eor	r19, r19
    64c8:	ee 24       	eor	r14, r14
    64ca:	ff 24       	eor	r15, r15
    64cc:	a7 01       	movw	r20, r14
    64ce:	e7 01       	movw	r28, r14
    64d0:	05 90       	lpm	r0, Z+
    64d2:	08 94       	sec
    64d4:	07 94       	ror	r0
    64d6:	28 f4       	brcc	.+10     	; 0x64e2 <__ftoa_engine+0x80>
    64d8:	36 0f       	add	r19, r22
    64da:	e7 1e       	adc	r14, r23
    64dc:	f8 1e       	adc	r15, r24
    64de:	49 1f       	adc	r20, r25
    64e0:	51 1d       	adc	r21, r1
    64e2:	66 0f       	add	r22, r22
    64e4:	77 1f       	adc	r23, r23
    64e6:	88 1f       	adc	r24, r24
    64e8:	99 1f       	adc	r25, r25
    64ea:	06 94       	lsr	r0
    64ec:	a1 f7       	brne	.-24     	; 0x64d6 <__ftoa_engine+0x74>
    64ee:	05 90       	lpm	r0, Z+
    64f0:	07 94       	ror	r0
    64f2:	28 f4       	brcc	.+10     	; 0x64fe <__ftoa_engine+0x9c>
    64f4:	e7 0e       	add	r14, r23
    64f6:	f8 1e       	adc	r15, r24
    64f8:	49 1f       	adc	r20, r25
    64fa:	56 1f       	adc	r21, r22
    64fc:	c1 1d       	adc	r28, r1
    64fe:	77 0f       	add	r23, r23
    6500:	88 1f       	adc	r24, r24
    6502:	99 1f       	adc	r25, r25
    6504:	66 1f       	adc	r22, r22
    6506:	06 94       	lsr	r0
    6508:	a1 f7       	brne	.-24     	; 0x64f2 <__ftoa_engine+0x90>
    650a:	05 90       	lpm	r0, Z+
    650c:	07 94       	ror	r0
    650e:	28 f4       	brcc	.+10     	; 0x651a <__ftoa_engine+0xb8>
    6510:	f8 0e       	add	r15, r24
    6512:	49 1f       	adc	r20, r25
    6514:	56 1f       	adc	r21, r22
    6516:	c7 1f       	adc	r28, r23
    6518:	d1 1d       	adc	r29, r1
    651a:	88 0f       	add	r24, r24
    651c:	99 1f       	adc	r25, r25
    651e:	66 1f       	adc	r22, r22
    6520:	77 1f       	adc	r23, r23
    6522:	06 94       	lsr	r0
    6524:	a1 f7       	brne	.-24     	; 0x650e <__ftoa_engine+0xac>
    6526:	05 90       	lpm	r0, Z+
    6528:	07 94       	ror	r0
    652a:	20 f4       	brcc	.+8      	; 0x6534 <__ftoa_engine+0xd2>
    652c:	49 0f       	add	r20, r25
    652e:	56 1f       	adc	r21, r22
    6530:	c7 1f       	adc	r28, r23
    6532:	d8 1f       	adc	r29, r24
    6534:	99 0f       	add	r25, r25
    6536:	66 1f       	adc	r22, r22
    6538:	77 1f       	adc	r23, r23
    653a:	88 1f       	adc	r24, r24
    653c:	06 94       	lsr	r0
    653e:	a9 f7       	brne	.-22     	; 0x652a <__ftoa_engine+0xc8>
    6540:	84 91       	lpm	r24, Z
    6542:	10 95       	com	r17
    6544:	17 70       	andi	r17, 0x07	; 7
    6546:	41 f0       	breq	.+16     	; 0x6558 <__ftoa_engine+0xf6>
    6548:	d6 95       	lsr	r29
    654a:	c7 95       	ror	r28
    654c:	57 95       	ror	r21
    654e:	47 95       	ror	r20
    6550:	f7 94       	ror	r15
    6552:	e7 94       	ror	r14
    6554:	1a 95       	dec	r17
    6556:	c1 f7       	brne	.-16     	; 0x6548 <__ftoa_engine+0xe6>
    6558:	e2 ea       	ldi	r30, 0xA2	; 162
    655a:	f1 e0       	ldi	r31, 0x01	; 1
    655c:	68 94       	set
    655e:	15 90       	lpm	r1, Z+
    6560:	15 91       	lpm	r17, Z+
    6562:	35 91       	lpm	r19, Z+
    6564:	65 91       	lpm	r22, Z+
    6566:	95 91       	lpm	r25, Z+
    6568:	05 90       	lpm	r0, Z+
    656a:	7f e2       	ldi	r23, 0x2F	; 47
    656c:	73 95       	inc	r23
    656e:	e1 18       	sub	r14, r1
    6570:	f1 0a       	sbc	r15, r17
    6572:	43 0b       	sbc	r20, r19
    6574:	56 0b       	sbc	r21, r22
    6576:	c9 0b       	sbc	r28, r25
    6578:	d0 09       	sbc	r29, r0
    657a:	c0 f7       	brcc	.-16     	; 0x656c <__ftoa_engine+0x10a>
    657c:	e1 0c       	add	r14, r1
    657e:	f1 1e       	adc	r15, r17
    6580:	43 1f       	adc	r20, r19
    6582:	56 1f       	adc	r21, r22
    6584:	c9 1f       	adc	r28, r25
    6586:	d0 1d       	adc	r29, r0
    6588:	7e f4       	brtc	.+30     	; 0x65a8 <__ftoa_engine+0x146>
    658a:	70 33       	cpi	r23, 0x30	; 48
    658c:	11 f4       	brne	.+4      	; 0x6592 <__ftoa_engine+0x130>
    658e:	8a 95       	dec	r24
    6590:	e6 cf       	rjmp	.-52     	; 0x655e <__ftoa_engine+0xfc>
    6592:	e8 94       	clt
    6594:	01 50       	subi	r16, 0x01	; 1
    6596:	30 f0       	brcs	.+12     	; 0x65a4 <__ftoa_engine+0x142>
    6598:	08 0f       	add	r16, r24
    659a:	0a f4       	brpl	.+2      	; 0x659e <__ftoa_engine+0x13c>
    659c:	00 27       	eor	r16, r16
    659e:	02 17       	cp	r16, r18
    65a0:	08 f4       	brcc	.+2      	; 0x65a4 <__ftoa_engine+0x142>
    65a2:	20 2f       	mov	r18, r16
    65a4:	23 95       	inc	r18
    65a6:	02 2f       	mov	r16, r18
    65a8:	7a 33       	cpi	r23, 0x3A	; 58
    65aa:	28 f0       	brcs	.+10     	; 0x65b6 <__ftoa_engine+0x154>
    65ac:	79 e3       	ldi	r23, 0x39	; 57
    65ae:	7d 93       	st	X+, r23
    65b0:	2a 95       	dec	r18
    65b2:	e9 f7       	brne	.-6      	; 0x65ae <__ftoa_engine+0x14c>
    65b4:	10 c0       	rjmp	.+32     	; 0x65d6 <__ftoa_engine+0x174>
    65b6:	7d 93       	st	X+, r23
    65b8:	2a 95       	dec	r18
    65ba:	89 f6       	brne	.-94     	; 0x655e <__ftoa_engine+0xfc>
    65bc:	06 94       	lsr	r0
    65be:	97 95       	ror	r25
    65c0:	67 95       	ror	r22
    65c2:	37 95       	ror	r19
    65c4:	17 95       	ror	r17
    65c6:	17 94       	ror	r1
    65c8:	e1 18       	sub	r14, r1
    65ca:	f1 0a       	sbc	r15, r17
    65cc:	43 0b       	sbc	r20, r19
    65ce:	56 0b       	sbc	r21, r22
    65d0:	c9 0b       	sbc	r28, r25
    65d2:	d0 09       	sbc	r29, r0
    65d4:	98 f0       	brcs	.+38     	; 0x65fc <__ftoa_engine+0x19a>
    65d6:	23 95       	inc	r18
    65d8:	7e 91       	ld	r23, -X
    65da:	73 95       	inc	r23
    65dc:	7a 33       	cpi	r23, 0x3A	; 58
    65de:	08 f0       	brcs	.+2      	; 0x65e2 <__ftoa_engine+0x180>
    65e0:	70 e3       	ldi	r23, 0x30	; 48
    65e2:	7c 93       	st	X, r23
    65e4:	20 13       	cpse	r18, r16
    65e6:	b8 f7       	brcc	.-18     	; 0x65d6 <__ftoa_engine+0x174>
    65e8:	7e 91       	ld	r23, -X
    65ea:	70 61       	ori	r23, 0x10	; 16
    65ec:	7d 93       	st	X+, r23
    65ee:	30 f0       	brcs	.+12     	; 0x65fc <__ftoa_engine+0x19a>
    65f0:	83 95       	inc	r24
    65f2:	71 e3       	ldi	r23, 0x31	; 49
    65f4:	7d 93       	st	X+, r23
    65f6:	70 e3       	ldi	r23, 0x30	; 48
    65f8:	2a 95       	dec	r18
    65fa:	e1 f7       	brne	.-8      	; 0x65f4 <__ftoa_engine+0x192>
    65fc:	11 24       	eor	r1, r1
    65fe:	ef 90       	pop	r14
    6600:	ff 90       	pop	r15
    6602:	0f 91       	pop	r16
    6604:	1f 91       	pop	r17
    6606:	cf 91       	pop	r28
    6608:	df 91       	pop	r29
    660a:	99 27       	eor	r25, r25
    660c:	87 fd       	sbrc	r24, 7
    660e:	90 95       	com	r25
    6610:	08 95       	ret

00006612 <strnlen_P>:
    6612:	fc 01       	movw	r30, r24
    6614:	05 90       	lpm	r0, Z+
    6616:	61 50       	subi	r22, 0x01	; 1
    6618:	70 40       	sbci	r23, 0x00	; 0
    661a:	01 10       	cpse	r0, r1
    661c:	d8 f7       	brcc	.-10     	; 0x6614 <strnlen_P+0x2>
    661e:	80 95       	com	r24
    6620:	90 95       	com	r25
    6622:	8e 0f       	add	r24, r30
    6624:	9f 1f       	adc	r25, r31
    6626:	08 95       	ret

00006628 <memcpy>:
    6628:	fb 01       	movw	r30, r22
    662a:	dc 01       	movw	r26, r24
    662c:	02 c0       	rjmp	.+4      	; 0x6632 <memcpy+0xa>
    662e:	01 90       	ld	r0, Z+
    6630:	0d 92       	st	X+, r0
    6632:	41 50       	subi	r20, 0x01	; 1
    6634:	50 40       	sbci	r21, 0x00	; 0
    6636:	d8 f7       	brcc	.-10     	; 0x662e <memcpy+0x6>
    6638:	08 95       	ret

0000663a <memset>:
    663a:	dc 01       	movw	r26, r24
    663c:	01 c0       	rjmp	.+2      	; 0x6640 <memset+0x6>
    663e:	6d 93       	st	X+, r22
    6640:	41 50       	subi	r20, 0x01	; 1
    6642:	50 40       	sbci	r21, 0x00	; 0
    6644:	e0 f7       	brcc	.-8      	; 0x663e <memset+0x4>
    6646:	08 95       	ret

00006648 <strcasestr>:
    6648:	fb 01       	movw	r30, r22
    664a:	51 91       	ld	r21, Z+
    664c:	55 23       	and	r21, r21
    664e:	b1 f0       	breq	.+44     	; 0x667c <strcasestr+0x34>
    6650:	bf 01       	movw	r22, r30
    6652:	dc 01       	movw	r26, r24
    6654:	05 2e       	mov	r0, r21
    6656:	4d 91       	ld	r20, X+
    6658:	44 23       	and	r20, r20
    665a:	69 f0       	breq	.+26     	; 0x6676 <strcasestr+0x2e>
    665c:	10 d0       	rcall	.+32     	; 0x667e <strcasestr+0x36>
    665e:	d9 f7       	brne	.-10     	; 0x6656 <strcasestr+0xe>
    6660:	cd 01       	movw	r24, r26
    6662:	01 90       	ld	r0, Z+
    6664:	00 20       	and	r0, r0
    6666:	49 f0       	breq	.+18     	; 0x667a <strcasestr+0x32>
    6668:	4d 91       	ld	r20, X+
    666a:	41 11       	cpse	r20, r1
    666c:	08 d0       	rcall	.+16     	; 0x667e <strcasestr+0x36>
    666e:	c9 f3       	breq	.-14     	; 0x6662 <strcasestr+0x1a>
    6670:	fb 01       	movw	r30, r22
    6672:	41 11       	cpse	r20, r1
    6674:	ee cf       	rjmp	.-36     	; 0x6652 <strcasestr+0xa>
    6676:	81 e0       	ldi	r24, 0x01	; 1
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	01 97       	sbiw	r24, 0x01	; 1
    667c:	08 95       	ret
    667e:	40 25       	eor	r20, r0
    6680:	39 f0       	breq	.+14     	; 0x6690 <strcasestr+0x48>
    6682:	40 32       	cpi	r20, 0x20	; 32
    6684:	29 f4       	brne	.+10     	; 0x6690 <strcasestr+0x48>
    6686:	40 29       	or	r20, r0
    6688:	4b 57       	subi	r20, 0x7B	; 123
    668a:	46 5e       	subi	r20, 0xE6	; 230
    668c:	08 f0       	brcs	.+2      	; 0x6690 <strcasestr+0x48>
    668e:	18 94       	sez
    6690:	08 95       	ret

00006692 <strcat>:
    6692:	fb 01       	movw	r30, r22
    6694:	dc 01       	movw	r26, r24
    6696:	0d 90       	ld	r0, X+
    6698:	00 20       	and	r0, r0
    669a:	e9 f7       	brne	.-6      	; 0x6696 <strcat+0x4>
    669c:	11 97       	sbiw	r26, 0x01	; 1
    669e:	01 90       	ld	r0, Z+
    66a0:	0d 92       	st	X+, r0
    66a2:	00 20       	and	r0, r0
    66a4:	e1 f7       	brne	.-8      	; 0x669e <strcat+0xc>
    66a6:	08 95       	ret

000066a8 <strcpy>:
    66a8:	fb 01       	movw	r30, r22
    66aa:	dc 01       	movw	r26, r24
    66ac:	01 90       	ld	r0, Z+
    66ae:	0d 92       	st	X+, r0
    66b0:	00 20       	and	r0, r0
    66b2:	e1 f7       	brne	.-8      	; 0x66ac <strcpy+0x4>
    66b4:	08 95       	ret

000066b6 <strncasecmp>:
    66b6:	fb 01       	movw	r30, r22
    66b8:	dc 01       	movw	r26, r24
    66ba:	41 50       	subi	r20, 0x01	; 1
    66bc:	50 40       	sbci	r21, 0x00	; 0
    66be:	88 f0       	brcs	.+34     	; 0x66e2 <strncasecmp+0x2c>
    66c0:	8d 91       	ld	r24, X+
    66c2:	81 34       	cpi	r24, 0x41	; 65
    66c4:	1c f0       	brlt	.+6      	; 0x66cc <strncasecmp+0x16>
    66c6:	8b 35       	cpi	r24, 0x5B	; 91
    66c8:	0c f4       	brge	.+2      	; 0x66cc <strncasecmp+0x16>
    66ca:	80 5e       	subi	r24, 0xE0	; 224
    66cc:	61 91       	ld	r22, Z+
    66ce:	61 34       	cpi	r22, 0x41	; 65
    66d0:	1c f0       	brlt	.+6      	; 0x66d8 <strncasecmp+0x22>
    66d2:	6b 35       	cpi	r22, 0x5B	; 91
    66d4:	0c f4       	brge	.+2      	; 0x66d8 <strncasecmp+0x22>
    66d6:	60 5e       	subi	r22, 0xE0	; 224
    66d8:	86 1b       	sub	r24, r22
    66da:	61 11       	cpse	r22, r1
    66dc:	71 f3       	breq	.-36     	; 0x66ba <strncasecmp+0x4>
    66de:	99 0b       	sbc	r25, r25
    66e0:	08 95       	ret
    66e2:	88 1b       	sub	r24, r24
    66e4:	fc cf       	rjmp	.-8      	; 0x66de <strncasecmp+0x28>

000066e6 <strnlen>:
    66e6:	fc 01       	movw	r30, r24
    66e8:	61 50       	subi	r22, 0x01	; 1
    66ea:	70 40       	sbci	r23, 0x00	; 0
    66ec:	01 90       	ld	r0, Z+
    66ee:	01 10       	cpse	r0, r1
    66f0:	d8 f7       	brcc	.-10     	; 0x66e8 <strnlen+0x2>
    66f2:	80 95       	com	r24
    66f4:	90 95       	com	r25
    66f6:	8e 0f       	add	r24, r30
    66f8:	9f 1f       	adc	r25, r31
    66fa:	08 95       	ret

000066fc <fputc>:
    66fc:	0f 93       	push	r16
    66fe:	1f 93       	push	r17
    6700:	cf 93       	push	r28
    6702:	df 93       	push	r29
    6704:	fb 01       	movw	r30, r22
    6706:	23 81       	ldd	r18, Z+3	; 0x03
    6708:	21 fd       	sbrc	r18, 1
    670a:	03 c0       	rjmp	.+6      	; 0x6712 <fputc+0x16>
    670c:	8f ef       	ldi	r24, 0xFF	; 255
    670e:	9f ef       	ldi	r25, 0xFF	; 255
    6710:	2c c0       	rjmp	.+88     	; 0x676a <fputc+0x6e>
    6712:	22 ff       	sbrs	r18, 2
    6714:	16 c0       	rjmp	.+44     	; 0x6742 <fputc+0x46>
    6716:	46 81       	ldd	r20, Z+6	; 0x06
    6718:	57 81       	ldd	r21, Z+7	; 0x07
    671a:	24 81       	ldd	r18, Z+4	; 0x04
    671c:	35 81       	ldd	r19, Z+5	; 0x05
    671e:	42 17       	cp	r20, r18
    6720:	53 07       	cpc	r21, r19
    6722:	44 f4       	brge	.+16     	; 0x6734 <fputc+0x38>
    6724:	a0 81       	ld	r26, Z
    6726:	b1 81       	ldd	r27, Z+1	; 0x01
    6728:	9d 01       	movw	r18, r26
    672a:	2f 5f       	subi	r18, 0xFF	; 255
    672c:	3f 4f       	sbci	r19, 0xFF	; 255
    672e:	31 83       	std	Z+1, r19	; 0x01
    6730:	20 83       	st	Z, r18
    6732:	8c 93       	st	X, r24
    6734:	26 81       	ldd	r18, Z+6	; 0x06
    6736:	37 81       	ldd	r19, Z+7	; 0x07
    6738:	2f 5f       	subi	r18, 0xFF	; 255
    673a:	3f 4f       	sbci	r19, 0xFF	; 255
    673c:	37 83       	std	Z+7, r19	; 0x07
    673e:	26 83       	std	Z+6, r18	; 0x06
    6740:	14 c0       	rjmp	.+40     	; 0x676a <fputc+0x6e>
    6742:	8b 01       	movw	r16, r22
    6744:	ec 01       	movw	r28, r24
    6746:	fb 01       	movw	r30, r22
    6748:	00 84       	ldd	r0, Z+8	; 0x08
    674a:	f1 85       	ldd	r31, Z+9	; 0x09
    674c:	e0 2d       	mov	r30, r0
    674e:	19 95       	eicall
    6750:	89 2b       	or	r24, r25
    6752:	e1 f6       	brne	.-72     	; 0x670c <fputc+0x10>
    6754:	d8 01       	movw	r26, r16
    6756:	16 96       	adiw	r26, 0x06	; 6
    6758:	8d 91       	ld	r24, X+
    675a:	9c 91       	ld	r25, X
    675c:	17 97       	sbiw	r26, 0x07	; 7
    675e:	01 96       	adiw	r24, 0x01	; 1
    6760:	17 96       	adiw	r26, 0x07	; 7
    6762:	9c 93       	st	X, r25
    6764:	8e 93       	st	-X, r24
    6766:	16 97       	sbiw	r26, 0x06	; 6
    6768:	ce 01       	movw	r24, r28
    676a:	df 91       	pop	r29
    676c:	cf 91       	pop	r28
    676e:	1f 91       	pop	r17
    6770:	0f 91       	pop	r16
    6772:	08 95       	ret

00006774 <printf>:
    6774:	cf 93       	push	r28
    6776:	df 93       	push	r29
    6778:	cd b7       	in	r28, 0x3d	; 61
    677a:	de b7       	in	r29, 0x3e	; 62
    677c:	ae 01       	movw	r20, r28
    677e:	4a 5f       	subi	r20, 0xFA	; 250
    6780:	5f 4f       	sbci	r21, 0xFF	; 255
    6782:	fa 01       	movw	r30, r20
    6784:	61 91       	ld	r22, Z+
    6786:	71 91       	ld	r23, Z+
    6788:	af 01       	movw	r20, r30
    678a:	80 91 d3 18 	lds	r24, 0x18D3	; 0x8018d3 <__iob+0x2>
    678e:	90 91 d4 18 	lds	r25, 0x18D4	; 0x8018d4 <__iob+0x3>
    6792:	0e 94 43 2b 	call	0x5686	; 0x5686 <vfprintf>
    6796:	df 91       	pop	r29
    6798:	cf 91       	pop	r28
    679a:	08 95       	ret

0000679c <puts>:
    679c:	0f 93       	push	r16
    679e:	1f 93       	push	r17
    67a0:	cf 93       	push	r28
    67a2:	df 93       	push	r29
    67a4:	e0 91 d3 18 	lds	r30, 0x18D3	; 0x8018d3 <__iob+0x2>
    67a8:	f0 91 d4 18 	lds	r31, 0x18D4	; 0x8018d4 <__iob+0x3>
    67ac:	23 81       	ldd	r18, Z+3	; 0x03
    67ae:	21 ff       	sbrs	r18, 1
    67b0:	1b c0       	rjmp	.+54     	; 0x67e8 <puts+0x4c>
    67b2:	8c 01       	movw	r16, r24
    67b4:	d0 e0       	ldi	r29, 0x00	; 0
    67b6:	c0 e0       	ldi	r28, 0x00	; 0
    67b8:	f8 01       	movw	r30, r16
    67ba:	81 91       	ld	r24, Z+
    67bc:	8f 01       	movw	r16, r30
    67be:	60 91 d3 18 	lds	r22, 0x18D3	; 0x8018d3 <__iob+0x2>
    67c2:	70 91 d4 18 	lds	r23, 0x18D4	; 0x8018d4 <__iob+0x3>
    67c6:	db 01       	movw	r26, r22
    67c8:	18 96       	adiw	r26, 0x08	; 8
    67ca:	ed 91       	ld	r30, X+
    67cc:	fc 91       	ld	r31, X
    67ce:	19 97       	sbiw	r26, 0x09	; 9
    67d0:	88 23       	and	r24, r24
    67d2:	31 f0       	breq	.+12     	; 0x67e0 <puts+0x44>
    67d4:	19 95       	eicall
    67d6:	89 2b       	or	r24, r25
    67d8:	79 f3       	breq	.-34     	; 0x67b8 <puts+0x1c>
    67da:	df ef       	ldi	r29, 0xFF	; 255
    67dc:	cf ef       	ldi	r28, 0xFF	; 255
    67de:	ec cf       	rjmp	.-40     	; 0x67b8 <puts+0x1c>
    67e0:	8a e0       	ldi	r24, 0x0A	; 10
    67e2:	19 95       	eicall
    67e4:	89 2b       	or	r24, r25
    67e6:	19 f0       	breq	.+6      	; 0x67ee <puts+0x52>
    67e8:	8f ef       	ldi	r24, 0xFF	; 255
    67ea:	9f ef       	ldi	r25, 0xFF	; 255
    67ec:	02 c0       	rjmp	.+4      	; 0x67f2 <puts+0x56>
    67ee:	8d 2f       	mov	r24, r29
    67f0:	9c 2f       	mov	r25, r28
    67f2:	df 91       	pop	r29
    67f4:	cf 91       	pop	r28
    67f6:	1f 91       	pop	r17
    67f8:	0f 91       	pop	r16
    67fa:	08 95       	ret

000067fc <sprintf>:
    67fc:	0f 93       	push	r16
    67fe:	1f 93       	push	r17
    6800:	cf 93       	push	r28
    6802:	df 93       	push	r29
    6804:	cd b7       	in	r28, 0x3d	; 61
    6806:	de b7       	in	r29, 0x3e	; 62
    6808:	2e 97       	sbiw	r28, 0x0e	; 14
    680a:	0f b6       	in	r0, 0x3f	; 63
    680c:	f8 94       	cli
    680e:	de bf       	out	0x3e, r29	; 62
    6810:	0f be       	out	0x3f, r0	; 63
    6812:	cd bf       	out	0x3d, r28	; 61
    6814:	0e 89       	ldd	r16, Y+22	; 0x16
    6816:	1f 89       	ldd	r17, Y+23	; 0x17
    6818:	86 e0       	ldi	r24, 0x06	; 6
    681a:	8c 83       	std	Y+4, r24	; 0x04
    681c:	1a 83       	std	Y+2, r17	; 0x02
    681e:	09 83       	std	Y+1, r16	; 0x01
    6820:	8f ef       	ldi	r24, 0xFF	; 255
    6822:	9f e7       	ldi	r25, 0x7F	; 127
    6824:	9e 83       	std	Y+6, r25	; 0x06
    6826:	8d 83       	std	Y+5, r24	; 0x05
    6828:	ae 01       	movw	r20, r28
    682a:	46 5e       	subi	r20, 0xE6	; 230
    682c:	5f 4f       	sbci	r21, 0xFF	; 255
    682e:	68 8d       	ldd	r22, Y+24	; 0x18
    6830:	79 8d       	ldd	r23, Y+25	; 0x19
    6832:	ce 01       	movw	r24, r28
    6834:	01 96       	adiw	r24, 0x01	; 1
    6836:	0e 94 43 2b 	call	0x5686	; 0x5686 <vfprintf>
    683a:	ef 81       	ldd	r30, Y+7	; 0x07
    683c:	f8 85       	ldd	r31, Y+8	; 0x08
    683e:	e0 0f       	add	r30, r16
    6840:	f1 1f       	adc	r31, r17
    6842:	10 82       	st	Z, r1
    6844:	2e 96       	adiw	r28, 0x0e	; 14
    6846:	0f b6       	in	r0, 0x3f	; 63
    6848:	f8 94       	cli
    684a:	de bf       	out	0x3e, r29	; 62
    684c:	0f be       	out	0x3f, r0	; 63
    684e:	cd bf       	out	0x3d, r28	; 61
    6850:	df 91       	pop	r29
    6852:	cf 91       	pop	r28
    6854:	1f 91       	pop	r17
    6856:	0f 91       	pop	r16
    6858:	08 95       	ret

0000685a <__ultoa_invert>:
    685a:	fa 01       	movw	r30, r20
    685c:	aa 27       	eor	r26, r26
    685e:	28 30       	cpi	r18, 0x08	; 8
    6860:	51 f1       	breq	.+84     	; 0x68b6 <__ultoa_invert+0x5c>
    6862:	20 31       	cpi	r18, 0x10	; 16
    6864:	81 f1       	breq	.+96     	; 0x68c6 <__ultoa_invert+0x6c>
    6866:	e8 94       	clt
    6868:	6f 93       	push	r22
    686a:	6e 7f       	andi	r22, 0xFE	; 254
    686c:	6e 5f       	subi	r22, 0xFE	; 254
    686e:	7f 4f       	sbci	r23, 0xFF	; 255
    6870:	8f 4f       	sbci	r24, 0xFF	; 255
    6872:	9f 4f       	sbci	r25, 0xFF	; 255
    6874:	af 4f       	sbci	r26, 0xFF	; 255
    6876:	b1 e0       	ldi	r27, 0x01	; 1
    6878:	3e d0       	rcall	.+124    	; 0x68f6 <__ultoa_invert+0x9c>
    687a:	b4 e0       	ldi	r27, 0x04	; 4
    687c:	3c d0       	rcall	.+120    	; 0x68f6 <__ultoa_invert+0x9c>
    687e:	67 0f       	add	r22, r23
    6880:	78 1f       	adc	r23, r24
    6882:	89 1f       	adc	r24, r25
    6884:	9a 1f       	adc	r25, r26
    6886:	a1 1d       	adc	r26, r1
    6888:	68 0f       	add	r22, r24
    688a:	79 1f       	adc	r23, r25
    688c:	8a 1f       	adc	r24, r26
    688e:	91 1d       	adc	r25, r1
    6890:	a1 1d       	adc	r26, r1
    6892:	6a 0f       	add	r22, r26
    6894:	71 1d       	adc	r23, r1
    6896:	81 1d       	adc	r24, r1
    6898:	91 1d       	adc	r25, r1
    689a:	a1 1d       	adc	r26, r1
    689c:	20 d0       	rcall	.+64     	; 0x68de <__ultoa_invert+0x84>
    689e:	09 f4       	brne	.+2      	; 0x68a2 <__ultoa_invert+0x48>
    68a0:	68 94       	set
    68a2:	3f 91       	pop	r19
    68a4:	2a e0       	ldi	r18, 0x0A	; 10
    68a6:	26 9f       	mul	r18, r22
    68a8:	11 24       	eor	r1, r1
    68aa:	30 19       	sub	r19, r0
    68ac:	30 5d       	subi	r19, 0xD0	; 208
    68ae:	31 93       	st	Z+, r19
    68b0:	de f6       	brtc	.-74     	; 0x6868 <__ultoa_invert+0xe>
    68b2:	cf 01       	movw	r24, r30
    68b4:	08 95       	ret
    68b6:	46 2f       	mov	r20, r22
    68b8:	47 70       	andi	r20, 0x07	; 7
    68ba:	40 5d       	subi	r20, 0xD0	; 208
    68bc:	41 93       	st	Z+, r20
    68be:	b3 e0       	ldi	r27, 0x03	; 3
    68c0:	0f d0       	rcall	.+30     	; 0x68e0 <__ultoa_invert+0x86>
    68c2:	c9 f7       	brne	.-14     	; 0x68b6 <__ultoa_invert+0x5c>
    68c4:	f6 cf       	rjmp	.-20     	; 0x68b2 <__ultoa_invert+0x58>
    68c6:	46 2f       	mov	r20, r22
    68c8:	4f 70       	andi	r20, 0x0F	; 15
    68ca:	40 5d       	subi	r20, 0xD0	; 208
    68cc:	4a 33       	cpi	r20, 0x3A	; 58
    68ce:	18 f0       	brcs	.+6      	; 0x68d6 <__ultoa_invert+0x7c>
    68d0:	49 5d       	subi	r20, 0xD9	; 217
    68d2:	31 fd       	sbrc	r19, 1
    68d4:	40 52       	subi	r20, 0x20	; 32
    68d6:	41 93       	st	Z+, r20
    68d8:	02 d0       	rcall	.+4      	; 0x68de <__ultoa_invert+0x84>
    68da:	a9 f7       	brne	.-22     	; 0x68c6 <__ultoa_invert+0x6c>
    68dc:	ea cf       	rjmp	.-44     	; 0x68b2 <__ultoa_invert+0x58>
    68de:	b4 e0       	ldi	r27, 0x04	; 4
    68e0:	a6 95       	lsr	r26
    68e2:	97 95       	ror	r25
    68e4:	87 95       	ror	r24
    68e6:	77 95       	ror	r23
    68e8:	67 95       	ror	r22
    68ea:	ba 95       	dec	r27
    68ec:	c9 f7       	brne	.-14     	; 0x68e0 <__ultoa_invert+0x86>
    68ee:	00 97       	sbiw	r24, 0x00	; 0
    68f0:	61 05       	cpc	r22, r1
    68f2:	71 05       	cpc	r23, r1
    68f4:	08 95       	ret
    68f6:	9b 01       	movw	r18, r22
    68f8:	ac 01       	movw	r20, r24
    68fa:	0a 2e       	mov	r0, r26
    68fc:	06 94       	lsr	r0
    68fe:	57 95       	ror	r21
    6900:	47 95       	ror	r20
    6902:	37 95       	ror	r19
    6904:	27 95       	ror	r18
    6906:	ba 95       	dec	r27
    6908:	c9 f7       	brne	.-14     	; 0x68fc <__ultoa_invert+0xa2>
    690a:	62 0f       	add	r22, r18
    690c:	73 1f       	adc	r23, r19
    690e:	84 1f       	adc	r24, r20
    6910:	95 1f       	adc	r25, r21
    6912:	a0 1d       	adc	r26, r0
    6914:	08 95       	ret

00006916 <_exit>:
    6916:	f8 94       	cli

00006918 <__stop_program>:
    6918:	ff cf       	rjmp	.-2      	; 0x6918 <__stop_program>
