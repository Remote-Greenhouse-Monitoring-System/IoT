
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000007f6  00800200  00007624  000076b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001037  008009f6  008009f6  00007eae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007eae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d60  00000000  00000000  00007f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000faf1  00000000  00000000  00008cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000041ab  00000000  00000000  0001879d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007d45  00000000  00000000  0001c948  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c58  00000000  00000000  00024690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004eef  00000000  00000000  000272e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d3e0  00000000  00000000  0002c1d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c30  00000000  00000000  000395b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__vector_12>
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 0a 2a 	jmp	0x5414	; 0x5414 <__vector_25>
      68:	0c 94 5c 2a 	jmp	0x54b8	; 0x54b8 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 a0 2a 	jmp	0x5540	; 0x5540 <__vector_36>
      94:	0c 94 f2 2a 	jmp	0x55e4	; 0x55e4 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b7 30 	jmp	0x616e	; 0x616e <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 36 2b 	jmp	0x566c	; 0x566c <__vector_51>
      d0:	0c 94 88 2b 	jmp	0x5710	; 0x5710 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <__vector_54>
      dc:	0c 94 1e 2c 	jmp	0x583c	; 0x583c <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9e 1e       	adc	r9, r30
      e6:	9e 1e       	adc	r9, r30
      e8:	9e 1e       	adc	r9, r30
      ea:	d5 1e       	adc	r13, r21
      ec:	dd 1e       	adc	r13, r29
      ee:	f2 1e       	adc	r15, r18
      f0:	9e 1e       	adc	r9, r30
      f2:	9e 1e       	adc	r9, r30
      f4:	d5 1e       	adc	r13, r21
      f6:	dd 1e       	adc	r13, r29
      f8:	d9 30       	cpi	r29, 0x09	; 9
      fa:	49 31       	cpi	r20, 0x19	; 25
      fc:	49 31       	cpi	r20, 0x19	; 25
      fe:	49 31       	cpi	r20, 0x19	; 25
     100:	49 31       	cpi	r20, 0x19	; 25
     102:	49 31       	cpi	r20, 0x19	; 25
     104:	49 31       	cpi	r20, 0x19	; 25
     106:	49 31       	cpi	r20, 0x19	; 25
     108:	d9 30       	cpi	r29, 0x09	; 9
     10a:	49 31       	cpi	r20, 0x19	; 25
     10c:	49 31       	cpi	r20, 0x19	; 25
     10e:	49 31       	cpi	r20, 0x19	; 25
     110:	49 31       	cpi	r20, 0x19	; 25
     112:	49 31       	cpi	r20, 0x19	; 25
     114:	49 31       	cpi	r20, 0x19	; 25
     116:	49 31       	cpi	r20, 0x19	; 25
     118:	db 30       	cpi	r29, 0x0B	; 11
     11a:	49 31       	cpi	r20, 0x19	; 25
     11c:	49 31       	cpi	r20, 0x19	; 25
     11e:	49 31       	cpi	r20, 0x19	; 25
     120:	49 31       	cpi	r20, 0x19	; 25
     122:	49 31       	cpi	r20, 0x19	; 25
     124:	49 31       	cpi	r20, 0x19	; 25
     126:	49 31       	cpi	r20, 0x19	; 25
     128:	49 31       	cpi	r20, 0x19	; 25
     12a:	49 31       	cpi	r20, 0x19	; 25
     12c:	49 31       	cpi	r20, 0x19	; 25
     12e:	49 31       	cpi	r20, 0x19	; 25
     130:	49 31       	cpi	r20, 0x19	; 25
     132:	49 31       	cpi	r20, 0x19	; 25
     134:	49 31       	cpi	r20, 0x19	; 25
     136:	49 31       	cpi	r20, 0x19	; 25
     138:	db 30       	cpi	r29, 0x0B	; 11
     13a:	49 31       	cpi	r20, 0x19	; 25
     13c:	49 31       	cpi	r20, 0x19	; 25
     13e:	49 31       	cpi	r20, 0x19	; 25
     140:	49 31       	cpi	r20, 0x19	; 25
     142:	49 31       	cpi	r20, 0x19	; 25
     144:	49 31       	cpi	r20, 0x19	; 25
     146:	49 31       	cpi	r20, 0x19	; 25
     148:	49 31       	cpi	r20, 0x19	; 25
     14a:	49 31       	cpi	r20, 0x19	; 25
     14c:	49 31       	cpi	r20, 0x19	; 25
     14e:	49 31       	cpi	r20, 0x19	; 25
     150:	49 31       	cpi	r20, 0x19	; 25
     152:	49 31       	cpi	r20, 0x19	; 25
     154:	49 31       	cpi	r20, 0x19	; 25
     156:	49 31       	cpi	r20, 0x19	; 25
     158:	45 31       	cpi	r20, 0x15	; 21
     15a:	49 31       	cpi	r20, 0x19	; 25
     15c:	49 31       	cpi	r20, 0x19	; 25
     15e:	49 31       	cpi	r20, 0x19	; 25
     160:	49 31       	cpi	r20, 0x19	; 25
     162:	49 31       	cpi	r20, 0x19	; 25
     164:	49 31       	cpi	r20, 0x19	; 25
     166:	49 31       	cpi	r20, 0x19	; 25
     168:	10 31       	cpi	r17, 0x10	; 16
     16a:	49 31       	cpi	r20, 0x19	; 25
     16c:	49 31       	cpi	r20, 0x19	; 25
     16e:	49 31       	cpi	r20, 0x19	; 25
     170:	49 31       	cpi	r20, 0x19	; 25
     172:	49 31       	cpi	r20, 0x19	; 25
     174:	49 31       	cpi	r20, 0x19	; 25
     176:	49 31       	cpi	r20, 0x19	; 25
     178:	49 31       	cpi	r20, 0x19	; 25
     17a:	49 31       	cpi	r20, 0x19	; 25
     17c:	49 31       	cpi	r20, 0x19	; 25
     17e:	49 31       	cpi	r20, 0x19	; 25
     180:	49 31       	cpi	r20, 0x19	; 25
     182:	49 31       	cpi	r20, 0x19	; 25
     184:	49 31       	cpi	r20, 0x19	; 25
     186:	49 31       	cpi	r20, 0x19	; 25
     188:	04 31       	cpi	r16, 0x14	; 20
     18a:	49 31       	cpi	r20, 0x19	; 25
     18c:	49 31       	cpi	r20, 0x19	; 25
     18e:	49 31       	cpi	r20, 0x19	; 25
     190:	49 31       	cpi	r20, 0x19	; 25
     192:	49 31       	cpi	r20, 0x19	; 25
     194:	49 31       	cpi	r20, 0x19	; 25
     196:	49 31       	cpi	r20, 0x19	; 25
     198:	28 31       	cpi	r18, 0x18	; 24

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 df 10 	call	0x21be	; 0x21be <prvCheckTasksWaitingTermination>
     2a0:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	a9 d6       	rcall	.+3410   	; 0xffc <vPortYield>
     2aa:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 1b 1c 	call	0x3836	; 0x3836 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 67 1e 	call	0x3cce	; 0x3cce <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	19 e0       	ldi	r17, 0x09	; 9
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e4 e2       	ldi	r30, 0x24	; 36
     2e6:	f6 e7       	ldi	r31, 0x76	; 118
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a6 3f       	cpi	r26, 0xF6	; 246
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	2a e1       	ldi	r18, 0x1A	; 26
     2fa:	a6 ef       	ldi	r26, 0xF6	; 246
     2fc:	b9 e0       	ldi	r27, 0x09	; 9
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ad 32       	cpi	r26, 0x2D	; 45
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 a5 22 	call	0x454a	; 0x454a <main>
     30c:	0c 94 10 3b 	jmp	0x7620	; 0x7620 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
// 	const TickType_t xFrequency = pdMS_TO_TICKS(20000); 
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 46 14 	call	0x288c	; 0x288c <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e1       	ldi	r20, 0x15	; 21
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <measureEventGroup>
     34e:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <measureEventGroup+0x1>
     352:	9f d3       	rcall	.+1854   	; 0xa92 <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e2       	ldi	r20, 0x2A	; 42
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <dataReadyEventGroup>
     36c:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <dataReadyEventGroup+0x1>
     370:	f0 d2       	rcall	.+1504   	; 0x952 <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 72       	andi	r24, 0x2A	; 42
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 da 20 	call	0x41b4	; 0x41b4 <TempHumSensor_getTemp>
     38a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 df 20 	call	0x41be	; 0x41be <TempHumSensor_getHum>
     392:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <CO2_getPPM>
     39a:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <set_CO2_ppm>
			set_light_lux(light_sensor_get_lux());
     39e:	0e 94 4d 20 	call	0x409a	; 0x409a <light_sensor_get_lux>
     3a2:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <set_light_lux>
			
			if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     3a6:	4a e0       	ldi	r20, 0x0A	; 10
     3a8:	50 e0       	ldi	r21, 0x00	; 0
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <configSemaphore>
     3b2:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <configSemaphore+0x1>
     3b6:	0e 94 90 0b 	call	0x1720	; 0x1720 <xQueueSemaphoreTake>
     3ba:	81 30       	cpi	r24, 0x01	; 1
				set_status(get_system_status());
     3bc:	79 f4       	brne	.+30     	; 0x3dc <main_application_task+0xca>
     3be:	4b d0       	rcall	.+150    	; 0x456 <get_system_status>
     3c0:	0e 94 57 1f 	call	0x3eae	; 0x3eae <set_status>
				xSemaphoreGive(configSemaphore);
     3c4:	00 e0       	ldi	r16, 0x00	; 0
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	a9 01       	movw	r20, r18
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <configSemaphore>
     3d4:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <configSemaphore+0x1>
     3d8:	0e 94 16 0a 	call	0x142c	; 0x142c <xQueueGenericSend>
			}
			
			lora_driver_payload_t payload = get_lora_package(2);
     3dc:	62 e0       	ldi	r22, 0x02	; 2
     3de:	ce 01       	movw	r24, r28
     3e0:	05 96       	adiw	r24, 0x05	; 5
     3e2:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3e6:	0f ef       	ldi	r16, 0xFF	; 255
     3e8:	1f ef       	ldi	r17, 0xFF	; 255
     3ea:	98 01       	movw	r18, r16
     3ec:	46 e1       	ldi	r20, 0x16	; 22
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	be 01       	movw	r22, r28
     3f2:	6b 5f       	subi	r22, 0xFB	; 251
     3f4:	7f 4f       	sbci	r23, 0xFF	; 255
     3f6:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <uplinkMessageBufferHandle>
     3fa:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <uplinkMessageBufferHandle+0x1>
     3fe:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     402:	86 31       	cpi	r24, 0x16	; 22
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	95 cf       	rjmp	.-214    	; 0x332 <main_application_task+0x20>
				printf("Timed out.\n");
     408:	8f e6       	ldi	r24, 0x6F	; 111
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <puts>
     410:	90 cf       	rjmp	.-224    	; 0x332 <main_application_task+0x20>

00000412 <create_main_application_task>:



void main_application_task(void *pvParameters);

void create_main_application_task(UBaseType_t priority){
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
		
	xTaskCreate(
     418:	e1 2c       	mov	r14, r1
     41a:	f1 2c       	mov	r15, r1
     41c:	08 2f       	mov	r16, r24
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	40 ec       	ldi	r20, 0xC0	; 192
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	6a e7       	ldi	r22, 0x7A	; 122
     428:	72 e0       	ldi	r23, 0x02	; 2
     42a:	89 e8       	ldi	r24, 0x89	; 137
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + priority 
	,  NULL );
	
}
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	08 95       	ret

0000043a <set_system_status>:

void set_max_co2(uint16_t maxCO2){
	max_co2 = maxCO2;
}

void set_min_co2(uint16_t minCO2){
     43a:	87 3f       	cpi	r24, 0xF7	; 247
     43c:	30 f0       	brcs	.+12     	; 0x44a <set_system_status+0x10>
     43e:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <__data_end>
     442:	89 23       	and	r24, r25
     444:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <__data_end>
     448:	08 95       	ret
     44a:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <__data_end>
     44e:	89 2b       	or	r24, r25
     450:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <__data_end>
     454:	08 95       	ret

00000456 <get_system_status>:
     456:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <__data_end>
     45a:	08 95       	ret

0000045c <get_max_temperature>:
     45c:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <max_temperature>
     460:	90 91 fc 09 	lds	r25, 0x09FC	; 0x8009fc <max_temperature+0x1>
     464:	08 95       	ret

00000466 <set_max_temperature>:
     466:	90 93 fc 09 	sts	0x09FC, r25	; 0x8009fc <max_temperature+0x1>
     46a:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <max_temperature>
     46e:	08 95       	ret

00000470 <get_max_humidity>:
     470:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <max_humidity>
     474:	90 91 fa 09 	lds	r25, 0x09FA	; 0x8009fa <max_humidity+0x1>
     478:	08 95       	ret

0000047a <set_max_humidity>:
     47a:	90 93 fa 09 	sts	0x09FA, r25	; 0x8009fa <max_humidity+0x1>
     47e:	80 93 f9 09 	sts	0x09F9, r24	; 0x8009f9 <max_humidity>
     482:	08 95       	ret

00000484 <get_max_co2>:
     484:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <max_co2>
     488:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <max_co2+0x1>
     48c:	08 95       	ret

0000048e <set_max_co2>:
     48e:	90 93 f8 09 	sts	0x09F8, r25	; 0x8009f8 <max_co2+0x1>
     492:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <max_co2>
     496:	08 95       	ret

00000498 <setConfiguration>:
static uint16_t max_co2 = 0;
static uint16_t min_co2 = 0;
static uint8_t system_status = 0;


void setConfiguration(lora_driver_payload_t payload){
     498:	4f 92       	push	r4
     49a:	5f 92       	push	r5
     49c:	6f 92       	push	r6
     49e:	7f 92       	push	r7
     4a0:	8f 92       	push	r8
     4a2:	9f 92       	push	r9
     4a4:	af 92       	push	r10
     4a6:	bf 92       	push	r11
     4a8:	cf 92       	push	r12
     4aa:	df 92       	push	r13
     4ac:	ef 92       	push	r14
     4ae:	ff 92       	push	r15
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
	uint16_t newMaxHum = 0;
	uint16_t newMinHum = 0;
	uint16_t newMaxCO2 = 0;
	uint16_t newMinCO2 = 0;
	
	newMaxTemp = (payload.bytes[0] << 8 | payload.bytes[1]);
     4bc:	8e 89       	ldd	r24, Y+22	; 0x16
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	98 2f       	mov	r25, r24
     4c2:	88 27       	eor	r24, r24
     4c4:	2f 89       	ldd	r18, Y+23	; 0x17
     4c6:	82 2b       	or	r24, r18
	newMinTemp = (payload.bytes[2] << 8 | payload.bytes[3]);
     4c8:	a8 8c       	ldd	r10, Y+24	; 0x18
     4ca:	b1 2c       	mov	r11, r1
     4cc:	ba 2c       	mov	r11, r10
     4ce:	aa 24       	eor	r10, r10
     4d0:	29 8d       	ldd	r18, Y+25	; 0x19
     4d2:	a2 2a       	or	r10, r18
	newMaxHum = (payload.bytes[4] << 8 | payload.bytes[5]);
     4d4:	6a 8c       	ldd	r6, Y+26	; 0x1a
     4d6:	71 2c       	mov	r7, r1
     4d8:	76 2c       	mov	r7, r6
     4da:	66 24       	eor	r6, r6
     4dc:	2b 8d       	ldd	r18, Y+27	; 0x1b
     4de:	62 2a       	or	r6, r18
	newMinHum = (payload.bytes[6] << 8 | payload.bytes[7]);
     4e0:	cc 8c       	ldd	r12, Y+28	; 0x1c
     4e2:	d1 2c       	mov	r13, r1
     4e4:	dc 2c       	mov	r13, r12
     4e6:	cc 24       	eor	r12, r12
     4e8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     4ea:	c2 2a       	or	r12, r18
	newMaxCO2 = (payload.bytes[8] << 8 | payload.bytes[9]);
     4ec:	0e 8d       	ldd	r16, Y+30	; 0x1e
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	10 2f       	mov	r17, r16
     4f2:	00 27       	eor	r16, r16
     4f4:	2f 8d       	ldd	r18, Y+31	; 0x1f
     4f6:	02 2b       	or	r16, r18
	newMinCO2 =(payload.bytes[10] << 8 | payload.bytes[11]);
     4f8:	e8 a0       	ldd	r14, Y+32	; 0x20
     4fa:	f1 2c       	mov	r15, r1
     4fc:	fe 2c       	mov	r15, r14
     4fe:	ee 24       	eor	r14, r14
     500:	29 a1       	ldd	r18, Y+33	; 0x21
     502:	e2 2a       	or	r14, r18
	
	set_max_temperature(newMaxTemp/10);
     504:	0f 2e       	mov	r0, r31
     506:	fa e0       	ldi	r31, 0x0A	; 10
     508:	8f 2e       	mov	r8, r31
     50a:	91 2c       	mov	r9, r1
     50c:	f0 2d       	mov	r31, r0
     50e:	b4 01       	movw	r22, r8
     510:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__divmodhi4>
     514:	56 2e       	mov	r5, r22
     516:	47 2e       	mov	r4, r23
     518:	86 2f       	mov	r24, r22
     51a:	97 2f       	mov	r25, r23
     51c:	a4 df       	rcall	.-184    	; 0x466 <set_max_temperature>
	set_min_temperature(newMinTemp/10);
     51e:	c5 01       	movw	r24, r10
     520:	b4 01       	movw	r22, r8
     522:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__divmodhi4>
     526:	96 2e       	mov	r9, r22
     528:	87 2e       	mov	r8, r23
	set_max_humidity(newMaxHum/10);
     52a:	93 01       	movw	r18, r6
     52c:	ad ec       	ldi	r26, 0xCD	; 205
     52e:	bc ec       	ldi	r27, 0xCC	; 204
     530:	0e 94 6e 37 	call	0x6edc	; 0x6edc <__umulhisi3>
     534:	5c 01       	movw	r10, r24
     536:	b6 94       	lsr	r11
     538:	a7 94       	ror	r10
     53a:	b6 94       	lsr	r11
     53c:	a7 94       	ror	r10
     53e:	b6 94       	lsr	r11
     540:	a7 94       	ror	r10
     542:	c5 01       	movw	r24, r10
     544:	9a df       	rcall	.-204    	; 0x47a <set_max_humidity>
	set_min_humidity(newMinHum/10);
     546:	96 01       	movw	r18, r12
     548:	ad ec       	ldi	r26, 0xCD	; 205
     54a:	bc ec       	ldi	r27, 0xCC	; 204
     54c:	0e 94 6e 37 	call	0x6edc	; 0x6edc <__umulhisi3>
     550:	6c 01       	movw	r12, r24
     552:	d6 94       	lsr	r13
     554:	c7 94       	ror	r12
     556:	d6 94       	lsr	r13
     558:	c7 94       	ror	r12
     55a:	d6 94       	lsr	r13
     55c:	c7 94       	ror	r12
	set_max_co2(newMaxCO2);
     55e:	80 2f       	mov	r24, r16
     560:	91 2f       	mov	r25, r17
     562:	95 df       	rcall	.-214    	; 0x48e <set_max_co2>
	set_min_co2(newMinCO2);
	
	printf("DOWNLINK CONF MIN/MAX, tmp: %d/%dC, hum: %d/%d%%, co2: %d/%dppm\n", newMaxTemp/10, newMinTemp/10, newMaxHum/10, newMinHum/10, newMaxCO2, newMinCO2);
     564:	ff 92       	push	r15
     566:	ef 92       	push	r14
     568:	1f 93       	push	r17
     56a:	0f 93       	push	r16
     56c:	df 92       	push	r13
     56e:	cf 92       	push	r12
     570:	bf 92       	push	r11
     572:	af 92       	push	r10
     574:	8f 92       	push	r8
     576:	9f 92       	push	r9
     578:	4f 92       	push	r4
     57a:	5f 92       	push	r5
     57c:	8a e8       	ldi	r24, 0x8A	; 138
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	9f 93       	push	r25
     582:	8f 93       	push	r24
     584:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
}
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	bf 90       	pop	r11
     5a4:	af 90       	pop	r10
     5a6:	9f 90       	pop	r9
     5a8:	8f 90       	pop	r8
     5aa:	7f 90       	pop	r7
     5ac:	6f 90       	pop	r6
     5ae:	5f 90       	pop	r5
     5b0:	4f 90       	pop	r4
     5b2:	08 95       	ret

000005b4 <lora_downlink_handler_task>:
	uint8_t xReceivedBytes = 0;
	
	for(;;){
		
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle, 
     5b4:	0f ef       	ldi	r16, 0xFF	; 255
     5b6:	1f ef       	ldi	r17, 0xFF	; 255
     5b8:	98 01       	movw	r18, r16
     5ba:	46 e1       	ldi	r20, 0x16	; 22
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	6d ef       	ldi	r22, 0xFD	; 253
     5c0:	79 e0       	ldi	r23, 0x09	; 9
     5c2:	80 91 21 1a 	lds	r24, 0x1A21	; 0x801a21 <downlinkMessageBufferHandle>
     5c6:	90 91 22 1a 	lds	r25, 0x1A22	; 0x801a22 <downlinkMessageBufferHandle+0x1>
     5ca:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <xStreamBufferReceive>
		&_downlink_payload, 
		sizeof(lora_driver_payload_t), 
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     5ce:	88 23       	and	r24, r24
     5d0:	89 f3       	breq	.-30     	; 0x5b4 <lora_downlink_handler_task>
			printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     5d2:	ed ef       	ldi	r30, 0xFD	; 253
     5d4:	f9 e0       	ldi	r31, 0x09	; 9
     5d6:	91 81       	ldd	r25, Z+1	; 0x01
     5d8:	80 81       	ld	r24, Z
     5da:	1f 92       	push	r1
     5dc:	9f 93       	push	r25
     5de:	1f 92       	push	r1
     5e0:	8f 93       	push	r24
     5e2:	8b ec       	ldi	r24, 0xCB	; 203
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	9f 93       	push	r25
     5e8:	8f 93       	push	r24
     5ea:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
			
			if(configSemaphore != NULL){
     5ee:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <configSemaphore>
     5f2:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <configSemaphore+0x1>
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	00 97       	sbiw	r24, 0x00	; 0
     604:	b9 f2       	breq	.-82     	; 0x5b4 <lora_downlink_handler_task>
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     606:	4a e0       	ldi	r20, 0x0A	; 10
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	0e 94 90 0b 	call	0x1720	; 0x1720 <xQueueSemaphoreTake>
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	39 f5       	brne	.+78     	; 0x664 <lora_downlink_handler_task+0xb0>
					setConfiguration(_downlink_payload);
     616:	8d b7       	in	r24, 0x3d	; 61
     618:	9e b7       	in	r25, 0x3e	; 62
     61a:	46 97       	sbiw	r24, 0x16	; 22
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	9e bf       	out	0x3e, r25	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	8d bf       	out	0x3d, r24	; 61
     626:	ad b7       	in	r26, 0x3d	; 61
     628:	be b7       	in	r27, 0x3e	; 62
     62a:	11 96       	adiw	r26, 0x01	; 1
     62c:	86 e1       	ldi	r24, 0x16	; 22
     62e:	ed ef       	ldi	r30, 0xFD	; 253
     630:	f9 e0       	ldi	r31, 0x09	; 9
     632:	01 90       	ld	r0, Z+
     634:	0d 92       	st	X+, r0
     636:	8a 95       	dec	r24
     638:	e1 f7       	brne	.-8      	; 0x632 <lora_downlink_handler_task+0x7e>
     63a:	2e df       	rcall	.-420    	; 0x498 <setConfiguration>
					xSemaphoreGive(configSemaphore);
     63c:	00 e0       	ldi	r16, 0x00	; 0
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	a9 01       	movw	r20, r18
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <configSemaphore>
     64c:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <configSemaphore+0x1>
     650:	ed d6       	rcall	.+3546   	; 0x142c <xQueueGenericSend>
     652:	8d b7       	in	r24, 0x3d	; 61
     654:	9e b7       	in	r25, 0x3e	; 62
     656:	46 96       	adiw	r24, 0x16	; 22
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	9e bf       	out	0x3e, r25	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	8d bf       	out	0x3d, r24	; 61
     662:	a8 cf       	rjmp	.-176    	; 0x5b4 <lora_downlink_handler_task>
				}
				else{
					printf("Couldn't obtain semaphore.\n");
     664:	8d ef       	ldi	r24, 0xFD	; 253
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <puts>
     66c:	a3 cf       	rjmp	.-186    	; 0x5b4 <lora_downlink_handler_task>

0000066e <create_lora_downlink_handler_task>:

void lora_downlink_handler_task(void *pvParameters);

static lora_driver_payload_t _downlink_payload;

void create_lora_downlink_handler_task(UBaseType_t priority){
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
		xTaskCreate(
     674:	e1 2c       	mov	r14, r1
     676:	f1 2c       	mov	r15, r1
     678:	08 2f       	mov	r16, r24
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	48 e8       	ldi	r20, 0x88	; 136
     680:	51 e0       	ldi	r21, 0x01	; 1
     682:	68 e1       	ldi	r22, 0x18	; 24
     684:	73 e0       	ldi	r23, 0x03	; 3
     686:	8a ed       	ldi	r24, 0xDA	; 218
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskCreate>
		,  "LRHandDownlink"
		,  configMINIMAL_STACK_SIZE+200
		,  NULL
		,  tskIDLE_PRIORITY + priority
		,  NULL );
}
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	08 95       	ret

00000696 <create_actions_controller_task>:
void actions_controller_task(void *pvParameters);
void temperature_action(int16_t currentTemp, int16_t thresholdTemp);
void humidity_action(uint16_t currentHum, uint16_t thresholdHum);
void co2_action(uint16_t currentCO2, uint16_t thresholdCO2);

void create_actions_controller_task(UBaseType_t priority){
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
	
	DDRA = 0xFF;
     69c:	9f ef       	ldi	r25, 0xFF	; 255
     69e:	91 b9       	out	0x01, r25	; 1
	PORTA = 0xFF;
     6a0:	92 b9       	out	0x02, r25	; 2
	
	xTaskCreate(
     6a2:	e1 2c       	mov	r14, r1
     6a4:	f1 2c       	mov	r15, r1
     6a6:	08 2f       	mov	r16, r24
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 ec       	ldi	r20, 0xC0	; 192
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	67 e2       	ldi	r22, 0x27	; 39
     6b2:	73 e0       	ldi	r23, 0x03	; 3
     6b4:	88 ea       	ldi	r24, 0xA8	; 168
     6b6:	93 e0       	ldi	r25, 0x03	; 3
     6b8:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskCreate>
	,  "FanController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	08 95       	ret

000006c4 <temperature_action>:
			}	
		}
	}
}

void temperature_action(int16_t currentTemp, int16_t thresholdTemp){
     6c4:	9b 01       	movw	r18, r22
	if(currentTemp/10 > thresholdTemp){
     6c6:	6a e0       	ldi	r22, 0x0A	; 10
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__divmodhi4>
     6ce:	26 17       	cp	r18, r22
     6d0:	37 07       	cpc	r19, r23
     6d2:	54 f4       	brge	.+20     	; 0x6e8 <temperature_action+0x24>
		servo_set_position(0, 100);
     6d4:	64 e6       	ldi	r22, 0x64	; 100
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 33 21 	call	0x4266	; 0x4266 <servo_set_position>
		PORTA &= ~(1 << 0);
     6dc:	82 b1       	in	r24, 0x02	; 2
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	82 b9       	out	0x02, r24	; 2
		set_system_status(TEMPERATURE_ACTION_ON);
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	aa ce       	rjmp	.-684    	; 0x43a <set_system_status>
     6e6:	08 95       	ret
	}
	else{
		servo_set_position(0, -100);
     6e8:	6c e9       	ldi	r22, 0x9C	; 156
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 33 21 	call	0x4266	; 0x4266 <servo_set_position>
		PORTA |= (1 << 0);
     6f0:	82 b1       	in	r24, 0x02	; 2
     6f2:	81 60       	ori	r24, 0x01	; 1
     6f4:	82 b9       	out	0x02, r24	; 2
		set_system_status(TEMPERATURE_ACTION_OFF);
     6f6:	8e ef       	ldi	r24, 0xFE	; 254
     6f8:	a0 ce       	rjmp	.-704    	; 0x43a <set_system_status>
     6fa:	08 95       	ret

000006fc <humidity_action>:
	}
}
void humidity_action(uint16_t currentHum, uint16_t thresholdHum){
     6fc:	ab 01       	movw	r20, r22
	if(currentHum/10 > thresholdHum){
     6fe:	9c 01       	movw	r18, r24
     700:	ad ec       	ldi	r26, 0xCD	; 205
     702:	bc ec       	ldi	r27, 0xCC	; 204
     704:	0e 94 6e 37 	call	0x6edc	; 0x6edc <__umulhisi3>
     708:	96 95       	lsr	r25
     70a:	87 95       	ror	r24
     70c:	96 95       	lsr	r25
     70e:	87 95       	ror	r24
     710:	96 95       	lsr	r25
     712:	87 95       	ror	r24
     714:	48 17       	cp	r20, r24
     716:	59 07       	cpc	r21, r25
     718:	30 f4       	brcc	.+12     	; 0x726 <humidity_action+0x2a>
		PORTA &= ~(1 << 1);
     71a:	82 b1       	in	r24, 0x02	; 2
     71c:	8d 7f       	andi	r24, 0xFD	; 253
     71e:	82 b9       	out	0x02, r24	; 2
		set_system_status(HUMIDITY_ACTION_ON);
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	8b ce       	rjmp	.-746    	; 0x43a <set_system_status>
     724:	08 95       	ret
	}
	else{
		PORTA |= (1 << 1);
     726:	82 b1       	in	r24, 0x02	; 2
     728:	82 60       	ori	r24, 0x02	; 2
     72a:	82 b9       	out	0x02, r24	; 2
		set_system_status(HUMIDITY_ACTION_OFF);
     72c:	8d ef       	ldi	r24, 0xFD	; 253
     72e:	85 ce       	rjmp	.-758    	; 0x43a <set_system_status>
     730:	08 95       	ret

00000732 <co2_action>:
	}
}
void co2_action(uint16_t currentCO2, uint16_t thresholdCO2){
	if(currentCO2 > thresholdCO2){
     732:	68 17       	cp	r22, r24
     734:	79 07       	cpc	r23, r25
     736:	30 f4       	brcc	.+12     	; 0x744 <co2_action+0x12>
		PORTA &= ~(1 << 2);
     738:	82 b1       	in	r24, 0x02	; 2
     73a:	8b 7f       	andi	r24, 0xFB	; 251
     73c:	82 b9       	out	0x02, r24	; 2
		set_system_status(CO2_ACTION_ON);
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	7c ce       	rjmp	.-776    	; 0x43a <set_system_status>
     742:	08 95       	ret
	}
	else{
		PORTA |= (1 << 2);
     744:	82 b1       	in	r24, 0x02	; 2
     746:	84 60       	ori	r24, 0x04	; 4
     748:	82 b9       	out	0x02, r24	; 2
		set_system_status(CO2_ACTION_OFF);
     74a:	8b ef       	ldi	r24, 0xFB	; 251
     74c:	76 ce       	rjmp	.-788    	; 0x43a <set_system_status>
     74e:	08 95       	ret

00000750 <actions_controller_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void actions_controller_task(void *pvParameters) {
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	00 d0       	rcall	.+0      	; 0x756 <actions_controller_task+0x6>
     756:	1f 92       	push	r1
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(60000); 
// 	const TickType_t xFrequency = pdMS_TO_TICKS(5000);

	xLastWakeTime = xTaskGetTickCount();
     75c:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskGetTickCount>
     760:	69 83       	std	Y+1, r22	; 0x01
     762:	7a 83       	std	Y+2, r23	; 0x02
     764:	8b 83       	std	Y+3, r24	; 0x03
     766:	9c 83       	std	Y+4, r25	; 0x04
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
	uint16_t currentHumidity = 0;
	uint16_t thresholdHumidity = 0;
	uint16_t currentCO2 = 0;
	uint16_t thresholdCO2 = 0;
     768:	61 2c       	mov	r6, r1
     76a:	71 2c       	mov	r7, r1
void actions_controller_task(void *pvParameters) {
	
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
	uint16_t currentHumidity = 0;
	uint16_t thresholdHumidity = 0;
     76c:	81 2c       	mov	r8, r1
     76e:	91 2c       	mov	r9, r1
}

void actions_controller_task(void *pvParameters) {
	
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
     770:	a1 2c       	mov	r10, r1
     772:	b1 2c       	mov	r11, r1

	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     774:	48 e8       	ldi	r20, 0x88	; 136
     776:	5e e0       	ldi	r21, 0x0E	; 14
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	ce 01       	movw	r24, r28
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	0e 94 46 14 	call	0x288c	; 0x288c <xTaskDelayUntil>

		if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     784:	4a e0       	ldi	r20, 0x0A	; 10
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <configSemaphore>
     790:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <configSemaphore+0x1>
     794:	c5 d7       	rcall	.+3978   	; 0x1720 <xQueueSemaphoreTake>
     796:	81 30       	cpi	r24, 0x01	; 1
     798:	89 f4       	brne	.+34     	; 0x7bc <actions_controller_task+0x6c>
			thresholdTemperature = get_max_temperature();
     79a:	60 de       	rcall	.-832    	; 0x45c <get_max_temperature>
     79c:	5c 01       	movw	r10, r24
			thresholdHumidity = get_max_humidity();
     79e:	68 de       	rcall	.-816    	; 0x470 <get_max_humidity>
     7a0:	4c 01       	movw	r8, r24
			thresholdCO2 = get_max_co2();
     7a2:	70 de       	rcall	.-800    	; 0x484 <get_max_co2>
     7a4:	3c 01       	movw	r6, r24
     7a6:	00 e0       	ldi	r16, 0x00	; 0
			xSemaphoreGive(configSemaphore);
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	a9 01       	movw	r20, r18
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <configSemaphore>
     7b6:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <configSemaphore+0x1>
     7ba:	38 d6       	rcall	.+3184   	; 0x142c <xQueueGenericSend>
     7bc:	45 e1       	ldi	r20, 0x15	; 21
			}
			
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);		
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <measureEventGroup>
     7c8:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <measureEventGroup+0x1>
     7cc:	62 d1       	rcall	.+708    	; 0xa92 <xEventGroupSetBits>
     7ce:	cc 24       	eor	r12, r12
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     7d0:	ca 94       	dec	r12
     7d2:	dc 2c       	mov	r13, r12
     7d4:	76 01       	movw	r14, r12
     7d6:	01 e0       	ldi	r16, 0x01	; 1
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	4a e2       	ldi	r20, 0x2A	; 42
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <dataReadyEventGroup>
     7e6:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <dataReadyEventGroup+0x1>
     7ea:	b3 d0       	rcall	.+358    	; 0x952 <xEventGroupWaitBits>
     7ec:	dc 01       	movw	r26, r24
				
		if (uxBits&(ALL_READY_BITS)){
     7ee:	cb 01       	movw	r24, r22
     7f0:	8a 72       	andi	r24, 0x2A	; 42
     7f2:	99 27       	eor	r25, r25
     7f4:	aa 27       	eor	r26, r26
     7f6:	bb 27       	eor	r27, r27
     7f8:	89 2b       	or	r24, r25
     7fa:	8a 2b       	or	r24, r26
     7fc:	8b 2b       	or	r24, r27
     7fe:	09 f4       	brne	.+2      	; 0x802 <actions_controller_task+0xb2>
     800:	b9 cf       	rjmp	.-142    	; 0x774 <actions_controller_task+0x24>
     802:	0e 94 da 20 	call	0x41b4	; 0x41b4 <TempHumSensor_getTemp>
			currentTemperature = TempHumSensor_getTemp();
     806:	7c 01       	movw	r14, r24
     808:	0e 94 df 20 	call	0x41be	; 0x41be <TempHumSensor_getHum>
			currentHumidity = TempHumSensor_getHum();
     80c:	8c 01       	movw	r16, r24
     80e:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <CO2_getPPM>
			currentCO2 = CO2_getPPM();
     812:	c8 2e       	mov	r12, r24
     814:	d9 2e       	mov	r13, r25
     816:	0e 94 4d 20 	call	0x409a	; 0x409a <light_sensor_get_lux>
			currentLight = light_sensor_get_lux();
     81a:	9f 93       	push	r25
			printf("CURR/THRS: tmp %d/%dC, hum %d/%d%%, co2 %d/%dppm, (light %5.2flux)\n", 
     81c:	8f 93       	push	r24
     81e:	7f 93       	push	r23
     820:	6f 93       	push	r22
     822:	7f 92       	push	r7
     824:	6f 92       	push	r6
     826:	df 92       	push	r13
     828:	cf 92       	push	r12
     82a:	9f 92       	push	r9
     82c:	8f 92       	push	r8
     82e:	98 01       	movw	r18, r16
     830:	ad ec       	ldi	r26, 0xCD	; 205
     832:	bc ec       	ldi	r27, 0xCC	; 204
     834:	0e 94 6e 37 	call	0x6edc	; 0x6edc <__umulhisi3>
     838:	96 95       	lsr	r25
     83a:	87 95       	ror	r24
     83c:	96 95       	lsr	r25
     83e:	87 95       	ror	r24
     840:	96 95       	lsr	r25
     842:	87 95       	ror	r24
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	bf 92       	push	r11
     84a:	af 92       	push	r10
     84c:	c7 01       	movw	r24, r14
     84e:	6a e0       	ldi	r22, 0x0A	; 10
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__divmodhi4>
     856:	7f 93       	push	r23
     858:	6f 93       	push	r22
     85a:	85 e3       	ldi	r24, 0x35	; 53
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	9f 93       	push	r25
     860:	8f 93       	push	r24
     862:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
     866:	0f b6       	in	r0, 0x3f	; 63
			currentTemperature/10, thresholdTemperature, currentHumidity/10, thresholdHumidity, currentCO2, thresholdCO2, currentLight);
			
			if(!(thresholdTemperature == 0 && thresholdHumidity == 0 && thresholdCO2 == 0)){
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	a1 14       	cp	r10, r1
     872:	b1 04       	cpc	r11, r1
     874:	31 f4       	brne	.+12     	; 0x882 <actions_controller_task+0x132>
     876:	81 14       	cp	r8, r1
     878:	91 04       	cpc	r9, r1
     87a:	19 f4       	brne	.+6      	; 0x882 <actions_controller_task+0x132>
     87c:	61 14       	cp	r6, r1
     87e:	71 04       	cpc	r7, r1
     880:	79 f1       	breq	.+94     	; 0x8e0 <actions_controller_task+0x190>
     882:	4a e0       	ldi	r20, 0x0A	; 10
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <configSemaphore>
     88e:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <configSemaphore+0x1>
     892:	46 d7       	rcall	.+3724   	; 0x1720 <xQueueSemaphoreTake>
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	09 f0       	breq	.+2      	; 0x89a <actions_controller_task+0x14a>
					temperature_action(currentTemperature, thresholdTemperature);
     898:	6d cf       	rjmp	.-294    	; 0x774 <actions_controller_task+0x24>
     89a:	b5 01       	movw	r22, r10
					humidity_action(currentHumidity, thresholdHumidity);
     89c:	c7 01       	movw	r24, r14
     89e:	12 df       	rcall	.-476    	; 0x6c4 <temperature_action>
     8a0:	b4 01       	movw	r22, r8
     8a2:	c8 01       	movw	r24, r16
					co2_action(currentCO2, thresholdCO2);
     8a4:	2b df       	rcall	.-426    	; 0x6fc <humidity_action>
     8a6:	b3 01       	movw	r22, r6
     8a8:	8c 2d       	mov	r24, r12
     8aa:	9d 2d       	mov	r25, r13
     8ac:	42 df       	rcall	.-380    	; 0x732 <co2_action>
					printf("status: %x\n", get_system_status());
     8ae:	d3 dd       	rcall	.-1114   	; 0x456 <get_system_status>
     8b0:	1f 92       	push	r1
     8b2:	8f 93       	push	r24
     8b4:	89 e7       	ldi	r24, 0x79	; 121
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
					xSemaphoreGive(configSemaphore);
     8c0:	00 e0       	ldi	r16, 0x00	; 0
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	a9 01       	movw	r20, r18
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	80 91 19 1a 	lds	r24, 0x1A19	; 0x801a19 <configSemaphore>
     8d0:	90 91 1a 1a 	lds	r25, 0x1A1A	; 0x801a1a <configSemaphore+0x1>
     8d4:	ab d5       	rcall	.+2902   	; 0x142c <xQueueGenericSend>
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	4a cf       	rjmp	.-364    	; 0x774 <actions_controller_task+0x24>
     8e0:	85 e8       	ldi	r24, 0x85	; 133
				}
			}
			else{
				printf("No config yet.\n");
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <puts>
     8e8:	45 cf       	rjmp	.-374    	; 0x774 <actions_controller_task+0x24>

000008ea <prvTestWaitCondition>:
     8ea:	0f 93       	push	r16
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     8ec:	01 11       	cpse	r16, r1
     8ee:	0c c0       	rjmp	.+24     	; 0x908 <prvTestWaitCondition+0x1e>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	82 23       	and	r24, r18
     8f6:	93 23       	and	r25, r19
     8f8:	a4 23       	and	r26, r20
     8fa:	b5 23       	and	r27, r21
     8fc:	89 2b       	or	r24, r25
     8fe:	8a 2b       	or	r24, r26
     900:	8b 2b       	or	r24, r27
     902:	79 f4       	brne	.+30     	; 0x922 <prvTestWaitCondition+0x38>
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	10 c0       	rjmp	.+32     	; 0x928 <prvTestWaitCondition+0x3e>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	82 23       	and	r24, r18
     90e:	93 23       	and	r25, r19
     910:	a4 23       	and	r26, r20
     912:	b5 23       	and	r27, r21
     914:	28 17       	cp	r18, r24
     916:	39 07       	cpc	r19, r25
     918:	4a 07       	cpc	r20, r26
     91a:	5b 07       	cpc	r21, r27
     91c:	21 f0       	breq	.+8      	; 0x926 <prvTestWaitCondition+0x3c>
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	03 c0       	rjmp	.+6      	; 0x928 <prvTestWaitCondition+0x3e>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	01 c0       	rjmp	.+2      	; 0x928 <prvTestWaitCondition+0x3e>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	0f 91       	pop	r16
     92a:	08 95       	ret

0000092c <xEventGroupCreate>:
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	8f e0       	ldi	r24, 0x0F	; 15
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	af d1       	rcall	.+862    	; 0xc94 <pvPortMalloc>
     936:	ec 01       	movw	r28, r24
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	39 f0       	breq	.+14     	; 0x94a <xEventGroupCreate+0x1e>
     93c:	fc 01       	movw	r30, r24
     93e:	11 92       	st	Z+, r1
     940:	11 92       	st	Z+, r1
     942:	11 92       	st	Z+, r1
     944:	11 92       	st	Z+, r1
     946:	cf 01       	movw	r24, r30
     948:	8b d2       	rcall	.+1302   	; 0xe60 <vListInitialise>
     94a:	ce 01       	movw	r24, r28
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <xEventGroupWaitBits>:
     952:	2f 92       	push	r2
     954:	3f 92       	push	r3
     956:	4f 92       	push	r4
     958:	5f 92       	push	r5
     95a:	6f 92       	push	r6
     95c:	7f 92       	push	r7
     95e:	8f 92       	push	r8
     960:	9f 92       	push	r9
     962:	af 92       	push	r10
     964:	bf 92       	push	r11
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ec 01       	movw	r28, r24
     978:	4a 01       	movw	r8, r20
     97a:	5b 01       	movw	r10, r22
     97c:	62 2e       	mov	r6, r18
     97e:	70 2e       	mov	r7, r16
     980:	0e 94 2a 12 	call	0x2454	; 0x2454 <vTaskSuspendAll>
     984:	28 80       	ld	r2, Y
     986:	39 80       	ldd	r3, Y+1	; 0x01
     988:	4a 80       	ldd	r4, Y+2	; 0x02
     98a:	5b 80       	ldd	r5, Y+3	; 0x03
     98c:	a5 01       	movw	r20, r10
     98e:	94 01       	movw	r18, r8
     990:	c2 01       	movw	r24, r4
     992:	b1 01       	movw	r22, r2
     994:	aa df       	rcall	.-172    	; 0x8ea <prvTestWaitCondition>
     996:	88 23       	and	r24, r24
     998:	a1 f0       	breq	.+40     	; 0x9c2 <xEventGroupWaitBits+0x70>
     99a:	66 20       	and	r6, r6
     99c:	89 f1       	breq	.+98     	; 0xa00 <xEventGroupWaitBits+0xae>
     99e:	d5 01       	movw	r26, r10
     9a0:	c4 01       	movw	r24, r8
     9a2:	80 95       	com	r24
     9a4:	90 95       	com	r25
     9a6:	a0 95       	com	r26
     9a8:	b0 95       	com	r27
     9aa:	82 21       	and	r24, r2
     9ac:	93 21       	and	r25, r3
     9ae:	a4 21       	and	r26, r4
     9b0:	b5 21       	and	r27, r5
     9b2:	88 83       	st	Y, r24
     9b4:	99 83       	std	Y+1, r25	; 0x01
     9b6:	aa 83       	std	Y+2, r26	; 0x02
     9b8:	bb 83       	std	Y+3, r27	; 0x03
     9ba:	c1 2c       	mov	r12, r1
     9bc:	d1 2c       	mov	r13, r1
     9be:	76 01       	movw	r14, r12
     9c0:	22 c0       	rjmp	.+68     	; 0xa06 <xEventGroupWaitBits+0xb4>
     9c2:	c1 14       	cp	r12, r1
     9c4:	d1 04       	cpc	r13, r1
     9c6:	e1 04       	cpc	r14, r1
     9c8:	f1 04       	cpc	r15, r1
     9ca:	e9 f0       	breq	.+58     	; 0xa06 <xEventGroupWaitBits+0xb4>
     9cc:	61 10       	cpse	r6, r1
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <xEventGroupWaitBits+0x86>
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	ba 01       	movw	r22, r20
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <xEventGroupWaitBits+0x8e>
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	71 e0       	ldi	r23, 0x01	; 1
     9e0:	71 10       	cpse	r7, r1
     9e2:	74 60       	ori	r23, 0x04	; 4
     9e4:	48 29       	or	r20, r8
     9e6:	59 29       	or	r21, r9
     9e8:	6a 29       	or	r22, r10
     9ea:	7b 29       	or	r23, r11
     9ec:	97 01       	movw	r18, r14
     9ee:	86 01       	movw	r16, r12
     9f0:	ce 01       	movw	r24, r28
     9f2:	04 96       	adiw	r24, 0x04	; 4
     9f4:	0e 94 42 15 	call	0x2a84	; 0x2a84 <vTaskPlaceOnUnorderedEventList>
     9f8:	21 2c       	mov	r2, r1
     9fa:	31 2c       	mov	r3, r1
     9fc:	21 01       	movw	r4, r2
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <xEventGroupWaitBits+0xb4>
     a00:	c1 2c       	mov	r12, r1
     a02:	d1 2c       	mov	r13, r1
     a04:	76 01       	movw	r14, r12
     a06:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>
     a0a:	cd 28       	or	r12, r13
     a0c:	ce 28       	or	r12, r14
     a0e:	cf 28       	or	r12, r15
     a10:	59 f1       	breq	.+86     	; 0xa68 <xEventGroupWaitBits+0x116>
     a12:	81 11       	cpse	r24, r1
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <xEventGroupWaitBits+0xc6>
     a16:	f2 d2       	rcall	.+1508   	; 0xffc <vPortYield>
     a18:	0e 94 04 19 	call	0x3208	; 0x3208 <uxTaskResetEventItemValue>
     a1c:	6b 01       	movw	r12, r22
     a1e:	7c 01       	movw	r14, r24
     a20:	91 fd       	sbrc	r25, 1
     a22:	1f c0       	rjmp	.+62     	; 0xa62 <xEventGroupWaitBits+0x110>
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	0f 92       	push	r0
     a2a:	c8 80       	ld	r12, Y
     a2c:	d9 80       	ldd	r13, Y+1	; 0x01
     a2e:	ea 80       	ldd	r14, Y+2	; 0x02
     a30:	fb 80       	ldd	r15, Y+3	; 0x03
     a32:	07 2d       	mov	r16, r7
     a34:	a5 01       	movw	r20, r10
     a36:	94 01       	movw	r18, r8
     a38:	c7 01       	movw	r24, r14
     a3a:	b6 01       	movw	r22, r12
     a3c:	56 df       	rcall	.-340    	; 0x8ea <prvTestWaitCondition>
     a3e:	88 23       	and	r24, r24
     a40:	71 f0       	breq	.+28     	; 0xa5e <xEventGroupWaitBits+0x10c>
     a42:	66 20       	and	r6, r6
     a44:	61 f0       	breq	.+24     	; 0xa5e <xEventGroupWaitBits+0x10c>
     a46:	80 94       	com	r8
     a48:	90 94       	com	r9
     a4a:	a0 94       	com	r10
     a4c:	b0 94       	com	r11
     a4e:	8c 20       	and	r8, r12
     a50:	9d 20       	and	r9, r13
     a52:	ae 20       	and	r10, r14
     a54:	bf 20       	and	r11, r15
     a56:	88 82       	st	Y, r8
     a58:	99 82       	std	Y+1, r9	; 0x01
     a5a:	aa 82       	std	Y+2, r10	; 0x02
     a5c:	bb 82       	std	Y+3, r11	; 0x03
     a5e:	0f 90       	pop	r0
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	16 01       	movw	r2, r12
     a64:	27 01       	movw	r4, r14
     a66:	55 24       	eor	r5, r5
     a68:	c2 01       	movw	r24, r4
     a6a:	b1 01       	movw	r22, r2
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	cf 90       	pop	r12
     a7c:	bf 90       	pop	r11
     a7e:	af 90       	pop	r10
     a80:	9f 90       	pop	r9
     a82:	8f 90       	pop	r8
     a84:	7f 90       	pop	r7
     a86:	6f 90       	pop	r6
     a88:	5f 90       	pop	r5
     a8a:	4f 90       	pop	r4
     a8c:	3f 90       	pop	r3
     a8e:	2f 90       	pop	r2
     a90:	08 95       	ret

00000a92 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     a92:	4f 92       	push	r4
     a94:	5f 92       	push	r5
     a96:	6f 92       	push	r6
     a98:	7f 92       	push	r7
     a9a:	af 92       	push	r10
     a9c:	bf 92       	push	r11
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ec 01       	movw	r28, r24
     ab0:	6a 01       	movw	r12, r20
     ab2:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ab4:	8c 01       	movw	r16, r24
     ab6:	09 5f       	subi	r16, 0xF9	; 249
     ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     aba:	0e 94 2a 12 	call	0x2454	; 0x2454 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     abe:	eb 85       	ldd	r30, Y+11	; 0x0b
     ac0:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     ac2:	88 81       	ld	r24, Y
     ac4:	99 81       	ldd	r25, Y+1	; 0x01
     ac6:	aa 81       	ldd	r26, Y+2	; 0x02
     ac8:	bb 81       	ldd	r27, Y+3	; 0x03
     aca:	c8 2a       	or	r12, r24
     acc:	d9 2a       	or	r13, r25
     ace:	ea 2a       	or	r14, r26
     ad0:	fb 2a       	or	r15, r27
     ad2:	c8 82       	st	Y, r12
     ad4:	d9 82       	std	Y+1, r13	; 0x01
     ad6:	ea 82       	std	Y+2, r14	; 0x02
     ad8:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     ada:	c1 2c       	mov	r12, r1
     adc:	d1 2c       	mov	r13, r1
     ade:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     ae0:	3d c0       	rjmp	.+122    	; 0xb5c <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     ae2:	a4 80       	ldd	r10, Z+4	; 0x04
     ae4:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	a2 81       	ldd	r26, Z+2	; 0x02
     aec:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     aee:	ac 01       	movw	r20, r24
     af0:	bd 01       	movw	r22, r26
     af2:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     af4:	b2 fd       	sbrc	r27, 2
     af6:	0e c0       	rjmp	.+28     	; 0xb14 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     af8:	48 80       	ld	r4, Y
     afa:	59 80       	ldd	r5, Y+1	; 0x01
     afc:	6a 80       	ldd	r6, Y+2	; 0x02
     afe:	7b 80       	ldd	r7, Y+3	; 0x03
     b00:	44 22       	and	r4, r20
     b02:	55 22       	and	r5, r21
     b04:	66 22       	and	r6, r22
     b06:	77 22       	and	r7, r23
     b08:	45 28       	or	r4, r5
     b0a:	46 28       	or	r4, r6
     b0c:	47 28       	or	r4, r7
     b0e:	89 f4       	brne	.+34     	; 0xb32 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	12 c0       	rjmp	.+36     	; 0xb38 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     b14:	48 80       	ld	r4, Y
     b16:	59 80       	ldd	r5, Y+1	; 0x01
     b18:	6a 80       	ldd	r6, Y+2	; 0x02
     b1a:	7b 80       	ldd	r7, Y+3	; 0x03
     b1c:	44 22       	and	r4, r20
     b1e:	55 22       	and	r5, r21
     b20:	66 22       	and	r6, r22
     b22:	77 22       	and	r7, r23
     b24:	44 15       	cp	r20, r4
     b26:	55 05       	cpc	r21, r5
     b28:	66 05       	cpc	r22, r6
     b2a:	77 05       	cpc	r23, r7
     b2c:	21 f0       	breq	.+8      	; 0xb36 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     b36:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     b38:	22 23       	and	r18, r18
     b3a:	71 f0       	breq	.+28     	; 0xb58 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     b3c:	b0 ff       	sbrs	r27, 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     b40:	c4 2a       	or	r12, r20
     b42:	d5 2a       	or	r13, r21
     b44:	e6 2a       	or	r14, r22
     b46:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     b48:	48 81       	ld	r20, Y
     b4a:	59 81       	ldd	r21, Y+1	; 0x01
     b4c:	6a 81       	ldd	r22, Y+2	; 0x02
     b4e:	7b 81       	ldd	r23, Y+3	; 0x03
     b50:	72 60       	ori	r23, 0x02	; 2
     b52:	cf 01       	movw	r24, r30
     b54:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b58:	ea 2d       	mov	r30, r10
     b5a:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     b5c:	e0 17       	cp	r30, r16
     b5e:	f1 07       	cpc	r31, r17
     b60:	09 f0       	breq	.+2      	; 0xb64 <xEventGroupSetBits+0xd2>
     b62:	bf cf       	rjmp	.-130    	; 0xae2 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     b64:	c0 94       	com	r12
     b66:	d0 94       	com	r13
     b68:	e0 94       	com	r14
     b6a:	f0 94       	com	r15
     b6c:	88 81       	ld	r24, Y
     b6e:	99 81       	ldd	r25, Y+1	; 0x01
     b70:	aa 81       	ldd	r26, Y+2	; 0x02
     b72:	bb 81       	ldd	r27, Y+3	; 0x03
     b74:	c8 22       	and	r12, r24
     b76:	d9 22       	and	r13, r25
     b78:	ea 22       	and	r14, r26
     b7a:	fb 22       	and	r15, r27
     b7c:	c8 82       	st	Y, r12
     b7e:	d9 82       	std	Y+1, r13	; 0x01
     b80:	ea 82       	std	Y+2, r14	; 0x02
     b82:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     b84:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     b88:	68 81       	ld	r22, Y
     b8a:	79 81       	ldd	r23, Y+1	; 0x01
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	9b 81       	ldd	r25, Y+3	; 0x03
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	bf 90       	pop	r11
     ba2:	af 90       	pop	r10
     ba4:	7f 90       	pop	r7
     ba6:	6f 90       	pop	r6
     ba8:	5f 90       	pop	r5
     baa:	4f 90       	pop	r4
     bac:	08 95       	ret

00000bae <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     bae:	ef e1       	ldi	r30, 0x1F	; 31
     bb0:	fa e0       	ldi	r31, 0x0A	; 10
     bb2:	a3 e2       	ldi	r26, 0x23	; 35
     bb4:	ba e0       	ldi	r27, 0x0A	; 10
     bb6:	b1 83       	std	Z+1, r27	; 0x01
     bb8:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     bba:	13 82       	std	Z+3, r1	; 0x03
     bbc:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     bbe:	eb ec       	ldi	r30, 0xCB	; 203
     bc0:	f7 e1       	ldi	r31, 0x17	; 23
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     bc2:	f0 93 1e 0a 	sts	0x0A1E, r31	; 0x800a1e <pxEnd+0x1>
     bc6:	e0 93 1d 0a 	sts	0x0A1D, r30	; 0x800a1d <pxEnd>
    pxEnd->xBlockSize = 0;
     bca:	13 82       	std	Z+3, r1	; 0x03
     bcc:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     bce:	11 82       	std	Z+1, r1	; 0x01
     bd0:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     bd2:	88 ea       	ldi	r24, 0xA8	; 168
     bd4:	9d e0       	ldi	r25, 0x0D	; 13
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	9c 93       	st	X, r25
     bda:	8e 93       	st	-X, r24
     bdc:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     bde:	ed 93       	st	X+, r30
     be0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     be2:	90 93 1a 0a 	sts	0x0A1A, r25	; 0x800a1a <xMinimumEverFreeBytesRemaining+0x1>
     be6:	80 93 19 0a 	sts	0x0A19, r24	; 0x800a19 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     bea:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <xFreeBytesRemaining+0x1>
     bee:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e8       	ldi	r25, 0x80	; 128
     bf6:	90 93 14 0a 	sts	0x0A14, r25	; 0x800a14 <xBlockAllocatedBit+0x1>
     bfa:	80 93 13 0a 	sts	0x0A13, r24	; 0x800a13 <xBlockAllocatedBit>
     bfe:	08 95       	ret

00000c00 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     c06:	af e1       	ldi	r26, 0x1F	; 31
     c08:	ba e0       	ldi	r27, 0x0A	; 10
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <prvInsertBlockIntoFreeList+0xe>
     c0c:	df 01       	movw	r26, r30
     c0e:	ed 91       	ld	r30, X+
     c10:	fc 91       	ld	r31, X
     c12:	11 97       	sbiw	r26, 0x01	; 1
     c14:	ec 17       	cp	r30, r28
     c16:	fd 07       	cpc	r31, r29
     c18:	c8 f3       	brcs	.-14     	; 0xc0c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     c1a:	12 96       	adiw	r26, 0x02	; 2
     c1c:	8d 91       	ld	r24, X+
     c1e:	9c 91       	ld	r25, X
     c20:	13 97       	sbiw	r26, 0x03	; 3
     c22:	9d 01       	movw	r18, r26
     c24:	28 0f       	add	r18, r24
     c26:	39 1f       	adc	r19, r25
     c28:	c2 17       	cp	r28, r18
     c2a:	d3 07       	cpc	r29, r19
     c2c:	49 f4       	brne	.+18     	; 0xc40 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     c2e:	2a 81       	ldd	r18, Y+2	; 0x02
     c30:	3b 81       	ldd	r19, Y+3	; 0x03
     c32:	82 0f       	add	r24, r18
     c34:	93 1f       	adc	r25, r19
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     c3e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	9e 01       	movw	r18, r28
     c46:	28 0f       	add	r18, r24
     c48:	39 1f       	adc	r19, r25
     c4a:	e2 17       	cp	r30, r18
     c4c:	f3 07       	cpc	r31, r19
     c4e:	c1 f4       	brne	.+48     	; 0xc80 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     c50:	20 91 1d 0a 	lds	r18, 0x0A1D	; 0x800a1d <pxEnd>
     c54:	30 91 1e 0a 	lds	r19, 0x0A1E	; 0x800a1e <pxEnd+0x1>
     c58:	e2 17       	cp	r30, r18
     c5a:	f3 07       	cpc	r31, r19
     c5c:	71 f0       	breq	.+28     	; 0xc7a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	33 81       	ldd	r19, Z+3	; 0x03
     c62:	82 0f       	add	r24, r18
     c64:	93 1f       	adc	r25, r19
     c66:	9b 83       	std	Y+3, r25	; 0x03
     c68:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     c6a:	ed 91       	ld	r30, X+
     c6c:	fc 91       	ld	r31, X
     c6e:	11 97       	sbiw	r26, 0x01	; 1
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	99 83       	std	Y+1, r25	; 0x01
     c76:	88 83       	st	Y, r24
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     c7a:	39 83       	std	Y+1, r19	; 0x01
     c7c:	28 83       	st	Y, r18
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     c80:	f9 83       	std	Y+1, r31	; 0x01
     c82:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     c84:	ca 17       	cp	r28, r26
     c86:	db 07       	cpc	r29, r27
     c88:	11 f0       	breq	.+4      	; 0xc8e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     c8a:	cd 93       	st	X+, r28
     c8c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     ca2:	0e 94 2a 12 	call	0x2454	; 0x2454 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     ca6:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <pxEnd>
     caa:	90 91 1e 0a 	lds	r25, 0x0A1E	; 0x800a1e <pxEnd+0x1>
     cae:	89 2b       	or	r24, r25
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     cb2:	7d df       	rcall	.-262    	; 0xbae <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     cb4:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <xBlockAllocatedBit>
     cb8:	90 91 14 0a 	lds	r25, 0x0A14	; 0x800a14 <xBlockAllocatedBit+0x1>
     cbc:	80 23       	and	r24, r16
     cbe:	91 23       	and	r25, r17
     cc0:	89 2b       	or	r24, r25
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <pvPortMalloc+0x32>
     cc4:	76 c0       	rjmp	.+236    	; 0xdb2 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     cc6:	01 15       	cp	r16, r1
     cc8:	11 05       	cpc	r17, r1
     cca:	49 f0       	breq	.+18     	; 0xcde <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     ccc:	c8 01       	movw	r24, r16
     cce:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     cd0:	08 17       	cp	r16, r24
     cd2:	19 07       	cpc	r17, r25
     cd4:	18 f0       	brcs	.+6      	; 0xcdc <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     cd6:	00 e0       	ldi	r16, 0x00	; 0
     cd8:	10 e0       	ldi	r17, 0x00	; 0
     cda:	01 c0       	rjmp	.+2      	; 0xcde <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     cdc:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     cde:	01 15       	cp	r16, r1
     ce0:	11 05       	cpc	r17, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <pvPortMalloc+0x52>
     ce4:	69 c0       	rjmp	.+210    	; 0xdb8 <pvPortMalloc+0x124>
     ce6:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <xFreeBytesRemaining>
     cea:	90 91 1c 0a 	lds	r25, 0x0A1C	; 0x800a1c <xFreeBytesRemaining+0x1>
     cee:	80 17       	cp	r24, r16
     cf0:	91 07       	cpc	r25, r17
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <pvPortMalloc+0x62>
     cf4:	64 c0       	rjmp	.+200    	; 0xdbe <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     cf6:	c0 91 1f 0a 	lds	r28, 0x0A1F	; 0x800a1f <xStart>
     cfa:	d0 91 20 0a 	lds	r29, 0x0A20	; 0x800a20 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     cfe:	ef e1       	ldi	r30, 0x1F	; 31
     d00:	fa e0       	ldi	r31, 0x0A	; 10
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     d04:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     d06:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	9b 81       	ldd	r25, Y+3	; 0x03
     d0c:	80 17       	cp	r24, r16
     d0e:	91 07       	cpc	r25, r17
     d10:	20 f4       	brcc	.+8      	; 0xd1a <pvPortMalloc+0x86>
     d12:	88 81       	ld	r24, Y
     d14:	99 81       	ldd	r25, Y+1	; 0x01
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	a9 f7       	brne	.-22     	; 0xd04 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     d1a:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <pxEnd>
     d1e:	90 91 1e 0a 	lds	r25, 0x0A1E	; 0x800a1e <pxEnd+0x1>
     d22:	c8 17       	cp	r28, r24
     d24:	d9 07       	cpc	r29, r25
     d26:	09 f4       	brne	.+2      	; 0xd2a <pvPortMalloc+0x96>
     d28:	4d c0       	rjmp	.+154    	; 0xdc4 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     d2a:	e0 80       	ld	r14, Z
     d2c:	f1 80       	ldd	r15, Z+1	; 0x01
     d2e:	84 e0       	ldi	r24, 0x04	; 4
     d30:	e8 0e       	add	r14, r24
     d32:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     d34:	88 81       	ld	r24, Y
     d36:	99 81       	ldd	r25, Y+1	; 0x01
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     d3c:	2a 81       	ldd	r18, Y+2	; 0x02
     d3e:	3b 81       	ldd	r19, Y+3	; 0x03
     d40:	20 1b       	sub	r18, r16
     d42:	31 0b       	sbc	r19, r17
     d44:	29 30       	cpi	r18, 0x09	; 9
     d46:	31 05       	cpc	r19, r1
     d48:	48 f0       	brcs	.+18     	; 0xd5c <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     d4a:	ce 01       	movw	r24, r28
     d4c:	80 0f       	add	r24, r16
     d4e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     d50:	fc 01       	movw	r30, r24
     d52:	33 83       	std	Z+3, r19	; 0x03
     d54:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     d56:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     d58:	0a 83       	std	Y+2, r16	; 0x02
     d5a:	52 df       	rcall	.-348    	; 0xc00 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     d5c:	2a 81       	ldd	r18, Y+2	; 0x02
     d5e:	3b 81       	ldd	r19, Y+3	; 0x03
     d60:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <xFreeBytesRemaining>
     d64:	90 91 1c 0a 	lds	r25, 0x0A1C	; 0x800a1c <xFreeBytesRemaining+0x1>
     d68:	82 1b       	sub	r24, r18
     d6a:	93 0b       	sbc	r25, r19
     d6c:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <xFreeBytesRemaining+0x1>
     d70:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     d74:	40 91 19 0a 	lds	r20, 0x0A19	; 0x800a19 <xMinimumEverFreeBytesRemaining>
     d78:	50 91 1a 0a 	lds	r21, 0x0A1A	; 0x800a1a <xMinimumEverFreeBytesRemaining+0x1>
     d7c:	84 17       	cp	r24, r20
     d7e:	95 07       	cpc	r25, r21
     d80:	20 f4       	brcc	.+8      	; 0xd8a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     d82:	90 93 1a 0a 	sts	0x0A1A, r25	; 0x800a1a <xMinimumEverFreeBytesRemaining+0x1>
     d86:	80 93 19 0a 	sts	0x0A19, r24	; 0x800a19 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     d8a:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <xBlockAllocatedBit>
     d8e:	90 91 14 0a 	lds	r25, 0x0A14	; 0x800a14 <xBlockAllocatedBit+0x1>
     d92:	28 2b       	or	r18, r24
     d94:	39 2b       	or	r19, r25
     d96:	3b 83       	std	Y+3, r19	; 0x03
     d98:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     d9a:	19 82       	std	Y+1, r1	; 0x01
     d9c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     d9e:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <xNumberOfSuccessfulAllocations>
     da2:	90 91 18 0a 	lds	r25, 0x0A18	; 0x800a18 <xNumberOfSuccessfulAllocations+0x1>
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	90 93 18 0a 	sts	0x0A18, r25	; 0x800a18 <xNumberOfSuccessfulAllocations+0x1>
     dac:	80 93 17 0a 	sts	0x0A17, r24	; 0x800a17 <xNumberOfSuccessfulAllocations>
     db0:	0b c0       	rjmp	.+22     	; 0xdc8 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     db2:	e1 2c       	mov	r14, r1
     db4:	f1 2c       	mov	r15, r1
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <pvPortMalloc+0x134>
     db8:	e1 2c       	mov	r14, r1
     dba:	f1 2c       	mov	r15, r1
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <pvPortMalloc+0x134>
     dbe:	e1 2c       	mov	r14, r1
     dc0:	f1 2c       	mov	r15, r1
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <pvPortMalloc+0x134>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     dc8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     dcc:	e1 14       	cp	r14, r1
     dce:	f1 04       	cpc	r15, r1
     dd0:	11 f4       	brne	.+4      	; 0xdd6 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     dd2:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     dd6:	c7 01       	movw	r24, r14
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	08 95       	ret

00000de6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	91 f1       	breq	.+100    	; 0xe56 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     df2:	ec 01       	movw	r28, r24
     df4:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     df6:	4a 81       	ldd	r20, Y+2	; 0x02
     df8:	5b 81       	ldd	r21, Y+3	; 0x03
     dfa:	20 91 13 0a 	lds	r18, 0x0A13	; 0x800a13 <xBlockAllocatedBit>
     dfe:	30 91 14 0a 	lds	r19, 0x0A14	; 0x800a14 <xBlockAllocatedBit+0x1>
     e02:	ba 01       	movw	r22, r20
     e04:	62 23       	and	r22, r18
     e06:	73 23       	and	r23, r19
     e08:	67 2b       	or	r22, r23
     e0a:	29 f1       	breq	.+74     	; 0xe56 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     e0c:	68 81       	ld	r22, Y
     e0e:	79 81       	ldd	r23, Y+1	; 0x01
     e10:	67 2b       	or	r22, r23
     e12:	09 f5       	brne	.+66     	; 0xe56 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     e14:	20 95       	com	r18
     e16:	30 95       	com	r19
     e18:	24 23       	and	r18, r20
     e1a:	35 23       	and	r19, r21
     e1c:	3b 83       	std	Y+3, r19	; 0x03
     e1e:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     e20:	0e 94 2a 12 	call	0x2454	; 0x2454 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9b 81       	ldd	r25, Y+3	; 0x03
     e28:	20 91 1b 0a 	lds	r18, 0x0A1B	; 0x800a1b <xFreeBytesRemaining>
     e2c:	30 91 1c 0a 	lds	r19, 0x0A1C	; 0x800a1c <xFreeBytesRemaining+0x1>
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <xFreeBytesRemaining+0x1>
     e38:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     e3c:	ce 01       	movw	r24, r28
     e3e:	e0 de       	rcall	.-576    	; 0xc00 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     e40:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <xNumberOfSuccessfulFrees>
     e44:	90 91 16 0a 	lds	r25, 0x0A16	; 0x800a16 <xNumberOfSuccessfulFrees+0x1>
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	90 93 16 0a 	sts	0x0A16, r25	; 0x800a16 <xNumberOfSuccessfulFrees+0x1>
     e4e:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     e52:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	08 95       	ret

00000e60 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     e60:	fc 01       	movw	r30, r24
     e62:	03 96       	adiw	r24, 0x03	; 3
     e64:	92 83       	std	Z+2, r25	; 0x02
     e66:	81 83       	std	Z+1, r24	; 0x01
     e68:	4f ef       	ldi	r20, 0xFF	; 255
     e6a:	5f ef       	ldi	r21, 0xFF	; 255
     e6c:	ba 01       	movw	r22, r20
     e6e:	43 83       	std	Z+3, r20	; 0x03
     e70:	54 83       	std	Z+4, r21	; 0x04
     e72:	65 83       	std	Z+5, r22	; 0x05
     e74:	76 83       	std	Z+6, r23	; 0x06
     e76:	90 87       	std	Z+8, r25	; 0x08
     e78:	87 83       	std	Z+7, r24	; 0x07
     e7a:	92 87       	std	Z+10, r25	; 0x0a
     e7c:	81 87       	std	Z+9, r24	; 0x09
     e7e:	10 82       	st	Z, r1
     e80:	08 95       	ret

00000e82 <vListInitialiseItem>:
     e82:	fc 01       	movw	r30, r24
     e84:	13 86       	std	Z+11, r1	; 0x0b
     e86:	12 86       	std	Z+10, r1	; 0x0a
     e88:	08 95       	ret

00000e8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e94:	08 81       	ld	r16, Y
     e96:	19 81       	ldd	r17, Y+1	; 0x01
     e98:	2a 81       	ldd	r18, Y+2	; 0x02
     e9a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     e9c:	0f 3f       	cpi	r16, 0xFF	; 255
     e9e:	4f ef       	ldi	r20, 0xFF	; 255
     ea0:	14 07       	cpc	r17, r20
     ea2:	24 07       	cpc	r18, r20
     ea4:	34 07       	cpc	r19, r20
     ea6:	21 f4       	brne	.+8      	; 0xeb0 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     ea8:	fc 01       	movw	r30, r24
     eaa:	a1 85       	ldd	r26, Z+9	; 0x09
     eac:	b2 85       	ldd	r27, Z+10	; 0x0a
     eae:	11 c0       	rjmp	.+34     	; 0xed2 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     eb0:	dc 01       	movw	r26, r24
     eb2:	13 96       	adiw	r26, 0x03	; 3
     eb4:	01 c0       	rjmp	.+2      	; 0xeb8 <vListInsert+0x2e>
     eb6:	df 01       	movw	r26, r30
     eb8:	14 96       	adiw	r26, 0x04	; 4
     eba:	ed 91       	ld	r30, X+
     ebc:	fc 91       	ld	r31, X
     ebe:	15 97       	sbiw	r26, 0x05	; 5
     ec0:	40 81       	ld	r20, Z
     ec2:	51 81       	ldd	r21, Z+1	; 0x01
     ec4:	62 81       	ldd	r22, Z+2	; 0x02
     ec6:	73 81       	ldd	r23, Z+3	; 0x03
     ec8:	04 17       	cp	r16, r20
     eca:	15 07       	cpc	r17, r21
     ecc:	26 07       	cpc	r18, r22
     ece:	37 07       	cpc	r19, r23
     ed0:	90 f7       	brcc	.-28     	; 0xeb6 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     ed2:	14 96       	adiw	r26, 0x04	; 4
     ed4:	ed 91       	ld	r30, X+
     ed6:	fc 91       	ld	r31, X
     ed8:	15 97       	sbiw	r26, 0x05	; 5
     eda:	fd 83       	std	Y+5, r31	; 0x05
     edc:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ede:	d7 83       	std	Z+7, r29	; 0x07
     ee0:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     ee2:	bf 83       	std	Y+7, r27	; 0x07
     ee4:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     ee6:	15 96       	adiw	r26, 0x05	; 5
     ee8:	dc 93       	st	X, r29
     eea:	ce 93       	st	-X, r28
     eec:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     eee:	9b 87       	std	Y+11, r25	; 0x0b
     ef0:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 81       	ld	r18, Z
     ef6:	2f 5f       	subi	r18, 0xFF	; 255
     ef8:	20 83       	st	Z, r18
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     f0a:	a2 85       	ldd	r26, Z+10	; 0x0a
     f0c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     f0e:	c4 81       	ldd	r28, Z+4	; 0x04
     f10:	d5 81       	ldd	r29, Z+5	; 0x05
     f12:	86 81       	ldd	r24, Z+6	; 0x06
     f14:	97 81       	ldd	r25, Z+7	; 0x07
     f16:	9f 83       	std	Y+7, r25	; 0x07
     f18:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f1a:	c6 81       	ldd	r28, Z+6	; 0x06
     f1c:	d7 81       	ldd	r29, Z+7	; 0x07
     f1e:	84 81       	ldd	r24, Z+4	; 0x04
     f20:	95 81       	ldd	r25, Z+5	; 0x05
     f22:	9d 83       	std	Y+5, r25	; 0x05
     f24:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     f26:	11 96       	adiw	r26, 0x01	; 1
     f28:	8d 91       	ld	r24, X+
     f2a:	9c 91       	ld	r25, X
     f2c:	12 97       	sbiw	r26, 0x02	; 2
     f2e:	e8 17       	cp	r30, r24
     f30:	f9 07       	cpc	r31, r25
     f32:	31 f4       	brne	.+12     	; 0xf40 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     f34:	86 81       	ldd	r24, Z+6	; 0x06
     f36:	97 81       	ldd	r25, Z+7	; 0x07
     f38:	12 96       	adiw	r26, 0x02	; 2
     f3a:	9c 93       	st	X, r25
     f3c:	8e 93       	st	-X, r24
     f3e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     f40:	13 86       	std	Z+11, r1	; 0x0b
     f42:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     f44:	8c 91       	ld	r24, X
     f46:	81 50       	subi	r24, 0x01	; 1
     f48:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     f4a:	8c 91       	ld	r24, X
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     f52:	a8 95       	wdr
     f54:	90 ec       	ldi	r25, 0xC0	; 192
     f56:	88 e1       	ldi	r24, 0x18	; 24
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	a8 95       	wdr
     f5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f68:	08 95       	ret

00000f6a <pxPortInitialiseStack>:
     f6a:	fc 01       	movw	r30, r24
     f6c:	60 83       	st	Z, r22
     f6e:	31 97       	sbiw	r30, 0x01	; 1
     f70:	70 83       	st	Z, r23
     f72:	31 97       	sbiw	r30, 0x01	; 1
     f74:	10 82       	st	Z, r1
     f76:	31 97       	sbiw	r30, 0x01	; 1
     f78:	10 82       	st	Z, r1
     f7a:	31 97       	sbiw	r30, 0x01	; 1
     f7c:	20 e8       	ldi	r18, 0x80	; 128
     f7e:	20 83       	st	Z, r18
     f80:	31 97       	sbiw	r30, 0x01	; 1
     f82:	10 82       	st	Z, r1
     f84:	31 97       	sbiw	r30, 0x01	; 1
     f86:	10 82       	st	Z, r1
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	10 82       	st	Z, r1
     f8c:	77 97       	sbiw	r30, 0x17	; 23
     f8e:	40 83       	st	Z, r20
     f90:	31 97       	sbiw	r30, 0x01	; 1
     f92:	50 83       	st	Z, r21
     f94:	86 97       	sbiw	r24, 0x26	; 38
     f96:	08 95       	ret

00000f98 <xPortStartScheduler>:
     f98:	dc df       	rcall	.-72     	; 0xf52 <prvSetupTimerInterrupt>
     f9a:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
     f9e:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
     fa2:	cd 91       	ld	r28, X+
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	dd 91       	ld	r29, X+
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	bf 91       	pop	r27
     fb4:	af 91       	pop	r26
     fb6:	9f 91       	pop	r25
     fb8:	8f 91       	pop	r24
     fba:	7f 91       	pop	r23
     fbc:	6f 91       	pop	r22
     fbe:	5f 91       	pop	r21
     fc0:	4f 91       	pop	r20
     fc2:	3f 91       	pop	r19
     fc4:	2f 91       	pop	r18
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	7f 90       	pop	r7
     fdc:	6f 90       	pop	r6
     fde:	5f 90       	pop	r5
     fe0:	4f 90       	pop	r4
     fe2:	3f 90       	pop	r3
     fe4:	2f 90       	pop	r2
     fe6:	1f 90       	pop	r1
     fe8:	0f 90       	pop	r0
     fea:	0c be       	out	0x3c, r0	; 60
     fec:	0f 90       	pop	r0
     fee:	0b be       	out	0x3b, r0	; 59
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	08 95       	ret
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	08 95       	ret

00000ffc <vPortYield>:
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	0f 92       	push	r0
    1004:	0b b6       	in	r0, 0x3b	; 59
    1006:	0f 92       	push	r0
    1008:	0c b6       	in	r0, 0x3c	; 60
    100a:	0f 92       	push	r0
    100c:	1f 92       	push	r1
    100e:	11 24       	eor	r1, r1
    1010:	2f 92       	push	r2
    1012:	3f 92       	push	r3
    1014:	4f 92       	push	r4
    1016:	5f 92       	push	r5
    1018:	6f 92       	push	r6
    101a:	7f 92       	push	r7
    101c:	8f 92       	push	r8
    101e:	9f 92       	push	r9
    1020:	af 92       	push	r10
    1022:	bf 92       	push	r11
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
    104c:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    1050:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    1054:	0d b6       	in	r0, 0x3d	; 61
    1056:	0d 92       	st	X+, r0
    1058:	0e b6       	in	r0, 0x3e	; 62
    105a:	0d 92       	st	X+, r0
    105c:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskSwitchContext>
    1060:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    1064:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    1068:	cd 91       	ld	r28, X+
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	dd 91       	ld	r29, X+
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	7f 91       	pop	r23
    1082:	6f 91       	pop	r22
    1084:	5f 91       	pop	r21
    1086:	4f 91       	pop	r20
    1088:	3f 91       	pop	r19
    108a:	2f 91       	pop	r18
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	bf 90       	pop	r11
    109a:	af 90       	pop	r10
    109c:	9f 90       	pop	r9
    109e:	8f 90       	pop	r8
    10a0:	7f 90       	pop	r7
    10a2:	6f 90       	pop	r6
    10a4:	5f 90       	pop	r5
    10a6:	4f 90       	pop	r4
    10a8:	3f 90       	pop	r3
    10aa:	2f 90       	pop	r2
    10ac:	1f 90       	pop	r1
    10ae:	0f 90       	pop	r0
    10b0:	0c be       	out	0x3c, r0	; 60
    10b2:	0f 90       	pop	r0
    10b4:	0b be       	out	0x3b, r0	; 59
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	08 95       	ret

000010be <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	0f 92       	push	r0
    10c6:	0b b6       	in	r0, 0x3b	; 59
    10c8:	0f 92       	push	r0
    10ca:	0c b6       	in	r0, 0x3c	; 60
    10cc:	0f 92       	push	r0
    10ce:	1f 92       	push	r1
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 92       	push	r2
    10d4:	3f 92       	push	r3
    10d6:	4f 92       	push	r4
    10d8:	5f 92       	push	r5
    10da:	6f 92       	push	r6
    10dc:	7f 92       	push	r7
    10de:	8f 92       	push	r8
    10e0:	9f 92       	push	r9
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
    110e:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    1112:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    1116:	0d b6       	in	r0, 0x3d	; 61
    1118:	0d 92       	st	X+, r0
    111a:	0e b6       	in	r0, 0x3e	; 62
    111c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    111e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1120:	0e 94 3e 12 	call	0x247c	; 0x247c <xTaskIncrementTick>
    1124:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1126:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    112a:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    112e:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    1132:	cd 91       	ld	r28, X+
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	dd 91       	ld	r29, X+
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	bf 91       	pop	r27
    1144:	af 91       	pop	r26
    1146:	9f 91       	pop	r25
    1148:	8f 91       	pop	r24
    114a:	7f 91       	pop	r23
    114c:	6f 91       	pop	r22
    114e:	5f 91       	pop	r21
    1150:	4f 91       	pop	r20
    1152:	3f 91       	pop	r19
    1154:	2f 91       	pop	r18
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	af 90       	pop	r10
    1166:	9f 90       	pop	r9
    1168:	8f 90       	pop	r8
    116a:	7f 90       	pop	r7
    116c:	6f 90       	pop	r6
    116e:	5f 90       	pop	r5
    1170:	4f 90       	pop	r4
    1172:	3f 90       	pop	r3
    1174:	2f 90       	pop	r2
    1176:	1f 90       	pop	r1
    1178:	0f 90       	pop	r0
    117a:	0c be       	out	0x3c, r0	; 60
    117c:	0f 90       	pop	r0
    117e:	0b be       	out	0x3b, r0	; 59
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1186:	08 95       	ret

00001188 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1188:	9a df       	rcall	.-204    	; 0x10be <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    118a:	18 95       	reti

0000118c <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    118c:	dc 01       	movw	r26, r24
    118e:	53 96       	adiw	r26, 0x13	; 19
    1190:	2c 91       	ld	r18, X
    1192:	53 97       	sbiw	r26, 0x13	; 19
    1194:	22 23       	and	r18, r18
    1196:	41 f0       	breq	.+16     	; 0x11a8 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1198:	5a 96       	adiw	r26, 0x1a	; 26
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	5b 97       	sbiw	r26, 0x1b	; 27
    11a0:	90 81       	ld	r25, Z
    11a2:	8a e0       	ldi	r24, 0x0A	; 10
    11a4:	89 1b       	sub	r24, r25
    11a6:	08 95       	ret
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret

000011ac <prvIsQueueEmpty>:
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	0f 92       	push	r0
    11b2:	fc 01       	movw	r30, r24
    11b4:	86 8d       	ldd	r24, Z+30	; 0x1e
    11b6:	81 11       	cpse	r24, r1
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <prvIsQueueEmpty+0x12>
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <prvIsQueueEmpty+0x14>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	08 95       	ret

000011c6 <prvIsQueueFull>:
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	0f 92       	push	r0
    11cc:	fc 01       	movw	r30, r24
    11ce:	26 8d       	ldd	r18, Z+30	; 0x1e
    11d0:	87 8d       	ldd	r24, Z+31	; 0x1f
    11d2:	28 13       	cpse	r18, r24
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <prvIsQueueFull+0x14>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <prvIsQueueFull+0x16>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	08 95       	ret

000011e2 <prvCopyDataToQueue>:
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	ec 01       	movw	r28, r24
    11ec:	04 2f       	mov	r16, r20
    11ee:	1e 8d       	ldd	r17, Y+30	; 0x1e
    11f0:	48 a1       	ldd	r20, Y+32	; 0x20
    11f2:	41 11       	cpse	r20, r1
    11f4:	0c c0       	rjmp	.+24     	; 0x120e <prvCopyDataToQueue+0x2c>
    11f6:	88 81       	ld	r24, Y
    11f8:	99 81       	ldd	r25, Y+1	; 0x01
    11fa:	89 2b       	or	r24, r25
    11fc:	09 f0       	breq	.+2      	; 0x1200 <prvCopyDataToQueue+0x1e>
    11fe:	42 c0       	rjmp	.+132    	; 0x1284 <prvCopyDataToQueue+0xa2>
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	9d 81       	ldd	r25, Y+5	; 0x05
    1204:	0e 94 42 18 	call	0x3084	; 0x3084 <xTaskPriorityDisinherit>
    1208:	1d 82       	std	Y+5, r1	; 0x05
    120a:	1c 82       	std	Y+4, r1	; 0x04
    120c:	42 c0       	rjmp	.+132    	; 0x1292 <prvCopyDataToQueue+0xb0>
    120e:	01 11       	cpse	r16, r1
    1210:	17 c0       	rjmp	.+46     	; 0x1240 <prvCopyDataToQueue+0x5e>
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	0e 94 99 39 	call	0x7332	; 0x7332 <memcpy>
    121c:	28 a1       	ldd	r18, Y+32	; 0x20
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	9b 81       	ldd	r25, Y+3	; 0x03
    1222:	82 0f       	add	r24, r18
    1224:	91 1d       	adc	r25, r1
    1226:	9b 83       	std	Y+3, r25	; 0x03
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	82 17       	cp	r24, r18
    1230:	93 07       	cpc	r25, r19
    1232:	50 f1       	brcs	.+84     	; 0x1288 <prvCopyDataToQueue+0xa6>
    1234:	88 81       	ld	r24, Y
    1236:	99 81       	ldd	r25, Y+1	; 0x01
    1238:	9b 83       	std	Y+3, r25	; 0x03
    123a:	8a 83       	std	Y+2, r24	; 0x02
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	29 c0       	rjmp	.+82     	; 0x1292 <prvCopyDataToQueue+0xb0>
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	8e 81       	ldd	r24, Y+6	; 0x06
    1244:	9f 81       	ldd	r25, Y+7	; 0x07
    1246:	0e 94 99 39 	call	0x7332	; 0x7332 <memcpy>
    124a:	88 a1       	ldd	r24, Y+32	; 0x20
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	91 95       	neg	r25
    1250:	81 95       	neg	r24
    1252:	91 09       	sbc	r25, r1
    1254:	2e 81       	ldd	r18, Y+6	; 0x06
    1256:	3f 81       	ldd	r19, Y+7	; 0x07
    1258:	28 0f       	add	r18, r24
    125a:	39 1f       	adc	r19, r25
    125c:	3f 83       	std	Y+7, r19	; 0x07
    125e:	2e 83       	std	Y+6, r18	; 0x06
    1260:	48 81       	ld	r20, Y
    1262:	59 81       	ldd	r21, Y+1	; 0x01
    1264:	24 17       	cp	r18, r20
    1266:	35 07       	cpc	r19, r21
    1268:	30 f4       	brcc	.+12     	; 0x1276 <prvCopyDataToQueue+0x94>
    126a:	2c 81       	ldd	r18, Y+4	; 0x04
    126c:	3d 81       	ldd	r19, Y+5	; 0x05
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	9f 83       	std	Y+7, r25	; 0x07
    1274:	8e 83       	std	Y+6, r24	; 0x06
    1276:	02 30       	cpi	r16, 0x02	; 2
    1278:	49 f4       	brne	.+18     	; 0x128c <prvCopyDataToQueue+0xaa>
    127a:	11 23       	and	r17, r17
    127c:	49 f0       	breq	.+18     	; 0x1290 <prvCopyDataToQueue+0xae>
    127e:	11 50       	subi	r17, 0x01	; 1
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <prvCopyDataToQueue+0xb0>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <prvCopyDataToQueue+0xb0>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <prvCopyDataToQueue+0xb0>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <prvCopyDataToQueue+0xb0>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	1f 5f       	subi	r17, 0xFF	; 255
    1294:	1e 8f       	std	Y+30, r17	; 0x1e
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	08 95       	ret

000012a0 <prvCopyDataFromQueue>:
    12a0:	fc 01       	movw	r30, r24
    12a2:	40 a1       	ldd	r20, Z+32	; 0x20
    12a4:	44 23       	and	r20, r20
    12a6:	a9 f0       	breq	.+42     	; 0x12d2 <prvCopyDataFromQueue+0x32>
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	26 81       	ldd	r18, Z+6	; 0x06
    12ac:	37 81       	ldd	r19, Z+7	; 0x07
    12ae:	24 0f       	add	r18, r20
    12b0:	35 1f       	adc	r19, r21
    12b2:	37 83       	std	Z+7, r19	; 0x07
    12b4:	26 83       	std	Z+6, r18	; 0x06
    12b6:	84 81       	ldd	r24, Z+4	; 0x04
    12b8:	95 81       	ldd	r25, Z+5	; 0x05
    12ba:	28 17       	cp	r18, r24
    12bc:	39 07       	cpc	r19, r25
    12be:	20 f0       	brcs	.+8      	; 0x12c8 <prvCopyDataFromQueue+0x28>
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	97 83       	std	Z+7, r25	; 0x07
    12c6:	86 83       	std	Z+6, r24	; 0x06
    12c8:	cb 01       	movw	r24, r22
    12ca:	66 81       	ldd	r22, Z+6	; 0x06
    12cc:	77 81       	ldd	r23, Z+7	; 0x07
    12ce:	0c 94 99 39 	jmp	0x7332	; 0x7332 <memcpy>
    12d2:	08 95       	ret

000012d4 <prvUnlockQueue>:
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	0f 92       	push	r0
    12e2:	1a a1       	ldd	r17, Y+34	; 0x22
    12e4:	0b c0       	rjmp	.+22     	; 0x12fc <prvUnlockQueue+0x28>
    12e6:	8b 89       	ldd	r24, Y+19	; 0x13
    12e8:	88 23       	and	r24, r24
    12ea:	51 f0       	breq	.+20     	; 0x1300 <prvUnlockQueue+0x2c>
    12ec:	ce 01       	movw	r24, r28
    12ee:	43 96       	adiw	r24, 0x13	; 19
    12f0:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <xTaskRemoveFromEventList>
    12f4:	81 11       	cpse	r24, r1
    12f6:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <vTaskMissedYield>
    12fa:	11 50       	subi	r17, 0x01	; 1
    12fc:	11 16       	cp	r1, r17
    12fe:	9c f3       	brlt	.-26     	; 0x12e6 <prvUnlockQueue+0x12>
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	8a a3       	std	Y+34, r24	; 0x22
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	0f 92       	push	r0
    130e:	19 a1       	ldd	r17, Y+33	; 0x21
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <prvUnlockQueue+0x54>
    1312:	88 85       	ldd	r24, Y+8	; 0x08
    1314:	88 23       	and	r24, r24
    1316:	51 f0       	breq	.+20     	; 0x132c <prvUnlockQueue+0x58>
    1318:	ce 01       	movw	r24, r28
    131a:	08 96       	adiw	r24, 0x08	; 8
    131c:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <xTaskRemoveFromEventList>
    1320:	81 11       	cpse	r24, r1
    1322:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <vTaskMissedYield>
    1326:	11 50       	subi	r17, 0x01	; 1
    1328:	11 16       	cp	r1, r17
    132a:	9c f3       	brlt	.-26     	; 0x1312 <prvUnlockQueue+0x3e>
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	89 a3       	std	Y+33, r24	; 0x21
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	08 95       	ret

0000133c <xQueueGenericReset>:
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	ec 01       	movw	r28, r24
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	0f 92       	push	r0
    1348:	e8 81       	ld	r30, Y
    134a:	f9 81       	ldd	r31, Y+1	; 0x01
    134c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    134e:	28 a1       	ldd	r18, Y+32	; 0x20
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	82 9f       	mul	r24, r18
    1356:	a0 01       	movw	r20, r0
    1358:	83 9f       	mul	r24, r19
    135a:	50 0d       	add	r21, r0
    135c:	92 9f       	mul	r25, r18
    135e:	50 0d       	add	r21, r0
    1360:	11 24       	eor	r1, r1
    1362:	4e 0f       	add	r20, r30
    1364:	5f 1f       	adc	r21, r31
    1366:	5d 83       	std	Y+5, r21	; 0x05
    1368:	4c 83       	std	Y+4, r20	; 0x04
    136a:	1e 8e       	std	Y+30, r1	; 0x1e
    136c:	fb 83       	std	Y+3, r31	; 0x03
    136e:	ea 83       	std	Y+2, r30	; 0x02
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	28 9f       	mul	r18, r24
    1374:	a0 01       	movw	r20, r0
    1376:	29 9f       	mul	r18, r25
    1378:	50 0d       	add	r21, r0
    137a:	38 9f       	mul	r19, r24
    137c:	50 0d       	add	r21, r0
    137e:	11 24       	eor	r1, r1
    1380:	cf 01       	movw	r24, r30
    1382:	84 0f       	add	r24, r20
    1384:	95 1f       	adc	r25, r21
    1386:	9f 83       	std	Y+7, r25	; 0x07
    1388:	8e 83       	std	Y+6, r24	; 0x06
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	89 a3       	std	Y+33, r24	; 0x21
    138e:	8a a3       	std	Y+34, r24	; 0x22
    1390:	61 11       	cpse	r22, r1
    1392:	0b c0       	rjmp	.+22     	; 0x13aa <xQueueGenericReset+0x6e>
    1394:	88 85       	ldd	r24, Y+8	; 0x08
    1396:	88 23       	and	r24, r24
    1398:	71 f0       	breq	.+28     	; 0x13b6 <xQueueGenericReset+0x7a>
    139a:	ce 01       	movw	r24, r28
    139c:	08 96       	adiw	r24, 0x08	; 8
    139e:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <xTaskRemoveFromEventList>
    13a2:	88 23       	and	r24, r24
    13a4:	41 f0       	breq	.+16     	; 0x13b6 <xQueueGenericReset+0x7a>
    13a6:	2a de       	rcall	.-940    	; 0xffc <vPortYield>
    13a8:	06 c0       	rjmp	.+12     	; 0x13b6 <xQueueGenericReset+0x7a>
    13aa:	ce 01       	movw	r24, r28
    13ac:	08 96       	adiw	r24, 0x08	; 8
    13ae:	58 dd       	rcall	.-1360   	; 0xe60 <vListInitialise>
    13b0:	ce 01       	movw	r24, r28
    13b2:	43 96       	adiw	r24, 0x13	; 19
    13b4:	55 dd       	rcall	.-1366   	; 0xe60 <vListInitialise>
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <prvInitialiseNewQueue>:
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	f8 01       	movw	r30, r16
    13c8:	61 11       	cpse	r22, r1
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <prvInitialiseNewQueue+0x10>
    13cc:	11 83       	std	Z+1, r17	; 0x01
    13ce:	00 83       	st	Z, r16
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <prvInitialiseNewQueue+0x14>
    13d2:	51 83       	std	Z+1, r21	; 0x01
    13d4:	40 83       	st	Z, r20
    13d6:	87 8f       	std	Z+31, r24	; 0x1f
    13d8:	60 a3       	std	Z+32, r22	; 0x20
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	cf 01       	movw	r24, r30
    13de:	ae df       	rcall	.-164    	; 0x133c <xQueueGenericReset>
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	08 95       	ret

000013e6 <xQueueGenericCreate>:
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	f8 2e       	mov	r15, r24
    13f6:	e6 2e       	mov	r14, r22
    13f8:	d4 2e       	mov	r13, r20
    13fa:	86 9f       	mul	r24, r22
    13fc:	c0 01       	movw	r24, r0
    13fe:	11 24       	eor	r1, r1
    1400:	83 96       	adiw	r24, 0x23	; 35
    1402:	48 dc       	rcall	.-1904   	; 0xc94 <pvPortMalloc>
    1404:	ec 01       	movw	r28, r24
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	41 f0       	breq	.+16     	; 0x141a <xQueueGenericCreate+0x34>
    140a:	8c 01       	movw	r16, r24
    140c:	2d 2d       	mov	r18, r13
    140e:	ac 01       	movw	r20, r24
    1410:	4d 5d       	subi	r20, 0xDD	; 221
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	6e 2d       	mov	r22, r14
    1416:	8f 2d       	mov	r24, r15
    1418:	d4 df       	rcall	.-88     	; 0x13c2 <prvInitialiseNewQueue>
    141a:	ce 01       	movw	r24, r28
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14
    1428:	df 90       	pop	r13
    142a:	08 95       	ret

0000142c <xQueueGenericSend>:
    142c:	cf 92       	push	r12
    142e:	df 92       	push	r13
    1430:	ef 92       	push	r14
    1432:	ff 92       	push	r15
    1434:	0f 93       	push	r16
    1436:	1f 93       	push	r17
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	29 97       	sbiw	r28, 0x09	; 9
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	7c 01       	movw	r14, r24
    144e:	6b 01       	movw	r12, r22
    1450:	2e 83       	std	Y+6, r18	; 0x06
    1452:	3f 83       	std	Y+7, r19	; 0x07
    1454:	48 87       	std	Y+8, r20	; 0x08
    1456:	59 87       	std	Y+9, r21	; 0x09
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	0f 92       	push	r0
    1460:	f7 01       	movw	r30, r14
    1462:	96 8d       	ldd	r25, Z+30	; 0x1e
    1464:	87 8d       	ldd	r24, Z+31	; 0x1f
    1466:	98 17       	cp	r25, r24
    1468:	10 f0       	brcs	.+4      	; 0x146e <xQueueGenericSend+0x42>
    146a:	02 30       	cpi	r16, 0x02	; 2
    146c:	b1 f4       	brne	.+44     	; 0x149a <xQueueGenericSend+0x6e>
    146e:	40 2f       	mov	r20, r16
    1470:	b6 01       	movw	r22, r12
    1472:	c7 01       	movw	r24, r14
    1474:	b6 de       	rcall	.-660    	; 0x11e2 <prvCopyDataToQueue>
    1476:	f7 01       	movw	r30, r14
    1478:	93 89       	ldd	r25, Z+19	; 0x13
    147a:	99 23       	and	r25, r25
    147c:	41 f0       	breq	.+16     	; 0x148e <xQueueGenericSend+0x62>
    147e:	c7 01       	movw	r24, r14
    1480:	43 96       	adiw	r24, 0x13	; 19
    1482:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <xTaskRemoveFromEventList>
    1486:	88 23       	and	r24, r24
    1488:	21 f0       	breq	.+8      	; 0x1492 <xQueueGenericSend+0x66>
    148a:	b8 dd       	rcall	.-1168   	; 0xffc <vPortYield>
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <xQueueGenericSend+0x66>
    148e:	81 11       	cpse	r24, r1
    1490:	b5 dd       	rcall	.-1174   	; 0xffc <vPortYield>
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	4c c0       	rjmp	.+152    	; 0x1532 <xQueueGenericSend+0x106>
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	a8 85       	ldd	r26, Y+8	; 0x08
    14a0:	b9 85       	ldd	r27, Y+9	; 0x09
    14a2:	89 2b       	or	r24, r25
    14a4:	8a 2b       	or	r24, r26
    14a6:	8b 2b       	or	r24, r27
    14a8:	21 f4       	brne	.+8      	; 0x14b2 <xQueueGenericSend+0x86>
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	40 c0       	rjmp	.+128    	; 0x1532 <xQueueGenericSend+0x106>
    14b2:	11 11       	cpse	r17, r1
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <xQueueGenericSend+0x94>
    14b6:	ce 01       	movw	r24, r28
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <vTaskInternalSetTimeOutState>
    14be:	11 e0       	ldi	r17, 0x01	; 1
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	c7 d7       	rcall	.+3982   	; 0x2454 <vTaskSuspendAll>
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	0f 92       	push	r0
    14cc:	f7 01       	movw	r30, r14
    14ce:	81 a1       	ldd	r24, Z+33	; 0x21
    14d0:	8f 3f       	cpi	r24, 0xFF	; 255
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <xQueueGenericSend+0xaa>
    14d4:	11 a2       	std	Z+33, r1	; 0x21
    14d6:	f7 01       	movw	r30, r14
    14d8:	82 a1       	ldd	r24, Z+34	; 0x22
    14da:	8f 3f       	cpi	r24, 0xFF	; 255
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <xQueueGenericSend+0xb4>
    14de:	12 a2       	std	Z+34, r1	; 0x22
    14e0:	0f 90       	pop	r0
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	be 01       	movw	r22, r28
    14e6:	6a 5f       	subi	r22, 0xFA	; 250
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <xTaskCheckForTimeOut>
    14f2:	81 11       	cpse	r24, r1
    14f4:	19 c0       	rjmp	.+50     	; 0x1528 <xQueueGenericSend+0xfc>
    14f6:	c7 01       	movw	r24, r14
    14f8:	66 de       	rcall	.-820    	; 0x11c6 <prvIsQueueFull>
    14fa:	88 23       	and	r24, r24
    14fc:	81 f0       	breq	.+32     	; 0x151e <xQueueGenericSend+0xf2>
    14fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1500:	5f 81       	ldd	r21, Y+7	; 0x07
    1502:	68 85       	ldd	r22, Y+8	; 0x08
    1504:	79 85       	ldd	r23, Y+9	; 0x09
    1506:	c7 01       	movw	r24, r14
    1508:	08 96       	adiw	r24, 0x08	; 8
    150a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <vTaskPlaceOnEventList>
    150e:	c7 01       	movw	r24, r14
    1510:	e1 de       	rcall	.-574    	; 0x12d4 <prvUnlockQueue>
    1512:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>
    1516:	81 11       	cpse	r24, r1
    1518:	a0 cf       	rjmp	.-192    	; 0x145a <xQueueGenericSend+0x2e>
    151a:	70 dd       	rcall	.-1312   	; 0xffc <vPortYield>
    151c:	9e cf       	rjmp	.-196    	; 0x145a <xQueueGenericSend+0x2e>
    151e:	c7 01       	movw	r24, r14
    1520:	d9 de       	rcall	.-590    	; 0x12d4 <prvUnlockQueue>
    1522:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>
    1526:	99 cf       	rjmp	.-206    	; 0x145a <xQueueGenericSend+0x2e>
    1528:	c7 01       	movw	r24, r14
    152a:	d4 de       	rcall	.-600    	; 0x12d4 <prvUnlockQueue>
    152c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	29 96       	adiw	r28, 0x09	; 9
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	08 95       	ret

00001550 <prvInitialiseMutex>:
    1550:	0f 93       	push	r16
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f0       	breq	.+26     	; 0x1570 <prvInitialiseMutex+0x20>
    1556:	fc 01       	movw	r30, r24
    1558:	15 82       	std	Z+5, r1	; 0x05
    155a:	14 82       	std	Z+4, r1	; 0x04
    155c:	11 82       	std	Z+1, r1	; 0x01
    155e:	10 82       	st	Z, r1
    1560:	16 82       	std	Z+6, r1	; 0x06
    1562:	00 e0       	ldi	r16, 0x00	; 0
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	a9 01       	movw	r20, r18
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	5e df       	rcall	.-324    	; 0x142c <xQueueGenericSend>
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret

00001574 <xQueueCreateMutex>:
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	48 2f       	mov	r20, r24
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	33 df       	rcall	.-410    	; 0x13e6 <xQueueGenericCreate>
    1580:	ec 01       	movw	r28, r24
    1582:	e6 df       	rcall	.-52     	; 0x1550 <prvInitialiseMutex>
    1584:	ce 01       	movw	r24, r28
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <xQueueGenericSendFromISR>:
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	8a 01       	movw	r16, r20
    159a:	fc 01       	movw	r30, r24
    159c:	56 8d       	ldd	r21, Z+30	; 0x1e
    159e:	37 8d       	ldd	r19, Z+31	; 0x1f
    15a0:	53 17       	cp	r21, r19
    15a2:	10 f0       	brcs	.+4      	; 0x15a8 <xQueueGenericSendFromISR+0x1c>
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	f9 f4       	brne	.+62     	; 0x15e6 <xQueueGenericSendFromISR+0x5a>
    15a8:	42 2f       	mov	r20, r18
    15aa:	78 01       	movw	r14, r16
    15ac:	ec 01       	movw	r28, r24
    15ae:	1a a1       	ldd	r17, Y+34	; 0x22
    15b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15b2:	ce 01       	movw	r24, r28
    15b4:	16 de       	rcall	.-980    	; 0x11e2 <prvCopyDataToQueue>
    15b6:	1f 3f       	cpi	r17, 0xFF	; 255
    15b8:	81 f4       	brne	.+32     	; 0x15da <xQueueGenericSendFromISR+0x4e>
    15ba:	8b 89       	ldd	r24, Y+19	; 0x13
    15bc:	88 23       	and	r24, r24
    15be:	a9 f0       	breq	.+42     	; 0x15ea <xQueueGenericSendFromISR+0x5e>
    15c0:	ce 01       	movw	r24, r28
    15c2:	43 96       	adiw	r24, 0x13	; 19
    15c4:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <xTaskRemoveFromEventList>
    15c8:	88 23       	and	r24, r24
    15ca:	89 f0       	breq	.+34     	; 0x15ee <xQueueGenericSendFromISR+0x62>
    15cc:	e1 14       	cp	r14, r1
    15ce:	f1 04       	cpc	r15, r1
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <xQueueGenericSendFromISR+0x66>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	f7 01       	movw	r30, r14
    15d6:	80 83       	st	Z, r24
    15d8:	0d c0       	rjmp	.+26     	; 0x15f4 <xQueueGenericSendFromISR+0x68>
    15da:	ff 24       	eor	r15, r15
    15dc:	f3 94       	inc	r15
    15de:	f1 0e       	add	r15, r17
    15e0:	fa a2       	std	Y+34, r15	; 0x22
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <xQueueGenericSendFromISR+0x68>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <xQueueGenericSendFromISR+0x68>
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <xQueueGenericSendFromISR+0x68>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <xQueueGenericSendFromISR+0x68>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <xQueueReceive>:
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	29 97       	sbiw	r28, 0x09	; 9
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	8c 01       	movw	r16, r24
    1624:	6b 01       	movw	r12, r22
    1626:	2e 83       	std	Y+6, r18	; 0x06
    1628:	3f 83       	std	Y+7, r19	; 0x07
    162a:	48 87       	std	Y+8, r20	; 0x08
    162c:	59 87       	std	Y+9, r21	; 0x09
    162e:	e1 2c       	mov	r14, r1
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	0f 92       	push	r0
    1636:	f8 01       	movw	r30, r16
    1638:	f6 8c       	ldd	r15, Z+30	; 0x1e
    163a:	ff 20       	and	r15, r15
    163c:	99 f0       	breq	.+38     	; 0x1664 <xQueueReceive+0x62>
    163e:	b6 01       	movw	r22, r12
    1640:	c8 01       	movw	r24, r16
    1642:	2e de       	rcall	.-932    	; 0x12a0 <prvCopyDataFromQueue>
    1644:	fa 94       	dec	r15
    1646:	f8 01       	movw	r30, r16
    1648:	f6 8e       	std	Z+30, r15	; 0x1e
    164a:	80 85       	ldd	r24, Z+8	; 0x08
    164c:	88 23       	and	r24, r24
    164e:	31 f0       	breq	.+12     	; 0x165c <xQueueReceive+0x5a>
    1650:	c8 01       	movw	r24, r16
    1652:	08 96       	adiw	r24, 0x08	; 8
    1654:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <xTaskRemoveFromEventList>
    1658:	81 11       	cpse	r24, r1
    165a:	d0 dc       	rcall	.-1632   	; 0xffc <vPortYield>
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	4f c0       	rjmp	.+158    	; 0x1702 <xQueueReceive+0x100>
    1664:	8e 81       	ldd	r24, Y+6	; 0x06
    1666:	9f 81       	ldd	r25, Y+7	; 0x07
    1668:	a8 85       	ldd	r26, Y+8	; 0x08
    166a:	b9 85       	ldd	r27, Y+9	; 0x09
    166c:	89 2b       	or	r24, r25
    166e:	8a 2b       	or	r24, r26
    1670:	8b 2b       	or	r24, r27
    1672:	21 f4       	brne	.+8      	; 0x167c <xQueueReceive+0x7a>
    1674:	0f 90       	pop	r0
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	43 c0       	rjmp	.+134    	; 0x1702 <xQueueReceive+0x100>
    167c:	e1 10       	cpse	r14, r1
    167e:	06 c0       	rjmp	.+12     	; 0x168c <xQueueReceive+0x8a>
    1680:	ce 01       	movw	r24, r28
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <vTaskInternalSetTimeOutState>
    1688:	ee 24       	eor	r14, r14
    168a:	e3 94       	inc	r14
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	e1 d6       	rcall	.+3522   	; 0x2454 <vTaskSuspendAll>
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	0f 92       	push	r0
    1698:	f8 01       	movw	r30, r16
    169a:	81 a1       	ldd	r24, Z+33	; 0x21
    169c:	8f 3f       	cpi	r24, 0xFF	; 255
    169e:	09 f4       	brne	.+2      	; 0x16a2 <xQueueReceive+0xa0>
    16a0:	11 a2       	std	Z+33, r1	; 0x21
    16a2:	f8 01       	movw	r30, r16
    16a4:	82 a1       	ldd	r24, Z+34	; 0x22
    16a6:	8f 3f       	cpi	r24, 0xFF	; 255
    16a8:	09 f4       	brne	.+2      	; 0x16ac <xQueueReceive+0xaa>
    16aa:	12 a2       	std	Z+34, r1	; 0x22
    16ac:	0f 90       	pop	r0
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	be 01       	movw	r22, r28
    16b2:	6a 5f       	subi	r22, 0xFA	; 250
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	ce 01       	movw	r24, r28
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <xTaskCheckForTimeOut>
    16be:	81 11       	cpse	r24, r1
    16c0:	17 c0       	rjmp	.+46     	; 0x16f0 <xQueueReceive+0xee>
    16c2:	c8 01       	movw	r24, r16
    16c4:	73 dd       	rcall	.-1306   	; 0x11ac <prvIsQueueEmpty>
    16c6:	88 23       	and	r24, r24
    16c8:	79 f0       	breq	.+30     	; 0x16e8 <xQueueReceive+0xe6>
    16ca:	4e 81       	ldd	r20, Y+6	; 0x06
    16cc:	5f 81       	ldd	r21, Y+7	; 0x07
    16ce:	68 85       	ldd	r22, Y+8	; 0x08
    16d0:	79 85       	ldd	r23, Y+9	; 0x09
    16d2:	c8 01       	movw	r24, r16
    16d4:	43 96       	adiw	r24, 0x13	; 19
    16d6:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <vTaskPlaceOnEventList>
    16da:	c8 01       	movw	r24, r16
    16dc:	fb dd       	rcall	.-1034   	; 0x12d4 <prvUnlockQueue>
    16de:	fa d7       	rcall	.+4084   	; 0x26d4 <xTaskResumeAll>
    16e0:	81 11       	cpse	r24, r1
    16e2:	a6 cf       	rjmp	.-180    	; 0x1630 <xQueueReceive+0x2e>
    16e4:	8b dc       	rcall	.-1770   	; 0xffc <vPortYield>
    16e6:	a4 cf       	rjmp	.-184    	; 0x1630 <xQueueReceive+0x2e>
    16e8:	c8 01       	movw	r24, r16
    16ea:	f4 dd       	rcall	.-1048   	; 0x12d4 <prvUnlockQueue>
    16ec:	f3 d7       	rcall	.+4070   	; 0x26d4 <xTaskResumeAll>
    16ee:	a0 cf       	rjmp	.-192    	; 0x1630 <xQueueReceive+0x2e>
    16f0:	c8 01       	movw	r24, r16
    16f2:	f0 dd       	rcall	.-1056   	; 0x12d4 <prvUnlockQueue>
    16f4:	ef d7       	rcall	.+4062   	; 0x26d4 <xTaskResumeAll>
    16f6:	c8 01       	movw	r24, r16
    16f8:	59 dd       	rcall	.-1358   	; 0x11ac <prvIsQueueEmpty>
    16fa:	88 23       	and	r24, r24
    16fc:	09 f4       	brne	.+2      	; 0x1700 <xQueueReceive+0xfe>
    16fe:	98 cf       	rjmp	.-208    	; 0x1630 <xQueueReceive+0x2e>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	29 96       	adiw	r28, 0x09	; 9
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	08 95       	ret

00001720 <xQueueSemaphoreTake>:
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	29 97       	sbiw	r28, 0x09	; 9
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	8c 01       	movw	r16, r24
    173e:	4e 83       	std	Y+6, r20	; 0x06
    1740:	5f 83       	std	Y+7, r21	; 0x07
    1742:	68 87       	std	Y+8, r22	; 0x08
    1744:	79 87       	std	Y+9, r23	; 0x09
    1746:	e1 2c       	mov	r14, r1
    1748:	f1 2c       	mov	r15, r1
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	0f 92       	push	r0
    1750:	f8 01       	movw	r30, r16
    1752:	86 8d       	ldd	r24, Z+30	; 0x1e
    1754:	88 23       	and	r24, r24
    1756:	c9 f0       	breq	.+50     	; 0x178a <xQueueSemaphoreTake+0x6a>
    1758:	81 50       	subi	r24, 0x01	; 1
    175a:	86 8f       	std	Z+30, r24	; 0x1e
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	89 2b       	or	r24, r25
    1762:	29 f4       	brne	.+10     	; 0x176e <xQueueSemaphoreTake+0x4e>
    1764:	0e 94 2e 19 	call	0x325c	; 0x325c <pvTaskIncrementMutexHeldCount>
    1768:	f8 01       	movw	r30, r16
    176a:	95 83       	std	Z+5, r25	; 0x05
    176c:	84 83       	std	Z+4, r24	; 0x04
    176e:	f8 01       	movw	r30, r16
    1770:	80 85       	ldd	r24, Z+8	; 0x08
    1772:	88 23       	and	r24, r24
    1774:	31 f0       	breq	.+12     	; 0x1782 <xQueueSemaphoreTake+0x62>
    1776:	c8 01       	movw	r24, r16
    1778:	08 96       	adiw	r24, 0x08	; 8
    177a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <xTaskRemoveFromEventList>
    177e:	81 11       	cpse	r24, r1
    1780:	3d dc       	rcall	.-1926   	; 0xffc <vPortYield>
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	6f c0       	rjmp	.+222    	; 0x1868 <xQueueSemaphoreTake+0x148>
    178a:	8e 81       	ldd	r24, Y+6	; 0x06
    178c:	9f 81       	ldd	r25, Y+7	; 0x07
    178e:	a8 85       	ldd	r26, Y+8	; 0x08
    1790:	b9 85       	ldd	r27, Y+9	; 0x09
    1792:	89 2b       	or	r24, r25
    1794:	8a 2b       	or	r24, r26
    1796:	8b 2b       	or	r24, r27
    1798:	21 f4       	brne	.+8      	; 0x17a2 <xQueueSemaphoreTake+0x82>
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	63 c0       	rjmp	.+198    	; 0x1868 <xQueueSemaphoreTake+0x148>
    17a2:	f1 10       	cpse	r15, r1
    17a4:	06 c0       	rjmp	.+12     	; 0x17b2 <xQueueSemaphoreTake+0x92>
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <vTaskInternalSetTimeOutState>
    17ae:	ff 24       	eor	r15, r15
    17b0:	f3 94       	inc	r15
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	4e d6       	rcall	.+3228   	; 0x2454 <vTaskSuspendAll>
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	0f 92       	push	r0
    17be:	f8 01       	movw	r30, r16
    17c0:	81 a1       	ldd	r24, Z+33	; 0x21
    17c2:	8f 3f       	cpi	r24, 0xFF	; 255
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <xQueueSemaphoreTake+0xa8>
    17c6:	11 a2       	std	Z+33, r1	; 0x21
    17c8:	f8 01       	movw	r30, r16
    17ca:	82 a1       	ldd	r24, Z+34	; 0x22
    17cc:	8f 3f       	cpi	r24, 0xFF	; 255
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <xQueueSemaphoreTake+0xb2>
    17d0:	12 a2       	std	Z+34, r1	; 0x22
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	be 01       	movw	r22, r28
    17d8:	6a 5f       	subi	r22, 0xFA	; 250
    17da:	7f 4f       	sbci	r23, 0xFF	; 255
    17dc:	ce 01       	movw	r24, r28
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <xTaskCheckForTimeOut>
    17e4:	81 11       	cpse	r24, r1
    17e6:	26 c0       	rjmp	.+76     	; 0x1834 <xQueueSemaphoreTake+0x114>
    17e8:	c8 01       	movw	r24, r16
    17ea:	e0 dc       	rcall	.-1600   	; 0x11ac <prvIsQueueEmpty>
    17ec:	88 23       	and	r24, r24
    17ee:	f1 f0       	breq	.+60     	; 0x182c <xQueueSemaphoreTake+0x10c>
    17f0:	f8 01       	movw	r30, r16
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	89 2b       	or	r24, r25
    17f8:	51 f4       	brne	.+20     	; 0x180e <xQueueSemaphoreTake+0xee>
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	0f 92       	push	r0
    1800:	84 81       	ldd	r24, Z+4	; 0x04
    1802:	95 81       	ldd	r25, Z+5	; 0x05
    1804:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <xTaskPriorityInherit>
    1808:	e8 2e       	mov	r14, r24
    180a:	0f 90       	pop	r0
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	4e 81       	ldd	r20, Y+6	; 0x06
    1810:	5f 81       	ldd	r21, Y+7	; 0x07
    1812:	68 85       	ldd	r22, Y+8	; 0x08
    1814:	79 85       	ldd	r23, Y+9	; 0x09
    1816:	c8 01       	movw	r24, r16
    1818:	43 96       	adiw	r24, 0x13	; 19
    181a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <vTaskPlaceOnEventList>
    181e:	c8 01       	movw	r24, r16
    1820:	59 dd       	rcall	.-1358   	; 0x12d4 <prvUnlockQueue>
    1822:	58 d7       	rcall	.+3760   	; 0x26d4 <xTaskResumeAll>
    1824:	81 11       	cpse	r24, r1
    1826:	91 cf       	rjmp	.-222    	; 0x174a <xQueueSemaphoreTake+0x2a>
    1828:	e9 db       	rcall	.-2094   	; 0xffc <vPortYield>
    182a:	8f cf       	rjmp	.-226    	; 0x174a <xQueueSemaphoreTake+0x2a>
    182c:	c8 01       	movw	r24, r16
    182e:	52 dd       	rcall	.-1372   	; 0x12d4 <prvUnlockQueue>
    1830:	51 d7       	rcall	.+3746   	; 0x26d4 <xTaskResumeAll>
    1832:	8b cf       	rjmp	.-234    	; 0x174a <xQueueSemaphoreTake+0x2a>
    1834:	c8 01       	movw	r24, r16
    1836:	4e dd       	rcall	.-1380   	; 0x12d4 <prvUnlockQueue>
    1838:	4d d7       	rcall	.+3738   	; 0x26d4 <xTaskResumeAll>
    183a:	c8 01       	movw	r24, r16
    183c:	b7 dc       	rcall	.-1682   	; 0x11ac <prvIsQueueEmpty>
    183e:	88 23       	and	r24, r24
    1840:	09 f4       	brne	.+2      	; 0x1844 <xQueueSemaphoreTake+0x124>
    1842:	83 cf       	rjmp	.-250    	; 0x174a <xQueueSemaphoreTake+0x2a>
    1844:	ee 20       	and	r14, r14
    1846:	79 f0       	breq	.+30     	; 0x1866 <xQueueSemaphoreTake+0x146>
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	0f 92       	push	r0
    184e:	c8 01       	movw	r24, r16
    1850:	9d dc       	rcall	.-1734   	; 0x118c <prvGetDisinheritPriorityAfterTimeout>
    1852:	68 2f       	mov	r22, r24
    1854:	f8 01       	movw	r30, r16
    1856:	84 81       	ldd	r24, Z+4	; 0x04
    1858:	95 81       	ldd	r25, Z+5	; 0x05
    185a:	0e 94 9d 18 	call	0x313a	; 0x313a <vTaskPriorityDisinheritAfterTimeout>
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <xQueueSemaphoreTake+0x148>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	29 96       	adiw	r28, 0x09	; 9
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	ff 90       	pop	r15
    187e:	ef 90       	pop	r14
    1880:	08 95       	ret

00001882 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	0f 92       	push	r0
    188e:	89 a1       	ldd	r24, Y+33	; 0x21
    1890:	8f 3f       	cpi	r24, 0xFF	; 255
    1892:	09 f4       	brne	.+2      	; 0x1896 <vQueueWaitForMessageRestricted+0x14>
    1894:	19 a2       	std	Y+33, r1	; 0x21
    1896:	8a a1       	ldd	r24, Y+34	; 0x22
    1898:	8f 3f       	cpi	r24, 0xFF	; 255
    189a:	09 f4       	brne	.+2      	; 0x189e <vQueueWaitForMessageRestricted+0x1c>
    189c:	1a a2       	std	Y+34, r1	; 0x22
    189e:	0f 90       	pop	r0
    18a0:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18a4:	81 11       	cpse	r24, r1
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18a8:	ce 01       	movw	r24, r28
    18aa:	43 96       	adiw	r24, 0x13	; 19
    18ac:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    18b0:	ce 01       	movw	r24, r28
    18b2:	10 dd       	rcall	.-1504   	; 0x12d4 <prvUnlockQueue>
    }
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	08 95       	ret

000018ba <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    18ba:	fc 01       	movw	r30, r24
    18bc:	44 81       	ldd	r20, Z+4	; 0x04
    18be:	55 81       	ldd	r21, Z+5	; 0x05
    18c0:	22 81       	ldd	r18, Z+2	; 0x02
    18c2:	33 81       	ldd	r19, Z+3	; 0x03
    18c4:	24 0f       	add	r18, r20
    18c6:	35 1f       	adc	r19, r21
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	b9 01       	movw	r22, r18
    18ce:	68 1b       	sub	r22, r24
    18d0:	79 0b       	sbc	r23, r25
    18d2:	cb 01       	movw	r24, r22
    18d4:	64 17       	cp	r22, r20
    18d6:	75 07       	cpc	r23, r21
    18d8:	10 f0       	brcs	.+4      	; 0x18de <prvBytesInBuffer+0x24>
    18da:	84 1b       	sub	r24, r20
    18dc:	95 0b       	sbc	r25, r21
    18de:	08 95       	ret

000018e0 <prvInitialiseNewStreamBuffer>:
    18e0:	0f 93       	push	r16
    18e2:	fc 01       	movw	r30, r24
    18e4:	8f e0       	ldi	r24, 0x0F	; 15
    18e6:	df 01       	movw	r26, r30
    18e8:	1d 92       	st	X+, r1
    18ea:	8a 95       	dec	r24
    18ec:	e9 f7       	brne	.-6      	; 0x18e8 <prvInitialiseNewStreamBuffer+0x8>
    18ee:	75 87       	std	Z+13, r23	; 0x0d
    18f0:	64 87       	std	Z+12, r22	; 0x0c
    18f2:	55 83       	std	Z+5, r21	; 0x05
    18f4:	44 83       	std	Z+4, r20	; 0x04
    18f6:	37 83       	std	Z+7, r19	; 0x07
    18f8:	26 83       	std	Z+6, r18	; 0x06
    18fa:	06 87       	std	Z+14, r16	; 0x0e
    18fc:	0f 91       	pop	r16
    18fe:	08 95       	ret

00001900 <prvWriteBytesToBuffer>:
    1900:	af 92       	push	r10
    1902:	bf 92       	push	r11
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	6c 01       	movw	r12, r24
    1916:	5b 01       	movw	r10, r22
    1918:	7a 01       	movw	r14, r20
    191a:	fc 01       	movw	r30, r24
    191c:	c2 81       	ldd	r28, Z+2	; 0x02
    191e:	d3 81       	ldd	r29, Z+3	; 0x03
    1920:	04 81       	ldd	r16, Z+4	; 0x04
    1922:	15 81       	ldd	r17, Z+5	; 0x05
    1924:	0c 1b       	sub	r16, r28
    1926:	1d 0b       	sbc	r17, r29
    1928:	40 17       	cp	r20, r16
    192a:	51 07       	cpc	r21, r17
    192c:	08 f4       	brcc	.+2      	; 0x1930 <prvWriteBytesToBuffer+0x30>
    192e:	8a 01       	movw	r16, r20
    1930:	f6 01       	movw	r30, r12
    1932:	84 85       	ldd	r24, Z+12	; 0x0c
    1934:	95 85       	ldd	r25, Z+13	; 0x0d
    1936:	a8 01       	movw	r20, r16
    1938:	b5 01       	movw	r22, r10
    193a:	8c 0f       	add	r24, r28
    193c:	9d 1f       	adc	r25, r29
    193e:	0e 94 99 39 	call	0x7332	; 0x7332 <memcpy>
    1942:	0e 15       	cp	r16, r14
    1944:	1f 05       	cpc	r17, r15
    1946:	58 f4       	brcc	.+22     	; 0x195e <prvWriteBytesToBuffer+0x5e>
    1948:	a7 01       	movw	r20, r14
    194a:	40 1b       	sub	r20, r16
    194c:	51 0b       	sbc	r21, r17
    194e:	b5 01       	movw	r22, r10
    1950:	60 0f       	add	r22, r16
    1952:	71 1f       	adc	r23, r17
    1954:	f6 01       	movw	r30, r12
    1956:	84 85       	ldd	r24, Z+12	; 0x0c
    1958:	95 85       	ldd	r25, Z+13	; 0x0d
    195a:	0e 94 99 39 	call	0x7332	; 0x7332 <memcpy>
    195e:	ce 01       	movw	r24, r28
    1960:	8e 0d       	add	r24, r14
    1962:	9f 1d       	adc	r25, r15
    1964:	f6 01       	movw	r30, r12
    1966:	24 81       	ldd	r18, Z+4	; 0x04
    1968:	35 81       	ldd	r19, Z+5	; 0x05
    196a:	82 17       	cp	r24, r18
    196c:	93 07       	cpc	r25, r19
    196e:	10 f0       	brcs	.+4      	; 0x1974 <prvWriteBytesToBuffer+0x74>
    1970:	82 1b       	sub	r24, r18
    1972:	93 0b       	sbc	r25, r19
    1974:	f6 01       	movw	r30, r12
    1976:	93 83       	std	Z+3, r25	; 0x03
    1978:	82 83       	std	Z+2, r24	; 0x02
    197a:	c7 01       	movw	r24, r14
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	1f 91       	pop	r17
    1982:	0f 91       	pop	r16
    1984:	ff 90       	pop	r15
    1986:	ef 90       	pop	r14
    1988:	df 90       	pop	r13
    198a:	cf 90       	pop	r12
    198c:	bf 90       	pop	r11
    198e:	af 90       	pop	r10
    1990:	08 95       	ret

00001992 <prvWriteMessageToBuffer>:
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	1f 92       	push	r1
    19a4:	1f 92       	push	r1
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	7c 01       	movw	r14, r24
    19ac:	6b 01       	movw	r12, r22
    19ae:	5a 83       	std	Y+2, r21	; 0x02
    19b0:	49 83       	std	Y+1, r20	; 0x01
    19b2:	21 15       	cp	r18, r1
    19b4:	31 05       	cpc	r19, r1
    19b6:	c1 f0       	breq	.+48     	; 0x19e8 <prvWriteMessageToBuffer+0x56>
    19b8:	fc 01       	movw	r30, r24
    19ba:	86 85       	ldd	r24, Z+14	; 0x0e
    19bc:	80 fd       	sbrc	r24, 0
    19be:	08 c0       	rjmp	.+16     	; 0x19d0 <prvWriteMessageToBuffer+0x3e>
    19c0:	42 17       	cp	r20, r18
    19c2:	53 07       	cpc	r21, r19
    19c4:	08 f4       	brcc	.+2      	; 0x19c8 <prvWriteMessageToBuffer+0x36>
    19c6:	9a 01       	movw	r18, r20
    19c8:	3a 83       	std	Y+2, r19	; 0x02
    19ca:	29 83       	std	Y+1, r18	; 0x01
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <prvWriteMessageToBuffer+0x5c>
    19d0:	20 17       	cp	r18, r16
    19d2:	31 07       	cpc	r19, r17
    19d4:	58 f0       	brcs	.+22     	; 0x19ec <prvWriteMessageToBuffer+0x5a>
    19d6:	42 e0       	ldi	r20, 0x02	; 2
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	be 01       	movw	r22, r28
    19dc:	6f 5f       	subi	r22, 0xFF	; 255
    19de:	7f 4f       	sbci	r23, 0xFF	; 255
    19e0:	c7 01       	movw	r24, r14
    19e2:	8e df       	rcall	.-228    	; 0x1900 <prvWriteBytesToBuffer>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	03 c0       	rjmp	.+6      	; 0x19ee <prvWriteMessageToBuffer+0x5c>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <prvWriteMessageToBuffer+0x5c>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	88 23       	and	r24, r24
    19f0:	31 f0       	breq	.+12     	; 0x19fe <prvWriteMessageToBuffer+0x6c>
    19f2:	49 81       	ldd	r20, Y+1	; 0x01
    19f4:	5a 81       	ldd	r21, Y+2	; 0x02
    19f6:	b6 01       	movw	r22, r12
    19f8:	c7 01       	movw	r24, r14
    19fa:	82 df       	rcall	.-252    	; 0x1900 <prvWriteBytesToBuffer>
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <prvWriteMessageToBuffer+0x70>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	08 95       	ret

00001a18 <prvReadBytesFromBuffer>:
    1a18:	af 92       	push	r10
    1a1a:	bf 92       	push	r11
    1a1c:	cf 92       	push	r12
    1a1e:	df 92       	push	r13
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	7c 01       	movw	r14, r24
    1a2e:	5b 01       	movw	r10, r22
    1a30:	e9 01       	movw	r28, r18
    1a32:	42 17       	cp	r20, r18
    1a34:	53 07       	cpc	r21, r19
    1a36:	08 f4       	brcc	.+2      	; 0x1a3a <prvReadBytesFromBuffer+0x22>
    1a38:	ea 01       	movw	r28, r20
    1a3a:	20 97       	sbiw	r28, 0x00	; 0
    1a3c:	81 f1       	breq	.+96     	; 0x1a9e <prvReadBytesFromBuffer+0x86>
    1a3e:	f7 01       	movw	r30, r14
    1a40:	00 81       	ld	r16, Z
    1a42:	11 81       	ldd	r17, Z+1	; 0x01
    1a44:	84 81       	ldd	r24, Z+4	; 0x04
    1a46:	95 81       	ldd	r25, Z+5	; 0x05
    1a48:	80 1b       	sub	r24, r16
    1a4a:	91 0b       	sbc	r25, r17
    1a4c:	6e 01       	movw	r12, r28
    1a4e:	8c 17       	cp	r24, r28
    1a50:	9d 07       	cpc	r25, r29
    1a52:	08 f4       	brcc	.+2      	; 0x1a56 <prvReadBytesFromBuffer+0x3e>
    1a54:	6c 01       	movw	r12, r24
    1a56:	f7 01       	movw	r30, r14
    1a58:	64 85       	ldd	r22, Z+12	; 0x0c
    1a5a:	75 85       	ldd	r23, Z+13	; 0x0d
    1a5c:	60 0f       	add	r22, r16
    1a5e:	71 1f       	adc	r23, r17
    1a60:	a6 01       	movw	r20, r12
    1a62:	c5 01       	movw	r24, r10
    1a64:	0e 94 99 39 	call	0x7332	; 0x7332 <memcpy>
    1a68:	cc 16       	cp	r12, r28
    1a6a:	dd 06       	cpc	r13, r29
    1a6c:	58 f4       	brcc	.+22     	; 0x1a84 <prvReadBytesFromBuffer+0x6c>
    1a6e:	ae 01       	movw	r20, r28
    1a70:	4c 19       	sub	r20, r12
    1a72:	5d 09       	sbc	r21, r13
    1a74:	f7 01       	movw	r30, r14
    1a76:	64 85       	ldd	r22, Z+12	; 0x0c
    1a78:	75 85       	ldd	r23, Z+13	; 0x0d
    1a7a:	c5 01       	movw	r24, r10
    1a7c:	8c 0d       	add	r24, r12
    1a7e:	9d 1d       	adc	r25, r13
    1a80:	0e 94 99 39 	call	0x7332	; 0x7332 <memcpy>
    1a84:	0c 0f       	add	r16, r28
    1a86:	1d 1f       	adc	r17, r29
    1a88:	f7 01       	movw	r30, r14
    1a8a:	84 81       	ldd	r24, Z+4	; 0x04
    1a8c:	95 81       	ldd	r25, Z+5	; 0x05
    1a8e:	08 17       	cp	r16, r24
    1a90:	19 07       	cpc	r17, r25
    1a92:	10 f0       	brcs	.+4      	; 0x1a98 <prvReadBytesFromBuffer+0x80>
    1a94:	08 1b       	sub	r16, r24
    1a96:	19 0b       	sbc	r17, r25
    1a98:	f7 01       	movw	r30, r14
    1a9a:	11 83       	std	Z+1, r17	; 0x01
    1a9c:	00 83       	st	Z, r16
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	bf 90       	pop	r11
    1ab2:	af 90       	pop	r10
    1ab4:	08 95       	ret

00001ab6 <prvReadMessageFromBuffer>:
    1ab6:	6f 92       	push	r6
    1ab8:	7f 92       	push	r7
    1aba:	8f 92       	push	r8
    1abc:	9f 92       	push	r9
    1abe:	af 92       	push	r10
    1ac0:	bf 92       	push	r11
    1ac2:	cf 92       	push	r12
    1ac4:	df 92       	push	r13
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	1f 92       	push	r1
    1ad4:	1f 92       	push	r1
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	6c 01       	movw	r12, r24
    1adc:	4b 01       	movw	r8, r22
    1ade:	5a 01       	movw	r10, r20
    1ae0:	79 01       	movw	r14, r18
    1ae2:	01 15       	cp	r16, r1
    1ae4:	11 05       	cpc	r17, r1
    1ae6:	b1 f0       	breq	.+44     	; 0x1b14 <prvReadMessageFromBuffer+0x5e>
    1ae8:	fc 01       	movw	r30, r24
    1aea:	60 80       	ld	r6, Z
    1aec:	71 80       	ldd	r7, Z+1	; 0x01
    1aee:	a8 01       	movw	r20, r16
    1af0:	be 01       	movw	r22, r28
    1af2:	6f 5f       	subi	r22, 0xFF	; 255
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	90 df       	rcall	.-224    	; 0x1a18 <prvReadBytesFromBuffer>
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	e0 1a       	sub	r14, r16
    1afe:	f1 0a       	sbc	r15, r17
    1b00:	a8 16       	cp	r10, r24
    1b02:	b9 06       	cpc	r11, r25
    1b04:	30 f4       	brcc	.+12     	; 0x1b12 <prvReadMessageFromBuffer+0x5c>
    1b06:	f6 01       	movw	r30, r12
    1b08:	71 82       	std	Z+1, r7	; 0x01
    1b0a:	60 82       	st	Z, r6
    1b0c:	a1 2c       	mov	r10, r1
    1b0e:	b1 2c       	mov	r11, r1
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <prvReadMessageFromBuffer+0x5e>
    1b12:	5c 01       	movw	r10, r24
    1b14:	97 01       	movw	r18, r14
    1b16:	a5 01       	movw	r20, r10
    1b18:	b4 01       	movw	r22, r8
    1b1a:	c6 01       	movw	r24, r12
    1b1c:	7d df       	rcall	.-262    	; 0x1a18 <prvReadBytesFromBuffer>
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	9f 90       	pop	r9
    1b38:	8f 90       	pop	r8
    1b3a:	7f 90       	pop	r7
    1b3c:	6f 90       	pop	r6
    1b3e:	08 95       	ret

00001b40 <xStreamBufferGenericCreate>:
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	ec 01       	movw	r28, r24
    1b50:	6b 01       	movw	r12, r22
    1b52:	41 30       	cpi	r20, 0x01	; 1
    1b54:	11 f4       	brne	.+4      	; 0x1b5a <xStreamBufferGenericCreate+0x1a>
    1b56:	01 e0       	ldi	r16, 0x01	; 1
    1b58:	01 c0       	rjmp	.+2      	; 0x1b5c <xStreamBufferGenericCreate+0x1c>
    1b5a:	00 e0       	ldi	r16, 0x00	; 0
    1b5c:	c1 14       	cp	r12, r1
    1b5e:	d1 04       	cpc	r13, r1
    1b60:	19 f4       	brne	.+6      	; 0x1b68 <xStreamBufferGenericCreate+0x28>
    1b62:	cc 24       	eor	r12, r12
    1b64:	c3 94       	inc	r12
    1b66:	d1 2c       	mov	r13, r1
    1b68:	ce 01       	movw	r24, r28
    1b6a:	40 96       	adiw	r24, 0x10	; 16
    1b6c:	c8 17       	cp	r28, r24
    1b6e:	d9 07       	cpc	r29, r25
    1b70:	20 f4       	brcc	.+8      	; 0x1b7a <xStreamBufferGenericCreate+0x3a>
    1b72:	21 96       	adiw	r28, 0x01	; 1
    1b74:	8f d8       	rcall	.-3810   	; 0xc94 <pvPortMalloc>
    1b76:	7c 01       	movw	r14, r24
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <xStreamBufferGenericCreate+0x3e>
    1b7a:	e1 2c       	mov	r14, r1
    1b7c:	f1 2c       	mov	r15, r1
    1b7e:	e1 14       	cp	r14, r1
    1b80:	f1 04       	cpc	r15, r1
    1b82:	39 f0       	breq	.+14     	; 0x1b92 <xStreamBufferGenericCreate+0x52>
    1b84:	96 01       	movw	r18, r12
    1b86:	ae 01       	movw	r20, r28
    1b88:	b7 01       	movw	r22, r14
    1b8a:	61 5f       	subi	r22, 0xF1	; 241
    1b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8e:	c7 01       	movw	r24, r14
    1b90:	a7 de       	rcall	.-690    	; 0x18e0 <prvInitialiseNewStreamBuffer>
    1b92:	c7 01       	movw	r24, r14
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	0f 91       	pop	r16
    1b9a:	ff 90       	pop	r15
    1b9c:	ef 90       	pop	r14
    1b9e:	df 90       	pop	r13
    1ba0:	cf 90       	pop	r12
    1ba2:	08 95       	ret

00001ba4 <xStreamBufferReset>:
    1ba4:	0f 93       	push	r16
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	0f 92       	push	r0
    1bac:	fc 01       	movw	r30, r24
    1bae:	20 85       	ldd	r18, Z+8	; 0x08
    1bb0:	31 85       	ldd	r19, Z+9	; 0x09
    1bb2:	23 2b       	or	r18, r19
    1bb4:	71 f4       	brne	.+28     	; 0x1bd2 <xStreamBufferReset+0x2e>
    1bb6:	22 85       	ldd	r18, Z+10	; 0x0a
    1bb8:	33 85       	ldd	r19, Z+11	; 0x0b
    1bba:	23 2b       	or	r18, r19
    1bbc:	61 f4       	brne	.+24     	; 0x1bd6 <xStreamBufferReset+0x32>
    1bbe:	26 81       	ldd	r18, Z+6	; 0x06
    1bc0:	37 81       	ldd	r19, Z+7	; 0x07
    1bc2:	44 81       	ldd	r20, Z+4	; 0x04
    1bc4:	55 81       	ldd	r21, Z+5	; 0x05
    1bc6:	64 85       	ldd	r22, Z+12	; 0x0c
    1bc8:	75 85       	ldd	r23, Z+13	; 0x0d
    1bca:	06 85       	ldd	r16, Z+14	; 0x0e
    1bcc:	89 de       	rcall	.-750    	; 0x18e0 <prvInitialiseNewStreamBuffer>
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <xStreamBufferReset+0x34>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <xStreamBufferReset+0x34>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	0f 90       	pop	r0
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	0f 91       	pop	r16
    1bde:	08 95       	ret

00001be0 <xStreamBufferSpacesAvailable>:
    1be0:	fc 01       	movw	r30, r24
    1be2:	24 81       	ldd	r18, Z+4	; 0x04
    1be4:	35 81       	ldd	r19, Z+5	; 0x05
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	82 0f       	add	r24, r18
    1bec:	93 1f       	adc	r25, r19
    1bee:	42 81       	ldd	r20, Z+2	; 0x02
    1bf0:	53 81       	ldd	r21, Z+3	; 0x03
    1bf2:	84 1b       	sub	r24, r20
    1bf4:	95 0b       	sbc	r25, r21
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	82 17       	cp	r24, r18
    1bfa:	93 07       	cpc	r25, r19
    1bfc:	10 f0       	brcs	.+4      	; 0x1c02 <xStreamBufferSpacesAvailable+0x22>
    1bfe:	82 1b       	sub	r24, r18
    1c00:	93 0b       	sbc	r25, r19
    1c02:	08 95       	ret

00001c04 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1c04:	2f 92       	push	r2
    1c06:	3f 92       	push	r3
    1c08:	4f 92       	push	r4
    1c0a:	5f 92       	push	r5
    1c0c:	6f 92       	push	r6
    1c0e:	7f 92       	push	r7
    1c10:	8f 92       	push	r8
    1c12:	9f 92       	push	r9
    1c14:	af 92       	push	r10
    1c16:	bf 92       	push	r11
    1c18:	cf 92       	push	r12
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	2b 97       	sbiw	r28, 0x0b	; 11
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	4c 01       	movw	r8, r24
    1c3a:	7b 87       	std	Y+11, r23	; 0x0b
    1c3c:	6a 87       	std	Y+10, r22	; 0x0a
    1c3e:	1a 01       	movw	r2, r20
    1c40:	0e 83       	std	Y+6, r16	; 0x06
    1c42:	1f 83       	std	Y+7, r17	; 0x07
    1c44:	28 87       	std	Y+8, r18	; 0x08
    1c46:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1c48:	fc 01       	movw	r30, r24
    1c4a:	84 81       	ldd	r24, Z+4	; 0x04
    1c4c:	95 81       	ldd	r25, Z+5	; 0x05
    1c4e:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c50:	26 85       	ldd	r18, Z+14	; 0x0e
    1c52:	20 ff       	sbrs	r18, 0
    1c54:	0c c0       	rjmp	.+24     	; 0x1c6e <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c56:	2a 01       	movw	r4, r20
    1c58:	f2 e0       	ldi	r31, 0x02	; 2
    1c5a:	4f 0e       	add	r4, r31
    1c5c:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1c5e:	84 15       	cp	r24, r4
    1c60:	95 05       	cpc	r25, r5
    1c62:	58 f4       	brcc	.+22     	; 0x1c7a <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1c64:	1e 82       	std	Y+6, r1	; 0x06
    1c66:	1f 82       	std	Y+7, r1	; 0x07
    1c68:	18 86       	std	Y+8, r1	; 0x08
    1c6a:	19 86       	std	Y+9, r1	; 0x09
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1c6e:	84 17       	cp	r24, r20
    1c70:	95 07       	cpc	r25, r21
    1c72:	10 f0       	brcs	.+4      	; 0x1c78 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1c74:	2a 01       	movw	r4, r20
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1c78:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c7e:	a8 85       	ldd	r26, Y+8	; 0x08
    1c80:	b9 85       	ldd	r27, Y+9	; 0x09
    1c82:	89 2b       	or	r24, r25
    1c84:	8a 2b       	or	r24, r26
    1c86:	8b 2b       	or	r24, r27
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <xStreamBufferSend+0x88>
    1c8a:	38 c0       	rjmp	.+112    	; 0x1cfc <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1c9a:	c4 01       	movw	r24, r8
    1c9c:	a1 df       	rcall	.-190    	; 0x1be0 <xStreamBufferSpacesAvailable>
    1c9e:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1ca0:	84 15       	cp	r24, r4
    1ca2:	95 05       	cpc	r25, r5
    1ca4:	40 f5       	brcc	.+80     	; 0x1cf6 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 01 1c 	call	0x3802	; 0x3802 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1cb0:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <xTaskGetCurrentTaskHandle>
    1cb4:	f4 01       	movw	r30, r8
    1cb6:	93 87       	std	Z+11, r25	; 0x0b
    1cb8:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1cbe:	ae 80       	ldd	r10, Y+6	; 0x06
    1cc0:	bf 80       	ldd	r11, Y+7	; 0x07
    1cc2:	c8 84       	ldd	r12, Y+8	; 0x08
    1cc4:	d9 84       	ldd	r13, Y+9	; 0x09
    1cc6:	e1 2c       	mov	r14, r1
    1cc8:	f1 2c       	mov	r15, r1
    1cca:	00 e0       	ldi	r16, 0x00	; 0
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	98 01       	movw	r18, r16
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	ba 01       	movw	r22, r20
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	0e 94 40 19 	call	0x3280	; 0x3280 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1cdc:	f4 01       	movw	r30, r8
    1cde:	13 86       	std	Z+11, r1	; 0x0b
    1ce0:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1ce2:	be 01       	movw	r22, r28
    1ce4:	6a 5f       	subi	r22, 0xFA	; 250
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <xTaskCheckForTimeOut>
    1cf0:	88 23       	and	r24, r24
    1cf2:	81 f2       	breq	.-96     	; 0x1c94 <xStreamBufferSend+0x90>
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1cf6:	0f 90       	pop	r0
    1cf8:	0f be       	out	0x3f, r0	; 63
                    break;
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1cfc:	61 2c       	mov	r6, r1
    1cfe:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1d00:	61 14       	cp	r6, r1
    1d02:	71 04       	cpc	r7, r1
    1d04:	19 f4       	brne	.+6      	; 0x1d0c <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1d06:	c4 01       	movw	r24, r8
    1d08:	6b df       	rcall	.-298    	; 0x1be0 <xStreamBufferSpacesAvailable>
    1d0a:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1d0c:	82 01       	movw	r16, r4
    1d0e:	93 01       	movw	r18, r6
    1d10:	a1 01       	movw	r20, r2
    1d12:	6a 85       	ldd	r22, Y+10	; 0x0a
    1d14:	7b 85       	ldd	r23, Y+11	; 0x0b
    1d16:	c4 01       	movw	r24, r8
    1d18:	3c de       	rcall	.-904    	; 0x1992 <prvWriteMessageToBuffer>
    1d1a:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1d1c:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1d1e:	e9 f0       	breq	.+58     	; 0x1d5a <xStreamBufferSend+0x156>
    1d20:	c4 01       	movw	r24, r8
    1d22:	cb dd       	rcall	.-1130   	; 0x18ba <prvBytesInBuffer>
    1d24:	f4 01       	movw	r30, r8
    1d26:	26 81       	ldd	r18, Z+6	; 0x06
    1d28:	37 81       	ldd	r19, Z+7	; 0x07
    1d2a:	82 17       	cp	r24, r18
    1d2c:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1d2e:	a8 f0       	brcs	.+42     	; 0x1d5a <xStreamBufferSend+0x156>
    1d30:	91 d3       	rcall	.+1826   	; 0x2454 <vTaskSuspendAll>
    1d32:	f4 01       	movw	r30, r8
    1d34:	80 85       	ldd	r24, Z+8	; 0x08
    1d36:	91 85       	ldd	r25, Z+9	; 0x09
    1d38:	89 2b       	or	r24, r25
    1d3a:	71 f0       	breq	.+28     	; 0x1d58 <xStreamBufferSend+0x154>
    1d3c:	80 85       	ldd	r24, Z+8	; 0x08
    1d3e:	91 85       	ldd	r25, Z+9	; 0x09
    1d40:	e1 2c       	mov	r14, r1
    1d42:	f1 2c       	mov	r15, r1
    1d44:	00 e0       	ldi	r16, 0x00	; 0
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	a9 01       	movw	r20, r18
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <xTaskGenericNotify>
    1d52:	f4 01       	movw	r30, r8
    1d54:	11 86       	std	Z+9, r1	; 0x09
    1d56:	10 86       	std	Z+8, r1	; 0x08
    1d58:	bd d4       	rcall	.+2426   	; 0x26d4 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1d5a:	c6 01       	movw	r24, r12
    1d5c:	2b 96       	adiw	r28, 0x0b	; 11
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	bf 90       	pop	r11
    1d7a:	af 90       	pop	r10
    1d7c:	9f 90       	pop	r9
    1d7e:	8f 90       	pop	r8
    1d80:	7f 90       	pop	r7
    1d82:	6f 90       	pop	r6
    1d84:	5f 90       	pop	r5
    1d86:	4f 90       	pop	r4
    1d88:	3f 90       	pop	r3
    1d8a:	2f 90       	pop	r2
    1d8c:	08 95       	ret

00001d8e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1d8e:	af 92       	push	r10
    1d90:	bf 92       	push	r11
    1d92:	cf 92       	push	r12
    1d94:	df 92       	push	r13
    1d96:	ef 92       	push	r14
    1d98:	ff 92       	push	r15
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	ec 01       	movw	r28, r24
    1da4:	7b 01       	movw	r14, r22
    1da6:	5a 01       	movw	r10, r20
    1da8:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1daa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dac:	80 ff       	sbrs	r24, 0
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1db0:	8a 01       	movw	r16, r20
    1db2:	0e 5f       	subi	r16, 0xFE	; 254
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1db8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1dba:	ce 01       	movw	r24, r28
    1dbc:	11 df       	rcall	.-478    	; 0x1be0 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	a5 01       	movw	r20, r10
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	e5 dd       	rcall	.-1078   	; 0x1992 <prvWriteMessageToBuffer>
    1dc8:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1dca:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1dcc:	c1 f0       	breq	.+48     	; 0x1dfe <xStreamBufferSendFromISR+0x70>
    1dce:	ce 01       	movw	r24, r28
    1dd0:	74 dd       	rcall	.-1304   	; 0x18ba <prvBytesInBuffer>
    1dd2:	2e 81       	ldd	r18, Y+6	; 0x06
    1dd4:	3f 81       	ldd	r19, Y+7	; 0x07
    1dd6:	82 17       	cp	r24, r18
    1dd8:	93 07       	cpc	r25, r19
    1dda:	88 f0       	brcs	.+34     	; 0x1dfe <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1ddc:	88 85       	ldd	r24, Y+8	; 0x08
    1dde:	99 85       	ldd	r25, Y+9	; 0x09
    1de0:	89 2b       	or	r24, r25
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <xStreamBufferSendFromISR+0x70>
    1de4:	88 85       	ldd	r24, Y+8	; 0x08
    1de6:	99 85       	ldd	r25, Y+9	; 0x09
    1de8:	e1 2c       	mov	r14, r1
    1dea:	f1 2c       	mov	r15, r1
    1dec:	00 e0       	ldi	r16, 0x00	; 0
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	a9 01       	movw	r20, r18
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	0e 94 df 1a 	call	0x35be	; 0x35be <xTaskGenericNotifyFromISR>
    1dfa:	19 86       	std	Y+9, r1	; 0x09
    1dfc:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1dfe:	c5 01       	movw	r24, r10
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	ff 90       	pop	r15
    1e0a:	ef 90       	pop	r14
    1e0c:	df 90       	pop	r13
    1e0e:	cf 90       	pop	r12
    1e10:	bf 90       	pop	r11
    1e12:	af 90       	pop	r10
    1e14:	08 95       	ret

00001e16 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1e16:	4f 92       	push	r4
    1e18:	5f 92       	push	r5
    1e1a:	6f 92       	push	r6
    1e1c:	7f 92       	push	r7
    1e1e:	8f 92       	push	r8
    1e20:	9f 92       	push	r9
    1e22:	af 92       	push	r10
    1e24:	bf 92       	push	r11
    1e26:	cf 92       	push	r12
    1e28:	df 92       	push	r13
    1e2a:	ef 92       	push	r14
    1e2c:	ff 92       	push	r15
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	ec 01       	movw	r28, r24
    1e38:	2b 01       	movw	r4, r22
    1e3a:	3a 01       	movw	r6, r20
    1e3c:	58 01       	movw	r10, r16
    1e3e:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1e40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e42:	80 ff       	sbrs	r24, 0
    1e44:	05 c0       	rjmp	.+10     	; 0x1e50 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1e46:	68 94       	set
    1e48:	88 24       	eor	r8, r8
    1e4a:	81 f8       	bld	r8, 1
    1e4c:	91 2c       	mov	r9, r1
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1e50:	81 2c       	mov	r8, r1
    1e52:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1e54:	a1 14       	cp	r10, r1
    1e56:	b1 04       	cpc	r11, r1
    1e58:	c1 04       	cpc	r12, r1
    1e5a:	d1 04       	cpc	r13, r1
    1e5c:	41 f1       	breq	.+80     	; 0x1eae <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e64:	ce 01       	movw	r24, r28
    1e66:	29 dd       	rcall	.-1454   	; 0x18ba <prvBytesInBuffer>
    1e68:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e6a:	88 16       	cp	r8, r24
    1e6c:	99 06       	cpc	r9, r25
    1e6e:	48 f0       	brcs	.+18     	; 0x1e82 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	0e 94 01 1c 	call	0x3802	; 0x3802 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1e7a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <xTaskGetCurrentTaskHandle>
    1e7e:	99 87       	std	Y+9, r25	; 0x09
    1e80:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e86:	8e 14       	cp	r8, r14
    1e88:	9f 04       	cpc	r9, r15
    1e8a:	a0 f0       	brcs	.+40     	; 0x1eb4 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1e8c:	e1 2c       	mov	r14, r1
    1e8e:	f1 2c       	mov	r15, r1
    1e90:	00 e0       	ldi	r16, 0x00	; 0
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	98 01       	movw	r18, r16
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	ba 01       	movw	r22, r20
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	0e 94 40 19 	call	0x3280	; 0x3280 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1ea2:	19 86       	std	Y+9, r1	; 0x09
    1ea4:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	08 dd       	rcall	.-1520   	; 0x18ba <prvBytesInBuffer>
    1eaa:	7c 01       	movw	r14, r24
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1eae:	ce 01       	movw	r24, r28
    1eb0:	04 dd       	rcall	.-1528   	; 0x18ba <prvBytesInBuffer>
    1eb2:	7c 01       	movw	r14, r24
    1eb4:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1eb6:	9f 04       	cpc	r9, r15
    1eb8:	e8 f4       	brcc	.+58     	; 0x1ef4 <xStreamBufferReceive+0xde>
    1eba:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1ebc:	97 01       	movw	r18, r14
    1ebe:	a3 01       	movw	r20, r6
    1ec0:	b2 01       	movw	r22, r4
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	f8 dd       	rcall	.-1040   	; 0x1ab6 <prvReadMessageFromBuffer>
    1ec6:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1ec8:	89 2b       	or	r24, r25
    1eca:	b1 f0       	breq	.+44     	; 0x1ef8 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1ecc:	c3 d2       	rcall	.+1414   	; 0x2454 <vTaskSuspendAll>
    1ece:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ed2:	89 2b       	or	r24, r25
    1ed4:	69 f0       	breq	.+26     	; 0x1ef0 <xStreamBufferReceive+0xda>
    1ed6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eda:	e1 2c       	mov	r14, r1
    1edc:	f1 2c       	mov	r15, r1
    1ede:	00 e0       	ldi	r16, 0x00	; 0
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	a9 01       	movw	r20, r18
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <xTaskGenericNotify>
    1eec:	1b 86       	std	Y+11, r1	; 0x0b
    1eee:	1a 86       	std	Y+10, r1	; 0x0a
    1ef0:	f1 d3       	rcall	.+2018   	; 0x26d4 <xTaskResumeAll>
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <xStreamBufferReceive+0xe2>
    1ef4:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1ef6:	d1 2c       	mov	r13, r1
    1ef8:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	cf 90       	pop	r12
    1f0a:	bf 90       	pop	r11
    1f0c:	af 90       	pop	r10
    1f0e:	9f 90       	pop	r9
    1f10:	8f 90       	pop	r8
    1f12:	7f 90       	pop	r7
    1f14:	6f 90       	pop	r6
    1f16:	5f 90       	pop	r5
    1f18:	4f 90       	pop	r4
    1f1a:	08 95       	ret

00001f1c <prvResetNextTaskUnblockTime>:
    1f1c:	e0 91 08 18 	lds	r30, 0x1808	; 0x801808 <pxDelayedTaskList>
    1f20:	f0 91 09 18 	lds	r31, 0x1809	; 0x801809 <pxDelayedTaskList+0x1>
    1f24:	80 81       	ld	r24, Z
    1f26:	81 11       	cpse	r24, r1
    1f28:	0c c0       	rjmp	.+24     	; 0x1f42 <prvResetNextTaskUnblockTime+0x26>
    1f2a:	8f ef       	ldi	r24, 0xFF	; 255
    1f2c:	9f ef       	ldi	r25, 0xFF	; 255
    1f2e:	dc 01       	movw	r26, r24
    1f30:	80 93 d2 17 	sts	0x17D2, r24	; 0x8017d2 <xNextTaskUnblockTime>
    1f34:	90 93 d3 17 	sts	0x17D3, r25	; 0x8017d3 <xNextTaskUnblockTime+0x1>
    1f38:	a0 93 d4 17 	sts	0x17D4, r26	; 0x8017d4 <xNextTaskUnblockTime+0x2>
    1f3c:	b0 93 d5 17 	sts	0x17D5, r27	; 0x8017d5 <xNextTaskUnblockTime+0x3>
    1f40:	08 95       	ret
    1f42:	e0 91 08 18 	lds	r30, 0x1808	; 0x801808 <pxDelayedTaskList>
    1f46:	f0 91 09 18 	lds	r31, 0x1809	; 0x801809 <pxDelayedTaskList+0x1>
    1f4a:	07 80       	ldd	r0, Z+7	; 0x07
    1f4c:	f0 85       	ldd	r31, Z+8	; 0x08
    1f4e:	e0 2d       	mov	r30, r0
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	a2 81       	ldd	r26, Z+2	; 0x02
    1f56:	b3 81       	ldd	r27, Z+3	; 0x03
    1f58:	80 93 d2 17 	sts	0x17D2, r24	; 0x8017d2 <xNextTaskUnblockTime>
    1f5c:	90 93 d3 17 	sts	0x17D3, r25	; 0x8017d3 <xNextTaskUnblockTime+0x1>
    1f60:	a0 93 d4 17 	sts	0x17D4, r26	; 0x8017d4 <xNextTaskUnblockTime+0x2>
    1f64:	b0 93 d5 17 	sts	0x17D5, r27	; 0x8017d5 <xNextTaskUnblockTime+0x3>
    1f68:	08 95       	ret

00001f6a <prvDeleteTCB>:
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	ec 01       	movw	r28, r24
    1f70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f74:	0e 94 f3 06 	call	0xde6	; 0xde6 <vPortFree>
    1f78:	ce 01       	movw	r24, r28
    1f7a:	0e 94 f3 06 	call	0xde6	; 0xde6 <vPortFree>
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	08 95       	ret

00001f84 <prvInitialiseNewTask>:
    1f84:	4f 92       	push	r4
    1f86:	5f 92       	push	r5
    1f88:	6f 92       	push	r6
    1f8a:	7f 92       	push	r7
    1f8c:	8f 92       	push	r8
    1f8e:	9f 92       	push	r9
    1f90:	af 92       	push	r10
    1f92:	bf 92       	push	r11
    1f94:	cf 92       	push	r12
    1f96:	df 92       	push	r13
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	2c 01       	movw	r4, r24
    1fa4:	5b 01       	movw	r10, r22
    1fa6:	4a 01       	movw	r8, r20
    1fa8:	39 01       	movw	r6, r18
    1faa:	e6 01       	movw	r28, r12
    1fac:	65 ea       	ldi	r22, 0xA5	; 165
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb4:	0e 94 a2 39 	call	0x7344	; 0x7344 <memset>
    1fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbc:	21 e0       	ldi	r18, 0x01	; 1
    1fbe:	82 1a       	sub	r8, r18
    1fc0:	91 08       	sbc	r9, r1
    1fc2:	88 0e       	add	r8, r24
    1fc4:	99 1e       	adc	r9, r25
    1fc6:	a1 14       	cp	r10, r1
    1fc8:	b1 04       	cpc	r11, r1
    1fca:	89 f4       	brne	.+34     	; 0x1fee <prvInitialiseNewTask+0x6a>
    1fcc:	15 c0       	rjmp	.+42     	; 0x1ff8 <prvInitialiseNewTask+0x74>
    1fce:	82 2f       	mov	r24, r18
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	f5 01       	movw	r30, r10
    1fd4:	e8 0f       	add	r30, r24
    1fd6:	f9 1f       	adc	r31, r25
    1fd8:	30 81       	ld	r19, Z
    1fda:	de 01       	movw	r26, r28
    1fdc:	a8 0f       	add	r26, r24
    1fde:	b9 1f       	adc	r27, r25
    1fe0:	5d 96       	adiw	r26, 0x1d	; 29
    1fe2:	3c 93       	st	X, r19
    1fe4:	80 81       	ld	r24, Z
    1fe6:	88 23       	and	r24, r24
    1fe8:	29 f0       	breq	.+10     	; 0x1ff4 <prvInitialiseNewTask+0x70>
    1fea:	2f 5f       	subi	r18, 0xFF	; 255
    1fec:	01 c0       	rjmp	.+2      	; 0x1ff0 <prvInitialiseNewTask+0x6c>
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	20 31       	cpi	r18, 0x10	; 16
    1ff2:	68 f3       	brcs	.-38     	; 0x1fce <prvInitialiseNewTask+0x4a>
    1ff4:	1c a6       	std	Y+44, r1	; 0x2c
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <prvInitialiseNewTask+0x76>
    1ff8:	1d 8e       	std	Y+29, r1	; 0x1d
    1ffa:	0a 30       	cpi	r16, 0x0A	; 10
    1ffc:	08 f0       	brcs	.+2      	; 0x2000 <__DATA_REGION_LENGTH__>
    1ffe:	09 e0       	ldi	r16, 0x09	; 9
    2000:	0a 8f       	std	Y+26, r16	; 0x1a
    2002:	0d a7       	std	Y+45, r16	; 0x2d
    2004:	1e a6       	std	Y+46, r1	; 0x2e
    2006:	ce 01       	movw	r24, r28
    2008:	02 96       	adiw	r24, 0x02	; 2
    200a:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInitialiseItem>
    200e:	ce 01       	movw	r24, r28
    2010:	0e 96       	adiw	r24, 0x0e	; 14
    2012:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInitialiseItem>
    2016:	db 87       	std	Y+11, r29	; 0x0b
    2018:	ca 87       	std	Y+10, r28	; 0x0a
    201a:	8a e0       	ldi	r24, 0x0A	; 10
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	80 1b       	sub	r24, r16
    2024:	91 09       	sbc	r25, r1
    2026:	a1 09       	sbc	r26, r1
    2028:	b1 09       	sbc	r27, r1
    202a:	8e 87       	std	Y+14, r24	; 0x0e
    202c:	9f 87       	std	Y+15, r25	; 0x0f
    202e:	a8 8b       	std	Y+16, r26	; 0x10
    2030:	b9 8b       	std	Y+17, r27	; 0x11
    2032:	df 8b       	std	Y+23, r29	; 0x17
    2034:	ce 8b       	std	Y+22, r28	; 0x16
    2036:	84 e0       	ldi	r24, 0x04	; 4
    2038:	fe 01       	movw	r30, r28
    203a:	bf 96       	adiw	r30, 0x2f	; 47
    203c:	df 01       	movw	r26, r30
    203e:	1d 92       	st	X+, r1
    2040:	8a 95       	dec	r24
    2042:	e9 f7       	brne	.-6      	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    2044:	1b aa       	std	Y+51, r1	; 0x33
    2046:	a3 01       	movw	r20, r6
    2048:	b2 01       	movw	r22, r4
    204a:	c4 01       	movw	r24, r8
    204c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <pxPortInitialiseStack>
    2050:	99 83       	std	Y+1, r25	; 0x01
    2052:	88 83       	st	Y, r24
    2054:	e1 14       	cp	r14, r1
    2056:	f1 04       	cpc	r15, r1
    2058:	19 f0       	breq	.+6      	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    205a:	f7 01       	movw	r30, r14
    205c:	d1 83       	std	Z+1, r29	; 0x01
    205e:	c0 83       	st	Z, r28
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	bf 90       	pop	r11
    2070:	af 90       	pop	r10
    2072:	9f 90       	pop	r9
    2074:	8f 90       	pop	r8
    2076:	7f 90       	pop	r7
    2078:	6f 90       	pop	r6
    207a:	5f 90       	pop	r5
    207c:	4f 90       	pop	r4
    207e:	08 95       	ret

00002080 <prvInitialiseTaskLists>:
    2080:	cf 93       	push	r28
    2082:	c0 e0       	ldi	r28, 0x00	; 0
    2084:	09 c0       	rjmp	.+18     	; 0x2098 <prvInitialiseTaskLists+0x18>
    2086:	2b e0       	ldi	r18, 0x0B	; 11
    2088:	c2 9f       	mul	r28, r18
    208a:	c0 01       	movw	r24, r0
    208c:	11 24       	eor	r1, r1
    208e:	80 5e       	subi	r24, 0xE0	; 224
    2090:	97 4e       	sbci	r25, 0xE7	; 231
    2092:	0e 94 30 07 	call	0xe60	; 0xe60 <vListInitialise>
    2096:	cf 5f       	subi	r28, 0xFF	; 255
    2098:	ca 30       	cpi	r28, 0x0A	; 10
    209a:	a8 f3       	brcs	.-22     	; 0x2086 <prvInitialiseTaskLists+0x6>
    209c:	85 e1       	ldi	r24, 0x15	; 21
    209e:	98 e1       	ldi	r25, 0x18	; 24
    20a0:	0e 94 30 07 	call	0xe60	; 0xe60 <vListInitialise>
    20a4:	8a e0       	ldi	r24, 0x0A	; 10
    20a6:	98 e1       	ldi	r25, 0x18	; 24
    20a8:	0e 94 30 07 	call	0xe60	; 0xe60 <vListInitialise>
    20ac:	8b ef       	ldi	r24, 0xFB	; 251
    20ae:	97 e1       	ldi	r25, 0x17	; 23
    20b0:	0e 94 30 07 	call	0xe60	; 0xe60 <vListInitialise>
    20b4:	80 ef       	ldi	r24, 0xF0	; 240
    20b6:	97 e1       	ldi	r25, 0x17	; 23
    20b8:	0e 94 30 07 	call	0xe60	; 0xe60 <vListInitialise>
    20bc:	84 ee       	ldi	r24, 0xE4	; 228
    20be:	97 e1       	ldi	r25, 0x17	; 23
    20c0:	0e 94 30 07 	call	0xe60	; 0xe60 <vListInitialise>
    20c4:	85 e1       	ldi	r24, 0x15	; 21
    20c6:	98 e1       	ldi	r25, 0x18	; 24
    20c8:	90 93 09 18 	sts	0x1809, r25	; 0x801809 <pxDelayedTaskList+0x1>
    20cc:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <pxDelayedTaskList>
    20d0:	8a e0       	ldi	r24, 0x0A	; 10
    20d2:	98 e1       	ldi	r25, 0x18	; 24
    20d4:	90 93 07 18 	sts	0x1807, r25	; 0x801807 <pxOverflowDelayedTaskList+0x1>
    20d8:	80 93 06 18 	sts	0x1806, r24	; 0x801806 <pxOverflowDelayedTaskList>
    20dc:	cf 91       	pop	r28
    20de:	08 95       	ret

000020e0 <prvAddNewTaskToReadyList>:
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	ec 01       	movw	r28, r24
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	0f 92       	push	r0
    20ec:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxCurrentNumberOfTasks>
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <uxCurrentNumberOfTasks>
    20f6:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    20fa:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    20fe:	89 2b       	or	r24, r25
    2100:	51 f4       	brne	.+20     	; 0x2116 <prvAddNewTaskToReadyList+0x36>
    2102:	d0 93 8f 18 	sts	0x188F, r29	; 0x80188f <pxCurrentTCB+0x1>
    2106:	c0 93 8e 18 	sts	0x188E, r28	; 0x80188e <pxCurrentTCB>
    210a:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxCurrentNumberOfTasks>
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	91 f4       	brne	.+36     	; 0x2136 <prvAddNewTaskToReadyList+0x56>
    2112:	b6 df       	rcall	.-148    	; 0x2080 <prvInitialiseTaskLists>
    2114:	10 c0       	rjmp	.+32     	; 0x2136 <prvAddNewTaskToReadyList+0x56>
    2116:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <xSchedulerRunning>
    211a:	81 11       	cpse	r24, r1
    211c:	0c c0       	rjmp	.+24     	; 0x2136 <prvAddNewTaskToReadyList+0x56>
    211e:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    2122:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2126:	92 8d       	ldd	r25, Z+26	; 0x1a
    2128:	8a 8d       	ldd	r24, Y+26	; 0x1a
    212a:	89 17       	cp	r24, r25
    212c:	20 f0       	brcs	.+8      	; 0x2136 <prvAddNewTaskToReadyList+0x56>
    212e:	d0 93 8f 18 	sts	0x188F, r29	; 0x80188f <pxCurrentTCB+0x1>
    2132:	c0 93 8e 18 	sts	0x188E, r28	; 0x80188e <pxCurrentTCB>
    2136:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <uxTaskNumber>
    213a:	8f 5f       	subi	r24, 0xFF	; 255
    213c:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <uxTaskNumber>
    2140:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2142:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <uxTopReadyPriority>
    2146:	8e 17       	cp	r24, r30
    2148:	10 f4       	brcc	.+4      	; 0x214e <prvAddNewTaskToReadyList+0x6e>
    214a:	e0 93 de 17 	sts	0x17DE, r30	; 0x8017de <uxTopReadyPriority>
    214e:	8b e0       	ldi	r24, 0x0B	; 11
    2150:	8e 9f       	mul	r24, r30
    2152:	f0 01       	movw	r30, r0
    2154:	11 24       	eor	r1, r1
    2156:	e0 5e       	subi	r30, 0xE0	; 224
    2158:	f7 4e       	sbci	r31, 0xE7	; 231
    215a:	01 80       	ldd	r0, Z+1	; 0x01
    215c:	f2 81       	ldd	r31, Z+2	; 0x02
    215e:	e0 2d       	mov	r30, r0
    2160:	ff 83       	std	Y+7, r31	; 0x07
    2162:	ee 83       	std	Y+6, r30	; 0x06
    2164:	26 81       	ldd	r18, Z+6	; 0x06
    2166:	37 81       	ldd	r19, Z+7	; 0x07
    2168:	39 87       	std	Y+9, r19	; 0x09
    216a:	28 87       	std	Y+8, r18	; 0x08
    216c:	a6 81       	ldd	r26, Z+6	; 0x06
    216e:	b7 81       	ldd	r27, Z+7	; 0x07
    2170:	9e 01       	movw	r18, r28
    2172:	2e 5f       	subi	r18, 0xFE	; 254
    2174:	3f 4f       	sbci	r19, 0xFF	; 255
    2176:	15 96       	adiw	r26, 0x05	; 5
    2178:	3c 93       	st	X, r19
    217a:	2e 93       	st	-X, r18
    217c:	14 97       	sbiw	r26, 0x04	; 4
    217e:	37 83       	std	Z+7, r19	; 0x07
    2180:	26 83       	std	Z+6, r18	; 0x06
    2182:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2184:	8e 9f       	mul	r24, r30
    2186:	f0 01       	movw	r30, r0
    2188:	11 24       	eor	r1, r1
    218a:	e0 5e       	subi	r30, 0xE0	; 224
    218c:	f7 4e       	sbci	r31, 0xE7	; 231
    218e:	fd 87       	std	Y+13, r31	; 0x0d
    2190:	ec 87       	std	Y+12, r30	; 0x0c
    2192:	80 81       	ld	r24, Z
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	80 83       	st	Z, r24
    2198:	0f 90       	pop	r0
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <xSchedulerRunning>
    21a0:	88 23       	and	r24, r24
    21a2:	51 f0       	breq	.+20     	; 0x21b8 <prvAddNewTaskToReadyList+0xd8>
    21a4:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    21a8:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    21ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    21ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21b0:	98 17       	cp	r25, r24
    21b2:	10 f4       	brcc	.+4      	; 0x21b8 <prvAddNewTaskToReadyList+0xd8>
    21b4:	0e 94 fe 07 	call	0xffc	; 0xffc <vPortYield>
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <prvCheckTasksWaitingTermination>:
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	1b c0       	rjmp	.+54     	; 0x21fa <prvCheckTasksWaitingTermination+0x3c>
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	0f 92       	push	r0
    21ca:	e0 91 f7 17 	lds	r30, 0x17F7	; 0x8017f7 <xTasksWaitingTermination+0x7>
    21ce:	f0 91 f8 17 	lds	r31, 0x17F8	; 0x8017f8 <xTasksWaitingTermination+0x8>
    21d2:	c0 85       	ldd	r28, Z+8	; 0x08
    21d4:	d1 85       	ldd	r29, Z+9	; 0x09
    21d6:	ce 01       	movw	r24, r28
    21d8:	02 96       	adiw	r24, 0x02	; 2
    21da:	0e 94 82 07 	call	0xf04	; 0xf04 <uxListRemove>
    21de:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxCurrentNumberOfTasks>
    21e2:	81 50       	subi	r24, 0x01	; 1
    21e4:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <uxCurrentNumberOfTasks>
    21e8:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <uxDeletedTasksWaitingCleanUp>
    21ec:	81 50       	subi	r24, 0x01	; 1
    21ee:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <uxDeletedTasksWaitingCleanUp>
    21f2:	0f 90       	pop	r0
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	ce 01       	movw	r24, r28
    21f8:	b8 de       	rcall	.-656    	; 0x1f6a <prvDeleteTCB>
    21fa:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <uxDeletedTasksWaitingCleanUp>
    21fe:	81 11       	cpse	r24, r1
    2200:	e1 cf       	rjmp	.-62     	; 0x21c4 <prvCheckTasksWaitingTermination+0x6>
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	08 95       	ret

00002208 <prvAddCurrentTaskToDelayedList>:
    2208:	8f 92       	push	r8
    220a:	9f 92       	push	r9
    220c:	af 92       	push	r10
    220e:	bf 92       	push	r11
    2210:	cf 92       	push	r12
    2212:	df 92       	push	r13
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	6b 01       	movw	r12, r22
    221e:	7c 01       	movw	r14, r24
    2220:	c4 2f       	mov	r28, r20
    2222:	80 90 df 17 	lds	r8, 0x17DF	; 0x8017df <xTickCount>
    2226:	90 90 e0 17 	lds	r9, 0x17E0	; 0x8017e0 <xTickCount+0x1>
    222a:	a0 90 e1 17 	lds	r10, 0x17E1	; 0x8017e1 <xTickCount+0x2>
    222e:	b0 90 e2 17 	lds	r11, 0x17E2	; 0x8017e2 <xTickCount+0x3>
    2232:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    2236:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    223a:	02 96       	adiw	r24, 0x02	; 2
    223c:	0e 94 82 07 	call	0xf04	; 0xf04 <uxListRemove>
    2240:	8f ef       	ldi	r24, 0xFF	; 255
    2242:	c8 16       	cp	r12, r24
    2244:	d8 06       	cpc	r13, r24
    2246:	e8 06       	cpc	r14, r24
    2248:	f8 06       	cpc	r15, r24
    224a:	b1 f5       	brne	.+108    	; 0x22b8 <prvAddCurrentTaskToDelayedList+0xb0>
    224c:	cc 23       	and	r28, r28
    224e:	a1 f1       	breq	.+104    	; 0x22b8 <prvAddCurrentTaskToDelayedList+0xb0>
    2250:	e4 ee       	ldi	r30, 0xE4	; 228
    2252:	f7 e1       	ldi	r31, 0x17	; 23
    2254:	a1 81       	ldd	r26, Z+1	; 0x01
    2256:	b2 81       	ldd	r27, Z+2	; 0x02
    2258:	c0 91 8e 18 	lds	r28, 0x188E	; 0x80188e <pxCurrentTCB>
    225c:	d0 91 8f 18 	lds	r29, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2260:	bf 83       	std	Y+7, r27	; 0x07
    2262:	ae 83       	std	Y+6, r26	; 0x06
    2264:	c0 91 8e 18 	lds	r28, 0x188E	; 0x80188e <pxCurrentTCB>
    2268:	d0 91 8f 18 	lds	r29, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    226c:	16 96       	adiw	r26, 0x06	; 6
    226e:	8d 91       	ld	r24, X+
    2270:	9c 91       	ld	r25, X
    2272:	17 97       	sbiw	r26, 0x07	; 7
    2274:	99 87       	std	Y+9, r25	; 0x09
    2276:	88 87       	std	Y+8, r24	; 0x08
    2278:	16 96       	adiw	r26, 0x06	; 6
    227a:	cd 91       	ld	r28, X+
    227c:	dc 91       	ld	r29, X
    227e:	17 97       	sbiw	r26, 0x07	; 7
    2280:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    2284:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2288:	02 96       	adiw	r24, 0x02	; 2
    228a:	9d 83       	std	Y+5, r25	; 0x05
    228c:	8c 83       	std	Y+4, r24	; 0x04
    228e:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    2292:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2296:	02 96       	adiw	r24, 0x02	; 2
    2298:	17 96       	adiw	r26, 0x07	; 7
    229a:	9c 93       	st	X, r25
    229c:	8e 93       	st	-X, r24
    229e:	16 97       	sbiw	r26, 0x06	; 6
    22a0:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    22a4:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    22a8:	1d 96       	adiw	r26, 0x0d	; 13
    22aa:	fc 93       	st	X, r31
    22ac:	ee 93       	st	-X, r30
    22ae:	1c 97       	sbiw	r26, 0x0c	; 12
    22b0:	80 81       	ld	r24, Z
    22b2:	8f 5f       	subi	r24, 0xFF	; 255
    22b4:	80 83       	st	Z, r24
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <prvAddCurrentTaskToDelayedList+0x12e>
    22b8:	c8 0c       	add	r12, r8
    22ba:	d9 1c       	adc	r13, r9
    22bc:	ea 1c       	adc	r14, r10
    22be:	fb 1c       	adc	r15, r11
    22c0:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    22c4:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    22c8:	c2 82       	std	Z+2, r12	; 0x02
    22ca:	d3 82       	std	Z+3, r13	; 0x03
    22cc:	e4 82       	std	Z+4, r14	; 0x04
    22ce:	f5 82       	std	Z+5, r15	; 0x05
    22d0:	c8 14       	cp	r12, r8
    22d2:	d9 04       	cpc	r13, r9
    22d4:	ea 04       	cpc	r14, r10
    22d6:	fb 04       	cpc	r15, r11
    22d8:	68 f4       	brcc	.+26     	; 0x22f4 <prvAddCurrentTaskToDelayedList+0xec>
    22da:	60 91 8e 18 	lds	r22, 0x188E	; 0x80188e <pxCurrentTCB>
    22de:	70 91 8f 18 	lds	r23, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    22e2:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <pxOverflowDelayedTaskList>
    22e6:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <pxOverflowDelayedTaskList+0x1>
    22ea:	6e 5f       	subi	r22, 0xFE	; 254
    22ec:	7f 4f       	sbci	r23, 0xFF	; 255
    22ee:	0e 94 45 07 	call	0xe8a	; 0xe8a <vListInsert>
    22f2:	21 c0       	rjmp	.+66     	; 0x2336 <prvAddCurrentTaskToDelayedList+0x12e>
    22f4:	60 91 8e 18 	lds	r22, 0x188E	; 0x80188e <pxCurrentTCB>
    22f8:	70 91 8f 18 	lds	r23, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    22fc:	80 91 08 18 	lds	r24, 0x1808	; 0x801808 <pxDelayedTaskList>
    2300:	90 91 09 18 	lds	r25, 0x1809	; 0x801809 <pxDelayedTaskList+0x1>
    2304:	6e 5f       	subi	r22, 0xFE	; 254
    2306:	7f 4f       	sbci	r23, 0xFF	; 255
    2308:	0e 94 45 07 	call	0xe8a	; 0xe8a <vListInsert>
    230c:	80 91 d2 17 	lds	r24, 0x17D2	; 0x8017d2 <xNextTaskUnblockTime>
    2310:	90 91 d3 17 	lds	r25, 0x17D3	; 0x8017d3 <xNextTaskUnblockTime+0x1>
    2314:	a0 91 d4 17 	lds	r26, 0x17D4	; 0x8017d4 <xNextTaskUnblockTime+0x2>
    2318:	b0 91 d5 17 	lds	r27, 0x17D5	; 0x8017d5 <xNextTaskUnblockTime+0x3>
    231c:	c8 16       	cp	r12, r24
    231e:	d9 06       	cpc	r13, r25
    2320:	ea 06       	cpc	r14, r26
    2322:	fb 06       	cpc	r15, r27
    2324:	40 f4       	brcc	.+16     	; 0x2336 <prvAddCurrentTaskToDelayedList+0x12e>
    2326:	c0 92 d2 17 	sts	0x17D2, r12	; 0x8017d2 <xNextTaskUnblockTime>
    232a:	d0 92 d3 17 	sts	0x17D3, r13	; 0x8017d3 <xNextTaskUnblockTime+0x1>
    232e:	e0 92 d4 17 	sts	0x17D4, r14	; 0x8017d4 <xNextTaskUnblockTime+0x2>
    2332:	f0 92 d5 17 	sts	0x17D5, r15	; 0x8017d5 <xNextTaskUnblockTime+0x3>
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	ff 90       	pop	r15
    233c:	ef 90       	pop	r14
    233e:	df 90       	pop	r13
    2340:	cf 90       	pop	r12
    2342:	bf 90       	pop	r11
    2344:	af 90       	pop	r10
    2346:	9f 90       	pop	r9
    2348:	8f 90       	pop	r8
    234a:	08 95       	ret

0000234c <xTaskCreate>:
    234c:	2f 92       	push	r2
    234e:	3f 92       	push	r3
    2350:	4f 92       	push	r4
    2352:	5f 92       	push	r5
    2354:	6f 92       	push	r6
    2356:	7f 92       	push	r7
    2358:	8f 92       	push	r8
    235a:	9f 92       	push	r9
    235c:	af 92       	push	r10
    235e:	bf 92       	push	r11
    2360:	cf 92       	push	r12
    2362:	df 92       	push	r13
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	3c 01       	movw	r6, r24
    2370:	1b 01       	movw	r2, r22
    2372:	4a 01       	movw	r8, r20
    2374:	29 01       	movw	r4, r18
    2376:	ca 01       	movw	r24, r20
    2378:	0e 94 4a 06 	call	0xc94	; 0xc94 <pvPortMalloc>
    237c:	6c 01       	movw	r12, r24
    237e:	89 2b       	or	r24, r25
    2380:	71 f0       	breq	.+28     	; 0x239e <xTaskCreate+0x52>
    2382:	84 e3       	ldi	r24, 0x34	; 52
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 4a 06 	call	0xc94	; 0xc94 <pvPortMalloc>
    238a:	ec 01       	movw	r28, r24
    238c:	89 2b       	or	r24, r25
    238e:	19 f0       	breq	.+6      	; 0x2396 <xTaskCreate+0x4a>
    2390:	dc 8e       	std	Y+28, r13	; 0x1c
    2392:	cb 8e       	std	Y+27, r12	; 0x1b
    2394:	06 c0       	rjmp	.+12     	; 0x23a2 <xTaskCreate+0x56>
    2396:	c6 01       	movw	r24, r12
    2398:	0e 94 f3 06 	call	0xde6	; 0xde6 <vPortFree>
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <xTaskCreate+0x56>
    239e:	c0 e0       	ldi	r28, 0x00	; 0
    23a0:	d0 e0       	ldi	r29, 0x00	; 0
    23a2:	20 97       	sbiw	r28, 0x00	; 0
    23a4:	61 f0       	breq	.+24     	; 0x23be <xTaskCreate+0x72>
    23a6:	a1 2c       	mov	r10, r1
    23a8:	b1 2c       	mov	r11, r1
    23aa:	6e 01       	movw	r12, r28
    23ac:	92 01       	movw	r18, r4
    23ae:	a4 01       	movw	r20, r8
    23b0:	b1 01       	movw	r22, r2
    23b2:	c3 01       	movw	r24, r6
    23b4:	e7 dd       	rcall	.-1074   	; 0x1f84 <prvInitialiseNewTask>
    23b6:	ce 01       	movw	r24, r28
    23b8:	93 de       	rcall	.-730    	; 0x20e0 <prvAddNewTaskToReadyList>
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <xTaskCreate+0x74>
    23be:	8f ef       	ldi	r24, 0xFF	; 255
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	ef 90       	pop	r14
    23ca:	df 90       	pop	r13
    23cc:	cf 90       	pop	r12
    23ce:	bf 90       	pop	r11
    23d0:	af 90       	pop	r10
    23d2:	9f 90       	pop	r9
    23d4:	8f 90       	pop	r8
    23d6:	7f 90       	pop	r7
    23d8:	6f 90       	pop	r6
    23da:	5f 90       	pop	r5
    23dc:	4f 90       	pop	r4
    23de:	3f 90       	pop	r3
    23e0:	2f 90       	pop	r2
    23e2:	08 95       	ret

000023e4 <vTaskStartScheduler>:
    23e4:	ef 92       	push	r14
    23e6:	ff 92       	push	r15
    23e8:	0f 93       	push	r16
    23ea:	0f 2e       	mov	r0, r31
    23ec:	f0 ed       	ldi	r31, 0xD0	; 208
    23ee:	ef 2e       	mov	r14, r31
    23f0:	f7 e1       	ldi	r31, 0x17	; 23
    23f2:	ff 2e       	mov	r15, r31
    23f4:	f0 2d       	mov	r31, r0
    23f6:	00 e0       	ldi	r16, 0x00	; 0
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 ec       	ldi	r20, 0xC0	; 192
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	64 e9       	ldi	r22, 0x94	; 148
    2402:	73 e0       	ldi	r23, 0x03	; 3
    2404:	8e e4       	ldi	r24, 0x4E	; 78
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	a1 df       	rcall	.-190    	; 0x234c <xTaskCreate>
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	11 f4       	brne	.+4      	; 0x2412 <vTaskStartScheduler+0x2e>
    240e:	0e 94 a5 1c 	call	0x394a	; 0x394a <xTimerCreateTimerTask>
    2412:	81 30       	cpi	r24, 0x01	; 1
    2414:	c9 f4       	brne	.+50     	; 0x2448 <vTaskStartScheduler+0x64>
    2416:	f8 94       	cli
    2418:	8f ef       	ldi	r24, 0xFF	; 255
    241a:	9f ef       	ldi	r25, 0xFF	; 255
    241c:	dc 01       	movw	r26, r24
    241e:	80 93 d2 17 	sts	0x17D2, r24	; 0x8017d2 <xNextTaskUnblockTime>
    2422:	90 93 d3 17 	sts	0x17D3, r25	; 0x8017d3 <xNextTaskUnblockTime+0x1>
    2426:	a0 93 d4 17 	sts	0x17D4, r26	; 0x8017d4 <xNextTaskUnblockTime+0x2>
    242a:	b0 93 d5 17 	sts	0x17D5, r27	; 0x8017d5 <xNextTaskUnblockTime+0x3>
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	80 93 dd 17 	sts	0x17DD, r24	; 0x8017dd <xSchedulerRunning>
    2434:	10 92 df 17 	sts	0x17DF, r1	; 0x8017df <xTickCount>
    2438:	10 92 e0 17 	sts	0x17E0, r1	; 0x8017e0 <xTickCount+0x1>
    243c:	10 92 e1 17 	sts	0x17E1, r1	; 0x8017e1 <xTickCount+0x2>
    2440:	10 92 e2 17 	sts	0x17E2, r1	; 0x8017e2 <xTickCount+0x3>
    2444:	0e 94 cc 07 	call	0xf98	; 0xf98 <xPortStartScheduler>
    2448:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	08 95       	ret

00002454 <vTaskSuspendAll>:
    2454:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <uxSchedulerSuspended>
    2458:	8f 5f       	subi	r24, 0xFF	; 255
    245a:	80 93 cf 17 	sts	0x17CF, r24	; 0x8017cf <uxSchedulerSuspended>
    245e:	08 95       	ret

00002460 <xTaskGetTickCount>:
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	0f 92       	push	r0
    2466:	60 91 df 17 	lds	r22, 0x17DF	; 0x8017df <xTickCount>
    246a:	70 91 e0 17 	lds	r23, 0x17E0	; 0x8017e0 <xTickCount+0x1>
    246e:	80 91 e1 17 	lds	r24, 0x17E1	; 0x8017e1 <xTickCount+0x2>
    2472:	90 91 e2 17 	lds	r25, 0x17E2	; 0x8017e2 <xTickCount+0x3>
    2476:	0f 90       	pop	r0
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	08 95       	ret

0000247c <xTaskIncrementTick>:
    247c:	cf 92       	push	r12
    247e:	df 92       	push	r13
    2480:	ef 92       	push	r14
    2482:	ff 92       	push	r15
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <uxSchedulerSuspended>
    248c:	81 11       	cpse	r24, r1
    248e:	05 c1       	rjmp	.+522    	; 0x269a <xTaskIncrementTick+0x21e>
    2490:	c0 90 df 17 	lds	r12, 0x17DF	; 0x8017df <xTickCount>
    2494:	d0 90 e0 17 	lds	r13, 0x17E0	; 0x8017e0 <xTickCount+0x1>
    2498:	e0 90 e1 17 	lds	r14, 0x17E1	; 0x8017e1 <xTickCount+0x2>
    249c:	f0 90 e2 17 	lds	r15, 0x17E2	; 0x8017e2 <xTickCount+0x3>
    24a0:	8f ef       	ldi	r24, 0xFF	; 255
    24a2:	c8 1a       	sub	r12, r24
    24a4:	d8 0a       	sbc	r13, r24
    24a6:	e8 0a       	sbc	r14, r24
    24a8:	f8 0a       	sbc	r15, r24
    24aa:	c0 92 df 17 	sts	0x17DF, r12	; 0x8017df <xTickCount>
    24ae:	d0 92 e0 17 	sts	0x17E0, r13	; 0x8017e0 <xTickCount+0x1>
    24b2:	e0 92 e1 17 	sts	0x17E1, r14	; 0x8017e1 <xTickCount+0x2>
    24b6:	f0 92 e2 17 	sts	0x17E2, r15	; 0x8017e2 <xTickCount+0x3>
    24ba:	c1 14       	cp	r12, r1
    24bc:	d1 04       	cpc	r13, r1
    24be:	e1 04       	cpc	r14, r1
    24c0:	f1 04       	cpc	r15, r1
    24c2:	b1 f4       	brne	.+44     	; 0x24f0 <xTaskIncrementTick+0x74>
    24c4:	80 91 08 18 	lds	r24, 0x1808	; 0x801808 <pxDelayedTaskList>
    24c8:	90 91 09 18 	lds	r25, 0x1809	; 0x801809 <pxDelayedTaskList+0x1>
    24cc:	20 91 06 18 	lds	r18, 0x1806	; 0x801806 <pxOverflowDelayedTaskList>
    24d0:	30 91 07 18 	lds	r19, 0x1807	; 0x801807 <pxOverflowDelayedTaskList+0x1>
    24d4:	30 93 09 18 	sts	0x1809, r19	; 0x801809 <pxDelayedTaskList+0x1>
    24d8:	20 93 08 18 	sts	0x1808, r18	; 0x801808 <pxDelayedTaskList>
    24dc:	90 93 07 18 	sts	0x1807, r25	; 0x801807 <pxOverflowDelayedTaskList+0x1>
    24e0:	80 93 06 18 	sts	0x1806, r24	; 0x801806 <pxOverflowDelayedTaskList>
    24e4:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xNumOfOverflows>
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	80 93 d7 17 	sts	0x17D7, r24	; 0x8017d7 <xNumOfOverflows>
    24ee:	16 dd       	rcall	.-1492   	; 0x1f1c <prvResetNextTaskUnblockTime>
    24f0:	80 91 d2 17 	lds	r24, 0x17D2	; 0x8017d2 <xNextTaskUnblockTime>
    24f4:	90 91 d3 17 	lds	r25, 0x17D3	; 0x8017d3 <xNextTaskUnblockTime+0x1>
    24f8:	a0 91 d4 17 	lds	r26, 0x17D4	; 0x8017d4 <xNextTaskUnblockTime+0x2>
    24fc:	b0 91 d5 17 	lds	r27, 0x17D5	; 0x8017d5 <xNextTaskUnblockTime+0x3>
    2500:	c8 16       	cp	r12, r24
    2502:	d9 06       	cpc	r13, r25
    2504:	ea 06       	cpc	r14, r26
    2506:	fb 06       	cpc	r15, r27
    2508:	20 f4       	brcc	.+8      	; 0x2512 <xTaskIncrementTick+0x96>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	b2 c0       	rjmp	.+356    	; 0x2672 <xTaskIncrementTick+0x1f6>
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <xTaskIncrementTick+0x98>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	e0 91 08 18 	lds	r30, 0x1808	; 0x801808 <pxDelayedTaskList>
    2518:	f0 91 09 18 	lds	r31, 0x1809	; 0x801809 <pxDelayedTaskList+0x1>
    251c:	90 81       	ld	r25, Z
    251e:	91 11       	cpse	r25, r1
    2520:	0c c0       	rjmp	.+24     	; 0x253a <xTaskIncrementTick+0xbe>
    2522:	4f ef       	ldi	r20, 0xFF	; 255
    2524:	5f ef       	ldi	r21, 0xFF	; 255
    2526:	ba 01       	movw	r22, r20
    2528:	40 93 d2 17 	sts	0x17D2, r20	; 0x8017d2 <xNextTaskUnblockTime>
    252c:	50 93 d3 17 	sts	0x17D3, r21	; 0x8017d3 <xNextTaskUnblockTime+0x1>
    2530:	60 93 d4 17 	sts	0x17D4, r22	; 0x8017d4 <xNextTaskUnblockTime+0x2>
    2534:	70 93 d5 17 	sts	0x17D5, r23	; 0x8017d5 <xNextTaskUnblockTime+0x3>
    2538:	9c c0       	rjmp	.+312    	; 0x2672 <xTaskIncrementTick+0x1f6>
    253a:	e0 91 08 18 	lds	r30, 0x1808	; 0x801808 <pxDelayedTaskList>
    253e:	f0 91 09 18 	lds	r31, 0x1809	; 0x801809 <pxDelayedTaskList+0x1>
    2542:	07 80       	ldd	r0, Z+7	; 0x07
    2544:	f0 85       	ldd	r31, Z+8	; 0x08
    2546:	e0 2d       	mov	r30, r0
    2548:	00 84       	ldd	r0, Z+8	; 0x08
    254a:	f1 85       	ldd	r31, Z+9	; 0x09
    254c:	e0 2d       	mov	r30, r0
    254e:	42 81       	ldd	r20, Z+2	; 0x02
    2550:	53 81       	ldd	r21, Z+3	; 0x03
    2552:	64 81       	ldd	r22, Z+4	; 0x04
    2554:	75 81       	ldd	r23, Z+5	; 0x05
    2556:	c4 16       	cp	r12, r20
    2558:	d5 06       	cpc	r13, r21
    255a:	e6 06       	cpc	r14, r22
    255c:	f7 06       	cpc	r15, r23
    255e:	48 f4       	brcc	.+18     	; 0x2572 <xTaskIncrementTick+0xf6>
    2560:	40 93 d2 17 	sts	0x17D2, r20	; 0x8017d2 <xNextTaskUnblockTime>
    2564:	50 93 d3 17 	sts	0x17D3, r21	; 0x8017d3 <xNextTaskUnblockTime+0x1>
    2568:	60 93 d4 17 	sts	0x17D4, r22	; 0x8017d4 <xNextTaskUnblockTime+0x2>
    256c:	70 93 d5 17 	sts	0x17D5, r23	; 0x8017d5 <xNextTaskUnblockTime+0x3>
    2570:	80 c0       	rjmp	.+256    	; 0x2672 <xTaskIncrementTick+0x1f6>
    2572:	a4 85       	ldd	r26, Z+12	; 0x0c
    2574:	b5 85       	ldd	r27, Z+13	; 0x0d
    2576:	c6 81       	ldd	r28, Z+6	; 0x06
    2578:	d7 81       	ldd	r29, Z+7	; 0x07
    257a:	20 85       	ldd	r18, Z+8	; 0x08
    257c:	31 85       	ldd	r19, Z+9	; 0x09
    257e:	3f 83       	std	Y+7, r19	; 0x07
    2580:	2e 83       	std	Y+6, r18	; 0x06
    2582:	c0 85       	ldd	r28, Z+8	; 0x08
    2584:	d1 85       	ldd	r29, Z+9	; 0x09
    2586:	26 81       	ldd	r18, Z+6	; 0x06
    2588:	37 81       	ldd	r19, Z+7	; 0x07
    258a:	3d 83       	std	Y+5, r19	; 0x05
    258c:	2c 83       	std	Y+4, r18	; 0x04
    258e:	11 96       	adiw	r26, 0x01	; 1
    2590:	4d 91       	ld	r20, X+
    2592:	5c 91       	ld	r21, X
    2594:	12 97       	sbiw	r26, 0x02	; 2
    2596:	9f 01       	movw	r18, r30
    2598:	2e 5f       	subi	r18, 0xFE	; 254
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	42 17       	cp	r20, r18
    259e:	53 07       	cpc	r21, r19
    25a0:	31 f4       	brne	.+12     	; 0x25ae <xTaskIncrementTick+0x132>
    25a2:	40 85       	ldd	r20, Z+8	; 0x08
    25a4:	51 85       	ldd	r21, Z+9	; 0x09
    25a6:	12 96       	adiw	r26, 0x02	; 2
    25a8:	5c 93       	st	X, r21
    25aa:	4e 93       	st	-X, r20
    25ac:	11 97       	sbiw	r26, 0x01	; 1
    25ae:	15 86       	std	Z+13, r1	; 0x0d
    25b0:	14 86       	std	Z+12, r1	; 0x0c
    25b2:	9c 91       	ld	r25, X
    25b4:	91 50       	subi	r25, 0x01	; 1
    25b6:	9c 93       	st	X, r25
    25b8:	a0 8d       	ldd	r26, Z+24	; 0x18
    25ba:	b1 8d       	ldd	r27, Z+25	; 0x19
    25bc:	10 97       	sbiw	r26, 0x00	; 0
    25be:	09 f1       	breq	.+66     	; 0x2602 <xTaskIncrementTick+0x186>
    25c0:	c2 89       	ldd	r28, Z+18	; 0x12
    25c2:	d3 89       	ldd	r29, Z+19	; 0x13
    25c4:	44 89       	ldd	r20, Z+20	; 0x14
    25c6:	55 89       	ldd	r21, Z+21	; 0x15
    25c8:	5f 83       	std	Y+7, r21	; 0x07
    25ca:	4e 83       	std	Y+6, r20	; 0x06
    25cc:	c4 89       	ldd	r28, Z+20	; 0x14
    25ce:	d5 89       	ldd	r29, Z+21	; 0x15
    25d0:	42 89       	ldd	r20, Z+18	; 0x12
    25d2:	53 89       	ldd	r21, Z+19	; 0x13
    25d4:	5d 83       	std	Y+5, r21	; 0x05
    25d6:	4c 83       	std	Y+4, r20	; 0x04
    25d8:	11 96       	adiw	r26, 0x01	; 1
    25da:	6d 91       	ld	r22, X+
    25dc:	7c 91       	ld	r23, X
    25de:	12 97       	sbiw	r26, 0x02	; 2
    25e0:	af 01       	movw	r20, r30
    25e2:	42 5f       	subi	r20, 0xF2	; 242
    25e4:	5f 4f       	sbci	r21, 0xFF	; 255
    25e6:	64 17       	cp	r22, r20
    25e8:	75 07       	cpc	r23, r21
    25ea:	31 f4       	brne	.+12     	; 0x25f8 <xTaskIncrementTick+0x17c>
    25ec:	44 89       	ldd	r20, Z+20	; 0x14
    25ee:	55 89       	ldd	r21, Z+21	; 0x15
    25f0:	12 96       	adiw	r26, 0x02	; 2
    25f2:	5c 93       	st	X, r21
    25f4:	4e 93       	st	-X, r20
    25f6:	11 97       	sbiw	r26, 0x01	; 1
    25f8:	11 8e       	std	Z+25, r1	; 0x19
    25fa:	10 8e       	std	Z+24, r1	; 0x18
    25fc:	9c 91       	ld	r25, X
    25fe:	91 50       	subi	r25, 0x01	; 1
    2600:	9c 93       	st	X, r25
    2602:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2604:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <uxTopReadyPriority>
    2608:	9a 17       	cp	r25, r26
    260a:	10 f4       	brcc	.+4      	; 0x2610 <xTaskIncrementTick+0x194>
    260c:	a0 93 de 17 	sts	0x17DE, r26	; 0x8017de <uxTopReadyPriority>
    2610:	9b e0       	ldi	r25, 0x0B	; 11
    2612:	9a 9f       	mul	r25, r26
    2614:	d0 01       	movw	r26, r0
    2616:	11 24       	eor	r1, r1
    2618:	a0 5e       	subi	r26, 0xE0	; 224
    261a:	b7 4e       	sbci	r27, 0xE7	; 231
    261c:	11 96       	adiw	r26, 0x01	; 1
    261e:	0d 90       	ld	r0, X+
    2620:	bc 91       	ld	r27, X
    2622:	a0 2d       	mov	r26, r0
    2624:	b7 83       	std	Z+7, r27	; 0x07
    2626:	a6 83       	std	Z+6, r26	; 0x06
    2628:	16 96       	adiw	r26, 0x06	; 6
    262a:	4d 91       	ld	r20, X+
    262c:	5c 91       	ld	r21, X
    262e:	17 97       	sbiw	r26, 0x07	; 7
    2630:	51 87       	std	Z+9, r21	; 0x09
    2632:	40 87       	std	Z+8, r20	; 0x08
    2634:	16 96       	adiw	r26, 0x06	; 6
    2636:	cd 91       	ld	r28, X+
    2638:	dc 91       	ld	r29, X
    263a:	17 97       	sbiw	r26, 0x07	; 7
    263c:	3d 83       	std	Y+5, r19	; 0x05
    263e:	2c 83       	std	Y+4, r18	; 0x04
    2640:	17 96       	adiw	r26, 0x07	; 7
    2642:	3c 93       	st	X, r19
    2644:	2e 93       	st	-X, r18
    2646:	16 97       	sbiw	r26, 0x06	; 6
    2648:	a2 8d       	ldd	r26, Z+26	; 0x1a
    264a:	9a 9f       	mul	r25, r26
    264c:	d0 01       	movw	r26, r0
    264e:	11 24       	eor	r1, r1
    2650:	a0 5e       	subi	r26, 0xE0	; 224
    2652:	b7 4e       	sbci	r27, 0xE7	; 231
    2654:	b5 87       	std	Z+13, r27	; 0x0d
    2656:	a4 87       	std	Z+12, r26	; 0x0c
    2658:	9c 91       	ld	r25, X
    265a:	9f 5f       	subi	r25, 0xFF	; 255
    265c:	9c 93       	st	X, r25
    265e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2660:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    2664:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2668:	92 8d       	ldd	r25, Z+26	; 0x1a
    266a:	29 17       	cp	r18, r25
    266c:	08 f0       	brcs	.+2      	; 0x2670 <xTaskIncrementTick+0x1f4>
    266e:	4f cf       	rjmp	.-354    	; 0x250e <xTaskIncrementTick+0x92>
    2670:	51 cf       	rjmp	.-350    	; 0x2514 <xTaskIncrementTick+0x98>
    2672:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    2676:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    267a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    267c:	9b e0       	ldi	r25, 0x0B	; 11
    267e:	e9 9f       	mul	r30, r25
    2680:	f0 01       	movw	r30, r0
    2682:	11 24       	eor	r1, r1
    2684:	e0 5e       	subi	r30, 0xE0	; 224
    2686:	f7 4e       	sbci	r31, 0xE7	; 231
    2688:	90 81       	ld	r25, Z
    268a:	92 30       	cpi	r25, 0x02	; 2
    268c:	08 f0       	brcs	.+2      	; 0x2690 <xTaskIncrementTick+0x214>
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xYieldPending>
    2694:	91 11       	cpse	r25, r1
    2696:	16 c0       	rjmp	.+44     	; 0x26c4 <xTaskIncrementTick+0x248>
    2698:	16 c0       	rjmp	.+44     	; 0x26c6 <xTaskIncrementTick+0x24a>
    269a:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <xPendedTicks>
    269e:	90 91 da 17 	lds	r25, 0x17DA	; 0x8017da <xPendedTicks+0x1>
    26a2:	a0 91 db 17 	lds	r26, 0x17DB	; 0x8017db <xPendedTicks+0x2>
    26a6:	b0 91 dc 17 	lds	r27, 0x17DC	; 0x8017dc <xPendedTicks+0x3>
    26aa:	01 96       	adiw	r24, 0x01	; 1
    26ac:	a1 1d       	adc	r26, r1
    26ae:	b1 1d       	adc	r27, r1
    26b0:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <xPendedTicks>
    26b4:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <xPendedTicks+0x1>
    26b8:	a0 93 db 17 	sts	0x17DB, r26	; 0x8017db <xPendedTicks+0x2>
    26bc:	b0 93 dc 17 	sts	0x17DC, r27	; 0x8017dc <xPendedTicks+0x3>
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	01 c0       	rjmp	.+2      	; 0x26c6 <xTaskIncrementTick+0x24a>
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	ff 90       	pop	r15
    26cc:	ef 90       	pop	r14
    26ce:	df 90       	pop	r13
    26d0:	cf 90       	pop	r12
    26d2:	08 95       	ret

000026d4 <xTaskResumeAll>:
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	0f 92       	push	r0
    26e6:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <uxSchedulerSuspended>
    26ea:	81 50       	subi	r24, 0x01	; 1
    26ec:	80 93 cf 17 	sts	0x17CF, r24	; 0x8017cf <uxSchedulerSuspended>
    26f0:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <uxSchedulerSuspended>
    26f4:	81 11       	cpse	r24, r1
    26f6:	be c0       	rjmp	.+380    	; 0x2874 <xTaskResumeAll+0x1a0>
    26f8:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <uxCurrentNumberOfTasks>
    26fc:	81 11       	cpse	r24, r1
    26fe:	88 c0       	rjmp	.+272    	; 0x2810 <xTaskResumeAll+0x13c>
    2700:	bc c0       	rjmp	.+376    	; 0x287a <xTaskResumeAll+0x1a6>
    2702:	e0 91 02 18 	lds	r30, 0x1802	; 0x801802 <xPendingReadyList+0x7>
    2706:	f0 91 03 18 	lds	r31, 0x1803	; 0x801803 <xPendingReadyList+0x8>
    270a:	00 84       	ldd	r0, Z+8	; 0x08
    270c:	f1 85       	ldd	r31, Z+9	; 0x09
    270e:	e0 2d       	mov	r30, r0
    2710:	a0 8d       	ldd	r26, Z+24	; 0x18
    2712:	b1 8d       	ldd	r27, Z+25	; 0x19
    2714:	c2 89       	ldd	r28, Z+18	; 0x12
    2716:	d3 89       	ldd	r29, Z+19	; 0x13
    2718:	84 89       	ldd	r24, Z+20	; 0x14
    271a:	95 89       	ldd	r25, Z+21	; 0x15
    271c:	9f 83       	std	Y+7, r25	; 0x07
    271e:	8e 83       	std	Y+6, r24	; 0x06
    2720:	c4 89       	ldd	r28, Z+20	; 0x14
    2722:	d5 89       	ldd	r29, Z+21	; 0x15
    2724:	82 89       	ldd	r24, Z+18	; 0x12
    2726:	93 89       	ldd	r25, Z+19	; 0x13
    2728:	9d 83       	std	Y+5, r25	; 0x05
    272a:	8c 83       	std	Y+4, r24	; 0x04
    272c:	11 96       	adiw	r26, 0x01	; 1
    272e:	2d 91       	ld	r18, X+
    2730:	3c 91       	ld	r19, X
    2732:	12 97       	sbiw	r26, 0x02	; 2
    2734:	cf 01       	movw	r24, r30
    2736:	0e 96       	adiw	r24, 0x0e	; 14
    2738:	28 17       	cp	r18, r24
    273a:	39 07       	cpc	r19, r25
    273c:	31 f4       	brne	.+12     	; 0x274a <xTaskResumeAll+0x76>
    273e:	84 89       	ldd	r24, Z+20	; 0x14
    2740:	95 89       	ldd	r25, Z+21	; 0x15
    2742:	12 96       	adiw	r26, 0x02	; 2
    2744:	9c 93       	st	X, r25
    2746:	8e 93       	st	-X, r24
    2748:	11 97       	sbiw	r26, 0x01	; 1
    274a:	11 8e       	std	Z+25, r1	; 0x19
    274c:	10 8e       	std	Z+24, r1	; 0x18
    274e:	8c 91       	ld	r24, X
    2750:	81 50       	subi	r24, 0x01	; 1
    2752:	8c 93       	st	X, r24
    2754:	a4 85       	ldd	r26, Z+12	; 0x0c
    2756:	b5 85       	ldd	r27, Z+13	; 0x0d
    2758:	c6 81       	ldd	r28, Z+6	; 0x06
    275a:	d7 81       	ldd	r29, Z+7	; 0x07
    275c:	80 85       	ldd	r24, Z+8	; 0x08
    275e:	91 85       	ldd	r25, Z+9	; 0x09
    2760:	9f 83       	std	Y+7, r25	; 0x07
    2762:	8e 83       	std	Y+6, r24	; 0x06
    2764:	c0 85       	ldd	r28, Z+8	; 0x08
    2766:	d1 85       	ldd	r29, Z+9	; 0x09
    2768:	86 81       	ldd	r24, Z+6	; 0x06
    276a:	97 81       	ldd	r25, Z+7	; 0x07
    276c:	9d 83       	std	Y+5, r25	; 0x05
    276e:	8c 83       	std	Y+4, r24	; 0x04
    2770:	11 96       	adiw	r26, 0x01	; 1
    2772:	8d 91       	ld	r24, X+
    2774:	9c 91       	ld	r25, X
    2776:	12 97       	sbiw	r26, 0x02	; 2
    2778:	9f 01       	movw	r18, r30
    277a:	2e 5f       	subi	r18, 0xFE	; 254
    277c:	3f 4f       	sbci	r19, 0xFF	; 255
    277e:	82 17       	cp	r24, r18
    2780:	93 07       	cpc	r25, r19
    2782:	31 f4       	brne	.+12     	; 0x2790 <xTaskResumeAll+0xbc>
    2784:	80 85       	ldd	r24, Z+8	; 0x08
    2786:	91 85       	ldd	r25, Z+9	; 0x09
    2788:	12 96       	adiw	r26, 0x02	; 2
    278a:	9c 93       	st	X, r25
    278c:	8e 93       	st	-X, r24
    278e:	11 97       	sbiw	r26, 0x01	; 1
    2790:	15 86       	std	Z+13, r1	; 0x0d
    2792:	14 86       	std	Z+12, r1	; 0x0c
    2794:	8c 91       	ld	r24, X
    2796:	81 50       	subi	r24, 0x01	; 1
    2798:	8c 93       	st	X, r24
    279a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    279c:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <uxTopReadyPriority>
    27a0:	8a 17       	cp	r24, r26
    27a2:	10 f4       	brcc	.+4      	; 0x27a8 <xTaskResumeAll+0xd4>
    27a4:	a0 93 de 17 	sts	0x17DE, r26	; 0x8017de <uxTopReadyPriority>
    27a8:	8b e0       	ldi	r24, 0x0B	; 11
    27aa:	8a 9f       	mul	r24, r26
    27ac:	d0 01       	movw	r26, r0
    27ae:	11 24       	eor	r1, r1
    27b0:	a0 5e       	subi	r26, 0xE0	; 224
    27b2:	b7 4e       	sbci	r27, 0xE7	; 231
    27b4:	11 96       	adiw	r26, 0x01	; 1
    27b6:	0d 90       	ld	r0, X+
    27b8:	bc 91       	ld	r27, X
    27ba:	a0 2d       	mov	r26, r0
    27bc:	b7 83       	std	Z+7, r27	; 0x07
    27be:	a6 83       	std	Z+6, r26	; 0x06
    27c0:	16 96       	adiw	r26, 0x06	; 6
    27c2:	4d 91       	ld	r20, X+
    27c4:	5c 91       	ld	r21, X
    27c6:	17 97       	sbiw	r26, 0x07	; 7
    27c8:	51 87       	std	Z+9, r21	; 0x09
    27ca:	40 87       	std	Z+8, r20	; 0x08
    27cc:	16 96       	adiw	r26, 0x06	; 6
    27ce:	cd 91       	ld	r28, X+
    27d0:	dc 91       	ld	r29, X
    27d2:	17 97       	sbiw	r26, 0x07	; 7
    27d4:	3d 83       	std	Y+5, r19	; 0x05
    27d6:	2c 83       	std	Y+4, r18	; 0x04
    27d8:	17 96       	adiw	r26, 0x07	; 7
    27da:	3c 93       	st	X, r19
    27dc:	2e 93       	st	-X, r18
    27de:	16 97       	sbiw	r26, 0x06	; 6
    27e0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27e2:	8a 9f       	mul	r24, r26
    27e4:	d0 01       	movw	r26, r0
    27e6:	11 24       	eor	r1, r1
    27e8:	a0 5e       	subi	r26, 0xE0	; 224
    27ea:	b7 4e       	sbci	r27, 0xE7	; 231
    27ec:	b5 87       	std	Z+13, r27	; 0x0d
    27ee:	a4 87       	std	Z+12, r26	; 0x0c
    27f0:	8c 91       	ld	r24, X
    27f2:	8f 5f       	subi	r24, 0xFF	; 255
    27f4:	8c 93       	st	X, r24
    27f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    27f8:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    27fc:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2800:	5a 96       	adiw	r26, 0x1a	; 26
    2802:	8c 91       	ld	r24, X
    2804:	98 17       	cp	r25, r24
    2806:	30 f0       	brcs	.+12     	; 0x2814 <xTaskResumeAll+0x140>
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <xYieldPending>
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <xTaskResumeAll+0x140>
    2810:	e0 e0       	ldi	r30, 0x00	; 0
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <xPendingReadyList>
    2818:	81 11       	cpse	r24, r1
    281a:	73 cf       	rjmp	.-282    	; 0x2702 <xTaskResumeAll+0x2e>
    281c:	ef 2b       	or	r30, r31
    281e:	09 f0       	breq	.+2      	; 0x2822 <xTaskResumeAll+0x14e>
    2820:	7d db       	rcall	.-2310   	; 0x1f1c <prvResetNextTaskUnblockTime>
    2822:	c0 90 d9 17 	lds	r12, 0x17D9	; 0x8017d9 <xPendedTicks>
    2826:	d0 90 da 17 	lds	r13, 0x17DA	; 0x8017da <xPendedTicks+0x1>
    282a:	e0 90 db 17 	lds	r14, 0x17DB	; 0x8017db <xPendedTicks+0x2>
    282e:	f0 90 dc 17 	lds	r15, 0x17DC	; 0x8017dc <xPendedTicks+0x3>
    2832:	c1 14       	cp	r12, r1
    2834:	d1 04       	cpc	r13, r1
    2836:	e1 04       	cpc	r14, r1
    2838:	f1 04       	cpc	r15, r1
    283a:	a1 f0       	breq	.+40     	; 0x2864 <xTaskResumeAll+0x190>
    283c:	1f de       	rcall	.-962    	; 0x247c <xTaskIncrementTick>
    283e:	88 23       	and	r24, r24
    2840:	19 f0       	breq	.+6      	; 0x2848 <xTaskResumeAll+0x174>
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <xYieldPending>
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	c8 1a       	sub	r12, r24
    284c:	d1 08       	sbc	r13, r1
    284e:	e1 08       	sbc	r14, r1
    2850:	f1 08       	sbc	r15, r1
    2852:	a1 f7       	brne	.-24     	; 0x283c <xTaskResumeAll+0x168>
    2854:	10 92 d9 17 	sts	0x17D9, r1	; 0x8017d9 <xPendedTicks>
    2858:	10 92 da 17 	sts	0x17DA, r1	; 0x8017da <xPendedTicks+0x1>
    285c:	10 92 db 17 	sts	0x17DB, r1	; 0x8017db <xPendedTicks+0x2>
    2860:	10 92 dc 17 	sts	0x17DC, r1	; 0x8017dc <xPendedTicks+0x3>
    2864:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <xYieldPending>
    2868:	88 23       	and	r24, r24
    286a:	31 f0       	breq	.+12     	; 0x2878 <xTaskResumeAll+0x1a4>
    286c:	0e 94 fe 07 	call	0xffc	; 0xffc <vPortYield>
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	03 c0       	rjmp	.+6      	; 0x287a <xTaskResumeAll+0x1a6>
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	01 c0       	rjmp	.+2      	; 0x287a <xTaskResumeAll+0x1a6>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	0f 90       	pop	r0
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	ff 90       	pop	r15
    2884:	ef 90       	pop	r14
    2886:	df 90       	pop	r13
    2888:	cf 90       	pop	r12
    288a:	08 95       	ret

0000288c <xTaskDelayUntil>:
    288c:	8f 92       	push	r8
    288e:	9f 92       	push	r9
    2890:	af 92       	push	r10
    2892:	bf 92       	push	r11
    2894:	cf 92       	push	r12
    2896:	df 92       	push	r13
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	1f 93       	push	r17
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	ec 01       	movw	r28, r24
    28a4:	6a 01       	movw	r12, r20
    28a6:	7b 01       	movw	r14, r22
    28a8:	d5 dd       	rcall	.-1110   	; 0x2454 <vTaskSuspendAll>
    28aa:	80 90 df 17 	lds	r8, 0x17DF	; 0x8017df <xTickCount>
    28ae:	90 90 e0 17 	lds	r9, 0x17E0	; 0x8017e0 <xTickCount+0x1>
    28b2:	a0 90 e1 17 	lds	r10, 0x17E1	; 0x8017e1 <xTickCount+0x2>
    28b6:	b0 90 e2 17 	lds	r11, 0x17E2	; 0x8017e2 <xTickCount+0x3>
    28ba:	88 81       	ld	r24, Y
    28bc:	99 81       	ldd	r25, Y+1	; 0x01
    28be:	aa 81       	ldd	r26, Y+2	; 0x02
    28c0:	bb 81       	ldd	r27, Y+3	; 0x03
    28c2:	ac 01       	movw	r20, r24
    28c4:	bd 01       	movw	r22, r26
    28c6:	4c 0d       	add	r20, r12
    28c8:	5d 1d       	adc	r21, r13
    28ca:	6e 1d       	adc	r22, r14
    28cc:	7f 1d       	adc	r23, r15
    28ce:	88 16       	cp	r8, r24
    28d0:	99 06       	cpc	r9, r25
    28d2:	aa 06       	cpc	r10, r26
    28d4:	bb 06       	cpc	r11, r27
    28d6:	60 f4       	brcc	.+24     	; 0x28f0 <xTaskDelayUntil+0x64>
    28d8:	48 17       	cp	r20, r24
    28da:	59 07       	cpc	r21, r25
    28dc:	6a 07       	cpc	r22, r26
    28de:	7b 07       	cpc	r23, r27
    28e0:	98 f4       	brcc	.+38     	; 0x2908 <xTaskDelayUntil+0x7c>
    28e2:	84 16       	cp	r8, r20
    28e4:	95 06       	cpc	r9, r21
    28e6:	a6 06       	cpc	r10, r22
    28e8:	b7 06       	cpc	r11, r23
    28ea:	80 f0       	brcs	.+32     	; 0x290c <xTaskDelayUntil+0x80>
    28ec:	10 e0       	ldi	r17, 0x00	; 0
    28ee:	13 c0       	rjmp	.+38     	; 0x2916 <xTaskDelayUntil+0x8a>
    28f0:	48 17       	cp	r20, r24
    28f2:	59 07       	cpc	r21, r25
    28f4:	6a 07       	cpc	r22, r26
    28f6:	7b 07       	cpc	r23, r27
    28f8:	58 f0       	brcs	.+22     	; 0x2910 <xTaskDelayUntil+0x84>
    28fa:	84 16       	cp	r8, r20
    28fc:	95 06       	cpc	r9, r21
    28fe:	a6 06       	cpc	r10, r22
    2900:	b7 06       	cpc	r11, r23
    2902:	40 f0       	brcs	.+16     	; 0x2914 <xTaskDelayUntil+0x88>
    2904:	10 e0       	ldi	r17, 0x00	; 0
    2906:	07 c0       	rjmp	.+14     	; 0x2916 <xTaskDelayUntil+0x8a>
    2908:	10 e0       	ldi	r17, 0x00	; 0
    290a:	05 c0       	rjmp	.+10     	; 0x2916 <xTaskDelayUntil+0x8a>
    290c:	11 e0       	ldi	r17, 0x01	; 1
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <xTaskDelayUntil+0x8a>
    2910:	11 e0       	ldi	r17, 0x01	; 1
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <xTaskDelayUntil+0x8a>
    2914:	11 e0       	ldi	r17, 0x01	; 1
    2916:	48 83       	st	Y, r20
    2918:	59 83       	std	Y+1, r21	; 0x01
    291a:	6a 83       	std	Y+2, r22	; 0x02
    291c:	7b 83       	std	Y+3, r23	; 0x03
    291e:	11 23       	and	r17, r17
    2920:	41 f0       	breq	.+16     	; 0x2932 <xTaskDelayUntil+0xa6>
    2922:	cb 01       	movw	r24, r22
    2924:	ba 01       	movw	r22, r20
    2926:	68 19       	sub	r22, r8
    2928:	79 09       	sbc	r23, r9
    292a:	8a 09       	sbc	r24, r10
    292c:	9b 09       	sbc	r25, r11
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	6b dc       	rcall	.-1834   	; 0x2208 <prvAddCurrentTaskToDelayedList>
    2932:	d0 de       	rcall	.-608    	; 0x26d4 <xTaskResumeAll>
    2934:	81 11       	cpse	r24, r1
    2936:	02 c0       	rjmp	.+4      	; 0x293c <xTaskDelayUntil+0xb0>
    2938:	0e 94 fe 07 	call	0xffc	; 0xffc <vPortYield>
    293c:	81 2f       	mov	r24, r17
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	ff 90       	pop	r15
    2946:	ef 90       	pop	r14
    2948:	df 90       	pop	r13
    294a:	cf 90       	pop	r12
    294c:	bf 90       	pop	r11
    294e:	af 90       	pop	r10
    2950:	9f 90       	pop	r9
    2952:	8f 90       	pop	r8
    2954:	08 95       	ret

00002956 <vTaskDelay>:
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	6b 01       	movw	r12, r22
    2960:	7c 01       	movw	r14, r24
    2962:	67 2b       	or	r22, r23
    2964:	68 2b       	or	r22, r24
    2966:	69 2b       	or	r22, r25
    2968:	39 f0       	breq	.+14     	; 0x2978 <vTaskDelay+0x22>
    296a:	74 dd       	rcall	.-1304   	; 0x2454 <vTaskSuspendAll>
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	c7 01       	movw	r24, r14
    2970:	b6 01       	movw	r22, r12
    2972:	4a dc       	rcall	.-1900   	; 0x2208 <prvAddCurrentTaskToDelayedList>
    2974:	af de       	rcall	.-674    	; 0x26d4 <xTaskResumeAll>
    2976:	01 c0       	rjmp	.+2      	; 0x297a <vTaskDelay+0x24>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	81 11       	cpse	r24, r1
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <vTaskDelay+0x2c>
    297e:	0e 94 fe 07 	call	0xffc	; 0xffc <vPortYield>
    2982:	ff 90       	pop	r15
    2984:	ef 90       	pop	r14
    2986:	df 90       	pop	r13
    2988:	cf 90       	pop	r12
    298a:	08 95       	ret

0000298c <vTaskSwitchContext>:
    298c:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <uxSchedulerSuspended>
    2990:	88 23       	and	r24, r24
    2992:	21 f0       	breq	.+8      	; 0x299c <vTaskSwitchContext+0x10>
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <xYieldPending>
    299a:	08 95       	ret
    299c:	10 92 d8 17 	sts	0x17D8, r1	; 0x8017d8 <xYieldPending>
    29a0:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    29a4:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    29a8:	20 81       	ld	r18, Z
    29aa:	31 81       	ldd	r19, Z+1	; 0x01
    29ac:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    29b0:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    29b4:	83 8d       	ldd	r24, Z+27	; 0x1b
    29b6:	94 8d       	ldd	r25, Z+28	; 0x1c
    29b8:	82 17       	cp	r24, r18
    29ba:	93 07       	cpc	r25, r19
    29bc:	60 f0       	brcs	.+24     	; 0x29d6 <vTaskSwitchContext+0x4a>
    29be:	60 91 8e 18 	lds	r22, 0x188E	; 0x80188e <pxCurrentTCB>
    29c2:	70 91 8f 18 	lds	r23, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    29c6:	63 5e       	subi	r22, 0xE3	; 227
    29c8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ca:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    29ce:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    29d2:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <vApplicationStackOverflowHook>
    29d6:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <uxTopReadyPriority>
    29da:	01 c0       	rjmp	.+2      	; 0x29de <vTaskSwitchContext+0x52>
    29dc:	81 50       	subi	r24, 0x01	; 1
    29de:	28 2f       	mov	r18, r24
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	9b e0       	ldi	r25, 0x0B	; 11
    29e4:	92 9f       	mul	r25, r18
    29e6:	f0 01       	movw	r30, r0
    29e8:	93 9f       	mul	r25, r19
    29ea:	f0 0d       	add	r31, r0
    29ec:	11 24       	eor	r1, r1
    29ee:	e0 5e       	subi	r30, 0xE0	; 224
    29f0:	f7 4e       	sbci	r31, 0xE7	; 231
    29f2:	90 81       	ld	r25, Z
    29f4:	99 23       	and	r25, r25
    29f6:	91 f3       	breq	.-28     	; 0x29dc <vTaskSwitchContext+0x50>
    29f8:	9b e0       	ldi	r25, 0x0B	; 11
    29fa:	92 9f       	mul	r25, r18
    29fc:	a0 01       	movw	r20, r0
    29fe:	93 9f       	mul	r25, r19
    2a00:	50 0d       	add	r21, r0
    2a02:	11 24       	eor	r1, r1
    2a04:	df 01       	movw	r26, r30
    2a06:	01 80       	ldd	r0, Z+1	; 0x01
    2a08:	f2 81       	ldd	r31, Z+2	; 0x02
    2a0a:	e0 2d       	mov	r30, r0
    2a0c:	04 80       	ldd	r0, Z+4	; 0x04
    2a0e:	f5 81       	ldd	r31, Z+5	; 0x05
    2a10:	e0 2d       	mov	r30, r0
    2a12:	12 96       	adiw	r26, 0x02	; 2
    2a14:	fc 93       	st	X, r31
    2a16:	ee 93       	st	-X, r30
    2a18:	11 97       	sbiw	r26, 0x01	; 1
    2a1a:	4d 5d       	subi	r20, 0xDD	; 221
    2a1c:	57 4e       	sbci	r21, 0xE7	; 231
    2a1e:	e4 17       	cp	r30, r20
    2a20:	f5 07       	cpc	r31, r21
    2a22:	29 f4       	brne	.+10     	; 0x2a2e <vTaskSwitchContext+0xa2>
    2a24:	44 81       	ldd	r20, Z+4	; 0x04
    2a26:	55 81       	ldd	r21, Z+5	; 0x05
    2a28:	fd 01       	movw	r30, r26
    2a2a:	52 83       	std	Z+2, r21	; 0x02
    2a2c:	41 83       	std	Z+1, r20	; 0x01
    2a2e:	9b e0       	ldi	r25, 0x0B	; 11
    2a30:	92 9f       	mul	r25, r18
    2a32:	f0 01       	movw	r30, r0
    2a34:	93 9f       	mul	r25, r19
    2a36:	f0 0d       	add	r31, r0
    2a38:	11 24       	eor	r1, r1
    2a3a:	e0 5e       	subi	r30, 0xE0	; 224
    2a3c:	f7 4e       	sbci	r31, 0xE7	; 231
    2a3e:	01 80       	ldd	r0, Z+1	; 0x01
    2a40:	f2 81       	ldd	r31, Z+2	; 0x02
    2a42:	e0 2d       	mov	r30, r0
    2a44:	20 85       	ldd	r18, Z+8	; 0x08
    2a46:	31 85       	ldd	r19, Z+9	; 0x09
    2a48:	30 93 8f 18 	sts	0x188F, r19	; 0x80188f <pxCurrentTCB+0x1>
    2a4c:	20 93 8e 18 	sts	0x188E, r18	; 0x80188e <pxCurrentTCB>
    2a50:	80 93 de 17 	sts	0x17DE, r24	; 0x8017de <uxTopReadyPriority>
    2a54:	08 95       	ret

00002a56 <vTaskPlaceOnEventList>:
    2a56:	cf 92       	push	r12
    2a58:	df 92       	push	r13
    2a5a:	ef 92       	push	r14
    2a5c:	ff 92       	push	r15
    2a5e:	6a 01       	movw	r12, r20
    2a60:	7b 01       	movw	r14, r22
    2a62:	60 91 8e 18 	lds	r22, 0x188E	; 0x80188e <pxCurrentTCB>
    2a66:	70 91 8f 18 	lds	r23, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2a6a:	62 5f       	subi	r22, 0xF2	; 242
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	0e 94 45 07 	call	0xe8a	; 0xe8a <vListInsert>
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	c7 01       	movw	r24, r14
    2a76:	b6 01       	movw	r22, r12
    2a78:	c7 db       	rcall	.-2162   	; 0x2208 <prvAddCurrentTaskToDelayedList>
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	df 90       	pop	r13
    2a80:	cf 90       	pop	r12
    2a82:	08 95       	ret

00002a84 <vTaskPlaceOnUnorderedEventList>:
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    2a92:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2a96:	70 68       	ori	r23, 0x80	; 128
    2a98:	1e 96       	adiw	r26, 0x0e	; 14
    2a9a:	4d 93       	st	X+, r20
    2a9c:	5d 93       	st	X+, r21
    2a9e:	6d 93       	st	X+, r22
    2aa0:	7c 93       	st	X, r23
    2aa2:	51 97       	sbiw	r26, 0x11	; 17
    2aa4:	a1 81       	ldd	r26, Z+1	; 0x01
    2aa6:	b2 81       	ldd	r27, Z+2	; 0x02
    2aa8:	c0 91 8e 18 	lds	r28, 0x188E	; 0x80188e <pxCurrentTCB>
    2aac:	d0 91 8f 18 	lds	r29, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2ab0:	bb 8b       	std	Y+19, r27	; 0x13
    2ab2:	aa 8b       	std	Y+18, r26	; 0x12
    2ab4:	c0 91 8e 18 	lds	r28, 0x188E	; 0x80188e <pxCurrentTCB>
    2ab8:	d0 91 8f 18 	lds	r29, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2abc:	16 96       	adiw	r26, 0x06	; 6
    2abe:	8d 91       	ld	r24, X+
    2ac0:	9c 91       	ld	r25, X
    2ac2:	17 97       	sbiw	r26, 0x07	; 7
    2ac4:	9d 8b       	std	Y+21, r25	; 0x15
    2ac6:	8c 8b       	std	Y+20, r24	; 0x14
    2ac8:	16 96       	adiw	r26, 0x06	; 6
    2aca:	cd 91       	ld	r28, X+
    2acc:	dc 91       	ld	r29, X
    2ace:	17 97       	sbiw	r26, 0x07	; 7
    2ad0:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    2ad4:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2ad8:	0e 96       	adiw	r24, 0x0e	; 14
    2ada:	9d 83       	std	Y+5, r25	; 0x05
    2adc:	8c 83       	std	Y+4, r24	; 0x04
    2ade:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    2ae2:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2ae6:	0e 96       	adiw	r24, 0x0e	; 14
    2ae8:	17 96       	adiw	r26, 0x07	; 7
    2aea:	9c 93       	st	X, r25
    2aec:	8e 93       	st	-X, r24
    2aee:	16 97       	sbiw	r26, 0x06	; 6
    2af0:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    2af4:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2af8:	59 96       	adiw	r26, 0x19	; 25
    2afa:	fc 93       	st	X, r31
    2afc:	ee 93       	st	-X, r30
    2afe:	58 97       	sbiw	r26, 0x18	; 24
    2b00:	80 81       	ld	r24, Z
    2b02:	8f 5f       	subi	r24, 0xFF	; 255
    2b04:	80 83       	st	Z, r24
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	c9 01       	movw	r24, r18
    2b0a:	b8 01       	movw	r22, r16
    2b0c:	7d db       	rcall	.-2310   	; 0x2208 <prvAddCurrentTaskToDelayedList>
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	1f 91       	pop	r17
    2b14:	0f 91       	pop	r16
    2b16:	08 95       	ret

00002b18 <vTaskPlaceOnEventListRestricted>:
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	ba 01       	movw	r22, r20
    2b22:	a1 81       	ldd	r26, Z+1	; 0x01
    2b24:	b2 81       	ldd	r27, Z+2	; 0x02
    2b26:	c0 91 8e 18 	lds	r28, 0x188E	; 0x80188e <pxCurrentTCB>
    2b2a:	d0 91 8f 18 	lds	r29, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2b2e:	bb 8b       	std	Y+19, r27	; 0x13
    2b30:	aa 8b       	std	Y+18, r26	; 0x12
    2b32:	c0 91 8e 18 	lds	r28, 0x188E	; 0x80188e <pxCurrentTCB>
    2b36:	d0 91 8f 18 	lds	r29, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2b3a:	16 96       	adiw	r26, 0x06	; 6
    2b3c:	4d 91       	ld	r20, X+
    2b3e:	5c 91       	ld	r21, X
    2b40:	17 97       	sbiw	r26, 0x07	; 7
    2b42:	5d 8b       	std	Y+21, r21	; 0x15
    2b44:	4c 8b       	std	Y+20, r20	; 0x14
    2b46:	16 96       	adiw	r26, 0x06	; 6
    2b48:	cd 91       	ld	r28, X+
    2b4a:	dc 91       	ld	r29, X
    2b4c:	17 97       	sbiw	r26, 0x07	; 7
    2b4e:	40 91 8e 18 	lds	r20, 0x188E	; 0x80188e <pxCurrentTCB>
    2b52:	50 91 8f 18 	lds	r21, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2b56:	42 5f       	subi	r20, 0xF2	; 242
    2b58:	5f 4f       	sbci	r21, 0xFF	; 255
    2b5a:	5d 83       	std	Y+5, r21	; 0x05
    2b5c:	4c 83       	std	Y+4, r20	; 0x04
    2b5e:	40 91 8e 18 	lds	r20, 0x188E	; 0x80188e <pxCurrentTCB>
    2b62:	50 91 8f 18 	lds	r21, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2b66:	42 5f       	subi	r20, 0xF2	; 242
    2b68:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6a:	17 96       	adiw	r26, 0x07	; 7
    2b6c:	5c 93       	st	X, r21
    2b6e:	4e 93       	st	-X, r20
    2b70:	16 97       	sbiw	r26, 0x06	; 6
    2b72:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    2b76:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2b7a:	59 96       	adiw	r26, 0x19	; 25
    2b7c:	fc 93       	st	X, r31
    2b7e:	ee 93       	st	-X, r30
    2b80:	58 97       	sbiw	r26, 0x18	; 24
    2b82:	30 81       	ld	r19, Z
    2b84:	3f 5f       	subi	r19, 0xFF	; 255
    2b86:	30 83       	st	Z, r19
    2b88:	22 23       	and	r18, r18
    2b8a:	19 f0       	breq	.+6      	; 0x2b92 <vTaskPlaceOnEventListRestricted+0x7a>
    2b8c:	6f ef       	ldi	r22, 0xFF	; 255
    2b8e:	7f ef       	ldi	r23, 0xFF	; 255
    2b90:	cb 01       	movw	r24, r22
    2b92:	42 2f       	mov	r20, r18
    2b94:	39 db       	rcall	.-2446   	; 0x2208 <prvAddCurrentTaskToDelayedList>
    2b96:	df 91       	pop	r29
    2b98:	cf 91       	pop	r28
    2b9a:	08 95       	ret

00002b9c <xTaskRemoveFromEventList>:
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	17 96       	adiw	r26, 0x07	; 7
    2ba4:	ed 91       	ld	r30, X+
    2ba6:	fc 91       	ld	r31, X
    2ba8:	18 97       	sbiw	r26, 0x08	; 8
    2baa:	00 84       	ldd	r0, Z+8	; 0x08
    2bac:	f1 85       	ldd	r31, Z+9	; 0x09
    2bae:	e0 2d       	mov	r30, r0
    2bb0:	a0 8d       	ldd	r26, Z+24	; 0x18
    2bb2:	b1 8d       	ldd	r27, Z+25	; 0x19
    2bb4:	c2 89       	ldd	r28, Z+18	; 0x12
    2bb6:	d3 89       	ldd	r29, Z+19	; 0x13
    2bb8:	84 89       	ldd	r24, Z+20	; 0x14
    2bba:	95 89       	ldd	r25, Z+21	; 0x15
    2bbc:	9f 83       	std	Y+7, r25	; 0x07
    2bbe:	8e 83       	std	Y+6, r24	; 0x06
    2bc0:	c4 89       	ldd	r28, Z+20	; 0x14
    2bc2:	d5 89       	ldd	r29, Z+21	; 0x15
    2bc4:	82 89       	ldd	r24, Z+18	; 0x12
    2bc6:	93 89       	ldd	r25, Z+19	; 0x13
    2bc8:	9d 83       	std	Y+5, r25	; 0x05
    2bca:	8c 83       	std	Y+4, r24	; 0x04
    2bcc:	11 96       	adiw	r26, 0x01	; 1
    2bce:	8d 91       	ld	r24, X+
    2bd0:	9c 91       	ld	r25, X
    2bd2:	12 97       	sbiw	r26, 0x02	; 2
    2bd4:	9f 01       	movw	r18, r30
    2bd6:	22 5f       	subi	r18, 0xF2	; 242
    2bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bda:	82 17       	cp	r24, r18
    2bdc:	93 07       	cpc	r25, r19
    2bde:	31 f4       	brne	.+12     	; 0x2bec <xTaskRemoveFromEventList+0x50>
    2be0:	84 89       	ldd	r24, Z+20	; 0x14
    2be2:	95 89       	ldd	r25, Z+21	; 0x15
    2be4:	12 96       	adiw	r26, 0x02	; 2
    2be6:	9c 93       	st	X, r25
    2be8:	8e 93       	st	-X, r24
    2bea:	11 97       	sbiw	r26, 0x01	; 1
    2bec:	11 8e       	std	Z+25, r1	; 0x19
    2bee:	10 8e       	std	Z+24, r1	; 0x18
    2bf0:	8c 91       	ld	r24, X
    2bf2:	81 50       	subi	r24, 0x01	; 1
    2bf4:	8c 93       	st	X, r24
    2bf6:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <uxSchedulerSuspended>
    2bfa:	81 11       	cpse	r24, r1
    2bfc:	52 c0       	rjmp	.+164    	; 0x2ca2 <xTaskRemoveFromEventList+0x106>
    2bfe:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c00:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c02:	c6 81       	ldd	r28, Z+6	; 0x06
    2c04:	d7 81       	ldd	r29, Z+7	; 0x07
    2c06:	80 85       	ldd	r24, Z+8	; 0x08
    2c08:	91 85       	ldd	r25, Z+9	; 0x09
    2c0a:	9f 83       	std	Y+7, r25	; 0x07
    2c0c:	8e 83       	std	Y+6, r24	; 0x06
    2c0e:	c0 85       	ldd	r28, Z+8	; 0x08
    2c10:	d1 85       	ldd	r29, Z+9	; 0x09
    2c12:	86 81       	ldd	r24, Z+6	; 0x06
    2c14:	97 81       	ldd	r25, Z+7	; 0x07
    2c16:	9d 83       	std	Y+5, r25	; 0x05
    2c18:	8c 83       	std	Y+4, r24	; 0x04
    2c1a:	11 96       	adiw	r26, 0x01	; 1
    2c1c:	8d 91       	ld	r24, X+
    2c1e:	9c 91       	ld	r25, X
    2c20:	12 97       	sbiw	r26, 0x02	; 2
    2c22:	9f 01       	movw	r18, r30
    2c24:	2e 5f       	subi	r18, 0xFE	; 254
    2c26:	3f 4f       	sbci	r19, 0xFF	; 255
    2c28:	82 17       	cp	r24, r18
    2c2a:	93 07       	cpc	r25, r19
    2c2c:	31 f4       	brne	.+12     	; 0x2c3a <xTaskRemoveFromEventList+0x9e>
    2c2e:	80 85       	ldd	r24, Z+8	; 0x08
    2c30:	91 85       	ldd	r25, Z+9	; 0x09
    2c32:	12 96       	adiw	r26, 0x02	; 2
    2c34:	9c 93       	st	X, r25
    2c36:	8e 93       	st	-X, r24
    2c38:	11 97       	sbiw	r26, 0x01	; 1
    2c3a:	15 86       	std	Z+13, r1	; 0x0d
    2c3c:	14 86       	std	Z+12, r1	; 0x0c
    2c3e:	8c 91       	ld	r24, X
    2c40:	81 50       	subi	r24, 0x01	; 1
    2c42:	8c 93       	st	X, r24
    2c44:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c46:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <uxTopReadyPriority>
    2c4a:	8a 17       	cp	r24, r26
    2c4c:	10 f4       	brcc	.+4      	; 0x2c52 <xTaskRemoveFromEventList+0xb6>
    2c4e:	a0 93 de 17 	sts	0x17DE, r26	; 0x8017de <uxTopReadyPriority>
    2c52:	8b e0       	ldi	r24, 0x0B	; 11
    2c54:	8a 9f       	mul	r24, r26
    2c56:	d0 01       	movw	r26, r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	a0 5e       	subi	r26, 0xE0	; 224
    2c5c:	b7 4e       	sbci	r27, 0xE7	; 231
    2c5e:	11 96       	adiw	r26, 0x01	; 1
    2c60:	0d 90       	ld	r0, X+
    2c62:	bc 91       	ld	r27, X
    2c64:	a0 2d       	mov	r26, r0
    2c66:	b7 83       	std	Z+7, r27	; 0x07
    2c68:	a6 83       	std	Z+6, r26	; 0x06
    2c6a:	16 96       	adiw	r26, 0x06	; 6
    2c6c:	4d 91       	ld	r20, X+
    2c6e:	5c 91       	ld	r21, X
    2c70:	17 97       	sbiw	r26, 0x07	; 7
    2c72:	51 87       	std	Z+9, r21	; 0x09
    2c74:	40 87       	std	Z+8, r20	; 0x08
    2c76:	16 96       	adiw	r26, 0x06	; 6
    2c78:	cd 91       	ld	r28, X+
    2c7a:	dc 91       	ld	r29, X
    2c7c:	17 97       	sbiw	r26, 0x07	; 7
    2c7e:	3d 83       	std	Y+5, r19	; 0x05
    2c80:	2c 83       	std	Y+4, r18	; 0x04
    2c82:	17 96       	adiw	r26, 0x07	; 7
    2c84:	3c 93       	st	X, r19
    2c86:	2e 93       	st	-X, r18
    2c88:	16 97       	sbiw	r26, 0x06	; 6
    2c8a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c8c:	8a 9f       	mul	r24, r26
    2c8e:	d0 01       	movw	r26, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	a0 5e       	subi	r26, 0xE0	; 224
    2c94:	b7 4e       	sbci	r27, 0xE7	; 231
    2c96:	b5 87       	std	Z+13, r27	; 0x0d
    2c98:	a4 87       	std	Z+12, r26	; 0x0c
    2c9a:	8c 91       	ld	r24, X
    2c9c:	8f 5f       	subi	r24, 0xFF	; 255
    2c9e:	8c 93       	st	X, r24
    2ca0:	1c c0       	rjmp	.+56     	; 0x2cda <xTaskRemoveFromEventList+0x13e>
    2ca2:	4b ef       	ldi	r20, 0xFB	; 251
    2ca4:	57 e1       	ldi	r21, 0x17	; 23
    2ca6:	da 01       	movw	r26, r20
    2ca8:	11 96       	adiw	r26, 0x01	; 1
    2caa:	cd 91       	ld	r28, X+
    2cac:	dc 91       	ld	r29, X
    2cae:	12 97       	sbiw	r26, 0x02	; 2
    2cb0:	d3 8b       	std	Z+19, r29	; 0x13
    2cb2:	c2 8b       	std	Z+18, r28	; 0x12
    2cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb8:	95 8b       	std	Z+21, r25	; 0x15
    2cba:	84 8b       	std	Z+20, r24	; 0x14
    2cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	15 96       	adiw	r26, 0x05	; 5
    2cc4:	3c 93       	st	X, r19
    2cc6:	2e 93       	st	-X, r18
    2cc8:	14 97       	sbiw	r26, 0x04	; 4
    2cca:	3f 83       	std	Y+7, r19	; 0x07
    2ccc:	2e 83       	std	Y+6, r18	; 0x06
    2cce:	51 8f       	std	Z+25, r21	; 0x19
    2cd0:	40 8f       	std	Z+24, r20	; 0x18
    2cd2:	da 01       	movw	r26, r20
    2cd4:	8c 91       	ld	r24, X
    2cd6:	8f 5f       	subi	r24, 0xFF	; 255
    2cd8:	8c 93       	st	X, r24
    2cda:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cdc:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    2ce0:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2ce4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ce6:	89 17       	cp	r24, r25
    2ce8:	20 f4       	brcc	.+8      	; 0x2cf2 <xTaskRemoveFromEventList+0x156>
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <xYieldPending>
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <xTaskRemoveFromEventList+0x158>
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	08 95       	ret

00002cfa <vTaskRemoveFromUnorderedEventList>:
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	dc 01       	movw	r26, r24
    2d00:	70 68       	ori	r23, 0x80	; 128
    2d02:	4d 93       	st	X+, r20
    2d04:	5d 93       	st	X+, r21
    2d06:	6d 93       	st	X+, r22
    2d08:	7c 93       	st	X, r23
    2d0a:	13 97       	sbiw	r26, 0x03	; 3
    2d0c:	18 96       	adiw	r26, 0x08	; 8
    2d0e:	ed 91       	ld	r30, X+
    2d10:	fc 91       	ld	r31, X
    2d12:	19 97       	sbiw	r26, 0x09	; 9
    2d14:	1a 96       	adiw	r26, 0x0a	; 10
    2d16:	4d 91       	ld	r20, X+
    2d18:	5c 91       	ld	r21, X
    2d1a:	1b 97       	sbiw	r26, 0x0b	; 11
    2d1c:	14 96       	adiw	r26, 0x04	; 4
    2d1e:	8d 91       	ld	r24, X+
    2d20:	9c 91       	ld	r25, X
    2d22:	15 97       	sbiw	r26, 0x05	; 5
    2d24:	16 96       	adiw	r26, 0x06	; 6
    2d26:	2d 91       	ld	r18, X+
    2d28:	3c 91       	ld	r19, X
    2d2a:	17 97       	sbiw	r26, 0x07	; 7
    2d2c:	ec 01       	movw	r28, r24
    2d2e:	3f 83       	std	Y+7, r19	; 0x07
    2d30:	2e 83       	std	Y+6, r18	; 0x06
    2d32:	16 96       	adiw	r26, 0x06	; 6
    2d34:	8d 91       	ld	r24, X+
    2d36:	9c 91       	ld	r25, X
    2d38:	17 97       	sbiw	r26, 0x07	; 7
    2d3a:	14 96       	adiw	r26, 0x04	; 4
    2d3c:	2d 91       	ld	r18, X+
    2d3e:	3c 91       	ld	r19, X
    2d40:	15 97       	sbiw	r26, 0x05	; 5
    2d42:	ec 01       	movw	r28, r24
    2d44:	3d 83       	std	Y+5, r19	; 0x05
    2d46:	2c 83       	std	Y+4, r18	; 0x04
    2d48:	ea 01       	movw	r28, r20
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4e:	a8 17       	cp	r26, r24
    2d50:	b9 07       	cpc	r27, r25
    2d52:	31 f4       	brne	.+12     	; 0x2d60 <vTaskRemoveFromUnorderedEventList+0x66>
    2d54:	16 96       	adiw	r26, 0x06	; 6
    2d56:	8d 91       	ld	r24, X+
    2d58:	9c 91       	ld	r25, X
    2d5a:	17 97       	sbiw	r26, 0x07	; 7
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
    2d60:	1b 96       	adiw	r26, 0x0b	; 11
    2d62:	1c 92       	st	X, r1
    2d64:	1e 92       	st	-X, r1
    2d66:	1a 97       	sbiw	r26, 0x0a	; 10
    2d68:	da 01       	movw	r26, r20
    2d6a:	8c 91       	ld	r24, X
    2d6c:	81 50       	subi	r24, 0x01	; 1
    2d6e:	8c 93       	st	X, r24
    2d70:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d72:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d74:	c6 81       	ldd	r28, Z+6	; 0x06
    2d76:	d7 81       	ldd	r29, Z+7	; 0x07
    2d78:	80 85       	ldd	r24, Z+8	; 0x08
    2d7a:	91 85       	ldd	r25, Z+9	; 0x09
    2d7c:	9f 83       	std	Y+7, r25	; 0x07
    2d7e:	8e 83       	std	Y+6, r24	; 0x06
    2d80:	c0 85       	ldd	r28, Z+8	; 0x08
    2d82:	d1 85       	ldd	r29, Z+9	; 0x09
    2d84:	86 81       	ldd	r24, Z+6	; 0x06
    2d86:	97 81       	ldd	r25, Z+7	; 0x07
    2d88:	9d 83       	std	Y+5, r25	; 0x05
    2d8a:	8c 83       	std	Y+4, r24	; 0x04
    2d8c:	11 96       	adiw	r26, 0x01	; 1
    2d8e:	8d 91       	ld	r24, X+
    2d90:	9c 91       	ld	r25, X
    2d92:	12 97       	sbiw	r26, 0x02	; 2
    2d94:	9f 01       	movw	r18, r30
    2d96:	2e 5f       	subi	r18, 0xFE	; 254
    2d98:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9a:	82 17       	cp	r24, r18
    2d9c:	93 07       	cpc	r25, r19
    2d9e:	31 f4       	brne	.+12     	; 0x2dac <vTaskRemoveFromUnorderedEventList+0xb2>
    2da0:	80 85       	ldd	r24, Z+8	; 0x08
    2da2:	91 85       	ldd	r25, Z+9	; 0x09
    2da4:	12 96       	adiw	r26, 0x02	; 2
    2da6:	9c 93       	st	X, r25
    2da8:	8e 93       	st	-X, r24
    2daa:	11 97       	sbiw	r26, 0x01	; 1
    2dac:	15 86       	std	Z+13, r1	; 0x0d
    2dae:	14 86       	std	Z+12, r1	; 0x0c
    2db0:	8c 91       	ld	r24, X
    2db2:	81 50       	subi	r24, 0x01	; 1
    2db4:	8c 93       	st	X, r24
    2db6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2db8:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <uxTopReadyPriority>
    2dbc:	8a 17       	cp	r24, r26
    2dbe:	10 f4       	brcc	.+4      	; 0x2dc4 <vTaskRemoveFromUnorderedEventList+0xca>
    2dc0:	a0 93 de 17 	sts	0x17DE, r26	; 0x8017de <uxTopReadyPriority>
    2dc4:	8b e0       	ldi	r24, 0x0B	; 11
    2dc6:	8a 9f       	mul	r24, r26
    2dc8:	d0 01       	movw	r26, r0
    2dca:	11 24       	eor	r1, r1
    2dcc:	a0 5e       	subi	r26, 0xE0	; 224
    2dce:	b7 4e       	sbci	r27, 0xE7	; 231
    2dd0:	11 96       	adiw	r26, 0x01	; 1
    2dd2:	0d 90       	ld	r0, X+
    2dd4:	bc 91       	ld	r27, X
    2dd6:	a0 2d       	mov	r26, r0
    2dd8:	b7 83       	std	Z+7, r27	; 0x07
    2dda:	a6 83       	std	Z+6, r26	; 0x06
    2ddc:	16 96       	adiw	r26, 0x06	; 6
    2dde:	4d 91       	ld	r20, X+
    2de0:	5c 91       	ld	r21, X
    2de2:	17 97       	sbiw	r26, 0x07	; 7
    2de4:	51 87       	std	Z+9, r21	; 0x09
    2de6:	40 87       	std	Z+8, r20	; 0x08
    2de8:	16 96       	adiw	r26, 0x06	; 6
    2dea:	cd 91       	ld	r28, X+
    2dec:	dc 91       	ld	r29, X
    2dee:	17 97       	sbiw	r26, 0x07	; 7
    2df0:	3d 83       	std	Y+5, r19	; 0x05
    2df2:	2c 83       	std	Y+4, r18	; 0x04
    2df4:	17 96       	adiw	r26, 0x07	; 7
    2df6:	3c 93       	st	X, r19
    2df8:	2e 93       	st	-X, r18
    2dfa:	16 97       	sbiw	r26, 0x06	; 6
    2dfc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2dfe:	8a 9f       	mul	r24, r26
    2e00:	d0 01       	movw	r26, r0
    2e02:	11 24       	eor	r1, r1
    2e04:	a0 5e       	subi	r26, 0xE0	; 224
    2e06:	b7 4e       	sbci	r27, 0xE7	; 231
    2e08:	b5 87       	std	Z+13, r27	; 0x0d
    2e0a:	a4 87       	std	Z+12, r26	; 0x0c
    2e0c:	8c 91       	ld	r24, X
    2e0e:	8f 5f       	subi	r24, 0xFF	; 255
    2e10:	8c 93       	st	X, r24
    2e12:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e14:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    2e18:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2e1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e1e:	89 17       	cp	r24, r25
    2e20:	18 f4       	brcc	.+6      	; 0x2e28 <vTaskRemoveFromUnorderedEventList+0x12e>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <xYieldPending>
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	08 95       	ret

00002e2e <vTaskSetTimeOutState>:
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	0f 92       	push	r0
    2e34:	20 91 d7 17 	lds	r18, 0x17D7	; 0x8017d7 <xNumOfOverflows>
    2e38:	fc 01       	movw	r30, r24
    2e3a:	20 83       	st	Z, r18
    2e3c:	40 91 df 17 	lds	r20, 0x17DF	; 0x8017df <xTickCount>
    2e40:	50 91 e0 17 	lds	r21, 0x17E0	; 0x8017e0 <xTickCount+0x1>
    2e44:	60 91 e1 17 	lds	r22, 0x17E1	; 0x8017e1 <xTickCount+0x2>
    2e48:	70 91 e2 17 	lds	r23, 0x17E2	; 0x8017e2 <xTickCount+0x3>
    2e4c:	41 83       	std	Z+1, r20	; 0x01
    2e4e:	52 83       	std	Z+2, r21	; 0x02
    2e50:	63 83       	std	Z+3, r22	; 0x03
    2e52:	74 83       	std	Z+4, r23	; 0x04
    2e54:	0f 90       	pop	r0
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	08 95       	ret

00002e5a <vTaskInternalSetTimeOutState>:
    2e5a:	20 91 d7 17 	lds	r18, 0x17D7	; 0x8017d7 <xNumOfOverflows>
    2e5e:	fc 01       	movw	r30, r24
    2e60:	20 83       	st	Z, r18
    2e62:	40 91 df 17 	lds	r20, 0x17DF	; 0x8017df <xTickCount>
    2e66:	50 91 e0 17 	lds	r21, 0x17E0	; 0x8017e0 <xTickCount+0x1>
    2e6a:	60 91 e1 17 	lds	r22, 0x17E1	; 0x8017e1 <xTickCount+0x2>
    2e6e:	70 91 e2 17 	lds	r23, 0x17E2	; 0x8017e2 <xTickCount+0x3>
    2e72:	41 83       	std	Z+1, r20	; 0x01
    2e74:	52 83       	std	Z+2, r21	; 0x02
    2e76:	63 83       	std	Z+3, r22	; 0x03
    2e78:	74 83       	std	Z+4, r23	; 0x04
    2e7a:	08 95       	ret

00002e7c <xTaskCheckForTimeOut>:
    2e7c:	8f 92       	push	r8
    2e7e:	9f 92       	push	r9
    2e80:	af 92       	push	r10
    2e82:	bf 92       	push	r11
    2e84:	cf 92       	push	r12
    2e86:	df 92       	push	r13
    2e88:	ef 92       	push	r14
    2e8a:	ff 92       	push	r15
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	fb 01       	movw	r30, r22
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	0f 92       	push	r0
    2e9c:	c0 90 df 17 	lds	r12, 0x17DF	; 0x8017df <xTickCount>
    2ea0:	d0 90 e0 17 	lds	r13, 0x17E0	; 0x8017e0 <xTickCount+0x1>
    2ea4:	e0 90 e1 17 	lds	r14, 0x17E1	; 0x8017e1 <xTickCount+0x2>
    2ea8:	f0 90 e2 17 	lds	r15, 0x17E2	; 0x8017e2 <xTickCount+0x3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	11 96       	adiw	r26, 0x01	; 1
    2eb0:	0d 91       	ld	r16, X+
    2eb2:	1d 91       	ld	r17, X+
    2eb4:	2d 91       	ld	r18, X+
    2eb6:	3c 91       	ld	r19, X
    2eb8:	14 97       	sbiw	r26, 0x04	; 4
    2eba:	46 01       	movw	r8, r12
    2ebc:	57 01       	movw	r10, r14
    2ebe:	80 1a       	sub	r8, r16
    2ec0:	91 0a       	sbc	r9, r17
    2ec2:	a2 0a       	sbc	r10, r18
    2ec4:	b3 0a       	sbc	r11, r19
    2ec6:	40 81       	ld	r20, Z
    2ec8:	51 81       	ldd	r21, Z+1	; 0x01
    2eca:	62 81       	ldd	r22, Z+2	; 0x02
    2ecc:	73 81       	ldd	r23, Z+3	; 0x03
    2ece:	4f 3f       	cpi	r20, 0xFF	; 255
    2ed0:	bf ef       	ldi	r27, 0xFF	; 255
    2ed2:	5b 07       	cpc	r21, r27
    2ed4:	6b 07       	cpc	r22, r27
    2ed6:	7b 07       	cpc	r23, r27
    2ed8:	39 f1       	breq	.+78     	; 0x2f28 <xTaskCheckForTimeOut+0xac>
    2eda:	ec 01       	movw	r28, r24
    2edc:	b8 81       	ld	r27, Y
    2ede:	a0 91 d7 17 	lds	r26, 0x17D7	; 0x8017d7 <xNumOfOverflows>
    2ee2:	ba 17       	cp	r27, r26
    2ee4:	59 f0       	breq	.+22     	; 0x2efc <xTaskCheckForTimeOut+0x80>
    2ee6:	c0 16       	cp	r12, r16
    2ee8:	d1 06       	cpc	r13, r17
    2eea:	e2 06       	cpc	r14, r18
    2eec:	f3 06       	cpc	r15, r19
    2eee:	30 f0       	brcs	.+12     	; 0x2efc <xTaskCheckForTimeOut+0x80>
    2ef0:	10 82       	st	Z, r1
    2ef2:	11 82       	std	Z+1, r1	; 0x01
    2ef4:	12 82       	std	Z+2, r1	; 0x02
    2ef6:	13 82       	std	Z+3, r1	; 0x03
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	17 c0       	rjmp	.+46     	; 0x2f2a <xTaskCheckForTimeOut+0xae>
    2efc:	84 16       	cp	r8, r20
    2efe:	95 06       	cpc	r9, r21
    2f00:	a6 06       	cpc	r10, r22
    2f02:	b7 06       	cpc	r11, r23
    2f04:	58 f4       	brcc	.+22     	; 0x2f1c <xTaskCheckForTimeOut+0xa0>
    2f06:	48 19       	sub	r20, r8
    2f08:	59 09       	sbc	r21, r9
    2f0a:	6a 09       	sbc	r22, r10
    2f0c:	7b 09       	sbc	r23, r11
    2f0e:	40 83       	st	Z, r20
    2f10:	51 83       	std	Z+1, r21	; 0x01
    2f12:	62 83       	std	Z+2, r22	; 0x02
    2f14:	73 83       	std	Z+3, r23	; 0x03
    2f16:	a1 df       	rcall	.-190    	; 0x2e5a <vTaskInternalSetTimeOutState>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	07 c0       	rjmp	.+14     	; 0x2f2a <xTaskCheckForTimeOut+0xae>
    2f1c:	10 82       	st	Z, r1
    2f1e:	11 82       	std	Z+1, r1	; 0x01
    2f20:	12 82       	std	Z+2, r1	; 0x02
    2f22:	13 82       	std	Z+3, r1	; 0x03
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	01 c0       	rjmp	.+2      	; 0x2f2a <xTaskCheckForTimeOut+0xae>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	ff 90       	pop	r15
    2f38:	ef 90       	pop	r14
    2f3a:	df 90       	pop	r13
    2f3c:	cf 90       	pop	r12
    2f3e:	bf 90       	pop	r11
    2f40:	af 90       	pop	r10
    2f42:	9f 90       	pop	r9
    2f44:	8f 90       	pop	r8
    2f46:	08 95       	ret

00002f48 <vTaskMissedYield>:
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <xYieldPending>
    2f4e:	08 95       	ret

00002f50 <xTaskGetCurrentTaskHandle>:
    2f50:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    2f54:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2f58:	08 95       	ret

00002f5a <xTaskGetSchedulerState>:
    2f5a:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <xSchedulerRunning>
    2f5e:	88 23       	and	r24, r24
    2f60:	31 f0       	breq	.+12     	; 0x2f6e <xTaskGetSchedulerState+0x14>
    2f62:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <uxSchedulerSuspended>
    2f66:	81 11       	cpse	r24, r1
    2f68:	04 c0       	rjmp	.+8      	; 0x2f72 <xTaskGetSchedulerState+0x18>
    2f6a:	82 e0       	ldi	r24, 0x02	; 2
    2f6c:	08 95       	ret
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	08 95       	ret
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	08 95       	ret

00002f76 <xTaskPriorityInherit>:
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	fc 01       	movw	r30, r24
    2f80:	89 2b       	or	r24, r25
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <xTaskPriorityInherit+0x10>
    2f84:	77 c0       	rjmp	.+238    	; 0x3074 <xTaskPriorityInherit+0xfe>
    2f86:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f88:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    2f8c:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2f90:	5a 96       	adiw	r26, 0x1a	; 26
    2f92:	9c 91       	ld	r25, X
    2f94:	89 17       	cp	r24, r25
    2f96:	08 f0       	brcs	.+2      	; 0x2f9a <xTaskPriorityInherit+0x24>
    2f98:	63 c0       	rjmp	.+198    	; 0x3060 <xTaskPriorityInherit+0xea>
    2f9a:	46 85       	ldd	r20, Z+14	; 0x0e
    2f9c:	57 85       	ldd	r21, Z+15	; 0x0f
    2f9e:	60 89       	ldd	r22, Z+16	; 0x10
    2fa0:	71 89       	ldd	r23, Z+17	; 0x11
    2fa2:	77 23       	and	r23, r23
    2fa4:	94 f0       	brlt	.+36     	; 0x2fca <xTaskPriorityInherit+0x54>
    2fa6:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    2faa:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2fae:	5a 96       	adiw	r26, 0x1a	; 26
    2fb0:	9c 91       	ld	r25, X
    2fb2:	4a e0       	ldi	r20, 0x0A	; 10
    2fb4:	50 e0       	ldi	r21, 0x00	; 0
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	49 1b       	sub	r20, r25
    2fbc:	51 09       	sbc	r21, r1
    2fbe:	61 09       	sbc	r22, r1
    2fc0:	71 09       	sbc	r23, r1
    2fc2:	46 87       	std	Z+14, r20	; 0x0e
    2fc4:	57 87       	std	Z+15, r21	; 0x0f
    2fc6:	60 8b       	std	Z+16, r22	; 0x10
    2fc8:	71 8b       	std	Z+17, r23	; 0x11
    2fca:	24 85       	ldd	r18, Z+12	; 0x0c
    2fcc:	35 85       	ldd	r19, Z+13	; 0x0d
    2fce:	4b e0       	ldi	r20, 0x0B	; 11
    2fd0:	84 9f       	mul	r24, r20
    2fd2:	c0 01       	movw	r24, r0
    2fd4:	11 24       	eor	r1, r1
    2fd6:	80 5e       	subi	r24, 0xE0	; 224
    2fd8:	97 4e       	sbci	r25, 0xE7	; 231
    2fda:	28 17       	cp	r18, r24
    2fdc:	39 07       	cpc	r19, r25
    2fde:	b9 f5       	brne	.+110    	; 0x304e <xTaskPriorityInherit+0xd8>
    2fe0:	ef 01       	movw	r28, r30
    2fe2:	8f 01       	movw	r16, r30
    2fe4:	0e 5f       	subi	r16, 0xFE	; 254
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe8:	c8 01       	movw	r24, r16
    2fea:	0e 94 82 07 	call	0xf04	; 0xf04 <uxListRemove>
    2fee:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    2ff2:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    2ff6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ff8:	ea 8f       	std	Y+26, r30	; 0x1a
    2ffa:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <uxTopReadyPriority>
    2ffe:	8e 17       	cp	r24, r30
    3000:	10 f4       	brcc	.+4      	; 0x3006 <xTaskPriorityInherit+0x90>
    3002:	e0 93 de 17 	sts	0x17DE, r30	; 0x8017de <uxTopReadyPriority>
    3006:	8b e0       	ldi	r24, 0x0B	; 11
    3008:	8e 9f       	mul	r24, r30
    300a:	f0 01       	movw	r30, r0
    300c:	11 24       	eor	r1, r1
    300e:	e0 5e       	subi	r30, 0xE0	; 224
    3010:	f7 4e       	sbci	r31, 0xE7	; 231
    3012:	01 80       	ldd	r0, Z+1	; 0x01
    3014:	f2 81       	ldd	r31, Z+2	; 0x02
    3016:	e0 2d       	mov	r30, r0
    3018:	ff 83       	std	Y+7, r31	; 0x07
    301a:	ee 83       	std	Y+6, r30	; 0x06
    301c:	26 81       	ldd	r18, Z+6	; 0x06
    301e:	37 81       	ldd	r19, Z+7	; 0x07
    3020:	39 87       	std	Y+9, r19	; 0x09
    3022:	28 87       	std	Y+8, r18	; 0x08
    3024:	a6 81       	ldd	r26, Z+6	; 0x06
    3026:	b7 81       	ldd	r27, Z+7	; 0x07
    3028:	15 96       	adiw	r26, 0x05	; 5
    302a:	1c 93       	st	X, r17
    302c:	0e 93       	st	-X, r16
    302e:	14 97       	sbiw	r26, 0x04	; 4
    3030:	17 83       	std	Z+7, r17	; 0x07
    3032:	06 83       	std	Z+6, r16	; 0x06
    3034:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3036:	8e 9f       	mul	r24, r30
    3038:	f0 01       	movw	r30, r0
    303a:	11 24       	eor	r1, r1
    303c:	e0 5e       	subi	r30, 0xE0	; 224
    303e:	f7 4e       	sbci	r31, 0xE7	; 231
    3040:	fd 87       	std	Y+13, r31	; 0x0d
    3042:	ec 87       	std	Y+12, r30	; 0x0c
    3044:	80 81       	ld	r24, Z
    3046:	8f 5f       	subi	r24, 0xFF	; 255
    3048:	80 83       	st	Z, r24
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	16 c0       	rjmp	.+44     	; 0x307a <xTaskPriorityInherit+0x104>
    304e:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    3052:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    3056:	5a 96       	adiw	r26, 0x1a	; 26
    3058:	8c 91       	ld	r24, X
    305a:	82 8f       	std	Z+26, r24	; 0x1a
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	0d c0       	rjmp	.+26     	; 0x307a <xTaskPriorityInherit+0x104>
    3060:	95 a5       	ldd	r25, Z+45	; 0x2d
    3062:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    3066:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    306a:	82 8d       	ldd	r24, Z+26	; 0x1a
    306c:	98 17       	cp	r25, r24
    306e:	20 f0       	brcs	.+8      	; 0x3078 <xTaskPriorityInherit+0x102>
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	03 c0       	rjmp	.+6      	; 0x307a <xTaskPriorityInherit+0x104>
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	01 c0       	rjmp	.+2      	; 0x307a <xTaskPriorityInherit+0x104>
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	1f 91       	pop	r17
    3080:	0f 91       	pop	r16
    3082:	08 95       	ret

00003084 <xTaskPriorityDisinherit>:
    3084:	0f 93       	push	r16
    3086:	1f 93       	push	r17
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	fc 01       	movw	r30, r24
    308e:	89 2b       	or	r24, r25
    3090:	09 f4       	brne	.+2      	; 0x3094 <xTaskPriorityDisinherit+0x10>
    3092:	49 c0       	rjmp	.+146    	; 0x3126 <xTaskPriorityDisinherit+0xa2>
    3094:	86 a5       	ldd	r24, Z+46	; 0x2e
    3096:	81 50       	subi	r24, 0x01	; 1
    3098:	86 a7       	std	Z+46, r24	; 0x2e
    309a:	22 8d       	ldd	r18, Z+26	; 0x1a
    309c:	95 a5       	ldd	r25, Z+45	; 0x2d
    309e:	29 17       	cp	r18, r25
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <xTaskPriorityDisinherit+0x20>
    30a2:	43 c0       	rjmp	.+134    	; 0x312a <xTaskPriorityDisinherit+0xa6>
    30a4:	81 11       	cpse	r24, r1
    30a6:	43 c0       	rjmp	.+134    	; 0x312e <xTaskPriorityDisinherit+0xaa>
    30a8:	ef 01       	movw	r28, r30
    30aa:	8f 01       	movw	r16, r30
    30ac:	0e 5f       	subi	r16, 0xFE	; 254
    30ae:	1f 4f       	sbci	r17, 0xFF	; 255
    30b0:	c8 01       	movw	r24, r16
    30b2:	0e 94 82 07 	call	0xf04	; 0xf04 <uxListRemove>
    30b6:	ed a5       	ldd	r30, Y+45	; 0x2d
    30b8:	ea 8f       	std	Y+26, r30	; 0x1a
    30ba:	8a e0       	ldi	r24, 0x0A	; 10
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	a0 e0       	ldi	r26, 0x00	; 0
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	8e 1b       	sub	r24, r30
    30c4:	91 09       	sbc	r25, r1
    30c6:	a1 09       	sbc	r26, r1
    30c8:	b1 09       	sbc	r27, r1
    30ca:	8e 87       	std	Y+14, r24	; 0x0e
    30cc:	9f 87       	std	Y+15, r25	; 0x0f
    30ce:	a8 8b       	std	Y+16, r26	; 0x10
    30d0:	b9 8b       	std	Y+17, r27	; 0x11
    30d2:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <uxTopReadyPriority>
    30d6:	8e 17       	cp	r24, r30
    30d8:	10 f4       	brcc	.+4      	; 0x30de <xTaskPriorityDisinherit+0x5a>
    30da:	e0 93 de 17 	sts	0x17DE, r30	; 0x8017de <uxTopReadyPriority>
    30de:	8b e0       	ldi	r24, 0x0B	; 11
    30e0:	8e 9f       	mul	r24, r30
    30e2:	f0 01       	movw	r30, r0
    30e4:	11 24       	eor	r1, r1
    30e6:	e0 5e       	subi	r30, 0xE0	; 224
    30e8:	f7 4e       	sbci	r31, 0xE7	; 231
    30ea:	01 80       	ldd	r0, Z+1	; 0x01
    30ec:	f2 81       	ldd	r31, Z+2	; 0x02
    30ee:	e0 2d       	mov	r30, r0
    30f0:	ff 83       	std	Y+7, r31	; 0x07
    30f2:	ee 83       	std	Y+6, r30	; 0x06
    30f4:	26 81       	ldd	r18, Z+6	; 0x06
    30f6:	37 81       	ldd	r19, Z+7	; 0x07
    30f8:	39 87       	std	Y+9, r19	; 0x09
    30fa:	28 87       	std	Y+8, r18	; 0x08
    30fc:	a6 81       	ldd	r26, Z+6	; 0x06
    30fe:	b7 81       	ldd	r27, Z+7	; 0x07
    3100:	15 96       	adiw	r26, 0x05	; 5
    3102:	1c 93       	st	X, r17
    3104:	0e 93       	st	-X, r16
    3106:	14 97       	sbiw	r26, 0x04	; 4
    3108:	17 83       	std	Z+7, r17	; 0x07
    310a:	06 83       	std	Z+6, r16	; 0x06
    310c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    310e:	8e 9f       	mul	r24, r30
    3110:	f0 01       	movw	r30, r0
    3112:	11 24       	eor	r1, r1
    3114:	e0 5e       	subi	r30, 0xE0	; 224
    3116:	f7 4e       	sbci	r31, 0xE7	; 231
    3118:	fd 87       	std	Y+13, r31	; 0x0d
    311a:	ec 87       	std	Y+12, r30	; 0x0c
    311c:	80 81       	ld	r24, Z
    311e:	8f 5f       	subi	r24, 0xFF	; 255
    3120:	80 83       	st	Z, r24
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	05 c0       	rjmp	.+10     	; 0x3130 <xTaskPriorityDisinherit+0xac>
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	03 c0       	rjmp	.+6      	; 0x3130 <xTaskPriorityDisinherit+0xac>
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	01 c0       	rjmp	.+2      	; 0x3130 <xTaskPriorityDisinherit+0xac>
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	08 95       	ret

0000313a <vTaskPriorityDisinheritAfterTimeout>:
    313a:	0f 93       	push	r16
    313c:	1f 93       	push	r17
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
    3142:	fc 01       	movw	r30, r24
    3144:	89 2b       	or	r24, r25
    3146:	09 f4       	brne	.+2      	; 0x314a <vTaskPriorityDisinheritAfterTimeout+0x10>
    3148:	5a c0       	rjmp	.+180    	; 0x31fe <vTaskPriorityDisinheritAfterTimeout+0xc4>
    314a:	85 a5       	ldd	r24, Z+45	; 0x2d
    314c:	86 17       	cp	r24, r22
    314e:	08 f4       	brcc	.+2      	; 0x3152 <vTaskPriorityDisinheritAfterTimeout+0x18>
    3150:	86 2f       	mov	r24, r22
    3152:	92 8d       	ldd	r25, Z+26	; 0x1a
    3154:	89 17       	cp	r24, r25
    3156:	09 f4       	brne	.+2      	; 0x315a <vTaskPriorityDisinheritAfterTimeout+0x20>
    3158:	52 c0       	rjmp	.+164    	; 0x31fe <vTaskPriorityDisinheritAfterTimeout+0xc4>
    315a:	26 a5       	ldd	r18, Z+46	; 0x2e
    315c:	21 30       	cpi	r18, 0x01	; 1
    315e:	09 f0       	breq	.+2      	; 0x3162 <vTaskPriorityDisinheritAfterTimeout+0x28>
    3160:	4e c0       	rjmp	.+156    	; 0x31fe <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3162:	82 8f       	std	Z+26, r24	; 0x1a
    3164:	46 85       	ldd	r20, Z+14	; 0x0e
    3166:	57 85       	ldd	r21, Z+15	; 0x0f
    3168:	60 89       	ldd	r22, Z+16	; 0x10
    316a:	71 89       	ldd	r23, Z+17	; 0x11
    316c:	77 23       	and	r23, r23
    316e:	64 f0       	brlt	.+24     	; 0x3188 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3170:	4a e0       	ldi	r20, 0x0A	; 10
    3172:	50 e0       	ldi	r21, 0x00	; 0
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	70 e0       	ldi	r23, 0x00	; 0
    3178:	48 1b       	sub	r20, r24
    317a:	51 09       	sbc	r21, r1
    317c:	61 09       	sbc	r22, r1
    317e:	71 09       	sbc	r23, r1
    3180:	46 87       	std	Z+14, r20	; 0x0e
    3182:	57 87       	std	Z+15, r21	; 0x0f
    3184:	60 8b       	std	Z+16, r22	; 0x10
    3186:	71 8b       	std	Z+17, r23	; 0x11
    3188:	24 85       	ldd	r18, Z+12	; 0x0c
    318a:	35 85       	ldd	r19, Z+13	; 0x0d
    318c:	4b e0       	ldi	r20, 0x0B	; 11
    318e:	94 9f       	mul	r25, r20
    3190:	c0 01       	movw	r24, r0
    3192:	11 24       	eor	r1, r1
    3194:	80 5e       	subi	r24, 0xE0	; 224
    3196:	97 4e       	sbci	r25, 0xE7	; 231
    3198:	28 17       	cp	r18, r24
    319a:	39 07       	cpc	r19, r25
    319c:	81 f5       	brne	.+96     	; 0x31fe <vTaskPriorityDisinheritAfterTimeout+0xc4>
    319e:	ef 01       	movw	r28, r30
    31a0:	8f 01       	movw	r16, r30
    31a2:	0e 5f       	subi	r16, 0xFE	; 254
    31a4:	1f 4f       	sbci	r17, 0xFF	; 255
    31a6:	c8 01       	movw	r24, r16
    31a8:	0e 94 82 07 	call	0xf04	; 0xf04 <uxListRemove>
    31ac:	ea 8d       	ldd	r30, Y+26	; 0x1a
    31ae:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <uxTopReadyPriority>
    31b2:	8e 17       	cp	r24, r30
    31b4:	10 f4       	brcc	.+4      	; 0x31ba <vTaskPriorityDisinheritAfterTimeout+0x80>
    31b6:	e0 93 de 17 	sts	0x17DE, r30	; 0x8017de <uxTopReadyPriority>
    31ba:	8b e0       	ldi	r24, 0x0B	; 11
    31bc:	8e 9f       	mul	r24, r30
    31be:	f0 01       	movw	r30, r0
    31c0:	11 24       	eor	r1, r1
    31c2:	e0 5e       	subi	r30, 0xE0	; 224
    31c4:	f7 4e       	sbci	r31, 0xE7	; 231
    31c6:	01 80       	ldd	r0, Z+1	; 0x01
    31c8:	f2 81       	ldd	r31, Z+2	; 0x02
    31ca:	e0 2d       	mov	r30, r0
    31cc:	ff 83       	std	Y+7, r31	; 0x07
    31ce:	ee 83       	std	Y+6, r30	; 0x06
    31d0:	26 81       	ldd	r18, Z+6	; 0x06
    31d2:	37 81       	ldd	r19, Z+7	; 0x07
    31d4:	39 87       	std	Y+9, r19	; 0x09
    31d6:	28 87       	std	Y+8, r18	; 0x08
    31d8:	a6 81       	ldd	r26, Z+6	; 0x06
    31da:	b7 81       	ldd	r27, Z+7	; 0x07
    31dc:	15 96       	adiw	r26, 0x05	; 5
    31de:	1c 93       	st	X, r17
    31e0:	0e 93       	st	-X, r16
    31e2:	14 97       	sbiw	r26, 0x04	; 4
    31e4:	17 83       	std	Z+7, r17	; 0x07
    31e6:	06 83       	std	Z+6, r16	; 0x06
    31e8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    31ea:	8e 9f       	mul	r24, r30
    31ec:	f0 01       	movw	r30, r0
    31ee:	11 24       	eor	r1, r1
    31f0:	e0 5e       	subi	r30, 0xE0	; 224
    31f2:	f7 4e       	sbci	r31, 0xE7	; 231
    31f4:	fd 87       	std	Y+13, r31	; 0x0d
    31f6:	ec 87       	std	Y+12, r30	; 0x0c
    31f8:	80 81       	ld	r24, Z
    31fa:	8f 5f       	subi	r24, 0xFF	; 255
    31fc:	80 83       	st	Z, r24
    31fe:	df 91       	pop	r29
    3200:	cf 91       	pop	r28
    3202:	1f 91       	pop	r17
    3204:	0f 91       	pop	r16
    3206:	08 95       	ret

00003208 <uxTaskResetEventItemValue>:
    3208:	cf 92       	push	r12
    320a:	df 92       	push	r13
    320c:	ef 92       	push	r14
    320e:	ff 92       	push	r15
    3210:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    3214:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    3218:	66 85       	ldd	r22, Z+14	; 0x0e
    321a:	77 85       	ldd	r23, Z+15	; 0x0f
    321c:	80 89       	ldd	r24, Z+16	; 0x10
    321e:	91 89       	ldd	r25, Z+17	; 0x11
    3220:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    3224:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    3228:	a0 91 8e 18 	lds	r26, 0x188E	; 0x80188e <pxCurrentTCB>
    322c:	b0 91 8f 18 	lds	r27, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    3230:	5a 96       	adiw	r26, 0x1a	; 26
    3232:	2c 91       	ld	r18, X
    3234:	0f 2e       	mov	r0, r31
    3236:	fa e0       	ldi	r31, 0x0A	; 10
    3238:	cf 2e       	mov	r12, r31
    323a:	d1 2c       	mov	r13, r1
    323c:	e1 2c       	mov	r14, r1
    323e:	f1 2c       	mov	r15, r1
    3240:	f0 2d       	mov	r31, r0
    3242:	c2 1a       	sub	r12, r18
    3244:	d1 08       	sbc	r13, r1
    3246:	e1 08       	sbc	r14, r1
    3248:	f1 08       	sbc	r15, r1
    324a:	c6 86       	std	Z+14, r12	; 0x0e
    324c:	d7 86       	std	Z+15, r13	; 0x0f
    324e:	e0 8a       	std	Z+16, r14	; 0x10
    3250:	f1 8a       	std	Z+17, r15	; 0x11
    3252:	ff 90       	pop	r15
    3254:	ef 90       	pop	r14
    3256:	df 90       	pop	r13
    3258:	cf 90       	pop	r12
    325a:	08 95       	ret

0000325c <pvTaskIncrementMutexHeldCount>:
    325c:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    3260:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    3264:	89 2b       	or	r24, r25
    3266:	39 f0       	breq	.+14     	; 0x3276 <pvTaskIncrementMutexHeldCount+0x1a>
    3268:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    326c:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    3270:	86 a5       	ldd	r24, Z+46	; 0x2e
    3272:	8f 5f       	subi	r24, 0xFF	; 255
    3274:	86 a7       	std	Z+46, r24	; 0x2e
    3276:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    327a:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    327e:	08 95       	ret

00003280 <xTaskGenericNotifyWait>:
    3280:	4f 92       	push	r4
    3282:	5f 92       	push	r5
    3284:	6f 92       	push	r6
    3286:	7f 92       	push	r7
    3288:	af 92       	push	r10
    328a:	bf 92       	push	r11
    328c:	cf 92       	push	r12
    328e:	df 92       	push	r13
    3290:	ef 92       	push	r14
    3292:	ff 92       	push	r15
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	28 01       	movw	r4, r16
    329e:	39 01       	movw	r6, r18
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	f8 94       	cli
    32a4:	0f 92       	push	r0
    32a6:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    32aa:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    32ae:	c8 2f       	mov	r28, r24
    32b0:	d0 e0       	ldi	r29, 0x00	; 0
    32b2:	ec 0f       	add	r30, r28
    32b4:	fd 1f       	adc	r31, r29
    32b6:	83 a9       	ldd	r24, Z+51	; 0x33
    32b8:	82 30       	cpi	r24, 0x02	; 2
    32ba:	79 f1       	breq	.+94     	; 0x331a <xTaskGenericNotifyWait+0x9a>
    32bc:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    32c0:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    32c4:	ce 01       	movw	r24, r28
    32c6:	88 0f       	add	r24, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	e8 0f       	add	r30, r24
    32d0:	f9 1f       	adc	r31, r25
    32d2:	87 a5       	ldd	r24, Z+47	; 0x2f
    32d4:	90 a9       	ldd	r25, Z+48	; 0x30
    32d6:	a1 a9       	ldd	r26, Z+49	; 0x31
    32d8:	b2 a9       	ldd	r27, Z+50	; 0x32
    32da:	40 95       	com	r20
    32dc:	50 95       	com	r21
    32de:	60 95       	com	r22
    32e0:	70 95       	com	r23
    32e2:	48 23       	and	r20, r24
    32e4:	59 23       	and	r21, r25
    32e6:	6a 23       	and	r22, r26
    32e8:	7b 23       	and	r23, r27
    32ea:	47 a7       	std	Z+47, r20	; 0x2f
    32ec:	50 ab       	std	Z+48, r21	; 0x30
    32ee:	61 ab       	std	Z+49, r22	; 0x31
    32f0:	72 ab       	std	Z+50, r23	; 0x32
    32f2:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    32f6:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    32fa:	ec 0f       	add	r30, r28
    32fc:	fd 1f       	adc	r31, r29
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	83 ab       	std	Z+51, r24	; 0x33
    3302:	a1 14       	cp	r10, r1
    3304:	b1 04       	cpc	r11, r1
    3306:	c1 04       	cpc	r12, r1
    3308:	d1 04       	cpc	r13, r1
    330a:	39 f0       	breq	.+14     	; 0x331a <xTaskGenericNotifyWait+0x9a>
    330c:	41 e0       	ldi	r20, 0x01	; 1
    330e:	c6 01       	movw	r24, r12
    3310:	b5 01       	movw	r22, r10
    3312:	0e 94 04 11 	call	0x2208	; 0x2208 <prvAddCurrentTaskToDelayedList>
    3316:	0e 94 fe 07 	call	0xffc	; 0xffc <vPortYield>
    331a:	0f 90       	pop	r0
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	0f 92       	push	r0
    3324:	e1 14       	cp	r14, r1
    3326:	f1 04       	cpc	r15, r1
    3328:	a1 f0       	breq	.+40     	; 0x3352 <xTaskGenericNotifyWait+0xd2>
    332a:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    332e:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    3332:	ce 01       	movw	r24, r28
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	88 0f       	add	r24, r24
    333a:	99 1f       	adc	r25, r25
    333c:	e8 0f       	add	r30, r24
    333e:	f9 1f       	adc	r31, r25
    3340:	87 a5       	ldd	r24, Z+47	; 0x2f
    3342:	90 a9       	ldd	r25, Z+48	; 0x30
    3344:	a1 a9       	ldd	r26, Z+49	; 0x31
    3346:	b2 a9       	ldd	r27, Z+50	; 0x32
    3348:	f7 01       	movw	r30, r14
    334a:	80 83       	st	Z, r24
    334c:	91 83       	std	Z+1, r25	; 0x01
    334e:	a2 83       	std	Z+2, r26	; 0x02
    3350:	b3 83       	std	Z+3, r27	; 0x03
    3352:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    3356:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    335a:	ec 0f       	add	r30, r28
    335c:	fd 1f       	adc	r31, r29
    335e:	83 a9       	ldd	r24, Z+51	; 0x33
    3360:	82 30       	cpi	r24, 0x02	; 2
    3362:	e9 f4       	brne	.+58     	; 0x339e <xTaskGenericNotifyWait+0x11e>
    3364:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    3368:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    336c:	ce 01       	movw	r24, r28
    336e:	88 0f       	add	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	88 0f       	add	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	e8 0f       	add	r30, r24
    3378:	f9 1f       	adc	r31, r25
    337a:	87 a5       	ldd	r24, Z+47	; 0x2f
    337c:	90 a9       	ldd	r25, Z+48	; 0x30
    337e:	a1 a9       	ldd	r26, Z+49	; 0x31
    3380:	b2 a9       	ldd	r27, Z+50	; 0x32
    3382:	40 94       	com	r4
    3384:	50 94       	com	r5
    3386:	60 94       	com	r6
    3388:	70 94       	com	r7
    338a:	48 22       	and	r4, r24
    338c:	59 22       	and	r5, r25
    338e:	6a 22       	and	r6, r26
    3390:	7b 22       	and	r7, r27
    3392:	47 a6       	std	Z+47, r4	; 0x2f
    3394:	50 aa       	std	Z+48, r5	; 0x30
    3396:	61 aa       	std	Z+49, r6	; 0x31
    3398:	72 aa       	std	Z+50, r7	; 0x32
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	01 c0       	rjmp	.+2      	; 0x33a0 <xTaskGenericNotifyWait+0x120>
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	20 91 8e 18 	lds	r18, 0x188E	; 0x80188e <pxCurrentTCB>
    33a4:	30 91 8f 18 	lds	r19, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    33a8:	c2 0f       	add	r28, r18
    33aa:	d3 1f       	adc	r29, r19
    33ac:	1b aa       	std	Y+51, r1	; 0x33
    33ae:	0f 90       	pop	r0
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	df 91       	pop	r29
    33b4:	cf 91       	pop	r28
    33b6:	1f 91       	pop	r17
    33b8:	0f 91       	pop	r16
    33ba:	ff 90       	pop	r15
    33bc:	ef 90       	pop	r14
    33be:	df 90       	pop	r13
    33c0:	cf 90       	pop	r12
    33c2:	bf 90       	pop	r11
    33c4:	af 90       	pop	r10
    33c6:	7f 90       	pop	r7
    33c8:	6f 90       	pop	r6
    33ca:	5f 90       	pop	r5
    33cc:	4f 90       	pop	r4
    33ce:	08 95       	ret

000033d0 <xTaskGenericNotify>:
    33d0:	8f 92       	push	r8
    33d2:	9f 92       	push	r9
    33d4:	af 92       	push	r10
    33d6:	bf 92       	push	r11
    33d8:	ef 92       	push	r14
    33da:	ff 92       	push	r15
    33dc:	0f 93       	push	r16
    33de:	cf 93       	push	r28
    33e0:	df 93       	push	r29
    33e2:	dc 01       	movw	r26, r24
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	0f 92       	push	r0
    33ea:	e1 14       	cp	r14, r1
    33ec:	f1 04       	cpc	r15, r1
    33ee:	89 f0       	breq	.+34     	; 0x3412 <xTaskGenericNotify+0x42>
    33f0:	e6 2f       	mov	r30, r22
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	ee 0f       	add	r30, r30
    33f6:	ff 1f       	adc	r31, r31
    33f8:	ee 0f       	add	r30, r30
    33fa:	ff 1f       	adc	r31, r31
    33fc:	e8 0f       	add	r30, r24
    33fe:	f9 1f       	adc	r31, r25
    3400:	87 a4       	ldd	r8, Z+47	; 0x2f
    3402:	90 a8       	ldd	r9, Z+48	; 0x30
    3404:	a1 a8       	ldd	r10, Z+49	; 0x31
    3406:	b2 a8       	ldd	r11, Z+50	; 0x32
    3408:	f7 01       	movw	r30, r14
    340a:	80 82       	st	Z, r8
    340c:	91 82       	std	Z+1, r9	; 0x01
    340e:	a2 82       	std	Z+2, r10	; 0x02
    3410:	b3 82       	std	Z+3, r11	; 0x03
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	fd 01       	movw	r30, r26
    3416:	e6 0f       	add	r30, r22
    3418:	f7 1f       	adc	r31, r23
    341a:	83 a9       	ldd	r24, Z+51	; 0x33
    341c:	92 e0       	ldi	r25, 0x02	; 2
    341e:	93 ab       	std	Z+51, r25	; 0x33
    3420:	02 30       	cpi	r16, 0x02	; 2
    3422:	01 f1       	breq	.+64     	; 0x3464 <xTaskGenericNotify+0x94>
    3424:	18 f4       	brcc	.+6      	; 0x342c <xTaskGenericNotify+0x5c>
    3426:	01 30       	cpi	r16, 0x01	; 1
    3428:	31 f0       	breq	.+12     	; 0x3436 <xTaskGenericNotify+0x66>
    342a:	4d c0       	rjmp	.+154    	; 0x34c6 <xTaskGenericNotify+0xf6>
    342c:	03 30       	cpi	r16, 0x03	; 3
    342e:	79 f1       	breq	.+94     	; 0x348e <xTaskGenericNotify+0xbe>
    3430:	04 30       	cpi	r16, 0x04	; 4
    3432:	d1 f1       	breq	.+116    	; 0x34a8 <xTaskGenericNotify+0xd8>
    3434:	48 c0       	rjmp	.+144    	; 0x34c6 <xTaskGenericNotify+0xf6>
    3436:	66 0f       	add	r22, r22
    3438:	77 1f       	adc	r23, r23
    343a:	66 0f       	add	r22, r22
    343c:	77 1f       	adc	r23, r23
    343e:	fd 01       	movw	r30, r26
    3440:	e6 0f       	add	r30, r22
    3442:	f7 1f       	adc	r31, r23
    3444:	87 a4       	ldd	r8, Z+47	; 0x2f
    3446:	90 a8       	ldd	r9, Z+48	; 0x30
    3448:	a1 a8       	ldd	r10, Z+49	; 0x31
    344a:	b2 a8       	ldd	r11, Z+50	; 0x32
    344c:	ba 01       	movw	r22, r20
    344e:	a9 01       	movw	r20, r18
    3450:	48 29       	or	r20, r8
    3452:	59 29       	or	r21, r9
    3454:	6a 29       	or	r22, r10
    3456:	7b 29       	or	r23, r11
    3458:	47 a7       	std	Z+47, r20	; 0x2f
    345a:	50 ab       	std	Z+48, r21	; 0x30
    345c:	61 ab       	std	Z+49, r22	; 0x31
    345e:	72 ab       	std	Z+50, r23	; 0x32
    3460:	01 e0       	ldi	r16, 0x01	; 1
    3462:	34 c0       	rjmp	.+104    	; 0x34cc <xTaskGenericNotify+0xfc>
    3464:	66 0f       	add	r22, r22
    3466:	77 1f       	adc	r23, r23
    3468:	66 0f       	add	r22, r22
    346a:	77 1f       	adc	r23, r23
    346c:	fd 01       	movw	r30, r26
    346e:	e6 0f       	add	r30, r22
    3470:	f7 1f       	adc	r31, r23
    3472:	47 a5       	ldd	r20, Z+47	; 0x2f
    3474:	50 a9       	ldd	r21, Z+48	; 0x30
    3476:	61 a9       	ldd	r22, Z+49	; 0x31
    3478:	72 a9       	ldd	r23, Z+50	; 0x32
    347a:	4f 5f       	subi	r20, 0xFF	; 255
    347c:	5f 4f       	sbci	r21, 0xFF	; 255
    347e:	6f 4f       	sbci	r22, 0xFF	; 255
    3480:	7f 4f       	sbci	r23, 0xFF	; 255
    3482:	47 a7       	std	Z+47, r20	; 0x2f
    3484:	50 ab       	std	Z+48, r21	; 0x30
    3486:	61 ab       	std	Z+49, r22	; 0x31
    3488:	72 ab       	std	Z+50, r23	; 0x32
    348a:	01 e0       	ldi	r16, 0x01	; 1
    348c:	1f c0       	rjmp	.+62     	; 0x34cc <xTaskGenericNotify+0xfc>
    348e:	66 0f       	add	r22, r22
    3490:	77 1f       	adc	r23, r23
    3492:	66 0f       	add	r22, r22
    3494:	77 1f       	adc	r23, r23
    3496:	fd 01       	movw	r30, r26
    3498:	e6 0f       	add	r30, r22
    349a:	f7 1f       	adc	r31, r23
    349c:	27 a7       	std	Z+47, r18	; 0x2f
    349e:	30 ab       	std	Z+48, r19	; 0x30
    34a0:	41 ab       	std	Z+49, r20	; 0x31
    34a2:	52 ab       	std	Z+50, r21	; 0x32
    34a4:	01 e0       	ldi	r16, 0x01	; 1
    34a6:	12 c0       	rjmp	.+36     	; 0x34cc <xTaskGenericNotify+0xfc>
    34a8:	82 30       	cpi	r24, 0x02	; 2
    34aa:	79 f0       	breq	.+30     	; 0x34ca <xTaskGenericNotify+0xfa>
    34ac:	66 0f       	add	r22, r22
    34ae:	77 1f       	adc	r23, r23
    34b0:	66 0f       	add	r22, r22
    34b2:	77 1f       	adc	r23, r23
    34b4:	fd 01       	movw	r30, r26
    34b6:	e6 0f       	add	r30, r22
    34b8:	f7 1f       	adc	r31, r23
    34ba:	27 a7       	std	Z+47, r18	; 0x2f
    34bc:	30 ab       	std	Z+48, r19	; 0x30
    34be:	41 ab       	std	Z+49, r20	; 0x31
    34c0:	52 ab       	std	Z+50, r21	; 0x32
    34c2:	01 e0       	ldi	r16, 0x01	; 1
    34c4:	03 c0       	rjmp	.+6      	; 0x34cc <xTaskGenericNotify+0xfc>
    34c6:	01 e0       	ldi	r16, 0x01	; 1
    34c8:	01 c0       	rjmp	.+2      	; 0x34cc <xTaskGenericNotify+0xfc>
    34ca:	00 e0       	ldi	r16, 0x00	; 0
    34cc:	81 30       	cpi	r24, 0x01	; 1
    34ce:	09 f0       	breq	.+2      	; 0x34d2 <xTaskGenericNotify+0x102>
    34d0:	69 c0       	rjmp	.+210    	; 0x35a4 <xTaskGenericNotify+0x1d4>
    34d2:	1c 96       	adiw	r26, 0x0c	; 12
    34d4:	ed 91       	ld	r30, X+
    34d6:	fc 91       	ld	r31, X
    34d8:	1d 97       	sbiw	r26, 0x0d	; 13
    34da:	16 96       	adiw	r26, 0x06	; 6
    34dc:	cd 91       	ld	r28, X+
    34de:	dc 91       	ld	r29, X
    34e0:	17 97       	sbiw	r26, 0x07	; 7
    34e2:	18 96       	adiw	r26, 0x08	; 8
    34e4:	8d 91       	ld	r24, X+
    34e6:	9c 91       	ld	r25, X
    34e8:	19 97       	sbiw	r26, 0x09	; 9
    34ea:	9f 83       	std	Y+7, r25	; 0x07
    34ec:	8e 83       	std	Y+6, r24	; 0x06
    34ee:	18 96       	adiw	r26, 0x08	; 8
    34f0:	cd 91       	ld	r28, X+
    34f2:	dc 91       	ld	r29, X
    34f4:	19 97       	sbiw	r26, 0x09	; 9
    34f6:	16 96       	adiw	r26, 0x06	; 6
    34f8:	8d 91       	ld	r24, X+
    34fa:	9c 91       	ld	r25, X
    34fc:	17 97       	sbiw	r26, 0x07	; 7
    34fe:	9d 83       	std	Y+5, r25	; 0x05
    3500:	8c 83       	std	Y+4, r24	; 0x04
    3502:	81 81       	ldd	r24, Z+1	; 0x01
    3504:	92 81       	ldd	r25, Z+2	; 0x02
    3506:	9d 01       	movw	r18, r26
    3508:	2e 5f       	subi	r18, 0xFE	; 254
    350a:	3f 4f       	sbci	r19, 0xFF	; 255
    350c:	82 17       	cp	r24, r18
    350e:	93 07       	cpc	r25, r19
    3510:	31 f4       	brne	.+12     	; 0x351e <xTaskGenericNotify+0x14e>
    3512:	18 96       	adiw	r26, 0x08	; 8
    3514:	8d 91       	ld	r24, X+
    3516:	9c 91       	ld	r25, X
    3518:	19 97       	sbiw	r26, 0x09	; 9
    351a:	92 83       	std	Z+2, r25	; 0x02
    351c:	81 83       	std	Z+1, r24	; 0x01
    351e:	1d 96       	adiw	r26, 0x0d	; 13
    3520:	1c 92       	st	X, r1
    3522:	1e 92       	st	-X, r1
    3524:	1c 97       	sbiw	r26, 0x0c	; 12
    3526:	80 81       	ld	r24, Z
    3528:	81 50       	subi	r24, 0x01	; 1
    352a:	80 83       	st	Z, r24
    352c:	5a 96       	adiw	r26, 0x1a	; 26
    352e:	ec 91       	ld	r30, X
    3530:	5a 97       	sbiw	r26, 0x1a	; 26
    3532:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <uxTopReadyPriority>
    3536:	8e 17       	cp	r24, r30
    3538:	10 f4       	brcc	.+4      	; 0x353e <xTaskGenericNotify+0x16e>
    353a:	e0 93 de 17 	sts	0x17DE, r30	; 0x8017de <uxTopReadyPriority>
    353e:	8b e0       	ldi	r24, 0x0B	; 11
    3540:	8e 9f       	mul	r24, r30
    3542:	f0 01       	movw	r30, r0
    3544:	11 24       	eor	r1, r1
    3546:	e0 5e       	subi	r30, 0xE0	; 224
    3548:	f7 4e       	sbci	r31, 0xE7	; 231
    354a:	01 80       	ldd	r0, Z+1	; 0x01
    354c:	f2 81       	ldd	r31, Z+2	; 0x02
    354e:	e0 2d       	mov	r30, r0
    3550:	17 96       	adiw	r26, 0x07	; 7
    3552:	fc 93       	st	X, r31
    3554:	ee 93       	st	-X, r30
    3556:	16 97       	sbiw	r26, 0x06	; 6
    3558:	46 81       	ldd	r20, Z+6	; 0x06
    355a:	57 81       	ldd	r21, Z+7	; 0x07
    355c:	19 96       	adiw	r26, 0x09	; 9
    355e:	5c 93       	st	X, r21
    3560:	4e 93       	st	-X, r20
    3562:	18 97       	sbiw	r26, 0x08	; 8
    3564:	c6 81       	ldd	r28, Z+6	; 0x06
    3566:	d7 81       	ldd	r29, Z+7	; 0x07
    3568:	3d 83       	std	Y+5, r19	; 0x05
    356a:	2c 83       	std	Y+4, r18	; 0x04
    356c:	37 83       	std	Z+7, r19	; 0x07
    356e:	26 83       	std	Z+6, r18	; 0x06
    3570:	5a 96       	adiw	r26, 0x1a	; 26
    3572:	ec 91       	ld	r30, X
    3574:	5a 97       	sbiw	r26, 0x1a	; 26
    3576:	8e 9f       	mul	r24, r30
    3578:	f0 01       	movw	r30, r0
    357a:	11 24       	eor	r1, r1
    357c:	e0 5e       	subi	r30, 0xE0	; 224
    357e:	f7 4e       	sbci	r31, 0xE7	; 231
    3580:	1d 96       	adiw	r26, 0x0d	; 13
    3582:	fc 93       	st	X, r31
    3584:	ee 93       	st	-X, r30
    3586:	1c 97       	sbiw	r26, 0x0c	; 12
    3588:	80 81       	ld	r24, Z
    358a:	8f 5f       	subi	r24, 0xFF	; 255
    358c:	80 83       	st	Z, r24
    358e:	5a 96       	adiw	r26, 0x1a	; 26
    3590:	9c 91       	ld	r25, X
    3592:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    3596:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    359a:	82 8d       	ldd	r24, Z+26	; 0x1a
    359c:	89 17       	cp	r24, r25
    359e:	10 f4       	brcc	.+4      	; 0x35a4 <xTaskGenericNotify+0x1d4>
    35a0:	0e 94 fe 07 	call	0xffc	; 0xffc <vPortYield>
    35a4:	0f 90       	pop	r0
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	80 2f       	mov	r24, r16
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	0f 91       	pop	r16
    35b0:	ff 90       	pop	r15
    35b2:	ef 90       	pop	r14
    35b4:	bf 90       	pop	r11
    35b6:	af 90       	pop	r10
    35b8:	9f 90       	pop	r9
    35ba:	8f 90       	pop	r8
    35bc:	08 95       	ret

000035be <xTaskGenericNotifyFromISR>:
    35be:	8f 92       	push	r8
    35c0:	9f 92       	push	r9
    35c2:	af 92       	push	r10
    35c4:	bf 92       	push	r11
    35c6:	cf 92       	push	r12
    35c8:	df 92       	push	r13
    35ca:	ef 92       	push	r14
    35cc:	ff 92       	push	r15
    35ce:	0f 93       	push	r16
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
    35d4:	dc 01       	movw	r26, r24
    35d6:	e1 14       	cp	r14, r1
    35d8:	f1 04       	cpc	r15, r1
    35da:	89 f0       	breq	.+34     	; 0x35fe <xTaskGenericNotifyFromISR+0x40>
    35dc:	e6 2f       	mov	r30, r22
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	ee 0f       	add	r30, r30
    35e2:	ff 1f       	adc	r31, r31
    35e4:	ee 0f       	add	r30, r30
    35e6:	ff 1f       	adc	r31, r31
    35e8:	e8 0f       	add	r30, r24
    35ea:	f9 1f       	adc	r31, r25
    35ec:	87 a4       	ldd	r8, Z+47	; 0x2f
    35ee:	90 a8       	ldd	r9, Z+48	; 0x30
    35f0:	a1 a8       	ldd	r10, Z+49	; 0x31
    35f2:	b2 a8       	ldd	r11, Z+50	; 0x32
    35f4:	f7 01       	movw	r30, r14
    35f6:	80 82       	st	Z, r8
    35f8:	91 82       	std	Z+1, r9	; 0x01
    35fa:	a2 82       	std	Z+2, r10	; 0x02
    35fc:	b3 82       	std	Z+3, r11	; 0x03
    35fe:	70 e0       	ldi	r23, 0x00	; 0
    3600:	fd 01       	movw	r30, r26
    3602:	e6 0f       	add	r30, r22
    3604:	f7 1f       	adc	r31, r23
    3606:	93 a9       	ldd	r25, Z+51	; 0x33
    3608:	82 e0       	ldi	r24, 0x02	; 2
    360a:	83 ab       	std	Z+51, r24	; 0x33
    360c:	02 30       	cpi	r16, 0x02	; 2
    360e:	01 f1       	breq	.+64     	; 0x3650 <xTaskGenericNotifyFromISR+0x92>
    3610:	18 f4       	brcc	.+6      	; 0x3618 <xTaskGenericNotifyFromISR+0x5a>
    3612:	01 30       	cpi	r16, 0x01	; 1
    3614:	31 f0       	breq	.+12     	; 0x3622 <xTaskGenericNotifyFromISR+0x64>
    3616:	4d c0       	rjmp	.+154    	; 0x36b2 <xTaskGenericNotifyFromISR+0xf4>
    3618:	03 30       	cpi	r16, 0x03	; 3
    361a:	79 f1       	breq	.+94     	; 0x367a <xTaskGenericNotifyFromISR+0xbc>
    361c:	04 30       	cpi	r16, 0x04	; 4
    361e:	d1 f1       	breq	.+116    	; 0x3694 <xTaskGenericNotifyFromISR+0xd6>
    3620:	48 c0       	rjmp	.+144    	; 0x36b2 <xTaskGenericNotifyFromISR+0xf4>
    3622:	66 0f       	add	r22, r22
    3624:	77 1f       	adc	r23, r23
    3626:	66 0f       	add	r22, r22
    3628:	77 1f       	adc	r23, r23
    362a:	fd 01       	movw	r30, r26
    362c:	e6 0f       	add	r30, r22
    362e:	f7 1f       	adc	r31, r23
    3630:	87 a4       	ldd	r8, Z+47	; 0x2f
    3632:	90 a8       	ldd	r9, Z+48	; 0x30
    3634:	a1 a8       	ldd	r10, Z+49	; 0x31
    3636:	b2 a8       	ldd	r11, Z+50	; 0x32
    3638:	ba 01       	movw	r22, r20
    363a:	a9 01       	movw	r20, r18
    363c:	48 29       	or	r20, r8
    363e:	59 29       	or	r21, r9
    3640:	6a 29       	or	r22, r10
    3642:	7b 29       	or	r23, r11
    3644:	47 a7       	std	Z+47, r20	; 0x2f
    3646:	50 ab       	std	Z+48, r21	; 0x30
    3648:	61 ab       	std	Z+49, r22	; 0x31
    364a:	72 ab       	std	Z+50, r23	; 0x32
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	34 c0       	rjmp	.+104    	; 0x36b8 <xTaskGenericNotifyFromISR+0xfa>
    3650:	66 0f       	add	r22, r22
    3652:	77 1f       	adc	r23, r23
    3654:	66 0f       	add	r22, r22
    3656:	77 1f       	adc	r23, r23
    3658:	fd 01       	movw	r30, r26
    365a:	e6 0f       	add	r30, r22
    365c:	f7 1f       	adc	r31, r23
    365e:	47 a5       	ldd	r20, Z+47	; 0x2f
    3660:	50 a9       	ldd	r21, Z+48	; 0x30
    3662:	61 a9       	ldd	r22, Z+49	; 0x31
    3664:	72 a9       	ldd	r23, Z+50	; 0x32
    3666:	4f 5f       	subi	r20, 0xFF	; 255
    3668:	5f 4f       	sbci	r21, 0xFF	; 255
    366a:	6f 4f       	sbci	r22, 0xFF	; 255
    366c:	7f 4f       	sbci	r23, 0xFF	; 255
    366e:	47 a7       	std	Z+47, r20	; 0x2f
    3670:	50 ab       	std	Z+48, r21	; 0x30
    3672:	61 ab       	std	Z+49, r22	; 0x31
    3674:	72 ab       	std	Z+50, r23	; 0x32
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	1f c0       	rjmp	.+62     	; 0x36b8 <xTaskGenericNotifyFromISR+0xfa>
    367a:	66 0f       	add	r22, r22
    367c:	77 1f       	adc	r23, r23
    367e:	66 0f       	add	r22, r22
    3680:	77 1f       	adc	r23, r23
    3682:	fd 01       	movw	r30, r26
    3684:	e6 0f       	add	r30, r22
    3686:	f7 1f       	adc	r31, r23
    3688:	27 a7       	std	Z+47, r18	; 0x2f
    368a:	30 ab       	std	Z+48, r19	; 0x30
    368c:	41 ab       	std	Z+49, r20	; 0x31
    368e:	52 ab       	std	Z+50, r21	; 0x32
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	12 c0       	rjmp	.+36     	; 0x36b8 <xTaskGenericNotifyFromISR+0xfa>
    3694:	92 30       	cpi	r25, 0x02	; 2
    3696:	79 f0       	breq	.+30     	; 0x36b6 <xTaskGenericNotifyFromISR+0xf8>
    3698:	66 0f       	add	r22, r22
    369a:	77 1f       	adc	r23, r23
    369c:	66 0f       	add	r22, r22
    369e:	77 1f       	adc	r23, r23
    36a0:	fd 01       	movw	r30, r26
    36a2:	e6 0f       	add	r30, r22
    36a4:	f7 1f       	adc	r31, r23
    36a6:	27 a7       	std	Z+47, r18	; 0x2f
    36a8:	30 ab       	std	Z+48, r19	; 0x30
    36aa:	41 ab       	std	Z+49, r20	; 0x31
    36ac:	52 ab       	std	Z+50, r21	; 0x32
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	03 c0       	rjmp	.+6      	; 0x36b8 <xTaskGenericNotifyFromISR+0xfa>
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	01 c0       	rjmp	.+2      	; 0x36b8 <xTaskGenericNotifyFromISR+0xfa>
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	91 30       	cpi	r25, 0x01	; 1
    36ba:	09 f0       	breq	.+2      	; 0x36be <xTaskGenericNotifyFromISR+0x100>
    36bc:	96 c0       	rjmp	.+300    	; 0x37ea <xTaskGenericNotifyFromISR+0x22c>
    36be:	90 91 cf 17 	lds	r25, 0x17CF	; 0x8017cf <uxSchedulerSuspended>
    36c2:	91 11       	cpse	r25, r1
    36c4:	5f c0       	rjmp	.+190    	; 0x3784 <xTaskGenericNotifyFromISR+0x1c6>
    36c6:	1c 96       	adiw	r26, 0x0c	; 12
    36c8:	ed 91       	ld	r30, X+
    36ca:	fc 91       	ld	r31, X
    36cc:	1d 97       	sbiw	r26, 0x0d	; 13
    36ce:	16 96       	adiw	r26, 0x06	; 6
    36d0:	cd 91       	ld	r28, X+
    36d2:	dc 91       	ld	r29, X
    36d4:	17 97       	sbiw	r26, 0x07	; 7
    36d6:	18 96       	adiw	r26, 0x08	; 8
    36d8:	2d 91       	ld	r18, X+
    36da:	3c 91       	ld	r19, X
    36dc:	19 97       	sbiw	r26, 0x09	; 9
    36de:	3f 83       	std	Y+7, r19	; 0x07
    36e0:	2e 83       	std	Y+6, r18	; 0x06
    36e2:	18 96       	adiw	r26, 0x08	; 8
    36e4:	cd 91       	ld	r28, X+
    36e6:	dc 91       	ld	r29, X
    36e8:	19 97       	sbiw	r26, 0x09	; 9
    36ea:	16 96       	adiw	r26, 0x06	; 6
    36ec:	2d 91       	ld	r18, X+
    36ee:	3c 91       	ld	r19, X
    36f0:	17 97       	sbiw	r26, 0x07	; 7
    36f2:	3d 83       	std	Y+5, r19	; 0x05
    36f4:	2c 83       	std	Y+4, r18	; 0x04
    36f6:	41 81       	ldd	r20, Z+1	; 0x01
    36f8:	52 81       	ldd	r21, Z+2	; 0x02
    36fa:	9d 01       	movw	r18, r26
    36fc:	2e 5f       	subi	r18, 0xFE	; 254
    36fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3700:	42 17       	cp	r20, r18
    3702:	53 07       	cpc	r21, r19
    3704:	31 f4       	brne	.+12     	; 0x3712 <xTaskGenericNotifyFromISR+0x154>
    3706:	18 96       	adiw	r26, 0x08	; 8
    3708:	4d 91       	ld	r20, X+
    370a:	5c 91       	ld	r21, X
    370c:	19 97       	sbiw	r26, 0x09	; 9
    370e:	52 83       	std	Z+2, r21	; 0x02
    3710:	41 83       	std	Z+1, r20	; 0x01
    3712:	1d 96       	adiw	r26, 0x0d	; 13
    3714:	1c 92       	st	X, r1
    3716:	1e 92       	st	-X, r1
    3718:	1c 97       	sbiw	r26, 0x0c	; 12
    371a:	90 81       	ld	r25, Z
    371c:	91 50       	subi	r25, 0x01	; 1
    371e:	90 83       	st	Z, r25
    3720:	5a 96       	adiw	r26, 0x1a	; 26
    3722:	ec 91       	ld	r30, X
    3724:	5a 97       	sbiw	r26, 0x1a	; 26
    3726:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <uxTopReadyPriority>
    372a:	9e 17       	cp	r25, r30
    372c:	10 f4       	brcc	.+4      	; 0x3732 <xTaskGenericNotifyFromISR+0x174>
    372e:	e0 93 de 17 	sts	0x17DE, r30	; 0x8017de <uxTopReadyPriority>
    3732:	9b e0       	ldi	r25, 0x0B	; 11
    3734:	9e 9f       	mul	r25, r30
    3736:	f0 01       	movw	r30, r0
    3738:	11 24       	eor	r1, r1
    373a:	e0 5e       	subi	r30, 0xE0	; 224
    373c:	f7 4e       	sbci	r31, 0xE7	; 231
    373e:	01 80       	ldd	r0, Z+1	; 0x01
    3740:	f2 81       	ldd	r31, Z+2	; 0x02
    3742:	e0 2d       	mov	r30, r0
    3744:	17 96       	adiw	r26, 0x07	; 7
    3746:	fc 93       	st	X, r31
    3748:	ee 93       	st	-X, r30
    374a:	16 97       	sbiw	r26, 0x06	; 6
    374c:	46 81       	ldd	r20, Z+6	; 0x06
    374e:	57 81       	ldd	r21, Z+7	; 0x07
    3750:	19 96       	adiw	r26, 0x09	; 9
    3752:	5c 93       	st	X, r21
    3754:	4e 93       	st	-X, r20
    3756:	18 97       	sbiw	r26, 0x08	; 8
    3758:	c6 81       	ldd	r28, Z+6	; 0x06
    375a:	d7 81       	ldd	r29, Z+7	; 0x07
    375c:	3d 83       	std	Y+5, r19	; 0x05
    375e:	2c 83       	std	Y+4, r18	; 0x04
    3760:	37 83       	std	Z+7, r19	; 0x07
    3762:	26 83       	std	Z+6, r18	; 0x06
    3764:	5a 96       	adiw	r26, 0x1a	; 26
    3766:	ec 91       	ld	r30, X
    3768:	5a 97       	sbiw	r26, 0x1a	; 26
    376a:	9e 9f       	mul	r25, r30
    376c:	f0 01       	movw	r30, r0
    376e:	11 24       	eor	r1, r1
    3770:	e0 5e       	subi	r30, 0xE0	; 224
    3772:	f7 4e       	sbci	r31, 0xE7	; 231
    3774:	1d 96       	adiw	r26, 0x0d	; 13
    3776:	fc 93       	st	X, r31
    3778:	ee 93       	st	-X, r30
    377a:	1c 97       	sbiw	r26, 0x0c	; 12
    377c:	90 81       	ld	r25, Z
    377e:	9f 5f       	subi	r25, 0xFF	; 255
    3780:	90 83       	st	Z, r25
    3782:	21 c0       	rjmp	.+66     	; 0x37c6 <xTaskGenericNotifyFromISR+0x208>
    3784:	6b ef       	ldi	r22, 0xFB	; 251
    3786:	77 e1       	ldi	r23, 0x17	; 23
    3788:	fb 01       	movw	r30, r22
    378a:	c1 81       	ldd	r28, Z+1	; 0x01
    378c:	d2 81       	ldd	r29, Z+2	; 0x02
    378e:	53 96       	adiw	r26, 0x13	; 19
    3790:	dc 93       	st	X, r29
    3792:	ce 93       	st	-X, r28
    3794:	52 97       	sbiw	r26, 0x12	; 18
    3796:	2e 81       	ldd	r18, Y+6	; 0x06
    3798:	3f 81       	ldd	r19, Y+7	; 0x07
    379a:	55 96       	adiw	r26, 0x15	; 21
    379c:	3c 93       	st	X, r19
    379e:	2e 93       	st	-X, r18
    37a0:	54 97       	sbiw	r26, 0x14	; 20
    37a2:	4e 81       	ldd	r20, Y+6	; 0x06
    37a4:	5f 81       	ldd	r21, Y+7	; 0x07
    37a6:	9d 01       	movw	r18, r26
    37a8:	22 5f       	subi	r18, 0xF2	; 242
    37aa:	3f 4f       	sbci	r19, 0xFF	; 255
    37ac:	fa 01       	movw	r30, r20
    37ae:	35 83       	std	Z+5, r19	; 0x05
    37b0:	24 83       	std	Z+4, r18	; 0x04
    37b2:	3f 83       	std	Y+7, r19	; 0x07
    37b4:	2e 83       	std	Y+6, r18	; 0x06
    37b6:	59 96       	adiw	r26, 0x19	; 25
    37b8:	7c 93       	st	X, r23
    37ba:	6e 93       	st	-X, r22
    37bc:	58 97       	sbiw	r26, 0x18	; 24
    37be:	fb 01       	movw	r30, r22
    37c0:	90 81       	ld	r25, Z
    37c2:	9f 5f       	subi	r25, 0xFF	; 255
    37c4:	90 83       	st	Z, r25
    37c6:	5a 96       	adiw	r26, 0x1a	; 26
    37c8:	2c 91       	ld	r18, X
    37ca:	e0 91 8e 18 	lds	r30, 0x188E	; 0x80188e <pxCurrentTCB>
    37ce:	f0 91 8f 18 	lds	r31, 0x188F	; 0x80188f <pxCurrentTCB+0x1>
    37d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    37d4:	92 17       	cp	r25, r18
    37d6:	48 f4       	brcc	.+18     	; 0x37ea <xTaskGenericNotifyFromISR+0x22c>
    37d8:	c1 14       	cp	r12, r1
    37da:	d1 04       	cpc	r13, r1
    37dc:	19 f0       	breq	.+6      	; 0x37e4 <xTaskGenericNotifyFromISR+0x226>
    37de:	91 e0       	ldi	r25, 0x01	; 1
    37e0:	f6 01       	movw	r30, r12
    37e2:	90 83       	st	Z, r25
    37e4:	91 e0       	ldi	r25, 0x01	; 1
    37e6:	90 93 d8 17 	sts	0x17D8, r25	; 0x8017d8 <xYieldPending>
    37ea:	df 91       	pop	r29
    37ec:	cf 91       	pop	r28
    37ee:	0f 91       	pop	r16
    37f0:	ff 90       	pop	r15
    37f2:	ef 90       	pop	r14
    37f4:	df 90       	pop	r13
    37f6:	cf 90       	pop	r12
    37f8:	bf 90       	pop	r11
    37fa:	af 90       	pop	r10
    37fc:	9f 90       	pop	r9
    37fe:	8f 90       	pop	r8
    3800:	08 95       	ret

00003802 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	21 f4       	brne	.+8      	; 0x380e <xTaskGenericNotifyStateClear+0xc>
    3806:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <pxCurrentTCB>
    380a:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3814:	70 e0       	ldi	r23, 0x00	; 0
    3816:	fc 01       	movw	r30, r24
    3818:	e6 0f       	add	r30, r22
    381a:	f7 1f       	adc	r31, r23
    381c:	23 a9       	ldd	r18, Z+51	; 0x33
    381e:	22 30       	cpi	r18, 0x02	; 2
    3820:	31 f4       	brne	.+12     	; 0x382e <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3822:	fc 01       	movw	r30, r24
    3824:	e6 0f       	add	r30, r22
    3826:	f7 1f       	adc	r31, r23
    3828:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	01 c0       	rjmp	.+2      	; 0x3830 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    382e:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3830:	0f 90       	pop	r0
    3832:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3834:	08 95       	ret

00003836 <prvGetNextExpireTime>:
    3836:	dc 01       	movw	r26, r24
    3838:	e0 91 9a 18 	lds	r30, 0x189A	; 0x80189a <pxCurrentTimerList>
    383c:	f0 91 9b 18 	lds	r31, 0x189B	; 0x80189b <pxCurrentTimerList+0x1>
    3840:	80 81       	ld	r24, Z
    3842:	91 e0       	ldi	r25, 0x01	; 1
    3844:	81 11       	cpse	r24, r1
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	9c 93       	st	X, r25
    384a:	91 11       	cpse	r25, r1
    384c:	08 c0       	rjmp	.+16     	; 0x385e <prvGetNextExpireTime+0x28>
    384e:	07 80       	ldd	r0, Z+7	; 0x07
    3850:	f0 85       	ldd	r31, Z+8	; 0x08
    3852:	e0 2d       	mov	r30, r0
    3854:	60 81       	ld	r22, Z
    3856:	71 81       	ldd	r23, Z+1	; 0x01
    3858:	82 81       	ldd	r24, Z+2	; 0x02
    385a:	93 81       	ldd	r25, Z+3	; 0x03
    385c:	08 95       	ret
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	cb 01       	movw	r24, r22
    3864:	08 95       	ret

00003866 <prvInsertTimerInActiveList>:
    3866:	cf 92       	push	r12
    3868:	df 92       	push	r13
    386a:	ef 92       	push	r14
    386c:	ff 92       	push	r15
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	fc 01       	movw	r30, r24
    3874:	42 83       	std	Z+2, r20	; 0x02
    3876:	53 83       	std	Z+3, r21	; 0x03
    3878:	64 83       	std	Z+4, r22	; 0x04
    387a:	75 83       	std	Z+5, r23	; 0x05
    387c:	93 87       	std	Z+11, r25	; 0x0b
    387e:	82 87       	std	Z+10, r24	; 0x0a
    3880:	04 17       	cp	r16, r20
    3882:	15 07       	cpc	r17, r21
    3884:	26 07       	cpc	r18, r22
    3886:	37 07       	cpc	r19, r23
    3888:	c0 f0       	brcs	.+48     	; 0x38ba <prvInsertTimerInActiveList+0x54>
    388a:	0c 19       	sub	r16, r12
    388c:	1d 09       	sbc	r17, r13
    388e:	2e 09       	sbc	r18, r14
    3890:	3f 09       	sbc	r19, r15
    3892:	86 85       	ldd	r24, Z+14	; 0x0e
    3894:	97 85       	ldd	r25, Z+15	; 0x0f
    3896:	a0 89       	ldd	r26, Z+16	; 0x10
    3898:	b1 89       	ldd	r27, Z+17	; 0x11
    389a:	08 17       	cp	r16, r24
    389c:	19 07       	cpc	r17, r25
    389e:	2a 07       	cpc	r18, r26
    38a0:	3b 07       	cpc	r19, r27
    38a2:	00 f5       	brcc	.+64     	; 0x38e4 <prvInsertTimerInActiveList+0x7e>
    38a4:	bf 01       	movw	r22, r30
    38a6:	6e 5f       	subi	r22, 0xFE	; 254
    38a8:	7f 4f       	sbci	r23, 0xFF	; 255
    38aa:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <pxOverflowTimerList>
    38ae:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <pxOverflowTimerList+0x1>
    38b2:	0e 94 45 07 	call	0xe8a	; 0xe8a <vListInsert>
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	18 c0       	rjmp	.+48     	; 0x38ea <prvInsertTimerInActiveList+0x84>
    38ba:	0c 15       	cp	r16, r12
    38bc:	1d 05       	cpc	r17, r13
    38be:	2e 05       	cpc	r18, r14
    38c0:	3f 05       	cpc	r19, r15
    38c2:	28 f4       	brcc	.+10     	; 0x38ce <prvInsertTimerInActiveList+0x68>
    38c4:	4c 15       	cp	r20, r12
    38c6:	5d 05       	cpc	r21, r13
    38c8:	6e 05       	cpc	r22, r14
    38ca:	7f 05       	cpc	r23, r15
    38cc:	68 f4       	brcc	.+26     	; 0x38e8 <prvInsertTimerInActiveList+0x82>
    38ce:	bf 01       	movw	r22, r30
    38d0:	6e 5f       	subi	r22, 0xFE	; 254
    38d2:	7f 4f       	sbci	r23, 0xFF	; 255
    38d4:	80 91 9a 18 	lds	r24, 0x189A	; 0x80189a <pxCurrentTimerList>
    38d8:	90 91 9b 18 	lds	r25, 0x189B	; 0x80189b <pxCurrentTimerList+0x1>
    38dc:	0e 94 45 07 	call	0xe8a	; 0xe8a <vListInsert>
    38e0:	80 e0       	ldi	r24, 0x00	; 0
    38e2:	03 c0       	rjmp	.+6      	; 0x38ea <prvInsertTimerInActiveList+0x84>
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	01 c0       	rjmp	.+2      	; 0x38ea <prvInsertTimerInActiveList+0x84>
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	1f 91       	pop	r17
    38ec:	0f 91       	pop	r16
    38ee:	ff 90       	pop	r15
    38f0:	ef 90       	pop	r14
    38f2:	df 90       	pop	r13
    38f4:	cf 90       	pop	r12
    38f6:	08 95       	ret

000038f8 <prvCheckForValidListAndQueue>:
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	0f 92       	push	r0
    38fe:	80 91 96 18 	lds	r24, 0x1896	; 0x801896 <xTimerQueue>
    3902:	90 91 97 18 	lds	r25, 0x1897	; 0x801897 <xTimerQueue+0x1>
    3906:	89 2b       	or	r24, r25
    3908:	e9 f4       	brne	.+58     	; 0x3944 <prvCheckForValidListAndQueue+0x4c>
    390a:	87 ea       	ldi	r24, 0xA7	; 167
    390c:	98 e1       	ldi	r25, 0x18	; 24
    390e:	0e 94 30 07 	call	0xe60	; 0xe60 <vListInitialise>
    3912:	8c e9       	ldi	r24, 0x9C	; 156
    3914:	98 e1       	ldi	r25, 0x18	; 24
    3916:	0e 94 30 07 	call	0xe60	; 0xe60 <vListInitialise>
    391a:	87 ea       	ldi	r24, 0xA7	; 167
    391c:	98 e1       	ldi	r25, 0x18	; 24
    391e:	90 93 9b 18 	sts	0x189B, r25	; 0x80189b <pxCurrentTimerList+0x1>
    3922:	80 93 9a 18 	sts	0x189A, r24	; 0x80189a <pxCurrentTimerList>
    3926:	8c e9       	ldi	r24, 0x9C	; 156
    3928:	98 e1       	ldi	r25, 0x18	; 24
    392a:	90 93 99 18 	sts	0x1899, r25	; 0x801899 <pxOverflowTimerList+0x1>
    392e:	80 93 98 18 	sts	0x1898, r24	; 0x801898 <pxOverflowTimerList>
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	67 e0       	ldi	r22, 0x07	; 7
    3936:	8a e0       	ldi	r24, 0x0A	; 10
    3938:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <xQueueGenericCreate>
    393c:	90 93 97 18 	sts	0x1897, r25	; 0x801897 <xTimerQueue+0x1>
    3940:	80 93 96 18 	sts	0x1896, r24	; 0x801896 <xTimerQueue>
    3944:	0f 90       	pop	r0
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	08 95       	ret

0000394a <xTimerCreateTimerTask>:
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
    394e:	0f 93       	push	r16
    3950:	d3 df       	rcall	.-90     	; 0x38f8 <prvCheckForValidListAndQueue>
    3952:	80 91 96 18 	lds	r24, 0x1896	; 0x801896 <xTimerQueue>
    3956:	90 91 97 18 	lds	r25, 0x1897	; 0x801897 <xTimerQueue+0x1>
    395a:	89 2b       	or	r24, r25
    395c:	91 f0       	breq	.+36     	; 0x3982 <xTimerCreateTimerTask+0x38>
    395e:	0f 2e       	mov	r0, r31
    3960:	f4 e9       	ldi	r31, 0x94	; 148
    3962:	ef 2e       	mov	r14, r31
    3964:	f8 e1       	ldi	r31, 0x18	; 24
    3966:	ff 2e       	mov	r15, r31
    3968:	f0 2d       	mov	r31, r0
    396a:	03 e0       	ldi	r16, 0x03	; 3
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 ec       	ldi	r20, 0xC0	; 192
    3972:	50 e0       	ldi	r21, 0x00	; 0
    3974:	69 e9       	ldi	r22, 0x99	; 153
    3976:	73 e0       	ldi	r23, 0x03	; 3
    3978:	88 e5       	ldi	r24, 0x58	; 88
    397a:	91 e0       	ldi	r25, 0x01	; 1
    397c:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskCreate>
    3980:	01 c0       	rjmp	.+2      	; 0x3984 <xTimerCreateTimerTask+0x3a>
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	0f 91       	pop	r16
    3986:	ff 90       	pop	r15
    3988:	ef 90       	pop	r14
    398a:	08 95       	ret

0000398c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    398c:	8f 92       	push	r8
    398e:	9f 92       	push	r9
    3990:	af 92       	push	r10
    3992:	bf 92       	push	r11
    3994:	cf 92       	push	r12
    3996:	df 92       	push	r13
    3998:	ef 92       	push	r14
    399a:	ff 92       	push	r15
    399c:	0f 93       	push	r16
    399e:	1f 93       	push	r17
    39a0:	cf 93       	push	r28
    39a2:	df 93       	push	r29
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
    39a8:	27 97       	sbiw	r28, 0x07	; 7
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	de bf       	out	0x3e, r29	; 62
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    39b4:	e0 91 96 18 	lds	r30, 0x1896	; 0x801896 <xTimerQueue>
    39b8:	f0 91 97 18 	lds	r31, 0x1897	; 0x801897 <xTimerQueue+0x1>
    39bc:	30 97       	sbiw	r30, 0x00	; 0
    39be:	81 f1       	breq	.+96     	; 0x3a20 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    39c0:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    39c2:	2a 83       	std	Y+2, r18	; 0x02
    39c4:	3b 83       	std	Y+3, r19	; 0x03
    39c6:	4c 83       	std	Y+4, r20	; 0x04
    39c8:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    39ca:	9f 83       	std	Y+7, r25	; 0x07
    39cc:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    39ce:	66 30       	cpi	r22, 0x06	; 6
    39d0:	f4 f4       	brge	.+60     	; 0x3a0e <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    39d2:	c3 da       	rcall	.-2682   	; 0x2f5a <xTaskGetSchedulerState>
    39d4:	82 30       	cpi	r24, 0x02	; 2
    39d6:	69 f4       	brne	.+26     	; 0x39f2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    39d8:	00 e0       	ldi	r16, 0x00	; 0
    39da:	a7 01       	movw	r20, r14
    39dc:	96 01       	movw	r18, r12
    39de:	be 01       	movw	r22, r28
    39e0:	6f 5f       	subi	r22, 0xFF	; 255
    39e2:	7f 4f       	sbci	r23, 0xFF	; 255
    39e4:	80 91 96 18 	lds	r24, 0x1896	; 0x801896 <xTimerQueue>
    39e8:	90 91 97 18 	lds	r25, 0x1897	; 0x801897 <xTimerQueue+0x1>
    39ec:	0e 94 16 0a 	call	0x142c	; 0x142c <xQueueGenericSend>
    39f0:	18 c0       	rjmp	.+48     	; 0x3a22 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    39f2:	00 e0       	ldi	r16, 0x00	; 0
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	a9 01       	movw	r20, r18
    39fa:	be 01       	movw	r22, r28
    39fc:	6f 5f       	subi	r22, 0xFF	; 255
    39fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3a00:	80 91 96 18 	lds	r24, 0x1896	; 0x801896 <xTimerQueue>
    3a04:	90 91 97 18 	lds	r25, 0x1897	; 0x801897 <xTimerQueue+0x1>
    3a08:	0e 94 16 0a 	call	0x142c	; 0x142c <xQueueGenericSend>
    3a0c:	0a c0       	rjmp	.+20     	; 0x3a22 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	a8 01       	movw	r20, r16
    3a12:	be 01       	movw	r22, r28
    3a14:	6f 5f       	subi	r22, 0xFF	; 255
    3a16:	7f 4f       	sbci	r23, 0xFF	; 255
    3a18:	cf 01       	movw	r24, r30
    3a1a:	0e 94 c6 0a 	call	0x158c	; 0x158c <xQueueGenericSendFromISR>
    3a1e:	01 c0       	rjmp	.+2      	; 0x3a22 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3a20:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3a22:	27 96       	adiw	r28, 0x07	; 7
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	f8 94       	cli
    3a28:	de bf       	out	0x3e, r29	; 62
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	cd bf       	out	0x3d, r28	; 61
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	1f 91       	pop	r17
    3a34:	0f 91       	pop	r16
    3a36:	ff 90       	pop	r15
    3a38:	ef 90       	pop	r14
    3a3a:	df 90       	pop	r13
    3a3c:	cf 90       	pop	r12
    3a3e:	bf 90       	pop	r11
    3a40:	af 90       	pop	r10
    3a42:	9f 90       	pop	r9
    3a44:	8f 90       	pop	r8
    3a46:	08 95       	ret

00003a48 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3a48:	8f 92       	push	r8
    3a4a:	9f 92       	push	r9
    3a4c:	af 92       	push	r10
    3a4e:	bf 92       	push	r11
    3a50:	cf 92       	push	r12
    3a52:	df 92       	push	r13
    3a54:	ef 92       	push	r14
    3a56:	ff 92       	push	r15
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3a60:	3b c0       	rjmp	.+118    	; 0x3ad8 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3a62:	07 80       	ldd	r0, Z+7	; 0x07
    3a64:	f0 85       	ldd	r31, Z+8	; 0x08
    3a66:	e0 2d       	mov	r30, r0
    3a68:	80 80       	ld	r8, Z
    3a6a:	91 80       	ldd	r9, Z+1	; 0x01
    3a6c:	a2 80       	ldd	r10, Z+2	; 0x02
    3a6e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a70:	c0 85       	ldd	r28, Z+8	; 0x08
    3a72:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a74:	8e 01       	movw	r16, r28
    3a76:	0e 5f       	subi	r16, 0xFE	; 254
    3a78:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7a:	c8 01       	movw	r24, r16
    3a7c:	0e 94 82 07 	call	0xf04	; 0xf04 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a80:	ec 89       	ldd	r30, Y+20	; 0x14
    3a82:	fd 89       	ldd	r31, Y+21	; 0x15
    3a84:	ce 01       	movw	r24, r28
    3a86:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3a88:	8e 89       	ldd	r24, Y+22	; 0x16
    3a8a:	82 ff       	sbrs	r24, 2
    3a8c:	25 c0       	rjmp	.+74     	; 0x3ad8 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3a8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a90:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a92:	a8 89       	ldd	r26, Y+16	; 0x10
    3a94:	b9 89       	ldd	r27, Y+17	; 0x11
    3a96:	88 0d       	add	r24, r8
    3a98:	99 1d       	adc	r25, r9
    3a9a:	aa 1d       	adc	r26, r10
    3a9c:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3a9e:	88 16       	cp	r8, r24
    3aa0:	99 06       	cpc	r9, r25
    3aa2:	aa 06       	cpc	r10, r26
    3aa4:	bb 06       	cpc	r11, r27
    3aa6:	70 f4       	brcc	.+28     	; 0x3ac4 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3aa8:	8a 83       	std	Y+2, r24	; 0x02
    3aaa:	9b 83       	std	Y+3, r25	; 0x03
    3aac:	ac 83       	std	Y+4, r26	; 0x04
    3aae:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3ab0:	db 87       	std	Y+11, r29	; 0x0b
    3ab2:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3ab4:	b8 01       	movw	r22, r16
    3ab6:	80 91 9a 18 	lds	r24, 0x189A	; 0x80189a <pxCurrentTimerList>
    3aba:	90 91 9b 18 	lds	r25, 0x189B	; 0x80189b <pxCurrentTimerList+0x1>
    3abe:	0e 94 45 07 	call	0xe8a	; 0xe8a <vListInsert>
    3ac2:	0a c0       	rjmp	.+20     	; 0x3ad8 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3ac4:	c1 2c       	mov	r12, r1
    3ac6:	d1 2c       	mov	r13, r1
    3ac8:	76 01       	movw	r14, r12
    3aca:	00 e0       	ldi	r16, 0x00	; 0
    3acc:	10 e0       	ldi	r17, 0x00	; 0
    3ace:	a5 01       	movw	r20, r10
    3ad0:	94 01       	movw	r18, r8
    3ad2:	60 e0       	ldi	r22, 0x00	; 0
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	5a df       	rcall	.-332    	; 0x398c <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3ad8:	e0 91 9a 18 	lds	r30, 0x189A	; 0x80189a <pxCurrentTimerList>
    3adc:	f0 91 9b 18 	lds	r31, 0x189B	; 0x80189b <pxCurrentTimerList+0x1>
    3ae0:	80 81       	ld	r24, Z
    3ae2:	81 11       	cpse	r24, r1
    3ae4:	be cf       	rjmp	.-132    	; 0x3a62 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3ae6:	80 91 98 18 	lds	r24, 0x1898	; 0x801898 <pxOverflowTimerList>
    3aea:	90 91 99 18 	lds	r25, 0x1899	; 0x801899 <pxOverflowTimerList+0x1>
    3aee:	90 93 9b 18 	sts	0x189B, r25	; 0x80189b <pxCurrentTimerList+0x1>
    3af2:	80 93 9a 18 	sts	0x189A, r24	; 0x80189a <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3af6:	f0 93 99 18 	sts	0x1899, r31	; 0x801899 <pxOverflowTimerList+0x1>
    3afa:	e0 93 98 18 	sts	0x1898, r30	; 0x801898 <pxOverflowTimerList>
    }
    3afe:	df 91       	pop	r29
    3b00:	cf 91       	pop	r28
    3b02:	1f 91       	pop	r17
    3b04:	0f 91       	pop	r16
    3b06:	ff 90       	pop	r15
    3b08:	ef 90       	pop	r14
    3b0a:	df 90       	pop	r13
    3b0c:	cf 90       	pop	r12
    3b0e:	bf 90       	pop	r11
    3b10:	af 90       	pop	r10
    3b12:	9f 90       	pop	r9
    3b14:	8f 90       	pop	r8
    3b16:	08 95       	ret

00003b18 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3b18:	cf 92       	push	r12
    3b1a:	df 92       	push	r13
    3b1c:	ef 92       	push	r14
    3b1e:	ff 92       	push	r15
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
    3b24:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3b26:	0e 94 30 12 	call	0x2460	; 0x2460 <xTaskGetTickCount>
    3b2a:	6b 01       	movw	r12, r22
    3b2c:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3b2e:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <xLastTime.2436>
    3b32:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <xLastTime.2436+0x1>
    3b36:	a0 91 92 18 	lds	r26, 0x1892	; 0x801892 <xLastTime.2436+0x2>
    3b3a:	b0 91 93 18 	lds	r27, 0x1893	; 0x801893 <xLastTime.2436+0x3>
    3b3e:	c8 16       	cp	r12, r24
    3b40:	d9 06       	cpc	r13, r25
    3b42:	ea 06       	cpc	r14, r26
    3b44:	fb 06       	cpc	r15, r27
    3b46:	20 f4       	brcc	.+8      	; 0x3b50 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3b48:	7f df       	rcall	.-258    	; 0x3a48 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	88 83       	st	Y, r24
    3b4e:	01 c0       	rjmp	.+2      	; 0x3b52 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3b50:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3b52:	c0 92 90 18 	sts	0x1890, r12	; 0x801890 <xLastTime.2436>
    3b56:	d0 92 91 18 	sts	0x1891, r13	; 0x801891 <xLastTime.2436+0x1>
    3b5a:	e0 92 92 18 	sts	0x1892, r14	; 0x801892 <xLastTime.2436+0x2>
    3b5e:	f0 92 93 18 	sts	0x1893, r15	; 0x801893 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3b62:	c7 01       	movw	r24, r14
    3b64:	b6 01       	movw	r22, r12
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	ff 90       	pop	r15
    3b6c:	ef 90       	pop	r14
    3b6e:	df 90       	pop	r13
    3b70:	cf 90       	pop	r12
    3b72:	08 95       	ret

00003b74 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3b74:	4f 92       	push	r4
    3b76:	5f 92       	push	r5
    3b78:	6f 92       	push	r6
    3b7a:	7f 92       	push	r7
    3b7c:	8f 92       	push	r8
    3b7e:	9f 92       	push	r9
    3b80:	af 92       	push	r10
    3b82:	bf 92       	push	r11
    3b84:	cf 92       	push	r12
    3b86:	df 92       	push	r13
    3b88:	ef 92       	push	r14
    3b8a:	ff 92       	push	r15
    3b8c:	0f 93       	push	r16
    3b8e:	1f 93       	push	r17
    3b90:	cf 93       	push	r28
    3b92:	df 93       	push	r29
    3b94:	4b 01       	movw	r8, r22
    3b96:	5c 01       	movw	r10, r24
    3b98:	29 01       	movw	r4, r18
    3b9a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3b9c:	e0 91 9a 18 	lds	r30, 0x189A	; 0x80189a <pxCurrentTimerList>
    3ba0:	f0 91 9b 18 	lds	r31, 0x189B	; 0x80189b <pxCurrentTimerList+0x1>
    3ba4:	07 80       	ldd	r0, Z+7	; 0x07
    3ba6:	f0 85       	ldd	r31, Z+8	; 0x08
    3ba8:	e0 2d       	mov	r30, r0
    3baa:	c0 85       	ldd	r28, Z+8	; 0x08
    3bac:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bae:	ce 01       	movw	r24, r28
    3bb0:	02 96       	adiw	r24, 0x02	; 2
    3bb2:	0e 94 82 07 	call	0xf04	; 0xf04 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3bb6:	8e 89       	ldd	r24, Y+22	; 0x16
    3bb8:	82 ff       	sbrs	r24, 2
    3bba:	1b c0       	rjmp	.+54     	; 0x3bf2 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3bbc:	4e 85       	ldd	r20, Y+14	; 0x0e
    3bbe:	5f 85       	ldd	r21, Y+15	; 0x0f
    3bc0:	68 89       	ldd	r22, Y+16	; 0x10
    3bc2:	79 89       	ldd	r23, Y+17	; 0x11
    3bc4:	48 0d       	add	r20, r8
    3bc6:	59 1d       	adc	r21, r9
    3bc8:	6a 1d       	adc	r22, r10
    3bca:	7b 1d       	adc	r23, r11
    3bcc:	75 01       	movw	r14, r10
    3bce:	64 01       	movw	r12, r8
    3bd0:	93 01       	movw	r18, r6
    3bd2:	82 01       	movw	r16, r4
    3bd4:	ce 01       	movw	r24, r28
    3bd6:	47 de       	rcall	.-882    	; 0x3866 <prvInsertTimerInActiveList>
    3bd8:	88 23       	and	r24, r24
    3bda:	69 f0       	breq	.+26     	; 0x3bf6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3bdc:	c1 2c       	mov	r12, r1
    3bde:	d1 2c       	mov	r13, r1
    3be0:	76 01       	movw	r14, r12
    3be2:	00 e0       	ldi	r16, 0x00	; 0
    3be4:	10 e0       	ldi	r17, 0x00	; 0
    3be6:	a5 01       	movw	r20, r10
    3be8:	94 01       	movw	r18, r8
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	ce 01       	movw	r24, r28
    3bee:	ce de       	rcall	.-612    	; 0x398c <xTimerGenericCommand>
    3bf0:	02 c0       	rjmp	.+4      	; 0x3bf6 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bf2:	8e 7f       	andi	r24, 0xFE	; 254
    3bf4:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3bf6:	ec 89       	ldd	r30, Y+20	; 0x14
    3bf8:	fd 89       	ldd	r31, Y+21	; 0x15
    3bfa:	ce 01       	movw	r24, r28
    3bfc:	19 95       	eicall
    }
    3bfe:	df 91       	pop	r29
    3c00:	cf 91       	pop	r28
    3c02:	1f 91       	pop	r17
    3c04:	0f 91       	pop	r16
    3c06:	ff 90       	pop	r15
    3c08:	ef 90       	pop	r14
    3c0a:	df 90       	pop	r13
    3c0c:	cf 90       	pop	r12
    3c0e:	bf 90       	pop	r11
    3c10:	af 90       	pop	r10
    3c12:	9f 90       	pop	r9
    3c14:	8f 90       	pop	r8
    3c16:	7f 90       	pop	r7
    3c18:	6f 90       	pop	r6
    3c1a:	5f 90       	pop	r5
    3c1c:	4f 90       	pop	r4
    3c1e:	08 95       	ret

00003c20 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3c20:	8f 92       	push	r8
    3c22:	9f 92       	push	r9
    3c24:	af 92       	push	r10
    3c26:	bf 92       	push	r11
    3c28:	cf 92       	push	r12
    3c2a:	df 92       	push	r13
    3c2c:	ef 92       	push	r14
    3c2e:	ff 92       	push	r15
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	1f 92       	push	r1
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
    3c3c:	6b 01       	movw	r12, r22
    3c3e:	7c 01       	movw	r14, r24
    3c40:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3c42:	0e 94 2a 12 	call	0x2454	; 0x2454 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c46:	ce 01       	movw	r24, r28
    3c48:	01 96       	adiw	r24, 0x01	; 1
    3c4a:	66 df       	rcall	.-308    	; 0x3b18 <prvSampleTimeNow>
    3c4c:	4b 01       	movw	r8, r22
    3c4e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3c50:	89 81       	ldd	r24, Y+1	; 0x01
    3c52:	81 11       	cpse	r24, r1
    3c54:	2d c0       	rjmp	.+90     	; 0x3cb0 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3c56:	11 11       	cpse	r17, r1
    3c58:	0d c0       	rjmp	.+26     	; 0x3c74 <prvProcessTimerOrBlockTask+0x54>
    3c5a:	8c 14       	cp	r8, r12
    3c5c:	9d 04       	cpc	r9, r13
    3c5e:	ae 04       	cpc	r10, r14
    3c60:	bf 04       	cpc	r11, r15
    3c62:	40 f0       	brcs	.+16     	; 0x3c74 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3c64:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3c68:	a5 01       	movw	r20, r10
    3c6a:	94 01       	movw	r18, r8
    3c6c:	c7 01       	movw	r24, r14
    3c6e:	b6 01       	movw	r22, r12
    3c70:	81 df       	rcall	.-254    	; 0x3b74 <prvProcessExpiredTimer>
    3c72:	20 c0       	rjmp	.+64     	; 0x3cb4 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3c74:	11 23       	and	r17, r17
    3c76:	41 f0       	breq	.+16     	; 0x3c88 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3c78:	e0 91 98 18 	lds	r30, 0x1898	; 0x801898 <pxOverflowTimerList>
    3c7c:	f0 91 99 18 	lds	r31, 0x1899	; 0x801899 <pxOverflowTimerList+0x1>
    3c80:	80 81       	ld	r24, Z
    3c82:	11 e0       	ldi	r17, 0x01	; 1
    3c84:	81 11       	cpse	r24, r1
    3c86:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3c88:	b7 01       	movw	r22, r14
    3c8a:	a6 01       	movw	r20, r12
    3c8c:	48 19       	sub	r20, r8
    3c8e:	59 09       	sbc	r21, r9
    3c90:	6a 09       	sbc	r22, r10
    3c92:	7b 09       	sbc	r23, r11
    3c94:	21 2f       	mov	r18, r17
    3c96:	80 91 96 18 	lds	r24, 0x1896	; 0x801896 <xTimerQueue>
    3c9a:	90 91 97 18 	lds	r25, 0x1897	; 0x801897 <xTimerQueue+0x1>
    3c9e:	0e 94 41 0c 	call	0x1882	; 0x1882 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3ca2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>
    3ca6:	81 11       	cpse	r24, r1
    3ca8:	05 c0       	rjmp	.+10     	; 0x3cb4 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3caa:	0e 94 fe 07 	call	0xffc	; 0xffc <vPortYield>
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3cb0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <xTaskResumeAll>
            }
        }
    }
    3cb4:	0f 90       	pop	r0
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	1f 91       	pop	r17
    3cbc:	ff 90       	pop	r15
    3cbe:	ef 90       	pop	r14
    3cc0:	df 90       	pop	r13
    3cc2:	cf 90       	pop	r12
    3cc4:	bf 90       	pop	r11
    3cc6:	af 90       	pop	r10
    3cc8:	9f 90       	pop	r9
    3cca:	8f 90       	pop	r8
    3ccc:	08 95       	ret

00003cce <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3cce:	af 92       	push	r10
    3cd0:	bf 92       	push	r11
    3cd2:	cf 92       	push	r12
    3cd4:	df 92       	push	r13
    3cd6:	ef 92       	push	r14
    3cd8:	ff 92       	push	r15
    3cda:	0f 93       	push	r16
    3cdc:	1f 93       	push	r17
    3cde:	cf 93       	push	r28
    3ce0:	df 93       	push	r29
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
    3ce6:	28 97       	sbiw	r28, 0x08	; 8
    3ce8:	0f b6       	in	r0, 0x3f	; 63
    3cea:	f8 94       	cli
    3cec:	de bf       	out	0x3e, r29	; 62
    3cee:	0f be       	out	0x3f, r0	; 63
    3cf0:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3cf2:	82 c0       	rjmp	.+260    	; 0x3df8 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3cf4:	89 81       	ldd	r24, Y+1	; 0x01
    3cf6:	88 23       	and	r24, r24
    3cf8:	0c f4       	brge	.+2      	; 0x3cfc <prvProcessReceivedCommands+0x2e>
    3cfa:	7e c0       	rjmp	.+252    	; 0x3df8 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3cfc:	ae 80       	ldd	r10, Y+6	; 0x06
    3cfe:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3d00:	d5 01       	movw	r26, r10
    3d02:	1c 96       	adiw	r26, 0x0c	; 12
    3d04:	8d 91       	ld	r24, X+
    3d06:	9c 91       	ld	r25, X
    3d08:	1d 97       	sbiw	r26, 0x0d	; 13
    3d0a:	89 2b       	or	r24, r25
    3d0c:	21 f0       	breq	.+8      	; 0x3d16 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3d0e:	c5 01       	movw	r24, r10
    3d10:	02 96       	adiw	r24, 0x02	; 2
    3d12:	0e 94 82 07 	call	0xf04	; 0xf04 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3d16:	ce 01       	movw	r24, r28
    3d18:	08 96       	adiw	r24, 0x08	; 8
    3d1a:	fe de       	rcall	.-516    	; 0x3b18 <prvSampleTimeNow>
    3d1c:	8b 01       	movw	r16, r22
    3d1e:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3d20:	e9 81       	ldd	r30, Y+1	; 0x01
    3d22:	0e 2e       	mov	r0, r30
    3d24:	00 0c       	add	r0, r0
    3d26:	ff 0b       	sbc	r31, r31
    3d28:	ea 30       	cpi	r30, 0x0A	; 10
    3d2a:	f1 05       	cpc	r31, r1
    3d2c:	08 f0       	brcs	.+2      	; 0x3d30 <prvProcessReceivedCommands+0x62>
    3d2e:	64 c0       	rjmp	.+200    	; 0x3df8 <prvProcessReceivedCommands+0x12a>
    3d30:	88 27       	eor	r24, r24
    3d32:	ee 58       	subi	r30, 0x8E	; 142
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	8f 4f       	sbci	r24, 0xFF	; 255
    3d38:	0c 94 66 37 	jmp	0x6ecc	; 0x6ecc <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3d3c:	f5 01       	movw	r30, r10
    3d3e:	86 89       	ldd	r24, Z+22	; 0x16
    3d40:	81 60       	ori	r24, 0x01	; 1
    3d42:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3d44:	ca 80       	ldd	r12, Y+2	; 0x02
    3d46:	db 80       	ldd	r13, Y+3	; 0x03
    3d48:	ec 80       	ldd	r14, Y+4	; 0x04
    3d4a:	fd 80       	ldd	r15, Y+5	; 0x05
    3d4c:	46 85       	ldd	r20, Z+14	; 0x0e
    3d4e:	57 85       	ldd	r21, Z+15	; 0x0f
    3d50:	60 89       	ldd	r22, Z+16	; 0x10
    3d52:	71 89       	ldd	r23, Z+17	; 0x11
    3d54:	4c 0d       	add	r20, r12
    3d56:	5d 1d       	adc	r21, r13
    3d58:	6e 1d       	adc	r22, r14
    3d5a:	7f 1d       	adc	r23, r15
    3d5c:	c5 01       	movw	r24, r10
    3d5e:	83 dd       	rcall	.-1274   	; 0x3866 <prvInsertTimerInActiveList>
    3d60:	88 23       	and	r24, r24
    3d62:	09 f4       	brne	.+2      	; 0x3d66 <prvProcessReceivedCommands+0x98>
    3d64:	49 c0       	rjmp	.+146    	; 0x3df8 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3d66:	d5 01       	movw	r26, r10
    3d68:	54 96       	adiw	r26, 0x14	; 20
    3d6a:	ed 91       	ld	r30, X+
    3d6c:	fc 91       	ld	r31, X
    3d6e:	55 97       	sbiw	r26, 0x15	; 21
    3d70:	c5 01       	movw	r24, r10
    3d72:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3d74:	f5 01       	movw	r30, r10
    3d76:	86 89       	ldd	r24, Z+22	; 0x16
    3d78:	82 ff       	sbrs	r24, 2
    3d7a:	3e c0       	rjmp	.+124    	; 0x3df8 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3d7c:	4a 81       	ldd	r20, Y+2	; 0x02
    3d7e:	5b 81       	ldd	r21, Y+3	; 0x03
    3d80:	6c 81       	ldd	r22, Y+4	; 0x04
    3d82:	7d 81       	ldd	r23, Y+5	; 0x05
    3d84:	86 85       	ldd	r24, Z+14	; 0x0e
    3d86:	97 85       	ldd	r25, Z+15	; 0x0f
    3d88:	a0 89       	ldd	r26, Z+16	; 0x10
    3d8a:	b1 89       	ldd	r27, Z+17	; 0x11
    3d8c:	9a 01       	movw	r18, r20
    3d8e:	ab 01       	movw	r20, r22
    3d90:	28 0f       	add	r18, r24
    3d92:	39 1f       	adc	r19, r25
    3d94:	4a 1f       	adc	r20, r26
    3d96:	5b 1f       	adc	r21, r27
    3d98:	c1 2c       	mov	r12, r1
    3d9a:	d1 2c       	mov	r13, r1
    3d9c:	76 01       	movw	r14, r12
    3d9e:	00 e0       	ldi	r16, 0x00	; 0
    3da0:	10 e0       	ldi	r17, 0x00	; 0
    3da2:	60 e0       	ldi	r22, 0x00	; 0
    3da4:	c5 01       	movw	r24, r10
    3da6:	f2 dd       	rcall	.-1052   	; 0x398c <xTimerGenericCommand>
    3da8:	27 c0       	rjmp	.+78     	; 0x3df8 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3daa:	d5 01       	movw	r26, r10
    3dac:	56 96       	adiw	r26, 0x16	; 22
    3dae:	8c 91       	ld	r24, X
    3db0:	56 97       	sbiw	r26, 0x16	; 22
    3db2:	8e 7f       	andi	r24, 0xFE	; 254
    3db4:	56 96       	adiw	r26, 0x16	; 22
    3db6:	8c 93       	st	X, r24
                        break;
    3db8:	1f c0       	rjmp	.+62     	; 0x3df8 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3dba:	f5 01       	movw	r30, r10
    3dbc:	86 89       	ldd	r24, Z+22	; 0x16
    3dbe:	81 60       	ori	r24, 0x01	; 1
    3dc0:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3dc2:	4a 81       	ldd	r20, Y+2	; 0x02
    3dc4:	5b 81       	ldd	r21, Y+3	; 0x03
    3dc6:	6c 81       	ldd	r22, Y+4	; 0x04
    3dc8:	7d 81       	ldd	r23, Y+5	; 0x05
    3dca:	46 87       	std	Z+14, r20	; 0x0e
    3dcc:	57 87       	std	Z+15, r21	; 0x0f
    3dce:	60 8b       	std	Z+16, r22	; 0x10
    3dd0:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3dd2:	40 0f       	add	r20, r16
    3dd4:	51 1f       	adc	r21, r17
    3dd6:	62 1f       	adc	r22, r18
    3dd8:	73 1f       	adc	r23, r19
    3dda:	68 01       	movw	r12, r16
    3ddc:	79 01       	movw	r14, r18
    3dde:	c5 01       	movw	r24, r10
    3de0:	42 dd       	rcall	.-1404   	; 0x3866 <prvInsertTimerInActiveList>
                        break;
    3de2:	0a c0       	rjmp	.+20     	; 0x3df8 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3de4:	f5 01       	movw	r30, r10
    3de6:	86 89       	ldd	r24, Z+22	; 0x16
    3de8:	81 fd       	sbrc	r24, 1
    3dea:	04 c0       	rjmp	.+8      	; 0x3df4 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3dec:	c5 01       	movw	r24, r10
    3dee:	0e 94 f3 06 	call	0xde6	; 0xde6 <vPortFree>
    3df2:	02 c0       	rjmp	.+4      	; 0x3df8 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3df4:	8e 7f       	andi	r24, 0xFE	; 254
    3df6:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	a9 01       	movw	r20, r18
    3dfe:	be 01       	movw	r22, r28
    3e00:	6f 5f       	subi	r22, 0xFF	; 255
    3e02:	7f 4f       	sbci	r23, 0xFF	; 255
    3e04:	80 91 96 18 	lds	r24, 0x1896	; 0x801896 <xTimerQueue>
    3e08:	90 91 97 18 	lds	r25, 0x1897	; 0x801897 <xTimerQueue+0x1>
    3e0c:	0e 94 01 0b 	call	0x1602	; 0x1602 <xQueueReceive>
    3e10:	81 11       	cpse	r24, r1
    3e12:	70 cf       	rjmp	.-288    	; 0x3cf4 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3e14:	28 96       	adiw	r28, 0x08	; 8
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	df 91       	pop	r29
    3e22:	cf 91       	pop	r28
    3e24:	1f 91       	pop	r17
    3e26:	0f 91       	pop	r16
    3e28:	ff 90       	pop	r15
    3e2a:	ef 90       	pop	r14
    3e2c:	df 90       	pop	r13
    3e2e:	cf 90       	pop	r12
    3e30:	bf 90       	pop	r11
    3e32:	af 90       	pop	r10
    3e34:	08 95       	ret

00003e36 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3e36:	08 95       	ret

00003e38 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3e38:	84 b1       	in	r24, 0x04	; 4
    3e3a:	80 68       	ori	r24, 0x80	; 128
    3e3c:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3e3e:	85 b1       	in	r24, 0x05	; 5
    3e40:	80 68       	ori	r24, 0x80	; 128
    3e42:	85 b9       	out	0x05, r24	; 5
    3e44:	08 95       	ret

00003e46 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3e46:	83 b1       	in	r24, 0x03	; 3
    3e48:	80 68       	ori	r24, 0x80	; 128
    3e4a:	83 b9       	out	0x03, r24	; 3
    3e4c:	08 95       	ret

00003e4e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3e4e:	f4 df       	rcall	.-24     	; 0x3e38 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3e50:	2f ef       	ldi	r18, 0xFF	; 255
    3e52:	80 e7       	ldi	r24, 0x70	; 112
    3e54:	92 e0       	ldi	r25, 0x02	; 2
    3e56:	21 50       	subi	r18, 0x01	; 1
    3e58:	80 40       	sbci	r24, 0x00	; 0
    3e5a:	90 40       	sbci	r25, 0x00	; 0
    3e5c:	e1 f7       	brne	.-8      	; 0x3e56 <vApplicationMallocFailedHook+0x8>
    3e5e:	00 c0       	rjmp	.+0      	; 0x3e60 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3e60:	00 00       	nop
    3e62:	f1 df       	rcall	.-30     	; 0x3e46 <prvBlinkMainLed>
    3e64:	f5 cf       	rjmp	.-22     	; 0x3e50 <vApplicationMallocFailedHook+0x2>

00003e66 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3e66:	e8 df       	rcall	.-48     	; 0x3e38 <prvSetMainLedOn>
    3e68:	2f ef       	ldi	r18, 0xFF	; 255
    3e6a:	87 ea       	ldi	r24, 0xA7	; 167
    3e6c:	91 e6       	ldi	r25, 0x61	; 97
    3e6e:	21 50       	subi	r18, 0x01	; 1
    3e70:	80 40       	sbci	r24, 0x00	; 0
    3e72:	90 40       	sbci	r25, 0x00	; 0
    3e74:	e1 f7       	brne	.-8      	; 0x3e6e <vApplicationStackOverflowHook+0x8>
    3e76:	00 c0       	rjmp	.+0      	; 0x3e78 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3e78:	00 00       	nop
    3e7a:	e5 df       	rcall	.-54     	; 0x3e46 <prvBlinkMainLed>
    3e7c:	f5 cf       	rjmp	.-22     	; 0x3e68 <vApplicationStackOverflowHook+0x2>

00003e7e <set_temperature_percent>:
static uint16_t CO2_PPM = 0;
static float lux = 0;
static uint8_t status = 0;

void set_temperature_percent(int16_t temperature){
	temperaturePercent = temperature;
    3e7e:	90 93 bc 18 	sts	0x18BC, r25	; 0x8018bc <temperaturePercent+0x1>
    3e82:	80 93 bb 18 	sts	0x18BB, r24	; 0x8018bb <temperaturePercent>
    3e86:	08 95       	ret

00003e88 <set_humidity_percent>:
}

void set_humidity_percent(uint16_t humidity){
	humidityPercent = humidity;
    3e88:	90 93 ba 18 	sts	0x18BA, r25	; 0x8018ba <humidityPercent+0x1>
    3e8c:	80 93 b9 18 	sts	0x18B9, r24	; 0x8018b9 <humidityPercent>
    3e90:	08 95       	ret

00003e92 <set_CO2_ppm>:
}

void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    3e92:	90 93 b8 18 	sts	0x18B8, r25	; 0x8018b8 <CO2_PPM+0x1>
    3e96:	80 93 b7 18 	sts	0x18B7, r24	; 0x8018b7 <CO2_PPM>
    3e9a:	08 95       	ret

00003e9c <set_light_lux>:
}

void set_light_lux(float lux_measurement){
	lux = lux_measurement;
    3e9c:	60 93 b3 18 	sts	0x18B3, r22	; 0x8018b3 <lux>
    3ea0:	70 93 b4 18 	sts	0x18B4, r23	; 0x8018b4 <lux+0x1>
    3ea4:	80 93 b5 18 	sts	0x18B5, r24	; 0x8018b5 <lux+0x2>
    3ea8:	90 93 b6 18 	sts	0x18B6, r25	; 0x8018b6 <lux+0x3>
    3eac:	08 95       	ret

00003eae <set_status>:
}

void set_status(uint8_t stat){
	status = stat;
    3eae:	80 93 b2 18 	sts	0x18B2, r24	; 0x8018b2 <status>
    3eb2:	08 95       	ret

00003eb4 <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    3eb4:	fc 01       	movw	r30, r24
	union float_bytes{
		float temp;
		uint8_t bytes[sizeof(float)];
		} holder;
		
		holder.temp = lux;
    3eb6:	30 91 b3 18 	lds	r19, 0x18B3	; 0x8018b3 <lux>
    3eba:	20 91 b4 18 	lds	r18, 0x18B4	; 0x8018b4 <lux+0x1>
    3ebe:	90 91 b5 18 	lds	r25, 0x18B5	; 0x8018b5 <lux+0x2>
    3ec2:	80 91 b6 18 	lds	r24, 0x18B6	; 0x8018b6 <lux+0x3>
		
	
	lora_driver_payload_t payload;
	payload.portNo = port;
    3ec6:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    3ec8:	4b e0       	ldi	r20, 0x0B	; 11
    3eca:	41 83       	std	Z+1, r20	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3ecc:	40 91 bb 18 	lds	r20, 0x18BB	; 0x8018bb <temperaturePercent>
    3ed0:	50 91 bc 18 	lds	r21, 0x18BC	; 0x8018bc <temperaturePercent+0x1>
    3ed4:	52 83       	std	Z+2, r21	; 0x02
	payload.bytes[1] = temperaturePercent;
    3ed6:	43 83       	std	Z+3, r20	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3ed8:	40 91 b9 18 	lds	r20, 0x18B9	; 0x8018b9 <humidityPercent>
    3edc:	50 91 ba 18 	lds	r21, 0x18BA	; 0x8018ba <humidityPercent+0x1>
    3ee0:	54 83       	std	Z+4, r21	; 0x04
	payload.bytes[3] = humidityPercent;
    3ee2:	45 83       	std	Z+5, r20	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    3ee4:	40 91 b7 18 	lds	r20, 0x18B7	; 0x8018b7 <CO2_PPM>
    3ee8:	50 91 b8 18 	lds	r21, 0x18B8	; 0x8018b8 <CO2_PPM+0x1>
    3eec:	56 83       	std	Z+6, r21	; 0x06
	payload.bytes[5] = CO2_PPM;
    3eee:	47 83       	std	Z+7, r20	; 0x07
	payload.bytes[6] = holder.bytes[0];
    3ef0:	30 87       	std	Z+8, r19	; 0x08
	payload.bytes[7] = holder.bytes[1];
    3ef2:	21 87       	std	Z+9, r18	; 0x09
	payload.bytes[8] = holder.bytes[2];
    3ef4:	92 87       	std	Z+10, r25	; 0x0a
	payload.bytes[9] = holder.bytes[3];
    3ef6:	83 87       	std	Z+11, r24	; 0x0b
	payload.bytes[10] = status;
    3ef8:	80 91 b2 18 	lds	r24, 0x18B2	; 0x8018b2 <status>
    3efc:	84 87       	std	Z+12, r24	; 0x0c
	
	return payload;
    3efe:	cf 01       	movw	r24, r30
    3f00:	08 95       	ret

00003f02 <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    3f02:	90 93 be 18 	sts	0x18BE, r25	; 0x8018be <lastCO2ppm+0x1>
    3f06:	80 93 bd 18 	sts	0x18BD, r24	; 0x8018bd <lastCO2ppm>
    3f0a:	08 95       	ret

00003f0c <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    3f0c:	83 e0       	ldi	r24, 0x03	; 3
    3f0e:	0e 94 24 28 	call	0x5048	; 0x5048 <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    3f12:	81 e8       	ldi	r24, 0x81	; 129
    3f14:	9f e1       	ldi	r25, 0x1F	; 31
    3f16:	0c 94 49 28 	jmp	0x5092	; 0x5092 <mh_z19_injectCallBack>
    3f1a:	08 95       	ret

00003f1c <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    3f1c:	0e 94 4e 28 	call	0x509c	; 0x509c <mh_z19_takeMeassuring>
    3f20:	80 93 18 1a 	sts	0x1A18, r24	; 0x801a18 <rc>
	if (rc != MHZ19_OK)
    3f24:	88 23       	and	r24, r24
    3f26:	41 f0       	breq	.+16     	; 0x3f38 <CO2_measure+0x1c>
	{
		// Something went wrong
		printf("Something went wrong while measuring CO2!");
    3f28:	81 ea       	ldi	r24, 0xA1	; 161
    3f2a:	93 e0       	ldi	r25, 0x03	; 3
    3f2c:	9f 93       	push	r25
    3f2e:	8f 93       	push	r24
    3f30:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
    3f34:	0f 90       	pop	r0
    3f36:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3f38:	8d eb       	ldi	r24, 0xBD	; 189
    3f3a:	98 e1       	ldi	r25, 0x18	; 24
    3f3c:	0e 94 7d 28 	call	0x50fa	; 0x50fa <mh_z19_getCo2Ppm>
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	90 93 be 18 	sts	0x18BE, r25	; 0x8018be <lastCO2ppm+0x1>
    3f46:	80 93 bd 18 	sts	0x18BD, r24	; 0x8018bd <lastCO2ppm>
    3f4a:	08 95       	ret

00003f4c <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3f4c:	cc 24       	eor	r12, r12
    3f4e:	ca 94       	dec	r12
    3f50:	dc 2c       	mov	r13, r12
    3f52:	76 01       	movw	r14, r12
    3f54:	01 e0       	ldi	r16, 0x01	; 1
    3f56:	21 e0       	ldi	r18, 0x01	; 1
    3f58:	41 e0       	ldi	r20, 0x01	; 1
    3f5a:	50 e0       	ldi	r21, 0x00	; 0
    3f5c:	60 e0       	ldi	r22, 0x00	; 0
    3f5e:	70 e0       	ldi	r23, 0x00	; 0
    3f60:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <measureEventGroup>
    3f64:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <measureEventGroup+0x1>
    3f68:	0e 94 a9 04 	call	0x952	; 0x952 <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3f6c:	60 ff       	sbrs	r22, 0
    3f6e:	ee cf       	rjmp	.-36     	; 0x3f4c <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    3f70:	d5 df       	rcall	.-86     	; 0x3f1c <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				vTaskDelay(pdMS_TO_TICKS(100));
    3f72:	66 e0       	ldi	r22, 0x06	; 6
    3f74:	70 e0       	ldi	r23, 0x00	; 0
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	90 e0       	ldi	r25, 0x00	; 0
    3f7a:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskDelay>
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    3f7e:	42 e0       	ldi	r20, 0x02	; 2
    3f80:	50 e0       	ldi	r21, 0x00	; 0
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	70 e0       	ldi	r23, 0x00	; 0
    3f86:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <dataReadyEventGroup>
    3f8a:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <dataReadyEventGroup+0x1>
    3f8e:	0e 94 49 05 	call	0xa92	; 0xa92 <xEventGroupSetBits>
    3f92:	dc cf       	rjmp	.-72     	; 0x3f4c <MeasureCo2Task>

00003f94 <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    3f94:	80 91 bd 18 	lds	r24, 0x18BD	; 0x8018bd <lastCO2ppm>
    3f98:	90 91 be 18 	lds	r25, 0x18BE	; 0x8018be <lastCO2ppm+0x1>
    3f9c:	08 95       	ret

00003f9e <create_CO2_sensor_task>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void create_CO2_sensor_task(UBaseType_t priority){
    3f9e:	ef 92       	push	r14
    3fa0:	ff 92       	push	r15
    3fa2:	0f 93       	push	r16
    3fa4:	08 2f       	mov	r16, r24
	
	//Initializing 
		CO2_createSensor();
    3fa6:	b2 df       	rcall	.-156    	; 0x3f0c <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    3fa8:	e1 2c       	mov	r14, r1
    3faa:	f1 2c       	mov	r15, r1
    3fac:	20 e0       	ldi	r18, 0x00	; 0
    3fae:	30 e0       	ldi	r19, 0x00	; 0
    3fb0:	40 ec       	ldi	r20, 0xC0	; 192
    3fb2:	50 e0       	ldi	r21, 0x00	; 0
    3fb4:	6b ec       	ldi	r22, 0xCB	; 203
    3fb6:	73 e0       	ldi	r23, 0x03	; 3
    3fb8:	86 ea       	ldi	r24, 0xA6	; 166
    3fba:	9f e1       	ldi	r25, 0x1F	; 31
    3fbc:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY + priority,
		NULL);
}
    3fc0:	0f 91       	pop	r16
    3fc2:	ff 90       	pop	r15
    3fc4:	ef 90       	pop	r14
    3fc6:	08 95       	ret

00003fc8 <tsl2591Callback>:
		printf("Couldn't initialize light sensor.\n");
	}
}

void tsl2591Callback(tsl2591_returnCode_t rc)
{
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	00 d0       	rcall	.+0      	; 0x3fce <tsl2591Callback+0x6>
    3fce:	1f 92       	push	r1
    3fd0:	cd b7       	in	r28, 0x3d	; 61
    3fd2:	de b7       	in	r29, 0x3e	; 62
	float _lux;
	switch (rc)
    3fd4:	81 30       	cpi	r24, 0x01	; 1
    3fd6:	c9 f4       	brne	.+50     	; 0x400a <tsl2591Callback+0x42>
	{
		case TSL2591_DATA_READY:
		
		if ( TSL2591_OK == (rc = tsl2591_getLux(&_lux)) )
    3fd8:	ce 01       	movw	r24, r28
    3fda:	01 96       	adiw	r24, 0x01	; 1
    3fdc:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <tsl2591_getLux>
    3fe0:	81 11       	cpse	r24, r1
    3fe2:	0d c0       	rjmp	.+26     	; 0x3ffe <tsl2591Callback+0x36>
		{
			lux = _lux;
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe8:	ab 81       	ldd	r26, Y+3	; 0x03
    3fea:	bc 81       	ldd	r27, Y+4	; 0x04
    3fec:	80 93 bf 18 	sts	0x18BF, r24	; 0x8018bf <lux>
    3ff0:	90 93 c0 18 	sts	0x18C0, r25	; 0x8018c0 <lux+0x1>
    3ff4:	a0 93 c1 18 	sts	0x18C1, r26	; 0x8018c1 <lux+0x2>
    3ff8:	b0 93 c2 18 	sts	0x18C2, r27	; 0x8018c2 <lux+0x3>
    3ffc:	06 c0       	rjmp	.+12     	; 0x400a <tsl2591Callback+0x42>
		}
		else if( TSL2591_OVERFLOW == rc )
    3ffe:	83 30       	cpi	r24, 0x03	; 3
    4000:	21 f4       	brne	.+8      	; 0x400a <tsl2591Callback+0x42>
		{
			printf("Lux overflow - change gain and integration time\n");
    4002:	8d ed       	ldi	r24, 0xDD	; 221
    4004:	93 e0       	ldi	r25, 0x03	; 3
    4006:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <puts>
		break;
		
		default:
		break;
	}
}
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	df 91       	pop	r29
    4014:	cf 91       	pop	r28
    4016:	08 95       	ret

00004018 <initialize_light_sensor>:
void light_sensor_measure();
void tsl2591Callback(tsl2591_returnCode_t rc);
void measure_light_task(void *pvParameters);

void initialize_light_sensor(){
	if(TSL2591_OK == tsl2591_initialise(tsl2591Callback)){
    4018:	84 ee       	ldi	r24, 0xE4	; 228
    401a:	9f e1       	ldi	r25, 0x1F	; 31
    401c:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <tsl2591_initialise>
    4020:	81 11       	cpse	r24, r1
    4022:	09 c0       	rjmp	.+18     	; 0x4036 <initialize_light_sensor+0x1e>
		if(TSL2591_OK != tsl2591_enable()){
    4024:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <tsl2591_enable>
    4028:	88 23       	and	r24, r24
    402a:	49 f0       	breq	.+18     	; 0x403e <initialize_light_sensor+0x26>
			printf("Couldn't power up light sensor.\n");
    402c:	8d e0       	ldi	r24, 0x0D	; 13
    402e:	94 e0       	ldi	r25, 0x04	; 4
    4030:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <puts>
    4034:	08 95       	ret
		}
	}
	else{
		printf("Couldn't initialize light sensor.\n");
    4036:	8d e2       	ldi	r24, 0x2D	; 45
    4038:	94 e0       	ldi	r25, 0x04	; 4
    403a:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <puts>
    403e:	08 95       	ret

00004040 <light_sensor_measure>:
		break;
	}
}

void light_sensor_measure(){
	if (TSL2591_OK != tsl2591_fetchData()){
    4040:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <tsl2591_fetchData>
    4044:	88 23       	and	r24, r24
    4046:	21 f0       	breq	.+8      	; 0x4050 <light_sensor_measure+0x10>
		printf("Couldn't fetch data from light sensor.\n");
    4048:	8f e4       	ldi	r24, 0x4F	; 79
    404a:	94 e0       	ldi	r25, 0x04	; 4
    404c:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <puts>
    4050:	08 95       	ret

00004052 <measure_light_task>:
}

void measure_light_task(void *pvParameters){
	for(;;){
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,LIGHT_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    4052:	cc 24       	eor	r12, r12
    4054:	ca 94       	dec	r12
    4056:	dc 2c       	mov	r13, r12
    4058:	76 01       	movw	r14, r12
    405a:	01 e0       	ldi	r16, 0x01	; 1
    405c:	21 e0       	ldi	r18, 0x01	; 1
    405e:	40 e1       	ldi	r20, 0x10	; 16
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	70 e0       	ldi	r23, 0x00	; 0
    4066:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <measureEventGroup>
    406a:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <measureEventGroup+0x1>
    406e:	0e 94 a9 04 	call	0x952	; 0x952 <xEventGroupWaitBits>
		
		if((uxBits & (LIGHT_MEASURE_BIT)) == LIGHT_MEASURE_BIT){
    4072:	64 ff       	sbrs	r22, 4
    4074:	ee cf       	rjmp	.-36     	; 0x4052 <measure_light_task>
			light_sensor_measure();
    4076:	e4 df       	rcall	.-56     	; 0x4040 <light_sensor_measure>
			vTaskDelay(pdMS_TO_TICKS(100));
    4078:	66 e0       	ldi	r22, 0x06	; 6
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskDelay>
			xEventGroupSetBits(dataReadyEventGroup, LIGHT_READY_BIT);
    4084:	40 e2       	ldi	r20, 0x20	; 32
    4086:	50 e0       	ldi	r21, 0x00	; 0
    4088:	60 e0       	ldi	r22, 0x00	; 0
    408a:	70 e0       	ldi	r23, 0x00	; 0
    408c:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <dataReadyEventGroup>
    4090:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <dataReadyEventGroup+0x1>
    4094:	0e 94 49 05 	call	0xa92	; 0xa92 <xEventGroupSetBits>
    4098:	dc cf       	rjmp	.-72     	; 0x4052 <measure_light_task>

0000409a <light_sensor_get_lux>:
		printf("Couldn't fetch data from light sensor.\n");
	}
}

float light_sensor_get_lux(){
	return lux;
    409a:	60 91 bf 18 	lds	r22, 0x18BF	; 0x8018bf <lux>
    409e:	70 91 c0 18 	lds	r23, 0x18C0	; 0x8018c0 <lux+0x1>
    40a2:	80 91 c1 18 	lds	r24, 0x18C1	; 0x8018c1 <lux+0x2>
    40a6:	90 91 c2 18 	lds	r25, 0x18C2	; 0x8018c2 <lux+0x3>
}
    40aa:	08 95       	ret

000040ac <create_light_sensor_task>:

void create_light_sensor_task(UBaseType_t priority){
    40ac:	ef 92       	push	r14
    40ae:	ff 92       	push	r15
    40b0:	0f 93       	push	r16
    40b2:	08 2f       	mov	r16, r24
	
	initialize_light_sensor();
    40b4:	b1 df       	rcall	.-158    	; 0x4018 <initialize_light_sensor>
	
	xTaskCreate(
    40b6:	e1 2c       	mov	r14, r1
    40b8:	f1 2c       	mov	r15, r1
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	40 ec       	ldi	r20, 0xC0	; 192
    40c0:	50 e0       	ldi	r21, 0x00	; 0
    40c2:	66 e7       	ldi	r22, 0x76	; 118
    40c4:	74 e0       	ldi	r23, 0x04	; 4
    40c6:	89 e2       	ldi	r24, 0x29	; 41
    40c8:	90 e2       	ldi	r25, 0x20	; 32
    40ca:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskCreate>
	"MeasureLight",
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
}
    40ce:	0f 91       	pop	r16
    40d0:	ff 90       	pop	r15
    40d2:	ef 90       	pop	r14
    40d4:	08 95       	ret

000040d6 <initialise_TempHumSensor>:
void Temp_Hum_Main_Task(void *pvParameters);
void tempHumSensor_printReturnCode(hih8120_driverReturnCode_t rc);

void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    40d6:	6e d2       	rcall	.+1244   	; 0x45b4 <hih8120_initialise>
    40d8:	88 23       	and	r24, r24
    40da:	41 f0       	breq	.+16     	; 0x40ec <initialise_TempHumSensor+0x16>
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{
		printf("Something went wrong while initialising tempHum sensor");
    40dc:	83 e8       	ldi	r24, 0x83	; 131
    40de:	94 e0       	ldi	r25, 0x04	; 4
    40e0:	9f 93       	push	r25
    40e2:	8f 93       	push	r24
    40e4:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
    40e8:	0f 90       	pop	r0
    40ea:	0f 90       	pop	r0
    40ec:	08 95       	ret

000040ee <create_TempHum_sensor_task>:
	}
}


void create_TempHum_sensor_task(UBaseType_t priority){
    40ee:	ef 92       	push	r14
    40f0:	ff 92       	push	r15
    40f2:	0f 93       	push	r16
    40f4:	08 2f       	mov	r16, r24
	initialise_TempHumSensor();
    40f6:	ef df       	rcall	.-34     	; 0x40d6 <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    40f8:	e1 2c       	mov	r14, r1
    40fa:	f1 2c       	mov	r15, r1
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	40 ec       	ldi	r20, 0xC0	; 192
    4102:	50 e0       	ldi	r21, 0x00	; 0
    4104:	6a eb       	ldi	r22, 0xBA	; 186
    4106:	74 e0       	ldi	r23, 0x04	; 4
    4108:	8c eb       	ldi	r24, 0xBC	; 188
    410a:	90 e2       	ldi	r25, 0x20	; 32
    410c:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
	
}
    4110:	0f 91       	pop	r16
    4112:	ff 90       	pop	r15
    4114:	ef 90       	pop	r14
    4116:	08 95       	ret

00004118 <tempHumSensor_printReturnCode>:
		case HIH8120_OK: returnCodeString = "HIH8120_OK";
		case HIH8120_OUT_OF_HEAP: returnCodeString = "HIH8120_OUT_OF_HEAP";
		case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED";
		case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY";
	}
	printf("RETURNCODE: %s \n", returnCodeString);
    4118:	86 ec       	ldi	r24, 0xC6	; 198
    411a:	94 e0       	ldi	r25, 0x04	; 4
    411c:	9f 93       	push	r25
    411e:	8f 93       	push	r24
    4120:	87 ed       	ldi	r24, 0xD7	; 215
    4122:	94 e0       	ldi	r25, 0x04	; 4
    4124:	9f 93       	push	r25
    4126:	8f 93       	push	r24
    4128:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
}
    412c:	0f 90       	pop	r0
    412e:	0f 90       	pop	r0
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	08 95       	ret

00004136 <measure_Temp_Hum>:
	
}

void measure_Temp_Hum(){
	
	if ( HIH8120_OK != hih8120_wakeup() )
    4136:	56 d2       	rcall	.+1196   	; 0x45e4 <hih8120_wakeup>
    4138:	88 23       	and	r24, r24
    413a:	21 f0       	breq	.+8      	; 0x4144 <measure_Temp_Hum+0xe>
	{
		printf("Could not wake up temp hum sensor \n");
    413c:	88 ee       	ldi	r24, 0xE8	; 232
    413e:	94 e0       	ldi	r25, 0x04	; 4
    4140:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <puts>
		// Something went wrong
		// Investigate the return code further
	}

	vTaskDelay(pdMS_TO_TICKS(60));
    4144:	63 e0       	ldi	r22, 0x03	; 3
    4146:	70 e0       	ldi	r23, 0x00	; 0
    4148:	80 e0       	ldi	r24, 0x00	; 0
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskDelay>
	
	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
	if (measure_rc != HIH8120_OK)
    4150:	5e d2       	rcall	.+1212   	; 0x460e <hih8120_measure>
	{
		tempHumSensor_printReturnCode(measure_rc);
    4152:	81 11       	cpse	r24, r1
    4154:	e1 df       	rcall	.-62     	; 0x4118 <tempHumSensor_printReturnCode>
	}
	vTaskDelay(pdMS_TO_TICKS(50));
    4156:	63 e0       	ldi	r22, 0x03	; 3
    4158:	70 e0       	ldi	r23, 0x00	; 0
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskDelay>
	
	humidity = hih8120_getHumidityPercent_x10();
    4162:	7b d2       	rcall	.+1270   	; 0x465a <hih8120_getHumidityPercent_x10>
    4164:	90 93 c6 18 	sts	0x18C6, r25	; 0x8018c6 <humidity+0x1>
    4168:	80 93 c5 18 	sts	0x18C5, r24	; 0x8018c5 <humidity>
	temperature = hih8120_getTemperature_x10();	
    416c:	9c d2       	rcall	.+1336   	; 0x46a6 <hih8120_getTemperature_x10>
    416e:	90 93 c4 18 	sts	0x18C4, r25	; 0x8018c4 <temperature+0x1>
    4172:	80 93 c3 18 	sts	0x18C3, r24	; 0x8018c3 <temperature>
    4176:	08 95       	ret

00004178 <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(void *pvParameters){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    4178:	cc 24       	eor	r12, r12
    417a:	ca 94       	dec	r12
    417c:	dc 2c       	mov	r13, r12
    417e:	76 01       	movw	r14, r12
    4180:	01 e0       	ldi	r16, 0x01	; 1
    4182:	21 e0       	ldi	r18, 0x01	; 1
    4184:	44 e0       	ldi	r20, 0x04	; 4
    4186:	50 e0       	ldi	r21, 0x00	; 0
    4188:	60 e0       	ldi	r22, 0x00	; 0
    418a:	70 e0       	ldi	r23, 0x00	; 0
    418c:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <measureEventGroup>
    4190:	90 91 1e 1a 	lds	r25, 0x1A1E	; 0x801a1e <measureEventGroup+0x1>
    4194:	0e 94 a9 04 	call	0x952	; 0x952 <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    4198:	62 ff       	sbrs	r22, 2
    419a:	ee cf       	rjmp	.-36     	; 0x4178 <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();			
    419c:	cc df       	rcall	.-104    	; 0x4136 <measure_Temp_Hum>
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    419e:	48 e0       	ldi	r20, 0x08	; 8
    41a0:	50 e0       	ldi	r21, 0x00	; 0
    41a2:	60 e0       	ldi	r22, 0x00	; 0
    41a4:	70 e0       	ldi	r23, 0x00	; 0
    41a6:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <dataReadyEventGroup>
    41aa:	90 91 1c 1a 	lds	r25, 0x1A1C	; 0x801a1c <dataReadyEventGroup+0x1>
    41ae:	0e 94 49 05 	call	0xa92	; 0xa92 <xEventGroupSetBits>
    41b2:	e2 cf       	rjmp	.-60     	; 0x4178 <Temp_Hum_Main_Task>

000041b4 <TempHumSensor_getTemp>:
	printf("RETURNCODE: %s \n", returnCodeString);
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    41b4:	80 91 c3 18 	lds	r24, 0x18C3	; 0x8018c3 <temperature>
    41b8:	90 91 c4 18 	lds	r25, 0x18C4	; 0x8018c4 <temperature+0x1>
    41bc:	08 95       	ret

000041be <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    41be:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <humidity>
    41c2:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <humidity+0x1>
    41c6:	08 95       	ret

000041c8 <initialize_event_groups>:
MessageBufferHandle_t downlinkMessageBufferHandle;
SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    41c8:	0e 94 96 04 	call	0x92c	; 0x92c <xEventGroupCreate>
    41cc:	90 93 1c 1a 	sts	0x1A1C, r25	; 0x801a1c <dataReadyEventGroup+0x1>
    41d0:	80 93 1b 1a 	sts	0x1A1B, r24	; 0x801a1b <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    41d4:	0e 94 96 04 	call	0x92c	; 0x92c <xEventGroupCreate>
    41d8:	90 93 1e 1a 	sts	0x1A1E, r25	; 0x801a1e <measureEventGroup+0x1>
    41dc:	80 93 1d 1a 	sts	0x1A1D, r24	; 0x801a1d <measureEventGroup>
    41e0:	08 95       	ret

000041e2 <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    41e2:	41 e0       	ldi	r20, 0x01	; 1
    41e4:	60 e0       	ldi	r22, 0x00	; 0
    41e6:	70 e0       	ldi	r23, 0x00	; 0
    41e8:	8c e2       	ldi	r24, 0x2C	; 44
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <xStreamBufferGenericCreate>
    41f0:	90 93 20 1a 	sts	0x1A20, r25	; 0x801a20 <uplinkMessageBufferHandle+0x1>
    41f4:	80 93 1f 1a 	sts	0x1A1F, r24	; 0x801a1f <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    41f8:	89 2b       	or	r24, r25
    41fa:	21 f4       	brne	.+8      	; 0x4204 <initialize_message_buffers+0x22>
		printf("Failed to create uplink message buffer.\n");
    41fc:	8b e0       	ldi	r24, 0x0B	; 11
    41fe:	95 e0       	ldi	r25, 0x05	; 5
    4200:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    4204:	41 e0       	ldi	r20, 0x01	; 1
    4206:	60 e0       	ldi	r22, 0x00	; 0
    4208:	70 e0       	ldi	r23, 0x00	; 0
    420a:	8c e2       	ldi	r24, 0x2C	; 44
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <xStreamBufferGenericCreate>
    4212:	90 93 22 1a 	sts	0x1A22, r25	; 0x801a22 <downlinkMessageBufferHandle+0x1>
    4216:	80 93 21 1a 	sts	0x1A21, r24	; 0x801a21 <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    421a:	89 2b       	or	r24, r25
    421c:	21 f4       	brne	.+8      	; 0x4226 <initialize_message_buffers+0x44>
		printf("Failed to create downlink message buffer.\n");
    421e:	83 e3       	ldi	r24, 0x33	; 51
    4220:	95 e0       	ldi	r25, 0x05	; 5
    4222:	0c 94 53 3a 	jmp	0x74a6	; 0x74a6 <puts>
    4226:	08 95       	ret

00004228 <initialize_semaphore>:
	}
}

 void initialize_semaphore(){
    4228:	0f 93       	push	r16
 	configSemaphore = xSemaphoreCreateMutex();
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xQueueCreateMutex>
    4230:	90 93 1a 1a 	sts	0x1A1A, r25	; 0x801a1a <configSemaphore+0x1>
    4234:	80 93 19 1a 	sts	0x1A19, r24	; 0x801a19 <configSemaphore>
	 if(configSemaphore != NULL){
    4238:	00 97       	sbiw	r24, 0x00	; 0
    423a:	49 f0       	breq	.+18     	; 0x424e <initialize_semaphore+0x26>
		 xSemaphoreGive(configSemaphore);
    423c:	00 e0       	ldi	r16, 0x00	; 0
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	a9 01       	movw	r20, r18
    4244:	60 e0       	ldi	r22, 0x00	; 0
    4246:	70 e0       	ldi	r23, 0x00	; 0
    4248:	0e 94 16 0a 	call	0x142c	; 0x142c <xQueueGenericSend>
    424c:	08 c0       	rjmp	.+16     	; 0x425e <initialize_semaphore+0x36>
	 }
	 else{
		 printf("Failed to create config semaphore");
    424e:	8d e5       	ldi	r24, 0x5D	; 93
    4250:	95 e0       	ldi	r25, 0x05	; 5
    4252:	9f 93       	push	r25
    4254:	8f 93       	push	r24
    4256:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
	 }
 }
    425e:	0f 91       	pop	r16
    4260:	08 95       	ret

00004262 <initialise_rc_servo>:
 */ 

#include "servoController.h"

void initialise_rc_servo(){
	rc_servo_initialise();
    4262:	74 c7       	rjmp	.+3816   	; 0x514c <rc_servo_initialise>
    4264:	08 95       	ret

00004266 <servo_set_position>:
}
void servo_set_position(uint8_t servoNo, int8_t percent){
	rc_servo_setPosition(servoNo, percent);
    4266:	5a c7       	rjmp	.+3764   	; 0x511c <rc_servo_setPosition>
    4268:	08 95       	ret

0000426a <_lora_setup>:
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}

static void _lora_setup(void)
{
    426a:	0f 93       	push	r16
    426c:	1f 93       	push	r17
    426e:	cf 93       	push	r28
    4270:	df 93       	push	r29
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
    4276:	64 97       	sbiw	r28, 0x14	; 20
    4278:	0f b6       	in	r0, 0x3f	; 63
    427a:	f8 94       	cli
    427c:	de bf       	out	0x3e, r29	; 62
    427e:	0f be       	out	0x3f, r0	; 63
    4280:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    4288:	86 d3       	rcall	.+1804   	; 0x4996 <lora_driver_rn2483FactoryReset>
    428a:	02 d6       	rcall	.+3076   	; 0x4e90 <lora_driver_mapReturnCodeToText>
    428c:	9f 93       	push	r25
    428e:	8f 93       	push	r24
    4290:	8f e7       	ldi	r24, 0x7F	; 127
    4292:	95 e0       	ldi	r25, 0x05	; 5
    4294:	9f 93       	push	r25
    4296:	8f 93       	push	r24
    4298:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    429c:	fa d4       	rcall	.+2548   	; 0x4c92 <lora_driver_configureToEu868>
    429e:	f8 d5       	rcall	.+3056   	; 0x4e90 <lora_driver_mapReturnCodeToText>
    42a0:	9f 93       	push	r25
    42a2:	8f 93       	push	r24
    42a4:	82 e9       	ldi	r24, 0x92	; 146
    42a6:	95 e0       	ldi	r25, 0x05	; 5
    42a8:	9f 93       	push	r25
    42aa:	8f 93       	push	r24
    42ac:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
    42b0:	8e 01       	movw	r16, r28
    42b2:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    42b4:	1f 4f       	sbci	r17, 0xFF	; 255
    42b6:	c8 01       	movw	r24, r16
    42b8:	80 d3       	rcall	.+1792   	; 0x49ba <lora_driver_getRn2483Hweui>
    42ba:	ea d5       	rcall	.+3028   	; 0x4e90 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    42bc:	1f 93       	push	r17
    42be:	0f 93       	push	r16
    42c0:	9f 93       	push	r25
    42c2:	8f 93       	push	r24
    42c4:	8b ea       	ldi	r24, 0xAB	; 171
    42c6:	95 e0       	ldi	r25, 0x05	; 5
    42c8:	9f 93       	push	r25
    42ca:	8f 93       	push	r24
    42cc:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    42d0:	c8 01       	movw	r24, r16
    42d2:	8f d3       	rcall	.+1822   	; 0x49f2 <lora_driver_setDeviceIdentifier>
    42d4:	dd d5       	rcall	.+3002   	; 0x4e90 <lora_driver_mapReturnCodeToText>
    42d6:	9f 93       	push	r25
    42d8:	8f 93       	push	r24
    42da:	1f 93       	push	r17
    42dc:	0f 93       	push	r16
    42de:	8f eb       	ldi	r24, 0xBF	; 191
    42e0:	95 e0       	ldi	r25, 0x05	; 5
    42e2:	9f 93       	push	r25
    42e4:	8f 93       	push	r24
    42e6:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    42ea:	a8 01       	movw	r20, r16
    42ec:	64 ed       	ldi	r22, 0xD4	; 212
    42ee:	75 e0       	ldi	r23, 0x05	; 5
    42f0:	85 ef       	ldi	r24, 0xF5	; 245
    42f2:	95 e0       	ldi	r25, 0x05	; 5
    42f4:	ac d5       	rcall	.+2904   	; 0x4e4e <lora_driver_setOtaaIdentity>
    42f6:	cc d5       	rcall	.+2968   	; 0x4e90 <lora_driver_mapReturnCodeToText>
    42f8:	9f 93       	push	r25
    42fa:	8f 93       	push	r24
    42fc:	1f 93       	push	r17
    42fe:	0f 93       	push	r16
    4300:	84 ed       	ldi	r24, 0xD4	; 212
    4302:	95 e0       	ldi	r25, 0x05	; 5
    4304:	9f 93       	push	r25
    4306:	8f 93       	push	r24
    4308:	85 ef       	ldi	r24, 0xF5	; 245
    430a:	95 e0       	ldi	r25, 0x05	; 5
    430c:	9f 93       	push	r25
    430e:	8f 93       	push	r24
    4310:	86 e0       	ldi	r24, 0x06	; 6
    4312:	96 e0       	ldi	r25, 0x06	; 6
    4314:	9f 93       	push	r25
    4316:	8f 93       	push	r24
    4318:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    431c:	9d d3       	rcall	.+1850   	; 0x4a58 <lora_driver_saveMac>
    431e:	b8 d5       	rcall	.+2928   	; 0x4e90 <lora_driver_mapReturnCodeToText>
    4320:	9f 93       	push	r25
    4322:	8f 93       	push	r24
    4324:	8c e3       	ldi	r24, 0x3C	; 60
    4326:	96 e0       	ldi	r25, 0x06	; 6
    4328:	9f 93       	push	r25
    432a:	8f 93       	push	r24
    432c:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    4330:	0f b6       	in	r0, 0x3f	; 63
    4332:	f8 94       	cli
    4334:	de bf       	out	0x3e, r29	; 62
    4336:	0f be       	out	0x3f, r0	; 63
    4338:	cd bf       	out	0x3d, r28	; 61
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	87 d4       	rcall	.+2318   	; 0x4c4c <lora_driver_setAdaptiveDataRate>
    433e:	a8 d5       	rcall	.+2896   	; 0x4e90 <lora_driver_mapReturnCodeToText>
    4340:	9f 93       	push	r25
    4342:	8f 93       	push	r24
    4344:	8b e4       	ldi	r24, 0x4B	; 75
    4346:	96 e0       	ldi	r25, 0x06	; 6
    4348:	9f 93       	push	r25
    434a:	8f 93       	push	r24
    434c:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    4350:	84 ef       	ldi	r24, 0xF4	; 244
    4352:	91 e0       	ldi	r25, 0x01	; 1
    4354:	86 d4       	rcall	.+2316   	; 0x4c62 <lora_driver_setReceiveDelay>
    4356:	9c d5       	rcall	.+2872   	; 0x4e90 <lora_driver_mapReturnCodeToText>
    4358:	9f 93       	push	r25
    435a:	8f 93       	push	r24
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	8f 93       	push	r24
    4360:	84 ef       	ldi	r24, 0xF4	; 244
    4362:	8f 93       	push	r24
    4364:	8c e6       	ldi	r24, 0x6C	; 108
    4366:	96 e0       	ldi	r25, 0x06	; 6
    4368:	9f 93       	push	r25
    436a:	8f 93       	push	r24
    436c:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
    4370:	0f b6       	in	r0, 0x3f	; 63
    4372:	f8 94       	cli
    4374:	de bf       	out	0x3e, r29	; 62
    4376:	0f be       	out	0x3f, r0	; 63
    4378:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    437a:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	72 d3       	rcall	.+1764   	; 0x4a64 <lora_driver_join>
    4380:	08 2f       	mov	r16, r24
    4382:	86 d5       	rcall	.+2828   	; 0x4e90 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    4384:	9f 93       	push	r25
    4386:	8f 93       	push	r24
    4388:	1f 92       	push	r1
    438a:	1f 93       	push	r17
    438c:	8c e8       	ldi	r24, 0x8C	; 140
    438e:	96 e0       	ldi	r25, 0x06	; 6
    4390:	9f 93       	push	r25
    4392:	8f 93       	push	r24
    4394:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
    4398:	0f 90       	pop	r0
    439a:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	08 30       	cpi	r16, 0x08	; 8
    43a6:	59 f0       	breq	.+22     	; 0x43be <_lora_setup+0x154>
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	0e 94 39 2e 	call	0x5c72	; 0x5c72 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    43ae:	66 e3       	ldi	r22, 0x36	; 54
    43b0:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    43b2:	80 e0       	ldi	r24, 0x00	; 0
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskDelay>
    43ba:	11 50       	subi	r17, 0x01	; 1
    43bc:	f9 f6       	brne	.-66     	; 0x437c <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    43be:	08 30       	cpi	r16, 0x08	; 8
    43c0:	21 f4       	brne	.+8      	; 0x43ca <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    43c8:	09 c0       	rjmp	.+18     	; 0x43dc <_lora_setup+0x172>
    43ca:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    43cc:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    43d6:	0e 94 fe 07 	call	0xffc	; 0xffc <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    43da:	fd cf       	rjmp	.-6      	; 0x43d6 <_lora_setup+0x16c>
    43dc:	64 96       	adiw	r28, 0x14	; 20
    43de:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    43e0:	f8 94       	cli
    43e2:	de bf       	out	0x3e, r29	; 62
    43e4:	0f be       	out	0x3f, r0	; 63
    43e6:	cd bf       	out	0x3d, r28	; 61
    43e8:	df 91       	pop	r29
    43ea:	cf 91       	pop	r28
    43ec:	1f 91       	pop	r17
    43ee:	0f 91       	pop	r16
    43f0:	08 95       	ret

000043f2 <lora_uplink_handler_task>:
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	c2 d2       	rcall	.+1412   	; 0x497a <lora_driver_resetRn2483>

void lora_uplink_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    43f6:	62 e0       	ldi	r22, 0x02	; 2
    43f8:	70 e0       	ldi	r23, 0x00	; 0
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskDelay>
	lora_driver_resetRn2483(0);
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	ba d2       	rcall	.+1396   	; 0x497a <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    4406:	66 e9       	ldi	r22, 0x96	; 150
    4408:	70 e0       	ldi	r23, 0x00	; 0
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    4412:	6c d2       	rcall	.+1240   	; 0x48ec <lora_driver_flushBuffers>

	_lora_setup();
    4414:	2a df       	rcall	.-428    	; 0x426a <_lora_setup>
    4416:	0f ef       	ldi	r16, 0xFF	; 255
			float temp;
			uint8_t bytes[sizeof(float)];
		} holder;
		
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    4418:	1f ef       	ldi	r17, 0xFF	; 255
    441a:	98 01       	movw	r18, r16
    441c:	46 e1       	ldi	r20, 0x16	; 22
    441e:	50 e0       	ldi	r21, 0x00	; 0
    4420:	67 ec       	ldi	r22, 0xC7	; 199
    4422:	78 e1       	ldi	r23, 0x18	; 24
    4424:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <uplinkMessageBufferHandle>
    4428:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <uplinkMessageBufferHandle+0x1>
    442c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <xStreamBufferReceive>
    4430:	88 23       	and	r24, r24
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    4432:	89 f3       	breq	.-30     	; 0x4416 <lora_uplink_handler_task+0x24>
    4434:	e7 ec       	ldi	r30, 0xC7	; 199
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    4436:	f8 e1       	ldi	r31, 0x18	; 24
    4438:	42 81       	ldd	r20, Z+2	; 0x02
    443a:	50 e0       	ldi	r21, 0x00	; 0
    443c:	54 2f       	mov	r21, r20
    443e:	44 27       	eor	r20, r20
    4440:	83 81       	ldd	r24, Z+3	; 0x03
    4442:	48 2b       	or	r20, r24
    4444:	24 81       	ldd	r18, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	32 2f       	mov	r19, r18
    444a:	22 27       	eor	r18, r18
    444c:	85 81       	ldd	r24, Z+5	; 0x05
    444e:	28 2b       	or	r18, r24
    4450:	86 81       	ldd	r24, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	98 2f       	mov	r25, r24
    4456:	88 27       	eor	r24, r24
    4458:	67 81       	ldd	r22, Z+7	; 0x07
    445a:	86 2b       	or	r24, r22
    445c:	60 85       	ldd	r22, Z+8	; 0x08
			holder.bytes[0] = _uplink_payload.bytes[6];
    445e:	71 85       	ldd	r23, Z+9	; 0x09
			holder.bytes[1] = _uplink_payload.bytes[7];
    4460:	a2 85       	ldd	r26, Z+10	; 0x0a
			holder.bytes[2] = _uplink_payload.bytes[8];
    4462:	b3 85       	ldd	r27, Z+11	; 0x0b
			holder.bytes[3] = _uplink_payload.bytes[9];
    4464:	e4 85       	ldd	r30, Z+12	; 0x0c
			status = _uplink_payload.bytes[10];
    4466:	1f 92       	push	r1
// 			printf("Temperature sent: %d\n", tem);
// 			printf("Humidity sent: %d\n", hum);
// 			printf("CO2 sent: %d\n", co2);
// 			printf("Light sent: %f\n", holder.temp);
// 			printf("Status sent: %d\n", status);
			printf("UPLINK SENT: temp %dC, hum %d%%, CO2 %dppm, light %5.2flux, status %d\n", tem/10, hum/10, co2, holder.temp, status);
    4468:	ef 93       	push	r30
    446a:	bf 93       	push	r27
    446c:	af 93       	push	r26
    446e:	7f 93       	push	r23
    4470:	6f 93       	push	r22
    4472:	9f 93       	push	r25
    4474:	8f 93       	push	r24
    4476:	ad ec       	ldi	r26, 0xCD	; 205
    4478:	bc ec       	ldi	r27, 0xCC	; 204
    447a:	0e 94 6e 37 	call	0x6edc	; 0x6edc <__umulhisi3>
    447e:	96 95       	lsr	r25
    4480:	87 95       	ror	r24
    4482:	96 95       	lsr	r25
    4484:	87 95       	ror	r24
    4486:	96 95       	lsr	r25
    4488:	87 95       	ror	r24
    448a:	9f 93       	push	r25
    448c:	8f 93       	push	r24
    448e:	ca 01       	movw	r24, r20
    4490:	6a e0       	ldi	r22, 0x0A	; 10
    4492:	70 e0       	ldi	r23, 0x00	; 0
    4494:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__divmodhi4>
    4498:	7f 93       	push	r23
    449a:	6f 93       	push	r22
    449c:	8c ea       	ldi	r24, 0xAC	; 172
    449e:	96 e0       	ldi	r25, 0x06	; 6
    44a0:	9f 93       	push	r25
    44a2:	8f 93       	push	r24
    44a4:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
    44a8:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    44aa:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <status_leds_shortPuls>
// 			sizeof(fakePayload),
// 			portMAX_DELAY);
			//---------------------------------------------
			
			
 			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    44ae:	67 ec       	ldi	r22, 0xC7	; 199
    44b0:	78 e1       	ldi	r23, 0x18	; 24
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	00 d3       	rcall	.+1536   	; 0x4ab6 <lora_driver_sendUploadMessage>
    44b6:	ec d4       	rcall	.+2520   	; 0x4e90 <lora_driver_mapReturnCodeToText>
    44b8:	9f 93       	push	r25
    44ba:	8f 93       	push	r24
    44bc:	83 ef       	ldi	r24, 0xF3	; 243
    44be:	96 e0       	ldi	r25, 0x06	; 6
    44c0:	9f 93       	push	r25
    44c2:	8f 93       	push	r24
    44c4:	0e 94 3f 3a 	call	0x747e	; 0x747e <printf>
    44c8:	8d b7       	in	r24, 0x3d	; 61
    44ca:	9e b7       	in	r25, 0x3e	; 62
    44cc:	42 96       	adiw	r24, 0x12	; 18
    44ce:	0f b6       	in	r0, 0x3f	; 63
    44d0:	f8 94       	cli
    44d2:	9e bf       	out	0x3e, r25	; 62
    44d4:	0f be       	out	0x3f, r0	; 63
    44d6:	8d bf       	out	0x3d, r24	; 61
    44d8:	9e cf       	rjmp	.-196    	; 0x4416 <lora_uplink_handler_task+0x24>

000044da <create_lora_uplink_handler_task>:
			
		}
	}
    44da:	ef 92       	push	r14

void lora_uplink_handler_task(void *pvParameters);

static lora_driver_payload_t _uplink_payload;

void create_lora_uplink_handler_task(UBaseType_t priority){
    44dc:	ff 92       	push	r15
    44de:	0f 93       	push	r16
	xTaskCreate(
    44e0:	e1 2c       	mov	r14, r1
    44e2:	f1 2c       	mov	r15, r1
    44e4:	08 2f       	mov	r16, r24
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	48 e8       	ldi	r20, 0x88	; 136
    44ec:	51 e0       	ldi	r21, 0x01	; 1
    44ee:	68 e0       	ldi	r22, 0x08	; 8
    44f0:	77 e0       	ldi	r23, 0x07	; 7
    44f2:	89 ef       	ldi	r24, 0xF9	; 249
    44f4:	91 e2       	ldi	r25, 0x21	; 33
    44f6:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskCreate>
	,  "LRHandUplink"  
	,  configMINIMAL_STACK_SIZE+200  
	,  NULL
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}
    44fa:	0f 91       	pop	r16
    44fc:	ff 90       	pop	r15
    44fe:	ef 90       	pop	r14
    4500:	08 95       	ret

00004502 <create_all_tasks>:
#include "downlinkHandler.h"
#include "servoController.h"


void create_all_tasks(){
	create_lora_uplink_handler_task(4);
    4502:	84 e0       	ldi	r24, 0x04	; 4
    4504:	ea df       	rcall	.-44     	; 0x44da <create_lora_uplink_handler_task>
	create_lora_downlink_handler_task(4);
    4506:	84 e0       	ldi	r24, 0x04	; 4
    4508:	0e 94 37 03 	call	0x66e	; 0x66e <create_lora_downlink_handler_task>
	create_main_application_task(3);
    450c:	83 e0       	ldi	r24, 0x03	; 3
    450e:	0e 94 09 02 	call	0x412	; 0x412 <create_main_application_task>
	create_CO2_sensor_task(1);
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	44 dd       	rcall	.-1400   	; 0x3f9e <create_CO2_sensor_task>
	create_TempHum_sensor_task(1);
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	ea dd       	rcall	.-1068   	; 0x40ee <create_TempHum_sensor_task>
 	create_light_sensor_task(2);
    451a:	82 e0       	ldi	r24, 0x02	; 2
    451c:	c7 dd       	rcall	.-1138   	; 0x40ac <create_light_sensor_task>
    451e:	82 e0       	ldi	r24, 0x02	; 2
	create_actions_controller_task(2);
    4520:	0c 94 4b 03 	jmp	0x696	; 0x696 <create_actions_controller_task>
    4524:	08 95       	ret

00004526 <initializeSystem>:
    4526:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4528:	0e 94 80 2c 	call	0x5900	; 0x5900 <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    452c:	85 e0       	ldi	r24, 0x05	; 5
    452e:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <status_leds_initialise>

	initialize_event_groups();
    4532:	4a de       	rcall	.-876    	; 0x41c8 <initialize_event_groups>
	initialize_message_buffers();
    4534:	56 de       	rcall	.-852    	; 0x41e2 <initialize_message_buffers>
	initialize_semaphore();
    4536:	78 de       	rcall	.-784    	; 0x4228 <initialize_semaphore>
    4538:	94 de       	rcall	.-728    	; 0x4262 <initialise_rc_servo>
	initialise_rc_servo();
    453a:	60 91 21 1a 	lds	r22, 0x1A21	; 0x801a21 <downlinkMessageBufferHandle>
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    453e:	70 91 22 1a 	lds	r23, 0x1A22	; 0x801a22 <downlinkMessageBufferHandle+0x1>
    4542:	81 e0       	ldi	r24, 0x01	; 1
    4544:	da d1       	rcall	.+948    	; 0x48fa <lora_driver_initialise>
    4546:	dd cf       	rjmp	.-70     	; 0x4502 <create_all_tasks>
	create_all_tasks();
    4548:	08 95       	ret

0000454a <main>:
    454a:	ed df       	rcall	.-38     	; 0x4526 <initializeSystem>
    454c:	85 e1       	ldi	r24, 0x15	; 21

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    454e:	97 e0       	ldi	r25, 0x07	; 7
    4550:	0e 94 53 3a 	call	0x74a6	; 0x74a6 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    4554:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <vTaskStartScheduler>
    4558:	ff cf       	rjmp	.-2      	; 0x4558 <main+0xe>

0000455a <_hihTwiCallback>:
    455a:	65 30       	cpi	r22, 0x05	; 5
    455c:	f1 f4       	brne	.+60     	; 0x459a <_hihTwiCallback+0x40>
    455e:	fa 01       	movw	r30, r20
    4560:	80 81       	ld	r24, Z
    4562:	8f 73       	andi	r24, 0x3F	; 63
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	98 2f       	mov	r25, r24
    4568:	88 27       	eor	r24, r24
    456a:	21 81       	ldd	r18, Z+1	; 0x01
    456c:	82 2b       	or	r24, r18
    456e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4572:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4576:	82 81       	ldd	r24, Z+2	; 0x02
    4578:	f0 e4       	ldi	r31, 0x40	; 64
    457a:	8f 9f       	mul	r24, r31
    457c:	c0 01       	movw	r24, r0
    457e:	11 24       	eor	r1, r1
    4580:	fa 01       	movw	r30, r20
    4582:	23 81       	ldd	r18, Z+3	; 0x03
    4584:	26 95       	lsr	r18
    4586:	26 95       	lsr	r18
    4588:	82 2b       	or	r24, r18
    458a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    458e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <_measuringIsReady>
    4598:	08 95       	ret
    459a:	64 30       	cpi	r22, 0x04	; 4
    459c:	51 f0       	breq	.+20     	; 0x45b2 <_hihTwiCallback+0x58>
    459e:	80 e0       	ldi	r24, 0x00	; 0
    45a0:	90 e4       	ldi	r25, 0x40	; 64
    45a2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    45a6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    45aa:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    45ae:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    45b2:	08 95       	ret

000045b4 <hih8120_initialise>:
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	0d ea       	ldi	r16, 0xAD	; 173
    45ba:	12 e2       	ldi	r17, 0x22	; 34
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	34 e2       	ldi	r19, 0x24	; 36
    45c0:	44 ef       	ldi	r20, 0xF4	; 244
    45c2:	50 e0       	ldi	r21, 0x00	; 0
    45c4:	60 e0       	ldi	r22, 0x00	; 0
    45c6:	87 e2       	ldi	r24, 0x27	; 39
    45c8:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <twiCreate>
    45cc:	90 93 df 18 	sts	0x18DF, r25	; 0x8018df <_hih8120Handler+0x1>
    45d0:	80 93 de 18 	sts	0x18DE, r24	; 0x8018de <_hih8120Handler>
    45d4:	21 e0       	ldi	r18, 0x01	; 1
    45d6:	89 2b       	or	r24, r25
    45d8:	09 f0       	breq	.+2      	; 0x45dc <hih8120_initialise+0x28>
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	82 2f       	mov	r24, r18
    45de:	1f 91       	pop	r17
    45e0:	0f 91       	pop	r16
    45e2:	08 95       	ret

000045e4 <hih8120_wakeup>:
    45e4:	80 91 de 18 	lds	r24, 0x18DE	; 0x8018de <_hih8120Handler>
    45e8:	90 91 df 18 	lds	r25, 0x18DF	; 0x8018df <_hih8120Handler+0x1>
    45ec:	00 97       	sbiw	r24, 0x00	; 0
    45ee:	59 f0       	breq	.+22     	; 0x4606 <hih8120_wakeup+0x22>
    45f0:	40 e0       	ldi	r20, 0x00	; 0
    45f2:	60 e0       	ldi	r22, 0x00	; 0
    45f4:	70 e0       	ldi	r23, 0x00	; 0
    45f6:	0e 94 38 30 	call	0x6070	; 0x6070 <twiTransmit>
    45fa:	84 30       	cpi	r24, 0x04	; 4
    45fc:	31 f4       	brne	.+12     	; 0x460a <hih8120_wakeup+0x26>
    45fe:	10 92 dd 18 	sts	0x18DD, r1	; 0x8018dd <_measuringIsReady>
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	08 95       	ret
    4606:	82 e0       	ldi	r24, 0x02	; 2
    4608:	08 95       	ret
    460a:	83 e0       	ldi	r24, 0x03	; 3
    460c:	08 95       	ret

0000460e <hih8120_measure>:
    460e:	80 91 de 18 	lds	r24, 0x18DE	; 0x8018de <_hih8120Handler>
    4612:	90 91 df 18 	lds	r25, 0x18DF	; 0x8018df <_hih8120Handler+0x1>
    4616:	00 97       	sbiw	r24, 0x00	; 0
    4618:	39 f0       	breq	.+14     	; 0x4628 <hih8120_measure+0x1a>
    461a:	64 e0       	ldi	r22, 0x04	; 4
    461c:	0e 94 84 30 	call	0x6108	; 0x6108 <twiReceive>
    4620:	85 30       	cpi	r24, 0x05	; 5
    4622:	21 f0       	breq	.+8      	; 0x462c <hih8120_measure+0x1e>
    4624:	83 e0       	ldi	r24, 0x03	; 3
    4626:	08 95       	ret
    4628:	82 e0       	ldi	r24, 0x02	; 2
    462a:	08 95       	ret
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	08 95       	ret

00004630 <hih8120_getHumidity>:
    4630:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4634:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__floatunsisf>
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	48 ec       	ldi	r20, 0xC8	; 200
    4646:	52 e4       	ldi	r21, 0x42	; 66
    4648:	0e 94 aa 36 	call	0x6d54	; 0x6d54 <__mulsf3>
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	38 ef       	ldi	r19, 0xF8	; 248
    4650:	4f e7       	ldi	r20, 0x7F	; 127
    4652:	56 e4       	ldi	r21, 0x46	; 70
    4654:	0c 94 7f 35 	jmp	0x6afe	; 0x6afe <__divsf3>
    4658:	08 95       	ret

0000465a <hih8120_getHumidityPercent_x10>:
    465a:	ea df       	rcall	.-44     	; 0x4630 <hih8120_getHumidity>
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e2       	ldi	r20, 0x20	; 32
    4662:	51 e4       	ldi	r21, 0x41	; 65
    4664:	0e 94 aa 36 	call	0x6d54	; 0x6d54 <__mulsf3>
    4668:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <__fixunssfsi>
    466c:	cb 01       	movw	r24, r22
    466e:	08 95       	ret

00004670 <hih8120_getTemperature>:
    4670:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4674:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4678:	80 e0       	ldi	r24, 0x00	; 0
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__floatunsisf>
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	45 e2       	ldi	r20, 0x25	; 37
    4686:	53 e4       	ldi	r21, 0x43	; 67
    4688:	0e 94 aa 36 	call	0x6d54	; 0x6d54 <__mulsf3>
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	38 ef       	ldi	r19, 0xF8	; 248
    4690:	4f e7       	ldi	r20, 0x7F	; 127
    4692:	56 e4       	ldi	r21, 0x46	; 70
    4694:	0e 94 7f 35 	call	0x6afe	; 0x6afe <__divsf3>
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	40 e2       	ldi	r20, 0x20	; 32
    469e:	52 e4       	ldi	r21, 0x42	; 66
    46a0:	0c 94 1a 35 	jmp	0x6a34	; 0x6a34 <__subsf3>
    46a4:	08 95       	ret

000046a6 <hih8120_getTemperature_x10>:
    46a6:	e4 df       	rcall	.-56     	; 0x4670 <hih8120_getTemperature>
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	40 e2       	ldi	r20, 0x20	; 32
    46ae:	51 e4       	ldi	r21, 0x41	; 65
    46b0:	0e 94 aa 36 	call	0x6d54	; 0x6d54 <__mulsf3>
    46b4:	0e 94 e7 35 	call	0x6bce	; 0x6bce <__fixsfsi>
    46b8:	cb 01       	movw	r24, r22
    46ba:	08 95       	ret

000046bc <_serialCallBack>:
    46bc:	0f 93       	push	r16
    46be:	1f 93       	push	r17
    46c0:	cf 93       	push	r28
    46c2:	df 93       	push	r29
    46c4:	1f 92       	push	r1
    46c6:	1f 92       	push	r1
    46c8:	cd b7       	in	r28, 0x3d	; 61
    46ca:	de b7       	in	r29, 0x3e	; 62
    46cc:	8c 01       	movw	r16, r24
    46ce:	19 82       	std	Y+1, r1	; 0x01
    46d0:	2d c0       	rjmp	.+90     	; 0x472c <_serialCallBack+0x70>
    46d2:	e0 91 17 19 	lds	r30, 0x1917	; 0x801917 <rec_buf_inp.2878>
    46d6:	ec 32       	cpi	r30, 0x2C	; 44
    46d8:	50 f4       	brcc	.+20     	; 0x46ee <_serialCallBack+0x32>
    46da:	81 e0       	ldi	r24, 0x01	; 1
    46dc:	8e 0f       	add	r24, r30
    46de:	80 93 17 19 	sts	0x1917, r24	; 0x801917 <rec_buf_inp.2878>
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	e7 5b       	subi	r30, 0xB7	; 183
    46e6:	f6 4e       	sbci	r31, 0xE6	; 230
    46e8:	8a 81       	ldd	r24, Y+2	; 0x02
    46ea:	80 83       	st	Z, r24
    46ec:	02 c0       	rjmp	.+4      	; 0x46f2 <_serialCallBack+0x36>
    46ee:	10 92 17 19 	sts	0x1917, r1	; 0x801917 <rec_buf_inp.2878>
    46f2:	8a 81       	ldd	r24, Y+2	; 0x02
    46f4:	8a 30       	cpi	r24, 0x0A	; 10
    46f6:	d1 f4       	brne	.+52     	; 0x472c <_serialCallBack+0x70>
    46f8:	40 91 17 19 	lds	r20, 0x1917	; 0x801917 <rec_buf_inp.2878>
    46fc:	50 e0       	ldi	r21, 0x00	; 0
    46fe:	fa 01       	movw	r30, r20
    4700:	e9 5b       	subi	r30, 0xB9	; 185
    4702:	f6 4e       	sbci	r31, 0xE6	; 230
    4704:	10 82       	st	Z, r1
    4706:	41 50       	subi	r20, 0x01	; 1
    4708:	51 09       	sbc	r21, r1
    470a:	9e 01       	movw	r18, r28
    470c:	2f 5f       	subi	r18, 0xFF	; 255
    470e:	3f 4f       	sbci	r19, 0xFF	; 255
    4710:	69 e4       	ldi	r22, 0x49	; 73
    4712:	79 e1       	ldi	r23, 0x19	; 25
    4714:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_serialReplyBufferHandle>
    4718:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_serialReplyBufferHandle+0x1>
    471c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <xStreamBufferSendFromISR>
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	81 11       	cpse	r24, r1
    4724:	0e 94 fe 07 	call	0xffc	; 0xffc <vPortYield>
    4728:	10 92 17 19 	sts	0x1917, r1	; 0x801917 <rec_buf_inp.2878>
    472c:	be 01       	movw	r22, r28
    472e:	6e 5f       	subi	r22, 0xFE	; 254
    4730:	7f 4f       	sbci	r23, 0xFF	; 255
    4732:	c8 01       	movw	r24, r16
    4734:	4f d6       	rcall	.+3230   	; 0x53d4 <serial_getByte>
    4736:	88 23       	and	r24, r24
    4738:	61 f2       	breq	.-104    	; 0x46d2 <_serialCallBack+0x16>
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	df 91       	pop	r29
    4740:	cf 91       	pop	r28
    4742:	1f 91       	pop	r17
    4744:	0f 91       	pop	r16
    4746:	08 95       	ret

00004748 <_uploadMessage>:
    4748:	0f 93       	push	r16
    474a:	1f 93       	push	r17
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
    4750:	8c 01       	movw	r16, r24
    4752:	eb 01       	movw	r28, r22
    4754:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_serialReplyBufferHandle>
    4758:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_serialReplyBufferHandle+0x1>
    475c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <xStreamBufferReset>
    4760:	b8 01       	movw	r22, r16
    4762:	80 ee       	ldi	r24, 0xE0	; 224
    4764:	98 e1       	ldi	r25, 0x18	; 24
    4766:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <strcpy>
    476a:	20 97       	sbiw	r28, 0x00	; 0
    476c:	79 f0       	breq	.+30     	; 0x478c <_uploadMessage+0x44>
    476e:	e0 ee       	ldi	r30, 0xE0	; 224
    4770:	f8 e1       	ldi	r31, 0x18	; 24
    4772:	01 90       	ld	r0, Z+
    4774:	00 20       	and	r0, r0
    4776:	e9 f7       	brne	.-6      	; 0x4772 <_uploadMessage+0x2a>
    4778:	31 97       	sbiw	r30, 0x01	; 1
    477a:	80 e2       	ldi	r24, 0x20	; 32
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	80 83       	st	Z, r24
    4782:	be 01       	movw	r22, r28
    4784:	80 ee       	ldi	r24, 0xE0	; 224
    4786:	98 e1       	ldi	r25, 0x18	; 24
    4788:	0e 94 ce 39 	call	0x739c	; 0x739c <strcat>
    478c:	e0 ee       	ldi	r30, 0xE0	; 224
    478e:	f8 e1       	ldi	r31, 0x18	; 24
    4790:	df 01       	movw	r26, r30
    4792:	0d 90       	ld	r0, X+
    4794:	00 20       	and	r0, r0
    4796:	e9 f7       	brne	.-6      	; 0x4792 <_uploadMessage+0x4a>
    4798:	11 97       	sbiw	r26, 0x01	; 1
    479a:	8d e0       	ldi	r24, 0x0D	; 13
    479c:	9a e0       	ldi	r25, 0x0A	; 10
    479e:	11 96       	adiw	r26, 0x01	; 1
    47a0:	9c 93       	st	X, r25
    47a2:	8e 93       	st	-X, r24
    47a4:	12 96       	adiw	r26, 0x02	; 2
    47a6:	1c 92       	st	X, r1
    47a8:	01 90       	ld	r0, Z+
    47aa:	00 20       	and	r0, r0
    47ac:	e9 f7       	brne	.-6      	; 0x47a8 <_uploadMessage+0x60>
    47ae:	31 97       	sbiw	r30, 0x01	; 1
    47b0:	e0 5e       	subi	r30, 0xE0	; 224
    47b2:	f8 41       	sbci	r31, 0x18	; 24
    47b4:	ae 2f       	mov	r26, r30
    47b6:	80 ee       	ldi	r24, 0xE0	; 224
    47b8:	98 e1       	ldi	r25, 0x18	; 24
    47ba:	ac 01       	movw	r20, r24
    47bc:	6a 2f       	mov	r22, r26
    47be:	80 91 1c 19 	lds	r24, 0x191C	; 0x80191c <_rn2483_serial>
    47c2:	90 91 1d 19 	lds	r25, 0x191D	; 0x80191d <_rn2483_serial+0x1>
    47c6:	b1 d5       	rcall	.+2914   	; 0x532a <serial_sendBytes>
    47c8:	81 11       	cpse	r24, r1
    47ca:	11 c0       	rjmp	.+34     	; 0x47ee <_uploadMessage+0xa6>
    47cc:	08 e2       	ldi	r16, 0x28	; 40
    47ce:	15 e0       	ldi	r17, 0x05	; 5
    47d0:	20 e0       	ldi	r18, 0x00	; 0
    47d2:	30 e0       	ldi	r19, 0x00	; 0
    47d4:	4d e2       	ldi	r20, 0x2D	; 45
    47d6:	50 e0       	ldi	r21, 0x00	; 0
    47d8:	63 ea       	ldi	r22, 0xA3	; 163
    47da:	79 e1       	ldi	r23, 0x19	; 25
    47dc:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_serialReplyBufferHandle>
    47e0:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_serialReplyBufferHandle+0x1>
    47e4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <xStreamBufferReceive>
    47e8:	83 ea       	ldi	r24, 0xA3	; 163
    47ea:	99 e1       	ldi	r25, 0x19	; 25
    47ec:	02 c0       	rjmp	.+4      	; 0x47f2 <_uploadMessage+0xaa>
    47ee:	80 e0       	ldi	r24, 0x00	; 0
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	df 91       	pop	r29
    47f4:	cf 91       	pop	r28
    47f6:	1f 91       	pop	r17
    47f8:	0f 91       	pop	r16
    47fa:	08 95       	ret

000047fc <_reply2ReturnCode>:
    47fc:	2f 92       	push	r2
    47fe:	3f 92       	push	r3
    4800:	4f 92       	push	r4
    4802:	5f 92       	push	r5
    4804:	6f 92       	push	r6
    4806:	7f 92       	push	r7
    4808:	8f 92       	push	r8
    480a:	9f 92       	push	r9
    480c:	af 92       	push	r10
    480e:	bf 92       	push	r11
    4810:	cf 92       	push	r12
    4812:	df 92       	push	r13
    4814:	ef 92       	push	r14
    4816:	ff 92       	push	r15
    4818:	0f 93       	push	r16
    481a:	1f 93       	push	r17
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	5c 01       	movw	r10, r24
    4822:	fc 01       	movw	r30, r24
    4824:	01 90       	ld	r0, Z+
    4826:	00 20       	and	r0, r0
    4828:	e9 f7       	brne	.-6      	; 0x4824 <_reply2ReturnCode+0x28>
    482a:	31 97       	sbiw	r30, 0x01	; 1
    482c:	6f 01       	movw	r12, r30
    482e:	c8 1a       	sub	r12, r24
    4830:	d9 0a       	sbc	r13, r25
    4832:	5c 2c       	mov	r5, r12
    4834:	0f 2e       	mov	r0, r31
    4836:	fb eb       	ldi	r31, 0xBB	; 187
    4838:	8f 2e       	mov	r8, r31
    483a:	f9 e0       	ldi	r31, 0x09	; 9
    483c:	9f 2e       	mov	r9, r31
    483e:	f0 2d       	mov	r31, r0
    4840:	e1 2c       	mov	r14, r1
    4842:	f1 2c       	mov	r15, r1
    4844:	4c 2c       	mov	r4, r12
    4846:	37 01       	movw	r6, r14
    4848:	f4 01       	movw	r30, r8
    484a:	01 81       	ldd	r16, Z+1	; 0x01
    484c:	12 81       	ldd	r17, Z+2	; 0x02
    484e:	e8 01       	movw	r28, r16
    4850:	09 90       	ld	r0, Y+
    4852:	00 20       	and	r0, r0
    4854:	e9 f7       	brne	.-6      	; 0x4850 <_reply2ReturnCode+0x54>
    4856:	21 97       	sbiw	r28, 0x01	; 1
    4858:	c0 1b       	sub	r28, r16
    485a:	d1 0b       	sbc	r29, r17
    485c:	3c 2e       	mov	r3, r28
    485e:	f9 e0       	ldi	r31, 0x09	; 9
    4860:	cf 16       	cp	r12, r31
    4862:	d1 04       	cpc	r13, r1
    4864:	58 f0       	brcs	.+22     	; 0x487c <_reply2ReturnCode+0x80>
    4866:	f4 01       	movw	r30, r8
    4868:	20 80       	ld	r2, Z
    486a:	fe e0       	ldi	r31, 0x0E	; 14
    486c:	2f 12       	cpse	r2, r31
    486e:	06 c0       	rjmp	.+12     	; 0x487c <_reply2ReturnCode+0x80>
    4870:	b8 01       	movw	r22, r16
    4872:	c5 01       	movw	r24, r10
    4874:	0e 94 a9 39 	call	0x7352	; 0x7352 <strcasestr>
    4878:	89 2b       	or	r24, r25
    487a:	09 f5       	brne	.+66     	; 0x48be <_reply2ReturnCode+0xc2>
    487c:	44 2d       	mov	r20, r4
    487e:	35 14       	cp	r3, r5
    4880:	08 f4       	brcc	.+2      	; 0x4884 <_reply2ReturnCode+0x88>
    4882:	4c 2f       	mov	r20, r28
    4884:	50 e0       	ldi	r21, 0x00	; 0
    4886:	b8 01       	movw	r22, r16
    4888:	c5 01       	movw	r24, r10
    488a:	0e 94 e0 39 	call	0x73c0	; 0x73c0 <strncasecmp>
    488e:	89 2b       	or	r24, r25
    4890:	49 f4       	brne	.+18     	; 0x48a4 <_reply2ReturnCode+0xa8>
    4892:	f3 01       	movw	r30, r6
    4894:	ee 0f       	add	r30, r30
    4896:	ff 1f       	adc	r31, r31
    4898:	e6 0d       	add	r30, r6
    489a:	f7 1d       	adc	r31, r7
    489c:	e5 54       	subi	r30, 0x45	; 69
    489e:	f6 4f       	sbci	r31, 0xF6	; 246
    48a0:	20 80       	ld	r2, Z
    48a2:	0d c0       	rjmp	.+26     	; 0x48be <_reply2ReturnCode+0xc2>
    48a4:	8f ef       	ldi	r24, 0xFF	; 255
    48a6:	e8 1a       	sub	r14, r24
    48a8:	f8 0a       	sbc	r15, r24
    48aa:	e3 e0       	ldi	r30, 0x03	; 3
    48ac:	8e 0e       	add	r8, r30
    48ae:	91 1c       	adc	r9, r1
    48b0:	f1 e1       	ldi	r31, 0x11	; 17
    48b2:	ef 16       	cp	r14, r31
    48b4:	f1 04       	cpc	r15, r1
    48b6:	39 f6       	brne	.-114    	; 0x4846 <_reply2ReturnCode+0x4a>
    48b8:	68 94       	set
    48ba:	22 24       	eor	r2, r2
    48bc:	24 f8       	bld	r2, 4
    48be:	82 2d       	mov	r24, r2
    48c0:	df 91       	pop	r29
    48c2:	cf 91       	pop	r28
    48c4:	1f 91       	pop	r17
    48c6:	0f 91       	pop	r16
    48c8:	ff 90       	pop	r15
    48ca:	ef 90       	pop	r14
    48cc:	df 90       	pop	r13
    48ce:	cf 90       	pop	r12
    48d0:	bf 90       	pop	r11
    48d2:	af 90       	pop	r10
    48d4:	9f 90       	pop	r9
    48d6:	8f 90       	pop	r8
    48d8:	7f 90       	pop	r7
    48da:	6f 90       	pop	r6
    48dc:	5f 90       	pop	r5
    48de:	4f 90       	pop	r4
    48e0:	3f 90       	pop	r3
    48e2:	2f 90       	pop	r2
    48e4:	08 95       	ret

000048e6 <_uploadMessageRc>:
    48e6:	30 df       	rcall	.-416    	; 0x4748 <_uploadMessage>
    48e8:	89 cf       	rjmp	.-238    	; 0x47fc <_reply2ReturnCode>
    48ea:	08 95       	ret

000048ec <lora_driver_flushBuffers>:
    48ec:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_serialReplyBufferHandle>
    48f0:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_serialReplyBufferHandle+0x1>
    48f4:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <xStreamBufferReset>
    48f8:	08 95       	ret

000048fa <lora_driver_initialise>:
    48fa:	8f 92       	push	r8
    48fc:	9f 92       	push	r9
    48fe:	af 92       	push	r10
    4900:	cf 92       	push	r12
    4902:	ef 92       	push	r14
    4904:	0f 93       	push	r16
    4906:	1f 93       	push	r17
    4908:	cf 93       	push	r28
    490a:	c8 2f       	mov	r28, r24
    490c:	8b 01       	movw	r16, r22
    490e:	41 e0       	ldi	r20, 0x01	; 1
    4910:	60 e0       	ldi	r22, 0x00	; 0
    4912:	70 e0       	ldi	r23, 0x00	; 0
    4914:	88 ec       	ldi	r24, 0xC8	; 200
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <xStreamBufferGenericCreate>
    491c:	90 93 1b 19 	sts	0x191B, r25	; 0x80191b <_serialReplyBufferHandle+0x1>
    4920:	80 93 1a 19 	sts	0x191A, r24	; 0x80191a <_serialReplyBufferHandle>
    4924:	10 93 19 19 	sts	0x1919, r17	; 0x801919 <_downlinkMessageBuffer+0x1>
    4928:	00 93 18 19 	sts	0x1918, r16	; 0x801918 <_downlinkMessageBuffer>
    492c:	0f 2e       	mov	r0, r31
    492e:	fe e5       	ldi	r31, 0x5E	; 94
    4930:	8f 2e       	mov	r8, r31
    4932:	f3 e2       	ldi	r31, 0x23	; 35
    4934:	9f 2e       	mov	r9, r31
    4936:	f0 2d       	mov	r31, r0
    4938:	68 94       	set
    493a:	aa 24       	eor	r10, r10
    493c:	a6 f8       	bld	r10, 6
    493e:	68 94       	set
    4940:	cc 24       	eor	r12, r12
    4942:	c6 f8       	bld	r12, 6
    4944:	e1 2c       	mov	r14, r1
    4946:	00 e0       	ldi	r16, 0x00	; 0
    4948:	23 e0       	ldi	r18, 0x03	; 3
    494a:	40 e0       	ldi	r20, 0x00	; 0
    494c:	51 ee       	ldi	r21, 0xE1	; 225
    494e:	60 e0       	ldi	r22, 0x00	; 0
    4950:	70 e0       	ldi	r23, 0x00	; 0
    4952:	8c 2f       	mov	r24, r28
    4954:	17 d4       	rcall	.+2094   	; 0x5184 <serial_create>
    4956:	90 93 1d 19 	sts	0x191D, r25	; 0x80191d <_rn2483_serial+0x1>
    495a:	80 93 1c 19 	sts	0x191C, r24	; 0x80191c <_rn2483_serial>
    495e:	e7 e0       	ldi	r30, 0x07	; 7
    4960:	f1 e0       	ldi	r31, 0x01	; 1
    4962:	80 81       	ld	r24, Z
    4964:	80 61       	ori	r24, 0x10	; 16
    4966:	80 83       	st	Z, r24
    4968:	cf 91       	pop	r28
    496a:	1f 91       	pop	r17
    496c:	0f 91       	pop	r16
    496e:	ef 90       	pop	r14
    4970:	cf 90       	pop	r12
    4972:	af 90       	pop	r10
    4974:	9f 90       	pop	r9
    4976:	8f 90       	pop	r8
    4978:	08 95       	ret

0000497a <lora_driver_resetRn2483>:
    497a:	88 23       	and	r24, r24
    497c:	31 f0       	breq	.+12     	; 0x498a <lora_driver_resetRn2483+0x10>
    497e:	e8 e0       	ldi	r30, 0x08	; 8
    4980:	f1 e0       	ldi	r31, 0x01	; 1
    4982:	80 81       	ld	r24, Z
    4984:	8f 7e       	andi	r24, 0xEF	; 239
    4986:	80 83       	st	Z, r24
    4988:	08 95       	ret
    498a:	e8 e0       	ldi	r30, 0x08	; 8
    498c:	f1 e0       	ldi	r31, 0x01	; 1
    498e:	80 81       	ld	r24, Z
    4990:	80 61       	ori	r24, 0x10	; 16
    4992:	80 83       	st	Z, r24
    4994:	08 95       	ret

00004996 <lora_driver_rn2483FactoryReset>:
    4996:	60 e0       	ldi	r22, 0x00	; 0
    4998:	70 e0       	ldi	r23, 0x00	; 0
    499a:	86 e4       	ldi	r24, 0x46	; 70
    499c:	97 e0       	ldi	r25, 0x07	; 7
    499e:	d4 de       	rcall	.-600    	; 0x4748 <_uploadMessage>
    49a0:	e3 ea       	ldi	r30, 0xA3	; 163
    49a2:	f9 e1       	ldi	r31, 0x19	; 25
    49a4:	01 90       	ld	r0, Z+
    49a6:	00 20       	and	r0, r0
    49a8:	e9 f7       	brne	.-6      	; 0x49a4 <lora_driver_rn2483FactoryReset+0xe>
    49aa:	31 97       	sbiw	r30, 0x01	; 1
    49ac:	e3 5a       	subi	r30, 0xA3	; 163
    49ae:	f9 41       	sbci	r31, 0x19	; 25
    49b0:	81 e0       	ldi	r24, 0x01	; 1
    49b2:	75 97       	sbiw	r30, 0x15	; 21
    49b4:	08 f0       	brcs	.+2      	; 0x49b8 <lora_driver_rn2483FactoryReset+0x22>
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	08 95       	ret

000049ba <lora_driver_getRn2483Hweui>:
    49ba:	cf 93       	push	r28
    49bc:	df 93       	push	r29
    49be:	ec 01       	movw	r28, r24
    49c0:	60 e0       	ldi	r22, 0x00	; 0
    49c2:	70 e0       	ldi	r23, 0x00	; 0
    49c4:	87 e5       	ldi	r24, 0x57	; 87
    49c6:	97 e0       	ldi	r25, 0x07	; 7
    49c8:	bf de       	rcall	.-642    	; 0x4748 <_uploadMessage>
    49ca:	e3 ea       	ldi	r30, 0xA3	; 163
    49cc:	f9 e1       	ldi	r31, 0x19	; 25
    49ce:	01 90       	ld	r0, Z+
    49d0:	00 20       	and	r0, r0
    49d2:	e9 f7       	brne	.-6      	; 0x49ce <lora_driver_getRn2483Hweui+0x14>
    49d4:	e4 5b       	subi	r30, 0xB4	; 180
    49d6:	f9 41       	sbci	r31, 0x19	; 25
    49d8:	39 f4       	brne	.+14     	; 0x49e8 <lora_driver_getRn2483Hweui+0x2e>
    49da:	63 ea       	ldi	r22, 0xA3	; 163
    49dc:	79 e1       	ldi	r23, 0x19	; 25
    49de:	ce 01       	movw	r24, r28
    49e0:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <strcpy>
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	02 c0       	rjmp	.+4      	; 0x49ec <lora_driver_getRn2483Hweui+0x32>
    49e8:	18 82       	st	Y, r1
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	df 91       	pop	r29
    49ee:	cf 91       	pop	r28
    49f0:	08 95       	ret

000049f2 <lora_driver_setDeviceIdentifier>:
    49f2:	fc 01       	movw	r30, r24
    49f4:	01 90       	ld	r0, Z+
    49f6:	00 20       	and	r0, r0
    49f8:	e9 f7       	brne	.-6      	; 0x49f4 <lora_driver_setDeviceIdentifier+0x2>
    49fa:	9f 01       	movw	r18, r30
    49fc:	21 51       	subi	r18, 0x11	; 17
    49fe:	31 09       	sbc	r19, r1
    4a00:	28 17       	cp	r18, r24
    4a02:	39 07       	cpc	r19, r25
    4a04:	29 f4       	brne	.+10     	; 0x4a10 <lora_driver_setDeviceIdentifier+0x1e>
    4a06:	bc 01       	movw	r22, r24
    4a08:	85 e8       	ldi	r24, 0x85	; 133
    4a0a:	97 e0       	ldi	r25, 0x07	; 7
    4a0c:	6c cf       	rjmp	.-296    	; 0x48e6 <_uploadMessageRc>
    4a0e:	08 95       	ret
    4a10:	89 e0       	ldi	r24, 0x09	; 9
    4a12:	08 95       	ret

00004a14 <lora_driver_setApplicationIdentifier>:
    4a14:	fc 01       	movw	r30, r24
    4a16:	01 90       	ld	r0, Z+
    4a18:	00 20       	and	r0, r0
    4a1a:	e9 f7       	brne	.-6      	; 0x4a16 <lora_driver_setApplicationIdentifier+0x2>
    4a1c:	9f 01       	movw	r18, r30
    4a1e:	21 51       	subi	r18, 0x11	; 17
    4a20:	31 09       	sbc	r19, r1
    4a22:	28 17       	cp	r18, r24
    4a24:	39 07       	cpc	r19, r25
    4a26:	29 f4       	brne	.+10     	; 0x4a32 <lora_driver_setApplicationIdentifier+0x1e>
    4a28:	bc 01       	movw	r22, r24
    4a2a:	84 e9       	ldi	r24, 0x94	; 148
    4a2c:	97 e0       	ldi	r25, 0x07	; 7
    4a2e:	5b cf       	rjmp	.-330    	; 0x48e6 <_uploadMessageRc>
    4a30:	08 95       	ret
    4a32:	89 e0       	ldi	r24, 0x09	; 9
    4a34:	08 95       	ret

00004a36 <lora_driver_setApplicationKey>:
    4a36:	fc 01       	movw	r30, r24
    4a38:	01 90       	ld	r0, Z+
    4a3a:	00 20       	and	r0, r0
    4a3c:	e9 f7       	brne	.-6      	; 0x4a38 <lora_driver_setApplicationKey+0x2>
    4a3e:	9f 01       	movw	r18, r30
    4a40:	21 52       	subi	r18, 0x21	; 33
    4a42:	31 09       	sbc	r19, r1
    4a44:	28 17       	cp	r18, r24
    4a46:	39 07       	cpc	r19, r25
    4a48:	29 f4       	brne	.+10     	; 0x4a54 <lora_driver_setApplicationKey+0x1e>
    4a4a:	bc 01       	movw	r22, r24
    4a4c:	83 ea       	ldi	r24, 0xA3	; 163
    4a4e:	97 e0       	ldi	r25, 0x07	; 7
    4a50:	4a cf       	rjmp	.-364    	; 0x48e6 <_uploadMessageRc>
    4a52:	08 95       	ret
    4a54:	89 e0       	ldi	r24, 0x09	; 9
    4a56:	08 95       	ret

00004a58 <lora_driver_saveMac>:
    4a58:	60 e0       	ldi	r22, 0x00	; 0
    4a5a:	70 e0       	ldi	r23, 0x00	; 0
    4a5c:	82 ee       	ldi	r24, 0xE2	; 226
    4a5e:	97 e0       	ldi	r25, 0x07	; 7
    4a60:	42 cf       	rjmp	.-380    	; 0x48e6 <_uploadMessageRc>
    4a62:	08 95       	ret

00004a64 <lora_driver_join>:
    4a64:	0f 93       	push	r16
    4a66:	1f 93       	push	r17
    4a68:	e8 2f       	mov	r30, r24
    4a6a:	f0 e0       	ldi	r31, 0x00	; 0
    4a6c:	ee 0f       	add	r30, r30
    4a6e:	ff 1f       	adc	r31, r31
    4a70:	e9 54       	subi	r30, 0x49	; 73
    4a72:	f6 4f       	sbci	r31, 0xF6	; 246
    4a74:	60 81       	ld	r22, Z
    4a76:	71 81       	ldd	r23, Z+1	; 0x01
    4a78:	8b ee       	ldi	r24, 0xEB	; 235
    4a7a:	97 e0       	ldi	r25, 0x07	; 7
    4a7c:	34 df       	rcall	.-408    	; 0x48e6 <_uploadMessageRc>
    4a7e:	81 11       	cpse	r24, r1
    4a80:	14 c0       	rjmp	.+40     	; 0x4aaa <lora_driver_join+0x46>
    4a82:	08 e2       	ldi	r16, 0x28	; 40
    4a84:	15 e0       	ldi	r17, 0x05	; 5
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	4d e2       	ldi	r20, 0x2D	; 45
    4a8c:	50 e0       	ldi	r21, 0x00	; 0
    4a8e:	63 ea       	ldi	r22, 0xA3	; 163
    4a90:	79 e1       	ldi	r23, 0x19	; 25
    4a92:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_serialReplyBufferHandle>
    4a96:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_serialReplyBufferHandle+0x1>
    4a9a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <xStreamBufferReceive>
    4a9e:	88 23       	and	r24, r24
    4aa0:	21 f0       	breq	.+8      	; 0x4aaa <lora_driver_join+0x46>
    4aa2:	83 ea       	ldi	r24, 0xA3	; 163
    4aa4:	99 e1       	ldi	r25, 0x19	; 25
    4aa6:	aa de       	rcall	.-684    	; 0x47fc <_reply2ReturnCode>
    4aa8:	03 c0       	rjmp	.+6      	; 0x4ab0 <lora_driver_join+0x4c>
    4aaa:	83 ea       	ldi	r24, 0xA3	; 163
    4aac:	99 e1       	ldi	r25, 0x19	; 25
    4aae:	a6 de       	rcall	.-692    	; 0x47fc <_reply2ReturnCode>
    4ab0:	1f 91       	pop	r17
    4ab2:	0f 91       	pop	r16
    4ab4:	08 95       	ret

00004ab6 <lora_driver_sendUploadMessage>:
    4ab6:	0f 93       	push	r16
    4ab8:	1f 93       	push	r17
    4aba:	cf 93       	push	r28
    4abc:	df 93       	push	r29
    4abe:	1f 92       	push	r1
    4ac0:	cd b7       	in	r28, 0x3d	; 61
    4ac2:	de b7       	in	r29, 0x3e	; 62
    4ac4:	db 01       	movw	r26, r22
    4ac6:	11 96       	adiw	r26, 0x01	; 1
    4ac8:	9c 91       	ld	r25, X
    4aca:	11 97       	sbiw	r26, 0x01	; 1
    4acc:	95 31       	cpi	r25, 0x15	; 21
    4ace:	08 f0       	brcs	.+2      	; 0x4ad2 <lora_driver_sendUploadMessage+0x1c>
    4ad0:	b4 c0       	rjmp	.+360    	; 0x4c3a <lora_driver_sendUploadMessage+0x184>
    4ad2:	99 23       	and	r25, r25
    4ad4:	81 f1       	breq	.+96     	; 0x4b36 <lora_driver_sendUploadMessage+0x80>
    4ad6:	60 e0       	ldi	r22, 0x00	; 0
    4ad8:	70 e0       	ldi	r23, 0x00	; 0
    4ada:	27 2f       	mov	r18, r23
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	46 2f       	mov	r20, r22
    4ae0:	50 e0       	ldi	r21, 0x00	; 0
    4ae2:	fd 01       	movw	r30, r26
    4ae4:	e4 0f       	add	r30, r20
    4ae6:	f5 1f       	adc	r31, r21
    4ae8:	92 81       	ldd	r25, Z+2	; 0x02
    4aea:	92 95       	swap	r25
    4aec:	9f 70       	andi	r25, 0x0F	; 15
    4aee:	9a 30       	cpi	r25, 0x0A	; 10
    4af0:	10 f0       	brcs	.+4      	; 0x4af6 <lora_driver_sendUploadMessage+0x40>
    4af2:	99 5c       	subi	r25, 0xC9	; 201
    4af4:	01 c0       	rjmp	.+2      	; 0x4af8 <lora_driver_sendUploadMessage+0x42>
    4af6:	90 5d       	subi	r25, 0xD0	; 208
    4af8:	f9 01       	movw	r30, r18
    4afa:	ec 5c       	subi	r30, 0xCC	; 204
    4afc:	f6 4e       	sbci	r31, 0xE6	; 230
    4afe:	90 83       	st	Z, r25
    4b00:	2f 5f       	subi	r18, 0xFF	; 255
    4b02:	3f 4f       	sbci	r19, 0xFF	; 255
    4b04:	fd 01       	movw	r30, r26
    4b06:	e4 0f       	add	r30, r20
    4b08:	f5 1f       	adc	r31, r21
    4b0a:	92 81       	ldd	r25, Z+2	; 0x02
    4b0c:	9f 70       	andi	r25, 0x0F	; 15
    4b0e:	49 2f       	mov	r20, r25
    4b10:	50 e0       	ldi	r21, 0x00	; 0
    4b12:	4a 30       	cpi	r20, 0x0A	; 10
    4b14:	51 05       	cpc	r21, r1
    4b16:	14 f0       	brlt	.+4      	; 0x4b1c <lora_driver_sendUploadMessage+0x66>
    4b18:	99 5c       	subi	r25, 0xC9	; 201
    4b1a:	01 c0       	rjmp	.+2      	; 0x4b1e <lora_driver_sendUploadMessage+0x68>
    4b1c:	90 5d       	subi	r25, 0xD0	; 208
    4b1e:	f9 01       	movw	r30, r18
    4b20:	ec 5c       	subi	r30, 0xCC	; 204
    4b22:	f6 4e       	sbci	r31, 0xE6	; 230
    4b24:	90 83       	st	Z, r25
    4b26:	7e 5f       	subi	r23, 0xFE	; 254
    4b28:	6f 5f       	subi	r22, 0xFF	; 255
    4b2a:	11 96       	adiw	r26, 0x01	; 1
    4b2c:	9c 91       	ld	r25, X
    4b2e:	11 97       	sbiw	r26, 0x01	; 1
    4b30:	69 17       	cp	r22, r25
    4b32:	98 f2       	brcs	.-90     	; 0x4ada <lora_driver_sendUploadMessage+0x24>
    4b34:	01 c0       	rjmp	.+2      	; 0x4b38 <lora_driver_sendUploadMessage+0x82>
    4b36:	70 e0       	ldi	r23, 0x00	; 0
    4b38:	e7 2f       	mov	r30, r23
    4b3a:	f0 e0       	ldi	r31, 0x00	; 0
    4b3c:	ec 5c       	subi	r30, 0xCC	; 204
    4b3e:	f6 4e       	sbci	r31, 0xE6	; 230
    4b40:	10 82       	st	Z, r1
    4b42:	4c 91       	ld	r20, X
    4b44:	81 11       	cpse	r24, r1
    4b46:	03 c0       	rjmp	.+6      	; 0x4b4e <lora_driver_sendUploadMessage+0x98>
    4b48:	84 ef       	ldi	r24, 0xF4	; 244
    4b4a:	97 e0       	ldi	r25, 0x07	; 7
    4b4c:	02 c0       	rjmp	.+4      	; 0x4b52 <lora_driver_sendUploadMessage+0x9c>
    4b4e:	86 ef       	ldi	r24, 0xF6	; 246
    4b50:	97 e0       	ldi	r25, 0x07	; 7
    4b52:	24 e3       	ldi	r18, 0x34	; 52
    4b54:	39 e1       	ldi	r19, 0x19	; 25
    4b56:	3f 93       	push	r19
    4b58:	2f 93       	push	r18
    4b5a:	1f 92       	push	r1
    4b5c:	4f 93       	push	r20
    4b5e:	9f 93       	push	r25
    4b60:	8f 93       	push	r24
    4b62:	8a ef       	ldi	r24, 0xFA	; 250
    4b64:	97 e0       	ldi	r25, 0x07	; 7
    4b66:	9f 93       	push	r25
    4b68:	8f 93       	push	r24
    4b6a:	86 e7       	ldi	r24, 0x76	; 118
    4b6c:	99 e1       	ldi	r25, 0x19	; 25
    4b6e:	9f 93       	push	r25
    4b70:	8f 93       	push	r24
    4b72:	0e 94 83 3a 	call	0x7506	; 0x7506 <sprintf>
    4b76:	60 e0       	ldi	r22, 0x00	; 0
    4b78:	70 e0       	ldi	r23, 0x00	; 0
    4b7a:	86 e7       	ldi	r24, 0x76	; 118
    4b7c:	99 e1       	ldi	r25, 0x19	; 25
    4b7e:	b3 de       	rcall	.-666    	; 0x48e6 <_uploadMessageRc>
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	de bf       	out	0x3e, r29	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	81 11       	cpse	r24, r1
    4b8c:	59 c0       	rjmp	.+178    	; 0x4c40 <lora_driver_sendUploadMessage+0x18a>
    4b8e:	08 e2       	ldi	r16, 0x28	; 40
    4b90:	15 e0       	ldi	r17, 0x05	; 5
    4b92:	20 e0       	ldi	r18, 0x00	; 0
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	4d e2       	ldi	r20, 0x2D	; 45
    4b98:	50 e0       	ldi	r21, 0x00	; 0
    4b9a:	63 ea       	ldi	r22, 0xA3	; 163
    4b9c:	79 e1       	ldi	r23, 0x19	; 25
    4b9e:	80 91 1a 19 	lds	r24, 0x191A	; 0x80191a <_serialReplyBufferHandle>
    4ba2:	90 91 1b 19 	lds	r25, 0x191B	; 0x80191b <_serialReplyBufferHandle+0x1>
    4ba6:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <xStreamBufferReceive>
    4baa:	88 23       	and	r24, r24
    4bac:	09 f4       	brne	.+2      	; 0x4bb0 <lora_driver_sendUploadMessage+0xfa>
    4bae:	47 c0       	rjmp	.+142    	; 0x4c3e <lora_driver_sendUploadMessage+0x188>
    4bb0:	83 ea       	ldi	r24, 0xA3	; 163
    4bb2:	99 e1       	ldi	r25, 0x19	; 25
    4bb4:	23 de       	rcall	.-954    	; 0x47fc <_reply2ReturnCode>
    4bb6:	8e 30       	cpi	r24, 0x0E	; 14
    4bb8:	09 f0       	breq	.+2      	; 0x4bbc <lora_driver_sendUploadMessage+0x106>
    4bba:	42 c0       	rjmp	.+132    	; 0x4c40 <lora_driver_sendUploadMessage+0x18a>
    4bbc:	87 e0       	ldi	r24, 0x07	; 7
    4bbe:	89 83       	std	Y+1, r24	; 0x01
    4bc0:	80 91 18 19 	lds	r24, 0x1918	; 0x801918 <_downlinkMessageBuffer>
    4bc4:	90 91 19 19 	lds	r25, 0x1919	; 0x801919 <_downlinkMessageBuffer+0x1>
    4bc8:	89 2b       	or	r24, r25
    4bca:	a9 f1       	breq	.+106    	; 0x4c36 <lora_driver_sendUploadMessage+0x180>
    4bcc:	be 01       	movw	r22, r28
    4bce:	6f 5f       	subi	r22, 0xFF	; 255
    4bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bd2:	83 ea       	ldi	r24, 0xA3	; 163
    4bd4:	99 e1       	ldi	r25, 0x19	; 25
    4bd6:	68 d1       	rcall	.+720    	; 0x4ea8 <decode_port_no>
    4bd8:	80 93 1e 19 	sts	0x191E, r24	; 0x80191e <_downlinkPayload>
    4bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    4bde:	f0 e0       	ldi	r31, 0x00	; 0
    4be0:	ed 55       	subi	r30, 0x5D	; 93
    4be2:	f6 4e       	sbci	r31, 0xE6	; 230
    4be4:	df 01       	movw	r26, r30
    4be6:	0d 90       	ld	r0, X+
    4be8:	00 20       	and	r0, r0
    4bea:	e9 f7       	brne	.-6      	; 0x4be6 <lora_driver_sendUploadMessage+0x130>
    4bec:	11 97       	sbiw	r26, 0x01	; 1
    4bee:	ae 1b       	sub	r26, r30
    4bf0:	bf 0b       	sbc	r27, r31
    4bf2:	aa 23       	and	r26, r26
    4bf4:	91 f0       	breq	.+36     	; 0x4c1a <lora_driver_sendUploadMessage+0x164>
    4bf6:	bb 27       	eor	r27, r27
    4bf8:	cd 01       	movw	r24, r26
    4bfa:	01 97       	sbiw	r24, 0x01	; 1
    4bfc:	9c 01       	movw	r18, r24
    4bfe:	12 f4       	brpl	.+4      	; 0x4c04 <lora_driver_sendUploadMessage+0x14e>
    4c00:	2f 5f       	subi	r18, 0xFF	; 255
    4c02:	3f 4f       	sbci	r19, 0xFF	; 255
    4c04:	35 95       	asr	r19
    4c06:	27 95       	ror	r18
    4c08:	20 93 1f 19 	sts	0x191F, r18	; 0x80191f <_downlinkPayload+0x1>
    4c0c:	af 01       	movw	r20, r30
    4c0e:	4f 5f       	subi	r20, 0xFF	; 255
    4c10:	5f 4f       	sbci	r21, 0xFF	; 255
    4c12:	64 e1       	ldi	r22, 0x14	; 20
    4c14:	80 e2       	ldi	r24, 0x20	; 32
    4c16:	99 e1       	ldi	r25, 0x19	; 25
    4c18:	73 d1       	rcall	.+742    	; 0x4f00 <decode_hexadecimal_string_bytes>
    4c1a:	01 e0       	ldi	r16, 0x01	; 1
    4c1c:	10 e0       	ldi	r17, 0x00	; 0
    4c1e:	20 e0       	ldi	r18, 0x00	; 0
    4c20:	30 e0       	ldi	r19, 0x00	; 0
    4c22:	46 e1       	ldi	r20, 0x16	; 22
    4c24:	50 e0       	ldi	r21, 0x00	; 0
    4c26:	6e e1       	ldi	r22, 0x1E	; 30
    4c28:	79 e1       	ldi	r23, 0x19	; 25
    4c2a:	80 91 18 19 	lds	r24, 0x1918	; 0x801918 <_downlinkMessageBuffer>
    4c2e:	90 91 19 19 	lds	r25, 0x1919	; 0x801919 <_downlinkMessageBuffer+0x1>
    4c32:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xStreamBufferSend>
    4c36:	8e e0       	ldi	r24, 0x0E	; 14
    4c38:	03 c0       	rjmp	.+6      	; 0x4c40 <lora_driver_sendUploadMessage+0x18a>
    4c3a:	84 e1       	ldi	r24, 0x14	; 20
    4c3c:	01 c0       	rjmp	.+2      	; 0x4c40 <lora_driver_sendUploadMessage+0x18a>
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
    4c40:	0f 90       	pop	r0
    4c42:	df 91       	pop	r29
    4c44:	cf 91       	pop	r28
    4c46:	1f 91       	pop	r17
    4c48:	0f 91       	pop	r16
    4c4a:	08 95       	ret

00004c4c <lora_driver_setAdaptiveDataRate>:
    4c4c:	81 30       	cpi	r24, 0x01	; 1
    4c4e:	19 f0       	breq	.+6      	; 0x4c56 <lora_driver_setAdaptiveDataRate+0xa>
    4c50:	6a e0       	ldi	r22, 0x0A	; 10
    4c52:	78 e0       	ldi	r23, 0x08	; 8
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <lora_driver_setAdaptiveDataRate+0xe>
    4c56:	63 ee       	ldi	r22, 0xE3	; 227
    4c58:	78 e0       	ldi	r23, 0x08	; 8
    4c5a:	8e e0       	ldi	r24, 0x0E	; 14
    4c5c:	98 e0       	ldi	r25, 0x08	; 8
    4c5e:	43 ce       	rjmp	.-890    	; 0x48e6 <_uploadMessageRc>
    4c60:	08 95       	ret

00004c62 <lora_driver_setReceiveDelay>:
    4c62:	9f 93       	push	r25
    4c64:	8f 93       	push	r24
    4c66:	8f e3       	ldi	r24, 0x3F	; 63
    4c68:	98 e0       	ldi	r25, 0x08	; 8
    4c6a:	9f 93       	push	r25
    4c6c:	8f 93       	push	r24
    4c6e:	86 e7       	ldi	r24, 0x76	; 118
    4c70:	99 e1       	ldi	r25, 0x19	; 25
    4c72:	9f 93       	push	r25
    4c74:	8f 93       	push	r24
    4c76:	0e 94 83 3a 	call	0x7506	; 0x7506 <sprintf>
    4c7a:	60 e0       	ldi	r22, 0x00	; 0
    4c7c:	70 e0       	ldi	r23, 0x00	; 0
    4c7e:	86 e7       	ldi	r24, 0x76	; 118
    4c80:	99 e1       	ldi	r25, 0x19	; 25
    4c82:	31 de       	rcall	.-926    	; 0x48e6 <_uploadMessageRc>
    4c84:	0f 90       	pop	r0
    4c86:	0f 90       	pop	r0
    4c88:	0f 90       	pop	r0
    4c8a:	0f 90       	pop	r0
    4c8c:	0f 90       	pop	r0
    4c8e:	0f 90       	pop	r0
    4c90:	08 95       	ret

00004c92 <lora_driver_configureToEu868>:
    4c92:	2f 92       	push	r2
    4c94:	3f 92       	push	r3
    4c96:	4f 92       	push	r4
    4c98:	5f 92       	push	r5
    4c9a:	6f 92       	push	r6
    4c9c:	7f 92       	push	r7
    4c9e:	8f 92       	push	r8
    4ca0:	9f 92       	push	r9
    4ca2:	af 92       	push	r10
    4ca4:	bf 92       	push	r11
    4ca6:	cf 92       	push	r12
    4ca8:	df 92       	push	r13
    4caa:	ef 92       	push	r14
    4cac:	ff 92       	push	r15
    4cae:	0f 93       	push	r16
    4cb0:	1f 93       	push	r17
    4cb2:	cf 93       	push	r28
    4cb4:	df 93       	push	r29
    4cb6:	cd b7       	in	r28, 0x3d	; 61
    4cb8:	de b7       	in	r29, 0x3e	; 62
    4cba:	a0 97       	sbiw	r28, 0x20	; 32
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	f8 94       	cli
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	0f be       	out	0x3f, r0	; 63
    4cc4:	cd bf       	out	0x3d, r28	; 61
    4cc6:	6c e6       	ldi	r22, 0x6C	; 108
    4cc8:	78 e0       	ldi	r23, 0x08	; 8
    4cca:	88 e7       	ldi	r24, 0x78	; 120
    4ccc:	98 e0       	ldi	r25, 0x08	; 8
    4cce:	3c dd       	rcall	.-1416   	; 0x4748 <_uploadMessage>
    4cd0:	95 dd       	rcall	.-1238   	; 0x47fc <_reply2ReturnCode>
    4cd2:	81 11       	cpse	r24, r1
    4cd4:	a3 c0       	rjmp	.+326    	; 0x4e1c <lora_driver_configureToEu868+0x18a>
    4cd6:	80 e2       	ldi	r24, 0x20	; 32
    4cd8:	e2 e2       	ldi	r30, 0x22	; 34
    4cda:	f2 e0       	ldi	r31, 0x02	; 2
    4cdc:	de 01       	movw	r26, r28
    4cde:	11 96       	adiw	r26, 0x01	; 1
    4ce0:	01 90       	ld	r0, Z+
    4ce2:	0d 92       	st	X+, r0
    4ce4:	8a 95       	dec	r24
    4ce6:	e1 f7       	brne	.-8      	; 0x4ce0 <lora_driver_configureToEu868+0x4e>
    4ce8:	9e 01       	movw	r18, r28
    4cea:	2f 5f       	subi	r18, 0xFF	; 255
    4cec:	3f 4f       	sbci	r19, 0xFF	; 255
    4cee:	69 01       	movw	r12, r18
    4cf0:	e1 2c       	mov	r14, r1
    4cf2:	f1 2c       	mov	r15, r1
    4cf4:	0f 2e       	mov	r0, r31
    4cf6:	f4 e8       	ldi	r31, 0x84	; 132
    4cf8:	af 2e       	mov	r10, r31
    4cfa:	f8 e0       	ldi	r31, 0x08	; 8
    4cfc:	bf 2e       	mov	r11, r31
    4cfe:	f0 2d       	mov	r31, r0
    4d00:	06 e7       	ldi	r16, 0x76	; 118
    4d02:	19 e1       	ldi	r17, 0x19	; 25
    4d04:	0f 2e       	mov	r0, r31
    4d06:	fd e9       	ldi	r31, 0x9D	; 157
    4d08:	4f 2e       	mov	r4, r31
    4d0a:	f8 e0       	ldi	r31, 0x08	; 8
    4d0c:	5f 2e       	mov	r5, r31
    4d0e:	f0 2d       	mov	r31, r0
    4d10:	0f 2e       	mov	r0, r31
    4d12:	f4 eb       	ldi	r31, 0xB4	; 180
    4d14:	8f 2e       	mov	r8, r31
    4d16:	f8 e0       	ldi	r31, 0x08	; 8
    4d18:	9f 2e       	mov	r9, r31
    4d1a:	f0 2d       	mov	r31, r0
    4d1c:	0f 2e       	mov	r0, r31
    4d1e:	fe ec       	ldi	r31, 0xCE	; 206
    4d20:	6f 2e       	mov	r6, r31
    4d22:	f8 e0       	ldi	r31, 0x08	; 8
    4d24:	7f 2e       	mov	r7, r31
    4d26:	f0 2d       	mov	r31, r0
    4d28:	3e 2c       	mov	r3, r14
    4d2a:	2f 2c       	mov	r2, r15
    4d2c:	ff 92       	push	r15
    4d2e:	ef 92       	push	r14
    4d30:	bf 92       	push	r11
    4d32:	af 92       	push	r10
    4d34:	1f 93       	push	r17
    4d36:	0f 93       	push	r16
    4d38:	0e 94 83 3a 	call	0x7506	; 0x7506 <sprintf>
    4d3c:	60 e0       	ldi	r22, 0x00	; 0
    4d3e:	70 e0       	ldi	r23, 0x00	; 0
    4d40:	c8 01       	movw	r24, r16
    4d42:	02 dd       	rcall	.-1532   	; 0x4748 <_uploadMessage>
    4d44:	5b dd       	rcall	.-1354   	; 0x47fc <_reply2ReturnCode>
    4d46:	0f 90       	pop	r0
    4d48:	0f 90       	pop	r0
    4d4a:	0f 90       	pop	r0
    4d4c:	0f 90       	pop	r0
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
    4d52:	81 11       	cpse	r24, r1
    4d54:	63 c0       	rjmp	.+198    	; 0x4e1c <lora_driver_configureToEu868+0x18a>
    4d56:	32 e0       	ldi	r19, 0x02	; 2
    4d58:	3e 15       	cp	r19, r14
    4d5a:	e8 f4       	brcc	.+58     	; 0x4d96 <lora_driver_configureToEu868+0x104>
    4d5c:	f6 01       	movw	r30, r12
    4d5e:	83 81       	ldd	r24, Z+3	; 0x03
    4d60:	8f 93       	push	r24
    4d62:	82 81       	ldd	r24, Z+2	; 0x02
    4d64:	8f 93       	push	r24
    4d66:	81 81       	ldd	r24, Z+1	; 0x01
    4d68:	8f 93       	push	r24
    4d6a:	80 81       	ld	r24, Z
    4d6c:	8f 93       	push	r24
    4d6e:	ff 92       	push	r15
    4d70:	ef 92       	push	r14
    4d72:	5f 92       	push	r5
    4d74:	4f 92       	push	r4
    4d76:	1f 93       	push	r17
    4d78:	0f 93       	push	r16
    4d7a:	0e 94 83 3a 	call	0x7506	; 0x7506 <sprintf>
    4d7e:	60 e0       	ldi	r22, 0x00	; 0
    4d80:	70 e0       	ldi	r23, 0x00	; 0
    4d82:	c8 01       	movw	r24, r16
    4d84:	e1 dc       	rcall	.-1598   	; 0x4748 <_uploadMessage>
    4d86:	3a dd       	rcall	.-1420   	; 0x47fc <_reply2ReturnCode>
    4d88:	0f b6       	in	r0, 0x3f	; 63
    4d8a:	f8 94       	cli
    4d8c:	de bf       	out	0x3e, r29	; 62
    4d8e:	0f be       	out	0x3f, r0	; 63
    4d90:	cd bf       	out	0x3d, r28	; 61
    4d92:	81 11       	cpse	r24, r1
    4d94:	43 c0       	rjmp	.+134    	; 0x4e1c <lora_driver_configureToEu868+0x18a>
    4d96:	2f 92       	push	r2
    4d98:	3f 92       	push	r3
    4d9a:	9f 92       	push	r9
    4d9c:	8f 92       	push	r8
    4d9e:	1f 93       	push	r17
    4da0:	0f 93       	push	r16
    4da2:	0e 94 83 3a 	call	0x7506	; 0x7506 <sprintf>
    4da6:	60 e0       	ldi	r22, 0x00	; 0
    4da8:	70 e0       	ldi	r23, 0x00	; 0
    4daa:	c8 01       	movw	r24, r16
    4dac:	cd dc       	rcall	.-1638   	; 0x4748 <_uploadMessage>
    4dae:	26 dd       	rcall	.-1460   	; 0x47fc <_reply2ReturnCode>
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	0f 90       	pop	r0
    4db6:	0f 90       	pop	r0
    4db8:	0f 90       	pop	r0
    4dba:	0f 90       	pop	r0
    4dbc:	81 11       	cpse	r24, r1
    4dbe:	2e c0       	rjmp	.+92     	; 0x4e1c <lora_driver_configureToEu868+0x18a>
    4dc0:	2f 92       	push	r2
    4dc2:	3f 92       	push	r3
    4dc4:	7f 92       	push	r7
    4dc6:	6f 92       	push	r6
    4dc8:	1f 93       	push	r17
    4dca:	0f 93       	push	r16
    4dcc:	0e 94 83 3a 	call	0x7506	; 0x7506 <sprintf>
    4dd0:	60 e0       	ldi	r22, 0x00	; 0
    4dd2:	70 e0       	ldi	r23, 0x00	; 0
    4dd4:	c8 01       	movw	r24, r16
    4dd6:	b8 dc       	rcall	.-1680   	; 0x4748 <_uploadMessage>
    4dd8:	11 dd       	rcall	.-1502   	; 0x47fc <_reply2ReturnCode>
    4dda:	0f 90       	pop	r0
    4ddc:	0f 90       	pop	r0
    4dde:	0f 90       	pop	r0
    4de0:	0f 90       	pop	r0
    4de2:	0f 90       	pop	r0
    4de4:	0f 90       	pop	r0
    4de6:	81 11       	cpse	r24, r1
    4de8:	19 c0       	rjmp	.+50     	; 0x4e1c <lora_driver_configureToEu868+0x18a>
    4dea:	3f ef       	ldi	r19, 0xFF	; 255
    4dec:	e3 1a       	sub	r14, r19
    4dee:	f3 0a       	sbc	r15, r19
    4df0:	84 e0       	ldi	r24, 0x04	; 4
    4df2:	c8 0e       	add	r12, r24
    4df4:	d1 1c       	adc	r13, r1
    4df6:	98 e0       	ldi	r25, 0x08	; 8
    4df8:	e9 16       	cp	r14, r25
    4dfa:	f1 04       	cpc	r15, r1
    4dfc:	09 f0       	breq	.+2      	; 0x4e00 <lora_driver_configureToEu868+0x16e>
    4dfe:	94 cf       	rjmp	.-216    	; 0x4d28 <lora_driver_configureToEu868+0x96>
    4e00:	60 e0       	ldi	r22, 0x00	; 0
    4e02:	70 e0       	ldi	r23, 0x00	; 0
    4e04:	86 ee       	ldi	r24, 0xE6	; 230
    4e06:	98 e0       	ldi	r25, 0x08	; 8
    4e08:	9f dc       	rcall	.-1730   	; 0x4748 <_uploadMessage>
    4e0a:	f8 dc       	rcall	.-1552   	; 0x47fc <_reply2ReturnCode>
    4e0c:	81 11       	cpse	r24, r1
    4e0e:	06 c0       	rjmp	.+12     	; 0x4e1c <lora_driver_configureToEu868+0x18a>
    4e10:	60 e0       	ldi	r22, 0x00	; 0
    4e12:	70 e0       	ldi	r23, 0x00	; 0
    4e14:	87 ef       	ldi	r24, 0xF7	; 247
    4e16:	98 e0       	ldi	r25, 0x08	; 8
    4e18:	97 dc       	rcall	.-1746   	; 0x4748 <_uploadMessage>
    4e1a:	f0 dc       	rcall	.-1568   	; 0x47fc <_reply2ReturnCode>
    4e1c:	a0 96       	adiw	r28, 0x20	; 32
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	f8 94       	cli
    4e22:	de bf       	out	0x3e, r29	; 62
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	cd bf       	out	0x3d, r28	; 61
    4e28:	df 91       	pop	r29
    4e2a:	cf 91       	pop	r28
    4e2c:	1f 91       	pop	r17
    4e2e:	0f 91       	pop	r16
    4e30:	ff 90       	pop	r15
    4e32:	ef 90       	pop	r14
    4e34:	df 90       	pop	r13
    4e36:	cf 90       	pop	r12
    4e38:	bf 90       	pop	r11
    4e3a:	af 90       	pop	r10
    4e3c:	9f 90       	pop	r9
    4e3e:	8f 90       	pop	r8
    4e40:	7f 90       	pop	r7
    4e42:	6f 90       	pop	r6
    4e44:	5f 90       	pop	r5
    4e46:	4f 90       	pop	r4
    4e48:	3f 90       	pop	r3
    4e4a:	2f 90       	pop	r2
    4e4c:	08 95       	ret

00004e4e <lora_driver_setOtaaIdentity>:
    4e4e:	ef 92       	push	r14
    4e50:	ff 92       	push	r15
    4e52:	0f 93       	push	r16
    4e54:	1f 93       	push	r17
    4e56:	cf 93       	push	r28
    4e58:	df 93       	push	r29
    4e5a:	ec 01       	movw	r28, r24
    4e5c:	8b 01       	movw	r16, r22
    4e5e:	7a 01       	movw	r14, r20
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	f4 de       	rcall	.-536    	; 0x4c4c <lora_driver_setAdaptiveDataRate>
    4e64:	81 11       	cpse	r24, r1
    4e66:	0d c0       	rjmp	.+26     	; 0x4e82 <lora_driver_setOtaaIdentity+0x34>
    4e68:	ce 01       	movw	r24, r28
    4e6a:	d4 dd       	rcall	.-1112   	; 0x4a14 <lora_driver_setApplicationIdentifier>
    4e6c:	81 11       	cpse	r24, r1
    4e6e:	09 c0       	rjmp	.+18     	; 0x4e82 <lora_driver_setOtaaIdentity+0x34>
    4e70:	c8 01       	movw	r24, r16
    4e72:	e1 dd       	rcall	.-1086   	; 0x4a36 <lora_driver_setApplicationKey>
    4e74:	81 11       	cpse	r24, r1
    4e76:	05 c0       	rjmp	.+10     	; 0x4e82 <lora_driver_setOtaaIdentity+0x34>
    4e78:	c7 01       	movw	r24, r14
    4e7a:	bb dd       	rcall	.-1162   	; 0x49f2 <lora_driver_setDeviceIdentifier>
    4e7c:	81 11       	cpse	r24, r1
    4e7e:	01 c0       	rjmp	.+2      	; 0x4e82 <lora_driver_setOtaaIdentity+0x34>
    4e80:	eb dd       	rcall	.-1066   	; 0x4a58 <lora_driver_saveMac>
    4e82:	df 91       	pop	r29
    4e84:	cf 91       	pop	r28
    4e86:	1f 91       	pop	r17
    4e88:	0f 91       	pop	r16
    4e8a:	ff 90       	pop	r15
    4e8c:	ef 90       	pop	r14
    4e8e:	08 95       	ret

00004e90 <lora_driver_mapReturnCodeToText>:
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	fc 01       	movw	r30, r24
    4e94:	ee 0f       	add	r30, r30
    4e96:	ff 1f       	adc	r31, r31
    4e98:	8e 0f       	add	r24, r30
    4e9a:	9f 1f       	adc	r25, r31
    4e9c:	fc 01       	movw	r30, r24
    4e9e:	e5 54       	subi	r30, 0x45	; 69
    4ea0:	f6 4f       	sbci	r31, 0xF6	; 246
    4ea2:	81 81       	ldd	r24, Z+1	; 0x01
    4ea4:	92 81       	ldd	r25, Z+2	; 0x02
    4ea6:	08 95       	ret

00004ea8 <decode_port_no>:
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	00 97       	sbiw	r24, 0x00	; 0
    4eac:	29 f1       	breq	.+74     	; 0x4ef8 <decode_port_no+0x50>
    4eae:	fb 01       	movw	r30, r22
    4eb0:	20 81       	ld	r18, Z
    4eb2:	fc 01       	movw	r30, r24
    4eb4:	01 90       	ld	r0, Z+
    4eb6:	00 20       	and	r0, r0
    4eb8:	e9 f7       	brne	.-6      	; 0x4eb4 <decode_port_no+0xc>
    4eba:	31 97       	sbiw	r30, 0x01	; 1
    4ebc:	e8 1b       	sub	r30, r24
    4ebe:	f9 0b       	sbc	r31, r25
    4ec0:	82 2f       	mov	r24, r18
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	e8 17       	cp	r30, r24
    4ec6:	f9 07       	cpc	r31, r25
    4ec8:	c8 f0       	brcs	.+50     	; 0x4efc <decode_port_no+0x54>
    4eca:	80 e0       	ldi	r24, 0x00	; 0
    4ecc:	08 c0       	rjmp	.+16     	; 0x4ede <decode_port_no+0x36>
    4ece:	88 0f       	add	r24, r24
    4ed0:	38 2f       	mov	r19, r24
    4ed2:	33 0f       	add	r19, r19
    4ed4:	33 0f       	add	r19, r19
    4ed6:	83 0f       	add	r24, r19
    4ed8:	80 53       	subi	r24, 0x30	; 48
    4eda:	89 0f       	add	r24, r25
    4edc:	2f 5f       	subi	r18, 0xFF	; 255
    4ede:	fd 01       	movw	r30, r26
    4ee0:	e2 0f       	add	r30, r18
    4ee2:	f1 1d       	adc	r31, r1
    4ee4:	90 81       	ld	r25, Z
    4ee6:	30 ed       	ldi	r19, 0xD0	; 208
    4ee8:	39 0f       	add	r19, r25
    4eea:	3a 30       	cpi	r19, 0x0A	; 10
    4eec:	10 f4       	brcc	.+4      	; 0x4ef2 <decode_port_no+0x4a>
    4eee:	91 11       	cpse	r25, r1
    4ef0:	ee cf       	rjmp	.-36     	; 0x4ece <decode_port_no+0x26>
    4ef2:	fb 01       	movw	r30, r22
    4ef4:	20 83       	st	Z, r18
    4ef6:	08 95       	ret
    4ef8:	80 e0       	ldi	r24, 0x00	; 0
    4efa:	08 95       	ret
    4efc:	80 e0       	ldi	r24, 0x00	; 0
    4efe:	08 95       	ret

00004f00 <decode_hexadecimal_string_bytes>:
    4f00:	0f 93       	push	r16
    4f02:	1f 93       	push	r17
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
    4f08:	dc 01       	movw	r26, r24
    4f0a:	ea 01       	movw	r28, r20
    4f0c:	20 97       	sbiw	r28, 0x00	; 0
    4f0e:	e1 f1       	breq	.+120    	; 0x4f88 <decode_hexadecimal_string_bytes+0x88>
    4f10:	fa 01       	movw	r30, r20
    4f12:	01 90       	ld	r0, Z+
    4f14:	00 20       	and	r0, r0
    4f16:	e9 f7       	brne	.-6      	; 0x4f12 <decode_hexadecimal_string_bytes+0x12>
    4f18:	31 97       	sbiw	r30, 0x01	; 1
    4f1a:	e4 1b       	sub	r30, r20
    4f1c:	f5 0b       	sbc	r31, r21
    4f1e:	32 97       	sbiw	r30, 0x02	; 2
    4f20:	10 f5       	brcc	.+68     	; 0x4f66 <decode_hexadecimal_string_bytes+0x66>
    4f22:	32 c0       	rjmp	.+100    	; 0x4f88 <decode_hexadecimal_string_bytes+0x88>
    4f24:	8d 01       	movw	r16, r26
    4f26:	04 0f       	add	r16, r20
    4f28:	15 1f       	adc	r17, r21
    4f2a:	30 e0       	ldi	r19, 0x00	; 0
    4f2c:	ae 01       	movw	r20, r28
    4f2e:	42 0f       	add	r20, r18
    4f30:	53 1f       	adc	r21, r19
    4f32:	fa 01       	movw	r30, r20
    4f34:	90 81       	ld	r25, Z
    4f36:	91 34       	cpi	r25, 0x41	; 65
    4f38:	28 f0       	brcs	.+10     	; 0x4f44 <decode_hexadecimal_string_bytes+0x44>
    4f3a:	97 53       	subi	r25, 0x37	; 55
    4f3c:	59 2f       	mov	r21, r25
    4f3e:	52 95       	swap	r21
    4f40:	50 7f       	andi	r21, 0xF0	; 240
    4f42:	03 c0       	rjmp	.+6      	; 0x4f4a <decode_hexadecimal_string_bytes+0x4a>
    4f44:	59 2f       	mov	r21, r25
    4f46:	52 95       	swap	r21
    4f48:	50 7f       	andi	r21, 0xF0	; 240
    4f4a:	2c 0f       	add	r18, r28
    4f4c:	3d 1f       	adc	r19, r29
    4f4e:	f9 01       	movw	r30, r18
    4f50:	91 81       	ldd	r25, Z+1	; 0x01
    4f52:	91 34       	cpi	r25, 0x41	; 65
    4f54:	10 f0       	brcs	.+4      	; 0x4f5a <decode_hexadecimal_string_bytes+0x5a>
    4f56:	97 53       	subi	r25, 0x37	; 55
    4f58:	01 c0       	rjmp	.+2      	; 0x4f5c <decode_hexadecimal_string_bytes+0x5c>
    4f5a:	90 53       	subi	r25, 0x30	; 48
    4f5c:	95 0f       	add	r25, r21
    4f5e:	f8 01       	movw	r30, r16
    4f60:	90 83       	st	Z, r25
    4f62:	8f 5f       	subi	r24, 0xFF	; 255
    4f64:	01 c0       	rjmp	.+2      	; 0x4f68 <decode_hexadecimal_string_bytes+0x68>
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	28 2f       	mov	r18, r24
    4f6a:	22 0f       	add	r18, r18
    4f6c:	48 2f       	mov	r20, r24
    4f6e:	50 e0       	ldi	r21, 0x00	; 0
    4f70:	fe 01       	movw	r30, r28
    4f72:	01 90       	ld	r0, Z+
    4f74:	00 20       	and	r0, r0
    4f76:	e9 f7       	brne	.-6      	; 0x4f72 <decode_hexadecimal_string_bytes+0x72>
    4f78:	31 97       	sbiw	r30, 0x01	; 1
    4f7a:	ec 1b       	sub	r30, r28
    4f7c:	fd 0b       	sbc	r31, r29
    4f7e:	4e 17       	cp	r20, r30
    4f80:	5f 07       	cpc	r21, r31
    4f82:	10 f4       	brcc	.+4      	; 0x4f88 <decode_hexadecimal_string_bytes+0x88>
    4f84:	86 13       	cpse	r24, r22
    4f86:	ce cf       	rjmp	.-100    	; 0x4f24 <decode_hexadecimal_string_bytes+0x24>
    4f88:	df 91       	pop	r29
    4f8a:	cf 91       	pop	r28
    4f8c:	1f 91       	pop	r17
    4f8e:	0f 91       	pop	r16
    4f90:	08 95       	ret

00004f92 <_serialCallBack>:
    4f92:	80 91 d3 19 	lds	r24, 0x19D3	; 0x8019d3 <crc_sum.1945>
    4f96:	86 0f       	add	r24, r22
    4f98:	80 93 d3 19 	sts	0x19D3, r24	; 0x8019d3 <crc_sum.1945>
    4f9c:	90 91 d6 19 	lds	r25, 0x19D6	; 0x8019d6 <_mh_state>
    4fa0:	91 30       	cpi	r25, 0x01	; 1
    4fa2:	79 f0       	breq	.+30     	; 0x4fc2 <_serialCallBack+0x30>
    4fa4:	28 f0       	brcs	.+10     	; 0x4fb0 <_serialCallBack+0x1e>
    4fa6:	92 30       	cpi	r25, 0x02	; 2
    4fa8:	a9 f0       	breq	.+42     	; 0x4fd4 <_serialCallBack+0x42>
    4faa:	93 30       	cpi	r25, 0x03	; 3
    4fac:	19 f1       	breq	.+70     	; 0x4ff4 <_serialCallBack+0x62>
    4fae:	08 95       	ret
    4fb0:	6f 3f       	cpi	r22, 0xFF	; 255
    4fb2:	09 f0       	breq	.+2      	; 0x4fb6 <_serialCallBack+0x24>
    4fb4:	48 c0       	rjmp	.+144    	; 0x5046 <_serialCallBack+0xb4>
    4fb6:	10 92 d3 19 	sts	0x19D3, r1	; 0x8019d3 <crc_sum.1945>
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <_mh_state>
    4fc0:	08 95       	ret
    4fc2:	66 38       	cpi	r22, 0x86	; 134
    4fc4:	09 f0       	breq	.+2      	; 0x4fc8 <_serialCallBack+0x36>
    4fc6:	3f c0       	rjmp	.+126    	; 0x5046 <_serialCallBack+0xb4>
    4fc8:	10 92 d2 19 	sts	0x19D2, r1	; 0x8019d2 <inDex.1943>
    4fcc:	82 e0       	ldi	r24, 0x02	; 2
    4fce:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <_mh_state>
    4fd2:	08 95       	ret
    4fd4:	e0 91 d2 19 	lds	r30, 0x19D2	; 0x8019d2 <inDex.1943>
    4fd8:	81 e0       	ldi	r24, 0x01	; 1
    4fda:	8e 0f       	add	r24, r30
    4fdc:	80 93 d2 19 	sts	0x19D2, r24	; 0x8019d2 <inDex.1943>
    4fe0:	f0 e0       	ldi	r31, 0x00	; 0
    4fe2:	e0 53       	subi	r30, 0x30	; 48
    4fe4:	f6 4e       	sbci	r31, 0xE6	; 230
    4fe6:	60 83       	st	Z, r22
    4fe8:	82 30       	cpi	r24, 0x02	; 2
    4fea:	69 f5       	brne	.+90     	; 0x5046 <_serialCallBack+0xb4>
    4fec:	83 e0       	ldi	r24, 0x03	; 3
    4fee:	80 93 d6 19 	sts	0x19D6, r24	; 0x8019d6 <_mh_state>
    4ff2:	08 95       	ret
    4ff4:	90 91 d2 19 	lds	r25, 0x19D2	; 0x8019d2 <inDex.1943>
    4ff8:	21 e0       	ldi	r18, 0x01	; 1
    4ffa:	29 0f       	add	r18, r25
    4ffc:	20 93 d2 19 	sts	0x19D2, r18	; 0x8019d2 <inDex.1943>
    5000:	96 30       	cpi	r25, 0x06	; 6
    5002:	09 f5       	brne	.+66     	; 0x5046 <_serialCallBack+0xb4>
    5004:	81 11       	cpse	r24, r1
    5006:	0e c0       	rjmp	.+28     	; 0x5024 <_serialCallBack+0x92>
    5008:	e0 ed       	ldi	r30, 0xD0	; 208
    500a:	f9 e1       	ldi	r31, 0x19	; 25
    500c:	80 81       	ld	r24, Z
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	98 2f       	mov	r25, r24
    5012:	88 27       	eor	r24, r24
    5014:	21 81       	ldd	r18, Z+1	; 0x01
    5016:	82 0f       	add	r24, r18
    5018:	91 1d       	adc	r25, r1
    501a:	90 93 d8 19 	sts	0x19D8, r25	; 0x8019d8 <_ppm+0x1>
    501e:	80 93 d7 19 	sts	0x19D7, r24	; 0x8019d7 <_ppm>
    5022:	04 c0       	rjmp	.+8      	; 0x502c <_serialCallBack+0x9a>
    5024:	10 92 d8 19 	sts	0x19D8, r1	; 0x8019d8 <_ppm+0x1>
    5028:	10 92 d7 19 	sts	0x19D7, r1	; 0x8019d7 <_ppm>
    502c:	10 92 d6 19 	sts	0x19D6, r1	; 0x8019d6 <_mh_state>
    5030:	e0 91 d4 19 	lds	r30, 0x19D4	; 0x8019d4 <_appCallBack>
    5034:	f0 91 d5 19 	lds	r31, 0x19D5	; 0x8019d5 <_appCallBack+0x1>
    5038:	30 97       	sbiw	r30, 0x00	; 0
    503a:	29 f0       	breq	.+10     	; 0x5046 <_serialCallBack+0xb4>
    503c:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <_ppm>
    5040:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <_ppm+0x1>
    5044:	19 95       	eicall
    5046:	08 95       	ret

00005048 <mh_z19_initialise>:
    5048:	8f 92       	push	r8
    504a:	9f 92       	push	r9
    504c:	af 92       	push	r10
    504e:	cf 92       	push	r12
    5050:	ef 92       	push	r14
    5052:	0f 93       	push	r16
    5054:	0f 2e       	mov	r0, r31
    5056:	f9 ec       	ldi	r31, 0xC9	; 201
    5058:	8f 2e       	mov	r8, r31
    505a:	f7 e2       	ldi	r31, 0x27	; 39
    505c:	9f 2e       	mov	r9, r31
    505e:	f0 2d       	mov	r31, r0
    5060:	68 94       	set
    5062:	aa 24       	eor	r10, r10
    5064:	a4 f8       	bld	r10, 4
    5066:	68 94       	set
    5068:	cc 24       	eor	r12, r12
    506a:	c4 f8       	bld	r12, 4
    506c:	e1 2c       	mov	r14, r1
    506e:	00 e0       	ldi	r16, 0x00	; 0
    5070:	23 e0       	ldi	r18, 0x03	; 3
    5072:	40 e8       	ldi	r20, 0x80	; 128
    5074:	55 e2       	ldi	r21, 0x25	; 37
    5076:	60 e0       	ldi	r22, 0x00	; 0
    5078:	70 e0       	ldi	r23, 0x00	; 0
    507a:	84 d0       	rcall	.+264    	; 0x5184 <serial_create>
    507c:	90 93 da 19 	sts	0x19DA, r25	; 0x8019da <_serial+0x1>
    5080:	80 93 d9 19 	sts	0x19D9, r24	; 0x8019d9 <_serial>
    5084:	0f 91       	pop	r16
    5086:	ef 90       	pop	r14
    5088:	cf 90       	pop	r12
    508a:	af 90       	pop	r10
    508c:	9f 90       	pop	r9
    508e:	8f 90       	pop	r8
    5090:	08 95       	ret

00005092 <mh_z19_injectCallBack>:
    5092:	90 93 d5 19 	sts	0x19D5, r25	; 0x8019d5 <_appCallBack+0x1>
    5096:	80 93 d4 19 	sts	0x19D4, r24	; 0x8019d4 <_appCallBack>
    509a:	08 95       	ret

0000509c <mh_z19_takeMeassuring>:
    509c:	cf 93       	push	r28
    509e:	df 93       	push	r29
    50a0:	cd b7       	in	r28, 0x3d	; 61
    50a2:	de b7       	in	r29, 0x3e	; 62
    50a4:	29 97       	sbiw	r28, 0x09	; 9
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	f8 94       	cli
    50aa:	de bf       	out	0x3e, r29	; 62
    50ac:	0f be       	out	0x3f, r0	; 63
    50ae:	cd bf       	out	0x3d, r28	; 61
    50b0:	89 e0       	ldi	r24, 0x09	; 9
    50b2:	e2 e4       	ldi	r30, 0x42	; 66
    50b4:	f2 e0       	ldi	r31, 0x02	; 2
    50b6:	9e 01       	movw	r18, r28
    50b8:	2f 5f       	subi	r18, 0xFF	; 255
    50ba:	3f 4f       	sbci	r19, 0xFF	; 255
    50bc:	d9 01       	movw	r26, r18
    50be:	01 90       	ld	r0, Z+
    50c0:	0d 92       	st	X+, r0
    50c2:	8a 95       	dec	r24
    50c4:	e1 f7       	brne	.-8      	; 0x50be <mh_z19_takeMeassuring+0x22>
    50c6:	10 92 d8 19 	sts	0x19D8, r1	; 0x8019d8 <_ppm+0x1>
    50ca:	10 92 d7 19 	sts	0x19D7, r1	; 0x8019d7 <_ppm>
    50ce:	80 91 d9 19 	lds	r24, 0x19D9	; 0x8019d9 <_serial>
    50d2:	90 91 da 19 	lds	r25, 0x19DA	; 0x8019da <_serial+0x1>
    50d6:	00 97       	sbiw	r24, 0x00	; 0
    50d8:	31 f0       	breq	.+12     	; 0x50e6 <mh_z19_takeMeassuring+0x4a>
    50da:	42 2f       	mov	r20, r18
    50dc:	53 2f       	mov	r21, r19
    50de:	69 e0       	ldi	r22, 0x09	; 9
    50e0:	24 d1       	rcall	.+584    	; 0x532a <serial_sendBytes>
    50e2:	80 e0       	ldi	r24, 0x00	; 0
    50e4:	01 c0       	rjmp	.+2      	; 0x50e8 <mh_z19_takeMeassuring+0x4c>
    50e6:	82 e0       	ldi	r24, 0x02	; 2
    50e8:	29 96       	adiw	r28, 0x09	; 9
    50ea:	0f b6       	in	r0, 0x3f	; 63
    50ec:	f8 94       	cli
    50ee:	de bf       	out	0x3e, r29	; 62
    50f0:	0f be       	out	0x3f, r0	; 63
    50f2:	cd bf       	out	0x3d, r28	; 61
    50f4:	df 91       	pop	r29
    50f6:	cf 91       	pop	r28
    50f8:	08 95       	ret

000050fa <mh_z19_getCo2Ppm>:
    50fa:	20 91 d7 19 	lds	r18, 0x19D7	; 0x8019d7 <_ppm>
    50fe:	30 91 d8 19 	lds	r19, 0x19D8	; 0x8019d8 <_ppm+0x1>
    5102:	21 15       	cp	r18, r1
    5104:	31 05       	cpc	r19, r1
    5106:	29 f4       	brne	.+10     	; 0x5112 <mh_z19_getCo2Ppm+0x18>
    5108:	fc 01       	movw	r30, r24
    510a:	11 82       	std	Z+1, r1	; 0x01
    510c:	10 82       	st	Z, r1
    510e:	81 e0       	ldi	r24, 0x01	; 1
    5110:	08 95       	ret
    5112:	fc 01       	movw	r30, r24
    5114:	31 83       	std	Z+1, r19	; 0x01
    5116:	20 83       	st	Z, r18
    5118:	80 e0       	ldi	r24, 0x00	; 0
    511a:	08 95       	ret

0000511c <rc_servo_setPosition>:
    511c:	65 36       	cpi	r22, 0x65	; 101
    511e:	0c f0       	brlt	.+2      	; 0x5122 <rc_servo_setPosition+0x6>
    5120:	64 e6       	ldi	r22, 0x64	; 100
    5122:	6c 39       	cpi	r22, 0x9C	; 156
    5124:	0c f4       	brge	.+2      	; 0x5128 <rc_servo_setPosition+0xc>
    5126:	6c e9       	ldi	r22, 0x9C	; 156
    5128:	96 ef       	ldi	r25, 0xF6	; 246
    512a:	69 02       	muls	r22, r25
    512c:	b0 01       	movw	r22, r0
    512e:	11 24       	eor	r1, r1
    5130:	68 54       	subi	r22, 0x48	; 72
    5132:	74 4f       	sbci	r23, 0xF4	; 244
    5134:	81 11       	cpse	r24, r1
    5136:	05 c0       	rjmp	.+10     	; 0x5142 <rc_servo_setPosition+0x26>
    5138:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    513c:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    5140:	08 95       	ret
    5142:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    5146:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    514a:	08 95       	ret

0000514c <rc_servo_initialise>:
    514c:	ea e0       	ldi	r30, 0x0A	; 10
    514e:	f1 e0       	ldi	r31, 0x01	; 1
    5150:	80 81       	ld	r24, Z
    5152:	88 61       	ori	r24, 0x18	; 24
    5154:	80 83       	st	Z, r24
    5156:	8f e3       	ldi	r24, 0x3F	; 63
    5158:	9c e9       	ldi	r25, 0x9C	; 156
    515a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    515e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    5162:	60 e0       	ldi	r22, 0x00	; 0
    5164:	80 e0       	ldi	r24, 0x00	; 0
    5166:	da df       	rcall	.-76     	; 0x511c <rc_servo_setPosition>
    5168:	60 e0       	ldi	r22, 0x00	; 0
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	d7 df       	rcall	.-82     	; 0x511c <rc_servo_setPosition>
    516e:	e0 e2       	ldi	r30, 0x20	; 32
    5170:	f1 e0       	ldi	r31, 0x01	; 1
    5172:	80 81       	ld	r24, Z
    5174:	82 6a       	ori	r24, 0xA2	; 162
    5176:	80 83       	st	Z, r24
    5178:	e1 e2       	ldi	r30, 0x21	; 33
    517a:	f1 e0       	ldi	r31, 0x01	; 1
    517c:	80 81       	ld	r24, Z
    517e:	8a 61       	ori	r24, 0x1A	; 26
    5180:	80 83       	st	Z, r24
    5182:	08 95       	ret

00005184 <serial_create>:
    5184:	2f 92       	push	r2
    5186:	3f 92       	push	r3
    5188:	4f 92       	push	r4
    518a:	5f 92       	push	r5
    518c:	6f 92       	push	r6
    518e:	7f 92       	push	r7
    5190:	8f 92       	push	r8
    5192:	9f 92       	push	r9
    5194:	af 92       	push	r10
    5196:	cf 92       	push	r12
    5198:	ef 92       	push	r14
    519a:	ff 92       	push	r15
    519c:	0f 93       	push	r16
    519e:	1f 93       	push	r17
    51a0:	cf 93       	push	r28
    51a2:	df 93       	push	r29
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
    51a8:	f8 2e       	mov	r15, r24
    51aa:	2a 01       	movw	r4, r20
    51ac:	3b 01       	movw	r6, r22
    51ae:	88 e0       	ldi	r24, 0x08	; 8
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	0e 94 91 37 	call	0x6f22	; 0x6f22 <malloc>
    51b6:	8c 01       	movw	r16, r24
    51b8:	8f 2d       	mov	r24, r15
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	fc 01       	movw	r30, r24
    51be:	ee 0f       	add	r30, r30
    51c0:	ff 1f       	adc	r31, r31
    51c2:	e5 52       	subi	r30, 0x25	; 37
    51c4:	f6 4e       	sbci	r31, 0xE6	; 230
    51c6:	11 83       	std	Z+1, r17	; 0x01
    51c8:	00 83       	st	Z, r16
    51ca:	01 15       	cp	r16, r1
    51cc:	11 05       	cpc	r17, r1
    51ce:	09 f4       	brne	.+2      	; 0x51d2 <serial_create+0x4e>
    51d0:	6f c0       	rjmp	.+222    	; 0x52b0 <serial_create+0x12c>
    51d2:	88 0f       	add	r24, r24
    51d4:	99 1f       	adc	r25, r25
    51d6:	fc 01       	movw	r30, r24
    51d8:	e5 5f       	subi	r30, 0xF5	; 245
    51da:	fd 4f       	sbci	r31, 0xFD	; 253
    51dc:	80 81       	ld	r24, Z
    51de:	91 81       	ldd	r25, Z+1	; 0x01
    51e0:	d8 01       	movw	r26, r16
    51e2:	8d 93       	st	X+, r24
    51e4:	9c 93       	st	X, r25
    51e6:	8c 2d       	mov	r24, r12
    51e8:	90 e0       	ldi	r25, 0x00	; 0
    51ea:	88 0f       	add	r24, r24
    51ec:	99 1f       	adc	r25, r25
    51ee:	88 0f       	add	r24, r24
    51f0:	99 1f       	adc	r25, r25
    51f2:	0e 94 91 37 	call	0x6f22	; 0x6f22 <malloc>
    51f6:	1c 01       	movw	r2, r24
    51f8:	86 e0       	ldi	r24, 0x06	; 6
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	0e 94 91 37 	call	0x6f22	; 0x6f22 <malloc>
    5200:	7c 01       	movw	r14, r24
    5202:	4c 2d       	mov	r20, r12
    5204:	b1 01       	movw	r22, r2
    5206:	0e 94 74 31 	call	0x62e8	; 0x62e8 <fifo_init>
    520a:	f8 01       	movw	r30, r16
    520c:	f5 82       	std	Z+5, r15	; 0x05
    520e:	e4 82       	std	Z+4, r14	; 0x04
    5210:	8a 2d       	mov	r24, r10
    5212:	90 e0       	ldi	r25, 0x00	; 0
    5214:	88 0f       	add	r24, r24
    5216:	99 1f       	adc	r25, r25
    5218:	88 0f       	add	r24, r24
    521a:	99 1f       	adc	r25, r25
    521c:	0e 94 91 37 	call	0x6f22	; 0x6f22 <malloc>
    5220:	1c 01       	movw	r2, r24
    5222:	86 e0       	ldi	r24, 0x06	; 6
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	0e 94 91 37 	call	0x6f22	; 0x6f22 <malloc>
    522a:	7c 01       	movw	r14, r24
    522c:	4a 2d       	mov	r20, r10
    522e:	b1 01       	movw	r22, r2
    5230:	0e 94 74 31 	call	0x62e8	; 0x62e8 <fifo_init>
    5234:	d8 01       	movw	r26, r16
    5236:	13 96       	adiw	r26, 0x03	; 3
    5238:	fc 92       	st	X, r15
    523a:	ee 92       	st	-X, r14
    523c:	12 97       	sbiw	r26, 0x02	; 2
    523e:	17 96       	adiw	r26, 0x07	; 7
    5240:	9c 92       	st	X, r9
    5242:	8e 92       	st	-X, r8
    5244:	16 97       	sbiw	r26, 0x06	; 6
    5246:	ff b6       	in	r15, 0x3f	; 63
    5248:	f8 94       	cli
    524a:	ed 91       	ld	r30, X+
    524c:	fc 91       	ld	r31, X
    524e:	11 97       	sbiw	r26, 0x01	; 1
    5250:	36 97       	sbiw	r30, 0x06	; 6
    5252:	80 81       	ld	r24, Z
    5254:	82 60       	ori	r24, 0x02	; 2
    5256:	80 83       	st	Z, r24
    5258:	8d 90       	ld	r8, X+
    525a:	9c 90       	ld	r9, X
    525c:	c3 01       	movw	r24, r6
    525e:	b2 01       	movw	r22, r4
    5260:	0e 94 18 36 	call	0x6c30	; 0x6c30 <__floatunsisf>
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	40 e0       	ldi	r20, 0x00	; 0
    526a:	51 e4       	ldi	r21, 0x41	; 65
    526c:	0e 94 aa 36 	call	0x6d54	; 0x6d54 <__mulsf3>
    5270:	9b 01       	movw	r18, r22
    5272:	ac 01       	movw	r20, r24
    5274:	60 e0       	ldi	r22, 0x00	; 0
    5276:	74 e2       	ldi	r23, 0x24	; 36
    5278:	84 e7       	ldi	r24, 0x74	; 116
    527a:	9b e4       	ldi	r25, 0x4B	; 75
    527c:	0e 94 7f 35 	call	0x6afe	; 0x6afe <__divsf3>
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	40 e8       	ldi	r20, 0x80	; 128
    5286:	5f e3       	ldi	r21, 0x3F	; 63
    5288:	0e 94 1a 35 	call	0x6a34	; 0x6a34 <__subsf3>
    528c:	0e 94 ec 35 	call	0x6bd8	; 0x6bd8 <__fixunssfsi>
    5290:	f4 01       	movw	r30, r8
    5292:	32 97       	sbiw	r30, 0x02	; 2
    5294:	60 83       	st	Z, r22
    5296:	d8 01       	movw	r26, r16
    5298:	ed 91       	ld	r30, X+
    529a:	fc 91       	ld	r31, X
    529c:	11 97       	sbiw	r26, 0x01	; 1
    529e:	35 97       	sbiw	r30, 0x05	; 5
    52a0:	88 e9       	ldi	r24, 0x98	; 152
    52a2:	80 83       	st	Z, r24
    52a4:	ed 91       	ld	r30, X+
    52a6:	fc 91       	ld	r31, X
    52a8:	34 97       	sbiw	r30, 0x04	; 4
    52aa:	86 e0       	ldi	r24, 0x06	; 6
    52ac:	80 83       	st	Z, r24
    52ae:	ff be       	out	0x3f, r15	; 63
    52b0:	c8 01       	movw	r24, r16
    52b2:	df 91       	pop	r29
    52b4:	cf 91       	pop	r28
    52b6:	1f 91       	pop	r17
    52b8:	0f 91       	pop	r16
    52ba:	ff 90       	pop	r15
    52bc:	ef 90       	pop	r14
    52be:	cf 90       	pop	r12
    52c0:	af 90       	pop	r10
    52c2:	9f 90       	pop	r9
    52c4:	8f 90       	pop	r8
    52c6:	7f 90       	pop	r7
    52c8:	6f 90       	pop	r6
    52ca:	5f 90       	pop	r5
    52cc:	4f 90       	pop	r4
    52ce:	3f 90       	pop	r3
    52d0:	2f 90       	pop	r2
    52d2:	08 95       	ret

000052d4 <serial_sendByte>:
    52d4:	cf 93       	push	r28
    52d6:	df 93       	push	r29
    52d8:	dc 01       	movw	r26, r24
    52da:	89 2b       	or	r24, r25
    52dc:	01 f1       	breq	.+64     	; 0x531e <serial_sendByte+0x4a>
    52de:	12 96       	adiw	r26, 0x02	; 2
    52e0:	ed 91       	ld	r30, X+
    52e2:	fc 91       	ld	r31, X
    52e4:	13 97       	sbiw	r26, 0x03	; 3
    52e6:	93 81       	ldd	r25, Z+3	; 0x03
    52e8:	82 81       	ldd	r24, Z+2	; 0x02
    52ea:	25 81       	ldd	r18, Z+5	; 0x05
    52ec:	98 1b       	sub	r25, r24
    52ee:	92 23       	and	r25, r18
    52f0:	84 81       	ldd	r24, Z+4	; 0x04
    52f2:	98 17       	cp	r25, r24
    52f4:	b1 f0       	breq	.+44     	; 0x5322 <serial_sendByte+0x4e>
    52f6:	83 81       	ldd	r24, Z+3	; 0x03
    52f8:	26 95       	lsr	r18
    52fa:	28 23       	and	r18, r24
    52fc:	c0 81       	ld	r28, Z
    52fe:	d1 81       	ldd	r29, Z+1	; 0x01
    5300:	c2 0f       	add	r28, r18
    5302:	d1 1d       	adc	r29, r1
    5304:	68 83       	st	Y, r22
    5306:	8f 5f       	subi	r24, 0xFF	; 255
    5308:	95 81       	ldd	r25, Z+5	; 0x05
    530a:	89 23       	and	r24, r25
    530c:	83 83       	std	Z+3, r24	; 0x03
    530e:	ed 91       	ld	r30, X+
    5310:	fc 91       	ld	r31, X
    5312:	35 97       	sbiw	r30, 0x05	; 5
    5314:	80 81       	ld	r24, Z
    5316:	80 62       	ori	r24, 0x20	; 32
    5318:	80 83       	st	Z, r24
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	03 c0       	rjmp	.+6      	; 0x5324 <serial_sendByte+0x50>
    531e:	81 e0       	ldi	r24, 0x01	; 1
    5320:	01 c0       	rjmp	.+2      	; 0x5324 <serial_sendByte+0x50>
    5322:	82 e0       	ldi	r24, 0x02	; 2
    5324:	df 91       	pop	r29
    5326:	cf 91       	pop	r28
    5328:	08 95       	ret

0000532a <serial_sendBytes>:
    532a:	ef 92       	push	r14
    532c:	ff 92       	push	r15
    532e:	0f 93       	push	r16
    5330:	1f 93       	push	r17
    5332:	cf 93       	push	r28
    5334:	df 93       	push	r29
    5336:	7c 01       	movw	r14, r24
    5338:	00 97       	sbiw	r24, 0x00	; 0
    533a:	09 f4       	brne	.+2      	; 0x533e <serial_sendBytes+0x14>
    533c:	41 c0       	rjmp	.+130    	; 0x53c0 <serial_sendBytes+0x96>
    533e:	dc 01       	movw	r26, r24
    5340:	12 96       	adiw	r26, 0x02	; 2
    5342:	ed 91       	ld	r30, X+
    5344:	fc 91       	ld	r31, X
    5346:	13 97       	sbiw	r26, 0x03	; 3
    5348:	93 81       	ldd	r25, Z+3	; 0x03
    534a:	82 81       	ldd	r24, Z+2	; 0x02
    534c:	98 1b       	sub	r25, r24
    534e:	85 81       	ldd	r24, Z+5	; 0x05
    5350:	98 23       	and	r25, r24
    5352:	84 81       	ldd	r24, Z+4	; 0x04
    5354:	89 1b       	sub	r24, r25
    5356:	86 17       	cp	r24, r22
    5358:	a8 f1       	brcs	.+106    	; 0x53c4 <serial_sendBytes+0x9a>
    535a:	66 23       	and	r22, r22
    535c:	41 f1       	breq	.+80     	; 0x53ae <serial_sendBytes+0x84>
    535e:	84 2f       	mov	r24, r20
    5360:	95 2f       	mov	r25, r21
    5362:	dc 01       	movw	r26, r24
    5364:	61 50       	subi	r22, 0x01	; 1
    5366:	46 2f       	mov	r20, r22
    5368:	50 e0       	ldi	r21, 0x00	; 0
    536a:	4f 5f       	subi	r20, 0xFF	; 255
    536c:	5f 4f       	sbci	r21, 0xFF	; 255
    536e:	48 0f       	add	r20, r24
    5370:	59 1f       	adc	r21, r25
    5372:	e7 01       	movw	r28, r14
    5374:	ea 81       	ldd	r30, Y+2	; 0x02
    5376:	fb 81       	ldd	r31, Y+3	; 0x03
    5378:	93 81       	ldd	r25, Z+3	; 0x03
    537a:	82 81       	ldd	r24, Z+2	; 0x02
    537c:	25 81       	ldd	r18, Z+5	; 0x05
    537e:	98 1b       	sub	r25, r24
    5380:	92 23       	and	r25, r18
    5382:	84 81       	ldd	r24, Z+4	; 0x04
    5384:	98 17       	cp	r25, r24
    5386:	79 f0       	breq	.+30     	; 0x53a6 <serial_sendBytes+0x7c>
    5388:	8c 91       	ld	r24, X
    538a:	93 81       	ldd	r25, Z+3	; 0x03
    538c:	26 95       	lsr	r18
    538e:	29 23       	and	r18, r25
    5390:	60 81       	ld	r22, Z
    5392:	71 81       	ldd	r23, Z+1	; 0x01
    5394:	8b 01       	movw	r16, r22
    5396:	02 0f       	add	r16, r18
    5398:	11 1d       	adc	r17, r1
    539a:	e8 01       	movw	r28, r16
    539c:	88 83       	st	Y, r24
    539e:	9f 5f       	subi	r25, 0xFF	; 255
    53a0:	85 81       	ldd	r24, Z+5	; 0x05
    53a2:	98 23       	and	r25, r24
    53a4:	93 83       	std	Z+3, r25	; 0x03
    53a6:	11 96       	adiw	r26, 0x01	; 1
    53a8:	a4 17       	cp	r26, r20
    53aa:	b5 07       	cpc	r27, r21
    53ac:	11 f7       	brne	.-60     	; 0x5372 <serial_sendBytes+0x48>
    53ae:	d7 01       	movw	r26, r14
    53b0:	ed 91       	ld	r30, X+
    53b2:	fc 91       	ld	r31, X
    53b4:	35 97       	sbiw	r30, 0x05	; 5
    53b6:	80 81       	ld	r24, Z
    53b8:	80 62       	ori	r24, 0x20	; 32
    53ba:	80 83       	st	Z, r24
    53bc:	80 e0       	ldi	r24, 0x00	; 0
    53be:	03 c0       	rjmp	.+6      	; 0x53c6 <serial_sendBytes+0x9c>
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	01 c0       	rjmp	.+2      	; 0x53c6 <serial_sendBytes+0x9c>
    53c4:	82 e0       	ldi	r24, 0x02	; 2
    53c6:	df 91       	pop	r29
    53c8:	cf 91       	pop	r28
    53ca:	1f 91       	pop	r17
    53cc:	0f 91       	pop	r16
    53ce:	ff 90       	pop	r15
    53d0:	ef 90       	pop	r14
    53d2:	08 95       	ret

000053d4 <serial_getByte>:
    53d4:	00 97       	sbiw	r24, 0x00	; 0
    53d6:	d1 f0       	breq	.+52     	; 0x540c <serial_getByte+0x38>
    53d8:	dc 01       	movw	r26, r24
    53da:	14 96       	adiw	r26, 0x04	; 4
    53dc:	ed 91       	ld	r30, X+
    53de:	fc 91       	ld	r31, X
    53e0:	15 97       	sbiw	r26, 0x05	; 5
    53e2:	93 81       	ldd	r25, Z+3	; 0x03
    53e4:	82 81       	ldd	r24, Z+2	; 0x02
    53e6:	98 17       	cp	r25, r24
    53e8:	99 f0       	breq	.+38     	; 0x5410 <serial_getByte+0x3c>
    53ea:	92 81       	ldd	r25, Z+2	; 0x02
    53ec:	85 81       	ldd	r24, Z+5	; 0x05
    53ee:	86 95       	lsr	r24
    53f0:	89 23       	and	r24, r25
    53f2:	a0 81       	ld	r26, Z
    53f4:	b1 81       	ldd	r27, Z+1	; 0x01
    53f6:	a8 0f       	add	r26, r24
    53f8:	b1 1d       	adc	r27, r1
    53fa:	8c 91       	ld	r24, X
    53fc:	db 01       	movw	r26, r22
    53fe:	8c 93       	st	X, r24
    5400:	9f 5f       	subi	r25, 0xFF	; 255
    5402:	85 81       	ldd	r24, Z+5	; 0x05
    5404:	98 23       	and	r25, r24
    5406:	92 83       	std	Z+2, r25	; 0x02
    5408:	80 e0       	ldi	r24, 0x00	; 0
    540a:	08 95       	ret
    540c:	81 e0       	ldi	r24, 0x01	; 1
    540e:	08 95       	ret
    5410:	83 e0       	ldi	r24, 0x03	; 3
    5412:	08 95       	ret

00005414 <__vector_25>:
    5414:	1f 92       	push	r1
    5416:	0f 92       	push	r0
    5418:	0f b6       	in	r0, 0x3f	; 63
    541a:	0f 92       	push	r0
    541c:	11 24       	eor	r1, r1
    541e:	0b b6       	in	r0, 0x3b	; 59
    5420:	0f 92       	push	r0
    5422:	2f 93       	push	r18
    5424:	3f 93       	push	r19
    5426:	4f 93       	push	r20
    5428:	5f 93       	push	r21
    542a:	6f 93       	push	r22
    542c:	7f 93       	push	r23
    542e:	8f 93       	push	r24
    5430:	9f 93       	push	r25
    5432:	af 93       	push	r26
    5434:	bf 93       	push	r27
    5436:	cf 93       	push	r28
    5438:	df 93       	push	r29
    543a:	ef 93       	push	r30
    543c:	ff 93       	push	r31
    543e:	a0 91 db 19 	lds	r26, 0x19DB	; 0x8019db <_ser_handle>
    5442:	b0 91 dc 19 	lds	r27, 0x19DC	; 0x8019dc <_ser_handle+0x1>
    5446:	10 97       	sbiw	r26, 0x00	; 0
    5448:	11 f1       	breq	.+68     	; 0x548e <__vector_25+0x7a>
    544a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    544e:	14 96       	adiw	r26, 0x04	; 4
    5450:	ed 91       	ld	r30, X+
    5452:	fc 91       	ld	r31, X
    5454:	15 97       	sbiw	r26, 0x05	; 5
    5456:	93 81       	ldd	r25, Z+3	; 0x03
    5458:	82 81       	ldd	r24, Z+2	; 0x02
    545a:	25 81       	ldd	r18, Z+5	; 0x05
    545c:	98 1b       	sub	r25, r24
    545e:	92 23       	and	r25, r18
    5460:	84 81       	ldd	r24, Z+4	; 0x04
    5462:	98 17       	cp	r25, r24
    5464:	61 f0       	breq	.+24     	; 0x547e <__vector_25+0x6a>
    5466:	83 81       	ldd	r24, Z+3	; 0x03
    5468:	26 95       	lsr	r18
    546a:	28 23       	and	r18, r24
    546c:	c0 81       	ld	r28, Z
    546e:	d1 81       	ldd	r29, Z+1	; 0x01
    5470:	c2 0f       	add	r28, r18
    5472:	d1 1d       	adc	r29, r1
    5474:	68 83       	st	Y, r22
    5476:	8f 5f       	subi	r24, 0xFF	; 255
    5478:	95 81       	ldd	r25, Z+5	; 0x05
    547a:	89 23       	and	r24, r25
    547c:	83 83       	std	Z+3, r24	; 0x03
    547e:	16 96       	adiw	r26, 0x06	; 6
    5480:	ed 91       	ld	r30, X+
    5482:	fc 91       	ld	r31, X
    5484:	17 97       	sbiw	r26, 0x07	; 7
    5486:	30 97       	sbiw	r30, 0x00	; 0
    5488:	11 f0       	breq	.+4      	; 0x548e <__vector_25+0x7a>
    548a:	cd 01       	movw	r24, r26
    548c:	19 95       	eicall
    548e:	ff 91       	pop	r31
    5490:	ef 91       	pop	r30
    5492:	df 91       	pop	r29
    5494:	cf 91       	pop	r28
    5496:	bf 91       	pop	r27
    5498:	af 91       	pop	r26
    549a:	9f 91       	pop	r25
    549c:	8f 91       	pop	r24
    549e:	7f 91       	pop	r23
    54a0:	6f 91       	pop	r22
    54a2:	5f 91       	pop	r21
    54a4:	4f 91       	pop	r20
    54a6:	3f 91       	pop	r19
    54a8:	2f 91       	pop	r18
    54aa:	0f 90       	pop	r0
    54ac:	0b be       	out	0x3b, r0	; 59
    54ae:	0f 90       	pop	r0
    54b0:	0f be       	out	0x3f, r0	; 63
    54b2:	0f 90       	pop	r0
    54b4:	1f 90       	pop	r1
    54b6:	18 95       	reti

000054b8 <__vector_26>:
    54b8:	1f 92       	push	r1
    54ba:	0f 92       	push	r0
    54bc:	0f b6       	in	r0, 0x3f	; 63
    54be:	0f 92       	push	r0
    54c0:	11 24       	eor	r1, r1
    54c2:	0b b6       	in	r0, 0x3b	; 59
    54c4:	0f 92       	push	r0
    54c6:	2f 93       	push	r18
    54c8:	8f 93       	push	r24
    54ca:	9f 93       	push	r25
    54cc:	af 93       	push	r26
    54ce:	bf 93       	push	r27
    54d0:	ef 93       	push	r30
    54d2:	ff 93       	push	r31
    54d4:	e0 91 db 19 	lds	r30, 0x19DB	; 0x8019db <_ser_handle>
    54d8:	f0 91 dc 19 	lds	r31, 0x19DC	; 0x8019dc <_ser_handle+0x1>
    54dc:	30 97       	sbiw	r30, 0x00	; 0
    54de:	b9 f0       	breq	.+46     	; 0x550e <__vector_26+0x56>
    54e0:	02 80       	ldd	r0, Z+2	; 0x02
    54e2:	f3 81       	ldd	r31, Z+3	; 0x03
    54e4:	e0 2d       	mov	r30, r0
    54e6:	93 81       	ldd	r25, Z+3	; 0x03
    54e8:	82 81       	ldd	r24, Z+2	; 0x02
    54ea:	98 17       	cp	r25, r24
    54ec:	b1 f0       	breq	.+44     	; 0x551a <__vector_26+0x62>
    54ee:	92 81       	ldd	r25, Z+2	; 0x02
    54f0:	85 81       	ldd	r24, Z+5	; 0x05
    54f2:	28 2f       	mov	r18, r24
    54f4:	26 95       	lsr	r18
    54f6:	29 23       	and	r18, r25
    54f8:	a0 81       	ld	r26, Z
    54fa:	b1 81       	ldd	r27, Z+1	; 0x01
    54fc:	a2 0f       	add	r26, r18
    54fe:	b1 1d       	adc	r27, r1
    5500:	2c 91       	ld	r18, X
    5502:	9f 5f       	subi	r25, 0xFF	; 255
    5504:	89 23       	and	r24, r25
    5506:	82 83       	std	Z+2, r24	; 0x02
    5508:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    550c:	0b c0       	rjmp	.+22     	; 0x5524 <__vector_26+0x6c>
    550e:	e1 ec       	ldi	r30, 0xC1	; 193
    5510:	f0 e0       	ldi	r31, 0x00	; 0
    5512:	80 81       	ld	r24, Z
    5514:	8f 7d       	andi	r24, 0xDF	; 223
    5516:	80 83       	st	Z, r24
    5518:	05 c0       	rjmp	.+10     	; 0x5524 <__vector_26+0x6c>
    551a:	e1 ec       	ldi	r30, 0xC1	; 193
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	80 81       	ld	r24, Z
    5520:	8f 7d       	andi	r24, 0xDF	; 223
    5522:	80 83       	st	Z, r24
    5524:	ff 91       	pop	r31
    5526:	ef 91       	pop	r30
    5528:	bf 91       	pop	r27
    552a:	af 91       	pop	r26
    552c:	9f 91       	pop	r25
    552e:	8f 91       	pop	r24
    5530:	2f 91       	pop	r18
    5532:	0f 90       	pop	r0
    5534:	0b be       	out	0x3b, r0	; 59
    5536:	0f 90       	pop	r0
    5538:	0f be       	out	0x3f, r0	; 63
    553a:	0f 90       	pop	r0
    553c:	1f 90       	pop	r1
    553e:	18 95       	reti

00005540 <__vector_36>:
    5540:	1f 92       	push	r1
    5542:	0f 92       	push	r0
    5544:	0f b6       	in	r0, 0x3f	; 63
    5546:	0f 92       	push	r0
    5548:	11 24       	eor	r1, r1
    554a:	0b b6       	in	r0, 0x3b	; 59
    554c:	0f 92       	push	r0
    554e:	2f 93       	push	r18
    5550:	3f 93       	push	r19
    5552:	4f 93       	push	r20
    5554:	5f 93       	push	r21
    5556:	6f 93       	push	r22
    5558:	7f 93       	push	r23
    555a:	8f 93       	push	r24
    555c:	9f 93       	push	r25
    555e:	af 93       	push	r26
    5560:	bf 93       	push	r27
    5562:	cf 93       	push	r28
    5564:	df 93       	push	r29
    5566:	ef 93       	push	r30
    5568:	ff 93       	push	r31
    556a:	a0 91 dd 19 	lds	r26, 0x19DD	; 0x8019dd <_ser_handle+0x2>
    556e:	b0 91 de 19 	lds	r27, 0x19DE	; 0x8019de <_ser_handle+0x3>
    5572:	10 97       	sbiw	r26, 0x00	; 0
    5574:	11 f1       	breq	.+68     	; 0x55ba <__vector_36+0x7a>
    5576:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    557a:	14 96       	adiw	r26, 0x04	; 4
    557c:	ed 91       	ld	r30, X+
    557e:	fc 91       	ld	r31, X
    5580:	15 97       	sbiw	r26, 0x05	; 5
    5582:	93 81       	ldd	r25, Z+3	; 0x03
    5584:	82 81       	ldd	r24, Z+2	; 0x02
    5586:	25 81       	ldd	r18, Z+5	; 0x05
    5588:	98 1b       	sub	r25, r24
    558a:	92 23       	and	r25, r18
    558c:	84 81       	ldd	r24, Z+4	; 0x04
    558e:	98 17       	cp	r25, r24
    5590:	61 f0       	breq	.+24     	; 0x55aa <__vector_36+0x6a>
    5592:	83 81       	ldd	r24, Z+3	; 0x03
    5594:	26 95       	lsr	r18
    5596:	28 23       	and	r18, r24
    5598:	c0 81       	ld	r28, Z
    559a:	d1 81       	ldd	r29, Z+1	; 0x01
    559c:	c2 0f       	add	r28, r18
    559e:	d1 1d       	adc	r29, r1
    55a0:	68 83       	st	Y, r22
    55a2:	8f 5f       	subi	r24, 0xFF	; 255
    55a4:	95 81       	ldd	r25, Z+5	; 0x05
    55a6:	89 23       	and	r24, r25
    55a8:	83 83       	std	Z+3, r24	; 0x03
    55aa:	16 96       	adiw	r26, 0x06	; 6
    55ac:	ed 91       	ld	r30, X+
    55ae:	fc 91       	ld	r31, X
    55b0:	17 97       	sbiw	r26, 0x07	; 7
    55b2:	30 97       	sbiw	r30, 0x00	; 0
    55b4:	11 f0       	breq	.+4      	; 0x55ba <__vector_36+0x7a>
    55b6:	cd 01       	movw	r24, r26
    55b8:	19 95       	eicall
    55ba:	ff 91       	pop	r31
    55bc:	ef 91       	pop	r30
    55be:	df 91       	pop	r29
    55c0:	cf 91       	pop	r28
    55c2:	bf 91       	pop	r27
    55c4:	af 91       	pop	r26
    55c6:	9f 91       	pop	r25
    55c8:	8f 91       	pop	r24
    55ca:	7f 91       	pop	r23
    55cc:	6f 91       	pop	r22
    55ce:	5f 91       	pop	r21
    55d0:	4f 91       	pop	r20
    55d2:	3f 91       	pop	r19
    55d4:	2f 91       	pop	r18
    55d6:	0f 90       	pop	r0
    55d8:	0b be       	out	0x3b, r0	; 59
    55da:	0f 90       	pop	r0
    55dc:	0f be       	out	0x3f, r0	; 63
    55de:	0f 90       	pop	r0
    55e0:	1f 90       	pop	r1
    55e2:	18 95       	reti

000055e4 <__vector_37>:
    55e4:	1f 92       	push	r1
    55e6:	0f 92       	push	r0
    55e8:	0f b6       	in	r0, 0x3f	; 63
    55ea:	0f 92       	push	r0
    55ec:	11 24       	eor	r1, r1
    55ee:	0b b6       	in	r0, 0x3b	; 59
    55f0:	0f 92       	push	r0
    55f2:	2f 93       	push	r18
    55f4:	8f 93       	push	r24
    55f6:	9f 93       	push	r25
    55f8:	af 93       	push	r26
    55fa:	bf 93       	push	r27
    55fc:	ef 93       	push	r30
    55fe:	ff 93       	push	r31
    5600:	e0 91 dd 19 	lds	r30, 0x19DD	; 0x8019dd <_ser_handle+0x2>
    5604:	f0 91 de 19 	lds	r31, 0x19DE	; 0x8019de <_ser_handle+0x3>
    5608:	30 97       	sbiw	r30, 0x00	; 0
    560a:	b9 f0       	breq	.+46     	; 0x563a <__vector_37+0x56>
    560c:	02 80       	ldd	r0, Z+2	; 0x02
    560e:	f3 81       	ldd	r31, Z+3	; 0x03
    5610:	e0 2d       	mov	r30, r0
    5612:	93 81       	ldd	r25, Z+3	; 0x03
    5614:	82 81       	ldd	r24, Z+2	; 0x02
    5616:	98 17       	cp	r25, r24
    5618:	b1 f0       	breq	.+44     	; 0x5646 <__vector_37+0x62>
    561a:	92 81       	ldd	r25, Z+2	; 0x02
    561c:	85 81       	ldd	r24, Z+5	; 0x05
    561e:	28 2f       	mov	r18, r24
    5620:	26 95       	lsr	r18
    5622:	29 23       	and	r18, r25
    5624:	a0 81       	ld	r26, Z
    5626:	b1 81       	ldd	r27, Z+1	; 0x01
    5628:	a2 0f       	add	r26, r18
    562a:	b1 1d       	adc	r27, r1
    562c:	2c 91       	ld	r18, X
    562e:	9f 5f       	subi	r25, 0xFF	; 255
    5630:	89 23       	and	r24, r25
    5632:	82 83       	std	Z+2, r24	; 0x02
    5634:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5638:	0b c0       	rjmp	.+22     	; 0x5650 <__vector_37+0x6c>
    563a:	e9 ec       	ldi	r30, 0xC9	; 201
    563c:	f0 e0       	ldi	r31, 0x00	; 0
    563e:	80 81       	ld	r24, Z
    5640:	8f 7d       	andi	r24, 0xDF	; 223
    5642:	80 83       	st	Z, r24
    5644:	05 c0       	rjmp	.+10     	; 0x5650 <__vector_37+0x6c>
    5646:	e9 ec       	ldi	r30, 0xC9	; 201
    5648:	f0 e0       	ldi	r31, 0x00	; 0
    564a:	80 81       	ld	r24, Z
    564c:	8f 7d       	andi	r24, 0xDF	; 223
    564e:	80 83       	st	Z, r24
    5650:	ff 91       	pop	r31
    5652:	ef 91       	pop	r30
    5654:	bf 91       	pop	r27
    5656:	af 91       	pop	r26
    5658:	9f 91       	pop	r25
    565a:	8f 91       	pop	r24
    565c:	2f 91       	pop	r18
    565e:	0f 90       	pop	r0
    5660:	0b be       	out	0x3b, r0	; 59
    5662:	0f 90       	pop	r0
    5664:	0f be       	out	0x3f, r0	; 63
    5666:	0f 90       	pop	r0
    5668:	1f 90       	pop	r1
    566a:	18 95       	reti

0000566c <__vector_51>:
    566c:	1f 92       	push	r1
    566e:	0f 92       	push	r0
    5670:	0f b6       	in	r0, 0x3f	; 63
    5672:	0f 92       	push	r0
    5674:	11 24       	eor	r1, r1
    5676:	0b b6       	in	r0, 0x3b	; 59
    5678:	0f 92       	push	r0
    567a:	2f 93       	push	r18
    567c:	3f 93       	push	r19
    567e:	4f 93       	push	r20
    5680:	5f 93       	push	r21
    5682:	6f 93       	push	r22
    5684:	7f 93       	push	r23
    5686:	8f 93       	push	r24
    5688:	9f 93       	push	r25
    568a:	af 93       	push	r26
    568c:	bf 93       	push	r27
    568e:	cf 93       	push	r28
    5690:	df 93       	push	r29
    5692:	ef 93       	push	r30
    5694:	ff 93       	push	r31
    5696:	a0 91 df 19 	lds	r26, 0x19DF	; 0x8019df <_ser_handle+0x4>
    569a:	b0 91 e0 19 	lds	r27, 0x19E0	; 0x8019e0 <_ser_handle+0x5>
    569e:	10 97       	sbiw	r26, 0x00	; 0
    56a0:	11 f1       	breq	.+68     	; 0x56e6 <__vector_51+0x7a>
    56a2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    56a6:	14 96       	adiw	r26, 0x04	; 4
    56a8:	ed 91       	ld	r30, X+
    56aa:	fc 91       	ld	r31, X
    56ac:	15 97       	sbiw	r26, 0x05	; 5
    56ae:	93 81       	ldd	r25, Z+3	; 0x03
    56b0:	82 81       	ldd	r24, Z+2	; 0x02
    56b2:	25 81       	ldd	r18, Z+5	; 0x05
    56b4:	98 1b       	sub	r25, r24
    56b6:	92 23       	and	r25, r18
    56b8:	84 81       	ldd	r24, Z+4	; 0x04
    56ba:	98 17       	cp	r25, r24
    56bc:	61 f0       	breq	.+24     	; 0x56d6 <__vector_51+0x6a>
    56be:	83 81       	ldd	r24, Z+3	; 0x03
    56c0:	26 95       	lsr	r18
    56c2:	28 23       	and	r18, r24
    56c4:	c0 81       	ld	r28, Z
    56c6:	d1 81       	ldd	r29, Z+1	; 0x01
    56c8:	c2 0f       	add	r28, r18
    56ca:	d1 1d       	adc	r29, r1
    56cc:	68 83       	st	Y, r22
    56ce:	8f 5f       	subi	r24, 0xFF	; 255
    56d0:	95 81       	ldd	r25, Z+5	; 0x05
    56d2:	89 23       	and	r24, r25
    56d4:	83 83       	std	Z+3, r24	; 0x03
    56d6:	16 96       	adiw	r26, 0x06	; 6
    56d8:	ed 91       	ld	r30, X+
    56da:	fc 91       	ld	r31, X
    56dc:	17 97       	sbiw	r26, 0x07	; 7
    56de:	30 97       	sbiw	r30, 0x00	; 0
    56e0:	11 f0       	breq	.+4      	; 0x56e6 <__vector_51+0x7a>
    56e2:	cd 01       	movw	r24, r26
    56e4:	19 95       	eicall
    56e6:	ff 91       	pop	r31
    56e8:	ef 91       	pop	r30
    56ea:	df 91       	pop	r29
    56ec:	cf 91       	pop	r28
    56ee:	bf 91       	pop	r27
    56f0:	af 91       	pop	r26
    56f2:	9f 91       	pop	r25
    56f4:	8f 91       	pop	r24
    56f6:	7f 91       	pop	r23
    56f8:	6f 91       	pop	r22
    56fa:	5f 91       	pop	r21
    56fc:	4f 91       	pop	r20
    56fe:	3f 91       	pop	r19
    5700:	2f 91       	pop	r18
    5702:	0f 90       	pop	r0
    5704:	0b be       	out	0x3b, r0	; 59
    5706:	0f 90       	pop	r0
    5708:	0f be       	out	0x3f, r0	; 63
    570a:	0f 90       	pop	r0
    570c:	1f 90       	pop	r1
    570e:	18 95       	reti

00005710 <__vector_52>:
    5710:	1f 92       	push	r1
    5712:	0f 92       	push	r0
    5714:	0f b6       	in	r0, 0x3f	; 63
    5716:	0f 92       	push	r0
    5718:	11 24       	eor	r1, r1
    571a:	0b b6       	in	r0, 0x3b	; 59
    571c:	0f 92       	push	r0
    571e:	2f 93       	push	r18
    5720:	8f 93       	push	r24
    5722:	9f 93       	push	r25
    5724:	af 93       	push	r26
    5726:	bf 93       	push	r27
    5728:	ef 93       	push	r30
    572a:	ff 93       	push	r31
    572c:	e0 91 df 19 	lds	r30, 0x19DF	; 0x8019df <_ser_handle+0x4>
    5730:	f0 91 e0 19 	lds	r31, 0x19E0	; 0x8019e0 <_ser_handle+0x5>
    5734:	30 97       	sbiw	r30, 0x00	; 0
    5736:	b9 f0       	breq	.+46     	; 0x5766 <__vector_52+0x56>
    5738:	02 80       	ldd	r0, Z+2	; 0x02
    573a:	f3 81       	ldd	r31, Z+3	; 0x03
    573c:	e0 2d       	mov	r30, r0
    573e:	93 81       	ldd	r25, Z+3	; 0x03
    5740:	82 81       	ldd	r24, Z+2	; 0x02
    5742:	98 17       	cp	r25, r24
    5744:	b1 f0       	breq	.+44     	; 0x5772 <__vector_52+0x62>
    5746:	92 81       	ldd	r25, Z+2	; 0x02
    5748:	85 81       	ldd	r24, Z+5	; 0x05
    574a:	28 2f       	mov	r18, r24
    574c:	26 95       	lsr	r18
    574e:	29 23       	and	r18, r25
    5750:	a0 81       	ld	r26, Z
    5752:	b1 81       	ldd	r27, Z+1	; 0x01
    5754:	a2 0f       	add	r26, r18
    5756:	b1 1d       	adc	r27, r1
    5758:	2c 91       	ld	r18, X
    575a:	9f 5f       	subi	r25, 0xFF	; 255
    575c:	89 23       	and	r24, r25
    575e:	82 83       	std	Z+2, r24	; 0x02
    5760:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5764:	0b c0       	rjmp	.+22     	; 0x577c <__vector_52+0x6c>
    5766:	e1 ed       	ldi	r30, 0xD1	; 209
    5768:	f0 e0       	ldi	r31, 0x00	; 0
    576a:	80 81       	ld	r24, Z
    576c:	8f 7d       	andi	r24, 0xDF	; 223
    576e:	80 83       	st	Z, r24
    5770:	05 c0       	rjmp	.+10     	; 0x577c <__vector_52+0x6c>
    5772:	e1 ed       	ldi	r30, 0xD1	; 209
    5774:	f0 e0       	ldi	r31, 0x00	; 0
    5776:	80 81       	ld	r24, Z
    5778:	8f 7d       	andi	r24, 0xDF	; 223
    577a:	80 83       	st	Z, r24
    577c:	ff 91       	pop	r31
    577e:	ef 91       	pop	r30
    5780:	bf 91       	pop	r27
    5782:	af 91       	pop	r26
    5784:	9f 91       	pop	r25
    5786:	8f 91       	pop	r24
    5788:	2f 91       	pop	r18
    578a:	0f 90       	pop	r0
    578c:	0b be       	out	0x3b, r0	; 59
    578e:	0f 90       	pop	r0
    5790:	0f be       	out	0x3f, r0	; 63
    5792:	0f 90       	pop	r0
    5794:	1f 90       	pop	r1
    5796:	18 95       	reti

00005798 <__vector_54>:
    5798:	1f 92       	push	r1
    579a:	0f 92       	push	r0
    579c:	0f b6       	in	r0, 0x3f	; 63
    579e:	0f 92       	push	r0
    57a0:	11 24       	eor	r1, r1
    57a2:	0b b6       	in	r0, 0x3b	; 59
    57a4:	0f 92       	push	r0
    57a6:	2f 93       	push	r18
    57a8:	3f 93       	push	r19
    57aa:	4f 93       	push	r20
    57ac:	5f 93       	push	r21
    57ae:	6f 93       	push	r22
    57b0:	7f 93       	push	r23
    57b2:	8f 93       	push	r24
    57b4:	9f 93       	push	r25
    57b6:	af 93       	push	r26
    57b8:	bf 93       	push	r27
    57ba:	cf 93       	push	r28
    57bc:	df 93       	push	r29
    57be:	ef 93       	push	r30
    57c0:	ff 93       	push	r31
    57c2:	a0 91 e1 19 	lds	r26, 0x19E1	; 0x8019e1 <_ser_handle+0x6>
    57c6:	b0 91 e2 19 	lds	r27, 0x19E2	; 0x8019e2 <_ser_handle+0x7>
    57ca:	10 97       	sbiw	r26, 0x00	; 0
    57cc:	11 f1       	breq	.+68     	; 0x5812 <__vector_54+0x7a>
    57ce:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    57d2:	14 96       	adiw	r26, 0x04	; 4
    57d4:	ed 91       	ld	r30, X+
    57d6:	fc 91       	ld	r31, X
    57d8:	15 97       	sbiw	r26, 0x05	; 5
    57da:	93 81       	ldd	r25, Z+3	; 0x03
    57dc:	82 81       	ldd	r24, Z+2	; 0x02
    57de:	25 81       	ldd	r18, Z+5	; 0x05
    57e0:	98 1b       	sub	r25, r24
    57e2:	92 23       	and	r25, r18
    57e4:	84 81       	ldd	r24, Z+4	; 0x04
    57e6:	98 17       	cp	r25, r24
    57e8:	61 f0       	breq	.+24     	; 0x5802 <__vector_54+0x6a>
    57ea:	83 81       	ldd	r24, Z+3	; 0x03
    57ec:	26 95       	lsr	r18
    57ee:	28 23       	and	r18, r24
    57f0:	c0 81       	ld	r28, Z
    57f2:	d1 81       	ldd	r29, Z+1	; 0x01
    57f4:	c2 0f       	add	r28, r18
    57f6:	d1 1d       	adc	r29, r1
    57f8:	68 83       	st	Y, r22
    57fa:	8f 5f       	subi	r24, 0xFF	; 255
    57fc:	95 81       	ldd	r25, Z+5	; 0x05
    57fe:	89 23       	and	r24, r25
    5800:	83 83       	std	Z+3, r24	; 0x03
    5802:	16 96       	adiw	r26, 0x06	; 6
    5804:	ed 91       	ld	r30, X+
    5806:	fc 91       	ld	r31, X
    5808:	17 97       	sbiw	r26, 0x07	; 7
    580a:	30 97       	sbiw	r30, 0x00	; 0
    580c:	11 f0       	breq	.+4      	; 0x5812 <__vector_54+0x7a>
    580e:	cd 01       	movw	r24, r26
    5810:	19 95       	eicall
    5812:	ff 91       	pop	r31
    5814:	ef 91       	pop	r30
    5816:	df 91       	pop	r29
    5818:	cf 91       	pop	r28
    581a:	bf 91       	pop	r27
    581c:	af 91       	pop	r26
    581e:	9f 91       	pop	r25
    5820:	8f 91       	pop	r24
    5822:	7f 91       	pop	r23
    5824:	6f 91       	pop	r22
    5826:	5f 91       	pop	r21
    5828:	4f 91       	pop	r20
    582a:	3f 91       	pop	r19
    582c:	2f 91       	pop	r18
    582e:	0f 90       	pop	r0
    5830:	0b be       	out	0x3b, r0	; 59
    5832:	0f 90       	pop	r0
    5834:	0f be       	out	0x3f, r0	; 63
    5836:	0f 90       	pop	r0
    5838:	1f 90       	pop	r1
    583a:	18 95       	reti

0000583c <__vector_55>:
    583c:	1f 92       	push	r1
    583e:	0f 92       	push	r0
    5840:	0f b6       	in	r0, 0x3f	; 63
    5842:	0f 92       	push	r0
    5844:	11 24       	eor	r1, r1
    5846:	0b b6       	in	r0, 0x3b	; 59
    5848:	0f 92       	push	r0
    584a:	2f 93       	push	r18
    584c:	8f 93       	push	r24
    584e:	9f 93       	push	r25
    5850:	af 93       	push	r26
    5852:	bf 93       	push	r27
    5854:	ef 93       	push	r30
    5856:	ff 93       	push	r31
    5858:	e0 91 e1 19 	lds	r30, 0x19E1	; 0x8019e1 <_ser_handle+0x6>
    585c:	f0 91 e2 19 	lds	r31, 0x19E2	; 0x8019e2 <_ser_handle+0x7>
    5860:	30 97       	sbiw	r30, 0x00	; 0
    5862:	b9 f0       	breq	.+46     	; 0x5892 <__vector_55+0x56>
    5864:	02 80       	ldd	r0, Z+2	; 0x02
    5866:	f3 81       	ldd	r31, Z+3	; 0x03
    5868:	e0 2d       	mov	r30, r0
    586a:	93 81       	ldd	r25, Z+3	; 0x03
    586c:	82 81       	ldd	r24, Z+2	; 0x02
    586e:	98 17       	cp	r25, r24
    5870:	b1 f0       	breq	.+44     	; 0x589e <__vector_55+0x62>
    5872:	92 81       	ldd	r25, Z+2	; 0x02
    5874:	85 81       	ldd	r24, Z+5	; 0x05
    5876:	28 2f       	mov	r18, r24
    5878:	26 95       	lsr	r18
    587a:	29 23       	and	r18, r25
    587c:	a0 81       	ld	r26, Z
    587e:	b1 81       	ldd	r27, Z+1	; 0x01
    5880:	a2 0f       	add	r26, r18
    5882:	b1 1d       	adc	r27, r1
    5884:	2c 91       	ld	r18, X
    5886:	9f 5f       	subi	r25, 0xFF	; 255
    5888:	89 23       	and	r24, r25
    588a:	82 83       	std	Z+2, r24	; 0x02
    588c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5890:	0b c0       	rjmp	.+22     	; 0x58a8 <__vector_55+0x6c>
    5892:	e1 e3       	ldi	r30, 0x31	; 49
    5894:	f1 e0       	ldi	r31, 0x01	; 1
    5896:	80 81       	ld	r24, Z
    5898:	8f 7d       	andi	r24, 0xDF	; 223
    589a:	80 83       	st	Z, r24
    589c:	05 c0       	rjmp	.+10     	; 0x58a8 <__vector_55+0x6c>
    589e:	e1 e3       	ldi	r30, 0x31	; 49
    58a0:	f1 e0       	ldi	r31, 0x01	; 1
    58a2:	80 81       	ld	r24, Z
    58a4:	8f 7d       	andi	r24, 0xDF	; 223
    58a6:	80 83       	st	Z, r24
    58a8:	ff 91       	pop	r31
    58aa:	ef 91       	pop	r30
    58ac:	bf 91       	pop	r27
    58ae:	af 91       	pop	r26
    58b0:	9f 91       	pop	r25
    58b2:	8f 91       	pop	r24
    58b4:	2f 91       	pop	r18
    58b6:	0f 90       	pop	r0
    58b8:	0b be       	out	0x3b, r0	; 59
    58ba:	0f 90       	pop	r0
    58bc:	0f be       	out	0x3f, r0	; 63
    58be:	0f 90       	pop	r0
    58c0:	1f 90       	pop	r1
    58c2:	18 95       	reti

000058c4 <usart_getchar>:
    58c4:	cf 93       	push	r28
    58c6:	df 93       	push	r29
    58c8:	1f 92       	push	r1
    58ca:	cd b7       	in	r28, 0x3d	; 61
    58cc:	de b7       	in	r29, 0x3e	; 62
    58ce:	be 01       	movw	r22, r28
    58d0:	6f 5f       	subi	r22, 0xFF	; 255
    58d2:	7f 4f       	sbci	r23, 0xFF	; 255
    58d4:	80 91 e3 19 	lds	r24, 0x19E3	; 0x8019e3 <_com_serial_instance>
    58d8:	90 91 e4 19 	lds	r25, 0x19E4	; 0x8019e4 <_com_serial_instance+0x1>
    58dc:	7b dd       	rcall	.-1290   	; 0x53d4 <serial_getByte>
    58de:	81 11       	cpse	r24, r1
    58e0:	f6 cf       	rjmp	.-20     	; 0x58ce <usart_getchar+0xa>
    58e2:	89 81       	ldd	r24, Y+1	; 0x01
    58e4:	90 e0       	ldi	r25, 0x00	; 0
    58e6:	0f 90       	pop	r0
    58e8:	df 91       	pop	r29
    58ea:	cf 91       	pop	r28
    58ec:	08 95       	ret

000058ee <usart_putchar>:
    58ee:	68 2f       	mov	r22, r24
    58f0:	80 91 e3 19 	lds	r24, 0x19E3	; 0x8019e3 <_com_serial_instance>
    58f4:	90 91 e4 19 	lds	r25, 0x19E4	; 0x8019e4 <_com_serial_instance+0x1>
    58f8:	ed dc       	rcall	.-1574   	; 0x52d4 <serial_sendByte>
    58fa:	80 e0       	ldi	r24, 0x00	; 0
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	08 95       	ret

00005900 <stdio_initialise>:
    5900:	8f 92       	push	r8
    5902:	9f 92       	push	r9
    5904:	af 92       	push	r10
    5906:	cf 92       	push	r12
    5908:	ef 92       	push	r14
    590a:	0f 93       	push	r16
    590c:	81 2c       	mov	r8, r1
    590e:	91 2c       	mov	r9, r1
    5910:	68 94       	set
    5912:	aa 24       	eor	r10, r10
    5914:	a7 f8       	bld	r10, 7
    5916:	68 94       	set
    5918:	cc 24       	eor	r12, r12
    591a:	c7 f8       	bld	r12, 7
    591c:	e1 2c       	mov	r14, r1
    591e:	00 e0       	ldi	r16, 0x00	; 0
    5920:	23 e0       	ldi	r18, 0x03	; 3
    5922:	40 e0       	ldi	r20, 0x00	; 0
    5924:	51 ee       	ldi	r21, 0xE1	; 225
    5926:	60 e0       	ldi	r22, 0x00	; 0
    5928:	70 e0       	ldi	r23, 0x00	; 0
    592a:	2c dc       	rcall	.-1960   	; 0x5184 <serial_create>
    592c:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <_com_serial_instance+0x1>
    5930:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <_com_serial_instance>
    5934:	e7 e2       	ldi	r30, 0x27	; 39
    5936:	fa e1       	ldi	r31, 0x1A	; 26
    5938:	83 e1       	ldi	r24, 0x13	; 19
    593a:	92 e0       	ldi	r25, 0x02	; 2
    593c:	91 83       	std	Z+1, r25	; 0x01
    593e:	80 83       	st	Z, r24
    5940:	93 83       	std	Z+3, r25	; 0x03
    5942:	82 83       	std	Z+2, r24	; 0x02
    5944:	0f 91       	pop	r16
    5946:	ef 90       	pop	r14
    5948:	cf 90       	pop	r12
    594a:	af 90       	pop	r10
    594c:	9f 90       	pop	r9
    594e:	8f 90       	pop	r8
    5950:	08 95       	ret

00005952 <_turn_off>:
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	fc 01       	movw	r30, r24
    5956:	ee 0f       	add	r30, r30
    5958:	ff 1f       	adc	r31, r31
    595a:	e8 0f       	add	r30, r24
    595c:	f9 1f       	adc	r31, r25
    595e:	ee 0f       	add	r30, r30
    5960:	ff 1f       	adc	r31, r31
    5962:	eb 51       	subi	r30, 0x1B	; 27
    5964:	f6 4e       	sbci	r31, 0xE6	; 230
    5966:	23 81       	ldd	r18, Z+3	; 0x03
    5968:	21 11       	cpse	r18, r1
    596a:	1f c0       	rjmp	.+62     	; 0x59aa <_turn_off+0x58>
    596c:	9c 01       	movw	r18, r24
    596e:	22 0f       	add	r18, r18
    5970:	33 1f       	adc	r19, r19
    5972:	f9 01       	movw	r30, r18
    5974:	e8 0f       	add	r30, r24
    5976:	f9 1f       	adc	r31, r25
    5978:	ee 0f       	add	r30, r30
    597a:	ff 1f       	adc	r31, r31
    597c:	eb 51       	subi	r30, 0x1B	; 27
    597e:	f6 4e       	sbci	r31, 0xE6	; 230
    5980:	a0 81       	ld	r26, Z
    5982:	b1 81       	ldd	r27, Z+1	; 0x01
    5984:	4c 91       	ld	r20, X
    5986:	f9 01       	movw	r30, r18
    5988:	e8 0f       	add	r30, r24
    598a:	f9 1f       	adc	r31, r25
    598c:	ee 0f       	add	r30, r30
    598e:	ff 1f       	adc	r31, r31
    5990:	eb 51       	subi	r30, 0x1B	; 27
    5992:	f6 4e       	sbci	r31, 0xE6	; 230
    5994:	81 e0       	ldi	r24, 0x01	; 1
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	02 80       	ldd	r0, Z+2	; 0x02
    599a:	02 c0       	rjmp	.+4      	; 0x59a0 <_turn_off+0x4e>
    599c:	88 0f       	add	r24, r24
    599e:	99 1f       	adc	r25, r25
    59a0:	0a 94       	dec	r0
    59a2:	e2 f7       	brpl	.-8      	; 0x599c <_turn_off+0x4a>
    59a4:	84 2b       	or	r24, r20
    59a6:	8c 93       	st	X, r24
    59a8:	08 95       	ret
    59aa:	fc 01       	movw	r30, r24
    59ac:	ee 0f       	add	r30, r30
    59ae:	ff 1f       	adc	r31, r31
    59b0:	df 01       	movw	r26, r30
    59b2:	a8 0f       	add	r26, r24
    59b4:	b9 1f       	adc	r27, r25
    59b6:	aa 0f       	add	r26, r26
    59b8:	bb 1f       	adc	r27, r27
    59ba:	ab 51       	subi	r26, 0x1B	; 27
    59bc:	b6 4e       	sbci	r27, 0xE6	; 230
    59be:	0d 90       	ld	r0, X+
    59c0:	bc 91       	ld	r27, X
    59c2:	a0 2d       	mov	r26, r0
    59c4:	2c 91       	ld	r18, X
    59c6:	e8 0f       	add	r30, r24
    59c8:	f9 1f       	adc	r31, r25
    59ca:	ee 0f       	add	r30, r30
    59cc:	ff 1f       	adc	r31, r31
    59ce:	eb 51       	subi	r30, 0x1B	; 27
    59d0:	f6 4e       	sbci	r31, 0xE6	; 230
    59d2:	81 e0       	ldi	r24, 0x01	; 1
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	02 80       	ldd	r0, Z+2	; 0x02
    59d8:	02 c0       	rjmp	.+4      	; 0x59de <_turn_off+0x8c>
    59da:	88 0f       	add	r24, r24
    59dc:	99 1f       	adc	r25, r25
    59de:	0a 94       	dec	r0
    59e0:	e2 f7       	brpl	.-8      	; 0x59da <_turn_off+0x88>
    59e2:	80 95       	com	r24
    59e4:	82 23       	and	r24, r18
    59e6:	8c 93       	st	X, r24
    59e8:	08 95       	ret

000059ea <_turn_on>:
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	fc 01       	movw	r30, r24
    59ee:	ee 0f       	add	r30, r30
    59f0:	ff 1f       	adc	r31, r31
    59f2:	e8 0f       	add	r30, r24
    59f4:	f9 1f       	adc	r31, r25
    59f6:	ee 0f       	add	r30, r30
    59f8:	ff 1f       	adc	r31, r31
    59fa:	eb 51       	subi	r30, 0x1B	; 27
    59fc:	f6 4e       	sbci	r31, 0xE6	; 230
    59fe:	23 81       	ldd	r18, Z+3	; 0x03
    5a00:	21 11       	cpse	r18, r1
    5a02:	20 c0       	rjmp	.+64     	; 0x5a44 <_turn_on+0x5a>
    5a04:	9c 01       	movw	r18, r24
    5a06:	22 0f       	add	r18, r18
    5a08:	33 1f       	adc	r19, r19
    5a0a:	f9 01       	movw	r30, r18
    5a0c:	e8 0f       	add	r30, r24
    5a0e:	f9 1f       	adc	r31, r25
    5a10:	ee 0f       	add	r30, r30
    5a12:	ff 1f       	adc	r31, r31
    5a14:	eb 51       	subi	r30, 0x1B	; 27
    5a16:	f6 4e       	sbci	r31, 0xE6	; 230
    5a18:	a0 81       	ld	r26, Z
    5a1a:	b1 81       	ldd	r27, Z+1	; 0x01
    5a1c:	4c 91       	ld	r20, X
    5a1e:	f9 01       	movw	r30, r18
    5a20:	e8 0f       	add	r30, r24
    5a22:	f9 1f       	adc	r31, r25
    5a24:	ee 0f       	add	r30, r30
    5a26:	ff 1f       	adc	r31, r31
    5a28:	eb 51       	subi	r30, 0x1B	; 27
    5a2a:	f6 4e       	sbci	r31, 0xE6	; 230
    5a2c:	81 e0       	ldi	r24, 0x01	; 1
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	02 80       	ldd	r0, Z+2	; 0x02
    5a32:	02 c0       	rjmp	.+4      	; 0x5a38 <_turn_on+0x4e>
    5a34:	88 0f       	add	r24, r24
    5a36:	99 1f       	adc	r25, r25
    5a38:	0a 94       	dec	r0
    5a3a:	e2 f7       	brpl	.-8      	; 0x5a34 <_turn_on+0x4a>
    5a3c:	80 95       	com	r24
    5a3e:	84 23       	and	r24, r20
    5a40:	8c 93       	st	X, r24
    5a42:	08 95       	ret
    5a44:	fc 01       	movw	r30, r24
    5a46:	ee 0f       	add	r30, r30
    5a48:	ff 1f       	adc	r31, r31
    5a4a:	df 01       	movw	r26, r30
    5a4c:	a8 0f       	add	r26, r24
    5a4e:	b9 1f       	adc	r27, r25
    5a50:	aa 0f       	add	r26, r26
    5a52:	bb 1f       	adc	r27, r27
    5a54:	ab 51       	subi	r26, 0x1B	; 27
    5a56:	b6 4e       	sbci	r27, 0xE6	; 230
    5a58:	0d 90       	ld	r0, X+
    5a5a:	bc 91       	ld	r27, X
    5a5c:	a0 2d       	mov	r26, r0
    5a5e:	2c 91       	ld	r18, X
    5a60:	e8 0f       	add	r30, r24
    5a62:	f9 1f       	adc	r31, r25
    5a64:	ee 0f       	add	r30, r30
    5a66:	ff 1f       	adc	r31, r31
    5a68:	eb 51       	subi	r30, 0x1B	; 27
    5a6a:	f6 4e       	sbci	r31, 0xE6	; 230
    5a6c:	81 e0       	ldi	r24, 0x01	; 1
    5a6e:	90 e0       	ldi	r25, 0x00	; 0
    5a70:	02 80       	ldd	r0, Z+2	; 0x02
    5a72:	02 c0       	rjmp	.+4      	; 0x5a78 <_turn_on+0x8e>
    5a74:	88 0f       	add	r24, r24
    5a76:	99 1f       	adc	r25, r25
    5a78:	0a 94       	dec	r0
    5a7a:	e2 f7       	brpl	.-8      	; 0x5a74 <_turn_on+0x8a>
    5a7c:	82 2b       	or	r24, r18
    5a7e:	8c 93       	st	X, r24
    5a80:	08 95       	ret

00005a82 <_hal_led_task>:
    5a82:	cc 24       	eor	r12, r12
    5a84:	c3 94       	inc	r12
    5a86:	d1 2c       	mov	r13, r1
    5a88:	68 94       	set
    5a8a:	bb 24       	eor	r11, r11
    5a8c:	b2 f8       	bld	r11, 2
    5a8e:	c5 ee       	ldi	r28, 0xE5	; 229
    5a90:	d9 e1       	ldi	r29, 0x19	; 25
    5a92:	10 e0       	ldi	r17, 0x00	; 0
    5a94:	8c 81       	ldd	r24, Y+4	; 0x04
    5a96:	81 30       	cpi	r24, 0x01	; 1
    5a98:	81 f0       	breq	.+32     	; 0x5aba <_hal_led_task+0x38>
    5a9a:	18 f1       	brcs	.+70     	; 0x5ae2 <_hal_led_task+0x60>
    5a9c:	82 30       	cpi	r24, 0x02	; 2
    5a9e:	61 f5       	brne	.+88     	; 0x5af8 <_hal_led_task+0x76>
    5aa0:	e8 81       	ld	r30, Y
    5aa2:	f9 81       	ldd	r31, Y+1	; 0x01
    5aa4:	20 81       	ld	r18, Z
    5aa6:	c6 01       	movw	r24, r12
    5aa8:	0a 80       	ldd	r0, Y+2	; 0x02
    5aaa:	02 c0       	rjmp	.+4      	; 0x5ab0 <_hal_led_task+0x2e>
    5aac:	88 0f       	add	r24, r24
    5aae:	99 1f       	adc	r25, r25
    5ab0:	0a 94       	dec	r0
    5ab2:	e2 f7       	brpl	.-8      	; 0x5aac <_hal_led_task+0x2a>
    5ab4:	82 27       	eor	r24, r18
    5ab6:	80 83       	st	Z, r24
    5ab8:	1f c0       	rjmp	.+62     	; 0x5af8 <_hal_led_task+0x76>
    5aba:	8d 81       	ldd	r24, Y+5	; 0x05
    5abc:	8f 5f       	subi	r24, 0xFF	; 255
    5abe:	86 30       	cpi	r24, 0x06	; 6
    5ac0:	10 f4       	brcc	.+4      	; 0x5ac6 <_hal_led_task+0x44>
    5ac2:	8d 83       	std	Y+5, r24	; 0x05
    5ac4:	19 c0       	rjmp	.+50     	; 0x5af8 <_hal_led_task+0x76>
    5ac6:	1d 82       	std	Y+5, r1	; 0x05
    5ac8:	e8 81       	ld	r30, Y
    5aca:	f9 81       	ldd	r31, Y+1	; 0x01
    5acc:	20 81       	ld	r18, Z
    5ace:	c6 01       	movw	r24, r12
    5ad0:	0a 80       	ldd	r0, Y+2	; 0x02
    5ad2:	02 c0       	rjmp	.+4      	; 0x5ad8 <_hal_led_task+0x56>
    5ad4:	88 0f       	add	r24, r24
    5ad6:	99 1f       	adc	r25, r25
    5ad8:	0a 94       	dec	r0
    5ada:	e2 f7       	brpl	.-8      	; 0x5ad4 <_hal_led_task+0x52>
    5adc:	82 27       	eor	r24, r18
    5ade:	80 83       	st	Z, r24
    5ae0:	0b c0       	rjmp	.+22     	; 0x5af8 <_hal_led_task+0x76>
    5ae2:	0d 81       	ldd	r16, Y+5	; 0x05
    5ae4:	00 23       	and	r16, r16
    5ae6:	29 f0       	breq	.+10     	; 0x5af2 <_hal_led_task+0x70>
    5ae8:	81 2f       	mov	r24, r17
    5aea:	7f df       	rcall	.-258    	; 0x59ea <_turn_on>
    5aec:	01 50       	subi	r16, 0x01	; 1
    5aee:	0d 83       	std	Y+5, r16	; 0x05
    5af0:	03 c0       	rjmp	.+6      	; 0x5af8 <_hal_led_task+0x76>
    5af2:	bc 82       	std	Y+4, r11	; 0x04
    5af4:	81 2f       	mov	r24, r17
    5af6:	2d df       	rcall	.-422    	; 0x5952 <_turn_off>
    5af8:	1f 5f       	subi	r17, 0xFF	; 255
    5afa:	26 96       	adiw	r28, 0x06	; 6
    5afc:	14 30       	cpi	r17, 0x04	; 4
    5afe:	51 f6       	brne	.-108    	; 0x5a94 <_hal_led_task+0x12>
    5b00:	6c e0       	ldi	r22, 0x0C	; 12
    5b02:	70 e0       	ldi	r23, 0x00	; 0
    5b04:	80 e0       	ldi	r24, 0x00	; 0
    5b06:	90 e0       	ldi	r25, 0x00	; 0
    5b08:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskDelay>
    5b0c:	c0 cf       	rjmp	.-128    	; 0x5a8e <_hal_led_task+0xc>

00005b0e <status_leds_initialise>:
    5b0e:	ef 92       	push	r14
    5b10:	ff 92       	push	r15
    5b12:	0f 93       	push	r16
    5b14:	1f 93       	push	r17
    5b16:	cf 93       	push	r28
    5b18:	df 93       	push	r29
    5b1a:	08 2f       	mov	r16, r24
    5b1c:	80 e4       	ldi	r24, 0x40	; 64
    5b1e:	87 b9       	out	0x07, r24	; 7
    5b20:	c5 ee       	ldi	r28, 0xE5	; 229
    5b22:	d9 e1       	ldi	r29, 0x19	; 25
    5b24:	0f 2e       	mov	r0, r31
    5b26:	f8 e2       	ldi	r31, 0x28	; 40
    5b28:	ef 2e       	mov	r14, r31
    5b2a:	f1 2c       	mov	r15, r1
    5b2c:	f0 2d       	mov	r31, r0
    5b2e:	f9 82       	std	Y+1, r15	; 0x01
    5b30:	e8 82       	st	Y, r14
    5b32:	86 e0       	ldi	r24, 0x06	; 6
    5b34:	8a 83       	std	Y+2, r24	; 0x02
    5b36:	1b 82       	std	Y+3, r1	; 0x03
    5b38:	14 e0       	ldi	r17, 0x04	; 4
    5b3a:	1c 83       	std	Y+4, r17	; 0x04
    5b3c:	80 e0       	ldi	r24, 0x00	; 0
    5b3e:	09 df       	rcall	.-494    	; 0x5952 <_turn_off>
    5b40:	80 e8       	ldi	r24, 0x80	; 128
    5b42:	87 b9       	out	0x07, r24	; 7
    5b44:	ff 82       	std	Y+7, r15	; 0x07
    5b46:	ee 82       	std	Y+6, r14	; 0x06
    5b48:	87 e0       	ldi	r24, 0x07	; 7
    5b4a:	88 87       	std	Y+8, r24	; 0x08
    5b4c:	19 86       	std	Y+9, r1	; 0x09
    5b4e:	1a 87       	std	Y+10, r17	; 0x0a
    5b50:	81 e0       	ldi	r24, 0x01	; 1
    5b52:	ff de       	rcall	.-514    	; 0x5952 <_turn_off>
    5b54:	80 e2       	ldi	r24, 0x20	; 32
    5b56:	83 bb       	out	0x13, r24	; 19
    5b58:	84 e3       	ldi	r24, 0x34	; 52
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	9d 87       	std	Y+13, r25	; 0x0d
    5b5e:	8c 87       	std	Y+12, r24	; 0x0c
    5b60:	85 e0       	ldi	r24, 0x05	; 5
    5b62:	8e 87       	std	Y+14, r24	; 0x0e
    5b64:	1f 86       	std	Y+15, r1	; 0x0f
    5b66:	18 8b       	std	Y+16, r17	; 0x10
    5b68:	82 e0       	ldi	r24, 0x02	; 2
    5b6a:	f3 de       	rcall	.-538    	; 0x5952 <_turn_off>
    5b6c:	80 e1       	ldi	r24, 0x10	; 16
    5b6e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5b72:	82 e0       	ldi	r24, 0x02	; 2
    5b74:	91 e0       	ldi	r25, 0x01	; 1
    5b76:	9b 8b       	std	Y+19, r25	; 0x13
    5b78:	8a 8b       	std	Y+18, r24	; 0x12
    5b7a:	1c 8b       	std	Y+20, r17	; 0x14
    5b7c:	1d 8a       	std	Y+21, r1	; 0x15
    5b7e:	1e 8b       	std	Y+22, r17	; 0x16
    5b80:	83 e0       	ldi	r24, 0x03	; 3
    5b82:	e7 de       	rcall	.-562    	; 0x5952 <_turn_off>
    5b84:	e1 2c       	mov	r14, r1
    5b86:	f1 2c       	mov	r15, r1
    5b88:	20 e0       	ldi	r18, 0x00	; 0
    5b8a:	30 e0       	ldi	r19, 0x00	; 0
    5b8c:	40 ec       	ldi	r20, 0xC0	; 192
    5b8e:	50 e0       	ldi	r21, 0x00	; 0
    5b90:	6e ee       	ldi	r22, 0xEE	; 238
    5b92:	79 e0       	ldi	r23, 0x09	; 9
    5b94:	81 e4       	ldi	r24, 0x41	; 65
    5b96:	9d e2       	ldi	r25, 0x2D	; 45
    5b98:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskCreate>
    5b9c:	df 91       	pop	r29
    5b9e:	cf 91       	pop	r28
    5ba0:	1f 91       	pop	r17
    5ba2:	0f 91       	pop	r16
    5ba4:	ff 90       	pop	r15
    5ba6:	ef 90       	pop	r14
    5ba8:	08 95       	ret

00005baa <status_leds_slowBlink>:
    5baa:	cf 93       	push	r28
    5bac:	df 93       	push	r29
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	fc 01       	movw	r30, r24
    5bb2:	ee 0f       	add	r30, r30
    5bb4:	ff 1f       	adc	r31, r31
    5bb6:	df 01       	movw	r26, r30
    5bb8:	a8 0f       	add	r26, r24
    5bba:	b9 1f       	adc	r27, r25
    5bbc:	aa 0f       	add	r26, r26
    5bbe:	bb 1f       	adc	r27, r27
    5bc0:	ab 51       	subi	r26, 0x1B	; 27
    5bc2:	b6 4e       	sbci	r27, 0xE6	; 230
    5bc4:	cd 91       	ld	r28, X+
    5bc6:	dc 91       	ld	r29, X
    5bc8:	11 97       	sbiw	r26, 0x01	; 1
    5bca:	48 81       	ld	r20, Y
    5bcc:	21 e0       	ldi	r18, 0x01	; 1
    5bce:	30 e0       	ldi	r19, 0x00	; 0
    5bd0:	12 96       	adiw	r26, 0x02	; 2
    5bd2:	0c 90       	ld	r0, X
    5bd4:	12 97       	sbiw	r26, 0x02	; 2
    5bd6:	02 c0       	rjmp	.+4      	; 0x5bdc <status_leds_slowBlink+0x32>
    5bd8:	22 0f       	add	r18, r18
    5bda:	33 1f       	adc	r19, r19
    5bdc:	0a 94       	dec	r0
    5bde:	e2 f7       	brpl	.-8      	; 0x5bd8 <status_leds_slowBlink+0x2e>
    5be0:	24 27       	eor	r18, r20
    5be2:	28 83       	st	Y, r18
    5be4:	fd 01       	movw	r30, r26
    5be6:	81 e0       	ldi	r24, 0x01	; 1
    5be8:	84 83       	std	Z+4, r24	; 0x04
    5bea:	df 91       	pop	r29
    5bec:	cf 91       	pop	r28
    5bee:	08 95       	ret

00005bf0 <status_leds_fastBlink>:
    5bf0:	cf 93       	push	r28
    5bf2:	df 93       	push	r29
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	fc 01       	movw	r30, r24
    5bf8:	ee 0f       	add	r30, r30
    5bfa:	ff 1f       	adc	r31, r31
    5bfc:	df 01       	movw	r26, r30
    5bfe:	a8 0f       	add	r26, r24
    5c00:	b9 1f       	adc	r27, r25
    5c02:	aa 0f       	add	r26, r26
    5c04:	bb 1f       	adc	r27, r27
    5c06:	ab 51       	subi	r26, 0x1B	; 27
    5c08:	b6 4e       	sbci	r27, 0xE6	; 230
    5c0a:	cd 91       	ld	r28, X+
    5c0c:	dc 91       	ld	r29, X
    5c0e:	11 97       	sbiw	r26, 0x01	; 1
    5c10:	48 81       	ld	r20, Y
    5c12:	21 e0       	ldi	r18, 0x01	; 1
    5c14:	30 e0       	ldi	r19, 0x00	; 0
    5c16:	12 96       	adiw	r26, 0x02	; 2
    5c18:	0c 90       	ld	r0, X
    5c1a:	12 97       	sbiw	r26, 0x02	; 2
    5c1c:	02 c0       	rjmp	.+4      	; 0x5c22 <status_leds_fastBlink+0x32>
    5c1e:	22 0f       	add	r18, r18
    5c20:	33 1f       	adc	r19, r19
    5c22:	0a 94       	dec	r0
    5c24:	e2 f7       	brpl	.-8      	; 0x5c1e <status_leds_fastBlink+0x2e>
    5c26:	24 27       	eor	r18, r20
    5c28:	28 83       	st	Y, r18
    5c2a:	fd 01       	movw	r30, r26
    5c2c:	82 e0       	ldi	r24, 0x02	; 2
    5c2e:	84 83       	std	Z+4, r24	; 0x04
    5c30:	df 91       	pop	r29
    5c32:	cf 91       	pop	r28
    5c34:	08 95       	ret

00005c36 <status_leds_ledOn>:
    5c36:	28 2f       	mov	r18, r24
    5c38:	30 e0       	ldi	r19, 0x00	; 0
    5c3a:	f9 01       	movw	r30, r18
    5c3c:	ee 0f       	add	r30, r30
    5c3e:	ff 1f       	adc	r31, r31
    5c40:	e2 0f       	add	r30, r18
    5c42:	f3 1f       	adc	r31, r19
    5c44:	ee 0f       	add	r30, r30
    5c46:	ff 1f       	adc	r31, r31
    5c48:	eb 51       	subi	r30, 0x1B	; 27
    5c4a:	f6 4e       	sbci	r31, 0xE6	; 230
    5c4c:	93 e0       	ldi	r25, 0x03	; 3
    5c4e:	94 83       	std	Z+4, r25	; 0x04
    5c50:	cc ce       	rjmp	.-616    	; 0x59ea <_turn_on>
    5c52:	08 95       	ret

00005c54 <status_leds_ledOff>:
    5c54:	28 2f       	mov	r18, r24
    5c56:	30 e0       	ldi	r19, 0x00	; 0
    5c58:	f9 01       	movw	r30, r18
    5c5a:	ee 0f       	add	r30, r30
    5c5c:	ff 1f       	adc	r31, r31
    5c5e:	e2 0f       	add	r30, r18
    5c60:	f3 1f       	adc	r31, r19
    5c62:	ee 0f       	add	r30, r30
    5c64:	ff 1f       	adc	r31, r31
    5c66:	eb 51       	subi	r30, 0x1B	; 27
    5c68:	f6 4e       	sbci	r31, 0xE6	; 230
    5c6a:	94 e0       	ldi	r25, 0x04	; 4
    5c6c:	94 83       	std	Z+4, r25	; 0x04
    5c6e:	71 ce       	rjmp	.-798    	; 0x5952 <_turn_off>
    5c70:	08 95       	ret

00005c72 <status_leds_longPuls>:
    5c72:	90 e0       	ldi	r25, 0x00	; 0
    5c74:	fc 01       	movw	r30, r24
    5c76:	ee 0f       	add	r30, r30
    5c78:	ff 1f       	adc	r31, r31
    5c7a:	df 01       	movw	r26, r30
    5c7c:	a8 0f       	add	r26, r24
    5c7e:	b9 1f       	adc	r27, r25
    5c80:	aa 0f       	add	r26, r26
    5c82:	bb 1f       	adc	r27, r27
    5c84:	ab 51       	subi	r26, 0x1B	; 27
    5c86:	b6 4e       	sbci	r27, 0xE6	; 230
    5c88:	26 e0       	ldi	r18, 0x06	; 6
    5c8a:	15 96       	adiw	r26, 0x05	; 5
    5c8c:	2c 93       	st	X, r18
    5c8e:	15 97       	sbiw	r26, 0x05	; 5
    5c90:	fd 01       	movw	r30, r26
    5c92:	14 82       	std	Z+4, r1	; 0x04
    5c94:	08 95       	ret

00005c96 <status_leds_shortPuls>:
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	fc 01       	movw	r30, r24
    5c9a:	ee 0f       	add	r30, r30
    5c9c:	ff 1f       	adc	r31, r31
    5c9e:	df 01       	movw	r26, r30
    5ca0:	a8 0f       	add	r26, r24
    5ca2:	b9 1f       	adc	r27, r25
    5ca4:	aa 0f       	add	r26, r26
    5ca6:	bb 1f       	adc	r27, r27
    5ca8:	ab 51       	subi	r26, 0x1B	; 27
    5caa:	b6 4e       	sbci	r27, 0xE6	; 230
    5cac:	15 96       	adiw	r26, 0x05	; 5
    5cae:	1c 92       	st	X, r1
    5cb0:	15 97       	sbiw	r26, 0x05	; 5
    5cb2:	fd 01       	movw	r30, r26
    5cb4:	14 82       	std	Z+4, r1	; 0x04
    5cb6:	08 95       	ret

00005cb8 <_callBack>:
    5cb8:	e0 91 05 1a 	lds	r30, 0x1A05	; 0x801a05 <_callBackFunction>
    5cbc:	f0 91 06 1a 	lds	r31, 0x1A06	; 0x801a06 <_callBackFunction+0x1>
    5cc0:	30 97       	sbiw	r30, 0x00	; 0
    5cc2:	09 f0       	breq	.+2      	; 0x5cc6 <_callBack+0xe>
    5cc4:	19 95       	eicall
    5cc6:	08 95       	ret

00005cc8 <_tsl2591TwiCallback>:
    5cc8:	64 50       	subi	r22, 0x04	; 4
    5cca:	62 30       	cpi	r22, 0x02	; 2
    5ccc:	08 f0       	brcs	.+2      	; 0x5cd0 <_tsl2591TwiCallback+0x8>
    5cce:	3b c0       	rjmp	.+118    	; 0x5d46 <_tsl2591TwiCallback+0x7e>
    5cd0:	20 91 04 1a 	lds	r18, 0x1A04	; 0x801a04 <_nextState>
    5cd4:	22 30       	cpi	r18, 0x02	; 2
    5cd6:	79 f0       	breq	.+30     	; 0x5cf6 <_tsl2591TwiCallback+0x2e>
    5cd8:	18 f4       	brcc	.+6      	; 0x5ce0 <_tsl2591TwiCallback+0x18>
    5cda:	21 30       	cpi	r18, 0x01	; 1
    5cdc:	31 f0       	breq	.+12     	; 0x5cea <_tsl2591TwiCallback+0x22>
    5cde:	30 c0       	rjmp	.+96     	; 0x5d40 <_tsl2591TwiCallback+0x78>
    5ce0:	23 30       	cpi	r18, 0x03	; 3
    5ce2:	81 f0       	breq	.+32     	; 0x5d04 <_tsl2591TwiCallback+0x3c>
    5ce4:	24 30       	cpi	r18, 0x04	; 4
    5ce6:	a1 f0       	breq	.+40     	; 0x5d10 <_tsl2591TwiCallback+0x48>
    5ce8:	2b c0       	rjmp	.+86     	; 0x5d40 <_tsl2591TwiCallback+0x78>
    5cea:	22 e0       	ldi	r18, 0x02	; 2
    5cec:	20 93 04 1a 	sts	0x1A04, r18	; 0x801a04 <_nextState>
    5cf0:	61 e0       	ldi	r22, 0x01	; 1
    5cf2:	0a c2       	rjmp	.+1044   	; 0x6108 <twiReceive>
    5cf4:	08 95       	ret
    5cf6:	fa 01       	movw	r30, r20
    5cf8:	80 81       	ld	r24, Z
    5cfa:	80 93 01 1a 	sts	0x1A01, r24	; 0x801a01 <_deviceId>
    5cfe:	82 e0       	ldi	r24, 0x02	; 2
    5d00:	db cf       	rjmp	.-74     	; 0x5cb8 <_callBack>
    5d02:	08 95       	ret
    5d04:	24 e0       	ldi	r18, 0x04	; 4
    5d06:	20 93 04 1a 	sts	0x1A04, r18	; 0x801a04 <_nextState>
    5d0a:	64 e0       	ldi	r22, 0x04	; 4
    5d0c:	fd c1       	rjmp	.+1018   	; 0x6108 <twiReceive>
    5d0e:	08 95       	ret
    5d10:	fa 01       	movw	r30, r20
    5d12:	81 81       	ldd	r24, Z+1	; 0x01
    5d14:	90 e0       	ldi	r25, 0x00	; 0
    5d16:	98 2f       	mov	r25, r24
    5d18:	88 27       	eor	r24, r24
    5d1a:	20 81       	ld	r18, Z
    5d1c:	82 2b       	or	r24, r18
    5d1e:	90 93 00 1a 	sts	0x1A00, r25	; 0x801a00 <_fullSpectrumRaw+0x1>
    5d22:	80 93 ff 19 	sts	0x19FF, r24	; 0x8019ff <_fullSpectrumRaw>
    5d26:	83 81       	ldd	r24, Z+3	; 0x03
    5d28:	90 e0       	ldi	r25, 0x00	; 0
    5d2a:	98 2f       	mov	r25, r24
    5d2c:	88 27       	eor	r24, r24
    5d2e:	22 81       	ldd	r18, Z+2	; 0x02
    5d30:	82 2b       	or	r24, r18
    5d32:	90 93 fe 19 	sts	0x19FE, r25	; 0x8019fe <_infraredRaw+0x1>
    5d36:	80 93 fd 19 	sts	0x19FD, r24	; 0x8019fd <_infraredRaw>
    5d3a:	81 e0       	ldi	r24, 0x01	; 1
    5d3c:	bd cf       	rjmp	.-134    	; 0x5cb8 <_callBack>
    5d3e:	08 95       	ret
    5d40:	80 e0       	ldi	r24, 0x00	; 0
    5d42:	ba cf       	rjmp	.-140    	; 0x5cb8 <_callBack>
    5d44:	08 95       	ret
    5d46:	10 92 04 1a 	sts	0x1A04, r1	; 0x801a04 <_nextState>
    5d4a:	86 e0       	ldi	r24, 0x06	; 6
    5d4c:	b5 cf       	rjmp	.-150    	; 0x5cb8 <_callBack>
    5d4e:	08 95       	ret

00005d50 <_twiTransmit>:
    5d50:	20 91 07 1a 	lds	r18, 0x1A07	; 0x801a07 <_twiHandler>
    5d54:	30 91 08 1a 	lds	r19, 0x1A08	; 0x801a08 <_twiHandler+0x1>
    5d58:	21 15       	cp	r18, r1
    5d5a:	31 05       	cpc	r19, r1
    5d5c:	41 f0       	breq	.+16     	; 0x5d6e <_twiTransmit+0x1e>
    5d5e:	46 2f       	mov	r20, r22
    5d60:	bc 01       	movw	r22, r24
    5d62:	c9 01       	movw	r24, r18
    5d64:	85 d1       	rcall	.+778    	; 0x6070 <twiTransmit>
    5d66:	82 30       	cpi	r24, 0x02	; 2
    5d68:	21 f0       	breq	.+8      	; 0x5d72 <_twiTransmit+0x22>
    5d6a:	80 e0       	ldi	r24, 0x00	; 0
    5d6c:	08 95       	ret
    5d6e:	87 e0       	ldi	r24, 0x07	; 7
    5d70:	08 95       	ret
    5d72:	85 e0       	ldi	r24, 0x05	; 5
    5d74:	08 95       	ret

00005d76 <tsl2591_initialise>:
    5d76:	0f 93       	push	r16
    5d78:	1f 93       	push	r17
    5d7a:	90 93 06 1a 	sts	0x1A06, r25	; 0x801a06 <_callBackFunction+0x1>
    5d7e:	80 93 05 1a 	sts	0x1A05, r24	; 0x801a05 <_callBackFunction>
    5d82:	04 e6       	ldi	r16, 0x64	; 100
    5d84:	1e e2       	ldi	r17, 0x2E	; 46
    5d86:	20 e0       	ldi	r18, 0x00	; 0
    5d88:	34 e2       	ldi	r19, 0x24	; 36
    5d8a:	44 ef       	ldi	r20, 0xF4	; 244
    5d8c:	50 e0       	ldi	r21, 0x00	; 0
    5d8e:	60 e0       	ldi	r22, 0x00	; 0
    5d90:	89 e2       	ldi	r24, 0x29	; 41
    5d92:	1d d1       	rcall	.+570    	; 0x5fce <twiCreate>
    5d94:	90 93 08 1a 	sts	0x1A08, r25	; 0x801a08 <_twiHandler+0x1>
    5d98:	80 93 07 1a 	sts	0x1A07, r24	; 0x801a07 <_twiHandler>
    5d9c:	89 2b       	or	r24, r25
    5d9e:	11 f0       	breq	.+4      	; 0x5da4 <tsl2591_initialise+0x2e>
    5da0:	80 e0       	ldi	r24, 0x00	; 0
    5da2:	01 c0       	rjmp	.+2      	; 0x5da6 <tsl2591_initialise+0x30>
    5da4:	88 e0       	ldi	r24, 0x08	; 8
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	08 95       	ret

00005dac <tsl2591_enable>:
    5dac:	cf 93       	push	r28
    5dae:	df 93       	push	r29
    5db0:	1f 92       	push	r1
    5db2:	1f 92       	push	r1
    5db4:	cd b7       	in	r28, 0x3d	; 61
    5db6:	de b7       	in	r29, 0x3e	; 62
    5db8:	80 ea       	ldi	r24, 0xA0	; 160
    5dba:	89 83       	std	Y+1, r24	; 0x01
    5dbc:	83 e0       	ldi	r24, 0x03	; 3
    5dbe:	8a 83       	std	Y+2, r24	; 0x02
    5dc0:	10 92 04 1a 	sts	0x1A04, r1	; 0x801a04 <_nextState>
    5dc4:	62 e0       	ldi	r22, 0x02	; 2
    5dc6:	ce 01       	movw	r24, r28
    5dc8:	01 96       	adiw	r24, 0x01	; 1
    5dca:	c2 df       	rcall	.-124    	; 0x5d50 <_twiTransmit>
    5dcc:	0f 90       	pop	r0
    5dce:	0f 90       	pop	r0
    5dd0:	df 91       	pop	r29
    5dd2:	cf 91       	pop	r28
    5dd4:	08 95       	ret

00005dd6 <tsl2591_fetchData>:
    5dd6:	cf 93       	push	r28
    5dd8:	df 93       	push	r29
    5dda:	1f 92       	push	r1
    5ddc:	cd b7       	in	r28, 0x3d	; 61
    5dde:	de b7       	in	r29, 0x3e	; 62
    5de0:	84 eb       	ldi	r24, 0xB4	; 180
    5de2:	89 83       	std	Y+1, r24	; 0x01
    5de4:	83 e0       	ldi	r24, 0x03	; 3
    5de6:	80 93 04 1a 	sts	0x1A04, r24	; 0x801a04 <_nextState>
    5dea:	61 e0       	ldi	r22, 0x01	; 1
    5dec:	ce 01       	movw	r24, r28
    5dee:	01 96       	adiw	r24, 0x01	; 1
    5df0:	af df       	rcall	.-162    	; 0x5d50 <_twiTransmit>
    5df2:	0f 90       	pop	r0
    5df4:	df 91       	pop	r29
    5df6:	cf 91       	pop	r28
    5df8:	08 95       	ret

00005dfa <tsl2591_getLux>:
    5dfa:	2f 92       	push	r2
    5dfc:	3f 92       	push	r3
    5dfe:	4f 92       	push	r4
    5e00:	5f 92       	push	r5
    5e02:	6f 92       	push	r6
    5e04:	7f 92       	push	r7
    5e06:	8f 92       	push	r8
    5e08:	9f 92       	push	r9
    5e0a:	af 92       	push	r10
    5e0c:	bf 92       	push	r11
    5e0e:	cf 92       	push	r12
    5e10:	df 92       	push	r13
    5e12:	ef 92       	push	r14
    5e14:	ff 92       	push	r15
    5e16:	0f 93       	push	r16
    5e18:	1f 93       	push	r17
    5e1a:	cf 93       	push	r28
    5e1c:	df 93       	push	r29
    5e1e:	c0 91 fd 19 	lds	r28, 0x19FD	; 0x8019fd <_infraredRaw>
    5e22:	d0 91 fe 19 	lds	r29, 0x19FE	; 0x8019fe <_infraredRaw+0x1>
    5e26:	cf 3f       	cpi	r28, 0xFF	; 255
    5e28:	2f ef       	ldi	r18, 0xFF	; 255
    5e2a:	d2 07       	cpc	r29, r18
    5e2c:	41 f0       	breq	.+16     	; 0x5e3e <tsl2591_getLux+0x44>
    5e2e:	60 91 ff 19 	lds	r22, 0x19FF	; 0x8019ff <_fullSpectrumRaw>
    5e32:	70 91 00 1a 	lds	r23, 0x1A00	; 0x801a00 <_fullSpectrumRaw+0x1>
    5e36:	6f 3f       	cpi	r22, 0xFF	; 255
    5e38:	ef ef       	ldi	r30, 0xFF	; 255
    5e3a:	7e 07       	cpc	r23, r30
    5e3c:	59 f4       	brne	.+22     	; 0x5e54 <tsl2591_getLux+0x5a>
    5e3e:	4f ef       	ldi	r20, 0xFF	; 255
    5e40:	5f ef       	ldi	r21, 0xFF	; 255
    5e42:	6f e7       	ldi	r22, 0x7F	; 127
    5e44:	7f e7       	ldi	r23, 0x7F	; 127
    5e46:	fc 01       	movw	r30, r24
    5e48:	40 83       	st	Z, r20
    5e4a:	51 83       	std	Z+1, r21	; 0x01
    5e4c:	62 83       	std	Z+2, r22	; 0x02
    5e4e:	73 83       	std	Z+3, r23	; 0x03
    5e50:	83 e0       	ldi	r24, 0x03	; 3
    5e52:	99 c0       	rjmp	.+306    	; 0x5f86 <tsl2591_getLux+0x18c>
    5e54:	1c 01       	movw	r2, r24
    5e56:	80 e0       	ldi	r24, 0x00	; 0
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	ea d6       	rcall	.+3540   	; 0x6c30 <__floatunsisf>
    5e5c:	2b 01       	movw	r4, r22
    5e5e:	3c 01       	movw	r6, r24
    5e60:	be 01       	movw	r22, r28
    5e62:	80 e0       	ldi	r24, 0x00	; 0
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	e4 d6       	rcall	.+3528   	; 0x6c30 <__floatunsisf>
    5e68:	4b 01       	movw	r8, r22
    5e6a:	5c 01       	movw	r10, r24
    5e6c:	80 91 02 1a 	lds	r24, 0x1A02	; 0x801a02 <_currentIntegrationTime>
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	01 96       	adiw	r24, 0x01	; 1
    5e74:	24 e6       	ldi	r18, 0x64	; 100
    5e76:	28 9f       	mul	r18, r24
    5e78:	b0 01       	movw	r22, r0
    5e7a:	29 9f       	mul	r18, r25
    5e7c:	70 0d       	add	r23, r0
    5e7e:	11 24       	eor	r1, r1
    5e80:	80 91 03 1a 	lds	r24, 0x1A03	; 0x801a03 <_currentGain>
    5e84:	80 32       	cpi	r24, 0x20	; 32
    5e86:	69 f0       	breq	.+26     	; 0x5ea2 <tsl2591_getLux+0xa8>
    5e88:	80 33       	cpi	r24, 0x30	; 48
    5e8a:	a1 f0       	breq	.+40     	; 0x5eb4 <tsl2591_getLux+0xba>
    5e8c:	80 31       	cpi	r24, 0x10	; 16
    5e8e:	e1 f4       	brne	.+56     	; 0x5ec8 <tsl2591_getLux+0xce>
    5e90:	0f 2e       	mov	r0, r31
    5e92:	c1 2c       	mov	r12, r1
    5e94:	d1 2c       	mov	r13, r1
    5e96:	f8 ec       	ldi	r31, 0xC8	; 200
    5e98:	ef 2e       	mov	r14, r31
    5e9a:	f1 e4       	ldi	r31, 0x41	; 65
    5e9c:	ff 2e       	mov	r15, r31
    5e9e:	f0 2d       	mov	r31, r0
    5ea0:	1b c0       	rjmp	.+54     	; 0x5ed8 <tsl2591_getLux+0xde>
    5ea2:	0f 2e       	mov	r0, r31
    5ea4:	c1 2c       	mov	r12, r1
    5ea6:	d1 2c       	mov	r13, r1
    5ea8:	f6 ed       	ldi	r31, 0xD6	; 214
    5eaa:	ef 2e       	mov	r14, r31
    5eac:	f3 e4       	ldi	r31, 0x43	; 67
    5eae:	ff 2e       	mov	r15, r31
    5eb0:	f0 2d       	mov	r31, r0
    5eb2:	12 c0       	rjmp	.+36     	; 0x5ed8 <tsl2591_getLux+0xde>
    5eb4:	0f 2e       	mov	r0, r31
    5eb6:	c1 2c       	mov	r12, r1
    5eb8:	f0 e5       	ldi	r31, 0x50	; 80
    5eba:	df 2e       	mov	r13, r31
    5ebc:	fa e1       	ldi	r31, 0x1A	; 26
    5ebe:	ef 2e       	mov	r14, r31
    5ec0:	f6 e4       	ldi	r31, 0x46	; 70
    5ec2:	ff 2e       	mov	r15, r31
    5ec4:	f0 2d       	mov	r31, r0
    5ec6:	08 c0       	rjmp	.+16     	; 0x5ed8 <tsl2591_getLux+0xde>
    5ec8:	0f 2e       	mov	r0, r31
    5eca:	c1 2c       	mov	r12, r1
    5ecc:	d1 2c       	mov	r13, r1
    5ece:	f0 e8       	ldi	r31, 0x80	; 128
    5ed0:	ef 2e       	mov	r14, r31
    5ed2:	ff e3       	ldi	r31, 0x3F	; 63
    5ed4:	ff 2e       	mov	r15, r31
    5ed6:	f0 2d       	mov	r31, r0
    5ed8:	07 2e       	mov	r0, r23
    5eda:	00 0c       	add	r0, r0
    5edc:	88 0b       	sbc	r24, r24
    5ede:	99 0b       	sbc	r25, r25
    5ee0:	a9 d6       	rcall	.+3410   	; 0x6c34 <__floatsisf>
    5ee2:	a7 01       	movw	r20, r14
    5ee4:	96 01       	movw	r18, r12
    5ee6:	36 d7       	rcall	.+3692   	; 0x6d54 <__mulsf3>
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	30 e0       	ldi	r19, 0x00	; 0
    5eec:	4c ec       	ldi	r20, 0xCC	; 204
    5eee:	53 e4       	ldi	r21, 0x43	; 67
    5ef0:	06 d6       	rcall	.+3084   	; 0x6afe <__divsf3>
    5ef2:	6b 01       	movw	r12, r22
    5ef4:	7c 01       	movw	r14, r24
    5ef6:	25 e8       	ldi	r18, 0x85	; 133
    5ef8:	3b ee       	ldi	r19, 0xEB	; 235
    5efa:	41 ed       	ldi	r20, 0xD1	; 209
    5efc:	5f e3       	ldi	r21, 0x3F	; 63
    5efe:	c5 01       	movw	r24, r10
    5f00:	b4 01       	movw	r22, r8
    5f02:	28 d7       	rcall	.+3664   	; 0x6d54 <__mulsf3>
    5f04:	9b 01       	movw	r18, r22
    5f06:	ac 01       	movw	r20, r24
    5f08:	c3 01       	movw	r24, r6
    5f0a:	b2 01       	movw	r22, r4
    5f0c:	93 d5       	rcall	.+2854   	; 0x6a34 <__subsf3>
    5f0e:	a7 01       	movw	r20, r14
    5f10:	96 01       	movw	r18, r12
    5f12:	f5 d5       	rcall	.+3050   	; 0x6afe <__divsf3>
    5f14:	16 2f       	mov	r17, r22
    5f16:	d7 2f       	mov	r29, r23
    5f18:	c8 2f       	mov	r28, r24
    5f1a:	09 2f       	mov	r16, r25
    5f1c:	2d e3       	ldi	r18, 0x3D	; 61
    5f1e:	3a e0       	ldi	r19, 0x0A	; 10
    5f20:	47 e1       	ldi	r20, 0x17	; 23
    5f22:	5f e3       	ldi	r21, 0x3F	; 63
    5f24:	c3 01       	movw	r24, r6
    5f26:	b2 01       	movw	r22, r4
    5f28:	15 d7       	rcall	.+3626   	; 0x6d54 <__mulsf3>
    5f2a:	2b 01       	movw	r4, r22
    5f2c:	3c 01       	movw	r6, r24
    5f2e:	26 ef       	ldi	r18, 0xF6	; 246
    5f30:	38 e2       	ldi	r19, 0x28	; 40
    5f32:	4c e5       	ldi	r20, 0x5C	; 92
    5f34:	5f e3       	ldi	r21, 0x3F	; 63
    5f36:	c5 01       	movw	r24, r10
    5f38:	b4 01       	movw	r22, r8
    5f3a:	0c d7       	rcall	.+3608   	; 0x6d54 <__mulsf3>
    5f3c:	9b 01       	movw	r18, r22
    5f3e:	ac 01       	movw	r20, r24
    5f40:	c3 01       	movw	r24, r6
    5f42:	b2 01       	movw	r22, r4
    5f44:	77 d5       	rcall	.+2798   	; 0x6a34 <__subsf3>
    5f46:	a7 01       	movw	r20, r14
    5f48:	96 01       	movw	r18, r12
    5f4a:	d9 d5       	rcall	.+2994   	; 0x6afe <__divsf3>
    5f4c:	c6 2e       	mov	r12, r22
    5f4e:	d7 2e       	mov	r13, r23
    5f50:	e8 2e       	mov	r14, r24
    5f52:	f9 2e       	mov	r15, r25
    5f54:	26 2f       	mov	r18, r22
    5f56:	37 2f       	mov	r19, r23
    5f58:	48 2f       	mov	r20, r24
    5f5a:	59 2f       	mov	r21, r25
    5f5c:	61 2f       	mov	r22, r17
    5f5e:	7d 2f       	mov	r23, r29
    5f60:	8c 2f       	mov	r24, r28
    5f62:	90 2f       	mov	r25, r16
    5f64:	f3 d6       	rcall	.+3558   	; 0x6d4c <__gesf2>
    5f66:	18 16       	cp	r1, r24
    5f68:	24 f0       	brlt	.+8      	; 0x5f72 <tsl2591_getLux+0x178>
    5f6a:	1c 2d       	mov	r17, r12
    5f6c:	dd 2d       	mov	r29, r13
    5f6e:	ce 2d       	mov	r28, r14
    5f70:	0f 2d       	mov	r16, r15
    5f72:	41 2f       	mov	r20, r17
    5f74:	5d 2f       	mov	r21, r29
    5f76:	6c 2f       	mov	r22, r28
    5f78:	70 2f       	mov	r23, r16
    5f7a:	f1 01       	movw	r30, r2
    5f7c:	40 83       	st	Z, r20
    5f7e:	51 83       	std	Z+1, r21	; 0x01
    5f80:	62 83       	std	Z+2, r22	; 0x02
    5f82:	73 83       	std	Z+3, r23	; 0x03
    5f84:	80 e0       	ldi	r24, 0x00	; 0
    5f86:	df 91       	pop	r29
    5f88:	cf 91       	pop	r28
    5f8a:	1f 91       	pop	r17
    5f8c:	0f 91       	pop	r16
    5f8e:	ff 90       	pop	r15
    5f90:	ef 90       	pop	r14
    5f92:	df 90       	pop	r13
    5f94:	cf 90       	pop	r12
    5f96:	bf 90       	pop	r11
    5f98:	af 90       	pop	r10
    5f9a:	9f 90       	pop	r9
    5f9c:	8f 90       	pop	r8
    5f9e:	7f 90       	pop	r7
    5fa0:	6f 90       	pop	r6
    5fa2:	5f 90       	pop	r5
    5fa4:	4f 90       	pop	r4
    5fa6:	3f 90       	pop	r3
    5fa8:	2f 90       	pop	r2
    5faa:	08 95       	ret

00005fac <_initTwiInterface>:
    5fac:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <_twiIsInitiated>
    5fb0:	81 11       	cpse	r24, r1
    5fb2:	0c c0       	rjmp	.+24     	; 0x5fcc <_initTwiInterface+0x20>
    5fb4:	8c e0       	ldi	r24, 0x0C	; 12
    5fb6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5fba:	8f ef       	ldi	r24, 0xFF	; 255
    5fbc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5fc0:	84 e0       	ldi	r24, 0x04	; 4
    5fc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	80 93 17 1a 	sts	0x1A17, r24	; 0x801a17 <_twiIsInitiated>
    5fcc:	08 95       	ret

00005fce <twiCreate>:
    5fce:	af 92       	push	r10
    5fd0:	bf 92       	push	r11
    5fd2:	cf 92       	push	r12
    5fd4:	df 92       	push	r13
    5fd6:	ef 92       	push	r14
    5fd8:	ff 92       	push	r15
    5fda:	0f 93       	push	r16
    5fdc:	1f 93       	push	r17
    5fde:	cf 93       	push	r28
    5fe0:	df 93       	push	r29
    5fe2:	a8 2e       	mov	r10, r24
    5fe4:	b6 2e       	mov	r11, r22
    5fe6:	69 01       	movw	r12, r18
    5fe8:	7a 01       	movw	r14, r20
    5fea:	84 e0       	ldi	r24, 0x04	; 4
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	99 d7       	rcall	.+3890   	; 0x6f22 <malloc>
    5ff0:	ec 01       	movw	r28, r24
    5ff2:	89 2b       	or	r24, r25
    5ff4:	61 f1       	breq	.+88     	; 0x604e <twiCreate+0x80>
    5ff6:	a8 82       	st	Y, r10
    5ff8:	81 e0       	ldi	r24, 0x01	; 1
    5ffa:	b8 12       	cpse	r11, r24
    5ffc:	12 c0       	rjmp	.+36     	; 0x6022 <twiCreate+0x54>
    5ffe:	c7 01       	movw	r24, r14
    6000:	b6 01       	movw	r22, r12
    6002:	20 ea       	ldi	r18, 0xA0	; 160
    6004:	36 e8       	ldi	r19, 0x86	; 134
    6006:	41 e0       	ldi	r20, 0x01	; 1
    6008:	50 e0       	ldi	r21, 0x00	; 0
    600a:	3e d7       	rcall	.+3708   	; 0x6e88 <__udivmodsi4>
    600c:	da 01       	movw	r26, r20
    600e:	c9 01       	movw	r24, r18
    6010:	40 97       	sbiw	r24, 0x10	; 16
    6012:	a1 09       	sbc	r26, r1
    6014:	b1 09       	sbc	r27, r1
    6016:	b6 95       	lsr	r27
    6018:	a7 95       	ror	r26
    601a:	97 95       	ror	r25
    601c:	87 95       	ror	r24
    601e:	89 83       	std	Y+1, r24	; 0x01
    6020:	11 c0       	rjmp	.+34     	; 0x6044 <twiCreate+0x76>
    6022:	c7 01       	movw	r24, r14
    6024:	b6 01       	movw	r22, r12
    6026:	20 e8       	ldi	r18, 0x80	; 128
    6028:	3a e1       	ldi	r19, 0x1A	; 26
    602a:	46 e0       	ldi	r20, 0x06	; 6
    602c:	50 e0       	ldi	r21, 0x00	; 0
    602e:	2c d7       	rcall	.+3672   	; 0x6e88 <__udivmodsi4>
    6030:	da 01       	movw	r26, r20
    6032:	c9 01       	movw	r24, r18
    6034:	40 97       	sbiw	r24, 0x10	; 16
    6036:	a1 09       	sbc	r26, r1
    6038:	b1 09       	sbc	r27, r1
    603a:	b6 95       	lsr	r27
    603c:	a7 95       	ror	r26
    603e:	97 95       	ror	r25
    6040:	87 95       	ror	r24
    6042:	89 83       	std	Y+1, r24	; 0x01
    6044:	1b 83       	std	Y+3, r17	; 0x03
    6046:	0a 83       	std	Y+2, r16	; 0x02
    6048:	8c 2f       	mov	r24, r28
    604a:	9d 2f       	mov	r25, r29
    604c:	02 c0       	rjmp	.+4      	; 0x6052 <twiCreate+0x84>
    604e:	80 e0       	ldi	r24, 0x00	; 0
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	df 91       	pop	r29
    6054:	cf 91       	pop	r28
    6056:	1f 91       	pop	r17
    6058:	0f 91       	pop	r16
    605a:	ff 90       	pop	r15
    605c:	ef 90       	pop	r14
    605e:	df 90       	pop	r13
    6060:	cf 90       	pop	r12
    6062:	bf 90       	pop	r11
    6064:	af 90       	pop	r10
    6066:	08 95       	ret

00006068 <twiIsBusy>:
    6068:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    606c:	81 70       	andi	r24, 0x01	; 1
    606e:	08 95       	ret

00006070 <twiTransmit>:
    6070:	ff 92       	push	r15
    6072:	0f 93       	push	r16
    6074:	1f 93       	push	r17
    6076:	cf 93       	push	r28
    6078:	df 93       	push	r29
    607a:	00 97       	sbiw	r24, 0x00	; 0
    607c:	d1 f1       	breq	.+116    	; 0x60f2 <twiTransmit+0x82>
    607e:	4a 30       	cpi	r20, 0x0A	; 10
    6080:	d0 f5       	brcc	.+116    	; 0x60f6 <twiTransmit+0x86>
    6082:	f4 2e       	mov	r15, r20
    6084:	8b 01       	movw	r16, r22
    6086:	ec 01       	movw	r28, r24
    6088:	ef df       	rcall	.-34     	; 0x6068 <twiIsBusy>
    608a:	81 11       	cpse	r24, r1
    608c:	36 c0       	rjmp	.+108    	; 0x60fa <twiTransmit+0x8a>
    608e:	80 91 0a 1a 	lds	r24, 0x1A0A	; 0x801a0a <_twiCurrentHandler>
    6092:	90 91 0b 1a 	lds	r25, 0x1A0B	; 0x801a0b <_twiCurrentHandler+0x1>
    6096:	c8 17       	cp	r28, r24
    6098:	d9 07       	cpc	r29, r25
    609a:	41 f0       	breq	.+16     	; 0x60ac <twiTransmit+0x3c>
    609c:	87 df       	rcall	.-242    	; 0x5fac <_initTwiInterface>
    609e:	89 81       	ldd	r24, Y+1	; 0x01
    60a0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    60a4:	d0 93 0b 1a 	sts	0x1A0B, r29	; 0x801a0b <_twiCurrentHandler+0x1>
    60a8:	c0 93 0a 1a 	sts	0x1A0A, r28	; 0x801a0a <_twiCurrentHandler>
    60ac:	81 e0       	ldi	r24, 0x01	; 1
    60ae:	8f 0d       	add	r24, r15
    60b0:	80 93 0c 1a 	sts	0x1A0C, r24	; 0x801a0c <_twiMessageLen>
    60b4:	88 81       	ld	r24, Y
    60b6:	88 0f       	add	r24, r24
    60b8:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <_twiMessageBuffer>
    60bc:	ff 20       	and	r15, r15
    60be:	89 f0       	breq	.+34     	; 0x60e2 <twiTransmit+0x72>
    60c0:	f8 01       	movw	r30, r16
    60c2:	ae e0       	ldi	r26, 0x0E	; 14
    60c4:	ba e1       	ldi	r27, 0x1A	; 26
    60c6:	4f ef       	ldi	r20, 0xFF	; 255
    60c8:	4f 0d       	add	r20, r15
    60ca:	64 2f       	mov	r22, r20
    60cc:	70 e0       	ldi	r23, 0x00	; 0
    60ce:	cb 01       	movw	r24, r22
    60d0:	01 96       	adiw	r24, 0x01	; 1
    60d2:	b8 01       	movw	r22, r16
    60d4:	68 0f       	add	r22, r24
    60d6:	79 1f       	adc	r23, r25
    60d8:	81 91       	ld	r24, Z+
    60da:	8d 93       	st	X+, r24
    60dc:	e6 17       	cp	r30, r22
    60de:	f7 07       	cpc	r31, r23
    60e0:	d9 f7       	brne	.-10     	; 0x60d8 <twiTransmit+0x68>
    60e2:	88 ef       	ldi	r24, 0xF8	; 248
    60e4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    60e8:	85 ea       	ldi	r24, 0xA5	; 165
    60ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    60ee:	84 e0       	ldi	r24, 0x04	; 4
    60f0:	05 c0       	rjmp	.+10     	; 0x60fc <twiTransmit+0x8c>
    60f2:	86 e0       	ldi	r24, 0x06	; 6
    60f4:	03 c0       	rjmp	.+6      	; 0x60fc <twiTransmit+0x8c>
    60f6:	87 e0       	ldi	r24, 0x07	; 7
    60f8:	01 c0       	rjmp	.+2      	; 0x60fc <twiTransmit+0x8c>
    60fa:	82 e0       	ldi	r24, 0x02	; 2
    60fc:	df 91       	pop	r29
    60fe:	cf 91       	pop	r28
    6100:	1f 91       	pop	r17
    6102:	0f 91       	pop	r16
    6104:	ff 90       	pop	r15
    6106:	08 95       	ret

00006108 <twiReceive>:
    6108:	1f 93       	push	r17
    610a:	cf 93       	push	r28
    610c:	df 93       	push	r29
    610e:	00 97       	sbiw	r24, 0x00	; 0
    6110:	29 f1       	breq	.+74     	; 0x615c <twiReceive+0x54>
    6112:	6b 30       	cpi	r22, 0x0B	; 11
    6114:	28 f5       	brcc	.+74     	; 0x6160 <twiReceive+0x58>
    6116:	16 2f       	mov	r17, r22
    6118:	ec 01       	movw	r28, r24
    611a:	a6 df       	rcall	.-180    	; 0x6068 <twiIsBusy>
    611c:	81 11       	cpse	r24, r1
    611e:	22 c0       	rjmp	.+68     	; 0x6164 <twiReceive+0x5c>
    6120:	80 91 0a 1a 	lds	r24, 0x1A0A	; 0x801a0a <_twiCurrentHandler>
    6124:	90 91 0b 1a 	lds	r25, 0x1A0B	; 0x801a0b <_twiCurrentHandler+0x1>
    6128:	c8 17       	cp	r28, r24
    612a:	d9 07       	cpc	r29, r25
    612c:	41 f0       	breq	.+16     	; 0x613e <twiReceive+0x36>
    612e:	3e df       	rcall	.-388    	; 0x5fac <_initTwiInterface>
    6130:	89 81       	ldd	r24, Y+1	; 0x01
    6132:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    6136:	d0 93 0b 1a 	sts	0x1A0B, r29	; 0x801a0b <_twiCurrentHandler+0x1>
    613a:	c0 93 0a 1a 	sts	0x1A0A, r28	; 0x801a0a <_twiCurrentHandler>
    613e:	10 93 0c 1a 	sts	0x1A0C, r17	; 0x801a0c <_twiMessageLen>
    6142:	88 81       	ld	r24, Y
    6144:	88 0f       	add	r24, r24
    6146:	81 60       	ori	r24, 0x01	; 1
    6148:	80 93 0d 1a 	sts	0x1A0D, r24	; 0x801a0d <_twiMessageBuffer>
    614c:	88 ef       	ldi	r24, 0xF8	; 248
    614e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    6152:	85 ea       	ldi	r24, 0xA5	; 165
    6154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6158:	85 e0       	ldi	r24, 0x05	; 5
    615a:	05 c0       	rjmp	.+10     	; 0x6166 <twiReceive+0x5e>
    615c:	86 e0       	ldi	r24, 0x06	; 6
    615e:	03 c0       	rjmp	.+6      	; 0x6166 <twiReceive+0x5e>
    6160:	87 e0       	ldi	r24, 0x07	; 7
    6162:	01 c0       	rjmp	.+2      	; 0x6166 <twiReceive+0x5e>
    6164:	82 e0       	ldi	r24, 0x02	; 2
    6166:	df 91       	pop	r29
    6168:	cf 91       	pop	r28
    616a:	1f 91       	pop	r17
    616c:	08 95       	ret

0000616e <__vector_39>:
    616e:	1f 92       	push	r1
    6170:	0f 92       	push	r0
    6172:	0f b6       	in	r0, 0x3f	; 63
    6174:	0f 92       	push	r0
    6176:	11 24       	eor	r1, r1
    6178:	0b b6       	in	r0, 0x3b	; 59
    617a:	0f 92       	push	r0
    617c:	2f 93       	push	r18
    617e:	3f 93       	push	r19
    6180:	4f 93       	push	r20
    6182:	5f 93       	push	r21
    6184:	6f 93       	push	r22
    6186:	7f 93       	push	r23
    6188:	8f 93       	push	r24
    618a:	9f 93       	push	r25
    618c:	af 93       	push	r26
    618e:	bf 93       	push	r27
    6190:	ef 93       	push	r30
    6192:	ff 93       	push	r31
    6194:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6198:	8e 2f       	mov	r24, r30
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	fc 01       	movw	r30, r24
    619e:	38 97       	sbiw	r30, 0x08	; 8
    61a0:	e1 35       	cpi	r30, 0x51	; 81
    61a2:	f1 05       	cpc	r31, r1
    61a4:	08 f0       	brcs	.+2      	; 0x61a8 <__vector_39+0x3a>
    61a6:	75 c0       	rjmp	.+234    	; 0x6292 <__vector_39+0x124>
    61a8:	88 27       	eor	r24, r24
    61aa:	e4 58       	subi	r30, 0x84	; 132
    61ac:	ff 4f       	sbci	r31, 0xFF	; 255
    61ae:	8f 4f       	sbci	r24, 0xFF	; 255
    61b0:	8d c6       	rjmp	.+3354   	; 0x6ecc <__tablejump2__>
    61b2:	10 92 09 1a 	sts	0x1A09, r1	; 0x801a09 <_index.1885>
    61b6:	e0 91 09 1a 	lds	r30, 0x1A09	; 0x801a09 <_index.1885>
    61ba:	80 91 0c 1a 	lds	r24, 0x1A0C	; 0x801a0c <_twiMessageLen>
    61be:	e8 17       	cp	r30, r24
    61c0:	70 f4       	brcc	.+28     	; 0x61de <__vector_39+0x70>
    61c2:	81 e0       	ldi	r24, 0x01	; 1
    61c4:	8e 0f       	add	r24, r30
    61c6:	80 93 09 1a 	sts	0x1A09, r24	; 0x801a09 <_index.1885>
    61ca:	f0 e0       	ldi	r31, 0x00	; 0
    61cc:	e3 5f       	subi	r30, 0xF3	; 243
    61ce:	f5 4e       	sbci	r31, 0xE5	; 229
    61d0:	80 81       	ld	r24, Z
    61d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    61d6:	85 e8       	ldi	r24, 0x85	; 133
    61d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61dc:	72 c0       	rjmp	.+228    	; 0x62c2 <__vector_39+0x154>
    61de:	84 e9       	ldi	r24, 0x94	; 148
    61e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    61e4:	80 91 0a 1a 	lds	r24, 0x1A0A	; 0x801a0a <_twiCurrentHandler>
    61e8:	90 91 0b 1a 	lds	r25, 0x1A0B	; 0x801a0b <_twiCurrentHandler+0x1>
    61ec:	dc 01       	movw	r26, r24
    61ee:	12 96       	adiw	r26, 0x02	; 2
    61f0:	ed 91       	ld	r30, X+
    61f2:	fc 91       	ld	r31, X
    61f4:	13 97       	sbiw	r26, 0x03	; 3
    61f6:	30 97       	sbiw	r30, 0x00	; 0
    61f8:	09 f4       	brne	.+2      	; 0x61fc <__vector_39+0x8e>
    61fa:	63 c0       	rjmp	.+198    	; 0x62c2 <__vector_39+0x154>
    61fc:	20 e0       	ldi	r18, 0x00	; 0
    61fe:	40 e0       	ldi	r20, 0x00	; 0
    6200:	50 e0       	ldi	r21, 0x00	; 0
    6202:	64 e0       	ldi	r22, 0x04	; 4
    6204:	19 95       	eicall
    6206:	5d c0       	rjmp	.+186    	; 0x62c2 <__vector_39+0x154>
    6208:	e0 91 09 1a 	lds	r30, 0x1A09	; 0x801a09 <_index.1885>
    620c:	81 e0       	ldi	r24, 0x01	; 1
    620e:	8e 0f       	add	r24, r30
    6210:	80 93 09 1a 	sts	0x1A09, r24	; 0x801a09 <_index.1885>
    6214:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6218:	f0 e0       	ldi	r31, 0x00	; 0
    621a:	e3 5f       	subi	r30, 0xF3	; 243
    621c:	f5 4e       	sbci	r31, 0xE5	; 229
    621e:	80 83       	st	Z, r24
    6220:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6224:	80 34       	cpi	r24, 0x40	; 64
    6226:	11 f4       	brne	.+4      	; 0x622c <__vector_39+0xbe>
    6228:	10 92 09 1a 	sts	0x1A09, r1	; 0x801a09 <_index.1885>
    622c:	20 91 09 1a 	lds	r18, 0x1A09	; 0x801a09 <_index.1885>
    6230:	30 e0       	ldi	r19, 0x00	; 0
    6232:	80 91 0c 1a 	lds	r24, 0x1A0C	; 0x801a0c <_twiMessageLen>
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	01 97       	sbiw	r24, 0x01	; 1
    623a:	28 17       	cp	r18, r24
    623c:	39 07       	cpc	r19, r25
    623e:	24 f4       	brge	.+8      	; 0x6248 <__vector_39+0xda>
    6240:	85 ec       	ldi	r24, 0xC5	; 197
    6242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6246:	3d c0       	rjmp	.+122    	; 0x62c2 <__vector_39+0x154>
    6248:	85 e8       	ldi	r24, 0x85	; 133
    624a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    624e:	39 c0       	rjmp	.+114    	; 0x62c2 <__vector_39+0x154>
    6250:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    6254:	e0 91 09 1a 	lds	r30, 0x1A09	; 0x801a09 <_index.1885>
    6258:	f0 e0       	ldi	r31, 0x00	; 0
    625a:	e3 5f       	subi	r30, 0xF3	; 243
    625c:	f5 4e       	sbci	r31, 0xE5	; 229
    625e:	80 83       	st	Z, r24
    6260:	84 e9       	ldi	r24, 0x94	; 148
    6262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6266:	80 91 0a 1a 	lds	r24, 0x1A0A	; 0x801a0a <_twiCurrentHandler>
    626a:	90 91 0b 1a 	lds	r25, 0x1A0B	; 0x801a0b <_twiCurrentHandler+0x1>
    626e:	dc 01       	movw	r26, r24
    6270:	12 96       	adiw	r26, 0x02	; 2
    6272:	ed 91       	ld	r30, X+
    6274:	fc 91       	ld	r31, X
    6276:	13 97       	sbiw	r26, 0x03	; 3
    6278:	30 97       	sbiw	r30, 0x00	; 0
    627a:	19 f1       	breq	.+70     	; 0x62c2 <__vector_39+0x154>
    627c:	20 91 0c 1a 	lds	r18, 0x1A0C	; 0x801a0c <_twiMessageLen>
    6280:	4d e0       	ldi	r20, 0x0D	; 13
    6282:	5a e1       	ldi	r21, 0x1A	; 26
    6284:	65 e0       	ldi	r22, 0x05	; 5
    6286:	19 95       	eicall
    6288:	1c c0       	rjmp	.+56     	; 0x62c2 <__vector_39+0x154>
    628a:	85 ea       	ldi	r24, 0xA5	; 165
    628c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    6290:	18 c0       	rjmp	.+48     	; 0x62c2 <__vector_39+0x154>
    6292:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    6296:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    629a:	84 e0       	ldi	r24, 0x04	; 4
    629c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    62a0:	80 91 0a 1a 	lds	r24, 0x1A0A	; 0x801a0a <_twiCurrentHandler>
    62a4:	90 91 0b 1a 	lds	r25, 0x1A0B	; 0x801a0b <_twiCurrentHandler+0x1>
    62a8:	dc 01       	movw	r26, r24
    62aa:	12 96       	adiw	r26, 0x02	; 2
    62ac:	ed 91       	ld	r30, X+
    62ae:	fc 91       	ld	r31, X
    62b0:	13 97       	sbiw	r26, 0x03	; 3
    62b2:	30 97       	sbiw	r30, 0x00	; 0
    62b4:	31 f0       	breq	.+12     	; 0x62c2 <__vector_39+0x154>
    62b6:	20 e0       	ldi	r18, 0x00	; 0
    62b8:	40 e0       	ldi	r20, 0x00	; 0
    62ba:	50 e0       	ldi	r21, 0x00	; 0
    62bc:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    62c0:	19 95       	eicall
    62c2:	ff 91       	pop	r31
    62c4:	ef 91       	pop	r30
    62c6:	bf 91       	pop	r27
    62c8:	af 91       	pop	r26
    62ca:	9f 91       	pop	r25
    62cc:	8f 91       	pop	r24
    62ce:	7f 91       	pop	r23
    62d0:	6f 91       	pop	r22
    62d2:	5f 91       	pop	r21
    62d4:	4f 91       	pop	r20
    62d6:	3f 91       	pop	r19
    62d8:	2f 91       	pop	r18
    62da:	0f 90       	pop	r0
    62dc:	0b be       	out	0x3b, r0	; 59
    62de:	0f 90       	pop	r0
    62e0:	0f be       	out	0x3f, r0	; 63
    62e2:	0f 90       	pop	r0
    62e4:	1f 90       	pop	r1
    62e6:	18 95       	reti

000062e8 <fifo_init>:
    62e8:	fc 01       	movw	r30, r24
    62ea:	41 11       	cpse	r20, r1
    62ec:	01 c0       	rjmp	.+2      	; 0x62f0 <fifo_init+0x8>
    62ee:	3a d7       	rcall	.+3700   	; 0x7164 <abort>
    62f0:	84 2f       	mov	r24, r20
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	9c 01       	movw	r18, r24
    62f6:	21 50       	subi	r18, 0x01	; 1
    62f8:	31 09       	sbc	r19, r1
    62fa:	82 23       	and	r24, r18
    62fc:	93 23       	and	r25, r19
    62fe:	89 2b       	or	r24, r25
    6300:	09 f0       	breq	.+2      	; 0x6304 <fifo_init+0x1c>
    6302:	30 d7       	rcall	.+3680   	; 0x7164 <abort>
    6304:	41 38       	cpi	r20, 0x81	; 129
    6306:	08 f0       	brcs	.+2      	; 0x630a <fifo_init+0x22>
    6308:	2d d7       	rcall	.+3674   	; 0x7164 <abort>
    630a:	12 82       	std	Z+2, r1	; 0x02
    630c:	13 82       	std	Z+3, r1	; 0x03
    630e:	44 83       	std	Z+4, r20	; 0x04
    6310:	44 0f       	add	r20, r20
    6312:	41 50       	subi	r20, 0x01	; 1
    6314:	45 83       	std	Z+5, r20	; 0x05
    6316:	71 83       	std	Z+1, r23	; 0x01
    6318:	60 83       	st	Z, r22
    631a:	80 e0       	ldi	r24, 0x00	; 0
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	08 95       	ret

00006320 <vfprintf>:
    6320:	2f 92       	push	r2
    6322:	3f 92       	push	r3
    6324:	4f 92       	push	r4
    6326:	5f 92       	push	r5
    6328:	6f 92       	push	r6
    632a:	7f 92       	push	r7
    632c:	8f 92       	push	r8
    632e:	9f 92       	push	r9
    6330:	af 92       	push	r10
    6332:	bf 92       	push	r11
    6334:	cf 92       	push	r12
    6336:	df 92       	push	r13
    6338:	ef 92       	push	r14
    633a:	ff 92       	push	r15
    633c:	0f 93       	push	r16
    633e:	1f 93       	push	r17
    6340:	cf 93       	push	r28
    6342:	df 93       	push	r29
    6344:	cd b7       	in	r28, 0x3d	; 61
    6346:	de b7       	in	r29, 0x3e	; 62
    6348:	60 97       	sbiw	r28, 0x10	; 16
    634a:	0f b6       	in	r0, 0x3f	; 63
    634c:	f8 94       	cli
    634e:	de bf       	out	0x3e, r29	; 62
    6350:	0f be       	out	0x3f, r0	; 63
    6352:	cd bf       	out	0x3d, r28	; 61
    6354:	7c 01       	movw	r14, r24
    6356:	1b 01       	movw	r2, r22
    6358:	6a 01       	movw	r12, r20
    635a:	fc 01       	movw	r30, r24
    635c:	17 82       	std	Z+7, r1	; 0x07
    635e:	16 82       	std	Z+6, r1	; 0x06
    6360:	83 81       	ldd	r24, Z+3	; 0x03
    6362:	81 ff       	sbrs	r24, 1
    6364:	2b c3       	rjmp	.+1622   	; 0x69bc <vfprintf+0x69c>
    6366:	9e 01       	movw	r18, r28
    6368:	2f 5f       	subi	r18, 0xFF	; 255
    636a:	3f 4f       	sbci	r19, 0xFF	; 255
    636c:	39 01       	movw	r6, r18
    636e:	f7 01       	movw	r30, r14
    6370:	93 81       	ldd	r25, Z+3	; 0x03
    6372:	f1 01       	movw	r30, r2
    6374:	93 fd       	sbrc	r25, 3
    6376:	85 91       	lpm	r24, Z+
    6378:	93 ff       	sbrs	r25, 3
    637a:	81 91       	ld	r24, Z+
    637c:	1f 01       	movw	r2, r30
    637e:	88 23       	and	r24, r24
    6380:	09 f4       	brne	.+2      	; 0x6384 <vfprintf+0x64>
    6382:	18 c3       	rjmp	.+1584   	; 0x69b4 <vfprintf+0x694>
    6384:	85 32       	cpi	r24, 0x25	; 37
    6386:	39 f4       	brne	.+14     	; 0x6396 <vfprintf+0x76>
    6388:	93 fd       	sbrc	r25, 3
    638a:	85 91       	lpm	r24, Z+
    638c:	93 ff       	sbrs	r25, 3
    638e:	81 91       	ld	r24, Z+
    6390:	1f 01       	movw	r2, r30
    6392:	85 32       	cpi	r24, 0x25	; 37
    6394:	39 f4       	brne	.+14     	; 0x63a4 <vfprintf+0x84>
    6396:	b7 01       	movw	r22, r14
    6398:	90 e0       	ldi	r25, 0x00	; 0
    639a:	0e 94 03 3a 	call	0x7406	; 0x7406 <fputc>
    639e:	56 01       	movw	r10, r12
    63a0:	65 01       	movw	r12, r10
    63a2:	e5 cf       	rjmp	.-54     	; 0x636e <vfprintf+0x4e>
    63a4:	10 e0       	ldi	r17, 0x00	; 0
    63a6:	51 2c       	mov	r5, r1
    63a8:	91 2c       	mov	r9, r1
    63aa:	ff e1       	ldi	r31, 0x1F	; 31
    63ac:	f9 15       	cp	r31, r9
    63ae:	d8 f0       	brcs	.+54     	; 0x63e6 <vfprintf+0xc6>
    63b0:	8b 32       	cpi	r24, 0x2B	; 43
    63b2:	79 f0       	breq	.+30     	; 0x63d2 <vfprintf+0xb2>
    63b4:	38 f4       	brcc	.+14     	; 0x63c4 <vfprintf+0xa4>
    63b6:	80 32       	cpi	r24, 0x20	; 32
    63b8:	79 f0       	breq	.+30     	; 0x63d8 <vfprintf+0xb8>
    63ba:	83 32       	cpi	r24, 0x23	; 35
    63bc:	a1 f4       	brne	.+40     	; 0x63e6 <vfprintf+0xc6>
    63be:	f9 2d       	mov	r31, r9
    63c0:	f0 61       	ori	r31, 0x10	; 16
    63c2:	2e c0       	rjmp	.+92     	; 0x6420 <vfprintf+0x100>
    63c4:	8d 32       	cpi	r24, 0x2D	; 45
    63c6:	61 f0       	breq	.+24     	; 0x63e0 <vfprintf+0xc0>
    63c8:	80 33       	cpi	r24, 0x30	; 48
    63ca:	69 f4       	brne	.+26     	; 0x63e6 <vfprintf+0xc6>
    63cc:	29 2d       	mov	r18, r9
    63ce:	21 60       	ori	r18, 0x01	; 1
    63d0:	2d c0       	rjmp	.+90     	; 0x642c <vfprintf+0x10c>
    63d2:	39 2d       	mov	r19, r9
    63d4:	32 60       	ori	r19, 0x02	; 2
    63d6:	93 2e       	mov	r9, r19
    63d8:	89 2d       	mov	r24, r9
    63da:	84 60       	ori	r24, 0x04	; 4
    63dc:	98 2e       	mov	r9, r24
    63de:	2a c0       	rjmp	.+84     	; 0x6434 <vfprintf+0x114>
    63e0:	e9 2d       	mov	r30, r9
    63e2:	e8 60       	ori	r30, 0x08	; 8
    63e4:	15 c0       	rjmp	.+42     	; 0x6410 <vfprintf+0xf0>
    63e6:	97 fc       	sbrc	r9, 7
    63e8:	2d c0       	rjmp	.+90     	; 0x6444 <vfprintf+0x124>
    63ea:	20 ed       	ldi	r18, 0xD0	; 208
    63ec:	28 0f       	add	r18, r24
    63ee:	2a 30       	cpi	r18, 0x0A	; 10
    63f0:	88 f4       	brcc	.+34     	; 0x6414 <vfprintf+0xf4>
    63f2:	96 fe       	sbrs	r9, 6
    63f4:	06 c0       	rjmp	.+12     	; 0x6402 <vfprintf+0xe2>
    63f6:	3a e0       	ldi	r19, 0x0A	; 10
    63f8:	13 9f       	mul	r17, r19
    63fa:	20 0d       	add	r18, r0
    63fc:	11 24       	eor	r1, r1
    63fe:	12 2f       	mov	r17, r18
    6400:	19 c0       	rjmp	.+50     	; 0x6434 <vfprintf+0x114>
    6402:	8a e0       	ldi	r24, 0x0A	; 10
    6404:	58 9e       	mul	r5, r24
    6406:	20 0d       	add	r18, r0
    6408:	11 24       	eor	r1, r1
    640a:	52 2e       	mov	r5, r18
    640c:	e9 2d       	mov	r30, r9
    640e:	e0 62       	ori	r30, 0x20	; 32
    6410:	9e 2e       	mov	r9, r30
    6412:	10 c0       	rjmp	.+32     	; 0x6434 <vfprintf+0x114>
    6414:	8e 32       	cpi	r24, 0x2E	; 46
    6416:	31 f4       	brne	.+12     	; 0x6424 <vfprintf+0x104>
    6418:	96 fc       	sbrc	r9, 6
    641a:	cc c2       	rjmp	.+1432   	; 0x69b4 <vfprintf+0x694>
    641c:	f9 2d       	mov	r31, r9
    641e:	f0 64       	ori	r31, 0x40	; 64
    6420:	9f 2e       	mov	r9, r31
    6422:	08 c0       	rjmp	.+16     	; 0x6434 <vfprintf+0x114>
    6424:	8c 36       	cpi	r24, 0x6C	; 108
    6426:	21 f4       	brne	.+8      	; 0x6430 <vfprintf+0x110>
    6428:	29 2d       	mov	r18, r9
    642a:	20 68       	ori	r18, 0x80	; 128
    642c:	92 2e       	mov	r9, r18
    642e:	02 c0       	rjmp	.+4      	; 0x6434 <vfprintf+0x114>
    6430:	88 36       	cpi	r24, 0x68	; 104
    6432:	41 f4       	brne	.+16     	; 0x6444 <vfprintf+0x124>
    6434:	f1 01       	movw	r30, r2
    6436:	93 fd       	sbrc	r25, 3
    6438:	85 91       	lpm	r24, Z+
    643a:	93 ff       	sbrs	r25, 3
    643c:	81 91       	ld	r24, Z+
    643e:	1f 01       	movw	r2, r30
    6440:	81 11       	cpse	r24, r1
    6442:	b3 cf       	rjmp	.-154    	; 0x63aa <vfprintf+0x8a>
    6444:	9b eb       	ldi	r25, 0xBB	; 187
    6446:	98 0f       	add	r25, r24
    6448:	93 30       	cpi	r25, 0x03	; 3
    644a:	20 f4       	brcc	.+8      	; 0x6454 <vfprintf+0x134>
    644c:	99 2d       	mov	r25, r9
    644e:	90 61       	ori	r25, 0x10	; 16
    6450:	80 5e       	subi	r24, 0xE0	; 224
    6452:	07 c0       	rjmp	.+14     	; 0x6462 <vfprintf+0x142>
    6454:	9b e9       	ldi	r25, 0x9B	; 155
    6456:	98 0f       	add	r25, r24
    6458:	93 30       	cpi	r25, 0x03	; 3
    645a:	08 f0       	brcs	.+2      	; 0x645e <vfprintf+0x13e>
    645c:	59 c1       	rjmp	.+690    	; 0x6710 <vfprintf+0x3f0>
    645e:	99 2d       	mov	r25, r9
    6460:	9f 7e       	andi	r25, 0xEF	; 239
    6462:	96 ff       	sbrs	r25, 6
    6464:	16 e0       	ldi	r17, 0x06	; 6
    6466:	9f 73       	andi	r25, 0x3F	; 63
    6468:	99 2e       	mov	r9, r25
    646a:	85 36       	cpi	r24, 0x65	; 101
    646c:	19 f4       	brne	.+6      	; 0x6474 <vfprintf+0x154>
    646e:	90 64       	ori	r25, 0x40	; 64
    6470:	99 2e       	mov	r9, r25
    6472:	08 c0       	rjmp	.+16     	; 0x6484 <vfprintf+0x164>
    6474:	86 36       	cpi	r24, 0x66	; 102
    6476:	21 f4       	brne	.+8      	; 0x6480 <vfprintf+0x160>
    6478:	39 2f       	mov	r19, r25
    647a:	30 68       	ori	r19, 0x80	; 128
    647c:	93 2e       	mov	r9, r19
    647e:	02 c0       	rjmp	.+4      	; 0x6484 <vfprintf+0x164>
    6480:	11 11       	cpse	r17, r1
    6482:	11 50       	subi	r17, 0x01	; 1
    6484:	97 fe       	sbrs	r9, 7
    6486:	07 c0       	rjmp	.+14     	; 0x6496 <vfprintf+0x176>
    6488:	1c 33       	cpi	r17, 0x3C	; 60
    648a:	50 f4       	brcc	.+20     	; 0x64a0 <vfprintf+0x180>
    648c:	44 24       	eor	r4, r4
    648e:	43 94       	inc	r4
    6490:	41 0e       	add	r4, r17
    6492:	27 e0       	ldi	r18, 0x07	; 7
    6494:	0b c0       	rjmp	.+22     	; 0x64ac <vfprintf+0x18c>
    6496:	18 30       	cpi	r17, 0x08	; 8
    6498:	38 f0       	brcs	.+14     	; 0x64a8 <vfprintf+0x188>
    649a:	27 e0       	ldi	r18, 0x07	; 7
    649c:	17 e0       	ldi	r17, 0x07	; 7
    649e:	05 c0       	rjmp	.+10     	; 0x64aa <vfprintf+0x18a>
    64a0:	27 e0       	ldi	r18, 0x07	; 7
    64a2:	9c e3       	ldi	r25, 0x3C	; 60
    64a4:	49 2e       	mov	r4, r25
    64a6:	02 c0       	rjmp	.+4      	; 0x64ac <vfprintf+0x18c>
    64a8:	21 2f       	mov	r18, r17
    64aa:	41 2c       	mov	r4, r1
    64ac:	56 01       	movw	r10, r12
    64ae:	84 e0       	ldi	r24, 0x04	; 4
    64b0:	a8 0e       	add	r10, r24
    64b2:	b1 1c       	adc	r11, r1
    64b4:	f6 01       	movw	r30, r12
    64b6:	60 81       	ld	r22, Z
    64b8:	71 81       	ldd	r23, Z+1	; 0x01
    64ba:	82 81       	ldd	r24, Z+2	; 0x02
    64bc:	93 81       	ldd	r25, Z+3	; 0x03
    64be:	04 2d       	mov	r16, r4
    64c0:	a3 01       	movw	r20, r6
    64c2:	54 d6       	rcall	.+3240   	; 0x716c <__ftoa_engine>
    64c4:	6c 01       	movw	r12, r24
    64c6:	f9 81       	ldd	r31, Y+1	; 0x01
    64c8:	fc 87       	std	Y+12, r31	; 0x0c
    64ca:	f0 ff       	sbrs	r31, 0
    64cc:	02 c0       	rjmp	.+4      	; 0x64d2 <vfprintf+0x1b2>
    64ce:	f3 ff       	sbrs	r31, 3
    64d0:	06 c0       	rjmp	.+12     	; 0x64de <vfprintf+0x1be>
    64d2:	91 fc       	sbrc	r9, 1
    64d4:	06 c0       	rjmp	.+12     	; 0x64e2 <vfprintf+0x1c2>
    64d6:	92 fe       	sbrs	r9, 2
    64d8:	06 c0       	rjmp	.+12     	; 0x64e6 <vfprintf+0x1c6>
    64da:	00 e2       	ldi	r16, 0x20	; 32
    64dc:	05 c0       	rjmp	.+10     	; 0x64e8 <vfprintf+0x1c8>
    64de:	0d e2       	ldi	r16, 0x2D	; 45
    64e0:	03 c0       	rjmp	.+6      	; 0x64e8 <vfprintf+0x1c8>
    64e2:	0b e2       	ldi	r16, 0x2B	; 43
    64e4:	01 c0       	rjmp	.+2      	; 0x64e8 <vfprintf+0x1c8>
    64e6:	00 e0       	ldi	r16, 0x00	; 0
    64e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    64ea:	8c 70       	andi	r24, 0x0C	; 12
    64ec:	19 f0       	breq	.+6      	; 0x64f4 <vfprintf+0x1d4>
    64ee:	01 11       	cpse	r16, r1
    64f0:	43 c2       	rjmp	.+1158   	; 0x6978 <vfprintf+0x658>
    64f2:	80 c2       	rjmp	.+1280   	; 0x69f4 <vfprintf+0x6d4>
    64f4:	97 fe       	sbrs	r9, 7
    64f6:	10 c0       	rjmp	.+32     	; 0x6518 <vfprintf+0x1f8>
    64f8:	4c 0c       	add	r4, r12
    64fa:	fc 85       	ldd	r31, Y+12	; 0x0c
    64fc:	f4 ff       	sbrs	r31, 4
    64fe:	04 c0       	rjmp	.+8      	; 0x6508 <vfprintf+0x1e8>
    6500:	8a 81       	ldd	r24, Y+2	; 0x02
    6502:	81 33       	cpi	r24, 0x31	; 49
    6504:	09 f4       	brne	.+2      	; 0x6508 <vfprintf+0x1e8>
    6506:	4a 94       	dec	r4
    6508:	14 14       	cp	r1, r4
    650a:	74 f5       	brge	.+92     	; 0x6568 <vfprintf+0x248>
    650c:	28 e0       	ldi	r18, 0x08	; 8
    650e:	24 15       	cp	r18, r4
    6510:	78 f5       	brcc	.+94     	; 0x6570 <vfprintf+0x250>
    6512:	88 e0       	ldi	r24, 0x08	; 8
    6514:	48 2e       	mov	r4, r24
    6516:	2c c0       	rjmp	.+88     	; 0x6570 <vfprintf+0x250>
    6518:	96 fc       	sbrc	r9, 6
    651a:	2a c0       	rjmp	.+84     	; 0x6570 <vfprintf+0x250>
    651c:	81 2f       	mov	r24, r17
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	8c 15       	cp	r24, r12
    6522:	9d 05       	cpc	r25, r13
    6524:	9c f0       	brlt	.+38     	; 0x654c <vfprintf+0x22c>
    6526:	3c ef       	ldi	r19, 0xFC	; 252
    6528:	c3 16       	cp	r12, r19
    652a:	3f ef       	ldi	r19, 0xFF	; 255
    652c:	d3 06       	cpc	r13, r19
    652e:	74 f0       	brlt	.+28     	; 0x654c <vfprintf+0x22c>
    6530:	89 2d       	mov	r24, r9
    6532:	80 68       	ori	r24, 0x80	; 128
    6534:	98 2e       	mov	r9, r24
    6536:	0a c0       	rjmp	.+20     	; 0x654c <vfprintf+0x22c>
    6538:	e2 e0       	ldi	r30, 0x02	; 2
    653a:	f0 e0       	ldi	r31, 0x00	; 0
    653c:	ec 0f       	add	r30, r28
    653e:	fd 1f       	adc	r31, r29
    6540:	e1 0f       	add	r30, r17
    6542:	f1 1d       	adc	r31, r1
    6544:	80 81       	ld	r24, Z
    6546:	80 33       	cpi	r24, 0x30	; 48
    6548:	19 f4       	brne	.+6      	; 0x6550 <vfprintf+0x230>
    654a:	11 50       	subi	r17, 0x01	; 1
    654c:	11 11       	cpse	r17, r1
    654e:	f4 cf       	rjmp	.-24     	; 0x6538 <vfprintf+0x218>
    6550:	97 fe       	sbrs	r9, 7
    6552:	0e c0       	rjmp	.+28     	; 0x6570 <vfprintf+0x250>
    6554:	44 24       	eor	r4, r4
    6556:	43 94       	inc	r4
    6558:	41 0e       	add	r4, r17
    655a:	81 2f       	mov	r24, r17
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	c8 16       	cp	r12, r24
    6560:	d9 06       	cpc	r13, r25
    6562:	2c f4       	brge	.+10     	; 0x656e <vfprintf+0x24e>
    6564:	1c 19       	sub	r17, r12
    6566:	04 c0       	rjmp	.+8      	; 0x6570 <vfprintf+0x250>
    6568:	44 24       	eor	r4, r4
    656a:	43 94       	inc	r4
    656c:	01 c0       	rjmp	.+2      	; 0x6570 <vfprintf+0x250>
    656e:	10 e0       	ldi	r17, 0x00	; 0
    6570:	97 fe       	sbrs	r9, 7
    6572:	06 c0       	rjmp	.+12     	; 0x6580 <vfprintf+0x260>
    6574:	1c 14       	cp	r1, r12
    6576:	1d 04       	cpc	r1, r13
    6578:	34 f4       	brge	.+12     	; 0x6586 <vfprintf+0x266>
    657a:	c6 01       	movw	r24, r12
    657c:	01 96       	adiw	r24, 0x01	; 1
    657e:	05 c0       	rjmp	.+10     	; 0x658a <vfprintf+0x26a>
    6580:	85 e0       	ldi	r24, 0x05	; 5
    6582:	90 e0       	ldi	r25, 0x00	; 0
    6584:	02 c0       	rjmp	.+4      	; 0x658a <vfprintf+0x26a>
    6586:	81 e0       	ldi	r24, 0x01	; 1
    6588:	90 e0       	ldi	r25, 0x00	; 0
    658a:	01 11       	cpse	r16, r1
    658c:	01 96       	adiw	r24, 0x01	; 1
    658e:	11 23       	and	r17, r17
    6590:	31 f0       	breq	.+12     	; 0x659e <vfprintf+0x27e>
    6592:	21 2f       	mov	r18, r17
    6594:	30 e0       	ldi	r19, 0x00	; 0
    6596:	2f 5f       	subi	r18, 0xFF	; 255
    6598:	3f 4f       	sbci	r19, 0xFF	; 255
    659a:	82 0f       	add	r24, r18
    659c:	93 1f       	adc	r25, r19
    659e:	25 2d       	mov	r18, r5
    65a0:	30 e0       	ldi	r19, 0x00	; 0
    65a2:	82 17       	cp	r24, r18
    65a4:	93 07       	cpc	r25, r19
    65a6:	14 f4       	brge	.+4      	; 0x65ac <vfprintf+0x28c>
    65a8:	58 1a       	sub	r5, r24
    65aa:	01 c0       	rjmp	.+2      	; 0x65ae <vfprintf+0x28e>
    65ac:	51 2c       	mov	r5, r1
    65ae:	89 2d       	mov	r24, r9
    65b0:	89 70       	andi	r24, 0x09	; 9
    65b2:	41 f4       	brne	.+16     	; 0x65c4 <vfprintf+0x2a4>
    65b4:	55 20       	and	r5, r5
    65b6:	31 f0       	breq	.+12     	; 0x65c4 <vfprintf+0x2a4>
    65b8:	b7 01       	movw	r22, r14
    65ba:	80 e2       	ldi	r24, 0x20	; 32
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	23 d7       	rcall	.+3654   	; 0x7406 <fputc>
    65c0:	5a 94       	dec	r5
    65c2:	f8 cf       	rjmp	.-16     	; 0x65b4 <vfprintf+0x294>
    65c4:	00 23       	and	r16, r16
    65c6:	21 f0       	breq	.+8      	; 0x65d0 <vfprintf+0x2b0>
    65c8:	b7 01       	movw	r22, r14
    65ca:	80 2f       	mov	r24, r16
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	1b d7       	rcall	.+3638   	; 0x7406 <fputc>
    65d0:	93 fc       	sbrc	r9, 3
    65d2:	08 c0       	rjmp	.+16     	; 0x65e4 <vfprintf+0x2c4>
    65d4:	55 20       	and	r5, r5
    65d6:	31 f0       	breq	.+12     	; 0x65e4 <vfprintf+0x2c4>
    65d8:	b7 01       	movw	r22, r14
    65da:	80 e3       	ldi	r24, 0x30	; 48
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	13 d7       	rcall	.+3622   	; 0x7406 <fputc>
    65e0:	5a 94       	dec	r5
    65e2:	f8 cf       	rjmp	.-16     	; 0x65d4 <vfprintf+0x2b4>
    65e4:	97 fe       	sbrs	r9, 7
    65e6:	4a c0       	rjmp	.+148    	; 0x667c <vfprintf+0x35c>
    65e8:	46 01       	movw	r8, r12
    65ea:	d7 fe       	sbrs	r13, 7
    65ec:	02 c0       	rjmp	.+4      	; 0x65f2 <vfprintf+0x2d2>
    65ee:	81 2c       	mov	r8, r1
    65f0:	91 2c       	mov	r9, r1
    65f2:	c6 01       	movw	r24, r12
    65f4:	88 19       	sub	r24, r8
    65f6:	99 09       	sbc	r25, r9
    65f8:	f3 01       	movw	r30, r6
    65fa:	e8 0f       	add	r30, r24
    65fc:	f9 1f       	adc	r31, r25
    65fe:	fe 87       	std	Y+14, r31	; 0x0e
    6600:	ed 87       	std	Y+13, r30	; 0x0d
    6602:	96 01       	movw	r18, r12
    6604:	24 19       	sub	r18, r4
    6606:	31 09       	sbc	r19, r1
    6608:	38 8b       	std	Y+16, r19	; 0x10
    660a:	2f 87       	std	Y+15, r18	; 0x0f
    660c:	01 2f       	mov	r16, r17
    660e:	10 e0       	ldi	r17, 0x00	; 0
    6610:	11 95       	neg	r17
    6612:	01 95       	neg	r16
    6614:	11 09       	sbc	r17, r1
    6616:	3f ef       	ldi	r19, 0xFF	; 255
    6618:	83 16       	cp	r8, r19
    661a:	93 06       	cpc	r9, r19
    661c:	21 f4       	brne	.+8      	; 0x6626 <vfprintf+0x306>
    661e:	b7 01       	movw	r22, r14
    6620:	8e e2       	ldi	r24, 0x2E	; 46
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	f0 d6       	rcall	.+3552   	; 0x7406 <fputc>
    6626:	c8 14       	cp	r12, r8
    6628:	d9 04       	cpc	r13, r9
    662a:	4c f0       	brlt	.+18     	; 0x663e <vfprintf+0x31e>
    662c:	8f 85       	ldd	r24, Y+15	; 0x0f
    662e:	98 89       	ldd	r25, Y+16	; 0x10
    6630:	88 15       	cp	r24, r8
    6632:	99 05       	cpc	r25, r9
    6634:	24 f4       	brge	.+8      	; 0x663e <vfprintf+0x31e>
    6636:	ed 85       	ldd	r30, Y+13	; 0x0d
    6638:	fe 85       	ldd	r31, Y+14	; 0x0e
    663a:	81 81       	ldd	r24, Z+1	; 0x01
    663c:	01 c0       	rjmp	.+2      	; 0x6640 <vfprintf+0x320>
    663e:	80 e3       	ldi	r24, 0x30	; 48
    6640:	f1 e0       	ldi	r31, 0x01	; 1
    6642:	8f 1a       	sub	r8, r31
    6644:	91 08       	sbc	r9, r1
    6646:	2d 85       	ldd	r18, Y+13	; 0x0d
    6648:	3e 85       	ldd	r19, Y+14	; 0x0e
    664a:	2f 5f       	subi	r18, 0xFF	; 255
    664c:	3f 4f       	sbci	r19, 0xFF	; 255
    664e:	3e 87       	std	Y+14, r19	; 0x0e
    6650:	2d 87       	std	Y+13, r18	; 0x0d
    6652:	80 16       	cp	r8, r16
    6654:	91 06       	cpc	r9, r17
    6656:	24 f0       	brlt	.+8      	; 0x6660 <vfprintf+0x340>
    6658:	b7 01       	movw	r22, r14
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	d4 d6       	rcall	.+3496   	; 0x7406 <fputc>
    665e:	db cf       	rjmp	.-74     	; 0x6616 <vfprintf+0x2f6>
    6660:	c8 14       	cp	r12, r8
    6662:	d9 04       	cpc	r13, r9
    6664:	41 f4       	brne	.+16     	; 0x6676 <vfprintf+0x356>
    6666:	9a 81       	ldd	r25, Y+2	; 0x02
    6668:	96 33       	cpi	r25, 0x36	; 54
    666a:	20 f4       	brcc	.+8      	; 0x6674 <vfprintf+0x354>
    666c:	95 33       	cpi	r25, 0x35	; 53
    666e:	19 f4       	brne	.+6      	; 0x6676 <vfprintf+0x356>
    6670:	3c 85       	ldd	r19, Y+12	; 0x0c
    6672:	34 ff       	sbrs	r19, 4
    6674:	81 e3       	ldi	r24, 0x31	; 49
    6676:	b7 01       	movw	r22, r14
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	48 c0       	rjmp	.+144    	; 0x670c <vfprintf+0x3ec>
    667c:	8a 81       	ldd	r24, Y+2	; 0x02
    667e:	81 33       	cpi	r24, 0x31	; 49
    6680:	19 f0       	breq	.+6      	; 0x6688 <vfprintf+0x368>
    6682:	9c 85       	ldd	r25, Y+12	; 0x0c
    6684:	9f 7e       	andi	r25, 0xEF	; 239
    6686:	9c 87       	std	Y+12, r25	; 0x0c
    6688:	b7 01       	movw	r22, r14
    668a:	90 e0       	ldi	r25, 0x00	; 0
    668c:	bc d6       	rcall	.+3448   	; 0x7406 <fputc>
    668e:	11 11       	cpse	r17, r1
    6690:	05 c0       	rjmp	.+10     	; 0x669c <vfprintf+0x37c>
    6692:	94 fc       	sbrc	r9, 4
    6694:	16 c0       	rjmp	.+44     	; 0x66c2 <vfprintf+0x3a2>
    6696:	85 e6       	ldi	r24, 0x65	; 101
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	15 c0       	rjmp	.+42     	; 0x66c6 <vfprintf+0x3a6>
    669c:	b7 01       	movw	r22, r14
    669e:	8e e2       	ldi	r24, 0x2E	; 46
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	b1 d6       	rcall	.+3426   	; 0x7406 <fputc>
    66a4:	1e 5f       	subi	r17, 0xFE	; 254
    66a6:	82 e0       	ldi	r24, 0x02	; 2
    66a8:	01 e0       	ldi	r16, 0x01	; 1
    66aa:	08 0f       	add	r16, r24
    66ac:	f3 01       	movw	r30, r6
    66ae:	e8 0f       	add	r30, r24
    66b0:	f1 1d       	adc	r31, r1
    66b2:	80 81       	ld	r24, Z
    66b4:	b7 01       	movw	r22, r14
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	a6 d6       	rcall	.+3404   	; 0x7406 <fputc>
    66ba:	80 2f       	mov	r24, r16
    66bc:	01 13       	cpse	r16, r17
    66be:	f4 cf       	rjmp	.-24     	; 0x66a8 <vfprintf+0x388>
    66c0:	e8 cf       	rjmp	.-48     	; 0x6692 <vfprintf+0x372>
    66c2:	85 e4       	ldi	r24, 0x45	; 69
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	b7 01       	movw	r22, r14
    66c8:	9e d6       	rcall	.+3388   	; 0x7406 <fputc>
    66ca:	d7 fc       	sbrc	r13, 7
    66cc:	06 c0       	rjmp	.+12     	; 0x66da <vfprintf+0x3ba>
    66ce:	c1 14       	cp	r12, r1
    66d0:	d1 04       	cpc	r13, r1
    66d2:	41 f4       	brne	.+16     	; 0x66e4 <vfprintf+0x3c4>
    66d4:	ec 85       	ldd	r30, Y+12	; 0x0c
    66d6:	e4 ff       	sbrs	r30, 4
    66d8:	05 c0       	rjmp	.+10     	; 0x66e4 <vfprintf+0x3c4>
    66da:	d1 94       	neg	r13
    66dc:	c1 94       	neg	r12
    66de:	d1 08       	sbc	r13, r1
    66e0:	8d e2       	ldi	r24, 0x2D	; 45
    66e2:	01 c0       	rjmp	.+2      	; 0x66e6 <vfprintf+0x3c6>
    66e4:	8b e2       	ldi	r24, 0x2B	; 43
    66e6:	b7 01       	movw	r22, r14
    66e8:	90 e0       	ldi	r25, 0x00	; 0
    66ea:	8d d6       	rcall	.+3354   	; 0x7406 <fputc>
    66ec:	80 e3       	ldi	r24, 0x30	; 48
    66ee:	2a e0       	ldi	r18, 0x0A	; 10
    66f0:	c2 16       	cp	r12, r18
    66f2:	d1 04       	cpc	r13, r1
    66f4:	2c f0       	brlt	.+10     	; 0x6700 <vfprintf+0x3e0>
    66f6:	8f 5f       	subi	r24, 0xFF	; 255
    66f8:	fa e0       	ldi	r31, 0x0A	; 10
    66fa:	cf 1a       	sub	r12, r31
    66fc:	d1 08       	sbc	r13, r1
    66fe:	f7 cf       	rjmp	.-18     	; 0x66ee <vfprintf+0x3ce>
    6700:	b7 01       	movw	r22, r14
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	80 d6       	rcall	.+3328   	; 0x7406 <fputc>
    6706:	b7 01       	movw	r22, r14
    6708:	c6 01       	movw	r24, r12
    670a:	c0 96       	adiw	r24, 0x30	; 48
    670c:	7c d6       	rcall	.+3320   	; 0x7406 <fputc>
    670e:	49 c1       	rjmp	.+658    	; 0x69a2 <vfprintf+0x682>
    6710:	83 36       	cpi	r24, 0x63	; 99
    6712:	31 f0       	breq	.+12     	; 0x6720 <vfprintf+0x400>
    6714:	83 37       	cpi	r24, 0x73	; 115
    6716:	79 f0       	breq	.+30     	; 0x6736 <vfprintf+0x416>
    6718:	83 35       	cpi	r24, 0x53	; 83
    671a:	09 f0       	breq	.+2      	; 0x671e <vfprintf+0x3fe>
    671c:	52 c0       	rjmp	.+164    	; 0x67c2 <vfprintf+0x4a2>
    671e:	1f c0       	rjmp	.+62     	; 0x675e <vfprintf+0x43e>
    6720:	56 01       	movw	r10, r12
    6722:	32 e0       	ldi	r19, 0x02	; 2
    6724:	a3 0e       	add	r10, r19
    6726:	b1 1c       	adc	r11, r1
    6728:	f6 01       	movw	r30, r12
    672a:	80 81       	ld	r24, Z
    672c:	89 83       	std	Y+1, r24	; 0x01
    672e:	01 e0       	ldi	r16, 0x01	; 1
    6730:	10 e0       	ldi	r17, 0x00	; 0
    6732:	63 01       	movw	r12, r6
    6734:	11 c0       	rjmp	.+34     	; 0x6758 <vfprintf+0x438>
    6736:	56 01       	movw	r10, r12
    6738:	f2 e0       	ldi	r31, 0x02	; 2
    673a:	af 0e       	add	r10, r31
    673c:	b1 1c       	adc	r11, r1
    673e:	f6 01       	movw	r30, r12
    6740:	c0 80       	ld	r12, Z
    6742:	d1 80       	ldd	r13, Z+1	; 0x01
    6744:	96 fe       	sbrs	r9, 6
    6746:	03 c0       	rjmp	.+6      	; 0x674e <vfprintf+0x42e>
    6748:	61 2f       	mov	r22, r17
    674a:	70 e0       	ldi	r23, 0x00	; 0
    674c:	02 c0       	rjmp	.+4      	; 0x6752 <vfprintf+0x432>
    674e:	6f ef       	ldi	r22, 0xFF	; 255
    6750:	7f ef       	ldi	r23, 0xFF	; 255
    6752:	c6 01       	movw	r24, r12
    6754:	4d d6       	rcall	.+3226   	; 0x73f0 <strnlen>
    6756:	8c 01       	movw	r16, r24
    6758:	f9 2d       	mov	r31, r9
    675a:	ff 77       	andi	r31, 0x7F	; 127
    675c:	13 c0       	rjmp	.+38     	; 0x6784 <vfprintf+0x464>
    675e:	56 01       	movw	r10, r12
    6760:	22 e0       	ldi	r18, 0x02	; 2
    6762:	a2 0e       	add	r10, r18
    6764:	b1 1c       	adc	r11, r1
    6766:	f6 01       	movw	r30, r12
    6768:	c0 80       	ld	r12, Z
    676a:	d1 80       	ldd	r13, Z+1	; 0x01
    676c:	96 fe       	sbrs	r9, 6
    676e:	03 c0       	rjmp	.+6      	; 0x6776 <vfprintf+0x456>
    6770:	61 2f       	mov	r22, r17
    6772:	70 e0       	ldi	r23, 0x00	; 0
    6774:	02 c0       	rjmp	.+4      	; 0x677a <vfprintf+0x45a>
    6776:	6f ef       	ldi	r22, 0xFF	; 255
    6778:	7f ef       	ldi	r23, 0xFF	; 255
    677a:	c6 01       	movw	r24, r12
    677c:	cf d5       	rcall	.+2974   	; 0x731c <strnlen_P>
    677e:	8c 01       	movw	r16, r24
    6780:	f9 2d       	mov	r31, r9
    6782:	f0 68       	ori	r31, 0x80	; 128
    6784:	9f 2e       	mov	r9, r31
    6786:	f3 fd       	sbrc	r31, 3
    6788:	18 c0       	rjmp	.+48     	; 0x67ba <vfprintf+0x49a>
    678a:	85 2d       	mov	r24, r5
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	08 17       	cp	r16, r24
    6790:	19 07       	cpc	r17, r25
    6792:	98 f4       	brcc	.+38     	; 0x67ba <vfprintf+0x49a>
    6794:	b7 01       	movw	r22, r14
    6796:	80 e2       	ldi	r24, 0x20	; 32
    6798:	90 e0       	ldi	r25, 0x00	; 0
    679a:	35 d6       	rcall	.+3178   	; 0x7406 <fputc>
    679c:	5a 94       	dec	r5
    679e:	f5 cf       	rjmp	.-22     	; 0x678a <vfprintf+0x46a>
    67a0:	f6 01       	movw	r30, r12
    67a2:	97 fc       	sbrc	r9, 7
    67a4:	85 91       	lpm	r24, Z+
    67a6:	97 fe       	sbrs	r9, 7
    67a8:	81 91       	ld	r24, Z+
    67aa:	6f 01       	movw	r12, r30
    67ac:	b7 01       	movw	r22, r14
    67ae:	90 e0       	ldi	r25, 0x00	; 0
    67b0:	2a d6       	rcall	.+3156   	; 0x7406 <fputc>
    67b2:	51 10       	cpse	r5, r1
    67b4:	5a 94       	dec	r5
    67b6:	01 50       	subi	r16, 0x01	; 1
    67b8:	11 09       	sbc	r17, r1
    67ba:	01 15       	cp	r16, r1
    67bc:	11 05       	cpc	r17, r1
    67be:	81 f7       	brne	.-32     	; 0x67a0 <vfprintf+0x480>
    67c0:	f0 c0       	rjmp	.+480    	; 0x69a2 <vfprintf+0x682>
    67c2:	84 36       	cpi	r24, 0x64	; 100
    67c4:	11 f0       	breq	.+4      	; 0x67ca <vfprintf+0x4aa>
    67c6:	89 36       	cpi	r24, 0x69	; 105
    67c8:	59 f5       	brne	.+86     	; 0x6820 <vfprintf+0x500>
    67ca:	56 01       	movw	r10, r12
    67cc:	97 fe       	sbrs	r9, 7
    67ce:	09 c0       	rjmp	.+18     	; 0x67e2 <vfprintf+0x4c2>
    67d0:	24 e0       	ldi	r18, 0x04	; 4
    67d2:	a2 0e       	add	r10, r18
    67d4:	b1 1c       	adc	r11, r1
    67d6:	f6 01       	movw	r30, r12
    67d8:	60 81       	ld	r22, Z
    67da:	71 81       	ldd	r23, Z+1	; 0x01
    67dc:	82 81       	ldd	r24, Z+2	; 0x02
    67de:	93 81       	ldd	r25, Z+3	; 0x03
    67e0:	0a c0       	rjmp	.+20     	; 0x67f6 <vfprintf+0x4d6>
    67e2:	f2 e0       	ldi	r31, 0x02	; 2
    67e4:	af 0e       	add	r10, r31
    67e6:	b1 1c       	adc	r11, r1
    67e8:	f6 01       	movw	r30, r12
    67ea:	60 81       	ld	r22, Z
    67ec:	71 81       	ldd	r23, Z+1	; 0x01
    67ee:	07 2e       	mov	r0, r23
    67f0:	00 0c       	add	r0, r0
    67f2:	88 0b       	sbc	r24, r24
    67f4:	99 0b       	sbc	r25, r25
    67f6:	f9 2d       	mov	r31, r9
    67f8:	ff 76       	andi	r31, 0x6F	; 111
    67fa:	9f 2e       	mov	r9, r31
    67fc:	97 ff       	sbrs	r25, 7
    67fe:	09 c0       	rjmp	.+18     	; 0x6812 <vfprintf+0x4f2>
    6800:	90 95       	com	r25
    6802:	80 95       	com	r24
    6804:	70 95       	com	r23
    6806:	61 95       	neg	r22
    6808:	7f 4f       	sbci	r23, 0xFF	; 255
    680a:	8f 4f       	sbci	r24, 0xFF	; 255
    680c:	9f 4f       	sbci	r25, 0xFF	; 255
    680e:	f0 68       	ori	r31, 0x80	; 128
    6810:	9f 2e       	mov	r9, r31
    6812:	2a e0       	ldi	r18, 0x0A	; 10
    6814:	30 e0       	ldi	r19, 0x00	; 0
    6816:	a3 01       	movw	r20, r6
    6818:	a5 d6       	rcall	.+3402   	; 0x7564 <__ultoa_invert>
    681a:	c8 2e       	mov	r12, r24
    681c:	c6 18       	sub	r12, r6
    681e:	3e c0       	rjmp	.+124    	; 0x689c <vfprintf+0x57c>
    6820:	09 2d       	mov	r16, r9
    6822:	85 37       	cpi	r24, 0x75	; 117
    6824:	21 f4       	brne	.+8      	; 0x682e <vfprintf+0x50e>
    6826:	0f 7e       	andi	r16, 0xEF	; 239
    6828:	2a e0       	ldi	r18, 0x0A	; 10
    682a:	30 e0       	ldi	r19, 0x00	; 0
    682c:	1d c0       	rjmp	.+58     	; 0x6868 <vfprintf+0x548>
    682e:	09 7f       	andi	r16, 0xF9	; 249
    6830:	8f 36       	cpi	r24, 0x6F	; 111
    6832:	91 f0       	breq	.+36     	; 0x6858 <vfprintf+0x538>
    6834:	18 f4       	brcc	.+6      	; 0x683c <vfprintf+0x51c>
    6836:	88 35       	cpi	r24, 0x58	; 88
    6838:	59 f0       	breq	.+22     	; 0x6850 <vfprintf+0x530>
    683a:	bc c0       	rjmp	.+376    	; 0x69b4 <vfprintf+0x694>
    683c:	80 37       	cpi	r24, 0x70	; 112
    683e:	19 f0       	breq	.+6      	; 0x6846 <vfprintf+0x526>
    6840:	88 37       	cpi	r24, 0x78	; 120
    6842:	11 f0       	breq	.+4      	; 0x6848 <vfprintf+0x528>
    6844:	b7 c0       	rjmp	.+366    	; 0x69b4 <vfprintf+0x694>
    6846:	00 61       	ori	r16, 0x10	; 16
    6848:	04 ff       	sbrs	r16, 4
    684a:	09 c0       	rjmp	.+18     	; 0x685e <vfprintf+0x53e>
    684c:	04 60       	ori	r16, 0x04	; 4
    684e:	07 c0       	rjmp	.+14     	; 0x685e <vfprintf+0x53e>
    6850:	94 fe       	sbrs	r9, 4
    6852:	08 c0       	rjmp	.+16     	; 0x6864 <vfprintf+0x544>
    6854:	06 60       	ori	r16, 0x06	; 6
    6856:	06 c0       	rjmp	.+12     	; 0x6864 <vfprintf+0x544>
    6858:	28 e0       	ldi	r18, 0x08	; 8
    685a:	30 e0       	ldi	r19, 0x00	; 0
    685c:	05 c0       	rjmp	.+10     	; 0x6868 <vfprintf+0x548>
    685e:	20 e1       	ldi	r18, 0x10	; 16
    6860:	30 e0       	ldi	r19, 0x00	; 0
    6862:	02 c0       	rjmp	.+4      	; 0x6868 <vfprintf+0x548>
    6864:	20 e1       	ldi	r18, 0x10	; 16
    6866:	32 e0       	ldi	r19, 0x02	; 2
    6868:	56 01       	movw	r10, r12
    686a:	07 ff       	sbrs	r16, 7
    686c:	09 c0       	rjmp	.+18     	; 0x6880 <vfprintf+0x560>
    686e:	84 e0       	ldi	r24, 0x04	; 4
    6870:	a8 0e       	add	r10, r24
    6872:	b1 1c       	adc	r11, r1
    6874:	f6 01       	movw	r30, r12
    6876:	60 81       	ld	r22, Z
    6878:	71 81       	ldd	r23, Z+1	; 0x01
    687a:	82 81       	ldd	r24, Z+2	; 0x02
    687c:	93 81       	ldd	r25, Z+3	; 0x03
    687e:	08 c0       	rjmp	.+16     	; 0x6890 <vfprintf+0x570>
    6880:	f2 e0       	ldi	r31, 0x02	; 2
    6882:	af 0e       	add	r10, r31
    6884:	b1 1c       	adc	r11, r1
    6886:	f6 01       	movw	r30, r12
    6888:	60 81       	ld	r22, Z
    688a:	71 81       	ldd	r23, Z+1	; 0x01
    688c:	80 e0       	ldi	r24, 0x00	; 0
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	a3 01       	movw	r20, r6
    6892:	68 d6       	rcall	.+3280   	; 0x7564 <__ultoa_invert>
    6894:	c8 2e       	mov	r12, r24
    6896:	c6 18       	sub	r12, r6
    6898:	0f 77       	andi	r16, 0x7F	; 127
    689a:	90 2e       	mov	r9, r16
    689c:	96 fe       	sbrs	r9, 6
    689e:	0b c0       	rjmp	.+22     	; 0x68b6 <vfprintf+0x596>
    68a0:	09 2d       	mov	r16, r9
    68a2:	0e 7f       	andi	r16, 0xFE	; 254
    68a4:	c1 16       	cp	r12, r17
    68a6:	50 f4       	brcc	.+20     	; 0x68bc <vfprintf+0x59c>
    68a8:	94 fe       	sbrs	r9, 4
    68aa:	0a c0       	rjmp	.+20     	; 0x68c0 <vfprintf+0x5a0>
    68ac:	92 fc       	sbrc	r9, 2
    68ae:	08 c0       	rjmp	.+16     	; 0x68c0 <vfprintf+0x5a0>
    68b0:	09 2d       	mov	r16, r9
    68b2:	0e 7e       	andi	r16, 0xEE	; 238
    68b4:	05 c0       	rjmp	.+10     	; 0x68c0 <vfprintf+0x5a0>
    68b6:	dc 2c       	mov	r13, r12
    68b8:	09 2d       	mov	r16, r9
    68ba:	03 c0       	rjmp	.+6      	; 0x68c2 <vfprintf+0x5a2>
    68bc:	dc 2c       	mov	r13, r12
    68be:	01 c0       	rjmp	.+2      	; 0x68c2 <vfprintf+0x5a2>
    68c0:	d1 2e       	mov	r13, r17
    68c2:	04 ff       	sbrs	r16, 4
    68c4:	0d c0       	rjmp	.+26     	; 0x68e0 <vfprintf+0x5c0>
    68c6:	fe 01       	movw	r30, r28
    68c8:	ec 0d       	add	r30, r12
    68ca:	f1 1d       	adc	r31, r1
    68cc:	80 81       	ld	r24, Z
    68ce:	80 33       	cpi	r24, 0x30	; 48
    68d0:	11 f4       	brne	.+4      	; 0x68d6 <vfprintf+0x5b6>
    68d2:	09 7e       	andi	r16, 0xE9	; 233
    68d4:	09 c0       	rjmp	.+18     	; 0x68e8 <vfprintf+0x5c8>
    68d6:	02 ff       	sbrs	r16, 2
    68d8:	06 c0       	rjmp	.+12     	; 0x68e6 <vfprintf+0x5c6>
    68da:	d3 94       	inc	r13
    68dc:	d3 94       	inc	r13
    68de:	04 c0       	rjmp	.+8      	; 0x68e8 <vfprintf+0x5c8>
    68e0:	80 2f       	mov	r24, r16
    68e2:	86 78       	andi	r24, 0x86	; 134
    68e4:	09 f0       	breq	.+2      	; 0x68e8 <vfprintf+0x5c8>
    68e6:	d3 94       	inc	r13
    68e8:	03 fd       	sbrc	r16, 3
    68ea:	10 c0       	rjmp	.+32     	; 0x690c <vfprintf+0x5ec>
    68ec:	00 ff       	sbrs	r16, 0
    68ee:	06 c0       	rjmp	.+12     	; 0x68fc <vfprintf+0x5dc>
    68f0:	1c 2d       	mov	r17, r12
    68f2:	d5 14       	cp	r13, r5
    68f4:	78 f4       	brcc	.+30     	; 0x6914 <vfprintf+0x5f4>
    68f6:	15 0d       	add	r17, r5
    68f8:	1d 19       	sub	r17, r13
    68fa:	0c c0       	rjmp	.+24     	; 0x6914 <vfprintf+0x5f4>
    68fc:	d5 14       	cp	r13, r5
    68fe:	50 f4       	brcc	.+20     	; 0x6914 <vfprintf+0x5f4>
    6900:	b7 01       	movw	r22, r14
    6902:	80 e2       	ldi	r24, 0x20	; 32
    6904:	90 e0       	ldi	r25, 0x00	; 0
    6906:	7f d5       	rcall	.+2814   	; 0x7406 <fputc>
    6908:	d3 94       	inc	r13
    690a:	f8 cf       	rjmp	.-16     	; 0x68fc <vfprintf+0x5dc>
    690c:	d5 14       	cp	r13, r5
    690e:	10 f4       	brcc	.+4      	; 0x6914 <vfprintf+0x5f4>
    6910:	5d 18       	sub	r5, r13
    6912:	01 c0       	rjmp	.+2      	; 0x6916 <vfprintf+0x5f6>
    6914:	51 2c       	mov	r5, r1
    6916:	04 ff       	sbrs	r16, 4
    6918:	0f c0       	rjmp	.+30     	; 0x6938 <vfprintf+0x618>
    691a:	b7 01       	movw	r22, r14
    691c:	80 e3       	ldi	r24, 0x30	; 48
    691e:	90 e0       	ldi	r25, 0x00	; 0
    6920:	72 d5       	rcall	.+2788   	; 0x7406 <fputc>
    6922:	02 ff       	sbrs	r16, 2
    6924:	16 c0       	rjmp	.+44     	; 0x6952 <vfprintf+0x632>
    6926:	01 fd       	sbrc	r16, 1
    6928:	03 c0       	rjmp	.+6      	; 0x6930 <vfprintf+0x610>
    692a:	88 e7       	ldi	r24, 0x78	; 120
    692c:	90 e0       	ldi	r25, 0x00	; 0
    692e:	02 c0       	rjmp	.+4      	; 0x6934 <vfprintf+0x614>
    6930:	88 e5       	ldi	r24, 0x58	; 88
    6932:	90 e0       	ldi	r25, 0x00	; 0
    6934:	b7 01       	movw	r22, r14
    6936:	0c c0       	rjmp	.+24     	; 0x6950 <vfprintf+0x630>
    6938:	80 2f       	mov	r24, r16
    693a:	86 78       	andi	r24, 0x86	; 134
    693c:	51 f0       	breq	.+20     	; 0x6952 <vfprintf+0x632>
    693e:	01 ff       	sbrs	r16, 1
    6940:	02 c0       	rjmp	.+4      	; 0x6946 <vfprintf+0x626>
    6942:	8b e2       	ldi	r24, 0x2B	; 43
    6944:	01 c0       	rjmp	.+2      	; 0x6948 <vfprintf+0x628>
    6946:	80 e2       	ldi	r24, 0x20	; 32
    6948:	07 fd       	sbrc	r16, 7
    694a:	8d e2       	ldi	r24, 0x2D	; 45
    694c:	b7 01       	movw	r22, r14
    694e:	90 e0       	ldi	r25, 0x00	; 0
    6950:	5a d5       	rcall	.+2740   	; 0x7406 <fputc>
    6952:	c1 16       	cp	r12, r17
    6954:	30 f4       	brcc	.+12     	; 0x6962 <vfprintf+0x642>
    6956:	b7 01       	movw	r22, r14
    6958:	80 e3       	ldi	r24, 0x30	; 48
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	54 d5       	rcall	.+2728   	; 0x7406 <fputc>
    695e:	11 50       	subi	r17, 0x01	; 1
    6960:	f8 cf       	rjmp	.-16     	; 0x6952 <vfprintf+0x632>
    6962:	ca 94       	dec	r12
    6964:	f3 01       	movw	r30, r6
    6966:	ec 0d       	add	r30, r12
    6968:	f1 1d       	adc	r31, r1
    696a:	80 81       	ld	r24, Z
    696c:	b7 01       	movw	r22, r14
    696e:	90 e0       	ldi	r25, 0x00	; 0
    6970:	4a d5       	rcall	.+2708   	; 0x7406 <fputc>
    6972:	c1 10       	cpse	r12, r1
    6974:	f6 cf       	rjmp	.-20     	; 0x6962 <vfprintf+0x642>
    6976:	15 c0       	rjmp	.+42     	; 0x69a2 <vfprintf+0x682>
    6978:	f4 e0       	ldi	r31, 0x04	; 4
    697a:	f5 15       	cp	r31, r5
    697c:	50 f5       	brcc	.+84     	; 0x69d2 <vfprintf+0x6b2>
    697e:	84 e0       	ldi	r24, 0x04	; 4
    6980:	58 1a       	sub	r5, r24
    6982:	93 fe       	sbrs	r9, 3
    6984:	1e c0       	rjmp	.+60     	; 0x69c2 <vfprintf+0x6a2>
    6986:	01 11       	cpse	r16, r1
    6988:	25 c0       	rjmp	.+74     	; 0x69d4 <vfprintf+0x6b4>
    698a:	2c 85       	ldd	r18, Y+12	; 0x0c
    698c:	23 ff       	sbrs	r18, 3
    698e:	27 c0       	rjmp	.+78     	; 0x69de <vfprintf+0x6be>
    6990:	0a e9       	ldi	r16, 0x9A	; 154
    6992:	11 e0       	ldi	r17, 0x01	; 1
    6994:	39 2d       	mov	r19, r9
    6996:	30 71       	andi	r19, 0x10	; 16
    6998:	93 2e       	mov	r9, r19
    699a:	f8 01       	movw	r30, r16
    699c:	84 91       	lpm	r24, Z
    699e:	81 11       	cpse	r24, r1
    69a0:	21 c0       	rjmp	.+66     	; 0x69e4 <vfprintf+0x6c4>
    69a2:	55 20       	and	r5, r5
    69a4:	09 f4       	brne	.+2      	; 0x69a8 <vfprintf+0x688>
    69a6:	fc cc       	rjmp	.-1544   	; 0x63a0 <vfprintf+0x80>
    69a8:	b7 01       	movw	r22, r14
    69aa:	80 e2       	ldi	r24, 0x20	; 32
    69ac:	90 e0       	ldi	r25, 0x00	; 0
    69ae:	2b d5       	rcall	.+2646   	; 0x7406 <fputc>
    69b0:	5a 94       	dec	r5
    69b2:	f7 cf       	rjmp	.-18     	; 0x69a2 <vfprintf+0x682>
    69b4:	f7 01       	movw	r30, r14
    69b6:	86 81       	ldd	r24, Z+6	; 0x06
    69b8:	97 81       	ldd	r25, Z+7	; 0x07
    69ba:	23 c0       	rjmp	.+70     	; 0x6a02 <vfprintf+0x6e2>
    69bc:	8f ef       	ldi	r24, 0xFF	; 255
    69be:	9f ef       	ldi	r25, 0xFF	; 255
    69c0:	20 c0       	rjmp	.+64     	; 0x6a02 <vfprintf+0x6e2>
    69c2:	b7 01       	movw	r22, r14
    69c4:	80 e2       	ldi	r24, 0x20	; 32
    69c6:	90 e0       	ldi	r25, 0x00	; 0
    69c8:	1e d5       	rcall	.+2620   	; 0x7406 <fputc>
    69ca:	5a 94       	dec	r5
    69cc:	51 10       	cpse	r5, r1
    69ce:	f9 cf       	rjmp	.-14     	; 0x69c2 <vfprintf+0x6a2>
    69d0:	da cf       	rjmp	.-76     	; 0x6986 <vfprintf+0x666>
    69d2:	51 2c       	mov	r5, r1
    69d4:	b7 01       	movw	r22, r14
    69d6:	80 2f       	mov	r24, r16
    69d8:	90 e0       	ldi	r25, 0x00	; 0
    69da:	15 d5       	rcall	.+2602   	; 0x7406 <fputc>
    69dc:	d6 cf       	rjmp	.-84     	; 0x698a <vfprintf+0x66a>
    69de:	0e e9       	ldi	r16, 0x9E	; 158
    69e0:	11 e0       	ldi	r17, 0x01	; 1
    69e2:	d8 cf       	rjmp	.-80     	; 0x6994 <vfprintf+0x674>
    69e4:	91 10       	cpse	r9, r1
    69e6:	80 52       	subi	r24, 0x20	; 32
    69e8:	b7 01       	movw	r22, r14
    69ea:	90 e0       	ldi	r25, 0x00	; 0
    69ec:	0c d5       	rcall	.+2584   	; 0x7406 <fputc>
    69ee:	0f 5f       	subi	r16, 0xFF	; 255
    69f0:	1f 4f       	sbci	r17, 0xFF	; 255
    69f2:	d3 cf       	rjmp	.-90     	; 0x699a <vfprintf+0x67a>
    69f4:	23 e0       	ldi	r18, 0x03	; 3
    69f6:	25 15       	cp	r18, r5
    69f8:	10 f4       	brcc	.+4      	; 0x69fe <vfprintf+0x6de>
    69fa:	83 e0       	ldi	r24, 0x03	; 3
    69fc:	c1 cf       	rjmp	.-126    	; 0x6980 <vfprintf+0x660>
    69fe:	51 2c       	mov	r5, r1
    6a00:	c4 cf       	rjmp	.-120    	; 0x698a <vfprintf+0x66a>
    6a02:	60 96       	adiw	r28, 0x10	; 16
    6a04:	0f b6       	in	r0, 0x3f	; 63
    6a06:	f8 94       	cli
    6a08:	de bf       	out	0x3e, r29	; 62
    6a0a:	0f be       	out	0x3f, r0	; 63
    6a0c:	cd bf       	out	0x3d, r28	; 61
    6a0e:	df 91       	pop	r29
    6a10:	cf 91       	pop	r28
    6a12:	1f 91       	pop	r17
    6a14:	0f 91       	pop	r16
    6a16:	ff 90       	pop	r15
    6a18:	ef 90       	pop	r14
    6a1a:	df 90       	pop	r13
    6a1c:	cf 90       	pop	r12
    6a1e:	bf 90       	pop	r11
    6a20:	af 90       	pop	r10
    6a22:	9f 90       	pop	r9
    6a24:	8f 90       	pop	r8
    6a26:	7f 90       	pop	r7
    6a28:	6f 90       	pop	r6
    6a2a:	5f 90       	pop	r5
    6a2c:	4f 90       	pop	r4
    6a2e:	3f 90       	pop	r3
    6a30:	2f 90       	pop	r2
    6a32:	08 95       	ret

00006a34 <__subsf3>:
    6a34:	50 58       	subi	r21, 0x80	; 128

00006a36 <__addsf3>:
    6a36:	bb 27       	eor	r27, r27
    6a38:	aa 27       	eor	r26, r26
    6a3a:	0e d0       	rcall	.+28     	; 0x6a58 <__addsf3x>
    6a3c:	4d c1       	rjmp	.+666    	; 0x6cd8 <__fp_round>
    6a3e:	3e d1       	rcall	.+636    	; 0x6cbc <__fp_pscA>
    6a40:	30 f0       	brcs	.+12     	; 0x6a4e <__addsf3+0x18>
    6a42:	43 d1       	rcall	.+646    	; 0x6cca <__fp_pscB>
    6a44:	20 f0       	brcs	.+8      	; 0x6a4e <__addsf3+0x18>
    6a46:	31 f4       	brne	.+12     	; 0x6a54 <__addsf3+0x1e>
    6a48:	9f 3f       	cpi	r25, 0xFF	; 255
    6a4a:	11 f4       	brne	.+4      	; 0x6a50 <__addsf3+0x1a>
    6a4c:	1e f4       	brtc	.+6      	; 0x6a54 <__addsf3+0x1e>
    6a4e:	33 c1       	rjmp	.+614    	; 0x6cb6 <__fp_nan>
    6a50:	0e f4       	brtc	.+2      	; 0x6a54 <__addsf3+0x1e>
    6a52:	e0 95       	com	r30
    6a54:	e7 fb       	bst	r30, 7
    6a56:	29 c1       	rjmp	.+594    	; 0x6caa <__fp_inf>

00006a58 <__addsf3x>:
    6a58:	e9 2f       	mov	r30, r25
    6a5a:	4f d1       	rcall	.+670    	; 0x6cfa <__fp_split3>
    6a5c:	80 f3       	brcs	.-32     	; 0x6a3e <__addsf3+0x8>
    6a5e:	ba 17       	cp	r27, r26
    6a60:	62 07       	cpc	r22, r18
    6a62:	73 07       	cpc	r23, r19
    6a64:	84 07       	cpc	r24, r20
    6a66:	95 07       	cpc	r25, r21
    6a68:	18 f0       	brcs	.+6      	; 0x6a70 <__addsf3x+0x18>
    6a6a:	71 f4       	brne	.+28     	; 0x6a88 <__addsf3x+0x30>
    6a6c:	9e f5       	brtc	.+102    	; 0x6ad4 <__addsf3x+0x7c>
    6a6e:	67 c1       	rjmp	.+718    	; 0x6d3e <__fp_zero>
    6a70:	0e f4       	brtc	.+2      	; 0x6a74 <__addsf3x+0x1c>
    6a72:	e0 95       	com	r30
    6a74:	0b 2e       	mov	r0, r27
    6a76:	ba 2f       	mov	r27, r26
    6a78:	a0 2d       	mov	r26, r0
    6a7a:	0b 01       	movw	r0, r22
    6a7c:	b9 01       	movw	r22, r18
    6a7e:	90 01       	movw	r18, r0
    6a80:	0c 01       	movw	r0, r24
    6a82:	ca 01       	movw	r24, r20
    6a84:	a0 01       	movw	r20, r0
    6a86:	11 24       	eor	r1, r1
    6a88:	ff 27       	eor	r31, r31
    6a8a:	59 1b       	sub	r21, r25
    6a8c:	99 f0       	breq	.+38     	; 0x6ab4 <__addsf3x+0x5c>
    6a8e:	59 3f       	cpi	r21, 0xF9	; 249
    6a90:	50 f4       	brcc	.+20     	; 0x6aa6 <__addsf3x+0x4e>
    6a92:	50 3e       	cpi	r21, 0xE0	; 224
    6a94:	68 f1       	brcs	.+90     	; 0x6af0 <__addsf3x+0x98>
    6a96:	1a 16       	cp	r1, r26
    6a98:	f0 40       	sbci	r31, 0x00	; 0
    6a9a:	a2 2f       	mov	r26, r18
    6a9c:	23 2f       	mov	r18, r19
    6a9e:	34 2f       	mov	r19, r20
    6aa0:	44 27       	eor	r20, r20
    6aa2:	58 5f       	subi	r21, 0xF8	; 248
    6aa4:	f3 cf       	rjmp	.-26     	; 0x6a8c <__addsf3x+0x34>
    6aa6:	46 95       	lsr	r20
    6aa8:	37 95       	ror	r19
    6aaa:	27 95       	ror	r18
    6aac:	a7 95       	ror	r26
    6aae:	f0 40       	sbci	r31, 0x00	; 0
    6ab0:	53 95       	inc	r21
    6ab2:	c9 f7       	brne	.-14     	; 0x6aa6 <__addsf3x+0x4e>
    6ab4:	7e f4       	brtc	.+30     	; 0x6ad4 <__addsf3x+0x7c>
    6ab6:	1f 16       	cp	r1, r31
    6ab8:	ba 0b       	sbc	r27, r26
    6aba:	62 0b       	sbc	r22, r18
    6abc:	73 0b       	sbc	r23, r19
    6abe:	84 0b       	sbc	r24, r20
    6ac0:	ba f0       	brmi	.+46     	; 0x6af0 <__addsf3x+0x98>
    6ac2:	91 50       	subi	r25, 0x01	; 1
    6ac4:	a1 f0       	breq	.+40     	; 0x6aee <__addsf3x+0x96>
    6ac6:	ff 0f       	add	r31, r31
    6ac8:	bb 1f       	adc	r27, r27
    6aca:	66 1f       	adc	r22, r22
    6acc:	77 1f       	adc	r23, r23
    6ace:	88 1f       	adc	r24, r24
    6ad0:	c2 f7       	brpl	.-16     	; 0x6ac2 <__addsf3x+0x6a>
    6ad2:	0e c0       	rjmp	.+28     	; 0x6af0 <__addsf3x+0x98>
    6ad4:	ba 0f       	add	r27, r26
    6ad6:	62 1f       	adc	r22, r18
    6ad8:	73 1f       	adc	r23, r19
    6ada:	84 1f       	adc	r24, r20
    6adc:	48 f4       	brcc	.+18     	; 0x6af0 <__addsf3x+0x98>
    6ade:	87 95       	ror	r24
    6ae0:	77 95       	ror	r23
    6ae2:	67 95       	ror	r22
    6ae4:	b7 95       	ror	r27
    6ae6:	f7 95       	ror	r31
    6ae8:	9e 3f       	cpi	r25, 0xFE	; 254
    6aea:	08 f0       	brcs	.+2      	; 0x6aee <__addsf3x+0x96>
    6aec:	b3 cf       	rjmp	.-154    	; 0x6a54 <__addsf3+0x1e>
    6aee:	93 95       	inc	r25
    6af0:	88 0f       	add	r24, r24
    6af2:	08 f0       	brcs	.+2      	; 0x6af6 <__addsf3x+0x9e>
    6af4:	99 27       	eor	r25, r25
    6af6:	ee 0f       	add	r30, r30
    6af8:	97 95       	ror	r25
    6afa:	87 95       	ror	r24
    6afc:	08 95       	ret

00006afe <__divsf3>:
    6afe:	0c d0       	rcall	.+24     	; 0x6b18 <__divsf3x>
    6b00:	eb c0       	rjmp	.+470    	; 0x6cd8 <__fp_round>
    6b02:	e3 d0       	rcall	.+454    	; 0x6cca <__fp_pscB>
    6b04:	40 f0       	brcs	.+16     	; 0x6b16 <__divsf3+0x18>
    6b06:	da d0       	rcall	.+436    	; 0x6cbc <__fp_pscA>
    6b08:	30 f0       	brcs	.+12     	; 0x6b16 <__divsf3+0x18>
    6b0a:	21 f4       	brne	.+8      	; 0x6b14 <__divsf3+0x16>
    6b0c:	5f 3f       	cpi	r21, 0xFF	; 255
    6b0e:	19 f0       	breq	.+6      	; 0x6b16 <__divsf3+0x18>
    6b10:	cc c0       	rjmp	.+408    	; 0x6caa <__fp_inf>
    6b12:	51 11       	cpse	r21, r1
    6b14:	15 c1       	rjmp	.+554    	; 0x6d40 <__fp_szero>
    6b16:	cf c0       	rjmp	.+414    	; 0x6cb6 <__fp_nan>

00006b18 <__divsf3x>:
    6b18:	f0 d0       	rcall	.+480    	; 0x6cfa <__fp_split3>
    6b1a:	98 f3       	brcs	.-26     	; 0x6b02 <__divsf3+0x4>

00006b1c <__divsf3_pse>:
    6b1c:	99 23       	and	r25, r25
    6b1e:	c9 f3       	breq	.-14     	; 0x6b12 <__divsf3+0x14>
    6b20:	55 23       	and	r21, r21
    6b22:	b1 f3       	breq	.-20     	; 0x6b10 <__divsf3+0x12>
    6b24:	95 1b       	sub	r25, r21
    6b26:	55 0b       	sbc	r21, r21
    6b28:	bb 27       	eor	r27, r27
    6b2a:	aa 27       	eor	r26, r26
    6b2c:	62 17       	cp	r22, r18
    6b2e:	73 07       	cpc	r23, r19
    6b30:	84 07       	cpc	r24, r20
    6b32:	38 f0       	brcs	.+14     	; 0x6b42 <__divsf3_pse+0x26>
    6b34:	9f 5f       	subi	r25, 0xFF	; 255
    6b36:	5f 4f       	sbci	r21, 0xFF	; 255
    6b38:	22 0f       	add	r18, r18
    6b3a:	33 1f       	adc	r19, r19
    6b3c:	44 1f       	adc	r20, r20
    6b3e:	aa 1f       	adc	r26, r26
    6b40:	a9 f3       	breq	.-22     	; 0x6b2c <__divsf3_pse+0x10>
    6b42:	33 d0       	rcall	.+102    	; 0x6baa <__divsf3_pse+0x8e>
    6b44:	0e 2e       	mov	r0, r30
    6b46:	3a f0       	brmi	.+14     	; 0x6b56 <__divsf3_pse+0x3a>
    6b48:	e0 e8       	ldi	r30, 0x80	; 128
    6b4a:	30 d0       	rcall	.+96     	; 0x6bac <__divsf3_pse+0x90>
    6b4c:	91 50       	subi	r25, 0x01	; 1
    6b4e:	50 40       	sbci	r21, 0x00	; 0
    6b50:	e6 95       	lsr	r30
    6b52:	00 1c       	adc	r0, r0
    6b54:	ca f7       	brpl	.-14     	; 0x6b48 <__divsf3_pse+0x2c>
    6b56:	29 d0       	rcall	.+82     	; 0x6baa <__divsf3_pse+0x8e>
    6b58:	fe 2f       	mov	r31, r30
    6b5a:	27 d0       	rcall	.+78     	; 0x6baa <__divsf3_pse+0x8e>
    6b5c:	66 0f       	add	r22, r22
    6b5e:	77 1f       	adc	r23, r23
    6b60:	88 1f       	adc	r24, r24
    6b62:	bb 1f       	adc	r27, r27
    6b64:	26 17       	cp	r18, r22
    6b66:	37 07       	cpc	r19, r23
    6b68:	48 07       	cpc	r20, r24
    6b6a:	ab 07       	cpc	r26, r27
    6b6c:	b0 e8       	ldi	r27, 0x80	; 128
    6b6e:	09 f0       	breq	.+2      	; 0x6b72 <__divsf3_pse+0x56>
    6b70:	bb 0b       	sbc	r27, r27
    6b72:	80 2d       	mov	r24, r0
    6b74:	bf 01       	movw	r22, r30
    6b76:	ff 27       	eor	r31, r31
    6b78:	93 58       	subi	r25, 0x83	; 131
    6b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    6b7c:	2a f0       	brmi	.+10     	; 0x6b88 <__divsf3_pse+0x6c>
    6b7e:	9e 3f       	cpi	r25, 0xFE	; 254
    6b80:	51 05       	cpc	r21, r1
    6b82:	68 f0       	brcs	.+26     	; 0x6b9e <__divsf3_pse+0x82>
    6b84:	92 c0       	rjmp	.+292    	; 0x6caa <__fp_inf>
    6b86:	dc c0       	rjmp	.+440    	; 0x6d40 <__fp_szero>
    6b88:	5f 3f       	cpi	r21, 0xFF	; 255
    6b8a:	ec f3       	brlt	.-6      	; 0x6b86 <__divsf3_pse+0x6a>
    6b8c:	98 3e       	cpi	r25, 0xE8	; 232
    6b8e:	dc f3       	brlt	.-10     	; 0x6b86 <__divsf3_pse+0x6a>
    6b90:	86 95       	lsr	r24
    6b92:	77 95       	ror	r23
    6b94:	67 95       	ror	r22
    6b96:	b7 95       	ror	r27
    6b98:	f7 95       	ror	r31
    6b9a:	9f 5f       	subi	r25, 0xFF	; 255
    6b9c:	c9 f7       	brne	.-14     	; 0x6b90 <__divsf3_pse+0x74>
    6b9e:	88 0f       	add	r24, r24
    6ba0:	91 1d       	adc	r25, r1
    6ba2:	96 95       	lsr	r25
    6ba4:	87 95       	ror	r24
    6ba6:	97 f9       	bld	r25, 7
    6ba8:	08 95       	ret
    6baa:	e1 e0       	ldi	r30, 0x01	; 1
    6bac:	66 0f       	add	r22, r22
    6bae:	77 1f       	adc	r23, r23
    6bb0:	88 1f       	adc	r24, r24
    6bb2:	bb 1f       	adc	r27, r27
    6bb4:	62 17       	cp	r22, r18
    6bb6:	73 07       	cpc	r23, r19
    6bb8:	84 07       	cpc	r24, r20
    6bba:	ba 07       	cpc	r27, r26
    6bbc:	20 f0       	brcs	.+8      	; 0x6bc6 <__divsf3_pse+0xaa>
    6bbe:	62 1b       	sub	r22, r18
    6bc0:	73 0b       	sbc	r23, r19
    6bc2:	84 0b       	sbc	r24, r20
    6bc4:	ba 0b       	sbc	r27, r26
    6bc6:	ee 1f       	adc	r30, r30
    6bc8:	88 f7       	brcc	.-30     	; 0x6bac <__divsf3_pse+0x90>
    6bca:	e0 95       	com	r30
    6bcc:	08 95       	ret

00006bce <__fixsfsi>:
    6bce:	04 d0       	rcall	.+8      	; 0x6bd8 <__fixunssfsi>
    6bd0:	68 94       	set
    6bd2:	b1 11       	cpse	r27, r1
    6bd4:	b5 c0       	rjmp	.+362    	; 0x6d40 <__fp_szero>
    6bd6:	08 95       	ret

00006bd8 <__fixunssfsi>:
    6bd8:	98 d0       	rcall	.+304    	; 0x6d0a <__fp_splitA>
    6bda:	88 f0       	brcs	.+34     	; 0x6bfe <__fixunssfsi+0x26>
    6bdc:	9f 57       	subi	r25, 0x7F	; 127
    6bde:	90 f0       	brcs	.+36     	; 0x6c04 <__fixunssfsi+0x2c>
    6be0:	b9 2f       	mov	r27, r25
    6be2:	99 27       	eor	r25, r25
    6be4:	b7 51       	subi	r27, 0x17	; 23
    6be6:	a0 f0       	brcs	.+40     	; 0x6c10 <__fixunssfsi+0x38>
    6be8:	d1 f0       	breq	.+52     	; 0x6c1e <__fixunssfsi+0x46>
    6bea:	66 0f       	add	r22, r22
    6bec:	77 1f       	adc	r23, r23
    6bee:	88 1f       	adc	r24, r24
    6bf0:	99 1f       	adc	r25, r25
    6bf2:	1a f0       	brmi	.+6      	; 0x6bfa <__fixunssfsi+0x22>
    6bf4:	ba 95       	dec	r27
    6bf6:	c9 f7       	brne	.-14     	; 0x6bea <__fixunssfsi+0x12>
    6bf8:	12 c0       	rjmp	.+36     	; 0x6c1e <__fixunssfsi+0x46>
    6bfa:	b1 30       	cpi	r27, 0x01	; 1
    6bfc:	81 f0       	breq	.+32     	; 0x6c1e <__fixunssfsi+0x46>
    6bfe:	9f d0       	rcall	.+318    	; 0x6d3e <__fp_zero>
    6c00:	b1 e0       	ldi	r27, 0x01	; 1
    6c02:	08 95       	ret
    6c04:	9c c0       	rjmp	.+312    	; 0x6d3e <__fp_zero>
    6c06:	67 2f       	mov	r22, r23
    6c08:	78 2f       	mov	r23, r24
    6c0a:	88 27       	eor	r24, r24
    6c0c:	b8 5f       	subi	r27, 0xF8	; 248
    6c0e:	39 f0       	breq	.+14     	; 0x6c1e <__fixunssfsi+0x46>
    6c10:	b9 3f       	cpi	r27, 0xF9	; 249
    6c12:	cc f3       	brlt	.-14     	; 0x6c06 <__fixunssfsi+0x2e>
    6c14:	86 95       	lsr	r24
    6c16:	77 95       	ror	r23
    6c18:	67 95       	ror	r22
    6c1a:	b3 95       	inc	r27
    6c1c:	d9 f7       	brne	.-10     	; 0x6c14 <__fixunssfsi+0x3c>
    6c1e:	3e f4       	brtc	.+14     	; 0x6c2e <__fixunssfsi+0x56>
    6c20:	90 95       	com	r25
    6c22:	80 95       	com	r24
    6c24:	70 95       	com	r23
    6c26:	61 95       	neg	r22
    6c28:	7f 4f       	sbci	r23, 0xFF	; 255
    6c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    6c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c2e:	08 95       	ret

00006c30 <__floatunsisf>:
    6c30:	e8 94       	clt
    6c32:	09 c0       	rjmp	.+18     	; 0x6c46 <__floatsisf+0x12>

00006c34 <__floatsisf>:
    6c34:	97 fb       	bst	r25, 7
    6c36:	3e f4       	brtc	.+14     	; 0x6c46 <__floatsisf+0x12>
    6c38:	90 95       	com	r25
    6c3a:	80 95       	com	r24
    6c3c:	70 95       	com	r23
    6c3e:	61 95       	neg	r22
    6c40:	7f 4f       	sbci	r23, 0xFF	; 255
    6c42:	8f 4f       	sbci	r24, 0xFF	; 255
    6c44:	9f 4f       	sbci	r25, 0xFF	; 255
    6c46:	99 23       	and	r25, r25
    6c48:	a9 f0       	breq	.+42     	; 0x6c74 <__floatsisf+0x40>
    6c4a:	f9 2f       	mov	r31, r25
    6c4c:	96 e9       	ldi	r25, 0x96	; 150
    6c4e:	bb 27       	eor	r27, r27
    6c50:	93 95       	inc	r25
    6c52:	f6 95       	lsr	r31
    6c54:	87 95       	ror	r24
    6c56:	77 95       	ror	r23
    6c58:	67 95       	ror	r22
    6c5a:	b7 95       	ror	r27
    6c5c:	f1 11       	cpse	r31, r1
    6c5e:	f8 cf       	rjmp	.-16     	; 0x6c50 <__floatsisf+0x1c>
    6c60:	fa f4       	brpl	.+62     	; 0x6ca0 <__floatsisf+0x6c>
    6c62:	bb 0f       	add	r27, r27
    6c64:	11 f4       	brne	.+4      	; 0x6c6a <__floatsisf+0x36>
    6c66:	60 ff       	sbrs	r22, 0
    6c68:	1b c0       	rjmp	.+54     	; 0x6ca0 <__floatsisf+0x6c>
    6c6a:	6f 5f       	subi	r22, 0xFF	; 255
    6c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    6c70:	9f 4f       	sbci	r25, 0xFF	; 255
    6c72:	16 c0       	rjmp	.+44     	; 0x6ca0 <__floatsisf+0x6c>
    6c74:	88 23       	and	r24, r24
    6c76:	11 f0       	breq	.+4      	; 0x6c7c <__floatsisf+0x48>
    6c78:	96 e9       	ldi	r25, 0x96	; 150
    6c7a:	11 c0       	rjmp	.+34     	; 0x6c9e <__floatsisf+0x6a>
    6c7c:	77 23       	and	r23, r23
    6c7e:	21 f0       	breq	.+8      	; 0x6c88 <__floatsisf+0x54>
    6c80:	9e e8       	ldi	r25, 0x8E	; 142
    6c82:	87 2f       	mov	r24, r23
    6c84:	76 2f       	mov	r23, r22
    6c86:	05 c0       	rjmp	.+10     	; 0x6c92 <__floatsisf+0x5e>
    6c88:	66 23       	and	r22, r22
    6c8a:	71 f0       	breq	.+28     	; 0x6ca8 <__floatsisf+0x74>
    6c8c:	96 e8       	ldi	r25, 0x86	; 134
    6c8e:	86 2f       	mov	r24, r22
    6c90:	70 e0       	ldi	r23, 0x00	; 0
    6c92:	60 e0       	ldi	r22, 0x00	; 0
    6c94:	2a f0       	brmi	.+10     	; 0x6ca0 <__floatsisf+0x6c>
    6c96:	9a 95       	dec	r25
    6c98:	66 0f       	add	r22, r22
    6c9a:	77 1f       	adc	r23, r23
    6c9c:	88 1f       	adc	r24, r24
    6c9e:	da f7       	brpl	.-10     	; 0x6c96 <__floatsisf+0x62>
    6ca0:	88 0f       	add	r24, r24
    6ca2:	96 95       	lsr	r25
    6ca4:	87 95       	ror	r24
    6ca6:	97 f9       	bld	r25, 7
    6ca8:	08 95       	ret

00006caa <__fp_inf>:
    6caa:	97 f9       	bld	r25, 7
    6cac:	9f 67       	ori	r25, 0x7F	; 127
    6cae:	80 e8       	ldi	r24, 0x80	; 128
    6cb0:	70 e0       	ldi	r23, 0x00	; 0
    6cb2:	60 e0       	ldi	r22, 0x00	; 0
    6cb4:	08 95       	ret

00006cb6 <__fp_nan>:
    6cb6:	9f ef       	ldi	r25, 0xFF	; 255
    6cb8:	80 ec       	ldi	r24, 0xC0	; 192
    6cba:	08 95       	ret

00006cbc <__fp_pscA>:
    6cbc:	00 24       	eor	r0, r0
    6cbe:	0a 94       	dec	r0
    6cc0:	16 16       	cp	r1, r22
    6cc2:	17 06       	cpc	r1, r23
    6cc4:	18 06       	cpc	r1, r24
    6cc6:	09 06       	cpc	r0, r25
    6cc8:	08 95       	ret

00006cca <__fp_pscB>:
    6cca:	00 24       	eor	r0, r0
    6ccc:	0a 94       	dec	r0
    6cce:	12 16       	cp	r1, r18
    6cd0:	13 06       	cpc	r1, r19
    6cd2:	14 06       	cpc	r1, r20
    6cd4:	05 06       	cpc	r0, r21
    6cd6:	08 95       	ret

00006cd8 <__fp_round>:
    6cd8:	09 2e       	mov	r0, r25
    6cda:	03 94       	inc	r0
    6cdc:	00 0c       	add	r0, r0
    6cde:	11 f4       	brne	.+4      	; 0x6ce4 <__fp_round+0xc>
    6ce0:	88 23       	and	r24, r24
    6ce2:	52 f0       	brmi	.+20     	; 0x6cf8 <__fp_round+0x20>
    6ce4:	bb 0f       	add	r27, r27
    6ce6:	40 f4       	brcc	.+16     	; 0x6cf8 <__fp_round+0x20>
    6ce8:	bf 2b       	or	r27, r31
    6cea:	11 f4       	brne	.+4      	; 0x6cf0 <__fp_round+0x18>
    6cec:	60 ff       	sbrs	r22, 0
    6cee:	04 c0       	rjmp	.+8      	; 0x6cf8 <__fp_round+0x20>
    6cf0:	6f 5f       	subi	r22, 0xFF	; 255
    6cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    6cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    6cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    6cf8:	08 95       	ret

00006cfa <__fp_split3>:
    6cfa:	57 fd       	sbrc	r21, 7
    6cfc:	90 58       	subi	r25, 0x80	; 128
    6cfe:	44 0f       	add	r20, r20
    6d00:	55 1f       	adc	r21, r21
    6d02:	59 f0       	breq	.+22     	; 0x6d1a <__fp_splitA+0x10>
    6d04:	5f 3f       	cpi	r21, 0xFF	; 255
    6d06:	71 f0       	breq	.+28     	; 0x6d24 <__fp_splitA+0x1a>
    6d08:	47 95       	ror	r20

00006d0a <__fp_splitA>:
    6d0a:	88 0f       	add	r24, r24
    6d0c:	97 fb       	bst	r25, 7
    6d0e:	99 1f       	adc	r25, r25
    6d10:	61 f0       	breq	.+24     	; 0x6d2a <__fp_splitA+0x20>
    6d12:	9f 3f       	cpi	r25, 0xFF	; 255
    6d14:	79 f0       	breq	.+30     	; 0x6d34 <__fp_splitA+0x2a>
    6d16:	87 95       	ror	r24
    6d18:	08 95       	ret
    6d1a:	12 16       	cp	r1, r18
    6d1c:	13 06       	cpc	r1, r19
    6d1e:	14 06       	cpc	r1, r20
    6d20:	55 1f       	adc	r21, r21
    6d22:	f2 cf       	rjmp	.-28     	; 0x6d08 <__fp_split3+0xe>
    6d24:	46 95       	lsr	r20
    6d26:	f1 df       	rcall	.-30     	; 0x6d0a <__fp_splitA>
    6d28:	08 c0       	rjmp	.+16     	; 0x6d3a <__fp_splitA+0x30>
    6d2a:	16 16       	cp	r1, r22
    6d2c:	17 06       	cpc	r1, r23
    6d2e:	18 06       	cpc	r1, r24
    6d30:	99 1f       	adc	r25, r25
    6d32:	f1 cf       	rjmp	.-30     	; 0x6d16 <__fp_splitA+0xc>
    6d34:	86 95       	lsr	r24
    6d36:	71 05       	cpc	r23, r1
    6d38:	61 05       	cpc	r22, r1
    6d3a:	08 94       	sec
    6d3c:	08 95       	ret

00006d3e <__fp_zero>:
    6d3e:	e8 94       	clt

00006d40 <__fp_szero>:
    6d40:	bb 27       	eor	r27, r27
    6d42:	66 27       	eor	r22, r22
    6d44:	77 27       	eor	r23, r23
    6d46:	cb 01       	movw	r24, r22
    6d48:	97 f9       	bld	r25, 7
    6d4a:	08 95       	ret

00006d4c <__gesf2>:
    6d4c:	66 d0       	rcall	.+204    	; 0x6e1a <__fp_cmp>
    6d4e:	08 f4       	brcc	.+2      	; 0x6d52 <__gesf2+0x6>
    6d50:	8f ef       	ldi	r24, 0xFF	; 255
    6d52:	08 95       	ret

00006d54 <__mulsf3>:
    6d54:	0b d0       	rcall	.+22     	; 0x6d6c <__mulsf3x>
    6d56:	c0 cf       	rjmp	.-128    	; 0x6cd8 <__fp_round>
    6d58:	b1 df       	rcall	.-158    	; 0x6cbc <__fp_pscA>
    6d5a:	28 f0       	brcs	.+10     	; 0x6d66 <__mulsf3+0x12>
    6d5c:	b6 df       	rcall	.-148    	; 0x6cca <__fp_pscB>
    6d5e:	18 f0       	brcs	.+6      	; 0x6d66 <__mulsf3+0x12>
    6d60:	95 23       	and	r25, r21
    6d62:	09 f0       	breq	.+2      	; 0x6d66 <__mulsf3+0x12>
    6d64:	a2 cf       	rjmp	.-188    	; 0x6caa <__fp_inf>
    6d66:	a7 cf       	rjmp	.-178    	; 0x6cb6 <__fp_nan>
    6d68:	11 24       	eor	r1, r1
    6d6a:	ea cf       	rjmp	.-44     	; 0x6d40 <__fp_szero>

00006d6c <__mulsf3x>:
    6d6c:	c6 df       	rcall	.-116    	; 0x6cfa <__fp_split3>
    6d6e:	a0 f3       	brcs	.-24     	; 0x6d58 <__mulsf3+0x4>

00006d70 <__mulsf3_pse>:
    6d70:	95 9f       	mul	r25, r21
    6d72:	d1 f3       	breq	.-12     	; 0x6d68 <__mulsf3+0x14>
    6d74:	95 0f       	add	r25, r21
    6d76:	50 e0       	ldi	r21, 0x00	; 0
    6d78:	55 1f       	adc	r21, r21
    6d7a:	62 9f       	mul	r22, r18
    6d7c:	f0 01       	movw	r30, r0
    6d7e:	72 9f       	mul	r23, r18
    6d80:	bb 27       	eor	r27, r27
    6d82:	f0 0d       	add	r31, r0
    6d84:	b1 1d       	adc	r27, r1
    6d86:	63 9f       	mul	r22, r19
    6d88:	aa 27       	eor	r26, r26
    6d8a:	f0 0d       	add	r31, r0
    6d8c:	b1 1d       	adc	r27, r1
    6d8e:	aa 1f       	adc	r26, r26
    6d90:	64 9f       	mul	r22, r20
    6d92:	66 27       	eor	r22, r22
    6d94:	b0 0d       	add	r27, r0
    6d96:	a1 1d       	adc	r26, r1
    6d98:	66 1f       	adc	r22, r22
    6d9a:	82 9f       	mul	r24, r18
    6d9c:	22 27       	eor	r18, r18
    6d9e:	b0 0d       	add	r27, r0
    6da0:	a1 1d       	adc	r26, r1
    6da2:	62 1f       	adc	r22, r18
    6da4:	73 9f       	mul	r23, r19
    6da6:	b0 0d       	add	r27, r0
    6da8:	a1 1d       	adc	r26, r1
    6daa:	62 1f       	adc	r22, r18
    6dac:	83 9f       	mul	r24, r19
    6dae:	a0 0d       	add	r26, r0
    6db0:	61 1d       	adc	r22, r1
    6db2:	22 1f       	adc	r18, r18
    6db4:	74 9f       	mul	r23, r20
    6db6:	33 27       	eor	r19, r19
    6db8:	a0 0d       	add	r26, r0
    6dba:	61 1d       	adc	r22, r1
    6dbc:	23 1f       	adc	r18, r19
    6dbe:	84 9f       	mul	r24, r20
    6dc0:	60 0d       	add	r22, r0
    6dc2:	21 1d       	adc	r18, r1
    6dc4:	82 2f       	mov	r24, r18
    6dc6:	76 2f       	mov	r23, r22
    6dc8:	6a 2f       	mov	r22, r26
    6dca:	11 24       	eor	r1, r1
    6dcc:	9f 57       	subi	r25, 0x7F	; 127
    6dce:	50 40       	sbci	r21, 0x00	; 0
    6dd0:	8a f0       	brmi	.+34     	; 0x6df4 <__mulsf3_pse+0x84>
    6dd2:	e1 f0       	breq	.+56     	; 0x6e0c <__mulsf3_pse+0x9c>
    6dd4:	88 23       	and	r24, r24
    6dd6:	4a f0       	brmi	.+18     	; 0x6dea <__mulsf3_pse+0x7a>
    6dd8:	ee 0f       	add	r30, r30
    6dda:	ff 1f       	adc	r31, r31
    6ddc:	bb 1f       	adc	r27, r27
    6dde:	66 1f       	adc	r22, r22
    6de0:	77 1f       	adc	r23, r23
    6de2:	88 1f       	adc	r24, r24
    6de4:	91 50       	subi	r25, 0x01	; 1
    6de6:	50 40       	sbci	r21, 0x00	; 0
    6de8:	a9 f7       	brne	.-22     	; 0x6dd4 <__mulsf3_pse+0x64>
    6dea:	9e 3f       	cpi	r25, 0xFE	; 254
    6dec:	51 05       	cpc	r21, r1
    6dee:	70 f0       	brcs	.+28     	; 0x6e0c <__mulsf3_pse+0x9c>
    6df0:	5c cf       	rjmp	.-328    	; 0x6caa <__fp_inf>
    6df2:	a6 cf       	rjmp	.-180    	; 0x6d40 <__fp_szero>
    6df4:	5f 3f       	cpi	r21, 0xFF	; 255
    6df6:	ec f3       	brlt	.-6      	; 0x6df2 <__mulsf3_pse+0x82>
    6df8:	98 3e       	cpi	r25, 0xE8	; 232
    6dfa:	dc f3       	brlt	.-10     	; 0x6df2 <__mulsf3_pse+0x82>
    6dfc:	86 95       	lsr	r24
    6dfe:	77 95       	ror	r23
    6e00:	67 95       	ror	r22
    6e02:	b7 95       	ror	r27
    6e04:	f7 95       	ror	r31
    6e06:	e7 95       	ror	r30
    6e08:	9f 5f       	subi	r25, 0xFF	; 255
    6e0a:	c1 f7       	brne	.-16     	; 0x6dfc <__mulsf3_pse+0x8c>
    6e0c:	fe 2b       	or	r31, r30
    6e0e:	88 0f       	add	r24, r24
    6e10:	91 1d       	adc	r25, r1
    6e12:	96 95       	lsr	r25
    6e14:	87 95       	ror	r24
    6e16:	97 f9       	bld	r25, 7
    6e18:	08 95       	ret

00006e1a <__fp_cmp>:
    6e1a:	99 0f       	add	r25, r25
    6e1c:	00 08       	sbc	r0, r0
    6e1e:	55 0f       	add	r21, r21
    6e20:	aa 0b       	sbc	r26, r26
    6e22:	e0 e8       	ldi	r30, 0x80	; 128
    6e24:	fe ef       	ldi	r31, 0xFE	; 254
    6e26:	16 16       	cp	r1, r22
    6e28:	17 06       	cpc	r1, r23
    6e2a:	e8 07       	cpc	r30, r24
    6e2c:	f9 07       	cpc	r31, r25
    6e2e:	c0 f0       	brcs	.+48     	; 0x6e60 <__fp_cmp+0x46>
    6e30:	12 16       	cp	r1, r18
    6e32:	13 06       	cpc	r1, r19
    6e34:	e4 07       	cpc	r30, r20
    6e36:	f5 07       	cpc	r31, r21
    6e38:	98 f0       	brcs	.+38     	; 0x6e60 <__fp_cmp+0x46>
    6e3a:	62 1b       	sub	r22, r18
    6e3c:	73 0b       	sbc	r23, r19
    6e3e:	84 0b       	sbc	r24, r20
    6e40:	95 0b       	sbc	r25, r21
    6e42:	39 f4       	brne	.+14     	; 0x6e52 <__fp_cmp+0x38>
    6e44:	0a 26       	eor	r0, r26
    6e46:	61 f0       	breq	.+24     	; 0x6e60 <__fp_cmp+0x46>
    6e48:	23 2b       	or	r18, r19
    6e4a:	24 2b       	or	r18, r20
    6e4c:	25 2b       	or	r18, r21
    6e4e:	21 f4       	brne	.+8      	; 0x6e58 <__fp_cmp+0x3e>
    6e50:	08 95       	ret
    6e52:	0a 26       	eor	r0, r26
    6e54:	09 f4       	brne	.+2      	; 0x6e58 <__fp_cmp+0x3e>
    6e56:	a1 40       	sbci	r26, 0x01	; 1
    6e58:	a6 95       	lsr	r26
    6e5a:	8f ef       	ldi	r24, 0xFF	; 255
    6e5c:	81 1d       	adc	r24, r1
    6e5e:	81 1d       	adc	r24, r1
    6e60:	08 95       	ret

00006e62 <__divmodhi4>:
    6e62:	97 fb       	bst	r25, 7
    6e64:	07 2e       	mov	r0, r23
    6e66:	16 f4       	brtc	.+4      	; 0x6e6c <__divmodhi4+0xa>
    6e68:	00 94       	com	r0
    6e6a:	06 d0       	rcall	.+12     	; 0x6e78 <__divmodhi4_neg1>
    6e6c:	77 fd       	sbrc	r23, 7
    6e6e:	08 d0       	rcall	.+16     	; 0x6e80 <__divmodhi4_neg2>
    6e70:	44 d0       	rcall	.+136    	; 0x6efa <__udivmodhi4>
    6e72:	07 fc       	sbrc	r0, 7
    6e74:	05 d0       	rcall	.+10     	; 0x6e80 <__divmodhi4_neg2>
    6e76:	3e f4       	brtc	.+14     	; 0x6e86 <__divmodhi4_exit>

00006e78 <__divmodhi4_neg1>:
    6e78:	90 95       	com	r25
    6e7a:	81 95       	neg	r24
    6e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e7e:	08 95       	ret

00006e80 <__divmodhi4_neg2>:
    6e80:	70 95       	com	r23
    6e82:	61 95       	neg	r22
    6e84:	7f 4f       	sbci	r23, 0xFF	; 255

00006e86 <__divmodhi4_exit>:
    6e86:	08 95       	ret

00006e88 <__udivmodsi4>:
    6e88:	a1 e2       	ldi	r26, 0x21	; 33
    6e8a:	1a 2e       	mov	r1, r26
    6e8c:	aa 1b       	sub	r26, r26
    6e8e:	bb 1b       	sub	r27, r27
    6e90:	fd 01       	movw	r30, r26
    6e92:	0d c0       	rjmp	.+26     	; 0x6eae <__udivmodsi4_ep>

00006e94 <__udivmodsi4_loop>:
    6e94:	aa 1f       	adc	r26, r26
    6e96:	bb 1f       	adc	r27, r27
    6e98:	ee 1f       	adc	r30, r30
    6e9a:	ff 1f       	adc	r31, r31
    6e9c:	a2 17       	cp	r26, r18
    6e9e:	b3 07       	cpc	r27, r19
    6ea0:	e4 07       	cpc	r30, r20
    6ea2:	f5 07       	cpc	r31, r21
    6ea4:	20 f0       	brcs	.+8      	; 0x6eae <__udivmodsi4_ep>
    6ea6:	a2 1b       	sub	r26, r18
    6ea8:	b3 0b       	sbc	r27, r19
    6eaa:	e4 0b       	sbc	r30, r20
    6eac:	f5 0b       	sbc	r31, r21

00006eae <__udivmodsi4_ep>:
    6eae:	66 1f       	adc	r22, r22
    6eb0:	77 1f       	adc	r23, r23
    6eb2:	88 1f       	adc	r24, r24
    6eb4:	99 1f       	adc	r25, r25
    6eb6:	1a 94       	dec	r1
    6eb8:	69 f7       	brne	.-38     	; 0x6e94 <__udivmodsi4_loop>
    6eba:	60 95       	com	r22
    6ebc:	70 95       	com	r23
    6ebe:	80 95       	com	r24
    6ec0:	90 95       	com	r25
    6ec2:	9b 01       	movw	r18, r22
    6ec4:	ac 01       	movw	r20, r24
    6ec6:	bd 01       	movw	r22, r26
    6ec8:	cf 01       	movw	r24, r30
    6eca:	08 95       	ret

00006ecc <__tablejump2__>:
    6ecc:	ee 0f       	add	r30, r30
    6ece:	ff 1f       	adc	r31, r31
    6ed0:	88 1f       	adc	r24, r24
    6ed2:	8b bf       	out	0x3b, r24	; 59
    6ed4:	07 90       	elpm	r0, Z+
    6ed6:	f6 91       	elpm	r31, Z
    6ed8:	e0 2d       	mov	r30, r0
    6eda:	19 94       	eijmp

00006edc <__umulhisi3>:
    6edc:	a2 9f       	mul	r26, r18
    6ede:	b0 01       	movw	r22, r0
    6ee0:	b3 9f       	mul	r27, r19
    6ee2:	c0 01       	movw	r24, r0
    6ee4:	a3 9f       	mul	r26, r19
    6ee6:	70 0d       	add	r23, r0
    6ee8:	81 1d       	adc	r24, r1
    6eea:	11 24       	eor	r1, r1
    6eec:	91 1d       	adc	r25, r1
    6eee:	b2 9f       	mul	r27, r18
    6ef0:	70 0d       	add	r23, r0
    6ef2:	81 1d       	adc	r24, r1
    6ef4:	11 24       	eor	r1, r1
    6ef6:	91 1d       	adc	r25, r1
    6ef8:	08 95       	ret

00006efa <__udivmodhi4>:
    6efa:	aa 1b       	sub	r26, r26
    6efc:	bb 1b       	sub	r27, r27
    6efe:	51 e1       	ldi	r21, 0x11	; 17
    6f00:	07 c0       	rjmp	.+14     	; 0x6f10 <__udivmodhi4_ep>

00006f02 <__udivmodhi4_loop>:
    6f02:	aa 1f       	adc	r26, r26
    6f04:	bb 1f       	adc	r27, r27
    6f06:	a6 17       	cp	r26, r22
    6f08:	b7 07       	cpc	r27, r23
    6f0a:	10 f0       	brcs	.+4      	; 0x6f10 <__udivmodhi4_ep>
    6f0c:	a6 1b       	sub	r26, r22
    6f0e:	b7 0b       	sbc	r27, r23

00006f10 <__udivmodhi4_ep>:
    6f10:	88 1f       	adc	r24, r24
    6f12:	99 1f       	adc	r25, r25
    6f14:	5a 95       	dec	r21
    6f16:	a9 f7       	brne	.-22     	; 0x6f02 <__udivmodhi4_loop>
    6f18:	80 95       	com	r24
    6f1a:	90 95       	com	r25
    6f1c:	bc 01       	movw	r22, r24
    6f1e:	cd 01       	movw	r24, r26
    6f20:	08 95       	ret

00006f22 <malloc>:
    6f22:	0f 93       	push	r16
    6f24:	1f 93       	push	r17
    6f26:	cf 93       	push	r28
    6f28:	df 93       	push	r29
    6f2a:	82 30       	cpi	r24, 0x02	; 2
    6f2c:	91 05       	cpc	r25, r1
    6f2e:	10 f4       	brcc	.+4      	; 0x6f34 <malloc+0x12>
    6f30:	82 e0       	ldi	r24, 0x02	; 2
    6f32:	90 e0       	ldi	r25, 0x00	; 0
    6f34:	e0 91 25 1a 	lds	r30, 0x1A25	; 0x801a25 <__flp>
    6f38:	f0 91 26 1a 	lds	r31, 0x1A26	; 0x801a26 <__flp+0x1>
    6f3c:	20 e0       	ldi	r18, 0x00	; 0
    6f3e:	30 e0       	ldi	r19, 0x00	; 0
    6f40:	a0 e0       	ldi	r26, 0x00	; 0
    6f42:	b0 e0       	ldi	r27, 0x00	; 0
    6f44:	30 97       	sbiw	r30, 0x00	; 0
    6f46:	19 f1       	breq	.+70     	; 0x6f8e <malloc+0x6c>
    6f48:	40 81       	ld	r20, Z
    6f4a:	51 81       	ldd	r21, Z+1	; 0x01
    6f4c:	02 81       	ldd	r16, Z+2	; 0x02
    6f4e:	13 81       	ldd	r17, Z+3	; 0x03
    6f50:	48 17       	cp	r20, r24
    6f52:	59 07       	cpc	r21, r25
    6f54:	c8 f0       	brcs	.+50     	; 0x6f88 <malloc+0x66>
    6f56:	84 17       	cp	r24, r20
    6f58:	95 07       	cpc	r25, r21
    6f5a:	69 f4       	brne	.+26     	; 0x6f76 <malloc+0x54>
    6f5c:	10 97       	sbiw	r26, 0x00	; 0
    6f5e:	31 f0       	breq	.+12     	; 0x6f6c <malloc+0x4a>
    6f60:	12 96       	adiw	r26, 0x02	; 2
    6f62:	0c 93       	st	X, r16
    6f64:	12 97       	sbiw	r26, 0x02	; 2
    6f66:	13 96       	adiw	r26, 0x03	; 3
    6f68:	1c 93       	st	X, r17
    6f6a:	27 c0       	rjmp	.+78     	; 0x6fba <malloc+0x98>
    6f6c:	00 93 25 1a 	sts	0x1A25, r16	; 0x801a25 <__flp>
    6f70:	10 93 26 1a 	sts	0x1A26, r17	; 0x801a26 <__flp+0x1>
    6f74:	22 c0       	rjmp	.+68     	; 0x6fba <malloc+0x98>
    6f76:	21 15       	cp	r18, r1
    6f78:	31 05       	cpc	r19, r1
    6f7a:	19 f0       	breq	.+6      	; 0x6f82 <malloc+0x60>
    6f7c:	42 17       	cp	r20, r18
    6f7e:	53 07       	cpc	r21, r19
    6f80:	18 f4       	brcc	.+6      	; 0x6f88 <malloc+0x66>
    6f82:	9a 01       	movw	r18, r20
    6f84:	bd 01       	movw	r22, r26
    6f86:	ef 01       	movw	r28, r30
    6f88:	df 01       	movw	r26, r30
    6f8a:	f8 01       	movw	r30, r16
    6f8c:	db cf       	rjmp	.-74     	; 0x6f44 <malloc+0x22>
    6f8e:	21 15       	cp	r18, r1
    6f90:	31 05       	cpc	r19, r1
    6f92:	f9 f0       	breq	.+62     	; 0x6fd2 <malloc+0xb0>
    6f94:	28 1b       	sub	r18, r24
    6f96:	39 0b       	sbc	r19, r25
    6f98:	24 30       	cpi	r18, 0x04	; 4
    6f9a:	31 05       	cpc	r19, r1
    6f9c:	80 f4       	brcc	.+32     	; 0x6fbe <malloc+0x9c>
    6f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    6fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    6fa2:	61 15       	cp	r22, r1
    6fa4:	71 05       	cpc	r23, r1
    6fa6:	21 f0       	breq	.+8      	; 0x6fb0 <malloc+0x8e>
    6fa8:	fb 01       	movw	r30, r22
    6faa:	93 83       	std	Z+3, r25	; 0x03
    6fac:	82 83       	std	Z+2, r24	; 0x02
    6fae:	04 c0       	rjmp	.+8      	; 0x6fb8 <malloc+0x96>
    6fb0:	90 93 26 1a 	sts	0x1A26, r25	; 0x801a26 <__flp+0x1>
    6fb4:	80 93 25 1a 	sts	0x1A25, r24	; 0x801a25 <__flp>
    6fb8:	fe 01       	movw	r30, r28
    6fba:	32 96       	adiw	r30, 0x02	; 2
    6fbc:	44 c0       	rjmp	.+136    	; 0x7046 <malloc+0x124>
    6fbe:	fe 01       	movw	r30, r28
    6fc0:	e2 0f       	add	r30, r18
    6fc2:	f3 1f       	adc	r31, r19
    6fc4:	81 93       	st	Z+, r24
    6fc6:	91 93       	st	Z+, r25
    6fc8:	22 50       	subi	r18, 0x02	; 2
    6fca:	31 09       	sbc	r19, r1
    6fcc:	39 83       	std	Y+1, r19	; 0x01
    6fce:	28 83       	st	Y, r18
    6fd0:	3a c0       	rjmp	.+116    	; 0x7046 <malloc+0x124>
    6fd2:	20 91 23 1a 	lds	r18, 0x1A23	; 0x801a23 <__brkval>
    6fd6:	30 91 24 1a 	lds	r19, 0x1A24	; 0x801a24 <__brkval+0x1>
    6fda:	23 2b       	or	r18, r19
    6fdc:	41 f4       	brne	.+16     	; 0x6fee <malloc+0xcc>
    6fde:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6fe2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6fe6:	30 93 24 1a 	sts	0x1A24, r19	; 0x801a24 <__brkval+0x1>
    6fea:	20 93 23 1a 	sts	0x1A23, r18	; 0x801a23 <__brkval>
    6fee:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6ff2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6ff6:	21 15       	cp	r18, r1
    6ff8:	31 05       	cpc	r19, r1
    6ffa:	41 f4       	brne	.+16     	; 0x700c <malloc+0xea>
    6ffc:	2d b7       	in	r18, 0x3d	; 61
    6ffe:	3e b7       	in	r19, 0x3e	; 62
    7000:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    7004:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    7008:	24 1b       	sub	r18, r20
    700a:	35 0b       	sbc	r19, r21
    700c:	e0 91 23 1a 	lds	r30, 0x1A23	; 0x801a23 <__brkval>
    7010:	f0 91 24 1a 	lds	r31, 0x1A24	; 0x801a24 <__brkval+0x1>
    7014:	e2 17       	cp	r30, r18
    7016:	f3 07       	cpc	r31, r19
    7018:	a0 f4       	brcc	.+40     	; 0x7042 <malloc+0x120>
    701a:	2e 1b       	sub	r18, r30
    701c:	3f 0b       	sbc	r19, r31
    701e:	28 17       	cp	r18, r24
    7020:	39 07       	cpc	r19, r25
    7022:	78 f0       	brcs	.+30     	; 0x7042 <malloc+0x120>
    7024:	ac 01       	movw	r20, r24
    7026:	4e 5f       	subi	r20, 0xFE	; 254
    7028:	5f 4f       	sbci	r21, 0xFF	; 255
    702a:	24 17       	cp	r18, r20
    702c:	35 07       	cpc	r19, r21
    702e:	48 f0       	brcs	.+18     	; 0x7042 <malloc+0x120>
    7030:	4e 0f       	add	r20, r30
    7032:	5f 1f       	adc	r21, r31
    7034:	50 93 24 1a 	sts	0x1A24, r21	; 0x801a24 <__brkval+0x1>
    7038:	40 93 23 1a 	sts	0x1A23, r20	; 0x801a23 <__brkval>
    703c:	81 93       	st	Z+, r24
    703e:	91 93       	st	Z+, r25
    7040:	02 c0       	rjmp	.+4      	; 0x7046 <malloc+0x124>
    7042:	e0 e0       	ldi	r30, 0x00	; 0
    7044:	f0 e0       	ldi	r31, 0x00	; 0
    7046:	cf 01       	movw	r24, r30
    7048:	df 91       	pop	r29
    704a:	cf 91       	pop	r28
    704c:	1f 91       	pop	r17
    704e:	0f 91       	pop	r16
    7050:	08 95       	ret

00007052 <free>:
    7052:	cf 93       	push	r28
    7054:	df 93       	push	r29
    7056:	00 97       	sbiw	r24, 0x00	; 0
    7058:	09 f4       	brne	.+2      	; 0x705c <free+0xa>
    705a:	81 c0       	rjmp	.+258    	; 0x715e <free+0x10c>
    705c:	fc 01       	movw	r30, r24
    705e:	32 97       	sbiw	r30, 0x02	; 2
    7060:	13 82       	std	Z+3, r1	; 0x03
    7062:	12 82       	std	Z+2, r1	; 0x02
    7064:	a0 91 25 1a 	lds	r26, 0x1A25	; 0x801a25 <__flp>
    7068:	b0 91 26 1a 	lds	r27, 0x1A26	; 0x801a26 <__flp+0x1>
    706c:	10 97       	sbiw	r26, 0x00	; 0
    706e:	81 f4       	brne	.+32     	; 0x7090 <free+0x3e>
    7070:	20 81       	ld	r18, Z
    7072:	31 81       	ldd	r19, Z+1	; 0x01
    7074:	82 0f       	add	r24, r18
    7076:	93 1f       	adc	r25, r19
    7078:	20 91 23 1a 	lds	r18, 0x1A23	; 0x801a23 <__brkval>
    707c:	30 91 24 1a 	lds	r19, 0x1A24	; 0x801a24 <__brkval+0x1>
    7080:	28 17       	cp	r18, r24
    7082:	39 07       	cpc	r19, r25
    7084:	51 f5       	brne	.+84     	; 0x70da <free+0x88>
    7086:	f0 93 24 1a 	sts	0x1A24, r31	; 0x801a24 <__brkval+0x1>
    708a:	e0 93 23 1a 	sts	0x1A23, r30	; 0x801a23 <__brkval>
    708e:	67 c0       	rjmp	.+206    	; 0x715e <free+0x10c>
    7090:	ed 01       	movw	r28, r26
    7092:	20 e0       	ldi	r18, 0x00	; 0
    7094:	30 e0       	ldi	r19, 0x00	; 0
    7096:	ce 17       	cp	r28, r30
    7098:	df 07       	cpc	r29, r31
    709a:	40 f4       	brcc	.+16     	; 0x70ac <free+0x5a>
    709c:	4a 81       	ldd	r20, Y+2	; 0x02
    709e:	5b 81       	ldd	r21, Y+3	; 0x03
    70a0:	9e 01       	movw	r18, r28
    70a2:	41 15       	cp	r20, r1
    70a4:	51 05       	cpc	r21, r1
    70a6:	f1 f0       	breq	.+60     	; 0x70e4 <free+0x92>
    70a8:	ea 01       	movw	r28, r20
    70aa:	f5 cf       	rjmp	.-22     	; 0x7096 <free+0x44>
    70ac:	d3 83       	std	Z+3, r29	; 0x03
    70ae:	c2 83       	std	Z+2, r28	; 0x02
    70b0:	40 81       	ld	r20, Z
    70b2:	51 81       	ldd	r21, Z+1	; 0x01
    70b4:	84 0f       	add	r24, r20
    70b6:	95 1f       	adc	r25, r21
    70b8:	c8 17       	cp	r28, r24
    70ba:	d9 07       	cpc	r29, r25
    70bc:	59 f4       	brne	.+22     	; 0x70d4 <free+0x82>
    70be:	88 81       	ld	r24, Y
    70c0:	99 81       	ldd	r25, Y+1	; 0x01
    70c2:	84 0f       	add	r24, r20
    70c4:	95 1f       	adc	r25, r21
    70c6:	02 96       	adiw	r24, 0x02	; 2
    70c8:	91 83       	std	Z+1, r25	; 0x01
    70ca:	80 83       	st	Z, r24
    70cc:	8a 81       	ldd	r24, Y+2	; 0x02
    70ce:	9b 81       	ldd	r25, Y+3	; 0x03
    70d0:	93 83       	std	Z+3, r25	; 0x03
    70d2:	82 83       	std	Z+2, r24	; 0x02
    70d4:	21 15       	cp	r18, r1
    70d6:	31 05       	cpc	r19, r1
    70d8:	29 f4       	brne	.+10     	; 0x70e4 <free+0x92>
    70da:	f0 93 26 1a 	sts	0x1A26, r31	; 0x801a26 <__flp+0x1>
    70de:	e0 93 25 1a 	sts	0x1A25, r30	; 0x801a25 <__flp>
    70e2:	3d c0       	rjmp	.+122    	; 0x715e <free+0x10c>
    70e4:	e9 01       	movw	r28, r18
    70e6:	fb 83       	std	Y+3, r31	; 0x03
    70e8:	ea 83       	std	Y+2, r30	; 0x02
    70ea:	49 91       	ld	r20, Y+
    70ec:	59 91       	ld	r21, Y+
    70ee:	c4 0f       	add	r28, r20
    70f0:	d5 1f       	adc	r29, r21
    70f2:	ec 17       	cp	r30, r28
    70f4:	fd 07       	cpc	r31, r29
    70f6:	61 f4       	brne	.+24     	; 0x7110 <free+0xbe>
    70f8:	80 81       	ld	r24, Z
    70fa:	91 81       	ldd	r25, Z+1	; 0x01
    70fc:	84 0f       	add	r24, r20
    70fe:	95 1f       	adc	r25, r21
    7100:	02 96       	adiw	r24, 0x02	; 2
    7102:	e9 01       	movw	r28, r18
    7104:	99 83       	std	Y+1, r25	; 0x01
    7106:	88 83       	st	Y, r24
    7108:	82 81       	ldd	r24, Z+2	; 0x02
    710a:	93 81       	ldd	r25, Z+3	; 0x03
    710c:	9b 83       	std	Y+3, r25	; 0x03
    710e:	8a 83       	std	Y+2, r24	; 0x02
    7110:	e0 e0       	ldi	r30, 0x00	; 0
    7112:	f0 e0       	ldi	r31, 0x00	; 0
    7114:	12 96       	adiw	r26, 0x02	; 2
    7116:	8d 91       	ld	r24, X+
    7118:	9c 91       	ld	r25, X
    711a:	13 97       	sbiw	r26, 0x03	; 3
    711c:	00 97       	sbiw	r24, 0x00	; 0
    711e:	19 f0       	breq	.+6      	; 0x7126 <free+0xd4>
    7120:	fd 01       	movw	r30, r26
    7122:	dc 01       	movw	r26, r24
    7124:	f7 cf       	rjmp	.-18     	; 0x7114 <free+0xc2>
    7126:	8d 91       	ld	r24, X+
    7128:	9c 91       	ld	r25, X
    712a:	11 97       	sbiw	r26, 0x01	; 1
    712c:	9d 01       	movw	r18, r26
    712e:	2e 5f       	subi	r18, 0xFE	; 254
    7130:	3f 4f       	sbci	r19, 0xFF	; 255
    7132:	82 0f       	add	r24, r18
    7134:	93 1f       	adc	r25, r19
    7136:	20 91 23 1a 	lds	r18, 0x1A23	; 0x801a23 <__brkval>
    713a:	30 91 24 1a 	lds	r19, 0x1A24	; 0x801a24 <__brkval+0x1>
    713e:	28 17       	cp	r18, r24
    7140:	39 07       	cpc	r19, r25
    7142:	69 f4       	brne	.+26     	; 0x715e <free+0x10c>
    7144:	30 97       	sbiw	r30, 0x00	; 0
    7146:	29 f4       	brne	.+10     	; 0x7152 <free+0x100>
    7148:	10 92 26 1a 	sts	0x1A26, r1	; 0x801a26 <__flp+0x1>
    714c:	10 92 25 1a 	sts	0x1A25, r1	; 0x801a25 <__flp>
    7150:	02 c0       	rjmp	.+4      	; 0x7156 <free+0x104>
    7152:	13 82       	std	Z+3, r1	; 0x03
    7154:	12 82       	std	Z+2, r1	; 0x02
    7156:	b0 93 24 1a 	sts	0x1A24, r27	; 0x801a24 <__brkval+0x1>
    715a:	a0 93 23 1a 	sts	0x1A23, r26	; 0x801a23 <__brkval>
    715e:	df 91       	pop	r29
    7160:	cf 91       	pop	r28
    7162:	08 95       	ret

00007164 <abort>:
    7164:	81 e0       	ldi	r24, 0x01	; 1
    7166:	90 e0       	ldi	r25, 0x00	; 0
    7168:	f8 94       	cli
    716a:	5a c2       	rjmp	.+1204   	; 0x7620 <_exit>

0000716c <__ftoa_engine>:
    716c:	28 30       	cpi	r18, 0x08	; 8
    716e:	08 f0       	brcs	.+2      	; 0x7172 <__ftoa_engine+0x6>
    7170:	27 e0       	ldi	r18, 0x07	; 7
    7172:	33 27       	eor	r19, r19
    7174:	da 01       	movw	r26, r20
    7176:	99 0f       	add	r25, r25
    7178:	31 1d       	adc	r19, r1
    717a:	87 fd       	sbrc	r24, 7
    717c:	91 60       	ori	r25, 0x01	; 1
    717e:	00 96       	adiw	r24, 0x00	; 0
    7180:	61 05       	cpc	r22, r1
    7182:	71 05       	cpc	r23, r1
    7184:	39 f4       	brne	.+14     	; 0x7194 <__ftoa_engine+0x28>
    7186:	32 60       	ori	r19, 0x02	; 2
    7188:	2e 5f       	subi	r18, 0xFE	; 254
    718a:	3d 93       	st	X+, r19
    718c:	30 e3       	ldi	r19, 0x30	; 48
    718e:	2a 95       	dec	r18
    7190:	e1 f7       	brne	.-8      	; 0x718a <__ftoa_engine+0x1e>
    7192:	08 95       	ret
    7194:	9f 3f       	cpi	r25, 0xFF	; 255
    7196:	30 f0       	brcs	.+12     	; 0x71a4 <__ftoa_engine+0x38>
    7198:	80 38       	cpi	r24, 0x80	; 128
    719a:	71 05       	cpc	r23, r1
    719c:	61 05       	cpc	r22, r1
    719e:	09 f0       	breq	.+2      	; 0x71a2 <__ftoa_engine+0x36>
    71a0:	3c 5f       	subi	r19, 0xFC	; 252
    71a2:	3c 5f       	subi	r19, 0xFC	; 252
    71a4:	3d 93       	st	X+, r19
    71a6:	91 30       	cpi	r25, 0x01	; 1
    71a8:	08 f0       	brcs	.+2      	; 0x71ac <__ftoa_engine+0x40>
    71aa:	80 68       	ori	r24, 0x80	; 128
    71ac:	91 1d       	adc	r25, r1
    71ae:	df 93       	push	r29
    71b0:	cf 93       	push	r28
    71b2:	1f 93       	push	r17
    71b4:	0f 93       	push	r16
    71b6:	ff 92       	push	r15
    71b8:	ef 92       	push	r14
    71ba:	19 2f       	mov	r17, r25
    71bc:	98 7f       	andi	r25, 0xF8	; 248
    71be:	96 95       	lsr	r25
    71c0:	e9 2f       	mov	r30, r25
    71c2:	96 95       	lsr	r25
    71c4:	96 95       	lsr	r25
    71c6:	e9 0f       	add	r30, r25
    71c8:	ff 27       	eor	r31, r31
    71ca:	e4 50       	subi	r30, 0x04	; 4
    71cc:	fe 4f       	sbci	r31, 0xFE	; 254
    71ce:	99 27       	eor	r25, r25
    71d0:	33 27       	eor	r19, r19
    71d2:	ee 24       	eor	r14, r14
    71d4:	ff 24       	eor	r15, r15
    71d6:	a7 01       	movw	r20, r14
    71d8:	e7 01       	movw	r28, r14
    71da:	05 90       	lpm	r0, Z+
    71dc:	08 94       	sec
    71de:	07 94       	ror	r0
    71e0:	28 f4       	brcc	.+10     	; 0x71ec <__ftoa_engine+0x80>
    71e2:	36 0f       	add	r19, r22
    71e4:	e7 1e       	adc	r14, r23
    71e6:	f8 1e       	adc	r15, r24
    71e8:	49 1f       	adc	r20, r25
    71ea:	51 1d       	adc	r21, r1
    71ec:	66 0f       	add	r22, r22
    71ee:	77 1f       	adc	r23, r23
    71f0:	88 1f       	adc	r24, r24
    71f2:	99 1f       	adc	r25, r25
    71f4:	06 94       	lsr	r0
    71f6:	a1 f7       	brne	.-24     	; 0x71e0 <__ftoa_engine+0x74>
    71f8:	05 90       	lpm	r0, Z+
    71fa:	07 94       	ror	r0
    71fc:	28 f4       	brcc	.+10     	; 0x7208 <__ftoa_engine+0x9c>
    71fe:	e7 0e       	add	r14, r23
    7200:	f8 1e       	adc	r15, r24
    7202:	49 1f       	adc	r20, r25
    7204:	56 1f       	adc	r21, r22
    7206:	c1 1d       	adc	r28, r1
    7208:	77 0f       	add	r23, r23
    720a:	88 1f       	adc	r24, r24
    720c:	99 1f       	adc	r25, r25
    720e:	66 1f       	adc	r22, r22
    7210:	06 94       	lsr	r0
    7212:	a1 f7       	brne	.-24     	; 0x71fc <__ftoa_engine+0x90>
    7214:	05 90       	lpm	r0, Z+
    7216:	07 94       	ror	r0
    7218:	28 f4       	brcc	.+10     	; 0x7224 <__ftoa_engine+0xb8>
    721a:	f8 0e       	add	r15, r24
    721c:	49 1f       	adc	r20, r25
    721e:	56 1f       	adc	r21, r22
    7220:	c7 1f       	adc	r28, r23
    7222:	d1 1d       	adc	r29, r1
    7224:	88 0f       	add	r24, r24
    7226:	99 1f       	adc	r25, r25
    7228:	66 1f       	adc	r22, r22
    722a:	77 1f       	adc	r23, r23
    722c:	06 94       	lsr	r0
    722e:	a1 f7       	brne	.-24     	; 0x7218 <__ftoa_engine+0xac>
    7230:	05 90       	lpm	r0, Z+
    7232:	07 94       	ror	r0
    7234:	20 f4       	brcc	.+8      	; 0x723e <__ftoa_engine+0xd2>
    7236:	49 0f       	add	r20, r25
    7238:	56 1f       	adc	r21, r22
    723a:	c7 1f       	adc	r28, r23
    723c:	d8 1f       	adc	r29, r24
    723e:	99 0f       	add	r25, r25
    7240:	66 1f       	adc	r22, r22
    7242:	77 1f       	adc	r23, r23
    7244:	88 1f       	adc	r24, r24
    7246:	06 94       	lsr	r0
    7248:	a9 f7       	brne	.-22     	; 0x7234 <__ftoa_engine+0xc8>
    724a:	84 91       	lpm	r24, Z
    724c:	10 95       	com	r17
    724e:	17 70       	andi	r17, 0x07	; 7
    7250:	41 f0       	breq	.+16     	; 0x7262 <__ftoa_engine+0xf6>
    7252:	d6 95       	lsr	r29
    7254:	c7 95       	ror	r28
    7256:	57 95       	ror	r21
    7258:	47 95       	ror	r20
    725a:	f7 94       	ror	r15
    725c:	e7 94       	ror	r14
    725e:	1a 95       	dec	r17
    7260:	c1 f7       	brne	.-16     	; 0x7252 <__ftoa_engine+0xe6>
    7262:	e2 ea       	ldi	r30, 0xA2	; 162
    7264:	f1 e0       	ldi	r31, 0x01	; 1
    7266:	68 94       	set
    7268:	15 90       	lpm	r1, Z+
    726a:	15 91       	lpm	r17, Z+
    726c:	35 91       	lpm	r19, Z+
    726e:	65 91       	lpm	r22, Z+
    7270:	95 91       	lpm	r25, Z+
    7272:	05 90       	lpm	r0, Z+
    7274:	7f e2       	ldi	r23, 0x2F	; 47
    7276:	73 95       	inc	r23
    7278:	e1 18       	sub	r14, r1
    727a:	f1 0a       	sbc	r15, r17
    727c:	43 0b       	sbc	r20, r19
    727e:	56 0b       	sbc	r21, r22
    7280:	c9 0b       	sbc	r28, r25
    7282:	d0 09       	sbc	r29, r0
    7284:	c0 f7       	brcc	.-16     	; 0x7276 <__ftoa_engine+0x10a>
    7286:	e1 0c       	add	r14, r1
    7288:	f1 1e       	adc	r15, r17
    728a:	43 1f       	adc	r20, r19
    728c:	56 1f       	adc	r21, r22
    728e:	c9 1f       	adc	r28, r25
    7290:	d0 1d       	adc	r29, r0
    7292:	7e f4       	brtc	.+30     	; 0x72b2 <__ftoa_engine+0x146>
    7294:	70 33       	cpi	r23, 0x30	; 48
    7296:	11 f4       	brne	.+4      	; 0x729c <__ftoa_engine+0x130>
    7298:	8a 95       	dec	r24
    729a:	e6 cf       	rjmp	.-52     	; 0x7268 <__ftoa_engine+0xfc>
    729c:	e8 94       	clt
    729e:	01 50       	subi	r16, 0x01	; 1
    72a0:	30 f0       	brcs	.+12     	; 0x72ae <__ftoa_engine+0x142>
    72a2:	08 0f       	add	r16, r24
    72a4:	0a f4       	brpl	.+2      	; 0x72a8 <__ftoa_engine+0x13c>
    72a6:	00 27       	eor	r16, r16
    72a8:	02 17       	cp	r16, r18
    72aa:	08 f4       	brcc	.+2      	; 0x72ae <__ftoa_engine+0x142>
    72ac:	20 2f       	mov	r18, r16
    72ae:	23 95       	inc	r18
    72b0:	02 2f       	mov	r16, r18
    72b2:	7a 33       	cpi	r23, 0x3A	; 58
    72b4:	28 f0       	brcs	.+10     	; 0x72c0 <__ftoa_engine+0x154>
    72b6:	79 e3       	ldi	r23, 0x39	; 57
    72b8:	7d 93       	st	X+, r23
    72ba:	2a 95       	dec	r18
    72bc:	e9 f7       	brne	.-6      	; 0x72b8 <__ftoa_engine+0x14c>
    72be:	10 c0       	rjmp	.+32     	; 0x72e0 <__ftoa_engine+0x174>
    72c0:	7d 93       	st	X+, r23
    72c2:	2a 95       	dec	r18
    72c4:	89 f6       	brne	.-94     	; 0x7268 <__ftoa_engine+0xfc>
    72c6:	06 94       	lsr	r0
    72c8:	97 95       	ror	r25
    72ca:	67 95       	ror	r22
    72cc:	37 95       	ror	r19
    72ce:	17 95       	ror	r17
    72d0:	17 94       	ror	r1
    72d2:	e1 18       	sub	r14, r1
    72d4:	f1 0a       	sbc	r15, r17
    72d6:	43 0b       	sbc	r20, r19
    72d8:	56 0b       	sbc	r21, r22
    72da:	c9 0b       	sbc	r28, r25
    72dc:	d0 09       	sbc	r29, r0
    72de:	98 f0       	brcs	.+38     	; 0x7306 <__ftoa_engine+0x19a>
    72e0:	23 95       	inc	r18
    72e2:	7e 91       	ld	r23, -X
    72e4:	73 95       	inc	r23
    72e6:	7a 33       	cpi	r23, 0x3A	; 58
    72e8:	08 f0       	brcs	.+2      	; 0x72ec <__ftoa_engine+0x180>
    72ea:	70 e3       	ldi	r23, 0x30	; 48
    72ec:	7c 93       	st	X, r23
    72ee:	20 13       	cpse	r18, r16
    72f0:	b8 f7       	brcc	.-18     	; 0x72e0 <__ftoa_engine+0x174>
    72f2:	7e 91       	ld	r23, -X
    72f4:	70 61       	ori	r23, 0x10	; 16
    72f6:	7d 93       	st	X+, r23
    72f8:	30 f0       	brcs	.+12     	; 0x7306 <__ftoa_engine+0x19a>
    72fa:	83 95       	inc	r24
    72fc:	71 e3       	ldi	r23, 0x31	; 49
    72fe:	7d 93       	st	X+, r23
    7300:	70 e3       	ldi	r23, 0x30	; 48
    7302:	2a 95       	dec	r18
    7304:	e1 f7       	brne	.-8      	; 0x72fe <__ftoa_engine+0x192>
    7306:	11 24       	eor	r1, r1
    7308:	ef 90       	pop	r14
    730a:	ff 90       	pop	r15
    730c:	0f 91       	pop	r16
    730e:	1f 91       	pop	r17
    7310:	cf 91       	pop	r28
    7312:	df 91       	pop	r29
    7314:	99 27       	eor	r25, r25
    7316:	87 fd       	sbrc	r24, 7
    7318:	90 95       	com	r25
    731a:	08 95       	ret

0000731c <strnlen_P>:
    731c:	fc 01       	movw	r30, r24
    731e:	05 90       	lpm	r0, Z+
    7320:	61 50       	subi	r22, 0x01	; 1
    7322:	70 40       	sbci	r23, 0x00	; 0
    7324:	01 10       	cpse	r0, r1
    7326:	d8 f7       	brcc	.-10     	; 0x731e <strnlen_P+0x2>
    7328:	80 95       	com	r24
    732a:	90 95       	com	r25
    732c:	8e 0f       	add	r24, r30
    732e:	9f 1f       	adc	r25, r31
    7330:	08 95       	ret

00007332 <memcpy>:
    7332:	fb 01       	movw	r30, r22
    7334:	dc 01       	movw	r26, r24
    7336:	02 c0       	rjmp	.+4      	; 0x733c <memcpy+0xa>
    7338:	01 90       	ld	r0, Z+
    733a:	0d 92       	st	X+, r0
    733c:	41 50       	subi	r20, 0x01	; 1
    733e:	50 40       	sbci	r21, 0x00	; 0
    7340:	d8 f7       	brcc	.-10     	; 0x7338 <memcpy+0x6>
    7342:	08 95       	ret

00007344 <memset>:
    7344:	dc 01       	movw	r26, r24
    7346:	01 c0       	rjmp	.+2      	; 0x734a <memset+0x6>
    7348:	6d 93       	st	X+, r22
    734a:	41 50       	subi	r20, 0x01	; 1
    734c:	50 40       	sbci	r21, 0x00	; 0
    734e:	e0 f7       	brcc	.-8      	; 0x7348 <memset+0x4>
    7350:	08 95       	ret

00007352 <strcasestr>:
    7352:	fb 01       	movw	r30, r22
    7354:	51 91       	ld	r21, Z+
    7356:	55 23       	and	r21, r21
    7358:	b1 f0       	breq	.+44     	; 0x7386 <strcasestr+0x34>
    735a:	bf 01       	movw	r22, r30
    735c:	dc 01       	movw	r26, r24
    735e:	05 2e       	mov	r0, r21
    7360:	4d 91       	ld	r20, X+
    7362:	44 23       	and	r20, r20
    7364:	69 f0       	breq	.+26     	; 0x7380 <strcasestr+0x2e>
    7366:	10 d0       	rcall	.+32     	; 0x7388 <strcasestr+0x36>
    7368:	d9 f7       	brne	.-10     	; 0x7360 <strcasestr+0xe>
    736a:	cd 01       	movw	r24, r26
    736c:	01 90       	ld	r0, Z+
    736e:	00 20       	and	r0, r0
    7370:	49 f0       	breq	.+18     	; 0x7384 <strcasestr+0x32>
    7372:	4d 91       	ld	r20, X+
    7374:	41 11       	cpse	r20, r1
    7376:	08 d0       	rcall	.+16     	; 0x7388 <strcasestr+0x36>
    7378:	c9 f3       	breq	.-14     	; 0x736c <strcasestr+0x1a>
    737a:	fb 01       	movw	r30, r22
    737c:	41 11       	cpse	r20, r1
    737e:	ee cf       	rjmp	.-36     	; 0x735c <strcasestr+0xa>
    7380:	81 e0       	ldi	r24, 0x01	; 1
    7382:	90 e0       	ldi	r25, 0x00	; 0
    7384:	01 97       	sbiw	r24, 0x01	; 1
    7386:	08 95       	ret
    7388:	40 25       	eor	r20, r0
    738a:	39 f0       	breq	.+14     	; 0x739a <strcasestr+0x48>
    738c:	40 32       	cpi	r20, 0x20	; 32
    738e:	29 f4       	brne	.+10     	; 0x739a <strcasestr+0x48>
    7390:	40 29       	or	r20, r0
    7392:	4b 57       	subi	r20, 0x7B	; 123
    7394:	46 5e       	subi	r20, 0xE6	; 230
    7396:	08 f0       	brcs	.+2      	; 0x739a <strcasestr+0x48>
    7398:	18 94       	sez
    739a:	08 95       	ret

0000739c <strcat>:
    739c:	fb 01       	movw	r30, r22
    739e:	dc 01       	movw	r26, r24
    73a0:	0d 90       	ld	r0, X+
    73a2:	00 20       	and	r0, r0
    73a4:	e9 f7       	brne	.-6      	; 0x73a0 <strcat+0x4>
    73a6:	11 97       	sbiw	r26, 0x01	; 1
    73a8:	01 90       	ld	r0, Z+
    73aa:	0d 92       	st	X+, r0
    73ac:	00 20       	and	r0, r0
    73ae:	e1 f7       	brne	.-8      	; 0x73a8 <strcat+0xc>
    73b0:	08 95       	ret

000073b2 <strcpy>:
    73b2:	fb 01       	movw	r30, r22
    73b4:	dc 01       	movw	r26, r24
    73b6:	01 90       	ld	r0, Z+
    73b8:	0d 92       	st	X+, r0
    73ba:	00 20       	and	r0, r0
    73bc:	e1 f7       	brne	.-8      	; 0x73b6 <strcpy+0x4>
    73be:	08 95       	ret

000073c0 <strncasecmp>:
    73c0:	fb 01       	movw	r30, r22
    73c2:	dc 01       	movw	r26, r24
    73c4:	41 50       	subi	r20, 0x01	; 1
    73c6:	50 40       	sbci	r21, 0x00	; 0
    73c8:	88 f0       	brcs	.+34     	; 0x73ec <strncasecmp+0x2c>
    73ca:	8d 91       	ld	r24, X+
    73cc:	81 34       	cpi	r24, 0x41	; 65
    73ce:	1c f0       	brlt	.+6      	; 0x73d6 <strncasecmp+0x16>
    73d0:	8b 35       	cpi	r24, 0x5B	; 91
    73d2:	0c f4       	brge	.+2      	; 0x73d6 <strncasecmp+0x16>
    73d4:	80 5e       	subi	r24, 0xE0	; 224
    73d6:	61 91       	ld	r22, Z+
    73d8:	61 34       	cpi	r22, 0x41	; 65
    73da:	1c f0       	brlt	.+6      	; 0x73e2 <strncasecmp+0x22>
    73dc:	6b 35       	cpi	r22, 0x5B	; 91
    73de:	0c f4       	brge	.+2      	; 0x73e2 <strncasecmp+0x22>
    73e0:	60 5e       	subi	r22, 0xE0	; 224
    73e2:	86 1b       	sub	r24, r22
    73e4:	61 11       	cpse	r22, r1
    73e6:	71 f3       	breq	.-36     	; 0x73c4 <strncasecmp+0x4>
    73e8:	99 0b       	sbc	r25, r25
    73ea:	08 95       	ret
    73ec:	88 1b       	sub	r24, r24
    73ee:	fc cf       	rjmp	.-8      	; 0x73e8 <strncasecmp+0x28>

000073f0 <strnlen>:
    73f0:	fc 01       	movw	r30, r24
    73f2:	61 50       	subi	r22, 0x01	; 1
    73f4:	70 40       	sbci	r23, 0x00	; 0
    73f6:	01 90       	ld	r0, Z+
    73f8:	01 10       	cpse	r0, r1
    73fa:	d8 f7       	brcc	.-10     	; 0x73f2 <strnlen+0x2>
    73fc:	80 95       	com	r24
    73fe:	90 95       	com	r25
    7400:	8e 0f       	add	r24, r30
    7402:	9f 1f       	adc	r25, r31
    7404:	08 95       	ret

00007406 <fputc>:
    7406:	0f 93       	push	r16
    7408:	1f 93       	push	r17
    740a:	cf 93       	push	r28
    740c:	df 93       	push	r29
    740e:	fb 01       	movw	r30, r22
    7410:	23 81       	ldd	r18, Z+3	; 0x03
    7412:	21 fd       	sbrc	r18, 1
    7414:	03 c0       	rjmp	.+6      	; 0x741c <fputc+0x16>
    7416:	8f ef       	ldi	r24, 0xFF	; 255
    7418:	9f ef       	ldi	r25, 0xFF	; 255
    741a:	2c c0       	rjmp	.+88     	; 0x7474 <fputc+0x6e>
    741c:	22 ff       	sbrs	r18, 2
    741e:	16 c0       	rjmp	.+44     	; 0x744c <fputc+0x46>
    7420:	46 81       	ldd	r20, Z+6	; 0x06
    7422:	57 81       	ldd	r21, Z+7	; 0x07
    7424:	24 81       	ldd	r18, Z+4	; 0x04
    7426:	35 81       	ldd	r19, Z+5	; 0x05
    7428:	42 17       	cp	r20, r18
    742a:	53 07       	cpc	r21, r19
    742c:	44 f4       	brge	.+16     	; 0x743e <fputc+0x38>
    742e:	a0 81       	ld	r26, Z
    7430:	b1 81       	ldd	r27, Z+1	; 0x01
    7432:	9d 01       	movw	r18, r26
    7434:	2f 5f       	subi	r18, 0xFF	; 255
    7436:	3f 4f       	sbci	r19, 0xFF	; 255
    7438:	31 83       	std	Z+1, r19	; 0x01
    743a:	20 83       	st	Z, r18
    743c:	8c 93       	st	X, r24
    743e:	26 81       	ldd	r18, Z+6	; 0x06
    7440:	37 81       	ldd	r19, Z+7	; 0x07
    7442:	2f 5f       	subi	r18, 0xFF	; 255
    7444:	3f 4f       	sbci	r19, 0xFF	; 255
    7446:	37 83       	std	Z+7, r19	; 0x07
    7448:	26 83       	std	Z+6, r18	; 0x06
    744a:	14 c0       	rjmp	.+40     	; 0x7474 <fputc+0x6e>
    744c:	8b 01       	movw	r16, r22
    744e:	ec 01       	movw	r28, r24
    7450:	fb 01       	movw	r30, r22
    7452:	00 84       	ldd	r0, Z+8	; 0x08
    7454:	f1 85       	ldd	r31, Z+9	; 0x09
    7456:	e0 2d       	mov	r30, r0
    7458:	19 95       	eicall
    745a:	89 2b       	or	r24, r25
    745c:	e1 f6       	brne	.-72     	; 0x7416 <fputc+0x10>
    745e:	d8 01       	movw	r26, r16
    7460:	16 96       	adiw	r26, 0x06	; 6
    7462:	8d 91       	ld	r24, X+
    7464:	9c 91       	ld	r25, X
    7466:	17 97       	sbiw	r26, 0x07	; 7
    7468:	01 96       	adiw	r24, 0x01	; 1
    746a:	17 96       	adiw	r26, 0x07	; 7
    746c:	9c 93       	st	X, r25
    746e:	8e 93       	st	-X, r24
    7470:	16 97       	sbiw	r26, 0x06	; 6
    7472:	ce 01       	movw	r24, r28
    7474:	df 91       	pop	r29
    7476:	cf 91       	pop	r28
    7478:	1f 91       	pop	r17
    747a:	0f 91       	pop	r16
    747c:	08 95       	ret

0000747e <printf>:
    747e:	cf 93       	push	r28
    7480:	df 93       	push	r29
    7482:	cd b7       	in	r28, 0x3d	; 61
    7484:	de b7       	in	r29, 0x3e	; 62
    7486:	ae 01       	movw	r20, r28
    7488:	4a 5f       	subi	r20, 0xFA	; 250
    748a:	5f 4f       	sbci	r21, 0xFF	; 255
    748c:	fa 01       	movw	r30, r20
    748e:	61 91       	ld	r22, Z+
    7490:	71 91       	ld	r23, Z+
    7492:	af 01       	movw	r20, r30
    7494:	80 91 29 1a 	lds	r24, 0x1A29	; 0x801a29 <__iob+0x2>
    7498:	90 91 2a 1a 	lds	r25, 0x1A2A	; 0x801a2a <__iob+0x3>
    749c:	0e 94 90 31 	call	0x6320	; 0x6320 <vfprintf>
    74a0:	df 91       	pop	r29
    74a2:	cf 91       	pop	r28
    74a4:	08 95       	ret

000074a6 <puts>:
    74a6:	0f 93       	push	r16
    74a8:	1f 93       	push	r17
    74aa:	cf 93       	push	r28
    74ac:	df 93       	push	r29
    74ae:	e0 91 29 1a 	lds	r30, 0x1A29	; 0x801a29 <__iob+0x2>
    74b2:	f0 91 2a 1a 	lds	r31, 0x1A2A	; 0x801a2a <__iob+0x3>
    74b6:	23 81       	ldd	r18, Z+3	; 0x03
    74b8:	21 ff       	sbrs	r18, 1
    74ba:	1b c0       	rjmp	.+54     	; 0x74f2 <puts+0x4c>
    74bc:	8c 01       	movw	r16, r24
    74be:	d0 e0       	ldi	r29, 0x00	; 0
    74c0:	c0 e0       	ldi	r28, 0x00	; 0
    74c2:	f8 01       	movw	r30, r16
    74c4:	81 91       	ld	r24, Z+
    74c6:	8f 01       	movw	r16, r30
    74c8:	60 91 29 1a 	lds	r22, 0x1A29	; 0x801a29 <__iob+0x2>
    74cc:	70 91 2a 1a 	lds	r23, 0x1A2A	; 0x801a2a <__iob+0x3>
    74d0:	db 01       	movw	r26, r22
    74d2:	18 96       	adiw	r26, 0x08	; 8
    74d4:	ed 91       	ld	r30, X+
    74d6:	fc 91       	ld	r31, X
    74d8:	19 97       	sbiw	r26, 0x09	; 9
    74da:	88 23       	and	r24, r24
    74dc:	31 f0       	breq	.+12     	; 0x74ea <puts+0x44>
    74de:	19 95       	eicall
    74e0:	89 2b       	or	r24, r25
    74e2:	79 f3       	breq	.-34     	; 0x74c2 <puts+0x1c>
    74e4:	df ef       	ldi	r29, 0xFF	; 255
    74e6:	cf ef       	ldi	r28, 0xFF	; 255
    74e8:	ec cf       	rjmp	.-40     	; 0x74c2 <puts+0x1c>
    74ea:	8a e0       	ldi	r24, 0x0A	; 10
    74ec:	19 95       	eicall
    74ee:	89 2b       	or	r24, r25
    74f0:	19 f0       	breq	.+6      	; 0x74f8 <puts+0x52>
    74f2:	8f ef       	ldi	r24, 0xFF	; 255
    74f4:	9f ef       	ldi	r25, 0xFF	; 255
    74f6:	02 c0       	rjmp	.+4      	; 0x74fc <puts+0x56>
    74f8:	8d 2f       	mov	r24, r29
    74fa:	9c 2f       	mov	r25, r28
    74fc:	df 91       	pop	r29
    74fe:	cf 91       	pop	r28
    7500:	1f 91       	pop	r17
    7502:	0f 91       	pop	r16
    7504:	08 95       	ret

00007506 <sprintf>:
    7506:	0f 93       	push	r16
    7508:	1f 93       	push	r17
    750a:	cf 93       	push	r28
    750c:	df 93       	push	r29
    750e:	cd b7       	in	r28, 0x3d	; 61
    7510:	de b7       	in	r29, 0x3e	; 62
    7512:	2e 97       	sbiw	r28, 0x0e	; 14
    7514:	0f b6       	in	r0, 0x3f	; 63
    7516:	f8 94       	cli
    7518:	de bf       	out	0x3e, r29	; 62
    751a:	0f be       	out	0x3f, r0	; 63
    751c:	cd bf       	out	0x3d, r28	; 61
    751e:	0e 89       	ldd	r16, Y+22	; 0x16
    7520:	1f 89       	ldd	r17, Y+23	; 0x17
    7522:	86 e0       	ldi	r24, 0x06	; 6
    7524:	8c 83       	std	Y+4, r24	; 0x04
    7526:	1a 83       	std	Y+2, r17	; 0x02
    7528:	09 83       	std	Y+1, r16	; 0x01
    752a:	8f ef       	ldi	r24, 0xFF	; 255
    752c:	9f e7       	ldi	r25, 0x7F	; 127
    752e:	9e 83       	std	Y+6, r25	; 0x06
    7530:	8d 83       	std	Y+5, r24	; 0x05
    7532:	ae 01       	movw	r20, r28
    7534:	46 5e       	subi	r20, 0xE6	; 230
    7536:	5f 4f       	sbci	r21, 0xFF	; 255
    7538:	68 8d       	ldd	r22, Y+24	; 0x18
    753a:	79 8d       	ldd	r23, Y+25	; 0x19
    753c:	ce 01       	movw	r24, r28
    753e:	01 96       	adiw	r24, 0x01	; 1
    7540:	0e 94 90 31 	call	0x6320	; 0x6320 <vfprintf>
    7544:	ef 81       	ldd	r30, Y+7	; 0x07
    7546:	f8 85       	ldd	r31, Y+8	; 0x08
    7548:	e0 0f       	add	r30, r16
    754a:	f1 1f       	adc	r31, r17
    754c:	10 82       	st	Z, r1
    754e:	2e 96       	adiw	r28, 0x0e	; 14
    7550:	0f b6       	in	r0, 0x3f	; 63
    7552:	f8 94       	cli
    7554:	de bf       	out	0x3e, r29	; 62
    7556:	0f be       	out	0x3f, r0	; 63
    7558:	cd bf       	out	0x3d, r28	; 61
    755a:	df 91       	pop	r29
    755c:	cf 91       	pop	r28
    755e:	1f 91       	pop	r17
    7560:	0f 91       	pop	r16
    7562:	08 95       	ret

00007564 <__ultoa_invert>:
    7564:	fa 01       	movw	r30, r20
    7566:	aa 27       	eor	r26, r26
    7568:	28 30       	cpi	r18, 0x08	; 8
    756a:	51 f1       	breq	.+84     	; 0x75c0 <__ultoa_invert+0x5c>
    756c:	20 31       	cpi	r18, 0x10	; 16
    756e:	81 f1       	breq	.+96     	; 0x75d0 <__ultoa_invert+0x6c>
    7570:	e8 94       	clt
    7572:	6f 93       	push	r22
    7574:	6e 7f       	andi	r22, 0xFE	; 254
    7576:	6e 5f       	subi	r22, 0xFE	; 254
    7578:	7f 4f       	sbci	r23, 0xFF	; 255
    757a:	8f 4f       	sbci	r24, 0xFF	; 255
    757c:	9f 4f       	sbci	r25, 0xFF	; 255
    757e:	af 4f       	sbci	r26, 0xFF	; 255
    7580:	b1 e0       	ldi	r27, 0x01	; 1
    7582:	3e d0       	rcall	.+124    	; 0x7600 <__ultoa_invert+0x9c>
    7584:	b4 e0       	ldi	r27, 0x04	; 4
    7586:	3c d0       	rcall	.+120    	; 0x7600 <__ultoa_invert+0x9c>
    7588:	67 0f       	add	r22, r23
    758a:	78 1f       	adc	r23, r24
    758c:	89 1f       	adc	r24, r25
    758e:	9a 1f       	adc	r25, r26
    7590:	a1 1d       	adc	r26, r1
    7592:	68 0f       	add	r22, r24
    7594:	79 1f       	adc	r23, r25
    7596:	8a 1f       	adc	r24, r26
    7598:	91 1d       	adc	r25, r1
    759a:	a1 1d       	adc	r26, r1
    759c:	6a 0f       	add	r22, r26
    759e:	71 1d       	adc	r23, r1
    75a0:	81 1d       	adc	r24, r1
    75a2:	91 1d       	adc	r25, r1
    75a4:	a1 1d       	adc	r26, r1
    75a6:	20 d0       	rcall	.+64     	; 0x75e8 <__ultoa_invert+0x84>
    75a8:	09 f4       	brne	.+2      	; 0x75ac <__ultoa_invert+0x48>
    75aa:	68 94       	set
    75ac:	3f 91       	pop	r19
    75ae:	2a e0       	ldi	r18, 0x0A	; 10
    75b0:	26 9f       	mul	r18, r22
    75b2:	11 24       	eor	r1, r1
    75b4:	30 19       	sub	r19, r0
    75b6:	30 5d       	subi	r19, 0xD0	; 208
    75b8:	31 93       	st	Z+, r19
    75ba:	de f6       	brtc	.-74     	; 0x7572 <__ultoa_invert+0xe>
    75bc:	cf 01       	movw	r24, r30
    75be:	08 95       	ret
    75c0:	46 2f       	mov	r20, r22
    75c2:	47 70       	andi	r20, 0x07	; 7
    75c4:	40 5d       	subi	r20, 0xD0	; 208
    75c6:	41 93       	st	Z+, r20
    75c8:	b3 e0       	ldi	r27, 0x03	; 3
    75ca:	0f d0       	rcall	.+30     	; 0x75ea <__ultoa_invert+0x86>
    75cc:	c9 f7       	brne	.-14     	; 0x75c0 <__ultoa_invert+0x5c>
    75ce:	f6 cf       	rjmp	.-20     	; 0x75bc <__ultoa_invert+0x58>
    75d0:	46 2f       	mov	r20, r22
    75d2:	4f 70       	andi	r20, 0x0F	; 15
    75d4:	40 5d       	subi	r20, 0xD0	; 208
    75d6:	4a 33       	cpi	r20, 0x3A	; 58
    75d8:	18 f0       	brcs	.+6      	; 0x75e0 <__ultoa_invert+0x7c>
    75da:	49 5d       	subi	r20, 0xD9	; 217
    75dc:	31 fd       	sbrc	r19, 1
    75de:	40 52       	subi	r20, 0x20	; 32
    75e0:	41 93       	st	Z+, r20
    75e2:	02 d0       	rcall	.+4      	; 0x75e8 <__ultoa_invert+0x84>
    75e4:	a9 f7       	brne	.-22     	; 0x75d0 <__ultoa_invert+0x6c>
    75e6:	ea cf       	rjmp	.-44     	; 0x75bc <__ultoa_invert+0x58>
    75e8:	b4 e0       	ldi	r27, 0x04	; 4
    75ea:	a6 95       	lsr	r26
    75ec:	97 95       	ror	r25
    75ee:	87 95       	ror	r24
    75f0:	77 95       	ror	r23
    75f2:	67 95       	ror	r22
    75f4:	ba 95       	dec	r27
    75f6:	c9 f7       	brne	.-14     	; 0x75ea <__ultoa_invert+0x86>
    75f8:	00 97       	sbiw	r24, 0x00	; 0
    75fa:	61 05       	cpc	r22, r1
    75fc:	71 05       	cpc	r23, r1
    75fe:	08 95       	ret
    7600:	9b 01       	movw	r18, r22
    7602:	ac 01       	movw	r20, r24
    7604:	0a 2e       	mov	r0, r26
    7606:	06 94       	lsr	r0
    7608:	57 95       	ror	r21
    760a:	47 95       	ror	r20
    760c:	37 95       	ror	r19
    760e:	27 95       	ror	r18
    7610:	ba 95       	dec	r27
    7612:	c9 f7       	brne	.-14     	; 0x7606 <__ultoa_invert+0xa2>
    7614:	62 0f       	add	r22, r18
    7616:	73 1f       	adc	r23, r19
    7618:	84 1f       	adc	r24, r20
    761a:	95 1f       	adc	r25, r21
    761c:	a0 1d       	adc	r26, r0
    761e:	08 95       	ret

00007620 <_exit>:
    7620:	f8 94       	cli

00007622 <__stop_program>:
    7622:	ff cf       	rjmp	.-2      	; 0x7622 <__stop_program>
