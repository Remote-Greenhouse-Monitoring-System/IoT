
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005f2  00800200  000067bc  00006850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000067bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001003  008007f2  008007f2  00006e42  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006e42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006ea0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b08  00000000  00000000  00006ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d919  00000000  00000000  000079e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000362b  00000000  00000000  00015301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b8a  00000000  00000000  0001892c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026d8  00000000  00000000  0001f4b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004251  00000000  00000000  00021b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c13f  00000000  00000000  00025de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a58  00000000  00000000  00031f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c6       	rjmp	.+3266   	; 0xcf4 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 af 24 	jmp	0x495e	; 0x495e <__vector_25>
      68:	0c 94 01 25 	jmp	0x4a02	; 0x4a02 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__vector_36>
      94:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e2 29 	jmp	0x53c4	; 0x53c4 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <__vector_51>
      d0:	0c 94 2d 26 	jmp	0x4c5a	; 0x4c5a <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 71 26 	jmp	0x4ce2	; 0x4ce2 <__vector_54>
      dc:	0c 94 c3 26 	jmp	0x4d86	; 0x4d86 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6d 1a       	sub	r6, r29
      e6:	6d 1a       	sub	r6, r29
      e8:	6d 1a       	sub	r6, r29
      ea:	a4 1a       	sub	r10, r20
      ec:	ac 1a       	sub	r10, r28
      ee:	c1 1a       	sub	r12, r17
      f0:	6d 1a       	sub	r6, r29
      f2:	6d 1a       	sub	r6, r29
      f4:	a4 1a       	sub	r10, r20
      f6:	ac 1a       	sub	r10, r28
      f8:	04 2a       	or	r0, r20
      fa:	74 2a       	or	r7, r20
      fc:	74 2a       	or	r7, r20
      fe:	74 2a       	or	r7, r20
     100:	74 2a       	or	r7, r20
     102:	74 2a       	or	r7, r20
     104:	74 2a       	or	r7, r20
     106:	74 2a       	or	r7, r20
     108:	04 2a       	or	r0, r20
     10a:	74 2a       	or	r7, r20
     10c:	74 2a       	or	r7, r20
     10e:	74 2a       	or	r7, r20
     110:	74 2a       	or	r7, r20
     112:	74 2a       	or	r7, r20
     114:	74 2a       	or	r7, r20
     116:	74 2a       	or	r7, r20
     118:	06 2a       	or	r0, r22
     11a:	74 2a       	or	r7, r20
     11c:	74 2a       	or	r7, r20
     11e:	74 2a       	or	r7, r20
     120:	74 2a       	or	r7, r20
     122:	74 2a       	or	r7, r20
     124:	74 2a       	or	r7, r20
     126:	74 2a       	or	r7, r20
     128:	74 2a       	or	r7, r20
     12a:	74 2a       	or	r7, r20
     12c:	74 2a       	or	r7, r20
     12e:	74 2a       	or	r7, r20
     130:	74 2a       	or	r7, r20
     132:	74 2a       	or	r7, r20
     134:	74 2a       	or	r7, r20
     136:	74 2a       	or	r7, r20
     138:	06 2a       	or	r0, r22
     13a:	74 2a       	or	r7, r20
     13c:	74 2a       	or	r7, r20
     13e:	74 2a       	or	r7, r20
     140:	74 2a       	or	r7, r20
     142:	74 2a       	or	r7, r20
     144:	74 2a       	or	r7, r20
     146:	74 2a       	or	r7, r20
     148:	74 2a       	or	r7, r20
     14a:	74 2a       	or	r7, r20
     14c:	74 2a       	or	r7, r20
     14e:	74 2a       	or	r7, r20
     150:	74 2a       	or	r7, r20
     152:	74 2a       	or	r7, r20
     154:	74 2a       	or	r7, r20
     156:	74 2a       	or	r7, r20
     158:	70 2a       	or	r7, r16
     15a:	74 2a       	or	r7, r20
     15c:	74 2a       	or	r7, r20
     15e:	74 2a       	or	r7, r20
     160:	74 2a       	or	r7, r20
     162:	74 2a       	or	r7, r20
     164:	74 2a       	or	r7, r20
     166:	74 2a       	or	r7, r20
     168:	3b 2a       	or	r3, r27
     16a:	74 2a       	or	r7, r20
     16c:	74 2a       	or	r7, r20
     16e:	74 2a       	or	r7, r20
     170:	74 2a       	or	r7, r20
     172:	74 2a       	or	r7, r20
     174:	74 2a       	or	r7, r20
     176:	74 2a       	or	r7, r20
     178:	74 2a       	or	r7, r20
     17a:	74 2a       	or	r7, r20
     17c:	74 2a       	or	r7, r20
     17e:	74 2a       	or	r7, r20
     180:	74 2a       	or	r7, r20
     182:	74 2a       	or	r7, r20
     184:	74 2a       	or	r7, r20
     186:	74 2a       	or	r7, r20
     188:	2f 2a       	or	r2, r31
     18a:	74 2a       	or	r7, r20
     18c:	74 2a       	or	r7, r20
     18e:	74 2a       	or	r7, r20
     190:	74 2a       	or	r7, r20
     192:	74 2a       	or	r7, r20
     194:	74 2a       	or	r7, r20
     196:	74 2a       	or	r7, r20
     198:	53 2a       	or	r5, r19

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <prvCheckTasksWaitingTermination>
     2a0:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	5f d4       	rcall	.+2238   	; 0xb68 <vPortYield>
     2aa:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 df 19 	call	0x33be	; 0x33be <prvProcessTimerOrBlockTask>
     2c8:	0e 94 36 1a 	call	0x346c	; 0x346c <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	17 e0       	ldi	r17, 0x07	; 7
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ec eb       	ldi	r30, 0xBC	; 188
     2e6:	f7 e6       	ldi	r31, 0x67	; 103
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a2 3f       	cpi	r26, 0xF2	; 242
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	27 e1       	ldi	r18, 0x17	; 23
     2fa:	a2 ef       	ldi	r26, 0xF2	; 242
     2fc:	b7 e0       	ldi	r27, 0x07	; 7
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a5 3f       	cpi	r26, 0xF5	; 245
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <main>
     30c:	0c 94 dc 33 	jmp	0x67b8	; 0x67b8 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	uint8_t xBytesSent = 0;
	const TickType_t x100ms = pdMS_TO_TICKS(100);
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 16 11 	call	0x222c	; 0x222c <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <measureEventGroup>
     34e:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <measureEventGroup+0x1>
     352:	55 d1       	rcall	.+682    	; 0x5fe <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <dataReadyEventGroup>
     36c:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <dataReadyEventGroup+0x1>
     370:	a6 d0       	rcall	.+332    	; 0x4be <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <TempHumSensor_getTemp>
     38a:	0e 94 0e 1b 	call	0x361c	; 0x361c <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 02 1c 	call	0x3804	; 0x3804 <TempHumSensor_getHum>
     392:	0e 94 13 1b 	call	0x3626	; 0x3626 <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 77 1b 	call	0x36ee	; 0x36ee <CO2_getPPM>
     39a:	0e 94 18 1b 	call	0x3630	; 0x3630 <set_CO2_ppm>
			lora_driver_payload_t payload = get_lora_package(2);
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	ce 01       	movw	r24, r28
     3a2:	05 96       	adiw	r24, 0x05	; 5
     3a4:	0e 94 1d 1b 	call	0x363a	; 0x363a <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkBufferHandle,
     3a8:	06 e0       	ldi	r16, 0x06	; 6
     3aa:	10 e0       	ldi	r17, 0x00	; 0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	46 e1       	ldi	r20, 0x16	; 22
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	be 01       	movw	r22, r28
     3b6:	6b 5f       	subi	r22, 0xFB	; 251
     3b8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ba:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <uplinkBufferHandle>
     3be:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <uplinkBufferHandle+0x1>
     3c2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			x100ms);
			if(xBytesSent != sizeof(payload)){
     3c6:	86 31       	cpi	r24, 0x16	; 22
     3c8:	29 f0       	breq	.+10     	; 0x3d4 <main_application_task+0xc2>
				printf("Timed out.\n");
     3ca:	8f e6       	ldi	r24, 0x6F	; 111
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	0e 94 1f 33 	call	0x663e	; 0x663e <puts>
     3d2:	af cf       	rjmp	.-162    	; 0x332 <main_application_task+0x20>
				// 			printf("Bytes sent: %d\n", xBytesSent);
				// 			printf("Temp sent: %d\n", tem);
				// 			printf("Humidity sent: %d\n", hum);
				// 			printf("Size of payload: %d\n", sizeof(payload));
				//			receivePayload();
				printf("Bytes put in buffer: %d\n", xBytesSent);
     3d4:	99 27       	eor	r25, r25
     3d6:	9f 93       	push	r25
     3d8:	8f 93       	push	r24
     3da:	8a e7       	ldi	r24, 0x7A	; 122
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	a1 cf       	rjmp	.-190    	; 0x332 <main_application_task+0x20>

000003f0 <create_sensor_tasks>:
	,  NULL );
	
}

void create_sensor_tasks() {
	createCO2SensorTask();
     3f0:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <createCO2SensorTask>
	create_TempHumSensorTask();
     3f4:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <create_TempHumSensorTask>
     3f8:	08 95       	ret

000003fa <initialize_event_groups>:
}

void initialize_event_groups() {
	dataReadyEventGroup = xEventGroupCreate();
     3fa:	4e d0       	rcall	.+156    	; 0x498 <xEventGroupCreate>
     3fc:	90 93 e5 17 	sts	0x17E5, r25	; 0x8017e5 <dataReadyEventGroup+0x1>
     400:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
     404:	49 d0       	rcall	.+146    	; 0x498 <xEventGroupCreate>
     406:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <measureEventGroup+0x1>
     40a:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <measureEventGroup>
     40e:	08 95       	ret

00000410 <initialize_application>:
     410:	ef 92       	push	r14

MessageBufferHandle_t uplinkBufferHandle;

void main_application_task(void *pvParameters);

void initialize_application(){
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
	initialize_event_groups();
     416:	f1 df       	rcall	.-30     	; 0x3fa <initialize_event_groups>
	create_sensor_tasks();
     418:	eb df       	rcall	.-42     	; 0x3f0 <create_sensor_tasks>
     41a:	41 e0       	ldi	r20, 0x01	; 1
	uplinkBufferHandle = xMessageBufferCreate(100);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	84 e6       	ldi	r24, 0x64	; 100
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 76 0a 	call	0x14ec	; 0x14ec <xStreamBufferGenericCreate>
     428:	90 93 e9 17 	sts	0x17E9, r25	; 0x8017e9 <uplinkBufferHandle+0x1>
     42c:	80 93 e8 17 	sts	0x17E8, r24	; 0x8017e8 <uplinkBufferHandle>
     430:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <setUplinkMessageBufferHandle>
	setUplinkMessageBufferHandle(uplinkBufferHandle);
     434:	e1 2c       	mov	r14, r1
	
	xTaskCreate(
     436:	f1 2c       	mov	r15, r1
     438:	03 e0       	ldi	r16, 0x03	; 3
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	40 ec       	ldi	r20, 0xC0	; 192
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	63 e9       	ldi	r22, 0x93	; 147
     444:	72 e0       	ldi	r23, 0x02	; 2
     446:	89 e8       	ldi	r24, 0x89	; 137
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <xTaskCreate>
     44e:	0f 91       	pop	r16
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  3  
	,  NULL );
	
}
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	08 95       	ret

00000456 <prvTestWaitCondition>:
     456:	0f 93       	push	r16
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     458:	01 11       	cpse	r16, r1
     45a:	0c c0       	rjmp	.+24     	; 0x474 <prvTestWaitCondition+0x1e>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	82 23       	and	r24, r18
     462:	93 23       	and	r25, r19
     464:	a4 23       	and	r26, r20
     466:	b5 23       	and	r27, r21
     468:	89 2b       	or	r24, r25
     46a:	8a 2b       	or	r24, r26
     46c:	8b 2b       	or	r24, r27
     46e:	79 f4       	brne	.+30     	; 0x48e <prvTestWaitCondition+0x38>
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	10 c0       	rjmp	.+32     	; 0x494 <prvTestWaitCondition+0x3e>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	82 23       	and	r24, r18
     47a:	93 23       	and	r25, r19
     47c:	a4 23       	and	r26, r20
     47e:	b5 23       	and	r27, r21
     480:	28 17       	cp	r18, r24
     482:	39 07       	cpc	r19, r25
     484:	4a 07       	cpc	r20, r26
     486:	5b 07       	cpc	r21, r27
     488:	21 f0       	breq	.+8      	; 0x492 <prvTestWaitCondition+0x3c>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	03 c0       	rjmp	.+6      	; 0x494 <prvTestWaitCondition+0x3e>
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	01 c0       	rjmp	.+2      	; 0x494 <prvTestWaitCondition+0x3e>
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0f 91       	pop	r16
     496:	08 95       	ret

00000498 <xEventGroupCreate>:
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	8f e0       	ldi	r24, 0x0F	; 15
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	af d1       	rcall	.+862    	; 0x800 <pvPortMalloc>
     4a2:	ec 01       	movw	r28, r24
     4a4:	00 97       	sbiw	r24, 0x00	; 0
     4a6:	39 f0       	breq	.+14     	; 0x4b6 <xEventGroupCreate+0x1e>
     4a8:	fc 01       	movw	r30, r24
     4aa:	11 92       	st	Z+, r1
     4ac:	11 92       	st	Z+, r1
     4ae:	11 92       	st	Z+, r1
     4b0:	11 92       	st	Z+, r1
     4b2:	cf 01       	movw	r24, r30
     4b4:	8b d2       	rcall	.+1302   	; 0x9cc <vListInitialise>
     4b6:	ce 01       	movw	r24, r28
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <xEventGroupWaitBits>:
     4be:	2f 92       	push	r2
     4c0:	3f 92       	push	r3
     4c2:	4f 92       	push	r4
     4c4:	5f 92       	push	r5
     4c6:	6f 92       	push	r6
     4c8:	7f 92       	push	r7
     4ca:	8f 92       	push	r8
     4cc:	9f 92       	push	r9
     4ce:	af 92       	push	r10
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	ec 01       	movw	r28, r24
     4e4:	4a 01       	movw	r8, r20
     4e6:	5b 01       	movw	r10, r22
     4e8:	62 2e       	mov	r6, r18
     4ea:	70 2e       	mov	r7, r16
     4ec:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <vTaskSuspendAll>
     4f0:	28 80       	ld	r2, Y
     4f2:	39 80       	ldd	r3, Y+1	; 0x01
     4f4:	4a 80       	ldd	r4, Y+2	; 0x02
     4f6:	5b 80       	ldd	r5, Y+3	; 0x03
     4f8:	a5 01       	movw	r20, r10
     4fa:	94 01       	movw	r18, r8
     4fc:	c2 01       	movw	r24, r4
     4fe:	b1 01       	movw	r22, r2
     500:	aa df       	rcall	.-172    	; 0x456 <prvTestWaitCondition>
     502:	88 23       	and	r24, r24
     504:	a1 f0       	breq	.+40     	; 0x52e <xEventGroupWaitBits+0x70>
     506:	66 20       	and	r6, r6
     508:	89 f1       	breq	.+98     	; 0x56c <xEventGroupWaitBits+0xae>
     50a:	d5 01       	movw	r26, r10
     50c:	c4 01       	movw	r24, r8
     50e:	80 95       	com	r24
     510:	90 95       	com	r25
     512:	a0 95       	com	r26
     514:	b0 95       	com	r27
     516:	82 21       	and	r24, r2
     518:	93 21       	and	r25, r3
     51a:	a4 21       	and	r26, r4
     51c:	b5 21       	and	r27, r5
     51e:	88 83       	st	Y, r24
     520:	99 83       	std	Y+1, r25	; 0x01
     522:	aa 83       	std	Y+2, r26	; 0x02
     524:	bb 83       	std	Y+3, r27	; 0x03
     526:	c1 2c       	mov	r12, r1
     528:	d1 2c       	mov	r13, r1
     52a:	76 01       	movw	r14, r12
     52c:	22 c0       	rjmp	.+68     	; 0x572 <xEventGroupWaitBits+0xb4>
     52e:	c1 14       	cp	r12, r1
     530:	d1 04       	cpc	r13, r1
     532:	e1 04       	cpc	r14, r1
     534:	f1 04       	cpc	r15, r1
     536:	e9 f0       	breq	.+58     	; 0x572 <xEventGroupWaitBits+0xb4>
     538:	61 10       	cpse	r6, r1
     53a:	04 c0       	rjmp	.+8      	; 0x544 <xEventGroupWaitBits+0x86>
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	ba 01       	movw	r22, r20
     542:	04 c0       	rjmp	.+8      	; 0x54c <xEventGroupWaitBits+0x8e>
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	71 e0       	ldi	r23, 0x01	; 1
     54c:	71 10       	cpse	r7, r1
     54e:	74 60       	ori	r23, 0x04	; 4
     550:	48 29       	or	r20, r8
     552:	59 29       	or	r21, r9
     554:	6a 29       	or	r22, r10
     556:	7b 29       	or	r23, r11
     558:	97 01       	movw	r18, r14
     55a:	86 01       	movw	r16, r12
     55c:	ce 01       	movw	r24, r28
     55e:	04 96       	adiw	r24, 0x04	; 4
     560:	0e 94 12 12 	call	0x2424	; 0x2424 <vTaskPlaceOnUnorderedEventList>
     564:	21 2c       	mov	r2, r1
     566:	31 2c       	mov	r3, r1
     568:	21 01       	movw	r4, r2
     56a:	03 c0       	rjmp	.+6      	; 0x572 <xEventGroupWaitBits+0xb4>
     56c:	c1 2c       	mov	r12, r1
     56e:	d1 2c       	mov	r13, r1
     570:	76 01       	movw	r14, r12
     572:	0e 94 3a 10 	call	0x2074	; 0x2074 <xTaskResumeAll>
     576:	cd 28       	or	r12, r13
     578:	ce 28       	or	r12, r14
     57a:	cf 28       	or	r12, r15
     57c:	59 f1       	breq	.+86     	; 0x5d4 <xEventGroupWaitBits+0x116>
     57e:	81 11       	cpse	r24, r1
     580:	01 c0       	rjmp	.+2      	; 0x584 <xEventGroupWaitBits+0xc6>
     582:	f2 d2       	rcall	.+1508   	; 0xb68 <vPortYield>
     584:	0e 94 e6 14 	call	0x29cc	; 0x29cc <uxTaskResetEventItemValue>
     588:	6b 01       	movw	r12, r22
     58a:	7c 01       	movw	r14, r24
     58c:	91 fd       	sbrc	r25, 1
     58e:	1f c0       	rjmp	.+62     	; 0x5ce <xEventGroupWaitBits+0x110>
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	0f 92       	push	r0
     596:	c8 80       	ld	r12, Y
     598:	d9 80       	ldd	r13, Y+1	; 0x01
     59a:	ea 80       	ldd	r14, Y+2	; 0x02
     59c:	fb 80       	ldd	r15, Y+3	; 0x03
     59e:	07 2d       	mov	r16, r7
     5a0:	a5 01       	movw	r20, r10
     5a2:	94 01       	movw	r18, r8
     5a4:	c7 01       	movw	r24, r14
     5a6:	b6 01       	movw	r22, r12
     5a8:	56 df       	rcall	.-340    	; 0x456 <prvTestWaitCondition>
     5aa:	88 23       	and	r24, r24
     5ac:	71 f0       	breq	.+28     	; 0x5ca <xEventGroupWaitBits+0x10c>
     5ae:	66 20       	and	r6, r6
     5b0:	61 f0       	breq	.+24     	; 0x5ca <xEventGroupWaitBits+0x10c>
     5b2:	80 94       	com	r8
     5b4:	90 94       	com	r9
     5b6:	a0 94       	com	r10
     5b8:	b0 94       	com	r11
     5ba:	8c 20       	and	r8, r12
     5bc:	9d 20       	and	r9, r13
     5be:	ae 20       	and	r10, r14
     5c0:	bf 20       	and	r11, r15
     5c2:	88 82       	st	Y, r8
     5c4:	99 82       	std	Y+1, r9	; 0x01
     5c6:	aa 82       	std	Y+2, r10	; 0x02
     5c8:	bb 82       	std	Y+3, r11	; 0x03
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	16 01       	movw	r2, r12
     5d0:	27 01       	movw	r4, r14
     5d2:	55 24       	eor	r5, r5
     5d4:	c2 01       	movw	r24, r4
     5d6:	b1 01       	movw	r22, r2
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	0f 91       	pop	r16
     5e0:	ff 90       	pop	r15
     5e2:	ef 90       	pop	r14
     5e4:	df 90       	pop	r13
     5e6:	cf 90       	pop	r12
     5e8:	bf 90       	pop	r11
     5ea:	af 90       	pop	r10
     5ec:	9f 90       	pop	r9
     5ee:	8f 90       	pop	r8
     5f0:	7f 90       	pop	r7
     5f2:	6f 90       	pop	r6
     5f4:	5f 90       	pop	r5
     5f6:	4f 90       	pop	r4
     5f8:	3f 90       	pop	r3
     5fa:	2f 90       	pop	r2
     5fc:	08 95       	ret

000005fe <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     5fe:	4f 92       	push	r4
     600:	5f 92       	push	r5
     602:	6f 92       	push	r6
     604:	7f 92       	push	r7
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	ec 01       	movw	r28, r24
     61c:	6a 01       	movw	r12, r20
     61e:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     620:	8c 01       	movw	r16, r24
     622:	09 5f       	subi	r16, 0xF9	; 249
     624:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     626:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     62a:	eb 85       	ldd	r30, Y+11	; 0x0b
     62c:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     62e:	88 81       	ld	r24, Y
     630:	99 81       	ldd	r25, Y+1	; 0x01
     632:	aa 81       	ldd	r26, Y+2	; 0x02
     634:	bb 81       	ldd	r27, Y+3	; 0x03
     636:	c8 2a       	or	r12, r24
     638:	d9 2a       	or	r13, r25
     63a:	ea 2a       	or	r14, r26
     63c:	fb 2a       	or	r15, r27
     63e:	c8 82       	st	Y, r12
     640:	d9 82       	std	Y+1, r13	; 0x01
     642:	ea 82       	std	Y+2, r14	; 0x02
     644:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     646:	c1 2c       	mov	r12, r1
     648:	d1 2c       	mov	r13, r1
     64a:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     64c:	3d c0       	rjmp	.+122    	; 0x6c8 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     64e:	a4 80       	ldd	r10, Z+4	; 0x04
     650:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	a2 81       	ldd	r26, Z+2	; 0x02
     658:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     65a:	ac 01       	movw	r20, r24
     65c:	bd 01       	movw	r22, r26
     65e:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     660:	b2 fd       	sbrc	r27, 2
     662:	0e c0       	rjmp	.+28     	; 0x680 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     664:	48 80       	ld	r4, Y
     666:	59 80       	ldd	r5, Y+1	; 0x01
     668:	6a 80       	ldd	r6, Y+2	; 0x02
     66a:	7b 80       	ldd	r7, Y+3	; 0x03
     66c:	44 22       	and	r4, r20
     66e:	55 22       	and	r5, r21
     670:	66 22       	and	r6, r22
     672:	77 22       	and	r7, r23
     674:	45 28       	or	r4, r5
     676:	46 28       	or	r4, r6
     678:	47 28       	or	r4, r7
     67a:	89 f4       	brne	.+34     	; 0x69e <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	12 c0       	rjmp	.+36     	; 0x6a4 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     680:	48 80       	ld	r4, Y
     682:	59 80       	ldd	r5, Y+1	; 0x01
     684:	6a 80       	ldd	r6, Y+2	; 0x02
     686:	7b 80       	ldd	r7, Y+3	; 0x03
     688:	44 22       	and	r4, r20
     68a:	55 22       	and	r5, r21
     68c:	66 22       	and	r6, r22
     68e:	77 22       	and	r7, r23
     690:	44 15       	cp	r20, r4
     692:	55 05       	cpc	r21, r5
     694:	66 05       	cpc	r22, r6
     696:	77 05       	cpc	r23, r7
     698:	21 f0       	breq	.+8      	; 0x6a2 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	03 c0       	rjmp	.+6      	; 0x6a4 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     6a2:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     6a4:	22 23       	and	r18, r18
     6a6:	71 f0       	breq	.+28     	; 0x6c4 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     6a8:	b0 ff       	sbrs	r27, 0
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     6ac:	c4 2a       	or	r12, r20
     6ae:	d5 2a       	or	r13, r21
     6b0:	e6 2a       	or	r14, r22
     6b2:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     6b4:	48 81       	ld	r20, Y
     6b6:	59 81       	ldd	r21, Y+1	; 0x01
     6b8:	6a 81       	ldd	r22, Y+2	; 0x02
     6ba:	7b 81       	ldd	r23, Y+3	; 0x03
     6bc:	72 60       	ori	r23, 0x02	; 2
     6be:	cf 01       	movw	r24, r30
     6c0:	0e 94 4d 13 	call	0x269a	; 0x269a <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6c4:	ea 2d       	mov	r30, r10
     6c6:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     6c8:	e0 17       	cp	r30, r16
     6ca:	f1 07       	cpc	r31, r17
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <xEventGroupSetBits+0xd2>
     6ce:	bf cf       	rjmp	.-130    	; 0x64e <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     6d0:	c0 94       	com	r12
     6d2:	d0 94       	com	r13
     6d4:	e0 94       	com	r14
     6d6:	f0 94       	com	r15
     6d8:	88 81       	ld	r24, Y
     6da:	99 81       	ldd	r25, Y+1	; 0x01
     6dc:	aa 81       	ldd	r26, Y+2	; 0x02
     6de:	bb 81       	ldd	r27, Y+3	; 0x03
     6e0:	c8 22       	and	r12, r24
     6e2:	d9 22       	and	r13, r25
     6e4:	ea 22       	and	r14, r26
     6e6:	fb 22       	and	r15, r27
     6e8:	c8 82       	st	Y, r12
     6ea:	d9 82       	std	Y+1, r13	; 0x01
     6ec:	ea 82       	std	Y+2, r14	; 0x02
     6ee:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     6f0:	0e 94 3a 10 	call	0x2074	; 0x2074 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     6f4:	68 81       	ld	r22, Y
     6f6:	79 81       	ldd	r23, Y+1	; 0x01
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	9b 81       	ldd	r25, Y+3	; 0x03
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	bf 90       	pop	r11
     70e:	af 90       	pop	r10
     710:	7f 90       	pop	r7
     712:	6f 90       	pop	r6
     714:	5f 90       	pop	r5
     716:	4f 90       	pop	r4
     718:	08 95       	ret

0000071a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     71a:	ee ef       	ldi	r30, 0xFE	; 254
     71c:	f7 e0       	ldi	r31, 0x07	; 7
     71e:	a2 e0       	ldi	r26, 0x02	; 2
     720:	b8 e0       	ldi	r27, 0x08	; 8
     722:	b1 83       	std	Z+1, r27	; 0x01
     724:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     726:	13 82       	std	Z+3, r1	; 0x03
     728:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     72a:	ea ea       	ldi	r30, 0xAA	; 170
     72c:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     72e:	f0 93 fd 07 	sts	0x07FD, r31	; 0x8007fd <pxEnd+0x1>
     732:	e0 93 fc 07 	sts	0x07FC, r30	; 0x8007fc <pxEnd>
    pxEnd->xBlockSize = 0;
     736:	13 82       	std	Z+3, r1	; 0x03
     738:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     73a:	11 82       	std	Z+1, r1	; 0x01
     73c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     73e:	88 ea       	ldi	r24, 0xA8	; 168
     740:	9d e0       	ldi	r25, 0x0D	; 13
     742:	13 96       	adiw	r26, 0x03	; 3
     744:	9c 93       	st	X, r25
     746:	8e 93       	st	-X, r24
     748:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     74a:	ed 93       	st	X+, r30
     74c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     74e:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <xMinimumEverFreeBytesRemaining+0x1>
     752:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     756:	90 93 fb 07 	sts	0x07FB, r25	; 0x8007fb <xFreeBytesRemaining+0x1>
     75a:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e8       	ldi	r25, 0x80	; 128
     762:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <__data_end+0x1>
     766:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <__data_end>
     76a:	08 95       	ret

0000076c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     772:	ae ef       	ldi	r26, 0xFE	; 254
     774:	b7 e0       	ldi	r27, 0x07	; 7
     776:	01 c0       	rjmp	.+2      	; 0x77a <prvInsertBlockIntoFreeList+0xe>
     778:	df 01       	movw	r26, r30
     77a:	ed 91       	ld	r30, X+
     77c:	fc 91       	ld	r31, X
     77e:	11 97       	sbiw	r26, 0x01	; 1
     780:	ec 17       	cp	r30, r28
     782:	fd 07       	cpc	r31, r29
     784:	c8 f3       	brcs	.-14     	; 0x778 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     786:	12 96       	adiw	r26, 0x02	; 2
     788:	8d 91       	ld	r24, X+
     78a:	9c 91       	ld	r25, X
     78c:	13 97       	sbiw	r26, 0x03	; 3
     78e:	9d 01       	movw	r18, r26
     790:	28 0f       	add	r18, r24
     792:	39 1f       	adc	r19, r25
     794:	c2 17       	cp	r28, r18
     796:	d3 07       	cpc	r29, r19
     798:	49 f4       	brne	.+18     	; 0x7ac <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     79a:	2a 81       	ldd	r18, Y+2	; 0x02
     79c:	3b 81       	ldd	r19, Y+3	; 0x03
     79e:	82 0f       	add	r24, r18
     7a0:	93 1f       	adc	r25, r19
     7a2:	13 96       	adiw	r26, 0x03	; 3
     7a4:	9c 93       	st	X, r25
     7a6:	8e 93       	st	-X, r24
     7a8:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     7aa:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	9b 81       	ldd	r25, Y+3	; 0x03
     7b0:	9e 01       	movw	r18, r28
     7b2:	28 0f       	add	r18, r24
     7b4:	39 1f       	adc	r19, r25
     7b6:	e2 17       	cp	r30, r18
     7b8:	f3 07       	cpc	r31, r19
     7ba:	c1 f4       	brne	.+48     	; 0x7ec <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     7bc:	20 91 fc 07 	lds	r18, 0x07FC	; 0x8007fc <pxEnd>
     7c0:	30 91 fd 07 	lds	r19, 0x07FD	; 0x8007fd <pxEnd+0x1>
     7c4:	e2 17       	cp	r30, r18
     7c6:	f3 07       	cpc	r31, r19
     7c8:	71 f0       	breq	.+28     	; 0x7e6 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     7ca:	22 81       	ldd	r18, Z+2	; 0x02
     7cc:	33 81       	ldd	r19, Z+3	; 0x03
     7ce:	82 0f       	add	r24, r18
     7d0:	93 1f       	adc	r25, r19
     7d2:	9b 83       	std	Y+3, r25	; 0x03
     7d4:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     7d6:	ed 91       	ld	r30, X+
     7d8:	fc 91       	ld	r31, X
     7da:	11 97       	sbiw	r26, 0x01	; 1
     7dc:	80 81       	ld	r24, Z
     7de:	91 81       	ldd	r25, Z+1	; 0x01
     7e0:	99 83       	std	Y+1, r25	; 0x01
     7e2:	88 83       	st	Y, r24
     7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     7e6:	39 83       	std	Y+1, r19	; 0x01
     7e8:	28 83       	st	Y, r18
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7ec:	f9 83       	std	Y+1, r31	; 0x01
     7ee:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7f0:	ca 17       	cp	r28, r26
     7f2:	db 07       	cpc	r29, r27
     7f4:	11 f0       	breq	.+4      	; 0x7fa <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7f6:	cd 93       	st	X+, r28
     7f8:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     80e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     812:	80 91 fc 07 	lds	r24, 0x07FC	; 0x8007fc <pxEnd>
     816:	90 91 fd 07 	lds	r25, 0x07FD	; 0x8007fd <pxEnd+0x1>
     81a:	89 2b       	or	r24, r25
     81c:	09 f4       	brne	.+2      	; 0x820 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     81e:	7d df       	rcall	.-262    	; 0x71a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     820:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <__data_end>
     824:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <__data_end+0x1>
     828:	80 23       	and	r24, r16
     82a:	91 23       	and	r25, r17
     82c:	89 2b       	or	r24, r25
     82e:	09 f0       	breq	.+2      	; 0x832 <pvPortMalloc+0x32>
     830:	76 c0       	rjmp	.+236    	; 0x91e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     832:	01 15       	cp	r16, r1
     834:	11 05       	cpc	r17, r1
     836:	49 f0       	breq	.+18     	; 0x84a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     838:	c8 01       	movw	r24, r16
     83a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     83c:	08 17       	cp	r16, r24
     83e:	19 07       	cpc	r17, r25
     840:	18 f0       	brcs	.+6      	; 0x848 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     842:	00 e0       	ldi	r16, 0x00	; 0
     844:	10 e0       	ldi	r17, 0x00	; 0
     846:	01 c0       	rjmp	.+2      	; 0x84a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     848:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     84a:	01 15       	cp	r16, r1
     84c:	11 05       	cpc	r17, r1
     84e:	09 f4       	brne	.+2      	; 0x852 <pvPortMalloc+0x52>
     850:	69 c0       	rjmp	.+210    	; 0x924 <pvPortMalloc+0x124>
     852:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <xFreeBytesRemaining>
     856:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <xFreeBytesRemaining+0x1>
     85a:	80 17       	cp	r24, r16
     85c:	91 07       	cpc	r25, r17
     85e:	08 f4       	brcc	.+2      	; 0x862 <pvPortMalloc+0x62>
     860:	64 c0       	rjmp	.+200    	; 0x92a <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     862:	c0 91 fe 07 	lds	r28, 0x07FE	; 0x8007fe <xStart>
     866:	d0 91 ff 07 	lds	r29, 0x07FF	; 0x8007ff <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     86a:	ee ef       	ldi	r30, 0xFE	; 254
     86c:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     86e:	02 c0       	rjmp	.+4      	; 0x874 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     870:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     872:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     874:	8a 81       	ldd	r24, Y+2	; 0x02
     876:	9b 81       	ldd	r25, Y+3	; 0x03
     878:	80 17       	cp	r24, r16
     87a:	91 07       	cpc	r25, r17
     87c:	20 f4       	brcc	.+8      	; 0x886 <pvPortMalloc+0x86>
     87e:	88 81       	ld	r24, Y
     880:	99 81       	ldd	r25, Y+1	; 0x01
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	a9 f7       	brne	.-22     	; 0x870 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     886:	80 91 fc 07 	lds	r24, 0x07FC	; 0x8007fc <pxEnd>
     88a:	90 91 fd 07 	lds	r25, 0x07FD	; 0x8007fd <pxEnd+0x1>
     88e:	c8 17       	cp	r28, r24
     890:	d9 07       	cpc	r29, r25
     892:	09 f4       	brne	.+2      	; 0x896 <pvPortMalloc+0x96>
     894:	4d c0       	rjmp	.+154    	; 0x930 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     896:	e0 80       	ld	r14, Z
     898:	f1 80       	ldd	r15, Z+1	; 0x01
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	e8 0e       	add	r14, r24
     89e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     8a0:	88 81       	ld	r24, Y
     8a2:	99 81       	ldd	r25, Y+1	; 0x01
     8a4:	91 83       	std	Z+1, r25	; 0x01
     8a6:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     8a8:	2a 81       	ldd	r18, Y+2	; 0x02
     8aa:	3b 81       	ldd	r19, Y+3	; 0x03
     8ac:	20 1b       	sub	r18, r16
     8ae:	31 0b       	sbc	r19, r17
     8b0:	29 30       	cpi	r18, 0x09	; 9
     8b2:	31 05       	cpc	r19, r1
     8b4:	48 f0       	brcs	.+18     	; 0x8c8 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     8b6:	ce 01       	movw	r24, r28
     8b8:	80 0f       	add	r24, r16
     8ba:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     8bc:	fc 01       	movw	r30, r24
     8be:	33 83       	std	Z+3, r19	; 0x03
     8c0:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     8c2:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     8c4:	0a 83       	std	Y+2, r16	; 0x02
     8c6:	52 df       	rcall	.-348    	; 0x76c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     8c8:	2a 81       	ldd	r18, Y+2	; 0x02
     8ca:	3b 81       	ldd	r19, Y+3	; 0x03
     8cc:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <xFreeBytesRemaining>
     8d0:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <xFreeBytesRemaining+0x1>
     8d4:	82 1b       	sub	r24, r18
     8d6:	93 0b       	sbc	r25, r19
     8d8:	90 93 fb 07 	sts	0x07FB, r25	; 0x8007fb <xFreeBytesRemaining+0x1>
     8dc:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     8e0:	40 91 f8 07 	lds	r20, 0x07F8	; 0x8007f8 <xMinimumEverFreeBytesRemaining>
     8e4:	50 91 f9 07 	lds	r21, 0x07F9	; 0x8007f9 <xMinimumEverFreeBytesRemaining+0x1>
     8e8:	84 17       	cp	r24, r20
     8ea:	95 07       	cpc	r25, r21
     8ec:	20 f4       	brcc	.+8      	; 0x8f6 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8ee:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <xMinimumEverFreeBytesRemaining+0x1>
     8f2:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     8f6:	80 91 f2 07 	lds	r24, 0x07F2	; 0x8007f2 <__data_end>
     8fa:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <__data_end+0x1>
     8fe:	28 2b       	or	r18, r24
     900:	39 2b       	or	r19, r25
     902:	3b 83       	std	Y+3, r19	; 0x03
     904:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     906:	19 82       	std	Y+1, r1	; 0x01
     908:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     90a:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <xNumberOfSuccessfulAllocations>
     90e:	90 91 f7 07 	lds	r25, 0x07F7	; 0x8007f7 <xNumberOfSuccessfulAllocations+0x1>
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	90 93 f7 07 	sts	0x07F7, r25	; 0x8007f7 <xNumberOfSuccessfulAllocations+0x1>
     918:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <xNumberOfSuccessfulAllocations>
     91c:	0b c0       	rjmp	.+22     	; 0x934 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     91e:	e1 2c       	mov	r14, r1
     920:	f1 2c       	mov	r15, r1
     922:	08 c0       	rjmp	.+16     	; 0x934 <pvPortMalloc+0x134>
     924:	e1 2c       	mov	r14, r1
     926:	f1 2c       	mov	r15, r1
     928:	05 c0       	rjmp	.+10     	; 0x934 <pvPortMalloc+0x134>
     92a:	e1 2c       	mov	r14, r1
     92c:	f1 2c       	mov	r15, r1
     92e:	02 c0       	rjmp	.+4      	; 0x934 <pvPortMalloc+0x134>
     930:	e1 2c       	mov	r14, r1
     932:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     934:	0e 94 3a 10 	call	0x2074	; 0x2074 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     938:	e1 14       	cp	r14, r1
     93a:	f1 04       	cpc	r15, r1
     93c:	11 f4       	brne	.+4      	; 0x942 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     93e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     942:	c7 01       	movw	r24, r14
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	08 95       	ret

00000952 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	91 f1       	breq	.+100    	; 0x9c2 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     95e:	ec 01       	movw	r28, r24
     960:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     962:	4a 81       	ldd	r20, Y+2	; 0x02
     964:	5b 81       	ldd	r21, Y+3	; 0x03
     966:	20 91 f2 07 	lds	r18, 0x07F2	; 0x8007f2 <__data_end>
     96a:	30 91 f3 07 	lds	r19, 0x07F3	; 0x8007f3 <__data_end+0x1>
     96e:	ba 01       	movw	r22, r20
     970:	62 23       	and	r22, r18
     972:	73 23       	and	r23, r19
     974:	67 2b       	or	r22, r23
     976:	29 f1       	breq	.+74     	; 0x9c2 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     978:	68 81       	ld	r22, Y
     97a:	79 81       	ldd	r23, Y+1	; 0x01
     97c:	67 2b       	or	r22, r23
     97e:	09 f5       	brne	.+66     	; 0x9c2 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     980:	20 95       	com	r18
     982:	30 95       	com	r19
     984:	24 23       	and	r18, r20
     986:	35 23       	and	r19, r21
     988:	3b 83       	std	Y+3, r19	; 0x03
     98a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     98c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     990:	8a 81       	ldd	r24, Y+2	; 0x02
     992:	9b 81       	ldd	r25, Y+3	; 0x03
     994:	20 91 fa 07 	lds	r18, 0x07FA	; 0x8007fa <xFreeBytesRemaining>
     998:	30 91 fb 07 	lds	r19, 0x07FB	; 0x8007fb <xFreeBytesRemaining+0x1>
     99c:	82 0f       	add	r24, r18
     99e:	93 1f       	adc	r25, r19
     9a0:	90 93 fb 07 	sts	0x07FB, r25	; 0x8007fb <xFreeBytesRemaining+0x1>
     9a4:	80 93 fa 07 	sts	0x07FA, r24	; 0x8007fa <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     9a8:	ce 01       	movw	r24, r28
     9aa:	e0 de       	rcall	.-576    	; 0x76c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     9ac:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <xNumberOfSuccessfulFrees>
     9b0:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <xNumberOfSuccessfulFrees+0x1>
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	90 93 f5 07 	sts	0x07F5, r25	; 0x8007f5 <xNumberOfSuccessfulFrees+0x1>
     9ba:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     9be:	0e 94 3a 10 	call	0x2074	; 0x2074 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	08 95       	ret

000009cc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     9cc:	fc 01       	movw	r30, r24
     9ce:	03 96       	adiw	r24, 0x03	; 3
     9d0:	92 83       	std	Z+2, r25	; 0x02
     9d2:	81 83       	std	Z+1, r24	; 0x01
     9d4:	4f ef       	ldi	r20, 0xFF	; 255
     9d6:	5f ef       	ldi	r21, 0xFF	; 255
     9d8:	ba 01       	movw	r22, r20
     9da:	43 83       	std	Z+3, r20	; 0x03
     9dc:	54 83       	std	Z+4, r21	; 0x04
     9de:	65 83       	std	Z+5, r22	; 0x05
     9e0:	76 83       	std	Z+6, r23	; 0x06
     9e2:	90 87       	std	Z+8, r25	; 0x08
     9e4:	87 83       	std	Z+7, r24	; 0x07
     9e6:	92 87       	std	Z+10, r25	; 0x0a
     9e8:	81 87       	std	Z+9, r24	; 0x09
     9ea:	10 82       	st	Z, r1
     9ec:	08 95       	ret

000009ee <vListInitialiseItem>:
     9ee:	fc 01       	movw	r30, r24
     9f0:	13 86       	std	Z+11, r1	; 0x0b
     9f2:	12 86       	std	Z+10, r1	; 0x0a
     9f4:	08 95       	ret

000009f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a00:	08 81       	ld	r16, Y
     a02:	19 81       	ldd	r17, Y+1	; 0x01
     a04:	2a 81       	ldd	r18, Y+2	; 0x02
     a06:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a08:	0f 3f       	cpi	r16, 0xFF	; 255
     a0a:	4f ef       	ldi	r20, 0xFF	; 255
     a0c:	14 07       	cpc	r17, r20
     a0e:	24 07       	cpc	r18, r20
     a10:	34 07       	cpc	r19, r20
     a12:	21 f4       	brne	.+8      	; 0xa1c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a14:	fc 01       	movw	r30, r24
     a16:	a1 85       	ldd	r26, Z+9	; 0x09
     a18:	b2 85       	ldd	r27, Z+10	; 0x0a
     a1a:	11 c0       	rjmp	.+34     	; 0xa3e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a1c:	dc 01       	movw	r26, r24
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <vListInsert+0x2e>
     a22:	df 01       	movw	r26, r30
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	ed 91       	ld	r30, X+
     a28:	fc 91       	ld	r31, X
     a2a:	15 97       	sbiw	r26, 0x05	; 5
     a2c:	40 81       	ld	r20, Z
     a2e:	51 81       	ldd	r21, Z+1	; 0x01
     a30:	62 81       	ldd	r22, Z+2	; 0x02
     a32:	73 81       	ldd	r23, Z+3	; 0x03
     a34:	04 17       	cp	r16, r20
     a36:	15 07       	cpc	r17, r21
     a38:	26 07       	cpc	r18, r22
     a3a:	37 07       	cpc	r19, r23
     a3c:	90 f7       	brcc	.-28     	; 0xa22 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a3e:	14 96       	adiw	r26, 0x04	; 4
     a40:	ed 91       	ld	r30, X+
     a42:	fc 91       	ld	r31, X
     a44:	15 97       	sbiw	r26, 0x05	; 5
     a46:	fd 83       	std	Y+5, r31	; 0x05
     a48:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a4a:	d7 83       	std	Z+7, r29	; 0x07
     a4c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a4e:	bf 83       	std	Y+7, r27	; 0x07
     a50:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a52:	15 96       	adiw	r26, 0x05	; 5
     a54:	dc 93       	st	X, r29
     a56:	ce 93       	st	-X, r28
     a58:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a5a:	9b 87       	std	Y+11, r25	; 0x0b
     a5c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a5e:	fc 01       	movw	r30, r24
     a60:	20 81       	ld	r18, Z
     a62:	2f 5f       	subi	r18, 0xFF	; 255
     a64:	20 83       	st	Z, r18
}
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a76:	a2 85       	ldd	r26, Z+10	; 0x0a
     a78:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a7a:	c4 81       	ldd	r28, Z+4	; 0x04
     a7c:	d5 81       	ldd	r29, Z+5	; 0x05
     a7e:	86 81       	ldd	r24, Z+6	; 0x06
     a80:	97 81       	ldd	r25, Z+7	; 0x07
     a82:	9f 83       	std	Y+7, r25	; 0x07
     a84:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a86:	c6 81       	ldd	r28, Z+6	; 0x06
     a88:	d7 81       	ldd	r29, Z+7	; 0x07
     a8a:	84 81       	ldd	r24, Z+4	; 0x04
     a8c:	95 81       	ldd	r25, Z+5	; 0x05
     a8e:	9d 83       	std	Y+5, r25	; 0x05
     a90:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a92:	11 96       	adiw	r26, 0x01	; 1
     a94:	8d 91       	ld	r24, X+
     a96:	9c 91       	ld	r25, X
     a98:	12 97       	sbiw	r26, 0x02	; 2
     a9a:	e8 17       	cp	r30, r24
     a9c:	f9 07       	cpc	r31, r25
     a9e:	31 f4       	brne	.+12     	; 0xaac <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     aa0:	86 81       	ldd	r24, Z+6	; 0x06
     aa2:	97 81       	ldd	r25, Z+7	; 0x07
     aa4:	12 96       	adiw	r26, 0x02	; 2
     aa6:	9c 93       	st	X, r25
     aa8:	8e 93       	st	-X, r24
     aaa:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     aac:	13 86       	std	Z+11, r1	; 0x0b
     aae:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     ab0:	8c 91       	ld	r24, X
     ab2:	81 50       	subi	r24, 0x01	; 1
     ab4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ab6:	8c 91       	ld	r24, X
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     abe:	a8 95       	wdr
     ac0:	90 ec       	ldi	r25, 0xC0	; 192
     ac2:	88 e1       	ldi	r24, 0x18	; 24
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	a8 95       	wdr
     aca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ad4:	08 95       	ret

00000ad6 <pxPortInitialiseStack>:
     ad6:	fc 01       	movw	r30, r24
     ad8:	60 83       	st	Z, r22
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	70 83       	st	Z, r23
     ade:	31 97       	sbiw	r30, 0x01	; 1
     ae0:	10 82       	st	Z, r1
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	10 82       	st	Z, r1
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	20 e8       	ldi	r18, 0x80	; 128
     aea:	20 83       	st	Z, r18
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	10 82       	st	Z, r1
     af0:	31 97       	sbiw	r30, 0x01	; 1
     af2:	10 82       	st	Z, r1
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	10 82       	st	Z, r1
     af8:	77 97       	sbiw	r30, 0x17	; 23
     afa:	40 83       	st	Z, r20
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	50 83       	st	Z, r21
     b00:	86 97       	sbiw	r24, 0x26	; 38
     b02:	08 95       	ret

00000b04 <xPortStartScheduler>:
     b04:	dc df       	rcall	.-72     	; 0xabe <prvSetupTimerInterrupt>
     b06:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
     b0a:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
     b0e:	cd 91       	ld	r28, X+
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	dd 91       	ld	r29, X+
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	bf 91       	pop	r27
     b20:	af 91       	pop	r26
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	7f 91       	pop	r23
     b28:	6f 91       	pop	r22
     b2a:	5f 91       	pop	r21
     b2c:	4f 91       	pop	r20
     b2e:	3f 91       	pop	r19
     b30:	2f 91       	pop	r18
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	bf 90       	pop	r11
     b40:	af 90       	pop	r10
     b42:	9f 90       	pop	r9
     b44:	8f 90       	pop	r8
     b46:	7f 90       	pop	r7
     b48:	6f 90       	pop	r6
     b4a:	5f 90       	pop	r5
     b4c:	4f 90       	pop	r4
     b4e:	3f 90       	pop	r3
     b50:	2f 90       	pop	r2
     b52:	1f 90       	pop	r1
     b54:	0f 90       	pop	r0
     b56:	0c be       	out	0x3c, r0	; 60
     b58:	0f 90       	pop	r0
     b5a:	0b be       	out	0x3b, r0	; 59
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	08 95       	ret
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	08 95       	ret

00000b68 <vPortYield>:
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	0f 92       	push	r0
     b70:	0b b6       	in	r0, 0x3b	; 59
     b72:	0f 92       	push	r0
     b74:	0c b6       	in	r0, 0x3c	; 60
     b76:	0f 92       	push	r0
     b78:	1f 92       	push	r1
     b7a:	11 24       	eor	r1, r1
     b7c:	2f 92       	push	r2
     b7e:	3f 92       	push	r3
     b80:	4f 92       	push	r4
     b82:	5f 92       	push	r5
     b84:	6f 92       	push	r6
     b86:	7f 92       	push	r7
     b88:	8f 92       	push	r8
     b8a:	9f 92       	push	r9
     b8c:	af 92       	push	r10
     b8e:	bf 92       	push	r11
     b90:	cf 92       	push	r12
     b92:	df 92       	push	r13
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	2f 93       	push	r18
     b9e:	3f 93       	push	r19
     ba0:	4f 93       	push	r20
     ba2:	5f 93       	push	r21
     ba4:	6f 93       	push	r22
     ba6:	7f 93       	push	r23
     ba8:	8f 93       	push	r24
     baa:	9f 93       	push	r25
     bac:	af 93       	push	r26
     bae:	bf 93       	push	r27
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ef 93       	push	r30
     bb6:	ff 93       	push	r31
     bb8:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
     bbc:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
     bc0:	0d b6       	in	r0, 0x3d	; 61
     bc2:	0d 92       	st	X+, r0
     bc4:	0e b6       	in	r0, 0x3e	; 62
     bc6:	0d 92       	st	X+, r0
     bc8:	0e 94 96 11 	call	0x232c	; 0x232c <vTaskSwitchContext>
     bcc:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
     bd0:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
     bd4:	cd 91       	ld	r28, X+
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	dd 91       	ld	r29, X+
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	bf 90       	pop	r11
     c06:	af 90       	pop	r10
     c08:	9f 90       	pop	r9
     c0a:	8f 90       	pop	r8
     c0c:	7f 90       	pop	r7
     c0e:	6f 90       	pop	r6
     c10:	5f 90       	pop	r5
     c12:	4f 90       	pop	r4
     c14:	3f 90       	pop	r3
     c16:	2f 90       	pop	r2
     c18:	1f 90       	pop	r1
     c1a:	0f 90       	pop	r0
     c1c:	0c be       	out	0x3c, r0	; 60
     c1e:	0f 90       	pop	r0
     c20:	0b be       	out	0x3b, r0	; 59
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	08 95       	ret

00000c2a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	0f 92       	push	r0
     c32:	0b b6       	in	r0, 0x3b	; 59
     c34:	0f 92       	push	r0
     c36:	0c b6       	in	r0, 0x3c	; 60
     c38:	0f 92       	push	r0
     c3a:	1f 92       	push	r1
     c3c:	11 24       	eor	r1, r1
     c3e:	2f 92       	push	r2
     c40:	3f 92       	push	r3
     c42:	4f 92       	push	r4
     c44:	5f 92       	push	r5
     c46:	6f 92       	push	r6
     c48:	7f 92       	push	r7
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
     c7a:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
     c7e:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
     c82:	0d b6       	in	r0, 0x3d	; 61
     c84:	0d 92       	st	X+, r0
     c86:	0e b6       	in	r0, 0x3e	; 62
     c88:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c8a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c8c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <xTaskIncrementTick>
     c90:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c92:	0e 94 96 11 	call	0x232c	; 0x232c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c96:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
     c9a:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
     c9e:	cd 91       	ld	r28, X+
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	dd 91       	ld	r29, X+
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	ff 91       	pop	r31
     ca8:	ef 91       	pop	r30
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	bf 91       	pop	r27
     cb0:	af 91       	pop	r26
     cb2:	9f 91       	pop	r25
     cb4:	8f 91       	pop	r24
     cb6:	7f 91       	pop	r23
     cb8:	6f 91       	pop	r22
     cba:	5f 91       	pop	r21
     cbc:	4f 91       	pop	r20
     cbe:	3f 91       	pop	r19
     cc0:	2f 91       	pop	r18
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	df 90       	pop	r13
     ccc:	cf 90       	pop	r12
     cce:	bf 90       	pop	r11
     cd0:	af 90       	pop	r10
     cd2:	9f 90       	pop	r9
     cd4:	8f 90       	pop	r8
     cd6:	7f 90       	pop	r7
     cd8:	6f 90       	pop	r6
     cda:	5f 90       	pop	r5
     cdc:	4f 90       	pop	r4
     cde:	3f 90       	pop	r3
     ce0:	2f 90       	pop	r2
     ce2:	1f 90       	pop	r1
     ce4:	0f 90       	pop	r0
     ce6:	0c be       	out	0x3c, r0	; 60
     ce8:	0f 90       	pop	r0
     cea:	0b be       	out	0x3b, r0	; 59
     cec:	0f 90       	pop	r0
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     cf2:	08 95       	ret

00000cf4 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     cf4:	9a df       	rcall	.-204    	; 0xc2a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cf6:	18 95       	reti

00000cf8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	0f 92       	push	r0
     cfe:	fc 01       	movw	r30, r24
     d00:	86 8d       	ldd	r24, Z+30	; 0x1e
     d02:	81 11       	cpse	r24, r1
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <prvIsQueueEmpty+0x12>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <prvIsQueueEmpty+0x14>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	08 95       	ret

00000d12 <prvIsQueueFull>:
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	0f 92       	push	r0
     d18:	fc 01       	movw	r30, r24
     d1a:	26 8d       	ldd	r18, Z+30	; 0x1e
     d1c:	87 8d       	ldd	r24, Z+31	; 0x1f
     d1e:	28 13       	cpse	r18, r24
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <prvIsQueueFull+0x14>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <prvIsQueueFull+0x16>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	08 95       	ret

00000d2e <prvCopyDataToQueue>:
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	ec 01       	movw	r28, r24
     d38:	04 2f       	mov	r16, r20
     d3a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d3c:	48 a1       	ldd	r20, Y+32	; 0x20
     d3e:	41 11       	cpse	r20, r1
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <prvCopyDataToQueue+0x2c>
     d42:	88 81       	ld	r24, Y
     d44:	99 81       	ldd	r25, Y+1	; 0x01
     d46:	89 2b       	or	r24, r25
     d48:	09 f0       	breq	.+2      	; 0xd4c <prvCopyDataToQueue+0x1e>
     d4a:	42 c0       	rjmp	.+132    	; 0xdd0 <prvCopyDataToQueue+0xa2>
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	9d 81       	ldd	r25, Y+5	; 0x05
     d50:	0e 94 8b 14 	call	0x2916	; 0x2916 <xTaskPriorityDisinherit>
     d54:	1d 82       	std	Y+5, r1	; 0x05
     d56:	1c 82       	std	Y+4, r1	; 0x04
     d58:	42 c0       	rjmp	.+132    	; 0xdde <prvCopyDataToQueue+0xb0>
     d5a:	01 11       	cpse	r16, r1
     d5c:	17 c0       	rjmp	.+46     	; 0xd8c <prvCopyDataToQueue+0x5e>
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	0e 94 65 32 	call	0x64ca	; 0x64ca <memcpy>
     d68:	28 a1       	ldd	r18, Y+32	; 0x20
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	82 0f       	add	r24, r18
     d70:	91 1d       	adc	r25, r1
     d72:	9b 83       	std	Y+3, r25	; 0x03
     d74:	8a 83       	std	Y+2, r24	; 0x02
     d76:	2c 81       	ldd	r18, Y+4	; 0x04
     d78:	3d 81       	ldd	r19, Y+5	; 0x05
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	50 f1       	brcs	.+84     	; 0xdd4 <prvCopyDataToQueue+0xa6>
     d80:	88 81       	ld	r24, Y
     d82:	99 81       	ldd	r25, Y+1	; 0x01
     d84:	9b 83       	std	Y+3, r25	; 0x03
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	29 c0       	rjmp	.+82     	; 0xdde <prvCopyDataToQueue+0xb0>
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	8e 81       	ldd	r24, Y+6	; 0x06
     d90:	9f 81       	ldd	r25, Y+7	; 0x07
     d92:	0e 94 65 32 	call	0x64ca	; 0x64ca <memcpy>
     d96:	88 a1       	ldd	r24, Y+32	; 0x20
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	91 95       	neg	r25
     d9c:	81 95       	neg	r24
     d9e:	91 09       	sbc	r25, r1
     da0:	2e 81       	ldd	r18, Y+6	; 0x06
     da2:	3f 81       	ldd	r19, Y+7	; 0x07
     da4:	28 0f       	add	r18, r24
     da6:	39 1f       	adc	r19, r25
     da8:	3f 83       	std	Y+7, r19	; 0x07
     daa:	2e 83       	std	Y+6, r18	; 0x06
     dac:	48 81       	ld	r20, Y
     dae:	59 81       	ldd	r21, Y+1	; 0x01
     db0:	24 17       	cp	r18, r20
     db2:	35 07       	cpc	r19, r21
     db4:	30 f4       	brcc	.+12     	; 0xdc2 <prvCopyDataToQueue+0x94>
     db6:	2c 81       	ldd	r18, Y+4	; 0x04
     db8:	3d 81       	ldd	r19, Y+5	; 0x05
     dba:	82 0f       	add	r24, r18
     dbc:	93 1f       	adc	r25, r19
     dbe:	9f 83       	std	Y+7, r25	; 0x07
     dc0:	8e 83       	std	Y+6, r24	; 0x06
     dc2:	02 30       	cpi	r16, 0x02	; 2
     dc4:	49 f4       	brne	.+18     	; 0xdd8 <prvCopyDataToQueue+0xaa>
     dc6:	11 23       	and	r17, r17
     dc8:	49 f0       	breq	.+18     	; 0xddc <prvCopyDataToQueue+0xae>
     dca:	11 50       	subi	r17, 0x01	; 1
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	07 c0       	rjmp	.+14     	; 0xdde <prvCopyDataToQueue+0xb0>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <prvCopyDataToQueue+0xb0>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <prvCopyDataToQueue+0xb0>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	01 c0       	rjmp	.+2      	; 0xdde <prvCopyDataToQueue+0xb0>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	1f 5f       	subi	r17, 0xFF	; 255
     de0:	1e 8f       	std	Y+30, r17	; 0x1e
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <prvCopyDataFromQueue>:
     dec:	fc 01       	movw	r30, r24
     dee:	40 a1       	ldd	r20, Z+32	; 0x20
     df0:	44 23       	and	r20, r20
     df2:	a9 f0       	breq	.+42     	; 0xe1e <prvCopyDataFromQueue+0x32>
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	26 81       	ldd	r18, Z+6	; 0x06
     df8:	37 81       	ldd	r19, Z+7	; 0x07
     dfa:	24 0f       	add	r18, r20
     dfc:	35 1f       	adc	r19, r21
     dfe:	37 83       	std	Z+7, r19	; 0x07
     e00:	26 83       	std	Z+6, r18	; 0x06
     e02:	84 81       	ldd	r24, Z+4	; 0x04
     e04:	95 81       	ldd	r25, Z+5	; 0x05
     e06:	28 17       	cp	r18, r24
     e08:	39 07       	cpc	r19, r25
     e0a:	20 f0       	brcs	.+8      	; 0xe14 <prvCopyDataFromQueue+0x28>
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	97 83       	std	Z+7, r25	; 0x07
     e12:	86 83       	std	Z+6, r24	; 0x06
     e14:	cb 01       	movw	r24, r22
     e16:	66 81       	ldd	r22, Z+6	; 0x06
     e18:	77 81       	ldd	r23, Z+7	; 0x07
     e1a:	0c 94 65 32 	jmp	0x64ca	; 0x64ca <memcpy>
     e1e:	08 95       	ret

00000e20 <prvUnlockQueue>:
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	0f 92       	push	r0
     e2e:	1a a1       	ldd	r17, Y+34	; 0x22
     e30:	0b c0       	rjmp	.+22     	; 0xe48 <prvUnlockQueue+0x28>
     e32:	8b 89       	ldd	r24, Y+19	; 0x13
     e34:	88 23       	and	r24, r24
     e36:	51 f0       	breq	.+20     	; 0xe4c <prvUnlockQueue+0x2c>
     e38:	ce 01       	movw	r24, r28
     e3a:	43 96       	adiw	r24, 0x13	; 19
     e3c:	0e 94 9e 12 	call	0x253c	; 0x253c <xTaskRemoveFromEventList>
     e40:	81 11       	cpse	r24, r1
     e42:	0e 94 74 14 	call	0x28e8	; 0x28e8 <vTaskMissedYield>
     e46:	11 50       	subi	r17, 0x01	; 1
     e48:	11 16       	cp	r1, r17
     e4a:	9c f3       	brlt	.-26     	; 0xe32 <prvUnlockQueue+0x12>
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	8a a3       	std	Y+34, r24	; 0x22
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	0f 92       	push	r0
     e5a:	19 a1       	ldd	r17, Y+33	; 0x21
     e5c:	0b c0       	rjmp	.+22     	; 0xe74 <prvUnlockQueue+0x54>
     e5e:	88 85       	ldd	r24, Y+8	; 0x08
     e60:	88 23       	and	r24, r24
     e62:	51 f0       	breq	.+20     	; 0xe78 <prvUnlockQueue+0x58>
     e64:	ce 01       	movw	r24, r28
     e66:	08 96       	adiw	r24, 0x08	; 8
     e68:	0e 94 9e 12 	call	0x253c	; 0x253c <xTaskRemoveFromEventList>
     e6c:	81 11       	cpse	r24, r1
     e6e:	0e 94 74 14 	call	0x28e8	; 0x28e8 <vTaskMissedYield>
     e72:	11 50       	subi	r17, 0x01	; 1
     e74:	11 16       	cp	r1, r17
     e76:	9c f3       	brlt	.-26     	; 0xe5e <prvUnlockQueue+0x3e>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	89 a3       	std	Y+33, r24	; 0x21
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	08 95       	ret

00000e88 <xQueueGenericReset>:
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ec 01       	movw	r28, r24
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	0f 92       	push	r0
     e94:	e8 81       	ld	r30, Y
     e96:	f9 81       	ldd	r31, Y+1	; 0x01
     e98:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e9a:	28 a1       	ldd	r18, Y+32	; 0x20
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	82 9f       	mul	r24, r18
     ea2:	a0 01       	movw	r20, r0
     ea4:	83 9f       	mul	r24, r19
     ea6:	50 0d       	add	r21, r0
     ea8:	92 9f       	mul	r25, r18
     eaa:	50 0d       	add	r21, r0
     eac:	11 24       	eor	r1, r1
     eae:	4e 0f       	add	r20, r30
     eb0:	5f 1f       	adc	r21, r31
     eb2:	5d 83       	std	Y+5, r21	; 0x05
     eb4:	4c 83       	std	Y+4, r20	; 0x04
     eb6:	1e 8e       	std	Y+30, r1	; 0x1e
     eb8:	fb 83       	std	Y+3, r31	; 0x03
     eba:	ea 83       	std	Y+2, r30	; 0x02
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	28 9f       	mul	r18, r24
     ec0:	a0 01       	movw	r20, r0
     ec2:	29 9f       	mul	r18, r25
     ec4:	50 0d       	add	r21, r0
     ec6:	38 9f       	mul	r19, r24
     ec8:	50 0d       	add	r21, r0
     eca:	11 24       	eor	r1, r1
     ecc:	cf 01       	movw	r24, r30
     ece:	84 0f       	add	r24, r20
     ed0:	95 1f       	adc	r25, r21
     ed2:	9f 83       	std	Y+7, r25	; 0x07
     ed4:	8e 83       	std	Y+6, r24	; 0x06
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	89 a3       	std	Y+33, r24	; 0x21
     eda:	8a a3       	std	Y+34, r24	; 0x22
     edc:	61 11       	cpse	r22, r1
     ede:	0b c0       	rjmp	.+22     	; 0xef6 <xQueueGenericReset+0x6e>
     ee0:	88 85       	ldd	r24, Y+8	; 0x08
     ee2:	88 23       	and	r24, r24
     ee4:	71 f0       	breq	.+28     	; 0xf02 <xQueueGenericReset+0x7a>
     ee6:	ce 01       	movw	r24, r28
     ee8:	08 96       	adiw	r24, 0x08	; 8
     eea:	0e 94 9e 12 	call	0x253c	; 0x253c <xTaskRemoveFromEventList>
     eee:	88 23       	and	r24, r24
     ef0:	41 f0       	breq	.+16     	; 0xf02 <xQueueGenericReset+0x7a>
     ef2:	3a de       	rcall	.-908    	; 0xb68 <vPortYield>
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <xQueueGenericReset+0x7a>
     ef6:	ce 01       	movw	r24, r28
     ef8:	08 96       	adiw	r24, 0x08	; 8
     efa:	68 dd       	rcall	.-1328   	; 0x9cc <vListInitialise>
     efc:	ce 01       	movw	r24, r28
     efe:	43 96       	adiw	r24, 0x13	; 19
     f00:	65 dd       	rcall	.-1334   	; 0x9cc <vListInitialise>
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <prvInitialiseNewQueue>:
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	f8 01       	movw	r30, r16
     f14:	61 11       	cpse	r22, r1
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <prvInitialiseNewQueue+0x10>
     f18:	11 83       	std	Z+1, r17	; 0x01
     f1a:	00 83       	st	Z, r16
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <prvInitialiseNewQueue+0x14>
     f1e:	51 83       	std	Z+1, r21	; 0x01
     f20:	40 83       	st	Z, r20
     f22:	87 8f       	std	Z+31, r24	; 0x1f
     f24:	60 a3       	std	Z+32, r22	; 0x20
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	cf 01       	movw	r24, r30
     f2a:	ae df       	rcall	.-164    	; 0xe88 <xQueueGenericReset>
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	08 95       	ret

00000f32 <xQueueGenericCreate>:
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	f8 2e       	mov	r15, r24
     f42:	e6 2e       	mov	r14, r22
     f44:	d4 2e       	mov	r13, r20
     f46:	86 9f       	mul	r24, r22
     f48:	c0 01       	movw	r24, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	83 96       	adiw	r24, 0x23	; 35
     f4e:	58 dc       	rcall	.-1872   	; 0x800 <pvPortMalloc>
     f50:	ec 01       	movw	r28, r24
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	41 f0       	breq	.+16     	; 0xf66 <xQueueGenericCreate+0x34>
     f56:	8c 01       	movw	r16, r24
     f58:	2d 2d       	mov	r18, r13
     f5a:	ac 01       	movw	r20, r24
     f5c:	4d 5d       	subi	r20, 0xDD	; 221
     f5e:	5f 4f       	sbci	r21, 0xFF	; 255
     f60:	6e 2d       	mov	r22, r14
     f62:	8f 2d       	mov	r24, r15
     f64:	d4 df       	rcall	.-88     	; 0xf0e <prvInitialiseNewQueue>
     f66:	ce 01       	movw	r24, r28
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	08 95       	ret

00000f78 <xQueueGenericSend>:
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	29 97       	sbiw	r28, 0x09	; 9
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	7c 01       	movw	r14, r24
     f9a:	6b 01       	movw	r12, r22
     f9c:	2e 83       	std	Y+6, r18	; 0x06
     f9e:	3f 83       	std	Y+7, r19	; 0x07
     fa0:	48 87       	std	Y+8, r20	; 0x08
     fa2:	59 87       	std	Y+9, r21	; 0x09
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	0f 92       	push	r0
     fac:	f7 01       	movw	r30, r14
     fae:	96 8d       	ldd	r25, Z+30	; 0x1e
     fb0:	87 8d       	ldd	r24, Z+31	; 0x1f
     fb2:	98 17       	cp	r25, r24
     fb4:	10 f0       	brcs	.+4      	; 0xfba <xQueueGenericSend+0x42>
     fb6:	02 30       	cpi	r16, 0x02	; 2
     fb8:	b1 f4       	brne	.+44     	; 0xfe6 <xQueueGenericSend+0x6e>
     fba:	40 2f       	mov	r20, r16
     fbc:	b6 01       	movw	r22, r12
     fbe:	c7 01       	movw	r24, r14
     fc0:	b6 de       	rcall	.-660    	; 0xd2e <prvCopyDataToQueue>
     fc2:	f7 01       	movw	r30, r14
     fc4:	93 89       	ldd	r25, Z+19	; 0x13
     fc6:	99 23       	and	r25, r25
     fc8:	41 f0       	breq	.+16     	; 0xfda <xQueueGenericSend+0x62>
     fca:	c7 01       	movw	r24, r14
     fcc:	43 96       	adiw	r24, 0x13	; 19
     fce:	0e 94 9e 12 	call	0x253c	; 0x253c <xTaskRemoveFromEventList>
     fd2:	88 23       	and	r24, r24
     fd4:	21 f0       	breq	.+8      	; 0xfde <xQueueGenericSend+0x66>
     fd6:	c8 dd       	rcall	.-1136   	; 0xb68 <vPortYield>
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <xQueueGenericSend+0x66>
     fda:	81 11       	cpse	r24, r1
     fdc:	c5 dd       	rcall	.-1142   	; 0xb68 <vPortYield>
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	4b c0       	rjmp	.+150    	; 0x107c <__EEPROM_REGION_LENGTH__+0x7c>
     fe6:	8e 81       	ldd	r24, Y+6	; 0x06
     fe8:	9f 81       	ldd	r25, Y+7	; 0x07
     fea:	a8 85       	ldd	r26, Y+8	; 0x08
     fec:	b9 85       	ldd	r27, Y+9	; 0x09
     fee:	89 2b       	or	r24, r25
     ff0:	8a 2b       	or	r24, r26
     ff2:	8b 2b       	or	r24, r27
     ff4:	21 f4       	brne	.+8      	; 0xffe <xQueueGenericSend+0x86>
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	3f c0       	rjmp	.+126    	; 0x107c <__EEPROM_REGION_LENGTH__+0x7c>
     ffe:	11 11       	cpse	r17, r1
    1000:	05 c0       	rjmp	.+10     	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
    1002:	ce 01       	movw	r24, r28
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	0e 94 fd 13 	call	0x27fa	; 0x27fa <vTaskInternalSetTimeOutState>
    100a:	11 e0       	ldi	r17, 0x01	; 1
    100c:	0f 90       	pop	r0
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	f1 d6       	rcall	.+3554   	; 0x1df4 <vTaskSuspendAll>
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	0f 92       	push	r0
    1018:	f7 01       	movw	r30, r14
    101a:	81 a1       	ldd	r24, Z+33	; 0x21
    101c:	8f 3f       	cpi	r24, 0xFF	; 255
    101e:	09 f4       	brne	.+2      	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
    1020:	11 a2       	std	Z+33, r1	; 0x21
    1022:	f7 01       	movw	r30, r14
    1024:	82 a1       	ldd	r24, Z+34	; 0x22
    1026:	8f 3f       	cpi	r24, 0xFF	; 255
    1028:	09 f4       	brne	.+2      	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    102a:	12 a2       	std	Z+34, r1	; 0x22
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	be 01       	movw	r22, r28
    1032:	6a 5f       	subi	r22, 0xFA	; 250
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	0e 94 0e 14 	call	0x281c	; 0x281c <xTaskCheckForTimeOut>
    103e:	81 11       	cpse	r24, r1
    1040:	19 c0       	rjmp	.+50     	; 0x1074 <__EEPROM_REGION_LENGTH__+0x74>
    1042:	c7 01       	movw	r24, r14
    1044:	66 de       	rcall	.-820    	; 0xd12 <prvIsQueueFull>
    1046:	88 23       	and	r24, r24
    1048:	81 f0       	breq	.+32     	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    104a:	4e 81       	ldd	r20, Y+6	; 0x06
    104c:	5f 81       	ldd	r21, Y+7	; 0x07
    104e:	68 85       	ldd	r22, Y+8	; 0x08
    1050:	79 85       	ldd	r23, Y+9	; 0x09
    1052:	c7 01       	movw	r24, r14
    1054:	08 96       	adiw	r24, 0x08	; 8
    1056:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <vTaskPlaceOnEventList>
    105a:	c7 01       	movw	r24, r14
    105c:	e1 de       	rcall	.-574    	; 0xe20 <prvUnlockQueue>
    105e:	0e 94 3a 10 	call	0x2074	; 0x2074 <xTaskResumeAll>
    1062:	81 11       	cpse	r24, r1
    1064:	a0 cf       	rjmp	.-192    	; 0xfa6 <xQueueGenericSend+0x2e>
    1066:	80 dd       	rcall	.-1280   	; 0xb68 <vPortYield>
    1068:	9e cf       	rjmp	.-196    	; 0xfa6 <xQueueGenericSend+0x2e>
    106a:	c7 01       	movw	r24, r14
    106c:	d9 de       	rcall	.-590    	; 0xe20 <prvUnlockQueue>
    106e:	0e 94 3a 10 	call	0x2074	; 0x2074 <xTaskResumeAll>
    1072:	99 cf       	rjmp	.-206    	; 0xfa6 <xQueueGenericSend+0x2e>
    1074:	c7 01       	movw	r24, r14
    1076:	d4 de       	rcall	.-600    	; 0xe20 <prvUnlockQueue>
    1078:	fd d7       	rcall	.+4090   	; 0x2074 <xTaskResumeAll>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	29 96       	adiw	r28, 0x09	; 9
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	08 95       	ret

0000109a <xQueueGenericSendFromISR>:
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	8a 01       	movw	r16, r20
    10a8:	fc 01       	movw	r30, r24
    10aa:	56 8d       	ldd	r21, Z+30	; 0x1e
    10ac:	37 8d       	ldd	r19, Z+31	; 0x1f
    10ae:	53 17       	cp	r21, r19
    10b0:	10 f0       	brcs	.+4      	; 0x10b6 <xQueueGenericSendFromISR+0x1c>
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	f9 f4       	brne	.+62     	; 0x10f4 <xQueueGenericSendFromISR+0x5a>
    10b6:	42 2f       	mov	r20, r18
    10b8:	78 01       	movw	r14, r16
    10ba:	ec 01       	movw	r28, r24
    10bc:	1a a1       	ldd	r17, Y+34	; 0x22
    10be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10c0:	ce 01       	movw	r24, r28
    10c2:	35 de       	rcall	.-918    	; 0xd2e <prvCopyDataToQueue>
    10c4:	1f 3f       	cpi	r17, 0xFF	; 255
    10c6:	81 f4       	brne	.+32     	; 0x10e8 <xQueueGenericSendFromISR+0x4e>
    10c8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ca:	88 23       	and	r24, r24
    10cc:	a9 f0       	breq	.+42     	; 0x10f8 <xQueueGenericSendFromISR+0x5e>
    10ce:	ce 01       	movw	r24, r28
    10d0:	43 96       	adiw	r24, 0x13	; 19
    10d2:	0e 94 9e 12 	call	0x253c	; 0x253c <xTaskRemoveFromEventList>
    10d6:	88 23       	and	r24, r24
    10d8:	89 f0       	breq	.+34     	; 0x10fc <xQueueGenericSendFromISR+0x62>
    10da:	e1 14       	cp	r14, r1
    10dc:	f1 04       	cpc	r15, r1
    10de:	81 f0       	breq	.+32     	; 0x1100 <xQueueGenericSendFromISR+0x66>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	f7 01       	movw	r30, r14
    10e4:	80 83       	st	Z, r24
    10e6:	0d c0       	rjmp	.+26     	; 0x1102 <xQueueGenericSendFromISR+0x68>
    10e8:	ff 24       	eor	r15, r15
    10ea:	f3 94       	inc	r15
    10ec:	f1 0e       	add	r15, r17
    10ee:	fa a2       	std	Y+34, r15	; 0x22
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	07 c0       	rjmp	.+14     	; 0x1102 <xQueueGenericSendFromISR+0x68>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	05 c0       	rjmp	.+10     	; 0x1102 <xQueueGenericSendFromISR+0x68>
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <xQueueGenericSendFromISR+0x68>
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <xQueueGenericSendFromISR+0x68>
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	08 95       	ret

00001110 <xQueueReceive>:
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	29 97       	sbiw	r28, 0x09	; 9
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	8c 01       	movw	r16, r24
    1132:	6b 01       	movw	r12, r22
    1134:	2e 83       	std	Y+6, r18	; 0x06
    1136:	3f 83       	std	Y+7, r19	; 0x07
    1138:	48 87       	std	Y+8, r20	; 0x08
    113a:	59 87       	std	Y+9, r21	; 0x09
    113c:	e1 2c       	mov	r14, r1
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	0f 92       	push	r0
    1144:	f8 01       	movw	r30, r16
    1146:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1148:	ff 20       	and	r15, r15
    114a:	99 f0       	breq	.+38     	; 0x1172 <xQueueReceive+0x62>
    114c:	b6 01       	movw	r22, r12
    114e:	c8 01       	movw	r24, r16
    1150:	4d de       	rcall	.-870    	; 0xdec <prvCopyDataFromQueue>
    1152:	fa 94       	dec	r15
    1154:	f8 01       	movw	r30, r16
    1156:	f6 8e       	std	Z+30, r15	; 0x1e
    1158:	80 85       	ldd	r24, Z+8	; 0x08
    115a:	88 23       	and	r24, r24
    115c:	31 f0       	breq	.+12     	; 0x116a <xQueueReceive+0x5a>
    115e:	c8 01       	movw	r24, r16
    1160:	08 96       	adiw	r24, 0x08	; 8
    1162:	0e 94 9e 12 	call	0x253c	; 0x253c <xTaskRemoveFromEventList>
    1166:	81 11       	cpse	r24, r1
    1168:	ff dc       	rcall	.-1538   	; 0xb68 <vPortYield>
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	4f c0       	rjmp	.+158    	; 0x1210 <xQueueReceive+0x100>
    1172:	8e 81       	ldd	r24, Y+6	; 0x06
    1174:	9f 81       	ldd	r25, Y+7	; 0x07
    1176:	a8 85       	ldd	r26, Y+8	; 0x08
    1178:	b9 85       	ldd	r27, Y+9	; 0x09
    117a:	89 2b       	or	r24, r25
    117c:	8a 2b       	or	r24, r26
    117e:	8b 2b       	or	r24, r27
    1180:	21 f4       	brne	.+8      	; 0x118a <xQueueReceive+0x7a>
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	43 c0       	rjmp	.+134    	; 0x1210 <xQueueReceive+0x100>
    118a:	e1 10       	cpse	r14, r1
    118c:	06 c0       	rjmp	.+12     	; 0x119a <xQueueReceive+0x8a>
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	0e 94 fd 13 	call	0x27fa	; 0x27fa <vTaskInternalSetTimeOutState>
    1196:	ee 24       	eor	r14, r14
    1198:	e3 94       	inc	r14
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	2a d6       	rcall	.+3156   	; 0x1df4 <vTaskSuspendAll>
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	0f 92       	push	r0
    11a6:	f8 01       	movw	r30, r16
    11a8:	81 a1       	ldd	r24, Z+33	; 0x21
    11aa:	8f 3f       	cpi	r24, 0xFF	; 255
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <xQueueReceive+0xa0>
    11ae:	11 a2       	std	Z+33, r1	; 0x21
    11b0:	f8 01       	movw	r30, r16
    11b2:	82 a1       	ldd	r24, Z+34	; 0x22
    11b4:	8f 3f       	cpi	r24, 0xFF	; 255
    11b6:	09 f4       	brne	.+2      	; 0x11ba <xQueueReceive+0xaa>
    11b8:	12 a2       	std	Z+34, r1	; 0x22
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	be 01       	movw	r22, r28
    11c0:	6a 5f       	subi	r22, 0xFA	; 250
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	ce 01       	movw	r24, r28
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	0e 94 0e 14 	call	0x281c	; 0x281c <xTaskCheckForTimeOut>
    11cc:	81 11       	cpse	r24, r1
    11ce:	17 c0       	rjmp	.+46     	; 0x11fe <xQueueReceive+0xee>
    11d0:	c8 01       	movw	r24, r16
    11d2:	92 dd       	rcall	.-1244   	; 0xcf8 <prvIsQueueEmpty>
    11d4:	88 23       	and	r24, r24
    11d6:	79 f0       	breq	.+30     	; 0x11f6 <xQueueReceive+0xe6>
    11d8:	4e 81       	ldd	r20, Y+6	; 0x06
    11da:	5f 81       	ldd	r21, Y+7	; 0x07
    11dc:	68 85       	ldd	r22, Y+8	; 0x08
    11de:	79 85       	ldd	r23, Y+9	; 0x09
    11e0:	c8 01       	movw	r24, r16
    11e2:	43 96       	adiw	r24, 0x13	; 19
    11e4:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <vTaskPlaceOnEventList>
    11e8:	c8 01       	movw	r24, r16
    11ea:	1a de       	rcall	.-972    	; 0xe20 <prvUnlockQueue>
    11ec:	43 d7       	rcall	.+3718   	; 0x2074 <xTaskResumeAll>
    11ee:	81 11       	cpse	r24, r1
    11f0:	a6 cf       	rjmp	.-180    	; 0x113e <xQueueReceive+0x2e>
    11f2:	ba dc       	rcall	.-1676   	; 0xb68 <vPortYield>
    11f4:	a4 cf       	rjmp	.-184    	; 0x113e <xQueueReceive+0x2e>
    11f6:	c8 01       	movw	r24, r16
    11f8:	13 de       	rcall	.-986    	; 0xe20 <prvUnlockQueue>
    11fa:	3c d7       	rcall	.+3704   	; 0x2074 <xTaskResumeAll>
    11fc:	a0 cf       	rjmp	.-192    	; 0x113e <xQueueReceive+0x2e>
    11fe:	c8 01       	movw	r24, r16
    1200:	0f de       	rcall	.-994    	; 0xe20 <prvUnlockQueue>
    1202:	38 d7       	rcall	.+3696   	; 0x2074 <xTaskResumeAll>
    1204:	c8 01       	movw	r24, r16
    1206:	78 dd       	rcall	.-1296   	; 0xcf8 <prvIsQueueEmpty>
    1208:	88 23       	and	r24, r24
    120a:	09 f4       	brne	.+2      	; 0x120e <xQueueReceive+0xfe>
    120c:	98 cf       	rjmp	.-208    	; 0x113e <xQueueReceive+0x2e>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	29 96       	adiw	r28, 0x09	; 9
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	08 95       	ret

0000122e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	0f 92       	push	r0
    123a:	89 a1       	ldd	r24, Y+33	; 0x21
    123c:	8f 3f       	cpi	r24, 0xFF	; 255
    123e:	09 f4       	brne	.+2      	; 0x1242 <vQueueWaitForMessageRestricted+0x14>
    1240:	19 a2       	std	Y+33, r1	; 0x21
    1242:	8a a1       	ldd	r24, Y+34	; 0x22
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	09 f4       	brne	.+2      	; 0x124a <vQueueWaitForMessageRestricted+0x1c>
    1248:	1a a2       	std	Y+34, r1	; 0x22
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    124e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1250:	81 11       	cpse	r24, r1
    1252:	04 c0       	rjmp	.+8      	; 0x125c <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1254:	ce 01       	movw	r24, r28
    1256:	43 96       	adiw	r24, 0x13	; 19
    1258:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    125c:	ce 01       	movw	r24, r28
    125e:	e0 dd       	rcall	.-1088   	; 0xe20 <prvUnlockQueue>
    }
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1266:	fc 01       	movw	r30, r24
    1268:	44 81       	ldd	r20, Z+4	; 0x04
    126a:	55 81       	ldd	r21, Z+5	; 0x05
    126c:	22 81       	ldd	r18, Z+2	; 0x02
    126e:	33 81       	ldd	r19, Z+3	; 0x03
    1270:	24 0f       	add	r18, r20
    1272:	35 1f       	adc	r19, r21
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	b9 01       	movw	r22, r18
    127a:	68 1b       	sub	r22, r24
    127c:	79 0b       	sbc	r23, r25
    127e:	cb 01       	movw	r24, r22
    1280:	64 17       	cp	r22, r20
    1282:	75 07       	cpc	r23, r21
    1284:	10 f0       	brcs	.+4      	; 0x128a <prvBytesInBuffer+0x24>
    1286:	84 1b       	sub	r24, r20
    1288:	95 0b       	sbc	r25, r21
    128a:	08 95       	ret

0000128c <prvInitialiseNewStreamBuffer>:
    128c:	0f 93       	push	r16
    128e:	fc 01       	movw	r30, r24
    1290:	8f e0       	ldi	r24, 0x0F	; 15
    1292:	df 01       	movw	r26, r30
    1294:	1d 92       	st	X+, r1
    1296:	8a 95       	dec	r24
    1298:	e9 f7       	brne	.-6      	; 0x1294 <prvInitialiseNewStreamBuffer+0x8>
    129a:	75 87       	std	Z+13, r23	; 0x0d
    129c:	64 87       	std	Z+12, r22	; 0x0c
    129e:	55 83       	std	Z+5, r21	; 0x05
    12a0:	44 83       	std	Z+4, r20	; 0x04
    12a2:	37 83       	std	Z+7, r19	; 0x07
    12a4:	26 83       	std	Z+6, r18	; 0x06
    12a6:	06 87       	std	Z+14, r16	; 0x0e
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <prvWriteBytesToBuffer>:
    12ac:	af 92       	push	r10
    12ae:	bf 92       	push	r11
    12b0:	cf 92       	push	r12
    12b2:	df 92       	push	r13
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	6c 01       	movw	r12, r24
    12c2:	5b 01       	movw	r10, r22
    12c4:	7a 01       	movw	r14, r20
    12c6:	fc 01       	movw	r30, r24
    12c8:	c2 81       	ldd	r28, Z+2	; 0x02
    12ca:	d3 81       	ldd	r29, Z+3	; 0x03
    12cc:	04 81       	ldd	r16, Z+4	; 0x04
    12ce:	15 81       	ldd	r17, Z+5	; 0x05
    12d0:	0c 1b       	sub	r16, r28
    12d2:	1d 0b       	sbc	r17, r29
    12d4:	40 17       	cp	r20, r16
    12d6:	51 07       	cpc	r21, r17
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <prvWriteBytesToBuffer+0x30>
    12da:	8a 01       	movw	r16, r20
    12dc:	f6 01       	movw	r30, r12
    12de:	84 85       	ldd	r24, Z+12	; 0x0c
    12e0:	95 85       	ldd	r25, Z+13	; 0x0d
    12e2:	a8 01       	movw	r20, r16
    12e4:	b5 01       	movw	r22, r10
    12e6:	8c 0f       	add	r24, r28
    12e8:	9d 1f       	adc	r25, r29
    12ea:	0e 94 65 32 	call	0x64ca	; 0x64ca <memcpy>
    12ee:	0e 15       	cp	r16, r14
    12f0:	1f 05       	cpc	r17, r15
    12f2:	58 f4       	brcc	.+22     	; 0x130a <prvWriteBytesToBuffer+0x5e>
    12f4:	a7 01       	movw	r20, r14
    12f6:	40 1b       	sub	r20, r16
    12f8:	51 0b       	sbc	r21, r17
    12fa:	b5 01       	movw	r22, r10
    12fc:	60 0f       	add	r22, r16
    12fe:	71 1f       	adc	r23, r17
    1300:	f6 01       	movw	r30, r12
    1302:	84 85       	ldd	r24, Z+12	; 0x0c
    1304:	95 85       	ldd	r25, Z+13	; 0x0d
    1306:	0e 94 65 32 	call	0x64ca	; 0x64ca <memcpy>
    130a:	ce 01       	movw	r24, r28
    130c:	8e 0d       	add	r24, r14
    130e:	9f 1d       	adc	r25, r15
    1310:	f6 01       	movw	r30, r12
    1312:	24 81       	ldd	r18, Z+4	; 0x04
    1314:	35 81       	ldd	r19, Z+5	; 0x05
    1316:	82 17       	cp	r24, r18
    1318:	93 07       	cpc	r25, r19
    131a:	10 f0       	brcs	.+4      	; 0x1320 <prvWriteBytesToBuffer+0x74>
    131c:	82 1b       	sub	r24, r18
    131e:	93 0b       	sbc	r25, r19
    1320:	f6 01       	movw	r30, r12
    1322:	93 83       	std	Z+3, r25	; 0x03
    1324:	82 83       	std	Z+2, r24	; 0x02
    1326:	c7 01       	movw	r24, r14
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	08 95       	ret

0000133e <prvWriteMessageToBuffer>:
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	1f 92       	push	r1
    1350:	1f 92       	push	r1
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	7c 01       	movw	r14, r24
    1358:	6b 01       	movw	r12, r22
    135a:	5a 83       	std	Y+2, r21	; 0x02
    135c:	49 83       	std	Y+1, r20	; 0x01
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	c1 f0       	breq	.+48     	; 0x1394 <prvWriteMessageToBuffer+0x56>
    1364:	fc 01       	movw	r30, r24
    1366:	86 85       	ldd	r24, Z+14	; 0x0e
    1368:	80 fd       	sbrc	r24, 0
    136a:	08 c0       	rjmp	.+16     	; 0x137c <prvWriteMessageToBuffer+0x3e>
    136c:	42 17       	cp	r20, r18
    136e:	53 07       	cpc	r21, r19
    1370:	08 f4       	brcc	.+2      	; 0x1374 <prvWriteMessageToBuffer+0x36>
    1372:	9a 01       	movw	r18, r20
    1374:	3a 83       	std	Y+2, r19	; 0x02
    1376:	29 83       	std	Y+1, r18	; 0x01
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	0f c0       	rjmp	.+30     	; 0x139a <prvWriteMessageToBuffer+0x5c>
    137c:	20 17       	cp	r18, r16
    137e:	31 07       	cpc	r19, r17
    1380:	58 f0       	brcs	.+22     	; 0x1398 <prvWriteMessageToBuffer+0x5a>
    1382:	42 e0       	ldi	r20, 0x02	; 2
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	be 01       	movw	r22, r28
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	c7 01       	movw	r24, r14
    138e:	8e df       	rcall	.-228    	; 0x12ac <prvWriteBytesToBuffer>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	03 c0       	rjmp	.+6      	; 0x139a <prvWriteMessageToBuffer+0x5c>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	01 c0       	rjmp	.+2      	; 0x139a <prvWriteMessageToBuffer+0x5c>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	88 23       	and	r24, r24
    139c:	31 f0       	breq	.+12     	; 0x13aa <prvWriteMessageToBuffer+0x6c>
    139e:	49 81       	ldd	r20, Y+1	; 0x01
    13a0:	5a 81       	ldd	r21, Y+2	; 0x02
    13a2:	b6 01       	movw	r22, r12
    13a4:	c7 01       	movw	r24, r14
    13a6:	82 df       	rcall	.-252    	; 0x12ac <prvWriteBytesToBuffer>
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <prvWriteMessageToBuffer+0x70>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
    13c2:	08 95       	ret

000013c4 <prvReadBytesFromBuffer>:
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	7c 01       	movw	r14, r24
    13da:	5b 01       	movw	r10, r22
    13dc:	e9 01       	movw	r28, r18
    13de:	42 17       	cp	r20, r18
    13e0:	53 07       	cpc	r21, r19
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <prvReadBytesFromBuffer+0x22>
    13e4:	ea 01       	movw	r28, r20
    13e6:	20 97       	sbiw	r28, 0x00	; 0
    13e8:	81 f1       	breq	.+96     	; 0x144a <prvReadBytesFromBuffer+0x86>
    13ea:	f7 01       	movw	r30, r14
    13ec:	00 81       	ld	r16, Z
    13ee:	11 81       	ldd	r17, Z+1	; 0x01
    13f0:	84 81       	ldd	r24, Z+4	; 0x04
    13f2:	95 81       	ldd	r25, Z+5	; 0x05
    13f4:	80 1b       	sub	r24, r16
    13f6:	91 0b       	sbc	r25, r17
    13f8:	6e 01       	movw	r12, r28
    13fa:	8c 17       	cp	r24, r28
    13fc:	9d 07       	cpc	r25, r29
    13fe:	08 f4       	brcc	.+2      	; 0x1402 <prvReadBytesFromBuffer+0x3e>
    1400:	6c 01       	movw	r12, r24
    1402:	f7 01       	movw	r30, r14
    1404:	64 85       	ldd	r22, Z+12	; 0x0c
    1406:	75 85       	ldd	r23, Z+13	; 0x0d
    1408:	60 0f       	add	r22, r16
    140a:	71 1f       	adc	r23, r17
    140c:	a6 01       	movw	r20, r12
    140e:	c5 01       	movw	r24, r10
    1410:	0e 94 65 32 	call	0x64ca	; 0x64ca <memcpy>
    1414:	cc 16       	cp	r12, r28
    1416:	dd 06       	cpc	r13, r29
    1418:	58 f4       	brcc	.+22     	; 0x1430 <prvReadBytesFromBuffer+0x6c>
    141a:	ae 01       	movw	r20, r28
    141c:	4c 19       	sub	r20, r12
    141e:	5d 09       	sbc	r21, r13
    1420:	f7 01       	movw	r30, r14
    1422:	64 85       	ldd	r22, Z+12	; 0x0c
    1424:	75 85       	ldd	r23, Z+13	; 0x0d
    1426:	c5 01       	movw	r24, r10
    1428:	8c 0d       	add	r24, r12
    142a:	9d 1d       	adc	r25, r13
    142c:	0e 94 65 32 	call	0x64ca	; 0x64ca <memcpy>
    1430:	0c 0f       	add	r16, r28
    1432:	1d 1f       	adc	r17, r29
    1434:	f7 01       	movw	r30, r14
    1436:	84 81       	ldd	r24, Z+4	; 0x04
    1438:	95 81       	ldd	r25, Z+5	; 0x05
    143a:	08 17       	cp	r16, r24
    143c:	19 07       	cpc	r17, r25
    143e:	10 f0       	brcs	.+4      	; 0x1444 <prvReadBytesFromBuffer+0x80>
    1440:	08 1b       	sub	r16, r24
    1442:	19 0b       	sbc	r17, r25
    1444:	f7 01       	movw	r30, r14
    1446:	11 83       	std	Z+1, r17	; 0x01
    1448:	00 83       	st	Z, r16
    144a:	ce 01       	movw	r24, r28
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	08 95       	ret

00001462 <prvReadMessageFromBuffer>:
    1462:	6f 92       	push	r6
    1464:	7f 92       	push	r7
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	1f 92       	push	r1
    1480:	1f 92       	push	r1
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	6c 01       	movw	r12, r24
    1488:	4b 01       	movw	r8, r22
    148a:	5a 01       	movw	r10, r20
    148c:	79 01       	movw	r14, r18
    148e:	01 15       	cp	r16, r1
    1490:	11 05       	cpc	r17, r1
    1492:	b1 f0       	breq	.+44     	; 0x14c0 <prvReadMessageFromBuffer+0x5e>
    1494:	fc 01       	movw	r30, r24
    1496:	60 80       	ld	r6, Z
    1498:	71 80       	ldd	r7, Z+1	; 0x01
    149a:	a8 01       	movw	r20, r16
    149c:	be 01       	movw	r22, r28
    149e:	6f 5f       	subi	r22, 0xFF	; 255
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	90 df       	rcall	.-224    	; 0x13c4 <prvReadBytesFromBuffer>
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	e0 1a       	sub	r14, r16
    14aa:	f1 0a       	sbc	r15, r17
    14ac:	a8 16       	cp	r10, r24
    14ae:	b9 06       	cpc	r11, r25
    14b0:	30 f4       	brcc	.+12     	; 0x14be <prvReadMessageFromBuffer+0x5c>
    14b2:	f6 01       	movw	r30, r12
    14b4:	71 82       	std	Z+1, r7	; 0x01
    14b6:	60 82       	st	Z, r6
    14b8:	a1 2c       	mov	r10, r1
    14ba:	b1 2c       	mov	r11, r1
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <prvReadMessageFromBuffer+0x5e>
    14be:	5c 01       	movw	r10, r24
    14c0:	97 01       	movw	r18, r14
    14c2:	a5 01       	movw	r20, r10
    14c4:	b4 01       	movw	r22, r8
    14c6:	c6 01       	movw	r24, r12
    14c8:	7d df       	rcall	.-262    	; 0x13c4 <prvReadBytesFromBuffer>
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	cf 90       	pop	r12
    14de:	bf 90       	pop	r11
    14e0:	af 90       	pop	r10
    14e2:	9f 90       	pop	r9
    14e4:	8f 90       	pop	r8
    14e6:	7f 90       	pop	r7
    14e8:	6f 90       	pop	r6
    14ea:	08 95       	ret

000014ec <xStreamBufferGenericCreate>:
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	ec 01       	movw	r28, r24
    14fc:	6b 01       	movw	r12, r22
    14fe:	41 30       	cpi	r20, 0x01	; 1
    1500:	11 f4       	brne	.+4      	; 0x1506 <xStreamBufferGenericCreate+0x1a>
    1502:	01 e0       	ldi	r16, 0x01	; 1
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <xStreamBufferGenericCreate+0x1c>
    1506:	00 e0       	ldi	r16, 0x00	; 0
    1508:	c1 14       	cp	r12, r1
    150a:	d1 04       	cpc	r13, r1
    150c:	19 f4       	brne	.+6      	; 0x1514 <xStreamBufferGenericCreate+0x28>
    150e:	cc 24       	eor	r12, r12
    1510:	c3 94       	inc	r12
    1512:	d1 2c       	mov	r13, r1
    1514:	ce 01       	movw	r24, r28
    1516:	40 96       	adiw	r24, 0x10	; 16
    1518:	c8 17       	cp	r28, r24
    151a:	d9 07       	cpc	r29, r25
    151c:	20 f4       	brcc	.+8      	; 0x1526 <xStreamBufferGenericCreate+0x3a>
    151e:	21 96       	adiw	r28, 0x01	; 1
    1520:	6f d9       	rcall	.-3362   	; 0x800 <pvPortMalloc>
    1522:	7c 01       	movw	r14, r24
    1524:	02 c0       	rjmp	.+4      	; 0x152a <xStreamBufferGenericCreate+0x3e>
    1526:	e1 2c       	mov	r14, r1
    1528:	f1 2c       	mov	r15, r1
    152a:	e1 14       	cp	r14, r1
    152c:	f1 04       	cpc	r15, r1
    152e:	39 f0       	breq	.+14     	; 0x153e <xStreamBufferGenericCreate+0x52>
    1530:	96 01       	movw	r18, r12
    1532:	ae 01       	movw	r20, r28
    1534:	b7 01       	movw	r22, r14
    1536:	61 5f       	subi	r22, 0xF1	; 241
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	c7 01       	movw	r24, r14
    153c:	a7 de       	rcall	.-690    	; 0x128c <prvInitialiseNewStreamBuffer>
    153e:	c7 01       	movw	r24, r14
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	08 95       	ret

00001550 <xStreamBufferReset>:
    1550:	0f 93       	push	r16
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	0f 92       	push	r0
    1558:	fc 01       	movw	r30, r24
    155a:	20 85       	ldd	r18, Z+8	; 0x08
    155c:	31 85       	ldd	r19, Z+9	; 0x09
    155e:	23 2b       	or	r18, r19
    1560:	71 f4       	brne	.+28     	; 0x157e <xStreamBufferReset+0x2e>
    1562:	22 85       	ldd	r18, Z+10	; 0x0a
    1564:	33 85       	ldd	r19, Z+11	; 0x0b
    1566:	23 2b       	or	r18, r19
    1568:	61 f4       	brne	.+24     	; 0x1582 <xStreamBufferReset+0x32>
    156a:	26 81       	ldd	r18, Z+6	; 0x06
    156c:	37 81       	ldd	r19, Z+7	; 0x07
    156e:	44 81       	ldd	r20, Z+4	; 0x04
    1570:	55 81       	ldd	r21, Z+5	; 0x05
    1572:	64 85       	ldd	r22, Z+12	; 0x0c
    1574:	75 85       	ldd	r23, Z+13	; 0x0d
    1576:	06 85       	ldd	r16, Z+14	; 0x0e
    1578:	89 de       	rcall	.-750    	; 0x128c <prvInitialiseNewStreamBuffer>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <xStreamBufferReset+0x34>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	01 c0       	rjmp	.+2      	; 0x1584 <xStreamBufferReset+0x34>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <xStreamBufferSpacesAvailable>:
    158c:	fc 01       	movw	r30, r24
    158e:	24 81       	ldd	r18, Z+4	; 0x04
    1590:	35 81       	ldd	r19, Z+5	; 0x05
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	82 0f       	add	r24, r18
    1598:	93 1f       	adc	r25, r19
    159a:	42 81       	ldd	r20, Z+2	; 0x02
    159c:	53 81       	ldd	r21, Z+3	; 0x03
    159e:	84 1b       	sub	r24, r20
    15a0:	95 0b       	sbc	r25, r21
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	82 17       	cp	r24, r18
    15a6:	93 07       	cpc	r25, r19
    15a8:	10 f0       	brcs	.+4      	; 0x15ae <xStreamBufferSpacesAvailable+0x22>
    15aa:	82 1b       	sub	r24, r18
    15ac:	93 0b       	sbc	r25, r19
    15ae:	08 95       	ret

000015b0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    15b0:	2f 92       	push	r2
    15b2:	3f 92       	push	r3
    15b4:	4f 92       	push	r4
    15b6:	5f 92       	push	r5
    15b8:	6f 92       	push	r6
    15ba:	7f 92       	push	r7
    15bc:	8f 92       	push	r8
    15be:	9f 92       	push	r9
    15c0:	af 92       	push	r10
    15c2:	bf 92       	push	r11
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	2b 97       	sbiw	r28, 0x0b	; 11
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	4c 01       	movw	r8, r24
    15e6:	7b 87       	std	Y+11, r23	; 0x0b
    15e8:	6a 87       	std	Y+10, r22	; 0x0a
    15ea:	1a 01       	movw	r2, r20
    15ec:	0e 83       	std	Y+6, r16	; 0x06
    15ee:	1f 83       	std	Y+7, r17	; 0x07
    15f0:	28 87       	std	Y+8, r18	; 0x08
    15f2:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    15f4:	fc 01       	movw	r30, r24
    15f6:	84 81       	ldd	r24, Z+4	; 0x04
    15f8:	95 81       	ldd	r25, Z+5	; 0x05
    15fa:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    15fc:	26 85       	ldd	r18, Z+14	; 0x0e
    15fe:	20 ff       	sbrs	r18, 0
    1600:	0c c0       	rjmp	.+24     	; 0x161a <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1602:	2a 01       	movw	r4, r20
    1604:	f2 e0       	ldi	r31, 0x02	; 2
    1606:	4f 0e       	add	r4, r31
    1608:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    160a:	84 15       	cp	r24, r4
    160c:	95 05       	cpc	r25, r5
    160e:	58 f4       	brcc	.+22     	; 0x1626 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1610:	1e 82       	std	Y+6, r1	; 0x06
    1612:	1f 82       	std	Y+7, r1	; 0x07
    1614:	18 86       	std	Y+8, r1	; 0x08
    1616:	19 86       	std	Y+9, r1	; 0x09
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    161a:	84 17       	cp	r24, r20
    161c:	95 07       	cpc	r25, r21
    161e:	10 f0       	brcs	.+4      	; 0x1624 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1620:	2a 01       	movw	r4, r20
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1624:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1626:	8e 81       	ldd	r24, Y+6	; 0x06
    1628:	9f 81       	ldd	r25, Y+7	; 0x07
    162a:	a8 85       	ldd	r26, Y+8	; 0x08
    162c:	b9 85       	ldd	r27, Y+9	; 0x09
    162e:	89 2b       	or	r24, r25
    1630:	8a 2b       	or	r24, r26
    1632:	8b 2b       	or	r24, r27
    1634:	09 f4       	brne	.+2      	; 0x1638 <xStreamBufferSend+0x88>
    1636:	38 c0       	rjmp	.+112    	; 0x16a8 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1638:	ce 01       	movw	r24, r28
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	0e 94 e7 13 	call	0x27ce	; 0x27ce <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1646:	c4 01       	movw	r24, r8
    1648:	a1 df       	rcall	.-190    	; 0x158c <xStreamBufferSpacesAvailable>
    164a:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    164c:	84 15       	cp	r24, r4
    164e:	95 05       	cpc	r25, r5
    1650:	40 f5       	brcc	.+80     	; 0x16a2 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    165c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <xTaskGetCurrentTaskHandle>
    1660:	f4 01       	movw	r30, r8
    1662:	93 87       	std	Z+11, r25	; 0x0b
    1664:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    166a:	ae 80       	ldd	r10, Y+6	; 0x06
    166c:	bf 80       	ldd	r11, Y+7	; 0x07
    166e:	c8 84       	ldd	r12, Y+8	; 0x08
    1670:	d9 84       	ldd	r13, Y+9	; 0x09
    1672:	e1 2c       	mov	r14, r1
    1674:	f1 2c       	mov	r15, r1
    1676:	00 e0       	ldi	r16, 0x00	; 0
    1678:	10 e0       	ldi	r17, 0x00	; 0
    167a:	98 01       	movw	r18, r16
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	ba 01       	movw	r22, r20
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0e 94 10 15 	call	0x2a20	; 0x2a20 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1688:	f4 01       	movw	r30, r8
    168a:	13 86       	std	Z+11, r1	; 0x0b
    168c:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    168e:	be 01       	movw	r22, r28
    1690:	6a 5f       	subi	r22, 0xFA	; 250
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	ce 01       	movw	r24, r28
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	0e 94 0e 14 	call	0x281c	; 0x281c <xTaskCheckForTimeOut>
    169c:	88 23       	and	r24, r24
    169e:	81 f2       	breq	.-96     	; 0x1640 <xStreamBufferSend+0x90>
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
                    break;
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    16a8:	61 2c       	mov	r6, r1
    16aa:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    16ac:	61 14       	cp	r6, r1
    16ae:	71 04       	cpc	r7, r1
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16b2:	c4 01       	movw	r24, r8
    16b4:	6b df       	rcall	.-298    	; 0x158c <xStreamBufferSpacesAvailable>
    16b6:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16b8:	82 01       	movw	r16, r4
    16ba:	93 01       	movw	r18, r6
    16bc:	a1 01       	movw	r20, r2
    16be:	6a 85       	ldd	r22, Y+10	; 0x0a
    16c0:	7b 85       	ldd	r23, Y+11	; 0x0b
    16c2:	c4 01       	movw	r24, r8
    16c4:	3c de       	rcall	.-904    	; 0x133e <prvWriteMessageToBuffer>
    16c6:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    16c8:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16ca:	e9 f0       	breq	.+58     	; 0x1706 <xStreamBufferSend+0x156>
    16cc:	c4 01       	movw	r24, r8
    16ce:	cb dd       	rcall	.-1130   	; 0x1266 <prvBytesInBuffer>
    16d0:	f4 01       	movw	r30, r8
    16d2:	26 81       	ldd	r18, Z+6	; 0x06
    16d4:	37 81       	ldd	r19, Z+7	; 0x07
    16d6:	82 17       	cp	r24, r18
    16d8:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    16da:	a8 f0       	brcs	.+42     	; 0x1706 <xStreamBufferSend+0x156>
    16dc:	8b d3       	rcall	.+1814   	; 0x1df4 <vTaskSuspendAll>
    16de:	f4 01       	movw	r30, r8
    16e0:	80 85       	ldd	r24, Z+8	; 0x08
    16e2:	91 85       	ldd	r25, Z+9	; 0x09
    16e4:	89 2b       	or	r24, r25
    16e6:	71 f0       	breq	.+28     	; 0x1704 <xStreamBufferSend+0x154>
    16e8:	80 85       	ldd	r24, Z+8	; 0x08
    16ea:	91 85       	ldd	r25, Z+9	; 0x09
    16ec:	e1 2c       	mov	r14, r1
    16ee:	f1 2c       	mov	r15, r1
    16f0:	00 e0       	ldi	r16, 0x00	; 0
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <xTaskGenericNotify>
    16fe:	f4 01       	movw	r30, r8
    1700:	11 86       	std	Z+9, r1	; 0x09
    1702:	10 86       	std	Z+8, r1	; 0x08
    1704:	b7 d4       	rcall	.+2414   	; 0x2074 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1706:	c6 01       	movw	r24, r12
    1708:	2b 96       	adiw	r28, 0x0b	; 11
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	9f 90       	pop	r9
    172a:	8f 90       	pop	r8
    172c:	7f 90       	pop	r7
    172e:	6f 90       	pop	r6
    1730:	5f 90       	pop	r5
    1732:	4f 90       	pop	r4
    1734:	3f 90       	pop	r3
    1736:	2f 90       	pop	r2
    1738:	08 95       	ret

0000173a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    173a:	af 92       	push	r10
    173c:	bf 92       	push	r11
    173e:	cf 92       	push	r12
    1740:	df 92       	push	r13
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	ec 01       	movw	r28, r24
    1750:	7b 01       	movw	r14, r22
    1752:	5a 01       	movw	r10, r20
    1754:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1756:	8e 85       	ldd	r24, Y+14	; 0x0e
    1758:	80 ff       	sbrs	r24, 0
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    175c:	8a 01       	movw	r16, r20
    175e:	0e 5f       	subi	r16, 0xFE	; 254
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1764:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1766:	ce 01       	movw	r24, r28
    1768:	11 df       	rcall	.-478    	; 0x158c <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    176a:	9c 01       	movw	r18, r24
    176c:	a5 01       	movw	r20, r10
    176e:	b7 01       	movw	r22, r14
    1770:	ce 01       	movw	r24, r28
    1772:	e5 dd       	rcall	.-1078   	; 0x133e <prvWriteMessageToBuffer>
    1774:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1776:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1778:	c1 f0       	breq	.+48     	; 0x17aa <xStreamBufferSendFromISR+0x70>
    177a:	ce 01       	movw	r24, r28
    177c:	74 dd       	rcall	.-1304   	; 0x1266 <prvBytesInBuffer>
    177e:	2e 81       	ldd	r18, Y+6	; 0x06
    1780:	3f 81       	ldd	r19, Y+7	; 0x07
    1782:	82 17       	cp	r24, r18
    1784:	93 07       	cpc	r25, r19
    1786:	88 f0       	brcs	.+34     	; 0x17aa <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1788:	88 85       	ldd	r24, Y+8	; 0x08
    178a:	99 85       	ldd	r25, Y+9	; 0x09
    178c:	89 2b       	or	r24, r25
    178e:	69 f0       	breq	.+26     	; 0x17aa <xStreamBufferSendFromISR+0x70>
    1790:	88 85       	ldd	r24, Y+8	; 0x08
    1792:	99 85       	ldd	r25, Y+9	; 0x09
    1794:	e1 2c       	mov	r14, r1
    1796:	f1 2c       	mov	r15, r1
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	a9 01       	movw	r20, r18
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <xTaskGenericNotifyFromISR>
    17a6:	19 86       	std	Y+9, r1	; 0x09
    17a8:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    17aa:	c5 01       	movw	r24, r10
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	bf 90       	pop	r11
    17be:	af 90       	pop	r10
    17c0:	08 95       	ret

000017c2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    17c2:	4f 92       	push	r4
    17c4:	5f 92       	push	r5
    17c6:	6f 92       	push	r6
    17c8:	7f 92       	push	r7
    17ca:	8f 92       	push	r8
    17cc:	9f 92       	push	r9
    17ce:	af 92       	push	r10
    17d0:	bf 92       	push	r11
    17d2:	cf 92       	push	r12
    17d4:	df 92       	push	r13
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	2b 01       	movw	r4, r22
    17e6:	3a 01       	movw	r6, r20
    17e8:	58 01       	movw	r10, r16
    17ea:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ee:	80 ff       	sbrs	r24, 0
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17f2:	68 94       	set
    17f4:	88 24       	eor	r8, r8
    17f6:	81 f8       	bld	r8, 1
    17f8:	91 2c       	mov	r9, r1
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    17fc:	81 2c       	mov	r8, r1
    17fe:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1800:	a1 14       	cp	r10, r1
    1802:	b1 04       	cpc	r11, r1
    1804:	c1 04       	cpc	r12, r1
    1806:	d1 04       	cpc	r13, r1
    1808:	41 f1       	breq	.+80     	; 0x185a <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1810:	ce 01       	movw	r24, r28
    1812:	29 dd       	rcall	.-1454   	; 0x1266 <prvBytesInBuffer>
    1814:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1816:	88 16       	cp	r8, r24
    1818:	99 06       	cpc	r9, r25
    181a:	48 f0       	brcs	.+18     	; 0x182e <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1826:	0e 94 78 14 	call	0x28f0	; 0x28f0 <xTaskGetCurrentTaskHandle>
    182a:	99 87       	std	Y+9, r25	; 0x09
    182c:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1832:	8e 14       	cp	r8, r14
    1834:	9f 04       	cpc	r9, r15
    1836:	a0 f0       	brcs	.+40     	; 0x1860 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1838:	e1 2c       	mov	r14, r1
    183a:	f1 2c       	mov	r15, r1
    183c:	00 e0       	ldi	r16, 0x00	; 0
    183e:	10 e0       	ldi	r17, 0x00	; 0
    1840:	98 01       	movw	r18, r16
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	ba 01       	movw	r22, r20
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    184e:	19 86       	std	Y+9, r1	; 0x09
    1850:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1852:	ce 01       	movw	r24, r28
    1854:	08 dd       	rcall	.-1520   	; 0x1266 <prvBytesInBuffer>
    1856:	7c 01       	movw	r14, r24
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    185a:	ce 01       	movw	r24, r28
    185c:	04 dd       	rcall	.-1528   	; 0x1266 <prvBytesInBuffer>
    185e:	7c 01       	movw	r14, r24
    1860:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1862:	9f 04       	cpc	r9, r15
    1864:	e8 f4       	brcc	.+58     	; 0x18a0 <xStreamBufferReceive+0xde>
    1866:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1868:	97 01       	movw	r18, r14
    186a:	a3 01       	movw	r20, r6
    186c:	b2 01       	movw	r22, r4
    186e:	ce 01       	movw	r24, r28
    1870:	f8 dd       	rcall	.-1040   	; 0x1462 <prvReadMessageFromBuffer>
    1872:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1874:	89 2b       	or	r24, r25
    1876:	b1 f0       	breq	.+44     	; 0x18a4 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1878:	bd d2       	rcall	.+1402   	; 0x1df4 <vTaskSuspendAll>
    187a:	8a 85       	ldd	r24, Y+10	; 0x0a
    187c:	9b 85       	ldd	r25, Y+11	; 0x0b
    187e:	89 2b       	or	r24, r25
    1880:	69 f0       	breq	.+26     	; 0x189c <xStreamBufferReceive+0xda>
    1882:	8a 85       	ldd	r24, Y+10	; 0x0a
    1884:	9b 85       	ldd	r25, Y+11	; 0x0b
    1886:	e1 2c       	mov	r14, r1
    1888:	f1 2c       	mov	r15, r1
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <xTaskGenericNotify>
    1898:	1b 86       	std	Y+11, r1	; 0x0b
    189a:	1a 86       	std	Y+10, r1	; 0x0a
    189c:	eb d3       	rcall	.+2006   	; 0x2074 <xTaskResumeAll>
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <xStreamBufferReceive+0xe2>
    18a0:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    18a2:	d1 2c       	mov	r13, r1
    18a4:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	9f 90       	pop	r9
    18bc:	8f 90       	pop	r8
    18be:	7f 90       	pop	r7
    18c0:	6f 90       	pop	r6
    18c2:	5f 90       	pop	r5
    18c4:	4f 90       	pop	r4
    18c6:	08 95       	ret

000018c8 <prvResetNextTaskUnblockTime>:
    18c8:	e0 91 e7 15 	lds	r30, 0x15E7	; 0x8015e7 <pxDelayedTaskList>
    18cc:	f0 91 e8 15 	lds	r31, 0x15E8	; 0x8015e8 <pxDelayedTaskList+0x1>
    18d0:	80 81       	ld	r24, Z
    18d2:	81 11       	cpse	r24, r1
    18d4:	0c c0       	rjmp	.+24     	; 0x18ee <prvResetNextTaskUnblockTime+0x26>
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	dc 01       	movw	r26, r24
    18dc:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <xNextTaskUnblockTime>
    18e0:	90 93 b2 15 	sts	0x15B2, r25	; 0x8015b2 <xNextTaskUnblockTime+0x1>
    18e4:	a0 93 b3 15 	sts	0x15B3, r26	; 0x8015b3 <xNextTaskUnblockTime+0x2>
    18e8:	b0 93 b4 15 	sts	0x15B4, r27	; 0x8015b4 <xNextTaskUnblockTime+0x3>
    18ec:	08 95       	ret
    18ee:	e0 91 e7 15 	lds	r30, 0x15E7	; 0x8015e7 <pxDelayedTaskList>
    18f2:	f0 91 e8 15 	lds	r31, 0x15E8	; 0x8015e8 <pxDelayedTaskList+0x1>
    18f6:	07 80       	ldd	r0, Z+7	; 0x07
    18f8:	f0 85       	ldd	r31, Z+8	; 0x08
    18fa:	e0 2d       	mov	r30, r0
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	a2 81       	ldd	r26, Z+2	; 0x02
    1902:	b3 81       	ldd	r27, Z+3	; 0x03
    1904:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <xNextTaskUnblockTime>
    1908:	90 93 b2 15 	sts	0x15B2, r25	; 0x8015b2 <xNextTaskUnblockTime+0x1>
    190c:	a0 93 b3 15 	sts	0x15B3, r26	; 0x8015b3 <xNextTaskUnblockTime+0x2>
    1910:	b0 93 b4 15 	sts	0x15B4, r27	; 0x8015b4 <xNextTaskUnblockTime+0x3>
    1914:	08 95       	ret

00001916 <prvDeleteTCB>:
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1920:	18 d8       	rcall	.-4048   	; 0x952 <vPortFree>
    1922:	ce 01       	movw	r24, r28
    1924:	16 d8       	rcall	.-4052   	; 0x952 <vPortFree>
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	08 95       	ret

0000192c <prvInitialiseNewTask>:
    192c:	4f 92       	push	r4
    192e:	5f 92       	push	r5
    1930:	6f 92       	push	r6
    1932:	7f 92       	push	r7
    1934:	8f 92       	push	r8
    1936:	9f 92       	push	r9
    1938:	af 92       	push	r10
    193a:	bf 92       	push	r11
    193c:	cf 92       	push	r12
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	2c 01       	movw	r4, r24
    194c:	5b 01       	movw	r10, r22
    194e:	4a 01       	movw	r8, r20
    1950:	39 01       	movw	r6, r18
    1952:	e6 01       	movw	r28, r12
    1954:	65 ea       	ldi	r22, 0xA5	; 165
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	8b 8d       	ldd	r24, Y+27	; 0x1b
    195a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195c:	0e 94 6e 32 	call	0x64dc	; 0x64dc <memset>
    1960:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1962:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1964:	21 e0       	ldi	r18, 0x01	; 1
    1966:	82 1a       	sub	r8, r18
    1968:	91 08       	sbc	r9, r1
    196a:	88 0e       	add	r8, r24
    196c:	99 1e       	adc	r9, r25
    196e:	a1 14       	cp	r10, r1
    1970:	b1 04       	cpc	r11, r1
    1972:	89 f4       	brne	.+34     	; 0x1996 <prvInitialiseNewTask+0x6a>
    1974:	15 c0       	rjmp	.+42     	; 0x19a0 <prvInitialiseNewTask+0x74>
    1976:	82 2f       	mov	r24, r18
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	f5 01       	movw	r30, r10
    197c:	e8 0f       	add	r30, r24
    197e:	f9 1f       	adc	r31, r25
    1980:	30 81       	ld	r19, Z
    1982:	de 01       	movw	r26, r28
    1984:	a8 0f       	add	r26, r24
    1986:	b9 1f       	adc	r27, r25
    1988:	5d 96       	adiw	r26, 0x1d	; 29
    198a:	3c 93       	st	X, r19
    198c:	80 81       	ld	r24, Z
    198e:	88 23       	and	r24, r24
    1990:	29 f0       	breq	.+10     	; 0x199c <prvInitialiseNewTask+0x70>
    1992:	2f 5f       	subi	r18, 0xFF	; 255
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <prvInitialiseNewTask+0x6c>
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	20 31       	cpi	r18, 0x10	; 16
    199a:	68 f3       	brcs	.-38     	; 0x1976 <prvInitialiseNewTask+0x4a>
    199c:	1c a6       	std	Y+44, r1	; 0x2c
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <prvInitialiseNewTask+0x76>
    19a0:	1d 8e       	std	Y+29, r1	; 0x1d
    19a2:	0a 30       	cpi	r16, 0x0A	; 10
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <prvInitialiseNewTask+0x7c>
    19a6:	09 e0       	ldi	r16, 0x09	; 9
    19a8:	0a 8f       	std	Y+26, r16	; 0x1a
    19aa:	0d a7       	std	Y+45, r16	; 0x2d
    19ac:	1e a6       	std	Y+46, r1	; 0x2e
    19ae:	ce 01       	movw	r24, r28
    19b0:	02 96       	adiw	r24, 0x02	; 2
    19b2:	1d d8       	rcall	.-4038   	; 0x9ee <vListInitialiseItem>
    19b4:	ce 01       	movw	r24, r28
    19b6:	0e 96       	adiw	r24, 0x0e	; 14
    19b8:	1a d8       	rcall	.-4044   	; 0x9ee <vListInitialiseItem>
    19ba:	db 87       	std	Y+11, r29	; 0x0b
    19bc:	ca 87       	std	Y+10, r28	; 0x0a
    19be:	8a e0       	ldi	r24, 0x0A	; 10
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	80 1b       	sub	r24, r16
    19c8:	91 09       	sbc	r25, r1
    19ca:	a1 09       	sbc	r26, r1
    19cc:	b1 09       	sbc	r27, r1
    19ce:	8e 87       	std	Y+14, r24	; 0x0e
    19d0:	9f 87       	std	Y+15, r25	; 0x0f
    19d2:	a8 8b       	std	Y+16, r26	; 0x10
    19d4:	b9 8b       	std	Y+17, r27	; 0x11
    19d6:	df 8b       	std	Y+23, r29	; 0x17
    19d8:	ce 8b       	std	Y+22, r28	; 0x16
    19da:	84 e0       	ldi	r24, 0x04	; 4
    19dc:	fe 01       	movw	r30, r28
    19de:	bf 96       	adiw	r30, 0x2f	; 47
    19e0:	df 01       	movw	r26, r30
    19e2:	1d 92       	st	X+, r1
    19e4:	8a 95       	dec	r24
    19e6:	e9 f7       	brne	.-6      	; 0x19e2 <prvInitialiseNewTask+0xb6>
    19e8:	1b aa       	std	Y+51, r1	; 0x33
    19ea:	a3 01       	movw	r20, r6
    19ec:	b2 01       	movw	r22, r4
    19ee:	c4 01       	movw	r24, r8
    19f0:	72 d8       	rcall	.-3868   	; 0xad6 <pxPortInitialiseStack>
    19f2:	99 83       	std	Y+1, r25	; 0x01
    19f4:	88 83       	st	Y, r24
    19f6:	e1 14       	cp	r14, r1
    19f8:	f1 04       	cpc	r15, r1
    19fa:	19 f0       	breq	.+6      	; 0x1a02 <prvInitialiseNewTask+0xd6>
    19fc:	f7 01       	movw	r30, r14
    19fe:	d1 83       	std	Z+1, r29	; 0x01
    1a00:	c0 83       	st	Z, r28
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	bf 90       	pop	r11
    1a12:	af 90       	pop	r10
    1a14:	9f 90       	pop	r9
    1a16:	8f 90       	pop	r8
    1a18:	7f 90       	pop	r7
    1a1a:	6f 90       	pop	r6
    1a1c:	5f 90       	pop	r5
    1a1e:	4f 90       	pop	r4
    1a20:	08 95       	ret

00001a22 <prvInitialiseTaskLists>:
    1a22:	cf 93       	push	r28
    1a24:	c0 e0       	ldi	r28, 0x00	; 0
    1a26:	09 c0       	rjmp	.+18     	; 0x1a3a <prvInitialiseTaskLists+0x18>
    1a28:	2b e0       	ldi	r18, 0x0B	; 11
    1a2a:	c2 9f       	mul	r28, r18
    1a2c:	c0 01       	movw	r24, r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	81 50       	subi	r24, 0x01	; 1
    1a32:	9a 4e       	sbci	r25, 0xEA	; 234
    1a34:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vListInitialise>
    1a38:	cf 5f       	subi	r28, 0xFF	; 255
    1a3a:	ca 30       	cpi	r28, 0x0A	; 10
    1a3c:	a8 f3       	brcs	.-22     	; 0x1a28 <prvInitialiseTaskLists+0x6>
    1a3e:	84 ef       	ldi	r24, 0xF4	; 244
    1a40:	95 e1       	ldi	r25, 0x15	; 21
    1a42:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vListInitialise>
    1a46:	89 ee       	ldi	r24, 0xE9	; 233
    1a48:	95 e1       	ldi	r25, 0x15	; 21
    1a4a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vListInitialise>
    1a4e:	8a ed       	ldi	r24, 0xDA	; 218
    1a50:	95 e1       	ldi	r25, 0x15	; 21
    1a52:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vListInitialise>
    1a56:	8f ec       	ldi	r24, 0xCF	; 207
    1a58:	95 e1       	ldi	r25, 0x15	; 21
    1a5a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vListInitialise>
    1a5e:	83 ec       	ldi	r24, 0xC3	; 195
    1a60:	95 e1       	ldi	r25, 0x15	; 21
    1a62:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vListInitialise>
    1a66:	84 ef       	ldi	r24, 0xF4	; 244
    1a68:	95 e1       	ldi	r25, 0x15	; 21
    1a6a:	90 93 e8 15 	sts	0x15E8, r25	; 0x8015e8 <pxDelayedTaskList+0x1>
    1a6e:	80 93 e7 15 	sts	0x15E7, r24	; 0x8015e7 <pxDelayedTaskList>
    1a72:	89 ee       	ldi	r24, 0xE9	; 233
    1a74:	95 e1       	ldi	r25, 0x15	; 21
    1a76:	90 93 e6 15 	sts	0x15E6, r25	; 0x8015e6 <pxOverflowDelayedTaskList+0x1>
    1a7a:	80 93 e5 15 	sts	0x15E5, r24	; 0x8015e5 <pxOverflowDelayedTaskList>
    1a7e:	cf 91       	pop	r28
    1a80:	08 95       	ret

00001a82 <prvAddNewTaskToReadyList>:
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	ec 01       	movw	r28, r24
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	0f 92       	push	r0
    1a8e:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxCurrentNumberOfTasks>
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	80 93 c2 15 	sts	0x15C2, r24	; 0x8015c2 <uxCurrentNumberOfTasks>
    1a98:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <pxCurrentTCB>
    1a9c:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1aa0:	89 2b       	or	r24, r25
    1aa2:	51 f4       	brne	.+20     	; 0x1ab8 <prvAddNewTaskToReadyList+0x36>
    1aa4:	d0 93 6e 16 	sts	0x166E, r29	; 0x80166e <pxCurrentTCB+0x1>
    1aa8:	c0 93 6d 16 	sts	0x166D, r28	; 0x80166d <pxCurrentTCB>
    1aac:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxCurrentNumberOfTasks>
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	91 f4       	brne	.+36     	; 0x1ad8 <prvAddNewTaskToReadyList+0x56>
    1ab4:	b6 df       	rcall	.-148    	; 0x1a22 <prvInitialiseTaskLists>
    1ab6:	10 c0       	rjmp	.+32     	; 0x1ad8 <prvAddNewTaskToReadyList+0x56>
    1ab8:	80 91 bc 15 	lds	r24, 0x15BC	; 0x8015bc <xSchedulerRunning>
    1abc:	81 11       	cpse	r24, r1
    1abe:	0c c0       	rjmp	.+24     	; 0x1ad8 <prvAddNewTaskToReadyList+0x56>
    1ac0:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    1ac4:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1ac8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1acc:	89 17       	cp	r24, r25
    1ace:	20 f0       	brcs	.+8      	; 0x1ad8 <prvAddNewTaskToReadyList+0x56>
    1ad0:	d0 93 6e 16 	sts	0x166E, r29	; 0x80166e <pxCurrentTCB+0x1>
    1ad4:	c0 93 6d 16 	sts	0x166D, r28	; 0x80166d <pxCurrentTCB>
    1ad8:	80 91 b5 15 	lds	r24, 0x15B5	; 0x8015b5 <uxTaskNumber>
    1adc:	8f 5f       	subi	r24, 0xFF	; 255
    1ade:	80 93 b5 15 	sts	0x15B5, r24	; 0x8015b5 <uxTaskNumber>
    1ae2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ae4:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <uxTopReadyPriority>
    1ae8:	8e 17       	cp	r24, r30
    1aea:	10 f4       	brcc	.+4      	; 0x1af0 <prvAddNewTaskToReadyList+0x6e>
    1aec:	e0 93 bd 15 	sts	0x15BD, r30	; 0x8015bd <uxTopReadyPriority>
    1af0:	8b e0       	ldi	r24, 0x0B	; 11
    1af2:	8e 9f       	mul	r24, r30
    1af4:	f0 01       	movw	r30, r0
    1af6:	11 24       	eor	r1, r1
    1af8:	e1 50       	subi	r30, 0x01	; 1
    1afa:	fa 4e       	sbci	r31, 0xEA	; 234
    1afc:	01 80       	ldd	r0, Z+1	; 0x01
    1afe:	f2 81       	ldd	r31, Z+2	; 0x02
    1b00:	e0 2d       	mov	r30, r0
    1b02:	ff 83       	std	Y+7, r31	; 0x07
    1b04:	ee 83       	std	Y+6, r30	; 0x06
    1b06:	26 81       	ldd	r18, Z+6	; 0x06
    1b08:	37 81       	ldd	r19, Z+7	; 0x07
    1b0a:	39 87       	std	Y+9, r19	; 0x09
    1b0c:	28 87       	std	Y+8, r18	; 0x08
    1b0e:	a6 81       	ldd	r26, Z+6	; 0x06
    1b10:	b7 81       	ldd	r27, Z+7	; 0x07
    1b12:	9e 01       	movw	r18, r28
    1b14:	2e 5f       	subi	r18, 0xFE	; 254
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	15 96       	adiw	r26, 0x05	; 5
    1b1a:	3c 93       	st	X, r19
    1b1c:	2e 93       	st	-X, r18
    1b1e:	14 97       	sbiw	r26, 0x04	; 4
    1b20:	37 83       	std	Z+7, r19	; 0x07
    1b22:	26 83       	std	Z+6, r18	; 0x06
    1b24:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b26:	8e 9f       	mul	r24, r30
    1b28:	f0 01       	movw	r30, r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	e1 50       	subi	r30, 0x01	; 1
    1b2e:	fa 4e       	sbci	r31, 0xEA	; 234
    1b30:	fd 87       	std	Y+13, r31	; 0x0d
    1b32:	ec 87       	std	Y+12, r30	; 0x0c
    1b34:	80 81       	ld	r24, Z
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	80 83       	st	Z, r24
    1b3a:	0f 90       	pop	r0
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	80 91 bc 15 	lds	r24, 0x15BC	; 0x8015bc <xSchedulerRunning>
    1b42:	88 23       	and	r24, r24
    1b44:	49 f0       	breq	.+18     	; 0x1b58 <prvAddNewTaskToReadyList+0xd6>
    1b46:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    1b4a:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1b4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b52:	98 17       	cp	r25, r24
    1b54:	08 f4       	brcc	.+2      	; 0x1b58 <prvAddNewTaskToReadyList+0xd6>
    1b56:	08 d8       	rcall	.-4080   	; 0xb68 <vPortYield>
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <prvCheckTasksWaitingTermination>:
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	1b c0       	rjmp	.+54     	; 0x1b9a <prvCheckTasksWaitingTermination+0x3c>
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	0f 92       	push	r0
    1b6a:	e0 91 d6 15 	lds	r30, 0x15D6	; 0x8015d6 <xTasksWaitingTermination+0x7>
    1b6e:	f0 91 d7 15 	lds	r31, 0x15D7	; 0x8015d7 <xTasksWaitingTermination+0x8>
    1b72:	c0 85       	ldd	r28, Z+8	; 0x08
    1b74:	d1 85       	ldd	r29, Z+9	; 0x09
    1b76:	ce 01       	movw	r24, r28
    1b78:	02 96       	adiw	r24, 0x02	; 2
    1b7a:	0e 94 38 05 	call	0xa70	; 0xa70 <uxListRemove>
    1b7e:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxCurrentNumberOfTasks>
    1b82:	81 50       	subi	r24, 0x01	; 1
    1b84:	80 93 c2 15 	sts	0x15C2, r24	; 0x8015c2 <uxCurrentNumberOfTasks>
    1b88:	80 91 ce 15 	lds	r24, 0x15CE	; 0x8015ce <uxDeletedTasksWaitingCleanUp>
    1b8c:	81 50       	subi	r24, 0x01	; 1
    1b8e:	80 93 ce 15 	sts	0x15CE, r24	; 0x8015ce <uxDeletedTasksWaitingCleanUp>
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	ce 01       	movw	r24, r28
    1b98:	be de       	rcall	.-644    	; 0x1916 <prvDeleteTCB>
    1b9a:	80 91 ce 15 	lds	r24, 0x15CE	; 0x8015ce <uxDeletedTasksWaitingCleanUp>
    1b9e:	81 11       	cpse	r24, r1
    1ba0:	e1 cf       	rjmp	.-62     	; 0x1b64 <prvCheckTasksWaitingTermination+0x6>
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	08 95       	ret

00001ba8 <prvAddCurrentTaskToDelayedList>:
    1ba8:	8f 92       	push	r8
    1baa:	9f 92       	push	r9
    1bac:	af 92       	push	r10
    1bae:	bf 92       	push	r11
    1bb0:	cf 92       	push	r12
    1bb2:	df 92       	push	r13
    1bb4:	ef 92       	push	r14
    1bb6:	ff 92       	push	r15
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	6b 01       	movw	r12, r22
    1bbe:	7c 01       	movw	r14, r24
    1bc0:	c4 2f       	mov	r28, r20
    1bc2:	80 90 be 15 	lds	r8, 0x15BE	; 0x8015be <xTickCount>
    1bc6:	90 90 bf 15 	lds	r9, 0x15BF	; 0x8015bf <xTickCount+0x1>
    1bca:	a0 90 c0 15 	lds	r10, 0x15C0	; 0x8015c0 <xTickCount+0x2>
    1bce:	b0 90 c1 15 	lds	r11, 0x15C1	; 0x8015c1 <xTickCount+0x3>
    1bd2:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <pxCurrentTCB>
    1bd6:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1bda:	02 96       	adiw	r24, 0x02	; 2
    1bdc:	0e 94 38 05 	call	0xa70	; 0xa70 <uxListRemove>
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	c8 16       	cp	r12, r24
    1be4:	d8 06       	cpc	r13, r24
    1be6:	e8 06       	cpc	r14, r24
    1be8:	f8 06       	cpc	r15, r24
    1bea:	b1 f5       	brne	.+108    	; 0x1c58 <prvAddCurrentTaskToDelayedList+0xb0>
    1bec:	cc 23       	and	r28, r28
    1bee:	a1 f1       	breq	.+104    	; 0x1c58 <prvAddCurrentTaskToDelayedList+0xb0>
    1bf0:	e3 ec       	ldi	r30, 0xC3	; 195
    1bf2:	f5 e1       	ldi	r31, 0x15	; 21
    1bf4:	a1 81       	ldd	r26, Z+1	; 0x01
    1bf6:	b2 81       	ldd	r27, Z+2	; 0x02
    1bf8:	c0 91 6d 16 	lds	r28, 0x166D	; 0x80166d <pxCurrentTCB>
    1bfc:	d0 91 6e 16 	lds	r29, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1c00:	bf 83       	std	Y+7, r27	; 0x07
    1c02:	ae 83       	std	Y+6, r26	; 0x06
    1c04:	c0 91 6d 16 	lds	r28, 0x166D	; 0x80166d <pxCurrentTCB>
    1c08:	d0 91 6e 16 	lds	r29, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1c0c:	16 96       	adiw	r26, 0x06	; 6
    1c0e:	8d 91       	ld	r24, X+
    1c10:	9c 91       	ld	r25, X
    1c12:	17 97       	sbiw	r26, 0x07	; 7
    1c14:	99 87       	std	Y+9, r25	; 0x09
    1c16:	88 87       	std	Y+8, r24	; 0x08
    1c18:	16 96       	adiw	r26, 0x06	; 6
    1c1a:	cd 91       	ld	r28, X+
    1c1c:	dc 91       	ld	r29, X
    1c1e:	17 97       	sbiw	r26, 0x07	; 7
    1c20:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <pxCurrentTCB>
    1c24:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1c28:	02 96       	adiw	r24, 0x02	; 2
    1c2a:	9d 83       	std	Y+5, r25	; 0x05
    1c2c:	8c 83       	std	Y+4, r24	; 0x04
    1c2e:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <pxCurrentTCB>
    1c32:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1c36:	02 96       	adiw	r24, 0x02	; 2
    1c38:	17 96       	adiw	r26, 0x07	; 7
    1c3a:	9c 93       	st	X, r25
    1c3c:	8e 93       	st	-X, r24
    1c3e:	16 97       	sbiw	r26, 0x06	; 6
    1c40:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
    1c44:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1c48:	1d 96       	adiw	r26, 0x0d	; 13
    1c4a:	fc 93       	st	X, r31
    1c4c:	ee 93       	st	-X, r30
    1c4e:	1c 97       	sbiw	r26, 0x0c	; 12
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 5f       	subi	r24, 0xFF	; 255
    1c54:	80 83       	st	Z, r24
    1c56:	3f c0       	rjmp	.+126    	; 0x1cd6 <prvAddCurrentTaskToDelayedList+0x12e>
    1c58:	c8 0c       	add	r12, r8
    1c5a:	d9 1c       	adc	r13, r9
    1c5c:	ea 1c       	adc	r14, r10
    1c5e:	fb 1c       	adc	r15, r11
    1c60:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    1c64:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1c68:	c2 82       	std	Z+2, r12	; 0x02
    1c6a:	d3 82       	std	Z+3, r13	; 0x03
    1c6c:	e4 82       	std	Z+4, r14	; 0x04
    1c6e:	f5 82       	std	Z+5, r15	; 0x05
    1c70:	c8 14       	cp	r12, r8
    1c72:	d9 04       	cpc	r13, r9
    1c74:	ea 04       	cpc	r14, r10
    1c76:	fb 04       	cpc	r15, r11
    1c78:	68 f4       	brcc	.+26     	; 0x1c94 <prvAddCurrentTaskToDelayedList+0xec>
    1c7a:	60 91 6d 16 	lds	r22, 0x166D	; 0x80166d <pxCurrentTCB>
    1c7e:	70 91 6e 16 	lds	r23, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1c82:	80 91 e5 15 	lds	r24, 0x15E5	; 0x8015e5 <pxOverflowDelayedTaskList>
    1c86:	90 91 e6 15 	lds	r25, 0x15E6	; 0x8015e6 <pxOverflowDelayedTaskList+0x1>
    1c8a:	6e 5f       	subi	r22, 0xFE	; 254
    1c8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <vListInsert>
    1c92:	21 c0       	rjmp	.+66     	; 0x1cd6 <prvAddCurrentTaskToDelayedList+0x12e>
    1c94:	60 91 6d 16 	lds	r22, 0x166D	; 0x80166d <pxCurrentTCB>
    1c98:	70 91 6e 16 	lds	r23, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    1c9c:	80 91 e7 15 	lds	r24, 0x15E7	; 0x8015e7 <pxDelayedTaskList>
    1ca0:	90 91 e8 15 	lds	r25, 0x15E8	; 0x8015e8 <pxDelayedTaskList+0x1>
    1ca4:	6e 5f       	subi	r22, 0xFE	; 254
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <vListInsert>
    1cac:	80 91 b1 15 	lds	r24, 0x15B1	; 0x8015b1 <xNextTaskUnblockTime>
    1cb0:	90 91 b2 15 	lds	r25, 0x15B2	; 0x8015b2 <xNextTaskUnblockTime+0x1>
    1cb4:	a0 91 b3 15 	lds	r26, 0x15B3	; 0x8015b3 <xNextTaskUnblockTime+0x2>
    1cb8:	b0 91 b4 15 	lds	r27, 0x15B4	; 0x8015b4 <xNextTaskUnblockTime+0x3>
    1cbc:	c8 16       	cp	r12, r24
    1cbe:	d9 06       	cpc	r13, r25
    1cc0:	ea 06       	cpc	r14, r26
    1cc2:	fb 06       	cpc	r15, r27
    1cc4:	40 f4       	brcc	.+16     	; 0x1cd6 <prvAddCurrentTaskToDelayedList+0x12e>
    1cc6:	c0 92 b1 15 	sts	0x15B1, r12	; 0x8015b1 <xNextTaskUnblockTime>
    1cca:	d0 92 b2 15 	sts	0x15B2, r13	; 0x8015b2 <xNextTaskUnblockTime+0x1>
    1cce:	e0 92 b3 15 	sts	0x15B3, r14	; 0x8015b3 <xNextTaskUnblockTime+0x2>
    1cd2:	f0 92 b4 15 	sts	0x15B4, r15	; 0x8015b4 <xNextTaskUnblockTime+0x3>
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	df 90       	pop	r13
    1ce0:	cf 90       	pop	r12
    1ce2:	bf 90       	pop	r11
    1ce4:	af 90       	pop	r10
    1ce6:	9f 90       	pop	r9
    1ce8:	8f 90       	pop	r8
    1cea:	08 95       	ret

00001cec <xTaskCreate>:
    1cec:	2f 92       	push	r2
    1cee:	3f 92       	push	r3
    1cf0:	4f 92       	push	r4
    1cf2:	5f 92       	push	r5
    1cf4:	6f 92       	push	r6
    1cf6:	7f 92       	push	r7
    1cf8:	8f 92       	push	r8
    1cfa:	9f 92       	push	r9
    1cfc:	af 92       	push	r10
    1cfe:	bf 92       	push	r11
    1d00:	cf 92       	push	r12
    1d02:	df 92       	push	r13
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	3c 01       	movw	r6, r24
    1d10:	1b 01       	movw	r2, r22
    1d12:	4a 01       	movw	r8, r20
    1d14:	29 01       	movw	r4, r18
    1d16:	ca 01       	movw	r24, r20
    1d18:	0e 94 00 04 	call	0x800	; 0x800 <pvPortMalloc>
    1d1c:	6c 01       	movw	r12, r24
    1d1e:	89 2b       	or	r24, r25
    1d20:	71 f0       	breq	.+28     	; 0x1d3e <xTaskCreate+0x52>
    1d22:	84 e3       	ldi	r24, 0x34	; 52
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 00 04 	call	0x800	; 0x800 <pvPortMalloc>
    1d2a:	ec 01       	movw	r28, r24
    1d2c:	89 2b       	or	r24, r25
    1d2e:	19 f0       	breq	.+6      	; 0x1d36 <xTaskCreate+0x4a>
    1d30:	dc 8e       	std	Y+28, r13	; 0x1c
    1d32:	cb 8e       	std	Y+27, r12	; 0x1b
    1d34:	06 c0       	rjmp	.+12     	; 0x1d42 <xTaskCreate+0x56>
    1d36:	c6 01       	movw	r24, r12
    1d38:	0e 94 a9 04 	call	0x952	; 0x952 <vPortFree>
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <xTaskCreate+0x56>
    1d3e:	c0 e0       	ldi	r28, 0x00	; 0
    1d40:	d0 e0       	ldi	r29, 0x00	; 0
    1d42:	20 97       	sbiw	r28, 0x00	; 0
    1d44:	61 f0       	breq	.+24     	; 0x1d5e <xTaskCreate+0x72>
    1d46:	a1 2c       	mov	r10, r1
    1d48:	b1 2c       	mov	r11, r1
    1d4a:	6e 01       	movw	r12, r28
    1d4c:	92 01       	movw	r18, r4
    1d4e:	a4 01       	movw	r20, r8
    1d50:	b1 01       	movw	r22, r2
    1d52:	c3 01       	movw	r24, r6
    1d54:	eb dd       	rcall	.-1066   	; 0x192c <prvInitialiseNewTask>
    1d56:	ce 01       	movw	r24, r28
    1d58:	94 de       	rcall	.-728    	; 0x1a82 <prvAddNewTaskToReadyList>
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <xTaskCreate+0x74>
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	cf 90       	pop	r12
    1d6e:	bf 90       	pop	r11
    1d70:	af 90       	pop	r10
    1d72:	9f 90       	pop	r9
    1d74:	8f 90       	pop	r8
    1d76:	7f 90       	pop	r7
    1d78:	6f 90       	pop	r6
    1d7a:	5f 90       	pop	r5
    1d7c:	4f 90       	pop	r4
    1d7e:	3f 90       	pop	r3
    1d80:	2f 90       	pop	r2
    1d82:	08 95       	ret

00001d84 <vTaskStartScheduler>:
    1d84:	ef 92       	push	r14
    1d86:	ff 92       	push	r15
    1d88:	0f 93       	push	r16
    1d8a:	0f 2e       	mov	r0, r31
    1d8c:	ff ea       	ldi	r31, 0xAF	; 175
    1d8e:	ef 2e       	mov	r14, r31
    1d90:	f5 e1       	ldi	r31, 0x15	; 21
    1d92:	ff 2e       	mov	r15, r31
    1d94:	f0 2d       	mov	r31, r0
    1d96:	00 e0       	ldi	r16, 0x00	; 0
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 ec       	ldi	r20, 0xC0	; 192
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	63 ea       	ldi	r22, 0xA3	; 163
    1da2:	72 e0       	ldi	r23, 0x02	; 2
    1da4:	8e e4       	ldi	r24, 0x4E	; 78
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	a1 df       	rcall	.-190    	; 0x1cec <xTaskCreate>
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	11 f4       	brne	.+4      	; 0x1db2 <vTaskStartScheduler+0x2e>
    1dae:	0e 94 74 18 	call	0x30e8	; 0x30e8 <xTimerCreateTimerTask>
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	c9 f4       	brne	.+50     	; 0x1de8 <vTaskStartScheduler+0x64>
    1db6:	f8 94       	cli
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	9f ef       	ldi	r25, 0xFF	; 255
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <xNextTaskUnblockTime>
    1dc2:	90 93 b2 15 	sts	0x15B2, r25	; 0x8015b2 <xNextTaskUnblockTime+0x1>
    1dc6:	a0 93 b3 15 	sts	0x15B3, r26	; 0x8015b3 <xNextTaskUnblockTime+0x2>
    1dca:	b0 93 b4 15 	sts	0x15B4, r27	; 0x8015b4 <xNextTaskUnblockTime+0x3>
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	80 93 bc 15 	sts	0x15BC, r24	; 0x8015bc <xSchedulerRunning>
    1dd4:	10 92 be 15 	sts	0x15BE, r1	; 0x8015be <xTickCount>
    1dd8:	10 92 bf 15 	sts	0x15BF, r1	; 0x8015bf <xTickCount+0x1>
    1ddc:	10 92 c0 15 	sts	0x15C0, r1	; 0x8015c0 <xTickCount+0x2>
    1de0:	10 92 c1 15 	sts	0x15C1, r1	; 0x8015c1 <xTickCount+0x3>
    1de4:	0e 94 82 05 	call	0xb04	; 0xb04 <xPortStartScheduler>
    1de8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	08 95       	ret

00001df4 <vTaskSuspendAll>:
    1df4:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxSchedulerSuspended>
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	80 93 ae 15 	sts	0x15AE, r24	; 0x8015ae <uxSchedulerSuspended>
    1dfe:	08 95       	ret

00001e00 <xTaskGetTickCount>:
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	0f 92       	push	r0
    1e06:	60 91 be 15 	lds	r22, 0x15BE	; 0x8015be <xTickCount>
    1e0a:	70 91 bf 15 	lds	r23, 0x15BF	; 0x8015bf <xTickCount+0x1>
    1e0e:	80 91 c0 15 	lds	r24, 0x15C0	; 0x8015c0 <xTickCount+0x2>
    1e12:	90 91 c1 15 	lds	r25, 0x15C1	; 0x8015c1 <xTickCount+0x3>
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	08 95       	ret

00001e1c <xTaskIncrementTick>:
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxSchedulerSuspended>
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	05 c1       	rjmp	.+522    	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    1e30:	c0 90 be 15 	lds	r12, 0x15BE	; 0x8015be <xTickCount>
    1e34:	d0 90 bf 15 	lds	r13, 0x15BF	; 0x8015bf <xTickCount+0x1>
    1e38:	e0 90 c0 15 	lds	r14, 0x15C0	; 0x8015c0 <xTickCount+0x2>
    1e3c:	f0 90 c1 15 	lds	r15, 0x15C1	; 0x8015c1 <xTickCount+0x3>
    1e40:	8f ef       	ldi	r24, 0xFF	; 255
    1e42:	c8 1a       	sub	r12, r24
    1e44:	d8 0a       	sbc	r13, r24
    1e46:	e8 0a       	sbc	r14, r24
    1e48:	f8 0a       	sbc	r15, r24
    1e4a:	c0 92 be 15 	sts	0x15BE, r12	; 0x8015be <xTickCount>
    1e4e:	d0 92 bf 15 	sts	0x15BF, r13	; 0x8015bf <xTickCount+0x1>
    1e52:	e0 92 c0 15 	sts	0x15C0, r14	; 0x8015c0 <xTickCount+0x2>
    1e56:	f0 92 c1 15 	sts	0x15C1, r15	; 0x8015c1 <xTickCount+0x3>
    1e5a:	c1 14       	cp	r12, r1
    1e5c:	d1 04       	cpc	r13, r1
    1e5e:	e1 04       	cpc	r14, r1
    1e60:	f1 04       	cpc	r15, r1
    1e62:	b1 f4       	brne	.+44     	; 0x1e90 <xTaskIncrementTick+0x74>
    1e64:	80 91 e7 15 	lds	r24, 0x15E7	; 0x8015e7 <pxDelayedTaskList>
    1e68:	90 91 e8 15 	lds	r25, 0x15E8	; 0x8015e8 <pxDelayedTaskList+0x1>
    1e6c:	20 91 e5 15 	lds	r18, 0x15E5	; 0x8015e5 <pxOverflowDelayedTaskList>
    1e70:	30 91 e6 15 	lds	r19, 0x15E6	; 0x8015e6 <pxOverflowDelayedTaskList+0x1>
    1e74:	30 93 e8 15 	sts	0x15E8, r19	; 0x8015e8 <pxDelayedTaskList+0x1>
    1e78:	20 93 e7 15 	sts	0x15E7, r18	; 0x8015e7 <pxDelayedTaskList>
    1e7c:	90 93 e6 15 	sts	0x15E6, r25	; 0x8015e6 <pxOverflowDelayedTaskList+0x1>
    1e80:	80 93 e5 15 	sts	0x15E5, r24	; 0x8015e5 <pxOverflowDelayedTaskList>
    1e84:	80 91 b6 15 	lds	r24, 0x15B6	; 0x8015b6 <xNumOfOverflows>
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	80 93 b6 15 	sts	0x15B6, r24	; 0x8015b6 <xNumOfOverflows>
    1e8e:	1c dd       	rcall	.-1480   	; 0x18c8 <prvResetNextTaskUnblockTime>
    1e90:	80 91 b1 15 	lds	r24, 0x15B1	; 0x8015b1 <xNextTaskUnblockTime>
    1e94:	90 91 b2 15 	lds	r25, 0x15B2	; 0x8015b2 <xNextTaskUnblockTime+0x1>
    1e98:	a0 91 b3 15 	lds	r26, 0x15B3	; 0x8015b3 <xNextTaskUnblockTime+0x2>
    1e9c:	b0 91 b4 15 	lds	r27, 0x15B4	; 0x8015b4 <xNextTaskUnblockTime+0x3>
    1ea0:	c8 16       	cp	r12, r24
    1ea2:	d9 06       	cpc	r13, r25
    1ea4:	ea 06       	cpc	r14, r26
    1ea6:	fb 06       	cpc	r15, r27
    1ea8:	20 f4       	brcc	.+8      	; 0x1eb2 <xTaskIncrementTick+0x96>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	b2 c0       	rjmp	.+356    	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <xTaskIncrementTick+0x98>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	e0 91 e7 15 	lds	r30, 0x15E7	; 0x8015e7 <pxDelayedTaskList>
    1eb8:	f0 91 e8 15 	lds	r31, 0x15E8	; 0x8015e8 <pxDelayedTaskList+0x1>
    1ebc:	90 81       	ld	r25, Z
    1ebe:	91 11       	cpse	r25, r1
    1ec0:	0c c0       	rjmp	.+24     	; 0x1eda <xTaskIncrementTick+0xbe>
    1ec2:	4f ef       	ldi	r20, 0xFF	; 255
    1ec4:	5f ef       	ldi	r21, 0xFF	; 255
    1ec6:	ba 01       	movw	r22, r20
    1ec8:	40 93 b1 15 	sts	0x15B1, r20	; 0x8015b1 <xNextTaskUnblockTime>
    1ecc:	50 93 b2 15 	sts	0x15B2, r21	; 0x8015b2 <xNextTaskUnblockTime+0x1>
    1ed0:	60 93 b3 15 	sts	0x15B3, r22	; 0x8015b3 <xNextTaskUnblockTime+0x2>
    1ed4:	70 93 b4 15 	sts	0x15B4, r23	; 0x8015b4 <xNextTaskUnblockTime+0x3>
    1ed8:	9c c0       	rjmp	.+312    	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    1eda:	e0 91 e7 15 	lds	r30, 0x15E7	; 0x8015e7 <pxDelayedTaskList>
    1ede:	f0 91 e8 15 	lds	r31, 0x15E8	; 0x8015e8 <pxDelayedTaskList+0x1>
    1ee2:	07 80       	ldd	r0, Z+7	; 0x07
    1ee4:	f0 85       	ldd	r31, Z+8	; 0x08
    1ee6:	e0 2d       	mov	r30, r0
    1ee8:	00 84       	ldd	r0, Z+8	; 0x08
    1eea:	f1 85       	ldd	r31, Z+9	; 0x09
    1eec:	e0 2d       	mov	r30, r0
    1eee:	42 81       	ldd	r20, Z+2	; 0x02
    1ef0:	53 81       	ldd	r21, Z+3	; 0x03
    1ef2:	64 81       	ldd	r22, Z+4	; 0x04
    1ef4:	75 81       	ldd	r23, Z+5	; 0x05
    1ef6:	c4 16       	cp	r12, r20
    1ef8:	d5 06       	cpc	r13, r21
    1efa:	e6 06       	cpc	r14, r22
    1efc:	f7 06       	cpc	r15, r23
    1efe:	48 f4       	brcc	.+18     	; 0x1f12 <xTaskIncrementTick+0xf6>
    1f00:	40 93 b1 15 	sts	0x15B1, r20	; 0x8015b1 <xNextTaskUnblockTime>
    1f04:	50 93 b2 15 	sts	0x15B2, r21	; 0x8015b2 <xNextTaskUnblockTime+0x1>
    1f08:	60 93 b3 15 	sts	0x15B3, r22	; 0x8015b3 <xNextTaskUnblockTime+0x2>
    1f0c:	70 93 b4 15 	sts	0x15B4, r23	; 0x8015b4 <xNextTaskUnblockTime+0x3>
    1f10:	80 c0       	rjmp	.+256    	; 0x2012 <__DATA_REGION_LENGTH__+0x12>
    1f12:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f14:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f16:	c6 81       	ldd	r28, Z+6	; 0x06
    1f18:	d7 81       	ldd	r29, Z+7	; 0x07
    1f1a:	20 85       	ldd	r18, Z+8	; 0x08
    1f1c:	31 85       	ldd	r19, Z+9	; 0x09
    1f1e:	3f 83       	std	Y+7, r19	; 0x07
    1f20:	2e 83       	std	Y+6, r18	; 0x06
    1f22:	c0 85       	ldd	r28, Z+8	; 0x08
    1f24:	d1 85       	ldd	r29, Z+9	; 0x09
    1f26:	26 81       	ldd	r18, Z+6	; 0x06
    1f28:	37 81       	ldd	r19, Z+7	; 0x07
    1f2a:	3d 83       	std	Y+5, r19	; 0x05
    1f2c:	2c 83       	std	Y+4, r18	; 0x04
    1f2e:	11 96       	adiw	r26, 0x01	; 1
    1f30:	4d 91       	ld	r20, X+
    1f32:	5c 91       	ld	r21, X
    1f34:	12 97       	sbiw	r26, 0x02	; 2
    1f36:	9f 01       	movw	r18, r30
    1f38:	2e 5f       	subi	r18, 0xFE	; 254
    1f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3c:	42 17       	cp	r20, r18
    1f3e:	53 07       	cpc	r21, r19
    1f40:	31 f4       	brne	.+12     	; 0x1f4e <xTaskIncrementTick+0x132>
    1f42:	40 85       	ldd	r20, Z+8	; 0x08
    1f44:	51 85       	ldd	r21, Z+9	; 0x09
    1f46:	12 96       	adiw	r26, 0x02	; 2
    1f48:	5c 93       	st	X, r21
    1f4a:	4e 93       	st	-X, r20
    1f4c:	11 97       	sbiw	r26, 0x01	; 1
    1f4e:	15 86       	std	Z+13, r1	; 0x0d
    1f50:	14 86       	std	Z+12, r1	; 0x0c
    1f52:	9c 91       	ld	r25, X
    1f54:	91 50       	subi	r25, 0x01	; 1
    1f56:	9c 93       	st	X, r25
    1f58:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f5a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f5c:	10 97       	sbiw	r26, 0x00	; 0
    1f5e:	09 f1       	breq	.+66     	; 0x1fa2 <xTaskIncrementTick+0x186>
    1f60:	c2 89       	ldd	r28, Z+18	; 0x12
    1f62:	d3 89       	ldd	r29, Z+19	; 0x13
    1f64:	44 89       	ldd	r20, Z+20	; 0x14
    1f66:	55 89       	ldd	r21, Z+21	; 0x15
    1f68:	5f 83       	std	Y+7, r21	; 0x07
    1f6a:	4e 83       	std	Y+6, r20	; 0x06
    1f6c:	c4 89       	ldd	r28, Z+20	; 0x14
    1f6e:	d5 89       	ldd	r29, Z+21	; 0x15
    1f70:	42 89       	ldd	r20, Z+18	; 0x12
    1f72:	53 89       	ldd	r21, Z+19	; 0x13
    1f74:	5d 83       	std	Y+5, r21	; 0x05
    1f76:	4c 83       	std	Y+4, r20	; 0x04
    1f78:	11 96       	adiw	r26, 0x01	; 1
    1f7a:	6d 91       	ld	r22, X+
    1f7c:	7c 91       	ld	r23, X
    1f7e:	12 97       	sbiw	r26, 0x02	; 2
    1f80:	af 01       	movw	r20, r30
    1f82:	42 5f       	subi	r20, 0xF2	; 242
    1f84:	5f 4f       	sbci	r21, 0xFF	; 255
    1f86:	64 17       	cp	r22, r20
    1f88:	75 07       	cpc	r23, r21
    1f8a:	31 f4       	brne	.+12     	; 0x1f98 <xTaskIncrementTick+0x17c>
    1f8c:	44 89       	ldd	r20, Z+20	; 0x14
    1f8e:	55 89       	ldd	r21, Z+21	; 0x15
    1f90:	12 96       	adiw	r26, 0x02	; 2
    1f92:	5c 93       	st	X, r21
    1f94:	4e 93       	st	-X, r20
    1f96:	11 97       	sbiw	r26, 0x01	; 1
    1f98:	11 8e       	std	Z+25, r1	; 0x19
    1f9a:	10 8e       	std	Z+24, r1	; 0x18
    1f9c:	9c 91       	ld	r25, X
    1f9e:	91 50       	subi	r25, 0x01	; 1
    1fa0:	9c 93       	st	X, r25
    1fa2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fa4:	90 91 bd 15 	lds	r25, 0x15BD	; 0x8015bd <uxTopReadyPriority>
    1fa8:	9a 17       	cp	r25, r26
    1faa:	10 f4       	brcc	.+4      	; 0x1fb0 <xTaskIncrementTick+0x194>
    1fac:	a0 93 bd 15 	sts	0x15BD, r26	; 0x8015bd <uxTopReadyPriority>
    1fb0:	9b e0       	ldi	r25, 0x0B	; 11
    1fb2:	9a 9f       	mul	r25, r26
    1fb4:	d0 01       	movw	r26, r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	a1 50       	subi	r26, 0x01	; 1
    1fba:	ba 4e       	sbci	r27, 0xEA	; 234
    1fbc:	11 96       	adiw	r26, 0x01	; 1
    1fbe:	0d 90       	ld	r0, X+
    1fc0:	bc 91       	ld	r27, X
    1fc2:	a0 2d       	mov	r26, r0
    1fc4:	b7 83       	std	Z+7, r27	; 0x07
    1fc6:	a6 83       	std	Z+6, r26	; 0x06
    1fc8:	16 96       	adiw	r26, 0x06	; 6
    1fca:	4d 91       	ld	r20, X+
    1fcc:	5c 91       	ld	r21, X
    1fce:	17 97       	sbiw	r26, 0x07	; 7
    1fd0:	51 87       	std	Z+9, r21	; 0x09
    1fd2:	40 87       	std	Z+8, r20	; 0x08
    1fd4:	16 96       	adiw	r26, 0x06	; 6
    1fd6:	cd 91       	ld	r28, X+
    1fd8:	dc 91       	ld	r29, X
    1fda:	17 97       	sbiw	r26, 0x07	; 7
    1fdc:	3d 83       	std	Y+5, r19	; 0x05
    1fde:	2c 83       	std	Y+4, r18	; 0x04
    1fe0:	17 96       	adiw	r26, 0x07	; 7
    1fe2:	3c 93       	st	X, r19
    1fe4:	2e 93       	st	-X, r18
    1fe6:	16 97       	sbiw	r26, 0x06	; 6
    1fe8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fea:	9a 9f       	mul	r25, r26
    1fec:	d0 01       	movw	r26, r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	a1 50       	subi	r26, 0x01	; 1
    1ff2:	ba 4e       	sbci	r27, 0xEA	; 234
    1ff4:	b5 87       	std	Z+13, r27	; 0x0d
    1ff6:	a4 87       	std	Z+12, r26	; 0x0c
    1ff8:	9c 91       	ld	r25, X
    1ffa:	9f 5f       	subi	r25, 0xFF	; 255
    1ffc:	9c 93       	st	X, r25
    1ffe:	22 8d       	ldd	r18, Z+26	; 0x1a
    2000:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2004:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2008:	92 8d       	ldd	r25, Z+26	; 0x1a
    200a:	29 17       	cp	r18, r25
    200c:	08 f0       	brcs	.+2      	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    200e:	4f cf       	rjmp	.-354    	; 0x1eae <xTaskIncrementTick+0x92>
    2010:	51 cf       	rjmp	.-350    	; 0x1eb4 <xTaskIncrementTick+0x98>
    2012:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2016:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    201a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    201c:	9b e0       	ldi	r25, 0x0B	; 11
    201e:	e9 9f       	mul	r30, r25
    2020:	f0 01       	movw	r30, r0
    2022:	11 24       	eor	r1, r1
    2024:	e1 50       	subi	r30, 0x01	; 1
    2026:	fa 4e       	sbci	r31, 0xEA	; 234
    2028:	90 81       	ld	r25, Z
    202a:	92 30       	cpi	r25, 0x02	; 2
    202c:	08 f0       	brcs	.+2      	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 91 b7 15 	lds	r25, 0x15B7	; 0x8015b7 <xYieldPending>
    2034:	91 11       	cpse	r25, r1
    2036:	16 c0       	rjmp	.+44     	; 0x2064 <__DATA_REGION_LENGTH__+0x64>
    2038:	16 c0       	rjmp	.+44     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    203a:	80 91 b8 15 	lds	r24, 0x15B8	; 0x8015b8 <xPendedTicks>
    203e:	90 91 b9 15 	lds	r25, 0x15B9	; 0x8015b9 <xPendedTicks+0x1>
    2042:	a0 91 ba 15 	lds	r26, 0x15BA	; 0x8015ba <xPendedTicks+0x2>
    2046:	b0 91 bb 15 	lds	r27, 0x15BB	; 0x8015bb <xPendedTicks+0x3>
    204a:	01 96       	adiw	r24, 0x01	; 1
    204c:	a1 1d       	adc	r26, r1
    204e:	b1 1d       	adc	r27, r1
    2050:	80 93 b8 15 	sts	0x15B8, r24	; 0x8015b8 <xPendedTicks>
    2054:	90 93 b9 15 	sts	0x15B9, r25	; 0x8015b9 <xPendedTicks+0x1>
    2058:	a0 93 ba 15 	sts	0x15BA, r26	; 0x8015ba <xPendedTicks+0x2>
    205c:	b0 93 bb 15 	sts	0x15BB, r27	; 0x8015bb <xPendedTicks+0x3>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	ff 90       	pop	r15
    206c:	ef 90       	pop	r14
    206e:	df 90       	pop	r13
    2070:	cf 90       	pop	r12
    2072:	08 95       	ret

00002074 <xTaskResumeAll>:
    2074:	cf 92       	push	r12
    2076:	df 92       	push	r13
    2078:	ef 92       	push	r14
    207a:	ff 92       	push	r15
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	0f 92       	push	r0
    2086:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxSchedulerSuspended>
    208a:	81 50       	subi	r24, 0x01	; 1
    208c:	80 93 ae 15 	sts	0x15AE, r24	; 0x8015ae <uxSchedulerSuspended>
    2090:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxSchedulerSuspended>
    2094:	81 11       	cpse	r24, r1
    2096:	be c0       	rjmp	.+380    	; 0x2214 <__stack+0x15>
    2098:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <uxCurrentNumberOfTasks>
    209c:	81 11       	cpse	r24, r1
    209e:	88 c0       	rjmp	.+272    	; 0x21b0 <xTaskResumeAll+0x13c>
    20a0:	bc c0       	rjmp	.+376    	; 0x221a <__stack+0x1b>
    20a2:	e0 91 e1 15 	lds	r30, 0x15E1	; 0x8015e1 <xPendingReadyList+0x7>
    20a6:	f0 91 e2 15 	lds	r31, 0x15E2	; 0x8015e2 <xPendingReadyList+0x8>
    20aa:	00 84       	ldd	r0, Z+8	; 0x08
    20ac:	f1 85       	ldd	r31, Z+9	; 0x09
    20ae:	e0 2d       	mov	r30, r0
    20b0:	a0 8d       	ldd	r26, Z+24	; 0x18
    20b2:	b1 8d       	ldd	r27, Z+25	; 0x19
    20b4:	c2 89       	ldd	r28, Z+18	; 0x12
    20b6:	d3 89       	ldd	r29, Z+19	; 0x13
    20b8:	84 89       	ldd	r24, Z+20	; 0x14
    20ba:	95 89       	ldd	r25, Z+21	; 0x15
    20bc:	9f 83       	std	Y+7, r25	; 0x07
    20be:	8e 83       	std	Y+6, r24	; 0x06
    20c0:	c4 89       	ldd	r28, Z+20	; 0x14
    20c2:	d5 89       	ldd	r29, Z+21	; 0x15
    20c4:	82 89       	ldd	r24, Z+18	; 0x12
    20c6:	93 89       	ldd	r25, Z+19	; 0x13
    20c8:	9d 83       	std	Y+5, r25	; 0x05
    20ca:	8c 83       	std	Y+4, r24	; 0x04
    20cc:	11 96       	adiw	r26, 0x01	; 1
    20ce:	2d 91       	ld	r18, X+
    20d0:	3c 91       	ld	r19, X
    20d2:	12 97       	sbiw	r26, 0x02	; 2
    20d4:	cf 01       	movw	r24, r30
    20d6:	0e 96       	adiw	r24, 0x0e	; 14
    20d8:	28 17       	cp	r18, r24
    20da:	39 07       	cpc	r19, r25
    20dc:	31 f4       	brne	.+12     	; 0x20ea <xTaskResumeAll+0x76>
    20de:	84 89       	ldd	r24, Z+20	; 0x14
    20e0:	95 89       	ldd	r25, Z+21	; 0x15
    20e2:	12 96       	adiw	r26, 0x02	; 2
    20e4:	9c 93       	st	X, r25
    20e6:	8e 93       	st	-X, r24
    20e8:	11 97       	sbiw	r26, 0x01	; 1
    20ea:	11 8e       	std	Z+25, r1	; 0x19
    20ec:	10 8e       	std	Z+24, r1	; 0x18
    20ee:	8c 91       	ld	r24, X
    20f0:	81 50       	subi	r24, 0x01	; 1
    20f2:	8c 93       	st	X, r24
    20f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    20f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    20f8:	c6 81       	ldd	r28, Z+6	; 0x06
    20fa:	d7 81       	ldd	r29, Z+7	; 0x07
    20fc:	80 85       	ldd	r24, Z+8	; 0x08
    20fe:	91 85       	ldd	r25, Z+9	; 0x09
    2100:	9f 83       	std	Y+7, r25	; 0x07
    2102:	8e 83       	std	Y+6, r24	; 0x06
    2104:	c0 85       	ldd	r28, Z+8	; 0x08
    2106:	d1 85       	ldd	r29, Z+9	; 0x09
    2108:	86 81       	ldd	r24, Z+6	; 0x06
    210a:	97 81       	ldd	r25, Z+7	; 0x07
    210c:	9d 83       	std	Y+5, r25	; 0x05
    210e:	8c 83       	std	Y+4, r24	; 0x04
    2110:	11 96       	adiw	r26, 0x01	; 1
    2112:	8d 91       	ld	r24, X+
    2114:	9c 91       	ld	r25, X
    2116:	12 97       	sbiw	r26, 0x02	; 2
    2118:	9f 01       	movw	r18, r30
    211a:	2e 5f       	subi	r18, 0xFE	; 254
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	82 17       	cp	r24, r18
    2120:	93 07       	cpc	r25, r19
    2122:	31 f4       	brne	.+12     	; 0x2130 <xTaskResumeAll+0xbc>
    2124:	80 85       	ldd	r24, Z+8	; 0x08
    2126:	91 85       	ldd	r25, Z+9	; 0x09
    2128:	12 96       	adiw	r26, 0x02	; 2
    212a:	9c 93       	st	X, r25
    212c:	8e 93       	st	-X, r24
    212e:	11 97       	sbiw	r26, 0x01	; 1
    2130:	15 86       	std	Z+13, r1	; 0x0d
    2132:	14 86       	std	Z+12, r1	; 0x0c
    2134:	8c 91       	ld	r24, X
    2136:	81 50       	subi	r24, 0x01	; 1
    2138:	8c 93       	st	X, r24
    213a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    213c:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <uxTopReadyPriority>
    2140:	8a 17       	cp	r24, r26
    2142:	10 f4       	brcc	.+4      	; 0x2148 <xTaskResumeAll+0xd4>
    2144:	a0 93 bd 15 	sts	0x15BD, r26	; 0x8015bd <uxTopReadyPriority>
    2148:	8b e0       	ldi	r24, 0x0B	; 11
    214a:	8a 9f       	mul	r24, r26
    214c:	d0 01       	movw	r26, r0
    214e:	11 24       	eor	r1, r1
    2150:	a1 50       	subi	r26, 0x01	; 1
    2152:	ba 4e       	sbci	r27, 0xEA	; 234
    2154:	11 96       	adiw	r26, 0x01	; 1
    2156:	0d 90       	ld	r0, X+
    2158:	bc 91       	ld	r27, X
    215a:	a0 2d       	mov	r26, r0
    215c:	b7 83       	std	Z+7, r27	; 0x07
    215e:	a6 83       	std	Z+6, r26	; 0x06
    2160:	16 96       	adiw	r26, 0x06	; 6
    2162:	4d 91       	ld	r20, X+
    2164:	5c 91       	ld	r21, X
    2166:	17 97       	sbiw	r26, 0x07	; 7
    2168:	51 87       	std	Z+9, r21	; 0x09
    216a:	40 87       	std	Z+8, r20	; 0x08
    216c:	16 96       	adiw	r26, 0x06	; 6
    216e:	cd 91       	ld	r28, X+
    2170:	dc 91       	ld	r29, X
    2172:	17 97       	sbiw	r26, 0x07	; 7
    2174:	3d 83       	std	Y+5, r19	; 0x05
    2176:	2c 83       	std	Y+4, r18	; 0x04
    2178:	17 96       	adiw	r26, 0x07	; 7
    217a:	3c 93       	st	X, r19
    217c:	2e 93       	st	-X, r18
    217e:	16 97       	sbiw	r26, 0x06	; 6
    2180:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2182:	8a 9f       	mul	r24, r26
    2184:	d0 01       	movw	r26, r0
    2186:	11 24       	eor	r1, r1
    2188:	a1 50       	subi	r26, 0x01	; 1
    218a:	ba 4e       	sbci	r27, 0xEA	; 234
    218c:	b5 87       	std	Z+13, r27	; 0x0d
    218e:	a4 87       	std	Z+12, r26	; 0x0c
    2190:	8c 91       	ld	r24, X
    2192:	8f 5f       	subi	r24, 0xFF	; 255
    2194:	8c 93       	st	X, r24
    2196:	92 8d       	ldd	r25, Z+26	; 0x1a
    2198:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
    219c:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    21a0:	5a 96       	adiw	r26, 0x1a	; 26
    21a2:	8c 91       	ld	r24, X
    21a4:	98 17       	cp	r25, r24
    21a6:	30 f0       	brcs	.+12     	; 0x21b4 <xTaskResumeAll+0x140>
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	80 93 b7 15 	sts	0x15B7, r24	; 0x8015b7 <xYieldPending>
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <xTaskResumeAll+0x140>
    21b0:	e0 e0       	ldi	r30, 0x00	; 0
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 91 da 15 	lds	r24, 0x15DA	; 0x8015da <xPendingReadyList>
    21b8:	81 11       	cpse	r24, r1
    21ba:	73 cf       	rjmp	.-282    	; 0x20a2 <xTaskResumeAll+0x2e>
    21bc:	ef 2b       	or	r30, r31
    21be:	09 f0       	breq	.+2      	; 0x21c2 <xTaskResumeAll+0x14e>
    21c0:	83 db       	rcall	.-2298   	; 0x18c8 <prvResetNextTaskUnblockTime>
    21c2:	c0 90 b8 15 	lds	r12, 0x15B8	; 0x8015b8 <xPendedTicks>
    21c6:	d0 90 b9 15 	lds	r13, 0x15B9	; 0x8015b9 <xPendedTicks+0x1>
    21ca:	e0 90 ba 15 	lds	r14, 0x15BA	; 0x8015ba <xPendedTicks+0x2>
    21ce:	f0 90 bb 15 	lds	r15, 0x15BB	; 0x8015bb <xPendedTicks+0x3>
    21d2:	c1 14       	cp	r12, r1
    21d4:	d1 04       	cpc	r13, r1
    21d6:	e1 04       	cpc	r14, r1
    21d8:	f1 04       	cpc	r15, r1
    21da:	a1 f0       	breq	.+40     	; 0x2204 <__stack+0x5>
    21dc:	1f de       	rcall	.-962    	; 0x1e1c <xTaskIncrementTick>
    21de:	88 23       	and	r24, r24
    21e0:	19 f0       	breq	.+6      	; 0x21e8 <xTaskResumeAll+0x174>
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	80 93 b7 15 	sts	0x15B7, r24	; 0x8015b7 <xYieldPending>
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	c8 1a       	sub	r12, r24
    21ec:	d1 08       	sbc	r13, r1
    21ee:	e1 08       	sbc	r14, r1
    21f0:	f1 08       	sbc	r15, r1
    21f2:	a1 f7       	brne	.-24     	; 0x21dc <xTaskResumeAll+0x168>
    21f4:	10 92 b8 15 	sts	0x15B8, r1	; 0x8015b8 <xPendedTicks>
    21f8:	10 92 b9 15 	sts	0x15B9, r1	; 0x8015b9 <xPendedTicks+0x1>
    21fc:	10 92 ba 15 	sts	0x15BA, r1	; 0x8015ba <xPendedTicks+0x2>
    2200:	10 92 bb 15 	sts	0x15BB, r1	; 0x8015bb <xPendedTicks+0x3>
    2204:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <xYieldPending>
    2208:	88 23       	and	r24, r24
    220a:	31 f0       	breq	.+12     	; 0x2218 <__stack+0x19>
    220c:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortYield>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	03 c0       	rjmp	.+6      	; 0x221a <__stack+0x1b>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	01 c0       	rjmp	.+2      	; 0x221a <__stack+0x1b>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	0f 90       	pop	r0
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	08 95       	ret

0000222c <xTaskDelayUntil>:
    222c:	8f 92       	push	r8
    222e:	9f 92       	push	r9
    2230:	af 92       	push	r10
    2232:	bf 92       	push	r11
    2234:	cf 92       	push	r12
    2236:	df 92       	push	r13
    2238:	ef 92       	push	r14
    223a:	ff 92       	push	r15
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	ec 01       	movw	r28, r24
    2244:	6a 01       	movw	r12, r20
    2246:	7b 01       	movw	r14, r22
    2248:	d5 dd       	rcall	.-1110   	; 0x1df4 <vTaskSuspendAll>
    224a:	80 90 be 15 	lds	r8, 0x15BE	; 0x8015be <xTickCount>
    224e:	90 90 bf 15 	lds	r9, 0x15BF	; 0x8015bf <xTickCount+0x1>
    2252:	a0 90 c0 15 	lds	r10, 0x15C0	; 0x8015c0 <xTickCount+0x2>
    2256:	b0 90 c1 15 	lds	r11, 0x15C1	; 0x8015c1 <xTickCount+0x3>
    225a:	88 81       	ld	r24, Y
    225c:	99 81       	ldd	r25, Y+1	; 0x01
    225e:	aa 81       	ldd	r26, Y+2	; 0x02
    2260:	bb 81       	ldd	r27, Y+3	; 0x03
    2262:	ac 01       	movw	r20, r24
    2264:	bd 01       	movw	r22, r26
    2266:	4c 0d       	add	r20, r12
    2268:	5d 1d       	adc	r21, r13
    226a:	6e 1d       	adc	r22, r14
    226c:	7f 1d       	adc	r23, r15
    226e:	88 16       	cp	r8, r24
    2270:	99 06       	cpc	r9, r25
    2272:	aa 06       	cpc	r10, r26
    2274:	bb 06       	cpc	r11, r27
    2276:	60 f4       	brcc	.+24     	; 0x2290 <xTaskDelayUntil+0x64>
    2278:	48 17       	cp	r20, r24
    227a:	59 07       	cpc	r21, r25
    227c:	6a 07       	cpc	r22, r26
    227e:	7b 07       	cpc	r23, r27
    2280:	98 f4       	brcc	.+38     	; 0x22a8 <xTaskDelayUntil+0x7c>
    2282:	84 16       	cp	r8, r20
    2284:	95 06       	cpc	r9, r21
    2286:	a6 06       	cpc	r10, r22
    2288:	b7 06       	cpc	r11, r23
    228a:	80 f0       	brcs	.+32     	; 0x22ac <xTaskDelayUntil+0x80>
    228c:	10 e0       	ldi	r17, 0x00	; 0
    228e:	13 c0       	rjmp	.+38     	; 0x22b6 <xTaskDelayUntil+0x8a>
    2290:	48 17       	cp	r20, r24
    2292:	59 07       	cpc	r21, r25
    2294:	6a 07       	cpc	r22, r26
    2296:	7b 07       	cpc	r23, r27
    2298:	58 f0       	brcs	.+22     	; 0x22b0 <xTaskDelayUntil+0x84>
    229a:	84 16       	cp	r8, r20
    229c:	95 06       	cpc	r9, r21
    229e:	a6 06       	cpc	r10, r22
    22a0:	b7 06       	cpc	r11, r23
    22a2:	40 f0       	brcs	.+16     	; 0x22b4 <xTaskDelayUntil+0x88>
    22a4:	10 e0       	ldi	r17, 0x00	; 0
    22a6:	07 c0       	rjmp	.+14     	; 0x22b6 <xTaskDelayUntil+0x8a>
    22a8:	10 e0       	ldi	r17, 0x00	; 0
    22aa:	05 c0       	rjmp	.+10     	; 0x22b6 <xTaskDelayUntil+0x8a>
    22ac:	11 e0       	ldi	r17, 0x01	; 1
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <xTaskDelayUntil+0x8a>
    22b0:	11 e0       	ldi	r17, 0x01	; 1
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <xTaskDelayUntil+0x8a>
    22b4:	11 e0       	ldi	r17, 0x01	; 1
    22b6:	48 83       	st	Y, r20
    22b8:	59 83       	std	Y+1, r21	; 0x01
    22ba:	6a 83       	std	Y+2, r22	; 0x02
    22bc:	7b 83       	std	Y+3, r23	; 0x03
    22be:	11 23       	and	r17, r17
    22c0:	41 f0       	breq	.+16     	; 0x22d2 <xTaskDelayUntil+0xa6>
    22c2:	cb 01       	movw	r24, r22
    22c4:	ba 01       	movw	r22, r20
    22c6:	68 19       	sub	r22, r8
    22c8:	79 09       	sbc	r23, r9
    22ca:	8a 09       	sbc	r24, r10
    22cc:	9b 09       	sbc	r25, r11
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	6b dc       	rcall	.-1834   	; 0x1ba8 <prvAddCurrentTaskToDelayedList>
    22d2:	d0 de       	rcall	.-608    	; 0x2074 <xTaskResumeAll>
    22d4:	81 11       	cpse	r24, r1
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <xTaskDelayUntil+0xb0>
    22d8:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortYield>
    22dc:	81 2f       	mov	r24, r17
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	1f 91       	pop	r17
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	df 90       	pop	r13
    22ea:	cf 90       	pop	r12
    22ec:	bf 90       	pop	r11
    22ee:	af 90       	pop	r10
    22f0:	9f 90       	pop	r9
    22f2:	8f 90       	pop	r8
    22f4:	08 95       	ret

000022f6 <vTaskDelay>:
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	6b 01       	movw	r12, r22
    2300:	7c 01       	movw	r14, r24
    2302:	67 2b       	or	r22, r23
    2304:	68 2b       	or	r22, r24
    2306:	69 2b       	or	r22, r25
    2308:	39 f0       	breq	.+14     	; 0x2318 <vTaskDelay+0x22>
    230a:	74 dd       	rcall	.-1304   	; 0x1df4 <vTaskSuspendAll>
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	c7 01       	movw	r24, r14
    2310:	b6 01       	movw	r22, r12
    2312:	4a dc       	rcall	.-1900   	; 0x1ba8 <prvAddCurrentTaskToDelayedList>
    2314:	af de       	rcall	.-674    	; 0x2074 <xTaskResumeAll>
    2316:	01 c0       	rjmp	.+2      	; 0x231a <vTaskDelay+0x24>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	81 11       	cpse	r24, r1
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <vTaskDelay+0x2c>
    231e:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortYield>
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	df 90       	pop	r13
    2328:	cf 90       	pop	r12
    232a:	08 95       	ret

0000232c <vTaskSwitchContext>:
    232c:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxSchedulerSuspended>
    2330:	88 23       	and	r24, r24
    2332:	21 f0       	breq	.+8      	; 0x233c <vTaskSwitchContext+0x10>
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 93 b7 15 	sts	0x15B7, r24	; 0x8015b7 <xYieldPending>
    233a:	08 95       	ret
    233c:	10 92 b7 15 	sts	0x15B7, r1	; 0x8015b7 <xYieldPending>
    2340:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2344:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2348:	20 81       	ld	r18, Z
    234a:	31 81       	ldd	r19, Z+1	; 0x01
    234c:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2350:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2354:	83 8d       	ldd	r24, Z+27	; 0x1b
    2356:	94 8d       	ldd	r25, Z+28	; 0x1c
    2358:	82 17       	cp	r24, r18
    235a:	93 07       	cpc	r25, r19
    235c:	60 f0       	brcs	.+24     	; 0x2376 <vTaskSwitchContext+0x4a>
    235e:	60 91 6d 16 	lds	r22, 0x166D	; 0x80166d <pxCurrentTCB>
    2362:	70 91 6e 16 	lds	r23, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2366:	63 5e       	subi	r22, 0xE3	; 227
    2368:	7f 4f       	sbci	r23, 0xFF	; 255
    236a:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <pxCurrentTCB>
    236e:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2372:	0e 94 02 1b 	call	0x3604	; 0x3604 <vApplicationStackOverflowHook>
    2376:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <uxTopReadyPriority>
    237a:	01 c0       	rjmp	.+2      	; 0x237e <vTaskSwitchContext+0x52>
    237c:	81 50       	subi	r24, 0x01	; 1
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	9b e0       	ldi	r25, 0x0B	; 11
    2384:	92 9f       	mul	r25, r18
    2386:	f0 01       	movw	r30, r0
    2388:	93 9f       	mul	r25, r19
    238a:	f0 0d       	add	r31, r0
    238c:	11 24       	eor	r1, r1
    238e:	e1 50       	subi	r30, 0x01	; 1
    2390:	fa 4e       	sbci	r31, 0xEA	; 234
    2392:	90 81       	ld	r25, Z
    2394:	99 23       	and	r25, r25
    2396:	91 f3       	breq	.-28     	; 0x237c <vTaskSwitchContext+0x50>
    2398:	9b e0       	ldi	r25, 0x0B	; 11
    239a:	92 9f       	mul	r25, r18
    239c:	a0 01       	movw	r20, r0
    239e:	93 9f       	mul	r25, r19
    23a0:	50 0d       	add	r21, r0
    23a2:	11 24       	eor	r1, r1
    23a4:	df 01       	movw	r26, r30
    23a6:	01 80       	ldd	r0, Z+1	; 0x01
    23a8:	f2 81       	ldd	r31, Z+2	; 0x02
    23aa:	e0 2d       	mov	r30, r0
    23ac:	04 80       	ldd	r0, Z+4	; 0x04
    23ae:	f5 81       	ldd	r31, Z+5	; 0x05
    23b0:	e0 2d       	mov	r30, r0
    23b2:	12 96       	adiw	r26, 0x02	; 2
    23b4:	fc 93       	st	X, r31
    23b6:	ee 93       	st	-X, r30
    23b8:	11 97       	sbiw	r26, 0x01	; 1
    23ba:	4e 5f       	subi	r20, 0xFE	; 254
    23bc:	59 4e       	sbci	r21, 0xE9	; 233
    23be:	e4 17       	cp	r30, r20
    23c0:	f5 07       	cpc	r31, r21
    23c2:	29 f4       	brne	.+10     	; 0x23ce <vTaskSwitchContext+0xa2>
    23c4:	44 81       	ldd	r20, Z+4	; 0x04
    23c6:	55 81       	ldd	r21, Z+5	; 0x05
    23c8:	fd 01       	movw	r30, r26
    23ca:	52 83       	std	Z+2, r21	; 0x02
    23cc:	41 83       	std	Z+1, r20	; 0x01
    23ce:	9b e0       	ldi	r25, 0x0B	; 11
    23d0:	92 9f       	mul	r25, r18
    23d2:	f0 01       	movw	r30, r0
    23d4:	93 9f       	mul	r25, r19
    23d6:	f0 0d       	add	r31, r0
    23d8:	11 24       	eor	r1, r1
    23da:	e1 50       	subi	r30, 0x01	; 1
    23dc:	fa 4e       	sbci	r31, 0xEA	; 234
    23de:	01 80       	ldd	r0, Z+1	; 0x01
    23e0:	f2 81       	ldd	r31, Z+2	; 0x02
    23e2:	e0 2d       	mov	r30, r0
    23e4:	20 85       	ldd	r18, Z+8	; 0x08
    23e6:	31 85       	ldd	r19, Z+9	; 0x09
    23e8:	30 93 6e 16 	sts	0x166E, r19	; 0x80166e <pxCurrentTCB+0x1>
    23ec:	20 93 6d 16 	sts	0x166D, r18	; 0x80166d <pxCurrentTCB>
    23f0:	80 93 bd 15 	sts	0x15BD, r24	; 0x8015bd <uxTopReadyPriority>
    23f4:	08 95       	ret

000023f6 <vTaskPlaceOnEventList>:
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	6a 01       	movw	r12, r20
    2400:	7b 01       	movw	r14, r22
    2402:	60 91 6d 16 	lds	r22, 0x166D	; 0x80166d <pxCurrentTCB>
    2406:	70 91 6e 16 	lds	r23, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    240a:	62 5f       	subi	r22, 0xF2	; 242
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <vListInsert>
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	c7 01       	movw	r24, r14
    2416:	b6 01       	movw	r22, r12
    2418:	c7 db       	rcall	.-2162   	; 0x1ba8 <prvAddCurrentTaskToDelayedList>
    241a:	ff 90       	pop	r15
    241c:	ef 90       	pop	r14
    241e:	df 90       	pop	r13
    2420:	cf 90       	pop	r12
    2422:	08 95       	ret

00002424 <vTaskPlaceOnUnorderedEventList>:
    2424:	0f 93       	push	r16
    2426:	1f 93       	push	r17
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	fc 01       	movw	r30, r24
    242e:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
    2432:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2436:	70 68       	ori	r23, 0x80	; 128
    2438:	1e 96       	adiw	r26, 0x0e	; 14
    243a:	4d 93       	st	X+, r20
    243c:	5d 93       	st	X+, r21
    243e:	6d 93       	st	X+, r22
    2440:	7c 93       	st	X, r23
    2442:	51 97       	sbiw	r26, 0x11	; 17
    2444:	a1 81       	ldd	r26, Z+1	; 0x01
    2446:	b2 81       	ldd	r27, Z+2	; 0x02
    2448:	c0 91 6d 16 	lds	r28, 0x166D	; 0x80166d <pxCurrentTCB>
    244c:	d0 91 6e 16 	lds	r29, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2450:	bb 8b       	std	Y+19, r27	; 0x13
    2452:	aa 8b       	std	Y+18, r26	; 0x12
    2454:	c0 91 6d 16 	lds	r28, 0x166D	; 0x80166d <pxCurrentTCB>
    2458:	d0 91 6e 16 	lds	r29, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    245c:	16 96       	adiw	r26, 0x06	; 6
    245e:	8d 91       	ld	r24, X+
    2460:	9c 91       	ld	r25, X
    2462:	17 97       	sbiw	r26, 0x07	; 7
    2464:	9d 8b       	std	Y+21, r25	; 0x15
    2466:	8c 8b       	std	Y+20, r24	; 0x14
    2468:	16 96       	adiw	r26, 0x06	; 6
    246a:	cd 91       	ld	r28, X+
    246c:	dc 91       	ld	r29, X
    246e:	17 97       	sbiw	r26, 0x07	; 7
    2470:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <pxCurrentTCB>
    2474:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2478:	0e 96       	adiw	r24, 0x0e	; 14
    247a:	9d 83       	std	Y+5, r25	; 0x05
    247c:	8c 83       	std	Y+4, r24	; 0x04
    247e:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <pxCurrentTCB>
    2482:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2486:	0e 96       	adiw	r24, 0x0e	; 14
    2488:	17 96       	adiw	r26, 0x07	; 7
    248a:	9c 93       	st	X, r25
    248c:	8e 93       	st	-X, r24
    248e:	16 97       	sbiw	r26, 0x06	; 6
    2490:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
    2494:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2498:	59 96       	adiw	r26, 0x19	; 25
    249a:	fc 93       	st	X, r31
    249c:	ee 93       	st	-X, r30
    249e:	58 97       	sbiw	r26, 0x18	; 24
    24a0:	80 81       	ld	r24, Z
    24a2:	8f 5f       	subi	r24, 0xFF	; 255
    24a4:	80 83       	st	Z, r24
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	c9 01       	movw	r24, r18
    24aa:	b8 01       	movw	r22, r16
    24ac:	7d db       	rcall	.-2310   	; 0x1ba8 <prvAddCurrentTaskToDelayedList>
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	08 95       	ret

000024b8 <vTaskPlaceOnEventListRestricted>:
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	fc 01       	movw	r30, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	ba 01       	movw	r22, r20
    24c2:	a1 81       	ldd	r26, Z+1	; 0x01
    24c4:	b2 81       	ldd	r27, Z+2	; 0x02
    24c6:	c0 91 6d 16 	lds	r28, 0x166D	; 0x80166d <pxCurrentTCB>
    24ca:	d0 91 6e 16 	lds	r29, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    24ce:	bb 8b       	std	Y+19, r27	; 0x13
    24d0:	aa 8b       	std	Y+18, r26	; 0x12
    24d2:	c0 91 6d 16 	lds	r28, 0x166D	; 0x80166d <pxCurrentTCB>
    24d6:	d0 91 6e 16 	lds	r29, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    24da:	16 96       	adiw	r26, 0x06	; 6
    24dc:	4d 91       	ld	r20, X+
    24de:	5c 91       	ld	r21, X
    24e0:	17 97       	sbiw	r26, 0x07	; 7
    24e2:	5d 8b       	std	Y+21, r21	; 0x15
    24e4:	4c 8b       	std	Y+20, r20	; 0x14
    24e6:	16 96       	adiw	r26, 0x06	; 6
    24e8:	cd 91       	ld	r28, X+
    24ea:	dc 91       	ld	r29, X
    24ec:	17 97       	sbiw	r26, 0x07	; 7
    24ee:	40 91 6d 16 	lds	r20, 0x166D	; 0x80166d <pxCurrentTCB>
    24f2:	50 91 6e 16 	lds	r21, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    24f6:	42 5f       	subi	r20, 0xF2	; 242
    24f8:	5f 4f       	sbci	r21, 0xFF	; 255
    24fa:	5d 83       	std	Y+5, r21	; 0x05
    24fc:	4c 83       	std	Y+4, r20	; 0x04
    24fe:	40 91 6d 16 	lds	r20, 0x166D	; 0x80166d <pxCurrentTCB>
    2502:	50 91 6e 16 	lds	r21, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2506:	42 5f       	subi	r20, 0xF2	; 242
    2508:	5f 4f       	sbci	r21, 0xFF	; 255
    250a:	17 96       	adiw	r26, 0x07	; 7
    250c:	5c 93       	st	X, r21
    250e:	4e 93       	st	-X, r20
    2510:	16 97       	sbiw	r26, 0x06	; 6
    2512:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
    2516:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    251a:	59 96       	adiw	r26, 0x19	; 25
    251c:	fc 93       	st	X, r31
    251e:	ee 93       	st	-X, r30
    2520:	58 97       	sbiw	r26, 0x18	; 24
    2522:	30 81       	ld	r19, Z
    2524:	3f 5f       	subi	r19, 0xFF	; 255
    2526:	30 83       	st	Z, r19
    2528:	22 23       	and	r18, r18
    252a:	19 f0       	breq	.+6      	; 0x2532 <vTaskPlaceOnEventListRestricted+0x7a>
    252c:	6f ef       	ldi	r22, 0xFF	; 255
    252e:	7f ef       	ldi	r23, 0xFF	; 255
    2530:	cb 01       	movw	r24, r22
    2532:	42 2f       	mov	r20, r18
    2534:	39 db       	rcall	.-2446   	; 0x1ba8 <prvAddCurrentTaskToDelayedList>
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	08 95       	ret

0000253c <xTaskRemoveFromEventList>:
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	dc 01       	movw	r26, r24
    2542:	17 96       	adiw	r26, 0x07	; 7
    2544:	ed 91       	ld	r30, X+
    2546:	fc 91       	ld	r31, X
    2548:	18 97       	sbiw	r26, 0x08	; 8
    254a:	00 84       	ldd	r0, Z+8	; 0x08
    254c:	f1 85       	ldd	r31, Z+9	; 0x09
    254e:	e0 2d       	mov	r30, r0
    2550:	a0 8d       	ldd	r26, Z+24	; 0x18
    2552:	b1 8d       	ldd	r27, Z+25	; 0x19
    2554:	c2 89       	ldd	r28, Z+18	; 0x12
    2556:	d3 89       	ldd	r29, Z+19	; 0x13
    2558:	84 89       	ldd	r24, Z+20	; 0x14
    255a:	95 89       	ldd	r25, Z+21	; 0x15
    255c:	9f 83       	std	Y+7, r25	; 0x07
    255e:	8e 83       	std	Y+6, r24	; 0x06
    2560:	c4 89       	ldd	r28, Z+20	; 0x14
    2562:	d5 89       	ldd	r29, Z+21	; 0x15
    2564:	82 89       	ldd	r24, Z+18	; 0x12
    2566:	93 89       	ldd	r25, Z+19	; 0x13
    2568:	9d 83       	std	Y+5, r25	; 0x05
    256a:	8c 83       	std	Y+4, r24	; 0x04
    256c:	11 96       	adiw	r26, 0x01	; 1
    256e:	8d 91       	ld	r24, X+
    2570:	9c 91       	ld	r25, X
    2572:	12 97       	sbiw	r26, 0x02	; 2
    2574:	9f 01       	movw	r18, r30
    2576:	22 5f       	subi	r18, 0xF2	; 242
    2578:	3f 4f       	sbci	r19, 0xFF	; 255
    257a:	82 17       	cp	r24, r18
    257c:	93 07       	cpc	r25, r19
    257e:	31 f4       	brne	.+12     	; 0x258c <xTaskRemoveFromEventList+0x50>
    2580:	84 89       	ldd	r24, Z+20	; 0x14
    2582:	95 89       	ldd	r25, Z+21	; 0x15
    2584:	12 96       	adiw	r26, 0x02	; 2
    2586:	9c 93       	st	X, r25
    2588:	8e 93       	st	-X, r24
    258a:	11 97       	sbiw	r26, 0x01	; 1
    258c:	11 8e       	std	Z+25, r1	; 0x19
    258e:	10 8e       	std	Z+24, r1	; 0x18
    2590:	8c 91       	ld	r24, X
    2592:	81 50       	subi	r24, 0x01	; 1
    2594:	8c 93       	st	X, r24
    2596:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxSchedulerSuspended>
    259a:	81 11       	cpse	r24, r1
    259c:	52 c0       	rjmp	.+164    	; 0x2642 <xTaskRemoveFromEventList+0x106>
    259e:	a4 85       	ldd	r26, Z+12	; 0x0c
    25a0:	b5 85       	ldd	r27, Z+13	; 0x0d
    25a2:	c6 81       	ldd	r28, Z+6	; 0x06
    25a4:	d7 81       	ldd	r29, Z+7	; 0x07
    25a6:	80 85       	ldd	r24, Z+8	; 0x08
    25a8:	91 85       	ldd	r25, Z+9	; 0x09
    25aa:	9f 83       	std	Y+7, r25	; 0x07
    25ac:	8e 83       	std	Y+6, r24	; 0x06
    25ae:	c0 85       	ldd	r28, Z+8	; 0x08
    25b0:	d1 85       	ldd	r29, Z+9	; 0x09
    25b2:	86 81       	ldd	r24, Z+6	; 0x06
    25b4:	97 81       	ldd	r25, Z+7	; 0x07
    25b6:	9d 83       	std	Y+5, r25	; 0x05
    25b8:	8c 83       	std	Y+4, r24	; 0x04
    25ba:	11 96       	adiw	r26, 0x01	; 1
    25bc:	8d 91       	ld	r24, X+
    25be:	9c 91       	ld	r25, X
    25c0:	12 97       	sbiw	r26, 0x02	; 2
    25c2:	9f 01       	movw	r18, r30
    25c4:	2e 5f       	subi	r18, 0xFE	; 254
    25c6:	3f 4f       	sbci	r19, 0xFF	; 255
    25c8:	82 17       	cp	r24, r18
    25ca:	93 07       	cpc	r25, r19
    25cc:	31 f4       	brne	.+12     	; 0x25da <xTaskRemoveFromEventList+0x9e>
    25ce:	80 85       	ldd	r24, Z+8	; 0x08
    25d0:	91 85       	ldd	r25, Z+9	; 0x09
    25d2:	12 96       	adiw	r26, 0x02	; 2
    25d4:	9c 93       	st	X, r25
    25d6:	8e 93       	st	-X, r24
    25d8:	11 97       	sbiw	r26, 0x01	; 1
    25da:	15 86       	std	Z+13, r1	; 0x0d
    25dc:	14 86       	std	Z+12, r1	; 0x0c
    25de:	8c 91       	ld	r24, X
    25e0:	81 50       	subi	r24, 0x01	; 1
    25e2:	8c 93       	st	X, r24
    25e4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25e6:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <uxTopReadyPriority>
    25ea:	8a 17       	cp	r24, r26
    25ec:	10 f4       	brcc	.+4      	; 0x25f2 <xTaskRemoveFromEventList+0xb6>
    25ee:	a0 93 bd 15 	sts	0x15BD, r26	; 0x8015bd <uxTopReadyPriority>
    25f2:	8b e0       	ldi	r24, 0x0B	; 11
    25f4:	8a 9f       	mul	r24, r26
    25f6:	d0 01       	movw	r26, r0
    25f8:	11 24       	eor	r1, r1
    25fa:	a1 50       	subi	r26, 0x01	; 1
    25fc:	ba 4e       	sbci	r27, 0xEA	; 234
    25fe:	11 96       	adiw	r26, 0x01	; 1
    2600:	0d 90       	ld	r0, X+
    2602:	bc 91       	ld	r27, X
    2604:	a0 2d       	mov	r26, r0
    2606:	b7 83       	std	Z+7, r27	; 0x07
    2608:	a6 83       	std	Z+6, r26	; 0x06
    260a:	16 96       	adiw	r26, 0x06	; 6
    260c:	4d 91       	ld	r20, X+
    260e:	5c 91       	ld	r21, X
    2610:	17 97       	sbiw	r26, 0x07	; 7
    2612:	51 87       	std	Z+9, r21	; 0x09
    2614:	40 87       	std	Z+8, r20	; 0x08
    2616:	16 96       	adiw	r26, 0x06	; 6
    2618:	cd 91       	ld	r28, X+
    261a:	dc 91       	ld	r29, X
    261c:	17 97       	sbiw	r26, 0x07	; 7
    261e:	3d 83       	std	Y+5, r19	; 0x05
    2620:	2c 83       	std	Y+4, r18	; 0x04
    2622:	17 96       	adiw	r26, 0x07	; 7
    2624:	3c 93       	st	X, r19
    2626:	2e 93       	st	-X, r18
    2628:	16 97       	sbiw	r26, 0x06	; 6
    262a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    262c:	8a 9f       	mul	r24, r26
    262e:	d0 01       	movw	r26, r0
    2630:	11 24       	eor	r1, r1
    2632:	a1 50       	subi	r26, 0x01	; 1
    2634:	ba 4e       	sbci	r27, 0xEA	; 234
    2636:	b5 87       	std	Z+13, r27	; 0x0d
    2638:	a4 87       	std	Z+12, r26	; 0x0c
    263a:	8c 91       	ld	r24, X
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	8c 93       	st	X, r24
    2640:	1c c0       	rjmp	.+56     	; 0x267a <xTaskRemoveFromEventList+0x13e>
    2642:	4a ed       	ldi	r20, 0xDA	; 218
    2644:	55 e1       	ldi	r21, 0x15	; 21
    2646:	da 01       	movw	r26, r20
    2648:	11 96       	adiw	r26, 0x01	; 1
    264a:	cd 91       	ld	r28, X+
    264c:	dc 91       	ld	r29, X
    264e:	12 97       	sbiw	r26, 0x02	; 2
    2650:	d3 8b       	std	Z+19, r29	; 0x13
    2652:	c2 8b       	std	Z+18, r28	; 0x12
    2654:	8e 81       	ldd	r24, Y+6	; 0x06
    2656:	9f 81       	ldd	r25, Y+7	; 0x07
    2658:	95 8b       	std	Z+21, r25	; 0x15
    265a:	84 8b       	std	Z+20, r24	; 0x14
    265c:	8e 81       	ldd	r24, Y+6	; 0x06
    265e:	9f 81       	ldd	r25, Y+7	; 0x07
    2660:	dc 01       	movw	r26, r24
    2662:	15 96       	adiw	r26, 0x05	; 5
    2664:	3c 93       	st	X, r19
    2666:	2e 93       	st	-X, r18
    2668:	14 97       	sbiw	r26, 0x04	; 4
    266a:	3f 83       	std	Y+7, r19	; 0x07
    266c:	2e 83       	std	Y+6, r18	; 0x06
    266e:	51 8f       	std	Z+25, r21	; 0x19
    2670:	40 8f       	std	Z+24, r20	; 0x18
    2672:	da 01       	movw	r26, r20
    2674:	8c 91       	ld	r24, X
    2676:	8f 5f       	subi	r24, 0xFF	; 255
    2678:	8c 93       	st	X, r24
    267a:	92 8d       	ldd	r25, Z+26	; 0x1a
    267c:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2680:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2684:	82 8d       	ldd	r24, Z+26	; 0x1a
    2686:	89 17       	cp	r24, r25
    2688:	20 f4       	brcc	.+8      	; 0x2692 <xTaskRemoveFromEventList+0x156>
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	80 93 b7 15 	sts	0x15B7, r24	; 0x8015b7 <xYieldPending>
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <xTaskRemoveFromEventList+0x158>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	08 95       	ret

0000269a <vTaskRemoveFromUnorderedEventList>:
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	dc 01       	movw	r26, r24
    26a0:	70 68       	ori	r23, 0x80	; 128
    26a2:	4d 93       	st	X+, r20
    26a4:	5d 93       	st	X+, r21
    26a6:	6d 93       	st	X+, r22
    26a8:	7c 93       	st	X, r23
    26aa:	13 97       	sbiw	r26, 0x03	; 3
    26ac:	18 96       	adiw	r26, 0x08	; 8
    26ae:	ed 91       	ld	r30, X+
    26b0:	fc 91       	ld	r31, X
    26b2:	19 97       	sbiw	r26, 0x09	; 9
    26b4:	1a 96       	adiw	r26, 0x0a	; 10
    26b6:	4d 91       	ld	r20, X+
    26b8:	5c 91       	ld	r21, X
    26ba:	1b 97       	sbiw	r26, 0x0b	; 11
    26bc:	14 96       	adiw	r26, 0x04	; 4
    26be:	8d 91       	ld	r24, X+
    26c0:	9c 91       	ld	r25, X
    26c2:	15 97       	sbiw	r26, 0x05	; 5
    26c4:	16 96       	adiw	r26, 0x06	; 6
    26c6:	2d 91       	ld	r18, X+
    26c8:	3c 91       	ld	r19, X
    26ca:	17 97       	sbiw	r26, 0x07	; 7
    26cc:	ec 01       	movw	r28, r24
    26ce:	3f 83       	std	Y+7, r19	; 0x07
    26d0:	2e 83       	std	Y+6, r18	; 0x06
    26d2:	16 96       	adiw	r26, 0x06	; 6
    26d4:	8d 91       	ld	r24, X+
    26d6:	9c 91       	ld	r25, X
    26d8:	17 97       	sbiw	r26, 0x07	; 7
    26da:	14 96       	adiw	r26, 0x04	; 4
    26dc:	2d 91       	ld	r18, X+
    26de:	3c 91       	ld	r19, X
    26e0:	15 97       	sbiw	r26, 0x05	; 5
    26e2:	ec 01       	movw	r28, r24
    26e4:	3d 83       	std	Y+5, r19	; 0x05
    26e6:	2c 83       	std	Y+4, r18	; 0x04
    26e8:	ea 01       	movw	r28, r20
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	a8 17       	cp	r26, r24
    26f0:	b9 07       	cpc	r27, r25
    26f2:	31 f4       	brne	.+12     	; 0x2700 <vTaskRemoveFromUnorderedEventList+0x66>
    26f4:	16 96       	adiw	r26, 0x06	; 6
    26f6:	8d 91       	ld	r24, X+
    26f8:	9c 91       	ld	r25, X
    26fa:	17 97       	sbiw	r26, 0x07	; 7
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	1b 96       	adiw	r26, 0x0b	; 11
    2702:	1c 92       	st	X, r1
    2704:	1e 92       	st	-X, r1
    2706:	1a 97       	sbiw	r26, 0x0a	; 10
    2708:	da 01       	movw	r26, r20
    270a:	8c 91       	ld	r24, X
    270c:	81 50       	subi	r24, 0x01	; 1
    270e:	8c 93       	st	X, r24
    2710:	a4 85       	ldd	r26, Z+12	; 0x0c
    2712:	b5 85       	ldd	r27, Z+13	; 0x0d
    2714:	c6 81       	ldd	r28, Z+6	; 0x06
    2716:	d7 81       	ldd	r29, Z+7	; 0x07
    2718:	80 85       	ldd	r24, Z+8	; 0x08
    271a:	91 85       	ldd	r25, Z+9	; 0x09
    271c:	9f 83       	std	Y+7, r25	; 0x07
    271e:	8e 83       	std	Y+6, r24	; 0x06
    2720:	c0 85       	ldd	r28, Z+8	; 0x08
    2722:	d1 85       	ldd	r29, Z+9	; 0x09
    2724:	86 81       	ldd	r24, Z+6	; 0x06
    2726:	97 81       	ldd	r25, Z+7	; 0x07
    2728:	9d 83       	std	Y+5, r25	; 0x05
    272a:	8c 83       	std	Y+4, r24	; 0x04
    272c:	11 96       	adiw	r26, 0x01	; 1
    272e:	8d 91       	ld	r24, X+
    2730:	9c 91       	ld	r25, X
    2732:	12 97       	sbiw	r26, 0x02	; 2
    2734:	9f 01       	movw	r18, r30
    2736:	2e 5f       	subi	r18, 0xFE	; 254
    2738:	3f 4f       	sbci	r19, 0xFF	; 255
    273a:	82 17       	cp	r24, r18
    273c:	93 07       	cpc	r25, r19
    273e:	31 f4       	brne	.+12     	; 0x274c <vTaskRemoveFromUnorderedEventList+0xb2>
    2740:	80 85       	ldd	r24, Z+8	; 0x08
    2742:	91 85       	ldd	r25, Z+9	; 0x09
    2744:	12 96       	adiw	r26, 0x02	; 2
    2746:	9c 93       	st	X, r25
    2748:	8e 93       	st	-X, r24
    274a:	11 97       	sbiw	r26, 0x01	; 1
    274c:	15 86       	std	Z+13, r1	; 0x0d
    274e:	14 86       	std	Z+12, r1	; 0x0c
    2750:	8c 91       	ld	r24, X
    2752:	81 50       	subi	r24, 0x01	; 1
    2754:	8c 93       	st	X, r24
    2756:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2758:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <uxTopReadyPriority>
    275c:	8a 17       	cp	r24, r26
    275e:	10 f4       	brcc	.+4      	; 0x2764 <vTaskRemoveFromUnorderedEventList+0xca>
    2760:	a0 93 bd 15 	sts	0x15BD, r26	; 0x8015bd <uxTopReadyPriority>
    2764:	8b e0       	ldi	r24, 0x0B	; 11
    2766:	8a 9f       	mul	r24, r26
    2768:	d0 01       	movw	r26, r0
    276a:	11 24       	eor	r1, r1
    276c:	a1 50       	subi	r26, 0x01	; 1
    276e:	ba 4e       	sbci	r27, 0xEA	; 234
    2770:	11 96       	adiw	r26, 0x01	; 1
    2772:	0d 90       	ld	r0, X+
    2774:	bc 91       	ld	r27, X
    2776:	a0 2d       	mov	r26, r0
    2778:	b7 83       	std	Z+7, r27	; 0x07
    277a:	a6 83       	std	Z+6, r26	; 0x06
    277c:	16 96       	adiw	r26, 0x06	; 6
    277e:	4d 91       	ld	r20, X+
    2780:	5c 91       	ld	r21, X
    2782:	17 97       	sbiw	r26, 0x07	; 7
    2784:	51 87       	std	Z+9, r21	; 0x09
    2786:	40 87       	std	Z+8, r20	; 0x08
    2788:	16 96       	adiw	r26, 0x06	; 6
    278a:	cd 91       	ld	r28, X+
    278c:	dc 91       	ld	r29, X
    278e:	17 97       	sbiw	r26, 0x07	; 7
    2790:	3d 83       	std	Y+5, r19	; 0x05
    2792:	2c 83       	std	Y+4, r18	; 0x04
    2794:	17 96       	adiw	r26, 0x07	; 7
    2796:	3c 93       	st	X, r19
    2798:	2e 93       	st	-X, r18
    279a:	16 97       	sbiw	r26, 0x06	; 6
    279c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    279e:	8a 9f       	mul	r24, r26
    27a0:	d0 01       	movw	r26, r0
    27a2:	11 24       	eor	r1, r1
    27a4:	a1 50       	subi	r26, 0x01	; 1
    27a6:	ba 4e       	sbci	r27, 0xEA	; 234
    27a8:	b5 87       	std	Z+13, r27	; 0x0d
    27aa:	a4 87       	std	Z+12, r26	; 0x0c
    27ac:	8c 91       	ld	r24, X
    27ae:	8f 5f       	subi	r24, 0xFF	; 255
    27b0:	8c 93       	st	X, r24
    27b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    27b4:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    27b8:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    27bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    27be:	89 17       	cp	r24, r25
    27c0:	18 f4       	brcc	.+6      	; 0x27c8 <vTaskRemoveFromUnorderedEventList+0x12e>
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	80 93 b7 15 	sts	0x15B7, r24	; 0x8015b7 <xYieldPending>
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	08 95       	ret

000027ce <vTaskSetTimeOutState>:
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	0f 92       	push	r0
    27d4:	20 91 b6 15 	lds	r18, 0x15B6	; 0x8015b6 <xNumOfOverflows>
    27d8:	fc 01       	movw	r30, r24
    27da:	20 83       	st	Z, r18
    27dc:	40 91 be 15 	lds	r20, 0x15BE	; 0x8015be <xTickCount>
    27e0:	50 91 bf 15 	lds	r21, 0x15BF	; 0x8015bf <xTickCount+0x1>
    27e4:	60 91 c0 15 	lds	r22, 0x15C0	; 0x8015c0 <xTickCount+0x2>
    27e8:	70 91 c1 15 	lds	r23, 0x15C1	; 0x8015c1 <xTickCount+0x3>
    27ec:	41 83       	std	Z+1, r20	; 0x01
    27ee:	52 83       	std	Z+2, r21	; 0x02
    27f0:	63 83       	std	Z+3, r22	; 0x03
    27f2:	74 83       	std	Z+4, r23	; 0x04
    27f4:	0f 90       	pop	r0
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	08 95       	ret

000027fa <vTaskInternalSetTimeOutState>:
    27fa:	20 91 b6 15 	lds	r18, 0x15B6	; 0x8015b6 <xNumOfOverflows>
    27fe:	fc 01       	movw	r30, r24
    2800:	20 83       	st	Z, r18
    2802:	40 91 be 15 	lds	r20, 0x15BE	; 0x8015be <xTickCount>
    2806:	50 91 bf 15 	lds	r21, 0x15BF	; 0x8015bf <xTickCount+0x1>
    280a:	60 91 c0 15 	lds	r22, 0x15C0	; 0x8015c0 <xTickCount+0x2>
    280e:	70 91 c1 15 	lds	r23, 0x15C1	; 0x8015c1 <xTickCount+0x3>
    2812:	41 83       	std	Z+1, r20	; 0x01
    2814:	52 83       	std	Z+2, r21	; 0x02
    2816:	63 83       	std	Z+3, r22	; 0x03
    2818:	74 83       	std	Z+4, r23	; 0x04
    281a:	08 95       	ret

0000281c <xTaskCheckForTimeOut>:
    281c:	8f 92       	push	r8
    281e:	9f 92       	push	r9
    2820:	af 92       	push	r10
    2822:	bf 92       	push	r11
    2824:	cf 92       	push	r12
    2826:	df 92       	push	r13
    2828:	ef 92       	push	r14
    282a:	ff 92       	push	r15
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	fb 01       	movw	r30, r22
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	0f 92       	push	r0
    283c:	c0 90 be 15 	lds	r12, 0x15BE	; 0x8015be <xTickCount>
    2840:	d0 90 bf 15 	lds	r13, 0x15BF	; 0x8015bf <xTickCount+0x1>
    2844:	e0 90 c0 15 	lds	r14, 0x15C0	; 0x8015c0 <xTickCount+0x2>
    2848:	f0 90 c1 15 	lds	r15, 0x15C1	; 0x8015c1 <xTickCount+0x3>
    284c:	dc 01       	movw	r26, r24
    284e:	11 96       	adiw	r26, 0x01	; 1
    2850:	0d 91       	ld	r16, X+
    2852:	1d 91       	ld	r17, X+
    2854:	2d 91       	ld	r18, X+
    2856:	3c 91       	ld	r19, X
    2858:	14 97       	sbiw	r26, 0x04	; 4
    285a:	46 01       	movw	r8, r12
    285c:	57 01       	movw	r10, r14
    285e:	80 1a       	sub	r8, r16
    2860:	91 0a       	sbc	r9, r17
    2862:	a2 0a       	sbc	r10, r18
    2864:	b3 0a       	sbc	r11, r19
    2866:	40 81       	ld	r20, Z
    2868:	51 81       	ldd	r21, Z+1	; 0x01
    286a:	62 81       	ldd	r22, Z+2	; 0x02
    286c:	73 81       	ldd	r23, Z+3	; 0x03
    286e:	4f 3f       	cpi	r20, 0xFF	; 255
    2870:	bf ef       	ldi	r27, 0xFF	; 255
    2872:	5b 07       	cpc	r21, r27
    2874:	6b 07       	cpc	r22, r27
    2876:	7b 07       	cpc	r23, r27
    2878:	39 f1       	breq	.+78     	; 0x28c8 <xTaskCheckForTimeOut+0xac>
    287a:	ec 01       	movw	r28, r24
    287c:	b8 81       	ld	r27, Y
    287e:	a0 91 b6 15 	lds	r26, 0x15B6	; 0x8015b6 <xNumOfOverflows>
    2882:	ba 17       	cp	r27, r26
    2884:	59 f0       	breq	.+22     	; 0x289c <xTaskCheckForTimeOut+0x80>
    2886:	c0 16       	cp	r12, r16
    2888:	d1 06       	cpc	r13, r17
    288a:	e2 06       	cpc	r14, r18
    288c:	f3 06       	cpc	r15, r19
    288e:	30 f0       	brcs	.+12     	; 0x289c <xTaskCheckForTimeOut+0x80>
    2890:	10 82       	st	Z, r1
    2892:	11 82       	std	Z+1, r1	; 0x01
    2894:	12 82       	std	Z+2, r1	; 0x02
    2896:	13 82       	std	Z+3, r1	; 0x03
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	17 c0       	rjmp	.+46     	; 0x28ca <xTaskCheckForTimeOut+0xae>
    289c:	84 16       	cp	r8, r20
    289e:	95 06       	cpc	r9, r21
    28a0:	a6 06       	cpc	r10, r22
    28a2:	b7 06       	cpc	r11, r23
    28a4:	58 f4       	brcc	.+22     	; 0x28bc <xTaskCheckForTimeOut+0xa0>
    28a6:	48 19       	sub	r20, r8
    28a8:	59 09       	sbc	r21, r9
    28aa:	6a 09       	sbc	r22, r10
    28ac:	7b 09       	sbc	r23, r11
    28ae:	40 83       	st	Z, r20
    28b0:	51 83       	std	Z+1, r21	; 0x01
    28b2:	62 83       	std	Z+2, r22	; 0x02
    28b4:	73 83       	std	Z+3, r23	; 0x03
    28b6:	a1 df       	rcall	.-190    	; 0x27fa <vTaskInternalSetTimeOutState>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	07 c0       	rjmp	.+14     	; 0x28ca <xTaskCheckForTimeOut+0xae>
    28bc:	10 82       	st	Z, r1
    28be:	11 82       	std	Z+1, r1	; 0x01
    28c0:	12 82       	std	Z+2, r1	; 0x02
    28c2:	13 82       	std	Z+3, r1	; 0x03
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <xTaskCheckForTimeOut+0xae>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	0f 90       	pop	r0
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	df 91       	pop	r29
    28d0:	cf 91       	pop	r28
    28d2:	1f 91       	pop	r17
    28d4:	0f 91       	pop	r16
    28d6:	ff 90       	pop	r15
    28d8:	ef 90       	pop	r14
    28da:	df 90       	pop	r13
    28dc:	cf 90       	pop	r12
    28de:	bf 90       	pop	r11
    28e0:	af 90       	pop	r10
    28e2:	9f 90       	pop	r9
    28e4:	8f 90       	pop	r8
    28e6:	08 95       	ret

000028e8 <vTaskMissedYield>:
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	80 93 b7 15 	sts	0x15B7, r24	; 0x8015b7 <xYieldPending>
    28ee:	08 95       	ret

000028f0 <xTaskGetCurrentTaskHandle>:
    28f0:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <pxCurrentTCB>
    28f4:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    28f8:	08 95       	ret

000028fa <xTaskGetSchedulerState>:
    28fa:	80 91 bc 15 	lds	r24, 0x15BC	; 0x8015bc <xSchedulerRunning>
    28fe:	88 23       	and	r24, r24
    2900:	31 f0       	breq	.+12     	; 0x290e <xTaskGetSchedulerState+0x14>
    2902:	80 91 ae 15 	lds	r24, 0x15AE	; 0x8015ae <uxSchedulerSuspended>
    2906:	81 11       	cpse	r24, r1
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <xTaskGetSchedulerState+0x18>
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	08 95       	ret
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	08 95       	ret
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	08 95       	ret

00002916 <xTaskPriorityDisinherit>:
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	fc 01       	movw	r30, r24
    2920:	89 2b       	or	r24, r25
    2922:	09 f4       	brne	.+2      	; 0x2926 <xTaskPriorityDisinherit+0x10>
    2924:	49 c0       	rjmp	.+146    	; 0x29b8 <xTaskPriorityDisinherit+0xa2>
    2926:	86 a5       	ldd	r24, Z+46	; 0x2e
    2928:	81 50       	subi	r24, 0x01	; 1
    292a:	86 a7       	std	Z+46, r24	; 0x2e
    292c:	22 8d       	ldd	r18, Z+26	; 0x1a
    292e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2930:	29 17       	cp	r18, r25
    2932:	09 f4       	brne	.+2      	; 0x2936 <xTaskPriorityDisinherit+0x20>
    2934:	43 c0       	rjmp	.+134    	; 0x29bc <xTaskPriorityDisinherit+0xa6>
    2936:	81 11       	cpse	r24, r1
    2938:	43 c0       	rjmp	.+134    	; 0x29c0 <xTaskPriorityDisinherit+0xaa>
    293a:	ef 01       	movw	r28, r30
    293c:	8f 01       	movw	r16, r30
    293e:	0e 5f       	subi	r16, 0xFE	; 254
    2940:	1f 4f       	sbci	r17, 0xFF	; 255
    2942:	c8 01       	movw	r24, r16
    2944:	0e 94 38 05 	call	0xa70	; 0xa70 <uxListRemove>
    2948:	ed a5       	ldd	r30, Y+45	; 0x2d
    294a:	ea 8f       	std	Y+26, r30	; 0x1a
    294c:	8a e0       	ldi	r24, 0x0A	; 10
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	a0 e0       	ldi	r26, 0x00	; 0
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	8e 1b       	sub	r24, r30
    2956:	91 09       	sbc	r25, r1
    2958:	a1 09       	sbc	r26, r1
    295a:	b1 09       	sbc	r27, r1
    295c:	8e 87       	std	Y+14, r24	; 0x0e
    295e:	9f 87       	std	Y+15, r25	; 0x0f
    2960:	a8 8b       	std	Y+16, r26	; 0x10
    2962:	b9 8b       	std	Y+17, r27	; 0x11
    2964:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <uxTopReadyPriority>
    2968:	8e 17       	cp	r24, r30
    296a:	10 f4       	brcc	.+4      	; 0x2970 <xTaskPriorityDisinherit+0x5a>
    296c:	e0 93 bd 15 	sts	0x15BD, r30	; 0x8015bd <uxTopReadyPriority>
    2970:	8b e0       	ldi	r24, 0x0B	; 11
    2972:	8e 9f       	mul	r24, r30
    2974:	f0 01       	movw	r30, r0
    2976:	11 24       	eor	r1, r1
    2978:	e1 50       	subi	r30, 0x01	; 1
    297a:	fa 4e       	sbci	r31, 0xEA	; 234
    297c:	01 80       	ldd	r0, Z+1	; 0x01
    297e:	f2 81       	ldd	r31, Z+2	; 0x02
    2980:	e0 2d       	mov	r30, r0
    2982:	ff 83       	std	Y+7, r31	; 0x07
    2984:	ee 83       	std	Y+6, r30	; 0x06
    2986:	26 81       	ldd	r18, Z+6	; 0x06
    2988:	37 81       	ldd	r19, Z+7	; 0x07
    298a:	39 87       	std	Y+9, r19	; 0x09
    298c:	28 87       	std	Y+8, r18	; 0x08
    298e:	a6 81       	ldd	r26, Z+6	; 0x06
    2990:	b7 81       	ldd	r27, Z+7	; 0x07
    2992:	15 96       	adiw	r26, 0x05	; 5
    2994:	1c 93       	st	X, r17
    2996:	0e 93       	st	-X, r16
    2998:	14 97       	sbiw	r26, 0x04	; 4
    299a:	17 83       	std	Z+7, r17	; 0x07
    299c:	06 83       	std	Z+6, r16	; 0x06
    299e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    29a0:	8e 9f       	mul	r24, r30
    29a2:	f0 01       	movw	r30, r0
    29a4:	11 24       	eor	r1, r1
    29a6:	e1 50       	subi	r30, 0x01	; 1
    29a8:	fa 4e       	sbci	r31, 0xEA	; 234
    29aa:	fd 87       	std	Y+13, r31	; 0x0d
    29ac:	ec 87       	std	Y+12, r30	; 0x0c
    29ae:	80 81       	ld	r24, Z
    29b0:	8f 5f       	subi	r24, 0xFF	; 255
    29b2:	80 83       	st	Z, r24
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <xTaskPriorityDisinherit+0xac>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	03 c0       	rjmp	.+6      	; 0x29c2 <xTaskPriorityDisinherit+0xac>
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	01 c0       	rjmp	.+2      	; 0x29c2 <xTaskPriorityDisinherit+0xac>
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	08 95       	ret

000029cc <uxTaskResetEventItemValue>:
    29cc:	cf 92       	push	r12
    29ce:	df 92       	push	r13
    29d0:	ef 92       	push	r14
    29d2:	ff 92       	push	r15
    29d4:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    29d8:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    29dc:	66 85       	ldd	r22, Z+14	; 0x0e
    29de:	77 85       	ldd	r23, Z+15	; 0x0f
    29e0:	80 89       	ldd	r24, Z+16	; 0x10
    29e2:	91 89       	ldd	r25, Z+17	; 0x11
    29e4:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    29e8:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    29ec:	a0 91 6d 16 	lds	r26, 0x166D	; 0x80166d <pxCurrentTCB>
    29f0:	b0 91 6e 16 	lds	r27, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    29f4:	5a 96       	adiw	r26, 0x1a	; 26
    29f6:	2c 91       	ld	r18, X
    29f8:	0f 2e       	mov	r0, r31
    29fa:	fa e0       	ldi	r31, 0x0A	; 10
    29fc:	cf 2e       	mov	r12, r31
    29fe:	d1 2c       	mov	r13, r1
    2a00:	e1 2c       	mov	r14, r1
    2a02:	f1 2c       	mov	r15, r1
    2a04:	f0 2d       	mov	r31, r0
    2a06:	c2 1a       	sub	r12, r18
    2a08:	d1 08       	sbc	r13, r1
    2a0a:	e1 08       	sbc	r14, r1
    2a0c:	f1 08       	sbc	r15, r1
    2a0e:	c6 86       	std	Z+14, r12	; 0x0e
    2a10:	d7 86       	std	Z+15, r13	; 0x0f
    2a12:	e0 8a       	std	Z+16, r14	; 0x10
    2a14:	f1 8a       	std	Z+17, r15	; 0x11
    2a16:	ff 90       	pop	r15
    2a18:	ef 90       	pop	r14
    2a1a:	df 90       	pop	r13
    2a1c:	cf 90       	pop	r12
    2a1e:	08 95       	ret

00002a20 <xTaskGenericNotifyWait>:
    2a20:	4f 92       	push	r4
    2a22:	5f 92       	push	r5
    2a24:	6f 92       	push	r6
    2a26:	7f 92       	push	r7
    2a28:	af 92       	push	r10
    2a2a:	bf 92       	push	r11
    2a2c:	cf 92       	push	r12
    2a2e:	df 92       	push	r13
    2a30:	ef 92       	push	r14
    2a32:	ff 92       	push	r15
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	28 01       	movw	r4, r16
    2a3e:	39 01       	movw	r6, r18
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	0f 92       	push	r0
    2a46:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2a4a:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2a4e:	c8 2f       	mov	r28, r24
    2a50:	d0 e0       	ldi	r29, 0x00	; 0
    2a52:	ec 0f       	add	r30, r28
    2a54:	fd 1f       	adc	r31, r29
    2a56:	83 a9       	ldd	r24, Z+51	; 0x33
    2a58:	82 30       	cpi	r24, 0x02	; 2
    2a5a:	71 f1       	breq	.+92     	; 0x2ab8 <xTaskGenericNotifyWait+0x98>
    2a5c:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2a60:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2a64:	ce 01       	movw	r24, r28
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	88 0f       	add	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	e8 0f       	add	r30, r24
    2a70:	f9 1f       	adc	r31, r25
    2a72:	87 a5       	ldd	r24, Z+47	; 0x2f
    2a74:	90 a9       	ldd	r25, Z+48	; 0x30
    2a76:	a1 a9       	ldd	r26, Z+49	; 0x31
    2a78:	b2 a9       	ldd	r27, Z+50	; 0x32
    2a7a:	40 95       	com	r20
    2a7c:	50 95       	com	r21
    2a7e:	60 95       	com	r22
    2a80:	70 95       	com	r23
    2a82:	48 23       	and	r20, r24
    2a84:	59 23       	and	r21, r25
    2a86:	6a 23       	and	r22, r26
    2a88:	7b 23       	and	r23, r27
    2a8a:	47 a7       	std	Z+47, r20	; 0x2f
    2a8c:	50 ab       	std	Z+48, r21	; 0x30
    2a8e:	61 ab       	std	Z+49, r22	; 0x31
    2a90:	72 ab       	std	Z+50, r23	; 0x32
    2a92:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2a96:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2a9a:	ec 0f       	add	r30, r28
    2a9c:	fd 1f       	adc	r31, r29
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	83 ab       	std	Z+51, r24	; 0x33
    2aa2:	a1 14       	cp	r10, r1
    2aa4:	b1 04       	cpc	r11, r1
    2aa6:	c1 04       	cpc	r12, r1
    2aa8:	d1 04       	cpc	r13, r1
    2aaa:	31 f0       	breq	.+12     	; 0x2ab8 <xTaskGenericNotifyWait+0x98>
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	c6 01       	movw	r24, r12
    2ab0:	b5 01       	movw	r22, r10
    2ab2:	7a d8       	rcall	.-3852   	; 0x1ba8 <prvAddCurrentTaskToDelayedList>
    2ab4:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortYield>
    2ab8:	0f 90       	pop	r0
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	0f 92       	push	r0
    2ac2:	e1 14       	cp	r14, r1
    2ac4:	f1 04       	cpc	r15, r1
    2ac6:	a1 f0       	breq	.+40     	; 0x2af0 <xTaskGenericNotifyWait+0xd0>
    2ac8:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2acc:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	e8 0f       	add	r30, r24
    2adc:	f9 1f       	adc	r31, r25
    2ade:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ae0:	90 a9       	ldd	r25, Z+48	; 0x30
    2ae2:	a1 a9       	ldd	r26, Z+49	; 0x31
    2ae4:	b2 a9       	ldd	r27, Z+50	; 0x32
    2ae6:	f7 01       	movw	r30, r14
    2ae8:	80 83       	st	Z, r24
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	a2 83       	std	Z+2, r26	; 0x02
    2aee:	b3 83       	std	Z+3, r27	; 0x03
    2af0:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2af4:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2af8:	ec 0f       	add	r30, r28
    2afa:	fd 1f       	adc	r31, r29
    2afc:	83 a9       	ldd	r24, Z+51	; 0x33
    2afe:	82 30       	cpi	r24, 0x02	; 2
    2b00:	e9 f4       	brne	.+58     	; 0x2b3c <xTaskGenericNotifyWait+0x11c>
    2b02:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2b06:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	88 0f       	add	r24, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	e8 0f       	add	r30, r24
    2b16:	f9 1f       	adc	r31, r25
    2b18:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b1a:	90 a9       	ldd	r25, Z+48	; 0x30
    2b1c:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b1e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b20:	40 94       	com	r4
    2b22:	50 94       	com	r5
    2b24:	60 94       	com	r6
    2b26:	70 94       	com	r7
    2b28:	48 22       	and	r4, r24
    2b2a:	59 22       	and	r5, r25
    2b2c:	6a 22       	and	r6, r26
    2b2e:	7b 22       	and	r7, r27
    2b30:	47 a6       	std	Z+47, r4	; 0x2f
    2b32:	50 aa       	std	Z+48, r5	; 0x30
    2b34:	61 aa       	std	Z+49, r6	; 0x31
    2b36:	72 aa       	std	Z+50, r7	; 0x32
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	01 c0       	rjmp	.+2      	; 0x2b3e <xTaskGenericNotifyWait+0x11e>
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	20 91 6d 16 	lds	r18, 0x166D	; 0x80166d <pxCurrentTCB>
    2b42:	30 91 6e 16 	lds	r19, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2b46:	c2 0f       	add	r28, r18
    2b48:	d3 1f       	adc	r29, r19
    2b4a:	1b aa       	std	Y+51, r1	; 0x33
    2b4c:	0f 90       	pop	r0
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17
    2b56:	0f 91       	pop	r16
    2b58:	ff 90       	pop	r15
    2b5a:	ef 90       	pop	r14
    2b5c:	df 90       	pop	r13
    2b5e:	cf 90       	pop	r12
    2b60:	bf 90       	pop	r11
    2b62:	af 90       	pop	r10
    2b64:	7f 90       	pop	r7
    2b66:	6f 90       	pop	r6
    2b68:	5f 90       	pop	r5
    2b6a:	4f 90       	pop	r4
    2b6c:	08 95       	ret

00002b6e <xTaskGenericNotify>:
    2b6e:	8f 92       	push	r8
    2b70:	9f 92       	push	r9
    2b72:	af 92       	push	r10
    2b74:	bf 92       	push	r11
    2b76:	ef 92       	push	r14
    2b78:	ff 92       	push	r15
    2b7a:	0f 93       	push	r16
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	dc 01       	movw	r26, r24
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	0f 92       	push	r0
    2b88:	e1 14       	cp	r14, r1
    2b8a:	f1 04       	cpc	r15, r1
    2b8c:	89 f0       	breq	.+34     	; 0x2bb0 <xTaskGenericNotify+0x42>
    2b8e:	e6 2f       	mov	r30, r22
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	ee 0f       	add	r30, r30
    2b94:	ff 1f       	adc	r31, r31
    2b96:	ee 0f       	add	r30, r30
    2b98:	ff 1f       	adc	r31, r31
    2b9a:	e8 0f       	add	r30, r24
    2b9c:	f9 1f       	adc	r31, r25
    2b9e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2ba0:	90 a8       	ldd	r9, Z+48	; 0x30
    2ba2:	a1 a8       	ldd	r10, Z+49	; 0x31
    2ba4:	b2 a8       	ldd	r11, Z+50	; 0x32
    2ba6:	f7 01       	movw	r30, r14
    2ba8:	80 82       	st	Z, r8
    2baa:	91 82       	std	Z+1, r9	; 0x01
    2bac:	a2 82       	std	Z+2, r10	; 0x02
    2bae:	b3 82       	std	Z+3, r11	; 0x03
    2bb0:	70 e0       	ldi	r23, 0x00	; 0
    2bb2:	fd 01       	movw	r30, r26
    2bb4:	e6 0f       	add	r30, r22
    2bb6:	f7 1f       	adc	r31, r23
    2bb8:	83 a9       	ldd	r24, Z+51	; 0x33
    2bba:	92 e0       	ldi	r25, 0x02	; 2
    2bbc:	93 ab       	std	Z+51, r25	; 0x33
    2bbe:	02 30       	cpi	r16, 0x02	; 2
    2bc0:	01 f1       	breq	.+64     	; 0x2c02 <xTaskGenericNotify+0x94>
    2bc2:	18 f4       	brcc	.+6      	; 0x2bca <xTaskGenericNotify+0x5c>
    2bc4:	01 30       	cpi	r16, 0x01	; 1
    2bc6:	31 f0       	breq	.+12     	; 0x2bd4 <xTaskGenericNotify+0x66>
    2bc8:	4d c0       	rjmp	.+154    	; 0x2c64 <xTaskGenericNotify+0xf6>
    2bca:	03 30       	cpi	r16, 0x03	; 3
    2bcc:	79 f1       	breq	.+94     	; 0x2c2c <xTaskGenericNotify+0xbe>
    2bce:	04 30       	cpi	r16, 0x04	; 4
    2bd0:	d1 f1       	breq	.+116    	; 0x2c46 <xTaskGenericNotify+0xd8>
    2bd2:	48 c0       	rjmp	.+144    	; 0x2c64 <xTaskGenericNotify+0xf6>
    2bd4:	66 0f       	add	r22, r22
    2bd6:	77 1f       	adc	r23, r23
    2bd8:	66 0f       	add	r22, r22
    2bda:	77 1f       	adc	r23, r23
    2bdc:	fd 01       	movw	r30, r26
    2bde:	e6 0f       	add	r30, r22
    2be0:	f7 1f       	adc	r31, r23
    2be2:	87 a4       	ldd	r8, Z+47	; 0x2f
    2be4:	90 a8       	ldd	r9, Z+48	; 0x30
    2be6:	a1 a8       	ldd	r10, Z+49	; 0x31
    2be8:	b2 a8       	ldd	r11, Z+50	; 0x32
    2bea:	ba 01       	movw	r22, r20
    2bec:	a9 01       	movw	r20, r18
    2bee:	48 29       	or	r20, r8
    2bf0:	59 29       	or	r21, r9
    2bf2:	6a 29       	or	r22, r10
    2bf4:	7b 29       	or	r23, r11
    2bf6:	47 a7       	std	Z+47, r20	; 0x2f
    2bf8:	50 ab       	std	Z+48, r21	; 0x30
    2bfa:	61 ab       	std	Z+49, r22	; 0x31
    2bfc:	72 ab       	std	Z+50, r23	; 0x32
    2bfe:	01 e0       	ldi	r16, 0x01	; 1
    2c00:	34 c0       	rjmp	.+104    	; 0x2c6a <xTaskGenericNotify+0xfc>
    2c02:	66 0f       	add	r22, r22
    2c04:	77 1f       	adc	r23, r23
    2c06:	66 0f       	add	r22, r22
    2c08:	77 1f       	adc	r23, r23
    2c0a:	fd 01       	movw	r30, r26
    2c0c:	e6 0f       	add	r30, r22
    2c0e:	f7 1f       	adc	r31, r23
    2c10:	47 a5       	ldd	r20, Z+47	; 0x2f
    2c12:	50 a9       	ldd	r21, Z+48	; 0x30
    2c14:	61 a9       	ldd	r22, Z+49	; 0x31
    2c16:	72 a9       	ldd	r23, Z+50	; 0x32
    2c18:	4f 5f       	subi	r20, 0xFF	; 255
    2c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c1c:	6f 4f       	sbci	r22, 0xFF	; 255
    2c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c20:	47 a7       	std	Z+47, r20	; 0x2f
    2c22:	50 ab       	std	Z+48, r21	; 0x30
    2c24:	61 ab       	std	Z+49, r22	; 0x31
    2c26:	72 ab       	std	Z+50, r23	; 0x32
    2c28:	01 e0       	ldi	r16, 0x01	; 1
    2c2a:	1f c0       	rjmp	.+62     	; 0x2c6a <xTaskGenericNotify+0xfc>
    2c2c:	66 0f       	add	r22, r22
    2c2e:	77 1f       	adc	r23, r23
    2c30:	66 0f       	add	r22, r22
    2c32:	77 1f       	adc	r23, r23
    2c34:	fd 01       	movw	r30, r26
    2c36:	e6 0f       	add	r30, r22
    2c38:	f7 1f       	adc	r31, r23
    2c3a:	27 a7       	std	Z+47, r18	; 0x2f
    2c3c:	30 ab       	std	Z+48, r19	; 0x30
    2c3e:	41 ab       	std	Z+49, r20	; 0x31
    2c40:	52 ab       	std	Z+50, r21	; 0x32
    2c42:	01 e0       	ldi	r16, 0x01	; 1
    2c44:	12 c0       	rjmp	.+36     	; 0x2c6a <xTaskGenericNotify+0xfc>
    2c46:	82 30       	cpi	r24, 0x02	; 2
    2c48:	79 f0       	breq	.+30     	; 0x2c68 <xTaskGenericNotify+0xfa>
    2c4a:	66 0f       	add	r22, r22
    2c4c:	77 1f       	adc	r23, r23
    2c4e:	66 0f       	add	r22, r22
    2c50:	77 1f       	adc	r23, r23
    2c52:	fd 01       	movw	r30, r26
    2c54:	e6 0f       	add	r30, r22
    2c56:	f7 1f       	adc	r31, r23
    2c58:	27 a7       	std	Z+47, r18	; 0x2f
    2c5a:	30 ab       	std	Z+48, r19	; 0x30
    2c5c:	41 ab       	std	Z+49, r20	; 0x31
    2c5e:	52 ab       	std	Z+50, r21	; 0x32
    2c60:	01 e0       	ldi	r16, 0x01	; 1
    2c62:	03 c0       	rjmp	.+6      	; 0x2c6a <xTaskGenericNotify+0xfc>
    2c64:	01 e0       	ldi	r16, 0x01	; 1
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <xTaskGenericNotify+0xfc>
    2c68:	00 e0       	ldi	r16, 0x00	; 0
    2c6a:	81 30       	cpi	r24, 0x01	; 1
    2c6c:	09 f0       	breq	.+2      	; 0x2c70 <xTaskGenericNotify+0x102>
    2c6e:	69 c0       	rjmp	.+210    	; 0x2d42 <xTaskGenericNotify+0x1d4>
    2c70:	1c 96       	adiw	r26, 0x0c	; 12
    2c72:	ed 91       	ld	r30, X+
    2c74:	fc 91       	ld	r31, X
    2c76:	1d 97       	sbiw	r26, 0x0d	; 13
    2c78:	16 96       	adiw	r26, 0x06	; 6
    2c7a:	cd 91       	ld	r28, X+
    2c7c:	dc 91       	ld	r29, X
    2c7e:	17 97       	sbiw	r26, 0x07	; 7
    2c80:	18 96       	adiw	r26, 0x08	; 8
    2c82:	8d 91       	ld	r24, X+
    2c84:	9c 91       	ld	r25, X
    2c86:	19 97       	sbiw	r26, 0x09	; 9
    2c88:	9f 83       	std	Y+7, r25	; 0x07
    2c8a:	8e 83       	std	Y+6, r24	; 0x06
    2c8c:	18 96       	adiw	r26, 0x08	; 8
    2c8e:	cd 91       	ld	r28, X+
    2c90:	dc 91       	ld	r29, X
    2c92:	19 97       	sbiw	r26, 0x09	; 9
    2c94:	16 96       	adiw	r26, 0x06	; 6
    2c96:	8d 91       	ld	r24, X+
    2c98:	9c 91       	ld	r25, X
    2c9a:	17 97       	sbiw	r26, 0x07	; 7
    2c9c:	9d 83       	std	Y+5, r25	; 0x05
    2c9e:	8c 83       	std	Y+4, r24	; 0x04
    2ca0:	81 81       	ldd	r24, Z+1	; 0x01
    2ca2:	92 81       	ldd	r25, Z+2	; 0x02
    2ca4:	9d 01       	movw	r18, r26
    2ca6:	2e 5f       	subi	r18, 0xFE	; 254
    2ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    2caa:	82 17       	cp	r24, r18
    2cac:	93 07       	cpc	r25, r19
    2cae:	31 f4       	brne	.+12     	; 0x2cbc <xTaskGenericNotify+0x14e>
    2cb0:	18 96       	adiw	r26, 0x08	; 8
    2cb2:	8d 91       	ld	r24, X+
    2cb4:	9c 91       	ld	r25, X
    2cb6:	19 97       	sbiw	r26, 0x09	; 9
    2cb8:	92 83       	std	Z+2, r25	; 0x02
    2cba:	81 83       	std	Z+1, r24	; 0x01
    2cbc:	1d 96       	adiw	r26, 0x0d	; 13
    2cbe:	1c 92       	st	X, r1
    2cc0:	1e 92       	st	-X, r1
    2cc2:	1c 97       	sbiw	r26, 0x0c	; 12
    2cc4:	80 81       	ld	r24, Z
    2cc6:	81 50       	subi	r24, 0x01	; 1
    2cc8:	80 83       	st	Z, r24
    2cca:	5a 96       	adiw	r26, 0x1a	; 26
    2ccc:	ec 91       	ld	r30, X
    2cce:	5a 97       	sbiw	r26, 0x1a	; 26
    2cd0:	80 91 bd 15 	lds	r24, 0x15BD	; 0x8015bd <uxTopReadyPriority>
    2cd4:	8e 17       	cp	r24, r30
    2cd6:	10 f4       	brcc	.+4      	; 0x2cdc <xTaskGenericNotify+0x16e>
    2cd8:	e0 93 bd 15 	sts	0x15BD, r30	; 0x8015bd <uxTopReadyPriority>
    2cdc:	8b e0       	ldi	r24, 0x0B	; 11
    2cde:	8e 9f       	mul	r24, r30
    2ce0:	f0 01       	movw	r30, r0
    2ce2:	11 24       	eor	r1, r1
    2ce4:	e1 50       	subi	r30, 0x01	; 1
    2ce6:	fa 4e       	sbci	r31, 0xEA	; 234
    2ce8:	01 80       	ldd	r0, Z+1	; 0x01
    2cea:	f2 81       	ldd	r31, Z+2	; 0x02
    2cec:	e0 2d       	mov	r30, r0
    2cee:	17 96       	adiw	r26, 0x07	; 7
    2cf0:	fc 93       	st	X, r31
    2cf2:	ee 93       	st	-X, r30
    2cf4:	16 97       	sbiw	r26, 0x06	; 6
    2cf6:	46 81       	ldd	r20, Z+6	; 0x06
    2cf8:	57 81       	ldd	r21, Z+7	; 0x07
    2cfa:	19 96       	adiw	r26, 0x09	; 9
    2cfc:	5c 93       	st	X, r21
    2cfe:	4e 93       	st	-X, r20
    2d00:	18 97       	sbiw	r26, 0x08	; 8
    2d02:	c6 81       	ldd	r28, Z+6	; 0x06
    2d04:	d7 81       	ldd	r29, Z+7	; 0x07
    2d06:	3d 83       	std	Y+5, r19	; 0x05
    2d08:	2c 83       	std	Y+4, r18	; 0x04
    2d0a:	37 83       	std	Z+7, r19	; 0x07
    2d0c:	26 83       	std	Z+6, r18	; 0x06
    2d0e:	5a 96       	adiw	r26, 0x1a	; 26
    2d10:	ec 91       	ld	r30, X
    2d12:	5a 97       	sbiw	r26, 0x1a	; 26
    2d14:	8e 9f       	mul	r24, r30
    2d16:	f0 01       	movw	r30, r0
    2d18:	11 24       	eor	r1, r1
    2d1a:	e1 50       	subi	r30, 0x01	; 1
    2d1c:	fa 4e       	sbci	r31, 0xEA	; 234
    2d1e:	1d 96       	adiw	r26, 0x0d	; 13
    2d20:	fc 93       	st	X, r31
    2d22:	ee 93       	st	-X, r30
    2d24:	1c 97       	sbiw	r26, 0x0c	; 12
    2d26:	80 81       	ld	r24, Z
    2d28:	8f 5f       	subi	r24, 0xFF	; 255
    2d2a:	80 83       	st	Z, r24
    2d2c:	5a 96       	adiw	r26, 0x1a	; 26
    2d2e:	9c 91       	ld	r25, X
    2d30:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2d34:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2d38:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d3a:	89 17       	cp	r24, r25
    2d3c:	10 f4       	brcc	.+4      	; 0x2d42 <xTaskGenericNotify+0x1d4>
    2d3e:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortYield>
    2d42:	0f 90       	pop	r0
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	80 2f       	mov	r24, r16
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	0f 91       	pop	r16
    2d4e:	ff 90       	pop	r15
    2d50:	ef 90       	pop	r14
    2d52:	bf 90       	pop	r11
    2d54:	af 90       	pop	r10
    2d56:	9f 90       	pop	r9
    2d58:	8f 90       	pop	r8
    2d5a:	08 95       	ret

00002d5c <xTaskGenericNotifyFromISR>:
    2d5c:	8f 92       	push	r8
    2d5e:	9f 92       	push	r9
    2d60:	af 92       	push	r10
    2d62:	bf 92       	push	r11
    2d64:	cf 92       	push	r12
    2d66:	df 92       	push	r13
    2d68:	ef 92       	push	r14
    2d6a:	ff 92       	push	r15
    2d6c:	0f 93       	push	r16
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	dc 01       	movw	r26, r24
    2d74:	e1 14       	cp	r14, r1
    2d76:	f1 04       	cpc	r15, r1
    2d78:	89 f0       	breq	.+34     	; 0x2d9c <xTaskGenericNotifyFromISR+0x40>
    2d7a:	e6 2f       	mov	r30, r22
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	ee 0f       	add	r30, r30
    2d80:	ff 1f       	adc	r31, r31
    2d82:	ee 0f       	add	r30, r30
    2d84:	ff 1f       	adc	r31, r31
    2d86:	e8 0f       	add	r30, r24
    2d88:	f9 1f       	adc	r31, r25
    2d8a:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d8c:	90 a8       	ldd	r9, Z+48	; 0x30
    2d8e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d90:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d92:	f7 01       	movw	r30, r14
    2d94:	80 82       	st	Z, r8
    2d96:	91 82       	std	Z+1, r9	; 0x01
    2d98:	a2 82       	std	Z+2, r10	; 0x02
    2d9a:	b3 82       	std	Z+3, r11	; 0x03
    2d9c:	70 e0       	ldi	r23, 0x00	; 0
    2d9e:	fd 01       	movw	r30, r26
    2da0:	e6 0f       	add	r30, r22
    2da2:	f7 1f       	adc	r31, r23
    2da4:	93 a9       	ldd	r25, Z+51	; 0x33
    2da6:	82 e0       	ldi	r24, 0x02	; 2
    2da8:	83 ab       	std	Z+51, r24	; 0x33
    2daa:	02 30       	cpi	r16, 0x02	; 2
    2dac:	01 f1       	breq	.+64     	; 0x2dee <xTaskGenericNotifyFromISR+0x92>
    2dae:	18 f4       	brcc	.+6      	; 0x2db6 <xTaskGenericNotifyFromISR+0x5a>
    2db0:	01 30       	cpi	r16, 0x01	; 1
    2db2:	31 f0       	breq	.+12     	; 0x2dc0 <xTaskGenericNotifyFromISR+0x64>
    2db4:	4d c0       	rjmp	.+154    	; 0x2e50 <xTaskGenericNotifyFromISR+0xf4>
    2db6:	03 30       	cpi	r16, 0x03	; 3
    2db8:	79 f1       	breq	.+94     	; 0x2e18 <xTaskGenericNotifyFromISR+0xbc>
    2dba:	04 30       	cpi	r16, 0x04	; 4
    2dbc:	d1 f1       	breq	.+116    	; 0x2e32 <xTaskGenericNotifyFromISR+0xd6>
    2dbe:	48 c0       	rjmp	.+144    	; 0x2e50 <xTaskGenericNotifyFromISR+0xf4>
    2dc0:	66 0f       	add	r22, r22
    2dc2:	77 1f       	adc	r23, r23
    2dc4:	66 0f       	add	r22, r22
    2dc6:	77 1f       	adc	r23, r23
    2dc8:	fd 01       	movw	r30, r26
    2dca:	e6 0f       	add	r30, r22
    2dcc:	f7 1f       	adc	r31, r23
    2dce:	87 a4       	ldd	r8, Z+47	; 0x2f
    2dd0:	90 a8       	ldd	r9, Z+48	; 0x30
    2dd2:	a1 a8       	ldd	r10, Z+49	; 0x31
    2dd4:	b2 a8       	ldd	r11, Z+50	; 0x32
    2dd6:	ba 01       	movw	r22, r20
    2dd8:	a9 01       	movw	r20, r18
    2dda:	48 29       	or	r20, r8
    2ddc:	59 29       	or	r21, r9
    2dde:	6a 29       	or	r22, r10
    2de0:	7b 29       	or	r23, r11
    2de2:	47 a7       	std	Z+47, r20	; 0x2f
    2de4:	50 ab       	std	Z+48, r21	; 0x30
    2de6:	61 ab       	std	Z+49, r22	; 0x31
    2de8:	72 ab       	std	Z+50, r23	; 0x32
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	34 c0       	rjmp	.+104    	; 0x2e56 <xTaskGenericNotifyFromISR+0xfa>
    2dee:	66 0f       	add	r22, r22
    2df0:	77 1f       	adc	r23, r23
    2df2:	66 0f       	add	r22, r22
    2df4:	77 1f       	adc	r23, r23
    2df6:	fd 01       	movw	r30, r26
    2df8:	e6 0f       	add	r30, r22
    2dfa:	f7 1f       	adc	r31, r23
    2dfc:	47 a5       	ldd	r20, Z+47	; 0x2f
    2dfe:	50 a9       	ldd	r21, Z+48	; 0x30
    2e00:	61 a9       	ldd	r22, Z+49	; 0x31
    2e02:	72 a9       	ldd	r23, Z+50	; 0x32
    2e04:	4f 5f       	subi	r20, 0xFF	; 255
    2e06:	5f 4f       	sbci	r21, 0xFF	; 255
    2e08:	6f 4f       	sbci	r22, 0xFF	; 255
    2e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0c:	47 a7       	std	Z+47, r20	; 0x2f
    2e0e:	50 ab       	std	Z+48, r21	; 0x30
    2e10:	61 ab       	std	Z+49, r22	; 0x31
    2e12:	72 ab       	std	Z+50, r23	; 0x32
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	1f c0       	rjmp	.+62     	; 0x2e56 <xTaskGenericNotifyFromISR+0xfa>
    2e18:	66 0f       	add	r22, r22
    2e1a:	77 1f       	adc	r23, r23
    2e1c:	66 0f       	add	r22, r22
    2e1e:	77 1f       	adc	r23, r23
    2e20:	fd 01       	movw	r30, r26
    2e22:	e6 0f       	add	r30, r22
    2e24:	f7 1f       	adc	r31, r23
    2e26:	27 a7       	std	Z+47, r18	; 0x2f
    2e28:	30 ab       	std	Z+48, r19	; 0x30
    2e2a:	41 ab       	std	Z+49, r20	; 0x31
    2e2c:	52 ab       	std	Z+50, r21	; 0x32
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	12 c0       	rjmp	.+36     	; 0x2e56 <xTaskGenericNotifyFromISR+0xfa>
    2e32:	92 30       	cpi	r25, 0x02	; 2
    2e34:	79 f0       	breq	.+30     	; 0x2e54 <xTaskGenericNotifyFromISR+0xf8>
    2e36:	66 0f       	add	r22, r22
    2e38:	77 1f       	adc	r23, r23
    2e3a:	66 0f       	add	r22, r22
    2e3c:	77 1f       	adc	r23, r23
    2e3e:	fd 01       	movw	r30, r26
    2e40:	e6 0f       	add	r30, r22
    2e42:	f7 1f       	adc	r31, r23
    2e44:	27 a7       	std	Z+47, r18	; 0x2f
    2e46:	30 ab       	std	Z+48, r19	; 0x30
    2e48:	41 ab       	std	Z+49, r20	; 0x31
    2e4a:	52 ab       	std	Z+50, r21	; 0x32
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	03 c0       	rjmp	.+6      	; 0x2e56 <xTaskGenericNotifyFromISR+0xfa>
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <xTaskGenericNotifyFromISR+0xfa>
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	91 30       	cpi	r25, 0x01	; 1
    2e58:	09 f0       	breq	.+2      	; 0x2e5c <xTaskGenericNotifyFromISR+0x100>
    2e5a:	96 c0       	rjmp	.+300    	; 0x2f88 <xTaskGenericNotifyFromISR+0x22c>
    2e5c:	90 91 ae 15 	lds	r25, 0x15AE	; 0x8015ae <uxSchedulerSuspended>
    2e60:	91 11       	cpse	r25, r1
    2e62:	5f c0       	rjmp	.+190    	; 0x2f22 <xTaskGenericNotifyFromISR+0x1c6>
    2e64:	1c 96       	adiw	r26, 0x0c	; 12
    2e66:	ed 91       	ld	r30, X+
    2e68:	fc 91       	ld	r31, X
    2e6a:	1d 97       	sbiw	r26, 0x0d	; 13
    2e6c:	16 96       	adiw	r26, 0x06	; 6
    2e6e:	cd 91       	ld	r28, X+
    2e70:	dc 91       	ld	r29, X
    2e72:	17 97       	sbiw	r26, 0x07	; 7
    2e74:	18 96       	adiw	r26, 0x08	; 8
    2e76:	2d 91       	ld	r18, X+
    2e78:	3c 91       	ld	r19, X
    2e7a:	19 97       	sbiw	r26, 0x09	; 9
    2e7c:	3f 83       	std	Y+7, r19	; 0x07
    2e7e:	2e 83       	std	Y+6, r18	; 0x06
    2e80:	18 96       	adiw	r26, 0x08	; 8
    2e82:	cd 91       	ld	r28, X+
    2e84:	dc 91       	ld	r29, X
    2e86:	19 97       	sbiw	r26, 0x09	; 9
    2e88:	16 96       	adiw	r26, 0x06	; 6
    2e8a:	2d 91       	ld	r18, X+
    2e8c:	3c 91       	ld	r19, X
    2e8e:	17 97       	sbiw	r26, 0x07	; 7
    2e90:	3d 83       	std	Y+5, r19	; 0x05
    2e92:	2c 83       	std	Y+4, r18	; 0x04
    2e94:	41 81       	ldd	r20, Z+1	; 0x01
    2e96:	52 81       	ldd	r21, Z+2	; 0x02
    2e98:	9d 01       	movw	r18, r26
    2e9a:	2e 5f       	subi	r18, 0xFE	; 254
    2e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9e:	42 17       	cp	r20, r18
    2ea0:	53 07       	cpc	r21, r19
    2ea2:	31 f4       	brne	.+12     	; 0x2eb0 <xTaskGenericNotifyFromISR+0x154>
    2ea4:	18 96       	adiw	r26, 0x08	; 8
    2ea6:	4d 91       	ld	r20, X+
    2ea8:	5c 91       	ld	r21, X
    2eaa:	19 97       	sbiw	r26, 0x09	; 9
    2eac:	52 83       	std	Z+2, r21	; 0x02
    2eae:	41 83       	std	Z+1, r20	; 0x01
    2eb0:	1d 96       	adiw	r26, 0x0d	; 13
    2eb2:	1c 92       	st	X, r1
    2eb4:	1e 92       	st	-X, r1
    2eb6:	1c 97       	sbiw	r26, 0x0c	; 12
    2eb8:	90 81       	ld	r25, Z
    2eba:	91 50       	subi	r25, 0x01	; 1
    2ebc:	90 83       	st	Z, r25
    2ebe:	5a 96       	adiw	r26, 0x1a	; 26
    2ec0:	ec 91       	ld	r30, X
    2ec2:	5a 97       	sbiw	r26, 0x1a	; 26
    2ec4:	90 91 bd 15 	lds	r25, 0x15BD	; 0x8015bd <uxTopReadyPriority>
    2ec8:	9e 17       	cp	r25, r30
    2eca:	10 f4       	brcc	.+4      	; 0x2ed0 <xTaskGenericNotifyFromISR+0x174>
    2ecc:	e0 93 bd 15 	sts	0x15BD, r30	; 0x8015bd <uxTopReadyPriority>
    2ed0:	9b e0       	ldi	r25, 0x0B	; 11
    2ed2:	9e 9f       	mul	r25, r30
    2ed4:	f0 01       	movw	r30, r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	e1 50       	subi	r30, 0x01	; 1
    2eda:	fa 4e       	sbci	r31, 0xEA	; 234
    2edc:	01 80       	ldd	r0, Z+1	; 0x01
    2ede:	f2 81       	ldd	r31, Z+2	; 0x02
    2ee0:	e0 2d       	mov	r30, r0
    2ee2:	17 96       	adiw	r26, 0x07	; 7
    2ee4:	fc 93       	st	X, r31
    2ee6:	ee 93       	st	-X, r30
    2ee8:	16 97       	sbiw	r26, 0x06	; 6
    2eea:	46 81       	ldd	r20, Z+6	; 0x06
    2eec:	57 81       	ldd	r21, Z+7	; 0x07
    2eee:	19 96       	adiw	r26, 0x09	; 9
    2ef0:	5c 93       	st	X, r21
    2ef2:	4e 93       	st	-X, r20
    2ef4:	18 97       	sbiw	r26, 0x08	; 8
    2ef6:	c6 81       	ldd	r28, Z+6	; 0x06
    2ef8:	d7 81       	ldd	r29, Z+7	; 0x07
    2efa:	3d 83       	std	Y+5, r19	; 0x05
    2efc:	2c 83       	std	Y+4, r18	; 0x04
    2efe:	37 83       	std	Z+7, r19	; 0x07
    2f00:	26 83       	std	Z+6, r18	; 0x06
    2f02:	5a 96       	adiw	r26, 0x1a	; 26
    2f04:	ec 91       	ld	r30, X
    2f06:	5a 97       	sbiw	r26, 0x1a	; 26
    2f08:	9e 9f       	mul	r25, r30
    2f0a:	f0 01       	movw	r30, r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	e1 50       	subi	r30, 0x01	; 1
    2f10:	fa 4e       	sbci	r31, 0xEA	; 234
    2f12:	1d 96       	adiw	r26, 0x0d	; 13
    2f14:	fc 93       	st	X, r31
    2f16:	ee 93       	st	-X, r30
    2f18:	1c 97       	sbiw	r26, 0x0c	; 12
    2f1a:	90 81       	ld	r25, Z
    2f1c:	9f 5f       	subi	r25, 0xFF	; 255
    2f1e:	90 83       	st	Z, r25
    2f20:	21 c0       	rjmp	.+66     	; 0x2f64 <xTaskGenericNotifyFromISR+0x208>
    2f22:	6a ed       	ldi	r22, 0xDA	; 218
    2f24:	75 e1       	ldi	r23, 0x15	; 21
    2f26:	fb 01       	movw	r30, r22
    2f28:	c1 81       	ldd	r28, Z+1	; 0x01
    2f2a:	d2 81       	ldd	r29, Z+2	; 0x02
    2f2c:	53 96       	adiw	r26, 0x13	; 19
    2f2e:	dc 93       	st	X, r29
    2f30:	ce 93       	st	-X, r28
    2f32:	52 97       	sbiw	r26, 0x12	; 18
    2f34:	2e 81       	ldd	r18, Y+6	; 0x06
    2f36:	3f 81       	ldd	r19, Y+7	; 0x07
    2f38:	55 96       	adiw	r26, 0x15	; 21
    2f3a:	3c 93       	st	X, r19
    2f3c:	2e 93       	st	-X, r18
    2f3e:	54 97       	sbiw	r26, 0x14	; 20
    2f40:	4e 81       	ldd	r20, Y+6	; 0x06
    2f42:	5f 81       	ldd	r21, Y+7	; 0x07
    2f44:	9d 01       	movw	r18, r26
    2f46:	22 5f       	subi	r18, 0xF2	; 242
    2f48:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4a:	fa 01       	movw	r30, r20
    2f4c:	35 83       	std	Z+5, r19	; 0x05
    2f4e:	24 83       	std	Z+4, r18	; 0x04
    2f50:	3f 83       	std	Y+7, r19	; 0x07
    2f52:	2e 83       	std	Y+6, r18	; 0x06
    2f54:	59 96       	adiw	r26, 0x19	; 25
    2f56:	7c 93       	st	X, r23
    2f58:	6e 93       	st	-X, r22
    2f5a:	58 97       	sbiw	r26, 0x18	; 24
    2f5c:	fb 01       	movw	r30, r22
    2f5e:	90 81       	ld	r25, Z
    2f60:	9f 5f       	subi	r25, 0xFF	; 255
    2f62:	90 83       	st	Z, r25
    2f64:	5a 96       	adiw	r26, 0x1a	; 26
    2f66:	2c 91       	ld	r18, X
    2f68:	e0 91 6d 16 	lds	r30, 0x166D	; 0x80166d <pxCurrentTCB>
    2f6c:	f0 91 6e 16 	lds	r31, 0x166E	; 0x80166e <pxCurrentTCB+0x1>
    2f70:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f72:	92 17       	cp	r25, r18
    2f74:	48 f4       	brcc	.+18     	; 0x2f88 <xTaskGenericNotifyFromISR+0x22c>
    2f76:	c1 14       	cp	r12, r1
    2f78:	d1 04       	cpc	r13, r1
    2f7a:	19 f0       	breq	.+6      	; 0x2f82 <xTaskGenericNotifyFromISR+0x226>
    2f7c:	91 e0       	ldi	r25, 0x01	; 1
    2f7e:	f6 01       	movw	r30, r12
    2f80:	90 83       	st	Z, r25
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	90 93 b7 15 	sts	0x15B7, r25	; 0x8015b7 <xYieldPending>
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	0f 91       	pop	r16
    2f8e:	ff 90       	pop	r15
    2f90:	ef 90       	pop	r14
    2f92:	df 90       	pop	r13
    2f94:	cf 90       	pop	r12
    2f96:	bf 90       	pop	r11
    2f98:	af 90       	pop	r10
    2f9a:	9f 90       	pop	r9
    2f9c:	8f 90       	pop	r8
    2f9e:	08 95       	ret

00002fa0 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	21 f4       	brne	.+8      	; 0x2fac <xTaskGenericNotifyStateClear+0xc>
    2fa4:	80 91 6d 16 	lds	r24, 0x166D	; 0x80166d <pxCurrentTCB>
    2fa8:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	e6 0f       	add	r30, r22
    2fb8:	f7 1f       	adc	r31, r23
    2fba:	23 a9       	ldd	r18, Z+51	; 0x33
    2fbc:	22 30       	cpi	r18, 0x02	; 2
    2fbe:	31 f4       	brne	.+12     	; 0x2fcc <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	e6 0f       	add	r30, r22
    2fc4:	f7 1f       	adc	r31, r23
    2fc6:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	01 c0       	rjmp	.+2      	; 0x2fce <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2fce:	0f 90       	pop	r0
    2fd0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2fd2:	08 95       	ret

00002fd4 <prvGetNextExpireTime>:
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	e0 91 79 16 	lds	r30, 0x1679	; 0x801679 <pxCurrentTimerList>
    2fda:	f0 91 7a 16 	lds	r31, 0x167A	; 0x80167a <pxCurrentTimerList+0x1>
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 e0       	ldi	r25, 0x01	; 1
    2fe2:	81 11       	cpse	r24, r1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	9c 93       	st	X, r25
    2fe8:	91 11       	cpse	r25, r1
    2fea:	08 c0       	rjmp	.+16     	; 0x2ffc <prvGetNextExpireTime+0x28>
    2fec:	07 80       	ldd	r0, Z+7	; 0x07
    2fee:	f0 85       	ldd	r31, Z+8	; 0x08
    2ff0:	e0 2d       	mov	r30, r0
    2ff2:	60 81       	ld	r22, Z
    2ff4:	71 81       	ldd	r23, Z+1	; 0x01
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	08 95       	ret
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	cb 01       	movw	r24, r22
    3002:	08 95       	ret

00003004 <prvInsertTimerInActiveList>:
    3004:	cf 92       	push	r12
    3006:	df 92       	push	r13
    3008:	ef 92       	push	r14
    300a:	ff 92       	push	r15
    300c:	0f 93       	push	r16
    300e:	1f 93       	push	r17
    3010:	fc 01       	movw	r30, r24
    3012:	42 83       	std	Z+2, r20	; 0x02
    3014:	53 83       	std	Z+3, r21	; 0x03
    3016:	64 83       	std	Z+4, r22	; 0x04
    3018:	75 83       	std	Z+5, r23	; 0x05
    301a:	93 87       	std	Z+11, r25	; 0x0b
    301c:	82 87       	std	Z+10, r24	; 0x0a
    301e:	04 17       	cp	r16, r20
    3020:	15 07       	cpc	r17, r21
    3022:	26 07       	cpc	r18, r22
    3024:	37 07       	cpc	r19, r23
    3026:	c0 f0       	brcs	.+48     	; 0x3058 <prvInsertTimerInActiveList+0x54>
    3028:	0c 19       	sub	r16, r12
    302a:	1d 09       	sbc	r17, r13
    302c:	2e 09       	sbc	r18, r14
    302e:	3f 09       	sbc	r19, r15
    3030:	86 85       	ldd	r24, Z+14	; 0x0e
    3032:	97 85       	ldd	r25, Z+15	; 0x0f
    3034:	a0 89       	ldd	r26, Z+16	; 0x10
    3036:	b1 89       	ldd	r27, Z+17	; 0x11
    3038:	08 17       	cp	r16, r24
    303a:	19 07       	cpc	r17, r25
    303c:	2a 07       	cpc	r18, r26
    303e:	3b 07       	cpc	r19, r27
    3040:	00 f5       	brcc	.+64     	; 0x3082 <prvInsertTimerInActiveList+0x7e>
    3042:	bf 01       	movw	r22, r30
    3044:	6e 5f       	subi	r22, 0xFE	; 254
    3046:	7f 4f       	sbci	r23, 0xFF	; 255
    3048:	80 91 77 16 	lds	r24, 0x1677	; 0x801677 <pxOverflowTimerList>
    304c:	90 91 78 16 	lds	r25, 0x1678	; 0x801678 <pxOverflowTimerList+0x1>
    3050:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <vListInsert>
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	18 c0       	rjmp	.+48     	; 0x3088 <prvInsertTimerInActiveList+0x84>
    3058:	0c 15       	cp	r16, r12
    305a:	1d 05       	cpc	r17, r13
    305c:	2e 05       	cpc	r18, r14
    305e:	3f 05       	cpc	r19, r15
    3060:	28 f4       	brcc	.+10     	; 0x306c <prvInsertTimerInActiveList+0x68>
    3062:	4c 15       	cp	r20, r12
    3064:	5d 05       	cpc	r21, r13
    3066:	6e 05       	cpc	r22, r14
    3068:	7f 05       	cpc	r23, r15
    306a:	68 f4       	brcc	.+26     	; 0x3086 <prvInsertTimerInActiveList+0x82>
    306c:	bf 01       	movw	r22, r30
    306e:	6e 5f       	subi	r22, 0xFE	; 254
    3070:	7f 4f       	sbci	r23, 0xFF	; 255
    3072:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <pxCurrentTimerList>
    3076:	90 91 7a 16 	lds	r25, 0x167A	; 0x80167a <pxCurrentTimerList+0x1>
    307a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <vListInsert>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	03 c0       	rjmp	.+6      	; 0x3088 <prvInsertTimerInActiveList+0x84>
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <prvInsertTimerInActiveList+0x84>
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	1f 91       	pop	r17
    308a:	0f 91       	pop	r16
    308c:	ff 90       	pop	r15
    308e:	ef 90       	pop	r14
    3090:	df 90       	pop	r13
    3092:	cf 90       	pop	r12
    3094:	08 95       	ret

00003096 <prvCheckForValidListAndQueue>:
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	0f 92       	push	r0
    309c:	80 91 75 16 	lds	r24, 0x1675	; 0x801675 <xTimerQueue>
    30a0:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <xTimerQueue+0x1>
    30a4:	89 2b       	or	r24, r25
    30a6:	e9 f4       	brne	.+58     	; 0x30e2 <prvCheckForValidListAndQueue+0x4c>
    30a8:	86 e8       	ldi	r24, 0x86	; 134
    30aa:	96 e1       	ldi	r25, 0x16	; 22
    30ac:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vListInitialise>
    30b0:	8b e7       	ldi	r24, 0x7B	; 123
    30b2:	96 e1       	ldi	r25, 0x16	; 22
    30b4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vListInitialise>
    30b8:	86 e8       	ldi	r24, 0x86	; 134
    30ba:	96 e1       	ldi	r25, 0x16	; 22
    30bc:	90 93 7a 16 	sts	0x167A, r25	; 0x80167a <pxCurrentTimerList+0x1>
    30c0:	80 93 79 16 	sts	0x1679, r24	; 0x801679 <pxCurrentTimerList>
    30c4:	8b e7       	ldi	r24, 0x7B	; 123
    30c6:	96 e1       	ldi	r25, 0x16	; 22
    30c8:	90 93 78 16 	sts	0x1678, r25	; 0x801678 <pxOverflowTimerList+0x1>
    30cc:	80 93 77 16 	sts	0x1677, r24	; 0x801677 <pxOverflowTimerList>
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	67 e0       	ldi	r22, 0x07	; 7
    30d4:	8a e0       	ldi	r24, 0x0A	; 10
    30d6:	0e 94 99 07 	call	0xf32	; 0xf32 <xQueueGenericCreate>
    30da:	90 93 76 16 	sts	0x1676, r25	; 0x801676 <xTimerQueue+0x1>
    30de:	80 93 75 16 	sts	0x1675, r24	; 0x801675 <xTimerQueue>
    30e2:	0f 90       	pop	r0
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	08 95       	ret

000030e8 <xTimerCreateTimerTask>:
    30e8:	ef 92       	push	r14
    30ea:	ff 92       	push	r15
    30ec:	0f 93       	push	r16
    30ee:	d3 df       	rcall	.-90     	; 0x3096 <prvCheckForValidListAndQueue>
    30f0:	80 91 75 16 	lds	r24, 0x1675	; 0x801675 <xTimerQueue>
    30f4:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <xTimerQueue+0x1>
    30f8:	89 2b       	or	r24, r25
    30fa:	91 f0       	breq	.+36     	; 0x3120 <xTimerCreateTimerTask+0x38>
    30fc:	0f 2e       	mov	r0, r31
    30fe:	f3 e7       	ldi	r31, 0x73	; 115
    3100:	ef 2e       	mov	r14, r31
    3102:	f6 e1       	ldi	r31, 0x16	; 22
    3104:	ff 2e       	mov	r15, r31
    3106:	f0 2d       	mov	r31, r0
    3108:	03 e0       	ldi	r16, 0x03	; 3
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 ec       	ldi	r20, 0xC0	; 192
    3110:	50 e0       	ldi	r21, 0x00	; 0
    3112:	68 ea       	ldi	r22, 0xA8	; 168
    3114:	72 e0       	ldi	r23, 0x02	; 2
    3116:	88 e5       	ldi	r24, 0x58	; 88
    3118:	91 e0       	ldi	r25, 0x01	; 1
    311a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <xTaskCreate>
    311e:	01 c0       	rjmp	.+2      	; 0x3122 <xTimerCreateTimerTask+0x3a>
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	0f 91       	pop	r16
    3124:	ff 90       	pop	r15
    3126:	ef 90       	pop	r14
    3128:	08 95       	ret

0000312a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    312a:	8f 92       	push	r8
    312c:	9f 92       	push	r9
    312e:	af 92       	push	r10
    3130:	bf 92       	push	r11
    3132:	cf 92       	push	r12
    3134:	df 92       	push	r13
    3136:	ef 92       	push	r14
    3138:	ff 92       	push	r15
    313a:	0f 93       	push	r16
    313c:	1f 93       	push	r17
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	27 97       	sbiw	r28, 0x07	; 7
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3152:	e0 91 75 16 	lds	r30, 0x1675	; 0x801675 <xTimerQueue>
    3156:	f0 91 76 16 	lds	r31, 0x1676	; 0x801676 <xTimerQueue+0x1>
    315a:	30 97       	sbiw	r30, 0x00	; 0
    315c:	81 f1       	breq	.+96     	; 0x31be <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    315e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3160:	2a 83       	std	Y+2, r18	; 0x02
    3162:	3b 83       	std	Y+3, r19	; 0x03
    3164:	4c 83       	std	Y+4, r20	; 0x04
    3166:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3168:	9f 83       	std	Y+7, r25	; 0x07
    316a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    316c:	66 30       	cpi	r22, 0x06	; 6
    316e:	f4 f4       	brge	.+60     	; 0x31ac <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3170:	c4 db       	rcall	.-2168   	; 0x28fa <xTaskGetSchedulerState>
    3172:	82 30       	cpi	r24, 0x02	; 2
    3174:	69 f4       	brne	.+26     	; 0x3190 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3176:	00 e0       	ldi	r16, 0x00	; 0
    3178:	a7 01       	movw	r20, r14
    317a:	96 01       	movw	r18, r12
    317c:	be 01       	movw	r22, r28
    317e:	6f 5f       	subi	r22, 0xFF	; 255
    3180:	7f 4f       	sbci	r23, 0xFF	; 255
    3182:	80 91 75 16 	lds	r24, 0x1675	; 0x801675 <xTimerQueue>
    3186:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <xTimerQueue+0x1>
    318a:	0e 94 bc 07 	call	0xf78	; 0xf78 <xQueueGenericSend>
    318e:	18 c0       	rjmp	.+48     	; 0x31c0 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3190:	00 e0       	ldi	r16, 0x00	; 0
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	a9 01       	movw	r20, r18
    3198:	be 01       	movw	r22, r28
    319a:	6f 5f       	subi	r22, 0xFF	; 255
    319c:	7f 4f       	sbci	r23, 0xFF	; 255
    319e:	80 91 75 16 	lds	r24, 0x1675	; 0x801675 <xTimerQueue>
    31a2:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <xTimerQueue+0x1>
    31a6:	0e 94 bc 07 	call	0xf78	; 0xf78 <xQueueGenericSend>
    31aa:	0a c0       	rjmp	.+20     	; 0x31c0 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	a8 01       	movw	r20, r16
    31b0:	be 01       	movw	r22, r28
    31b2:	6f 5f       	subi	r22, 0xFF	; 255
    31b4:	7f 4f       	sbci	r23, 0xFF	; 255
    31b6:	cf 01       	movw	r24, r30
    31b8:	0e 94 4d 08 	call	0x109a	; 0x109a <xQueueGenericSendFromISR>
    31bc:	01 c0       	rjmp	.+2      	; 0x31c0 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    31be:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    31c0:	27 96       	adiw	r28, 0x07	; 7
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	df 90       	pop	r13
    31da:	cf 90       	pop	r12
    31dc:	bf 90       	pop	r11
    31de:	af 90       	pop	r10
    31e0:	9f 90       	pop	r9
    31e2:	8f 90       	pop	r8
    31e4:	08 95       	ret

000031e6 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    31e6:	8f 92       	push	r8
    31e8:	9f 92       	push	r9
    31ea:	af 92       	push	r10
    31ec:	bf 92       	push	r11
    31ee:	cf 92       	push	r12
    31f0:	df 92       	push	r13
    31f2:	ef 92       	push	r14
    31f4:	ff 92       	push	r15
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    31fe:	3b c0       	rjmp	.+118    	; 0x3276 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3200:	07 80       	ldd	r0, Z+7	; 0x07
    3202:	f0 85       	ldd	r31, Z+8	; 0x08
    3204:	e0 2d       	mov	r30, r0
    3206:	80 80       	ld	r8, Z
    3208:	91 80       	ldd	r9, Z+1	; 0x01
    320a:	a2 80       	ldd	r10, Z+2	; 0x02
    320c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    320e:	c0 85       	ldd	r28, Z+8	; 0x08
    3210:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3212:	8e 01       	movw	r16, r28
    3214:	0e 5f       	subi	r16, 0xFE	; 254
    3216:	1f 4f       	sbci	r17, 0xFF	; 255
    3218:	c8 01       	movw	r24, r16
    321a:	0e 94 38 05 	call	0xa70	; 0xa70 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    321e:	ec 89       	ldd	r30, Y+20	; 0x14
    3220:	fd 89       	ldd	r31, Y+21	; 0x15
    3222:	ce 01       	movw	r24, r28
    3224:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3226:	8e 89       	ldd	r24, Y+22	; 0x16
    3228:	82 ff       	sbrs	r24, 2
    322a:	25 c0       	rjmp	.+74     	; 0x3276 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    322c:	8e 85       	ldd	r24, Y+14	; 0x0e
    322e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3230:	a8 89       	ldd	r26, Y+16	; 0x10
    3232:	b9 89       	ldd	r27, Y+17	; 0x11
    3234:	88 0d       	add	r24, r8
    3236:	99 1d       	adc	r25, r9
    3238:	aa 1d       	adc	r26, r10
    323a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    323c:	88 16       	cp	r8, r24
    323e:	99 06       	cpc	r9, r25
    3240:	aa 06       	cpc	r10, r26
    3242:	bb 06       	cpc	r11, r27
    3244:	70 f4       	brcc	.+28     	; 0x3262 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3246:	8a 83       	std	Y+2, r24	; 0x02
    3248:	9b 83       	std	Y+3, r25	; 0x03
    324a:	ac 83       	std	Y+4, r26	; 0x04
    324c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    324e:	db 87       	std	Y+11, r29	; 0x0b
    3250:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3252:	b8 01       	movw	r22, r16
    3254:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <pxCurrentTimerList>
    3258:	90 91 7a 16 	lds	r25, 0x167A	; 0x80167a <pxCurrentTimerList+0x1>
    325c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <vListInsert>
    3260:	0a c0       	rjmp	.+20     	; 0x3276 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3262:	c1 2c       	mov	r12, r1
    3264:	d1 2c       	mov	r13, r1
    3266:	76 01       	movw	r14, r12
    3268:	00 e0       	ldi	r16, 0x00	; 0
    326a:	10 e0       	ldi	r17, 0x00	; 0
    326c:	a5 01       	movw	r20, r10
    326e:	94 01       	movw	r18, r8
    3270:	60 e0       	ldi	r22, 0x00	; 0
    3272:	ce 01       	movw	r24, r28
    3274:	5a df       	rcall	.-332    	; 0x312a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3276:	e0 91 79 16 	lds	r30, 0x1679	; 0x801679 <pxCurrentTimerList>
    327a:	f0 91 7a 16 	lds	r31, 0x167A	; 0x80167a <pxCurrentTimerList+0x1>
    327e:	80 81       	ld	r24, Z
    3280:	81 11       	cpse	r24, r1
    3282:	be cf       	rjmp	.-132    	; 0x3200 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3284:	80 91 77 16 	lds	r24, 0x1677	; 0x801677 <pxOverflowTimerList>
    3288:	90 91 78 16 	lds	r25, 0x1678	; 0x801678 <pxOverflowTimerList+0x1>
    328c:	90 93 7a 16 	sts	0x167A, r25	; 0x80167a <pxCurrentTimerList+0x1>
    3290:	80 93 79 16 	sts	0x1679, r24	; 0x801679 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3294:	f0 93 78 16 	sts	0x1678, r31	; 0x801678 <pxOverflowTimerList+0x1>
    3298:	e0 93 77 16 	sts	0x1677, r30	; 0x801677 <pxOverflowTimerList>
    }
    329c:	df 91       	pop	r29
    329e:	cf 91       	pop	r28
    32a0:	1f 91       	pop	r17
    32a2:	0f 91       	pop	r16
    32a4:	ff 90       	pop	r15
    32a6:	ef 90       	pop	r14
    32a8:	df 90       	pop	r13
    32aa:	cf 90       	pop	r12
    32ac:	bf 90       	pop	r11
    32ae:	af 90       	pop	r10
    32b0:	9f 90       	pop	r9
    32b2:	8f 90       	pop	r8
    32b4:	08 95       	ret

000032b6 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    32b6:	cf 92       	push	r12
    32b8:	df 92       	push	r13
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	cf 93       	push	r28
    32c0:	df 93       	push	r29
    32c2:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    32c4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskGetTickCount>
    32c8:	6b 01       	movw	r12, r22
    32ca:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    32cc:	80 91 6f 16 	lds	r24, 0x166F	; 0x80166f <xLastTime.2436>
    32d0:	90 91 70 16 	lds	r25, 0x1670	; 0x801670 <xLastTime.2436+0x1>
    32d4:	a0 91 71 16 	lds	r26, 0x1671	; 0x801671 <xLastTime.2436+0x2>
    32d8:	b0 91 72 16 	lds	r27, 0x1672	; 0x801672 <xLastTime.2436+0x3>
    32dc:	c8 16       	cp	r12, r24
    32de:	d9 06       	cpc	r13, r25
    32e0:	ea 06       	cpc	r14, r26
    32e2:	fb 06       	cpc	r15, r27
    32e4:	20 f4       	brcc	.+8      	; 0x32ee <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    32e6:	7f df       	rcall	.-258    	; 0x31e6 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	88 83       	st	Y, r24
    32ec:	01 c0       	rjmp	.+2      	; 0x32f0 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    32ee:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    32f0:	c0 92 6f 16 	sts	0x166F, r12	; 0x80166f <xLastTime.2436>
    32f4:	d0 92 70 16 	sts	0x1670, r13	; 0x801670 <xLastTime.2436+0x1>
    32f8:	e0 92 71 16 	sts	0x1671, r14	; 0x801671 <xLastTime.2436+0x2>
    32fc:	f0 92 72 16 	sts	0x1672, r15	; 0x801672 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3300:	c7 01       	movw	r24, r14
    3302:	b6 01       	movw	r22, r12
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	ff 90       	pop	r15
    330a:	ef 90       	pop	r14
    330c:	df 90       	pop	r13
    330e:	cf 90       	pop	r12
    3310:	08 95       	ret

00003312 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3312:	4f 92       	push	r4
    3314:	5f 92       	push	r5
    3316:	6f 92       	push	r6
    3318:	7f 92       	push	r7
    331a:	8f 92       	push	r8
    331c:	9f 92       	push	r9
    331e:	af 92       	push	r10
    3320:	bf 92       	push	r11
    3322:	cf 92       	push	r12
    3324:	df 92       	push	r13
    3326:	ef 92       	push	r14
    3328:	ff 92       	push	r15
    332a:	0f 93       	push	r16
    332c:	1f 93       	push	r17
    332e:	cf 93       	push	r28
    3330:	df 93       	push	r29
    3332:	4b 01       	movw	r8, r22
    3334:	5c 01       	movw	r10, r24
    3336:	29 01       	movw	r4, r18
    3338:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    333a:	e0 91 79 16 	lds	r30, 0x1679	; 0x801679 <pxCurrentTimerList>
    333e:	f0 91 7a 16 	lds	r31, 0x167A	; 0x80167a <pxCurrentTimerList+0x1>
    3342:	07 80       	ldd	r0, Z+7	; 0x07
    3344:	f0 85       	ldd	r31, Z+8	; 0x08
    3346:	e0 2d       	mov	r30, r0
    3348:	c0 85       	ldd	r28, Z+8	; 0x08
    334a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    334c:	ce 01       	movw	r24, r28
    334e:	02 96       	adiw	r24, 0x02	; 2
    3350:	0e 94 38 05 	call	0xa70	; 0xa70 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3354:	8e 89       	ldd	r24, Y+22	; 0x16
    3356:	82 ff       	sbrs	r24, 2
    3358:	1b c0       	rjmp	.+54     	; 0x3390 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    335a:	4e 85       	ldd	r20, Y+14	; 0x0e
    335c:	5f 85       	ldd	r21, Y+15	; 0x0f
    335e:	68 89       	ldd	r22, Y+16	; 0x10
    3360:	79 89       	ldd	r23, Y+17	; 0x11
    3362:	48 0d       	add	r20, r8
    3364:	59 1d       	adc	r21, r9
    3366:	6a 1d       	adc	r22, r10
    3368:	7b 1d       	adc	r23, r11
    336a:	75 01       	movw	r14, r10
    336c:	64 01       	movw	r12, r8
    336e:	93 01       	movw	r18, r6
    3370:	82 01       	movw	r16, r4
    3372:	ce 01       	movw	r24, r28
    3374:	47 de       	rcall	.-882    	; 0x3004 <prvInsertTimerInActiveList>
    3376:	88 23       	and	r24, r24
    3378:	69 f0       	breq	.+26     	; 0x3394 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    337a:	c1 2c       	mov	r12, r1
    337c:	d1 2c       	mov	r13, r1
    337e:	76 01       	movw	r14, r12
    3380:	00 e0       	ldi	r16, 0x00	; 0
    3382:	10 e0       	ldi	r17, 0x00	; 0
    3384:	a5 01       	movw	r20, r10
    3386:	94 01       	movw	r18, r8
    3388:	60 e0       	ldi	r22, 0x00	; 0
    338a:	ce 01       	movw	r24, r28
    338c:	ce de       	rcall	.-612    	; 0x312a <xTimerGenericCommand>
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3390:	8e 7f       	andi	r24, 0xFE	; 254
    3392:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3394:	ec 89       	ldd	r30, Y+20	; 0x14
    3396:	fd 89       	ldd	r31, Y+21	; 0x15
    3398:	ce 01       	movw	r24, r28
    339a:	19 95       	eicall
    }
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	1f 91       	pop	r17
    33a2:	0f 91       	pop	r16
    33a4:	ff 90       	pop	r15
    33a6:	ef 90       	pop	r14
    33a8:	df 90       	pop	r13
    33aa:	cf 90       	pop	r12
    33ac:	bf 90       	pop	r11
    33ae:	af 90       	pop	r10
    33b0:	9f 90       	pop	r9
    33b2:	8f 90       	pop	r8
    33b4:	7f 90       	pop	r7
    33b6:	6f 90       	pop	r6
    33b8:	5f 90       	pop	r5
    33ba:	4f 90       	pop	r4
    33bc:	08 95       	ret

000033be <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    33be:	8f 92       	push	r8
    33c0:	9f 92       	push	r9
    33c2:	af 92       	push	r10
    33c4:	bf 92       	push	r11
    33c6:	cf 92       	push	r12
    33c8:	df 92       	push	r13
    33ca:	ef 92       	push	r14
    33cc:	ff 92       	push	r15
    33ce:	1f 93       	push	r17
    33d0:	cf 93       	push	r28
    33d2:	df 93       	push	r29
    33d4:	1f 92       	push	r1
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
    33da:	6b 01       	movw	r12, r22
    33dc:	7c 01       	movw	r14, r24
    33de:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    33e0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    33e4:	ce 01       	movw	r24, r28
    33e6:	01 96       	adiw	r24, 0x01	; 1
    33e8:	66 df       	rcall	.-308    	; 0x32b6 <prvSampleTimeNow>
    33ea:	4b 01       	movw	r8, r22
    33ec:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	81 11       	cpse	r24, r1
    33f2:	2d c0       	rjmp	.+90     	; 0x344e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    33f4:	11 11       	cpse	r17, r1
    33f6:	0d c0       	rjmp	.+26     	; 0x3412 <prvProcessTimerOrBlockTask+0x54>
    33f8:	8c 14       	cp	r8, r12
    33fa:	9d 04       	cpc	r9, r13
    33fc:	ae 04       	cpc	r10, r14
    33fe:	bf 04       	cpc	r11, r15
    3400:	40 f0       	brcs	.+16     	; 0x3412 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3402:	0e 94 3a 10 	call	0x2074	; 0x2074 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3406:	a5 01       	movw	r20, r10
    3408:	94 01       	movw	r18, r8
    340a:	c7 01       	movw	r24, r14
    340c:	b6 01       	movw	r22, r12
    340e:	81 df       	rcall	.-254    	; 0x3312 <prvProcessExpiredTimer>
    3410:	20 c0       	rjmp	.+64     	; 0x3452 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3412:	11 23       	and	r17, r17
    3414:	41 f0       	breq	.+16     	; 0x3426 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3416:	e0 91 77 16 	lds	r30, 0x1677	; 0x801677 <pxOverflowTimerList>
    341a:	f0 91 78 16 	lds	r31, 0x1678	; 0x801678 <pxOverflowTimerList+0x1>
    341e:	80 81       	ld	r24, Z
    3420:	11 e0       	ldi	r17, 0x01	; 1
    3422:	81 11       	cpse	r24, r1
    3424:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3426:	b7 01       	movw	r22, r14
    3428:	a6 01       	movw	r20, r12
    342a:	48 19       	sub	r20, r8
    342c:	59 09       	sbc	r21, r9
    342e:	6a 09       	sbc	r22, r10
    3430:	7b 09       	sbc	r23, r11
    3432:	21 2f       	mov	r18, r17
    3434:	80 91 75 16 	lds	r24, 0x1675	; 0x801675 <xTimerQueue>
    3438:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <xTimerQueue+0x1>
    343c:	0e 94 17 09 	call	0x122e	; 0x122e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3440:	0e 94 3a 10 	call	0x2074	; 0x2074 <xTaskResumeAll>
    3444:	81 11       	cpse	r24, r1
    3446:	05 c0       	rjmp	.+10     	; 0x3452 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3448:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortYield>
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    344e:	0e 94 3a 10 	call	0x2074	; 0x2074 <xTaskResumeAll>
            }
        }
    }
    3452:	0f 90       	pop	r0
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	1f 91       	pop	r17
    345a:	ff 90       	pop	r15
    345c:	ef 90       	pop	r14
    345e:	df 90       	pop	r13
    3460:	cf 90       	pop	r12
    3462:	bf 90       	pop	r11
    3464:	af 90       	pop	r10
    3466:	9f 90       	pop	r9
    3468:	8f 90       	pop	r8
    346a:	08 95       	ret

0000346c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    346c:	af 92       	push	r10
    346e:	bf 92       	push	r11
    3470:	cf 92       	push	r12
    3472:	df 92       	push	r13
    3474:	ef 92       	push	r14
    3476:	ff 92       	push	r15
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	cf 93       	push	r28
    347e:	df 93       	push	r29
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	28 97       	sbiw	r28, 0x08	; 8
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3490:	82 c0       	rjmp	.+260    	; 0x3596 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	88 23       	and	r24, r24
    3496:	0c f4       	brge	.+2      	; 0x349a <prvProcessReceivedCommands+0x2e>
    3498:	7e c0       	rjmp	.+252    	; 0x3596 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    349a:	ae 80       	ldd	r10, Y+6	; 0x06
    349c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    349e:	d5 01       	movw	r26, r10
    34a0:	1c 96       	adiw	r26, 0x0c	; 12
    34a2:	8d 91       	ld	r24, X+
    34a4:	9c 91       	ld	r25, X
    34a6:	1d 97       	sbiw	r26, 0x0d	; 13
    34a8:	89 2b       	or	r24, r25
    34aa:	21 f0       	breq	.+8      	; 0x34b4 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34ac:	c5 01       	movw	r24, r10
    34ae:	02 96       	adiw	r24, 0x02	; 2
    34b0:	0e 94 38 05 	call	0xa70	; 0xa70 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    34b4:	ce 01       	movw	r24, r28
    34b6:	08 96       	adiw	r24, 0x08	; 8
    34b8:	fe de       	rcall	.-516    	; 0x32b6 <prvSampleTimeNow>
    34ba:	8b 01       	movw	r16, r22
    34bc:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    34be:	e9 81       	ldd	r30, Y+1	; 0x01
    34c0:	0e 2e       	mov	r0, r30
    34c2:	00 0c       	add	r0, r0
    34c4:	ff 0b       	sbc	r31, r31
    34c6:	ea 30       	cpi	r30, 0x0A	; 10
    34c8:	f1 05       	cpc	r31, r1
    34ca:	08 f0       	brcs	.+2      	; 0x34ce <prvProcessReceivedCommands+0x62>
    34cc:	64 c0       	rjmp	.+200    	; 0x3596 <prvProcessReceivedCommands+0x12a>
    34ce:	88 27       	eor	r24, r24
    34d0:	ee 58       	subi	r30, 0x8E	; 142
    34d2:	ff 4f       	sbci	r31, 0xFF	; 255
    34d4:	8f 4f       	sbci	r24, 0xFF	; 255
    34d6:	0c 94 55 30 	jmp	0x60aa	; 0x60aa <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    34da:	f5 01       	movw	r30, r10
    34dc:	86 89       	ldd	r24, Z+22	; 0x16
    34de:	81 60       	ori	r24, 0x01	; 1
    34e0:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    34e2:	ca 80       	ldd	r12, Y+2	; 0x02
    34e4:	db 80       	ldd	r13, Y+3	; 0x03
    34e6:	ec 80       	ldd	r14, Y+4	; 0x04
    34e8:	fd 80       	ldd	r15, Y+5	; 0x05
    34ea:	46 85       	ldd	r20, Z+14	; 0x0e
    34ec:	57 85       	ldd	r21, Z+15	; 0x0f
    34ee:	60 89       	ldd	r22, Z+16	; 0x10
    34f0:	71 89       	ldd	r23, Z+17	; 0x11
    34f2:	4c 0d       	add	r20, r12
    34f4:	5d 1d       	adc	r21, r13
    34f6:	6e 1d       	adc	r22, r14
    34f8:	7f 1d       	adc	r23, r15
    34fa:	c5 01       	movw	r24, r10
    34fc:	83 dd       	rcall	.-1274   	; 0x3004 <prvInsertTimerInActiveList>
    34fe:	88 23       	and	r24, r24
    3500:	09 f4       	brne	.+2      	; 0x3504 <prvProcessReceivedCommands+0x98>
    3502:	49 c0       	rjmp	.+146    	; 0x3596 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3504:	d5 01       	movw	r26, r10
    3506:	54 96       	adiw	r26, 0x14	; 20
    3508:	ed 91       	ld	r30, X+
    350a:	fc 91       	ld	r31, X
    350c:	55 97       	sbiw	r26, 0x15	; 21
    350e:	c5 01       	movw	r24, r10
    3510:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3512:	f5 01       	movw	r30, r10
    3514:	86 89       	ldd	r24, Z+22	; 0x16
    3516:	82 ff       	sbrs	r24, 2
    3518:	3e c0       	rjmp	.+124    	; 0x3596 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    351a:	4a 81       	ldd	r20, Y+2	; 0x02
    351c:	5b 81       	ldd	r21, Y+3	; 0x03
    351e:	6c 81       	ldd	r22, Y+4	; 0x04
    3520:	7d 81       	ldd	r23, Y+5	; 0x05
    3522:	86 85       	ldd	r24, Z+14	; 0x0e
    3524:	97 85       	ldd	r25, Z+15	; 0x0f
    3526:	a0 89       	ldd	r26, Z+16	; 0x10
    3528:	b1 89       	ldd	r27, Z+17	; 0x11
    352a:	9a 01       	movw	r18, r20
    352c:	ab 01       	movw	r20, r22
    352e:	28 0f       	add	r18, r24
    3530:	39 1f       	adc	r19, r25
    3532:	4a 1f       	adc	r20, r26
    3534:	5b 1f       	adc	r21, r27
    3536:	c1 2c       	mov	r12, r1
    3538:	d1 2c       	mov	r13, r1
    353a:	76 01       	movw	r14, r12
    353c:	00 e0       	ldi	r16, 0x00	; 0
    353e:	10 e0       	ldi	r17, 0x00	; 0
    3540:	60 e0       	ldi	r22, 0x00	; 0
    3542:	c5 01       	movw	r24, r10
    3544:	f2 dd       	rcall	.-1052   	; 0x312a <xTimerGenericCommand>
    3546:	27 c0       	rjmp	.+78     	; 0x3596 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3548:	d5 01       	movw	r26, r10
    354a:	56 96       	adiw	r26, 0x16	; 22
    354c:	8c 91       	ld	r24, X
    354e:	56 97       	sbiw	r26, 0x16	; 22
    3550:	8e 7f       	andi	r24, 0xFE	; 254
    3552:	56 96       	adiw	r26, 0x16	; 22
    3554:	8c 93       	st	X, r24
                        break;
    3556:	1f c0       	rjmp	.+62     	; 0x3596 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3558:	f5 01       	movw	r30, r10
    355a:	86 89       	ldd	r24, Z+22	; 0x16
    355c:	81 60       	ori	r24, 0x01	; 1
    355e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3560:	4a 81       	ldd	r20, Y+2	; 0x02
    3562:	5b 81       	ldd	r21, Y+3	; 0x03
    3564:	6c 81       	ldd	r22, Y+4	; 0x04
    3566:	7d 81       	ldd	r23, Y+5	; 0x05
    3568:	46 87       	std	Z+14, r20	; 0x0e
    356a:	57 87       	std	Z+15, r21	; 0x0f
    356c:	60 8b       	std	Z+16, r22	; 0x10
    356e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3570:	40 0f       	add	r20, r16
    3572:	51 1f       	adc	r21, r17
    3574:	62 1f       	adc	r22, r18
    3576:	73 1f       	adc	r23, r19
    3578:	68 01       	movw	r12, r16
    357a:	79 01       	movw	r14, r18
    357c:	c5 01       	movw	r24, r10
    357e:	42 dd       	rcall	.-1404   	; 0x3004 <prvInsertTimerInActiveList>
                        break;
    3580:	0a c0       	rjmp	.+20     	; 0x3596 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3582:	f5 01       	movw	r30, r10
    3584:	86 89       	ldd	r24, Z+22	; 0x16
    3586:	81 fd       	sbrc	r24, 1
    3588:	04 c0       	rjmp	.+8      	; 0x3592 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    358a:	c5 01       	movw	r24, r10
    358c:	0e 94 a9 04 	call	0x952	; 0x952 <vPortFree>
    3590:	02 c0       	rjmp	.+4      	; 0x3596 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3592:	8e 7f       	andi	r24, 0xFE	; 254
    3594:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	a9 01       	movw	r20, r18
    359c:	be 01       	movw	r22, r28
    359e:	6f 5f       	subi	r22, 0xFF	; 255
    35a0:	7f 4f       	sbci	r23, 0xFF	; 255
    35a2:	80 91 75 16 	lds	r24, 0x1675	; 0x801675 <xTimerQueue>
    35a6:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <xTimerQueue+0x1>
    35aa:	0e 94 88 08 	call	0x1110	; 0x1110 <xQueueReceive>
    35ae:	81 11       	cpse	r24, r1
    35b0:	70 cf       	rjmp	.-288    	; 0x3492 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    35b2:	28 96       	adiw	r28, 0x08	; 8
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	1f 91       	pop	r17
    35c4:	0f 91       	pop	r16
    35c6:	ff 90       	pop	r15
    35c8:	ef 90       	pop	r14
    35ca:	df 90       	pop	r13
    35cc:	cf 90       	pop	r12
    35ce:	bf 90       	pop	r11
    35d0:	af 90       	pop	r10
    35d2:	08 95       	ret

000035d4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    35d4:	08 95       	ret

000035d6 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    35d6:	84 b1       	in	r24, 0x04	; 4
    35d8:	80 68       	ori	r24, 0x80	; 128
    35da:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    35dc:	85 b1       	in	r24, 0x05	; 5
    35de:	80 68       	ori	r24, 0x80	; 128
    35e0:	85 b9       	out	0x05, r24	; 5
    35e2:	08 95       	ret

000035e4 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    35e4:	83 b1       	in	r24, 0x03	; 3
    35e6:	80 68       	ori	r24, 0x80	; 128
    35e8:	83 b9       	out	0x03, r24	; 3
    35ea:	08 95       	ret

000035ec <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    35ec:	f4 df       	rcall	.-24     	; 0x35d6 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    35ee:	2f ef       	ldi	r18, 0xFF	; 255
    35f0:	80 e7       	ldi	r24, 0x70	; 112
    35f2:	92 e0       	ldi	r25, 0x02	; 2
    35f4:	21 50       	subi	r18, 0x01	; 1
    35f6:	80 40       	sbci	r24, 0x00	; 0
    35f8:	90 40       	sbci	r25, 0x00	; 0
    35fa:	e1 f7       	brne	.-8      	; 0x35f4 <vApplicationMallocFailedHook+0x8>
    35fc:	00 c0       	rjmp	.+0      	; 0x35fe <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    35fe:	00 00       	nop
    3600:	f1 df       	rcall	.-30     	; 0x35e4 <prvBlinkMainLed>
    3602:	f5 cf       	rjmp	.-22     	; 0x35ee <vApplicationMallocFailedHook+0x2>

00003604 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3604:	e8 df       	rcall	.-48     	; 0x35d6 <prvSetMainLedOn>
    3606:	2f ef       	ldi	r18, 0xFF	; 255
    3608:	87 ea       	ldi	r24, 0xA7	; 167
    360a:	91 e6       	ldi	r25, 0x61	; 97
    360c:	21 50       	subi	r18, 0x01	; 1
    360e:	80 40       	sbci	r24, 0x00	; 0
    3610:	90 40       	sbci	r25, 0x00	; 0
    3612:	e1 f7       	brne	.-8      	; 0x360c <vApplicationStackOverflowHook+0x8>
    3614:	00 c0       	rjmp	.+0      	; 0x3616 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3616:	00 00       	nop
    3618:	e5 df       	rcall	.-54     	; 0x35e4 <prvBlinkMainLed>
    361a:	f5 cf       	rjmp	.-22     	; 0x3606 <vApplicationStackOverflowHook+0x2>

0000361c <set_temperature_percent>:
static uint16_t humidityPercent;
static uint16_t CO2_PPM;
static uint8_t status = 0x10;

void set_temperature_percent(int16_t temperature){
	temperaturePercent = temperature;
    361c:	90 93 96 16 	sts	0x1696, r25	; 0x801696 <temperaturePercent+0x1>
    3620:	80 93 95 16 	sts	0x1695, r24	; 0x801695 <temperaturePercent>
    3624:	08 95       	ret

00003626 <set_humidity_percent>:
}

void set_humidity_percent(uint16_t humidity){
	humidityPercent = humidity;
    3626:	90 93 94 16 	sts	0x1694, r25	; 0x801694 <humidityPercent+0x1>
    362a:	80 93 93 16 	sts	0x1693, r24	; 0x801693 <humidityPercent>
    362e:	08 95       	ret

00003630 <set_CO2_ppm>:
}

void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    3630:	90 93 92 16 	sts	0x1692, r25	; 0x801692 <CO2_PPM+0x1>
    3634:	80 93 91 16 	sts	0x1691, r24	; 0x801691 <CO2_PPM>
    3638:	08 95       	ret

0000363a <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    363a:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    363c:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    363e:	87 e0       	ldi	r24, 0x07	; 7
    3640:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3642:	80 91 95 16 	lds	r24, 0x1695	; 0x801695 <temperaturePercent>
    3646:	90 91 96 16 	lds	r25, 0x1696	; 0x801696 <temperaturePercent+0x1>
    364a:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    364c:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    364e:	80 91 93 16 	lds	r24, 0x1693	; 0x801693 <humidityPercent>
    3652:	90 91 94 16 	lds	r25, 0x1694	; 0x801694 <humidityPercent+0x1>
    3656:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    3658:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    365a:	80 91 91 16 	lds	r24, 0x1691	; 0x801691 <CO2_PPM>
    365e:	90 91 92 16 	lds	r25, 0x1692	; 0x801692 <CO2_PPM+0x1>
    3662:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    3664:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    3666:	80 e1       	ldi	r24, 0x10	; 16
    3668:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    366a:	cf 01       	movw	r24, r30
    366c:	08 95       	ret

0000366e <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    366e:	90 93 98 16 	sts	0x1698, r25	; 0x801698 <lastCO2ppm+0x1>
    3672:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <lastCO2ppm>
    3676:	08 95       	ret

00003678 <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    3678:	83 e0       	ldi	r24, 0x03	; 3
    367a:	c1 d7       	rcall	.+3970   	; 0x45fe <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    367c:	87 e3       	ldi	r24, 0x37	; 55
    367e:	9b e1       	ldi	r25, 0x1B	; 27
    3680:	e3 c7       	rjmp	.+4038   	; 0x4648 <mh_z19_injectCallBack>
    3682:	08 95       	ret

00003684 <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    3684:	e6 d7       	rcall	.+4044   	; 0x4652 <mh_z19_takeMeassuring>
    3686:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <rc>
	if (rc != MHZ19_OK)
    368a:	88 23       	and	r24, r24
    368c:	41 f0       	breq	.+16     	; 0x369e <CO2_measure+0x1a>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
    368e:	80 eb       	ldi	r24, 0xB0	; 176
    3690:	92 e0       	ldi	r25, 0x02	; 2
    3692:	9f 93       	push	r25
    3694:	8f 93       	push	r24
    3696:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    369e:	87 e9       	ldi	r24, 0x97	; 151
    36a0:	96 e1       	ldi	r25, 0x16	; 22
    36a2:	0e 94 58 23 	call	0x46b0	; 0x46b0 <mh_z19_getCo2Ppm>
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	90 93 98 16 	sts	0x1698, r25	; 0x801698 <lastCO2ppm+0x1>
    36ac:	80 93 97 16 	sts	0x1697, r24	; 0x801697 <lastCO2ppm>
    36b0:	08 95       	ret

000036b2 <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    36b2:	cc 24       	eor	r12, r12
    36b4:	ca 94       	dec	r12
    36b6:	dc 2c       	mov	r13, r12
    36b8:	76 01       	movw	r14, r12
    36ba:	01 e0       	ldi	r16, 0x01	; 1
    36bc:	21 e0       	ldi	r18, 0x01	; 1
    36be:	41 e0       	ldi	r20, 0x01	; 1
    36c0:	50 e0       	ldi	r21, 0x00	; 0
    36c2:	60 e0       	ldi	r22, 0x00	; 0
    36c4:	70 e0       	ldi	r23, 0x00	; 0
    36c6:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <measureEventGroup>
    36ca:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <measureEventGroup+0x1>
    36ce:	0e 94 5f 02 	call	0x4be	; 0x4be <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    36d2:	60 ff       	sbrs	r22, 0
    36d4:	ee cf       	rjmp	.-36     	; 0x36b2 <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    36d6:	d6 df       	rcall	.-84     	; 0x3684 <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    36d8:	42 e0       	ldi	r20, 0x02	; 2
    36da:	50 e0       	ldi	r21, 0x00	; 0
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <dataReadyEventGroup>
    36e4:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <dataReadyEventGroup+0x1>
    36e8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <xEventGroupSetBits>
    36ec:	e2 cf       	rjmp	.-60     	; 0x36b2 <MeasureCo2Task>

000036ee <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    36ee:	80 91 97 16 	lds	r24, 0x1697	; 0x801697 <lastCO2ppm>
    36f2:	90 91 98 16 	lds	r25, 0x1698	; 0x801698 <lastCO2ppm+0x1>
    36f6:	08 95       	ret

000036f8 <createCO2SensorTask>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void createCO2SensorTask(){
    36f8:	ef 92       	push	r14
    36fa:	ff 92       	push	r15
    36fc:	0f 93       	push	r16
	
	//Initializing 
		CO2_createSensor();
    36fe:	bc df       	rcall	.-136    	; 0x3678 <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    3700:	e1 2c       	mov	r14, r1
    3702:	f1 2c       	mov	r15, r1
    3704:	00 e0       	ldi	r16, 0x00	; 0
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	40 ec       	ldi	r20, 0xC0	; 192
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	60 ee       	ldi	r22, 0xE0	; 224
    3710:	72 e0       	ldi	r23, 0x02	; 2
    3712:	89 e5       	ldi	r24, 0x59	; 89
    3714:	9b e1       	ldi	r25, 0x1B	; 27
    3716:	0e 94 76 0e 	call	0x1cec	; 0x1cec <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY,
		NULL);
}
    371a:	0f 91       	pop	r16
    371c:	ff 90       	pop	r15
    371e:	ef 90       	pop	r14
    3720:	08 95       	ret

00003722 <initialise_TempHumSensor>:
int16_t temperature = 0;


void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    3722:	23 d2       	rcall	.+1094   	; 0x3b6a <hih8120_initialise>
    3724:	88 23       	and	r24, r24
    3726:	41 f0       	breq	.+16     	; 0x3738 <initialise_TempHumSensor+0x16>
		// Driver initialised OK
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{printf("Something went wrong while initialising tempHum sensor");
    3728:	82 ef       	ldi	r24, 0xF2	; 242
    372a:	92 e0       	ldi	r25, 0x02	; 2
    372c:	9f 93       	push	r25
    372e:	8f 93       	push	r24
    3730:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	08 95       	ret

0000373a <create_TempHumSensorTask>:
	}
	}


void create_TempHumSensorTask(){
    373a:	ef 92       	push	r14
    373c:	ff 92       	push	r15
    373e:	0f 93       	push	r16
	initialise_TempHumSensor();
    3740:	f0 df       	rcall	.-32     	; 0x3722 <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    3742:	e1 2c       	mov	r14, r1
    3744:	f1 2c       	mov	r15, r1
    3746:	00 e0       	ldi	r16, 0x00	; 0
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 ec       	ldi	r20, 0xC0	; 192
    374e:	50 e0       	ldi	r21, 0x00	; 0
    3750:	69 e2       	ldi	r22, 0x29	; 41
    3752:	73 e0       	ldi	r23, 0x03	; 3
    3754:	85 ed       	ldi	r24, 0xD5	; 213
    3756:	9b e1       	ldi	r25, 0x1B	; 27
    3758:	0e 94 76 0e 	call	0x1cec	; 0x1cec <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY,
	NULL);
	
}
    375c:	0f 91       	pop	r16
    375e:	ff 90       	pop	r15
    3760:	ef 90       	pop	r14
    3762:	08 95       	ret

00003764 <measure_Temp_Hum>:

void measure_Temp_Hum(){
	
	
	if ( HIH8120_OK != hih8120_wakeup() )
    3764:	1a d2       	rcall	.+1076   	; 0x3b9a <hih8120_wakeup>
    3766:	88 23       	and	r24, r24
    3768:	41 f0       	breq	.+16     	; 0x377a <measure_Temp_Hum+0x16>
	{
		printf("Could not wake up temp hum sensor ");
    376a:	85 e3       	ldi	r24, 0x35	; 53
    376c:	93 e0       	ldi	r25, 0x03	; 3
    376e:	9f 93       	push	r25
    3770:	8f 93       	push	r24
    3772:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(51));
    377a:	63 e0       	ldi	r22, 0x03	; 3
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskDelay>
	if ( HIH8120_OK !=  hih8120_measure() )
    3786:	1e d2       	rcall	.+1084   	; 0x3bc4 <hih8120_measure>
    3788:	88 23       	and	r24, r24
    378a:	41 f0       	breq	.+16     	; 0x379c <measure_Temp_Hum+0x38>
	{
		printf("Could not measure temp hum sensor ");
    378c:	88 e5       	ldi	r24, 0x58	; 88
    378e:	93 e0       	ldi	r25, 0x03	; 3
    3790:	9f 93       	push	r25
    3792:	8f 93       	push	r24
    3794:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(51));
    379c:	63 e0       	ldi	r22, 0x03	; 3
    379e:	70 e0       	ldi	r23, 0x00	; 0
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <vTaskDelay>
    37a8:	08 95       	ret

000037aa <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    37aa:	cc 24       	eor	r12, r12
    37ac:	ca 94       	dec	r12
    37ae:	dc 2c       	mov	r13, r12
    37b0:	76 01       	movw	r14, r12
    37b2:	01 e0       	ldi	r16, 0x01	; 1
    37b4:	21 e0       	ldi	r18, 0x01	; 1
    37b6:	44 e0       	ldi	r20, 0x04	; 4
    37b8:	50 e0       	ldi	r21, 0x00	; 0
    37ba:	60 e0       	ldi	r22, 0x00	; 0
    37bc:	70 e0       	ldi	r23, 0x00	; 0
    37be:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <measureEventGroup>
    37c2:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <measureEventGroup+0x1>
    37c6:	0e 94 5f 02 	call	0x4be	; 0x4be <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    37ca:	62 ff       	sbrs	r22, 2
    37cc:	ee cf       	rjmp	.-36     	; 0x37aa <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();
    37ce:	ca df       	rcall	.-108    	; 0x3764 <measure_Temp_Hum>
			humidity = hih8120_getHumidityPercent_x10();
    37d0:	1f d2       	rcall	.+1086   	; 0x3c10 <hih8120_getHumidityPercent_x10>
    37d2:	90 93 9c 16 	sts	0x169C, r25	; 0x80169c <humidity+0x1>
    37d6:	80 93 9b 16 	sts	0x169B, r24	; 0x80169b <humidity>
			temperature = hih8120_getTemperature_x10();
    37da:	40 d2       	rcall	.+1152   	; 0x3c5c <hih8120_getTemperature_x10>
    37dc:	90 93 9a 16 	sts	0x169A, r25	; 0x80169a <temperature+0x1>
    37e0:	80 93 99 16 	sts	0x1699, r24	; 0x801699 <temperature>
    37e4:	48 e0       	ldi	r20, 0x08	; 8
			
			
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    37e6:	50 e0       	ldi	r21, 0x00	; 0
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <dataReadyEventGroup>
    37f0:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <dataReadyEventGroup+0x1>
    37f4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <xEventGroupSetBits>
    37f8:	d8 cf       	rjmp	.-80     	; 0x37aa <Temp_Hum_Main_Task>

000037fa <TempHumSensor_getTemp>:
    37fa:	80 91 99 16 	lds	r24, 0x1699	; 0x801699 <temperature>
	
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    37fe:	90 91 9a 16 	lds	r25, 0x169A	; 0x80169a <temperature+0x1>
    3802:	08 95       	ret

00003804 <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    3804:	80 91 9b 16 	lds	r24, 0x169B	; 0x80169b <humidity>
    3808:	90 91 9c 16 	lds	r25, 0x169C	; 0x80169c <humidity+0x1>
    380c:	08 95       	ret

0000380e <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    380e:	0f 93       	push	r16
    3810:	1f 93       	push	r17
    3812:	cf 93       	push	r28
    3814:	df 93       	push	r29
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	64 97       	sbiw	r28, 0x14	; 20
    381c:	0f b6       	in	r0, 0x3f	; 63
    381e:	f8 94       	cli
    3820:	de bf       	out	0x3e, r29	; 62
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    382c:	8f d3       	rcall	.+1822   	; 0x3f4c <lora_driver_rn2483FactoryReset>
    382e:	0b d6       	rcall	.+3094   	; 0x4446 <lora_driver_mapReturnCodeToText>
    3830:	9f 93       	push	r25
    3832:	8f 93       	push	r24
    3834:	8b e7       	ldi	r24, 0x7B	; 123
    3836:	93 e0       	ldi	r25, 0x03	; 3
    3838:	9f 93       	push	r25
    383a:	8f 93       	push	r24
    383c:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3840:	03 d5       	rcall	.+2566   	; 0x4248 <lora_driver_configureToEu868>
    3842:	01 d6       	rcall	.+3074   	; 0x4446 <lora_driver_mapReturnCodeToText>
    3844:	9f 93       	push	r25
    3846:	8f 93       	push	r24
    3848:	8e e8       	ldi	r24, 0x8E	; 142
    384a:	93 e0       	ldi	r25, 0x03	; 3
    384c:	9f 93       	push	r25
    384e:	8f 93       	push	r24
    3850:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3854:	8e 01       	movw	r16, r28
    3856:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3858:	1f 4f       	sbci	r17, 0xFF	; 255
    385a:	c8 01       	movw	r24, r16
    385c:	89 d3       	rcall	.+1810   	; 0x3f70 <lora_driver_getRn2483Hweui>
    385e:	f3 d5       	rcall	.+3046   	; 0x4446 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3860:	1f 93       	push	r17
    3862:	0f 93       	push	r16
    3864:	9f 93       	push	r25
    3866:	8f 93       	push	r24
    3868:	87 ea       	ldi	r24, 0xA7	; 167
    386a:	93 e0       	ldi	r25, 0x03	; 3
    386c:	9f 93       	push	r25
    386e:	8f 93       	push	r24
    3870:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3874:	c8 01       	movw	r24, r16
    3876:	98 d3       	rcall	.+1840   	; 0x3fa8 <lora_driver_setDeviceIdentifier>
    3878:	e6 d5       	rcall	.+3020   	; 0x4446 <lora_driver_mapReturnCodeToText>
    387a:	9f 93       	push	r25
    387c:	8f 93       	push	r24
    387e:	1f 93       	push	r17
    3880:	0f 93       	push	r16
    3882:	8b eb       	ldi	r24, 0xBB	; 187
    3884:	93 e0       	ldi	r25, 0x03	; 3
    3886:	9f 93       	push	r25
    3888:	8f 93       	push	r24
    388a:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    388e:	a8 01       	movw	r20, r16
    3890:	60 ed       	ldi	r22, 0xD0	; 208
    3892:	73 e0       	ldi	r23, 0x03	; 3
    3894:	81 ef       	ldi	r24, 0xF1	; 241
    3896:	93 e0       	ldi	r25, 0x03	; 3
    3898:	b5 d5       	rcall	.+2922   	; 0x4404 <lora_driver_setOtaaIdentity>
    389a:	d5 d5       	rcall	.+2986   	; 0x4446 <lora_driver_mapReturnCodeToText>
    389c:	9f 93       	push	r25
    389e:	8f 93       	push	r24
    38a0:	1f 93       	push	r17
    38a2:	0f 93       	push	r16
    38a4:	80 ed       	ldi	r24, 0xD0	; 208
    38a6:	93 e0       	ldi	r25, 0x03	; 3
    38a8:	9f 93       	push	r25
    38aa:	8f 93       	push	r24
    38ac:	81 ef       	ldi	r24, 0xF1	; 241
    38ae:	93 e0       	ldi	r25, 0x03	; 3
    38b0:	9f 93       	push	r25
    38b2:	8f 93       	push	r24
    38b4:	82 e0       	ldi	r24, 0x02	; 2
    38b6:	94 e0       	ldi	r25, 0x04	; 4
    38b8:	9f 93       	push	r25
    38ba:	8f 93       	push	r24
    38bc:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    38c0:	a6 d3       	rcall	.+1868   	; 0x400e <lora_driver_saveMac>
    38c2:	c1 d5       	rcall	.+2946   	; 0x4446 <lora_driver_mapReturnCodeToText>
    38c4:	9f 93       	push	r25
    38c6:	8f 93       	push	r24
    38c8:	88 e3       	ldi	r24, 0x38	; 56
    38ca:	94 e0       	ldi	r25, 0x04	; 4
    38cc:	9f 93       	push	r25
    38ce:	8f 93       	push	r24
    38d0:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    38d4:	0f b6       	in	r0, 0x3f	; 63
    38d6:	f8 94       	cli
    38d8:	de bf       	out	0x3e, r29	; 62
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	cd bf       	out	0x3d, r28	; 61
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	90 d4       	rcall	.+2336   	; 0x4202 <lora_driver_setAdaptiveDataRate>
    38e2:	b1 d5       	rcall	.+2914   	; 0x4446 <lora_driver_mapReturnCodeToText>
    38e4:	9f 93       	push	r25
    38e6:	8f 93       	push	r24
    38e8:	87 e4       	ldi	r24, 0x47	; 71
    38ea:	94 e0       	ldi	r25, 0x04	; 4
    38ec:	9f 93       	push	r25
    38ee:	8f 93       	push	r24
    38f0:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    38f4:	84 ef       	ldi	r24, 0xF4	; 244
    38f6:	91 e0       	ldi	r25, 0x01	; 1
    38f8:	8f d4       	rcall	.+2334   	; 0x4218 <lora_driver_setReceiveDelay>
    38fa:	a5 d5       	rcall	.+2890   	; 0x4446 <lora_driver_mapReturnCodeToText>
    38fc:	9f 93       	push	r25
    38fe:	8f 93       	push	r24
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	8f 93       	push	r24
    3904:	84 ef       	ldi	r24, 0xF4	; 244
    3906:	8f 93       	push	r24
    3908:	88 e6       	ldi	r24, 0x68	; 104
    390a:	94 e0       	ldi	r25, 0x04	; 4
    390c:	9f 93       	push	r25
    390e:	8f 93       	push	r24
    3910:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    391e:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	7b d3       	rcall	.+1782   	; 0x401a <lora_driver_join>
    3924:	08 2f       	mov	r16, r24
    3926:	8f d5       	rcall	.+2846   	; 0x4446 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3928:	9f 93       	push	r25
    392a:	8f 93       	push	r24
    392c:	1f 92       	push	r1
    392e:	1f 93       	push	r17
    3930:	88 e8       	ldi	r24, 0x88	; 136
    3932:	94 e0       	ldi	r25, 0x04	; 4
    3934:	9f 93       	push	r25
    3936:	8f 93       	push	r24
    3938:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	08 30       	cpi	r16, 0x08	; 8
    394a:	59 f0       	breq	.+22     	; 0x3962 <_lora_setup+0x154>
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	0e 94 de 28 	call	0x51bc	; 0x51bc <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3952:	66 e3       	ldi	r22, 0x36	; 54
    3954:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskDelay>
    395e:	11 50       	subi	r17, 0x01	; 1
    3960:	f9 f6       	brne	.-66     	; 0x3920 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3962:	08 30       	cpi	r16, 0x08	; 8
    3964:	21 f4       	brne	.+8      	; 0x396e <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	0e 94 c0 28 	call	0x5180	; 0x5180 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    396c:	09 c0       	rjmp	.+18     	; 0x3980 <_lora_setup+0x172>
    396e:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3970:	0e 94 cf 28 	call	0x519e	; 0x519e <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	0e 94 9d 28 	call	0x513a	; 0x513a <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    397a:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    397e:	fd cf       	rjmp	.-6      	; 0x397a <_lora_setup+0x16c>
    3980:	64 96       	adiw	r28, 0x14	; 20
    3982:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	df 91       	pop	r29
    398e:	cf 91       	pop	r28
    3990:	1f 91       	pop	r17
    3992:	0f 91       	pop	r16
    3994:	08 95       	ret

00003996 <lora_handler_task>:
    3996:	cf 93       	push	r28
    3998:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    399a:	00 d0       	rcall	.+0      	; 0x399c <lora_handler_task+0x6>
    399c:	1f 92       	push	r1
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	c5 d2       	rcall	.+1418   	; 0x3f30 <lora_driver_resetRn2483>
	vTaskDelay(2);
    39a6:	62 e0       	ldi	r22, 0x02	; 2
    39a8:	70 e0       	ldi	r23, 0x00	; 0
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskDelay>
	lora_driver_resetRn2483(0);
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	bd d2       	rcall	.+1402   	; 0x3f30 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    39b6:	66 e9       	ldi	r22, 0x96	; 150
    39b8:	70 e0       	ldi	r23, 0x00	; 0
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    39c2:	6f d2       	rcall	.+1246   	; 0x3ea2 <lora_driver_flushBuffers>

	_lora_setup();
    39c4:	24 df       	rcall	.-440    	; 0x380e <_lora_setup>
    39c6:	ef e9       	ldi	r30, 0x9F	; 159

	_uplink_payload.len = 7;
    39c8:	f6 e1       	ldi	r31, 0x16	; 22
    39ca:	87 e0       	ldi	r24, 0x07	; 7
    39cc:	81 83       	std	Z+1, r24	; 0x01
    39ce:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    39d0:	80 83       	st	Z, r24
    39d2:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    39d6:	69 83       	std	Y+1, r22	; 0x01
    39d8:	7a 83       	std	Y+2, r23	; 0x02
    39da:	8b 83       	std	Y+3, r24	; 0x03
    39dc:	9c 83       	std	Y+4, r25	; 0x04
    39de:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    39e0:	58 e4       	ldi	r21, 0x48	; 72
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	ce 01       	movw	r24, r28
    39e8:	01 96       	adiw	r24, 0x01	; 1
    39ea:	0e 94 16 11 	call	0x222c	; 0x222c <xTaskDelayUntil>
    39ee:	0f ef       	ldi	r16, 0xFF	; 255
		uint8_t status = 0;
		size_t xReceivedBytes = 0;
		const TickType_t xWaitingTime = portMAX_DELAY;

		
		xReceivedBytes = xMessageBufferReceive (uplinkBufferHandle,
    39f0:	1f ef       	ldi	r17, 0xFF	; 255
    39f2:	98 01       	movw	r18, r16
    39f4:	46 e1       	ldi	r20, 0x16	; 22
    39f6:	50 e0       	ldi	r21, 0x00	; 0
    39f8:	6f e9       	ldi	r22, 0x9F	; 159
    39fa:	76 e1       	ldi	r23, 0x16	; 22
    39fc:	80 91 9d 16 	lds	r24, 0x169D	; 0x80169d <uplinkBufferHandle>
    3a00:	90 91 9e 16 	lds	r25, 0x169E	; 0x80169e <uplinkBufferHandle+0x1>
    3a04:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xStreamBufferReceive>
    3a08:	89 2b       	or	r24, r25
		&_uplink_payload,
		sizeof(_uplink_payload),
		xWaitingTime);

		if(xReceivedBytes > 0){
    3a0a:	d1 f1       	breq	.+116    	; 0x3a80 <lora_handler_task+0xea>
    3a0c:	ef e9       	ldi	r30, 0x9F	; 159
			// 				printf("Number of bytes read from the message buffer: %d\n", xReceivedBytes);
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    3a0e:	f6 e1       	ldi	r31, 0x16	; 22
    3a10:	82 81       	ldd	r24, Z+2	; 0x02
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	98 2f       	mov	r25, r24
    3a16:	88 27       	eor	r24, r24
    3a18:	23 81       	ldd	r18, Z+3	; 0x03
    3a1a:	82 2b       	or	r24, r18
    3a1c:	e4 80       	ldd	r14, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    3a1e:	f1 2c       	mov	r15, r1
    3a20:	fe 2c       	mov	r15, r14
    3a22:	ee 24       	eor	r14, r14
    3a24:	25 81       	ldd	r18, Z+5	; 0x05
    3a26:	e2 2a       	or	r14, r18
    3a28:	06 81       	ldd	r16, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    3a2a:	10 e0       	ldi	r17, 0x00	; 0
    3a2c:	10 2f       	mov	r17, r16
    3a2e:	00 27       	eor	r16, r16
    3a30:	27 81       	ldd	r18, Z+7	; 0x07
    3a32:	02 2b       	or	r16, r18
    3a34:	d0 84       	ldd	r13, Z+8	; 0x08
			status = _uplink_payload.bytes[6];
    3a36:	9f 93       	push	r25
			
			printf("Temperature sent: %d\n", tem);
    3a38:	8f 93       	push	r24
    3a3a:	88 ea       	ldi	r24, 0xA8	; 168
    3a3c:	94 e0       	ldi	r25, 0x04	; 4
    3a3e:	9f 93       	push	r25
    3a40:	8f 93       	push	r24
    3a42:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3a46:	ff 92       	push	r15
			printf("Humidity sent: %d\n", hum);
    3a48:	ef 92       	push	r14
    3a4a:	8e eb       	ldi	r24, 0xBE	; 190
    3a4c:	94 e0       	ldi	r25, 0x04	; 4
    3a4e:	9f 93       	push	r25
    3a50:	8f 93       	push	r24
    3a52:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3a56:	1f 93       	push	r17
			printf("CO2 sent: %d\n", co2);
    3a58:	0f 93       	push	r16
    3a5a:	81 ed       	ldi	r24, 0xD1	; 209
    3a5c:	94 e0       	ldi	r25, 0x04	; 4
    3a5e:	9f 93       	push	r25
    3a60:	8f 93       	push	r24
    3a62:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3a66:	1f 92       	push	r1
			printf("Status sent: %d\n", status);
    3a68:	df 92       	push	r13
    3a6a:	8f ed       	ldi	r24, 0xDF	; 223
    3a6c:	94 e0       	ldi	r25, 0x04	; 4
    3a6e:	9f 93       	push	r25
    3a70:	8f 93       	push	r24
    3a72:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	de bf       	out	0x3e, r29	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	cd bf       	out	0x3d, r28	; 61
    3a80:	83 e0       	ldi	r24, 0x03	; 3

		}

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3a82:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3a86:	6f e9       	ldi	r22, 0x9F	; 159
    3a88:	76 e1       	ldi	r23, 0x16	; 22
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	ef d2       	rcall	.+1502   	; 0x406c <lora_driver_sendUploadMessage>
    3a8e:	db d4       	rcall	.+2486   	; 0x4446 <lora_driver_mapReturnCodeToText>
    3a90:	9f 93       	push	r25
    3a92:	8f 93       	push	r24
    3a94:	80 ef       	ldi	r24, 0xF0	; 240
    3a96:	94 e0       	ldi	r25, 0x04	; 4
    3a98:	9f 93       	push	r25
    3a9a:	8f 93       	push	r24
    3a9c:	0e 94 0b 33 	call	0x6616	; 0x6616 <printf>
    3aa0:	0f 90       	pop	r0
	}
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	9a cf       	rjmp	.-204    	; 0x39de <lora_handler_task+0x48>

00003aaa <setUplinkMessageBufferHandle>:
    3aaa:	90 93 9e 16 	sts	0x169E, r25	; 0x80169e <uplinkBufferHandle+0x1>

static lora_driver_payload_t _uplink_payload;
static MessageBufferHandle_t uplinkBufferHandle;

void setUplinkMessageBufferHandle(MessageBufferHandle_t uph){
	uplinkBufferHandle = uph;
    3aae:	80 93 9d 16 	sts	0x169D, r24	; 0x80169d <uplinkBufferHandle>
    3ab2:	08 95       	ret

00003ab4 <lora_handler_initialise>:
}

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3ab4:	ef 92       	push	r14
    3ab6:	ff 92       	push	r15
    3ab8:	0f 93       	push	r16
	xTaskCreate(
    3aba:	e1 2c       	mov	r14, r1
    3abc:	f1 2c       	mov	r15, r1
    3abe:	08 2f       	mov	r16, r24
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	48 e8       	ldi	r20, 0x88	; 136
    3ac6:	51 e0       	ldi	r21, 0x01	; 1
    3ac8:	65 e0       	ldi	r22, 0x05	; 5
    3aca:	75 e0       	ldi	r23, 0x05	; 5
    3acc:	8b ec       	ldi	r24, 0xCB	; 203
    3ace:	9c e1       	ldi	r25, 0x1C	; 28
    3ad0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3ad4:	0f 91       	pop	r16
    3ad6:	ff 90       	pop	r15
    3ad8:	ef 90       	pop	r14
    3ada:	08 95       	ret

00003adc <initializeSystem>:

/*-----------------------------------------------------------*/
void initializeSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3adc:	81 b1       	in	r24, 0x01	; 1
    3ade:	81 68       	ori	r24, 0x81	; 129
    3ae0:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <stdio_initialise>


	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3ae8:	85 e0       	ldi	r24, 0x05	; 5
    3aea:	0e 94 2c 28 	call	0x5058	; 0x5058 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3aee:	60 e0       	ldi	r22, 0x00	; 0
    3af0:	70 e0       	ldi	r23, 0x00	; 0
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	dd d1       	rcall	.+954    	; 0x3eb0 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3af6:	83 e0       	ldi	r24, 0x03	; 3
    3af8:	dd df       	rcall	.-70     	; 0x3ab4 <lora_handler_initialise>
	
	initialize_application();
    3afa:	0c 94 08 02 	jmp	0x410	; 0x410 <initialize_application>
    3afe:	08 95       	ret

00003b00 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
    3b00:	ed df       	rcall	.-38     	; 0x3adc <initializeSystem>
	printf("Program Started!!\n");
    3b02:	8c e0       	ldi	r24, 0x0C	; 12
    3b04:	95 e0       	ldi	r25, 0x05	; 5
    3b06:	0e 94 1f 33 	call	0x663e	; 0x663e <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3b0a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <vTaskStartScheduler>
    3b0e:	ff cf       	rjmp	.-2      	; 0x3b0e <main+0xe>

00003b10 <_hihTwiCallback>:
    3b10:	65 30       	cpi	r22, 0x05	; 5
    3b12:	f1 f4       	brne	.+60     	; 0x3b50 <_hihTwiCallback+0x40>
    3b14:	fa 01       	movw	r30, r20
    3b16:	80 81       	ld	r24, Z
    3b18:	8f 73       	andi	r24, 0x3F	; 63
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	98 2f       	mov	r25, r24
    3b1e:	88 27       	eor	r24, r24
    3b20:	21 81       	ldd	r18, Z+1	; 0x01
    3b22:	82 2b       	or	r24, r18
    3b24:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3b28:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3b2c:	82 81       	ldd	r24, Z+2	; 0x02
    3b2e:	f0 e4       	ldi	r31, 0x40	; 64
    3b30:	8f 9f       	mul	r24, r31
    3b32:	c0 01       	movw	r24, r0
    3b34:	11 24       	eor	r1, r1
    3b36:	fa 01       	movw	r30, r20
    3b38:	23 81       	ldd	r18, Z+3	; 0x03
    3b3a:	26 95       	lsr	r18
    3b3c:	26 95       	lsr	r18
    3b3e:	82 2b       	or	r24, r18
    3b40:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3b44:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3b48:	81 e0       	ldi	r24, 0x01	; 1
    3b4a:	80 93 b5 16 	sts	0x16B5, r24	; 0x8016b5 <_measuringIsReady>
    3b4e:	08 95       	ret
    3b50:	64 30       	cpi	r22, 0x04	; 4
    3b52:	51 f0       	breq	.+20     	; 0x3b68 <_hihTwiCallback+0x58>
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	90 e4       	ldi	r25, 0x40	; 64
    3b58:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3b5c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3b60:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3b64:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3b68:	08 95       	ret

00003b6a <hih8120_initialise>:
    3b6a:	0f 93       	push	r16
    3b6c:	1f 93       	push	r17
    3b6e:	08 e8       	ldi	r16, 0x88	; 136
    3b70:	1d e1       	ldi	r17, 0x1D	; 29
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	34 e2       	ldi	r19, 0x24	; 36
    3b76:	44 ef       	ldi	r20, 0xF4	; 244
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	60 e0       	ldi	r22, 0x00	; 0
    3b7c:	87 e2       	ldi	r24, 0x27	; 39
    3b7e:	0e 94 12 29 	call	0x5224	; 0x5224 <twiCreate>
    3b82:	90 93 b7 16 	sts	0x16B7, r25	; 0x8016b7 <_hih8120Handler+0x1>
    3b86:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <_hih8120Handler>
    3b8a:	21 e0       	ldi	r18, 0x01	; 1
    3b8c:	89 2b       	or	r24, r25
    3b8e:	09 f0       	breq	.+2      	; 0x3b92 <hih8120_initialise+0x28>
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	82 2f       	mov	r24, r18
    3b94:	1f 91       	pop	r17
    3b96:	0f 91       	pop	r16
    3b98:	08 95       	ret

00003b9a <hih8120_wakeup>:
    3b9a:	80 91 b6 16 	lds	r24, 0x16B6	; 0x8016b6 <_hih8120Handler>
    3b9e:	90 91 b7 16 	lds	r25, 0x16B7	; 0x8016b7 <_hih8120Handler+0x1>
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	59 f0       	breq	.+22     	; 0x3bbc <hih8120_wakeup+0x22>
    3ba6:	40 e0       	ldi	r20, 0x00	; 0
    3ba8:	60 e0       	ldi	r22, 0x00	; 0
    3baa:	70 e0       	ldi	r23, 0x00	; 0
    3bac:	0e 94 63 29 	call	0x52c6	; 0x52c6 <twiTransmit>
    3bb0:	84 30       	cpi	r24, 0x04	; 4
    3bb2:	31 f4       	brne	.+12     	; 0x3bc0 <hih8120_wakeup+0x26>
    3bb4:	10 92 b5 16 	sts	0x16B5, r1	; 0x8016b5 <_measuringIsReady>
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	08 95       	ret
    3bbc:	82 e0       	ldi	r24, 0x02	; 2
    3bbe:	08 95       	ret
    3bc0:	83 e0       	ldi	r24, 0x03	; 3
    3bc2:	08 95       	ret

00003bc4 <hih8120_measure>:
    3bc4:	80 91 b6 16 	lds	r24, 0x16B6	; 0x8016b6 <_hih8120Handler>
    3bc8:	90 91 b7 16 	lds	r25, 0x16B7	; 0x8016b7 <_hih8120Handler+0x1>
    3bcc:	00 97       	sbiw	r24, 0x00	; 0
    3bce:	39 f0       	breq	.+14     	; 0x3bde <hih8120_measure+0x1a>
    3bd0:	64 e0       	ldi	r22, 0x04	; 4
    3bd2:	0e 94 af 29 	call	0x535e	; 0x535e <twiReceive>
    3bd6:	85 30       	cpi	r24, 0x05	; 5
    3bd8:	21 f0       	breq	.+8      	; 0x3be2 <hih8120_measure+0x1e>
    3bda:	83 e0       	ldi	r24, 0x03	; 3
    3bdc:	08 95       	ret
    3bde:	82 e0       	ldi	r24, 0x02	; 2
    3be0:	08 95       	ret
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	08 95       	ret

00003be6 <hih8120_getHumidity>:
    3be6:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3bea:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <__floatunsisf>
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	48 ec       	ldi	r20, 0xC8	; 200
    3bfc:	52 e4       	ldi	r21, 0x42	; 66
    3bfe:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <__mulsf3>
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	38 ef       	ldi	r19, 0xF8	; 248
    3c06:	4f e7       	ldi	r20, 0x7F	; 127
    3c08:	56 e4       	ldi	r21, 0x46	; 70
    3c0a:	0c 94 a9 2e 	jmp	0x5d52	; 0x5d52 <__divsf3>
    3c0e:	08 95       	ret

00003c10 <hih8120_getHumidityPercent_x10>:
    3c10:	ea df       	rcall	.-44     	; 0x3be6 <hih8120_getHumidity>
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	40 e2       	ldi	r20, 0x20	; 32
    3c18:	51 e4       	ldi	r21, 0x41	; 65
    3c1a:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <__mulsf3>
    3c1e:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__fixunssfsi>
    3c22:	cb 01       	movw	r24, r22
    3c24:	08 95       	ret

00003c26 <hih8120_getTemperature>:
    3c26:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3c2a:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <__floatunsisf>
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	45 e2       	ldi	r20, 0x25	; 37
    3c3c:	53 e4       	ldi	r21, 0x43	; 67
    3c3e:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <__mulsf3>
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	38 ef       	ldi	r19, 0xF8	; 248
    3c46:	4f e7       	ldi	r20, 0x7F	; 127
    3c48:	56 e4       	ldi	r21, 0x46	; 70
    3c4a:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__divsf3>
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	40 e2       	ldi	r20, 0x20	; 32
    3c54:	52 e4       	ldi	r21, 0x42	; 66
    3c56:	0c 94 44 2e 	jmp	0x5c88	; 0x5c88 <__subsf3>
    3c5a:	08 95       	ret

00003c5c <hih8120_getTemperature_x10>:
    3c5c:	e4 df       	rcall	.-56     	; 0x3c26 <hih8120_getTemperature>
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e2       	ldi	r20, 0x20	; 32
    3c64:	51 e4       	ldi	r21, 0x41	; 65
    3c66:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <__mulsf3>
    3c6a:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__fixsfsi>
    3c6e:	cb 01       	movw	r24, r22
    3c70:	08 95       	ret

00003c72 <_serialCallBack>:
    3c72:	0f 93       	push	r16
    3c74:	1f 93       	push	r17
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    3c7a:	1f 92       	push	r1
    3c7c:	1f 92       	push	r1
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	8c 01       	movw	r16, r24
    3c84:	19 82       	std	Y+1, r1	; 0x01
    3c86:	2d c0       	rjmp	.+90     	; 0x3ce2 <_serialCallBack+0x70>
    3c88:	e0 91 ef 16 	lds	r30, 0x16EF	; 0x8016ef <rec_buf_inp.2878>
    3c8c:	ec 32       	cpi	r30, 0x2C	; 44
    3c8e:	50 f4       	brcc	.+20     	; 0x3ca4 <_serialCallBack+0x32>
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	8e 0f       	add	r24, r30
    3c94:	80 93 ef 16 	sts	0x16EF, r24	; 0x8016ef <rec_buf_inp.2878>
    3c98:	f0 e0       	ldi	r31, 0x00	; 0
    3c9a:	ef 5d       	subi	r30, 0xDF	; 223
    3c9c:	f8 4e       	sbci	r31, 0xE8	; 232
    3c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca0:	80 83       	st	Z, r24
    3ca2:	02 c0       	rjmp	.+4      	; 0x3ca8 <_serialCallBack+0x36>
    3ca4:	10 92 ef 16 	sts	0x16EF, r1	; 0x8016ef <rec_buf_inp.2878>
    3ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    3caa:	8a 30       	cpi	r24, 0x0A	; 10
    3cac:	d1 f4       	brne	.+52     	; 0x3ce2 <_serialCallBack+0x70>
    3cae:	40 91 ef 16 	lds	r20, 0x16EF	; 0x8016ef <rec_buf_inp.2878>
    3cb2:	50 e0       	ldi	r21, 0x00	; 0
    3cb4:	fa 01       	movw	r30, r20
    3cb6:	e1 5e       	subi	r30, 0xE1	; 225
    3cb8:	f8 4e       	sbci	r31, 0xE8	; 232
    3cba:	10 82       	st	Z, r1
    3cbc:	41 50       	subi	r20, 0x01	; 1
    3cbe:	51 09       	sbc	r21, r1
    3cc0:	9e 01       	movw	r18, r28
    3cc2:	2f 5f       	subi	r18, 0xFF	; 255
    3cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc6:	61 e2       	ldi	r22, 0x21	; 33
    3cc8:	77 e1       	ldi	r23, 0x17	; 23
    3cca:	80 91 f2 16 	lds	r24, 0x16F2	; 0x8016f2 <_serialReplyBufferHandle>
    3cce:	90 91 f3 16 	lds	r25, 0x16F3	; 0x8016f3 <_serialReplyBufferHandle+0x1>
    3cd2:	0e 94 9d 0b 	call	0x173a	; 0x173a <xStreamBufferSendFromISR>
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
    3cd8:	81 11       	cpse	r24, r1
    3cda:	0e 94 b4 05 	call	0xb68	; 0xb68 <vPortYield>
    3cde:	10 92 ef 16 	sts	0x16EF, r1	; 0x8016ef <rec_buf_inp.2878>
    3ce2:	be 01       	movw	r22, r28
    3ce4:	6e 5f       	subi	r22, 0xFE	; 254
    3ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce8:	c8 01       	movw	r24, r16
    3cea:	19 d6       	rcall	.+3122   	; 0x491e <serial_getByte>
    3cec:	88 23       	and	r24, r24
    3cee:	61 f2       	breq	.-104    	; 0x3c88 <_serialCallBack+0x16>
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	df 91       	pop	r29
    3cf6:	cf 91       	pop	r28
    3cf8:	1f 91       	pop	r17
    3cfa:	0f 91       	pop	r16
    3cfc:	08 95       	ret

00003cfe <_uploadMessage>:
    3cfe:	0f 93       	push	r16
    3d00:	1f 93       	push	r17
    3d02:	cf 93       	push	r28
    3d04:	df 93       	push	r29
    3d06:	8c 01       	movw	r16, r24
    3d08:	eb 01       	movw	r28, r22
    3d0a:	80 91 f2 16 	lds	r24, 0x16F2	; 0x8016f2 <_serialReplyBufferHandle>
    3d0e:	90 91 f3 16 	lds	r25, 0x16F3	; 0x8016f3 <_serialReplyBufferHandle+0x1>
    3d12:	0e 94 a8 0a 	call	0x1550	; 0x1550 <xStreamBufferReset>
    3d16:	b8 01       	movw	r22, r16
    3d18:	88 eb       	ldi	r24, 0xB8	; 184
    3d1a:	96 e1       	ldi	r25, 0x16	; 22
    3d1c:	0e 94 a5 32 	call	0x654a	; 0x654a <strcpy>
    3d20:	20 97       	sbiw	r28, 0x00	; 0
    3d22:	79 f0       	breq	.+30     	; 0x3d42 <_uploadMessage+0x44>
    3d24:	e8 eb       	ldi	r30, 0xB8	; 184
    3d26:	f6 e1       	ldi	r31, 0x16	; 22
    3d28:	01 90       	ld	r0, Z+
    3d2a:	00 20       	and	r0, r0
    3d2c:	e9 f7       	brne	.-6      	; 0x3d28 <_uploadMessage+0x2a>
    3d2e:	31 97       	sbiw	r30, 0x01	; 1
    3d30:	80 e2       	ldi	r24, 0x20	; 32
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	91 83       	std	Z+1, r25	; 0x01
    3d36:	80 83       	st	Z, r24
    3d38:	be 01       	movw	r22, r28
    3d3a:	88 eb       	ldi	r24, 0xB8	; 184
    3d3c:	96 e1       	ldi	r25, 0x16	; 22
    3d3e:	0e 94 9a 32 	call	0x6534	; 0x6534 <strcat>
    3d42:	e8 eb       	ldi	r30, 0xB8	; 184
    3d44:	f6 e1       	ldi	r31, 0x16	; 22
    3d46:	df 01       	movw	r26, r30
    3d48:	0d 90       	ld	r0, X+
    3d4a:	00 20       	and	r0, r0
    3d4c:	e9 f7       	brne	.-6      	; 0x3d48 <_uploadMessage+0x4a>
    3d4e:	11 97       	sbiw	r26, 0x01	; 1
    3d50:	8d e0       	ldi	r24, 0x0D	; 13
    3d52:	9a e0       	ldi	r25, 0x0A	; 10
    3d54:	11 96       	adiw	r26, 0x01	; 1
    3d56:	9c 93       	st	X, r25
    3d58:	8e 93       	st	-X, r24
    3d5a:	12 96       	adiw	r26, 0x02	; 2
    3d5c:	1c 92       	st	X, r1
    3d5e:	01 90       	ld	r0, Z+
    3d60:	00 20       	and	r0, r0
    3d62:	e9 f7       	brne	.-6      	; 0x3d5e <_uploadMessage+0x60>
    3d64:	31 97       	sbiw	r30, 0x01	; 1
    3d66:	e8 5b       	subi	r30, 0xB8	; 184
    3d68:	f6 41       	sbci	r31, 0x16	; 22
    3d6a:	ae 2f       	mov	r26, r30
    3d6c:	88 eb       	ldi	r24, 0xB8	; 184
    3d6e:	96 e1       	ldi	r25, 0x16	; 22
    3d70:	ac 01       	movw	r20, r24
    3d72:	6a 2f       	mov	r22, r26
    3d74:	80 91 f4 16 	lds	r24, 0x16F4	; 0x8016f4 <_rn2483_serial>
    3d78:	90 91 f5 16 	lds	r25, 0x16F5	; 0x8016f5 <_rn2483_serial+0x1>
    3d7c:	7b d5       	rcall	.+2806   	; 0x4874 <serial_sendBytes>
    3d7e:	81 11       	cpse	r24, r1
    3d80:	11 c0       	rjmp	.+34     	; 0x3da4 <_uploadMessage+0xa6>
    3d82:	08 e2       	ldi	r16, 0x28	; 40
    3d84:	15 e0       	ldi	r17, 0x05	; 5
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	4d e2       	ldi	r20, 0x2D	; 45
    3d8c:	50 e0       	ldi	r21, 0x00	; 0
    3d8e:	6b e7       	ldi	r22, 0x7B	; 123
    3d90:	77 e1       	ldi	r23, 0x17	; 23
    3d92:	80 91 f2 16 	lds	r24, 0x16F2	; 0x8016f2 <_serialReplyBufferHandle>
    3d96:	90 91 f3 16 	lds	r25, 0x16F3	; 0x8016f3 <_serialReplyBufferHandle+0x1>
    3d9a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xStreamBufferReceive>
    3d9e:	8b e7       	ldi	r24, 0x7B	; 123
    3da0:	97 e1       	ldi	r25, 0x17	; 23
    3da2:	02 c0       	rjmp	.+4      	; 0x3da8 <_uploadMessage+0xaa>
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	df 91       	pop	r29
    3daa:	cf 91       	pop	r28
    3dac:	1f 91       	pop	r17
    3dae:	0f 91       	pop	r16
    3db0:	08 95       	ret

00003db2 <_reply2ReturnCode>:
    3db2:	2f 92       	push	r2
    3db4:	3f 92       	push	r3
    3db6:	4f 92       	push	r4
    3db8:	5f 92       	push	r5
    3dba:	6f 92       	push	r6
    3dbc:	7f 92       	push	r7
    3dbe:	8f 92       	push	r8
    3dc0:	9f 92       	push	r9
    3dc2:	af 92       	push	r10
    3dc4:	bf 92       	push	r11
    3dc6:	cf 92       	push	r12
    3dc8:	df 92       	push	r13
    3dca:	ef 92       	push	r14
    3dcc:	ff 92       	push	r15
    3dce:	0f 93       	push	r16
    3dd0:	1f 93       	push	r17
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	5c 01       	movw	r10, r24
    3dd8:	fc 01       	movw	r30, r24
    3dda:	01 90       	ld	r0, Z+
    3ddc:	00 20       	and	r0, r0
    3dde:	e9 f7       	brne	.-6      	; 0x3dda <_reply2ReturnCode+0x28>
    3de0:	31 97       	sbiw	r30, 0x01	; 1
    3de2:	6f 01       	movw	r12, r30
    3de4:	c8 1a       	sub	r12, r24
    3de6:	d9 0a       	sbc	r13, r25
    3de8:	5c 2c       	mov	r5, r12
    3dea:	0f 2e       	mov	r0, r31
    3dec:	f7 eb       	ldi	r31, 0xB7	; 183
    3dee:	8f 2e       	mov	r8, r31
    3df0:	f7 e0       	ldi	r31, 0x07	; 7
    3df2:	9f 2e       	mov	r9, r31
    3df4:	f0 2d       	mov	r31, r0
    3df6:	e1 2c       	mov	r14, r1
    3df8:	f1 2c       	mov	r15, r1
    3dfa:	4c 2c       	mov	r4, r12
    3dfc:	37 01       	movw	r6, r14
    3dfe:	f4 01       	movw	r30, r8
    3e00:	01 81       	ldd	r16, Z+1	; 0x01
    3e02:	12 81       	ldd	r17, Z+2	; 0x02
    3e04:	e8 01       	movw	r28, r16
    3e06:	09 90       	ld	r0, Y+
    3e08:	00 20       	and	r0, r0
    3e0a:	e9 f7       	brne	.-6      	; 0x3e06 <_reply2ReturnCode+0x54>
    3e0c:	21 97       	sbiw	r28, 0x01	; 1
    3e0e:	c0 1b       	sub	r28, r16
    3e10:	d1 0b       	sbc	r29, r17
    3e12:	3c 2e       	mov	r3, r28
    3e14:	f9 e0       	ldi	r31, 0x09	; 9
    3e16:	cf 16       	cp	r12, r31
    3e18:	d1 04       	cpc	r13, r1
    3e1a:	58 f0       	brcs	.+22     	; 0x3e32 <_reply2ReturnCode+0x80>
    3e1c:	f4 01       	movw	r30, r8
    3e1e:	20 80       	ld	r2, Z
    3e20:	fe e0       	ldi	r31, 0x0E	; 14
    3e22:	2f 12       	cpse	r2, r31
    3e24:	06 c0       	rjmp	.+12     	; 0x3e32 <_reply2ReturnCode+0x80>
    3e26:	b8 01       	movw	r22, r16
    3e28:	c5 01       	movw	r24, r10
    3e2a:	0e 94 75 32 	call	0x64ea	; 0x64ea <strcasestr>
    3e2e:	89 2b       	or	r24, r25
    3e30:	09 f5       	brne	.+66     	; 0x3e74 <_reply2ReturnCode+0xc2>
    3e32:	44 2d       	mov	r20, r4
    3e34:	35 14       	cp	r3, r5
    3e36:	08 f4       	brcc	.+2      	; 0x3e3a <_reply2ReturnCode+0x88>
    3e38:	4c 2f       	mov	r20, r28
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	b8 01       	movw	r22, r16
    3e3e:	c5 01       	movw	r24, r10
    3e40:	0e 94 ac 32 	call	0x6558	; 0x6558 <strncasecmp>
    3e44:	89 2b       	or	r24, r25
    3e46:	49 f4       	brne	.+18     	; 0x3e5a <_reply2ReturnCode+0xa8>
    3e48:	f3 01       	movw	r30, r6
    3e4a:	ee 0f       	add	r30, r30
    3e4c:	ff 1f       	adc	r31, r31
    3e4e:	e6 0d       	add	r30, r6
    3e50:	f7 1d       	adc	r31, r7
    3e52:	e9 54       	subi	r30, 0x49	; 73
    3e54:	f8 4f       	sbci	r31, 0xF8	; 248
    3e56:	20 80       	ld	r2, Z
    3e58:	0d c0       	rjmp	.+26     	; 0x3e74 <_reply2ReturnCode+0xc2>
    3e5a:	8f ef       	ldi	r24, 0xFF	; 255
    3e5c:	e8 1a       	sub	r14, r24
    3e5e:	f8 0a       	sbc	r15, r24
    3e60:	e3 e0       	ldi	r30, 0x03	; 3
    3e62:	8e 0e       	add	r8, r30
    3e64:	91 1c       	adc	r9, r1
    3e66:	f1 e1       	ldi	r31, 0x11	; 17
    3e68:	ef 16       	cp	r14, r31
    3e6a:	f1 04       	cpc	r15, r1
    3e6c:	39 f6       	brne	.-114    	; 0x3dfc <_reply2ReturnCode+0x4a>
    3e6e:	68 94       	set
    3e70:	22 24       	eor	r2, r2
    3e72:	24 f8       	bld	r2, 4
    3e74:	82 2d       	mov	r24, r2
    3e76:	df 91       	pop	r29
    3e78:	cf 91       	pop	r28
    3e7a:	1f 91       	pop	r17
    3e7c:	0f 91       	pop	r16
    3e7e:	ff 90       	pop	r15
    3e80:	ef 90       	pop	r14
    3e82:	df 90       	pop	r13
    3e84:	cf 90       	pop	r12
    3e86:	bf 90       	pop	r11
    3e88:	af 90       	pop	r10
    3e8a:	9f 90       	pop	r9
    3e8c:	8f 90       	pop	r8
    3e8e:	7f 90       	pop	r7
    3e90:	6f 90       	pop	r6
    3e92:	5f 90       	pop	r5
    3e94:	4f 90       	pop	r4
    3e96:	3f 90       	pop	r3
    3e98:	2f 90       	pop	r2
    3e9a:	08 95       	ret

00003e9c <_uploadMessageRc>:
    3e9c:	30 df       	rcall	.-416    	; 0x3cfe <_uploadMessage>
    3e9e:	89 cf       	rjmp	.-238    	; 0x3db2 <_reply2ReturnCode>
    3ea0:	08 95       	ret

00003ea2 <lora_driver_flushBuffers>:
    3ea2:	80 91 f2 16 	lds	r24, 0x16F2	; 0x8016f2 <_serialReplyBufferHandle>
    3ea6:	90 91 f3 16 	lds	r25, 0x16F3	; 0x8016f3 <_serialReplyBufferHandle+0x1>
    3eaa:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <xStreamBufferReset>
    3eae:	08 95       	ret

00003eb0 <lora_driver_initialise>:
    3eb0:	8f 92       	push	r8
    3eb2:	9f 92       	push	r9
    3eb4:	af 92       	push	r10
    3eb6:	cf 92       	push	r12
    3eb8:	ef 92       	push	r14
    3eba:	0f 93       	push	r16
    3ebc:	1f 93       	push	r17
    3ebe:	cf 93       	push	r28
    3ec0:	c8 2f       	mov	r28, r24
    3ec2:	8b 01       	movw	r16, r22
    3ec4:	41 e0       	ldi	r20, 0x01	; 1
    3ec6:	60 e0       	ldi	r22, 0x00	; 0
    3ec8:	70 e0       	ldi	r23, 0x00	; 0
    3eca:	88 ec       	ldi	r24, 0xC8	; 200
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	0e 94 76 0a 	call	0x14ec	; 0x14ec <xStreamBufferGenericCreate>
    3ed2:	90 93 f3 16 	sts	0x16F3, r25	; 0x8016f3 <_serialReplyBufferHandle+0x1>
    3ed6:	80 93 f2 16 	sts	0x16F2, r24	; 0x8016f2 <_serialReplyBufferHandle>
    3eda:	10 93 f1 16 	sts	0x16F1, r17	; 0x8016f1 <_downlinkMessageBuffer+0x1>
    3ede:	00 93 f0 16 	sts	0x16F0, r16	; 0x8016f0 <_downlinkMessageBuffer>
    3ee2:	0f 2e       	mov	r0, r31
    3ee4:	f9 e3       	ldi	r31, 0x39	; 57
    3ee6:	8f 2e       	mov	r8, r31
    3ee8:	fe e1       	ldi	r31, 0x1E	; 30
    3eea:	9f 2e       	mov	r9, r31
    3eec:	f0 2d       	mov	r31, r0
    3eee:	68 94       	set
    3ef0:	aa 24       	eor	r10, r10
    3ef2:	a6 f8       	bld	r10, 6
    3ef4:	68 94       	set
    3ef6:	cc 24       	eor	r12, r12
    3ef8:	c6 f8       	bld	r12, 6
    3efa:	e1 2c       	mov	r14, r1
    3efc:	00 e0       	ldi	r16, 0x00	; 0
    3efe:	23 e0       	ldi	r18, 0x03	; 3
    3f00:	40 e0       	ldi	r20, 0x00	; 0
    3f02:	51 ee       	ldi	r21, 0xE1	; 225
    3f04:	60 e0       	ldi	r22, 0x00	; 0
    3f06:	70 e0       	ldi	r23, 0x00	; 0
    3f08:	8c 2f       	mov	r24, r28
    3f0a:	e3 d3       	rcall	.+1990   	; 0x46d2 <serial_create>
    3f0c:	90 93 f5 16 	sts	0x16F5, r25	; 0x8016f5 <_rn2483_serial+0x1>
    3f10:	80 93 f4 16 	sts	0x16F4, r24	; 0x8016f4 <_rn2483_serial>
    3f14:	e7 e0       	ldi	r30, 0x07	; 7
    3f16:	f1 e0       	ldi	r31, 0x01	; 1
    3f18:	80 81       	ld	r24, Z
    3f1a:	80 61       	ori	r24, 0x10	; 16
    3f1c:	80 83       	st	Z, r24
    3f1e:	cf 91       	pop	r28
    3f20:	1f 91       	pop	r17
    3f22:	0f 91       	pop	r16
    3f24:	ef 90       	pop	r14
    3f26:	cf 90       	pop	r12
    3f28:	af 90       	pop	r10
    3f2a:	9f 90       	pop	r9
    3f2c:	8f 90       	pop	r8
    3f2e:	08 95       	ret

00003f30 <lora_driver_resetRn2483>:
    3f30:	88 23       	and	r24, r24
    3f32:	31 f0       	breq	.+12     	; 0x3f40 <lora_driver_resetRn2483+0x10>
    3f34:	e8 e0       	ldi	r30, 0x08	; 8
    3f36:	f1 e0       	ldi	r31, 0x01	; 1
    3f38:	80 81       	ld	r24, Z
    3f3a:	8f 7e       	andi	r24, 0xEF	; 239
    3f3c:	80 83       	st	Z, r24
    3f3e:	08 95       	ret
    3f40:	e8 e0       	ldi	r30, 0x08	; 8
    3f42:	f1 e0       	ldi	r31, 0x01	; 1
    3f44:	80 81       	ld	r24, Z
    3f46:	80 61       	ori	r24, 0x10	; 16
    3f48:	80 83       	st	Z, r24
    3f4a:	08 95       	ret

00003f4c <lora_driver_rn2483FactoryReset>:
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	70 e0       	ldi	r23, 0x00	; 0
    3f50:	8d e3       	ldi	r24, 0x3D	; 61
    3f52:	95 e0       	ldi	r25, 0x05	; 5
    3f54:	d4 de       	rcall	.-600    	; 0x3cfe <_uploadMessage>
    3f56:	eb e7       	ldi	r30, 0x7B	; 123
    3f58:	f7 e1       	ldi	r31, 0x17	; 23
    3f5a:	01 90       	ld	r0, Z+
    3f5c:	00 20       	and	r0, r0
    3f5e:	e9 f7       	brne	.-6      	; 0x3f5a <lora_driver_rn2483FactoryReset+0xe>
    3f60:	31 97       	sbiw	r30, 0x01	; 1
    3f62:	eb 57       	subi	r30, 0x7B	; 123
    3f64:	f7 41       	sbci	r31, 0x17	; 23
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	75 97       	sbiw	r30, 0x15	; 21
    3f6a:	08 f0       	brcs	.+2      	; 0x3f6e <lora_driver_rn2483FactoryReset+0x22>
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	08 95       	ret

00003f70 <lora_driver_getRn2483Hweui>:
    3f70:	cf 93       	push	r28
    3f72:	df 93       	push	r29
    3f74:	ec 01       	movw	r28, r24
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	70 e0       	ldi	r23, 0x00	; 0
    3f7a:	8e e4       	ldi	r24, 0x4E	; 78
    3f7c:	95 e0       	ldi	r25, 0x05	; 5
    3f7e:	bf de       	rcall	.-642    	; 0x3cfe <_uploadMessage>
    3f80:	eb e7       	ldi	r30, 0x7B	; 123
    3f82:	f7 e1       	ldi	r31, 0x17	; 23
    3f84:	01 90       	ld	r0, Z+
    3f86:	00 20       	and	r0, r0
    3f88:	e9 f7       	brne	.-6      	; 0x3f84 <lora_driver_getRn2483Hweui+0x14>
    3f8a:	ec 58       	subi	r30, 0x8C	; 140
    3f8c:	f7 41       	sbci	r31, 0x17	; 23
    3f8e:	39 f4       	brne	.+14     	; 0x3f9e <lora_driver_getRn2483Hweui+0x2e>
    3f90:	6b e7       	ldi	r22, 0x7B	; 123
    3f92:	77 e1       	ldi	r23, 0x17	; 23
    3f94:	ce 01       	movw	r24, r28
    3f96:	0e 94 a5 32 	call	0x654a	; 0x654a <strcpy>
    3f9a:	80 e0       	ldi	r24, 0x00	; 0
    3f9c:	02 c0       	rjmp	.+4      	; 0x3fa2 <lora_driver_getRn2483Hweui+0x32>
    3f9e:	18 82       	st	Y, r1
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	df 91       	pop	r29
    3fa4:	cf 91       	pop	r28
    3fa6:	08 95       	ret

00003fa8 <lora_driver_setDeviceIdentifier>:
    3fa8:	fc 01       	movw	r30, r24
    3faa:	01 90       	ld	r0, Z+
    3fac:	00 20       	and	r0, r0
    3fae:	e9 f7       	brne	.-6      	; 0x3faa <lora_driver_setDeviceIdentifier+0x2>
    3fb0:	9f 01       	movw	r18, r30
    3fb2:	21 51       	subi	r18, 0x11	; 17
    3fb4:	31 09       	sbc	r19, r1
    3fb6:	28 17       	cp	r18, r24
    3fb8:	39 07       	cpc	r19, r25
    3fba:	29 f4       	brne	.+10     	; 0x3fc6 <lora_driver_setDeviceIdentifier+0x1e>
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	8c e7       	ldi	r24, 0x7C	; 124
    3fc0:	95 e0       	ldi	r25, 0x05	; 5
    3fc2:	6c cf       	rjmp	.-296    	; 0x3e9c <_uploadMessageRc>
    3fc4:	08 95       	ret
    3fc6:	89 e0       	ldi	r24, 0x09	; 9
    3fc8:	08 95       	ret

00003fca <lora_driver_setApplicationIdentifier>:
    3fca:	fc 01       	movw	r30, r24
    3fcc:	01 90       	ld	r0, Z+
    3fce:	00 20       	and	r0, r0
    3fd0:	e9 f7       	brne	.-6      	; 0x3fcc <lora_driver_setApplicationIdentifier+0x2>
    3fd2:	9f 01       	movw	r18, r30
    3fd4:	21 51       	subi	r18, 0x11	; 17
    3fd6:	31 09       	sbc	r19, r1
    3fd8:	28 17       	cp	r18, r24
    3fda:	39 07       	cpc	r19, r25
    3fdc:	29 f4       	brne	.+10     	; 0x3fe8 <lora_driver_setApplicationIdentifier+0x1e>
    3fde:	bc 01       	movw	r22, r24
    3fe0:	8b e8       	ldi	r24, 0x8B	; 139
    3fe2:	95 e0       	ldi	r25, 0x05	; 5
    3fe4:	5b cf       	rjmp	.-330    	; 0x3e9c <_uploadMessageRc>
    3fe6:	08 95       	ret
    3fe8:	89 e0       	ldi	r24, 0x09	; 9
    3fea:	08 95       	ret

00003fec <lora_driver_setApplicationKey>:
    3fec:	fc 01       	movw	r30, r24
    3fee:	01 90       	ld	r0, Z+
    3ff0:	00 20       	and	r0, r0
    3ff2:	e9 f7       	brne	.-6      	; 0x3fee <lora_driver_setApplicationKey+0x2>
    3ff4:	9f 01       	movw	r18, r30
    3ff6:	21 52       	subi	r18, 0x21	; 33
    3ff8:	31 09       	sbc	r19, r1
    3ffa:	28 17       	cp	r18, r24
    3ffc:	39 07       	cpc	r19, r25
    3ffe:	29 f4       	brne	.+10     	; 0x400a <lora_driver_setApplicationKey+0x1e>
    4000:	bc 01       	movw	r22, r24
    4002:	8a e9       	ldi	r24, 0x9A	; 154
    4004:	95 e0       	ldi	r25, 0x05	; 5
    4006:	4a cf       	rjmp	.-364    	; 0x3e9c <_uploadMessageRc>
    4008:	08 95       	ret
    400a:	89 e0       	ldi	r24, 0x09	; 9
    400c:	08 95       	ret

0000400e <lora_driver_saveMac>:
    400e:	60 e0       	ldi	r22, 0x00	; 0
    4010:	70 e0       	ldi	r23, 0x00	; 0
    4012:	89 ed       	ldi	r24, 0xD9	; 217
    4014:	95 e0       	ldi	r25, 0x05	; 5
    4016:	42 cf       	rjmp	.-380    	; 0x3e9c <_uploadMessageRc>
    4018:	08 95       	ret

0000401a <lora_driver_join>:
    401a:	0f 93       	push	r16
    401c:	1f 93       	push	r17
    401e:	e8 2f       	mov	r30, r24
    4020:	f0 e0       	ldi	r31, 0x00	; 0
    4022:	ee 0f       	add	r30, r30
    4024:	ff 1f       	adc	r31, r31
    4026:	ed 54       	subi	r30, 0x4D	; 77
    4028:	f8 4f       	sbci	r31, 0xF8	; 248
    402a:	60 81       	ld	r22, Z
    402c:	71 81       	ldd	r23, Z+1	; 0x01
    402e:	82 ee       	ldi	r24, 0xE2	; 226
    4030:	95 e0       	ldi	r25, 0x05	; 5
    4032:	34 df       	rcall	.-408    	; 0x3e9c <_uploadMessageRc>
    4034:	81 11       	cpse	r24, r1
    4036:	14 c0       	rjmp	.+40     	; 0x4060 <lora_driver_join+0x46>
    4038:	08 e2       	ldi	r16, 0x28	; 40
    403a:	15 e0       	ldi	r17, 0x05	; 5
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	4d e2       	ldi	r20, 0x2D	; 45
    4042:	50 e0       	ldi	r21, 0x00	; 0
    4044:	6b e7       	ldi	r22, 0x7B	; 123
    4046:	77 e1       	ldi	r23, 0x17	; 23
    4048:	80 91 f2 16 	lds	r24, 0x16F2	; 0x8016f2 <_serialReplyBufferHandle>
    404c:	90 91 f3 16 	lds	r25, 0x16F3	; 0x8016f3 <_serialReplyBufferHandle+0x1>
    4050:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xStreamBufferReceive>
    4054:	88 23       	and	r24, r24
    4056:	21 f0       	breq	.+8      	; 0x4060 <lora_driver_join+0x46>
    4058:	8b e7       	ldi	r24, 0x7B	; 123
    405a:	97 e1       	ldi	r25, 0x17	; 23
    405c:	aa de       	rcall	.-684    	; 0x3db2 <_reply2ReturnCode>
    405e:	03 c0       	rjmp	.+6      	; 0x4066 <lora_driver_join+0x4c>
    4060:	8b e7       	ldi	r24, 0x7B	; 123
    4062:	97 e1       	ldi	r25, 0x17	; 23
    4064:	a6 de       	rcall	.-692    	; 0x3db2 <_reply2ReturnCode>
    4066:	1f 91       	pop	r17
    4068:	0f 91       	pop	r16
    406a:	08 95       	ret

0000406c <lora_driver_sendUploadMessage>:
    406c:	0f 93       	push	r16
    406e:	1f 93       	push	r17
    4070:	cf 93       	push	r28
    4072:	df 93       	push	r29
    4074:	1f 92       	push	r1
    4076:	cd b7       	in	r28, 0x3d	; 61
    4078:	de b7       	in	r29, 0x3e	; 62
    407a:	db 01       	movw	r26, r22
    407c:	11 96       	adiw	r26, 0x01	; 1
    407e:	9c 91       	ld	r25, X
    4080:	11 97       	sbiw	r26, 0x01	; 1
    4082:	95 31       	cpi	r25, 0x15	; 21
    4084:	08 f0       	brcs	.+2      	; 0x4088 <lora_driver_sendUploadMessage+0x1c>
    4086:	b4 c0       	rjmp	.+360    	; 0x41f0 <lora_driver_sendUploadMessage+0x184>
    4088:	99 23       	and	r25, r25
    408a:	81 f1       	breq	.+96     	; 0x40ec <lora_driver_sendUploadMessage+0x80>
    408c:	60 e0       	ldi	r22, 0x00	; 0
    408e:	70 e0       	ldi	r23, 0x00	; 0
    4090:	27 2f       	mov	r18, r23
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	46 2f       	mov	r20, r22
    4096:	50 e0       	ldi	r21, 0x00	; 0
    4098:	fd 01       	movw	r30, r26
    409a:	e4 0f       	add	r30, r20
    409c:	f5 1f       	adc	r31, r21
    409e:	92 81       	ldd	r25, Z+2	; 0x02
    40a0:	92 95       	swap	r25
    40a2:	9f 70       	andi	r25, 0x0F	; 15
    40a4:	9a 30       	cpi	r25, 0x0A	; 10
    40a6:	10 f0       	brcs	.+4      	; 0x40ac <lora_driver_sendUploadMessage+0x40>
    40a8:	99 5c       	subi	r25, 0xC9	; 201
    40aa:	01 c0       	rjmp	.+2      	; 0x40ae <lora_driver_sendUploadMessage+0x42>
    40ac:	90 5d       	subi	r25, 0xD0	; 208
    40ae:	f9 01       	movw	r30, r18
    40b0:	e4 5f       	subi	r30, 0xF4	; 244
    40b2:	f8 4e       	sbci	r31, 0xE8	; 232
    40b4:	90 83       	st	Z, r25
    40b6:	2f 5f       	subi	r18, 0xFF	; 255
    40b8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ba:	fd 01       	movw	r30, r26
    40bc:	e4 0f       	add	r30, r20
    40be:	f5 1f       	adc	r31, r21
    40c0:	92 81       	ldd	r25, Z+2	; 0x02
    40c2:	9f 70       	andi	r25, 0x0F	; 15
    40c4:	49 2f       	mov	r20, r25
    40c6:	50 e0       	ldi	r21, 0x00	; 0
    40c8:	4a 30       	cpi	r20, 0x0A	; 10
    40ca:	51 05       	cpc	r21, r1
    40cc:	14 f0       	brlt	.+4      	; 0x40d2 <lora_driver_sendUploadMessage+0x66>
    40ce:	99 5c       	subi	r25, 0xC9	; 201
    40d0:	01 c0       	rjmp	.+2      	; 0x40d4 <lora_driver_sendUploadMessage+0x68>
    40d2:	90 5d       	subi	r25, 0xD0	; 208
    40d4:	f9 01       	movw	r30, r18
    40d6:	e4 5f       	subi	r30, 0xF4	; 244
    40d8:	f8 4e       	sbci	r31, 0xE8	; 232
    40da:	90 83       	st	Z, r25
    40dc:	7e 5f       	subi	r23, 0xFE	; 254
    40de:	6f 5f       	subi	r22, 0xFF	; 255
    40e0:	11 96       	adiw	r26, 0x01	; 1
    40e2:	9c 91       	ld	r25, X
    40e4:	11 97       	sbiw	r26, 0x01	; 1
    40e6:	69 17       	cp	r22, r25
    40e8:	98 f2       	brcs	.-90     	; 0x4090 <lora_driver_sendUploadMessage+0x24>
    40ea:	01 c0       	rjmp	.+2      	; 0x40ee <lora_driver_sendUploadMessage+0x82>
    40ec:	70 e0       	ldi	r23, 0x00	; 0
    40ee:	e7 2f       	mov	r30, r23
    40f0:	f0 e0       	ldi	r31, 0x00	; 0
    40f2:	e4 5f       	subi	r30, 0xF4	; 244
    40f4:	f8 4e       	sbci	r31, 0xE8	; 232
    40f6:	10 82       	st	Z, r1
    40f8:	4c 91       	ld	r20, X
    40fa:	81 11       	cpse	r24, r1
    40fc:	03 c0       	rjmp	.+6      	; 0x4104 <lora_driver_sendUploadMessage+0x98>
    40fe:	8b ee       	ldi	r24, 0xEB	; 235
    4100:	95 e0       	ldi	r25, 0x05	; 5
    4102:	02 c0       	rjmp	.+4      	; 0x4108 <lora_driver_sendUploadMessage+0x9c>
    4104:	8d ee       	ldi	r24, 0xED	; 237
    4106:	95 e0       	ldi	r25, 0x05	; 5
    4108:	2c e0       	ldi	r18, 0x0C	; 12
    410a:	37 e1       	ldi	r19, 0x17	; 23
    410c:	3f 93       	push	r19
    410e:	2f 93       	push	r18
    4110:	1f 92       	push	r1
    4112:	4f 93       	push	r20
    4114:	9f 93       	push	r25
    4116:	8f 93       	push	r24
    4118:	81 ef       	ldi	r24, 0xF1	; 241
    411a:	95 e0       	ldi	r25, 0x05	; 5
    411c:	9f 93       	push	r25
    411e:	8f 93       	push	r24
    4120:	8e e4       	ldi	r24, 0x4E	; 78
    4122:	97 e1       	ldi	r25, 0x17	; 23
    4124:	9f 93       	push	r25
    4126:	8f 93       	push	r24
    4128:	0e 94 4f 33 	call	0x669e	; 0x669e <sprintf>
    412c:	60 e0       	ldi	r22, 0x00	; 0
    412e:	70 e0       	ldi	r23, 0x00	; 0
    4130:	8e e4       	ldi	r24, 0x4E	; 78
    4132:	97 e1       	ldi	r25, 0x17	; 23
    4134:	b3 de       	rcall	.-666    	; 0x3e9c <_uploadMessageRc>
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
    4140:	81 11       	cpse	r24, r1
    4142:	59 c0       	rjmp	.+178    	; 0x41f6 <lora_driver_sendUploadMessage+0x18a>
    4144:	08 e2       	ldi	r16, 0x28	; 40
    4146:	15 e0       	ldi	r17, 0x05	; 5
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	4d e2       	ldi	r20, 0x2D	; 45
    414e:	50 e0       	ldi	r21, 0x00	; 0
    4150:	6b e7       	ldi	r22, 0x7B	; 123
    4152:	77 e1       	ldi	r23, 0x17	; 23
    4154:	80 91 f2 16 	lds	r24, 0x16F2	; 0x8016f2 <_serialReplyBufferHandle>
    4158:	90 91 f3 16 	lds	r25, 0x16F3	; 0x8016f3 <_serialReplyBufferHandle+0x1>
    415c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xStreamBufferReceive>
    4160:	88 23       	and	r24, r24
    4162:	09 f4       	brne	.+2      	; 0x4166 <lora_driver_sendUploadMessage+0xfa>
    4164:	47 c0       	rjmp	.+142    	; 0x41f4 <lora_driver_sendUploadMessage+0x188>
    4166:	8b e7       	ldi	r24, 0x7B	; 123
    4168:	97 e1       	ldi	r25, 0x17	; 23
    416a:	23 de       	rcall	.-954    	; 0x3db2 <_reply2ReturnCode>
    416c:	8e 30       	cpi	r24, 0x0E	; 14
    416e:	09 f0       	breq	.+2      	; 0x4172 <lora_driver_sendUploadMessage+0x106>
    4170:	42 c0       	rjmp	.+132    	; 0x41f6 <lora_driver_sendUploadMessage+0x18a>
    4172:	87 e0       	ldi	r24, 0x07	; 7
    4174:	89 83       	std	Y+1, r24	; 0x01
    4176:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_downlinkMessageBuffer>
    417a:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_downlinkMessageBuffer+0x1>
    417e:	89 2b       	or	r24, r25
    4180:	a9 f1       	breq	.+106    	; 0x41ec <lora_driver_sendUploadMessage+0x180>
    4182:	be 01       	movw	r22, r28
    4184:	6f 5f       	subi	r22, 0xFF	; 255
    4186:	7f 4f       	sbci	r23, 0xFF	; 255
    4188:	8b e7       	ldi	r24, 0x7B	; 123
    418a:	97 e1       	ldi	r25, 0x17	; 23
    418c:	68 d1       	rcall	.+720    	; 0x445e <decode_port_no>
    418e:	80 93 f6 16 	sts	0x16F6, r24	; 0x8016f6 <_downlinkPayload>
    4192:	e9 81       	ldd	r30, Y+1	; 0x01
    4194:	f0 e0       	ldi	r31, 0x00	; 0
    4196:	e5 58       	subi	r30, 0x85	; 133
    4198:	f8 4e       	sbci	r31, 0xE8	; 232
    419a:	df 01       	movw	r26, r30
    419c:	0d 90       	ld	r0, X+
    419e:	00 20       	and	r0, r0
    41a0:	e9 f7       	brne	.-6      	; 0x419c <lora_driver_sendUploadMessage+0x130>
    41a2:	11 97       	sbiw	r26, 0x01	; 1
    41a4:	ae 1b       	sub	r26, r30
    41a6:	bf 0b       	sbc	r27, r31
    41a8:	aa 23       	and	r26, r26
    41aa:	91 f0       	breq	.+36     	; 0x41d0 <lora_driver_sendUploadMessage+0x164>
    41ac:	bb 27       	eor	r27, r27
    41ae:	cd 01       	movw	r24, r26
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	9c 01       	movw	r18, r24
    41b4:	12 f4       	brpl	.+4      	; 0x41ba <lora_driver_sendUploadMessage+0x14e>
    41b6:	2f 5f       	subi	r18, 0xFF	; 255
    41b8:	3f 4f       	sbci	r19, 0xFF	; 255
    41ba:	35 95       	asr	r19
    41bc:	27 95       	ror	r18
    41be:	20 93 f7 16 	sts	0x16F7, r18	; 0x8016f7 <_downlinkPayload+0x1>
    41c2:	af 01       	movw	r20, r30
    41c4:	4f 5f       	subi	r20, 0xFF	; 255
    41c6:	5f 4f       	sbci	r21, 0xFF	; 255
    41c8:	64 e1       	ldi	r22, 0x14	; 20
    41ca:	88 ef       	ldi	r24, 0xF8	; 248
    41cc:	96 e1       	ldi	r25, 0x16	; 22
    41ce:	73 d1       	rcall	.+742    	; 0x44b6 <decode_hexadecimal_string_bytes>
    41d0:	01 e0       	ldi	r16, 0x01	; 1
    41d2:	10 e0       	ldi	r17, 0x00	; 0
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	46 e1       	ldi	r20, 0x16	; 22
    41da:	50 e0       	ldi	r21, 0x00	; 0
    41dc:	66 ef       	ldi	r22, 0xF6	; 246
    41de:	76 e1       	ldi	r23, 0x16	; 22
    41e0:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_downlinkMessageBuffer>
    41e4:	90 91 f1 16 	lds	r25, 0x16F1	; 0x8016f1 <_downlinkMessageBuffer+0x1>
    41e8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xStreamBufferSend>
    41ec:	8e e0       	ldi	r24, 0x0E	; 14
    41ee:	03 c0       	rjmp	.+6      	; 0x41f6 <lora_driver_sendUploadMessage+0x18a>
    41f0:	84 e1       	ldi	r24, 0x14	; 20
    41f2:	01 c0       	rjmp	.+2      	; 0x41f6 <lora_driver_sendUploadMessage+0x18a>
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	0f 90       	pop	r0
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	1f 91       	pop	r17
    41fe:	0f 91       	pop	r16
    4200:	08 95       	ret

00004202 <lora_driver_setAdaptiveDataRate>:
    4202:	81 30       	cpi	r24, 0x01	; 1
    4204:	19 f0       	breq	.+6      	; 0x420c <lora_driver_setAdaptiveDataRate+0xa>
    4206:	61 e0       	ldi	r22, 0x01	; 1
    4208:	76 e0       	ldi	r23, 0x06	; 6
    420a:	02 c0       	rjmp	.+4      	; 0x4210 <lora_driver_setAdaptiveDataRate+0xe>
    420c:	6a ed       	ldi	r22, 0xDA	; 218
    420e:	76 e0       	ldi	r23, 0x06	; 6
    4210:	85 e0       	ldi	r24, 0x05	; 5
    4212:	96 e0       	ldi	r25, 0x06	; 6
    4214:	43 ce       	rjmp	.-890    	; 0x3e9c <_uploadMessageRc>
    4216:	08 95       	ret

00004218 <lora_driver_setReceiveDelay>:
    4218:	9f 93       	push	r25
    421a:	8f 93       	push	r24
    421c:	86 e3       	ldi	r24, 0x36	; 54
    421e:	96 e0       	ldi	r25, 0x06	; 6
    4220:	9f 93       	push	r25
    4222:	8f 93       	push	r24
    4224:	8e e4       	ldi	r24, 0x4E	; 78
    4226:	97 e1       	ldi	r25, 0x17	; 23
    4228:	9f 93       	push	r25
    422a:	8f 93       	push	r24
    422c:	0e 94 4f 33 	call	0x669e	; 0x669e <sprintf>
    4230:	60 e0       	ldi	r22, 0x00	; 0
    4232:	70 e0       	ldi	r23, 0x00	; 0
    4234:	8e e4       	ldi	r24, 0x4E	; 78
    4236:	97 e1       	ldi	r25, 0x17	; 23
    4238:	31 de       	rcall	.-926    	; 0x3e9c <_uploadMessageRc>
    423a:	0f 90       	pop	r0
    423c:	0f 90       	pop	r0
    423e:	0f 90       	pop	r0
    4240:	0f 90       	pop	r0
    4242:	0f 90       	pop	r0
    4244:	0f 90       	pop	r0
    4246:	08 95       	ret

00004248 <lora_driver_configureToEu868>:
    4248:	2f 92       	push	r2
    424a:	3f 92       	push	r3
    424c:	4f 92       	push	r4
    424e:	5f 92       	push	r5
    4250:	6f 92       	push	r6
    4252:	7f 92       	push	r7
    4254:	8f 92       	push	r8
    4256:	9f 92       	push	r9
    4258:	af 92       	push	r10
    425a:	bf 92       	push	r11
    425c:	cf 92       	push	r12
    425e:	df 92       	push	r13
    4260:	ef 92       	push	r14
    4262:	ff 92       	push	r15
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	cd b7       	in	r28, 0x3d	; 61
    426e:	de b7       	in	r29, 0x3e	; 62
    4270:	a0 97       	sbiw	r28, 0x20	; 32
    4272:	0f b6       	in	r0, 0x3f	; 63
    4274:	f8 94       	cli
    4276:	de bf       	out	0x3e, r29	; 62
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	cd bf       	out	0x3d, r28	; 61
    427c:	63 e6       	ldi	r22, 0x63	; 99
    427e:	76 e0       	ldi	r23, 0x06	; 6
    4280:	8f e6       	ldi	r24, 0x6F	; 111
    4282:	96 e0       	ldi	r25, 0x06	; 6
    4284:	3c dd       	rcall	.-1416   	; 0x3cfe <_uploadMessage>
    4286:	95 dd       	rcall	.-1238   	; 0x3db2 <_reply2ReturnCode>
    4288:	81 11       	cpse	r24, r1
    428a:	a3 c0       	rjmp	.+326    	; 0x43d2 <lora_driver_configureToEu868+0x18a>
    428c:	80 e2       	ldi	r24, 0x20	; 32
    428e:	e2 e2       	ldi	r30, 0x22	; 34
    4290:	f2 e0       	ldi	r31, 0x02	; 2
    4292:	de 01       	movw	r26, r28
    4294:	11 96       	adiw	r26, 0x01	; 1
    4296:	01 90       	ld	r0, Z+
    4298:	0d 92       	st	X+, r0
    429a:	8a 95       	dec	r24
    429c:	e1 f7       	brne	.-8      	; 0x4296 <lora_driver_configureToEu868+0x4e>
    429e:	9e 01       	movw	r18, r28
    42a0:	2f 5f       	subi	r18, 0xFF	; 255
    42a2:	3f 4f       	sbci	r19, 0xFF	; 255
    42a4:	69 01       	movw	r12, r18
    42a6:	e1 2c       	mov	r14, r1
    42a8:	f1 2c       	mov	r15, r1
    42aa:	0f 2e       	mov	r0, r31
    42ac:	fb e7       	ldi	r31, 0x7B	; 123
    42ae:	af 2e       	mov	r10, r31
    42b0:	f6 e0       	ldi	r31, 0x06	; 6
    42b2:	bf 2e       	mov	r11, r31
    42b4:	f0 2d       	mov	r31, r0
    42b6:	0e e4       	ldi	r16, 0x4E	; 78
    42b8:	17 e1       	ldi	r17, 0x17	; 23
    42ba:	0f 2e       	mov	r0, r31
    42bc:	f4 e9       	ldi	r31, 0x94	; 148
    42be:	4f 2e       	mov	r4, r31
    42c0:	f6 e0       	ldi	r31, 0x06	; 6
    42c2:	5f 2e       	mov	r5, r31
    42c4:	f0 2d       	mov	r31, r0
    42c6:	0f 2e       	mov	r0, r31
    42c8:	fb ea       	ldi	r31, 0xAB	; 171
    42ca:	8f 2e       	mov	r8, r31
    42cc:	f6 e0       	ldi	r31, 0x06	; 6
    42ce:	9f 2e       	mov	r9, r31
    42d0:	f0 2d       	mov	r31, r0
    42d2:	0f 2e       	mov	r0, r31
    42d4:	f5 ec       	ldi	r31, 0xC5	; 197
    42d6:	6f 2e       	mov	r6, r31
    42d8:	f6 e0       	ldi	r31, 0x06	; 6
    42da:	7f 2e       	mov	r7, r31
    42dc:	f0 2d       	mov	r31, r0
    42de:	3e 2c       	mov	r3, r14
    42e0:	2f 2c       	mov	r2, r15
    42e2:	ff 92       	push	r15
    42e4:	ef 92       	push	r14
    42e6:	bf 92       	push	r11
    42e8:	af 92       	push	r10
    42ea:	1f 93       	push	r17
    42ec:	0f 93       	push	r16
    42ee:	0e 94 4f 33 	call	0x669e	; 0x669e <sprintf>
    42f2:	60 e0       	ldi	r22, 0x00	; 0
    42f4:	70 e0       	ldi	r23, 0x00	; 0
    42f6:	c8 01       	movw	r24, r16
    42f8:	02 dd       	rcall	.-1532   	; 0x3cfe <_uploadMessage>
    42fa:	5b dd       	rcall	.-1354   	; 0x3db2 <_reply2ReturnCode>
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	81 11       	cpse	r24, r1
    430a:	63 c0       	rjmp	.+198    	; 0x43d2 <lora_driver_configureToEu868+0x18a>
    430c:	32 e0       	ldi	r19, 0x02	; 2
    430e:	3e 15       	cp	r19, r14
    4310:	e8 f4       	brcc	.+58     	; 0x434c <lora_driver_configureToEu868+0x104>
    4312:	f6 01       	movw	r30, r12
    4314:	83 81       	ldd	r24, Z+3	; 0x03
    4316:	8f 93       	push	r24
    4318:	82 81       	ldd	r24, Z+2	; 0x02
    431a:	8f 93       	push	r24
    431c:	81 81       	ldd	r24, Z+1	; 0x01
    431e:	8f 93       	push	r24
    4320:	80 81       	ld	r24, Z
    4322:	8f 93       	push	r24
    4324:	ff 92       	push	r15
    4326:	ef 92       	push	r14
    4328:	5f 92       	push	r5
    432a:	4f 92       	push	r4
    432c:	1f 93       	push	r17
    432e:	0f 93       	push	r16
    4330:	0e 94 4f 33 	call	0x669e	; 0x669e <sprintf>
    4334:	60 e0       	ldi	r22, 0x00	; 0
    4336:	70 e0       	ldi	r23, 0x00	; 0
    4338:	c8 01       	movw	r24, r16
    433a:	e1 dc       	rcall	.-1598   	; 0x3cfe <_uploadMessage>
    433c:	3a dd       	rcall	.-1420   	; 0x3db2 <_reply2ReturnCode>
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	cd bf       	out	0x3d, r28	; 61
    4348:	81 11       	cpse	r24, r1
    434a:	43 c0       	rjmp	.+134    	; 0x43d2 <lora_driver_configureToEu868+0x18a>
    434c:	2f 92       	push	r2
    434e:	3f 92       	push	r3
    4350:	9f 92       	push	r9
    4352:	8f 92       	push	r8
    4354:	1f 93       	push	r17
    4356:	0f 93       	push	r16
    4358:	0e 94 4f 33 	call	0x669e	; 0x669e <sprintf>
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	70 e0       	ldi	r23, 0x00	; 0
    4360:	c8 01       	movw	r24, r16
    4362:	cd dc       	rcall	.-1638   	; 0x3cfe <_uploadMessage>
    4364:	26 dd       	rcall	.-1460   	; 0x3db2 <_reply2ReturnCode>
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	0f 90       	pop	r0
    436c:	0f 90       	pop	r0
    436e:	0f 90       	pop	r0
    4370:	0f 90       	pop	r0
    4372:	81 11       	cpse	r24, r1
    4374:	2e c0       	rjmp	.+92     	; 0x43d2 <lora_driver_configureToEu868+0x18a>
    4376:	2f 92       	push	r2
    4378:	3f 92       	push	r3
    437a:	7f 92       	push	r7
    437c:	6f 92       	push	r6
    437e:	1f 93       	push	r17
    4380:	0f 93       	push	r16
    4382:	0e 94 4f 33 	call	0x669e	; 0x669e <sprintf>
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	70 e0       	ldi	r23, 0x00	; 0
    438a:	c8 01       	movw	r24, r16
    438c:	b8 dc       	rcall	.-1680   	; 0x3cfe <_uploadMessage>
    438e:	11 dd       	rcall	.-1502   	; 0x3db2 <_reply2ReturnCode>
    4390:	0f 90       	pop	r0
    4392:	0f 90       	pop	r0
    4394:	0f 90       	pop	r0
    4396:	0f 90       	pop	r0
    4398:	0f 90       	pop	r0
    439a:	0f 90       	pop	r0
    439c:	81 11       	cpse	r24, r1
    439e:	19 c0       	rjmp	.+50     	; 0x43d2 <lora_driver_configureToEu868+0x18a>
    43a0:	3f ef       	ldi	r19, 0xFF	; 255
    43a2:	e3 1a       	sub	r14, r19
    43a4:	f3 0a       	sbc	r15, r19
    43a6:	84 e0       	ldi	r24, 0x04	; 4
    43a8:	c8 0e       	add	r12, r24
    43aa:	d1 1c       	adc	r13, r1
    43ac:	98 e0       	ldi	r25, 0x08	; 8
    43ae:	e9 16       	cp	r14, r25
    43b0:	f1 04       	cpc	r15, r1
    43b2:	09 f0       	breq	.+2      	; 0x43b6 <lora_driver_configureToEu868+0x16e>
    43b4:	94 cf       	rjmp	.-216    	; 0x42de <lora_driver_configureToEu868+0x96>
    43b6:	60 e0       	ldi	r22, 0x00	; 0
    43b8:	70 e0       	ldi	r23, 0x00	; 0
    43ba:	8d ed       	ldi	r24, 0xDD	; 221
    43bc:	96 e0       	ldi	r25, 0x06	; 6
    43be:	9f dc       	rcall	.-1730   	; 0x3cfe <_uploadMessage>
    43c0:	f8 dc       	rcall	.-1552   	; 0x3db2 <_reply2ReturnCode>
    43c2:	81 11       	cpse	r24, r1
    43c4:	06 c0       	rjmp	.+12     	; 0x43d2 <lora_driver_configureToEu868+0x18a>
    43c6:	60 e0       	ldi	r22, 0x00	; 0
    43c8:	70 e0       	ldi	r23, 0x00	; 0
    43ca:	8e ee       	ldi	r24, 0xEE	; 238
    43cc:	96 e0       	ldi	r25, 0x06	; 6
    43ce:	97 dc       	rcall	.-1746   	; 0x3cfe <_uploadMessage>
    43d0:	f0 dc       	rcall	.-1568   	; 0x3db2 <_reply2ReturnCode>
    43d2:	a0 96       	adiw	r28, 0x20	; 32
    43d4:	0f b6       	in	r0, 0x3f	; 63
    43d6:	f8 94       	cli
    43d8:	de bf       	out	0x3e, r29	; 62
    43da:	0f be       	out	0x3f, r0	; 63
    43dc:	cd bf       	out	0x3d, r28	; 61
    43de:	df 91       	pop	r29
    43e0:	cf 91       	pop	r28
    43e2:	1f 91       	pop	r17
    43e4:	0f 91       	pop	r16
    43e6:	ff 90       	pop	r15
    43e8:	ef 90       	pop	r14
    43ea:	df 90       	pop	r13
    43ec:	cf 90       	pop	r12
    43ee:	bf 90       	pop	r11
    43f0:	af 90       	pop	r10
    43f2:	9f 90       	pop	r9
    43f4:	8f 90       	pop	r8
    43f6:	7f 90       	pop	r7
    43f8:	6f 90       	pop	r6
    43fa:	5f 90       	pop	r5
    43fc:	4f 90       	pop	r4
    43fe:	3f 90       	pop	r3
    4400:	2f 90       	pop	r2
    4402:	08 95       	ret

00004404 <lora_driver_setOtaaIdentity>:
    4404:	ef 92       	push	r14
    4406:	ff 92       	push	r15
    4408:	0f 93       	push	r16
    440a:	1f 93       	push	r17
    440c:	cf 93       	push	r28
    440e:	df 93       	push	r29
    4410:	ec 01       	movw	r28, r24
    4412:	8b 01       	movw	r16, r22
    4414:	7a 01       	movw	r14, r20
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	f4 de       	rcall	.-536    	; 0x4202 <lora_driver_setAdaptiveDataRate>
    441a:	81 11       	cpse	r24, r1
    441c:	0d c0       	rjmp	.+26     	; 0x4438 <lora_driver_setOtaaIdentity+0x34>
    441e:	ce 01       	movw	r24, r28
    4420:	d4 dd       	rcall	.-1112   	; 0x3fca <lora_driver_setApplicationIdentifier>
    4422:	81 11       	cpse	r24, r1
    4424:	09 c0       	rjmp	.+18     	; 0x4438 <lora_driver_setOtaaIdentity+0x34>
    4426:	c8 01       	movw	r24, r16
    4428:	e1 dd       	rcall	.-1086   	; 0x3fec <lora_driver_setApplicationKey>
    442a:	81 11       	cpse	r24, r1
    442c:	05 c0       	rjmp	.+10     	; 0x4438 <lora_driver_setOtaaIdentity+0x34>
    442e:	c7 01       	movw	r24, r14
    4430:	bb dd       	rcall	.-1162   	; 0x3fa8 <lora_driver_setDeviceIdentifier>
    4432:	81 11       	cpse	r24, r1
    4434:	01 c0       	rjmp	.+2      	; 0x4438 <lora_driver_setOtaaIdentity+0x34>
    4436:	eb dd       	rcall	.-1066   	; 0x400e <lora_driver_saveMac>
    4438:	df 91       	pop	r29
    443a:	cf 91       	pop	r28
    443c:	1f 91       	pop	r17
    443e:	0f 91       	pop	r16
    4440:	ff 90       	pop	r15
    4442:	ef 90       	pop	r14
    4444:	08 95       	ret

00004446 <lora_driver_mapReturnCodeToText>:
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	fc 01       	movw	r30, r24
    444a:	ee 0f       	add	r30, r30
    444c:	ff 1f       	adc	r31, r31
    444e:	8e 0f       	add	r24, r30
    4450:	9f 1f       	adc	r25, r31
    4452:	fc 01       	movw	r30, r24
    4454:	e9 54       	subi	r30, 0x49	; 73
    4456:	f8 4f       	sbci	r31, 0xF8	; 248
    4458:	81 81       	ldd	r24, Z+1	; 0x01
    445a:	92 81       	ldd	r25, Z+2	; 0x02
    445c:	08 95       	ret

0000445e <decode_port_no>:
    445e:	dc 01       	movw	r26, r24
    4460:	00 97       	sbiw	r24, 0x00	; 0
    4462:	29 f1       	breq	.+74     	; 0x44ae <decode_port_no+0x50>
    4464:	fb 01       	movw	r30, r22
    4466:	20 81       	ld	r18, Z
    4468:	fc 01       	movw	r30, r24
    446a:	01 90       	ld	r0, Z+
    446c:	00 20       	and	r0, r0
    446e:	e9 f7       	brne	.-6      	; 0x446a <decode_port_no+0xc>
    4470:	31 97       	sbiw	r30, 0x01	; 1
    4472:	e8 1b       	sub	r30, r24
    4474:	f9 0b       	sbc	r31, r25
    4476:	82 2f       	mov	r24, r18
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	e8 17       	cp	r30, r24
    447c:	f9 07       	cpc	r31, r25
    447e:	c8 f0       	brcs	.+50     	; 0x44b2 <decode_port_no+0x54>
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	08 c0       	rjmp	.+16     	; 0x4494 <decode_port_no+0x36>
    4484:	88 0f       	add	r24, r24
    4486:	38 2f       	mov	r19, r24
    4488:	33 0f       	add	r19, r19
    448a:	33 0f       	add	r19, r19
    448c:	83 0f       	add	r24, r19
    448e:	80 53       	subi	r24, 0x30	; 48
    4490:	89 0f       	add	r24, r25
    4492:	2f 5f       	subi	r18, 0xFF	; 255
    4494:	fd 01       	movw	r30, r26
    4496:	e2 0f       	add	r30, r18
    4498:	f1 1d       	adc	r31, r1
    449a:	90 81       	ld	r25, Z
    449c:	30 ed       	ldi	r19, 0xD0	; 208
    449e:	39 0f       	add	r19, r25
    44a0:	3a 30       	cpi	r19, 0x0A	; 10
    44a2:	10 f4       	brcc	.+4      	; 0x44a8 <decode_port_no+0x4a>
    44a4:	91 11       	cpse	r25, r1
    44a6:	ee cf       	rjmp	.-36     	; 0x4484 <decode_port_no+0x26>
    44a8:	fb 01       	movw	r30, r22
    44aa:	20 83       	st	Z, r18
    44ac:	08 95       	ret
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	08 95       	ret
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	08 95       	ret

000044b6 <decode_hexadecimal_string_bytes>:
    44b6:	0f 93       	push	r16
    44b8:	1f 93       	push	r17
    44ba:	cf 93       	push	r28
    44bc:	df 93       	push	r29
    44be:	dc 01       	movw	r26, r24
    44c0:	ea 01       	movw	r28, r20
    44c2:	20 97       	sbiw	r28, 0x00	; 0
    44c4:	e1 f1       	breq	.+120    	; 0x453e <decode_hexadecimal_string_bytes+0x88>
    44c6:	fa 01       	movw	r30, r20
    44c8:	01 90       	ld	r0, Z+
    44ca:	00 20       	and	r0, r0
    44cc:	e9 f7       	brne	.-6      	; 0x44c8 <decode_hexadecimal_string_bytes+0x12>
    44ce:	31 97       	sbiw	r30, 0x01	; 1
    44d0:	e4 1b       	sub	r30, r20
    44d2:	f5 0b       	sbc	r31, r21
    44d4:	32 97       	sbiw	r30, 0x02	; 2
    44d6:	10 f5       	brcc	.+68     	; 0x451c <decode_hexadecimal_string_bytes+0x66>
    44d8:	32 c0       	rjmp	.+100    	; 0x453e <decode_hexadecimal_string_bytes+0x88>
    44da:	8d 01       	movw	r16, r26
    44dc:	04 0f       	add	r16, r20
    44de:	15 1f       	adc	r17, r21
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	ae 01       	movw	r20, r28
    44e4:	42 0f       	add	r20, r18
    44e6:	53 1f       	adc	r21, r19
    44e8:	fa 01       	movw	r30, r20
    44ea:	90 81       	ld	r25, Z
    44ec:	91 34       	cpi	r25, 0x41	; 65
    44ee:	28 f0       	brcs	.+10     	; 0x44fa <decode_hexadecimal_string_bytes+0x44>
    44f0:	97 53       	subi	r25, 0x37	; 55
    44f2:	59 2f       	mov	r21, r25
    44f4:	52 95       	swap	r21
    44f6:	50 7f       	andi	r21, 0xF0	; 240
    44f8:	03 c0       	rjmp	.+6      	; 0x4500 <decode_hexadecimal_string_bytes+0x4a>
    44fa:	59 2f       	mov	r21, r25
    44fc:	52 95       	swap	r21
    44fe:	50 7f       	andi	r21, 0xF0	; 240
    4500:	2c 0f       	add	r18, r28
    4502:	3d 1f       	adc	r19, r29
    4504:	f9 01       	movw	r30, r18
    4506:	91 81       	ldd	r25, Z+1	; 0x01
    4508:	91 34       	cpi	r25, 0x41	; 65
    450a:	10 f0       	brcs	.+4      	; 0x4510 <decode_hexadecimal_string_bytes+0x5a>
    450c:	97 53       	subi	r25, 0x37	; 55
    450e:	01 c0       	rjmp	.+2      	; 0x4512 <decode_hexadecimal_string_bytes+0x5c>
    4510:	90 53       	subi	r25, 0x30	; 48
    4512:	95 0f       	add	r25, r21
    4514:	f8 01       	movw	r30, r16
    4516:	90 83       	st	Z, r25
    4518:	8f 5f       	subi	r24, 0xFF	; 255
    451a:	01 c0       	rjmp	.+2      	; 0x451e <decode_hexadecimal_string_bytes+0x68>
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	28 2f       	mov	r18, r24
    4520:	22 0f       	add	r18, r18
    4522:	48 2f       	mov	r20, r24
    4524:	50 e0       	ldi	r21, 0x00	; 0
    4526:	fe 01       	movw	r30, r28
    4528:	01 90       	ld	r0, Z+
    452a:	00 20       	and	r0, r0
    452c:	e9 f7       	brne	.-6      	; 0x4528 <decode_hexadecimal_string_bytes+0x72>
    452e:	31 97       	sbiw	r30, 0x01	; 1
    4530:	ec 1b       	sub	r30, r28
    4532:	fd 0b       	sbc	r31, r29
    4534:	4e 17       	cp	r20, r30
    4536:	5f 07       	cpc	r21, r31
    4538:	10 f4       	brcc	.+4      	; 0x453e <decode_hexadecimal_string_bytes+0x88>
    453a:	86 13       	cpse	r24, r22
    453c:	ce cf       	rjmp	.-100    	; 0x44da <decode_hexadecimal_string_bytes+0x24>
    453e:	df 91       	pop	r29
    4540:	cf 91       	pop	r28
    4542:	1f 91       	pop	r17
    4544:	0f 91       	pop	r16
    4546:	08 95       	ret

00004548 <_serialCallBack>:
    4548:	80 91 ab 17 	lds	r24, 0x17AB	; 0x8017ab <crc_sum.1945>
    454c:	86 0f       	add	r24, r22
    454e:	80 93 ab 17 	sts	0x17AB, r24	; 0x8017ab <crc_sum.1945>
    4552:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_mh_state>
    4556:	91 30       	cpi	r25, 0x01	; 1
    4558:	79 f0       	breq	.+30     	; 0x4578 <_serialCallBack+0x30>
    455a:	28 f0       	brcs	.+10     	; 0x4566 <_serialCallBack+0x1e>
    455c:	92 30       	cpi	r25, 0x02	; 2
    455e:	a9 f0       	breq	.+42     	; 0x458a <_serialCallBack+0x42>
    4560:	93 30       	cpi	r25, 0x03	; 3
    4562:	19 f1       	breq	.+70     	; 0x45aa <_serialCallBack+0x62>
    4564:	08 95       	ret
    4566:	6f 3f       	cpi	r22, 0xFF	; 255
    4568:	09 f0       	breq	.+2      	; 0x456c <_serialCallBack+0x24>
    456a:	48 c0       	rjmp	.+144    	; 0x45fc <_serialCallBack+0xb4>
    456c:	10 92 ab 17 	sts	0x17AB, r1	; 0x8017ab <crc_sum.1945>
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <_mh_state>
    4576:	08 95       	ret
    4578:	66 38       	cpi	r22, 0x86	; 134
    457a:	09 f0       	breq	.+2      	; 0x457e <_serialCallBack+0x36>
    457c:	3f c0       	rjmp	.+126    	; 0x45fc <_serialCallBack+0xb4>
    457e:	10 92 aa 17 	sts	0x17AA, r1	; 0x8017aa <inDex.1943>
    4582:	82 e0       	ldi	r24, 0x02	; 2
    4584:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <_mh_state>
    4588:	08 95       	ret
    458a:	e0 91 aa 17 	lds	r30, 0x17AA	; 0x8017aa <inDex.1943>
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	8e 0f       	add	r24, r30
    4592:	80 93 aa 17 	sts	0x17AA, r24	; 0x8017aa <inDex.1943>
    4596:	f0 e0       	ldi	r31, 0x00	; 0
    4598:	e8 55       	subi	r30, 0x58	; 88
    459a:	f8 4e       	sbci	r31, 0xE8	; 232
    459c:	60 83       	st	Z, r22
    459e:	82 30       	cpi	r24, 0x02	; 2
    45a0:	69 f5       	brne	.+90     	; 0x45fc <_serialCallBack+0xb4>
    45a2:	83 e0       	ldi	r24, 0x03	; 3
    45a4:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <_mh_state>
    45a8:	08 95       	ret
    45aa:	90 91 aa 17 	lds	r25, 0x17AA	; 0x8017aa <inDex.1943>
    45ae:	21 e0       	ldi	r18, 0x01	; 1
    45b0:	29 0f       	add	r18, r25
    45b2:	20 93 aa 17 	sts	0x17AA, r18	; 0x8017aa <inDex.1943>
    45b6:	96 30       	cpi	r25, 0x06	; 6
    45b8:	09 f5       	brne	.+66     	; 0x45fc <_serialCallBack+0xb4>
    45ba:	81 11       	cpse	r24, r1
    45bc:	0e c0       	rjmp	.+28     	; 0x45da <_serialCallBack+0x92>
    45be:	e8 ea       	ldi	r30, 0xA8	; 168
    45c0:	f7 e1       	ldi	r31, 0x17	; 23
    45c2:	80 81       	ld	r24, Z
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	98 2f       	mov	r25, r24
    45c8:	88 27       	eor	r24, r24
    45ca:	21 81       	ldd	r18, Z+1	; 0x01
    45cc:	82 0f       	add	r24, r18
    45ce:	91 1d       	adc	r25, r1
    45d0:	90 93 b0 17 	sts	0x17B0, r25	; 0x8017b0 <_ppm+0x1>
    45d4:	80 93 af 17 	sts	0x17AF, r24	; 0x8017af <_ppm>
    45d8:	04 c0       	rjmp	.+8      	; 0x45e2 <_serialCallBack+0x9a>
    45da:	10 92 b0 17 	sts	0x17B0, r1	; 0x8017b0 <_ppm+0x1>
    45de:	10 92 af 17 	sts	0x17AF, r1	; 0x8017af <_ppm>
    45e2:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <_mh_state>
    45e6:	e0 91 ac 17 	lds	r30, 0x17AC	; 0x8017ac <_appCallBack>
    45ea:	f0 91 ad 17 	lds	r31, 0x17AD	; 0x8017ad <_appCallBack+0x1>
    45ee:	30 97       	sbiw	r30, 0x00	; 0
    45f0:	29 f0       	breq	.+10     	; 0x45fc <_serialCallBack+0xb4>
    45f2:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_ppm>
    45f6:	90 91 b0 17 	lds	r25, 0x17B0	; 0x8017b0 <_ppm+0x1>
    45fa:	19 95       	eicall
    45fc:	08 95       	ret

000045fe <mh_z19_initialise>:
    45fe:	8f 92       	push	r8
    4600:	9f 92       	push	r9
    4602:	af 92       	push	r10
    4604:	cf 92       	push	r12
    4606:	ef 92       	push	r14
    4608:	0f 93       	push	r16
    460a:	0f 2e       	mov	r0, r31
    460c:	f4 ea       	ldi	r31, 0xA4	; 164
    460e:	8f 2e       	mov	r8, r31
    4610:	f2 e2       	ldi	r31, 0x22	; 34
    4612:	9f 2e       	mov	r9, r31
    4614:	f0 2d       	mov	r31, r0
    4616:	68 94       	set
    4618:	aa 24       	eor	r10, r10
    461a:	a4 f8       	bld	r10, 4
    461c:	68 94       	set
    461e:	cc 24       	eor	r12, r12
    4620:	c4 f8       	bld	r12, 4
    4622:	e1 2c       	mov	r14, r1
    4624:	00 e0       	ldi	r16, 0x00	; 0
    4626:	23 e0       	ldi	r18, 0x03	; 3
    4628:	40 e8       	ldi	r20, 0x80	; 128
    462a:	55 e2       	ldi	r21, 0x25	; 37
    462c:	60 e0       	ldi	r22, 0x00	; 0
    462e:	70 e0       	ldi	r23, 0x00	; 0
    4630:	50 d0       	rcall	.+160    	; 0x46d2 <serial_create>
    4632:	90 93 b2 17 	sts	0x17B2, r25	; 0x8017b2 <_serial+0x1>
    4636:	80 93 b1 17 	sts	0x17B1, r24	; 0x8017b1 <_serial>
    463a:	0f 91       	pop	r16
    463c:	ef 90       	pop	r14
    463e:	cf 90       	pop	r12
    4640:	af 90       	pop	r10
    4642:	9f 90       	pop	r9
    4644:	8f 90       	pop	r8
    4646:	08 95       	ret

00004648 <mh_z19_injectCallBack>:
    4648:	90 93 ad 17 	sts	0x17AD, r25	; 0x8017ad <_appCallBack+0x1>
    464c:	80 93 ac 17 	sts	0x17AC, r24	; 0x8017ac <_appCallBack>
    4650:	08 95       	ret

00004652 <mh_z19_takeMeassuring>:
    4652:	cf 93       	push	r28
    4654:	df 93       	push	r29
    4656:	cd b7       	in	r28, 0x3d	; 61
    4658:	de b7       	in	r29, 0x3e	; 62
    465a:	29 97       	sbiw	r28, 0x09	; 9
    465c:	0f b6       	in	r0, 0x3f	; 63
    465e:	f8 94       	cli
    4660:	de bf       	out	0x3e, r29	; 62
    4662:	0f be       	out	0x3f, r0	; 63
    4664:	cd bf       	out	0x3d, r28	; 61
    4666:	89 e0       	ldi	r24, 0x09	; 9
    4668:	e2 e4       	ldi	r30, 0x42	; 66
    466a:	f2 e0       	ldi	r31, 0x02	; 2
    466c:	9e 01       	movw	r18, r28
    466e:	2f 5f       	subi	r18, 0xFF	; 255
    4670:	3f 4f       	sbci	r19, 0xFF	; 255
    4672:	d9 01       	movw	r26, r18
    4674:	01 90       	ld	r0, Z+
    4676:	0d 92       	st	X+, r0
    4678:	8a 95       	dec	r24
    467a:	e1 f7       	brne	.-8      	; 0x4674 <mh_z19_takeMeassuring+0x22>
    467c:	10 92 b0 17 	sts	0x17B0, r1	; 0x8017b0 <_ppm+0x1>
    4680:	10 92 af 17 	sts	0x17AF, r1	; 0x8017af <_ppm>
    4684:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <_serial>
    4688:	90 91 b2 17 	lds	r25, 0x17B2	; 0x8017b2 <_serial+0x1>
    468c:	00 97       	sbiw	r24, 0x00	; 0
    468e:	31 f0       	breq	.+12     	; 0x469c <mh_z19_takeMeassuring+0x4a>
    4690:	42 2f       	mov	r20, r18
    4692:	53 2f       	mov	r21, r19
    4694:	69 e0       	ldi	r22, 0x09	; 9
    4696:	ee d0       	rcall	.+476    	; 0x4874 <serial_sendBytes>
    4698:	80 e0       	ldi	r24, 0x00	; 0
    469a:	01 c0       	rjmp	.+2      	; 0x469e <mh_z19_takeMeassuring+0x4c>
    469c:	82 e0       	ldi	r24, 0x02	; 2
    469e:	29 96       	adiw	r28, 0x09	; 9
    46a0:	0f b6       	in	r0, 0x3f	; 63
    46a2:	f8 94       	cli
    46a4:	de bf       	out	0x3e, r29	; 62
    46a6:	0f be       	out	0x3f, r0	; 63
    46a8:	cd bf       	out	0x3d, r28	; 61
    46aa:	df 91       	pop	r29
    46ac:	cf 91       	pop	r28
    46ae:	08 95       	ret

000046b0 <mh_z19_getCo2Ppm>:
    46b0:	20 91 af 17 	lds	r18, 0x17AF	; 0x8017af <_ppm>
    46b4:	30 91 b0 17 	lds	r19, 0x17B0	; 0x8017b0 <_ppm+0x1>
    46b8:	21 15       	cp	r18, r1
    46ba:	31 05       	cpc	r19, r1
    46bc:	29 f4       	brne	.+10     	; 0x46c8 <mh_z19_getCo2Ppm+0x18>
    46be:	fc 01       	movw	r30, r24
    46c0:	11 82       	std	Z+1, r1	; 0x01
    46c2:	10 82       	st	Z, r1
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	08 95       	ret
    46c8:	fc 01       	movw	r30, r24
    46ca:	31 83       	std	Z+1, r19	; 0x01
    46cc:	20 83       	st	Z, r18
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	08 95       	ret

000046d2 <serial_create>:
    46d2:	2f 92       	push	r2
    46d4:	3f 92       	push	r3
    46d6:	4f 92       	push	r4
    46d8:	5f 92       	push	r5
    46da:	6f 92       	push	r6
    46dc:	7f 92       	push	r7
    46de:	8f 92       	push	r8
    46e0:	9f 92       	push	r9
    46e2:	af 92       	push	r10
    46e4:	cf 92       	push	r12
    46e6:	ef 92       	push	r14
    46e8:	ff 92       	push	r15
    46ea:	0f 93       	push	r16
    46ec:	1f 93       	push	r17
    46ee:	cf 93       	push	r28
    46f0:	df 93       	push	r29
    46f2:	cd b7       	in	r28, 0x3d	; 61
    46f4:	de b7       	in	r29, 0x3e	; 62
    46f6:	f8 2e       	mov	r15, r24
    46f8:	2a 01       	movw	r4, r20
    46fa:	3b 01       	movw	r6, r22
    46fc:	88 e0       	ldi	r24, 0x08	; 8
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	0e 94 5d 30 	call	0x60ba	; 0x60ba <malloc>
    4704:	8c 01       	movw	r16, r24
    4706:	8f 2d       	mov	r24, r15
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	fc 01       	movw	r30, r24
    470c:	ee 0f       	add	r30, r30
    470e:	ff 1f       	adc	r31, r31
    4710:	ed 54       	subi	r30, 0x4D	; 77
    4712:	f8 4e       	sbci	r31, 0xE8	; 232
    4714:	11 83       	std	Z+1, r17	; 0x01
    4716:	00 83       	st	Z, r16
    4718:	01 15       	cp	r16, r1
    471a:	11 05       	cpc	r17, r1
    471c:	09 f4       	brne	.+2      	; 0x4720 <serial_create+0x4e>
    471e:	6d c0       	rjmp	.+218    	; 0x47fa <serial_create+0x128>
    4720:	88 0f       	add	r24, r24
    4722:	99 1f       	adc	r25, r25
    4724:	fc 01       	movw	r30, r24
    4726:	e5 5f       	subi	r30, 0xF5	; 245
    4728:	fd 4f       	sbci	r31, 0xFD	; 253
    472a:	80 81       	ld	r24, Z
    472c:	91 81       	ldd	r25, Z+1	; 0x01
    472e:	d8 01       	movw	r26, r16
    4730:	8d 93       	st	X+, r24
    4732:	9c 93       	st	X, r25
    4734:	8c 2d       	mov	r24, r12
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	88 0f       	add	r24, r24
    473a:	99 1f       	adc	r25, r25
    473c:	88 0f       	add	r24, r24
    473e:	99 1f       	adc	r25, r25
    4740:	0e 94 5d 30 	call	0x60ba	; 0x60ba <malloc>
    4744:	1c 01       	movw	r2, r24
    4746:	86 e0       	ldi	r24, 0x06	; 6
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	0e 94 5d 30 	call	0x60ba	; 0x60ba <malloc>
    474e:	7c 01       	movw	r14, r24
    4750:	4c 2d       	mov	r20, r12
    4752:	b1 01       	movw	r22, r2
    4754:	f4 d6       	rcall	.+3560   	; 0x553e <fifo_init>
    4756:	f8 01       	movw	r30, r16
    4758:	f5 82       	std	Z+5, r15	; 0x05
    475a:	e4 82       	std	Z+4, r14	; 0x04
    475c:	8a 2d       	mov	r24, r10
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	88 0f       	add	r24, r24
    4762:	99 1f       	adc	r25, r25
    4764:	88 0f       	add	r24, r24
    4766:	99 1f       	adc	r25, r25
    4768:	0e 94 5d 30 	call	0x60ba	; 0x60ba <malloc>
    476c:	1c 01       	movw	r2, r24
    476e:	86 e0       	ldi	r24, 0x06	; 6
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	0e 94 5d 30 	call	0x60ba	; 0x60ba <malloc>
    4776:	7c 01       	movw	r14, r24
    4778:	4a 2d       	mov	r20, r10
    477a:	b1 01       	movw	r22, r2
    477c:	e0 d6       	rcall	.+3520   	; 0x553e <fifo_init>
    477e:	d8 01       	movw	r26, r16
    4780:	13 96       	adiw	r26, 0x03	; 3
    4782:	fc 92       	st	X, r15
    4784:	ee 92       	st	-X, r14
    4786:	12 97       	sbiw	r26, 0x02	; 2
    4788:	17 96       	adiw	r26, 0x07	; 7
    478a:	9c 92       	st	X, r9
    478c:	8e 92       	st	-X, r8
    478e:	16 97       	sbiw	r26, 0x06	; 6
    4790:	ff b6       	in	r15, 0x3f	; 63
    4792:	f8 94       	cli
    4794:	ed 91       	ld	r30, X+
    4796:	fc 91       	ld	r31, X
    4798:	11 97       	sbiw	r26, 0x01	; 1
    479a:	36 97       	sbiw	r30, 0x06	; 6
    479c:	80 81       	ld	r24, Z
    479e:	82 60       	ori	r24, 0x02	; 2
    47a0:	80 83       	st	Z, r24
    47a2:	8d 90       	ld	r8, X+
    47a4:	9c 90       	ld	r9, X
    47a6:	c3 01       	movw	r24, r6
    47a8:	b2 01       	movw	r22, r4
    47aa:	0e 94 42 2f 	call	0x5e84	; 0x5e84 <__floatunsisf>
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	40 e0       	ldi	r20, 0x00	; 0
    47b4:	51 e4       	ldi	r21, 0x41	; 65
    47b6:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <__mulsf3>
    47ba:	9b 01       	movw	r18, r22
    47bc:	ac 01       	movw	r20, r24
    47be:	60 e0       	ldi	r22, 0x00	; 0
    47c0:	74 e2       	ldi	r23, 0x24	; 36
    47c2:	84 e7       	ldi	r24, 0x74	; 116
    47c4:	9b e4       	ldi	r25, 0x4B	; 75
    47c6:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__divsf3>
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	40 e8       	ldi	r20, 0x80	; 128
    47d0:	5f e3       	ldi	r21, 0x3F	; 63
    47d2:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <__subsf3>
    47d6:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__fixunssfsi>
    47da:	f4 01       	movw	r30, r8
    47dc:	32 97       	sbiw	r30, 0x02	; 2
    47de:	60 83       	st	Z, r22
    47e0:	d8 01       	movw	r26, r16
    47e2:	ed 91       	ld	r30, X+
    47e4:	fc 91       	ld	r31, X
    47e6:	11 97       	sbiw	r26, 0x01	; 1
    47e8:	35 97       	sbiw	r30, 0x05	; 5
    47ea:	88 e9       	ldi	r24, 0x98	; 152
    47ec:	80 83       	st	Z, r24
    47ee:	ed 91       	ld	r30, X+
    47f0:	fc 91       	ld	r31, X
    47f2:	34 97       	sbiw	r30, 0x04	; 4
    47f4:	86 e0       	ldi	r24, 0x06	; 6
    47f6:	80 83       	st	Z, r24
    47f8:	ff be       	out	0x3f, r15	; 63
    47fa:	c8 01       	movw	r24, r16
    47fc:	df 91       	pop	r29
    47fe:	cf 91       	pop	r28
    4800:	1f 91       	pop	r17
    4802:	0f 91       	pop	r16
    4804:	ff 90       	pop	r15
    4806:	ef 90       	pop	r14
    4808:	cf 90       	pop	r12
    480a:	af 90       	pop	r10
    480c:	9f 90       	pop	r9
    480e:	8f 90       	pop	r8
    4810:	7f 90       	pop	r7
    4812:	6f 90       	pop	r6
    4814:	5f 90       	pop	r5
    4816:	4f 90       	pop	r4
    4818:	3f 90       	pop	r3
    481a:	2f 90       	pop	r2
    481c:	08 95       	ret

0000481e <serial_sendByte>:
    481e:	cf 93       	push	r28
    4820:	df 93       	push	r29
    4822:	dc 01       	movw	r26, r24
    4824:	89 2b       	or	r24, r25
    4826:	01 f1       	breq	.+64     	; 0x4868 <serial_sendByte+0x4a>
    4828:	12 96       	adiw	r26, 0x02	; 2
    482a:	ed 91       	ld	r30, X+
    482c:	fc 91       	ld	r31, X
    482e:	13 97       	sbiw	r26, 0x03	; 3
    4830:	93 81       	ldd	r25, Z+3	; 0x03
    4832:	82 81       	ldd	r24, Z+2	; 0x02
    4834:	25 81       	ldd	r18, Z+5	; 0x05
    4836:	98 1b       	sub	r25, r24
    4838:	92 23       	and	r25, r18
    483a:	84 81       	ldd	r24, Z+4	; 0x04
    483c:	98 17       	cp	r25, r24
    483e:	b1 f0       	breq	.+44     	; 0x486c <serial_sendByte+0x4e>
    4840:	83 81       	ldd	r24, Z+3	; 0x03
    4842:	26 95       	lsr	r18
    4844:	28 23       	and	r18, r24
    4846:	c0 81       	ld	r28, Z
    4848:	d1 81       	ldd	r29, Z+1	; 0x01
    484a:	c2 0f       	add	r28, r18
    484c:	d1 1d       	adc	r29, r1
    484e:	68 83       	st	Y, r22
    4850:	8f 5f       	subi	r24, 0xFF	; 255
    4852:	95 81       	ldd	r25, Z+5	; 0x05
    4854:	89 23       	and	r24, r25
    4856:	83 83       	std	Z+3, r24	; 0x03
    4858:	ed 91       	ld	r30, X+
    485a:	fc 91       	ld	r31, X
    485c:	35 97       	sbiw	r30, 0x05	; 5
    485e:	80 81       	ld	r24, Z
    4860:	80 62       	ori	r24, 0x20	; 32
    4862:	80 83       	st	Z, r24
    4864:	80 e0       	ldi	r24, 0x00	; 0
    4866:	03 c0       	rjmp	.+6      	; 0x486e <serial_sendByte+0x50>
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	01 c0       	rjmp	.+2      	; 0x486e <serial_sendByte+0x50>
    486c:	82 e0       	ldi	r24, 0x02	; 2
    486e:	df 91       	pop	r29
    4870:	cf 91       	pop	r28
    4872:	08 95       	ret

00004874 <serial_sendBytes>:
    4874:	ef 92       	push	r14
    4876:	ff 92       	push	r15
    4878:	0f 93       	push	r16
    487a:	1f 93       	push	r17
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
    4880:	7c 01       	movw	r14, r24
    4882:	00 97       	sbiw	r24, 0x00	; 0
    4884:	09 f4       	brne	.+2      	; 0x4888 <serial_sendBytes+0x14>
    4886:	41 c0       	rjmp	.+130    	; 0x490a <serial_sendBytes+0x96>
    4888:	dc 01       	movw	r26, r24
    488a:	12 96       	adiw	r26, 0x02	; 2
    488c:	ed 91       	ld	r30, X+
    488e:	fc 91       	ld	r31, X
    4890:	13 97       	sbiw	r26, 0x03	; 3
    4892:	93 81       	ldd	r25, Z+3	; 0x03
    4894:	82 81       	ldd	r24, Z+2	; 0x02
    4896:	98 1b       	sub	r25, r24
    4898:	85 81       	ldd	r24, Z+5	; 0x05
    489a:	98 23       	and	r25, r24
    489c:	84 81       	ldd	r24, Z+4	; 0x04
    489e:	89 1b       	sub	r24, r25
    48a0:	86 17       	cp	r24, r22
    48a2:	a8 f1       	brcs	.+106    	; 0x490e <serial_sendBytes+0x9a>
    48a4:	66 23       	and	r22, r22
    48a6:	41 f1       	breq	.+80     	; 0x48f8 <serial_sendBytes+0x84>
    48a8:	84 2f       	mov	r24, r20
    48aa:	95 2f       	mov	r25, r21
    48ac:	dc 01       	movw	r26, r24
    48ae:	61 50       	subi	r22, 0x01	; 1
    48b0:	46 2f       	mov	r20, r22
    48b2:	50 e0       	ldi	r21, 0x00	; 0
    48b4:	4f 5f       	subi	r20, 0xFF	; 255
    48b6:	5f 4f       	sbci	r21, 0xFF	; 255
    48b8:	48 0f       	add	r20, r24
    48ba:	59 1f       	adc	r21, r25
    48bc:	e7 01       	movw	r28, r14
    48be:	ea 81       	ldd	r30, Y+2	; 0x02
    48c0:	fb 81       	ldd	r31, Y+3	; 0x03
    48c2:	93 81       	ldd	r25, Z+3	; 0x03
    48c4:	82 81       	ldd	r24, Z+2	; 0x02
    48c6:	25 81       	ldd	r18, Z+5	; 0x05
    48c8:	98 1b       	sub	r25, r24
    48ca:	92 23       	and	r25, r18
    48cc:	84 81       	ldd	r24, Z+4	; 0x04
    48ce:	98 17       	cp	r25, r24
    48d0:	79 f0       	breq	.+30     	; 0x48f0 <serial_sendBytes+0x7c>
    48d2:	8c 91       	ld	r24, X
    48d4:	93 81       	ldd	r25, Z+3	; 0x03
    48d6:	26 95       	lsr	r18
    48d8:	29 23       	and	r18, r25
    48da:	60 81       	ld	r22, Z
    48dc:	71 81       	ldd	r23, Z+1	; 0x01
    48de:	8b 01       	movw	r16, r22
    48e0:	02 0f       	add	r16, r18
    48e2:	11 1d       	adc	r17, r1
    48e4:	e8 01       	movw	r28, r16
    48e6:	88 83       	st	Y, r24
    48e8:	9f 5f       	subi	r25, 0xFF	; 255
    48ea:	85 81       	ldd	r24, Z+5	; 0x05
    48ec:	98 23       	and	r25, r24
    48ee:	93 83       	std	Z+3, r25	; 0x03
    48f0:	11 96       	adiw	r26, 0x01	; 1
    48f2:	a4 17       	cp	r26, r20
    48f4:	b5 07       	cpc	r27, r21
    48f6:	11 f7       	brne	.-60     	; 0x48bc <serial_sendBytes+0x48>
    48f8:	d7 01       	movw	r26, r14
    48fa:	ed 91       	ld	r30, X+
    48fc:	fc 91       	ld	r31, X
    48fe:	35 97       	sbiw	r30, 0x05	; 5
    4900:	80 81       	ld	r24, Z
    4902:	80 62       	ori	r24, 0x20	; 32
    4904:	80 83       	st	Z, r24
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	03 c0       	rjmp	.+6      	; 0x4910 <serial_sendBytes+0x9c>
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	01 c0       	rjmp	.+2      	; 0x4910 <serial_sendBytes+0x9c>
    490e:	82 e0       	ldi	r24, 0x02	; 2
    4910:	df 91       	pop	r29
    4912:	cf 91       	pop	r28
    4914:	1f 91       	pop	r17
    4916:	0f 91       	pop	r16
    4918:	ff 90       	pop	r15
    491a:	ef 90       	pop	r14
    491c:	08 95       	ret

0000491e <serial_getByte>:
    491e:	00 97       	sbiw	r24, 0x00	; 0
    4920:	d1 f0       	breq	.+52     	; 0x4956 <serial_getByte+0x38>
    4922:	dc 01       	movw	r26, r24
    4924:	14 96       	adiw	r26, 0x04	; 4
    4926:	ed 91       	ld	r30, X+
    4928:	fc 91       	ld	r31, X
    492a:	15 97       	sbiw	r26, 0x05	; 5
    492c:	93 81       	ldd	r25, Z+3	; 0x03
    492e:	82 81       	ldd	r24, Z+2	; 0x02
    4930:	98 17       	cp	r25, r24
    4932:	99 f0       	breq	.+38     	; 0x495a <serial_getByte+0x3c>
    4934:	92 81       	ldd	r25, Z+2	; 0x02
    4936:	85 81       	ldd	r24, Z+5	; 0x05
    4938:	86 95       	lsr	r24
    493a:	89 23       	and	r24, r25
    493c:	a0 81       	ld	r26, Z
    493e:	b1 81       	ldd	r27, Z+1	; 0x01
    4940:	a8 0f       	add	r26, r24
    4942:	b1 1d       	adc	r27, r1
    4944:	8c 91       	ld	r24, X
    4946:	db 01       	movw	r26, r22
    4948:	8c 93       	st	X, r24
    494a:	9f 5f       	subi	r25, 0xFF	; 255
    494c:	85 81       	ldd	r24, Z+5	; 0x05
    494e:	98 23       	and	r25, r24
    4950:	92 83       	std	Z+2, r25	; 0x02
    4952:	80 e0       	ldi	r24, 0x00	; 0
    4954:	08 95       	ret
    4956:	81 e0       	ldi	r24, 0x01	; 1
    4958:	08 95       	ret
    495a:	83 e0       	ldi	r24, 0x03	; 3
    495c:	08 95       	ret

0000495e <__vector_25>:
    495e:	1f 92       	push	r1
    4960:	0f 92       	push	r0
    4962:	0f b6       	in	r0, 0x3f	; 63
    4964:	0f 92       	push	r0
    4966:	11 24       	eor	r1, r1
    4968:	0b b6       	in	r0, 0x3b	; 59
    496a:	0f 92       	push	r0
    496c:	2f 93       	push	r18
    496e:	3f 93       	push	r19
    4970:	4f 93       	push	r20
    4972:	5f 93       	push	r21
    4974:	6f 93       	push	r22
    4976:	7f 93       	push	r23
    4978:	8f 93       	push	r24
    497a:	9f 93       	push	r25
    497c:	af 93       	push	r26
    497e:	bf 93       	push	r27
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	ef 93       	push	r30
    4986:	ff 93       	push	r31
    4988:	a0 91 b3 17 	lds	r26, 0x17B3	; 0x8017b3 <_ser_handle>
    498c:	b0 91 b4 17 	lds	r27, 0x17B4	; 0x8017b4 <_ser_handle+0x1>
    4990:	10 97       	sbiw	r26, 0x00	; 0
    4992:	11 f1       	breq	.+68     	; 0x49d8 <__vector_25+0x7a>
    4994:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4998:	14 96       	adiw	r26, 0x04	; 4
    499a:	ed 91       	ld	r30, X+
    499c:	fc 91       	ld	r31, X
    499e:	15 97       	sbiw	r26, 0x05	; 5
    49a0:	93 81       	ldd	r25, Z+3	; 0x03
    49a2:	82 81       	ldd	r24, Z+2	; 0x02
    49a4:	25 81       	ldd	r18, Z+5	; 0x05
    49a6:	98 1b       	sub	r25, r24
    49a8:	92 23       	and	r25, r18
    49aa:	84 81       	ldd	r24, Z+4	; 0x04
    49ac:	98 17       	cp	r25, r24
    49ae:	61 f0       	breq	.+24     	; 0x49c8 <__vector_25+0x6a>
    49b0:	83 81       	ldd	r24, Z+3	; 0x03
    49b2:	26 95       	lsr	r18
    49b4:	28 23       	and	r18, r24
    49b6:	c0 81       	ld	r28, Z
    49b8:	d1 81       	ldd	r29, Z+1	; 0x01
    49ba:	c2 0f       	add	r28, r18
    49bc:	d1 1d       	adc	r29, r1
    49be:	68 83       	st	Y, r22
    49c0:	8f 5f       	subi	r24, 0xFF	; 255
    49c2:	95 81       	ldd	r25, Z+5	; 0x05
    49c4:	89 23       	and	r24, r25
    49c6:	83 83       	std	Z+3, r24	; 0x03
    49c8:	16 96       	adiw	r26, 0x06	; 6
    49ca:	ed 91       	ld	r30, X+
    49cc:	fc 91       	ld	r31, X
    49ce:	17 97       	sbiw	r26, 0x07	; 7
    49d0:	30 97       	sbiw	r30, 0x00	; 0
    49d2:	11 f0       	breq	.+4      	; 0x49d8 <__vector_25+0x7a>
    49d4:	cd 01       	movw	r24, r26
    49d6:	19 95       	eicall
    49d8:	ff 91       	pop	r31
    49da:	ef 91       	pop	r30
    49dc:	df 91       	pop	r29
    49de:	cf 91       	pop	r28
    49e0:	bf 91       	pop	r27
    49e2:	af 91       	pop	r26
    49e4:	9f 91       	pop	r25
    49e6:	8f 91       	pop	r24
    49e8:	7f 91       	pop	r23
    49ea:	6f 91       	pop	r22
    49ec:	5f 91       	pop	r21
    49ee:	4f 91       	pop	r20
    49f0:	3f 91       	pop	r19
    49f2:	2f 91       	pop	r18
    49f4:	0f 90       	pop	r0
    49f6:	0b be       	out	0x3b, r0	; 59
    49f8:	0f 90       	pop	r0
    49fa:	0f be       	out	0x3f, r0	; 63
    49fc:	0f 90       	pop	r0
    49fe:	1f 90       	pop	r1
    4a00:	18 95       	reti

00004a02 <__vector_26>:
    4a02:	1f 92       	push	r1
    4a04:	0f 92       	push	r0
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	0f 92       	push	r0
    4a0a:	11 24       	eor	r1, r1
    4a0c:	0b b6       	in	r0, 0x3b	; 59
    4a0e:	0f 92       	push	r0
    4a10:	2f 93       	push	r18
    4a12:	8f 93       	push	r24
    4a14:	9f 93       	push	r25
    4a16:	af 93       	push	r26
    4a18:	bf 93       	push	r27
    4a1a:	ef 93       	push	r30
    4a1c:	ff 93       	push	r31
    4a1e:	e0 91 b3 17 	lds	r30, 0x17B3	; 0x8017b3 <_ser_handle>
    4a22:	f0 91 b4 17 	lds	r31, 0x17B4	; 0x8017b4 <_ser_handle+0x1>
    4a26:	30 97       	sbiw	r30, 0x00	; 0
    4a28:	b9 f0       	breq	.+46     	; 0x4a58 <__vector_26+0x56>
    4a2a:	02 80       	ldd	r0, Z+2	; 0x02
    4a2c:	f3 81       	ldd	r31, Z+3	; 0x03
    4a2e:	e0 2d       	mov	r30, r0
    4a30:	93 81       	ldd	r25, Z+3	; 0x03
    4a32:	82 81       	ldd	r24, Z+2	; 0x02
    4a34:	98 17       	cp	r25, r24
    4a36:	b1 f0       	breq	.+44     	; 0x4a64 <__vector_26+0x62>
    4a38:	92 81       	ldd	r25, Z+2	; 0x02
    4a3a:	85 81       	ldd	r24, Z+5	; 0x05
    4a3c:	28 2f       	mov	r18, r24
    4a3e:	26 95       	lsr	r18
    4a40:	29 23       	and	r18, r25
    4a42:	a0 81       	ld	r26, Z
    4a44:	b1 81       	ldd	r27, Z+1	; 0x01
    4a46:	a2 0f       	add	r26, r18
    4a48:	b1 1d       	adc	r27, r1
    4a4a:	2c 91       	ld	r18, X
    4a4c:	9f 5f       	subi	r25, 0xFF	; 255
    4a4e:	89 23       	and	r24, r25
    4a50:	82 83       	std	Z+2, r24	; 0x02
    4a52:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4a56:	0b c0       	rjmp	.+22     	; 0x4a6e <__vector_26+0x6c>
    4a58:	e1 ec       	ldi	r30, 0xC1	; 193
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	80 81       	ld	r24, Z
    4a5e:	8f 7d       	andi	r24, 0xDF	; 223
    4a60:	80 83       	st	Z, r24
    4a62:	05 c0       	rjmp	.+10     	; 0x4a6e <__vector_26+0x6c>
    4a64:	e1 ec       	ldi	r30, 0xC1	; 193
    4a66:	f0 e0       	ldi	r31, 0x00	; 0
    4a68:	80 81       	ld	r24, Z
    4a6a:	8f 7d       	andi	r24, 0xDF	; 223
    4a6c:	80 83       	st	Z, r24
    4a6e:	ff 91       	pop	r31
    4a70:	ef 91       	pop	r30
    4a72:	bf 91       	pop	r27
    4a74:	af 91       	pop	r26
    4a76:	9f 91       	pop	r25
    4a78:	8f 91       	pop	r24
    4a7a:	2f 91       	pop	r18
    4a7c:	0f 90       	pop	r0
    4a7e:	0b be       	out	0x3b, r0	; 59
    4a80:	0f 90       	pop	r0
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	0f 90       	pop	r0
    4a86:	1f 90       	pop	r1
    4a88:	18 95       	reti

00004a8a <__vector_36>:
    4a8a:	1f 92       	push	r1
    4a8c:	0f 92       	push	r0
    4a8e:	0f b6       	in	r0, 0x3f	; 63
    4a90:	0f 92       	push	r0
    4a92:	11 24       	eor	r1, r1
    4a94:	0b b6       	in	r0, 0x3b	; 59
    4a96:	0f 92       	push	r0
    4a98:	2f 93       	push	r18
    4a9a:	3f 93       	push	r19
    4a9c:	4f 93       	push	r20
    4a9e:	5f 93       	push	r21
    4aa0:	6f 93       	push	r22
    4aa2:	7f 93       	push	r23
    4aa4:	8f 93       	push	r24
    4aa6:	9f 93       	push	r25
    4aa8:	af 93       	push	r26
    4aaa:	bf 93       	push	r27
    4aac:	cf 93       	push	r28
    4aae:	df 93       	push	r29
    4ab0:	ef 93       	push	r30
    4ab2:	ff 93       	push	r31
    4ab4:	a0 91 b5 17 	lds	r26, 0x17B5	; 0x8017b5 <_ser_handle+0x2>
    4ab8:	b0 91 b6 17 	lds	r27, 0x17B6	; 0x8017b6 <_ser_handle+0x3>
    4abc:	10 97       	sbiw	r26, 0x00	; 0
    4abe:	11 f1       	breq	.+68     	; 0x4b04 <__vector_36+0x7a>
    4ac0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4ac4:	14 96       	adiw	r26, 0x04	; 4
    4ac6:	ed 91       	ld	r30, X+
    4ac8:	fc 91       	ld	r31, X
    4aca:	15 97       	sbiw	r26, 0x05	; 5
    4acc:	93 81       	ldd	r25, Z+3	; 0x03
    4ace:	82 81       	ldd	r24, Z+2	; 0x02
    4ad0:	25 81       	ldd	r18, Z+5	; 0x05
    4ad2:	98 1b       	sub	r25, r24
    4ad4:	92 23       	and	r25, r18
    4ad6:	84 81       	ldd	r24, Z+4	; 0x04
    4ad8:	98 17       	cp	r25, r24
    4ada:	61 f0       	breq	.+24     	; 0x4af4 <__vector_36+0x6a>
    4adc:	83 81       	ldd	r24, Z+3	; 0x03
    4ade:	26 95       	lsr	r18
    4ae0:	28 23       	and	r18, r24
    4ae2:	c0 81       	ld	r28, Z
    4ae4:	d1 81       	ldd	r29, Z+1	; 0x01
    4ae6:	c2 0f       	add	r28, r18
    4ae8:	d1 1d       	adc	r29, r1
    4aea:	68 83       	st	Y, r22
    4aec:	8f 5f       	subi	r24, 0xFF	; 255
    4aee:	95 81       	ldd	r25, Z+5	; 0x05
    4af0:	89 23       	and	r24, r25
    4af2:	83 83       	std	Z+3, r24	; 0x03
    4af4:	16 96       	adiw	r26, 0x06	; 6
    4af6:	ed 91       	ld	r30, X+
    4af8:	fc 91       	ld	r31, X
    4afa:	17 97       	sbiw	r26, 0x07	; 7
    4afc:	30 97       	sbiw	r30, 0x00	; 0
    4afe:	11 f0       	breq	.+4      	; 0x4b04 <__vector_36+0x7a>
    4b00:	cd 01       	movw	r24, r26
    4b02:	19 95       	eicall
    4b04:	ff 91       	pop	r31
    4b06:	ef 91       	pop	r30
    4b08:	df 91       	pop	r29
    4b0a:	cf 91       	pop	r28
    4b0c:	bf 91       	pop	r27
    4b0e:	af 91       	pop	r26
    4b10:	9f 91       	pop	r25
    4b12:	8f 91       	pop	r24
    4b14:	7f 91       	pop	r23
    4b16:	6f 91       	pop	r22
    4b18:	5f 91       	pop	r21
    4b1a:	4f 91       	pop	r20
    4b1c:	3f 91       	pop	r19
    4b1e:	2f 91       	pop	r18
    4b20:	0f 90       	pop	r0
    4b22:	0b be       	out	0x3b, r0	; 59
    4b24:	0f 90       	pop	r0
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	0f 90       	pop	r0
    4b2a:	1f 90       	pop	r1
    4b2c:	18 95       	reti

00004b2e <__vector_37>:
    4b2e:	1f 92       	push	r1
    4b30:	0f 92       	push	r0
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	0f 92       	push	r0
    4b36:	11 24       	eor	r1, r1
    4b38:	0b b6       	in	r0, 0x3b	; 59
    4b3a:	0f 92       	push	r0
    4b3c:	2f 93       	push	r18
    4b3e:	8f 93       	push	r24
    4b40:	9f 93       	push	r25
    4b42:	af 93       	push	r26
    4b44:	bf 93       	push	r27
    4b46:	ef 93       	push	r30
    4b48:	ff 93       	push	r31
    4b4a:	e0 91 b5 17 	lds	r30, 0x17B5	; 0x8017b5 <_ser_handle+0x2>
    4b4e:	f0 91 b6 17 	lds	r31, 0x17B6	; 0x8017b6 <_ser_handle+0x3>
    4b52:	30 97       	sbiw	r30, 0x00	; 0
    4b54:	b9 f0       	breq	.+46     	; 0x4b84 <__vector_37+0x56>
    4b56:	02 80       	ldd	r0, Z+2	; 0x02
    4b58:	f3 81       	ldd	r31, Z+3	; 0x03
    4b5a:	e0 2d       	mov	r30, r0
    4b5c:	93 81       	ldd	r25, Z+3	; 0x03
    4b5e:	82 81       	ldd	r24, Z+2	; 0x02
    4b60:	98 17       	cp	r25, r24
    4b62:	b1 f0       	breq	.+44     	; 0x4b90 <__vector_37+0x62>
    4b64:	92 81       	ldd	r25, Z+2	; 0x02
    4b66:	85 81       	ldd	r24, Z+5	; 0x05
    4b68:	28 2f       	mov	r18, r24
    4b6a:	26 95       	lsr	r18
    4b6c:	29 23       	and	r18, r25
    4b6e:	a0 81       	ld	r26, Z
    4b70:	b1 81       	ldd	r27, Z+1	; 0x01
    4b72:	a2 0f       	add	r26, r18
    4b74:	b1 1d       	adc	r27, r1
    4b76:	2c 91       	ld	r18, X
    4b78:	9f 5f       	subi	r25, 0xFF	; 255
    4b7a:	89 23       	and	r24, r25
    4b7c:	82 83       	std	Z+2, r24	; 0x02
    4b7e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4b82:	0b c0       	rjmp	.+22     	; 0x4b9a <__vector_37+0x6c>
    4b84:	e9 ec       	ldi	r30, 0xC9	; 201
    4b86:	f0 e0       	ldi	r31, 0x00	; 0
    4b88:	80 81       	ld	r24, Z
    4b8a:	8f 7d       	andi	r24, 0xDF	; 223
    4b8c:	80 83       	st	Z, r24
    4b8e:	05 c0       	rjmp	.+10     	; 0x4b9a <__vector_37+0x6c>
    4b90:	e9 ec       	ldi	r30, 0xC9	; 201
    4b92:	f0 e0       	ldi	r31, 0x00	; 0
    4b94:	80 81       	ld	r24, Z
    4b96:	8f 7d       	andi	r24, 0xDF	; 223
    4b98:	80 83       	st	Z, r24
    4b9a:	ff 91       	pop	r31
    4b9c:	ef 91       	pop	r30
    4b9e:	bf 91       	pop	r27
    4ba0:	af 91       	pop	r26
    4ba2:	9f 91       	pop	r25
    4ba4:	8f 91       	pop	r24
    4ba6:	2f 91       	pop	r18
    4ba8:	0f 90       	pop	r0
    4baa:	0b be       	out	0x3b, r0	; 59
    4bac:	0f 90       	pop	r0
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	0f 90       	pop	r0
    4bb2:	1f 90       	pop	r1
    4bb4:	18 95       	reti

00004bb6 <__vector_51>:
    4bb6:	1f 92       	push	r1
    4bb8:	0f 92       	push	r0
    4bba:	0f b6       	in	r0, 0x3f	; 63
    4bbc:	0f 92       	push	r0
    4bbe:	11 24       	eor	r1, r1
    4bc0:	0b b6       	in	r0, 0x3b	; 59
    4bc2:	0f 92       	push	r0
    4bc4:	2f 93       	push	r18
    4bc6:	3f 93       	push	r19
    4bc8:	4f 93       	push	r20
    4bca:	5f 93       	push	r21
    4bcc:	6f 93       	push	r22
    4bce:	7f 93       	push	r23
    4bd0:	8f 93       	push	r24
    4bd2:	9f 93       	push	r25
    4bd4:	af 93       	push	r26
    4bd6:	bf 93       	push	r27
    4bd8:	cf 93       	push	r28
    4bda:	df 93       	push	r29
    4bdc:	ef 93       	push	r30
    4bde:	ff 93       	push	r31
    4be0:	a0 91 b7 17 	lds	r26, 0x17B7	; 0x8017b7 <_ser_handle+0x4>
    4be4:	b0 91 b8 17 	lds	r27, 0x17B8	; 0x8017b8 <_ser_handle+0x5>
    4be8:	10 97       	sbiw	r26, 0x00	; 0
    4bea:	11 f1       	breq	.+68     	; 0x4c30 <__vector_51+0x7a>
    4bec:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4bf0:	14 96       	adiw	r26, 0x04	; 4
    4bf2:	ed 91       	ld	r30, X+
    4bf4:	fc 91       	ld	r31, X
    4bf6:	15 97       	sbiw	r26, 0x05	; 5
    4bf8:	93 81       	ldd	r25, Z+3	; 0x03
    4bfa:	82 81       	ldd	r24, Z+2	; 0x02
    4bfc:	25 81       	ldd	r18, Z+5	; 0x05
    4bfe:	98 1b       	sub	r25, r24
    4c00:	92 23       	and	r25, r18
    4c02:	84 81       	ldd	r24, Z+4	; 0x04
    4c04:	98 17       	cp	r25, r24
    4c06:	61 f0       	breq	.+24     	; 0x4c20 <__vector_51+0x6a>
    4c08:	83 81       	ldd	r24, Z+3	; 0x03
    4c0a:	26 95       	lsr	r18
    4c0c:	28 23       	and	r18, r24
    4c0e:	c0 81       	ld	r28, Z
    4c10:	d1 81       	ldd	r29, Z+1	; 0x01
    4c12:	c2 0f       	add	r28, r18
    4c14:	d1 1d       	adc	r29, r1
    4c16:	68 83       	st	Y, r22
    4c18:	8f 5f       	subi	r24, 0xFF	; 255
    4c1a:	95 81       	ldd	r25, Z+5	; 0x05
    4c1c:	89 23       	and	r24, r25
    4c1e:	83 83       	std	Z+3, r24	; 0x03
    4c20:	16 96       	adiw	r26, 0x06	; 6
    4c22:	ed 91       	ld	r30, X+
    4c24:	fc 91       	ld	r31, X
    4c26:	17 97       	sbiw	r26, 0x07	; 7
    4c28:	30 97       	sbiw	r30, 0x00	; 0
    4c2a:	11 f0       	breq	.+4      	; 0x4c30 <__vector_51+0x7a>
    4c2c:	cd 01       	movw	r24, r26
    4c2e:	19 95       	eicall
    4c30:	ff 91       	pop	r31
    4c32:	ef 91       	pop	r30
    4c34:	df 91       	pop	r29
    4c36:	cf 91       	pop	r28
    4c38:	bf 91       	pop	r27
    4c3a:	af 91       	pop	r26
    4c3c:	9f 91       	pop	r25
    4c3e:	8f 91       	pop	r24
    4c40:	7f 91       	pop	r23
    4c42:	6f 91       	pop	r22
    4c44:	5f 91       	pop	r21
    4c46:	4f 91       	pop	r20
    4c48:	3f 91       	pop	r19
    4c4a:	2f 91       	pop	r18
    4c4c:	0f 90       	pop	r0
    4c4e:	0b be       	out	0x3b, r0	; 59
    4c50:	0f 90       	pop	r0
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	0f 90       	pop	r0
    4c56:	1f 90       	pop	r1
    4c58:	18 95       	reti

00004c5a <__vector_52>:
    4c5a:	1f 92       	push	r1
    4c5c:	0f 92       	push	r0
    4c5e:	0f b6       	in	r0, 0x3f	; 63
    4c60:	0f 92       	push	r0
    4c62:	11 24       	eor	r1, r1
    4c64:	0b b6       	in	r0, 0x3b	; 59
    4c66:	0f 92       	push	r0
    4c68:	2f 93       	push	r18
    4c6a:	8f 93       	push	r24
    4c6c:	9f 93       	push	r25
    4c6e:	af 93       	push	r26
    4c70:	bf 93       	push	r27
    4c72:	ef 93       	push	r30
    4c74:	ff 93       	push	r31
    4c76:	e0 91 b7 17 	lds	r30, 0x17B7	; 0x8017b7 <_ser_handle+0x4>
    4c7a:	f0 91 b8 17 	lds	r31, 0x17B8	; 0x8017b8 <_ser_handle+0x5>
    4c7e:	30 97       	sbiw	r30, 0x00	; 0
    4c80:	b9 f0       	breq	.+46     	; 0x4cb0 <__vector_52+0x56>
    4c82:	02 80       	ldd	r0, Z+2	; 0x02
    4c84:	f3 81       	ldd	r31, Z+3	; 0x03
    4c86:	e0 2d       	mov	r30, r0
    4c88:	93 81       	ldd	r25, Z+3	; 0x03
    4c8a:	82 81       	ldd	r24, Z+2	; 0x02
    4c8c:	98 17       	cp	r25, r24
    4c8e:	b1 f0       	breq	.+44     	; 0x4cbc <__vector_52+0x62>
    4c90:	92 81       	ldd	r25, Z+2	; 0x02
    4c92:	85 81       	ldd	r24, Z+5	; 0x05
    4c94:	28 2f       	mov	r18, r24
    4c96:	26 95       	lsr	r18
    4c98:	29 23       	and	r18, r25
    4c9a:	a0 81       	ld	r26, Z
    4c9c:	b1 81       	ldd	r27, Z+1	; 0x01
    4c9e:	a2 0f       	add	r26, r18
    4ca0:	b1 1d       	adc	r27, r1
    4ca2:	2c 91       	ld	r18, X
    4ca4:	9f 5f       	subi	r25, 0xFF	; 255
    4ca6:	89 23       	and	r24, r25
    4ca8:	82 83       	std	Z+2, r24	; 0x02
    4caa:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4cae:	0b c0       	rjmp	.+22     	; 0x4cc6 <__vector_52+0x6c>
    4cb0:	e1 ed       	ldi	r30, 0xD1	; 209
    4cb2:	f0 e0       	ldi	r31, 0x00	; 0
    4cb4:	80 81       	ld	r24, Z
    4cb6:	8f 7d       	andi	r24, 0xDF	; 223
    4cb8:	80 83       	st	Z, r24
    4cba:	05 c0       	rjmp	.+10     	; 0x4cc6 <__vector_52+0x6c>
    4cbc:	e1 ed       	ldi	r30, 0xD1	; 209
    4cbe:	f0 e0       	ldi	r31, 0x00	; 0
    4cc0:	80 81       	ld	r24, Z
    4cc2:	8f 7d       	andi	r24, 0xDF	; 223
    4cc4:	80 83       	st	Z, r24
    4cc6:	ff 91       	pop	r31
    4cc8:	ef 91       	pop	r30
    4cca:	bf 91       	pop	r27
    4ccc:	af 91       	pop	r26
    4cce:	9f 91       	pop	r25
    4cd0:	8f 91       	pop	r24
    4cd2:	2f 91       	pop	r18
    4cd4:	0f 90       	pop	r0
    4cd6:	0b be       	out	0x3b, r0	; 59
    4cd8:	0f 90       	pop	r0
    4cda:	0f be       	out	0x3f, r0	; 63
    4cdc:	0f 90       	pop	r0
    4cde:	1f 90       	pop	r1
    4ce0:	18 95       	reti

00004ce2 <__vector_54>:
    4ce2:	1f 92       	push	r1
    4ce4:	0f 92       	push	r0
    4ce6:	0f b6       	in	r0, 0x3f	; 63
    4ce8:	0f 92       	push	r0
    4cea:	11 24       	eor	r1, r1
    4cec:	0b b6       	in	r0, 0x3b	; 59
    4cee:	0f 92       	push	r0
    4cf0:	2f 93       	push	r18
    4cf2:	3f 93       	push	r19
    4cf4:	4f 93       	push	r20
    4cf6:	5f 93       	push	r21
    4cf8:	6f 93       	push	r22
    4cfa:	7f 93       	push	r23
    4cfc:	8f 93       	push	r24
    4cfe:	9f 93       	push	r25
    4d00:	af 93       	push	r26
    4d02:	bf 93       	push	r27
    4d04:	cf 93       	push	r28
    4d06:	df 93       	push	r29
    4d08:	ef 93       	push	r30
    4d0a:	ff 93       	push	r31
    4d0c:	a0 91 b9 17 	lds	r26, 0x17B9	; 0x8017b9 <_ser_handle+0x6>
    4d10:	b0 91 ba 17 	lds	r27, 0x17BA	; 0x8017ba <_ser_handle+0x7>
    4d14:	10 97       	sbiw	r26, 0x00	; 0
    4d16:	11 f1       	breq	.+68     	; 0x4d5c <__vector_54+0x7a>
    4d18:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4d1c:	14 96       	adiw	r26, 0x04	; 4
    4d1e:	ed 91       	ld	r30, X+
    4d20:	fc 91       	ld	r31, X
    4d22:	15 97       	sbiw	r26, 0x05	; 5
    4d24:	93 81       	ldd	r25, Z+3	; 0x03
    4d26:	82 81       	ldd	r24, Z+2	; 0x02
    4d28:	25 81       	ldd	r18, Z+5	; 0x05
    4d2a:	98 1b       	sub	r25, r24
    4d2c:	92 23       	and	r25, r18
    4d2e:	84 81       	ldd	r24, Z+4	; 0x04
    4d30:	98 17       	cp	r25, r24
    4d32:	61 f0       	breq	.+24     	; 0x4d4c <__vector_54+0x6a>
    4d34:	83 81       	ldd	r24, Z+3	; 0x03
    4d36:	26 95       	lsr	r18
    4d38:	28 23       	and	r18, r24
    4d3a:	c0 81       	ld	r28, Z
    4d3c:	d1 81       	ldd	r29, Z+1	; 0x01
    4d3e:	c2 0f       	add	r28, r18
    4d40:	d1 1d       	adc	r29, r1
    4d42:	68 83       	st	Y, r22
    4d44:	8f 5f       	subi	r24, 0xFF	; 255
    4d46:	95 81       	ldd	r25, Z+5	; 0x05
    4d48:	89 23       	and	r24, r25
    4d4a:	83 83       	std	Z+3, r24	; 0x03
    4d4c:	16 96       	adiw	r26, 0x06	; 6
    4d4e:	ed 91       	ld	r30, X+
    4d50:	fc 91       	ld	r31, X
    4d52:	17 97       	sbiw	r26, 0x07	; 7
    4d54:	30 97       	sbiw	r30, 0x00	; 0
    4d56:	11 f0       	breq	.+4      	; 0x4d5c <__vector_54+0x7a>
    4d58:	cd 01       	movw	r24, r26
    4d5a:	19 95       	eicall
    4d5c:	ff 91       	pop	r31
    4d5e:	ef 91       	pop	r30
    4d60:	df 91       	pop	r29
    4d62:	cf 91       	pop	r28
    4d64:	bf 91       	pop	r27
    4d66:	af 91       	pop	r26
    4d68:	9f 91       	pop	r25
    4d6a:	8f 91       	pop	r24
    4d6c:	7f 91       	pop	r23
    4d6e:	6f 91       	pop	r22
    4d70:	5f 91       	pop	r21
    4d72:	4f 91       	pop	r20
    4d74:	3f 91       	pop	r19
    4d76:	2f 91       	pop	r18
    4d78:	0f 90       	pop	r0
    4d7a:	0b be       	out	0x3b, r0	; 59
    4d7c:	0f 90       	pop	r0
    4d7e:	0f be       	out	0x3f, r0	; 63
    4d80:	0f 90       	pop	r0
    4d82:	1f 90       	pop	r1
    4d84:	18 95       	reti

00004d86 <__vector_55>:
    4d86:	1f 92       	push	r1
    4d88:	0f 92       	push	r0
    4d8a:	0f b6       	in	r0, 0x3f	; 63
    4d8c:	0f 92       	push	r0
    4d8e:	11 24       	eor	r1, r1
    4d90:	0b b6       	in	r0, 0x3b	; 59
    4d92:	0f 92       	push	r0
    4d94:	2f 93       	push	r18
    4d96:	8f 93       	push	r24
    4d98:	9f 93       	push	r25
    4d9a:	af 93       	push	r26
    4d9c:	bf 93       	push	r27
    4d9e:	ef 93       	push	r30
    4da0:	ff 93       	push	r31
    4da2:	e0 91 b9 17 	lds	r30, 0x17B9	; 0x8017b9 <_ser_handle+0x6>
    4da6:	f0 91 ba 17 	lds	r31, 0x17BA	; 0x8017ba <_ser_handle+0x7>
    4daa:	30 97       	sbiw	r30, 0x00	; 0
    4dac:	b9 f0       	breq	.+46     	; 0x4ddc <__vector_55+0x56>
    4dae:	02 80       	ldd	r0, Z+2	; 0x02
    4db0:	f3 81       	ldd	r31, Z+3	; 0x03
    4db2:	e0 2d       	mov	r30, r0
    4db4:	93 81       	ldd	r25, Z+3	; 0x03
    4db6:	82 81       	ldd	r24, Z+2	; 0x02
    4db8:	98 17       	cp	r25, r24
    4dba:	b1 f0       	breq	.+44     	; 0x4de8 <__vector_55+0x62>
    4dbc:	92 81       	ldd	r25, Z+2	; 0x02
    4dbe:	85 81       	ldd	r24, Z+5	; 0x05
    4dc0:	28 2f       	mov	r18, r24
    4dc2:	26 95       	lsr	r18
    4dc4:	29 23       	and	r18, r25
    4dc6:	a0 81       	ld	r26, Z
    4dc8:	b1 81       	ldd	r27, Z+1	; 0x01
    4dca:	a2 0f       	add	r26, r18
    4dcc:	b1 1d       	adc	r27, r1
    4dce:	2c 91       	ld	r18, X
    4dd0:	9f 5f       	subi	r25, 0xFF	; 255
    4dd2:	89 23       	and	r24, r25
    4dd4:	82 83       	std	Z+2, r24	; 0x02
    4dd6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4dda:	0b c0       	rjmp	.+22     	; 0x4df2 <__vector_55+0x6c>
    4ddc:	e1 e3       	ldi	r30, 0x31	; 49
    4dde:	f1 e0       	ldi	r31, 0x01	; 1
    4de0:	80 81       	ld	r24, Z
    4de2:	8f 7d       	andi	r24, 0xDF	; 223
    4de4:	80 83       	st	Z, r24
    4de6:	05 c0       	rjmp	.+10     	; 0x4df2 <__vector_55+0x6c>
    4de8:	e1 e3       	ldi	r30, 0x31	; 49
    4dea:	f1 e0       	ldi	r31, 0x01	; 1
    4dec:	80 81       	ld	r24, Z
    4dee:	8f 7d       	andi	r24, 0xDF	; 223
    4df0:	80 83       	st	Z, r24
    4df2:	ff 91       	pop	r31
    4df4:	ef 91       	pop	r30
    4df6:	bf 91       	pop	r27
    4df8:	af 91       	pop	r26
    4dfa:	9f 91       	pop	r25
    4dfc:	8f 91       	pop	r24
    4dfe:	2f 91       	pop	r18
    4e00:	0f 90       	pop	r0
    4e02:	0b be       	out	0x3b, r0	; 59
    4e04:	0f 90       	pop	r0
    4e06:	0f be       	out	0x3f, r0	; 63
    4e08:	0f 90       	pop	r0
    4e0a:	1f 90       	pop	r1
    4e0c:	18 95       	reti

00004e0e <usart_getchar>:
    4e0e:	cf 93       	push	r28
    4e10:	df 93       	push	r29
    4e12:	1f 92       	push	r1
    4e14:	cd b7       	in	r28, 0x3d	; 61
    4e16:	de b7       	in	r29, 0x3e	; 62
    4e18:	be 01       	movw	r22, r28
    4e1a:	6f 5f       	subi	r22, 0xFF	; 255
    4e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e1e:	80 91 bb 17 	lds	r24, 0x17BB	; 0x8017bb <_com_serial_instance>
    4e22:	90 91 bc 17 	lds	r25, 0x17BC	; 0x8017bc <_com_serial_instance+0x1>
    4e26:	7b dd       	rcall	.-1290   	; 0x491e <serial_getByte>
    4e28:	81 11       	cpse	r24, r1
    4e2a:	f6 cf       	rjmp	.-20     	; 0x4e18 <usart_getchar+0xa>
    4e2c:	89 81       	ldd	r24, Y+1	; 0x01
    4e2e:	90 e0       	ldi	r25, 0x00	; 0
    4e30:	0f 90       	pop	r0
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	08 95       	ret

00004e38 <usart_putchar>:
    4e38:	68 2f       	mov	r22, r24
    4e3a:	80 91 bb 17 	lds	r24, 0x17BB	; 0x8017bb <_com_serial_instance>
    4e3e:	90 91 bc 17 	lds	r25, 0x17BC	; 0x8017bc <_com_serial_instance+0x1>
    4e42:	ed dc       	rcall	.-1574   	; 0x481e <serial_sendByte>
    4e44:	80 e0       	ldi	r24, 0x00	; 0
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	08 95       	ret

00004e4a <stdio_initialise>:
    4e4a:	8f 92       	push	r8
    4e4c:	9f 92       	push	r9
    4e4e:	af 92       	push	r10
    4e50:	cf 92       	push	r12
    4e52:	ef 92       	push	r14
    4e54:	0f 93       	push	r16
    4e56:	81 2c       	mov	r8, r1
    4e58:	91 2c       	mov	r9, r1
    4e5a:	68 94       	set
    4e5c:	aa 24       	eor	r10, r10
    4e5e:	a7 f8       	bld	r10, 7
    4e60:	68 94       	set
    4e62:	cc 24       	eor	r12, r12
    4e64:	c7 f8       	bld	r12, 7
    4e66:	e1 2c       	mov	r14, r1
    4e68:	00 e0       	ldi	r16, 0x00	; 0
    4e6a:	23 e0       	ldi	r18, 0x03	; 3
    4e6c:	40 e0       	ldi	r20, 0x00	; 0
    4e6e:	51 ee       	ldi	r21, 0xE1	; 225
    4e70:	60 e0       	ldi	r22, 0x00	; 0
    4e72:	70 e0       	ldi	r23, 0x00	; 0
    4e74:	2e dc       	rcall	.-1956   	; 0x46d2 <serial_create>
    4e76:	90 93 bc 17 	sts	0x17BC, r25	; 0x8017bc <_com_serial_instance+0x1>
    4e7a:	80 93 bb 17 	sts	0x17BB, r24	; 0x8017bb <_com_serial_instance>
    4e7e:	ef ee       	ldi	r30, 0xEF	; 239
    4e80:	f7 e1       	ldi	r31, 0x17	; 23
    4e82:	83 e1       	ldi	r24, 0x13	; 19
    4e84:	92 e0       	ldi	r25, 0x02	; 2
    4e86:	91 83       	std	Z+1, r25	; 0x01
    4e88:	80 83       	st	Z, r24
    4e8a:	93 83       	std	Z+3, r25	; 0x03
    4e8c:	82 83       	std	Z+2, r24	; 0x02
    4e8e:	0f 91       	pop	r16
    4e90:	ef 90       	pop	r14
    4e92:	cf 90       	pop	r12
    4e94:	af 90       	pop	r10
    4e96:	9f 90       	pop	r9
    4e98:	8f 90       	pop	r8
    4e9a:	08 95       	ret

00004e9c <_turn_off>:
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	fc 01       	movw	r30, r24
    4ea0:	ee 0f       	add	r30, r30
    4ea2:	ff 1f       	adc	r31, r31
    4ea4:	e8 0f       	add	r30, r24
    4ea6:	f9 1f       	adc	r31, r25
    4ea8:	ee 0f       	add	r30, r30
    4eaa:	ff 1f       	adc	r31, r31
    4eac:	e3 54       	subi	r30, 0x43	; 67
    4eae:	f8 4e       	sbci	r31, 0xE8	; 232
    4eb0:	23 81       	ldd	r18, Z+3	; 0x03
    4eb2:	21 11       	cpse	r18, r1
    4eb4:	1f c0       	rjmp	.+62     	; 0x4ef4 <_turn_off+0x58>
    4eb6:	9c 01       	movw	r18, r24
    4eb8:	22 0f       	add	r18, r18
    4eba:	33 1f       	adc	r19, r19
    4ebc:	f9 01       	movw	r30, r18
    4ebe:	e8 0f       	add	r30, r24
    4ec0:	f9 1f       	adc	r31, r25
    4ec2:	ee 0f       	add	r30, r30
    4ec4:	ff 1f       	adc	r31, r31
    4ec6:	e3 54       	subi	r30, 0x43	; 67
    4ec8:	f8 4e       	sbci	r31, 0xE8	; 232
    4eca:	a0 81       	ld	r26, Z
    4ecc:	b1 81       	ldd	r27, Z+1	; 0x01
    4ece:	4c 91       	ld	r20, X
    4ed0:	f9 01       	movw	r30, r18
    4ed2:	e8 0f       	add	r30, r24
    4ed4:	f9 1f       	adc	r31, r25
    4ed6:	ee 0f       	add	r30, r30
    4ed8:	ff 1f       	adc	r31, r31
    4eda:	e3 54       	subi	r30, 0x43	; 67
    4edc:	f8 4e       	sbci	r31, 0xE8	; 232
    4ede:	81 e0       	ldi	r24, 0x01	; 1
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	02 80       	ldd	r0, Z+2	; 0x02
    4ee4:	02 c0       	rjmp	.+4      	; 0x4eea <_turn_off+0x4e>
    4ee6:	88 0f       	add	r24, r24
    4ee8:	99 1f       	adc	r25, r25
    4eea:	0a 94       	dec	r0
    4eec:	e2 f7       	brpl	.-8      	; 0x4ee6 <_turn_off+0x4a>
    4eee:	84 2b       	or	r24, r20
    4ef0:	8c 93       	st	X, r24
    4ef2:	08 95       	ret
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	ee 0f       	add	r30, r30
    4ef8:	ff 1f       	adc	r31, r31
    4efa:	df 01       	movw	r26, r30
    4efc:	a8 0f       	add	r26, r24
    4efe:	b9 1f       	adc	r27, r25
    4f00:	aa 0f       	add	r26, r26
    4f02:	bb 1f       	adc	r27, r27
    4f04:	a3 54       	subi	r26, 0x43	; 67
    4f06:	b8 4e       	sbci	r27, 0xE8	; 232
    4f08:	0d 90       	ld	r0, X+
    4f0a:	bc 91       	ld	r27, X
    4f0c:	a0 2d       	mov	r26, r0
    4f0e:	2c 91       	ld	r18, X
    4f10:	e8 0f       	add	r30, r24
    4f12:	f9 1f       	adc	r31, r25
    4f14:	ee 0f       	add	r30, r30
    4f16:	ff 1f       	adc	r31, r31
    4f18:	e3 54       	subi	r30, 0x43	; 67
    4f1a:	f8 4e       	sbci	r31, 0xE8	; 232
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	02 80       	ldd	r0, Z+2	; 0x02
    4f22:	02 c0       	rjmp	.+4      	; 0x4f28 <_turn_off+0x8c>
    4f24:	88 0f       	add	r24, r24
    4f26:	99 1f       	adc	r25, r25
    4f28:	0a 94       	dec	r0
    4f2a:	e2 f7       	brpl	.-8      	; 0x4f24 <_turn_off+0x88>
    4f2c:	80 95       	com	r24
    4f2e:	82 23       	and	r24, r18
    4f30:	8c 93       	st	X, r24
    4f32:	08 95       	ret

00004f34 <_turn_on>:
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	fc 01       	movw	r30, r24
    4f38:	ee 0f       	add	r30, r30
    4f3a:	ff 1f       	adc	r31, r31
    4f3c:	e8 0f       	add	r30, r24
    4f3e:	f9 1f       	adc	r31, r25
    4f40:	ee 0f       	add	r30, r30
    4f42:	ff 1f       	adc	r31, r31
    4f44:	e3 54       	subi	r30, 0x43	; 67
    4f46:	f8 4e       	sbci	r31, 0xE8	; 232
    4f48:	23 81       	ldd	r18, Z+3	; 0x03
    4f4a:	21 11       	cpse	r18, r1
    4f4c:	20 c0       	rjmp	.+64     	; 0x4f8e <_turn_on+0x5a>
    4f4e:	9c 01       	movw	r18, r24
    4f50:	22 0f       	add	r18, r18
    4f52:	33 1f       	adc	r19, r19
    4f54:	f9 01       	movw	r30, r18
    4f56:	e8 0f       	add	r30, r24
    4f58:	f9 1f       	adc	r31, r25
    4f5a:	ee 0f       	add	r30, r30
    4f5c:	ff 1f       	adc	r31, r31
    4f5e:	e3 54       	subi	r30, 0x43	; 67
    4f60:	f8 4e       	sbci	r31, 0xE8	; 232
    4f62:	a0 81       	ld	r26, Z
    4f64:	b1 81       	ldd	r27, Z+1	; 0x01
    4f66:	4c 91       	ld	r20, X
    4f68:	f9 01       	movw	r30, r18
    4f6a:	e8 0f       	add	r30, r24
    4f6c:	f9 1f       	adc	r31, r25
    4f6e:	ee 0f       	add	r30, r30
    4f70:	ff 1f       	adc	r31, r31
    4f72:	e3 54       	subi	r30, 0x43	; 67
    4f74:	f8 4e       	sbci	r31, 0xE8	; 232
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	02 80       	ldd	r0, Z+2	; 0x02
    4f7c:	02 c0       	rjmp	.+4      	; 0x4f82 <_turn_on+0x4e>
    4f7e:	88 0f       	add	r24, r24
    4f80:	99 1f       	adc	r25, r25
    4f82:	0a 94       	dec	r0
    4f84:	e2 f7       	brpl	.-8      	; 0x4f7e <_turn_on+0x4a>
    4f86:	80 95       	com	r24
    4f88:	84 23       	and	r24, r20
    4f8a:	8c 93       	st	X, r24
    4f8c:	08 95       	ret
    4f8e:	fc 01       	movw	r30, r24
    4f90:	ee 0f       	add	r30, r30
    4f92:	ff 1f       	adc	r31, r31
    4f94:	df 01       	movw	r26, r30
    4f96:	a8 0f       	add	r26, r24
    4f98:	b9 1f       	adc	r27, r25
    4f9a:	aa 0f       	add	r26, r26
    4f9c:	bb 1f       	adc	r27, r27
    4f9e:	a3 54       	subi	r26, 0x43	; 67
    4fa0:	b8 4e       	sbci	r27, 0xE8	; 232
    4fa2:	0d 90       	ld	r0, X+
    4fa4:	bc 91       	ld	r27, X
    4fa6:	a0 2d       	mov	r26, r0
    4fa8:	2c 91       	ld	r18, X
    4faa:	e8 0f       	add	r30, r24
    4fac:	f9 1f       	adc	r31, r25
    4fae:	ee 0f       	add	r30, r30
    4fb0:	ff 1f       	adc	r31, r31
    4fb2:	e3 54       	subi	r30, 0x43	; 67
    4fb4:	f8 4e       	sbci	r31, 0xE8	; 232
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	02 80       	ldd	r0, Z+2	; 0x02
    4fbc:	02 c0       	rjmp	.+4      	; 0x4fc2 <_turn_on+0x8e>
    4fbe:	88 0f       	add	r24, r24
    4fc0:	99 1f       	adc	r25, r25
    4fc2:	0a 94       	dec	r0
    4fc4:	e2 f7       	brpl	.-8      	; 0x4fbe <_turn_on+0x8a>
    4fc6:	82 2b       	or	r24, r18
    4fc8:	8c 93       	st	X, r24
    4fca:	08 95       	ret

00004fcc <_hal_led_task>:
    4fcc:	cc 24       	eor	r12, r12
    4fce:	c3 94       	inc	r12
    4fd0:	d1 2c       	mov	r13, r1
    4fd2:	68 94       	set
    4fd4:	bb 24       	eor	r11, r11
    4fd6:	b2 f8       	bld	r11, 2
    4fd8:	cd eb       	ldi	r28, 0xBD	; 189
    4fda:	d7 e1       	ldi	r29, 0x17	; 23
    4fdc:	10 e0       	ldi	r17, 0x00	; 0
    4fde:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe0:	81 30       	cpi	r24, 0x01	; 1
    4fe2:	81 f0       	breq	.+32     	; 0x5004 <_hal_led_task+0x38>
    4fe4:	18 f1       	brcs	.+70     	; 0x502c <_hal_led_task+0x60>
    4fe6:	82 30       	cpi	r24, 0x02	; 2
    4fe8:	61 f5       	brne	.+88     	; 0x5042 <_hal_led_task+0x76>
    4fea:	e8 81       	ld	r30, Y
    4fec:	f9 81       	ldd	r31, Y+1	; 0x01
    4fee:	20 81       	ld	r18, Z
    4ff0:	c6 01       	movw	r24, r12
    4ff2:	0a 80       	ldd	r0, Y+2	; 0x02
    4ff4:	02 c0       	rjmp	.+4      	; 0x4ffa <_hal_led_task+0x2e>
    4ff6:	88 0f       	add	r24, r24
    4ff8:	99 1f       	adc	r25, r25
    4ffa:	0a 94       	dec	r0
    4ffc:	e2 f7       	brpl	.-8      	; 0x4ff6 <_hal_led_task+0x2a>
    4ffe:	82 27       	eor	r24, r18
    5000:	80 83       	st	Z, r24
    5002:	1f c0       	rjmp	.+62     	; 0x5042 <_hal_led_task+0x76>
    5004:	8d 81       	ldd	r24, Y+5	; 0x05
    5006:	8f 5f       	subi	r24, 0xFF	; 255
    5008:	86 30       	cpi	r24, 0x06	; 6
    500a:	10 f4       	brcc	.+4      	; 0x5010 <_hal_led_task+0x44>
    500c:	8d 83       	std	Y+5, r24	; 0x05
    500e:	19 c0       	rjmp	.+50     	; 0x5042 <_hal_led_task+0x76>
    5010:	1d 82       	std	Y+5, r1	; 0x05
    5012:	e8 81       	ld	r30, Y
    5014:	f9 81       	ldd	r31, Y+1	; 0x01
    5016:	20 81       	ld	r18, Z
    5018:	c6 01       	movw	r24, r12
    501a:	0a 80       	ldd	r0, Y+2	; 0x02
    501c:	02 c0       	rjmp	.+4      	; 0x5022 <_hal_led_task+0x56>
    501e:	88 0f       	add	r24, r24
    5020:	99 1f       	adc	r25, r25
    5022:	0a 94       	dec	r0
    5024:	e2 f7       	brpl	.-8      	; 0x501e <_hal_led_task+0x52>
    5026:	82 27       	eor	r24, r18
    5028:	80 83       	st	Z, r24
    502a:	0b c0       	rjmp	.+22     	; 0x5042 <_hal_led_task+0x76>
    502c:	0d 81       	ldd	r16, Y+5	; 0x05
    502e:	00 23       	and	r16, r16
    5030:	29 f0       	breq	.+10     	; 0x503c <_hal_led_task+0x70>
    5032:	81 2f       	mov	r24, r17
    5034:	7f df       	rcall	.-258    	; 0x4f34 <_turn_on>
    5036:	01 50       	subi	r16, 0x01	; 1
    5038:	0d 83       	std	Y+5, r16	; 0x05
    503a:	03 c0       	rjmp	.+6      	; 0x5042 <_hal_led_task+0x76>
    503c:	bc 82       	std	Y+4, r11	; 0x04
    503e:	81 2f       	mov	r24, r17
    5040:	2d df       	rcall	.-422    	; 0x4e9c <_turn_off>
    5042:	1f 5f       	subi	r17, 0xFF	; 255
    5044:	26 96       	adiw	r28, 0x06	; 6
    5046:	14 30       	cpi	r17, 0x04	; 4
    5048:	51 f6       	brne	.-108    	; 0x4fde <_hal_led_task+0x12>
    504a:	6c e0       	ldi	r22, 0x0C	; 12
    504c:	70 e0       	ldi	r23, 0x00	; 0
    504e:	80 e0       	ldi	r24, 0x00	; 0
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskDelay>
    5056:	c0 cf       	rjmp	.-128    	; 0x4fd8 <_hal_led_task+0xc>

00005058 <status_leds_initialise>:
    5058:	ef 92       	push	r14
    505a:	ff 92       	push	r15
    505c:	0f 93       	push	r16
    505e:	1f 93       	push	r17
    5060:	cf 93       	push	r28
    5062:	df 93       	push	r29
    5064:	08 2f       	mov	r16, r24
    5066:	80 e4       	ldi	r24, 0x40	; 64
    5068:	87 b9       	out	0x07, r24	; 7
    506a:	cd eb       	ldi	r28, 0xBD	; 189
    506c:	d7 e1       	ldi	r29, 0x17	; 23
    506e:	0f 2e       	mov	r0, r31
    5070:	f8 e2       	ldi	r31, 0x28	; 40
    5072:	ef 2e       	mov	r14, r31
    5074:	f1 2c       	mov	r15, r1
    5076:	f0 2d       	mov	r31, r0
    5078:	f9 82       	std	Y+1, r15	; 0x01
    507a:	e8 82       	st	Y, r14
    507c:	86 e0       	ldi	r24, 0x06	; 6
    507e:	8a 83       	std	Y+2, r24	; 0x02
    5080:	1b 82       	std	Y+3, r1	; 0x03
    5082:	14 e0       	ldi	r17, 0x04	; 4
    5084:	1c 83       	std	Y+4, r17	; 0x04
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	09 df       	rcall	.-494    	; 0x4e9c <_turn_off>
    508a:	80 e8       	ldi	r24, 0x80	; 128
    508c:	87 b9       	out	0x07, r24	; 7
    508e:	ff 82       	std	Y+7, r15	; 0x07
    5090:	ee 82       	std	Y+6, r14	; 0x06
    5092:	87 e0       	ldi	r24, 0x07	; 7
    5094:	88 87       	std	Y+8, r24	; 0x08
    5096:	19 86       	std	Y+9, r1	; 0x09
    5098:	1a 87       	std	Y+10, r17	; 0x0a
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	ff de       	rcall	.-514    	; 0x4e9c <_turn_off>
    509e:	80 e2       	ldi	r24, 0x20	; 32
    50a0:	83 bb       	out	0x13, r24	; 19
    50a2:	84 e3       	ldi	r24, 0x34	; 52
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	9d 87       	std	Y+13, r25	; 0x0d
    50a8:	8c 87       	std	Y+12, r24	; 0x0c
    50aa:	85 e0       	ldi	r24, 0x05	; 5
    50ac:	8e 87       	std	Y+14, r24	; 0x0e
    50ae:	1f 86       	std	Y+15, r1	; 0x0f
    50b0:	18 8b       	std	Y+16, r17	; 0x10
    50b2:	82 e0       	ldi	r24, 0x02	; 2
    50b4:	f3 de       	rcall	.-538    	; 0x4e9c <_turn_off>
    50b6:	80 e1       	ldi	r24, 0x10	; 16
    50b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    50bc:	82 e0       	ldi	r24, 0x02	; 2
    50be:	91 e0       	ldi	r25, 0x01	; 1
    50c0:	9b 8b       	std	Y+19, r25	; 0x13
    50c2:	8a 8b       	std	Y+18, r24	; 0x12
    50c4:	1c 8b       	std	Y+20, r17	; 0x14
    50c6:	1d 8a       	std	Y+21, r1	; 0x15
    50c8:	1e 8b       	std	Y+22, r17	; 0x16
    50ca:	83 e0       	ldi	r24, 0x03	; 3
    50cc:	e7 de       	rcall	.-562    	; 0x4e9c <_turn_off>
    50ce:	e1 2c       	mov	r14, r1
    50d0:	f1 2c       	mov	r15, r1
    50d2:	20 e0       	ldi	r18, 0x00	; 0
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	40 ec       	ldi	r20, 0xC0	; 192
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	6a ee       	ldi	r22, 0xEA	; 234
    50dc:	77 e0       	ldi	r23, 0x07	; 7
    50de:	86 ee       	ldi	r24, 0xE6	; 230
    50e0:	97 e2       	ldi	r25, 0x27	; 39
    50e2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <xTaskCreate>
    50e6:	df 91       	pop	r29
    50e8:	cf 91       	pop	r28
    50ea:	1f 91       	pop	r17
    50ec:	0f 91       	pop	r16
    50ee:	ff 90       	pop	r15
    50f0:	ef 90       	pop	r14
    50f2:	08 95       	ret

000050f4 <status_leds_slowBlink>:
    50f4:	cf 93       	push	r28
    50f6:	df 93       	push	r29
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	fc 01       	movw	r30, r24
    50fc:	ee 0f       	add	r30, r30
    50fe:	ff 1f       	adc	r31, r31
    5100:	df 01       	movw	r26, r30
    5102:	a8 0f       	add	r26, r24
    5104:	b9 1f       	adc	r27, r25
    5106:	aa 0f       	add	r26, r26
    5108:	bb 1f       	adc	r27, r27
    510a:	a3 54       	subi	r26, 0x43	; 67
    510c:	b8 4e       	sbci	r27, 0xE8	; 232
    510e:	cd 91       	ld	r28, X+
    5110:	dc 91       	ld	r29, X
    5112:	11 97       	sbiw	r26, 0x01	; 1
    5114:	48 81       	ld	r20, Y
    5116:	21 e0       	ldi	r18, 0x01	; 1
    5118:	30 e0       	ldi	r19, 0x00	; 0
    511a:	12 96       	adiw	r26, 0x02	; 2
    511c:	0c 90       	ld	r0, X
    511e:	12 97       	sbiw	r26, 0x02	; 2
    5120:	02 c0       	rjmp	.+4      	; 0x5126 <status_leds_slowBlink+0x32>
    5122:	22 0f       	add	r18, r18
    5124:	33 1f       	adc	r19, r19
    5126:	0a 94       	dec	r0
    5128:	e2 f7       	brpl	.-8      	; 0x5122 <status_leds_slowBlink+0x2e>
    512a:	24 27       	eor	r18, r20
    512c:	28 83       	st	Y, r18
    512e:	fd 01       	movw	r30, r26
    5130:	81 e0       	ldi	r24, 0x01	; 1
    5132:	84 83       	std	Z+4, r24	; 0x04
    5134:	df 91       	pop	r29
    5136:	cf 91       	pop	r28
    5138:	08 95       	ret

0000513a <status_leds_fastBlink>:
    513a:	cf 93       	push	r28
    513c:	df 93       	push	r29
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	fc 01       	movw	r30, r24
    5142:	ee 0f       	add	r30, r30
    5144:	ff 1f       	adc	r31, r31
    5146:	df 01       	movw	r26, r30
    5148:	a8 0f       	add	r26, r24
    514a:	b9 1f       	adc	r27, r25
    514c:	aa 0f       	add	r26, r26
    514e:	bb 1f       	adc	r27, r27
    5150:	a3 54       	subi	r26, 0x43	; 67
    5152:	b8 4e       	sbci	r27, 0xE8	; 232
    5154:	cd 91       	ld	r28, X+
    5156:	dc 91       	ld	r29, X
    5158:	11 97       	sbiw	r26, 0x01	; 1
    515a:	48 81       	ld	r20, Y
    515c:	21 e0       	ldi	r18, 0x01	; 1
    515e:	30 e0       	ldi	r19, 0x00	; 0
    5160:	12 96       	adiw	r26, 0x02	; 2
    5162:	0c 90       	ld	r0, X
    5164:	12 97       	sbiw	r26, 0x02	; 2
    5166:	02 c0       	rjmp	.+4      	; 0x516c <status_leds_fastBlink+0x32>
    5168:	22 0f       	add	r18, r18
    516a:	33 1f       	adc	r19, r19
    516c:	0a 94       	dec	r0
    516e:	e2 f7       	brpl	.-8      	; 0x5168 <status_leds_fastBlink+0x2e>
    5170:	24 27       	eor	r18, r20
    5172:	28 83       	st	Y, r18
    5174:	fd 01       	movw	r30, r26
    5176:	82 e0       	ldi	r24, 0x02	; 2
    5178:	84 83       	std	Z+4, r24	; 0x04
    517a:	df 91       	pop	r29
    517c:	cf 91       	pop	r28
    517e:	08 95       	ret

00005180 <status_leds_ledOn>:
    5180:	28 2f       	mov	r18, r24
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	f9 01       	movw	r30, r18
    5186:	ee 0f       	add	r30, r30
    5188:	ff 1f       	adc	r31, r31
    518a:	e2 0f       	add	r30, r18
    518c:	f3 1f       	adc	r31, r19
    518e:	ee 0f       	add	r30, r30
    5190:	ff 1f       	adc	r31, r31
    5192:	e3 54       	subi	r30, 0x43	; 67
    5194:	f8 4e       	sbci	r31, 0xE8	; 232
    5196:	93 e0       	ldi	r25, 0x03	; 3
    5198:	94 83       	std	Z+4, r25	; 0x04
    519a:	cc ce       	rjmp	.-616    	; 0x4f34 <_turn_on>
    519c:	08 95       	ret

0000519e <status_leds_ledOff>:
    519e:	28 2f       	mov	r18, r24
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	f9 01       	movw	r30, r18
    51a4:	ee 0f       	add	r30, r30
    51a6:	ff 1f       	adc	r31, r31
    51a8:	e2 0f       	add	r30, r18
    51aa:	f3 1f       	adc	r31, r19
    51ac:	ee 0f       	add	r30, r30
    51ae:	ff 1f       	adc	r31, r31
    51b0:	e3 54       	subi	r30, 0x43	; 67
    51b2:	f8 4e       	sbci	r31, 0xE8	; 232
    51b4:	94 e0       	ldi	r25, 0x04	; 4
    51b6:	94 83       	std	Z+4, r25	; 0x04
    51b8:	71 ce       	rjmp	.-798    	; 0x4e9c <_turn_off>
    51ba:	08 95       	ret

000051bc <status_leds_longPuls>:
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	fc 01       	movw	r30, r24
    51c0:	ee 0f       	add	r30, r30
    51c2:	ff 1f       	adc	r31, r31
    51c4:	df 01       	movw	r26, r30
    51c6:	a8 0f       	add	r26, r24
    51c8:	b9 1f       	adc	r27, r25
    51ca:	aa 0f       	add	r26, r26
    51cc:	bb 1f       	adc	r27, r27
    51ce:	a3 54       	subi	r26, 0x43	; 67
    51d0:	b8 4e       	sbci	r27, 0xE8	; 232
    51d2:	26 e0       	ldi	r18, 0x06	; 6
    51d4:	15 96       	adiw	r26, 0x05	; 5
    51d6:	2c 93       	st	X, r18
    51d8:	15 97       	sbiw	r26, 0x05	; 5
    51da:	fd 01       	movw	r30, r26
    51dc:	14 82       	std	Z+4, r1	; 0x04
    51de:	08 95       	ret

000051e0 <status_leds_shortPuls>:
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	fc 01       	movw	r30, r24
    51e4:	ee 0f       	add	r30, r30
    51e6:	ff 1f       	adc	r31, r31
    51e8:	df 01       	movw	r26, r30
    51ea:	a8 0f       	add	r26, r24
    51ec:	b9 1f       	adc	r27, r25
    51ee:	aa 0f       	add	r26, r26
    51f0:	bb 1f       	adc	r27, r27
    51f2:	a3 54       	subi	r26, 0x43	; 67
    51f4:	b8 4e       	sbci	r27, 0xE8	; 232
    51f6:	15 96       	adiw	r26, 0x05	; 5
    51f8:	1c 92       	st	X, r1
    51fa:	15 97       	sbiw	r26, 0x05	; 5
    51fc:	fd 01       	movw	r30, r26
    51fe:	14 82       	std	Z+4, r1	; 0x04
    5200:	08 95       	ret

00005202 <_initTwiInterface>:
    5202:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <_twiIsInitiated>
    5206:	81 11       	cpse	r24, r1
    5208:	0c c0       	rjmp	.+24     	; 0x5222 <_initTwiInterface+0x20>
    520a:	8c e0       	ldi	r24, 0x0C	; 12
    520c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5210:	8f ef       	ldi	r24, 0xFF	; 255
    5212:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5216:	84 e0       	ldi	r24, 0x04	; 4
    5218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    521c:	81 e0       	ldi	r24, 0x01	; 1
    521e:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <_twiIsInitiated>
    5222:	08 95       	ret

00005224 <twiCreate>:
    5224:	af 92       	push	r10
    5226:	bf 92       	push	r11
    5228:	cf 92       	push	r12
    522a:	df 92       	push	r13
    522c:	ef 92       	push	r14
    522e:	ff 92       	push	r15
    5230:	0f 93       	push	r16
    5232:	1f 93       	push	r17
    5234:	cf 93       	push	r28
    5236:	df 93       	push	r29
    5238:	a8 2e       	mov	r10, r24
    523a:	b6 2e       	mov	r11, r22
    523c:	69 01       	movw	r12, r18
    523e:	7a 01       	movw	r14, r20
    5240:	84 e0       	ldi	r24, 0x04	; 4
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	3a d7       	rcall	.+3700   	; 0x60ba <malloc>
    5246:	ec 01       	movw	r28, r24
    5248:	89 2b       	or	r24, r25
    524a:	61 f1       	breq	.+88     	; 0x52a4 <twiCreate+0x80>
    524c:	a8 82       	st	Y, r10
    524e:	81 e0       	ldi	r24, 0x01	; 1
    5250:	b8 12       	cpse	r11, r24
    5252:	12 c0       	rjmp	.+36     	; 0x5278 <twiCreate+0x54>
    5254:	c7 01       	movw	r24, r14
    5256:	b6 01       	movw	r22, r12
    5258:	20 ea       	ldi	r18, 0xA0	; 160
    525a:	36 e8       	ldi	r19, 0x86	; 134
    525c:	41 e0       	ldi	r20, 0x01	; 1
    525e:	50 e0       	ldi	r21, 0x00	; 0
    5260:	02 d7       	rcall	.+3588   	; 0x6066 <__udivmodsi4>
    5262:	da 01       	movw	r26, r20
    5264:	c9 01       	movw	r24, r18
    5266:	40 97       	sbiw	r24, 0x10	; 16
    5268:	a1 09       	sbc	r26, r1
    526a:	b1 09       	sbc	r27, r1
    526c:	b6 95       	lsr	r27
    526e:	a7 95       	ror	r26
    5270:	97 95       	ror	r25
    5272:	87 95       	ror	r24
    5274:	89 83       	std	Y+1, r24	; 0x01
    5276:	11 c0       	rjmp	.+34     	; 0x529a <twiCreate+0x76>
    5278:	c7 01       	movw	r24, r14
    527a:	b6 01       	movw	r22, r12
    527c:	20 e8       	ldi	r18, 0x80	; 128
    527e:	3a e1       	ldi	r19, 0x1A	; 26
    5280:	46 e0       	ldi	r20, 0x06	; 6
    5282:	50 e0       	ldi	r21, 0x00	; 0
    5284:	f0 d6       	rcall	.+3552   	; 0x6066 <__udivmodsi4>
    5286:	da 01       	movw	r26, r20
    5288:	c9 01       	movw	r24, r18
    528a:	40 97       	sbiw	r24, 0x10	; 16
    528c:	a1 09       	sbc	r26, r1
    528e:	b1 09       	sbc	r27, r1
    5290:	b6 95       	lsr	r27
    5292:	a7 95       	ror	r26
    5294:	97 95       	ror	r25
    5296:	87 95       	ror	r24
    5298:	89 83       	std	Y+1, r24	; 0x01
    529a:	1b 83       	std	Y+3, r17	; 0x03
    529c:	0a 83       	std	Y+2, r16	; 0x02
    529e:	8c 2f       	mov	r24, r28
    52a0:	9d 2f       	mov	r25, r29
    52a2:	02 c0       	rjmp	.+4      	; 0x52a8 <twiCreate+0x84>
    52a4:	80 e0       	ldi	r24, 0x00	; 0
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	df 91       	pop	r29
    52aa:	cf 91       	pop	r28
    52ac:	1f 91       	pop	r17
    52ae:	0f 91       	pop	r16
    52b0:	ff 90       	pop	r15
    52b2:	ef 90       	pop	r14
    52b4:	df 90       	pop	r13
    52b6:	cf 90       	pop	r12
    52b8:	bf 90       	pop	r11
    52ba:	af 90       	pop	r10
    52bc:	08 95       	ret

000052be <twiIsBusy>:
    52be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52c2:	81 70       	andi	r24, 0x01	; 1
    52c4:	08 95       	ret

000052c6 <twiTransmit>:
    52c6:	ff 92       	push	r15
    52c8:	0f 93       	push	r16
    52ca:	1f 93       	push	r17
    52cc:	cf 93       	push	r28
    52ce:	df 93       	push	r29
    52d0:	00 97       	sbiw	r24, 0x00	; 0
    52d2:	d1 f1       	breq	.+116    	; 0x5348 <twiTransmit+0x82>
    52d4:	4a 30       	cpi	r20, 0x0A	; 10
    52d6:	d0 f5       	brcc	.+116    	; 0x534c <twiTransmit+0x86>
    52d8:	f4 2e       	mov	r15, r20
    52da:	8b 01       	movw	r16, r22
    52dc:	ec 01       	movw	r28, r24
    52de:	ef df       	rcall	.-34     	; 0x52be <twiIsBusy>
    52e0:	81 11       	cpse	r24, r1
    52e2:	36 c0       	rjmp	.+108    	; 0x5350 <twiTransmit+0x8a>
    52e4:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <_twiCurrentHandler>
    52e8:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <_twiCurrentHandler+0x1>
    52ec:	c8 17       	cp	r28, r24
    52ee:	d9 07       	cpc	r29, r25
    52f0:	41 f0       	breq	.+16     	; 0x5302 <twiTransmit+0x3c>
    52f2:	87 df       	rcall	.-242    	; 0x5202 <_initTwiInterface>
    52f4:	89 81       	ldd	r24, Y+1	; 0x01
    52f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    52fa:	d0 93 d7 17 	sts	0x17D7, r29	; 0x8017d7 <_twiCurrentHandler+0x1>
    52fe:	c0 93 d6 17 	sts	0x17D6, r28	; 0x8017d6 <_twiCurrentHandler>
    5302:	81 e0       	ldi	r24, 0x01	; 1
    5304:	8f 0d       	add	r24, r15
    5306:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <_twiMessageLen>
    530a:	88 81       	ld	r24, Y
    530c:	88 0f       	add	r24, r24
    530e:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <_twiMessageBuffer>
    5312:	ff 20       	and	r15, r15
    5314:	89 f0       	breq	.+34     	; 0x5338 <twiTransmit+0x72>
    5316:	f8 01       	movw	r30, r16
    5318:	aa ed       	ldi	r26, 0xDA	; 218
    531a:	b7 e1       	ldi	r27, 0x17	; 23
    531c:	4f ef       	ldi	r20, 0xFF	; 255
    531e:	4f 0d       	add	r20, r15
    5320:	64 2f       	mov	r22, r20
    5322:	70 e0       	ldi	r23, 0x00	; 0
    5324:	cb 01       	movw	r24, r22
    5326:	01 96       	adiw	r24, 0x01	; 1
    5328:	b8 01       	movw	r22, r16
    532a:	68 0f       	add	r22, r24
    532c:	79 1f       	adc	r23, r25
    532e:	81 91       	ld	r24, Z+
    5330:	8d 93       	st	X+, r24
    5332:	e6 17       	cp	r30, r22
    5334:	f7 07       	cpc	r31, r23
    5336:	d9 f7       	brne	.-10     	; 0x532e <twiTransmit+0x68>
    5338:	88 ef       	ldi	r24, 0xF8	; 248
    533a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    533e:	85 ea       	ldi	r24, 0xA5	; 165
    5340:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5344:	84 e0       	ldi	r24, 0x04	; 4
    5346:	05 c0       	rjmp	.+10     	; 0x5352 <twiTransmit+0x8c>
    5348:	86 e0       	ldi	r24, 0x06	; 6
    534a:	03 c0       	rjmp	.+6      	; 0x5352 <twiTransmit+0x8c>
    534c:	87 e0       	ldi	r24, 0x07	; 7
    534e:	01 c0       	rjmp	.+2      	; 0x5352 <twiTransmit+0x8c>
    5350:	82 e0       	ldi	r24, 0x02	; 2
    5352:	df 91       	pop	r29
    5354:	cf 91       	pop	r28
    5356:	1f 91       	pop	r17
    5358:	0f 91       	pop	r16
    535a:	ff 90       	pop	r15
    535c:	08 95       	ret

0000535e <twiReceive>:
    535e:	1f 93       	push	r17
    5360:	cf 93       	push	r28
    5362:	df 93       	push	r29
    5364:	00 97       	sbiw	r24, 0x00	; 0
    5366:	29 f1       	breq	.+74     	; 0x53b2 <twiReceive+0x54>
    5368:	6b 30       	cpi	r22, 0x0B	; 11
    536a:	28 f5       	brcc	.+74     	; 0x53b6 <twiReceive+0x58>
    536c:	16 2f       	mov	r17, r22
    536e:	ec 01       	movw	r28, r24
    5370:	a6 df       	rcall	.-180    	; 0x52be <twiIsBusy>
    5372:	81 11       	cpse	r24, r1
    5374:	22 c0       	rjmp	.+68     	; 0x53ba <twiReceive+0x5c>
    5376:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <_twiCurrentHandler>
    537a:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <_twiCurrentHandler+0x1>
    537e:	c8 17       	cp	r28, r24
    5380:	d9 07       	cpc	r29, r25
    5382:	41 f0       	breq	.+16     	; 0x5394 <twiReceive+0x36>
    5384:	3e df       	rcall	.-388    	; 0x5202 <_initTwiInterface>
    5386:	89 81       	ldd	r24, Y+1	; 0x01
    5388:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    538c:	d0 93 d7 17 	sts	0x17D7, r29	; 0x8017d7 <_twiCurrentHandler+0x1>
    5390:	c0 93 d6 17 	sts	0x17D6, r28	; 0x8017d6 <_twiCurrentHandler>
    5394:	10 93 d8 17 	sts	0x17D8, r17	; 0x8017d8 <_twiMessageLen>
    5398:	88 81       	ld	r24, Y
    539a:	88 0f       	add	r24, r24
    539c:	81 60       	ori	r24, 0x01	; 1
    539e:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <_twiMessageBuffer>
    53a2:	88 ef       	ldi	r24, 0xF8	; 248
    53a4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    53a8:	85 ea       	ldi	r24, 0xA5	; 165
    53aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53ae:	85 e0       	ldi	r24, 0x05	; 5
    53b0:	05 c0       	rjmp	.+10     	; 0x53bc <twiReceive+0x5e>
    53b2:	86 e0       	ldi	r24, 0x06	; 6
    53b4:	03 c0       	rjmp	.+6      	; 0x53bc <twiReceive+0x5e>
    53b6:	87 e0       	ldi	r24, 0x07	; 7
    53b8:	01 c0       	rjmp	.+2      	; 0x53bc <twiReceive+0x5e>
    53ba:	82 e0       	ldi	r24, 0x02	; 2
    53bc:	df 91       	pop	r29
    53be:	cf 91       	pop	r28
    53c0:	1f 91       	pop	r17
    53c2:	08 95       	ret

000053c4 <__vector_39>:
    53c4:	1f 92       	push	r1
    53c6:	0f 92       	push	r0
    53c8:	0f b6       	in	r0, 0x3f	; 63
    53ca:	0f 92       	push	r0
    53cc:	11 24       	eor	r1, r1
    53ce:	0b b6       	in	r0, 0x3b	; 59
    53d0:	0f 92       	push	r0
    53d2:	2f 93       	push	r18
    53d4:	3f 93       	push	r19
    53d6:	4f 93       	push	r20
    53d8:	5f 93       	push	r21
    53da:	6f 93       	push	r22
    53dc:	7f 93       	push	r23
    53de:	8f 93       	push	r24
    53e0:	9f 93       	push	r25
    53e2:	af 93       	push	r26
    53e4:	bf 93       	push	r27
    53e6:	ef 93       	push	r30
    53e8:	ff 93       	push	r31
    53ea:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    53ee:	8e 2f       	mov	r24, r30
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	fc 01       	movw	r30, r24
    53f4:	38 97       	sbiw	r30, 0x08	; 8
    53f6:	e1 35       	cpi	r30, 0x51	; 81
    53f8:	f1 05       	cpc	r31, r1
    53fa:	08 f0       	brcs	.+2      	; 0x53fe <__vector_39+0x3a>
    53fc:	75 c0       	rjmp	.+234    	; 0x54e8 <__vector_39+0x124>
    53fe:	88 27       	eor	r24, r24
    5400:	e4 58       	subi	r30, 0x84	; 132
    5402:	ff 4f       	sbci	r31, 0xFF	; 255
    5404:	8f 4f       	sbci	r24, 0xFF	; 255
    5406:	51 c6       	rjmp	.+3234   	; 0x60aa <__tablejump2__>
    5408:	10 92 d5 17 	sts	0x17D5, r1	; 0x8017d5 <_index.1885>
    540c:	e0 91 d5 17 	lds	r30, 0x17D5	; 0x8017d5 <_index.1885>
    5410:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <_twiMessageLen>
    5414:	e8 17       	cp	r30, r24
    5416:	70 f4       	brcc	.+28     	; 0x5434 <__vector_39+0x70>
    5418:	81 e0       	ldi	r24, 0x01	; 1
    541a:	8e 0f       	add	r24, r30
    541c:	80 93 d5 17 	sts	0x17D5, r24	; 0x8017d5 <_index.1885>
    5420:	f0 e0       	ldi	r31, 0x00	; 0
    5422:	e7 52       	subi	r30, 0x27	; 39
    5424:	f8 4e       	sbci	r31, 0xE8	; 232
    5426:	80 81       	ld	r24, Z
    5428:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    542c:	85 e8       	ldi	r24, 0x85	; 133
    542e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5432:	72 c0       	rjmp	.+228    	; 0x5518 <__vector_39+0x154>
    5434:	84 e9       	ldi	r24, 0x94	; 148
    5436:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    543a:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <_twiCurrentHandler>
    543e:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <_twiCurrentHandler+0x1>
    5442:	dc 01       	movw	r26, r24
    5444:	12 96       	adiw	r26, 0x02	; 2
    5446:	ed 91       	ld	r30, X+
    5448:	fc 91       	ld	r31, X
    544a:	13 97       	sbiw	r26, 0x03	; 3
    544c:	30 97       	sbiw	r30, 0x00	; 0
    544e:	09 f4       	brne	.+2      	; 0x5452 <__vector_39+0x8e>
    5450:	63 c0       	rjmp	.+198    	; 0x5518 <__vector_39+0x154>
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	40 e0       	ldi	r20, 0x00	; 0
    5456:	50 e0       	ldi	r21, 0x00	; 0
    5458:	64 e0       	ldi	r22, 0x04	; 4
    545a:	19 95       	eicall
    545c:	5d c0       	rjmp	.+186    	; 0x5518 <__vector_39+0x154>
    545e:	e0 91 d5 17 	lds	r30, 0x17D5	; 0x8017d5 <_index.1885>
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	8e 0f       	add	r24, r30
    5466:	80 93 d5 17 	sts	0x17D5, r24	; 0x8017d5 <_index.1885>
    546a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    546e:	f0 e0       	ldi	r31, 0x00	; 0
    5470:	e7 52       	subi	r30, 0x27	; 39
    5472:	f8 4e       	sbci	r31, 0xE8	; 232
    5474:	80 83       	st	Z, r24
    5476:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    547a:	80 34       	cpi	r24, 0x40	; 64
    547c:	11 f4       	brne	.+4      	; 0x5482 <__vector_39+0xbe>
    547e:	10 92 d5 17 	sts	0x17D5, r1	; 0x8017d5 <_index.1885>
    5482:	20 91 d5 17 	lds	r18, 0x17D5	; 0x8017d5 <_index.1885>
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <_twiMessageLen>
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	01 97       	sbiw	r24, 0x01	; 1
    5490:	28 17       	cp	r18, r24
    5492:	39 07       	cpc	r19, r25
    5494:	24 f4       	brge	.+8      	; 0x549e <__vector_39+0xda>
    5496:	85 ec       	ldi	r24, 0xC5	; 197
    5498:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    549c:	3d c0       	rjmp	.+122    	; 0x5518 <__vector_39+0x154>
    549e:	85 e8       	ldi	r24, 0x85	; 133
    54a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54a4:	39 c0       	rjmp	.+114    	; 0x5518 <__vector_39+0x154>
    54a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54aa:	e0 91 d5 17 	lds	r30, 0x17D5	; 0x8017d5 <_index.1885>
    54ae:	f0 e0       	ldi	r31, 0x00	; 0
    54b0:	e7 52       	subi	r30, 0x27	; 39
    54b2:	f8 4e       	sbci	r31, 0xE8	; 232
    54b4:	80 83       	st	Z, r24
    54b6:	84 e9       	ldi	r24, 0x94	; 148
    54b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54bc:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <_twiCurrentHandler>
    54c0:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <_twiCurrentHandler+0x1>
    54c4:	dc 01       	movw	r26, r24
    54c6:	12 96       	adiw	r26, 0x02	; 2
    54c8:	ed 91       	ld	r30, X+
    54ca:	fc 91       	ld	r31, X
    54cc:	13 97       	sbiw	r26, 0x03	; 3
    54ce:	30 97       	sbiw	r30, 0x00	; 0
    54d0:	19 f1       	breq	.+70     	; 0x5518 <__vector_39+0x154>
    54d2:	20 91 d8 17 	lds	r18, 0x17D8	; 0x8017d8 <_twiMessageLen>
    54d6:	49 ed       	ldi	r20, 0xD9	; 217
    54d8:	57 e1       	ldi	r21, 0x17	; 23
    54da:	65 e0       	ldi	r22, 0x05	; 5
    54dc:	19 95       	eicall
    54de:	1c c0       	rjmp	.+56     	; 0x5518 <__vector_39+0x154>
    54e0:	85 ea       	ldi	r24, 0xA5	; 165
    54e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54e6:	18 c0       	rjmp	.+48     	; 0x5518 <__vector_39+0x154>
    54e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    54ec:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    54f0:	84 e0       	ldi	r24, 0x04	; 4
    54f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54f6:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <_twiCurrentHandler>
    54fa:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <_twiCurrentHandler+0x1>
    54fe:	dc 01       	movw	r26, r24
    5500:	12 96       	adiw	r26, 0x02	; 2
    5502:	ed 91       	ld	r30, X+
    5504:	fc 91       	ld	r31, X
    5506:	13 97       	sbiw	r26, 0x03	; 3
    5508:	30 97       	sbiw	r30, 0x00	; 0
    550a:	31 f0       	breq	.+12     	; 0x5518 <__vector_39+0x154>
    550c:	20 e0       	ldi	r18, 0x00	; 0
    550e:	40 e0       	ldi	r20, 0x00	; 0
    5510:	50 e0       	ldi	r21, 0x00	; 0
    5512:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5516:	19 95       	eicall
    5518:	ff 91       	pop	r31
    551a:	ef 91       	pop	r30
    551c:	bf 91       	pop	r27
    551e:	af 91       	pop	r26
    5520:	9f 91       	pop	r25
    5522:	8f 91       	pop	r24
    5524:	7f 91       	pop	r23
    5526:	6f 91       	pop	r22
    5528:	5f 91       	pop	r21
    552a:	4f 91       	pop	r20
    552c:	3f 91       	pop	r19
    552e:	2f 91       	pop	r18
    5530:	0f 90       	pop	r0
    5532:	0b be       	out	0x3b, r0	; 59
    5534:	0f 90       	pop	r0
    5536:	0f be       	out	0x3f, r0	; 63
    5538:	0f 90       	pop	r0
    553a:	1f 90       	pop	r1
    553c:	18 95       	reti

0000553e <fifo_init>:
    553e:	fc 01       	movw	r30, r24
    5540:	41 11       	cpse	r20, r1
    5542:	01 c0       	rjmp	.+2      	; 0x5546 <fifo_init+0x8>
    5544:	db d6       	rcall	.+3510   	; 0x62fc <abort>
    5546:	84 2f       	mov	r24, r20
    5548:	90 e0       	ldi	r25, 0x00	; 0
    554a:	9c 01       	movw	r18, r24
    554c:	21 50       	subi	r18, 0x01	; 1
    554e:	31 09       	sbc	r19, r1
    5550:	82 23       	and	r24, r18
    5552:	93 23       	and	r25, r19
    5554:	89 2b       	or	r24, r25
    5556:	09 f0       	breq	.+2      	; 0x555a <fifo_init+0x1c>
    5558:	d1 d6       	rcall	.+3490   	; 0x62fc <abort>
    555a:	41 38       	cpi	r20, 0x81	; 129
    555c:	08 f0       	brcs	.+2      	; 0x5560 <fifo_init+0x22>
    555e:	ce d6       	rcall	.+3484   	; 0x62fc <abort>
    5560:	12 82       	std	Z+2, r1	; 0x02
    5562:	13 82       	std	Z+3, r1	; 0x03
    5564:	44 83       	std	Z+4, r20	; 0x04
    5566:	44 0f       	add	r20, r20
    5568:	41 50       	subi	r20, 0x01	; 1
    556a:	45 83       	std	Z+5, r20	; 0x05
    556c:	71 83       	std	Z+1, r23	; 0x01
    556e:	60 83       	st	Z, r22
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	08 95       	ret

00005576 <vfprintf>:
    5576:	2f 92       	push	r2
    5578:	3f 92       	push	r3
    557a:	4f 92       	push	r4
    557c:	5f 92       	push	r5
    557e:	6f 92       	push	r6
    5580:	7f 92       	push	r7
    5582:	8f 92       	push	r8
    5584:	9f 92       	push	r9
    5586:	af 92       	push	r10
    5588:	bf 92       	push	r11
    558a:	cf 92       	push	r12
    558c:	df 92       	push	r13
    558e:	ef 92       	push	r14
    5590:	ff 92       	push	r15
    5592:	0f 93       	push	r16
    5594:	1f 93       	push	r17
    5596:	cf 93       	push	r28
    5598:	df 93       	push	r29
    559a:	cd b7       	in	r28, 0x3d	; 61
    559c:	de b7       	in	r29, 0x3e	; 62
    559e:	60 97       	sbiw	r28, 0x10	; 16
    55a0:	0f b6       	in	r0, 0x3f	; 63
    55a2:	f8 94       	cli
    55a4:	de bf       	out	0x3e, r29	; 62
    55a6:	0f be       	out	0x3f, r0	; 63
    55a8:	cd bf       	out	0x3d, r28	; 61
    55aa:	7c 01       	movw	r14, r24
    55ac:	1b 01       	movw	r2, r22
    55ae:	6a 01       	movw	r12, r20
    55b0:	fc 01       	movw	r30, r24
    55b2:	17 82       	std	Z+7, r1	; 0x07
    55b4:	16 82       	std	Z+6, r1	; 0x06
    55b6:	83 81       	ldd	r24, Z+3	; 0x03
    55b8:	81 ff       	sbrs	r24, 1
    55ba:	2a c3       	rjmp	.+1620   	; 0x5c10 <vfprintf+0x69a>
    55bc:	9e 01       	movw	r18, r28
    55be:	2f 5f       	subi	r18, 0xFF	; 255
    55c0:	3f 4f       	sbci	r19, 0xFF	; 255
    55c2:	39 01       	movw	r6, r18
    55c4:	f7 01       	movw	r30, r14
    55c6:	93 81       	ldd	r25, Z+3	; 0x03
    55c8:	f1 01       	movw	r30, r2
    55ca:	93 fd       	sbrc	r25, 3
    55cc:	85 91       	lpm	r24, Z+
    55ce:	93 ff       	sbrs	r25, 3
    55d0:	81 91       	ld	r24, Z+
    55d2:	1f 01       	movw	r2, r30
    55d4:	88 23       	and	r24, r24
    55d6:	09 f4       	brne	.+2      	; 0x55da <vfprintf+0x64>
    55d8:	17 c3       	rjmp	.+1582   	; 0x5c08 <vfprintf+0x692>
    55da:	85 32       	cpi	r24, 0x25	; 37
    55dc:	39 f4       	brne	.+14     	; 0x55ec <vfprintf+0x76>
    55de:	93 fd       	sbrc	r25, 3
    55e0:	85 91       	lpm	r24, Z+
    55e2:	93 ff       	sbrs	r25, 3
    55e4:	81 91       	ld	r24, Z+
    55e6:	1f 01       	movw	r2, r30
    55e8:	85 32       	cpi	r24, 0x25	; 37
    55ea:	31 f4       	brne	.+12     	; 0x55f8 <vfprintf+0x82>
    55ec:	b7 01       	movw	r22, r14
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	d6 d7       	rcall	.+4012   	; 0x659e <fputc>
    55f2:	56 01       	movw	r10, r12
    55f4:	65 01       	movw	r12, r10
    55f6:	e6 cf       	rjmp	.-52     	; 0x55c4 <vfprintf+0x4e>
    55f8:	10 e0       	ldi	r17, 0x00	; 0
    55fa:	51 2c       	mov	r5, r1
    55fc:	91 2c       	mov	r9, r1
    55fe:	ff e1       	ldi	r31, 0x1F	; 31
    5600:	f9 15       	cp	r31, r9
    5602:	d8 f0       	brcs	.+54     	; 0x563a <vfprintf+0xc4>
    5604:	8b 32       	cpi	r24, 0x2B	; 43
    5606:	79 f0       	breq	.+30     	; 0x5626 <vfprintf+0xb0>
    5608:	38 f4       	brcc	.+14     	; 0x5618 <vfprintf+0xa2>
    560a:	80 32       	cpi	r24, 0x20	; 32
    560c:	79 f0       	breq	.+30     	; 0x562c <vfprintf+0xb6>
    560e:	83 32       	cpi	r24, 0x23	; 35
    5610:	a1 f4       	brne	.+40     	; 0x563a <vfprintf+0xc4>
    5612:	f9 2d       	mov	r31, r9
    5614:	f0 61       	ori	r31, 0x10	; 16
    5616:	2e c0       	rjmp	.+92     	; 0x5674 <vfprintf+0xfe>
    5618:	8d 32       	cpi	r24, 0x2D	; 45
    561a:	61 f0       	breq	.+24     	; 0x5634 <vfprintf+0xbe>
    561c:	80 33       	cpi	r24, 0x30	; 48
    561e:	69 f4       	brne	.+26     	; 0x563a <vfprintf+0xc4>
    5620:	29 2d       	mov	r18, r9
    5622:	21 60       	ori	r18, 0x01	; 1
    5624:	2d c0       	rjmp	.+90     	; 0x5680 <vfprintf+0x10a>
    5626:	39 2d       	mov	r19, r9
    5628:	32 60       	ori	r19, 0x02	; 2
    562a:	93 2e       	mov	r9, r19
    562c:	89 2d       	mov	r24, r9
    562e:	84 60       	ori	r24, 0x04	; 4
    5630:	98 2e       	mov	r9, r24
    5632:	2a c0       	rjmp	.+84     	; 0x5688 <vfprintf+0x112>
    5634:	e9 2d       	mov	r30, r9
    5636:	e8 60       	ori	r30, 0x08	; 8
    5638:	15 c0       	rjmp	.+42     	; 0x5664 <vfprintf+0xee>
    563a:	97 fc       	sbrc	r9, 7
    563c:	2d c0       	rjmp	.+90     	; 0x5698 <vfprintf+0x122>
    563e:	20 ed       	ldi	r18, 0xD0	; 208
    5640:	28 0f       	add	r18, r24
    5642:	2a 30       	cpi	r18, 0x0A	; 10
    5644:	88 f4       	brcc	.+34     	; 0x5668 <vfprintf+0xf2>
    5646:	96 fe       	sbrs	r9, 6
    5648:	06 c0       	rjmp	.+12     	; 0x5656 <vfprintf+0xe0>
    564a:	3a e0       	ldi	r19, 0x0A	; 10
    564c:	13 9f       	mul	r17, r19
    564e:	20 0d       	add	r18, r0
    5650:	11 24       	eor	r1, r1
    5652:	12 2f       	mov	r17, r18
    5654:	19 c0       	rjmp	.+50     	; 0x5688 <vfprintf+0x112>
    5656:	8a e0       	ldi	r24, 0x0A	; 10
    5658:	58 9e       	mul	r5, r24
    565a:	20 0d       	add	r18, r0
    565c:	11 24       	eor	r1, r1
    565e:	52 2e       	mov	r5, r18
    5660:	e9 2d       	mov	r30, r9
    5662:	e0 62       	ori	r30, 0x20	; 32
    5664:	9e 2e       	mov	r9, r30
    5666:	10 c0       	rjmp	.+32     	; 0x5688 <vfprintf+0x112>
    5668:	8e 32       	cpi	r24, 0x2E	; 46
    566a:	31 f4       	brne	.+12     	; 0x5678 <vfprintf+0x102>
    566c:	96 fc       	sbrc	r9, 6
    566e:	cc c2       	rjmp	.+1432   	; 0x5c08 <vfprintf+0x692>
    5670:	f9 2d       	mov	r31, r9
    5672:	f0 64       	ori	r31, 0x40	; 64
    5674:	9f 2e       	mov	r9, r31
    5676:	08 c0       	rjmp	.+16     	; 0x5688 <vfprintf+0x112>
    5678:	8c 36       	cpi	r24, 0x6C	; 108
    567a:	21 f4       	brne	.+8      	; 0x5684 <vfprintf+0x10e>
    567c:	29 2d       	mov	r18, r9
    567e:	20 68       	ori	r18, 0x80	; 128
    5680:	92 2e       	mov	r9, r18
    5682:	02 c0       	rjmp	.+4      	; 0x5688 <vfprintf+0x112>
    5684:	88 36       	cpi	r24, 0x68	; 104
    5686:	41 f4       	brne	.+16     	; 0x5698 <vfprintf+0x122>
    5688:	f1 01       	movw	r30, r2
    568a:	93 fd       	sbrc	r25, 3
    568c:	85 91       	lpm	r24, Z+
    568e:	93 ff       	sbrs	r25, 3
    5690:	81 91       	ld	r24, Z+
    5692:	1f 01       	movw	r2, r30
    5694:	81 11       	cpse	r24, r1
    5696:	b3 cf       	rjmp	.-154    	; 0x55fe <vfprintf+0x88>
    5698:	9b eb       	ldi	r25, 0xBB	; 187
    569a:	98 0f       	add	r25, r24
    569c:	93 30       	cpi	r25, 0x03	; 3
    569e:	20 f4       	brcc	.+8      	; 0x56a8 <vfprintf+0x132>
    56a0:	99 2d       	mov	r25, r9
    56a2:	90 61       	ori	r25, 0x10	; 16
    56a4:	80 5e       	subi	r24, 0xE0	; 224
    56a6:	07 c0       	rjmp	.+14     	; 0x56b6 <vfprintf+0x140>
    56a8:	9b e9       	ldi	r25, 0x9B	; 155
    56aa:	98 0f       	add	r25, r24
    56ac:	93 30       	cpi	r25, 0x03	; 3
    56ae:	08 f0       	brcs	.+2      	; 0x56b2 <vfprintf+0x13c>
    56b0:	59 c1       	rjmp	.+690    	; 0x5964 <vfprintf+0x3ee>
    56b2:	99 2d       	mov	r25, r9
    56b4:	9f 7e       	andi	r25, 0xEF	; 239
    56b6:	96 ff       	sbrs	r25, 6
    56b8:	16 e0       	ldi	r17, 0x06	; 6
    56ba:	9f 73       	andi	r25, 0x3F	; 63
    56bc:	99 2e       	mov	r9, r25
    56be:	85 36       	cpi	r24, 0x65	; 101
    56c0:	19 f4       	brne	.+6      	; 0x56c8 <vfprintf+0x152>
    56c2:	90 64       	ori	r25, 0x40	; 64
    56c4:	99 2e       	mov	r9, r25
    56c6:	08 c0       	rjmp	.+16     	; 0x56d8 <vfprintf+0x162>
    56c8:	86 36       	cpi	r24, 0x66	; 102
    56ca:	21 f4       	brne	.+8      	; 0x56d4 <vfprintf+0x15e>
    56cc:	39 2f       	mov	r19, r25
    56ce:	30 68       	ori	r19, 0x80	; 128
    56d0:	93 2e       	mov	r9, r19
    56d2:	02 c0       	rjmp	.+4      	; 0x56d8 <vfprintf+0x162>
    56d4:	11 11       	cpse	r17, r1
    56d6:	11 50       	subi	r17, 0x01	; 1
    56d8:	97 fe       	sbrs	r9, 7
    56da:	07 c0       	rjmp	.+14     	; 0x56ea <vfprintf+0x174>
    56dc:	1c 33       	cpi	r17, 0x3C	; 60
    56de:	50 f4       	brcc	.+20     	; 0x56f4 <vfprintf+0x17e>
    56e0:	44 24       	eor	r4, r4
    56e2:	43 94       	inc	r4
    56e4:	41 0e       	add	r4, r17
    56e6:	27 e0       	ldi	r18, 0x07	; 7
    56e8:	0b c0       	rjmp	.+22     	; 0x5700 <vfprintf+0x18a>
    56ea:	18 30       	cpi	r17, 0x08	; 8
    56ec:	38 f0       	brcs	.+14     	; 0x56fc <vfprintf+0x186>
    56ee:	27 e0       	ldi	r18, 0x07	; 7
    56f0:	17 e0       	ldi	r17, 0x07	; 7
    56f2:	05 c0       	rjmp	.+10     	; 0x56fe <vfprintf+0x188>
    56f4:	27 e0       	ldi	r18, 0x07	; 7
    56f6:	9c e3       	ldi	r25, 0x3C	; 60
    56f8:	49 2e       	mov	r4, r25
    56fa:	02 c0       	rjmp	.+4      	; 0x5700 <vfprintf+0x18a>
    56fc:	21 2f       	mov	r18, r17
    56fe:	41 2c       	mov	r4, r1
    5700:	56 01       	movw	r10, r12
    5702:	84 e0       	ldi	r24, 0x04	; 4
    5704:	a8 0e       	add	r10, r24
    5706:	b1 1c       	adc	r11, r1
    5708:	f6 01       	movw	r30, r12
    570a:	60 81       	ld	r22, Z
    570c:	71 81       	ldd	r23, Z+1	; 0x01
    570e:	82 81       	ldd	r24, Z+2	; 0x02
    5710:	93 81       	ldd	r25, Z+3	; 0x03
    5712:	04 2d       	mov	r16, r4
    5714:	a3 01       	movw	r20, r6
    5716:	f6 d5       	rcall	.+3052   	; 0x6304 <__ftoa_engine>
    5718:	6c 01       	movw	r12, r24
    571a:	f9 81       	ldd	r31, Y+1	; 0x01
    571c:	fc 87       	std	Y+12, r31	; 0x0c
    571e:	f0 ff       	sbrs	r31, 0
    5720:	02 c0       	rjmp	.+4      	; 0x5726 <vfprintf+0x1b0>
    5722:	f3 ff       	sbrs	r31, 3
    5724:	06 c0       	rjmp	.+12     	; 0x5732 <vfprintf+0x1bc>
    5726:	91 fc       	sbrc	r9, 1
    5728:	06 c0       	rjmp	.+12     	; 0x5736 <vfprintf+0x1c0>
    572a:	92 fe       	sbrs	r9, 2
    572c:	06 c0       	rjmp	.+12     	; 0x573a <vfprintf+0x1c4>
    572e:	00 e2       	ldi	r16, 0x20	; 32
    5730:	05 c0       	rjmp	.+10     	; 0x573c <vfprintf+0x1c6>
    5732:	0d e2       	ldi	r16, 0x2D	; 45
    5734:	03 c0       	rjmp	.+6      	; 0x573c <vfprintf+0x1c6>
    5736:	0b e2       	ldi	r16, 0x2B	; 43
    5738:	01 c0       	rjmp	.+2      	; 0x573c <vfprintf+0x1c6>
    573a:	00 e0       	ldi	r16, 0x00	; 0
    573c:	8c 85       	ldd	r24, Y+12	; 0x0c
    573e:	8c 70       	andi	r24, 0x0C	; 12
    5740:	19 f0       	breq	.+6      	; 0x5748 <vfprintf+0x1d2>
    5742:	01 11       	cpse	r16, r1
    5744:	43 c2       	rjmp	.+1158   	; 0x5bcc <vfprintf+0x656>
    5746:	80 c2       	rjmp	.+1280   	; 0x5c48 <vfprintf+0x6d2>
    5748:	97 fe       	sbrs	r9, 7
    574a:	10 c0       	rjmp	.+32     	; 0x576c <vfprintf+0x1f6>
    574c:	4c 0c       	add	r4, r12
    574e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5750:	f4 ff       	sbrs	r31, 4
    5752:	04 c0       	rjmp	.+8      	; 0x575c <vfprintf+0x1e6>
    5754:	8a 81       	ldd	r24, Y+2	; 0x02
    5756:	81 33       	cpi	r24, 0x31	; 49
    5758:	09 f4       	brne	.+2      	; 0x575c <vfprintf+0x1e6>
    575a:	4a 94       	dec	r4
    575c:	14 14       	cp	r1, r4
    575e:	74 f5       	brge	.+92     	; 0x57bc <vfprintf+0x246>
    5760:	28 e0       	ldi	r18, 0x08	; 8
    5762:	24 15       	cp	r18, r4
    5764:	78 f5       	brcc	.+94     	; 0x57c4 <vfprintf+0x24e>
    5766:	88 e0       	ldi	r24, 0x08	; 8
    5768:	48 2e       	mov	r4, r24
    576a:	2c c0       	rjmp	.+88     	; 0x57c4 <vfprintf+0x24e>
    576c:	96 fc       	sbrc	r9, 6
    576e:	2a c0       	rjmp	.+84     	; 0x57c4 <vfprintf+0x24e>
    5770:	81 2f       	mov	r24, r17
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	8c 15       	cp	r24, r12
    5776:	9d 05       	cpc	r25, r13
    5778:	9c f0       	brlt	.+38     	; 0x57a0 <vfprintf+0x22a>
    577a:	3c ef       	ldi	r19, 0xFC	; 252
    577c:	c3 16       	cp	r12, r19
    577e:	3f ef       	ldi	r19, 0xFF	; 255
    5780:	d3 06       	cpc	r13, r19
    5782:	74 f0       	brlt	.+28     	; 0x57a0 <vfprintf+0x22a>
    5784:	89 2d       	mov	r24, r9
    5786:	80 68       	ori	r24, 0x80	; 128
    5788:	98 2e       	mov	r9, r24
    578a:	0a c0       	rjmp	.+20     	; 0x57a0 <vfprintf+0x22a>
    578c:	e2 e0       	ldi	r30, 0x02	; 2
    578e:	f0 e0       	ldi	r31, 0x00	; 0
    5790:	ec 0f       	add	r30, r28
    5792:	fd 1f       	adc	r31, r29
    5794:	e1 0f       	add	r30, r17
    5796:	f1 1d       	adc	r31, r1
    5798:	80 81       	ld	r24, Z
    579a:	80 33       	cpi	r24, 0x30	; 48
    579c:	19 f4       	brne	.+6      	; 0x57a4 <vfprintf+0x22e>
    579e:	11 50       	subi	r17, 0x01	; 1
    57a0:	11 11       	cpse	r17, r1
    57a2:	f4 cf       	rjmp	.-24     	; 0x578c <vfprintf+0x216>
    57a4:	97 fe       	sbrs	r9, 7
    57a6:	0e c0       	rjmp	.+28     	; 0x57c4 <vfprintf+0x24e>
    57a8:	44 24       	eor	r4, r4
    57aa:	43 94       	inc	r4
    57ac:	41 0e       	add	r4, r17
    57ae:	81 2f       	mov	r24, r17
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	c8 16       	cp	r12, r24
    57b4:	d9 06       	cpc	r13, r25
    57b6:	2c f4       	brge	.+10     	; 0x57c2 <vfprintf+0x24c>
    57b8:	1c 19       	sub	r17, r12
    57ba:	04 c0       	rjmp	.+8      	; 0x57c4 <vfprintf+0x24e>
    57bc:	44 24       	eor	r4, r4
    57be:	43 94       	inc	r4
    57c0:	01 c0       	rjmp	.+2      	; 0x57c4 <vfprintf+0x24e>
    57c2:	10 e0       	ldi	r17, 0x00	; 0
    57c4:	97 fe       	sbrs	r9, 7
    57c6:	06 c0       	rjmp	.+12     	; 0x57d4 <vfprintf+0x25e>
    57c8:	1c 14       	cp	r1, r12
    57ca:	1d 04       	cpc	r1, r13
    57cc:	34 f4       	brge	.+12     	; 0x57da <vfprintf+0x264>
    57ce:	c6 01       	movw	r24, r12
    57d0:	01 96       	adiw	r24, 0x01	; 1
    57d2:	05 c0       	rjmp	.+10     	; 0x57de <vfprintf+0x268>
    57d4:	85 e0       	ldi	r24, 0x05	; 5
    57d6:	90 e0       	ldi	r25, 0x00	; 0
    57d8:	02 c0       	rjmp	.+4      	; 0x57de <vfprintf+0x268>
    57da:	81 e0       	ldi	r24, 0x01	; 1
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	01 11       	cpse	r16, r1
    57e0:	01 96       	adiw	r24, 0x01	; 1
    57e2:	11 23       	and	r17, r17
    57e4:	31 f0       	breq	.+12     	; 0x57f2 <vfprintf+0x27c>
    57e6:	21 2f       	mov	r18, r17
    57e8:	30 e0       	ldi	r19, 0x00	; 0
    57ea:	2f 5f       	subi	r18, 0xFF	; 255
    57ec:	3f 4f       	sbci	r19, 0xFF	; 255
    57ee:	82 0f       	add	r24, r18
    57f0:	93 1f       	adc	r25, r19
    57f2:	25 2d       	mov	r18, r5
    57f4:	30 e0       	ldi	r19, 0x00	; 0
    57f6:	82 17       	cp	r24, r18
    57f8:	93 07       	cpc	r25, r19
    57fa:	14 f4       	brge	.+4      	; 0x5800 <vfprintf+0x28a>
    57fc:	58 1a       	sub	r5, r24
    57fe:	01 c0       	rjmp	.+2      	; 0x5802 <vfprintf+0x28c>
    5800:	51 2c       	mov	r5, r1
    5802:	89 2d       	mov	r24, r9
    5804:	89 70       	andi	r24, 0x09	; 9
    5806:	41 f4       	brne	.+16     	; 0x5818 <vfprintf+0x2a2>
    5808:	55 20       	and	r5, r5
    580a:	31 f0       	breq	.+12     	; 0x5818 <vfprintf+0x2a2>
    580c:	b7 01       	movw	r22, r14
    580e:	80 e2       	ldi	r24, 0x20	; 32
    5810:	90 e0       	ldi	r25, 0x00	; 0
    5812:	c5 d6       	rcall	.+3466   	; 0x659e <fputc>
    5814:	5a 94       	dec	r5
    5816:	f8 cf       	rjmp	.-16     	; 0x5808 <vfprintf+0x292>
    5818:	00 23       	and	r16, r16
    581a:	21 f0       	breq	.+8      	; 0x5824 <vfprintf+0x2ae>
    581c:	b7 01       	movw	r22, r14
    581e:	80 2f       	mov	r24, r16
    5820:	90 e0       	ldi	r25, 0x00	; 0
    5822:	bd d6       	rcall	.+3450   	; 0x659e <fputc>
    5824:	93 fc       	sbrc	r9, 3
    5826:	08 c0       	rjmp	.+16     	; 0x5838 <vfprintf+0x2c2>
    5828:	55 20       	and	r5, r5
    582a:	31 f0       	breq	.+12     	; 0x5838 <vfprintf+0x2c2>
    582c:	b7 01       	movw	r22, r14
    582e:	80 e3       	ldi	r24, 0x30	; 48
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	b5 d6       	rcall	.+3434   	; 0x659e <fputc>
    5834:	5a 94       	dec	r5
    5836:	f8 cf       	rjmp	.-16     	; 0x5828 <vfprintf+0x2b2>
    5838:	97 fe       	sbrs	r9, 7
    583a:	4a c0       	rjmp	.+148    	; 0x58d0 <vfprintf+0x35a>
    583c:	46 01       	movw	r8, r12
    583e:	d7 fe       	sbrs	r13, 7
    5840:	02 c0       	rjmp	.+4      	; 0x5846 <vfprintf+0x2d0>
    5842:	81 2c       	mov	r8, r1
    5844:	91 2c       	mov	r9, r1
    5846:	c6 01       	movw	r24, r12
    5848:	88 19       	sub	r24, r8
    584a:	99 09       	sbc	r25, r9
    584c:	f3 01       	movw	r30, r6
    584e:	e8 0f       	add	r30, r24
    5850:	f9 1f       	adc	r31, r25
    5852:	fe 87       	std	Y+14, r31	; 0x0e
    5854:	ed 87       	std	Y+13, r30	; 0x0d
    5856:	96 01       	movw	r18, r12
    5858:	24 19       	sub	r18, r4
    585a:	31 09       	sbc	r19, r1
    585c:	38 8b       	std	Y+16, r19	; 0x10
    585e:	2f 87       	std	Y+15, r18	; 0x0f
    5860:	01 2f       	mov	r16, r17
    5862:	10 e0       	ldi	r17, 0x00	; 0
    5864:	11 95       	neg	r17
    5866:	01 95       	neg	r16
    5868:	11 09       	sbc	r17, r1
    586a:	3f ef       	ldi	r19, 0xFF	; 255
    586c:	83 16       	cp	r8, r19
    586e:	93 06       	cpc	r9, r19
    5870:	21 f4       	brne	.+8      	; 0x587a <vfprintf+0x304>
    5872:	b7 01       	movw	r22, r14
    5874:	8e e2       	ldi	r24, 0x2E	; 46
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	92 d6       	rcall	.+3364   	; 0x659e <fputc>
    587a:	c8 14       	cp	r12, r8
    587c:	d9 04       	cpc	r13, r9
    587e:	4c f0       	brlt	.+18     	; 0x5892 <vfprintf+0x31c>
    5880:	8f 85       	ldd	r24, Y+15	; 0x0f
    5882:	98 89       	ldd	r25, Y+16	; 0x10
    5884:	88 15       	cp	r24, r8
    5886:	99 05       	cpc	r25, r9
    5888:	24 f4       	brge	.+8      	; 0x5892 <vfprintf+0x31c>
    588a:	ed 85       	ldd	r30, Y+13	; 0x0d
    588c:	fe 85       	ldd	r31, Y+14	; 0x0e
    588e:	81 81       	ldd	r24, Z+1	; 0x01
    5890:	01 c0       	rjmp	.+2      	; 0x5894 <vfprintf+0x31e>
    5892:	80 e3       	ldi	r24, 0x30	; 48
    5894:	f1 e0       	ldi	r31, 0x01	; 1
    5896:	8f 1a       	sub	r8, r31
    5898:	91 08       	sbc	r9, r1
    589a:	2d 85       	ldd	r18, Y+13	; 0x0d
    589c:	3e 85       	ldd	r19, Y+14	; 0x0e
    589e:	2f 5f       	subi	r18, 0xFF	; 255
    58a0:	3f 4f       	sbci	r19, 0xFF	; 255
    58a2:	3e 87       	std	Y+14, r19	; 0x0e
    58a4:	2d 87       	std	Y+13, r18	; 0x0d
    58a6:	80 16       	cp	r8, r16
    58a8:	91 06       	cpc	r9, r17
    58aa:	24 f0       	brlt	.+8      	; 0x58b4 <vfprintf+0x33e>
    58ac:	b7 01       	movw	r22, r14
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	76 d6       	rcall	.+3308   	; 0x659e <fputc>
    58b2:	db cf       	rjmp	.-74     	; 0x586a <vfprintf+0x2f4>
    58b4:	c8 14       	cp	r12, r8
    58b6:	d9 04       	cpc	r13, r9
    58b8:	41 f4       	brne	.+16     	; 0x58ca <vfprintf+0x354>
    58ba:	9a 81       	ldd	r25, Y+2	; 0x02
    58bc:	96 33       	cpi	r25, 0x36	; 54
    58be:	20 f4       	brcc	.+8      	; 0x58c8 <vfprintf+0x352>
    58c0:	95 33       	cpi	r25, 0x35	; 53
    58c2:	19 f4       	brne	.+6      	; 0x58ca <vfprintf+0x354>
    58c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    58c6:	34 ff       	sbrs	r19, 4
    58c8:	81 e3       	ldi	r24, 0x31	; 49
    58ca:	b7 01       	movw	r22, r14
    58cc:	90 e0       	ldi	r25, 0x00	; 0
    58ce:	48 c0       	rjmp	.+144    	; 0x5960 <vfprintf+0x3ea>
    58d0:	8a 81       	ldd	r24, Y+2	; 0x02
    58d2:	81 33       	cpi	r24, 0x31	; 49
    58d4:	19 f0       	breq	.+6      	; 0x58dc <vfprintf+0x366>
    58d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    58d8:	9f 7e       	andi	r25, 0xEF	; 239
    58da:	9c 87       	std	Y+12, r25	; 0x0c
    58dc:	b7 01       	movw	r22, r14
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	5e d6       	rcall	.+3260   	; 0x659e <fputc>
    58e2:	11 11       	cpse	r17, r1
    58e4:	05 c0       	rjmp	.+10     	; 0x58f0 <vfprintf+0x37a>
    58e6:	94 fc       	sbrc	r9, 4
    58e8:	16 c0       	rjmp	.+44     	; 0x5916 <vfprintf+0x3a0>
    58ea:	85 e6       	ldi	r24, 0x65	; 101
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	15 c0       	rjmp	.+42     	; 0x591a <vfprintf+0x3a4>
    58f0:	b7 01       	movw	r22, r14
    58f2:	8e e2       	ldi	r24, 0x2E	; 46
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	53 d6       	rcall	.+3238   	; 0x659e <fputc>
    58f8:	1e 5f       	subi	r17, 0xFE	; 254
    58fa:	82 e0       	ldi	r24, 0x02	; 2
    58fc:	01 e0       	ldi	r16, 0x01	; 1
    58fe:	08 0f       	add	r16, r24
    5900:	f3 01       	movw	r30, r6
    5902:	e8 0f       	add	r30, r24
    5904:	f1 1d       	adc	r31, r1
    5906:	80 81       	ld	r24, Z
    5908:	b7 01       	movw	r22, r14
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	48 d6       	rcall	.+3216   	; 0x659e <fputc>
    590e:	80 2f       	mov	r24, r16
    5910:	01 13       	cpse	r16, r17
    5912:	f4 cf       	rjmp	.-24     	; 0x58fc <vfprintf+0x386>
    5914:	e8 cf       	rjmp	.-48     	; 0x58e6 <vfprintf+0x370>
    5916:	85 e4       	ldi	r24, 0x45	; 69
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	b7 01       	movw	r22, r14
    591c:	40 d6       	rcall	.+3200   	; 0x659e <fputc>
    591e:	d7 fc       	sbrc	r13, 7
    5920:	06 c0       	rjmp	.+12     	; 0x592e <vfprintf+0x3b8>
    5922:	c1 14       	cp	r12, r1
    5924:	d1 04       	cpc	r13, r1
    5926:	41 f4       	brne	.+16     	; 0x5938 <vfprintf+0x3c2>
    5928:	ec 85       	ldd	r30, Y+12	; 0x0c
    592a:	e4 ff       	sbrs	r30, 4
    592c:	05 c0       	rjmp	.+10     	; 0x5938 <vfprintf+0x3c2>
    592e:	d1 94       	neg	r13
    5930:	c1 94       	neg	r12
    5932:	d1 08       	sbc	r13, r1
    5934:	8d e2       	ldi	r24, 0x2D	; 45
    5936:	01 c0       	rjmp	.+2      	; 0x593a <vfprintf+0x3c4>
    5938:	8b e2       	ldi	r24, 0x2B	; 43
    593a:	b7 01       	movw	r22, r14
    593c:	90 e0       	ldi	r25, 0x00	; 0
    593e:	2f d6       	rcall	.+3166   	; 0x659e <fputc>
    5940:	80 e3       	ldi	r24, 0x30	; 48
    5942:	2a e0       	ldi	r18, 0x0A	; 10
    5944:	c2 16       	cp	r12, r18
    5946:	d1 04       	cpc	r13, r1
    5948:	2c f0       	brlt	.+10     	; 0x5954 <vfprintf+0x3de>
    594a:	8f 5f       	subi	r24, 0xFF	; 255
    594c:	fa e0       	ldi	r31, 0x0A	; 10
    594e:	cf 1a       	sub	r12, r31
    5950:	d1 08       	sbc	r13, r1
    5952:	f7 cf       	rjmp	.-18     	; 0x5942 <vfprintf+0x3cc>
    5954:	b7 01       	movw	r22, r14
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	22 d6       	rcall	.+3140   	; 0x659e <fputc>
    595a:	b7 01       	movw	r22, r14
    595c:	c6 01       	movw	r24, r12
    595e:	c0 96       	adiw	r24, 0x30	; 48
    5960:	1e d6       	rcall	.+3132   	; 0x659e <fputc>
    5962:	49 c1       	rjmp	.+658    	; 0x5bf6 <vfprintf+0x680>
    5964:	83 36       	cpi	r24, 0x63	; 99
    5966:	31 f0       	breq	.+12     	; 0x5974 <vfprintf+0x3fe>
    5968:	83 37       	cpi	r24, 0x73	; 115
    596a:	79 f0       	breq	.+30     	; 0x598a <vfprintf+0x414>
    596c:	83 35       	cpi	r24, 0x53	; 83
    596e:	09 f0       	breq	.+2      	; 0x5972 <vfprintf+0x3fc>
    5970:	52 c0       	rjmp	.+164    	; 0x5a16 <vfprintf+0x4a0>
    5972:	1f c0       	rjmp	.+62     	; 0x59b2 <vfprintf+0x43c>
    5974:	56 01       	movw	r10, r12
    5976:	32 e0       	ldi	r19, 0x02	; 2
    5978:	a3 0e       	add	r10, r19
    597a:	b1 1c       	adc	r11, r1
    597c:	f6 01       	movw	r30, r12
    597e:	80 81       	ld	r24, Z
    5980:	89 83       	std	Y+1, r24	; 0x01
    5982:	01 e0       	ldi	r16, 0x01	; 1
    5984:	10 e0       	ldi	r17, 0x00	; 0
    5986:	63 01       	movw	r12, r6
    5988:	11 c0       	rjmp	.+34     	; 0x59ac <vfprintf+0x436>
    598a:	56 01       	movw	r10, r12
    598c:	f2 e0       	ldi	r31, 0x02	; 2
    598e:	af 0e       	add	r10, r31
    5990:	b1 1c       	adc	r11, r1
    5992:	f6 01       	movw	r30, r12
    5994:	c0 80       	ld	r12, Z
    5996:	d1 80       	ldd	r13, Z+1	; 0x01
    5998:	96 fe       	sbrs	r9, 6
    599a:	03 c0       	rjmp	.+6      	; 0x59a2 <vfprintf+0x42c>
    599c:	61 2f       	mov	r22, r17
    599e:	70 e0       	ldi	r23, 0x00	; 0
    59a0:	02 c0       	rjmp	.+4      	; 0x59a6 <vfprintf+0x430>
    59a2:	6f ef       	ldi	r22, 0xFF	; 255
    59a4:	7f ef       	ldi	r23, 0xFF	; 255
    59a6:	c6 01       	movw	r24, r12
    59a8:	ef d5       	rcall	.+3038   	; 0x6588 <strnlen>
    59aa:	8c 01       	movw	r16, r24
    59ac:	f9 2d       	mov	r31, r9
    59ae:	ff 77       	andi	r31, 0x7F	; 127
    59b0:	13 c0       	rjmp	.+38     	; 0x59d8 <vfprintf+0x462>
    59b2:	56 01       	movw	r10, r12
    59b4:	22 e0       	ldi	r18, 0x02	; 2
    59b6:	a2 0e       	add	r10, r18
    59b8:	b1 1c       	adc	r11, r1
    59ba:	f6 01       	movw	r30, r12
    59bc:	c0 80       	ld	r12, Z
    59be:	d1 80       	ldd	r13, Z+1	; 0x01
    59c0:	96 fe       	sbrs	r9, 6
    59c2:	03 c0       	rjmp	.+6      	; 0x59ca <vfprintf+0x454>
    59c4:	61 2f       	mov	r22, r17
    59c6:	70 e0       	ldi	r23, 0x00	; 0
    59c8:	02 c0       	rjmp	.+4      	; 0x59ce <vfprintf+0x458>
    59ca:	6f ef       	ldi	r22, 0xFF	; 255
    59cc:	7f ef       	ldi	r23, 0xFF	; 255
    59ce:	c6 01       	movw	r24, r12
    59d0:	71 d5       	rcall	.+2786   	; 0x64b4 <strnlen_P>
    59d2:	8c 01       	movw	r16, r24
    59d4:	f9 2d       	mov	r31, r9
    59d6:	f0 68       	ori	r31, 0x80	; 128
    59d8:	9f 2e       	mov	r9, r31
    59da:	f3 fd       	sbrc	r31, 3
    59dc:	18 c0       	rjmp	.+48     	; 0x5a0e <vfprintf+0x498>
    59de:	85 2d       	mov	r24, r5
    59e0:	90 e0       	ldi	r25, 0x00	; 0
    59e2:	08 17       	cp	r16, r24
    59e4:	19 07       	cpc	r17, r25
    59e6:	98 f4       	brcc	.+38     	; 0x5a0e <vfprintf+0x498>
    59e8:	b7 01       	movw	r22, r14
    59ea:	80 e2       	ldi	r24, 0x20	; 32
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	d7 d5       	rcall	.+2990   	; 0x659e <fputc>
    59f0:	5a 94       	dec	r5
    59f2:	f5 cf       	rjmp	.-22     	; 0x59de <vfprintf+0x468>
    59f4:	f6 01       	movw	r30, r12
    59f6:	97 fc       	sbrc	r9, 7
    59f8:	85 91       	lpm	r24, Z+
    59fa:	97 fe       	sbrs	r9, 7
    59fc:	81 91       	ld	r24, Z+
    59fe:	6f 01       	movw	r12, r30
    5a00:	b7 01       	movw	r22, r14
    5a02:	90 e0       	ldi	r25, 0x00	; 0
    5a04:	cc d5       	rcall	.+2968   	; 0x659e <fputc>
    5a06:	51 10       	cpse	r5, r1
    5a08:	5a 94       	dec	r5
    5a0a:	01 50       	subi	r16, 0x01	; 1
    5a0c:	11 09       	sbc	r17, r1
    5a0e:	01 15       	cp	r16, r1
    5a10:	11 05       	cpc	r17, r1
    5a12:	81 f7       	brne	.-32     	; 0x59f4 <vfprintf+0x47e>
    5a14:	f0 c0       	rjmp	.+480    	; 0x5bf6 <vfprintf+0x680>
    5a16:	84 36       	cpi	r24, 0x64	; 100
    5a18:	11 f0       	breq	.+4      	; 0x5a1e <vfprintf+0x4a8>
    5a1a:	89 36       	cpi	r24, 0x69	; 105
    5a1c:	59 f5       	brne	.+86     	; 0x5a74 <vfprintf+0x4fe>
    5a1e:	56 01       	movw	r10, r12
    5a20:	97 fe       	sbrs	r9, 7
    5a22:	09 c0       	rjmp	.+18     	; 0x5a36 <vfprintf+0x4c0>
    5a24:	24 e0       	ldi	r18, 0x04	; 4
    5a26:	a2 0e       	add	r10, r18
    5a28:	b1 1c       	adc	r11, r1
    5a2a:	f6 01       	movw	r30, r12
    5a2c:	60 81       	ld	r22, Z
    5a2e:	71 81       	ldd	r23, Z+1	; 0x01
    5a30:	82 81       	ldd	r24, Z+2	; 0x02
    5a32:	93 81       	ldd	r25, Z+3	; 0x03
    5a34:	0a c0       	rjmp	.+20     	; 0x5a4a <vfprintf+0x4d4>
    5a36:	f2 e0       	ldi	r31, 0x02	; 2
    5a38:	af 0e       	add	r10, r31
    5a3a:	b1 1c       	adc	r11, r1
    5a3c:	f6 01       	movw	r30, r12
    5a3e:	60 81       	ld	r22, Z
    5a40:	71 81       	ldd	r23, Z+1	; 0x01
    5a42:	07 2e       	mov	r0, r23
    5a44:	00 0c       	add	r0, r0
    5a46:	88 0b       	sbc	r24, r24
    5a48:	99 0b       	sbc	r25, r25
    5a4a:	f9 2d       	mov	r31, r9
    5a4c:	ff 76       	andi	r31, 0x6F	; 111
    5a4e:	9f 2e       	mov	r9, r31
    5a50:	97 ff       	sbrs	r25, 7
    5a52:	09 c0       	rjmp	.+18     	; 0x5a66 <vfprintf+0x4f0>
    5a54:	90 95       	com	r25
    5a56:	80 95       	com	r24
    5a58:	70 95       	com	r23
    5a5a:	61 95       	neg	r22
    5a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a60:	9f 4f       	sbci	r25, 0xFF	; 255
    5a62:	f0 68       	ori	r31, 0x80	; 128
    5a64:	9f 2e       	mov	r9, r31
    5a66:	2a e0       	ldi	r18, 0x0A	; 10
    5a68:	30 e0       	ldi	r19, 0x00	; 0
    5a6a:	a3 01       	movw	r20, r6
    5a6c:	47 d6       	rcall	.+3214   	; 0x66fc <__ultoa_invert>
    5a6e:	c8 2e       	mov	r12, r24
    5a70:	c6 18       	sub	r12, r6
    5a72:	3e c0       	rjmp	.+124    	; 0x5af0 <vfprintf+0x57a>
    5a74:	09 2d       	mov	r16, r9
    5a76:	85 37       	cpi	r24, 0x75	; 117
    5a78:	21 f4       	brne	.+8      	; 0x5a82 <vfprintf+0x50c>
    5a7a:	0f 7e       	andi	r16, 0xEF	; 239
    5a7c:	2a e0       	ldi	r18, 0x0A	; 10
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
    5a80:	1d c0       	rjmp	.+58     	; 0x5abc <vfprintf+0x546>
    5a82:	09 7f       	andi	r16, 0xF9	; 249
    5a84:	8f 36       	cpi	r24, 0x6F	; 111
    5a86:	91 f0       	breq	.+36     	; 0x5aac <vfprintf+0x536>
    5a88:	18 f4       	brcc	.+6      	; 0x5a90 <vfprintf+0x51a>
    5a8a:	88 35       	cpi	r24, 0x58	; 88
    5a8c:	59 f0       	breq	.+22     	; 0x5aa4 <vfprintf+0x52e>
    5a8e:	bc c0       	rjmp	.+376    	; 0x5c08 <vfprintf+0x692>
    5a90:	80 37       	cpi	r24, 0x70	; 112
    5a92:	19 f0       	breq	.+6      	; 0x5a9a <vfprintf+0x524>
    5a94:	88 37       	cpi	r24, 0x78	; 120
    5a96:	11 f0       	breq	.+4      	; 0x5a9c <vfprintf+0x526>
    5a98:	b7 c0       	rjmp	.+366    	; 0x5c08 <vfprintf+0x692>
    5a9a:	00 61       	ori	r16, 0x10	; 16
    5a9c:	04 ff       	sbrs	r16, 4
    5a9e:	09 c0       	rjmp	.+18     	; 0x5ab2 <vfprintf+0x53c>
    5aa0:	04 60       	ori	r16, 0x04	; 4
    5aa2:	07 c0       	rjmp	.+14     	; 0x5ab2 <vfprintf+0x53c>
    5aa4:	94 fe       	sbrs	r9, 4
    5aa6:	08 c0       	rjmp	.+16     	; 0x5ab8 <vfprintf+0x542>
    5aa8:	06 60       	ori	r16, 0x06	; 6
    5aaa:	06 c0       	rjmp	.+12     	; 0x5ab8 <vfprintf+0x542>
    5aac:	28 e0       	ldi	r18, 0x08	; 8
    5aae:	30 e0       	ldi	r19, 0x00	; 0
    5ab0:	05 c0       	rjmp	.+10     	; 0x5abc <vfprintf+0x546>
    5ab2:	20 e1       	ldi	r18, 0x10	; 16
    5ab4:	30 e0       	ldi	r19, 0x00	; 0
    5ab6:	02 c0       	rjmp	.+4      	; 0x5abc <vfprintf+0x546>
    5ab8:	20 e1       	ldi	r18, 0x10	; 16
    5aba:	32 e0       	ldi	r19, 0x02	; 2
    5abc:	56 01       	movw	r10, r12
    5abe:	07 ff       	sbrs	r16, 7
    5ac0:	09 c0       	rjmp	.+18     	; 0x5ad4 <vfprintf+0x55e>
    5ac2:	84 e0       	ldi	r24, 0x04	; 4
    5ac4:	a8 0e       	add	r10, r24
    5ac6:	b1 1c       	adc	r11, r1
    5ac8:	f6 01       	movw	r30, r12
    5aca:	60 81       	ld	r22, Z
    5acc:	71 81       	ldd	r23, Z+1	; 0x01
    5ace:	82 81       	ldd	r24, Z+2	; 0x02
    5ad0:	93 81       	ldd	r25, Z+3	; 0x03
    5ad2:	08 c0       	rjmp	.+16     	; 0x5ae4 <vfprintf+0x56e>
    5ad4:	f2 e0       	ldi	r31, 0x02	; 2
    5ad6:	af 0e       	add	r10, r31
    5ad8:	b1 1c       	adc	r11, r1
    5ada:	f6 01       	movw	r30, r12
    5adc:	60 81       	ld	r22, Z
    5ade:	71 81       	ldd	r23, Z+1	; 0x01
    5ae0:	80 e0       	ldi	r24, 0x00	; 0
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	a3 01       	movw	r20, r6
    5ae6:	0a d6       	rcall	.+3092   	; 0x66fc <__ultoa_invert>
    5ae8:	c8 2e       	mov	r12, r24
    5aea:	c6 18       	sub	r12, r6
    5aec:	0f 77       	andi	r16, 0x7F	; 127
    5aee:	90 2e       	mov	r9, r16
    5af0:	96 fe       	sbrs	r9, 6
    5af2:	0b c0       	rjmp	.+22     	; 0x5b0a <vfprintf+0x594>
    5af4:	09 2d       	mov	r16, r9
    5af6:	0e 7f       	andi	r16, 0xFE	; 254
    5af8:	c1 16       	cp	r12, r17
    5afa:	50 f4       	brcc	.+20     	; 0x5b10 <vfprintf+0x59a>
    5afc:	94 fe       	sbrs	r9, 4
    5afe:	0a c0       	rjmp	.+20     	; 0x5b14 <vfprintf+0x59e>
    5b00:	92 fc       	sbrc	r9, 2
    5b02:	08 c0       	rjmp	.+16     	; 0x5b14 <vfprintf+0x59e>
    5b04:	09 2d       	mov	r16, r9
    5b06:	0e 7e       	andi	r16, 0xEE	; 238
    5b08:	05 c0       	rjmp	.+10     	; 0x5b14 <vfprintf+0x59e>
    5b0a:	dc 2c       	mov	r13, r12
    5b0c:	09 2d       	mov	r16, r9
    5b0e:	03 c0       	rjmp	.+6      	; 0x5b16 <vfprintf+0x5a0>
    5b10:	dc 2c       	mov	r13, r12
    5b12:	01 c0       	rjmp	.+2      	; 0x5b16 <vfprintf+0x5a0>
    5b14:	d1 2e       	mov	r13, r17
    5b16:	04 ff       	sbrs	r16, 4
    5b18:	0d c0       	rjmp	.+26     	; 0x5b34 <vfprintf+0x5be>
    5b1a:	fe 01       	movw	r30, r28
    5b1c:	ec 0d       	add	r30, r12
    5b1e:	f1 1d       	adc	r31, r1
    5b20:	80 81       	ld	r24, Z
    5b22:	80 33       	cpi	r24, 0x30	; 48
    5b24:	11 f4       	brne	.+4      	; 0x5b2a <vfprintf+0x5b4>
    5b26:	09 7e       	andi	r16, 0xE9	; 233
    5b28:	09 c0       	rjmp	.+18     	; 0x5b3c <vfprintf+0x5c6>
    5b2a:	02 ff       	sbrs	r16, 2
    5b2c:	06 c0       	rjmp	.+12     	; 0x5b3a <vfprintf+0x5c4>
    5b2e:	d3 94       	inc	r13
    5b30:	d3 94       	inc	r13
    5b32:	04 c0       	rjmp	.+8      	; 0x5b3c <vfprintf+0x5c6>
    5b34:	80 2f       	mov	r24, r16
    5b36:	86 78       	andi	r24, 0x86	; 134
    5b38:	09 f0       	breq	.+2      	; 0x5b3c <vfprintf+0x5c6>
    5b3a:	d3 94       	inc	r13
    5b3c:	03 fd       	sbrc	r16, 3
    5b3e:	10 c0       	rjmp	.+32     	; 0x5b60 <vfprintf+0x5ea>
    5b40:	00 ff       	sbrs	r16, 0
    5b42:	06 c0       	rjmp	.+12     	; 0x5b50 <vfprintf+0x5da>
    5b44:	1c 2d       	mov	r17, r12
    5b46:	d5 14       	cp	r13, r5
    5b48:	78 f4       	brcc	.+30     	; 0x5b68 <vfprintf+0x5f2>
    5b4a:	15 0d       	add	r17, r5
    5b4c:	1d 19       	sub	r17, r13
    5b4e:	0c c0       	rjmp	.+24     	; 0x5b68 <vfprintf+0x5f2>
    5b50:	d5 14       	cp	r13, r5
    5b52:	50 f4       	brcc	.+20     	; 0x5b68 <vfprintf+0x5f2>
    5b54:	b7 01       	movw	r22, r14
    5b56:	80 e2       	ldi	r24, 0x20	; 32
    5b58:	90 e0       	ldi	r25, 0x00	; 0
    5b5a:	21 d5       	rcall	.+2626   	; 0x659e <fputc>
    5b5c:	d3 94       	inc	r13
    5b5e:	f8 cf       	rjmp	.-16     	; 0x5b50 <vfprintf+0x5da>
    5b60:	d5 14       	cp	r13, r5
    5b62:	10 f4       	brcc	.+4      	; 0x5b68 <vfprintf+0x5f2>
    5b64:	5d 18       	sub	r5, r13
    5b66:	01 c0       	rjmp	.+2      	; 0x5b6a <vfprintf+0x5f4>
    5b68:	51 2c       	mov	r5, r1
    5b6a:	04 ff       	sbrs	r16, 4
    5b6c:	0f c0       	rjmp	.+30     	; 0x5b8c <vfprintf+0x616>
    5b6e:	b7 01       	movw	r22, r14
    5b70:	80 e3       	ldi	r24, 0x30	; 48
    5b72:	90 e0       	ldi	r25, 0x00	; 0
    5b74:	14 d5       	rcall	.+2600   	; 0x659e <fputc>
    5b76:	02 ff       	sbrs	r16, 2
    5b78:	16 c0       	rjmp	.+44     	; 0x5ba6 <vfprintf+0x630>
    5b7a:	01 fd       	sbrc	r16, 1
    5b7c:	03 c0       	rjmp	.+6      	; 0x5b84 <vfprintf+0x60e>
    5b7e:	88 e7       	ldi	r24, 0x78	; 120
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	02 c0       	rjmp	.+4      	; 0x5b88 <vfprintf+0x612>
    5b84:	88 e5       	ldi	r24, 0x58	; 88
    5b86:	90 e0       	ldi	r25, 0x00	; 0
    5b88:	b7 01       	movw	r22, r14
    5b8a:	0c c0       	rjmp	.+24     	; 0x5ba4 <vfprintf+0x62e>
    5b8c:	80 2f       	mov	r24, r16
    5b8e:	86 78       	andi	r24, 0x86	; 134
    5b90:	51 f0       	breq	.+20     	; 0x5ba6 <vfprintf+0x630>
    5b92:	01 ff       	sbrs	r16, 1
    5b94:	02 c0       	rjmp	.+4      	; 0x5b9a <vfprintf+0x624>
    5b96:	8b e2       	ldi	r24, 0x2B	; 43
    5b98:	01 c0       	rjmp	.+2      	; 0x5b9c <vfprintf+0x626>
    5b9a:	80 e2       	ldi	r24, 0x20	; 32
    5b9c:	07 fd       	sbrc	r16, 7
    5b9e:	8d e2       	ldi	r24, 0x2D	; 45
    5ba0:	b7 01       	movw	r22, r14
    5ba2:	90 e0       	ldi	r25, 0x00	; 0
    5ba4:	fc d4       	rcall	.+2552   	; 0x659e <fputc>
    5ba6:	c1 16       	cp	r12, r17
    5ba8:	30 f4       	brcc	.+12     	; 0x5bb6 <vfprintf+0x640>
    5baa:	b7 01       	movw	r22, r14
    5bac:	80 e3       	ldi	r24, 0x30	; 48
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	f6 d4       	rcall	.+2540   	; 0x659e <fputc>
    5bb2:	11 50       	subi	r17, 0x01	; 1
    5bb4:	f8 cf       	rjmp	.-16     	; 0x5ba6 <vfprintf+0x630>
    5bb6:	ca 94       	dec	r12
    5bb8:	f3 01       	movw	r30, r6
    5bba:	ec 0d       	add	r30, r12
    5bbc:	f1 1d       	adc	r31, r1
    5bbe:	80 81       	ld	r24, Z
    5bc0:	b7 01       	movw	r22, r14
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	ec d4       	rcall	.+2520   	; 0x659e <fputc>
    5bc6:	c1 10       	cpse	r12, r1
    5bc8:	f6 cf       	rjmp	.-20     	; 0x5bb6 <vfprintf+0x640>
    5bca:	15 c0       	rjmp	.+42     	; 0x5bf6 <vfprintf+0x680>
    5bcc:	f4 e0       	ldi	r31, 0x04	; 4
    5bce:	f5 15       	cp	r31, r5
    5bd0:	50 f5       	brcc	.+84     	; 0x5c26 <vfprintf+0x6b0>
    5bd2:	84 e0       	ldi	r24, 0x04	; 4
    5bd4:	58 1a       	sub	r5, r24
    5bd6:	93 fe       	sbrs	r9, 3
    5bd8:	1e c0       	rjmp	.+60     	; 0x5c16 <vfprintf+0x6a0>
    5bda:	01 11       	cpse	r16, r1
    5bdc:	25 c0       	rjmp	.+74     	; 0x5c28 <vfprintf+0x6b2>
    5bde:	2c 85       	ldd	r18, Y+12	; 0x0c
    5be0:	23 ff       	sbrs	r18, 3
    5be2:	27 c0       	rjmp	.+78     	; 0x5c32 <vfprintf+0x6bc>
    5be4:	0a e9       	ldi	r16, 0x9A	; 154
    5be6:	11 e0       	ldi	r17, 0x01	; 1
    5be8:	39 2d       	mov	r19, r9
    5bea:	30 71       	andi	r19, 0x10	; 16
    5bec:	93 2e       	mov	r9, r19
    5bee:	f8 01       	movw	r30, r16
    5bf0:	84 91       	lpm	r24, Z
    5bf2:	81 11       	cpse	r24, r1
    5bf4:	21 c0       	rjmp	.+66     	; 0x5c38 <vfprintf+0x6c2>
    5bf6:	55 20       	and	r5, r5
    5bf8:	09 f4       	brne	.+2      	; 0x5bfc <vfprintf+0x686>
    5bfa:	fc cc       	rjmp	.-1544   	; 0x55f4 <vfprintf+0x7e>
    5bfc:	b7 01       	movw	r22, r14
    5bfe:	80 e2       	ldi	r24, 0x20	; 32
    5c00:	90 e0       	ldi	r25, 0x00	; 0
    5c02:	cd d4       	rcall	.+2458   	; 0x659e <fputc>
    5c04:	5a 94       	dec	r5
    5c06:	f7 cf       	rjmp	.-18     	; 0x5bf6 <vfprintf+0x680>
    5c08:	f7 01       	movw	r30, r14
    5c0a:	86 81       	ldd	r24, Z+6	; 0x06
    5c0c:	97 81       	ldd	r25, Z+7	; 0x07
    5c0e:	23 c0       	rjmp	.+70     	; 0x5c56 <vfprintf+0x6e0>
    5c10:	8f ef       	ldi	r24, 0xFF	; 255
    5c12:	9f ef       	ldi	r25, 0xFF	; 255
    5c14:	20 c0       	rjmp	.+64     	; 0x5c56 <vfprintf+0x6e0>
    5c16:	b7 01       	movw	r22, r14
    5c18:	80 e2       	ldi	r24, 0x20	; 32
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	c0 d4       	rcall	.+2432   	; 0x659e <fputc>
    5c1e:	5a 94       	dec	r5
    5c20:	51 10       	cpse	r5, r1
    5c22:	f9 cf       	rjmp	.-14     	; 0x5c16 <vfprintf+0x6a0>
    5c24:	da cf       	rjmp	.-76     	; 0x5bda <vfprintf+0x664>
    5c26:	51 2c       	mov	r5, r1
    5c28:	b7 01       	movw	r22, r14
    5c2a:	80 2f       	mov	r24, r16
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	b7 d4       	rcall	.+2414   	; 0x659e <fputc>
    5c30:	d6 cf       	rjmp	.-84     	; 0x5bde <vfprintf+0x668>
    5c32:	0e e9       	ldi	r16, 0x9E	; 158
    5c34:	11 e0       	ldi	r17, 0x01	; 1
    5c36:	d8 cf       	rjmp	.-80     	; 0x5be8 <vfprintf+0x672>
    5c38:	91 10       	cpse	r9, r1
    5c3a:	80 52       	subi	r24, 0x20	; 32
    5c3c:	b7 01       	movw	r22, r14
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	ae d4       	rcall	.+2396   	; 0x659e <fputc>
    5c42:	0f 5f       	subi	r16, 0xFF	; 255
    5c44:	1f 4f       	sbci	r17, 0xFF	; 255
    5c46:	d3 cf       	rjmp	.-90     	; 0x5bee <vfprintf+0x678>
    5c48:	23 e0       	ldi	r18, 0x03	; 3
    5c4a:	25 15       	cp	r18, r5
    5c4c:	10 f4       	brcc	.+4      	; 0x5c52 <vfprintf+0x6dc>
    5c4e:	83 e0       	ldi	r24, 0x03	; 3
    5c50:	c1 cf       	rjmp	.-126    	; 0x5bd4 <vfprintf+0x65e>
    5c52:	51 2c       	mov	r5, r1
    5c54:	c4 cf       	rjmp	.-120    	; 0x5bde <vfprintf+0x668>
    5c56:	60 96       	adiw	r28, 0x10	; 16
    5c58:	0f b6       	in	r0, 0x3f	; 63
    5c5a:	f8 94       	cli
    5c5c:	de bf       	out	0x3e, r29	; 62
    5c5e:	0f be       	out	0x3f, r0	; 63
    5c60:	cd bf       	out	0x3d, r28	; 61
    5c62:	df 91       	pop	r29
    5c64:	cf 91       	pop	r28
    5c66:	1f 91       	pop	r17
    5c68:	0f 91       	pop	r16
    5c6a:	ff 90       	pop	r15
    5c6c:	ef 90       	pop	r14
    5c6e:	df 90       	pop	r13
    5c70:	cf 90       	pop	r12
    5c72:	bf 90       	pop	r11
    5c74:	af 90       	pop	r10
    5c76:	9f 90       	pop	r9
    5c78:	8f 90       	pop	r8
    5c7a:	7f 90       	pop	r7
    5c7c:	6f 90       	pop	r6
    5c7e:	5f 90       	pop	r5
    5c80:	4f 90       	pop	r4
    5c82:	3f 90       	pop	r3
    5c84:	2f 90       	pop	r2
    5c86:	08 95       	ret

00005c88 <__subsf3>:
    5c88:	50 58       	subi	r21, 0x80	; 128

00005c8a <__addsf3>:
    5c8a:	bb 27       	eor	r27, r27
    5c8c:	aa 27       	eor	r26, r26
    5c8e:	0e d0       	rcall	.+28     	; 0x5cac <__addsf3x>
    5c90:	4d c1       	rjmp	.+666    	; 0x5f2c <__fp_round>
    5c92:	3e d1       	rcall	.+636    	; 0x5f10 <__fp_pscA>
    5c94:	30 f0       	brcs	.+12     	; 0x5ca2 <__addsf3+0x18>
    5c96:	43 d1       	rcall	.+646    	; 0x5f1e <__fp_pscB>
    5c98:	20 f0       	brcs	.+8      	; 0x5ca2 <__addsf3+0x18>
    5c9a:	31 f4       	brne	.+12     	; 0x5ca8 <__addsf3+0x1e>
    5c9c:	9f 3f       	cpi	r25, 0xFF	; 255
    5c9e:	11 f4       	brne	.+4      	; 0x5ca4 <__addsf3+0x1a>
    5ca0:	1e f4       	brtc	.+6      	; 0x5ca8 <__addsf3+0x1e>
    5ca2:	33 c1       	rjmp	.+614    	; 0x5f0a <__fp_nan>
    5ca4:	0e f4       	brtc	.+2      	; 0x5ca8 <__addsf3+0x1e>
    5ca6:	e0 95       	com	r30
    5ca8:	e7 fb       	bst	r30, 7
    5caa:	29 c1       	rjmp	.+594    	; 0x5efe <__fp_inf>

00005cac <__addsf3x>:
    5cac:	e9 2f       	mov	r30, r25
    5cae:	4f d1       	rcall	.+670    	; 0x5f4e <__fp_split3>
    5cb0:	80 f3       	brcs	.-32     	; 0x5c92 <__addsf3+0x8>
    5cb2:	ba 17       	cp	r27, r26
    5cb4:	62 07       	cpc	r22, r18
    5cb6:	73 07       	cpc	r23, r19
    5cb8:	84 07       	cpc	r24, r20
    5cba:	95 07       	cpc	r25, r21
    5cbc:	18 f0       	brcs	.+6      	; 0x5cc4 <__addsf3x+0x18>
    5cbe:	71 f4       	brne	.+28     	; 0x5cdc <__addsf3x+0x30>
    5cc0:	9e f5       	brtc	.+102    	; 0x5d28 <__addsf3x+0x7c>
    5cc2:	67 c1       	rjmp	.+718    	; 0x5f92 <__fp_zero>
    5cc4:	0e f4       	brtc	.+2      	; 0x5cc8 <__addsf3x+0x1c>
    5cc6:	e0 95       	com	r30
    5cc8:	0b 2e       	mov	r0, r27
    5cca:	ba 2f       	mov	r27, r26
    5ccc:	a0 2d       	mov	r26, r0
    5cce:	0b 01       	movw	r0, r22
    5cd0:	b9 01       	movw	r22, r18
    5cd2:	90 01       	movw	r18, r0
    5cd4:	0c 01       	movw	r0, r24
    5cd6:	ca 01       	movw	r24, r20
    5cd8:	a0 01       	movw	r20, r0
    5cda:	11 24       	eor	r1, r1
    5cdc:	ff 27       	eor	r31, r31
    5cde:	59 1b       	sub	r21, r25
    5ce0:	99 f0       	breq	.+38     	; 0x5d08 <__addsf3x+0x5c>
    5ce2:	59 3f       	cpi	r21, 0xF9	; 249
    5ce4:	50 f4       	brcc	.+20     	; 0x5cfa <__addsf3x+0x4e>
    5ce6:	50 3e       	cpi	r21, 0xE0	; 224
    5ce8:	68 f1       	brcs	.+90     	; 0x5d44 <__addsf3x+0x98>
    5cea:	1a 16       	cp	r1, r26
    5cec:	f0 40       	sbci	r31, 0x00	; 0
    5cee:	a2 2f       	mov	r26, r18
    5cf0:	23 2f       	mov	r18, r19
    5cf2:	34 2f       	mov	r19, r20
    5cf4:	44 27       	eor	r20, r20
    5cf6:	58 5f       	subi	r21, 0xF8	; 248
    5cf8:	f3 cf       	rjmp	.-26     	; 0x5ce0 <__addsf3x+0x34>
    5cfa:	46 95       	lsr	r20
    5cfc:	37 95       	ror	r19
    5cfe:	27 95       	ror	r18
    5d00:	a7 95       	ror	r26
    5d02:	f0 40       	sbci	r31, 0x00	; 0
    5d04:	53 95       	inc	r21
    5d06:	c9 f7       	brne	.-14     	; 0x5cfa <__addsf3x+0x4e>
    5d08:	7e f4       	brtc	.+30     	; 0x5d28 <__addsf3x+0x7c>
    5d0a:	1f 16       	cp	r1, r31
    5d0c:	ba 0b       	sbc	r27, r26
    5d0e:	62 0b       	sbc	r22, r18
    5d10:	73 0b       	sbc	r23, r19
    5d12:	84 0b       	sbc	r24, r20
    5d14:	ba f0       	brmi	.+46     	; 0x5d44 <__addsf3x+0x98>
    5d16:	91 50       	subi	r25, 0x01	; 1
    5d18:	a1 f0       	breq	.+40     	; 0x5d42 <__addsf3x+0x96>
    5d1a:	ff 0f       	add	r31, r31
    5d1c:	bb 1f       	adc	r27, r27
    5d1e:	66 1f       	adc	r22, r22
    5d20:	77 1f       	adc	r23, r23
    5d22:	88 1f       	adc	r24, r24
    5d24:	c2 f7       	brpl	.-16     	; 0x5d16 <__addsf3x+0x6a>
    5d26:	0e c0       	rjmp	.+28     	; 0x5d44 <__addsf3x+0x98>
    5d28:	ba 0f       	add	r27, r26
    5d2a:	62 1f       	adc	r22, r18
    5d2c:	73 1f       	adc	r23, r19
    5d2e:	84 1f       	adc	r24, r20
    5d30:	48 f4       	brcc	.+18     	; 0x5d44 <__addsf3x+0x98>
    5d32:	87 95       	ror	r24
    5d34:	77 95       	ror	r23
    5d36:	67 95       	ror	r22
    5d38:	b7 95       	ror	r27
    5d3a:	f7 95       	ror	r31
    5d3c:	9e 3f       	cpi	r25, 0xFE	; 254
    5d3e:	08 f0       	brcs	.+2      	; 0x5d42 <__addsf3x+0x96>
    5d40:	b3 cf       	rjmp	.-154    	; 0x5ca8 <__addsf3+0x1e>
    5d42:	93 95       	inc	r25
    5d44:	88 0f       	add	r24, r24
    5d46:	08 f0       	brcs	.+2      	; 0x5d4a <__addsf3x+0x9e>
    5d48:	99 27       	eor	r25, r25
    5d4a:	ee 0f       	add	r30, r30
    5d4c:	97 95       	ror	r25
    5d4e:	87 95       	ror	r24
    5d50:	08 95       	ret

00005d52 <__divsf3>:
    5d52:	0c d0       	rcall	.+24     	; 0x5d6c <__divsf3x>
    5d54:	eb c0       	rjmp	.+470    	; 0x5f2c <__fp_round>
    5d56:	e3 d0       	rcall	.+454    	; 0x5f1e <__fp_pscB>
    5d58:	40 f0       	brcs	.+16     	; 0x5d6a <__divsf3+0x18>
    5d5a:	da d0       	rcall	.+436    	; 0x5f10 <__fp_pscA>
    5d5c:	30 f0       	brcs	.+12     	; 0x5d6a <__divsf3+0x18>
    5d5e:	21 f4       	brne	.+8      	; 0x5d68 <__divsf3+0x16>
    5d60:	5f 3f       	cpi	r21, 0xFF	; 255
    5d62:	19 f0       	breq	.+6      	; 0x5d6a <__divsf3+0x18>
    5d64:	cc c0       	rjmp	.+408    	; 0x5efe <__fp_inf>
    5d66:	51 11       	cpse	r21, r1
    5d68:	15 c1       	rjmp	.+554    	; 0x5f94 <__fp_szero>
    5d6a:	cf c0       	rjmp	.+414    	; 0x5f0a <__fp_nan>

00005d6c <__divsf3x>:
    5d6c:	f0 d0       	rcall	.+480    	; 0x5f4e <__fp_split3>
    5d6e:	98 f3       	brcs	.-26     	; 0x5d56 <__divsf3+0x4>

00005d70 <__divsf3_pse>:
    5d70:	99 23       	and	r25, r25
    5d72:	c9 f3       	breq	.-14     	; 0x5d66 <__divsf3+0x14>
    5d74:	55 23       	and	r21, r21
    5d76:	b1 f3       	breq	.-20     	; 0x5d64 <__divsf3+0x12>
    5d78:	95 1b       	sub	r25, r21
    5d7a:	55 0b       	sbc	r21, r21
    5d7c:	bb 27       	eor	r27, r27
    5d7e:	aa 27       	eor	r26, r26
    5d80:	62 17       	cp	r22, r18
    5d82:	73 07       	cpc	r23, r19
    5d84:	84 07       	cpc	r24, r20
    5d86:	38 f0       	brcs	.+14     	; 0x5d96 <__divsf3_pse+0x26>
    5d88:	9f 5f       	subi	r25, 0xFF	; 255
    5d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d8c:	22 0f       	add	r18, r18
    5d8e:	33 1f       	adc	r19, r19
    5d90:	44 1f       	adc	r20, r20
    5d92:	aa 1f       	adc	r26, r26
    5d94:	a9 f3       	breq	.-22     	; 0x5d80 <__divsf3_pse+0x10>
    5d96:	33 d0       	rcall	.+102    	; 0x5dfe <__divsf3_pse+0x8e>
    5d98:	0e 2e       	mov	r0, r30
    5d9a:	3a f0       	brmi	.+14     	; 0x5daa <__divsf3_pse+0x3a>
    5d9c:	e0 e8       	ldi	r30, 0x80	; 128
    5d9e:	30 d0       	rcall	.+96     	; 0x5e00 <__divsf3_pse+0x90>
    5da0:	91 50       	subi	r25, 0x01	; 1
    5da2:	50 40       	sbci	r21, 0x00	; 0
    5da4:	e6 95       	lsr	r30
    5da6:	00 1c       	adc	r0, r0
    5da8:	ca f7       	brpl	.-14     	; 0x5d9c <__divsf3_pse+0x2c>
    5daa:	29 d0       	rcall	.+82     	; 0x5dfe <__divsf3_pse+0x8e>
    5dac:	fe 2f       	mov	r31, r30
    5dae:	27 d0       	rcall	.+78     	; 0x5dfe <__divsf3_pse+0x8e>
    5db0:	66 0f       	add	r22, r22
    5db2:	77 1f       	adc	r23, r23
    5db4:	88 1f       	adc	r24, r24
    5db6:	bb 1f       	adc	r27, r27
    5db8:	26 17       	cp	r18, r22
    5dba:	37 07       	cpc	r19, r23
    5dbc:	48 07       	cpc	r20, r24
    5dbe:	ab 07       	cpc	r26, r27
    5dc0:	b0 e8       	ldi	r27, 0x80	; 128
    5dc2:	09 f0       	breq	.+2      	; 0x5dc6 <__divsf3_pse+0x56>
    5dc4:	bb 0b       	sbc	r27, r27
    5dc6:	80 2d       	mov	r24, r0
    5dc8:	bf 01       	movw	r22, r30
    5dca:	ff 27       	eor	r31, r31
    5dcc:	93 58       	subi	r25, 0x83	; 131
    5dce:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd0:	2a f0       	brmi	.+10     	; 0x5ddc <__divsf3_pse+0x6c>
    5dd2:	9e 3f       	cpi	r25, 0xFE	; 254
    5dd4:	51 05       	cpc	r21, r1
    5dd6:	68 f0       	brcs	.+26     	; 0x5df2 <__divsf3_pse+0x82>
    5dd8:	92 c0       	rjmp	.+292    	; 0x5efe <__fp_inf>
    5dda:	dc c0       	rjmp	.+440    	; 0x5f94 <__fp_szero>
    5ddc:	5f 3f       	cpi	r21, 0xFF	; 255
    5dde:	ec f3       	brlt	.-6      	; 0x5dda <__divsf3_pse+0x6a>
    5de0:	98 3e       	cpi	r25, 0xE8	; 232
    5de2:	dc f3       	brlt	.-10     	; 0x5dda <__divsf3_pse+0x6a>
    5de4:	86 95       	lsr	r24
    5de6:	77 95       	ror	r23
    5de8:	67 95       	ror	r22
    5dea:	b7 95       	ror	r27
    5dec:	f7 95       	ror	r31
    5dee:	9f 5f       	subi	r25, 0xFF	; 255
    5df0:	c9 f7       	brne	.-14     	; 0x5de4 <__divsf3_pse+0x74>
    5df2:	88 0f       	add	r24, r24
    5df4:	91 1d       	adc	r25, r1
    5df6:	96 95       	lsr	r25
    5df8:	87 95       	ror	r24
    5dfa:	97 f9       	bld	r25, 7
    5dfc:	08 95       	ret
    5dfe:	e1 e0       	ldi	r30, 0x01	; 1
    5e00:	66 0f       	add	r22, r22
    5e02:	77 1f       	adc	r23, r23
    5e04:	88 1f       	adc	r24, r24
    5e06:	bb 1f       	adc	r27, r27
    5e08:	62 17       	cp	r22, r18
    5e0a:	73 07       	cpc	r23, r19
    5e0c:	84 07       	cpc	r24, r20
    5e0e:	ba 07       	cpc	r27, r26
    5e10:	20 f0       	brcs	.+8      	; 0x5e1a <__divsf3_pse+0xaa>
    5e12:	62 1b       	sub	r22, r18
    5e14:	73 0b       	sbc	r23, r19
    5e16:	84 0b       	sbc	r24, r20
    5e18:	ba 0b       	sbc	r27, r26
    5e1a:	ee 1f       	adc	r30, r30
    5e1c:	88 f7       	brcc	.-30     	; 0x5e00 <__divsf3_pse+0x90>
    5e1e:	e0 95       	com	r30
    5e20:	08 95       	ret

00005e22 <__fixsfsi>:
    5e22:	04 d0       	rcall	.+8      	; 0x5e2c <__fixunssfsi>
    5e24:	68 94       	set
    5e26:	b1 11       	cpse	r27, r1
    5e28:	b5 c0       	rjmp	.+362    	; 0x5f94 <__fp_szero>
    5e2a:	08 95       	ret

00005e2c <__fixunssfsi>:
    5e2c:	98 d0       	rcall	.+304    	; 0x5f5e <__fp_splitA>
    5e2e:	88 f0       	brcs	.+34     	; 0x5e52 <__fixunssfsi+0x26>
    5e30:	9f 57       	subi	r25, 0x7F	; 127
    5e32:	90 f0       	brcs	.+36     	; 0x5e58 <__fixunssfsi+0x2c>
    5e34:	b9 2f       	mov	r27, r25
    5e36:	99 27       	eor	r25, r25
    5e38:	b7 51       	subi	r27, 0x17	; 23
    5e3a:	a0 f0       	brcs	.+40     	; 0x5e64 <__fixunssfsi+0x38>
    5e3c:	d1 f0       	breq	.+52     	; 0x5e72 <__fixunssfsi+0x46>
    5e3e:	66 0f       	add	r22, r22
    5e40:	77 1f       	adc	r23, r23
    5e42:	88 1f       	adc	r24, r24
    5e44:	99 1f       	adc	r25, r25
    5e46:	1a f0       	brmi	.+6      	; 0x5e4e <__fixunssfsi+0x22>
    5e48:	ba 95       	dec	r27
    5e4a:	c9 f7       	brne	.-14     	; 0x5e3e <__fixunssfsi+0x12>
    5e4c:	12 c0       	rjmp	.+36     	; 0x5e72 <__fixunssfsi+0x46>
    5e4e:	b1 30       	cpi	r27, 0x01	; 1
    5e50:	81 f0       	breq	.+32     	; 0x5e72 <__fixunssfsi+0x46>
    5e52:	9f d0       	rcall	.+318    	; 0x5f92 <__fp_zero>
    5e54:	b1 e0       	ldi	r27, 0x01	; 1
    5e56:	08 95       	ret
    5e58:	9c c0       	rjmp	.+312    	; 0x5f92 <__fp_zero>
    5e5a:	67 2f       	mov	r22, r23
    5e5c:	78 2f       	mov	r23, r24
    5e5e:	88 27       	eor	r24, r24
    5e60:	b8 5f       	subi	r27, 0xF8	; 248
    5e62:	39 f0       	breq	.+14     	; 0x5e72 <__fixunssfsi+0x46>
    5e64:	b9 3f       	cpi	r27, 0xF9	; 249
    5e66:	cc f3       	brlt	.-14     	; 0x5e5a <__fixunssfsi+0x2e>
    5e68:	86 95       	lsr	r24
    5e6a:	77 95       	ror	r23
    5e6c:	67 95       	ror	r22
    5e6e:	b3 95       	inc	r27
    5e70:	d9 f7       	brne	.-10     	; 0x5e68 <__fixunssfsi+0x3c>
    5e72:	3e f4       	brtc	.+14     	; 0x5e82 <__fixunssfsi+0x56>
    5e74:	90 95       	com	r25
    5e76:	80 95       	com	r24
    5e78:	70 95       	com	r23
    5e7a:	61 95       	neg	r22
    5e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    5e80:	9f 4f       	sbci	r25, 0xFF	; 255
    5e82:	08 95       	ret

00005e84 <__floatunsisf>:
    5e84:	e8 94       	clt
    5e86:	09 c0       	rjmp	.+18     	; 0x5e9a <__floatsisf+0x12>

00005e88 <__floatsisf>:
    5e88:	97 fb       	bst	r25, 7
    5e8a:	3e f4       	brtc	.+14     	; 0x5e9a <__floatsisf+0x12>
    5e8c:	90 95       	com	r25
    5e8e:	80 95       	com	r24
    5e90:	70 95       	com	r23
    5e92:	61 95       	neg	r22
    5e94:	7f 4f       	sbci	r23, 0xFF	; 255
    5e96:	8f 4f       	sbci	r24, 0xFF	; 255
    5e98:	9f 4f       	sbci	r25, 0xFF	; 255
    5e9a:	99 23       	and	r25, r25
    5e9c:	a9 f0       	breq	.+42     	; 0x5ec8 <__floatsisf+0x40>
    5e9e:	f9 2f       	mov	r31, r25
    5ea0:	96 e9       	ldi	r25, 0x96	; 150
    5ea2:	bb 27       	eor	r27, r27
    5ea4:	93 95       	inc	r25
    5ea6:	f6 95       	lsr	r31
    5ea8:	87 95       	ror	r24
    5eaa:	77 95       	ror	r23
    5eac:	67 95       	ror	r22
    5eae:	b7 95       	ror	r27
    5eb0:	f1 11       	cpse	r31, r1
    5eb2:	f8 cf       	rjmp	.-16     	; 0x5ea4 <__floatsisf+0x1c>
    5eb4:	fa f4       	brpl	.+62     	; 0x5ef4 <__floatsisf+0x6c>
    5eb6:	bb 0f       	add	r27, r27
    5eb8:	11 f4       	brne	.+4      	; 0x5ebe <__floatsisf+0x36>
    5eba:	60 ff       	sbrs	r22, 0
    5ebc:	1b c0       	rjmp	.+54     	; 0x5ef4 <__floatsisf+0x6c>
    5ebe:	6f 5f       	subi	r22, 0xFF	; 255
    5ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ec2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ec6:	16 c0       	rjmp	.+44     	; 0x5ef4 <__floatsisf+0x6c>
    5ec8:	88 23       	and	r24, r24
    5eca:	11 f0       	breq	.+4      	; 0x5ed0 <__floatsisf+0x48>
    5ecc:	96 e9       	ldi	r25, 0x96	; 150
    5ece:	11 c0       	rjmp	.+34     	; 0x5ef2 <__floatsisf+0x6a>
    5ed0:	77 23       	and	r23, r23
    5ed2:	21 f0       	breq	.+8      	; 0x5edc <__floatsisf+0x54>
    5ed4:	9e e8       	ldi	r25, 0x8E	; 142
    5ed6:	87 2f       	mov	r24, r23
    5ed8:	76 2f       	mov	r23, r22
    5eda:	05 c0       	rjmp	.+10     	; 0x5ee6 <__floatsisf+0x5e>
    5edc:	66 23       	and	r22, r22
    5ede:	71 f0       	breq	.+28     	; 0x5efc <__floatsisf+0x74>
    5ee0:	96 e8       	ldi	r25, 0x86	; 134
    5ee2:	86 2f       	mov	r24, r22
    5ee4:	70 e0       	ldi	r23, 0x00	; 0
    5ee6:	60 e0       	ldi	r22, 0x00	; 0
    5ee8:	2a f0       	brmi	.+10     	; 0x5ef4 <__floatsisf+0x6c>
    5eea:	9a 95       	dec	r25
    5eec:	66 0f       	add	r22, r22
    5eee:	77 1f       	adc	r23, r23
    5ef0:	88 1f       	adc	r24, r24
    5ef2:	da f7       	brpl	.-10     	; 0x5eea <__floatsisf+0x62>
    5ef4:	88 0f       	add	r24, r24
    5ef6:	96 95       	lsr	r25
    5ef8:	87 95       	ror	r24
    5efa:	97 f9       	bld	r25, 7
    5efc:	08 95       	ret

00005efe <__fp_inf>:
    5efe:	97 f9       	bld	r25, 7
    5f00:	9f 67       	ori	r25, 0x7F	; 127
    5f02:	80 e8       	ldi	r24, 0x80	; 128
    5f04:	70 e0       	ldi	r23, 0x00	; 0
    5f06:	60 e0       	ldi	r22, 0x00	; 0
    5f08:	08 95       	ret

00005f0a <__fp_nan>:
    5f0a:	9f ef       	ldi	r25, 0xFF	; 255
    5f0c:	80 ec       	ldi	r24, 0xC0	; 192
    5f0e:	08 95       	ret

00005f10 <__fp_pscA>:
    5f10:	00 24       	eor	r0, r0
    5f12:	0a 94       	dec	r0
    5f14:	16 16       	cp	r1, r22
    5f16:	17 06       	cpc	r1, r23
    5f18:	18 06       	cpc	r1, r24
    5f1a:	09 06       	cpc	r0, r25
    5f1c:	08 95       	ret

00005f1e <__fp_pscB>:
    5f1e:	00 24       	eor	r0, r0
    5f20:	0a 94       	dec	r0
    5f22:	12 16       	cp	r1, r18
    5f24:	13 06       	cpc	r1, r19
    5f26:	14 06       	cpc	r1, r20
    5f28:	05 06       	cpc	r0, r21
    5f2a:	08 95       	ret

00005f2c <__fp_round>:
    5f2c:	09 2e       	mov	r0, r25
    5f2e:	03 94       	inc	r0
    5f30:	00 0c       	add	r0, r0
    5f32:	11 f4       	brne	.+4      	; 0x5f38 <__fp_round+0xc>
    5f34:	88 23       	and	r24, r24
    5f36:	52 f0       	brmi	.+20     	; 0x5f4c <__fp_round+0x20>
    5f38:	bb 0f       	add	r27, r27
    5f3a:	40 f4       	brcc	.+16     	; 0x5f4c <__fp_round+0x20>
    5f3c:	bf 2b       	or	r27, r31
    5f3e:	11 f4       	brne	.+4      	; 0x5f44 <__fp_round+0x18>
    5f40:	60 ff       	sbrs	r22, 0
    5f42:	04 c0       	rjmp	.+8      	; 0x5f4c <__fp_round+0x20>
    5f44:	6f 5f       	subi	r22, 0xFF	; 255
    5f46:	7f 4f       	sbci	r23, 0xFF	; 255
    5f48:	8f 4f       	sbci	r24, 0xFF	; 255
    5f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f4c:	08 95       	ret

00005f4e <__fp_split3>:
    5f4e:	57 fd       	sbrc	r21, 7
    5f50:	90 58       	subi	r25, 0x80	; 128
    5f52:	44 0f       	add	r20, r20
    5f54:	55 1f       	adc	r21, r21
    5f56:	59 f0       	breq	.+22     	; 0x5f6e <__fp_splitA+0x10>
    5f58:	5f 3f       	cpi	r21, 0xFF	; 255
    5f5a:	71 f0       	breq	.+28     	; 0x5f78 <__fp_splitA+0x1a>
    5f5c:	47 95       	ror	r20

00005f5e <__fp_splitA>:
    5f5e:	88 0f       	add	r24, r24
    5f60:	97 fb       	bst	r25, 7
    5f62:	99 1f       	adc	r25, r25
    5f64:	61 f0       	breq	.+24     	; 0x5f7e <__fp_splitA+0x20>
    5f66:	9f 3f       	cpi	r25, 0xFF	; 255
    5f68:	79 f0       	breq	.+30     	; 0x5f88 <__fp_splitA+0x2a>
    5f6a:	87 95       	ror	r24
    5f6c:	08 95       	ret
    5f6e:	12 16       	cp	r1, r18
    5f70:	13 06       	cpc	r1, r19
    5f72:	14 06       	cpc	r1, r20
    5f74:	55 1f       	adc	r21, r21
    5f76:	f2 cf       	rjmp	.-28     	; 0x5f5c <__fp_split3+0xe>
    5f78:	46 95       	lsr	r20
    5f7a:	f1 df       	rcall	.-30     	; 0x5f5e <__fp_splitA>
    5f7c:	08 c0       	rjmp	.+16     	; 0x5f8e <__fp_splitA+0x30>
    5f7e:	16 16       	cp	r1, r22
    5f80:	17 06       	cpc	r1, r23
    5f82:	18 06       	cpc	r1, r24
    5f84:	99 1f       	adc	r25, r25
    5f86:	f1 cf       	rjmp	.-30     	; 0x5f6a <__fp_splitA+0xc>
    5f88:	86 95       	lsr	r24
    5f8a:	71 05       	cpc	r23, r1
    5f8c:	61 05       	cpc	r22, r1
    5f8e:	08 94       	sec
    5f90:	08 95       	ret

00005f92 <__fp_zero>:
    5f92:	e8 94       	clt

00005f94 <__fp_szero>:
    5f94:	bb 27       	eor	r27, r27
    5f96:	66 27       	eor	r22, r22
    5f98:	77 27       	eor	r23, r23
    5f9a:	cb 01       	movw	r24, r22
    5f9c:	97 f9       	bld	r25, 7
    5f9e:	08 95       	ret

00005fa0 <__mulsf3>:
    5fa0:	0b d0       	rcall	.+22     	; 0x5fb8 <__mulsf3x>
    5fa2:	c4 cf       	rjmp	.-120    	; 0x5f2c <__fp_round>
    5fa4:	b5 df       	rcall	.-150    	; 0x5f10 <__fp_pscA>
    5fa6:	28 f0       	brcs	.+10     	; 0x5fb2 <__mulsf3+0x12>
    5fa8:	ba df       	rcall	.-140    	; 0x5f1e <__fp_pscB>
    5faa:	18 f0       	brcs	.+6      	; 0x5fb2 <__mulsf3+0x12>
    5fac:	95 23       	and	r25, r21
    5fae:	09 f0       	breq	.+2      	; 0x5fb2 <__mulsf3+0x12>
    5fb0:	a6 cf       	rjmp	.-180    	; 0x5efe <__fp_inf>
    5fb2:	ab cf       	rjmp	.-170    	; 0x5f0a <__fp_nan>
    5fb4:	11 24       	eor	r1, r1
    5fb6:	ee cf       	rjmp	.-36     	; 0x5f94 <__fp_szero>

00005fb8 <__mulsf3x>:
    5fb8:	ca df       	rcall	.-108    	; 0x5f4e <__fp_split3>
    5fba:	a0 f3       	brcs	.-24     	; 0x5fa4 <__mulsf3+0x4>

00005fbc <__mulsf3_pse>:
    5fbc:	95 9f       	mul	r25, r21
    5fbe:	d1 f3       	breq	.-12     	; 0x5fb4 <__mulsf3+0x14>
    5fc0:	95 0f       	add	r25, r21
    5fc2:	50 e0       	ldi	r21, 0x00	; 0
    5fc4:	55 1f       	adc	r21, r21
    5fc6:	62 9f       	mul	r22, r18
    5fc8:	f0 01       	movw	r30, r0
    5fca:	72 9f       	mul	r23, r18
    5fcc:	bb 27       	eor	r27, r27
    5fce:	f0 0d       	add	r31, r0
    5fd0:	b1 1d       	adc	r27, r1
    5fd2:	63 9f       	mul	r22, r19
    5fd4:	aa 27       	eor	r26, r26
    5fd6:	f0 0d       	add	r31, r0
    5fd8:	b1 1d       	adc	r27, r1
    5fda:	aa 1f       	adc	r26, r26
    5fdc:	64 9f       	mul	r22, r20
    5fde:	66 27       	eor	r22, r22
    5fe0:	b0 0d       	add	r27, r0
    5fe2:	a1 1d       	adc	r26, r1
    5fe4:	66 1f       	adc	r22, r22
    5fe6:	82 9f       	mul	r24, r18
    5fe8:	22 27       	eor	r18, r18
    5fea:	b0 0d       	add	r27, r0
    5fec:	a1 1d       	adc	r26, r1
    5fee:	62 1f       	adc	r22, r18
    5ff0:	73 9f       	mul	r23, r19
    5ff2:	b0 0d       	add	r27, r0
    5ff4:	a1 1d       	adc	r26, r1
    5ff6:	62 1f       	adc	r22, r18
    5ff8:	83 9f       	mul	r24, r19
    5ffa:	a0 0d       	add	r26, r0
    5ffc:	61 1d       	adc	r22, r1
    5ffe:	22 1f       	adc	r18, r18
    6000:	74 9f       	mul	r23, r20
    6002:	33 27       	eor	r19, r19
    6004:	a0 0d       	add	r26, r0
    6006:	61 1d       	adc	r22, r1
    6008:	23 1f       	adc	r18, r19
    600a:	84 9f       	mul	r24, r20
    600c:	60 0d       	add	r22, r0
    600e:	21 1d       	adc	r18, r1
    6010:	82 2f       	mov	r24, r18
    6012:	76 2f       	mov	r23, r22
    6014:	6a 2f       	mov	r22, r26
    6016:	11 24       	eor	r1, r1
    6018:	9f 57       	subi	r25, 0x7F	; 127
    601a:	50 40       	sbci	r21, 0x00	; 0
    601c:	8a f0       	brmi	.+34     	; 0x6040 <__mulsf3_pse+0x84>
    601e:	e1 f0       	breq	.+56     	; 0x6058 <__mulsf3_pse+0x9c>
    6020:	88 23       	and	r24, r24
    6022:	4a f0       	brmi	.+18     	; 0x6036 <__mulsf3_pse+0x7a>
    6024:	ee 0f       	add	r30, r30
    6026:	ff 1f       	adc	r31, r31
    6028:	bb 1f       	adc	r27, r27
    602a:	66 1f       	adc	r22, r22
    602c:	77 1f       	adc	r23, r23
    602e:	88 1f       	adc	r24, r24
    6030:	91 50       	subi	r25, 0x01	; 1
    6032:	50 40       	sbci	r21, 0x00	; 0
    6034:	a9 f7       	brne	.-22     	; 0x6020 <__mulsf3_pse+0x64>
    6036:	9e 3f       	cpi	r25, 0xFE	; 254
    6038:	51 05       	cpc	r21, r1
    603a:	70 f0       	brcs	.+28     	; 0x6058 <__mulsf3_pse+0x9c>
    603c:	60 cf       	rjmp	.-320    	; 0x5efe <__fp_inf>
    603e:	aa cf       	rjmp	.-172    	; 0x5f94 <__fp_szero>
    6040:	5f 3f       	cpi	r21, 0xFF	; 255
    6042:	ec f3       	brlt	.-6      	; 0x603e <__mulsf3_pse+0x82>
    6044:	98 3e       	cpi	r25, 0xE8	; 232
    6046:	dc f3       	brlt	.-10     	; 0x603e <__mulsf3_pse+0x82>
    6048:	86 95       	lsr	r24
    604a:	77 95       	ror	r23
    604c:	67 95       	ror	r22
    604e:	b7 95       	ror	r27
    6050:	f7 95       	ror	r31
    6052:	e7 95       	ror	r30
    6054:	9f 5f       	subi	r25, 0xFF	; 255
    6056:	c1 f7       	brne	.-16     	; 0x6048 <__mulsf3_pse+0x8c>
    6058:	fe 2b       	or	r31, r30
    605a:	88 0f       	add	r24, r24
    605c:	91 1d       	adc	r25, r1
    605e:	96 95       	lsr	r25
    6060:	87 95       	ror	r24
    6062:	97 f9       	bld	r25, 7
    6064:	08 95       	ret

00006066 <__udivmodsi4>:
    6066:	a1 e2       	ldi	r26, 0x21	; 33
    6068:	1a 2e       	mov	r1, r26
    606a:	aa 1b       	sub	r26, r26
    606c:	bb 1b       	sub	r27, r27
    606e:	fd 01       	movw	r30, r26
    6070:	0d c0       	rjmp	.+26     	; 0x608c <__udivmodsi4_ep>

00006072 <__udivmodsi4_loop>:
    6072:	aa 1f       	adc	r26, r26
    6074:	bb 1f       	adc	r27, r27
    6076:	ee 1f       	adc	r30, r30
    6078:	ff 1f       	adc	r31, r31
    607a:	a2 17       	cp	r26, r18
    607c:	b3 07       	cpc	r27, r19
    607e:	e4 07       	cpc	r30, r20
    6080:	f5 07       	cpc	r31, r21
    6082:	20 f0       	brcs	.+8      	; 0x608c <__udivmodsi4_ep>
    6084:	a2 1b       	sub	r26, r18
    6086:	b3 0b       	sbc	r27, r19
    6088:	e4 0b       	sbc	r30, r20
    608a:	f5 0b       	sbc	r31, r21

0000608c <__udivmodsi4_ep>:
    608c:	66 1f       	adc	r22, r22
    608e:	77 1f       	adc	r23, r23
    6090:	88 1f       	adc	r24, r24
    6092:	99 1f       	adc	r25, r25
    6094:	1a 94       	dec	r1
    6096:	69 f7       	brne	.-38     	; 0x6072 <__udivmodsi4_loop>
    6098:	60 95       	com	r22
    609a:	70 95       	com	r23
    609c:	80 95       	com	r24
    609e:	90 95       	com	r25
    60a0:	9b 01       	movw	r18, r22
    60a2:	ac 01       	movw	r20, r24
    60a4:	bd 01       	movw	r22, r26
    60a6:	cf 01       	movw	r24, r30
    60a8:	08 95       	ret

000060aa <__tablejump2__>:
    60aa:	ee 0f       	add	r30, r30
    60ac:	ff 1f       	adc	r31, r31
    60ae:	88 1f       	adc	r24, r24
    60b0:	8b bf       	out	0x3b, r24	; 59
    60b2:	07 90       	elpm	r0, Z+
    60b4:	f6 91       	elpm	r31, Z
    60b6:	e0 2d       	mov	r30, r0
    60b8:	19 94       	eijmp

000060ba <malloc>:
    60ba:	0f 93       	push	r16
    60bc:	1f 93       	push	r17
    60be:	cf 93       	push	r28
    60c0:	df 93       	push	r29
    60c2:	82 30       	cpi	r24, 0x02	; 2
    60c4:	91 05       	cpc	r25, r1
    60c6:	10 f4       	brcc	.+4      	; 0x60cc <malloc+0x12>
    60c8:	82 e0       	ldi	r24, 0x02	; 2
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	e0 91 ed 17 	lds	r30, 0x17ED	; 0x8017ed <__flp>
    60d0:	f0 91 ee 17 	lds	r31, 0x17EE	; 0x8017ee <__flp+0x1>
    60d4:	20 e0       	ldi	r18, 0x00	; 0
    60d6:	30 e0       	ldi	r19, 0x00	; 0
    60d8:	a0 e0       	ldi	r26, 0x00	; 0
    60da:	b0 e0       	ldi	r27, 0x00	; 0
    60dc:	30 97       	sbiw	r30, 0x00	; 0
    60de:	19 f1       	breq	.+70     	; 0x6126 <malloc+0x6c>
    60e0:	40 81       	ld	r20, Z
    60e2:	51 81       	ldd	r21, Z+1	; 0x01
    60e4:	02 81       	ldd	r16, Z+2	; 0x02
    60e6:	13 81       	ldd	r17, Z+3	; 0x03
    60e8:	48 17       	cp	r20, r24
    60ea:	59 07       	cpc	r21, r25
    60ec:	c8 f0       	brcs	.+50     	; 0x6120 <malloc+0x66>
    60ee:	84 17       	cp	r24, r20
    60f0:	95 07       	cpc	r25, r21
    60f2:	69 f4       	brne	.+26     	; 0x610e <malloc+0x54>
    60f4:	10 97       	sbiw	r26, 0x00	; 0
    60f6:	31 f0       	breq	.+12     	; 0x6104 <malloc+0x4a>
    60f8:	12 96       	adiw	r26, 0x02	; 2
    60fa:	0c 93       	st	X, r16
    60fc:	12 97       	sbiw	r26, 0x02	; 2
    60fe:	13 96       	adiw	r26, 0x03	; 3
    6100:	1c 93       	st	X, r17
    6102:	27 c0       	rjmp	.+78     	; 0x6152 <malloc+0x98>
    6104:	00 93 ed 17 	sts	0x17ED, r16	; 0x8017ed <__flp>
    6108:	10 93 ee 17 	sts	0x17EE, r17	; 0x8017ee <__flp+0x1>
    610c:	22 c0       	rjmp	.+68     	; 0x6152 <malloc+0x98>
    610e:	21 15       	cp	r18, r1
    6110:	31 05       	cpc	r19, r1
    6112:	19 f0       	breq	.+6      	; 0x611a <malloc+0x60>
    6114:	42 17       	cp	r20, r18
    6116:	53 07       	cpc	r21, r19
    6118:	18 f4       	brcc	.+6      	; 0x6120 <malloc+0x66>
    611a:	9a 01       	movw	r18, r20
    611c:	bd 01       	movw	r22, r26
    611e:	ef 01       	movw	r28, r30
    6120:	df 01       	movw	r26, r30
    6122:	f8 01       	movw	r30, r16
    6124:	db cf       	rjmp	.-74     	; 0x60dc <malloc+0x22>
    6126:	21 15       	cp	r18, r1
    6128:	31 05       	cpc	r19, r1
    612a:	f9 f0       	breq	.+62     	; 0x616a <malloc+0xb0>
    612c:	28 1b       	sub	r18, r24
    612e:	39 0b       	sbc	r19, r25
    6130:	24 30       	cpi	r18, 0x04	; 4
    6132:	31 05       	cpc	r19, r1
    6134:	80 f4       	brcc	.+32     	; 0x6156 <malloc+0x9c>
    6136:	8a 81       	ldd	r24, Y+2	; 0x02
    6138:	9b 81       	ldd	r25, Y+3	; 0x03
    613a:	61 15       	cp	r22, r1
    613c:	71 05       	cpc	r23, r1
    613e:	21 f0       	breq	.+8      	; 0x6148 <malloc+0x8e>
    6140:	fb 01       	movw	r30, r22
    6142:	93 83       	std	Z+3, r25	; 0x03
    6144:	82 83       	std	Z+2, r24	; 0x02
    6146:	04 c0       	rjmp	.+8      	; 0x6150 <malloc+0x96>
    6148:	90 93 ee 17 	sts	0x17EE, r25	; 0x8017ee <__flp+0x1>
    614c:	80 93 ed 17 	sts	0x17ED, r24	; 0x8017ed <__flp>
    6150:	fe 01       	movw	r30, r28
    6152:	32 96       	adiw	r30, 0x02	; 2
    6154:	44 c0       	rjmp	.+136    	; 0x61de <malloc+0x124>
    6156:	fe 01       	movw	r30, r28
    6158:	e2 0f       	add	r30, r18
    615a:	f3 1f       	adc	r31, r19
    615c:	81 93       	st	Z+, r24
    615e:	91 93       	st	Z+, r25
    6160:	22 50       	subi	r18, 0x02	; 2
    6162:	31 09       	sbc	r19, r1
    6164:	39 83       	std	Y+1, r19	; 0x01
    6166:	28 83       	st	Y, r18
    6168:	3a c0       	rjmp	.+116    	; 0x61de <malloc+0x124>
    616a:	20 91 eb 17 	lds	r18, 0x17EB	; 0x8017eb <__brkval>
    616e:	30 91 ec 17 	lds	r19, 0x17EC	; 0x8017ec <__brkval+0x1>
    6172:	23 2b       	or	r18, r19
    6174:	41 f4       	brne	.+16     	; 0x6186 <malloc+0xcc>
    6176:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    617a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    617e:	30 93 ec 17 	sts	0x17EC, r19	; 0x8017ec <__brkval+0x1>
    6182:	20 93 eb 17 	sts	0x17EB, r18	; 0x8017eb <__brkval>
    6186:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    618a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    618e:	21 15       	cp	r18, r1
    6190:	31 05       	cpc	r19, r1
    6192:	41 f4       	brne	.+16     	; 0x61a4 <malloc+0xea>
    6194:	2d b7       	in	r18, 0x3d	; 61
    6196:	3e b7       	in	r19, 0x3e	; 62
    6198:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    619c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    61a0:	24 1b       	sub	r18, r20
    61a2:	35 0b       	sbc	r19, r21
    61a4:	e0 91 eb 17 	lds	r30, 0x17EB	; 0x8017eb <__brkval>
    61a8:	f0 91 ec 17 	lds	r31, 0x17EC	; 0x8017ec <__brkval+0x1>
    61ac:	e2 17       	cp	r30, r18
    61ae:	f3 07       	cpc	r31, r19
    61b0:	a0 f4       	brcc	.+40     	; 0x61da <malloc+0x120>
    61b2:	2e 1b       	sub	r18, r30
    61b4:	3f 0b       	sbc	r19, r31
    61b6:	28 17       	cp	r18, r24
    61b8:	39 07       	cpc	r19, r25
    61ba:	78 f0       	brcs	.+30     	; 0x61da <malloc+0x120>
    61bc:	ac 01       	movw	r20, r24
    61be:	4e 5f       	subi	r20, 0xFE	; 254
    61c0:	5f 4f       	sbci	r21, 0xFF	; 255
    61c2:	24 17       	cp	r18, r20
    61c4:	35 07       	cpc	r19, r21
    61c6:	48 f0       	brcs	.+18     	; 0x61da <malloc+0x120>
    61c8:	4e 0f       	add	r20, r30
    61ca:	5f 1f       	adc	r21, r31
    61cc:	50 93 ec 17 	sts	0x17EC, r21	; 0x8017ec <__brkval+0x1>
    61d0:	40 93 eb 17 	sts	0x17EB, r20	; 0x8017eb <__brkval>
    61d4:	81 93       	st	Z+, r24
    61d6:	91 93       	st	Z+, r25
    61d8:	02 c0       	rjmp	.+4      	; 0x61de <malloc+0x124>
    61da:	e0 e0       	ldi	r30, 0x00	; 0
    61dc:	f0 e0       	ldi	r31, 0x00	; 0
    61de:	cf 01       	movw	r24, r30
    61e0:	df 91       	pop	r29
    61e2:	cf 91       	pop	r28
    61e4:	1f 91       	pop	r17
    61e6:	0f 91       	pop	r16
    61e8:	08 95       	ret

000061ea <free>:
    61ea:	cf 93       	push	r28
    61ec:	df 93       	push	r29
    61ee:	00 97       	sbiw	r24, 0x00	; 0
    61f0:	09 f4       	brne	.+2      	; 0x61f4 <free+0xa>
    61f2:	81 c0       	rjmp	.+258    	; 0x62f6 <free+0x10c>
    61f4:	fc 01       	movw	r30, r24
    61f6:	32 97       	sbiw	r30, 0x02	; 2
    61f8:	13 82       	std	Z+3, r1	; 0x03
    61fa:	12 82       	std	Z+2, r1	; 0x02
    61fc:	a0 91 ed 17 	lds	r26, 0x17ED	; 0x8017ed <__flp>
    6200:	b0 91 ee 17 	lds	r27, 0x17EE	; 0x8017ee <__flp+0x1>
    6204:	10 97       	sbiw	r26, 0x00	; 0
    6206:	81 f4       	brne	.+32     	; 0x6228 <free+0x3e>
    6208:	20 81       	ld	r18, Z
    620a:	31 81       	ldd	r19, Z+1	; 0x01
    620c:	82 0f       	add	r24, r18
    620e:	93 1f       	adc	r25, r19
    6210:	20 91 eb 17 	lds	r18, 0x17EB	; 0x8017eb <__brkval>
    6214:	30 91 ec 17 	lds	r19, 0x17EC	; 0x8017ec <__brkval+0x1>
    6218:	28 17       	cp	r18, r24
    621a:	39 07       	cpc	r19, r25
    621c:	51 f5       	brne	.+84     	; 0x6272 <free+0x88>
    621e:	f0 93 ec 17 	sts	0x17EC, r31	; 0x8017ec <__brkval+0x1>
    6222:	e0 93 eb 17 	sts	0x17EB, r30	; 0x8017eb <__brkval>
    6226:	67 c0       	rjmp	.+206    	; 0x62f6 <free+0x10c>
    6228:	ed 01       	movw	r28, r26
    622a:	20 e0       	ldi	r18, 0x00	; 0
    622c:	30 e0       	ldi	r19, 0x00	; 0
    622e:	ce 17       	cp	r28, r30
    6230:	df 07       	cpc	r29, r31
    6232:	40 f4       	brcc	.+16     	; 0x6244 <free+0x5a>
    6234:	4a 81       	ldd	r20, Y+2	; 0x02
    6236:	5b 81       	ldd	r21, Y+3	; 0x03
    6238:	9e 01       	movw	r18, r28
    623a:	41 15       	cp	r20, r1
    623c:	51 05       	cpc	r21, r1
    623e:	f1 f0       	breq	.+60     	; 0x627c <free+0x92>
    6240:	ea 01       	movw	r28, r20
    6242:	f5 cf       	rjmp	.-22     	; 0x622e <free+0x44>
    6244:	d3 83       	std	Z+3, r29	; 0x03
    6246:	c2 83       	std	Z+2, r28	; 0x02
    6248:	40 81       	ld	r20, Z
    624a:	51 81       	ldd	r21, Z+1	; 0x01
    624c:	84 0f       	add	r24, r20
    624e:	95 1f       	adc	r25, r21
    6250:	c8 17       	cp	r28, r24
    6252:	d9 07       	cpc	r29, r25
    6254:	59 f4       	brne	.+22     	; 0x626c <free+0x82>
    6256:	88 81       	ld	r24, Y
    6258:	99 81       	ldd	r25, Y+1	; 0x01
    625a:	84 0f       	add	r24, r20
    625c:	95 1f       	adc	r25, r21
    625e:	02 96       	adiw	r24, 0x02	; 2
    6260:	91 83       	std	Z+1, r25	; 0x01
    6262:	80 83       	st	Z, r24
    6264:	8a 81       	ldd	r24, Y+2	; 0x02
    6266:	9b 81       	ldd	r25, Y+3	; 0x03
    6268:	93 83       	std	Z+3, r25	; 0x03
    626a:	82 83       	std	Z+2, r24	; 0x02
    626c:	21 15       	cp	r18, r1
    626e:	31 05       	cpc	r19, r1
    6270:	29 f4       	brne	.+10     	; 0x627c <free+0x92>
    6272:	f0 93 ee 17 	sts	0x17EE, r31	; 0x8017ee <__flp+0x1>
    6276:	e0 93 ed 17 	sts	0x17ED, r30	; 0x8017ed <__flp>
    627a:	3d c0       	rjmp	.+122    	; 0x62f6 <free+0x10c>
    627c:	e9 01       	movw	r28, r18
    627e:	fb 83       	std	Y+3, r31	; 0x03
    6280:	ea 83       	std	Y+2, r30	; 0x02
    6282:	49 91       	ld	r20, Y+
    6284:	59 91       	ld	r21, Y+
    6286:	c4 0f       	add	r28, r20
    6288:	d5 1f       	adc	r29, r21
    628a:	ec 17       	cp	r30, r28
    628c:	fd 07       	cpc	r31, r29
    628e:	61 f4       	brne	.+24     	; 0x62a8 <free+0xbe>
    6290:	80 81       	ld	r24, Z
    6292:	91 81       	ldd	r25, Z+1	; 0x01
    6294:	84 0f       	add	r24, r20
    6296:	95 1f       	adc	r25, r21
    6298:	02 96       	adiw	r24, 0x02	; 2
    629a:	e9 01       	movw	r28, r18
    629c:	99 83       	std	Y+1, r25	; 0x01
    629e:	88 83       	st	Y, r24
    62a0:	82 81       	ldd	r24, Z+2	; 0x02
    62a2:	93 81       	ldd	r25, Z+3	; 0x03
    62a4:	9b 83       	std	Y+3, r25	; 0x03
    62a6:	8a 83       	std	Y+2, r24	; 0x02
    62a8:	e0 e0       	ldi	r30, 0x00	; 0
    62aa:	f0 e0       	ldi	r31, 0x00	; 0
    62ac:	12 96       	adiw	r26, 0x02	; 2
    62ae:	8d 91       	ld	r24, X+
    62b0:	9c 91       	ld	r25, X
    62b2:	13 97       	sbiw	r26, 0x03	; 3
    62b4:	00 97       	sbiw	r24, 0x00	; 0
    62b6:	19 f0       	breq	.+6      	; 0x62be <free+0xd4>
    62b8:	fd 01       	movw	r30, r26
    62ba:	dc 01       	movw	r26, r24
    62bc:	f7 cf       	rjmp	.-18     	; 0x62ac <free+0xc2>
    62be:	8d 91       	ld	r24, X+
    62c0:	9c 91       	ld	r25, X
    62c2:	11 97       	sbiw	r26, 0x01	; 1
    62c4:	9d 01       	movw	r18, r26
    62c6:	2e 5f       	subi	r18, 0xFE	; 254
    62c8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ca:	82 0f       	add	r24, r18
    62cc:	93 1f       	adc	r25, r19
    62ce:	20 91 eb 17 	lds	r18, 0x17EB	; 0x8017eb <__brkval>
    62d2:	30 91 ec 17 	lds	r19, 0x17EC	; 0x8017ec <__brkval+0x1>
    62d6:	28 17       	cp	r18, r24
    62d8:	39 07       	cpc	r19, r25
    62da:	69 f4       	brne	.+26     	; 0x62f6 <free+0x10c>
    62dc:	30 97       	sbiw	r30, 0x00	; 0
    62de:	29 f4       	brne	.+10     	; 0x62ea <free+0x100>
    62e0:	10 92 ee 17 	sts	0x17EE, r1	; 0x8017ee <__flp+0x1>
    62e4:	10 92 ed 17 	sts	0x17ED, r1	; 0x8017ed <__flp>
    62e8:	02 c0       	rjmp	.+4      	; 0x62ee <free+0x104>
    62ea:	13 82       	std	Z+3, r1	; 0x03
    62ec:	12 82       	std	Z+2, r1	; 0x02
    62ee:	b0 93 ec 17 	sts	0x17EC, r27	; 0x8017ec <__brkval+0x1>
    62f2:	a0 93 eb 17 	sts	0x17EB, r26	; 0x8017eb <__brkval>
    62f6:	df 91       	pop	r29
    62f8:	cf 91       	pop	r28
    62fa:	08 95       	ret

000062fc <abort>:
    62fc:	81 e0       	ldi	r24, 0x01	; 1
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	f8 94       	cli
    6302:	5a c2       	rjmp	.+1204   	; 0x67b8 <_exit>

00006304 <__ftoa_engine>:
    6304:	28 30       	cpi	r18, 0x08	; 8
    6306:	08 f0       	brcs	.+2      	; 0x630a <__ftoa_engine+0x6>
    6308:	27 e0       	ldi	r18, 0x07	; 7
    630a:	33 27       	eor	r19, r19
    630c:	da 01       	movw	r26, r20
    630e:	99 0f       	add	r25, r25
    6310:	31 1d       	adc	r19, r1
    6312:	87 fd       	sbrc	r24, 7
    6314:	91 60       	ori	r25, 0x01	; 1
    6316:	00 96       	adiw	r24, 0x00	; 0
    6318:	61 05       	cpc	r22, r1
    631a:	71 05       	cpc	r23, r1
    631c:	39 f4       	brne	.+14     	; 0x632c <__ftoa_engine+0x28>
    631e:	32 60       	ori	r19, 0x02	; 2
    6320:	2e 5f       	subi	r18, 0xFE	; 254
    6322:	3d 93       	st	X+, r19
    6324:	30 e3       	ldi	r19, 0x30	; 48
    6326:	2a 95       	dec	r18
    6328:	e1 f7       	brne	.-8      	; 0x6322 <__ftoa_engine+0x1e>
    632a:	08 95       	ret
    632c:	9f 3f       	cpi	r25, 0xFF	; 255
    632e:	30 f0       	brcs	.+12     	; 0x633c <__ftoa_engine+0x38>
    6330:	80 38       	cpi	r24, 0x80	; 128
    6332:	71 05       	cpc	r23, r1
    6334:	61 05       	cpc	r22, r1
    6336:	09 f0       	breq	.+2      	; 0x633a <__ftoa_engine+0x36>
    6338:	3c 5f       	subi	r19, 0xFC	; 252
    633a:	3c 5f       	subi	r19, 0xFC	; 252
    633c:	3d 93       	st	X+, r19
    633e:	91 30       	cpi	r25, 0x01	; 1
    6340:	08 f0       	brcs	.+2      	; 0x6344 <__ftoa_engine+0x40>
    6342:	80 68       	ori	r24, 0x80	; 128
    6344:	91 1d       	adc	r25, r1
    6346:	df 93       	push	r29
    6348:	cf 93       	push	r28
    634a:	1f 93       	push	r17
    634c:	0f 93       	push	r16
    634e:	ff 92       	push	r15
    6350:	ef 92       	push	r14
    6352:	19 2f       	mov	r17, r25
    6354:	98 7f       	andi	r25, 0xF8	; 248
    6356:	96 95       	lsr	r25
    6358:	e9 2f       	mov	r30, r25
    635a:	96 95       	lsr	r25
    635c:	96 95       	lsr	r25
    635e:	e9 0f       	add	r30, r25
    6360:	ff 27       	eor	r31, r31
    6362:	e4 50       	subi	r30, 0x04	; 4
    6364:	fe 4f       	sbci	r31, 0xFE	; 254
    6366:	99 27       	eor	r25, r25
    6368:	33 27       	eor	r19, r19
    636a:	ee 24       	eor	r14, r14
    636c:	ff 24       	eor	r15, r15
    636e:	a7 01       	movw	r20, r14
    6370:	e7 01       	movw	r28, r14
    6372:	05 90       	lpm	r0, Z+
    6374:	08 94       	sec
    6376:	07 94       	ror	r0
    6378:	28 f4       	brcc	.+10     	; 0x6384 <__ftoa_engine+0x80>
    637a:	36 0f       	add	r19, r22
    637c:	e7 1e       	adc	r14, r23
    637e:	f8 1e       	adc	r15, r24
    6380:	49 1f       	adc	r20, r25
    6382:	51 1d       	adc	r21, r1
    6384:	66 0f       	add	r22, r22
    6386:	77 1f       	adc	r23, r23
    6388:	88 1f       	adc	r24, r24
    638a:	99 1f       	adc	r25, r25
    638c:	06 94       	lsr	r0
    638e:	a1 f7       	brne	.-24     	; 0x6378 <__ftoa_engine+0x74>
    6390:	05 90       	lpm	r0, Z+
    6392:	07 94       	ror	r0
    6394:	28 f4       	brcc	.+10     	; 0x63a0 <__ftoa_engine+0x9c>
    6396:	e7 0e       	add	r14, r23
    6398:	f8 1e       	adc	r15, r24
    639a:	49 1f       	adc	r20, r25
    639c:	56 1f       	adc	r21, r22
    639e:	c1 1d       	adc	r28, r1
    63a0:	77 0f       	add	r23, r23
    63a2:	88 1f       	adc	r24, r24
    63a4:	99 1f       	adc	r25, r25
    63a6:	66 1f       	adc	r22, r22
    63a8:	06 94       	lsr	r0
    63aa:	a1 f7       	brne	.-24     	; 0x6394 <__ftoa_engine+0x90>
    63ac:	05 90       	lpm	r0, Z+
    63ae:	07 94       	ror	r0
    63b0:	28 f4       	brcc	.+10     	; 0x63bc <__ftoa_engine+0xb8>
    63b2:	f8 0e       	add	r15, r24
    63b4:	49 1f       	adc	r20, r25
    63b6:	56 1f       	adc	r21, r22
    63b8:	c7 1f       	adc	r28, r23
    63ba:	d1 1d       	adc	r29, r1
    63bc:	88 0f       	add	r24, r24
    63be:	99 1f       	adc	r25, r25
    63c0:	66 1f       	adc	r22, r22
    63c2:	77 1f       	adc	r23, r23
    63c4:	06 94       	lsr	r0
    63c6:	a1 f7       	brne	.-24     	; 0x63b0 <__ftoa_engine+0xac>
    63c8:	05 90       	lpm	r0, Z+
    63ca:	07 94       	ror	r0
    63cc:	20 f4       	brcc	.+8      	; 0x63d6 <__ftoa_engine+0xd2>
    63ce:	49 0f       	add	r20, r25
    63d0:	56 1f       	adc	r21, r22
    63d2:	c7 1f       	adc	r28, r23
    63d4:	d8 1f       	adc	r29, r24
    63d6:	99 0f       	add	r25, r25
    63d8:	66 1f       	adc	r22, r22
    63da:	77 1f       	adc	r23, r23
    63dc:	88 1f       	adc	r24, r24
    63de:	06 94       	lsr	r0
    63e0:	a9 f7       	brne	.-22     	; 0x63cc <__ftoa_engine+0xc8>
    63e2:	84 91       	lpm	r24, Z
    63e4:	10 95       	com	r17
    63e6:	17 70       	andi	r17, 0x07	; 7
    63e8:	41 f0       	breq	.+16     	; 0x63fa <__ftoa_engine+0xf6>
    63ea:	d6 95       	lsr	r29
    63ec:	c7 95       	ror	r28
    63ee:	57 95       	ror	r21
    63f0:	47 95       	ror	r20
    63f2:	f7 94       	ror	r15
    63f4:	e7 94       	ror	r14
    63f6:	1a 95       	dec	r17
    63f8:	c1 f7       	brne	.-16     	; 0x63ea <__ftoa_engine+0xe6>
    63fa:	e2 ea       	ldi	r30, 0xA2	; 162
    63fc:	f1 e0       	ldi	r31, 0x01	; 1
    63fe:	68 94       	set
    6400:	15 90       	lpm	r1, Z+
    6402:	15 91       	lpm	r17, Z+
    6404:	35 91       	lpm	r19, Z+
    6406:	65 91       	lpm	r22, Z+
    6408:	95 91       	lpm	r25, Z+
    640a:	05 90       	lpm	r0, Z+
    640c:	7f e2       	ldi	r23, 0x2F	; 47
    640e:	73 95       	inc	r23
    6410:	e1 18       	sub	r14, r1
    6412:	f1 0a       	sbc	r15, r17
    6414:	43 0b       	sbc	r20, r19
    6416:	56 0b       	sbc	r21, r22
    6418:	c9 0b       	sbc	r28, r25
    641a:	d0 09       	sbc	r29, r0
    641c:	c0 f7       	brcc	.-16     	; 0x640e <__ftoa_engine+0x10a>
    641e:	e1 0c       	add	r14, r1
    6420:	f1 1e       	adc	r15, r17
    6422:	43 1f       	adc	r20, r19
    6424:	56 1f       	adc	r21, r22
    6426:	c9 1f       	adc	r28, r25
    6428:	d0 1d       	adc	r29, r0
    642a:	7e f4       	brtc	.+30     	; 0x644a <__ftoa_engine+0x146>
    642c:	70 33       	cpi	r23, 0x30	; 48
    642e:	11 f4       	brne	.+4      	; 0x6434 <__ftoa_engine+0x130>
    6430:	8a 95       	dec	r24
    6432:	e6 cf       	rjmp	.-52     	; 0x6400 <__ftoa_engine+0xfc>
    6434:	e8 94       	clt
    6436:	01 50       	subi	r16, 0x01	; 1
    6438:	30 f0       	brcs	.+12     	; 0x6446 <__ftoa_engine+0x142>
    643a:	08 0f       	add	r16, r24
    643c:	0a f4       	brpl	.+2      	; 0x6440 <__ftoa_engine+0x13c>
    643e:	00 27       	eor	r16, r16
    6440:	02 17       	cp	r16, r18
    6442:	08 f4       	brcc	.+2      	; 0x6446 <__ftoa_engine+0x142>
    6444:	20 2f       	mov	r18, r16
    6446:	23 95       	inc	r18
    6448:	02 2f       	mov	r16, r18
    644a:	7a 33       	cpi	r23, 0x3A	; 58
    644c:	28 f0       	brcs	.+10     	; 0x6458 <__ftoa_engine+0x154>
    644e:	79 e3       	ldi	r23, 0x39	; 57
    6450:	7d 93       	st	X+, r23
    6452:	2a 95       	dec	r18
    6454:	e9 f7       	brne	.-6      	; 0x6450 <__ftoa_engine+0x14c>
    6456:	10 c0       	rjmp	.+32     	; 0x6478 <__ftoa_engine+0x174>
    6458:	7d 93       	st	X+, r23
    645a:	2a 95       	dec	r18
    645c:	89 f6       	brne	.-94     	; 0x6400 <__ftoa_engine+0xfc>
    645e:	06 94       	lsr	r0
    6460:	97 95       	ror	r25
    6462:	67 95       	ror	r22
    6464:	37 95       	ror	r19
    6466:	17 95       	ror	r17
    6468:	17 94       	ror	r1
    646a:	e1 18       	sub	r14, r1
    646c:	f1 0a       	sbc	r15, r17
    646e:	43 0b       	sbc	r20, r19
    6470:	56 0b       	sbc	r21, r22
    6472:	c9 0b       	sbc	r28, r25
    6474:	d0 09       	sbc	r29, r0
    6476:	98 f0       	brcs	.+38     	; 0x649e <__ftoa_engine+0x19a>
    6478:	23 95       	inc	r18
    647a:	7e 91       	ld	r23, -X
    647c:	73 95       	inc	r23
    647e:	7a 33       	cpi	r23, 0x3A	; 58
    6480:	08 f0       	brcs	.+2      	; 0x6484 <__ftoa_engine+0x180>
    6482:	70 e3       	ldi	r23, 0x30	; 48
    6484:	7c 93       	st	X, r23
    6486:	20 13       	cpse	r18, r16
    6488:	b8 f7       	brcc	.-18     	; 0x6478 <__ftoa_engine+0x174>
    648a:	7e 91       	ld	r23, -X
    648c:	70 61       	ori	r23, 0x10	; 16
    648e:	7d 93       	st	X+, r23
    6490:	30 f0       	brcs	.+12     	; 0x649e <__ftoa_engine+0x19a>
    6492:	83 95       	inc	r24
    6494:	71 e3       	ldi	r23, 0x31	; 49
    6496:	7d 93       	st	X+, r23
    6498:	70 e3       	ldi	r23, 0x30	; 48
    649a:	2a 95       	dec	r18
    649c:	e1 f7       	brne	.-8      	; 0x6496 <__ftoa_engine+0x192>
    649e:	11 24       	eor	r1, r1
    64a0:	ef 90       	pop	r14
    64a2:	ff 90       	pop	r15
    64a4:	0f 91       	pop	r16
    64a6:	1f 91       	pop	r17
    64a8:	cf 91       	pop	r28
    64aa:	df 91       	pop	r29
    64ac:	99 27       	eor	r25, r25
    64ae:	87 fd       	sbrc	r24, 7
    64b0:	90 95       	com	r25
    64b2:	08 95       	ret

000064b4 <strnlen_P>:
    64b4:	fc 01       	movw	r30, r24
    64b6:	05 90       	lpm	r0, Z+
    64b8:	61 50       	subi	r22, 0x01	; 1
    64ba:	70 40       	sbci	r23, 0x00	; 0
    64bc:	01 10       	cpse	r0, r1
    64be:	d8 f7       	brcc	.-10     	; 0x64b6 <strnlen_P+0x2>
    64c0:	80 95       	com	r24
    64c2:	90 95       	com	r25
    64c4:	8e 0f       	add	r24, r30
    64c6:	9f 1f       	adc	r25, r31
    64c8:	08 95       	ret

000064ca <memcpy>:
    64ca:	fb 01       	movw	r30, r22
    64cc:	dc 01       	movw	r26, r24
    64ce:	02 c0       	rjmp	.+4      	; 0x64d4 <memcpy+0xa>
    64d0:	01 90       	ld	r0, Z+
    64d2:	0d 92       	st	X+, r0
    64d4:	41 50       	subi	r20, 0x01	; 1
    64d6:	50 40       	sbci	r21, 0x00	; 0
    64d8:	d8 f7       	brcc	.-10     	; 0x64d0 <memcpy+0x6>
    64da:	08 95       	ret

000064dc <memset>:
    64dc:	dc 01       	movw	r26, r24
    64de:	01 c0       	rjmp	.+2      	; 0x64e2 <memset+0x6>
    64e0:	6d 93       	st	X+, r22
    64e2:	41 50       	subi	r20, 0x01	; 1
    64e4:	50 40       	sbci	r21, 0x00	; 0
    64e6:	e0 f7       	brcc	.-8      	; 0x64e0 <memset+0x4>
    64e8:	08 95       	ret

000064ea <strcasestr>:
    64ea:	fb 01       	movw	r30, r22
    64ec:	51 91       	ld	r21, Z+
    64ee:	55 23       	and	r21, r21
    64f0:	b1 f0       	breq	.+44     	; 0x651e <strcasestr+0x34>
    64f2:	bf 01       	movw	r22, r30
    64f4:	dc 01       	movw	r26, r24
    64f6:	05 2e       	mov	r0, r21
    64f8:	4d 91       	ld	r20, X+
    64fa:	44 23       	and	r20, r20
    64fc:	69 f0       	breq	.+26     	; 0x6518 <strcasestr+0x2e>
    64fe:	10 d0       	rcall	.+32     	; 0x6520 <strcasestr+0x36>
    6500:	d9 f7       	brne	.-10     	; 0x64f8 <strcasestr+0xe>
    6502:	cd 01       	movw	r24, r26
    6504:	01 90       	ld	r0, Z+
    6506:	00 20       	and	r0, r0
    6508:	49 f0       	breq	.+18     	; 0x651c <strcasestr+0x32>
    650a:	4d 91       	ld	r20, X+
    650c:	41 11       	cpse	r20, r1
    650e:	08 d0       	rcall	.+16     	; 0x6520 <strcasestr+0x36>
    6510:	c9 f3       	breq	.-14     	; 0x6504 <strcasestr+0x1a>
    6512:	fb 01       	movw	r30, r22
    6514:	41 11       	cpse	r20, r1
    6516:	ee cf       	rjmp	.-36     	; 0x64f4 <strcasestr+0xa>
    6518:	81 e0       	ldi	r24, 0x01	; 1
    651a:	90 e0       	ldi	r25, 0x00	; 0
    651c:	01 97       	sbiw	r24, 0x01	; 1
    651e:	08 95       	ret
    6520:	40 25       	eor	r20, r0
    6522:	39 f0       	breq	.+14     	; 0x6532 <strcasestr+0x48>
    6524:	40 32       	cpi	r20, 0x20	; 32
    6526:	29 f4       	brne	.+10     	; 0x6532 <strcasestr+0x48>
    6528:	40 29       	or	r20, r0
    652a:	4b 57       	subi	r20, 0x7B	; 123
    652c:	46 5e       	subi	r20, 0xE6	; 230
    652e:	08 f0       	brcs	.+2      	; 0x6532 <strcasestr+0x48>
    6530:	18 94       	sez
    6532:	08 95       	ret

00006534 <strcat>:
    6534:	fb 01       	movw	r30, r22
    6536:	dc 01       	movw	r26, r24
    6538:	0d 90       	ld	r0, X+
    653a:	00 20       	and	r0, r0
    653c:	e9 f7       	brne	.-6      	; 0x6538 <strcat+0x4>
    653e:	11 97       	sbiw	r26, 0x01	; 1
    6540:	01 90       	ld	r0, Z+
    6542:	0d 92       	st	X+, r0
    6544:	00 20       	and	r0, r0
    6546:	e1 f7       	brne	.-8      	; 0x6540 <strcat+0xc>
    6548:	08 95       	ret

0000654a <strcpy>:
    654a:	fb 01       	movw	r30, r22
    654c:	dc 01       	movw	r26, r24
    654e:	01 90       	ld	r0, Z+
    6550:	0d 92       	st	X+, r0
    6552:	00 20       	and	r0, r0
    6554:	e1 f7       	brne	.-8      	; 0x654e <strcpy+0x4>
    6556:	08 95       	ret

00006558 <strncasecmp>:
    6558:	fb 01       	movw	r30, r22
    655a:	dc 01       	movw	r26, r24
    655c:	41 50       	subi	r20, 0x01	; 1
    655e:	50 40       	sbci	r21, 0x00	; 0
    6560:	88 f0       	brcs	.+34     	; 0x6584 <strncasecmp+0x2c>
    6562:	8d 91       	ld	r24, X+
    6564:	81 34       	cpi	r24, 0x41	; 65
    6566:	1c f0       	brlt	.+6      	; 0x656e <strncasecmp+0x16>
    6568:	8b 35       	cpi	r24, 0x5B	; 91
    656a:	0c f4       	brge	.+2      	; 0x656e <strncasecmp+0x16>
    656c:	80 5e       	subi	r24, 0xE0	; 224
    656e:	61 91       	ld	r22, Z+
    6570:	61 34       	cpi	r22, 0x41	; 65
    6572:	1c f0       	brlt	.+6      	; 0x657a <strncasecmp+0x22>
    6574:	6b 35       	cpi	r22, 0x5B	; 91
    6576:	0c f4       	brge	.+2      	; 0x657a <strncasecmp+0x22>
    6578:	60 5e       	subi	r22, 0xE0	; 224
    657a:	86 1b       	sub	r24, r22
    657c:	61 11       	cpse	r22, r1
    657e:	71 f3       	breq	.-36     	; 0x655c <strncasecmp+0x4>
    6580:	99 0b       	sbc	r25, r25
    6582:	08 95       	ret
    6584:	88 1b       	sub	r24, r24
    6586:	fc cf       	rjmp	.-8      	; 0x6580 <strncasecmp+0x28>

00006588 <strnlen>:
    6588:	fc 01       	movw	r30, r24
    658a:	61 50       	subi	r22, 0x01	; 1
    658c:	70 40       	sbci	r23, 0x00	; 0
    658e:	01 90       	ld	r0, Z+
    6590:	01 10       	cpse	r0, r1
    6592:	d8 f7       	brcc	.-10     	; 0x658a <strnlen+0x2>
    6594:	80 95       	com	r24
    6596:	90 95       	com	r25
    6598:	8e 0f       	add	r24, r30
    659a:	9f 1f       	adc	r25, r31
    659c:	08 95       	ret

0000659e <fputc>:
    659e:	0f 93       	push	r16
    65a0:	1f 93       	push	r17
    65a2:	cf 93       	push	r28
    65a4:	df 93       	push	r29
    65a6:	fb 01       	movw	r30, r22
    65a8:	23 81       	ldd	r18, Z+3	; 0x03
    65aa:	21 fd       	sbrc	r18, 1
    65ac:	03 c0       	rjmp	.+6      	; 0x65b4 <fputc+0x16>
    65ae:	8f ef       	ldi	r24, 0xFF	; 255
    65b0:	9f ef       	ldi	r25, 0xFF	; 255
    65b2:	2c c0       	rjmp	.+88     	; 0x660c <fputc+0x6e>
    65b4:	22 ff       	sbrs	r18, 2
    65b6:	16 c0       	rjmp	.+44     	; 0x65e4 <fputc+0x46>
    65b8:	46 81       	ldd	r20, Z+6	; 0x06
    65ba:	57 81       	ldd	r21, Z+7	; 0x07
    65bc:	24 81       	ldd	r18, Z+4	; 0x04
    65be:	35 81       	ldd	r19, Z+5	; 0x05
    65c0:	42 17       	cp	r20, r18
    65c2:	53 07       	cpc	r21, r19
    65c4:	44 f4       	brge	.+16     	; 0x65d6 <fputc+0x38>
    65c6:	a0 81       	ld	r26, Z
    65c8:	b1 81       	ldd	r27, Z+1	; 0x01
    65ca:	9d 01       	movw	r18, r26
    65cc:	2f 5f       	subi	r18, 0xFF	; 255
    65ce:	3f 4f       	sbci	r19, 0xFF	; 255
    65d0:	31 83       	std	Z+1, r19	; 0x01
    65d2:	20 83       	st	Z, r18
    65d4:	8c 93       	st	X, r24
    65d6:	26 81       	ldd	r18, Z+6	; 0x06
    65d8:	37 81       	ldd	r19, Z+7	; 0x07
    65da:	2f 5f       	subi	r18, 0xFF	; 255
    65dc:	3f 4f       	sbci	r19, 0xFF	; 255
    65de:	37 83       	std	Z+7, r19	; 0x07
    65e0:	26 83       	std	Z+6, r18	; 0x06
    65e2:	14 c0       	rjmp	.+40     	; 0x660c <fputc+0x6e>
    65e4:	8b 01       	movw	r16, r22
    65e6:	ec 01       	movw	r28, r24
    65e8:	fb 01       	movw	r30, r22
    65ea:	00 84       	ldd	r0, Z+8	; 0x08
    65ec:	f1 85       	ldd	r31, Z+9	; 0x09
    65ee:	e0 2d       	mov	r30, r0
    65f0:	19 95       	eicall
    65f2:	89 2b       	or	r24, r25
    65f4:	e1 f6       	brne	.-72     	; 0x65ae <fputc+0x10>
    65f6:	d8 01       	movw	r26, r16
    65f8:	16 96       	adiw	r26, 0x06	; 6
    65fa:	8d 91       	ld	r24, X+
    65fc:	9c 91       	ld	r25, X
    65fe:	17 97       	sbiw	r26, 0x07	; 7
    6600:	01 96       	adiw	r24, 0x01	; 1
    6602:	17 96       	adiw	r26, 0x07	; 7
    6604:	9c 93       	st	X, r25
    6606:	8e 93       	st	-X, r24
    6608:	16 97       	sbiw	r26, 0x06	; 6
    660a:	ce 01       	movw	r24, r28
    660c:	df 91       	pop	r29
    660e:	cf 91       	pop	r28
    6610:	1f 91       	pop	r17
    6612:	0f 91       	pop	r16
    6614:	08 95       	ret

00006616 <printf>:
    6616:	cf 93       	push	r28
    6618:	df 93       	push	r29
    661a:	cd b7       	in	r28, 0x3d	; 61
    661c:	de b7       	in	r29, 0x3e	; 62
    661e:	ae 01       	movw	r20, r28
    6620:	4a 5f       	subi	r20, 0xFA	; 250
    6622:	5f 4f       	sbci	r21, 0xFF	; 255
    6624:	fa 01       	movw	r30, r20
    6626:	61 91       	ld	r22, Z+
    6628:	71 91       	ld	r23, Z+
    662a:	af 01       	movw	r20, r30
    662c:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <__iob+0x2>
    6630:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <__iob+0x3>
    6634:	0e 94 bb 2a 	call	0x5576	; 0x5576 <vfprintf>
    6638:	df 91       	pop	r29
    663a:	cf 91       	pop	r28
    663c:	08 95       	ret

0000663e <puts>:
    663e:	0f 93       	push	r16
    6640:	1f 93       	push	r17
    6642:	cf 93       	push	r28
    6644:	df 93       	push	r29
    6646:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <__iob+0x2>
    664a:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <__iob+0x3>
    664e:	23 81       	ldd	r18, Z+3	; 0x03
    6650:	21 ff       	sbrs	r18, 1
    6652:	1b c0       	rjmp	.+54     	; 0x668a <puts+0x4c>
    6654:	8c 01       	movw	r16, r24
    6656:	d0 e0       	ldi	r29, 0x00	; 0
    6658:	c0 e0       	ldi	r28, 0x00	; 0
    665a:	f8 01       	movw	r30, r16
    665c:	81 91       	ld	r24, Z+
    665e:	8f 01       	movw	r16, r30
    6660:	60 91 f1 17 	lds	r22, 0x17F1	; 0x8017f1 <__iob+0x2>
    6664:	70 91 f2 17 	lds	r23, 0x17F2	; 0x8017f2 <__iob+0x3>
    6668:	db 01       	movw	r26, r22
    666a:	18 96       	adiw	r26, 0x08	; 8
    666c:	ed 91       	ld	r30, X+
    666e:	fc 91       	ld	r31, X
    6670:	19 97       	sbiw	r26, 0x09	; 9
    6672:	88 23       	and	r24, r24
    6674:	31 f0       	breq	.+12     	; 0x6682 <puts+0x44>
    6676:	19 95       	eicall
    6678:	89 2b       	or	r24, r25
    667a:	79 f3       	breq	.-34     	; 0x665a <puts+0x1c>
    667c:	df ef       	ldi	r29, 0xFF	; 255
    667e:	cf ef       	ldi	r28, 0xFF	; 255
    6680:	ec cf       	rjmp	.-40     	; 0x665a <puts+0x1c>
    6682:	8a e0       	ldi	r24, 0x0A	; 10
    6684:	19 95       	eicall
    6686:	89 2b       	or	r24, r25
    6688:	19 f0       	breq	.+6      	; 0x6690 <puts+0x52>
    668a:	8f ef       	ldi	r24, 0xFF	; 255
    668c:	9f ef       	ldi	r25, 0xFF	; 255
    668e:	02 c0       	rjmp	.+4      	; 0x6694 <puts+0x56>
    6690:	8d 2f       	mov	r24, r29
    6692:	9c 2f       	mov	r25, r28
    6694:	df 91       	pop	r29
    6696:	cf 91       	pop	r28
    6698:	1f 91       	pop	r17
    669a:	0f 91       	pop	r16
    669c:	08 95       	ret

0000669e <sprintf>:
    669e:	0f 93       	push	r16
    66a0:	1f 93       	push	r17
    66a2:	cf 93       	push	r28
    66a4:	df 93       	push	r29
    66a6:	cd b7       	in	r28, 0x3d	; 61
    66a8:	de b7       	in	r29, 0x3e	; 62
    66aa:	2e 97       	sbiw	r28, 0x0e	; 14
    66ac:	0f b6       	in	r0, 0x3f	; 63
    66ae:	f8 94       	cli
    66b0:	de bf       	out	0x3e, r29	; 62
    66b2:	0f be       	out	0x3f, r0	; 63
    66b4:	cd bf       	out	0x3d, r28	; 61
    66b6:	0e 89       	ldd	r16, Y+22	; 0x16
    66b8:	1f 89       	ldd	r17, Y+23	; 0x17
    66ba:	86 e0       	ldi	r24, 0x06	; 6
    66bc:	8c 83       	std	Y+4, r24	; 0x04
    66be:	1a 83       	std	Y+2, r17	; 0x02
    66c0:	09 83       	std	Y+1, r16	; 0x01
    66c2:	8f ef       	ldi	r24, 0xFF	; 255
    66c4:	9f e7       	ldi	r25, 0x7F	; 127
    66c6:	9e 83       	std	Y+6, r25	; 0x06
    66c8:	8d 83       	std	Y+5, r24	; 0x05
    66ca:	ae 01       	movw	r20, r28
    66cc:	46 5e       	subi	r20, 0xE6	; 230
    66ce:	5f 4f       	sbci	r21, 0xFF	; 255
    66d0:	68 8d       	ldd	r22, Y+24	; 0x18
    66d2:	79 8d       	ldd	r23, Y+25	; 0x19
    66d4:	ce 01       	movw	r24, r28
    66d6:	01 96       	adiw	r24, 0x01	; 1
    66d8:	0e 94 bb 2a 	call	0x5576	; 0x5576 <vfprintf>
    66dc:	ef 81       	ldd	r30, Y+7	; 0x07
    66de:	f8 85       	ldd	r31, Y+8	; 0x08
    66e0:	e0 0f       	add	r30, r16
    66e2:	f1 1f       	adc	r31, r17
    66e4:	10 82       	st	Z, r1
    66e6:	2e 96       	adiw	r28, 0x0e	; 14
    66e8:	0f b6       	in	r0, 0x3f	; 63
    66ea:	f8 94       	cli
    66ec:	de bf       	out	0x3e, r29	; 62
    66ee:	0f be       	out	0x3f, r0	; 63
    66f0:	cd bf       	out	0x3d, r28	; 61
    66f2:	df 91       	pop	r29
    66f4:	cf 91       	pop	r28
    66f6:	1f 91       	pop	r17
    66f8:	0f 91       	pop	r16
    66fa:	08 95       	ret

000066fc <__ultoa_invert>:
    66fc:	fa 01       	movw	r30, r20
    66fe:	aa 27       	eor	r26, r26
    6700:	28 30       	cpi	r18, 0x08	; 8
    6702:	51 f1       	breq	.+84     	; 0x6758 <__ultoa_invert+0x5c>
    6704:	20 31       	cpi	r18, 0x10	; 16
    6706:	81 f1       	breq	.+96     	; 0x6768 <__ultoa_invert+0x6c>
    6708:	e8 94       	clt
    670a:	6f 93       	push	r22
    670c:	6e 7f       	andi	r22, 0xFE	; 254
    670e:	6e 5f       	subi	r22, 0xFE	; 254
    6710:	7f 4f       	sbci	r23, 0xFF	; 255
    6712:	8f 4f       	sbci	r24, 0xFF	; 255
    6714:	9f 4f       	sbci	r25, 0xFF	; 255
    6716:	af 4f       	sbci	r26, 0xFF	; 255
    6718:	b1 e0       	ldi	r27, 0x01	; 1
    671a:	3e d0       	rcall	.+124    	; 0x6798 <__ultoa_invert+0x9c>
    671c:	b4 e0       	ldi	r27, 0x04	; 4
    671e:	3c d0       	rcall	.+120    	; 0x6798 <__ultoa_invert+0x9c>
    6720:	67 0f       	add	r22, r23
    6722:	78 1f       	adc	r23, r24
    6724:	89 1f       	adc	r24, r25
    6726:	9a 1f       	adc	r25, r26
    6728:	a1 1d       	adc	r26, r1
    672a:	68 0f       	add	r22, r24
    672c:	79 1f       	adc	r23, r25
    672e:	8a 1f       	adc	r24, r26
    6730:	91 1d       	adc	r25, r1
    6732:	a1 1d       	adc	r26, r1
    6734:	6a 0f       	add	r22, r26
    6736:	71 1d       	adc	r23, r1
    6738:	81 1d       	adc	r24, r1
    673a:	91 1d       	adc	r25, r1
    673c:	a1 1d       	adc	r26, r1
    673e:	20 d0       	rcall	.+64     	; 0x6780 <__ultoa_invert+0x84>
    6740:	09 f4       	brne	.+2      	; 0x6744 <__ultoa_invert+0x48>
    6742:	68 94       	set
    6744:	3f 91       	pop	r19
    6746:	2a e0       	ldi	r18, 0x0A	; 10
    6748:	26 9f       	mul	r18, r22
    674a:	11 24       	eor	r1, r1
    674c:	30 19       	sub	r19, r0
    674e:	30 5d       	subi	r19, 0xD0	; 208
    6750:	31 93       	st	Z+, r19
    6752:	de f6       	brtc	.-74     	; 0x670a <__ultoa_invert+0xe>
    6754:	cf 01       	movw	r24, r30
    6756:	08 95       	ret
    6758:	46 2f       	mov	r20, r22
    675a:	47 70       	andi	r20, 0x07	; 7
    675c:	40 5d       	subi	r20, 0xD0	; 208
    675e:	41 93       	st	Z+, r20
    6760:	b3 e0       	ldi	r27, 0x03	; 3
    6762:	0f d0       	rcall	.+30     	; 0x6782 <__ultoa_invert+0x86>
    6764:	c9 f7       	brne	.-14     	; 0x6758 <__ultoa_invert+0x5c>
    6766:	f6 cf       	rjmp	.-20     	; 0x6754 <__ultoa_invert+0x58>
    6768:	46 2f       	mov	r20, r22
    676a:	4f 70       	andi	r20, 0x0F	; 15
    676c:	40 5d       	subi	r20, 0xD0	; 208
    676e:	4a 33       	cpi	r20, 0x3A	; 58
    6770:	18 f0       	brcs	.+6      	; 0x6778 <__ultoa_invert+0x7c>
    6772:	49 5d       	subi	r20, 0xD9	; 217
    6774:	31 fd       	sbrc	r19, 1
    6776:	40 52       	subi	r20, 0x20	; 32
    6778:	41 93       	st	Z+, r20
    677a:	02 d0       	rcall	.+4      	; 0x6780 <__ultoa_invert+0x84>
    677c:	a9 f7       	brne	.-22     	; 0x6768 <__ultoa_invert+0x6c>
    677e:	ea cf       	rjmp	.-44     	; 0x6754 <__ultoa_invert+0x58>
    6780:	b4 e0       	ldi	r27, 0x04	; 4
    6782:	a6 95       	lsr	r26
    6784:	97 95       	ror	r25
    6786:	87 95       	ror	r24
    6788:	77 95       	ror	r23
    678a:	67 95       	ror	r22
    678c:	ba 95       	dec	r27
    678e:	c9 f7       	brne	.-14     	; 0x6782 <__ultoa_invert+0x86>
    6790:	00 97       	sbiw	r24, 0x00	; 0
    6792:	61 05       	cpc	r22, r1
    6794:	71 05       	cpc	r23, r1
    6796:	08 95       	ret
    6798:	9b 01       	movw	r18, r22
    679a:	ac 01       	movw	r20, r24
    679c:	0a 2e       	mov	r0, r26
    679e:	06 94       	lsr	r0
    67a0:	57 95       	ror	r21
    67a2:	47 95       	ror	r20
    67a4:	37 95       	ror	r19
    67a6:	27 95       	ror	r18
    67a8:	ba 95       	dec	r27
    67aa:	c9 f7       	brne	.-14     	; 0x679e <__ultoa_invert+0xa2>
    67ac:	62 0f       	add	r22, r18
    67ae:	73 1f       	adc	r23, r19
    67b0:	84 1f       	adc	r24, r20
    67b2:	95 1f       	adc	r25, r21
    67b4:	a0 1d       	adc	r26, r0
    67b6:	08 95       	ret

000067b8 <_exit>:
    67b8:	f8 94       	cli

000067ba <__stop_program>:
    67ba:	ff cf       	rjmp	.-2      	; 0x67ba <__stop_program>
