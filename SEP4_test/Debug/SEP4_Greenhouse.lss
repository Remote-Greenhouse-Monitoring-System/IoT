
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000704  00800200  0000671e  000067b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000671e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ff9  00800904  00800904  00006eb6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006eb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ac8  00000000  00000000  00006f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d317  00000000  00000000  00007a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003442  00000000  00000000  00014d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000068f1  00000000  00000000  00018175  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026e4  00000000  00000000  0001ea68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004154  00000000  00000000  0002114c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c21b  00000000  00000000  000252a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a28  00000000  00000000  000314bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3a c7       	rjmp	.+3700   	; 0xea6 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 60 24 	jmp	0x48c0	; 0x48c0 <__vector_25>
      68:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <__vector_36>
      94:	0c 94 48 25 	jmp	0x4a90	; 0x4a90 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 93 29 	jmp	0x5326	; 0x5326 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 8c 25 	jmp	0x4b18	; 0x4b18 <__vector_51>
      d0:	0c 94 de 25 	jmp	0x4bbc	; 0x4bbc <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__vector_54>
      dc:	0c 94 74 26 	jmp	0x4ce8	; 0x4ce8 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	46 1b       	sub	r20, r22
      e6:	46 1b       	sub	r20, r22
      e8:	46 1b       	sub	r20, r22
      ea:	7d 1b       	sub	r23, r29
      ec:	85 1b       	sub	r24, r21
      ee:	9a 1b       	sub	r25, r26
      f0:	46 1b       	sub	r20, r22
      f2:	46 1b       	sub	r20, r22
      f4:	7d 1b       	sub	r23, r29
      f6:	85 1b       	sub	r24, r21
      f8:	b5 29       	or	r27, r5
      fa:	25 2a       	or	r2, r21
      fc:	25 2a       	or	r2, r21
      fe:	25 2a       	or	r2, r21
     100:	25 2a       	or	r2, r21
     102:	25 2a       	or	r2, r21
     104:	25 2a       	or	r2, r21
     106:	25 2a       	or	r2, r21
     108:	b5 29       	or	r27, r5
     10a:	25 2a       	or	r2, r21
     10c:	25 2a       	or	r2, r21
     10e:	25 2a       	or	r2, r21
     110:	25 2a       	or	r2, r21
     112:	25 2a       	or	r2, r21
     114:	25 2a       	or	r2, r21
     116:	25 2a       	or	r2, r21
     118:	b7 29       	or	r27, r7
     11a:	25 2a       	or	r2, r21
     11c:	25 2a       	or	r2, r21
     11e:	25 2a       	or	r2, r21
     120:	25 2a       	or	r2, r21
     122:	25 2a       	or	r2, r21
     124:	25 2a       	or	r2, r21
     126:	25 2a       	or	r2, r21
     128:	25 2a       	or	r2, r21
     12a:	25 2a       	or	r2, r21
     12c:	25 2a       	or	r2, r21
     12e:	25 2a       	or	r2, r21
     130:	25 2a       	or	r2, r21
     132:	25 2a       	or	r2, r21
     134:	25 2a       	or	r2, r21
     136:	25 2a       	or	r2, r21
     138:	b7 29       	or	r27, r7
     13a:	25 2a       	or	r2, r21
     13c:	25 2a       	or	r2, r21
     13e:	25 2a       	or	r2, r21
     140:	25 2a       	or	r2, r21
     142:	25 2a       	or	r2, r21
     144:	25 2a       	or	r2, r21
     146:	25 2a       	or	r2, r21
     148:	25 2a       	or	r2, r21
     14a:	25 2a       	or	r2, r21
     14c:	25 2a       	or	r2, r21
     14e:	25 2a       	or	r2, r21
     150:	25 2a       	or	r2, r21
     152:	25 2a       	or	r2, r21
     154:	25 2a       	or	r2, r21
     156:	25 2a       	or	r2, r21
     158:	21 2a       	or	r2, r17
     15a:	25 2a       	or	r2, r21
     15c:	25 2a       	or	r2, r21
     15e:	25 2a       	or	r2, r21
     160:	25 2a       	or	r2, r21
     162:	25 2a       	or	r2, r21
     164:	25 2a       	or	r2, r21
     166:	25 2a       	or	r2, r21
     168:	ec 29       	or	r30, r12
     16a:	25 2a       	or	r2, r21
     16c:	25 2a       	or	r2, r21
     16e:	25 2a       	or	r2, r21
     170:	25 2a       	or	r2, r21
     172:	25 2a       	or	r2, r21
     174:	25 2a       	or	r2, r21
     176:	25 2a       	or	r2, r21
     178:	25 2a       	or	r2, r21
     17a:	25 2a       	or	r2, r21
     17c:	25 2a       	or	r2, r21
     17e:	25 2a       	or	r2, r21
     180:	25 2a       	or	r2, r21
     182:	25 2a       	or	r2, r21
     184:	25 2a       	or	r2, r21
     186:	25 2a       	or	r2, r21
     188:	e0 29       	or	r30, r0
     18a:	25 2a       	or	r2, r21
     18c:	25 2a       	or	r2, r21
     18e:	25 2a       	or	r2, r21
     190:	25 2a       	or	r2, r21
     192:	25 2a       	or	r2, r21
     194:	25 2a       	or	r2, r21
     196:	25 2a       	or	r2, r21
     198:	04 2a       	or	r0, r20

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <prvCheckTasksWaitingTermination>
     2a0:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	38 d5       	rcall	.+2672   	; 0xd1a <vPortYield>
     2aa:	0e 94 c3 1b 	call	0x3786	; 0x3786 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 c3 18 	call	0x3186	; 0x3186 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 b8 1a 	call	0x3570	; 0x3570 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 0f 1b 	call	0x361e	; 0x361e <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	19 e0       	ldi	r17, 0x09	; 9
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	ee e1       	ldi	r30, 0x1E	; 30
     2e6:	f7 e6       	ldi	r31, 0x67	; 103
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a4 30       	cpi	r26, 0x04	; 4
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	28 e1       	ldi	r18, 0x18	; 24
     2fa:	a4 e0       	ldi	r26, 0x04	; 4
     2fc:	b9 e0       	ldi	r27, 0x09	; 9
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ad 3f       	cpi	r26, 0xFD	; 253
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <main>
     30c:	0c 94 8d 33 	jmp	0x671a	; 0x671a <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <run_all_Task>:
	dataReadyEventGroup = xEventGroupCreate();
	meassureEventGroup = xEventGroupCreate();
	
}

void start_application() {
     312:	db d0       	rcall	.+438    	; 0x4ca <createCO2SensorTask>
     314:	05 c1       	rjmp	.+522    	; 0x520 <create_TempHumSensorTask>
     316:	08 95       	ret

00000318 <initialize_everything>:
     318:	98 d1       	rcall	.+816    	; 0x64a <xEventGroupCreate>
     31a:	90 93 ef 18 	sts	0x18EF, r25	; 0x8018ef <dataReadyEventGroup+0x1>
     31e:	80 93 ee 18 	sts	0x18EE, r24	; 0x8018ee <dataReadyEventGroup>
     322:	93 d1       	rcall	.+806    	; 0x64a <xEventGroupCreate>
     324:	90 93 f1 18 	sts	0x18F1, r25	; 0x8018f1 <meassureEventGroup+0x1>
     328:	80 93 f0 18 	sts	0x18F0, r24	; 0x8018f0 <meassureEventGroup>
     32c:	08 95       	ret

0000032e <MainApplicationTask>:
	
}

// Main task For application to get result when every measurnment is done

void MainApplicationTask() {
     32e:	cf 92       	push	r12
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
	
	printf ("Activate");
     338:	8f e6       	ldi	r24, 0x6F	; 111
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
	
	puts("Application");
     344:	88 e7       	ldi	r24, 0x78	; 120
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <puts>
	//First trying to measure everything
	xEventGroupSetBits(meassureEventGroup,ALL_MEASSURE_BITS);
     34c:	45 e0       	ldi	r20, 0x05	; 5
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <meassureEventGroup>
     358:	90 91 f1 18 	lds	r25, 0x18F1	; 0x8018f1 <meassureEventGroup+0x1>
     35c:	29 d2       	rcall	.+1106   	; 0x7b0 <xEventGroupSetBits>
	
	printf("Measuring from sensor is done now ready bit are done ");
     35e:	84 e8       	ldi	r24, 0x84	; 132
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	9f 93       	push	r25
     364:	8f 93       	push	r24
     366:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
	
	EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     36a:	cc 24       	eor	r12, r12
     36c:	ca 94       	dec	r12
     36e:	dc 2c       	mov	r13, r12
     370:	76 01       	movw	r14, r12
     372:	01 e0       	ldi	r16, 0x01	; 1
     374:	21 e0       	ldi	r18, 0x01	; 1
     376:	4a e0       	ldi	r20, 0x0A	; 10
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <dataReadyEventGroup>
     382:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <dataReadyEventGroup+0x1>
     386:	74 d1       	rcall	.+744    	; 0x670 <xEventGroupWaitBits>
	
	//If everything is done now we need to set the measurement and it's done 
	
	if (uxBits&(ALL_READY_BITS))
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8a 70       	andi	r24, 0x0A	; 10
     38e:	99 27       	eor	r25, r25
     390:	aa 27       	eor	r26, r26
     392:	bb 27       	eor	r27, r27
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	89 2b       	or	r24, r25
     39e:	8a 2b       	or	r24, r26
     3a0:	8b 2b       	or	r24, r27
     3a2:	79 f1       	breq	.+94     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		printf("Yahuuu !!! Everything is measured now setting the value from sensor");
     3a4:	8a eb       	ldi	r24, 0xBA	; 186
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	9f 93       	push	r25
     3aa:	8f 93       	push	r24
     3ac:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
		
		// set here what we need 
		printf("Temp is : %u",TempHumSensor_getTemp());
     3b0:	21 d1       	rcall	.+578    	; 0x5f4 <TempHumSensor_getTemp>
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	8e ef       	ldi	r24, 0xFE	; 254
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	9f 93       	push	r25
     3bc:	8f 93       	push	r24
     3be:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
		printf("HUM is : %u",TempHumSensor_getHum());
     3c2:	1d d1       	rcall	.+570    	; 0x5fe <TempHumSensor_getHum>
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	8b e0       	ldi	r24, 0x0B	; 11
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	9f 93       	push	r25
     3ce:	8f 93       	push	r24
     3d0:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
		printf("co2 is : %u", CO2_getPPM());
     3d4:	75 d0       	rcall	.+234    	; 0x4c0 <CO2_getPPM>
     3d6:	9f 93       	push	r25
     3d8:	8f 93       	push	r24
     3da:	87 e1       	ldi	r24, 0x17	; 23
     3dc:	93 e0       	ldi	r25, 0x03	; 3
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
		
		//I guess lorawan part goes here and then we need to repeat it again and again 
		
		//As of now 1 min
		vTaskDelay(pdMS_TO_TICKS(6000));
     3e6:	64 e7       	ldi	r22, 0x74	; 116
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 54 12 	call	0x24a8	; 0x24a8 <vTaskDelay>
     3f2:	8d b7       	in	r24, 0x3d	; 61
     3f4:	9e b7       	in	r25, 0x3e	; 62
     3f6:	0e 96       	adiw	r24, 0x0e	; 14
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	9e bf       	out	0x3e, r25	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	8d bf       	out	0x3d, r24	; 61
	}
	

     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	08 95       	ret

0000040e <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
     40e:	90 93 05 09 	sts	0x0905, r25	; 0x800905 <__data_end+0x1>
     412:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__data_end>
     416:	08 95       	ret

00000418 <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	0e 94 b0 22 	call	0x4560	; 0x4560 <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
     41e:	87 e0       	ldi	r24, 0x07	; 7
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <mh_z19_injectCallBack>
     426:	08 95       	ret

00000428 <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
     428:	0e 94 da 22 	call	0x45b4	; 0x45b4 <mh_z19_takeMeassuring>
     42c:	80 93 f2 18 	sts	0x18F2, r24	; 0x8018f2 <rc>
	if (rc != MHZ19_OK)
     430:	88 23       	and	r24, r24
     432:	41 f0       	breq	.+16     	; 0x444 <CO2_measure+0x1c>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
     434:	83 e2       	ldi	r24, 0x23	; 35
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	99 e0       	ldi	r25, 0x09	; 9
     448:	0e 94 09 23 	call	0x4612	; 0x4612 <mh_z19_getCo2Ppm>
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	90 93 05 09 	sts	0x0905, r25	; 0x800905 <__data_end+0x1>
     452:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__data_end>
     456:	08 95       	ret

00000458 <MeasureCo2Task>:
}

//MAIN TASKKK

void MeasureCo2Task(void* pvpParameter){
	printf("Measurement of co2 task has been started ");
     458:	83 e5       	ldi	r24, 0x53	; 83
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	9f 93       	push	r25
     45e:	8f 93       	push	r24
     460:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(meassureEventGroup,CO2_MEASSURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     468:	cc 24       	eor	r12, r12
     46a:	ca 94       	dec	r12
     46c:	dc 2c       	mov	r13, r12
     46e:	76 01       	movw	r14, r12
     470:	01 e0       	ldi	r16, 0x01	; 1
     472:	21 e0       	ldi	r18, 0x01	; 1
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <meassureEventGroup>
     480:	90 91 f1 18 	lds	r25, 0x18F1	; 0x8018f1 <meassureEventGroup+0x1>
     484:	f5 d0       	rcall	.+490    	; 0x670 <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASSURE_BIT)) == CO2_MEASSURE_BIT)
     486:	60 ff       	sbrs	r22, 0
     488:	ef cf       	rjmp	.-34     	; 0x468 <MeasureCo2Task+0x10>
			{
				printf("Measure bit and event bit was successfully checked ");
     48a:	8d e7       	ldi	r24, 0x7D	; 125
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
				
				CO2_measure();
     496:	c8 df       	rcall	.-112    	; 0x428 <CO2_measure>
				
				printf("Measurement successful , now time to set ready bit of c02 ");
     498:	81 eb       	ldi	r24, 0xB1	; 177
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
				
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
     4a4:	42 e0       	ldi	r20, 0x02	; 2
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <dataReadyEventGroup>
     4b0:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <dataReadyEventGroup+0x1>
     4b4:	7d d1       	rcall	.+762    	; 0x7b0 <xEventGroupSetBits>
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	d4 cf       	rjmp	.-88     	; 0x468 <MeasureCo2Task+0x10>

000004c0 <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
     4c0:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <__data_end>
     4c4:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__data_end+0x1>
     4c8:	08 95       	ret

000004ca <createCO2SensorTask>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void createCO2SensorTask(){
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
	
	//Initializing 
		CO2_createSensor();
     4d0:	a3 df       	rcall	.-186    	; 0x418 <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
     4d2:	e1 2c       	mov	r14, r1
     4d4:	f1 2c       	mov	r15, r1
     4d6:	00 e0       	ldi	r16, 0x00	; 0
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 ec       	ldi	r20, 0xC0	; 192
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	6c ee       	ldi	r22, 0xEC	; 236
     4e2:	73 e0       	ldi	r23, 0x03	; 3
     4e4:	8c e2       	ldi	r24, 0x2C	; 44
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY,
		NULL);
}
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	08 95       	ret

000004f4 <initialise_TempHumSensor>:
uint16_t temperature = 0.0;


void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
     4f4:	0e 94 66 1d 	call	0x3acc	; 0x3acc <hih8120_initialise>
     4f8:	81 11       	cpse	r24, r1
     4fa:	09 c0       	rjmp	.+18     	; 0x50e <initialise_TempHumSensor+0x1a>
	{
		printf("Initialised  tempHum sensor");
     4fc:	8e ef       	ldi	r24, 0xFE	; 254
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	08 95       	ret
		// Driver initialised OK
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{printf("Something went wrong while initialising tempHum sensor");
     50e:	8a e1       	ldi	r24, 0x1A	; 26
     510:	94 e0       	ldi	r25, 0x04	; 4
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	08 95       	ret

00000520 <create_TempHumSensorTask>:
	}
	}


void create_TempHumSensorTask(){
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
	initialise_TempHumSensor();
     526:	e6 df       	rcall	.-52     	; 0x4f4 <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
     528:	e1 2c       	mov	r14, r1
     52a:	f1 2c       	mov	r15, r1
     52c:	00 e0       	ldi	r16, 0x00	; 0
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 ec       	ldi	r20, 0xC0	; 192
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	61 e5       	ldi	r22, 0x51	; 81
     538:	74 e0       	ldi	r23, 0x04	; 4
     53a:	8a ec       	ldi	r24, 0xCA	; 202
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY,
	NULL);
	
}
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <measure_Temp_Hum>:

void measure_Temp_Hum(){
	
	
	if ( HIH8120_OK != hih8120_wakeup() )
     54a:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <hih8120_wakeup>
     54e:	88 23       	and	r24, r24
     550:	41 f0       	breq	.+16     	; 0x562 <measure_Temp_Hum+0x18>
	{
		printf("Could not wake up temp hum sensor ");
     552:	8d e5       	ldi	r24, 0x5D	; 93
     554:	94 e0       	ldi	r25, 0x04	; 4
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(51));
     562:	63 e0       	ldi	r22, 0x03	; 3
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <vTaskDelay>
	if ( HIH8120_OK !=  hih8120_measure() )
     56e:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <hih8120_measure>
     572:	88 23       	and	r24, r24
     574:	41 f0       	breq	.+16     	; 0x586 <measure_Temp_Hum+0x3c>
	{
		printf("Could not measure temp hum sensor ");
     576:	80 e8       	ldi	r24, 0x80	; 128
     578:	94 e0       	ldi	r25, 0x04	; 4
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(51));
     586:	63 e0       	ldi	r22, 0x03	; 3
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <vTaskDelay>
     592:	08 95       	ret

00000594 <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(meassureEventGroup,TEMP_HUM_MEASSURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     594:	cc 24       	eor	r12, r12
     596:	ca 94       	dec	r12
     598:	dc 2c       	mov	r13, r12
     59a:	76 01       	movw	r14, r12
     59c:	01 e0       	ldi	r16, 0x01	; 1
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	44 e0       	ldi	r20, 0x04	; 4
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	80 91 f0 18 	lds	r24, 0x18F0	; 0x8018f0 <meassureEventGroup>
     5ac:	90 91 f1 18 	lds	r25, 0x18F1	; 0x8018f1 <meassureEventGroup+0x1>
     5b0:	5f d0       	rcall	.+190    	; 0x670 <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASSURE_BIT))
     5b2:	62 ff       	sbrs	r22, 2
		{
			measure_Temp_Hum();
     5b4:	ef cf       	rjmp	.-34     	; 0x594 <Temp_Hum_Main_Task>
     5b6:	c9 df       	rcall	.-110    	; 0x54a <measure_Temp_Hum>
			humidity = hih8120_getHumidityPercent_x10();
     5b8:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <hih8120_getHumidityPercent_x10>
     5bc:	90 93 09 09 	sts	0x0909, r25	; 0x800909 <humidity+0x1>
     5c0:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <humidity>
			temperature = hih8120_getTemperature_x10();
     5c4:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <hih8120_getTemperature_x10>
     5c8:	90 93 07 09 	sts	0x0907, r25	; 0x800907 <temperature+0x1>
     5cc:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <temperature>
			printf("Measuring done for temp and hum");
     5d0:	83 ea       	ldi	r24, 0xA3	; 163
     5d2:	94 e0       	ldi	r25, 0x04	; 4
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
			
			
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
     5dc:	48 e0       	ldi	r20, 0x08	; 8
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	80 91 ee 18 	lds	r24, 0x18EE	; 0x8018ee <dataReadyEventGroup>
     5e8:	90 91 ef 18 	lds	r25, 0x18EF	; 0x8018ef <dataReadyEventGroup+0x1>
     5ec:	e1 d0       	rcall	.+450    	; 0x7b0 <xEventGroupSetBits>
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	d0 cf       	rjmp	.-96     	; 0x594 <Temp_Hum_Main_Task>

000005f4 <TempHumSensor_getTemp>:
	
}
	
uint16_t TempHumSensor_getTemp(){
	return temperature;
}
     5f4:	80 91 06 09 	lds	r24, 0x0906	; 0x800906 <temperature>
     5f8:	90 91 07 09 	lds	r25, 0x0907	; 0x800907 <temperature+0x1>
     5fc:	08 95       	ret

000005fe <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
     5fe:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <humidity>
     602:	90 91 09 09 	lds	r25, 0x0909	; 0x800909 <humidity+0x1>
     606:	08 95       	ret

00000608 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     608:	0f 93       	push	r16
     60a:	01 11       	cpse	r16, r1
     60c:	0c c0       	rjmp	.+24     	; 0x626 <prvTestWaitCondition+0x1e>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	82 23       	and	r24, r18
     614:	93 23       	and	r25, r19
     616:	a4 23       	and	r26, r20
     618:	b5 23       	and	r27, r21
     61a:	89 2b       	or	r24, r25
     61c:	8a 2b       	or	r24, r26
     61e:	8b 2b       	or	r24, r27
     620:	79 f4       	brne	.+30     	; 0x640 <prvTestWaitCondition+0x38>
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	10 c0       	rjmp	.+32     	; 0x646 <prvTestWaitCondition+0x3e>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	82 23       	and	r24, r18
     62c:	93 23       	and	r25, r19
     62e:	a4 23       	and	r26, r20
     630:	b5 23       	and	r27, r21
     632:	28 17       	cp	r18, r24
     634:	39 07       	cpc	r19, r25
     636:	4a 07       	cpc	r20, r26
     638:	5b 07       	cpc	r21, r27
     63a:	21 f0       	breq	.+8      	; 0x644 <prvTestWaitCondition+0x3c>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	03 c0       	rjmp	.+6      	; 0x646 <prvTestWaitCondition+0x3e>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	01 c0       	rjmp	.+2      	; 0x646 <prvTestWaitCondition+0x3e>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	0f 91       	pop	r16
     648:	08 95       	ret

0000064a <xEventGroupCreate>:
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	8f e0       	ldi	r24, 0x0F	; 15
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	af d1       	rcall	.+862    	; 0x9b2 <pvPortMalloc>
     654:	ec 01       	movw	r28, r24
     656:	00 97       	sbiw	r24, 0x00	; 0
     658:	39 f0       	breq	.+14     	; 0x668 <xEventGroupCreate+0x1e>
     65a:	fc 01       	movw	r30, r24
     65c:	11 92       	st	Z+, r1
     65e:	11 92       	st	Z+, r1
     660:	11 92       	st	Z+, r1
     662:	11 92       	st	Z+, r1
     664:	cf 01       	movw	r24, r30
     666:	8b d2       	rcall	.+1302   	; 0xb7e <vListInitialise>
     668:	ce 01       	movw	r24, r28
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <xEventGroupWaitBits>:
     670:	2f 92       	push	r2
     672:	3f 92       	push	r3
     674:	4f 92       	push	r4
     676:	5f 92       	push	r5
     678:	6f 92       	push	r6
     67a:	7f 92       	push	r7
     67c:	8f 92       	push	r8
     67e:	9f 92       	push	r9
     680:	af 92       	push	r10
     682:	bf 92       	push	r11
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	ec 01       	movw	r28, r24
     696:	4a 01       	movw	r8, r20
     698:	5b 01       	movw	r10, r22
     69a:	62 2e       	mov	r6, r18
     69c:	70 2e       	mov	r7, r16
     69e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <vTaskSuspendAll>
     6a2:	28 80       	ld	r2, Y
     6a4:	39 80       	ldd	r3, Y+1	; 0x01
     6a6:	4a 80       	ldd	r4, Y+2	; 0x02
     6a8:	5b 80       	ldd	r5, Y+3	; 0x03
     6aa:	a5 01       	movw	r20, r10
     6ac:	94 01       	movw	r18, r8
     6ae:	c2 01       	movw	r24, r4
     6b0:	b1 01       	movw	r22, r2
     6b2:	aa df       	rcall	.-172    	; 0x608 <prvTestWaitCondition>
     6b4:	88 23       	and	r24, r24
     6b6:	a1 f0       	breq	.+40     	; 0x6e0 <xEventGroupWaitBits+0x70>
     6b8:	66 20       	and	r6, r6
     6ba:	89 f1       	breq	.+98     	; 0x71e <xEventGroupWaitBits+0xae>
     6bc:	d5 01       	movw	r26, r10
     6be:	c4 01       	movw	r24, r8
     6c0:	80 95       	com	r24
     6c2:	90 95       	com	r25
     6c4:	a0 95       	com	r26
     6c6:	b0 95       	com	r27
     6c8:	82 21       	and	r24, r2
     6ca:	93 21       	and	r25, r3
     6cc:	a4 21       	and	r26, r4
     6ce:	b5 21       	and	r27, r5
     6d0:	88 83       	st	Y, r24
     6d2:	99 83       	std	Y+1, r25	; 0x01
     6d4:	aa 83       	std	Y+2, r26	; 0x02
     6d6:	bb 83       	std	Y+3, r27	; 0x03
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
     6dc:	76 01       	movw	r14, r12
     6de:	22 c0       	rjmp	.+68     	; 0x724 <xEventGroupWaitBits+0xb4>
     6e0:	c1 14       	cp	r12, r1
     6e2:	d1 04       	cpc	r13, r1
     6e4:	e1 04       	cpc	r14, r1
     6e6:	f1 04       	cpc	r15, r1
     6e8:	e9 f0       	breq	.+58     	; 0x724 <xEventGroupWaitBits+0xb4>
     6ea:	61 10       	cpse	r6, r1
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <xEventGroupWaitBits+0x86>
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	ba 01       	movw	r22, r20
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <xEventGroupWaitBits+0x8e>
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	71 10       	cpse	r7, r1
     700:	74 60       	ori	r23, 0x04	; 4
     702:	48 29       	or	r20, r8
     704:	59 29       	or	r21, r9
     706:	6a 29       	or	r22, r10
     708:	7b 29       	or	r23, r11
     70a:	97 01       	movw	r18, r14
     70c:	86 01       	movw	r16, r12
     70e:	ce 01       	movw	r24, r28
     710:	04 96       	adiw	r24, 0x04	; 4
     712:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <vTaskPlaceOnUnorderedEventList>
     716:	21 2c       	mov	r2, r1
     718:	31 2c       	mov	r3, r1
     71a:	21 01       	movw	r4, r2
     71c:	03 c0       	rjmp	.+6      	; 0x724 <xEventGroupWaitBits+0xb4>
     71e:	c1 2c       	mov	r12, r1
     720:	d1 2c       	mov	r13, r1
     722:	76 01       	movw	r14, r12
     724:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskResumeAll>
     728:	cd 28       	or	r12, r13
     72a:	ce 28       	or	r12, r14
     72c:	cf 28       	or	r12, r15
     72e:	59 f1       	breq	.+86     	; 0x786 <xEventGroupWaitBits+0x116>
     730:	81 11       	cpse	r24, r1
     732:	01 c0       	rjmp	.+2      	; 0x736 <xEventGroupWaitBits+0xc6>
     734:	f2 d2       	rcall	.+1508   	; 0xd1a <vPortYield>
     736:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <uxTaskResetEventItemValue>
     73a:	6b 01       	movw	r12, r22
     73c:	7c 01       	movw	r14, r24
     73e:	91 fd       	sbrc	r25, 1
     740:	1f c0       	rjmp	.+62     	; 0x780 <xEventGroupWaitBits+0x110>
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	0f 92       	push	r0
     748:	c8 80       	ld	r12, Y
     74a:	d9 80       	ldd	r13, Y+1	; 0x01
     74c:	ea 80       	ldd	r14, Y+2	; 0x02
     74e:	fb 80       	ldd	r15, Y+3	; 0x03
     750:	07 2d       	mov	r16, r7
     752:	a5 01       	movw	r20, r10
     754:	94 01       	movw	r18, r8
     756:	c7 01       	movw	r24, r14
     758:	b6 01       	movw	r22, r12
     75a:	56 df       	rcall	.-340    	; 0x608 <prvTestWaitCondition>
     75c:	88 23       	and	r24, r24
     75e:	71 f0       	breq	.+28     	; 0x77c <xEventGroupWaitBits+0x10c>
     760:	66 20       	and	r6, r6
     762:	61 f0       	breq	.+24     	; 0x77c <xEventGroupWaitBits+0x10c>
     764:	80 94       	com	r8
     766:	90 94       	com	r9
     768:	a0 94       	com	r10
     76a:	b0 94       	com	r11
     76c:	8c 20       	and	r8, r12
     76e:	9d 20       	and	r9, r13
     770:	ae 20       	and	r10, r14
     772:	bf 20       	and	r11, r15
     774:	88 82       	st	Y, r8
     776:	99 82       	std	Y+1, r9	; 0x01
     778:	aa 82       	std	Y+2, r10	; 0x02
     77a:	bb 82       	std	Y+3, r11	; 0x03
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	16 01       	movw	r2, r12
     782:	27 01       	movw	r4, r14
     784:	55 24       	eor	r5, r5
     786:	c2 01       	movw	r24, r4
     788:	b1 01       	movw	r22, r2
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	9f 90       	pop	r9
     7a0:	8f 90       	pop	r8
     7a2:	7f 90       	pop	r7
     7a4:	6f 90       	pop	r6
     7a6:	5f 90       	pop	r5
     7a8:	4f 90       	pop	r4
     7aa:	3f 90       	pop	r3
     7ac:	2f 90       	pop	r2
     7ae:	08 95       	ret

000007b0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     7b0:	4f 92       	push	r4
     7b2:	5f 92       	push	r5
     7b4:	6f 92       	push	r6
     7b6:	7f 92       	push	r7
     7b8:	af 92       	push	r10
     7ba:	bf 92       	push	r11
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ec 01       	movw	r28, r24
     7ce:	6a 01       	movw	r12, r20
     7d0:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7d2:	8c 01       	movw	r16, r24
     7d4:	09 5f       	subi	r16, 0xF9	; 249
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     7d8:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     7dc:	eb 85       	ldd	r30, Y+11	; 0x0b
     7de:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     7e0:	88 81       	ld	r24, Y
     7e2:	99 81       	ldd	r25, Y+1	; 0x01
     7e4:	aa 81       	ldd	r26, Y+2	; 0x02
     7e6:	bb 81       	ldd	r27, Y+3	; 0x03
     7e8:	c8 2a       	or	r12, r24
     7ea:	d9 2a       	or	r13, r25
     7ec:	ea 2a       	or	r14, r26
     7ee:	fb 2a       	or	r15, r27
     7f0:	c8 82       	st	Y, r12
     7f2:	d9 82       	std	Y+1, r13	; 0x01
     7f4:	ea 82       	std	Y+2, r14	; 0x02
     7f6:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     7f8:	c1 2c       	mov	r12, r1
     7fa:	d1 2c       	mov	r13, r1
     7fc:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     7fe:	3d c0       	rjmp	.+122    	; 0x87a <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     800:	a4 80       	ldd	r10, Z+4	; 0x04
     802:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     804:	80 81       	ld	r24, Z
     806:	91 81       	ldd	r25, Z+1	; 0x01
     808:	a2 81       	ldd	r26, Z+2	; 0x02
     80a:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     80c:	ac 01       	movw	r20, r24
     80e:	bd 01       	movw	r22, r26
     810:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     812:	b2 fd       	sbrc	r27, 2
     814:	0e c0       	rjmp	.+28     	; 0x832 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     816:	48 80       	ld	r4, Y
     818:	59 80       	ldd	r5, Y+1	; 0x01
     81a:	6a 80       	ldd	r6, Y+2	; 0x02
     81c:	7b 80       	ldd	r7, Y+3	; 0x03
     81e:	44 22       	and	r4, r20
     820:	55 22       	and	r5, r21
     822:	66 22       	and	r6, r22
     824:	77 22       	and	r7, r23
     826:	45 28       	or	r4, r5
     828:	46 28       	or	r4, r6
     82a:	47 28       	or	r4, r7
     82c:	89 f4       	brne	.+34     	; 0x850 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	12 c0       	rjmp	.+36     	; 0x856 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     832:	48 80       	ld	r4, Y
     834:	59 80       	ldd	r5, Y+1	; 0x01
     836:	6a 80       	ldd	r6, Y+2	; 0x02
     838:	7b 80       	ldd	r7, Y+3	; 0x03
     83a:	44 22       	and	r4, r20
     83c:	55 22       	and	r5, r21
     83e:	66 22       	and	r6, r22
     840:	77 22       	and	r7, r23
     842:	44 15       	cp	r20, r4
     844:	55 05       	cpc	r21, r5
     846:	66 05       	cpc	r22, r6
     848:	77 05       	cpc	r23, r7
     84a:	21 f0       	breq	.+8      	; 0x854 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	03 c0       	rjmp	.+6      	; 0x856 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	01 c0       	rjmp	.+2      	; 0x856 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     854:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     856:	22 23       	and	r18, r18
     858:	71 f0       	breq	.+28     	; 0x876 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     85a:	b0 ff       	sbrs	r27, 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     85e:	c4 2a       	or	r12, r20
     860:	d5 2a       	or	r13, r21
     862:	e6 2a       	or	r14, r22
     864:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     866:	48 81       	ld	r20, Y
     868:	59 81       	ldd	r21, Y+1	; 0x01
     86a:	6a 81       	ldd	r22, Y+2	; 0x02
     86c:	7b 81       	ldd	r23, Y+3	; 0x03
     86e:	72 60       	ori	r23, 0x02	; 2
     870:	cf 01       	movw	r24, r30
     872:	0e 94 26 14 	call	0x284c	; 0x284c <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     876:	ea 2d       	mov	r30, r10
     878:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     87a:	e0 17       	cp	r30, r16
     87c:	f1 07       	cpc	r31, r17
     87e:	09 f0       	breq	.+2      	; 0x882 <xEventGroupSetBits+0xd2>
     880:	bf cf       	rjmp	.-130    	; 0x800 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     882:	c0 94       	com	r12
     884:	d0 94       	com	r13
     886:	e0 94       	com	r14
     888:	f0 94       	com	r15
     88a:	88 81       	ld	r24, Y
     88c:	99 81       	ldd	r25, Y+1	; 0x01
     88e:	aa 81       	ldd	r26, Y+2	; 0x02
     890:	bb 81       	ldd	r27, Y+3	; 0x03
     892:	c8 22       	and	r12, r24
     894:	d9 22       	and	r13, r25
     896:	ea 22       	and	r14, r26
     898:	fb 22       	and	r15, r27
     89a:	c8 82       	st	Y, r12
     89c:	d9 82       	std	Y+1, r13	; 0x01
     89e:	ea 82       	std	Y+2, r14	; 0x02
     8a0:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     8a2:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     8a6:	68 81       	ld	r22, Y
     8a8:	79 81       	ldd	r23, Y+1	; 0x01
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	9b 81       	ldd	r25, Y+3	; 0x03
}
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	bf 90       	pop	r11
     8c0:	af 90       	pop	r10
     8c2:	7f 90       	pop	r7
     8c4:	6f 90       	pop	r6
     8c6:	5f 90       	pop	r5
     8c8:	4f 90       	pop	r4
     8ca:	08 95       	ret

000008cc <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8cc:	e6 e1       	ldi	r30, 0x16	; 22
     8ce:	f9 e0       	ldi	r31, 0x09	; 9
     8d0:	aa e1       	ldi	r26, 0x1A	; 26
     8d2:	b9 e0       	ldi	r27, 0x09	; 9
     8d4:	b1 83       	std	Z+1, r27	; 0x01
     8d6:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     8d8:	13 82       	std	Z+3, r1	; 0x03
     8da:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     8dc:	e2 ec       	ldi	r30, 0xC2	; 194
     8de:	f6 e1       	ldi	r31, 0x16	; 22
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     8e0:	f0 93 15 09 	sts	0x0915, r31	; 0x800915 <pxEnd+0x1>
     8e4:	e0 93 14 09 	sts	0x0914, r30	; 0x800914 <pxEnd>
    pxEnd->xBlockSize = 0;
     8e8:	13 82       	std	Z+3, r1	; 0x03
     8ea:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     8ec:	11 82       	std	Z+1, r1	; 0x01
     8ee:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     8f0:	88 ea       	ldi	r24, 0xA8	; 168
     8f2:	9d e0       	ldi	r25, 0x0D	; 13
     8f4:	13 96       	adiw	r26, 0x03	; 3
     8f6:	9c 93       	st	X, r25
     8f8:	8e 93       	st	-X, r24
     8fa:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     8fc:	ed 93       	st	X+, r30
     8fe:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     900:	90 93 11 09 	sts	0x0911, r25	; 0x800911 <xMinimumEverFreeBytesRemaining+0x1>
     904:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     908:	90 93 13 09 	sts	0x0913, r25	; 0x800913 <xFreeBytesRemaining+0x1>
     90c:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e8       	ldi	r25, 0x80	; 128
     914:	90 93 0b 09 	sts	0x090B, r25	; 0x80090b <xBlockAllocatedBit+0x1>
     918:	80 93 0a 09 	sts	0x090A, r24	; 0x80090a <xBlockAllocatedBit>
     91c:	08 95       	ret

0000091e <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     924:	a6 e1       	ldi	r26, 0x16	; 22
     926:	b9 e0       	ldi	r27, 0x09	; 9
     928:	01 c0       	rjmp	.+2      	; 0x92c <prvInsertBlockIntoFreeList+0xe>
     92a:	df 01       	movw	r26, r30
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	11 97       	sbiw	r26, 0x01	; 1
     932:	ec 17       	cp	r30, r28
     934:	fd 07       	cpc	r31, r29
     936:	c8 f3       	brcs	.-14     	; 0x92a <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     938:	12 96       	adiw	r26, 0x02	; 2
     93a:	8d 91       	ld	r24, X+
     93c:	9c 91       	ld	r25, X
     93e:	13 97       	sbiw	r26, 0x03	; 3
     940:	9d 01       	movw	r18, r26
     942:	28 0f       	add	r18, r24
     944:	39 1f       	adc	r19, r25
     946:	c2 17       	cp	r28, r18
     948:	d3 07       	cpc	r29, r19
     94a:	49 f4       	brne	.+18     	; 0x95e <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     94c:	2a 81       	ldd	r18, Y+2	; 0x02
     94e:	3b 81       	ldd	r19, Y+3	; 0x03
     950:	82 0f       	add	r24, r18
     952:	93 1f       	adc	r25, r19
     954:	13 96       	adiw	r26, 0x03	; 3
     956:	9c 93       	st	X, r25
     958:	8e 93       	st	-X, r24
     95a:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     95c:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	9b 81       	ldd	r25, Y+3	; 0x03
     962:	9e 01       	movw	r18, r28
     964:	28 0f       	add	r18, r24
     966:	39 1f       	adc	r19, r25
     968:	e2 17       	cp	r30, r18
     96a:	f3 07       	cpc	r31, r19
     96c:	c1 f4       	brne	.+48     	; 0x99e <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     96e:	20 91 14 09 	lds	r18, 0x0914	; 0x800914 <pxEnd>
     972:	30 91 15 09 	lds	r19, 0x0915	; 0x800915 <pxEnd+0x1>
     976:	e2 17       	cp	r30, r18
     978:	f3 07       	cpc	r31, r19
     97a:	71 f0       	breq	.+28     	; 0x998 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     97c:	22 81       	ldd	r18, Z+2	; 0x02
     97e:	33 81       	ldd	r19, Z+3	; 0x03
     980:	82 0f       	add	r24, r18
     982:	93 1f       	adc	r25, r19
     984:	9b 83       	std	Y+3, r25	; 0x03
     986:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     988:	ed 91       	ld	r30, X+
     98a:	fc 91       	ld	r31, X
     98c:	11 97       	sbiw	r26, 0x01	; 1
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	99 83       	std	Y+1, r25	; 0x01
     994:	88 83       	st	Y, r24
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     998:	39 83       	std	Y+1, r19	; 0x01
     99a:	28 83       	st	Y, r18
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     99e:	f9 83       	std	Y+1, r31	; 0x01
     9a0:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     9a2:	ca 17       	cp	r28, r26
     9a4:	db 07       	cpc	r29, r27
     9a6:	11 f0       	breq	.+4      	; 0x9ac <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     9a8:	cd 93       	st	X+, r28
     9aa:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     9c0:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     9c4:	80 91 14 09 	lds	r24, 0x0914	; 0x800914 <pxEnd>
     9c8:	90 91 15 09 	lds	r25, 0x0915	; 0x800915 <pxEnd+0x1>
     9cc:	89 2b       	or	r24, r25
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     9d0:	7d df       	rcall	.-262    	; 0x8cc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     9d2:	80 91 0a 09 	lds	r24, 0x090A	; 0x80090a <xBlockAllocatedBit>
     9d6:	90 91 0b 09 	lds	r25, 0x090B	; 0x80090b <xBlockAllocatedBit+0x1>
     9da:	80 23       	and	r24, r16
     9dc:	91 23       	and	r25, r17
     9de:	89 2b       	or	r24, r25
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <pvPortMalloc+0x32>
     9e2:	76 c0       	rjmp	.+236    	; 0xad0 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     9e4:	01 15       	cp	r16, r1
     9e6:	11 05       	cpc	r17, r1
     9e8:	49 f0       	breq	.+18     	; 0x9fc <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     9ea:	c8 01       	movw	r24, r16
     9ec:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     9ee:	08 17       	cp	r16, r24
     9f0:	19 07       	cpc	r17, r25
     9f2:	18 f0       	brcs	.+6      	; 0x9fa <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     9f4:	00 e0       	ldi	r16, 0x00	; 0
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     9fa:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     9fc:	01 15       	cp	r16, r1
     9fe:	11 05       	cpc	r17, r1
     a00:	09 f4       	brne	.+2      	; 0xa04 <pvPortMalloc+0x52>
     a02:	69 c0       	rjmp	.+210    	; 0xad6 <pvPortMalloc+0x124>
     a04:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <xFreeBytesRemaining>
     a08:	90 91 13 09 	lds	r25, 0x0913	; 0x800913 <xFreeBytesRemaining+0x1>
     a0c:	80 17       	cp	r24, r16
     a0e:	91 07       	cpc	r25, r17
     a10:	08 f4       	brcc	.+2      	; 0xa14 <pvPortMalloc+0x62>
     a12:	64 c0       	rjmp	.+200    	; 0xadc <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a14:	c0 91 16 09 	lds	r28, 0x0916	; 0x800916 <xStart>
     a18:	d0 91 17 09 	lds	r29, 0x0917	; 0x800917 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a1c:	e6 e1       	ldi	r30, 0x16	; 22
     a1e:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a22:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a24:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	80 17       	cp	r24, r16
     a2c:	91 07       	cpc	r25, r17
     a2e:	20 f4       	brcc	.+8      	; 0xa38 <pvPortMalloc+0x86>
     a30:	88 81       	ld	r24, Y
     a32:	99 81       	ldd	r25, Y+1	; 0x01
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	a9 f7       	brne	.-22     	; 0xa22 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     a38:	80 91 14 09 	lds	r24, 0x0914	; 0x800914 <pxEnd>
     a3c:	90 91 15 09 	lds	r25, 0x0915	; 0x800915 <pxEnd+0x1>
     a40:	c8 17       	cp	r28, r24
     a42:	d9 07       	cpc	r29, r25
     a44:	09 f4       	brne	.+2      	; 0xa48 <pvPortMalloc+0x96>
     a46:	4d c0       	rjmp	.+154    	; 0xae2 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a48:	e0 80       	ld	r14, Z
     a4a:	f1 80       	ldd	r15, Z+1	; 0x01
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	e8 0e       	add	r14, r24
     a50:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a52:	88 81       	ld	r24, Y
     a54:	99 81       	ldd	r25, Y+1	; 0x01
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a5a:	2a 81       	ldd	r18, Y+2	; 0x02
     a5c:	3b 81       	ldd	r19, Y+3	; 0x03
     a5e:	20 1b       	sub	r18, r16
     a60:	31 0b       	sbc	r19, r17
     a62:	29 30       	cpi	r18, 0x09	; 9
     a64:	31 05       	cpc	r19, r1
     a66:	48 f0       	brcs	.+18     	; 0xa7a <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a68:	ce 01       	movw	r24, r28
     a6a:	80 0f       	add	r24, r16
     a6c:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a6e:	fc 01       	movw	r30, r24
     a70:	33 83       	std	Z+3, r19	; 0x03
     a72:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     a74:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     a76:	0a 83       	std	Y+2, r16	; 0x02
     a78:	52 df       	rcall	.-348    	; 0x91e <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     a7a:	2a 81       	ldd	r18, Y+2	; 0x02
     a7c:	3b 81       	ldd	r19, Y+3	; 0x03
     a7e:	80 91 12 09 	lds	r24, 0x0912	; 0x800912 <xFreeBytesRemaining>
     a82:	90 91 13 09 	lds	r25, 0x0913	; 0x800913 <xFreeBytesRemaining+0x1>
     a86:	82 1b       	sub	r24, r18
     a88:	93 0b       	sbc	r25, r19
     a8a:	90 93 13 09 	sts	0x0913, r25	; 0x800913 <xFreeBytesRemaining+0x1>
     a8e:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     a92:	40 91 10 09 	lds	r20, 0x0910	; 0x800910 <xMinimumEverFreeBytesRemaining>
     a96:	50 91 11 09 	lds	r21, 0x0911	; 0x800911 <xMinimumEverFreeBytesRemaining+0x1>
     a9a:	84 17       	cp	r24, r20
     a9c:	95 07       	cpc	r25, r21
     a9e:	20 f4       	brcc	.+8      	; 0xaa8 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     aa0:	90 93 11 09 	sts	0x0911, r25	; 0x800911 <xMinimumEverFreeBytesRemaining+0x1>
     aa4:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     aa8:	80 91 0a 09 	lds	r24, 0x090A	; 0x80090a <xBlockAllocatedBit>
     aac:	90 91 0b 09 	lds	r25, 0x090B	; 0x80090b <xBlockAllocatedBit+0x1>
     ab0:	28 2b       	or	r18, r24
     ab2:	39 2b       	or	r19, r25
     ab4:	3b 83       	std	Y+3, r19	; 0x03
     ab6:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     ab8:	19 82       	std	Y+1, r1	; 0x01
     aba:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     abc:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <xNumberOfSuccessfulAllocations>
     ac0:	90 91 0f 09 	lds	r25, 0x090F	; 0x80090f <xNumberOfSuccessfulAllocations+0x1>
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	90 93 0f 09 	sts	0x090F, r25	; 0x80090f <xNumberOfSuccessfulAllocations+0x1>
     aca:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <xNumberOfSuccessfulAllocations>
     ace:	0b c0       	rjmp	.+22     	; 0xae6 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     ad0:	e1 2c       	mov	r14, r1
     ad2:	f1 2c       	mov	r15, r1
     ad4:	08 c0       	rjmp	.+16     	; 0xae6 <pvPortMalloc+0x134>
     ad6:	e1 2c       	mov	r14, r1
     ad8:	f1 2c       	mov	r15, r1
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <pvPortMalloc+0x134>
     adc:	e1 2c       	mov	r14, r1
     ade:	f1 2c       	mov	r15, r1
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <pvPortMalloc+0x134>
     ae2:	e1 2c       	mov	r14, r1
     ae4:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     ae6:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     aea:	e1 14       	cp	r14, r1
     aec:	f1 04       	cpc	r15, r1
     aee:	11 f4       	brne	.+4      	; 0xaf4 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     af0:	0e 94 cf 1b 	call	0x379e	; 0x379e <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     af4:	c7 01       	movw	r24, r14
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	08 95       	ret

00000b04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	91 f1       	breq	.+100    	; 0xb74 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b10:	ec 01       	movw	r28, r24
     b12:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b14:	4a 81       	ldd	r20, Y+2	; 0x02
     b16:	5b 81       	ldd	r21, Y+3	; 0x03
     b18:	20 91 0a 09 	lds	r18, 0x090A	; 0x80090a <xBlockAllocatedBit>
     b1c:	30 91 0b 09 	lds	r19, 0x090B	; 0x80090b <xBlockAllocatedBit+0x1>
     b20:	ba 01       	movw	r22, r20
     b22:	62 23       	and	r22, r18
     b24:	73 23       	and	r23, r19
     b26:	67 2b       	or	r22, r23
     b28:	29 f1       	breq	.+74     	; 0xb74 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b2a:	68 81       	ld	r22, Y
     b2c:	79 81       	ldd	r23, Y+1	; 0x01
     b2e:	67 2b       	or	r22, r23
     b30:	09 f5       	brne	.+66     	; 0xb74 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b32:	20 95       	com	r18
     b34:	30 95       	com	r19
     b36:	24 23       	and	r18, r20
     b38:	35 23       	and	r19, r21
     b3a:	3b 83       	std	Y+3, r19	; 0x03
     b3c:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     b3e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     b42:	8a 81       	ldd	r24, Y+2	; 0x02
     b44:	9b 81       	ldd	r25, Y+3	; 0x03
     b46:	20 91 12 09 	lds	r18, 0x0912	; 0x800912 <xFreeBytesRemaining>
     b4a:	30 91 13 09 	lds	r19, 0x0913	; 0x800913 <xFreeBytesRemaining+0x1>
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
     b52:	90 93 13 09 	sts	0x0913, r25	; 0x800913 <xFreeBytesRemaining+0x1>
     b56:	80 93 12 09 	sts	0x0912, r24	; 0x800912 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b5a:	ce 01       	movw	r24, r28
     b5c:	e0 de       	rcall	.-576    	; 0x91e <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     b5e:	80 91 0c 09 	lds	r24, 0x090C	; 0x80090c <xNumberOfSuccessfulFrees>
     b62:	90 91 0d 09 	lds	r25, 0x090D	; 0x80090d <xNumberOfSuccessfulFrees+0x1>
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	90 93 0d 09 	sts	0x090D, r25	; 0x80090d <xNumberOfSuccessfulFrees+0x1>
     b6c:	80 93 0c 09 	sts	0x090C, r24	; 0x80090c <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     b70:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     b7e:	fc 01       	movw	r30, r24
     b80:	03 96       	adiw	r24, 0x03	; 3
     b82:	92 83       	std	Z+2, r25	; 0x02
     b84:	81 83       	std	Z+1, r24	; 0x01
     b86:	4f ef       	ldi	r20, 0xFF	; 255
     b88:	5f ef       	ldi	r21, 0xFF	; 255
     b8a:	ba 01       	movw	r22, r20
     b8c:	43 83       	std	Z+3, r20	; 0x03
     b8e:	54 83       	std	Z+4, r21	; 0x04
     b90:	65 83       	std	Z+5, r22	; 0x05
     b92:	76 83       	std	Z+6, r23	; 0x06
     b94:	90 87       	std	Z+8, r25	; 0x08
     b96:	87 83       	std	Z+7, r24	; 0x07
     b98:	92 87       	std	Z+10, r25	; 0x0a
     b9a:	81 87       	std	Z+9, r24	; 0x09
     b9c:	10 82       	st	Z, r1
     b9e:	08 95       	ret

00000ba0 <vListInitialiseItem>:
     ba0:	fc 01       	movw	r30, r24
     ba2:	13 86       	std	Z+11, r1	; 0x0b
     ba4:	12 86       	std	Z+10, r1	; 0x0a
     ba6:	08 95       	ret

00000ba8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bb2:	08 81       	ld	r16, Y
     bb4:	19 81       	ldd	r17, Y+1	; 0x01
     bb6:	2a 81       	ldd	r18, Y+2	; 0x02
     bb8:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bba:	0f 3f       	cpi	r16, 0xFF	; 255
     bbc:	4f ef       	ldi	r20, 0xFF	; 255
     bbe:	14 07       	cpc	r17, r20
     bc0:	24 07       	cpc	r18, r20
     bc2:	34 07       	cpc	r19, r20
     bc4:	21 f4       	brne	.+8      	; 0xbce <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     bc6:	fc 01       	movw	r30, r24
     bc8:	a1 85       	ldd	r26, Z+9	; 0x09
     bca:	b2 85       	ldd	r27, Z+10	; 0x0a
     bcc:	11 c0       	rjmp	.+34     	; 0xbf0 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     bce:	dc 01       	movw	r26, r24
     bd0:	13 96       	adiw	r26, 0x03	; 3
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <vListInsert+0x2e>
     bd4:	df 01       	movw	r26, r30
     bd6:	14 96       	adiw	r26, 0x04	; 4
     bd8:	ed 91       	ld	r30, X+
     bda:	fc 91       	ld	r31, X
     bdc:	15 97       	sbiw	r26, 0x05	; 5
     bde:	40 81       	ld	r20, Z
     be0:	51 81       	ldd	r21, Z+1	; 0x01
     be2:	62 81       	ldd	r22, Z+2	; 0x02
     be4:	73 81       	ldd	r23, Z+3	; 0x03
     be6:	04 17       	cp	r16, r20
     be8:	15 07       	cpc	r17, r21
     bea:	26 07       	cpc	r18, r22
     bec:	37 07       	cpc	r19, r23
     bee:	90 f7       	brcc	.-28     	; 0xbd4 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     bf0:	14 96       	adiw	r26, 0x04	; 4
     bf2:	ed 91       	ld	r30, X+
     bf4:	fc 91       	ld	r31, X
     bf6:	15 97       	sbiw	r26, 0x05	; 5
     bf8:	fd 83       	std	Y+5, r31	; 0x05
     bfa:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     bfc:	d7 83       	std	Z+7, r29	; 0x07
     bfe:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c00:	bf 83       	std	Y+7, r27	; 0x07
     c02:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c04:	15 96       	adiw	r26, 0x05	; 5
     c06:	dc 93       	st	X, r29
     c08:	ce 93       	st	-X, r28
     c0a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c0c:	9b 87       	std	Y+11, r25	; 0x0b
     c0e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c10:	fc 01       	movw	r30, r24
     c12:	20 81       	ld	r18, Z
     c14:	2f 5f       	subi	r18, 0xFF	; 255
     c16:	20 83       	st	Z, r18
}
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c28:	a2 85       	ldd	r26, Z+10	; 0x0a
     c2a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c2c:	c4 81       	ldd	r28, Z+4	; 0x04
     c2e:	d5 81       	ldd	r29, Z+5	; 0x05
     c30:	86 81       	ldd	r24, Z+6	; 0x06
     c32:	97 81       	ldd	r25, Z+7	; 0x07
     c34:	9f 83       	std	Y+7, r25	; 0x07
     c36:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c38:	c6 81       	ldd	r28, Z+6	; 0x06
     c3a:	d7 81       	ldd	r29, Z+7	; 0x07
     c3c:	84 81       	ldd	r24, Z+4	; 0x04
     c3e:	95 81       	ldd	r25, Z+5	; 0x05
     c40:	9d 83       	std	Y+5, r25	; 0x05
     c42:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c44:	11 96       	adiw	r26, 0x01	; 1
     c46:	8d 91       	ld	r24, X+
     c48:	9c 91       	ld	r25, X
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	e8 17       	cp	r30, r24
     c4e:	f9 07       	cpc	r31, r25
     c50:	31 f4       	brne	.+12     	; 0xc5e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c52:	86 81       	ldd	r24, Z+6	; 0x06
     c54:	97 81       	ldd	r25, Z+7	; 0x07
     c56:	12 96       	adiw	r26, 0x02	; 2
     c58:	9c 93       	st	X, r25
     c5a:	8e 93       	st	-X, r24
     c5c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c5e:	13 86       	std	Z+11, r1	; 0x0b
     c60:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     c62:	8c 91       	ld	r24, X
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c68:	8c 91       	ld	r24, X
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     c70:	a8 95       	wdr
     c72:	90 ec       	ldi	r25, 0xC0	; 192
     c74:	88 e1       	ldi	r24, 0x18	; 24
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	a8 95       	wdr
     c7c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c86:	08 95       	ret

00000c88 <pxPortInitialiseStack>:
     c88:	fc 01       	movw	r30, r24
     c8a:	60 83       	st	Z, r22
     c8c:	31 97       	sbiw	r30, 0x01	; 1
     c8e:	70 83       	st	Z, r23
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	10 82       	st	Z, r1
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	10 82       	st	Z, r1
     c98:	31 97       	sbiw	r30, 0x01	; 1
     c9a:	20 e8       	ldi	r18, 0x80	; 128
     c9c:	20 83       	st	Z, r18
     c9e:	31 97       	sbiw	r30, 0x01	; 1
     ca0:	10 82       	st	Z, r1
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	10 82       	st	Z, r1
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	10 82       	st	Z, r1
     caa:	77 97       	sbiw	r30, 0x17	; 23
     cac:	40 83       	st	Z, r20
     cae:	31 97       	sbiw	r30, 0x01	; 1
     cb0:	50 83       	st	Z, r21
     cb2:	86 97       	sbiw	r24, 0x26	; 38
     cb4:	08 95       	ret

00000cb6 <xPortStartScheduler>:
     cb6:	dc df       	rcall	.-72     	; 0xc70 <prvSetupTimerInterrupt>
     cb8:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
     cbc:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
     cc0:	cd 91       	ld	r28, X+
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	dd 91       	ld	r29, X+
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	cf 90       	pop	r12
     cf0:	bf 90       	pop	r11
     cf2:	af 90       	pop	r10
     cf4:	9f 90       	pop	r9
     cf6:	8f 90       	pop	r8
     cf8:	7f 90       	pop	r7
     cfa:	6f 90       	pop	r6
     cfc:	5f 90       	pop	r5
     cfe:	4f 90       	pop	r4
     d00:	3f 90       	pop	r3
     d02:	2f 90       	pop	r2
     d04:	1f 90       	pop	r1
     d06:	0f 90       	pop	r0
     d08:	0c be       	out	0x3c, r0	; 60
     d0a:	0f 90       	pop	r0
     d0c:	0b be       	out	0x3b, r0	; 59
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	08 95       	ret
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	08 95       	ret

00000d1a <vPortYield>:
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	0f 92       	push	r0
     d22:	0b b6       	in	r0, 0x3b	; 59
     d24:	0f 92       	push	r0
     d26:	0c b6       	in	r0, 0x3c	; 60
     d28:	0f 92       	push	r0
     d2a:	1f 92       	push	r1
     d2c:	11 24       	eor	r1, r1
     d2e:	2f 92       	push	r2
     d30:	3f 92       	push	r3
     d32:	4f 92       	push	r4
     d34:	5f 92       	push	r5
     d36:	6f 92       	push	r6
     d38:	7f 92       	push	r7
     d3a:	8f 92       	push	r8
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
     d6a:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
     d6e:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
     d72:	0d b6       	in	r0, 0x3d	; 61
     d74:	0d 92       	st	X+, r0
     d76:	0e b6       	in	r0, 0x3e	; 62
     d78:	0d 92       	st	X+, r0
     d7a:	0e 94 6f 12 	call	0x24de	; 0x24de <vTaskSwitchContext>
     d7e:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
     d82:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
     d86:	cd 91       	ld	r28, X+
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	dd 91       	ld	r29, X+
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
     db6:	bf 90       	pop	r11
     db8:	af 90       	pop	r10
     dba:	9f 90       	pop	r9
     dbc:	8f 90       	pop	r8
     dbe:	7f 90       	pop	r7
     dc0:	6f 90       	pop	r6
     dc2:	5f 90       	pop	r5
     dc4:	4f 90       	pop	r4
     dc6:	3f 90       	pop	r3
     dc8:	2f 90       	pop	r2
     dca:	1f 90       	pop	r1
     dcc:	0f 90       	pop	r0
     dce:	0c be       	out	0x3c, r0	; 60
     dd0:	0f 90       	pop	r0
     dd2:	0b be       	out	0x3b, r0	; 59
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	08 95       	ret

00000ddc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	0f 92       	push	r0
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	0c b6       	in	r0, 0x3c	; 60
     dea:	0f 92       	push	r0
     dec:	1f 92       	push	r1
     dee:	11 24       	eor	r1, r1
     df0:	2f 92       	push	r2
     df2:	3f 92       	push	r3
     df4:	4f 92       	push	r4
     df6:	5f 92       	push	r5
     df8:	6f 92       	push	r6
     dfa:	7f 92       	push	r7
     dfc:	8f 92       	push	r8
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	2f 93       	push	r18
     e12:	3f 93       	push	r19
     e14:	4f 93       	push	r20
     e16:	5f 93       	push	r21
     e18:	6f 93       	push	r22
     e1a:	7f 93       	push	r23
     e1c:	8f 93       	push	r24
     e1e:	9f 93       	push	r25
     e20:	af 93       	push	r26
     e22:	bf 93       	push	r27
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
     e30:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
     e34:	0d b6       	in	r0, 0x3d	; 61
     e36:	0d 92       	st	X+, r0
     e38:	0e b6       	in	r0, 0x3e	; 62
     e3a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     e3c:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     e3e:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <xTaskIncrementTick>
     e42:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e44:	0e 94 6f 12 	call	0x24de	; 0x24de <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     e48:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
     e4c:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
     e50:	cd 91       	ld	r28, X+
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	dd 91       	ld	r29, X+
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	bf 90       	pop	r11
     e82:	af 90       	pop	r10
     e84:	9f 90       	pop	r9
     e86:	8f 90       	pop	r8
     e88:	7f 90       	pop	r7
     e8a:	6f 90       	pop	r6
     e8c:	5f 90       	pop	r5
     e8e:	4f 90       	pop	r4
     e90:	3f 90       	pop	r3
     e92:	2f 90       	pop	r2
     e94:	1f 90       	pop	r1
     e96:	0f 90       	pop	r0
     e98:	0c be       	out	0x3c, r0	; 60
     e9a:	0f 90       	pop	r0
     e9c:	0b be       	out	0x3b, r0	; 59
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ea4:	08 95       	ret

00000ea6 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     ea6:	9a df       	rcall	.-204    	; 0xddc <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ea8:	18 95       	reti

00000eaa <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	0f 92       	push	r0
     eb0:	fc 01       	movw	r30, r24
     eb2:	86 8d       	ldd	r24, Z+30	; 0x1e
     eb4:	81 11       	cpse	r24, r1
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <prvIsQueueEmpty+0x12>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	01 c0       	rjmp	.+2      	; 0xebe <prvIsQueueEmpty+0x14>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	08 95       	ret

00000ec4 <prvIsQueueFull>:
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	0f 92       	push	r0
     eca:	fc 01       	movw	r30, r24
     ecc:	26 8d       	ldd	r18, Z+30	; 0x1e
     ece:	87 8d       	ldd	r24, Z+31	; 0x1f
     ed0:	28 13       	cpse	r18, r24
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <prvIsQueueFull+0x14>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <prvIsQueueFull+0x16>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	08 95       	ret

00000ee0 <prvCopyDataToQueue>:
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
     eea:	04 2f       	mov	r16, r20
     eec:	1e 8d       	ldd	r17, Y+30	; 0x1e
     eee:	48 a1       	ldd	r20, Y+32	; 0x20
     ef0:	41 11       	cpse	r20, r1
     ef2:	0c c0       	rjmp	.+24     	; 0xf0c <prvCopyDataToQueue+0x2c>
     ef4:	88 81       	ld	r24, Y
     ef6:	99 81       	ldd	r25, Y+1	; 0x01
     ef8:	89 2b       	or	r24, r25
     efa:	09 f0       	breq	.+2      	; 0xefe <prvCopyDataToQueue+0x1e>
     efc:	42 c0       	rjmp	.+132    	; 0xf82 <prvCopyDataToQueue+0xa2>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <xTaskPriorityDisinherit>
     f06:	1d 82       	std	Y+5, r1	; 0x05
     f08:	1c 82       	std	Y+4, r1	; 0x04
     f0a:	42 c0       	rjmp	.+132    	; 0xf90 <prvCopyDataToQueue+0xb0>
     f0c:	01 11       	cpse	r16, r1
     f0e:	17 c0       	rjmp	.+46     	; 0xf3e <prvCopyDataToQueue+0x5e>
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	9b 81       	ldd	r25, Y+3	; 0x03
     f16:	0e 94 16 32 	call	0x642c	; 0x642c <memcpy>
     f1a:	28 a1       	ldd	r18, Y+32	; 0x20
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	82 0f       	add	r24, r18
     f22:	91 1d       	adc	r25, r1
     f24:	9b 83       	std	Y+3, r25	; 0x03
     f26:	8a 83       	std	Y+2, r24	; 0x02
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	82 17       	cp	r24, r18
     f2e:	93 07       	cpc	r25, r19
     f30:	50 f1       	brcs	.+84     	; 0xf86 <prvCopyDataToQueue+0xa6>
     f32:	88 81       	ld	r24, Y
     f34:	99 81       	ldd	r25, Y+1	; 0x01
     f36:	9b 83       	std	Y+3, r25	; 0x03
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	29 c0       	rjmp	.+82     	; 0xf90 <prvCopyDataToQueue+0xb0>
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	8e 81       	ldd	r24, Y+6	; 0x06
     f42:	9f 81       	ldd	r25, Y+7	; 0x07
     f44:	0e 94 16 32 	call	0x642c	; 0x642c <memcpy>
     f48:	88 a1       	ldd	r24, Y+32	; 0x20
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	91 95       	neg	r25
     f4e:	81 95       	neg	r24
     f50:	91 09       	sbc	r25, r1
     f52:	2e 81       	ldd	r18, Y+6	; 0x06
     f54:	3f 81       	ldd	r19, Y+7	; 0x07
     f56:	28 0f       	add	r18, r24
     f58:	39 1f       	adc	r19, r25
     f5a:	3f 83       	std	Y+7, r19	; 0x07
     f5c:	2e 83       	std	Y+6, r18	; 0x06
     f5e:	48 81       	ld	r20, Y
     f60:	59 81       	ldd	r21, Y+1	; 0x01
     f62:	24 17       	cp	r18, r20
     f64:	35 07       	cpc	r19, r21
     f66:	30 f4       	brcc	.+12     	; 0xf74 <prvCopyDataToQueue+0x94>
     f68:	2c 81       	ldd	r18, Y+4	; 0x04
     f6a:	3d 81       	ldd	r19, Y+5	; 0x05
     f6c:	82 0f       	add	r24, r18
     f6e:	93 1f       	adc	r25, r19
     f70:	9f 83       	std	Y+7, r25	; 0x07
     f72:	8e 83       	std	Y+6, r24	; 0x06
     f74:	02 30       	cpi	r16, 0x02	; 2
     f76:	49 f4       	brne	.+18     	; 0xf8a <prvCopyDataToQueue+0xaa>
     f78:	11 23       	and	r17, r17
     f7a:	49 f0       	breq	.+18     	; 0xf8e <prvCopyDataToQueue+0xae>
     f7c:	11 50       	subi	r17, 0x01	; 1
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <prvCopyDataToQueue+0xb0>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <prvCopyDataToQueue+0xb0>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <prvCopyDataToQueue+0xb0>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <prvCopyDataToQueue+0xb0>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	1f 5f       	subi	r17, 0xFF	; 255
     f92:	1e 8f       	std	Y+30, r17	; 0x1e
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <prvCopyDataFromQueue>:
     f9e:	fc 01       	movw	r30, r24
     fa0:	40 a1       	ldd	r20, Z+32	; 0x20
     fa2:	44 23       	and	r20, r20
     fa4:	a9 f0       	breq	.+42     	; 0xfd0 <prvCopyDataFromQueue+0x32>
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	26 81       	ldd	r18, Z+6	; 0x06
     faa:	37 81       	ldd	r19, Z+7	; 0x07
     fac:	24 0f       	add	r18, r20
     fae:	35 1f       	adc	r19, r21
     fb0:	37 83       	std	Z+7, r19	; 0x07
     fb2:	26 83       	std	Z+6, r18	; 0x06
     fb4:	84 81       	ldd	r24, Z+4	; 0x04
     fb6:	95 81       	ldd	r25, Z+5	; 0x05
     fb8:	28 17       	cp	r18, r24
     fba:	39 07       	cpc	r19, r25
     fbc:	20 f0       	brcs	.+8      	; 0xfc6 <prvCopyDataFromQueue+0x28>
     fbe:	80 81       	ld	r24, Z
     fc0:	91 81       	ldd	r25, Z+1	; 0x01
     fc2:	97 83       	std	Z+7, r25	; 0x07
     fc4:	86 83       	std	Z+6, r24	; 0x06
     fc6:	cb 01       	movw	r24, r22
     fc8:	66 81       	ldd	r22, Z+6	; 0x06
     fca:	77 81       	ldd	r23, Z+7	; 0x07
     fcc:	0c 94 16 32 	jmp	0x642c	; 0x642c <memcpy>
     fd0:	08 95       	ret

00000fd2 <prvUnlockQueue>:
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	ec 01       	movw	r28, r24
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	0f 92       	push	r0
     fe0:	1a a1       	ldd	r17, Y+34	; 0x22
     fe2:	0b c0       	rjmp	.+22     	; 0xffa <prvUnlockQueue+0x28>
     fe4:	8b 89       	ldd	r24, Y+19	; 0x13
     fe6:	88 23       	and	r24, r24
     fe8:	51 f0       	breq	.+20     	; 0xffe <prvUnlockQueue+0x2c>
     fea:	ce 01       	movw	r24, r28
     fec:	43 96       	adiw	r24, 0x13	; 19
     fee:	0e 94 77 13 	call	0x26ee	; 0x26ee <xTaskRemoveFromEventList>
     ff2:	81 11       	cpse	r24, r1
     ff4:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <vTaskMissedYield>
     ff8:	11 50       	subi	r17, 0x01	; 1
     ffa:	11 16       	cp	r1, r17
     ffc:	9c f3       	brlt	.-26     	; 0xfe4 <prvUnlockQueue+0x12>
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	8a a3       	std	Y+34, r24	; 0x22
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	0f 92       	push	r0
    100c:	19 a1       	ldd	r17, Y+33	; 0x21
    100e:	0b c0       	rjmp	.+22     	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    1010:	88 85       	ldd	r24, Y+8	; 0x08
    1012:	88 23       	and	r24, r24
    1014:	51 f0       	breq	.+20     	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1016:	ce 01       	movw	r24, r28
    1018:	08 96       	adiw	r24, 0x08	; 8
    101a:	0e 94 77 13 	call	0x26ee	; 0x26ee <xTaskRemoveFromEventList>
    101e:	81 11       	cpse	r24, r1
    1020:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <vTaskMissedYield>
    1024:	11 50       	subi	r17, 0x01	; 1
    1026:	11 16       	cp	r1, r17
    1028:	9c f3       	brlt	.-26     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	89 a3       	std	Y+33, r24	; 0x21
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	08 95       	ret

0000103a <xQueueGenericReset>:
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ec 01       	movw	r28, r24
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	0f 92       	push	r0
    1046:	e8 81       	ld	r30, Y
    1048:	f9 81       	ldd	r31, Y+1	; 0x01
    104a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    104c:	28 a1       	ldd	r18, Y+32	; 0x20
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	82 9f       	mul	r24, r18
    1054:	a0 01       	movw	r20, r0
    1056:	83 9f       	mul	r24, r19
    1058:	50 0d       	add	r21, r0
    105a:	92 9f       	mul	r25, r18
    105c:	50 0d       	add	r21, r0
    105e:	11 24       	eor	r1, r1
    1060:	4e 0f       	add	r20, r30
    1062:	5f 1f       	adc	r21, r31
    1064:	5d 83       	std	Y+5, r21	; 0x05
    1066:	4c 83       	std	Y+4, r20	; 0x04
    1068:	1e 8e       	std	Y+30, r1	; 0x1e
    106a:	fb 83       	std	Y+3, r31	; 0x03
    106c:	ea 83       	std	Y+2, r30	; 0x02
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	28 9f       	mul	r18, r24
    1072:	a0 01       	movw	r20, r0
    1074:	29 9f       	mul	r18, r25
    1076:	50 0d       	add	r21, r0
    1078:	38 9f       	mul	r19, r24
    107a:	50 0d       	add	r21, r0
    107c:	11 24       	eor	r1, r1
    107e:	cf 01       	movw	r24, r30
    1080:	84 0f       	add	r24, r20
    1082:	95 1f       	adc	r25, r21
    1084:	9f 83       	std	Y+7, r25	; 0x07
    1086:	8e 83       	std	Y+6, r24	; 0x06
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	89 a3       	std	Y+33, r24	; 0x21
    108c:	8a a3       	std	Y+34, r24	; 0x22
    108e:	61 11       	cpse	r22, r1
    1090:	0b c0       	rjmp	.+22     	; 0x10a8 <xQueueGenericReset+0x6e>
    1092:	88 85       	ldd	r24, Y+8	; 0x08
    1094:	88 23       	and	r24, r24
    1096:	71 f0       	breq	.+28     	; 0x10b4 <xQueueGenericReset+0x7a>
    1098:	ce 01       	movw	r24, r28
    109a:	08 96       	adiw	r24, 0x08	; 8
    109c:	0e 94 77 13 	call	0x26ee	; 0x26ee <xTaskRemoveFromEventList>
    10a0:	88 23       	and	r24, r24
    10a2:	41 f0       	breq	.+16     	; 0x10b4 <xQueueGenericReset+0x7a>
    10a4:	3a de       	rcall	.-908    	; 0xd1a <vPortYield>
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <xQueueGenericReset+0x7a>
    10a8:	ce 01       	movw	r24, r28
    10aa:	08 96       	adiw	r24, 0x08	; 8
    10ac:	68 dd       	rcall	.-1328   	; 0xb7e <vListInitialise>
    10ae:	ce 01       	movw	r24, r28
    10b0:	43 96       	adiw	r24, 0x13	; 19
    10b2:	65 dd       	rcall	.-1334   	; 0xb7e <vListInitialise>
    10b4:	0f 90       	pop	r0
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <prvInitialiseNewQueue>:
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	f8 01       	movw	r30, r16
    10c6:	61 11       	cpse	r22, r1
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <prvInitialiseNewQueue+0x10>
    10ca:	11 83       	std	Z+1, r17	; 0x01
    10cc:	00 83       	st	Z, r16
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <prvInitialiseNewQueue+0x14>
    10d0:	51 83       	std	Z+1, r21	; 0x01
    10d2:	40 83       	st	Z, r20
    10d4:	87 8f       	std	Z+31, r24	; 0x1f
    10d6:	60 a3       	std	Z+32, r22	; 0x20
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	cf 01       	movw	r24, r30
    10dc:	ae df       	rcall	.-164    	; 0x103a <xQueueGenericReset>
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret

000010e4 <xQueueGenericCreate>:
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	f8 2e       	mov	r15, r24
    10f4:	e6 2e       	mov	r14, r22
    10f6:	d4 2e       	mov	r13, r20
    10f8:	86 9f       	mul	r24, r22
    10fa:	c0 01       	movw	r24, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	83 96       	adiw	r24, 0x23	; 35
    1100:	58 dc       	rcall	.-1872   	; 0x9b2 <pvPortMalloc>
    1102:	ec 01       	movw	r28, r24
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	41 f0       	breq	.+16     	; 0x1118 <xQueueGenericCreate+0x34>
    1108:	8c 01       	movw	r16, r24
    110a:	2d 2d       	mov	r18, r13
    110c:	ac 01       	movw	r20, r24
    110e:	4d 5d       	subi	r20, 0xDD	; 221
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	6e 2d       	mov	r22, r14
    1114:	8f 2d       	mov	r24, r15
    1116:	d4 df       	rcall	.-88     	; 0x10c0 <prvInitialiseNewQueue>
    1118:	ce 01       	movw	r24, r28
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	08 95       	ret

0000112a <xQueueGenericSend>:
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	29 97       	sbiw	r28, 0x09	; 9
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	7c 01       	movw	r14, r24
    114c:	6b 01       	movw	r12, r22
    114e:	2e 83       	std	Y+6, r18	; 0x06
    1150:	3f 83       	std	Y+7, r19	; 0x07
    1152:	48 87       	std	Y+8, r20	; 0x08
    1154:	59 87       	std	Y+9, r21	; 0x09
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	0f 92       	push	r0
    115e:	f7 01       	movw	r30, r14
    1160:	96 8d       	ldd	r25, Z+30	; 0x1e
    1162:	87 8d       	ldd	r24, Z+31	; 0x1f
    1164:	98 17       	cp	r25, r24
    1166:	10 f0       	brcs	.+4      	; 0x116c <xQueueGenericSend+0x42>
    1168:	02 30       	cpi	r16, 0x02	; 2
    116a:	b1 f4       	brne	.+44     	; 0x1198 <xQueueGenericSend+0x6e>
    116c:	40 2f       	mov	r20, r16
    116e:	b6 01       	movw	r22, r12
    1170:	c7 01       	movw	r24, r14
    1172:	b6 de       	rcall	.-660    	; 0xee0 <prvCopyDataToQueue>
    1174:	f7 01       	movw	r30, r14
    1176:	93 89       	ldd	r25, Z+19	; 0x13
    1178:	99 23       	and	r25, r25
    117a:	41 f0       	breq	.+16     	; 0x118c <xQueueGenericSend+0x62>
    117c:	c7 01       	movw	r24, r14
    117e:	43 96       	adiw	r24, 0x13	; 19
    1180:	0e 94 77 13 	call	0x26ee	; 0x26ee <xTaskRemoveFromEventList>
    1184:	88 23       	and	r24, r24
    1186:	21 f0       	breq	.+8      	; 0x1190 <xQueueGenericSend+0x66>
    1188:	c8 dd       	rcall	.-1136   	; 0xd1a <vPortYield>
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <xQueueGenericSend+0x66>
    118c:	81 11       	cpse	r24, r1
    118e:	c5 dd       	rcall	.-1142   	; 0xd1a <vPortYield>
    1190:	0f 90       	pop	r0
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	4b c0       	rjmp	.+150    	; 0x122e <xQueueGenericSend+0x104>
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	9f 81       	ldd	r25, Y+7	; 0x07
    119c:	a8 85       	ldd	r26, Y+8	; 0x08
    119e:	b9 85       	ldd	r27, Y+9	; 0x09
    11a0:	89 2b       	or	r24, r25
    11a2:	8a 2b       	or	r24, r26
    11a4:	8b 2b       	or	r24, r27
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <xQueueGenericSend+0x86>
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	3f c0       	rjmp	.+126    	; 0x122e <xQueueGenericSend+0x104>
    11b0:	11 11       	cpse	r17, r1
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <xQueueGenericSend+0x94>
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	0e 94 d6 14 	call	0x29ac	; 0x29ac <vTaskInternalSetTimeOutState>
    11bc:	11 e0       	ldi	r17, 0x01	; 1
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	f1 d6       	rcall	.+3554   	; 0x1fa6 <vTaskSuspendAll>
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	0f 92       	push	r0
    11ca:	f7 01       	movw	r30, r14
    11cc:	81 a1       	ldd	r24, Z+33	; 0x21
    11ce:	8f 3f       	cpi	r24, 0xFF	; 255
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <xQueueGenericSend+0xaa>
    11d2:	11 a2       	std	Z+33, r1	; 0x21
    11d4:	f7 01       	movw	r30, r14
    11d6:	82 a1       	ldd	r24, Z+34	; 0x22
    11d8:	8f 3f       	cpi	r24, 0xFF	; 255
    11da:	09 f4       	brne	.+2      	; 0x11de <xQueueGenericSend+0xb4>
    11dc:	12 a2       	std	Z+34, r1	; 0x22
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	be 01       	movw	r22, r28
    11e4:	6a 5f       	subi	r22, 0xFA	; 250
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskCheckForTimeOut>
    11f0:	81 11       	cpse	r24, r1
    11f2:	19 c0       	rjmp	.+50     	; 0x1226 <xQueueGenericSend+0xfc>
    11f4:	c7 01       	movw	r24, r14
    11f6:	66 de       	rcall	.-820    	; 0xec4 <prvIsQueueFull>
    11f8:	88 23       	and	r24, r24
    11fa:	81 f0       	breq	.+32     	; 0x121c <xQueueGenericSend+0xf2>
    11fc:	4e 81       	ldd	r20, Y+6	; 0x06
    11fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1200:	68 85       	ldd	r22, Y+8	; 0x08
    1202:	79 85       	ldd	r23, Y+9	; 0x09
    1204:	c7 01       	movw	r24, r14
    1206:	08 96       	adiw	r24, 0x08	; 8
    1208:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <vTaskPlaceOnEventList>
    120c:	c7 01       	movw	r24, r14
    120e:	e1 de       	rcall	.-574    	; 0xfd2 <prvUnlockQueue>
    1210:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskResumeAll>
    1214:	81 11       	cpse	r24, r1
    1216:	a0 cf       	rjmp	.-192    	; 0x1158 <xQueueGenericSend+0x2e>
    1218:	80 dd       	rcall	.-1280   	; 0xd1a <vPortYield>
    121a:	9e cf       	rjmp	.-196    	; 0x1158 <xQueueGenericSend+0x2e>
    121c:	c7 01       	movw	r24, r14
    121e:	d9 de       	rcall	.-590    	; 0xfd2 <prvUnlockQueue>
    1220:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskResumeAll>
    1224:	99 cf       	rjmp	.-206    	; 0x1158 <xQueueGenericSend+0x2e>
    1226:	c7 01       	movw	r24, r14
    1228:	d4 de       	rcall	.-600    	; 0xfd2 <prvUnlockQueue>
    122a:	fd d7       	rcall	.+4090   	; 0x2226 <xTaskResumeAll>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	29 96       	adiw	r28, 0x09	; 9
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	df 90       	pop	r13
    1248:	cf 90       	pop	r12
    124a:	08 95       	ret

0000124c <xQueueGenericSendFromISR>:
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	8a 01       	movw	r16, r20
    125a:	fc 01       	movw	r30, r24
    125c:	56 8d       	ldd	r21, Z+30	; 0x1e
    125e:	37 8d       	ldd	r19, Z+31	; 0x1f
    1260:	53 17       	cp	r21, r19
    1262:	10 f0       	brcs	.+4      	; 0x1268 <xQueueGenericSendFromISR+0x1c>
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	f9 f4       	brne	.+62     	; 0x12a6 <xQueueGenericSendFromISR+0x5a>
    1268:	42 2f       	mov	r20, r18
    126a:	78 01       	movw	r14, r16
    126c:	ec 01       	movw	r28, r24
    126e:	1a a1       	ldd	r17, Y+34	; 0x22
    1270:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1272:	ce 01       	movw	r24, r28
    1274:	35 de       	rcall	.-918    	; 0xee0 <prvCopyDataToQueue>
    1276:	1f 3f       	cpi	r17, 0xFF	; 255
    1278:	81 f4       	brne	.+32     	; 0x129a <xQueueGenericSendFromISR+0x4e>
    127a:	8b 89       	ldd	r24, Y+19	; 0x13
    127c:	88 23       	and	r24, r24
    127e:	a9 f0       	breq	.+42     	; 0x12aa <xQueueGenericSendFromISR+0x5e>
    1280:	ce 01       	movw	r24, r28
    1282:	43 96       	adiw	r24, 0x13	; 19
    1284:	0e 94 77 13 	call	0x26ee	; 0x26ee <xTaskRemoveFromEventList>
    1288:	88 23       	and	r24, r24
    128a:	89 f0       	breq	.+34     	; 0x12ae <xQueueGenericSendFromISR+0x62>
    128c:	e1 14       	cp	r14, r1
    128e:	f1 04       	cpc	r15, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <xQueueGenericSendFromISR+0x66>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	f7 01       	movw	r30, r14
    1296:	80 83       	st	Z, r24
    1298:	0d c0       	rjmp	.+26     	; 0x12b4 <xQueueGenericSendFromISR+0x68>
    129a:	ff 24       	eor	r15, r15
    129c:	f3 94       	inc	r15
    129e:	f1 0e       	add	r15, r17
    12a0:	fa a2       	std	Y+34, r15	; 0x22
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	07 c0       	rjmp	.+14     	; 0x12b4 <xQueueGenericSendFromISR+0x68>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <xQueueGenericSendFromISR+0x68>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <xQueueGenericSendFromISR+0x68>
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <xQueueGenericSendFromISR+0x68>
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	08 95       	ret

000012c2 <xQueueReceive>:
    12c2:	cf 92       	push	r12
    12c4:	df 92       	push	r13
    12c6:	ef 92       	push	r14
    12c8:	ff 92       	push	r15
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	29 97       	sbiw	r28, 0x09	; 9
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	8c 01       	movw	r16, r24
    12e4:	6b 01       	movw	r12, r22
    12e6:	2e 83       	std	Y+6, r18	; 0x06
    12e8:	3f 83       	std	Y+7, r19	; 0x07
    12ea:	48 87       	std	Y+8, r20	; 0x08
    12ec:	59 87       	std	Y+9, r21	; 0x09
    12ee:	e1 2c       	mov	r14, r1
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	0f 92       	push	r0
    12f6:	f8 01       	movw	r30, r16
    12f8:	f6 8c       	ldd	r15, Z+30	; 0x1e
    12fa:	ff 20       	and	r15, r15
    12fc:	99 f0       	breq	.+38     	; 0x1324 <xQueueReceive+0x62>
    12fe:	b6 01       	movw	r22, r12
    1300:	c8 01       	movw	r24, r16
    1302:	4d de       	rcall	.-870    	; 0xf9e <prvCopyDataFromQueue>
    1304:	fa 94       	dec	r15
    1306:	f8 01       	movw	r30, r16
    1308:	f6 8e       	std	Z+30, r15	; 0x1e
    130a:	80 85       	ldd	r24, Z+8	; 0x08
    130c:	88 23       	and	r24, r24
    130e:	31 f0       	breq	.+12     	; 0x131c <xQueueReceive+0x5a>
    1310:	c8 01       	movw	r24, r16
    1312:	08 96       	adiw	r24, 0x08	; 8
    1314:	0e 94 77 13 	call	0x26ee	; 0x26ee <xTaskRemoveFromEventList>
    1318:	81 11       	cpse	r24, r1
    131a:	ff dc       	rcall	.-1538   	; 0xd1a <vPortYield>
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	4f c0       	rjmp	.+158    	; 0x13c2 <xQueueReceive+0x100>
    1324:	8e 81       	ldd	r24, Y+6	; 0x06
    1326:	9f 81       	ldd	r25, Y+7	; 0x07
    1328:	a8 85       	ldd	r26, Y+8	; 0x08
    132a:	b9 85       	ldd	r27, Y+9	; 0x09
    132c:	89 2b       	or	r24, r25
    132e:	8a 2b       	or	r24, r26
    1330:	8b 2b       	or	r24, r27
    1332:	21 f4       	brne	.+8      	; 0x133c <xQueueReceive+0x7a>
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	43 c0       	rjmp	.+134    	; 0x13c2 <xQueueReceive+0x100>
    133c:	e1 10       	cpse	r14, r1
    133e:	06 c0       	rjmp	.+12     	; 0x134c <xQueueReceive+0x8a>
    1340:	ce 01       	movw	r24, r28
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	0e 94 d6 14 	call	0x29ac	; 0x29ac <vTaskInternalSetTimeOutState>
    1348:	ee 24       	eor	r14, r14
    134a:	e3 94       	inc	r14
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	2a d6       	rcall	.+3156   	; 0x1fa6 <vTaskSuspendAll>
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	0f 92       	push	r0
    1358:	f8 01       	movw	r30, r16
    135a:	81 a1       	ldd	r24, Z+33	; 0x21
    135c:	8f 3f       	cpi	r24, 0xFF	; 255
    135e:	09 f4       	brne	.+2      	; 0x1362 <xQueueReceive+0xa0>
    1360:	11 a2       	std	Z+33, r1	; 0x21
    1362:	f8 01       	movw	r30, r16
    1364:	82 a1       	ldd	r24, Z+34	; 0x22
    1366:	8f 3f       	cpi	r24, 0xFF	; 255
    1368:	09 f4       	brne	.+2      	; 0x136c <xQueueReceive+0xaa>
    136a:	12 a2       	std	Z+34, r1	; 0x22
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	be 01       	movw	r22, r28
    1372:	6a 5f       	subi	r22, 0xFA	; 250
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	ce 01       	movw	r24, r28
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskCheckForTimeOut>
    137e:	81 11       	cpse	r24, r1
    1380:	17 c0       	rjmp	.+46     	; 0x13b0 <xQueueReceive+0xee>
    1382:	c8 01       	movw	r24, r16
    1384:	92 dd       	rcall	.-1244   	; 0xeaa <prvIsQueueEmpty>
    1386:	88 23       	and	r24, r24
    1388:	79 f0       	breq	.+30     	; 0x13a8 <xQueueReceive+0xe6>
    138a:	4e 81       	ldd	r20, Y+6	; 0x06
    138c:	5f 81       	ldd	r21, Y+7	; 0x07
    138e:	68 85       	ldd	r22, Y+8	; 0x08
    1390:	79 85       	ldd	r23, Y+9	; 0x09
    1392:	c8 01       	movw	r24, r16
    1394:	43 96       	adiw	r24, 0x13	; 19
    1396:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <vTaskPlaceOnEventList>
    139a:	c8 01       	movw	r24, r16
    139c:	1a de       	rcall	.-972    	; 0xfd2 <prvUnlockQueue>
    139e:	43 d7       	rcall	.+3718   	; 0x2226 <xTaskResumeAll>
    13a0:	81 11       	cpse	r24, r1
    13a2:	a6 cf       	rjmp	.-180    	; 0x12f0 <xQueueReceive+0x2e>
    13a4:	ba dc       	rcall	.-1676   	; 0xd1a <vPortYield>
    13a6:	a4 cf       	rjmp	.-184    	; 0x12f0 <xQueueReceive+0x2e>
    13a8:	c8 01       	movw	r24, r16
    13aa:	13 de       	rcall	.-986    	; 0xfd2 <prvUnlockQueue>
    13ac:	3c d7       	rcall	.+3704   	; 0x2226 <xTaskResumeAll>
    13ae:	a0 cf       	rjmp	.-192    	; 0x12f0 <xQueueReceive+0x2e>
    13b0:	c8 01       	movw	r24, r16
    13b2:	0f de       	rcall	.-994    	; 0xfd2 <prvUnlockQueue>
    13b4:	38 d7       	rcall	.+3696   	; 0x2226 <xTaskResumeAll>
    13b6:	c8 01       	movw	r24, r16
    13b8:	78 dd       	rcall	.-1296   	; 0xeaa <prvIsQueueEmpty>
    13ba:	88 23       	and	r24, r24
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <xQueueReceive+0xfe>
    13be:	98 cf       	rjmp	.-208    	; 0x12f0 <xQueueReceive+0x2e>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	29 96       	adiw	r28, 0x09	; 9
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	08 95       	ret

000013e0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	0f 92       	push	r0
    13ec:	89 a1       	ldd	r24, Y+33	; 0x21
    13ee:	8f 3f       	cpi	r24, 0xFF	; 255
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <vQueueWaitForMessageRestricted+0x14>
    13f2:	19 a2       	std	Y+33, r1	; 0x21
    13f4:	8a a1       	ldd	r24, Y+34	; 0x22
    13f6:	8f 3f       	cpi	r24, 0xFF	; 255
    13f8:	09 f4       	brne	.+2      	; 0x13fc <vQueueWaitForMessageRestricted+0x1c>
    13fa:	1a a2       	std	Y+34, r1	; 0x22
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1400:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1402:	81 11       	cpse	r24, r1
    1404:	04 c0       	rjmp	.+8      	; 0x140e <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1406:	ce 01       	movw	r24, r28
    1408:	43 96       	adiw	r24, 0x13	; 19
    140a:	0e 94 35 13 	call	0x266a	; 0x266a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    140e:	ce 01       	movw	r24, r28
    1410:	e0 dd       	rcall	.-1088   	; 0xfd2 <prvUnlockQueue>
    }
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret

00001418 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1418:	fc 01       	movw	r30, r24
    141a:	44 81       	ldd	r20, Z+4	; 0x04
    141c:	55 81       	ldd	r21, Z+5	; 0x05
    141e:	22 81       	ldd	r18, Z+2	; 0x02
    1420:	33 81       	ldd	r19, Z+3	; 0x03
    1422:	24 0f       	add	r18, r20
    1424:	35 1f       	adc	r19, r21
    1426:	80 81       	ld	r24, Z
    1428:	91 81       	ldd	r25, Z+1	; 0x01
    142a:	b9 01       	movw	r22, r18
    142c:	68 1b       	sub	r22, r24
    142e:	79 0b       	sbc	r23, r25
    1430:	cb 01       	movw	r24, r22
    1432:	64 17       	cp	r22, r20
    1434:	75 07       	cpc	r23, r21
    1436:	10 f0       	brcs	.+4      	; 0x143c <prvBytesInBuffer+0x24>
    1438:	84 1b       	sub	r24, r20
    143a:	95 0b       	sbc	r25, r21
    143c:	08 95       	ret

0000143e <prvInitialiseNewStreamBuffer>:
    143e:	0f 93       	push	r16
    1440:	fc 01       	movw	r30, r24
    1442:	8f e0       	ldi	r24, 0x0F	; 15
    1444:	df 01       	movw	r26, r30
    1446:	1d 92       	st	X+, r1
    1448:	8a 95       	dec	r24
    144a:	e9 f7       	brne	.-6      	; 0x1446 <prvInitialiseNewStreamBuffer+0x8>
    144c:	75 87       	std	Z+13, r23	; 0x0d
    144e:	64 87       	std	Z+12, r22	; 0x0c
    1450:	55 83       	std	Z+5, r21	; 0x05
    1452:	44 83       	std	Z+4, r20	; 0x04
    1454:	37 83       	std	Z+7, r19	; 0x07
    1456:	26 83       	std	Z+6, r18	; 0x06
    1458:	06 87       	std	Z+14, r16	; 0x0e
    145a:	0f 91       	pop	r16
    145c:	08 95       	ret

0000145e <prvWriteBytesToBuffer>:
    145e:	af 92       	push	r10
    1460:	bf 92       	push	r11
    1462:	cf 92       	push	r12
    1464:	df 92       	push	r13
    1466:	ef 92       	push	r14
    1468:	ff 92       	push	r15
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	6c 01       	movw	r12, r24
    1474:	5b 01       	movw	r10, r22
    1476:	7a 01       	movw	r14, r20
    1478:	fc 01       	movw	r30, r24
    147a:	c2 81       	ldd	r28, Z+2	; 0x02
    147c:	d3 81       	ldd	r29, Z+3	; 0x03
    147e:	04 81       	ldd	r16, Z+4	; 0x04
    1480:	15 81       	ldd	r17, Z+5	; 0x05
    1482:	0c 1b       	sub	r16, r28
    1484:	1d 0b       	sbc	r17, r29
    1486:	40 17       	cp	r20, r16
    1488:	51 07       	cpc	r21, r17
    148a:	08 f4       	brcc	.+2      	; 0x148e <prvWriteBytesToBuffer+0x30>
    148c:	8a 01       	movw	r16, r20
    148e:	f6 01       	movw	r30, r12
    1490:	84 85       	ldd	r24, Z+12	; 0x0c
    1492:	95 85       	ldd	r25, Z+13	; 0x0d
    1494:	a8 01       	movw	r20, r16
    1496:	b5 01       	movw	r22, r10
    1498:	8c 0f       	add	r24, r28
    149a:	9d 1f       	adc	r25, r29
    149c:	0e 94 16 32 	call	0x642c	; 0x642c <memcpy>
    14a0:	0e 15       	cp	r16, r14
    14a2:	1f 05       	cpc	r17, r15
    14a4:	58 f4       	brcc	.+22     	; 0x14bc <prvWriteBytesToBuffer+0x5e>
    14a6:	a7 01       	movw	r20, r14
    14a8:	40 1b       	sub	r20, r16
    14aa:	51 0b       	sbc	r21, r17
    14ac:	b5 01       	movw	r22, r10
    14ae:	60 0f       	add	r22, r16
    14b0:	71 1f       	adc	r23, r17
    14b2:	f6 01       	movw	r30, r12
    14b4:	84 85       	ldd	r24, Z+12	; 0x0c
    14b6:	95 85       	ldd	r25, Z+13	; 0x0d
    14b8:	0e 94 16 32 	call	0x642c	; 0x642c <memcpy>
    14bc:	ce 01       	movw	r24, r28
    14be:	8e 0d       	add	r24, r14
    14c0:	9f 1d       	adc	r25, r15
    14c2:	f6 01       	movw	r30, r12
    14c4:	24 81       	ldd	r18, Z+4	; 0x04
    14c6:	35 81       	ldd	r19, Z+5	; 0x05
    14c8:	82 17       	cp	r24, r18
    14ca:	93 07       	cpc	r25, r19
    14cc:	10 f0       	brcs	.+4      	; 0x14d2 <prvWriteBytesToBuffer+0x74>
    14ce:	82 1b       	sub	r24, r18
    14d0:	93 0b       	sbc	r25, r19
    14d2:	f6 01       	movw	r30, r12
    14d4:	93 83       	std	Z+3, r25	; 0x03
    14d6:	82 83       	std	Z+2, r24	; 0x02
    14d8:	c7 01       	movw	r24, r14
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	bf 90       	pop	r11
    14ec:	af 90       	pop	r10
    14ee:	08 95       	ret

000014f0 <prvWriteMessageToBuffer>:
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	1f 92       	push	r1
    1502:	1f 92       	push	r1
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	7c 01       	movw	r14, r24
    150a:	6b 01       	movw	r12, r22
    150c:	5a 83       	std	Y+2, r21	; 0x02
    150e:	49 83       	std	Y+1, r20	; 0x01
    1510:	21 15       	cp	r18, r1
    1512:	31 05       	cpc	r19, r1
    1514:	c1 f0       	breq	.+48     	; 0x1546 <prvWriteMessageToBuffer+0x56>
    1516:	fc 01       	movw	r30, r24
    1518:	86 85       	ldd	r24, Z+14	; 0x0e
    151a:	80 fd       	sbrc	r24, 0
    151c:	08 c0       	rjmp	.+16     	; 0x152e <prvWriteMessageToBuffer+0x3e>
    151e:	42 17       	cp	r20, r18
    1520:	53 07       	cpc	r21, r19
    1522:	08 f4       	brcc	.+2      	; 0x1526 <prvWriteMessageToBuffer+0x36>
    1524:	9a 01       	movw	r18, r20
    1526:	3a 83       	std	Y+2, r19	; 0x02
    1528:	29 83       	std	Y+1, r18	; 0x01
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	0f c0       	rjmp	.+30     	; 0x154c <prvWriteMessageToBuffer+0x5c>
    152e:	20 17       	cp	r18, r16
    1530:	31 07       	cpc	r19, r17
    1532:	58 f0       	brcs	.+22     	; 0x154a <prvWriteMessageToBuffer+0x5a>
    1534:	42 e0       	ldi	r20, 0x02	; 2
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	be 01       	movw	r22, r28
    153a:	6f 5f       	subi	r22, 0xFF	; 255
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	c7 01       	movw	r24, r14
    1540:	8e df       	rcall	.-228    	; 0x145e <prvWriteBytesToBuffer>
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	03 c0       	rjmp	.+6      	; 0x154c <prvWriteMessageToBuffer+0x5c>
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	01 c0       	rjmp	.+2      	; 0x154c <prvWriteMessageToBuffer+0x5c>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	88 23       	and	r24, r24
    154e:	31 f0       	breq	.+12     	; 0x155c <prvWriteMessageToBuffer+0x6c>
    1550:	49 81       	ldd	r20, Y+1	; 0x01
    1552:	5a 81       	ldd	r21, Y+2	; 0x02
    1554:	b6 01       	movw	r22, r12
    1556:	c7 01       	movw	r24, r14
    1558:	82 df       	rcall	.-252    	; 0x145e <prvWriteBytesToBuffer>
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <prvWriteMessageToBuffer+0x70>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	08 95       	ret

00001576 <prvReadBytesFromBuffer>:
    1576:	af 92       	push	r10
    1578:	bf 92       	push	r11
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	7c 01       	movw	r14, r24
    158c:	5b 01       	movw	r10, r22
    158e:	e9 01       	movw	r28, r18
    1590:	42 17       	cp	r20, r18
    1592:	53 07       	cpc	r21, r19
    1594:	08 f4       	brcc	.+2      	; 0x1598 <prvReadBytesFromBuffer+0x22>
    1596:	ea 01       	movw	r28, r20
    1598:	20 97       	sbiw	r28, 0x00	; 0
    159a:	81 f1       	breq	.+96     	; 0x15fc <prvReadBytesFromBuffer+0x86>
    159c:	f7 01       	movw	r30, r14
    159e:	00 81       	ld	r16, Z
    15a0:	11 81       	ldd	r17, Z+1	; 0x01
    15a2:	84 81       	ldd	r24, Z+4	; 0x04
    15a4:	95 81       	ldd	r25, Z+5	; 0x05
    15a6:	80 1b       	sub	r24, r16
    15a8:	91 0b       	sbc	r25, r17
    15aa:	6e 01       	movw	r12, r28
    15ac:	8c 17       	cp	r24, r28
    15ae:	9d 07       	cpc	r25, r29
    15b0:	08 f4       	brcc	.+2      	; 0x15b4 <prvReadBytesFromBuffer+0x3e>
    15b2:	6c 01       	movw	r12, r24
    15b4:	f7 01       	movw	r30, r14
    15b6:	64 85       	ldd	r22, Z+12	; 0x0c
    15b8:	75 85       	ldd	r23, Z+13	; 0x0d
    15ba:	60 0f       	add	r22, r16
    15bc:	71 1f       	adc	r23, r17
    15be:	a6 01       	movw	r20, r12
    15c0:	c5 01       	movw	r24, r10
    15c2:	0e 94 16 32 	call	0x642c	; 0x642c <memcpy>
    15c6:	cc 16       	cp	r12, r28
    15c8:	dd 06       	cpc	r13, r29
    15ca:	58 f4       	brcc	.+22     	; 0x15e2 <prvReadBytesFromBuffer+0x6c>
    15cc:	ae 01       	movw	r20, r28
    15ce:	4c 19       	sub	r20, r12
    15d0:	5d 09       	sbc	r21, r13
    15d2:	f7 01       	movw	r30, r14
    15d4:	64 85       	ldd	r22, Z+12	; 0x0c
    15d6:	75 85       	ldd	r23, Z+13	; 0x0d
    15d8:	c5 01       	movw	r24, r10
    15da:	8c 0d       	add	r24, r12
    15dc:	9d 1d       	adc	r25, r13
    15de:	0e 94 16 32 	call	0x642c	; 0x642c <memcpy>
    15e2:	0c 0f       	add	r16, r28
    15e4:	1d 1f       	adc	r17, r29
    15e6:	f7 01       	movw	r30, r14
    15e8:	84 81       	ldd	r24, Z+4	; 0x04
    15ea:	95 81       	ldd	r25, Z+5	; 0x05
    15ec:	08 17       	cp	r16, r24
    15ee:	19 07       	cpc	r17, r25
    15f0:	10 f0       	brcs	.+4      	; 0x15f6 <prvReadBytesFromBuffer+0x80>
    15f2:	08 1b       	sub	r16, r24
    15f4:	19 0b       	sbc	r17, r25
    15f6:	f7 01       	movw	r30, r14
    15f8:	11 83       	std	Z+1, r17	; 0x01
    15fa:	00 83       	st	Z, r16
    15fc:	ce 01       	movw	r24, r28
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	bf 90       	pop	r11
    1610:	af 90       	pop	r10
    1612:	08 95       	ret

00001614 <prvReadMessageFromBuffer>:
    1614:	6f 92       	push	r6
    1616:	7f 92       	push	r7
    1618:	8f 92       	push	r8
    161a:	9f 92       	push	r9
    161c:	af 92       	push	r10
    161e:	bf 92       	push	r11
    1620:	cf 92       	push	r12
    1622:	df 92       	push	r13
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	1f 92       	push	r1
    1632:	1f 92       	push	r1
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	6c 01       	movw	r12, r24
    163a:	4b 01       	movw	r8, r22
    163c:	5a 01       	movw	r10, r20
    163e:	79 01       	movw	r14, r18
    1640:	01 15       	cp	r16, r1
    1642:	11 05       	cpc	r17, r1
    1644:	b1 f0       	breq	.+44     	; 0x1672 <prvReadMessageFromBuffer+0x5e>
    1646:	fc 01       	movw	r30, r24
    1648:	60 80       	ld	r6, Z
    164a:	71 80       	ldd	r7, Z+1	; 0x01
    164c:	a8 01       	movw	r20, r16
    164e:	be 01       	movw	r22, r28
    1650:	6f 5f       	subi	r22, 0xFF	; 255
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	90 df       	rcall	.-224    	; 0x1576 <prvReadBytesFromBuffer>
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	e0 1a       	sub	r14, r16
    165c:	f1 0a       	sbc	r15, r17
    165e:	a8 16       	cp	r10, r24
    1660:	b9 06       	cpc	r11, r25
    1662:	30 f4       	brcc	.+12     	; 0x1670 <prvReadMessageFromBuffer+0x5c>
    1664:	f6 01       	movw	r30, r12
    1666:	71 82       	std	Z+1, r7	; 0x01
    1668:	60 82       	st	Z, r6
    166a:	a1 2c       	mov	r10, r1
    166c:	b1 2c       	mov	r11, r1
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <prvReadMessageFromBuffer+0x5e>
    1670:	5c 01       	movw	r10, r24
    1672:	97 01       	movw	r18, r14
    1674:	a5 01       	movw	r20, r10
    1676:	b4 01       	movw	r22, r8
    1678:	c6 01       	movw	r24, r12
    167a:	7d df       	rcall	.-262    	; 0x1576 <prvReadBytesFromBuffer>
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	df 90       	pop	r13
    168e:	cf 90       	pop	r12
    1690:	bf 90       	pop	r11
    1692:	af 90       	pop	r10
    1694:	9f 90       	pop	r9
    1696:	8f 90       	pop	r8
    1698:	7f 90       	pop	r7
    169a:	6f 90       	pop	r6
    169c:	08 95       	ret

0000169e <xStreamBufferGenericCreate>:
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	ec 01       	movw	r28, r24
    16ae:	6b 01       	movw	r12, r22
    16b0:	41 30       	cpi	r20, 0x01	; 1
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <xStreamBufferGenericCreate+0x1a>
    16b4:	01 e0       	ldi	r16, 0x01	; 1
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <xStreamBufferGenericCreate+0x1c>
    16b8:	00 e0       	ldi	r16, 0x00	; 0
    16ba:	c1 14       	cp	r12, r1
    16bc:	d1 04       	cpc	r13, r1
    16be:	19 f4       	brne	.+6      	; 0x16c6 <xStreamBufferGenericCreate+0x28>
    16c0:	cc 24       	eor	r12, r12
    16c2:	c3 94       	inc	r12
    16c4:	d1 2c       	mov	r13, r1
    16c6:	ce 01       	movw	r24, r28
    16c8:	40 96       	adiw	r24, 0x10	; 16
    16ca:	c8 17       	cp	r28, r24
    16cc:	d9 07       	cpc	r29, r25
    16ce:	20 f4       	brcc	.+8      	; 0x16d8 <xStreamBufferGenericCreate+0x3a>
    16d0:	21 96       	adiw	r28, 0x01	; 1
    16d2:	6f d9       	rcall	.-3362   	; 0x9b2 <pvPortMalloc>
    16d4:	7c 01       	movw	r14, r24
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <xStreamBufferGenericCreate+0x3e>
    16d8:	e1 2c       	mov	r14, r1
    16da:	f1 2c       	mov	r15, r1
    16dc:	e1 14       	cp	r14, r1
    16de:	f1 04       	cpc	r15, r1
    16e0:	39 f0       	breq	.+14     	; 0x16f0 <xStreamBufferGenericCreate+0x52>
    16e2:	96 01       	movw	r18, r12
    16e4:	ae 01       	movw	r20, r28
    16e6:	b7 01       	movw	r22, r14
    16e8:	61 5f       	subi	r22, 0xF1	; 241
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	c7 01       	movw	r24, r14
    16ee:	a7 de       	rcall	.-690    	; 0x143e <prvInitialiseNewStreamBuffer>
    16f0:	c7 01       	movw	r24, r14
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	df 90       	pop	r13
    16fe:	cf 90       	pop	r12
    1700:	08 95       	ret

00001702 <xStreamBufferReset>:
    1702:	0f 93       	push	r16
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	0f 92       	push	r0
    170a:	fc 01       	movw	r30, r24
    170c:	20 85       	ldd	r18, Z+8	; 0x08
    170e:	31 85       	ldd	r19, Z+9	; 0x09
    1710:	23 2b       	or	r18, r19
    1712:	71 f4       	brne	.+28     	; 0x1730 <xStreamBufferReset+0x2e>
    1714:	22 85       	ldd	r18, Z+10	; 0x0a
    1716:	33 85       	ldd	r19, Z+11	; 0x0b
    1718:	23 2b       	or	r18, r19
    171a:	61 f4       	brne	.+24     	; 0x1734 <xStreamBufferReset+0x32>
    171c:	26 81       	ldd	r18, Z+6	; 0x06
    171e:	37 81       	ldd	r19, Z+7	; 0x07
    1720:	44 81       	ldd	r20, Z+4	; 0x04
    1722:	55 81       	ldd	r21, Z+5	; 0x05
    1724:	64 85       	ldd	r22, Z+12	; 0x0c
    1726:	75 85       	ldd	r23, Z+13	; 0x0d
    1728:	06 85       	ldd	r16, Z+14	; 0x0e
    172a:	89 de       	rcall	.-750    	; 0x143e <prvInitialiseNewStreamBuffer>
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <xStreamBufferReset+0x34>
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <xStreamBufferReset+0x34>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 91       	pop	r16
    173c:	08 95       	ret

0000173e <xStreamBufferSpacesAvailable>:
    173e:	fc 01       	movw	r30, r24
    1740:	24 81       	ldd	r18, Z+4	; 0x04
    1742:	35 81       	ldd	r19, Z+5	; 0x05
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	82 0f       	add	r24, r18
    174a:	93 1f       	adc	r25, r19
    174c:	42 81       	ldd	r20, Z+2	; 0x02
    174e:	53 81       	ldd	r21, Z+3	; 0x03
    1750:	84 1b       	sub	r24, r20
    1752:	95 0b       	sbc	r25, r21
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	82 17       	cp	r24, r18
    1758:	93 07       	cpc	r25, r19
    175a:	10 f0       	brcs	.+4      	; 0x1760 <xStreamBufferSpacesAvailable+0x22>
    175c:	82 1b       	sub	r24, r18
    175e:	93 0b       	sbc	r25, r19
    1760:	08 95       	ret

00001762 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1762:	2f 92       	push	r2
    1764:	3f 92       	push	r3
    1766:	4f 92       	push	r4
    1768:	5f 92       	push	r5
    176a:	6f 92       	push	r6
    176c:	7f 92       	push	r7
    176e:	8f 92       	push	r8
    1770:	9f 92       	push	r9
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	2b 97       	sbiw	r28, 0x0b	; 11
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	4c 01       	movw	r8, r24
    1798:	7b 87       	std	Y+11, r23	; 0x0b
    179a:	6a 87       	std	Y+10, r22	; 0x0a
    179c:	1a 01       	movw	r2, r20
    179e:	0e 83       	std	Y+6, r16	; 0x06
    17a0:	1f 83       	std	Y+7, r17	; 0x07
    17a2:	28 87       	std	Y+8, r18	; 0x08
    17a4:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    17a6:	fc 01       	movw	r30, r24
    17a8:	84 81       	ldd	r24, Z+4	; 0x04
    17aa:	95 81       	ldd	r25, Z+5	; 0x05
    17ac:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17ae:	26 85       	ldd	r18, Z+14	; 0x0e
    17b0:	20 ff       	sbrs	r18, 0
    17b2:	0c c0       	rjmp	.+24     	; 0x17cc <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17b4:	2a 01       	movw	r4, r20
    17b6:	f2 e0       	ldi	r31, 0x02	; 2
    17b8:	4f 0e       	add	r4, r31
    17ba:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    17bc:	84 15       	cp	r24, r4
    17be:	95 05       	cpc	r25, r5
    17c0:	58 f4       	brcc	.+22     	; 0x17d8 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    17c2:	1e 82       	std	Y+6, r1	; 0x06
    17c4:	1f 82       	std	Y+7, r1	; 0x07
    17c6:	18 86       	std	Y+8, r1	; 0x08
    17c8:	19 86       	std	Y+9, r1	; 0x09
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    17cc:	84 17       	cp	r24, r20
    17ce:	95 07       	cpc	r25, r21
    17d0:	10 f0       	brcs	.+4      	; 0x17d6 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    17d2:	2a 01       	movw	r4, r20
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    17d6:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	9f 81       	ldd	r25, Y+7	; 0x07
    17dc:	a8 85       	ldd	r26, Y+8	; 0x08
    17de:	b9 85       	ldd	r27, Y+9	; 0x09
    17e0:	89 2b       	or	r24, r25
    17e2:	8a 2b       	or	r24, r26
    17e4:	8b 2b       	or	r24, r27
    17e6:	09 f4       	brne	.+2      	; 0x17ea <xStreamBufferSend+0x88>
    17e8:	38 c0       	rjmp	.+112    	; 0x185a <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    17ea:	ce 01       	movw	r24, r28
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	0e 94 c0 14 	call	0x2980	; 0x2980 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    17f8:	c4 01       	movw	r24, r8
    17fa:	a1 df       	rcall	.-190    	; 0x173e <xStreamBufferSpacesAvailable>
    17fc:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    17fe:	84 15       	cp	r24, r4
    1800:	95 05       	cpc	r25, r5
    1802:	40 f5       	brcc	.+80     	; 0x1854 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 a9 18 	call	0x3152	; 0x3152 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    180e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <xTaskGetCurrentTaskHandle>
    1812:	f4 01       	movw	r30, r8
    1814:	93 87       	std	Z+11, r25	; 0x0b
    1816:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    181c:	ae 80       	ldd	r10, Y+6	; 0x06
    181e:	bf 80       	ldd	r11, Y+7	; 0x07
    1820:	c8 84       	ldd	r12, Y+8	; 0x08
    1822:	d9 84       	ldd	r13, Y+9	; 0x09
    1824:	e1 2c       	mov	r14, r1
    1826:	f1 2c       	mov	r15, r1
    1828:	00 e0       	ldi	r16, 0x00	; 0
    182a:	10 e0       	ldi	r17, 0x00	; 0
    182c:	98 01       	movw	r18, r16
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	ba 01       	movw	r22, r20
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    183a:	f4 01       	movw	r30, r8
    183c:	13 86       	std	Z+11, r1	; 0x0b
    183e:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1840:	be 01       	movw	r22, r28
    1842:	6a 5f       	subi	r22, 0xFA	; 250
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	ce 01       	movw	r24, r28
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	0e 94 e7 14 	call	0x29ce	; 0x29ce <xTaskCheckForTimeOut>
    184e:	88 23       	and	r24, r24
    1850:	81 f2       	breq	.-96     	; 0x17f2 <xStreamBufferSend+0x90>
    1852:	05 c0       	rjmp	.+10     	; 0x185e <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
                    break;
    1858:	02 c0       	rjmp	.+4      	; 0x185e <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    185a:	61 2c       	mov	r6, r1
    185c:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    185e:	61 14       	cp	r6, r1
    1860:	71 04       	cpc	r7, r1
    1862:	19 f4       	brne	.+6      	; 0x186a <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1864:	c4 01       	movw	r24, r8
    1866:	6b df       	rcall	.-298    	; 0x173e <xStreamBufferSpacesAvailable>
    1868:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    186a:	82 01       	movw	r16, r4
    186c:	93 01       	movw	r18, r6
    186e:	a1 01       	movw	r20, r2
    1870:	6a 85       	ldd	r22, Y+10	; 0x0a
    1872:	7b 85       	ldd	r23, Y+11	; 0x0b
    1874:	c4 01       	movw	r24, r8
    1876:	3c de       	rcall	.-904    	; 0x14f0 <prvWriteMessageToBuffer>
    1878:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    187a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    187c:	e9 f0       	breq	.+58     	; 0x18b8 <xStreamBufferSend+0x156>
    187e:	c4 01       	movw	r24, r8
    1880:	cb dd       	rcall	.-1130   	; 0x1418 <prvBytesInBuffer>
    1882:	f4 01       	movw	r30, r8
    1884:	26 81       	ldd	r18, Z+6	; 0x06
    1886:	37 81       	ldd	r19, Z+7	; 0x07
    1888:	82 17       	cp	r24, r18
    188a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    188c:	a8 f0       	brcs	.+42     	; 0x18b8 <xStreamBufferSend+0x156>
    188e:	8b d3       	rcall	.+1814   	; 0x1fa6 <vTaskSuspendAll>
    1890:	f4 01       	movw	r30, r8
    1892:	80 85       	ldd	r24, Z+8	; 0x08
    1894:	91 85       	ldd	r25, Z+9	; 0x09
    1896:	89 2b       	or	r24, r25
    1898:	71 f0       	breq	.+28     	; 0x18b6 <xStreamBufferSend+0x154>
    189a:	80 85       	ldd	r24, Z+8	; 0x08
    189c:	91 85       	ldd	r25, Z+9	; 0x09
    189e:	e1 2c       	mov	r14, r1
    18a0:	f1 2c       	mov	r15, r1
    18a2:	00 e0       	ldi	r16, 0x00	; 0
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	0e 94 90 16 	call	0x2d20	; 0x2d20 <xTaskGenericNotify>
    18b0:	f4 01       	movw	r30, r8
    18b2:	11 86       	std	Z+9, r1	; 0x09
    18b4:	10 86       	std	Z+8, r1	; 0x08
    18b6:	b7 d4       	rcall	.+2414   	; 0x2226 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    18b8:	c6 01       	movw	r24, r12
    18ba:	2b 96       	adiw	r28, 0x0b	; 11
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	ff 90       	pop	r15
    18d0:	ef 90       	pop	r14
    18d2:	df 90       	pop	r13
    18d4:	cf 90       	pop	r12
    18d6:	bf 90       	pop	r11
    18d8:	af 90       	pop	r10
    18da:	9f 90       	pop	r9
    18dc:	8f 90       	pop	r8
    18de:	7f 90       	pop	r7
    18e0:	6f 90       	pop	r6
    18e2:	5f 90       	pop	r5
    18e4:	4f 90       	pop	r4
    18e6:	3f 90       	pop	r3
    18e8:	2f 90       	pop	r2
    18ea:	08 95       	ret

000018ec <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	ec 01       	movw	r28, r24
    1902:	7b 01       	movw	r14, r22
    1904:	5a 01       	movw	r10, r20
    1906:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1908:	8e 85       	ldd	r24, Y+14	; 0x0e
    190a:	80 ff       	sbrs	r24, 0
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    190e:	8a 01       	movw	r16, r20
    1910:	0e 5f       	subi	r16, 0xFE	; 254
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1916:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1918:	ce 01       	movw	r24, r28
    191a:	11 df       	rcall	.-478    	; 0x173e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    191c:	9c 01       	movw	r18, r24
    191e:	a5 01       	movw	r20, r10
    1920:	b7 01       	movw	r22, r14
    1922:	ce 01       	movw	r24, r28
    1924:	e5 dd       	rcall	.-1078   	; 0x14f0 <prvWriteMessageToBuffer>
    1926:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1928:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    192a:	c1 f0       	breq	.+48     	; 0x195c <xStreamBufferSendFromISR+0x70>
    192c:	ce 01       	movw	r24, r28
    192e:	74 dd       	rcall	.-1304   	; 0x1418 <prvBytesInBuffer>
    1930:	2e 81       	ldd	r18, Y+6	; 0x06
    1932:	3f 81       	ldd	r19, Y+7	; 0x07
    1934:	82 17       	cp	r24, r18
    1936:	93 07       	cpc	r25, r19
    1938:	88 f0       	brcs	.+34     	; 0x195c <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    193a:	88 85       	ldd	r24, Y+8	; 0x08
    193c:	99 85       	ldd	r25, Y+9	; 0x09
    193e:	89 2b       	or	r24, r25
    1940:	69 f0       	breq	.+26     	; 0x195c <xStreamBufferSendFromISR+0x70>
    1942:	88 85       	ldd	r24, Y+8	; 0x08
    1944:	99 85       	ldd	r25, Y+9	; 0x09
    1946:	e1 2c       	mov	r14, r1
    1948:	f1 2c       	mov	r15, r1
    194a:	00 e0       	ldi	r16, 0x00	; 0
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	a9 01       	movw	r20, r18
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <xTaskGenericNotifyFromISR>
    1958:	19 86       	std	Y+9, r1	; 0x09
    195a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    195c:	c5 01       	movw	r24, r10
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	bf 90       	pop	r11
    1970:	af 90       	pop	r10
    1972:	08 95       	ret

00001974 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1974:	4f 92       	push	r4
    1976:	5f 92       	push	r5
    1978:	6f 92       	push	r6
    197a:	7f 92       	push	r7
    197c:	8f 92       	push	r8
    197e:	9f 92       	push	r9
    1980:	af 92       	push	r10
    1982:	bf 92       	push	r11
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	ec 01       	movw	r28, r24
    1996:	2b 01       	movw	r4, r22
    1998:	3a 01       	movw	r6, r20
    199a:	58 01       	movw	r10, r16
    199c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    199e:	8e 85       	ldd	r24, Y+14	; 0x0e
    19a0:	80 ff       	sbrs	r24, 0
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19a4:	68 94       	set
    19a6:	88 24       	eor	r8, r8
    19a8:	81 f8       	bld	r8, 1
    19aa:	91 2c       	mov	r9, r1
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    19ae:	81 2c       	mov	r8, r1
    19b0:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19b2:	a1 14       	cp	r10, r1
    19b4:	b1 04       	cpc	r11, r1
    19b6:	c1 04       	cpc	r12, r1
    19b8:	d1 04       	cpc	r13, r1
    19ba:	41 f1       	breq	.+80     	; 0x1a0c <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    19c2:	ce 01       	movw	r24, r28
    19c4:	29 dd       	rcall	.-1454   	; 0x1418 <prvBytesInBuffer>
    19c6:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    19c8:	88 16       	cp	r8, r24
    19ca:	99 06       	cpc	r9, r25
    19cc:	48 f0       	brcs	.+18     	; 0x19e0 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	0e 94 a9 18 	call	0x3152	; 0x3152 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    19d8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <xTaskGetCurrentTaskHandle>
    19dc:	99 87       	std	Y+9, r25	; 0x09
    19de:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    19e0:	0f 90       	pop	r0
    19e2:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    19e4:	8e 14       	cp	r8, r14
    19e6:	9f 04       	cpc	r9, r15
    19e8:	a0 f0       	brcs	.+40     	; 0x1a12 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    19ea:	e1 2c       	mov	r14, r1
    19ec:	f1 2c       	mov	r15, r1
    19ee:	00 e0       	ldi	r16, 0x00	; 0
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	98 01       	movw	r18, r16
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	ba 01       	movw	r22, r20
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1a00:	19 86       	std	Y+9, r1	; 0x09
    1a02:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a04:	ce 01       	movw	r24, r28
    1a06:	08 dd       	rcall	.-1520   	; 0x1418 <prvBytesInBuffer>
    1a08:	7c 01       	movw	r14, r24
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	04 dd       	rcall	.-1528   	; 0x1418 <prvBytesInBuffer>
    1a10:	7c 01       	movw	r14, r24
    1a12:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1a14:	9f 04       	cpc	r9, r15
    1a16:	e8 f4       	brcc	.+58     	; 0x1a52 <xStreamBufferReceive+0xde>
    1a18:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1a1a:	97 01       	movw	r18, r14
    1a1c:	a3 01       	movw	r20, r6
    1a1e:	b2 01       	movw	r22, r4
    1a20:	ce 01       	movw	r24, r28
    1a22:	f8 dd       	rcall	.-1040   	; 0x1614 <prvReadMessageFromBuffer>
    1a24:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1a26:	89 2b       	or	r24, r25
    1a28:	b1 f0       	breq	.+44     	; 0x1a56 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1a2a:	bd d2       	rcall	.+1402   	; 0x1fa6 <vTaskSuspendAll>
    1a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a30:	89 2b       	or	r24, r25
    1a32:	69 f0       	breq	.+26     	; 0x1a4e <xStreamBufferReceive+0xda>
    1a34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a36:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a38:	e1 2c       	mov	r14, r1
    1a3a:	f1 2c       	mov	r15, r1
    1a3c:	00 e0       	ldi	r16, 0x00	; 0
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	a9 01       	movw	r20, r18
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	0e 94 90 16 	call	0x2d20	; 0x2d20 <xTaskGenericNotify>
    1a4a:	1b 86       	std	Y+11, r1	; 0x0b
    1a4c:	1a 86       	std	Y+10, r1	; 0x0a
    1a4e:	eb d3       	rcall	.+2006   	; 0x2226 <xTaskResumeAll>
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <xStreamBufferReceive+0xe2>
    1a52:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1a54:	d1 2c       	mov	r13, r1
    1a56:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	bf 90       	pop	r11
    1a6a:	af 90       	pop	r10
    1a6c:	9f 90       	pop	r9
    1a6e:	8f 90       	pop	r8
    1a70:	7f 90       	pop	r7
    1a72:	6f 90       	pop	r6
    1a74:	5f 90       	pop	r5
    1a76:	4f 90       	pop	r4
    1a78:	08 95       	ret

00001a7a <prvResetNextTaskUnblockTime>:
    1a7a:	e0 91 ff 16 	lds	r30, 0x16FF	; 0x8016ff <pxDelayedTaskList>
    1a7e:	f0 91 00 17 	lds	r31, 0x1700	; 0x801700 <pxDelayedTaskList+0x1>
    1a82:	80 81       	ld	r24, Z
    1a84:	81 11       	cpse	r24, r1
    1a86:	0c c0       	rjmp	.+24     	; 0x1aa0 <prvResetNextTaskUnblockTime+0x26>
    1a88:	8f ef       	ldi	r24, 0xFF	; 255
    1a8a:	9f ef       	ldi	r25, 0xFF	; 255
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <xNextTaskUnblockTime>
    1a92:	90 93 ca 16 	sts	0x16CA, r25	; 0x8016ca <xNextTaskUnblockTime+0x1>
    1a96:	a0 93 cb 16 	sts	0x16CB, r26	; 0x8016cb <xNextTaskUnblockTime+0x2>
    1a9a:	b0 93 cc 16 	sts	0x16CC, r27	; 0x8016cc <xNextTaskUnblockTime+0x3>
    1a9e:	08 95       	ret
    1aa0:	e0 91 ff 16 	lds	r30, 0x16FF	; 0x8016ff <pxDelayedTaskList>
    1aa4:	f0 91 00 17 	lds	r31, 0x1700	; 0x801700 <pxDelayedTaskList+0x1>
    1aa8:	07 80       	ldd	r0, Z+7	; 0x07
    1aaa:	f0 85       	ldd	r31, Z+8	; 0x08
    1aac:	e0 2d       	mov	r30, r0
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ab4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ab6:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <xNextTaskUnblockTime>
    1aba:	90 93 ca 16 	sts	0x16CA, r25	; 0x8016ca <xNextTaskUnblockTime+0x1>
    1abe:	a0 93 cb 16 	sts	0x16CB, r26	; 0x8016cb <xNextTaskUnblockTime+0x2>
    1ac2:	b0 93 cc 16 	sts	0x16CC, r27	; 0x8016cc <xNextTaskUnblockTime+0x3>
    1ac6:	08 95       	ret

00001ac8 <prvDeleteTCB>:
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	ec 01       	movw	r28, r24
    1ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad2:	18 d8       	rcall	.-4048   	; 0xb04 <vPortFree>
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	16 d8       	rcall	.-4052   	; 0xb04 <vPortFree>
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	08 95       	ret

00001ade <prvInitialiseNewTask>:
    1ade:	4f 92       	push	r4
    1ae0:	5f 92       	push	r5
    1ae2:	6f 92       	push	r6
    1ae4:	7f 92       	push	r7
    1ae6:	8f 92       	push	r8
    1ae8:	9f 92       	push	r9
    1aea:	af 92       	push	r10
    1aec:	bf 92       	push	r11
    1aee:	cf 92       	push	r12
    1af0:	df 92       	push	r13
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	2c 01       	movw	r4, r24
    1afe:	5b 01       	movw	r10, r22
    1b00:	4a 01       	movw	r8, r20
    1b02:	39 01       	movw	r6, r18
    1b04:	e6 01       	movw	r28, r12
    1b06:	65 ea       	ldi	r22, 0xA5	; 165
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b0e:	0e 94 1f 32 	call	0x643e	; 0x643e <memset>
    1b12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b16:	21 e0       	ldi	r18, 0x01	; 1
    1b18:	82 1a       	sub	r8, r18
    1b1a:	91 08       	sbc	r9, r1
    1b1c:	88 0e       	add	r8, r24
    1b1e:	99 1e       	adc	r9, r25
    1b20:	a1 14       	cp	r10, r1
    1b22:	b1 04       	cpc	r11, r1
    1b24:	89 f4       	brne	.+34     	; 0x1b48 <prvInitialiseNewTask+0x6a>
    1b26:	15 c0       	rjmp	.+42     	; 0x1b52 <prvInitialiseNewTask+0x74>
    1b28:	82 2f       	mov	r24, r18
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	f5 01       	movw	r30, r10
    1b2e:	e8 0f       	add	r30, r24
    1b30:	f9 1f       	adc	r31, r25
    1b32:	30 81       	ld	r19, Z
    1b34:	de 01       	movw	r26, r28
    1b36:	a8 0f       	add	r26, r24
    1b38:	b9 1f       	adc	r27, r25
    1b3a:	5d 96       	adiw	r26, 0x1d	; 29
    1b3c:	3c 93       	st	X, r19
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 23       	and	r24, r24
    1b42:	29 f0       	breq	.+10     	; 0x1b4e <prvInitialiseNewTask+0x70>
    1b44:	2f 5f       	subi	r18, 0xFF	; 255
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <prvInitialiseNewTask+0x6c>
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	20 31       	cpi	r18, 0x10	; 16
    1b4c:	68 f3       	brcs	.-38     	; 0x1b28 <prvInitialiseNewTask+0x4a>
    1b4e:	1c a6       	std	Y+44, r1	; 0x2c
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <prvInitialiseNewTask+0x76>
    1b52:	1d 8e       	std	Y+29, r1	; 0x1d
    1b54:	0a 30       	cpi	r16, 0x0A	; 10
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <prvInitialiseNewTask+0x7c>
    1b58:	09 e0       	ldi	r16, 0x09	; 9
    1b5a:	0a 8f       	std	Y+26, r16	; 0x1a
    1b5c:	0d a7       	std	Y+45, r16	; 0x2d
    1b5e:	1e a6       	std	Y+46, r1	; 0x2e
    1b60:	ce 01       	movw	r24, r28
    1b62:	02 96       	adiw	r24, 0x02	; 2
    1b64:	1d d8       	rcall	.-4038   	; 0xba0 <vListInitialiseItem>
    1b66:	ce 01       	movw	r24, r28
    1b68:	0e 96       	adiw	r24, 0x0e	; 14
    1b6a:	1a d8       	rcall	.-4044   	; 0xba0 <vListInitialiseItem>
    1b6c:	db 87       	std	Y+11, r29	; 0x0b
    1b6e:	ca 87       	std	Y+10, r28	; 0x0a
    1b70:	8a e0       	ldi	r24, 0x0A	; 10
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e0       	ldi	r26, 0x00	; 0
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	80 1b       	sub	r24, r16
    1b7a:	91 09       	sbc	r25, r1
    1b7c:	a1 09       	sbc	r26, r1
    1b7e:	b1 09       	sbc	r27, r1
    1b80:	8e 87       	std	Y+14, r24	; 0x0e
    1b82:	9f 87       	std	Y+15, r25	; 0x0f
    1b84:	a8 8b       	std	Y+16, r26	; 0x10
    1b86:	b9 8b       	std	Y+17, r27	; 0x11
    1b88:	df 8b       	std	Y+23, r29	; 0x17
    1b8a:	ce 8b       	std	Y+22, r28	; 0x16
    1b8c:	84 e0       	ldi	r24, 0x04	; 4
    1b8e:	fe 01       	movw	r30, r28
    1b90:	bf 96       	adiw	r30, 0x2f	; 47
    1b92:	df 01       	movw	r26, r30
    1b94:	1d 92       	st	X+, r1
    1b96:	8a 95       	dec	r24
    1b98:	e9 f7       	brne	.-6      	; 0x1b94 <prvInitialiseNewTask+0xb6>
    1b9a:	1b aa       	std	Y+51, r1	; 0x33
    1b9c:	a3 01       	movw	r20, r6
    1b9e:	b2 01       	movw	r22, r4
    1ba0:	c4 01       	movw	r24, r8
    1ba2:	72 d8       	rcall	.-3868   	; 0xc88 <pxPortInitialiseStack>
    1ba4:	99 83       	std	Y+1, r25	; 0x01
    1ba6:	88 83       	st	Y, r24
    1ba8:	e1 14       	cp	r14, r1
    1baa:	f1 04       	cpc	r15, r1
    1bac:	19 f0       	breq	.+6      	; 0x1bb4 <prvInitialiseNewTask+0xd6>
    1bae:	f7 01       	movw	r30, r14
    1bb0:	d1 83       	std	Z+1, r29	; 0x01
    1bb2:	c0 83       	st	Z, r28
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	bf 90       	pop	r11
    1bc4:	af 90       	pop	r10
    1bc6:	9f 90       	pop	r9
    1bc8:	8f 90       	pop	r8
    1bca:	7f 90       	pop	r7
    1bcc:	6f 90       	pop	r6
    1bce:	5f 90       	pop	r5
    1bd0:	4f 90       	pop	r4
    1bd2:	08 95       	ret

00001bd4 <prvInitialiseTaskLists>:
    1bd4:	cf 93       	push	r28
    1bd6:	c0 e0       	ldi	r28, 0x00	; 0
    1bd8:	09 c0       	rjmp	.+18     	; 0x1bec <prvInitialiseTaskLists+0x18>
    1bda:	2b e0       	ldi	r18, 0x0B	; 11
    1bdc:	c2 9f       	mul	r28, r18
    1bde:	c0 01       	movw	r24, r0
    1be0:	11 24       	eor	r1, r1
    1be2:	89 5e       	subi	r24, 0xE9	; 233
    1be4:	98 4e       	sbci	r25, 0xE8	; 232
    1be6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    1bea:	cf 5f       	subi	r28, 0xFF	; 255
    1bec:	ca 30       	cpi	r28, 0x0A	; 10
    1bee:	a8 f3       	brcs	.-22     	; 0x1bda <prvInitialiseTaskLists+0x6>
    1bf0:	8c e0       	ldi	r24, 0x0C	; 12
    1bf2:	97 e1       	ldi	r25, 0x17	; 23
    1bf4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	97 e1       	ldi	r25, 0x17	; 23
    1bfc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    1c00:	82 ef       	ldi	r24, 0xF2	; 242
    1c02:	96 e1       	ldi	r25, 0x16	; 22
    1c04:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    1c08:	87 ee       	ldi	r24, 0xE7	; 231
    1c0a:	96 e1       	ldi	r25, 0x16	; 22
    1c0c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    1c10:	8b ed       	ldi	r24, 0xDB	; 219
    1c12:	96 e1       	ldi	r25, 0x16	; 22
    1c14:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    1c18:	8c e0       	ldi	r24, 0x0C	; 12
    1c1a:	97 e1       	ldi	r25, 0x17	; 23
    1c1c:	90 93 00 17 	sts	0x1700, r25	; 0x801700 <pxDelayedTaskList+0x1>
    1c20:	80 93 ff 16 	sts	0x16FF, r24	; 0x8016ff <pxDelayedTaskList>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	97 e1       	ldi	r25, 0x17	; 23
    1c28:	90 93 fe 16 	sts	0x16FE, r25	; 0x8016fe <pxOverflowDelayedTaskList+0x1>
    1c2c:	80 93 fd 16 	sts	0x16FD, r24	; 0x8016fd <pxOverflowDelayedTaskList>
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <prvAddNewTaskToReadyList>:
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	ec 01       	movw	r28, r24
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	0f 92       	push	r0
    1c40:	80 91 da 16 	lds	r24, 0x16DA	; 0x8016da <uxCurrentNumberOfTasks>
    1c44:	8f 5f       	subi	r24, 0xFF	; 255
    1c46:	80 93 da 16 	sts	0x16DA, r24	; 0x8016da <uxCurrentNumberOfTasks>
    1c4a:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <pxCurrentTCB>
    1c4e:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1c52:	89 2b       	or	r24, r25
    1c54:	51 f4       	brne	.+20     	; 0x1c6a <prvAddNewTaskToReadyList+0x36>
    1c56:	d0 93 86 17 	sts	0x1786, r29	; 0x801786 <pxCurrentTCB+0x1>
    1c5a:	c0 93 85 17 	sts	0x1785, r28	; 0x801785 <pxCurrentTCB>
    1c5e:	80 91 da 16 	lds	r24, 0x16DA	; 0x8016da <uxCurrentNumberOfTasks>
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	91 f4       	brne	.+36     	; 0x1c8a <prvAddNewTaskToReadyList+0x56>
    1c66:	b6 df       	rcall	.-148    	; 0x1bd4 <prvInitialiseTaskLists>
    1c68:	10 c0       	rjmp	.+32     	; 0x1c8a <prvAddNewTaskToReadyList+0x56>
    1c6a:	80 91 d4 16 	lds	r24, 0x16D4	; 0x8016d4 <xSchedulerRunning>
    1c6e:	81 11       	cpse	r24, r1
    1c70:	0c c0       	rjmp	.+24     	; 0x1c8a <prvAddNewTaskToReadyList+0x56>
    1c72:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    1c76:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1c7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c7e:	89 17       	cp	r24, r25
    1c80:	20 f0       	brcs	.+8      	; 0x1c8a <prvAddNewTaskToReadyList+0x56>
    1c82:	d0 93 86 17 	sts	0x1786, r29	; 0x801786 <pxCurrentTCB+0x1>
    1c86:	c0 93 85 17 	sts	0x1785, r28	; 0x801785 <pxCurrentTCB>
    1c8a:	80 91 cd 16 	lds	r24, 0x16CD	; 0x8016cd <uxTaskNumber>
    1c8e:	8f 5f       	subi	r24, 0xFF	; 255
    1c90:	80 93 cd 16 	sts	0x16CD, r24	; 0x8016cd <uxTaskNumber>
    1c94:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c96:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <uxTopReadyPriority>
    1c9a:	8e 17       	cp	r24, r30
    1c9c:	10 f4       	brcc	.+4      	; 0x1ca2 <prvAddNewTaskToReadyList+0x6e>
    1c9e:	e0 93 d5 16 	sts	0x16D5, r30	; 0x8016d5 <uxTopReadyPriority>
    1ca2:	8b e0       	ldi	r24, 0x0B	; 11
    1ca4:	8e 9f       	mul	r24, r30
    1ca6:	f0 01       	movw	r30, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	e9 5e       	subi	r30, 0xE9	; 233
    1cac:	f8 4e       	sbci	r31, 0xE8	; 232
    1cae:	01 80       	ldd	r0, Z+1	; 0x01
    1cb0:	f2 81       	ldd	r31, Z+2	; 0x02
    1cb2:	e0 2d       	mov	r30, r0
    1cb4:	ff 83       	std	Y+7, r31	; 0x07
    1cb6:	ee 83       	std	Y+6, r30	; 0x06
    1cb8:	26 81       	ldd	r18, Z+6	; 0x06
    1cba:	37 81       	ldd	r19, Z+7	; 0x07
    1cbc:	39 87       	std	Y+9, r19	; 0x09
    1cbe:	28 87       	std	Y+8, r18	; 0x08
    1cc0:	a6 81       	ldd	r26, Z+6	; 0x06
    1cc2:	b7 81       	ldd	r27, Z+7	; 0x07
    1cc4:	9e 01       	movw	r18, r28
    1cc6:	2e 5f       	subi	r18, 0xFE	; 254
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	15 96       	adiw	r26, 0x05	; 5
    1ccc:	3c 93       	st	X, r19
    1cce:	2e 93       	st	-X, r18
    1cd0:	14 97       	sbiw	r26, 0x04	; 4
    1cd2:	37 83       	std	Z+7, r19	; 0x07
    1cd4:	26 83       	std	Z+6, r18	; 0x06
    1cd6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1cd8:	8e 9f       	mul	r24, r30
    1cda:	f0 01       	movw	r30, r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	e9 5e       	subi	r30, 0xE9	; 233
    1ce0:	f8 4e       	sbci	r31, 0xE8	; 232
    1ce2:	fd 87       	std	Y+13, r31	; 0x0d
    1ce4:	ec 87       	std	Y+12, r30	; 0x0c
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	80 83       	st	Z, r24
    1cec:	0f 90       	pop	r0
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	80 91 d4 16 	lds	r24, 0x16D4	; 0x8016d4 <xSchedulerRunning>
    1cf4:	88 23       	and	r24, r24
    1cf6:	49 f0       	breq	.+18     	; 0x1d0a <prvAddNewTaskToReadyList+0xd6>
    1cf8:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    1cfc:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1d00:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d04:	98 17       	cp	r25, r24
    1d06:	08 f4       	brcc	.+2      	; 0x1d0a <prvAddNewTaskToReadyList+0xd6>
    1d08:	08 d8       	rcall	.-4080   	; 0xd1a <vPortYield>
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <prvCheckTasksWaitingTermination>:
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	1b c0       	rjmp	.+54     	; 0x1d4c <prvCheckTasksWaitingTermination+0x3c>
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	0f 92       	push	r0
    1d1c:	e0 91 ee 16 	lds	r30, 0x16EE	; 0x8016ee <xTasksWaitingTermination+0x7>
    1d20:	f0 91 ef 16 	lds	r31, 0x16EF	; 0x8016ef <xTasksWaitingTermination+0x8>
    1d24:	c0 85       	ldd	r28, Z+8	; 0x08
    1d26:	d1 85       	ldd	r29, Z+9	; 0x09
    1d28:	ce 01       	movw	r24, r28
    1d2a:	02 96       	adiw	r24, 0x02	; 2
    1d2c:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
    1d30:	80 91 da 16 	lds	r24, 0x16DA	; 0x8016da <uxCurrentNumberOfTasks>
    1d34:	81 50       	subi	r24, 0x01	; 1
    1d36:	80 93 da 16 	sts	0x16DA, r24	; 0x8016da <uxCurrentNumberOfTasks>
    1d3a:	80 91 e6 16 	lds	r24, 0x16E6	; 0x8016e6 <uxDeletedTasksWaitingCleanUp>
    1d3e:	81 50       	subi	r24, 0x01	; 1
    1d40:	80 93 e6 16 	sts	0x16E6, r24	; 0x8016e6 <uxDeletedTasksWaitingCleanUp>
    1d44:	0f 90       	pop	r0
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	ce 01       	movw	r24, r28
    1d4a:	be de       	rcall	.-644    	; 0x1ac8 <prvDeleteTCB>
    1d4c:	80 91 e6 16 	lds	r24, 0x16E6	; 0x8016e6 <uxDeletedTasksWaitingCleanUp>
    1d50:	81 11       	cpse	r24, r1
    1d52:	e1 cf       	rjmp	.-62     	; 0x1d16 <prvCheckTasksWaitingTermination+0x6>
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	08 95       	ret

00001d5a <prvAddCurrentTaskToDelayedList>:
    1d5a:	8f 92       	push	r8
    1d5c:	9f 92       	push	r9
    1d5e:	af 92       	push	r10
    1d60:	bf 92       	push	r11
    1d62:	cf 92       	push	r12
    1d64:	df 92       	push	r13
    1d66:	ef 92       	push	r14
    1d68:	ff 92       	push	r15
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	6b 01       	movw	r12, r22
    1d70:	7c 01       	movw	r14, r24
    1d72:	c4 2f       	mov	r28, r20
    1d74:	80 90 d6 16 	lds	r8, 0x16D6	; 0x8016d6 <xTickCount>
    1d78:	90 90 d7 16 	lds	r9, 0x16D7	; 0x8016d7 <xTickCount+0x1>
    1d7c:	a0 90 d8 16 	lds	r10, 0x16D8	; 0x8016d8 <xTickCount+0x2>
    1d80:	b0 90 d9 16 	lds	r11, 0x16D9	; 0x8016d9 <xTickCount+0x3>
    1d84:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <pxCurrentTCB>
    1d88:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1d8c:	02 96       	adiw	r24, 0x02	; 2
    1d8e:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	c8 16       	cp	r12, r24
    1d96:	d8 06       	cpc	r13, r24
    1d98:	e8 06       	cpc	r14, r24
    1d9a:	f8 06       	cpc	r15, r24
    1d9c:	b1 f5       	brne	.+108    	; 0x1e0a <prvAddCurrentTaskToDelayedList+0xb0>
    1d9e:	cc 23       	and	r28, r28
    1da0:	a1 f1       	breq	.+104    	; 0x1e0a <prvAddCurrentTaskToDelayedList+0xb0>
    1da2:	eb ed       	ldi	r30, 0xDB	; 219
    1da4:	f6 e1       	ldi	r31, 0x16	; 22
    1da6:	a1 81       	ldd	r26, Z+1	; 0x01
    1da8:	b2 81       	ldd	r27, Z+2	; 0x02
    1daa:	c0 91 85 17 	lds	r28, 0x1785	; 0x801785 <pxCurrentTCB>
    1dae:	d0 91 86 17 	lds	r29, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1db2:	bf 83       	std	Y+7, r27	; 0x07
    1db4:	ae 83       	std	Y+6, r26	; 0x06
    1db6:	c0 91 85 17 	lds	r28, 0x1785	; 0x801785 <pxCurrentTCB>
    1dba:	d0 91 86 17 	lds	r29, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1dbe:	16 96       	adiw	r26, 0x06	; 6
    1dc0:	8d 91       	ld	r24, X+
    1dc2:	9c 91       	ld	r25, X
    1dc4:	17 97       	sbiw	r26, 0x07	; 7
    1dc6:	99 87       	std	Y+9, r25	; 0x09
    1dc8:	88 87       	std	Y+8, r24	; 0x08
    1dca:	16 96       	adiw	r26, 0x06	; 6
    1dcc:	cd 91       	ld	r28, X+
    1dce:	dc 91       	ld	r29, X
    1dd0:	17 97       	sbiw	r26, 0x07	; 7
    1dd2:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <pxCurrentTCB>
    1dd6:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1dda:	02 96       	adiw	r24, 0x02	; 2
    1ddc:	9d 83       	std	Y+5, r25	; 0x05
    1dde:	8c 83       	std	Y+4, r24	; 0x04
    1de0:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <pxCurrentTCB>
    1de4:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1de8:	02 96       	adiw	r24, 0x02	; 2
    1dea:	17 96       	adiw	r26, 0x07	; 7
    1dec:	9c 93       	st	X, r25
    1dee:	8e 93       	st	-X, r24
    1df0:	16 97       	sbiw	r26, 0x06	; 6
    1df2:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
    1df6:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1dfa:	1d 96       	adiw	r26, 0x0d	; 13
    1dfc:	fc 93       	st	X, r31
    1dfe:	ee 93       	st	-X, r30
    1e00:	1c 97       	sbiw	r26, 0x0c	; 12
    1e02:	80 81       	ld	r24, Z
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	80 83       	st	Z, r24
    1e08:	3f c0       	rjmp	.+126    	; 0x1e88 <prvAddCurrentTaskToDelayedList+0x12e>
    1e0a:	c8 0c       	add	r12, r8
    1e0c:	d9 1c       	adc	r13, r9
    1e0e:	ea 1c       	adc	r14, r10
    1e10:	fb 1c       	adc	r15, r11
    1e12:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    1e16:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1e1a:	c2 82       	std	Z+2, r12	; 0x02
    1e1c:	d3 82       	std	Z+3, r13	; 0x03
    1e1e:	e4 82       	std	Z+4, r14	; 0x04
    1e20:	f5 82       	std	Z+5, r15	; 0x05
    1e22:	c8 14       	cp	r12, r8
    1e24:	d9 04       	cpc	r13, r9
    1e26:	ea 04       	cpc	r14, r10
    1e28:	fb 04       	cpc	r15, r11
    1e2a:	68 f4       	brcc	.+26     	; 0x1e46 <prvAddCurrentTaskToDelayedList+0xec>
    1e2c:	60 91 85 17 	lds	r22, 0x1785	; 0x801785 <pxCurrentTCB>
    1e30:	70 91 86 17 	lds	r23, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1e34:	80 91 fd 16 	lds	r24, 0x16FD	; 0x8016fd <pxOverflowDelayedTaskList>
    1e38:	90 91 fe 16 	lds	r25, 0x16FE	; 0x8016fe <pxOverflowDelayedTaskList+0x1>
    1e3c:	6e 5f       	subi	r22, 0xFE	; 254
    1e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e40:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    1e44:	21 c0       	rjmp	.+66     	; 0x1e88 <prvAddCurrentTaskToDelayedList+0x12e>
    1e46:	60 91 85 17 	lds	r22, 0x1785	; 0x801785 <pxCurrentTCB>
    1e4a:	70 91 86 17 	lds	r23, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    1e4e:	80 91 ff 16 	lds	r24, 0x16FF	; 0x8016ff <pxDelayedTaskList>
    1e52:	90 91 00 17 	lds	r25, 0x1700	; 0x801700 <pxDelayedTaskList+0x1>
    1e56:	6e 5f       	subi	r22, 0xFE	; 254
    1e58:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5a:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    1e5e:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <xNextTaskUnblockTime>
    1e62:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <xNextTaskUnblockTime+0x1>
    1e66:	a0 91 cb 16 	lds	r26, 0x16CB	; 0x8016cb <xNextTaskUnblockTime+0x2>
    1e6a:	b0 91 cc 16 	lds	r27, 0x16CC	; 0x8016cc <xNextTaskUnblockTime+0x3>
    1e6e:	c8 16       	cp	r12, r24
    1e70:	d9 06       	cpc	r13, r25
    1e72:	ea 06       	cpc	r14, r26
    1e74:	fb 06       	cpc	r15, r27
    1e76:	40 f4       	brcc	.+16     	; 0x1e88 <prvAddCurrentTaskToDelayedList+0x12e>
    1e78:	c0 92 c9 16 	sts	0x16C9, r12	; 0x8016c9 <xNextTaskUnblockTime>
    1e7c:	d0 92 ca 16 	sts	0x16CA, r13	; 0x8016ca <xNextTaskUnblockTime+0x1>
    1e80:	e0 92 cb 16 	sts	0x16CB, r14	; 0x8016cb <xNextTaskUnblockTime+0x2>
    1e84:	f0 92 cc 16 	sts	0x16CC, r15	; 0x8016cc <xNextTaskUnblockTime+0x3>
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	ff 90       	pop	r15
    1e8e:	ef 90       	pop	r14
    1e90:	df 90       	pop	r13
    1e92:	cf 90       	pop	r12
    1e94:	bf 90       	pop	r11
    1e96:	af 90       	pop	r10
    1e98:	9f 90       	pop	r9
    1e9a:	8f 90       	pop	r8
    1e9c:	08 95       	ret

00001e9e <xTaskCreate>:
    1e9e:	2f 92       	push	r2
    1ea0:	3f 92       	push	r3
    1ea2:	4f 92       	push	r4
    1ea4:	5f 92       	push	r5
    1ea6:	6f 92       	push	r6
    1ea8:	7f 92       	push	r7
    1eaa:	8f 92       	push	r8
    1eac:	9f 92       	push	r9
    1eae:	af 92       	push	r10
    1eb0:	bf 92       	push	r11
    1eb2:	cf 92       	push	r12
    1eb4:	df 92       	push	r13
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	3c 01       	movw	r6, r24
    1ec2:	1b 01       	movw	r2, r22
    1ec4:	4a 01       	movw	r8, r20
    1ec6:	29 01       	movw	r4, r18
    1ec8:	ca 01       	movw	r24, r20
    1eca:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <pvPortMalloc>
    1ece:	6c 01       	movw	r12, r24
    1ed0:	89 2b       	or	r24, r25
    1ed2:	71 f0       	breq	.+28     	; 0x1ef0 <xTaskCreate+0x52>
    1ed4:	84 e3       	ldi	r24, 0x34	; 52
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <pvPortMalloc>
    1edc:	ec 01       	movw	r28, r24
    1ede:	89 2b       	or	r24, r25
    1ee0:	19 f0       	breq	.+6      	; 0x1ee8 <xTaskCreate+0x4a>
    1ee2:	dc 8e       	std	Y+28, r13	; 0x1c
    1ee4:	cb 8e       	std	Y+27, r12	; 0x1b
    1ee6:	06 c0       	rjmp	.+12     	; 0x1ef4 <xTaskCreate+0x56>
    1ee8:	c6 01       	movw	r24, r12
    1eea:	0e 94 82 05 	call	0xb04	; 0xb04 <vPortFree>
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <xTaskCreate+0x56>
    1ef0:	c0 e0       	ldi	r28, 0x00	; 0
    1ef2:	d0 e0       	ldi	r29, 0x00	; 0
    1ef4:	20 97       	sbiw	r28, 0x00	; 0
    1ef6:	61 f0       	breq	.+24     	; 0x1f10 <xTaskCreate+0x72>
    1ef8:	a1 2c       	mov	r10, r1
    1efa:	b1 2c       	mov	r11, r1
    1efc:	6e 01       	movw	r12, r28
    1efe:	92 01       	movw	r18, r4
    1f00:	a4 01       	movw	r20, r8
    1f02:	b1 01       	movw	r22, r2
    1f04:	c3 01       	movw	r24, r6
    1f06:	eb dd       	rcall	.-1066   	; 0x1ade <prvInitialiseNewTask>
    1f08:	ce 01       	movw	r24, r28
    1f0a:	94 de       	rcall	.-728    	; 0x1c34 <prvAddNewTaskToReadyList>
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	01 c0       	rjmp	.+2      	; 0x1f12 <xTaskCreate+0x74>
    1f10:	8f ef       	ldi	r24, 0xFF	; 255
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	0f 91       	pop	r16
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	df 90       	pop	r13
    1f1e:	cf 90       	pop	r12
    1f20:	bf 90       	pop	r11
    1f22:	af 90       	pop	r10
    1f24:	9f 90       	pop	r9
    1f26:	8f 90       	pop	r8
    1f28:	7f 90       	pop	r7
    1f2a:	6f 90       	pop	r6
    1f2c:	5f 90       	pop	r5
    1f2e:	4f 90       	pop	r4
    1f30:	3f 90       	pop	r3
    1f32:	2f 90       	pop	r2
    1f34:	08 95       	ret

00001f36 <vTaskStartScheduler>:
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	0f 2e       	mov	r0, r31
    1f3e:	f7 ec       	ldi	r31, 0xC7	; 199
    1f40:	ef 2e       	mov	r14, r31
    1f42:	f6 e1       	ldi	r31, 0x16	; 22
    1f44:	ff 2e       	mov	r15, r31
    1f46:	f0 2d       	mov	r31, r0
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 ec       	ldi	r20, 0xC0	; 192
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	63 ec       	ldi	r22, 0xC3	; 195
    1f54:	74 e0       	ldi	r23, 0x04	; 4
    1f56:	8e e4       	ldi	r24, 0x4E	; 78
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	a1 df       	rcall	.-190    	; 0x1e9e <xTaskCreate>
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	11 f4       	brne	.+4      	; 0x1f64 <vTaskStartScheduler+0x2e>
    1f60:	0e 94 4d 19 	call	0x329a	; 0x329a <xTimerCreateTimerTask>
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	c9 f4       	brne	.+50     	; 0x1f9a <vTaskStartScheduler+0x64>
    1f68:	f8 94       	cli
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
    1f6c:	9f ef       	ldi	r25, 0xFF	; 255
    1f6e:	dc 01       	movw	r26, r24
    1f70:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <xNextTaskUnblockTime>
    1f74:	90 93 ca 16 	sts	0x16CA, r25	; 0x8016ca <xNextTaskUnblockTime+0x1>
    1f78:	a0 93 cb 16 	sts	0x16CB, r26	; 0x8016cb <xNextTaskUnblockTime+0x2>
    1f7c:	b0 93 cc 16 	sts	0x16CC, r27	; 0x8016cc <xNextTaskUnblockTime+0x3>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	80 93 d4 16 	sts	0x16D4, r24	; 0x8016d4 <xSchedulerRunning>
    1f86:	10 92 d6 16 	sts	0x16D6, r1	; 0x8016d6 <xTickCount>
    1f8a:	10 92 d7 16 	sts	0x16D7, r1	; 0x8016d7 <xTickCount+0x1>
    1f8e:	10 92 d8 16 	sts	0x16D8, r1	; 0x8016d8 <xTickCount+0x2>
    1f92:	10 92 d9 16 	sts	0x16D9, r1	; 0x8016d9 <xTickCount+0x3>
    1f96:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <xPortStartScheduler>
    1f9a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1f9e:	0f 91       	pop	r16
    1fa0:	ff 90       	pop	r15
    1fa2:	ef 90       	pop	r14
    1fa4:	08 95       	ret

00001fa6 <vTaskSuspendAll>:
    1fa6:	80 91 c6 16 	lds	r24, 0x16C6	; 0x8016c6 <uxSchedulerSuspended>
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
    1fac:	80 93 c6 16 	sts	0x16C6, r24	; 0x8016c6 <uxSchedulerSuspended>
    1fb0:	08 95       	ret

00001fb2 <xTaskGetTickCount>:
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	0f 92       	push	r0
    1fb8:	60 91 d6 16 	lds	r22, 0x16D6	; 0x8016d6 <xTickCount>
    1fbc:	70 91 d7 16 	lds	r23, 0x16D7	; 0x8016d7 <xTickCount+0x1>
    1fc0:	80 91 d8 16 	lds	r24, 0x16D8	; 0x8016d8 <xTickCount+0x2>
    1fc4:	90 91 d9 16 	lds	r25, 0x16D9	; 0x8016d9 <xTickCount+0x3>
    1fc8:	0f 90       	pop	r0
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	08 95       	ret

00001fce <xTaskIncrementTick>:
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	80 91 c6 16 	lds	r24, 0x16C6	; 0x8016c6 <uxSchedulerSuspended>
    1fde:	81 11       	cpse	r24, r1
    1fe0:	05 c1       	rjmp	.+522    	; 0x21ec <__DATA_REGION_LENGTH__+0x1ec>
    1fe2:	c0 90 d6 16 	lds	r12, 0x16D6	; 0x8016d6 <xTickCount>
    1fe6:	d0 90 d7 16 	lds	r13, 0x16D7	; 0x8016d7 <xTickCount+0x1>
    1fea:	e0 90 d8 16 	lds	r14, 0x16D8	; 0x8016d8 <xTickCount+0x2>
    1fee:	f0 90 d9 16 	lds	r15, 0x16D9	; 0x8016d9 <xTickCount+0x3>
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	c8 1a       	sub	r12, r24
    1ff6:	d8 0a       	sbc	r13, r24
    1ff8:	e8 0a       	sbc	r14, r24
    1ffa:	f8 0a       	sbc	r15, r24
    1ffc:	c0 92 d6 16 	sts	0x16D6, r12	; 0x8016d6 <xTickCount>
    2000:	d0 92 d7 16 	sts	0x16D7, r13	; 0x8016d7 <xTickCount+0x1>
    2004:	e0 92 d8 16 	sts	0x16D8, r14	; 0x8016d8 <xTickCount+0x2>
    2008:	f0 92 d9 16 	sts	0x16D9, r15	; 0x8016d9 <xTickCount+0x3>
    200c:	c1 14       	cp	r12, r1
    200e:	d1 04       	cpc	r13, r1
    2010:	e1 04       	cpc	r14, r1
    2012:	f1 04       	cpc	r15, r1
    2014:	b1 f4       	brne	.+44     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    2016:	80 91 ff 16 	lds	r24, 0x16FF	; 0x8016ff <pxDelayedTaskList>
    201a:	90 91 00 17 	lds	r25, 0x1700	; 0x801700 <pxDelayedTaskList+0x1>
    201e:	20 91 fd 16 	lds	r18, 0x16FD	; 0x8016fd <pxOverflowDelayedTaskList>
    2022:	30 91 fe 16 	lds	r19, 0x16FE	; 0x8016fe <pxOverflowDelayedTaskList+0x1>
    2026:	30 93 00 17 	sts	0x1700, r19	; 0x801700 <pxDelayedTaskList+0x1>
    202a:	20 93 ff 16 	sts	0x16FF, r18	; 0x8016ff <pxDelayedTaskList>
    202e:	90 93 fe 16 	sts	0x16FE, r25	; 0x8016fe <pxOverflowDelayedTaskList+0x1>
    2032:	80 93 fd 16 	sts	0x16FD, r24	; 0x8016fd <pxOverflowDelayedTaskList>
    2036:	80 91 ce 16 	lds	r24, 0x16CE	; 0x8016ce <xNumOfOverflows>
    203a:	8f 5f       	subi	r24, 0xFF	; 255
    203c:	80 93 ce 16 	sts	0x16CE, r24	; 0x8016ce <xNumOfOverflows>
    2040:	1c dd       	rcall	.-1480   	; 0x1a7a <prvResetNextTaskUnblockTime>
    2042:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <xNextTaskUnblockTime>
    2046:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <xNextTaskUnblockTime+0x1>
    204a:	a0 91 cb 16 	lds	r26, 0x16CB	; 0x8016cb <xNextTaskUnblockTime+0x2>
    204e:	b0 91 cc 16 	lds	r27, 0x16CC	; 0x8016cc <xNextTaskUnblockTime+0x3>
    2052:	c8 16       	cp	r12, r24
    2054:	d9 06       	cpc	r13, r25
    2056:	ea 06       	cpc	r14, r26
    2058:	fb 06       	cpc	r15, r27
    205a:	20 f4       	brcc	.+8      	; 0x2064 <__DATA_REGION_LENGTH__+0x64>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	b2 c0       	rjmp	.+356    	; 0x21c4 <__DATA_REGION_LENGTH__+0x1c4>
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	e0 91 ff 16 	lds	r30, 0x16FF	; 0x8016ff <pxDelayedTaskList>
    206a:	f0 91 00 17 	lds	r31, 0x1700	; 0x801700 <pxDelayedTaskList+0x1>
    206e:	90 81       	ld	r25, Z
    2070:	91 11       	cpse	r25, r1
    2072:	0c c0       	rjmp	.+24     	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    2074:	4f ef       	ldi	r20, 0xFF	; 255
    2076:	5f ef       	ldi	r21, 0xFF	; 255
    2078:	ba 01       	movw	r22, r20
    207a:	40 93 c9 16 	sts	0x16C9, r20	; 0x8016c9 <xNextTaskUnblockTime>
    207e:	50 93 ca 16 	sts	0x16CA, r21	; 0x8016ca <xNextTaskUnblockTime+0x1>
    2082:	60 93 cb 16 	sts	0x16CB, r22	; 0x8016cb <xNextTaskUnblockTime+0x2>
    2086:	70 93 cc 16 	sts	0x16CC, r23	; 0x8016cc <xNextTaskUnblockTime+0x3>
    208a:	9c c0       	rjmp	.+312    	; 0x21c4 <__DATA_REGION_LENGTH__+0x1c4>
    208c:	e0 91 ff 16 	lds	r30, 0x16FF	; 0x8016ff <pxDelayedTaskList>
    2090:	f0 91 00 17 	lds	r31, 0x1700	; 0x801700 <pxDelayedTaskList+0x1>
    2094:	07 80       	ldd	r0, Z+7	; 0x07
    2096:	f0 85       	ldd	r31, Z+8	; 0x08
    2098:	e0 2d       	mov	r30, r0
    209a:	00 84       	ldd	r0, Z+8	; 0x08
    209c:	f1 85       	ldd	r31, Z+9	; 0x09
    209e:	e0 2d       	mov	r30, r0
    20a0:	42 81       	ldd	r20, Z+2	; 0x02
    20a2:	53 81       	ldd	r21, Z+3	; 0x03
    20a4:	64 81       	ldd	r22, Z+4	; 0x04
    20a6:	75 81       	ldd	r23, Z+5	; 0x05
    20a8:	c4 16       	cp	r12, r20
    20aa:	d5 06       	cpc	r13, r21
    20ac:	e6 06       	cpc	r14, r22
    20ae:	f7 06       	cpc	r15, r23
    20b0:	48 f4       	brcc	.+18     	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    20b2:	40 93 c9 16 	sts	0x16C9, r20	; 0x8016c9 <xNextTaskUnblockTime>
    20b6:	50 93 ca 16 	sts	0x16CA, r21	; 0x8016ca <xNextTaskUnblockTime+0x1>
    20ba:	60 93 cb 16 	sts	0x16CB, r22	; 0x8016cb <xNextTaskUnblockTime+0x2>
    20be:	70 93 cc 16 	sts	0x16CC, r23	; 0x8016cc <xNextTaskUnblockTime+0x3>
    20c2:	80 c0       	rjmp	.+256    	; 0x21c4 <__DATA_REGION_LENGTH__+0x1c4>
    20c4:	a4 85       	ldd	r26, Z+12	; 0x0c
    20c6:	b5 85       	ldd	r27, Z+13	; 0x0d
    20c8:	c6 81       	ldd	r28, Z+6	; 0x06
    20ca:	d7 81       	ldd	r29, Z+7	; 0x07
    20cc:	20 85       	ldd	r18, Z+8	; 0x08
    20ce:	31 85       	ldd	r19, Z+9	; 0x09
    20d0:	3f 83       	std	Y+7, r19	; 0x07
    20d2:	2e 83       	std	Y+6, r18	; 0x06
    20d4:	c0 85       	ldd	r28, Z+8	; 0x08
    20d6:	d1 85       	ldd	r29, Z+9	; 0x09
    20d8:	26 81       	ldd	r18, Z+6	; 0x06
    20da:	37 81       	ldd	r19, Z+7	; 0x07
    20dc:	3d 83       	std	Y+5, r19	; 0x05
    20de:	2c 83       	std	Y+4, r18	; 0x04
    20e0:	11 96       	adiw	r26, 0x01	; 1
    20e2:	4d 91       	ld	r20, X+
    20e4:	5c 91       	ld	r21, X
    20e6:	12 97       	sbiw	r26, 0x02	; 2
    20e8:	9f 01       	movw	r18, r30
    20ea:	2e 5f       	subi	r18, 0xFE	; 254
    20ec:	3f 4f       	sbci	r19, 0xFF	; 255
    20ee:	42 17       	cp	r20, r18
    20f0:	53 07       	cpc	r21, r19
    20f2:	31 f4       	brne	.+12     	; 0x2100 <__DATA_REGION_LENGTH__+0x100>
    20f4:	40 85       	ldd	r20, Z+8	; 0x08
    20f6:	51 85       	ldd	r21, Z+9	; 0x09
    20f8:	12 96       	adiw	r26, 0x02	; 2
    20fa:	5c 93       	st	X, r21
    20fc:	4e 93       	st	-X, r20
    20fe:	11 97       	sbiw	r26, 0x01	; 1
    2100:	15 86       	std	Z+13, r1	; 0x0d
    2102:	14 86       	std	Z+12, r1	; 0x0c
    2104:	9c 91       	ld	r25, X
    2106:	91 50       	subi	r25, 0x01	; 1
    2108:	9c 93       	st	X, r25
    210a:	a0 8d       	ldd	r26, Z+24	; 0x18
    210c:	b1 8d       	ldd	r27, Z+25	; 0x19
    210e:	10 97       	sbiw	r26, 0x00	; 0
    2110:	09 f1       	breq	.+66     	; 0x2154 <__DATA_REGION_LENGTH__+0x154>
    2112:	c2 89       	ldd	r28, Z+18	; 0x12
    2114:	d3 89       	ldd	r29, Z+19	; 0x13
    2116:	44 89       	ldd	r20, Z+20	; 0x14
    2118:	55 89       	ldd	r21, Z+21	; 0x15
    211a:	5f 83       	std	Y+7, r21	; 0x07
    211c:	4e 83       	std	Y+6, r20	; 0x06
    211e:	c4 89       	ldd	r28, Z+20	; 0x14
    2120:	d5 89       	ldd	r29, Z+21	; 0x15
    2122:	42 89       	ldd	r20, Z+18	; 0x12
    2124:	53 89       	ldd	r21, Z+19	; 0x13
    2126:	5d 83       	std	Y+5, r21	; 0x05
    2128:	4c 83       	std	Y+4, r20	; 0x04
    212a:	11 96       	adiw	r26, 0x01	; 1
    212c:	6d 91       	ld	r22, X+
    212e:	7c 91       	ld	r23, X
    2130:	12 97       	sbiw	r26, 0x02	; 2
    2132:	af 01       	movw	r20, r30
    2134:	42 5f       	subi	r20, 0xF2	; 242
    2136:	5f 4f       	sbci	r21, 0xFF	; 255
    2138:	64 17       	cp	r22, r20
    213a:	75 07       	cpc	r23, r21
    213c:	31 f4       	brne	.+12     	; 0x214a <__DATA_REGION_LENGTH__+0x14a>
    213e:	44 89       	ldd	r20, Z+20	; 0x14
    2140:	55 89       	ldd	r21, Z+21	; 0x15
    2142:	12 96       	adiw	r26, 0x02	; 2
    2144:	5c 93       	st	X, r21
    2146:	4e 93       	st	-X, r20
    2148:	11 97       	sbiw	r26, 0x01	; 1
    214a:	11 8e       	std	Z+25, r1	; 0x19
    214c:	10 8e       	std	Z+24, r1	; 0x18
    214e:	9c 91       	ld	r25, X
    2150:	91 50       	subi	r25, 0x01	; 1
    2152:	9c 93       	st	X, r25
    2154:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2156:	90 91 d5 16 	lds	r25, 0x16D5	; 0x8016d5 <uxTopReadyPriority>
    215a:	9a 17       	cp	r25, r26
    215c:	10 f4       	brcc	.+4      	; 0x2162 <__DATA_REGION_LENGTH__+0x162>
    215e:	a0 93 d5 16 	sts	0x16D5, r26	; 0x8016d5 <uxTopReadyPriority>
    2162:	9b e0       	ldi	r25, 0x0B	; 11
    2164:	9a 9f       	mul	r25, r26
    2166:	d0 01       	movw	r26, r0
    2168:	11 24       	eor	r1, r1
    216a:	a9 5e       	subi	r26, 0xE9	; 233
    216c:	b8 4e       	sbci	r27, 0xE8	; 232
    216e:	11 96       	adiw	r26, 0x01	; 1
    2170:	0d 90       	ld	r0, X+
    2172:	bc 91       	ld	r27, X
    2174:	a0 2d       	mov	r26, r0
    2176:	b7 83       	std	Z+7, r27	; 0x07
    2178:	a6 83       	std	Z+6, r26	; 0x06
    217a:	16 96       	adiw	r26, 0x06	; 6
    217c:	4d 91       	ld	r20, X+
    217e:	5c 91       	ld	r21, X
    2180:	17 97       	sbiw	r26, 0x07	; 7
    2182:	51 87       	std	Z+9, r21	; 0x09
    2184:	40 87       	std	Z+8, r20	; 0x08
    2186:	16 96       	adiw	r26, 0x06	; 6
    2188:	cd 91       	ld	r28, X+
    218a:	dc 91       	ld	r29, X
    218c:	17 97       	sbiw	r26, 0x07	; 7
    218e:	3d 83       	std	Y+5, r19	; 0x05
    2190:	2c 83       	std	Y+4, r18	; 0x04
    2192:	17 96       	adiw	r26, 0x07	; 7
    2194:	3c 93       	st	X, r19
    2196:	2e 93       	st	-X, r18
    2198:	16 97       	sbiw	r26, 0x06	; 6
    219a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    219c:	9a 9f       	mul	r25, r26
    219e:	d0 01       	movw	r26, r0
    21a0:	11 24       	eor	r1, r1
    21a2:	a9 5e       	subi	r26, 0xE9	; 233
    21a4:	b8 4e       	sbci	r27, 0xE8	; 232
    21a6:	b5 87       	std	Z+13, r27	; 0x0d
    21a8:	a4 87       	std	Z+12, r26	; 0x0c
    21aa:	9c 91       	ld	r25, X
    21ac:	9f 5f       	subi	r25, 0xFF	; 255
    21ae:	9c 93       	st	X, r25
    21b0:	22 8d       	ldd	r18, Z+26	; 0x1a
    21b2:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    21b6:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    21ba:	92 8d       	ldd	r25, Z+26	; 0x1a
    21bc:	29 17       	cp	r18, r25
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <__DATA_REGION_LENGTH__+0x1c2>
    21c0:	4f cf       	rjmp	.-354    	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    21c2:	51 cf       	rjmp	.-350    	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    21c4:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    21c8:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    21cc:	e2 8d       	ldd	r30, Z+26	; 0x1a
    21ce:	9b e0       	ldi	r25, 0x0B	; 11
    21d0:	e9 9f       	mul	r30, r25
    21d2:	f0 01       	movw	r30, r0
    21d4:	11 24       	eor	r1, r1
    21d6:	e9 5e       	subi	r30, 0xE9	; 233
    21d8:	f8 4e       	sbci	r31, 0xE8	; 232
    21da:	90 81       	ld	r25, Z
    21dc:	92 30       	cpi	r25, 0x02	; 2
    21de:	08 f0       	brcs	.+2      	; 0x21e2 <__DATA_REGION_LENGTH__+0x1e2>
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 91 cf 16 	lds	r25, 0x16CF	; 0x8016cf <xYieldPending>
    21e6:	91 11       	cpse	r25, r1
    21e8:	16 c0       	rjmp	.+44     	; 0x2216 <__stack+0x17>
    21ea:	16 c0       	rjmp	.+44     	; 0x2218 <__stack+0x19>
    21ec:	80 91 d0 16 	lds	r24, 0x16D0	; 0x8016d0 <xPendedTicks>
    21f0:	90 91 d1 16 	lds	r25, 0x16D1	; 0x8016d1 <xPendedTicks+0x1>
    21f4:	a0 91 d2 16 	lds	r26, 0x16D2	; 0x8016d2 <xPendedTicks+0x2>
    21f8:	b0 91 d3 16 	lds	r27, 0x16D3	; 0x8016d3 <xPendedTicks+0x3>
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	a1 1d       	adc	r26, r1
    2200:	b1 1d       	adc	r27, r1
    2202:	80 93 d0 16 	sts	0x16D0, r24	; 0x8016d0 <xPendedTicks>
    2206:	90 93 d1 16 	sts	0x16D1, r25	; 0x8016d1 <xPendedTicks+0x1>
    220a:	a0 93 d2 16 	sts	0x16D2, r26	; 0x8016d2 <xPendedTicks+0x2>
    220e:	b0 93 d3 16 	sts	0x16D3, r27	; 0x8016d3 <xPendedTicks+0x3>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <__stack+0x19>
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	ff 90       	pop	r15
    221e:	ef 90       	pop	r14
    2220:	df 90       	pop	r13
    2222:	cf 90       	pop	r12
    2224:	08 95       	ret

00002226 <xTaskResumeAll>:
    2226:	cf 92       	push	r12
    2228:	df 92       	push	r13
    222a:	ef 92       	push	r14
    222c:	ff 92       	push	r15
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	0f 92       	push	r0
    2238:	80 91 c6 16 	lds	r24, 0x16C6	; 0x8016c6 <uxSchedulerSuspended>
    223c:	81 50       	subi	r24, 0x01	; 1
    223e:	80 93 c6 16 	sts	0x16C6, r24	; 0x8016c6 <uxSchedulerSuspended>
    2242:	80 91 c6 16 	lds	r24, 0x16C6	; 0x8016c6 <uxSchedulerSuspended>
    2246:	81 11       	cpse	r24, r1
    2248:	be c0       	rjmp	.+380    	; 0x23c6 <xTaskResumeAll+0x1a0>
    224a:	80 91 da 16 	lds	r24, 0x16DA	; 0x8016da <uxCurrentNumberOfTasks>
    224e:	81 11       	cpse	r24, r1
    2250:	88 c0       	rjmp	.+272    	; 0x2362 <xTaskResumeAll+0x13c>
    2252:	bc c0       	rjmp	.+376    	; 0x23cc <xTaskResumeAll+0x1a6>
    2254:	e0 91 f9 16 	lds	r30, 0x16F9	; 0x8016f9 <xPendingReadyList+0x7>
    2258:	f0 91 fa 16 	lds	r31, 0x16FA	; 0x8016fa <xPendingReadyList+0x8>
    225c:	00 84       	ldd	r0, Z+8	; 0x08
    225e:	f1 85       	ldd	r31, Z+9	; 0x09
    2260:	e0 2d       	mov	r30, r0
    2262:	a0 8d       	ldd	r26, Z+24	; 0x18
    2264:	b1 8d       	ldd	r27, Z+25	; 0x19
    2266:	c2 89       	ldd	r28, Z+18	; 0x12
    2268:	d3 89       	ldd	r29, Z+19	; 0x13
    226a:	84 89       	ldd	r24, Z+20	; 0x14
    226c:	95 89       	ldd	r25, Z+21	; 0x15
    226e:	9f 83       	std	Y+7, r25	; 0x07
    2270:	8e 83       	std	Y+6, r24	; 0x06
    2272:	c4 89       	ldd	r28, Z+20	; 0x14
    2274:	d5 89       	ldd	r29, Z+21	; 0x15
    2276:	82 89       	ldd	r24, Z+18	; 0x12
    2278:	93 89       	ldd	r25, Z+19	; 0x13
    227a:	9d 83       	std	Y+5, r25	; 0x05
    227c:	8c 83       	std	Y+4, r24	; 0x04
    227e:	11 96       	adiw	r26, 0x01	; 1
    2280:	2d 91       	ld	r18, X+
    2282:	3c 91       	ld	r19, X
    2284:	12 97       	sbiw	r26, 0x02	; 2
    2286:	cf 01       	movw	r24, r30
    2288:	0e 96       	adiw	r24, 0x0e	; 14
    228a:	28 17       	cp	r18, r24
    228c:	39 07       	cpc	r19, r25
    228e:	31 f4       	brne	.+12     	; 0x229c <xTaskResumeAll+0x76>
    2290:	84 89       	ldd	r24, Z+20	; 0x14
    2292:	95 89       	ldd	r25, Z+21	; 0x15
    2294:	12 96       	adiw	r26, 0x02	; 2
    2296:	9c 93       	st	X, r25
    2298:	8e 93       	st	-X, r24
    229a:	11 97       	sbiw	r26, 0x01	; 1
    229c:	11 8e       	std	Z+25, r1	; 0x19
    229e:	10 8e       	std	Z+24, r1	; 0x18
    22a0:	8c 91       	ld	r24, X
    22a2:	81 50       	subi	r24, 0x01	; 1
    22a4:	8c 93       	st	X, r24
    22a6:	a4 85       	ldd	r26, Z+12	; 0x0c
    22a8:	b5 85       	ldd	r27, Z+13	; 0x0d
    22aa:	c6 81       	ldd	r28, Z+6	; 0x06
    22ac:	d7 81       	ldd	r29, Z+7	; 0x07
    22ae:	80 85       	ldd	r24, Z+8	; 0x08
    22b0:	91 85       	ldd	r25, Z+9	; 0x09
    22b2:	9f 83       	std	Y+7, r25	; 0x07
    22b4:	8e 83       	std	Y+6, r24	; 0x06
    22b6:	c0 85       	ldd	r28, Z+8	; 0x08
    22b8:	d1 85       	ldd	r29, Z+9	; 0x09
    22ba:	86 81       	ldd	r24, Z+6	; 0x06
    22bc:	97 81       	ldd	r25, Z+7	; 0x07
    22be:	9d 83       	std	Y+5, r25	; 0x05
    22c0:	8c 83       	std	Y+4, r24	; 0x04
    22c2:	11 96       	adiw	r26, 0x01	; 1
    22c4:	8d 91       	ld	r24, X+
    22c6:	9c 91       	ld	r25, X
    22c8:	12 97       	sbiw	r26, 0x02	; 2
    22ca:	9f 01       	movw	r18, r30
    22cc:	2e 5f       	subi	r18, 0xFE	; 254
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    22d0:	82 17       	cp	r24, r18
    22d2:	93 07       	cpc	r25, r19
    22d4:	31 f4       	brne	.+12     	; 0x22e2 <xTaskResumeAll+0xbc>
    22d6:	80 85       	ldd	r24, Z+8	; 0x08
    22d8:	91 85       	ldd	r25, Z+9	; 0x09
    22da:	12 96       	adiw	r26, 0x02	; 2
    22dc:	9c 93       	st	X, r25
    22de:	8e 93       	st	-X, r24
    22e0:	11 97       	sbiw	r26, 0x01	; 1
    22e2:	15 86       	std	Z+13, r1	; 0x0d
    22e4:	14 86       	std	Z+12, r1	; 0x0c
    22e6:	8c 91       	ld	r24, X
    22e8:	81 50       	subi	r24, 0x01	; 1
    22ea:	8c 93       	st	X, r24
    22ec:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22ee:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <uxTopReadyPriority>
    22f2:	8a 17       	cp	r24, r26
    22f4:	10 f4       	brcc	.+4      	; 0x22fa <xTaskResumeAll+0xd4>
    22f6:	a0 93 d5 16 	sts	0x16D5, r26	; 0x8016d5 <uxTopReadyPriority>
    22fa:	8b e0       	ldi	r24, 0x0B	; 11
    22fc:	8a 9f       	mul	r24, r26
    22fe:	d0 01       	movw	r26, r0
    2300:	11 24       	eor	r1, r1
    2302:	a9 5e       	subi	r26, 0xE9	; 233
    2304:	b8 4e       	sbci	r27, 0xE8	; 232
    2306:	11 96       	adiw	r26, 0x01	; 1
    2308:	0d 90       	ld	r0, X+
    230a:	bc 91       	ld	r27, X
    230c:	a0 2d       	mov	r26, r0
    230e:	b7 83       	std	Z+7, r27	; 0x07
    2310:	a6 83       	std	Z+6, r26	; 0x06
    2312:	16 96       	adiw	r26, 0x06	; 6
    2314:	4d 91       	ld	r20, X+
    2316:	5c 91       	ld	r21, X
    2318:	17 97       	sbiw	r26, 0x07	; 7
    231a:	51 87       	std	Z+9, r21	; 0x09
    231c:	40 87       	std	Z+8, r20	; 0x08
    231e:	16 96       	adiw	r26, 0x06	; 6
    2320:	cd 91       	ld	r28, X+
    2322:	dc 91       	ld	r29, X
    2324:	17 97       	sbiw	r26, 0x07	; 7
    2326:	3d 83       	std	Y+5, r19	; 0x05
    2328:	2c 83       	std	Y+4, r18	; 0x04
    232a:	17 96       	adiw	r26, 0x07	; 7
    232c:	3c 93       	st	X, r19
    232e:	2e 93       	st	-X, r18
    2330:	16 97       	sbiw	r26, 0x06	; 6
    2332:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2334:	8a 9f       	mul	r24, r26
    2336:	d0 01       	movw	r26, r0
    2338:	11 24       	eor	r1, r1
    233a:	a9 5e       	subi	r26, 0xE9	; 233
    233c:	b8 4e       	sbci	r27, 0xE8	; 232
    233e:	b5 87       	std	Z+13, r27	; 0x0d
    2340:	a4 87       	std	Z+12, r26	; 0x0c
    2342:	8c 91       	ld	r24, X
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	8c 93       	st	X, r24
    2348:	92 8d       	ldd	r25, Z+26	; 0x1a
    234a:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
    234e:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2352:	5a 96       	adiw	r26, 0x1a	; 26
    2354:	8c 91       	ld	r24, X
    2356:	98 17       	cp	r25, r24
    2358:	30 f0       	brcs	.+12     	; 0x2366 <xTaskResumeAll+0x140>
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xYieldPending>
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <xTaskResumeAll+0x140>
    2362:	e0 e0       	ldi	r30, 0x00	; 0
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 91 f2 16 	lds	r24, 0x16F2	; 0x8016f2 <xPendingReadyList>
    236a:	81 11       	cpse	r24, r1
    236c:	73 cf       	rjmp	.-282    	; 0x2254 <xTaskResumeAll+0x2e>
    236e:	ef 2b       	or	r30, r31
    2370:	09 f0       	breq	.+2      	; 0x2374 <xTaskResumeAll+0x14e>
    2372:	83 db       	rcall	.-2298   	; 0x1a7a <prvResetNextTaskUnblockTime>
    2374:	c0 90 d0 16 	lds	r12, 0x16D0	; 0x8016d0 <xPendedTicks>
    2378:	d0 90 d1 16 	lds	r13, 0x16D1	; 0x8016d1 <xPendedTicks+0x1>
    237c:	e0 90 d2 16 	lds	r14, 0x16D2	; 0x8016d2 <xPendedTicks+0x2>
    2380:	f0 90 d3 16 	lds	r15, 0x16D3	; 0x8016d3 <xPendedTicks+0x3>
    2384:	c1 14       	cp	r12, r1
    2386:	d1 04       	cpc	r13, r1
    2388:	e1 04       	cpc	r14, r1
    238a:	f1 04       	cpc	r15, r1
    238c:	a1 f0       	breq	.+40     	; 0x23b6 <xTaskResumeAll+0x190>
    238e:	1f de       	rcall	.-962    	; 0x1fce <xTaskIncrementTick>
    2390:	88 23       	and	r24, r24
    2392:	19 f0       	breq	.+6      	; 0x239a <xTaskResumeAll+0x174>
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xYieldPending>
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	c8 1a       	sub	r12, r24
    239e:	d1 08       	sbc	r13, r1
    23a0:	e1 08       	sbc	r14, r1
    23a2:	f1 08       	sbc	r15, r1
    23a4:	a1 f7       	brne	.-24     	; 0x238e <xTaskResumeAll+0x168>
    23a6:	10 92 d0 16 	sts	0x16D0, r1	; 0x8016d0 <xPendedTicks>
    23aa:	10 92 d1 16 	sts	0x16D1, r1	; 0x8016d1 <xPendedTicks+0x1>
    23ae:	10 92 d2 16 	sts	0x16D2, r1	; 0x8016d2 <xPendedTicks+0x2>
    23b2:	10 92 d3 16 	sts	0x16D3, r1	; 0x8016d3 <xPendedTicks+0x3>
    23b6:	80 91 cf 16 	lds	r24, 0x16CF	; 0x8016cf <xYieldPending>
    23ba:	88 23       	and	r24, r24
    23bc:	31 f0       	breq	.+12     	; 0x23ca <xTaskResumeAll+0x1a4>
    23be:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <xTaskResumeAll+0x1a6>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <xTaskResumeAll+0x1a6>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	0f 90       	pop	r0
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	08 95       	ret

000023de <xTaskDelayUntil>:
    23de:	8f 92       	push	r8
    23e0:	9f 92       	push	r9
    23e2:	af 92       	push	r10
    23e4:	bf 92       	push	r11
    23e6:	cf 92       	push	r12
    23e8:	df 92       	push	r13
    23ea:	ef 92       	push	r14
    23ec:	ff 92       	push	r15
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	ec 01       	movw	r28, r24
    23f6:	6a 01       	movw	r12, r20
    23f8:	7b 01       	movw	r14, r22
    23fa:	d5 dd       	rcall	.-1110   	; 0x1fa6 <vTaskSuspendAll>
    23fc:	80 90 d6 16 	lds	r8, 0x16D6	; 0x8016d6 <xTickCount>
    2400:	90 90 d7 16 	lds	r9, 0x16D7	; 0x8016d7 <xTickCount+0x1>
    2404:	a0 90 d8 16 	lds	r10, 0x16D8	; 0x8016d8 <xTickCount+0x2>
    2408:	b0 90 d9 16 	lds	r11, 0x16D9	; 0x8016d9 <xTickCount+0x3>
    240c:	88 81       	ld	r24, Y
    240e:	99 81       	ldd	r25, Y+1	; 0x01
    2410:	aa 81       	ldd	r26, Y+2	; 0x02
    2412:	bb 81       	ldd	r27, Y+3	; 0x03
    2414:	ac 01       	movw	r20, r24
    2416:	bd 01       	movw	r22, r26
    2418:	4c 0d       	add	r20, r12
    241a:	5d 1d       	adc	r21, r13
    241c:	6e 1d       	adc	r22, r14
    241e:	7f 1d       	adc	r23, r15
    2420:	88 16       	cp	r8, r24
    2422:	99 06       	cpc	r9, r25
    2424:	aa 06       	cpc	r10, r26
    2426:	bb 06       	cpc	r11, r27
    2428:	60 f4       	brcc	.+24     	; 0x2442 <xTaskDelayUntil+0x64>
    242a:	48 17       	cp	r20, r24
    242c:	59 07       	cpc	r21, r25
    242e:	6a 07       	cpc	r22, r26
    2430:	7b 07       	cpc	r23, r27
    2432:	98 f4       	brcc	.+38     	; 0x245a <xTaskDelayUntil+0x7c>
    2434:	84 16       	cp	r8, r20
    2436:	95 06       	cpc	r9, r21
    2438:	a6 06       	cpc	r10, r22
    243a:	b7 06       	cpc	r11, r23
    243c:	80 f0       	brcs	.+32     	; 0x245e <xTaskDelayUntil+0x80>
    243e:	10 e0       	ldi	r17, 0x00	; 0
    2440:	13 c0       	rjmp	.+38     	; 0x2468 <xTaskDelayUntil+0x8a>
    2442:	48 17       	cp	r20, r24
    2444:	59 07       	cpc	r21, r25
    2446:	6a 07       	cpc	r22, r26
    2448:	7b 07       	cpc	r23, r27
    244a:	58 f0       	brcs	.+22     	; 0x2462 <xTaskDelayUntil+0x84>
    244c:	84 16       	cp	r8, r20
    244e:	95 06       	cpc	r9, r21
    2450:	a6 06       	cpc	r10, r22
    2452:	b7 06       	cpc	r11, r23
    2454:	40 f0       	brcs	.+16     	; 0x2466 <xTaskDelayUntil+0x88>
    2456:	10 e0       	ldi	r17, 0x00	; 0
    2458:	07 c0       	rjmp	.+14     	; 0x2468 <xTaskDelayUntil+0x8a>
    245a:	10 e0       	ldi	r17, 0x00	; 0
    245c:	05 c0       	rjmp	.+10     	; 0x2468 <xTaskDelayUntil+0x8a>
    245e:	11 e0       	ldi	r17, 0x01	; 1
    2460:	03 c0       	rjmp	.+6      	; 0x2468 <xTaskDelayUntil+0x8a>
    2462:	11 e0       	ldi	r17, 0x01	; 1
    2464:	01 c0       	rjmp	.+2      	; 0x2468 <xTaskDelayUntil+0x8a>
    2466:	11 e0       	ldi	r17, 0x01	; 1
    2468:	48 83       	st	Y, r20
    246a:	59 83       	std	Y+1, r21	; 0x01
    246c:	6a 83       	std	Y+2, r22	; 0x02
    246e:	7b 83       	std	Y+3, r23	; 0x03
    2470:	11 23       	and	r17, r17
    2472:	41 f0       	breq	.+16     	; 0x2484 <xTaskDelayUntil+0xa6>
    2474:	cb 01       	movw	r24, r22
    2476:	ba 01       	movw	r22, r20
    2478:	68 19       	sub	r22, r8
    247a:	79 09       	sbc	r23, r9
    247c:	8a 09       	sbc	r24, r10
    247e:	9b 09       	sbc	r25, r11
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	6b dc       	rcall	.-1834   	; 0x1d5a <prvAddCurrentTaskToDelayedList>
    2484:	d0 de       	rcall	.-608    	; 0x2226 <xTaskResumeAll>
    2486:	81 11       	cpse	r24, r1
    2488:	02 c0       	rjmp	.+4      	; 0x248e <xTaskDelayUntil+0xb0>
    248a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    248e:	81 2f       	mov	r24, r17
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	1f 91       	pop	r17
    2496:	ff 90       	pop	r15
    2498:	ef 90       	pop	r14
    249a:	df 90       	pop	r13
    249c:	cf 90       	pop	r12
    249e:	bf 90       	pop	r11
    24a0:	af 90       	pop	r10
    24a2:	9f 90       	pop	r9
    24a4:	8f 90       	pop	r8
    24a6:	08 95       	ret

000024a8 <vTaskDelay>:
    24a8:	cf 92       	push	r12
    24aa:	df 92       	push	r13
    24ac:	ef 92       	push	r14
    24ae:	ff 92       	push	r15
    24b0:	6b 01       	movw	r12, r22
    24b2:	7c 01       	movw	r14, r24
    24b4:	67 2b       	or	r22, r23
    24b6:	68 2b       	or	r22, r24
    24b8:	69 2b       	or	r22, r25
    24ba:	39 f0       	breq	.+14     	; 0x24ca <vTaskDelay+0x22>
    24bc:	74 dd       	rcall	.-1304   	; 0x1fa6 <vTaskSuspendAll>
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	c7 01       	movw	r24, r14
    24c2:	b6 01       	movw	r22, r12
    24c4:	4a dc       	rcall	.-1900   	; 0x1d5a <prvAddCurrentTaskToDelayedList>
    24c6:	af de       	rcall	.-674    	; 0x2226 <xTaskResumeAll>
    24c8:	01 c0       	rjmp	.+2      	; 0x24cc <vTaskDelay+0x24>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	81 11       	cpse	r24, r1
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <vTaskDelay+0x2c>
    24d0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	df 90       	pop	r13
    24da:	cf 90       	pop	r12
    24dc:	08 95       	ret

000024de <vTaskSwitchContext>:
    24de:	80 91 c6 16 	lds	r24, 0x16C6	; 0x8016c6 <uxSchedulerSuspended>
    24e2:	88 23       	and	r24, r24
    24e4:	21 f0       	breq	.+8      	; 0x24ee <vTaskSwitchContext+0x10>
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xYieldPending>
    24ec:	08 95       	ret
    24ee:	10 92 cf 16 	sts	0x16CF, r1	; 0x8016cf <xYieldPending>
    24f2:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    24f6:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    24fa:	20 81       	ld	r18, Z
    24fc:	31 81       	ldd	r19, Z+1	; 0x01
    24fe:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2502:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2506:	83 8d       	ldd	r24, Z+27	; 0x1b
    2508:	94 8d       	ldd	r25, Z+28	; 0x1c
    250a:	82 17       	cp	r24, r18
    250c:	93 07       	cpc	r25, r19
    250e:	60 f0       	brcs	.+24     	; 0x2528 <vTaskSwitchContext+0x4a>
    2510:	60 91 85 17 	lds	r22, 0x1785	; 0x801785 <pxCurrentTCB>
    2514:	70 91 86 17 	lds	r23, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2518:	63 5e       	subi	r22, 0xE3	; 227
    251a:	7f 4f       	sbci	r23, 0xFF	; 255
    251c:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <pxCurrentTCB>
    2520:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2524:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <vApplicationStackOverflowHook>
    2528:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <uxTopReadyPriority>
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <vTaskSwitchContext+0x52>
    252e:	81 50       	subi	r24, 0x01	; 1
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	9b e0       	ldi	r25, 0x0B	; 11
    2536:	92 9f       	mul	r25, r18
    2538:	f0 01       	movw	r30, r0
    253a:	93 9f       	mul	r25, r19
    253c:	f0 0d       	add	r31, r0
    253e:	11 24       	eor	r1, r1
    2540:	e9 5e       	subi	r30, 0xE9	; 233
    2542:	f8 4e       	sbci	r31, 0xE8	; 232
    2544:	90 81       	ld	r25, Z
    2546:	99 23       	and	r25, r25
    2548:	91 f3       	breq	.-28     	; 0x252e <vTaskSwitchContext+0x50>
    254a:	9b e0       	ldi	r25, 0x0B	; 11
    254c:	92 9f       	mul	r25, r18
    254e:	a0 01       	movw	r20, r0
    2550:	93 9f       	mul	r25, r19
    2552:	50 0d       	add	r21, r0
    2554:	11 24       	eor	r1, r1
    2556:	df 01       	movw	r26, r30
    2558:	01 80       	ldd	r0, Z+1	; 0x01
    255a:	f2 81       	ldd	r31, Z+2	; 0x02
    255c:	e0 2d       	mov	r30, r0
    255e:	04 80       	ldd	r0, Z+4	; 0x04
    2560:	f5 81       	ldd	r31, Z+5	; 0x05
    2562:	e0 2d       	mov	r30, r0
    2564:	12 96       	adiw	r26, 0x02	; 2
    2566:	fc 93       	st	X, r31
    2568:	ee 93       	st	-X, r30
    256a:	11 97       	sbiw	r26, 0x01	; 1
    256c:	46 5e       	subi	r20, 0xE6	; 230
    256e:	58 4e       	sbci	r21, 0xE8	; 232
    2570:	e4 17       	cp	r30, r20
    2572:	f5 07       	cpc	r31, r21
    2574:	29 f4       	brne	.+10     	; 0x2580 <vTaskSwitchContext+0xa2>
    2576:	44 81       	ldd	r20, Z+4	; 0x04
    2578:	55 81       	ldd	r21, Z+5	; 0x05
    257a:	fd 01       	movw	r30, r26
    257c:	52 83       	std	Z+2, r21	; 0x02
    257e:	41 83       	std	Z+1, r20	; 0x01
    2580:	9b e0       	ldi	r25, 0x0B	; 11
    2582:	92 9f       	mul	r25, r18
    2584:	f0 01       	movw	r30, r0
    2586:	93 9f       	mul	r25, r19
    2588:	f0 0d       	add	r31, r0
    258a:	11 24       	eor	r1, r1
    258c:	e9 5e       	subi	r30, 0xE9	; 233
    258e:	f8 4e       	sbci	r31, 0xE8	; 232
    2590:	01 80       	ldd	r0, Z+1	; 0x01
    2592:	f2 81       	ldd	r31, Z+2	; 0x02
    2594:	e0 2d       	mov	r30, r0
    2596:	20 85       	ldd	r18, Z+8	; 0x08
    2598:	31 85       	ldd	r19, Z+9	; 0x09
    259a:	30 93 86 17 	sts	0x1786, r19	; 0x801786 <pxCurrentTCB+0x1>
    259e:	20 93 85 17 	sts	0x1785, r18	; 0x801785 <pxCurrentTCB>
    25a2:	80 93 d5 16 	sts	0x16D5, r24	; 0x8016d5 <uxTopReadyPriority>
    25a6:	08 95       	ret

000025a8 <vTaskPlaceOnEventList>:
    25a8:	cf 92       	push	r12
    25aa:	df 92       	push	r13
    25ac:	ef 92       	push	r14
    25ae:	ff 92       	push	r15
    25b0:	6a 01       	movw	r12, r20
    25b2:	7b 01       	movw	r14, r22
    25b4:	60 91 85 17 	lds	r22, 0x1785	; 0x801785 <pxCurrentTCB>
    25b8:	70 91 86 17 	lds	r23, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    25bc:	62 5f       	subi	r22, 0xF2	; 242
    25be:	7f 4f       	sbci	r23, 0xFF	; 255
    25c0:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	c7 01       	movw	r24, r14
    25c8:	b6 01       	movw	r22, r12
    25ca:	c7 db       	rcall	.-2162   	; 0x1d5a <prvAddCurrentTaskToDelayedList>
    25cc:	ff 90       	pop	r15
    25ce:	ef 90       	pop	r14
    25d0:	df 90       	pop	r13
    25d2:	cf 90       	pop	r12
    25d4:	08 95       	ret

000025d6 <vTaskPlaceOnUnorderedEventList>:
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	fc 01       	movw	r30, r24
    25e0:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
    25e4:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    25e8:	70 68       	ori	r23, 0x80	; 128
    25ea:	1e 96       	adiw	r26, 0x0e	; 14
    25ec:	4d 93       	st	X+, r20
    25ee:	5d 93       	st	X+, r21
    25f0:	6d 93       	st	X+, r22
    25f2:	7c 93       	st	X, r23
    25f4:	51 97       	sbiw	r26, 0x11	; 17
    25f6:	a1 81       	ldd	r26, Z+1	; 0x01
    25f8:	b2 81       	ldd	r27, Z+2	; 0x02
    25fa:	c0 91 85 17 	lds	r28, 0x1785	; 0x801785 <pxCurrentTCB>
    25fe:	d0 91 86 17 	lds	r29, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2602:	bb 8b       	std	Y+19, r27	; 0x13
    2604:	aa 8b       	std	Y+18, r26	; 0x12
    2606:	c0 91 85 17 	lds	r28, 0x1785	; 0x801785 <pxCurrentTCB>
    260a:	d0 91 86 17 	lds	r29, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    260e:	16 96       	adiw	r26, 0x06	; 6
    2610:	8d 91       	ld	r24, X+
    2612:	9c 91       	ld	r25, X
    2614:	17 97       	sbiw	r26, 0x07	; 7
    2616:	9d 8b       	std	Y+21, r25	; 0x15
    2618:	8c 8b       	std	Y+20, r24	; 0x14
    261a:	16 96       	adiw	r26, 0x06	; 6
    261c:	cd 91       	ld	r28, X+
    261e:	dc 91       	ld	r29, X
    2620:	17 97       	sbiw	r26, 0x07	; 7
    2622:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <pxCurrentTCB>
    2626:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    262a:	0e 96       	adiw	r24, 0x0e	; 14
    262c:	9d 83       	std	Y+5, r25	; 0x05
    262e:	8c 83       	std	Y+4, r24	; 0x04
    2630:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <pxCurrentTCB>
    2634:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2638:	0e 96       	adiw	r24, 0x0e	; 14
    263a:	17 96       	adiw	r26, 0x07	; 7
    263c:	9c 93       	st	X, r25
    263e:	8e 93       	st	-X, r24
    2640:	16 97       	sbiw	r26, 0x06	; 6
    2642:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
    2646:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    264a:	59 96       	adiw	r26, 0x19	; 25
    264c:	fc 93       	st	X, r31
    264e:	ee 93       	st	-X, r30
    2650:	58 97       	sbiw	r26, 0x18	; 24
    2652:	80 81       	ld	r24, Z
    2654:	8f 5f       	subi	r24, 0xFF	; 255
    2656:	80 83       	st	Z, r24
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	c9 01       	movw	r24, r18
    265c:	b8 01       	movw	r22, r16
    265e:	7d db       	rcall	.-2310   	; 0x1d5a <prvAddCurrentTaskToDelayedList>
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	08 95       	ret

0000266a <vTaskPlaceOnEventListRestricted>:
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	fc 01       	movw	r30, r24
    2670:	cb 01       	movw	r24, r22
    2672:	ba 01       	movw	r22, r20
    2674:	a1 81       	ldd	r26, Z+1	; 0x01
    2676:	b2 81       	ldd	r27, Z+2	; 0x02
    2678:	c0 91 85 17 	lds	r28, 0x1785	; 0x801785 <pxCurrentTCB>
    267c:	d0 91 86 17 	lds	r29, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2680:	bb 8b       	std	Y+19, r27	; 0x13
    2682:	aa 8b       	std	Y+18, r26	; 0x12
    2684:	c0 91 85 17 	lds	r28, 0x1785	; 0x801785 <pxCurrentTCB>
    2688:	d0 91 86 17 	lds	r29, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    268c:	16 96       	adiw	r26, 0x06	; 6
    268e:	4d 91       	ld	r20, X+
    2690:	5c 91       	ld	r21, X
    2692:	17 97       	sbiw	r26, 0x07	; 7
    2694:	5d 8b       	std	Y+21, r21	; 0x15
    2696:	4c 8b       	std	Y+20, r20	; 0x14
    2698:	16 96       	adiw	r26, 0x06	; 6
    269a:	cd 91       	ld	r28, X+
    269c:	dc 91       	ld	r29, X
    269e:	17 97       	sbiw	r26, 0x07	; 7
    26a0:	40 91 85 17 	lds	r20, 0x1785	; 0x801785 <pxCurrentTCB>
    26a4:	50 91 86 17 	lds	r21, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    26a8:	42 5f       	subi	r20, 0xF2	; 242
    26aa:	5f 4f       	sbci	r21, 0xFF	; 255
    26ac:	5d 83       	std	Y+5, r21	; 0x05
    26ae:	4c 83       	std	Y+4, r20	; 0x04
    26b0:	40 91 85 17 	lds	r20, 0x1785	; 0x801785 <pxCurrentTCB>
    26b4:	50 91 86 17 	lds	r21, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    26b8:	42 5f       	subi	r20, 0xF2	; 242
    26ba:	5f 4f       	sbci	r21, 0xFF	; 255
    26bc:	17 96       	adiw	r26, 0x07	; 7
    26be:	5c 93       	st	X, r21
    26c0:	4e 93       	st	-X, r20
    26c2:	16 97       	sbiw	r26, 0x06	; 6
    26c4:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
    26c8:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    26cc:	59 96       	adiw	r26, 0x19	; 25
    26ce:	fc 93       	st	X, r31
    26d0:	ee 93       	st	-X, r30
    26d2:	58 97       	sbiw	r26, 0x18	; 24
    26d4:	30 81       	ld	r19, Z
    26d6:	3f 5f       	subi	r19, 0xFF	; 255
    26d8:	30 83       	st	Z, r19
    26da:	22 23       	and	r18, r18
    26dc:	19 f0       	breq	.+6      	; 0x26e4 <vTaskPlaceOnEventListRestricted+0x7a>
    26de:	6f ef       	ldi	r22, 0xFF	; 255
    26e0:	7f ef       	ldi	r23, 0xFF	; 255
    26e2:	cb 01       	movw	r24, r22
    26e4:	42 2f       	mov	r20, r18
    26e6:	39 db       	rcall	.-2446   	; 0x1d5a <prvAddCurrentTaskToDelayedList>
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <xTaskRemoveFromEventList>:
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	dc 01       	movw	r26, r24
    26f4:	17 96       	adiw	r26, 0x07	; 7
    26f6:	ed 91       	ld	r30, X+
    26f8:	fc 91       	ld	r31, X
    26fa:	18 97       	sbiw	r26, 0x08	; 8
    26fc:	00 84       	ldd	r0, Z+8	; 0x08
    26fe:	f1 85       	ldd	r31, Z+9	; 0x09
    2700:	e0 2d       	mov	r30, r0
    2702:	a0 8d       	ldd	r26, Z+24	; 0x18
    2704:	b1 8d       	ldd	r27, Z+25	; 0x19
    2706:	c2 89       	ldd	r28, Z+18	; 0x12
    2708:	d3 89       	ldd	r29, Z+19	; 0x13
    270a:	84 89       	ldd	r24, Z+20	; 0x14
    270c:	95 89       	ldd	r25, Z+21	; 0x15
    270e:	9f 83       	std	Y+7, r25	; 0x07
    2710:	8e 83       	std	Y+6, r24	; 0x06
    2712:	c4 89       	ldd	r28, Z+20	; 0x14
    2714:	d5 89       	ldd	r29, Z+21	; 0x15
    2716:	82 89       	ldd	r24, Z+18	; 0x12
    2718:	93 89       	ldd	r25, Z+19	; 0x13
    271a:	9d 83       	std	Y+5, r25	; 0x05
    271c:	8c 83       	std	Y+4, r24	; 0x04
    271e:	11 96       	adiw	r26, 0x01	; 1
    2720:	8d 91       	ld	r24, X+
    2722:	9c 91       	ld	r25, X
    2724:	12 97       	sbiw	r26, 0x02	; 2
    2726:	9f 01       	movw	r18, r30
    2728:	22 5f       	subi	r18, 0xF2	; 242
    272a:	3f 4f       	sbci	r19, 0xFF	; 255
    272c:	82 17       	cp	r24, r18
    272e:	93 07       	cpc	r25, r19
    2730:	31 f4       	brne	.+12     	; 0x273e <xTaskRemoveFromEventList+0x50>
    2732:	84 89       	ldd	r24, Z+20	; 0x14
    2734:	95 89       	ldd	r25, Z+21	; 0x15
    2736:	12 96       	adiw	r26, 0x02	; 2
    2738:	9c 93       	st	X, r25
    273a:	8e 93       	st	-X, r24
    273c:	11 97       	sbiw	r26, 0x01	; 1
    273e:	11 8e       	std	Z+25, r1	; 0x19
    2740:	10 8e       	std	Z+24, r1	; 0x18
    2742:	8c 91       	ld	r24, X
    2744:	81 50       	subi	r24, 0x01	; 1
    2746:	8c 93       	st	X, r24
    2748:	80 91 c6 16 	lds	r24, 0x16C6	; 0x8016c6 <uxSchedulerSuspended>
    274c:	81 11       	cpse	r24, r1
    274e:	52 c0       	rjmp	.+164    	; 0x27f4 <xTaskRemoveFromEventList+0x106>
    2750:	a4 85       	ldd	r26, Z+12	; 0x0c
    2752:	b5 85       	ldd	r27, Z+13	; 0x0d
    2754:	c6 81       	ldd	r28, Z+6	; 0x06
    2756:	d7 81       	ldd	r29, Z+7	; 0x07
    2758:	80 85       	ldd	r24, Z+8	; 0x08
    275a:	91 85       	ldd	r25, Z+9	; 0x09
    275c:	9f 83       	std	Y+7, r25	; 0x07
    275e:	8e 83       	std	Y+6, r24	; 0x06
    2760:	c0 85       	ldd	r28, Z+8	; 0x08
    2762:	d1 85       	ldd	r29, Z+9	; 0x09
    2764:	86 81       	ldd	r24, Z+6	; 0x06
    2766:	97 81       	ldd	r25, Z+7	; 0x07
    2768:	9d 83       	std	Y+5, r25	; 0x05
    276a:	8c 83       	std	Y+4, r24	; 0x04
    276c:	11 96       	adiw	r26, 0x01	; 1
    276e:	8d 91       	ld	r24, X+
    2770:	9c 91       	ld	r25, X
    2772:	12 97       	sbiw	r26, 0x02	; 2
    2774:	9f 01       	movw	r18, r30
    2776:	2e 5f       	subi	r18, 0xFE	; 254
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	82 17       	cp	r24, r18
    277c:	93 07       	cpc	r25, r19
    277e:	31 f4       	brne	.+12     	; 0x278c <xTaskRemoveFromEventList+0x9e>
    2780:	80 85       	ldd	r24, Z+8	; 0x08
    2782:	91 85       	ldd	r25, Z+9	; 0x09
    2784:	12 96       	adiw	r26, 0x02	; 2
    2786:	9c 93       	st	X, r25
    2788:	8e 93       	st	-X, r24
    278a:	11 97       	sbiw	r26, 0x01	; 1
    278c:	15 86       	std	Z+13, r1	; 0x0d
    278e:	14 86       	std	Z+12, r1	; 0x0c
    2790:	8c 91       	ld	r24, X
    2792:	81 50       	subi	r24, 0x01	; 1
    2794:	8c 93       	st	X, r24
    2796:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2798:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <uxTopReadyPriority>
    279c:	8a 17       	cp	r24, r26
    279e:	10 f4       	brcc	.+4      	; 0x27a4 <xTaskRemoveFromEventList+0xb6>
    27a0:	a0 93 d5 16 	sts	0x16D5, r26	; 0x8016d5 <uxTopReadyPriority>
    27a4:	8b e0       	ldi	r24, 0x0B	; 11
    27a6:	8a 9f       	mul	r24, r26
    27a8:	d0 01       	movw	r26, r0
    27aa:	11 24       	eor	r1, r1
    27ac:	a9 5e       	subi	r26, 0xE9	; 233
    27ae:	b8 4e       	sbci	r27, 0xE8	; 232
    27b0:	11 96       	adiw	r26, 0x01	; 1
    27b2:	0d 90       	ld	r0, X+
    27b4:	bc 91       	ld	r27, X
    27b6:	a0 2d       	mov	r26, r0
    27b8:	b7 83       	std	Z+7, r27	; 0x07
    27ba:	a6 83       	std	Z+6, r26	; 0x06
    27bc:	16 96       	adiw	r26, 0x06	; 6
    27be:	4d 91       	ld	r20, X+
    27c0:	5c 91       	ld	r21, X
    27c2:	17 97       	sbiw	r26, 0x07	; 7
    27c4:	51 87       	std	Z+9, r21	; 0x09
    27c6:	40 87       	std	Z+8, r20	; 0x08
    27c8:	16 96       	adiw	r26, 0x06	; 6
    27ca:	cd 91       	ld	r28, X+
    27cc:	dc 91       	ld	r29, X
    27ce:	17 97       	sbiw	r26, 0x07	; 7
    27d0:	3d 83       	std	Y+5, r19	; 0x05
    27d2:	2c 83       	std	Y+4, r18	; 0x04
    27d4:	17 96       	adiw	r26, 0x07	; 7
    27d6:	3c 93       	st	X, r19
    27d8:	2e 93       	st	-X, r18
    27da:	16 97       	sbiw	r26, 0x06	; 6
    27dc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27de:	8a 9f       	mul	r24, r26
    27e0:	d0 01       	movw	r26, r0
    27e2:	11 24       	eor	r1, r1
    27e4:	a9 5e       	subi	r26, 0xE9	; 233
    27e6:	b8 4e       	sbci	r27, 0xE8	; 232
    27e8:	b5 87       	std	Z+13, r27	; 0x0d
    27ea:	a4 87       	std	Z+12, r26	; 0x0c
    27ec:	8c 91       	ld	r24, X
    27ee:	8f 5f       	subi	r24, 0xFF	; 255
    27f0:	8c 93       	st	X, r24
    27f2:	1c c0       	rjmp	.+56     	; 0x282c <xTaskRemoveFromEventList+0x13e>
    27f4:	42 ef       	ldi	r20, 0xF2	; 242
    27f6:	56 e1       	ldi	r21, 0x16	; 22
    27f8:	da 01       	movw	r26, r20
    27fa:	11 96       	adiw	r26, 0x01	; 1
    27fc:	cd 91       	ld	r28, X+
    27fe:	dc 91       	ld	r29, X
    2800:	12 97       	sbiw	r26, 0x02	; 2
    2802:	d3 8b       	std	Z+19, r29	; 0x13
    2804:	c2 8b       	std	Z+18, r28	; 0x12
    2806:	8e 81       	ldd	r24, Y+6	; 0x06
    2808:	9f 81       	ldd	r25, Y+7	; 0x07
    280a:	95 8b       	std	Z+21, r25	; 0x15
    280c:	84 8b       	std	Z+20, r24	; 0x14
    280e:	8e 81       	ldd	r24, Y+6	; 0x06
    2810:	9f 81       	ldd	r25, Y+7	; 0x07
    2812:	dc 01       	movw	r26, r24
    2814:	15 96       	adiw	r26, 0x05	; 5
    2816:	3c 93       	st	X, r19
    2818:	2e 93       	st	-X, r18
    281a:	14 97       	sbiw	r26, 0x04	; 4
    281c:	3f 83       	std	Y+7, r19	; 0x07
    281e:	2e 83       	std	Y+6, r18	; 0x06
    2820:	51 8f       	std	Z+25, r21	; 0x19
    2822:	40 8f       	std	Z+24, r20	; 0x18
    2824:	da 01       	movw	r26, r20
    2826:	8c 91       	ld	r24, X
    2828:	8f 5f       	subi	r24, 0xFF	; 255
    282a:	8c 93       	st	X, r24
    282c:	92 8d       	ldd	r25, Z+26	; 0x1a
    282e:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2832:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2836:	82 8d       	ldd	r24, Z+26	; 0x1a
    2838:	89 17       	cp	r24, r25
    283a:	20 f4       	brcc	.+8      	; 0x2844 <xTaskRemoveFromEventList+0x156>
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xYieldPending>
    2842:	01 c0       	rjmp	.+2      	; 0x2846 <xTaskRemoveFromEventList+0x158>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <vTaskRemoveFromUnorderedEventList>:
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	dc 01       	movw	r26, r24
    2852:	70 68       	ori	r23, 0x80	; 128
    2854:	4d 93       	st	X+, r20
    2856:	5d 93       	st	X+, r21
    2858:	6d 93       	st	X+, r22
    285a:	7c 93       	st	X, r23
    285c:	13 97       	sbiw	r26, 0x03	; 3
    285e:	18 96       	adiw	r26, 0x08	; 8
    2860:	ed 91       	ld	r30, X+
    2862:	fc 91       	ld	r31, X
    2864:	19 97       	sbiw	r26, 0x09	; 9
    2866:	1a 96       	adiw	r26, 0x0a	; 10
    2868:	4d 91       	ld	r20, X+
    286a:	5c 91       	ld	r21, X
    286c:	1b 97       	sbiw	r26, 0x0b	; 11
    286e:	14 96       	adiw	r26, 0x04	; 4
    2870:	8d 91       	ld	r24, X+
    2872:	9c 91       	ld	r25, X
    2874:	15 97       	sbiw	r26, 0x05	; 5
    2876:	16 96       	adiw	r26, 0x06	; 6
    2878:	2d 91       	ld	r18, X+
    287a:	3c 91       	ld	r19, X
    287c:	17 97       	sbiw	r26, 0x07	; 7
    287e:	ec 01       	movw	r28, r24
    2880:	3f 83       	std	Y+7, r19	; 0x07
    2882:	2e 83       	std	Y+6, r18	; 0x06
    2884:	16 96       	adiw	r26, 0x06	; 6
    2886:	8d 91       	ld	r24, X+
    2888:	9c 91       	ld	r25, X
    288a:	17 97       	sbiw	r26, 0x07	; 7
    288c:	14 96       	adiw	r26, 0x04	; 4
    288e:	2d 91       	ld	r18, X+
    2890:	3c 91       	ld	r19, X
    2892:	15 97       	sbiw	r26, 0x05	; 5
    2894:	ec 01       	movw	r28, r24
    2896:	3d 83       	std	Y+5, r19	; 0x05
    2898:	2c 83       	std	Y+4, r18	; 0x04
    289a:	ea 01       	movw	r28, r20
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	a8 17       	cp	r26, r24
    28a2:	b9 07       	cpc	r27, r25
    28a4:	31 f4       	brne	.+12     	; 0x28b2 <vTaskRemoveFromUnorderedEventList+0x66>
    28a6:	16 96       	adiw	r26, 0x06	; 6
    28a8:	8d 91       	ld	r24, X+
    28aa:	9c 91       	ld	r25, X
    28ac:	17 97       	sbiw	r26, 0x07	; 7
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	1b 96       	adiw	r26, 0x0b	; 11
    28b4:	1c 92       	st	X, r1
    28b6:	1e 92       	st	-X, r1
    28b8:	1a 97       	sbiw	r26, 0x0a	; 10
    28ba:	da 01       	movw	r26, r20
    28bc:	8c 91       	ld	r24, X
    28be:	81 50       	subi	r24, 0x01	; 1
    28c0:	8c 93       	st	X, r24
    28c2:	a4 85       	ldd	r26, Z+12	; 0x0c
    28c4:	b5 85       	ldd	r27, Z+13	; 0x0d
    28c6:	c6 81       	ldd	r28, Z+6	; 0x06
    28c8:	d7 81       	ldd	r29, Z+7	; 0x07
    28ca:	80 85       	ldd	r24, Z+8	; 0x08
    28cc:	91 85       	ldd	r25, Z+9	; 0x09
    28ce:	9f 83       	std	Y+7, r25	; 0x07
    28d0:	8e 83       	std	Y+6, r24	; 0x06
    28d2:	c0 85       	ldd	r28, Z+8	; 0x08
    28d4:	d1 85       	ldd	r29, Z+9	; 0x09
    28d6:	86 81       	ldd	r24, Z+6	; 0x06
    28d8:	97 81       	ldd	r25, Z+7	; 0x07
    28da:	9d 83       	std	Y+5, r25	; 0x05
    28dc:	8c 83       	std	Y+4, r24	; 0x04
    28de:	11 96       	adiw	r26, 0x01	; 1
    28e0:	8d 91       	ld	r24, X+
    28e2:	9c 91       	ld	r25, X
    28e4:	12 97       	sbiw	r26, 0x02	; 2
    28e6:	9f 01       	movw	r18, r30
    28e8:	2e 5f       	subi	r18, 0xFE	; 254
    28ea:	3f 4f       	sbci	r19, 0xFF	; 255
    28ec:	82 17       	cp	r24, r18
    28ee:	93 07       	cpc	r25, r19
    28f0:	31 f4       	brne	.+12     	; 0x28fe <vTaskRemoveFromUnorderedEventList+0xb2>
    28f2:	80 85       	ldd	r24, Z+8	; 0x08
    28f4:	91 85       	ldd	r25, Z+9	; 0x09
    28f6:	12 96       	adiw	r26, 0x02	; 2
    28f8:	9c 93       	st	X, r25
    28fa:	8e 93       	st	-X, r24
    28fc:	11 97       	sbiw	r26, 0x01	; 1
    28fe:	15 86       	std	Z+13, r1	; 0x0d
    2900:	14 86       	std	Z+12, r1	; 0x0c
    2902:	8c 91       	ld	r24, X
    2904:	81 50       	subi	r24, 0x01	; 1
    2906:	8c 93       	st	X, r24
    2908:	a2 8d       	ldd	r26, Z+26	; 0x1a
    290a:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <uxTopReadyPriority>
    290e:	8a 17       	cp	r24, r26
    2910:	10 f4       	brcc	.+4      	; 0x2916 <vTaskRemoveFromUnorderedEventList+0xca>
    2912:	a0 93 d5 16 	sts	0x16D5, r26	; 0x8016d5 <uxTopReadyPriority>
    2916:	8b e0       	ldi	r24, 0x0B	; 11
    2918:	8a 9f       	mul	r24, r26
    291a:	d0 01       	movw	r26, r0
    291c:	11 24       	eor	r1, r1
    291e:	a9 5e       	subi	r26, 0xE9	; 233
    2920:	b8 4e       	sbci	r27, 0xE8	; 232
    2922:	11 96       	adiw	r26, 0x01	; 1
    2924:	0d 90       	ld	r0, X+
    2926:	bc 91       	ld	r27, X
    2928:	a0 2d       	mov	r26, r0
    292a:	b7 83       	std	Z+7, r27	; 0x07
    292c:	a6 83       	std	Z+6, r26	; 0x06
    292e:	16 96       	adiw	r26, 0x06	; 6
    2930:	4d 91       	ld	r20, X+
    2932:	5c 91       	ld	r21, X
    2934:	17 97       	sbiw	r26, 0x07	; 7
    2936:	51 87       	std	Z+9, r21	; 0x09
    2938:	40 87       	std	Z+8, r20	; 0x08
    293a:	16 96       	adiw	r26, 0x06	; 6
    293c:	cd 91       	ld	r28, X+
    293e:	dc 91       	ld	r29, X
    2940:	17 97       	sbiw	r26, 0x07	; 7
    2942:	3d 83       	std	Y+5, r19	; 0x05
    2944:	2c 83       	std	Y+4, r18	; 0x04
    2946:	17 96       	adiw	r26, 0x07	; 7
    2948:	3c 93       	st	X, r19
    294a:	2e 93       	st	-X, r18
    294c:	16 97       	sbiw	r26, 0x06	; 6
    294e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2950:	8a 9f       	mul	r24, r26
    2952:	d0 01       	movw	r26, r0
    2954:	11 24       	eor	r1, r1
    2956:	a9 5e       	subi	r26, 0xE9	; 233
    2958:	b8 4e       	sbci	r27, 0xE8	; 232
    295a:	b5 87       	std	Z+13, r27	; 0x0d
    295c:	a4 87       	std	Z+12, r26	; 0x0c
    295e:	8c 91       	ld	r24, X
    2960:	8f 5f       	subi	r24, 0xFF	; 255
    2962:	8c 93       	st	X, r24
    2964:	92 8d       	ldd	r25, Z+26	; 0x1a
    2966:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    296a:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    296e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2970:	89 17       	cp	r24, r25
    2972:	18 f4       	brcc	.+6      	; 0x297a <vTaskRemoveFromUnorderedEventList+0x12e>
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xYieldPending>
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	08 95       	ret

00002980 <vTaskSetTimeOutState>:
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	0f 92       	push	r0
    2986:	20 91 ce 16 	lds	r18, 0x16CE	; 0x8016ce <xNumOfOverflows>
    298a:	fc 01       	movw	r30, r24
    298c:	20 83       	st	Z, r18
    298e:	40 91 d6 16 	lds	r20, 0x16D6	; 0x8016d6 <xTickCount>
    2992:	50 91 d7 16 	lds	r21, 0x16D7	; 0x8016d7 <xTickCount+0x1>
    2996:	60 91 d8 16 	lds	r22, 0x16D8	; 0x8016d8 <xTickCount+0x2>
    299a:	70 91 d9 16 	lds	r23, 0x16D9	; 0x8016d9 <xTickCount+0x3>
    299e:	41 83       	std	Z+1, r20	; 0x01
    29a0:	52 83       	std	Z+2, r21	; 0x02
    29a2:	63 83       	std	Z+3, r22	; 0x03
    29a4:	74 83       	std	Z+4, r23	; 0x04
    29a6:	0f 90       	pop	r0
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	08 95       	ret

000029ac <vTaskInternalSetTimeOutState>:
    29ac:	20 91 ce 16 	lds	r18, 0x16CE	; 0x8016ce <xNumOfOverflows>
    29b0:	fc 01       	movw	r30, r24
    29b2:	20 83       	st	Z, r18
    29b4:	40 91 d6 16 	lds	r20, 0x16D6	; 0x8016d6 <xTickCount>
    29b8:	50 91 d7 16 	lds	r21, 0x16D7	; 0x8016d7 <xTickCount+0x1>
    29bc:	60 91 d8 16 	lds	r22, 0x16D8	; 0x8016d8 <xTickCount+0x2>
    29c0:	70 91 d9 16 	lds	r23, 0x16D9	; 0x8016d9 <xTickCount+0x3>
    29c4:	41 83       	std	Z+1, r20	; 0x01
    29c6:	52 83       	std	Z+2, r21	; 0x02
    29c8:	63 83       	std	Z+3, r22	; 0x03
    29ca:	74 83       	std	Z+4, r23	; 0x04
    29cc:	08 95       	ret

000029ce <xTaskCheckForTimeOut>:
    29ce:	8f 92       	push	r8
    29d0:	9f 92       	push	r9
    29d2:	af 92       	push	r10
    29d4:	bf 92       	push	r11
    29d6:	cf 92       	push	r12
    29d8:	df 92       	push	r13
    29da:	ef 92       	push	r14
    29dc:	ff 92       	push	r15
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	fb 01       	movw	r30, r22
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	0f 92       	push	r0
    29ee:	c0 90 d6 16 	lds	r12, 0x16D6	; 0x8016d6 <xTickCount>
    29f2:	d0 90 d7 16 	lds	r13, 0x16D7	; 0x8016d7 <xTickCount+0x1>
    29f6:	e0 90 d8 16 	lds	r14, 0x16D8	; 0x8016d8 <xTickCount+0x2>
    29fa:	f0 90 d9 16 	lds	r15, 0x16D9	; 0x8016d9 <xTickCount+0x3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	11 96       	adiw	r26, 0x01	; 1
    2a02:	0d 91       	ld	r16, X+
    2a04:	1d 91       	ld	r17, X+
    2a06:	2d 91       	ld	r18, X+
    2a08:	3c 91       	ld	r19, X
    2a0a:	14 97       	sbiw	r26, 0x04	; 4
    2a0c:	46 01       	movw	r8, r12
    2a0e:	57 01       	movw	r10, r14
    2a10:	80 1a       	sub	r8, r16
    2a12:	91 0a       	sbc	r9, r17
    2a14:	a2 0a       	sbc	r10, r18
    2a16:	b3 0a       	sbc	r11, r19
    2a18:	40 81       	ld	r20, Z
    2a1a:	51 81       	ldd	r21, Z+1	; 0x01
    2a1c:	62 81       	ldd	r22, Z+2	; 0x02
    2a1e:	73 81       	ldd	r23, Z+3	; 0x03
    2a20:	4f 3f       	cpi	r20, 0xFF	; 255
    2a22:	bf ef       	ldi	r27, 0xFF	; 255
    2a24:	5b 07       	cpc	r21, r27
    2a26:	6b 07       	cpc	r22, r27
    2a28:	7b 07       	cpc	r23, r27
    2a2a:	39 f1       	breq	.+78     	; 0x2a7a <xTaskCheckForTimeOut+0xac>
    2a2c:	ec 01       	movw	r28, r24
    2a2e:	b8 81       	ld	r27, Y
    2a30:	a0 91 ce 16 	lds	r26, 0x16CE	; 0x8016ce <xNumOfOverflows>
    2a34:	ba 17       	cp	r27, r26
    2a36:	59 f0       	breq	.+22     	; 0x2a4e <xTaskCheckForTimeOut+0x80>
    2a38:	c0 16       	cp	r12, r16
    2a3a:	d1 06       	cpc	r13, r17
    2a3c:	e2 06       	cpc	r14, r18
    2a3e:	f3 06       	cpc	r15, r19
    2a40:	30 f0       	brcs	.+12     	; 0x2a4e <xTaskCheckForTimeOut+0x80>
    2a42:	10 82       	st	Z, r1
    2a44:	11 82       	std	Z+1, r1	; 0x01
    2a46:	12 82       	std	Z+2, r1	; 0x02
    2a48:	13 82       	std	Z+3, r1	; 0x03
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	17 c0       	rjmp	.+46     	; 0x2a7c <xTaskCheckForTimeOut+0xae>
    2a4e:	84 16       	cp	r8, r20
    2a50:	95 06       	cpc	r9, r21
    2a52:	a6 06       	cpc	r10, r22
    2a54:	b7 06       	cpc	r11, r23
    2a56:	58 f4       	brcc	.+22     	; 0x2a6e <xTaskCheckForTimeOut+0xa0>
    2a58:	48 19       	sub	r20, r8
    2a5a:	59 09       	sbc	r21, r9
    2a5c:	6a 09       	sbc	r22, r10
    2a5e:	7b 09       	sbc	r23, r11
    2a60:	40 83       	st	Z, r20
    2a62:	51 83       	std	Z+1, r21	; 0x01
    2a64:	62 83       	std	Z+2, r22	; 0x02
    2a66:	73 83       	std	Z+3, r23	; 0x03
    2a68:	a1 df       	rcall	.-190    	; 0x29ac <vTaskInternalSetTimeOutState>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	07 c0       	rjmp	.+14     	; 0x2a7c <xTaskCheckForTimeOut+0xae>
    2a6e:	10 82       	st	Z, r1
    2a70:	11 82       	std	Z+1, r1	; 0x01
    2a72:	12 82       	std	Z+2, r1	; 0x02
    2a74:	13 82       	std	Z+3, r1	; 0x03
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	01 c0       	rjmp	.+2      	; 0x2a7c <xTaskCheckForTimeOut+0xae>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	df 91       	pop	r29
    2a82:	cf 91       	pop	r28
    2a84:	1f 91       	pop	r17
    2a86:	0f 91       	pop	r16
    2a88:	ff 90       	pop	r15
    2a8a:	ef 90       	pop	r14
    2a8c:	df 90       	pop	r13
    2a8e:	cf 90       	pop	r12
    2a90:	bf 90       	pop	r11
    2a92:	af 90       	pop	r10
    2a94:	9f 90       	pop	r9
    2a96:	8f 90       	pop	r8
    2a98:	08 95       	ret

00002a9a <vTaskMissedYield>:
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	80 93 cf 16 	sts	0x16CF, r24	; 0x8016cf <xYieldPending>
    2aa0:	08 95       	ret

00002aa2 <xTaskGetCurrentTaskHandle>:
    2aa2:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <pxCurrentTCB>
    2aa6:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2aaa:	08 95       	ret

00002aac <xTaskGetSchedulerState>:
    2aac:	80 91 d4 16 	lds	r24, 0x16D4	; 0x8016d4 <xSchedulerRunning>
    2ab0:	88 23       	and	r24, r24
    2ab2:	31 f0       	breq	.+12     	; 0x2ac0 <xTaskGetSchedulerState+0x14>
    2ab4:	80 91 c6 16 	lds	r24, 0x16C6	; 0x8016c6 <uxSchedulerSuspended>
    2ab8:	81 11       	cpse	r24, r1
    2aba:	04 c0       	rjmp	.+8      	; 0x2ac4 <xTaskGetSchedulerState+0x18>
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	08 95       	ret
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	08 95       	ret
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	08 95       	ret

00002ac8 <xTaskPriorityDisinherit>:
    2ac8:	0f 93       	push	r16
    2aca:	1f 93       	push	r17
    2acc:	cf 93       	push	r28
    2ace:	df 93       	push	r29
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	89 2b       	or	r24, r25
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <xTaskPriorityDisinherit+0x10>
    2ad6:	49 c0       	rjmp	.+146    	; 0x2b6a <xTaskPriorityDisinherit+0xa2>
    2ad8:	86 a5       	ldd	r24, Z+46	; 0x2e
    2ada:	81 50       	subi	r24, 0x01	; 1
    2adc:	86 a7       	std	Z+46, r24	; 0x2e
    2ade:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ae0:	95 a5       	ldd	r25, Z+45	; 0x2d
    2ae2:	29 17       	cp	r18, r25
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <xTaskPriorityDisinherit+0x20>
    2ae6:	43 c0       	rjmp	.+134    	; 0x2b6e <xTaskPriorityDisinherit+0xa6>
    2ae8:	81 11       	cpse	r24, r1
    2aea:	43 c0       	rjmp	.+134    	; 0x2b72 <xTaskPriorityDisinherit+0xaa>
    2aec:	ef 01       	movw	r28, r30
    2aee:	8f 01       	movw	r16, r30
    2af0:	0e 5f       	subi	r16, 0xFE	; 254
    2af2:	1f 4f       	sbci	r17, 0xFF	; 255
    2af4:	c8 01       	movw	r24, r16
    2af6:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
    2afa:	ed a5       	ldd	r30, Y+45	; 0x2d
    2afc:	ea 8f       	std	Y+26, r30	; 0x1a
    2afe:	8a e0       	ldi	r24, 0x0A	; 10
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 e0       	ldi	r26, 0x00	; 0
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	8e 1b       	sub	r24, r30
    2b08:	91 09       	sbc	r25, r1
    2b0a:	a1 09       	sbc	r26, r1
    2b0c:	b1 09       	sbc	r27, r1
    2b0e:	8e 87       	std	Y+14, r24	; 0x0e
    2b10:	9f 87       	std	Y+15, r25	; 0x0f
    2b12:	a8 8b       	std	Y+16, r26	; 0x10
    2b14:	b9 8b       	std	Y+17, r27	; 0x11
    2b16:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <uxTopReadyPriority>
    2b1a:	8e 17       	cp	r24, r30
    2b1c:	10 f4       	brcc	.+4      	; 0x2b22 <xTaskPriorityDisinherit+0x5a>
    2b1e:	e0 93 d5 16 	sts	0x16D5, r30	; 0x8016d5 <uxTopReadyPriority>
    2b22:	8b e0       	ldi	r24, 0x0B	; 11
    2b24:	8e 9f       	mul	r24, r30
    2b26:	f0 01       	movw	r30, r0
    2b28:	11 24       	eor	r1, r1
    2b2a:	e9 5e       	subi	r30, 0xE9	; 233
    2b2c:	f8 4e       	sbci	r31, 0xE8	; 232
    2b2e:	01 80       	ldd	r0, Z+1	; 0x01
    2b30:	f2 81       	ldd	r31, Z+2	; 0x02
    2b32:	e0 2d       	mov	r30, r0
    2b34:	ff 83       	std	Y+7, r31	; 0x07
    2b36:	ee 83       	std	Y+6, r30	; 0x06
    2b38:	26 81       	ldd	r18, Z+6	; 0x06
    2b3a:	37 81       	ldd	r19, Z+7	; 0x07
    2b3c:	39 87       	std	Y+9, r19	; 0x09
    2b3e:	28 87       	std	Y+8, r18	; 0x08
    2b40:	a6 81       	ldd	r26, Z+6	; 0x06
    2b42:	b7 81       	ldd	r27, Z+7	; 0x07
    2b44:	15 96       	adiw	r26, 0x05	; 5
    2b46:	1c 93       	st	X, r17
    2b48:	0e 93       	st	-X, r16
    2b4a:	14 97       	sbiw	r26, 0x04	; 4
    2b4c:	17 83       	std	Z+7, r17	; 0x07
    2b4e:	06 83       	std	Z+6, r16	; 0x06
    2b50:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b52:	8e 9f       	mul	r24, r30
    2b54:	f0 01       	movw	r30, r0
    2b56:	11 24       	eor	r1, r1
    2b58:	e9 5e       	subi	r30, 0xE9	; 233
    2b5a:	f8 4e       	sbci	r31, 0xE8	; 232
    2b5c:	fd 87       	std	Y+13, r31	; 0x0d
    2b5e:	ec 87       	std	Y+12, r30	; 0x0c
    2b60:	80 81       	ld	r24, Z
    2b62:	8f 5f       	subi	r24, 0xFF	; 255
    2b64:	80 83       	st	Z, r24
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	05 c0       	rjmp	.+10     	; 0x2b74 <xTaskPriorityDisinherit+0xac>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	03 c0       	rjmp	.+6      	; 0x2b74 <xTaskPriorityDisinherit+0xac>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	01 c0       	rjmp	.+2      	; 0x2b74 <xTaskPriorityDisinherit+0xac>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	1f 91       	pop	r17
    2b7a:	0f 91       	pop	r16
    2b7c:	08 95       	ret

00002b7e <uxTaskResetEventItemValue>:
    2b7e:	cf 92       	push	r12
    2b80:	df 92       	push	r13
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2b8a:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2b8e:	66 85       	ldd	r22, Z+14	; 0x0e
    2b90:	77 85       	ldd	r23, Z+15	; 0x0f
    2b92:	80 89       	ldd	r24, Z+16	; 0x10
    2b94:	91 89       	ldd	r25, Z+17	; 0x11
    2b96:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2b9a:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2b9e:	a0 91 85 17 	lds	r26, 0x1785	; 0x801785 <pxCurrentTCB>
    2ba2:	b0 91 86 17 	lds	r27, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2ba6:	5a 96       	adiw	r26, 0x1a	; 26
    2ba8:	2c 91       	ld	r18, X
    2baa:	0f 2e       	mov	r0, r31
    2bac:	fa e0       	ldi	r31, 0x0A	; 10
    2bae:	cf 2e       	mov	r12, r31
    2bb0:	d1 2c       	mov	r13, r1
    2bb2:	e1 2c       	mov	r14, r1
    2bb4:	f1 2c       	mov	r15, r1
    2bb6:	f0 2d       	mov	r31, r0
    2bb8:	c2 1a       	sub	r12, r18
    2bba:	d1 08       	sbc	r13, r1
    2bbc:	e1 08       	sbc	r14, r1
    2bbe:	f1 08       	sbc	r15, r1
    2bc0:	c6 86       	std	Z+14, r12	; 0x0e
    2bc2:	d7 86       	std	Z+15, r13	; 0x0f
    2bc4:	e0 8a       	std	Z+16, r14	; 0x10
    2bc6:	f1 8a       	std	Z+17, r15	; 0x11
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	08 95       	ret

00002bd2 <xTaskGenericNotifyWait>:
    2bd2:	4f 92       	push	r4
    2bd4:	5f 92       	push	r5
    2bd6:	6f 92       	push	r6
    2bd8:	7f 92       	push	r7
    2bda:	af 92       	push	r10
    2bdc:	bf 92       	push	r11
    2bde:	cf 92       	push	r12
    2be0:	df 92       	push	r13
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	28 01       	movw	r4, r16
    2bf0:	39 01       	movw	r6, r18
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	0f 92       	push	r0
    2bf8:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2bfc:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2c00:	c8 2f       	mov	r28, r24
    2c02:	d0 e0       	ldi	r29, 0x00	; 0
    2c04:	ec 0f       	add	r30, r28
    2c06:	fd 1f       	adc	r31, r29
    2c08:	83 a9       	ldd	r24, Z+51	; 0x33
    2c0a:	82 30       	cpi	r24, 0x02	; 2
    2c0c:	71 f1       	breq	.+92     	; 0x2c6a <xTaskGenericNotifyWait+0x98>
    2c0e:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2c12:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2c16:	ce 01       	movw	r24, r28
    2c18:	88 0f       	add	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	e8 0f       	add	r30, r24
    2c22:	f9 1f       	adc	r31, r25
    2c24:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c26:	90 a9       	ldd	r25, Z+48	; 0x30
    2c28:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c2a:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c2c:	40 95       	com	r20
    2c2e:	50 95       	com	r21
    2c30:	60 95       	com	r22
    2c32:	70 95       	com	r23
    2c34:	48 23       	and	r20, r24
    2c36:	59 23       	and	r21, r25
    2c38:	6a 23       	and	r22, r26
    2c3a:	7b 23       	and	r23, r27
    2c3c:	47 a7       	std	Z+47, r20	; 0x2f
    2c3e:	50 ab       	std	Z+48, r21	; 0x30
    2c40:	61 ab       	std	Z+49, r22	; 0x31
    2c42:	72 ab       	std	Z+50, r23	; 0x32
    2c44:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2c48:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2c4c:	ec 0f       	add	r30, r28
    2c4e:	fd 1f       	adc	r31, r29
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	83 ab       	std	Z+51, r24	; 0x33
    2c54:	a1 14       	cp	r10, r1
    2c56:	b1 04       	cpc	r11, r1
    2c58:	c1 04       	cpc	r12, r1
    2c5a:	d1 04       	cpc	r13, r1
    2c5c:	31 f0       	breq	.+12     	; 0x2c6a <xTaskGenericNotifyWait+0x98>
    2c5e:	41 e0       	ldi	r20, 0x01	; 1
    2c60:	c6 01       	movw	r24, r12
    2c62:	b5 01       	movw	r22, r10
    2c64:	7a d8       	rcall	.-3852   	; 0x1d5a <prvAddCurrentTaskToDelayedList>
    2c66:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    2c6a:	0f 90       	pop	r0
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	0f 92       	push	r0
    2c74:	e1 14       	cp	r14, r1
    2c76:	f1 04       	cpc	r15, r1
    2c78:	a1 f0       	breq	.+40     	; 0x2ca2 <xTaskGenericNotifyWait+0xd0>
    2c7a:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2c7e:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2c82:	ce 01       	movw	r24, r28
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	e8 0f       	add	r30, r24
    2c8e:	f9 1f       	adc	r31, r25
    2c90:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c92:	90 a9       	ldd	r25, Z+48	; 0x30
    2c94:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c96:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c98:	f7 01       	movw	r30, r14
    2c9a:	80 83       	st	Z, r24
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	a2 83       	std	Z+2, r26	; 0x02
    2ca0:	b3 83       	std	Z+3, r27	; 0x03
    2ca2:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2ca6:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2caa:	ec 0f       	add	r30, r28
    2cac:	fd 1f       	adc	r31, r29
    2cae:	83 a9       	ldd	r24, Z+51	; 0x33
    2cb0:	82 30       	cpi	r24, 0x02	; 2
    2cb2:	e9 f4       	brne	.+58     	; 0x2cee <xTaskGenericNotifyWait+0x11c>
    2cb4:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2cb8:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	e8 0f       	add	r30, r24
    2cc8:	f9 1f       	adc	r31, r25
    2cca:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ccc:	90 a9       	ldd	r25, Z+48	; 0x30
    2cce:	a1 a9       	ldd	r26, Z+49	; 0x31
    2cd0:	b2 a9       	ldd	r27, Z+50	; 0x32
    2cd2:	40 94       	com	r4
    2cd4:	50 94       	com	r5
    2cd6:	60 94       	com	r6
    2cd8:	70 94       	com	r7
    2cda:	48 22       	and	r4, r24
    2cdc:	59 22       	and	r5, r25
    2cde:	6a 22       	and	r6, r26
    2ce0:	7b 22       	and	r7, r27
    2ce2:	47 a6       	std	Z+47, r4	; 0x2f
    2ce4:	50 aa       	std	Z+48, r5	; 0x30
    2ce6:	61 aa       	std	Z+49, r6	; 0x31
    2ce8:	72 aa       	std	Z+50, r7	; 0x32
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	01 c0       	rjmp	.+2      	; 0x2cf0 <xTaskGenericNotifyWait+0x11e>
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	20 91 85 17 	lds	r18, 0x1785	; 0x801785 <pxCurrentTCB>
    2cf4:	30 91 86 17 	lds	r19, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2cf8:	c2 0f       	add	r28, r18
    2cfa:	d3 1f       	adc	r29, r19
    2cfc:	1b aa       	std	Y+51, r1	; 0x33
    2cfe:	0f 90       	pop	r0
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	ef 90       	pop	r14
    2d0e:	df 90       	pop	r13
    2d10:	cf 90       	pop	r12
    2d12:	bf 90       	pop	r11
    2d14:	af 90       	pop	r10
    2d16:	7f 90       	pop	r7
    2d18:	6f 90       	pop	r6
    2d1a:	5f 90       	pop	r5
    2d1c:	4f 90       	pop	r4
    2d1e:	08 95       	ret

00002d20 <xTaskGenericNotify>:
    2d20:	8f 92       	push	r8
    2d22:	9f 92       	push	r9
    2d24:	af 92       	push	r10
    2d26:	bf 92       	push	r11
    2d28:	ef 92       	push	r14
    2d2a:	ff 92       	push	r15
    2d2c:	0f 93       	push	r16
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	dc 01       	movw	r26, r24
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	0f 92       	push	r0
    2d3a:	e1 14       	cp	r14, r1
    2d3c:	f1 04       	cpc	r15, r1
    2d3e:	89 f0       	breq	.+34     	; 0x2d62 <xTaskGenericNotify+0x42>
    2d40:	e6 2f       	mov	r30, r22
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	ee 0f       	add	r30, r30
    2d46:	ff 1f       	adc	r31, r31
    2d48:	ee 0f       	add	r30, r30
    2d4a:	ff 1f       	adc	r31, r31
    2d4c:	e8 0f       	add	r30, r24
    2d4e:	f9 1f       	adc	r31, r25
    2d50:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d52:	90 a8       	ldd	r9, Z+48	; 0x30
    2d54:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d56:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d58:	f7 01       	movw	r30, r14
    2d5a:	80 82       	st	Z, r8
    2d5c:	91 82       	std	Z+1, r9	; 0x01
    2d5e:	a2 82       	std	Z+2, r10	; 0x02
    2d60:	b3 82       	std	Z+3, r11	; 0x03
    2d62:	70 e0       	ldi	r23, 0x00	; 0
    2d64:	fd 01       	movw	r30, r26
    2d66:	e6 0f       	add	r30, r22
    2d68:	f7 1f       	adc	r31, r23
    2d6a:	83 a9       	ldd	r24, Z+51	; 0x33
    2d6c:	92 e0       	ldi	r25, 0x02	; 2
    2d6e:	93 ab       	std	Z+51, r25	; 0x33
    2d70:	02 30       	cpi	r16, 0x02	; 2
    2d72:	01 f1       	breq	.+64     	; 0x2db4 <xTaskGenericNotify+0x94>
    2d74:	18 f4       	brcc	.+6      	; 0x2d7c <xTaskGenericNotify+0x5c>
    2d76:	01 30       	cpi	r16, 0x01	; 1
    2d78:	31 f0       	breq	.+12     	; 0x2d86 <xTaskGenericNotify+0x66>
    2d7a:	4d c0       	rjmp	.+154    	; 0x2e16 <xTaskGenericNotify+0xf6>
    2d7c:	03 30       	cpi	r16, 0x03	; 3
    2d7e:	79 f1       	breq	.+94     	; 0x2dde <xTaskGenericNotify+0xbe>
    2d80:	04 30       	cpi	r16, 0x04	; 4
    2d82:	d1 f1       	breq	.+116    	; 0x2df8 <xTaskGenericNotify+0xd8>
    2d84:	48 c0       	rjmp	.+144    	; 0x2e16 <xTaskGenericNotify+0xf6>
    2d86:	66 0f       	add	r22, r22
    2d88:	77 1f       	adc	r23, r23
    2d8a:	66 0f       	add	r22, r22
    2d8c:	77 1f       	adc	r23, r23
    2d8e:	fd 01       	movw	r30, r26
    2d90:	e6 0f       	add	r30, r22
    2d92:	f7 1f       	adc	r31, r23
    2d94:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d96:	90 a8       	ldd	r9, Z+48	; 0x30
    2d98:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d9a:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d9c:	ba 01       	movw	r22, r20
    2d9e:	a9 01       	movw	r20, r18
    2da0:	48 29       	or	r20, r8
    2da2:	59 29       	or	r21, r9
    2da4:	6a 29       	or	r22, r10
    2da6:	7b 29       	or	r23, r11
    2da8:	47 a7       	std	Z+47, r20	; 0x2f
    2daa:	50 ab       	std	Z+48, r21	; 0x30
    2dac:	61 ab       	std	Z+49, r22	; 0x31
    2dae:	72 ab       	std	Z+50, r23	; 0x32
    2db0:	01 e0       	ldi	r16, 0x01	; 1
    2db2:	34 c0       	rjmp	.+104    	; 0x2e1c <xTaskGenericNotify+0xfc>
    2db4:	66 0f       	add	r22, r22
    2db6:	77 1f       	adc	r23, r23
    2db8:	66 0f       	add	r22, r22
    2dba:	77 1f       	adc	r23, r23
    2dbc:	fd 01       	movw	r30, r26
    2dbe:	e6 0f       	add	r30, r22
    2dc0:	f7 1f       	adc	r31, r23
    2dc2:	47 a5       	ldd	r20, Z+47	; 0x2f
    2dc4:	50 a9       	ldd	r21, Z+48	; 0x30
    2dc6:	61 a9       	ldd	r22, Z+49	; 0x31
    2dc8:	72 a9       	ldd	r23, Z+50	; 0x32
    2dca:	4f 5f       	subi	r20, 0xFF	; 255
    2dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2dce:	6f 4f       	sbci	r22, 0xFF	; 255
    2dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd2:	47 a7       	std	Z+47, r20	; 0x2f
    2dd4:	50 ab       	std	Z+48, r21	; 0x30
    2dd6:	61 ab       	std	Z+49, r22	; 0x31
    2dd8:	72 ab       	std	Z+50, r23	; 0x32
    2dda:	01 e0       	ldi	r16, 0x01	; 1
    2ddc:	1f c0       	rjmp	.+62     	; 0x2e1c <xTaskGenericNotify+0xfc>
    2dde:	66 0f       	add	r22, r22
    2de0:	77 1f       	adc	r23, r23
    2de2:	66 0f       	add	r22, r22
    2de4:	77 1f       	adc	r23, r23
    2de6:	fd 01       	movw	r30, r26
    2de8:	e6 0f       	add	r30, r22
    2dea:	f7 1f       	adc	r31, r23
    2dec:	27 a7       	std	Z+47, r18	; 0x2f
    2dee:	30 ab       	std	Z+48, r19	; 0x30
    2df0:	41 ab       	std	Z+49, r20	; 0x31
    2df2:	52 ab       	std	Z+50, r21	; 0x32
    2df4:	01 e0       	ldi	r16, 0x01	; 1
    2df6:	12 c0       	rjmp	.+36     	; 0x2e1c <xTaskGenericNotify+0xfc>
    2df8:	82 30       	cpi	r24, 0x02	; 2
    2dfa:	79 f0       	breq	.+30     	; 0x2e1a <xTaskGenericNotify+0xfa>
    2dfc:	66 0f       	add	r22, r22
    2dfe:	77 1f       	adc	r23, r23
    2e00:	66 0f       	add	r22, r22
    2e02:	77 1f       	adc	r23, r23
    2e04:	fd 01       	movw	r30, r26
    2e06:	e6 0f       	add	r30, r22
    2e08:	f7 1f       	adc	r31, r23
    2e0a:	27 a7       	std	Z+47, r18	; 0x2f
    2e0c:	30 ab       	std	Z+48, r19	; 0x30
    2e0e:	41 ab       	std	Z+49, r20	; 0x31
    2e10:	52 ab       	std	Z+50, r21	; 0x32
    2e12:	01 e0       	ldi	r16, 0x01	; 1
    2e14:	03 c0       	rjmp	.+6      	; 0x2e1c <xTaskGenericNotify+0xfc>
    2e16:	01 e0       	ldi	r16, 0x01	; 1
    2e18:	01 c0       	rjmp	.+2      	; 0x2e1c <xTaskGenericNotify+0xfc>
    2e1a:	00 e0       	ldi	r16, 0x00	; 0
    2e1c:	81 30       	cpi	r24, 0x01	; 1
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <xTaskGenericNotify+0x102>
    2e20:	69 c0       	rjmp	.+210    	; 0x2ef4 <xTaskGenericNotify+0x1d4>
    2e22:	1c 96       	adiw	r26, 0x0c	; 12
    2e24:	ed 91       	ld	r30, X+
    2e26:	fc 91       	ld	r31, X
    2e28:	1d 97       	sbiw	r26, 0x0d	; 13
    2e2a:	16 96       	adiw	r26, 0x06	; 6
    2e2c:	cd 91       	ld	r28, X+
    2e2e:	dc 91       	ld	r29, X
    2e30:	17 97       	sbiw	r26, 0x07	; 7
    2e32:	18 96       	adiw	r26, 0x08	; 8
    2e34:	8d 91       	ld	r24, X+
    2e36:	9c 91       	ld	r25, X
    2e38:	19 97       	sbiw	r26, 0x09	; 9
    2e3a:	9f 83       	std	Y+7, r25	; 0x07
    2e3c:	8e 83       	std	Y+6, r24	; 0x06
    2e3e:	18 96       	adiw	r26, 0x08	; 8
    2e40:	cd 91       	ld	r28, X+
    2e42:	dc 91       	ld	r29, X
    2e44:	19 97       	sbiw	r26, 0x09	; 9
    2e46:	16 96       	adiw	r26, 0x06	; 6
    2e48:	8d 91       	ld	r24, X+
    2e4a:	9c 91       	ld	r25, X
    2e4c:	17 97       	sbiw	r26, 0x07	; 7
    2e4e:	9d 83       	std	Y+5, r25	; 0x05
    2e50:	8c 83       	std	Y+4, r24	; 0x04
    2e52:	81 81       	ldd	r24, Z+1	; 0x01
    2e54:	92 81       	ldd	r25, Z+2	; 0x02
    2e56:	9d 01       	movw	r18, r26
    2e58:	2e 5f       	subi	r18, 0xFE	; 254
    2e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5c:	82 17       	cp	r24, r18
    2e5e:	93 07       	cpc	r25, r19
    2e60:	31 f4       	brne	.+12     	; 0x2e6e <xTaskGenericNotify+0x14e>
    2e62:	18 96       	adiw	r26, 0x08	; 8
    2e64:	8d 91       	ld	r24, X+
    2e66:	9c 91       	ld	r25, X
    2e68:	19 97       	sbiw	r26, 0x09	; 9
    2e6a:	92 83       	std	Z+2, r25	; 0x02
    2e6c:	81 83       	std	Z+1, r24	; 0x01
    2e6e:	1d 96       	adiw	r26, 0x0d	; 13
    2e70:	1c 92       	st	X, r1
    2e72:	1e 92       	st	-X, r1
    2e74:	1c 97       	sbiw	r26, 0x0c	; 12
    2e76:	80 81       	ld	r24, Z
    2e78:	81 50       	subi	r24, 0x01	; 1
    2e7a:	80 83       	st	Z, r24
    2e7c:	5a 96       	adiw	r26, 0x1a	; 26
    2e7e:	ec 91       	ld	r30, X
    2e80:	5a 97       	sbiw	r26, 0x1a	; 26
    2e82:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <uxTopReadyPriority>
    2e86:	8e 17       	cp	r24, r30
    2e88:	10 f4       	brcc	.+4      	; 0x2e8e <xTaskGenericNotify+0x16e>
    2e8a:	e0 93 d5 16 	sts	0x16D5, r30	; 0x8016d5 <uxTopReadyPriority>
    2e8e:	8b e0       	ldi	r24, 0x0B	; 11
    2e90:	8e 9f       	mul	r24, r30
    2e92:	f0 01       	movw	r30, r0
    2e94:	11 24       	eor	r1, r1
    2e96:	e9 5e       	subi	r30, 0xE9	; 233
    2e98:	f8 4e       	sbci	r31, 0xE8	; 232
    2e9a:	01 80       	ldd	r0, Z+1	; 0x01
    2e9c:	f2 81       	ldd	r31, Z+2	; 0x02
    2e9e:	e0 2d       	mov	r30, r0
    2ea0:	17 96       	adiw	r26, 0x07	; 7
    2ea2:	fc 93       	st	X, r31
    2ea4:	ee 93       	st	-X, r30
    2ea6:	16 97       	sbiw	r26, 0x06	; 6
    2ea8:	46 81       	ldd	r20, Z+6	; 0x06
    2eaa:	57 81       	ldd	r21, Z+7	; 0x07
    2eac:	19 96       	adiw	r26, 0x09	; 9
    2eae:	5c 93       	st	X, r21
    2eb0:	4e 93       	st	-X, r20
    2eb2:	18 97       	sbiw	r26, 0x08	; 8
    2eb4:	c6 81       	ldd	r28, Z+6	; 0x06
    2eb6:	d7 81       	ldd	r29, Z+7	; 0x07
    2eb8:	3d 83       	std	Y+5, r19	; 0x05
    2eba:	2c 83       	std	Y+4, r18	; 0x04
    2ebc:	37 83       	std	Z+7, r19	; 0x07
    2ebe:	26 83       	std	Z+6, r18	; 0x06
    2ec0:	5a 96       	adiw	r26, 0x1a	; 26
    2ec2:	ec 91       	ld	r30, X
    2ec4:	5a 97       	sbiw	r26, 0x1a	; 26
    2ec6:	8e 9f       	mul	r24, r30
    2ec8:	f0 01       	movw	r30, r0
    2eca:	11 24       	eor	r1, r1
    2ecc:	e9 5e       	subi	r30, 0xE9	; 233
    2ece:	f8 4e       	sbci	r31, 0xE8	; 232
    2ed0:	1d 96       	adiw	r26, 0x0d	; 13
    2ed2:	fc 93       	st	X, r31
    2ed4:	ee 93       	st	-X, r30
    2ed6:	1c 97       	sbiw	r26, 0x0c	; 12
    2ed8:	80 81       	ld	r24, Z
    2eda:	8f 5f       	subi	r24, 0xFF	; 255
    2edc:	80 83       	st	Z, r24
    2ede:	5a 96       	adiw	r26, 0x1a	; 26
    2ee0:	9c 91       	ld	r25, X
    2ee2:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    2ee6:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    2eea:	82 8d       	ldd	r24, Z+26	; 0x1a
    2eec:	89 17       	cp	r24, r25
    2eee:	10 f4       	brcc	.+4      	; 0x2ef4 <xTaskGenericNotify+0x1d4>
    2ef0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    2ef4:	0f 90       	pop	r0
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	80 2f       	mov	r24, r16
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	0f 91       	pop	r16
    2f00:	ff 90       	pop	r15
    2f02:	ef 90       	pop	r14
    2f04:	bf 90       	pop	r11
    2f06:	af 90       	pop	r10
    2f08:	9f 90       	pop	r9
    2f0a:	8f 90       	pop	r8
    2f0c:	08 95       	ret

00002f0e <xTaskGenericNotifyFromISR>:
    2f0e:	8f 92       	push	r8
    2f10:	9f 92       	push	r9
    2f12:	af 92       	push	r10
    2f14:	bf 92       	push	r11
    2f16:	cf 92       	push	r12
    2f18:	df 92       	push	r13
    2f1a:	ef 92       	push	r14
    2f1c:	ff 92       	push	r15
    2f1e:	0f 93       	push	r16
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	dc 01       	movw	r26, r24
    2f26:	e1 14       	cp	r14, r1
    2f28:	f1 04       	cpc	r15, r1
    2f2a:	89 f0       	breq	.+34     	; 0x2f4e <xTaskGenericNotifyFromISR+0x40>
    2f2c:	e6 2f       	mov	r30, r22
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	ee 0f       	add	r30, r30
    2f32:	ff 1f       	adc	r31, r31
    2f34:	ee 0f       	add	r30, r30
    2f36:	ff 1f       	adc	r31, r31
    2f38:	e8 0f       	add	r30, r24
    2f3a:	f9 1f       	adc	r31, r25
    2f3c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f3e:	90 a8       	ldd	r9, Z+48	; 0x30
    2f40:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f42:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f44:	f7 01       	movw	r30, r14
    2f46:	80 82       	st	Z, r8
    2f48:	91 82       	std	Z+1, r9	; 0x01
    2f4a:	a2 82       	std	Z+2, r10	; 0x02
    2f4c:	b3 82       	std	Z+3, r11	; 0x03
    2f4e:	70 e0       	ldi	r23, 0x00	; 0
    2f50:	fd 01       	movw	r30, r26
    2f52:	e6 0f       	add	r30, r22
    2f54:	f7 1f       	adc	r31, r23
    2f56:	93 a9       	ldd	r25, Z+51	; 0x33
    2f58:	82 e0       	ldi	r24, 0x02	; 2
    2f5a:	83 ab       	std	Z+51, r24	; 0x33
    2f5c:	02 30       	cpi	r16, 0x02	; 2
    2f5e:	01 f1       	breq	.+64     	; 0x2fa0 <xTaskGenericNotifyFromISR+0x92>
    2f60:	18 f4       	brcc	.+6      	; 0x2f68 <xTaskGenericNotifyFromISR+0x5a>
    2f62:	01 30       	cpi	r16, 0x01	; 1
    2f64:	31 f0       	breq	.+12     	; 0x2f72 <xTaskGenericNotifyFromISR+0x64>
    2f66:	4d c0       	rjmp	.+154    	; 0x3002 <xTaskGenericNotifyFromISR+0xf4>
    2f68:	03 30       	cpi	r16, 0x03	; 3
    2f6a:	79 f1       	breq	.+94     	; 0x2fca <xTaskGenericNotifyFromISR+0xbc>
    2f6c:	04 30       	cpi	r16, 0x04	; 4
    2f6e:	d1 f1       	breq	.+116    	; 0x2fe4 <xTaskGenericNotifyFromISR+0xd6>
    2f70:	48 c0       	rjmp	.+144    	; 0x3002 <xTaskGenericNotifyFromISR+0xf4>
    2f72:	66 0f       	add	r22, r22
    2f74:	77 1f       	adc	r23, r23
    2f76:	66 0f       	add	r22, r22
    2f78:	77 1f       	adc	r23, r23
    2f7a:	fd 01       	movw	r30, r26
    2f7c:	e6 0f       	add	r30, r22
    2f7e:	f7 1f       	adc	r31, r23
    2f80:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f82:	90 a8       	ldd	r9, Z+48	; 0x30
    2f84:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f86:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f88:	ba 01       	movw	r22, r20
    2f8a:	a9 01       	movw	r20, r18
    2f8c:	48 29       	or	r20, r8
    2f8e:	59 29       	or	r21, r9
    2f90:	6a 29       	or	r22, r10
    2f92:	7b 29       	or	r23, r11
    2f94:	47 a7       	std	Z+47, r20	; 0x2f
    2f96:	50 ab       	std	Z+48, r21	; 0x30
    2f98:	61 ab       	std	Z+49, r22	; 0x31
    2f9a:	72 ab       	std	Z+50, r23	; 0x32
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	34 c0       	rjmp	.+104    	; 0x3008 <xTaskGenericNotifyFromISR+0xfa>
    2fa0:	66 0f       	add	r22, r22
    2fa2:	77 1f       	adc	r23, r23
    2fa4:	66 0f       	add	r22, r22
    2fa6:	77 1f       	adc	r23, r23
    2fa8:	fd 01       	movw	r30, r26
    2faa:	e6 0f       	add	r30, r22
    2fac:	f7 1f       	adc	r31, r23
    2fae:	47 a5       	ldd	r20, Z+47	; 0x2f
    2fb0:	50 a9       	ldd	r21, Z+48	; 0x30
    2fb2:	61 a9       	ldd	r22, Z+49	; 0x31
    2fb4:	72 a9       	ldd	r23, Z+50	; 0x32
    2fb6:	4f 5f       	subi	r20, 0xFF	; 255
    2fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fba:	6f 4f       	sbci	r22, 0xFF	; 255
    2fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbe:	47 a7       	std	Z+47, r20	; 0x2f
    2fc0:	50 ab       	std	Z+48, r21	; 0x30
    2fc2:	61 ab       	std	Z+49, r22	; 0x31
    2fc4:	72 ab       	std	Z+50, r23	; 0x32
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	1f c0       	rjmp	.+62     	; 0x3008 <xTaskGenericNotifyFromISR+0xfa>
    2fca:	66 0f       	add	r22, r22
    2fcc:	77 1f       	adc	r23, r23
    2fce:	66 0f       	add	r22, r22
    2fd0:	77 1f       	adc	r23, r23
    2fd2:	fd 01       	movw	r30, r26
    2fd4:	e6 0f       	add	r30, r22
    2fd6:	f7 1f       	adc	r31, r23
    2fd8:	27 a7       	std	Z+47, r18	; 0x2f
    2fda:	30 ab       	std	Z+48, r19	; 0x30
    2fdc:	41 ab       	std	Z+49, r20	; 0x31
    2fde:	52 ab       	std	Z+50, r21	; 0x32
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	12 c0       	rjmp	.+36     	; 0x3008 <xTaskGenericNotifyFromISR+0xfa>
    2fe4:	92 30       	cpi	r25, 0x02	; 2
    2fe6:	79 f0       	breq	.+30     	; 0x3006 <xTaskGenericNotifyFromISR+0xf8>
    2fe8:	66 0f       	add	r22, r22
    2fea:	77 1f       	adc	r23, r23
    2fec:	66 0f       	add	r22, r22
    2fee:	77 1f       	adc	r23, r23
    2ff0:	fd 01       	movw	r30, r26
    2ff2:	e6 0f       	add	r30, r22
    2ff4:	f7 1f       	adc	r31, r23
    2ff6:	27 a7       	std	Z+47, r18	; 0x2f
    2ff8:	30 ab       	std	Z+48, r19	; 0x30
    2ffa:	41 ab       	std	Z+49, r20	; 0x31
    2ffc:	52 ab       	std	Z+50, r21	; 0x32
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	03 c0       	rjmp	.+6      	; 0x3008 <xTaskGenericNotifyFromISR+0xfa>
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <xTaskGenericNotifyFromISR+0xfa>
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	91 30       	cpi	r25, 0x01	; 1
    300a:	09 f0       	breq	.+2      	; 0x300e <xTaskGenericNotifyFromISR+0x100>
    300c:	96 c0       	rjmp	.+300    	; 0x313a <xTaskGenericNotifyFromISR+0x22c>
    300e:	90 91 c6 16 	lds	r25, 0x16C6	; 0x8016c6 <uxSchedulerSuspended>
    3012:	91 11       	cpse	r25, r1
    3014:	5f c0       	rjmp	.+190    	; 0x30d4 <xTaskGenericNotifyFromISR+0x1c6>
    3016:	1c 96       	adiw	r26, 0x0c	; 12
    3018:	ed 91       	ld	r30, X+
    301a:	fc 91       	ld	r31, X
    301c:	1d 97       	sbiw	r26, 0x0d	; 13
    301e:	16 96       	adiw	r26, 0x06	; 6
    3020:	cd 91       	ld	r28, X+
    3022:	dc 91       	ld	r29, X
    3024:	17 97       	sbiw	r26, 0x07	; 7
    3026:	18 96       	adiw	r26, 0x08	; 8
    3028:	2d 91       	ld	r18, X+
    302a:	3c 91       	ld	r19, X
    302c:	19 97       	sbiw	r26, 0x09	; 9
    302e:	3f 83       	std	Y+7, r19	; 0x07
    3030:	2e 83       	std	Y+6, r18	; 0x06
    3032:	18 96       	adiw	r26, 0x08	; 8
    3034:	cd 91       	ld	r28, X+
    3036:	dc 91       	ld	r29, X
    3038:	19 97       	sbiw	r26, 0x09	; 9
    303a:	16 96       	adiw	r26, 0x06	; 6
    303c:	2d 91       	ld	r18, X+
    303e:	3c 91       	ld	r19, X
    3040:	17 97       	sbiw	r26, 0x07	; 7
    3042:	3d 83       	std	Y+5, r19	; 0x05
    3044:	2c 83       	std	Y+4, r18	; 0x04
    3046:	41 81       	ldd	r20, Z+1	; 0x01
    3048:	52 81       	ldd	r21, Z+2	; 0x02
    304a:	9d 01       	movw	r18, r26
    304c:	2e 5f       	subi	r18, 0xFE	; 254
    304e:	3f 4f       	sbci	r19, 0xFF	; 255
    3050:	42 17       	cp	r20, r18
    3052:	53 07       	cpc	r21, r19
    3054:	31 f4       	brne	.+12     	; 0x3062 <xTaskGenericNotifyFromISR+0x154>
    3056:	18 96       	adiw	r26, 0x08	; 8
    3058:	4d 91       	ld	r20, X+
    305a:	5c 91       	ld	r21, X
    305c:	19 97       	sbiw	r26, 0x09	; 9
    305e:	52 83       	std	Z+2, r21	; 0x02
    3060:	41 83       	std	Z+1, r20	; 0x01
    3062:	1d 96       	adiw	r26, 0x0d	; 13
    3064:	1c 92       	st	X, r1
    3066:	1e 92       	st	-X, r1
    3068:	1c 97       	sbiw	r26, 0x0c	; 12
    306a:	90 81       	ld	r25, Z
    306c:	91 50       	subi	r25, 0x01	; 1
    306e:	90 83       	st	Z, r25
    3070:	5a 96       	adiw	r26, 0x1a	; 26
    3072:	ec 91       	ld	r30, X
    3074:	5a 97       	sbiw	r26, 0x1a	; 26
    3076:	90 91 d5 16 	lds	r25, 0x16D5	; 0x8016d5 <uxTopReadyPriority>
    307a:	9e 17       	cp	r25, r30
    307c:	10 f4       	brcc	.+4      	; 0x3082 <xTaskGenericNotifyFromISR+0x174>
    307e:	e0 93 d5 16 	sts	0x16D5, r30	; 0x8016d5 <uxTopReadyPriority>
    3082:	9b e0       	ldi	r25, 0x0B	; 11
    3084:	9e 9f       	mul	r25, r30
    3086:	f0 01       	movw	r30, r0
    3088:	11 24       	eor	r1, r1
    308a:	e9 5e       	subi	r30, 0xE9	; 233
    308c:	f8 4e       	sbci	r31, 0xE8	; 232
    308e:	01 80       	ldd	r0, Z+1	; 0x01
    3090:	f2 81       	ldd	r31, Z+2	; 0x02
    3092:	e0 2d       	mov	r30, r0
    3094:	17 96       	adiw	r26, 0x07	; 7
    3096:	fc 93       	st	X, r31
    3098:	ee 93       	st	-X, r30
    309a:	16 97       	sbiw	r26, 0x06	; 6
    309c:	46 81       	ldd	r20, Z+6	; 0x06
    309e:	57 81       	ldd	r21, Z+7	; 0x07
    30a0:	19 96       	adiw	r26, 0x09	; 9
    30a2:	5c 93       	st	X, r21
    30a4:	4e 93       	st	-X, r20
    30a6:	18 97       	sbiw	r26, 0x08	; 8
    30a8:	c6 81       	ldd	r28, Z+6	; 0x06
    30aa:	d7 81       	ldd	r29, Z+7	; 0x07
    30ac:	3d 83       	std	Y+5, r19	; 0x05
    30ae:	2c 83       	std	Y+4, r18	; 0x04
    30b0:	37 83       	std	Z+7, r19	; 0x07
    30b2:	26 83       	std	Z+6, r18	; 0x06
    30b4:	5a 96       	adiw	r26, 0x1a	; 26
    30b6:	ec 91       	ld	r30, X
    30b8:	5a 97       	sbiw	r26, 0x1a	; 26
    30ba:	9e 9f       	mul	r25, r30
    30bc:	f0 01       	movw	r30, r0
    30be:	11 24       	eor	r1, r1
    30c0:	e9 5e       	subi	r30, 0xE9	; 233
    30c2:	f8 4e       	sbci	r31, 0xE8	; 232
    30c4:	1d 96       	adiw	r26, 0x0d	; 13
    30c6:	fc 93       	st	X, r31
    30c8:	ee 93       	st	-X, r30
    30ca:	1c 97       	sbiw	r26, 0x0c	; 12
    30cc:	90 81       	ld	r25, Z
    30ce:	9f 5f       	subi	r25, 0xFF	; 255
    30d0:	90 83       	st	Z, r25
    30d2:	21 c0       	rjmp	.+66     	; 0x3116 <xTaskGenericNotifyFromISR+0x208>
    30d4:	62 ef       	ldi	r22, 0xF2	; 242
    30d6:	76 e1       	ldi	r23, 0x16	; 22
    30d8:	fb 01       	movw	r30, r22
    30da:	c1 81       	ldd	r28, Z+1	; 0x01
    30dc:	d2 81       	ldd	r29, Z+2	; 0x02
    30de:	53 96       	adiw	r26, 0x13	; 19
    30e0:	dc 93       	st	X, r29
    30e2:	ce 93       	st	-X, r28
    30e4:	52 97       	sbiw	r26, 0x12	; 18
    30e6:	2e 81       	ldd	r18, Y+6	; 0x06
    30e8:	3f 81       	ldd	r19, Y+7	; 0x07
    30ea:	55 96       	adiw	r26, 0x15	; 21
    30ec:	3c 93       	st	X, r19
    30ee:	2e 93       	st	-X, r18
    30f0:	54 97       	sbiw	r26, 0x14	; 20
    30f2:	4e 81       	ldd	r20, Y+6	; 0x06
    30f4:	5f 81       	ldd	r21, Y+7	; 0x07
    30f6:	9d 01       	movw	r18, r26
    30f8:	22 5f       	subi	r18, 0xF2	; 242
    30fa:	3f 4f       	sbci	r19, 0xFF	; 255
    30fc:	fa 01       	movw	r30, r20
    30fe:	35 83       	std	Z+5, r19	; 0x05
    3100:	24 83       	std	Z+4, r18	; 0x04
    3102:	3f 83       	std	Y+7, r19	; 0x07
    3104:	2e 83       	std	Y+6, r18	; 0x06
    3106:	59 96       	adiw	r26, 0x19	; 25
    3108:	7c 93       	st	X, r23
    310a:	6e 93       	st	-X, r22
    310c:	58 97       	sbiw	r26, 0x18	; 24
    310e:	fb 01       	movw	r30, r22
    3110:	90 81       	ld	r25, Z
    3112:	9f 5f       	subi	r25, 0xFF	; 255
    3114:	90 83       	st	Z, r25
    3116:	5a 96       	adiw	r26, 0x1a	; 26
    3118:	2c 91       	ld	r18, X
    311a:	e0 91 85 17 	lds	r30, 0x1785	; 0x801785 <pxCurrentTCB>
    311e:	f0 91 86 17 	lds	r31, 0x1786	; 0x801786 <pxCurrentTCB+0x1>
    3122:	92 8d       	ldd	r25, Z+26	; 0x1a
    3124:	92 17       	cp	r25, r18
    3126:	48 f4       	brcc	.+18     	; 0x313a <xTaskGenericNotifyFromISR+0x22c>
    3128:	c1 14       	cp	r12, r1
    312a:	d1 04       	cpc	r13, r1
    312c:	19 f0       	breq	.+6      	; 0x3134 <xTaskGenericNotifyFromISR+0x226>
    312e:	91 e0       	ldi	r25, 0x01	; 1
    3130:	f6 01       	movw	r30, r12
    3132:	90 83       	st	Z, r25
    3134:	91 e0       	ldi	r25, 0x01	; 1
    3136:	90 93 cf 16 	sts	0x16CF, r25	; 0x8016cf <xYieldPending>
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	0f 91       	pop	r16
    3140:	ff 90       	pop	r15
    3142:	ef 90       	pop	r14
    3144:	df 90       	pop	r13
    3146:	cf 90       	pop	r12
    3148:	bf 90       	pop	r11
    314a:	af 90       	pop	r10
    314c:	9f 90       	pop	r9
    314e:	8f 90       	pop	r8
    3150:	08 95       	ret

00003152 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	21 f4       	brne	.+8      	; 0x315e <xTaskGenericNotifyStateClear+0xc>
    3156:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <pxCurrentTCB>
    315a:	90 91 86 17 	lds	r25, 0x1786	; 0x801786 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3164:	70 e0       	ldi	r23, 0x00	; 0
    3166:	fc 01       	movw	r30, r24
    3168:	e6 0f       	add	r30, r22
    316a:	f7 1f       	adc	r31, r23
    316c:	23 a9       	ldd	r18, Z+51	; 0x33
    316e:	22 30       	cpi	r18, 0x02	; 2
    3170:	31 f4       	brne	.+12     	; 0x317e <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3172:	fc 01       	movw	r30, r24
    3174:	e6 0f       	add	r30, r22
    3176:	f7 1f       	adc	r31, r23
    3178:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	01 c0       	rjmp	.+2      	; 0x3180 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    317e:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3180:	0f 90       	pop	r0
    3182:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3184:	08 95       	ret

00003186 <prvGetNextExpireTime>:
    3186:	dc 01       	movw	r26, r24
    3188:	e0 91 91 17 	lds	r30, 0x1791	; 0x801791 <pxCurrentTimerList>
    318c:	f0 91 92 17 	lds	r31, 0x1792	; 0x801792 <pxCurrentTimerList+0x1>
    3190:	80 81       	ld	r24, Z
    3192:	91 e0       	ldi	r25, 0x01	; 1
    3194:	81 11       	cpse	r24, r1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9c 93       	st	X, r25
    319a:	91 11       	cpse	r25, r1
    319c:	08 c0       	rjmp	.+16     	; 0x31ae <prvGetNextExpireTime+0x28>
    319e:	07 80       	ldd	r0, Z+7	; 0x07
    31a0:	f0 85       	ldd	r31, Z+8	; 0x08
    31a2:	e0 2d       	mov	r30, r0
    31a4:	60 81       	ld	r22, Z
    31a6:	71 81       	ldd	r23, Z+1	; 0x01
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	08 95       	ret
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	cb 01       	movw	r24, r22
    31b4:	08 95       	ret

000031b6 <prvInsertTimerInActiveList>:
    31b6:	cf 92       	push	r12
    31b8:	df 92       	push	r13
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	fc 01       	movw	r30, r24
    31c4:	42 83       	std	Z+2, r20	; 0x02
    31c6:	53 83       	std	Z+3, r21	; 0x03
    31c8:	64 83       	std	Z+4, r22	; 0x04
    31ca:	75 83       	std	Z+5, r23	; 0x05
    31cc:	93 87       	std	Z+11, r25	; 0x0b
    31ce:	82 87       	std	Z+10, r24	; 0x0a
    31d0:	04 17       	cp	r16, r20
    31d2:	15 07       	cpc	r17, r21
    31d4:	26 07       	cpc	r18, r22
    31d6:	37 07       	cpc	r19, r23
    31d8:	c0 f0       	brcs	.+48     	; 0x320a <prvInsertTimerInActiveList+0x54>
    31da:	0c 19       	sub	r16, r12
    31dc:	1d 09       	sbc	r17, r13
    31de:	2e 09       	sbc	r18, r14
    31e0:	3f 09       	sbc	r19, r15
    31e2:	86 85       	ldd	r24, Z+14	; 0x0e
    31e4:	97 85       	ldd	r25, Z+15	; 0x0f
    31e6:	a0 89       	ldd	r26, Z+16	; 0x10
    31e8:	b1 89       	ldd	r27, Z+17	; 0x11
    31ea:	08 17       	cp	r16, r24
    31ec:	19 07       	cpc	r17, r25
    31ee:	2a 07       	cpc	r18, r26
    31f0:	3b 07       	cpc	r19, r27
    31f2:	00 f5       	brcc	.+64     	; 0x3234 <prvInsertTimerInActiveList+0x7e>
    31f4:	bf 01       	movw	r22, r30
    31f6:	6e 5f       	subi	r22, 0xFE	; 254
    31f8:	7f 4f       	sbci	r23, 0xFF	; 255
    31fa:	80 91 8f 17 	lds	r24, 0x178F	; 0x80178f <pxOverflowTimerList>
    31fe:	90 91 90 17 	lds	r25, 0x1790	; 0x801790 <pxOverflowTimerList+0x1>
    3202:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	18 c0       	rjmp	.+48     	; 0x323a <prvInsertTimerInActiveList+0x84>
    320a:	0c 15       	cp	r16, r12
    320c:	1d 05       	cpc	r17, r13
    320e:	2e 05       	cpc	r18, r14
    3210:	3f 05       	cpc	r19, r15
    3212:	28 f4       	brcc	.+10     	; 0x321e <prvInsertTimerInActiveList+0x68>
    3214:	4c 15       	cp	r20, r12
    3216:	5d 05       	cpc	r21, r13
    3218:	6e 05       	cpc	r22, r14
    321a:	7f 05       	cpc	r23, r15
    321c:	68 f4       	brcc	.+26     	; 0x3238 <prvInsertTimerInActiveList+0x82>
    321e:	bf 01       	movw	r22, r30
    3220:	6e 5f       	subi	r22, 0xFE	; 254
    3222:	7f 4f       	sbci	r23, 0xFF	; 255
    3224:	80 91 91 17 	lds	r24, 0x1791	; 0x801791 <pxCurrentTimerList>
    3228:	90 91 92 17 	lds	r25, 0x1792	; 0x801792 <pxCurrentTimerList+0x1>
    322c:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	03 c0       	rjmp	.+6      	; 0x323a <prvInsertTimerInActiveList+0x84>
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	01 c0       	rjmp	.+2      	; 0x323a <prvInsertTimerInActiveList+0x84>
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	df 90       	pop	r13
    3244:	cf 90       	pop	r12
    3246:	08 95       	ret

00003248 <prvCheckForValidListAndQueue>:
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	0f 92       	push	r0
    324e:	80 91 8d 17 	lds	r24, 0x178D	; 0x80178d <xTimerQueue>
    3252:	90 91 8e 17 	lds	r25, 0x178E	; 0x80178e <xTimerQueue+0x1>
    3256:	89 2b       	or	r24, r25
    3258:	e9 f4       	brne	.+58     	; 0x3294 <prvCheckForValidListAndQueue+0x4c>
    325a:	8e e9       	ldi	r24, 0x9E	; 158
    325c:	97 e1       	ldi	r25, 0x17	; 23
    325e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    3262:	83 e9       	ldi	r24, 0x93	; 147
    3264:	97 e1       	ldi	r25, 0x17	; 23
    3266:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    326a:	8e e9       	ldi	r24, 0x9E	; 158
    326c:	97 e1       	ldi	r25, 0x17	; 23
    326e:	90 93 92 17 	sts	0x1792, r25	; 0x801792 <pxCurrentTimerList+0x1>
    3272:	80 93 91 17 	sts	0x1791, r24	; 0x801791 <pxCurrentTimerList>
    3276:	83 e9       	ldi	r24, 0x93	; 147
    3278:	97 e1       	ldi	r25, 0x17	; 23
    327a:	90 93 90 17 	sts	0x1790, r25	; 0x801790 <pxOverflowTimerList+0x1>
    327e:	80 93 8f 17 	sts	0x178F, r24	; 0x80178f <pxOverflowTimerList>
    3282:	40 e0       	ldi	r20, 0x00	; 0
    3284:	67 e0       	ldi	r22, 0x07	; 7
    3286:	8a e0       	ldi	r24, 0x0A	; 10
    3288:	0e 94 72 08 	call	0x10e4	; 0x10e4 <xQueueGenericCreate>
    328c:	90 93 8e 17 	sts	0x178E, r25	; 0x80178e <xTimerQueue+0x1>
    3290:	80 93 8d 17 	sts	0x178D, r24	; 0x80178d <xTimerQueue>
    3294:	0f 90       	pop	r0
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	08 95       	ret

0000329a <xTimerCreateTimerTask>:
    329a:	ef 92       	push	r14
    329c:	ff 92       	push	r15
    329e:	0f 93       	push	r16
    32a0:	d3 df       	rcall	.-90     	; 0x3248 <prvCheckForValidListAndQueue>
    32a2:	80 91 8d 17 	lds	r24, 0x178D	; 0x80178d <xTimerQueue>
    32a6:	90 91 8e 17 	lds	r25, 0x178E	; 0x80178e <xTimerQueue+0x1>
    32aa:	89 2b       	or	r24, r25
    32ac:	91 f0       	breq	.+36     	; 0x32d2 <xTimerCreateTimerTask+0x38>
    32ae:	0f 2e       	mov	r0, r31
    32b0:	fb e8       	ldi	r31, 0x8B	; 139
    32b2:	ef 2e       	mov	r14, r31
    32b4:	f7 e1       	ldi	r31, 0x17	; 23
    32b6:	ff 2e       	mov	r15, r31
    32b8:	f0 2d       	mov	r31, r0
    32ba:	03 e0       	ldi	r16, 0x03	; 3
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 ec       	ldi	r20, 0xC0	; 192
    32c2:	50 e0       	ldi	r21, 0x00	; 0
    32c4:	68 ec       	ldi	r22, 0xC8	; 200
    32c6:	74 e0       	ldi	r23, 0x04	; 4
    32c8:	88 e5       	ldi	r24, 0x58	; 88
    32ca:	91 e0       	ldi	r25, 0x01	; 1
    32cc:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskCreate>
    32d0:	01 c0       	rjmp	.+2      	; 0x32d4 <xTimerCreateTimerTask+0x3a>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	0f 91       	pop	r16
    32d6:	ff 90       	pop	r15
    32d8:	ef 90       	pop	r14
    32da:	08 95       	ret

000032dc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    32dc:	8f 92       	push	r8
    32de:	9f 92       	push	r9
    32e0:	af 92       	push	r10
    32e2:	bf 92       	push	r11
    32e4:	cf 92       	push	r12
    32e6:	df 92       	push	r13
    32e8:	ef 92       	push	r14
    32ea:	ff 92       	push	r15
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
    32f0:	cf 93       	push	r28
    32f2:	df 93       	push	r29
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	27 97       	sbiw	r28, 0x07	; 7
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3304:	e0 91 8d 17 	lds	r30, 0x178D	; 0x80178d <xTimerQueue>
    3308:	f0 91 8e 17 	lds	r31, 0x178E	; 0x80178e <xTimerQueue+0x1>
    330c:	30 97       	sbiw	r30, 0x00	; 0
    330e:	81 f1       	breq	.+96     	; 0x3370 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3310:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3312:	2a 83       	std	Y+2, r18	; 0x02
    3314:	3b 83       	std	Y+3, r19	; 0x03
    3316:	4c 83       	std	Y+4, r20	; 0x04
    3318:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    331a:	9f 83       	std	Y+7, r25	; 0x07
    331c:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    331e:	66 30       	cpi	r22, 0x06	; 6
    3320:	f4 f4       	brge	.+60     	; 0x335e <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3322:	c4 db       	rcall	.-2168   	; 0x2aac <xTaskGetSchedulerState>
    3324:	82 30       	cpi	r24, 0x02	; 2
    3326:	69 f4       	brne	.+26     	; 0x3342 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3328:	00 e0       	ldi	r16, 0x00	; 0
    332a:	a7 01       	movw	r20, r14
    332c:	96 01       	movw	r18, r12
    332e:	be 01       	movw	r22, r28
    3330:	6f 5f       	subi	r22, 0xFF	; 255
    3332:	7f 4f       	sbci	r23, 0xFF	; 255
    3334:	80 91 8d 17 	lds	r24, 0x178D	; 0x80178d <xTimerQueue>
    3338:	90 91 8e 17 	lds	r25, 0x178E	; 0x80178e <xTimerQueue+0x1>
    333c:	0e 94 95 08 	call	0x112a	; 0x112a <xQueueGenericSend>
    3340:	18 c0       	rjmp	.+48     	; 0x3372 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3342:	00 e0       	ldi	r16, 0x00	; 0
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	a9 01       	movw	r20, r18
    334a:	be 01       	movw	r22, r28
    334c:	6f 5f       	subi	r22, 0xFF	; 255
    334e:	7f 4f       	sbci	r23, 0xFF	; 255
    3350:	80 91 8d 17 	lds	r24, 0x178D	; 0x80178d <xTimerQueue>
    3354:	90 91 8e 17 	lds	r25, 0x178E	; 0x80178e <xTimerQueue+0x1>
    3358:	0e 94 95 08 	call	0x112a	; 0x112a <xQueueGenericSend>
    335c:	0a c0       	rjmp	.+20     	; 0x3372 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	a8 01       	movw	r20, r16
    3362:	be 01       	movw	r22, r28
    3364:	6f 5f       	subi	r22, 0xFF	; 255
    3366:	7f 4f       	sbci	r23, 0xFF	; 255
    3368:	cf 01       	movw	r24, r30
    336a:	0e 94 26 09 	call	0x124c	; 0x124c <xQueueGenericSendFromISR>
    336e:	01 c0       	rjmp	.+2      	; 0x3372 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3370:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3372:	27 96       	adiw	r28, 0x07	; 7
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	df 91       	pop	r29
    3380:	cf 91       	pop	r28
    3382:	1f 91       	pop	r17
    3384:	0f 91       	pop	r16
    3386:	ff 90       	pop	r15
    3388:	ef 90       	pop	r14
    338a:	df 90       	pop	r13
    338c:	cf 90       	pop	r12
    338e:	bf 90       	pop	r11
    3390:	af 90       	pop	r10
    3392:	9f 90       	pop	r9
    3394:	8f 90       	pop	r8
    3396:	08 95       	ret

00003398 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3398:	8f 92       	push	r8
    339a:	9f 92       	push	r9
    339c:	af 92       	push	r10
    339e:	bf 92       	push	r11
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    33b0:	3b c0       	rjmp	.+118    	; 0x3428 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    33b2:	07 80       	ldd	r0, Z+7	; 0x07
    33b4:	f0 85       	ldd	r31, Z+8	; 0x08
    33b6:	e0 2d       	mov	r30, r0
    33b8:	80 80       	ld	r8, Z
    33ba:	91 80       	ldd	r9, Z+1	; 0x01
    33bc:	a2 80       	ldd	r10, Z+2	; 0x02
    33be:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    33c0:	c0 85       	ldd	r28, Z+8	; 0x08
    33c2:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    33c4:	8e 01       	movw	r16, r28
    33c6:	0e 5f       	subi	r16, 0xFE	; 254
    33c8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ca:	c8 01       	movw	r24, r16
    33cc:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    33d0:	ec 89       	ldd	r30, Y+20	; 0x14
    33d2:	fd 89       	ldd	r31, Y+21	; 0x15
    33d4:	ce 01       	movw	r24, r28
    33d6:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    33d8:	8e 89       	ldd	r24, Y+22	; 0x16
    33da:	82 ff       	sbrs	r24, 2
    33dc:	25 c0       	rjmp	.+74     	; 0x3428 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    33de:	8e 85       	ldd	r24, Y+14	; 0x0e
    33e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    33e2:	a8 89       	ldd	r26, Y+16	; 0x10
    33e4:	b9 89       	ldd	r27, Y+17	; 0x11
    33e6:	88 0d       	add	r24, r8
    33e8:	99 1d       	adc	r25, r9
    33ea:	aa 1d       	adc	r26, r10
    33ec:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    33ee:	88 16       	cp	r8, r24
    33f0:	99 06       	cpc	r9, r25
    33f2:	aa 06       	cpc	r10, r26
    33f4:	bb 06       	cpc	r11, r27
    33f6:	70 f4       	brcc	.+28     	; 0x3414 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    33f8:	8a 83       	std	Y+2, r24	; 0x02
    33fa:	9b 83       	std	Y+3, r25	; 0x03
    33fc:	ac 83       	std	Y+4, r26	; 0x04
    33fe:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3400:	db 87       	std	Y+11, r29	; 0x0b
    3402:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3404:	b8 01       	movw	r22, r16
    3406:	80 91 91 17 	lds	r24, 0x1791	; 0x801791 <pxCurrentTimerList>
    340a:	90 91 92 17 	lds	r25, 0x1792	; 0x801792 <pxCurrentTimerList+0x1>
    340e:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    3412:	0a c0       	rjmp	.+20     	; 0x3428 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3414:	c1 2c       	mov	r12, r1
    3416:	d1 2c       	mov	r13, r1
    3418:	76 01       	movw	r14, r12
    341a:	00 e0       	ldi	r16, 0x00	; 0
    341c:	10 e0       	ldi	r17, 0x00	; 0
    341e:	a5 01       	movw	r20, r10
    3420:	94 01       	movw	r18, r8
    3422:	60 e0       	ldi	r22, 0x00	; 0
    3424:	ce 01       	movw	r24, r28
    3426:	5a df       	rcall	.-332    	; 0x32dc <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3428:	e0 91 91 17 	lds	r30, 0x1791	; 0x801791 <pxCurrentTimerList>
    342c:	f0 91 92 17 	lds	r31, 0x1792	; 0x801792 <pxCurrentTimerList+0x1>
    3430:	80 81       	ld	r24, Z
    3432:	81 11       	cpse	r24, r1
    3434:	be cf       	rjmp	.-132    	; 0x33b2 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3436:	80 91 8f 17 	lds	r24, 0x178F	; 0x80178f <pxOverflowTimerList>
    343a:	90 91 90 17 	lds	r25, 0x1790	; 0x801790 <pxOverflowTimerList+0x1>
    343e:	90 93 92 17 	sts	0x1792, r25	; 0x801792 <pxCurrentTimerList+0x1>
    3442:	80 93 91 17 	sts	0x1791, r24	; 0x801791 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3446:	f0 93 90 17 	sts	0x1790, r31	; 0x801790 <pxOverflowTimerList+0x1>
    344a:	e0 93 8f 17 	sts	0x178F, r30	; 0x80178f <pxOverflowTimerList>
    }
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	df 90       	pop	r13
    345c:	cf 90       	pop	r12
    345e:	bf 90       	pop	r11
    3460:	af 90       	pop	r10
    3462:	9f 90       	pop	r9
    3464:	8f 90       	pop	r8
    3466:	08 95       	ret

00003468 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3468:	cf 92       	push	r12
    346a:	df 92       	push	r13
    346c:	ef 92       	push	r14
    346e:	ff 92       	push	r15
    3470:	cf 93       	push	r28
    3472:	df 93       	push	r29
    3474:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3476:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <xTaskGetTickCount>
    347a:	6b 01       	movw	r12, r22
    347c:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    347e:	80 91 87 17 	lds	r24, 0x1787	; 0x801787 <xLastTime.2436>
    3482:	90 91 88 17 	lds	r25, 0x1788	; 0x801788 <xLastTime.2436+0x1>
    3486:	a0 91 89 17 	lds	r26, 0x1789	; 0x801789 <xLastTime.2436+0x2>
    348a:	b0 91 8a 17 	lds	r27, 0x178A	; 0x80178a <xLastTime.2436+0x3>
    348e:	c8 16       	cp	r12, r24
    3490:	d9 06       	cpc	r13, r25
    3492:	ea 06       	cpc	r14, r26
    3494:	fb 06       	cpc	r15, r27
    3496:	20 f4       	brcc	.+8      	; 0x34a0 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3498:	7f df       	rcall	.-258    	; 0x3398 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	88 83       	st	Y, r24
    349e:	01 c0       	rjmp	.+2      	; 0x34a2 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    34a0:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    34a2:	c0 92 87 17 	sts	0x1787, r12	; 0x801787 <xLastTime.2436>
    34a6:	d0 92 88 17 	sts	0x1788, r13	; 0x801788 <xLastTime.2436+0x1>
    34aa:	e0 92 89 17 	sts	0x1789, r14	; 0x801789 <xLastTime.2436+0x2>
    34ae:	f0 92 8a 17 	sts	0x178A, r15	; 0x80178a <xLastTime.2436+0x3>

        return xTimeNow;
    }
    34b2:	c7 01       	movw	r24, r14
    34b4:	b6 01       	movw	r22, r12
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	ff 90       	pop	r15
    34bc:	ef 90       	pop	r14
    34be:	df 90       	pop	r13
    34c0:	cf 90       	pop	r12
    34c2:	08 95       	ret

000034c4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    34c4:	4f 92       	push	r4
    34c6:	5f 92       	push	r5
    34c8:	6f 92       	push	r6
    34ca:	7f 92       	push	r7
    34cc:	8f 92       	push	r8
    34ce:	9f 92       	push	r9
    34d0:	af 92       	push	r10
    34d2:	bf 92       	push	r11
    34d4:	cf 92       	push	r12
    34d6:	df 92       	push	r13
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	4b 01       	movw	r8, r22
    34e6:	5c 01       	movw	r10, r24
    34e8:	29 01       	movw	r4, r18
    34ea:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    34ec:	e0 91 91 17 	lds	r30, 0x1791	; 0x801791 <pxCurrentTimerList>
    34f0:	f0 91 92 17 	lds	r31, 0x1792	; 0x801792 <pxCurrentTimerList+0x1>
    34f4:	07 80       	ldd	r0, Z+7	; 0x07
    34f6:	f0 85       	ldd	r31, Z+8	; 0x08
    34f8:	e0 2d       	mov	r30, r0
    34fa:	c0 85       	ldd	r28, Z+8	; 0x08
    34fc:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34fe:	ce 01       	movw	r24, r28
    3500:	02 96       	adiw	r24, 0x02	; 2
    3502:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3506:	8e 89       	ldd	r24, Y+22	; 0x16
    3508:	82 ff       	sbrs	r24, 2
    350a:	1b c0       	rjmp	.+54     	; 0x3542 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    350c:	4e 85       	ldd	r20, Y+14	; 0x0e
    350e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3510:	68 89       	ldd	r22, Y+16	; 0x10
    3512:	79 89       	ldd	r23, Y+17	; 0x11
    3514:	48 0d       	add	r20, r8
    3516:	59 1d       	adc	r21, r9
    3518:	6a 1d       	adc	r22, r10
    351a:	7b 1d       	adc	r23, r11
    351c:	75 01       	movw	r14, r10
    351e:	64 01       	movw	r12, r8
    3520:	93 01       	movw	r18, r6
    3522:	82 01       	movw	r16, r4
    3524:	ce 01       	movw	r24, r28
    3526:	47 de       	rcall	.-882    	; 0x31b6 <prvInsertTimerInActiveList>
    3528:	88 23       	and	r24, r24
    352a:	69 f0       	breq	.+26     	; 0x3546 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    352c:	c1 2c       	mov	r12, r1
    352e:	d1 2c       	mov	r13, r1
    3530:	76 01       	movw	r14, r12
    3532:	00 e0       	ldi	r16, 0x00	; 0
    3534:	10 e0       	ldi	r17, 0x00	; 0
    3536:	a5 01       	movw	r20, r10
    3538:	94 01       	movw	r18, r8
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	ce 01       	movw	r24, r28
    353e:	ce de       	rcall	.-612    	; 0x32dc <xTimerGenericCommand>
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3542:	8e 7f       	andi	r24, 0xFE	; 254
    3544:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3546:	ec 89       	ldd	r30, Y+20	; 0x14
    3548:	fd 89       	ldd	r31, Y+21	; 0x15
    354a:	ce 01       	movw	r24, r28
    354c:	19 95       	eicall
    }
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	ff 90       	pop	r15
    3558:	ef 90       	pop	r14
    355a:	df 90       	pop	r13
    355c:	cf 90       	pop	r12
    355e:	bf 90       	pop	r11
    3560:	af 90       	pop	r10
    3562:	9f 90       	pop	r9
    3564:	8f 90       	pop	r8
    3566:	7f 90       	pop	r7
    3568:	6f 90       	pop	r6
    356a:	5f 90       	pop	r5
    356c:	4f 90       	pop	r4
    356e:	08 95       	ret

00003570 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3570:	8f 92       	push	r8
    3572:	9f 92       	push	r9
    3574:	af 92       	push	r10
    3576:	bf 92       	push	r11
    3578:	cf 92       	push	r12
    357a:	df 92       	push	r13
    357c:	ef 92       	push	r14
    357e:	ff 92       	push	r15
    3580:	1f 93       	push	r17
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
    3586:	1f 92       	push	r1
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	6b 01       	movw	r12, r22
    358e:	7c 01       	movw	r14, r24
    3590:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3592:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3596:	ce 01       	movw	r24, r28
    3598:	01 96       	adiw	r24, 0x01	; 1
    359a:	66 df       	rcall	.-308    	; 0x3468 <prvSampleTimeNow>
    359c:	4b 01       	movw	r8, r22
    359e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	81 11       	cpse	r24, r1
    35a4:	2d c0       	rjmp	.+90     	; 0x3600 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    35a6:	11 11       	cpse	r17, r1
    35a8:	0d c0       	rjmp	.+26     	; 0x35c4 <prvProcessTimerOrBlockTask+0x54>
    35aa:	8c 14       	cp	r8, r12
    35ac:	9d 04       	cpc	r9, r13
    35ae:	ae 04       	cpc	r10, r14
    35b0:	bf 04       	cpc	r11, r15
    35b2:	40 f0       	brcs	.+16     	; 0x35c4 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    35b4:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    35b8:	a5 01       	movw	r20, r10
    35ba:	94 01       	movw	r18, r8
    35bc:	c7 01       	movw	r24, r14
    35be:	b6 01       	movw	r22, r12
    35c0:	81 df       	rcall	.-254    	; 0x34c4 <prvProcessExpiredTimer>
    35c2:	20 c0       	rjmp	.+64     	; 0x3604 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    35c4:	11 23       	and	r17, r17
    35c6:	41 f0       	breq	.+16     	; 0x35d8 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    35c8:	e0 91 8f 17 	lds	r30, 0x178F	; 0x80178f <pxOverflowTimerList>
    35cc:	f0 91 90 17 	lds	r31, 0x1790	; 0x801790 <pxOverflowTimerList+0x1>
    35d0:	80 81       	ld	r24, Z
    35d2:	11 e0       	ldi	r17, 0x01	; 1
    35d4:	81 11       	cpse	r24, r1
    35d6:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    35d8:	b7 01       	movw	r22, r14
    35da:	a6 01       	movw	r20, r12
    35dc:	48 19       	sub	r20, r8
    35de:	59 09       	sbc	r21, r9
    35e0:	6a 09       	sbc	r22, r10
    35e2:	7b 09       	sbc	r23, r11
    35e4:	21 2f       	mov	r18, r17
    35e6:	80 91 8d 17 	lds	r24, 0x178D	; 0x80178d <xTimerQueue>
    35ea:	90 91 8e 17 	lds	r25, 0x178E	; 0x80178e <xTimerQueue+0x1>
    35ee:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    35f2:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskResumeAll>
    35f6:	81 11       	cpse	r24, r1
    35f8:	05 c0       	rjmp	.+10     	; 0x3604 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    35fa:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    35fe:	02 c0       	rjmp	.+4      	; 0x3604 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3600:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskResumeAll>
            }
        }
    }
    3604:	0f 90       	pop	r0
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	1f 91       	pop	r17
    360c:	ff 90       	pop	r15
    360e:	ef 90       	pop	r14
    3610:	df 90       	pop	r13
    3612:	cf 90       	pop	r12
    3614:	bf 90       	pop	r11
    3616:	af 90       	pop	r10
    3618:	9f 90       	pop	r9
    361a:	8f 90       	pop	r8
    361c:	08 95       	ret

0000361e <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    361e:	af 92       	push	r10
    3620:	bf 92       	push	r11
    3622:	cf 92       	push	r12
    3624:	df 92       	push	r13
    3626:	ef 92       	push	r14
    3628:	ff 92       	push	r15
    362a:	0f 93       	push	r16
    362c:	1f 93       	push	r17
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
    3636:	28 97       	sbiw	r28, 0x08	; 8
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3642:	82 c0       	rjmp	.+260    	; 0x3748 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	88 23       	and	r24, r24
    3648:	0c f4       	brge	.+2      	; 0x364c <prvProcessReceivedCommands+0x2e>
    364a:	7e c0       	rjmp	.+252    	; 0x3748 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    364c:	ae 80       	ldd	r10, Y+6	; 0x06
    364e:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3650:	d5 01       	movw	r26, r10
    3652:	1c 96       	adiw	r26, 0x0c	; 12
    3654:	8d 91       	ld	r24, X+
    3656:	9c 91       	ld	r25, X
    3658:	1d 97       	sbiw	r26, 0x0d	; 13
    365a:	89 2b       	or	r24, r25
    365c:	21 f0       	breq	.+8      	; 0x3666 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    365e:	c5 01       	movw	r24, r10
    3660:	02 96       	adiw	r24, 0x02	; 2
    3662:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3666:	ce 01       	movw	r24, r28
    3668:	08 96       	adiw	r24, 0x08	; 8
    366a:	fe de       	rcall	.-516    	; 0x3468 <prvSampleTimeNow>
    366c:	8b 01       	movw	r16, r22
    366e:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3670:	e9 81       	ldd	r30, Y+1	; 0x01
    3672:	0e 2e       	mov	r0, r30
    3674:	00 0c       	add	r0, r0
    3676:	ff 0b       	sbc	r31, r31
    3678:	ea 30       	cpi	r30, 0x0A	; 10
    367a:	f1 05       	cpc	r31, r1
    367c:	08 f0       	brcs	.+2      	; 0x3680 <prvProcessReceivedCommands+0x62>
    367e:	64 c0       	rjmp	.+200    	; 0x3748 <prvProcessReceivedCommands+0x12a>
    3680:	88 27       	eor	r24, r24
    3682:	ee 58       	subi	r30, 0x8E	; 142
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	8f 4f       	sbci	r24, 0xFF	; 255
    3688:	0c 94 06 30 	jmp	0x600c	; 0x600c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    368c:	f5 01       	movw	r30, r10
    368e:	86 89       	ldd	r24, Z+22	; 0x16
    3690:	81 60       	ori	r24, 0x01	; 1
    3692:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3694:	ca 80       	ldd	r12, Y+2	; 0x02
    3696:	db 80       	ldd	r13, Y+3	; 0x03
    3698:	ec 80       	ldd	r14, Y+4	; 0x04
    369a:	fd 80       	ldd	r15, Y+5	; 0x05
    369c:	46 85       	ldd	r20, Z+14	; 0x0e
    369e:	57 85       	ldd	r21, Z+15	; 0x0f
    36a0:	60 89       	ldd	r22, Z+16	; 0x10
    36a2:	71 89       	ldd	r23, Z+17	; 0x11
    36a4:	4c 0d       	add	r20, r12
    36a6:	5d 1d       	adc	r21, r13
    36a8:	6e 1d       	adc	r22, r14
    36aa:	7f 1d       	adc	r23, r15
    36ac:	c5 01       	movw	r24, r10
    36ae:	83 dd       	rcall	.-1274   	; 0x31b6 <prvInsertTimerInActiveList>
    36b0:	88 23       	and	r24, r24
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <prvProcessReceivedCommands+0x98>
    36b4:	49 c0       	rjmp	.+146    	; 0x3748 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    36b6:	d5 01       	movw	r26, r10
    36b8:	54 96       	adiw	r26, 0x14	; 20
    36ba:	ed 91       	ld	r30, X+
    36bc:	fc 91       	ld	r31, X
    36be:	55 97       	sbiw	r26, 0x15	; 21
    36c0:	c5 01       	movw	r24, r10
    36c2:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    36c4:	f5 01       	movw	r30, r10
    36c6:	86 89       	ldd	r24, Z+22	; 0x16
    36c8:	82 ff       	sbrs	r24, 2
    36ca:	3e c0       	rjmp	.+124    	; 0x3748 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    36cc:	4a 81       	ldd	r20, Y+2	; 0x02
    36ce:	5b 81       	ldd	r21, Y+3	; 0x03
    36d0:	6c 81       	ldd	r22, Y+4	; 0x04
    36d2:	7d 81       	ldd	r23, Y+5	; 0x05
    36d4:	86 85       	ldd	r24, Z+14	; 0x0e
    36d6:	97 85       	ldd	r25, Z+15	; 0x0f
    36d8:	a0 89       	ldd	r26, Z+16	; 0x10
    36da:	b1 89       	ldd	r27, Z+17	; 0x11
    36dc:	9a 01       	movw	r18, r20
    36de:	ab 01       	movw	r20, r22
    36e0:	28 0f       	add	r18, r24
    36e2:	39 1f       	adc	r19, r25
    36e4:	4a 1f       	adc	r20, r26
    36e6:	5b 1f       	adc	r21, r27
    36e8:	c1 2c       	mov	r12, r1
    36ea:	d1 2c       	mov	r13, r1
    36ec:	76 01       	movw	r14, r12
    36ee:	00 e0       	ldi	r16, 0x00	; 0
    36f0:	10 e0       	ldi	r17, 0x00	; 0
    36f2:	60 e0       	ldi	r22, 0x00	; 0
    36f4:	c5 01       	movw	r24, r10
    36f6:	f2 dd       	rcall	.-1052   	; 0x32dc <xTimerGenericCommand>
    36f8:	27 c0       	rjmp	.+78     	; 0x3748 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    36fa:	d5 01       	movw	r26, r10
    36fc:	56 96       	adiw	r26, 0x16	; 22
    36fe:	8c 91       	ld	r24, X
    3700:	56 97       	sbiw	r26, 0x16	; 22
    3702:	8e 7f       	andi	r24, 0xFE	; 254
    3704:	56 96       	adiw	r26, 0x16	; 22
    3706:	8c 93       	st	X, r24
                        break;
    3708:	1f c0       	rjmp	.+62     	; 0x3748 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    370a:	f5 01       	movw	r30, r10
    370c:	86 89       	ldd	r24, Z+22	; 0x16
    370e:	81 60       	ori	r24, 0x01	; 1
    3710:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3712:	4a 81       	ldd	r20, Y+2	; 0x02
    3714:	5b 81       	ldd	r21, Y+3	; 0x03
    3716:	6c 81       	ldd	r22, Y+4	; 0x04
    3718:	7d 81       	ldd	r23, Y+5	; 0x05
    371a:	46 87       	std	Z+14, r20	; 0x0e
    371c:	57 87       	std	Z+15, r21	; 0x0f
    371e:	60 8b       	std	Z+16, r22	; 0x10
    3720:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3722:	40 0f       	add	r20, r16
    3724:	51 1f       	adc	r21, r17
    3726:	62 1f       	adc	r22, r18
    3728:	73 1f       	adc	r23, r19
    372a:	68 01       	movw	r12, r16
    372c:	79 01       	movw	r14, r18
    372e:	c5 01       	movw	r24, r10
    3730:	42 dd       	rcall	.-1404   	; 0x31b6 <prvInsertTimerInActiveList>
                        break;
    3732:	0a c0       	rjmp	.+20     	; 0x3748 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3734:	f5 01       	movw	r30, r10
    3736:	86 89       	ldd	r24, Z+22	; 0x16
    3738:	81 fd       	sbrc	r24, 1
    373a:	04 c0       	rjmp	.+8      	; 0x3744 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    373c:	c5 01       	movw	r24, r10
    373e:	0e 94 82 05 	call	0xb04	; 0xb04 <vPortFree>
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3744:	8e 7f       	andi	r24, 0xFE	; 254
    3746:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	a9 01       	movw	r20, r18
    374e:	be 01       	movw	r22, r28
    3750:	6f 5f       	subi	r22, 0xFF	; 255
    3752:	7f 4f       	sbci	r23, 0xFF	; 255
    3754:	80 91 8d 17 	lds	r24, 0x178D	; 0x80178d <xTimerQueue>
    3758:	90 91 8e 17 	lds	r25, 0x178E	; 0x80178e <xTimerQueue+0x1>
    375c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <xQueueReceive>
    3760:	81 11       	cpse	r24, r1
    3762:	70 cf       	rjmp	.-288    	; 0x3644 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3764:	28 96       	adiw	r28, 0x08	; 8
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	0f 91       	pop	r16
    3778:	ff 90       	pop	r15
    377a:	ef 90       	pop	r14
    377c:	df 90       	pop	r13
    377e:	cf 90       	pop	r12
    3780:	bf 90       	pop	r11
    3782:	af 90       	pop	r10
    3784:	08 95       	ret

00003786 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3786:	08 95       	ret

00003788 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3788:	84 b1       	in	r24, 0x04	; 4
    378a:	80 68       	ori	r24, 0x80	; 128
    378c:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    378e:	85 b1       	in	r24, 0x05	; 5
    3790:	80 68       	ori	r24, 0x80	; 128
    3792:	85 b9       	out	0x05, r24	; 5
    3794:	08 95       	ret

00003796 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3796:	83 b1       	in	r24, 0x03	; 3
    3798:	80 68       	ori	r24, 0x80	; 128
    379a:	83 b9       	out	0x03, r24	; 3
    379c:	08 95       	ret

0000379e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    379e:	f4 df       	rcall	.-24     	; 0x3788 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    37a0:	2f ef       	ldi	r18, 0xFF	; 255
    37a2:	80 e7       	ldi	r24, 0x70	; 112
    37a4:	92 e0       	ldi	r25, 0x02	; 2
    37a6:	21 50       	subi	r18, 0x01	; 1
    37a8:	80 40       	sbci	r24, 0x00	; 0
    37aa:	90 40       	sbci	r25, 0x00	; 0
    37ac:	e1 f7       	brne	.-8      	; 0x37a6 <vApplicationMallocFailedHook+0x8>
    37ae:	00 c0       	rjmp	.+0      	; 0x37b0 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    37b0:	00 00       	nop
    37b2:	f1 df       	rcall	.-30     	; 0x3796 <prvBlinkMainLed>
    37b4:	f5 cf       	rjmp	.-22     	; 0x37a0 <vApplicationMallocFailedHook+0x2>

000037b6 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    37b6:	e8 df       	rcall	.-48     	; 0x3788 <prvSetMainLedOn>
    37b8:	2f ef       	ldi	r18, 0xFF	; 255
    37ba:	87 ea       	ldi	r24, 0xA7	; 167
    37bc:	91 e6       	ldi	r25, 0x61	; 97
    37be:	21 50       	subi	r18, 0x01	; 1
    37c0:	80 40       	sbci	r24, 0x00	; 0
    37c2:	90 40       	sbci	r25, 0x00	; 0
    37c4:	e1 f7       	brne	.-8      	; 0x37be <vApplicationStackOverflowHook+0x8>
    37c6:	00 c0       	rjmp	.+0      	; 0x37c8 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    37c8:	00 00       	nop
    37ca:	e5 df       	rcall	.-54     	; 0x3796 <prvBlinkMainLed>
    37cc:	f5 cf       	rjmp	.-22     	; 0x37b8 <vApplicationStackOverflowHook+0x2>

000037ce <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    37ce:	0f 93       	push	r16
    37d0:	1f 93       	push	r17
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	64 97       	sbiw	r28, 0x14	; 20
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	0e 94 2b 28 	call	0x5056	; 0x5056 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    37ec:	60 d3       	rcall	.+1728   	; 0x3eae <lora_driver_rn2483FactoryReset>
    37ee:	dc d5       	rcall	.+3000   	; 0x43a8 <lora_driver_mapReturnCodeToText>
    37f0:	9f 93       	push	r25
    37f2:	8f 93       	push	r24
    37f4:	80 ed       	ldi	r24, 0xD0	; 208
    37f6:	94 e0       	ldi	r25, 0x04	; 4
    37f8:	9f 93       	push	r25
    37fa:	8f 93       	push	r24
    37fc:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3800:	d4 d4       	rcall	.+2472   	; 0x41aa <lora_driver_configureToEu868>
    3802:	d2 d5       	rcall	.+2980   	; 0x43a8 <lora_driver_mapReturnCodeToText>
    3804:	9f 93       	push	r25
    3806:	8f 93       	push	r24
    3808:	83 ee       	ldi	r24, 0xE3	; 227
    380a:	94 e0       	ldi	r25, 0x04	; 4
    380c:	9f 93       	push	r25
    380e:	8f 93       	push	r24
    3810:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
    3814:	8e 01       	movw	r16, r28
    3816:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3818:	1f 4f       	sbci	r17, 0xFF	; 255
    381a:	c8 01       	movw	r24, r16
    381c:	5a d3       	rcall	.+1716   	; 0x3ed2 <lora_driver_getRn2483Hweui>
    381e:	c4 d5       	rcall	.+2952   	; 0x43a8 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3820:	1f 93       	push	r17
    3822:	0f 93       	push	r16
    3824:	9f 93       	push	r25
    3826:	8f 93       	push	r24
    3828:	8c ef       	ldi	r24, 0xFC	; 252
    382a:	94 e0       	ldi	r25, 0x04	; 4
    382c:	9f 93       	push	r25
    382e:	8f 93       	push	r24
    3830:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3834:	c8 01       	movw	r24, r16
    3836:	69 d3       	rcall	.+1746   	; 0x3f0a <lora_driver_setDeviceIdentifier>
    3838:	b7 d5       	rcall	.+2926   	; 0x43a8 <lora_driver_mapReturnCodeToText>
    383a:	9f 93       	push	r25
    383c:	8f 93       	push	r24
    383e:	1f 93       	push	r17
    3840:	0f 93       	push	r16
    3842:	80 e1       	ldi	r24, 0x10	; 16
    3844:	95 e0       	ldi	r25, 0x05	; 5
    3846:	9f 93       	push	r25
    3848:	8f 93       	push	r24
    384a:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    384e:	a8 01       	movw	r20, r16
    3850:	65 e2       	ldi	r22, 0x25	; 37
    3852:	75 e0       	ldi	r23, 0x05	; 5
    3854:	86 e4       	ldi	r24, 0x46	; 70
    3856:	95 e0       	ldi	r25, 0x05	; 5
    3858:	86 d5       	rcall	.+2828   	; 0x4366 <lora_driver_setOtaaIdentity>
    385a:	a6 d5       	rcall	.+2892   	; 0x43a8 <lora_driver_mapReturnCodeToText>
    385c:	9f 93       	push	r25
    385e:	8f 93       	push	r24
    3860:	1f 93       	push	r17
    3862:	0f 93       	push	r16
    3864:	85 e2       	ldi	r24, 0x25	; 37
    3866:	95 e0       	ldi	r25, 0x05	; 5
    3868:	9f 93       	push	r25
    386a:	8f 93       	push	r24
    386c:	86 e4       	ldi	r24, 0x46	; 70
    386e:	95 e0       	ldi	r25, 0x05	; 5
    3870:	9f 93       	push	r25
    3872:	8f 93       	push	r24
    3874:	87 e5       	ldi	r24, 0x57	; 87
    3876:	95 e0       	ldi	r25, 0x05	; 5
    3878:	9f 93       	push	r25
    387a:	8f 93       	push	r24
    387c:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3880:	77 d3       	rcall	.+1774   	; 0x3f70 <lora_driver_saveMac>
    3882:	92 d5       	rcall	.+2852   	; 0x43a8 <lora_driver_mapReturnCodeToText>
    3884:	9f 93       	push	r25
    3886:	8f 93       	push	r24
    3888:	8d e8       	ldi	r24, 0x8D	; 141
    388a:	95 e0       	ldi	r25, 0x05	; 5
    388c:	9f 93       	push	r25
    388e:	8f 93       	push	r24
    3890:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	de bf       	out	0x3e, r29	; 62
    389a:	0f be       	out	0x3f, r0	; 63
    389c:	cd bf       	out	0x3d, r28	; 61
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	61 d4       	rcall	.+2242   	; 0x4164 <lora_driver_setAdaptiveDataRate>
    38a2:	82 d5       	rcall	.+2820   	; 0x43a8 <lora_driver_mapReturnCodeToText>
    38a4:	9f 93       	push	r25
    38a6:	8f 93       	push	r24
    38a8:	8c e9       	ldi	r24, 0x9C	; 156
    38aa:	95 e0       	ldi	r25, 0x05	; 5
    38ac:	9f 93       	push	r25
    38ae:	8f 93       	push	r24
    38b0:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    38b4:	84 ef       	ldi	r24, 0xF4	; 244
    38b6:	91 e0       	ldi	r25, 0x01	; 1
    38b8:	60 d4       	rcall	.+2240   	; 0x417a <lora_driver_setReceiveDelay>
    38ba:	76 d5       	rcall	.+2796   	; 0x43a8 <lora_driver_mapReturnCodeToText>
    38bc:	9f 93       	push	r25
    38be:	8f 93       	push	r24
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	8f 93       	push	r24
    38c4:	84 ef       	ldi	r24, 0xF4	; 244
    38c6:	8f 93       	push	r24
    38c8:	8d eb       	ldi	r24, 0xBD	; 189
    38ca:	95 e0       	ldi	r25, 0x05	; 5
    38cc:	9f 93       	push	r25
    38ce:	8f 93       	push	r24
    38d0:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
    38d4:	0f b6       	in	r0, 0x3f	; 63
    38d6:	f8 94       	cli
    38d8:	de bf       	out	0x3e, r29	; 62
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    38de:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    38e0:	80 e0       	ldi	r24, 0x00	; 0
    38e2:	4c d3       	rcall	.+1688   	; 0x3f7c <lora_driver_join>
    38e4:	08 2f       	mov	r16, r24
    38e6:	60 d5       	rcall	.+2752   	; 0x43a8 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    38e8:	9f 93       	push	r25
    38ea:	8f 93       	push	r24
    38ec:	1f 92       	push	r1
    38ee:	1f 93       	push	r17
    38f0:	8d ed       	ldi	r24, 0xDD	; 221
    38f2:	95 e0       	ldi	r25, 0x05	; 5
    38f4:	9f 93       	push	r25
    38f6:	8f 93       	push	r24
    38f8:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	08 30       	cpi	r16, 0x08	; 8
    390a:	59 f0       	breq	.+22     	; 0x3922 <_lora_setup+0x154>
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	0e 94 8f 28 	call	0x511e	; 0x511e <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3912:	66 e3       	ldi	r22, 0x36	; 54
    3914:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	0e 94 54 12 	call	0x24a8	; 0x24a8 <vTaskDelay>
    391e:	11 50       	subi	r17, 0x01	; 1
    3920:	f9 f6       	brne	.-66     	; 0x38e0 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3922:	08 30       	cpi	r16, 0x08	; 8
    3924:	21 f4       	brne	.+8      	; 0x392e <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	0e 94 71 28 	call	0x50e2	; 0x50e2 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    392c:	09 c0       	rjmp	.+18     	; 0x3940 <_lora_setup+0x172>
    392e:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3930:	0e 94 80 28 	call	0x5100	; 0x5100 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	0e 94 4e 28 	call	0x509c	; 0x509c <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    393a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    393e:	fd cf       	rjmp	.-6      	; 0x393a <_lora_setup+0x16c>
    3940:	64 96       	adiw	r28, 0x14	; 20
    3942:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	1f 91       	pop	r17
    3952:	0f 91       	pop	r16
    3954:	08 95       	ret

00003956 <lora_handler_task>:
    3956:	cf 93       	push	r28
    3958:	df 93       	push	r29

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    395a:	00 d0       	rcall	.+0      	; 0x395c <lora_handler_task+0x6>
    395c:	1f 92       	push	r1
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	96 d2       	rcall	.+1324   	; 0x3e92 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3966:	62 e0       	ldi	r22, 0x02	; 2
    3968:	70 e0       	ldi	r23, 0x00	; 0
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	0e 94 54 12 	call	0x24a8	; 0x24a8 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	8e d2       	rcall	.+1308   	; 0x3e92 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3976:	66 e9       	ldi	r22, 0x96	; 150
    3978:	70 e0       	ldi	r23, 0x00	; 0
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	0e 94 54 12 	call	0x24a8	; 0x24a8 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3982:	40 d2       	rcall	.+1152   	; 0x3e04 <lora_driver_flushBuffers>

	_lora_setup();
    3984:	24 df       	rcall	.-440    	; 0x37ce <_lora_setup>
    3986:	e9 ea       	ldi	r30, 0xA9	; 169

	_uplink_payload.len = 6;
    3988:	f7 e1       	ldi	r31, 0x17	; 23
    398a:	86 e0       	ldi	r24, 0x06	; 6
    398c:	81 83       	std	Z+1, r24	; 0x01
    398e:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    3990:	80 83       	st	Z, r24
    3992:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3996:	69 83       	std	Y+1, r22	; 0x01
    3998:	7a 83       	std	Y+2, r23	; 0x02
    399a:	8b 83       	std	Y+3, r24	; 0x03
    399c:	9c 83       	std	Y+4, r25	; 0x04
    399e:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    39a0:	58 e4       	ldi	r21, 0x48	; 72
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	ce 01       	movw	r24, r28
    39a8:	01 96       	adiw	r24, 0x01	; 1
    39aa:	0e 94 ef 11 	call	0x23de	; 0x23de <xTaskDelayUntil>
    39ae:	e9 ea       	ldi	r30, 0xA9	; 169
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2
		

		_uplink_payload.bytes[0] = hum >> 8;
    39b0:	f7 e1       	ldi	r31, 0x17	; 23
    39b2:	80 e3       	ldi	r24, 0x30	; 48
    39b4:	82 83       	std	Z+2, r24	; 0x02
    39b6:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    39b8:	83 83       	std	Z+3, r24	; 0x03
    39ba:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    39bc:	84 83       	std	Z+4, r24	; 0x04
    39be:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    39c0:	85 83       	std	Z+5, r24	; 0x05
    39c2:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    39c4:	86 83       	std	Z+6, r24	; 0x06
    39c6:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    39c8:	87 83       	std	Z+7, r24	; 0x07
    39ca:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    39cc:	0e 94 a1 28 	call	0x5142	; 0x5142 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    39d0:	69 ea       	ldi	r22, 0xA9	; 169
    39d2:	77 e1       	ldi	r23, 0x17	; 23
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	fb d2       	rcall	.+1526   	; 0x3fce <lora_driver_sendUploadMessage>
    39d8:	e7 d4       	rcall	.+2510   	; 0x43a8 <lora_driver_mapReturnCodeToText>
    39da:	9f 93       	push	r25
    39dc:	8f 93       	push	r24
    39de:	8d ef       	ldi	r24, 0xFD	; 253
    39e0:	95 e0       	ldi	r25, 0x05	; 5
    39e2:	9f 93       	push	r25
    39e4:	8f 93       	push	r24
    39e6:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	d5 cf       	rjmp	.-86     	; 0x399e <lora_handler_task+0x48>

000039f4 <lora_handler_initialise>:
    39f4:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    39f6:	ff 92       	push	r15
    39f8:	0f 93       	push	r16
	xTaskCreate(
    39fa:	e1 2c       	mov	r14, r1
    39fc:	f1 2c       	mov	r15, r1
    39fe:	08 2f       	mov	r16, r24
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	48 e8       	ldi	r20, 0x88	; 136
    3a06:	51 e0       	ldi	r21, 0x01	; 1
    3a08:	62 e1       	ldi	r22, 0x12	; 18
    3a0a:	76 e0       	ldi	r23, 0x06	; 6
    3a0c:	8b ea       	ldi	r24, 0xAB	; 171
    3a0e:	9c e1       	ldi	r25, 0x1C	; 28
    3a10:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3a14:	0f 91       	pop	r16
    3a16:	ff 90       	pop	r15
    3a18:	ef 90       	pop	r14
    3a1a:	08 95       	ret

00003a1c <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3a1c:	81 b1       	in	r24, 0x01	; 1
    3a1e:	81 68       	ori	r24, 0x81	; 129
    3a20:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	0e 94 d6 26 	call	0x4dac	; 0x4dac <stdio_initialise>
	// Let's create some tasks
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3a28:	85 e0       	ldi	r24, 0x05	; 5
    3a2a:	0e 94 dd 27 	call	0x4fba	; 0x4fba <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	70 e0       	ldi	r23, 0x00	; 0
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	ee d1       	rcall	.+988    	; 0x3e12 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3a36:	83 e0       	ldi	r24, 0x03	; 3
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	dc df       	rcall	.-72     	; 0x39f4 <lora_handler_initialise>

//Calling from application.h to initialize everything	
	initialize_everything();
    3a3c:	0e 94 8c 01 	call	0x318	; 0x318 <initialize_everything>
	run_all_Task();
    3a40:	0e 94 89 01 	call	0x312	; 0x312 <run_all_Task>
	MainApplicationTask();
    3a44:	0c 94 97 01 	jmp	0x32e	; 0x32e <MainApplicationTask>
    3a48:	08 95       	ret

00003a4a <main>:


/*-----------------------------------------------------------*/
int main(void)
{
		printf("Activate");
    3a4a:	8f e6       	ldi	r24, 0x6F	; 111
    3a4c:	92 e0       	ldi	r25, 0x02	; 2
    3a4e:	9f 93       	push	r25
    3a50:	8f 93       	push	r24
    3a52:	0e 94 bc 32 	call	0x6578	; 0x6578 <printf>
		puts("MAIN");
    3a56:	89 e1       	ldi	r24, 0x19	; 25
    3a58:	96 e0       	ldi	r25, 0x06	; 6
    3a5a:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <puts>
	initialiseSystem(); // Must be done as the very first thing!!
    3a5e:	de df       	rcall	.-68     	; 0x3a1c <initialiseSystem>
	printf("Program Started!!\n");
    3a60:	8e e1       	ldi	r24, 0x1E	; 30
    3a62:	96 e0       	ldi	r25, 0x06	; 6
    3a64:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3a68:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vTaskStartScheduler>
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	ff cf       	rjmp	.-2      	; 0x3a70 <main+0x26>

00003a72 <_hihTwiCallback>:
    3a72:	65 30       	cpi	r22, 0x05	; 5
    3a74:	f1 f4       	brne	.+60     	; 0x3ab2 <_hihTwiCallback+0x40>
    3a76:	fa 01       	movw	r30, r20
    3a78:	80 81       	ld	r24, Z
    3a7a:	8f 73       	andi	r24, 0x3F	; 63
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	98 2f       	mov	r25, r24
    3a80:	88 27       	eor	r24, r24
    3a82:	21 81       	ldd	r18, Z+1	; 0x01
    3a84:	82 2b       	or	r24, r18
    3a86:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3a8a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3a8e:	82 81       	ldd	r24, Z+2	; 0x02
    3a90:	f0 e4       	ldi	r31, 0x40	; 64
    3a92:	8f 9f       	mul	r24, r31
    3a94:	c0 01       	movw	r24, r0
    3a96:	11 24       	eor	r1, r1
    3a98:	fa 01       	movw	r30, r20
    3a9a:	23 81       	ldd	r18, Z+3	; 0x03
    3a9c:	26 95       	lsr	r18
    3a9e:	26 95       	lsr	r18
    3aa0:	82 2b       	or	r24, r18
    3aa2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3aa6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	80 93 bf 17 	sts	0x17BF, r24	; 0x8017bf <_measuringIsReady>
    3ab0:	08 95       	ret
    3ab2:	64 30       	cpi	r22, 0x04	; 4
    3ab4:	51 f0       	breq	.+20     	; 0x3aca <_hihTwiCallback+0x58>
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	90 e4       	ldi	r25, 0x40	; 64
    3aba:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3abe:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3ac2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3ac6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3aca:	08 95       	ret

00003acc <hih8120_initialise>:
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
    3ad0:	09 e3       	ldi	r16, 0x39	; 57
    3ad2:	1d e1       	ldi	r17, 0x1D	; 29
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	34 e2       	ldi	r19, 0x24	; 36
    3ad8:	44 ef       	ldi	r20, 0xF4	; 244
    3ada:	50 e0       	ldi	r21, 0x00	; 0
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	87 e2       	ldi	r24, 0x27	; 39
    3ae0:	0e 94 c3 28 	call	0x5186	; 0x5186 <twiCreate>
    3ae4:	90 93 c1 17 	sts	0x17C1, r25	; 0x8017c1 <_hih8120Handler+0x1>
    3ae8:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <_hih8120Handler>
    3aec:	21 e0       	ldi	r18, 0x01	; 1
    3aee:	89 2b       	or	r24, r25
    3af0:	09 f0       	breq	.+2      	; 0x3af4 <hih8120_initialise+0x28>
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	82 2f       	mov	r24, r18
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret

00003afc <hih8120_wakeup>:
    3afc:	80 91 c0 17 	lds	r24, 0x17C0	; 0x8017c0 <_hih8120Handler>
    3b00:	90 91 c1 17 	lds	r25, 0x17C1	; 0x8017c1 <_hih8120Handler+0x1>
    3b04:	00 97       	sbiw	r24, 0x00	; 0
    3b06:	59 f0       	breq	.+22     	; 0x3b1e <hih8120_wakeup+0x22>
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	70 e0       	ldi	r23, 0x00	; 0
    3b0e:	0e 94 14 29 	call	0x5228	; 0x5228 <twiTransmit>
    3b12:	84 30       	cpi	r24, 0x04	; 4
    3b14:	31 f4       	brne	.+12     	; 0x3b22 <hih8120_wakeup+0x26>
    3b16:	10 92 bf 17 	sts	0x17BF, r1	; 0x8017bf <_measuringIsReady>
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	08 95       	ret
    3b1e:	82 e0       	ldi	r24, 0x02	; 2
    3b20:	08 95       	ret
    3b22:	83 e0       	ldi	r24, 0x03	; 3
    3b24:	08 95       	ret

00003b26 <hih8120_measure>:
    3b26:	80 91 c0 17 	lds	r24, 0x17C0	; 0x8017c0 <_hih8120Handler>
    3b2a:	90 91 c1 17 	lds	r25, 0x17C1	; 0x8017c1 <_hih8120Handler+0x1>
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	39 f0       	breq	.+14     	; 0x3b40 <hih8120_measure+0x1a>
    3b32:	64 e0       	ldi	r22, 0x04	; 4
    3b34:	0e 94 60 29 	call	0x52c0	; 0x52c0 <twiReceive>
    3b38:	85 30       	cpi	r24, 0x05	; 5
    3b3a:	21 f0       	breq	.+8      	; 0x3b44 <hih8120_measure+0x1e>
    3b3c:	83 e0       	ldi	r24, 0x03	; 3
    3b3e:	08 95       	ret
    3b40:	82 e0       	ldi	r24, 0x02	; 2
    3b42:	08 95       	ret
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	08 95       	ret

00003b48 <hih8120_getHumidity>:
    3b48:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3b4c:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__floatunsisf>
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	48 ec       	ldi	r20, 0xC8	; 200
    3b5e:	52 e4       	ldi	r21, 0x42	; 66
    3b60:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__mulsf3>
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	38 ef       	ldi	r19, 0xF8	; 248
    3b68:	4f e7       	ldi	r20, 0x7F	; 127
    3b6a:	56 e4       	ldi	r21, 0x46	; 70
    3b6c:	0c 94 5a 2e 	jmp	0x5cb4	; 0x5cb4 <__divsf3>
    3b70:	08 95       	ret

00003b72 <hih8120_getHumidityPercent_x10>:
    3b72:	ea df       	rcall	.-44     	; 0x3b48 <hih8120_getHumidity>
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	40 e2       	ldi	r20, 0x20	; 32
    3b7a:	51 e4       	ldi	r21, 0x41	; 65
    3b7c:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__mulsf3>
    3b80:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__fixunssfsi>
    3b84:	cb 01       	movw	r24, r22
    3b86:	08 95       	ret

00003b88 <hih8120_getTemperature>:
    3b88:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3b8c:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3b90:	80 e0       	ldi	r24, 0x00	; 0
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__floatunsisf>
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	45 e2       	ldi	r20, 0x25	; 37
    3b9e:	53 e4       	ldi	r21, 0x43	; 67
    3ba0:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__mulsf3>
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	38 ef       	ldi	r19, 0xF8	; 248
    3ba8:	4f e7       	ldi	r20, 0x7F	; 127
    3baa:	56 e4       	ldi	r21, 0x46	; 70
    3bac:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__divsf3>
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e2       	ldi	r20, 0x20	; 32
    3bb6:	52 e4       	ldi	r21, 0x42	; 66
    3bb8:	0c 94 f5 2d 	jmp	0x5bea	; 0x5bea <__subsf3>
    3bbc:	08 95       	ret

00003bbe <hih8120_getTemperature_x10>:
    3bbe:	e4 df       	rcall	.-56     	; 0x3b88 <hih8120_getTemperature>
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	40 e2       	ldi	r20, 0x20	; 32
    3bc6:	51 e4       	ldi	r21, 0x41	; 65
    3bc8:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__mulsf3>
    3bcc:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <__fixsfsi>
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	08 95       	ret

00003bd4 <_serialCallBack>:
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	1f 92       	push	r1
    3bde:	1f 92       	push	r1
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	8c 01       	movw	r16, r24
    3be6:	19 82       	std	Y+1, r1	; 0x01
    3be8:	2d c0       	rjmp	.+90     	; 0x3c44 <_serialCallBack+0x70>
    3bea:	e0 91 f9 17 	lds	r30, 0x17F9	; 0x8017f9 <rec_buf_inp.2878>
    3bee:	ec 32       	cpi	r30, 0x2C	; 44
    3bf0:	50 f4       	brcc	.+20     	; 0x3c06 <_serialCallBack+0x32>
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	8e 0f       	add	r24, r30
    3bf6:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <rec_buf_inp.2878>
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	e5 5d       	subi	r30, 0xD5	; 213
    3bfe:	f7 4e       	sbci	r31, 0xE7	; 231
    3c00:	8a 81       	ldd	r24, Y+2	; 0x02
    3c02:	80 83       	st	Z, r24
    3c04:	02 c0       	rjmp	.+4      	; 0x3c0a <_serialCallBack+0x36>
    3c06:	10 92 f9 17 	sts	0x17F9, r1	; 0x8017f9 <rec_buf_inp.2878>
    3c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0c:	8a 30       	cpi	r24, 0x0A	; 10
    3c0e:	d1 f4       	brne	.+52     	; 0x3c44 <_serialCallBack+0x70>
    3c10:	40 91 f9 17 	lds	r20, 0x17F9	; 0x8017f9 <rec_buf_inp.2878>
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	fa 01       	movw	r30, r20
    3c18:	e7 5d       	subi	r30, 0xD7	; 215
    3c1a:	f7 4e       	sbci	r31, 0xE7	; 231
    3c1c:	10 82       	st	Z, r1
    3c1e:	41 50       	subi	r20, 0x01	; 1
    3c20:	51 09       	sbc	r21, r1
    3c22:	9e 01       	movw	r18, r28
    3c24:	2f 5f       	subi	r18, 0xFF	; 255
    3c26:	3f 4f       	sbci	r19, 0xFF	; 255
    3c28:	6b e2       	ldi	r22, 0x2B	; 43
    3c2a:	78 e1       	ldi	r23, 0x18	; 24
    3c2c:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <_serialReplyBufferHandle>
    3c30:	90 91 fd 17 	lds	r25, 0x17FD	; 0x8017fd <_serialReplyBufferHandle+0x1>
    3c34:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xStreamBufferSendFromISR>
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	81 11       	cpse	r24, r1
    3c3c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    3c40:	10 92 f9 17 	sts	0x17F9, r1	; 0x8017f9 <rec_buf_inp.2878>
    3c44:	be 01       	movw	r22, r28
    3c46:	6e 5f       	subi	r22, 0xFE	; 254
    3c48:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4a:	c8 01       	movw	r24, r16
    3c4c:	19 d6       	rcall	.+3122   	; 0x4880 <serial_getByte>
    3c4e:	88 23       	and	r24, r24
    3c50:	61 f2       	breq	.-104    	; 0x3bea <_serialCallBack+0x16>
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	1f 91       	pop	r17
    3c5c:	0f 91       	pop	r16
    3c5e:	08 95       	ret

00003c60 <_uploadMessage>:
    3c60:	0f 93       	push	r16
    3c62:	1f 93       	push	r17
    3c64:	cf 93       	push	r28
    3c66:	df 93       	push	r29
    3c68:	8c 01       	movw	r16, r24
    3c6a:	eb 01       	movw	r28, r22
    3c6c:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <_serialReplyBufferHandle>
    3c70:	90 91 fd 17 	lds	r25, 0x17FD	; 0x8017fd <_serialReplyBufferHandle+0x1>
    3c74:	0e 94 81 0b 	call	0x1702	; 0x1702 <xStreamBufferReset>
    3c78:	b8 01       	movw	r22, r16
    3c7a:	82 ec       	ldi	r24, 0xC2	; 194
    3c7c:	97 e1       	ldi	r25, 0x17	; 23
    3c7e:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcpy>
    3c82:	20 97       	sbiw	r28, 0x00	; 0
    3c84:	79 f0       	breq	.+30     	; 0x3ca4 <_uploadMessage+0x44>
    3c86:	e2 ec       	ldi	r30, 0xC2	; 194
    3c88:	f7 e1       	ldi	r31, 0x17	; 23
    3c8a:	01 90       	ld	r0, Z+
    3c8c:	00 20       	and	r0, r0
    3c8e:	e9 f7       	brne	.-6      	; 0x3c8a <_uploadMessage+0x2a>
    3c90:	31 97       	sbiw	r30, 0x01	; 1
    3c92:	80 e2       	ldi	r24, 0x20	; 32
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	91 83       	std	Z+1, r25	; 0x01
    3c98:	80 83       	st	Z, r24
    3c9a:	be 01       	movw	r22, r28
    3c9c:	82 ec       	ldi	r24, 0xC2	; 194
    3c9e:	97 e1       	ldi	r25, 0x17	; 23
    3ca0:	0e 94 4b 32 	call	0x6496	; 0x6496 <strcat>
    3ca4:	e2 ec       	ldi	r30, 0xC2	; 194
    3ca6:	f7 e1       	ldi	r31, 0x17	; 23
    3ca8:	df 01       	movw	r26, r30
    3caa:	0d 90       	ld	r0, X+
    3cac:	00 20       	and	r0, r0
    3cae:	e9 f7       	brne	.-6      	; 0x3caa <_uploadMessage+0x4a>
    3cb0:	11 97       	sbiw	r26, 0x01	; 1
    3cb2:	8d e0       	ldi	r24, 0x0D	; 13
    3cb4:	9a e0       	ldi	r25, 0x0A	; 10
    3cb6:	11 96       	adiw	r26, 0x01	; 1
    3cb8:	9c 93       	st	X, r25
    3cba:	8e 93       	st	-X, r24
    3cbc:	12 96       	adiw	r26, 0x02	; 2
    3cbe:	1c 92       	st	X, r1
    3cc0:	01 90       	ld	r0, Z+
    3cc2:	00 20       	and	r0, r0
    3cc4:	e9 f7       	brne	.-6      	; 0x3cc0 <_uploadMessage+0x60>
    3cc6:	31 97       	sbiw	r30, 0x01	; 1
    3cc8:	e2 5c       	subi	r30, 0xC2	; 194
    3cca:	f7 41       	sbci	r31, 0x17	; 23
    3ccc:	ae 2f       	mov	r26, r30
    3cce:	82 ec       	ldi	r24, 0xC2	; 194
    3cd0:	97 e1       	ldi	r25, 0x17	; 23
    3cd2:	ac 01       	movw	r20, r24
    3cd4:	6a 2f       	mov	r22, r26
    3cd6:	80 91 fe 17 	lds	r24, 0x17FE	; 0x8017fe <_rn2483_serial>
    3cda:	90 91 ff 17 	lds	r25, 0x17FF	; 0x8017ff <_rn2483_serial+0x1>
    3cde:	7b d5       	rcall	.+2806   	; 0x47d6 <serial_sendBytes>
    3ce0:	81 11       	cpse	r24, r1
    3ce2:	11 c0       	rjmp	.+34     	; 0x3d06 <_uploadMessage+0xa6>
    3ce4:	08 e2       	ldi	r16, 0x28	; 40
    3ce6:	15 e0       	ldi	r17, 0x05	; 5
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	4d e2       	ldi	r20, 0x2D	; 45
    3cee:	50 e0       	ldi	r21, 0x00	; 0
    3cf0:	65 e8       	ldi	r22, 0x85	; 133
    3cf2:	78 e1       	ldi	r23, 0x18	; 24
    3cf4:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <_serialReplyBufferHandle>
    3cf8:	90 91 fd 17 	lds	r25, 0x17FD	; 0x8017fd <_serialReplyBufferHandle+0x1>
    3cfc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xStreamBufferReceive>
    3d00:	85 e8       	ldi	r24, 0x85	; 133
    3d02:	98 e1       	ldi	r25, 0x18	; 24
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <_uploadMessage+0xaa>
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	df 91       	pop	r29
    3d0c:	cf 91       	pop	r28
    3d0e:	1f 91       	pop	r17
    3d10:	0f 91       	pop	r16
    3d12:	08 95       	ret

00003d14 <_reply2ReturnCode>:
    3d14:	2f 92       	push	r2
    3d16:	3f 92       	push	r3
    3d18:	4f 92       	push	r4
    3d1a:	5f 92       	push	r5
    3d1c:	6f 92       	push	r6
    3d1e:	7f 92       	push	r7
    3d20:	8f 92       	push	r8
    3d22:	9f 92       	push	r9
    3d24:	af 92       	push	r10
    3d26:	bf 92       	push	r11
    3d28:	cf 92       	push	r12
    3d2a:	df 92       	push	r13
    3d2c:	ef 92       	push	r14
    3d2e:	ff 92       	push	r15
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	5c 01       	movw	r10, r24
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	01 90       	ld	r0, Z+
    3d3e:	00 20       	and	r0, r0
    3d40:	e9 f7       	brne	.-6      	; 0x3d3c <_reply2ReturnCode+0x28>
    3d42:	31 97       	sbiw	r30, 0x01	; 1
    3d44:	6f 01       	movw	r12, r30
    3d46:	c8 1a       	sub	r12, r24
    3d48:	d9 0a       	sbc	r13, r25
    3d4a:	5c 2c       	mov	r5, r12
    3d4c:	0f 2e       	mov	r0, r31
    3d4e:	f9 ec       	ldi	r31, 0xC9	; 201
    3d50:	8f 2e       	mov	r8, r31
    3d52:	f8 e0       	ldi	r31, 0x08	; 8
    3d54:	9f 2e       	mov	r9, r31
    3d56:	f0 2d       	mov	r31, r0
    3d58:	e1 2c       	mov	r14, r1
    3d5a:	f1 2c       	mov	r15, r1
    3d5c:	4c 2c       	mov	r4, r12
    3d5e:	37 01       	movw	r6, r14
    3d60:	f4 01       	movw	r30, r8
    3d62:	01 81       	ldd	r16, Z+1	; 0x01
    3d64:	12 81       	ldd	r17, Z+2	; 0x02
    3d66:	e8 01       	movw	r28, r16
    3d68:	09 90       	ld	r0, Y+
    3d6a:	00 20       	and	r0, r0
    3d6c:	e9 f7       	brne	.-6      	; 0x3d68 <_reply2ReturnCode+0x54>
    3d6e:	21 97       	sbiw	r28, 0x01	; 1
    3d70:	c0 1b       	sub	r28, r16
    3d72:	d1 0b       	sbc	r29, r17
    3d74:	3c 2e       	mov	r3, r28
    3d76:	f9 e0       	ldi	r31, 0x09	; 9
    3d78:	cf 16       	cp	r12, r31
    3d7a:	d1 04       	cpc	r13, r1
    3d7c:	58 f0       	brcs	.+22     	; 0x3d94 <_reply2ReturnCode+0x80>
    3d7e:	f4 01       	movw	r30, r8
    3d80:	20 80       	ld	r2, Z
    3d82:	fe e0       	ldi	r31, 0x0E	; 14
    3d84:	2f 12       	cpse	r2, r31
    3d86:	06 c0       	rjmp	.+12     	; 0x3d94 <_reply2ReturnCode+0x80>
    3d88:	b8 01       	movw	r22, r16
    3d8a:	c5 01       	movw	r24, r10
    3d8c:	0e 94 26 32 	call	0x644c	; 0x644c <strcasestr>
    3d90:	89 2b       	or	r24, r25
    3d92:	09 f5       	brne	.+66     	; 0x3dd6 <_reply2ReturnCode+0xc2>
    3d94:	44 2d       	mov	r20, r4
    3d96:	35 14       	cp	r3, r5
    3d98:	08 f4       	brcc	.+2      	; 0x3d9c <_reply2ReturnCode+0x88>
    3d9a:	4c 2f       	mov	r20, r28
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	b8 01       	movw	r22, r16
    3da0:	c5 01       	movw	r24, r10
    3da2:	0e 94 5d 32 	call	0x64ba	; 0x64ba <strncasecmp>
    3da6:	89 2b       	or	r24, r25
    3da8:	49 f4       	brne	.+18     	; 0x3dbc <_reply2ReturnCode+0xa8>
    3daa:	f3 01       	movw	r30, r6
    3dac:	ee 0f       	add	r30, r30
    3dae:	ff 1f       	adc	r31, r31
    3db0:	e6 0d       	add	r30, r6
    3db2:	f7 1d       	adc	r31, r7
    3db4:	e7 53       	subi	r30, 0x37	; 55
    3db6:	f7 4f       	sbci	r31, 0xF7	; 247
    3db8:	20 80       	ld	r2, Z
    3dba:	0d c0       	rjmp	.+26     	; 0x3dd6 <_reply2ReturnCode+0xc2>
    3dbc:	8f ef       	ldi	r24, 0xFF	; 255
    3dbe:	e8 1a       	sub	r14, r24
    3dc0:	f8 0a       	sbc	r15, r24
    3dc2:	e3 e0       	ldi	r30, 0x03	; 3
    3dc4:	8e 0e       	add	r8, r30
    3dc6:	91 1c       	adc	r9, r1
    3dc8:	f1 e1       	ldi	r31, 0x11	; 17
    3dca:	ef 16       	cp	r14, r31
    3dcc:	f1 04       	cpc	r15, r1
    3dce:	39 f6       	brne	.-114    	; 0x3d5e <_reply2ReturnCode+0x4a>
    3dd0:	68 94       	set
    3dd2:	22 24       	eor	r2, r2
    3dd4:	24 f8       	bld	r2, 4
    3dd6:	82 2d       	mov	r24, r2
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	1f 91       	pop	r17
    3dde:	0f 91       	pop	r16
    3de0:	ff 90       	pop	r15
    3de2:	ef 90       	pop	r14
    3de4:	df 90       	pop	r13
    3de6:	cf 90       	pop	r12
    3de8:	bf 90       	pop	r11
    3dea:	af 90       	pop	r10
    3dec:	9f 90       	pop	r9
    3dee:	8f 90       	pop	r8
    3df0:	7f 90       	pop	r7
    3df2:	6f 90       	pop	r6
    3df4:	5f 90       	pop	r5
    3df6:	4f 90       	pop	r4
    3df8:	3f 90       	pop	r3
    3dfa:	2f 90       	pop	r2
    3dfc:	08 95       	ret

00003dfe <_uploadMessageRc>:
    3dfe:	30 df       	rcall	.-416    	; 0x3c60 <_uploadMessage>
    3e00:	89 cf       	rjmp	.-238    	; 0x3d14 <_reply2ReturnCode>
    3e02:	08 95       	ret

00003e04 <lora_driver_flushBuffers>:
    3e04:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <_serialReplyBufferHandle>
    3e08:	90 91 fd 17 	lds	r25, 0x17FD	; 0x8017fd <_serialReplyBufferHandle+0x1>
    3e0c:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <xStreamBufferReset>
    3e10:	08 95       	ret

00003e12 <lora_driver_initialise>:
    3e12:	8f 92       	push	r8
    3e14:	9f 92       	push	r9
    3e16:	af 92       	push	r10
    3e18:	cf 92       	push	r12
    3e1a:	ef 92       	push	r14
    3e1c:	0f 93       	push	r16
    3e1e:	1f 93       	push	r17
    3e20:	cf 93       	push	r28
    3e22:	c8 2f       	mov	r28, r24
    3e24:	8b 01       	movw	r16, r22
    3e26:	41 e0       	ldi	r20, 0x01	; 1
    3e28:	60 e0       	ldi	r22, 0x00	; 0
    3e2a:	70 e0       	ldi	r23, 0x00	; 0
    3e2c:	88 ec       	ldi	r24, 0xC8	; 200
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	0e 94 4f 0b 	call	0x169e	; 0x169e <xStreamBufferGenericCreate>
    3e34:	90 93 fd 17 	sts	0x17FD, r25	; 0x8017fd <_serialReplyBufferHandle+0x1>
    3e38:	80 93 fc 17 	sts	0x17FC, r24	; 0x8017fc <_serialReplyBufferHandle>
    3e3c:	10 93 fb 17 	sts	0x17FB, r17	; 0x8017fb <_downlinkMessageBuffer+0x1>
    3e40:	00 93 fa 17 	sts	0x17FA, r16	; 0x8017fa <_downlinkMessageBuffer>
    3e44:	0f 2e       	mov	r0, r31
    3e46:	fa ee       	ldi	r31, 0xEA	; 234
    3e48:	8f 2e       	mov	r8, r31
    3e4a:	fd e1       	ldi	r31, 0x1D	; 29
    3e4c:	9f 2e       	mov	r9, r31
    3e4e:	f0 2d       	mov	r31, r0
    3e50:	68 94       	set
    3e52:	aa 24       	eor	r10, r10
    3e54:	a6 f8       	bld	r10, 6
    3e56:	68 94       	set
    3e58:	cc 24       	eor	r12, r12
    3e5a:	c6 f8       	bld	r12, 6
    3e5c:	e1 2c       	mov	r14, r1
    3e5e:	00 e0       	ldi	r16, 0x00	; 0
    3e60:	23 e0       	ldi	r18, 0x03	; 3
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	51 ee       	ldi	r21, 0xE1	; 225
    3e66:	60 e0       	ldi	r22, 0x00	; 0
    3e68:	70 e0       	ldi	r23, 0x00	; 0
    3e6a:	8c 2f       	mov	r24, r28
    3e6c:	e3 d3       	rcall	.+1990   	; 0x4634 <serial_create>
    3e6e:	90 93 ff 17 	sts	0x17FF, r25	; 0x8017ff <_rn2483_serial+0x1>
    3e72:	80 93 fe 17 	sts	0x17FE, r24	; 0x8017fe <_rn2483_serial>
    3e76:	e7 e0       	ldi	r30, 0x07	; 7
    3e78:	f1 e0       	ldi	r31, 0x01	; 1
    3e7a:	80 81       	ld	r24, Z
    3e7c:	80 61       	ori	r24, 0x10	; 16
    3e7e:	80 83       	st	Z, r24
    3e80:	cf 91       	pop	r28
    3e82:	1f 91       	pop	r17
    3e84:	0f 91       	pop	r16
    3e86:	ef 90       	pop	r14
    3e88:	cf 90       	pop	r12
    3e8a:	af 90       	pop	r10
    3e8c:	9f 90       	pop	r9
    3e8e:	8f 90       	pop	r8
    3e90:	08 95       	ret

00003e92 <lora_driver_resetRn2483>:
    3e92:	88 23       	and	r24, r24
    3e94:	31 f0       	breq	.+12     	; 0x3ea2 <lora_driver_resetRn2483+0x10>
    3e96:	e8 e0       	ldi	r30, 0x08	; 8
    3e98:	f1 e0       	ldi	r31, 0x01	; 1
    3e9a:	80 81       	ld	r24, Z
    3e9c:	8f 7e       	andi	r24, 0xEF	; 239
    3e9e:	80 83       	st	Z, r24
    3ea0:	08 95       	ret
    3ea2:	e8 e0       	ldi	r30, 0x08	; 8
    3ea4:	f1 e0       	ldi	r31, 0x01	; 1
    3ea6:	80 81       	ld	r24, Z
    3ea8:	80 61       	ori	r24, 0x10	; 16
    3eaa:	80 83       	st	Z, r24
    3eac:	08 95       	ret

00003eae <lora_driver_rn2483FactoryReset>:
    3eae:	60 e0       	ldi	r22, 0x00	; 0
    3eb0:	70 e0       	ldi	r23, 0x00	; 0
    3eb2:	8f e4       	ldi	r24, 0x4F	; 79
    3eb4:	96 e0       	ldi	r25, 0x06	; 6
    3eb6:	d4 de       	rcall	.-600    	; 0x3c60 <_uploadMessage>
    3eb8:	e5 e8       	ldi	r30, 0x85	; 133
    3eba:	f8 e1       	ldi	r31, 0x18	; 24
    3ebc:	01 90       	ld	r0, Z+
    3ebe:	00 20       	and	r0, r0
    3ec0:	e9 f7       	brne	.-6      	; 0x3ebc <lora_driver_rn2483FactoryReset+0xe>
    3ec2:	31 97       	sbiw	r30, 0x01	; 1
    3ec4:	e5 58       	subi	r30, 0x85	; 133
    3ec6:	f8 41       	sbci	r31, 0x18	; 24
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	75 97       	sbiw	r30, 0x15	; 21
    3ecc:	08 f0       	brcs	.+2      	; 0x3ed0 <lora_driver_rn2483FactoryReset+0x22>
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	08 95       	ret

00003ed2 <lora_driver_getRn2483Hweui>:
    3ed2:	cf 93       	push	r28
    3ed4:	df 93       	push	r29
    3ed6:	ec 01       	movw	r28, r24
    3ed8:	60 e0       	ldi	r22, 0x00	; 0
    3eda:	70 e0       	ldi	r23, 0x00	; 0
    3edc:	80 e6       	ldi	r24, 0x60	; 96
    3ede:	96 e0       	ldi	r25, 0x06	; 6
    3ee0:	bf de       	rcall	.-642    	; 0x3c60 <_uploadMessage>
    3ee2:	e5 e8       	ldi	r30, 0x85	; 133
    3ee4:	f8 e1       	ldi	r31, 0x18	; 24
    3ee6:	01 90       	ld	r0, Z+
    3ee8:	00 20       	and	r0, r0
    3eea:	e9 f7       	brne	.-6      	; 0x3ee6 <lora_driver_getRn2483Hweui+0x14>
    3eec:	e6 59       	subi	r30, 0x96	; 150
    3eee:	f8 41       	sbci	r31, 0x18	; 24
    3ef0:	39 f4       	brne	.+14     	; 0x3f00 <lora_driver_getRn2483Hweui+0x2e>
    3ef2:	65 e8       	ldi	r22, 0x85	; 133
    3ef4:	78 e1       	ldi	r23, 0x18	; 24
    3ef6:	ce 01       	movw	r24, r28
    3ef8:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcpy>
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	02 c0       	rjmp	.+4      	; 0x3f04 <lora_driver_getRn2483Hweui+0x32>
    3f00:	18 82       	st	Y, r1
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	08 95       	ret

00003f0a <lora_driver_setDeviceIdentifier>:
    3f0a:	fc 01       	movw	r30, r24
    3f0c:	01 90       	ld	r0, Z+
    3f0e:	00 20       	and	r0, r0
    3f10:	e9 f7       	brne	.-6      	; 0x3f0c <lora_driver_setDeviceIdentifier+0x2>
    3f12:	9f 01       	movw	r18, r30
    3f14:	21 51       	subi	r18, 0x11	; 17
    3f16:	31 09       	sbc	r19, r1
    3f18:	28 17       	cp	r18, r24
    3f1a:	39 07       	cpc	r19, r25
    3f1c:	29 f4       	brne	.+10     	; 0x3f28 <lora_driver_setDeviceIdentifier+0x1e>
    3f1e:	bc 01       	movw	r22, r24
    3f20:	8e e8       	ldi	r24, 0x8E	; 142
    3f22:	96 e0       	ldi	r25, 0x06	; 6
    3f24:	6c cf       	rjmp	.-296    	; 0x3dfe <_uploadMessageRc>
    3f26:	08 95       	ret
    3f28:	89 e0       	ldi	r24, 0x09	; 9
    3f2a:	08 95       	ret

00003f2c <lora_driver_setApplicationIdentifier>:
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	01 90       	ld	r0, Z+
    3f30:	00 20       	and	r0, r0
    3f32:	e9 f7       	brne	.-6      	; 0x3f2e <lora_driver_setApplicationIdentifier+0x2>
    3f34:	9f 01       	movw	r18, r30
    3f36:	21 51       	subi	r18, 0x11	; 17
    3f38:	31 09       	sbc	r19, r1
    3f3a:	28 17       	cp	r18, r24
    3f3c:	39 07       	cpc	r19, r25
    3f3e:	29 f4       	brne	.+10     	; 0x3f4a <lora_driver_setApplicationIdentifier+0x1e>
    3f40:	bc 01       	movw	r22, r24
    3f42:	8d e9       	ldi	r24, 0x9D	; 157
    3f44:	96 e0       	ldi	r25, 0x06	; 6
    3f46:	5b cf       	rjmp	.-330    	; 0x3dfe <_uploadMessageRc>
    3f48:	08 95       	ret
    3f4a:	89 e0       	ldi	r24, 0x09	; 9
    3f4c:	08 95       	ret

00003f4e <lora_driver_setApplicationKey>:
    3f4e:	fc 01       	movw	r30, r24
    3f50:	01 90       	ld	r0, Z+
    3f52:	00 20       	and	r0, r0
    3f54:	e9 f7       	brne	.-6      	; 0x3f50 <lora_driver_setApplicationKey+0x2>
    3f56:	9f 01       	movw	r18, r30
    3f58:	21 52       	subi	r18, 0x21	; 33
    3f5a:	31 09       	sbc	r19, r1
    3f5c:	28 17       	cp	r18, r24
    3f5e:	39 07       	cpc	r19, r25
    3f60:	29 f4       	brne	.+10     	; 0x3f6c <lora_driver_setApplicationKey+0x1e>
    3f62:	bc 01       	movw	r22, r24
    3f64:	8c ea       	ldi	r24, 0xAC	; 172
    3f66:	96 e0       	ldi	r25, 0x06	; 6
    3f68:	4a cf       	rjmp	.-364    	; 0x3dfe <_uploadMessageRc>
    3f6a:	08 95       	ret
    3f6c:	89 e0       	ldi	r24, 0x09	; 9
    3f6e:	08 95       	ret

00003f70 <lora_driver_saveMac>:
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	70 e0       	ldi	r23, 0x00	; 0
    3f74:	8b ee       	ldi	r24, 0xEB	; 235
    3f76:	96 e0       	ldi	r25, 0x06	; 6
    3f78:	42 cf       	rjmp	.-380    	; 0x3dfe <_uploadMessageRc>
    3f7a:	08 95       	ret

00003f7c <lora_driver_join>:
    3f7c:	0f 93       	push	r16
    3f7e:	1f 93       	push	r17
    3f80:	e8 2f       	mov	r30, r24
    3f82:	f0 e0       	ldi	r31, 0x00	; 0
    3f84:	ee 0f       	add	r30, r30
    3f86:	ff 1f       	adc	r31, r31
    3f88:	eb 53       	subi	r30, 0x3B	; 59
    3f8a:	f7 4f       	sbci	r31, 0xF7	; 247
    3f8c:	60 81       	ld	r22, Z
    3f8e:	71 81       	ldd	r23, Z+1	; 0x01
    3f90:	84 ef       	ldi	r24, 0xF4	; 244
    3f92:	96 e0       	ldi	r25, 0x06	; 6
    3f94:	34 df       	rcall	.-408    	; 0x3dfe <_uploadMessageRc>
    3f96:	81 11       	cpse	r24, r1
    3f98:	14 c0       	rjmp	.+40     	; 0x3fc2 <lora_driver_join+0x46>
    3f9a:	08 e2       	ldi	r16, 0x28	; 40
    3f9c:	15 e0       	ldi	r17, 0x05	; 5
    3f9e:	20 e0       	ldi	r18, 0x00	; 0
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	4d e2       	ldi	r20, 0x2D	; 45
    3fa4:	50 e0       	ldi	r21, 0x00	; 0
    3fa6:	65 e8       	ldi	r22, 0x85	; 133
    3fa8:	78 e1       	ldi	r23, 0x18	; 24
    3faa:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <_serialReplyBufferHandle>
    3fae:	90 91 fd 17 	lds	r25, 0x17FD	; 0x8017fd <_serialReplyBufferHandle+0x1>
    3fb2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xStreamBufferReceive>
    3fb6:	88 23       	and	r24, r24
    3fb8:	21 f0       	breq	.+8      	; 0x3fc2 <lora_driver_join+0x46>
    3fba:	85 e8       	ldi	r24, 0x85	; 133
    3fbc:	98 e1       	ldi	r25, 0x18	; 24
    3fbe:	aa de       	rcall	.-684    	; 0x3d14 <_reply2ReturnCode>
    3fc0:	03 c0       	rjmp	.+6      	; 0x3fc8 <lora_driver_join+0x4c>
    3fc2:	85 e8       	ldi	r24, 0x85	; 133
    3fc4:	98 e1       	ldi	r25, 0x18	; 24
    3fc6:	a6 de       	rcall	.-692    	; 0x3d14 <_reply2ReturnCode>
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	08 95       	ret

00003fce <lora_driver_sendUploadMessage>:
    3fce:	0f 93       	push	r16
    3fd0:	1f 93       	push	r17
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	1f 92       	push	r1
    3fd8:	cd b7       	in	r28, 0x3d	; 61
    3fda:	de b7       	in	r29, 0x3e	; 62
    3fdc:	db 01       	movw	r26, r22
    3fde:	11 96       	adiw	r26, 0x01	; 1
    3fe0:	9c 91       	ld	r25, X
    3fe2:	11 97       	sbiw	r26, 0x01	; 1
    3fe4:	95 31       	cpi	r25, 0x15	; 21
    3fe6:	08 f0       	brcs	.+2      	; 0x3fea <lora_driver_sendUploadMessage+0x1c>
    3fe8:	b4 c0       	rjmp	.+360    	; 0x4152 <lora_driver_sendUploadMessage+0x184>
    3fea:	99 23       	and	r25, r25
    3fec:	81 f1       	breq	.+96     	; 0x404e <lora_driver_sendUploadMessage+0x80>
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	70 e0       	ldi	r23, 0x00	; 0
    3ff2:	27 2f       	mov	r18, r23
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	46 2f       	mov	r20, r22
    3ff8:	50 e0       	ldi	r21, 0x00	; 0
    3ffa:	fd 01       	movw	r30, r26
    3ffc:	e4 0f       	add	r30, r20
    3ffe:	f5 1f       	adc	r31, r21
    4000:	92 81       	ldd	r25, Z+2	; 0x02
    4002:	92 95       	swap	r25
    4004:	9f 70       	andi	r25, 0x0F	; 15
    4006:	9a 30       	cpi	r25, 0x0A	; 10
    4008:	10 f0       	brcs	.+4      	; 0x400e <lora_driver_sendUploadMessage+0x40>
    400a:	99 5c       	subi	r25, 0xC9	; 201
    400c:	01 c0       	rjmp	.+2      	; 0x4010 <lora_driver_sendUploadMessage+0x42>
    400e:	90 5d       	subi	r25, 0xD0	; 208
    4010:	f9 01       	movw	r30, r18
    4012:	ea 5e       	subi	r30, 0xEA	; 234
    4014:	f7 4e       	sbci	r31, 0xE7	; 231
    4016:	90 83       	st	Z, r25
    4018:	2f 5f       	subi	r18, 0xFF	; 255
    401a:	3f 4f       	sbci	r19, 0xFF	; 255
    401c:	fd 01       	movw	r30, r26
    401e:	e4 0f       	add	r30, r20
    4020:	f5 1f       	adc	r31, r21
    4022:	92 81       	ldd	r25, Z+2	; 0x02
    4024:	9f 70       	andi	r25, 0x0F	; 15
    4026:	49 2f       	mov	r20, r25
    4028:	50 e0       	ldi	r21, 0x00	; 0
    402a:	4a 30       	cpi	r20, 0x0A	; 10
    402c:	51 05       	cpc	r21, r1
    402e:	14 f0       	brlt	.+4      	; 0x4034 <lora_driver_sendUploadMessage+0x66>
    4030:	99 5c       	subi	r25, 0xC9	; 201
    4032:	01 c0       	rjmp	.+2      	; 0x4036 <lora_driver_sendUploadMessage+0x68>
    4034:	90 5d       	subi	r25, 0xD0	; 208
    4036:	f9 01       	movw	r30, r18
    4038:	ea 5e       	subi	r30, 0xEA	; 234
    403a:	f7 4e       	sbci	r31, 0xE7	; 231
    403c:	90 83       	st	Z, r25
    403e:	7e 5f       	subi	r23, 0xFE	; 254
    4040:	6f 5f       	subi	r22, 0xFF	; 255
    4042:	11 96       	adiw	r26, 0x01	; 1
    4044:	9c 91       	ld	r25, X
    4046:	11 97       	sbiw	r26, 0x01	; 1
    4048:	69 17       	cp	r22, r25
    404a:	98 f2       	brcs	.-90     	; 0x3ff2 <lora_driver_sendUploadMessage+0x24>
    404c:	01 c0       	rjmp	.+2      	; 0x4050 <lora_driver_sendUploadMessage+0x82>
    404e:	70 e0       	ldi	r23, 0x00	; 0
    4050:	e7 2f       	mov	r30, r23
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	ea 5e       	subi	r30, 0xEA	; 234
    4056:	f7 4e       	sbci	r31, 0xE7	; 231
    4058:	10 82       	st	Z, r1
    405a:	4c 91       	ld	r20, X
    405c:	81 11       	cpse	r24, r1
    405e:	03 c0       	rjmp	.+6      	; 0x4066 <lora_driver_sendUploadMessage+0x98>
    4060:	8d ef       	ldi	r24, 0xFD	; 253
    4062:	96 e0       	ldi	r25, 0x06	; 6
    4064:	02 c0       	rjmp	.+4      	; 0x406a <lora_driver_sendUploadMessage+0x9c>
    4066:	8f ef       	ldi	r24, 0xFF	; 255
    4068:	96 e0       	ldi	r25, 0x06	; 6
    406a:	26 e1       	ldi	r18, 0x16	; 22
    406c:	38 e1       	ldi	r19, 0x18	; 24
    406e:	3f 93       	push	r19
    4070:	2f 93       	push	r18
    4072:	1f 92       	push	r1
    4074:	4f 93       	push	r20
    4076:	9f 93       	push	r25
    4078:	8f 93       	push	r24
    407a:	83 e0       	ldi	r24, 0x03	; 3
    407c:	97 e0       	ldi	r25, 0x07	; 7
    407e:	9f 93       	push	r25
    4080:	8f 93       	push	r24
    4082:	88 e5       	ldi	r24, 0x58	; 88
    4084:	98 e1       	ldi	r25, 0x18	; 24
    4086:	9f 93       	push	r25
    4088:	8f 93       	push	r24
    408a:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>
    408e:	60 e0       	ldi	r22, 0x00	; 0
    4090:	70 e0       	ldi	r23, 0x00	; 0
    4092:	88 e5       	ldi	r24, 0x58	; 88
    4094:	98 e1       	ldi	r25, 0x18	; 24
    4096:	b3 de       	rcall	.-666    	; 0x3dfe <_uploadMessageRc>
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	81 11       	cpse	r24, r1
    40a4:	59 c0       	rjmp	.+178    	; 0x4158 <lora_driver_sendUploadMessage+0x18a>
    40a6:	08 e2       	ldi	r16, 0x28	; 40
    40a8:	15 e0       	ldi	r17, 0x05	; 5
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	4d e2       	ldi	r20, 0x2D	; 45
    40b0:	50 e0       	ldi	r21, 0x00	; 0
    40b2:	65 e8       	ldi	r22, 0x85	; 133
    40b4:	78 e1       	ldi	r23, 0x18	; 24
    40b6:	80 91 fc 17 	lds	r24, 0x17FC	; 0x8017fc <_serialReplyBufferHandle>
    40ba:	90 91 fd 17 	lds	r25, 0x17FD	; 0x8017fd <_serialReplyBufferHandle+0x1>
    40be:	0e 94 ba 0c 	call	0x1974	; 0x1974 <xStreamBufferReceive>
    40c2:	88 23       	and	r24, r24
    40c4:	09 f4       	brne	.+2      	; 0x40c8 <lora_driver_sendUploadMessage+0xfa>
    40c6:	47 c0       	rjmp	.+142    	; 0x4156 <lora_driver_sendUploadMessage+0x188>
    40c8:	85 e8       	ldi	r24, 0x85	; 133
    40ca:	98 e1       	ldi	r25, 0x18	; 24
    40cc:	23 de       	rcall	.-954    	; 0x3d14 <_reply2ReturnCode>
    40ce:	8e 30       	cpi	r24, 0x0E	; 14
    40d0:	09 f0       	breq	.+2      	; 0x40d4 <lora_driver_sendUploadMessage+0x106>
    40d2:	42 c0       	rjmp	.+132    	; 0x4158 <lora_driver_sendUploadMessage+0x18a>
    40d4:	87 e0       	ldi	r24, 0x07	; 7
    40d6:	89 83       	std	Y+1, r24	; 0x01
    40d8:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <_downlinkMessageBuffer>
    40dc:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <_downlinkMessageBuffer+0x1>
    40e0:	89 2b       	or	r24, r25
    40e2:	a9 f1       	breq	.+106    	; 0x414e <lora_driver_sendUploadMessage+0x180>
    40e4:	be 01       	movw	r22, r28
    40e6:	6f 5f       	subi	r22, 0xFF	; 255
    40e8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ea:	85 e8       	ldi	r24, 0x85	; 133
    40ec:	98 e1       	ldi	r25, 0x18	; 24
    40ee:	68 d1       	rcall	.+720    	; 0x43c0 <decode_port_no>
    40f0:	80 93 00 18 	sts	0x1800, r24	; 0x801800 <_downlinkPayload>
    40f4:	e9 81       	ldd	r30, Y+1	; 0x01
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	eb 57       	subi	r30, 0x7B	; 123
    40fa:	f7 4e       	sbci	r31, 0xE7	; 231
    40fc:	df 01       	movw	r26, r30
    40fe:	0d 90       	ld	r0, X+
    4100:	00 20       	and	r0, r0
    4102:	e9 f7       	brne	.-6      	; 0x40fe <lora_driver_sendUploadMessage+0x130>
    4104:	11 97       	sbiw	r26, 0x01	; 1
    4106:	ae 1b       	sub	r26, r30
    4108:	bf 0b       	sbc	r27, r31
    410a:	aa 23       	and	r26, r26
    410c:	91 f0       	breq	.+36     	; 0x4132 <lora_driver_sendUploadMessage+0x164>
    410e:	bb 27       	eor	r27, r27
    4110:	cd 01       	movw	r24, r26
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	9c 01       	movw	r18, r24
    4116:	12 f4       	brpl	.+4      	; 0x411c <lora_driver_sendUploadMessage+0x14e>
    4118:	2f 5f       	subi	r18, 0xFF	; 255
    411a:	3f 4f       	sbci	r19, 0xFF	; 255
    411c:	35 95       	asr	r19
    411e:	27 95       	ror	r18
    4120:	20 93 01 18 	sts	0x1801, r18	; 0x801801 <_downlinkPayload+0x1>
    4124:	af 01       	movw	r20, r30
    4126:	4f 5f       	subi	r20, 0xFF	; 255
    4128:	5f 4f       	sbci	r21, 0xFF	; 255
    412a:	64 e1       	ldi	r22, 0x14	; 20
    412c:	82 e0       	ldi	r24, 0x02	; 2
    412e:	98 e1       	ldi	r25, 0x18	; 24
    4130:	73 d1       	rcall	.+742    	; 0x4418 <decode_hexadecimal_string_bytes>
    4132:	01 e0       	ldi	r16, 0x01	; 1
    4134:	10 e0       	ldi	r17, 0x00	; 0
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	46 e1       	ldi	r20, 0x16	; 22
    413c:	50 e0       	ldi	r21, 0x00	; 0
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	78 e1       	ldi	r23, 0x18	; 24
    4142:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <_downlinkMessageBuffer>
    4146:	90 91 fb 17 	lds	r25, 0x17FB	; 0x8017fb <_downlinkMessageBuffer+0x1>
    414a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <xStreamBufferSend>
    414e:	8e e0       	ldi	r24, 0x0E	; 14
    4150:	03 c0       	rjmp	.+6      	; 0x4158 <lora_driver_sendUploadMessage+0x18a>
    4152:	84 e1       	ldi	r24, 0x14	; 20
    4154:	01 c0       	rjmp	.+2      	; 0x4158 <lora_driver_sendUploadMessage+0x18a>
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	0f 90       	pop	r0
    415a:	df 91       	pop	r29
    415c:	cf 91       	pop	r28
    415e:	1f 91       	pop	r17
    4160:	0f 91       	pop	r16
    4162:	08 95       	ret

00004164 <lora_driver_setAdaptiveDataRate>:
    4164:	81 30       	cpi	r24, 0x01	; 1
    4166:	19 f0       	breq	.+6      	; 0x416e <lora_driver_setAdaptiveDataRate+0xa>
    4168:	63 e1       	ldi	r22, 0x13	; 19
    416a:	77 e0       	ldi	r23, 0x07	; 7
    416c:	02 c0       	rjmp	.+4      	; 0x4172 <lora_driver_setAdaptiveDataRate+0xe>
    416e:	6c ee       	ldi	r22, 0xEC	; 236
    4170:	77 e0       	ldi	r23, 0x07	; 7
    4172:	87 e1       	ldi	r24, 0x17	; 23
    4174:	97 e0       	ldi	r25, 0x07	; 7
    4176:	43 ce       	rjmp	.-890    	; 0x3dfe <_uploadMessageRc>
    4178:	08 95       	ret

0000417a <lora_driver_setReceiveDelay>:
    417a:	9f 93       	push	r25
    417c:	8f 93       	push	r24
    417e:	88 e4       	ldi	r24, 0x48	; 72
    4180:	97 e0       	ldi	r25, 0x07	; 7
    4182:	9f 93       	push	r25
    4184:	8f 93       	push	r24
    4186:	88 e5       	ldi	r24, 0x58	; 88
    4188:	98 e1       	ldi	r25, 0x18	; 24
    418a:	9f 93       	push	r25
    418c:	8f 93       	push	r24
    418e:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	70 e0       	ldi	r23, 0x00	; 0
    4196:	88 e5       	ldi	r24, 0x58	; 88
    4198:	98 e1       	ldi	r25, 0x18	; 24
    419a:	31 de       	rcall	.-926    	; 0x3dfe <_uploadMessageRc>
    419c:	0f 90       	pop	r0
    419e:	0f 90       	pop	r0
    41a0:	0f 90       	pop	r0
    41a2:	0f 90       	pop	r0
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	08 95       	ret

000041aa <lora_driver_configureToEu868>:
    41aa:	2f 92       	push	r2
    41ac:	3f 92       	push	r3
    41ae:	4f 92       	push	r4
    41b0:	5f 92       	push	r5
    41b2:	6f 92       	push	r6
    41b4:	7f 92       	push	r7
    41b6:	8f 92       	push	r8
    41b8:	9f 92       	push	r9
    41ba:	af 92       	push	r10
    41bc:	bf 92       	push	r11
    41be:	cf 92       	push	r12
    41c0:	df 92       	push	r13
    41c2:	ef 92       	push	r14
    41c4:	ff 92       	push	r15
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	cd b7       	in	r28, 0x3d	; 61
    41d0:	de b7       	in	r29, 0x3e	; 62
    41d2:	a0 97       	sbiw	r28, 0x20	; 32
    41d4:	0f b6       	in	r0, 0x3f	; 63
    41d6:	f8 94       	cli
    41d8:	de bf       	out	0x3e, r29	; 62
    41da:	0f be       	out	0x3f, r0	; 63
    41dc:	cd bf       	out	0x3d, r28	; 61
    41de:	65 e7       	ldi	r22, 0x75	; 117
    41e0:	77 e0       	ldi	r23, 0x07	; 7
    41e2:	81 e8       	ldi	r24, 0x81	; 129
    41e4:	97 e0       	ldi	r25, 0x07	; 7
    41e6:	3c dd       	rcall	.-1416   	; 0x3c60 <_uploadMessage>
    41e8:	95 dd       	rcall	.-1238   	; 0x3d14 <_reply2ReturnCode>
    41ea:	81 11       	cpse	r24, r1
    41ec:	a3 c0       	rjmp	.+326    	; 0x4334 <lora_driver_configureToEu868+0x18a>
    41ee:	80 e2       	ldi	r24, 0x20	; 32
    41f0:	e2 e2       	ldi	r30, 0x22	; 34
    41f2:	f2 e0       	ldi	r31, 0x02	; 2
    41f4:	de 01       	movw	r26, r28
    41f6:	11 96       	adiw	r26, 0x01	; 1
    41f8:	01 90       	ld	r0, Z+
    41fa:	0d 92       	st	X+, r0
    41fc:	8a 95       	dec	r24
    41fe:	e1 f7       	brne	.-8      	; 0x41f8 <lora_driver_configureToEu868+0x4e>
    4200:	9e 01       	movw	r18, r28
    4202:	2f 5f       	subi	r18, 0xFF	; 255
    4204:	3f 4f       	sbci	r19, 0xFF	; 255
    4206:	69 01       	movw	r12, r18
    4208:	e1 2c       	mov	r14, r1
    420a:	f1 2c       	mov	r15, r1
    420c:	0f 2e       	mov	r0, r31
    420e:	fd e8       	ldi	r31, 0x8D	; 141
    4210:	af 2e       	mov	r10, r31
    4212:	f7 e0       	ldi	r31, 0x07	; 7
    4214:	bf 2e       	mov	r11, r31
    4216:	f0 2d       	mov	r31, r0
    4218:	08 e5       	ldi	r16, 0x58	; 88
    421a:	18 e1       	ldi	r17, 0x18	; 24
    421c:	0f 2e       	mov	r0, r31
    421e:	f6 ea       	ldi	r31, 0xA6	; 166
    4220:	4f 2e       	mov	r4, r31
    4222:	f7 e0       	ldi	r31, 0x07	; 7
    4224:	5f 2e       	mov	r5, r31
    4226:	f0 2d       	mov	r31, r0
    4228:	0f 2e       	mov	r0, r31
    422a:	fd eb       	ldi	r31, 0xBD	; 189
    422c:	8f 2e       	mov	r8, r31
    422e:	f7 e0       	ldi	r31, 0x07	; 7
    4230:	9f 2e       	mov	r9, r31
    4232:	f0 2d       	mov	r31, r0
    4234:	0f 2e       	mov	r0, r31
    4236:	f7 ed       	ldi	r31, 0xD7	; 215
    4238:	6f 2e       	mov	r6, r31
    423a:	f7 e0       	ldi	r31, 0x07	; 7
    423c:	7f 2e       	mov	r7, r31
    423e:	f0 2d       	mov	r31, r0
    4240:	3e 2c       	mov	r3, r14
    4242:	2f 2c       	mov	r2, r15
    4244:	ff 92       	push	r15
    4246:	ef 92       	push	r14
    4248:	bf 92       	push	r11
    424a:	af 92       	push	r10
    424c:	1f 93       	push	r17
    424e:	0f 93       	push	r16
    4250:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>
    4254:	60 e0       	ldi	r22, 0x00	; 0
    4256:	70 e0       	ldi	r23, 0x00	; 0
    4258:	c8 01       	movw	r24, r16
    425a:	02 dd       	rcall	.-1532   	; 0x3c60 <_uploadMessage>
    425c:	5b dd       	rcall	.-1354   	; 0x3d14 <_reply2ReturnCode>
    425e:	0f 90       	pop	r0
    4260:	0f 90       	pop	r0
    4262:	0f 90       	pop	r0
    4264:	0f 90       	pop	r0
    4266:	0f 90       	pop	r0
    4268:	0f 90       	pop	r0
    426a:	81 11       	cpse	r24, r1
    426c:	63 c0       	rjmp	.+198    	; 0x4334 <lora_driver_configureToEu868+0x18a>
    426e:	32 e0       	ldi	r19, 0x02	; 2
    4270:	3e 15       	cp	r19, r14
    4272:	e8 f4       	brcc	.+58     	; 0x42ae <lora_driver_configureToEu868+0x104>
    4274:	f6 01       	movw	r30, r12
    4276:	83 81       	ldd	r24, Z+3	; 0x03
    4278:	8f 93       	push	r24
    427a:	82 81       	ldd	r24, Z+2	; 0x02
    427c:	8f 93       	push	r24
    427e:	81 81       	ldd	r24, Z+1	; 0x01
    4280:	8f 93       	push	r24
    4282:	80 81       	ld	r24, Z
    4284:	8f 93       	push	r24
    4286:	ff 92       	push	r15
    4288:	ef 92       	push	r14
    428a:	5f 92       	push	r5
    428c:	4f 92       	push	r4
    428e:	1f 93       	push	r17
    4290:	0f 93       	push	r16
    4292:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>
    4296:	60 e0       	ldi	r22, 0x00	; 0
    4298:	70 e0       	ldi	r23, 0x00	; 0
    429a:	c8 01       	movw	r24, r16
    429c:	e1 dc       	rcall	.-1598   	; 0x3c60 <_uploadMessage>
    429e:	3a dd       	rcall	.-1420   	; 0x3d14 <_reply2ReturnCode>
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	81 11       	cpse	r24, r1
    42ac:	43 c0       	rjmp	.+134    	; 0x4334 <lora_driver_configureToEu868+0x18a>
    42ae:	2f 92       	push	r2
    42b0:	3f 92       	push	r3
    42b2:	9f 92       	push	r9
    42b4:	8f 92       	push	r8
    42b6:	1f 93       	push	r17
    42b8:	0f 93       	push	r16
    42ba:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>
    42be:	60 e0       	ldi	r22, 0x00	; 0
    42c0:	70 e0       	ldi	r23, 0x00	; 0
    42c2:	c8 01       	movw	r24, r16
    42c4:	cd dc       	rcall	.-1638   	; 0x3c60 <_uploadMessage>
    42c6:	26 dd       	rcall	.-1460   	; 0x3d14 <_reply2ReturnCode>
    42c8:	0f 90       	pop	r0
    42ca:	0f 90       	pop	r0
    42cc:	0f 90       	pop	r0
    42ce:	0f 90       	pop	r0
    42d0:	0f 90       	pop	r0
    42d2:	0f 90       	pop	r0
    42d4:	81 11       	cpse	r24, r1
    42d6:	2e c0       	rjmp	.+92     	; 0x4334 <lora_driver_configureToEu868+0x18a>
    42d8:	2f 92       	push	r2
    42da:	3f 92       	push	r3
    42dc:	7f 92       	push	r7
    42de:	6f 92       	push	r6
    42e0:	1f 93       	push	r17
    42e2:	0f 93       	push	r16
    42e4:	0e 94 00 33 	call	0x6600	; 0x6600 <sprintf>
    42e8:	60 e0       	ldi	r22, 0x00	; 0
    42ea:	70 e0       	ldi	r23, 0x00	; 0
    42ec:	c8 01       	movw	r24, r16
    42ee:	b8 dc       	rcall	.-1680   	; 0x3c60 <_uploadMessage>
    42f0:	11 dd       	rcall	.-1502   	; 0x3d14 <_reply2ReturnCode>
    42f2:	0f 90       	pop	r0
    42f4:	0f 90       	pop	r0
    42f6:	0f 90       	pop	r0
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	81 11       	cpse	r24, r1
    4300:	19 c0       	rjmp	.+50     	; 0x4334 <lora_driver_configureToEu868+0x18a>
    4302:	3f ef       	ldi	r19, 0xFF	; 255
    4304:	e3 1a       	sub	r14, r19
    4306:	f3 0a       	sbc	r15, r19
    4308:	84 e0       	ldi	r24, 0x04	; 4
    430a:	c8 0e       	add	r12, r24
    430c:	d1 1c       	adc	r13, r1
    430e:	98 e0       	ldi	r25, 0x08	; 8
    4310:	e9 16       	cp	r14, r25
    4312:	f1 04       	cpc	r15, r1
    4314:	09 f0       	breq	.+2      	; 0x4318 <lora_driver_configureToEu868+0x16e>
    4316:	94 cf       	rjmp	.-216    	; 0x4240 <lora_driver_configureToEu868+0x96>
    4318:	60 e0       	ldi	r22, 0x00	; 0
    431a:	70 e0       	ldi	r23, 0x00	; 0
    431c:	8f ee       	ldi	r24, 0xEF	; 239
    431e:	97 e0       	ldi	r25, 0x07	; 7
    4320:	9f dc       	rcall	.-1730   	; 0x3c60 <_uploadMessage>
    4322:	f8 dc       	rcall	.-1552   	; 0x3d14 <_reply2ReturnCode>
    4324:	81 11       	cpse	r24, r1
    4326:	06 c0       	rjmp	.+12     	; 0x4334 <lora_driver_configureToEu868+0x18a>
    4328:	60 e0       	ldi	r22, 0x00	; 0
    432a:	70 e0       	ldi	r23, 0x00	; 0
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	98 e0       	ldi	r25, 0x08	; 8
    4330:	97 dc       	rcall	.-1746   	; 0x3c60 <_uploadMessage>
    4332:	f0 dc       	rcall	.-1568   	; 0x3d14 <_reply2ReturnCode>
    4334:	a0 96       	adiw	r28, 0x20	; 32
    4336:	0f b6       	in	r0, 0x3f	; 63
    4338:	f8 94       	cli
    433a:	de bf       	out	0x3e, r29	; 62
    433c:	0f be       	out	0x3f, r0	; 63
    433e:	cd bf       	out	0x3d, r28	; 61
    4340:	df 91       	pop	r29
    4342:	cf 91       	pop	r28
    4344:	1f 91       	pop	r17
    4346:	0f 91       	pop	r16
    4348:	ff 90       	pop	r15
    434a:	ef 90       	pop	r14
    434c:	df 90       	pop	r13
    434e:	cf 90       	pop	r12
    4350:	bf 90       	pop	r11
    4352:	af 90       	pop	r10
    4354:	9f 90       	pop	r9
    4356:	8f 90       	pop	r8
    4358:	7f 90       	pop	r7
    435a:	6f 90       	pop	r6
    435c:	5f 90       	pop	r5
    435e:	4f 90       	pop	r4
    4360:	3f 90       	pop	r3
    4362:	2f 90       	pop	r2
    4364:	08 95       	ret

00004366 <lora_driver_setOtaaIdentity>:
    4366:	ef 92       	push	r14
    4368:	ff 92       	push	r15
    436a:	0f 93       	push	r16
    436c:	1f 93       	push	r17
    436e:	cf 93       	push	r28
    4370:	df 93       	push	r29
    4372:	ec 01       	movw	r28, r24
    4374:	8b 01       	movw	r16, r22
    4376:	7a 01       	movw	r14, r20
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	f4 de       	rcall	.-536    	; 0x4164 <lora_driver_setAdaptiveDataRate>
    437c:	81 11       	cpse	r24, r1
    437e:	0d c0       	rjmp	.+26     	; 0x439a <lora_driver_setOtaaIdentity+0x34>
    4380:	ce 01       	movw	r24, r28
    4382:	d4 dd       	rcall	.-1112   	; 0x3f2c <lora_driver_setApplicationIdentifier>
    4384:	81 11       	cpse	r24, r1
    4386:	09 c0       	rjmp	.+18     	; 0x439a <lora_driver_setOtaaIdentity+0x34>
    4388:	c8 01       	movw	r24, r16
    438a:	e1 dd       	rcall	.-1086   	; 0x3f4e <lora_driver_setApplicationKey>
    438c:	81 11       	cpse	r24, r1
    438e:	05 c0       	rjmp	.+10     	; 0x439a <lora_driver_setOtaaIdentity+0x34>
    4390:	c7 01       	movw	r24, r14
    4392:	bb dd       	rcall	.-1162   	; 0x3f0a <lora_driver_setDeviceIdentifier>
    4394:	81 11       	cpse	r24, r1
    4396:	01 c0       	rjmp	.+2      	; 0x439a <lora_driver_setOtaaIdentity+0x34>
    4398:	eb dd       	rcall	.-1066   	; 0x3f70 <lora_driver_saveMac>
    439a:	df 91       	pop	r29
    439c:	cf 91       	pop	r28
    439e:	1f 91       	pop	r17
    43a0:	0f 91       	pop	r16
    43a2:	ff 90       	pop	r15
    43a4:	ef 90       	pop	r14
    43a6:	08 95       	ret

000043a8 <lora_driver_mapReturnCodeToText>:
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	fc 01       	movw	r30, r24
    43ac:	ee 0f       	add	r30, r30
    43ae:	ff 1f       	adc	r31, r31
    43b0:	8e 0f       	add	r24, r30
    43b2:	9f 1f       	adc	r25, r31
    43b4:	fc 01       	movw	r30, r24
    43b6:	e7 53       	subi	r30, 0x37	; 55
    43b8:	f7 4f       	sbci	r31, 0xF7	; 247
    43ba:	81 81       	ldd	r24, Z+1	; 0x01
    43bc:	92 81       	ldd	r25, Z+2	; 0x02
    43be:	08 95       	ret

000043c0 <decode_port_no>:
    43c0:	dc 01       	movw	r26, r24
    43c2:	00 97       	sbiw	r24, 0x00	; 0
    43c4:	29 f1       	breq	.+74     	; 0x4410 <decode_port_no+0x50>
    43c6:	fb 01       	movw	r30, r22
    43c8:	20 81       	ld	r18, Z
    43ca:	fc 01       	movw	r30, r24
    43cc:	01 90       	ld	r0, Z+
    43ce:	00 20       	and	r0, r0
    43d0:	e9 f7       	brne	.-6      	; 0x43cc <decode_port_no+0xc>
    43d2:	31 97       	sbiw	r30, 0x01	; 1
    43d4:	e8 1b       	sub	r30, r24
    43d6:	f9 0b       	sbc	r31, r25
    43d8:	82 2f       	mov	r24, r18
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	e8 17       	cp	r30, r24
    43de:	f9 07       	cpc	r31, r25
    43e0:	c8 f0       	brcs	.+50     	; 0x4414 <decode_port_no+0x54>
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	08 c0       	rjmp	.+16     	; 0x43f6 <decode_port_no+0x36>
    43e6:	88 0f       	add	r24, r24
    43e8:	38 2f       	mov	r19, r24
    43ea:	33 0f       	add	r19, r19
    43ec:	33 0f       	add	r19, r19
    43ee:	83 0f       	add	r24, r19
    43f0:	80 53       	subi	r24, 0x30	; 48
    43f2:	89 0f       	add	r24, r25
    43f4:	2f 5f       	subi	r18, 0xFF	; 255
    43f6:	fd 01       	movw	r30, r26
    43f8:	e2 0f       	add	r30, r18
    43fa:	f1 1d       	adc	r31, r1
    43fc:	90 81       	ld	r25, Z
    43fe:	30 ed       	ldi	r19, 0xD0	; 208
    4400:	39 0f       	add	r19, r25
    4402:	3a 30       	cpi	r19, 0x0A	; 10
    4404:	10 f4       	brcc	.+4      	; 0x440a <decode_port_no+0x4a>
    4406:	91 11       	cpse	r25, r1
    4408:	ee cf       	rjmp	.-36     	; 0x43e6 <decode_port_no+0x26>
    440a:	fb 01       	movw	r30, r22
    440c:	20 83       	st	Z, r18
    440e:	08 95       	ret
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	08 95       	ret
    4414:	80 e0       	ldi	r24, 0x00	; 0
    4416:	08 95       	ret

00004418 <decode_hexadecimal_string_bytes>:
    4418:	0f 93       	push	r16
    441a:	1f 93       	push	r17
    441c:	cf 93       	push	r28
    441e:	df 93       	push	r29
    4420:	dc 01       	movw	r26, r24
    4422:	ea 01       	movw	r28, r20
    4424:	20 97       	sbiw	r28, 0x00	; 0
    4426:	e1 f1       	breq	.+120    	; 0x44a0 <decode_hexadecimal_string_bytes+0x88>
    4428:	fa 01       	movw	r30, r20
    442a:	01 90       	ld	r0, Z+
    442c:	00 20       	and	r0, r0
    442e:	e9 f7       	brne	.-6      	; 0x442a <decode_hexadecimal_string_bytes+0x12>
    4430:	31 97       	sbiw	r30, 0x01	; 1
    4432:	e4 1b       	sub	r30, r20
    4434:	f5 0b       	sbc	r31, r21
    4436:	32 97       	sbiw	r30, 0x02	; 2
    4438:	10 f5       	brcc	.+68     	; 0x447e <decode_hexadecimal_string_bytes+0x66>
    443a:	32 c0       	rjmp	.+100    	; 0x44a0 <decode_hexadecimal_string_bytes+0x88>
    443c:	8d 01       	movw	r16, r26
    443e:	04 0f       	add	r16, r20
    4440:	15 1f       	adc	r17, r21
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	ae 01       	movw	r20, r28
    4446:	42 0f       	add	r20, r18
    4448:	53 1f       	adc	r21, r19
    444a:	fa 01       	movw	r30, r20
    444c:	90 81       	ld	r25, Z
    444e:	91 34       	cpi	r25, 0x41	; 65
    4450:	28 f0       	brcs	.+10     	; 0x445c <decode_hexadecimal_string_bytes+0x44>
    4452:	97 53       	subi	r25, 0x37	; 55
    4454:	59 2f       	mov	r21, r25
    4456:	52 95       	swap	r21
    4458:	50 7f       	andi	r21, 0xF0	; 240
    445a:	03 c0       	rjmp	.+6      	; 0x4462 <decode_hexadecimal_string_bytes+0x4a>
    445c:	59 2f       	mov	r21, r25
    445e:	52 95       	swap	r21
    4460:	50 7f       	andi	r21, 0xF0	; 240
    4462:	2c 0f       	add	r18, r28
    4464:	3d 1f       	adc	r19, r29
    4466:	f9 01       	movw	r30, r18
    4468:	91 81       	ldd	r25, Z+1	; 0x01
    446a:	91 34       	cpi	r25, 0x41	; 65
    446c:	10 f0       	brcs	.+4      	; 0x4472 <decode_hexadecimal_string_bytes+0x5a>
    446e:	97 53       	subi	r25, 0x37	; 55
    4470:	01 c0       	rjmp	.+2      	; 0x4474 <decode_hexadecimal_string_bytes+0x5c>
    4472:	90 53       	subi	r25, 0x30	; 48
    4474:	95 0f       	add	r25, r21
    4476:	f8 01       	movw	r30, r16
    4478:	90 83       	st	Z, r25
    447a:	8f 5f       	subi	r24, 0xFF	; 255
    447c:	01 c0       	rjmp	.+2      	; 0x4480 <decode_hexadecimal_string_bytes+0x68>
    447e:	80 e0       	ldi	r24, 0x00	; 0
    4480:	28 2f       	mov	r18, r24
    4482:	22 0f       	add	r18, r18
    4484:	48 2f       	mov	r20, r24
    4486:	50 e0       	ldi	r21, 0x00	; 0
    4488:	fe 01       	movw	r30, r28
    448a:	01 90       	ld	r0, Z+
    448c:	00 20       	and	r0, r0
    448e:	e9 f7       	brne	.-6      	; 0x448a <decode_hexadecimal_string_bytes+0x72>
    4490:	31 97       	sbiw	r30, 0x01	; 1
    4492:	ec 1b       	sub	r30, r28
    4494:	fd 0b       	sbc	r31, r29
    4496:	4e 17       	cp	r20, r30
    4498:	5f 07       	cpc	r21, r31
    449a:	10 f4       	brcc	.+4      	; 0x44a0 <decode_hexadecimal_string_bytes+0x88>
    449c:	86 13       	cpse	r24, r22
    449e:	ce cf       	rjmp	.-100    	; 0x443c <decode_hexadecimal_string_bytes+0x24>
    44a0:	df 91       	pop	r29
    44a2:	cf 91       	pop	r28
    44a4:	1f 91       	pop	r17
    44a6:	0f 91       	pop	r16
    44a8:	08 95       	ret

000044aa <_serialCallBack>:
    44aa:	80 91 b5 18 	lds	r24, 0x18B5	; 0x8018b5 <crc_sum.1945>
    44ae:	86 0f       	add	r24, r22
    44b0:	80 93 b5 18 	sts	0x18B5, r24	; 0x8018b5 <crc_sum.1945>
    44b4:	90 91 b8 18 	lds	r25, 0x18B8	; 0x8018b8 <_mh_state>
    44b8:	91 30       	cpi	r25, 0x01	; 1
    44ba:	79 f0       	breq	.+30     	; 0x44da <_serialCallBack+0x30>
    44bc:	28 f0       	brcs	.+10     	; 0x44c8 <_serialCallBack+0x1e>
    44be:	92 30       	cpi	r25, 0x02	; 2
    44c0:	a9 f0       	breq	.+42     	; 0x44ec <_serialCallBack+0x42>
    44c2:	93 30       	cpi	r25, 0x03	; 3
    44c4:	19 f1       	breq	.+70     	; 0x450c <_serialCallBack+0x62>
    44c6:	08 95       	ret
    44c8:	6f 3f       	cpi	r22, 0xFF	; 255
    44ca:	09 f0       	breq	.+2      	; 0x44ce <_serialCallBack+0x24>
    44cc:	48 c0       	rjmp	.+144    	; 0x455e <_serialCallBack+0xb4>
    44ce:	10 92 b5 18 	sts	0x18B5, r1	; 0x8018b5 <crc_sum.1945>
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	80 93 b8 18 	sts	0x18B8, r24	; 0x8018b8 <_mh_state>
    44d8:	08 95       	ret
    44da:	66 38       	cpi	r22, 0x86	; 134
    44dc:	09 f0       	breq	.+2      	; 0x44e0 <_serialCallBack+0x36>
    44de:	3f c0       	rjmp	.+126    	; 0x455e <_serialCallBack+0xb4>
    44e0:	10 92 b4 18 	sts	0x18B4, r1	; 0x8018b4 <inDex.1943>
    44e4:	82 e0       	ldi	r24, 0x02	; 2
    44e6:	80 93 b8 18 	sts	0x18B8, r24	; 0x8018b8 <_mh_state>
    44ea:	08 95       	ret
    44ec:	e0 91 b4 18 	lds	r30, 0x18B4	; 0x8018b4 <inDex.1943>
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	8e 0f       	add	r24, r30
    44f4:	80 93 b4 18 	sts	0x18B4, r24	; 0x8018b4 <inDex.1943>
    44f8:	f0 e0       	ldi	r31, 0x00	; 0
    44fa:	ee 54       	subi	r30, 0x4E	; 78
    44fc:	f7 4e       	sbci	r31, 0xE7	; 231
    44fe:	60 83       	st	Z, r22
    4500:	82 30       	cpi	r24, 0x02	; 2
    4502:	69 f5       	brne	.+90     	; 0x455e <_serialCallBack+0xb4>
    4504:	83 e0       	ldi	r24, 0x03	; 3
    4506:	80 93 b8 18 	sts	0x18B8, r24	; 0x8018b8 <_mh_state>
    450a:	08 95       	ret
    450c:	90 91 b4 18 	lds	r25, 0x18B4	; 0x8018b4 <inDex.1943>
    4510:	21 e0       	ldi	r18, 0x01	; 1
    4512:	29 0f       	add	r18, r25
    4514:	20 93 b4 18 	sts	0x18B4, r18	; 0x8018b4 <inDex.1943>
    4518:	96 30       	cpi	r25, 0x06	; 6
    451a:	09 f5       	brne	.+66     	; 0x455e <_serialCallBack+0xb4>
    451c:	81 11       	cpse	r24, r1
    451e:	0e c0       	rjmp	.+28     	; 0x453c <_serialCallBack+0x92>
    4520:	e2 eb       	ldi	r30, 0xB2	; 178
    4522:	f8 e1       	ldi	r31, 0x18	; 24
    4524:	80 81       	ld	r24, Z
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	98 2f       	mov	r25, r24
    452a:	88 27       	eor	r24, r24
    452c:	21 81       	ldd	r18, Z+1	; 0x01
    452e:	82 0f       	add	r24, r18
    4530:	91 1d       	adc	r25, r1
    4532:	90 93 ba 18 	sts	0x18BA, r25	; 0x8018ba <_ppm+0x1>
    4536:	80 93 b9 18 	sts	0x18B9, r24	; 0x8018b9 <_ppm>
    453a:	04 c0       	rjmp	.+8      	; 0x4544 <_serialCallBack+0x9a>
    453c:	10 92 ba 18 	sts	0x18BA, r1	; 0x8018ba <_ppm+0x1>
    4540:	10 92 b9 18 	sts	0x18B9, r1	; 0x8018b9 <_ppm>
    4544:	10 92 b8 18 	sts	0x18B8, r1	; 0x8018b8 <_mh_state>
    4548:	e0 91 b6 18 	lds	r30, 0x18B6	; 0x8018b6 <_appCallBack>
    454c:	f0 91 b7 18 	lds	r31, 0x18B7	; 0x8018b7 <_appCallBack+0x1>
    4550:	30 97       	sbiw	r30, 0x00	; 0
    4552:	29 f0       	breq	.+10     	; 0x455e <_serialCallBack+0xb4>
    4554:	80 91 b9 18 	lds	r24, 0x18B9	; 0x8018b9 <_ppm>
    4558:	90 91 ba 18 	lds	r25, 0x18BA	; 0x8018ba <_ppm+0x1>
    455c:	19 95       	eicall
    455e:	08 95       	ret

00004560 <mh_z19_initialise>:
    4560:	8f 92       	push	r8
    4562:	9f 92       	push	r9
    4564:	af 92       	push	r10
    4566:	cf 92       	push	r12
    4568:	ef 92       	push	r14
    456a:	0f 93       	push	r16
    456c:	0f 2e       	mov	r0, r31
    456e:	f5 e5       	ldi	r31, 0x55	; 85
    4570:	8f 2e       	mov	r8, r31
    4572:	f2 e2       	ldi	r31, 0x22	; 34
    4574:	9f 2e       	mov	r9, r31
    4576:	f0 2d       	mov	r31, r0
    4578:	68 94       	set
    457a:	aa 24       	eor	r10, r10
    457c:	a4 f8       	bld	r10, 4
    457e:	68 94       	set
    4580:	cc 24       	eor	r12, r12
    4582:	c4 f8       	bld	r12, 4
    4584:	e1 2c       	mov	r14, r1
    4586:	00 e0       	ldi	r16, 0x00	; 0
    4588:	23 e0       	ldi	r18, 0x03	; 3
    458a:	40 e8       	ldi	r20, 0x80	; 128
    458c:	55 e2       	ldi	r21, 0x25	; 37
    458e:	60 e0       	ldi	r22, 0x00	; 0
    4590:	70 e0       	ldi	r23, 0x00	; 0
    4592:	50 d0       	rcall	.+160    	; 0x4634 <serial_create>
    4594:	90 93 bc 18 	sts	0x18BC, r25	; 0x8018bc <_serial+0x1>
    4598:	80 93 bb 18 	sts	0x18BB, r24	; 0x8018bb <_serial>
    459c:	0f 91       	pop	r16
    459e:	ef 90       	pop	r14
    45a0:	cf 90       	pop	r12
    45a2:	af 90       	pop	r10
    45a4:	9f 90       	pop	r9
    45a6:	8f 90       	pop	r8
    45a8:	08 95       	ret

000045aa <mh_z19_injectCallBack>:
    45aa:	90 93 b7 18 	sts	0x18B7, r25	; 0x8018b7 <_appCallBack+0x1>
    45ae:	80 93 b6 18 	sts	0x18B6, r24	; 0x8018b6 <_appCallBack>
    45b2:	08 95       	ret

000045b4 <mh_z19_takeMeassuring>:
    45b4:	cf 93       	push	r28
    45b6:	df 93       	push	r29
    45b8:	cd b7       	in	r28, 0x3d	; 61
    45ba:	de b7       	in	r29, 0x3e	; 62
    45bc:	29 97       	sbiw	r28, 0x09	; 9
    45be:	0f b6       	in	r0, 0x3f	; 63
    45c0:	f8 94       	cli
    45c2:	de bf       	out	0x3e, r29	; 62
    45c4:	0f be       	out	0x3f, r0	; 63
    45c6:	cd bf       	out	0x3d, r28	; 61
    45c8:	89 e0       	ldi	r24, 0x09	; 9
    45ca:	e2 e4       	ldi	r30, 0x42	; 66
    45cc:	f2 e0       	ldi	r31, 0x02	; 2
    45ce:	9e 01       	movw	r18, r28
    45d0:	2f 5f       	subi	r18, 0xFF	; 255
    45d2:	3f 4f       	sbci	r19, 0xFF	; 255
    45d4:	d9 01       	movw	r26, r18
    45d6:	01 90       	ld	r0, Z+
    45d8:	0d 92       	st	X+, r0
    45da:	8a 95       	dec	r24
    45dc:	e1 f7       	brne	.-8      	; 0x45d6 <mh_z19_takeMeassuring+0x22>
    45de:	10 92 ba 18 	sts	0x18BA, r1	; 0x8018ba <_ppm+0x1>
    45e2:	10 92 b9 18 	sts	0x18B9, r1	; 0x8018b9 <_ppm>
    45e6:	80 91 bb 18 	lds	r24, 0x18BB	; 0x8018bb <_serial>
    45ea:	90 91 bc 18 	lds	r25, 0x18BC	; 0x8018bc <_serial+0x1>
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	31 f0       	breq	.+12     	; 0x45fe <mh_z19_takeMeassuring+0x4a>
    45f2:	42 2f       	mov	r20, r18
    45f4:	53 2f       	mov	r21, r19
    45f6:	69 e0       	ldi	r22, 0x09	; 9
    45f8:	ee d0       	rcall	.+476    	; 0x47d6 <serial_sendBytes>
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	01 c0       	rjmp	.+2      	; 0x4600 <mh_z19_takeMeassuring+0x4c>
    45fe:	82 e0       	ldi	r24, 0x02	; 2
    4600:	29 96       	adiw	r28, 0x09	; 9
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	f8 94       	cli
    4606:	de bf       	out	0x3e, r29	; 62
    4608:	0f be       	out	0x3f, r0	; 63
    460a:	cd bf       	out	0x3d, r28	; 61
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	08 95       	ret

00004612 <mh_z19_getCo2Ppm>:
    4612:	20 91 b9 18 	lds	r18, 0x18B9	; 0x8018b9 <_ppm>
    4616:	30 91 ba 18 	lds	r19, 0x18BA	; 0x8018ba <_ppm+0x1>
    461a:	21 15       	cp	r18, r1
    461c:	31 05       	cpc	r19, r1
    461e:	29 f4       	brne	.+10     	; 0x462a <mh_z19_getCo2Ppm+0x18>
    4620:	fc 01       	movw	r30, r24
    4622:	11 82       	std	Z+1, r1	; 0x01
    4624:	10 82       	st	Z, r1
    4626:	81 e0       	ldi	r24, 0x01	; 1
    4628:	08 95       	ret
    462a:	fc 01       	movw	r30, r24
    462c:	31 83       	std	Z+1, r19	; 0x01
    462e:	20 83       	st	Z, r18
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	08 95       	ret

00004634 <serial_create>:
    4634:	2f 92       	push	r2
    4636:	3f 92       	push	r3
    4638:	4f 92       	push	r4
    463a:	5f 92       	push	r5
    463c:	6f 92       	push	r6
    463e:	7f 92       	push	r7
    4640:	8f 92       	push	r8
    4642:	9f 92       	push	r9
    4644:	af 92       	push	r10
    4646:	cf 92       	push	r12
    4648:	ef 92       	push	r14
    464a:	ff 92       	push	r15
    464c:	0f 93       	push	r16
    464e:	1f 93       	push	r17
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
    4654:	cd b7       	in	r28, 0x3d	; 61
    4656:	de b7       	in	r29, 0x3e	; 62
    4658:	f8 2e       	mov	r15, r24
    465a:	2a 01       	movw	r4, r20
    465c:	3b 01       	movw	r6, r22
    465e:	88 e0       	ldi	r24, 0x08	; 8
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	0e 94 0e 30 	call	0x601c	; 0x601c <malloc>
    4666:	8c 01       	movw	r16, r24
    4668:	8f 2d       	mov	r24, r15
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	fc 01       	movw	r30, r24
    466e:	ee 0f       	add	r30, r30
    4670:	ff 1f       	adc	r31, r31
    4672:	e3 54       	subi	r30, 0x43	; 67
    4674:	f7 4e       	sbci	r31, 0xE7	; 231
    4676:	11 83       	std	Z+1, r17	; 0x01
    4678:	00 83       	st	Z, r16
    467a:	01 15       	cp	r16, r1
    467c:	11 05       	cpc	r17, r1
    467e:	09 f4       	brne	.+2      	; 0x4682 <serial_create+0x4e>
    4680:	6d c0       	rjmp	.+218    	; 0x475c <serial_create+0x128>
    4682:	88 0f       	add	r24, r24
    4684:	99 1f       	adc	r25, r25
    4686:	fc 01       	movw	r30, r24
    4688:	e5 5f       	subi	r30, 0xF5	; 245
    468a:	fd 4f       	sbci	r31, 0xFD	; 253
    468c:	80 81       	ld	r24, Z
    468e:	91 81       	ldd	r25, Z+1	; 0x01
    4690:	d8 01       	movw	r26, r16
    4692:	8d 93       	st	X+, r24
    4694:	9c 93       	st	X, r25
    4696:	8c 2d       	mov	r24, r12
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	88 0f       	add	r24, r24
    469c:	99 1f       	adc	r25, r25
    469e:	88 0f       	add	r24, r24
    46a0:	99 1f       	adc	r25, r25
    46a2:	0e 94 0e 30 	call	0x601c	; 0x601c <malloc>
    46a6:	1c 01       	movw	r2, r24
    46a8:	86 e0       	ldi	r24, 0x06	; 6
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	0e 94 0e 30 	call	0x601c	; 0x601c <malloc>
    46b0:	7c 01       	movw	r14, r24
    46b2:	4c 2d       	mov	r20, r12
    46b4:	b1 01       	movw	r22, r2
    46b6:	f4 d6       	rcall	.+3560   	; 0x54a0 <fifo_init>
    46b8:	f8 01       	movw	r30, r16
    46ba:	f5 82       	std	Z+5, r15	; 0x05
    46bc:	e4 82       	std	Z+4, r14	; 0x04
    46be:	8a 2d       	mov	r24, r10
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	88 0f       	add	r24, r24
    46c4:	99 1f       	adc	r25, r25
    46c6:	88 0f       	add	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	0e 94 0e 30 	call	0x601c	; 0x601c <malloc>
    46ce:	1c 01       	movw	r2, r24
    46d0:	86 e0       	ldi	r24, 0x06	; 6
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	0e 94 0e 30 	call	0x601c	; 0x601c <malloc>
    46d8:	7c 01       	movw	r14, r24
    46da:	4a 2d       	mov	r20, r10
    46dc:	b1 01       	movw	r22, r2
    46de:	e0 d6       	rcall	.+3520   	; 0x54a0 <fifo_init>
    46e0:	d8 01       	movw	r26, r16
    46e2:	13 96       	adiw	r26, 0x03	; 3
    46e4:	fc 92       	st	X, r15
    46e6:	ee 92       	st	-X, r14
    46e8:	12 97       	sbiw	r26, 0x02	; 2
    46ea:	17 96       	adiw	r26, 0x07	; 7
    46ec:	9c 92       	st	X, r9
    46ee:	8e 92       	st	-X, r8
    46f0:	16 97       	sbiw	r26, 0x06	; 6
    46f2:	ff b6       	in	r15, 0x3f	; 63
    46f4:	f8 94       	cli
    46f6:	ed 91       	ld	r30, X+
    46f8:	fc 91       	ld	r31, X
    46fa:	11 97       	sbiw	r26, 0x01	; 1
    46fc:	36 97       	sbiw	r30, 0x06	; 6
    46fe:	80 81       	ld	r24, Z
    4700:	82 60       	ori	r24, 0x02	; 2
    4702:	80 83       	st	Z, r24
    4704:	8d 90       	ld	r8, X+
    4706:	9c 90       	ld	r9, X
    4708:	c3 01       	movw	r24, r6
    470a:	b2 01       	movw	r22, r4
    470c:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__floatunsisf>
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	40 e0       	ldi	r20, 0x00	; 0
    4716:	51 e4       	ldi	r21, 0x41	; 65
    4718:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__mulsf3>
    471c:	9b 01       	movw	r18, r22
    471e:	ac 01       	movw	r20, r24
    4720:	60 e0       	ldi	r22, 0x00	; 0
    4722:	74 e2       	ldi	r23, 0x24	; 36
    4724:	84 e7       	ldi	r24, 0x74	; 116
    4726:	9b e4       	ldi	r25, 0x4B	; 75
    4728:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__divsf3>
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	40 e8       	ldi	r20, 0x80	; 128
    4732:	5f e3       	ldi	r21, 0x3F	; 63
    4734:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <__subsf3>
    4738:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__fixunssfsi>
    473c:	f4 01       	movw	r30, r8
    473e:	32 97       	sbiw	r30, 0x02	; 2
    4740:	60 83       	st	Z, r22
    4742:	d8 01       	movw	r26, r16
    4744:	ed 91       	ld	r30, X+
    4746:	fc 91       	ld	r31, X
    4748:	11 97       	sbiw	r26, 0x01	; 1
    474a:	35 97       	sbiw	r30, 0x05	; 5
    474c:	88 e9       	ldi	r24, 0x98	; 152
    474e:	80 83       	st	Z, r24
    4750:	ed 91       	ld	r30, X+
    4752:	fc 91       	ld	r31, X
    4754:	34 97       	sbiw	r30, 0x04	; 4
    4756:	86 e0       	ldi	r24, 0x06	; 6
    4758:	80 83       	st	Z, r24
    475a:	ff be       	out	0x3f, r15	; 63
    475c:	c8 01       	movw	r24, r16
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	1f 91       	pop	r17
    4764:	0f 91       	pop	r16
    4766:	ff 90       	pop	r15
    4768:	ef 90       	pop	r14
    476a:	cf 90       	pop	r12
    476c:	af 90       	pop	r10
    476e:	9f 90       	pop	r9
    4770:	8f 90       	pop	r8
    4772:	7f 90       	pop	r7
    4774:	6f 90       	pop	r6
    4776:	5f 90       	pop	r5
    4778:	4f 90       	pop	r4
    477a:	3f 90       	pop	r3
    477c:	2f 90       	pop	r2
    477e:	08 95       	ret

00004780 <serial_sendByte>:
    4780:	cf 93       	push	r28
    4782:	df 93       	push	r29
    4784:	dc 01       	movw	r26, r24
    4786:	89 2b       	or	r24, r25
    4788:	01 f1       	breq	.+64     	; 0x47ca <serial_sendByte+0x4a>
    478a:	12 96       	adiw	r26, 0x02	; 2
    478c:	ed 91       	ld	r30, X+
    478e:	fc 91       	ld	r31, X
    4790:	13 97       	sbiw	r26, 0x03	; 3
    4792:	93 81       	ldd	r25, Z+3	; 0x03
    4794:	82 81       	ldd	r24, Z+2	; 0x02
    4796:	25 81       	ldd	r18, Z+5	; 0x05
    4798:	98 1b       	sub	r25, r24
    479a:	92 23       	and	r25, r18
    479c:	84 81       	ldd	r24, Z+4	; 0x04
    479e:	98 17       	cp	r25, r24
    47a0:	b1 f0       	breq	.+44     	; 0x47ce <serial_sendByte+0x4e>
    47a2:	83 81       	ldd	r24, Z+3	; 0x03
    47a4:	26 95       	lsr	r18
    47a6:	28 23       	and	r18, r24
    47a8:	c0 81       	ld	r28, Z
    47aa:	d1 81       	ldd	r29, Z+1	; 0x01
    47ac:	c2 0f       	add	r28, r18
    47ae:	d1 1d       	adc	r29, r1
    47b0:	68 83       	st	Y, r22
    47b2:	8f 5f       	subi	r24, 0xFF	; 255
    47b4:	95 81       	ldd	r25, Z+5	; 0x05
    47b6:	89 23       	and	r24, r25
    47b8:	83 83       	std	Z+3, r24	; 0x03
    47ba:	ed 91       	ld	r30, X+
    47bc:	fc 91       	ld	r31, X
    47be:	35 97       	sbiw	r30, 0x05	; 5
    47c0:	80 81       	ld	r24, Z
    47c2:	80 62       	ori	r24, 0x20	; 32
    47c4:	80 83       	st	Z, r24
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	03 c0       	rjmp	.+6      	; 0x47d0 <serial_sendByte+0x50>
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	01 c0       	rjmp	.+2      	; 0x47d0 <serial_sendByte+0x50>
    47ce:	82 e0       	ldi	r24, 0x02	; 2
    47d0:	df 91       	pop	r29
    47d2:	cf 91       	pop	r28
    47d4:	08 95       	ret

000047d6 <serial_sendBytes>:
    47d6:	ef 92       	push	r14
    47d8:	ff 92       	push	r15
    47da:	0f 93       	push	r16
    47dc:	1f 93       	push	r17
    47de:	cf 93       	push	r28
    47e0:	df 93       	push	r29
    47e2:	7c 01       	movw	r14, r24
    47e4:	00 97       	sbiw	r24, 0x00	; 0
    47e6:	09 f4       	brne	.+2      	; 0x47ea <serial_sendBytes+0x14>
    47e8:	41 c0       	rjmp	.+130    	; 0x486c <serial_sendBytes+0x96>
    47ea:	dc 01       	movw	r26, r24
    47ec:	12 96       	adiw	r26, 0x02	; 2
    47ee:	ed 91       	ld	r30, X+
    47f0:	fc 91       	ld	r31, X
    47f2:	13 97       	sbiw	r26, 0x03	; 3
    47f4:	93 81       	ldd	r25, Z+3	; 0x03
    47f6:	82 81       	ldd	r24, Z+2	; 0x02
    47f8:	98 1b       	sub	r25, r24
    47fa:	85 81       	ldd	r24, Z+5	; 0x05
    47fc:	98 23       	and	r25, r24
    47fe:	84 81       	ldd	r24, Z+4	; 0x04
    4800:	89 1b       	sub	r24, r25
    4802:	86 17       	cp	r24, r22
    4804:	a8 f1       	brcs	.+106    	; 0x4870 <serial_sendBytes+0x9a>
    4806:	66 23       	and	r22, r22
    4808:	41 f1       	breq	.+80     	; 0x485a <serial_sendBytes+0x84>
    480a:	84 2f       	mov	r24, r20
    480c:	95 2f       	mov	r25, r21
    480e:	dc 01       	movw	r26, r24
    4810:	61 50       	subi	r22, 0x01	; 1
    4812:	46 2f       	mov	r20, r22
    4814:	50 e0       	ldi	r21, 0x00	; 0
    4816:	4f 5f       	subi	r20, 0xFF	; 255
    4818:	5f 4f       	sbci	r21, 0xFF	; 255
    481a:	48 0f       	add	r20, r24
    481c:	59 1f       	adc	r21, r25
    481e:	e7 01       	movw	r28, r14
    4820:	ea 81       	ldd	r30, Y+2	; 0x02
    4822:	fb 81       	ldd	r31, Y+3	; 0x03
    4824:	93 81       	ldd	r25, Z+3	; 0x03
    4826:	82 81       	ldd	r24, Z+2	; 0x02
    4828:	25 81       	ldd	r18, Z+5	; 0x05
    482a:	98 1b       	sub	r25, r24
    482c:	92 23       	and	r25, r18
    482e:	84 81       	ldd	r24, Z+4	; 0x04
    4830:	98 17       	cp	r25, r24
    4832:	79 f0       	breq	.+30     	; 0x4852 <serial_sendBytes+0x7c>
    4834:	8c 91       	ld	r24, X
    4836:	93 81       	ldd	r25, Z+3	; 0x03
    4838:	26 95       	lsr	r18
    483a:	29 23       	and	r18, r25
    483c:	60 81       	ld	r22, Z
    483e:	71 81       	ldd	r23, Z+1	; 0x01
    4840:	8b 01       	movw	r16, r22
    4842:	02 0f       	add	r16, r18
    4844:	11 1d       	adc	r17, r1
    4846:	e8 01       	movw	r28, r16
    4848:	88 83       	st	Y, r24
    484a:	9f 5f       	subi	r25, 0xFF	; 255
    484c:	85 81       	ldd	r24, Z+5	; 0x05
    484e:	98 23       	and	r25, r24
    4850:	93 83       	std	Z+3, r25	; 0x03
    4852:	11 96       	adiw	r26, 0x01	; 1
    4854:	a4 17       	cp	r26, r20
    4856:	b5 07       	cpc	r27, r21
    4858:	11 f7       	brne	.-60     	; 0x481e <serial_sendBytes+0x48>
    485a:	d7 01       	movw	r26, r14
    485c:	ed 91       	ld	r30, X+
    485e:	fc 91       	ld	r31, X
    4860:	35 97       	sbiw	r30, 0x05	; 5
    4862:	80 81       	ld	r24, Z
    4864:	80 62       	ori	r24, 0x20	; 32
    4866:	80 83       	st	Z, r24
    4868:	80 e0       	ldi	r24, 0x00	; 0
    486a:	03 c0       	rjmp	.+6      	; 0x4872 <serial_sendBytes+0x9c>
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	01 c0       	rjmp	.+2      	; 0x4872 <serial_sendBytes+0x9c>
    4870:	82 e0       	ldi	r24, 0x02	; 2
    4872:	df 91       	pop	r29
    4874:	cf 91       	pop	r28
    4876:	1f 91       	pop	r17
    4878:	0f 91       	pop	r16
    487a:	ff 90       	pop	r15
    487c:	ef 90       	pop	r14
    487e:	08 95       	ret

00004880 <serial_getByte>:
    4880:	00 97       	sbiw	r24, 0x00	; 0
    4882:	d1 f0       	breq	.+52     	; 0x48b8 <serial_getByte+0x38>
    4884:	dc 01       	movw	r26, r24
    4886:	14 96       	adiw	r26, 0x04	; 4
    4888:	ed 91       	ld	r30, X+
    488a:	fc 91       	ld	r31, X
    488c:	15 97       	sbiw	r26, 0x05	; 5
    488e:	93 81       	ldd	r25, Z+3	; 0x03
    4890:	82 81       	ldd	r24, Z+2	; 0x02
    4892:	98 17       	cp	r25, r24
    4894:	99 f0       	breq	.+38     	; 0x48bc <serial_getByte+0x3c>
    4896:	92 81       	ldd	r25, Z+2	; 0x02
    4898:	85 81       	ldd	r24, Z+5	; 0x05
    489a:	86 95       	lsr	r24
    489c:	89 23       	and	r24, r25
    489e:	a0 81       	ld	r26, Z
    48a0:	b1 81       	ldd	r27, Z+1	; 0x01
    48a2:	a8 0f       	add	r26, r24
    48a4:	b1 1d       	adc	r27, r1
    48a6:	8c 91       	ld	r24, X
    48a8:	db 01       	movw	r26, r22
    48aa:	8c 93       	st	X, r24
    48ac:	9f 5f       	subi	r25, 0xFF	; 255
    48ae:	85 81       	ldd	r24, Z+5	; 0x05
    48b0:	98 23       	and	r25, r24
    48b2:	92 83       	std	Z+2, r25	; 0x02
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	08 95       	ret
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	08 95       	ret
    48bc:	83 e0       	ldi	r24, 0x03	; 3
    48be:	08 95       	ret

000048c0 <__vector_25>:
    48c0:	1f 92       	push	r1
    48c2:	0f 92       	push	r0
    48c4:	0f b6       	in	r0, 0x3f	; 63
    48c6:	0f 92       	push	r0
    48c8:	11 24       	eor	r1, r1
    48ca:	0b b6       	in	r0, 0x3b	; 59
    48cc:	0f 92       	push	r0
    48ce:	2f 93       	push	r18
    48d0:	3f 93       	push	r19
    48d2:	4f 93       	push	r20
    48d4:	5f 93       	push	r21
    48d6:	6f 93       	push	r22
    48d8:	7f 93       	push	r23
    48da:	8f 93       	push	r24
    48dc:	9f 93       	push	r25
    48de:	af 93       	push	r26
    48e0:	bf 93       	push	r27
    48e2:	cf 93       	push	r28
    48e4:	df 93       	push	r29
    48e6:	ef 93       	push	r30
    48e8:	ff 93       	push	r31
    48ea:	a0 91 bd 18 	lds	r26, 0x18BD	; 0x8018bd <_ser_handle>
    48ee:	b0 91 be 18 	lds	r27, 0x18BE	; 0x8018be <_ser_handle+0x1>
    48f2:	10 97       	sbiw	r26, 0x00	; 0
    48f4:	11 f1       	breq	.+68     	; 0x493a <__vector_25+0x7a>
    48f6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    48fa:	14 96       	adiw	r26, 0x04	; 4
    48fc:	ed 91       	ld	r30, X+
    48fe:	fc 91       	ld	r31, X
    4900:	15 97       	sbiw	r26, 0x05	; 5
    4902:	93 81       	ldd	r25, Z+3	; 0x03
    4904:	82 81       	ldd	r24, Z+2	; 0x02
    4906:	25 81       	ldd	r18, Z+5	; 0x05
    4908:	98 1b       	sub	r25, r24
    490a:	92 23       	and	r25, r18
    490c:	84 81       	ldd	r24, Z+4	; 0x04
    490e:	98 17       	cp	r25, r24
    4910:	61 f0       	breq	.+24     	; 0x492a <__vector_25+0x6a>
    4912:	83 81       	ldd	r24, Z+3	; 0x03
    4914:	26 95       	lsr	r18
    4916:	28 23       	and	r18, r24
    4918:	c0 81       	ld	r28, Z
    491a:	d1 81       	ldd	r29, Z+1	; 0x01
    491c:	c2 0f       	add	r28, r18
    491e:	d1 1d       	adc	r29, r1
    4920:	68 83       	st	Y, r22
    4922:	8f 5f       	subi	r24, 0xFF	; 255
    4924:	95 81       	ldd	r25, Z+5	; 0x05
    4926:	89 23       	and	r24, r25
    4928:	83 83       	std	Z+3, r24	; 0x03
    492a:	16 96       	adiw	r26, 0x06	; 6
    492c:	ed 91       	ld	r30, X+
    492e:	fc 91       	ld	r31, X
    4930:	17 97       	sbiw	r26, 0x07	; 7
    4932:	30 97       	sbiw	r30, 0x00	; 0
    4934:	11 f0       	breq	.+4      	; 0x493a <__vector_25+0x7a>
    4936:	cd 01       	movw	r24, r26
    4938:	19 95       	eicall
    493a:	ff 91       	pop	r31
    493c:	ef 91       	pop	r30
    493e:	df 91       	pop	r29
    4940:	cf 91       	pop	r28
    4942:	bf 91       	pop	r27
    4944:	af 91       	pop	r26
    4946:	9f 91       	pop	r25
    4948:	8f 91       	pop	r24
    494a:	7f 91       	pop	r23
    494c:	6f 91       	pop	r22
    494e:	5f 91       	pop	r21
    4950:	4f 91       	pop	r20
    4952:	3f 91       	pop	r19
    4954:	2f 91       	pop	r18
    4956:	0f 90       	pop	r0
    4958:	0b be       	out	0x3b, r0	; 59
    495a:	0f 90       	pop	r0
    495c:	0f be       	out	0x3f, r0	; 63
    495e:	0f 90       	pop	r0
    4960:	1f 90       	pop	r1
    4962:	18 95       	reti

00004964 <__vector_26>:
    4964:	1f 92       	push	r1
    4966:	0f 92       	push	r0
    4968:	0f b6       	in	r0, 0x3f	; 63
    496a:	0f 92       	push	r0
    496c:	11 24       	eor	r1, r1
    496e:	0b b6       	in	r0, 0x3b	; 59
    4970:	0f 92       	push	r0
    4972:	2f 93       	push	r18
    4974:	8f 93       	push	r24
    4976:	9f 93       	push	r25
    4978:	af 93       	push	r26
    497a:	bf 93       	push	r27
    497c:	ef 93       	push	r30
    497e:	ff 93       	push	r31
    4980:	e0 91 bd 18 	lds	r30, 0x18BD	; 0x8018bd <_ser_handle>
    4984:	f0 91 be 18 	lds	r31, 0x18BE	; 0x8018be <_ser_handle+0x1>
    4988:	30 97       	sbiw	r30, 0x00	; 0
    498a:	b9 f0       	breq	.+46     	; 0x49ba <__vector_26+0x56>
    498c:	02 80       	ldd	r0, Z+2	; 0x02
    498e:	f3 81       	ldd	r31, Z+3	; 0x03
    4990:	e0 2d       	mov	r30, r0
    4992:	93 81       	ldd	r25, Z+3	; 0x03
    4994:	82 81       	ldd	r24, Z+2	; 0x02
    4996:	98 17       	cp	r25, r24
    4998:	b1 f0       	breq	.+44     	; 0x49c6 <__vector_26+0x62>
    499a:	92 81       	ldd	r25, Z+2	; 0x02
    499c:	85 81       	ldd	r24, Z+5	; 0x05
    499e:	28 2f       	mov	r18, r24
    49a0:	26 95       	lsr	r18
    49a2:	29 23       	and	r18, r25
    49a4:	a0 81       	ld	r26, Z
    49a6:	b1 81       	ldd	r27, Z+1	; 0x01
    49a8:	a2 0f       	add	r26, r18
    49aa:	b1 1d       	adc	r27, r1
    49ac:	2c 91       	ld	r18, X
    49ae:	9f 5f       	subi	r25, 0xFF	; 255
    49b0:	89 23       	and	r24, r25
    49b2:	82 83       	std	Z+2, r24	; 0x02
    49b4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    49b8:	0b c0       	rjmp	.+22     	; 0x49d0 <__vector_26+0x6c>
    49ba:	e1 ec       	ldi	r30, 0xC1	; 193
    49bc:	f0 e0       	ldi	r31, 0x00	; 0
    49be:	80 81       	ld	r24, Z
    49c0:	8f 7d       	andi	r24, 0xDF	; 223
    49c2:	80 83       	st	Z, r24
    49c4:	05 c0       	rjmp	.+10     	; 0x49d0 <__vector_26+0x6c>
    49c6:	e1 ec       	ldi	r30, 0xC1	; 193
    49c8:	f0 e0       	ldi	r31, 0x00	; 0
    49ca:	80 81       	ld	r24, Z
    49cc:	8f 7d       	andi	r24, 0xDF	; 223
    49ce:	80 83       	st	Z, r24
    49d0:	ff 91       	pop	r31
    49d2:	ef 91       	pop	r30
    49d4:	bf 91       	pop	r27
    49d6:	af 91       	pop	r26
    49d8:	9f 91       	pop	r25
    49da:	8f 91       	pop	r24
    49dc:	2f 91       	pop	r18
    49de:	0f 90       	pop	r0
    49e0:	0b be       	out	0x3b, r0	; 59
    49e2:	0f 90       	pop	r0
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	0f 90       	pop	r0
    49e8:	1f 90       	pop	r1
    49ea:	18 95       	reti

000049ec <__vector_36>:
    49ec:	1f 92       	push	r1
    49ee:	0f 92       	push	r0
    49f0:	0f b6       	in	r0, 0x3f	; 63
    49f2:	0f 92       	push	r0
    49f4:	11 24       	eor	r1, r1
    49f6:	0b b6       	in	r0, 0x3b	; 59
    49f8:	0f 92       	push	r0
    49fa:	2f 93       	push	r18
    49fc:	3f 93       	push	r19
    49fe:	4f 93       	push	r20
    4a00:	5f 93       	push	r21
    4a02:	6f 93       	push	r22
    4a04:	7f 93       	push	r23
    4a06:	8f 93       	push	r24
    4a08:	9f 93       	push	r25
    4a0a:	af 93       	push	r26
    4a0c:	bf 93       	push	r27
    4a0e:	cf 93       	push	r28
    4a10:	df 93       	push	r29
    4a12:	ef 93       	push	r30
    4a14:	ff 93       	push	r31
    4a16:	a0 91 bf 18 	lds	r26, 0x18BF	; 0x8018bf <_ser_handle+0x2>
    4a1a:	b0 91 c0 18 	lds	r27, 0x18C0	; 0x8018c0 <_ser_handle+0x3>
    4a1e:	10 97       	sbiw	r26, 0x00	; 0
    4a20:	11 f1       	breq	.+68     	; 0x4a66 <__vector_36+0x7a>
    4a22:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a26:	14 96       	adiw	r26, 0x04	; 4
    4a28:	ed 91       	ld	r30, X+
    4a2a:	fc 91       	ld	r31, X
    4a2c:	15 97       	sbiw	r26, 0x05	; 5
    4a2e:	93 81       	ldd	r25, Z+3	; 0x03
    4a30:	82 81       	ldd	r24, Z+2	; 0x02
    4a32:	25 81       	ldd	r18, Z+5	; 0x05
    4a34:	98 1b       	sub	r25, r24
    4a36:	92 23       	and	r25, r18
    4a38:	84 81       	ldd	r24, Z+4	; 0x04
    4a3a:	98 17       	cp	r25, r24
    4a3c:	61 f0       	breq	.+24     	; 0x4a56 <__vector_36+0x6a>
    4a3e:	83 81       	ldd	r24, Z+3	; 0x03
    4a40:	26 95       	lsr	r18
    4a42:	28 23       	and	r18, r24
    4a44:	c0 81       	ld	r28, Z
    4a46:	d1 81       	ldd	r29, Z+1	; 0x01
    4a48:	c2 0f       	add	r28, r18
    4a4a:	d1 1d       	adc	r29, r1
    4a4c:	68 83       	st	Y, r22
    4a4e:	8f 5f       	subi	r24, 0xFF	; 255
    4a50:	95 81       	ldd	r25, Z+5	; 0x05
    4a52:	89 23       	and	r24, r25
    4a54:	83 83       	std	Z+3, r24	; 0x03
    4a56:	16 96       	adiw	r26, 0x06	; 6
    4a58:	ed 91       	ld	r30, X+
    4a5a:	fc 91       	ld	r31, X
    4a5c:	17 97       	sbiw	r26, 0x07	; 7
    4a5e:	30 97       	sbiw	r30, 0x00	; 0
    4a60:	11 f0       	breq	.+4      	; 0x4a66 <__vector_36+0x7a>
    4a62:	cd 01       	movw	r24, r26
    4a64:	19 95       	eicall
    4a66:	ff 91       	pop	r31
    4a68:	ef 91       	pop	r30
    4a6a:	df 91       	pop	r29
    4a6c:	cf 91       	pop	r28
    4a6e:	bf 91       	pop	r27
    4a70:	af 91       	pop	r26
    4a72:	9f 91       	pop	r25
    4a74:	8f 91       	pop	r24
    4a76:	7f 91       	pop	r23
    4a78:	6f 91       	pop	r22
    4a7a:	5f 91       	pop	r21
    4a7c:	4f 91       	pop	r20
    4a7e:	3f 91       	pop	r19
    4a80:	2f 91       	pop	r18
    4a82:	0f 90       	pop	r0
    4a84:	0b be       	out	0x3b, r0	; 59
    4a86:	0f 90       	pop	r0
    4a88:	0f be       	out	0x3f, r0	; 63
    4a8a:	0f 90       	pop	r0
    4a8c:	1f 90       	pop	r1
    4a8e:	18 95       	reti

00004a90 <__vector_37>:
    4a90:	1f 92       	push	r1
    4a92:	0f 92       	push	r0
    4a94:	0f b6       	in	r0, 0x3f	; 63
    4a96:	0f 92       	push	r0
    4a98:	11 24       	eor	r1, r1
    4a9a:	0b b6       	in	r0, 0x3b	; 59
    4a9c:	0f 92       	push	r0
    4a9e:	2f 93       	push	r18
    4aa0:	8f 93       	push	r24
    4aa2:	9f 93       	push	r25
    4aa4:	af 93       	push	r26
    4aa6:	bf 93       	push	r27
    4aa8:	ef 93       	push	r30
    4aaa:	ff 93       	push	r31
    4aac:	e0 91 bf 18 	lds	r30, 0x18BF	; 0x8018bf <_ser_handle+0x2>
    4ab0:	f0 91 c0 18 	lds	r31, 0x18C0	; 0x8018c0 <_ser_handle+0x3>
    4ab4:	30 97       	sbiw	r30, 0x00	; 0
    4ab6:	b9 f0       	breq	.+46     	; 0x4ae6 <__vector_37+0x56>
    4ab8:	02 80       	ldd	r0, Z+2	; 0x02
    4aba:	f3 81       	ldd	r31, Z+3	; 0x03
    4abc:	e0 2d       	mov	r30, r0
    4abe:	93 81       	ldd	r25, Z+3	; 0x03
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	98 17       	cp	r25, r24
    4ac4:	b1 f0       	breq	.+44     	; 0x4af2 <__vector_37+0x62>
    4ac6:	92 81       	ldd	r25, Z+2	; 0x02
    4ac8:	85 81       	ldd	r24, Z+5	; 0x05
    4aca:	28 2f       	mov	r18, r24
    4acc:	26 95       	lsr	r18
    4ace:	29 23       	and	r18, r25
    4ad0:	a0 81       	ld	r26, Z
    4ad2:	b1 81       	ldd	r27, Z+1	; 0x01
    4ad4:	a2 0f       	add	r26, r18
    4ad6:	b1 1d       	adc	r27, r1
    4ad8:	2c 91       	ld	r18, X
    4ada:	9f 5f       	subi	r25, 0xFF	; 255
    4adc:	89 23       	and	r24, r25
    4ade:	82 83       	std	Z+2, r24	; 0x02
    4ae0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4ae4:	0b c0       	rjmp	.+22     	; 0x4afc <__vector_37+0x6c>
    4ae6:	e9 ec       	ldi	r30, 0xC9	; 201
    4ae8:	f0 e0       	ldi	r31, 0x00	; 0
    4aea:	80 81       	ld	r24, Z
    4aec:	8f 7d       	andi	r24, 0xDF	; 223
    4aee:	80 83       	st	Z, r24
    4af0:	05 c0       	rjmp	.+10     	; 0x4afc <__vector_37+0x6c>
    4af2:	e9 ec       	ldi	r30, 0xC9	; 201
    4af4:	f0 e0       	ldi	r31, 0x00	; 0
    4af6:	80 81       	ld	r24, Z
    4af8:	8f 7d       	andi	r24, 0xDF	; 223
    4afa:	80 83       	st	Z, r24
    4afc:	ff 91       	pop	r31
    4afe:	ef 91       	pop	r30
    4b00:	bf 91       	pop	r27
    4b02:	af 91       	pop	r26
    4b04:	9f 91       	pop	r25
    4b06:	8f 91       	pop	r24
    4b08:	2f 91       	pop	r18
    4b0a:	0f 90       	pop	r0
    4b0c:	0b be       	out	0x3b, r0	; 59
    4b0e:	0f 90       	pop	r0
    4b10:	0f be       	out	0x3f, r0	; 63
    4b12:	0f 90       	pop	r0
    4b14:	1f 90       	pop	r1
    4b16:	18 95       	reti

00004b18 <__vector_51>:
    4b18:	1f 92       	push	r1
    4b1a:	0f 92       	push	r0
    4b1c:	0f b6       	in	r0, 0x3f	; 63
    4b1e:	0f 92       	push	r0
    4b20:	11 24       	eor	r1, r1
    4b22:	0b b6       	in	r0, 0x3b	; 59
    4b24:	0f 92       	push	r0
    4b26:	2f 93       	push	r18
    4b28:	3f 93       	push	r19
    4b2a:	4f 93       	push	r20
    4b2c:	5f 93       	push	r21
    4b2e:	6f 93       	push	r22
    4b30:	7f 93       	push	r23
    4b32:	8f 93       	push	r24
    4b34:	9f 93       	push	r25
    4b36:	af 93       	push	r26
    4b38:	bf 93       	push	r27
    4b3a:	cf 93       	push	r28
    4b3c:	df 93       	push	r29
    4b3e:	ef 93       	push	r30
    4b40:	ff 93       	push	r31
    4b42:	a0 91 c1 18 	lds	r26, 0x18C1	; 0x8018c1 <_ser_handle+0x4>
    4b46:	b0 91 c2 18 	lds	r27, 0x18C2	; 0x8018c2 <_ser_handle+0x5>
    4b4a:	10 97       	sbiw	r26, 0x00	; 0
    4b4c:	11 f1       	breq	.+68     	; 0x4b92 <__vector_51+0x7a>
    4b4e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b52:	14 96       	adiw	r26, 0x04	; 4
    4b54:	ed 91       	ld	r30, X+
    4b56:	fc 91       	ld	r31, X
    4b58:	15 97       	sbiw	r26, 0x05	; 5
    4b5a:	93 81       	ldd	r25, Z+3	; 0x03
    4b5c:	82 81       	ldd	r24, Z+2	; 0x02
    4b5e:	25 81       	ldd	r18, Z+5	; 0x05
    4b60:	98 1b       	sub	r25, r24
    4b62:	92 23       	and	r25, r18
    4b64:	84 81       	ldd	r24, Z+4	; 0x04
    4b66:	98 17       	cp	r25, r24
    4b68:	61 f0       	breq	.+24     	; 0x4b82 <__vector_51+0x6a>
    4b6a:	83 81       	ldd	r24, Z+3	; 0x03
    4b6c:	26 95       	lsr	r18
    4b6e:	28 23       	and	r18, r24
    4b70:	c0 81       	ld	r28, Z
    4b72:	d1 81       	ldd	r29, Z+1	; 0x01
    4b74:	c2 0f       	add	r28, r18
    4b76:	d1 1d       	adc	r29, r1
    4b78:	68 83       	st	Y, r22
    4b7a:	8f 5f       	subi	r24, 0xFF	; 255
    4b7c:	95 81       	ldd	r25, Z+5	; 0x05
    4b7e:	89 23       	and	r24, r25
    4b80:	83 83       	std	Z+3, r24	; 0x03
    4b82:	16 96       	adiw	r26, 0x06	; 6
    4b84:	ed 91       	ld	r30, X+
    4b86:	fc 91       	ld	r31, X
    4b88:	17 97       	sbiw	r26, 0x07	; 7
    4b8a:	30 97       	sbiw	r30, 0x00	; 0
    4b8c:	11 f0       	breq	.+4      	; 0x4b92 <__vector_51+0x7a>
    4b8e:	cd 01       	movw	r24, r26
    4b90:	19 95       	eicall
    4b92:	ff 91       	pop	r31
    4b94:	ef 91       	pop	r30
    4b96:	df 91       	pop	r29
    4b98:	cf 91       	pop	r28
    4b9a:	bf 91       	pop	r27
    4b9c:	af 91       	pop	r26
    4b9e:	9f 91       	pop	r25
    4ba0:	8f 91       	pop	r24
    4ba2:	7f 91       	pop	r23
    4ba4:	6f 91       	pop	r22
    4ba6:	5f 91       	pop	r21
    4ba8:	4f 91       	pop	r20
    4baa:	3f 91       	pop	r19
    4bac:	2f 91       	pop	r18
    4bae:	0f 90       	pop	r0
    4bb0:	0b be       	out	0x3b, r0	; 59
    4bb2:	0f 90       	pop	r0
    4bb4:	0f be       	out	0x3f, r0	; 63
    4bb6:	0f 90       	pop	r0
    4bb8:	1f 90       	pop	r1
    4bba:	18 95       	reti

00004bbc <__vector_52>:
    4bbc:	1f 92       	push	r1
    4bbe:	0f 92       	push	r0
    4bc0:	0f b6       	in	r0, 0x3f	; 63
    4bc2:	0f 92       	push	r0
    4bc4:	11 24       	eor	r1, r1
    4bc6:	0b b6       	in	r0, 0x3b	; 59
    4bc8:	0f 92       	push	r0
    4bca:	2f 93       	push	r18
    4bcc:	8f 93       	push	r24
    4bce:	9f 93       	push	r25
    4bd0:	af 93       	push	r26
    4bd2:	bf 93       	push	r27
    4bd4:	ef 93       	push	r30
    4bd6:	ff 93       	push	r31
    4bd8:	e0 91 c1 18 	lds	r30, 0x18C1	; 0x8018c1 <_ser_handle+0x4>
    4bdc:	f0 91 c2 18 	lds	r31, 0x18C2	; 0x8018c2 <_ser_handle+0x5>
    4be0:	30 97       	sbiw	r30, 0x00	; 0
    4be2:	b9 f0       	breq	.+46     	; 0x4c12 <__vector_52+0x56>
    4be4:	02 80       	ldd	r0, Z+2	; 0x02
    4be6:	f3 81       	ldd	r31, Z+3	; 0x03
    4be8:	e0 2d       	mov	r30, r0
    4bea:	93 81       	ldd	r25, Z+3	; 0x03
    4bec:	82 81       	ldd	r24, Z+2	; 0x02
    4bee:	98 17       	cp	r25, r24
    4bf0:	b1 f0       	breq	.+44     	; 0x4c1e <__vector_52+0x62>
    4bf2:	92 81       	ldd	r25, Z+2	; 0x02
    4bf4:	85 81       	ldd	r24, Z+5	; 0x05
    4bf6:	28 2f       	mov	r18, r24
    4bf8:	26 95       	lsr	r18
    4bfa:	29 23       	and	r18, r25
    4bfc:	a0 81       	ld	r26, Z
    4bfe:	b1 81       	ldd	r27, Z+1	; 0x01
    4c00:	a2 0f       	add	r26, r18
    4c02:	b1 1d       	adc	r27, r1
    4c04:	2c 91       	ld	r18, X
    4c06:	9f 5f       	subi	r25, 0xFF	; 255
    4c08:	89 23       	and	r24, r25
    4c0a:	82 83       	std	Z+2, r24	; 0x02
    4c0c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4c10:	0b c0       	rjmp	.+22     	; 0x4c28 <__vector_52+0x6c>
    4c12:	e1 ed       	ldi	r30, 0xD1	; 209
    4c14:	f0 e0       	ldi	r31, 0x00	; 0
    4c16:	80 81       	ld	r24, Z
    4c18:	8f 7d       	andi	r24, 0xDF	; 223
    4c1a:	80 83       	st	Z, r24
    4c1c:	05 c0       	rjmp	.+10     	; 0x4c28 <__vector_52+0x6c>
    4c1e:	e1 ed       	ldi	r30, 0xD1	; 209
    4c20:	f0 e0       	ldi	r31, 0x00	; 0
    4c22:	80 81       	ld	r24, Z
    4c24:	8f 7d       	andi	r24, 0xDF	; 223
    4c26:	80 83       	st	Z, r24
    4c28:	ff 91       	pop	r31
    4c2a:	ef 91       	pop	r30
    4c2c:	bf 91       	pop	r27
    4c2e:	af 91       	pop	r26
    4c30:	9f 91       	pop	r25
    4c32:	8f 91       	pop	r24
    4c34:	2f 91       	pop	r18
    4c36:	0f 90       	pop	r0
    4c38:	0b be       	out	0x3b, r0	; 59
    4c3a:	0f 90       	pop	r0
    4c3c:	0f be       	out	0x3f, r0	; 63
    4c3e:	0f 90       	pop	r0
    4c40:	1f 90       	pop	r1
    4c42:	18 95       	reti

00004c44 <__vector_54>:
    4c44:	1f 92       	push	r1
    4c46:	0f 92       	push	r0
    4c48:	0f b6       	in	r0, 0x3f	; 63
    4c4a:	0f 92       	push	r0
    4c4c:	11 24       	eor	r1, r1
    4c4e:	0b b6       	in	r0, 0x3b	; 59
    4c50:	0f 92       	push	r0
    4c52:	2f 93       	push	r18
    4c54:	3f 93       	push	r19
    4c56:	4f 93       	push	r20
    4c58:	5f 93       	push	r21
    4c5a:	6f 93       	push	r22
    4c5c:	7f 93       	push	r23
    4c5e:	8f 93       	push	r24
    4c60:	9f 93       	push	r25
    4c62:	af 93       	push	r26
    4c64:	bf 93       	push	r27
    4c66:	cf 93       	push	r28
    4c68:	df 93       	push	r29
    4c6a:	ef 93       	push	r30
    4c6c:	ff 93       	push	r31
    4c6e:	a0 91 c3 18 	lds	r26, 0x18C3	; 0x8018c3 <_ser_handle+0x6>
    4c72:	b0 91 c4 18 	lds	r27, 0x18C4	; 0x8018c4 <_ser_handle+0x7>
    4c76:	10 97       	sbiw	r26, 0x00	; 0
    4c78:	11 f1       	breq	.+68     	; 0x4cbe <__vector_54+0x7a>
    4c7a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4c7e:	14 96       	adiw	r26, 0x04	; 4
    4c80:	ed 91       	ld	r30, X+
    4c82:	fc 91       	ld	r31, X
    4c84:	15 97       	sbiw	r26, 0x05	; 5
    4c86:	93 81       	ldd	r25, Z+3	; 0x03
    4c88:	82 81       	ldd	r24, Z+2	; 0x02
    4c8a:	25 81       	ldd	r18, Z+5	; 0x05
    4c8c:	98 1b       	sub	r25, r24
    4c8e:	92 23       	and	r25, r18
    4c90:	84 81       	ldd	r24, Z+4	; 0x04
    4c92:	98 17       	cp	r25, r24
    4c94:	61 f0       	breq	.+24     	; 0x4cae <__vector_54+0x6a>
    4c96:	83 81       	ldd	r24, Z+3	; 0x03
    4c98:	26 95       	lsr	r18
    4c9a:	28 23       	and	r18, r24
    4c9c:	c0 81       	ld	r28, Z
    4c9e:	d1 81       	ldd	r29, Z+1	; 0x01
    4ca0:	c2 0f       	add	r28, r18
    4ca2:	d1 1d       	adc	r29, r1
    4ca4:	68 83       	st	Y, r22
    4ca6:	8f 5f       	subi	r24, 0xFF	; 255
    4ca8:	95 81       	ldd	r25, Z+5	; 0x05
    4caa:	89 23       	and	r24, r25
    4cac:	83 83       	std	Z+3, r24	; 0x03
    4cae:	16 96       	adiw	r26, 0x06	; 6
    4cb0:	ed 91       	ld	r30, X+
    4cb2:	fc 91       	ld	r31, X
    4cb4:	17 97       	sbiw	r26, 0x07	; 7
    4cb6:	30 97       	sbiw	r30, 0x00	; 0
    4cb8:	11 f0       	breq	.+4      	; 0x4cbe <__vector_54+0x7a>
    4cba:	cd 01       	movw	r24, r26
    4cbc:	19 95       	eicall
    4cbe:	ff 91       	pop	r31
    4cc0:	ef 91       	pop	r30
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	bf 91       	pop	r27
    4cc8:	af 91       	pop	r26
    4cca:	9f 91       	pop	r25
    4ccc:	8f 91       	pop	r24
    4cce:	7f 91       	pop	r23
    4cd0:	6f 91       	pop	r22
    4cd2:	5f 91       	pop	r21
    4cd4:	4f 91       	pop	r20
    4cd6:	3f 91       	pop	r19
    4cd8:	2f 91       	pop	r18
    4cda:	0f 90       	pop	r0
    4cdc:	0b be       	out	0x3b, r0	; 59
    4cde:	0f 90       	pop	r0
    4ce0:	0f be       	out	0x3f, r0	; 63
    4ce2:	0f 90       	pop	r0
    4ce4:	1f 90       	pop	r1
    4ce6:	18 95       	reti

00004ce8 <__vector_55>:
    4ce8:	1f 92       	push	r1
    4cea:	0f 92       	push	r0
    4cec:	0f b6       	in	r0, 0x3f	; 63
    4cee:	0f 92       	push	r0
    4cf0:	11 24       	eor	r1, r1
    4cf2:	0b b6       	in	r0, 0x3b	; 59
    4cf4:	0f 92       	push	r0
    4cf6:	2f 93       	push	r18
    4cf8:	8f 93       	push	r24
    4cfa:	9f 93       	push	r25
    4cfc:	af 93       	push	r26
    4cfe:	bf 93       	push	r27
    4d00:	ef 93       	push	r30
    4d02:	ff 93       	push	r31
    4d04:	e0 91 c3 18 	lds	r30, 0x18C3	; 0x8018c3 <_ser_handle+0x6>
    4d08:	f0 91 c4 18 	lds	r31, 0x18C4	; 0x8018c4 <_ser_handle+0x7>
    4d0c:	30 97       	sbiw	r30, 0x00	; 0
    4d0e:	b9 f0       	breq	.+46     	; 0x4d3e <__vector_55+0x56>
    4d10:	02 80       	ldd	r0, Z+2	; 0x02
    4d12:	f3 81       	ldd	r31, Z+3	; 0x03
    4d14:	e0 2d       	mov	r30, r0
    4d16:	93 81       	ldd	r25, Z+3	; 0x03
    4d18:	82 81       	ldd	r24, Z+2	; 0x02
    4d1a:	98 17       	cp	r25, r24
    4d1c:	b1 f0       	breq	.+44     	; 0x4d4a <__vector_55+0x62>
    4d1e:	92 81       	ldd	r25, Z+2	; 0x02
    4d20:	85 81       	ldd	r24, Z+5	; 0x05
    4d22:	28 2f       	mov	r18, r24
    4d24:	26 95       	lsr	r18
    4d26:	29 23       	and	r18, r25
    4d28:	a0 81       	ld	r26, Z
    4d2a:	b1 81       	ldd	r27, Z+1	; 0x01
    4d2c:	a2 0f       	add	r26, r18
    4d2e:	b1 1d       	adc	r27, r1
    4d30:	2c 91       	ld	r18, X
    4d32:	9f 5f       	subi	r25, 0xFF	; 255
    4d34:	89 23       	and	r24, r25
    4d36:	82 83       	std	Z+2, r24	; 0x02
    4d38:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4d3c:	0b c0       	rjmp	.+22     	; 0x4d54 <__vector_55+0x6c>
    4d3e:	e1 e3       	ldi	r30, 0x31	; 49
    4d40:	f1 e0       	ldi	r31, 0x01	; 1
    4d42:	80 81       	ld	r24, Z
    4d44:	8f 7d       	andi	r24, 0xDF	; 223
    4d46:	80 83       	st	Z, r24
    4d48:	05 c0       	rjmp	.+10     	; 0x4d54 <__vector_55+0x6c>
    4d4a:	e1 e3       	ldi	r30, 0x31	; 49
    4d4c:	f1 e0       	ldi	r31, 0x01	; 1
    4d4e:	80 81       	ld	r24, Z
    4d50:	8f 7d       	andi	r24, 0xDF	; 223
    4d52:	80 83       	st	Z, r24
    4d54:	ff 91       	pop	r31
    4d56:	ef 91       	pop	r30
    4d58:	bf 91       	pop	r27
    4d5a:	af 91       	pop	r26
    4d5c:	9f 91       	pop	r25
    4d5e:	8f 91       	pop	r24
    4d60:	2f 91       	pop	r18
    4d62:	0f 90       	pop	r0
    4d64:	0b be       	out	0x3b, r0	; 59
    4d66:	0f 90       	pop	r0
    4d68:	0f be       	out	0x3f, r0	; 63
    4d6a:	0f 90       	pop	r0
    4d6c:	1f 90       	pop	r1
    4d6e:	18 95       	reti

00004d70 <usart_getchar>:
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	1f 92       	push	r1
    4d76:	cd b7       	in	r28, 0x3d	; 61
    4d78:	de b7       	in	r29, 0x3e	; 62
    4d7a:	be 01       	movw	r22, r28
    4d7c:	6f 5f       	subi	r22, 0xFF	; 255
    4d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d80:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <_com_serial_instance>
    4d84:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <_com_serial_instance+0x1>
    4d88:	7b dd       	rcall	.-1290   	; 0x4880 <serial_getByte>
    4d8a:	81 11       	cpse	r24, r1
    4d8c:	f6 cf       	rjmp	.-20     	; 0x4d7a <usart_getchar+0xa>
    4d8e:	89 81       	ldd	r24, Y+1	; 0x01
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	0f 90       	pop	r0
    4d94:	df 91       	pop	r29
    4d96:	cf 91       	pop	r28
    4d98:	08 95       	ret

00004d9a <usart_putchar>:
    4d9a:	68 2f       	mov	r22, r24
    4d9c:	80 91 c5 18 	lds	r24, 0x18C5	; 0x8018c5 <_com_serial_instance>
    4da0:	90 91 c6 18 	lds	r25, 0x18C6	; 0x8018c6 <_com_serial_instance+0x1>
    4da4:	ed dc       	rcall	.-1574   	; 0x4780 <serial_sendByte>
    4da6:	80 e0       	ldi	r24, 0x00	; 0
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	08 95       	ret

00004dac <stdio_initialise>:
    4dac:	8f 92       	push	r8
    4dae:	9f 92       	push	r9
    4db0:	af 92       	push	r10
    4db2:	cf 92       	push	r12
    4db4:	ef 92       	push	r14
    4db6:	0f 93       	push	r16
    4db8:	81 2c       	mov	r8, r1
    4dba:	91 2c       	mov	r9, r1
    4dbc:	68 94       	set
    4dbe:	aa 24       	eor	r10, r10
    4dc0:	a7 f8       	bld	r10, 7
    4dc2:	68 94       	set
    4dc4:	cc 24       	eor	r12, r12
    4dc6:	c7 f8       	bld	r12, 7
    4dc8:	e1 2c       	mov	r14, r1
    4dca:	00 e0       	ldi	r16, 0x00	; 0
    4dcc:	23 e0       	ldi	r18, 0x03	; 3
    4dce:	40 e0       	ldi	r20, 0x00	; 0
    4dd0:	51 ee       	ldi	r21, 0xE1	; 225
    4dd2:	60 e0       	ldi	r22, 0x00	; 0
    4dd4:	70 e0       	ldi	r23, 0x00	; 0
    4dd6:	2e dc       	rcall	.-1956   	; 0x4634 <serial_create>
    4dd8:	90 93 c6 18 	sts	0x18C6, r25	; 0x8018c6 <_com_serial_instance+0x1>
    4ddc:	80 93 c5 18 	sts	0x18C5, r24	; 0x8018c5 <_com_serial_instance>
    4de0:	e7 ef       	ldi	r30, 0xF7	; 247
    4de2:	f8 e1       	ldi	r31, 0x18	; 24
    4de4:	83 e1       	ldi	r24, 0x13	; 19
    4de6:	92 e0       	ldi	r25, 0x02	; 2
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	80 83       	st	Z, r24
    4dec:	93 83       	std	Z+3, r25	; 0x03
    4dee:	82 83       	std	Z+2, r24	; 0x02
    4df0:	0f 91       	pop	r16
    4df2:	ef 90       	pop	r14
    4df4:	cf 90       	pop	r12
    4df6:	af 90       	pop	r10
    4df8:	9f 90       	pop	r9
    4dfa:	8f 90       	pop	r8
    4dfc:	08 95       	ret

00004dfe <_turn_off>:
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	fc 01       	movw	r30, r24
    4e02:	ee 0f       	add	r30, r30
    4e04:	ff 1f       	adc	r31, r31
    4e06:	e8 0f       	add	r30, r24
    4e08:	f9 1f       	adc	r31, r25
    4e0a:	ee 0f       	add	r30, r30
    4e0c:	ff 1f       	adc	r31, r31
    4e0e:	e9 53       	subi	r30, 0x39	; 57
    4e10:	f7 4e       	sbci	r31, 0xE7	; 231
    4e12:	23 81       	ldd	r18, Z+3	; 0x03
    4e14:	21 11       	cpse	r18, r1
    4e16:	1f c0       	rjmp	.+62     	; 0x4e56 <_turn_off+0x58>
    4e18:	9c 01       	movw	r18, r24
    4e1a:	22 0f       	add	r18, r18
    4e1c:	33 1f       	adc	r19, r19
    4e1e:	f9 01       	movw	r30, r18
    4e20:	e8 0f       	add	r30, r24
    4e22:	f9 1f       	adc	r31, r25
    4e24:	ee 0f       	add	r30, r30
    4e26:	ff 1f       	adc	r31, r31
    4e28:	e9 53       	subi	r30, 0x39	; 57
    4e2a:	f7 4e       	sbci	r31, 0xE7	; 231
    4e2c:	a0 81       	ld	r26, Z
    4e2e:	b1 81       	ldd	r27, Z+1	; 0x01
    4e30:	4c 91       	ld	r20, X
    4e32:	f9 01       	movw	r30, r18
    4e34:	e8 0f       	add	r30, r24
    4e36:	f9 1f       	adc	r31, r25
    4e38:	ee 0f       	add	r30, r30
    4e3a:	ff 1f       	adc	r31, r31
    4e3c:	e9 53       	subi	r30, 0x39	; 57
    4e3e:	f7 4e       	sbci	r31, 0xE7	; 231
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	02 80       	ldd	r0, Z+2	; 0x02
    4e46:	02 c0       	rjmp	.+4      	; 0x4e4c <_turn_off+0x4e>
    4e48:	88 0f       	add	r24, r24
    4e4a:	99 1f       	adc	r25, r25
    4e4c:	0a 94       	dec	r0
    4e4e:	e2 f7       	brpl	.-8      	; 0x4e48 <_turn_off+0x4a>
    4e50:	84 2b       	or	r24, r20
    4e52:	8c 93       	st	X, r24
    4e54:	08 95       	ret
    4e56:	fc 01       	movw	r30, r24
    4e58:	ee 0f       	add	r30, r30
    4e5a:	ff 1f       	adc	r31, r31
    4e5c:	df 01       	movw	r26, r30
    4e5e:	a8 0f       	add	r26, r24
    4e60:	b9 1f       	adc	r27, r25
    4e62:	aa 0f       	add	r26, r26
    4e64:	bb 1f       	adc	r27, r27
    4e66:	a9 53       	subi	r26, 0x39	; 57
    4e68:	b7 4e       	sbci	r27, 0xE7	; 231
    4e6a:	0d 90       	ld	r0, X+
    4e6c:	bc 91       	ld	r27, X
    4e6e:	a0 2d       	mov	r26, r0
    4e70:	2c 91       	ld	r18, X
    4e72:	e8 0f       	add	r30, r24
    4e74:	f9 1f       	adc	r31, r25
    4e76:	ee 0f       	add	r30, r30
    4e78:	ff 1f       	adc	r31, r31
    4e7a:	e9 53       	subi	r30, 0x39	; 57
    4e7c:	f7 4e       	sbci	r31, 0xE7	; 231
    4e7e:	81 e0       	ldi	r24, 0x01	; 1
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	02 80       	ldd	r0, Z+2	; 0x02
    4e84:	02 c0       	rjmp	.+4      	; 0x4e8a <_turn_off+0x8c>
    4e86:	88 0f       	add	r24, r24
    4e88:	99 1f       	adc	r25, r25
    4e8a:	0a 94       	dec	r0
    4e8c:	e2 f7       	brpl	.-8      	; 0x4e86 <_turn_off+0x88>
    4e8e:	80 95       	com	r24
    4e90:	82 23       	and	r24, r18
    4e92:	8c 93       	st	X, r24
    4e94:	08 95       	ret

00004e96 <_turn_on>:
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	fc 01       	movw	r30, r24
    4e9a:	ee 0f       	add	r30, r30
    4e9c:	ff 1f       	adc	r31, r31
    4e9e:	e8 0f       	add	r30, r24
    4ea0:	f9 1f       	adc	r31, r25
    4ea2:	ee 0f       	add	r30, r30
    4ea4:	ff 1f       	adc	r31, r31
    4ea6:	e9 53       	subi	r30, 0x39	; 57
    4ea8:	f7 4e       	sbci	r31, 0xE7	; 231
    4eaa:	23 81       	ldd	r18, Z+3	; 0x03
    4eac:	21 11       	cpse	r18, r1
    4eae:	20 c0       	rjmp	.+64     	; 0x4ef0 <_turn_on+0x5a>
    4eb0:	9c 01       	movw	r18, r24
    4eb2:	22 0f       	add	r18, r18
    4eb4:	33 1f       	adc	r19, r19
    4eb6:	f9 01       	movw	r30, r18
    4eb8:	e8 0f       	add	r30, r24
    4eba:	f9 1f       	adc	r31, r25
    4ebc:	ee 0f       	add	r30, r30
    4ebe:	ff 1f       	adc	r31, r31
    4ec0:	e9 53       	subi	r30, 0x39	; 57
    4ec2:	f7 4e       	sbci	r31, 0xE7	; 231
    4ec4:	a0 81       	ld	r26, Z
    4ec6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ec8:	4c 91       	ld	r20, X
    4eca:	f9 01       	movw	r30, r18
    4ecc:	e8 0f       	add	r30, r24
    4ece:	f9 1f       	adc	r31, r25
    4ed0:	ee 0f       	add	r30, r30
    4ed2:	ff 1f       	adc	r31, r31
    4ed4:	e9 53       	subi	r30, 0x39	; 57
    4ed6:	f7 4e       	sbci	r31, 0xE7	; 231
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	02 80       	ldd	r0, Z+2	; 0x02
    4ede:	02 c0       	rjmp	.+4      	; 0x4ee4 <_turn_on+0x4e>
    4ee0:	88 0f       	add	r24, r24
    4ee2:	99 1f       	adc	r25, r25
    4ee4:	0a 94       	dec	r0
    4ee6:	e2 f7       	brpl	.-8      	; 0x4ee0 <_turn_on+0x4a>
    4ee8:	80 95       	com	r24
    4eea:	84 23       	and	r24, r20
    4eec:	8c 93       	st	X, r24
    4eee:	08 95       	ret
    4ef0:	fc 01       	movw	r30, r24
    4ef2:	ee 0f       	add	r30, r30
    4ef4:	ff 1f       	adc	r31, r31
    4ef6:	df 01       	movw	r26, r30
    4ef8:	a8 0f       	add	r26, r24
    4efa:	b9 1f       	adc	r27, r25
    4efc:	aa 0f       	add	r26, r26
    4efe:	bb 1f       	adc	r27, r27
    4f00:	a9 53       	subi	r26, 0x39	; 57
    4f02:	b7 4e       	sbci	r27, 0xE7	; 231
    4f04:	0d 90       	ld	r0, X+
    4f06:	bc 91       	ld	r27, X
    4f08:	a0 2d       	mov	r26, r0
    4f0a:	2c 91       	ld	r18, X
    4f0c:	e8 0f       	add	r30, r24
    4f0e:	f9 1f       	adc	r31, r25
    4f10:	ee 0f       	add	r30, r30
    4f12:	ff 1f       	adc	r31, r31
    4f14:	e9 53       	subi	r30, 0x39	; 57
    4f16:	f7 4e       	sbci	r31, 0xE7	; 231
    4f18:	81 e0       	ldi	r24, 0x01	; 1
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	02 80       	ldd	r0, Z+2	; 0x02
    4f1e:	02 c0       	rjmp	.+4      	; 0x4f24 <_turn_on+0x8e>
    4f20:	88 0f       	add	r24, r24
    4f22:	99 1f       	adc	r25, r25
    4f24:	0a 94       	dec	r0
    4f26:	e2 f7       	brpl	.-8      	; 0x4f20 <_turn_on+0x8a>
    4f28:	82 2b       	or	r24, r18
    4f2a:	8c 93       	st	X, r24
    4f2c:	08 95       	ret

00004f2e <_hal_led_task>:
    4f2e:	cc 24       	eor	r12, r12
    4f30:	c3 94       	inc	r12
    4f32:	d1 2c       	mov	r13, r1
    4f34:	68 94       	set
    4f36:	bb 24       	eor	r11, r11
    4f38:	b2 f8       	bld	r11, 2
    4f3a:	c7 ec       	ldi	r28, 0xC7	; 199
    4f3c:	d8 e1       	ldi	r29, 0x18	; 24
    4f3e:	10 e0       	ldi	r17, 0x00	; 0
    4f40:	8c 81       	ldd	r24, Y+4	; 0x04
    4f42:	81 30       	cpi	r24, 0x01	; 1
    4f44:	81 f0       	breq	.+32     	; 0x4f66 <_hal_led_task+0x38>
    4f46:	18 f1       	brcs	.+70     	; 0x4f8e <_hal_led_task+0x60>
    4f48:	82 30       	cpi	r24, 0x02	; 2
    4f4a:	61 f5       	brne	.+88     	; 0x4fa4 <_hal_led_task+0x76>
    4f4c:	e8 81       	ld	r30, Y
    4f4e:	f9 81       	ldd	r31, Y+1	; 0x01
    4f50:	20 81       	ld	r18, Z
    4f52:	c6 01       	movw	r24, r12
    4f54:	0a 80       	ldd	r0, Y+2	; 0x02
    4f56:	02 c0       	rjmp	.+4      	; 0x4f5c <_hal_led_task+0x2e>
    4f58:	88 0f       	add	r24, r24
    4f5a:	99 1f       	adc	r25, r25
    4f5c:	0a 94       	dec	r0
    4f5e:	e2 f7       	brpl	.-8      	; 0x4f58 <_hal_led_task+0x2a>
    4f60:	82 27       	eor	r24, r18
    4f62:	80 83       	st	Z, r24
    4f64:	1f c0       	rjmp	.+62     	; 0x4fa4 <_hal_led_task+0x76>
    4f66:	8d 81       	ldd	r24, Y+5	; 0x05
    4f68:	8f 5f       	subi	r24, 0xFF	; 255
    4f6a:	86 30       	cpi	r24, 0x06	; 6
    4f6c:	10 f4       	brcc	.+4      	; 0x4f72 <_hal_led_task+0x44>
    4f6e:	8d 83       	std	Y+5, r24	; 0x05
    4f70:	19 c0       	rjmp	.+50     	; 0x4fa4 <_hal_led_task+0x76>
    4f72:	1d 82       	std	Y+5, r1	; 0x05
    4f74:	e8 81       	ld	r30, Y
    4f76:	f9 81       	ldd	r31, Y+1	; 0x01
    4f78:	20 81       	ld	r18, Z
    4f7a:	c6 01       	movw	r24, r12
    4f7c:	0a 80       	ldd	r0, Y+2	; 0x02
    4f7e:	02 c0       	rjmp	.+4      	; 0x4f84 <_hal_led_task+0x56>
    4f80:	88 0f       	add	r24, r24
    4f82:	99 1f       	adc	r25, r25
    4f84:	0a 94       	dec	r0
    4f86:	e2 f7       	brpl	.-8      	; 0x4f80 <_hal_led_task+0x52>
    4f88:	82 27       	eor	r24, r18
    4f8a:	80 83       	st	Z, r24
    4f8c:	0b c0       	rjmp	.+22     	; 0x4fa4 <_hal_led_task+0x76>
    4f8e:	0d 81       	ldd	r16, Y+5	; 0x05
    4f90:	00 23       	and	r16, r16
    4f92:	29 f0       	breq	.+10     	; 0x4f9e <_hal_led_task+0x70>
    4f94:	81 2f       	mov	r24, r17
    4f96:	7f df       	rcall	.-258    	; 0x4e96 <_turn_on>
    4f98:	01 50       	subi	r16, 0x01	; 1
    4f9a:	0d 83       	std	Y+5, r16	; 0x05
    4f9c:	03 c0       	rjmp	.+6      	; 0x4fa4 <_hal_led_task+0x76>
    4f9e:	bc 82       	std	Y+4, r11	; 0x04
    4fa0:	81 2f       	mov	r24, r17
    4fa2:	2d df       	rcall	.-422    	; 0x4dfe <_turn_off>
    4fa4:	1f 5f       	subi	r17, 0xFF	; 255
    4fa6:	26 96       	adiw	r28, 0x06	; 6
    4fa8:	14 30       	cpi	r17, 0x04	; 4
    4faa:	51 f6       	brne	.-108    	; 0x4f40 <_hal_led_task+0x12>
    4fac:	6c e0       	ldi	r22, 0x0C	; 12
    4fae:	70 e0       	ldi	r23, 0x00	; 0
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	0e 94 54 12 	call	0x24a8	; 0x24a8 <vTaskDelay>
    4fb8:	c0 cf       	rjmp	.-128    	; 0x4f3a <_hal_led_task+0xc>

00004fba <status_leds_initialise>:
    4fba:	ef 92       	push	r14
    4fbc:	ff 92       	push	r15
    4fbe:	0f 93       	push	r16
    4fc0:	1f 93       	push	r17
    4fc2:	cf 93       	push	r28
    4fc4:	df 93       	push	r29
    4fc6:	08 2f       	mov	r16, r24
    4fc8:	80 e4       	ldi	r24, 0x40	; 64
    4fca:	87 b9       	out	0x07, r24	; 7
    4fcc:	c7 ec       	ldi	r28, 0xC7	; 199
    4fce:	d8 e1       	ldi	r29, 0x18	; 24
    4fd0:	0f 2e       	mov	r0, r31
    4fd2:	f8 e2       	ldi	r31, 0x28	; 40
    4fd4:	ef 2e       	mov	r14, r31
    4fd6:	f1 2c       	mov	r15, r1
    4fd8:	f0 2d       	mov	r31, r0
    4fda:	f9 82       	std	Y+1, r15	; 0x01
    4fdc:	e8 82       	st	Y, r14
    4fde:	86 e0       	ldi	r24, 0x06	; 6
    4fe0:	8a 83       	std	Y+2, r24	; 0x02
    4fe2:	1b 82       	std	Y+3, r1	; 0x03
    4fe4:	14 e0       	ldi	r17, 0x04	; 4
    4fe6:	1c 83       	std	Y+4, r17	; 0x04
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	09 df       	rcall	.-494    	; 0x4dfe <_turn_off>
    4fec:	80 e8       	ldi	r24, 0x80	; 128
    4fee:	87 b9       	out	0x07, r24	; 7
    4ff0:	ff 82       	std	Y+7, r15	; 0x07
    4ff2:	ee 82       	std	Y+6, r14	; 0x06
    4ff4:	87 e0       	ldi	r24, 0x07	; 7
    4ff6:	88 87       	std	Y+8, r24	; 0x08
    4ff8:	19 86       	std	Y+9, r1	; 0x09
    4ffa:	1a 87       	std	Y+10, r17	; 0x0a
    4ffc:	81 e0       	ldi	r24, 0x01	; 1
    4ffe:	ff de       	rcall	.-514    	; 0x4dfe <_turn_off>
    5000:	80 e2       	ldi	r24, 0x20	; 32
    5002:	83 bb       	out	0x13, r24	; 19
    5004:	84 e3       	ldi	r24, 0x34	; 52
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	9d 87       	std	Y+13, r25	; 0x0d
    500a:	8c 87       	std	Y+12, r24	; 0x0c
    500c:	85 e0       	ldi	r24, 0x05	; 5
    500e:	8e 87       	std	Y+14, r24	; 0x0e
    5010:	1f 86       	std	Y+15, r1	; 0x0f
    5012:	18 8b       	std	Y+16, r17	; 0x10
    5014:	82 e0       	ldi	r24, 0x02	; 2
    5016:	f3 de       	rcall	.-538    	; 0x4dfe <_turn_off>
    5018:	80 e1       	ldi	r24, 0x10	; 16
    501a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    501e:	82 e0       	ldi	r24, 0x02	; 2
    5020:	91 e0       	ldi	r25, 0x01	; 1
    5022:	9b 8b       	std	Y+19, r25	; 0x13
    5024:	8a 8b       	std	Y+18, r24	; 0x12
    5026:	1c 8b       	std	Y+20, r17	; 0x14
    5028:	1d 8a       	std	Y+21, r1	; 0x15
    502a:	1e 8b       	std	Y+22, r17	; 0x16
    502c:	83 e0       	ldi	r24, 0x03	; 3
    502e:	e7 de       	rcall	.-562    	; 0x4dfe <_turn_off>
    5030:	e1 2c       	mov	r14, r1
    5032:	f1 2c       	mov	r15, r1
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	40 ec       	ldi	r20, 0xC0	; 192
    503a:	50 e0       	ldi	r21, 0x00	; 0
    503c:	6c ef       	ldi	r22, 0xFC	; 252
    503e:	78 e0       	ldi	r23, 0x08	; 8
    5040:	87 e9       	ldi	r24, 0x97	; 151
    5042:	97 e2       	ldi	r25, 0x27	; 39
    5044:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskCreate>
    5048:	df 91       	pop	r29
    504a:	cf 91       	pop	r28
    504c:	1f 91       	pop	r17
    504e:	0f 91       	pop	r16
    5050:	ff 90       	pop	r15
    5052:	ef 90       	pop	r14
    5054:	08 95       	ret

00005056 <status_leds_slowBlink>:
    5056:	cf 93       	push	r28
    5058:	df 93       	push	r29
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	fc 01       	movw	r30, r24
    505e:	ee 0f       	add	r30, r30
    5060:	ff 1f       	adc	r31, r31
    5062:	df 01       	movw	r26, r30
    5064:	a8 0f       	add	r26, r24
    5066:	b9 1f       	adc	r27, r25
    5068:	aa 0f       	add	r26, r26
    506a:	bb 1f       	adc	r27, r27
    506c:	a9 53       	subi	r26, 0x39	; 57
    506e:	b7 4e       	sbci	r27, 0xE7	; 231
    5070:	cd 91       	ld	r28, X+
    5072:	dc 91       	ld	r29, X
    5074:	11 97       	sbiw	r26, 0x01	; 1
    5076:	48 81       	ld	r20, Y
    5078:	21 e0       	ldi	r18, 0x01	; 1
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	12 96       	adiw	r26, 0x02	; 2
    507e:	0c 90       	ld	r0, X
    5080:	12 97       	sbiw	r26, 0x02	; 2
    5082:	02 c0       	rjmp	.+4      	; 0x5088 <status_leds_slowBlink+0x32>
    5084:	22 0f       	add	r18, r18
    5086:	33 1f       	adc	r19, r19
    5088:	0a 94       	dec	r0
    508a:	e2 f7       	brpl	.-8      	; 0x5084 <status_leds_slowBlink+0x2e>
    508c:	24 27       	eor	r18, r20
    508e:	28 83       	st	Y, r18
    5090:	fd 01       	movw	r30, r26
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	84 83       	std	Z+4, r24	; 0x04
    5096:	df 91       	pop	r29
    5098:	cf 91       	pop	r28
    509a:	08 95       	ret

0000509c <status_leds_fastBlink>:
    509c:	cf 93       	push	r28
    509e:	df 93       	push	r29
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	fc 01       	movw	r30, r24
    50a4:	ee 0f       	add	r30, r30
    50a6:	ff 1f       	adc	r31, r31
    50a8:	df 01       	movw	r26, r30
    50aa:	a8 0f       	add	r26, r24
    50ac:	b9 1f       	adc	r27, r25
    50ae:	aa 0f       	add	r26, r26
    50b0:	bb 1f       	adc	r27, r27
    50b2:	a9 53       	subi	r26, 0x39	; 57
    50b4:	b7 4e       	sbci	r27, 0xE7	; 231
    50b6:	cd 91       	ld	r28, X+
    50b8:	dc 91       	ld	r29, X
    50ba:	11 97       	sbiw	r26, 0x01	; 1
    50bc:	48 81       	ld	r20, Y
    50be:	21 e0       	ldi	r18, 0x01	; 1
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	12 96       	adiw	r26, 0x02	; 2
    50c4:	0c 90       	ld	r0, X
    50c6:	12 97       	sbiw	r26, 0x02	; 2
    50c8:	02 c0       	rjmp	.+4      	; 0x50ce <status_leds_fastBlink+0x32>
    50ca:	22 0f       	add	r18, r18
    50cc:	33 1f       	adc	r19, r19
    50ce:	0a 94       	dec	r0
    50d0:	e2 f7       	brpl	.-8      	; 0x50ca <status_leds_fastBlink+0x2e>
    50d2:	24 27       	eor	r18, r20
    50d4:	28 83       	st	Y, r18
    50d6:	fd 01       	movw	r30, r26
    50d8:	82 e0       	ldi	r24, 0x02	; 2
    50da:	84 83       	std	Z+4, r24	; 0x04
    50dc:	df 91       	pop	r29
    50de:	cf 91       	pop	r28
    50e0:	08 95       	ret

000050e2 <status_leds_ledOn>:
    50e2:	28 2f       	mov	r18, r24
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	f9 01       	movw	r30, r18
    50e8:	ee 0f       	add	r30, r30
    50ea:	ff 1f       	adc	r31, r31
    50ec:	e2 0f       	add	r30, r18
    50ee:	f3 1f       	adc	r31, r19
    50f0:	ee 0f       	add	r30, r30
    50f2:	ff 1f       	adc	r31, r31
    50f4:	e9 53       	subi	r30, 0x39	; 57
    50f6:	f7 4e       	sbci	r31, 0xE7	; 231
    50f8:	93 e0       	ldi	r25, 0x03	; 3
    50fa:	94 83       	std	Z+4, r25	; 0x04
    50fc:	cc ce       	rjmp	.-616    	; 0x4e96 <_turn_on>
    50fe:	08 95       	ret

00005100 <status_leds_ledOff>:
    5100:	28 2f       	mov	r18, r24
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	f9 01       	movw	r30, r18
    5106:	ee 0f       	add	r30, r30
    5108:	ff 1f       	adc	r31, r31
    510a:	e2 0f       	add	r30, r18
    510c:	f3 1f       	adc	r31, r19
    510e:	ee 0f       	add	r30, r30
    5110:	ff 1f       	adc	r31, r31
    5112:	e9 53       	subi	r30, 0x39	; 57
    5114:	f7 4e       	sbci	r31, 0xE7	; 231
    5116:	94 e0       	ldi	r25, 0x04	; 4
    5118:	94 83       	std	Z+4, r25	; 0x04
    511a:	71 ce       	rjmp	.-798    	; 0x4dfe <_turn_off>
    511c:	08 95       	ret

0000511e <status_leds_longPuls>:
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	fc 01       	movw	r30, r24
    5122:	ee 0f       	add	r30, r30
    5124:	ff 1f       	adc	r31, r31
    5126:	df 01       	movw	r26, r30
    5128:	a8 0f       	add	r26, r24
    512a:	b9 1f       	adc	r27, r25
    512c:	aa 0f       	add	r26, r26
    512e:	bb 1f       	adc	r27, r27
    5130:	a9 53       	subi	r26, 0x39	; 57
    5132:	b7 4e       	sbci	r27, 0xE7	; 231
    5134:	26 e0       	ldi	r18, 0x06	; 6
    5136:	15 96       	adiw	r26, 0x05	; 5
    5138:	2c 93       	st	X, r18
    513a:	15 97       	sbiw	r26, 0x05	; 5
    513c:	fd 01       	movw	r30, r26
    513e:	14 82       	std	Z+4, r1	; 0x04
    5140:	08 95       	ret

00005142 <status_leds_shortPuls>:
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	fc 01       	movw	r30, r24
    5146:	ee 0f       	add	r30, r30
    5148:	ff 1f       	adc	r31, r31
    514a:	df 01       	movw	r26, r30
    514c:	a8 0f       	add	r26, r24
    514e:	b9 1f       	adc	r27, r25
    5150:	aa 0f       	add	r26, r26
    5152:	bb 1f       	adc	r27, r27
    5154:	a9 53       	subi	r26, 0x39	; 57
    5156:	b7 4e       	sbci	r27, 0xE7	; 231
    5158:	15 96       	adiw	r26, 0x05	; 5
    515a:	1c 92       	st	X, r1
    515c:	15 97       	sbiw	r26, 0x05	; 5
    515e:	fd 01       	movw	r30, r26
    5160:	14 82       	std	Z+4, r1	; 0x04
    5162:	08 95       	ret

00005164 <_initTwiInterface>:
    5164:	80 91 ed 18 	lds	r24, 0x18ED	; 0x8018ed <_twiIsInitiated>
    5168:	81 11       	cpse	r24, r1
    516a:	0c c0       	rjmp	.+24     	; 0x5184 <_initTwiInterface+0x20>
    516c:	8c e0       	ldi	r24, 0x0C	; 12
    516e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5172:	8f ef       	ldi	r24, 0xFF	; 255
    5174:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5178:	84 e0       	ldi	r24, 0x04	; 4
    517a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    517e:	81 e0       	ldi	r24, 0x01	; 1
    5180:	80 93 ed 18 	sts	0x18ED, r24	; 0x8018ed <_twiIsInitiated>
    5184:	08 95       	ret

00005186 <twiCreate>:
    5186:	af 92       	push	r10
    5188:	bf 92       	push	r11
    518a:	cf 92       	push	r12
    518c:	df 92       	push	r13
    518e:	ef 92       	push	r14
    5190:	ff 92       	push	r15
    5192:	0f 93       	push	r16
    5194:	1f 93       	push	r17
    5196:	cf 93       	push	r28
    5198:	df 93       	push	r29
    519a:	a8 2e       	mov	r10, r24
    519c:	b6 2e       	mov	r11, r22
    519e:	69 01       	movw	r12, r18
    51a0:	7a 01       	movw	r14, r20
    51a2:	84 e0       	ldi	r24, 0x04	; 4
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	3a d7       	rcall	.+3700   	; 0x601c <malloc>
    51a8:	ec 01       	movw	r28, r24
    51aa:	89 2b       	or	r24, r25
    51ac:	61 f1       	breq	.+88     	; 0x5206 <twiCreate+0x80>
    51ae:	a8 82       	st	Y, r10
    51b0:	81 e0       	ldi	r24, 0x01	; 1
    51b2:	b8 12       	cpse	r11, r24
    51b4:	12 c0       	rjmp	.+36     	; 0x51da <twiCreate+0x54>
    51b6:	c7 01       	movw	r24, r14
    51b8:	b6 01       	movw	r22, r12
    51ba:	20 ea       	ldi	r18, 0xA0	; 160
    51bc:	36 e8       	ldi	r19, 0x86	; 134
    51be:	41 e0       	ldi	r20, 0x01	; 1
    51c0:	50 e0       	ldi	r21, 0x00	; 0
    51c2:	02 d7       	rcall	.+3588   	; 0x5fc8 <__udivmodsi4>
    51c4:	da 01       	movw	r26, r20
    51c6:	c9 01       	movw	r24, r18
    51c8:	40 97       	sbiw	r24, 0x10	; 16
    51ca:	a1 09       	sbc	r26, r1
    51cc:	b1 09       	sbc	r27, r1
    51ce:	b6 95       	lsr	r27
    51d0:	a7 95       	ror	r26
    51d2:	97 95       	ror	r25
    51d4:	87 95       	ror	r24
    51d6:	89 83       	std	Y+1, r24	; 0x01
    51d8:	11 c0       	rjmp	.+34     	; 0x51fc <twiCreate+0x76>
    51da:	c7 01       	movw	r24, r14
    51dc:	b6 01       	movw	r22, r12
    51de:	20 e8       	ldi	r18, 0x80	; 128
    51e0:	3a e1       	ldi	r19, 0x1A	; 26
    51e2:	46 e0       	ldi	r20, 0x06	; 6
    51e4:	50 e0       	ldi	r21, 0x00	; 0
    51e6:	f0 d6       	rcall	.+3552   	; 0x5fc8 <__udivmodsi4>
    51e8:	da 01       	movw	r26, r20
    51ea:	c9 01       	movw	r24, r18
    51ec:	40 97       	sbiw	r24, 0x10	; 16
    51ee:	a1 09       	sbc	r26, r1
    51f0:	b1 09       	sbc	r27, r1
    51f2:	b6 95       	lsr	r27
    51f4:	a7 95       	ror	r26
    51f6:	97 95       	ror	r25
    51f8:	87 95       	ror	r24
    51fa:	89 83       	std	Y+1, r24	; 0x01
    51fc:	1b 83       	std	Y+3, r17	; 0x03
    51fe:	0a 83       	std	Y+2, r16	; 0x02
    5200:	8c 2f       	mov	r24, r28
    5202:	9d 2f       	mov	r25, r29
    5204:	02 c0       	rjmp	.+4      	; 0x520a <twiCreate+0x84>
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	df 91       	pop	r29
    520c:	cf 91       	pop	r28
    520e:	1f 91       	pop	r17
    5210:	0f 91       	pop	r16
    5212:	ff 90       	pop	r15
    5214:	ef 90       	pop	r14
    5216:	df 90       	pop	r13
    5218:	cf 90       	pop	r12
    521a:	bf 90       	pop	r11
    521c:	af 90       	pop	r10
    521e:	08 95       	ret

00005220 <twiIsBusy>:
    5220:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5224:	81 70       	andi	r24, 0x01	; 1
    5226:	08 95       	ret

00005228 <twiTransmit>:
    5228:	ff 92       	push	r15
    522a:	0f 93       	push	r16
    522c:	1f 93       	push	r17
    522e:	cf 93       	push	r28
    5230:	df 93       	push	r29
    5232:	00 97       	sbiw	r24, 0x00	; 0
    5234:	d1 f1       	breq	.+116    	; 0x52aa <twiTransmit+0x82>
    5236:	4a 30       	cpi	r20, 0x0A	; 10
    5238:	d0 f5       	brcc	.+116    	; 0x52ae <twiTransmit+0x86>
    523a:	f4 2e       	mov	r15, r20
    523c:	8b 01       	movw	r16, r22
    523e:	ec 01       	movw	r28, r24
    5240:	ef df       	rcall	.-34     	; 0x5220 <twiIsBusy>
    5242:	81 11       	cpse	r24, r1
    5244:	36 c0       	rjmp	.+108    	; 0x52b2 <twiTransmit+0x8a>
    5246:	80 91 e0 18 	lds	r24, 0x18E0	; 0x8018e0 <_twiCurrentHandler>
    524a:	90 91 e1 18 	lds	r25, 0x18E1	; 0x8018e1 <_twiCurrentHandler+0x1>
    524e:	c8 17       	cp	r28, r24
    5250:	d9 07       	cpc	r29, r25
    5252:	41 f0       	breq	.+16     	; 0x5264 <twiTransmit+0x3c>
    5254:	87 df       	rcall	.-242    	; 0x5164 <_initTwiInterface>
    5256:	89 81       	ldd	r24, Y+1	; 0x01
    5258:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    525c:	d0 93 e1 18 	sts	0x18E1, r29	; 0x8018e1 <_twiCurrentHandler+0x1>
    5260:	c0 93 e0 18 	sts	0x18E0, r28	; 0x8018e0 <_twiCurrentHandler>
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	8f 0d       	add	r24, r15
    5268:	80 93 e2 18 	sts	0x18E2, r24	; 0x8018e2 <_twiMessageLen>
    526c:	88 81       	ld	r24, Y
    526e:	88 0f       	add	r24, r24
    5270:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <_twiMessageBuffer>
    5274:	ff 20       	and	r15, r15
    5276:	89 f0       	breq	.+34     	; 0x529a <twiTransmit+0x72>
    5278:	f8 01       	movw	r30, r16
    527a:	a4 ee       	ldi	r26, 0xE4	; 228
    527c:	b8 e1       	ldi	r27, 0x18	; 24
    527e:	4f ef       	ldi	r20, 0xFF	; 255
    5280:	4f 0d       	add	r20, r15
    5282:	64 2f       	mov	r22, r20
    5284:	70 e0       	ldi	r23, 0x00	; 0
    5286:	cb 01       	movw	r24, r22
    5288:	01 96       	adiw	r24, 0x01	; 1
    528a:	b8 01       	movw	r22, r16
    528c:	68 0f       	add	r22, r24
    528e:	79 1f       	adc	r23, r25
    5290:	81 91       	ld	r24, Z+
    5292:	8d 93       	st	X+, r24
    5294:	e6 17       	cp	r30, r22
    5296:	f7 07       	cpc	r31, r23
    5298:	d9 f7       	brne	.-10     	; 0x5290 <twiTransmit+0x68>
    529a:	88 ef       	ldi	r24, 0xF8	; 248
    529c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    52a0:	85 ea       	ldi	r24, 0xA5	; 165
    52a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52a6:	84 e0       	ldi	r24, 0x04	; 4
    52a8:	05 c0       	rjmp	.+10     	; 0x52b4 <twiTransmit+0x8c>
    52aa:	86 e0       	ldi	r24, 0x06	; 6
    52ac:	03 c0       	rjmp	.+6      	; 0x52b4 <twiTransmit+0x8c>
    52ae:	87 e0       	ldi	r24, 0x07	; 7
    52b0:	01 c0       	rjmp	.+2      	; 0x52b4 <twiTransmit+0x8c>
    52b2:	82 e0       	ldi	r24, 0x02	; 2
    52b4:	df 91       	pop	r29
    52b6:	cf 91       	pop	r28
    52b8:	1f 91       	pop	r17
    52ba:	0f 91       	pop	r16
    52bc:	ff 90       	pop	r15
    52be:	08 95       	ret

000052c0 <twiReceive>:
    52c0:	1f 93       	push	r17
    52c2:	cf 93       	push	r28
    52c4:	df 93       	push	r29
    52c6:	00 97       	sbiw	r24, 0x00	; 0
    52c8:	29 f1       	breq	.+74     	; 0x5314 <twiReceive+0x54>
    52ca:	6b 30       	cpi	r22, 0x0B	; 11
    52cc:	28 f5       	brcc	.+74     	; 0x5318 <twiReceive+0x58>
    52ce:	16 2f       	mov	r17, r22
    52d0:	ec 01       	movw	r28, r24
    52d2:	a6 df       	rcall	.-180    	; 0x5220 <twiIsBusy>
    52d4:	81 11       	cpse	r24, r1
    52d6:	22 c0       	rjmp	.+68     	; 0x531c <twiReceive+0x5c>
    52d8:	80 91 e0 18 	lds	r24, 0x18E0	; 0x8018e0 <_twiCurrentHandler>
    52dc:	90 91 e1 18 	lds	r25, 0x18E1	; 0x8018e1 <_twiCurrentHandler+0x1>
    52e0:	c8 17       	cp	r28, r24
    52e2:	d9 07       	cpc	r29, r25
    52e4:	41 f0       	breq	.+16     	; 0x52f6 <twiReceive+0x36>
    52e6:	3e df       	rcall	.-388    	; 0x5164 <_initTwiInterface>
    52e8:	89 81       	ldd	r24, Y+1	; 0x01
    52ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    52ee:	d0 93 e1 18 	sts	0x18E1, r29	; 0x8018e1 <_twiCurrentHandler+0x1>
    52f2:	c0 93 e0 18 	sts	0x18E0, r28	; 0x8018e0 <_twiCurrentHandler>
    52f6:	10 93 e2 18 	sts	0x18E2, r17	; 0x8018e2 <_twiMessageLen>
    52fa:	88 81       	ld	r24, Y
    52fc:	88 0f       	add	r24, r24
    52fe:	81 60       	ori	r24, 0x01	; 1
    5300:	80 93 e3 18 	sts	0x18E3, r24	; 0x8018e3 <_twiMessageBuffer>
    5304:	88 ef       	ldi	r24, 0xF8	; 248
    5306:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    530a:	85 ea       	ldi	r24, 0xA5	; 165
    530c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5310:	85 e0       	ldi	r24, 0x05	; 5
    5312:	05 c0       	rjmp	.+10     	; 0x531e <twiReceive+0x5e>
    5314:	86 e0       	ldi	r24, 0x06	; 6
    5316:	03 c0       	rjmp	.+6      	; 0x531e <twiReceive+0x5e>
    5318:	87 e0       	ldi	r24, 0x07	; 7
    531a:	01 c0       	rjmp	.+2      	; 0x531e <twiReceive+0x5e>
    531c:	82 e0       	ldi	r24, 0x02	; 2
    531e:	df 91       	pop	r29
    5320:	cf 91       	pop	r28
    5322:	1f 91       	pop	r17
    5324:	08 95       	ret

00005326 <__vector_39>:
    5326:	1f 92       	push	r1
    5328:	0f 92       	push	r0
    532a:	0f b6       	in	r0, 0x3f	; 63
    532c:	0f 92       	push	r0
    532e:	11 24       	eor	r1, r1
    5330:	0b b6       	in	r0, 0x3b	; 59
    5332:	0f 92       	push	r0
    5334:	2f 93       	push	r18
    5336:	3f 93       	push	r19
    5338:	4f 93       	push	r20
    533a:	5f 93       	push	r21
    533c:	6f 93       	push	r22
    533e:	7f 93       	push	r23
    5340:	8f 93       	push	r24
    5342:	9f 93       	push	r25
    5344:	af 93       	push	r26
    5346:	bf 93       	push	r27
    5348:	ef 93       	push	r30
    534a:	ff 93       	push	r31
    534c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5350:	8e 2f       	mov	r24, r30
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	fc 01       	movw	r30, r24
    5356:	38 97       	sbiw	r30, 0x08	; 8
    5358:	e1 35       	cpi	r30, 0x51	; 81
    535a:	f1 05       	cpc	r31, r1
    535c:	08 f0       	brcs	.+2      	; 0x5360 <__vector_39+0x3a>
    535e:	75 c0       	rjmp	.+234    	; 0x544a <__vector_39+0x124>
    5360:	88 27       	eor	r24, r24
    5362:	e4 58       	subi	r30, 0x84	; 132
    5364:	ff 4f       	sbci	r31, 0xFF	; 255
    5366:	8f 4f       	sbci	r24, 0xFF	; 255
    5368:	51 c6       	rjmp	.+3234   	; 0x600c <__tablejump2__>
    536a:	10 92 df 18 	sts	0x18DF, r1	; 0x8018df <_index.1885>
    536e:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <_index.1885>
    5372:	80 91 e2 18 	lds	r24, 0x18E2	; 0x8018e2 <_twiMessageLen>
    5376:	e8 17       	cp	r30, r24
    5378:	70 f4       	brcc	.+28     	; 0x5396 <__vector_39+0x70>
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	8e 0f       	add	r24, r30
    537e:	80 93 df 18 	sts	0x18DF, r24	; 0x8018df <_index.1885>
    5382:	f0 e0       	ldi	r31, 0x00	; 0
    5384:	ed 51       	subi	r30, 0x1D	; 29
    5386:	f7 4e       	sbci	r31, 0xE7	; 231
    5388:	80 81       	ld	r24, Z
    538a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    538e:	85 e8       	ldi	r24, 0x85	; 133
    5390:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5394:	72 c0       	rjmp	.+228    	; 0x547a <__vector_39+0x154>
    5396:	84 e9       	ldi	r24, 0x94	; 148
    5398:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    539c:	80 91 e0 18 	lds	r24, 0x18E0	; 0x8018e0 <_twiCurrentHandler>
    53a0:	90 91 e1 18 	lds	r25, 0x18E1	; 0x8018e1 <_twiCurrentHandler+0x1>
    53a4:	dc 01       	movw	r26, r24
    53a6:	12 96       	adiw	r26, 0x02	; 2
    53a8:	ed 91       	ld	r30, X+
    53aa:	fc 91       	ld	r31, X
    53ac:	13 97       	sbiw	r26, 0x03	; 3
    53ae:	30 97       	sbiw	r30, 0x00	; 0
    53b0:	09 f4       	brne	.+2      	; 0x53b4 <__vector_39+0x8e>
    53b2:	63 c0       	rjmp	.+198    	; 0x547a <__vector_39+0x154>
    53b4:	20 e0       	ldi	r18, 0x00	; 0
    53b6:	40 e0       	ldi	r20, 0x00	; 0
    53b8:	50 e0       	ldi	r21, 0x00	; 0
    53ba:	64 e0       	ldi	r22, 0x04	; 4
    53bc:	19 95       	eicall
    53be:	5d c0       	rjmp	.+186    	; 0x547a <__vector_39+0x154>
    53c0:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <_index.1885>
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	8e 0f       	add	r24, r30
    53c8:	80 93 df 18 	sts	0x18DF, r24	; 0x8018df <_index.1885>
    53cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    53d0:	f0 e0       	ldi	r31, 0x00	; 0
    53d2:	ed 51       	subi	r30, 0x1D	; 29
    53d4:	f7 4e       	sbci	r31, 0xE7	; 231
    53d6:	80 83       	st	Z, r24
    53d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    53dc:	80 34       	cpi	r24, 0x40	; 64
    53de:	11 f4       	brne	.+4      	; 0x53e4 <__vector_39+0xbe>
    53e0:	10 92 df 18 	sts	0x18DF, r1	; 0x8018df <_index.1885>
    53e4:	20 91 df 18 	lds	r18, 0x18DF	; 0x8018df <_index.1885>
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	80 91 e2 18 	lds	r24, 0x18E2	; 0x8018e2 <_twiMessageLen>
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	01 97       	sbiw	r24, 0x01	; 1
    53f2:	28 17       	cp	r18, r24
    53f4:	39 07       	cpc	r19, r25
    53f6:	24 f4       	brge	.+8      	; 0x5400 <__vector_39+0xda>
    53f8:	85 ec       	ldi	r24, 0xC5	; 197
    53fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    53fe:	3d c0       	rjmp	.+122    	; 0x547a <__vector_39+0x154>
    5400:	85 e8       	ldi	r24, 0x85	; 133
    5402:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5406:	39 c0       	rjmp	.+114    	; 0x547a <__vector_39+0x154>
    5408:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    540c:	e0 91 df 18 	lds	r30, 0x18DF	; 0x8018df <_index.1885>
    5410:	f0 e0       	ldi	r31, 0x00	; 0
    5412:	ed 51       	subi	r30, 0x1D	; 29
    5414:	f7 4e       	sbci	r31, 0xE7	; 231
    5416:	80 83       	st	Z, r24
    5418:	84 e9       	ldi	r24, 0x94	; 148
    541a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    541e:	80 91 e0 18 	lds	r24, 0x18E0	; 0x8018e0 <_twiCurrentHandler>
    5422:	90 91 e1 18 	lds	r25, 0x18E1	; 0x8018e1 <_twiCurrentHandler+0x1>
    5426:	dc 01       	movw	r26, r24
    5428:	12 96       	adiw	r26, 0x02	; 2
    542a:	ed 91       	ld	r30, X+
    542c:	fc 91       	ld	r31, X
    542e:	13 97       	sbiw	r26, 0x03	; 3
    5430:	30 97       	sbiw	r30, 0x00	; 0
    5432:	19 f1       	breq	.+70     	; 0x547a <__vector_39+0x154>
    5434:	20 91 e2 18 	lds	r18, 0x18E2	; 0x8018e2 <_twiMessageLen>
    5438:	43 ee       	ldi	r20, 0xE3	; 227
    543a:	58 e1       	ldi	r21, 0x18	; 24
    543c:	65 e0       	ldi	r22, 0x05	; 5
    543e:	19 95       	eicall
    5440:	1c c0       	rjmp	.+56     	; 0x547a <__vector_39+0x154>
    5442:	85 ea       	ldi	r24, 0xA5	; 165
    5444:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5448:	18 c0       	rjmp	.+48     	; 0x547a <__vector_39+0x154>
    544a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    544e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5452:	84 e0       	ldi	r24, 0x04	; 4
    5454:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5458:	80 91 e0 18 	lds	r24, 0x18E0	; 0x8018e0 <_twiCurrentHandler>
    545c:	90 91 e1 18 	lds	r25, 0x18E1	; 0x8018e1 <_twiCurrentHandler+0x1>
    5460:	dc 01       	movw	r26, r24
    5462:	12 96       	adiw	r26, 0x02	; 2
    5464:	ed 91       	ld	r30, X+
    5466:	fc 91       	ld	r31, X
    5468:	13 97       	sbiw	r26, 0x03	; 3
    546a:	30 97       	sbiw	r30, 0x00	; 0
    546c:	31 f0       	breq	.+12     	; 0x547a <__vector_39+0x154>
    546e:	20 e0       	ldi	r18, 0x00	; 0
    5470:	40 e0       	ldi	r20, 0x00	; 0
    5472:	50 e0       	ldi	r21, 0x00	; 0
    5474:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5478:	19 95       	eicall
    547a:	ff 91       	pop	r31
    547c:	ef 91       	pop	r30
    547e:	bf 91       	pop	r27
    5480:	af 91       	pop	r26
    5482:	9f 91       	pop	r25
    5484:	8f 91       	pop	r24
    5486:	7f 91       	pop	r23
    5488:	6f 91       	pop	r22
    548a:	5f 91       	pop	r21
    548c:	4f 91       	pop	r20
    548e:	3f 91       	pop	r19
    5490:	2f 91       	pop	r18
    5492:	0f 90       	pop	r0
    5494:	0b be       	out	0x3b, r0	; 59
    5496:	0f 90       	pop	r0
    5498:	0f be       	out	0x3f, r0	; 63
    549a:	0f 90       	pop	r0
    549c:	1f 90       	pop	r1
    549e:	18 95       	reti

000054a0 <fifo_init>:
    54a0:	fc 01       	movw	r30, r24
    54a2:	41 11       	cpse	r20, r1
    54a4:	01 c0       	rjmp	.+2      	; 0x54a8 <fifo_init+0x8>
    54a6:	db d6       	rcall	.+3510   	; 0x625e <abort>
    54a8:	84 2f       	mov	r24, r20
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	9c 01       	movw	r18, r24
    54ae:	21 50       	subi	r18, 0x01	; 1
    54b0:	31 09       	sbc	r19, r1
    54b2:	82 23       	and	r24, r18
    54b4:	93 23       	and	r25, r19
    54b6:	89 2b       	or	r24, r25
    54b8:	09 f0       	breq	.+2      	; 0x54bc <fifo_init+0x1c>
    54ba:	d1 d6       	rcall	.+3490   	; 0x625e <abort>
    54bc:	41 38       	cpi	r20, 0x81	; 129
    54be:	08 f0       	brcs	.+2      	; 0x54c2 <fifo_init+0x22>
    54c0:	ce d6       	rcall	.+3484   	; 0x625e <abort>
    54c2:	12 82       	std	Z+2, r1	; 0x02
    54c4:	13 82       	std	Z+3, r1	; 0x03
    54c6:	44 83       	std	Z+4, r20	; 0x04
    54c8:	44 0f       	add	r20, r20
    54ca:	41 50       	subi	r20, 0x01	; 1
    54cc:	45 83       	std	Z+5, r20	; 0x05
    54ce:	71 83       	std	Z+1, r23	; 0x01
    54d0:	60 83       	st	Z, r22
    54d2:	80 e0       	ldi	r24, 0x00	; 0
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	08 95       	ret

000054d8 <vfprintf>:
    54d8:	2f 92       	push	r2
    54da:	3f 92       	push	r3
    54dc:	4f 92       	push	r4
    54de:	5f 92       	push	r5
    54e0:	6f 92       	push	r6
    54e2:	7f 92       	push	r7
    54e4:	8f 92       	push	r8
    54e6:	9f 92       	push	r9
    54e8:	af 92       	push	r10
    54ea:	bf 92       	push	r11
    54ec:	cf 92       	push	r12
    54ee:	df 92       	push	r13
    54f0:	ef 92       	push	r14
    54f2:	ff 92       	push	r15
    54f4:	0f 93       	push	r16
    54f6:	1f 93       	push	r17
    54f8:	cf 93       	push	r28
    54fa:	df 93       	push	r29
    54fc:	cd b7       	in	r28, 0x3d	; 61
    54fe:	de b7       	in	r29, 0x3e	; 62
    5500:	60 97       	sbiw	r28, 0x10	; 16
    5502:	0f b6       	in	r0, 0x3f	; 63
    5504:	f8 94       	cli
    5506:	de bf       	out	0x3e, r29	; 62
    5508:	0f be       	out	0x3f, r0	; 63
    550a:	cd bf       	out	0x3d, r28	; 61
    550c:	7c 01       	movw	r14, r24
    550e:	1b 01       	movw	r2, r22
    5510:	6a 01       	movw	r12, r20
    5512:	fc 01       	movw	r30, r24
    5514:	17 82       	std	Z+7, r1	; 0x07
    5516:	16 82       	std	Z+6, r1	; 0x06
    5518:	83 81       	ldd	r24, Z+3	; 0x03
    551a:	81 ff       	sbrs	r24, 1
    551c:	2a c3       	rjmp	.+1620   	; 0x5b72 <vfprintf+0x69a>
    551e:	9e 01       	movw	r18, r28
    5520:	2f 5f       	subi	r18, 0xFF	; 255
    5522:	3f 4f       	sbci	r19, 0xFF	; 255
    5524:	39 01       	movw	r6, r18
    5526:	f7 01       	movw	r30, r14
    5528:	93 81       	ldd	r25, Z+3	; 0x03
    552a:	f1 01       	movw	r30, r2
    552c:	93 fd       	sbrc	r25, 3
    552e:	85 91       	lpm	r24, Z+
    5530:	93 ff       	sbrs	r25, 3
    5532:	81 91       	ld	r24, Z+
    5534:	1f 01       	movw	r2, r30
    5536:	88 23       	and	r24, r24
    5538:	09 f4       	brne	.+2      	; 0x553c <vfprintf+0x64>
    553a:	17 c3       	rjmp	.+1582   	; 0x5b6a <vfprintf+0x692>
    553c:	85 32       	cpi	r24, 0x25	; 37
    553e:	39 f4       	brne	.+14     	; 0x554e <vfprintf+0x76>
    5540:	93 fd       	sbrc	r25, 3
    5542:	85 91       	lpm	r24, Z+
    5544:	93 ff       	sbrs	r25, 3
    5546:	81 91       	ld	r24, Z+
    5548:	1f 01       	movw	r2, r30
    554a:	85 32       	cpi	r24, 0x25	; 37
    554c:	31 f4       	brne	.+12     	; 0x555a <vfprintf+0x82>
    554e:	b7 01       	movw	r22, r14
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	d6 d7       	rcall	.+4012   	; 0x6500 <fputc>
    5554:	56 01       	movw	r10, r12
    5556:	65 01       	movw	r12, r10
    5558:	e6 cf       	rjmp	.-52     	; 0x5526 <vfprintf+0x4e>
    555a:	10 e0       	ldi	r17, 0x00	; 0
    555c:	51 2c       	mov	r5, r1
    555e:	91 2c       	mov	r9, r1
    5560:	ff e1       	ldi	r31, 0x1F	; 31
    5562:	f9 15       	cp	r31, r9
    5564:	d8 f0       	brcs	.+54     	; 0x559c <vfprintf+0xc4>
    5566:	8b 32       	cpi	r24, 0x2B	; 43
    5568:	79 f0       	breq	.+30     	; 0x5588 <vfprintf+0xb0>
    556a:	38 f4       	brcc	.+14     	; 0x557a <vfprintf+0xa2>
    556c:	80 32       	cpi	r24, 0x20	; 32
    556e:	79 f0       	breq	.+30     	; 0x558e <vfprintf+0xb6>
    5570:	83 32       	cpi	r24, 0x23	; 35
    5572:	a1 f4       	brne	.+40     	; 0x559c <vfprintf+0xc4>
    5574:	f9 2d       	mov	r31, r9
    5576:	f0 61       	ori	r31, 0x10	; 16
    5578:	2e c0       	rjmp	.+92     	; 0x55d6 <vfprintf+0xfe>
    557a:	8d 32       	cpi	r24, 0x2D	; 45
    557c:	61 f0       	breq	.+24     	; 0x5596 <vfprintf+0xbe>
    557e:	80 33       	cpi	r24, 0x30	; 48
    5580:	69 f4       	brne	.+26     	; 0x559c <vfprintf+0xc4>
    5582:	29 2d       	mov	r18, r9
    5584:	21 60       	ori	r18, 0x01	; 1
    5586:	2d c0       	rjmp	.+90     	; 0x55e2 <vfprintf+0x10a>
    5588:	39 2d       	mov	r19, r9
    558a:	32 60       	ori	r19, 0x02	; 2
    558c:	93 2e       	mov	r9, r19
    558e:	89 2d       	mov	r24, r9
    5590:	84 60       	ori	r24, 0x04	; 4
    5592:	98 2e       	mov	r9, r24
    5594:	2a c0       	rjmp	.+84     	; 0x55ea <vfprintf+0x112>
    5596:	e9 2d       	mov	r30, r9
    5598:	e8 60       	ori	r30, 0x08	; 8
    559a:	15 c0       	rjmp	.+42     	; 0x55c6 <vfprintf+0xee>
    559c:	97 fc       	sbrc	r9, 7
    559e:	2d c0       	rjmp	.+90     	; 0x55fa <vfprintf+0x122>
    55a0:	20 ed       	ldi	r18, 0xD0	; 208
    55a2:	28 0f       	add	r18, r24
    55a4:	2a 30       	cpi	r18, 0x0A	; 10
    55a6:	88 f4       	brcc	.+34     	; 0x55ca <vfprintf+0xf2>
    55a8:	96 fe       	sbrs	r9, 6
    55aa:	06 c0       	rjmp	.+12     	; 0x55b8 <vfprintf+0xe0>
    55ac:	3a e0       	ldi	r19, 0x0A	; 10
    55ae:	13 9f       	mul	r17, r19
    55b0:	20 0d       	add	r18, r0
    55b2:	11 24       	eor	r1, r1
    55b4:	12 2f       	mov	r17, r18
    55b6:	19 c0       	rjmp	.+50     	; 0x55ea <vfprintf+0x112>
    55b8:	8a e0       	ldi	r24, 0x0A	; 10
    55ba:	58 9e       	mul	r5, r24
    55bc:	20 0d       	add	r18, r0
    55be:	11 24       	eor	r1, r1
    55c0:	52 2e       	mov	r5, r18
    55c2:	e9 2d       	mov	r30, r9
    55c4:	e0 62       	ori	r30, 0x20	; 32
    55c6:	9e 2e       	mov	r9, r30
    55c8:	10 c0       	rjmp	.+32     	; 0x55ea <vfprintf+0x112>
    55ca:	8e 32       	cpi	r24, 0x2E	; 46
    55cc:	31 f4       	brne	.+12     	; 0x55da <vfprintf+0x102>
    55ce:	96 fc       	sbrc	r9, 6
    55d0:	cc c2       	rjmp	.+1432   	; 0x5b6a <vfprintf+0x692>
    55d2:	f9 2d       	mov	r31, r9
    55d4:	f0 64       	ori	r31, 0x40	; 64
    55d6:	9f 2e       	mov	r9, r31
    55d8:	08 c0       	rjmp	.+16     	; 0x55ea <vfprintf+0x112>
    55da:	8c 36       	cpi	r24, 0x6C	; 108
    55dc:	21 f4       	brne	.+8      	; 0x55e6 <vfprintf+0x10e>
    55de:	29 2d       	mov	r18, r9
    55e0:	20 68       	ori	r18, 0x80	; 128
    55e2:	92 2e       	mov	r9, r18
    55e4:	02 c0       	rjmp	.+4      	; 0x55ea <vfprintf+0x112>
    55e6:	88 36       	cpi	r24, 0x68	; 104
    55e8:	41 f4       	brne	.+16     	; 0x55fa <vfprintf+0x122>
    55ea:	f1 01       	movw	r30, r2
    55ec:	93 fd       	sbrc	r25, 3
    55ee:	85 91       	lpm	r24, Z+
    55f0:	93 ff       	sbrs	r25, 3
    55f2:	81 91       	ld	r24, Z+
    55f4:	1f 01       	movw	r2, r30
    55f6:	81 11       	cpse	r24, r1
    55f8:	b3 cf       	rjmp	.-154    	; 0x5560 <vfprintf+0x88>
    55fa:	9b eb       	ldi	r25, 0xBB	; 187
    55fc:	98 0f       	add	r25, r24
    55fe:	93 30       	cpi	r25, 0x03	; 3
    5600:	20 f4       	brcc	.+8      	; 0x560a <vfprintf+0x132>
    5602:	99 2d       	mov	r25, r9
    5604:	90 61       	ori	r25, 0x10	; 16
    5606:	80 5e       	subi	r24, 0xE0	; 224
    5608:	07 c0       	rjmp	.+14     	; 0x5618 <vfprintf+0x140>
    560a:	9b e9       	ldi	r25, 0x9B	; 155
    560c:	98 0f       	add	r25, r24
    560e:	93 30       	cpi	r25, 0x03	; 3
    5610:	08 f0       	brcs	.+2      	; 0x5614 <vfprintf+0x13c>
    5612:	59 c1       	rjmp	.+690    	; 0x58c6 <vfprintf+0x3ee>
    5614:	99 2d       	mov	r25, r9
    5616:	9f 7e       	andi	r25, 0xEF	; 239
    5618:	96 ff       	sbrs	r25, 6
    561a:	16 e0       	ldi	r17, 0x06	; 6
    561c:	9f 73       	andi	r25, 0x3F	; 63
    561e:	99 2e       	mov	r9, r25
    5620:	85 36       	cpi	r24, 0x65	; 101
    5622:	19 f4       	brne	.+6      	; 0x562a <vfprintf+0x152>
    5624:	90 64       	ori	r25, 0x40	; 64
    5626:	99 2e       	mov	r9, r25
    5628:	08 c0       	rjmp	.+16     	; 0x563a <vfprintf+0x162>
    562a:	86 36       	cpi	r24, 0x66	; 102
    562c:	21 f4       	brne	.+8      	; 0x5636 <vfprintf+0x15e>
    562e:	39 2f       	mov	r19, r25
    5630:	30 68       	ori	r19, 0x80	; 128
    5632:	93 2e       	mov	r9, r19
    5634:	02 c0       	rjmp	.+4      	; 0x563a <vfprintf+0x162>
    5636:	11 11       	cpse	r17, r1
    5638:	11 50       	subi	r17, 0x01	; 1
    563a:	97 fe       	sbrs	r9, 7
    563c:	07 c0       	rjmp	.+14     	; 0x564c <vfprintf+0x174>
    563e:	1c 33       	cpi	r17, 0x3C	; 60
    5640:	50 f4       	brcc	.+20     	; 0x5656 <vfprintf+0x17e>
    5642:	44 24       	eor	r4, r4
    5644:	43 94       	inc	r4
    5646:	41 0e       	add	r4, r17
    5648:	27 e0       	ldi	r18, 0x07	; 7
    564a:	0b c0       	rjmp	.+22     	; 0x5662 <vfprintf+0x18a>
    564c:	18 30       	cpi	r17, 0x08	; 8
    564e:	38 f0       	brcs	.+14     	; 0x565e <vfprintf+0x186>
    5650:	27 e0       	ldi	r18, 0x07	; 7
    5652:	17 e0       	ldi	r17, 0x07	; 7
    5654:	05 c0       	rjmp	.+10     	; 0x5660 <vfprintf+0x188>
    5656:	27 e0       	ldi	r18, 0x07	; 7
    5658:	9c e3       	ldi	r25, 0x3C	; 60
    565a:	49 2e       	mov	r4, r25
    565c:	02 c0       	rjmp	.+4      	; 0x5662 <vfprintf+0x18a>
    565e:	21 2f       	mov	r18, r17
    5660:	41 2c       	mov	r4, r1
    5662:	56 01       	movw	r10, r12
    5664:	84 e0       	ldi	r24, 0x04	; 4
    5666:	a8 0e       	add	r10, r24
    5668:	b1 1c       	adc	r11, r1
    566a:	f6 01       	movw	r30, r12
    566c:	60 81       	ld	r22, Z
    566e:	71 81       	ldd	r23, Z+1	; 0x01
    5670:	82 81       	ldd	r24, Z+2	; 0x02
    5672:	93 81       	ldd	r25, Z+3	; 0x03
    5674:	04 2d       	mov	r16, r4
    5676:	a3 01       	movw	r20, r6
    5678:	f6 d5       	rcall	.+3052   	; 0x6266 <__ftoa_engine>
    567a:	6c 01       	movw	r12, r24
    567c:	f9 81       	ldd	r31, Y+1	; 0x01
    567e:	fc 87       	std	Y+12, r31	; 0x0c
    5680:	f0 ff       	sbrs	r31, 0
    5682:	02 c0       	rjmp	.+4      	; 0x5688 <vfprintf+0x1b0>
    5684:	f3 ff       	sbrs	r31, 3
    5686:	06 c0       	rjmp	.+12     	; 0x5694 <vfprintf+0x1bc>
    5688:	91 fc       	sbrc	r9, 1
    568a:	06 c0       	rjmp	.+12     	; 0x5698 <vfprintf+0x1c0>
    568c:	92 fe       	sbrs	r9, 2
    568e:	06 c0       	rjmp	.+12     	; 0x569c <vfprintf+0x1c4>
    5690:	00 e2       	ldi	r16, 0x20	; 32
    5692:	05 c0       	rjmp	.+10     	; 0x569e <vfprintf+0x1c6>
    5694:	0d e2       	ldi	r16, 0x2D	; 45
    5696:	03 c0       	rjmp	.+6      	; 0x569e <vfprintf+0x1c6>
    5698:	0b e2       	ldi	r16, 0x2B	; 43
    569a:	01 c0       	rjmp	.+2      	; 0x569e <vfprintf+0x1c6>
    569c:	00 e0       	ldi	r16, 0x00	; 0
    569e:	8c 85       	ldd	r24, Y+12	; 0x0c
    56a0:	8c 70       	andi	r24, 0x0C	; 12
    56a2:	19 f0       	breq	.+6      	; 0x56aa <vfprintf+0x1d2>
    56a4:	01 11       	cpse	r16, r1
    56a6:	43 c2       	rjmp	.+1158   	; 0x5b2e <vfprintf+0x656>
    56a8:	80 c2       	rjmp	.+1280   	; 0x5baa <vfprintf+0x6d2>
    56aa:	97 fe       	sbrs	r9, 7
    56ac:	10 c0       	rjmp	.+32     	; 0x56ce <vfprintf+0x1f6>
    56ae:	4c 0c       	add	r4, r12
    56b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    56b2:	f4 ff       	sbrs	r31, 4
    56b4:	04 c0       	rjmp	.+8      	; 0x56be <vfprintf+0x1e6>
    56b6:	8a 81       	ldd	r24, Y+2	; 0x02
    56b8:	81 33       	cpi	r24, 0x31	; 49
    56ba:	09 f4       	brne	.+2      	; 0x56be <vfprintf+0x1e6>
    56bc:	4a 94       	dec	r4
    56be:	14 14       	cp	r1, r4
    56c0:	74 f5       	brge	.+92     	; 0x571e <vfprintf+0x246>
    56c2:	28 e0       	ldi	r18, 0x08	; 8
    56c4:	24 15       	cp	r18, r4
    56c6:	78 f5       	brcc	.+94     	; 0x5726 <vfprintf+0x24e>
    56c8:	88 e0       	ldi	r24, 0x08	; 8
    56ca:	48 2e       	mov	r4, r24
    56cc:	2c c0       	rjmp	.+88     	; 0x5726 <vfprintf+0x24e>
    56ce:	96 fc       	sbrc	r9, 6
    56d0:	2a c0       	rjmp	.+84     	; 0x5726 <vfprintf+0x24e>
    56d2:	81 2f       	mov	r24, r17
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	8c 15       	cp	r24, r12
    56d8:	9d 05       	cpc	r25, r13
    56da:	9c f0       	brlt	.+38     	; 0x5702 <vfprintf+0x22a>
    56dc:	3c ef       	ldi	r19, 0xFC	; 252
    56de:	c3 16       	cp	r12, r19
    56e0:	3f ef       	ldi	r19, 0xFF	; 255
    56e2:	d3 06       	cpc	r13, r19
    56e4:	74 f0       	brlt	.+28     	; 0x5702 <vfprintf+0x22a>
    56e6:	89 2d       	mov	r24, r9
    56e8:	80 68       	ori	r24, 0x80	; 128
    56ea:	98 2e       	mov	r9, r24
    56ec:	0a c0       	rjmp	.+20     	; 0x5702 <vfprintf+0x22a>
    56ee:	e2 e0       	ldi	r30, 0x02	; 2
    56f0:	f0 e0       	ldi	r31, 0x00	; 0
    56f2:	ec 0f       	add	r30, r28
    56f4:	fd 1f       	adc	r31, r29
    56f6:	e1 0f       	add	r30, r17
    56f8:	f1 1d       	adc	r31, r1
    56fa:	80 81       	ld	r24, Z
    56fc:	80 33       	cpi	r24, 0x30	; 48
    56fe:	19 f4       	brne	.+6      	; 0x5706 <vfprintf+0x22e>
    5700:	11 50       	subi	r17, 0x01	; 1
    5702:	11 11       	cpse	r17, r1
    5704:	f4 cf       	rjmp	.-24     	; 0x56ee <vfprintf+0x216>
    5706:	97 fe       	sbrs	r9, 7
    5708:	0e c0       	rjmp	.+28     	; 0x5726 <vfprintf+0x24e>
    570a:	44 24       	eor	r4, r4
    570c:	43 94       	inc	r4
    570e:	41 0e       	add	r4, r17
    5710:	81 2f       	mov	r24, r17
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	c8 16       	cp	r12, r24
    5716:	d9 06       	cpc	r13, r25
    5718:	2c f4       	brge	.+10     	; 0x5724 <vfprintf+0x24c>
    571a:	1c 19       	sub	r17, r12
    571c:	04 c0       	rjmp	.+8      	; 0x5726 <vfprintf+0x24e>
    571e:	44 24       	eor	r4, r4
    5720:	43 94       	inc	r4
    5722:	01 c0       	rjmp	.+2      	; 0x5726 <vfprintf+0x24e>
    5724:	10 e0       	ldi	r17, 0x00	; 0
    5726:	97 fe       	sbrs	r9, 7
    5728:	06 c0       	rjmp	.+12     	; 0x5736 <vfprintf+0x25e>
    572a:	1c 14       	cp	r1, r12
    572c:	1d 04       	cpc	r1, r13
    572e:	34 f4       	brge	.+12     	; 0x573c <vfprintf+0x264>
    5730:	c6 01       	movw	r24, r12
    5732:	01 96       	adiw	r24, 0x01	; 1
    5734:	05 c0       	rjmp	.+10     	; 0x5740 <vfprintf+0x268>
    5736:	85 e0       	ldi	r24, 0x05	; 5
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	02 c0       	rjmp	.+4      	; 0x5740 <vfprintf+0x268>
    573c:	81 e0       	ldi	r24, 0x01	; 1
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	01 11       	cpse	r16, r1
    5742:	01 96       	adiw	r24, 0x01	; 1
    5744:	11 23       	and	r17, r17
    5746:	31 f0       	breq	.+12     	; 0x5754 <vfprintf+0x27c>
    5748:	21 2f       	mov	r18, r17
    574a:	30 e0       	ldi	r19, 0x00	; 0
    574c:	2f 5f       	subi	r18, 0xFF	; 255
    574e:	3f 4f       	sbci	r19, 0xFF	; 255
    5750:	82 0f       	add	r24, r18
    5752:	93 1f       	adc	r25, r19
    5754:	25 2d       	mov	r18, r5
    5756:	30 e0       	ldi	r19, 0x00	; 0
    5758:	82 17       	cp	r24, r18
    575a:	93 07       	cpc	r25, r19
    575c:	14 f4       	brge	.+4      	; 0x5762 <vfprintf+0x28a>
    575e:	58 1a       	sub	r5, r24
    5760:	01 c0       	rjmp	.+2      	; 0x5764 <vfprintf+0x28c>
    5762:	51 2c       	mov	r5, r1
    5764:	89 2d       	mov	r24, r9
    5766:	89 70       	andi	r24, 0x09	; 9
    5768:	41 f4       	brne	.+16     	; 0x577a <vfprintf+0x2a2>
    576a:	55 20       	and	r5, r5
    576c:	31 f0       	breq	.+12     	; 0x577a <vfprintf+0x2a2>
    576e:	b7 01       	movw	r22, r14
    5770:	80 e2       	ldi	r24, 0x20	; 32
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	c5 d6       	rcall	.+3466   	; 0x6500 <fputc>
    5776:	5a 94       	dec	r5
    5778:	f8 cf       	rjmp	.-16     	; 0x576a <vfprintf+0x292>
    577a:	00 23       	and	r16, r16
    577c:	21 f0       	breq	.+8      	; 0x5786 <vfprintf+0x2ae>
    577e:	b7 01       	movw	r22, r14
    5780:	80 2f       	mov	r24, r16
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	bd d6       	rcall	.+3450   	; 0x6500 <fputc>
    5786:	93 fc       	sbrc	r9, 3
    5788:	08 c0       	rjmp	.+16     	; 0x579a <vfprintf+0x2c2>
    578a:	55 20       	and	r5, r5
    578c:	31 f0       	breq	.+12     	; 0x579a <vfprintf+0x2c2>
    578e:	b7 01       	movw	r22, r14
    5790:	80 e3       	ldi	r24, 0x30	; 48
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	b5 d6       	rcall	.+3434   	; 0x6500 <fputc>
    5796:	5a 94       	dec	r5
    5798:	f8 cf       	rjmp	.-16     	; 0x578a <vfprintf+0x2b2>
    579a:	97 fe       	sbrs	r9, 7
    579c:	4a c0       	rjmp	.+148    	; 0x5832 <vfprintf+0x35a>
    579e:	46 01       	movw	r8, r12
    57a0:	d7 fe       	sbrs	r13, 7
    57a2:	02 c0       	rjmp	.+4      	; 0x57a8 <vfprintf+0x2d0>
    57a4:	81 2c       	mov	r8, r1
    57a6:	91 2c       	mov	r9, r1
    57a8:	c6 01       	movw	r24, r12
    57aa:	88 19       	sub	r24, r8
    57ac:	99 09       	sbc	r25, r9
    57ae:	f3 01       	movw	r30, r6
    57b0:	e8 0f       	add	r30, r24
    57b2:	f9 1f       	adc	r31, r25
    57b4:	fe 87       	std	Y+14, r31	; 0x0e
    57b6:	ed 87       	std	Y+13, r30	; 0x0d
    57b8:	96 01       	movw	r18, r12
    57ba:	24 19       	sub	r18, r4
    57bc:	31 09       	sbc	r19, r1
    57be:	38 8b       	std	Y+16, r19	; 0x10
    57c0:	2f 87       	std	Y+15, r18	; 0x0f
    57c2:	01 2f       	mov	r16, r17
    57c4:	10 e0       	ldi	r17, 0x00	; 0
    57c6:	11 95       	neg	r17
    57c8:	01 95       	neg	r16
    57ca:	11 09       	sbc	r17, r1
    57cc:	3f ef       	ldi	r19, 0xFF	; 255
    57ce:	83 16       	cp	r8, r19
    57d0:	93 06       	cpc	r9, r19
    57d2:	21 f4       	brne	.+8      	; 0x57dc <vfprintf+0x304>
    57d4:	b7 01       	movw	r22, r14
    57d6:	8e e2       	ldi	r24, 0x2E	; 46
    57d8:	90 e0       	ldi	r25, 0x00	; 0
    57da:	92 d6       	rcall	.+3364   	; 0x6500 <fputc>
    57dc:	c8 14       	cp	r12, r8
    57de:	d9 04       	cpc	r13, r9
    57e0:	4c f0       	brlt	.+18     	; 0x57f4 <vfprintf+0x31c>
    57e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    57e4:	98 89       	ldd	r25, Y+16	; 0x10
    57e6:	88 15       	cp	r24, r8
    57e8:	99 05       	cpc	r25, r9
    57ea:	24 f4       	brge	.+8      	; 0x57f4 <vfprintf+0x31c>
    57ec:	ed 85       	ldd	r30, Y+13	; 0x0d
    57ee:	fe 85       	ldd	r31, Y+14	; 0x0e
    57f0:	81 81       	ldd	r24, Z+1	; 0x01
    57f2:	01 c0       	rjmp	.+2      	; 0x57f6 <vfprintf+0x31e>
    57f4:	80 e3       	ldi	r24, 0x30	; 48
    57f6:	f1 e0       	ldi	r31, 0x01	; 1
    57f8:	8f 1a       	sub	r8, r31
    57fa:	91 08       	sbc	r9, r1
    57fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    57fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    5800:	2f 5f       	subi	r18, 0xFF	; 255
    5802:	3f 4f       	sbci	r19, 0xFF	; 255
    5804:	3e 87       	std	Y+14, r19	; 0x0e
    5806:	2d 87       	std	Y+13, r18	; 0x0d
    5808:	80 16       	cp	r8, r16
    580a:	91 06       	cpc	r9, r17
    580c:	24 f0       	brlt	.+8      	; 0x5816 <vfprintf+0x33e>
    580e:	b7 01       	movw	r22, r14
    5810:	90 e0       	ldi	r25, 0x00	; 0
    5812:	76 d6       	rcall	.+3308   	; 0x6500 <fputc>
    5814:	db cf       	rjmp	.-74     	; 0x57cc <vfprintf+0x2f4>
    5816:	c8 14       	cp	r12, r8
    5818:	d9 04       	cpc	r13, r9
    581a:	41 f4       	brne	.+16     	; 0x582c <vfprintf+0x354>
    581c:	9a 81       	ldd	r25, Y+2	; 0x02
    581e:	96 33       	cpi	r25, 0x36	; 54
    5820:	20 f4       	brcc	.+8      	; 0x582a <vfprintf+0x352>
    5822:	95 33       	cpi	r25, 0x35	; 53
    5824:	19 f4       	brne	.+6      	; 0x582c <vfprintf+0x354>
    5826:	3c 85       	ldd	r19, Y+12	; 0x0c
    5828:	34 ff       	sbrs	r19, 4
    582a:	81 e3       	ldi	r24, 0x31	; 49
    582c:	b7 01       	movw	r22, r14
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	48 c0       	rjmp	.+144    	; 0x58c2 <vfprintf+0x3ea>
    5832:	8a 81       	ldd	r24, Y+2	; 0x02
    5834:	81 33       	cpi	r24, 0x31	; 49
    5836:	19 f0       	breq	.+6      	; 0x583e <vfprintf+0x366>
    5838:	9c 85       	ldd	r25, Y+12	; 0x0c
    583a:	9f 7e       	andi	r25, 0xEF	; 239
    583c:	9c 87       	std	Y+12, r25	; 0x0c
    583e:	b7 01       	movw	r22, r14
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	5e d6       	rcall	.+3260   	; 0x6500 <fputc>
    5844:	11 11       	cpse	r17, r1
    5846:	05 c0       	rjmp	.+10     	; 0x5852 <vfprintf+0x37a>
    5848:	94 fc       	sbrc	r9, 4
    584a:	16 c0       	rjmp	.+44     	; 0x5878 <vfprintf+0x3a0>
    584c:	85 e6       	ldi	r24, 0x65	; 101
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	15 c0       	rjmp	.+42     	; 0x587c <vfprintf+0x3a4>
    5852:	b7 01       	movw	r22, r14
    5854:	8e e2       	ldi	r24, 0x2E	; 46
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	53 d6       	rcall	.+3238   	; 0x6500 <fputc>
    585a:	1e 5f       	subi	r17, 0xFE	; 254
    585c:	82 e0       	ldi	r24, 0x02	; 2
    585e:	01 e0       	ldi	r16, 0x01	; 1
    5860:	08 0f       	add	r16, r24
    5862:	f3 01       	movw	r30, r6
    5864:	e8 0f       	add	r30, r24
    5866:	f1 1d       	adc	r31, r1
    5868:	80 81       	ld	r24, Z
    586a:	b7 01       	movw	r22, r14
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	48 d6       	rcall	.+3216   	; 0x6500 <fputc>
    5870:	80 2f       	mov	r24, r16
    5872:	01 13       	cpse	r16, r17
    5874:	f4 cf       	rjmp	.-24     	; 0x585e <vfprintf+0x386>
    5876:	e8 cf       	rjmp	.-48     	; 0x5848 <vfprintf+0x370>
    5878:	85 e4       	ldi	r24, 0x45	; 69
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	b7 01       	movw	r22, r14
    587e:	40 d6       	rcall	.+3200   	; 0x6500 <fputc>
    5880:	d7 fc       	sbrc	r13, 7
    5882:	06 c0       	rjmp	.+12     	; 0x5890 <vfprintf+0x3b8>
    5884:	c1 14       	cp	r12, r1
    5886:	d1 04       	cpc	r13, r1
    5888:	41 f4       	brne	.+16     	; 0x589a <vfprintf+0x3c2>
    588a:	ec 85       	ldd	r30, Y+12	; 0x0c
    588c:	e4 ff       	sbrs	r30, 4
    588e:	05 c0       	rjmp	.+10     	; 0x589a <vfprintf+0x3c2>
    5890:	d1 94       	neg	r13
    5892:	c1 94       	neg	r12
    5894:	d1 08       	sbc	r13, r1
    5896:	8d e2       	ldi	r24, 0x2D	; 45
    5898:	01 c0       	rjmp	.+2      	; 0x589c <vfprintf+0x3c4>
    589a:	8b e2       	ldi	r24, 0x2B	; 43
    589c:	b7 01       	movw	r22, r14
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	2f d6       	rcall	.+3166   	; 0x6500 <fputc>
    58a2:	80 e3       	ldi	r24, 0x30	; 48
    58a4:	2a e0       	ldi	r18, 0x0A	; 10
    58a6:	c2 16       	cp	r12, r18
    58a8:	d1 04       	cpc	r13, r1
    58aa:	2c f0       	brlt	.+10     	; 0x58b6 <vfprintf+0x3de>
    58ac:	8f 5f       	subi	r24, 0xFF	; 255
    58ae:	fa e0       	ldi	r31, 0x0A	; 10
    58b0:	cf 1a       	sub	r12, r31
    58b2:	d1 08       	sbc	r13, r1
    58b4:	f7 cf       	rjmp	.-18     	; 0x58a4 <vfprintf+0x3cc>
    58b6:	b7 01       	movw	r22, r14
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	22 d6       	rcall	.+3140   	; 0x6500 <fputc>
    58bc:	b7 01       	movw	r22, r14
    58be:	c6 01       	movw	r24, r12
    58c0:	c0 96       	adiw	r24, 0x30	; 48
    58c2:	1e d6       	rcall	.+3132   	; 0x6500 <fputc>
    58c4:	49 c1       	rjmp	.+658    	; 0x5b58 <vfprintf+0x680>
    58c6:	83 36       	cpi	r24, 0x63	; 99
    58c8:	31 f0       	breq	.+12     	; 0x58d6 <vfprintf+0x3fe>
    58ca:	83 37       	cpi	r24, 0x73	; 115
    58cc:	79 f0       	breq	.+30     	; 0x58ec <vfprintf+0x414>
    58ce:	83 35       	cpi	r24, 0x53	; 83
    58d0:	09 f0       	breq	.+2      	; 0x58d4 <vfprintf+0x3fc>
    58d2:	52 c0       	rjmp	.+164    	; 0x5978 <vfprintf+0x4a0>
    58d4:	1f c0       	rjmp	.+62     	; 0x5914 <vfprintf+0x43c>
    58d6:	56 01       	movw	r10, r12
    58d8:	32 e0       	ldi	r19, 0x02	; 2
    58da:	a3 0e       	add	r10, r19
    58dc:	b1 1c       	adc	r11, r1
    58de:	f6 01       	movw	r30, r12
    58e0:	80 81       	ld	r24, Z
    58e2:	89 83       	std	Y+1, r24	; 0x01
    58e4:	01 e0       	ldi	r16, 0x01	; 1
    58e6:	10 e0       	ldi	r17, 0x00	; 0
    58e8:	63 01       	movw	r12, r6
    58ea:	11 c0       	rjmp	.+34     	; 0x590e <vfprintf+0x436>
    58ec:	56 01       	movw	r10, r12
    58ee:	f2 e0       	ldi	r31, 0x02	; 2
    58f0:	af 0e       	add	r10, r31
    58f2:	b1 1c       	adc	r11, r1
    58f4:	f6 01       	movw	r30, r12
    58f6:	c0 80       	ld	r12, Z
    58f8:	d1 80       	ldd	r13, Z+1	; 0x01
    58fa:	96 fe       	sbrs	r9, 6
    58fc:	03 c0       	rjmp	.+6      	; 0x5904 <vfprintf+0x42c>
    58fe:	61 2f       	mov	r22, r17
    5900:	70 e0       	ldi	r23, 0x00	; 0
    5902:	02 c0       	rjmp	.+4      	; 0x5908 <vfprintf+0x430>
    5904:	6f ef       	ldi	r22, 0xFF	; 255
    5906:	7f ef       	ldi	r23, 0xFF	; 255
    5908:	c6 01       	movw	r24, r12
    590a:	ef d5       	rcall	.+3038   	; 0x64ea <strnlen>
    590c:	8c 01       	movw	r16, r24
    590e:	f9 2d       	mov	r31, r9
    5910:	ff 77       	andi	r31, 0x7F	; 127
    5912:	13 c0       	rjmp	.+38     	; 0x593a <vfprintf+0x462>
    5914:	56 01       	movw	r10, r12
    5916:	22 e0       	ldi	r18, 0x02	; 2
    5918:	a2 0e       	add	r10, r18
    591a:	b1 1c       	adc	r11, r1
    591c:	f6 01       	movw	r30, r12
    591e:	c0 80       	ld	r12, Z
    5920:	d1 80       	ldd	r13, Z+1	; 0x01
    5922:	96 fe       	sbrs	r9, 6
    5924:	03 c0       	rjmp	.+6      	; 0x592c <vfprintf+0x454>
    5926:	61 2f       	mov	r22, r17
    5928:	70 e0       	ldi	r23, 0x00	; 0
    592a:	02 c0       	rjmp	.+4      	; 0x5930 <vfprintf+0x458>
    592c:	6f ef       	ldi	r22, 0xFF	; 255
    592e:	7f ef       	ldi	r23, 0xFF	; 255
    5930:	c6 01       	movw	r24, r12
    5932:	71 d5       	rcall	.+2786   	; 0x6416 <strnlen_P>
    5934:	8c 01       	movw	r16, r24
    5936:	f9 2d       	mov	r31, r9
    5938:	f0 68       	ori	r31, 0x80	; 128
    593a:	9f 2e       	mov	r9, r31
    593c:	f3 fd       	sbrc	r31, 3
    593e:	18 c0       	rjmp	.+48     	; 0x5970 <vfprintf+0x498>
    5940:	85 2d       	mov	r24, r5
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	08 17       	cp	r16, r24
    5946:	19 07       	cpc	r17, r25
    5948:	98 f4       	brcc	.+38     	; 0x5970 <vfprintf+0x498>
    594a:	b7 01       	movw	r22, r14
    594c:	80 e2       	ldi	r24, 0x20	; 32
    594e:	90 e0       	ldi	r25, 0x00	; 0
    5950:	d7 d5       	rcall	.+2990   	; 0x6500 <fputc>
    5952:	5a 94       	dec	r5
    5954:	f5 cf       	rjmp	.-22     	; 0x5940 <vfprintf+0x468>
    5956:	f6 01       	movw	r30, r12
    5958:	97 fc       	sbrc	r9, 7
    595a:	85 91       	lpm	r24, Z+
    595c:	97 fe       	sbrs	r9, 7
    595e:	81 91       	ld	r24, Z+
    5960:	6f 01       	movw	r12, r30
    5962:	b7 01       	movw	r22, r14
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	cc d5       	rcall	.+2968   	; 0x6500 <fputc>
    5968:	51 10       	cpse	r5, r1
    596a:	5a 94       	dec	r5
    596c:	01 50       	subi	r16, 0x01	; 1
    596e:	11 09       	sbc	r17, r1
    5970:	01 15       	cp	r16, r1
    5972:	11 05       	cpc	r17, r1
    5974:	81 f7       	brne	.-32     	; 0x5956 <vfprintf+0x47e>
    5976:	f0 c0       	rjmp	.+480    	; 0x5b58 <vfprintf+0x680>
    5978:	84 36       	cpi	r24, 0x64	; 100
    597a:	11 f0       	breq	.+4      	; 0x5980 <vfprintf+0x4a8>
    597c:	89 36       	cpi	r24, 0x69	; 105
    597e:	59 f5       	brne	.+86     	; 0x59d6 <vfprintf+0x4fe>
    5980:	56 01       	movw	r10, r12
    5982:	97 fe       	sbrs	r9, 7
    5984:	09 c0       	rjmp	.+18     	; 0x5998 <vfprintf+0x4c0>
    5986:	24 e0       	ldi	r18, 0x04	; 4
    5988:	a2 0e       	add	r10, r18
    598a:	b1 1c       	adc	r11, r1
    598c:	f6 01       	movw	r30, r12
    598e:	60 81       	ld	r22, Z
    5990:	71 81       	ldd	r23, Z+1	; 0x01
    5992:	82 81       	ldd	r24, Z+2	; 0x02
    5994:	93 81       	ldd	r25, Z+3	; 0x03
    5996:	0a c0       	rjmp	.+20     	; 0x59ac <vfprintf+0x4d4>
    5998:	f2 e0       	ldi	r31, 0x02	; 2
    599a:	af 0e       	add	r10, r31
    599c:	b1 1c       	adc	r11, r1
    599e:	f6 01       	movw	r30, r12
    59a0:	60 81       	ld	r22, Z
    59a2:	71 81       	ldd	r23, Z+1	; 0x01
    59a4:	07 2e       	mov	r0, r23
    59a6:	00 0c       	add	r0, r0
    59a8:	88 0b       	sbc	r24, r24
    59aa:	99 0b       	sbc	r25, r25
    59ac:	f9 2d       	mov	r31, r9
    59ae:	ff 76       	andi	r31, 0x6F	; 111
    59b0:	9f 2e       	mov	r9, r31
    59b2:	97 ff       	sbrs	r25, 7
    59b4:	09 c0       	rjmp	.+18     	; 0x59c8 <vfprintf+0x4f0>
    59b6:	90 95       	com	r25
    59b8:	80 95       	com	r24
    59ba:	70 95       	com	r23
    59bc:	61 95       	neg	r22
    59be:	7f 4f       	sbci	r23, 0xFF	; 255
    59c0:	8f 4f       	sbci	r24, 0xFF	; 255
    59c2:	9f 4f       	sbci	r25, 0xFF	; 255
    59c4:	f0 68       	ori	r31, 0x80	; 128
    59c6:	9f 2e       	mov	r9, r31
    59c8:	2a e0       	ldi	r18, 0x0A	; 10
    59ca:	30 e0       	ldi	r19, 0x00	; 0
    59cc:	a3 01       	movw	r20, r6
    59ce:	47 d6       	rcall	.+3214   	; 0x665e <__ultoa_invert>
    59d0:	c8 2e       	mov	r12, r24
    59d2:	c6 18       	sub	r12, r6
    59d4:	3e c0       	rjmp	.+124    	; 0x5a52 <vfprintf+0x57a>
    59d6:	09 2d       	mov	r16, r9
    59d8:	85 37       	cpi	r24, 0x75	; 117
    59da:	21 f4       	brne	.+8      	; 0x59e4 <vfprintf+0x50c>
    59dc:	0f 7e       	andi	r16, 0xEF	; 239
    59de:	2a e0       	ldi	r18, 0x0A	; 10
    59e0:	30 e0       	ldi	r19, 0x00	; 0
    59e2:	1d c0       	rjmp	.+58     	; 0x5a1e <vfprintf+0x546>
    59e4:	09 7f       	andi	r16, 0xF9	; 249
    59e6:	8f 36       	cpi	r24, 0x6F	; 111
    59e8:	91 f0       	breq	.+36     	; 0x5a0e <vfprintf+0x536>
    59ea:	18 f4       	brcc	.+6      	; 0x59f2 <vfprintf+0x51a>
    59ec:	88 35       	cpi	r24, 0x58	; 88
    59ee:	59 f0       	breq	.+22     	; 0x5a06 <vfprintf+0x52e>
    59f0:	bc c0       	rjmp	.+376    	; 0x5b6a <vfprintf+0x692>
    59f2:	80 37       	cpi	r24, 0x70	; 112
    59f4:	19 f0       	breq	.+6      	; 0x59fc <vfprintf+0x524>
    59f6:	88 37       	cpi	r24, 0x78	; 120
    59f8:	11 f0       	breq	.+4      	; 0x59fe <vfprintf+0x526>
    59fa:	b7 c0       	rjmp	.+366    	; 0x5b6a <vfprintf+0x692>
    59fc:	00 61       	ori	r16, 0x10	; 16
    59fe:	04 ff       	sbrs	r16, 4
    5a00:	09 c0       	rjmp	.+18     	; 0x5a14 <vfprintf+0x53c>
    5a02:	04 60       	ori	r16, 0x04	; 4
    5a04:	07 c0       	rjmp	.+14     	; 0x5a14 <vfprintf+0x53c>
    5a06:	94 fe       	sbrs	r9, 4
    5a08:	08 c0       	rjmp	.+16     	; 0x5a1a <vfprintf+0x542>
    5a0a:	06 60       	ori	r16, 0x06	; 6
    5a0c:	06 c0       	rjmp	.+12     	; 0x5a1a <vfprintf+0x542>
    5a0e:	28 e0       	ldi	r18, 0x08	; 8
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	05 c0       	rjmp	.+10     	; 0x5a1e <vfprintf+0x546>
    5a14:	20 e1       	ldi	r18, 0x10	; 16
    5a16:	30 e0       	ldi	r19, 0x00	; 0
    5a18:	02 c0       	rjmp	.+4      	; 0x5a1e <vfprintf+0x546>
    5a1a:	20 e1       	ldi	r18, 0x10	; 16
    5a1c:	32 e0       	ldi	r19, 0x02	; 2
    5a1e:	56 01       	movw	r10, r12
    5a20:	07 ff       	sbrs	r16, 7
    5a22:	09 c0       	rjmp	.+18     	; 0x5a36 <vfprintf+0x55e>
    5a24:	84 e0       	ldi	r24, 0x04	; 4
    5a26:	a8 0e       	add	r10, r24
    5a28:	b1 1c       	adc	r11, r1
    5a2a:	f6 01       	movw	r30, r12
    5a2c:	60 81       	ld	r22, Z
    5a2e:	71 81       	ldd	r23, Z+1	; 0x01
    5a30:	82 81       	ldd	r24, Z+2	; 0x02
    5a32:	93 81       	ldd	r25, Z+3	; 0x03
    5a34:	08 c0       	rjmp	.+16     	; 0x5a46 <vfprintf+0x56e>
    5a36:	f2 e0       	ldi	r31, 0x02	; 2
    5a38:	af 0e       	add	r10, r31
    5a3a:	b1 1c       	adc	r11, r1
    5a3c:	f6 01       	movw	r30, r12
    5a3e:	60 81       	ld	r22, Z
    5a40:	71 81       	ldd	r23, Z+1	; 0x01
    5a42:	80 e0       	ldi	r24, 0x00	; 0
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	a3 01       	movw	r20, r6
    5a48:	0a d6       	rcall	.+3092   	; 0x665e <__ultoa_invert>
    5a4a:	c8 2e       	mov	r12, r24
    5a4c:	c6 18       	sub	r12, r6
    5a4e:	0f 77       	andi	r16, 0x7F	; 127
    5a50:	90 2e       	mov	r9, r16
    5a52:	96 fe       	sbrs	r9, 6
    5a54:	0b c0       	rjmp	.+22     	; 0x5a6c <vfprintf+0x594>
    5a56:	09 2d       	mov	r16, r9
    5a58:	0e 7f       	andi	r16, 0xFE	; 254
    5a5a:	c1 16       	cp	r12, r17
    5a5c:	50 f4       	brcc	.+20     	; 0x5a72 <vfprintf+0x59a>
    5a5e:	94 fe       	sbrs	r9, 4
    5a60:	0a c0       	rjmp	.+20     	; 0x5a76 <vfprintf+0x59e>
    5a62:	92 fc       	sbrc	r9, 2
    5a64:	08 c0       	rjmp	.+16     	; 0x5a76 <vfprintf+0x59e>
    5a66:	09 2d       	mov	r16, r9
    5a68:	0e 7e       	andi	r16, 0xEE	; 238
    5a6a:	05 c0       	rjmp	.+10     	; 0x5a76 <vfprintf+0x59e>
    5a6c:	dc 2c       	mov	r13, r12
    5a6e:	09 2d       	mov	r16, r9
    5a70:	03 c0       	rjmp	.+6      	; 0x5a78 <vfprintf+0x5a0>
    5a72:	dc 2c       	mov	r13, r12
    5a74:	01 c0       	rjmp	.+2      	; 0x5a78 <vfprintf+0x5a0>
    5a76:	d1 2e       	mov	r13, r17
    5a78:	04 ff       	sbrs	r16, 4
    5a7a:	0d c0       	rjmp	.+26     	; 0x5a96 <vfprintf+0x5be>
    5a7c:	fe 01       	movw	r30, r28
    5a7e:	ec 0d       	add	r30, r12
    5a80:	f1 1d       	adc	r31, r1
    5a82:	80 81       	ld	r24, Z
    5a84:	80 33       	cpi	r24, 0x30	; 48
    5a86:	11 f4       	brne	.+4      	; 0x5a8c <vfprintf+0x5b4>
    5a88:	09 7e       	andi	r16, 0xE9	; 233
    5a8a:	09 c0       	rjmp	.+18     	; 0x5a9e <vfprintf+0x5c6>
    5a8c:	02 ff       	sbrs	r16, 2
    5a8e:	06 c0       	rjmp	.+12     	; 0x5a9c <vfprintf+0x5c4>
    5a90:	d3 94       	inc	r13
    5a92:	d3 94       	inc	r13
    5a94:	04 c0       	rjmp	.+8      	; 0x5a9e <vfprintf+0x5c6>
    5a96:	80 2f       	mov	r24, r16
    5a98:	86 78       	andi	r24, 0x86	; 134
    5a9a:	09 f0       	breq	.+2      	; 0x5a9e <vfprintf+0x5c6>
    5a9c:	d3 94       	inc	r13
    5a9e:	03 fd       	sbrc	r16, 3
    5aa0:	10 c0       	rjmp	.+32     	; 0x5ac2 <vfprintf+0x5ea>
    5aa2:	00 ff       	sbrs	r16, 0
    5aa4:	06 c0       	rjmp	.+12     	; 0x5ab2 <vfprintf+0x5da>
    5aa6:	1c 2d       	mov	r17, r12
    5aa8:	d5 14       	cp	r13, r5
    5aaa:	78 f4       	brcc	.+30     	; 0x5aca <vfprintf+0x5f2>
    5aac:	15 0d       	add	r17, r5
    5aae:	1d 19       	sub	r17, r13
    5ab0:	0c c0       	rjmp	.+24     	; 0x5aca <vfprintf+0x5f2>
    5ab2:	d5 14       	cp	r13, r5
    5ab4:	50 f4       	brcc	.+20     	; 0x5aca <vfprintf+0x5f2>
    5ab6:	b7 01       	movw	r22, r14
    5ab8:	80 e2       	ldi	r24, 0x20	; 32
    5aba:	90 e0       	ldi	r25, 0x00	; 0
    5abc:	21 d5       	rcall	.+2626   	; 0x6500 <fputc>
    5abe:	d3 94       	inc	r13
    5ac0:	f8 cf       	rjmp	.-16     	; 0x5ab2 <vfprintf+0x5da>
    5ac2:	d5 14       	cp	r13, r5
    5ac4:	10 f4       	brcc	.+4      	; 0x5aca <vfprintf+0x5f2>
    5ac6:	5d 18       	sub	r5, r13
    5ac8:	01 c0       	rjmp	.+2      	; 0x5acc <vfprintf+0x5f4>
    5aca:	51 2c       	mov	r5, r1
    5acc:	04 ff       	sbrs	r16, 4
    5ace:	0f c0       	rjmp	.+30     	; 0x5aee <vfprintf+0x616>
    5ad0:	b7 01       	movw	r22, r14
    5ad2:	80 e3       	ldi	r24, 0x30	; 48
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	14 d5       	rcall	.+2600   	; 0x6500 <fputc>
    5ad8:	02 ff       	sbrs	r16, 2
    5ada:	16 c0       	rjmp	.+44     	; 0x5b08 <vfprintf+0x630>
    5adc:	01 fd       	sbrc	r16, 1
    5ade:	03 c0       	rjmp	.+6      	; 0x5ae6 <vfprintf+0x60e>
    5ae0:	88 e7       	ldi	r24, 0x78	; 120
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	02 c0       	rjmp	.+4      	; 0x5aea <vfprintf+0x612>
    5ae6:	88 e5       	ldi	r24, 0x58	; 88
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	b7 01       	movw	r22, r14
    5aec:	0c c0       	rjmp	.+24     	; 0x5b06 <vfprintf+0x62e>
    5aee:	80 2f       	mov	r24, r16
    5af0:	86 78       	andi	r24, 0x86	; 134
    5af2:	51 f0       	breq	.+20     	; 0x5b08 <vfprintf+0x630>
    5af4:	01 ff       	sbrs	r16, 1
    5af6:	02 c0       	rjmp	.+4      	; 0x5afc <vfprintf+0x624>
    5af8:	8b e2       	ldi	r24, 0x2B	; 43
    5afa:	01 c0       	rjmp	.+2      	; 0x5afe <vfprintf+0x626>
    5afc:	80 e2       	ldi	r24, 0x20	; 32
    5afe:	07 fd       	sbrc	r16, 7
    5b00:	8d e2       	ldi	r24, 0x2D	; 45
    5b02:	b7 01       	movw	r22, r14
    5b04:	90 e0       	ldi	r25, 0x00	; 0
    5b06:	fc d4       	rcall	.+2552   	; 0x6500 <fputc>
    5b08:	c1 16       	cp	r12, r17
    5b0a:	30 f4       	brcc	.+12     	; 0x5b18 <vfprintf+0x640>
    5b0c:	b7 01       	movw	r22, r14
    5b0e:	80 e3       	ldi	r24, 0x30	; 48
    5b10:	90 e0       	ldi	r25, 0x00	; 0
    5b12:	f6 d4       	rcall	.+2540   	; 0x6500 <fputc>
    5b14:	11 50       	subi	r17, 0x01	; 1
    5b16:	f8 cf       	rjmp	.-16     	; 0x5b08 <vfprintf+0x630>
    5b18:	ca 94       	dec	r12
    5b1a:	f3 01       	movw	r30, r6
    5b1c:	ec 0d       	add	r30, r12
    5b1e:	f1 1d       	adc	r31, r1
    5b20:	80 81       	ld	r24, Z
    5b22:	b7 01       	movw	r22, r14
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	ec d4       	rcall	.+2520   	; 0x6500 <fputc>
    5b28:	c1 10       	cpse	r12, r1
    5b2a:	f6 cf       	rjmp	.-20     	; 0x5b18 <vfprintf+0x640>
    5b2c:	15 c0       	rjmp	.+42     	; 0x5b58 <vfprintf+0x680>
    5b2e:	f4 e0       	ldi	r31, 0x04	; 4
    5b30:	f5 15       	cp	r31, r5
    5b32:	50 f5       	brcc	.+84     	; 0x5b88 <vfprintf+0x6b0>
    5b34:	84 e0       	ldi	r24, 0x04	; 4
    5b36:	58 1a       	sub	r5, r24
    5b38:	93 fe       	sbrs	r9, 3
    5b3a:	1e c0       	rjmp	.+60     	; 0x5b78 <vfprintf+0x6a0>
    5b3c:	01 11       	cpse	r16, r1
    5b3e:	25 c0       	rjmp	.+74     	; 0x5b8a <vfprintf+0x6b2>
    5b40:	2c 85       	ldd	r18, Y+12	; 0x0c
    5b42:	23 ff       	sbrs	r18, 3
    5b44:	27 c0       	rjmp	.+78     	; 0x5b94 <vfprintf+0x6bc>
    5b46:	0a e9       	ldi	r16, 0x9A	; 154
    5b48:	11 e0       	ldi	r17, 0x01	; 1
    5b4a:	39 2d       	mov	r19, r9
    5b4c:	30 71       	andi	r19, 0x10	; 16
    5b4e:	93 2e       	mov	r9, r19
    5b50:	f8 01       	movw	r30, r16
    5b52:	84 91       	lpm	r24, Z
    5b54:	81 11       	cpse	r24, r1
    5b56:	21 c0       	rjmp	.+66     	; 0x5b9a <vfprintf+0x6c2>
    5b58:	55 20       	and	r5, r5
    5b5a:	09 f4       	brne	.+2      	; 0x5b5e <vfprintf+0x686>
    5b5c:	fc cc       	rjmp	.-1544   	; 0x5556 <vfprintf+0x7e>
    5b5e:	b7 01       	movw	r22, r14
    5b60:	80 e2       	ldi	r24, 0x20	; 32
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	cd d4       	rcall	.+2458   	; 0x6500 <fputc>
    5b66:	5a 94       	dec	r5
    5b68:	f7 cf       	rjmp	.-18     	; 0x5b58 <vfprintf+0x680>
    5b6a:	f7 01       	movw	r30, r14
    5b6c:	86 81       	ldd	r24, Z+6	; 0x06
    5b6e:	97 81       	ldd	r25, Z+7	; 0x07
    5b70:	23 c0       	rjmp	.+70     	; 0x5bb8 <vfprintf+0x6e0>
    5b72:	8f ef       	ldi	r24, 0xFF	; 255
    5b74:	9f ef       	ldi	r25, 0xFF	; 255
    5b76:	20 c0       	rjmp	.+64     	; 0x5bb8 <vfprintf+0x6e0>
    5b78:	b7 01       	movw	r22, r14
    5b7a:	80 e2       	ldi	r24, 0x20	; 32
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	c0 d4       	rcall	.+2432   	; 0x6500 <fputc>
    5b80:	5a 94       	dec	r5
    5b82:	51 10       	cpse	r5, r1
    5b84:	f9 cf       	rjmp	.-14     	; 0x5b78 <vfprintf+0x6a0>
    5b86:	da cf       	rjmp	.-76     	; 0x5b3c <vfprintf+0x664>
    5b88:	51 2c       	mov	r5, r1
    5b8a:	b7 01       	movw	r22, r14
    5b8c:	80 2f       	mov	r24, r16
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	b7 d4       	rcall	.+2414   	; 0x6500 <fputc>
    5b92:	d6 cf       	rjmp	.-84     	; 0x5b40 <vfprintf+0x668>
    5b94:	0e e9       	ldi	r16, 0x9E	; 158
    5b96:	11 e0       	ldi	r17, 0x01	; 1
    5b98:	d8 cf       	rjmp	.-80     	; 0x5b4a <vfprintf+0x672>
    5b9a:	91 10       	cpse	r9, r1
    5b9c:	80 52       	subi	r24, 0x20	; 32
    5b9e:	b7 01       	movw	r22, r14
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	ae d4       	rcall	.+2396   	; 0x6500 <fputc>
    5ba4:	0f 5f       	subi	r16, 0xFF	; 255
    5ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ba8:	d3 cf       	rjmp	.-90     	; 0x5b50 <vfprintf+0x678>
    5baa:	23 e0       	ldi	r18, 0x03	; 3
    5bac:	25 15       	cp	r18, r5
    5bae:	10 f4       	brcc	.+4      	; 0x5bb4 <vfprintf+0x6dc>
    5bb0:	83 e0       	ldi	r24, 0x03	; 3
    5bb2:	c1 cf       	rjmp	.-126    	; 0x5b36 <vfprintf+0x65e>
    5bb4:	51 2c       	mov	r5, r1
    5bb6:	c4 cf       	rjmp	.-120    	; 0x5b40 <vfprintf+0x668>
    5bb8:	60 96       	adiw	r28, 0x10	; 16
    5bba:	0f b6       	in	r0, 0x3f	; 63
    5bbc:	f8 94       	cli
    5bbe:	de bf       	out	0x3e, r29	; 62
    5bc0:	0f be       	out	0x3f, r0	; 63
    5bc2:	cd bf       	out	0x3d, r28	; 61
    5bc4:	df 91       	pop	r29
    5bc6:	cf 91       	pop	r28
    5bc8:	1f 91       	pop	r17
    5bca:	0f 91       	pop	r16
    5bcc:	ff 90       	pop	r15
    5bce:	ef 90       	pop	r14
    5bd0:	df 90       	pop	r13
    5bd2:	cf 90       	pop	r12
    5bd4:	bf 90       	pop	r11
    5bd6:	af 90       	pop	r10
    5bd8:	9f 90       	pop	r9
    5bda:	8f 90       	pop	r8
    5bdc:	7f 90       	pop	r7
    5bde:	6f 90       	pop	r6
    5be0:	5f 90       	pop	r5
    5be2:	4f 90       	pop	r4
    5be4:	3f 90       	pop	r3
    5be6:	2f 90       	pop	r2
    5be8:	08 95       	ret

00005bea <__subsf3>:
    5bea:	50 58       	subi	r21, 0x80	; 128

00005bec <__addsf3>:
    5bec:	bb 27       	eor	r27, r27
    5bee:	aa 27       	eor	r26, r26
    5bf0:	0e d0       	rcall	.+28     	; 0x5c0e <__addsf3x>
    5bf2:	4d c1       	rjmp	.+666    	; 0x5e8e <__fp_round>
    5bf4:	3e d1       	rcall	.+636    	; 0x5e72 <__fp_pscA>
    5bf6:	30 f0       	brcs	.+12     	; 0x5c04 <__addsf3+0x18>
    5bf8:	43 d1       	rcall	.+646    	; 0x5e80 <__fp_pscB>
    5bfa:	20 f0       	brcs	.+8      	; 0x5c04 <__addsf3+0x18>
    5bfc:	31 f4       	brne	.+12     	; 0x5c0a <__addsf3+0x1e>
    5bfe:	9f 3f       	cpi	r25, 0xFF	; 255
    5c00:	11 f4       	brne	.+4      	; 0x5c06 <__addsf3+0x1a>
    5c02:	1e f4       	brtc	.+6      	; 0x5c0a <__addsf3+0x1e>
    5c04:	33 c1       	rjmp	.+614    	; 0x5e6c <__fp_nan>
    5c06:	0e f4       	brtc	.+2      	; 0x5c0a <__addsf3+0x1e>
    5c08:	e0 95       	com	r30
    5c0a:	e7 fb       	bst	r30, 7
    5c0c:	29 c1       	rjmp	.+594    	; 0x5e60 <__fp_inf>

00005c0e <__addsf3x>:
    5c0e:	e9 2f       	mov	r30, r25
    5c10:	4f d1       	rcall	.+670    	; 0x5eb0 <__fp_split3>
    5c12:	80 f3       	brcs	.-32     	; 0x5bf4 <__addsf3+0x8>
    5c14:	ba 17       	cp	r27, r26
    5c16:	62 07       	cpc	r22, r18
    5c18:	73 07       	cpc	r23, r19
    5c1a:	84 07       	cpc	r24, r20
    5c1c:	95 07       	cpc	r25, r21
    5c1e:	18 f0       	brcs	.+6      	; 0x5c26 <__addsf3x+0x18>
    5c20:	71 f4       	brne	.+28     	; 0x5c3e <__addsf3x+0x30>
    5c22:	9e f5       	brtc	.+102    	; 0x5c8a <__addsf3x+0x7c>
    5c24:	67 c1       	rjmp	.+718    	; 0x5ef4 <__fp_zero>
    5c26:	0e f4       	brtc	.+2      	; 0x5c2a <__addsf3x+0x1c>
    5c28:	e0 95       	com	r30
    5c2a:	0b 2e       	mov	r0, r27
    5c2c:	ba 2f       	mov	r27, r26
    5c2e:	a0 2d       	mov	r26, r0
    5c30:	0b 01       	movw	r0, r22
    5c32:	b9 01       	movw	r22, r18
    5c34:	90 01       	movw	r18, r0
    5c36:	0c 01       	movw	r0, r24
    5c38:	ca 01       	movw	r24, r20
    5c3a:	a0 01       	movw	r20, r0
    5c3c:	11 24       	eor	r1, r1
    5c3e:	ff 27       	eor	r31, r31
    5c40:	59 1b       	sub	r21, r25
    5c42:	99 f0       	breq	.+38     	; 0x5c6a <__addsf3x+0x5c>
    5c44:	59 3f       	cpi	r21, 0xF9	; 249
    5c46:	50 f4       	brcc	.+20     	; 0x5c5c <__addsf3x+0x4e>
    5c48:	50 3e       	cpi	r21, 0xE0	; 224
    5c4a:	68 f1       	brcs	.+90     	; 0x5ca6 <__addsf3x+0x98>
    5c4c:	1a 16       	cp	r1, r26
    5c4e:	f0 40       	sbci	r31, 0x00	; 0
    5c50:	a2 2f       	mov	r26, r18
    5c52:	23 2f       	mov	r18, r19
    5c54:	34 2f       	mov	r19, r20
    5c56:	44 27       	eor	r20, r20
    5c58:	58 5f       	subi	r21, 0xF8	; 248
    5c5a:	f3 cf       	rjmp	.-26     	; 0x5c42 <__addsf3x+0x34>
    5c5c:	46 95       	lsr	r20
    5c5e:	37 95       	ror	r19
    5c60:	27 95       	ror	r18
    5c62:	a7 95       	ror	r26
    5c64:	f0 40       	sbci	r31, 0x00	; 0
    5c66:	53 95       	inc	r21
    5c68:	c9 f7       	brne	.-14     	; 0x5c5c <__addsf3x+0x4e>
    5c6a:	7e f4       	brtc	.+30     	; 0x5c8a <__addsf3x+0x7c>
    5c6c:	1f 16       	cp	r1, r31
    5c6e:	ba 0b       	sbc	r27, r26
    5c70:	62 0b       	sbc	r22, r18
    5c72:	73 0b       	sbc	r23, r19
    5c74:	84 0b       	sbc	r24, r20
    5c76:	ba f0       	brmi	.+46     	; 0x5ca6 <__addsf3x+0x98>
    5c78:	91 50       	subi	r25, 0x01	; 1
    5c7a:	a1 f0       	breq	.+40     	; 0x5ca4 <__addsf3x+0x96>
    5c7c:	ff 0f       	add	r31, r31
    5c7e:	bb 1f       	adc	r27, r27
    5c80:	66 1f       	adc	r22, r22
    5c82:	77 1f       	adc	r23, r23
    5c84:	88 1f       	adc	r24, r24
    5c86:	c2 f7       	brpl	.-16     	; 0x5c78 <__addsf3x+0x6a>
    5c88:	0e c0       	rjmp	.+28     	; 0x5ca6 <__addsf3x+0x98>
    5c8a:	ba 0f       	add	r27, r26
    5c8c:	62 1f       	adc	r22, r18
    5c8e:	73 1f       	adc	r23, r19
    5c90:	84 1f       	adc	r24, r20
    5c92:	48 f4       	brcc	.+18     	; 0x5ca6 <__addsf3x+0x98>
    5c94:	87 95       	ror	r24
    5c96:	77 95       	ror	r23
    5c98:	67 95       	ror	r22
    5c9a:	b7 95       	ror	r27
    5c9c:	f7 95       	ror	r31
    5c9e:	9e 3f       	cpi	r25, 0xFE	; 254
    5ca0:	08 f0       	brcs	.+2      	; 0x5ca4 <__addsf3x+0x96>
    5ca2:	b3 cf       	rjmp	.-154    	; 0x5c0a <__addsf3+0x1e>
    5ca4:	93 95       	inc	r25
    5ca6:	88 0f       	add	r24, r24
    5ca8:	08 f0       	brcs	.+2      	; 0x5cac <__addsf3x+0x9e>
    5caa:	99 27       	eor	r25, r25
    5cac:	ee 0f       	add	r30, r30
    5cae:	97 95       	ror	r25
    5cb0:	87 95       	ror	r24
    5cb2:	08 95       	ret

00005cb4 <__divsf3>:
    5cb4:	0c d0       	rcall	.+24     	; 0x5cce <__divsf3x>
    5cb6:	eb c0       	rjmp	.+470    	; 0x5e8e <__fp_round>
    5cb8:	e3 d0       	rcall	.+454    	; 0x5e80 <__fp_pscB>
    5cba:	40 f0       	brcs	.+16     	; 0x5ccc <__divsf3+0x18>
    5cbc:	da d0       	rcall	.+436    	; 0x5e72 <__fp_pscA>
    5cbe:	30 f0       	brcs	.+12     	; 0x5ccc <__divsf3+0x18>
    5cc0:	21 f4       	brne	.+8      	; 0x5cca <__divsf3+0x16>
    5cc2:	5f 3f       	cpi	r21, 0xFF	; 255
    5cc4:	19 f0       	breq	.+6      	; 0x5ccc <__divsf3+0x18>
    5cc6:	cc c0       	rjmp	.+408    	; 0x5e60 <__fp_inf>
    5cc8:	51 11       	cpse	r21, r1
    5cca:	15 c1       	rjmp	.+554    	; 0x5ef6 <__fp_szero>
    5ccc:	cf c0       	rjmp	.+414    	; 0x5e6c <__fp_nan>

00005cce <__divsf3x>:
    5cce:	f0 d0       	rcall	.+480    	; 0x5eb0 <__fp_split3>
    5cd0:	98 f3       	brcs	.-26     	; 0x5cb8 <__divsf3+0x4>

00005cd2 <__divsf3_pse>:
    5cd2:	99 23       	and	r25, r25
    5cd4:	c9 f3       	breq	.-14     	; 0x5cc8 <__divsf3+0x14>
    5cd6:	55 23       	and	r21, r21
    5cd8:	b1 f3       	breq	.-20     	; 0x5cc6 <__divsf3+0x12>
    5cda:	95 1b       	sub	r25, r21
    5cdc:	55 0b       	sbc	r21, r21
    5cde:	bb 27       	eor	r27, r27
    5ce0:	aa 27       	eor	r26, r26
    5ce2:	62 17       	cp	r22, r18
    5ce4:	73 07       	cpc	r23, r19
    5ce6:	84 07       	cpc	r24, r20
    5ce8:	38 f0       	brcs	.+14     	; 0x5cf8 <__divsf3_pse+0x26>
    5cea:	9f 5f       	subi	r25, 0xFF	; 255
    5cec:	5f 4f       	sbci	r21, 0xFF	; 255
    5cee:	22 0f       	add	r18, r18
    5cf0:	33 1f       	adc	r19, r19
    5cf2:	44 1f       	adc	r20, r20
    5cf4:	aa 1f       	adc	r26, r26
    5cf6:	a9 f3       	breq	.-22     	; 0x5ce2 <__divsf3_pse+0x10>
    5cf8:	33 d0       	rcall	.+102    	; 0x5d60 <__divsf3_pse+0x8e>
    5cfa:	0e 2e       	mov	r0, r30
    5cfc:	3a f0       	brmi	.+14     	; 0x5d0c <__divsf3_pse+0x3a>
    5cfe:	e0 e8       	ldi	r30, 0x80	; 128
    5d00:	30 d0       	rcall	.+96     	; 0x5d62 <__divsf3_pse+0x90>
    5d02:	91 50       	subi	r25, 0x01	; 1
    5d04:	50 40       	sbci	r21, 0x00	; 0
    5d06:	e6 95       	lsr	r30
    5d08:	00 1c       	adc	r0, r0
    5d0a:	ca f7       	brpl	.-14     	; 0x5cfe <__divsf3_pse+0x2c>
    5d0c:	29 d0       	rcall	.+82     	; 0x5d60 <__divsf3_pse+0x8e>
    5d0e:	fe 2f       	mov	r31, r30
    5d10:	27 d0       	rcall	.+78     	; 0x5d60 <__divsf3_pse+0x8e>
    5d12:	66 0f       	add	r22, r22
    5d14:	77 1f       	adc	r23, r23
    5d16:	88 1f       	adc	r24, r24
    5d18:	bb 1f       	adc	r27, r27
    5d1a:	26 17       	cp	r18, r22
    5d1c:	37 07       	cpc	r19, r23
    5d1e:	48 07       	cpc	r20, r24
    5d20:	ab 07       	cpc	r26, r27
    5d22:	b0 e8       	ldi	r27, 0x80	; 128
    5d24:	09 f0       	breq	.+2      	; 0x5d28 <__divsf3_pse+0x56>
    5d26:	bb 0b       	sbc	r27, r27
    5d28:	80 2d       	mov	r24, r0
    5d2a:	bf 01       	movw	r22, r30
    5d2c:	ff 27       	eor	r31, r31
    5d2e:	93 58       	subi	r25, 0x83	; 131
    5d30:	5f 4f       	sbci	r21, 0xFF	; 255
    5d32:	2a f0       	brmi	.+10     	; 0x5d3e <__divsf3_pse+0x6c>
    5d34:	9e 3f       	cpi	r25, 0xFE	; 254
    5d36:	51 05       	cpc	r21, r1
    5d38:	68 f0       	brcs	.+26     	; 0x5d54 <__divsf3_pse+0x82>
    5d3a:	92 c0       	rjmp	.+292    	; 0x5e60 <__fp_inf>
    5d3c:	dc c0       	rjmp	.+440    	; 0x5ef6 <__fp_szero>
    5d3e:	5f 3f       	cpi	r21, 0xFF	; 255
    5d40:	ec f3       	brlt	.-6      	; 0x5d3c <__divsf3_pse+0x6a>
    5d42:	98 3e       	cpi	r25, 0xE8	; 232
    5d44:	dc f3       	brlt	.-10     	; 0x5d3c <__divsf3_pse+0x6a>
    5d46:	86 95       	lsr	r24
    5d48:	77 95       	ror	r23
    5d4a:	67 95       	ror	r22
    5d4c:	b7 95       	ror	r27
    5d4e:	f7 95       	ror	r31
    5d50:	9f 5f       	subi	r25, 0xFF	; 255
    5d52:	c9 f7       	brne	.-14     	; 0x5d46 <__divsf3_pse+0x74>
    5d54:	88 0f       	add	r24, r24
    5d56:	91 1d       	adc	r25, r1
    5d58:	96 95       	lsr	r25
    5d5a:	87 95       	ror	r24
    5d5c:	97 f9       	bld	r25, 7
    5d5e:	08 95       	ret
    5d60:	e1 e0       	ldi	r30, 0x01	; 1
    5d62:	66 0f       	add	r22, r22
    5d64:	77 1f       	adc	r23, r23
    5d66:	88 1f       	adc	r24, r24
    5d68:	bb 1f       	adc	r27, r27
    5d6a:	62 17       	cp	r22, r18
    5d6c:	73 07       	cpc	r23, r19
    5d6e:	84 07       	cpc	r24, r20
    5d70:	ba 07       	cpc	r27, r26
    5d72:	20 f0       	brcs	.+8      	; 0x5d7c <__divsf3_pse+0xaa>
    5d74:	62 1b       	sub	r22, r18
    5d76:	73 0b       	sbc	r23, r19
    5d78:	84 0b       	sbc	r24, r20
    5d7a:	ba 0b       	sbc	r27, r26
    5d7c:	ee 1f       	adc	r30, r30
    5d7e:	88 f7       	brcc	.-30     	; 0x5d62 <__divsf3_pse+0x90>
    5d80:	e0 95       	com	r30
    5d82:	08 95       	ret

00005d84 <__fixsfsi>:
    5d84:	04 d0       	rcall	.+8      	; 0x5d8e <__fixunssfsi>
    5d86:	68 94       	set
    5d88:	b1 11       	cpse	r27, r1
    5d8a:	b5 c0       	rjmp	.+362    	; 0x5ef6 <__fp_szero>
    5d8c:	08 95       	ret

00005d8e <__fixunssfsi>:
    5d8e:	98 d0       	rcall	.+304    	; 0x5ec0 <__fp_splitA>
    5d90:	88 f0       	brcs	.+34     	; 0x5db4 <__fixunssfsi+0x26>
    5d92:	9f 57       	subi	r25, 0x7F	; 127
    5d94:	90 f0       	brcs	.+36     	; 0x5dba <__fixunssfsi+0x2c>
    5d96:	b9 2f       	mov	r27, r25
    5d98:	99 27       	eor	r25, r25
    5d9a:	b7 51       	subi	r27, 0x17	; 23
    5d9c:	a0 f0       	brcs	.+40     	; 0x5dc6 <__fixunssfsi+0x38>
    5d9e:	d1 f0       	breq	.+52     	; 0x5dd4 <__fixunssfsi+0x46>
    5da0:	66 0f       	add	r22, r22
    5da2:	77 1f       	adc	r23, r23
    5da4:	88 1f       	adc	r24, r24
    5da6:	99 1f       	adc	r25, r25
    5da8:	1a f0       	brmi	.+6      	; 0x5db0 <__fixunssfsi+0x22>
    5daa:	ba 95       	dec	r27
    5dac:	c9 f7       	brne	.-14     	; 0x5da0 <__fixunssfsi+0x12>
    5dae:	12 c0       	rjmp	.+36     	; 0x5dd4 <__fixunssfsi+0x46>
    5db0:	b1 30       	cpi	r27, 0x01	; 1
    5db2:	81 f0       	breq	.+32     	; 0x5dd4 <__fixunssfsi+0x46>
    5db4:	9f d0       	rcall	.+318    	; 0x5ef4 <__fp_zero>
    5db6:	b1 e0       	ldi	r27, 0x01	; 1
    5db8:	08 95       	ret
    5dba:	9c c0       	rjmp	.+312    	; 0x5ef4 <__fp_zero>
    5dbc:	67 2f       	mov	r22, r23
    5dbe:	78 2f       	mov	r23, r24
    5dc0:	88 27       	eor	r24, r24
    5dc2:	b8 5f       	subi	r27, 0xF8	; 248
    5dc4:	39 f0       	breq	.+14     	; 0x5dd4 <__fixunssfsi+0x46>
    5dc6:	b9 3f       	cpi	r27, 0xF9	; 249
    5dc8:	cc f3       	brlt	.-14     	; 0x5dbc <__fixunssfsi+0x2e>
    5dca:	86 95       	lsr	r24
    5dcc:	77 95       	ror	r23
    5dce:	67 95       	ror	r22
    5dd0:	b3 95       	inc	r27
    5dd2:	d9 f7       	brne	.-10     	; 0x5dca <__fixunssfsi+0x3c>
    5dd4:	3e f4       	brtc	.+14     	; 0x5de4 <__fixunssfsi+0x56>
    5dd6:	90 95       	com	r25
    5dd8:	80 95       	com	r24
    5dda:	70 95       	com	r23
    5ddc:	61 95       	neg	r22
    5dde:	7f 4f       	sbci	r23, 0xFF	; 255
    5de0:	8f 4f       	sbci	r24, 0xFF	; 255
    5de2:	9f 4f       	sbci	r25, 0xFF	; 255
    5de4:	08 95       	ret

00005de6 <__floatunsisf>:
    5de6:	e8 94       	clt
    5de8:	09 c0       	rjmp	.+18     	; 0x5dfc <__floatsisf+0x12>

00005dea <__floatsisf>:
    5dea:	97 fb       	bst	r25, 7
    5dec:	3e f4       	brtc	.+14     	; 0x5dfc <__floatsisf+0x12>
    5dee:	90 95       	com	r25
    5df0:	80 95       	com	r24
    5df2:	70 95       	com	r23
    5df4:	61 95       	neg	r22
    5df6:	7f 4f       	sbci	r23, 0xFF	; 255
    5df8:	8f 4f       	sbci	r24, 0xFF	; 255
    5dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfc:	99 23       	and	r25, r25
    5dfe:	a9 f0       	breq	.+42     	; 0x5e2a <__floatsisf+0x40>
    5e00:	f9 2f       	mov	r31, r25
    5e02:	96 e9       	ldi	r25, 0x96	; 150
    5e04:	bb 27       	eor	r27, r27
    5e06:	93 95       	inc	r25
    5e08:	f6 95       	lsr	r31
    5e0a:	87 95       	ror	r24
    5e0c:	77 95       	ror	r23
    5e0e:	67 95       	ror	r22
    5e10:	b7 95       	ror	r27
    5e12:	f1 11       	cpse	r31, r1
    5e14:	f8 cf       	rjmp	.-16     	; 0x5e06 <__floatsisf+0x1c>
    5e16:	fa f4       	brpl	.+62     	; 0x5e56 <__floatsisf+0x6c>
    5e18:	bb 0f       	add	r27, r27
    5e1a:	11 f4       	brne	.+4      	; 0x5e20 <__floatsisf+0x36>
    5e1c:	60 ff       	sbrs	r22, 0
    5e1e:	1b c0       	rjmp	.+54     	; 0x5e56 <__floatsisf+0x6c>
    5e20:	6f 5f       	subi	r22, 0xFF	; 255
    5e22:	7f 4f       	sbci	r23, 0xFF	; 255
    5e24:	8f 4f       	sbci	r24, 0xFF	; 255
    5e26:	9f 4f       	sbci	r25, 0xFF	; 255
    5e28:	16 c0       	rjmp	.+44     	; 0x5e56 <__floatsisf+0x6c>
    5e2a:	88 23       	and	r24, r24
    5e2c:	11 f0       	breq	.+4      	; 0x5e32 <__floatsisf+0x48>
    5e2e:	96 e9       	ldi	r25, 0x96	; 150
    5e30:	11 c0       	rjmp	.+34     	; 0x5e54 <__floatsisf+0x6a>
    5e32:	77 23       	and	r23, r23
    5e34:	21 f0       	breq	.+8      	; 0x5e3e <__floatsisf+0x54>
    5e36:	9e e8       	ldi	r25, 0x8E	; 142
    5e38:	87 2f       	mov	r24, r23
    5e3a:	76 2f       	mov	r23, r22
    5e3c:	05 c0       	rjmp	.+10     	; 0x5e48 <__floatsisf+0x5e>
    5e3e:	66 23       	and	r22, r22
    5e40:	71 f0       	breq	.+28     	; 0x5e5e <__floatsisf+0x74>
    5e42:	96 e8       	ldi	r25, 0x86	; 134
    5e44:	86 2f       	mov	r24, r22
    5e46:	70 e0       	ldi	r23, 0x00	; 0
    5e48:	60 e0       	ldi	r22, 0x00	; 0
    5e4a:	2a f0       	brmi	.+10     	; 0x5e56 <__floatsisf+0x6c>
    5e4c:	9a 95       	dec	r25
    5e4e:	66 0f       	add	r22, r22
    5e50:	77 1f       	adc	r23, r23
    5e52:	88 1f       	adc	r24, r24
    5e54:	da f7       	brpl	.-10     	; 0x5e4c <__floatsisf+0x62>
    5e56:	88 0f       	add	r24, r24
    5e58:	96 95       	lsr	r25
    5e5a:	87 95       	ror	r24
    5e5c:	97 f9       	bld	r25, 7
    5e5e:	08 95       	ret

00005e60 <__fp_inf>:
    5e60:	97 f9       	bld	r25, 7
    5e62:	9f 67       	ori	r25, 0x7F	; 127
    5e64:	80 e8       	ldi	r24, 0x80	; 128
    5e66:	70 e0       	ldi	r23, 0x00	; 0
    5e68:	60 e0       	ldi	r22, 0x00	; 0
    5e6a:	08 95       	ret

00005e6c <__fp_nan>:
    5e6c:	9f ef       	ldi	r25, 0xFF	; 255
    5e6e:	80 ec       	ldi	r24, 0xC0	; 192
    5e70:	08 95       	ret

00005e72 <__fp_pscA>:
    5e72:	00 24       	eor	r0, r0
    5e74:	0a 94       	dec	r0
    5e76:	16 16       	cp	r1, r22
    5e78:	17 06       	cpc	r1, r23
    5e7a:	18 06       	cpc	r1, r24
    5e7c:	09 06       	cpc	r0, r25
    5e7e:	08 95       	ret

00005e80 <__fp_pscB>:
    5e80:	00 24       	eor	r0, r0
    5e82:	0a 94       	dec	r0
    5e84:	12 16       	cp	r1, r18
    5e86:	13 06       	cpc	r1, r19
    5e88:	14 06       	cpc	r1, r20
    5e8a:	05 06       	cpc	r0, r21
    5e8c:	08 95       	ret

00005e8e <__fp_round>:
    5e8e:	09 2e       	mov	r0, r25
    5e90:	03 94       	inc	r0
    5e92:	00 0c       	add	r0, r0
    5e94:	11 f4       	brne	.+4      	; 0x5e9a <__fp_round+0xc>
    5e96:	88 23       	and	r24, r24
    5e98:	52 f0       	brmi	.+20     	; 0x5eae <__fp_round+0x20>
    5e9a:	bb 0f       	add	r27, r27
    5e9c:	40 f4       	brcc	.+16     	; 0x5eae <__fp_round+0x20>
    5e9e:	bf 2b       	or	r27, r31
    5ea0:	11 f4       	brne	.+4      	; 0x5ea6 <__fp_round+0x18>
    5ea2:	60 ff       	sbrs	r22, 0
    5ea4:	04 c0       	rjmp	.+8      	; 0x5eae <__fp_round+0x20>
    5ea6:	6f 5f       	subi	r22, 0xFF	; 255
    5ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eaa:	8f 4f       	sbci	r24, 0xFF	; 255
    5eac:	9f 4f       	sbci	r25, 0xFF	; 255
    5eae:	08 95       	ret

00005eb0 <__fp_split3>:
    5eb0:	57 fd       	sbrc	r21, 7
    5eb2:	90 58       	subi	r25, 0x80	; 128
    5eb4:	44 0f       	add	r20, r20
    5eb6:	55 1f       	adc	r21, r21
    5eb8:	59 f0       	breq	.+22     	; 0x5ed0 <__fp_splitA+0x10>
    5eba:	5f 3f       	cpi	r21, 0xFF	; 255
    5ebc:	71 f0       	breq	.+28     	; 0x5eda <__fp_splitA+0x1a>
    5ebe:	47 95       	ror	r20

00005ec0 <__fp_splitA>:
    5ec0:	88 0f       	add	r24, r24
    5ec2:	97 fb       	bst	r25, 7
    5ec4:	99 1f       	adc	r25, r25
    5ec6:	61 f0       	breq	.+24     	; 0x5ee0 <__fp_splitA+0x20>
    5ec8:	9f 3f       	cpi	r25, 0xFF	; 255
    5eca:	79 f0       	breq	.+30     	; 0x5eea <__fp_splitA+0x2a>
    5ecc:	87 95       	ror	r24
    5ece:	08 95       	ret
    5ed0:	12 16       	cp	r1, r18
    5ed2:	13 06       	cpc	r1, r19
    5ed4:	14 06       	cpc	r1, r20
    5ed6:	55 1f       	adc	r21, r21
    5ed8:	f2 cf       	rjmp	.-28     	; 0x5ebe <__fp_split3+0xe>
    5eda:	46 95       	lsr	r20
    5edc:	f1 df       	rcall	.-30     	; 0x5ec0 <__fp_splitA>
    5ede:	08 c0       	rjmp	.+16     	; 0x5ef0 <__fp_splitA+0x30>
    5ee0:	16 16       	cp	r1, r22
    5ee2:	17 06       	cpc	r1, r23
    5ee4:	18 06       	cpc	r1, r24
    5ee6:	99 1f       	adc	r25, r25
    5ee8:	f1 cf       	rjmp	.-30     	; 0x5ecc <__fp_splitA+0xc>
    5eea:	86 95       	lsr	r24
    5eec:	71 05       	cpc	r23, r1
    5eee:	61 05       	cpc	r22, r1
    5ef0:	08 94       	sec
    5ef2:	08 95       	ret

00005ef4 <__fp_zero>:
    5ef4:	e8 94       	clt

00005ef6 <__fp_szero>:
    5ef6:	bb 27       	eor	r27, r27
    5ef8:	66 27       	eor	r22, r22
    5efa:	77 27       	eor	r23, r23
    5efc:	cb 01       	movw	r24, r22
    5efe:	97 f9       	bld	r25, 7
    5f00:	08 95       	ret

00005f02 <__mulsf3>:
    5f02:	0b d0       	rcall	.+22     	; 0x5f1a <__mulsf3x>
    5f04:	c4 cf       	rjmp	.-120    	; 0x5e8e <__fp_round>
    5f06:	b5 df       	rcall	.-150    	; 0x5e72 <__fp_pscA>
    5f08:	28 f0       	brcs	.+10     	; 0x5f14 <__mulsf3+0x12>
    5f0a:	ba df       	rcall	.-140    	; 0x5e80 <__fp_pscB>
    5f0c:	18 f0       	brcs	.+6      	; 0x5f14 <__mulsf3+0x12>
    5f0e:	95 23       	and	r25, r21
    5f10:	09 f0       	breq	.+2      	; 0x5f14 <__mulsf3+0x12>
    5f12:	a6 cf       	rjmp	.-180    	; 0x5e60 <__fp_inf>
    5f14:	ab cf       	rjmp	.-170    	; 0x5e6c <__fp_nan>
    5f16:	11 24       	eor	r1, r1
    5f18:	ee cf       	rjmp	.-36     	; 0x5ef6 <__fp_szero>

00005f1a <__mulsf3x>:
    5f1a:	ca df       	rcall	.-108    	; 0x5eb0 <__fp_split3>
    5f1c:	a0 f3       	brcs	.-24     	; 0x5f06 <__mulsf3+0x4>

00005f1e <__mulsf3_pse>:
    5f1e:	95 9f       	mul	r25, r21
    5f20:	d1 f3       	breq	.-12     	; 0x5f16 <__mulsf3+0x14>
    5f22:	95 0f       	add	r25, r21
    5f24:	50 e0       	ldi	r21, 0x00	; 0
    5f26:	55 1f       	adc	r21, r21
    5f28:	62 9f       	mul	r22, r18
    5f2a:	f0 01       	movw	r30, r0
    5f2c:	72 9f       	mul	r23, r18
    5f2e:	bb 27       	eor	r27, r27
    5f30:	f0 0d       	add	r31, r0
    5f32:	b1 1d       	adc	r27, r1
    5f34:	63 9f       	mul	r22, r19
    5f36:	aa 27       	eor	r26, r26
    5f38:	f0 0d       	add	r31, r0
    5f3a:	b1 1d       	adc	r27, r1
    5f3c:	aa 1f       	adc	r26, r26
    5f3e:	64 9f       	mul	r22, r20
    5f40:	66 27       	eor	r22, r22
    5f42:	b0 0d       	add	r27, r0
    5f44:	a1 1d       	adc	r26, r1
    5f46:	66 1f       	adc	r22, r22
    5f48:	82 9f       	mul	r24, r18
    5f4a:	22 27       	eor	r18, r18
    5f4c:	b0 0d       	add	r27, r0
    5f4e:	a1 1d       	adc	r26, r1
    5f50:	62 1f       	adc	r22, r18
    5f52:	73 9f       	mul	r23, r19
    5f54:	b0 0d       	add	r27, r0
    5f56:	a1 1d       	adc	r26, r1
    5f58:	62 1f       	adc	r22, r18
    5f5a:	83 9f       	mul	r24, r19
    5f5c:	a0 0d       	add	r26, r0
    5f5e:	61 1d       	adc	r22, r1
    5f60:	22 1f       	adc	r18, r18
    5f62:	74 9f       	mul	r23, r20
    5f64:	33 27       	eor	r19, r19
    5f66:	a0 0d       	add	r26, r0
    5f68:	61 1d       	adc	r22, r1
    5f6a:	23 1f       	adc	r18, r19
    5f6c:	84 9f       	mul	r24, r20
    5f6e:	60 0d       	add	r22, r0
    5f70:	21 1d       	adc	r18, r1
    5f72:	82 2f       	mov	r24, r18
    5f74:	76 2f       	mov	r23, r22
    5f76:	6a 2f       	mov	r22, r26
    5f78:	11 24       	eor	r1, r1
    5f7a:	9f 57       	subi	r25, 0x7F	; 127
    5f7c:	50 40       	sbci	r21, 0x00	; 0
    5f7e:	8a f0       	brmi	.+34     	; 0x5fa2 <__mulsf3_pse+0x84>
    5f80:	e1 f0       	breq	.+56     	; 0x5fba <__mulsf3_pse+0x9c>
    5f82:	88 23       	and	r24, r24
    5f84:	4a f0       	brmi	.+18     	; 0x5f98 <__mulsf3_pse+0x7a>
    5f86:	ee 0f       	add	r30, r30
    5f88:	ff 1f       	adc	r31, r31
    5f8a:	bb 1f       	adc	r27, r27
    5f8c:	66 1f       	adc	r22, r22
    5f8e:	77 1f       	adc	r23, r23
    5f90:	88 1f       	adc	r24, r24
    5f92:	91 50       	subi	r25, 0x01	; 1
    5f94:	50 40       	sbci	r21, 0x00	; 0
    5f96:	a9 f7       	brne	.-22     	; 0x5f82 <__mulsf3_pse+0x64>
    5f98:	9e 3f       	cpi	r25, 0xFE	; 254
    5f9a:	51 05       	cpc	r21, r1
    5f9c:	70 f0       	brcs	.+28     	; 0x5fba <__mulsf3_pse+0x9c>
    5f9e:	60 cf       	rjmp	.-320    	; 0x5e60 <__fp_inf>
    5fa0:	aa cf       	rjmp	.-172    	; 0x5ef6 <__fp_szero>
    5fa2:	5f 3f       	cpi	r21, 0xFF	; 255
    5fa4:	ec f3       	brlt	.-6      	; 0x5fa0 <__mulsf3_pse+0x82>
    5fa6:	98 3e       	cpi	r25, 0xE8	; 232
    5fa8:	dc f3       	brlt	.-10     	; 0x5fa0 <__mulsf3_pse+0x82>
    5faa:	86 95       	lsr	r24
    5fac:	77 95       	ror	r23
    5fae:	67 95       	ror	r22
    5fb0:	b7 95       	ror	r27
    5fb2:	f7 95       	ror	r31
    5fb4:	e7 95       	ror	r30
    5fb6:	9f 5f       	subi	r25, 0xFF	; 255
    5fb8:	c1 f7       	brne	.-16     	; 0x5faa <__mulsf3_pse+0x8c>
    5fba:	fe 2b       	or	r31, r30
    5fbc:	88 0f       	add	r24, r24
    5fbe:	91 1d       	adc	r25, r1
    5fc0:	96 95       	lsr	r25
    5fc2:	87 95       	ror	r24
    5fc4:	97 f9       	bld	r25, 7
    5fc6:	08 95       	ret

00005fc8 <__udivmodsi4>:
    5fc8:	a1 e2       	ldi	r26, 0x21	; 33
    5fca:	1a 2e       	mov	r1, r26
    5fcc:	aa 1b       	sub	r26, r26
    5fce:	bb 1b       	sub	r27, r27
    5fd0:	fd 01       	movw	r30, r26
    5fd2:	0d c0       	rjmp	.+26     	; 0x5fee <__udivmodsi4_ep>

00005fd4 <__udivmodsi4_loop>:
    5fd4:	aa 1f       	adc	r26, r26
    5fd6:	bb 1f       	adc	r27, r27
    5fd8:	ee 1f       	adc	r30, r30
    5fda:	ff 1f       	adc	r31, r31
    5fdc:	a2 17       	cp	r26, r18
    5fde:	b3 07       	cpc	r27, r19
    5fe0:	e4 07       	cpc	r30, r20
    5fe2:	f5 07       	cpc	r31, r21
    5fe4:	20 f0       	brcs	.+8      	; 0x5fee <__udivmodsi4_ep>
    5fe6:	a2 1b       	sub	r26, r18
    5fe8:	b3 0b       	sbc	r27, r19
    5fea:	e4 0b       	sbc	r30, r20
    5fec:	f5 0b       	sbc	r31, r21

00005fee <__udivmodsi4_ep>:
    5fee:	66 1f       	adc	r22, r22
    5ff0:	77 1f       	adc	r23, r23
    5ff2:	88 1f       	adc	r24, r24
    5ff4:	99 1f       	adc	r25, r25
    5ff6:	1a 94       	dec	r1
    5ff8:	69 f7       	brne	.-38     	; 0x5fd4 <__udivmodsi4_loop>
    5ffa:	60 95       	com	r22
    5ffc:	70 95       	com	r23
    5ffe:	80 95       	com	r24
    6000:	90 95       	com	r25
    6002:	9b 01       	movw	r18, r22
    6004:	ac 01       	movw	r20, r24
    6006:	bd 01       	movw	r22, r26
    6008:	cf 01       	movw	r24, r30
    600a:	08 95       	ret

0000600c <__tablejump2__>:
    600c:	ee 0f       	add	r30, r30
    600e:	ff 1f       	adc	r31, r31
    6010:	88 1f       	adc	r24, r24
    6012:	8b bf       	out	0x3b, r24	; 59
    6014:	07 90       	elpm	r0, Z+
    6016:	f6 91       	elpm	r31, Z
    6018:	e0 2d       	mov	r30, r0
    601a:	19 94       	eijmp

0000601c <malloc>:
    601c:	0f 93       	push	r16
    601e:	1f 93       	push	r17
    6020:	cf 93       	push	r28
    6022:	df 93       	push	r29
    6024:	82 30       	cpi	r24, 0x02	; 2
    6026:	91 05       	cpc	r25, r1
    6028:	10 f4       	brcc	.+4      	; 0x602e <malloc+0x12>
    602a:	82 e0       	ldi	r24, 0x02	; 2
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <__flp>
    6032:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <__flp+0x1>
    6036:	20 e0       	ldi	r18, 0x00	; 0
    6038:	30 e0       	ldi	r19, 0x00	; 0
    603a:	a0 e0       	ldi	r26, 0x00	; 0
    603c:	b0 e0       	ldi	r27, 0x00	; 0
    603e:	30 97       	sbiw	r30, 0x00	; 0
    6040:	19 f1       	breq	.+70     	; 0x6088 <malloc+0x6c>
    6042:	40 81       	ld	r20, Z
    6044:	51 81       	ldd	r21, Z+1	; 0x01
    6046:	02 81       	ldd	r16, Z+2	; 0x02
    6048:	13 81       	ldd	r17, Z+3	; 0x03
    604a:	48 17       	cp	r20, r24
    604c:	59 07       	cpc	r21, r25
    604e:	c8 f0       	brcs	.+50     	; 0x6082 <malloc+0x66>
    6050:	84 17       	cp	r24, r20
    6052:	95 07       	cpc	r25, r21
    6054:	69 f4       	brne	.+26     	; 0x6070 <malloc+0x54>
    6056:	10 97       	sbiw	r26, 0x00	; 0
    6058:	31 f0       	breq	.+12     	; 0x6066 <malloc+0x4a>
    605a:	12 96       	adiw	r26, 0x02	; 2
    605c:	0c 93       	st	X, r16
    605e:	12 97       	sbiw	r26, 0x02	; 2
    6060:	13 96       	adiw	r26, 0x03	; 3
    6062:	1c 93       	st	X, r17
    6064:	27 c0       	rjmp	.+78     	; 0x60b4 <malloc+0x98>
    6066:	00 93 f5 18 	sts	0x18F5, r16	; 0x8018f5 <__flp>
    606a:	10 93 f6 18 	sts	0x18F6, r17	; 0x8018f6 <__flp+0x1>
    606e:	22 c0       	rjmp	.+68     	; 0x60b4 <malloc+0x98>
    6070:	21 15       	cp	r18, r1
    6072:	31 05       	cpc	r19, r1
    6074:	19 f0       	breq	.+6      	; 0x607c <malloc+0x60>
    6076:	42 17       	cp	r20, r18
    6078:	53 07       	cpc	r21, r19
    607a:	18 f4       	brcc	.+6      	; 0x6082 <malloc+0x66>
    607c:	9a 01       	movw	r18, r20
    607e:	bd 01       	movw	r22, r26
    6080:	ef 01       	movw	r28, r30
    6082:	df 01       	movw	r26, r30
    6084:	f8 01       	movw	r30, r16
    6086:	db cf       	rjmp	.-74     	; 0x603e <malloc+0x22>
    6088:	21 15       	cp	r18, r1
    608a:	31 05       	cpc	r19, r1
    608c:	f9 f0       	breq	.+62     	; 0x60cc <malloc+0xb0>
    608e:	28 1b       	sub	r18, r24
    6090:	39 0b       	sbc	r19, r25
    6092:	24 30       	cpi	r18, 0x04	; 4
    6094:	31 05       	cpc	r19, r1
    6096:	80 f4       	brcc	.+32     	; 0x60b8 <malloc+0x9c>
    6098:	8a 81       	ldd	r24, Y+2	; 0x02
    609a:	9b 81       	ldd	r25, Y+3	; 0x03
    609c:	61 15       	cp	r22, r1
    609e:	71 05       	cpc	r23, r1
    60a0:	21 f0       	breq	.+8      	; 0x60aa <malloc+0x8e>
    60a2:	fb 01       	movw	r30, r22
    60a4:	93 83       	std	Z+3, r25	; 0x03
    60a6:	82 83       	std	Z+2, r24	; 0x02
    60a8:	04 c0       	rjmp	.+8      	; 0x60b2 <malloc+0x96>
    60aa:	90 93 f6 18 	sts	0x18F6, r25	; 0x8018f6 <__flp+0x1>
    60ae:	80 93 f5 18 	sts	0x18F5, r24	; 0x8018f5 <__flp>
    60b2:	fe 01       	movw	r30, r28
    60b4:	32 96       	adiw	r30, 0x02	; 2
    60b6:	44 c0       	rjmp	.+136    	; 0x6140 <malloc+0x124>
    60b8:	fe 01       	movw	r30, r28
    60ba:	e2 0f       	add	r30, r18
    60bc:	f3 1f       	adc	r31, r19
    60be:	81 93       	st	Z+, r24
    60c0:	91 93       	st	Z+, r25
    60c2:	22 50       	subi	r18, 0x02	; 2
    60c4:	31 09       	sbc	r19, r1
    60c6:	39 83       	std	Y+1, r19	; 0x01
    60c8:	28 83       	st	Y, r18
    60ca:	3a c0       	rjmp	.+116    	; 0x6140 <malloc+0x124>
    60cc:	20 91 f3 18 	lds	r18, 0x18F3	; 0x8018f3 <__brkval>
    60d0:	30 91 f4 18 	lds	r19, 0x18F4	; 0x8018f4 <__brkval+0x1>
    60d4:	23 2b       	or	r18, r19
    60d6:	41 f4       	brne	.+16     	; 0x60e8 <malloc+0xcc>
    60d8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    60dc:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    60e0:	30 93 f4 18 	sts	0x18F4, r19	; 0x8018f4 <__brkval+0x1>
    60e4:	20 93 f3 18 	sts	0x18F3, r18	; 0x8018f3 <__brkval>
    60e8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    60ec:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    60f0:	21 15       	cp	r18, r1
    60f2:	31 05       	cpc	r19, r1
    60f4:	41 f4       	brne	.+16     	; 0x6106 <malloc+0xea>
    60f6:	2d b7       	in	r18, 0x3d	; 61
    60f8:	3e b7       	in	r19, 0x3e	; 62
    60fa:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    60fe:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6102:	24 1b       	sub	r18, r20
    6104:	35 0b       	sbc	r19, r21
    6106:	e0 91 f3 18 	lds	r30, 0x18F3	; 0x8018f3 <__brkval>
    610a:	f0 91 f4 18 	lds	r31, 0x18F4	; 0x8018f4 <__brkval+0x1>
    610e:	e2 17       	cp	r30, r18
    6110:	f3 07       	cpc	r31, r19
    6112:	a0 f4       	brcc	.+40     	; 0x613c <malloc+0x120>
    6114:	2e 1b       	sub	r18, r30
    6116:	3f 0b       	sbc	r19, r31
    6118:	28 17       	cp	r18, r24
    611a:	39 07       	cpc	r19, r25
    611c:	78 f0       	brcs	.+30     	; 0x613c <malloc+0x120>
    611e:	ac 01       	movw	r20, r24
    6120:	4e 5f       	subi	r20, 0xFE	; 254
    6122:	5f 4f       	sbci	r21, 0xFF	; 255
    6124:	24 17       	cp	r18, r20
    6126:	35 07       	cpc	r19, r21
    6128:	48 f0       	brcs	.+18     	; 0x613c <malloc+0x120>
    612a:	4e 0f       	add	r20, r30
    612c:	5f 1f       	adc	r21, r31
    612e:	50 93 f4 18 	sts	0x18F4, r21	; 0x8018f4 <__brkval+0x1>
    6132:	40 93 f3 18 	sts	0x18F3, r20	; 0x8018f3 <__brkval>
    6136:	81 93       	st	Z+, r24
    6138:	91 93       	st	Z+, r25
    613a:	02 c0       	rjmp	.+4      	; 0x6140 <malloc+0x124>
    613c:	e0 e0       	ldi	r30, 0x00	; 0
    613e:	f0 e0       	ldi	r31, 0x00	; 0
    6140:	cf 01       	movw	r24, r30
    6142:	df 91       	pop	r29
    6144:	cf 91       	pop	r28
    6146:	1f 91       	pop	r17
    6148:	0f 91       	pop	r16
    614a:	08 95       	ret

0000614c <free>:
    614c:	cf 93       	push	r28
    614e:	df 93       	push	r29
    6150:	00 97       	sbiw	r24, 0x00	; 0
    6152:	09 f4       	brne	.+2      	; 0x6156 <free+0xa>
    6154:	81 c0       	rjmp	.+258    	; 0x6258 <free+0x10c>
    6156:	fc 01       	movw	r30, r24
    6158:	32 97       	sbiw	r30, 0x02	; 2
    615a:	13 82       	std	Z+3, r1	; 0x03
    615c:	12 82       	std	Z+2, r1	; 0x02
    615e:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <__flp>
    6162:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <__flp+0x1>
    6166:	10 97       	sbiw	r26, 0x00	; 0
    6168:	81 f4       	brne	.+32     	; 0x618a <free+0x3e>
    616a:	20 81       	ld	r18, Z
    616c:	31 81       	ldd	r19, Z+1	; 0x01
    616e:	82 0f       	add	r24, r18
    6170:	93 1f       	adc	r25, r19
    6172:	20 91 f3 18 	lds	r18, 0x18F3	; 0x8018f3 <__brkval>
    6176:	30 91 f4 18 	lds	r19, 0x18F4	; 0x8018f4 <__brkval+0x1>
    617a:	28 17       	cp	r18, r24
    617c:	39 07       	cpc	r19, r25
    617e:	51 f5       	brne	.+84     	; 0x61d4 <free+0x88>
    6180:	f0 93 f4 18 	sts	0x18F4, r31	; 0x8018f4 <__brkval+0x1>
    6184:	e0 93 f3 18 	sts	0x18F3, r30	; 0x8018f3 <__brkval>
    6188:	67 c0       	rjmp	.+206    	; 0x6258 <free+0x10c>
    618a:	ed 01       	movw	r28, r26
    618c:	20 e0       	ldi	r18, 0x00	; 0
    618e:	30 e0       	ldi	r19, 0x00	; 0
    6190:	ce 17       	cp	r28, r30
    6192:	df 07       	cpc	r29, r31
    6194:	40 f4       	brcc	.+16     	; 0x61a6 <free+0x5a>
    6196:	4a 81       	ldd	r20, Y+2	; 0x02
    6198:	5b 81       	ldd	r21, Y+3	; 0x03
    619a:	9e 01       	movw	r18, r28
    619c:	41 15       	cp	r20, r1
    619e:	51 05       	cpc	r21, r1
    61a0:	f1 f0       	breq	.+60     	; 0x61de <free+0x92>
    61a2:	ea 01       	movw	r28, r20
    61a4:	f5 cf       	rjmp	.-22     	; 0x6190 <free+0x44>
    61a6:	d3 83       	std	Z+3, r29	; 0x03
    61a8:	c2 83       	std	Z+2, r28	; 0x02
    61aa:	40 81       	ld	r20, Z
    61ac:	51 81       	ldd	r21, Z+1	; 0x01
    61ae:	84 0f       	add	r24, r20
    61b0:	95 1f       	adc	r25, r21
    61b2:	c8 17       	cp	r28, r24
    61b4:	d9 07       	cpc	r29, r25
    61b6:	59 f4       	brne	.+22     	; 0x61ce <free+0x82>
    61b8:	88 81       	ld	r24, Y
    61ba:	99 81       	ldd	r25, Y+1	; 0x01
    61bc:	84 0f       	add	r24, r20
    61be:	95 1f       	adc	r25, r21
    61c0:	02 96       	adiw	r24, 0x02	; 2
    61c2:	91 83       	std	Z+1, r25	; 0x01
    61c4:	80 83       	st	Z, r24
    61c6:	8a 81       	ldd	r24, Y+2	; 0x02
    61c8:	9b 81       	ldd	r25, Y+3	; 0x03
    61ca:	93 83       	std	Z+3, r25	; 0x03
    61cc:	82 83       	std	Z+2, r24	; 0x02
    61ce:	21 15       	cp	r18, r1
    61d0:	31 05       	cpc	r19, r1
    61d2:	29 f4       	brne	.+10     	; 0x61de <free+0x92>
    61d4:	f0 93 f6 18 	sts	0x18F6, r31	; 0x8018f6 <__flp+0x1>
    61d8:	e0 93 f5 18 	sts	0x18F5, r30	; 0x8018f5 <__flp>
    61dc:	3d c0       	rjmp	.+122    	; 0x6258 <free+0x10c>
    61de:	e9 01       	movw	r28, r18
    61e0:	fb 83       	std	Y+3, r31	; 0x03
    61e2:	ea 83       	std	Y+2, r30	; 0x02
    61e4:	49 91       	ld	r20, Y+
    61e6:	59 91       	ld	r21, Y+
    61e8:	c4 0f       	add	r28, r20
    61ea:	d5 1f       	adc	r29, r21
    61ec:	ec 17       	cp	r30, r28
    61ee:	fd 07       	cpc	r31, r29
    61f0:	61 f4       	brne	.+24     	; 0x620a <free+0xbe>
    61f2:	80 81       	ld	r24, Z
    61f4:	91 81       	ldd	r25, Z+1	; 0x01
    61f6:	84 0f       	add	r24, r20
    61f8:	95 1f       	adc	r25, r21
    61fa:	02 96       	adiw	r24, 0x02	; 2
    61fc:	e9 01       	movw	r28, r18
    61fe:	99 83       	std	Y+1, r25	; 0x01
    6200:	88 83       	st	Y, r24
    6202:	82 81       	ldd	r24, Z+2	; 0x02
    6204:	93 81       	ldd	r25, Z+3	; 0x03
    6206:	9b 83       	std	Y+3, r25	; 0x03
    6208:	8a 83       	std	Y+2, r24	; 0x02
    620a:	e0 e0       	ldi	r30, 0x00	; 0
    620c:	f0 e0       	ldi	r31, 0x00	; 0
    620e:	12 96       	adiw	r26, 0x02	; 2
    6210:	8d 91       	ld	r24, X+
    6212:	9c 91       	ld	r25, X
    6214:	13 97       	sbiw	r26, 0x03	; 3
    6216:	00 97       	sbiw	r24, 0x00	; 0
    6218:	19 f0       	breq	.+6      	; 0x6220 <free+0xd4>
    621a:	fd 01       	movw	r30, r26
    621c:	dc 01       	movw	r26, r24
    621e:	f7 cf       	rjmp	.-18     	; 0x620e <free+0xc2>
    6220:	8d 91       	ld	r24, X+
    6222:	9c 91       	ld	r25, X
    6224:	11 97       	sbiw	r26, 0x01	; 1
    6226:	9d 01       	movw	r18, r26
    6228:	2e 5f       	subi	r18, 0xFE	; 254
    622a:	3f 4f       	sbci	r19, 0xFF	; 255
    622c:	82 0f       	add	r24, r18
    622e:	93 1f       	adc	r25, r19
    6230:	20 91 f3 18 	lds	r18, 0x18F3	; 0x8018f3 <__brkval>
    6234:	30 91 f4 18 	lds	r19, 0x18F4	; 0x8018f4 <__brkval+0x1>
    6238:	28 17       	cp	r18, r24
    623a:	39 07       	cpc	r19, r25
    623c:	69 f4       	brne	.+26     	; 0x6258 <free+0x10c>
    623e:	30 97       	sbiw	r30, 0x00	; 0
    6240:	29 f4       	brne	.+10     	; 0x624c <free+0x100>
    6242:	10 92 f6 18 	sts	0x18F6, r1	; 0x8018f6 <__flp+0x1>
    6246:	10 92 f5 18 	sts	0x18F5, r1	; 0x8018f5 <__flp>
    624a:	02 c0       	rjmp	.+4      	; 0x6250 <free+0x104>
    624c:	13 82       	std	Z+3, r1	; 0x03
    624e:	12 82       	std	Z+2, r1	; 0x02
    6250:	b0 93 f4 18 	sts	0x18F4, r27	; 0x8018f4 <__brkval+0x1>
    6254:	a0 93 f3 18 	sts	0x18F3, r26	; 0x8018f3 <__brkval>
    6258:	df 91       	pop	r29
    625a:	cf 91       	pop	r28
    625c:	08 95       	ret

0000625e <abort>:
    625e:	81 e0       	ldi	r24, 0x01	; 1
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	f8 94       	cli
    6264:	5a c2       	rjmp	.+1204   	; 0x671a <_exit>

00006266 <__ftoa_engine>:
    6266:	28 30       	cpi	r18, 0x08	; 8
    6268:	08 f0       	brcs	.+2      	; 0x626c <__ftoa_engine+0x6>
    626a:	27 e0       	ldi	r18, 0x07	; 7
    626c:	33 27       	eor	r19, r19
    626e:	da 01       	movw	r26, r20
    6270:	99 0f       	add	r25, r25
    6272:	31 1d       	adc	r19, r1
    6274:	87 fd       	sbrc	r24, 7
    6276:	91 60       	ori	r25, 0x01	; 1
    6278:	00 96       	adiw	r24, 0x00	; 0
    627a:	61 05       	cpc	r22, r1
    627c:	71 05       	cpc	r23, r1
    627e:	39 f4       	brne	.+14     	; 0x628e <__ftoa_engine+0x28>
    6280:	32 60       	ori	r19, 0x02	; 2
    6282:	2e 5f       	subi	r18, 0xFE	; 254
    6284:	3d 93       	st	X+, r19
    6286:	30 e3       	ldi	r19, 0x30	; 48
    6288:	2a 95       	dec	r18
    628a:	e1 f7       	brne	.-8      	; 0x6284 <__ftoa_engine+0x1e>
    628c:	08 95       	ret
    628e:	9f 3f       	cpi	r25, 0xFF	; 255
    6290:	30 f0       	brcs	.+12     	; 0x629e <__ftoa_engine+0x38>
    6292:	80 38       	cpi	r24, 0x80	; 128
    6294:	71 05       	cpc	r23, r1
    6296:	61 05       	cpc	r22, r1
    6298:	09 f0       	breq	.+2      	; 0x629c <__ftoa_engine+0x36>
    629a:	3c 5f       	subi	r19, 0xFC	; 252
    629c:	3c 5f       	subi	r19, 0xFC	; 252
    629e:	3d 93       	st	X+, r19
    62a0:	91 30       	cpi	r25, 0x01	; 1
    62a2:	08 f0       	brcs	.+2      	; 0x62a6 <__ftoa_engine+0x40>
    62a4:	80 68       	ori	r24, 0x80	; 128
    62a6:	91 1d       	adc	r25, r1
    62a8:	df 93       	push	r29
    62aa:	cf 93       	push	r28
    62ac:	1f 93       	push	r17
    62ae:	0f 93       	push	r16
    62b0:	ff 92       	push	r15
    62b2:	ef 92       	push	r14
    62b4:	19 2f       	mov	r17, r25
    62b6:	98 7f       	andi	r25, 0xF8	; 248
    62b8:	96 95       	lsr	r25
    62ba:	e9 2f       	mov	r30, r25
    62bc:	96 95       	lsr	r25
    62be:	96 95       	lsr	r25
    62c0:	e9 0f       	add	r30, r25
    62c2:	ff 27       	eor	r31, r31
    62c4:	e4 50       	subi	r30, 0x04	; 4
    62c6:	fe 4f       	sbci	r31, 0xFE	; 254
    62c8:	99 27       	eor	r25, r25
    62ca:	33 27       	eor	r19, r19
    62cc:	ee 24       	eor	r14, r14
    62ce:	ff 24       	eor	r15, r15
    62d0:	a7 01       	movw	r20, r14
    62d2:	e7 01       	movw	r28, r14
    62d4:	05 90       	lpm	r0, Z+
    62d6:	08 94       	sec
    62d8:	07 94       	ror	r0
    62da:	28 f4       	brcc	.+10     	; 0x62e6 <__ftoa_engine+0x80>
    62dc:	36 0f       	add	r19, r22
    62de:	e7 1e       	adc	r14, r23
    62e0:	f8 1e       	adc	r15, r24
    62e2:	49 1f       	adc	r20, r25
    62e4:	51 1d       	adc	r21, r1
    62e6:	66 0f       	add	r22, r22
    62e8:	77 1f       	adc	r23, r23
    62ea:	88 1f       	adc	r24, r24
    62ec:	99 1f       	adc	r25, r25
    62ee:	06 94       	lsr	r0
    62f0:	a1 f7       	brne	.-24     	; 0x62da <__ftoa_engine+0x74>
    62f2:	05 90       	lpm	r0, Z+
    62f4:	07 94       	ror	r0
    62f6:	28 f4       	brcc	.+10     	; 0x6302 <__ftoa_engine+0x9c>
    62f8:	e7 0e       	add	r14, r23
    62fa:	f8 1e       	adc	r15, r24
    62fc:	49 1f       	adc	r20, r25
    62fe:	56 1f       	adc	r21, r22
    6300:	c1 1d       	adc	r28, r1
    6302:	77 0f       	add	r23, r23
    6304:	88 1f       	adc	r24, r24
    6306:	99 1f       	adc	r25, r25
    6308:	66 1f       	adc	r22, r22
    630a:	06 94       	lsr	r0
    630c:	a1 f7       	brne	.-24     	; 0x62f6 <__ftoa_engine+0x90>
    630e:	05 90       	lpm	r0, Z+
    6310:	07 94       	ror	r0
    6312:	28 f4       	brcc	.+10     	; 0x631e <__ftoa_engine+0xb8>
    6314:	f8 0e       	add	r15, r24
    6316:	49 1f       	adc	r20, r25
    6318:	56 1f       	adc	r21, r22
    631a:	c7 1f       	adc	r28, r23
    631c:	d1 1d       	adc	r29, r1
    631e:	88 0f       	add	r24, r24
    6320:	99 1f       	adc	r25, r25
    6322:	66 1f       	adc	r22, r22
    6324:	77 1f       	adc	r23, r23
    6326:	06 94       	lsr	r0
    6328:	a1 f7       	brne	.-24     	; 0x6312 <__ftoa_engine+0xac>
    632a:	05 90       	lpm	r0, Z+
    632c:	07 94       	ror	r0
    632e:	20 f4       	brcc	.+8      	; 0x6338 <__ftoa_engine+0xd2>
    6330:	49 0f       	add	r20, r25
    6332:	56 1f       	adc	r21, r22
    6334:	c7 1f       	adc	r28, r23
    6336:	d8 1f       	adc	r29, r24
    6338:	99 0f       	add	r25, r25
    633a:	66 1f       	adc	r22, r22
    633c:	77 1f       	adc	r23, r23
    633e:	88 1f       	adc	r24, r24
    6340:	06 94       	lsr	r0
    6342:	a9 f7       	brne	.-22     	; 0x632e <__ftoa_engine+0xc8>
    6344:	84 91       	lpm	r24, Z
    6346:	10 95       	com	r17
    6348:	17 70       	andi	r17, 0x07	; 7
    634a:	41 f0       	breq	.+16     	; 0x635c <__ftoa_engine+0xf6>
    634c:	d6 95       	lsr	r29
    634e:	c7 95       	ror	r28
    6350:	57 95       	ror	r21
    6352:	47 95       	ror	r20
    6354:	f7 94       	ror	r15
    6356:	e7 94       	ror	r14
    6358:	1a 95       	dec	r17
    635a:	c1 f7       	brne	.-16     	; 0x634c <__ftoa_engine+0xe6>
    635c:	e2 ea       	ldi	r30, 0xA2	; 162
    635e:	f1 e0       	ldi	r31, 0x01	; 1
    6360:	68 94       	set
    6362:	15 90       	lpm	r1, Z+
    6364:	15 91       	lpm	r17, Z+
    6366:	35 91       	lpm	r19, Z+
    6368:	65 91       	lpm	r22, Z+
    636a:	95 91       	lpm	r25, Z+
    636c:	05 90       	lpm	r0, Z+
    636e:	7f e2       	ldi	r23, 0x2F	; 47
    6370:	73 95       	inc	r23
    6372:	e1 18       	sub	r14, r1
    6374:	f1 0a       	sbc	r15, r17
    6376:	43 0b       	sbc	r20, r19
    6378:	56 0b       	sbc	r21, r22
    637a:	c9 0b       	sbc	r28, r25
    637c:	d0 09       	sbc	r29, r0
    637e:	c0 f7       	brcc	.-16     	; 0x6370 <__ftoa_engine+0x10a>
    6380:	e1 0c       	add	r14, r1
    6382:	f1 1e       	adc	r15, r17
    6384:	43 1f       	adc	r20, r19
    6386:	56 1f       	adc	r21, r22
    6388:	c9 1f       	adc	r28, r25
    638a:	d0 1d       	adc	r29, r0
    638c:	7e f4       	brtc	.+30     	; 0x63ac <__ftoa_engine+0x146>
    638e:	70 33       	cpi	r23, 0x30	; 48
    6390:	11 f4       	brne	.+4      	; 0x6396 <__ftoa_engine+0x130>
    6392:	8a 95       	dec	r24
    6394:	e6 cf       	rjmp	.-52     	; 0x6362 <__ftoa_engine+0xfc>
    6396:	e8 94       	clt
    6398:	01 50       	subi	r16, 0x01	; 1
    639a:	30 f0       	brcs	.+12     	; 0x63a8 <__ftoa_engine+0x142>
    639c:	08 0f       	add	r16, r24
    639e:	0a f4       	brpl	.+2      	; 0x63a2 <__ftoa_engine+0x13c>
    63a0:	00 27       	eor	r16, r16
    63a2:	02 17       	cp	r16, r18
    63a4:	08 f4       	brcc	.+2      	; 0x63a8 <__ftoa_engine+0x142>
    63a6:	20 2f       	mov	r18, r16
    63a8:	23 95       	inc	r18
    63aa:	02 2f       	mov	r16, r18
    63ac:	7a 33       	cpi	r23, 0x3A	; 58
    63ae:	28 f0       	brcs	.+10     	; 0x63ba <__ftoa_engine+0x154>
    63b0:	79 e3       	ldi	r23, 0x39	; 57
    63b2:	7d 93       	st	X+, r23
    63b4:	2a 95       	dec	r18
    63b6:	e9 f7       	brne	.-6      	; 0x63b2 <__ftoa_engine+0x14c>
    63b8:	10 c0       	rjmp	.+32     	; 0x63da <__ftoa_engine+0x174>
    63ba:	7d 93       	st	X+, r23
    63bc:	2a 95       	dec	r18
    63be:	89 f6       	brne	.-94     	; 0x6362 <__ftoa_engine+0xfc>
    63c0:	06 94       	lsr	r0
    63c2:	97 95       	ror	r25
    63c4:	67 95       	ror	r22
    63c6:	37 95       	ror	r19
    63c8:	17 95       	ror	r17
    63ca:	17 94       	ror	r1
    63cc:	e1 18       	sub	r14, r1
    63ce:	f1 0a       	sbc	r15, r17
    63d0:	43 0b       	sbc	r20, r19
    63d2:	56 0b       	sbc	r21, r22
    63d4:	c9 0b       	sbc	r28, r25
    63d6:	d0 09       	sbc	r29, r0
    63d8:	98 f0       	brcs	.+38     	; 0x6400 <__ftoa_engine+0x19a>
    63da:	23 95       	inc	r18
    63dc:	7e 91       	ld	r23, -X
    63de:	73 95       	inc	r23
    63e0:	7a 33       	cpi	r23, 0x3A	; 58
    63e2:	08 f0       	brcs	.+2      	; 0x63e6 <__ftoa_engine+0x180>
    63e4:	70 e3       	ldi	r23, 0x30	; 48
    63e6:	7c 93       	st	X, r23
    63e8:	20 13       	cpse	r18, r16
    63ea:	b8 f7       	brcc	.-18     	; 0x63da <__ftoa_engine+0x174>
    63ec:	7e 91       	ld	r23, -X
    63ee:	70 61       	ori	r23, 0x10	; 16
    63f0:	7d 93       	st	X+, r23
    63f2:	30 f0       	brcs	.+12     	; 0x6400 <__ftoa_engine+0x19a>
    63f4:	83 95       	inc	r24
    63f6:	71 e3       	ldi	r23, 0x31	; 49
    63f8:	7d 93       	st	X+, r23
    63fa:	70 e3       	ldi	r23, 0x30	; 48
    63fc:	2a 95       	dec	r18
    63fe:	e1 f7       	brne	.-8      	; 0x63f8 <__ftoa_engine+0x192>
    6400:	11 24       	eor	r1, r1
    6402:	ef 90       	pop	r14
    6404:	ff 90       	pop	r15
    6406:	0f 91       	pop	r16
    6408:	1f 91       	pop	r17
    640a:	cf 91       	pop	r28
    640c:	df 91       	pop	r29
    640e:	99 27       	eor	r25, r25
    6410:	87 fd       	sbrc	r24, 7
    6412:	90 95       	com	r25
    6414:	08 95       	ret

00006416 <strnlen_P>:
    6416:	fc 01       	movw	r30, r24
    6418:	05 90       	lpm	r0, Z+
    641a:	61 50       	subi	r22, 0x01	; 1
    641c:	70 40       	sbci	r23, 0x00	; 0
    641e:	01 10       	cpse	r0, r1
    6420:	d8 f7       	brcc	.-10     	; 0x6418 <strnlen_P+0x2>
    6422:	80 95       	com	r24
    6424:	90 95       	com	r25
    6426:	8e 0f       	add	r24, r30
    6428:	9f 1f       	adc	r25, r31
    642a:	08 95       	ret

0000642c <memcpy>:
    642c:	fb 01       	movw	r30, r22
    642e:	dc 01       	movw	r26, r24
    6430:	02 c0       	rjmp	.+4      	; 0x6436 <memcpy+0xa>
    6432:	01 90       	ld	r0, Z+
    6434:	0d 92       	st	X+, r0
    6436:	41 50       	subi	r20, 0x01	; 1
    6438:	50 40       	sbci	r21, 0x00	; 0
    643a:	d8 f7       	brcc	.-10     	; 0x6432 <memcpy+0x6>
    643c:	08 95       	ret

0000643e <memset>:
    643e:	dc 01       	movw	r26, r24
    6440:	01 c0       	rjmp	.+2      	; 0x6444 <memset+0x6>
    6442:	6d 93       	st	X+, r22
    6444:	41 50       	subi	r20, 0x01	; 1
    6446:	50 40       	sbci	r21, 0x00	; 0
    6448:	e0 f7       	brcc	.-8      	; 0x6442 <memset+0x4>
    644a:	08 95       	ret

0000644c <strcasestr>:
    644c:	fb 01       	movw	r30, r22
    644e:	51 91       	ld	r21, Z+
    6450:	55 23       	and	r21, r21
    6452:	b1 f0       	breq	.+44     	; 0x6480 <strcasestr+0x34>
    6454:	bf 01       	movw	r22, r30
    6456:	dc 01       	movw	r26, r24
    6458:	05 2e       	mov	r0, r21
    645a:	4d 91       	ld	r20, X+
    645c:	44 23       	and	r20, r20
    645e:	69 f0       	breq	.+26     	; 0x647a <strcasestr+0x2e>
    6460:	10 d0       	rcall	.+32     	; 0x6482 <strcasestr+0x36>
    6462:	d9 f7       	brne	.-10     	; 0x645a <strcasestr+0xe>
    6464:	cd 01       	movw	r24, r26
    6466:	01 90       	ld	r0, Z+
    6468:	00 20       	and	r0, r0
    646a:	49 f0       	breq	.+18     	; 0x647e <strcasestr+0x32>
    646c:	4d 91       	ld	r20, X+
    646e:	41 11       	cpse	r20, r1
    6470:	08 d0       	rcall	.+16     	; 0x6482 <strcasestr+0x36>
    6472:	c9 f3       	breq	.-14     	; 0x6466 <strcasestr+0x1a>
    6474:	fb 01       	movw	r30, r22
    6476:	41 11       	cpse	r20, r1
    6478:	ee cf       	rjmp	.-36     	; 0x6456 <strcasestr+0xa>
    647a:	81 e0       	ldi	r24, 0x01	; 1
    647c:	90 e0       	ldi	r25, 0x00	; 0
    647e:	01 97       	sbiw	r24, 0x01	; 1
    6480:	08 95       	ret
    6482:	40 25       	eor	r20, r0
    6484:	39 f0       	breq	.+14     	; 0x6494 <strcasestr+0x48>
    6486:	40 32       	cpi	r20, 0x20	; 32
    6488:	29 f4       	brne	.+10     	; 0x6494 <strcasestr+0x48>
    648a:	40 29       	or	r20, r0
    648c:	4b 57       	subi	r20, 0x7B	; 123
    648e:	46 5e       	subi	r20, 0xE6	; 230
    6490:	08 f0       	brcs	.+2      	; 0x6494 <strcasestr+0x48>
    6492:	18 94       	sez
    6494:	08 95       	ret

00006496 <strcat>:
    6496:	fb 01       	movw	r30, r22
    6498:	dc 01       	movw	r26, r24
    649a:	0d 90       	ld	r0, X+
    649c:	00 20       	and	r0, r0
    649e:	e9 f7       	brne	.-6      	; 0x649a <strcat+0x4>
    64a0:	11 97       	sbiw	r26, 0x01	; 1
    64a2:	01 90       	ld	r0, Z+
    64a4:	0d 92       	st	X+, r0
    64a6:	00 20       	and	r0, r0
    64a8:	e1 f7       	brne	.-8      	; 0x64a2 <strcat+0xc>
    64aa:	08 95       	ret

000064ac <strcpy>:
    64ac:	fb 01       	movw	r30, r22
    64ae:	dc 01       	movw	r26, r24
    64b0:	01 90       	ld	r0, Z+
    64b2:	0d 92       	st	X+, r0
    64b4:	00 20       	and	r0, r0
    64b6:	e1 f7       	brne	.-8      	; 0x64b0 <strcpy+0x4>
    64b8:	08 95       	ret

000064ba <strncasecmp>:
    64ba:	fb 01       	movw	r30, r22
    64bc:	dc 01       	movw	r26, r24
    64be:	41 50       	subi	r20, 0x01	; 1
    64c0:	50 40       	sbci	r21, 0x00	; 0
    64c2:	88 f0       	brcs	.+34     	; 0x64e6 <strncasecmp+0x2c>
    64c4:	8d 91       	ld	r24, X+
    64c6:	81 34       	cpi	r24, 0x41	; 65
    64c8:	1c f0       	brlt	.+6      	; 0x64d0 <strncasecmp+0x16>
    64ca:	8b 35       	cpi	r24, 0x5B	; 91
    64cc:	0c f4       	brge	.+2      	; 0x64d0 <strncasecmp+0x16>
    64ce:	80 5e       	subi	r24, 0xE0	; 224
    64d0:	61 91       	ld	r22, Z+
    64d2:	61 34       	cpi	r22, 0x41	; 65
    64d4:	1c f0       	brlt	.+6      	; 0x64dc <strncasecmp+0x22>
    64d6:	6b 35       	cpi	r22, 0x5B	; 91
    64d8:	0c f4       	brge	.+2      	; 0x64dc <strncasecmp+0x22>
    64da:	60 5e       	subi	r22, 0xE0	; 224
    64dc:	86 1b       	sub	r24, r22
    64de:	61 11       	cpse	r22, r1
    64e0:	71 f3       	breq	.-36     	; 0x64be <strncasecmp+0x4>
    64e2:	99 0b       	sbc	r25, r25
    64e4:	08 95       	ret
    64e6:	88 1b       	sub	r24, r24
    64e8:	fc cf       	rjmp	.-8      	; 0x64e2 <strncasecmp+0x28>

000064ea <strnlen>:
    64ea:	fc 01       	movw	r30, r24
    64ec:	61 50       	subi	r22, 0x01	; 1
    64ee:	70 40       	sbci	r23, 0x00	; 0
    64f0:	01 90       	ld	r0, Z+
    64f2:	01 10       	cpse	r0, r1
    64f4:	d8 f7       	brcc	.-10     	; 0x64ec <strnlen+0x2>
    64f6:	80 95       	com	r24
    64f8:	90 95       	com	r25
    64fa:	8e 0f       	add	r24, r30
    64fc:	9f 1f       	adc	r25, r31
    64fe:	08 95       	ret

00006500 <fputc>:
    6500:	0f 93       	push	r16
    6502:	1f 93       	push	r17
    6504:	cf 93       	push	r28
    6506:	df 93       	push	r29
    6508:	fb 01       	movw	r30, r22
    650a:	23 81       	ldd	r18, Z+3	; 0x03
    650c:	21 fd       	sbrc	r18, 1
    650e:	03 c0       	rjmp	.+6      	; 0x6516 <fputc+0x16>
    6510:	8f ef       	ldi	r24, 0xFF	; 255
    6512:	9f ef       	ldi	r25, 0xFF	; 255
    6514:	2c c0       	rjmp	.+88     	; 0x656e <fputc+0x6e>
    6516:	22 ff       	sbrs	r18, 2
    6518:	16 c0       	rjmp	.+44     	; 0x6546 <fputc+0x46>
    651a:	46 81       	ldd	r20, Z+6	; 0x06
    651c:	57 81       	ldd	r21, Z+7	; 0x07
    651e:	24 81       	ldd	r18, Z+4	; 0x04
    6520:	35 81       	ldd	r19, Z+5	; 0x05
    6522:	42 17       	cp	r20, r18
    6524:	53 07       	cpc	r21, r19
    6526:	44 f4       	brge	.+16     	; 0x6538 <fputc+0x38>
    6528:	a0 81       	ld	r26, Z
    652a:	b1 81       	ldd	r27, Z+1	; 0x01
    652c:	9d 01       	movw	r18, r26
    652e:	2f 5f       	subi	r18, 0xFF	; 255
    6530:	3f 4f       	sbci	r19, 0xFF	; 255
    6532:	31 83       	std	Z+1, r19	; 0x01
    6534:	20 83       	st	Z, r18
    6536:	8c 93       	st	X, r24
    6538:	26 81       	ldd	r18, Z+6	; 0x06
    653a:	37 81       	ldd	r19, Z+7	; 0x07
    653c:	2f 5f       	subi	r18, 0xFF	; 255
    653e:	3f 4f       	sbci	r19, 0xFF	; 255
    6540:	37 83       	std	Z+7, r19	; 0x07
    6542:	26 83       	std	Z+6, r18	; 0x06
    6544:	14 c0       	rjmp	.+40     	; 0x656e <fputc+0x6e>
    6546:	8b 01       	movw	r16, r22
    6548:	ec 01       	movw	r28, r24
    654a:	fb 01       	movw	r30, r22
    654c:	00 84       	ldd	r0, Z+8	; 0x08
    654e:	f1 85       	ldd	r31, Z+9	; 0x09
    6550:	e0 2d       	mov	r30, r0
    6552:	19 95       	eicall
    6554:	89 2b       	or	r24, r25
    6556:	e1 f6       	brne	.-72     	; 0x6510 <fputc+0x10>
    6558:	d8 01       	movw	r26, r16
    655a:	16 96       	adiw	r26, 0x06	; 6
    655c:	8d 91       	ld	r24, X+
    655e:	9c 91       	ld	r25, X
    6560:	17 97       	sbiw	r26, 0x07	; 7
    6562:	01 96       	adiw	r24, 0x01	; 1
    6564:	17 96       	adiw	r26, 0x07	; 7
    6566:	9c 93       	st	X, r25
    6568:	8e 93       	st	-X, r24
    656a:	16 97       	sbiw	r26, 0x06	; 6
    656c:	ce 01       	movw	r24, r28
    656e:	df 91       	pop	r29
    6570:	cf 91       	pop	r28
    6572:	1f 91       	pop	r17
    6574:	0f 91       	pop	r16
    6576:	08 95       	ret

00006578 <printf>:
    6578:	cf 93       	push	r28
    657a:	df 93       	push	r29
    657c:	cd b7       	in	r28, 0x3d	; 61
    657e:	de b7       	in	r29, 0x3e	; 62
    6580:	ae 01       	movw	r20, r28
    6582:	4a 5f       	subi	r20, 0xFA	; 250
    6584:	5f 4f       	sbci	r21, 0xFF	; 255
    6586:	fa 01       	movw	r30, r20
    6588:	61 91       	ld	r22, Z+
    658a:	71 91       	ld	r23, Z+
    658c:	af 01       	movw	r20, r30
    658e:	80 91 f9 18 	lds	r24, 0x18F9	; 0x8018f9 <__iob+0x2>
    6592:	90 91 fa 18 	lds	r25, 0x18FA	; 0x8018fa <__iob+0x3>
    6596:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <vfprintf>
    659a:	df 91       	pop	r29
    659c:	cf 91       	pop	r28
    659e:	08 95       	ret

000065a0 <puts>:
    65a0:	0f 93       	push	r16
    65a2:	1f 93       	push	r17
    65a4:	cf 93       	push	r28
    65a6:	df 93       	push	r29
    65a8:	e0 91 f9 18 	lds	r30, 0x18F9	; 0x8018f9 <__iob+0x2>
    65ac:	f0 91 fa 18 	lds	r31, 0x18FA	; 0x8018fa <__iob+0x3>
    65b0:	23 81       	ldd	r18, Z+3	; 0x03
    65b2:	21 ff       	sbrs	r18, 1
    65b4:	1b c0       	rjmp	.+54     	; 0x65ec <puts+0x4c>
    65b6:	8c 01       	movw	r16, r24
    65b8:	d0 e0       	ldi	r29, 0x00	; 0
    65ba:	c0 e0       	ldi	r28, 0x00	; 0
    65bc:	f8 01       	movw	r30, r16
    65be:	81 91       	ld	r24, Z+
    65c0:	8f 01       	movw	r16, r30
    65c2:	60 91 f9 18 	lds	r22, 0x18F9	; 0x8018f9 <__iob+0x2>
    65c6:	70 91 fa 18 	lds	r23, 0x18FA	; 0x8018fa <__iob+0x3>
    65ca:	db 01       	movw	r26, r22
    65cc:	18 96       	adiw	r26, 0x08	; 8
    65ce:	ed 91       	ld	r30, X+
    65d0:	fc 91       	ld	r31, X
    65d2:	19 97       	sbiw	r26, 0x09	; 9
    65d4:	88 23       	and	r24, r24
    65d6:	31 f0       	breq	.+12     	; 0x65e4 <puts+0x44>
    65d8:	19 95       	eicall
    65da:	89 2b       	or	r24, r25
    65dc:	79 f3       	breq	.-34     	; 0x65bc <puts+0x1c>
    65de:	df ef       	ldi	r29, 0xFF	; 255
    65e0:	cf ef       	ldi	r28, 0xFF	; 255
    65e2:	ec cf       	rjmp	.-40     	; 0x65bc <puts+0x1c>
    65e4:	8a e0       	ldi	r24, 0x0A	; 10
    65e6:	19 95       	eicall
    65e8:	89 2b       	or	r24, r25
    65ea:	19 f0       	breq	.+6      	; 0x65f2 <puts+0x52>
    65ec:	8f ef       	ldi	r24, 0xFF	; 255
    65ee:	9f ef       	ldi	r25, 0xFF	; 255
    65f0:	02 c0       	rjmp	.+4      	; 0x65f6 <puts+0x56>
    65f2:	8d 2f       	mov	r24, r29
    65f4:	9c 2f       	mov	r25, r28
    65f6:	df 91       	pop	r29
    65f8:	cf 91       	pop	r28
    65fa:	1f 91       	pop	r17
    65fc:	0f 91       	pop	r16
    65fe:	08 95       	ret

00006600 <sprintf>:
    6600:	0f 93       	push	r16
    6602:	1f 93       	push	r17
    6604:	cf 93       	push	r28
    6606:	df 93       	push	r29
    6608:	cd b7       	in	r28, 0x3d	; 61
    660a:	de b7       	in	r29, 0x3e	; 62
    660c:	2e 97       	sbiw	r28, 0x0e	; 14
    660e:	0f b6       	in	r0, 0x3f	; 63
    6610:	f8 94       	cli
    6612:	de bf       	out	0x3e, r29	; 62
    6614:	0f be       	out	0x3f, r0	; 63
    6616:	cd bf       	out	0x3d, r28	; 61
    6618:	0e 89       	ldd	r16, Y+22	; 0x16
    661a:	1f 89       	ldd	r17, Y+23	; 0x17
    661c:	86 e0       	ldi	r24, 0x06	; 6
    661e:	8c 83       	std	Y+4, r24	; 0x04
    6620:	1a 83       	std	Y+2, r17	; 0x02
    6622:	09 83       	std	Y+1, r16	; 0x01
    6624:	8f ef       	ldi	r24, 0xFF	; 255
    6626:	9f e7       	ldi	r25, 0x7F	; 127
    6628:	9e 83       	std	Y+6, r25	; 0x06
    662a:	8d 83       	std	Y+5, r24	; 0x05
    662c:	ae 01       	movw	r20, r28
    662e:	46 5e       	subi	r20, 0xE6	; 230
    6630:	5f 4f       	sbci	r21, 0xFF	; 255
    6632:	68 8d       	ldd	r22, Y+24	; 0x18
    6634:	79 8d       	ldd	r23, Y+25	; 0x19
    6636:	ce 01       	movw	r24, r28
    6638:	01 96       	adiw	r24, 0x01	; 1
    663a:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <vfprintf>
    663e:	ef 81       	ldd	r30, Y+7	; 0x07
    6640:	f8 85       	ldd	r31, Y+8	; 0x08
    6642:	e0 0f       	add	r30, r16
    6644:	f1 1f       	adc	r31, r17
    6646:	10 82       	st	Z, r1
    6648:	2e 96       	adiw	r28, 0x0e	; 14
    664a:	0f b6       	in	r0, 0x3f	; 63
    664c:	f8 94       	cli
    664e:	de bf       	out	0x3e, r29	; 62
    6650:	0f be       	out	0x3f, r0	; 63
    6652:	cd bf       	out	0x3d, r28	; 61
    6654:	df 91       	pop	r29
    6656:	cf 91       	pop	r28
    6658:	1f 91       	pop	r17
    665a:	0f 91       	pop	r16
    665c:	08 95       	ret

0000665e <__ultoa_invert>:
    665e:	fa 01       	movw	r30, r20
    6660:	aa 27       	eor	r26, r26
    6662:	28 30       	cpi	r18, 0x08	; 8
    6664:	51 f1       	breq	.+84     	; 0x66ba <__ultoa_invert+0x5c>
    6666:	20 31       	cpi	r18, 0x10	; 16
    6668:	81 f1       	breq	.+96     	; 0x66ca <__ultoa_invert+0x6c>
    666a:	e8 94       	clt
    666c:	6f 93       	push	r22
    666e:	6e 7f       	andi	r22, 0xFE	; 254
    6670:	6e 5f       	subi	r22, 0xFE	; 254
    6672:	7f 4f       	sbci	r23, 0xFF	; 255
    6674:	8f 4f       	sbci	r24, 0xFF	; 255
    6676:	9f 4f       	sbci	r25, 0xFF	; 255
    6678:	af 4f       	sbci	r26, 0xFF	; 255
    667a:	b1 e0       	ldi	r27, 0x01	; 1
    667c:	3e d0       	rcall	.+124    	; 0x66fa <__ultoa_invert+0x9c>
    667e:	b4 e0       	ldi	r27, 0x04	; 4
    6680:	3c d0       	rcall	.+120    	; 0x66fa <__ultoa_invert+0x9c>
    6682:	67 0f       	add	r22, r23
    6684:	78 1f       	adc	r23, r24
    6686:	89 1f       	adc	r24, r25
    6688:	9a 1f       	adc	r25, r26
    668a:	a1 1d       	adc	r26, r1
    668c:	68 0f       	add	r22, r24
    668e:	79 1f       	adc	r23, r25
    6690:	8a 1f       	adc	r24, r26
    6692:	91 1d       	adc	r25, r1
    6694:	a1 1d       	adc	r26, r1
    6696:	6a 0f       	add	r22, r26
    6698:	71 1d       	adc	r23, r1
    669a:	81 1d       	adc	r24, r1
    669c:	91 1d       	adc	r25, r1
    669e:	a1 1d       	adc	r26, r1
    66a0:	20 d0       	rcall	.+64     	; 0x66e2 <__ultoa_invert+0x84>
    66a2:	09 f4       	brne	.+2      	; 0x66a6 <__ultoa_invert+0x48>
    66a4:	68 94       	set
    66a6:	3f 91       	pop	r19
    66a8:	2a e0       	ldi	r18, 0x0A	; 10
    66aa:	26 9f       	mul	r18, r22
    66ac:	11 24       	eor	r1, r1
    66ae:	30 19       	sub	r19, r0
    66b0:	30 5d       	subi	r19, 0xD0	; 208
    66b2:	31 93       	st	Z+, r19
    66b4:	de f6       	brtc	.-74     	; 0x666c <__ultoa_invert+0xe>
    66b6:	cf 01       	movw	r24, r30
    66b8:	08 95       	ret
    66ba:	46 2f       	mov	r20, r22
    66bc:	47 70       	andi	r20, 0x07	; 7
    66be:	40 5d       	subi	r20, 0xD0	; 208
    66c0:	41 93       	st	Z+, r20
    66c2:	b3 e0       	ldi	r27, 0x03	; 3
    66c4:	0f d0       	rcall	.+30     	; 0x66e4 <__ultoa_invert+0x86>
    66c6:	c9 f7       	brne	.-14     	; 0x66ba <__ultoa_invert+0x5c>
    66c8:	f6 cf       	rjmp	.-20     	; 0x66b6 <__ultoa_invert+0x58>
    66ca:	46 2f       	mov	r20, r22
    66cc:	4f 70       	andi	r20, 0x0F	; 15
    66ce:	40 5d       	subi	r20, 0xD0	; 208
    66d0:	4a 33       	cpi	r20, 0x3A	; 58
    66d2:	18 f0       	brcs	.+6      	; 0x66da <__ultoa_invert+0x7c>
    66d4:	49 5d       	subi	r20, 0xD9	; 217
    66d6:	31 fd       	sbrc	r19, 1
    66d8:	40 52       	subi	r20, 0x20	; 32
    66da:	41 93       	st	Z+, r20
    66dc:	02 d0       	rcall	.+4      	; 0x66e2 <__ultoa_invert+0x84>
    66de:	a9 f7       	brne	.-22     	; 0x66ca <__ultoa_invert+0x6c>
    66e0:	ea cf       	rjmp	.-44     	; 0x66b6 <__ultoa_invert+0x58>
    66e2:	b4 e0       	ldi	r27, 0x04	; 4
    66e4:	a6 95       	lsr	r26
    66e6:	97 95       	ror	r25
    66e8:	87 95       	ror	r24
    66ea:	77 95       	ror	r23
    66ec:	67 95       	ror	r22
    66ee:	ba 95       	dec	r27
    66f0:	c9 f7       	brne	.-14     	; 0x66e4 <__ultoa_invert+0x86>
    66f2:	00 97       	sbiw	r24, 0x00	; 0
    66f4:	61 05       	cpc	r22, r1
    66f6:	71 05       	cpc	r23, r1
    66f8:	08 95       	ret
    66fa:	9b 01       	movw	r18, r22
    66fc:	ac 01       	movw	r20, r24
    66fe:	0a 2e       	mov	r0, r26
    6700:	06 94       	lsr	r0
    6702:	57 95       	ror	r21
    6704:	47 95       	ror	r20
    6706:	37 95       	ror	r19
    6708:	27 95       	ror	r18
    670a:	ba 95       	dec	r27
    670c:	c9 f7       	brne	.-14     	; 0x6700 <__ultoa_invert+0xa2>
    670e:	62 0f       	add	r22, r18
    6710:	73 1f       	adc	r23, r19
    6712:	84 1f       	adc	r24, r20
    6714:	95 1f       	adc	r25, r21
    6716:	a0 1d       	adc	r26, r0
    6718:	08 95       	ret

0000671a <_exit>:
    671a:	f8 94       	cli

0000671c <__stop_program>:
    671c:	ff cf       	rjmp	.-2      	; 0x671c <__stop_program>
