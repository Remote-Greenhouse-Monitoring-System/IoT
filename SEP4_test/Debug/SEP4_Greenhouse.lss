
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000876  00800200  00006a18  00006aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001008  00800a76  00800a76  00007322  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bf0  00000000  00000000  000073c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e4b6  00000000  00000000  00007fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c67  00000000  00000000  00016466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007237  00000000  00000000  0001a0cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000292c  00000000  00000000  00021304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004566  00000000  00000000  00023c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c84e  00000000  00000000  00028196  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b00  00000000  00000000  000349e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	96 c6       	rjmp	.+3372   	; 0xd5e <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b6 25 	jmp	0x4b6c	; 0x4b6c <__vector_25>
      68:	0c 94 08 26 	jmp	0x4c10	; 0x4c10 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4c 26 	jmp	0x4c98	; 0x4c98 <__vector_36>
      94:	0c 94 9e 26 	jmp	0x4d3c	; 0x4d3c <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 e2 26 	jmp	0x4dc4	; 0x4dc4 <__vector_51>
      d0:	0c 94 34 27 	jmp	0x4e68	; 0x4e68 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 78 27 	jmp	0x4ef0	; 0x4ef0 <__vector_54>
      dc:	0c 94 ca 27 	jmp	0x4f94	; 0x4f94 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c6 1a       	sub	r12, r22
      e6:	c6 1a       	sub	r12, r22
      e8:	c6 1a       	sub	r12, r22
      ea:	fd 1a       	sub	r15, r29
      ec:	05 1b       	sub	r16, r21
      ee:	1a 1b       	sub	r17, r26
      f0:	c6 1a       	sub	r12, r22
      f2:	c6 1a       	sub	r12, r22
      f4:	fd 1a       	sub	r15, r29
      f6:	05 1b       	sub	r16, r21
      f8:	0b 2b       	or	r16, r27
      fa:	7b 2b       	or	r23, r27
      fc:	7b 2b       	or	r23, r27
      fe:	7b 2b       	or	r23, r27
     100:	7b 2b       	or	r23, r27
     102:	7b 2b       	or	r23, r27
     104:	7b 2b       	or	r23, r27
     106:	7b 2b       	or	r23, r27
     108:	0b 2b       	or	r16, r27
     10a:	7b 2b       	or	r23, r27
     10c:	7b 2b       	or	r23, r27
     10e:	7b 2b       	or	r23, r27
     110:	7b 2b       	or	r23, r27
     112:	7b 2b       	or	r23, r27
     114:	7b 2b       	or	r23, r27
     116:	7b 2b       	or	r23, r27
     118:	0d 2b       	or	r16, r29
     11a:	7b 2b       	or	r23, r27
     11c:	7b 2b       	or	r23, r27
     11e:	7b 2b       	or	r23, r27
     120:	7b 2b       	or	r23, r27
     122:	7b 2b       	or	r23, r27
     124:	7b 2b       	or	r23, r27
     126:	7b 2b       	or	r23, r27
     128:	7b 2b       	or	r23, r27
     12a:	7b 2b       	or	r23, r27
     12c:	7b 2b       	or	r23, r27
     12e:	7b 2b       	or	r23, r27
     130:	7b 2b       	or	r23, r27
     132:	7b 2b       	or	r23, r27
     134:	7b 2b       	or	r23, r27
     136:	7b 2b       	or	r23, r27
     138:	0d 2b       	or	r16, r29
     13a:	7b 2b       	or	r23, r27
     13c:	7b 2b       	or	r23, r27
     13e:	7b 2b       	or	r23, r27
     140:	7b 2b       	or	r23, r27
     142:	7b 2b       	or	r23, r27
     144:	7b 2b       	or	r23, r27
     146:	7b 2b       	or	r23, r27
     148:	7b 2b       	or	r23, r27
     14a:	7b 2b       	or	r23, r27
     14c:	7b 2b       	or	r23, r27
     14e:	7b 2b       	or	r23, r27
     150:	7b 2b       	or	r23, r27
     152:	7b 2b       	or	r23, r27
     154:	7b 2b       	or	r23, r27
     156:	7b 2b       	or	r23, r27
     158:	77 2b       	or	r23, r23
     15a:	7b 2b       	or	r23, r27
     15c:	7b 2b       	or	r23, r27
     15e:	7b 2b       	or	r23, r27
     160:	7b 2b       	or	r23, r27
     162:	7b 2b       	or	r23, r27
     164:	7b 2b       	or	r23, r27
     166:	7b 2b       	or	r23, r27
     168:	42 2b       	or	r20, r18
     16a:	7b 2b       	or	r23, r27
     16c:	7b 2b       	or	r23, r27
     16e:	7b 2b       	or	r23, r27
     170:	7b 2b       	or	r23, r27
     172:	7b 2b       	or	r23, r27
     174:	7b 2b       	or	r23, r27
     176:	7b 2b       	or	r23, r27
     178:	7b 2b       	or	r23, r27
     17a:	7b 2b       	or	r23, r27
     17c:	7b 2b       	or	r23, r27
     17e:	7b 2b       	or	r23, r27
     180:	7b 2b       	or	r23, r27
     182:	7b 2b       	or	r23, r27
     184:	7b 2b       	or	r23, r27
     186:	7b 2b       	or	r23, r27
     188:	36 2b       	or	r19, r22
     18a:	7b 2b       	or	r23, r27
     18c:	7b 2b       	or	r23, r27
     18e:	7b 2b       	or	r23, r27
     190:	7b 2b       	or	r23, r27
     192:	7b 2b       	or	r23, r27
     194:	7b 2b       	or	r23, r27
     196:	7b 2b       	or	r23, r27
     198:	5a 2b       	or	r21, r26

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <prvCheckTasksWaitingTermination>
     2a0:	80 91 87 18 	lds	r24, 0x1887	; 0x801887 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	94 d4       	rcall	.+2344   	; 0xbd2 <vPortYield>
     2aa:	0e 94 43 1b 	call	0x3686	; 0x3686 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 43 18 	call	0x3086	; 0x3086 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 38 1a 	call	0x3470	; 0x3470 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 8f 1a 	call	0x351e	; 0x351e <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	1a e0       	ldi	r17, 0x0A	; 10
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e8 e1       	ldi	r30, 0x18	; 24
     2e6:	fa e6       	ldi	r31, 0x6A	; 106
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a6 37       	cpi	r26, 0x76	; 118
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	2a e1       	ldi	r18, 0x1A	; 26
     2fa:	a6 e7       	ldi	r26, 0x76	; 118
     2fc:	ba e0       	ldi	r27, 0x0A	; 10
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	ae 37       	cpi	r26, 0x7E	; 126
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <main>
     30c:	0c 94 0a 35 	jmp	0x6a14	; 0x6a14 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <application_task>:
}


// Main task For application to get result when every measurnment is done

void application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <measureEventGroup>
     34e:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <measureEventGroup+0x1>
     352:	8a d1       	rcall	.+788    	; 0x668 <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 6c 1a 	lds	r24, 0x1A6C	; 0x801a6c <dataReadyEventGroup>
     36c:	90 91 6d 1a 	lds	r25, 0x1A6D	; 0x801a6d <dataReadyEventGroup+0x1>
     370:	db d0       	rcall	.+438    	; 0x528 <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <application_task+0x20>
		{
			packageHandler_setTemperaturePercent(tempHumSensor_getTemp());
     386:	0e 94 0e 1c 	call	0x381c	; 0x381c <tempHumSensor_getTemp>
     38a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <packageHandler_setTemperaturePercent>
			packageHandler_setHumidityPercent(tempHumSensor_getHum());
     38e:	0e 94 13 1c 	call	0x3826	; 0x3826 <tempHumSensor_getHum>
     392:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <packageHandler_setHumidityPercent>
			packageHandler_setCO2ppm(CO2Sensor_getPPM());
     396:	0e 94 95 1b 	call	0x372a	; 0x372a <CO2Sensor_getPPM>
     39a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <packageHandler_setCO2ppm>
			lora_driver_payload_t payload = packageHandler_getLoraPackage(2);
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	ce 01       	movw	r24, r28
     3a2:	05 96       	adiw	r24, 0x05	; 5
     3a4:	0e 94 76 1b 	call	0x36ec	; 0x36ec <packageHandler_getLoraPackage>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3a8:	0f ef       	ldi	r16, 0xFF	; 255
     3aa:	1f ef       	ldi	r17, 0xFF	; 255
     3ac:	98 01       	movw	r18, r16
     3ae:	46 e1       	ldi	r20, 0x16	; 22
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	be 01       	movw	r22, r28
     3b4:	6b 5f       	subi	r22, 0xFB	; 251
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <uplinkMessageBufferHandle>
     3bc:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uplinkMessageBufferHandle+0x1>
     3c0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     3c4:	86 31       	cpi	r24, 0x16	; 22
     3c6:	29 f0       	breq	.+10     	; 0x3d2 <application_task+0xc0>
				printf("Timed out.\n");
     3c8:	8f e6       	ldi	r24, 0x6F	; 111
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	0e 94 4d 34 	call	0x689a	; 0x689a <puts>
     3d0:	b0 cf       	rjmp	.-160    	; 0x332 <application_task+0x20>
				// 			printf("Bytes sent: %d\n", xBytesSent);
				// 			printf("Temp sent: %d\n", tem);
				// 			printf("Humidity sent: %d\n", hum);
				// 			printf("Size of payload: %d\n", sizeof(payload));
				//			receivePayload();
				printf("Bytes put in buffer: %d\n", xBytesSent);
     3d2:	99 27       	eor	r25, r25
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	8a e7       	ldi	r24, 0x7A	; 122
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	a2 cf       	rjmp	.-188    	; 0x332 <application_task+0x20>

000003ee <application_craeteTask>:
void application_create(UBaseType_t priority)
{
	application_craeteTask(priority);
}

void application_craeteTask(UBaseType_t priority){		
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
	xTaskCreate(
     3f4:	e1 2c       	mov	r14, r1
     3f6:	f1 2c       	mov	r15, r1
     3f8:	08 2f       	mov	r16, r24
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 ec       	ldi	r20, 0xC0	; 192
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	63 e9       	ldi	r22, 0x93	; 147
     404:	72 e0       	ldi	r23, 0x02	; 2
     406:	89 e8       	ldi	r24, 0x89	; 137
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskCreate>
	,  "MainApplication"  
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + priority 
	,  NULL );	
}
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	08 95       	ret

00000416 <application_create>:

void application_task(void *pvParameters);

void application_create(UBaseType_t priority)
{
	application_craeteTask(priority);
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	ea cf       	rjmp	.-44     	; 0x3ee <application_craeteTask>
     41a:	08 95       	ret

0000041c <configuration_getMaxTemperature>:
static uint16_t max_humidity = 0;
static uint16_t min_humidity = 0;

int16_t configuration_getMaxTemperature(){
	return max_temperature;
}
     41c:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <max_temperature>
     420:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <max_temperature+0x1>
     424:	08 95       	ret

00000426 <configuration_getMaxHumidity>:

uint16_t configuration_getMaxHumidity(){
	return max_humidity;
}
     426:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <__data_end>
     42a:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <__data_end+0x1>
     42e:	08 95       	ret

00000430 <downlinkHandler_create>:

static lora_driver_payload_t _downlink_payload;

void downlinkHandler_create(UBaseType_t priority)
{
	downlinkHandler_create(priority);
     430:	ff cf       	rjmp	.-2      	; 0x430 <downlinkHandler_create>
     432:	08 95       	ret

00000434 <fanController_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void fanController_task(void *pvParameters) {
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	00 d0       	rcall	.+0      	; 0x43a <fanController_task+0x6>
     43a:	1f 92       	push	r1
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
	int16_t thresholdTemperature = 0;
	uint16_t thresholdHumidity = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(120000); 
	xLastWakeTime = xTaskGetTickCount();
     440:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xTaskGetTickCount>
     444:	69 83       	std	Y+1, r22	; 0x01
     446:	7a 83       	std	Y+2, r23	; 0x02
     448:	8b 83       	std	Y+3, r24	; 0x03
     44a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     44c:	40 e1       	ldi	r20, 0x10	; 16
     44e:	5d e1       	ldi	r21, 0x1D	; 29
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	ce 01       	movw	r24, r28
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskDelayUntil>
		thresholdTemperature = configuration_getMaxTemperature();
     45c:	df df       	rcall	.-66     	; 0x41c <configuration_getMaxTemperature>
     45e:	7c 01       	movw	r14, r24
		thresholdHumidity = configuration_getMaxHumidity();
     460:	e2 df       	rcall	.-60     	; 0x426 <configuration_getMaxHumidity>
     462:	d8 2e       	mov	r13, r24
     464:	c9 2e       	mov	r12, r25
     466:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <tempHumSensor_measure>
		
		tempHumSensor_measure();
     46a:	0e 94 0e 1c 	call	0x381c	; 0x381c <tempHumSensor_getTemp>
		currentTemperature = tempHumSensor_getTemp();
     46e:	6a e0       	ldi	r22, 0x0A	; 10
		currentHumidity = tempHumSensor_getHum;
		
		printf("--->Fan Controller checked temp: %d threshold: %d<---\n", currentTemperature/10, thresholdTemperature);
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	0e 94 3a 31 	call	0x6274	; 0x6274 <__divmodhi4>
     476:	8b 01       	movw	r16, r22
     478:	ff 92       	push	r15
     47a:	ef 92       	push	r14
     47c:	1f 93       	push	r17
     47e:	6f 93       	push	r22
     480:	83 ea       	ldi	r24, 0xA3	; 163
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	9f 93       	push	r25
     486:	8f 93       	push	r24
     488:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
     48c:	cf 92       	push	r12
		printf("--->Fan Controller checked hum: %d threshold: %d<---\n", currentTemperature/10, thresholdHumidity);
     48e:	df 92       	push	r13
     490:	1f 93       	push	r17
     492:	0f 93       	push	r16
     494:	8a ed       	ldi	r24, 0xDA	; 218
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	9f 93       	push	r25
     49a:	8f 93       	push	r24
     49c:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
     4a0:	0f b6       	in	r0, 0x3f	; 63
		if(currentTemperature/10 > thresholdTemperature){
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	e0 16       	cp	r14, r16
     4ac:	f1 06       	cpc	r15, r17
     4ae:	14 f4       	brge	.+4      	; 0x4b4 <fanController_task+0x80>
     4b0:	12 b8       	out	0x02, r1	; 2
			PORTA = 0x00;
     4b2:	cc cf       	rjmp	.-104    	; 0x44c <fanController_task+0x18>
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
		}
		else{
			PORTA = 0xFF;
     4b6:	82 b9       	out	0x02, r24	; 2
     4b8:	c9 cf       	rjmp	.-110    	; 0x44c <fanController_task+0x18>

000004ba <fanController_createTask>:
     4ba:	bc df       	rcall	.-136    	; 0x434 <fanController_task>

000004bc <fanController_create>:

#include "FanController.h"

void fanController_create(UBaseType_t priority)
{
	fanController_createTask(priority);
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	fd df       	rcall	.-6      	; 0x4ba <fanController_createTask>

000004c0 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     4c0:	0f 93       	push	r16
     4c2:	01 11       	cpse	r16, r1
     4c4:	0c c0       	rjmp	.+24     	; 0x4de <prvTestWaitCondition+0x1e>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	82 23       	and	r24, r18
     4cc:	93 23       	and	r25, r19
     4ce:	a4 23       	and	r26, r20
     4d0:	b5 23       	and	r27, r21
     4d2:	89 2b       	or	r24, r25
     4d4:	8a 2b       	or	r24, r26
     4d6:	8b 2b       	or	r24, r27
     4d8:	79 f4       	brne	.+30     	; 0x4f8 <prvTestWaitCondition+0x38>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	10 c0       	rjmp	.+32     	; 0x4fe <prvTestWaitCondition+0x3e>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	82 23       	and	r24, r18
     4e4:	93 23       	and	r25, r19
     4e6:	a4 23       	and	r26, r20
     4e8:	b5 23       	and	r27, r21
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	4a 07       	cpc	r20, r26
     4f0:	5b 07       	cpc	r21, r27
     4f2:	21 f0       	breq	.+8      	; 0x4fc <prvTestWaitCondition+0x3c>
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <prvTestWaitCondition+0x3e>
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <prvTestWaitCondition+0x3e>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <xEventGroupCreate>:
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	8f e0       	ldi	r24, 0x0F	; 15
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	af d1       	rcall	.+862    	; 0x86a <pvPortMalloc>
     50c:	ec 01       	movw	r28, r24
     50e:	00 97       	sbiw	r24, 0x00	; 0
     510:	39 f0       	breq	.+14     	; 0x520 <xEventGroupCreate+0x1e>
     512:	fc 01       	movw	r30, r24
     514:	11 92       	st	Z+, r1
     516:	11 92       	st	Z+, r1
     518:	11 92       	st	Z+, r1
     51a:	11 92       	st	Z+, r1
     51c:	cf 01       	movw	r24, r30
     51e:	8b d2       	rcall	.+1302   	; 0xa36 <vListInitialise>
     520:	ce 01       	movw	r24, r28
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <xEventGroupWaitBits>:
     528:	2f 92       	push	r2
     52a:	3f 92       	push	r3
     52c:	4f 92       	push	r4
     52e:	5f 92       	push	r5
     530:	6f 92       	push	r6
     532:	7f 92       	push	r7
     534:	8f 92       	push	r8
     536:	9f 92       	push	r9
     538:	af 92       	push	r10
     53a:	bf 92       	push	r11
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
     54e:	4a 01       	movw	r8, r20
     550:	5b 01       	movw	r10, r22
     552:	62 2e       	mov	r6, r18
     554:	70 2e       	mov	r7, r16
     556:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vTaskSuspendAll>
     55a:	28 80       	ld	r2, Y
     55c:	39 80       	ldd	r3, Y+1	; 0x01
     55e:	4a 80       	ldd	r4, Y+2	; 0x02
     560:	5b 80       	ldd	r5, Y+3	; 0x03
     562:	a5 01       	movw	r20, r10
     564:	94 01       	movw	r18, r8
     566:	c2 01       	movw	r24, r4
     568:	b1 01       	movw	r22, r2
     56a:	aa df       	rcall	.-172    	; 0x4c0 <prvTestWaitCondition>
     56c:	88 23       	and	r24, r24
     56e:	a1 f0       	breq	.+40     	; 0x598 <xEventGroupWaitBits+0x70>
     570:	66 20       	and	r6, r6
     572:	89 f1       	breq	.+98     	; 0x5d6 <xEventGroupWaitBits+0xae>
     574:	d5 01       	movw	r26, r10
     576:	c4 01       	movw	r24, r8
     578:	80 95       	com	r24
     57a:	90 95       	com	r25
     57c:	a0 95       	com	r26
     57e:	b0 95       	com	r27
     580:	82 21       	and	r24, r2
     582:	93 21       	and	r25, r3
     584:	a4 21       	and	r26, r4
     586:	b5 21       	and	r27, r5
     588:	88 83       	st	Y, r24
     58a:	99 83       	std	Y+1, r25	; 0x01
     58c:	aa 83       	std	Y+2, r26	; 0x02
     58e:	bb 83       	std	Y+3, r27	; 0x03
     590:	c1 2c       	mov	r12, r1
     592:	d1 2c       	mov	r13, r1
     594:	76 01       	movw	r14, r12
     596:	22 c0       	rjmp	.+68     	; 0x5dc <xEventGroupWaitBits+0xb4>
     598:	c1 14       	cp	r12, r1
     59a:	d1 04       	cpc	r13, r1
     59c:	e1 04       	cpc	r14, r1
     59e:	f1 04       	cpc	r15, r1
     5a0:	e9 f0       	breq	.+58     	; 0x5dc <xEventGroupWaitBits+0xb4>
     5a2:	61 10       	cpse	r6, r1
     5a4:	04 c0       	rjmp	.+8      	; 0x5ae <xEventGroupWaitBits+0x86>
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	ba 01       	movw	r22, r20
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <xEventGroupWaitBits+0x8e>
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	71 10       	cpse	r7, r1
     5b8:	74 60       	ori	r23, 0x04	; 4
     5ba:	48 29       	or	r20, r8
     5bc:	59 29       	or	r21, r9
     5be:	6a 29       	or	r22, r10
     5c0:	7b 29       	or	r23, r11
     5c2:	97 01       	movw	r18, r14
     5c4:	86 01       	movw	r16, r12
     5c6:	ce 01       	movw	r24, r28
     5c8:	04 96       	adiw	r24, 0x04	; 4
     5ca:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <vTaskPlaceOnUnorderedEventList>
     5ce:	21 2c       	mov	r2, r1
     5d0:	31 2c       	mov	r3, r1
     5d2:	21 01       	movw	r4, r2
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <xEventGroupWaitBits+0xb4>
     5d6:	c1 2c       	mov	r12, r1
     5d8:	d1 2c       	mov	r13, r1
     5da:	76 01       	movw	r14, r12
     5dc:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>
     5e0:	cd 28       	or	r12, r13
     5e2:	ce 28       	or	r12, r14
     5e4:	cf 28       	or	r12, r15
     5e6:	59 f1       	breq	.+86     	; 0x63e <xEventGroupWaitBits+0x116>
     5e8:	81 11       	cpse	r24, r1
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <xEventGroupWaitBits+0xc6>
     5ec:	f2 d2       	rcall	.+1508   	; 0xbd2 <vPortYield>
     5ee:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <uxTaskResetEventItemValue>
     5f2:	6b 01       	movw	r12, r22
     5f4:	7c 01       	movw	r14, r24
     5f6:	91 fd       	sbrc	r25, 1
     5f8:	1f c0       	rjmp	.+62     	; 0x638 <xEventGroupWaitBits+0x110>
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	0f 92       	push	r0
     600:	c8 80       	ld	r12, Y
     602:	d9 80       	ldd	r13, Y+1	; 0x01
     604:	ea 80       	ldd	r14, Y+2	; 0x02
     606:	fb 80       	ldd	r15, Y+3	; 0x03
     608:	07 2d       	mov	r16, r7
     60a:	a5 01       	movw	r20, r10
     60c:	94 01       	movw	r18, r8
     60e:	c7 01       	movw	r24, r14
     610:	b6 01       	movw	r22, r12
     612:	56 df       	rcall	.-340    	; 0x4c0 <prvTestWaitCondition>
     614:	88 23       	and	r24, r24
     616:	71 f0       	breq	.+28     	; 0x634 <xEventGroupWaitBits+0x10c>
     618:	66 20       	and	r6, r6
     61a:	61 f0       	breq	.+24     	; 0x634 <xEventGroupWaitBits+0x10c>
     61c:	80 94       	com	r8
     61e:	90 94       	com	r9
     620:	a0 94       	com	r10
     622:	b0 94       	com	r11
     624:	8c 20       	and	r8, r12
     626:	9d 20       	and	r9, r13
     628:	ae 20       	and	r10, r14
     62a:	bf 20       	and	r11, r15
     62c:	88 82       	st	Y, r8
     62e:	99 82       	std	Y+1, r9	; 0x01
     630:	aa 82       	std	Y+2, r10	; 0x02
     632:	bb 82       	std	Y+3, r11	; 0x03
     634:	0f 90       	pop	r0
     636:	0f be       	out	0x3f, r0	; 63
     638:	16 01       	movw	r2, r12
     63a:	27 01       	movw	r4, r14
     63c:	55 24       	eor	r5, r5
     63e:	c2 01       	movw	r24, r4
     640:	b1 01       	movw	r22, r2
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	bf 90       	pop	r11
     654:	af 90       	pop	r10
     656:	9f 90       	pop	r9
     658:	8f 90       	pop	r8
     65a:	7f 90       	pop	r7
     65c:	6f 90       	pop	r6
     65e:	5f 90       	pop	r5
     660:	4f 90       	pop	r4
     662:	3f 90       	pop	r3
     664:	2f 90       	pop	r2
     666:	08 95       	ret

00000668 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     668:	4f 92       	push	r4
     66a:	5f 92       	push	r5
     66c:	6f 92       	push	r6
     66e:	7f 92       	push	r7
     670:	af 92       	push	r10
     672:	bf 92       	push	r11
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	6a 01       	movw	r12, r20
     688:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     68a:	8c 01       	movw	r16, r24
     68c:	09 5f       	subi	r16, 0xF9	; 249
     68e:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     690:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     694:	eb 85       	ldd	r30, Y+11	; 0x0b
     696:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     698:	88 81       	ld	r24, Y
     69a:	99 81       	ldd	r25, Y+1	; 0x01
     69c:	aa 81       	ldd	r26, Y+2	; 0x02
     69e:	bb 81       	ldd	r27, Y+3	; 0x03
     6a0:	c8 2a       	or	r12, r24
     6a2:	d9 2a       	or	r13, r25
     6a4:	ea 2a       	or	r14, r26
     6a6:	fb 2a       	or	r15, r27
     6a8:	c8 82       	st	Y, r12
     6aa:	d9 82       	std	Y+1, r13	; 0x01
     6ac:	ea 82       	std	Y+2, r14	; 0x02
     6ae:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     6b0:	c1 2c       	mov	r12, r1
     6b2:	d1 2c       	mov	r13, r1
     6b4:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     6b6:	3d c0       	rjmp	.+122    	; 0x732 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     6b8:	a4 80       	ldd	r10, Z+4	; 0x04
     6ba:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     6bc:	80 81       	ld	r24, Z
     6be:	91 81       	ldd	r25, Z+1	; 0x01
     6c0:	a2 81       	ldd	r26, Z+2	; 0x02
     6c2:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     6c4:	ac 01       	movw	r20, r24
     6c6:	bd 01       	movw	r22, r26
     6c8:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     6ca:	b2 fd       	sbrc	r27, 2
     6cc:	0e c0       	rjmp	.+28     	; 0x6ea <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     6ce:	48 80       	ld	r4, Y
     6d0:	59 80       	ldd	r5, Y+1	; 0x01
     6d2:	6a 80       	ldd	r6, Y+2	; 0x02
     6d4:	7b 80       	ldd	r7, Y+3	; 0x03
     6d6:	44 22       	and	r4, r20
     6d8:	55 22       	and	r5, r21
     6da:	66 22       	and	r6, r22
     6dc:	77 22       	and	r7, r23
     6de:	45 28       	or	r4, r5
     6e0:	46 28       	or	r4, r6
     6e2:	47 28       	or	r4, r7
     6e4:	89 f4       	brne	.+34     	; 0x708 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	12 c0       	rjmp	.+36     	; 0x70e <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     6ea:	48 80       	ld	r4, Y
     6ec:	59 80       	ldd	r5, Y+1	; 0x01
     6ee:	6a 80       	ldd	r6, Y+2	; 0x02
     6f0:	7b 80       	ldd	r7, Y+3	; 0x03
     6f2:	44 22       	and	r4, r20
     6f4:	55 22       	and	r5, r21
     6f6:	66 22       	and	r6, r22
     6f8:	77 22       	and	r7, r23
     6fa:	44 15       	cp	r20, r4
     6fc:	55 05       	cpc	r21, r5
     6fe:	66 05       	cpc	r22, r6
     700:	77 05       	cpc	r23, r7
     702:	21 f0       	breq	.+8      	; 0x70c <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	03 c0       	rjmp	.+6      	; 0x70e <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     708:	21 e0       	ldi	r18, 0x01	; 1
     70a:	01 c0       	rjmp	.+2      	; 0x70e <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     70c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     70e:	22 23       	and	r18, r18
     710:	71 f0       	breq	.+28     	; 0x72e <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     712:	b0 ff       	sbrs	r27, 0
     714:	04 c0       	rjmp	.+8      	; 0x71e <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     716:	c4 2a       	or	r12, r20
     718:	d5 2a       	or	r13, r21
     71a:	e6 2a       	or	r14, r22
     71c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     71e:	48 81       	ld	r20, Y
     720:	59 81       	ldd	r21, Y+1	; 0x01
     722:	6a 81       	ldd	r22, Y+2	; 0x02
     724:	7b 81       	ldd	r23, Y+3	; 0x03
     726:	72 60       	ori	r23, 0x02	; 2
     728:	cf 01       	movw	r24, r30
     72a:	0e 94 a6 13 	call	0x274c	; 0x274c <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     72e:	ea 2d       	mov	r30, r10
     730:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     732:	e0 17       	cp	r30, r16
     734:	f1 07       	cpc	r31, r17
     736:	09 f0       	breq	.+2      	; 0x73a <xEventGroupSetBits+0xd2>
     738:	bf cf       	rjmp	.-130    	; 0x6b8 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     73a:	c0 94       	com	r12
     73c:	d0 94       	com	r13
     73e:	e0 94       	com	r14
     740:	f0 94       	com	r15
     742:	88 81       	ld	r24, Y
     744:	99 81       	ldd	r25, Y+1	; 0x01
     746:	aa 81       	ldd	r26, Y+2	; 0x02
     748:	bb 81       	ldd	r27, Y+3	; 0x03
     74a:	c8 22       	and	r12, r24
     74c:	d9 22       	and	r13, r25
     74e:	ea 22       	and	r14, r26
     750:	fb 22       	and	r15, r27
     752:	c8 82       	st	Y, r12
     754:	d9 82       	std	Y+1, r13	; 0x01
     756:	ea 82       	std	Y+2, r14	; 0x02
     758:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     75a:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     75e:	68 81       	ld	r22, Y
     760:	79 81       	ldd	r23, Y+1	; 0x01
     762:	8a 81       	ldd	r24, Y+2	; 0x02
     764:	9b 81       	ldd	r25, Y+3	; 0x03
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	cf 90       	pop	r12
     776:	bf 90       	pop	r11
     778:	af 90       	pop	r10
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	08 95       	ret

00000784 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     784:	e6 e8       	ldi	r30, 0x86	; 134
     786:	fa e0       	ldi	r31, 0x0A	; 10
     788:	aa e8       	ldi	r26, 0x8A	; 138
     78a:	ba e0       	ldi	r27, 0x0A	; 10
     78c:	b1 83       	std	Z+1, r27	; 0x01
     78e:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     790:	13 82       	std	Z+3, r1	; 0x03
     792:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     794:	e2 e3       	ldi	r30, 0x32	; 50
     796:	f8 e1       	ldi	r31, 0x18	; 24
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     798:	f0 93 85 0a 	sts	0x0A85, r31	; 0x800a85 <pxEnd+0x1>
     79c:	e0 93 84 0a 	sts	0x0A84, r30	; 0x800a84 <pxEnd>
    pxEnd->xBlockSize = 0;
     7a0:	13 82       	std	Z+3, r1	; 0x03
     7a2:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     7a4:	11 82       	std	Z+1, r1	; 0x01
     7a6:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     7a8:	88 ea       	ldi	r24, 0xA8	; 168
     7aa:	9d e0       	ldi	r25, 0x0D	; 13
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	9c 93       	st	X, r25
     7b0:	8e 93       	st	-X, r24
     7b2:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     7b4:	ed 93       	st	X+, r30
     7b6:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     7b8:	90 93 81 0a 	sts	0x0A81, r25	; 0x800a81 <xMinimumEverFreeBytesRemaining+0x1>
     7bc:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     7c0:	90 93 83 0a 	sts	0x0A83, r25	; 0x800a83 <xFreeBytesRemaining+0x1>
     7c4:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e8       	ldi	r25, 0x80	; 128
     7cc:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <xBlockAllocatedBit+0x1>
     7d0:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <xBlockAllocatedBit>
     7d4:	08 95       	ret

000007d6 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     7dc:	a6 e8       	ldi	r26, 0x86	; 134
     7de:	ba e0       	ldi	r27, 0x0A	; 10
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <prvInsertBlockIntoFreeList+0xe>
     7e2:	df 01       	movw	r26, r30
     7e4:	ed 91       	ld	r30, X+
     7e6:	fc 91       	ld	r31, X
     7e8:	11 97       	sbiw	r26, 0x01	; 1
     7ea:	ec 17       	cp	r30, r28
     7ec:	fd 07       	cpc	r31, r29
     7ee:	c8 f3       	brcs	.-14     	; 0x7e2 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     7f0:	12 96       	adiw	r26, 0x02	; 2
     7f2:	8d 91       	ld	r24, X+
     7f4:	9c 91       	ld	r25, X
     7f6:	13 97       	sbiw	r26, 0x03	; 3
     7f8:	9d 01       	movw	r18, r26
     7fa:	28 0f       	add	r18, r24
     7fc:	39 1f       	adc	r19, r25
     7fe:	c2 17       	cp	r28, r18
     800:	d3 07       	cpc	r29, r19
     802:	49 f4       	brne	.+18     	; 0x816 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     804:	2a 81       	ldd	r18, Y+2	; 0x02
     806:	3b 81       	ldd	r19, Y+3	; 0x03
     808:	82 0f       	add	r24, r18
     80a:	93 1f       	adc	r25, r19
     80c:	13 96       	adiw	r26, 0x03	; 3
     80e:	9c 93       	st	X, r25
     810:	8e 93       	st	-X, r24
     812:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     814:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     816:	8a 81       	ldd	r24, Y+2	; 0x02
     818:	9b 81       	ldd	r25, Y+3	; 0x03
     81a:	9e 01       	movw	r18, r28
     81c:	28 0f       	add	r18, r24
     81e:	39 1f       	adc	r19, r25
     820:	e2 17       	cp	r30, r18
     822:	f3 07       	cpc	r31, r19
     824:	c1 f4       	brne	.+48     	; 0x856 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     826:	20 91 84 0a 	lds	r18, 0x0A84	; 0x800a84 <pxEnd>
     82a:	30 91 85 0a 	lds	r19, 0x0A85	; 0x800a85 <pxEnd+0x1>
     82e:	e2 17       	cp	r30, r18
     830:	f3 07       	cpc	r31, r19
     832:	71 f0       	breq	.+28     	; 0x850 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     834:	22 81       	ldd	r18, Z+2	; 0x02
     836:	33 81       	ldd	r19, Z+3	; 0x03
     838:	82 0f       	add	r24, r18
     83a:	93 1f       	adc	r25, r19
     83c:	9b 83       	std	Y+3, r25	; 0x03
     83e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	11 97       	sbiw	r26, 0x01	; 1
     846:	80 81       	ld	r24, Z
     848:	91 81       	ldd	r25, Z+1	; 0x01
     84a:	99 83       	std	Y+1, r25	; 0x01
     84c:	88 83       	st	Y, r24
     84e:	05 c0       	rjmp	.+10     	; 0x85a <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     850:	39 83       	std	Y+1, r19	; 0x01
     852:	28 83       	st	Y, r18
     854:	02 c0       	rjmp	.+4      	; 0x85a <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     856:	f9 83       	std	Y+1, r31	; 0x01
     858:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     85a:	ca 17       	cp	r28, r26
     85c:	db 07       	cpc	r29, r27
     85e:	11 f0       	breq	.+4      	; 0x864 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     860:	cd 93       	st	X+, r28
     862:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     878:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     87c:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <pxEnd>
     880:	90 91 85 0a 	lds	r25, 0x0A85	; 0x800a85 <pxEnd+0x1>
     884:	89 2b       	or	r24, r25
     886:	09 f4       	brne	.+2      	; 0x88a <pvPortMalloc+0x20>
        {
            prvHeapInit();
     888:	7d df       	rcall	.-262    	; 0x784 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     88a:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <xBlockAllocatedBit>
     88e:	90 91 7b 0a 	lds	r25, 0x0A7B	; 0x800a7b <xBlockAllocatedBit+0x1>
     892:	80 23       	and	r24, r16
     894:	91 23       	and	r25, r17
     896:	89 2b       	or	r24, r25
     898:	09 f0       	breq	.+2      	; 0x89c <pvPortMalloc+0x32>
     89a:	76 c0       	rjmp	.+236    	; 0x988 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     89c:	01 15       	cp	r16, r1
     89e:	11 05       	cpc	r17, r1
     8a0:	49 f0       	breq	.+18     	; 0x8b4 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     8a2:	c8 01       	movw	r24, r16
     8a4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     8a6:	08 17       	cp	r16, r24
     8a8:	19 07       	cpc	r17, r25
     8aa:	18 f0       	brcs	.+6      	; 0x8b2 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     8ac:	00 e0       	ldi	r16, 0x00	; 0
     8ae:	10 e0       	ldi	r17, 0x00	; 0
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     8b2:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     8b4:	01 15       	cp	r16, r1
     8b6:	11 05       	cpc	r17, r1
     8b8:	09 f4       	brne	.+2      	; 0x8bc <pvPortMalloc+0x52>
     8ba:	69 c0       	rjmp	.+210    	; 0x98e <pvPortMalloc+0x124>
     8bc:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <xFreeBytesRemaining>
     8c0:	90 91 83 0a 	lds	r25, 0x0A83	; 0x800a83 <xFreeBytesRemaining+0x1>
     8c4:	80 17       	cp	r24, r16
     8c6:	91 07       	cpc	r25, r17
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <pvPortMalloc+0x62>
     8ca:	64 c0       	rjmp	.+200    	; 0x994 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     8cc:	c0 91 86 0a 	lds	r28, 0x0A86	; 0x800a86 <xStart>
     8d0:	d0 91 87 0a 	lds	r29, 0x0A87	; 0x800a87 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     8d4:	e6 e8       	ldi	r30, 0x86	; 134
     8d6:	fa e0       	ldi	r31, 0x0A	; 10
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     8da:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     8dc:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	9b 81       	ldd	r25, Y+3	; 0x03
     8e2:	80 17       	cp	r24, r16
     8e4:	91 07       	cpc	r25, r17
     8e6:	20 f4       	brcc	.+8      	; 0x8f0 <pvPortMalloc+0x86>
     8e8:	88 81       	ld	r24, Y
     8ea:	99 81       	ldd	r25, Y+1	; 0x01
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	a9 f7       	brne	.-22     	; 0x8da <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     8f0:	80 91 84 0a 	lds	r24, 0x0A84	; 0x800a84 <pxEnd>
     8f4:	90 91 85 0a 	lds	r25, 0x0A85	; 0x800a85 <pxEnd+0x1>
     8f8:	c8 17       	cp	r28, r24
     8fa:	d9 07       	cpc	r29, r25
     8fc:	09 f4       	brne	.+2      	; 0x900 <pvPortMalloc+0x96>
     8fe:	4d c0       	rjmp	.+154    	; 0x99a <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     900:	e0 80       	ld	r14, Z
     902:	f1 80       	ldd	r15, Z+1	; 0x01
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	e8 0e       	add	r14, r24
     908:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     90a:	88 81       	ld	r24, Y
     90c:	99 81       	ldd	r25, Y+1	; 0x01
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     912:	2a 81       	ldd	r18, Y+2	; 0x02
     914:	3b 81       	ldd	r19, Y+3	; 0x03
     916:	20 1b       	sub	r18, r16
     918:	31 0b       	sbc	r19, r17
     91a:	29 30       	cpi	r18, 0x09	; 9
     91c:	31 05       	cpc	r19, r1
     91e:	48 f0       	brcs	.+18     	; 0x932 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     920:	ce 01       	movw	r24, r28
     922:	80 0f       	add	r24, r16
     924:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     926:	fc 01       	movw	r30, r24
     928:	33 83       	std	Z+3, r19	; 0x03
     92a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     92c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     92e:	0a 83       	std	Y+2, r16	; 0x02
     930:	52 df       	rcall	.-348    	; 0x7d6 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     932:	2a 81       	ldd	r18, Y+2	; 0x02
     934:	3b 81       	ldd	r19, Y+3	; 0x03
     936:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <xFreeBytesRemaining>
     93a:	90 91 83 0a 	lds	r25, 0x0A83	; 0x800a83 <xFreeBytesRemaining+0x1>
     93e:	82 1b       	sub	r24, r18
     940:	93 0b       	sbc	r25, r19
     942:	90 93 83 0a 	sts	0x0A83, r25	; 0x800a83 <xFreeBytesRemaining+0x1>
     946:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     94a:	40 91 80 0a 	lds	r20, 0x0A80	; 0x800a80 <xMinimumEverFreeBytesRemaining>
     94e:	50 91 81 0a 	lds	r21, 0x0A81	; 0x800a81 <xMinimumEverFreeBytesRemaining+0x1>
     952:	84 17       	cp	r24, r20
     954:	95 07       	cpc	r25, r21
     956:	20 f4       	brcc	.+8      	; 0x960 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     958:	90 93 81 0a 	sts	0x0A81, r25	; 0x800a81 <xMinimumEverFreeBytesRemaining+0x1>
     95c:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     960:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <xBlockAllocatedBit>
     964:	90 91 7b 0a 	lds	r25, 0x0A7B	; 0x800a7b <xBlockAllocatedBit+0x1>
     968:	28 2b       	or	r18, r24
     96a:	39 2b       	or	r19, r25
     96c:	3b 83       	std	Y+3, r19	; 0x03
     96e:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     970:	19 82       	std	Y+1, r1	; 0x01
     972:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     974:	80 91 7e 0a 	lds	r24, 0x0A7E	; 0x800a7e <xNumberOfSuccessfulAllocations>
     978:	90 91 7f 0a 	lds	r25, 0x0A7F	; 0x800a7f <xNumberOfSuccessfulAllocations+0x1>
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	90 93 7f 0a 	sts	0x0A7F, r25	; 0x800a7f <xNumberOfSuccessfulAllocations+0x1>
     982:	80 93 7e 0a 	sts	0x0A7E, r24	; 0x800a7e <xNumberOfSuccessfulAllocations>
     986:	0b c0       	rjmp	.+22     	; 0x99e <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     988:	e1 2c       	mov	r14, r1
     98a:	f1 2c       	mov	r15, r1
     98c:	08 c0       	rjmp	.+16     	; 0x99e <pvPortMalloc+0x134>
     98e:	e1 2c       	mov	r14, r1
     990:	f1 2c       	mov	r15, r1
     992:	05 c0       	rjmp	.+10     	; 0x99e <pvPortMalloc+0x134>
     994:	e1 2c       	mov	r14, r1
     996:	f1 2c       	mov	r15, r1
     998:	02 c0       	rjmp	.+4      	; 0x99e <pvPortMalloc+0x134>
     99a:	e1 2c       	mov	r14, r1
     99c:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     99e:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     9a2:	e1 14       	cp	r14, r1
     9a4:	f1 04       	cpc	r15, r1
     9a6:	11 f4       	brne	.+4      	; 0x9ac <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     9a8:	0e 94 4f 1b 	call	0x369e	; 0x369e <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     9ac:	c7 01       	movw	r24, r14
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	08 95       	ret

000009bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	91 f1       	breq	.+100    	; 0xa2c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     9c8:	ec 01       	movw	r28, r24
     9ca:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     9cc:	4a 81       	ldd	r20, Y+2	; 0x02
     9ce:	5b 81       	ldd	r21, Y+3	; 0x03
     9d0:	20 91 7a 0a 	lds	r18, 0x0A7A	; 0x800a7a <xBlockAllocatedBit>
     9d4:	30 91 7b 0a 	lds	r19, 0x0A7B	; 0x800a7b <xBlockAllocatedBit+0x1>
     9d8:	ba 01       	movw	r22, r20
     9da:	62 23       	and	r22, r18
     9dc:	73 23       	and	r23, r19
     9de:	67 2b       	or	r22, r23
     9e0:	29 f1       	breq	.+74     	; 0xa2c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     9e2:	68 81       	ld	r22, Y
     9e4:	79 81       	ldd	r23, Y+1	; 0x01
     9e6:	67 2b       	or	r22, r23
     9e8:	09 f5       	brne	.+66     	; 0xa2c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     9ea:	20 95       	com	r18
     9ec:	30 95       	com	r19
     9ee:	24 23       	and	r18, r20
     9f0:	35 23       	and	r19, r21
     9f2:	3b 83       	std	Y+3, r19	; 0x03
     9f4:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     9f6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     9fa:	8a 81       	ldd	r24, Y+2	; 0x02
     9fc:	9b 81       	ldd	r25, Y+3	; 0x03
     9fe:	20 91 82 0a 	lds	r18, 0x0A82	; 0x800a82 <xFreeBytesRemaining>
     a02:	30 91 83 0a 	lds	r19, 0x0A83	; 0x800a83 <xFreeBytesRemaining+0x1>
     a06:	82 0f       	add	r24, r18
     a08:	93 1f       	adc	r25, r19
     a0a:	90 93 83 0a 	sts	0x0A83, r25	; 0x800a83 <xFreeBytesRemaining+0x1>
     a0e:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     a12:	ce 01       	movw	r24, r28
     a14:	e0 de       	rcall	.-576    	; 0x7d6 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     a16:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <xNumberOfSuccessfulFrees>
     a1a:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <xNumberOfSuccessfulFrees+0x1>
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	90 93 7d 0a 	sts	0x0A7D, r25	; 0x800a7d <xNumberOfSuccessfulFrees+0x1>
     a24:	80 93 7c 0a 	sts	0x0A7C, r24	; 0x800a7c <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     a28:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	08 95       	ret

00000a36 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     a36:	fc 01       	movw	r30, r24
     a38:	03 96       	adiw	r24, 0x03	; 3
     a3a:	92 83       	std	Z+2, r25	; 0x02
     a3c:	81 83       	std	Z+1, r24	; 0x01
     a3e:	4f ef       	ldi	r20, 0xFF	; 255
     a40:	5f ef       	ldi	r21, 0xFF	; 255
     a42:	ba 01       	movw	r22, r20
     a44:	43 83       	std	Z+3, r20	; 0x03
     a46:	54 83       	std	Z+4, r21	; 0x04
     a48:	65 83       	std	Z+5, r22	; 0x05
     a4a:	76 83       	std	Z+6, r23	; 0x06
     a4c:	90 87       	std	Z+8, r25	; 0x08
     a4e:	87 83       	std	Z+7, r24	; 0x07
     a50:	92 87       	std	Z+10, r25	; 0x0a
     a52:	81 87       	std	Z+9, r24	; 0x09
     a54:	10 82       	st	Z, r1
     a56:	08 95       	ret

00000a58 <vListInitialiseItem>:
     a58:	fc 01       	movw	r30, r24
     a5a:	13 86       	std	Z+11, r1	; 0x0b
     a5c:	12 86       	std	Z+10, r1	; 0x0a
     a5e:	08 95       	ret

00000a60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a6a:	08 81       	ld	r16, Y
     a6c:	19 81       	ldd	r17, Y+1	; 0x01
     a6e:	2a 81       	ldd	r18, Y+2	; 0x02
     a70:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a72:	0f 3f       	cpi	r16, 0xFF	; 255
     a74:	4f ef       	ldi	r20, 0xFF	; 255
     a76:	14 07       	cpc	r17, r20
     a78:	24 07       	cpc	r18, r20
     a7a:	34 07       	cpc	r19, r20
     a7c:	21 f4       	brne	.+8      	; 0xa86 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a7e:	fc 01       	movw	r30, r24
     a80:	a1 85       	ldd	r26, Z+9	; 0x09
     a82:	b2 85       	ldd	r27, Z+10	; 0x0a
     a84:	11 c0       	rjmp	.+34     	; 0xaa8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a86:	dc 01       	movw	r26, r24
     a88:	13 96       	adiw	r26, 0x03	; 3
     a8a:	01 c0       	rjmp	.+2      	; 0xa8e <vListInsert+0x2e>
     a8c:	df 01       	movw	r26, r30
     a8e:	14 96       	adiw	r26, 0x04	; 4
     a90:	ed 91       	ld	r30, X+
     a92:	fc 91       	ld	r31, X
     a94:	15 97       	sbiw	r26, 0x05	; 5
     a96:	40 81       	ld	r20, Z
     a98:	51 81       	ldd	r21, Z+1	; 0x01
     a9a:	62 81       	ldd	r22, Z+2	; 0x02
     a9c:	73 81       	ldd	r23, Z+3	; 0x03
     a9e:	04 17       	cp	r16, r20
     aa0:	15 07       	cpc	r17, r21
     aa2:	26 07       	cpc	r18, r22
     aa4:	37 07       	cpc	r19, r23
     aa6:	90 f7       	brcc	.-28     	; 0xa8c <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     aa8:	14 96       	adiw	r26, 0x04	; 4
     aaa:	ed 91       	ld	r30, X+
     aac:	fc 91       	ld	r31, X
     aae:	15 97       	sbiw	r26, 0x05	; 5
     ab0:	fd 83       	std	Y+5, r31	; 0x05
     ab2:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ab4:	d7 83       	std	Z+7, r29	; 0x07
     ab6:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     ab8:	bf 83       	std	Y+7, r27	; 0x07
     aba:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     abc:	15 96       	adiw	r26, 0x05	; 5
     abe:	dc 93       	st	X, r29
     ac0:	ce 93       	st	-X, r28
     ac2:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     ac4:	9b 87       	std	Y+11, r25	; 0x0b
     ac6:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ac8:	fc 01       	movw	r30, r24
     aca:	20 81       	ld	r18, Z
     acc:	2f 5f       	subi	r18, 0xFF	; 255
     ace:	20 83       	st	Z, r18
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     ae0:	a2 85       	ldd	r26, Z+10	; 0x0a
     ae2:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     ae4:	c4 81       	ldd	r28, Z+4	; 0x04
     ae6:	d5 81       	ldd	r29, Z+5	; 0x05
     ae8:	86 81       	ldd	r24, Z+6	; 0x06
     aea:	97 81       	ldd	r25, Z+7	; 0x07
     aec:	9f 83       	std	Y+7, r25	; 0x07
     aee:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     af0:	c6 81       	ldd	r28, Z+6	; 0x06
     af2:	d7 81       	ldd	r29, Z+7	; 0x07
     af4:	84 81       	ldd	r24, Z+4	; 0x04
     af6:	95 81       	ldd	r25, Z+5	; 0x05
     af8:	9d 83       	std	Y+5, r25	; 0x05
     afa:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	8d 91       	ld	r24, X+
     b00:	9c 91       	ld	r25, X
     b02:	12 97       	sbiw	r26, 0x02	; 2
     b04:	e8 17       	cp	r30, r24
     b06:	f9 07       	cpc	r31, r25
     b08:	31 f4       	brne	.+12     	; 0xb16 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b0a:	86 81       	ldd	r24, Z+6	; 0x06
     b0c:	97 81       	ldd	r25, Z+7	; 0x07
     b0e:	12 96       	adiw	r26, 0x02	; 2
     b10:	9c 93       	st	X, r25
     b12:	8e 93       	st	-X, r24
     b14:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b16:	13 86       	std	Z+11, r1	; 0x0b
     b18:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     b1a:	8c 91       	ld	r24, X
     b1c:	81 50       	subi	r24, 0x01	; 1
     b1e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     b20:	8c 91       	ld	r24, X
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     b28:	a8 95       	wdr
     b2a:	90 ec       	ldi	r25, 0xC0	; 192
     b2c:	88 e1       	ldi	r24, 0x18	; 24
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	a8 95       	wdr
     b34:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     b3e:	08 95       	ret

00000b40 <pxPortInitialiseStack>:
     b40:	fc 01       	movw	r30, r24
     b42:	60 83       	st	Z, r22
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	70 83       	st	Z, r23
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	10 82       	st	Z, r1
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	10 82       	st	Z, r1
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	20 e8       	ldi	r18, 0x80	; 128
     b54:	20 83       	st	Z, r18
     b56:	31 97       	sbiw	r30, 0x01	; 1
     b58:	10 82       	st	Z, r1
     b5a:	31 97       	sbiw	r30, 0x01	; 1
     b5c:	10 82       	st	Z, r1
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	10 82       	st	Z, r1
     b62:	77 97       	sbiw	r30, 0x17	; 23
     b64:	40 83       	st	Z, r20
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	50 83       	st	Z, r21
     b6a:	86 97       	sbiw	r24, 0x26	; 38
     b6c:	08 95       	ret

00000b6e <xPortStartScheduler>:
     b6e:	dc df       	rcall	.-72     	; 0xb28 <prvSetupTimerInterrupt>
     b70:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
     b74:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
     b78:	cd 91       	ld	r28, X+
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	dd 91       	ld	r29, X+
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	ff 91       	pop	r31
     b82:	ef 91       	pop	r30
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	bf 91       	pop	r27
     b8a:	af 91       	pop	r26
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	7f 91       	pop	r23
     b92:	6f 91       	pop	r22
     b94:	5f 91       	pop	r21
     b96:	4f 91       	pop	r20
     b98:	3f 91       	pop	r19
     b9a:	2f 91       	pop	r18
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	9f 90       	pop	r9
     bae:	8f 90       	pop	r8
     bb0:	7f 90       	pop	r7
     bb2:	6f 90       	pop	r6
     bb4:	5f 90       	pop	r5
     bb6:	4f 90       	pop	r4
     bb8:	3f 90       	pop	r3
     bba:	2f 90       	pop	r2
     bbc:	1f 90       	pop	r1
     bbe:	0f 90       	pop	r0
     bc0:	0c be       	out	0x3c, r0	; 60
     bc2:	0f 90       	pop	r0
     bc4:	0b be       	out	0x3b, r0	; 59
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	08 95       	ret
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	08 95       	ret

00000bd2 <vPortYield>:
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	0f 92       	push	r0
     bda:	0b b6       	in	r0, 0x3b	; 59
     bdc:	0f 92       	push	r0
     bde:	0c b6       	in	r0, 0x3c	; 60
     be0:	0f 92       	push	r0
     be2:	1f 92       	push	r1
     be4:	11 24       	eor	r1, r1
     be6:	2f 92       	push	r2
     be8:	3f 92       	push	r3
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	4f 93       	push	r20
     c0c:	5f 93       	push	r21
     c0e:	6f 93       	push	r22
     c10:	7f 93       	push	r23
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	af 93       	push	r26
     c18:	bf 93       	push	r27
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ef 93       	push	r30
     c20:	ff 93       	push	r31
     c22:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
     c26:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
     c2a:	0d b6       	in	r0, 0x3d	; 61
     c2c:	0d 92       	st	X+, r0
     c2e:	0e b6       	in	r0, 0x3e	; 62
     c30:	0d 92       	st	X+, r0
     c32:	0e 94 ef 11 	call	0x23de	; 0x23de <vTaskSwitchContext>
     c36:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
     c3a:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
     c3e:	cd 91       	ld	r28, X+
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	dd 91       	ld	r29, X+
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	ff 91       	pop	r31
     c48:	ef 91       	pop	r30
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	bf 91       	pop	r27
     c50:	af 91       	pop	r26
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	7f 91       	pop	r23
     c58:	6f 91       	pop	r22
     c5a:	5f 91       	pop	r21
     c5c:	4f 91       	pop	r20
     c5e:	3f 91       	pop	r19
     c60:	2f 91       	pop	r18
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	bf 90       	pop	r11
     c70:	af 90       	pop	r10
     c72:	9f 90       	pop	r9
     c74:	8f 90       	pop	r8
     c76:	7f 90       	pop	r7
     c78:	6f 90       	pop	r6
     c7a:	5f 90       	pop	r5
     c7c:	4f 90       	pop	r4
     c7e:	3f 90       	pop	r3
     c80:	2f 90       	pop	r2
     c82:	1f 90       	pop	r1
     c84:	0f 90       	pop	r0
     c86:	0c be       	out	0x3c, r0	; 60
     c88:	0f 90       	pop	r0
     c8a:	0b be       	out	0x3b, r0	; 59
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	0f 90       	pop	r0
     c92:	08 95       	ret

00000c94 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	0f 92       	push	r0
     c9c:	0b b6       	in	r0, 0x3b	; 59
     c9e:	0f 92       	push	r0
     ca0:	0c b6       	in	r0, 0x3c	; 60
     ca2:	0f 92       	push	r0
     ca4:	1f 92       	push	r1
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 92       	push	r2
     caa:	3f 92       	push	r3
     cac:	4f 92       	push	r4
     cae:	5f 92       	push	r5
     cb0:	6f 92       	push	r6
     cb2:	7f 92       	push	r7
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	2f 93       	push	r18
     cca:	3f 93       	push	r19
     ccc:	4f 93       	push	r20
     cce:	5f 93       	push	r21
     cd0:	6f 93       	push	r22
     cd2:	7f 93       	push	r23
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
     ce4:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
     ce8:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
     cec:	0d b6       	in	r0, 0x3d	; 61
     cee:	0d 92       	st	X+, r0
     cf0:	0e b6       	in	r0, 0x3e	; 62
     cf2:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     cf4:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     cf6:	0e 94 67 0f 	call	0x1ece	; 0x1ece <xTaskIncrementTick>
     cfa:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     cfc:	0e 94 ef 11 	call	0x23de	; 0x23de <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     d00:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
     d04:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
     d08:	cd 91       	ld	r28, X+
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	dd 91       	ld	r29, X+
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	bf 91       	pop	r27
     d1a:	af 91       	pop	r26
     d1c:	9f 91       	pop	r25
     d1e:	8f 91       	pop	r24
     d20:	7f 91       	pop	r23
     d22:	6f 91       	pop	r22
     d24:	5f 91       	pop	r21
     d26:	4f 91       	pop	r20
     d28:	3f 91       	pop	r19
     d2a:	2f 91       	pop	r18
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	bf 90       	pop	r11
     d3a:	af 90       	pop	r10
     d3c:	9f 90       	pop	r9
     d3e:	8f 90       	pop	r8
     d40:	7f 90       	pop	r7
     d42:	6f 90       	pop	r6
     d44:	5f 90       	pop	r5
     d46:	4f 90       	pop	r4
     d48:	3f 90       	pop	r3
     d4a:	2f 90       	pop	r2
     d4c:	1f 90       	pop	r1
     d4e:	0f 90       	pop	r0
     d50:	0c be       	out	0x3c, r0	; 60
     d52:	0f 90       	pop	r0
     d54:	0b be       	out	0x3b, r0	; 59
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d5c:	08 95       	ret

00000d5e <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d5e:	9a df       	rcall	.-204    	; 0xc94 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d60:	18 95       	reti

00000d62 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	0f 92       	push	r0
     d68:	fc 01       	movw	r30, r24
     d6a:	86 8d       	ldd	r24, Z+30	; 0x1e
     d6c:	81 11       	cpse	r24, r1
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <prvIsQueueEmpty+0x12>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <prvIsQueueEmpty+0x14>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	08 95       	ret

00000d7c <prvIsQueueFull>:
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	0f 92       	push	r0
     d82:	fc 01       	movw	r30, r24
     d84:	26 8d       	ldd	r18, Z+30	; 0x1e
     d86:	87 8d       	ldd	r24, Z+31	; 0x1f
     d88:	28 13       	cpse	r18, r24
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <prvIsQueueFull+0x14>
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <prvIsQueueFull+0x16>
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	08 95       	ret

00000d98 <prvCopyDataToQueue>:
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	ec 01       	movw	r28, r24
     da2:	04 2f       	mov	r16, r20
     da4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     da6:	48 a1       	ldd	r20, Y+32	; 0x20
     da8:	41 11       	cpse	r20, r1
     daa:	0c c0       	rjmp	.+24     	; 0xdc4 <prvCopyDataToQueue+0x2c>
     dac:	88 81       	ld	r24, Y
     dae:	99 81       	ldd	r25, Y+1	; 0x01
     db0:	89 2b       	or	r24, r25
     db2:	09 f0       	breq	.+2      	; 0xdb6 <prvCopyDataToQueue+0x1e>
     db4:	42 c0       	rjmp	.+132    	; 0xe3a <prvCopyDataToQueue+0xa2>
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <xTaskPriorityDisinherit>
     dbe:	1d 82       	std	Y+5, r1	; 0x05
     dc0:	1c 82       	std	Y+4, r1	; 0x04
     dc2:	42 c0       	rjmp	.+132    	; 0xe48 <prvCopyDataToQueue+0xb0>
     dc4:	01 11       	cpse	r16, r1
     dc6:	17 c0       	rjmp	.+46     	; 0xdf6 <prvCopyDataToQueue+0x5e>
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	9b 81       	ldd	r25, Y+3	; 0x03
     dce:	0e 94 93 33 	call	0x6726	; 0x6726 <memcpy>
     dd2:	28 a1       	ldd	r18, Y+32	; 0x20
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	82 0f       	add	r24, r18
     dda:	91 1d       	adc	r25, r1
     ddc:	9b 83       	std	Y+3, r25	; 0x03
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	2c 81       	ldd	r18, Y+4	; 0x04
     de2:	3d 81       	ldd	r19, Y+5	; 0x05
     de4:	82 17       	cp	r24, r18
     de6:	93 07       	cpc	r25, r19
     de8:	50 f1       	brcs	.+84     	; 0xe3e <prvCopyDataToQueue+0xa6>
     dea:	88 81       	ld	r24, Y
     dec:	99 81       	ldd	r25, Y+1	; 0x01
     dee:	9b 83       	std	Y+3, r25	; 0x03
     df0:	8a 83       	std	Y+2, r24	; 0x02
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	29 c0       	rjmp	.+82     	; 0xe48 <prvCopyDataToQueue+0xb0>
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	8e 81       	ldd	r24, Y+6	; 0x06
     dfa:	9f 81       	ldd	r25, Y+7	; 0x07
     dfc:	0e 94 93 33 	call	0x6726	; 0x6726 <memcpy>
     e00:	88 a1       	ldd	r24, Y+32	; 0x20
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	91 95       	neg	r25
     e06:	81 95       	neg	r24
     e08:	91 09       	sbc	r25, r1
     e0a:	2e 81       	ldd	r18, Y+6	; 0x06
     e0c:	3f 81       	ldd	r19, Y+7	; 0x07
     e0e:	28 0f       	add	r18, r24
     e10:	39 1f       	adc	r19, r25
     e12:	3f 83       	std	Y+7, r19	; 0x07
     e14:	2e 83       	std	Y+6, r18	; 0x06
     e16:	48 81       	ld	r20, Y
     e18:	59 81       	ldd	r21, Y+1	; 0x01
     e1a:	24 17       	cp	r18, r20
     e1c:	35 07       	cpc	r19, r21
     e1e:	30 f4       	brcc	.+12     	; 0xe2c <prvCopyDataToQueue+0x94>
     e20:	2c 81       	ldd	r18, Y+4	; 0x04
     e22:	3d 81       	ldd	r19, Y+5	; 0x05
     e24:	82 0f       	add	r24, r18
     e26:	93 1f       	adc	r25, r19
     e28:	9f 83       	std	Y+7, r25	; 0x07
     e2a:	8e 83       	std	Y+6, r24	; 0x06
     e2c:	02 30       	cpi	r16, 0x02	; 2
     e2e:	49 f4       	brne	.+18     	; 0xe42 <prvCopyDataToQueue+0xaa>
     e30:	11 23       	and	r17, r17
     e32:	49 f0       	breq	.+18     	; 0xe46 <prvCopyDataToQueue+0xae>
     e34:	11 50       	subi	r17, 0x01	; 1
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	07 c0       	rjmp	.+14     	; 0xe48 <prvCopyDataToQueue+0xb0>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <prvCopyDataToQueue+0xb0>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <prvCopyDataToQueue+0xb0>
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <prvCopyDataToQueue+0xb0>
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	1f 5f       	subi	r17, 0xFF	; 255
     e4a:	1e 8f       	std	Y+30, r17	; 0x1e
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	08 95       	ret

00000e56 <prvCopyDataFromQueue>:
     e56:	fc 01       	movw	r30, r24
     e58:	40 a1       	ldd	r20, Z+32	; 0x20
     e5a:	44 23       	and	r20, r20
     e5c:	a9 f0       	breq	.+42     	; 0xe88 <prvCopyDataFromQueue+0x32>
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	26 81       	ldd	r18, Z+6	; 0x06
     e62:	37 81       	ldd	r19, Z+7	; 0x07
     e64:	24 0f       	add	r18, r20
     e66:	35 1f       	adc	r19, r21
     e68:	37 83       	std	Z+7, r19	; 0x07
     e6a:	26 83       	std	Z+6, r18	; 0x06
     e6c:	84 81       	ldd	r24, Z+4	; 0x04
     e6e:	95 81       	ldd	r25, Z+5	; 0x05
     e70:	28 17       	cp	r18, r24
     e72:	39 07       	cpc	r19, r25
     e74:	20 f0       	brcs	.+8      	; 0xe7e <prvCopyDataFromQueue+0x28>
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	97 83       	std	Z+7, r25	; 0x07
     e7c:	86 83       	std	Z+6, r24	; 0x06
     e7e:	cb 01       	movw	r24, r22
     e80:	66 81       	ldd	r22, Z+6	; 0x06
     e82:	77 81       	ldd	r23, Z+7	; 0x07
     e84:	0c 94 93 33 	jmp	0x6726	; 0x6726 <memcpy>
     e88:	08 95       	ret

00000e8a <prvUnlockQueue>:
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	ec 01       	movw	r28, r24
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	0f 92       	push	r0
     e98:	1a a1       	ldd	r17, Y+34	; 0x22
     e9a:	0b c0       	rjmp	.+22     	; 0xeb2 <prvUnlockQueue+0x28>
     e9c:	8b 89       	ldd	r24, Y+19	; 0x13
     e9e:	88 23       	and	r24, r24
     ea0:	51 f0       	breq	.+20     	; 0xeb6 <prvUnlockQueue+0x2c>
     ea2:	ce 01       	movw	r24, r28
     ea4:	43 96       	adiw	r24, 0x13	; 19
     ea6:	0e 94 f7 12 	call	0x25ee	; 0x25ee <xTaskRemoveFromEventList>
     eaa:	81 11       	cpse	r24, r1
     eac:	0e 94 cd 14 	call	0x299a	; 0x299a <vTaskMissedYield>
     eb0:	11 50       	subi	r17, 0x01	; 1
     eb2:	11 16       	cp	r1, r17
     eb4:	9c f3       	brlt	.-26     	; 0xe9c <prvUnlockQueue+0x12>
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	8a a3       	std	Y+34, r24	; 0x22
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	0f 92       	push	r0
     ec4:	19 a1       	ldd	r17, Y+33	; 0x21
     ec6:	0b c0       	rjmp	.+22     	; 0xede <prvUnlockQueue+0x54>
     ec8:	88 85       	ldd	r24, Y+8	; 0x08
     eca:	88 23       	and	r24, r24
     ecc:	51 f0       	breq	.+20     	; 0xee2 <prvUnlockQueue+0x58>
     ece:	ce 01       	movw	r24, r28
     ed0:	08 96       	adiw	r24, 0x08	; 8
     ed2:	0e 94 f7 12 	call	0x25ee	; 0x25ee <xTaskRemoveFromEventList>
     ed6:	81 11       	cpse	r24, r1
     ed8:	0e 94 cd 14 	call	0x299a	; 0x299a <vTaskMissedYield>
     edc:	11 50       	subi	r17, 0x01	; 1
     ede:	11 16       	cp	r1, r17
     ee0:	9c f3       	brlt	.-26     	; 0xec8 <prvUnlockQueue+0x3e>
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	89 a3       	std	Y+33, r24	; 0x21
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <xQueueGenericReset>:
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	ec 01       	movw	r28, r24
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	0f 92       	push	r0
     efe:	e8 81       	ld	r30, Y
     f00:	f9 81       	ldd	r31, Y+1	; 0x01
     f02:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f04:	28 a1       	ldd	r18, Y+32	; 0x20
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	82 9f       	mul	r24, r18
     f0c:	a0 01       	movw	r20, r0
     f0e:	83 9f       	mul	r24, r19
     f10:	50 0d       	add	r21, r0
     f12:	92 9f       	mul	r25, r18
     f14:	50 0d       	add	r21, r0
     f16:	11 24       	eor	r1, r1
     f18:	4e 0f       	add	r20, r30
     f1a:	5f 1f       	adc	r21, r31
     f1c:	5d 83       	std	Y+5, r21	; 0x05
     f1e:	4c 83       	std	Y+4, r20	; 0x04
     f20:	1e 8e       	std	Y+30, r1	; 0x1e
     f22:	fb 83       	std	Y+3, r31	; 0x03
     f24:	ea 83       	std	Y+2, r30	; 0x02
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	28 9f       	mul	r18, r24
     f2a:	a0 01       	movw	r20, r0
     f2c:	29 9f       	mul	r18, r25
     f2e:	50 0d       	add	r21, r0
     f30:	38 9f       	mul	r19, r24
     f32:	50 0d       	add	r21, r0
     f34:	11 24       	eor	r1, r1
     f36:	cf 01       	movw	r24, r30
     f38:	84 0f       	add	r24, r20
     f3a:	95 1f       	adc	r25, r21
     f3c:	9f 83       	std	Y+7, r25	; 0x07
     f3e:	8e 83       	std	Y+6, r24	; 0x06
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	89 a3       	std	Y+33, r24	; 0x21
     f44:	8a a3       	std	Y+34, r24	; 0x22
     f46:	61 11       	cpse	r22, r1
     f48:	0b c0       	rjmp	.+22     	; 0xf60 <xQueueGenericReset+0x6e>
     f4a:	88 85       	ldd	r24, Y+8	; 0x08
     f4c:	88 23       	and	r24, r24
     f4e:	71 f0       	breq	.+28     	; 0xf6c <xQueueGenericReset+0x7a>
     f50:	ce 01       	movw	r24, r28
     f52:	08 96       	adiw	r24, 0x08	; 8
     f54:	0e 94 f7 12 	call	0x25ee	; 0x25ee <xTaskRemoveFromEventList>
     f58:	88 23       	and	r24, r24
     f5a:	41 f0       	breq	.+16     	; 0xf6c <xQueueGenericReset+0x7a>
     f5c:	3a de       	rcall	.-908    	; 0xbd2 <vPortYield>
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <xQueueGenericReset+0x7a>
     f60:	ce 01       	movw	r24, r28
     f62:	08 96       	adiw	r24, 0x08	; 8
     f64:	68 dd       	rcall	.-1328   	; 0xa36 <vListInitialise>
     f66:	ce 01       	movw	r24, r28
     f68:	43 96       	adiw	r24, 0x13	; 19
     f6a:	65 dd       	rcall	.-1334   	; 0xa36 <vListInitialise>
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <prvInitialiseNewQueue>:
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	f8 01       	movw	r30, r16
     f7e:	61 11       	cpse	r22, r1
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <prvInitialiseNewQueue+0x10>
     f82:	11 83       	std	Z+1, r17	; 0x01
     f84:	00 83       	st	Z, r16
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <prvInitialiseNewQueue+0x14>
     f88:	51 83       	std	Z+1, r21	; 0x01
     f8a:	40 83       	st	Z, r20
     f8c:	87 8f       	std	Z+31, r24	; 0x1f
     f8e:	60 a3       	std	Z+32, r22	; 0x20
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	cf 01       	movw	r24, r30
     f94:	ae df       	rcall	.-164    	; 0xef2 <xQueueGenericReset>
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <xQueueGenericCreate>:
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	f8 2e       	mov	r15, r24
     fac:	e6 2e       	mov	r14, r22
     fae:	d4 2e       	mov	r13, r20
     fb0:	86 9f       	mul	r24, r22
     fb2:	c0 01       	movw	r24, r0
     fb4:	11 24       	eor	r1, r1
     fb6:	83 96       	adiw	r24, 0x23	; 35
     fb8:	58 dc       	rcall	.-1872   	; 0x86a <pvPortMalloc>
     fba:	ec 01       	movw	r28, r24
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	41 f0       	breq	.+16     	; 0xfd0 <xQueueGenericCreate+0x34>
     fc0:	8c 01       	movw	r16, r24
     fc2:	2d 2d       	mov	r18, r13
     fc4:	ac 01       	movw	r20, r24
     fc6:	4d 5d       	subi	r20, 0xDD	; 221
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	6e 2d       	mov	r22, r14
     fcc:	8f 2d       	mov	r24, r15
     fce:	d4 df       	rcall	.-88     	; 0xf78 <prvInitialiseNewQueue>
     fd0:	ce 01       	movw	r24, r28
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	08 95       	ret

00000fe2 <xQueueGenericSend>:
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	29 97       	sbiw	r28, 0x09	; 9
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	7c 01       	movw	r14, r24
    1004:	6b 01       	movw	r12, r22
    1006:	2e 83       	std	Y+6, r18	; 0x06
    1008:	3f 83       	std	Y+7, r19	; 0x07
    100a:	48 87       	std	Y+8, r20	; 0x08
    100c:	59 87       	std	Y+9, r21	; 0x09
    100e:	10 e0       	ldi	r17, 0x00	; 0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	0f 92       	push	r0
    1016:	f7 01       	movw	r30, r14
    1018:	96 8d       	ldd	r25, Z+30	; 0x1e
    101a:	87 8d       	ldd	r24, Z+31	; 0x1f
    101c:	98 17       	cp	r25, r24
    101e:	10 f0       	brcs	.+4      	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    1020:	02 30       	cpi	r16, 0x02	; 2
    1022:	b1 f4       	brne	.+44     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    1024:	40 2f       	mov	r20, r16
    1026:	b6 01       	movw	r22, r12
    1028:	c7 01       	movw	r24, r14
    102a:	b6 de       	rcall	.-660    	; 0xd98 <prvCopyDataToQueue>
    102c:	f7 01       	movw	r30, r14
    102e:	93 89       	ldd	r25, Z+19	; 0x13
    1030:	99 23       	and	r25, r25
    1032:	41 f0       	breq	.+16     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1034:	c7 01       	movw	r24, r14
    1036:	43 96       	adiw	r24, 0x13	; 19
    1038:	0e 94 f7 12 	call	0x25ee	; 0x25ee <xTaskRemoveFromEventList>
    103c:	88 23       	and	r24, r24
    103e:	21 f0       	breq	.+8      	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1040:	c8 dd       	rcall	.-1136   	; 0xbd2 <vPortYield>
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1044:	81 11       	cpse	r24, r1
    1046:	c5 dd       	rcall	.-1142   	; 0xbd2 <vPortYield>
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	4c c0       	rjmp	.+152    	; 0x10e8 <__EEPROM_REGION_LENGTH__+0xe8>
    1050:	8e 81       	ldd	r24, Y+6	; 0x06
    1052:	9f 81       	ldd	r25, Y+7	; 0x07
    1054:	a8 85       	ldd	r26, Y+8	; 0x08
    1056:	b9 85       	ldd	r27, Y+9	; 0x09
    1058:	89 2b       	or	r24, r25
    105a:	8a 2b       	or	r24, r26
    105c:	8b 2b       	or	r24, r27
    105e:	21 f4       	brne	.+8      	; 0x1068 <__EEPROM_REGION_LENGTH__+0x68>
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	40 c0       	rjmp	.+128    	; 0x10e8 <__EEPROM_REGION_LENGTH__+0xe8>
    1068:	11 11       	cpse	r17, r1
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	0e 94 56 14 	call	0x28ac	; 0x28ac <vTaskInternalSetTimeOutState>
    1074:	11 e0       	ldi	r17, 0x01	; 1
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	15 d7       	rcall	.+3626   	; 0x1ea6 <vTaskSuspendAll>
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	0f 92       	push	r0
    1082:	f7 01       	movw	r30, r14
    1084:	81 a1       	ldd	r24, Z+33	; 0x21
    1086:	8f 3f       	cpi	r24, 0xFF	; 255
    1088:	09 f4       	brne	.+2      	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    108a:	11 a2       	std	Z+33, r1	; 0x21
    108c:	f7 01       	movw	r30, r14
    108e:	82 a1       	ldd	r24, Z+34	; 0x22
    1090:	8f 3f       	cpi	r24, 0xFF	; 255
    1092:	09 f4       	brne	.+2      	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    1094:	12 a2       	std	Z+34, r1	; 0x22
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	be 01       	movw	r22, r28
    109c:	6a 5f       	subi	r22, 0xFA	; 250
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	0e 94 67 14 	call	0x28ce	; 0x28ce <xTaskCheckForTimeOut>
    10a8:	81 11       	cpse	r24, r1
    10aa:	19 c0       	rjmp	.+50     	; 0x10de <__EEPROM_REGION_LENGTH__+0xde>
    10ac:	c7 01       	movw	r24, r14
    10ae:	66 de       	rcall	.-820    	; 0xd7c <prvIsQueueFull>
    10b0:	88 23       	and	r24, r24
    10b2:	81 f0       	breq	.+32     	; 0x10d4 <__EEPROM_REGION_LENGTH__+0xd4>
    10b4:	4e 81       	ldd	r20, Y+6	; 0x06
    10b6:	5f 81       	ldd	r21, Y+7	; 0x07
    10b8:	68 85       	ldd	r22, Y+8	; 0x08
    10ba:	79 85       	ldd	r23, Y+9	; 0x09
    10bc:	c7 01       	movw	r24, r14
    10be:	08 96       	adiw	r24, 0x08	; 8
    10c0:	0e 94 54 12 	call	0x24a8	; 0x24a8 <vTaskPlaceOnEventList>
    10c4:	c7 01       	movw	r24, r14
    10c6:	e1 de       	rcall	.-574    	; 0xe8a <prvUnlockQueue>
    10c8:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>
    10cc:	81 11       	cpse	r24, r1
    10ce:	a0 cf       	rjmp	.-192    	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    10d0:	80 dd       	rcall	.-1280   	; 0xbd2 <vPortYield>
    10d2:	9e cf       	rjmp	.-196    	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    10d4:	c7 01       	movw	r24, r14
    10d6:	d9 de       	rcall	.-590    	; 0xe8a <prvUnlockQueue>
    10d8:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>
    10dc:	99 cf       	rjmp	.-206    	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    10de:	c7 01       	movw	r24, r14
    10e0:	d4 de       	rcall	.-600    	; 0xe8a <prvUnlockQueue>
    10e2:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	29 96       	adiw	r28, 0x09	; 9
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	cf 90       	pop	r12
    1104:	08 95       	ret

00001106 <prvInitialiseMutex>:
    1106:	0f 93       	push	r16
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	69 f0       	breq	.+26     	; 0x1126 <prvInitialiseMutex+0x20>
    110c:	fc 01       	movw	r30, r24
    110e:	15 82       	std	Z+5, r1	; 0x05
    1110:	14 82       	std	Z+4, r1	; 0x04
    1112:	11 82       	std	Z+1, r1	; 0x01
    1114:	10 82       	st	Z, r1
    1116:	16 82       	std	Z+6, r1	; 0x06
    1118:	00 e0       	ldi	r16, 0x00	; 0
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	a9 01       	movw	r20, r18
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	5e df       	rcall	.-324    	; 0xfe2 <xQueueGenericSend>
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <xQueueCreateMutex>:
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	48 2f       	mov	r20, r24
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	33 df       	rcall	.-410    	; 0xf9c <xQueueGenericCreate>
    1136:	ec 01       	movw	r28, r24
    1138:	e6 df       	rcall	.-52     	; 0x1106 <prvInitialiseMutex>
    113a:	ce 01       	movw	r24, r28
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <xQueueGenericSendFromISR>:
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	8a 01       	movw	r16, r20
    1150:	fc 01       	movw	r30, r24
    1152:	56 8d       	ldd	r21, Z+30	; 0x1e
    1154:	37 8d       	ldd	r19, Z+31	; 0x1f
    1156:	53 17       	cp	r21, r19
    1158:	10 f0       	brcs	.+4      	; 0x115e <xQueueGenericSendFromISR+0x1c>
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	f9 f4       	brne	.+62     	; 0x119c <xQueueGenericSendFromISR+0x5a>
    115e:	42 2f       	mov	r20, r18
    1160:	78 01       	movw	r14, r16
    1162:	ec 01       	movw	r28, r24
    1164:	1a a1       	ldd	r17, Y+34	; 0x22
    1166:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1168:	ce 01       	movw	r24, r28
    116a:	16 de       	rcall	.-980    	; 0xd98 <prvCopyDataToQueue>
    116c:	1f 3f       	cpi	r17, 0xFF	; 255
    116e:	81 f4       	brne	.+32     	; 0x1190 <xQueueGenericSendFromISR+0x4e>
    1170:	8b 89       	ldd	r24, Y+19	; 0x13
    1172:	88 23       	and	r24, r24
    1174:	a9 f0       	breq	.+42     	; 0x11a0 <xQueueGenericSendFromISR+0x5e>
    1176:	ce 01       	movw	r24, r28
    1178:	43 96       	adiw	r24, 0x13	; 19
    117a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <xTaskRemoveFromEventList>
    117e:	88 23       	and	r24, r24
    1180:	89 f0       	breq	.+34     	; 0x11a4 <xQueueGenericSendFromISR+0x62>
    1182:	e1 14       	cp	r14, r1
    1184:	f1 04       	cpc	r15, r1
    1186:	81 f0       	breq	.+32     	; 0x11a8 <xQueueGenericSendFromISR+0x66>
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	f7 01       	movw	r30, r14
    118c:	80 83       	st	Z, r24
    118e:	0d c0       	rjmp	.+26     	; 0x11aa <xQueueGenericSendFromISR+0x68>
    1190:	ff 24       	eor	r15, r15
    1192:	f3 94       	inc	r15
    1194:	f1 0e       	add	r15, r17
    1196:	fa a2       	std	Y+34, r15	; 0x22
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <xQueueGenericSendFromISR+0x68>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	05 c0       	rjmp	.+10     	; 0x11aa <xQueueGenericSendFromISR+0x68>
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <xQueueGenericSendFromISR+0x68>
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <xQueueGenericSendFromISR+0x68>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	08 95       	ret

000011b8 <xQueueReceive>:
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	29 97       	sbiw	r28, 0x09	; 9
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	8c 01       	movw	r16, r24
    11da:	6b 01       	movw	r12, r22
    11dc:	2e 83       	std	Y+6, r18	; 0x06
    11de:	3f 83       	std	Y+7, r19	; 0x07
    11e0:	48 87       	std	Y+8, r20	; 0x08
    11e2:	59 87       	std	Y+9, r21	; 0x09
    11e4:	e1 2c       	mov	r14, r1
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	0f 92       	push	r0
    11ec:	f8 01       	movw	r30, r16
    11ee:	f6 8c       	ldd	r15, Z+30	; 0x1e
    11f0:	ff 20       	and	r15, r15
    11f2:	99 f0       	breq	.+38     	; 0x121a <xQueueReceive+0x62>
    11f4:	b6 01       	movw	r22, r12
    11f6:	c8 01       	movw	r24, r16
    11f8:	2e de       	rcall	.-932    	; 0xe56 <prvCopyDataFromQueue>
    11fa:	fa 94       	dec	r15
    11fc:	f8 01       	movw	r30, r16
    11fe:	f6 8e       	std	Z+30, r15	; 0x1e
    1200:	80 85       	ldd	r24, Z+8	; 0x08
    1202:	88 23       	and	r24, r24
    1204:	31 f0       	breq	.+12     	; 0x1212 <xQueueReceive+0x5a>
    1206:	c8 01       	movw	r24, r16
    1208:	08 96       	adiw	r24, 0x08	; 8
    120a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <xTaskRemoveFromEventList>
    120e:	81 11       	cpse	r24, r1
    1210:	e0 dc       	rcall	.-1600   	; 0xbd2 <vPortYield>
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	4f c0       	rjmp	.+158    	; 0x12b8 <xQueueReceive+0x100>
    121a:	8e 81       	ldd	r24, Y+6	; 0x06
    121c:	9f 81       	ldd	r25, Y+7	; 0x07
    121e:	a8 85       	ldd	r26, Y+8	; 0x08
    1220:	b9 85       	ldd	r27, Y+9	; 0x09
    1222:	89 2b       	or	r24, r25
    1224:	8a 2b       	or	r24, r26
    1226:	8b 2b       	or	r24, r27
    1228:	21 f4       	brne	.+8      	; 0x1232 <xQueueReceive+0x7a>
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	43 c0       	rjmp	.+134    	; 0x12b8 <xQueueReceive+0x100>
    1232:	e1 10       	cpse	r14, r1
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <xQueueReceive+0x8a>
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	0e 94 56 14 	call	0x28ac	; 0x28ac <vTaskInternalSetTimeOutState>
    123e:	ee 24       	eor	r14, r14
    1240:	e3 94       	inc	r14
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	2f d6       	rcall	.+3166   	; 0x1ea6 <vTaskSuspendAll>
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	0f 92       	push	r0
    124e:	f8 01       	movw	r30, r16
    1250:	81 a1       	ldd	r24, Z+33	; 0x21
    1252:	8f 3f       	cpi	r24, 0xFF	; 255
    1254:	09 f4       	brne	.+2      	; 0x1258 <xQueueReceive+0xa0>
    1256:	11 a2       	std	Z+33, r1	; 0x21
    1258:	f8 01       	movw	r30, r16
    125a:	82 a1       	ldd	r24, Z+34	; 0x22
    125c:	8f 3f       	cpi	r24, 0xFF	; 255
    125e:	09 f4       	brne	.+2      	; 0x1262 <xQueueReceive+0xaa>
    1260:	12 a2       	std	Z+34, r1	; 0x22
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	be 01       	movw	r22, r28
    1268:	6a 5f       	subi	r22, 0xFA	; 250
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	ce 01       	movw	r24, r28
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	0e 94 67 14 	call	0x28ce	; 0x28ce <xTaskCheckForTimeOut>
    1274:	81 11       	cpse	r24, r1
    1276:	17 c0       	rjmp	.+46     	; 0x12a6 <xQueueReceive+0xee>
    1278:	c8 01       	movw	r24, r16
    127a:	73 dd       	rcall	.-1306   	; 0xd62 <prvIsQueueEmpty>
    127c:	88 23       	and	r24, r24
    127e:	79 f0       	breq	.+30     	; 0x129e <xQueueReceive+0xe6>
    1280:	4e 81       	ldd	r20, Y+6	; 0x06
    1282:	5f 81       	ldd	r21, Y+7	; 0x07
    1284:	68 85       	ldd	r22, Y+8	; 0x08
    1286:	79 85       	ldd	r23, Y+9	; 0x09
    1288:	c8 01       	movw	r24, r16
    128a:	43 96       	adiw	r24, 0x13	; 19
    128c:	0e 94 54 12 	call	0x24a8	; 0x24a8 <vTaskPlaceOnEventList>
    1290:	c8 01       	movw	r24, r16
    1292:	fb dd       	rcall	.-1034   	; 0xe8a <prvUnlockQueue>
    1294:	48 d7       	rcall	.+3728   	; 0x2126 <xTaskResumeAll>
    1296:	81 11       	cpse	r24, r1
    1298:	a6 cf       	rjmp	.-180    	; 0x11e6 <xQueueReceive+0x2e>
    129a:	9b dc       	rcall	.-1738   	; 0xbd2 <vPortYield>
    129c:	a4 cf       	rjmp	.-184    	; 0x11e6 <xQueueReceive+0x2e>
    129e:	c8 01       	movw	r24, r16
    12a0:	f4 dd       	rcall	.-1048   	; 0xe8a <prvUnlockQueue>
    12a2:	41 d7       	rcall	.+3714   	; 0x2126 <xTaskResumeAll>
    12a4:	a0 cf       	rjmp	.-192    	; 0x11e6 <xQueueReceive+0x2e>
    12a6:	c8 01       	movw	r24, r16
    12a8:	f0 dd       	rcall	.-1056   	; 0xe8a <prvUnlockQueue>
    12aa:	3d d7       	rcall	.+3706   	; 0x2126 <xTaskResumeAll>
    12ac:	c8 01       	movw	r24, r16
    12ae:	59 dd       	rcall	.-1358   	; 0xd62 <prvIsQueueEmpty>
    12b0:	88 23       	and	r24, r24
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <xQueueReceive+0xfe>
    12b4:	98 cf       	rjmp	.-208    	; 0x11e6 <xQueueReceive+0x2e>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	29 96       	adiw	r28, 0x09	; 9
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	cf 90       	pop	r12
    12d4:	08 95       	ret

000012d6 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	0f 92       	push	r0
    12e2:	89 a1       	ldd	r24, Y+33	; 0x21
    12e4:	8f 3f       	cpi	r24, 0xFF	; 255
    12e6:	09 f4       	brne	.+2      	; 0x12ea <vQueueWaitForMessageRestricted+0x14>
    12e8:	19 a2       	std	Y+33, r1	; 0x21
    12ea:	8a a1       	ldd	r24, Y+34	; 0x22
    12ec:	8f 3f       	cpi	r24, 0xFF	; 255
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <vQueueWaitForMessageRestricted+0x1c>
    12f0:	1a a2       	std	Y+34, r1	; 0x22
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    12f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12f8:	81 11       	cpse	r24, r1
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    12fc:	ce 01       	movw	r24, r28
    12fe:	43 96       	adiw	r24, 0x13	; 19
    1300:	0e 94 b5 12 	call	0x256a	; 0x256a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1304:	ce 01       	movw	r24, r28
    1306:	c1 dd       	rcall	.-1150   	; 0xe8a <prvUnlockQueue>
    }
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    130e:	fc 01       	movw	r30, r24
    1310:	44 81       	ldd	r20, Z+4	; 0x04
    1312:	55 81       	ldd	r21, Z+5	; 0x05
    1314:	22 81       	ldd	r18, Z+2	; 0x02
    1316:	33 81       	ldd	r19, Z+3	; 0x03
    1318:	24 0f       	add	r18, r20
    131a:	35 1f       	adc	r19, r21
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	b9 01       	movw	r22, r18
    1322:	68 1b       	sub	r22, r24
    1324:	79 0b       	sbc	r23, r25
    1326:	cb 01       	movw	r24, r22
    1328:	64 17       	cp	r22, r20
    132a:	75 07       	cpc	r23, r21
    132c:	10 f0       	brcs	.+4      	; 0x1332 <prvBytesInBuffer+0x24>
    132e:	84 1b       	sub	r24, r20
    1330:	95 0b       	sbc	r25, r21
    1332:	08 95       	ret

00001334 <prvInitialiseNewStreamBuffer>:
    1334:	0f 93       	push	r16
    1336:	fc 01       	movw	r30, r24
    1338:	8f e0       	ldi	r24, 0x0F	; 15
    133a:	df 01       	movw	r26, r30
    133c:	1d 92       	st	X+, r1
    133e:	8a 95       	dec	r24
    1340:	e9 f7       	brne	.-6      	; 0x133c <prvInitialiseNewStreamBuffer+0x8>
    1342:	75 87       	std	Z+13, r23	; 0x0d
    1344:	64 87       	std	Z+12, r22	; 0x0c
    1346:	55 83       	std	Z+5, r21	; 0x05
    1348:	44 83       	std	Z+4, r20	; 0x04
    134a:	37 83       	std	Z+7, r19	; 0x07
    134c:	26 83       	std	Z+6, r18	; 0x06
    134e:	06 87       	std	Z+14, r16	; 0x0e
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <prvWriteBytesToBuffer>:
    1354:	af 92       	push	r10
    1356:	bf 92       	push	r11
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	6c 01       	movw	r12, r24
    136a:	5b 01       	movw	r10, r22
    136c:	7a 01       	movw	r14, r20
    136e:	fc 01       	movw	r30, r24
    1370:	c2 81       	ldd	r28, Z+2	; 0x02
    1372:	d3 81       	ldd	r29, Z+3	; 0x03
    1374:	04 81       	ldd	r16, Z+4	; 0x04
    1376:	15 81       	ldd	r17, Z+5	; 0x05
    1378:	0c 1b       	sub	r16, r28
    137a:	1d 0b       	sbc	r17, r29
    137c:	40 17       	cp	r20, r16
    137e:	51 07       	cpc	r21, r17
    1380:	08 f4       	brcc	.+2      	; 0x1384 <prvWriteBytesToBuffer+0x30>
    1382:	8a 01       	movw	r16, r20
    1384:	f6 01       	movw	r30, r12
    1386:	84 85       	ldd	r24, Z+12	; 0x0c
    1388:	95 85       	ldd	r25, Z+13	; 0x0d
    138a:	a8 01       	movw	r20, r16
    138c:	b5 01       	movw	r22, r10
    138e:	8c 0f       	add	r24, r28
    1390:	9d 1f       	adc	r25, r29
    1392:	0e 94 93 33 	call	0x6726	; 0x6726 <memcpy>
    1396:	0e 15       	cp	r16, r14
    1398:	1f 05       	cpc	r17, r15
    139a:	58 f4       	brcc	.+22     	; 0x13b2 <prvWriteBytesToBuffer+0x5e>
    139c:	a7 01       	movw	r20, r14
    139e:	40 1b       	sub	r20, r16
    13a0:	51 0b       	sbc	r21, r17
    13a2:	b5 01       	movw	r22, r10
    13a4:	60 0f       	add	r22, r16
    13a6:	71 1f       	adc	r23, r17
    13a8:	f6 01       	movw	r30, r12
    13aa:	84 85       	ldd	r24, Z+12	; 0x0c
    13ac:	95 85       	ldd	r25, Z+13	; 0x0d
    13ae:	0e 94 93 33 	call	0x6726	; 0x6726 <memcpy>
    13b2:	ce 01       	movw	r24, r28
    13b4:	8e 0d       	add	r24, r14
    13b6:	9f 1d       	adc	r25, r15
    13b8:	f6 01       	movw	r30, r12
    13ba:	24 81       	ldd	r18, Z+4	; 0x04
    13bc:	35 81       	ldd	r19, Z+5	; 0x05
    13be:	82 17       	cp	r24, r18
    13c0:	93 07       	cpc	r25, r19
    13c2:	10 f0       	brcs	.+4      	; 0x13c8 <prvWriteBytesToBuffer+0x74>
    13c4:	82 1b       	sub	r24, r18
    13c6:	93 0b       	sbc	r25, r19
    13c8:	f6 01       	movw	r30, r12
    13ca:	93 83       	std	Z+3, r25	; 0x03
    13cc:	82 83       	std	Z+2, r24	; 0x02
    13ce:	c7 01       	movw	r24, r14
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	af 90       	pop	r10
    13e4:	08 95       	ret

000013e6 <prvWriteMessageToBuffer>:
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	1f 92       	push	r1
    13f8:	1f 92       	push	r1
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	7c 01       	movw	r14, r24
    1400:	6b 01       	movw	r12, r22
    1402:	5a 83       	std	Y+2, r21	; 0x02
    1404:	49 83       	std	Y+1, r20	; 0x01
    1406:	21 15       	cp	r18, r1
    1408:	31 05       	cpc	r19, r1
    140a:	c1 f0       	breq	.+48     	; 0x143c <prvWriteMessageToBuffer+0x56>
    140c:	fc 01       	movw	r30, r24
    140e:	86 85       	ldd	r24, Z+14	; 0x0e
    1410:	80 fd       	sbrc	r24, 0
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <prvWriteMessageToBuffer+0x3e>
    1414:	42 17       	cp	r20, r18
    1416:	53 07       	cpc	r21, r19
    1418:	08 f4       	brcc	.+2      	; 0x141c <prvWriteMessageToBuffer+0x36>
    141a:	9a 01       	movw	r18, r20
    141c:	3a 83       	std	Y+2, r19	; 0x02
    141e:	29 83       	std	Y+1, r18	; 0x01
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <prvWriteMessageToBuffer+0x5c>
    1424:	20 17       	cp	r18, r16
    1426:	31 07       	cpc	r19, r17
    1428:	58 f0       	brcs	.+22     	; 0x1440 <prvWriteMessageToBuffer+0x5a>
    142a:	42 e0       	ldi	r20, 0x02	; 2
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	be 01       	movw	r22, r28
    1430:	6f 5f       	subi	r22, 0xFF	; 255
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	c7 01       	movw	r24, r14
    1436:	8e df       	rcall	.-228    	; 0x1354 <prvWriteBytesToBuffer>
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <prvWriteMessageToBuffer+0x5c>
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <prvWriteMessageToBuffer+0x5c>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	88 23       	and	r24, r24
    1444:	31 f0       	breq	.+12     	; 0x1452 <prvWriteMessageToBuffer+0x6c>
    1446:	49 81       	ldd	r20, Y+1	; 0x01
    1448:	5a 81       	ldd	r21, Y+2	; 0x02
    144a:	b6 01       	movw	r22, r12
    144c:	c7 01       	movw	r24, r14
    144e:	82 df       	rcall	.-252    	; 0x1354 <prvWriteBytesToBuffer>
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <prvWriteMessageToBuffer+0x70>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	08 95       	ret

0000146c <prvReadBytesFromBuffer>:
    146c:	af 92       	push	r10
    146e:	bf 92       	push	r11
    1470:	cf 92       	push	r12
    1472:	df 92       	push	r13
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	7c 01       	movw	r14, r24
    1482:	5b 01       	movw	r10, r22
    1484:	e9 01       	movw	r28, r18
    1486:	42 17       	cp	r20, r18
    1488:	53 07       	cpc	r21, r19
    148a:	08 f4       	brcc	.+2      	; 0x148e <prvReadBytesFromBuffer+0x22>
    148c:	ea 01       	movw	r28, r20
    148e:	20 97       	sbiw	r28, 0x00	; 0
    1490:	81 f1       	breq	.+96     	; 0x14f2 <prvReadBytesFromBuffer+0x86>
    1492:	f7 01       	movw	r30, r14
    1494:	00 81       	ld	r16, Z
    1496:	11 81       	ldd	r17, Z+1	; 0x01
    1498:	84 81       	ldd	r24, Z+4	; 0x04
    149a:	95 81       	ldd	r25, Z+5	; 0x05
    149c:	80 1b       	sub	r24, r16
    149e:	91 0b       	sbc	r25, r17
    14a0:	6e 01       	movw	r12, r28
    14a2:	8c 17       	cp	r24, r28
    14a4:	9d 07       	cpc	r25, r29
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <prvReadBytesFromBuffer+0x3e>
    14a8:	6c 01       	movw	r12, r24
    14aa:	f7 01       	movw	r30, r14
    14ac:	64 85       	ldd	r22, Z+12	; 0x0c
    14ae:	75 85       	ldd	r23, Z+13	; 0x0d
    14b0:	60 0f       	add	r22, r16
    14b2:	71 1f       	adc	r23, r17
    14b4:	a6 01       	movw	r20, r12
    14b6:	c5 01       	movw	r24, r10
    14b8:	0e 94 93 33 	call	0x6726	; 0x6726 <memcpy>
    14bc:	cc 16       	cp	r12, r28
    14be:	dd 06       	cpc	r13, r29
    14c0:	58 f4       	brcc	.+22     	; 0x14d8 <prvReadBytesFromBuffer+0x6c>
    14c2:	ae 01       	movw	r20, r28
    14c4:	4c 19       	sub	r20, r12
    14c6:	5d 09       	sbc	r21, r13
    14c8:	f7 01       	movw	r30, r14
    14ca:	64 85       	ldd	r22, Z+12	; 0x0c
    14cc:	75 85       	ldd	r23, Z+13	; 0x0d
    14ce:	c5 01       	movw	r24, r10
    14d0:	8c 0d       	add	r24, r12
    14d2:	9d 1d       	adc	r25, r13
    14d4:	0e 94 93 33 	call	0x6726	; 0x6726 <memcpy>
    14d8:	0c 0f       	add	r16, r28
    14da:	1d 1f       	adc	r17, r29
    14dc:	f7 01       	movw	r30, r14
    14de:	84 81       	ldd	r24, Z+4	; 0x04
    14e0:	95 81       	ldd	r25, Z+5	; 0x05
    14e2:	08 17       	cp	r16, r24
    14e4:	19 07       	cpc	r17, r25
    14e6:	10 f0       	brcs	.+4      	; 0x14ec <prvReadBytesFromBuffer+0x80>
    14e8:	08 1b       	sub	r16, r24
    14ea:	19 0b       	sbc	r17, r25
    14ec:	f7 01       	movw	r30, r14
    14ee:	11 83       	std	Z+1, r17	; 0x01
    14f0:	00 83       	st	Z, r16
    14f2:	ce 01       	movw	r24, r28
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	ef 90       	pop	r14
    1500:	df 90       	pop	r13
    1502:	cf 90       	pop	r12
    1504:	bf 90       	pop	r11
    1506:	af 90       	pop	r10
    1508:	08 95       	ret

0000150a <prvReadMessageFromBuffer>:
    150a:	6f 92       	push	r6
    150c:	7f 92       	push	r7
    150e:	8f 92       	push	r8
    1510:	9f 92       	push	r9
    1512:	af 92       	push	r10
    1514:	bf 92       	push	r11
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	1f 92       	push	r1
    1528:	1f 92       	push	r1
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	6c 01       	movw	r12, r24
    1530:	4b 01       	movw	r8, r22
    1532:	5a 01       	movw	r10, r20
    1534:	79 01       	movw	r14, r18
    1536:	01 15       	cp	r16, r1
    1538:	11 05       	cpc	r17, r1
    153a:	b1 f0       	breq	.+44     	; 0x1568 <prvReadMessageFromBuffer+0x5e>
    153c:	fc 01       	movw	r30, r24
    153e:	60 80       	ld	r6, Z
    1540:	71 80       	ldd	r7, Z+1	; 0x01
    1542:	a8 01       	movw	r20, r16
    1544:	be 01       	movw	r22, r28
    1546:	6f 5f       	subi	r22, 0xFF	; 255
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	90 df       	rcall	.-224    	; 0x146c <prvReadBytesFromBuffer>
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	9a 81       	ldd	r25, Y+2	; 0x02
    1550:	e0 1a       	sub	r14, r16
    1552:	f1 0a       	sbc	r15, r17
    1554:	a8 16       	cp	r10, r24
    1556:	b9 06       	cpc	r11, r25
    1558:	30 f4       	brcc	.+12     	; 0x1566 <prvReadMessageFromBuffer+0x5c>
    155a:	f6 01       	movw	r30, r12
    155c:	71 82       	std	Z+1, r7	; 0x01
    155e:	60 82       	st	Z, r6
    1560:	a1 2c       	mov	r10, r1
    1562:	b1 2c       	mov	r11, r1
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <prvReadMessageFromBuffer+0x5e>
    1566:	5c 01       	movw	r10, r24
    1568:	97 01       	movw	r18, r14
    156a:	a5 01       	movw	r20, r10
    156c:	b4 01       	movw	r22, r8
    156e:	c6 01       	movw	r24, r12
    1570:	7d df       	rcall	.-262    	; 0x146c <prvReadBytesFromBuffer>
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	9f 90       	pop	r9
    158c:	8f 90       	pop	r8
    158e:	7f 90       	pop	r7
    1590:	6f 90       	pop	r6
    1592:	08 95       	ret

00001594 <xStreamBufferGenericCreate>:
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	ec 01       	movw	r28, r24
    15a4:	6b 01       	movw	r12, r22
    15a6:	41 30       	cpi	r20, 0x01	; 1
    15a8:	11 f4       	brne	.+4      	; 0x15ae <xStreamBufferGenericCreate+0x1a>
    15aa:	01 e0       	ldi	r16, 0x01	; 1
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <xStreamBufferGenericCreate+0x1c>
    15ae:	00 e0       	ldi	r16, 0x00	; 0
    15b0:	c1 14       	cp	r12, r1
    15b2:	d1 04       	cpc	r13, r1
    15b4:	19 f4       	brne	.+6      	; 0x15bc <xStreamBufferGenericCreate+0x28>
    15b6:	cc 24       	eor	r12, r12
    15b8:	c3 94       	inc	r12
    15ba:	d1 2c       	mov	r13, r1
    15bc:	ce 01       	movw	r24, r28
    15be:	40 96       	adiw	r24, 0x10	; 16
    15c0:	c8 17       	cp	r28, r24
    15c2:	d9 07       	cpc	r29, r25
    15c4:	20 f4       	brcc	.+8      	; 0x15ce <xStreamBufferGenericCreate+0x3a>
    15c6:	21 96       	adiw	r28, 0x01	; 1
    15c8:	50 d9       	rcall	.-3424   	; 0x86a <pvPortMalloc>
    15ca:	7c 01       	movw	r14, r24
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <xStreamBufferGenericCreate+0x3e>
    15ce:	e1 2c       	mov	r14, r1
    15d0:	f1 2c       	mov	r15, r1
    15d2:	e1 14       	cp	r14, r1
    15d4:	f1 04       	cpc	r15, r1
    15d6:	39 f0       	breq	.+14     	; 0x15e6 <xStreamBufferGenericCreate+0x52>
    15d8:	96 01       	movw	r18, r12
    15da:	ae 01       	movw	r20, r28
    15dc:	b7 01       	movw	r22, r14
    15de:	61 5f       	subi	r22, 0xF1	; 241
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	c7 01       	movw	r24, r14
    15e4:	a7 de       	rcall	.-690    	; 0x1334 <prvInitialiseNewStreamBuffer>
    15e6:	c7 01       	movw	r24, r14
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	08 95       	ret

000015f8 <xStreamBufferReset>:
    15f8:	0f 93       	push	r16
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	0f 92       	push	r0
    1600:	fc 01       	movw	r30, r24
    1602:	20 85       	ldd	r18, Z+8	; 0x08
    1604:	31 85       	ldd	r19, Z+9	; 0x09
    1606:	23 2b       	or	r18, r19
    1608:	71 f4       	brne	.+28     	; 0x1626 <xStreamBufferReset+0x2e>
    160a:	22 85       	ldd	r18, Z+10	; 0x0a
    160c:	33 85       	ldd	r19, Z+11	; 0x0b
    160e:	23 2b       	or	r18, r19
    1610:	61 f4       	brne	.+24     	; 0x162a <xStreamBufferReset+0x32>
    1612:	26 81       	ldd	r18, Z+6	; 0x06
    1614:	37 81       	ldd	r19, Z+7	; 0x07
    1616:	44 81       	ldd	r20, Z+4	; 0x04
    1618:	55 81       	ldd	r21, Z+5	; 0x05
    161a:	64 85       	ldd	r22, Z+12	; 0x0c
    161c:	75 85       	ldd	r23, Z+13	; 0x0d
    161e:	06 85       	ldd	r16, Z+14	; 0x0e
    1620:	89 de       	rcall	.-750    	; 0x1334 <prvInitialiseNewStreamBuffer>
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	03 c0       	rjmp	.+6      	; 0x162c <xStreamBufferReset+0x34>
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	01 c0       	rjmp	.+2      	; 0x162c <xStreamBufferReset+0x34>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	0f 91       	pop	r16
    1632:	08 95       	ret

00001634 <xStreamBufferSpacesAvailable>:
    1634:	fc 01       	movw	r30, r24
    1636:	24 81       	ldd	r18, Z+4	; 0x04
    1638:	35 81       	ldd	r19, Z+5	; 0x05
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	82 0f       	add	r24, r18
    1640:	93 1f       	adc	r25, r19
    1642:	42 81       	ldd	r20, Z+2	; 0x02
    1644:	53 81       	ldd	r21, Z+3	; 0x03
    1646:	84 1b       	sub	r24, r20
    1648:	95 0b       	sbc	r25, r21
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	82 17       	cp	r24, r18
    164e:	93 07       	cpc	r25, r19
    1650:	10 f0       	brcs	.+4      	; 0x1656 <xStreamBufferSpacesAvailable+0x22>
    1652:	82 1b       	sub	r24, r18
    1654:	93 0b       	sbc	r25, r19
    1656:	08 95       	ret

00001658 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1658:	2f 92       	push	r2
    165a:	3f 92       	push	r3
    165c:	4f 92       	push	r4
    165e:	5f 92       	push	r5
    1660:	6f 92       	push	r6
    1662:	7f 92       	push	r7
    1664:	8f 92       	push	r8
    1666:	9f 92       	push	r9
    1668:	af 92       	push	r10
    166a:	bf 92       	push	r11
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	2b 97       	sbiw	r28, 0x0b	; 11
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	4c 01       	movw	r8, r24
    168e:	7b 87       	std	Y+11, r23	; 0x0b
    1690:	6a 87       	std	Y+10, r22	; 0x0a
    1692:	1a 01       	movw	r2, r20
    1694:	0e 83       	std	Y+6, r16	; 0x06
    1696:	1f 83       	std	Y+7, r17	; 0x07
    1698:	28 87       	std	Y+8, r18	; 0x08
    169a:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    169c:	fc 01       	movw	r30, r24
    169e:	84 81       	ldd	r24, Z+4	; 0x04
    16a0:	95 81       	ldd	r25, Z+5	; 0x05
    16a2:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    16a4:	26 85       	ldd	r18, Z+14	; 0x0e
    16a6:	20 ff       	sbrs	r18, 0
    16a8:	0c c0       	rjmp	.+24     	; 0x16c2 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    16aa:	2a 01       	movw	r4, r20
    16ac:	f2 e0       	ldi	r31, 0x02	; 2
    16ae:	4f 0e       	add	r4, r31
    16b0:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    16b2:	84 15       	cp	r24, r4
    16b4:	95 05       	cpc	r25, r5
    16b6:	58 f4       	brcc	.+22     	; 0x16ce <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    16b8:	1e 82       	std	Y+6, r1	; 0x06
    16ba:	1f 82       	std	Y+7, r1	; 0x07
    16bc:	18 86       	std	Y+8, r1	; 0x08
    16be:	19 86       	std	Y+9, r1	; 0x09
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    16c2:	84 17       	cp	r24, r20
    16c4:	95 07       	cpc	r25, r21
    16c6:	10 f0       	brcs	.+4      	; 0x16cc <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    16c8:	2a 01       	movw	r4, r20
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    16cc:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	9f 81       	ldd	r25, Y+7	; 0x07
    16d2:	a8 85       	ldd	r26, Y+8	; 0x08
    16d4:	b9 85       	ldd	r27, Y+9	; 0x09
    16d6:	89 2b       	or	r24, r25
    16d8:	8a 2b       	or	r24, r26
    16da:	8b 2b       	or	r24, r27
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <xStreamBufferSend+0x88>
    16de:	38 c0       	rjmp	.+112    	; 0x1750 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    16e0:	ce 01       	movw	r24, r28
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	0e 94 40 14 	call	0x2880	; 0x2880 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16ee:	c4 01       	movw	r24, r8
    16f0:	a1 df       	rcall	.-190    	; 0x1634 <xStreamBufferSpacesAvailable>
    16f2:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    16f4:	84 15       	cp	r24, r4
    16f6:	95 05       	cpc	r25, r5
    16f8:	40 f5       	brcc	.+80     	; 0x174a <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 29 18 	call	0x3052	; 0x3052 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1704:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <xTaskGetCurrentTaskHandle>
    1708:	f4 01       	movw	r30, r8
    170a:	93 87       	std	Z+11, r25	; 0x0b
    170c:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1712:	ae 80       	ldd	r10, Y+6	; 0x06
    1714:	bf 80       	ldd	r11, Y+7	; 0x07
    1716:	c8 84       	ldd	r12, Y+8	; 0x08
    1718:	d9 84       	ldd	r13, Y+9	; 0x09
    171a:	e1 2c       	mov	r14, r1
    171c:	f1 2c       	mov	r15, r1
    171e:	00 e0       	ldi	r16, 0x00	; 0
    1720:	10 e0       	ldi	r17, 0x00	; 0
    1722:	98 01       	movw	r18, r16
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	ba 01       	movw	r22, r20
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1730:	f4 01       	movw	r30, r8
    1732:	13 86       	std	Z+11, r1	; 0x0b
    1734:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1736:	be 01       	movw	r22, r28
    1738:	6a 5f       	subi	r22, 0xFA	; 250
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	ce 01       	movw	r24, r28
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	0e 94 67 14 	call	0x28ce	; 0x28ce <xTaskCheckForTimeOut>
    1744:	88 23       	and	r24, r24
    1746:	81 f2       	breq	.-96     	; 0x16e8 <xStreamBufferSend+0x90>
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
                    break;
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1750:	61 2c       	mov	r6, r1
    1752:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1754:	61 14       	cp	r6, r1
    1756:	71 04       	cpc	r7, r1
    1758:	19 f4       	brne	.+6      	; 0x1760 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    175a:	c4 01       	movw	r24, r8
    175c:	6b df       	rcall	.-298    	; 0x1634 <xStreamBufferSpacesAvailable>
    175e:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1760:	82 01       	movw	r16, r4
    1762:	93 01       	movw	r18, r6
    1764:	a1 01       	movw	r20, r2
    1766:	6a 85       	ldd	r22, Y+10	; 0x0a
    1768:	7b 85       	ldd	r23, Y+11	; 0x0b
    176a:	c4 01       	movw	r24, r8
    176c:	3c de       	rcall	.-904    	; 0x13e6 <prvWriteMessageToBuffer>
    176e:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1770:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1772:	e9 f0       	breq	.+58     	; 0x17ae <xStreamBufferSend+0x156>
    1774:	c4 01       	movw	r24, r8
    1776:	cb dd       	rcall	.-1130   	; 0x130e <prvBytesInBuffer>
    1778:	f4 01       	movw	r30, r8
    177a:	26 81       	ldd	r18, Z+6	; 0x06
    177c:	37 81       	ldd	r19, Z+7	; 0x07
    177e:	82 17       	cp	r24, r18
    1780:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1782:	a8 f0       	brcs	.+42     	; 0x17ae <xStreamBufferSend+0x156>
    1784:	90 d3       	rcall	.+1824   	; 0x1ea6 <vTaskSuspendAll>
    1786:	f4 01       	movw	r30, r8
    1788:	80 85       	ldd	r24, Z+8	; 0x08
    178a:	91 85       	ldd	r25, Z+9	; 0x09
    178c:	89 2b       	or	r24, r25
    178e:	71 f0       	breq	.+28     	; 0x17ac <xStreamBufferSend+0x154>
    1790:	80 85       	ldd	r24, Z+8	; 0x08
    1792:	91 85       	ldd	r25, Z+9	; 0x09
    1794:	e1 2c       	mov	r14, r1
    1796:	f1 2c       	mov	r15, r1
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	a9 01       	movw	r20, r18
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	0e 94 10 16 	call	0x2c20	; 0x2c20 <xTaskGenericNotify>
    17a6:	f4 01       	movw	r30, r8
    17a8:	11 86       	std	Z+9, r1	; 0x09
    17aa:	10 86       	std	Z+8, r1	; 0x08
    17ac:	bc d4       	rcall	.+2424   	; 0x2126 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    17ae:	c6 01       	movw	r24, r12
    17b0:	2b 96       	adiw	r28, 0x0b	; 11
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	4f 90       	pop	r4
    17dc:	3f 90       	pop	r3
    17de:	2f 90       	pop	r2
    17e0:	08 95       	ret

000017e2 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	ec 01       	movw	r28, r24
    17f8:	7b 01       	movw	r14, r22
    17fa:	5a 01       	movw	r10, r20
    17fc:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1800:	80 ff       	sbrs	r24, 0
    1802:	04 c0       	rjmp	.+8      	; 0x180c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1804:	8a 01       	movw	r16, r20
    1806:	0e 5f       	subi	r16, 0xFE	; 254
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	01 c0       	rjmp	.+2      	; 0x180e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    180c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    180e:	ce 01       	movw	r24, r28
    1810:	11 df       	rcall	.-478    	; 0x1634 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1812:	9c 01       	movw	r18, r24
    1814:	a5 01       	movw	r20, r10
    1816:	b7 01       	movw	r22, r14
    1818:	ce 01       	movw	r24, r28
    181a:	e5 dd       	rcall	.-1078   	; 0x13e6 <prvWriteMessageToBuffer>
    181c:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    181e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1820:	c1 f0       	breq	.+48     	; 0x1852 <xStreamBufferSendFromISR+0x70>
    1822:	ce 01       	movw	r24, r28
    1824:	74 dd       	rcall	.-1304   	; 0x130e <prvBytesInBuffer>
    1826:	2e 81       	ldd	r18, Y+6	; 0x06
    1828:	3f 81       	ldd	r19, Y+7	; 0x07
    182a:	82 17       	cp	r24, r18
    182c:	93 07       	cpc	r25, r19
    182e:	88 f0       	brcs	.+34     	; 0x1852 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1830:	88 85       	ldd	r24, Y+8	; 0x08
    1832:	99 85       	ldd	r25, Y+9	; 0x09
    1834:	89 2b       	or	r24, r25
    1836:	69 f0       	breq	.+26     	; 0x1852 <xStreamBufferSendFromISR+0x70>
    1838:	88 85       	ldd	r24, Y+8	; 0x08
    183a:	99 85       	ldd	r25, Y+9	; 0x09
    183c:	e1 2c       	mov	r14, r1
    183e:	f1 2c       	mov	r15, r1
    1840:	00 e0       	ldi	r16, 0x00	; 0
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	a9 01       	movw	r20, r18
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <xTaskGenericNotifyFromISR>
    184e:	19 86       	std	Y+9, r1	; 0x09
    1850:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1852:	c5 01       	movw	r24, r10
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	bf 90       	pop	r11
    1866:	af 90       	pop	r10
    1868:	08 95       	ret

0000186a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    186a:	4f 92       	push	r4
    186c:	5f 92       	push	r5
    186e:	6f 92       	push	r6
    1870:	7f 92       	push	r7
    1872:	8f 92       	push	r8
    1874:	9f 92       	push	r9
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	ec 01       	movw	r28, r24
    188c:	2b 01       	movw	r4, r22
    188e:	3a 01       	movw	r6, r20
    1890:	58 01       	movw	r10, r16
    1892:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1894:	8e 85       	ldd	r24, Y+14	; 0x0e
    1896:	80 ff       	sbrs	r24, 0
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    189a:	68 94       	set
    189c:	88 24       	eor	r8, r8
    189e:	81 f8       	bld	r8, 1
    18a0:	91 2c       	mov	r9, r1
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    18a4:	81 2c       	mov	r8, r1
    18a6:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    18a8:	a1 14       	cp	r10, r1
    18aa:	b1 04       	cpc	r11, r1
    18ac:	c1 04       	cpc	r12, r1
    18ae:	d1 04       	cpc	r13, r1
    18b0:	41 f1       	breq	.+80     	; 0x1902 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18b8:	ce 01       	movw	r24, r28
    18ba:	29 dd       	rcall	.-1454   	; 0x130e <prvBytesInBuffer>
    18bc:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    18be:	88 16       	cp	r8, r24
    18c0:	99 06       	cpc	r9, r25
    18c2:	48 f0       	brcs	.+18     	; 0x18d6 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 29 18 	call	0x3052	; 0x3052 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    18ce:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <xTaskGetCurrentTaskHandle>
    18d2:	99 87       	std	Y+9, r25	; 0x09
    18d4:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    18d6:	0f 90       	pop	r0
    18d8:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    18da:	8e 14       	cp	r8, r14
    18dc:	9f 04       	cpc	r9, r15
    18de:	a0 f0       	brcs	.+40     	; 0x1908 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    18e0:	e1 2c       	mov	r14, r1
    18e2:	f1 2c       	mov	r15, r1
    18e4:	00 e0       	ldi	r16, 0x00	; 0
    18e6:	10 e0       	ldi	r17, 0x00	; 0
    18e8:	98 01       	movw	r18, r16
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	ba 01       	movw	r22, r20
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    18f6:	19 86       	std	Y+9, r1	; 0x09
    18f8:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18fa:	ce 01       	movw	r24, r28
    18fc:	08 dd       	rcall	.-1520   	; 0x130e <prvBytesInBuffer>
    18fe:	7c 01       	movw	r14, r24
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1902:	ce 01       	movw	r24, r28
    1904:	04 dd       	rcall	.-1528   	; 0x130e <prvBytesInBuffer>
    1906:	7c 01       	movw	r14, r24
    1908:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    190a:	9f 04       	cpc	r9, r15
    190c:	e8 f4       	brcc	.+58     	; 0x1948 <xStreamBufferReceive+0xde>
    190e:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1910:	97 01       	movw	r18, r14
    1912:	a3 01       	movw	r20, r6
    1914:	b2 01       	movw	r22, r4
    1916:	ce 01       	movw	r24, r28
    1918:	f8 dd       	rcall	.-1040   	; 0x150a <prvReadMessageFromBuffer>
    191a:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    191c:	89 2b       	or	r24, r25
    191e:	b1 f0       	breq	.+44     	; 0x194c <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1920:	c2 d2       	rcall	.+1412   	; 0x1ea6 <vTaskSuspendAll>
    1922:	8a 85       	ldd	r24, Y+10	; 0x0a
    1924:	9b 85       	ldd	r25, Y+11	; 0x0b
    1926:	89 2b       	or	r24, r25
    1928:	69 f0       	breq	.+26     	; 0x1944 <xStreamBufferReceive+0xda>
    192a:	8a 85       	ldd	r24, Y+10	; 0x0a
    192c:	9b 85       	ldd	r25, Y+11	; 0x0b
    192e:	e1 2c       	mov	r14, r1
    1930:	f1 2c       	mov	r15, r1
    1932:	00 e0       	ldi	r16, 0x00	; 0
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	a9 01       	movw	r20, r18
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <xTaskGenericNotify>
    1940:	1b 86       	std	Y+11, r1	; 0x0b
    1942:	1a 86       	std	Y+10, r1	; 0x0a
    1944:	f0 d3       	rcall	.+2016   	; 0x2126 <xTaskResumeAll>
    1946:	02 c0       	rjmp	.+4      	; 0x194c <xStreamBufferReceive+0xe2>
    1948:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    194a:	d1 2c       	mov	r13, r1
    194c:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	9f 90       	pop	r9
    1964:	8f 90       	pop	r8
    1966:	7f 90       	pop	r7
    1968:	6f 90       	pop	r6
    196a:	5f 90       	pop	r5
    196c:	4f 90       	pop	r4
    196e:	08 95       	ret

00001970 <prvResetNextTaskUnblockTime>:
    1970:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    1974:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    1978:	80 81       	ld	r24, Z
    197a:	81 11       	cpse	r24, r1
    197c:	0c c0       	rjmp	.+24     	; 0x1996 <prvResetNextTaskUnblockTime+0x26>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	9f ef       	ldi	r25, 0xFF	; 255
    1982:	dc 01       	movw	r26, r24
    1984:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <xNextTaskUnblockTime>
    1988:	90 93 3a 18 	sts	0x183A, r25	; 0x80183a <xNextTaskUnblockTime+0x1>
    198c:	a0 93 3b 18 	sts	0x183B, r26	; 0x80183b <xNextTaskUnblockTime+0x2>
    1990:	b0 93 3c 18 	sts	0x183C, r27	; 0x80183c <xNextTaskUnblockTime+0x3>
    1994:	08 95       	ret
    1996:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    199a:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    199e:	07 80       	ldd	r0, Z+7	; 0x07
    19a0:	f0 85       	ldd	r31, Z+8	; 0x08
    19a2:	e0 2d       	mov	r30, r0
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	a2 81       	ldd	r26, Z+2	; 0x02
    19aa:	b3 81       	ldd	r27, Z+3	; 0x03
    19ac:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <xNextTaskUnblockTime>
    19b0:	90 93 3a 18 	sts	0x183A, r25	; 0x80183a <xNextTaskUnblockTime+0x1>
    19b4:	a0 93 3b 18 	sts	0x183B, r26	; 0x80183b <xNextTaskUnblockTime+0x2>
    19b8:	b0 93 3c 18 	sts	0x183C, r27	; 0x80183c <xNextTaskUnblockTime+0x3>
    19bc:	08 95       	ret

000019be <prvDeleteTCB>:
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	ec 01       	movw	r28, r24
    19c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c8:	0e 94 de 04 	call	0x9bc	; 0x9bc <vPortFree>
    19cc:	ce 01       	movw	r24, r28
    19ce:	0e 94 de 04 	call	0x9bc	; 0x9bc <vPortFree>
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <prvInitialiseNewTask>:
    19d8:	4f 92       	push	r4
    19da:	5f 92       	push	r5
    19dc:	6f 92       	push	r6
    19de:	7f 92       	push	r7
    19e0:	8f 92       	push	r8
    19e2:	9f 92       	push	r9
    19e4:	af 92       	push	r10
    19e6:	bf 92       	push	r11
    19e8:	cf 92       	push	r12
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	2c 01       	movw	r4, r24
    19f8:	5b 01       	movw	r10, r22
    19fa:	4a 01       	movw	r8, r20
    19fc:	39 01       	movw	r6, r18
    19fe:	e6 01       	movw	r28, r12
    1a00:	65 ea       	ldi	r22, 0xA5	; 165
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a08:	0e 94 9c 33 	call	0x6738	; 0x6738 <memset>
    1a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a10:	21 e0       	ldi	r18, 0x01	; 1
    1a12:	82 1a       	sub	r8, r18
    1a14:	91 08       	sbc	r9, r1
    1a16:	88 0e       	add	r8, r24
    1a18:	99 1e       	adc	r9, r25
    1a1a:	a1 14       	cp	r10, r1
    1a1c:	b1 04       	cpc	r11, r1
    1a1e:	89 f4       	brne	.+34     	; 0x1a42 <prvInitialiseNewTask+0x6a>
    1a20:	15 c0       	rjmp	.+42     	; 0x1a4c <prvInitialiseNewTask+0x74>
    1a22:	82 2f       	mov	r24, r18
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	f5 01       	movw	r30, r10
    1a28:	e8 0f       	add	r30, r24
    1a2a:	f9 1f       	adc	r31, r25
    1a2c:	30 81       	ld	r19, Z
    1a2e:	de 01       	movw	r26, r28
    1a30:	a8 0f       	add	r26, r24
    1a32:	b9 1f       	adc	r27, r25
    1a34:	5d 96       	adiw	r26, 0x1d	; 29
    1a36:	3c 93       	st	X, r19
    1a38:	80 81       	ld	r24, Z
    1a3a:	88 23       	and	r24, r24
    1a3c:	29 f0       	breq	.+10     	; 0x1a48 <prvInitialiseNewTask+0x70>
    1a3e:	2f 5f       	subi	r18, 0xFF	; 255
    1a40:	01 c0       	rjmp	.+2      	; 0x1a44 <prvInitialiseNewTask+0x6c>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	20 31       	cpi	r18, 0x10	; 16
    1a46:	68 f3       	brcs	.-38     	; 0x1a22 <prvInitialiseNewTask+0x4a>
    1a48:	1c a6       	std	Y+44, r1	; 0x2c
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <prvInitialiseNewTask+0x76>
    1a4c:	1d 8e       	std	Y+29, r1	; 0x1d
    1a4e:	0a 30       	cpi	r16, 0x0A	; 10
    1a50:	08 f0       	brcs	.+2      	; 0x1a54 <prvInitialiseNewTask+0x7c>
    1a52:	09 e0       	ldi	r16, 0x09	; 9
    1a54:	0a 8f       	std	Y+26, r16	; 0x1a
    1a56:	0d a7       	std	Y+45, r16	; 0x2d
    1a58:	1e a6       	std	Y+46, r1	; 0x2e
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	02 96       	adiw	r24, 0x02	; 2
    1a5e:	0e 94 2c 05 	call	0xa58	; 0xa58 <vListInitialiseItem>
    1a62:	ce 01       	movw	r24, r28
    1a64:	0e 96       	adiw	r24, 0x0e	; 14
    1a66:	0e 94 2c 05 	call	0xa58	; 0xa58 <vListInitialiseItem>
    1a6a:	db 87       	std	Y+11, r29	; 0x0b
    1a6c:	ca 87       	std	Y+10, r28	; 0x0a
    1a6e:	8a e0       	ldi	r24, 0x0A	; 10
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e0       	ldi	r26, 0x00	; 0
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	80 1b       	sub	r24, r16
    1a78:	91 09       	sbc	r25, r1
    1a7a:	a1 09       	sbc	r26, r1
    1a7c:	b1 09       	sbc	r27, r1
    1a7e:	8e 87       	std	Y+14, r24	; 0x0e
    1a80:	9f 87       	std	Y+15, r25	; 0x0f
    1a82:	a8 8b       	std	Y+16, r26	; 0x10
    1a84:	b9 8b       	std	Y+17, r27	; 0x11
    1a86:	df 8b       	std	Y+23, r29	; 0x17
    1a88:	ce 8b       	std	Y+22, r28	; 0x16
    1a8a:	84 e0       	ldi	r24, 0x04	; 4
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	bf 96       	adiw	r30, 0x2f	; 47
    1a90:	df 01       	movw	r26, r30
    1a92:	1d 92       	st	X+, r1
    1a94:	8a 95       	dec	r24
    1a96:	e9 f7       	brne	.-6      	; 0x1a92 <prvInitialiseNewTask+0xba>
    1a98:	1b aa       	std	Y+51, r1	; 0x33
    1a9a:	a3 01       	movw	r20, r6
    1a9c:	b2 01       	movw	r22, r4
    1a9e:	c4 01       	movw	r24, r8
    1aa0:	4f d8       	rcall	.-3938   	; 0xb40 <pxPortInitialiseStack>
    1aa2:	99 83       	std	Y+1, r25	; 0x01
    1aa4:	88 83       	st	Y, r24
    1aa6:	e1 14       	cp	r14, r1
    1aa8:	f1 04       	cpc	r15, r1
    1aaa:	19 f0       	breq	.+6      	; 0x1ab2 <prvInitialiseNewTask+0xda>
    1aac:	f7 01       	movw	r30, r14
    1aae:	d1 83       	std	Z+1, r29	; 0x01
    1ab0:	c0 83       	st	Z, r28
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	df 90       	pop	r13
    1abe:	cf 90       	pop	r12
    1ac0:	bf 90       	pop	r11
    1ac2:	af 90       	pop	r10
    1ac4:	9f 90       	pop	r9
    1ac6:	8f 90       	pop	r8
    1ac8:	7f 90       	pop	r7
    1aca:	6f 90       	pop	r6
    1acc:	5f 90       	pop	r5
    1ace:	4f 90       	pop	r4
    1ad0:	08 95       	ret

00001ad2 <prvInitialiseTaskLists>:
    1ad2:	cf 93       	push	r28
    1ad4:	c0 e0       	ldi	r28, 0x00	; 0
    1ad6:	09 c0       	rjmp	.+18     	; 0x1aea <prvInitialiseTaskLists+0x18>
    1ad8:	2b e0       	ldi	r18, 0x0B	; 11
    1ada:	c2 9f       	mul	r28, r18
    1adc:	c0 01       	movw	r24, r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	89 57       	subi	r24, 0x79	; 121
    1ae2:	97 4e       	sbci	r25, 0xE7	; 231
    1ae4:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1ae8:	cf 5f       	subi	r28, 0xFF	; 255
    1aea:	ca 30       	cpi	r28, 0x0A	; 10
    1aec:	a8 f3       	brcs	.-22     	; 0x1ad8 <prvInitialiseTaskLists+0x6>
    1aee:	8c e7       	ldi	r24, 0x7C	; 124
    1af0:	98 e1       	ldi	r25, 0x18	; 24
    1af2:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1af6:	81 e7       	ldi	r24, 0x71	; 113
    1af8:	98 e1       	ldi	r25, 0x18	; 24
    1afa:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1afe:	82 e6       	ldi	r24, 0x62	; 98
    1b00:	98 e1       	ldi	r25, 0x18	; 24
    1b02:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1b06:	87 e5       	ldi	r24, 0x57	; 87
    1b08:	98 e1       	ldi	r25, 0x18	; 24
    1b0a:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1b0e:	8b e4       	ldi	r24, 0x4B	; 75
    1b10:	98 e1       	ldi	r25, 0x18	; 24
    1b12:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1b16:	8c e7       	ldi	r24, 0x7C	; 124
    1b18:	98 e1       	ldi	r25, 0x18	; 24
    1b1a:	90 93 70 18 	sts	0x1870, r25	; 0x801870 <pxDelayedTaskList+0x1>
    1b1e:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <pxDelayedTaskList>
    1b22:	81 e7       	ldi	r24, 0x71	; 113
    1b24:	98 e1       	ldi	r25, 0x18	; 24
    1b26:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    1b2a:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    1b2e:	cf 91       	pop	r28
    1b30:	08 95       	ret

00001b32 <prvAddNewTaskToReadyList>:
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	ec 01       	movw	r28, r24
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	0f 92       	push	r0
    1b3e:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    1b42:	8f 5f       	subi	r24, 0xFF	; 255
    1b44:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
    1b48:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1b4c:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1b50:	89 2b       	or	r24, r25
    1b52:	51 f4       	brne	.+20     	; 0x1b68 <prvAddNewTaskToReadyList+0x36>
    1b54:	d0 93 f6 18 	sts	0x18F6, r29	; 0x8018f6 <pxCurrentTCB+0x1>
    1b58:	c0 93 f5 18 	sts	0x18F5, r28	; 0x8018f5 <pxCurrentTCB>
    1b5c:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	91 f4       	brne	.+36     	; 0x1b88 <prvAddNewTaskToReadyList+0x56>
    1b64:	b6 df       	rcall	.-148    	; 0x1ad2 <prvInitialiseTaskLists>
    1b66:	10 c0       	rjmp	.+32     	; 0x1b88 <prvAddNewTaskToReadyList+0x56>
    1b68:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	0c c0       	rjmp	.+24     	; 0x1b88 <prvAddNewTaskToReadyList+0x56>
    1b70:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1b74:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1b78:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b7c:	89 17       	cp	r24, r25
    1b7e:	20 f0       	brcs	.+8      	; 0x1b88 <prvAddNewTaskToReadyList+0x56>
    1b80:	d0 93 f6 18 	sts	0x18F6, r29	; 0x8018f6 <pxCurrentTCB+0x1>
    1b84:	c0 93 f5 18 	sts	0x18F5, r28	; 0x8018f5 <pxCurrentTCB>
    1b88:	80 91 3d 18 	lds	r24, 0x183D	; 0x80183d <uxTaskNumber>
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	80 93 3d 18 	sts	0x183D, r24	; 0x80183d <uxTaskNumber>
    1b92:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b94:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    1b98:	8e 17       	cp	r24, r30
    1b9a:	10 f4       	brcc	.+4      	; 0x1ba0 <prvAddNewTaskToReadyList+0x6e>
    1b9c:	e0 93 45 18 	sts	0x1845, r30	; 0x801845 <uxTopReadyPriority>
    1ba0:	8b e0       	ldi	r24, 0x0B	; 11
    1ba2:	8e 9f       	mul	r24, r30
    1ba4:	f0 01       	movw	r30, r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	e9 57       	subi	r30, 0x79	; 121
    1baa:	f7 4e       	sbci	r31, 0xE7	; 231
    1bac:	01 80       	ldd	r0, Z+1	; 0x01
    1bae:	f2 81       	ldd	r31, Z+2	; 0x02
    1bb0:	e0 2d       	mov	r30, r0
    1bb2:	ff 83       	std	Y+7, r31	; 0x07
    1bb4:	ee 83       	std	Y+6, r30	; 0x06
    1bb6:	26 81       	ldd	r18, Z+6	; 0x06
    1bb8:	37 81       	ldd	r19, Z+7	; 0x07
    1bba:	39 87       	std	Y+9, r19	; 0x09
    1bbc:	28 87       	std	Y+8, r18	; 0x08
    1bbe:	a6 81       	ldd	r26, Z+6	; 0x06
    1bc0:	b7 81       	ldd	r27, Z+7	; 0x07
    1bc2:	9e 01       	movw	r18, r28
    1bc4:	2e 5f       	subi	r18, 0xFE	; 254
    1bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc8:	15 96       	adiw	r26, 0x05	; 5
    1bca:	3c 93       	st	X, r19
    1bcc:	2e 93       	st	-X, r18
    1bce:	14 97       	sbiw	r26, 0x04	; 4
    1bd0:	37 83       	std	Z+7, r19	; 0x07
    1bd2:	26 83       	std	Z+6, r18	; 0x06
    1bd4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bd6:	8e 9f       	mul	r24, r30
    1bd8:	f0 01       	movw	r30, r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	e9 57       	subi	r30, 0x79	; 121
    1bde:	f7 4e       	sbci	r31, 0xE7	; 231
    1be0:	fd 87       	std	Y+13, r31	; 0x0d
    1be2:	ec 87       	std	Y+12, r30	; 0x0c
    1be4:	80 81       	ld	r24, Z
    1be6:	8f 5f       	subi	r24, 0xFF	; 255
    1be8:	80 83       	st	Z, r24
    1bea:	0f 90       	pop	r0
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    1bf2:	88 23       	and	r24, r24
    1bf4:	51 f0       	breq	.+20     	; 0x1c0a <prvAddNewTaskToReadyList+0xd8>
    1bf6:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1bfa:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1bfe:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c00:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c02:	98 17       	cp	r25, r24
    1c04:	10 f4       	brcc	.+4      	; 0x1c0a <prvAddNewTaskToReadyList+0xd8>
    1c06:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <prvCheckTasksWaitingTermination>:
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	1b c0       	rjmp	.+54     	; 0x1c4c <prvCheckTasksWaitingTermination+0x3c>
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	0f 92       	push	r0
    1c1c:	e0 91 5e 18 	lds	r30, 0x185E	; 0x80185e <xTasksWaitingTermination+0x7>
    1c20:	f0 91 5f 18 	lds	r31, 0x185F	; 0x80185f <xTasksWaitingTermination+0x8>
    1c24:	c0 85       	ldd	r28, Z+8	; 0x08
    1c26:	d1 85       	ldd	r29, Z+9	; 0x09
    1c28:	ce 01       	movw	r24, r28
    1c2a:	02 96       	adiw	r24, 0x02	; 2
    1c2c:	0e 94 6d 05 	call	0xada	; 0xada <uxListRemove>
    1c30:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    1c34:	81 50       	subi	r24, 0x01	; 1
    1c36:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <uxCurrentNumberOfTasks>
    1c3a:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
    1c3e:	81 50       	subi	r24, 0x01	; 1
    1c40:	80 93 56 18 	sts	0x1856, r24	; 0x801856 <uxDeletedTasksWaitingCleanUp>
    1c44:	0f 90       	pop	r0
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	ce 01       	movw	r24, r28
    1c4a:	b9 de       	rcall	.-654    	; 0x19be <prvDeleteTCB>
    1c4c:	80 91 56 18 	lds	r24, 0x1856	; 0x801856 <uxDeletedTasksWaitingCleanUp>
    1c50:	81 11       	cpse	r24, r1
    1c52:	e1 cf       	rjmp	.-62     	; 0x1c16 <prvCheckTasksWaitingTermination+0x6>
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <prvAddCurrentTaskToDelayedList>:
    1c5a:	8f 92       	push	r8
    1c5c:	9f 92       	push	r9
    1c5e:	af 92       	push	r10
    1c60:	bf 92       	push	r11
    1c62:	cf 92       	push	r12
    1c64:	df 92       	push	r13
    1c66:	ef 92       	push	r14
    1c68:	ff 92       	push	r15
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	6b 01       	movw	r12, r22
    1c70:	7c 01       	movw	r14, r24
    1c72:	c4 2f       	mov	r28, r20
    1c74:	80 90 46 18 	lds	r8, 0x1846	; 0x801846 <xTickCount>
    1c78:	90 90 47 18 	lds	r9, 0x1847	; 0x801847 <xTickCount+0x1>
    1c7c:	a0 90 48 18 	lds	r10, 0x1848	; 0x801848 <xTickCount+0x2>
    1c80:	b0 90 49 18 	lds	r11, 0x1849	; 0x801849 <xTickCount+0x3>
    1c84:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1c88:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1c8c:	02 96       	adiw	r24, 0x02	; 2
    1c8e:	0e 94 6d 05 	call	0xada	; 0xada <uxListRemove>
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	c8 16       	cp	r12, r24
    1c96:	d8 06       	cpc	r13, r24
    1c98:	e8 06       	cpc	r14, r24
    1c9a:	f8 06       	cpc	r15, r24
    1c9c:	b1 f5       	brne	.+108    	; 0x1d0a <prvAddCurrentTaskToDelayedList+0xb0>
    1c9e:	cc 23       	and	r28, r28
    1ca0:	a1 f1       	breq	.+104    	; 0x1d0a <prvAddCurrentTaskToDelayedList+0xb0>
    1ca2:	eb e4       	ldi	r30, 0x4B	; 75
    1ca4:	f8 e1       	ldi	r31, 0x18	; 24
    1ca6:	a1 81       	ldd	r26, Z+1	; 0x01
    1ca8:	b2 81       	ldd	r27, Z+2	; 0x02
    1caa:	c0 91 f5 18 	lds	r28, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1cae:	d0 91 f6 18 	lds	r29, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1cb2:	bf 83       	std	Y+7, r27	; 0x07
    1cb4:	ae 83       	std	Y+6, r26	; 0x06
    1cb6:	c0 91 f5 18 	lds	r28, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1cba:	d0 91 f6 18 	lds	r29, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1cbe:	16 96       	adiw	r26, 0x06	; 6
    1cc0:	8d 91       	ld	r24, X+
    1cc2:	9c 91       	ld	r25, X
    1cc4:	17 97       	sbiw	r26, 0x07	; 7
    1cc6:	99 87       	std	Y+9, r25	; 0x09
    1cc8:	88 87       	std	Y+8, r24	; 0x08
    1cca:	16 96       	adiw	r26, 0x06	; 6
    1ccc:	cd 91       	ld	r28, X+
    1cce:	dc 91       	ld	r29, X
    1cd0:	17 97       	sbiw	r26, 0x07	; 7
    1cd2:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1cd6:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1cda:	02 96       	adiw	r24, 0x02	; 2
    1cdc:	9d 83       	std	Y+5, r25	; 0x05
    1cde:	8c 83       	std	Y+4, r24	; 0x04
    1ce0:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1ce4:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1ce8:	02 96       	adiw	r24, 0x02	; 2
    1cea:	17 96       	adiw	r26, 0x07	; 7
    1cec:	9c 93       	st	X, r25
    1cee:	8e 93       	st	-X, r24
    1cf0:	16 97       	sbiw	r26, 0x06	; 6
    1cf2:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1cf6:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1cfa:	1d 96       	adiw	r26, 0x0d	; 13
    1cfc:	fc 93       	st	X, r31
    1cfe:	ee 93       	st	-X, r30
    1d00:	1c 97       	sbiw	r26, 0x0c	; 12
    1d02:	80 81       	ld	r24, Z
    1d04:	8f 5f       	subi	r24, 0xFF	; 255
    1d06:	80 83       	st	Z, r24
    1d08:	3f c0       	rjmp	.+126    	; 0x1d88 <prvAddCurrentTaskToDelayedList+0x12e>
    1d0a:	c8 0c       	add	r12, r8
    1d0c:	d9 1c       	adc	r13, r9
    1d0e:	ea 1c       	adc	r14, r10
    1d10:	fb 1c       	adc	r15, r11
    1d12:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1d16:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1d1a:	c2 82       	std	Z+2, r12	; 0x02
    1d1c:	d3 82       	std	Z+3, r13	; 0x03
    1d1e:	e4 82       	std	Z+4, r14	; 0x04
    1d20:	f5 82       	std	Z+5, r15	; 0x05
    1d22:	c8 14       	cp	r12, r8
    1d24:	d9 04       	cpc	r13, r9
    1d26:	ea 04       	cpc	r14, r10
    1d28:	fb 04       	cpc	r15, r11
    1d2a:	68 f4       	brcc	.+26     	; 0x1d46 <prvAddCurrentTaskToDelayedList+0xec>
    1d2c:	60 91 f5 18 	lds	r22, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1d30:	70 91 f6 18 	lds	r23, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1d34:	80 91 6d 18 	lds	r24, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    1d38:	90 91 6e 18 	lds	r25, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    1d3c:	6e 5f       	subi	r22, 0xFE	; 254
    1d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d40:	0e 94 30 05 	call	0xa60	; 0xa60 <vListInsert>
    1d44:	21 c0       	rjmp	.+66     	; 0x1d88 <prvAddCurrentTaskToDelayedList+0x12e>
    1d46:	60 91 f5 18 	lds	r22, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    1d4a:	70 91 f6 18 	lds	r23, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    1d4e:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    1d52:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    1d56:	6e 5f       	subi	r22, 0xFE	; 254
    1d58:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5a:	0e 94 30 05 	call	0xa60	; 0xa60 <vListInsert>
    1d5e:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <xNextTaskUnblockTime>
    1d62:	90 91 3a 18 	lds	r25, 0x183A	; 0x80183a <xNextTaskUnblockTime+0x1>
    1d66:	a0 91 3b 18 	lds	r26, 0x183B	; 0x80183b <xNextTaskUnblockTime+0x2>
    1d6a:	b0 91 3c 18 	lds	r27, 0x183C	; 0x80183c <xNextTaskUnblockTime+0x3>
    1d6e:	c8 16       	cp	r12, r24
    1d70:	d9 06       	cpc	r13, r25
    1d72:	ea 06       	cpc	r14, r26
    1d74:	fb 06       	cpc	r15, r27
    1d76:	40 f4       	brcc	.+16     	; 0x1d88 <prvAddCurrentTaskToDelayedList+0x12e>
    1d78:	c0 92 39 18 	sts	0x1839, r12	; 0x801839 <xNextTaskUnblockTime>
    1d7c:	d0 92 3a 18 	sts	0x183A, r13	; 0x80183a <xNextTaskUnblockTime+0x1>
    1d80:	e0 92 3b 18 	sts	0x183B, r14	; 0x80183b <xNextTaskUnblockTime+0x2>
    1d84:	f0 92 3c 18 	sts	0x183C, r15	; 0x80183c <xNextTaskUnblockTime+0x3>
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	bf 90       	pop	r11
    1d96:	af 90       	pop	r10
    1d98:	9f 90       	pop	r9
    1d9a:	8f 90       	pop	r8
    1d9c:	08 95       	ret

00001d9e <xTaskCreate>:
    1d9e:	2f 92       	push	r2
    1da0:	3f 92       	push	r3
    1da2:	4f 92       	push	r4
    1da4:	5f 92       	push	r5
    1da6:	6f 92       	push	r6
    1da8:	7f 92       	push	r7
    1daa:	8f 92       	push	r8
    1dac:	9f 92       	push	r9
    1dae:	af 92       	push	r10
    1db0:	bf 92       	push	r11
    1db2:	cf 92       	push	r12
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	3c 01       	movw	r6, r24
    1dc2:	1b 01       	movw	r2, r22
    1dc4:	4a 01       	movw	r8, r20
    1dc6:	29 01       	movw	r4, r18
    1dc8:	ca 01       	movw	r24, r20
    1dca:	0e 94 35 04 	call	0x86a	; 0x86a <pvPortMalloc>
    1dce:	6c 01       	movw	r12, r24
    1dd0:	89 2b       	or	r24, r25
    1dd2:	71 f0       	breq	.+28     	; 0x1df0 <xTaskCreate+0x52>
    1dd4:	84 e3       	ldi	r24, 0x34	; 52
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0e 94 35 04 	call	0x86a	; 0x86a <pvPortMalloc>
    1ddc:	ec 01       	movw	r28, r24
    1dde:	89 2b       	or	r24, r25
    1de0:	19 f0       	breq	.+6      	; 0x1de8 <xTaskCreate+0x4a>
    1de2:	dc 8e       	std	Y+28, r13	; 0x1c
    1de4:	cb 8e       	std	Y+27, r12	; 0x1b
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <xTaskCreate+0x56>
    1de8:	c6 01       	movw	r24, r12
    1dea:	0e 94 de 04 	call	0x9bc	; 0x9bc <vPortFree>
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <xTaskCreate+0x56>
    1df0:	c0 e0       	ldi	r28, 0x00	; 0
    1df2:	d0 e0       	ldi	r29, 0x00	; 0
    1df4:	20 97       	sbiw	r28, 0x00	; 0
    1df6:	61 f0       	breq	.+24     	; 0x1e10 <xTaskCreate+0x72>
    1df8:	a1 2c       	mov	r10, r1
    1dfa:	b1 2c       	mov	r11, r1
    1dfc:	6e 01       	movw	r12, r28
    1dfe:	92 01       	movw	r18, r4
    1e00:	a4 01       	movw	r20, r8
    1e02:	b1 01       	movw	r22, r2
    1e04:	c3 01       	movw	r24, r6
    1e06:	e8 dd       	rcall	.-1072   	; 0x19d8 <prvInitialiseNewTask>
    1e08:	ce 01       	movw	r24, r28
    1e0a:	93 de       	rcall	.-730    	; 0x1b32 <prvAddNewTaskToReadyList>
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <xTaskCreate+0x74>
    1e10:	8f ef       	ldi	r24, 0xFF	; 255
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	9f 90       	pop	r9
    1e26:	8f 90       	pop	r8
    1e28:	7f 90       	pop	r7
    1e2a:	6f 90       	pop	r6
    1e2c:	5f 90       	pop	r5
    1e2e:	4f 90       	pop	r4
    1e30:	3f 90       	pop	r3
    1e32:	2f 90       	pop	r2
    1e34:	08 95       	ret

00001e36 <vTaskStartScheduler>:
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	0f 2e       	mov	r0, r31
    1e3e:	f7 e3       	ldi	r31, 0x37	; 55
    1e40:	ef 2e       	mov	r14, r31
    1e42:	f8 e1       	ldi	r31, 0x18	; 24
    1e44:	ff 2e       	mov	r15, r31
    1e46:	f0 2d       	mov	r31, r0
    1e48:	00 e0       	ldi	r16, 0x00	; 0
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 ec       	ldi	r20, 0xC0	; 192
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	60 e1       	ldi	r22, 0x10	; 16
    1e54:	73 e0       	ldi	r23, 0x03	; 3
    1e56:	8e e4       	ldi	r24, 0x4E	; 78
    1e58:	91 e0       	ldi	r25, 0x01	; 1
    1e5a:	a1 df       	rcall	.-190    	; 0x1d9e <xTaskCreate>
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	11 f4       	brne	.+4      	; 0x1e64 <vTaskStartScheduler+0x2e>
    1e60:	0e 94 cd 18 	call	0x319a	; 0x319a <xTimerCreateTimerTask>
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	c9 f4       	brne	.+50     	; 0x1e9a <vTaskStartScheduler+0x64>
    1e68:	f8 94       	cli
    1e6a:	8f ef       	ldi	r24, 0xFF	; 255
    1e6c:	9f ef       	ldi	r25, 0xFF	; 255
    1e6e:	dc 01       	movw	r26, r24
    1e70:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <xNextTaskUnblockTime>
    1e74:	90 93 3a 18 	sts	0x183A, r25	; 0x80183a <xNextTaskUnblockTime+0x1>
    1e78:	a0 93 3b 18 	sts	0x183B, r26	; 0x80183b <xNextTaskUnblockTime+0x2>
    1e7c:	b0 93 3c 18 	sts	0x183C, r27	; 0x80183c <xNextTaskUnblockTime+0x3>
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	80 93 44 18 	sts	0x1844, r24	; 0x801844 <xSchedulerRunning>
    1e86:	10 92 46 18 	sts	0x1846, r1	; 0x801846 <xTickCount>
    1e8a:	10 92 47 18 	sts	0x1847, r1	; 0x801847 <xTickCount+0x1>
    1e8e:	10 92 48 18 	sts	0x1848, r1	; 0x801848 <xTickCount+0x2>
    1e92:	10 92 49 18 	sts	0x1849, r1	; 0x801849 <xTickCount+0x3>
    1e96:	0e 94 b7 05 	call	0xb6e	; 0xb6e <xPortStartScheduler>
    1e9a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	08 95       	ret

00001ea6 <vTaskSuspendAll>:
    1ea6:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <uxSchedulerSuspended>
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <uxSchedulerSuspended>
    1eb0:	08 95       	ret

00001eb2 <xTaskGetTickCount>:
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	0f 92       	push	r0
    1eb8:	60 91 46 18 	lds	r22, 0x1846	; 0x801846 <xTickCount>
    1ebc:	70 91 47 18 	lds	r23, 0x1847	; 0x801847 <xTickCount+0x1>
    1ec0:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <xTickCount+0x2>
    1ec4:	90 91 49 18 	lds	r25, 0x1849	; 0x801849 <xTickCount+0x3>
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	08 95       	ret

00001ece <xTaskIncrementTick>:
    1ece:	cf 92       	push	r12
    1ed0:	df 92       	push	r13
    1ed2:	ef 92       	push	r14
    1ed4:	ff 92       	push	r15
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <uxSchedulerSuspended>
    1ede:	81 11       	cpse	r24, r1
    1ee0:	05 c1       	rjmp	.+522    	; 0x20ec <__DATA_REGION_LENGTH__+0xec>
    1ee2:	c0 90 46 18 	lds	r12, 0x1846	; 0x801846 <xTickCount>
    1ee6:	d0 90 47 18 	lds	r13, 0x1847	; 0x801847 <xTickCount+0x1>
    1eea:	e0 90 48 18 	lds	r14, 0x1848	; 0x801848 <xTickCount+0x2>
    1eee:	f0 90 49 18 	lds	r15, 0x1849	; 0x801849 <xTickCount+0x3>
    1ef2:	8f ef       	ldi	r24, 0xFF	; 255
    1ef4:	c8 1a       	sub	r12, r24
    1ef6:	d8 0a       	sbc	r13, r24
    1ef8:	e8 0a       	sbc	r14, r24
    1efa:	f8 0a       	sbc	r15, r24
    1efc:	c0 92 46 18 	sts	0x1846, r12	; 0x801846 <xTickCount>
    1f00:	d0 92 47 18 	sts	0x1847, r13	; 0x801847 <xTickCount+0x1>
    1f04:	e0 92 48 18 	sts	0x1848, r14	; 0x801848 <xTickCount+0x2>
    1f08:	f0 92 49 18 	sts	0x1849, r15	; 0x801849 <xTickCount+0x3>
    1f0c:	c1 14       	cp	r12, r1
    1f0e:	d1 04       	cpc	r13, r1
    1f10:	e1 04       	cpc	r14, r1
    1f12:	f1 04       	cpc	r15, r1
    1f14:	b1 f4       	brne	.+44     	; 0x1f42 <xTaskIncrementTick+0x74>
    1f16:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <pxDelayedTaskList>
    1f1a:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    1f1e:	20 91 6d 18 	lds	r18, 0x186D	; 0x80186d <pxOverflowDelayedTaskList>
    1f22:	30 91 6e 18 	lds	r19, 0x186E	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    1f26:	30 93 70 18 	sts	0x1870, r19	; 0x801870 <pxDelayedTaskList+0x1>
    1f2a:	20 93 6f 18 	sts	0x186F, r18	; 0x80186f <pxDelayedTaskList>
    1f2e:	90 93 6e 18 	sts	0x186E, r25	; 0x80186e <pxOverflowDelayedTaskList+0x1>
    1f32:	80 93 6d 18 	sts	0x186D, r24	; 0x80186d <pxOverflowDelayedTaskList>
    1f36:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <xNumOfOverflows>
    1f3a:	8f 5f       	subi	r24, 0xFF	; 255
    1f3c:	80 93 3e 18 	sts	0x183E, r24	; 0x80183e <xNumOfOverflows>
    1f40:	17 dd       	rcall	.-1490   	; 0x1970 <prvResetNextTaskUnblockTime>
    1f42:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <xNextTaskUnblockTime>
    1f46:	90 91 3a 18 	lds	r25, 0x183A	; 0x80183a <xNextTaskUnblockTime+0x1>
    1f4a:	a0 91 3b 18 	lds	r26, 0x183B	; 0x80183b <xNextTaskUnblockTime+0x2>
    1f4e:	b0 91 3c 18 	lds	r27, 0x183C	; 0x80183c <xNextTaskUnblockTime+0x3>
    1f52:	c8 16       	cp	r12, r24
    1f54:	d9 06       	cpc	r13, r25
    1f56:	ea 06       	cpc	r14, r26
    1f58:	fb 06       	cpc	r15, r27
    1f5a:	20 f4       	brcc	.+8      	; 0x1f64 <xTaskIncrementTick+0x96>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	b2 c0       	rjmp	.+356    	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	01 c0       	rjmp	.+2      	; 0x1f66 <xTaskIncrementTick+0x98>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    1f6a:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    1f6e:	90 81       	ld	r25, Z
    1f70:	91 11       	cpse	r25, r1
    1f72:	0c c0       	rjmp	.+24     	; 0x1f8c <xTaskIncrementTick+0xbe>
    1f74:	4f ef       	ldi	r20, 0xFF	; 255
    1f76:	5f ef       	ldi	r21, 0xFF	; 255
    1f78:	ba 01       	movw	r22, r20
    1f7a:	40 93 39 18 	sts	0x1839, r20	; 0x801839 <xNextTaskUnblockTime>
    1f7e:	50 93 3a 18 	sts	0x183A, r21	; 0x80183a <xNextTaskUnblockTime+0x1>
    1f82:	60 93 3b 18 	sts	0x183B, r22	; 0x80183b <xNextTaskUnblockTime+0x2>
    1f86:	70 93 3c 18 	sts	0x183C, r23	; 0x80183c <xNextTaskUnblockTime+0x3>
    1f8a:	9c c0       	rjmp	.+312    	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    1f8c:	e0 91 6f 18 	lds	r30, 0x186F	; 0x80186f <pxDelayedTaskList>
    1f90:	f0 91 70 18 	lds	r31, 0x1870	; 0x801870 <pxDelayedTaskList+0x1>
    1f94:	07 80       	ldd	r0, Z+7	; 0x07
    1f96:	f0 85       	ldd	r31, Z+8	; 0x08
    1f98:	e0 2d       	mov	r30, r0
    1f9a:	00 84       	ldd	r0, Z+8	; 0x08
    1f9c:	f1 85       	ldd	r31, Z+9	; 0x09
    1f9e:	e0 2d       	mov	r30, r0
    1fa0:	42 81       	ldd	r20, Z+2	; 0x02
    1fa2:	53 81       	ldd	r21, Z+3	; 0x03
    1fa4:	64 81       	ldd	r22, Z+4	; 0x04
    1fa6:	75 81       	ldd	r23, Z+5	; 0x05
    1fa8:	c4 16       	cp	r12, r20
    1faa:	d5 06       	cpc	r13, r21
    1fac:	e6 06       	cpc	r14, r22
    1fae:	f7 06       	cpc	r15, r23
    1fb0:	48 f4       	brcc	.+18     	; 0x1fc4 <xTaskIncrementTick+0xf6>
    1fb2:	40 93 39 18 	sts	0x1839, r20	; 0x801839 <xNextTaskUnblockTime>
    1fb6:	50 93 3a 18 	sts	0x183A, r21	; 0x80183a <xNextTaskUnblockTime+0x1>
    1fba:	60 93 3b 18 	sts	0x183B, r22	; 0x80183b <xNextTaskUnblockTime+0x2>
    1fbe:	70 93 3c 18 	sts	0x183C, r23	; 0x80183c <xNextTaskUnblockTime+0x3>
    1fc2:	80 c0       	rjmp	.+256    	; 0x20c4 <__DATA_REGION_LENGTH__+0xc4>
    1fc4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1fc6:	b5 85       	ldd	r27, Z+13	; 0x0d
    1fc8:	c6 81       	ldd	r28, Z+6	; 0x06
    1fca:	d7 81       	ldd	r29, Z+7	; 0x07
    1fcc:	20 85       	ldd	r18, Z+8	; 0x08
    1fce:	31 85       	ldd	r19, Z+9	; 0x09
    1fd0:	3f 83       	std	Y+7, r19	; 0x07
    1fd2:	2e 83       	std	Y+6, r18	; 0x06
    1fd4:	c0 85       	ldd	r28, Z+8	; 0x08
    1fd6:	d1 85       	ldd	r29, Z+9	; 0x09
    1fd8:	26 81       	ldd	r18, Z+6	; 0x06
    1fda:	37 81       	ldd	r19, Z+7	; 0x07
    1fdc:	3d 83       	std	Y+5, r19	; 0x05
    1fde:	2c 83       	std	Y+4, r18	; 0x04
    1fe0:	11 96       	adiw	r26, 0x01	; 1
    1fe2:	4d 91       	ld	r20, X+
    1fe4:	5c 91       	ld	r21, X
    1fe6:	12 97       	sbiw	r26, 0x02	; 2
    1fe8:	9f 01       	movw	r18, r30
    1fea:	2e 5f       	subi	r18, 0xFE	; 254
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	42 17       	cp	r20, r18
    1ff0:	53 07       	cpc	r21, r19
    1ff2:	31 f4       	brne	.+12     	; 0x2000 <__DATA_REGION_LENGTH__>
    1ff4:	40 85       	ldd	r20, Z+8	; 0x08
    1ff6:	51 85       	ldd	r21, Z+9	; 0x09
    1ff8:	12 96       	adiw	r26, 0x02	; 2
    1ffa:	5c 93       	st	X, r21
    1ffc:	4e 93       	st	-X, r20
    1ffe:	11 97       	sbiw	r26, 0x01	; 1
    2000:	15 86       	std	Z+13, r1	; 0x0d
    2002:	14 86       	std	Z+12, r1	; 0x0c
    2004:	9c 91       	ld	r25, X
    2006:	91 50       	subi	r25, 0x01	; 1
    2008:	9c 93       	st	X, r25
    200a:	a0 8d       	ldd	r26, Z+24	; 0x18
    200c:	b1 8d       	ldd	r27, Z+25	; 0x19
    200e:	10 97       	sbiw	r26, 0x00	; 0
    2010:	09 f1       	breq	.+66     	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    2012:	c2 89       	ldd	r28, Z+18	; 0x12
    2014:	d3 89       	ldd	r29, Z+19	; 0x13
    2016:	44 89       	ldd	r20, Z+20	; 0x14
    2018:	55 89       	ldd	r21, Z+21	; 0x15
    201a:	5f 83       	std	Y+7, r21	; 0x07
    201c:	4e 83       	std	Y+6, r20	; 0x06
    201e:	c4 89       	ldd	r28, Z+20	; 0x14
    2020:	d5 89       	ldd	r29, Z+21	; 0x15
    2022:	42 89       	ldd	r20, Z+18	; 0x12
    2024:	53 89       	ldd	r21, Z+19	; 0x13
    2026:	5d 83       	std	Y+5, r21	; 0x05
    2028:	4c 83       	std	Y+4, r20	; 0x04
    202a:	11 96       	adiw	r26, 0x01	; 1
    202c:	6d 91       	ld	r22, X+
    202e:	7c 91       	ld	r23, X
    2030:	12 97       	sbiw	r26, 0x02	; 2
    2032:	af 01       	movw	r20, r30
    2034:	42 5f       	subi	r20, 0xF2	; 242
    2036:	5f 4f       	sbci	r21, 0xFF	; 255
    2038:	64 17       	cp	r22, r20
    203a:	75 07       	cpc	r23, r21
    203c:	31 f4       	brne	.+12     	; 0x204a <__DATA_REGION_LENGTH__+0x4a>
    203e:	44 89       	ldd	r20, Z+20	; 0x14
    2040:	55 89       	ldd	r21, Z+21	; 0x15
    2042:	12 96       	adiw	r26, 0x02	; 2
    2044:	5c 93       	st	X, r21
    2046:	4e 93       	st	-X, r20
    2048:	11 97       	sbiw	r26, 0x01	; 1
    204a:	11 8e       	std	Z+25, r1	; 0x19
    204c:	10 8e       	std	Z+24, r1	; 0x18
    204e:	9c 91       	ld	r25, X
    2050:	91 50       	subi	r25, 0x01	; 1
    2052:	9c 93       	st	X, r25
    2054:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2056:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    205a:	9a 17       	cp	r25, r26
    205c:	10 f4       	brcc	.+4      	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    205e:	a0 93 45 18 	sts	0x1845, r26	; 0x801845 <uxTopReadyPriority>
    2062:	9b e0       	ldi	r25, 0x0B	; 11
    2064:	9a 9f       	mul	r25, r26
    2066:	d0 01       	movw	r26, r0
    2068:	11 24       	eor	r1, r1
    206a:	a9 57       	subi	r26, 0x79	; 121
    206c:	b7 4e       	sbci	r27, 0xE7	; 231
    206e:	11 96       	adiw	r26, 0x01	; 1
    2070:	0d 90       	ld	r0, X+
    2072:	bc 91       	ld	r27, X
    2074:	a0 2d       	mov	r26, r0
    2076:	b7 83       	std	Z+7, r27	; 0x07
    2078:	a6 83       	std	Z+6, r26	; 0x06
    207a:	16 96       	adiw	r26, 0x06	; 6
    207c:	4d 91       	ld	r20, X+
    207e:	5c 91       	ld	r21, X
    2080:	17 97       	sbiw	r26, 0x07	; 7
    2082:	51 87       	std	Z+9, r21	; 0x09
    2084:	40 87       	std	Z+8, r20	; 0x08
    2086:	16 96       	adiw	r26, 0x06	; 6
    2088:	cd 91       	ld	r28, X+
    208a:	dc 91       	ld	r29, X
    208c:	17 97       	sbiw	r26, 0x07	; 7
    208e:	3d 83       	std	Y+5, r19	; 0x05
    2090:	2c 83       	std	Y+4, r18	; 0x04
    2092:	17 96       	adiw	r26, 0x07	; 7
    2094:	3c 93       	st	X, r19
    2096:	2e 93       	st	-X, r18
    2098:	16 97       	sbiw	r26, 0x06	; 6
    209a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    209c:	9a 9f       	mul	r25, r26
    209e:	d0 01       	movw	r26, r0
    20a0:	11 24       	eor	r1, r1
    20a2:	a9 57       	subi	r26, 0x79	; 121
    20a4:	b7 4e       	sbci	r27, 0xE7	; 231
    20a6:	b5 87       	std	Z+13, r27	; 0x0d
    20a8:	a4 87       	std	Z+12, r26	; 0x0c
    20aa:	9c 91       	ld	r25, X
    20ac:	9f 5f       	subi	r25, 0xFF	; 255
    20ae:	9c 93       	st	X, r25
    20b0:	22 8d       	ldd	r18, Z+26	; 0x1a
    20b2:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    20b6:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    20ba:	92 8d       	ldd	r25, Z+26	; 0x1a
    20bc:	29 17       	cp	r18, r25
    20be:	08 f0       	brcs	.+2      	; 0x20c2 <__DATA_REGION_LENGTH__+0xc2>
    20c0:	4f cf       	rjmp	.-354    	; 0x1f60 <xTaskIncrementTick+0x92>
    20c2:	51 cf       	rjmp	.-350    	; 0x1f66 <xTaskIncrementTick+0x98>
    20c4:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    20c8:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    20cc:	e2 8d       	ldd	r30, Z+26	; 0x1a
    20ce:	9b e0       	ldi	r25, 0x0B	; 11
    20d0:	e9 9f       	mul	r30, r25
    20d2:	f0 01       	movw	r30, r0
    20d4:	11 24       	eor	r1, r1
    20d6:	e9 57       	subi	r30, 0x79	; 121
    20d8:	f7 4e       	sbci	r31, 0xE7	; 231
    20da:	90 81       	ld	r25, Z
    20dc:	92 30       	cpi	r25, 0x02	; 2
    20de:	08 f0       	brcs	.+2      	; 0x20e2 <__DATA_REGION_LENGTH__+0xe2>
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <xYieldPending>
    20e6:	91 11       	cpse	r25, r1
    20e8:	16 c0       	rjmp	.+44     	; 0x2116 <__DATA_REGION_LENGTH__+0x116>
    20ea:	16 c0       	rjmp	.+44     	; 0x2118 <__DATA_REGION_LENGTH__+0x118>
    20ec:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <xPendedTicks>
    20f0:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <xPendedTicks+0x1>
    20f4:	a0 91 42 18 	lds	r26, 0x1842	; 0x801842 <xPendedTicks+0x2>
    20f8:	b0 91 43 18 	lds	r27, 0x1843	; 0x801843 <xPendedTicks+0x3>
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	a1 1d       	adc	r26, r1
    2100:	b1 1d       	adc	r27, r1
    2102:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <xPendedTicks>
    2106:	90 93 41 18 	sts	0x1841, r25	; 0x801841 <xPendedTicks+0x1>
    210a:	a0 93 42 18 	sts	0x1842, r26	; 0x801842 <xPendedTicks+0x2>
    210e:	b0 93 43 18 	sts	0x1843, r27	; 0x801843 <xPendedTicks+0x3>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <__DATA_REGION_LENGTH__+0x118>
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	08 95       	ret

00002126 <xTaskResumeAll>:
    2126:	cf 92       	push	r12
    2128:	df 92       	push	r13
    212a:	ef 92       	push	r14
    212c:	ff 92       	push	r15
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	0f 92       	push	r0
    2138:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <uxSchedulerSuspended>
    213c:	81 50       	subi	r24, 0x01	; 1
    213e:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <uxSchedulerSuspended>
    2142:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <uxSchedulerSuspended>
    2146:	81 11       	cpse	r24, r1
    2148:	be c0       	rjmp	.+380    	; 0x22c6 <__stack+0xc7>
    214a:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <uxCurrentNumberOfTasks>
    214e:	81 11       	cpse	r24, r1
    2150:	88 c0       	rjmp	.+272    	; 0x2262 <__stack+0x63>
    2152:	bc c0       	rjmp	.+376    	; 0x22cc <__stack+0xcd>
    2154:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <xPendingReadyList+0x7>
    2158:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <xPendingReadyList+0x8>
    215c:	00 84       	ldd	r0, Z+8	; 0x08
    215e:	f1 85       	ldd	r31, Z+9	; 0x09
    2160:	e0 2d       	mov	r30, r0
    2162:	a0 8d       	ldd	r26, Z+24	; 0x18
    2164:	b1 8d       	ldd	r27, Z+25	; 0x19
    2166:	c2 89       	ldd	r28, Z+18	; 0x12
    2168:	d3 89       	ldd	r29, Z+19	; 0x13
    216a:	84 89       	ldd	r24, Z+20	; 0x14
    216c:	95 89       	ldd	r25, Z+21	; 0x15
    216e:	9f 83       	std	Y+7, r25	; 0x07
    2170:	8e 83       	std	Y+6, r24	; 0x06
    2172:	c4 89       	ldd	r28, Z+20	; 0x14
    2174:	d5 89       	ldd	r29, Z+21	; 0x15
    2176:	82 89       	ldd	r24, Z+18	; 0x12
    2178:	93 89       	ldd	r25, Z+19	; 0x13
    217a:	9d 83       	std	Y+5, r25	; 0x05
    217c:	8c 83       	std	Y+4, r24	; 0x04
    217e:	11 96       	adiw	r26, 0x01	; 1
    2180:	2d 91       	ld	r18, X+
    2182:	3c 91       	ld	r19, X
    2184:	12 97       	sbiw	r26, 0x02	; 2
    2186:	cf 01       	movw	r24, r30
    2188:	0e 96       	adiw	r24, 0x0e	; 14
    218a:	28 17       	cp	r18, r24
    218c:	39 07       	cpc	r19, r25
    218e:	31 f4       	brne	.+12     	; 0x219c <xTaskResumeAll+0x76>
    2190:	84 89       	ldd	r24, Z+20	; 0x14
    2192:	95 89       	ldd	r25, Z+21	; 0x15
    2194:	12 96       	adiw	r26, 0x02	; 2
    2196:	9c 93       	st	X, r25
    2198:	8e 93       	st	-X, r24
    219a:	11 97       	sbiw	r26, 0x01	; 1
    219c:	11 8e       	std	Z+25, r1	; 0x19
    219e:	10 8e       	std	Z+24, r1	; 0x18
    21a0:	8c 91       	ld	r24, X
    21a2:	81 50       	subi	r24, 0x01	; 1
    21a4:	8c 93       	st	X, r24
    21a6:	a4 85       	ldd	r26, Z+12	; 0x0c
    21a8:	b5 85       	ldd	r27, Z+13	; 0x0d
    21aa:	c6 81       	ldd	r28, Z+6	; 0x06
    21ac:	d7 81       	ldd	r29, Z+7	; 0x07
    21ae:	80 85       	ldd	r24, Z+8	; 0x08
    21b0:	91 85       	ldd	r25, Z+9	; 0x09
    21b2:	9f 83       	std	Y+7, r25	; 0x07
    21b4:	8e 83       	std	Y+6, r24	; 0x06
    21b6:	c0 85       	ldd	r28, Z+8	; 0x08
    21b8:	d1 85       	ldd	r29, Z+9	; 0x09
    21ba:	86 81       	ldd	r24, Z+6	; 0x06
    21bc:	97 81       	ldd	r25, Z+7	; 0x07
    21be:	9d 83       	std	Y+5, r25	; 0x05
    21c0:	8c 83       	std	Y+4, r24	; 0x04
    21c2:	11 96       	adiw	r26, 0x01	; 1
    21c4:	8d 91       	ld	r24, X+
    21c6:	9c 91       	ld	r25, X
    21c8:	12 97       	sbiw	r26, 0x02	; 2
    21ca:	9f 01       	movw	r18, r30
    21cc:	2e 5f       	subi	r18, 0xFE	; 254
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	82 17       	cp	r24, r18
    21d2:	93 07       	cpc	r25, r19
    21d4:	31 f4       	brne	.+12     	; 0x21e2 <xTaskResumeAll+0xbc>
    21d6:	80 85       	ldd	r24, Z+8	; 0x08
    21d8:	91 85       	ldd	r25, Z+9	; 0x09
    21da:	12 96       	adiw	r26, 0x02	; 2
    21dc:	9c 93       	st	X, r25
    21de:	8e 93       	st	-X, r24
    21e0:	11 97       	sbiw	r26, 0x01	; 1
    21e2:	15 86       	std	Z+13, r1	; 0x0d
    21e4:	14 86       	std	Z+12, r1	; 0x0c
    21e6:	8c 91       	ld	r24, X
    21e8:	81 50       	subi	r24, 0x01	; 1
    21ea:	8c 93       	st	X, r24
    21ec:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21ee:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    21f2:	8a 17       	cp	r24, r26
    21f4:	10 f4       	brcc	.+4      	; 0x21fa <xTaskResumeAll+0xd4>
    21f6:	a0 93 45 18 	sts	0x1845, r26	; 0x801845 <uxTopReadyPriority>
    21fa:	8b e0       	ldi	r24, 0x0B	; 11
    21fc:	8a 9f       	mul	r24, r26
    21fe:	d0 01       	movw	r26, r0
    2200:	11 24       	eor	r1, r1
    2202:	a9 57       	subi	r26, 0x79	; 121
    2204:	b7 4e       	sbci	r27, 0xE7	; 231
    2206:	11 96       	adiw	r26, 0x01	; 1
    2208:	0d 90       	ld	r0, X+
    220a:	bc 91       	ld	r27, X
    220c:	a0 2d       	mov	r26, r0
    220e:	b7 83       	std	Z+7, r27	; 0x07
    2210:	a6 83       	std	Z+6, r26	; 0x06
    2212:	16 96       	adiw	r26, 0x06	; 6
    2214:	4d 91       	ld	r20, X+
    2216:	5c 91       	ld	r21, X
    2218:	17 97       	sbiw	r26, 0x07	; 7
    221a:	51 87       	std	Z+9, r21	; 0x09
    221c:	40 87       	std	Z+8, r20	; 0x08
    221e:	16 96       	adiw	r26, 0x06	; 6
    2220:	cd 91       	ld	r28, X+
    2222:	dc 91       	ld	r29, X
    2224:	17 97       	sbiw	r26, 0x07	; 7
    2226:	3d 83       	std	Y+5, r19	; 0x05
    2228:	2c 83       	std	Y+4, r18	; 0x04
    222a:	17 96       	adiw	r26, 0x07	; 7
    222c:	3c 93       	st	X, r19
    222e:	2e 93       	st	-X, r18
    2230:	16 97       	sbiw	r26, 0x06	; 6
    2232:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2234:	8a 9f       	mul	r24, r26
    2236:	d0 01       	movw	r26, r0
    2238:	11 24       	eor	r1, r1
    223a:	a9 57       	subi	r26, 0x79	; 121
    223c:	b7 4e       	sbci	r27, 0xE7	; 231
    223e:	b5 87       	std	Z+13, r27	; 0x0d
    2240:	a4 87       	std	Z+12, r26	; 0x0c
    2242:	8c 91       	ld	r24, X
    2244:	8f 5f       	subi	r24, 0xFF	; 255
    2246:	8c 93       	st	X, r24
    2248:	92 8d       	ldd	r25, Z+26	; 0x1a
    224a:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    224e:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2252:	5a 96       	adiw	r26, 0x1a	; 26
    2254:	8c 91       	ld	r24, X
    2256:	98 17       	cp	r25, r24
    2258:	30 f0       	brcs	.+12     	; 0x2266 <__stack+0x67>
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <xYieldPending>
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <__stack+0x67>
    2262:	e0 e0       	ldi	r30, 0x00	; 0
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <xPendingReadyList>
    226a:	81 11       	cpse	r24, r1
    226c:	73 cf       	rjmp	.-282    	; 0x2154 <xTaskResumeAll+0x2e>
    226e:	ef 2b       	or	r30, r31
    2270:	09 f0       	breq	.+2      	; 0x2274 <__stack+0x75>
    2272:	7e db       	rcall	.-2308   	; 0x1970 <prvResetNextTaskUnblockTime>
    2274:	c0 90 40 18 	lds	r12, 0x1840	; 0x801840 <xPendedTicks>
    2278:	d0 90 41 18 	lds	r13, 0x1841	; 0x801841 <xPendedTicks+0x1>
    227c:	e0 90 42 18 	lds	r14, 0x1842	; 0x801842 <xPendedTicks+0x2>
    2280:	f0 90 43 18 	lds	r15, 0x1843	; 0x801843 <xPendedTicks+0x3>
    2284:	c1 14       	cp	r12, r1
    2286:	d1 04       	cpc	r13, r1
    2288:	e1 04       	cpc	r14, r1
    228a:	f1 04       	cpc	r15, r1
    228c:	a1 f0       	breq	.+40     	; 0x22b6 <__stack+0xb7>
    228e:	1f de       	rcall	.-962    	; 0x1ece <xTaskIncrementTick>
    2290:	88 23       	and	r24, r24
    2292:	19 f0       	breq	.+6      	; 0x229a <__stack+0x9b>
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <xYieldPending>
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	c8 1a       	sub	r12, r24
    229e:	d1 08       	sbc	r13, r1
    22a0:	e1 08       	sbc	r14, r1
    22a2:	f1 08       	sbc	r15, r1
    22a4:	a1 f7       	brne	.-24     	; 0x228e <__stack+0x8f>
    22a6:	10 92 40 18 	sts	0x1840, r1	; 0x801840 <xPendedTicks>
    22aa:	10 92 41 18 	sts	0x1841, r1	; 0x801841 <xPendedTicks+0x1>
    22ae:	10 92 42 18 	sts	0x1842, r1	; 0x801842 <xPendedTicks+0x2>
    22b2:	10 92 43 18 	sts	0x1843, r1	; 0x801843 <xPendedTicks+0x3>
    22b6:	80 91 3f 18 	lds	r24, 0x183F	; 0x80183f <xYieldPending>
    22ba:	88 23       	and	r24, r24
    22bc:	31 f0       	breq	.+12     	; 0x22ca <__stack+0xcb>
    22be:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	03 c0       	rjmp	.+6      	; 0x22cc <__stack+0xcd>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <__stack+0xcd>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	0f 90       	pop	r0
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	cf 90       	pop	r12
    22dc:	08 95       	ret

000022de <xTaskDelayUntil>:
    22de:	8f 92       	push	r8
    22e0:	9f 92       	push	r9
    22e2:	af 92       	push	r10
    22e4:	bf 92       	push	r11
    22e6:	cf 92       	push	r12
    22e8:	df 92       	push	r13
    22ea:	ef 92       	push	r14
    22ec:	ff 92       	push	r15
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	ec 01       	movw	r28, r24
    22f6:	6a 01       	movw	r12, r20
    22f8:	7b 01       	movw	r14, r22
    22fa:	d5 dd       	rcall	.-1110   	; 0x1ea6 <vTaskSuspendAll>
    22fc:	80 90 46 18 	lds	r8, 0x1846	; 0x801846 <xTickCount>
    2300:	90 90 47 18 	lds	r9, 0x1847	; 0x801847 <xTickCount+0x1>
    2304:	a0 90 48 18 	lds	r10, 0x1848	; 0x801848 <xTickCount+0x2>
    2308:	b0 90 49 18 	lds	r11, 0x1849	; 0x801849 <xTickCount+0x3>
    230c:	88 81       	ld	r24, Y
    230e:	99 81       	ldd	r25, Y+1	; 0x01
    2310:	aa 81       	ldd	r26, Y+2	; 0x02
    2312:	bb 81       	ldd	r27, Y+3	; 0x03
    2314:	ac 01       	movw	r20, r24
    2316:	bd 01       	movw	r22, r26
    2318:	4c 0d       	add	r20, r12
    231a:	5d 1d       	adc	r21, r13
    231c:	6e 1d       	adc	r22, r14
    231e:	7f 1d       	adc	r23, r15
    2320:	88 16       	cp	r8, r24
    2322:	99 06       	cpc	r9, r25
    2324:	aa 06       	cpc	r10, r26
    2326:	bb 06       	cpc	r11, r27
    2328:	60 f4       	brcc	.+24     	; 0x2342 <xTaskDelayUntil+0x64>
    232a:	48 17       	cp	r20, r24
    232c:	59 07       	cpc	r21, r25
    232e:	6a 07       	cpc	r22, r26
    2330:	7b 07       	cpc	r23, r27
    2332:	98 f4       	brcc	.+38     	; 0x235a <xTaskDelayUntil+0x7c>
    2334:	84 16       	cp	r8, r20
    2336:	95 06       	cpc	r9, r21
    2338:	a6 06       	cpc	r10, r22
    233a:	b7 06       	cpc	r11, r23
    233c:	80 f0       	brcs	.+32     	; 0x235e <xTaskDelayUntil+0x80>
    233e:	10 e0       	ldi	r17, 0x00	; 0
    2340:	13 c0       	rjmp	.+38     	; 0x2368 <xTaskDelayUntil+0x8a>
    2342:	48 17       	cp	r20, r24
    2344:	59 07       	cpc	r21, r25
    2346:	6a 07       	cpc	r22, r26
    2348:	7b 07       	cpc	r23, r27
    234a:	58 f0       	brcs	.+22     	; 0x2362 <xTaskDelayUntil+0x84>
    234c:	84 16       	cp	r8, r20
    234e:	95 06       	cpc	r9, r21
    2350:	a6 06       	cpc	r10, r22
    2352:	b7 06       	cpc	r11, r23
    2354:	40 f0       	brcs	.+16     	; 0x2366 <xTaskDelayUntil+0x88>
    2356:	10 e0       	ldi	r17, 0x00	; 0
    2358:	07 c0       	rjmp	.+14     	; 0x2368 <xTaskDelayUntil+0x8a>
    235a:	10 e0       	ldi	r17, 0x00	; 0
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <xTaskDelayUntil+0x8a>
    235e:	11 e0       	ldi	r17, 0x01	; 1
    2360:	03 c0       	rjmp	.+6      	; 0x2368 <xTaskDelayUntil+0x8a>
    2362:	11 e0       	ldi	r17, 0x01	; 1
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <xTaskDelayUntil+0x8a>
    2366:	11 e0       	ldi	r17, 0x01	; 1
    2368:	48 83       	st	Y, r20
    236a:	59 83       	std	Y+1, r21	; 0x01
    236c:	6a 83       	std	Y+2, r22	; 0x02
    236e:	7b 83       	std	Y+3, r23	; 0x03
    2370:	11 23       	and	r17, r17
    2372:	41 f0       	breq	.+16     	; 0x2384 <xTaskDelayUntil+0xa6>
    2374:	cb 01       	movw	r24, r22
    2376:	ba 01       	movw	r22, r20
    2378:	68 19       	sub	r22, r8
    237a:	79 09       	sbc	r23, r9
    237c:	8a 09       	sbc	r24, r10
    237e:	9b 09       	sbc	r25, r11
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	6b dc       	rcall	.-1834   	; 0x1c5a <prvAddCurrentTaskToDelayedList>
    2384:	d0 de       	rcall	.-608    	; 0x2126 <xTaskResumeAll>
    2386:	81 11       	cpse	r24, r1
    2388:	02 c0       	rjmp	.+4      	; 0x238e <xTaskDelayUntil+0xb0>
    238a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    238e:	81 2f       	mov	r24, r17
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	ff 90       	pop	r15
    2398:	ef 90       	pop	r14
    239a:	df 90       	pop	r13
    239c:	cf 90       	pop	r12
    239e:	bf 90       	pop	r11
    23a0:	af 90       	pop	r10
    23a2:	9f 90       	pop	r9
    23a4:	8f 90       	pop	r8
    23a6:	08 95       	ret

000023a8 <vTaskDelay>:
    23a8:	cf 92       	push	r12
    23aa:	df 92       	push	r13
    23ac:	ef 92       	push	r14
    23ae:	ff 92       	push	r15
    23b0:	6b 01       	movw	r12, r22
    23b2:	7c 01       	movw	r14, r24
    23b4:	67 2b       	or	r22, r23
    23b6:	68 2b       	or	r22, r24
    23b8:	69 2b       	or	r22, r25
    23ba:	39 f0       	breq	.+14     	; 0x23ca <vTaskDelay+0x22>
    23bc:	74 dd       	rcall	.-1304   	; 0x1ea6 <vTaskSuspendAll>
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	c7 01       	movw	r24, r14
    23c2:	b6 01       	movw	r22, r12
    23c4:	4a dc       	rcall	.-1900   	; 0x1c5a <prvAddCurrentTaskToDelayedList>
    23c6:	af de       	rcall	.-674    	; 0x2126 <xTaskResumeAll>
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <vTaskDelay+0x24>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	81 11       	cpse	r24, r1
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <vTaskDelay+0x2c>
    23d0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	08 95       	ret

000023de <vTaskSwitchContext>:
    23de:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <uxSchedulerSuspended>
    23e2:	88 23       	and	r24, r24
    23e4:	21 f0       	breq	.+8      	; 0x23ee <vTaskSwitchContext+0x10>
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <xYieldPending>
    23ec:	08 95       	ret
    23ee:	10 92 3f 18 	sts	0x183F, r1	; 0x80183f <xYieldPending>
    23f2:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    23f6:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    23fa:	20 81       	ld	r18, Z
    23fc:	31 81       	ldd	r19, Z+1	; 0x01
    23fe:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2402:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2406:	83 8d       	ldd	r24, Z+27	; 0x1b
    2408:	94 8d       	ldd	r25, Z+28	; 0x1c
    240a:	82 17       	cp	r24, r18
    240c:	93 07       	cpc	r25, r19
    240e:	60 f0       	brcs	.+24     	; 0x2428 <vTaskSwitchContext+0x4a>
    2410:	60 91 f5 18 	lds	r22, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2414:	70 91 f6 18 	lds	r23, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2418:	63 5e       	subi	r22, 0xE3	; 227
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2420:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2424:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <vApplicationStackOverflowHook>
    2428:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <vTaskSwitchContext+0x52>
    242e:	81 50       	subi	r24, 0x01	; 1
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	9b e0       	ldi	r25, 0x0B	; 11
    2436:	92 9f       	mul	r25, r18
    2438:	f0 01       	movw	r30, r0
    243a:	93 9f       	mul	r25, r19
    243c:	f0 0d       	add	r31, r0
    243e:	11 24       	eor	r1, r1
    2440:	e9 57       	subi	r30, 0x79	; 121
    2442:	f7 4e       	sbci	r31, 0xE7	; 231
    2444:	90 81       	ld	r25, Z
    2446:	99 23       	and	r25, r25
    2448:	91 f3       	breq	.-28     	; 0x242e <vTaskSwitchContext+0x50>
    244a:	9b e0       	ldi	r25, 0x0B	; 11
    244c:	92 9f       	mul	r25, r18
    244e:	a0 01       	movw	r20, r0
    2450:	93 9f       	mul	r25, r19
    2452:	50 0d       	add	r21, r0
    2454:	11 24       	eor	r1, r1
    2456:	df 01       	movw	r26, r30
    2458:	01 80       	ldd	r0, Z+1	; 0x01
    245a:	f2 81       	ldd	r31, Z+2	; 0x02
    245c:	e0 2d       	mov	r30, r0
    245e:	04 80       	ldd	r0, Z+4	; 0x04
    2460:	f5 81       	ldd	r31, Z+5	; 0x05
    2462:	e0 2d       	mov	r30, r0
    2464:	12 96       	adiw	r26, 0x02	; 2
    2466:	fc 93       	st	X, r31
    2468:	ee 93       	st	-X, r30
    246a:	11 97       	sbiw	r26, 0x01	; 1
    246c:	46 57       	subi	r20, 0x76	; 118
    246e:	57 4e       	sbci	r21, 0xE7	; 231
    2470:	e4 17       	cp	r30, r20
    2472:	f5 07       	cpc	r31, r21
    2474:	29 f4       	brne	.+10     	; 0x2480 <vTaskSwitchContext+0xa2>
    2476:	44 81       	ldd	r20, Z+4	; 0x04
    2478:	55 81       	ldd	r21, Z+5	; 0x05
    247a:	fd 01       	movw	r30, r26
    247c:	52 83       	std	Z+2, r21	; 0x02
    247e:	41 83       	std	Z+1, r20	; 0x01
    2480:	9b e0       	ldi	r25, 0x0B	; 11
    2482:	92 9f       	mul	r25, r18
    2484:	f0 01       	movw	r30, r0
    2486:	93 9f       	mul	r25, r19
    2488:	f0 0d       	add	r31, r0
    248a:	11 24       	eor	r1, r1
    248c:	e9 57       	subi	r30, 0x79	; 121
    248e:	f7 4e       	sbci	r31, 0xE7	; 231
    2490:	01 80       	ldd	r0, Z+1	; 0x01
    2492:	f2 81       	ldd	r31, Z+2	; 0x02
    2494:	e0 2d       	mov	r30, r0
    2496:	20 85       	ldd	r18, Z+8	; 0x08
    2498:	31 85       	ldd	r19, Z+9	; 0x09
    249a:	30 93 f6 18 	sts	0x18F6, r19	; 0x8018f6 <pxCurrentTCB+0x1>
    249e:	20 93 f5 18 	sts	0x18F5, r18	; 0x8018f5 <pxCurrentTCB>
    24a2:	80 93 45 18 	sts	0x1845, r24	; 0x801845 <uxTopReadyPriority>
    24a6:	08 95       	ret

000024a8 <vTaskPlaceOnEventList>:
    24a8:	cf 92       	push	r12
    24aa:	df 92       	push	r13
    24ac:	ef 92       	push	r14
    24ae:	ff 92       	push	r15
    24b0:	6a 01       	movw	r12, r20
    24b2:	7b 01       	movw	r14, r22
    24b4:	60 91 f5 18 	lds	r22, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    24b8:	70 91 f6 18 	lds	r23, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    24bc:	62 5f       	subi	r22, 0xF2	; 242
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	0e 94 30 05 	call	0xa60	; 0xa60 <vListInsert>
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	c7 01       	movw	r24, r14
    24c8:	b6 01       	movw	r22, r12
    24ca:	c7 db       	rcall	.-2162   	; 0x1c5a <prvAddCurrentTaskToDelayedList>
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	08 95       	ret

000024d6 <vTaskPlaceOnUnorderedEventList>:
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	fc 01       	movw	r30, r24
    24e0:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    24e4:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    24e8:	70 68       	ori	r23, 0x80	; 128
    24ea:	1e 96       	adiw	r26, 0x0e	; 14
    24ec:	4d 93       	st	X+, r20
    24ee:	5d 93       	st	X+, r21
    24f0:	6d 93       	st	X+, r22
    24f2:	7c 93       	st	X, r23
    24f4:	51 97       	sbiw	r26, 0x11	; 17
    24f6:	a1 81       	ldd	r26, Z+1	; 0x01
    24f8:	b2 81       	ldd	r27, Z+2	; 0x02
    24fa:	c0 91 f5 18 	lds	r28, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    24fe:	d0 91 f6 18 	lds	r29, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2502:	bb 8b       	std	Y+19, r27	; 0x13
    2504:	aa 8b       	std	Y+18, r26	; 0x12
    2506:	c0 91 f5 18 	lds	r28, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    250a:	d0 91 f6 18 	lds	r29, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    250e:	16 96       	adiw	r26, 0x06	; 6
    2510:	8d 91       	ld	r24, X+
    2512:	9c 91       	ld	r25, X
    2514:	17 97       	sbiw	r26, 0x07	; 7
    2516:	9d 8b       	std	Y+21, r25	; 0x15
    2518:	8c 8b       	std	Y+20, r24	; 0x14
    251a:	16 96       	adiw	r26, 0x06	; 6
    251c:	cd 91       	ld	r28, X+
    251e:	dc 91       	ld	r29, X
    2520:	17 97       	sbiw	r26, 0x07	; 7
    2522:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2526:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    252a:	0e 96       	adiw	r24, 0x0e	; 14
    252c:	9d 83       	std	Y+5, r25	; 0x05
    252e:	8c 83       	std	Y+4, r24	; 0x04
    2530:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2534:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2538:	0e 96       	adiw	r24, 0x0e	; 14
    253a:	17 96       	adiw	r26, 0x07	; 7
    253c:	9c 93       	st	X, r25
    253e:	8e 93       	st	-X, r24
    2540:	16 97       	sbiw	r26, 0x06	; 6
    2542:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2546:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    254a:	59 96       	adiw	r26, 0x19	; 25
    254c:	fc 93       	st	X, r31
    254e:	ee 93       	st	-X, r30
    2550:	58 97       	sbiw	r26, 0x18	; 24
    2552:	80 81       	ld	r24, Z
    2554:	8f 5f       	subi	r24, 0xFF	; 255
    2556:	80 83       	st	Z, r24
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	c9 01       	movw	r24, r18
    255c:	b8 01       	movw	r22, r16
    255e:	7d db       	rcall	.-2310   	; 0x1c5a <prvAddCurrentTaskToDelayedList>
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <vTaskPlaceOnEventListRestricted>:
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	fc 01       	movw	r30, r24
    2570:	cb 01       	movw	r24, r22
    2572:	ba 01       	movw	r22, r20
    2574:	a1 81       	ldd	r26, Z+1	; 0x01
    2576:	b2 81       	ldd	r27, Z+2	; 0x02
    2578:	c0 91 f5 18 	lds	r28, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    257c:	d0 91 f6 18 	lds	r29, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2580:	bb 8b       	std	Y+19, r27	; 0x13
    2582:	aa 8b       	std	Y+18, r26	; 0x12
    2584:	c0 91 f5 18 	lds	r28, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2588:	d0 91 f6 18 	lds	r29, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    258c:	16 96       	adiw	r26, 0x06	; 6
    258e:	4d 91       	ld	r20, X+
    2590:	5c 91       	ld	r21, X
    2592:	17 97       	sbiw	r26, 0x07	; 7
    2594:	5d 8b       	std	Y+21, r21	; 0x15
    2596:	4c 8b       	std	Y+20, r20	; 0x14
    2598:	16 96       	adiw	r26, 0x06	; 6
    259a:	cd 91       	ld	r28, X+
    259c:	dc 91       	ld	r29, X
    259e:	17 97       	sbiw	r26, 0x07	; 7
    25a0:	40 91 f5 18 	lds	r20, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    25a4:	50 91 f6 18 	lds	r21, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    25a8:	42 5f       	subi	r20, 0xF2	; 242
    25aa:	5f 4f       	sbci	r21, 0xFF	; 255
    25ac:	5d 83       	std	Y+5, r21	; 0x05
    25ae:	4c 83       	std	Y+4, r20	; 0x04
    25b0:	40 91 f5 18 	lds	r20, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    25b4:	50 91 f6 18 	lds	r21, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    25b8:	42 5f       	subi	r20, 0xF2	; 242
    25ba:	5f 4f       	sbci	r21, 0xFF	; 255
    25bc:	17 96       	adiw	r26, 0x07	; 7
    25be:	5c 93       	st	X, r21
    25c0:	4e 93       	st	-X, r20
    25c2:	16 97       	sbiw	r26, 0x06	; 6
    25c4:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    25c8:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    25cc:	59 96       	adiw	r26, 0x19	; 25
    25ce:	fc 93       	st	X, r31
    25d0:	ee 93       	st	-X, r30
    25d2:	58 97       	sbiw	r26, 0x18	; 24
    25d4:	30 81       	ld	r19, Z
    25d6:	3f 5f       	subi	r19, 0xFF	; 255
    25d8:	30 83       	st	Z, r19
    25da:	22 23       	and	r18, r18
    25dc:	19 f0       	breq	.+6      	; 0x25e4 <vTaskPlaceOnEventListRestricted+0x7a>
    25de:	6f ef       	ldi	r22, 0xFF	; 255
    25e0:	7f ef       	ldi	r23, 0xFF	; 255
    25e2:	cb 01       	movw	r24, r22
    25e4:	42 2f       	mov	r20, r18
    25e6:	39 db       	rcall	.-2446   	; 0x1c5a <prvAddCurrentTaskToDelayedList>
    25e8:	df 91       	pop	r29
    25ea:	cf 91       	pop	r28
    25ec:	08 95       	ret

000025ee <xTaskRemoveFromEventList>:
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	dc 01       	movw	r26, r24
    25f4:	17 96       	adiw	r26, 0x07	; 7
    25f6:	ed 91       	ld	r30, X+
    25f8:	fc 91       	ld	r31, X
    25fa:	18 97       	sbiw	r26, 0x08	; 8
    25fc:	00 84       	ldd	r0, Z+8	; 0x08
    25fe:	f1 85       	ldd	r31, Z+9	; 0x09
    2600:	e0 2d       	mov	r30, r0
    2602:	a0 8d       	ldd	r26, Z+24	; 0x18
    2604:	b1 8d       	ldd	r27, Z+25	; 0x19
    2606:	c2 89       	ldd	r28, Z+18	; 0x12
    2608:	d3 89       	ldd	r29, Z+19	; 0x13
    260a:	84 89       	ldd	r24, Z+20	; 0x14
    260c:	95 89       	ldd	r25, Z+21	; 0x15
    260e:	9f 83       	std	Y+7, r25	; 0x07
    2610:	8e 83       	std	Y+6, r24	; 0x06
    2612:	c4 89       	ldd	r28, Z+20	; 0x14
    2614:	d5 89       	ldd	r29, Z+21	; 0x15
    2616:	82 89       	ldd	r24, Z+18	; 0x12
    2618:	93 89       	ldd	r25, Z+19	; 0x13
    261a:	9d 83       	std	Y+5, r25	; 0x05
    261c:	8c 83       	std	Y+4, r24	; 0x04
    261e:	11 96       	adiw	r26, 0x01	; 1
    2620:	8d 91       	ld	r24, X+
    2622:	9c 91       	ld	r25, X
    2624:	12 97       	sbiw	r26, 0x02	; 2
    2626:	9f 01       	movw	r18, r30
    2628:	22 5f       	subi	r18, 0xF2	; 242
    262a:	3f 4f       	sbci	r19, 0xFF	; 255
    262c:	82 17       	cp	r24, r18
    262e:	93 07       	cpc	r25, r19
    2630:	31 f4       	brne	.+12     	; 0x263e <xTaskRemoveFromEventList+0x50>
    2632:	84 89       	ldd	r24, Z+20	; 0x14
    2634:	95 89       	ldd	r25, Z+21	; 0x15
    2636:	12 96       	adiw	r26, 0x02	; 2
    2638:	9c 93       	st	X, r25
    263a:	8e 93       	st	-X, r24
    263c:	11 97       	sbiw	r26, 0x01	; 1
    263e:	11 8e       	std	Z+25, r1	; 0x19
    2640:	10 8e       	std	Z+24, r1	; 0x18
    2642:	8c 91       	ld	r24, X
    2644:	81 50       	subi	r24, 0x01	; 1
    2646:	8c 93       	st	X, r24
    2648:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <uxSchedulerSuspended>
    264c:	81 11       	cpse	r24, r1
    264e:	52 c0       	rjmp	.+164    	; 0x26f4 <xTaskRemoveFromEventList+0x106>
    2650:	a4 85       	ldd	r26, Z+12	; 0x0c
    2652:	b5 85       	ldd	r27, Z+13	; 0x0d
    2654:	c6 81       	ldd	r28, Z+6	; 0x06
    2656:	d7 81       	ldd	r29, Z+7	; 0x07
    2658:	80 85       	ldd	r24, Z+8	; 0x08
    265a:	91 85       	ldd	r25, Z+9	; 0x09
    265c:	9f 83       	std	Y+7, r25	; 0x07
    265e:	8e 83       	std	Y+6, r24	; 0x06
    2660:	c0 85       	ldd	r28, Z+8	; 0x08
    2662:	d1 85       	ldd	r29, Z+9	; 0x09
    2664:	86 81       	ldd	r24, Z+6	; 0x06
    2666:	97 81       	ldd	r25, Z+7	; 0x07
    2668:	9d 83       	std	Y+5, r25	; 0x05
    266a:	8c 83       	std	Y+4, r24	; 0x04
    266c:	11 96       	adiw	r26, 0x01	; 1
    266e:	8d 91       	ld	r24, X+
    2670:	9c 91       	ld	r25, X
    2672:	12 97       	sbiw	r26, 0x02	; 2
    2674:	9f 01       	movw	r18, r30
    2676:	2e 5f       	subi	r18, 0xFE	; 254
    2678:	3f 4f       	sbci	r19, 0xFF	; 255
    267a:	82 17       	cp	r24, r18
    267c:	93 07       	cpc	r25, r19
    267e:	31 f4       	brne	.+12     	; 0x268c <xTaskRemoveFromEventList+0x9e>
    2680:	80 85       	ldd	r24, Z+8	; 0x08
    2682:	91 85       	ldd	r25, Z+9	; 0x09
    2684:	12 96       	adiw	r26, 0x02	; 2
    2686:	9c 93       	st	X, r25
    2688:	8e 93       	st	-X, r24
    268a:	11 97       	sbiw	r26, 0x01	; 1
    268c:	15 86       	std	Z+13, r1	; 0x0d
    268e:	14 86       	std	Z+12, r1	; 0x0c
    2690:	8c 91       	ld	r24, X
    2692:	81 50       	subi	r24, 0x01	; 1
    2694:	8c 93       	st	X, r24
    2696:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2698:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    269c:	8a 17       	cp	r24, r26
    269e:	10 f4       	brcc	.+4      	; 0x26a4 <xTaskRemoveFromEventList+0xb6>
    26a0:	a0 93 45 18 	sts	0x1845, r26	; 0x801845 <uxTopReadyPriority>
    26a4:	8b e0       	ldi	r24, 0x0B	; 11
    26a6:	8a 9f       	mul	r24, r26
    26a8:	d0 01       	movw	r26, r0
    26aa:	11 24       	eor	r1, r1
    26ac:	a9 57       	subi	r26, 0x79	; 121
    26ae:	b7 4e       	sbci	r27, 0xE7	; 231
    26b0:	11 96       	adiw	r26, 0x01	; 1
    26b2:	0d 90       	ld	r0, X+
    26b4:	bc 91       	ld	r27, X
    26b6:	a0 2d       	mov	r26, r0
    26b8:	b7 83       	std	Z+7, r27	; 0x07
    26ba:	a6 83       	std	Z+6, r26	; 0x06
    26bc:	16 96       	adiw	r26, 0x06	; 6
    26be:	4d 91       	ld	r20, X+
    26c0:	5c 91       	ld	r21, X
    26c2:	17 97       	sbiw	r26, 0x07	; 7
    26c4:	51 87       	std	Z+9, r21	; 0x09
    26c6:	40 87       	std	Z+8, r20	; 0x08
    26c8:	16 96       	adiw	r26, 0x06	; 6
    26ca:	cd 91       	ld	r28, X+
    26cc:	dc 91       	ld	r29, X
    26ce:	17 97       	sbiw	r26, 0x07	; 7
    26d0:	3d 83       	std	Y+5, r19	; 0x05
    26d2:	2c 83       	std	Y+4, r18	; 0x04
    26d4:	17 96       	adiw	r26, 0x07	; 7
    26d6:	3c 93       	st	X, r19
    26d8:	2e 93       	st	-X, r18
    26da:	16 97       	sbiw	r26, 0x06	; 6
    26dc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26de:	8a 9f       	mul	r24, r26
    26e0:	d0 01       	movw	r26, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	a9 57       	subi	r26, 0x79	; 121
    26e6:	b7 4e       	sbci	r27, 0xE7	; 231
    26e8:	b5 87       	std	Z+13, r27	; 0x0d
    26ea:	a4 87       	std	Z+12, r26	; 0x0c
    26ec:	8c 91       	ld	r24, X
    26ee:	8f 5f       	subi	r24, 0xFF	; 255
    26f0:	8c 93       	st	X, r24
    26f2:	1c c0       	rjmp	.+56     	; 0x272c <xTaskRemoveFromEventList+0x13e>
    26f4:	42 e6       	ldi	r20, 0x62	; 98
    26f6:	58 e1       	ldi	r21, 0x18	; 24
    26f8:	da 01       	movw	r26, r20
    26fa:	11 96       	adiw	r26, 0x01	; 1
    26fc:	cd 91       	ld	r28, X+
    26fe:	dc 91       	ld	r29, X
    2700:	12 97       	sbiw	r26, 0x02	; 2
    2702:	d3 8b       	std	Z+19, r29	; 0x13
    2704:	c2 8b       	std	Z+18, r28	; 0x12
    2706:	8e 81       	ldd	r24, Y+6	; 0x06
    2708:	9f 81       	ldd	r25, Y+7	; 0x07
    270a:	95 8b       	std	Z+21, r25	; 0x15
    270c:	84 8b       	std	Z+20, r24	; 0x14
    270e:	8e 81       	ldd	r24, Y+6	; 0x06
    2710:	9f 81       	ldd	r25, Y+7	; 0x07
    2712:	dc 01       	movw	r26, r24
    2714:	15 96       	adiw	r26, 0x05	; 5
    2716:	3c 93       	st	X, r19
    2718:	2e 93       	st	-X, r18
    271a:	14 97       	sbiw	r26, 0x04	; 4
    271c:	3f 83       	std	Y+7, r19	; 0x07
    271e:	2e 83       	std	Y+6, r18	; 0x06
    2720:	51 8f       	std	Z+25, r21	; 0x19
    2722:	40 8f       	std	Z+24, r20	; 0x18
    2724:	da 01       	movw	r26, r20
    2726:	8c 91       	ld	r24, X
    2728:	8f 5f       	subi	r24, 0xFF	; 255
    272a:	8c 93       	st	X, r24
    272c:	92 8d       	ldd	r25, Z+26	; 0x1a
    272e:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2732:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2736:	82 8d       	ldd	r24, Z+26	; 0x1a
    2738:	89 17       	cp	r24, r25
    273a:	20 f4       	brcc	.+8      	; 0x2744 <xTaskRemoveFromEventList+0x156>
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <xYieldPending>
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <xTaskRemoveFromEventList+0x158>
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	08 95       	ret

0000274c <vTaskRemoveFromUnorderedEventList>:
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	dc 01       	movw	r26, r24
    2752:	70 68       	ori	r23, 0x80	; 128
    2754:	4d 93       	st	X+, r20
    2756:	5d 93       	st	X+, r21
    2758:	6d 93       	st	X+, r22
    275a:	7c 93       	st	X, r23
    275c:	13 97       	sbiw	r26, 0x03	; 3
    275e:	18 96       	adiw	r26, 0x08	; 8
    2760:	ed 91       	ld	r30, X+
    2762:	fc 91       	ld	r31, X
    2764:	19 97       	sbiw	r26, 0x09	; 9
    2766:	1a 96       	adiw	r26, 0x0a	; 10
    2768:	4d 91       	ld	r20, X+
    276a:	5c 91       	ld	r21, X
    276c:	1b 97       	sbiw	r26, 0x0b	; 11
    276e:	14 96       	adiw	r26, 0x04	; 4
    2770:	8d 91       	ld	r24, X+
    2772:	9c 91       	ld	r25, X
    2774:	15 97       	sbiw	r26, 0x05	; 5
    2776:	16 96       	adiw	r26, 0x06	; 6
    2778:	2d 91       	ld	r18, X+
    277a:	3c 91       	ld	r19, X
    277c:	17 97       	sbiw	r26, 0x07	; 7
    277e:	ec 01       	movw	r28, r24
    2780:	3f 83       	std	Y+7, r19	; 0x07
    2782:	2e 83       	std	Y+6, r18	; 0x06
    2784:	16 96       	adiw	r26, 0x06	; 6
    2786:	8d 91       	ld	r24, X+
    2788:	9c 91       	ld	r25, X
    278a:	17 97       	sbiw	r26, 0x07	; 7
    278c:	14 96       	adiw	r26, 0x04	; 4
    278e:	2d 91       	ld	r18, X+
    2790:	3c 91       	ld	r19, X
    2792:	15 97       	sbiw	r26, 0x05	; 5
    2794:	ec 01       	movw	r28, r24
    2796:	3d 83       	std	Y+5, r19	; 0x05
    2798:	2c 83       	std	Y+4, r18	; 0x04
    279a:	ea 01       	movw	r28, r20
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	a8 17       	cp	r26, r24
    27a2:	b9 07       	cpc	r27, r25
    27a4:	31 f4       	brne	.+12     	; 0x27b2 <vTaskRemoveFromUnorderedEventList+0x66>
    27a6:	16 96       	adiw	r26, 0x06	; 6
    27a8:	8d 91       	ld	r24, X+
    27aa:	9c 91       	ld	r25, X
    27ac:	17 97       	sbiw	r26, 0x07	; 7
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	1b 96       	adiw	r26, 0x0b	; 11
    27b4:	1c 92       	st	X, r1
    27b6:	1e 92       	st	-X, r1
    27b8:	1a 97       	sbiw	r26, 0x0a	; 10
    27ba:	da 01       	movw	r26, r20
    27bc:	8c 91       	ld	r24, X
    27be:	81 50       	subi	r24, 0x01	; 1
    27c0:	8c 93       	st	X, r24
    27c2:	a4 85       	ldd	r26, Z+12	; 0x0c
    27c4:	b5 85       	ldd	r27, Z+13	; 0x0d
    27c6:	c6 81       	ldd	r28, Z+6	; 0x06
    27c8:	d7 81       	ldd	r29, Z+7	; 0x07
    27ca:	80 85       	ldd	r24, Z+8	; 0x08
    27cc:	91 85       	ldd	r25, Z+9	; 0x09
    27ce:	9f 83       	std	Y+7, r25	; 0x07
    27d0:	8e 83       	std	Y+6, r24	; 0x06
    27d2:	c0 85       	ldd	r28, Z+8	; 0x08
    27d4:	d1 85       	ldd	r29, Z+9	; 0x09
    27d6:	86 81       	ldd	r24, Z+6	; 0x06
    27d8:	97 81       	ldd	r25, Z+7	; 0x07
    27da:	9d 83       	std	Y+5, r25	; 0x05
    27dc:	8c 83       	std	Y+4, r24	; 0x04
    27de:	11 96       	adiw	r26, 0x01	; 1
    27e0:	8d 91       	ld	r24, X+
    27e2:	9c 91       	ld	r25, X
    27e4:	12 97       	sbiw	r26, 0x02	; 2
    27e6:	9f 01       	movw	r18, r30
    27e8:	2e 5f       	subi	r18, 0xFE	; 254
    27ea:	3f 4f       	sbci	r19, 0xFF	; 255
    27ec:	82 17       	cp	r24, r18
    27ee:	93 07       	cpc	r25, r19
    27f0:	31 f4       	brne	.+12     	; 0x27fe <vTaskRemoveFromUnorderedEventList+0xb2>
    27f2:	80 85       	ldd	r24, Z+8	; 0x08
    27f4:	91 85       	ldd	r25, Z+9	; 0x09
    27f6:	12 96       	adiw	r26, 0x02	; 2
    27f8:	9c 93       	st	X, r25
    27fa:	8e 93       	st	-X, r24
    27fc:	11 97       	sbiw	r26, 0x01	; 1
    27fe:	15 86       	std	Z+13, r1	; 0x0d
    2800:	14 86       	std	Z+12, r1	; 0x0c
    2802:	8c 91       	ld	r24, X
    2804:	81 50       	subi	r24, 0x01	; 1
    2806:	8c 93       	st	X, r24
    2808:	a2 8d       	ldd	r26, Z+26	; 0x1a
    280a:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    280e:	8a 17       	cp	r24, r26
    2810:	10 f4       	brcc	.+4      	; 0x2816 <vTaskRemoveFromUnorderedEventList+0xca>
    2812:	a0 93 45 18 	sts	0x1845, r26	; 0x801845 <uxTopReadyPriority>
    2816:	8b e0       	ldi	r24, 0x0B	; 11
    2818:	8a 9f       	mul	r24, r26
    281a:	d0 01       	movw	r26, r0
    281c:	11 24       	eor	r1, r1
    281e:	a9 57       	subi	r26, 0x79	; 121
    2820:	b7 4e       	sbci	r27, 0xE7	; 231
    2822:	11 96       	adiw	r26, 0x01	; 1
    2824:	0d 90       	ld	r0, X+
    2826:	bc 91       	ld	r27, X
    2828:	a0 2d       	mov	r26, r0
    282a:	b7 83       	std	Z+7, r27	; 0x07
    282c:	a6 83       	std	Z+6, r26	; 0x06
    282e:	16 96       	adiw	r26, 0x06	; 6
    2830:	4d 91       	ld	r20, X+
    2832:	5c 91       	ld	r21, X
    2834:	17 97       	sbiw	r26, 0x07	; 7
    2836:	51 87       	std	Z+9, r21	; 0x09
    2838:	40 87       	std	Z+8, r20	; 0x08
    283a:	16 96       	adiw	r26, 0x06	; 6
    283c:	cd 91       	ld	r28, X+
    283e:	dc 91       	ld	r29, X
    2840:	17 97       	sbiw	r26, 0x07	; 7
    2842:	3d 83       	std	Y+5, r19	; 0x05
    2844:	2c 83       	std	Y+4, r18	; 0x04
    2846:	17 96       	adiw	r26, 0x07	; 7
    2848:	3c 93       	st	X, r19
    284a:	2e 93       	st	-X, r18
    284c:	16 97       	sbiw	r26, 0x06	; 6
    284e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2850:	8a 9f       	mul	r24, r26
    2852:	d0 01       	movw	r26, r0
    2854:	11 24       	eor	r1, r1
    2856:	a9 57       	subi	r26, 0x79	; 121
    2858:	b7 4e       	sbci	r27, 0xE7	; 231
    285a:	b5 87       	std	Z+13, r27	; 0x0d
    285c:	a4 87       	std	Z+12, r26	; 0x0c
    285e:	8c 91       	ld	r24, X
    2860:	8f 5f       	subi	r24, 0xFF	; 255
    2862:	8c 93       	st	X, r24
    2864:	92 8d       	ldd	r25, Z+26	; 0x1a
    2866:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    286a:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    286e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2870:	89 17       	cp	r24, r25
    2872:	18 f4       	brcc	.+6      	; 0x287a <vTaskRemoveFromUnorderedEventList+0x12e>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <xYieldPending>
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	08 95       	ret

00002880 <vTaskSetTimeOutState>:
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	0f 92       	push	r0
    2886:	20 91 3e 18 	lds	r18, 0x183E	; 0x80183e <xNumOfOverflows>
    288a:	fc 01       	movw	r30, r24
    288c:	20 83       	st	Z, r18
    288e:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    2892:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    2896:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    289a:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    289e:	41 83       	std	Z+1, r20	; 0x01
    28a0:	52 83       	std	Z+2, r21	; 0x02
    28a2:	63 83       	std	Z+3, r22	; 0x03
    28a4:	74 83       	std	Z+4, r23	; 0x04
    28a6:	0f 90       	pop	r0
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	08 95       	ret

000028ac <vTaskInternalSetTimeOutState>:
    28ac:	20 91 3e 18 	lds	r18, 0x183E	; 0x80183e <xNumOfOverflows>
    28b0:	fc 01       	movw	r30, r24
    28b2:	20 83       	st	Z, r18
    28b4:	40 91 46 18 	lds	r20, 0x1846	; 0x801846 <xTickCount>
    28b8:	50 91 47 18 	lds	r21, 0x1847	; 0x801847 <xTickCount+0x1>
    28bc:	60 91 48 18 	lds	r22, 0x1848	; 0x801848 <xTickCount+0x2>
    28c0:	70 91 49 18 	lds	r23, 0x1849	; 0x801849 <xTickCount+0x3>
    28c4:	41 83       	std	Z+1, r20	; 0x01
    28c6:	52 83       	std	Z+2, r21	; 0x02
    28c8:	63 83       	std	Z+3, r22	; 0x03
    28ca:	74 83       	std	Z+4, r23	; 0x04
    28cc:	08 95       	ret

000028ce <xTaskCheckForTimeOut>:
    28ce:	8f 92       	push	r8
    28d0:	9f 92       	push	r9
    28d2:	af 92       	push	r10
    28d4:	bf 92       	push	r11
    28d6:	cf 92       	push	r12
    28d8:	df 92       	push	r13
    28da:	ef 92       	push	r14
    28dc:	ff 92       	push	r15
    28de:	0f 93       	push	r16
    28e0:	1f 93       	push	r17
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	fb 01       	movw	r30, r22
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	0f 92       	push	r0
    28ee:	c0 90 46 18 	lds	r12, 0x1846	; 0x801846 <xTickCount>
    28f2:	d0 90 47 18 	lds	r13, 0x1847	; 0x801847 <xTickCount+0x1>
    28f6:	e0 90 48 18 	lds	r14, 0x1848	; 0x801848 <xTickCount+0x2>
    28fa:	f0 90 49 18 	lds	r15, 0x1849	; 0x801849 <xTickCount+0x3>
    28fe:	dc 01       	movw	r26, r24
    2900:	11 96       	adiw	r26, 0x01	; 1
    2902:	0d 91       	ld	r16, X+
    2904:	1d 91       	ld	r17, X+
    2906:	2d 91       	ld	r18, X+
    2908:	3c 91       	ld	r19, X
    290a:	14 97       	sbiw	r26, 0x04	; 4
    290c:	46 01       	movw	r8, r12
    290e:	57 01       	movw	r10, r14
    2910:	80 1a       	sub	r8, r16
    2912:	91 0a       	sbc	r9, r17
    2914:	a2 0a       	sbc	r10, r18
    2916:	b3 0a       	sbc	r11, r19
    2918:	40 81       	ld	r20, Z
    291a:	51 81       	ldd	r21, Z+1	; 0x01
    291c:	62 81       	ldd	r22, Z+2	; 0x02
    291e:	73 81       	ldd	r23, Z+3	; 0x03
    2920:	4f 3f       	cpi	r20, 0xFF	; 255
    2922:	bf ef       	ldi	r27, 0xFF	; 255
    2924:	5b 07       	cpc	r21, r27
    2926:	6b 07       	cpc	r22, r27
    2928:	7b 07       	cpc	r23, r27
    292a:	39 f1       	breq	.+78     	; 0x297a <xTaskCheckForTimeOut+0xac>
    292c:	ec 01       	movw	r28, r24
    292e:	b8 81       	ld	r27, Y
    2930:	a0 91 3e 18 	lds	r26, 0x183E	; 0x80183e <xNumOfOverflows>
    2934:	ba 17       	cp	r27, r26
    2936:	59 f0       	breq	.+22     	; 0x294e <xTaskCheckForTimeOut+0x80>
    2938:	c0 16       	cp	r12, r16
    293a:	d1 06       	cpc	r13, r17
    293c:	e2 06       	cpc	r14, r18
    293e:	f3 06       	cpc	r15, r19
    2940:	30 f0       	brcs	.+12     	; 0x294e <xTaskCheckForTimeOut+0x80>
    2942:	10 82       	st	Z, r1
    2944:	11 82       	std	Z+1, r1	; 0x01
    2946:	12 82       	std	Z+2, r1	; 0x02
    2948:	13 82       	std	Z+3, r1	; 0x03
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	17 c0       	rjmp	.+46     	; 0x297c <xTaskCheckForTimeOut+0xae>
    294e:	84 16       	cp	r8, r20
    2950:	95 06       	cpc	r9, r21
    2952:	a6 06       	cpc	r10, r22
    2954:	b7 06       	cpc	r11, r23
    2956:	58 f4       	brcc	.+22     	; 0x296e <xTaskCheckForTimeOut+0xa0>
    2958:	48 19       	sub	r20, r8
    295a:	59 09       	sbc	r21, r9
    295c:	6a 09       	sbc	r22, r10
    295e:	7b 09       	sbc	r23, r11
    2960:	40 83       	st	Z, r20
    2962:	51 83       	std	Z+1, r21	; 0x01
    2964:	62 83       	std	Z+2, r22	; 0x02
    2966:	73 83       	std	Z+3, r23	; 0x03
    2968:	a1 df       	rcall	.-190    	; 0x28ac <vTaskInternalSetTimeOutState>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	07 c0       	rjmp	.+14     	; 0x297c <xTaskCheckForTimeOut+0xae>
    296e:	10 82       	st	Z, r1
    2970:	11 82       	std	Z+1, r1	; 0x01
    2972:	12 82       	std	Z+2, r1	; 0x02
    2974:	13 82       	std	Z+3, r1	; 0x03
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	01 c0       	rjmp	.+2      	; 0x297c <xTaskCheckForTimeOut+0xae>
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	0f 90       	pop	r0
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	ff 90       	pop	r15
    298a:	ef 90       	pop	r14
    298c:	df 90       	pop	r13
    298e:	cf 90       	pop	r12
    2990:	bf 90       	pop	r11
    2992:	af 90       	pop	r10
    2994:	9f 90       	pop	r9
    2996:	8f 90       	pop	r8
    2998:	08 95       	ret

0000299a <vTaskMissedYield>:
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	80 93 3f 18 	sts	0x183F, r24	; 0x80183f <xYieldPending>
    29a0:	08 95       	ret

000029a2 <xTaskGetCurrentTaskHandle>:
    29a2:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    29a6:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    29aa:	08 95       	ret

000029ac <xTaskGetSchedulerState>:
    29ac:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <xSchedulerRunning>
    29b0:	88 23       	and	r24, r24
    29b2:	31 f0       	breq	.+12     	; 0x29c0 <xTaskGetSchedulerState+0x14>
    29b4:	80 91 36 18 	lds	r24, 0x1836	; 0x801836 <uxSchedulerSuspended>
    29b8:	81 11       	cpse	r24, r1
    29ba:	04 c0       	rjmp	.+8      	; 0x29c4 <xTaskGetSchedulerState+0x18>
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	08 95       	ret
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	08 95       	ret
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	08 95       	ret

000029c8 <xTaskPriorityDisinherit>:
    29c8:	0f 93       	push	r16
    29ca:	1f 93       	push	r17
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	fc 01       	movw	r30, r24
    29d2:	89 2b       	or	r24, r25
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <xTaskPriorityDisinherit+0x10>
    29d6:	49 c0       	rjmp	.+146    	; 0x2a6a <xTaskPriorityDisinherit+0xa2>
    29d8:	86 a5       	ldd	r24, Z+46	; 0x2e
    29da:	81 50       	subi	r24, 0x01	; 1
    29dc:	86 a7       	std	Z+46, r24	; 0x2e
    29de:	22 8d       	ldd	r18, Z+26	; 0x1a
    29e0:	95 a5       	ldd	r25, Z+45	; 0x2d
    29e2:	29 17       	cp	r18, r25
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <xTaskPriorityDisinherit+0x20>
    29e6:	43 c0       	rjmp	.+134    	; 0x2a6e <xTaskPriorityDisinherit+0xa6>
    29e8:	81 11       	cpse	r24, r1
    29ea:	43 c0       	rjmp	.+134    	; 0x2a72 <xTaskPriorityDisinherit+0xaa>
    29ec:	ef 01       	movw	r28, r30
    29ee:	8f 01       	movw	r16, r30
    29f0:	0e 5f       	subi	r16, 0xFE	; 254
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	c8 01       	movw	r24, r16
    29f6:	0e 94 6d 05 	call	0xada	; 0xada <uxListRemove>
    29fa:	ed a5       	ldd	r30, Y+45	; 0x2d
    29fc:	ea 8f       	std	Y+26, r30	; 0x1a
    29fe:	8a e0       	ldi	r24, 0x0A	; 10
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	8e 1b       	sub	r24, r30
    2a08:	91 09       	sbc	r25, r1
    2a0a:	a1 09       	sbc	r26, r1
    2a0c:	b1 09       	sbc	r27, r1
    2a0e:	8e 87       	std	Y+14, r24	; 0x0e
    2a10:	9f 87       	std	Y+15, r25	; 0x0f
    2a12:	a8 8b       	std	Y+16, r26	; 0x10
    2a14:	b9 8b       	std	Y+17, r27	; 0x11
    2a16:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    2a1a:	8e 17       	cp	r24, r30
    2a1c:	10 f4       	brcc	.+4      	; 0x2a22 <xTaskPriorityDisinherit+0x5a>
    2a1e:	e0 93 45 18 	sts	0x1845, r30	; 0x801845 <uxTopReadyPriority>
    2a22:	8b e0       	ldi	r24, 0x0B	; 11
    2a24:	8e 9f       	mul	r24, r30
    2a26:	f0 01       	movw	r30, r0
    2a28:	11 24       	eor	r1, r1
    2a2a:	e9 57       	subi	r30, 0x79	; 121
    2a2c:	f7 4e       	sbci	r31, 0xE7	; 231
    2a2e:	01 80       	ldd	r0, Z+1	; 0x01
    2a30:	f2 81       	ldd	r31, Z+2	; 0x02
    2a32:	e0 2d       	mov	r30, r0
    2a34:	ff 83       	std	Y+7, r31	; 0x07
    2a36:	ee 83       	std	Y+6, r30	; 0x06
    2a38:	26 81       	ldd	r18, Z+6	; 0x06
    2a3a:	37 81       	ldd	r19, Z+7	; 0x07
    2a3c:	39 87       	std	Y+9, r19	; 0x09
    2a3e:	28 87       	std	Y+8, r18	; 0x08
    2a40:	a6 81       	ldd	r26, Z+6	; 0x06
    2a42:	b7 81       	ldd	r27, Z+7	; 0x07
    2a44:	15 96       	adiw	r26, 0x05	; 5
    2a46:	1c 93       	st	X, r17
    2a48:	0e 93       	st	-X, r16
    2a4a:	14 97       	sbiw	r26, 0x04	; 4
    2a4c:	17 83       	std	Z+7, r17	; 0x07
    2a4e:	06 83       	std	Z+6, r16	; 0x06
    2a50:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a52:	8e 9f       	mul	r24, r30
    2a54:	f0 01       	movw	r30, r0
    2a56:	11 24       	eor	r1, r1
    2a58:	e9 57       	subi	r30, 0x79	; 121
    2a5a:	f7 4e       	sbci	r31, 0xE7	; 231
    2a5c:	fd 87       	std	Y+13, r31	; 0x0d
    2a5e:	ec 87       	std	Y+12, r30	; 0x0c
    2a60:	80 81       	ld	r24, Z
    2a62:	8f 5f       	subi	r24, 0xFF	; 255
    2a64:	80 83       	st	Z, r24
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	05 c0       	rjmp	.+10     	; 0x2a74 <xTaskPriorityDisinherit+0xac>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <xTaskPriorityDisinherit+0xac>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	01 c0       	rjmp	.+2      	; 0x2a74 <xTaskPriorityDisinherit+0xac>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	08 95       	ret

00002a7e <uxTaskResetEventItemValue>:
    2a7e:	cf 92       	push	r12
    2a80:	df 92       	push	r13
    2a82:	ef 92       	push	r14
    2a84:	ff 92       	push	r15
    2a86:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2a8a:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2a8e:	66 85       	ldd	r22, Z+14	; 0x0e
    2a90:	77 85       	ldd	r23, Z+15	; 0x0f
    2a92:	80 89       	ldd	r24, Z+16	; 0x10
    2a94:	91 89       	ldd	r25, Z+17	; 0x11
    2a96:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2a9a:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2a9e:	a0 91 f5 18 	lds	r26, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2aa2:	b0 91 f6 18 	lds	r27, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2aa6:	5a 96       	adiw	r26, 0x1a	; 26
    2aa8:	2c 91       	ld	r18, X
    2aaa:	0f 2e       	mov	r0, r31
    2aac:	fa e0       	ldi	r31, 0x0A	; 10
    2aae:	cf 2e       	mov	r12, r31
    2ab0:	d1 2c       	mov	r13, r1
    2ab2:	e1 2c       	mov	r14, r1
    2ab4:	f1 2c       	mov	r15, r1
    2ab6:	f0 2d       	mov	r31, r0
    2ab8:	c2 1a       	sub	r12, r18
    2aba:	d1 08       	sbc	r13, r1
    2abc:	e1 08       	sbc	r14, r1
    2abe:	f1 08       	sbc	r15, r1
    2ac0:	c6 86       	std	Z+14, r12	; 0x0e
    2ac2:	d7 86       	std	Z+15, r13	; 0x0f
    2ac4:	e0 8a       	std	Z+16, r14	; 0x10
    2ac6:	f1 8a       	std	Z+17, r15	; 0x11
    2ac8:	ff 90       	pop	r15
    2aca:	ef 90       	pop	r14
    2acc:	df 90       	pop	r13
    2ace:	cf 90       	pop	r12
    2ad0:	08 95       	ret

00002ad2 <xTaskGenericNotifyWait>:
    2ad2:	4f 92       	push	r4
    2ad4:	5f 92       	push	r5
    2ad6:	6f 92       	push	r6
    2ad8:	7f 92       	push	r7
    2ada:	af 92       	push	r10
    2adc:	bf 92       	push	r11
    2ade:	cf 92       	push	r12
    2ae0:	df 92       	push	r13
    2ae2:	ef 92       	push	r14
    2ae4:	ff 92       	push	r15
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	28 01       	movw	r4, r16
    2af0:	39 01       	movw	r6, r18
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	0f 92       	push	r0
    2af8:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2afc:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2b00:	c8 2f       	mov	r28, r24
    2b02:	d0 e0       	ldi	r29, 0x00	; 0
    2b04:	ec 0f       	add	r30, r28
    2b06:	fd 1f       	adc	r31, r29
    2b08:	83 a9       	ldd	r24, Z+51	; 0x33
    2b0a:	82 30       	cpi	r24, 0x02	; 2
    2b0c:	71 f1       	breq	.+92     	; 0x2b6a <xTaskGenericNotifyWait+0x98>
    2b0e:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2b12:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2b16:	ce 01       	movw	r24, r28
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	e8 0f       	add	r30, r24
    2b22:	f9 1f       	adc	r31, r25
    2b24:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b26:	90 a9       	ldd	r25, Z+48	; 0x30
    2b28:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b2a:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b2c:	40 95       	com	r20
    2b2e:	50 95       	com	r21
    2b30:	60 95       	com	r22
    2b32:	70 95       	com	r23
    2b34:	48 23       	and	r20, r24
    2b36:	59 23       	and	r21, r25
    2b38:	6a 23       	and	r22, r26
    2b3a:	7b 23       	and	r23, r27
    2b3c:	47 a7       	std	Z+47, r20	; 0x2f
    2b3e:	50 ab       	std	Z+48, r21	; 0x30
    2b40:	61 ab       	std	Z+49, r22	; 0x31
    2b42:	72 ab       	std	Z+50, r23	; 0x32
    2b44:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2b48:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2b4c:	ec 0f       	add	r30, r28
    2b4e:	fd 1f       	adc	r31, r29
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	83 ab       	std	Z+51, r24	; 0x33
    2b54:	a1 14       	cp	r10, r1
    2b56:	b1 04       	cpc	r11, r1
    2b58:	c1 04       	cpc	r12, r1
    2b5a:	d1 04       	cpc	r13, r1
    2b5c:	31 f0       	breq	.+12     	; 0x2b6a <xTaskGenericNotifyWait+0x98>
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	c6 01       	movw	r24, r12
    2b62:	b5 01       	movw	r22, r10
    2b64:	7a d8       	rcall	.-3852   	; 0x1c5a <prvAddCurrentTaskToDelayedList>
    2b66:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    2b6a:	0f 90       	pop	r0
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	0f 92       	push	r0
    2b74:	e1 14       	cp	r14, r1
    2b76:	f1 04       	cpc	r15, r1
    2b78:	a1 f0       	breq	.+40     	; 0x2ba2 <xTaskGenericNotifyWait+0xd0>
    2b7a:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2b7e:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2b82:	ce 01       	movw	r24, r28
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	e8 0f       	add	r30, r24
    2b8e:	f9 1f       	adc	r31, r25
    2b90:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b92:	90 a9       	ldd	r25, Z+48	; 0x30
    2b94:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b96:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b98:	f7 01       	movw	r30, r14
    2b9a:	80 83       	st	Z, r24
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	a2 83       	std	Z+2, r26	; 0x02
    2ba0:	b3 83       	std	Z+3, r27	; 0x03
    2ba2:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2ba6:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2baa:	ec 0f       	add	r30, r28
    2bac:	fd 1f       	adc	r31, r29
    2bae:	83 a9       	ldd	r24, Z+51	; 0x33
    2bb0:	82 30       	cpi	r24, 0x02	; 2
    2bb2:	e9 f4       	brne	.+58     	; 0x2bee <xTaskGenericNotifyWait+0x11c>
    2bb4:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2bb8:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2bbc:	ce 01       	movw	r24, r28
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	e8 0f       	add	r30, r24
    2bc8:	f9 1f       	adc	r31, r25
    2bca:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bcc:	90 a9       	ldd	r25, Z+48	; 0x30
    2bce:	a1 a9       	ldd	r26, Z+49	; 0x31
    2bd0:	b2 a9       	ldd	r27, Z+50	; 0x32
    2bd2:	40 94       	com	r4
    2bd4:	50 94       	com	r5
    2bd6:	60 94       	com	r6
    2bd8:	70 94       	com	r7
    2bda:	48 22       	and	r4, r24
    2bdc:	59 22       	and	r5, r25
    2bde:	6a 22       	and	r6, r26
    2be0:	7b 22       	and	r7, r27
    2be2:	47 a6       	std	Z+47, r4	; 0x2f
    2be4:	50 aa       	std	Z+48, r5	; 0x30
    2be6:	61 aa       	std	Z+49, r6	; 0x31
    2be8:	72 aa       	std	Z+50, r7	; 0x32
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	01 c0       	rjmp	.+2      	; 0x2bf0 <xTaskGenericNotifyWait+0x11e>
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	20 91 f5 18 	lds	r18, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2bf4:	30 91 f6 18 	lds	r19, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2bf8:	c2 0f       	add	r28, r18
    2bfa:	d3 1f       	adc	r29, r19
    2bfc:	1b aa       	std	Y+51, r1	; 0x33
    2bfe:	0f 90       	pop	r0
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	df 90       	pop	r13
    2c10:	cf 90       	pop	r12
    2c12:	bf 90       	pop	r11
    2c14:	af 90       	pop	r10
    2c16:	7f 90       	pop	r7
    2c18:	6f 90       	pop	r6
    2c1a:	5f 90       	pop	r5
    2c1c:	4f 90       	pop	r4
    2c1e:	08 95       	ret

00002c20 <xTaskGenericNotify>:
    2c20:	8f 92       	push	r8
    2c22:	9f 92       	push	r9
    2c24:	af 92       	push	r10
    2c26:	bf 92       	push	r11
    2c28:	ef 92       	push	r14
    2c2a:	ff 92       	push	r15
    2c2c:	0f 93       	push	r16
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	dc 01       	movw	r26, r24
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	0f 92       	push	r0
    2c3a:	e1 14       	cp	r14, r1
    2c3c:	f1 04       	cpc	r15, r1
    2c3e:	89 f0       	breq	.+34     	; 0x2c62 <xTaskGenericNotify+0x42>
    2c40:	e6 2f       	mov	r30, r22
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	ee 0f       	add	r30, r30
    2c46:	ff 1f       	adc	r31, r31
    2c48:	ee 0f       	add	r30, r30
    2c4a:	ff 1f       	adc	r31, r31
    2c4c:	e8 0f       	add	r30, r24
    2c4e:	f9 1f       	adc	r31, r25
    2c50:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c52:	90 a8       	ldd	r9, Z+48	; 0x30
    2c54:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c56:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c58:	f7 01       	movw	r30, r14
    2c5a:	80 82       	st	Z, r8
    2c5c:	91 82       	std	Z+1, r9	; 0x01
    2c5e:	a2 82       	std	Z+2, r10	; 0x02
    2c60:	b3 82       	std	Z+3, r11	; 0x03
    2c62:	70 e0       	ldi	r23, 0x00	; 0
    2c64:	fd 01       	movw	r30, r26
    2c66:	e6 0f       	add	r30, r22
    2c68:	f7 1f       	adc	r31, r23
    2c6a:	83 a9       	ldd	r24, Z+51	; 0x33
    2c6c:	92 e0       	ldi	r25, 0x02	; 2
    2c6e:	93 ab       	std	Z+51, r25	; 0x33
    2c70:	02 30       	cpi	r16, 0x02	; 2
    2c72:	01 f1       	breq	.+64     	; 0x2cb4 <xTaskGenericNotify+0x94>
    2c74:	18 f4       	brcc	.+6      	; 0x2c7c <xTaskGenericNotify+0x5c>
    2c76:	01 30       	cpi	r16, 0x01	; 1
    2c78:	31 f0       	breq	.+12     	; 0x2c86 <xTaskGenericNotify+0x66>
    2c7a:	4d c0       	rjmp	.+154    	; 0x2d16 <xTaskGenericNotify+0xf6>
    2c7c:	03 30       	cpi	r16, 0x03	; 3
    2c7e:	79 f1       	breq	.+94     	; 0x2cde <xTaskGenericNotify+0xbe>
    2c80:	04 30       	cpi	r16, 0x04	; 4
    2c82:	d1 f1       	breq	.+116    	; 0x2cf8 <xTaskGenericNotify+0xd8>
    2c84:	48 c0       	rjmp	.+144    	; 0x2d16 <xTaskGenericNotify+0xf6>
    2c86:	66 0f       	add	r22, r22
    2c88:	77 1f       	adc	r23, r23
    2c8a:	66 0f       	add	r22, r22
    2c8c:	77 1f       	adc	r23, r23
    2c8e:	fd 01       	movw	r30, r26
    2c90:	e6 0f       	add	r30, r22
    2c92:	f7 1f       	adc	r31, r23
    2c94:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c96:	90 a8       	ldd	r9, Z+48	; 0x30
    2c98:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c9a:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c9c:	ba 01       	movw	r22, r20
    2c9e:	a9 01       	movw	r20, r18
    2ca0:	48 29       	or	r20, r8
    2ca2:	59 29       	or	r21, r9
    2ca4:	6a 29       	or	r22, r10
    2ca6:	7b 29       	or	r23, r11
    2ca8:	47 a7       	std	Z+47, r20	; 0x2f
    2caa:	50 ab       	std	Z+48, r21	; 0x30
    2cac:	61 ab       	std	Z+49, r22	; 0x31
    2cae:	72 ab       	std	Z+50, r23	; 0x32
    2cb0:	01 e0       	ldi	r16, 0x01	; 1
    2cb2:	34 c0       	rjmp	.+104    	; 0x2d1c <xTaskGenericNotify+0xfc>
    2cb4:	66 0f       	add	r22, r22
    2cb6:	77 1f       	adc	r23, r23
    2cb8:	66 0f       	add	r22, r22
    2cba:	77 1f       	adc	r23, r23
    2cbc:	fd 01       	movw	r30, r26
    2cbe:	e6 0f       	add	r30, r22
    2cc0:	f7 1f       	adc	r31, r23
    2cc2:	47 a5       	ldd	r20, Z+47	; 0x2f
    2cc4:	50 a9       	ldd	r21, Z+48	; 0x30
    2cc6:	61 a9       	ldd	r22, Z+49	; 0x31
    2cc8:	72 a9       	ldd	r23, Z+50	; 0x32
    2cca:	4f 5f       	subi	r20, 0xFF	; 255
    2ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    2cce:	6f 4f       	sbci	r22, 0xFF	; 255
    2cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd2:	47 a7       	std	Z+47, r20	; 0x2f
    2cd4:	50 ab       	std	Z+48, r21	; 0x30
    2cd6:	61 ab       	std	Z+49, r22	; 0x31
    2cd8:	72 ab       	std	Z+50, r23	; 0x32
    2cda:	01 e0       	ldi	r16, 0x01	; 1
    2cdc:	1f c0       	rjmp	.+62     	; 0x2d1c <xTaskGenericNotify+0xfc>
    2cde:	66 0f       	add	r22, r22
    2ce0:	77 1f       	adc	r23, r23
    2ce2:	66 0f       	add	r22, r22
    2ce4:	77 1f       	adc	r23, r23
    2ce6:	fd 01       	movw	r30, r26
    2ce8:	e6 0f       	add	r30, r22
    2cea:	f7 1f       	adc	r31, r23
    2cec:	27 a7       	std	Z+47, r18	; 0x2f
    2cee:	30 ab       	std	Z+48, r19	; 0x30
    2cf0:	41 ab       	std	Z+49, r20	; 0x31
    2cf2:	52 ab       	std	Z+50, r21	; 0x32
    2cf4:	01 e0       	ldi	r16, 0x01	; 1
    2cf6:	12 c0       	rjmp	.+36     	; 0x2d1c <xTaskGenericNotify+0xfc>
    2cf8:	82 30       	cpi	r24, 0x02	; 2
    2cfa:	79 f0       	breq	.+30     	; 0x2d1a <xTaskGenericNotify+0xfa>
    2cfc:	66 0f       	add	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	66 0f       	add	r22, r22
    2d02:	77 1f       	adc	r23, r23
    2d04:	fd 01       	movw	r30, r26
    2d06:	e6 0f       	add	r30, r22
    2d08:	f7 1f       	adc	r31, r23
    2d0a:	27 a7       	std	Z+47, r18	; 0x2f
    2d0c:	30 ab       	std	Z+48, r19	; 0x30
    2d0e:	41 ab       	std	Z+49, r20	; 0x31
    2d10:	52 ab       	std	Z+50, r21	; 0x32
    2d12:	01 e0       	ldi	r16, 0x01	; 1
    2d14:	03 c0       	rjmp	.+6      	; 0x2d1c <xTaskGenericNotify+0xfc>
    2d16:	01 e0       	ldi	r16, 0x01	; 1
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <xTaskGenericNotify+0xfc>
    2d1a:	00 e0       	ldi	r16, 0x00	; 0
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	09 f0       	breq	.+2      	; 0x2d22 <xTaskGenericNotify+0x102>
    2d20:	69 c0       	rjmp	.+210    	; 0x2df4 <xTaskGenericNotify+0x1d4>
    2d22:	1c 96       	adiw	r26, 0x0c	; 12
    2d24:	ed 91       	ld	r30, X+
    2d26:	fc 91       	ld	r31, X
    2d28:	1d 97       	sbiw	r26, 0x0d	; 13
    2d2a:	16 96       	adiw	r26, 0x06	; 6
    2d2c:	cd 91       	ld	r28, X+
    2d2e:	dc 91       	ld	r29, X
    2d30:	17 97       	sbiw	r26, 0x07	; 7
    2d32:	18 96       	adiw	r26, 0x08	; 8
    2d34:	8d 91       	ld	r24, X+
    2d36:	9c 91       	ld	r25, X
    2d38:	19 97       	sbiw	r26, 0x09	; 9
    2d3a:	9f 83       	std	Y+7, r25	; 0x07
    2d3c:	8e 83       	std	Y+6, r24	; 0x06
    2d3e:	18 96       	adiw	r26, 0x08	; 8
    2d40:	cd 91       	ld	r28, X+
    2d42:	dc 91       	ld	r29, X
    2d44:	19 97       	sbiw	r26, 0x09	; 9
    2d46:	16 96       	adiw	r26, 0x06	; 6
    2d48:	8d 91       	ld	r24, X+
    2d4a:	9c 91       	ld	r25, X
    2d4c:	17 97       	sbiw	r26, 0x07	; 7
    2d4e:	9d 83       	std	Y+5, r25	; 0x05
    2d50:	8c 83       	std	Y+4, r24	; 0x04
    2d52:	81 81       	ldd	r24, Z+1	; 0x01
    2d54:	92 81       	ldd	r25, Z+2	; 0x02
    2d56:	9d 01       	movw	r18, r26
    2d58:	2e 5f       	subi	r18, 0xFE	; 254
    2d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5c:	82 17       	cp	r24, r18
    2d5e:	93 07       	cpc	r25, r19
    2d60:	31 f4       	brne	.+12     	; 0x2d6e <xTaskGenericNotify+0x14e>
    2d62:	18 96       	adiw	r26, 0x08	; 8
    2d64:	8d 91       	ld	r24, X+
    2d66:	9c 91       	ld	r25, X
    2d68:	19 97       	sbiw	r26, 0x09	; 9
    2d6a:	92 83       	std	Z+2, r25	; 0x02
    2d6c:	81 83       	std	Z+1, r24	; 0x01
    2d6e:	1d 96       	adiw	r26, 0x0d	; 13
    2d70:	1c 92       	st	X, r1
    2d72:	1e 92       	st	-X, r1
    2d74:	1c 97       	sbiw	r26, 0x0c	; 12
    2d76:	80 81       	ld	r24, Z
    2d78:	81 50       	subi	r24, 0x01	; 1
    2d7a:	80 83       	st	Z, r24
    2d7c:	5a 96       	adiw	r26, 0x1a	; 26
    2d7e:	ec 91       	ld	r30, X
    2d80:	5a 97       	sbiw	r26, 0x1a	; 26
    2d82:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <uxTopReadyPriority>
    2d86:	8e 17       	cp	r24, r30
    2d88:	10 f4       	brcc	.+4      	; 0x2d8e <xTaskGenericNotify+0x16e>
    2d8a:	e0 93 45 18 	sts	0x1845, r30	; 0x801845 <uxTopReadyPriority>
    2d8e:	8b e0       	ldi	r24, 0x0B	; 11
    2d90:	8e 9f       	mul	r24, r30
    2d92:	f0 01       	movw	r30, r0
    2d94:	11 24       	eor	r1, r1
    2d96:	e9 57       	subi	r30, 0x79	; 121
    2d98:	f7 4e       	sbci	r31, 0xE7	; 231
    2d9a:	01 80       	ldd	r0, Z+1	; 0x01
    2d9c:	f2 81       	ldd	r31, Z+2	; 0x02
    2d9e:	e0 2d       	mov	r30, r0
    2da0:	17 96       	adiw	r26, 0x07	; 7
    2da2:	fc 93       	st	X, r31
    2da4:	ee 93       	st	-X, r30
    2da6:	16 97       	sbiw	r26, 0x06	; 6
    2da8:	46 81       	ldd	r20, Z+6	; 0x06
    2daa:	57 81       	ldd	r21, Z+7	; 0x07
    2dac:	19 96       	adiw	r26, 0x09	; 9
    2dae:	5c 93       	st	X, r21
    2db0:	4e 93       	st	-X, r20
    2db2:	18 97       	sbiw	r26, 0x08	; 8
    2db4:	c6 81       	ldd	r28, Z+6	; 0x06
    2db6:	d7 81       	ldd	r29, Z+7	; 0x07
    2db8:	3d 83       	std	Y+5, r19	; 0x05
    2dba:	2c 83       	std	Y+4, r18	; 0x04
    2dbc:	37 83       	std	Z+7, r19	; 0x07
    2dbe:	26 83       	std	Z+6, r18	; 0x06
    2dc0:	5a 96       	adiw	r26, 0x1a	; 26
    2dc2:	ec 91       	ld	r30, X
    2dc4:	5a 97       	sbiw	r26, 0x1a	; 26
    2dc6:	8e 9f       	mul	r24, r30
    2dc8:	f0 01       	movw	r30, r0
    2dca:	11 24       	eor	r1, r1
    2dcc:	e9 57       	subi	r30, 0x79	; 121
    2dce:	f7 4e       	sbci	r31, 0xE7	; 231
    2dd0:	1d 96       	adiw	r26, 0x0d	; 13
    2dd2:	fc 93       	st	X, r31
    2dd4:	ee 93       	st	-X, r30
    2dd6:	1c 97       	sbiw	r26, 0x0c	; 12
    2dd8:	80 81       	ld	r24, Z
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	80 83       	st	Z, r24
    2dde:	5a 96       	adiw	r26, 0x1a	; 26
    2de0:	9c 91       	ld	r25, X
    2de2:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    2de6:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    2dea:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dec:	89 17       	cp	r24, r25
    2dee:	10 f4       	brcc	.+4      	; 0x2df4 <xTaskGenericNotify+0x1d4>
    2df0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    2df4:	0f 90       	pop	r0
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	80 2f       	mov	r24, r16
    2dfa:	df 91       	pop	r29
    2dfc:	cf 91       	pop	r28
    2dfe:	0f 91       	pop	r16
    2e00:	ff 90       	pop	r15
    2e02:	ef 90       	pop	r14
    2e04:	bf 90       	pop	r11
    2e06:	af 90       	pop	r10
    2e08:	9f 90       	pop	r9
    2e0a:	8f 90       	pop	r8
    2e0c:	08 95       	ret

00002e0e <xTaskGenericNotifyFromISR>:
    2e0e:	8f 92       	push	r8
    2e10:	9f 92       	push	r9
    2e12:	af 92       	push	r10
    2e14:	bf 92       	push	r11
    2e16:	cf 92       	push	r12
    2e18:	df 92       	push	r13
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	dc 01       	movw	r26, r24
    2e26:	e1 14       	cp	r14, r1
    2e28:	f1 04       	cpc	r15, r1
    2e2a:	89 f0       	breq	.+34     	; 0x2e4e <xTaskGenericNotifyFromISR+0x40>
    2e2c:	e6 2f       	mov	r30, r22
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	ee 0f       	add	r30, r30
    2e32:	ff 1f       	adc	r31, r31
    2e34:	ee 0f       	add	r30, r30
    2e36:	ff 1f       	adc	r31, r31
    2e38:	e8 0f       	add	r30, r24
    2e3a:	f9 1f       	adc	r31, r25
    2e3c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e3e:	90 a8       	ldd	r9, Z+48	; 0x30
    2e40:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e42:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e44:	f7 01       	movw	r30, r14
    2e46:	80 82       	st	Z, r8
    2e48:	91 82       	std	Z+1, r9	; 0x01
    2e4a:	a2 82       	std	Z+2, r10	; 0x02
    2e4c:	b3 82       	std	Z+3, r11	; 0x03
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	fd 01       	movw	r30, r26
    2e52:	e6 0f       	add	r30, r22
    2e54:	f7 1f       	adc	r31, r23
    2e56:	93 a9       	ldd	r25, Z+51	; 0x33
    2e58:	82 e0       	ldi	r24, 0x02	; 2
    2e5a:	83 ab       	std	Z+51, r24	; 0x33
    2e5c:	02 30       	cpi	r16, 0x02	; 2
    2e5e:	01 f1       	breq	.+64     	; 0x2ea0 <xTaskGenericNotifyFromISR+0x92>
    2e60:	18 f4       	brcc	.+6      	; 0x2e68 <xTaskGenericNotifyFromISR+0x5a>
    2e62:	01 30       	cpi	r16, 0x01	; 1
    2e64:	31 f0       	breq	.+12     	; 0x2e72 <xTaskGenericNotifyFromISR+0x64>
    2e66:	4d c0       	rjmp	.+154    	; 0x2f02 <xTaskGenericNotifyFromISR+0xf4>
    2e68:	03 30       	cpi	r16, 0x03	; 3
    2e6a:	79 f1       	breq	.+94     	; 0x2eca <xTaskGenericNotifyFromISR+0xbc>
    2e6c:	04 30       	cpi	r16, 0x04	; 4
    2e6e:	d1 f1       	breq	.+116    	; 0x2ee4 <xTaskGenericNotifyFromISR+0xd6>
    2e70:	48 c0       	rjmp	.+144    	; 0x2f02 <xTaskGenericNotifyFromISR+0xf4>
    2e72:	66 0f       	add	r22, r22
    2e74:	77 1f       	adc	r23, r23
    2e76:	66 0f       	add	r22, r22
    2e78:	77 1f       	adc	r23, r23
    2e7a:	fd 01       	movw	r30, r26
    2e7c:	e6 0f       	add	r30, r22
    2e7e:	f7 1f       	adc	r31, r23
    2e80:	87 a4       	ldd	r8, Z+47	; 0x2f
    2e82:	90 a8       	ldd	r9, Z+48	; 0x30
    2e84:	a1 a8       	ldd	r10, Z+49	; 0x31
    2e86:	b2 a8       	ldd	r11, Z+50	; 0x32
    2e88:	ba 01       	movw	r22, r20
    2e8a:	a9 01       	movw	r20, r18
    2e8c:	48 29       	or	r20, r8
    2e8e:	59 29       	or	r21, r9
    2e90:	6a 29       	or	r22, r10
    2e92:	7b 29       	or	r23, r11
    2e94:	47 a7       	std	Z+47, r20	; 0x2f
    2e96:	50 ab       	std	Z+48, r21	; 0x30
    2e98:	61 ab       	std	Z+49, r22	; 0x31
    2e9a:	72 ab       	std	Z+50, r23	; 0x32
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	34 c0       	rjmp	.+104    	; 0x2f08 <xTaskGenericNotifyFromISR+0xfa>
    2ea0:	66 0f       	add	r22, r22
    2ea2:	77 1f       	adc	r23, r23
    2ea4:	66 0f       	add	r22, r22
    2ea6:	77 1f       	adc	r23, r23
    2ea8:	fd 01       	movw	r30, r26
    2eaa:	e6 0f       	add	r30, r22
    2eac:	f7 1f       	adc	r31, r23
    2eae:	47 a5       	ldd	r20, Z+47	; 0x2f
    2eb0:	50 a9       	ldd	r21, Z+48	; 0x30
    2eb2:	61 a9       	ldd	r22, Z+49	; 0x31
    2eb4:	72 a9       	ldd	r23, Z+50	; 0x32
    2eb6:	4f 5f       	subi	r20, 0xFF	; 255
    2eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eba:	6f 4f       	sbci	r22, 0xFF	; 255
    2ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ebe:	47 a7       	std	Z+47, r20	; 0x2f
    2ec0:	50 ab       	std	Z+48, r21	; 0x30
    2ec2:	61 ab       	std	Z+49, r22	; 0x31
    2ec4:	72 ab       	std	Z+50, r23	; 0x32
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	1f c0       	rjmp	.+62     	; 0x2f08 <xTaskGenericNotifyFromISR+0xfa>
    2eca:	66 0f       	add	r22, r22
    2ecc:	77 1f       	adc	r23, r23
    2ece:	66 0f       	add	r22, r22
    2ed0:	77 1f       	adc	r23, r23
    2ed2:	fd 01       	movw	r30, r26
    2ed4:	e6 0f       	add	r30, r22
    2ed6:	f7 1f       	adc	r31, r23
    2ed8:	27 a7       	std	Z+47, r18	; 0x2f
    2eda:	30 ab       	std	Z+48, r19	; 0x30
    2edc:	41 ab       	std	Z+49, r20	; 0x31
    2ede:	52 ab       	std	Z+50, r21	; 0x32
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	12 c0       	rjmp	.+36     	; 0x2f08 <xTaskGenericNotifyFromISR+0xfa>
    2ee4:	92 30       	cpi	r25, 0x02	; 2
    2ee6:	79 f0       	breq	.+30     	; 0x2f06 <xTaskGenericNotifyFromISR+0xf8>
    2ee8:	66 0f       	add	r22, r22
    2eea:	77 1f       	adc	r23, r23
    2eec:	66 0f       	add	r22, r22
    2eee:	77 1f       	adc	r23, r23
    2ef0:	fd 01       	movw	r30, r26
    2ef2:	e6 0f       	add	r30, r22
    2ef4:	f7 1f       	adc	r31, r23
    2ef6:	27 a7       	std	Z+47, r18	; 0x2f
    2ef8:	30 ab       	std	Z+48, r19	; 0x30
    2efa:	41 ab       	std	Z+49, r20	; 0x31
    2efc:	52 ab       	std	Z+50, r21	; 0x32
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	03 c0       	rjmp	.+6      	; 0x2f08 <xTaskGenericNotifyFromISR+0xfa>
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	01 c0       	rjmp	.+2      	; 0x2f08 <xTaskGenericNotifyFromISR+0xfa>
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	91 30       	cpi	r25, 0x01	; 1
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <xTaskGenericNotifyFromISR+0x100>
    2f0c:	96 c0       	rjmp	.+300    	; 0x303a <xTaskGenericNotifyFromISR+0x22c>
    2f0e:	90 91 36 18 	lds	r25, 0x1836	; 0x801836 <uxSchedulerSuspended>
    2f12:	91 11       	cpse	r25, r1
    2f14:	5f c0       	rjmp	.+190    	; 0x2fd4 <xTaskGenericNotifyFromISR+0x1c6>
    2f16:	1c 96       	adiw	r26, 0x0c	; 12
    2f18:	ed 91       	ld	r30, X+
    2f1a:	fc 91       	ld	r31, X
    2f1c:	1d 97       	sbiw	r26, 0x0d	; 13
    2f1e:	16 96       	adiw	r26, 0x06	; 6
    2f20:	cd 91       	ld	r28, X+
    2f22:	dc 91       	ld	r29, X
    2f24:	17 97       	sbiw	r26, 0x07	; 7
    2f26:	18 96       	adiw	r26, 0x08	; 8
    2f28:	2d 91       	ld	r18, X+
    2f2a:	3c 91       	ld	r19, X
    2f2c:	19 97       	sbiw	r26, 0x09	; 9
    2f2e:	3f 83       	std	Y+7, r19	; 0x07
    2f30:	2e 83       	std	Y+6, r18	; 0x06
    2f32:	18 96       	adiw	r26, 0x08	; 8
    2f34:	cd 91       	ld	r28, X+
    2f36:	dc 91       	ld	r29, X
    2f38:	19 97       	sbiw	r26, 0x09	; 9
    2f3a:	16 96       	adiw	r26, 0x06	; 6
    2f3c:	2d 91       	ld	r18, X+
    2f3e:	3c 91       	ld	r19, X
    2f40:	17 97       	sbiw	r26, 0x07	; 7
    2f42:	3d 83       	std	Y+5, r19	; 0x05
    2f44:	2c 83       	std	Y+4, r18	; 0x04
    2f46:	41 81       	ldd	r20, Z+1	; 0x01
    2f48:	52 81       	ldd	r21, Z+2	; 0x02
    2f4a:	9d 01       	movw	r18, r26
    2f4c:	2e 5f       	subi	r18, 0xFE	; 254
    2f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f50:	42 17       	cp	r20, r18
    2f52:	53 07       	cpc	r21, r19
    2f54:	31 f4       	brne	.+12     	; 0x2f62 <xTaskGenericNotifyFromISR+0x154>
    2f56:	18 96       	adiw	r26, 0x08	; 8
    2f58:	4d 91       	ld	r20, X+
    2f5a:	5c 91       	ld	r21, X
    2f5c:	19 97       	sbiw	r26, 0x09	; 9
    2f5e:	52 83       	std	Z+2, r21	; 0x02
    2f60:	41 83       	std	Z+1, r20	; 0x01
    2f62:	1d 96       	adiw	r26, 0x0d	; 13
    2f64:	1c 92       	st	X, r1
    2f66:	1e 92       	st	-X, r1
    2f68:	1c 97       	sbiw	r26, 0x0c	; 12
    2f6a:	90 81       	ld	r25, Z
    2f6c:	91 50       	subi	r25, 0x01	; 1
    2f6e:	90 83       	st	Z, r25
    2f70:	5a 96       	adiw	r26, 0x1a	; 26
    2f72:	ec 91       	ld	r30, X
    2f74:	5a 97       	sbiw	r26, 0x1a	; 26
    2f76:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <uxTopReadyPriority>
    2f7a:	9e 17       	cp	r25, r30
    2f7c:	10 f4       	brcc	.+4      	; 0x2f82 <xTaskGenericNotifyFromISR+0x174>
    2f7e:	e0 93 45 18 	sts	0x1845, r30	; 0x801845 <uxTopReadyPriority>
    2f82:	9b e0       	ldi	r25, 0x0B	; 11
    2f84:	9e 9f       	mul	r25, r30
    2f86:	f0 01       	movw	r30, r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	e9 57       	subi	r30, 0x79	; 121
    2f8c:	f7 4e       	sbci	r31, 0xE7	; 231
    2f8e:	01 80       	ldd	r0, Z+1	; 0x01
    2f90:	f2 81       	ldd	r31, Z+2	; 0x02
    2f92:	e0 2d       	mov	r30, r0
    2f94:	17 96       	adiw	r26, 0x07	; 7
    2f96:	fc 93       	st	X, r31
    2f98:	ee 93       	st	-X, r30
    2f9a:	16 97       	sbiw	r26, 0x06	; 6
    2f9c:	46 81       	ldd	r20, Z+6	; 0x06
    2f9e:	57 81       	ldd	r21, Z+7	; 0x07
    2fa0:	19 96       	adiw	r26, 0x09	; 9
    2fa2:	5c 93       	st	X, r21
    2fa4:	4e 93       	st	-X, r20
    2fa6:	18 97       	sbiw	r26, 0x08	; 8
    2fa8:	c6 81       	ldd	r28, Z+6	; 0x06
    2faa:	d7 81       	ldd	r29, Z+7	; 0x07
    2fac:	3d 83       	std	Y+5, r19	; 0x05
    2fae:	2c 83       	std	Y+4, r18	; 0x04
    2fb0:	37 83       	std	Z+7, r19	; 0x07
    2fb2:	26 83       	std	Z+6, r18	; 0x06
    2fb4:	5a 96       	adiw	r26, 0x1a	; 26
    2fb6:	ec 91       	ld	r30, X
    2fb8:	5a 97       	sbiw	r26, 0x1a	; 26
    2fba:	9e 9f       	mul	r25, r30
    2fbc:	f0 01       	movw	r30, r0
    2fbe:	11 24       	eor	r1, r1
    2fc0:	e9 57       	subi	r30, 0x79	; 121
    2fc2:	f7 4e       	sbci	r31, 0xE7	; 231
    2fc4:	1d 96       	adiw	r26, 0x0d	; 13
    2fc6:	fc 93       	st	X, r31
    2fc8:	ee 93       	st	-X, r30
    2fca:	1c 97       	sbiw	r26, 0x0c	; 12
    2fcc:	90 81       	ld	r25, Z
    2fce:	9f 5f       	subi	r25, 0xFF	; 255
    2fd0:	90 83       	st	Z, r25
    2fd2:	21 c0       	rjmp	.+66     	; 0x3016 <xTaskGenericNotifyFromISR+0x208>
    2fd4:	62 e6       	ldi	r22, 0x62	; 98
    2fd6:	78 e1       	ldi	r23, 0x18	; 24
    2fd8:	fb 01       	movw	r30, r22
    2fda:	c1 81       	ldd	r28, Z+1	; 0x01
    2fdc:	d2 81       	ldd	r29, Z+2	; 0x02
    2fde:	53 96       	adiw	r26, 0x13	; 19
    2fe0:	dc 93       	st	X, r29
    2fe2:	ce 93       	st	-X, r28
    2fe4:	52 97       	sbiw	r26, 0x12	; 18
    2fe6:	2e 81       	ldd	r18, Y+6	; 0x06
    2fe8:	3f 81       	ldd	r19, Y+7	; 0x07
    2fea:	55 96       	adiw	r26, 0x15	; 21
    2fec:	3c 93       	st	X, r19
    2fee:	2e 93       	st	-X, r18
    2ff0:	54 97       	sbiw	r26, 0x14	; 20
    2ff2:	4e 81       	ldd	r20, Y+6	; 0x06
    2ff4:	5f 81       	ldd	r21, Y+7	; 0x07
    2ff6:	9d 01       	movw	r18, r26
    2ff8:	22 5f       	subi	r18, 0xF2	; 242
    2ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffc:	fa 01       	movw	r30, r20
    2ffe:	35 83       	std	Z+5, r19	; 0x05
    3000:	24 83       	std	Z+4, r18	; 0x04
    3002:	3f 83       	std	Y+7, r19	; 0x07
    3004:	2e 83       	std	Y+6, r18	; 0x06
    3006:	59 96       	adiw	r26, 0x19	; 25
    3008:	7c 93       	st	X, r23
    300a:	6e 93       	st	-X, r22
    300c:	58 97       	sbiw	r26, 0x18	; 24
    300e:	fb 01       	movw	r30, r22
    3010:	90 81       	ld	r25, Z
    3012:	9f 5f       	subi	r25, 0xFF	; 255
    3014:	90 83       	st	Z, r25
    3016:	5a 96       	adiw	r26, 0x1a	; 26
    3018:	2c 91       	ld	r18, X
    301a:	e0 91 f5 18 	lds	r30, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    301e:	f0 91 f6 18 	lds	r31, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>
    3022:	92 8d       	ldd	r25, Z+26	; 0x1a
    3024:	92 17       	cp	r25, r18
    3026:	48 f4       	brcc	.+18     	; 0x303a <xTaskGenericNotifyFromISR+0x22c>
    3028:	c1 14       	cp	r12, r1
    302a:	d1 04       	cpc	r13, r1
    302c:	19 f0       	breq	.+6      	; 0x3034 <xTaskGenericNotifyFromISR+0x226>
    302e:	91 e0       	ldi	r25, 0x01	; 1
    3030:	f6 01       	movw	r30, r12
    3032:	90 83       	st	Z, r25
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	90 93 3f 18 	sts	0x183F, r25	; 0x80183f <xYieldPending>
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	0f 91       	pop	r16
    3040:	ff 90       	pop	r15
    3042:	ef 90       	pop	r14
    3044:	df 90       	pop	r13
    3046:	cf 90       	pop	r12
    3048:	bf 90       	pop	r11
    304a:	af 90       	pop	r10
    304c:	9f 90       	pop	r9
    304e:	8f 90       	pop	r8
    3050:	08 95       	ret

00003052 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	21 f4       	brne	.+8      	; 0x305e <xTaskGenericNotifyStateClear+0xc>
    3056:	80 91 f5 18 	lds	r24, 0x18F5	; 0x8018f5 <pxCurrentTCB>
    305a:	90 91 f6 18 	lds	r25, 0x18F6	; 0x8018f6 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	fc 01       	movw	r30, r24
    3068:	e6 0f       	add	r30, r22
    306a:	f7 1f       	adc	r31, r23
    306c:	23 a9       	ldd	r18, Z+51	; 0x33
    306e:	22 30       	cpi	r18, 0x02	; 2
    3070:	31 f4       	brne	.+12     	; 0x307e <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3072:	fc 01       	movw	r30, r24
    3074:	e6 0f       	add	r30, r22
    3076:	f7 1f       	adc	r31, r23
    3078:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	01 c0       	rjmp	.+2      	; 0x3080 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    307e:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3080:	0f 90       	pop	r0
    3082:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3084:	08 95       	ret

00003086 <prvGetNextExpireTime>:
    3086:	dc 01       	movw	r26, r24
    3088:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <pxCurrentTimerList>
    308c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <pxCurrentTimerList+0x1>
    3090:	80 81       	ld	r24, Z
    3092:	91 e0       	ldi	r25, 0x01	; 1
    3094:	81 11       	cpse	r24, r1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	9c 93       	st	X, r25
    309a:	91 11       	cpse	r25, r1
    309c:	08 c0       	rjmp	.+16     	; 0x30ae <prvGetNextExpireTime+0x28>
    309e:	07 80       	ldd	r0, Z+7	; 0x07
    30a0:	f0 85       	ldd	r31, Z+8	; 0x08
    30a2:	e0 2d       	mov	r30, r0
    30a4:	60 81       	ld	r22, Z
    30a6:	71 81       	ldd	r23, Z+1	; 0x01
    30a8:	82 81       	ldd	r24, Z+2	; 0x02
    30aa:	93 81       	ldd	r25, Z+3	; 0x03
    30ac:	08 95       	ret
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	cb 01       	movw	r24, r22
    30b4:	08 95       	ret

000030b6 <prvInsertTimerInActiveList>:
    30b6:	cf 92       	push	r12
    30b8:	df 92       	push	r13
    30ba:	ef 92       	push	r14
    30bc:	ff 92       	push	r15
    30be:	0f 93       	push	r16
    30c0:	1f 93       	push	r17
    30c2:	fc 01       	movw	r30, r24
    30c4:	42 83       	std	Z+2, r20	; 0x02
    30c6:	53 83       	std	Z+3, r21	; 0x03
    30c8:	64 83       	std	Z+4, r22	; 0x04
    30ca:	75 83       	std	Z+5, r23	; 0x05
    30cc:	93 87       	std	Z+11, r25	; 0x0b
    30ce:	82 87       	std	Z+10, r24	; 0x0a
    30d0:	04 17       	cp	r16, r20
    30d2:	15 07       	cpc	r17, r21
    30d4:	26 07       	cpc	r18, r22
    30d6:	37 07       	cpc	r19, r23
    30d8:	c0 f0       	brcs	.+48     	; 0x310a <prvInsertTimerInActiveList+0x54>
    30da:	0c 19       	sub	r16, r12
    30dc:	1d 09       	sbc	r17, r13
    30de:	2e 09       	sbc	r18, r14
    30e0:	3f 09       	sbc	r19, r15
    30e2:	86 85       	ldd	r24, Z+14	; 0x0e
    30e4:	97 85       	ldd	r25, Z+15	; 0x0f
    30e6:	a0 89       	ldd	r26, Z+16	; 0x10
    30e8:	b1 89       	ldd	r27, Z+17	; 0x11
    30ea:	08 17       	cp	r16, r24
    30ec:	19 07       	cpc	r17, r25
    30ee:	2a 07       	cpc	r18, r26
    30f0:	3b 07       	cpc	r19, r27
    30f2:	00 f5       	brcc	.+64     	; 0x3134 <prvInsertTimerInActiveList+0x7e>
    30f4:	bf 01       	movw	r22, r30
    30f6:	6e 5f       	subi	r22, 0xFE	; 254
    30f8:	7f 4f       	sbci	r23, 0xFF	; 255
    30fa:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <pxOverflowTimerList>
    30fe:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <pxOverflowTimerList+0x1>
    3102:	0e 94 30 05 	call	0xa60	; 0xa60 <vListInsert>
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	18 c0       	rjmp	.+48     	; 0x313a <prvInsertTimerInActiveList+0x84>
    310a:	0c 15       	cp	r16, r12
    310c:	1d 05       	cpc	r17, r13
    310e:	2e 05       	cpc	r18, r14
    3110:	3f 05       	cpc	r19, r15
    3112:	28 f4       	brcc	.+10     	; 0x311e <prvInsertTimerInActiveList+0x68>
    3114:	4c 15       	cp	r20, r12
    3116:	5d 05       	cpc	r21, r13
    3118:	6e 05       	cpc	r22, r14
    311a:	7f 05       	cpc	r23, r15
    311c:	68 f4       	brcc	.+26     	; 0x3138 <prvInsertTimerInActiveList+0x82>
    311e:	bf 01       	movw	r22, r30
    3120:	6e 5f       	subi	r22, 0xFE	; 254
    3122:	7f 4f       	sbci	r23, 0xFF	; 255
    3124:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <pxCurrentTimerList>
    3128:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <pxCurrentTimerList+0x1>
    312c:	0e 94 30 05 	call	0xa60	; 0xa60 <vListInsert>
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	03 c0       	rjmp	.+6      	; 0x313a <prvInsertTimerInActiveList+0x84>
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	01 c0       	rjmp	.+2      	; 0x313a <prvInsertTimerInActiveList+0x84>
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	1f 91       	pop	r17
    313c:	0f 91       	pop	r16
    313e:	ff 90       	pop	r15
    3140:	ef 90       	pop	r14
    3142:	df 90       	pop	r13
    3144:	cf 90       	pop	r12
    3146:	08 95       	ret

00003148 <prvCheckForValidListAndQueue>:
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	0f 92       	push	r0
    314e:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <xTimerQueue>
    3152:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <xTimerQueue+0x1>
    3156:	89 2b       	or	r24, r25
    3158:	e9 f4       	brne	.+58     	; 0x3194 <prvCheckForValidListAndQueue+0x4c>
    315a:	8e e0       	ldi	r24, 0x0E	; 14
    315c:	99 e1       	ldi	r25, 0x19	; 25
    315e:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    3162:	83 e0       	ldi	r24, 0x03	; 3
    3164:	99 e1       	ldi	r25, 0x19	; 25
    3166:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    316a:	8e e0       	ldi	r24, 0x0E	; 14
    316c:	99 e1       	ldi	r25, 0x19	; 25
    316e:	90 93 02 19 	sts	0x1902, r25	; 0x801902 <pxCurrentTimerList+0x1>
    3172:	80 93 01 19 	sts	0x1901, r24	; 0x801901 <pxCurrentTimerList>
    3176:	83 e0       	ldi	r24, 0x03	; 3
    3178:	99 e1       	ldi	r25, 0x19	; 25
    317a:	90 93 00 19 	sts	0x1900, r25	; 0x801900 <pxOverflowTimerList+0x1>
    317e:	80 93 ff 18 	sts	0x18FF, r24	; 0x8018ff <pxOverflowTimerList>
    3182:	40 e0       	ldi	r20, 0x00	; 0
    3184:	67 e0       	ldi	r22, 0x07	; 7
    3186:	8a e0       	ldi	r24, 0x0A	; 10
    3188:	0e 94 ce 07 	call	0xf9c	; 0xf9c <xQueueGenericCreate>
    318c:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <xTimerQueue+0x1>
    3190:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <xTimerQueue>
    3194:	0f 90       	pop	r0
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	08 95       	ret

0000319a <xTimerCreateTimerTask>:
    319a:	ef 92       	push	r14
    319c:	ff 92       	push	r15
    319e:	0f 93       	push	r16
    31a0:	d3 df       	rcall	.-90     	; 0x3148 <prvCheckForValidListAndQueue>
    31a2:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <xTimerQueue>
    31a6:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <xTimerQueue+0x1>
    31aa:	89 2b       	or	r24, r25
    31ac:	91 f0       	breq	.+36     	; 0x31d2 <xTimerCreateTimerTask+0x38>
    31ae:	0f 2e       	mov	r0, r31
    31b0:	fb ef       	ldi	r31, 0xFB	; 251
    31b2:	ef 2e       	mov	r14, r31
    31b4:	f8 e1       	ldi	r31, 0x18	; 24
    31b6:	ff 2e       	mov	r15, r31
    31b8:	f0 2d       	mov	r31, r0
    31ba:	03 e0       	ldi	r16, 0x03	; 3
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 ec       	ldi	r20, 0xC0	; 192
    31c2:	50 e0       	ldi	r21, 0x00	; 0
    31c4:	65 e1       	ldi	r22, 0x15	; 21
    31c6:	73 e0       	ldi	r23, 0x03	; 3
    31c8:	88 e5       	ldi	r24, 0x58	; 88
    31ca:	91 e0       	ldi	r25, 0x01	; 1
    31cc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskCreate>
    31d0:	01 c0       	rjmp	.+2      	; 0x31d4 <xTimerCreateTimerTask+0x3a>
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	0f 91       	pop	r16
    31d6:	ff 90       	pop	r15
    31d8:	ef 90       	pop	r14
    31da:	08 95       	ret

000031dc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    31dc:	8f 92       	push	r8
    31de:	9f 92       	push	r9
    31e0:	af 92       	push	r10
    31e2:	bf 92       	push	r11
    31e4:	cf 92       	push	r12
    31e6:	df 92       	push	r13
    31e8:	ef 92       	push	r14
    31ea:	ff 92       	push	r15
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	27 97       	sbiw	r28, 0x07	; 7
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3204:	e0 91 fd 18 	lds	r30, 0x18FD	; 0x8018fd <xTimerQueue>
    3208:	f0 91 fe 18 	lds	r31, 0x18FE	; 0x8018fe <xTimerQueue+0x1>
    320c:	30 97       	sbiw	r30, 0x00	; 0
    320e:	81 f1       	breq	.+96     	; 0x3270 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    3210:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3212:	2a 83       	std	Y+2, r18	; 0x02
    3214:	3b 83       	std	Y+3, r19	; 0x03
    3216:	4c 83       	std	Y+4, r20	; 0x04
    3218:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    321a:	9f 83       	std	Y+7, r25	; 0x07
    321c:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    321e:	66 30       	cpi	r22, 0x06	; 6
    3220:	f4 f4       	brge	.+60     	; 0x325e <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3222:	c4 db       	rcall	.-2168   	; 0x29ac <xTaskGetSchedulerState>
    3224:	82 30       	cpi	r24, 0x02	; 2
    3226:	69 f4       	brne	.+26     	; 0x3242 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3228:	00 e0       	ldi	r16, 0x00	; 0
    322a:	a7 01       	movw	r20, r14
    322c:	96 01       	movw	r18, r12
    322e:	be 01       	movw	r22, r28
    3230:	6f 5f       	subi	r22, 0xFF	; 255
    3232:	7f 4f       	sbci	r23, 0xFF	; 255
    3234:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <xTimerQueue>
    3238:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <xTimerQueue+0x1>
    323c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <xQueueGenericSend>
    3240:	18 c0       	rjmp	.+48     	; 0x3272 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3242:	00 e0       	ldi	r16, 0x00	; 0
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	a9 01       	movw	r20, r18
    324a:	be 01       	movw	r22, r28
    324c:	6f 5f       	subi	r22, 0xFF	; 255
    324e:	7f 4f       	sbci	r23, 0xFF	; 255
    3250:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <xTimerQueue>
    3254:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <xTimerQueue+0x1>
    3258:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <xQueueGenericSend>
    325c:	0a c0       	rjmp	.+20     	; 0x3272 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	a8 01       	movw	r20, r16
    3262:	be 01       	movw	r22, r28
    3264:	6f 5f       	subi	r22, 0xFF	; 255
    3266:	7f 4f       	sbci	r23, 0xFF	; 255
    3268:	cf 01       	movw	r24, r30
    326a:	0e 94 a1 08 	call	0x1142	; 0x1142 <xQueueGenericSendFromISR>
    326e:	01 c0       	rjmp	.+2      	; 0x3272 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3270:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3272:	27 96       	adiw	r28, 0x07	; 7
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	de bf       	out	0x3e, r29	; 62
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	cd bf       	out	0x3d, r28	; 61
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	ff 90       	pop	r15
    3288:	ef 90       	pop	r14
    328a:	df 90       	pop	r13
    328c:	cf 90       	pop	r12
    328e:	bf 90       	pop	r11
    3290:	af 90       	pop	r10
    3292:	9f 90       	pop	r9
    3294:	8f 90       	pop	r8
    3296:	08 95       	ret

00003298 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3298:	8f 92       	push	r8
    329a:	9f 92       	push	r9
    329c:	af 92       	push	r10
    329e:	bf 92       	push	r11
    32a0:	cf 92       	push	r12
    32a2:	df 92       	push	r13
    32a4:	ef 92       	push	r14
    32a6:	ff 92       	push	r15
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	cf 93       	push	r28
    32ae:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    32b0:	3b c0       	rjmp	.+118    	; 0x3328 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    32b2:	07 80       	ldd	r0, Z+7	; 0x07
    32b4:	f0 85       	ldd	r31, Z+8	; 0x08
    32b6:	e0 2d       	mov	r30, r0
    32b8:	80 80       	ld	r8, Z
    32ba:	91 80       	ldd	r9, Z+1	; 0x01
    32bc:	a2 80       	ldd	r10, Z+2	; 0x02
    32be:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    32c0:	c0 85       	ldd	r28, Z+8	; 0x08
    32c2:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    32c4:	8e 01       	movw	r16, r28
    32c6:	0e 5f       	subi	r16, 0xFE	; 254
    32c8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ca:	c8 01       	movw	r24, r16
    32cc:	0e 94 6d 05 	call	0xada	; 0xada <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    32d0:	ec 89       	ldd	r30, Y+20	; 0x14
    32d2:	fd 89       	ldd	r31, Y+21	; 0x15
    32d4:	ce 01       	movw	r24, r28
    32d6:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    32d8:	8e 89       	ldd	r24, Y+22	; 0x16
    32da:	82 ff       	sbrs	r24, 2
    32dc:	25 c0       	rjmp	.+74     	; 0x3328 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    32de:	8e 85       	ldd	r24, Y+14	; 0x0e
    32e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    32e2:	a8 89       	ldd	r26, Y+16	; 0x10
    32e4:	b9 89       	ldd	r27, Y+17	; 0x11
    32e6:	88 0d       	add	r24, r8
    32e8:	99 1d       	adc	r25, r9
    32ea:	aa 1d       	adc	r26, r10
    32ec:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    32ee:	88 16       	cp	r8, r24
    32f0:	99 06       	cpc	r9, r25
    32f2:	aa 06       	cpc	r10, r26
    32f4:	bb 06       	cpc	r11, r27
    32f6:	70 f4       	brcc	.+28     	; 0x3314 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    32f8:	8a 83       	std	Y+2, r24	; 0x02
    32fa:	9b 83       	std	Y+3, r25	; 0x03
    32fc:	ac 83       	std	Y+4, r26	; 0x04
    32fe:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3300:	db 87       	std	Y+11, r29	; 0x0b
    3302:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3304:	b8 01       	movw	r22, r16
    3306:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <pxCurrentTimerList>
    330a:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <pxCurrentTimerList+0x1>
    330e:	0e 94 30 05 	call	0xa60	; 0xa60 <vListInsert>
    3312:	0a c0       	rjmp	.+20     	; 0x3328 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3314:	c1 2c       	mov	r12, r1
    3316:	d1 2c       	mov	r13, r1
    3318:	76 01       	movw	r14, r12
    331a:	00 e0       	ldi	r16, 0x00	; 0
    331c:	10 e0       	ldi	r17, 0x00	; 0
    331e:	a5 01       	movw	r20, r10
    3320:	94 01       	movw	r18, r8
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	ce 01       	movw	r24, r28
    3326:	5a df       	rcall	.-332    	; 0x31dc <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3328:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <pxCurrentTimerList>
    332c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <pxCurrentTimerList+0x1>
    3330:	80 81       	ld	r24, Z
    3332:	81 11       	cpse	r24, r1
    3334:	be cf       	rjmp	.-132    	; 0x32b2 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3336:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <pxOverflowTimerList>
    333a:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <pxOverflowTimerList+0x1>
    333e:	90 93 02 19 	sts	0x1902, r25	; 0x801902 <pxCurrentTimerList+0x1>
    3342:	80 93 01 19 	sts	0x1901, r24	; 0x801901 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3346:	f0 93 00 19 	sts	0x1900, r31	; 0x801900 <pxOverflowTimerList+0x1>
    334a:	e0 93 ff 18 	sts	0x18FF, r30	; 0x8018ff <pxOverflowTimerList>
    }
    334e:	df 91       	pop	r29
    3350:	cf 91       	pop	r28
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
    3356:	ff 90       	pop	r15
    3358:	ef 90       	pop	r14
    335a:	df 90       	pop	r13
    335c:	cf 90       	pop	r12
    335e:	bf 90       	pop	r11
    3360:	af 90       	pop	r10
    3362:	9f 90       	pop	r9
    3364:	8f 90       	pop	r8
    3366:	08 95       	ret

00003368 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3368:	cf 92       	push	r12
    336a:	df 92       	push	r13
    336c:	ef 92       	push	r14
    336e:	ff 92       	push	r15
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3376:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xTaskGetTickCount>
    337a:	6b 01       	movw	r12, r22
    337c:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    337e:	80 91 f7 18 	lds	r24, 0x18F7	; 0x8018f7 <xLastTime.2436>
    3382:	90 91 f8 18 	lds	r25, 0x18F8	; 0x8018f8 <xLastTime.2436+0x1>
    3386:	a0 91 f9 18 	lds	r26, 0x18F9	; 0x8018f9 <xLastTime.2436+0x2>
    338a:	b0 91 fa 18 	lds	r27, 0x18FA	; 0x8018fa <xLastTime.2436+0x3>
    338e:	c8 16       	cp	r12, r24
    3390:	d9 06       	cpc	r13, r25
    3392:	ea 06       	cpc	r14, r26
    3394:	fb 06       	cpc	r15, r27
    3396:	20 f4       	brcc	.+8      	; 0x33a0 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3398:	7f df       	rcall	.-258    	; 0x3298 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	88 83       	st	Y, r24
    339e:	01 c0       	rjmp	.+2      	; 0x33a2 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    33a0:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    33a2:	c0 92 f7 18 	sts	0x18F7, r12	; 0x8018f7 <xLastTime.2436>
    33a6:	d0 92 f8 18 	sts	0x18F8, r13	; 0x8018f8 <xLastTime.2436+0x1>
    33aa:	e0 92 f9 18 	sts	0x18F9, r14	; 0x8018f9 <xLastTime.2436+0x2>
    33ae:	f0 92 fa 18 	sts	0x18FA, r15	; 0x8018fa <xLastTime.2436+0x3>

        return xTimeNow;
    }
    33b2:	c7 01       	movw	r24, r14
    33b4:	b6 01       	movw	r22, r12
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	ff 90       	pop	r15
    33bc:	ef 90       	pop	r14
    33be:	df 90       	pop	r13
    33c0:	cf 90       	pop	r12
    33c2:	08 95       	ret

000033c4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    33c4:	4f 92       	push	r4
    33c6:	5f 92       	push	r5
    33c8:	6f 92       	push	r6
    33ca:	7f 92       	push	r7
    33cc:	8f 92       	push	r8
    33ce:	9f 92       	push	r9
    33d0:	af 92       	push	r10
    33d2:	bf 92       	push	r11
    33d4:	cf 92       	push	r12
    33d6:	df 92       	push	r13
    33d8:	ef 92       	push	r14
    33da:	ff 92       	push	r15
    33dc:	0f 93       	push	r16
    33de:	1f 93       	push	r17
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    33e4:	4b 01       	movw	r8, r22
    33e6:	5c 01       	movw	r10, r24
    33e8:	29 01       	movw	r4, r18
    33ea:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    33ec:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <pxCurrentTimerList>
    33f0:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <pxCurrentTimerList+0x1>
    33f4:	07 80       	ldd	r0, Z+7	; 0x07
    33f6:	f0 85       	ldd	r31, Z+8	; 0x08
    33f8:	e0 2d       	mov	r30, r0
    33fa:	c0 85       	ldd	r28, Z+8	; 0x08
    33fc:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    33fe:	ce 01       	movw	r24, r28
    3400:	02 96       	adiw	r24, 0x02	; 2
    3402:	0e 94 6d 05 	call	0xada	; 0xada <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3406:	8e 89       	ldd	r24, Y+22	; 0x16
    3408:	82 ff       	sbrs	r24, 2
    340a:	1b c0       	rjmp	.+54     	; 0x3442 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    340c:	4e 85       	ldd	r20, Y+14	; 0x0e
    340e:	5f 85       	ldd	r21, Y+15	; 0x0f
    3410:	68 89       	ldd	r22, Y+16	; 0x10
    3412:	79 89       	ldd	r23, Y+17	; 0x11
    3414:	48 0d       	add	r20, r8
    3416:	59 1d       	adc	r21, r9
    3418:	6a 1d       	adc	r22, r10
    341a:	7b 1d       	adc	r23, r11
    341c:	75 01       	movw	r14, r10
    341e:	64 01       	movw	r12, r8
    3420:	93 01       	movw	r18, r6
    3422:	82 01       	movw	r16, r4
    3424:	ce 01       	movw	r24, r28
    3426:	47 de       	rcall	.-882    	; 0x30b6 <prvInsertTimerInActiveList>
    3428:	88 23       	and	r24, r24
    342a:	69 f0       	breq	.+26     	; 0x3446 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    342c:	c1 2c       	mov	r12, r1
    342e:	d1 2c       	mov	r13, r1
    3430:	76 01       	movw	r14, r12
    3432:	00 e0       	ldi	r16, 0x00	; 0
    3434:	10 e0       	ldi	r17, 0x00	; 0
    3436:	a5 01       	movw	r20, r10
    3438:	94 01       	movw	r18, r8
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	ce 01       	movw	r24, r28
    343e:	ce de       	rcall	.-612    	; 0x31dc <xTimerGenericCommand>
    3440:	02 c0       	rjmp	.+4      	; 0x3446 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3442:	8e 7f       	andi	r24, 0xFE	; 254
    3444:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3446:	ec 89       	ldd	r30, Y+20	; 0x14
    3448:	fd 89       	ldd	r31, Y+21	; 0x15
    344a:	ce 01       	movw	r24, r28
    344c:	19 95       	eicall
    }
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	df 90       	pop	r13
    345c:	cf 90       	pop	r12
    345e:	bf 90       	pop	r11
    3460:	af 90       	pop	r10
    3462:	9f 90       	pop	r9
    3464:	8f 90       	pop	r8
    3466:	7f 90       	pop	r7
    3468:	6f 90       	pop	r6
    346a:	5f 90       	pop	r5
    346c:	4f 90       	pop	r4
    346e:	08 95       	ret

00003470 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3470:	8f 92       	push	r8
    3472:	9f 92       	push	r9
    3474:	af 92       	push	r10
    3476:	bf 92       	push	r11
    3478:	cf 92       	push	r12
    347a:	df 92       	push	r13
    347c:	ef 92       	push	r14
    347e:	ff 92       	push	r15
    3480:	1f 93       	push	r17
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	1f 92       	push	r1
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	6b 01       	movw	r12, r22
    348e:	7c 01       	movw	r14, r24
    3490:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3492:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3496:	ce 01       	movw	r24, r28
    3498:	01 96       	adiw	r24, 0x01	; 1
    349a:	66 df       	rcall	.-308    	; 0x3368 <prvSampleTimeNow>
    349c:	4b 01       	movw	r8, r22
    349e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	81 11       	cpse	r24, r1
    34a4:	2d c0       	rjmp	.+90     	; 0x3500 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    34a6:	11 11       	cpse	r17, r1
    34a8:	0d c0       	rjmp	.+26     	; 0x34c4 <prvProcessTimerOrBlockTask+0x54>
    34aa:	8c 14       	cp	r8, r12
    34ac:	9d 04       	cpc	r9, r13
    34ae:	ae 04       	cpc	r10, r14
    34b0:	bf 04       	cpc	r11, r15
    34b2:	40 f0       	brcs	.+16     	; 0x34c4 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    34b4:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    34b8:	a5 01       	movw	r20, r10
    34ba:	94 01       	movw	r18, r8
    34bc:	c7 01       	movw	r24, r14
    34be:	b6 01       	movw	r22, r12
    34c0:	81 df       	rcall	.-254    	; 0x33c4 <prvProcessExpiredTimer>
    34c2:	20 c0       	rjmp	.+64     	; 0x3504 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    34c4:	11 23       	and	r17, r17
    34c6:	41 f0       	breq	.+16     	; 0x34d8 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    34c8:	e0 91 ff 18 	lds	r30, 0x18FF	; 0x8018ff <pxOverflowTimerList>
    34cc:	f0 91 00 19 	lds	r31, 0x1900	; 0x801900 <pxOverflowTimerList+0x1>
    34d0:	80 81       	ld	r24, Z
    34d2:	11 e0       	ldi	r17, 0x01	; 1
    34d4:	81 11       	cpse	r24, r1
    34d6:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    34d8:	b7 01       	movw	r22, r14
    34da:	a6 01       	movw	r20, r12
    34dc:	48 19       	sub	r20, r8
    34de:	59 09       	sbc	r21, r9
    34e0:	6a 09       	sbc	r22, r10
    34e2:	7b 09       	sbc	r23, r11
    34e4:	21 2f       	mov	r18, r17
    34e6:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <xTimerQueue>
    34ea:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <xTimerQueue+0x1>
    34ee:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    34f2:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>
    34f6:	81 11       	cpse	r24, r1
    34f8:	05 c0       	rjmp	.+10     	; 0x3504 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    34fa:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3500:	0e 94 93 10 	call	0x2126	; 0x2126 <xTaskResumeAll>
            }
        }
    }
    3504:	0f 90       	pop	r0
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	ff 90       	pop	r15
    350e:	ef 90       	pop	r14
    3510:	df 90       	pop	r13
    3512:	cf 90       	pop	r12
    3514:	bf 90       	pop	r11
    3516:	af 90       	pop	r10
    3518:	9f 90       	pop	r9
    351a:	8f 90       	pop	r8
    351c:	08 95       	ret

0000351e <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    351e:	af 92       	push	r10
    3520:	bf 92       	push	r11
    3522:	cf 92       	push	r12
    3524:	df 92       	push	r13
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	28 97       	sbiw	r28, 0x08	; 8
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	de bf       	out	0x3e, r29	; 62
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3542:	82 c0       	rjmp	.+260    	; 0x3648 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	88 23       	and	r24, r24
    3548:	0c f4       	brge	.+2      	; 0x354c <prvProcessReceivedCommands+0x2e>
    354a:	7e c0       	rjmp	.+252    	; 0x3648 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    354c:	ae 80       	ldd	r10, Y+6	; 0x06
    354e:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3550:	d5 01       	movw	r26, r10
    3552:	1c 96       	adiw	r26, 0x0c	; 12
    3554:	8d 91       	ld	r24, X+
    3556:	9c 91       	ld	r25, X
    3558:	1d 97       	sbiw	r26, 0x0d	; 13
    355a:	89 2b       	or	r24, r25
    355c:	21 f0       	breq	.+8      	; 0x3566 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    355e:	c5 01       	movw	r24, r10
    3560:	02 96       	adiw	r24, 0x02	; 2
    3562:	0e 94 6d 05 	call	0xada	; 0xada <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3566:	ce 01       	movw	r24, r28
    3568:	08 96       	adiw	r24, 0x08	; 8
    356a:	fe de       	rcall	.-516    	; 0x3368 <prvSampleTimeNow>
    356c:	8b 01       	movw	r16, r22
    356e:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3570:	e9 81       	ldd	r30, Y+1	; 0x01
    3572:	0e 2e       	mov	r0, r30
    3574:	00 0c       	add	r0, r0
    3576:	ff 0b       	sbc	r31, r31
    3578:	ea 30       	cpi	r30, 0x0A	; 10
    357a:	f1 05       	cpc	r31, r1
    357c:	08 f0       	brcs	.+2      	; 0x3580 <prvProcessReceivedCommands+0x62>
    357e:	64 c0       	rjmp	.+200    	; 0x3648 <prvProcessReceivedCommands+0x12a>
    3580:	88 27       	eor	r24, r24
    3582:	ee 58       	subi	r30, 0x8E	; 142
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	8f 4f       	sbci	r24, 0xFF	; 255
    3588:	0c 94 6f 31 	jmp	0x62de	; 0x62de <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    358c:	f5 01       	movw	r30, r10
    358e:	86 89       	ldd	r24, Z+22	; 0x16
    3590:	81 60       	ori	r24, 0x01	; 1
    3592:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3594:	ca 80       	ldd	r12, Y+2	; 0x02
    3596:	db 80       	ldd	r13, Y+3	; 0x03
    3598:	ec 80       	ldd	r14, Y+4	; 0x04
    359a:	fd 80       	ldd	r15, Y+5	; 0x05
    359c:	46 85       	ldd	r20, Z+14	; 0x0e
    359e:	57 85       	ldd	r21, Z+15	; 0x0f
    35a0:	60 89       	ldd	r22, Z+16	; 0x10
    35a2:	71 89       	ldd	r23, Z+17	; 0x11
    35a4:	4c 0d       	add	r20, r12
    35a6:	5d 1d       	adc	r21, r13
    35a8:	6e 1d       	adc	r22, r14
    35aa:	7f 1d       	adc	r23, r15
    35ac:	c5 01       	movw	r24, r10
    35ae:	83 dd       	rcall	.-1274   	; 0x30b6 <prvInsertTimerInActiveList>
    35b0:	88 23       	and	r24, r24
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <prvProcessReceivedCommands+0x98>
    35b4:	49 c0       	rjmp	.+146    	; 0x3648 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    35b6:	d5 01       	movw	r26, r10
    35b8:	54 96       	adiw	r26, 0x14	; 20
    35ba:	ed 91       	ld	r30, X+
    35bc:	fc 91       	ld	r31, X
    35be:	55 97       	sbiw	r26, 0x15	; 21
    35c0:	c5 01       	movw	r24, r10
    35c2:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    35c4:	f5 01       	movw	r30, r10
    35c6:	86 89       	ldd	r24, Z+22	; 0x16
    35c8:	82 ff       	sbrs	r24, 2
    35ca:	3e c0       	rjmp	.+124    	; 0x3648 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    35cc:	4a 81       	ldd	r20, Y+2	; 0x02
    35ce:	5b 81       	ldd	r21, Y+3	; 0x03
    35d0:	6c 81       	ldd	r22, Y+4	; 0x04
    35d2:	7d 81       	ldd	r23, Y+5	; 0x05
    35d4:	86 85       	ldd	r24, Z+14	; 0x0e
    35d6:	97 85       	ldd	r25, Z+15	; 0x0f
    35d8:	a0 89       	ldd	r26, Z+16	; 0x10
    35da:	b1 89       	ldd	r27, Z+17	; 0x11
    35dc:	9a 01       	movw	r18, r20
    35de:	ab 01       	movw	r20, r22
    35e0:	28 0f       	add	r18, r24
    35e2:	39 1f       	adc	r19, r25
    35e4:	4a 1f       	adc	r20, r26
    35e6:	5b 1f       	adc	r21, r27
    35e8:	c1 2c       	mov	r12, r1
    35ea:	d1 2c       	mov	r13, r1
    35ec:	76 01       	movw	r14, r12
    35ee:	00 e0       	ldi	r16, 0x00	; 0
    35f0:	10 e0       	ldi	r17, 0x00	; 0
    35f2:	60 e0       	ldi	r22, 0x00	; 0
    35f4:	c5 01       	movw	r24, r10
    35f6:	f2 dd       	rcall	.-1052   	; 0x31dc <xTimerGenericCommand>
    35f8:	27 c0       	rjmp	.+78     	; 0x3648 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    35fa:	d5 01       	movw	r26, r10
    35fc:	56 96       	adiw	r26, 0x16	; 22
    35fe:	8c 91       	ld	r24, X
    3600:	56 97       	sbiw	r26, 0x16	; 22
    3602:	8e 7f       	andi	r24, 0xFE	; 254
    3604:	56 96       	adiw	r26, 0x16	; 22
    3606:	8c 93       	st	X, r24
                        break;
    3608:	1f c0       	rjmp	.+62     	; 0x3648 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    360a:	f5 01       	movw	r30, r10
    360c:	86 89       	ldd	r24, Z+22	; 0x16
    360e:	81 60       	ori	r24, 0x01	; 1
    3610:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3612:	4a 81       	ldd	r20, Y+2	; 0x02
    3614:	5b 81       	ldd	r21, Y+3	; 0x03
    3616:	6c 81       	ldd	r22, Y+4	; 0x04
    3618:	7d 81       	ldd	r23, Y+5	; 0x05
    361a:	46 87       	std	Z+14, r20	; 0x0e
    361c:	57 87       	std	Z+15, r21	; 0x0f
    361e:	60 8b       	std	Z+16, r22	; 0x10
    3620:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3622:	40 0f       	add	r20, r16
    3624:	51 1f       	adc	r21, r17
    3626:	62 1f       	adc	r22, r18
    3628:	73 1f       	adc	r23, r19
    362a:	68 01       	movw	r12, r16
    362c:	79 01       	movw	r14, r18
    362e:	c5 01       	movw	r24, r10
    3630:	42 dd       	rcall	.-1404   	; 0x30b6 <prvInsertTimerInActiveList>
                        break;
    3632:	0a c0       	rjmp	.+20     	; 0x3648 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3634:	f5 01       	movw	r30, r10
    3636:	86 89       	ldd	r24, Z+22	; 0x16
    3638:	81 fd       	sbrc	r24, 1
    363a:	04 c0       	rjmp	.+8      	; 0x3644 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    363c:	c5 01       	movw	r24, r10
    363e:	0e 94 de 04 	call	0x9bc	; 0x9bc <vPortFree>
    3642:	02 c0       	rjmp	.+4      	; 0x3648 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3644:	8e 7f       	andi	r24, 0xFE	; 254
    3646:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	a9 01       	movw	r20, r18
    364e:	be 01       	movw	r22, r28
    3650:	6f 5f       	subi	r22, 0xFF	; 255
    3652:	7f 4f       	sbci	r23, 0xFF	; 255
    3654:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <xTimerQueue>
    3658:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <xTimerQueue+0x1>
    365c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <xQueueReceive>
    3660:	81 11       	cpse	r24, r1
    3662:	70 cf       	rjmp	.-288    	; 0x3544 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3664:	28 96       	adiw	r28, 0x08	; 8
    3666:	0f b6       	in	r0, 0x3f	; 63
    3668:	f8 94       	cli
    366a:	de bf       	out	0x3e, r29	; 62
    366c:	0f be       	out	0x3f, r0	; 63
    366e:	cd bf       	out	0x3d, r28	; 61
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	df 90       	pop	r13
    367e:	cf 90       	pop	r12
    3680:	bf 90       	pop	r11
    3682:	af 90       	pop	r10
    3684:	08 95       	ret

00003686 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3686:	08 95       	ret

00003688 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3688:	84 b1       	in	r24, 0x04	; 4
    368a:	80 68       	ori	r24, 0x80	; 128
    368c:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    368e:	85 b1       	in	r24, 0x05	; 5
    3690:	80 68       	ori	r24, 0x80	; 128
    3692:	85 b9       	out	0x05, r24	; 5
    3694:	08 95       	ret

00003696 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3696:	83 b1       	in	r24, 0x03	; 3
    3698:	80 68       	ori	r24, 0x80	; 128
    369a:	83 b9       	out	0x03, r24	; 3
    369c:	08 95       	ret

0000369e <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    369e:	f4 df       	rcall	.-24     	; 0x3688 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36a0:	2f ef       	ldi	r18, 0xFF	; 255
    36a2:	80 e7       	ldi	r24, 0x70	; 112
    36a4:	92 e0       	ldi	r25, 0x02	; 2
    36a6:	21 50       	subi	r18, 0x01	; 1
    36a8:	80 40       	sbci	r24, 0x00	; 0
    36aa:	90 40       	sbci	r25, 0x00	; 0
    36ac:	e1 f7       	brne	.-8      	; 0x36a6 <vApplicationMallocFailedHook+0x8>
    36ae:	00 c0       	rjmp	.+0      	; 0x36b0 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    36b0:	00 00       	nop
    36b2:	f1 df       	rcall	.-30     	; 0x3696 <prvBlinkMainLed>
    36b4:	f5 cf       	rjmp	.-22     	; 0x36a0 <vApplicationMallocFailedHook+0x2>

000036b6 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    36b6:	e8 df       	rcall	.-48     	; 0x3688 <prvSetMainLedOn>
    36b8:	2f ef       	ldi	r18, 0xFF	; 255
    36ba:	87 ea       	ldi	r24, 0xA7	; 167
    36bc:	91 e6       	ldi	r25, 0x61	; 97
    36be:	21 50       	subi	r18, 0x01	; 1
    36c0:	80 40       	sbci	r24, 0x00	; 0
    36c2:	90 40       	sbci	r25, 0x00	; 0
    36c4:	e1 f7       	brne	.-8      	; 0x36be <vApplicationStackOverflowHook+0x8>
    36c6:	00 c0       	rjmp	.+0      	; 0x36c8 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    36c8:	00 00       	nop
    36ca:	e5 df       	rcall	.-54     	; 0x3696 <prvBlinkMainLed>
    36cc:	f5 cf       	rjmp	.-22     	; 0x36b8 <vApplicationStackOverflowHook+0x2>

000036ce <packageHandler_setTemperaturePercent>:
static uint16_t humidityPercent;
static uint16_t CO2_PPM;
static uint8_t status = 0x10;

void packageHandler_setTemperaturePercent(int16_t temperature){
	temperaturePercent = temperature;
    36ce:	90 93 1e 19 	sts	0x191E, r25	; 0x80191e <temperaturePercent+0x1>
    36d2:	80 93 1d 19 	sts	0x191D, r24	; 0x80191d <temperaturePercent>
    36d6:	08 95       	ret

000036d8 <packageHandler_setHumidityPercent>:
}

void packageHandler_setHumidityPercent(uint16_t humidity){
	humidityPercent = humidity;
    36d8:	90 93 1c 19 	sts	0x191C, r25	; 0x80191c <humidityPercent+0x1>
    36dc:	80 93 1b 19 	sts	0x191B, r24	; 0x80191b <humidityPercent>
    36e0:	08 95       	ret

000036e2 <packageHandler_setCO2ppm>:
}

void packageHandler_setCO2ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    36e2:	90 93 1a 19 	sts	0x191A, r25	; 0x80191a <CO2_PPM+0x1>
    36e6:	80 93 19 19 	sts	0x1919, r24	; 0x801919 <CO2_PPM>
    36ea:	08 95       	ret

000036ec <packageHandler_getLoraPackage>:
}

lora_driver_payload_t packageHandler_getLoraPackage(uint8_t port){
    36ec:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    36ee:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    36f0:	87 e0       	ldi	r24, 0x07	; 7
    36f2:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    36f4:	80 91 1d 19 	lds	r24, 0x191D	; 0x80191d <temperaturePercent>
    36f8:	90 91 1e 19 	lds	r25, 0x191E	; 0x80191e <temperaturePercent+0x1>
    36fc:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    36fe:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3700:	80 91 1b 19 	lds	r24, 0x191B	; 0x80191b <humidityPercent>
    3704:	90 91 1c 19 	lds	r25, 0x191C	; 0x80191c <humidityPercent+0x1>
    3708:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    370a:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    370c:	80 91 19 19 	lds	r24, 0x1919	; 0x801919 <CO2_PPM>
    3710:	90 91 1a 19 	lds	r25, 0x191A	; 0x80191a <CO2_PPM+0x1>
    3714:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    3716:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    3718:	80 e1       	ldi	r24, 0x10	; 16
    371a:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    371c:	cf 01       	movw	r24, r30
    371e:	08 95       	ret

00003720 <myCo2CallBack>:
}

//Sets lastCO2ppm when the callback is called
void myCo2CallBack(uint16_t ppm_parameter)
{
	lastCO2ppm = ppm_parameter;
    3720:	90 93 20 19 	sts	0x1920, r25	; 0x801920 <lastCO2ppm+0x1>
    3724:	80 93 1f 19 	sts	0x191F, r24	; 0x80191f <lastCO2ppm>
    3728:	08 95       	ret

0000372a <CO2Sensor_getPPM>:
}

//Getter for lastCO2ppm.
uint16_t CO2Sensor_getPPM() {
	return lastCO2ppm;
}
    372a:	80 91 1f 19 	lds	r24, 0x191F	; 0x80191f <lastCO2ppm>
    372e:	90 91 20 19 	lds	r25, 0x1920	; 0x801920 <lastCO2ppm+0x1>
    3732:	08 95       	ret

00003734 <create_CO2_sensor_createTask>:
	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

//Creates the CO2 task.
void create_CO2_sensor_createTask(UBaseType_t priority){
    3734:	ef 92       	push	r14
    3736:	ff 92       	push	r15
    3738:	0f 93       	push	r16
	xTaskCreate(
    373a:	e1 2c       	mov	r14, r1
    373c:	f1 2c       	mov	r15, r1
    373e:	08 2f       	mov	r16, r24
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	40 ec       	ldi	r20, 0xC0	; 192
    3746:	50 e0       	ldi	r21, 0x00	; 0
    3748:	6d e1       	ldi	r22, 0x1D	; 29
    374a:	73 e0       	ldi	r23, 0x03	; 3
    374c:	80 ef       	ldi	r24, 0xF0	; 240
    374e:	9b e1       	ldi	r25, 0x1B	; 27
    3750:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskCreate>
	"MeasuringCO2_Task",
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
}
    3754:	0f 91       	pop	r16
    3756:	ff 90       	pop	r15
    3758:	ef 90       	pop	r14
    375a:	08 95       	ret

0000375c <CO2Sensor_create>:
uint16_t lastCO2ppm = 0;


//Initializes the CO2 sensor driver, creates the CO2 task and sets up the callback.
// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3.
void CO2Sensor_create(UBaseType_t priority) {
    375c:	cf 93       	push	r28
    375e:	c8 2f       	mov	r28, r24
	mh_z19_initialise(ser_USART3);
    3760:	83 e0       	ldi	r24, 0x03	; 3
    3762:	0e 94 06 24 	call	0x480c	; 0x480c <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
    3766:	80 e9       	ldi	r24, 0x90	; 144
    3768:	9b e1       	ldi	r25, 0x1B	; 27
    376a:	0e 94 2b 24 	call	0x4856	; 0x4856 <mh_z19_injectCallBack>
	create_CO2_sensor_createTask(priority);
    376e:	8c 2f       	mov	r24, r28
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	e0 df       	rcall	.-64     	; 0x3734 <create_CO2_sensor_createTask>
}
    3774:	cf 91       	pop	r28
    3776:	08 95       	ret

00003778 <CO2Sensor_printReturnCode>:
		case MHZ19_OK: returnCodeString = "MHZ19_OK - Everything went well";
		case MHZ19_NO_MEASSURING_AVAILABLE: returnCodeString = "MHZ19_NO_MEASSURING_AVAILABLE - No results are received from the sensor";
		case MHZ19_NO_SERIAL: returnCodeString = "MHZ19_NO_SERIAL - No serial driver is specified";
		case MHZ19_PPM_MUST_BE_GT_999: returnCodeString = "MHZ19_PPM_MUST_BE_GT_999 - Span calibration is only allowed from ppm >= 1000";
	}
	printf("RETURNCODE: %s \n", returnCodeString);
    3778:	8f e2       	ldi	r24, 0x2F	; 47
    377a:	93 e0       	ldi	r25, 0x03	; 3
    377c:	9f 93       	push	r25
    377e:	8f 93       	push	r24
    3780:	8c e7       	ldi	r24, 0x7C	; 124
    3782:	93 e0       	ldi	r25, 0x03	; 3
    3784:	9f 93       	push	r25
    3786:	8f 93       	push	r24
    3788:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
}
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	08 95       	ret

00003796 <CO2Sensor_measure>:
{
	lastCO2ppm = ppm_parameter;
}

//Measures the CO2.
void CO2Sensor_measure() {
    3796:	cf 93       	push	r28
	mh_z19_returnCode_t measure_rc = mh_z19_takeMeassuring();
    3798:	0e 94 30 24 	call	0x4860	; 0x4860 <mh_z19_takeMeassuring>
    379c:	c8 2f       	mov	r28, r24
	if (measure_rc != MHZ19_OK)
    379e:	88 23       	and	r24, r24
    37a0:	61 f0       	breq	.+24     	; 0x37ba <CO2Sensor_measure+0x24>
	{
		printf("ERROR: CO2 Sensor could not measure, ");
    37a2:	8d e8       	ldi	r24, 0x8D	; 141
    37a4:	93 e0       	ldi	r25, 0x03	; 3
    37a6:	9f 93       	push	r25
    37a8:	8f 93       	push	r24
    37aa:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
		CO2Sensor_printReturnCode(measure_rc);
    37ae:	8c 2f       	mov	r24, r28
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	e2 df       	rcall	.-60     	; 0x3778 <CO2Sensor_printReturnCode>
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	08 c0       	rjmp	.+16     	; 0x37ca <CO2Sensor_measure+0x34>
	}
	else
	{
		printf("--->Initialized, CO2 Sensor<---");
    37ba:	83 eb       	ldi	r24, 0xB3	; 179
    37bc:	93 e0       	ldi	r25, 0x03	; 3
    37be:	9f 93       	push	r25
    37c0:	8f 93       	push	r24
    37c2:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    37ca:	8f e1       	ldi	r24, 0x1F	; 31
    37cc:	99 e1       	ldi	r25, 0x19	; 25
    37ce:	0e 94 5f 24 	call	0x48be	; 0x48be <mh_z19_getCo2Ppm>
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	90 93 20 19 	sts	0x1920, r25	; 0x801920 <lastCO2ppm+0x1>
    37d8:	80 93 1f 19 	sts	0x191F, r24	; 0x80191f <lastCO2ppm>
}
    37dc:	cf 91       	pop	r28
    37de:	08 95       	ret

000037e0 <CO2Sensor_task>:
//The CO2 sensor task.
void CO2Sensor_task(void* pvpParameter){
	while(1)
	{
	//Usage of Event group Wait fun until co2 measure bit is set to 1
	EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    37e0:	cc 24       	eor	r12, r12
    37e2:	ca 94       	dec	r12
    37e4:	dc 2c       	mov	r13, r12
    37e6:	76 01       	movw	r14, r12
    37e8:	01 e0       	ldi	r16, 0x01	; 1
    37ea:	21 e0       	ldi	r18, 0x01	; 1
    37ec:	41 e0       	ldi	r20, 0x01	; 1
    37ee:	50 e0       	ldi	r21, 0x00	; 0
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	70 e0       	ldi	r23, 0x00	; 0
    37f4:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <measureEventGroup>
    37f8:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <measureEventGroup+0x1>
    37fc:	0e 94 94 02 	call	0x528	; 0x528 <xEventGroupWaitBits>
	
	if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3800:	60 ff       	sbrs	r22, 0
    3802:	ee cf       	rjmp	.-36     	; 0x37e0 <CO2Sensor_task>
	{
		//printf("Measure bit and event bit was successfully checked ");
		CO2Sensor_measure();
    3804:	c8 df       	rcall	.-112    	; 0x3796 <CO2Sensor_measure>
		//printf("Measurement successful , now time to set ready bit of c02 ");
		xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    3806:	42 e0       	ldi	r20, 0x02	; 2
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	60 e0       	ldi	r22, 0x00	; 0
    380c:	70 e0       	ldi	r23, 0x00	; 0
    380e:	80 91 6c 1a 	lds	r24, 0x1A6C	; 0x801a6c <dataReadyEventGroup>
    3812:	90 91 6d 1a 	lds	r25, 0x1A6D	; 0x801a6d <dataReadyEventGroup+0x1>
    3816:	0e 94 34 03 	call	0x668	; 0x668 <xEventGroupSetBits>
    381a:	e2 cf       	rjmp	.-60     	; 0x37e0 <CO2Sensor_task>

0000381c <tempHumSensor_getTemp>:
	tempHumSensor_createTask(priority);
}
//Getter for temperature.
int16_t tempHumSensor_getTemp(){
	return temperature;
}
    381c:	80 91 21 19 	lds	r24, 0x1921	; 0x801921 <temperature>
    3820:	90 91 22 19 	lds	r25, 0x1922	; 0x801922 <temperature+0x1>
    3824:	08 95       	ret

00003826 <tempHumSensor_getHum>:
//Getter for humidity.
uint16_t tempHumSensor_getHum(){
	return humidity;
}
    3826:	80 91 23 19 	lds	r24, 0x1923	; 0x801923 <humidity>
    382a:	90 91 24 19 	lds	r25, 0x1924	; 0x801924 <humidity+0x1>
    382e:	08 95       	ret

00003830 <tempHumSensor_createTask>:
			printf("--->Temperature Set.<---");
	}
}

// Creates the temperature and humidity task.
void tempHumSensor_createTask(UBaseType_t priority){
    3830:	ef 92       	push	r14
    3832:	ff 92       	push	r15
    3834:	0f 93       	push	r16
	xTaskCreate(tempHumSensor_task,
    3836:	e1 2c       	mov	r14, r1
    3838:	f1 2c       	mov	r15, r1
    383a:	08 2f       	mov	r16, r24
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 ec       	ldi	r20, 0xC0	; 192
    3842:	50 e0       	ldi	r21, 0x00	; 0
    3844:	63 ed       	ldi	r22, 0xD3	; 211
    3846:	73 e0       	ldi	r23, 0x03	; 3
    3848:	82 ec       	ldi	r24, 0xC2	; 194
    384a:	9c e1       	ldi	r25, 0x1C	; 28
    384c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskCreate>
	"TempHumTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
}
    3850:	0f 91       	pop	r16
    3852:	ff 90       	pop	r15
    3854:	ef 90       	pop	r14
    3856:	08 95       	ret

00003858 <tempHumSensor_printReturnCode>:
		case HIH8120_OK: returnCodeString = "HIH8120_OK - Everything went well ";												
		case HIH8120_OUT_OF_HEAP: returnCodeString = "HIH8120_OUT_OF_HEAP - Not enough heap to initialize the driver";								
		case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED - Driver must be initialize before use";		
		case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY - The two wire/I2C interface is busy";									
	}
	printf("RETURNCODE: %s \n", returnCodeString);
    3858:	8f ed       	ldi	r24, 0xDF	; 223
    385a:	93 e0       	ldi	r25, 0x03	; 3
    385c:	9f 93       	push	r25
    385e:	8f 93       	push	r24
    3860:	8c e7       	ldi	r24, 0x7C	; 124
    3862:	93 e0       	ldi	r25, 0x03	; 3
    3864:	9f 93       	push	r25
    3866:	8f 93       	push	r24
    3868:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	08 95       	ret

00003876 <tempHumSensor_initialise>:
	return humidity;
}

//Initializes the temperature and humidity sensor driver and prints the return code.
void tempHumSensor_initialise()
{
    3876:	cf 93       	push	r28
	hih8120_driverReturnCode_t rc = hih8120_initialise();
    3878:	7c d2       	rcall	.+1272   	; 0x3d72 <hih8120_initialise>
    387a:	c8 2f       	mov	r28, r24
	
	if (rc != HIH8120_OK)
    387c:	88 23       	and	r24, r24
    387e:	61 f0       	breq	.+24     	; 0x3898 <tempHumSensor_initialise+0x22>
	{
		printf("ERROR: Initializing temperature & Humidity Sensor, ");
    3880:	85 e1       	ldi	r24, 0x15	; 21
    3882:	94 e0       	ldi	r25, 0x04	; 4
    3884:	9f 93       	push	r25
    3886:	8f 93       	push	r24
    3888:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
		tempHumSensor_printReturnCode(rc);
    388c:	8c 2f       	mov	r24, r28
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	e3 df       	rcall	.-58     	; 0x3858 <tempHumSensor_printReturnCode>
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	08 c0       	rjmp	.+16     	; 0x38a8 <tempHumSensor_initialise+0x32>
	}
	else
	{
		printf("--->Initialized, Temperature & Humidity Sensor<---");
    3898:	89 e4       	ldi	r24, 0x49	; 73
    389a:	94 e0       	ldi	r25, 0x04	; 4
    389c:	9f 93       	push	r25
    389e:	8f 93       	push	r24
    38a0:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
	}
}
    38a8:	cf 91       	pop	r28
    38aa:	08 95       	ret

000038ac <tempHumSensor_create>:

void tempHumSensor_task(void* pvpParameter);

//Initializes the temperature and humidity sensor driver and creates the temperature and humidity task.
void tempHumSensor_create(UBaseType_t priority)
{
    38ac:	cf 93       	push	r28
    38ae:	c8 2f       	mov	r28, r24
	tempHumSensor_initialise();
    38b0:	e2 df       	rcall	.-60     	; 0x3876 <tempHumSensor_initialise>
	tempHumSensor_createTask(priority);
    38b2:	8c 2f       	mov	r24, r28
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	bc df       	rcall	.-136    	; 0x3830 <tempHumSensor_createTask>
}
    38b8:	cf 91       	pop	r28
    38ba:	08 95       	ret

000038bc <tempHumSensor_measure>:
	}
}


//Measures the temperature and humidity.
void tempHumSensor_measure(){
    38bc:	cf 93       	push	r28
	//waking up the sensor and getting return code.
	hih8120_driverReturnCode_t wakeup_rc = hih8120_wakeup();
    38be:	74 d2       	rcall	.+1256   	; 0x3da8 <hih8120_wakeup>
    38c0:	c8 2f       	mov	r28, r24
	
	//checking return code and printing result.
	if (wakeup_rc != HIH8120_OK)
    38c2:	88 23       	and	r24, r24
    38c4:	61 f0       	breq	.+24     	; 0x38de <tempHumSensor_measure+0x22>
	{
		printf("ERROR: Waking temperature & Humidity Sensor up, ");
    38c6:	8c e7       	ldi	r24, 0x7C	; 124
    38c8:	94 e0       	ldi	r25, 0x04	; 4
    38ca:	9f 93       	push	r25
    38cc:	8f 93       	push	r24
    38ce:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
		tempHumSensor_printReturnCode(wakeup_rc);
    38d2:	8c 2f       	mov	r24, r28
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	c0 df       	rcall	.-128    	; 0x3858 <tempHumSensor_printReturnCode>
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	08 c0       	rjmp	.+16     	; 0x38ee <tempHumSensor_measure+0x32>
	}
	else
	{
		printf("--->Woke Temperature & Humidity Sensor up<---");
    38de:	8d ea       	ldi	r24, 0xAD	; 173
    38e0:	94 e0       	ldi	r25, 0x04	; 4
    38e2:	9f 93       	push	r25
    38e4:	8f 93       	push	r24
    38e6:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
	}
	
	//note: After the hih8120_wakeup() call the sensor will need minimum 50 ms to be ready! 
	vTaskDelay(pdMS_TO_TICKS(100));
    38ee:	66 e0       	ldi	r22, 0x06	; 6
    38f0:	70 e0       	ldi	r23, 0x00	; 0
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vTaskDelay>
	
	//waking up the sensor and getting return code.
	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
    38fa:	6b d2       	rcall	.+1238   	; 0x3dd2 <hih8120_measure>
    38fc:	c8 2f       	mov	r28, r24
	
	//checking return code and printing result.
	if (measure_rc != HIH8120_OK)
    38fe:	88 23       	and	r24, r24
    3900:	61 f0       	breq	.+24     	; 0x391a <tempHumSensor_measure+0x5e>
	{
		printf("ERROR: Temperature & Humidity Sensor could not measure, ");
    3902:	8b ed       	ldi	r24, 0xDB	; 219
    3904:	94 e0       	ldi	r25, 0x04	; 4
    3906:	9f 93       	push	r25
    3908:	8f 93       	push	r24
    390a:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
		tempHumSensor_printReturnCode(measure_rc);
    390e:	8c 2f       	mov	r24, r28
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	a2 df       	rcall	.-188    	; 0x3858 <tempHumSensor_printReturnCode>
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	08 c0       	rjmp	.+16     	; 0x392a <tempHumSensor_measure+0x6e>
	}
	else
	{
		printf("--->Temperature & Humidity Sensor done measuring<---");
    391a:	84 e1       	ldi	r24, 0x14	; 20
    391c:	95 e0       	ldi	r25, 0x05	; 5
    391e:	9f 93       	push	r25
    3920:	8f 93       	push	r24
    3922:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
	}
	
	//note: After the hih8120_measure() call the two wire inteface (TWI) will need minimum 1 ms to fetch the results from the sensor!  
	vTaskDelay(pdMS_TO_TICKS(50));
    392a:	63 e0       	ldi	r22, 0x03	; 3
    392c:	70 e0       	ldi	r23, 0x00	; 0
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vTaskDelay>
	
	//Checking if sensor is ready to return measurements.
	if (hih8120_isReady())
    3936:	35 d2       	rcall	.+1130   	; 0x3da2 <hih8120_isReady>
    3938:	88 23       	and	r24, r24
    393a:	11 f1       	breq	.+68     	; 0x3980 <tempHumSensor_measure+0xc4>
	{
		printf("--->HIH8120 is Ready.<---");
    393c:	89 e4       	ldi	r24, 0x49	; 73
    393e:	95 e0       	ldi	r25, 0x05	; 5
    3940:	9f 93       	push	r25
    3942:	8f 93       	push	r24
    3944:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
			humidity = hih8120_getHumidityPercent_x10();
    3948:	6a d2       	rcall	.+1236   	; 0x3e1e <hih8120_getHumidityPercent_x10>
    394a:	90 93 24 19 	sts	0x1924, r25	; 0x801924 <humidity+0x1>
    394e:	80 93 23 19 	sts	0x1923, r24	; 0x801923 <humidity>
			printf("--->Humidity Set.<---");
    3952:	83 e6       	ldi	r24, 0x63	; 99
    3954:	95 e0       	ldi	r25, 0x05	; 5
    3956:	9f 93       	push	r25
    3958:	8f 93       	push	r24
    395a:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
			temperature = hih8120_getTemperature_x10();
    395e:	85 d2       	rcall	.+1290   	; 0x3e6a <hih8120_getTemperature_x10>
    3960:	90 93 22 19 	sts	0x1922, r25	; 0x801922 <temperature+0x1>
    3964:	80 93 21 19 	sts	0x1921, r24	; 0x801921 <temperature>
			printf("--->Temperature Set.<---");
    3968:	89 e7       	ldi	r24, 0x79	; 121
    396a:	95 e0       	ldi	r25, 0x05	; 5
    396c:	9f 93       	push	r25
    396e:	8f 93       	push	r24
    3970:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	0f 90       	pop	r0
    397e:	0f 90       	pop	r0
	}
}
    3980:	cf 91       	pop	r28
    3982:	08 95       	ret

00003984 <tempHumSensor_task>:

//The temperature and humidity task.
void tempHumSensor_task(void* pvpParameter){
	while (1)
	{
	EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3984:	cc 24       	eor	r12, r12
    3986:	ca 94       	dec	r12
    3988:	dc 2c       	mov	r13, r12
    398a:	76 01       	movw	r14, r12
    398c:	01 e0       	ldi	r16, 0x01	; 1
    398e:	21 e0       	ldi	r18, 0x01	; 1
    3990:	44 e0       	ldi	r20, 0x04	; 4
    3992:	50 e0       	ldi	r21, 0x00	; 0
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	70 e0       	ldi	r23, 0x00	; 0
    3998:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <measureEventGroup>
    399c:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <measureEventGroup+0x1>
    39a0:	0e 94 94 02 	call	0x528	; 0x528 <xEventGroupWaitBits>
	if (uxBits &(TEMP_HUM_MEASURE_BIT))
    39a4:	62 ff       	sbrs	r22, 2
    39a6:	ee cf       	rjmp	.-36     	; 0x3984 <tempHumSensor_task>
	{
		tempHumSensor_measure();
    39a8:	89 df       	rcall	.-238    	; 0x38bc <tempHumSensor_measure>
		//After everything is done just setting 1 to ready bit so its now unblocked
		xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    39aa:	48 e0       	ldi	r20, 0x08	; 8
    39ac:	50 e0       	ldi	r21, 0x00	; 0
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	80 91 6c 1a 	lds	r24, 0x1A6C	; 0x801a6c <dataReadyEventGroup>
    39b6:	90 91 6d 1a 	lds	r25, 0x1A6D	; 0x801a6d <dataReadyEventGroup+0x1>
    39ba:	0e 94 34 03 	call	0x668	; 0x668 <xEventGroupSetBits>
    39be:	e2 cf       	rjmp	.-60     	; 0x3984 <tempHumSensor_task>

000039c0 <initialize_event_groups>:
MessageBufferHandle_t downlinkMessageBufferHandle;
SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    39c0:	0e 94 81 02 	call	0x502	; 0x502 <xEventGroupCreate>
    39c4:	90 93 6d 1a 	sts	0x1A6D, r25	; 0x801a6d <dataReadyEventGroup+0x1>
    39c8:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    39cc:	0e 94 81 02 	call	0x502	; 0x502 <xEventGroupCreate>
    39d0:	90 93 6f 1a 	sts	0x1A6F, r25	; 0x801a6f <measureEventGroup+0x1>
    39d4:	80 93 6e 1a 	sts	0x1A6E, r24	; 0x801a6e <measureEventGroup>
    39d8:	08 95       	ret

000039da <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    39da:	41 e0       	ldi	r20, 0x01	; 1
    39dc:	60 e0       	ldi	r22, 0x00	; 0
    39de:	70 e0       	ldi	r23, 0x00	; 0
    39e0:	8c e2       	ldi	r24, 0x2C	; 44
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <xStreamBufferGenericCreate>
    39e8:	90 93 71 1a 	sts	0x1A71, r25	; 0x801a71 <uplinkMessageBufferHandle+0x1>
    39ec:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    39f0:	89 2b       	or	r24, r25
    39f2:	21 f4       	brne	.+8      	; 0x39fc <initialize_message_buffers+0x22>
		printf("Failed to create uplink message buffer.\n");
    39f4:	82 e9       	ldi	r24, 0x92	; 146
    39f6:	95 e0       	ldi	r25, 0x05	; 5
    39f8:	0e 94 4d 34 	call	0x689a	; 0x689a <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    39fc:	41 e0       	ldi	r20, 0x01	; 1
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	70 e0       	ldi	r23, 0x00	; 0
    3a02:	8c e2       	ldi	r24, 0x2C	; 44
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	0e 94 ca 0a 	call	0x1594	; 0x1594 <xStreamBufferGenericCreate>
    3a0a:	90 93 73 1a 	sts	0x1A73, r25	; 0x801a73 <downlinkMessageBufferHandle+0x1>
    3a0e:	80 93 72 1a 	sts	0x1A72, r24	; 0x801a72 <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    3a12:	89 2b       	or	r24, r25
    3a14:	21 f4       	brne	.+8      	; 0x3a1e <initialize_message_buffers+0x44>
		printf("Failed to create downlink message buffer.\n");
    3a16:	8a eb       	ldi	r24, 0xBA	; 186
    3a18:	95 e0       	ldi	r25, 0x05	; 5
    3a1a:	0c 94 4d 34 	jmp	0x689a	; 0x689a <puts>
    3a1e:	08 95       	ret

00003a20 <initialize_semaphore>:
	}
}

 void initialize_semaphore(){
    3a20:	0f 93       	push	r16
 	configSemaphore = xSemaphoreCreateMutex();
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	0e 94 95 08 	call	0x112a	; 0x112a <xQueueCreateMutex>
    3a28:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <configSemaphore+0x1>
    3a2c:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <configSemaphore>
	 if(configSemaphore != NULL){
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	49 f0       	breq	.+18     	; 0x3a46 <initialize_semaphore+0x26>
		 xSemaphoreGive(configSemaphore);
    3a34:	00 e0       	ldi	r16, 0x00	; 0
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	a9 01       	movw	r20, r18
    3a3c:	60 e0       	ldi	r22, 0x00	; 0
    3a3e:	70 e0       	ldi	r23, 0x00	; 0
    3a40:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <xQueueGenericSend>
    3a44:	08 c0       	rjmp	.+16     	; 0x3a56 <initialize_semaphore+0x36>
	 }
	 else{
		 printf("Failed to create config semaphore");
    3a46:	84 ee       	ldi	r24, 0xE4	; 228
    3a48:	95 e0       	ldi	r25, 0x05	; 5
    3a4a:	9f 93       	push	r25
    3a4c:	8f 93       	push	r24
    3a4e:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
	 }
 }
    3a56:	0f 91       	pop	r16
    3a58:	08 95       	ret

00003a5a <_lora_setup>:
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}

static void _lora_setup(void)
{
    3a5a:	0f 93       	push	r16
    3a5c:	1f 93       	push	r17
    3a5e:	cf 93       	push	r28
    3a60:	df 93       	push	r29
    3a62:	cd b7       	in	r28, 0x3d	; 61
    3a64:	de b7       	in	r29, 0x3e	; 62
    3a66:	64 97       	sbiw	r28, 0x14	; 20
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	f8 94       	cli
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	0e 94 81 29 	call	0x5302	; 0x5302 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3a78:	70 d3       	rcall	.+1760   	; 0x415a <lora_driver_rn2483FactoryReset>
    3a7a:	ec d5       	rcall	.+3032   	; 0x4654 <lora_driver_mapReturnCodeToText>
    3a7c:	9f 93       	push	r25
    3a7e:	8f 93       	push	r24
    3a80:	86 e0       	ldi	r24, 0x06	; 6
    3a82:	96 e0       	ldi	r25, 0x06	; 6
    3a84:	9f 93       	push	r25
    3a86:	8f 93       	push	r24
    3a88:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3a8c:	e4 d4       	rcall	.+2504   	; 0x4456 <lora_driver_configureToEu868>
    3a8e:	e2 d5       	rcall	.+3012   	; 0x4654 <lora_driver_mapReturnCodeToText>
    3a90:	9f 93       	push	r25
    3a92:	8f 93       	push	r24
    3a94:	89 e1       	ldi	r24, 0x19	; 25
    3a96:	96 e0       	ldi	r25, 0x06	; 6
    3a98:	9f 93       	push	r25
    3a9a:	8f 93       	push	r24
    3a9c:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3aa0:	8e 01       	movw	r16, r28
    3aa2:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa6:	c8 01       	movw	r24, r16
    3aa8:	6a d3       	rcall	.+1748   	; 0x417e <lora_driver_getRn2483Hweui>
    3aaa:	d4 d5       	rcall	.+2984   	; 0x4654 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3aac:	1f 93       	push	r17
    3aae:	0f 93       	push	r16
    3ab0:	9f 93       	push	r25
    3ab2:	8f 93       	push	r24
    3ab4:	82 e3       	ldi	r24, 0x32	; 50
    3ab6:	96 e0       	ldi	r25, 0x06	; 6
    3ab8:	9f 93       	push	r25
    3aba:	8f 93       	push	r24
    3abc:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3ac0:	c8 01       	movw	r24, r16
    3ac2:	79 d3       	rcall	.+1778   	; 0x41b6 <lora_driver_setDeviceIdentifier>
    3ac4:	c7 d5       	rcall	.+2958   	; 0x4654 <lora_driver_mapReturnCodeToText>
    3ac6:	9f 93       	push	r25
    3ac8:	8f 93       	push	r24
    3aca:	1f 93       	push	r17
    3acc:	0f 93       	push	r16
    3ace:	86 e4       	ldi	r24, 0x46	; 70
    3ad0:	96 e0       	ldi	r25, 0x06	; 6
    3ad2:	9f 93       	push	r25
    3ad4:	8f 93       	push	r24
    3ad6:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3ada:	a8 01       	movw	r20, r16
    3adc:	6b e5       	ldi	r22, 0x5B	; 91
    3ade:	76 e0       	ldi	r23, 0x06	; 6
    3ae0:	8c e7       	ldi	r24, 0x7C	; 124
    3ae2:	96 e0       	ldi	r25, 0x06	; 6
    3ae4:	96 d5       	rcall	.+2860   	; 0x4612 <lora_driver_setOtaaIdentity>
    3ae6:	b6 d5       	rcall	.+2924   	; 0x4654 <lora_driver_mapReturnCodeToText>
    3ae8:	9f 93       	push	r25
    3aea:	8f 93       	push	r24
    3aec:	1f 93       	push	r17
    3aee:	0f 93       	push	r16
    3af0:	8b e5       	ldi	r24, 0x5B	; 91
    3af2:	96 e0       	ldi	r25, 0x06	; 6
    3af4:	9f 93       	push	r25
    3af6:	8f 93       	push	r24
    3af8:	8c e7       	ldi	r24, 0x7C	; 124
    3afa:	96 e0       	ldi	r25, 0x06	; 6
    3afc:	9f 93       	push	r25
    3afe:	8f 93       	push	r24
    3b00:	8d e8       	ldi	r24, 0x8D	; 141
    3b02:	96 e0       	ldi	r25, 0x06	; 6
    3b04:	9f 93       	push	r25
    3b06:	8f 93       	push	r24
    3b08:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3b0c:	87 d3       	rcall	.+1806   	; 0x421c <lora_driver_saveMac>
    3b0e:	a2 d5       	rcall	.+2884   	; 0x4654 <lora_driver_mapReturnCodeToText>
    3b10:	9f 93       	push	r25
    3b12:	8f 93       	push	r24
    3b14:	83 ec       	ldi	r24, 0xC3	; 195
    3b16:	96 e0       	ldi	r25, 0x06	; 6
    3b18:	9f 93       	push	r25
    3b1a:	8f 93       	push	r24
    3b1c:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	71 d4       	rcall	.+2274   	; 0x4410 <lora_driver_setAdaptiveDataRate>
    3b2e:	92 d5       	rcall	.+2852   	; 0x4654 <lora_driver_mapReturnCodeToText>
    3b30:	9f 93       	push	r25
    3b32:	8f 93       	push	r24
    3b34:	82 ed       	ldi	r24, 0xD2	; 210
    3b36:	96 e0       	ldi	r25, 0x06	; 6
    3b38:	9f 93       	push	r25
    3b3a:	8f 93       	push	r24
    3b3c:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3b40:	84 ef       	ldi	r24, 0xF4	; 244
    3b42:	91 e0       	ldi	r25, 0x01	; 1
    3b44:	70 d4       	rcall	.+2272   	; 0x4426 <lora_driver_setReceiveDelay>
    3b46:	86 d5       	rcall	.+2828   	; 0x4654 <lora_driver_mapReturnCodeToText>
    3b48:	9f 93       	push	r25
    3b4a:	8f 93       	push	r24
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	8f 93       	push	r24
    3b50:	84 ef       	ldi	r24, 0xF4	; 244
    3b52:	8f 93       	push	r24
    3b54:	83 ef       	ldi	r24, 0xF3	; 243
    3b56:	96 e0       	ldi	r25, 0x06	; 6
    3b58:	9f 93       	push	r25
    3b5a:	8f 93       	push	r24
    3b5c:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3b6a:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    3b6e:	5c d3       	rcall	.+1720   	; 0x4228 <lora_driver_join>
    3b70:	08 2f       	mov	r16, r24
    3b72:	70 d5       	rcall	.+2784   	; 0x4654 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3b74:	9f 93       	push	r25
    3b76:	8f 93       	push	r24
    3b78:	1f 92       	push	r1
    3b7a:	1f 93       	push	r17
    3b7c:	83 e1       	ldi	r24, 0x13	; 19
    3b7e:	97 e0       	ldi	r25, 0x07	; 7
    3b80:	9f 93       	push	r25
    3b82:	8f 93       	push	r24
    3b84:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	08 30       	cpi	r16, 0x08	; 8
    3b96:	59 f0       	breq	.+22     	; 0x3bae <_lora_setup+0x154>
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	0e 94 e5 29 	call	0x53ca	; 0x53ca <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3b9e:	66 e3       	ldi	r22, 0x36	; 54
    3ba0:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vTaskDelay>
    3baa:	11 50       	subi	r17, 0x01	; 1
    3bac:	f9 f6       	brne	.-66     	; 0x3b6c <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3bae:	08 30       	cpi	r16, 0x08	; 8
    3bb0:	21 f4       	brne	.+8      	; 0x3bba <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	0e 94 c7 29 	call	0x538e	; 0x538e <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3bb8:	09 c0       	rjmp	.+18     	; 0x3bcc <_lora_setup+0x172>
    3bba:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3bbc:	0e 94 d6 29 	call	0x53ac	; 0x53ac <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	0e 94 a4 29 	call	0x5348	; 0x5348 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3bc6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3bca:	fd cf       	rjmp	.-6      	; 0x3bc6 <_lora_setup+0x16c>
    3bcc:	64 96       	adiw	r28, 0x14	; 20
    3bce:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	1f 91       	pop	r17
    3bde:	0f 91       	pop	r16
    3be0:	08 95       	ret

00003be2 <uplinkHandler_task>:
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	ac d2       	rcall	.+1368   	; 0x413e <lora_driver_resetRn2483>

void uplinkHandler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    3be6:	62 e0       	ldi	r22, 0x02	; 2
    3be8:	70 e0       	ldi	r23, 0x00	; 0
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	a4 d2       	rcall	.+1352   	; 0x413e <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3bf6:	66 e9       	ldi	r22, 0x96	; 150
    3bf8:	70 e0       	ldi	r23, 0x00	; 0
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3c02:	56 d2       	rcall	.+1196   	; 0x40b0 <lora_driver_flushBuffers>

	_lora_setup();
    3c04:	2a df       	rcall	.-428    	; 0x3a5a <_lora_setup>
    3c06:	0f ef       	ldi	r16, 0xFF	; 255
		uint16_t hum = 0;
		uint16_t co2 = 0;
		uint8_t status = 0;
		uint8_t xReceivedBytes = 0;
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    3c08:	1f ef       	ldi	r17, 0xFF	; 255
    3c0a:	98 01       	movw	r18, r16
    3c0c:	46 e1       	ldi	r20, 0x16	; 22
    3c0e:	50 e0       	ldi	r21, 0x00	; 0
    3c10:	65 e2       	ldi	r22, 0x25	; 37
    3c12:	79 e1       	ldi	r23, 0x19	; 25
    3c14:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <uplinkMessageBufferHandle>
    3c18:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uplinkMessageBufferHandle+0x1>
    3c1c:	0e 94 35 0c 	call	0x186a	; 0x186a <xStreamBufferReceive>
    3c20:	88 23       	and	r24, r24
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    3c22:	89 f3       	breq	.-30     	; 0x3c06 <uplinkHandler_task+0x24>
    3c24:	e5 e2       	ldi	r30, 0x25	; 37
			// 				printf("Number of bytes read from the message buffer: %d\n", xReceivedBytes);
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    3c26:	f9 e1       	ldi	r31, 0x19	; 25
    3c28:	82 81       	ldd	r24, Z+2	; 0x02
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	98 2f       	mov	r25, r24
    3c2e:	88 27       	eor	r24, r24
    3c30:	23 81       	ldd	r18, Z+3	; 0x03
    3c32:	82 2b       	or	r24, r18
    3c34:	04 81       	ldd	r16, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    3c36:	10 e0       	ldi	r17, 0x00	; 0
    3c38:	10 2f       	mov	r17, r16
    3c3a:	00 27       	eor	r16, r16
    3c3c:	25 81       	ldd	r18, Z+5	; 0x05
    3c3e:	02 2b       	or	r16, r18
    3c40:	c6 81       	ldd	r28, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    3c42:	d0 e0       	ldi	r29, 0x00	; 0
    3c44:	dc 2f       	mov	r29, r28
    3c46:	cc 27       	eor	r28, r28
    3c48:	27 81       	ldd	r18, Z+7	; 0x07
    3c4a:	c2 2b       	or	r28, r18
    3c4c:	f0 84       	ldd	r15, Z+8	; 0x08
			status = _uplink_payload.bytes[6];
    3c4e:	9f 93       	push	r25
			
			printf("Temperature sent: %d\n", tem);
    3c50:	8f 93       	push	r24
    3c52:	83 e3       	ldi	r24, 0x33	; 51
    3c54:	97 e0       	ldi	r25, 0x07	; 7
    3c56:	9f 93       	push	r25
    3c58:	8f 93       	push	r24
    3c5a:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3c5e:	1f 93       	push	r17
			printf("Humidity sent: %d\n", hum);
    3c60:	0f 93       	push	r16
    3c62:	89 e4       	ldi	r24, 0x49	; 73
    3c64:	97 e0       	ldi	r25, 0x07	; 7
    3c66:	9f 93       	push	r25
    3c68:	8f 93       	push	r24
    3c6a:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3c6e:	df 93       	push	r29
			printf("CO2 sent: %d\n", co2);
    3c70:	cf 93       	push	r28
    3c72:	8c e5       	ldi	r24, 0x5C	; 92
    3c74:	97 e0       	ldi	r25, 0x07	; 7
    3c76:	9f 93       	push	r25
    3c78:	8f 93       	push	r24
    3c7a:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3c7e:	1f 92       	push	r1
			printf("Status sent: %d\n", status);
    3c80:	ff 92       	push	r15
    3c82:	8a e6       	ldi	r24, 0x6A	; 106
    3c84:	97 e0       	ldi	r25, 0x07	; 7
    3c86:	9f 93       	push	r25
    3c88:	8f 93       	push	r24
    3c8a:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3c8e:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    3c90:	0e 94 f7 29 	call	0x53ee	; 0x53ee <status_leds_shortPuls>
			//WHAT THE HELL DOES THE FALSE DO 
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3c94:	65 e2       	ldi	r22, 0x25	; 37
    3c96:	79 e1       	ldi	r23, 0x19	; 25
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	ef d2       	rcall	.+1502   	; 0x427a <lora_driver_sendUploadMessage>
    3c9c:	db d4       	rcall	.+2486   	; 0x4654 <lora_driver_mapReturnCodeToText>
    3c9e:	9f 93       	push	r25
    3ca0:	8f 93       	push	r24
    3ca2:	8b e7       	ldi	r24, 0x7B	; 123
    3ca4:	97 e0       	ldi	r25, 0x07	; 7
    3ca6:	9f 93       	push	r25
    3ca8:	8f 93       	push	r24
    3caa:	0e 94 39 34 	call	0x6872	; 0x6872 <printf>
    3cae:	8d b7       	in	r24, 0x3d	; 61
    3cb0:	9e b7       	in	r25, 0x3e	; 62
    3cb2:	44 96       	adiw	r24, 0x14	; 20
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	f8 94       	cli
    3cb8:	9e bf       	out	0x3e, r25	; 62
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	8d bf       	out	0x3d, r24	; 61
    3cbe:	a3 cf       	rjmp	.-186    	; 0x3c06 <uplinkHandler_task+0x24>

00003cc0 <uplinkHandler_createTask>:
    3cc0:	90 df       	rcall	.-224    	; 0x3be2 <uplinkHandler_task>

00003cc2 <uplinkHandler_create>:

static lora_driver_payload_t _uplink_payload;

void uplinkHandler_create(UBaseType_t priority)
{
	uplinkHandler_createTask(priority);
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	fd df       	rcall	.-6      	; 0x3cc0 <uplinkHandler_createTask>

00003cc6 <main_create>:
#include "UplinkHandler.h"
#include "DownlinkHandler.h"


void main_create(){
	uplinkHandler_create(4);
    3cc6:	84 e0       	ldi	r24, 0x04	; 4
    3cc8:	fc df       	rcall	.-8      	; 0x3cc2 <uplinkHandler_create>
	downlinkHandler_create(4);
    3cca:	84 e0       	ldi	r24, 0x04	; 4
    3ccc:	0e 94 18 02 	call	0x430	; 0x430 <downlinkHandler_create>
	application_create(3);
    3cd0:	83 e0       	ldi	r24, 0x03	; 3
    3cd2:	0e 94 0b 02 	call	0x416	; 0x416 <application_create>
	CO2Sensor_create(1);
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	41 dd       	rcall	.-1406   	; 0x375c <CO2Sensor_create>
	tempHumSensor_create(1);
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	e7 dd       	rcall	.-1074   	; 0x38ac <tempHumSensor_create>
    3cde:	82 e0       	ldi	r24, 0x02	; 2
	fanController_create(2);
    3ce0:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <fanController_create>
    3ce4:	08 95       	ret

00003ce6 <initializeSystem>:
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3ce8:	0e 94 2c 28 	call	0x5058	; 0x5058 <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    3cec:	85 e0       	ldi	r24, 0x05	; 5
    3cee:	0e 94 33 29 	call	0x5266	; 0x5266 <status_leds_initialise>

	initialize_event_groups();
    3cf2:	66 de       	rcall	.-820    	; 0x39c0 <initialize_event_groups>
	initialize_message_buffers();
    3cf4:	72 de       	rcall	.-796    	; 0x39da <initialize_message_buffers>
	initialize_semaphore();
    3cf6:	94 de       	rcall	.-728    	; 0x3a20 <initialize_semaphore>
    3cf8:	60 91 72 1a 	lds	r22, 0x1A72	; 0x801a72 <downlinkMessageBufferHandle>
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    3cfc:	70 91 73 1a 	lds	r23, 0x1A73	; 0x801a73 <downlinkMessageBufferHandle+0x1>
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	dd d1       	rcall	.+954    	; 0x40be <lora_driver_initialise>
	main_create();
    3d04:	e0 cf       	rjmp	.-64     	; 0x3cc6 <main_create>
    3d06:	08 95       	ret

00003d08 <main>:
    3d08:	ee df       	rcall	.-36     	; 0x3ce6 <initializeSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    3d0a:	80 e9       	ldi	r24, 0x90	; 144
    3d0c:	97 e0       	ldi	r25, 0x07	; 7
    3d0e:	0e 94 4d 34 	call	0x689a	; 0x689a <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3d12:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <vTaskStartScheduler>
    3d16:	ff cf       	rjmp	.-2      	; 0x3d16 <main+0xe>

00003d18 <_hihTwiCallback>:
    3d18:	65 30       	cpi	r22, 0x05	; 5
    3d1a:	f1 f4       	brne	.+60     	; 0x3d58 <_hihTwiCallback+0x40>
    3d1c:	fa 01       	movw	r30, r20
    3d1e:	80 81       	ld	r24, Z
    3d20:	8f 73       	andi	r24, 0x3F	; 63
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	98 2f       	mov	r25, r24
    3d26:	88 27       	eor	r24, r24
    3d28:	21 81       	ldd	r18, Z+1	; 0x01
    3d2a:	82 2b       	or	r24, r18
    3d2c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d30:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d34:	82 81       	ldd	r24, Z+2	; 0x02
    3d36:	f0 e4       	ldi	r31, 0x40	; 64
    3d38:	8f 9f       	mul	r24, r31
    3d3a:	c0 01       	movw	r24, r0
    3d3c:	11 24       	eor	r1, r1
    3d3e:	fa 01       	movw	r30, r20
    3d40:	23 81       	ldd	r18, Z+3	; 0x03
    3d42:	26 95       	lsr	r18
    3d44:	26 95       	lsr	r18
    3d46:	82 2b       	or	r24, r18
    3d48:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d4c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <_measuringIsReady>
    3d56:	08 95       	ret
    3d58:	64 30       	cpi	r22, 0x04	; 4
    3d5a:	51 f0       	breq	.+20     	; 0x3d70 <_hihTwiCallback+0x58>
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	90 e4       	ldi	r25, 0x40	; 64
    3d60:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3d64:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3d68:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3d6c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3d70:	08 95       	ret

00003d72 <hih8120_initialise>:
    3d72:	0f 93       	push	r16
    3d74:	1f 93       	push	r17
    3d76:	0c e8       	ldi	r16, 0x8C	; 140
    3d78:	1e e1       	ldi	r17, 0x1E	; 30
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	34 e2       	ldi	r19, 0x24	; 36
    3d7e:	44 ef       	ldi	r20, 0xF4	; 244
    3d80:	50 e0       	ldi	r21, 0x00	; 0
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	87 e2       	ldi	r24, 0x27	; 39
    3d86:	0e 94 19 2a 	call	0x5432	; 0x5432 <twiCreate>
    3d8a:	90 93 3d 19 	sts	0x193D, r25	; 0x80193d <_hih8120Handler+0x1>
    3d8e:	80 93 3c 19 	sts	0x193C, r24	; 0x80193c <_hih8120Handler>
    3d92:	21 e0       	ldi	r18, 0x01	; 1
    3d94:	89 2b       	or	r24, r25
    3d96:	09 f0       	breq	.+2      	; 0x3d9a <hih8120_initialise+0x28>
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	82 2f       	mov	r24, r18
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	08 95       	ret

00003da2 <hih8120_isReady>:
    3da2:	80 91 3b 19 	lds	r24, 0x193B	; 0x80193b <_measuringIsReady>
    3da6:	08 95       	ret

00003da8 <hih8120_wakeup>:
    3da8:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <_hih8120Handler>
    3dac:	90 91 3d 19 	lds	r25, 0x193D	; 0x80193d <_hih8120Handler+0x1>
    3db0:	00 97       	sbiw	r24, 0x00	; 0
    3db2:	59 f0       	breq	.+22     	; 0x3dca <hih8120_wakeup+0x22>
    3db4:	40 e0       	ldi	r20, 0x00	; 0
    3db6:	60 e0       	ldi	r22, 0x00	; 0
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <twiTransmit>
    3dbe:	84 30       	cpi	r24, 0x04	; 4
    3dc0:	31 f4       	brne	.+12     	; 0x3dce <hih8120_wakeup+0x26>
    3dc2:	10 92 3b 19 	sts	0x193B, r1	; 0x80193b <_measuringIsReady>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	08 95       	ret
    3dca:	82 e0       	ldi	r24, 0x02	; 2
    3dcc:	08 95       	ret
    3dce:	83 e0       	ldi	r24, 0x03	; 3
    3dd0:	08 95       	ret

00003dd2 <hih8120_measure>:
    3dd2:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <_hih8120Handler>
    3dd6:	90 91 3d 19 	lds	r25, 0x193D	; 0x80193d <_hih8120Handler+0x1>
    3dda:	00 97       	sbiw	r24, 0x00	; 0
    3ddc:	39 f0       	breq	.+14     	; 0x3dec <hih8120_measure+0x1a>
    3dde:	64 e0       	ldi	r22, 0x04	; 4
    3de0:	0e 94 b6 2a 	call	0x556c	; 0x556c <twiReceive>
    3de4:	85 30       	cpi	r24, 0x05	; 5
    3de6:	21 f0       	breq	.+8      	; 0x3df0 <hih8120_measure+0x1e>
    3de8:	83 e0       	ldi	r24, 0x03	; 3
    3dea:	08 95       	ret
    3dec:	82 e0       	ldi	r24, 0x02	; 2
    3dee:	08 95       	ret
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	08 95       	ret

00003df4 <hih8120_getHumidity>:
    3df4:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3df8:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	0e 94 49 30 	call	0x6092	; 0x6092 <__floatunsisf>
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	48 ec       	ldi	r20, 0xC8	; 200
    3e0a:	52 e4       	ldi	r21, 0x42	; 66
    3e0c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <__mulsf3>
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	38 ef       	ldi	r19, 0xF8	; 248
    3e14:	4f e7       	ldi	r20, 0x7F	; 127
    3e16:	56 e4       	ldi	r21, 0x46	; 70
    3e18:	0c 94 b0 2f 	jmp	0x5f60	; 0x5f60 <__divsf3>
    3e1c:	08 95       	ret

00003e1e <hih8120_getHumidityPercent_x10>:
    3e1e:	ea df       	rcall	.-44     	; 0x3df4 <hih8120_getHumidity>
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	40 e2       	ldi	r20, 0x20	; 32
    3e26:	51 e4       	ldi	r21, 0x41	; 65
    3e28:	0e 94 d7 30 	call	0x61ae	; 0x61ae <__mulsf3>
    3e2c:	0e 94 1d 30 	call	0x603a	; 0x603a <__fixunssfsi>
    3e30:	cb 01       	movw	r24, r22
    3e32:	08 95       	ret

00003e34 <hih8120_getTemperature>:
    3e34:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3e38:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3e3c:	80 e0       	ldi	r24, 0x00	; 0
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	0e 94 49 30 	call	0x6092	; 0x6092 <__floatunsisf>
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	45 e2       	ldi	r20, 0x25	; 37
    3e4a:	53 e4       	ldi	r21, 0x43	; 67
    3e4c:	0e 94 d7 30 	call	0x61ae	; 0x61ae <__mulsf3>
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	38 ef       	ldi	r19, 0xF8	; 248
    3e54:	4f e7       	ldi	r20, 0x7F	; 127
    3e56:	56 e4       	ldi	r21, 0x46	; 70
    3e58:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__divsf3>
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e2       	ldi	r20, 0x20	; 32
    3e62:	52 e4       	ldi	r21, 0x42	; 66
    3e64:	0c 94 4b 2f 	jmp	0x5e96	; 0x5e96 <__subsf3>
    3e68:	08 95       	ret

00003e6a <hih8120_getTemperature_x10>:
    3e6a:	e4 df       	rcall	.-56     	; 0x3e34 <hih8120_getTemperature>
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	40 e2       	ldi	r20, 0x20	; 32
    3e72:	51 e4       	ldi	r21, 0x41	; 65
    3e74:	0e 94 d7 30 	call	0x61ae	; 0x61ae <__mulsf3>
    3e78:	0e 94 18 30 	call	0x6030	; 0x6030 <__fixsfsi>
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	08 95       	ret

00003e80 <_serialCallBack>:
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	1f 92       	push	r1
    3e8a:	1f 92       	push	r1
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	8c 01       	movw	r16, r24
    3e92:	19 82       	std	Y+1, r1	; 0x01
    3e94:	2d c0       	rjmp	.+90     	; 0x3ef0 <_serialCallBack+0x70>
    3e96:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <rec_buf_inp.2878>
    3e9a:	ec 32       	cpi	r30, 0x2C	; 44
    3e9c:	50 f4       	brcc	.+20     	; 0x3eb2 <_serialCallBack+0x32>
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	8e 0f       	add	r24, r30
    3ea2:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <rec_buf_inp.2878>
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	e9 55       	subi	r30, 0x59	; 89
    3eaa:	f6 4e       	sbci	r31, 0xE6	; 230
    3eac:	8a 81       	ldd	r24, Y+2	; 0x02
    3eae:	80 83       	st	Z, r24
    3eb0:	02 c0       	rjmp	.+4      	; 0x3eb6 <_serialCallBack+0x36>
    3eb2:	10 92 75 19 	sts	0x1975, r1	; 0x801975 <rec_buf_inp.2878>
    3eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb8:	8a 30       	cpi	r24, 0x0A	; 10
    3eba:	d1 f4       	brne	.+52     	; 0x3ef0 <_serialCallBack+0x70>
    3ebc:	40 91 75 19 	lds	r20, 0x1975	; 0x801975 <rec_buf_inp.2878>
    3ec0:	50 e0       	ldi	r21, 0x00	; 0
    3ec2:	fa 01       	movw	r30, r20
    3ec4:	eb 55       	subi	r30, 0x5B	; 91
    3ec6:	f6 4e       	sbci	r31, 0xE6	; 230
    3ec8:	10 82       	st	Z, r1
    3eca:	41 50       	subi	r20, 0x01	; 1
    3ecc:	51 09       	sbc	r21, r1
    3ece:	9e 01       	movw	r18, r28
    3ed0:	2f 5f       	subi	r18, 0xFF	; 255
    3ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed4:	67 ea       	ldi	r22, 0xA7	; 167
    3ed6:	79 e1       	ldi	r23, 0x19	; 25
    3ed8:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_serialReplyBufferHandle>
    3edc:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <_serialReplyBufferHandle+0x1>
    3ee0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <xStreamBufferSendFromISR>
    3ee4:	89 81       	ldd	r24, Y+1	; 0x01
    3ee6:	81 11       	cpse	r24, r1
    3ee8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    3eec:	10 92 75 19 	sts	0x1975, r1	; 0x801975 <rec_buf_inp.2878>
    3ef0:	be 01       	movw	r22, r28
    3ef2:	6e 5f       	subi	r22, 0xFE	; 254
    3ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef6:	c8 01       	movw	r24, r16
    3ef8:	19 d6       	rcall	.+3122   	; 0x4b2c <serial_getByte>
    3efa:	88 23       	and	r24, r24
    3efc:	61 f2       	breq	.-104    	; 0x3e96 <_serialCallBack+0x16>
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	df 91       	pop	r29
    3f04:	cf 91       	pop	r28
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	08 95       	ret

00003f0c <_uploadMessage>:
    3f0c:	0f 93       	push	r16
    3f0e:	1f 93       	push	r17
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	8c 01       	movw	r16, r24
    3f16:	eb 01       	movw	r28, r22
    3f18:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_serialReplyBufferHandle>
    3f1c:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <_serialReplyBufferHandle+0x1>
    3f20:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xStreamBufferReset>
    3f24:	b8 01       	movw	r22, r16
    3f26:	8e e3       	ldi	r24, 0x3E	; 62
    3f28:	99 e1       	ldi	r25, 0x19	; 25
    3f2a:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <strcpy>
    3f2e:	20 97       	sbiw	r28, 0x00	; 0
    3f30:	79 f0       	breq	.+30     	; 0x3f50 <_uploadMessage+0x44>
    3f32:	ee e3       	ldi	r30, 0x3E	; 62
    3f34:	f9 e1       	ldi	r31, 0x19	; 25
    3f36:	01 90       	ld	r0, Z+
    3f38:	00 20       	and	r0, r0
    3f3a:	e9 f7       	brne	.-6      	; 0x3f36 <_uploadMessage+0x2a>
    3f3c:	31 97       	sbiw	r30, 0x01	; 1
    3f3e:	80 e2       	ldi	r24, 0x20	; 32
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	91 83       	std	Z+1, r25	; 0x01
    3f44:	80 83       	st	Z, r24
    3f46:	be 01       	movw	r22, r28
    3f48:	8e e3       	ldi	r24, 0x3E	; 62
    3f4a:	99 e1       	ldi	r25, 0x19	; 25
    3f4c:	0e 94 c8 33 	call	0x6790	; 0x6790 <strcat>
    3f50:	ee e3       	ldi	r30, 0x3E	; 62
    3f52:	f9 e1       	ldi	r31, 0x19	; 25
    3f54:	df 01       	movw	r26, r30
    3f56:	0d 90       	ld	r0, X+
    3f58:	00 20       	and	r0, r0
    3f5a:	e9 f7       	brne	.-6      	; 0x3f56 <_uploadMessage+0x4a>
    3f5c:	11 97       	sbiw	r26, 0x01	; 1
    3f5e:	8d e0       	ldi	r24, 0x0D	; 13
    3f60:	9a e0       	ldi	r25, 0x0A	; 10
    3f62:	11 96       	adiw	r26, 0x01	; 1
    3f64:	9c 93       	st	X, r25
    3f66:	8e 93       	st	-X, r24
    3f68:	12 96       	adiw	r26, 0x02	; 2
    3f6a:	1c 92       	st	X, r1
    3f6c:	01 90       	ld	r0, Z+
    3f6e:	00 20       	and	r0, r0
    3f70:	e9 f7       	brne	.-6      	; 0x3f6c <_uploadMessage+0x60>
    3f72:	31 97       	sbiw	r30, 0x01	; 1
    3f74:	ee 53       	subi	r30, 0x3E	; 62
    3f76:	f9 41       	sbci	r31, 0x19	; 25
    3f78:	ae 2f       	mov	r26, r30
    3f7a:	8e e3       	ldi	r24, 0x3E	; 62
    3f7c:	99 e1       	ldi	r25, 0x19	; 25
    3f7e:	ac 01       	movw	r20, r24
    3f80:	6a 2f       	mov	r22, r26
    3f82:	80 91 7a 19 	lds	r24, 0x197A	; 0x80197a <_rn2483_serial>
    3f86:	90 91 7b 19 	lds	r25, 0x197B	; 0x80197b <_rn2483_serial+0x1>
    3f8a:	7b d5       	rcall	.+2806   	; 0x4a82 <serial_sendBytes>
    3f8c:	81 11       	cpse	r24, r1
    3f8e:	11 c0       	rjmp	.+34     	; 0x3fb2 <_uploadMessage+0xa6>
    3f90:	08 e2       	ldi	r16, 0x28	; 40
    3f92:	15 e0       	ldi	r17, 0x05	; 5
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	4d e2       	ldi	r20, 0x2D	; 45
    3f9a:	50 e0       	ldi	r21, 0x00	; 0
    3f9c:	61 e0       	ldi	r22, 0x01	; 1
    3f9e:	7a e1       	ldi	r23, 0x1A	; 26
    3fa0:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_serialReplyBufferHandle>
    3fa4:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <_serialReplyBufferHandle+0x1>
    3fa8:	0e 94 35 0c 	call	0x186a	; 0x186a <xStreamBufferReceive>
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	9a e1       	ldi	r25, 0x1A	; 26
    3fb0:	02 c0       	rjmp	.+4      	; 0x3fb6 <_uploadMessage+0xaa>
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	df 91       	pop	r29
    3fb8:	cf 91       	pop	r28
    3fba:	1f 91       	pop	r17
    3fbc:	0f 91       	pop	r16
    3fbe:	08 95       	ret

00003fc0 <_reply2ReturnCode>:
    3fc0:	2f 92       	push	r2
    3fc2:	3f 92       	push	r3
    3fc4:	4f 92       	push	r4
    3fc6:	5f 92       	push	r5
    3fc8:	6f 92       	push	r6
    3fca:	7f 92       	push	r7
    3fcc:	8f 92       	push	r8
    3fce:	9f 92       	push	r9
    3fd0:	af 92       	push	r10
    3fd2:	bf 92       	push	r11
    3fd4:	cf 92       	push	r12
    3fd6:	df 92       	push	r13
    3fd8:	ef 92       	push	r14
    3fda:	ff 92       	push	r15
    3fdc:	0f 93       	push	r16
    3fde:	1f 93       	push	r17
    3fe0:	cf 93       	push	r28
    3fe2:	df 93       	push	r29
    3fe4:	5c 01       	movw	r10, r24
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	01 90       	ld	r0, Z+
    3fea:	00 20       	and	r0, r0
    3fec:	e9 f7       	brne	.-6      	; 0x3fe8 <_reply2ReturnCode+0x28>
    3fee:	31 97       	sbiw	r30, 0x01	; 1
    3ff0:	6f 01       	movw	r12, r30
    3ff2:	c8 1a       	sub	r12, r24
    3ff4:	d9 0a       	sbc	r13, r25
    3ff6:	5c 2c       	mov	r5, r12
    3ff8:	0f 2e       	mov	r0, r31
    3ffa:	fb e3       	ldi	r31, 0x3B	; 59
    3ffc:	8f 2e       	mov	r8, r31
    3ffe:	fa e0       	ldi	r31, 0x0A	; 10
    4000:	9f 2e       	mov	r9, r31
    4002:	f0 2d       	mov	r31, r0
    4004:	e1 2c       	mov	r14, r1
    4006:	f1 2c       	mov	r15, r1
    4008:	4c 2c       	mov	r4, r12
    400a:	37 01       	movw	r6, r14
    400c:	f4 01       	movw	r30, r8
    400e:	01 81       	ldd	r16, Z+1	; 0x01
    4010:	12 81       	ldd	r17, Z+2	; 0x02
    4012:	e8 01       	movw	r28, r16
    4014:	09 90       	ld	r0, Y+
    4016:	00 20       	and	r0, r0
    4018:	e9 f7       	brne	.-6      	; 0x4014 <_reply2ReturnCode+0x54>
    401a:	21 97       	sbiw	r28, 0x01	; 1
    401c:	c0 1b       	sub	r28, r16
    401e:	d1 0b       	sbc	r29, r17
    4020:	3c 2e       	mov	r3, r28
    4022:	f9 e0       	ldi	r31, 0x09	; 9
    4024:	cf 16       	cp	r12, r31
    4026:	d1 04       	cpc	r13, r1
    4028:	58 f0       	brcs	.+22     	; 0x4040 <_reply2ReturnCode+0x80>
    402a:	f4 01       	movw	r30, r8
    402c:	20 80       	ld	r2, Z
    402e:	fe e0       	ldi	r31, 0x0E	; 14
    4030:	2f 12       	cpse	r2, r31
    4032:	06 c0       	rjmp	.+12     	; 0x4040 <_reply2ReturnCode+0x80>
    4034:	b8 01       	movw	r22, r16
    4036:	c5 01       	movw	r24, r10
    4038:	0e 94 a3 33 	call	0x6746	; 0x6746 <strcasestr>
    403c:	89 2b       	or	r24, r25
    403e:	09 f5       	brne	.+66     	; 0x4082 <_reply2ReturnCode+0xc2>
    4040:	44 2d       	mov	r20, r4
    4042:	35 14       	cp	r3, r5
    4044:	08 f4       	brcc	.+2      	; 0x4048 <_reply2ReturnCode+0x88>
    4046:	4c 2f       	mov	r20, r28
    4048:	50 e0       	ldi	r21, 0x00	; 0
    404a:	b8 01       	movw	r22, r16
    404c:	c5 01       	movw	r24, r10
    404e:	0e 94 da 33 	call	0x67b4	; 0x67b4 <strncasecmp>
    4052:	89 2b       	or	r24, r25
    4054:	49 f4       	brne	.+18     	; 0x4068 <_reply2ReturnCode+0xa8>
    4056:	f3 01       	movw	r30, r6
    4058:	ee 0f       	add	r30, r30
    405a:	ff 1f       	adc	r31, r31
    405c:	e6 0d       	add	r30, r6
    405e:	f7 1d       	adc	r31, r7
    4060:	e5 5c       	subi	r30, 0xC5	; 197
    4062:	f5 4f       	sbci	r31, 0xF5	; 245
    4064:	20 80       	ld	r2, Z
    4066:	0d c0       	rjmp	.+26     	; 0x4082 <_reply2ReturnCode+0xc2>
    4068:	8f ef       	ldi	r24, 0xFF	; 255
    406a:	e8 1a       	sub	r14, r24
    406c:	f8 0a       	sbc	r15, r24
    406e:	e3 e0       	ldi	r30, 0x03	; 3
    4070:	8e 0e       	add	r8, r30
    4072:	91 1c       	adc	r9, r1
    4074:	f1 e1       	ldi	r31, 0x11	; 17
    4076:	ef 16       	cp	r14, r31
    4078:	f1 04       	cpc	r15, r1
    407a:	39 f6       	brne	.-114    	; 0x400a <_reply2ReturnCode+0x4a>
    407c:	68 94       	set
    407e:	22 24       	eor	r2, r2
    4080:	24 f8       	bld	r2, 4
    4082:	82 2d       	mov	r24, r2
    4084:	df 91       	pop	r29
    4086:	cf 91       	pop	r28
    4088:	1f 91       	pop	r17
    408a:	0f 91       	pop	r16
    408c:	ff 90       	pop	r15
    408e:	ef 90       	pop	r14
    4090:	df 90       	pop	r13
    4092:	cf 90       	pop	r12
    4094:	bf 90       	pop	r11
    4096:	af 90       	pop	r10
    4098:	9f 90       	pop	r9
    409a:	8f 90       	pop	r8
    409c:	7f 90       	pop	r7
    409e:	6f 90       	pop	r6
    40a0:	5f 90       	pop	r5
    40a2:	4f 90       	pop	r4
    40a4:	3f 90       	pop	r3
    40a6:	2f 90       	pop	r2
    40a8:	08 95       	ret

000040aa <_uploadMessageRc>:
    40aa:	30 df       	rcall	.-416    	; 0x3f0c <_uploadMessage>
    40ac:	89 cf       	rjmp	.-238    	; 0x3fc0 <_reply2ReturnCode>
    40ae:	08 95       	ret

000040b0 <lora_driver_flushBuffers>:
    40b0:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_serialReplyBufferHandle>
    40b4:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <_serialReplyBufferHandle+0x1>
    40b8:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <xStreamBufferReset>
    40bc:	08 95       	ret

000040be <lora_driver_initialise>:
    40be:	8f 92       	push	r8
    40c0:	9f 92       	push	r9
    40c2:	af 92       	push	r10
    40c4:	cf 92       	push	r12
    40c6:	ef 92       	push	r14
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	cf 93       	push	r28
    40ce:	c8 2f       	mov	r28, r24
    40d0:	8b 01       	movw	r16, r22
    40d2:	41 e0       	ldi	r20, 0x01	; 1
    40d4:	60 e0       	ldi	r22, 0x00	; 0
    40d6:	70 e0       	ldi	r23, 0x00	; 0
    40d8:	88 ec       	ldi	r24, 0xC8	; 200
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	0e 94 ca 0a 	call	0x1594	; 0x1594 <xStreamBufferGenericCreate>
    40e0:	90 93 79 19 	sts	0x1979, r25	; 0x801979 <_serialReplyBufferHandle+0x1>
    40e4:	80 93 78 19 	sts	0x1978, r24	; 0x801978 <_serialReplyBufferHandle>
    40e8:	10 93 77 19 	sts	0x1977, r17	; 0x801977 <_downlinkMessageBuffer+0x1>
    40ec:	00 93 76 19 	sts	0x1976, r16	; 0x801976 <_downlinkMessageBuffer>
    40f0:	0f 2e       	mov	r0, r31
    40f2:	f0 e4       	ldi	r31, 0x40	; 64
    40f4:	8f 2e       	mov	r8, r31
    40f6:	ff e1       	ldi	r31, 0x1F	; 31
    40f8:	9f 2e       	mov	r9, r31
    40fa:	f0 2d       	mov	r31, r0
    40fc:	68 94       	set
    40fe:	aa 24       	eor	r10, r10
    4100:	a6 f8       	bld	r10, 6
    4102:	68 94       	set
    4104:	cc 24       	eor	r12, r12
    4106:	c6 f8       	bld	r12, 6
    4108:	e1 2c       	mov	r14, r1
    410a:	00 e0       	ldi	r16, 0x00	; 0
    410c:	23 e0       	ldi	r18, 0x03	; 3
    410e:	40 e0       	ldi	r20, 0x00	; 0
    4110:	51 ee       	ldi	r21, 0xE1	; 225
    4112:	60 e0       	ldi	r22, 0x00	; 0
    4114:	70 e0       	ldi	r23, 0x00	; 0
    4116:	8c 2f       	mov	r24, r28
    4118:	e3 d3       	rcall	.+1990   	; 0x48e0 <serial_create>
    411a:	90 93 7b 19 	sts	0x197B, r25	; 0x80197b <_rn2483_serial+0x1>
    411e:	80 93 7a 19 	sts	0x197A, r24	; 0x80197a <_rn2483_serial>
    4122:	e7 e0       	ldi	r30, 0x07	; 7
    4124:	f1 e0       	ldi	r31, 0x01	; 1
    4126:	80 81       	ld	r24, Z
    4128:	80 61       	ori	r24, 0x10	; 16
    412a:	80 83       	st	Z, r24
    412c:	cf 91       	pop	r28
    412e:	1f 91       	pop	r17
    4130:	0f 91       	pop	r16
    4132:	ef 90       	pop	r14
    4134:	cf 90       	pop	r12
    4136:	af 90       	pop	r10
    4138:	9f 90       	pop	r9
    413a:	8f 90       	pop	r8
    413c:	08 95       	ret

0000413e <lora_driver_resetRn2483>:
    413e:	88 23       	and	r24, r24
    4140:	31 f0       	breq	.+12     	; 0x414e <lora_driver_resetRn2483+0x10>
    4142:	e8 e0       	ldi	r30, 0x08	; 8
    4144:	f1 e0       	ldi	r31, 0x01	; 1
    4146:	80 81       	ld	r24, Z
    4148:	8f 7e       	andi	r24, 0xEF	; 239
    414a:	80 83       	st	Z, r24
    414c:	08 95       	ret
    414e:	e8 e0       	ldi	r30, 0x08	; 8
    4150:	f1 e0       	ldi	r31, 0x01	; 1
    4152:	80 81       	ld	r24, Z
    4154:	80 61       	ori	r24, 0x10	; 16
    4156:	80 83       	st	Z, r24
    4158:	08 95       	ret

0000415a <lora_driver_rn2483FactoryReset>:
    415a:	60 e0       	ldi	r22, 0x00	; 0
    415c:	70 e0       	ldi	r23, 0x00	; 0
    415e:	81 ec       	ldi	r24, 0xC1	; 193
    4160:	97 e0       	ldi	r25, 0x07	; 7
    4162:	d4 de       	rcall	.-600    	; 0x3f0c <_uploadMessage>
    4164:	e1 e0       	ldi	r30, 0x01	; 1
    4166:	fa e1       	ldi	r31, 0x1A	; 26
    4168:	01 90       	ld	r0, Z+
    416a:	00 20       	and	r0, r0
    416c:	e9 f7       	brne	.-6      	; 0x4168 <lora_driver_rn2483FactoryReset+0xe>
    416e:	31 97       	sbiw	r30, 0x01	; 1
    4170:	e1 50       	subi	r30, 0x01	; 1
    4172:	fa 41       	sbci	r31, 0x1A	; 26
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	75 97       	sbiw	r30, 0x15	; 21
    4178:	08 f0       	brcs	.+2      	; 0x417c <lora_driver_rn2483FactoryReset+0x22>
    417a:	80 e0       	ldi	r24, 0x00	; 0
    417c:	08 95       	ret

0000417e <lora_driver_getRn2483Hweui>:
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	ec 01       	movw	r28, r24
    4184:	60 e0       	ldi	r22, 0x00	; 0
    4186:	70 e0       	ldi	r23, 0x00	; 0
    4188:	82 ed       	ldi	r24, 0xD2	; 210
    418a:	97 e0       	ldi	r25, 0x07	; 7
    418c:	bf de       	rcall	.-642    	; 0x3f0c <_uploadMessage>
    418e:	e1 e0       	ldi	r30, 0x01	; 1
    4190:	fa e1       	ldi	r31, 0x1A	; 26
    4192:	01 90       	ld	r0, Z+
    4194:	00 20       	and	r0, r0
    4196:	e9 f7       	brne	.-6      	; 0x4192 <lora_driver_getRn2483Hweui+0x14>
    4198:	e2 51       	subi	r30, 0x12	; 18
    419a:	fa 41       	sbci	r31, 0x1A	; 26
    419c:	39 f4       	brne	.+14     	; 0x41ac <lora_driver_getRn2483Hweui+0x2e>
    419e:	61 e0       	ldi	r22, 0x01	; 1
    41a0:	7a e1       	ldi	r23, 0x1A	; 26
    41a2:	ce 01       	movw	r24, r28
    41a4:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <strcpy>
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	02 c0       	rjmp	.+4      	; 0x41b0 <lora_driver_getRn2483Hweui+0x32>
    41ac:	18 82       	st	Y, r1
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	df 91       	pop	r29
    41b2:	cf 91       	pop	r28
    41b4:	08 95       	ret

000041b6 <lora_driver_setDeviceIdentifier>:
    41b6:	fc 01       	movw	r30, r24
    41b8:	01 90       	ld	r0, Z+
    41ba:	00 20       	and	r0, r0
    41bc:	e9 f7       	brne	.-6      	; 0x41b8 <lora_driver_setDeviceIdentifier+0x2>
    41be:	9f 01       	movw	r18, r30
    41c0:	21 51       	subi	r18, 0x11	; 17
    41c2:	31 09       	sbc	r19, r1
    41c4:	28 17       	cp	r18, r24
    41c6:	39 07       	cpc	r19, r25
    41c8:	29 f4       	brne	.+10     	; 0x41d4 <lora_driver_setDeviceIdentifier+0x1e>
    41ca:	bc 01       	movw	r22, r24
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	98 e0       	ldi	r25, 0x08	; 8
    41d0:	6c cf       	rjmp	.-296    	; 0x40aa <_uploadMessageRc>
    41d2:	08 95       	ret
    41d4:	89 e0       	ldi	r24, 0x09	; 9
    41d6:	08 95       	ret

000041d8 <lora_driver_setApplicationIdentifier>:
    41d8:	fc 01       	movw	r30, r24
    41da:	01 90       	ld	r0, Z+
    41dc:	00 20       	and	r0, r0
    41de:	e9 f7       	brne	.-6      	; 0x41da <lora_driver_setApplicationIdentifier+0x2>
    41e0:	9f 01       	movw	r18, r30
    41e2:	21 51       	subi	r18, 0x11	; 17
    41e4:	31 09       	sbc	r19, r1
    41e6:	28 17       	cp	r18, r24
    41e8:	39 07       	cpc	r19, r25
    41ea:	29 f4       	brne	.+10     	; 0x41f6 <lora_driver_setApplicationIdentifier+0x1e>
    41ec:	bc 01       	movw	r22, r24
    41ee:	8f e0       	ldi	r24, 0x0F	; 15
    41f0:	98 e0       	ldi	r25, 0x08	; 8
    41f2:	5b cf       	rjmp	.-330    	; 0x40aa <_uploadMessageRc>
    41f4:	08 95       	ret
    41f6:	89 e0       	ldi	r24, 0x09	; 9
    41f8:	08 95       	ret

000041fa <lora_driver_setApplicationKey>:
    41fa:	fc 01       	movw	r30, r24
    41fc:	01 90       	ld	r0, Z+
    41fe:	00 20       	and	r0, r0
    4200:	e9 f7       	brne	.-6      	; 0x41fc <lora_driver_setApplicationKey+0x2>
    4202:	9f 01       	movw	r18, r30
    4204:	21 52       	subi	r18, 0x21	; 33
    4206:	31 09       	sbc	r19, r1
    4208:	28 17       	cp	r18, r24
    420a:	39 07       	cpc	r19, r25
    420c:	29 f4       	brne	.+10     	; 0x4218 <lora_driver_setApplicationKey+0x1e>
    420e:	bc 01       	movw	r22, r24
    4210:	8e e1       	ldi	r24, 0x1E	; 30
    4212:	98 e0       	ldi	r25, 0x08	; 8
    4214:	4a cf       	rjmp	.-364    	; 0x40aa <_uploadMessageRc>
    4216:	08 95       	ret
    4218:	89 e0       	ldi	r24, 0x09	; 9
    421a:	08 95       	ret

0000421c <lora_driver_saveMac>:
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	8d e5       	ldi	r24, 0x5D	; 93
    4222:	98 e0       	ldi	r25, 0x08	; 8
    4224:	42 cf       	rjmp	.-380    	; 0x40aa <_uploadMessageRc>
    4226:	08 95       	ret

00004228 <lora_driver_join>:
    4228:	0f 93       	push	r16
    422a:	1f 93       	push	r17
    422c:	e8 2f       	mov	r30, r24
    422e:	f0 e0       	ldi	r31, 0x00	; 0
    4230:	ee 0f       	add	r30, r30
    4232:	ff 1f       	adc	r31, r31
    4234:	e9 5c       	subi	r30, 0xC9	; 201
    4236:	f5 4f       	sbci	r31, 0xF5	; 245
    4238:	60 81       	ld	r22, Z
    423a:	71 81       	ldd	r23, Z+1	; 0x01
    423c:	86 e6       	ldi	r24, 0x66	; 102
    423e:	98 e0       	ldi	r25, 0x08	; 8
    4240:	34 df       	rcall	.-408    	; 0x40aa <_uploadMessageRc>
    4242:	81 11       	cpse	r24, r1
    4244:	14 c0       	rjmp	.+40     	; 0x426e <lora_driver_join+0x46>
    4246:	08 e2       	ldi	r16, 0x28	; 40
    4248:	15 e0       	ldi	r17, 0x05	; 5
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	4d e2       	ldi	r20, 0x2D	; 45
    4250:	50 e0       	ldi	r21, 0x00	; 0
    4252:	61 e0       	ldi	r22, 0x01	; 1
    4254:	7a e1       	ldi	r23, 0x1A	; 26
    4256:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_serialReplyBufferHandle>
    425a:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <_serialReplyBufferHandle+0x1>
    425e:	0e 94 35 0c 	call	0x186a	; 0x186a <xStreamBufferReceive>
    4262:	88 23       	and	r24, r24
    4264:	21 f0       	breq	.+8      	; 0x426e <lora_driver_join+0x46>
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	9a e1       	ldi	r25, 0x1A	; 26
    426a:	aa de       	rcall	.-684    	; 0x3fc0 <_reply2ReturnCode>
    426c:	03 c0       	rjmp	.+6      	; 0x4274 <lora_driver_join+0x4c>
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	9a e1       	ldi	r25, 0x1A	; 26
    4272:	a6 de       	rcall	.-692    	; 0x3fc0 <_reply2ReturnCode>
    4274:	1f 91       	pop	r17
    4276:	0f 91       	pop	r16
    4278:	08 95       	ret

0000427a <lora_driver_sendUploadMessage>:
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    427e:	cf 93       	push	r28
    4280:	df 93       	push	r29
    4282:	1f 92       	push	r1
    4284:	cd b7       	in	r28, 0x3d	; 61
    4286:	de b7       	in	r29, 0x3e	; 62
    4288:	db 01       	movw	r26, r22
    428a:	11 96       	adiw	r26, 0x01	; 1
    428c:	9c 91       	ld	r25, X
    428e:	11 97       	sbiw	r26, 0x01	; 1
    4290:	95 31       	cpi	r25, 0x15	; 21
    4292:	08 f0       	brcs	.+2      	; 0x4296 <lora_driver_sendUploadMessage+0x1c>
    4294:	b4 c0       	rjmp	.+360    	; 0x43fe <lora_driver_sendUploadMessage+0x184>
    4296:	99 23       	and	r25, r25
    4298:	81 f1       	breq	.+96     	; 0x42fa <lora_driver_sendUploadMessage+0x80>
    429a:	60 e0       	ldi	r22, 0x00	; 0
    429c:	70 e0       	ldi	r23, 0x00	; 0
    429e:	27 2f       	mov	r18, r23
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	46 2f       	mov	r20, r22
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	fd 01       	movw	r30, r26
    42a8:	e4 0f       	add	r30, r20
    42aa:	f5 1f       	adc	r31, r21
    42ac:	92 81       	ldd	r25, Z+2	; 0x02
    42ae:	92 95       	swap	r25
    42b0:	9f 70       	andi	r25, 0x0F	; 15
    42b2:	9a 30       	cpi	r25, 0x0A	; 10
    42b4:	10 f0       	brcs	.+4      	; 0x42ba <lora_driver_sendUploadMessage+0x40>
    42b6:	99 5c       	subi	r25, 0xC9	; 201
    42b8:	01 c0       	rjmp	.+2      	; 0x42bc <lora_driver_sendUploadMessage+0x42>
    42ba:	90 5d       	subi	r25, 0xD0	; 208
    42bc:	f9 01       	movw	r30, r18
    42be:	ee 56       	subi	r30, 0x6E	; 110
    42c0:	f6 4e       	sbci	r31, 0xE6	; 230
    42c2:	90 83       	st	Z, r25
    42c4:	2f 5f       	subi	r18, 0xFF	; 255
    42c6:	3f 4f       	sbci	r19, 0xFF	; 255
    42c8:	fd 01       	movw	r30, r26
    42ca:	e4 0f       	add	r30, r20
    42cc:	f5 1f       	adc	r31, r21
    42ce:	92 81       	ldd	r25, Z+2	; 0x02
    42d0:	9f 70       	andi	r25, 0x0F	; 15
    42d2:	49 2f       	mov	r20, r25
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	4a 30       	cpi	r20, 0x0A	; 10
    42d8:	51 05       	cpc	r21, r1
    42da:	14 f0       	brlt	.+4      	; 0x42e0 <lora_driver_sendUploadMessage+0x66>
    42dc:	99 5c       	subi	r25, 0xC9	; 201
    42de:	01 c0       	rjmp	.+2      	; 0x42e2 <lora_driver_sendUploadMessage+0x68>
    42e0:	90 5d       	subi	r25, 0xD0	; 208
    42e2:	f9 01       	movw	r30, r18
    42e4:	ee 56       	subi	r30, 0x6E	; 110
    42e6:	f6 4e       	sbci	r31, 0xE6	; 230
    42e8:	90 83       	st	Z, r25
    42ea:	7e 5f       	subi	r23, 0xFE	; 254
    42ec:	6f 5f       	subi	r22, 0xFF	; 255
    42ee:	11 96       	adiw	r26, 0x01	; 1
    42f0:	9c 91       	ld	r25, X
    42f2:	11 97       	sbiw	r26, 0x01	; 1
    42f4:	69 17       	cp	r22, r25
    42f6:	98 f2       	brcs	.-90     	; 0x429e <lora_driver_sendUploadMessage+0x24>
    42f8:	01 c0       	rjmp	.+2      	; 0x42fc <lora_driver_sendUploadMessage+0x82>
    42fa:	70 e0       	ldi	r23, 0x00	; 0
    42fc:	e7 2f       	mov	r30, r23
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	ee 56       	subi	r30, 0x6E	; 110
    4302:	f6 4e       	sbci	r31, 0xE6	; 230
    4304:	10 82       	st	Z, r1
    4306:	4c 91       	ld	r20, X
    4308:	81 11       	cpse	r24, r1
    430a:	03 c0       	rjmp	.+6      	; 0x4312 <lora_driver_sendUploadMessage+0x98>
    430c:	8f e6       	ldi	r24, 0x6F	; 111
    430e:	98 e0       	ldi	r25, 0x08	; 8
    4310:	02 c0       	rjmp	.+4      	; 0x4316 <lora_driver_sendUploadMessage+0x9c>
    4312:	81 e7       	ldi	r24, 0x71	; 113
    4314:	98 e0       	ldi	r25, 0x08	; 8
    4316:	22 e9       	ldi	r18, 0x92	; 146
    4318:	39 e1       	ldi	r19, 0x19	; 25
    431a:	3f 93       	push	r19
    431c:	2f 93       	push	r18
    431e:	1f 92       	push	r1
    4320:	4f 93       	push	r20
    4322:	9f 93       	push	r25
    4324:	8f 93       	push	r24
    4326:	85 e7       	ldi	r24, 0x75	; 117
    4328:	98 e0       	ldi	r25, 0x08	; 8
    432a:	9f 93       	push	r25
    432c:	8f 93       	push	r24
    432e:	84 ed       	ldi	r24, 0xD4	; 212
    4330:	99 e1       	ldi	r25, 0x19	; 25
    4332:	9f 93       	push	r25
    4334:	8f 93       	push	r24
    4336:	0e 94 7d 34 	call	0x68fa	; 0x68fa <sprintf>
    433a:	60 e0       	ldi	r22, 0x00	; 0
    433c:	70 e0       	ldi	r23, 0x00	; 0
    433e:	84 ed       	ldi	r24, 0xD4	; 212
    4340:	99 e1       	ldi	r25, 0x19	; 25
    4342:	b3 de       	rcall	.-666    	; 0x40aa <_uploadMessageRc>
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	f8 94       	cli
    4348:	de bf       	out	0x3e, r29	; 62
    434a:	0f be       	out	0x3f, r0	; 63
    434c:	cd bf       	out	0x3d, r28	; 61
    434e:	81 11       	cpse	r24, r1
    4350:	59 c0       	rjmp	.+178    	; 0x4404 <lora_driver_sendUploadMessage+0x18a>
    4352:	08 e2       	ldi	r16, 0x28	; 40
    4354:	15 e0       	ldi	r17, 0x05	; 5
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	4d e2       	ldi	r20, 0x2D	; 45
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	61 e0       	ldi	r22, 0x01	; 1
    4360:	7a e1       	ldi	r23, 0x1A	; 26
    4362:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <_serialReplyBufferHandle>
    4366:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <_serialReplyBufferHandle+0x1>
    436a:	0e 94 35 0c 	call	0x186a	; 0x186a <xStreamBufferReceive>
    436e:	88 23       	and	r24, r24
    4370:	09 f4       	brne	.+2      	; 0x4374 <lora_driver_sendUploadMessage+0xfa>
    4372:	47 c0       	rjmp	.+142    	; 0x4402 <lora_driver_sendUploadMessage+0x188>
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	9a e1       	ldi	r25, 0x1A	; 26
    4378:	23 de       	rcall	.-954    	; 0x3fc0 <_reply2ReturnCode>
    437a:	8e 30       	cpi	r24, 0x0E	; 14
    437c:	09 f0       	breq	.+2      	; 0x4380 <lora_driver_sendUploadMessage+0x106>
    437e:	42 c0       	rjmp	.+132    	; 0x4404 <lora_driver_sendUploadMessage+0x18a>
    4380:	87 e0       	ldi	r24, 0x07	; 7
    4382:	89 83       	std	Y+1, r24	; 0x01
    4384:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <_downlinkMessageBuffer>
    4388:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <_downlinkMessageBuffer+0x1>
    438c:	89 2b       	or	r24, r25
    438e:	a9 f1       	breq	.+106    	; 0x43fa <lora_driver_sendUploadMessage+0x180>
    4390:	be 01       	movw	r22, r28
    4392:	6f 5f       	subi	r22, 0xFF	; 255
    4394:	7f 4f       	sbci	r23, 0xFF	; 255
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	9a e1       	ldi	r25, 0x1A	; 26
    439a:	68 d1       	rcall	.+720    	; 0x466c <decode_port_no>
    439c:	80 93 7c 19 	sts	0x197C, r24	; 0x80197c <_downlinkPayload>
    43a0:	e9 81       	ldd	r30, Y+1	; 0x01
    43a2:	f0 e0       	ldi	r31, 0x00	; 0
    43a4:	ef 5f       	subi	r30, 0xFF	; 255
    43a6:	f5 4e       	sbci	r31, 0xE5	; 229
    43a8:	df 01       	movw	r26, r30
    43aa:	0d 90       	ld	r0, X+
    43ac:	00 20       	and	r0, r0
    43ae:	e9 f7       	brne	.-6      	; 0x43aa <lora_driver_sendUploadMessage+0x130>
    43b0:	11 97       	sbiw	r26, 0x01	; 1
    43b2:	ae 1b       	sub	r26, r30
    43b4:	bf 0b       	sbc	r27, r31
    43b6:	aa 23       	and	r26, r26
    43b8:	91 f0       	breq	.+36     	; 0x43de <lora_driver_sendUploadMessage+0x164>
    43ba:	bb 27       	eor	r27, r27
    43bc:	cd 01       	movw	r24, r26
    43be:	01 97       	sbiw	r24, 0x01	; 1
    43c0:	9c 01       	movw	r18, r24
    43c2:	12 f4       	brpl	.+4      	; 0x43c8 <lora_driver_sendUploadMessage+0x14e>
    43c4:	2f 5f       	subi	r18, 0xFF	; 255
    43c6:	3f 4f       	sbci	r19, 0xFF	; 255
    43c8:	35 95       	asr	r19
    43ca:	27 95       	ror	r18
    43cc:	20 93 7d 19 	sts	0x197D, r18	; 0x80197d <_downlinkPayload+0x1>
    43d0:	af 01       	movw	r20, r30
    43d2:	4f 5f       	subi	r20, 0xFF	; 255
    43d4:	5f 4f       	sbci	r21, 0xFF	; 255
    43d6:	64 e1       	ldi	r22, 0x14	; 20
    43d8:	8e e7       	ldi	r24, 0x7E	; 126
    43da:	99 e1       	ldi	r25, 0x19	; 25
    43dc:	73 d1       	rcall	.+742    	; 0x46c4 <decode_hexadecimal_string_bytes>
    43de:	01 e0       	ldi	r16, 0x01	; 1
    43e0:	10 e0       	ldi	r17, 0x00	; 0
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	46 e1       	ldi	r20, 0x16	; 22
    43e8:	50 e0       	ldi	r21, 0x00	; 0
    43ea:	6c e7       	ldi	r22, 0x7C	; 124
    43ec:	79 e1       	ldi	r23, 0x19	; 25
    43ee:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <_downlinkMessageBuffer>
    43f2:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <_downlinkMessageBuffer+0x1>
    43f6:	0e 94 2c 0b 	call	0x1658	; 0x1658 <xStreamBufferSend>
    43fa:	8e e0       	ldi	r24, 0x0E	; 14
    43fc:	03 c0       	rjmp	.+6      	; 0x4404 <lora_driver_sendUploadMessage+0x18a>
    43fe:	84 e1       	ldi	r24, 0x14	; 20
    4400:	01 c0       	rjmp	.+2      	; 0x4404 <lora_driver_sendUploadMessage+0x18a>
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	0f 90       	pop	r0
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	1f 91       	pop	r17
    440c:	0f 91       	pop	r16
    440e:	08 95       	ret

00004410 <lora_driver_setAdaptiveDataRate>:
    4410:	81 30       	cpi	r24, 0x01	; 1
    4412:	19 f0       	breq	.+6      	; 0x441a <lora_driver_setAdaptiveDataRate+0xa>
    4414:	65 e8       	ldi	r22, 0x85	; 133
    4416:	78 e0       	ldi	r23, 0x08	; 8
    4418:	02 c0       	rjmp	.+4      	; 0x441e <lora_driver_setAdaptiveDataRate+0xe>
    441a:	6e e5       	ldi	r22, 0x5E	; 94
    441c:	79 e0       	ldi	r23, 0x09	; 9
    441e:	89 e8       	ldi	r24, 0x89	; 137
    4420:	98 e0       	ldi	r25, 0x08	; 8
    4422:	43 ce       	rjmp	.-890    	; 0x40aa <_uploadMessageRc>
    4424:	08 95       	ret

00004426 <lora_driver_setReceiveDelay>:
    4426:	9f 93       	push	r25
    4428:	8f 93       	push	r24
    442a:	8a eb       	ldi	r24, 0xBA	; 186
    442c:	98 e0       	ldi	r25, 0x08	; 8
    442e:	9f 93       	push	r25
    4430:	8f 93       	push	r24
    4432:	84 ed       	ldi	r24, 0xD4	; 212
    4434:	99 e1       	ldi	r25, 0x19	; 25
    4436:	9f 93       	push	r25
    4438:	8f 93       	push	r24
    443a:	0e 94 7d 34 	call	0x68fa	; 0x68fa <sprintf>
    443e:	60 e0       	ldi	r22, 0x00	; 0
    4440:	70 e0       	ldi	r23, 0x00	; 0
    4442:	84 ed       	ldi	r24, 0xD4	; 212
    4444:	99 e1       	ldi	r25, 0x19	; 25
    4446:	31 de       	rcall	.-926    	; 0x40aa <_uploadMessageRc>
    4448:	0f 90       	pop	r0
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	0f 90       	pop	r0
    4450:	0f 90       	pop	r0
    4452:	0f 90       	pop	r0
    4454:	08 95       	ret

00004456 <lora_driver_configureToEu868>:
    4456:	2f 92       	push	r2
    4458:	3f 92       	push	r3
    445a:	4f 92       	push	r4
    445c:	5f 92       	push	r5
    445e:	6f 92       	push	r6
    4460:	7f 92       	push	r7
    4462:	8f 92       	push	r8
    4464:	9f 92       	push	r9
    4466:	af 92       	push	r10
    4468:	bf 92       	push	r11
    446a:	cf 92       	push	r12
    446c:	df 92       	push	r13
    446e:	ef 92       	push	r14
    4470:	ff 92       	push	r15
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
    4476:	cf 93       	push	r28
    4478:	df 93       	push	r29
    447a:	cd b7       	in	r28, 0x3d	; 61
    447c:	de b7       	in	r29, 0x3e	; 62
    447e:	a0 97       	sbiw	r28, 0x20	; 32
    4480:	0f b6       	in	r0, 0x3f	; 63
    4482:	f8 94       	cli
    4484:	de bf       	out	0x3e, r29	; 62
    4486:	0f be       	out	0x3f, r0	; 63
    4488:	cd bf       	out	0x3d, r28	; 61
    448a:	67 ee       	ldi	r22, 0xE7	; 231
    448c:	78 e0       	ldi	r23, 0x08	; 8
    448e:	83 ef       	ldi	r24, 0xF3	; 243
    4490:	98 e0       	ldi	r25, 0x08	; 8
    4492:	3c dd       	rcall	.-1416   	; 0x3f0c <_uploadMessage>
    4494:	95 dd       	rcall	.-1238   	; 0x3fc0 <_reply2ReturnCode>
    4496:	81 11       	cpse	r24, r1
    4498:	a3 c0       	rjmp	.+326    	; 0x45e0 <lora_driver_configureToEu868+0x18a>
    449a:	80 e2       	ldi	r24, 0x20	; 32
    449c:	e2 e2       	ldi	r30, 0x22	; 34
    449e:	f2 e0       	ldi	r31, 0x02	; 2
    44a0:	de 01       	movw	r26, r28
    44a2:	11 96       	adiw	r26, 0x01	; 1
    44a4:	01 90       	ld	r0, Z+
    44a6:	0d 92       	st	X+, r0
    44a8:	8a 95       	dec	r24
    44aa:	e1 f7       	brne	.-8      	; 0x44a4 <lora_driver_configureToEu868+0x4e>
    44ac:	9e 01       	movw	r18, r28
    44ae:	2f 5f       	subi	r18, 0xFF	; 255
    44b0:	3f 4f       	sbci	r19, 0xFF	; 255
    44b2:	69 01       	movw	r12, r18
    44b4:	e1 2c       	mov	r14, r1
    44b6:	f1 2c       	mov	r15, r1
    44b8:	0f 2e       	mov	r0, r31
    44ba:	ff ef       	ldi	r31, 0xFF	; 255
    44bc:	af 2e       	mov	r10, r31
    44be:	f8 e0       	ldi	r31, 0x08	; 8
    44c0:	bf 2e       	mov	r11, r31
    44c2:	f0 2d       	mov	r31, r0
    44c4:	04 ed       	ldi	r16, 0xD4	; 212
    44c6:	19 e1       	ldi	r17, 0x19	; 25
    44c8:	0f 2e       	mov	r0, r31
    44ca:	f8 e1       	ldi	r31, 0x18	; 24
    44cc:	4f 2e       	mov	r4, r31
    44ce:	f9 e0       	ldi	r31, 0x09	; 9
    44d0:	5f 2e       	mov	r5, r31
    44d2:	f0 2d       	mov	r31, r0
    44d4:	0f 2e       	mov	r0, r31
    44d6:	ff e2       	ldi	r31, 0x2F	; 47
    44d8:	8f 2e       	mov	r8, r31
    44da:	f9 e0       	ldi	r31, 0x09	; 9
    44dc:	9f 2e       	mov	r9, r31
    44de:	f0 2d       	mov	r31, r0
    44e0:	0f 2e       	mov	r0, r31
    44e2:	f9 e4       	ldi	r31, 0x49	; 73
    44e4:	6f 2e       	mov	r6, r31
    44e6:	f9 e0       	ldi	r31, 0x09	; 9
    44e8:	7f 2e       	mov	r7, r31
    44ea:	f0 2d       	mov	r31, r0
    44ec:	3e 2c       	mov	r3, r14
    44ee:	2f 2c       	mov	r2, r15
    44f0:	ff 92       	push	r15
    44f2:	ef 92       	push	r14
    44f4:	bf 92       	push	r11
    44f6:	af 92       	push	r10
    44f8:	1f 93       	push	r17
    44fa:	0f 93       	push	r16
    44fc:	0e 94 7d 34 	call	0x68fa	; 0x68fa <sprintf>
    4500:	60 e0       	ldi	r22, 0x00	; 0
    4502:	70 e0       	ldi	r23, 0x00	; 0
    4504:	c8 01       	movw	r24, r16
    4506:	02 dd       	rcall	.-1532   	; 0x3f0c <_uploadMessage>
    4508:	5b dd       	rcall	.-1354   	; 0x3fc0 <_reply2ReturnCode>
    450a:	0f 90       	pop	r0
    450c:	0f 90       	pop	r0
    450e:	0f 90       	pop	r0
    4510:	0f 90       	pop	r0
    4512:	0f 90       	pop	r0
    4514:	0f 90       	pop	r0
    4516:	81 11       	cpse	r24, r1
    4518:	63 c0       	rjmp	.+198    	; 0x45e0 <lora_driver_configureToEu868+0x18a>
    451a:	32 e0       	ldi	r19, 0x02	; 2
    451c:	3e 15       	cp	r19, r14
    451e:	e8 f4       	brcc	.+58     	; 0x455a <lora_driver_configureToEu868+0x104>
    4520:	f6 01       	movw	r30, r12
    4522:	83 81       	ldd	r24, Z+3	; 0x03
    4524:	8f 93       	push	r24
    4526:	82 81       	ldd	r24, Z+2	; 0x02
    4528:	8f 93       	push	r24
    452a:	81 81       	ldd	r24, Z+1	; 0x01
    452c:	8f 93       	push	r24
    452e:	80 81       	ld	r24, Z
    4530:	8f 93       	push	r24
    4532:	ff 92       	push	r15
    4534:	ef 92       	push	r14
    4536:	5f 92       	push	r5
    4538:	4f 92       	push	r4
    453a:	1f 93       	push	r17
    453c:	0f 93       	push	r16
    453e:	0e 94 7d 34 	call	0x68fa	; 0x68fa <sprintf>
    4542:	60 e0       	ldi	r22, 0x00	; 0
    4544:	70 e0       	ldi	r23, 0x00	; 0
    4546:	c8 01       	movw	r24, r16
    4548:	e1 dc       	rcall	.-1598   	; 0x3f0c <_uploadMessage>
    454a:	3a dd       	rcall	.-1420   	; 0x3fc0 <_reply2ReturnCode>
    454c:	0f b6       	in	r0, 0x3f	; 63
    454e:	f8 94       	cli
    4550:	de bf       	out	0x3e, r29	; 62
    4552:	0f be       	out	0x3f, r0	; 63
    4554:	cd bf       	out	0x3d, r28	; 61
    4556:	81 11       	cpse	r24, r1
    4558:	43 c0       	rjmp	.+134    	; 0x45e0 <lora_driver_configureToEu868+0x18a>
    455a:	2f 92       	push	r2
    455c:	3f 92       	push	r3
    455e:	9f 92       	push	r9
    4560:	8f 92       	push	r8
    4562:	1f 93       	push	r17
    4564:	0f 93       	push	r16
    4566:	0e 94 7d 34 	call	0x68fa	; 0x68fa <sprintf>
    456a:	60 e0       	ldi	r22, 0x00	; 0
    456c:	70 e0       	ldi	r23, 0x00	; 0
    456e:	c8 01       	movw	r24, r16
    4570:	cd dc       	rcall	.-1638   	; 0x3f0c <_uploadMessage>
    4572:	26 dd       	rcall	.-1460   	; 0x3fc0 <_reply2ReturnCode>
    4574:	0f 90       	pop	r0
    4576:	0f 90       	pop	r0
    4578:	0f 90       	pop	r0
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	0f 90       	pop	r0
    4580:	81 11       	cpse	r24, r1
    4582:	2e c0       	rjmp	.+92     	; 0x45e0 <lora_driver_configureToEu868+0x18a>
    4584:	2f 92       	push	r2
    4586:	3f 92       	push	r3
    4588:	7f 92       	push	r7
    458a:	6f 92       	push	r6
    458c:	1f 93       	push	r17
    458e:	0f 93       	push	r16
    4590:	0e 94 7d 34 	call	0x68fa	; 0x68fa <sprintf>
    4594:	60 e0       	ldi	r22, 0x00	; 0
    4596:	70 e0       	ldi	r23, 0x00	; 0
    4598:	c8 01       	movw	r24, r16
    459a:	b8 dc       	rcall	.-1680   	; 0x3f0c <_uploadMessage>
    459c:	11 dd       	rcall	.-1502   	; 0x3fc0 <_reply2ReturnCode>
    459e:	0f 90       	pop	r0
    45a0:	0f 90       	pop	r0
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	0f 90       	pop	r0
    45a8:	0f 90       	pop	r0
    45aa:	81 11       	cpse	r24, r1
    45ac:	19 c0       	rjmp	.+50     	; 0x45e0 <lora_driver_configureToEu868+0x18a>
    45ae:	3f ef       	ldi	r19, 0xFF	; 255
    45b0:	e3 1a       	sub	r14, r19
    45b2:	f3 0a       	sbc	r15, r19
    45b4:	84 e0       	ldi	r24, 0x04	; 4
    45b6:	c8 0e       	add	r12, r24
    45b8:	d1 1c       	adc	r13, r1
    45ba:	98 e0       	ldi	r25, 0x08	; 8
    45bc:	e9 16       	cp	r14, r25
    45be:	f1 04       	cpc	r15, r1
    45c0:	09 f0       	breq	.+2      	; 0x45c4 <lora_driver_configureToEu868+0x16e>
    45c2:	94 cf       	rjmp	.-216    	; 0x44ec <lora_driver_configureToEu868+0x96>
    45c4:	60 e0       	ldi	r22, 0x00	; 0
    45c6:	70 e0       	ldi	r23, 0x00	; 0
    45c8:	81 e6       	ldi	r24, 0x61	; 97
    45ca:	99 e0       	ldi	r25, 0x09	; 9
    45cc:	9f dc       	rcall	.-1730   	; 0x3f0c <_uploadMessage>
    45ce:	f8 dc       	rcall	.-1552   	; 0x3fc0 <_reply2ReturnCode>
    45d0:	81 11       	cpse	r24, r1
    45d2:	06 c0       	rjmp	.+12     	; 0x45e0 <lora_driver_configureToEu868+0x18a>
    45d4:	60 e0       	ldi	r22, 0x00	; 0
    45d6:	70 e0       	ldi	r23, 0x00	; 0
    45d8:	82 e7       	ldi	r24, 0x72	; 114
    45da:	99 e0       	ldi	r25, 0x09	; 9
    45dc:	97 dc       	rcall	.-1746   	; 0x3f0c <_uploadMessage>
    45de:	f0 dc       	rcall	.-1568   	; 0x3fc0 <_reply2ReturnCode>
    45e0:	a0 96       	adiw	r28, 0x20	; 32
    45e2:	0f b6       	in	r0, 0x3f	; 63
    45e4:	f8 94       	cli
    45e6:	de bf       	out	0x3e, r29	; 62
    45e8:	0f be       	out	0x3f, r0	; 63
    45ea:	cd bf       	out	0x3d, r28	; 61
    45ec:	df 91       	pop	r29
    45ee:	cf 91       	pop	r28
    45f0:	1f 91       	pop	r17
    45f2:	0f 91       	pop	r16
    45f4:	ff 90       	pop	r15
    45f6:	ef 90       	pop	r14
    45f8:	df 90       	pop	r13
    45fa:	cf 90       	pop	r12
    45fc:	bf 90       	pop	r11
    45fe:	af 90       	pop	r10
    4600:	9f 90       	pop	r9
    4602:	8f 90       	pop	r8
    4604:	7f 90       	pop	r7
    4606:	6f 90       	pop	r6
    4608:	5f 90       	pop	r5
    460a:	4f 90       	pop	r4
    460c:	3f 90       	pop	r3
    460e:	2f 90       	pop	r2
    4610:	08 95       	ret

00004612 <lora_driver_setOtaaIdentity>:
    4612:	ef 92       	push	r14
    4614:	ff 92       	push	r15
    4616:	0f 93       	push	r16
    4618:	1f 93       	push	r17
    461a:	cf 93       	push	r28
    461c:	df 93       	push	r29
    461e:	ec 01       	movw	r28, r24
    4620:	8b 01       	movw	r16, r22
    4622:	7a 01       	movw	r14, r20
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	f4 de       	rcall	.-536    	; 0x4410 <lora_driver_setAdaptiveDataRate>
    4628:	81 11       	cpse	r24, r1
    462a:	0d c0       	rjmp	.+26     	; 0x4646 <lora_driver_setOtaaIdentity+0x34>
    462c:	ce 01       	movw	r24, r28
    462e:	d4 dd       	rcall	.-1112   	; 0x41d8 <lora_driver_setApplicationIdentifier>
    4630:	81 11       	cpse	r24, r1
    4632:	09 c0       	rjmp	.+18     	; 0x4646 <lora_driver_setOtaaIdentity+0x34>
    4634:	c8 01       	movw	r24, r16
    4636:	e1 dd       	rcall	.-1086   	; 0x41fa <lora_driver_setApplicationKey>
    4638:	81 11       	cpse	r24, r1
    463a:	05 c0       	rjmp	.+10     	; 0x4646 <lora_driver_setOtaaIdentity+0x34>
    463c:	c7 01       	movw	r24, r14
    463e:	bb dd       	rcall	.-1162   	; 0x41b6 <lora_driver_setDeviceIdentifier>
    4640:	81 11       	cpse	r24, r1
    4642:	01 c0       	rjmp	.+2      	; 0x4646 <lora_driver_setOtaaIdentity+0x34>
    4644:	eb dd       	rcall	.-1066   	; 0x421c <lora_driver_saveMac>
    4646:	df 91       	pop	r29
    4648:	cf 91       	pop	r28
    464a:	1f 91       	pop	r17
    464c:	0f 91       	pop	r16
    464e:	ff 90       	pop	r15
    4650:	ef 90       	pop	r14
    4652:	08 95       	ret

00004654 <lora_driver_mapReturnCodeToText>:
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	fc 01       	movw	r30, r24
    4658:	ee 0f       	add	r30, r30
    465a:	ff 1f       	adc	r31, r31
    465c:	8e 0f       	add	r24, r30
    465e:	9f 1f       	adc	r25, r31
    4660:	fc 01       	movw	r30, r24
    4662:	e5 5c       	subi	r30, 0xC5	; 197
    4664:	f5 4f       	sbci	r31, 0xF5	; 245
    4666:	81 81       	ldd	r24, Z+1	; 0x01
    4668:	92 81       	ldd	r25, Z+2	; 0x02
    466a:	08 95       	ret

0000466c <decode_port_no>:
    466c:	dc 01       	movw	r26, r24
    466e:	00 97       	sbiw	r24, 0x00	; 0
    4670:	29 f1       	breq	.+74     	; 0x46bc <decode_port_no+0x50>
    4672:	fb 01       	movw	r30, r22
    4674:	20 81       	ld	r18, Z
    4676:	fc 01       	movw	r30, r24
    4678:	01 90       	ld	r0, Z+
    467a:	00 20       	and	r0, r0
    467c:	e9 f7       	brne	.-6      	; 0x4678 <decode_port_no+0xc>
    467e:	31 97       	sbiw	r30, 0x01	; 1
    4680:	e8 1b       	sub	r30, r24
    4682:	f9 0b       	sbc	r31, r25
    4684:	82 2f       	mov	r24, r18
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	e8 17       	cp	r30, r24
    468a:	f9 07       	cpc	r31, r25
    468c:	c8 f0       	brcs	.+50     	; 0x46c0 <decode_port_no+0x54>
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	08 c0       	rjmp	.+16     	; 0x46a2 <decode_port_no+0x36>
    4692:	88 0f       	add	r24, r24
    4694:	38 2f       	mov	r19, r24
    4696:	33 0f       	add	r19, r19
    4698:	33 0f       	add	r19, r19
    469a:	83 0f       	add	r24, r19
    469c:	80 53       	subi	r24, 0x30	; 48
    469e:	89 0f       	add	r24, r25
    46a0:	2f 5f       	subi	r18, 0xFF	; 255
    46a2:	fd 01       	movw	r30, r26
    46a4:	e2 0f       	add	r30, r18
    46a6:	f1 1d       	adc	r31, r1
    46a8:	90 81       	ld	r25, Z
    46aa:	30 ed       	ldi	r19, 0xD0	; 208
    46ac:	39 0f       	add	r19, r25
    46ae:	3a 30       	cpi	r19, 0x0A	; 10
    46b0:	10 f4       	brcc	.+4      	; 0x46b6 <decode_port_no+0x4a>
    46b2:	91 11       	cpse	r25, r1
    46b4:	ee cf       	rjmp	.-36     	; 0x4692 <decode_port_no+0x26>
    46b6:	fb 01       	movw	r30, r22
    46b8:	20 83       	st	Z, r18
    46ba:	08 95       	ret
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	08 95       	ret
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	08 95       	ret

000046c4 <decode_hexadecimal_string_bytes>:
    46c4:	0f 93       	push	r16
    46c6:	1f 93       	push	r17
    46c8:	cf 93       	push	r28
    46ca:	df 93       	push	r29
    46cc:	dc 01       	movw	r26, r24
    46ce:	ea 01       	movw	r28, r20
    46d0:	20 97       	sbiw	r28, 0x00	; 0
    46d2:	e1 f1       	breq	.+120    	; 0x474c <decode_hexadecimal_string_bytes+0x88>
    46d4:	fa 01       	movw	r30, r20
    46d6:	01 90       	ld	r0, Z+
    46d8:	00 20       	and	r0, r0
    46da:	e9 f7       	brne	.-6      	; 0x46d6 <decode_hexadecimal_string_bytes+0x12>
    46dc:	31 97       	sbiw	r30, 0x01	; 1
    46de:	e4 1b       	sub	r30, r20
    46e0:	f5 0b       	sbc	r31, r21
    46e2:	32 97       	sbiw	r30, 0x02	; 2
    46e4:	10 f5       	brcc	.+68     	; 0x472a <decode_hexadecimal_string_bytes+0x66>
    46e6:	32 c0       	rjmp	.+100    	; 0x474c <decode_hexadecimal_string_bytes+0x88>
    46e8:	8d 01       	movw	r16, r26
    46ea:	04 0f       	add	r16, r20
    46ec:	15 1f       	adc	r17, r21
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	ae 01       	movw	r20, r28
    46f2:	42 0f       	add	r20, r18
    46f4:	53 1f       	adc	r21, r19
    46f6:	fa 01       	movw	r30, r20
    46f8:	90 81       	ld	r25, Z
    46fa:	91 34       	cpi	r25, 0x41	; 65
    46fc:	28 f0       	brcs	.+10     	; 0x4708 <decode_hexadecimal_string_bytes+0x44>
    46fe:	97 53       	subi	r25, 0x37	; 55
    4700:	59 2f       	mov	r21, r25
    4702:	52 95       	swap	r21
    4704:	50 7f       	andi	r21, 0xF0	; 240
    4706:	03 c0       	rjmp	.+6      	; 0x470e <decode_hexadecimal_string_bytes+0x4a>
    4708:	59 2f       	mov	r21, r25
    470a:	52 95       	swap	r21
    470c:	50 7f       	andi	r21, 0xF0	; 240
    470e:	2c 0f       	add	r18, r28
    4710:	3d 1f       	adc	r19, r29
    4712:	f9 01       	movw	r30, r18
    4714:	91 81       	ldd	r25, Z+1	; 0x01
    4716:	91 34       	cpi	r25, 0x41	; 65
    4718:	10 f0       	brcs	.+4      	; 0x471e <decode_hexadecimal_string_bytes+0x5a>
    471a:	97 53       	subi	r25, 0x37	; 55
    471c:	01 c0       	rjmp	.+2      	; 0x4720 <decode_hexadecimal_string_bytes+0x5c>
    471e:	90 53       	subi	r25, 0x30	; 48
    4720:	95 0f       	add	r25, r21
    4722:	f8 01       	movw	r30, r16
    4724:	90 83       	st	Z, r25
    4726:	8f 5f       	subi	r24, 0xFF	; 255
    4728:	01 c0       	rjmp	.+2      	; 0x472c <decode_hexadecimal_string_bytes+0x68>
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	28 2f       	mov	r18, r24
    472e:	22 0f       	add	r18, r18
    4730:	48 2f       	mov	r20, r24
    4732:	50 e0       	ldi	r21, 0x00	; 0
    4734:	fe 01       	movw	r30, r28
    4736:	01 90       	ld	r0, Z+
    4738:	00 20       	and	r0, r0
    473a:	e9 f7       	brne	.-6      	; 0x4736 <decode_hexadecimal_string_bytes+0x72>
    473c:	31 97       	sbiw	r30, 0x01	; 1
    473e:	ec 1b       	sub	r30, r28
    4740:	fd 0b       	sbc	r31, r29
    4742:	4e 17       	cp	r20, r30
    4744:	5f 07       	cpc	r21, r31
    4746:	10 f4       	brcc	.+4      	; 0x474c <decode_hexadecimal_string_bytes+0x88>
    4748:	86 13       	cpse	r24, r22
    474a:	ce cf       	rjmp	.-100    	; 0x46e8 <decode_hexadecimal_string_bytes+0x24>
    474c:	df 91       	pop	r29
    474e:	cf 91       	pop	r28
    4750:	1f 91       	pop	r17
    4752:	0f 91       	pop	r16
    4754:	08 95       	ret

00004756 <_serialCallBack>:
    4756:	80 91 31 1a 	lds	r24, 0x1A31	; 0x801a31 <crc_sum.1945>
    475a:	86 0f       	add	r24, r22
    475c:	80 93 31 1a 	sts	0x1A31, r24	; 0x801a31 <crc_sum.1945>
    4760:	90 91 34 1a 	lds	r25, 0x1A34	; 0x801a34 <_mh_state>
    4764:	91 30       	cpi	r25, 0x01	; 1
    4766:	79 f0       	breq	.+30     	; 0x4786 <_serialCallBack+0x30>
    4768:	28 f0       	brcs	.+10     	; 0x4774 <_serialCallBack+0x1e>
    476a:	92 30       	cpi	r25, 0x02	; 2
    476c:	a9 f0       	breq	.+42     	; 0x4798 <_serialCallBack+0x42>
    476e:	93 30       	cpi	r25, 0x03	; 3
    4770:	19 f1       	breq	.+70     	; 0x47b8 <_serialCallBack+0x62>
    4772:	08 95       	ret
    4774:	6f 3f       	cpi	r22, 0xFF	; 255
    4776:	09 f0       	breq	.+2      	; 0x477a <_serialCallBack+0x24>
    4778:	48 c0       	rjmp	.+144    	; 0x480a <_serialCallBack+0xb4>
    477a:	10 92 31 1a 	sts	0x1A31, r1	; 0x801a31 <crc_sum.1945>
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	80 93 34 1a 	sts	0x1A34, r24	; 0x801a34 <_mh_state>
    4784:	08 95       	ret
    4786:	66 38       	cpi	r22, 0x86	; 134
    4788:	09 f0       	breq	.+2      	; 0x478c <_serialCallBack+0x36>
    478a:	3f c0       	rjmp	.+126    	; 0x480a <_serialCallBack+0xb4>
    478c:	10 92 30 1a 	sts	0x1A30, r1	; 0x801a30 <inDex.1943>
    4790:	82 e0       	ldi	r24, 0x02	; 2
    4792:	80 93 34 1a 	sts	0x1A34, r24	; 0x801a34 <_mh_state>
    4796:	08 95       	ret
    4798:	e0 91 30 1a 	lds	r30, 0x1A30	; 0x801a30 <inDex.1943>
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	8e 0f       	add	r24, r30
    47a0:	80 93 30 1a 	sts	0x1A30, r24	; 0x801a30 <inDex.1943>
    47a4:	f0 e0       	ldi	r31, 0x00	; 0
    47a6:	e2 5d       	subi	r30, 0xD2	; 210
    47a8:	f5 4e       	sbci	r31, 0xE5	; 229
    47aa:	60 83       	st	Z, r22
    47ac:	82 30       	cpi	r24, 0x02	; 2
    47ae:	69 f5       	brne	.+90     	; 0x480a <_serialCallBack+0xb4>
    47b0:	83 e0       	ldi	r24, 0x03	; 3
    47b2:	80 93 34 1a 	sts	0x1A34, r24	; 0x801a34 <_mh_state>
    47b6:	08 95       	ret
    47b8:	90 91 30 1a 	lds	r25, 0x1A30	; 0x801a30 <inDex.1943>
    47bc:	21 e0       	ldi	r18, 0x01	; 1
    47be:	29 0f       	add	r18, r25
    47c0:	20 93 30 1a 	sts	0x1A30, r18	; 0x801a30 <inDex.1943>
    47c4:	96 30       	cpi	r25, 0x06	; 6
    47c6:	09 f5       	brne	.+66     	; 0x480a <_serialCallBack+0xb4>
    47c8:	81 11       	cpse	r24, r1
    47ca:	0e c0       	rjmp	.+28     	; 0x47e8 <_serialCallBack+0x92>
    47cc:	ee e2       	ldi	r30, 0x2E	; 46
    47ce:	fa e1       	ldi	r31, 0x1A	; 26
    47d0:	80 81       	ld	r24, Z
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	98 2f       	mov	r25, r24
    47d6:	88 27       	eor	r24, r24
    47d8:	21 81       	ldd	r18, Z+1	; 0x01
    47da:	82 0f       	add	r24, r18
    47dc:	91 1d       	adc	r25, r1
    47de:	90 93 36 1a 	sts	0x1A36, r25	; 0x801a36 <_ppm+0x1>
    47e2:	80 93 35 1a 	sts	0x1A35, r24	; 0x801a35 <_ppm>
    47e6:	04 c0       	rjmp	.+8      	; 0x47f0 <_serialCallBack+0x9a>
    47e8:	10 92 36 1a 	sts	0x1A36, r1	; 0x801a36 <_ppm+0x1>
    47ec:	10 92 35 1a 	sts	0x1A35, r1	; 0x801a35 <_ppm>
    47f0:	10 92 34 1a 	sts	0x1A34, r1	; 0x801a34 <_mh_state>
    47f4:	e0 91 32 1a 	lds	r30, 0x1A32	; 0x801a32 <_appCallBack>
    47f8:	f0 91 33 1a 	lds	r31, 0x1A33	; 0x801a33 <_appCallBack+0x1>
    47fc:	30 97       	sbiw	r30, 0x00	; 0
    47fe:	29 f0       	breq	.+10     	; 0x480a <_serialCallBack+0xb4>
    4800:	80 91 35 1a 	lds	r24, 0x1A35	; 0x801a35 <_ppm>
    4804:	90 91 36 1a 	lds	r25, 0x1A36	; 0x801a36 <_ppm+0x1>
    4808:	19 95       	eicall
    480a:	08 95       	ret

0000480c <mh_z19_initialise>:
    480c:	8f 92       	push	r8
    480e:	9f 92       	push	r9
    4810:	af 92       	push	r10
    4812:	cf 92       	push	r12
    4814:	ef 92       	push	r14
    4816:	0f 93       	push	r16
    4818:	0f 2e       	mov	r0, r31
    481a:	fb ea       	ldi	r31, 0xAB	; 171
    481c:	8f 2e       	mov	r8, r31
    481e:	f3 e2       	ldi	r31, 0x23	; 35
    4820:	9f 2e       	mov	r9, r31
    4822:	f0 2d       	mov	r31, r0
    4824:	68 94       	set
    4826:	aa 24       	eor	r10, r10
    4828:	a4 f8       	bld	r10, 4
    482a:	68 94       	set
    482c:	cc 24       	eor	r12, r12
    482e:	c4 f8       	bld	r12, 4
    4830:	e1 2c       	mov	r14, r1
    4832:	00 e0       	ldi	r16, 0x00	; 0
    4834:	23 e0       	ldi	r18, 0x03	; 3
    4836:	40 e8       	ldi	r20, 0x80	; 128
    4838:	55 e2       	ldi	r21, 0x25	; 37
    483a:	60 e0       	ldi	r22, 0x00	; 0
    483c:	70 e0       	ldi	r23, 0x00	; 0
    483e:	50 d0       	rcall	.+160    	; 0x48e0 <serial_create>
    4840:	90 93 38 1a 	sts	0x1A38, r25	; 0x801a38 <_serial+0x1>
    4844:	80 93 37 1a 	sts	0x1A37, r24	; 0x801a37 <_serial>
    4848:	0f 91       	pop	r16
    484a:	ef 90       	pop	r14
    484c:	cf 90       	pop	r12
    484e:	af 90       	pop	r10
    4850:	9f 90       	pop	r9
    4852:	8f 90       	pop	r8
    4854:	08 95       	ret

00004856 <mh_z19_injectCallBack>:
    4856:	90 93 33 1a 	sts	0x1A33, r25	; 0x801a33 <_appCallBack+0x1>
    485a:	80 93 32 1a 	sts	0x1A32, r24	; 0x801a32 <_appCallBack>
    485e:	08 95       	ret

00004860 <mh_z19_takeMeassuring>:
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	cd b7       	in	r28, 0x3d	; 61
    4866:	de b7       	in	r29, 0x3e	; 62
    4868:	29 97       	sbiw	r28, 0x09	; 9
    486a:	0f b6       	in	r0, 0x3f	; 63
    486c:	f8 94       	cli
    486e:	de bf       	out	0x3e, r29	; 62
    4870:	0f be       	out	0x3f, r0	; 63
    4872:	cd bf       	out	0x3d, r28	; 61
    4874:	89 e0       	ldi	r24, 0x09	; 9
    4876:	e2 e4       	ldi	r30, 0x42	; 66
    4878:	f2 e0       	ldi	r31, 0x02	; 2
    487a:	9e 01       	movw	r18, r28
    487c:	2f 5f       	subi	r18, 0xFF	; 255
    487e:	3f 4f       	sbci	r19, 0xFF	; 255
    4880:	d9 01       	movw	r26, r18
    4882:	01 90       	ld	r0, Z+
    4884:	0d 92       	st	X+, r0
    4886:	8a 95       	dec	r24
    4888:	e1 f7       	brne	.-8      	; 0x4882 <mh_z19_takeMeassuring+0x22>
    488a:	10 92 36 1a 	sts	0x1A36, r1	; 0x801a36 <_ppm+0x1>
    488e:	10 92 35 1a 	sts	0x1A35, r1	; 0x801a35 <_ppm>
    4892:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <_serial>
    4896:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <_serial+0x1>
    489a:	00 97       	sbiw	r24, 0x00	; 0
    489c:	31 f0       	breq	.+12     	; 0x48aa <mh_z19_takeMeassuring+0x4a>
    489e:	42 2f       	mov	r20, r18
    48a0:	53 2f       	mov	r21, r19
    48a2:	69 e0       	ldi	r22, 0x09	; 9
    48a4:	ee d0       	rcall	.+476    	; 0x4a82 <serial_sendBytes>
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	01 c0       	rjmp	.+2      	; 0x48ac <mh_z19_takeMeassuring+0x4c>
    48aa:	82 e0       	ldi	r24, 0x02	; 2
    48ac:	29 96       	adiw	r28, 0x09	; 9
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	f8 94       	cli
    48b2:	de bf       	out	0x3e, r29	; 62
    48b4:	0f be       	out	0x3f, r0	; 63
    48b6:	cd bf       	out	0x3d, r28	; 61
    48b8:	df 91       	pop	r29
    48ba:	cf 91       	pop	r28
    48bc:	08 95       	ret

000048be <mh_z19_getCo2Ppm>:
    48be:	20 91 35 1a 	lds	r18, 0x1A35	; 0x801a35 <_ppm>
    48c2:	30 91 36 1a 	lds	r19, 0x1A36	; 0x801a36 <_ppm+0x1>
    48c6:	21 15       	cp	r18, r1
    48c8:	31 05       	cpc	r19, r1
    48ca:	29 f4       	brne	.+10     	; 0x48d6 <mh_z19_getCo2Ppm+0x18>
    48cc:	fc 01       	movw	r30, r24
    48ce:	11 82       	std	Z+1, r1	; 0x01
    48d0:	10 82       	st	Z, r1
    48d2:	81 e0       	ldi	r24, 0x01	; 1
    48d4:	08 95       	ret
    48d6:	fc 01       	movw	r30, r24
    48d8:	31 83       	std	Z+1, r19	; 0x01
    48da:	20 83       	st	Z, r18
    48dc:	80 e0       	ldi	r24, 0x00	; 0
    48de:	08 95       	ret

000048e0 <serial_create>:
    48e0:	2f 92       	push	r2
    48e2:	3f 92       	push	r3
    48e4:	4f 92       	push	r4
    48e6:	5f 92       	push	r5
    48e8:	6f 92       	push	r6
    48ea:	7f 92       	push	r7
    48ec:	8f 92       	push	r8
    48ee:	9f 92       	push	r9
    48f0:	af 92       	push	r10
    48f2:	cf 92       	push	r12
    48f4:	ef 92       	push	r14
    48f6:	ff 92       	push	r15
    48f8:	0f 93       	push	r16
    48fa:	1f 93       	push	r17
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    4904:	f8 2e       	mov	r15, r24
    4906:	2a 01       	movw	r4, r20
    4908:	3b 01       	movw	r6, r22
    490a:	88 e0       	ldi	r24, 0x08	; 8
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	0e 94 8b 31 	call	0x6316	; 0x6316 <malloc>
    4912:	8c 01       	movw	r16, r24
    4914:	8f 2d       	mov	r24, r15
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	fc 01       	movw	r30, r24
    491a:	ee 0f       	add	r30, r30
    491c:	ff 1f       	adc	r31, r31
    491e:	e7 5c       	subi	r30, 0xC7	; 199
    4920:	f5 4e       	sbci	r31, 0xE5	; 229
    4922:	11 83       	std	Z+1, r17	; 0x01
    4924:	00 83       	st	Z, r16
    4926:	01 15       	cp	r16, r1
    4928:	11 05       	cpc	r17, r1
    492a:	09 f4       	brne	.+2      	; 0x492e <serial_create+0x4e>
    492c:	6d c0       	rjmp	.+218    	; 0x4a08 <serial_create+0x128>
    492e:	88 0f       	add	r24, r24
    4930:	99 1f       	adc	r25, r25
    4932:	fc 01       	movw	r30, r24
    4934:	e5 5f       	subi	r30, 0xF5	; 245
    4936:	fd 4f       	sbci	r31, 0xFD	; 253
    4938:	80 81       	ld	r24, Z
    493a:	91 81       	ldd	r25, Z+1	; 0x01
    493c:	d8 01       	movw	r26, r16
    493e:	8d 93       	st	X+, r24
    4940:	9c 93       	st	X, r25
    4942:	8c 2d       	mov	r24, r12
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	88 0f       	add	r24, r24
    4948:	99 1f       	adc	r25, r25
    494a:	88 0f       	add	r24, r24
    494c:	99 1f       	adc	r25, r25
    494e:	0e 94 8b 31 	call	0x6316	; 0x6316 <malloc>
    4952:	1c 01       	movw	r2, r24
    4954:	86 e0       	ldi	r24, 0x06	; 6
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	0e 94 8b 31 	call	0x6316	; 0x6316 <malloc>
    495c:	7c 01       	movw	r14, r24
    495e:	4c 2d       	mov	r20, r12
    4960:	b1 01       	movw	r22, r2
    4962:	f4 d6       	rcall	.+3560   	; 0x574c <fifo_init>
    4964:	f8 01       	movw	r30, r16
    4966:	f5 82       	std	Z+5, r15	; 0x05
    4968:	e4 82       	std	Z+4, r14	; 0x04
    496a:	8a 2d       	mov	r24, r10
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	88 0f       	add	r24, r24
    4970:	99 1f       	adc	r25, r25
    4972:	88 0f       	add	r24, r24
    4974:	99 1f       	adc	r25, r25
    4976:	0e 94 8b 31 	call	0x6316	; 0x6316 <malloc>
    497a:	1c 01       	movw	r2, r24
    497c:	86 e0       	ldi	r24, 0x06	; 6
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	0e 94 8b 31 	call	0x6316	; 0x6316 <malloc>
    4984:	7c 01       	movw	r14, r24
    4986:	4a 2d       	mov	r20, r10
    4988:	b1 01       	movw	r22, r2
    498a:	e0 d6       	rcall	.+3520   	; 0x574c <fifo_init>
    498c:	d8 01       	movw	r26, r16
    498e:	13 96       	adiw	r26, 0x03	; 3
    4990:	fc 92       	st	X, r15
    4992:	ee 92       	st	-X, r14
    4994:	12 97       	sbiw	r26, 0x02	; 2
    4996:	17 96       	adiw	r26, 0x07	; 7
    4998:	9c 92       	st	X, r9
    499a:	8e 92       	st	-X, r8
    499c:	16 97       	sbiw	r26, 0x06	; 6
    499e:	ff b6       	in	r15, 0x3f	; 63
    49a0:	f8 94       	cli
    49a2:	ed 91       	ld	r30, X+
    49a4:	fc 91       	ld	r31, X
    49a6:	11 97       	sbiw	r26, 0x01	; 1
    49a8:	36 97       	sbiw	r30, 0x06	; 6
    49aa:	80 81       	ld	r24, Z
    49ac:	82 60       	ori	r24, 0x02	; 2
    49ae:	80 83       	st	Z, r24
    49b0:	8d 90       	ld	r8, X+
    49b2:	9c 90       	ld	r9, X
    49b4:	c3 01       	movw	r24, r6
    49b6:	b2 01       	movw	r22, r4
    49b8:	0e 94 49 30 	call	0x6092	; 0x6092 <__floatunsisf>
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	40 e0       	ldi	r20, 0x00	; 0
    49c2:	51 e4       	ldi	r21, 0x41	; 65
    49c4:	0e 94 d7 30 	call	0x61ae	; 0x61ae <__mulsf3>
    49c8:	9b 01       	movw	r18, r22
    49ca:	ac 01       	movw	r20, r24
    49cc:	60 e0       	ldi	r22, 0x00	; 0
    49ce:	74 e2       	ldi	r23, 0x24	; 36
    49d0:	84 e7       	ldi	r24, 0x74	; 116
    49d2:	9b e4       	ldi	r25, 0x4B	; 75
    49d4:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <__divsf3>
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	40 e8       	ldi	r20, 0x80	; 128
    49de:	5f e3       	ldi	r21, 0x3F	; 63
    49e0:	0e 94 4b 2f 	call	0x5e96	; 0x5e96 <__subsf3>
    49e4:	0e 94 1d 30 	call	0x603a	; 0x603a <__fixunssfsi>
    49e8:	f4 01       	movw	r30, r8
    49ea:	32 97       	sbiw	r30, 0x02	; 2
    49ec:	60 83       	st	Z, r22
    49ee:	d8 01       	movw	r26, r16
    49f0:	ed 91       	ld	r30, X+
    49f2:	fc 91       	ld	r31, X
    49f4:	11 97       	sbiw	r26, 0x01	; 1
    49f6:	35 97       	sbiw	r30, 0x05	; 5
    49f8:	88 e9       	ldi	r24, 0x98	; 152
    49fa:	80 83       	st	Z, r24
    49fc:	ed 91       	ld	r30, X+
    49fe:	fc 91       	ld	r31, X
    4a00:	34 97       	sbiw	r30, 0x04	; 4
    4a02:	86 e0       	ldi	r24, 0x06	; 6
    4a04:	80 83       	st	Z, r24
    4a06:	ff be       	out	0x3f, r15	; 63
    4a08:	c8 01       	movw	r24, r16
    4a0a:	df 91       	pop	r29
    4a0c:	cf 91       	pop	r28
    4a0e:	1f 91       	pop	r17
    4a10:	0f 91       	pop	r16
    4a12:	ff 90       	pop	r15
    4a14:	ef 90       	pop	r14
    4a16:	cf 90       	pop	r12
    4a18:	af 90       	pop	r10
    4a1a:	9f 90       	pop	r9
    4a1c:	8f 90       	pop	r8
    4a1e:	7f 90       	pop	r7
    4a20:	6f 90       	pop	r6
    4a22:	5f 90       	pop	r5
    4a24:	4f 90       	pop	r4
    4a26:	3f 90       	pop	r3
    4a28:	2f 90       	pop	r2
    4a2a:	08 95       	ret

00004a2c <serial_sendByte>:
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
    4a30:	dc 01       	movw	r26, r24
    4a32:	89 2b       	or	r24, r25
    4a34:	01 f1       	breq	.+64     	; 0x4a76 <serial_sendByte+0x4a>
    4a36:	12 96       	adiw	r26, 0x02	; 2
    4a38:	ed 91       	ld	r30, X+
    4a3a:	fc 91       	ld	r31, X
    4a3c:	13 97       	sbiw	r26, 0x03	; 3
    4a3e:	93 81       	ldd	r25, Z+3	; 0x03
    4a40:	82 81       	ldd	r24, Z+2	; 0x02
    4a42:	25 81       	ldd	r18, Z+5	; 0x05
    4a44:	98 1b       	sub	r25, r24
    4a46:	92 23       	and	r25, r18
    4a48:	84 81       	ldd	r24, Z+4	; 0x04
    4a4a:	98 17       	cp	r25, r24
    4a4c:	b1 f0       	breq	.+44     	; 0x4a7a <serial_sendByte+0x4e>
    4a4e:	83 81       	ldd	r24, Z+3	; 0x03
    4a50:	26 95       	lsr	r18
    4a52:	28 23       	and	r18, r24
    4a54:	c0 81       	ld	r28, Z
    4a56:	d1 81       	ldd	r29, Z+1	; 0x01
    4a58:	c2 0f       	add	r28, r18
    4a5a:	d1 1d       	adc	r29, r1
    4a5c:	68 83       	st	Y, r22
    4a5e:	8f 5f       	subi	r24, 0xFF	; 255
    4a60:	95 81       	ldd	r25, Z+5	; 0x05
    4a62:	89 23       	and	r24, r25
    4a64:	83 83       	std	Z+3, r24	; 0x03
    4a66:	ed 91       	ld	r30, X+
    4a68:	fc 91       	ld	r31, X
    4a6a:	35 97       	sbiw	r30, 0x05	; 5
    4a6c:	80 81       	ld	r24, Z
    4a6e:	80 62       	ori	r24, 0x20	; 32
    4a70:	80 83       	st	Z, r24
    4a72:	80 e0       	ldi	r24, 0x00	; 0
    4a74:	03 c0       	rjmp	.+6      	; 0x4a7c <serial_sendByte+0x50>
    4a76:	81 e0       	ldi	r24, 0x01	; 1
    4a78:	01 c0       	rjmp	.+2      	; 0x4a7c <serial_sendByte+0x50>
    4a7a:	82 e0       	ldi	r24, 0x02	; 2
    4a7c:	df 91       	pop	r29
    4a7e:	cf 91       	pop	r28
    4a80:	08 95       	ret

00004a82 <serial_sendBytes>:
    4a82:	ef 92       	push	r14
    4a84:	ff 92       	push	r15
    4a86:	0f 93       	push	r16
    4a88:	1f 93       	push	r17
    4a8a:	cf 93       	push	r28
    4a8c:	df 93       	push	r29
    4a8e:	7c 01       	movw	r14, r24
    4a90:	00 97       	sbiw	r24, 0x00	; 0
    4a92:	09 f4       	brne	.+2      	; 0x4a96 <serial_sendBytes+0x14>
    4a94:	41 c0       	rjmp	.+130    	; 0x4b18 <serial_sendBytes+0x96>
    4a96:	dc 01       	movw	r26, r24
    4a98:	12 96       	adiw	r26, 0x02	; 2
    4a9a:	ed 91       	ld	r30, X+
    4a9c:	fc 91       	ld	r31, X
    4a9e:	13 97       	sbiw	r26, 0x03	; 3
    4aa0:	93 81       	ldd	r25, Z+3	; 0x03
    4aa2:	82 81       	ldd	r24, Z+2	; 0x02
    4aa4:	98 1b       	sub	r25, r24
    4aa6:	85 81       	ldd	r24, Z+5	; 0x05
    4aa8:	98 23       	and	r25, r24
    4aaa:	84 81       	ldd	r24, Z+4	; 0x04
    4aac:	89 1b       	sub	r24, r25
    4aae:	86 17       	cp	r24, r22
    4ab0:	a8 f1       	brcs	.+106    	; 0x4b1c <serial_sendBytes+0x9a>
    4ab2:	66 23       	and	r22, r22
    4ab4:	41 f1       	breq	.+80     	; 0x4b06 <serial_sendBytes+0x84>
    4ab6:	84 2f       	mov	r24, r20
    4ab8:	95 2f       	mov	r25, r21
    4aba:	dc 01       	movw	r26, r24
    4abc:	61 50       	subi	r22, 0x01	; 1
    4abe:	46 2f       	mov	r20, r22
    4ac0:	50 e0       	ldi	r21, 0x00	; 0
    4ac2:	4f 5f       	subi	r20, 0xFF	; 255
    4ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ac6:	48 0f       	add	r20, r24
    4ac8:	59 1f       	adc	r21, r25
    4aca:	e7 01       	movw	r28, r14
    4acc:	ea 81       	ldd	r30, Y+2	; 0x02
    4ace:	fb 81       	ldd	r31, Y+3	; 0x03
    4ad0:	93 81       	ldd	r25, Z+3	; 0x03
    4ad2:	82 81       	ldd	r24, Z+2	; 0x02
    4ad4:	25 81       	ldd	r18, Z+5	; 0x05
    4ad6:	98 1b       	sub	r25, r24
    4ad8:	92 23       	and	r25, r18
    4ada:	84 81       	ldd	r24, Z+4	; 0x04
    4adc:	98 17       	cp	r25, r24
    4ade:	79 f0       	breq	.+30     	; 0x4afe <serial_sendBytes+0x7c>
    4ae0:	8c 91       	ld	r24, X
    4ae2:	93 81       	ldd	r25, Z+3	; 0x03
    4ae4:	26 95       	lsr	r18
    4ae6:	29 23       	and	r18, r25
    4ae8:	60 81       	ld	r22, Z
    4aea:	71 81       	ldd	r23, Z+1	; 0x01
    4aec:	8b 01       	movw	r16, r22
    4aee:	02 0f       	add	r16, r18
    4af0:	11 1d       	adc	r17, r1
    4af2:	e8 01       	movw	r28, r16
    4af4:	88 83       	st	Y, r24
    4af6:	9f 5f       	subi	r25, 0xFF	; 255
    4af8:	85 81       	ldd	r24, Z+5	; 0x05
    4afa:	98 23       	and	r25, r24
    4afc:	93 83       	std	Z+3, r25	; 0x03
    4afe:	11 96       	adiw	r26, 0x01	; 1
    4b00:	a4 17       	cp	r26, r20
    4b02:	b5 07       	cpc	r27, r21
    4b04:	11 f7       	brne	.-60     	; 0x4aca <serial_sendBytes+0x48>
    4b06:	d7 01       	movw	r26, r14
    4b08:	ed 91       	ld	r30, X+
    4b0a:	fc 91       	ld	r31, X
    4b0c:	35 97       	sbiw	r30, 0x05	; 5
    4b0e:	80 81       	ld	r24, Z
    4b10:	80 62       	ori	r24, 0x20	; 32
    4b12:	80 83       	st	Z, r24
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	03 c0       	rjmp	.+6      	; 0x4b1e <serial_sendBytes+0x9c>
    4b18:	81 e0       	ldi	r24, 0x01	; 1
    4b1a:	01 c0       	rjmp	.+2      	; 0x4b1e <serial_sendBytes+0x9c>
    4b1c:	82 e0       	ldi	r24, 0x02	; 2
    4b1e:	df 91       	pop	r29
    4b20:	cf 91       	pop	r28
    4b22:	1f 91       	pop	r17
    4b24:	0f 91       	pop	r16
    4b26:	ff 90       	pop	r15
    4b28:	ef 90       	pop	r14
    4b2a:	08 95       	ret

00004b2c <serial_getByte>:
    4b2c:	00 97       	sbiw	r24, 0x00	; 0
    4b2e:	d1 f0       	breq	.+52     	; 0x4b64 <serial_getByte+0x38>
    4b30:	dc 01       	movw	r26, r24
    4b32:	14 96       	adiw	r26, 0x04	; 4
    4b34:	ed 91       	ld	r30, X+
    4b36:	fc 91       	ld	r31, X
    4b38:	15 97       	sbiw	r26, 0x05	; 5
    4b3a:	93 81       	ldd	r25, Z+3	; 0x03
    4b3c:	82 81       	ldd	r24, Z+2	; 0x02
    4b3e:	98 17       	cp	r25, r24
    4b40:	99 f0       	breq	.+38     	; 0x4b68 <serial_getByte+0x3c>
    4b42:	92 81       	ldd	r25, Z+2	; 0x02
    4b44:	85 81       	ldd	r24, Z+5	; 0x05
    4b46:	86 95       	lsr	r24
    4b48:	89 23       	and	r24, r25
    4b4a:	a0 81       	ld	r26, Z
    4b4c:	b1 81       	ldd	r27, Z+1	; 0x01
    4b4e:	a8 0f       	add	r26, r24
    4b50:	b1 1d       	adc	r27, r1
    4b52:	8c 91       	ld	r24, X
    4b54:	db 01       	movw	r26, r22
    4b56:	8c 93       	st	X, r24
    4b58:	9f 5f       	subi	r25, 0xFF	; 255
    4b5a:	85 81       	ldd	r24, Z+5	; 0x05
    4b5c:	98 23       	and	r25, r24
    4b5e:	92 83       	std	Z+2, r25	; 0x02
    4b60:	80 e0       	ldi	r24, 0x00	; 0
    4b62:	08 95       	ret
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	08 95       	ret
    4b68:	83 e0       	ldi	r24, 0x03	; 3
    4b6a:	08 95       	ret

00004b6c <__vector_25>:
    4b6c:	1f 92       	push	r1
    4b6e:	0f 92       	push	r0
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	0f 92       	push	r0
    4b74:	11 24       	eor	r1, r1
    4b76:	0b b6       	in	r0, 0x3b	; 59
    4b78:	0f 92       	push	r0
    4b7a:	2f 93       	push	r18
    4b7c:	3f 93       	push	r19
    4b7e:	4f 93       	push	r20
    4b80:	5f 93       	push	r21
    4b82:	6f 93       	push	r22
    4b84:	7f 93       	push	r23
    4b86:	8f 93       	push	r24
    4b88:	9f 93       	push	r25
    4b8a:	af 93       	push	r26
    4b8c:	bf 93       	push	r27
    4b8e:	cf 93       	push	r28
    4b90:	df 93       	push	r29
    4b92:	ef 93       	push	r30
    4b94:	ff 93       	push	r31
    4b96:	a0 91 39 1a 	lds	r26, 0x1A39	; 0x801a39 <_ser_handle>
    4b9a:	b0 91 3a 1a 	lds	r27, 0x1A3A	; 0x801a3a <_ser_handle+0x1>
    4b9e:	10 97       	sbiw	r26, 0x00	; 0
    4ba0:	11 f1       	breq	.+68     	; 0x4be6 <__vector_25+0x7a>
    4ba2:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4ba6:	14 96       	adiw	r26, 0x04	; 4
    4ba8:	ed 91       	ld	r30, X+
    4baa:	fc 91       	ld	r31, X
    4bac:	15 97       	sbiw	r26, 0x05	; 5
    4bae:	93 81       	ldd	r25, Z+3	; 0x03
    4bb0:	82 81       	ldd	r24, Z+2	; 0x02
    4bb2:	25 81       	ldd	r18, Z+5	; 0x05
    4bb4:	98 1b       	sub	r25, r24
    4bb6:	92 23       	and	r25, r18
    4bb8:	84 81       	ldd	r24, Z+4	; 0x04
    4bba:	98 17       	cp	r25, r24
    4bbc:	61 f0       	breq	.+24     	; 0x4bd6 <__vector_25+0x6a>
    4bbe:	83 81       	ldd	r24, Z+3	; 0x03
    4bc0:	26 95       	lsr	r18
    4bc2:	28 23       	and	r18, r24
    4bc4:	c0 81       	ld	r28, Z
    4bc6:	d1 81       	ldd	r29, Z+1	; 0x01
    4bc8:	c2 0f       	add	r28, r18
    4bca:	d1 1d       	adc	r29, r1
    4bcc:	68 83       	st	Y, r22
    4bce:	8f 5f       	subi	r24, 0xFF	; 255
    4bd0:	95 81       	ldd	r25, Z+5	; 0x05
    4bd2:	89 23       	and	r24, r25
    4bd4:	83 83       	std	Z+3, r24	; 0x03
    4bd6:	16 96       	adiw	r26, 0x06	; 6
    4bd8:	ed 91       	ld	r30, X+
    4bda:	fc 91       	ld	r31, X
    4bdc:	17 97       	sbiw	r26, 0x07	; 7
    4bde:	30 97       	sbiw	r30, 0x00	; 0
    4be0:	11 f0       	breq	.+4      	; 0x4be6 <__vector_25+0x7a>
    4be2:	cd 01       	movw	r24, r26
    4be4:	19 95       	eicall
    4be6:	ff 91       	pop	r31
    4be8:	ef 91       	pop	r30
    4bea:	df 91       	pop	r29
    4bec:	cf 91       	pop	r28
    4bee:	bf 91       	pop	r27
    4bf0:	af 91       	pop	r26
    4bf2:	9f 91       	pop	r25
    4bf4:	8f 91       	pop	r24
    4bf6:	7f 91       	pop	r23
    4bf8:	6f 91       	pop	r22
    4bfa:	5f 91       	pop	r21
    4bfc:	4f 91       	pop	r20
    4bfe:	3f 91       	pop	r19
    4c00:	2f 91       	pop	r18
    4c02:	0f 90       	pop	r0
    4c04:	0b be       	out	0x3b, r0	; 59
    4c06:	0f 90       	pop	r0
    4c08:	0f be       	out	0x3f, r0	; 63
    4c0a:	0f 90       	pop	r0
    4c0c:	1f 90       	pop	r1
    4c0e:	18 95       	reti

00004c10 <__vector_26>:
    4c10:	1f 92       	push	r1
    4c12:	0f 92       	push	r0
    4c14:	0f b6       	in	r0, 0x3f	; 63
    4c16:	0f 92       	push	r0
    4c18:	11 24       	eor	r1, r1
    4c1a:	0b b6       	in	r0, 0x3b	; 59
    4c1c:	0f 92       	push	r0
    4c1e:	2f 93       	push	r18
    4c20:	8f 93       	push	r24
    4c22:	9f 93       	push	r25
    4c24:	af 93       	push	r26
    4c26:	bf 93       	push	r27
    4c28:	ef 93       	push	r30
    4c2a:	ff 93       	push	r31
    4c2c:	e0 91 39 1a 	lds	r30, 0x1A39	; 0x801a39 <_ser_handle>
    4c30:	f0 91 3a 1a 	lds	r31, 0x1A3A	; 0x801a3a <_ser_handle+0x1>
    4c34:	30 97       	sbiw	r30, 0x00	; 0
    4c36:	b9 f0       	breq	.+46     	; 0x4c66 <__vector_26+0x56>
    4c38:	02 80       	ldd	r0, Z+2	; 0x02
    4c3a:	f3 81       	ldd	r31, Z+3	; 0x03
    4c3c:	e0 2d       	mov	r30, r0
    4c3e:	93 81       	ldd	r25, Z+3	; 0x03
    4c40:	82 81       	ldd	r24, Z+2	; 0x02
    4c42:	98 17       	cp	r25, r24
    4c44:	b1 f0       	breq	.+44     	; 0x4c72 <__vector_26+0x62>
    4c46:	92 81       	ldd	r25, Z+2	; 0x02
    4c48:	85 81       	ldd	r24, Z+5	; 0x05
    4c4a:	28 2f       	mov	r18, r24
    4c4c:	26 95       	lsr	r18
    4c4e:	29 23       	and	r18, r25
    4c50:	a0 81       	ld	r26, Z
    4c52:	b1 81       	ldd	r27, Z+1	; 0x01
    4c54:	a2 0f       	add	r26, r18
    4c56:	b1 1d       	adc	r27, r1
    4c58:	2c 91       	ld	r18, X
    4c5a:	9f 5f       	subi	r25, 0xFF	; 255
    4c5c:	89 23       	and	r24, r25
    4c5e:	82 83       	std	Z+2, r24	; 0x02
    4c60:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4c64:	0b c0       	rjmp	.+22     	; 0x4c7c <__vector_26+0x6c>
    4c66:	e1 ec       	ldi	r30, 0xC1	; 193
    4c68:	f0 e0       	ldi	r31, 0x00	; 0
    4c6a:	80 81       	ld	r24, Z
    4c6c:	8f 7d       	andi	r24, 0xDF	; 223
    4c6e:	80 83       	st	Z, r24
    4c70:	05 c0       	rjmp	.+10     	; 0x4c7c <__vector_26+0x6c>
    4c72:	e1 ec       	ldi	r30, 0xC1	; 193
    4c74:	f0 e0       	ldi	r31, 0x00	; 0
    4c76:	80 81       	ld	r24, Z
    4c78:	8f 7d       	andi	r24, 0xDF	; 223
    4c7a:	80 83       	st	Z, r24
    4c7c:	ff 91       	pop	r31
    4c7e:	ef 91       	pop	r30
    4c80:	bf 91       	pop	r27
    4c82:	af 91       	pop	r26
    4c84:	9f 91       	pop	r25
    4c86:	8f 91       	pop	r24
    4c88:	2f 91       	pop	r18
    4c8a:	0f 90       	pop	r0
    4c8c:	0b be       	out	0x3b, r0	; 59
    4c8e:	0f 90       	pop	r0
    4c90:	0f be       	out	0x3f, r0	; 63
    4c92:	0f 90       	pop	r0
    4c94:	1f 90       	pop	r1
    4c96:	18 95       	reti

00004c98 <__vector_36>:
    4c98:	1f 92       	push	r1
    4c9a:	0f 92       	push	r0
    4c9c:	0f b6       	in	r0, 0x3f	; 63
    4c9e:	0f 92       	push	r0
    4ca0:	11 24       	eor	r1, r1
    4ca2:	0b b6       	in	r0, 0x3b	; 59
    4ca4:	0f 92       	push	r0
    4ca6:	2f 93       	push	r18
    4ca8:	3f 93       	push	r19
    4caa:	4f 93       	push	r20
    4cac:	5f 93       	push	r21
    4cae:	6f 93       	push	r22
    4cb0:	7f 93       	push	r23
    4cb2:	8f 93       	push	r24
    4cb4:	9f 93       	push	r25
    4cb6:	af 93       	push	r26
    4cb8:	bf 93       	push	r27
    4cba:	cf 93       	push	r28
    4cbc:	df 93       	push	r29
    4cbe:	ef 93       	push	r30
    4cc0:	ff 93       	push	r31
    4cc2:	a0 91 3b 1a 	lds	r26, 0x1A3B	; 0x801a3b <_ser_handle+0x2>
    4cc6:	b0 91 3c 1a 	lds	r27, 0x1A3C	; 0x801a3c <_ser_handle+0x3>
    4cca:	10 97       	sbiw	r26, 0x00	; 0
    4ccc:	11 f1       	breq	.+68     	; 0x4d12 <__vector_36+0x7a>
    4cce:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4cd2:	14 96       	adiw	r26, 0x04	; 4
    4cd4:	ed 91       	ld	r30, X+
    4cd6:	fc 91       	ld	r31, X
    4cd8:	15 97       	sbiw	r26, 0x05	; 5
    4cda:	93 81       	ldd	r25, Z+3	; 0x03
    4cdc:	82 81       	ldd	r24, Z+2	; 0x02
    4cde:	25 81       	ldd	r18, Z+5	; 0x05
    4ce0:	98 1b       	sub	r25, r24
    4ce2:	92 23       	and	r25, r18
    4ce4:	84 81       	ldd	r24, Z+4	; 0x04
    4ce6:	98 17       	cp	r25, r24
    4ce8:	61 f0       	breq	.+24     	; 0x4d02 <__vector_36+0x6a>
    4cea:	83 81       	ldd	r24, Z+3	; 0x03
    4cec:	26 95       	lsr	r18
    4cee:	28 23       	and	r18, r24
    4cf0:	c0 81       	ld	r28, Z
    4cf2:	d1 81       	ldd	r29, Z+1	; 0x01
    4cf4:	c2 0f       	add	r28, r18
    4cf6:	d1 1d       	adc	r29, r1
    4cf8:	68 83       	st	Y, r22
    4cfa:	8f 5f       	subi	r24, 0xFF	; 255
    4cfc:	95 81       	ldd	r25, Z+5	; 0x05
    4cfe:	89 23       	and	r24, r25
    4d00:	83 83       	std	Z+3, r24	; 0x03
    4d02:	16 96       	adiw	r26, 0x06	; 6
    4d04:	ed 91       	ld	r30, X+
    4d06:	fc 91       	ld	r31, X
    4d08:	17 97       	sbiw	r26, 0x07	; 7
    4d0a:	30 97       	sbiw	r30, 0x00	; 0
    4d0c:	11 f0       	breq	.+4      	; 0x4d12 <__vector_36+0x7a>
    4d0e:	cd 01       	movw	r24, r26
    4d10:	19 95       	eicall
    4d12:	ff 91       	pop	r31
    4d14:	ef 91       	pop	r30
    4d16:	df 91       	pop	r29
    4d18:	cf 91       	pop	r28
    4d1a:	bf 91       	pop	r27
    4d1c:	af 91       	pop	r26
    4d1e:	9f 91       	pop	r25
    4d20:	8f 91       	pop	r24
    4d22:	7f 91       	pop	r23
    4d24:	6f 91       	pop	r22
    4d26:	5f 91       	pop	r21
    4d28:	4f 91       	pop	r20
    4d2a:	3f 91       	pop	r19
    4d2c:	2f 91       	pop	r18
    4d2e:	0f 90       	pop	r0
    4d30:	0b be       	out	0x3b, r0	; 59
    4d32:	0f 90       	pop	r0
    4d34:	0f be       	out	0x3f, r0	; 63
    4d36:	0f 90       	pop	r0
    4d38:	1f 90       	pop	r1
    4d3a:	18 95       	reti

00004d3c <__vector_37>:
    4d3c:	1f 92       	push	r1
    4d3e:	0f 92       	push	r0
    4d40:	0f b6       	in	r0, 0x3f	; 63
    4d42:	0f 92       	push	r0
    4d44:	11 24       	eor	r1, r1
    4d46:	0b b6       	in	r0, 0x3b	; 59
    4d48:	0f 92       	push	r0
    4d4a:	2f 93       	push	r18
    4d4c:	8f 93       	push	r24
    4d4e:	9f 93       	push	r25
    4d50:	af 93       	push	r26
    4d52:	bf 93       	push	r27
    4d54:	ef 93       	push	r30
    4d56:	ff 93       	push	r31
    4d58:	e0 91 3b 1a 	lds	r30, 0x1A3B	; 0x801a3b <_ser_handle+0x2>
    4d5c:	f0 91 3c 1a 	lds	r31, 0x1A3C	; 0x801a3c <_ser_handle+0x3>
    4d60:	30 97       	sbiw	r30, 0x00	; 0
    4d62:	b9 f0       	breq	.+46     	; 0x4d92 <__vector_37+0x56>
    4d64:	02 80       	ldd	r0, Z+2	; 0x02
    4d66:	f3 81       	ldd	r31, Z+3	; 0x03
    4d68:	e0 2d       	mov	r30, r0
    4d6a:	93 81       	ldd	r25, Z+3	; 0x03
    4d6c:	82 81       	ldd	r24, Z+2	; 0x02
    4d6e:	98 17       	cp	r25, r24
    4d70:	b1 f0       	breq	.+44     	; 0x4d9e <__vector_37+0x62>
    4d72:	92 81       	ldd	r25, Z+2	; 0x02
    4d74:	85 81       	ldd	r24, Z+5	; 0x05
    4d76:	28 2f       	mov	r18, r24
    4d78:	26 95       	lsr	r18
    4d7a:	29 23       	and	r18, r25
    4d7c:	a0 81       	ld	r26, Z
    4d7e:	b1 81       	ldd	r27, Z+1	; 0x01
    4d80:	a2 0f       	add	r26, r18
    4d82:	b1 1d       	adc	r27, r1
    4d84:	2c 91       	ld	r18, X
    4d86:	9f 5f       	subi	r25, 0xFF	; 255
    4d88:	89 23       	and	r24, r25
    4d8a:	82 83       	std	Z+2, r24	; 0x02
    4d8c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4d90:	0b c0       	rjmp	.+22     	; 0x4da8 <__vector_37+0x6c>
    4d92:	e9 ec       	ldi	r30, 0xC9	; 201
    4d94:	f0 e0       	ldi	r31, 0x00	; 0
    4d96:	80 81       	ld	r24, Z
    4d98:	8f 7d       	andi	r24, 0xDF	; 223
    4d9a:	80 83       	st	Z, r24
    4d9c:	05 c0       	rjmp	.+10     	; 0x4da8 <__vector_37+0x6c>
    4d9e:	e9 ec       	ldi	r30, 0xC9	; 201
    4da0:	f0 e0       	ldi	r31, 0x00	; 0
    4da2:	80 81       	ld	r24, Z
    4da4:	8f 7d       	andi	r24, 0xDF	; 223
    4da6:	80 83       	st	Z, r24
    4da8:	ff 91       	pop	r31
    4daa:	ef 91       	pop	r30
    4dac:	bf 91       	pop	r27
    4dae:	af 91       	pop	r26
    4db0:	9f 91       	pop	r25
    4db2:	8f 91       	pop	r24
    4db4:	2f 91       	pop	r18
    4db6:	0f 90       	pop	r0
    4db8:	0b be       	out	0x3b, r0	; 59
    4dba:	0f 90       	pop	r0
    4dbc:	0f be       	out	0x3f, r0	; 63
    4dbe:	0f 90       	pop	r0
    4dc0:	1f 90       	pop	r1
    4dc2:	18 95       	reti

00004dc4 <__vector_51>:
    4dc4:	1f 92       	push	r1
    4dc6:	0f 92       	push	r0
    4dc8:	0f b6       	in	r0, 0x3f	; 63
    4dca:	0f 92       	push	r0
    4dcc:	11 24       	eor	r1, r1
    4dce:	0b b6       	in	r0, 0x3b	; 59
    4dd0:	0f 92       	push	r0
    4dd2:	2f 93       	push	r18
    4dd4:	3f 93       	push	r19
    4dd6:	4f 93       	push	r20
    4dd8:	5f 93       	push	r21
    4dda:	6f 93       	push	r22
    4ddc:	7f 93       	push	r23
    4dde:	8f 93       	push	r24
    4de0:	9f 93       	push	r25
    4de2:	af 93       	push	r26
    4de4:	bf 93       	push	r27
    4de6:	cf 93       	push	r28
    4de8:	df 93       	push	r29
    4dea:	ef 93       	push	r30
    4dec:	ff 93       	push	r31
    4dee:	a0 91 3d 1a 	lds	r26, 0x1A3D	; 0x801a3d <_ser_handle+0x4>
    4df2:	b0 91 3e 1a 	lds	r27, 0x1A3E	; 0x801a3e <_ser_handle+0x5>
    4df6:	10 97       	sbiw	r26, 0x00	; 0
    4df8:	11 f1       	breq	.+68     	; 0x4e3e <__vector_51+0x7a>
    4dfa:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4dfe:	14 96       	adiw	r26, 0x04	; 4
    4e00:	ed 91       	ld	r30, X+
    4e02:	fc 91       	ld	r31, X
    4e04:	15 97       	sbiw	r26, 0x05	; 5
    4e06:	93 81       	ldd	r25, Z+3	; 0x03
    4e08:	82 81       	ldd	r24, Z+2	; 0x02
    4e0a:	25 81       	ldd	r18, Z+5	; 0x05
    4e0c:	98 1b       	sub	r25, r24
    4e0e:	92 23       	and	r25, r18
    4e10:	84 81       	ldd	r24, Z+4	; 0x04
    4e12:	98 17       	cp	r25, r24
    4e14:	61 f0       	breq	.+24     	; 0x4e2e <__vector_51+0x6a>
    4e16:	83 81       	ldd	r24, Z+3	; 0x03
    4e18:	26 95       	lsr	r18
    4e1a:	28 23       	and	r18, r24
    4e1c:	c0 81       	ld	r28, Z
    4e1e:	d1 81       	ldd	r29, Z+1	; 0x01
    4e20:	c2 0f       	add	r28, r18
    4e22:	d1 1d       	adc	r29, r1
    4e24:	68 83       	st	Y, r22
    4e26:	8f 5f       	subi	r24, 0xFF	; 255
    4e28:	95 81       	ldd	r25, Z+5	; 0x05
    4e2a:	89 23       	and	r24, r25
    4e2c:	83 83       	std	Z+3, r24	; 0x03
    4e2e:	16 96       	adiw	r26, 0x06	; 6
    4e30:	ed 91       	ld	r30, X+
    4e32:	fc 91       	ld	r31, X
    4e34:	17 97       	sbiw	r26, 0x07	; 7
    4e36:	30 97       	sbiw	r30, 0x00	; 0
    4e38:	11 f0       	breq	.+4      	; 0x4e3e <__vector_51+0x7a>
    4e3a:	cd 01       	movw	r24, r26
    4e3c:	19 95       	eicall
    4e3e:	ff 91       	pop	r31
    4e40:	ef 91       	pop	r30
    4e42:	df 91       	pop	r29
    4e44:	cf 91       	pop	r28
    4e46:	bf 91       	pop	r27
    4e48:	af 91       	pop	r26
    4e4a:	9f 91       	pop	r25
    4e4c:	8f 91       	pop	r24
    4e4e:	7f 91       	pop	r23
    4e50:	6f 91       	pop	r22
    4e52:	5f 91       	pop	r21
    4e54:	4f 91       	pop	r20
    4e56:	3f 91       	pop	r19
    4e58:	2f 91       	pop	r18
    4e5a:	0f 90       	pop	r0
    4e5c:	0b be       	out	0x3b, r0	; 59
    4e5e:	0f 90       	pop	r0
    4e60:	0f be       	out	0x3f, r0	; 63
    4e62:	0f 90       	pop	r0
    4e64:	1f 90       	pop	r1
    4e66:	18 95       	reti

00004e68 <__vector_52>:
    4e68:	1f 92       	push	r1
    4e6a:	0f 92       	push	r0
    4e6c:	0f b6       	in	r0, 0x3f	; 63
    4e6e:	0f 92       	push	r0
    4e70:	11 24       	eor	r1, r1
    4e72:	0b b6       	in	r0, 0x3b	; 59
    4e74:	0f 92       	push	r0
    4e76:	2f 93       	push	r18
    4e78:	8f 93       	push	r24
    4e7a:	9f 93       	push	r25
    4e7c:	af 93       	push	r26
    4e7e:	bf 93       	push	r27
    4e80:	ef 93       	push	r30
    4e82:	ff 93       	push	r31
    4e84:	e0 91 3d 1a 	lds	r30, 0x1A3D	; 0x801a3d <_ser_handle+0x4>
    4e88:	f0 91 3e 1a 	lds	r31, 0x1A3E	; 0x801a3e <_ser_handle+0x5>
    4e8c:	30 97       	sbiw	r30, 0x00	; 0
    4e8e:	b9 f0       	breq	.+46     	; 0x4ebe <__vector_52+0x56>
    4e90:	02 80       	ldd	r0, Z+2	; 0x02
    4e92:	f3 81       	ldd	r31, Z+3	; 0x03
    4e94:	e0 2d       	mov	r30, r0
    4e96:	93 81       	ldd	r25, Z+3	; 0x03
    4e98:	82 81       	ldd	r24, Z+2	; 0x02
    4e9a:	98 17       	cp	r25, r24
    4e9c:	b1 f0       	breq	.+44     	; 0x4eca <__vector_52+0x62>
    4e9e:	92 81       	ldd	r25, Z+2	; 0x02
    4ea0:	85 81       	ldd	r24, Z+5	; 0x05
    4ea2:	28 2f       	mov	r18, r24
    4ea4:	26 95       	lsr	r18
    4ea6:	29 23       	and	r18, r25
    4ea8:	a0 81       	ld	r26, Z
    4eaa:	b1 81       	ldd	r27, Z+1	; 0x01
    4eac:	a2 0f       	add	r26, r18
    4eae:	b1 1d       	adc	r27, r1
    4eb0:	2c 91       	ld	r18, X
    4eb2:	9f 5f       	subi	r25, 0xFF	; 255
    4eb4:	89 23       	and	r24, r25
    4eb6:	82 83       	std	Z+2, r24	; 0x02
    4eb8:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4ebc:	0b c0       	rjmp	.+22     	; 0x4ed4 <__vector_52+0x6c>
    4ebe:	e1 ed       	ldi	r30, 0xD1	; 209
    4ec0:	f0 e0       	ldi	r31, 0x00	; 0
    4ec2:	80 81       	ld	r24, Z
    4ec4:	8f 7d       	andi	r24, 0xDF	; 223
    4ec6:	80 83       	st	Z, r24
    4ec8:	05 c0       	rjmp	.+10     	; 0x4ed4 <__vector_52+0x6c>
    4eca:	e1 ed       	ldi	r30, 0xD1	; 209
    4ecc:	f0 e0       	ldi	r31, 0x00	; 0
    4ece:	80 81       	ld	r24, Z
    4ed0:	8f 7d       	andi	r24, 0xDF	; 223
    4ed2:	80 83       	st	Z, r24
    4ed4:	ff 91       	pop	r31
    4ed6:	ef 91       	pop	r30
    4ed8:	bf 91       	pop	r27
    4eda:	af 91       	pop	r26
    4edc:	9f 91       	pop	r25
    4ede:	8f 91       	pop	r24
    4ee0:	2f 91       	pop	r18
    4ee2:	0f 90       	pop	r0
    4ee4:	0b be       	out	0x3b, r0	; 59
    4ee6:	0f 90       	pop	r0
    4ee8:	0f be       	out	0x3f, r0	; 63
    4eea:	0f 90       	pop	r0
    4eec:	1f 90       	pop	r1
    4eee:	18 95       	reti

00004ef0 <__vector_54>:
    4ef0:	1f 92       	push	r1
    4ef2:	0f 92       	push	r0
    4ef4:	0f b6       	in	r0, 0x3f	; 63
    4ef6:	0f 92       	push	r0
    4ef8:	11 24       	eor	r1, r1
    4efa:	0b b6       	in	r0, 0x3b	; 59
    4efc:	0f 92       	push	r0
    4efe:	2f 93       	push	r18
    4f00:	3f 93       	push	r19
    4f02:	4f 93       	push	r20
    4f04:	5f 93       	push	r21
    4f06:	6f 93       	push	r22
    4f08:	7f 93       	push	r23
    4f0a:	8f 93       	push	r24
    4f0c:	9f 93       	push	r25
    4f0e:	af 93       	push	r26
    4f10:	bf 93       	push	r27
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	ef 93       	push	r30
    4f18:	ff 93       	push	r31
    4f1a:	a0 91 3f 1a 	lds	r26, 0x1A3F	; 0x801a3f <_ser_handle+0x6>
    4f1e:	b0 91 40 1a 	lds	r27, 0x1A40	; 0x801a40 <_ser_handle+0x7>
    4f22:	10 97       	sbiw	r26, 0x00	; 0
    4f24:	11 f1       	breq	.+68     	; 0x4f6a <__vector_54+0x7a>
    4f26:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4f2a:	14 96       	adiw	r26, 0x04	; 4
    4f2c:	ed 91       	ld	r30, X+
    4f2e:	fc 91       	ld	r31, X
    4f30:	15 97       	sbiw	r26, 0x05	; 5
    4f32:	93 81       	ldd	r25, Z+3	; 0x03
    4f34:	82 81       	ldd	r24, Z+2	; 0x02
    4f36:	25 81       	ldd	r18, Z+5	; 0x05
    4f38:	98 1b       	sub	r25, r24
    4f3a:	92 23       	and	r25, r18
    4f3c:	84 81       	ldd	r24, Z+4	; 0x04
    4f3e:	98 17       	cp	r25, r24
    4f40:	61 f0       	breq	.+24     	; 0x4f5a <__vector_54+0x6a>
    4f42:	83 81       	ldd	r24, Z+3	; 0x03
    4f44:	26 95       	lsr	r18
    4f46:	28 23       	and	r18, r24
    4f48:	c0 81       	ld	r28, Z
    4f4a:	d1 81       	ldd	r29, Z+1	; 0x01
    4f4c:	c2 0f       	add	r28, r18
    4f4e:	d1 1d       	adc	r29, r1
    4f50:	68 83       	st	Y, r22
    4f52:	8f 5f       	subi	r24, 0xFF	; 255
    4f54:	95 81       	ldd	r25, Z+5	; 0x05
    4f56:	89 23       	and	r24, r25
    4f58:	83 83       	std	Z+3, r24	; 0x03
    4f5a:	16 96       	adiw	r26, 0x06	; 6
    4f5c:	ed 91       	ld	r30, X+
    4f5e:	fc 91       	ld	r31, X
    4f60:	17 97       	sbiw	r26, 0x07	; 7
    4f62:	30 97       	sbiw	r30, 0x00	; 0
    4f64:	11 f0       	breq	.+4      	; 0x4f6a <__vector_54+0x7a>
    4f66:	cd 01       	movw	r24, r26
    4f68:	19 95       	eicall
    4f6a:	ff 91       	pop	r31
    4f6c:	ef 91       	pop	r30
    4f6e:	df 91       	pop	r29
    4f70:	cf 91       	pop	r28
    4f72:	bf 91       	pop	r27
    4f74:	af 91       	pop	r26
    4f76:	9f 91       	pop	r25
    4f78:	8f 91       	pop	r24
    4f7a:	7f 91       	pop	r23
    4f7c:	6f 91       	pop	r22
    4f7e:	5f 91       	pop	r21
    4f80:	4f 91       	pop	r20
    4f82:	3f 91       	pop	r19
    4f84:	2f 91       	pop	r18
    4f86:	0f 90       	pop	r0
    4f88:	0b be       	out	0x3b, r0	; 59
    4f8a:	0f 90       	pop	r0
    4f8c:	0f be       	out	0x3f, r0	; 63
    4f8e:	0f 90       	pop	r0
    4f90:	1f 90       	pop	r1
    4f92:	18 95       	reti

00004f94 <__vector_55>:
    4f94:	1f 92       	push	r1
    4f96:	0f 92       	push	r0
    4f98:	0f b6       	in	r0, 0x3f	; 63
    4f9a:	0f 92       	push	r0
    4f9c:	11 24       	eor	r1, r1
    4f9e:	0b b6       	in	r0, 0x3b	; 59
    4fa0:	0f 92       	push	r0
    4fa2:	2f 93       	push	r18
    4fa4:	8f 93       	push	r24
    4fa6:	9f 93       	push	r25
    4fa8:	af 93       	push	r26
    4faa:	bf 93       	push	r27
    4fac:	ef 93       	push	r30
    4fae:	ff 93       	push	r31
    4fb0:	e0 91 3f 1a 	lds	r30, 0x1A3F	; 0x801a3f <_ser_handle+0x6>
    4fb4:	f0 91 40 1a 	lds	r31, 0x1A40	; 0x801a40 <_ser_handle+0x7>
    4fb8:	30 97       	sbiw	r30, 0x00	; 0
    4fba:	b9 f0       	breq	.+46     	; 0x4fea <__vector_55+0x56>
    4fbc:	02 80       	ldd	r0, Z+2	; 0x02
    4fbe:	f3 81       	ldd	r31, Z+3	; 0x03
    4fc0:	e0 2d       	mov	r30, r0
    4fc2:	93 81       	ldd	r25, Z+3	; 0x03
    4fc4:	82 81       	ldd	r24, Z+2	; 0x02
    4fc6:	98 17       	cp	r25, r24
    4fc8:	b1 f0       	breq	.+44     	; 0x4ff6 <__vector_55+0x62>
    4fca:	92 81       	ldd	r25, Z+2	; 0x02
    4fcc:	85 81       	ldd	r24, Z+5	; 0x05
    4fce:	28 2f       	mov	r18, r24
    4fd0:	26 95       	lsr	r18
    4fd2:	29 23       	and	r18, r25
    4fd4:	a0 81       	ld	r26, Z
    4fd6:	b1 81       	ldd	r27, Z+1	; 0x01
    4fd8:	a2 0f       	add	r26, r18
    4fda:	b1 1d       	adc	r27, r1
    4fdc:	2c 91       	ld	r18, X
    4fde:	9f 5f       	subi	r25, 0xFF	; 255
    4fe0:	89 23       	and	r24, r25
    4fe2:	82 83       	std	Z+2, r24	; 0x02
    4fe4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4fe8:	0b c0       	rjmp	.+22     	; 0x5000 <__vector_55+0x6c>
    4fea:	e1 e3       	ldi	r30, 0x31	; 49
    4fec:	f1 e0       	ldi	r31, 0x01	; 1
    4fee:	80 81       	ld	r24, Z
    4ff0:	8f 7d       	andi	r24, 0xDF	; 223
    4ff2:	80 83       	st	Z, r24
    4ff4:	05 c0       	rjmp	.+10     	; 0x5000 <__vector_55+0x6c>
    4ff6:	e1 e3       	ldi	r30, 0x31	; 49
    4ff8:	f1 e0       	ldi	r31, 0x01	; 1
    4ffa:	80 81       	ld	r24, Z
    4ffc:	8f 7d       	andi	r24, 0xDF	; 223
    4ffe:	80 83       	st	Z, r24
    5000:	ff 91       	pop	r31
    5002:	ef 91       	pop	r30
    5004:	bf 91       	pop	r27
    5006:	af 91       	pop	r26
    5008:	9f 91       	pop	r25
    500a:	8f 91       	pop	r24
    500c:	2f 91       	pop	r18
    500e:	0f 90       	pop	r0
    5010:	0b be       	out	0x3b, r0	; 59
    5012:	0f 90       	pop	r0
    5014:	0f be       	out	0x3f, r0	; 63
    5016:	0f 90       	pop	r0
    5018:	1f 90       	pop	r1
    501a:	18 95       	reti

0000501c <usart_getchar>:
    501c:	cf 93       	push	r28
    501e:	df 93       	push	r29
    5020:	1f 92       	push	r1
    5022:	cd b7       	in	r28, 0x3d	; 61
    5024:	de b7       	in	r29, 0x3e	; 62
    5026:	be 01       	movw	r22, r28
    5028:	6f 5f       	subi	r22, 0xFF	; 255
    502a:	7f 4f       	sbci	r23, 0xFF	; 255
    502c:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <_com_serial_instance>
    5030:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <_com_serial_instance+0x1>
    5034:	7b dd       	rcall	.-1290   	; 0x4b2c <serial_getByte>
    5036:	81 11       	cpse	r24, r1
    5038:	f6 cf       	rjmp	.-20     	; 0x5026 <usart_getchar+0xa>
    503a:	89 81       	ldd	r24, Y+1	; 0x01
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	0f 90       	pop	r0
    5040:	df 91       	pop	r29
    5042:	cf 91       	pop	r28
    5044:	08 95       	ret

00005046 <usart_putchar>:
    5046:	68 2f       	mov	r22, r24
    5048:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <_com_serial_instance>
    504c:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <_com_serial_instance+0x1>
    5050:	ed dc       	rcall	.-1574   	; 0x4a2c <serial_sendByte>
    5052:	80 e0       	ldi	r24, 0x00	; 0
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	08 95       	ret

00005058 <stdio_initialise>:
    5058:	8f 92       	push	r8
    505a:	9f 92       	push	r9
    505c:	af 92       	push	r10
    505e:	cf 92       	push	r12
    5060:	ef 92       	push	r14
    5062:	0f 93       	push	r16
    5064:	81 2c       	mov	r8, r1
    5066:	91 2c       	mov	r9, r1
    5068:	68 94       	set
    506a:	aa 24       	eor	r10, r10
    506c:	a7 f8       	bld	r10, 7
    506e:	68 94       	set
    5070:	cc 24       	eor	r12, r12
    5072:	c7 f8       	bld	r12, 7
    5074:	e1 2c       	mov	r14, r1
    5076:	00 e0       	ldi	r16, 0x00	; 0
    5078:	23 e0       	ldi	r18, 0x03	; 3
    507a:	40 e0       	ldi	r20, 0x00	; 0
    507c:	51 ee       	ldi	r21, 0xE1	; 225
    507e:	60 e0       	ldi	r22, 0x00	; 0
    5080:	70 e0       	ldi	r23, 0x00	; 0
    5082:	2e dc       	rcall	.-1956   	; 0x48e0 <serial_create>
    5084:	90 93 42 1a 	sts	0x1A42, r25	; 0x801a42 <_com_serial_instance+0x1>
    5088:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <_com_serial_instance>
    508c:	e8 e7       	ldi	r30, 0x78	; 120
    508e:	fa e1       	ldi	r31, 0x1A	; 26
    5090:	83 e1       	ldi	r24, 0x13	; 19
    5092:	92 e0       	ldi	r25, 0x02	; 2
    5094:	91 83       	std	Z+1, r25	; 0x01
    5096:	80 83       	st	Z, r24
    5098:	93 83       	std	Z+3, r25	; 0x03
    509a:	82 83       	std	Z+2, r24	; 0x02
    509c:	0f 91       	pop	r16
    509e:	ef 90       	pop	r14
    50a0:	cf 90       	pop	r12
    50a2:	af 90       	pop	r10
    50a4:	9f 90       	pop	r9
    50a6:	8f 90       	pop	r8
    50a8:	08 95       	ret

000050aa <_turn_off>:
    50aa:	90 e0       	ldi	r25, 0x00	; 0
    50ac:	fc 01       	movw	r30, r24
    50ae:	ee 0f       	add	r30, r30
    50b0:	ff 1f       	adc	r31, r31
    50b2:	e8 0f       	add	r30, r24
    50b4:	f9 1f       	adc	r31, r25
    50b6:	ee 0f       	add	r30, r30
    50b8:	ff 1f       	adc	r31, r31
    50ba:	ed 5b       	subi	r30, 0xBD	; 189
    50bc:	f5 4e       	sbci	r31, 0xE5	; 229
    50be:	23 81       	ldd	r18, Z+3	; 0x03
    50c0:	21 11       	cpse	r18, r1
    50c2:	1f c0       	rjmp	.+62     	; 0x5102 <_turn_off+0x58>
    50c4:	9c 01       	movw	r18, r24
    50c6:	22 0f       	add	r18, r18
    50c8:	33 1f       	adc	r19, r19
    50ca:	f9 01       	movw	r30, r18
    50cc:	e8 0f       	add	r30, r24
    50ce:	f9 1f       	adc	r31, r25
    50d0:	ee 0f       	add	r30, r30
    50d2:	ff 1f       	adc	r31, r31
    50d4:	ed 5b       	subi	r30, 0xBD	; 189
    50d6:	f5 4e       	sbci	r31, 0xE5	; 229
    50d8:	a0 81       	ld	r26, Z
    50da:	b1 81       	ldd	r27, Z+1	; 0x01
    50dc:	4c 91       	ld	r20, X
    50de:	f9 01       	movw	r30, r18
    50e0:	e8 0f       	add	r30, r24
    50e2:	f9 1f       	adc	r31, r25
    50e4:	ee 0f       	add	r30, r30
    50e6:	ff 1f       	adc	r31, r31
    50e8:	ed 5b       	subi	r30, 0xBD	; 189
    50ea:	f5 4e       	sbci	r31, 0xE5	; 229
    50ec:	81 e0       	ldi	r24, 0x01	; 1
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	02 80       	ldd	r0, Z+2	; 0x02
    50f2:	02 c0       	rjmp	.+4      	; 0x50f8 <_turn_off+0x4e>
    50f4:	88 0f       	add	r24, r24
    50f6:	99 1f       	adc	r25, r25
    50f8:	0a 94       	dec	r0
    50fa:	e2 f7       	brpl	.-8      	; 0x50f4 <_turn_off+0x4a>
    50fc:	84 2b       	or	r24, r20
    50fe:	8c 93       	st	X, r24
    5100:	08 95       	ret
    5102:	fc 01       	movw	r30, r24
    5104:	ee 0f       	add	r30, r30
    5106:	ff 1f       	adc	r31, r31
    5108:	df 01       	movw	r26, r30
    510a:	a8 0f       	add	r26, r24
    510c:	b9 1f       	adc	r27, r25
    510e:	aa 0f       	add	r26, r26
    5110:	bb 1f       	adc	r27, r27
    5112:	ad 5b       	subi	r26, 0xBD	; 189
    5114:	b5 4e       	sbci	r27, 0xE5	; 229
    5116:	0d 90       	ld	r0, X+
    5118:	bc 91       	ld	r27, X
    511a:	a0 2d       	mov	r26, r0
    511c:	2c 91       	ld	r18, X
    511e:	e8 0f       	add	r30, r24
    5120:	f9 1f       	adc	r31, r25
    5122:	ee 0f       	add	r30, r30
    5124:	ff 1f       	adc	r31, r31
    5126:	ed 5b       	subi	r30, 0xBD	; 189
    5128:	f5 4e       	sbci	r31, 0xE5	; 229
    512a:	81 e0       	ldi	r24, 0x01	; 1
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	02 80       	ldd	r0, Z+2	; 0x02
    5130:	02 c0       	rjmp	.+4      	; 0x5136 <_turn_off+0x8c>
    5132:	88 0f       	add	r24, r24
    5134:	99 1f       	adc	r25, r25
    5136:	0a 94       	dec	r0
    5138:	e2 f7       	brpl	.-8      	; 0x5132 <_turn_off+0x88>
    513a:	80 95       	com	r24
    513c:	82 23       	and	r24, r18
    513e:	8c 93       	st	X, r24
    5140:	08 95       	ret

00005142 <_turn_on>:
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	fc 01       	movw	r30, r24
    5146:	ee 0f       	add	r30, r30
    5148:	ff 1f       	adc	r31, r31
    514a:	e8 0f       	add	r30, r24
    514c:	f9 1f       	adc	r31, r25
    514e:	ee 0f       	add	r30, r30
    5150:	ff 1f       	adc	r31, r31
    5152:	ed 5b       	subi	r30, 0xBD	; 189
    5154:	f5 4e       	sbci	r31, 0xE5	; 229
    5156:	23 81       	ldd	r18, Z+3	; 0x03
    5158:	21 11       	cpse	r18, r1
    515a:	20 c0       	rjmp	.+64     	; 0x519c <_turn_on+0x5a>
    515c:	9c 01       	movw	r18, r24
    515e:	22 0f       	add	r18, r18
    5160:	33 1f       	adc	r19, r19
    5162:	f9 01       	movw	r30, r18
    5164:	e8 0f       	add	r30, r24
    5166:	f9 1f       	adc	r31, r25
    5168:	ee 0f       	add	r30, r30
    516a:	ff 1f       	adc	r31, r31
    516c:	ed 5b       	subi	r30, 0xBD	; 189
    516e:	f5 4e       	sbci	r31, 0xE5	; 229
    5170:	a0 81       	ld	r26, Z
    5172:	b1 81       	ldd	r27, Z+1	; 0x01
    5174:	4c 91       	ld	r20, X
    5176:	f9 01       	movw	r30, r18
    5178:	e8 0f       	add	r30, r24
    517a:	f9 1f       	adc	r31, r25
    517c:	ee 0f       	add	r30, r30
    517e:	ff 1f       	adc	r31, r31
    5180:	ed 5b       	subi	r30, 0xBD	; 189
    5182:	f5 4e       	sbci	r31, 0xE5	; 229
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	02 80       	ldd	r0, Z+2	; 0x02
    518a:	02 c0       	rjmp	.+4      	; 0x5190 <_turn_on+0x4e>
    518c:	88 0f       	add	r24, r24
    518e:	99 1f       	adc	r25, r25
    5190:	0a 94       	dec	r0
    5192:	e2 f7       	brpl	.-8      	; 0x518c <_turn_on+0x4a>
    5194:	80 95       	com	r24
    5196:	84 23       	and	r24, r20
    5198:	8c 93       	st	X, r24
    519a:	08 95       	ret
    519c:	fc 01       	movw	r30, r24
    519e:	ee 0f       	add	r30, r30
    51a0:	ff 1f       	adc	r31, r31
    51a2:	df 01       	movw	r26, r30
    51a4:	a8 0f       	add	r26, r24
    51a6:	b9 1f       	adc	r27, r25
    51a8:	aa 0f       	add	r26, r26
    51aa:	bb 1f       	adc	r27, r27
    51ac:	ad 5b       	subi	r26, 0xBD	; 189
    51ae:	b5 4e       	sbci	r27, 0xE5	; 229
    51b0:	0d 90       	ld	r0, X+
    51b2:	bc 91       	ld	r27, X
    51b4:	a0 2d       	mov	r26, r0
    51b6:	2c 91       	ld	r18, X
    51b8:	e8 0f       	add	r30, r24
    51ba:	f9 1f       	adc	r31, r25
    51bc:	ee 0f       	add	r30, r30
    51be:	ff 1f       	adc	r31, r31
    51c0:	ed 5b       	subi	r30, 0xBD	; 189
    51c2:	f5 4e       	sbci	r31, 0xE5	; 229
    51c4:	81 e0       	ldi	r24, 0x01	; 1
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    51c8:	02 80       	ldd	r0, Z+2	; 0x02
    51ca:	02 c0       	rjmp	.+4      	; 0x51d0 <_turn_on+0x8e>
    51cc:	88 0f       	add	r24, r24
    51ce:	99 1f       	adc	r25, r25
    51d0:	0a 94       	dec	r0
    51d2:	e2 f7       	brpl	.-8      	; 0x51cc <_turn_on+0x8a>
    51d4:	82 2b       	or	r24, r18
    51d6:	8c 93       	st	X, r24
    51d8:	08 95       	ret

000051da <_hal_led_task>:
    51da:	cc 24       	eor	r12, r12
    51dc:	c3 94       	inc	r12
    51de:	d1 2c       	mov	r13, r1
    51e0:	68 94       	set
    51e2:	bb 24       	eor	r11, r11
    51e4:	b2 f8       	bld	r11, 2
    51e6:	c3 e4       	ldi	r28, 0x43	; 67
    51e8:	da e1       	ldi	r29, 0x1A	; 26
    51ea:	10 e0       	ldi	r17, 0x00	; 0
    51ec:	8c 81       	ldd	r24, Y+4	; 0x04
    51ee:	81 30       	cpi	r24, 0x01	; 1
    51f0:	81 f0       	breq	.+32     	; 0x5212 <_hal_led_task+0x38>
    51f2:	18 f1       	brcs	.+70     	; 0x523a <_hal_led_task+0x60>
    51f4:	82 30       	cpi	r24, 0x02	; 2
    51f6:	61 f5       	brne	.+88     	; 0x5250 <_hal_led_task+0x76>
    51f8:	e8 81       	ld	r30, Y
    51fa:	f9 81       	ldd	r31, Y+1	; 0x01
    51fc:	20 81       	ld	r18, Z
    51fe:	c6 01       	movw	r24, r12
    5200:	0a 80       	ldd	r0, Y+2	; 0x02
    5202:	02 c0       	rjmp	.+4      	; 0x5208 <_hal_led_task+0x2e>
    5204:	88 0f       	add	r24, r24
    5206:	99 1f       	adc	r25, r25
    5208:	0a 94       	dec	r0
    520a:	e2 f7       	brpl	.-8      	; 0x5204 <_hal_led_task+0x2a>
    520c:	82 27       	eor	r24, r18
    520e:	80 83       	st	Z, r24
    5210:	1f c0       	rjmp	.+62     	; 0x5250 <_hal_led_task+0x76>
    5212:	8d 81       	ldd	r24, Y+5	; 0x05
    5214:	8f 5f       	subi	r24, 0xFF	; 255
    5216:	86 30       	cpi	r24, 0x06	; 6
    5218:	10 f4       	brcc	.+4      	; 0x521e <_hal_led_task+0x44>
    521a:	8d 83       	std	Y+5, r24	; 0x05
    521c:	19 c0       	rjmp	.+50     	; 0x5250 <_hal_led_task+0x76>
    521e:	1d 82       	std	Y+5, r1	; 0x05
    5220:	e8 81       	ld	r30, Y
    5222:	f9 81       	ldd	r31, Y+1	; 0x01
    5224:	20 81       	ld	r18, Z
    5226:	c6 01       	movw	r24, r12
    5228:	0a 80       	ldd	r0, Y+2	; 0x02
    522a:	02 c0       	rjmp	.+4      	; 0x5230 <_hal_led_task+0x56>
    522c:	88 0f       	add	r24, r24
    522e:	99 1f       	adc	r25, r25
    5230:	0a 94       	dec	r0
    5232:	e2 f7       	brpl	.-8      	; 0x522c <_hal_led_task+0x52>
    5234:	82 27       	eor	r24, r18
    5236:	80 83       	st	Z, r24
    5238:	0b c0       	rjmp	.+22     	; 0x5250 <_hal_led_task+0x76>
    523a:	0d 81       	ldd	r16, Y+5	; 0x05
    523c:	00 23       	and	r16, r16
    523e:	29 f0       	breq	.+10     	; 0x524a <_hal_led_task+0x70>
    5240:	81 2f       	mov	r24, r17
    5242:	7f df       	rcall	.-258    	; 0x5142 <_turn_on>
    5244:	01 50       	subi	r16, 0x01	; 1
    5246:	0d 83       	std	Y+5, r16	; 0x05
    5248:	03 c0       	rjmp	.+6      	; 0x5250 <_hal_led_task+0x76>
    524a:	bc 82       	std	Y+4, r11	; 0x04
    524c:	81 2f       	mov	r24, r17
    524e:	2d df       	rcall	.-422    	; 0x50aa <_turn_off>
    5250:	1f 5f       	subi	r17, 0xFF	; 255
    5252:	26 96       	adiw	r28, 0x06	; 6
    5254:	14 30       	cpi	r17, 0x04	; 4
    5256:	51 f6       	brne	.-108    	; 0x51ec <_hal_led_task+0x12>
    5258:	6c e0       	ldi	r22, 0x0C	; 12
    525a:	70 e0       	ldi	r23, 0x00	; 0
    525c:	80 e0       	ldi	r24, 0x00	; 0
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vTaskDelay>
    5264:	c0 cf       	rjmp	.-128    	; 0x51e6 <_hal_led_task+0xc>

00005266 <status_leds_initialise>:
    5266:	ef 92       	push	r14
    5268:	ff 92       	push	r15
    526a:	0f 93       	push	r16
    526c:	1f 93       	push	r17
    526e:	cf 93       	push	r28
    5270:	df 93       	push	r29
    5272:	08 2f       	mov	r16, r24
    5274:	80 e4       	ldi	r24, 0x40	; 64
    5276:	87 b9       	out	0x07, r24	; 7
    5278:	c3 e4       	ldi	r28, 0x43	; 67
    527a:	da e1       	ldi	r29, 0x1A	; 26
    527c:	0f 2e       	mov	r0, r31
    527e:	f8 e2       	ldi	r31, 0x28	; 40
    5280:	ef 2e       	mov	r14, r31
    5282:	f1 2c       	mov	r15, r1
    5284:	f0 2d       	mov	r31, r0
    5286:	f9 82       	std	Y+1, r15	; 0x01
    5288:	e8 82       	st	Y, r14
    528a:	86 e0       	ldi	r24, 0x06	; 6
    528c:	8a 83       	std	Y+2, r24	; 0x02
    528e:	1b 82       	std	Y+3, r1	; 0x03
    5290:	14 e0       	ldi	r17, 0x04	; 4
    5292:	1c 83       	std	Y+4, r17	; 0x04
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	09 df       	rcall	.-494    	; 0x50aa <_turn_off>
    5298:	80 e8       	ldi	r24, 0x80	; 128
    529a:	87 b9       	out	0x07, r24	; 7
    529c:	ff 82       	std	Y+7, r15	; 0x07
    529e:	ee 82       	std	Y+6, r14	; 0x06
    52a0:	87 e0       	ldi	r24, 0x07	; 7
    52a2:	88 87       	std	Y+8, r24	; 0x08
    52a4:	19 86       	std	Y+9, r1	; 0x09
    52a6:	1a 87       	std	Y+10, r17	; 0x0a
    52a8:	81 e0       	ldi	r24, 0x01	; 1
    52aa:	ff de       	rcall	.-514    	; 0x50aa <_turn_off>
    52ac:	80 e2       	ldi	r24, 0x20	; 32
    52ae:	83 bb       	out	0x13, r24	; 19
    52b0:	84 e3       	ldi	r24, 0x34	; 52
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	9d 87       	std	Y+13, r25	; 0x0d
    52b6:	8c 87       	std	Y+12, r24	; 0x0c
    52b8:	85 e0       	ldi	r24, 0x05	; 5
    52ba:	8e 87       	std	Y+14, r24	; 0x0e
    52bc:	1f 86       	std	Y+15, r1	; 0x0f
    52be:	18 8b       	std	Y+16, r17	; 0x10
    52c0:	82 e0       	ldi	r24, 0x02	; 2
    52c2:	f3 de       	rcall	.-538    	; 0x50aa <_turn_off>
    52c4:	80 e1       	ldi	r24, 0x10	; 16
    52c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    52ca:	82 e0       	ldi	r24, 0x02	; 2
    52cc:	91 e0       	ldi	r25, 0x01	; 1
    52ce:	9b 8b       	std	Y+19, r25	; 0x13
    52d0:	8a 8b       	std	Y+18, r24	; 0x12
    52d2:	1c 8b       	std	Y+20, r17	; 0x14
    52d4:	1d 8a       	std	Y+21, r1	; 0x15
    52d6:	1e 8b       	std	Y+22, r17	; 0x16
    52d8:	83 e0       	ldi	r24, 0x03	; 3
    52da:	e7 de       	rcall	.-562    	; 0x50aa <_turn_off>
    52dc:	e1 2c       	mov	r14, r1
    52de:	f1 2c       	mov	r15, r1
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	30 e0       	ldi	r19, 0x00	; 0
    52e4:	40 ec       	ldi	r20, 0xC0	; 192
    52e6:	50 e0       	ldi	r21, 0x00	; 0
    52e8:	6e e6       	ldi	r22, 0x6E	; 110
    52ea:	7a e0       	ldi	r23, 0x0A	; 10
    52ec:	8d ee       	ldi	r24, 0xED	; 237
    52ee:	98 e2       	ldi	r25, 0x28	; 40
    52f0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xTaskCreate>
    52f4:	df 91       	pop	r29
    52f6:	cf 91       	pop	r28
    52f8:	1f 91       	pop	r17
    52fa:	0f 91       	pop	r16
    52fc:	ff 90       	pop	r15
    52fe:	ef 90       	pop	r14
    5300:	08 95       	ret

00005302 <status_leds_slowBlink>:
    5302:	cf 93       	push	r28
    5304:	df 93       	push	r29
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	fc 01       	movw	r30, r24
    530a:	ee 0f       	add	r30, r30
    530c:	ff 1f       	adc	r31, r31
    530e:	df 01       	movw	r26, r30
    5310:	a8 0f       	add	r26, r24
    5312:	b9 1f       	adc	r27, r25
    5314:	aa 0f       	add	r26, r26
    5316:	bb 1f       	adc	r27, r27
    5318:	ad 5b       	subi	r26, 0xBD	; 189
    531a:	b5 4e       	sbci	r27, 0xE5	; 229
    531c:	cd 91       	ld	r28, X+
    531e:	dc 91       	ld	r29, X
    5320:	11 97       	sbiw	r26, 0x01	; 1
    5322:	48 81       	ld	r20, Y
    5324:	21 e0       	ldi	r18, 0x01	; 1
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	12 96       	adiw	r26, 0x02	; 2
    532a:	0c 90       	ld	r0, X
    532c:	12 97       	sbiw	r26, 0x02	; 2
    532e:	02 c0       	rjmp	.+4      	; 0x5334 <status_leds_slowBlink+0x32>
    5330:	22 0f       	add	r18, r18
    5332:	33 1f       	adc	r19, r19
    5334:	0a 94       	dec	r0
    5336:	e2 f7       	brpl	.-8      	; 0x5330 <status_leds_slowBlink+0x2e>
    5338:	24 27       	eor	r18, r20
    533a:	28 83       	st	Y, r18
    533c:	fd 01       	movw	r30, r26
    533e:	81 e0       	ldi	r24, 0x01	; 1
    5340:	84 83       	std	Z+4, r24	; 0x04
    5342:	df 91       	pop	r29
    5344:	cf 91       	pop	r28
    5346:	08 95       	ret

00005348 <status_leds_fastBlink>:
    5348:	cf 93       	push	r28
    534a:	df 93       	push	r29
    534c:	90 e0       	ldi	r25, 0x00	; 0
    534e:	fc 01       	movw	r30, r24
    5350:	ee 0f       	add	r30, r30
    5352:	ff 1f       	adc	r31, r31
    5354:	df 01       	movw	r26, r30
    5356:	a8 0f       	add	r26, r24
    5358:	b9 1f       	adc	r27, r25
    535a:	aa 0f       	add	r26, r26
    535c:	bb 1f       	adc	r27, r27
    535e:	ad 5b       	subi	r26, 0xBD	; 189
    5360:	b5 4e       	sbci	r27, 0xE5	; 229
    5362:	cd 91       	ld	r28, X+
    5364:	dc 91       	ld	r29, X
    5366:	11 97       	sbiw	r26, 0x01	; 1
    5368:	48 81       	ld	r20, Y
    536a:	21 e0       	ldi	r18, 0x01	; 1
    536c:	30 e0       	ldi	r19, 0x00	; 0
    536e:	12 96       	adiw	r26, 0x02	; 2
    5370:	0c 90       	ld	r0, X
    5372:	12 97       	sbiw	r26, 0x02	; 2
    5374:	02 c0       	rjmp	.+4      	; 0x537a <status_leds_fastBlink+0x32>
    5376:	22 0f       	add	r18, r18
    5378:	33 1f       	adc	r19, r19
    537a:	0a 94       	dec	r0
    537c:	e2 f7       	brpl	.-8      	; 0x5376 <status_leds_fastBlink+0x2e>
    537e:	24 27       	eor	r18, r20
    5380:	28 83       	st	Y, r18
    5382:	fd 01       	movw	r30, r26
    5384:	82 e0       	ldi	r24, 0x02	; 2
    5386:	84 83       	std	Z+4, r24	; 0x04
    5388:	df 91       	pop	r29
    538a:	cf 91       	pop	r28
    538c:	08 95       	ret

0000538e <status_leds_ledOn>:
    538e:	28 2f       	mov	r18, r24
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	f9 01       	movw	r30, r18
    5394:	ee 0f       	add	r30, r30
    5396:	ff 1f       	adc	r31, r31
    5398:	e2 0f       	add	r30, r18
    539a:	f3 1f       	adc	r31, r19
    539c:	ee 0f       	add	r30, r30
    539e:	ff 1f       	adc	r31, r31
    53a0:	ed 5b       	subi	r30, 0xBD	; 189
    53a2:	f5 4e       	sbci	r31, 0xE5	; 229
    53a4:	93 e0       	ldi	r25, 0x03	; 3
    53a6:	94 83       	std	Z+4, r25	; 0x04
    53a8:	cc ce       	rjmp	.-616    	; 0x5142 <_turn_on>
    53aa:	08 95       	ret

000053ac <status_leds_ledOff>:
    53ac:	28 2f       	mov	r18, r24
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	f9 01       	movw	r30, r18
    53b2:	ee 0f       	add	r30, r30
    53b4:	ff 1f       	adc	r31, r31
    53b6:	e2 0f       	add	r30, r18
    53b8:	f3 1f       	adc	r31, r19
    53ba:	ee 0f       	add	r30, r30
    53bc:	ff 1f       	adc	r31, r31
    53be:	ed 5b       	subi	r30, 0xBD	; 189
    53c0:	f5 4e       	sbci	r31, 0xE5	; 229
    53c2:	94 e0       	ldi	r25, 0x04	; 4
    53c4:	94 83       	std	Z+4, r25	; 0x04
    53c6:	71 ce       	rjmp	.-798    	; 0x50aa <_turn_off>
    53c8:	08 95       	ret

000053ca <status_leds_longPuls>:
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	fc 01       	movw	r30, r24
    53ce:	ee 0f       	add	r30, r30
    53d0:	ff 1f       	adc	r31, r31
    53d2:	df 01       	movw	r26, r30
    53d4:	a8 0f       	add	r26, r24
    53d6:	b9 1f       	adc	r27, r25
    53d8:	aa 0f       	add	r26, r26
    53da:	bb 1f       	adc	r27, r27
    53dc:	ad 5b       	subi	r26, 0xBD	; 189
    53de:	b5 4e       	sbci	r27, 0xE5	; 229
    53e0:	26 e0       	ldi	r18, 0x06	; 6
    53e2:	15 96       	adiw	r26, 0x05	; 5
    53e4:	2c 93       	st	X, r18
    53e6:	15 97       	sbiw	r26, 0x05	; 5
    53e8:	fd 01       	movw	r30, r26
    53ea:	14 82       	std	Z+4, r1	; 0x04
    53ec:	08 95       	ret

000053ee <status_leds_shortPuls>:
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	fc 01       	movw	r30, r24
    53f2:	ee 0f       	add	r30, r30
    53f4:	ff 1f       	adc	r31, r31
    53f6:	df 01       	movw	r26, r30
    53f8:	a8 0f       	add	r26, r24
    53fa:	b9 1f       	adc	r27, r25
    53fc:	aa 0f       	add	r26, r26
    53fe:	bb 1f       	adc	r27, r27
    5400:	ad 5b       	subi	r26, 0xBD	; 189
    5402:	b5 4e       	sbci	r27, 0xE5	; 229
    5404:	15 96       	adiw	r26, 0x05	; 5
    5406:	1c 92       	st	X, r1
    5408:	15 97       	sbiw	r26, 0x05	; 5
    540a:	fd 01       	movw	r30, r26
    540c:	14 82       	std	Z+4, r1	; 0x04
    540e:	08 95       	ret

00005410 <_initTwiInterface>:
    5410:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <_twiIsInitiated>
    5414:	81 11       	cpse	r24, r1
    5416:	0c c0       	rjmp	.+24     	; 0x5430 <_initTwiInterface+0x20>
    5418:	8c e0       	ldi	r24, 0x0C	; 12
    541a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    541e:	8f ef       	ldi	r24, 0xFF	; 255
    5420:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5424:	84 e0       	ldi	r24, 0x04	; 4
    5426:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    542a:	81 e0       	ldi	r24, 0x01	; 1
    542c:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <_twiIsInitiated>
    5430:	08 95       	ret

00005432 <twiCreate>:
    5432:	af 92       	push	r10
    5434:	bf 92       	push	r11
    5436:	cf 92       	push	r12
    5438:	df 92       	push	r13
    543a:	ef 92       	push	r14
    543c:	ff 92       	push	r15
    543e:	0f 93       	push	r16
    5440:	1f 93       	push	r17
    5442:	cf 93       	push	r28
    5444:	df 93       	push	r29
    5446:	a8 2e       	mov	r10, r24
    5448:	b6 2e       	mov	r11, r22
    544a:	69 01       	movw	r12, r18
    544c:	7a 01       	movw	r14, r20
    544e:	84 e0       	ldi	r24, 0x04	; 4
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	61 d7       	rcall	.+3778   	; 0x6316 <malloc>
    5454:	ec 01       	movw	r28, r24
    5456:	89 2b       	or	r24, r25
    5458:	61 f1       	breq	.+88     	; 0x54b2 <twiCreate+0x80>
    545a:	a8 82       	st	Y, r10
    545c:	81 e0       	ldi	r24, 0x01	; 1
    545e:	b8 12       	cpse	r11, r24
    5460:	12 c0       	rjmp	.+36     	; 0x5486 <twiCreate+0x54>
    5462:	c7 01       	movw	r24, r14
    5464:	b6 01       	movw	r22, r12
    5466:	20 ea       	ldi	r18, 0xA0	; 160
    5468:	36 e8       	ldi	r19, 0x86	; 134
    546a:	41 e0       	ldi	r20, 0x01	; 1
    546c:	50 e0       	ldi	r21, 0x00	; 0
    546e:	15 d7       	rcall	.+3626   	; 0x629a <__udivmodsi4>
    5470:	da 01       	movw	r26, r20
    5472:	c9 01       	movw	r24, r18
    5474:	40 97       	sbiw	r24, 0x10	; 16
    5476:	a1 09       	sbc	r26, r1
    5478:	b1 09       	sbc	r27, r1
    547a:	b6 95       	lsr	r27
    547c:	a7 95       	ror	r26
    547e:	97 95       	ror	r25
    5480:	87 95       	ror	r24
    5482:	89 83       	std	Y+1, r24	; 0x01
    5484:	11 c0       	rjmp	.+34     	; 0x54a8 <twiCreate+0x76>
    5486:	c7 01       	movw	r24, r14
    5488:	b6 01       	movw	r22, r12
    548a:	20 e8       	ldi	r18, 0x80	; 128
    548c:	3a e1       	ldi	r19, 0x1A	; 26
    548e:	46 e0       	ldi	r20, 0x06	; 6
    5490:	50 e0       	ldi	r21, 0x00	; 0
    5492:	03 d7       	rcall	.+3590   	; 0x629a <__udivmodsi4>
    5494:	da 01       	movw	r26, r20
    5496:	c9 01       	movw	r24, r18
    5498:	40 97       	sbiw	r24, 0x10	; 16
    549a:	a1 09       	sbc	r26, r1
    549c:	b1 09       	sbc	r27, r1
    549e:	b6 95       	lsr	r27
    54a0:	a7 95       	ror	r26
    54a2:	97 95       	ror	r25
    54a4:	87 95       	ror	r24
    54a6:	89 83       	std	Y+1, r24	; 0x01
    54a8:	1b 83       	std	Y+3, r17	; 0x03
    54aa:	0a 83       	std	Y+2, r16	; 0x02
    54ac:	8c 2f       	mov	r24, r28
    54ae:	9d 2f       	mov	r25, r29
    54b0:	02 c0       	rjmp	.+4      	; 0x54b6 <twiCreate+0x84>
    54b2:	80 e0       	ldi	r24, 0x00	; 0
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	df 91       	pop	r29
    54b8:	cf 91       	pop	r28
    54ba:	1f 91       	pop	r17
    54bc:	0f 91       	pop	r16
    54be:	ff 90       	pop	r15
    54c0:	ef 90       	pop	r14
    54c2:	df 90       	pop	r13
    54c4:	cf 90       	pop	r12
    54c6:	bf 90       	pop	r11
    54c8:	af 90       	pop	r10
    54ca:	08 95       	ret

000054cc <twiIsBusy>:
    54cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54d0:	81 70       	andi	r24, 0x01	; 1
    54d2:	08 95       	ret

000054d4 <twiTransmit>:
    54d4:	ff 92       	push	r15
    54d6:	0f 93       	push	r16
    54d8:	1f 93       	push	r17
    54da:	cf 93       	push	r28
    54dc:	df 93       	push	r29
    54de:	00 97       	sbiw	r24, 0x00	; 0
    54e0:	d1 f1       	breq	.+116    	; 0x5556 <twiTransmit+0x82>
    54e2:	4a 30       	cpi	r20, 0x0A	; 10
    54e4:	d0 f5       	brcc	.+116    	; 0x555a <twiTransmit+0x86>
    54e6:	f4 2e       	mov	r15, r20
    54e8:	8b 01       	movw	r16, r22
    54ea:	ec 01       	movw	r28, r24
    54ec:	ef df       	rcall	.-34     	; 0x54cc <twiIsBusy>
    54ee:	81 11       	cpse	r24, r1
    54f0:	36 c0       	rjmp	.+108    	; 0x555e <twiTransmit+0x8a>
    54f2:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <_twiCurrentHandler>
    54f6:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <_twiCurrentHandler+0x1>
    54fa:	c8 17       	cp	r28, r24
    54fc:	d9 07       	cpc	r29, r25
    54fe:	41 f0       	breq	.+16     	; 0x5510 <twiTransmit+0x3c>
    5500:	87 df       	rcall	.-242    	; 0x5410 <_initTwiInterface>
    5502:	89 81       	ldd	r24, Y+1	; 0x01
    5504:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5508:	d0 93 5d 1a 	sts	0x1A5D, r29	; 0x801a5d <_twiCurrentHandler+0x1>
    550c:	c0 93 5c 1a 	sts	0x1A5C, r28	; 0x801a5c <_twiCurrentHandler>
    5510:	81 e0       	ldi	r24, 0x01	; 1
    5512:	8f 0d       	add	r24, r15
    5514:	80 93 5e 1a 	sts	0x1A5E, r24	; 0x801a5e <_twiMessageLen>
    5518:	88 81       	ld	r24, Y
    551a:	88 0f       	add	r24, r24
    551c:	80 93 5f 1a 	sts	0x1A5F, r24	; 0x801a5f <_twiMessageBuffer>
    5520:	ff 20       	and	r15, r15
    5522:	89 f0       	breq	.+34     	; 0x5546 <twiTransmit+0x72>
    5524:	f8 01       	movw	r30, r16
    5526:	a0 e6       	ldi	r26, 0x60	; 96
    5528:	ba e1       	ldi	r27, 0x1A	; 26
    552a:	4f ef       	ldi	r20, 0xFF	; 255
    552c:	4f 0d       	add	r20, r15
    552e:	64 2f       	mov	r22, r20
    5530:	70 e0       	ldi	r23, 0x00	; 0
    5532:	cb 01       	movw	r24, r22
    5534:	01 96       	adiw	r24, 0x01	; 1
    5536:	b8 01       	movw	r22, r16
    5538:	68 0f       	add	r22, r24
    553a:	79 1f       	adc	r23, r25
    553c:	81 91       	ld	r24, Z+
    553e:	8d 93       	st	X+, r24
    5540:	e6 17       	cp	r30, r22
    5542:	f7 07       	cpc	r31, r23
    5544:	d9 f7       	brne	.-10     	; 0x553c <twiTransmit+0x68>
    5546:	88 ef       	ldi	r24, 0xF8	; 248
    5548:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    554c:	85 ea       	ldi	r24, 0xA5	; 165
    554e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5552:	84 e0       	ldi	r24, 0x04	; 4
    5554:	05 c0       	rjmp	.+10     	; 0x5560 <twiTransmit+0x8c>
    5556:	86 e0       	ldi	r24, 0x06	; 6
    5558:	03 c0       	rjmp	.+6      	; 0x5560 <twiTransmit+0x8c>
    555a:	87 e0       	ldi	r24, 0x07	; 7
    555c:	01 c0       	rjmp	.+2      	; 0x5560 <twiTransmit+0x8c>
    555e:	82 e0       	ldi	r24, 0x02	; 2
    5560:	df 91       	pop	r29
    5562:	cf 91       	pop	r28
    5564:	1f 91       	pop	r17
    5566:	0f 91       	pop	r16
    5568:	ff 90       	pop	r15
    556a:	08 95       	ret

0000556c <twiReceive>:
    556c:	1f 93       	push	r17
    556e:	cf 93       	push	r28
    5570:	df 93       	push	r29
    5572:	00 97       	sbiw	r24, 0x00	; 0
    5574:	29 f1       	breq	.+74     	; 0x55c0 <twiReceive+0x54>
    5576:	6b 30       	cpi	r22, 0x0B	; 11
    5578:	28 f5       	brcc	.+74     	; 0x55c4 <twiReceive+0x58>
    557a:	16 2f       	mov	r17, r22
    557c:	ec 01       	movw	r28, r24
    557e:	a6 df       	rcall	.-180    	; 0x54cc <twiIsBusy>
    5580:	81 11       	cpse	r24, r1
    5582:	22 c0       	rjmp	.+68     	; 0x55c8 <twiReceive+0x5c>
    5584:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <_twiCurrentHandler>
    5588:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <_twiCurrentHandler+0x1>
    558c:	c8 17       	cp	r28, r24
    558e:	d9 07       	cpc	r29, r25
    5590:	41 f0       	breq	.+16     	; 0x55a2 <twiReceive+0x36>
    5592:	3e df       	rcall	.-388    	; 0x5410 <_initTwiInterface>
    5594:	89 81       	ldd	r24, Y+1	; 0x01
    5596:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    559a:	d0 93 5d 1a 	sts	0x1A5D, r29	; 0x801a5d <_twiCurrentHandler+0x1>
    559e:	c0 93 5c 1a 	sts	0x1A5C, r28	; 0x801a5c <_twiCurrentHandler>
    55a2:	10 93 5e 1a 	sts	0x1A5E, r17	; 0x801a5e <_twiMessageLen>
    55a6:	88 81       	ld	r24, Y
    55a8:	88 0f       	add	r24, r24
    55aa:	81 60       	ori	r24, 0x01	; 1
    55ac:	80 93 5f 1a 	sts	0x1A5F, r24	; 0x801a5f <_twiMessageBuffer>
    55b0:	88 ef       	ldi	r24, 0xF8	; 248
    55b2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    55b6:	85 ea       	ldi	r24, 0xA5	; 165
    55b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55bc:	85 e0       	ldi	r24, 0x05	; 5
    55be:	05 c0       	rjmp	.+10     	; 0x55ca <twiReceive+0x5e>
    55c0:	86 e0       	ldi	r24, 0x06	; 6
    55c2:	03 c0       	rjmp	.+6      	; 0x55ca <twiReceive+0x5e>
    55c4:	87 e0       	ldi	r24, 0x07	; 7
    55c6:	01 c0       	rjmp	.+2      	; 0x55ca <twiReceive+0x5e>
    55c8:	82 e0       	ldi	r24, 0x02	; 2
    55ca:	df 91       	pop	r29
    55cc:	cf 91       	pop	r28
    55ce:	1f 91       	pop	r17
    55d0:	08 95       	ret

000055d2 <__vector_39>:
    55d2:	1f 92       	push	r1
    55d4:	0f 92       	push	r0
    55d6:	0f b6       	in	r0, 0x3f	; 63
    55d8:	0f 92       	push	r0
    55da:	11 24       	eor	r1, r1
    55dc:	0b b6       	in	r0, 0x3b	; 59
    55de:	0f 92       	push	r0
    55e0:	2f 93       	push	r18
    55e2:	3f 93       	push	r19
    55e4:	4f 93       	push	r20
    55e6:	5f 93       	push	r21
    55e8:	6f 93       	push	r22
    55ea:	7f 93       	push	r23
    55ec:	8f 93       	push	r24
    55ee:	9f 93       	push	r25
    55f0:	af 93       	push	r26
    55f2:	bf 93       	push	r27
    55f4:	ef 93       	push	r30
    55f6:	ff 93       	push	r31
    55f8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    55fc:	8e 2f       	mov	r24, r30
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	fc 01       	movw	r30, r24
    5602:	38 97       	sbiw	r30, 0x08	; 8
    5604:	e1 35       	cpi	r30, 0x51	; 81
    5606:	f1 05       	cpc	r31, r1
    5608:	08 f0       	brcs	.+2      	; 0x560c <__vector_39+0x3a>
    560a:	75 c0       	rjmp	.+234    	; 0x56f6 <__vector_39+0x124>
    560c:	88 27       	eor	r24, r24
    560e:	e4 58       	subi	r30, 0x84	; 132
    5610:	ff 4f       	sbci	r31, 0xFF	; 255
    5612:	8f 4f       	sbci	r24, 0xFF	; 255
    5614:	64 c6       	rjmp	.+3272   	; 0x62de <__tablejump2__>
    5616:	10 92 5b 1a 	sts	0x1A5B, r1	; 0x801a5b <_index.1885>
    561a:	e0 91 5b 1a 	lds	r30, 0x1A5B	; 0x801a5b <_index.1885>
    561e:	80 91 5e 1a 	lds	r24, 0x1A5E	; 0x801a5e <_twiMessageLen>
    5622:	e8 17       	cp	r30, r24
    5624:	70 f4       	brcc	.+28     	; 0x5642 <__vector_39+0x70>
    5626:	81 e0       	ldi	r24, 0x01	; 1
    5628:	8e 0f       	add	r24, r30
    562a:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <_index.1885>
    562e:	f0 e0       	ldi	r31, 0x00	; 0
    5630:	e1 5a       	subi	r30, 0xA1	; 161
    5632:	f5 4e       	sbci	r31, 0xE5	; 229
    5634:	80 81       	ld	r24, Z
    5636:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    563a:	85 e8       	ldi	r24, 0x85	; 133
    563c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5640:	72 c0       	rjmp	.+228    	; 0x5726 <__vector_39+0x154>
    5642:	84 e9       	ldi	r24, 0x94	; 148
    5644:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5648:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <_twiCurrentHandler>
    564c:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <_twiCurrentHandler+0x1>
    5650:	dc 01       	movw	r26, r24
    5652:	12 96       	adiw	r26, 0x02	; 2
    5654:	ed 91       	ld	r30, X+
    5656:	fc 91       	ld	r31, X
    5658:	13 97       	sbiw	r26, 0x03	; 3
    565a:	30 97       	sbiw	r30, 0x00	; 0
    565c:	09 f4       	brne	.+2      	; 0x5660 <__vector_39+0x8e>
    565e:	63 c0       	rjmp	.+198    	; 0x5726 <__vector_39+0x154>
    5660:	20 e0       	ldi	r18, 0x00	; 0
    5662:	40 e0       	ldi	r20, 0x00	; 0
    5664:	50 e0       	ldi	r21, 0x00	; 0
    5666:	64 e0       	ldi	r22, 0x04	; 4
    5668:	19 95       	eicall
    566a:	5d c0       	rjmp	.+186    	; 0x5726 <__vector_39+0x154>
    566c:	e0 91 5b 1a 	lds	r30, 0x1A5B	; 0x801a5b <_index.1885>
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	8e 0f       	add	r24, r30
    5674:	80 93 5b 1a 	sts	0x1A5B, r24	; 0x801a5b <_index.1885>
    5678:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    567c:	f0 e0       	ldi	r31, 0x00	; 0
    567e:	e1 5a       	subi	r30, 0xA1	; 161
    5680:	f5 4e       	sbci	r31, 0xE5	; 229
    5682:	80 83       	st	Z, r24
    5684:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5688:	80 34       	cpi	r24, 0x40	; 64
    568a:	11 f4       	brne	.+4      	; 0x5690 <__vector_39+0xbe>
    568c:	10 92 5b 1a 	sts	0x1A5B, r1	; 0x801a5b <_index.1885>
    5690:	20 91 5b 1a 	lds	r18, 0x1A5B	; 0x801a5b <_index.1885>
    5694:	30 e0       	ldi	r19, 0x00	; 0
    5696:	80 91 5e 1a 	lds	r24, 0x1A5E	; 0x801a5e <_twiMessageLen>
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	01 97       	sbiw	r24, 0x01	; 1
    569e:	28 17       	cp	r18, r24
    56a0:	39 07       	cpc	r19, r25
    56a2:	24 f4       	brge	.+8      	; 0x56ac <__vector_39+0xda>
    56a4:	85 ec       	ldi	r24, 0xC5	; 197
    56a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56aa:	3d c0       	rjmp	.+122    	; 0x5726 <__vector_39+0x154>
    56ac:	85 e8       	ldi	r24, 0x85	; 133
    56ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56b2:	39 c0       	rjmp	.+114    	; 0x5726 <__vector_39+0x154>
    56b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    56b8:	e0 91 5b 1a 	lds	r30, 0x1A5B	; 0x801a5b <_index.1885>
    56bc:	f0 e0       	ldi	r31, 0x00	; 0
    56be:	e1 5a       	subi	r30, 0xA1	; 161
    56c0:	f5 4e       	sbci	r31, 0xE5	; 229
    56c2:	80 83       	st	Z, r24
    56c4:	84 e9       	ldi	r24, 0x94	; 148
    56c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56ca:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <_twiCurrentHandler>
    56ce:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <_twiCurrentHandler+0x1>
    56d2:	dc 01       	movw	r26, r24
    56d4:	12 96       	adiw	r26, 0x02	; 2
    56d6:	ed 91       	ld	r30, X+
    56d8:	fc 91       	ld	r31, X
    56da:	13 97       	sbiw	r26, 0x03	; 3
    56dc:	30 97       	sbiw	r30, 0x00	; 0
    56de:	19 f1       	breq	.+70     	; 0x5726 <__vector_39+0x154>
    56e0:	20 91 5e 1a 	lds	r18, 0x1A5E	; 0x801a5e <_twiMessageLen>
    56e4:	4f e5       	ldi	r20, 0x5F	; 95
    56e6:	5a e1       	ldi	r21, 0x1A	; 26
    56e8:	65 e0       	ldi	r22, 0x05	; 5
    56ea:	19 95       	eicall
    56ec:	1c c0       	rjmp	.+56     	; 0x5726 <__vector_39+0x154>
    56ee:	85 ea       	ldi	r24, 0xA5	; 165
    56f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56f4:	18 c0       	rjmp	.+48     	; 0x5726 <__vector_39+0x154>
    56f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    56fa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    56fe:	84 e0       	ldi	r24, 0x04	; 4
    5700:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5704:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <_twiCurrentHandler>
    5708:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <_twiCurrentHandler+0x1>
    570c:	dc 01       	movw	r26, r24
    570e:	12 96       	adiw	r26, 0x02	; 2
    5710:	ed 91       	ld	r30, X+
    5712:	fc 91       	ld	r31, X
    5714:	13 97       	sbiw	r26, 0x03	; 3
    5716:	30 97       	sbiw	r30, 0x00	; 0
    5718:	31 f0       	breq	.+12     	; 0x5726 <__vector_39+0x154>
    571a:	20 e0       	ldi	r18, 0x00	; 0
    571c:	40 e0       	ldi	r20, 0x00	; 0
    571e:	50 e0       	ldi	r21, 0x00	; 0
    5720:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5724:	19 95       	eicall
    5726:	ff 91       	pop	r31
    5728:	ef 91       	pop	r30
    572a:	bf 91       	pop	r27
    572c:	af 91       	pop	r26
    572e:	9f 91       	pop	r25
    5730:	8f 91       	pop	r24
    5732:	7f 91       	pop	r23
    5734:	6f 91       	pop	r22
    5736:	5f 91       	pop	r21
    5738:	4f 91       	pop	r20
    573a:	3f 91       	pop	r19
    573c:	2f 91       	pop	r18
    573e:	0f 90       	pop	r0
    5740:	0b be       	out	0x3b, r0	; 59
    5742:	0f 90       	pop	r0
    5744:	0f be       	out	0x3f, r0	; 63
    5746:	0f 90       	pop	r0
    5748:	1f 90       	pop	r1
    574a:	18 95       	reti

0000574c <fifo_init>:
    574c:	fc 01       	movw	r30, r24
    574e:	41 11       	cpse	r20, r1
    5750:	01 c0       	rjmp	.+2      	; 0x5754 <fifo_init+0x8>
    5752:	02 d7       	rcall	.+3588   	; 0x6558 <abort>
    5754:	84 2f       	mov	r24, r20
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	9c 01       	movw	r18, r24
    575a:	21 50       	subi	r18, 0x01	; 1
    575c:	31 09       	sbc	r19, r1
    575e:	82 23       	and	r24, r18
    5760:	93 23       	and	r25, r19
    5762:	89 2b       	or	r24, r25
    5764:	09 f0       	breq	.+2      	; 0x5768 <fifo_init+0x1c>
    5766:	f8 d6       	rcall	.+3568   	; 0x6558 <abort>
    5768:	41 38       	cpi	r20, 0x81	; 129
    576a:	08 f0       	brcs	.+2      	; 0x576e <fifo_init+0x22>
    576c:	f5 d6       	rcall	.+3562   	; 0x6558 <abort>
    576e:	12 82       	std	Z+2, r1	; 0x02
    5770:	13 82       	std	Z+3, r1	; 0x03
    5772:	44 83       	std	Z+4, r20	; 0x04
    5774:	44 0f       	add	r20, r20
    5776:	41 50       	subi	r20, 0x01	; 1
    5778:	45 83       	std	Z+5, r20	; 0x05
    577a:	71 83       	std	Z+1, r23	; 0x01
    577c:	60 83       	st	Z, r22
    577e:	80 e0       	ldi	r24, 0x00	; 0
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	08 95       	ret

00005784 <vfprintf>:
    5784:	2f 92       	push	r2
    5786:	3f 92       	push	r3
    5788:	4f 92       	push	r4
    578a:	5f 92       	push	r5
    578c:	6f 92       	push	r6
    578e:	7f 92       	push	r7
    5790:	8f 92       	push	r8
    5792:	9f 92       	push	r9
    5794:	af 92       	push	r10
    5796:	bf 92       	push	r11
    5798:	cf 92       	push	r12
    579a:	df 92       	push	r13
    579c:	ef 92       	push	r14
    579e:	ff 92       	push	r15
    57a0:	0f 93       	push	r16
    57a2:	1f 93       	push	r17
    57a4:	cf 93       	push	r28
    57a6:	df 93       	push	r29
    57a8:	cd b7       	in	r28, 0x3d	; 61
    57aa:	de b7       	in	r29, 0x3e	; 62
    57ac:	60 97       	sbiw	r28, 0x10	; 16
    57ae:	0f b6       	in	r0, 0x3f	; 63
    57b0:	f8 94       	cli
    57b2:	de bf       	out	0x3e, r29	; 62
    57b4:	0f be       	out	0x3f, r0	; 63
    57b6:	cd bf       	out	0x3d, r28	; 61
    57b8:	7c 01       	movw	r14, r24
    57ba:	1b 01       	movw	r2, r22
    57bc:	6a 01       	movw	r12, r20
    57be:	fc 01       	movw	r30, r24
    57c0:	17 82       	std	Z+7, r1	; 0x07
    57c2:	16 82       	std	Z+6, r1	; 0x06
    57c4:	83 81       	ldd	r24, Z+3	; 0x03
    57c6:	81 ff       	sbrs	r24, 1
    57c8:	2a c3       	rjmp	.+1620   	; 0x5e1e <vfprintf+0x69a>
    57ca:	9e 01       	movw	r18, r28
    57cc:	2f 5f       	subi	r18, 0xFF	; 255
    57ce:	3f 4f       	sbci	r19, 0xFF	; 255
    57d0:	39 01       	movw	r6, r18
    57d2:	f7 01       	movw	r30, r14
    57d4:	93 81       	ldd	r25, Z+3	; 0x03
    57d6:	f1 01       	movw	r30, r2
    57d8:	93 fd       	sbrc	r25, 3
    57da:	85 91       	lpm	r24, Z+
    57dc:	93 ff       	sbrs	r25, 3
    57de:	81 91       	ld	r24, Z+
    57e0:	1f 01       	movw	r2, r30
    57e2:	88 23       	and	r24, r24
    57e4:	09 f4       	brne	.+2      	; 0x57e8 <vfprintf+0x64>
    57e6:	17 c3       	rjmp	.+1582   	; 0x5e16 <vfprintf+0x692>
    57e8:	85 32       	cpi	r24, 0x25	; 37
    57ea:	39 f4       	brne	.+14     	; 0x57fa <vfprintf+0x76>
    57ec:	93 fd       	sbrc	r25, 3
    57ee:	85 91       	lpm	r24, Z+
    57f0:	93 ff       	sbrs	r25, 3
    57f2:	81 91       	ld	r24, Z+
    57f4:	1f 01       	movw	r2, r30
    57f6:	85 32       	cpi	r24, 0x25	; 37
    57f8:	31 f4       	brne	.+12     	; 0x5806 <vfprintf+0x82>
    57fa:	b7 01       	movw	r22, r14
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	fd d7       	rcall	.+4090   	; 0x67fa <fputc>
    5800:	56 01       	movw	r10, r12
    5802:	65 01       	movw	r12, r10
    5804:	e6 cf       	rjmp	.-52     	; 0x57d2 <vfprintf+0x4e>
    5806:	10 e0       	ldi	r17, 0x00	; 0
    5808:	51 2c       	mov	r5, r1
    580a:	91 2c       	mov	r9, r1
    580c:	ff e1       	ldi	r31, 0x1F	; 31
    580e:	f9 15       	cp	r31, r9
    5810:	d8 f0       	brcs	.+54     	; 0x5848 <vfprintf+0xc4>
    5812:	8b 32       	cpi	r24, 0x2B	; 43
    5814:	79 f0       	breq	.+30     	; 0x5834 <vfprintf+0xb0>
    5816:	38 f4       	brcc	.+14     	; 0x5826 <vfprintf+0xa2>
    5818:	80 32       	cpi	r24, 0x20	; 32
    581a:	79 f0       	breq	.+30     	; 0x583a <vfprintf+0xb6>
    581c:	83 32       	cpi	r24, 0x23	; 35
    581e:	a1 f4       	brne	.+40     	; 0x5848 <vfprintf+0xc4>
    5820:	f9 2d       	mov	r31, r9
    5822:	f0 61       	ori	r31, 0x10	; 16
    5824:	2e c0       	rjmp	.+92     	; 0x5882 <vfprintf+0xfe>
    5826:	8d 32       	cpi	r24, 0x2D	; 45
    5828:	61 f0       	breq	.+24     	; 0x5842 <vfprintf+0xbe>
    582a:	80 33       	cpi	r24, 0x30	; 48
    582c:	69 f4       	brne	.+26     	; 0x5848 <vfprintf+0xc4>
    582e:	29 2d       	mov	r18, r9
    5830:	21 60       	ori	r18, 0x01	; 1
    5832:	2d c0       	rjmp	.+90     	; 0x588e <vfprintf+0x10a>
    5834:	39 2d       	mov	r19, r9
    5836:	32 60       	ori	r19, 0x02	; 2
    5838:	93 2e       	mov	r9, r19
    583a:	89 2d       	mov	r24, r9
    583c:	84 60       	ori	r24, 0x04	; 4
    583e:	98 2e       	mov	r9, r24
    5840:	2a c0       	rjmp	.+84     	; 0x5896 <vfprintf+0x112>
    5842:	e9 2d       	mov	r30, r9
    5844:	e8 60       	ori	r30, 0x08	; 8
    5846:	15 c0       	rjmp	.+42     	; 0x5872 <vfprintf+0xee>
    5848:	97 fc       	sbrc	r9, 7
    584a:	2d c0       	rjmp	.+90     	; 0x58a6 <vfprintf+0x122>
    584c:	20 ed       	ldi	r18, 0xD0	; 208
    584e:	28 0f       	add	r18, r24
    5850:	2a 30       	cpi	r18, 0x0A	; 10
    5852:	88 f4       	brcc	.+34     	; 0x5876 <vfprintf+0xf2>
    5854:	96 fe       	sbrs	r9, 6
    5856:	06 c0       	rjmp	.+12     	; 0x5864 <vfprintf+0xe0>
    5858:	3a e0       	ldi	r19, 0x0A	; 10
    585a:	13 9f       	mul	r17, r19
    585c:	20 0d       	add	r18, r0
    585e:	11 24       	eor	r1, r1
    5860:	12 2f       	mov	r17, r18
    5862:	19 c0       	rjmp	.+50     	; 0x5896 <vfprintf+0x112>
    5864:	8a e0       	ldi	r24, 0x0A	; 10
    5866:	58 9e       	mul	r5, r24
    5868:	20 0d       	add	r18, r0
    586a:	11 24       	eor	r1, r1
    586c:	52 2e       	mov	r5, r18
    586e:	e9 2d       	mov	r30, r9
    5870:	e0 62       	ori	r30, 0x20	; 32
    5872:	9e 2e       	mov	r9, r30
    5874:	10 c0       	rjmp	.+32     	; 0x5896 <vfprintf+0x112>
    5876:	8e 32       	cpi	r24, 0x2E	; 46
    5878:	31 f4       	brne	.+12     	; 0x5886 <vfprintf+0x102>
    587a:	96 fc       	sbrc	r9, 6
    587c:	cc c2       	rjmp	.+1432   	; 0x5e16 <vfprintf+0x692>
    587e:	f9 2d       	mov	r31, r9
    5880:	f0 64       	ori	r31, 0x40	; 64
    5882:	9f 2e       	mov	r9, r31
    5884:	08 c0       	rjmp	.+16     	; 0x5896 <vfprintf+0x112>
    5886:	8c 36       	cpi	r24, 0x6C	; 108
    5888:	21 f4       	brne	.+8      	; 0x5892 <vfprintf+0x10e>
    588a:	29 2d       	mov	r18, r9
    588c:	20 68       	ori	r18, 0x80	; 128
    588e:	92 2e       	mov	r9, r18
    5890:	02 c0       	rjmp	.+4      	; 0x5896 <vfprintf+0x112>
    5892:	88 36       	cpi	r24, 0x68	; 104
    5894:	41 f4       	brne	.+16     	; 0x58a6 <vfprintf+0x122>
    5896:	f1 01       	movw	r30, r2
    5898:	93 fd       	sbrc	r25, 3
    589a:	85 91       	lpm	r24, Z+
    589c:	93 ff       	sbrs	r25, 3
    589e:	81 91       	ld	r24, Z+
    58a0:	1f 01       	movw	r2, r30
    58a2:	81 11       	cpse	r24, r1
    58a4:	b3 cf       	rjmp	.-154    	; 0x580c <vfprintf+0x88>
    58a6:	9b eb       	ldi	r25, 0xBB	; 187
    58a8:	98 0f       	add	r25, r24
    58aa:	93 30       	cpi	r25, 0x03	; 3
    58ac:	20 f4       	brcc	.+8      	; 0x58b6 <vfprintf+0x132>
    58ae:	99 2d       	mov	r25, r9
    58b0:	90 61       	ori	r25, 0x10	; 16
    58b2:	80 5e       	subi	r24, 0xE0	; 224
    58b4:	07 c0       	rjmp	.+14     	; 0x58c4 <vfprintf+0x140>
    58b6:	9b e9       	ldi	r25, 0x9B	; 155
    58b8:	98 0f       	add	r25, r24
    58ba:	93 30       	cpi	r25, 0x03	; 3
    58bc:	08 f0       	brcs	.+2      	; 0x58c0 <vfprintf+0x13c>
    58be:	59 c1       	rjmp	.+690    	; 0x5b72 <vfprintf+0x3ee>
    58c0:	99 2d       	mov	r25, r9
    58c2:	9f 7e       	andi	r25, 0xEF	; 239
    58c4:	96 ff       	sbrs	r25, 6
    58c6:	16 e0       	ldi	r17, 0x06	; 6
    58c8:	9f 73       	andi	r25, 0x3F	; 63
    58ca:	99 2e       	mov	r9, r25
    58cc:	85 36       	cpi	r24, 0x65	; 101
    58ce:	19 f4       	brne	.+6      	; 0x58d6 <vfprintf+0x152>
    58d0:	90 64       	ori	r25, 0x40	; 64
    58d2:	99 2e       	mov	r9, r25
    58d4:	08 c0       	rjmp	.+16     	; 0x58e6 <vfprintf+0x162>
    58d6:	86 36       	cpi	r24, 0x66	; 102
    58d8:	21 f4       	brne	.+8      	; 0x58e2 <vfprintf+0x15e>
    58da:	39 2f       	mov	r19, r25
    58dc:	30 68       	ori	r19, 0x80	; 128
    58de:	93 2e       	mov	r9, r19
    58e0:	02 c0       	rjmp	.+4      	; 0x58e6 <vfprintf+0x162>
    58e2:	11 11       	cpse	r17, r1
    58e4:	11 50       	subi	r17, 0x01	; 1
    58e6:	97 fe       	sbrs	r9, 7
    58e8:	07 c0       	rjmp	.+14     	; 0x58f8 <vfprintf+0x174>
    58ea:	1c 33       	cpi	r17, 0x3C	; 60
    58ec:	50 f4       	brcc	.+20     	; 0x5902 <vfprintf+0x17e>
    58ee:	44 24       	eor	r4, r4
    58f0:	43 94       	inc	r4
    58f2:	41 0e       	add	r4, r17
    58f4:	27 e0       	ldi	r18, 0x07	; 7
    58f6:	0b c0       	rjmp	.+22     	; 0x590e <vfprintf+0x18a>
    58f8:	18 30       	cpi	r17, 0x08	; 8
    58fa:	38 f0       	brcs	.+14     	; 0x590a <vfprintf+0x186>
    58fc:	27 e0       	ldi	r18, 0x07	; 7
    58fe:	17 e0       	ldi	r17, 0x07	; 7
    5900:	05 c0       	rjmp	.+10     	; 0x590c <vfprintf+0x188>
    5902:	27 e0       	ldi	r18, 0x07	; 7
    5904:	9c e3       	ldi	r25, 0x3C	; 60
    5906:	49 2e       	mov	r4, r25
    5908:	02 c0       	rjmp	.+4      	; 0x590e <vfprintf+0x18a>
    590a:	21 2f       	mov	r18, r17
    590c:	41 2c       	mov	r4, r1
    590e:	56 01       	movw	r10, r12
    5910:	84 e0       	ldi	r24, 0x04	; 4
    5912:	a8 0e       	add	r10, r24
    5914:	b1 1c       	adc	r11, r1
    5916:	f6 01       	movw	r30, r12
    5918:	60 81       	ld	r22, Z
    591a:	71 81       	ldd	r23, Z+1	; 0x01
    591c:	82 81       	ldd	r24, Z+2	; 0x02
    591e:	93 81       	ldd	r25, Z+3	; 0x03
    5920:	04 2d       	mov	r16, r4
    5922:	a3 01       	movw	r20, r6
    5924:	1d d6       	rcall	.+3130   	; 0x6560 <__ftoa_engine>
    5926:	6c 01       	movw	r12, r24
    5928:	f9 81       	ldd	r31, Y+1	; 0x01
    592a:	fc 87       	std	Y+12, r31	; 0x0c
    592c:	f0 ff       	sbrs	r31, 0
    592e:	02 c0       	rjmp	.+4      	; 0x5934 <vfprintf+0x1b0>
    5930:	f3 ff       	sbrs	r31, 3
    5932:	06 c0       	rjmp	.+12     	; 0x5940 <vfprintf+0x1bc>
    5934:	91 fc       	sbrc	r9, 1
    5936:	06 c0       	rjmp	.+12     	; 0x5944 <vfprintf+0x1c0>
    5938:	92 fe       	sbrs	r9, 2
    593a:	06 c0       	rjmp	.+12     	; 0x5948 <vfprintf+0x1c4>
    593c:	00 e2       	ldi	r16, 0x20	; 32
    593e:	05 c0       	rjmp	.+10     	; 0x594a <vfprintf+0x1c6>
    5940:	0d e2       	ldi	r16, 0x2D	; 45
    5942:	03 c0       	rjmp	.+6      	; 0x594a <vfprintf+0x1c6>
    5944:	0b e2       	ldi	r16, 0x2B	; 43
    5946:	01 c0       	rjmp	.+2      	; 0x594a <vfprintf+0x1c6>
    5948:	00 e0       	ldi	r16, 0x00	; 0
    594a:	8c 85       	ldd	r24, Y+12	; 0x0c
    594c:	8c 70       	andi	r24, 0x0C	; 12
    594e:	19 f0       	breq	.+6      	; 0x5956 <vfprintf+0x1d2>
    5950:	01 11       	cpse	r16, r1
    5952:	43 c2       	rjmp	.+1158   	; 0x5dda <vfprintf+0x656>
    5954:	80 c2       	rjmp	.+1280   	; 0x5e56 <vfprintf+0x6d2>
    5956:	97 fe       	sbrs	r9, 7
    5958:	10 c0       	rjmp	.+32     	; 0x597a <vfprintf+0x1f6>
    595a:	4c 0c       	add	r4, r12
    595c:	fc 85       	ldd	r31, Y+12	; 0x0c
    595e:	f4 ff       	sbrs	r31, 4
    5960:	04 c0       	rjmp	.+8      	; 0x596a <vfprintf+0x1e6>
    5962:	8a 81       	ldd	r24, Y+2	; 0x02
    5964:	81 33       	cpi	r24, 0x31	; 49
    5966:	09 f4       	brne	.+2      	; 0x596a <vfprintf+0x1e6>
    5968:	4a 94       	dec	r4
    596a:	14 14       	cp	r1, r4
    596c:	74 f5       	brge	.+92     	; 0x59ca <vfprintf+0x246>
    596e:	28 e0       	ldi	r18, 0x08	; 8
    5970:	24 15       	cp	r18, r4
    5972:	78 f5       	brcc	.+94     	; 0x59d2 <vfprintf+0x24e>
    5974:	88 e0       	ldi	r24, 0x08	; 8
    5976:	48 2e       	mov	r4, r24
    5978:	2c c0       	rjmp	.+88     	; 0x59d2 <vfprintf+0x24e>
    597a:	96 fc       	sbrc	r9, 6
    597c:	2a c0       	rjmp	.+84     	; 0x59d2 <vfprintf+0x24e>
    597e:	81 2f       	mov	r24, r17
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	8c 15       	cp	r24, r12
    5984:	9d 05       	cpc	r25, r13
    5986:	9c f0       	brlt	.+38     	; 0x59ae <vfprintf+0x22a>
    5988:	3c ef       	ldi	r19, 0xFC	; 252
    598a:	c3 16       	cp	r12, r19
    598c:	3f ef       	ldi	r19, 0xFF	; 255
    598e:	d3 06       	cpc	r13, r19
    5990:	74 f0       	brlt	.+28     	; 0x59ae <vfprintf+0x22a>
    5992:	89 2d       	mov	r24, r9
    5994:	80 68       	ori	r24, 0x80	; 128
    5996:	98 2e       	mov	r9, r24
    5998:	0a c0       	rjmp	.+20     	; 0x59ae <vfprintf+0x22a>
    599a:	e2 e0       	ldi	r30, 0x02	; 2
    599c:	f0 e0       	ldi	r31, 0x00	; 0
    599e:	ec 0f       	add	r30, r28
    59a0:	fd 1f       	adc	r31, r29
    59a2:	e1 0f       	add	r30, r17
    59a4:	f1 1d       	adc	r31, r1
    59a6:	80 81       	ld	r24, Z
    59a8:	80 33       	cpi	r24, 0x30	; 48
    59aa:	19 f4       	brne	.+6      	; 0x59b2 <vfprintf+0x22e>
    59ac:	11 50       	subi	r17, 0x01	; 1
    59ae:	11 11       	cpse	r17, r1
    59b0:	f4 cf       	rjmp	.-24     	; 0x599a <vfprintf+0x216>
    59b2:	97 fe       	sbrs	r9, 7
    59b4:	0e c0       	rjmp	.+28     	; 0x59d2 <vfprintf+0x24e>
    59b6:	44 24       	eor	r4, r4
    59b8:	43 94       	inc	r4
    59ba:	41 0e       	add	r4, r17
    59bc:	81 2f       	mov	r24, r17
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	c8 16       	cp	r12, r24
    59c2:	d9 06       	cpc	r13, r25
    59c4:	2c f4       	brge	.+10     	; 0x59d0 <vfprintf+0x24c>
    59c6:	1c 19       	sub	r17, r12
    59c8:	04 c0       	rjmp	.+8      	; 0x59d2 <vfprintf+0x24e>
    59ca:	44 24       	eor	r4, r4
    59cc:	43 94       	inc	r4
    59ce:	01 c0       	rjmp	.+2      	; 0x59d2 <vfprintf+0x24e>
    59d0:	10 e0       	ldi	r17, 0x00	; 0
    59d2:	97 fe       	sbrs	r9, 7
    59d4:	06 c0       	rjmp	.+12     	; 0x59e2 <vfprintf+0x25e>
    59d6:	1c 14       	cp	r1, r12
    59d8:	1d 04       	cpc	r1, r13
    59da:	34 f4       	brge	.+12     	; 0x59e8 <vfprintf+0x264>
    59dc:	c6 01       	movw	r24, r12
    59de:	01 96       	adiw	r24, 0x01	; 1
    59e0:	05 c0       	rjmp	.+10     	; 0x59ec <vfprintf+0x268>
    59e2:	85 e0       	ldi	r24, 0x05	; 5
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	02 c0       	rjmp	.+4      	; 0x59ec <vfprintf+0x268>
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	01 11       	cpse	r16, r1
    59ee:	01 96       	adiw	r24, 0x01	; 1
    59f0:	11 23       	and	r17, r17
    59f2:	31 f0       	breq	.+12     	; 0x5a00 <vfprintf+0x27c>
    59f4:	21 2f       	mov	r18, r17
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	2f 5f       	subi	r18, 0xFF	; 255
    59fa:	3f 4f       	sbci	r19, 0xFF	; 255
    59fc:	82 0f       	add	r24, r18
    59fe:	93 1f       	adc	r25, r19
    5a00:	25 2d       	mov	r18, r5
    5a02:	30 e0       	ldi	r19, 0x00	; 0
    5a04:	82 17       	cp	r24, r18
    5a06:	93 07       	cpc	r25, r19
    5a08:	14 f4       	brge	.+4      	; 0x5a0e <vfprintf+0x28a>
    5a0a:	58 1a       	sub	r5, r24
    5a0c:	01 c0       	rjmp	.+2      	; 0x5a10 <vfprintf+0x28c>
    5a0e:	51 2c       	mov	r5, r1
    5a10:	89 2d       	mov	r24, r9
    5a12:	89 70       	andi	r24, 0x09	; 9
    5a14:	41 f4       	brne	.+16     	; 0x5a26 <vfprintf+0x2a2>
    5a16:	55 20       	and	r5, r5
    5a18:	31 f0       	breq	.+12     	; 0x5a26 <vfprintf+0x2a2>
    5a1a:	b7 01       	movw	r22, r14
    5a1c:	80 e2       	ldi	r24, 0x20	; 32
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	ec d6       	rcall	.+3544   	; 0x67fa <fputc>
    5a22:	5a 94       	dec	r5
    5a24:	f8 cf       	rjmp	.-16     	; 0x5a16 <vfprintf+0x292>
    5a26:	00 23       	and	r16, r16
    5a28:	21 f0       	breq	.+8      	; 0x5a32 <vfprintf+0x2ae>
    5a2a:	b7 01       	movw	r22, r14
    5a2c:	80 2f       	mov	r24, r16
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	e4 d6       	rcall	.+3528   	; 0x67fa <fputc>
    5a32:	93 fc       	sbrc	r9, 3
    5a34:	08 c0       	rjmp	.+16     	; 0x5a46 <vfprintf+0x2c2>
    5a36:	55 20       	and	r5, r5
    5a38:	31 f0       	breq	.+12     	; 0x5a46 <vfprintf+0x2c2>
    5a3a:	b7 01       	movw	r22, r14
    5a3c:	80 e3       	ldi	r24, 0x30	; 48
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	dc d6       	rcall	.+3512   	; 0x67fa <fputc>
    5a42:	5a 94       	dec	r5
    5a44:	f8 cf       	rjmp	.-16     	; 0x5a36 <vfprintf+0x2b2>
    5a46:	97 fe       	sbrs	r9, 7
    5a48:	4a c0       	rjmp	.+148    	; 0x5ade <vfprintf+0x35a>
    5a4a:	46 01       	movw	r8, r12
    5a4c:	d7 fe       	sbrs	r13, 7
    5a4e:	02 c0       	rjmp	.+4      	; 0x5a54 <vfprintf+0x2d0>
    5a50:	81 2c       	mov	r8, r1
    5a52:	91 2c       	mov	r9, r1
    5a54:	c6 01       	movw	r24, r12
    5a56:	88 19       	sub	r24, r8
    5a58:	99 09       	sbc	r25, r9
    5a5a:	f3 01       	movw	r30, r6
    5a5c:	e8 0f       	add	r30, r24
    5a5e:	f9 1f       	adc	r31, r25
    5a60:	fe 87       	std	Y+14, r31	; 0x0e
    5a62:	ed 87       	std	Y+13, r30	; 0x0d
    5a64:	96 01       	movw	r18, r12
    5a66:	24 19       	sub	r18, r4
    5a68:	31 09       	sbc	r19, r1
    5a6a:	38 8b       	std	Y+16, r19	; 0x10
    5a6c:	2f 87       	std	Y+15, r18	; 0x0f
    5a6e:	01 2f       	mov	r16, r17
    5a70:	10 e0       	ldi	r17, 0x00	; 0
    5a72:	11 95       	neg	r17
    5a74:	01 95       	neg	r16
    5a76:	11 09       	sbc	r17, r1
    5a78:	3f ef       	ldi	r19, 0xFF	; 255
    5a7a:	83 16       	cp	r8, r19
    5a7c:	93 06       	cpc	r9, r19
    5a7e:	21 f4       	brne	.+8      	; 0x5a88 <vfprintf+0x304>
    5a80:	b7 01       	movw	r22, r14
    5a82:	8e e2       	ldi	r24, 0x2E	; 46
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	b9 d6       	rcall	.+3442   	; 0x67fa <fputc>
    5a88:	c8 14       	cp	r12, r8
    5a8a:	d9 04       	cpc	r13, r9
    5a8c:	4c f0       	brlt	.+18     	; 0x5aa0 <vfprintf+0x31c>
    5a8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a90:	98 89       	ldd	r25, Y+16	; 0x10
    5a92:	88 15       	cp	r24, r8
    5a94:	99 05       	cpc	r25, r9
    5a96:	24 f4       	brge	.+8      	; 0x5aa0 <vfprintf+0x31c>
    5a98:	ed 85       	ldd	r30, Y+13	; 0x0d
    5a9a:	fe 85       	ldd	r31, Y+14	; 0x0e
    5a9c:	81 81       	ldd	r24, Z+1	; 0x01
    5a9e:	01 c0       	rjmp	.+2      	; 0x5aa2 <vfprintf+0x31e>
    5aa0:	80 e3       	ldi	r24, 0x30	; 48
    5aa2:	f1 e0       	ldi	r31, 0x01	; 1
    5aa4:	8f 1a       	sub	r8, r31
    5aa6:	91 08       	sbc	r9, r1
    5aa8:	2d 85       	ldd	r18, Y+13	; 0x0d
    5aaa:	3e 85       	ldd	r19, Y+14	; 0x0e
    5aac:	2f 5f       	subi	r18, 0xFF	; 255
    5aae:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab0:	3e 87       	std	Y+14, r19	; 0x0e
    5ab2:	2d 87       	std	Y+13, r18	; 0x0d
    5ab4:	80 16       	cp	r8, r16
    5ab6:	91 06       	cpc	r9, r17
    5ab8:	24 f0       	brlt	.+8      	; 0x5ac2 <vfprintf+0x33e>
    5aba:	b7 01       	movw	r22, r14
    5abc:	90 e0       	ldi	r25, 0x00	; 0
    5abe:	9d d6       	rcall	.+3386   	; 0x67fa <fputc>
    5ac0:	db cf       	rjmp	.-74     	; 0x5a78 <vfprintf+0x2f4>
    5ac2:	c8 14       	cp	r12, r8
    5ac4:	d9 04       	cpc	r13, r9
    5ac6:	41 f4       	brne	.+16     	; 0x5ad8 <vfprintf+0x354>
    5ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    5aca:	96 33       	cpi	r25, 0x36	; 54
    5acc:	20 f4       	brcc	.+8      	; 0x5ad6 <vfprintf+0x352>
    5ace:	95 33       	cpi	r25, 0x35	; 53
    5ad0:	19 f4       	brne	.+6      	; 0x5ad8 <vfprintf+0x354>
    5ad2:	3c 85       	ldd	r19, Y+12	; 0x0c
    5ad4:	34 ff       	sbrs	r19, 4
    5ad6:	81 e3       	ldi	r24, 0x31	; 49
    5ad8:	b7 01       	movw	r22, r14
    5ada:	90 e0       	ldi	r25, 0x00	; 0
    5adc:	48 c0       	rjmp	.+144    	; 0x5b6e <vfprintf+0x3ea>
    5ade:	8a 81       	ldd	r24, Y+2	; 0x02
    5ae0:	81 33       	cpi	r24, 0x31	; 49
    5ae2:	19 f0       	breq	.+6      	; 0x5aea <vfprintf+0x366>
    5ae4:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ae6:	9f 7e       	andi	r25, 0xEF	; 239
    5ae8:	9c 87       	std	Y+12, r25	; 0x0c
    5aea:	b7 01       	movw	r22, r14
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	85 d6       	rcall	.+3338   	; 0x67fa <fputc>
    5af0:	11 11       	cpse	r17, r1
    5af2:	05 c0       	rjmp	.+10     	; 0x5afe <vfprintf+0x37a>
    5af4:	94 fc       	sbrc	r9, 4
    5af6:	16 c0       	rjmp	.+44     	; 0x5b24 <vfprintf+0x3a0>
    5af8:	85 e6       	ldi	r24, 0x65	; 101
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	15 c0       	rjmp	.+42     	; 0x5b28 <vfprintf+0x3a4>
    5afe:	b7 01       	movw	r22, r14
    5b00:	8e e2       	ldi	r24, 0x2E	; 46
    5b02:	90 e0       	ldi	r25, 0x00	; 0
    5b04:	7a d6       	rcall	.+3316   	; 0x67fa <fputc>
    5b06:	1e 5f       	subi	r17, 0xFE	; 254
    5b08:	82 e0       	ldi	r24, 0x02	; 2
    5b0a:	01 e0       	ldi	r16, 0x01	; 1
    5b0c:	08 0f       	add	r16, r24
    5b0e:	f3 01       	movw	r30, r6
    5b10:	e8 0f       	add	r30, r24
    5b12:	f1 1d       	adc	r31, r1
    5b14:	80 81       	ld	r24, Z
    5b16:	b7 01       	movw	r22, r14
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	6f d6       	rcall	.+3294   	; 0x67fa <fputc>
    5b1c:	80 2f       	mov	r24, r16
    5b1e:	01 13       	cpse	r16, r17
    5b20:	f4 cf       	rjmp	.-24     	; 0x5b0a <vfprintf+0x386>
    5b22:	e8 cf       	rjmp	.-48     	; 0x5af4 <vfprintf+0x370>
    5b24:	85 e4       	ldi	r24, 0x45	; 69
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	b7 01       	movw	r22, r14
    5b2a:	67 d6       	rcall	.+3278   	; 0x67fa <fputc>
    5b2c:	d7 fc       	sbrc	r13, 7
    5b2e:	06 c0       	rjmp	.+12     	; 0x5b3c <vfprintf+0x3b8>
    5b30:	c1 14       	cp	r12, r1
    5b32:	d1 04       	cpc	r13, r1
    5b34:	41 f4       	brne	.+16     	; 0x5b46 <vfprintf+0x3c2>
    5b36:	ec 85       	ldd	r30, Y+12	; 0x0c
    5b38:	e4 ff       	sbrs	r30, 4
    5b3a:	05 c0       	rjmp	.+10     	; 0x5b46 <vfprintf+0x3c2>
    5b3c:	d1 94       	neg	r13
    5b3e:	c1 94       	neg	r12
    5b40:	d1 08       	sbc	r13, r1
    5b42:	8d e2       	ldi	r24, 0x2D	; 45
    5b44:	01 c0       	rjmp	.+2      	; 0x5b48 <vfprintf+0x3c4>
    5b46:	8b e2       	ldi	r24, 0x2B	; 43
    5b48:	b7 01       	movw	r22, r14
    5b4a:	90 e0       	ldi	r25, 0x00	; 0
    5b4c:	56 d6       	rcall	.+3244   	; 0x67fa <fputc>
    5b4e:	80 e3       	ldi	r24, 0x30	; 48
    5b50:	2a e0       	ldi	r18, 0x0A	; 10
    5b52:	c2 16       	cp	r12, r18
    5b54:	d1 04       	cpc	r13, r1
    5b56:	2c f0       	brlt	.+10     	; 0x5b62 <vfprintf+0x3de>
    5b58:	8f 5f       	subi	r24, 0xFF	; 255
    5b5a:	fa e0       	ldi	r31, 0x0A	; 10
    5b5c:	cf 1a       	sub	r12, r31
    5b5e:	d1 08       	sbc	r13, r1
    5b60:	f7 cf       	rjmp	.-18     	; 0x5b50 <vfprintf+0x3cc>
    5b62:	b7 01       	movw	r22, r14
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	49 d6       	rcall	.+3218   	; 0x67fa <fputc>
    5b68:	b7 01       	movw	r22, r14
    5b6a:	c6 01       	movw	r24, r12
    5b6c:	c0 96       	adiw	r24, 0x30	; 48
    5b6e:	45 d6       	rcall	.+3210   	; 0x67fa <fputc>
    5b70:	49 c1       	rjmp	.+658    	; 0x5e04 <vfprintf+0x680>
    5b72:	83 36       	cpi	r24, 0x63	; 99
    5b74:	31 f0       	breq	.+12     	; 0x5b82 <vfprintf+0x3fe>
    5b76:	83 37       	cpi	r24, 0x73	; 115
    5b78:	79 f0       	breq	.+30     	; 0x5b98 <vfprintf+0x414>
    5b7a:	83 35       	cpi	r24, 0x53	; 83
    5b7c:	09 f0       	breq	.+2      	; 0x5b80 <vfprintf+0x3fc>
    5b7e:	52 c0       	rjmp	.+164    	; 0x5c24 <vfprintf+0x4a0>
    5b80:	1f c0       	rjmp	.+62     	; 0x5bc0 <vfprintf+0x43c>
    5b82:	56 01       	movw	r10, r12
    5b84:	32 e0       	ldi	r19, 0x02	; 2
    5b86:	a3 0e       	add	r10, r19
    5b88:	b1 1c       	adc	r11, r1
    5b8a:	f6 01       	movw	r30, r12
    5b8c:	80 81       	ld	r24, Z
    5b8e:	89 83       	std	Y+1, r24	; 0x01
    5b90:	01 e0       	ldi	r16, 0x01	; 1
    5b92:	10 e0       	ldi	r17, 0x00	; 0
    5b94:	63 01       	movw	r12, r6
    5b96:	11 c0       	rjmp	.+34     	; 0x5bba <vfprintf+0x436>
    5b98:	56 01       	movw	r10, r12
    5b9a:	f2 e0       	ldi	r31, 0x02	; 2
    5b9c:	af 0e       	add	r10, r31
    5b9e:	b1 1c       	adc	r11, r1
    5ba0:	f6 01       	movw	r30, r12
    5ba2:	c0 80       	ld	r12, Z
    5ba4:	d1 80       	ldd	r13, Z+1	; 0x01
    5ba6:	96 fe       	sbrs	r9, 6
    5ba8:	03 c0       	rjmp	.+6      	; 0x5bb0 <vfprintf+0x42c>
    5baa:	61 2f       	mov	r22, r17
    5bac:	70 e0       	ldi	r23, 0x00	; 0
    5bae:	02 c0       	rjmp	.+4      	; 0x5bb4 <vfprintf+0x430>
    5bb0:	6f ef       	ldi	r22, 0xFF	; 255
    5bb2:	7f ef       	ldi	r23, 0xFF	; 255
    5bb4:	c6 01       	movw	r24, r12
    5bb6:	16 d6       	rcall	.+3116   	; 0x67e4 <strnlen>
    5bb8:	8c 01       	movw	r16, r24
    5bba:	f9 2d       	mov	r31, r9
    5bbc:	ff 77       	andi	r31, 0x7F	; 127
    5bbe:	13 c0       	rjmp	.+38     	; 0x5be6 <vfprintf+0x462>
    5bc0:	56 01       	movw	r10, r12
    5bc2:	22 e0       	ldi	r18, 0x02	; 2
    5bc4:	a2 0e       	add	r10, r18
    5bc6:	b1 1c       	adc	r11, r1
    5bc8:	f6 01       	movw	r30, r12
    5bca:	c0 80       	ld	r12, Z
    5bcc:	d1 80       	ldd	r13, Z+1	; 0x01
    5bce:	96 fe       	sbrs	r9, 6
    5bd0:	03 c0       	rjmp	.+6      	; 0x5bd8 <vfprintf+0x454>
    5bd2:	61 2f       	mov	r22, r17
    5bd4:	70 e0       	ldi	r23, 0x00	; 0
    5bd6:	02 c0       	rjmp	.+4      	; 0x5bdc <vfprintf+0x458>
    5bd8:	6f ef       	ldi	r22, 0xFF	; 255
    5bda:	7f ef       	ldi	r23, 0xFF	; 255
    5bdc:	c6 01       	movw	r24, r12
    5bde:	98 d5       	rcall	.+2864   	; 0x6710 <strnlen_P>
    5be0:	8c 01       	movw	r16, r24
    5be2:	f9 2d       	mov	r31, r9
    5be4:	f0 68       	ori	r31, 0x80	; 128
    5be6:	9f 2e       	mov	r9, r31
    5be8:	f3 fd       	sbrc	r31, 3
    5bea:	18 c0       	rjmp	.+48     	; 0x5c1c <vfprintf+0x498>
    5bec:	85 2d       	mov	r24, r5
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	08 17       	cp	r16, r24
    5bf2:	19 07       	cpc	r17, r25
    5bf4:	98 f4       	brcc	.+38     	; 0x5c1c <vfprintf+0x498>
    5bf6:	b7 01       	movw	r22, r14
    5bf8:	80 e2       	ldi	r24, 0x20	; 32
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	fe d5       	rcall	.+3068   	; 0x67fa <fputc>
    5bfe:	5a 94       	dec	r5
    5c00:	f5 cf       	rjmp	.-22     	; 0x5bec <vfprintf+0x468>
    5c02:	f6 01       	movw	r30, r12
    5c04:	97 fc       	sbrc	r9, 7
    5c06:	85 91       	lpm	r24, Z+
    5c08:	97 fe       	sbrs	r9, 7
    5c0a:	81 91       	ld	r24, Z+
    5c0c:	6f 01       	movw	r12, r30
    5c0e:	b7 01       	movw	r22, r14
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	f3 d5       	rcall	.+3046   	; 0x67fa <fputc>
    5c14:	51 10       	cpse	r5, r1
    5c16:	5a 94       	dec	r5
    5c18:	01 50       	subi	r16, 0x01	; 1
    5c1a:	11 09       	sbc	r17, r1
    5c1c:	01 15       	cp	r16, r1
    5c1e:	11 05       	cpc	r17, r1
    5c20:	81 f7       	brne	.-32     	; 0x5c02 <vfprintf+0x47e>
    5c22:	f0 c0       	rjmp	.+480    	; 0x5e04 <vfprintf+0x680>
    5c24:	84 36       	cpi	r24, 0x64	; 100
    5c26:	11 f0       	breq	.+4      	; 0x5c2c <vfprintf+0x4a8>
    5c28:	89 36       	cpi	r24, 0x69	; 105
    5c2a:	59 f5       	brne	.+86     	; 0x5c82 <vfprintf+0x4fe>
    5c2c:	56 01       	movw	r10, r12
    5c2e:	97 fe       	sbrs	r9, 7
    5c30:	09 c0       	rjmp	.+18     	; 0x5c44 <vfprintf+0x4c0>
    5c32:	24 e0       	ldi	r18, 0x04	; 4
    5c34:	a2 0e       	add	r10, r18
    5c36:	b1 1c       	adc	r11, r1
    5c38:	f6 01       	movw	r30, r12
    5c3a:	60 81       	ld	r22, Z
    5c3c:	71 81       	ldd	r23, Z+1	; 0x01
    5c3e:	82 81       	ldd	r24, Z+2	; 0x02
    5c40:	93 81       	ldd	r25, Z+3	; 0x03
    5c42:	0a c0       	rjmp	.+20     	; 0x5c58 <vfprintf+0x4d4>
    5c44:	f2 e0       	ldi	r31, 0x02	; 2
    5c46:	af 0e       	add	r10, r31
    5c48:	b1 1c       	adc	r11, r1
    5c4a:	f6 01       	movw	r30, r12
    5c4c:	60 81       	ld	r22, Z
    5c4e:	71 81       	ldd	r23, Z+1	; 0x01
    5c50:	07 2e       	mov	r0, r23
    5c52:	00 0c       	add	r0, r0
    5c54:	88 0b       	sbc	r24, r24
    5c56:	99 0b       	sbc	r25, r25
    5c58:	f9 2d       	mov	r31, r9
    5c5a:	ff 76       	andi	r31, 0x6F	; 111
    5c5c:	9f 2e       	mov	r9, r31
    5c5e:	97 ff       	sbrs	r25, 7
    5c60:	09 c0       	rjmp	.+18     	; 0x5c74 <vfprintf+0x4f0>
    5c62:	90 95       	com	r25
    5c64:	80 95       	com	r24
    5c66:	70 95       	com	r23
    5c68:	61 95       	neg	r22
    5c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c70:	f0 68       	ori	r31, 0x80	; 128
    5c72:	9f 2e       	mov	r9, r31
    5c74:	2a e0       	ldi	r18, 0x0A	; 10
    5c76:	30 e0       	ldi	r19, 0x00	; 0
    5c78:	a3 01       	movw	r20, r6
    5c7a:	6e d6       	rcall	.+3292   	; 0x6958 <__ultoa_invert>
    5c7c:	c8 2e       	mov	r12, r24
    5c7e:	c6 18       	sub	r12, r6
    5c80:	3e c0       	rjmp	.+124    	; 0x5cfe <vfprintf+0x57a>
    5c82:	09 2d       	mov	r16, r9
    5c84:	85 37       	cpi	r24, 0x75	; 117
    5c86:	21 f4       	brne	.+8      	; 0x5c90 <vfprintf+0x50c>
    5c88:	0f 7e       	andi	r16, 0xEF	; 239
    5c8a:	2a e0       	ldi	r18, 0x0A	; 10
    5c8c:	30 e0       	ldi	r19, 0x00	; 0
    5c8e:	1d c0       	rjmp	.+58     	; 0x5cca <vfprintf+0x546>
    5c90:	09 7f       	andi	r16, 0xF9	; 249
    5c92:	8f 36       	cpi	r24, 0x6F	; 111
    5c94:	91 f0       	breq	.+36     	; 0x5cba <vfprintf+0x536>
    5c96:	18 f4       	brcc	.+6      	; 0x5c9e <vfprintf+0x51a>
    5c98:	88 35       	cpi	r24, 0x58	; 88
    5c9a:	59 f0       	breq	.+22     	; 0x5cb2 <vfprintf+0x52e>
    5c9c:	bc c0       	rjmp	.+376    	; 0x5e16 <vfprintf+0x692>
    5c9e:	80 37       	cpi	r24, 0x70	; 112
    5ca0:	19 f0       	breq	.+6      	; 0x5ca8 <vfprintf+0x524>
    5ca2:	88 37       	cpi	r24, 0x78	; 120
    5ca4:	11 f0       	breq	.+4      	; 0x5caa <vfprintf+0x526>
    5ca6:	b7 c0       	rjmp	.+366    	; 0x5e16 <vfprintf+0x692>
    5ca8:	00 61       	ori	r16, 0x10	; 16
    5caa:	04 ff       	sbrs	r16, 4
    5cac:	09 c0       	rjmp	.+18     	; 0x5cc0 <vfprintf+0x53c>
    5cae:	04 60       	ori	r16, 0x04	; 4
    5cb0:	07 c0       	rjmp	.+14     	; 0x5cc0 <vfprintf+0x53c>
    5cb2:	94 fe       	sbrs	r9, 4
    5cb4:	08 c0       	rjmp	.+16     	; 0x5cc6 <vfprintf+0x542>
    5cb6:	06 60       	ori	r16, 0x06	; 6
    5cb8:	06 c0       	rjmp	.+12     	; 0x5cc6 <vfprintf+0x542>
    5cba:	28 e0       	ldi	r18, 0x08	; 8
    5cbc:	30 e0       	ldi	r19, 0x00	; 0
    5cbe:	05 c0       	rjmp	.+10     	; 0x5cca <vfprintf+0x546>
    5cc0:	20 e1       	ldi	r18, 0x10	; 16
    5cc2:	30 e0       	ldi	r19, 0x00	; 0
    5cc4:	02 c0       	rjmp	.+4      	; 0x5cca <vfprintf+0x546>
    5cc6:	20 e1       	ldi	r18, 0x10	; 16
    5cc8:	32 e0       	ldi	r19, 0x02	; 2
    5cca:	56 01       	movw	r10, r12
    5ccc:	07 ff       	sbrs	r16, 7
    5cce:	09 c0       	rjmp	.+18     	; 0x5ce2 <vfprintf+0x55e>
    5cd0:	84 e0       	ldi	r24, 0x04	; 4
    5cd2:	a8 0e       	add	r10, r24
    5cd4:	b1 1c       	adc	r11, r1
    5cd6:	f6 01       	movw	r30, r12
    5cd8:	60 81       	ld	r22, Z
    5cda:	71 81       	ldd	r23, Z+1	; 0x01
    5cdc:	82 81       	ldd	r24, Z+2	; 0x02
    5cde:	93 81       	ldd	r25, Z+3	; 0x03
    5ce0:	08 c0       	rjmp	.+16     	; 0x5cf2 <vfprintf+0x56e>
    5ce2:	f2 e0       	ldi	r31, 0x02	; 2
    5ce4:	af 0e       	add	r10, r31
    5ce6:	b1 1c       	adc	r11, r1
    5ce8:	f6 01       	movw	r30, r12
    5cea:	60 81       	ld	r22, Z
    5cec:	71 81       	ldd	r23, Z+1	; 0x01
    5cee:	80 e0       	ldi	r24, 0x00	; 0
    5cf0:	90 e0       	ldi	r25, 0x00	; 0
    5cf2:	a3 01       	movw	r20, r6
    5cf4:	31 d6       	rcall	.+3170   	; 0x6958 <__ultoa_invert>
    5cf6:	c8 2e       	mov	r12, r24
    5cf8:	c6 18       	sub	r12, r6
    5cfa:	0f 77       	andi	r16, 0x7F	; 127
    5cfc:	90 2e       	mov	r9, r16
    5cfe:	96 fe       	sbrs	r9, 6
    5d00:	0b c0       	rjmp	.+22     	; 0x5d18 <vfprintf+0x594>
    5d02:	09 2d       	mov	r16, r9
    5d04:	0e 7f       	andi	r16, 0xFE	; 254
    5d06:	c1 16       	cp	r12, r17
    5d08:	50 f4       	brcc	.+20     	; 0x5d1e <vfprintf+0x59a>
    5d0a:	94 fe       	sbrs	r9, 4
    5d0c:	0a c0       	rjmp	.+20     	; 0x5d22 <vfprintf+0x59e>
    5d0e:	92 fc       	sbrc	r9, 2
    5d10:	08 c0       	rjmp	.+16     	; 0x5d22 <vfprintf+0x59e>
    5d12:	09 2d       	mov	r16, r9
    5d14:	0e 7e       	andi	r16, 0xEE	; 238
    5d16:	05 c0       	rjmp	.+10     	; 0x5d22 <vfprintf+0x59e>
    5d18:	dc 2c       	mov	r13, r12
    5d1a:	09 2d       	mov	r16, r9
    5d1c:	03 c0       	rjmp	.+6      	; 0x5d24 <vfprintf+0x5a0>
    5d1e:	dc 2c       	mov	r13, r12
    5d20:	01 c0       	rjmp	.+2      	; 0x5d24 <vfprintf+0x5a0>
    5d22:	d1 2e       	mov	r13, r17
    5d24:	04 ff       	sbrs	r16, 4
    5d26:	0d c0       	rjmp	.+26     	; 0x5d42 <vfprintf+0x5be>
    5d28:	fe 01       	movw	r30, r28
    5d2a:	ec 0d       	add	r30, r12
    5d2c:	f1 1d       	adc	r31, r1
    5d2e:	80 81       	ld	r24, Z
    5d30:	80 33       	cpi	r24, 0x30	; 48
    5d32:	11 f4       	brne	.+4      	; 0x5d38 <vfprintf+0x5b4>
    5d34:	09 7e       	andi	r16, 0xE9	; 233
    5d36:	09 c0       	rjmp	.+18     	; 0x5d4a <vfprintf+0x5c6>
    5d38:	02 ff       	sbrs	r16, 2
    5d3a:	06 c0       	rjmp	.+12     	; 0x5d48 <vfprintf+0x5c4>
    5d3c:	d3 94       	inc	r13
    5d3e:	d3 94       	inc	r13
    5d40:	04 c0       	rjmp	.+8      	; 0x5d4a <vfprintf+0x5c6>
    5d42:	80 2f       	mov	r24, r16
    5d44:	86 78       	andi	r24, 0x86	; 134
    5d46:	09 f0       	breq	.+2      	; 0x5d4a <vfprintf+0x5c6>
    5d48:	d3 94       	inc	r13
    5d4a:	03 fd       	sbrc	r16, 3
    5d4c:	10 c0       	rjmp	.+32     	; 0x5d6e <vfprintf+0x5ea>
    5d4e:	00 ff       	sbrs	r16, 0
    5d50:	06 c0       	rjmp	.+12     	; 0x5d5e <vfprintf+0x5da>
    5d52:	1c 2d       	mov	r17, r12
    5d54:	d5 14       	cp	r13, r5
    5d56:	78 f4       	brcc	.+30     	; 0x5d76 <vfprintf+0x5f2>
    5d58:	15 0d       	add	r17, r5
    5d5a:	1d 19       	sub	r17, r13
    5d5c:	0c c0       	rjmp	.+24     	; 0x5d76 <vfprintf+0x5f2>
    5d5e:	d5 14       	cp	r13, r5
    5d60:	50 f4       	brcc	.+20     	; 0x5d76 <vfprintf+0x5f2>
    5d62:	b7 01       	movw	r22, r14
    5d64:	80 e2       	ldi	r24, 0x20	; 32
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	48 d5       	rcall	.+2704   	; 0x67fa <fputc>
    5d6a:	d3 94       	inc	r13
    5d6c:	f8 cf       	rjmp	.-16     	; 0x5d5e <vfprintf+0x5da>
    5d6e:	d5 14       	cp	r13, r5
    5d70:	10 f4       	brcc	.+4      	; 0x5d76 <vfprintf+0x5f2>
    5d72:	5d 18       	sub	r5, r13
    5d74:	01 c0       	rjmp	.+2      	; 0x5d78 <vfprintf+0x5f4>
    5d76:	51 2c       	mov	r5, r1
    5d78:	04 ff       	sbrs	r16, 4
    5d7a:	0f c0       	rjmp	.+30     	; 0x5d9a <vfprintf+0x616>
    5d7c:	b7 01       	movw	r22, r14
    5d7e:	80 e3       	ldi	r24, 0x30	; 48
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	3b d5       	rcall	.+2678   	; 0x67fa <fputc>
    5d84:	02 ff       	sbrs	r16, 2
    5d86:	16 c0       	rjmp	.+44     	; 0x5db4 <vfprintf+0x630>
    5d88:	01 fd       	sbrc	r16, 1
    5d8a:	03 c0       	rjmp	.+6      	; 0x5d92 <vfprintf+0x60e>
    5d8c:	88 e7       	ldi	r24, 0x78	; 120
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	02 c0       	rjmp	.+4      	; 0x5d96 <vfprintf+0x612>
    5d92:	88 e5       	ldi	r24, 0x58	; 88
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	b7 01       	movw	r22, r14
    5d98:	0c c0       	rjmp	.+24     	; 0x5db2 <vfprintf+0x62e>
    5d9a:	80 2f       	mov	r24, r16
    5d9c:	86 78       	andi	r24, 0x86	; 134
    5d9e:	51 f0       	breq	.+20     	; 0x5db4 <vfprintf+0x630>
    5da0:	01 ff       	sbrs	r16, 1
    5da2:	02 c0       	rjmp	.+4      	; 0x5da8 <vfprintf+0x624>
    5da4:	8b e2       	ldi	r24, 0x2B	; 43
    5da6:	01 c0       	rjmp	.+2      	; 0x5daa <vfprintf+0x626>
    5da8:	80 e2       	ldi	r24, 0x20	; 32
    5daa:	07 fd       	sbrc	r16, 7
    5dac:	8d e2       	ldi	r24, 0x2D	; 45
    5dae:	b7 01       	movw	r22, r14
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	23 d5       	rcall	.+2630   	; 0x67fa <fputc>
    5db4:	c1 16       	cp	r12, r17
    5db6:	30 f4       	brcc	.+12     	; 0x5dc4 <vfprintf+0x640>
    5db8:	b7 01       	movw	r22, r14
    5dba:	80 e3       	ldi	r24, 0x30	; 48
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	1d d5       	rcall	.+2618   	; 0x67fa <fputc>
    5dc0:	11 50       	subi	r17, 0x01	; 1
    5dc2:	f8 cf       	rjmp	.-16     	; 0x5db4 <vfprintf+0x630>
    5dc4:	ca 94       	dec	r12
    5dc6:	f3 01       	movw	r30, r6
    5dc8:	ec 0d       	add	r30, r12
    5dca:	f1 1d       	adc	r31, r1
    5dcc:	80 81       	ld	r24, Z
    5dce:	b7 01       	movw	r22, r14
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	13 d5       	rcall	.+2598   	; 0x67fa <fputc>
    5dd4:	c1 10       	cpse	r12, r1
    5dd6:	f6 cf       	rjmp	.-20     	; 0x5dc4 <vfprintf+0x640>
    5dd8:	15 c0       	rjmp	.+42     	; 0x5e04 <vfprintf+0x680>
    5dda:	f4 e0       	ldi	r31, 0x04	; 4
    5ddc:	f5 15       	cp	r31, r5
    5dde:	50 f5       	brcc	.+84     	; 0x5e34 <vfprintf+0x6b0>
    5de0:	84 e0       	ldi	r24, 0x04	; 4
    5de2:	58 1a       	sub	r5, r24
    5de4:	93 fe       	sbrs	r9, 3
    5de6:	1e c0       	rjmp	.+60     	; 0x5e24 <vfprintf+0x6a0>
    5de8:	01 11       	cpse	r16, r1
    5dea:	25 c0       	rjmp	.+74     	; 0x5e36 <vfprintf+0x6b2>
    5dec:	2c 85       	ldd	r18, Y+12	; 0x0c
    5dee:	23 ff       	sbrs	r18, 3
    5df0:	27 c0       	rjmp	.+78     	; 0x5e40 <vfprintf+0x6bc>
    5df2:	0a e9       	ldi	r16, 0x9A	; 154
    5df4:	11 e0       	ldi	r17, 0x01	; 1
    5df6:	39 2d       	mov	r19, r9
    5df8:	30 71       	andi	r19, 0x10	; 16
    5dfa:	93 2e       	mov	r9, r19
    5dfc:	f8 01       	movw	r30, r16
    5dfe:	84 91       	lpm	r24, Z
    5e00:	81 11       	cpse	r24, r1
    5e02:	21 c0       	rjmp	.+66     	; 0x5e46 <vfprintf+0x6c2>
    5e04:	55 20       	and	r5, r5
    5e06:	09 f4       	brne	.+2      	; 0x5e0a <vfprintf+0x686>
    5e08:	fc cc       	rjmp	.-1544   	; 0x5802 <vfprintf+0x7e>
    5e0a:	b7 01       	movw	r22, r14
    5e0c:	80 e2       	ldi	r24, 0x20	; 32
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	f4 d4       	rcall	.+2536   	; 0x67fa <fputc>
    5e12:	5a 94       	dec	r5
    5e14:	f7 cf       	rjmp	.-18     	; 0x5e04 <vfprintf+0x680>
    5e16:	f7 01       	movw	r30, r14
    5e18:	86 81       	ldd	r24, Z+6	; 0x06
    5e1a:	97 81       	ldd	r25, Z+7	; 0x07
    5e1c:	23 c0       	rjmp	.+70     	; 0x5e64 <vfprintf+0x6e0>
    5e1e:	8f ef       	ldi	r24, 0xFF	; 255
    5e20:	9f ef       	ldi	r25, 0xFF	; 255
    5e22:	20 c0       	rjmp	.+64     	; 0x5e64 <vfprintf+0x6e0>
    5e24:	b7 01       	movw	r22, r14
    5e26:	80 e2       	ldi	r24, 0x20	; 32
    5e28:	90 e0       	ldi	r25, 0x00	; 0
    5e2a:	e7 d4       	rcall	.+2510   	; 0x67fa <fputc>
    5e2c:	5a 94       	dec	r5
    5e2e:	51 10       	cpse	r5, r1
    5e30:	f9 cf       	rjmp	.-14     	; 0x5e24 <vfprintf+0x6a0>
    5e32:	da cf       	rjmp	.-76     	; 0x5de8 <vfprintf+0x664>
    5e34:	51 2c       	mov	r5, r1
    5e36:	b7 01       	movw	r22, r14
    5e38:	80 2f       	mov	r24, r16
    5e3a:	90 e0       	ldi	r25, 0x00	; 0
    5e3c:	de d4       	rcall	.+2492   	; 0x67fa <fputc>
    5e3e:	d6 cf       	rjmp	.-84     	; 0x5dec <vfprintf+0x668>
    5e40:	0e e9       	ldi	r16, 0x9E	; 158
    5e42:	11 e0       	ldi	r17, 0x01	; 1
    5e44:	d8 cf       	rjmp	.-80     	; 0x5df6 <vfprintf+0x672>
    5e46:	91 10       	cpse	r9, r1
    5e48:	80 52       	subi	r24, 0x20	; 32
    5e4a:	b7 01       	movw	r22, r14
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	d5 d4       	rcall	.+2474   	; 0x67fa <fputc>
    5e50:	0f 5f       	subi	r16, 0xFF	; 255
    5e52:	1f 4f       	sbci	r17, 0xFF	; 255
    5e54:	d3 cf       	rjmp	.-90     	; 0x5dfc <vfprintf+0x678>
    5e56:	23 e0       	ldi	r18, 0x03	; 3
    5e58:	25 15       	cp	r18, r5
    5e5a:	10 f4       	brcc	.+4      	; 0x5e60 <vfprintf+0x6dc>
    5e5c:	83 e0       	ldi	r24, 0x03	; 3
    5e5e:	c1 cf       	rjmp	.-126    	; 0x5de2 <vfprintf+0x65e>
    5e60:	51 2c       	mov	r5, r1
    5e62:	c4 cf       	rjmp	.-120    	; 0x5dec <vfprintf+0x668>
    5e64:	60 96       	adiw	r28, 0x10	; 16
    5e66:	0f b6       	in	r0, 0x3f	; 63
    5e68:	f8 94       	cli
    5e6a:	de bf       	out	0x3e, r29	; 62
    5e6c:	0f be       	out	0x3f, r0	; 63
    5e6e:	cd bf       	out	0x3d, r28	; 61
    5e70:	df 91       	pop	r29
    5e72:	cf 91       	pop	r28
    5e74:	1f 91       	pop	r17
    5e76:	0f 91       	pop	r16
    5e78:	ff 90       	pop	r15
    5e7a:	ef 90       	pop	r14
    5e7c:	df 90       	pop	r13
    5e7e:	cf 90       	pop	r12
    5e80:	bf 90       	pop	r11
    5e82:	af 90       	pop	r10
    5e84:	9f 90       	pop	r9
    5e86:	8f 90       	pop	r8
    5e88:	7f 90       	pop	r7
    5e8a:	6f 90       	pop	r6
    5e8c:	5f 90       	pop	r5
    5e8e:	4f 90       	pop	r4
    5e90:	3f 90       	pop	r3
    5e92:	2f 90       	pop	r2
    5e94:	08 95       	ret

00005e96 <__subsf3>:
    5e96:	50 58       	subi	r21, 0x80	; 128

00005e98 <__addsf3>:
    5e98:	bb 27       	eor	r27, r27
    5e9a:	aa 27       	eor	r26, r26
    5e9c:	0e d0       	rcall	.+28     	; 0x5eba <__addsf3x>
    5e9e:	4d c1       	rjmp	.+666    	; 0x613a <__fp_round>
    5ea0:	3e d1       	rcall	.+636    	; 0x611e <__fp_pscA>
    5ea2:	30 f0       	brcs	.+12     	; 0x5eb0 <__addsf3+0x18>
    5ea4:	43 d1       	rcall	.+646    	; 0x612c <__fp_pscB>
    5ea6:	20 f0       	brcs	.+8      	; 0x5eb0 <__addsf3+0x18>
    5ea8:	31 f4       	brne	.+12     	; 0x5eb6 <__addsf3+0x1e>
    5eaa:	9f 3f       	cpi	r25, 0xFF	; 255
    5eac:	11 f4       	brne	.+4      	; 0x5eb2 <__addsf3+0x1a>
    5eae:	1e f4       	brtc	.+6      	; 0x5eb6 <__addsf3+0x1e>
    5eb0:	33 c1       	rjmp	.+614    	; 0x6118 <__fp_nan>
    5eb2:	0e f4       	brtc	.+2      	; 0x5eb6 <__addsf3+0x1e>
    5eb4:	e0 95       	com	r30
    5eb6:	e7 fb       	bst	r30, 7
    5eb8:	29 c1       	rjmp	.+594    	; 0x610c <__fp_inf>

00005eba <__addsf3x>:
    5eba:	e9 2f       	mov	r30, r25
    5ebc:	4f d1       	rcall	.+670    	; 0x615c <__fp_split3>
    5ebe:	80 f3       	brcs	.-32     	; 0x5ea0 <__addsf3+0x8>
    5ec0:	ba 17       	cp	r27, r26
    5ec2:	62 07       	cpc	r22, r18
    5ec4:	73 07       	cpc	r23, r19
    5ec6:	84 07       	cpc	r24, r20
    5ec8:	95 07       	cpc	r25, r21
    5eca:	18 f0       	brcs	.+6      	; 0x5ed2 <__addsf3x+0x18>
    5ecc:	71 f4       	brne	.+28     	; 0x5eea <__addsf3x+0x30>
    5ece:	9e f5       	brtc	.+102    	; 0x5f36 <__addsf3x+0x7c>
    5ed0:	67 c1       	rjmp	.+718    	; 0x61a0 <__fp_zero>
    5ed2:	0e f4       	brtc	.+2      	; 0x5ed6 <__addsf3x+0x1c>
    5ed4:	e0 95       	com	r30
    5ed6:	0b 2e       	mov	r0, r27
    5ed8:	ba 2f       	mov	r27, r26
    5eda:	a0 2d       	mov	r26, r0
    5edc:	0b 01       	movw	r0, r22
    5ede:	b9 01       	movw	r22, r18
    5ee0:	90 01       	movw	r18, r0
    5ee2:	0c 01       	movw	r0, r24
    5ee4:	ca 01       	movw	r24, r20
    5ee6:	a0 01       	movw	r20, r0
    5ee8:	11 24       	eor	r1, r1
    5eea:	ff 27       	eor	r31, r31
    5eec:	59 1b       	sub	r21, r25
    5eee:	99 f0       	breq	.+38     	; 0x5f16 <__addsf3x+0x5c>
    5ef0:	59 3f       	cpi	r21, 0xF9	; 249
    5ef2:	50 f4       	brcc	.+20     	; 0x5f08 <__addsf3x+0x4e>
    5ef4:	50 3e       	cpi	r21, 0xE0	; 224
    5ef6:	68 f1       	brcs	.+90     	; 0x5f52 <__addsf3x+0x98>
    5ef8:	1a 16       	cp	r1, r26
    5efa:	f0 40       	sbci	r31, 0x00	; 0
    5efc:	a2 2f       	mov	r26, r18
    5efe:	23 2f       	mov	r18, r19
    5f00:	34 2f       	mov	r19, r20
    5f02:	44 27       	eor	r20, r20
    5f04:	58 5f       	subi	r21, 0xF8	; 248
    5f06:	f3 cf       	rjmp	.-26     	; 0x5eee <__addsf3x+0x34>
    5f08:	46 95       	lsr	r20
    5f0a:	37 95       	ror	r19
    5f0c:	27 95       	ror	r18
    5f0e:	a7 95       	ror	r26
    5f10:	f0 40       	sbci	r31, 0x00	; 0
    5f12:	53 95       	inc	r21
    5f14:	c9 f7       	brne	.-14     	; 0x5f08 <__addsf3x+0x4e>
    5f16:	7e f4       	brtc	.+30     	; 0x5f36 <__addsf3x+0x7c>
    5f18:	1f 16       	cp	r1, r31
    5f1a:	ba 0b       	sbc	r27, r26
    5f1c:	62 0b       	sbc	r22, r18
    5f1e:	73 0b       	sbc	r23, r19
    5f20:	84 0b       	sbc	r24, r20
    5f22:	ba f0       	brmi	.+46     	; 0x5f52 <__addsf3x+0x98>
    5f24:	91 50       	subi	r25, 0x01	; 1
    5f26:	a1 f0       	breq	.+40     	; 0x5f50 <__addsf3x+0x96>
    5f28:	ff 0f       	add	r31, r31
    5f2a:	bb 1f       	adc	r27, r27
    5f2c:	66 1f       	adc	r22, r22
    5f2e:	77 1f       	adc	r23, r23
    5f30:	88 1f       	adc	r24, r24
    5f32:	c2 f7       	brpl	.-16     	; 0x5f24 <__addsf3x+0x6a>
    5f34:	0e c0       	rjmp	.+28     	; 0x5f52 <__addsf3x+0x98>
    5f36:	ba 0f       	add	r27, r26
    5f38:	62 1f       	adc	r22, r18
    5f3a:	73 1f       	adc	r23, r19
    5f3c:	84 1f       	adc	r24, r20
    5f3e:	48 f4       	brcc	.+18     	; 0x5f52 <__addsf3x+0x98>
    5f40:	87 95       	ror	r24
    5f42:	77 95       	ror	r23
    5f44:	67 95       	ror	r22
    5f46:	b7 95       	ror	r27
    5f48:	f7 95       	ror	r31
    5f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    5f4c:	08 f0       	brcs	.+2      	; 0x5f50 <__addsf3x+0x96>
    5f4e:	b3 cf       	rjmp	.-154    	; 0x5eb6 <__addsf3+0x1e>
    5f50:	93 95       	inc	r25
    5f52:	88 0f       	add	r24, r24
    5f54:	08 f0       	brcs	.+2      	; 0x5f58 <__addsf3x+0x9e>
    5f56:	99 27       	eor	r25, r25
    5f58:	ee 0f       	add	r30, r30
    5f5a:	97 95       	ror	r25
    5f5c:	87 95       	ror	r24
    5f5e:	08 95       	ret

00005f60 <__divsf3>:
    5f60:	0c d0       	rcall	.+24     	; 0x5f7a <__divsf3x>
    5f62:	eb c0       	rjmp	.+470    	; 0x613a <__fp_round>
    5f64:	e3 d0       	rcall	.+454    	; 0x612c <__fp_pscB>
    5f66:	40 f0       	brcs	.+16     	; 0x5f78 <__divsf3+0x18>
    5f68:	da d0       	rcall	.+436    	; 0x611e <__fp_pscA>
    5f6a:	30 f0       	brcs	.+12     	; 0x5f78 <__divsf3+0x18>
    5f6c:	21 f4       	brne	.+8      	; 0x5f76 <__divsf3+0x16>
    5f6e:	5f 3f       	cpi	r21, 0xFF	; 255
    5f70:	19 f0       	breq	.+6      	; 0x5f78 <__divsf3+0x18>
    5f72:	cc c0       	rjmp	.+408    	; 0x610c <__fp_inf>
    5f74:	51 11       	cpse	r21, r1
    5f76:	15 c1       	rjmp	.+554    	; 0x61a2 <__fp_szero>
    5f78:	cf c0       	rjmp	.+414    	; 0x6118 <__fp_nan>

00005f7a <__divsf3x>:
    5f7a:	f0 d0       	rcall	.+480    	; 0x615c <__fp_split3>
    5f7c:	98 f3       	brcs	.-26     	; 0x5f64 <__divsf3+0x4>

00005f7e <__divsf3_pse>:
    5f7e:	99 23       	and	r25, r25
    5f80:	c9 f3       	breq	.-14     	; 0x5f74 <__divsf3+0x14>
    5f82:	55 23       	and	r21, r21
    5f84:	b1 f3       	breq	.-20     	; 0x5f72 <__divsf3+0x12>
    5f86:	95 1b       	sub	r25, r21
    5f88:	55 0b       	sbc	r21, r21
    5f8a:	bb 27       	eor	r27, r27
    5f8c:	aa 27       	eor	r26, r26
    5f8e:	62 17       	cp	r22, r18
    5f90:	73 07       	cpc	r23, r19
    5f92:	84 07       	cpc	r24, r20
    5f94:	38 f0       	brcs	.+14     	; 0x5fa4 <__divsf3_pse+0x26>
    5f96:	9f 5f       	subi	r25, 0xFF	; 255
    5f98:	5f 4f       	sbci	r21, 0xFF	; 255
    5f9a:	22 0f       	add	r18, r18
    5f9c:	33 1f       	adc	r19, r19
    5f9e:	44 1f       	adc	r20, r20
    5fa0:	aa 1f       	adc	r26, r26
    5fa2:	a9 f3       	breq	.-22     	; 0x5f8e <__divsf3_pse+0x10>
    5fa4:	33 d0       	rcall	.+102    	; 0x600c <__divsf3_pse+0x8e>
    5fa6:	0e 2e       	mov	r0, r30
    5fa8:	3a f0       	brmi	.+14     	; 0x5fb8 <__divsf3_pse+0x3a>
    5faa:	e0 e8       	ldi	r30, 0x80	; 128
    5fac:	30 d0       	rcall	.+96     	; 0x600e <__divsf3_pse+0x90>
    5fae:	91 50       	subi	r25, 0x01	; 1
    5fb0:	50 40       	sbci	r21, 0x00	; 0
    5fb2:	e6 95       	lsr	r30
    5fb4:	00 1c       	adc	r0, r0
    5fb6:	ca f7       	brpl	.-14     	; 0x5faa <__divsf3_pse+0x2c>
    5fb8:	29 d0       	rcall	.+82     	; 0x600c <__divsf3_pse+0x8e>
    5fba:	fe 2f       	mov	r31, r30
    5fbc:	27 d0       	rcall	.+78     	; 0x600c <__divsf3_pse+0x8e>
    5fbe:	66 0f       	add	r22, r22
    5fc0:	77 1f       	adc	r23, r23
    5fc2:	88 1f       	adc	r24, r24
    5fc4:	bb 1f       	adc	r27, r27
    5fc6:	26 17       	cp	r18, r22
    5fc8:	37 07       	cpc	r19, r23
    5fca:	48 07       	cpc	r20, r24
    5fcc:	ab 07       	cpc	r26, r27
    5fce:	b0 e8       	ldi	r27, 0x80	; 128
    5fd0:	09 f0       	breq	.+2      	; 0x5fd4 <__divsf3_pse+0x56>
    5fd2:	bb 0b       	sbc	r27, r27
    5fd4:	80 2d       	mov	r24, r0
    5fd6:	bf 01       	movw	r22, r30
    5fd8:	ff 27       	eor	r31, r31
    5fda:	93 58       	subi	r25, 0x83	; 131
    5fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    5fde:	2a f0       	brmi	.+10     	; 0x5fea <__divsf3_pse+0x6c>
    5fe0:	9e 3f       	cpi	r25, 0xFE	; 254
    5fe2:	51 05       	cpc	r21, r1
    5fe4:	68 f0       	brcs	.+26     	; 0x6000 <__divsf3_pse+0x82>
    5fe6:	92 c0       	rjmp	.+292    	; 0x610c <__fp_inf>
    5fe8:	dc c0       	rjmp	.+440    	; 0x61a2 <__fp_szero>
    5fea:	5f 3f       	cpi	r21, 0xFF	; 255
    5fec:	ec f3       	brlt	.-6      	; 0x5fe8 <__divsf3_pse+0x6a>
    5fee:	98 3e       	cpi	r25, 0xE8	; 232
    5ff0:	dc f3       	brlt	.-10     	; 0x5fe8 <__divsf3_pse+0x6a>
    5ff2:	86 95       	lsr	r24
    5ff4:	77 95       	ror	r23
    5ff6:	67 95       	ror	r22
    5ff8:	b7 95       	ror	r27
    5ffa:	f7 95       	ror	r31
    5ffc:	9f 5f       	subi	r25, 0xFF	; 255
    5ffe:	c9 f7       	brne	.-14     	; 0x5ff2 <__divsf3_pse+0x74>
    6000:	88 0f       	add	r24, r24
    6002:	91 1d       	adc	r25, r1
    6004:	96 95       	lsr	r25
    6006:	87 95       	ror	r24
    6008:	97 f9       	bld	r25, 7
    600a:	08 95       	ret
    600c:	e1 e0       	ldi	r30, 0x01	; 1
    600e:	66 0f       	add	r22, r22
    6010:	77 1f       	adc	r23, r23
    6012:	88 1f       	adc	r24, r24
    6014:	bb 1f       	adc	r27, r27
    6016:	62 17       	cp	r22, r18
    6018:	73 07       	cpc	r23, r19
    601a:	84 07       	cpc	r24, r20
    601c:	ba 07       	cpc	r27, r26
    601e:	20 f0       	brcs	.+8      	; 0x6028 <__divsf3_pse+0xaa>
    6020:	62 1b       	sub	r22, r18
    6022:	73 0b       	sbc	r23, r19
    6024:	84 0b       	sbc	r24, r20
    6026:	ba 0b       	sbc	r27, r26
    6028:	ee 1f       	adc	r30, r30
    602a:	88 f7       	brcc	.-30     	; 0x600e <__divsf3_pse+0x90>
    602c:	e0 95       	com	r30
    602e:	08 95       	ret

00006030 <__fixsfsi>:
    6030:	04 d0       	rcall	.+8      	; 0x603a <__fixunssfsi>
    6032:	68 94       	set
    6034:	b1 11       	cpse	r27, r1
    6036:	b5 c0       	rjmp	.+362    	; 0x61a2 <__fp_szero>
    6038:	08 95       	ret

0000603a <__fixunssfsi>:
    603a:	98 d0       	rcall	.+304    	; 0x616c <__fp_splitA>
    603c:	88 f0       	brcs	.+34     	; 0x6060 <__fixunssfsi+0x26>
    603e:	9f 57       	subi	r25, 0x7F	; 127
    6040:	90 f0       	brcs	.+36     	; 0x6066 <__fixunssfsi+0x2c>
    6042:	b9 2f       	mov	r27, r25
    6044:	99 27       	eor	r25, r25
    6046:	b7 51       	subi	r27, 0x17	; 23
    6048:	a0 f0       	brcs	.+40     	; 0x6072 <__fixunssfsi+0x38>
    604a:	d1 f0       	breq	.+52     	; 0x6080 <__fixunssfsi+0x46>
    604c:	66 0f       	add	r22, r22
    604e:	77 1f       	adc	r23, r23
    6050:	88 1f       	adc	r24, r24
    6052:	99 1f       	adc	r25, r25
    6054:	1a f0       	brmi	.+6      	; 0x605c <__fixunssfsi+0x22>
    6056:	ba 95       	dec	r27
    6058:	c9 f7       	brne	.-14     	; 0x604c <__fixunssfsi+0x12>
    605a:	12 c0       	rjmp	.+36     	; 0x6080 <__fixunssfsi+0x46>
    605c:	b1 30       	cpi	r27, 0x01	; 1
    605e:	81 f0       	breq	.+32     	; 0x6080 <__fixunssfsi+0x46>
    6060:	9f d0       	rcall	.+318    	; 0x61a0 <__fp_zero>
    6062:	b1 e0       	ldi	r27, 0x01	; 1
    6064:	08 95       	ret
    6066:	9c c0       	rjmp	.+312    	; 0x61a0 <__fp_zero>
    6068:	67 2f       	mov	r22, r23
    606a:	78 2f       	mov	r23, r24
    606c:	88 27       	eor	r24, r24
    606e:	b8 5f       	subi	r27, 0xF8	; 248
    6070:	39 f0       	breq	.+14     	; 0x6080 <__fixunssfsi+0x46>
    6072:	b9 3f       	cpi	r27, 0xF9	; 249
    6074:	cc f3       	brlt	.-14     	; 0x6068 <__fixunssfsi+0x2e>
    6076:	86 95       	lsr	r24
    6078:	77 95       	ror	r23
    607a:	67 95       	ror	r22
    607c:	b3 95       	inc	r27
    607e:	d9 f7       	brne	.-10     	; 0x6076 <__fixunssfsi+0x3c>
    6080:	3e f4       	brtc	.+14     	; 0x6090 <__fixunssfsi+0x56>
    6082:	90 95       	com	r25
    6084:	80 95       	com	r24
    6086:	70 95       	com	r23
    6088:	61 95       	neg	r22
    608a:	7f 4f       	sbci	r23, 0xFF	; 255
    608c:	8f 4f       	sbci	r24, 0xFF	; 255
    608e:	9f 4f       	sbci	r25, 0xFF	; 255
    6090:	08 95       	ret

00006092 <__floatunsisf>:
    6092:	e8 94       	clt
    6094:	09 c0       	rjmp	.+18     	; 0x60a8 <__floatsisf+0x12>

00006096 <__floatsisf>:
    6096:	97 fb       	bst	r25, 7
    6098:	3e f4       	brtc	.+14     	; 0x60a8 <__floatsisf+0x12>
    609a:	90 95       	com	r25
    609c:	80 95       	com	r24
    609e:	70 95       	com	r23
    60a0:	61 95       	neg	r22
    60a2:	7f 4f       	sbci	r23, 0xFF	; 255
    60a4:	8f 4f       	sbci	r24, 0xFF	; 255
    60a6:	9f 4f       	sbci	r25, 0xFF	; 255
    60a8:	99 23       	and	r25, r25
    60aa:	a9 f0       	breq	.+42     	; 0x60d6 <__floatsisf+0x40>
    60ac:	f9 2f       	mov	r31, r25
    60ae:	96 e9       	ldi	r25, 0x96	; 150
    60b0:	bb 27       	eor	r27, r27
    60b2:	93 95       	inc	r25
    60b4:	f6 95       	lsr	r31
    60b6:	87 95       	ror	r24
    60b8:	77 95       	ror	r23
    60ba:	67 95       	ror	r22
    60bc:	b7 95       	ror	r27
    60be:	f1 11       	cpse	r31, r1
    60c0:	f8 cf       	rjmp	.-16     	; 0x60b2 <__floatsisf+0x1c>
    60c2:	fa f4       	brpl	.+62     	; 0x6102 <__floatsisf+0x6c>
    60c4:	bb 0f       	add	r27, r27
    60c6:	11 f4       	brne	.+4      	; 0x60cc <__floatsisf+0x36>
    60c8:	60 ff       	sbrs	r22, 0
    60ca:	1b c0       	rjmp	.+54     	; 0x6102 <__floatsisf+0x6c>
    60cc:	6f 5f       	subi	r22, 0xFF	; 255
    60ce:	7f 4f       	sbci	r23, 0xFF	; 255
    60d0:	8f 4f       	sbci	r24, 0xFF	; 255
    60d2:	9f 4f       	sbci	r25, 0xFF	; 255
    60d4:	16 c0       	rjmp	.+44     	; 0x6102 <__floatsisf+0x6c>
    60d6:	88 23       	and	r24, r24
    60d8:	11 f0       	breq	.+4      	; 0x60de <__floatsisf+0x48>
    60da:	96 e9       	ldi	r25, 0x96	; 150
    60dc:	11 c0       	rjmp	.+34     	; 0x6100 <__floatsisf+0x6a>
    60de:	77 23       	and	r23, r23
    60e0:	21 f0       	breq	.+8      	; 0x60ea <__floatsisf+0x54>
    60e2:	9e e8       	ldi	r25, 0x8E	; 142
    60e4:	87 2f       	mov	r24, r23
    60e6:	76 2f       	mov	r23, r22
    60e8:	05 c0       	rjmp	.+10     	; 0x60f4 <__floatsisf+0x5e>
    60ea:	66 23       	and	r22, r22
    60ec:	71 f0       	breq	.+28     	; 0x610a <__floatsisf+0x74>
    60ee:	96 e8       	ldi	r25, 0x86	; 134
    60f0:	86 2f       	mov	r24, r22
    60f2:	70 e0       	ldi	r23, 0x00	; 0
    60f4:	60 e0       	ldi	r22, 0x00	; 0
    60f6:	2a f0       	brmi	.+10     	; 0x6102 <__floatsisf+0x6c>
    60f8:	9a 95       	dec	r25
    60fa:	66 0f       	add	r22, r22
    60fc:	77 1f       	adc	r23, r23
    60fe:	88 1f       	adc	r24, r24
    6100:	da f7       	brpl	.-10     	; 0x60f8 <__floatsisf+0x62>
    6102:	88 0f       	add	r24, r24
    6104:	96 95       	lsr	r25
    6106:	87 95       	ror	r24
    6108:	97 f9       	bld	r25, 7
    610a:	08 95       	ret

0000610c <__fp_inf>:
    610c:	97 f9       	bld	r25, 7
    610e:	9f 67       	ori	r25, 0x7F	; 127
    6110:	80 e8       	ldi	r24, 0x80	; 128
    6112:	70 e0       	ldi	r23, 0x00	; 0
    6114:	60 e0       	ldi	r22, 0x00	; 0
    6116:	08 95       	ret

00006118 <__fp_nan>:
    6118:	9f ef       	ldi	r25, 0xFF	; 255
    611a:	80 ec       	ldi	r24, 0xC0	; 192
    611c:	08 95       	ret

0000611e <__fp_pscA>:
    611e:	00 24       	eor	r0, r0
    6120:	0a 94       	dec	r0
    6122:	16 16       	cp	r1, r22
    6124:	17 06       	cpc	r1, r23
    6126:	18 06       	cpc	r1, r24
    6128:	09 06       	cpc	r0, r25
    612a:	08 95       	ret

0000612c <__fp_pscB>:
    612c:	00 24       	eor	r0, r0
    612e:	0a 94       	dec	r0
    6130:	12 16       	cp	r1, r18
    6132:	13 06       	cpc	r1, r19
    6134:	14 06       	cpc	r1, r20
    6136:	05 06       	cpc	r0, r21
    6138:	08 95       	ret

0000613a <__fp_round>:
    613a:	09 2e       	mov	r0, r25
    613c:	03 94       	inc	r0
    613e:	00 0c       	add	r0, r0
    6140:	11 f4       	brne	.+4      	; 0x6146 <__fp_round+0xc>
    6142:	88 23       	and	r24, r24
    6144:	52 f0       	brmi	.+20     	; 0x615a <__fp_round+0x20>
    6146:	bb 0f       	add	r27, r27
    6148:	40 f4       	brcc	.+16     	; 0x615a <__fp_round+0x20>
    614a:	bf 2b       	or	r27, r31
    614c:	11 f4       	brne	.+4      	; 0x6152 <__fp_round+0x18>
    614e:	60 ff       	sbrs	r22, 0
    6150:	04 c0       	rjmp	.+8      	; 0x615a <__fp_round+0x20>
    6152:	6f 5f       	subi	r22, 0xFF	; 255
    6154:	7f 4f       	sbci	r23, 0xFF	; 255
    6156:	8f 4f       	sbci	r24, 0xFF	; 255
    6158:	9f 4f       	sbci	r25, 0xFF	; 255
    615a:	08 95       	ret

0000615c <__fp_split3>:
    615c:	57 fd       	sbrc	r21, 7
    615e:	90 58       	subi	r25, 0x80	; 128
    6160:	44 0f       	add	r20, r20
    6162:	55 1f       	adc	r21, r21
    6164:	59 f0       	breq	.+22     	; 0x617c <__fp_splitA+0x10>
    6166:	5f 3f       	cpi	r21, 0xFF	; 255
    6168:	71 f0       	breq	.+28     	; 0x6186 <__fp_splitA+0x1a>
    616a:	47 95       	ror	r20

0000616c <__fp_splitA>:
    616c:	88 0f       	add	r24, r24
    616e:	97 fb       	bst	r25, 7
    6170:	99 1f       	adc	r25, r25
    6172:	61 f0       	breq	.+24     	; 0x618c <__fp_splitA+0x20>
    6174:	9f 3f       	cpi	r25, 0xFF	; 255
    6176:	79 f0       	breq	.+30     	; 0x6196 <__fp_splitA+0x2a>
    6178:	87 95       	ror	r24
    617a:	08 95       	ret
    617c:	12 16       	cp	r1, r18
    617e:	13 06       	cpc	r1, r19
    6180:	14 06       	cpc	r1, r20
    6182:	55 1f       	adc	r21, r21
    6184:	f2 cf       	rjmp	.-28     	; 0x616a <__fp_split3+0xe>
    6186:	46 95       	lsr	r20
    6188:	f1 df       	rcall	.-30     	; 0x616c <__fp_splitA>
    618a:	08 c0       	rjmp	.+16     	; 0x619c <__fp_splitA+0x30>
    618c:	16 16       	cp	r1, r22
    618e:	17 06       	cpc	r1, r23
    6190:	18 06       	cpc	r1, r24
    6192:	99 1f       	adc	r25, r25
    6194:	f1 cf       	rjmp	.-30     	; 0x6178 <__fp_splitA+0xc>
    6196:	86 95       	lsr	r24
    6198:	71 05       	cpc	r23, r1
    619a:	61 05       	cpc	r22, r1
    619c:	08 94       	sec
    619e:	08 95       	ret

000061a0 <__fp_zero>:
    61a0:	e8 94       	clt

000061a2 <__fp_szero>:
    61a2:	bb 27       	eor	r27, r27
    61a4:	66 27       	eor	r22, r22
    61a6:	77 27       	eor	r23, r23
    61a8:	cb 01       	movw	r24, r22
    61aa:	97 f9       	bld	r25, 7
    61ac:	08 95       	ret

000061ae <__mulsf3>:
    61ae:	0b d0       	rcall	.+22     	; 0x61c6 <__mulsf3x>
    61b0:	c4 cf       	rjmp	.-120    	; 0x613a <__fp_round>
    61b2:	b5 df       	rcall	.-150    	; 0x611e <__fp_pscA>
    61b4:	28 f0       	brcs	.+10     	; 0x61c0 <__mulsf3+0x12>
    61b6:	ba df       	rcall	.-140    	; 0x612c <__fp_pscB>
    61b8:	18 f0       	brcs	.+6      	; 0x61c0 <__mulsf3+0x12>
    61ba:	95 23       	and	r25, r21
    61bc:	09 f0       	breq	.+2      	; 0x61c0 <__mulsf3+0x12>
    61be:	a6 cf       	rjmp	.-180    	; 0x610c <__fp_inf>
    61c0:	ab cf       	rjmp	.-170    	; 0x6118 <__fp_nan>
    61c2:	11 24       	eor	r1, r1
    61c4:	ee cf       	rjmp	.-36     	; 0x61a2 <__fp_szero>

000061c6 <__mulsf3x>:
    61c6:	ca df       	rcall	.-108    	; 0x615c <__fp_split3>
    61c8:	a0 f3       	brcs	.-24     	; 0x61b2 <__mulsf3+0x4>

000061ca <__mulsf3_pse>:
    61ca:	95 9f       	mul	r25, r21
    61cc:	d1 f3       	breq	.-12     	; 0x61c2 <__mulsf3+0x14>
    61ce:	95 0f       	add	r25, r21
    61d0:	50 e0       	ldi	r21, 0x00	; 0
    61d2:	55 1f       	adc	r21, r21
    61d4:	62 9f       	mul	r22, r18
    61d6:	f0 01       	movw	r30, r0
    61d8:	72 9f       	mul	r23, r18
    61da:	bb 27       	eor	r27, r27
    61dc:	f0 0d       	add	r31, r0
    61de:	b1 1d       	adc	r27, r1
    61e0:	63 9f       	mul	r22, r19
    61e2:	aa 27       	eor	r26, r26
    61e4:	f0 0d       	add	r31, r0
    61e6:	b1 1d       	adc	r27, r1
    61e8:	aa 1f       	adc	r26, r26
    61ea:	64 9f       	mul	r22, r20
    61ec:	66 27       	eor	r22, r22
    61ee:	b0 0d       	add	r27, r0
    61f0:	a1 1d       	adc	r26, r1
    61f2:	66 1f       	adc	r22, r22
    61f4:	82 9f       	mul	r24, r18
    61f6:	22 27       	eor	r18, r18
    61f8:	b0 0d       	add	r27, r0
    61fa:	a1 1d       	adc	r26, r1
    61fc:	62 1f       	adc	r22, r18
    61fe:	73 9f       	mul	r23, r19
    6200:	b0 0d       	add	r27, r0
    6202:	a1 1d       	adc	r26, r1
    6204:	62 1f       	adc	r22, r18
    6206:	83 9f       	mul	r24, r19
    6208:	a0 0d       	add	r26, r0
    620a:	61 1d       	adc	r22, r1
    620c:	22 1f       	adc	r18, r18
    620e:	74 9f       	mul	r23, r20
    6210:	33 27       	eor	r19, r19
    6212:	a0 0d       	add	r26, r0
    6214:	61 1d       	adc	r22, r1
    6216:	23 1f       	adc	r18, r19
    6218:	84 9f       	mul	r24, r20
    621a:	60 0d       	add	r22, r0
    621c:	21 1d       	adc	r18, r1
    621e:	82 2f       	mov	r24, r18
    6220:	76 2f       	mov	r23, r22
    6222:	6a 2f       	mov	r22, r26
    6224:	11 24       	eor	r1, r1
    6226:	9f 57       	subi	r25, 0x7F	; 127
    6228:	50 40       	sbci	r21, 0x00	; 0
    622a:	8a f0       	brmi	.+34     	; 0x624e <__mulsf3_pse+0x84>
    622c:	e1 f0       	breq	.+56     	; 0x6266 <__mulsf3_pse+0x9c>
    622e:	88 23       	and	r24, r24
    6230:	4a f0       	brmi	.+18     	; 0x6244 <__mulsf3_pse+0x7a>
    6232:	ee 0f       	add	r30, r30
    6234:	ff 1f       	adc	r31, r31
    6236:	bb 1f       	adc	r27, r27
    6238:	66 1f       	adc	r22, r22
    623a:	77 1f       	adc	r23, r23
    623c:	88 1f       	adc	r24, r24
    623e:	91 50       	subi	r25, 0x01	; 1
    6240:	50 40       	sbci	r21, 0x00	; 0
    6242:	a9 f7       	brne	.-22     	; 0x622e <__mulsf3_pse+0x64>
    6244:	9e 3f       	cpi	r25, 0xFE	; 254
    6246:	51 05       	cpc	r21, r1
    6248:	70 f0       	brcs	.+28     	; 0x6266 <__mulsf3_pse+0x9c>
    624a:	60 cf       	rjmp	.-320    	; 0x610c <__fp_inf>
    624c:	aa cf       	rjmp	.-172    	; 0x61a2 <__fp_szero>
    624e:	5f 3f       	cpi	r21, 0xFF	; 255
    6250:	ec f3       	brlt	.-6      	; 0x624c <__mulsf3_pse+0x82>
    6252:	98 3e       	cpi	r25, 0xE8	; 232
    6254:	dc f3       	brlt	.-10     	; 0x624c <__mulsf3_pse+0x82>
    6256:	86 95       	lsr	r24
    6258:	77 95       	ror	r23
    625a:	67 95       	ror	r22
    625c:	b7 95       	ror	r27
    625e:	f7 95       	ror	r31
    6260:	e7 95       	ror	r30
    6262:	9f 5f       	subi	r25, 0xFF	; 255
    6264:	c1 f7       	brne	.-16     	; 0x6256 <__mulsf3_pse+0x8c>
    6266:	fe 2b       	or	r31, r30
    6268:	88 0f       	add	r24, r24
    626a:	91 1d       	adc	r25, r1
    626c:	96 95       	lsr	r25
    626e:	87 95       	ror	r24
    6270:	97 f9       	bld	r25, 7
    6272:	08 95       	ret

00006274 <__divmodhi4>:
    6274:	97 fb       	bst	r25, 7
    6276:	07 2e       	mov	r0, r23
    6278:	16 f4       	brtc	.+4      	; 0x627e <__divmodhi4+0xa>
    627a:	00 94       	com	r0
    627c:	06 d0       	rcall	.+12     	; 0x628a <__divmodhi4_neg1>
    627e:	77 fd       	sbrc	r23, 7
    6280:	08 d0       	rcall	.+16     	; 0x6292 <__divmodhi4_neg2>
    6282:	35 d0       	rcall	.+106    	; 0x62ee <__udivmodhi4>
    6284:	07 fc       	sbrc	r0, 7
    6286:	05 d0       	rcall	.+10     	; 0x6292 <__divmodhi4_neg2>
    6288:	3e f4       	brtc	.+14     	; 0x6298 <__divmodhi4_exit>

0000628a <__divmodhi4_neg1>:
    628a:	90 95       	com	r25
    628c:	81 95       	neg	r24
    628e:	9f 4f       	sbci	r25, 0xFF	; 255
    6290:	08 95       	ret

00006292 <__divmodhi4_neg2>:
    6292:	70 95       	com	r23
    6294:	61 95       	neg	r22
    6296:	7f 4f       	sbci	r23, 0xFF	; 255

00006298 <__divmodhi4_exit>:
    6298:	08 95       	ret

0000629a <__udivmodsi4>:
    629a:	a1 e2       	ldi	r26, 0x21	; 33
    629c:	1a 2e       	mov	r1, r26
    629e:	aa 1b       	sub	r26, r26
    62a0:	bb 1b       	sub	r27, r27
    62a2:	fd 01       	movw	r30, r26
    62a4:	0d c0       	rjmp	.+26     	; 0x62c0 <__udivmodsi4_ep>

000062a6 <__udivmodsi4_loop>:
    62a6:	aa 1f       	adc	r26, r26
    62a8:	bb 1f       	adc	r27, r27
    62aa:	ee 1f       	adc	r30, r30
    62ac:	ff 1f       	adc	r31, r31
    62ae:	a2 17       	cp	r26, r18
    62b0:	b3 07       	cpc	r27, r19
    62b2:	e4 07       	cpc	r30, r20
    62b4:	f5 07       	cpc	r31, r21
    62b6:	20 f0       	brcs	.+8      	; 0x62c0 <__udivmodsi4_ep>
    62b8:	a2 1b       	sub	r26, r18
    62ba:	b3 0b       	sbc	r27, r19
    62bc:	e4 0b       	sbc	r30, r20
    62be:	f5 0b       	sbc	r31, r21

000062c0 <__udivmodsi4_ep>:
    62c0:	66 1f       	adc	r22, r22
    62c2:	77 1f       	adc	r23, r23
    62c4:	88 1f       	adc	r24, r24
    62c6:	99 1f       	adc	r25, r25
    62c8:	1a 94       	dec	r1
    62ca:	69 f7       	brne	.-38     	; 0x62a6 <__udivmodsi4_loop>
    62cc:	60 95       	com	r22
    62ce:	70 95       	com	r23
    62d0:	80 95       	com	r24
    62d2:	90 95       	com	r25
    62d4:	9b 01       	movw	r18, r22
    62d6:	ac 01       	movw	r20, r24
    62d8:	bd 01       	movw	r22, r26
    62da:	cf 01       	movw	r24, r30
    62dc:	08 95       	ret

000062de <__tablejump2__>:
    62de:	ee 0f       	add	r30, r30
    62e0:	ff 1f       	adc	r31, r31
    62e2:	88 1f       	adc	r24, r24
    62e4:	8b bf       	out	0x3b, r24	; 59
    62e6:	07 90       	elpm	r0, Z+
    62e8:	f6 91       	elpm	r31, Z
    62ea:	e0 2d       	mov	r30, r0
    62ec:	19 94       	eijmp

000062ee <__udivmodhi4>:
    62ee:	aa 1b       	sub	r26, r26
    62f0:	bb 1b       	sub	r27, r27
    62f2:	51 e1       	ldi	r21, 0x11	; 17
    62f4:	07 c0       	rjmp	.+14     	; 0x6304 <__udivmodhi4_ep>

000062f6 <__udivmodhi4_loop>:
    62f6:	aa 1f       	adc	r26, r26
    62f8:	bb 1f       	adc	r27, r27
    62fa:	a6 17       	cp	r26, r22
    62fc:	b7 07       	cpc	r27, r23
    62fe:	10 f0       	brcs	.+4      	; 0x6304 <__udivmodhi4_ep>
    6300:	a6 1b       	sub	r26, r22
    6302:	b7 0b       	sbc	r27, r23

00006304 <__udivmodhi4_ep>:
    6304:	88 1f       	adc	r24, r24
    6306:	99 1f       	adc	r25, r25
    6308:	5a 95       	dec	r21
    630a:	a9 f7       	brne	.-22     	; 0x62f6 <__udivmodhi4_loop>
    630c:	80 95       	com	r24
    630e:	90 95       	com	r25
    6310:	bc 01       	movw	r22, r24
    6312:	cd 01       	movw	r24, r26
    6314:	08 95       	ret

00006316 <malloc>:
    6316:	0f 93       	push	r16
    6318:	1f 93       	push	r17
    631a:	cf 93       	push	r28
    631c:	df 93       	push	r29
    631e:	82 30       	cpi	r24, 0x02	; 2
    6320:	91 05       	cpc	r25, r1
    6322:	10 f4       	brcc	.+4      	; 0x6328 <malloc+0x12>
    6324:	82 e0       	ldi	r24, 0x02	; 2
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	e0 91 76 1a 	lds	r30, 0x1A76	; 0x801a76 <__flp>
    632c:	f0 91 77 1a 	lds	r31, 0x1A77	; 0x801a77 <__flp+0x1>
    6330:	20 e0       	ldi	r18, 0x00	; 0
    6332:	30 e0       	ldi	r19, 0x00	; 0
    6334:	a0 e0       	ldi	r26, 0x00	; 0
    6336:	b0 e0       	ldi	r27, 0x00	; 0
    6338:	30 97       	sbiw	r30, 0x00	; 0
    633a:	19 f1       	breq	.+70     	; 0x6382 <malloc+0x6c>
    633c:	40 81       	ld	r20, Z
    633e:	51 81       	ldd	r21, Z+1	; 0x01
    6340:	02 81       	ldd	r16, Z+2	; 0x02
    6342:	13 81       	ldd	r17, Z+3	; 0x03
    6344:	48 17       	cp	r20, r24
    6346:	59 07       	cpc	r21, r25
    6348:	c8 f0       	brcs	.+50     	; 0x637c <malloc+0x66>
    634a:	84 17       	cp	r24, r20
    634c:	95 07       	cpc	r25, r21
    634e:	69 f4       	brne	.+26     	; 0x636a <malloc+0x54>
    6350:	10 97       	sbiw	r26, 0x00	; 0
    6352:	31 f0       	breq	.+12     	; 0x6360 <malloc+0x4a>
    6354:	12 96       	adiw	r26, 0x02	; 2
    6356:	0c 93       	st	X, r16
    6358:	12 97       	sbiw	r26, 0x02	; 2
    635a:	13 96       	adiw	r26, 0x03	; 3
    635c:	1c 93       	st	X, r17
    635e:	27 c0       	rjmp	.+78     	; 0x63ae <malloc+0x98>
    6360:	00 93 76 1a 	sts	0x1A76, r16	; 0x801a76 <__flp>
    6364:	10 93 77 1a 	sts	0x1A77, r17	; 0x801a77 <__flp+0x1>
    6368:	22 c0       	rjmp	.+68     	; 0x63ae <malloc+0x98>
    636a:	21 15       	cp	r18, r1
    636c:	31 05       	cpc	r19, r1
    636e:	19 f0       	breq	.+6      	; 0x6376 <malloc+0x60>
    6370:	42 17       	cp	r20, r18
    6372:	53 07       	cpc	r21, r19
    6374:	18 f4       	brcc	.+6      	; 0x637c <malloc+0x66>
    6376:	9a 01       	movw	r18, r20
    6378:	bd 01       	movw	r22, r26
    637a:	ef 01       	movw	r28, r30
    637c:	df 01       	movw	r26, r30
    637e:	f8 01       	movw	r30, r16
    6380:	db cf       	rjmp	.-74     	; 0x6338 <malloc+0x22>
    6382:	21 15       	cp	r18, r1
    6384:	31 05       	cpc	r19, r1
    6386:	f9 f0       	breq	.+62     	; 0x63c6 <malloc+0xb0>
    6388:	28 1b       	sub	r18, r24
    638a:	39 0b       	sbc	r19, r25
    638c:	24 30       	cpi	r18, 0x04	; 4
    638e:	31 05       	cpc	r19, r1
    6390:	80 f4       	brcc	.+32     	; 0x63b2 <malloc+0x9c>
    6392:	8a 81       	ldd	r24, Y+2	; 0x02
    6394:	9b 81       	ldd	r25, Y+3	; 0x03
    6396:	61 15       	cp	r22, r1
    6398:	71 05       	cpc	r23, r1
    639a:	21 f0       	breq	.+8      	; 0x63a4 <malloc+0x8e>
    639c:	fb 01       	movw	r30, r22
    639e:	93 83       	std	Z+3, r25	; 0x03
    63a0:	82 83       	std	Z+2, r24	; 0x02
    63a2:	04 c0       	rjmp	.+8      	; 0x63ac <malloc+0x96>
    63a4:	90 93 77 1a 	sts	0x1A77, r25	; 0x801a77 <__flp+0x1>
    63a8:	80 93 76 1a 	sts	0x1A76, r24	; 0x801a76 <__flp>
    63ac:	fe 01       	movw	r30, r28
    63ae:	32 96       	adiw	r30, 0x02	; 2
    63b0:	44 c0       	rjmp	.+136    	; 0x643a <malloc+0x124>
    63b2:	fe 01       	movw	r30, r28
    63b4:	e2 0f       	add	r30, r18
    63b6:	f3 1f       	adc	r31, r19
    63b8:	81 93       	st	Z+, r24
    63ba:	91 93       	st	Z+, r25
    63bc:	22 50       	subi	r18, 0x02	; 2
    63be:	31 09       	sbc	r19, r1
    63c0:	39 83       	std	Y+1, r19	; 0x01
    63c2:	28 83       	st	Y, r18
    63c4:	3a c0       	rjmp	.+116    	; 0x643a <malloc+0x124>
    63c6:	20 91 74 1a 	lds	r18, 0x1A74	; 0x801a74 <__brkval>
    63ca:	30 91 75 1a 	lds	r19, 0x1A75	; 0x801a75 <__brkval+0x1>
    63ce:	23 2b       	or	r18, r19
    63d0:	41 f4       	brne	.+16     	; 0x63e2 <malloc+0xcc>
    63d2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    63d6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    63da:	30 93 75 1a 	sts	0x1A75, r19	; 0x801a75 <__brkval+0x1>
    63de:	20 93 74 1a 	sts	0x1A74, r18	; 0x801a74 <__brkval>
    63e2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    63e6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    63ea:	21 15       	cp	r18, r1
    63ec:	31 05       	cpc	r19, r1
    63ee:	41 f4       	brne	.+16     	; 0x6400 <malloc+0xea>
    63f0:	2d b7       	in	r18, 0x3d	; 61
    63f2:	3e b7       	in	r19, 0x3e	; 62
    63f4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    63f8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    63fc:	24 1b       	sub	r18, r20
    63fe:	35 0b       	sbc	r19, r21
    6400:	e0 91 74 1a 	lds	r30, 0x1A74	; 0x801a74 <__brkval>
    6404:	f0 91 75 1a 	lds	r31, 0x1A75	; 0x801a75 <__brkval+0x1>
    6408:	e2 17       	cp	r30, r18
    640a:	f3 07       	cpc	r31, r19
    640c:	a0 f4       	brcc	.+40     	; 0x6436 <malloc+0x120>
    640e:	2e 1b       	sub	r18, r30
    6410:	3f 0b       	sbc	r19, r31
    6412:	28 17       	cp	r18, r24
    6414:	39 07       	cpc	r19, r25
    6416:	78 f0       	brcs	.+30     	; 0x6436 <malloc+0x120>
    6418:	ac 01       	movw	r20, r24
    641a:	4e 5f       	subi	r20, 0xFE	; 254
    641c:	5f 4f       	sbci	r21, 0xFF	; 255
    641e:	24 17       	cp	r18, r20
    6420:	35 07       	cpc	r19, r21
    6422:	48 f0       	brcs	.+18     	; 0x6436 <malloc+0x120>
    6424:	4e 0f       	add	r20, r30
    6426:	5f 1f       	adc	r21, r31
    6428:	50 93 75 1a 	sts	0x1A75, r21	; 0x801a75 <__brkval+0x1>
    642c:	40 93 74 1a 	sts	0x1A74, r20	; 0x801a74 <__brkval>
    6430:	81 93       	st	Z+, r24
    6432:	91 93       	st	Z+, r25
    6434:	02 c0       	rjmp	.+4      	; 0x643a <malloc+0x124>
    6436:	e0 e0       	ldi	r30, 0x00	; 0
    6438:	f0 e0       	ldi	r31, 0x00	; 0
    643a:	cf 01       	movw	r24, r30
    643c:	df 91       	pop	r29
    643e:	cf 91       	pop	r28
    6440:	1f 91       	pop	r17
    6442:	0f 91       	pop	r16
    6444:	08 95       	ret

00006446 <free>:
    6446:	cf 93       	push	r28
    6448:	df 93       	push	r29
    644a:	00 97       	sbiw	r24, 0x00	; 0
    644c:	09 f4       	brne	.+2      	; 0x6450 <free+0xa>
    644e:	81 c0       	rjmp	.+258    	; 0x6552 <free+0x10c>
    6450:	fc 01       	movw	r30, r24
    6452:	32 97       	sbiw	r30, 0x02	; 2
    6454:	13 82       	std	Z+3, r1	; 0x03
    6456:	12 82       	std	Z+2, r1	; 0x02
    6458:	a0 91 76 1a 	lds	r26, 0x1A76	; 0x801a76 <__flp>
    645c:	b0 91 77 1a 	lds	r27, 0x1A77	; 0x801a77 <__flp+0x1>
    6460:	10 97       	sbiw	r26, 0x00	; 0
    6462:	81 f4       	brne	.+32     	; 0x6484 <free+0x3e>
    6464:	20 81       	ld	r18, Z
    6466:	31 81       	ldd	r19, Z+1	; 0x01
    6468:	82 0f       	add	r24, r18
    646a:	93 1f       	adc	r25, r19
    646c:	20 91 74 1a 	lds	r18, 0x1A74	; 0x801a74 <__brkval>
    6470:	30 91 75 1a 	lds	r19, 0x1A75	; 0x801a75 <__brkval+0x1>
    6474:	28 17       	cp	r18, r24
    6476:	39 07       	cpc	r19, r25
    6478:	51 f5       	brne	.+84     	; 0x64ce <free+0x88>
    647a:	f0 93 75 1a 	sts	0x1A75, r31	; 0x801a75 <__brkval+0x1>
    647e:	e0 93 74 1a 	sts	0x1A74, r30	; 0x801a74 <__brkval>
    6482:	67 c0       	rjmp	.+206    	; 0x6552 <free+0x10c>
    6484:	ed 01       	movw	r28, r26
    6486:	20 e0       	ldi	r18, 0x00	; 0
    6488:	30 e0       	ldi	r19, 0x00	; 0
    648a:	ce 17       	cp	r28, r30
    648c:	df 07       	cpc	r29, r31
    648e:	40 f4       	brcc	.+16     	; 0x64a0 <free+0x5a>
    6490:	4a 81       	ldd	r20, Y+2	; 0x02
    6492:	5b 81       	ldd	r21, Y+3	; 0x03
    6494:	9e 01       	movw	r18, r28
    6496:	41 15       	cp	r20, r1
    6498:	51 05       	cpc	r21, r1
    649a:	f1 f0       	breq	.+60     	; 0x64d8 <free+0x92>
    649c:	ea 01       	movw	r28, r20
    649e:	f5 cf       	rjmp	.-22     	; 0x648a <free+0x44>
    64a0:	d3 83       	std	Z+3, r29	; 0x03
    64a2:	c2 83       	std	Z+2, r28	; 0x02
    64a4:	40 81       	ld	r20, Z
    64a6:	51 81       	ldd	r21, Z+1	; 0x01
    64a8:	84 0f       	add	r24, r20
    64aa:	95 1f       	adc	r25, r21
    64ac:	c8 17       	cp	r28, r24
    64ae:	d9 07       	cpc	r29, r25
    64b0:	59 f4       	brne	.+22     	; 0x64c8 <free+0x82>
    64b2:	88 81       	ld	r24, Y
    64b4:	99 81       	ldd	r25, Y+1	; 0x01
    64b6:	84 0f       	add	r24, r20
    64b8:	95 1f       	adc	r25, r21
    64ba:	02 96       	adiw	r24, 0x02	; 2
    64bc:	91 83       	std	Z+1, r25	; 0x01
    64be:	80 83       	st	Z, r24
    64c0:	8a 81       	ldd	r24, Y+2	; 0x02
    64c2:	9b 81       	ldd	r25, Y+3	; 0x03
    64c4:	93 83       	std	Z+3, r25	; 0x03
    64c6:	82 83       	std	Z+2, r24	; 0x02
    64c8:	21 15       	cp	r18, r1
    64ca:	31 05       	cpc	r19, r1
    64cc:	29 f4       	brne	.+10     	; 0x64d8 <free+0x92>
    64ce:	f0 93 77 1a 	sts	0x1A77, r31	; 0x801a77 <__flp+0x1>
    64d2:	e0 93 76 1a 	sts	0x1A76, r30	; 0x801a76 <__flp>
    64d6:	3d c0       	rjmp	.+122    	; 0x6552 <free+0x10c>
    64d8:	e9 01       	movw	r28, r18
    64da:	fb 83       	std	Y+3, r31	; 0x03
    64dc:	ea 83       	std	Y+2, r30	; 0x02
    64de:	49 91       	ld	r20, Y+
    64e0:	59 91       	ld	r21, Y+
    64e2:	c4 0f       	add	r28, r20
    64e4:	d5 1f       	adc	r29, r21
    64e6:	ec 17       	cp	r30, r28
    64e8:	fd 07       	cpc	r31, r29
    64ea:	61 f4       	brne	.+24     	; 0x6504 <free+0xbe>
    64ec:	80 81       	ld	r24, Z
    64ee:	91 81       	ldd	r25, Z+1	; 0x01
    64f0:	84 0f       	add	r24, r20
    64f2:	95 1f       	adc	r25, r21
    64f4:	02 96       	adiw	r24, 0x02	; 2
    64f6:	e9 01       	movw	r28, r18
    64f8:	99 83       	std	Y+1, r25	; 0x01
    64fa:	88 83       	st	Y, r24
    64fc:	82 81       	ldd	r24, Z+2	; 0x02
    64fe:	93 81       	ldd	r25, Z+3	; 0x03
    6500:	9b 83       	std	Y+3, r25	; 0x03
    6502:	8a 83       	std	Y+2, r24	; 0x02
    6504:	e0 e0       	ldi	r30, 0x00	; 0
    6506:	f0 e0       	ldi	r31, 0x00	; 0
    6508:	12 96       	adiw	r26, 0x02	; 2
    650a:	8d 91       	ld	r24, X+
    650c:	9c 91       	ld	r25, X
    650e:	13 97       	sbiw	r26, 0x03	; 3
    6510:	00 97       	sbiw	r24, 0x00	; 0
    6512:	19 f0       	breq	.+6      	; 0x651a <free+0xd4>
    6514:	fd 01       	movw	r30, r26
    6516:	dc 01       	movw	r26, r24
    6518:	f7 cf       	rjmp	.-18     	; 0x6508 <free+0xc2>
    651a:	8d 91       	ld	r24, X+
    651c:	9c 91       	ld	r25, X
    651e:	11 97       	sbiw	r26, 0x01	; 1
    6520:	9d 01       	movw	r18, r26
    6522:	2e 5f       	subi	r18, 0xFE	; 254
    6524:	3f 4f       	sbci	r19, 0xFF	; 255
    6526:	82 0f       	add	r24, r18
    6528:	93 1f       	adc	r25, r19
    652a:	20 91 74 1a 	lds	r18, 0x1A74	; 0x801a74 <__brkval>
    652e:	30 91 75 1a 	lds	r19, 0x1A75	; 0x801a75 <__brkval+0x1>
    6532:	28 17       	cp	r18, r24
    6534:	39 07       	cpc	r19, r25
    6536:	69 f4       	brne	.+26     	; 0x6552 <free+0x10c>
    6538:	30 97       	sbiw	r30, 0x00	; 0
    653a:	29 f4       	brne	.+10     	; 0x6546 <free+0x100>
    653c:	10 92 77 1a 	sts	0x1A77, r1	; 0x801a77 <__flp+0x1>
    6540:	10 92 76 1a 	sts	0x1A76, r1	; 0x801a76 <__flp>
    6544:	02 c0       	rjmp	.+4      	; 0x654a <free+0x104>
    6546:	13 82       	std	Z+3, r1	; 0x03
    6548:	12 82       	std	Z+2, r1	; 0x02
    654a:	b0 93 75 1a 	sts	0x1A75, r27	; 0x801a75 <__brkval+0x1>
    654e:	a0 93 74 1a 	sts	0x1A74, r26	; 0x801a74 <__brkval>
    6552:	df 91       	pop	r29
    6554:	cf 91       	pop	r28
    6556:	08 95       	ret

00006558 <abort>:
    6558:	81 e0       	ldi	r24, 0x01	; 1
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	f8 94       	cli
    655e:	5a c2       	rjmp	.+1204   	; 0x6a14 <_exit>

00006560 <__ftoa_engine>:
    6560:	28 30       	cpi	r18, 0x08	; 8
    6562:	08 f0       	brcs	.+2      	; 0x6566 <__ftoa_engine+0x6>
    6564:	27 e0       	ldi	r18, 0x07	; 7
    6566:	33 27       	eor	r19, r19
    6568:	da 01       	movw	r26, r20
    656a:	99 0f       	add	r25, r25
    656c:	31 1d       	adc	r19, r1
    656e:	87 fd       	sbrc	r24, 7
    6570:	91 60       	ori	r25, 0x01	; 1
    6572:	00 96       	adiw	r24, 0x00	; 0
    6574:	61 05       	cpc	r22, r1
    6576:	71 05       	cpc	r23, r1
    6578:	39 f4       	brne	.+14     	; 0x6588 <__ftoa_engine+0x28>
    657a:	32 60       	ori	r19, 0x02	; 2
    657c:	2e 5f       	subi	r18, 0xFE	; 254
    657e:	3d 93       	st	X+, r19
    6580:	30 e3       	ldi	r19, 0x30	; 48
    6582:	2a 95       	dec	r18
    6584:	e1 f7       	brne	.-8      	; 0x657e <__ftoa_engine+0x1e>
    6586:	08 95       	ret
    6588:	9f 3f       	cpi	r25, 0xFF	; 255
    658a:	30 f0       	brcs	.+12     	; 0x6598 <__ftoa_engine+0x38>
    658c:	80 38       	cpi	r24, 0x80	; 128
    658e:	71 05       	cpc	r23, r1
    6590:	61 05       	cpc	r22, r1
    6592:	09 f0       	breq	.+2      	; 0x6596 <__ftoa_engine+0x36>
    6594:	3c 5f       	subi	r19, 0xFC	; 252
    6596:	3c 5f       	subi	r19, 0xFC	; 252
    6598:	3d 93       	st	X+, r19
    659a:	91 30       	cpi	r25, 0x01	; 1
    659c:	08 f0       	brcs	.+2      	; 0x65a0 <__ftoa_engine+0x40>
    659e:	80 68       	ori	r24, 0x80	; 128
    65a0:	91 1d       	adc	r25, r1
    65a2:	df 93       	push	r29
    65a4:	cf 93       	push	r28
    65a6:	1f 93       	push	r17
    65a8:	0f 93       	push	r16
    65aa:	ff 92       	push	r15
    65ac:	ef 92       	push	r14
    65ae:	19 2f       	mov	r17, r25
    65b0:	98 7f       	andi	r25, 0xF8	; 248
    65b2:	96 95       	lsr	r25
    65b4:	e9 2f       	mov	r30, r25
    65b6:	96 95       	lsr	r25
    65b8:	96 95       	lsr	r25
    65ba:	e9 0f       	add	r30, r25
    65bc:	ff 27       	eor	r31, r31
    65be:	e4 50       	subi	r30, 0x04	; 4
    65c0:	fe 4f       	sbci	r31, 0xFE	; 254
    65c2:	99 27       	eor	r25, r25
    65c4:	33 27       	eor	r19, r19
    65c6:	ee 24       	eor	r14, r14
    65c8:	ff 24       	eor	r15, r15
    65ca:	a7 01       	movw	r20, r14
    65cc:	e7 01       	movw	r28, r14
    65ce:	05 90       	lpm	r0, Z+
    65d0:	08 94       	sec
    65d2:	07 94       	ror	r0
    65d4:	28 f4       	brcc	.+10     	; 0x65e0 <__ftoa_engine+0x80>
    65d6:	36 0f       	add	r19, r22
    65d8:	e7 1e       	adc	r14, r23
    65da:	f8 1e       	adc	r15, r24
    65dc:	49 1f       	adc	r20, r25
    65de:	51 1d       	adc	r21, r1
    65e0:	66 0f       	add	r22, r22
    65e2:	77 1f       	adc	r23, r23
    65e4:	88 1f       	adc	r24, r24
    65e6:	99 1f       	adc	r25, r25
    65e8:	06 94       	lsr	r0
    65ea:	a1 f7       	brne	.-24     	; 0x65d4 <__ftoa_engine+0x74>
    65ec:	05 90       	lpm	r0, Z+
    65ee:	07 94       	ror	r0
    65f0:	28 f4       	brcc	.+10     	; 0x65fc <__ftoa_engine+0x9c>
    65f2:	e7 0e       	add	r14, r23
    65f4:	f8 1e       	adc	r15, r24
    65f6:	49 1f       	adc	r20, r25
    65f8:	56 1f       	adc	r21, r22
    65fa:	c1 1d       	adc	r28, r1
    65fc:	77 0f       	add	r23, r23
    65fe:	88 1f       	adc	r24, r24
    6600:	99 1f       	adc	r25, r25
    6602:	66 1f       	adc	r22, r22
    6604:	06 94       	lsr	r0
    6606:	a1 f7       	brne	.-24     	; 0x65f0 <__ftoa_engine+0x90>
    6608:	05 90       	lpm	r0, Z+
    660a:	07 94       	ror	r0
    660c:	28 f4       	brcc	.+10     	; 0x6618 <__ftoa_engine+0xb8>
    660e:	f8 0e       	add	r15, r24
    6610:	49 1f       	adc	r20, r25
    6612:	56 1f       	adc	r21, r22
    6614:	c7 1f       	adc	r28, r23
    6616:	d1 1d       	adc	r29, r1
    6618:	88 0f       	add	r24, r24
    661a:	99 1f       	adc	r25, r25
    661c:	66 1f       	adc	r22, r22
    661e:	77 1f       	adc	r23, r23
    6620:	06 94       	lsr	r0
    6622:	a1 f7       	brne	.-24     	; 0x660c <__ftoa_engine+0xac>
    6624:	05 90       	lpm	r0, Z+
    6626:	07 94       	ror	r0
    6628:	20 f4       	brcc	.+8      	; 0x6632 <__ftoa_engine+0xd2>
    662a:	49 0f       	add	r20, r25
    662c:	56 1f       	adc	r21, r22
    662e:	c7 1f       	adc	r28, r23
    6630:	d8 1f       	adc	r29, r24
    6632:	99 0f       	add	r25, r25
    6634:	66 1f       	adc	r22, r22
    6636:	77 1f       	adc	r23, r23
    6638:	88 1f       	adc	r24, r24
    663a:	06 94       	lsr	r0
    663c:	a9 f7       	brne	.-22     	; 0x6628 <__ftoa_engine+0xc8>
    663e:	84 91       	lpm	r24, Z
    6640:	10 95       	com	r17
    6642:	17 70       	andi	r17, 0x07	; 7
    6644:	41 f0       	breq	.+16     	; 0x6656 <__ftoa_engine+0xf6>
    6646:	d6 95       	lsr	r29
    6648:	c7 95       	ror	r28
    664a:	57 95       	ror	r21
    664c:	47 95       	ror	r20
    664e:	f7 94       	ror	r15
    6650:	e7 94       	ror	r14
    6652:	1a 95       	dec	r17
    6654:	c1 f7       	brne	.-16     	; 0x6646 <__ftoa_engine+0xe6>
    6656:	e2 ea       	ldi	r30, 0xA2	; 162
    6658:	f1 e0       	ldi	r31, 0x01	; 1
    665a:	68 94       	set
    665c:	15 90       	lpm	r1, Z+
    665e:	15 91       	lpm	r17, Z+
    6660:	35 91       	lpm	r19, Z+
    6662:	65 91       	lpm	r22, Z+
    6664:	95 91       	lpm	r25, Z+
    6666:	05 90       	lpm	r0, Z+
    6668:	7f e2       	ldi	r23, 0x2F	; 47
    666a:	73 95       	inc	r23
    666c:	e1 18       	sub	r14, r1
    666e:	f1 0a       	sbc	r15, r17
    6670:	43 0b       	sbc	r20, r19
    6672:	56 0b       	sbc	r21, r22
    6674:	c9 0b       	sbc	r28, r25
    6676:	d0 09       	sbc	r29, r0
    6678:	c0 f7       	brcc	.-16     	; 0x666a <__ftoa_engine+0x10a>
    667a:	e1 0c       	add	r14, r1
    667c:	f1 1e       	adc	r15, r17
    667e:	43 1f       	adc	r20, r19
    6680:	56 1f       	adc	r21, r22
    6682:	c9 1f       	adc	r28, r25
    6684:	d0 1d       	adc	r29, r0
    6686:	7e f4       	brtc	.+30     	; 0x66a6 <__ftoa_engine+0x146>
    6688:	70 33       	cpi	r23, 0x30	; 48
    668a:	11 f4       	brne	.+4      	; 0x6690 <__ftoa_engine+0x130>
    668c:	8a 95       	dec	r24
    668e:	e6 cf       	rjmp	.-52     	; 0x665c <__ftoa_engine+0xfc>
    6690:	e8 94       	clt
    6692:	01 50       	subi	r16, 0x01	; 1
    6694:	30 f0       	brcs	.+12     	; 0x66a2 <__ftoa_engine+0x142>
    6696:	08 0f       	add	r16, r24
    6698:	0a f4       	brpl	.+2      	; 0x669c <__ftoa_engine+0x13c>
    669a:	00 27       	eor	r16, r16
    669c:	02 17       	cp	r16, r18
    669e:	08 f4       	brcc	.+2      	; 0x66a2 <__ftoa_engine+0x142>
    66a0:	20 2f       	mov	r18, r16
    66a2:	23 95       	inc	r18
    66a4:	02 2f       	mov	r16, r18
    66a6:	7a 33       	cpi	r23, 0x3A	; 58
    66a8:	28 f0       	brcs	.+10     	; 0x66b4 <__ftoa_engine+0x154>
    66aa:	79 e3       	ldi	r23, 0x39	; 57
    66ac:	7d 93       	st	X+, r23
    66ae:	2a 95       	dec	r18
    66b0:	e9 f7       	brne	.-6      	; 0x66ac <__ftoa_engine+0x14c>
    66b2:	10 c0       	rjmp	.+32     	; 0x66d4 <__ftoa_engine+0x174>
    66b4:	7d 93       	st	X+, r23
    66b6:	2a 95       	dec	r18
    66b8:	89 f6       	brne	.-94     	; 0x665c <__ftoa_engine+0xfc>
    66ba:	06 94       	lsr	r0
    66bc:	97 95       	ror	r25
    66be:	67 95       	ror	r22
    66c0:	37 95       	ror	r19
    66c2:	17 95       	ror	r17
    66c4:	17 94       	ror	r1
    66c6:	e1 18       	sub	r14, r1
    66c8:	f1 0a       	sbc	r15, r17
    66ca:	43 0b       	sbc	r20, r19
    66cc:	56 0b       	sbc	r21, r22
    66ce:	c9 0b       	sbc	r28, r25
    66d0:	d0 09       	sbc	r29, r0
    66d2:	98 f0       	brcs	.+38     	; 0x66fa <__ftoa_engine+0x19a>
    66d4:	23 95       	inc	r18
    66d6:	7e 91       	ld	r23, -X
    66d8:	73 95       	inc	r23
    66da:	7a 33       	cpi	r23, 0x3A	; 58
    66dc:	08 f0       	brcs	.+2      	; 0x66e0 <__ftoa_engine+0x180>
    66de:	70 e3       	ldi	r23, 0x30	; 48
    66e0:	7c 93       	st	X, r23
    66e2:	20 13       	cpse	r18, r16
    66e4:	b8 f7       	brcc	.-18     	; 0x66d4 <__ftoa_engine+0x174>
    66e6:	7e 91       	ld	r23, -X
    66e8:	70 61       	ori	r23, 0x10	; 16
    66ea:	7d 93       	st	X+, r23
    66ec:	30 f0       	brcs	.+12     	; 0x66fa <__ftoa_engine+0x19a>
    66ee:	83 95       	inc	r24
    66f0:	71 e3       	ldi	r23, 0x31	; 49
    66f2:	7d 93       	st	X+, r23
    66f4:	70 e3       	ldi	r23, 0x30	; 48
    66f6:	2a 95       	dec	r18
    66f8:	e1 f7       	brne	.-8      	; 0x66f2 <__ftoa_engine+0x192>
    66fa:	11 24       	eor	r1, r1
    66fc:	ef 90       	pop	r14
    66fe:	ff 90       	pop	r15
    6700:	0f 91       	pop	r16
    6702:	1f 91       	pop	r17
    6704:	cf 91       	pop	r28
    6706:	df 91       	pop	r29
    6708:	99 27       	eor	r25, r25
    670a:	87 fd       	sbrc	r24, 7
    670c:	90 95       	com	r25
    670e:	08 95       	ret

00006710 <strnlen_P>:
    6710:	fc 01       	movw	r30, r24
    6712:	05 90       	lpm	r0, Z+
    6714:	61 50       	subi	r22, 0x01	; 1
    6716:	70 40       	sbci	r23, 0x00	; 0
    6718:	01 10       	cpse	r0, r1
    671a:	d8 f7       	brcc	.-10     	; 0x6712 <strnlen_P+0x2>
    671c:	80 95       	com	r24
    671e:	90 95       	com	r25
    6720:	8e 0f       	add	r24, r30
    6722:	9f 1f       	adc	r25, r31
    6724:	08 95       	ret

00006726 <memcpy>:
    6726:	fb 01       	movw	r30, r22
    6728:	dc 01       	movw	r26, r24
    672a:	02 c0       	rjmp	.+4      	; 0x6730 <memcpy+0xa>
    672c:	01 90       	ld	r0, Z+
    672e:	0d 92       	st	X+, r0
    6730:	41 50       	subi	r20, 0x01	; 1
    6732:	50 40       	sbci	r21, 0x00	; 0
    6734:	d8 f7       	brcc	.-10     	; 0x672c <memcpy+0x6>
    6736:	08 95       	ret

00006738 <memset>:
    6738:	dc 01       	movw	r26, r24
    673a:	01 c0       	rjmp	.+2      	; 0x673e <memset+0x6>
    673c:	6d 93       	st	X+, r22
    673e:	41 50       	subi	r20, 0x01	; 1
    6740:	50 40       	sbci	r21, 0x00	; 0
    6742:	e0 f7       	brcc	.-8      	; 0x673c <memset+0x4>
    6744:	08 95       	ret

00006746 <strcasestr>:
    6746:	fb 01       	movw	r30, r22
    6748:	51 91       	ld	r21, Z+
    674a:	55 23       	and	r21, r21
    674c:	b1 f0       	breq	.+44     	; 0x677a <strcasestr+0x34>
    674e:	bf 01       	movw	r22, r30
    6750:	dc 01       	movw	r26, r24
    6752:	05 2e       	mov	r0, r21
    6754:	4d 91       	ld	r20, X+
    6756:	44 23       	and	r20, r20
    6758:	69 f0       	breq	.+26     	; 0x6774 <strcasestr+0x2e>
    675a:	10 d0       	rcall	.+32     	; 0x677c <strcasestr+0x36>
    675c:	d9 f7       	brne	.-10     	; 0x6754 <strcasestr+0xe>
    675e:	cd 01       	movw	r24, r26
    6760:	01 90       	ld	r0, Z+
    6762:	00 20       	and	r0, r0
    6764:	49 f0       	breq	.+18     	; 0x6778 <strcasestr+0x32>
    6766:	4d 91       	ld	r20, X+
    6768:	41 11       	cpse	r20, r1
    676a:	08 d0       	rcall	.+16     	; 0x677c <strcasestr+0x36>
    676c:	c9 f3       	breq	.-14     	; 0x6760 <strcasestr+0x1a>
    676e:	fb 01       	movw	r30, r22
    6770:	41 11       	cpse	r20, r1
    6772:	ee cf       	rjmp	.-36     	; 0x6750 <strcasestr+0xa>
    6774:	81 e0       	ldi	r24, 0x01	; 1
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	01 97       	sbiw	r24, 0x01	; 1
    677a:	08 95       	ret
    677c:	40 25       	eor	r20, r0
    677e:	39 f0       	breq	.+14     	; 0x678e <strcasestr+0x48>
    6780:	40 32       	cpi	r20, 0x20	; 32
    6782:	29 f4       	brne	.+10     	; 0x678e <strcasestr+0x48>
    6784:	40 29       	or	r20, r0
    6786:	4b 57       	subi	r20, 0x7B	; 123
    6788:	46 5e       	subi	r20, 0xE6	; 230
    678a:	08 f0       	brcs	.+2      	; 0x678e <strcasestr+0x48>
    678c:	18 94       	sez
    678e:	08 95       	ret

00006790 <strcat>:
    6790:	fb 01       	movw	r30, r22
    6792:	dc 01       	movw	r26, r24
    6794:	0d 90       	ld	r0, X+
    6796:	00 20       	and	r0, r0
    6798:	e9 f7       	brne	.-6      	; 0x6794 <strcat+0x4>
    679a:	11 97       	sbiw	r26, 0x01	; 1
    679c:	01 90       	ld	r0, Z+
    679e:	0d 92       	st	X+, r0
    67a0:	00 20       	and	r0, r0
    67a2:	e1 f7       	brne	.-8      	; 0x679c <strcat+0xc>
    67a4:	08 95       	ret

000067a6 <strcpy>:
    67a6:	fb 01       	movw	r30, r22
    67a8:	dc 01       	movw	r26, r24
    67aa:	01 90       	ld	r0, Z+
    67ac:	0d 92       	st	X+, r0
    67ae:	00 20       	and	r0, r0
    67b0:	e1 f7       	brne	.-8      	; 0x67aa <strcpy+0x4>
    67b2:	08 95       	ret

000067b4 <strncasecmp>:
    67b4:	fb 01       	movw	r30, r22
    67b6:	dc 01       	movw	r26, r24
    67b8:	41 50       	subi	r20, 0x01	; 1
    67ba:	50 40       	sbci	r21, 0x00	; 0
    67bc:	88 f0       	brcs	.+34     	; 0x67e0 <strncasecmp+0x2c>
    67be:	8d 91       	ld	r24, X+
    67c0:	81 34       	cpi	r24, 0x41	; 65
    67c2:	1c f0       	brlt	.+6      	; 0x67ca <strncasecmp+0x16>
    67c4:	8b 35       	cpi	r24, 0x5B	; 91
    67c6:	0c f4       	brge	.+2      	; 0x67ca <strncasecmp+0x16>
    67c8:	80 5e       	subi	r24, 0xE0	; 224
    67ca:	61 91       	ld	r22, Z+
    67cc:	61 34       	cpi	r22, 0x41	; 65
    67ce:	1c f0       	brlt	.+6      	; 0x67d6 <strncasecmp+0x22>
    67d0:	6b 35       	cpi	r22, 0x5B	; 91
    67d2:	0c f4       	brge	.+2      	; 0x67d6 <strncasecmp+0x22>
    67d4:	60 5e       	subi	r22, 0xE0	; 224
    67d6:	86 1b       	sub	r24, r22
    67d8:	61 11       	cpse	r22, r1
    67da:	71 f3       	breq	.-36     	; 0x67b8 <strncasecmp+0x4>
    67dc:	99 0b       	sbc	r25, r25
    67de:	08 95       	ret
    67e0:	88 1b       	sub	r24, r24
    67e2:	fc cf       	rjmp	.-8      	; 0x67dc <strncasecmp+0x28>

000067e4 <strnlen>:
    67e4:	fc 01       	movw	r30, r24
    67e6:	61 50       	subi	r22, 0x01	; 1
    67e8:	70 40       	sbci	r23, 0x00	; 0
    67ea:	01 90       	ld	r0, Z+
    67ec:	01 10       	cpse	r0, r1
    67ee:	d8 f7       	brcc	.-10     	; 0x67e6 <strnlen+0x2>
    67f0:	80 95       	com	r24
    67f2:	90 95       	com	r25
    67f4:	8e 0f       	add	r24, r30
    67f6:	9f 1f       	adc	r25, r31
    67f8:	08 95       	ret

000067fa <fputc>:
    67fa:	0f 93       	push	r16
    67fc:	1f 93       	push	r17
    67fe:	cf 93       	push	r28
    6800:	df 93       	push	r29
    6802:	fb 01       	movw	r30, r22
    6804:	23 81       	ldd	r18, Z+3	; 0x03
    6806:	21 fd       	sbrc	r18, 1
    6808:	03 c0       	rjmp	.+6      	; 0x6810 <fputc+0x16>
    680a:	8f ef       	ldi	r24, 0xFF	; 255
    680c:	9f ef       	ldi	r25, 0xFF	; 255
    680e:	2c c0       	rjmp	.+88     	; 0x6868 <fputc+0x6e>
    6810:	22 ff       	sbrs	r18, 2
    6812:	16 c0       	rjmp	.+44     	; 0x6840 <fputc+0x46>
    6814:	46 81       	ldd	r20, Z+6	; 0x06
    6816:	57 81       	ldd	r21, Z+7	; 0x07
    6818:	24 81       	ldd	r18, Z+4	; 0x04
    681a:	35 81       	ldd	r19, Z+5	; 0x05
    681c:	42 17       	cp	r20, r18
    681e:	53 07       	cpc	r21, r19
    6820:	44 f4       	brge	.+16     	; 0x6832 <fputc+0x38>
    6822:	a0 81       	ld	r26, Z
    6824:	b1 81       	ldd	r27, Z+1	; 0x01
    6826:	9d 01       	movw	r18, r26
    6828:	2f 5f       	subi	r18, 0xFF	; 255
    682a:	3f 4f       	sbci	r19, 0xFF	; 255
    682c:	31 83       	std	Z+1, r19	; 0x01
    682e:	20 83       	st	Z, r18
    6830:	8c 93       	st	X, r24
    6832:	26 81       	ldd	r18, Z+6	; 0x06
    6834:	37 81       	ldd	r19, Z+7	; 0x07
    6836:	2f 5f       	subi	r18, 0xFF	; 255
    6838:	3f 4f       	sbci	r19, 0xFF	; 255
    683a:	37 83       	std	Z+7, r19	; 0x07
    683c:	26 83       	std	Z+6, r18	; 0x06
    683e:	14 c0       	rjmp	.+40     	; 0x6868 <fputc+0x6e>
    6840:	8b 01       	movw	r16, r22
    6842:	ec 01       	movw	r28, r24
    6844:	fb 01       	movw	r30, r22
    6846:	00 84       	ldd	r0, Z+8	; 0x08
    6848:	f1 85       	ldd	r31, Z+9	; 0x09
    684a:	e0 2d       	mov	r30, r0
    684c:	19 95       	eicall
    684e:	89 2b       	or	r24, r25
    6850:	e1 f6       	brne	.-72     	; 0x680a <fputc+0x10>
    6852:	d8 01       	movw	r26, r16
    6854:	16 96       	adiw	r26, 0x06	; 6
    6856:	8d 91       	ld	r24, X+
    6858:	9c 91       	ld	r25, X
    685a:	17 97       	sbiw	r26, 0x07	; 7
    685c:	01 96       	adiw	r24, 0x01	; 1
    685e:	17 96       	adiw	r26, 0x07	; 7
    6860:	9c 93       	st	X, r25
    6862:	8e 93       	st	-X, r24
    6864:	16 97       	sbiw	r26, 0x06	; 6
    6866:	ce 01       	movw	r24, r28
    6868:	df 91       	pop	r29
    686a:	cf 91       	pop	r28
    686c:	1f 91       	pop	r17
    686e:	0f 91       	pop	r16
    6870:	08 95       	ret

00006872 <printf>:
    6872:	cf 93       	push	r28
    6874:	df 93       	push	r29
    6876:	cd b7       	in	r28, 0x3d	; 61
    6878:	de b7       	in	r29, 0x3e	; 62
    687a:	ae 01       	movw	r20, r28
    687c:	4a 5f       	subi	r20, 0xFA	; 250
    687e:	5f 4f       	sbci	r21, 0xFF	; 255
    6880:	fa 01       	movw	r30, r20
    6882:	61 91       	ld	r22, Z+
    6884:	71 91       	ld	r23, Z+
    6886:	af 01       	movw	r20, r30
    6888:	80 91 7a 1a 	lds	r24, 0x1A7A	; 0x801a7a <__iob+0x2>
    688c:	90 91 7b 1a 	lds	r25, 0x1A7B	; 0x801a7b <__iob+0x3>
    6890:	0e 94 c2 2b 	call	0x5784	; 0x5784 <vfprintf>
    6894:	df 91       	pop	r29
    6896:	cf 91       	pop	r28
    6898:	08 95       	ret

0000689a <puts>:
    689a:	0f 93       	push	r16
    689c:	1f 93       	push	r17
    689e:	cf 93       	push	r28
    68a0:	df 93       	push	r29
    68a2:	e0 91 7a 1a 	lds	r30, 0x1A7A	; 0x801a7a <__iob+0x2>
    68a6:	f0 91 7b 1a 	lds	r31, 0x1A7B	; 0x801a7b <__iob+0x3>
    68aa:	23 81       	ldd	r18, Z+3	; 0x03
    68ac:	21 ff       	sbrs	r18, 1
    68ae:	1b c0       	rjmp	.+54     	; 0x68e6 <puts+0x4c>
    68b0:	8c 01       	movw	r16, r24
    68b2:	d0 e0       	ldi	r29, 0x00	; 0
    68b4:	c0 e0       	ldi	r28, 0x00	; 0
    68b6:	f8 01       	movw	r30, r16
    68b8:	81 91       	ld	r24, Z+
    68ba:	8f 01       	movw	r16, r30
    68bc:	60 91 7a 1a 	lds	r22, 0x1A7A	; 0x801a7a <__iob+0x2>
    68c0:	70 91 7b 1a 	lds	r23, 0x1A7B	; 0x801a7b <__iob+0x3>
    68c4:	db 01       	movw	r26, r22
    68c6:	18 96       	adiw	r26, 0x08	; 8
    68c8:	ed 91       	ld	r30, X+
    68ca:	fc 91       	ld	r31, X
    68cc:	19 97       	sbiw	r26, 0x09	; 9
    68ce:	88 23       	and	r24, r24
    68d0:	31 f0       	breq	.+12     	; 0x68de <puts+0x44>
    68d2:	19 95       	eicall
    68d4:	89 2b       	or	r24, r25
    68d6:	79 f3       	breq	.-34     	; 0x68b6 <puts+0x1c>
    68d8:	df ef       	ldi	r29, 0xFF	; 255
    68da:	cf ef       	ldi	r28, 0xFF	; 255
    68dc:	ec cf       	rjmp	.-40     	; 0x68b6 <puts+0x1c>
    68de:	8a e0       	ldi	r24, 0x0A	; 10
    68e0:	19 95       	eicall
    68e2:	89 2b       	or	r24, r25
    68e4:	19 f0       	breq	.+6      	; 0x68ec <puts+0x52>
    68e6:	8f ef       	ldi	r24, 0xFF	; 255
    68e8:	9f ef       	ldi	r25, 0xFF	; 255
    68ea:	02 c0       	rjmp	.+4      	; 0x68f0 <puts+0x56>
    68ec:	8d 2f       	mov	r24, r29
    68ee:	9c 2f       	mov	r25, r28
    68f0:	df 91       	pop	r29
    68f2:	cf 91       	pop	r28
    68f4:	1f 91       	pop	r17
    68f6:	0f 91       	pop	r16
    68f8:	08 95       	ret

000068fa <sprintf>:
    68fa:	0f 93       	push	r16
    68fc:	1f 93       	push	r17
    68fe:	cf 93       	push	r28
    6900:	df 93       	push	r29
    6902:	cd b7       	in	r28, 0x3d	; 61
    6904:	de b7       	in	r29, 0x3e	; 62
    6906:	2e 97       	sbiw	r28, 0x0e	; 14
    6908:	0f b6       	in	r0, 0x3f	; 63
    690a:	f8 94       	cli
    690c:	de bf       	out	0x3e, r29	; 62
    690e:	0f be       	out	0x3f, r0	; 63
    6910:	cd bf       	out	0x3d, r28	; 61
    6912:	0e 89       	ldd	r16, Y+22	; 0x16
    6914:	1f 89       	ldd	r17, Y+23	; 0x17
    6916:	86 e0       	ldi	r24, 0x06	; 6
    6918:	8c 83       	std	Y+4, r24	; 0x04
    691a:	1a 83       	std	Y+2, r17	; 0x02
    691c:	09 83       	std	Y+1, r16	; 0x01
    691e:	8f ef       	ldi	r24, 0xFF	; 255
    6920:	9f e7       	ldi	r25, 0x7F	; 127
    6922:	9e 83       	std	Y+6, r25	; 0x06
    6924:	8d 83       	std	Y+5, r24	; 0x05
    6926:	ae 01       	movw	r20, r28
    6928:	46 5e       	subi	r20, 0xE6	; 230
    692a:	5f 4f       	sbci	r21, 0xFF	; 255
    692c:	68 8d       	ldd	r22, Y+24	; 0x18
    692e:	79 8d       	ldd	r23, Y+25	; 0x19
    6930:	ce 01       	movw	r24, r28
    6932:	01 96       	adiw	r24, 0x01	; 1
    6934:	0e 94 c2 2b 	call	0x5784	; 0x5784 <vfprintf>
    6938:	ef 81       	ldd	r30, Y+7	; 0x07
    693a:	f8 85       	ldd	r31, Y+8	; 0x08
    693c:	e0 0f       	add	r30, r16
    693e:	f1 1f       	adc	r31, r17
    6940:	10 82       	st	Z, r1
    6942:	2e 96       	adiw	r28, 0x0e	; 14
    6944:	0f b6       	in	r0, 0x3f	; 63
    6946:	f8 94       	cli
    6948:	de bf       	out	0x3e, r29	; 62
    694a:	0f be       	out	0x3f, r0	; 63
    694c:	cd bf       	out	0x3d, r28	; 61
    694e:	df 91       	pop	r29
    6950:	cf 91       	pop	r28
    6952:	1f 91       	pop	r17
    6954:	0f 91       	pop	r16
    6956:	08 95       	ret

00006958 <__ultoa_invert>:
    6958:	fa 01       	movw	r30, r20
    695a:	aa 27       	eor	r26, r26
    695c:	28 30       	cpi	r18, 0x08	; 8
    695e:	51 f1       	breq	.+84     	; 0x69b4 <__ultoa_invert+0x5c>
    6960:	20 31       	cpi	r18, 0x10	; 16
    6962:	81 f1       	breq	.+96     	; 0x69c4 <__ultoa_invert+0x6c>
    6964:	e8 94       	clt
    6966:	6f 93       	push	r22
    6968:	6e 7f       	andi	r22, 0xFE	; 254
    696a:	6e 5f       	subi	r22, 0xFE	; 254
    696c:	7f 4f       	sbci	r23, 0xFF	; 255
    696e:	8f 4f       	sbci	r24, 0xFF	; 255
    6970:	9f 4f       	sbci	r25, 0xFF	; 255
    6972:	af 4f       	sbci	r26, 0xFF	; 255
    6974:	b1 e0       	ldi	r27, 0x01	; 1
    6976:	3e d0       	rcall	.+124    	; 0x69f4 <__ultoa_invert+0x9c>
    6978:	b4 e0       	ldi	r27, 0x04	; 4
    697a:	3c d0       	rcall	.+120    	; 0x69f4 <__ultoa_invert+0x9c>
    697c:	67 0f       	add	r22, r23
    697e:	78 1f       	adc	r23, r24
    6980:	89 1f       	adc	r24, r25
    6982:	9a 1f       	adc	r25, r26
    6984:	a1 1d       	adc	r26, r1
    6986:	68 0f       	add	r22, r24
    6988:	79 1f       	adc	r23, r25
    698a:	8a 1f       	adc	r24, r26
    698c:	91 1d       	adc	r25, r1
    698e:	a1 1d       	adc	r26, r1
    6990:	6a 0f       	add	r22, r26
    6992:	71 1d       	adc	r23, r1
    6994:	81 1d       	adc	r24, r1
    6996:	91 1d       	adc	r25, r1
    6998:	a1 1d       	adc	r26, r1
    699a:	20 d0       	rcall	.+64     	; 0x69dc <__ultoa_invert+0x84>
    699c:	09 f4       	brne	.+2      	; 0x69a0 <__ultoa_invert+0x48>
    699e:	68 94       	set
    69a0:	3f 91       	pop	r19
    69a2:	2a e0       	ldi	r18, 0x0A	; 10
    69a4:	26 9f       	mul	r18, r22
    69a6:	11 24       	eor	r1, r1
    69a8:	30 19       	sub	r19, r0
    69aa:	30 5d       	subi	r19, 0xD0	; 208
    69ac:	31 93       	st	Z+, r19
    69ae:	de f6       	brtc	.-74     	; 0x6966 <__ultoa_invert+0xe>
    69b0:	cf 01       	movw	r24, r30
    69b2:	08 95       	ret
    69b4:	46 2f       	mov	r20, r22
    69b6:	47 70       	andi	r20, 0x07	; 7
    69b8:	40 5d       	subi	r20, 0xD0	; 208
    69ba:	41 93       	st	Z+, r20
    69bc:	b3 e0       	ldi	r27, 0x03	; 3
    69be:	0f d0       	rcall	.+30     	; 0x69de <__ultoa_invert+0x86>
    69c0:	c9 f7       	brne	.-14     	; 0x69b4 <__ultoa_invert+0x5c>
    69c2:	f6 cf       	rjmp	.-20     	; 0x69b0 <__ultoa_invert+0x58>
    69c4:	46 2f       	mov	r20, r22
    69c6:	4f 70       	andi	r20, 0x0F	; 15
    69c8:	40 5d       	subi	r20, 0xD0	; 208
    69ca:	4a 33       	cpi	r20, 0x3A	; 58
    69cc:	18 f0       	brcs	.+6      	; 0x69d4 <__ultoa_invert+0x7c>
    69ce:	49 5d       	subi	r20, 0xD9	; 217
    69d0:	31 fd       	sbrc	r19, 1
    69d2:	40 52       	subi	r20, 0x20	; 32
    69d4:	41 93       	st	Z+, r20
    69d6:	02 d0       	rcall	.+4      	; 0x69dc <__ultoa_invert+0x84>
    69d8:	a9 f7       	brne	.-22     	; 0x69c4 <__ultoa_invert+0x6c>
    69da:	ea cf       	rjmp	.-44     	; 0x69b0 <__ultoa_invert+0x58>
    69dc:	b4 e0       	ldi	r27, 0x04	; 4
    69de:	a6 95       	lsr	r26
    69e0:	97 95       	ror	r25
    69e2:	87 95       	ror	r24
    69e4:	77 95       	ror	r23
    69e6:	67 95       	ror	r22
    69e8:	ba 95       	dec	r27
    69ea:	c9 f7       	brne	.-14     	; 0x69de <__ultoa_invert+0x86>
    69ec:	00 97       	sbiw	r24, 0x00	; 0
    69ee:	61 05       	cpc	r22, r1
    69f0:	71 05       	cpc	r23, r1
    69f2:	08 95       	ret
    69f4:	9b 01       	movw	r18, r22
    69f6:	ac 01       	movw	r20, r24
    69f8:	0a 2e       	mov	r0, r26
    69fa:	06 94       	lsr	r0
    69fc:	57 95       	ror	r21
    69fe:	47 95       	ror	r20
    6a00:	37 95       	ror	r19
    6a02:	27 95       	ror	r18
    6a04:	ba 95       	dec	r27
    6a06:	c9 f7       	brne	.-14     	; 0x69fa <__ultoa_invert+0xa2>
    6a08:	62 0f       	add	r22, r18
    6a0a:	73 1f       	adc	r23, r19
    6a0c:	84 1f       	adc	r24, r20
    6a0e:	95 1f       	adc	r25, r21
    6a10:	a0 1d       	adc	r26, r0
    6a12:	08 95       	ret

00006a14 <_exit>:
    6a14:	f8 94       	cli

00006a16 <__stop_program>:
    6a16:	ff cf       	rjmp	.-2      	; 0x6a16 <__stop_program>
