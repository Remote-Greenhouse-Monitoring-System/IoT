
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d0  00800200  00005244  000052d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f27  008004d0  008004d0  000055a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000055a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a70  00000000  00000000  00005644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ca08  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031b4  00000000  00000000  00012abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000064f9  00000000  00000000  00015c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002610  00000000  00000000  0001c16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004058  00000000  00000000  0001e77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000be99  00000000  00000000  000227d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009d8  00000000  00000000  0002e66d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	39 c7       	rjmp	.+3698   	; 0xea4 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__vector_25>
      68:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__vector_36>
      94:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 24 1c 	jmp	0x3848	; 0x3848 <__vector_51>
      d0:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__vector_54>
      dc:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fa 16       	cp	r15, r26
      e6:	fa 16       	cp	r15, r26
      e8:	fa 16       	cp	r15, r26
      ea:	31 17       	cp	r19, r17
      ec:	39 17       	cp	r19, r25
      ee:	4e 17       	cp	r20, r30
      f0:	fa 16       	cp	r15, r26
      f2:	fa 16       	cp	r15, r26
      f4:	31 17       	cp	r19, r17
      f6:	39 17       	cp	r19, r25
      f8:	c6 1f       	adc	r28, r22
      fa:	36 20       	and	r3, r6
      fc:	36 20       	and	r3, r6
      fe:	36 20       	and	r3, r6
     100:	36 20       	and	r3, r6
     102:	36 20       	and	r3, r6
     104:	36 20       	and	r3, r6
     106:	36 20       	and	r3, r6
     108:	c6 1f       	adc	r28, r22
     10a:	36 20       	and	r3, r6
     10c:	36 20       	and	r3, r6
     10e:	36 20       	and	r3, r6
     110:	36 20       	and	r3, r6
     112:	36 20       	and	r3, r6
     114:	36 20       	and	r3, r6
     116:	36 20       	and	r3, r6
     118:	c8 1f       	adc	r28, r24
     11a:	36 20       	and	r3, r6
     11c:	36 20       	and	r3, r6
     11e:	36 20       	and	r3, r6
     120:	36 20       	and	r3, r6
     122:	36 20       	and	r3, r6
     124:	36 20       	and	r3, r6
     126:	36 20       	and	r3, r6
     128:	36 20       	and	r3, r6
     12a:	36 20       	and	r3, r6
     12c:	36 20       	and	r3, r6
     12e:	36 20       	and	r3, r6
     130:	36 20       	and	r3, r6
     132:	36 20       	and	r3, r6
     134:	36 20       	and	r3, r6
     136:	36 20       	and	r3, r6
     138:	c8 1f       	adc	r28, r24
     13a:	36 20       	and	r3, r6
     13c:	36 20       	and	r3, r6
     13e:	36 20       	and	r3, r6
     140:	36 20       	and	r3, r6
     142:	36 20       	and	r3, r6
     144:	36 20       	and	r3, r6
     146:	36 20       	and	r3, r6
     148:	36 20       	and	r3, r6
     14a:	36 20       	and	r3, r6
     14c:	36 20       	and	r3, r6
     14e:	36 20       	and	r3, r6
     150:	36 20       	and	r3, r6
     152:	36 20       	and	r3, r6
     154:	36 20       	and	r3, r6
     156:	36 20       	and	r3, r6
     158:	32 20       	and	r3, r2
     15a:	36 20       	and	r3, r6
     15c:	36 20       	and	r3, r6
     15e:	36 20       	and	r3, r6
     160:	36 20       	and	r3, r6
     162:	36 20       	and	r3, r6
     164:	36 20       	and	r3, r6
     166:	36 20       	and	r3, r6
     168:	fd 1f       	adc	r31, r29
     16a:	36 20       	and	r3, r6
     16c:	36 20       	and	r3, r6
     16e:	36 20       	and	r3, r6
     170:	36 20       	and	r3, r6
     172:	36 20       	and	r3, r6
     174:	36 20       	and	r3, r6
     176:	36 20       	and	r3, r6
     178:	36 20       	and	r3, r6
     17a:	36 20       	and	r3, r6
     17c:	36 20       	and	r3, r6
     17e:	36 20       	and	r3, r6
     180:	36 20       	and	r3, r6
     182:	36 20       	and	r3, r6
     184:	36 20       	and	r3, r6
     186:	36 20       	and	r3, r6
     188:	f1 1f       	adc	r31, r17
     18a:	36 20       	and	r3, r6
     18c:	36 20       	and	r3, r6
     18e:	36 20       	and	r3, r6
     190:	36 20       	and	r3, r6
     192:	36 20       	and	r3, r6
     194:	36 20       	and	r3, r6
     196:	36 20       	and	r3, r6
     198:	15 20       	and	r1, r5

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
            }
        }
        taskEXIT_CRITICAL();

        return xReturn;
    }
     29c:	0e 94 80 0c 	call	0x1900	; 0x1900 <prvCheckTasksWaitingTermination>
     2a0:	80 91 e3 12 	lds	r24, 0x12E3	; 0x8012e3 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	38 d5       	rcall	.+2672   	; 0xd1a <vPortYield>
     2aa:	0e 94 77 17 	call	0x2eee	; 0x2eee <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 6f 16 	call	0x2cde	; 0x2cde <prvProcessTimerOrBlockTask>
     2c8:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	14 e0       	ldi	r17, 0x04	; 4
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e4 e4       	ldi	r30, 0x44	; 68
     2e6:	f2 e5       	ldi	r31, 0x52	; 82
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a0 3d       	cpi	r26, 0xD0	; 208
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	23 e1       	ldi	r18, 0x13	; 19
     2fa:	a0 ed       	ldi	r26, 0xD0	; 208
     2fc:	b4 e0       	ldi	r27, 0x04	; 4
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a7 3f       	cpi	r26, 0xF7	; 247
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <main>
     30c:	0c 94 20 29 	jmp	0x5240	; 0x5240 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <run_all_Task>:
	dataReadyEventGroup = xEventGroupCreate();
	meassureEventGroup = xEventGroupCreate();
	
}

void start_application() {
     312:	db d0       	rcall	.+438    	; 0x4ca <createCO2SensorTask>
     314:	05 c1       	rjmp	.+522    	; 0x520 <create_TempHumSensorTask>
     316:	08 95       	ret

00000318 <initialize_everything>:
     318:	98 d1       	rcall	.+816    	; 0x64a <xEventGroupCreate>
     31a:	90 93 e9 13 	sts	0x13E9, r25	; 0x8013e9 <dataReadyEventGroup+0x1>
     31e:	80 93 e8 13 	sts	0x13E8, r24	; 0x8013e8 <dataReadyEventGroup>
     322:	93 d1       	rcall	.+806    	; 0x64a <xEventGroupCreate>
     324:	90 93 eb 13 	sts	0x13EB, r25	; 0x8013eb <meassureEventGroup+0x1>
     328:	80 93 ea 13 	sts	0x13EA, r24	; 0x8013ea <meassureEventGroup>
     32c:	08 95       	ret

0000032e <MainApplicationTask>:
	
}

// Main task For application to get result when every measurnment is done

void MainApplicationTask() {
     32e:	cf 92       	push	r12
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
	
	printf ("Activate");
     338:	8f e4       	ldi	r24, 0x4F	; 79
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
	
	puts("Application");
     344:	88 e5       	ldi	r24, 0x58	; 88
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	0e 94 92 28 	call	0x5124	; 0x5124 <puts>
	//First trying to measure everything
	xEventGroupSetBits(meassureEventGroup,ALL_MEASSURE_BITS);
     34c:	45 e0       	ldi	r20, 0x05	; 5
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	80 91 ea 13 	lds	r24, 0x13EA	; 0x8013ea <meassureEventGroup>
     358:	90 91 eb 13 	lds	r25, 0x13EB	; 0x8013eb <meassureEventGroup+0x1>
     35c:	29 d2       	rcall	.+1106   	; 0x7b0 <xEventGroupSetBits>
	
	printf("Measuring from sensor is done now ready bit are done ");
     35e:	84 e6       	ldi	r24, 0x64	; 100
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	9f 93       	push	r25
     364:	8f 93       	push	r24
     366:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
	
	EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     36a:	cc 24       	eor	r12, r12
     36c:	ca 94       	dec	r12
     36e:	dc 2c       	mov	r13, r12
     370:	76 01       	movw	r14, r12
     372:	01 e0       	ldi	r16, 0x01	; 1
     374:	21 e0       	ldi	r18, 0x01	; 1
     376:	4a e0       	ldi	r20, 0x0A	; 10
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <dataReadyEventGroup>
     382:	90 91 e9 13 	lds	r25, 0x13E9	; 0x8013e9 <dataReadyEventGroup+0x1>
     386:	74 d1       	rcall	.+744    	; 0x670 <xEventGroupWaitBits>
	
	//If everything is done now we need to set the measurement and it's done 
	
	if (uxBits&(ALL_READY_BITS))
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8a 70       	andi	r24, 0x0A	; 10
     38e:	99 27       	eor	r25, r25
     390:	aa 27       	eor	r26, r26
     392:	bb 27       	eor	r27, r27
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	89 2b       	or	r24, r25
     39e:	8a 2b       	or	r24, r26
     3a0:	8b 2b       	or	r24, r27
     3a2:	79 f1       	breq	.+94     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		printf("Yahuuu !!! Everything is measured now setting the value from sensor");
     3a4:	8a e9       	ldi	r24, 0x9A	; 154
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	9f 93       	push	r25
     3aa:	8f 93       	push	r24
     3ac:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
		
		// set here what we need 
		printf("Temp is : %u",TempHumSensor_getTemp());
     3b0:	21 d1       	rcall	.+578    	; 0x5f4 <TempHumSensor_getTemp>
     3b2:	9f 93       	push	r25
     3b4:	8f 93       	push	r24
     3b6:	8e ed       	ldi	r24, 0xDE	; 222
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	9f 93       	push	r25
     3bc:	8f 93       	push	r24
     3be:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
		printf("HUM is : %u",TempHumSensor_getHum());
     3c2:	1d d1       	rcall	.+570    	; 0x5fe <TempHumSensor_getHum>
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	8b ee       	ldi	r24, 0xEB	; 235
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	9f 93       	push	r25
     3ce:	8f 93       	push	r24
     3d0:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
		printf("co2 is : %u", CO2_getPPM());
     3d4:	75 d0       	rcall	.+234    	; 0x4c0 <CO2_getPPM>
     3d6:	9f 93       	push	r25
     3d8:	8f 93       	push	r24
     3da:	87 ef       	ldi	r24, 0xF7	; 247
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
		
		//I guess lorawan part goes here and then we need to repeat it again and again 
		
		//As of now 1 min
		vTaskDelay(pdMS_TO_TICKS(6000));
     3e6:	64 e7       	ldi	r22, 0x74	; 116
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <vTaskDelay>
     3f2:	8d b7       	in	r24, 0x3d	; 61
     3f4:	9e b7       	in	r25, 0x3e	; 62
     3f6:	0e 96       	adiw	r24, 0x0e	; 14
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	9e bf       	out	0x3e, r25	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	8d bf       	out	0x3d, r24	; 61
	}
	

     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	08 95       	ret

0000040e <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
     40e:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <__data_end+0x1>
     412:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <__data_end>
     416:	08 95       	ret

00000418 <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	0e 94 48 19 	call	0x3290	; 0x3290 <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
     41e:	87 e0       	ldi	r24, 0x07	; 7
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	0c 94 6d 19 	jmp	0x32da	; 0x32da <mh_z19_injectCallBack>
     426:	08 95       	ret

00000428 <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
     428:	0e 94 72 19 	call	0x32e4	; 0x32e4 <mh_z19_takeMeassuring>
     42c:	80 93 ec 13 	sts	0x13EC, r24	; 0x8013ec <rc>
	if (rc != MHZ19_OK)
     430:	88 23       	and	r24, r24
     432:	41 f0       	breq	.+16     	; 0x444 <CO2_measure+0x1c>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
     444:	80 ed       	ldi	r24, 0xD0	; 208
     446:	94 e0       	ldi	r25, 0x04	; 4
     448:	0e 94 a1 19 	call	0x3342	; 0x3342 <mh_z19_getCo2Ppm>
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <__data_end+0x1>
     452:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <__data_end>
     456:	08 95       	ret

00000458 <MeasureCo2Task>:
}

//MAIN TASKKK

void MeasureCo2Task(void* pvpParameter){
	printf("Measurement of co2 task has been started ");
     458:	83 e3       	ldi	r24, 0x33	; 51
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	9f 93       	push	r25
     45e:	8f 93       	push	r24
     460:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(meassureEventGroup,CO2_MEASSURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     468:	cc 24       	eor	r12, r12
     46a:	ca 94       	dec	r12
     46c:	dc 2c       	mov	r13, r12
     46e:	76 01       	movw	r14, r12
     470:	01 e0       	ldi	r16, 0x01	; 1
     472:	21 e0       	ldi	r18, 0x01	; 1
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	80 91 ea 13 	lds	r24, 0x13EA	; 0x8013ea <meassureEventGroup>
     480:	90 91 eb 13 	lds	r25, 0x13EB	; 0x8013eb <meassureEventGroup+0x1>
     484:	f5 d0       	rcall	.+490    	; 0x670 <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASSURE_BIT)) == CO2_MEASSURE_BIT)
     486:	60 ff       	sbrs	r22, 0
     488:	ef cf       	rjmp	.-34     	; 0x468 <MeasureCo2Task+0x10>
			{
				printf("Measure bit and event bit was successfully checked ");
     48a:	8d e5       	ldi	r24, 0x5D	; 93
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
				
				CO2_measure();
     496:	c8 df       	rcall	.-112    	; 0x428 <CO2_measure>
				
				printf("Measurement successful , now time to set ready bit of c02 ");
     498:	81 e9       	ldi	r24, 0x91	; 145
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
				
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
     4a4:	42 e0       	ldi	r20, 0x02	; 2
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <dataReadyEventGroup>
     4b0:	90 91 e9 13 	lds	r25, 0x13E9	; 0x8013e9 <dataReadyEventGroup+0x1>
     4b4:	7d d1       	rcall	.+762    	; 0x7b0 <xEventGroupSetBits>
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	d4 cf       	rjmp	.-88     	; 0x468 <MeasureCo2Task+0x10>

000004c0 <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
     4c0:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <__data_end>
     4c4:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <__data_end+0x1>
     4c8:	08 95       	ret

000004ca <createCO2SensorTask>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void createCO2SensorTask(){
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
	
	//Initializing 
		CO2_createSensor();
     4d0:	a3 df       	rcall	.-186    	; 0x418 <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
     4d2:	e1 2c       	mov	r14, r1
     4d4:	f1 2c       	mov	r15, r1
     4d6:	00 e0       	ldi	r16, 0x00	; 0
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 ec       	ldi	r20, 0xC0	; 192
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	6c ec       	ldi	r22, 0xCC	; 204
     4e2:	73 e0       	ldi	r23, 0x03	; 3
     4e4:	8c e2       	ldi	r24, 0x2C	; 44
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY,
		NULL);
}
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	08 95       	ret

000004f4 <initialise_TempHumSensor>:
uint16_t temperature = 0.0;


void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
     4f4:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <hih8120_initialise>
     4f8:	81 11       	cpse	r24, r1
     4fa:	09 c0       	rjmp	.+18     	; 0x50e <initialise_TempHumSensor+0x1a>
	{
		printf("Initialised  tempHum sensor");
     4fc:	8e ed       	ldi	r24, 0xDE	; 222
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	08 95       	ret
		// Driver initialised OK
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{printf("Something went wrong while initialising tempHum sensor");
     50e:	8a ef       	ldi	r24, 0xFA	; 250
     510:	93 e0       	ldi	r25, 0x03	; 3
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	08 95       	ret

00000520 <create_TempHumSensorTask>:
	}
	}


void create_TempHumSensorTask(){
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
	initialise_TempHumSensor();
     526:	e6 df       	rcall	.-52     	; 0x4f4 <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
     528:	e1 2c       	mov	r14, r1
     52a:	f1 2c       	mov	r15, r1
     52c:	00 e0       	ldi	r16, 0x00	; 0
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 ec       	ldi	r20, 0xC0	; 192
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	61 e3       	ldi	r22, 0x31	; 49
     538:	74 e0       	ldi	r23, 0x04	; 4
     53a:	8a ec       	ldi	r24, 0xCA	; 202
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY,
	NULL);
	
}
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	08 95       	ret

0000054a <measure_Temp_Hum>:

void measure_Temp_Hum(){
	
	
	if ( HIH8120_OK != hih8120_wakeup() )
     54a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <hih8120_wakeup>
     54e:	88 23       	and	r24, r24
     550:	41 f0       	breq	.+16     	; 0x562 <measure_Temp_Hum+0x18>
	{
		printf("Could not wake up temp hum sensor ");
     552:	8d e3       	ldi	r24, 0x3D	; 61
     554:	94 e0       	ldi	r25, 0x04	; 4
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(51));
     562:	63 e0       	ldi	r22, 0x03	; 3
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <vTaskDelay>
	if ( HIH8120_OK !=  hih8120_measure() )
     56e:	0e 94 11 18 	call	0x3022	; 0x3022 <hih8120_measure>
     572:	88 23       	and	r24, r24
     574:	41 f0       	breq	.+16     	; 0x586 <measure_Temp_Hum+0x3c>
	{
		printf("Could not measure temp hum sensor ");
     576:	80 e6       	ldi	r24, 0x60	; 96
     578:	94 e0       	ldi	r25, 0x04	; 4
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(51));
     586:	63 e0       	ldi	r22, 0x03	; 3
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <vTaskDelay>
     592:	08 95       	ret

00000594 <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(meassureEventGroup,TEMP_HUM_MEASSURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
     594:	cc 24       	eor	r12, r12
     596:	ca 94       	dec	r12
     598:	dc 2c       	mov	r13, r12
     59a:	76 01       	movw	r14, r12
     59c:	01 e0       	ldi	r16, 0x01	; 1
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	44 e0       	ldi	r20, 0x04	; 4
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	80 91 ea 13 	lds	r24, 0x13EA	; 0x8013ea <meassureEventGroup>
     5ac:	90 91 eb 13 	lds	r25, 0x13EB	; 0x8013eb <meassureEventGroup+0x1>
     5b0:	5f d0       	rcall	.+190    	; 0x670 <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASSURE_BIT))
     5b2:	62 ff       	sbrs	r22, 2
		{
			measure_Temp_Hum();
     5b4:	ef cf       	rjmp	.-34     	; 0x594 <Temp_Hum_Main_Task>
     5b6:	c9 df       	rcall	.-110    	; 0x54a <measure_Temp_Hum>
			humidity = hih8120_getHumidityPercent_x10();
     5b8:	0e 94 36 18 	call	0x306c	; 0x306c <hih8120_getHumidityPercent_x10>
     5bc:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <humidity+0x1>
     5c0:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <humidity>
			temperature = hih8120_getTemperature_x10();
     5c4:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <hih8120_getTemperature_x10>
     5c8:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <temperature+0x1>
     5cc:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <temperature>
			printf("Measuring done for temp and hum");
     5d0:	83 e8       	ldi	r24, 0x83	; 131
     5d2:	94 e0       	ldi	r25, 0x04	; 4
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	0e 94 7e 28 	call	0x50fc	; 0x50fc <printf>
			
			
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
     5dc:	48 e0       	ldi	r20, 0x08	; 8
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	80 91 e8 13 	lds	r24, 0x13E8	; 0x8013e8 <dataReadyEventGroup>
     5e8:	90 91 e9 13 	lds	r25, 0x13E9	; 0x8013e9 <dataReadyEventGroup+0x1>
     5ec:	e1 d0       	rcall	.+450    	; 0x7b0 <xEventGroupSetBits>
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	d0 cf       	rjmp	.-96     	; 0x594 <Temp_Hum_Main_Task>

000005f4 <TempHumSensor_getTemp>:
	
}
	
uint16_t TempHumSensor_getTemp(){
	return temperature;
}
     5f4:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <temperature>
     5f8:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <temperature+0x1>
     5fc:	08 95       	ret

000005fe <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
     5fe:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <humidity>
     602:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <humidity+0x1>
     606:	08 95       	ret

00000608 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     608:	0f 93       	push	r16
     60a:	01 11       	cpse	r16, r1
     60c:	0c c0       	rjmp	.+24     	; 0x626 <prvTestWaitCondition+0x1e>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	82 23       	and	r24, r18
     614:	93 23       	and	r25, r19
     616:	a4 23       	and	r26, r20
     618:	b5 23       	and	r27, r21
     61a:	89 2b       	or	r24, r25
     61c:	8a 2b       	or	r24, r26
     61e:	8b 2b       	or	r24, r27
     620:	79 f4       	brne	.+30     	; 0x640 <prvTestWaitCondition+0x38>
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	10 c0       	rjmp	.+32     	; 0x646 <prvTestWaitCondition+0x3e>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	82 23       	and	r24, r18
     62c:	93 23       	and	r25, r19
     62e:	a4 23       	and	r26, r20
     630:	b5 23       	and	r27, r21
     632:	28 17       	cp	r18, r24
     634:	39 07       	cpc	r19, r25
     636:	4a 07       	cpc	r20, r26
     638:	5b 07       	cpc	r21, r27
     63a:	21 f0       	breq	.+8      	; 0x644 <prvTestWaitCondition+0x3c>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	03 c0       	rjmp	.+6      	; 0x646 <prvTestWaitCondition+0x3e>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	01 c0       	rjmp	.+2      	; 0x646 <prvTestWaitCondition+0x3e>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	0f 91       	pop	r16
     648:	08 95       	ret

0000064a <xEventGroupCreate>:
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	8f e0       	ldi	r24, 0x0F	; 15
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	af d1       	rcall	.+862    	; 0x9b2 <pvPortMalloc>
     654:	ec 01       	movw	r28, r24
     656:	00 97       	sbiw	r24, 0x00	; 0
     658:	39 f0       	breq	.+14     	; 0x668 <xEventGroupCreate+0x1e>
     65a:	fc 01       	movw	r30, r24
     65c:	11 92       	st	Z+, r1
     65e:	11 92       	st	Z+, r1
     660:	11 92       	st	Z+, r1
     662:	11 92       	st	Z+, r1
     664:	cf 01       	movw	r24, r30
     666:	8b d2       	rcall	.+1302   	; 0xb7e <vListInitialise>
     668:	ce 01       	movw	r24, r28
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <xEventGroupWaitBits>:
     670:	2f 92       	push	r2
     672:	3f 92       	push	r3
     674:	4f 92       	push	r4
     676:	5f 92       	push	r5
     678:	6f 92       	push	r6
     67a:	7f 92       	push	r7
     67c:	8f 92       	push	r8
     67e:	9f 92       	push	r9
     680:	af 92       	push	r10
     682:	bf 92       	push	r11
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	ec 01       	movw	r28, r24
     696:	4a 01       	movw	r8, r20
     698:	5b 01       	movw	r10, r22
     69a:	62 2e       	mov	r6, r18
     69c:	70 2e       	mov	r7, r16
     69e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <vTaskSuspendAll>
     6a2:	28 80       	ld	r2, Y
     6a4:	39 80       	ldd	r3, Y+1	; 0x01
     6a6:	4a 80       	ldd	r4, Y+2	; 0x02
     6a8:	5b 80       	ldd	r5, Y+3	; 0x03
     6aa:	a5 01       	movw	r20, r10
     6ac:	94 01       	movw	r18, r8
     6ae:	c2 01       	movw	r24, r4
     6b0:	b1 01       	movw	r22, r2
     6b2:	aa df       	rcall	.-172    	; 0x608 <prvTestWaitCondition>
     6b4:	88 23       	and	r24, r24
     6b6:	a1 f0       	breq	.+40     	; 0x6e0 <xEventGroupWaitBits+0x70>
     6b8:	66 20       	and	r6, r6
     6ba:	89 f1       	breq	.+98     	; 0x71e <xEventGroupWaitBits+0xae>
     6bc:	d5 01       	movw	r26, r10
     6be:	c4 01       	movw	r24, r8
     6c0:	80 95       	com	r24
     6c2:	90 95       	com	r25
     6c4:	a0 95       	com	r26
     6c6:	b0 95       	com	r27
     6c8:	82 21       	and	r24, r2
     6ca:	93 21       	and	r25, r3
     6cc:	a4 21       	and	r26, r4
     6ce:	b5 21       	and	r27, r5
     6d0:	88 83       	st	Y, r24
     6d2:	99 83       	std	Y+1, r25	; 0x01
     6d4:	aa 83       	std	Y+2, r26	; 0x02
     6d6:	bb 83       	std	Y+3, r27	; 0x03
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
     6dc:	76 01       	movw	r14, r12
     6de:	22 c0       	rjmp	.+68     	; 0x724 <xEventGroupWaitBits+0xb4>
     6e0:	c1 14       	cp	r12, r1
     6e2:	d1 04       	cpc	r13, r1
     6e4:	e1 04       	cpc	r14, r1
     6e6:	f1 04       	cpc	r15, r1
     6e8:	e9 f0       	breq	.+58     	; 0x724 <xEventGroupWaitBits+0xb4>
     6ea:	61 10       	cpse	r6, r1
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <xEventGroupWaitBits+0x86>
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	ba 01       	movw	r22, r20
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <xEventGroupWaitBits+0x8e>
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	71 10       	cpse	r7, r1
     700:	74 60       	ori	r23, 0x04	; 4
     702:	48 29       	or	r20, r8
     704:	59 29       	or	r21, r9
     706:	6a 29       	or	r22, r10
     708:	7b 29       	or	r23, r11
     70a:	97 01       	movw	r18, r14
     70c:	86 01       	movw	r16, r12
     70e:	ce 01       	movw	r24, r28
     710:	04 96       	adiw	r24, 0x04	; 4
     712:	0e 94 76 10 	call	0x20ec	; 0x20ec <vTaskPlaceOnUnorderedEventList>
     716:	21 2c       	mov	r2, r1
     718:	31 2c       	mov	r3, r1
     71a:	21 01       	movw	r4, r2
     71c:	03 c0       	rjmp	.+6      	; 0x724 <xEventGroupWaitBits+0xb4>
     71e:	c1 2c       	mov	r12, r1
     720:	d1 2c       	mov	r13, r1
     722:	76 01       	movw	r14, r12
     724:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <xTaskResumeAll>
     728:	cd 28       	or	r12, r13
     72a:	ce 28       	or	r12, r14
     72c:	cf 28       	or	r12, r15
     72e:	59 f1       	breq	.+86     	; 0x786 <xEventGroupWaitBits+0x116>
     730:	81 11       	cpse	r24, r1
     732:	01 c0       	rjmp	.+2      	; 0x736 <xEventGroupWaitBits+0xc6>
     734:	f2 d2       	rcall	.+1508   	; 0xd1a <vPortYield>
     736:	0e 94 2f 13 	call	0x265e	; 0x265e <uxTaskResetEventItemValue>
     73a:	6b 01       	movw	r12, r22
     73c:	7c 01       	movw	r14, r24
     73e:	91 fd       	sbrc	r25, 1
     740:	1f c0       	rjmp	.+62     	; 0x780 <xEventGroupWaitBits+0x110>
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	0f 92       	push	r0
     748:	c8 80       	ld	r12, Y
     74a:	d9 80       	ldd	r13, Y+1	; 0x01
     74c:	ea 80       	ldd	r14, Y+2	; 0x02
     74e:	fb 80       	ldd	r15, Y+3	; 0x03
     750:	07 2d       	mov	r16, r7
     752:	a5 01       	movw	r20, r10
     754:	94 01       	movw	r18, r8
     756:	c7 01       	movw	r24, r14
     758:	b6 01       	movw	r22, r12
     75a:	56 df       	rcall	.-340    	; 0x608 <prvTestWaitCondition>
     75c:	88 23       	and	r24, r24
     75e:	71 f0       	breq	.+28     	; 0x77c <xEventGroupWaitBits+0x10c>
     760:	66 20       	and	r6, r6
     762:	61 f0       	breq	.+24     	; 0x77c <xEventGroupWaitBits+0x10c>
     764:	80 94       	com	r8
     766:	90 94       	com	r9
     768:	a0 94       	com	r10
     76a:	b0 94       	com	r11
     76c:	8c 20       	and	r8, r12
     76e:	9d 20       	and	r9, r13
     770:	ae 20       	and	r10, r14
     772:	bf 20       	and	r11, r15
     774:	88 82       	st	Y, r8
     776:	99 82       	std	Y+1, r9	; 0x01
     778:	aa 82       	std	Y+2, r10	; 0x02
     77a:	bb 82       	std	Y+3, r11	; 0x03
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	16 01       	movw	r2, r12
     782:	27 01       	movw	r4, r14
     784:	55 24       	eor	r5, r5
     786:	c2 01       	movw	r24, r4
     788:	b1 01       	movw	r22, r2
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	9f 90       	pop	r9
     7a0:	8f 90       	pop	r8
     7a2:	7f 90       	pop	r7
     7a4:	6f 90       	pop	r6
     7a6:	5f 90       	pop	r5
     7a8:	4f 90       	pop	r4
     7aa:	3f 90       	pop	r3
     7ac:	2f 90       	pop	r2
     7ae:	08 95       	ret

000007b0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     7b0:	4f 92       	push	r4
     7b2:	5f 92       	push	r5
     7b4:	6f 92       	push	r6
     7b6:	7f 92       	push	r7
     7b8:	af 92       	push	r10
     7ba:	bf 92       	push	r11
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	ec 01       	movw	r28, r24
     7ce:	6a 01       	movw	r12, r20
     7d0:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7d2:	8c 01       	movw	r16, r24
     7d4:	09 5f       	subi	r16, 0xF9	; 249
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     7d8:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     7dc:	eb 85       	ldd	r30, Y+11	; 0x0b
     7de:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     7e0:	88 81       	ld	r24, Y
     7e2:	99 81       	ldd	r25, Y+1	; 0x01
     7e4:	aa 81       	ldd	r26, Y+2	; 0x02
     7e6:	bb 81       	ldd	r27, Y+3	; 0x03
     7e8:	c8 2a       	or	r12, r24
     7ea:	d9 2a       	or	r13, r25
     7ec:	ea 2a       	or	r14, r26
     7ee:	fb 2a       	or	r15, r27
     7f0:	c8 82       	st	Y, r12
     7f2:	d9 82       	std	Y+1, r13	; 0x01
     7f4:	ea 82       	std	Y+2, r14	; 0x02
     7f6:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     7f8:	c1 2c       	mov	r12, r1
     7fa:	d1 2c       	mov	r13, r1
     7fc:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     7fe:	3d c0       	rjmp	.+122    	; 0x87a <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     800:	a4 80       	ldd	r10, Z+4	; 0x04
     802:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     804:	80 81       	ld	r24, Z
     806:	91 81       	ldd	r25, Z+1	; 0x01
     808:	a2 81       	ldd	r26, Z+2	; 0x02
     80a:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     80c:	ac 01       	movw	r20, r24
     80e:	bd 01       	movw	r22, r26
     810:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     812:	b2 fd       	sbrc	r27, 2
     814:	0e c0       	rjmp	.+28     	; 0x832 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     816:	48 80       	ld	r4, Y
     818:	59 80       	ldd	r5, Y+1	; 0x01
     81a:	6a 80       	ldd	r6, Y+2	; 0x02
     81c:	7b 80       	ldd	r7, Y+3	; 0x03
     81e:	44 22       	and	r4, r20
     820:	55 22       	and	r5, r21
     822:	66 22       	and	r6, r22
     824:	77 22       	and	r7, r23
     826:	45 28       	or	r4, r5
     828:	46 28       	or	r4, r6
     82a:	47 28       	or	r4, r7
     82c:	89 f4       	brne	.+34     	; 0x850 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	12 c0       	rjmp	.+36     	; 0x856 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     832:	48 80       	ld	r4, Y
     834:	59 80       	ldd	r5, Y+1	; 0x01
     836:	6a 80       	ldd	r6, Y+2	; 0x02
     838:	7b 80       	ldd	r7, Y+3	; 0x03
     83a:	44 22       	and	r4, r20
     83c:	55 22       	and	r5, r21
     83e:	66 22       	and	r6, r22
     840:	77 22       	and	r7, r23
     842:	44 15       	cp	r20, r4
     844:	55 05       	cpc	r21, r5
     846:	66 05       	cpc	r22, r6
     848:	77 05       	cpc	r23, r7
     84a:	21 f0       	breq	.+8      	; 0x854 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	03 c0       	rjmp	.+6      	; 0x856 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	01 c0       	rjmp	.+2      	; 0x856 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     854:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     856:	22 23       	and	r18, r18
     858:	71 f0       	breq	.+28     	; 0x876 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     85a:	b0 ff       	sbrs	r27, 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     85e:	c4 2a       	or	r12, r20
     860:	d5 2a       	or	r13, r21
     862:	e6 2a       	or	r14, r22
     864:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     866:	48 81       	ld	r20, Y
     868:	59 81       	ldd	r21, Y+1	; 0x01
     86a:	6a 81       	ldd	r22, Y+2	; 0x02
     86c:	7b 81       	ldd	r23, Y+3	; 0x03
     86e:	72 60       	ori	r23, 0x02	; 2
     870:	cf 01       	movw	r24, r30
     872:	0e 94 b1 11 	call	0x2362	; 0x2362 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     876:	ea 2d       	mov	r30, r10
     878:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     87a:	e0 17       	cp	r30, r16
     87c:	f1 07       	cpc	r31, r17
     87e:	09 f0       	breq	.+2      	; 0x882 <xEventGroupSetBits+0xd2>
     880:	bf cf       	rjmp	.-130    	; 0x800 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     882:	c0 94       	com	r12
     884:	d0 94       	com	r13
     886:	e0 94       	com	r14
     888:	f0 94       	com	r15
     88a:	88 81       	ld	r24, Y
     88c:	99 81       	ldd	r25, Y+1	; 0x01
     88e:	aa 81       	ldd	r26, Y+2	; 0x02
     890:	bb 81       	ldd	r27, Y+3	; 0x03
     892:	c8 22       	and	r12, r24
     894:	d9 22       	and	r13, r25
     896:	ea 22       	and	r14, r26
     898:	fb 22       	and	r15, r27
     89a:	c8 82       	st	Y, r12
     89c:	d9 82       	std	Y+1, r13	; 0x01
     89e:	ea 82       	std	Y+2, r14	; 0x02
     8a0:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     8a2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     8a6:	68 81       	ld	r22, Y
     8a8:	79 81       	ldd	r23, Y+1	; 0x01
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	9b 81       	ldd	r25, Y+3	; 0x03
}
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	bf 90       	pop	r11
     8c0:	af 90       	pop	r10
     8c2:	7f 90       	pop	r7
     8c4:	6f 90       	pop	r6
     8c6:	5f 90       	pop	r5
     8c8:	4f 90       	pop	r4
     8ca:	08 95       	ret

000008cc <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8cc:	e2 ee       	ldi	r30, 0xE2	; 226
     8ce:	f4 e0       	ldi	r31, 0x04	; 4
     8d0:	a6 ee       	ldi	r26, 0xE6	; 230
     8d2:	b4 e0       	ldi	r27, 0x04	; 4
     8d4:	b1 83       	std	Z+1, r27	; 0x01
     8d6:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     8d8:	13 82       	std	Z+3, r1	; 0x03
     8da:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     8dc:	ee e8       	ldi	r30, 0x8E	; 142
     8de:	f2 e1       	ldi	r31, 0x12	; 18
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     8e0:	f0 93 e1 04 	sts	0x04E1, r31	; 0x8004e1 <pxEnd+0x1>
     8e4:	e0 93 e0 04 	sts	0x04E0, r30	; 0x8004e0 <pxEnd>
    pxEnd->xBlockSize = 0;
     8e8:	13 82       	std	Z+3, r1	; 0x03
     8ea:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     8ec:	11 82       	std	Z+1, r1	; 0x01
     8ee:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     8f0:	88 ea       	ldi	r24, 0xA8	; 168
     8f2:	9d e0       	ldi	r25, 0x0D	; 13
     8f4:	13 96       	adiw	r26, 0x03	; 3
     8f6:	9c 93       	st	X, r25
     8f8:	8e 93       	st	-X, r24
     8fa:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     8fc:	ed 93       	st	X+, r30
     8fe:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     900:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <xMinimumEverFreeBytesRemaining+0x1>
     904:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     908:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <xFreeBytesRemaining+0x1>
     90c:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e8       	ldi	r25, 0x80	; 128
     914:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <xBlockAllocatedBit+0x1>
     918:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <xBlockAllocatedBit>
     91c:	08 95       	ret

0000091e <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     924:	a2 ee       	ldi	r26, 0xE2	; 226
     926:	b4 e0       	ldi	r27, 0x04	; 4
     928:	01 c0       	rjmp	.+2      	; 0x92c <prvInsertBlockIntoFreeList+0xe>
     92a:	df 01       	movw	r26, r30
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	11 97       	sbiw	r26, 0x01	; 1
     932:	ec 17       	cp	r30, r28
     934:	fd 07       	cpc	r31, r29
     936:	c8 f3       	brcs	.-14     	; 0x92a <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     938:	12 96       	adiw	r26, 0x02	; 2
     93a:	8d 91       	ld	r24, X+
     93c:	9c 91       	ld	r25, X
     93e:	13 97       	sbiw	r26, 0x03	; 3
     940:	9d 01       	movw	r18, r26
     942:	28 0f       	add	r18, r24
     944:	39 1f       	adc	r19, r25
     946:	c2 17       	cp	r28, r18
     948:	d3 07       	cpc	r29, r19
     94a:	49 f4       	brne	.+18     	; 0x95e <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     94c:	2a 81       	ldd	r18, Y+2	; 0x02
     94e:	3b 81       	ldd	r19, Y+3	; 0x03
     950:	82 0f       	add	r24, r18
     952:	93 1f       	adc	r25, r19
     954:	13 96       	adiw	r26, 0x03	; 3
     956:	9c 93       	st	X, r25
     958:	8e 93       	st	-X, r24
     95a:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     95c:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	9b 81       	ldd	r25, Y+3	; 0x03
     962:	9e 01       	movw	r18, r28
     964:	28 0f       	add	r18, r24
     966:	39 1f       	adc	r19, r25
     968:	e2 17       	cp	r30, r18
     96a:	f3 07       	cpc	r31, r19
     96c:	c1 f4       	brne	.+48     	; 0x99e <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     96e:	20 91 e0 04 	lds	r18, 0x04E0	; 0x8004e0 <pxEnd>
     972:	30 91 e1 04 	lds	r19, 0x04E1	; 0x8004e1 <pxEnd+0x1>
     976:	e2 17       	cp	r30, r18
     978:	f3 07       	cpc	r31, r19
     97a:	71 f0       	breq	.+28     	; 0x998 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     97c:	22 81       	ldd	r18, Z+2	; 0x02
     97e:	33 81       	ldd	r19, Z+3	; 0x03
     980:	82 0f       	add	r24, r18
     982:	93 1f       	adc	r25, r19
     984:	9b 83       	std	Y+3, r25	; 0x03
     986:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     988:	ed 91       	ld	r30, X+
     98a:	fc 91       	ld	r31, X
     98c:	11 97       	sbiw	r26, 0x01	; 1
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	99 83       	std	Y+1, r25	; 0x01
     994:	88 83       	st	Y, r24
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     998:	39 83       	std	Y+1, r19	; 0x01
     99a:	28 83       	st	Y, r18
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     99e:	f9 83       	std	Y+1, r31	; 0x01
     9a0:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     9a2:	ca 17       	cp	r28, r26
     9a4:	db 07       	cpc	r29, r27
     9a6:	11 f0       	breq	.+4      	; 0x9ac <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     9a8:	cd 93       	st	X+, r28
     9aa:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     9c0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     9c4:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <pxEnd>
     9c8:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <pxEnd+0x1>
     9cc:	89 2b       	or	r24, r25
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     9d0:	7d df       	rcall	.-262    	; 0x8cc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     9d2:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <xBlockAllocatedBit>
     9d6:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <xBlockAllocatedBit+0x1>
     9da:	80 23       	and	r24, r16
     9dc:	91 23       	and	r25, r17
     9de:	89 2b       	or	r24, r25
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <pvPortMalloc+0x32>
     9e2:	76 c0       	rjmp	.+236    	; 0xad0 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     9e4:	01 15       	cp	r16, r1
     9e6:	11 05       	cpc	r17, r1
     9e8:	49 f0       	breq	.+18     	; 0x9fc <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     9ea:	c8 01       	movw	r24, r16
     9ec:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     9ee:	08 17       	cp	r16, r24
     9f0:	19 07       	cpc	r17, r25
     9f2:	18 f0       	brcs	.+6      	; 0x9fa <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     9f4:	00 e0       	ldi	r16, 0x00	; 0
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     9fa:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     9fc:	01 15       	cp	r16, r1
     9fe:	11 05       	cpc	r17, r1
     a00:	09 f4       	brne	.+2      	; 0xa04 <pvPortMalloc+0x52>
     a02:	69 c0       	rjmp	.+210    	; 0xad6 <pvPortMalloc+0x124>
     a04:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <xFreeBytesRemaining>
     a08:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <xFreeBytesRemaining+0x1>
     a0c:	80 17       	cp	r24, r16
     a0e:	91 07       	cpc	r25, r17
     a10:	08 f4       	brcc	.+2      	; 0xa14 <pvPortMalloc+0x62>
     a12:	64 c0       	rjmp	.+200    	; 0xadc <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a14:	c0 91 e2 04 	lds	r28, 0x04E2	; 0x8004e2 <xStart>
     a18:	d0 91 e3 04 	lds	r29, 0x04E3	; 0x8004e3 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a1c:	e2 ee       	ldi	r30, 0xE2	; 226
     a1e:	f4 e0       	ldi	r31, 0x04	; 4
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a22:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a24:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	80 17       	cp	r24, r16
     a2c:	91 07       	cpc	r25, r17
     a2e:	20 f4       	brcc	.+8      	; 0xa38 <pvPortMalloc+0x86>
     a30:	88 81       	ld	r24, Y
     a32:	99 81       	ldd	r25, Y+1	; 0x01
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	a9 f7       	brne	.-22     	; 0xa22 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     a38:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <pxEnd>
     a3c:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <pxEnd+0x1>
     a40:	c8 17       	cp	r28, r24
     a42:	d9 07       	cpc	r29, r25
     a44:	09 f4       	brne	.+2      	; 0xa48 <pvPortMalloc+0x96>
     a46:	4d c0       	rjmp	.+154    	; 0xae2 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a48:	e0 80       	ld	r14, Z
     a4a:	f1 80       	ldd	r15, Z+1	; 0x01
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	e8 0e       	add	r14, r24
     a50:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a52:	88 81       	ld	r24, Y
     a54:	99 81       	ldd	r25, Y+1	; 0x01
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a5a:	2a 81       	ldd	r18, Y+2	; 0x02
     a5c:	3b 81       	ldd	r19, Y+3	; 0x03
     a5e:	20 1b       	sub	r18, r16
     a60:	31 0b       	sbc	r19, r17
     a62:	29 30       	cpi	r18, 0x09	; 9
     a64:	31 05       	cpc	r19, r1
     a66:	48 f0       	brcs	.+18     	; 0xa7a <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a68:	ce 01       	movw	r24, r28
     a6a:	80 0f       	add	r24, r16
     a6c:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a6e:	fc 01       	movw	r30, r24
     a70:	33 83       	std	Z+3, r19	; 0x03
     a72:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     a74:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     a76:	0a 83       	std	Y+2, r16	; 0x02
     a78:	52 df       	rcall	.-348    	; 0x91e <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     a7a:	2a 81       	ldd	r18, Y+2	; 0x02
     a7c:	3b 81       	ldd	r19, Y+3	; 0x03
     a7e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <xFreeBytesRemaining>
     a82:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <xFreeBytesRemaining+0x1>
     a86:	82 1b       	sub	r24, r18
     a88:	93 0b       	sbc	r25, r19
     a8a:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <xFreeBytesRemaining+0x1>
     a8e:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     a92:	40 91 dc 04 	lds	r20, 0x04DC	; 0x8004dc <xMinimumEverFreeBytesRemaining>
     a96:	50 91 dd 04 	lds	r21, 0x04DD	; 0x8004dd <xMinimumEverFreeBytesRemaining+0x1>
     a9a:	84 17       	cp	r24, r20
     a9c:	95 07       	cpc	r25, r21
     a9e:	20 f4       	brcc	.+8      	; 0xaa8 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     aa0:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <xMinimumEverFreeBytesRemaining+0x1>
     aa4:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     aa8:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <xBlockAllocatedBit>
     aac:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <xBlockAllocatedBit+0x1>
     ab0:	28 2b       	or	r18, r24
     ab2:	39 2b       	or	r19, r25
     ab4:	3b 83       	std	Y+3, r19	; 0x03
     ab6:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     ab8:	19 82       	std	Y+1, r1	; 0x01
     aba:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     abc:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <xNumberOfSuccessfulAllocations>
     ac0:	90 91 db 04 	lds	r25, 0x04DB	; 0x8004db <xNumberOfSuccessfulAllocations+0x1>
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <xNumberOfSuccessfulAllocations+0x1>
     aca:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <xNumberOfSuccessfulAllocations>
     ace:	0b c0       	rjmp	.+22     	; 0xae6 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     ad0:	e1 2c       	mov	r14, r1
     ad2:	f1 2c       	mov	r15, r1
     ad4:	08 c0       	rjmp	.+16     	; 0xae6 <pvPortMalloc+0x134>
     ad6:	e1 2c       	mov	r14, r1
     ad8:	f1 2c       	mov	r15, r1
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <pvPortMalloc+0x134>
     adc:	e1 2c       	mov	r14, r1
     ade:	f1 2c       	mov	r15, r1
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <pvPortMalloc+0x134>
     ae2:	e1 2c       	mov	r14, r1
     ae4:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     ae6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     aea:	e1 14       	cp	r14, r1
     aec:	f1 04       	cpc	r15, r1
     aee:	11 f4       	brne	.+4      	; 0xaf4 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     af0:	0e 94 83 17 	call	0x2f06	; 0x2f06 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     af4:	c7 01       	movw	r24, r14
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	08 95       	ret

00000b04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b0c:	00 97       	sbiw	r24, 0x00	; 0
     b0e:	91 f1       	breq	.+100    	; 0xb74 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b10:	ec 01       	movw	r28, r24
     b12:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b14:	4a 81       	ldd	r20, Y+2	; 0x02
     b16:	5b 81       	ldd	r21, Y+3	; 0x03
     b18:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <xBlockAllocatedBit>
     b1c:	30 91 d7 04 	lds	r19, 0x04D7	; 0x8004d7 <xBlockAllocatedBit+0x1>
     b20:	ba 01       	movw	r22, r20
     b22:	62 23       	and	r22, r18
     b24:	73 23       	and	r23, r19
     b26:	67 2b       	or	r22, r23
     b28:	29 f1       	breq	.+74     	; 0xb74 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b2a:	68 81       	ld	r22, Y
     b2c:	79 81       	ldd	r23, Y+1	; 0x01
     b2e:	67 2b       	or	r22, r23
     b30:	09 f5       	brne	.+66     	; 0xb74 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b32:	20 95       	com	r18
     b34:	30 95       	com	r19
     b36:	24 23       	and	r18, r20
     b38:	35 23       	and	r19, r21
     b3a:	3b 83       	std	Y+3, r19	; 0x03
     b3c:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     b3e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     b42:	8a 81       	ldd	r24, Y+2	; 0x02
     b44:	9b 81       	ldd	r25, Y+3	; 0x03
     b46:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <xFreeBytesRemaining>
     b4a:	30 91 df 04 	lds	r19, 0x04DF	; 0x8004df <xFreeBytesRemaining+0x1>
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
     b52:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <xFreeBytesRemaining+0x1>
     b56:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b5a:	ce 01       	movw	r24, r28
     b5c:	e0 de       	rcall	.-576    	; 0x91e <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     b5e:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <xNumberOfSuccessfulFrees>
     b62:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <xNumberOfSuccessfulFrees+0x1>
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <xNumberOfSuccessfulFrees+0x1>
     b6c:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     b70:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     b7e:	fc 01       	movw	r30, r24
     b80:	03 96       	adiw	r24, 0x03	; 3
     b82:	92 83       	std	Z+2, r25	; 0x02
     b84:	81 83       	std	Z+1, r24	; 0x01
     b86:	4f ef       	ldi	r20, 0xFF	; 255
     b88:	5f ef       	ldi	r21, 0xFF	; 255
     b8a:	ba 01       	movw	r22, r20
     b8c:	43 83       	std	Z+3, r20	; 0x03
     b8e:	54 83       	std	Z+4, r21	; 0x04
     b90:	65 83       	std	Z+5, r22	; 0x05
     b92:	76 83       	std	Z+6, r23	; 0x06
     b94:	90 87       	std	Z+8, r25	; 0x08
     b96:	87 83       	std	Z+7, r24	; 0x07
     b98:	92 87       	std	Z+10, r25	; 0x0a
     b9a:	81 87       	std	Z+9, r24	; 0x09
     b9c:	10 82       	st	Z, r1
     b9e:	08 95       	ret

00000ba0 <vListInitialiseItem>:
     ba0:	fc 01       	movw	r30, r24
     ba2:	13 86       	std	Z+11, r1	; 0x0b
     ba4:	12 86       	std	Z+10, r1	; 0x0a
     ba6:	08 95       	ret

00000ba8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bb2:	08 81       	ld	r16, Y
     bb4:	19 81       	ldd	r17, Y+1	; 0x01
     bb6:	2a 81       	ldd	r18, Y+2	; 0x02
     bb8:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bba:	0f 3f       	cpi	r16, 0xFF	; 255
     bbc:	4f ef       	ldi	r20, 0xFF	; 255
     bbe:	14 07       	cpc	r17, r20
     bc0:	24 07       	cpc	r18, r20
     bc2:	34 07       	cpc	r19, r20
     bc4:	21 f4       	brne	.+8      	; 0xbce <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     bc6:	fc 01       	movw	r30, r24
     bc8:	a1 85       	ldd	r26, Z+9	; 0x09
     bca:	b2 85       	ldd	r27, Z+10	; 0x0a
     bcc:	11 c0       	rjmp	.+34     	; 0xbf0 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     bce:	dc 01       	movw	r26, r24
     bd0:	13 96       	adiw	r26, 0x03	; 3
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <vListInsert+0x2e>
     bd4:	df 01       	movw	r26, r30
     bd6:	14 96       	adiw	r26, 0x04	; 4
     bd8:	ed 91       	ld	r30, X+
     bda:	fc 91       	ld	r31, X
     bdc:	15 97       	sbiw	r26, 0x05	; 5
     bde:	40 81       	ld	r20, Z
     be0:	51 81       	ldd	r21, Z+1	; 0x01
     be2:	62 81       	ldd	r22, Z+2	; 0x02
     be4:	73 81       	ldd	r23, Z+3	; 0x03
     be6:	04 17       	cp	r16, r20
     be8:	15 07       	cpc	r17, r21
     bea:	26 07       	cpc	r18, r22
     bec:	37 07       	cpc	r19, r23
     bee:	90 f7       	brcc	.-28     	; 0xbd4 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     bf0:	14 96       	adiw	r26, 0x04	; 4
     bf2:	ed 91       	ld	r30, X+
     bf4:	fc 91       	ld	r31, X
     bf6:	15 97       	sbiw	r26, 0x05	; 5
     bf8:	fd 83       	std	Y+5, r31	; 0x05
     bfa:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     bfc:	d7 83       	std	Z+7, r29	; 0x07
     bfe:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c00:	bf 83       	std	Y+7, r27	; 0x07
     c02:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c04:	15 96       	adiw	r26, 0x05	; 5
     c06:	dc 93       	st	X, r29
     c08:	ce 93       	st	-X, r28
     c0a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c0c:	9b 87       	std	Y+11, r25	; 0x0b
     c0e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c10:	fc 01       	movw	r30, r24
     c12:	20 81       	ld	r18, Z
     c14:	2f 5f       	subi	r18, 0xFF	; 255
     c16:	20 83       	st	Z, r18
}
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c28:	a2 85       	ldd	r26, Z+10	; 0x0a
     c2a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c2c:	c4 81       	ldd	r28, Z+4	; 0x04
     c2e:	d5 81       	ldd	r29, Z+5	; 0x05
     c30:	86 81       	ldd	r24, Z+6	; 0x06
     c32:	97 81       	ldd	r25, Z+7	; 0x07
     c34:	9f 83       	std	Y+7, r25	; 0x07
     c36:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c38:	c6 81       	ldd	r28, Z+6	; 0x06
     c3a:	d7 81       	ldd	r29, Z+7	; 0x07
     c3c:	84 81       	ldd	r24, Z+4	; 0x04
     c3e:	95 81       	ldd	r25, Z+5	; 0x05
     c40:	9d 83       	std	Y+5, r25	; 0x05
     c42:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c44:	11 96       	adiw	r26, 0x01	; 1
     c46:	8d 91       	ld	r24, X+
     c48:	9c 91       	ld	r25, X
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	e8 17       	cp	r30, r24
     c4e:	f9 07       	cpc	r31, r25
     c50:	31 f4       	brne	.+12     	; 0xc5e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c52:	86 81       	ldd	r24, Z+6	; 0x06
     c54:	97 81       	ldd	r25, Z+7	; 0x07
     c56:	12 96       	adiw	r26, 0x02	; 2
     c58:	9c 93       	st	X, r25
     c5a:	8e 93       	st	-X, r24
     c5c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c5e:	13 86       	std	Z+11, r1	; 0x0b
     c60:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     c62:	8c 91       	ld	r24, X
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c68:	8c 91       	ld	r24, X
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     c70:	a8 95       	wdr
     c72:	90 ec       	ldi	r25, 0xC0	; 192
     c74:	88 e1       	ldi	r24, 0x18	; 24
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	a8 95       	wdr
     c7c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c86:	08 95       	ret

00000c88 <pxPortInitialiseStack>:
     c88:	fc 01       	movw	r30, r24
     c8a:	60 83       	st	Z, r22
     c8c:	31 97       	sbiw	r30, 0x01	; 1
     c8e:	70 83       	st	Z, r23
     c90:	31 97       	sbiw	r30, 0x01	; 1
     c92:	10 82       	st	Z, r1
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	10 82       	st	Z, r1
     c98:	31 97       	sbiw	r30, 0x01	; 1
     c9a:	20 e8       	ldi	r18, 0x80	; 128
     c9c:	20 83       	st	Z, r18
     c9e:	31 97       	sbiw	r30, 0x01	; 1
     ca0:	10 82       	st	Z, r1
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	10 82       	st	Z, r1
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	10 82       	st	Z, r1
     caa:	77 97       	sbiw	r30, 0x17	; 23
     cac:	40 83       	st	Z, r20
     cae:	31 97       	sbiw	r30, 0x01	; 1
     cb0:	50 83       	st	Z, r21
     cb2:	86 97       	sbiw	r24, 0x26	; 38
     cb4:	08 95       	ret

00000cb6 <xPortStartScheduler>:
     cb6:	dc df       	rcall	.-72     	; 0xc70 <prvSetupTimerInterrupt>
     cb8:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     cbc:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     cc0:	cd 91       	ld	r28, X+
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	dd 91       	ld	r29, X+
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	cf 90       	pop	r12
     cf0:	bf 90       	pop	r11
     cf2:	af 90       	pop	r10
     cf4:	9f 90       	pop	r9
     cf6:	8f 90       	pop	r8
     cf8:	7f 90       	pop	r7
     cfa:	6f 90       	pop	r6
     cfc:	5f 90       	pop	r5
     cfe:	4f 90       	pop	r4
     d00:	3f 90       	pop	r3
     d02:	2f 90       	pop	r2
     d04:	1f 90       	pop	r1
     d06:	0f 90       	pop	r0
     d08:	0c be       	out	0x3c, r0	; 60
     d0a:	0f 90       	pop	r0
     d0c:	0b be       	out	0x3b, r0	; 59
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	08 95       	ret
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	08 95       	ret

00000d1a <vPortYield>:
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	0f 92       	push	r0
     d22:	0b b6       	in	r0, 0x3b	; 59
     d24:	0f 92       	push	r0
     d26:	0c b6       	in	r0, 0x3c	; 60
     d28:	0f 92       	push	r0
     d2a:	1f 92       	push	r1
     d2c:	11 24       	eor	r1, r1
     d2e:	2f 92       	push	r2
     d30:	3f 92       	push	r3
     d32:	4f 92       	push	r4
     d34:	5f 92       	push	r5
     d36:	6f 92       	push	r6
     d38:	7f 92       	push	r7
     d3a:	8f 92       	push	r8
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
     d6a:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     d6e:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     d72:	0d b6       	in	r0, 0x3d	; 61
     d74:	0d 92       	st	X+, r0
     d76:	0e b6       	in	r0, 0x3e	; 62
     d78:	0d 92       	st	X+, r0
     d7a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <vTaskSwitchContext>
     d7e:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     d82:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     d86:	cd 91       	ld	r28, X+
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	dd 91       	ld	r29, X+
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
     db6:	bf 90       	pop	r11
     db8:	af 90       	pop	r10
     dba:	9f 90       	pop	r9
     dbc:	8f 90       	pop	r8
     dbe:	7f 90       	pop	r7
     dc0:	6f 90       	pop	r6
     dc2:	5f 90       	pop	r5
     dc4:	4f 90       	pop	r4
     dc6:	3f 90       	pop	r3
     dc8:	2f 90       	pop	r2
     dca:	1f 90       	pop	r1
     dcc:	0f 90       	pop	r0
     dce:	0c be       	out	0x3c, r0	; 60
     dd0:	0f 90       	pop	r0
     dd2:	0b be       	out	0x3b, r0	; 59
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	08 95       	ret

00000ddc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	0f 92       	push	r0
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	0c b6       	in	r0, 0x3c	; 60
     dea:	0f 92       	push	r0
     dec:	1f 92       	push	r1
     dee:	11 24       	eor	r1, r1
     df0:	2f 92       	push	r2
     df2:	3f 92       	push	r3
     df4:	4f 92       	push	r4
     df6:	5f 92       	push	r5
     df8:	6f 92       	push	r6
     dfa:	7f 92       	push	r7
     dfc:	8f 92       	push	r8
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	2f 93       	push	r18
     e12:	3f 93       	push	r19
     e14:	4f 93       	push	r20
     e16:	5f 93       	push	r21
     e18:	6f 93       	push	r22
     e1a:	7f 93       	push	r23
     e1c:	8f 93       	push	r24
     e1e:	9f 93       	push	r25
     e20:	af 93       	push	r26
     e22:	bf 93       	push	r27
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     e30:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     e34:	0d b6       	in	r0, 0x3d	; 61
     e36:	0d 92       	st	X+, r0
     e38:	0e b6       	in	r0, 0x3e	; 62
     e3a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     e3c:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     e3e:	b8 d6       	rcall	.+3440   	; 0x1bb0 <xTaskIncrementTick>
     e40:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e42:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     e46:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
     e4a:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
     e4e:	cd 91       	ld	r28, X+
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	dd 91       	ld	r29, X+
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	ff 91       	pop	r31
     e58:	ef 91       	pop	r30
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	bf 91       	pop	r27
     e60:	af 91       	pop	r26
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	7f 91       	pop	r23
     e68:	6f 91       	pop	r22
     e6a:	5f 91       	pop	r21
     e6c:	4f 91       	pop	r20
     e6e:	3f 91       	pop	r19
     e70:	2f 91       	pop	r18
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	7f 90       	pop	r7
     e88:	6f 90       	pop	r6
     e8a:	5f 90       	pop	r5
     e8c:	4f 90       	pop	r4
     e8e:	3f 90       	pop	r3
     e90:	2f 90       	pop	r2
     e92:	1f 90       	pop	r1
     e94:	0f 90       	pop	r0
     e96:	0c be       	out	0x3c, r0	; 60
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ea2:	08 95       	ret

00000ea4 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     ea4:	9b df       	rcall	.-202    	; 0xddc <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ea6:	18 95       	reti

00000ea8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	0f 92       	push	r0
     eae:	fc 01       	movw	r30, r24
     eb0:	86 8d       	ldd	r24, Z+30	; 0x1e
     eb2:	81 11       	cpse	r24, r1
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <prvIsQueueEmpty+0x12>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <prvIsQueueEmpty+0x14>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	08 95       	ret

00000ec2 <prvIsQueueFull>:
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	fc 01       	movw	r30, r24
     eca:	26 8d       	ldd	r18, Z+30	; 0x1e
     ecc:	87 8d       	ldd	r24, Z+31	; 0x1f
     ece:	28 13       	cpse	r18, r24
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <prvIsQueueFull+0x14>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <prvIsQueueFull+0x16>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	08 95       	ret

00000ede <prvCopyDataToQueue>:
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	ec 01       	movw	r28, r24
     ee8:	04 2f       	mov	r16, r20
     eea:	1e 8d       	ldd	r17, Y+30	; 0x1e
     eec:	48 a1       	ldd	r20, Y+32	; 0x20
     eee:	41 11       	cpse	r20, r1
     ef0:	0c c0       	rjmp	.+24     	; 0xf0a <prvCopyDataToQueue+0x2c>
     ef2:	88 81       	ld	r24, Y
     ef4:	99 81       	ldd	r25, Y+1	; 0x01
     ef6:	89 2b       	or	r24, r25
     ef8:	09 f0       	breq	.+2      	; 0xefc <prvCopyDataToQueue+0x1e>
     efa:	42 c0       	rjmp	.+132    	; 0xf80 <prvCopyDataToQueue+0xa2>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <xTaskPriorityDisinherit>
     f04:	1d 82       	std	Y+5, r1	; 0x05
     f06:	1c 82       	std	Y+4, r1	; 0x04
     f08:	42 c0       	rjmp	.+132    	; 0xf8e <prvCopyDataToQueue+0xb0>
     f0a:	01 11       	cpse	r16, r1
     f0c:	17 c0       	rjmp	.+46     	; 0xf3c <prvCopyDataToQueue+0x5e>
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	0e 94 27 28 	call	0x504e	; 0x504e <memcpy>
     f18:	28 a1       	ldd	r18, Y+32	; 0x20
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	9b 81       	ldd	r25, Y+3	; 0x03
     f1e:	82 0f       	add	r24, r18
     f20:	91 1d       	adc	r25, r1
     f22:	9b 83       	std	Y+3, r25	; 0x03
     f24:	8a 83       	std	Y+2, r24	; 0x02
     f26:	2c 81       	ldd	r18, Y+4	; 0x04
     f28:	3d 81       	ldd	r19, Y+5	; 0x05
     f2a:	82 17       	cp	r24, r18
     f2c:	93 07       	cpc	r25, r19
     f2e:	50 f1       	brcs	.+84     	; 0xf84 <prvCopyDataToQueue+0xa6>
     f30:	88 81       	ld	r24, Y
     f32:	99 81       	ldd	r25, Y+1	; 0x01
     f34:	9b 83       	std	Y+3, r25	; 0x03
     f36:	8a 83       	std	Y+2, r24	; 0x02
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	29 c0       	rjmp	.+82     	; 0xf8e <prvCopyDataToQueue+0xb0>
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	8e 81       	ldd	r24, Y+6	; 0x06
     f40:	9f 81       	ldd	r25, Y+7	; 0x07
     f42:	0e 94 27 28 	call	0x504e	; 0x504e <memcpy>
     f46:	88 a1       	ldd	r24, Y+32	; 0x20
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	91 95       	neg	r25
     f4c:	81 95       	neg	r24
     f4e:	91 09       	sbc	r25, r1
     f50:	2e 81       	ldd	r18, Y+6	; 0x06
     f52:	3f 81       	ldd	r19, Y+7	; 0x07
     f54:	28 0f       	add	r18, r24
     f56:	39 1f       	adc	r19, r25
     f58:	3f 83       	std	Y+7, r19	; 0x07
     f5a:	2e 83       	std	Y+6, r18	; 0x06
     f5c:	48 81       	ld	r20, Y
     f5e:	59 81       	ldd	r21, Y+1	; 0x01
     f60:	24 17       	cp	r18, r20
     f62:	35 07       	cpc	r19, r21
     f64:	30 f4       	brcc	.+12     	; 0xf72 <prvCopyDataToQueue+0x94>
     f66:	2c 81       	ldd	r18, Y+4	; 0x04
     f68:	3d 81       	ldd	r19, Y+5	; 0x05
     f6a:	82 0f       	add	r24, r18
     f6c:	93 1f       	adc	r25, r19
     f6e:	9f 83       	std	Y+7, r25	; 0x07
     f70:	8e 83       	std	Y+6, r24	; 0x06
     f72:	02 30       	cpi	r16, 0x02	; 2
     f74:	49 f4       	brne	.+18     	; 0xf88 <prvCopyDataToQueue+0xaa>
     f76:	11 23       	and	r17, r17
     f78:	49 f0       	breq	.+18     	; 0xf8c <prvCopyDataToQueue+0xae>
     f7a:	11 50       	subi	r17, 0x01	; 1
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	07 c0       	rjmp	.+14     	; 0xf8e <prvCopyDataToQueue+0xb0>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <prvCopyDataToQueue+0xb0>
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <prvCopyDataToQueue+0xb0>
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <prvCopyDataToQueue+0xb0>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	1f 5f       	subi	r17, 0xFF	; 255
     f90:	1e 8f       	std	Y+30, r17	; 0x1e
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <prvCopyDataFromQueue>:
     f9c:	fc 01       	movw	r30, r24
     f9e:	40 a1       	ldd	r20, Z+32	; 0x20
     fa0:	44 23       	and	r20, r20
     fa2:	a9 f0       	breq	.+42     	; 0xfce <prvCopyDataFromQueue+0x32>
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	26 81       	ldd	r18, Z+6	; 0x06
     fa8:	37 81       	ldd	r19, Z+7	; 0x07
     faa:	24 0f       	add	r18, r20
     fac:	35 1f       	adc	r19, r21
     fae:	37 83       	std	Z+7, r19	; 0x07
     fb0:	26 83       	std	Z+6, r18	; 0x06
     fb2:	84 81       	ldd	r24, Z+4	; 0x04
     fb4:	95 81       	ldd	r25, Z+5	; 0x05
     fb6:	28 17       	cp	r18, r24
     fb8:	39 07       	cpc	r19, r25
     fba:	20 f0       	brcs	.+8      	; 0xfc4 <prvCopyDataFromQueue+0x28>
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	97 83       	std	Z+7, r25	; 0x07
     fc2:	86 83       	std	Z+6, r24	; 0x06
     fc4:	cb 01       	movw	r24, r22
     fc6:	66 81       	ldd	r22, Z+6	; 0x06
     fc8:	77 81       	ldd	r23, Z+7	; 0x07
     fca:	0c 94 27 28 	jmp	0x504e	; 0x504e <memcpy>
     fce:	08 95       	ret

00000fd0 <prvUnlockQueue>:
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	0f 92       	push	r0
     fde:	1a a1       	ldd	r17, Y+34	; 0x22
     fe0:	0b c0       	rjmp	.+22     	; 0xff8 <prvUnlockQueue+0x28>
     fe2:	8b 89       	ldd	r24, Y+19	; 0x13
     fe4:	88 23       	and	r24, r24
     fe6:	51 f0       	breq	.+20     	; 0xffc <prvUnlockQueue+0x2c>
     fe8:	ce 01       	movw	r24, r28
     fea:	43 96       	adiw	r24, 0x13	; 19
     fec:	0e 94 02 11 	call	0x2204	; 0x2204 <xTaskRemoveFromEventList>
     ff0:	81 11       	cpse	r24, r1
     ff2:	0e 94 c2 12 	call	0x2584	; 0x2584 <vTaskMissedYield>
     ff6:	11 50       	subi	r17, 0x01	; 1
     ff8:	11 16       	cp	r1, r17
     ffa:	9c f3       	brlt	.-26     	; 0xfe2 <prvUnlockQueue+0x12>
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	8a a3       	std	Y+34, r24	; 0x22
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	0f 92       	push	r0
    100a:	19 a1       	ldd	r17, Y+33	; 0x21
    100c:	0b c0       	rjmp	.+22     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    100e:	88 85       	ldd	r24, Y+8	; 0x08
    1010:	88 23       	and	r24, r24
    1012:	51 f0       	breq	.+20     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1014:	ce 01       	movw	r24, r28
    1016:	08 96       	adiw	r24, 0x08	; 8
    1018:	0e 94 02 11 	call	0x2204	; 0x2204 <xTaskRemoveFromEventList>
    101c:	81 11       	cpse	r24, r1
    101e:	0e 94 c2 12 	call	0x2584	; 0x2584 <vTaskMissedYield>
    1022:	11 50       	subi	r17, 0x01	; 1
    1024:	11 16       	cp	r1, r17
    1026:	9c f3       	brlt	.-26     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	89 a3       	std	Y+33, r24	; 0x21
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	08 95       	ret

00001038 <xQueueGenericReset>:
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ec 01       	movw	r28, r24
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	0f 92       	push	r0
    1044:	e8 81       	ld	r30, Y
    1046:	f9 81       	ldd	r31, Y+1	; 0x01
    1048:	8f 8d       	ldd	r24, Y+31	; 0x1f
    104a:	28 a1       	ldd	r18, Y+32	; 0x20
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	82 9f       	mul	r24, r18
    1052:	a0 01       	movw	r20, r0
    1054:	83 9f       	mul	r24, r19
    1056:	50 0d       	add	r21, r0
    1058:	92 9f       	mul	r25, r18
    105a:	50 0d       	add	r21, r0
    105c:	11 24       	eor	r1, r1
    105e:	4e 0f       	add	r20, r30
    1060:	5f 1f       	adc	r21, r31
    1062:	5d 83       	std	Y+5, r21	; 0x05
    1064:	4c 83       	std	Y+4, r20	; 0x04
    1066:	1e 8e       	std	Y+30, r1	; 0x1e
    1068:	fb 83       	std	Y+3, r31	; 0x03
    106a:	ea 83       	std	Y+2, r30	; 0x02
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	28 9f       	mul	r18, r24
    1070:	a0 01       	movw	r20, r0
    1072:	29 9f       	mul	r18, r25
    1074:	50 0d       	add	r21, r0
    1076:	38 9f       	mul	r19, r24
    1078:	50 0d       	add	r21, r0
    107a:	11 24       	eor	r1, r1
    107c:	cf 01       	movw	r24, r30
    107e:	84 0f       	add	r24, r20
    1080:	95 1f       	adc	r25, r21
    1082:	9f 83       	std	Y+7, r25	; 0x07
    1084:	8e 83       	std	Y+6, r24	; 0x06
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	89 a3       	std	Y+33, r24	; 0x21
    108a:	8a a3       	std	Y+34, r24	; 0x22
    108c:	61 11       	cpse	r22, r1
    108e:	0b c0       	rjmp	.+22     	; 0x10a6 <xQueueGenericReset+0x6e>
    1090:	88 85       	ldd	r24, Y+8	; 0x08
    1092:	88 23       	and	r24, r24
    1094:	71 f0       	breq	.+28     	; 0x10b2 <xQueueGenericReset+0x7a>
    1096:	ce 01       	movw	r24, r28
    1098:	08 96       	adiw	r24, 0x08	; 8
    109a:	0e 94 02 11 	call	0x2204	; 0x2204 <xTaskRemoveFromEventList>
    109e:	88 23       	and	r24, r24
    10a0:	41 f0       	breq	.+16     	; 0x10b2 <xQueueGenericReset+0x7a>
    10a2:	3b de       	rcall	.-906    	; 0xd1a <vPortYield>
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <xQueueGenericReset+0x7a>
    10a6:	ce 01       	movw	r24, r28
    10a8:	08 96       	adiw	r24, 0x08	; 8
    10aa:	69 dd       	rcall	.-1326   	; 0xb7e <vListInitialise>
    10ac:	ce 01       	movw	r24, r28
    10ae:	43 96       	adiw	r24, 0x13	; 19
    10b0:	66 dd       	rcall	.-1332   	; 0xb7e <vListInitialise>
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <prvInitialiseNewQueue>:
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	f8 01       	movw	r30, r16
    10c4:	61 11       	cpse	r22, r1
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <prvInitialiseNewQueue+0x10>
    10c8:	11 83       	std	Z+1, r17	; 0x01
    10ca:	00 83       	st	Z, r16
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <prvInitialiseNewQueue+0x14>
    10ce:	51 83       	std	Z+1, r21	; 0x01
    10d0:	40 83       	st	Z, r20
    10d2:	87 8f       	std	Z+31, r24	; 0x1f
    10d4:	60 a3       	std	Z+32, r22	; 0x20
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	cf 01       	movw	r24, r30
    10da:	ae df       	rcall	.-164    	; 0x1038 <xQueueGenericReset>
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	08 95       	ret

000010e2 <xQueueGenericCreate>:
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	f8 2e       	mov	r15, r24
    10f2:	e6 2e       	mov	r14, r22
    10f4:	d4 2e       	mov	r13, r20
    10f6:	86 9f       	mul	r24, r22
    10f8:	c0 01       	movw	r24, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	83 96       	adiw	r24, 0x23	; 35
    10fe:	59 dc       	rcall	.-1870   	; 0x9b2 <pvPortMalloc>
    1100:	ec 01       	movw	r28, r24
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	41 f0       	breq	.+16     	; 0x1116 <xQueueGenericCreate+0x34>
    1106:	8c 01       	movw	r16, r24
    1108:	2d 2d       	mov	r18, r13
    110a:	ac 01       	movw	r20, r24
    110c:	4d 5d       	subi	r20, 0xDD	; 221
    110e:	5f 4f       	sbci	r21, 0xFF	; 255
    1110:	6e 2d       	mov	r22, r14
    1112:	8f 2d       	mov	r24, r15
    1114:	d4 df       	rcall	.-88     	; 0x10be <prvInitialiseNewQueue>
    1116:	ce 01       	movw	r24, r28
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	08 95       	ret

00001128 <xQueueGenericSend>:
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	29 97       	sbiw	r28, 0x09	; 9
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	7c 01       	movw	r14, r24
    114a:	6b 01       	movw	r12, r22
    114c:	2e 83       	std	Y+6, r18	; 0x06
    114e:	3f 83       	std	Y+7, r19	; 0x07
    1150:	48 87       	std	Y+8, r20	; 0x08
    1152:	59 87       	std	Y+9, r21	; 0x09
    1154:	10 e0       	ldi	r17, 0x00	; 0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	0f 92       	push	r0
    115c:	f7 01       	movw	r30, r14
    115e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1160:	87 8d       	ldd	r24, Z+31	; 0x1f
    1162:	98 17       	cp	r25, r24
    1164:	10 f0       	brcs	.+4      	; 0x116a <xQueueGenericSend+0x42>
    1166:	02 30       	cpi	r16, 0x02	; 2
    1168:	b1 f4       	brne	.+44     	; 0x1196 <xQueueGenericSend+0x6e>
    116a:	40 2f       	mov	r20, r16
    116c:	b6 01       	movw	r22, r12
    116e:	c7 01       	movw	r24, r14
    1170:	b6 de       	rcall	.-660    	; 0xede <prvCopyDataToQueue>
    1172:	f7 01       	movw	r30, r14
    1174:	93 89       	ldd	r25, Z+19	; 0x13
    1176:	99 23       	and	r25, r25
    1178:	41 f0       	breq	.+16     	; 0x118a <xQueueGenericSend+0x62>
    117a:	c7 01       	movw	r24, r14
    117c:	43 96       	adiw	r24, 0x13	; 19
    117e:	0e 94 02 11 	call	0x2204	; 0x2204 <xTaskRemoveFromEventList>
    1182:	88 23       	and	r24, r24
    1184:	21 f0       	breq	.+8      	; 0x118e <xQueueGenericSend+0x66>
    1186:	c9 dd       	rcall	.-1134   	; 0xd1a <vPortYield>
    1188:	02 c0       	rjmp	.+4      	; 0x118e <xQueueGenericSend+0x66>
    118a:	81 11       	cpse	r24, r1
    118c:	c6 dd       	rcall	.-1140   	; 0xd1a <vPortYield>
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	48 c0       	rjmp	.+144    	; 0x1226 <xQueueGenericSend+0xfe>
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	a8 85       	ldd	r26, Y+8	; 0x08
    119c:	b9 85       	ldd	r27, Y+9	; 0x09
    119e:	89 2b       	or	r24, r25
    11a0:	8a 2b       	or	r24, r26
    11a2:	8b 2b       	or	r24, r27
    11a4:	21 f4       	brne	.+8      	; 0x11ae <xQueueGenericSend+0x86>
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	3c c0       	rjmp	.+120    	; 0x1226 <xQueueGenericSend+0xfe>
    11ae:	11 11       	cpse	r17, r1
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <xQueueGenericSend+0x94>
    11b2:	ce 01       	movw	r24, r28
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	0e 94 4b 12 	call	0x2496	; 0x2496 <vTaskInternalSetTimeOutState>
    11ba:	11 e0       	ldi	r17, 0x01	; 1
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	e3 d4       	rcall	.+2502   	; 0x1b88 <vTaskSuspendAll>
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	0f 92       	push	r0
    11c8:	f7 01       	movw	r30, r14
    11ca:	81 a1       	ldd	r24, Z+33	; 0x21
    11cc:	8f 3f       	cpi	r24, 0xFF	; 255
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <xQueueGenericSend+0xaa>
    11d0:	11 a2       	std	Z+33, r1	; 0x21
    11d2:	f7 01       	movw	r30, r14
    11d4:	82 a1       	ldd	r24, Z+34	; 0x22
    11d6:	8f 3f       	cpi	r24, 0xFF	; 255
    11d8:	09 f4       	brne	.+2      	; 0x11dc <xQueueGenericSend+0xb4>
    11da:	12 a2       	std	Z+34, r1	; 0x22
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	be 01       	movw	r22, r28
    11e2:	6a 5f       	subi	r22, 0xFA	; 250
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	ce 01       	movw	r24, r28
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <xTaskCheckForTimeOut>
    11ee:	81 11       	cpse	r24, r1
    11f0:	16 c0       	rjmp	.+44     	; 0x121e <xQueueGenericSend+0xf6>
    11f2:	c7 01       	movw	r24, r14
    11f4:	66 de       	rcall	.-820    	; 0xec2 <prvIsQueueFull>
    11f6:	88 23       	and	r24, r24
    11f8:	71 f0       	breq	.+28     	; 0x1216 <xQueueGenericSend+0xee>
    11fa:	4e 81       	ldd	r20, Y+6	; 0x06
    11fc:	5f 81       	ldd	r21, Y+7	; 0x07
    11fe:	68 85       	ldd	r22, Y+8	; 0x08
    1200:	79 85       	ldd	r23, Y+9	; 0x09
    1202:	c7 01       	movw	r24, r14
    1204:	08 96       	adiw	r24, 0x08	; 8
    1206:	5b d7       	rcall	.+3766   	; 0x20be <vTaskPlaceOnEventList>
    1208:	c7 01       	movw	r24, r14
    120a:	e2 de       	rcall	.-572    	; 0xfd0 <prvUnlockQueue>
    120c:	fd d5       	rcall	.+3066   	; 0x1e08 <xTaskResumeAll>
    120e:	81 11       	cpse	r24, r1
    1210:	a2 cf       	rjmp	.-188    	; 0x1156 <xQueueGenericSend+0x2e>
    1212:	83 dd       	rcall	.-1274   	; 0xd1a <vPortYield>
    1214:	a0 cf       	rjmp	.-192    	; 0x1156 <xQueueGenericSend+0x2e>
    1216:	c7 01       	movw	r24, r14
    1218:	db de       	rcall	.-586    	; 0xfd0 <prvUnlockQueue>
    121a:	f6 d5       	rcall	.+3052   	; 0x1e08 <xTaskResumeAll>
    121c:	9c cf       	rjmp	.-200    	; 0x1156 <xQueueGenericSend+0x2e>
    121e:	c7 01       	movw	r24, r14
    1220:	d7 de       	rcall	.-594    	; 0xfd0 <prvUnlockQueue>
    1222:	f2 d5       	rcall	.+3044   	; 0x1e08 <xTaskResumeAll>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	29 96       	adiw	r28, 0x09	; 9
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	08 95       	ret

00001244 <xQueueGenericSendFromISR>:
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	8a 01       	movw	r16, r20
    1252:	fc 01       	movw	r30, r24
    1254:	56 8d       	ldd	r21, Z+30	; 0x1e
    1256:	37 8d       	ldd	r19, Z+31	; 0x1f
    1258:	53 17       	cp	r21, r19
    125a:	10 f0       	brcs	.+4      	; 0x1260 <xQueueGenericSendFromISR+0x1c>
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	f1 f4       	brne	.+60     	; 0x129c <xQueueGenericSendFromISR+0x58>
    1260:	42 2f       	mov	r20, r18
    1262:	78 01       	movw	r14, r16
    1264:	ec 01       	movw	r28, r24
    1266:	1a a1       	ldd	r17, Y+34	; 0x22
    1268:	8e 8d       	ldd	r24, Y+30	; 0x1e
    126a:	ce 01       	movw	r24, r28
    126c:	38 de       	rcall	.-912    	; 0xede <prvCopyDataToQueue>
    126e:	1f 3f       	cpi	r17, 0xFF	; 255
    1270:	79 f4       	brne	.+30     	; 0x1290 <xQueueGenericSendFromISR+0x4c>
    1272:	8b 89       	ldd	r24, Y+19	; 0x13
    1274:	88 23       	and	r24, r24
    1276:	a1 f0       	breq	.+40     	; 0x12a0 <xQueueGenericSendFromISR+0x5c>
    1278:	ce 01       	movw	r24, r28
    127a:	43 96       	adiw	r24, 0x13	; 19
    127c:	c3 d7       	rcall	.+3974   	; 0x2204 <xTaskRemoveFromEventList>
    127e:	88 23       	and	r24, r24
    1280:	89 f0       	breq	.+34     	; 0x12a4 <xQueueGenericSendFromISR+0x60>
    1282:	e1 14       	cp	r14, r1
    1284:	f1 04       	cpc	r15, r1
    1286:	81 f0       	breq	.+32     	; 0x12a8 <xQueueGenericSendFromISR+0x64>
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	f7 01       	movw	r30, r14
    128c:	80 83       	st	Z, r24
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <xQueueGenericSendFromISR+0x66>
    1290:	ff 24       	eor	r15, r15
    1292:	f3 94       	inc	r15
    1294:	f1 0e       	add	r15, r17
    1296:	fa a2       	std	Y+34, r15	; 0x22
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	07 c0       	rjmp	.+14     	; 0x12aa <xQueueGenericSendFromISR+0x66>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <xQueueGenericSendFromISR+0x66>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <xQueueGenericSendFromISR+0x66>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <xQueueGenericSendFromISR+0x66>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	08 95       	ret

000012b8 <xQueueReceive>:
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	29 97       	sbiw	r28, 0x09	; 9
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	8c 01       	movw	r16, r24
    12da:	6b 01       	movw	r12, r22
    12dc:	2e 83       	std	Y+6, r18	; 0x06
    12de:	3f 83       	std	Y+7, r19	; 0x07
    12e0:	48 87       	std	Y+8, r20	; 0x08
    12e2:	59 87       	std	Y+9, r21	; 0x09
    12e4:	e1 2c       	mov	r14, r1
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	0f 92       	push	r0
    12ec:	f8 01       	movw	r30, r16
    12ee:	f6 8c       	ldd	r15, Z+30	; 0x1e
    12f0:	ff 20       	and	r15, r15
    12f2:	91 f0       	breq	.+36     	; 0x1318 <xQueueReceive+0x60>
    12f4:	b6 01       	movw	r22, r12
    12f6:	c8 01       	movw	r24, r16
    12f8:	51 de       	rcall	.-862    	; 0xf9c <prvCopyDataFromQueue>
    12fa:	fa 94       	dec	r15
    12fc:	f8 01       	movw	r30, r16
    12fe:	f6 8e       	std	Z+30, r15	; 0x1e
    1300:	80 85       	ldd	r24, Z+8	; 0x08
    1302:	88 23       	and	r24, r24
    1304:	29 f0       	breq	.+10     	; 0x1310 <xQueueReceive+0x58>
    1306:	c8 01       	movw	r24, r16
    1308:	08 96       	adiw	r24, 0x08	; 8
    130a:	7c d7       	rcall	.+3832   	; 0x2204 <xTaskRemoveFromEventList>
    130c:	81 11       	cpse	r24, r1
    130e:	05 dd       	rcall	.-1526   	; 0xd1a <vPortYield>
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	4e c0       	rjmp	.+156    	; 0x13b4 <xQueueReceive+0xfc>
    1318:	8e 81       	ldd	r24, Y+6	; 0x06
    131a:	9f 81       	ldd	r25, Y+7	; 0x07
    131c:	a8 85       	ldd	r26, Y+8	; 0x08
    131e:	b9 85       	ldd	r27, Y+9	; 0x09
    1320:	89 2b       	or	r24, r25
    1322:	8a 2b       	or	r24, r26
    1324:	8b 2b       	or	r24, r27
    1326:	21 f4       	brne	.+8      	; 0x1330 <xQueueReceive+0x78>
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	42 c0       	rjmp	.+132    	; 0x13b4 <xQueueReceive+0xfc>
    1330:	e1 10       	cpse	r14, r1
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <xQueueReceive+0x88>
    1334:	ce 01       	movw	r24, r28
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	0e 94 4b 12 	call	0x2496	; 0x2496 <vTaskInternalSetTimeOutState>
    133c:	ee 24       	eor	r14, r14
    133e:	e3 94       	inc	r14
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	21 d4       	rcall	.+2114   	; 0x1b88 <vTaskSuspendAll>
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	0f 92       	push	r0
    134c:	f8 01       	movw	r30, r16
    134e:	81 a1       	ldd	r24, Z+33	; 0x21
    1350:	8f 3f       	cpi	r24, 0xFF	; 255
    1352:	09 f4       	brne	.+2      	; 0x1356 <xQueueReceive+0x9e>
    1354:	11 a2       	std	Z+33, r1	; 0x21
    1356:	f8 01       	movw	r30, r16
    1358:	82 a1       	ldd	r24, Z+34	; 0x22
    135a:	8f 3f       	cpi	r24, 0xFF	; 255
    135c:	09 f4       	brne	.+2      	; 0x1360 <xQueueReceive+0xa8>
    135e:	12 a2       	std	Z+34, r1	; 0x22
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	be 01       	movw	r22, r28
    1366:	6a 5f       	subi	r22, 0xFA	; 250
    1368:	7f 4f       	sbci	r23, 0xFF	; 255
    136a:	ce 01       	movw	r24, r28
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <xTaskCheckForTimeOut>
    1372:	81 11       	cpse	r24, r1
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <xQueueReceive+0xea>
    1376:	c8 01       	movw	r24, r16
    1378:	97 dd       	rcall	.-1234   	; 0xea8 <prvIsQueueEmpty>
    137a:	88 23       	and	r24, r24
    137c:	71 f0       	breq	.+28     	; 0x139a <xQueueReceive+0xe2>
    137e:	4e 81       	ldd	r20, Y+6	; 0x06
    1380:	5f 81       	ldd	r21, Y+7	; 0x07
    1382:	68 85       	ldd	r22, Y+8	; 0x08
    1384:	79 85       	ldd	r23, Y+9	; 0x09
    1386:	c8 01       	movw	r24, r16
    1388:	43 96       	adiw	r24, 0x13	; 19
    138a:	99 d6       	rcall	.+3378   	; 0x20be <vTaskPlaceOnEventList>
    138c:	c8 01       	movw	r24, r16
    138e:	20 de       	rcall	.-960    	; 0xfd0 <prvUnlockQueue>
    1390:	3b d5       	rcall	.+2678   	; 0x1e08 <xTaskResumeAll>
    1392:	81 11       	cpse	r24, r1
    1394:	a8 cf       	rjmp	.-176    	; 0x12e6 <xQueueReceive+0x2e>
    1396:	c1 dc       	rcall	.-1662   	; 0xd1a <vPortYield>
    1398:	a6 cf       	rjmp	.-180    	; 0x12e6 <xQueueReceive+0x2e>
    139a:	c8 01       	movw	r24, r16
    139c:	19 de       	rcall	.-974    	; 0xfd0 <prvUnlockQueue>
    139e:	34 d5       	rcall	.+2664   	; 0x1e08 <xTaskResumeAll>
    13a0:	a2 cf       	rjmp	.-188    	; 0x12e6 <xQueueReceive+0x2e>
    13a2:	c8 01       	movw	r24, r16
    13a4:	15 de       	rcall	.-982    	; 0xfd0 <prvUnlockQueue>
    13a6:	30 d5       	rcall	.+2656   	; 0x1e08 <xTaskResumeAll>
    13a8:	c8 01       	movw	r24, r16
    13aa:	7e dd       	rcall	.-1284   	; 0xea8 <prvIsQueueEmpty>
    13ac:	88 23       	and	r24, r24
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <xQueueReceive+0xfa>
    13b0:	9a cf       	rjmp	.-204    	; 0x12e6 <xQueueReceive+0x2e>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	29 96       	adiw	r28, 0x09	; 9
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	08 95       	ret

000013d2 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	0f 92       	push	r0
    13de:	89 a1       	ldd	r24, Y+33	; 0x21
    13e0:	8f 3f       	cpi	r24, 0xFF	; 255
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <vQueueWaitForMessageRestricted+0x14>
    13e4:	19 a2       	std	Y+33, r1	; 0x21
    13e6:	8a a1       	ldd	r24, Y+34	; 0x22
    13e8:	8f 3f       	cpi	r24, 0xFF	; 255
    13ea:	09 f4       	brne	.+2      	; 0x13ee <vQueueWaitForMessageRestricted+0x1c>
    13ec:	1a a2       	std	Y+34, r1	; 0x22
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    13f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f4:	81 11       	cpse	r24, r1
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    13f8:	ce 01       	movw	r24, r28
    13fa:	43 96       	adiw	r24, 0x13	; 19
    13fc:	c1 d6       	rcall	.+3458   	; 0x2180 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    13fe:	ce 01       	movw	r24, r28
    1400:	e7 dd       	rcall	.-1074   	; 0xfd0 <prvUnlockQueue>
    }
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1408:	fc 01       	movw	r30, r24
    140a:	44 81       	ldd	r20, Z+4	; 0x04
    140c:	55 81       	ldd	r21, Z+5	; 0x05
    140e:	22 81       	ldd	r18, Z+2	; 0x02
    1410:	33 81       	ldd	r19, Z+3	; 0x03
    1412:	24 0f       	add	r18, r20
    1414:	35 1f       	adc	r19, r21
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	b9 01       	movw	r22, r18
    141c:	68 1b       	sub	r22, r24
    141e:	79 0b       	sbc	r23, r25
    1420:	cb 01       	movw	r24, r22
    1422:	64 17       	cp	r22, r20
    1424:	75 07       	cpc	r23, r21
    1426:	10 f0       	brcs	.+4      	; 0x142c <prvBytesInBuffer+0x24>
    1428:	84 1b       	sub	r24, r20
    142a:	95 0b       	sbc	r25, r21
    142c:	08 95       	ret

0000142e <prvInitialiseNewStreamBuffer>:
    142e:	0f 93       	push	r16
    1430:	fc 01       	movw	r30, r24
    1432:	8f e0       	ldi	r24, 0x0F	; 15
    1434:	df 01       	movw	r26, r30
    1436:	1d 92       	st	X+, r1
    1438:	8a 95       	dec	r24
    143a:	e9 f7       	brne	.-6      	; 0x1436 <prvInitialiseNewStreamBuffer+0x8>
    143c:	75 87       	std	Z+13, r23	; 0x0d
    143e:	64 87       	std	Z+12, r22	; 0x0c
    1440:	55 83       	std	Z+5, r21	; 0x05
    1442:	44 83       	std	Z+4, r20	; 0x04
    1444:	37 83       	std	Z+7, r19	; 0x07
    1446:	26 83       	std	Z+6, r18	; 0x06
    1448:	06 87       	std	Z+14, r16	; 0x0e
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <prvWriteBytesToBuffer>:
    144e:	af 92       	push	r10
    1450:	bf 92       	push	r11
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	6c 01       	movw	r12, r24
    1464:	5b 01       	movw	r10, r22
    1466:	7a 01       	movw	r14, r20
    1468:	fc 01       	movw	r30, r24
    146a:	c2 81       	ldd	r28, Z+2	; 0x02
    146c:	d3 81       	ldd	r29, Z+3	; 0x03
    146e:	04 81       	ldd	r16, Z+4	; 0x04
    1470:	15 81       	ldd	r17, Z+5	; 0x05
    1472:	0c 1b       	sub	r16, r28
    1474:	1d 0b       	sbc	r17, r29
    1476:	40 17       	cp	r20, r16
    1478:	51 07       	cpc	r21, r17
    147a:	08 f4       	brcc	.+2      	; 0x147e <prvWriteBytesToBuffer+0x30>
    147c:	8a 01       	movw	r16, r20
    147e:	f6 01       	movw	r30, r12
    1480:	84 85       	ldd	r24, Z+12	; 0x0c
    1482:	95 85       	ldd	r25, Z+13	; 0x0d
    1484:	a8 01       	movw	r20, r16
    1486:	b5 01       	movw	r22, r10
    1488:	8c 0f       	add	r24, r28
    148a:	9d 1f       	adc	r25, r29
    148c:	0e 94 27 28 	call	0x504e	; 0x504e <memcpy>
    1490:	0e 15       	cp	r16, r14
    1492:	1f 05       	cpc	r17, r15
    1494:	58 f4       	brcc	.+22     	; 0x14ac <prvWriteBytesToBuffer+0x5e>
    1496:	a7 01       	movw	r20, r14
    1498:	40 1b       	sub	r20, r16
    149a:	51 0b       	sbc	r21, r17
    149c:	b5 01       	movw	r22, r10
    149e:	60 0f       	add	r22, r16
    14a0:	71 1f       	adc	r23, r17
    14a2:	f6 01       	movw	r30, r12
    14a4:	84 85       	ldd	r24, Z+12	; 0x0c
    14a6:	95 85       	ldd	r25, Z+13	; 0x0d
    14a8:	0e 94 27 28 	call	0x504e	; 0x504e <memcpy>
    14ac:	ce 01       	movw	r24, r28
    14ae:	8e 0d       	add	r24, r14
    14b0:	9f 1d       	adc	r25, r15
    14b2:	f6 01       	movw	r30, r12
    14b4:	24 81       	ldd	r18, Z+4	; 0x04
    14b6:	35 81       	ldd	r19, Z+5	; 0x05
    14b8:	82 17       	cp	r24, r18
    14ba:	93 07       	cpc	r25, r19
    14bc:	10 f0       	brcs	.+4      	; 0x14c2 <prvWriteBytesToBuffer+0x74>
    14be:	82 1b       	sub	r24, r18
    14c0:	93 0b       	sbc	r25, r19
    14c2:	f6 01       	movw	r30, r12
    14c4:	93 83       	std	Z+3, r25	; 0x03
    14c6:	82 83       	std	Z+2, r24	; 0x02
    14c8:	c7 01       	movw	r24, r14
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	08 95       	ret

000014e0 <prvWriteMessageToBuffer>:
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	1f 92       	push	r1
    14f2:	1f 92       	push	r1
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	7c 01       	movw	r14, r24
    14fa:	6b 01       	movw	r12, r22
    14fc:	5a 83       	std	Y+2, r21	; 0x02
    14fe:	49 83       	std	Y+1, r20	; 0x01
    1500:	21 15       	cp	r18, r1
    1502:	31 05       	cpc	r19, r1
    1504:	c1 f0       	breq	.+48     	; 0x1536 <prvWriteMessageToBuffer+0x56>
    1506:	fc 01       	movw	r30, r24
    1508:	86 85       	ldd	r24, Z+14	; 0x0e
    150a:	80 fd       	sbrc	r24, 0
    150c:	08 c0       	rjmp	.+16     	; 0x151e <prvWriteMessageToBuffer+0x3e>
    150e:	42 17       	cp	r20, r18
    1510:	53 07       	cpc	r21, r19
    1512:	08 f4       	brcc	.+2      	; 0x1516 <prvWriteMessageToBuffer+0x36>
    1514:	9a 01       	movw	r18, r20
    1516:	3a 83       	std	Y+2, r19	; 0x02
    1518:	29 83       	std	Y+1, r18	; 0x01
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	0f c0       	rjmp	.+30     	; 0x153c <prvWriteMessageToBuffer+0x5c>
    151e:	20 17       	cp	r18, r16
    1520:	31 07       	cpc	r19, r17
    1522:	58 f0       	brcs	.+22     	; 0x153a <prvWriteMessageToBuffer+0x5a>
    1524:	42 e0       	ldi	r20, 0x02	; 2
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	be 01       	movw	r22, r28
    152a:	6f 5f       	subi	r22, 0xFF	; 255
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	c7 01       	movw	r24, r14
    1530:	8e df       	rcall	.-228    	; 0x144e <prvWriteBytesToBuffer>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	03 c0       	rjmp	.+6      	; 0x153c <prvWriteMessageToBuffer+0x5c>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	01 c0       	rjmp	.+2      	; 0x153c <prvWriteMessageToBuffer+0x5c>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	88 23       	and	r24, r24
    153e:	31 f0       	breq	.+12     	; 0x154c <prvWriteMessageToBuffer+0x6c>
    1540:	49 81       	ldd	r20, Y+1	; 0x01
    1542:	5a 81       	ldd	r21, Y+2	; 0x02
    1544:	b6 01       	movw	r22, r12
    1546:	c7 01       	movw	r24, r14
    1548:	82 df       	rcall	.-252    	; 0x144e <prvWriteBytesToBuffer>
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <prvWriteMessageToBuffer+0x70>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	08 95       	ret

00001566 <xStreamBufferGenericCreate>:
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	ec 01       	movw	r28, r24
    1576:	6b 01       	movw	r12, r22
    1578:	41 30       	cpi	r20, 0x01	; 1
    157a:	11 f4       	brne	.+4      	; 0x1580 <xStreamBufferGenericCreate+0x1a>
    157c:	01 e0       	ldi	r16, 0x01	; 1
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <xStreamBufferGenericCreate+0x1c>
    1580:	00 e0       	ldi	r16, 0x00	; 0
    1582:	c1 14       	cp	r12, r1
    1584:	d1 04       	cpc	r13, r1
    1586:	19 f4       	brne	.+6      	; 0x158e <xStreamBufferGenericCreate+0x28>
    1588:	cc 24       	eor	r12, r12
    158a:	c3 94       	inc	r12
    158c:	d1 2c       	mov	r13, r1
    158e:	ce 01       	movw	r24, r28
    1590:	40 96       	adiw	r24, 0x10	; 16
    1592:	c8 17       	cp	r28, r24
    1594:	d9 07       	cpc	r29, r25
    1596:	20 f4       	brcc	.+8      	; 0x15a0 <xStreamBufferGenericCreate+0x3a>
    1598:	21 96       	adiw	r28, 0x01	; 1
    159a:	0b da       	rcall	.-3050   	; 0x9b2 <pvPortMalloc>
    159c:	7c 01       	movw	r14, r24
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <xStreamBufferGenericCreate+0x3e>
    15a0:	e1 2c       	mov	r14, r1
    15a2:	f1 2c       	mov	r15, r1
    15a4:	e1 14       	cp	r14, r1
    15a6:	f1 04       	cpc	r15, r1
    15a8:	39 f0       	breq	.+14     	; 0x15b8 <xStreamBufferGenericCreate+0x52>
    15aa:	96 01       	movw	r18, r12
    15ac:	ae 01       	movw	r20, r28
    15ae:	b7 01       	movw	r22, r14
    15b0:	61 5f       	subi	r22, 0xF1	; 241
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	c7 01       	movw	r24, r14
    15b6:	3b df       	rcall	.-394    	; 0x142e <prvInitialiseNewStreamBuffer>
    15b8:	c7 01       	movw	r24, r14
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	08 95       	ret

000015ca <xStreamBufferSpacesAvailable>:
    15ca:	fc 01       	movw	r30, r24
    15cc:	24 81       	ldd	r18, Z+4	; 0x04
    15ce:	35 81       	ldd	r19, Z+5	; 0x05
    15d0:	80 81       	ld	r24, Z
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	82 0f       	add	r24, r18
    15d6:	93 1f       	adc	r25, r19
    15d8:	42 81       	ldd	r20, Z+2	; 0x02
    15da:	53 81       	ldd	r21, Z+3	; 0x03
    15dc:	84 1b       	sub	r24, r20
    15de:	95 0b       	sbc	r25, r21
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	82 17       	cp	r24, r18
    15e4:	93 07       	cpc	r25, r19
    15e6:	10 f0       	brcs	.+4      	; 0x15ec <xStreamBufferSpacesAvailable+0x22>
    15e8:	82 1b       	sub	r24, r18
    15ea:	93 0b       	sbc	r25, r19
    15ec:	08 95       	ret

000015ee <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    15ee:	af 92       	push	r10
    15f0:	bf 92       	push	r11
    15f2:	cf 92       	push	r12
    15f4:	df 92       	push	r13
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	ec 01       	movw	r28, r24
    1604:	7b 01       	movw	r14, r22
    1606:	5a 01       	movw	r10, r20
    1608:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    160a:	8e 85       	ldd	r24, Y+14	; 0x0e
    160c:	80 ff       	sbrs	r24, 0
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1610:	8a 01       	movw	r16, r20
    1612:	0e 5f       	subi	r16, 0xFE	; 254
    1614:	1f 4f       	sbci	r17, 0xFF	; 255
    1616:	01 c0       	rjmp	.+2      	; 0x161a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1618:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    161a:	ce 01       	movw	r24, r28
    161c:	d6 df       	rcall	.-84     	; 0x15ca <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    161e:	9c 01       	movw	r18, r24
    1620:	a5 01       	movw	r20, r10
    1622:	b7 01       	movw	r22, r14
    1624:	ce 01       	movw	r24, r28
    1626:	5c df       	rcall	.-328    	; 0x14e0 <prvWriteMessageToBuffer>
    1628:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    162a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    162c:	c1 f0       	breq	.+48     	; 0x165e <xStreamBufferSendFromISR+0x70>
    162e:	ce 01       	movw	r24, r28
    1630:	eb de       	rcall	.-554    	; 0x1408 <prvBytesInBuffer>
    1632:	2e 81       	ldd	r18, Y+6	; 0x06
    1634:	3f 81       	ldd	r19, Y+7	; 0x07
    1636:	82 17       	cp	r24, r18
    1638:	93 07       	cpc	r25, r19
    163a:	88 f0       	brcs	.+34     	; 0x165e <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    163c:	88 85       	ldd	r24, Y+8	; 0x08
    163e:	99 85       	ldd	r25, Y+9	; 0x09
    1640:	89 2b       	or	r24, r25
    1642:	69 f0       	breq	.+26     	; 0x165e <xStreamBufferSendFromISR+0x70>
    1644:	88 85       	ldd	r24, Y+8	; 0x08
    1646:	99 85       	ldd	r25, Y+9	; 0x09
    1648:	e1 2c       	mov	r14, r1
    164a:	f1 2c       	mov	r15, r1
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	a9 01       	movw	r20, r18
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	0e 94 59 13 	call	0x26b2	; 0x26b2 <xTaskGenericNotifyFromISR>
    165a:	19 86       	std	Y+9, r1	; 0x09
    165c:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    165e:	c5 01       	movw	r24, r10
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	bf 90       	pop	r11
    1672:	af 90       	pop	r10
    1674:	08 95       	ret

00001676 <prvResetNextTaskUnblockTime>:
    1676:	e0 91 cb 12 	lds	r30, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    167a:	f0 91 cc 12 	lds	r31, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    167e:	80 81       	ld	r24, Z
    1680:	81 11       	cpse	r24, r1
    1682:	0c c0       	rjmp	.+24     	; 0x169c <prvResetNextTaskUnblockTime+0x26>
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	9f ef       	ldi	r25, 0xFF	; 255
    1688:	dc 01       	movw	r26, r24
    168a:	80 93 95 12 	sts	0x1295, r24	; 0x801295 <xNextTaskUnblockTime>
    168e:	90 93 96 12 	sts	0x1296, r25	; 0x801296 <xNextTaskUnblockTime+0x1>
    1692:	a0 93 97 12 	sts	0x1297, r26	; 0x801297 <xNextTaskUnblockTime+0x2>
    1696:	b0 93 98 12 	sts	0x1298, r27	; 0x801298 <xNextTaskUnblockTime+0x3>
    169a:	08 95       	ret
    169c:	e0 91 cb 12 	lds	r30, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    16a0:	f0 91 cc 12 	lds	r31, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    16a4:	07 80       	ldd	r0, Z+7	; 0x07
    16a6:	f0 85       	ldd	r31, Z+8	; 0x08
    16a8:	e0 2d       	mov	r30, r0
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	a2 81       	ldd	r26, Z+2	; 0x02
    16b0:	b3 81       	ldd	r27, Z+3	; 0x03
    16b2:	80 93 95 12 	sts	0x1295, r24	; 0x801295 <xNextTaskUnblockTime>
    16b6:	90 93 96 12 	sts	0x1296, r25	; 0x801296 <xNextTaskUnblockTime+0x1>
    16ba:	a0 93 97 12 	sts	0x1297, r26	; 0x801297 <xNextTaskUnblockTime+0x2>
    16be:	b0 93 98 12 	sts	0x1298, r27	; 0x801298 <xNextTaskUnblockTime+0x3>
    16c2:	08 95       	ret

000016c4 <prvDeleteTCB>:
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
    16ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ce:	1a da       	rcall	.-3020   	; 0xb04 <vPortFree>
    16d0:	ce 01       	movw	r24, r28
    16d2:	18 da       	rcall	.-3024   	; 0xb04 <vPortFree>
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret

000016da <prvInitialiseNewTask>:
    16da:	4f 92       	push	r4
    16dc:	5f 92       	push	r5
    16de:	6f 92       	push	r6
    16e0:	7f 92       	push	r7
    16e2:	8f 92       	push	r8
    16e4:	9f 92       	push	r9
    16e6:	af 92       	push	r10
    16e8:	bf 92       	push	r11
    16ea:	cf 92       	push	r12
    16ec:	df 92       	push	r13
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	2c 01       	movw	r4, r24
    16fa:	5b 01       	movw	r10, r22
    16fc:	4a 01       	movw	r8, r20
    16fe:	39 01       	movw	r6, r18
    1700:	e6 01       	movw	r28, r12
    1702:	65 ea       	ldi	r22, 0xA5	; 165
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170a:	0e 94 30 28 	call	0x5060	; 0x5060 <memset>
    170e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1712:	21 e0       	ldi	r18, 0x01	; 1
    1714:	82 1a       	sub	r8, r18
    1716:	91 08       	sbc	r9, r1
    1718:	88 0e       	add	r8, r24
    171a:	99 1e       	adc	r9, r25
    171c:	a1 14       	cp	r10, r1
    171e:	b1 04       	cpc	r11, r1
    1720:	89 f4       	brne	.+34     	; 0x1744 <prvInitialiseNewTask+0x6a>
    1722:	15 c0       	rjmp	.+42     	; 0x174e <prvInitialiseNewTask+0x74>
    1724:	82 2f       	mov	r24, r18
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	f5 01       	movw	r30, r10
    172a:	e8 0f       	add	r30, r24
    172c:	f9 1f       	adc	r31, r25
    172e:	30 81       	ld	r19, Z
    1730:	de 01       	movw	r26, r28
    1732:	a8 0f       	add	r26, r24
    1734:	b9 1f       	adc	r27, r25
    1736:	5d 96       	adiw	r26, 0x1d	; 29
    1738:	3c 93       	st	X, r19
    173a:	80 81       	ld	r24, Z
    173c:	88 23       	and	r24, r24
    173e:	29 f0       	breq	.+10     	; 0x174a <prvInitialiseNewTask+0x70>
    1740:	2f 5f       	subi	r18, 0xFF	; 255
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <prvInitialiseNewTask+0x6c>
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	20 31       	cpi	r18, 0x10	; 16
    1748:	68 f3       	brcs	.-38     	; 0x1724 <prvInitialiseNewTask+0x4a>
    174a:	1c a6       	std	Y+44, r1	; 0x2c
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <prvInitialiseNewTask+0x76>
    174e:	1d 8e       	std	Y+29, r1	; 0x1d
    1750:	0a 30       	cpi	r16, 0x0A	; 10
    1752:	08 f0       	brcs	.+2      	; 0x1756 <prvInitialiseNewTask+0x7c>
    1754:	09 e0       	ldi	r16, 0x09	; 9
    1756:	0a 8f       	std	Y+26, r16	; 0x1a
    1758:	0d a7       	std	Y+45, r16	; 0x2d
    175a:	1e a6       	std	Y+46, r1	; 0x2e
    175c:	ce 01       	movw	r24, r28
    175e:	02 96       	adiw	r24, 0x02	; 2
    1760:	1f da       	rcall	.-3010   	; 0xba0 <vListInitialiseItem>
    1762:	ce 01       	movw	r24, r28
    1764:	0e 96       	adiw	r24, 0x0e	; 14
    1766:	1c da       	rcall	.-3016   	; 0xba0 <vListInitialiseItem>
    1768:	db 87       	std	Y+11, r29	; 0x0b
    176a:	ca 87       	std	Y+10, r28	; 0x0a
    176c:	8a e0       	ldi	r24, 0x0A	; 10
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e0       	ldi	r26, 0x00	; 0
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	80 1b       	sub	r24, r16
    1776:	91 09       	sbc	r25, r1
    1778:	a1 09       	sbc	r26, r1
    177a:	b1 09       	sbc	r27, r1
    177c:	8e 87       	std	Y+14, r24	; 0x0e
    177e:	9f 87       	std	Y+15, r25	; 0x0f
    1780:	a8 8b       	std	Y+16, r26	; 0x10
    1782:	b9 8b       	std	Y+17, r27	; 0x11
    1784:	df 8b       	std	Y+23, r29	; 0x17
    1786:	ce 8b       	std	Y+22, r28	; 0x16
    1788:	84 e0       	ldi	r24, 0x04	; 4
    178a:	fe 01       	movw	r30, r28
    178c:	bf 96       	adiw	r30, 0x2f	; 47
    178e:	df 01       	movw	r26, r30
    1790:	1d 92       	st	X+, r1
    1792:	8a 95       	dec	r24
    1794:	e9 f7       	brne	.-6      	; 0x1790 <prvInitialiseNewTask+0xb6>
    1796:	1b aa       	std	Y+51, r1	; 0x33
    1798:	a3 01       	movw	r20, r6
    179a:	b2 01       	movw	r22, r4
    179c:	c4 01       	movw	r24, r8
    179e:	74 da       	rcall	.-2840   	; 0xc88 <pxPortInitialiseStack>
    17a0:	99 83       	std	Y+1, r25	; 0x01
    17a2:	88 83       	st	Y, r24
    17a4:	e1 14       	cp	r14, r1
    17a6:	f1 04       	cpc	r15, r1
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <prvInitialiseNewTask+0xd6>
    17aa:	f7 01       	movw	r30, r14
    17ac:	d1 83       	std	Z+1, r29	; 0x01
    17ae:	c0 83       	st	Z, r28
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	0f 91       	pop	r16
    17b6:	ff 90       	pop	r15
    17b8:	ef 90       	pop	r14
    17ba:	df 90       	pop	r13
    17bc:	cf 90       	pop	r12
    17be:	bf 90       	pop	r11
    17c0:	af 90       	pop	r10
    17c2:	9f 90       	pop	r9
    17c4:	8f 90       	pop	r8
    17c6:	7f 90       	pop	r7
    17c8:	6f 90       	pop	r6
    17ca:	5f 90       	pop	r5
    17cc:	4f 90       	pop	r4
    17ce:	08 95       	ret

000017d0 <prvInitialiseTaskLists>:
    17d0:	cf 93       	push	r28
    17d2:	c0 e0       	ldi	r28, 0x00	; 0
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <prvInitialiseTaskLists+0x16>
    17d6:	2b e0       	ldi	r18, 0x0B	; 11
    17d8:	c2 9f       	mul	r28, r18
    17da:	c0 01       	movw	r24, r0
    17dc:	11 24       	eor	r1, r1
    17de:	8d 51       	subi	r24, 0x1D	; 29
    17e0:	9d 4e       	sbci	r25, 0xED	; 237
    17e2:	cd d9       	rcall	.-3174   	; 0xb7e <vListInitialise>
    17e4:	cf 5f       	subi	r28, 0xFF	; 255
    17e6:	ca 30       	cpi	r28, 0x0A	; 10
    17e8:	b0 f3       	brcs	.-20     	; 0x17d6 <prvInitialiseTaskLists+0x6>
    17ea:	88 ed       	ldi	r24, 0xD8	; 216
    17ec:	92 e1       	ldi	r25, 0x12	; 18
    17ee:	c7 d9       	rcall	.-3186   	; 0xb7e <vListInitialise>
    17f0:	8d ec       	ldi	r24, 0xCD	; 205
    17f2:	92 e1       	ldi	r25, 0x12	; 18
    17f4:	c4 d9       	rcall	.-3192   	; 0xb7e <vListInitialise>
    17f6:	8e eb       	ldi	r24, 0xBE	; 190
    17f8:	92 e1       	ldi	r25, 0x12	; 18
    17fa:	c1 d9       	rcall	.-3198   	; 0xb7e <vListInitialise>
    17fc:	83 eb       	ldi	r24, 0xB3	; 179
    17fe:	92 e1       	ldi	r25, 0x12	; 18
    1800:	be d9       	rcall	.-3204   	; 0xb7e <vListInitialise>
    1802:	87 ea       	ldi	r24, 0xA7	; 167
    1804:	92 e1       	ldi	r25, 0x12	; 18
    1806:	bb d9       	rcall	.-3210   	; 0xb7e <vListInitialise>
    1808:	88 ed       	ldi	r24, 0xD8	; 216
    180a:	92 e1       	ldi	r25, 0x12	; 18
    180c:	90 93 cc 12 	sts	0x12CC, r25	; 0x8012cc <pxDelayedTaskList+0x1>
    1810:	80 93 cb 12 	sts	0x12CB, r24	; 0x8012cb <pxDelayedTaskList>
    1814:	8d ec       	ldi	r24, 0xCD	; 205
    1816:	92 e1       	ldi	r25, 0x12	; 18
    1818:	90 93 ca 12 	sts	0x12CA, r25	; 0x8012ca <pxOverflowDelayedTaskList+0x1>
    181c:	80 93 c9 12 	sts	0x12C9, r24	; 0x8012c9 <pxOverflowDelayedTaskList>
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <prvAddNewTaskToReadyList>:
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	ec 01       	movw	r28, r24
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	0f 92       	push	r0
    1830:	80 91 a6 12 	lds	r24, 0x12A6	; 0x8012a6 <uxCurrentNumberOfTasks>
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	80 93 a6 12 	sts	0x12A6, r24	; 0x8012a6 <uxCurrentNumberOfTasks>
    183a:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    183e:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1842:	89 2b       	or	r24, r25
    1844:	51 f4       	brne	.+20     	; 0x185a <prvAddNewTaskToReadyList+0x36>
    1846:	d0 93 52 13 	sts	0x1352, r29	; 0x801352 <pxCurrentTCB+0x1>
    184a:	c0 93 51 13 	sts	0x1351, r28	; 0x801351 <pxCurrentTCB>
    184e:	80 91 a6 12 	lds	r24, 0x12A6	; 0x8012a6 <uxCurrentNumberOfTasks>
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 f4       	brne	.+36     	; 0x187a <prvAddNewTaskToReadyList+0x56>
    1856:	bc df       	rcall	.-136    	; 0x17d0 <prvInitialiseTaskLists>
    1858:	10 c0       	rjmp	.+32     	; 0x187a <prvAddNewTaskToReadyList+0x56>
    185a:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <xSchedulerRunning>
    185e:	81 11       	cpse	r24, r1
    1860:	0c c0       	rjmp	.+24     	; 0x187a <prvAddNewTaskToReadyList+0x56>
    1862:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    1866:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    186a:	92 8d       	ldd	r25, Z+26	; 0x1a
    186c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    186e:	89 17       	cp	r24, r25
    1870:	20 f0       	brcs	.+8      	; 0x187a <prvAddNewTaskToReadyList+0x56>
    1872:	d0 93 52 13 	sts	0x1352, r29	; 0x801352 <pxCurrentTCB+0x1>
    1876:	c0 93 51 13 	sts	0x1351, r28	; 0x801351 <pxCurrentTCB>
    187a:	80 91 99 12 	lds	r24, 0x1299	; 0x801299 <uxTaskNumber>
    187e:	8f 5f       	subi	r24, 0xFF	; 255
    1880:	80 93 99 12 	sts	0x1299, r24	; 0x801299 <uxTaskNumber>
    1884:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1886:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    188a:	8e 17       	cp	r24, r30
    188c:	10 f4       	brcc	.+4      	; 0x1892 <prvAddNewTaskToReadyList+0x6e>
    188e:	e0 93 a1 12 	sts	0x12A1, r30	; 0x8012a1 <uxTopReadyPriority>
    1892:	8b e0       	ldi	r24, 0x0B	; 11
    1894:	8e 9f       	mul	r24, r30
    1896:	f0 01       	movw	r30, r0
    1898:	11 24       	eor	r1, r1
    189a:	ed 51       	subi	r30, 0x1D	; 29
    189c:	fd 4e       	sbci	r31, 0xED	; 237
    189e:	01 80       	ldd	r0, Z+1	; 0x01
    18a0:	f2 81       	ldd	r31, Z+2	; 0x02
    18a2:	e0 2d       	mov	r30, r0
    18a4:	ff 83       	std	Y+7, r31	; 0x07
    18a6:	ee 83       	std	Y+6, r30	; 0x06
    18a8:	26 81       	ldd	r18, Z+6	; 0x06
    18aa:	37 81       	ldd	r19, Z+7	; 0x07
    18ac:	39 87       	std	Y+9, r19	; 0x09
    18ae:	28 87       	std	Y+8, r18	; 0x08
    18b0:	a6 81       	ldd	r26, Z+6	; 0x06
    18b2:	b7 81       	ldd	r27, Z+7	; 0x07
    18b4:	9e 01       	movw	r18, r28
    18b6:	2e 5f       	subi	r18, 0xFE	; 254
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	15 96       	adiw	r26, 0x05	; 5
    18bc:	3c 93       	st	X, r19
    18be:	2e 93       	st	-X, r18
    18c0:	14 97       	sbiw	r26, 0x04	; 4
    18c2:	37 83       	std	Z+7, r19	; 0x07
    18c4:	26 83       	std	Z+6, r18	; 0x06
    18c6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    18c8:	8e 9f       	mul	r24, r30
    18ca:	f0 01       	movw	r30, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	ed 51       	subi	r30, 0x1D	; 29
    18d0:	fd 4e       	sbci	r31, 0xED	; 237
    18d2:	fd 87       	std	Y+13, r31	; 0x0d
    18d4:	ec 87       	std	Y+12, r30	; 0x0c
    18d6:	80 81       	ld	r24, Z
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	80 83       	st	Z, r24
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <xSchedulerRunning>
    18e4:	88 23       	and	r24, r24
    18e6:	49 f0       	breq	.+18     	; 0x18fa <prvAddNewTaskToReadyList+0xd6>
    18e8:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    18ec:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    18f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    18f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18f4:	98 17       	cp	r25, r24
    18f6:	08 f4       	brcc	.+2      	; 0x18fa <prvAddNewTaskToReadyList+0xd6>
    18f8:	10 da       	rcall	.-3040   	; 0xd1a <vPortYield>
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <prvCheckTasksWaitingTermination>:
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	1a c0       	rjmp	.+52     	; 0x193a <prvCheckTasksWaitingTermination+0x3a>
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	0f 92       	push	r0
    190c:	e0 91 ba 12 	lds	r30, 0x12BA	; 0x8012ba <xTasksWaitingTermination+0x7>
    1910:	f0 91 bb 12 	lds	r31, 0x12BB	; 0x8012bb <xTasksWaitingTermination+0x8>
    1914:	c0 85       	ldd	r28, Z+8	; 0x08
    1916:	d1 85       	ldd	r29, Z+9	; 0x09
    1918:	ce 01       	movw	r24, r28
    191a:	02 96       	adiw	r24, 0x02	; 2
    191c:	82 d9       	rcall	.-3324   	; 0xc22 <uxListRemove>
    191e:	80 91 a6 12 	lds	r24, 0x12A6	; 0x8012a6 <uxCurrentNumberOfTasks>
    1922:	81 50       	subi	r24, 0x01	; 1
    1924:	80 93 a6 12 	sts	0x12A6, r24	; 0x8012a6 <uxCurrentNumberOfTasks>
    1928:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxDeletedTasksWaitingCleanUp>
    192c:	81 50       	subi	r24, 0x01	; 1
    192e:	80 93 b2 12 	sts	0x12B2, r24	; 0x8012b2 <uxDeletedTasksWaitingCleanUp>
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	ce 01       	movw	r24, r28
    1938:	c5 de       	rcall	.-630    	; 0x16c4 <prvDeleteTCB>
    193a:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxDeletedTasksWaitingCleanUp>
    193e:	81 11       	cpse	r24, r1
    1940:	e2 cf       	rjmp	.-60     	; 0x1906 <prvCheckTasksWaitingTermination+0x6>
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <prvAddCurrentTaskToDelayedList>:
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	6b 01       	movw	r12, r22
    195e:	7c 01       	movw	r14, r24
    1960:	c4 2f       	mov	r28, r20
    1962:	80 90 a2 12 	lds	r8, 0x12A2	; 0x8012a2 <xTickCount>
    1966:	90 90 a3 12 	lds	r9, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    196a:	a0 90 a4 12 	lds	r10, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    196e:	b0 90 a5 12 	lds	r11, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    1972:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    1976:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    197a:	02 96       	adiw	r24, 0x02	; 2
    197c:	52 d9       	rcall	.-3420   	; 0xc22 <uxListRemove>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	c8 16       	cp	r12, r24
    1982:	d8 06       	cpc	r13, r24
    1984:	e8 06       	cpc	r14, r24
    1986:	f8 06       	cpc	r15, r24
    1988:	b1 f5       	brne	.+108    	; 0x19f6 <prvAddCurrentTaskToDelayedList+0xae>
    198a:	cc 23       	and	r28, r28
    198c:	a1 f1       	breq	.+104    	; 0x19f6 <prvAddCurrentTaskToDelayedList+0xae>
    198e:	e7 ea       	ldi	r30, 0xA7	; 167
    1990:	f2 e1       	ldi	r31, 0x12	; 18
    1992:	a1 81       	ldd	r26, Z+1	; 0x01
    1994:	b2 81       	ldd	r27, Z+2	; 0x02
    1996:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    199a:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    199e:	bf 83       	std	Y+7, r27	; 0x07
    19a0:	ae 83       	std	Y+6, r26	; 0x06
    19a2:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    19a6:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    19aa:	16 96       	adiw	r26, 0x06	; 6
    19ac:	8d 91       	ld	r24, X+
    19ae:	9c 91       	ld	r25, X
    19b0:	17 97       	sbiw	r26, 0x07	; 7
    19b2:	99 87       	std	Y+9, r25	; 0x09
    19b4:	88 87       	std	Y+8, r24	; 0x08
    19b6:	16 96       	adiw	r26, 0x06	; 6
    19b8:	cd 91       	ld	r28, X+
    19ba:	dc 91       	ld	r29, X
    19bc:	17 97       	sbiw	r26, 0x07	; 7
    19be:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    19c2:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    19c6:	02 96       	adiw	r24, 0x02	; 2
    19c8:	9d 83       	std	Y+5, r25	; 0x05
    19ca:	8c 83       	std	Y+4, r24	; 0x04
    19cc:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    19d0:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    19d4:	02 96       	adiw	r24, 0x02	; 2
    19d6:	17 96       	adiw	r26, 0x07	; 7
    19d8:	9c 93       	st	X, r25
    19da:	8e 93       	st	-X, r24
    19dc:	16 97       	sbiw	r26, 0x06	; 6
    19de:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    19e2:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    19e6:	1d 96       	adiw	r26, 0x0d	; 13
    19e8:	fc 93       	st	X, r31
    19ea:	ee 93       	st	-X, r30
    19ec:	1c 97       	sbiw	r26, 0x0c	; 12
    19ee:	80 81       	ld	r24, Z
    19f0:	8f 5f       	subi	r24, 0xFF	; 255
    19f2:	80 83       	st	Z, r24
    19f4:	3d c0       	rjmp	.+122    	; 0x1a70 <prvAddCurrentTaskToDelayedList+0x128>
    19f6:	c8 0c       	add	r12, r8
    19f8:	d9 1c       	adc	r13, r9
    19fa:	ea 1c       	adc	r14, r10
    19fc:	fb 1c       	adc	r15, r11
    19fe:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    1a02:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1a06:	c2 82       	std	Z+2, r12	; 0x02
    1a08:	d3 82       	std	Z+3, r13	; 0x03
    1a0a:	e4 82       	std	Z+4, r14	; 0x04
    1a0c:	f5 82       	std	Z+5, r15	; 0x05
    1a0e:	c8 14       	cp	r12, r8
    1a10:	d9 04       	cpc	r13, r9
    1a12:	ea 04       	cpc	r14, r10
    1a14:	fb 04       	cpc	r15, r11
    1a16:	60 f4       	brcc	.+24     	; 0x1a30 <prvAddCurrentTaskToDelayedList+0xe8>
    1a18:	60 91 51 13 	lds	r22, 0x1351	; 0x801351 <pxCurrentTCB>
    1a1c:	70 91 52 13 	lds	r23, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1a20:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxOverflowDelayedTaskList>
    1a24:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxOverflowDelayedTaskList+0x1>
    1a28:	6e 5f       	subi	r22, 0xFE	; 254
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	bd d8       	rcall	.-3718   	; 0xba8 <vListInsert>
    1a2e:	20 c0       	rjmp	.+64     	; 0x1a70 <prvAddCurrentTaskToDelayedList+0x128>
    1a30:	60 91 51 13 	lds	r22, 0x1351	; 0x801351 <pxCurrentTCB>
    1a34:	70 91 52 13 	lds	r23, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1a38:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1a3c:	90 91 cc 12 	lds	r25, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    1a40:	6e 5f       	subi	r22, 0xFE	; 254
    1a42:	7f 4f       	sbci	r23, 0xFF	; 255
    1a44:	b1 d8       	rcall	.-3742   	; 0xba8 <vListInsert>
    1a46:	80 91 95 12 	lds	r24, 0x1295	; 0x801295 <xNextTaskUnblockTime>
    1a4a:	90 91 96 12 	lds	r25, 0x1296	; 0x801296 <xNextTaskUnblockTime+0x1>
    1a4e:	a0 91 97 12 	lds	r26, 0x1297	; 0x801297 <xNextTaskUnblockTime+0x2>
    1a52:	b0 91 98 12 	lds	r27, 0x1298	; 0x801298 <xNextTaskUnblockTime+0x3>
    1a56:	c8 16       	cp	r12, r24
    1a58:	d9 06       	cpc	r13, r25
    1a5a:	ea 06       	cpc	r14, r26
    1a5c:	fb 06       	cpc	r15, r27
    1a5e:	40 f4       	brcc	.+16     	; 0x1a70 <prvAddCurrentTaskToDelayedList+0x128>
    1a60:	c0 92 95 12 	sts	0x1295, r12	; 0x801295 <xNextTaskUnblockTime>
    1a64:	d0 92 96 12 	sts	0x1296, r13	; 0x801296 <xNextTaskUnblockTime+0x1>
    1a68:	e0 92 97 12 	sts	0x1297, r14	; 0x801297 <xNextTaskUnblockTime+0x2>
    1a6c:	f0 92 98 12 	sts	0x1298, r15	; 0x801298 <xNextTaskUnblockTime+0x3>
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	ff 90       	pop	r15
    1a76:	ef 90       	pop	r14
    1a78:	df 90       	pop	r13
    1a7a:	cf 90       	pop	r12
    1a7c:	bf 90       	pop	r11
    1a7e:	af 90       	pop	r10
    1a80:	9f 90       	pop	r9
    1a82:	8f 90       	pop	r8
    1a84:	08 95       	ret

00001a86 <xTaskCreate>:
    1a86:	2f 92       	push	r2
    1a88:	3f 92       	push	r3
    1a8a:	4f 92       	push	r4
    1a8c:	5f 92       	push	r5
    1a8e:	6f 92       	push	r6
    1a90:	7f 92       	push	r7
    1a92:	8f 92       	push	r8
    1a94:	9f 92       	push	r9
    1a96:	af 92       	push	r10
    1a98:	bf 92       	push	r11
    1a9a:	cf 92       	push	r12
    1a9c:	df 92       	push	r13
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	3c 01       	movw	r6, r24
    1aaa:	1b 01       	movw	r2, r22
    1aac:	4a 01       	movw	r8, r20
    1aae:	29 01       	movw	r4, r18
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <pvPortMalloc>
    1ab6:	6c 01       	movw	r12, r24
    1ab8:	89 2b       	or	r24, r25
    1aba:	69 f0       	breq	.+26     	; 0x1ad6 <xTaskCreate+0x50>
    1abc:	84 e3       	ldi	r24, 0x34	; 52
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <pvPortMalloc>
    1ac4:	ec 01       	movw	r28, r24
    1ac6:	89 2b       	or	r24, r25
    1ac8:	19 f0       	breq	.+6      	; 0x1ad0 <xTaskCreate+0x4a>
    1aca:	dc 8e       	std	Y+28, r13	; 0x1c
    1acc:	cb 8e       	std	Y+27, r12	; 0x1b
    1ace:	05 c0       	rjmp	.+10     	; 0x1ada <xTaskCreate+0x54>
    1ad0:	c6 01       	movw	r24, r12
    1ad2:	18 d8       	rcall	.-4048   	; 0xb04 <vPortFree>
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <xTaskCreate+0x54>
    1ad6:	c0 e0       	ldi	r28, 0x00	; 0
    1ad8:	d0 e0       	ldi	r29, 0x00	; 0
    1ada:	20 97       	sbiw	r28, 0x00	; 0
    1adc:	61 f0       	breq	.+24     	; 0x1af6 <xTaskCreate+0x70>
    1ade:	a1 2c       	mov	r10, r1
    1ae0:	b1 2c       	mov	r11, r1
    1ae2:	6e 01       	movw	r12, r28
    1ae4:	92 01       	movw	r18, r4
    1ae6:	a4 01       	movw	r20, r8
    1ae8:	b1 01       	movw	r22, r2
    1aea:	c3 01       	movw	r24, r6
    1aec:	f6 dd       	rcall	.-1044   	; 0x16da <prvInitialiseNewTask>
    1aee:	ce 01       	movw	r24, r28
    1af0:	99 de       	rcall	.-718    	; 0x1824 <prvAddNewTaskToReadyList>
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <xTaskCreate+0x72>
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	8f 90       	pop	r8
    1b0e:	7f 90       	pop	r7
    1b10:	6f 90       	pop	r6
    1b12:	5f 90       	pop	r5
    1b14:	4f 90       	pop	r4
    1b16:	3f 90       	pop	r3
    1b18:	2f 90       	pop	r2
    1b1a:	08 95       	ret

00001b1c <vTaskStartScheduler>:
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	0f 2e       	mov	r0, r31
    1b24:	f3 e9       	ldi	r31, 0x93	; 147
    1b26:	ef 2e       	mov	r14, r31
    1b28:	f2 e1       	ldi	r31, 0x12	; 18
    1b2a:	ff 2e       	mov	r15, r31
    1b2c:	f0 2d       	mov	r31, r0
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 ec       	ldi	r20, 0xC0	; 192
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	63 ea       	ldi	r22, 0xA3	; 163
    1b3a:	74 e0       	ldi	r23, 0x04	; 4
    1b3c:	8e e4       	ldi	r24, 0x4E	; 78
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	a2 df       	rcall	.-188    	; 0x1a86 <xTaskCreate>
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <vTaskStartScheduler+0x2c>
    1b46:	61 d7       	rcall	.+3778   	; 0x2a0a <xTimerCreateTimerTask>
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	c1 f4       	brne	.+48     	; 0x1b7c <vTaskStartScheduler+0x60>
    1b4c:	f8 94       	cli
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	9f ef       	ldi	r25, 0xFF	; 255
    1b52:	dc 01       	movw	r26, r24
    1b54:	80 93 95 12 	sts	0x1295, r24	; 0x801295 <xNextTaskUnblockTime>
    1b58:	90 93 96 12 	sts	0x1296, r25	; 0x801296 <xNextTaskUnblockTime+0x1>
    1b5c:	a0 93 97 12 	sts	0x1297, r26	; 0x801297 <xNextTaskUnblockTime+0x2>
    1b60:	b0 93 98 12 	sts	0x1298, r27	; 0x801298 <xNextTaskUnblockTime+0x3>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	80 93 a0 12 	sts	0x12A0, r24	; 0x8012a0 <xSchedulerRunning>
    1b6a:	10 92 a2 12 	sts	0x12A2, r1	; 0x8012a2 <xTickCount>
    1b6e:	10 92 a3 12 	sts	0x12A3, r1	; 0x8012a3 <xTickCount+0x1>
    1b72:	10 92 a4 12 	sts	0x12A4, r1	; 0x8012a4 <xTickCount+0x2>
    1b76:	10 92 a5 12 	sts	0x12A5, r1	; 0x8012a5 <xTickCount+0x3>
    1b7a:	9d d8       	rcall	.-3782   	; 0xcb6 <xPortStartScheduler>
    1b7c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	08 95       	ret

00001b88 <vTaskSuspendAll>:
    1b88:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	80 93 92 12 	sts	0x1292, r24	; 0x801292 <uxSchedulerSuspended>
    1b92:	08 95       	ret

00001b94 <xTaskGetTickCount>:
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	0f 92       	push	r0
    1b9a:	60 91 a2 12 	lds	r22, 0x12A2	; 0x8012a2 <xTickCount>
    1b9e:	70 91 a3 12 	lds	r23, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    1ba2:	80 91 a4 12 	lds	r24, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    1ba6:	90 91 a5 12 	lds	r25, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	08 95       	ret

00001bb0 <xTaskIncrementTick>:
    1bb0:	cf 92       	push	r12
    1bb2:	df 92       	push	r13
    1bb4:	ef 92       	push	r14
    1bb6:	ff 92       	push	r15
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	05 c1       	rjmp	.+522    	; 0x1dce <xTaskIncrementTick+0x21e>
    1bc4:	c0 90 a2 12 	lds	r12, 0x12A2	; 0x8012a2 <xTickCount>
    1bc8:	d0 90 a3 12 	lds	r13, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    1bcc:	e0 90 a4 12 	lds	r14, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    1bd0:	f0 90 a5 12 	lds	r15, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    1bd4:	8f ef       	ldi	r24, 0xFF	; 255
    1bd6:	c8 1a       	sub	r12, r24
    1bd8:	d8 0a       	sbc	r13, r24
    1bda:	e8 0a       	sbc	r14, r24
    1bdc:	f8 0a       	sbc	r15, r24
    1bde:	c0 92 a2 12 	sts	0x12A2, r12	; 0x8012a2 <xTickCount>
    1be2:	d0 92 a3 12 	sts	0x12A3, r13	; 0x8012a3 <xTickCount+0x1>
    1be6:	e0 92 a4 12 	sts	0x12A4, r14	; 0x8012a4 <xTickCount+0x2>
    1bea:	f0 92 a5 12 	sts	0x12A5, r15	; 0x8012a5 <xTickCount+0x3>
    1bee:	c1 14       	cp	r12, r1
    1bf0:	d1 04       	cpc	r13, r1
    1bf2:	e1 04       	cpc	r14, r1
    1bf4:	f1 04       	cpc	r15, r1
    1bf6:	b1 f4       	brne	.+44     	; 0x1c24 <xTaskIncrementTick+0x74>
    1bf8:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1bfc:	90 91 cc 12 	lds	r25, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    1c00:	20 91 c9 12 	lds	r18, 0x12C9	; 0x8012c9 <pxOverflowDelayedTaskList>
    1c04:	30 91 ca 12 	lds	r19, 0x12CA	; 0x8012ca <pxOverflowDelayedTaskList+0x1>
    1c08:	30 93 cc 12 	sts	0x12CC, r19	; 0x8012cc <pxDelayedTaskList+0x1>
    1c0c:	20 93 cb 12 	sts	0x12CB, r18	; 0x8012cb <pxDelayedTaskList>
    1c10:	90 93 ca 12 	sts	0x12CA, r25	; 0x8012ca <pxOverflowDelayedTaskList+0x1>
    1c14:	80 93 c9 12 	sts	0x12C9, r24	; 0x8012c9 <pxOverflowDelayedTaskList>
    1c18:	80 91 9a 12 	lds	r24, 0x129A	; 0x80129a <xNumOfOverflows>
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	80 93 9a 12 	sts	0x129A, r24	; 0x80129a <xNumOfOverflows>
    1c22:	29 dd       	rcall	.-1454   	; 0x1676 <prvResetNextTaskUnblockTime>
    1c24:	80 91 95 12 	lds	r24, 0x1295	; 0x801295 <xNextTaskUnblockTime>
    1c28:	90 91 96 12 	lds	r25, 0x1296	; 0x801296 <xNextTaskUnblockTime+0x1>
    1c2c:	a0 91 97 12 	lds	r26, 0x1297	; 0x801297 <xNextTaskUnblockTime+0x2>
    1c30:	b0 91 98 12 	lds	r27, 0x1298	; 0x801298 <xNextTaskUnblockTime+0x3>
    1c34:	c8 16       	cp	r12, r24
    1c36:	d9 06       	cpc	r13, r25
    1c38:	ea 06       	cpc	r14, r26
    1c3a:	fb 06       	cpc	r15, r27
    1c3c:	20 f4       	brcc	.+8      	; 0x1c46 <xTaskIncrementTick+0x96>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	b2 c0       	rjmp	.+356    	; 0x1da6 <xTaskIncrementTick+0x1f6>
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <xTaskIncrementTick+0x98>
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	e0 91 cb 12 	lds	r30, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1c4c:	f0 91 cc 12 	lds	r31, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    1c50:	90 81       	ld	r25, Z
    1c52:	91 11       	cpse	r25, r1
    1c54:	0c c0       	rjmp	.+24     	; 0x1c6e <xTaskIncrementTick+0xbe>
    1c56:	4f ef       	ldi	r20, 0xFF	; 255
    1c58:	5f ef       	ldi	r21, 0xFF	; 255
    1c5a:	ba 01       	movw	r22, r20
    1c5c:	40 93 95 12 	sts	0x1295, r20	; 0x801295 <xNextTaskUnblockTime>
    1c60:	50 93 96 12 	sts	0x1296, r21	; 0x801296 <xNextTaskUnblockTime+0x1>
    1c64:	60 93 97 12 	sts	0x1297, r22	; 0x801297 <xNextTaskUnblockTime+0x2>
    1c68:	70 93 98 12 	sts	0x1298, r23	; 0x801298 <xNextTaskUnblockTime+0x3>
    1c6c:	9c c0       	rjmp	.+312    	; 0x1da6 <xTaskIncrementTick+0x1f6>
    1c6e:	e0 91 cb 12 	lds	r30, 0x12CB	; 0x8012cb <pxDelayedTaskList>
    1c72:	f0 91 cc 12 	lds	r31, 0x12CC	; 0x8012cc <pxDelayedTaskList+0x1>
    1c76:	07 80       	ldd	r0, Z+7	; 0x07
    1c78:	f0 85       	ldd	r31, Z+8	; 0x08
    1c7a:	e0 2d       	mov	r30, r0
    1c7c:	00 84       	ldd	r0, Z+8	; 0x08
    1c7e:	f1 85       	ldd	r31, Z+9	; 0x09
    1c80:	e0 2d       	mov	r30, r0
    1c82:	42 81       	ldd	r20, Z+2	; 0x02
    1c84:	53 81       	ldd	r21, Z+3	; 0x03
    1c86:	64 81       	ldd	r22, Z+4	; 0x04
    1c88:	75 81       	ldd	r23, Z+5	; 0x05
    1c8a:	c4 16       	cp	r12, r20
    1c8c:	d5 06       	cpc	r13, r21
    1c8e:	e6 06       	cpc	r14, r22
    1c90:	f7 06       	cpc	r15, r23
    1c92:	48 f4       	brcc	.+18     	; 0x1ca6 <xTaskIncrementTick+0xf6>
    1c94:	40 93 95 12 	sts	0x1295, r20	; 0x801295 <xNextTaskUnblockTime>
    1c98:	50 93 96 12 	sts	0x1296, r21	; 0x801296 <xNextTaskUnblockTime+0x1>
    1c9c:	60 93 97 12 	sts	0x1297, r22	; 0x801297 <xNextTaskUnblockTime+0x2>
    1ca0:	70 93 98 12 	sts	0x1298, r23	; 0x801298 <xNextTaskUnblockTime+0x3>
    1ca4:	80 c0       	rjmp	.+256    	; 0x1da6 <xTaskIncrementTick+0x1f6>
    1ca6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ca8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1caa:	c6 81       	ldd	r28, Z+6	; 0x06
    1cac:	d7 81       	ldd	r29, Z+7	; 0x07
    1cae:	20 85       	ldd	r18, Z+8	; 0x08
    1cb0:	31 85       	ldd	r19, Z+9	; 0x09
    1cb2:	3f 83       	std	Y+7, r19	; 0x07
    1cb4:	2e 83       	std	Y+6, r18	; 0x06
    1cb6:	c0 85       	ldd	r28, Z+8	; 0x08
    1cb8:	d1 85       	ldd	r29, Z+9	; 0x09
    1cba:	26 81       	ldd	r18, Z+6	; 0x06
    1cbc:	37 81       	ldd	r19, Z+7	; 0x07
    1cbe:	3d 83       	std	Y+5, r19	; 0x05
    1cc0:	2c 83       	std	Y+4, r18	; 0x04
    1cc2:	11 96       	adiw	r26, 0x01	; 1
    1cc4:	4d 91       	ld	r20, X+
    1cc6:	5c 91       	ld	r21, X
    1cc8:	12 97       	sbiw	r26, 0x02	; 2
    1cca:	9f 01       	movw	r18, r30
    1ccc:	2e 5f       	subi	r18, 0xFE	; 254
    1cce:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd0:	42 17       	cp	r20, r18
    1cd2:	53 07       	cpc	r21, r19
    1cd4:	31 f4       	brne	.+12     	; 0x1ce2 <xTaskIncrementTick+0x132>
    1cd6:	40 85       	ldd	r20, Z+8	; 0x08
    1cd8:	51 85       	ldd	r21, Z+9	; 0x09
    1cda:	12 96       	adiw	r26, 0x02	; 2
    1cdc:	5c 93       	st	X, r21
    1cde:	4e 93       	st	-X, r20
    1ce0:	11 97       	sbiw	r26, 0x01	; 1
    1ce2:	15 86       	std	Z+13, r1	; 0x0d
    1ce4:	14 86       	std	Z+12, r1	; 0x0c
    1ce6:	9c 91       	ld	r25, X
    1ce8:	91 50       	subi	r25, 0x01	; 1
    1cea:	9c 93       	st	X, r25
    1cec:	a0 8d       	ldd	r26, Z+24	; 0x18
    1cee:	b1 8d       	ldd	r27, Z+25	; 0x19
    1cf0:	10 97       	sbiw	r26, 0x00	; 0
    1cf2:	09 f1       	breq	.+66     	; 0x1d36 <xTaskIncrementTick+0x186>
    1cf4:	c2 89       	ldd	r28, Z+18	; 0x12
    1cf6:	d3 89       	ldd	r29, Z+19	; 0x13
    1cf8:	44 89       	ldd	r20, Z+20	; 0x14
    1cfa:	55 89       	ldd	r21, Z+21	; 0x15
    1cfc:	5f 83       	std	Y+7, r21	; 0x07
    1cfe:	4e 83       	std	Y+6, r20	; 0x06
    1d00:	c4 89       	ldd	r28, Z+20	; 0x14
    1d02:	d5 89       	ldd	r29, Z+21	; 0x15
    1d04:	42 89       	ldd	r20, Z+18	; 0x12
    1d06:	53 89       	ldd	r21, Z+19	; 0x13
    1d08:	5d 83       	std	Y+5, r21	; 0x05
    1d0a:	4c 83       	std	Y+4, r20	; 0x04
    1d0c:	11 96       	adiw	r26, 0x01	; 1
    1d0e:	6d 91       	ld	r22, X+
    1d10:	7c 91       	ld	r23, X
    1d12:	12 97       	sbiw	r26, 0x02	; 2
    1d14:	af 01       	movw	r20, r30
    1d16:	42 5f       	subi	r20, 0xF2	; 242
    1d18:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1a:	64 17       	cp	r22, r20
    1d1c:	75 07       	cpc	r23, r21
    1d1e:	31 f4       	brne	.+12     	; 0x1d2c <xTaskIncrementTick+0x17c>
    1d20:	44 89       	ldd	r20, Z+20	; 0x14
    1d22:	55 89       	ldd	r21, Z+21	; 0x15
    1d24:	12 96       	adiw	r26, 0x02	; 2
    1d26:	5c 93       	st	X, r21
    1d28:	4e 93       	st	-X, r20
    1d2a:	11 97       	sbiw	r26, 0x01	; 1
    1d2c:	11 8e       	std	Z+25, r1	; 0x19
    1d2e:	10 8e       	std	Z+24, r1	; 0x18
    1d30:	9c 91       	ld	r25, X
    1d32:	91 50       	subi	r25, 0x01	; 1
    1d34:	9c 93       	st	X, r25
    1d36:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d38:	90 91 a1 12 	lds	r25, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    1d3c:	9a 17       	cp	r25, r26
    1d3e:	10 f4       	brcc	.+4      	; 0x1d44 <xTaskIncrementTick+0x194>
    1d40:	a0 93 a1 12 	sts	0x12A1, r26	; 0x8012a1 <uxTopReadyPriority>
    1d44:	9b e0       	ldi	r25, 0x0B	; 11
    1d46:	9a 9f       	mul	r25, r26
    1d48:	d0 01       	movw	r26, r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	ad 51       	subi	r26, 0x1D	; 29
    1d4e:	bd 4e       	sbci	r27, 0xED	; 237
    1d50:	11 96       	adiw	r26, 0x01	; 1
    1d52:	0d 90       	ld	r0, X+
    1d54:	bc 91       	ld	r27, X
    1d56:	a0 2d       	mov	r26, r0
    1d58:	b7 83       	std	Z+7, r27	; 0x07
    1d5a:	a6 83       	std	Z+6, r26	; 0x06
    1d5c:	16 96       	adiw	r26, 0x06	; 6
    1d5e:	4d 91       	ld	r20, X+
    1d60:	5c 91       	ld	r21, X
    1d62:	17 97       	sbiw	r26, 0x07	; 7
    1d64:	51 87       	std	Z+9, r21	; 0x09
    1d66:	40 87       	std	Z+8, r20	; 0x08
    1d68:	16 96       	adiw	r26, 0x06	; 6
    1d6a:	cd 91       	ld	r28, X+
    1d6c:	dc 91       	ld	r29, X
    1d6e:	17 97       	sbiw	r26, 0x07	; 7
    1d70:	3d 83       	std	Y+5, r19	; 0x05
    1d72:	2c 83       	std	Y+4, r18	; 0x04
    1d74:	17 96       	adiw	r26, 0x07	; 7
    1d76:	3c 93       	st	X, r19
    1d78:	2e 93       	st	-X, r18
    1d7a:	16 97       	sbiw	r26, 0x06	; 6
    1d7c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d7e:	9a 9f       	mul	r25, r26
    1d80:	d0 01       	movw	r26, r0
    1d82:	11 24       	eor	r1, r1
    1d84:	ad 51       	subi	r26, 0x1D	; 29
    1d86:	bd 4e       	sbci	r27, 0xED	; 237
    1d88:	b5 87       	std	Z+13, r27	; 0x0d
    1d8a:	a4 87       	std	Z+12, r26	; 0x0c
    1d8c:	9c 91       	ld	r25, X
    1d8e:	9f 5f       	subi	r25, 0xFF	; 255
    1d90:	9c 93       	st	X, r25
    1d92:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d94:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    1d98:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1d9c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d9e:	29 17       	cp	r18, r25
    1da0:	08 f0       	brcs	.+2      	; 0x1da4 <xTaskIncrementTick+0x1f4>
    1da2:	4f cf       	rjmp	.-354    	; 0x1c42 <xTaskIncrementTick+0x92>
    1da4:	51 cf       	rjmp	.-350    	; 0x1c48 <xTaskIncrementTick+0x98>
    1da6:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    1daa:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1dae:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1db0:	9b e0       	ldi	r25, 0x0B	; 11
    1db2:	e9 9f       	mul	r30, r25
    1db4:	f0 01       	movw	r30, r0
    1db6:	11 24       	eor	r1, r1
    1db8:	ed 51       	subi	r30, 0x1D	; 29
    1dba:	fd 4e       	sbci	r31, 0xED	; 237
    1dbc:	90 81       	ld	r25, Z
    1dbe:	92 30       	cpi	r25, 0x02	; 2
    1dc0:	08 f0       	brcs	.+2      	; 0x1dc4 <xTaskIncrementTick+0x214>
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 91 9b 12 	lds	r25, 0x129B	; 0x80129b <xYieldPending>
    1dc8:	91 11       	cpse	r25, r1
    1dca:	16 c0       	rjmp	.+44     	; 0x1df8 <xTaskIncrementTick+0x248>
    1dcc:	16 c0       	rjmp	.+44     	; 0x1dfa <xTaskIncrementTick+0x24a>
    1dce:	80 91 9c 12 	lds	r24, 0x129C	; 0x80129c <xPendedTicks>
    1dd2:	90 91 9d 12 	lds	r25, 0x129D	; 0x80129d <xPendedTicks+0x1>
    1dd6:	a0 91 9e 12 	lds	r26, 0x129E	; 0x80129e <xPendedTicks+0x2>
    1dda:	b0 91 9f 12 	lds	r27, 0x129F	; 0x80129f <xPendedTicks+0x3>
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	a1 1d       	adc	r26, r1
    1de2:	b1 1d       	adc	r27, r1
    1de4:	80 93 9c 12 	sts	0x129C, r24	; 0x80129c <xPendedTicks>
    1de8:	90 93 9d 12 	sts	0x129D, r25	; 0x80129d <xPendedTicks+0x1>
    1dec:	a0 93 9e 12 	sts	0x129E, r26	; 0x80129e <xPendedTicks+0x2>
    1df0:	b0 93 9f 12 	sts	0x129F, r27	; 0x80129f <xPendedTicks+0x3>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <xTaskIncrementTick+0x24a>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	ff 90       	pop	r15
    1e00:	ef 90       	pop	r14
    1e02:	df 90       	pop	r13
    1e04:	cf 90       	pop	r12
    1e06:	08 95       	ret

00001e08 <xTaskResumeAll>:
    1e08:	cf 92       	push	r12
    1e0a:	df 92       	push	r13
    1e0c:	ef 92       	push	r14
    1e0e:	ff 92       	push	r15
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	0f 92       	push	r0
    1e1a:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    1e1e:	81 50       	subi	r24, 0x01	; 1
    1e20:	80 93 92 12 	sts	0x1292, r24	; 0x801292 <uxSchedulerSuspended>
    1e24:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    1e28:	81 11       	cpse	r24, r1
    1e2a:	be c0       	rjmp	.+380    	; 0x1fa8 <xTaskResumeAll+0x1a0>
    1e2c:	80 91 a6 12 	lds	r24, 0x12A6	; 0x8012a6 <uxCurrentNumberOfTasks>
    1e30:	81 11       	cpse	r24, r1
    1e32:	88 c0       	rjmp	.+272    	; 0x1f44 <xTaskResumeAll+0x13c>
    1e34:	bc c0       	rjmp	.+376    	; 0x1fae <xTaskResumeAll+0x1a6>
    1e36:	e0 91 c5 12 	lds	r30, 0x12C5	; 0x8012c5 <xPendingReadyList+0x7>
    1e3a:	f0 91 c6 12 	lds	r31, 0x12C6	; 0x8012c6 <xPendingReadyList+0x8>
    1e3e:	00 84       	ldd	r0, Z+8	; 0x08
    1e40:	f1 85       	ldd	r31, Z+9	; 0x09
    1e42:	e0 2d       	mov	r30, r0
    1e44:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e46:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e48:	c2 89       	ldd	r28, Z+18	; 0x12
    1e4a:	d3 89       	ldd	r29, Z+19	; 0x13
    1e4c:	84 89       	ldd	r24, Z+20	; 0x14
    1e4e:	95 89       	ldd	r25, Z+21	; 0x15
    1e50:	9f 83       	std	Y+7, r25	; 0x07
    1e52:	8e 83       	std	Y+6, r24	; 0x06
    1e54:	c4 89       	ldd	r28, Z+20	; 0x14
    1e56:	d5 89       	ldd	r29, Z+21	; 0x15
    1e58:	82 89       	ldd	r24, Z+18	; 0x12
    1e5a:	93 89       	ldd	r25, Z+19	; 0x13
    1e5c:	9d 83       	std	Y+5, r25	; 0x05
    1e5e:	8c 83       	std	Y+4, r24	; 0x04
    1e60:	11 96       	adiw	r26, 0x01	; 1
    1e62:	2d 91       	ld	r18, X+
    1e64:	3c 91       	ld	r19, X
    1e66:	12 97       	sbiw	r26, 0x02	; 2
    1e68:	cf 01       	movw	r24, r30
    1e6a:	0e 96       	adiw	r24, 0x0e	; 14
    1e6c:	28 17       	cp	r18, r24
    1e6e:	39 07       	cpc	r19, r25
    1e70:	31 f4       	brne	.+12     	; 0x1e7e <xTaskResumeAll+0x76>
    1e72:	84 89       	ldd	r24, Z+20	; 0x14
    1e74:	95 89       	ldd	r25, Z+21	; 0x15
    1e76:	12 96       	adiw	r26, 0x02	; 2
    1e78:	9c 93       	st	X, r25
    1e7a:	8e 93       	st	-X, r24
    1e7c:	11 97       	sbiw	r26, 0x01	; 1
    1e7e:	11 8e       	std	Z+25, r1	; 0x19
    1e80:	10 8e       	std	Z+24, r1	; 0x18
    1e82:	8c 91       	ld	r24, X
    1e84:	81 50       	subi	r24, 0x01	; 1
    1e86:	8c 93       	st	X, r24
    1e88:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e8a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e8c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e8e:	d7 81       	ldd	r29, Z+7	; 0x07
    1e90:	80 85       	ldd	r24, Z+8	; 0x08
    1e92:	91 85       	ldd	r25, Z+9	; 0x09
    1e94:	9f 83       	std	Y+7, r25	; 0x07
    1e96:	8e 83       	std	Y+6, r24	; 0x06
    1e98:	c0 85       	ldd	r28, Z+8	; 0x08
    1e9a:	d1 85       	ldd	r29, Z+9	; 0x09
    1e9c:	86 81       	ldd	r24, Z+6	; 0x06
    1e9e:	97 81       	ldd	r25, Z+7	; 0x07
    1ea0:	9d 83       	std	Y+5, r25	; 0x05
    1ea2:	8c 83       	std	Y+4, r24	; 0x04
    1ea4:	11 96       	adiw	r26, 0x01	; 1
    1ea6:	8d 91       	ld	r24, X+
    1ea8:	9c 91       	ld	r25, X
    1eaa:	12 97       	sbiw	r26, 0x02	; 2
    1eac:	9f 01       	movw	r18, r30
    1eae:	2e 5f       	subi	r18, 0xFE	; 254
    1eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb2:	82 17       	cp	r24, r18
    1eb4:	93 07       	cpc	r25, r19
    1eb6:	31 f4       	brne	.+12     	; 0x1ec4 <xTaskResumeAll+0xbc>
    1eb8:	80 85       	ldd	r24, Z+8	; 0x08
    1eba:	91 85       	ldd	r25, Z+9	; 0x09
    1ebc:	12 96       	adiw	r26, 0x02	; 2
    1ebe:	9c 93       	st	X, r25
    1ec0:	8e 93       	st	-X, r24
    1ec2:	11 97       	sbiw	r26, 0x01	; 1
    1ec4:	15 86       	std	Z+13, r1	; 0x0d
    1ec6:	14 86       	std	Z+12, r1	; 0x0c
    1ec8:	8c 91       	ld	r24, X
    1eca:	81 50       	subi	r24, 0x01	; 1
    1ecc:	8c 93       	st	X, r24
    1ece:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ed0:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    1ed4:	8a 17       	cp	r24, r26
    1ed6:	10 f4       	brcc	.+4      	; 0x1edc <xTaskResumeAll+0xd4>
    1ed8:	a0 93 a1 12 	sts	0x12A1, r26	; 0x8012a1 <uxTopReadyPriority>
    1edc:	8b e0       	ldi	r24, 0x0B	; 11
    1ede:	8a 9f       	mul	r24, r26
    1ee0:	d0 01       	movw	r26, r0
    1ee2:	11 24       	eor	r1, r1
    1ee4:	ad 51       	subi	r26, 0x1D	; 29
    1ee6:	bd 4e       	sbci	r27, 0xED	; 237
    1ee8:	11 96       	adiw	r26, 0x01	; 1
    1eea:	0d 90       	ld	r0, X+
    1eec:	bc 91       	ld	r27, X
    1eee:	a0 2d       	mov	r26, r0
    1ef0:	b7 83       	std	Z+7, r27	; 0x07
    1ef2:	a6 83       	std	Z+6, r26	; 0x06
    1ef4:	16 96       	adiw	r26, 0x06	; 6
    1ef6:	4d 91       	ld	r20, X+
    1ef8:	5c 91       	ld	r21, X
    1efa:	17 97       	sbiw	r26, 0x07	; 7
    1efc:	51 87       	std	Z+9, r21	; 0x09
    1efe:	40 87       	std	Z+8, r20	; 0x08
    1f00:	16 96       	adiw	r26, 0x06	; 6
    1f02:	cd 91       	ld	r28, X+
    1f04:	dc 91       	ld	r29, X
    1f06:	17 97       	sbiw	r26, 0x07	; 7
    1f08:	3d 83       	std	Y+5, r19	; 0x05
    1f0a:	2c 83       	std	Y+4, r18	; 0x04
    1f0c:	17 96       	adiw	r26, 0x07	; 7
    1f0e:	3c 93       	st	X, r19
    1f10:	2e 93       	st	-X, r18
    1f12:	16 97       	sbiw	r26, 0x06	; 6
    1f14:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f16:	8a 9f       	mul	r24, r26
    1f18:	d0 01       	movw	r26, r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	ad 51       	subi	r26, 0x1D	; 29
    1f1e:	bd 4e       	sbci	r27, 0xED	; 237
    1f20:	b5 87       	std	Z+13, r27	; 0x0d
    1f22:	a4 87       	std	Z+12, r26	; 0x0c
    1f24:	8c 91       	ld	r24, X
    1f26:	8f 5f       	subi	r24, 0xFF	; 255
    1f28:	8c 93       	st	X, r24
    1f2a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f2c:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    1f30:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    1f34:	5a 96       	adiw	r26, 0x1a	; 26
    1f36:	8c 91       	ld	r24, X
    1f38:	98 17       	cp	r25, r24
    1f3a:	30 f0       	brcs	.+12     	; 0x1f48 <xTaskResumeAll+0x140>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <xTaskResumeAll+0x140>
    1f44:	e0 e0       	ldi	r30, 0x00	; 0
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 91 be 12 	lds	r24, 0x12BE	; 0x8012be <xPendingReadyList>
    1f4c:	81 11       	cpse	r24, r1
    1f4e:	73 cf       	rjmp	.-282    	; 0x1e36 <xTaskResumeAll+0x2e>
    1f50:	ef 2b       	or	r30, r31
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <xTaskResumeAll+0x14e>
    1f54:	90 db       	rcall	.-2272   	; 0x1676 <prvResetNextTaskUnblockTime>
    1f56:	c0 90 9c 12 	lds	r12, 0x129C	; 0x80129c <xPendedTicks>
    1f5a:	d0 90 9d 12 	lds	r13, 0x129D	; 0x80129d <xPendedTicks+0x1>
    1f5e:	e0 90 9e 12 	lds	r14, 0x129E	; 0x80129e <xPendedTicks+0x2>
    1f62:	f0 90 9f 12 	lds	r15, 0x129F	; 0x80129f <xPendedTicks+0x3>
    1f66:	c1 14       	cp	r12, r1
    1f68:	d1 04       	cpc	r13, r1
    1f6a:	e1 04       	cpc	r14, r1
    1f6c:	f1 04       	cpc	r15, r1
    1f6e:	a1 f0       	breq	.+40     	; 0x1f98 <xTaskResumeAll+0x190>
    1f70:	1f de       	rcall	.-962    	; 0x1bb0 <xTaskIncrementTick>
    1f72:	88 23       	and	r24, r24
    1f74:	19 f0       	breq	.+6      	; 0x1f7c <xTaskResumeAll+0x174>
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	c8 1a       	sub	r12, r24
    1f80:	d1 08       	sbc	r13, r1
    1f82:	e1 08       	sbc	r14, r1
    1f84:	f1 08       	sbc	r15, r1
    1f86:	a1 f7       	brne	.-24     	; 0x1f70 <xTaskResumeAll+0x168>
    1f88:	10 92 9c 12 	sts	0x129C, r1	; 0x80129c <xPendedTicks>
    1f8c:	10 92 9d 12 	sts	0x129D, r1	; 0x80129d <xPendedTicks+0x1>
    1f90:	10 92 9e 12 	sts	0x129E, r1	; 0x80129e <xPendedTicks+0x2>
    1f94:	10 92 9f 12 	sts	0x129F, r1	; 0x80129f <xPendedTicks+0x3>
    1f98:	80 91 9b 12 	lds	r24, 0x129B	; 0x80129b <xYieldPending>
    1f9c:	88 23       	and	r24, r24
    1f9e:	31 f0       	breq	.+12     	; 0x1fac <xTaskResumeAll+0x1a4>
    1fa0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	03 c0       	rjmp	.+6      	; 0x1fae <xTaskResumeAll+0x1a6>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <xTaskResumeAll+0x1a6>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	0f 90       	pop	r0
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	08 95       	ret

00001fc0 <vTaskDelay>:
    1fc0:	cf 92       	push	r12
    1fc2:	df 92       	push	r13
    1fc4:	ef 92       	push	r14
    1fc6:	ff 92       	push	r15
    1fc8:	6b 01       	movw	r12, r22
    1fca:	7c 01       	movw	r14, r24
    1fcc:	67 2b       	or	r22, r23
    1fce:	68 2b       	or	r22, r24
    1fd0:	69 2b       	or	r22, r25
    1fd2:	39 f0       	breq	.+14     	; 0x1fe2 <vTaskDelay+0x22>
    1fd4:	d9 dd       	rcall	.-1102   	; 0x1b88 <vTaskSuspendAll>
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	c7 01       	movw	r24, r14
    1fda:	b6 01       	movw	r22, r12
    1fdc:	b5 dc       	rcall	.-1686   	; 0x1948 <prvAddCurrentTaskToDelayedList>
    1fde:	14 df       	rcall	.-472    	; 0x1e08 <xTaskResumeAll>
    1fe0:	01 c0       	rjmp	.+2      	; 0x1fe4 <vTaskDelay+0x24>
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <vTaskDelay+0x2c>
    1fe8:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    1fec:	ff 90       	pop	r15
    1fee:	ef 90       	pop	r14
    1ff0:	df 90       	pop	r13
    1ff2:	cf 90       	pop	r12
    1ff4:	08 95       	ret

00001ff6 <vTaskSwitchContext>:
    1ff6:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    1ffa:	88 23       	and	r24, r24
    1ffc:	21 f0       	breq	.+8      	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    2004:	08 95       	ret
    2006:	10 92 9b 12 	sts	0x129B, r1	; 0x80129b <xYieldPending>
    200a:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    200e:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2012:	20 81       	ld	r18, Z
    2014:	31 81       	ldd	r19, Z+1	; 0x01
    2016:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    201a:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    201e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2020:	94 8d       	ldd	r25, Z+28	; 0x1c
    2022:	82 17       	cp	r24, r18
    2024:	93 07       	cpc	r25, r19
    2026:	58 f0       	brcs	.+22     	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    2028:	60 91 51 13 	lds	r22, 0x1351	; 0x801351 <pxCurrentTCB>
    202c:	70 91 52 13 	lds	r23, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2030:	63 5e       	subi	r22, 0xE3	; 227
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    2038:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    203c:	70 d7       	rcall	.+3808   	; 0x2f1e <vApplicationStackOverflowHook>
    203e:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    2044:	81 50       	subi	r24, 0x01	; 1
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	9b e0       	ldi	r25, 0x0B	; 11
    204c:	92 9f       	mul	r25, r18
    204e:	f0 01       	movw	r30, r0
    2050:	93 9f       	mul	r25, r19
    2052:	f0 0d       	add	r31, r0
    2054:	11 24       	eor	r1, r1
    2056:	ed 51       	subi	r30, 0x1D	; 29
    2058:	fd 4e       	sbci	r31, 0xED	; 237
    205a:	90 81       	ld	r25, Z
    205c:	99 23       	and	r25, r25
    205e:	91 f3       	breq	.-28     	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    2060:	9b e0       	ldi	r25, 0x0B	; 11
    2062:	92 9f       	mul	r25, r18
    2064:	a0 01       	movw	r20, r0
    2066:	93 9f       	mul	r25, r19
    2068:	50 0d       	add	r21, r0
    206a:	11 24       	eor	r1, r1
    206c:	df 01       	movw	r26, r30
    206e:	01 80       	ldd	r0, Z+1	; 0x01
    2070:	f2 81       	ldd	r31, Z+2	; 0x02
    2072:	e0 2d       	mov	r30, r0
    2074:	04 80       	ldd	r0, Z+4	; 0x04
    2076:	f5 81       	ldd	r31, Z+5	; 0x05
    2078:	e0 2d       	mov	r30, r0
    207a:	12 96       	adiw	r26, 0x02	; 2
    207c:	fc 93       	st	X, r31
    207e:	ee 93       	st	-X, r30
    2080:	11 97       	sbiw	r26, 0x01	; 1
    2082:	4a 51       	subi	r20, 0x1A	; 26
    2084:	5d 4e       	sbci	r21, 0xED	; 237
    2086:	e4 17       	cp	r30, r20
    2088:	f5 07       	cpc	r31, r21
    208a:	29 f4       	brne	.+10     	; 0x2096 <__DATA_REGION_LENGTH__+0x96>
    208c:	44 81       	ldd	r20, Z+4	; 0x04
    208e:	55 81       	ldd	r21, Z+5	; 0x05
    2090:	fd 01       	movw	r30, r26
    2092:	52 83       	std	Z+2, r21	; 0x02
    2094:	41 83       	std	Z+1, r20	; 0x01
    2096:	9b e0       	ldi	r25, 0x0B	; 11
    2098:	92 9f       	mul	r25, r18
    209a:	f0 01       	movw	r30, r0
    209c:	93 9f       	mul	r25, r19
    209e:	f0 0d       	add	r31, r0
    20a0:	11 24       	eor	r1, r1
    20a2:	ed 51       	subi	r30, 0x1D	; 29
    20a4:	fd 4e       	sbci	r31, 0xED	; 237
    20a6:	01 80       	ldd	r0, Z+1	; 0x01
    20a8:	f2 81       	ldd	r31, Z+2	; 0x02
    20aa:	e0 2d       	mov	r30, r0
    20ac:	20 85       	ldd	r18, Z+8	; 0x08
    20ae:	31 85       	ldd	r19, Z+9	; 0x09
    20b0:	30 93 52 13 	sts	0x1352, r19	; 0x801352 <pxCurrentTCB+0x1>
    20b4:	20 93 51 13 	sts	0x1351, r18	; 0x801351 <pxCurrentTCB>
    20b8:	80 93 a1 12 	sts	0x12A1, r24	; 0x8012a1 <uxTopReadyPriority>
    20bc:	08 95       	ret

000020be <vTaskPlaceOnEventList>:
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	6a 01       	movw	r12, r20
    20c8:	7b 01       	movw	r14, r22
    20ca:	60 91 51 13 	lds	r22, 0x1351	; 0x801351 <pxCurrentTCB>
    20ce:	70 91 52 13 	lds	r23, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    20d2:	62 5f       	subi	r22, 0xF2	; 242
    20d4:	7f 4f       	sbci	r23, 0xFF	; 255
    20d6:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	c7 01       	movw	r24, r14
    20de:	b6 01       	movw	r22, r12
    20e0:	33 dc       	rcall	.-1946   	; 0x1948 <prvAddCurrentTaskToDelayedList>
    20e2:	ff 90       	pop	r15
    20e4:	ef 90       	pop	r14
    20e6:	df 90       	pop	r13
    20e8:	cf 90       	pop	r12
    20ea:	08 95       	ret

000020ec <vTaskPlaceOnUnorderedEventList>:
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	fc 01       	movw	r30, r24
    20f6:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    20fa:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    20fe:	70 68       	ori	r23, 0x80	; 128
    2100:	1e 96       	adiw	r26, 0x0e	; 14
    2102:	4d 93       	st	X+, r20
    2104:	5d 93       	st	X+, r21
    2106:	6d 93       	st	X+, r22
    2108:	7c 93       	st	X, r23
    210a:	51 97       	sbiw	r26, 0x11	; 17
    210c:	a1 81       	ldd	r26, Z+1	; 0x01
    210e:	b2 81       	ldd	r27, Z+2	; 0x02
    2110:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    2114:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2118:	bb 8b       	std	Y+19, r27	; 0x13
    211a:	aa 8b       	std	Y+18, r26	; 0x12
    211c:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    2120:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2124:	16 96       	adiw	r26, 0x06	; 6
    2126:	8d 91       	ld	r24, X+
    2128:	9c 91       	ld	r25, X
    212a:	17 97       	sbiw	r26, 0x07	; 7
    212c:	9d 8b       	std	Y+21, r25	; 0x15
    212e:	8c 8b       	std	Y+20, r24	; 0x14
    2130:	16 96       	adiw	r26, 0x06	; 6
    2132:	cd 91       	ld	r28, X+
    2134:	dc 91       	ld	r29, X
    2136:	17 97       	sbiw	r26, 0x07	; 7
    2138:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    213c:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2140:	0e 96       	adiw	r24, 0x0e	; 14
    2142:	9d 83       	std	Y+5, r25	; 0x05
    2144:	8c 83       	std	Y+4, r24	; 0x04
    2146:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <pxCurrentTCB>
    214a:	90 91 52 13 	lds	r25, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    214e:	0e 96       	adiw	r24, 0x0e	; 14
    2150:	17 96       	adiw	r26, 0x07	; 7
    2152:	9c 93       	st	X, r25
    2154:	8e 93       	st	-X, r24
    2156:	16 97       	sbiw	r26, 0x06	; 6
    2158:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    215c:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2160:	59 96       	adiw	r26, 0x19	; 25
    2162:	fc 93       	st	X, r31
    2164:	ee 93       	st	-X, r30
    2166:	58 97       	sbiw	r26, 0x18	; 24
    2168:	80 81       	ld	r24, Z
    216a:	8f 5f       	subi	r24, 0xFF	; 255
    216c:	80 83       	st	Z, r24
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	c9 01       	movw	r24, r18
    2172:	b8 01       	movw	r22, r16
    2174:	e9 db       	rcall	.-2094   	; 0x1948 <prvAddCurrentTaskToDelayedList>
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	08 95       	ret

00002180 <vTaskPlaceOnEventListRestricted>:
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	fc 01       	movw	r30, r24
    2186:	cb 01       	movw	r24, r22
    2188:	ba 01       	movw	r22, r20
    218a:	a1 81       	ldd	r26, Z+1	; 0x01
    218c:	b2 81       	ldd	r27, Z+2	; 0x02
    218e:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    2192:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2196:	bb 8b       	std	Y+19, r27	; 0x13
    2198:	aa 8b       	std	Y+18, r26	; 0x12
    219a:	c0 91 51 13 	lds	r28, 0x1351	; 0x801351 <pxCurrentTCB>
    219e:	d0 91 52 13 	lds	r29, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    21a2:	16 96       	adiw	r26, 0x06	; 6
    21a4:	4d 91       	ld	r20, X+
    21a6:	5c 91       	ld	r21, X
    21a8:	17 97       	sbiw	r26, 0x07	; 7
    21aa:	5d 8b       	std	Y+21, r21	; 0x15
    21ac:	4c 8b       	std	Y+20, r20	; 0x14
    21ae:	16 96       	adiw	r26, 0x06	; 6
    21b0:	cd 91       	ld	r28, X+
    21b2:	dc 91       	ld	r29, X
    21b4:	17 97       	sbiw	r26, 0x07	; 7
    21b6:	40 91 51 13 	lds	r20, 0x1351	; 0x801351 <pxCurrentTCB>
    21ba:	50 91 52 13 	lds	r21, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    21be:	42 5f       	subi	r20, 0xF2	; 242
    21c0:	5f 4f       	sbci	r21, 0xFF	; 255
    21c2:	5d 83       	std	Y+5, r21	; 0x05
    21c4:	4c 83       	std	Y+4, r20	; 0x04
    21c6:	40 91 51 13 	lds	r20, 0x1351	; 0x801351 <pxCurrentTCB>
    21ca:	50 91 52 13 	lds	r21, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    21ce:	42 5f       	subi	r20, 0xF2	; 242
    21d0:	5f 4f       	sbci	r21, 0xFF	; 255
    21d2:	17 96       	adiw	r26, 0x07	; 7
    21d4:	5c 93       	st	X, r21
    21d6:	4e 93       	st	-X, r20
    21d8:	16 97       	sbiw	r26, 0x06	; 6
    21da:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    21de:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    21e2:	59 96       	adiw	r26, 0x19	; 25
    21e4:	fc 93       	st	X, r31
    21e6:	ee 93       	st	-X, r30
    21e8:	58 97       	sbiw	r26, 0x18	; 24
    21ea:	30 81       	ld	r19, Z
    21ec:	3f 5f       	subi	r19, 0xFF	; 255
    21ee:	30 83       	st	Z, r19
    21f0:	22 23       	and	r18, r18
    21f2:	19 f0       	breq	.+6      	; 0x21fa <vTaskPlaceOnEventListRestricted+0x7a>
    21f4:	6f ef       	ldi	r22, 0xFF	; 255
    21f6:	7f ef       	ldi	r23, 0xFF	; 255
    21f8:	cb 01       	movw	r24, r22
    21fa:	42 2f       	mov	r20, r18
    21fc:	a5 db       	rcall	.-2230   	; 0x1948 <prvAddCurrentTaskToDelayedList>
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	08 95       	ret

00002204 <xTaskRemoveFromEventList>:
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	dc 01       	movw	r26, r24
    220a:	17 96       	adiw	r26, 0x07	; 7
    220c:	ed 91       	ld	r30, X+
    220e:	fc 91       	ld	r31, X
    2210:	18 97       	sbiw	r26, 0x08	; 8
    2212:	00 84       	ldd	r0, Z+8	; 0x08
    2214:	f1 85       	ldd	r31, Z+9	; 0x09
    2216:	e0 2d       	mov	r30, r0
    2218:	a0 8d       	ldd	r26, Z+24	; 0x18
    221a:	b1 8d       	ldd	r27, Z+25	; 0x19
    221c:	c2 89       	ldd	r28, Z+18	; 0x12
    221e:	d3 89       	ldd	r29, Z+19	; 0x13
    2220:	84 89       	ldd	r24, Z+20	; 0x14
    2222:	95 89       	ldd	r25, Z+21	; 0x15
    2224:	9f 83       	std	Y+7, r25	; 0x07
    2226:	8e 83       	std	Y+6, r24	; 0x06
    2228:	c4 89       	ldd	r28, Z+20	; 0x14
    222a:	d5 89       	ldd	r29, Z+21	; 0x15
    222c:	82 89       	ldd	r24, Z+18	; 0x12
    222e:	93 89       	ldd	r25, Z+19	; 0x13
    2230:	9d 83       	std	Y+5, r25	; 0x05
    2232:	8c 83       	std	Y+4, r24	; 0x04
    2234:	11 96       	adiw	r26, 0x01	; 1
    2236:	8d 91       	ld	r24, X+
    2238:	9c 91       	ld	r25, X
    223a:	12 97       	sbiw	r26, 0x02	; 2
    223c:	9f 01       	movw	r18, r30
    223e:	22 5f       	subi	r18, 0xF2	; 242
    2240:	3f 4f       	sbci	r19, 0xFF	; 255
    2242:	82 17       	cp	r24, r18
    2244:	93 07       	cpc	r25, r19
    2246:	31 f4       	brne	.+12     	; 0x2254 <xTaskRemoveFromEventList+0x50>
    2248:	84 89       	ldd	r24, Z+20	; 0x14
    224a:	95 89       	ldd	r25, Z+21	; 0x15
    224c:	12 96       	adiw	r26, 0x02	; 2
    224e:	9c 93       	st	X, r25
    2250:	8e 93       	st	-X, r24
    2252:	11 97       	sbiw	r26, 0x01	; 1
    2254:	11 8e       	std	Z+25, r1	; 0x19
    2256:	10 8e       	std	Z+24, r1	; 0x18
    2258:	8c 91       	ld	r24, X
    225a:	81 50       	subi	r24, 0x01	; 1
    225c:	8c 93       	st	X, r24
    225e:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    2262:	81 11       	cpse	r24, r1
    2264:	52 c0       	rjmp	.+164    	; 0x230a <xTaskRemoveFromEventList+0x106>
    2266:	a4 85       	ldd	r26, Z+12	; 0x0c
    2268:	b5 85       	ldd	r27, Z+13	; 0x0d
    226a:	c6 81       	ldd	r28, Z+6	; 0x06
    226c:	d7 81       	ldd	r29, Z+7	; 0x07
    226e:	80 85       	ldd	r24, Z+8	; 0x08
    2270:	91 85       	ldd	r25, Z+9	; 0x09
    2272:	9f 83       	std	Y+7, r25	; 0x07
    2274:	8e 83       	std	Y+6, r24	; 0x06
    2276:	c0 85       	ldd	r28, Z+8	; 0x08
    2278:	d1 85       	ldd	r29, Z+9	; 0x09
    227a:	86 81       	ldd	r24, Z+6	; 0x06
    227c:	97 81       	ldd	r25, Z+7	; 0x07
    227e:	9d 83       	std	Y+5, r25	; 0x05
    2280:	8c 83       	std	Y+4, r24	; 0x04
    2282:	11 96       	adiw	r26, 0x01	; 1
    2284:	8d 91       	ld	r24, X+
    2286:	9c 91       	ld	r25, X
    2288:	12 97       	sbiw	r26, 0x02	; 2
    228a:	9f 01       	movw	r18, r30
    228c:	2e 5f       	subi	r18, 0xFE	; 254
    228e:	3f 4f       	sbci	r19, 0xFF	; 255
    2290:	82 17       	cp	r24, r18
    2292:	93 07       	cpc	r25, r19
    2294:	31 f4       	brne	.+12     	; 0x22a2 <xTaskRemoveFromEventList+0x9e>
    2296:	80 85       	ldd	r24, Z+8	; 0x08
    2298:	91 85       	ldd	r25, Z+9	; 0x09
    229a:	12 96       	adiw	r26, 0x02	; 2
    229c:	9c 93       	st	X, r25
    229e:	8e 93       	st	-X, r24
    22a0:	11 97       	sbiw	r26, 0x01	; 1
    22a2:	15 86       	std	Z+13, r1	; 0x0d
    22a4:	14 86       	std	Z+12, r1	; 0x0c
    22a6:	8c 91       	ld	r24, X
    22a8:	81 50       	subi	r24, 0x01	; 1
    22aa:	8c 93       	st	X, r24
    22ac:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22ae:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    22b2:	8a 17       	cp	r24, r26
    22b4:	10 f4       	brcc	.+4      	; 0x22ba <xTaskRemoveFromEventList+0xb6>
    22b6:	a0 93 a1 12 	sts	0x12A1, r26	; 0x8012a1 <uxTopReadyPriority>
    22ba:	8b e0       	ldi	r24, 0x0B	; 11
    22bc:	8a 9f       	mul	r24, r26
    22be:	d0 01       	movw	r26, r0
    22c0:	11 24       	eor	r1, r1
    22c2:	ad 51       	subi	r26, 0x1D	; 29
    22c4:	bd 4e       	sbci	r27, 0xED	; 237
    22c6:	11 96       	adiw	r26, 0x01	; 1
    22c8:	0d 90       	ld	r0, X+
    22ca:	bc 91       	ld	r27, X
    22cc:	a0 2d       	mov	r26, r0
    22ce:	b7 83       	std	Z+7, r27	; 0x07
    22d0:	a6 83       	std	Z+6, r26	; 0x06
    22d2:	16 96       	adiw	r26, 0x06	; 6
    22d4:	4d 91       	ld	r20, X+
    22d6:	5c 91       	ld	r21, X
    22d8:	17 97       	sbiw	r26, 0x07	; 7
    22da:	51 87       	std	Z+9, r21	; 0x09
    22dc:	40 87       	std	Z+8, r20	; 0x08
    22de:	16 96       	adiw	r26, 0x06	; 6
    22e0:	cd 91       	ld	r28, X+
    22e2:	dc 91       	ld	r29, X
    22e4:	17 97       	sbiw	r26, 0x07	; 7
    22e6:	3d 83       	std	Y+5, r19	; 0x05
    22e8:	2c 83       	std	Y+4, r18	; 0x04
    22ea:	17 96       	adiw	r26, 0x07	; 7
    22ec:	3c 93       	st	X, r19
    22ee:	2e 93       	st	-X, r18
    22f0:	16 97       	sbiw	r26, 0x06	; 6
    22f2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22f4:	8a 9f       	mul	r24, r26
    22f6:	d0 01       	movw	r26, r0
    22f8:	11 24       	eor	r1, r1
    22fa:	ad 51       	subi	r26, 0x1D	; 29
    22fc:	bd 4e       	sbci	r27, 0xED	; 237
    22fe:	b5 87       	std	Z+13, r27	; 0x0d
    2300:	a4 87       	std	Z+12, r26	; 0x0c
    2302:	8c 91       	ld	r24, X
    2304:	8f 5f       	subi	r24, 0xFF	; 255
    2306:	8c 93       	st	X, r24
    2308:	1c c0       	rjmp	.+56     	; 0x2342 <xTaskRemoveFromEventList+0x13e>
    230a:	4e eb       	ldi	r20, 0xBE	; 190
    230c:	52 e1       	ldi	r21, 0x12	; 18
    230e:	da 01       	movw	r26, r20
    2310:	11 96       	adiw	r26, 0x01	; 1
    2312:	cd 91       	ld	r28, X+
    2314:	dc 91       	ld	r29, X
    2316:	12 97       	sbiw	r26, 0x02	; 2
    2318:	d3 8b       	std	Z+19, r29	; 0x13
    231a:	c2 8b       	std	Z+18, r28	; 0x12
    231c:	8e 81       	ldd	r24, Y+6	; 0x06
    231e:	9f 81       	ldd	r25, Y+7	; 0x07
    2320:	95 8b       	std	Z+21, r25	; 0x15
    2322:	84 8b       	std	Z+20, r24	; 0x14
    2324:	8e 81       	ldd	r24, Y+6	; 0x06
    2326:	9f 81       	ldd	r25, Y+7	; 0x07
    2328:	dc 01       	movw	r26, r24
    232a:	15 96       	adiw	r26, 0x05	; 5
    232c:	3c 93       	st	X, r19
    232e:	2e 93       	st	-X, r18
    2330:	14 97       	sbiw	r26, 0x04	; 4
    2332:	3f 83       	std	Y+7, r19	; 0x07
    2334:	2e 83       	std	Y+6, r18	; 0x06
    2336:	51 8f       	std	Z+25, r21	; 0x19
    2338:	40 8f       	std	Z+24, r20	; 0x18
    233a:	da 01       	movw	r26, r20
    233c:	8c 91       	ld	r24, X
    233e:	8f 5f       	subi	r24, 0xFF	; 255
    2340:	8c 93       	st	X, r24
    2342:	92 8d       	ldd	r25, Z+26	; 0x1a
    2344:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    2348:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    234c:	82 8d       	ldd	r24, Z+26	; 0x1a
    234e:	89 17       	cp	r24, r25
    2350:	20 f4       	brcc	.+8      	; 0x235a <xTaskRemoveFromEventList+0x156>
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    2358:	01 c0       	rjmp	.+2      	; 0x235c <xTaskRemoveFromEventList+0x158>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	08 95       	ret

00002362 <vTaskRemoveFromUnorderedEventList>:
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
    2366:	dc 01       	movw	r26, r24
    2368:	70 68       	ori	r23, 0x80	; 128
    236a:	4d 93       	st	X+, r20
    236c:	5d 93       	st	X+, r21
    236e:	6d 93       	st	X+, r22
    2370:	7c 93       	st	X, r23
    2372:	13 97       	sbiw	r26, 0x03	; 3
    2374:	18 96       	adiw	r26, 0x08	; 8
    2376:	ed 91       	ld	r30, X+
    2378:	fc 91       	ld	r31, X
    237a:	19 97       	sbiw	r26, 0x09	; 9
    237c:	1a 96       	adiw	r26, 0x0a	; 10
    237e:	4d 91       	ld	r20, X+
    2380:	5c 91       	ld	r21, X
    2382:	1b 97       	sbiw	r26, 0x0b	; 11
    2384:	14 96       	adiw	r26, 0x04	; 4
    2386:	8d 91       	ld	r24, X+
    2388:	9c 91       	ld	r25, X
    238a:	15 97       	sbiw	r26, 0x05	; 5
    238c:	16 96       	adiw	r26, 0x06	; 6
    238e:	2d 91       	ld	r18, X+
    2390:	3c 91       	ld	r19, X
    2392:	17 97       	sbiw	r26, 0x07	; 7
    2394:	ec 01       	movw	r28, r24
    2396:	3f 83       	std	Y+7, r19	; 0x07
    2398:	2e 83       	std	Y+6, r18	; 0x06
    239a:	16 96       	adiw	r26, 0x06	; 6
    239c:	8d 91       	ld	r24, X+
    239e:	9c 91       	ld	r25, X
    23a0:	17 97       	sbiw	r26, 0x07	; 7
    23a2:	14 96       	adiw	r26, 0x04	; 4
    23a4:	2d 91       	ld	r18, X+
    23a6:	3c 91       	ld	r19, X
    23a8:	15 97       	sbiw	r26, 0x05	; 5
    23aa:	ec 01       	movw	r28, r24
    23ac:	3d 83       	std	Y+5, r19	; 0x05
    23ae:	2c 83       	std	Y+4, r18	; 0x04
    23b0:	ea 01       	movw	r28, r20
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	9a 81       	ldd	r25, Y+2	; 0x02
    23b6:	a8 17       	cp	r26, r24
    23b8:	b9 07       	cpc	r27, r25
    23ba:	31 f4       	brne	.+12     	; 0x23c8 <vTaskRemoveFromUnorderedEventList+0x66>
    23bc:	16 96       	adiw	r26, 0x06	; 6
    23be:	8d 91       	ld	r24, X+
    23c0:	9c 91       	ld	r25, X
    23c2:	17 97       	sbiw	r26, 0x07	; 7
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	1b 96       	adiw	r26, 0x0b	; 11
    23ca:	1c 92       	st	X, r1
    23cc:	1e 92       	st	-X, r1
    23ce:	1a 97       	sbiw	r26, 0x0a	; 10
    23d0:	da 01       	movw	r26, r20
    23d2:	8c 91       	ld	r24, X
    23d4:	81 50       	subi	r24, 0x01	; 1
    23d6:	8c 93       	st	X, r24
    23d8:	a4 85       	ldd	r26, Z+12	; 0x0c
    23da:	b5 85       	ldd	r27, Z+13	; 0x0d
    23dc:	c6 81       	ldd	r28, Z+6	; 0x06
    23de:	d7 81       	ldd	r29, Z+7	; 0x07
    23e0:	80 85       	ldd	r24, Z+8	; 0x08
    23e2:	91 85       	ldd	r25, Z+9	; 0x09
    23e4:	9f 83       	std	Y+7, r25	; 0x07
    23e6:	8e 83       	std	Y+6, r24	; 0x06
    23e8:	c0 85       	ldd	r28, Z+8	; 0x08
    23ea:	d1 85       	ldd	r29, Z+9	; 0x09
    23ec:	86 81       	ldd	r24, Z+6	; 0x06
    23ee:	97 81       	ldd	r25, Z+7	; 0x07
    23f0:	9d 83       	std	Y+5, r25	; 0x05
    23f2:	8c 83       	std	Y+4, r24	; 0x04
    23f4:	11 96       	adiw	r26, 0x01	; 1
    23f6:	8d 91       	ld	r24, X+
    23f8:	9c 91       	ld	r25, X
    23fa:	12 97       	sbiw	r26, 0x02	; 2
    23fc:	9f 01       	movw	r18, r30
    23fe:	2e 5f       	subi	r18, 0xFE	; 254
    2400:	3f 4f       	sbci	r19, 0xFF	; 255
    2402:	82 17       	cp	r24, r18
    2404:	93 07       	cpc	r25, r19
    2406:	31 f4       	brne	.+12     	; 0x2414 <vTaskRemoveFromUnorderedEventList+0xb2>
    2408:	80 85       	ldd	r24, Z+8	; 0x08
    240a:	91 85       	ldd	r25, Z+9	; 0x09
    240c:	12 96       	adiw	r26, 0x02	; 2
    240e:	9c 93       	st	X, r25
    2410:	8e 93       	st	-X, r24
    2412:	11 97       	sbiw	r26, 0x01	; 1
    2414:	15 86       	std	Z+13, r1	; 0x0d
    2416:	14 86       	std	Z+12, r1	; 0x0c
    2418:	8c 91       	ld	r24, X
    241a:	81 50       	subi	r24, 0x01	; 1
    241c:	8c 93       	st	X, r24
    241e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2420:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    2424:	8a 17       	cp	r24, r26
    2426:	10 f4       	brcc	.+4      	; 0x242c <vTaskRemoveFromUnorderedEventList+0xca>
    2428:	a0 93 a1 12 	sts	0x12A1, r26	; 0x8012a1 <uxTopReadyPriority>
    242c:	8b e0       	ldi	r24, 0x0B	; 11
    242e:	8a 9f       	mul	r24, r26
    2430:	d0 01       	movw	r26, r0
    2432:	11 24       	eor	r1, r1
    2434:	ad 51       	subi	r26, 0x1D	; 29
    2436:	bd 4e       	sbci	r27, 0xED	; 237
    2438:	11 96       	adiw	r26, 0x01	; 1
    243a:	0d 90       	ld	r0, X+
    243c:	bc 91       	ld	r27, X
    243e:	a0 2d       	mov	r26, r0
    2440:	b7 83       	std	Z+7, r27	; 0x07
    2442:	a6 83       	std	Z+6, r26	; 0x06
    2444:	16 96       	adiw	r26, 0x06	; 6
    2446:	4d 91       	ld	r20, X+
    2448:	5c 91       	ld	r21, X
    244a:	17 97       	sbiw	r26, 0x07	; 7
    244c:	51 87       	std	Z+9, r21	; 0x09
    244e:	40 87       	std	Z+8, r20	; 0x08
    2450:	16 96       	adiw	r26, 0x06	; 6
    2452:	cd 91       	ld	r28, X+
    2454:	dc 91       	ld	r29, X
    2456:	17 97       	sbiw	r26, 0x07	; 7
    2458:	3d 83       	std	Y+5, r19	; 0x05
    245a:	2c 83       	std	Y+4, r18	; 0x04
    245c:	17 96       	adiw	r26, 0x07	; 7
    245e:	3c 93       	st	X, r19
    2460:	2e 93       	st	-X, r18
    2462:	16 97       	sbiw	r26, 0x06	; 6
    2464:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2466:	8a 9f       	mul	r24, r26
    2468:	d0 01       	movw	r26, r0
    246a:	11 24       	eor	r1, r1
    246c:	ad 51       	subi	r26, 0x1D	; 29
    246e:	bd 4e       	sbci	r27, 0xED	; 237
    2470:	b5 87       	std	Z+13, r27	; 0x0d
    2472:	a4 87       	std	Z+12, r26	; 0x0c
    2474:	8c 91       	ld	r24, X
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	8c 93       	st	X, r24
    247a:	92 8d       	ldd	r25, Z+26	; 0x1a
    247c:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    2480:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2484:	82 8d       	ldd	r24, Z+26	; 0x1a
    2486:	89 17       	cp	r24, r25
    2488:	18 f4       	brcc	.+6      	; 0x2490 <vTaskRemoveFromUnorderedEventList+0x12e>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <vTaskInternalSetTimeOutState>:
    2496:	20 91 9a 12 	lds	r18, 0x129A	; 0x80129a <xNumOfOverflows>
    249a:	fc 01       	movw	r30, r24
    249c:	20 83       	st	Z, r18
    249e:	40 91 a2 12 	lds	r20, 0x12A2	; 0x8012a2 <xTickCount>
    24a2:	50 91 a3 12 	lds	r21, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    24a6:	60 91 a4 12 	lds	r22, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    24aa:	70 91 a5 12 	lds	r23, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    24ae:	41 83       	std	Z+1, r20	; 0x01
    24b0:	52 83       	std	Z+2, r21	; 0x02
    24b2:	63 83       	std	Z+3, r22	; 0x03
    24b4:	74 83       	std	Z+4, r23	; 0x04
    24b6:	08 95       	ret

000024b8 <xTaskCheckForTimeOut>:
    24b8:	8f 92       	push	r8
    24ba:	9f 92       	push	r9
    24bc:	af 92       	push	r10
    24be:	bf 92       	push	r11
    24c0:	cf 92       	push	r12
    24c2:	df 92       	push	r13
    24c4:	ef 92       	push	r14
    24c6:	ff 92       	push	r15
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	fb 01       	movw	r30, r22
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	0f 92       	push	r0
    24d8:	c0 90 a2 12 	lds	r12, 0x12A2	; 0x8012a2 <xTickCount>
    24dc:	d0 90 a3 12 	lds	r13, 0x12A3	; 0x8012a3 <xTickCount+0x1>
    24e0:	e0 90 a4 12 	lds	r14, 0x12A4	; 0x8012a4 <xTickCount+0x2>
    24e4:	f0 90 a5 12 	lds	r15, 0x12A5	; 0x8012a5 <xTickCount+0x3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	11 96       	adiw	r26, 0x01	; 1
    24ec:	0d 91       	ld	r16, X+
    24ee:	1d 91       	ld	r17, X+
    24f0:	2d 91       	ld	r18, X+
    24f2:	3c 91       	ld	r19, X
    24f4:	14 97       	sbiw	r26, 0x04	; 4
    24f6:	46 01       	movw	r8, r12
    24f8:	57 01       	movw	r10, r14
    24fa:	80 1a       	sub	r8, r16
    24fc:	91 0a       	sbc	r9, r17
    24fe:	a2 0a       	sbc	r10, r18
    2500:	b3 0a       	sbc	r11, r19
    2502:	40 81       	ld	r20, Z
    2504:	51 81       	ldd	r21, Z+1	; 0x01
    2506:	62 81       	ldd	r22, Z+2	; 0x02
    2508:	73 81       	ldd	r23, Z+3	; 0x03
    250a:	4f 3f       	cpi	r20, 0xFF	; 255
    250c:	bf ef       	ldi	r27, 0xFF	; 255
    250e:	5b 07       	cpc	r21, r27
    2510:	6b 07       	cpc	r22, r27
    2512:	7b 07       	cpc	r23, r27
    2514:	39 f1       	breq	.+78     	; 0x2564 <xTaskCheckForTimeOut+0xac>
    2516:	ec 01       	movw	r28, r24
    2518:	b8 81       	ld	r27, Y
    251a:	a0 91 9a 12 	lds	r26, 0x129A	; 0x80129a <xNumOfOverflows>
    251e:	ba 17       	cp	r27, r26
    2520:	59 f0       	breq	.+22     	; 0x2538 <xTaskCheckForTimeOut+0x80>
    2522:	c0 16       	cp	r12, r16
    2524:	d1 06       	cpc	r13, r17
    2526:	e2 06       	cpc	r14, r18
    2528:	f3 06       	cpc	r15, r19
    252a:	30 f0       	brcs	.+12     	; 0x2538 <xTaskCheckForTimeOut+0x80>
    252c:	10 82       	st	Z, r1
    252e:	11 82       	std	Z+1, r1	; 0x01
    2530:	12 82       	std	Z+2, r1	; 0x02
    2532:	13 82       	std	Z+3, r1	; 0x03
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	17 c0       	rjmp	.+46     	; 0x2566 <xTaskCheckForTimeOut+0xae>
    2538:	84 16       	cp	r8, r20
    253a:	95 06       	cpc	r9, r21
    253c:	a6 06       	cpc	r10, r22
    253e:	b7 06       	cpc	r11, r23
    2540:	58 f4       	brcc	.+22     	; 0x2558 <xTaskCheckForTimeOut+0xa0>
    2542:	48 19       	sub	r20, r8
    2544:	59 09       	sbc	r21, r9
    2546:	6a 09       	sbc	r22, r10
    2548:	7b 09       	sbc	r23, r11
    254a:	40 83       	st	Z, r20
    254c:	51 83       	std	Z+1, r21	; 0x01
    254e:	62 83       	std	Z+2, r22	; 0x02
    2550:	73 83       	std	Z+3, r23	; 0x03
    2552:	a1 df       	rcall	.-190    	; 0x2496 <vTaskInternalSetTimeOutState>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	07 c0       	rjmp	.+14     	; 0x2566 <xTaskCheckForTimeOut+0xae>
    2558:	10 82       	st	Z, r1
    255a:	11 82       	std	Z+1, r1	; 0x01
    255c:	12 82       	std	Z+2, r1	; 0x02
    255e:	13 82       	std	Z+3, r1	; 0x03
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	01 c0       	rjmp	.+2      	; 0x2566 <xTaskCheckForTimeOut+0xae>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	0f 90       	pop	r0
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	ff 90       	pop	r15
    2574:	ef 90       	pop	r14
    2576:	df 90       	pop	r13
    2578:	cf 90       	pop	r12
    257a:	bf 90       	pop	r11
    257c:	af 90       	pop	r10
    257e:	9f 90       	pop	r9
    2580:	8f 90       	pop	r8
    2582:	08 95       	ret

00002584 <vTaskMissedYield>:
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	80 93 9b 12 	sts	0x129B, r24	; 0x80129b <xYieldPending>
    258a:	08 95       	ret

0000258c <xTaskGetSchedulerState>:
    258c:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <xSchedulerRunning>
    2590:	88 23       	and	r24, r24
    2592:	31 f0       	breq	.+12     	; 0x25a0 <xTaskGetSchedulerState+0x14>
    2594:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxSchedulerSuspended>
    2598:	81 11       	cpse	r24, r1
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <xTaskGetSchedulerState+0x18>
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	08 95       	ret
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	08 95       	ret
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	08 95       	ret

000025a8 <xTaskPriorityDisinherit>:
    25a8:	0f 93       	push	r16
    25aa:	1f 93       	push	r17
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	fc 01       	movw	r30, r24
    25b2:	89 2b       	or	r24, r25
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <xTaskPriorityDisinherit+0x10>
    25b6:	49 c0       	rjmp	.+146    	; 0x264a <xTaskPriorityDisinherit+0xa2>
    25b8:	86 a5       	ldd	r24, Z+46	; 0x2e
    25ba:	81 50       	subi	r24, 0x01	; 1
    25bc:	86 a7       	std	Z+46, r24	; 0x2e
    25be:	22 8d       	ldd	r18, Z+26	; 0x1a
    25c0:	95 a5       	ldd	r25, Z+45	; 0x2d
    25c2:	29 17       	cp	r18, r25
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <xTaskPriorityDisinherit+0x20>
    25c6:	43 c0       	rjmp	.+134    	; 0x264e <xTaskPriorityDisinherit+0xa6>
    25c8:	81 11       	cpse	r24, r1
    25ca:	43 c0       	rjmp	.+134    	; 0x2652 <xTaskPriorityDisinherit+0xaa>
    25cc:	ef 01       	movw	r28, r30
    25ce:	8f 01       	movw	r16, r30
    25d0:	0e 5f       	subi	r16, 0xFE	; 254
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	c8 01       	movw	r24, r16
    25d6:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
    25da:	ed a5       	ldd	r30, Y+45	; 0x2d
    25dc:	ea 8f       	std	Y+26, r30	; 0x1a
    25de:	8a e0       	ldi	r24, 0x0A	; 10
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a0 e0       	ldi	r26, 0x00	; 0
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	8e 1b       	sub	r24, r30
    25e8:	91 09       	sbc	r25, r1
    25ea:	a1 09       	sbc	r26, r1
    25ec:	b1 09       	sbc	r27, r1
    25ee:	8e 87       	std	Y+14, r24	; 0x0e
    25f0:	9f 87       	std	Y+15, r25	; 0x0f
    25f2:	a8 8b       	std	Y+16, r26	; 0x10
    25f4:	b9 8b       	std	Y+17, r27	; 0x11
    25f6:	80 91 a1 12 	lds	r24, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    25fa:	8e 17       	cp	r24, r30
    25fc:	10 f4       	brcc	.+4      	; 0x2602 <xTaskPriorityDisinherit+0x5a>
    25fe:	e0 93 a1 12 	sts	0x12A1, r30	; 0x8012a1 <uxTopReadyPriority>
    2602:	8b e0       	ldi	r24, 0x0B	; 11
    2604:	8e 9f       	mul	r24, r30
    2606:	f0 01       	movw	r30, r0
    2608:	11 24       	eor	r1, r1
    260a:	ed 51       	subi	r30, 0x1D	; 29
    260c:	fd 4e       	sbci	r31, 0xED	; 237
    260e:	01 80       	ldd	r0, Z+1	; 0x01
    2610:	f2 81       	ldd	r31, Z+2	; 0x02
    2612:	e0 2d       	mov	r30, r0
    2614:	ff 83       	std	Y+7, r31	; 0x07
    2616:	ee 83       	std	Y+6, r30	; 0x06
    2618:	26 81       	ldd	r18, Z+6	; 0x06
    261a:	37 81       	ldd	r19, Z+7	; 0x07
    261c:	39 87       	std	Y+9, r19	; 0x09
    261e:	28 87       	std	Y+8, r18	; 0x08
    2620:	a6 81       	ldd	r26, Z+6	; 0x06
    2622:	b7 81       	ldd	r27, Z+7	; 0x07
    2624:	15 96       	adiw	r26, 0x05	; 5
    2626:	1c 93       	st	X, r17
    2628:	0e 93       	st	-X, r16
    262a:	14 97       	sbiw	r26, 0x04	; 4
    262c:	17 83       	std	Z+7, r17	; 0x07
    262e:	06 83       	std	Z+6, r16	; 0x06
    2630:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2632:	8e 9f       	mul	r24, r30
    2634:	f0 01       	movw	r30, r0
    2636:	11 24       	eor	r1, r1
    2638:	ed 51       	subi	r30, 0x1D	; 29
    263a:	fd 4e       	sbci	r31, 0xED	; 237
    263c:	fd 87       	std	Y+13, r31	; 0x0d
    263e:	ec 87       	std	Y+12, r30	; 0x0c
    2640:	80 81       	ld	r24, Z
    2642:	8f 5f       	subi	r24, 0xFF	; 255
    2644:	80 83       	st	Z, r24
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	05 c0       	rjmp	.+10     	; 0x2654 <xTaskPriorityDisinherit+0xac>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	03 c0       	rjmp	.+6      	; 0x2654 <xTaskPriorityDisinherit+0xac>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	01 c0       	rjmp	.+2      	; 0x2654 <xTaskPriorityDisinherit+0xac>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	08 95       	ret

0000265e <uxTaskResetEventItemValue>:
    265e:	cf 92       	push	r12
    2660:	df 92       	push	r13
    2662:	ef 92       	push	r14
    2664:	ff 92       	push	r15
    2666:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    266a:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    266e:	66 85       	ldd	r22, Z+14	; 0x0e
    2670:	77 85       	ldd	r23, Z+15	; 0x0f
    2672:	80 89       	ldd	r24, Z+16	; 0x10
    2674:	91 89       	ldd	r25, Z+17	; 0x11
    2676:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    267a:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    267e:	a0 91 51 13 	lds	r26, 0x1351	; 0x801351 <pxCurrentTCB>
    2682:	b0 91 52 13 	lds	r27, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    2686:	5a 96       	adiw	r26, 0x1a	; 26
    2688:	2c 91       	ld	r18, X
    268a:	0f 2e       	mov	r0, r31
    268c:	fa e0       	ldi	r31, 0x0A	; 10
    268e:	cf 2e       	mov	r12, r31
    2690:	d1 2c       	mov	r13, r1
    2692:	e1 2c       	mov	r14, r1
    2694:	f1 2c       	mov	r15, r1
    2696:	f0 2d       	mov	r31, r0
    2698:	c2 1a       	sub	r12, r18
    269a:	d1 08       	sbc	r13, r1
    269c:	e1 08       	sbc	r14, r1
    269e:	f1 08       	sbc	r15, r1
    26a0:	c6 86       	std	Z+14, r12	; 0x0e
    26a2:	d7 86       	std	Z+15, r13	; 0x0f
    26a4:	e0 8a       	std	Z+16, r14	; 0x10
    26a6:	f1 8a       	std	Z+17, r15	; 0x11
    26a8:	ff 90       	pop	r15
    26aa:	ef 90       	pop	r14
    26ac:	df 90       	pop	r13
    26ae:	cf 90       	pop	r12
    26b0:	08 95       	ret

000026b2 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    26b2:	8f 92       	push	r8
    26b4:	9f 92       	push	r9
    26b6:	af 92       	push	r10
    26b8:	bf 92       	push	r11
    26ba:	cf 92       	push	r12
    26bc:	df 92       	push	r13
    26be:	ef 92       	push	r14
    26c0:	ff 92       	push	r15
    26c2:	0f 93       	push	r16
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	dc 01       	movw	r26, r24

        pxTCB = ( TCB_t * ) xTaskToNotify;

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
        {
            if( pulPreviousNotificationValue != NULL )
    26ca:	e1 14       	cp	r14, r1
    26cc:	f1 04       	cpc	r15, r1
    26ce:	89 f0       	breq	.+34     	; 0x26f2 <xTaskGenericNotifyFromISR+0x40>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    26d0:	e6 2f       	mov	r30, r22
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	ee 0f       	add	r30, r30
    26d6:	ff 1f       	adc	r31, r31
    26d8:	ee 0f       	add	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	e8 0f       	add	r30, r24
    26de:	f9 1f       	adc	r31, r25
    26e0:	87 a4       	ldd	r8, Z+47	; 0x2f
    26e2:	90 a8       	ldd	r9, Z+48	; 0x30
    26e4:	a1 a8       	ldd	r10, Z+49	; 0x31
    26e6:	b2 a8       	ldd	r11, Z+50	; 0x32
    26e8:	f7 01       	movw	r30, r14
    26ea:	80 82       	st	Z, r8
    26ec:	91 82       	std	Z+1, r9	; 0x01
    26ee:	a2 82       	std	Z+2, r10	; 0x02
    26f0:	b3 82       	std	Z+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	fd 01       	movw	r30, r26
    26f6:	e6 0f       	add	r30, r22
    26f8:	f7 1f       	adc	r31, r23
    26fa:	93 a9       	ldd	r25, Z+51	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	83 ab       	std	Z+51, r24	; 0x33

            switch( eAction )
    2700:	02 30       	cpi	r16, 0x02	; 2
    2702:	01 f1       	breq	.+64     	; 0x2744 <xTaskGenericNotifyFromISR+0x92>
    2704:	18 f4       	brcc	.+6      	; 0x270c <xTaskGenericNotifyFromISR+0x5a>
    2706:	01 30       	cpi	r16, 0x01	; 1
    2708:	31 f0       	breq	.+12     	; 0x2716 <xTaskGenericNotifyFromISR+0x64>
    270a:	4d c0       	rjmp	.+154    	; 0x27a6 <xTaskGenericNotifyFromISR+0xf4>
    270c:	03 30       	cpi	r16, 0x03	; 3
    270e:	79 f1       	breq	.+94     	; 0x276e <xTaskGenericNotifyFromISR+0xbc>
    2710:	04 30       	cpi	r16, 0x04	; 4
    2712:	d1 f1       	breq	.+116    	; 0x2788 <xTaskGenericNotifyFromISR+0xd6>
    2714:	48 c0       	rjmp	.+144    	; 0x27a6 <xTaskGenericNotifyFromISR+0xf4>
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    2716:	66 0f       	add	r22, r22
    2718:	77 1f       	adc	r23, r23
    271a:	66 0f       	add	r22, r22
    271c:	77 1f       	adc	r23, r23
    271e:	fd 01       	movw	r30, r26
    2720:	e6 0f       	add	r30, r22
    2722:	f7 1f       	adc	r31, r23
    2724:	87 a4       	ldd	r8, Z+47	; 0x2f
    2726:	90 a8       	ldd	r9, Z+48	; 0x30
    2728:	a1 a8       	ldd	r10, Z+49	; 0x31
    272a:	b2 a8       	ldd	r11, Z+50	; 0x32
    272c:	ba 01       	movw	r22, r20
    272e:	a9 01       	movw	r20, r18
    2730:	48 29       	or	r20, r8
    2732:	59 29       	or	r21, r9
    2734:	6a 29       	or	r22, r10
    2736:	7b 29       	or	r23, r11
    2738:	47 a7       	std	Z+47, r20	; 0x2f
    273a:	50 ab       	std	Z+48, r21	; 0x30
    273c:	61 ab       	std	Z+49, r22	; 0x31
    273e:	72 ab       	std	Z+50, r23	; 0x32
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
    2740:	81 e0       	ldi	r24, 0x01	; 1

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
                    break;
    2742:	34 c0       	rjmp	.+104    	; 0x27ac <xTaskGenericNotifyFromISR+0xfa>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    2744:	66 0f       	add	r22, r22
    2746:	77 1f       	adc	r23, r23
    2748:	66 0f       	add	r22, r22
    274a:	77 1f       	adc	r23, r23
    274c:	fd 01       	movw	r30, r26
    274e:	e6 0f       	add	r30, r22
    2750:	f7 1f       	adc	r31, r23
    2752:	47 a5       	ldd	r20, Z+47	; 0x2f
    2754:	50 a9       	ldd	r21, Z+48	; 0x30
    2756:	61 a9       	ldd	r22, Z+49	; 0x31
    2758:	72 a9       	ldd	r23, Z+50	; 0x32
    275a:	4f 5f       	subi	r20, 0xFF	; 255
    275c:	5f 4f       	sbci	r21, 0xFF	; 255
    275e:	6f 4f       	sbci	r22, 0xFF	; 255
    2760:	7f 4f       	sbci	r23, 0xFF	; 255
    2762:	47 a7       	std	Z+47, r20	; 0x2f
    2764:	50 ab       	std	Z+48, r21	; 0x30
    2766:	61 ab       	std	Z+49, r22	; 0x31
    2768:	72 ab       	std	Z+50, r23	; 0x32
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
    276a:	81 e0       	ldi	r24, 0x01	; 1
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
                    break;

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
                    break;
    276c:	1f c0       	rjmp	.+62     	; 0x27ac <xTaskGenericNotifyFromISR+0xfa>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    276e:	66 0f       	add	r22, r22
    2770:	77 1f       	adc	r23, r23
    2772:	66 0f       	add	r22, r22
    2774:	77 1f       	adc	r23, r23
    2776:	fd 01       	movw	r30, r26
    2778:	e6 0f       	add	r30, r22
    277a:	f7 1f       	adc	r31, r23
    277c:	27 a7       	std	Z+47, r18	; 0x2f
    277e:	30 ab       	std	Z+48, r19	; 0x30
    2780:	41 ab       	std	Z+49, r20	; 0x31
    2782:	52 ab       	std	Z+50, r21	; 0x32
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
    2784:	81 e0       	ldi	r24, 0x01	; 1
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
                    break;

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;
    2786:	12 c0       	rjmp	.+36     	; 0x27ac <xTaskGenericNotifyFromISR+0xfa>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    2788:	92 30       	cpi	r25, 0x02	; 2
    278a:	79 f0       	breq	.+30     	; 0x27aa <xTaskGenericNotifyFromISR+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    278c:	66 0f       	add	r22, r22
    278e:	77 1f       	adc	r23, r23
    2790:	66 0f       	add	r22, r22
    2792:	77 1f       	adc	r23, r23
    2794:	fd 01       	movw	r30, r26
    2796:	e6 0f       	add	r30, r22
    2798:	f7 1f       	adc	r31, r23
    279a:	27 a7       	std	Z+47, r18	; 0x2f
    279c:	30 ab       	std	Z+48, r19	; 0x30
    279e:	41 ab       	std	Z+49, r20	; 0x31
    27a0:	52 ab       	std	Z+50, r21	; 0x32
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	03 c0       	rjmp	.+6      	; 0x27ac <xTaskGenericNotifyFromISR+0xfa>
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <xTaskGenericNotifyFromISR+0xfa>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    27aa:	80 e0       	ldi	r24, 0x00	; 0

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    27ac:	91 30       	cpi	r25, 0x01	; 1
    27ae:	09 f0       	breq	.+2      	; 0x27b2 <xTaskGenericNotifyFromISR+0x100>
    27b0:	96 c0       	rjmp	.+300    	; 0x28de <xTaskGenericNotifyFromISR+0x22c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    27b2:	90 91 92 12 	lds	r25, 0x1292	; 0x801292 <uxSchedulerSuspended>
    27b6:	91 11       	cpse	r25, r1
    27b8:	5f c0       	rjmp	.+190    	; 0x2878 <xTaskGenericNotifyFromISR+0x1c6>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    27ba:	1c 96       	adiw	r26, 0x0c	; 12
    27bc:	ed 91       	ld	r30, X+
    27be:	fc 91       	ld	r31, X
    27c0:	1d 97       	sbiw	r26, 0x0d	; 13
    27c2:	16 96       	adiw	r26, 0x06	; 6
    27c4:	cd 91       	ld	r28, X+
    27c6:	dc 91       	ld	r29, X
    27c8:	17 97       	sbiw	r26, 0x07	; 7
    27ca:	18 96       	adiw	r26, 0x08	; 8
    27cc:	2d 91       	ld	r18, X+
    27ce:	3c 91       	ld	r19, X
    27d0:	19 97       	sbiw	r26, 0x09	; 9
    27d2:	3f 83       	std	Y+7, r19	; 0x07
    27d4:	2e 83       	std	Y+6, r18	; 0x06
    27d6:	18 96       	adiw	r26, 0x08	; 8
    27d8:	cd 91       	ld	r28, X+
    27da:	dc 91       	ld	r29, X
    27dc:	19 97       	sbiw	r26, 0x09	; 9
    27de:	16 96       	adiw	r26, 0x06	; 6
    27e0:	2d 91       	ld	r18, X+
    27e2:	3c 91       	ld	r19, X
    27e4:	17 97       	sbiw	r26, 0x07	; 7
    27e6:	3d 83       	std	Y+5, r19	; 0x05
    27e8:	2c 83       	std	Y+4, r18	; 0x04
    27ea:	41 81       	ldd	r20, Z+1	; 0x01
    27ec:	52 81       	ldd	r21, Z+2	; 0x02
    27ee:	9d 01       	movw	r18, r26
    27f0:	2e 5f       	subi	r18, 0xFE	; 254
    27f2:	3f 4f       	sbci	r19, 0xFF	; 255
    27f4:	42 17       	cp	r20, r18
    27f6:	53 07       	cpc	r21, r19
    27f8:	31 f4       	brne	.+12     	; 0x2806 <xTaskGenericNotifyFromISR+0x154>
    27fa:	18 96       	adiw	r26, 0x08	; 8
    27fc:	4d 91       	ld	r20, X+
    27fe:	5c 91       	ld	r21, X
    2800:	19 97       	sbiw	r26, 0x09	; 9
    2802:	52 83       	std	Z+2, r21	; 0x02
    2804:	41 83       	std	Z+1, r20	; 0x01
    2806:	1d 96       	adiw	r26, 0x0d	; 13
    2808:	1c 92       	st	X, r1
    280a:	1e 92       	st	-X, r1
    280c:	1c 97       	sbiw	r26, 0x0c	; 12
    280e:	90 81       	ld	r25, Z
    2810:	91 50       	subi	r25, 0x01	; 1
    2812:	90 83       	st	Z, r25
                    prvAddTaskToReadyList( pxTCB );
    2814:	5a 96       	adiw	r26, 0x1a	; 26
    2816:	ec 91       	ld	r30, X
    2818:	5a 97       	sbiw	r26, 0x1a	; 26
    281a:	90 91 a1 12 	lds	r25, 0x12A1	; 0x8012a1 <uxTopReadyPriority>
    281e:	9e 17       	cp	r25, r30
    2820:	10 f4       	brcc	.+4      	; 0x2826 <xTaskGenericNotifyFromISR+0x174>
    2822:	e0 93 a1 12 	sts	0x12A1, r30	; 0x8012a1 <uxTopReadyPriority>
    2826:	9b e0       	ldi	r25, 0x0B	; 11
    2828:	9e 9f       	mul	r25, r30
    282a:	f0 01       	movw	r30, r0
    282c:	11 24       	eor	r1, r1
    282e:	ed 51       	subi	r30, 0x1D	; 29
    2830:	fd 4e       	sbci	r31, 0xED	; 237
    2832:	01 80       	ldd	r0, Z+1	; 0x01
    2834:	f2 81       	ldd	r31, Z+2	; 0x02
    2836:	e0 2d       	mov	r30, r0
    2838:	17 96       	adiw	r26, 0x07	; 7
    283a:	fc 93       	st	X, r31
    283c:	ee 93       	st	-X, r30
    283e:	16 97       	sbiw	r26, 0x06	; 6
    2840:	46 81       	ldd	r20, Z+6	; 0x06
    2842:	57 81       	ldd	r21, Z+7	; 0x07
    2844:	19 96       	adiw	r26, 0x09	; 9
    2846:	5c 93       	st	X, r21
    2848:	4e 93       	st	-X, r20
    284a:	18 97       	sbiw	r26, 0x08	; 8
    284c:	c6 81       	ldd	r28, Z+6	; 0x06
    284e:	d7 81       	ldd	r29, Z+7	; 0x07
    2850:	3d 83       	std	Y+5, r19	; 0x05
    2852:	2c 83       	std	Y+4, r18	; 0x04
    2854:	37 83       	std	Z+7, r19	; 0x07
    2856:	26 83       	std	Z+6, r18	; 0x06
    2858:	5a 96       	adiw	r26, 0x1a	; 26
    285a:	ec 91       	ld	r30, X
    285c:	5a 97       	sbiw	r26, 0x1a	; 26
    285e:	9e 9f       	mul	r25, r30
    2860:	f0 01       	movw	r30, r0
    2862:	11 24       	eor	r1, r1
    2864:	ed 51       	subi	r30, 0x1D	; 29
    2866:	fd 4e       	sbci	r31, 0xED	; 237
    2868:	1d 96       	adiw	r26, 0x0d	; 13
    286a:	fc 93       	st	X, r31
    286c:	ee 93       	st	-X, r30
    286e:	1c 97       	sbiw	r26, 0x0c	; 12
    2870:	90 81       	ld	r25, Z
    2872:	9f 5f       	subi	r25, 0xFF	; 255
    2874:	90 83       	st	Z, r25
    2876:	21 c0       	rjmp	.+66     	; 0x28ba <xTaskGenericNotifyFromISR+0x208>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2878:	6e eb       	ldi	r22, 0xBE	; 190
    287a:	72 e1       	ldi	r23, 0x12	; 18
    287c:	fb 01       	movw	r30, r22
    287e:	c1 81       	ldd	r28, Z+1	; 0x01
    2880:	d2 81       	ldd	r29, Z+2	; 0x02
    2882:	53 96       	adiw	r26, 0x13	; 19
    2884:	dc 93       	st	X, r29
    2886:	ce 93       	st	-X, r28
    2888:	52 97       	sbiw	r26, 0x12	; 18
    288a:	2e 81       	ldd	r18, Y+6	; 0x06
    288c:	3f 81       	ldd	r19, Y+7	; 0x07
    288e:	55 96       	adiw	r26, 0x15	; 21
    2890:	3c 93       	st	X, r19
    2892:	2e 93       	st	-X, r18
    2894:	54 97       	sbiw	r26, 0x14	; 20
    2896:	4e 81       	ldd	r20, Y+6	; 0x06
    2898:	5f 81       	ldd	r21, Y+7	; 0x07
    289a:	9d 01       	movw	r18, r26
    289c:	22 5f       	subi	r18, 0xF2	; 242
    289e:	3f 4f       	sbci	r19, 0xFF	; 255
    28a0:	fa 01       	movw	r30, r20
    28a2:	35 83       	std	Z+5, r19	; 0x05
    28a4:	24 83       	std	Z+4, r18	; 0x04
    28a6:	3f 83       	std	Y+7, r19	; 0x07
    28a8:	2e 83       	std	Y+6, r18	; 0x06
    28aa:	59 96       	adiw	r26, 0x19	; 25
    28ac:	7c 93       	st	X, r23
    28ae:	6e 93       	st	-X, r22
    28b0:	58 97       	sbiw	r26, 0x18	; 24
    28b2:	fb 01       	movw	r30, r22
    28b4:	90 81       	ld	r25, Z
    28b6:	9f 5f       	subi	r25, 0xFF	; 255
    28b8:	90 83       	st	Z, r25
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    28ba:	5a 96       	adiw	r26, 0x1a	; 26
    28bc:	2c 91       	ld	r18, X
    28be:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <pxCurrentTCB>
    28c2:	f0 91 52 13 	lds	r31, 0x1352	; 0x801352 <pxCurrentTCB+0x1>
    28c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    28c8:	92 17       	cp	r25, r18
    28ca:	48 f4       	brcc	.+18     	; 0x28de <xTaskGenericNotifyFromISR+0x22c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
    28cc:	c1 14       	cp	r12, r1
    28ce:	d1 04       	cpc	r13, r1
    28d0:	19 f0       	breq	.+6      	; 0x28d8 <xTaskGenericNotifyFromISR+0x226>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
    28d2:	91 e0       	ldi	r25, 0x01	; 1
    28d4:	f6 01       	movw	r30, r12
    28d6:	90 83       	st	Z, r25
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
    28d8:	91 e0       	ldi	r25, 0x01	; 1
    28da:	90 93 9b 12 	sts	0x129B, r25	; 0x80129b <xYieldPending>
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
    }
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	df 90       	pop	r13
    28ea:	cf 90       	pop	r12
    28ec:	bf 90       	pop	r11
    28ee:	af 90       	pop	r10
    28f0:	9f 90       	pop	r9
    28f2:	8f 90       	pop	r8
    28f4:	08 95       	ret

000028f6 <prvGetNextExpireTime>:
    28f6:	dc 01       	movw	r26, r24
    28f8:	e0 91 5d 13 	lds	r30, 0x135D	; 0x80135d <pxCurrentTimerList>
    28fc:	f0 91 5e 13 	lds	r31, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    2900:	80 81       	ld	r24, Z
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	81 11       	cpse	r24, r1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9c 93       	st	X, r25
    290a:	91 11       	cpse	r25, r1
    290c:	08 c0       	rjmp	.+16     	; 0x291e <prvGetNextExpireTime+0x28>
    290e:	07 80       	ldd	r0, Z+7	; 0x07
    2910:	f0 85       	ldd	r31, Z+8	; 0x08
    2912:	e0 2d       	mov	r30, r0
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	08 95       	ret
    291e:	60 e0       	ldi	r22, 0x00	; 0
    2920:	70 e0       	ldi	r23, 0x00	; 0
    2922:	cb 01       	movw	r24, r22
    2924:	08 95       	ret

00002926 <prvInsertTimerInActiveList>:
    2926:	cf 92       	push	r12
    2928:	df 92       	push	r13
    292a:	ef 92       	push	r14
    292c:	ff 92       	push	r15
    292e:	0f 93       	push	r16
    2930:	1f 93       	push	r17
    2932:	fc 01       	movw	r30, r24
    2934:	42 83       	std	Z+2, r20	; 0x02
    2936:	53 83       	std	Z+3, r21	; 0x03
    2938:	64 83       	std	Z+4, r22	; 0x04
    293a:	75 83       	std	Z+5, r23	; 0x05
    293c:	93 87       	std	Z+11, r25	; 0x0b
    293e:	82 87       	std	Z+10, r24	; 0x0a
    2940:	04 17       	cp	r16, r20
    2942:	15 07       	cpc	r17, r21
    2944:	26 07       	cpc	r18, r22
    2946:	37 07       	cpc	r19, r23
    2948:	c0 f0       	brcs	.+48     	; 0x297a <prvInsertTimerInActiveList+0x54>
    294a:	0c 19       	sub	r16, r12
    294c:	1d 09       	sbc	r17, r13
    294e:	2e 09       	sbc	r18, r14
    2950:	3f 09       	sbc	r19, r15
    2952:	86 85       	ldd	r24, Z+14	; 0x0e
    2954:	97 85       	ldd	r25, Z+15	; 0x0f
    2956:	a0 89       	ldd	r26, Z+16	; 0x10
    2958:	b1 89       	ldd	r27, Z+17	; 0x11
    295a:	08 17       	cp	r16, r24
    295c:	19 07       	cpc	r17, r25
    295e:	2a 07       	cpc	r18, r26
    2960:	3b 07       	cpc	r19, r27
    2962:	00 f5       	brcc	.+64     	; 0x29a4 <prvInsertTimerInActiveList+0x7e>
    2964:	bf 01       	movw	r22, r30
    2966:	6e 5f       	subi	r22, 0xFE	; 254
    2968:	7f 4f       	sbci	r23, 0xFF	; 255
    296a:	80 91 5b 13 	lds	r24, 0x135B	; 0x80135b <pxOverflowTimerList>
    296e:	90 91 5c 13 	lds	r25, 0x135C	; 0x80135c <pxOverflowTimerList+0x1>
    2972:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	18 c0       	rjmp	.+48     	; 0x29aa <prvInsertTimerInActiveList+0x84>
    297a:	0c 15       	cp	r16, r12
    297c:	1d 05       	cpc	r17, r13
    297e:	2e 05       	cpc	r18, r14
    2980:	3f 05       	cpc	r19, r15
    2982:	28 f4       	brcc	.+10     	; 0x298e <prvInsertTimerInActiveList+0x68>
    2984:	4c 15       	cp	r20, r12
    2986:	5d 05       	cpc	r21, r13
    2988:	6e 05       	cpc	r22, r14
    298a:	7f 05       	cpc	r23, r15
    298c:	68 f4       	brcc	.+26     	; 0x29a8 <prvInsertTimerInActiveList+0x82>
    298e:	bf 01       	movw	r22, r30
    2990:	6e 5f       	subi	r22, 0xFE	; 254
    2992:	7f 4f       	sbci	r23, 0xFF	; 255
    2994:	80 91 5d 13 	lds	r24, 0x135D	; 0x80135d <pxCurrentTimerList>
    2998:	90 91 5e 13 	lds	r25, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    299c:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <prvInsertTimerInActiveList+0x84>
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	01 c0       	rjmp	.+2      	; 0x29aa <prvInsertTimerInActiveList+0x84>
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	1f 91       	pop	r17
    29ac:	0f 91       	pop	r16
    29ae:	ff 90       	pop	r15
    29b0:	ef 90       	pop	r14
    29b2:	df 90       	pop	r13
    29b4:	cf 90       	pop	r12
    29b6:	08 95       	ret

000029b8 <prvCheckForValidListAndQueue>:
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	0f 92       	push	r0
    29be:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    29c2:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    29c6:	89 2b       	or	r24, r25
    29c8:	e9 f4       	brne	.+58     	; 0x2a04 <prvCheckForValidListAndQueue+0x4c>
    29ca:	8a e6       	ldi	r24, 0x6A	; 106
    29cc:	93 e1       	ldi	r25, 0x13	; 19
    29ce:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    29d2:	8f e5       	ldi	r24, 0x5F	; 95
    29d4:	93 e1       	ldi	r25, 0x13	; 19
    29d6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <vListInitialise>
    29da:	8a e6       	ldi	r24, 0x6A	; 106
    29dc:	93 e1       	ldi	r25, 0x13	; 19
    29de:	90 93 5e 13 	sts	0x135E, r25	; 0x80135e <pxCurrentTimerList+0x1>
    29e2:	80 93 5d 13 	sts	0x135D, r24	; 0x80135d <pxCurrentTimerList>
    29e6:	8f e5       	ldi	r24, 0x5F	; 95
    29e8:	93 e1       	ldi	r25, 0x13	; 19
    29ea:	90 93 5c 13 	sts	0x135C, r25	; 0x80135c <pxOverflowTimerList+0x1>
    29ee:	80 93 5b 13 	sts	0x135B, r24	; 0x80135b <pxOverflowTimerList>
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	67 e0       	ldi	r22, 0x07	; 7
    29f6:	8a e0       	ldi	r24, 0x0A	; 10
    29f8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <xQueueGenericCreate>
    29fc:	90 93 5a 13 	sts	0x135A, r25	; 0x80135a <xTimerQueue+0x1>
    2a00:	80 93 59 13 	sts	0x1359, r24	; 0x801359 <xTimerQueue>
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	08 95       	ret

00002a0a <xTimerCreateTimerTask>:
    2a0a:	ef 92       	push	r14
    2a0c:	ff 92       	push	r15
    2a0e:	0f 93       	push	r16
    2a10:	d3 df       	rcall	.-90     	; 0x29b8 <prvCheckForValidListAndQueue>
    2a12:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    2a16:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2a1a:	89 2b       	or	r24, r25
    2a1c:	89 f0       	breq	.+34     	; 0x2a40 <xTimerCreateTimerTask+0x36>
    2a1e:	0f 2e       	mov	r0, r31
    2a20:	f7 e5       	ldi	r31, 0x57	; 87
    2a22:	ef 2e       	mov	r14, r31
    2a24:	f3 e1       	ldi	r31, 0x13	; 19
    2a26:	ff 2e       	mov	r15, r31
    2a28:	f0 2d       	mov	r31, r0
    2a2a:	03 e0       	ldi	r16, 0x03	; 3
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	40 ec       	ldi	r20, 0xC0	; 192
    2a32:	50 e0       	ldi	r21, 0x00	; 0
    2a34:	68 ea       	ldi	r22, 0xA8	; 168
    2a36:	74 e0       	ldi	r23, 0x04	; 4
    2a38:	88 e5       	ldi	r24, 0x58	; 88
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	24 d8       	rcall	.-4024   	; 0x1a86 <xTaskCreate>
    2a3e:	01 c0       	rjmp	.+2      	; 0x2a42 <xTimerCreateTimerTask+0x38>
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	0f 91       	pop	r16
    2a44:	ff 90       	pop	r15
    2a46:	ef 90       	pop	r14
    2a48:	08 95       	ret

00002a4a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2a4a:	8f 92       	push	r8
    2a4c:	9f 92       	push	r9
    2a4e:	af 92       	push	r10
    2a50:	bf 92       	push	r11
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	0f 93       	push	r16
    2a5c:	1f 93       	push	r17
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	27 97       	sbiw	r28, 0x07	; 7
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2a72:	e0 91 59 13 	lds	r30, 0x1359	; 0x801359 <xTimerQueue>
    2a76:	f0 91 5a 13 	lds	r31, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2a7a:	30 97       	sbiw	r30, 0x00	; 0
    2a7c:	81 f1       	breq	.+96     	; 0x2ade <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2a7e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a80:	2a 83       	std	Y+2, r18	; 0x02
    2a82:	3b 83       	std	Y+3, r19	; 0x03
    2a84:	4c 83       	std	Y+4, r20	; 0x04
    2a86:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a88:	9f 83       	std	Y+7, r25	; 0x07
    2a8a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a8c:	66 30       	cpi	r22, 0x06	; 6
    2a8e:	f4 f4       	brge	.+60     	; 0x2acc <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a90:	7d dd       	rcall	.-1286   	; 0x258c <xTaskGetSchedulerState>
    2a92:	82 30       	cpi	r24, 0x02	; 2
    2a94:	69 f4       	brne	.+26     	; 0x2ab0 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a96:	00 e0       	ldi	r16, 0x00	; 0
    2a98:	a7 01       	movw	r20, r14
    2a9a:	96 01       	movw	r18, r12
    2a9c:	be 01       	movw	r22, r28
    2a9e:	6f 5f       	subi	r22, 0xFF	; 255
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    2aa6:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2aaa:	0e 94 94 08 	call	0x1128	; 0x1128 <xQueueGenericSend>
    2aae:	18 c0       	rjmp	.+48     	; 0x2ae0 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2ab0:	00 e0       	ldi	r16, 0x00	; 0
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	a9 01       	movw	r20, r18
    2ab8:	be 01       	movw	r22, r28
    2aba:	6f 5f       	subi	r22, 0xFF	; 255
    2abc:	7f 4f       	sbci	r23, 0xFF	; 255
    2abe:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    2ac2:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2ac6:	0e 94 94 08 	call	0x1128	; 0x1128 <xQueueGenericSend>
    2aca:	0a c0       	rjmp	.+20     	; 0x2ae0 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	a8 01       	movw	r20, r16
    2ad0:	be 01       	movw	r22, r28
    2ad2:	6f 5f       	subi	r22, 0xFF	; 255
    2ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad6:	cf 01       	movw	r24, r30
    2ad8:	0e 94 22 09 	call	0x1244	; 0x1244 <xQueueGenericSendFromISR>
    2adc:	01 c0       	rjmp	.+2      	; 0x2ae0 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2ade:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2ae0:	27 96       	adiw	r28, 0x07	; 7
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	1f 91       	pop	r17
    2af2:	0f 91       	pop	r16
    2af4:	ff 90       	pop	r15
    2af6:	ef 90       	pop	r14
    2af8:	df 90       	pop	r13
    2afa:	cf 90       	pop	r12
    2afc:	bf 90       	pop	r11
    2afe:	af 90       	pop	r10
    2b00:	9f 90       	pop	r9
    2b02:	8f 90       	pop	r8
    2b04:	08 95       	ret

00002b06 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2b06:	8f 92       	push	r8
    2b08:	9f 92       	push	r9
    2b0a:	af 92       	push	r10
    2b0c:	bf 92       	push	r11
    2b0e:	cf 92       	push	r12
    2b10:	df 92       	push	r13
    2b12:	ef 92       	push	r14
    2b14:	ff 92       	push	r15
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b1e:	3b c0       	rjmp	.+118    	; 0x2b96 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b20:	07 80       	ldd	r0, Z+7	; 0x07
    2b22:	f0 85       	ldd	r31, Z+8	; 0x08
    2b24:	e0 2d       	mov	r30, r0
    2b26:	80 80       	ld	r8, Z
    2b28:	91 80       	ldd	r9, Z+1	; 0x01
    2b2a:	a2 80       	ldd	r10, Z+2	; 0x02
    2b2c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2b2e:	c0 85       	ldd	r28, Z+8	; 0x08
    2b30:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b32:	8e 01       	movw	r16, r28
    2b34:	0e 5f       	subi	r16, 0xFE	; 254
    2b36:	1f 4f       	sbci	r17, 0xFF	; 255
    2b38:	c8 01       	movw	r24, r16
    2b3a:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b3e:	ec 89       	ldd	r30, Y+20	; 0x14
    2b40:	fd 89       	ldd	r31, Y+21	; 0x15
    2b42:	ce 01       	movw	r24, r28
    2b44:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b46:	8e 89       	ldd	r24, Y+22	; 0x16
    2b48:	82 ff       	sbrs	r24, 2
    2b4a:	25 c0       	rjmp	.+74     	; 0x2b96 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b50:	a8 89       	ldd	r26, Y+16	; 0x10
    2b52:	b9 89       	ldd	r27, Y+17	; 0x11
    2b54:	88 0d       	add	r24, r8
    2b56:	99 1d       	adc	r25, r9
    2b58:	aa 1d       	adc	r26, r10
    2b5a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2b5c:	88 16       	cp	r8, r24
    2b5e:	99 06       	cpc	r9, r25
    2b60:	aa 06       	cpc	r10, r26
    2b62:	bb 06       	cpc	r11, r27
    2b64:	70 f4       	brcc	.+28     	; 0x2b82 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b66:	8a 83       	std	Y+2, r24	; 0x02
    2b68:	9b 83       	std	Y+3, r25	; 0x03
    2b6a:	ac 83       	std	Y+4, r26	; 0x04
    2b6c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b6e:	db 87       	std	Y+11, r29	; 0x0b
    2b70:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b72:	b8 01       	movw	r22, r16
    2b74:	80 91 5d 13 	lds	r24, 0x135D	; 0x80135d <pxCurrentTimerList>
    2b78:	90 91 5e 13 	lds	r25, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    2b7c:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInsert>
    2b80:	0a c0       	rjmp	.+20     	; 0x2b96 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b82:	c1 2c       	mov	r12, r1
    2b84:	d1 2c       	mov	r13, r1
    2b86:	76 01       	movw	r14, r12
    2b88:	00 e0       	ldi	r16, 0x00	; 0
    2b8a:	10 e0       	ldi	r17, 0x00	; 0
    2b8c:	a5 01       	movw	r20, r10
    2b8e:	94 01       	movw	r18, r8
    2b90:	60 e0       	ldi	r22, 0x00	; 0
    2b92:	ce 01       	movw	r24, r28
    2b94:	5a df       	rcall	.-332    	; 0x2a4a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b96:	e0 91 5d 13 	lds	r30, 0x135D	; 0x80135d <pxCurrentTimerList>
    2b9a:	f0 91 5e 13 	lds	r31, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    2b9e:	80 81       	ld	r24, Z
    2ba0:	81 11       	cpse	r24, r1
    2ba2:	be cf       	rjmp	.-132    	; 0x2b20 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2ba4:	80 91 5b 13 	lds	r24, 0x135B	; 0x80135b <pxOverflowTimerList>
    2ba8:	90 91 5c 13 	lds	r25, 0x135C	; 0x80135c <pxOverflowTimerList+0x1>
    2bac:	90 93 5e 13 	sts	0x135E, r25	; 0x80135e <pxCurrentTimerList+0x1>
    2bb0:	80 93 5d 13 	sts	0x135D, r24	; 0x80135d <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2bb4:	f0 93 5c 13 	sts	0x135C, r31	; 0x80135c <pxOverflowTimerList+0x1>
    2bb8:	e0 93 5b 13 	sts	0x135B, r30	; 0x80135b <pxOverflowTimerList>
    }
    2bbc:	df 91       	pop	r29
    2bbe:	cf 91       	pop	r28
    2bc0:	1f 91       	pop	r17
    2bc2:	0f 91       	pop	r16
    2bc4:	ff 90       	pop	r15
    2bc6:	ef 90       	pop	r14
    2bc8:	df 90       	pop	r13
    2bca:	cf 90       	pop	r12
    2bcc:	bf 90       	pop	r11
    2bce:	af 90       	pop	r10
    2bd0:	9f 90       	pop	r9
    2bd2:	8f 90       	pop	r8
    2bd4:	08 95       	ret

00002bd6 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2bd6:	cf 92       	push	r12
    2bd8:	df 92       	push	r13
    2bda:	ef 92       	push	r14
    2bdc:	ff 92       	push	r15
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2be4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <xTaskGetTickCount>
    2be8:	6b 01       	movw	r12, r22
    2bea:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2bec:	80 91 53 13 	lds	r24, 0x1353	; 0x801353 <xLastTime.2436>
    2bf0:	90 91 54 13 	lds	r25, 0x1354	; 0x801354 <xLastTime.2436+0x1>
    2bf4:	a0 91 55 13 	lds	r26, 0x1355	; 0x801355 <xLastTime.2436+0x2>
    2bf8:	b0 91 56 13 	lds	r27, 0x1356	; 0x801356 <xLastTime.2436+0x3>
    2bfc:	c8 16       	cp	r12, r24
    2bfe:	d9 06       	cpc	r13, r25
    2c00:	ea 06       	cpc	r14, r26
    2c02:	fb 06       	cpc	r15, r27
    2c04:	20 f4       	brcc	.+8      	; 0x2c0e <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2c06:	7f df       	rcall	.-258    	; 0x2b06 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	88 83       	st	Y, r24
    2c0c:	01 c0       	rjmp	.+2      	; 0x2c10 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2c0e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2c10:	c0 92 53 13 	sts	0x1353, r12	; 0x801353 <xLastTime.2436>
    2c14:	d0 92 54 13 	sts	0x1354, r13	; 0x801354 <xLastTime.2436+0x1>
    2c18:	e0 92 55 13 	sts	0x1355, r14	; 0x801355 <xLastTime.2436+0x2>
    2c1c:	f0 92 56 13 	sts	0x1356, r15	; 0x801356 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2c20:	c7 01       	movw	r24, r14
    2c22:	b6 01       	movw	r22, r12
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	ff 90       	pop	r15
    2c2a:	ef 90       	pop	r14
    2c2c:	df 90       	pop	r13
    2c2e:	cf 90       	pop	r12
    2c30:	08 95       	ret

00002c32 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2c32:	4f 92       	push	r4
    2c34:	5f 92       	push	r5
    2c36:	6f 92       	push	r6
    2c38:	7f 92       	push	r7
    2c3a:	8f 92       	push	r8
    2c3c:	9f 92       	push	r9
    2c3e:	af 92       	push	r10
    2c40:	bf 92       	push	r11
    2c42:	cf 92       	push	r12
    2c44:	df 92       	push	r13
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	4b 01       	movw	r8, r22
    2c54:	5c 01       	movw	r10, r24
    2c56:	29 01       	movw	r4, r18
    2c58:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c5a:	e0 91 5d 13 	lds	r30, 0x135D	; 0x80135d <pxCurrentTimerList>
    2c5e:	f0 91 5e 13 	lds	r31, 0x135E	; 0x80135e <pxCurrentTimerList+0x1>
    2c62:	07 80       	ldd	r0, Z+7	; 0x07
    2c64:	f0 85       	ldd	r31, Z+8	; 0x08
    2c66:	e0 2d       	mov	r30, r0
    2c68:	c0 85       	ldd	r28, Z+8	; 0x08
    2c6a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	02 96       	adiw	r24, 0x02	; 2
    2c70:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c74:	8e 89       	ldd	r24, Y+22	; 0x16
    2c76:	82 ff       	sbrs	r24, 2
    2c78:	1b c0       	rjmp	.+54     	; 0x2cb0 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2c7a:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c7c:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c7e:	68 89       	ldd	r22, Y+16	; 0x10
    2c80:	79 89       	ldd	r23, Y+17	; 0x11
    2c82:	48 0d       	add	r20, r8
    2c84:	59 1d       	adc	r21, r9
    2c86:	6a 1d       	adc	r22, r10
    2c88:	7b 1d       	adc	r23, r11
    2c8a:	75 01       	movw	r14, r10
    2c8c:	64 01       	movw	r12, r8
    2c8e:	93 01       	movw	r18, r6
    2c90:	82 01       	movw	r16, r4
    2c92:	ce 01       	movw	r24, r28
    2c94:	48 de       	rcall	.-880    	; 0x2926 <prvInsertTimerInActiveList>
    2c96:	88 23       	and	r24, r24
    2c98:	69 f0       	breq	.+26     	; 0x2cb4 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c9a:	c1 2c       	mov	r12, r1
    2c9c:	d1 2c       	mov	r13, r1
    2c9e:	76 01       	movw	r14, r12
    2ca0:	00 e0       	ldi	r16, 0x00	; 0
    2ca2:	10 e0       	ldi	r17, 0x00	; 0
    2ca4:	a5 01       	movw	r20, r10
    2ca6:	94 01       	movw	r18, r8
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	ce 01       	movw	r24, r28
    2cac:	ce de       	rcall	.-612    	; 0x2a4a <xTimerGenericCommand>
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2cb0:	8e 7f       	andi	r24, 0xFE	; 254
    2cb2:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cb4:	ec 89       	ldd	r30, Y+20	; 0x14
    2cb6:	fd 89       	ldd	r31, Y+21	; 0x15
    2cb8:	ce 01       	movw	r24, r28
    2cba:	19 95       	eicall
    }
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	ff 90       	pop	r15
    2cc6:	ef 90       	pop	r14
    2cc8:	df 90       	pop	r13
    2cca:	cf 90       	pop	r12
    2ccc:	bf 90       	pop	r11
    2cce:	af 90       	pop	r10
    2cd0:	9f 90       	pop	r9
    2cd2:	8f 90       	pop	r8
    2cd4:	7f 90       	pop	r7
    2cd6:	6f 90       	pop	r6
    2cd8:	5f 90       	pop	r5
    2cda:	4f 90       	pop	r4
    2cdc:	08 95       	ret

00002cde <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2cde:	8f 92       	push	r8
    2ce0:	9f 92       	push	r9
    2ce2:	af 92       	push	r10
    2ce4:	bf 92       	push	r11
    2ce6:	cf 92       	push	r12
    2ce8:	df 92       	push	r13
    2cea:	ef 92       	push	r14
    2cec:	ff 92       	push	r15
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	1f 92       	push	r1
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	6b 01       	movw	r12, r22
    2cfc:	7c 01       	movw	r14, r24
    2cfe:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2d00:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d04:	ce 01       	movw	r24, r28
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	66 df       	rcall	.-308    	; 0x2bd6 <prvSampleTimeNow>
    2d0a:	4b 01       	movw	r8, r22
    2d0c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	81 11       	cpse	r24, r1
    2d12:	2b c0       	rjmp	.+86     	; 0x2d6a <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2d14:	11 11       	cpse	r17, r1
    2d16:	0c c0       	rjmp	.+24     	; 0x2d30 <prvProcessTimerOrBlockTask+0x52>
    2d18:	8c 14       	cp	r8, r12
    2d1a:	9d 04       	cpc	r9, r13
    2d1c:	ae 04       	cpc	r10, r14
    2d1e:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2d20:	38 f0       	brcs	.+14     	; 0x2d30 <prvProcessTimerOrBlockTask+0x52>
    2d22:	72 d8       	rcall	.-3868   	; 0x1e08 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2d24:	a5 01       	movw	r20, r10
    2d26:	94 01       	movw	r18, r8
    2d28:	c7 01       	movw	r24, r14
    2d2a:	b6 01       	movw	r22, r12
    2d2c:	82 df       	rcall	.-252    	; 0x2c32 <prvProcessExpiredTimer>
    2d2e:	1e c0       	rjmp	.+60     	; 0x2d6c <prvProcessTimerOrBlockTask+0x8e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2d30:	11 23       	and	r17, r17
    2d32:	41 f0       	breq	.+16     	; 0x2d44 <prvProcessTimerOrBlockTask+0x66>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d34:	e0 91 5b 13 	lds	r30, 0x135B	; 0x80135b <pxOverflowTimerList>
    2d38:	f0 91 5c 13 	lds	r31, 0x135C	; 0x80135c <pxOverflowTimerList+0x1>
    2d3c:	80 81       	ld	r24, Z
    2d3e:	11 e0       	ldi	r17, 0x01	; 1
    2d40:	81 11       	cpse	r24, r1
    2d42:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2d44:	b7 01       	movw	r22, r14
    2d46:	a6 01       	movw	r20, r12
    2d48:	48 19       	sub	r20, r8
    2d4a:	59 09       	sbc	r21, r9
    2d4c:	6a 09       	sbc	r22, r10
    2d4e:	7b 09       	sbc	r23, r11
    2d50:	21 2f       	mov	r18, r17
    2d52:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    2d56:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2d5a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2d5e:	54 d8       	rcall	.-3928   	; 0x1e08 <xTaskResumeAll>
    2d60:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2d62:	04 c0       	rjmp	.+8      	; 0x2d6c <prvProcessTimerOrBlockTask+0x8e>
    2d64:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <prvProcessTimerOrBlockTask+0x8e>
    2d6a:	4e d8       	rcall	.-3940   	; 0x1e08 <xTaskResumeAll>
            }
        }
    }
    2d6c:	0f 90       	pop	r0
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	1f 91       	pop	r17
    2d74:	ff 90       	pop	r15
    2d76:	ef 90       	pop	r14
    2d78:	df 90       	pop	r13
    2d7a:	cf 90       	pop	r12
    2d7c:	bf 90       	pop	r11
    2d7e:	af 90       	pop	r10
    2d80:	9f 90       	pop	r9
    2d82:	8f 90       	pop	r8
    2d84:	08 95       	ret

00002d86 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2d86:	af 92       	push	r10
    2d88:	bf 92       	push	r11
    2d8a:	cf 92       	push	r12
    2d8c:	df 92       	push	r13
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	28 97       	sbiw	r28, 0x08	; 8
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2daa:	82 c0       	rjmp	.+260    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	88 23       	and	r24, r24
    2db0:	0c f4       	brge	.+2      	; 0x2db4 <prvProcessReceivedCommands+0x2e>
    2db2:	7e c0       	rjmp	.+252    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2db4:	ae 80       	ldd	r10, Y+6	; 0x06
    2db6:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2db8:	d5 01       	movw	r26, r10
    2dba:	1c 96       	adiw	r26, 0x0c	; 12
    2dbc:	8d 91       	ld	r24, X+
    2dbe:	9c 91       	ld	r25, X
    2dc0:	1d 97       	sbiw	r26, 0x0d	; 13
    2dc2:	89 2b       	or	r24, r25
    2dc4:	21 f0       	breq	.+8      	; 0x2dce <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2dc6:	c5 01       	movw	r24, r10
    2dc8:	02 96       	adiw	r24, 0x02	; 2
    2dca:	0e 94 11 06 	call	0xc22	; 0xc22 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2dce:	ce 01       	movw	r24, r28
    2dd0:	08 96       	adiw	r24, 0x08	; 8
    2dd2:	01 df       	rcall	.-510    	; 0x2bd6 <prvSampleTimeNow>
    2dd4:	8b 01       	movw	r16, r22
    2dd6:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dda:	0e 2e       	mov	r0, r30
    2ddc:	00 0c       	add	r0, r0
    2dde:	ff 0b       	sbc	r31, r31
    2de0:	ea 30       	cpi	r30, 0x0A	; 10
    2de2:	f1 05       	cpc	r31, r1
    2de4:	08 f0       	brcs	.+2      	; 0x2de8 <prvProcessReceivedCommands+0x62>
    2de6:	64 c0       	rjmp	.+200    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
    2de8:	88 27       	eor	r24, r24
    2dea:	ee 58       	subi	r30, 0x8E	; 142
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	8f 4f       	sbci	r24, 0xFF	; 255
    2df0:	0c 94 17 26 	jmp	0x4c2e	; 0x4c2e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2df4:	f5 01       	movw	r30, r10
    2df6:	86 89       	ldd	r24, Z+22	; 0x16
    2df8:	81 60       	ori	r24, 0x01	; 1
    2dfa:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2dfc:	ca 80       	ldd	r12, Y+2	; 0x02
    2dfe:	db 80       	ldd	r13, Y+3	; 0x03
    2e00:	ec 80       	ldd	r14, Y+4	; 0x04
    2e02:	fd 80       	ldd	r15, Y+5	; 0x05
    2e04:	46 85       	ldd	r20, Z+14	; 0x0e
    2e06:	57 85       	ldd	r21, Z+15	; 0x0f
    2e08:	60 89       	ldd	r22, Z+16	; 0x10
    2e0a:	71 89       	ldd	r23, Z+17	; 0x11
    2e0c:	4c 0d       	add	r20, r12
    2e0e:	5d 1d       	adc	r21, r13
    2e10:	6e 1d       	adc	r22, r14
    2e12:	7f 1d       	adc	r23, r15
    2e14:	c5 01       	movw	r24, r10
    2e16:	87 dd       	rcall	.-1266   	; 0x2926 <prvInsertTimerInActiveList>
    2e18:	88 23       	and	r24, r24
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <prvProcessReceivedCommands+0x98>
    2e1c:	49 c0       	rjmp	.+146    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e1e:	d5 01       	movw	r26, r10
    2e20:	54 96       	adiw	r26, 0x14	; 20
    2e22:	ed 91       	ld	r30, X+
    2e24:	fc 91       	ld	r31, X
    2e26:	55 97       	sbiw	r26, 0x15	; 21
    2e28:	c5 01       	movw	r24, r10
    2e2a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e2c:	f5 01       	movw	r30, r10
    2e2e:	86 89       	ldd	r24, Z+22	; 0x16
    2e30:	82 ff       	sbrs	r24, 2
    2e32:	3e c0       	rjmp	.+124    	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2e34:	4a 81       	ldd	r20, Y+2	; 0x02
    2e36:	5b 81       	ldd	r21, Y+3	; 0x03
    2e38:	6c 81       	ldd	r22, Y+4	; 0x04
    2e3a:	7d 81       	ldd	r23, Y+5	; 0x05
    2e3c:	86 85       	ldd	r24, Z+14	; 0x0e
    2e3e:	97 85       	ldd	r25, Z+15	; 0x0f
    2e40:	a0 89       	ldd	r26, Z+16	; 0x10
    2e42:	b1 89       	ldd	r27, Z+17	; 0x11
    2e44:	9a 01       	movw	r18, r20
    2e46:	ab 01       	movw	r20, r22
    2e48:	28 0f       	add	r18, r24
    2e4a:	39 1f       	adc	r19, r25
    2e4c:	4a 1f       	adc	r20, r26
    2e4e:	5b 1f       	adc	r21, r27
    2e50:	c1 2c       	mov	r12, r1
    2e52:	d1 2c       	mov	r13, r1
    2e54:	76 01       	movw	r14, r12
    2e56:	00 e0       	ldi	r16, 0x00	; 0
    2e58:	10 e0       	ldi	r17, 0x00	; 0
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	c5 01       	movw	r24, r10
    2e5e:	f5 dd       	rcall	.-1046   	; 0x2a4a <xTimerGenericCommand>
    2e60:	27 c0       	rjmp	.+78     	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e62:	d5 01       	movw	r26, r10
    2e64:	56 96       	adiw	r26, 0x16	; 22
    2e66:	8c 91       	ld	r24, X
    2e68:	56 97       	sbiw	r26, 0x16	; 22
    2e6a:	8e 7f       	andi	r24, 0xFE	; 254
    2e6c:	56 96       	adiw	r26, 0x16	; 22
    2e6e:	8c 93       	st	X, r24
                        break;
    2e70:	1f c0       	rjmp	.+62     	; 0x2eb0 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e72:	f5 01       	movw	r30, r10
    2e74:	86 89       	ldd	r24, Z+22	; 0x16
    2e76:	81 60       	ori	r24, 0x01	; 1
    2e78:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2e7a:	4a 81       	ldd	r20, Y+2	; 0x02
    2e7c:	5b 81       	ldd	r21, Y+3	; 0x03
    2e7e:	6c 81       	ldd	r22, Y+4	; 0x04
    2e80:	7d 81       	ldd	r23, Y+5	; 0x05
    2e82:	46 87       	std	Z+14, r20	; 0x0e
    2e84:	57 87       	std	Z+15, r21	; 0x0f
    2e86:	60 8b       	std	Z+16, r22	; 0x10
    2e88:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2e8a:	40 0f       	add	r20, r16
    2e8c:	51 1f       	adc	r21, r17
    2e8e:	62 1f       	adc	r22, r18
    2e90:	73 1f       	adc	r23, r19
    2e92:	68 01       	movw	r12, r16
    2e94:	79 01       	movw	r14, r18
    2e96:	c5 01       	movw	r24, r10
    2e98:	46 dd       	rcall	.-1396   	; 0x2926 <prvInsertTimerInActiveList>
                        break;
    2e9a:	0a c0       	rjmp	.+20     	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2e9c:	f5 01       	movw	r30, r10
    2e9e:	86 89       	ldd	r24, Z+22	; 0x16
    2ea0:	81 fd       	sbrc	r24, 1
    2ea2:	04 c0       	rjmp	.+8      	; 0x2eac <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2ea4:	c5 01       	movw	r24, r10
    2ea6:	0e 94 82 05 	call	0xb04	; 0xb04 <vPortFree>
    2eaa:	02 c0       	rjmp	.+4      	; 0x2eb0 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2eac:	8e 7f       	andi	r24, 0xFE	; 254
    2eae:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	a9 01       	movw	r20, r18
    2eb6:	be 01       	movw	r22, r28
    2eb8:	6f 5f       	subi	r22, 0xFF	; 255
    2eba:	7f 4f       	sbci	r23, 0xFF	; 255
    2ebc:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <xTimerQueue>
    2ec0:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <xTimerQueue+0x1>
    2ec4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <xQueueReceive>
    2ec8:	81 11       	cpse	r24, r1
    2eca:	70 cf       	rjmp	.-288    	; 0x2dac <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2ecc:	28 96       	adiw	r28, 0x08	; 8
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	1f 91       	pop	r17
    2ede:	0f 91       	pop	r16
    2ee0:	ff 90       	pop	r15
    2ee2:	ef 90       	pop	r14
    2ee4:	df 90       	pop	r13
    2ee6:	cf 90       	pop	r12
    2ee8:	bf 90       	pop	r11
    2eea:	af 90       	pop	r10
    2eec:	08 95       	ret

00002eee <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2eee:	08 95       	ret

00002ef0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ef0:	84 b1       	in	r24, 0x04	; 4
    2ef2:	80 68       	ori	r24, 0x80	; 128
    2ef4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ef6:	85 b1       	in	r24, 0x05	; 5
    2ef8:	80 68       	ori	r24, 0x80	; 128
    2efa:	85 b9       	out	0x05, r24	; 5
    2efc:	08 95       	ret

00002efe <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2efe:	83 b1       	in	r24, 0x03	; 3
    2f00:	80 68       	ori	r24, 0x80	; 128
    2f02:	83 b9       	out	0x03, r24	; 3
    2f04:	08 95       	ret

00002f06 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2f06:	f4 df       	rcall	.-24     	; 0x2ef0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f08:	2f ef       	ldi	r18, 0xFF	; 255
    2f0a:	80 e7       	ldi	r24, 0x70	; 112
    2f0c:	92 e0       	ldi	r25, 0x02	; 2
    2f0e:	21 50       	subi	r18, 0x01	; 1
    2f10:	80 40       	sbci	r24, 0x00	; 0
    2f12:	90 40       	sbci	r25, 0x00	; 0
    2f14:	e1 f7       	brne	.-8      	; 0x2f0e <vApplicationMallocFailedHook+0x8>
    2f16:	00 c0       	rjmp	.+0      	; 0x2f18 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2f18:	00 00       	nop
    2f1a:	f1 df       	rcall	.-30     	; 0x2efe <prvBlinkMainLed>
    2f1c:	f5 cf       	rjmp	.-22     	; 0x2f08 <vApplicationMallocFailedHook+0x2>

00002f1e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2f1e:	e8 df       	rcall	.-48     	; 0x2ef0 <prvSetMainLedOn>
    2f20:	2f ef       	ldi	r18, 0xFF	; 255
    2f22:	87 ea       	ldi	r24, 0xA7	; 167
    2f24:	91 e6       	ldi	r25, 0x61	; 97
    2f26:	21 50       	subi	r18, 0x01	; 1
    2f28:	80 40       	sbci	r24, 0x00	; 0
    2f2a:	90 40       	sbci	r25, 0x00	; 0
    2f2c:	e1 f7       	brne	.-8      	; 0x2f26 <vApplicationStackOverflowHook+0x8>
    2f2e:	00 c0       	rjmp	.+0      	; 0x2f30 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2f30:	00 00       	nop
    2f32:	e5 df       	rcall	.-54     	; 0x2efe <prvBlinkMainLed>
    2f34:	f5 cf       	rjmp	.-22     	; 0x2f20 <vApplicationStackOverflowHook+0x2>

00002f36 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2f36:	81 b1       	in	r24, 0x01	; 1
    2f38:	81 68       	ori	r24, 0x81	; 129
    2f3a:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	ce d5       	rcall	.+2972   	; 0x3adc <stdio_initialise>
	// Let's create some tasks
	

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    2f40:	85 e0       	ldi	r24, 0x05	; 5
    2f42:	d3 d6       	rcall	.+3494   	; 0x3cea <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	07 d1       	rcall	.+526    	; 0x315a <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	//lora_handler_initialise(3);

//Calling from application.h to initialize everything	
	initialize_everything();
    2f4c:	0e 94 8c 01 	call	0x318	; 0x318 <initialize_everything>
	run_all_Task();
    2f50:	0e 94 89 01 	call	0x312	; 0x312 <run_all_Task>
	MainApplicationTask();
    2f54:	0c 94 97 01 	jmp	0x32e	; 0x32e <MainApplicationTask>
    2f58:	08 95       	ret

00002f5a <main>:

/*-----------------------------------------------------------*/
int main(void)
{
		
		puts("MAIN");
    2f5a:	80 eb       	ldi	r24, 0xB0	; 176
    2f5c:	94 e0       	ldi	r25, 0x04	; 4
    2f5e:	0e 94 92 28 	call	0x5124	; 0x5124 <puts>
	initialiseSystem(); // Must be done as the very first thing!!
    2f62:	e9 df       	rcall	.-46     	; 0x2f36 <initialiseSystem>
	printf("Program Started!!\n");
    2f64:	85 eb       	ldi	r24, 0xB5	; 181
    2f66:	94 e0       	ldi	r25, 0x04	; 4
    2f68:	0e 94 92 28 	call	0x5124	; 0x5124 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2f6c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <vTaskStartScheduler>
    2f70:	ff cf       	rjmp	.-2      	; 0x2f70 <main+0x16>

00002f72 <_hihTwiCallback>:
    2f72:	65 30       	cpi	r22, 0x05	; 5
    2f74:	f1 f4       	brne	.+60     	; 0x2fb2 <_hihTwiCallback+0x40>
    2f76:	fa 01       	movw	r30, r20
    2f78:	80 81       	ld	r24, Z
    2f7a:	8f 73       	andi	r24, 0x3F	; 63
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	98 2f       	mov	r25, r24
    2f80:	88 27       	eor	r24, r24
    2f82:	21 81       	ldd	r18, Z+1	; 0x01
    2f84:	82 2b       	or	r24, r18
    2f86:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2f8a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2f8e:	82 81       	ldd	r24, Z+2	; 0x02
    2f90:	f0 e4       	ldi	r31, 0x40	; 64
    2f92:	8f 9f       	mul	r24, r31
    2f94:	c0 01       	movw	r24, r0
    2f96:	11 24       	eor	r1, r1
    2f98:	fa 01       	movw	r30, r20
    2f9a:	23 81       	ldd	r18, Z+3	; 0x03
    2f9c:	26 95       	lsr	r18
    2f9e:	26 95       	lsr	r18
    2fa0:	82 2b       	or	r24, r18
    2fa2:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2fa6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	80 93 75 13 	sts	0x1375, r24	; 0x801375 <_measuringIsReady>
    2fb0:	08 95       	ret
    2fb2:	64 30       	cpi	r22, 0x04	; 4
    2fb4:	51 f0       	breq	.+20     	; 0x2fca <_hihTwiCallback+0x58>
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	90 e4       	ldi	r25, 0x40	; 64
    2fba:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    2fbe:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    2fc2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    2fc6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    2fca:	08 95       	ret

00002fcc <hih8120_initialise>:
    2fcc:	0f 93       	push	r16
    2fce:	1f 93       	push	r17
    2fd0:	09 eb       	ldi	r16, 0xB9	; 185
    2fd2:	17 e1       	ldi	r17, 0x17	; 23
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	34 e2       	ldi	r19, 0x24	; 36
    2fd8:	44 ef       	ldi	r20, 0xF4	; 244
    2fda:	50 e0       	ldi	r21, 0x00	; 0
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	87 e2       	ldi	r24, 0x27	; 39
    2fe0:	e3 d6       	rcall	.+3526   	; 0x3da8 <twiCreate>
    2fe2:	90 93 77 13 	sts	0x1377, r25	; 0x801377 <_hih8120Handler+0x1>
    2fe6:	80 93 76 13 	sts	0x1376, r24	; 0x801376 <_hih8120Handler>
    2fea:	21 e0       	ldi	r18, 0x01	; 1
    2fec:	89 2b       	or	r24, r25
    2fee:	09 f0       	breq	.+2      	; 0x2ff2 <hih8120_initialise+0x26>
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	82 2f       	mov	r24, r18
    2ff4:	1f 91       	pop	r17
    2ff6:	0f 91       	pop	r16
    2ff8:	08 95       	ret

00002ffa <hih8120_wakeup>:
    2ffa:	80 91 76 13 	lds	r24, 0x1376	; 0x801376 <_hih8120Handler>
    2ffe:	90 91 77 13 	lds	r25, 0x1377	; 0x801377 <_hih8120Handler+0x1>
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	51 f0       	breq	.+20     	; 0x301a <hih8120_wakeup+0x20>
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	1e d7       	rcall	.+3644   	; 0x3e4a <twiTransmit>
    300e:	84 30       	cpi	r24, 0x04	; 4
    3010:	31 f4       	brne	.+12     	; 0x301e <hih8120_wakeup+0x24>
    3012:	10 92 75 13 	sts	0x1375, r1	; 0x801375 <_measuringIsReady>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	08 95       	ret
    301a:	82 e0       	ldi	r24, 0x02	; 2
    301c:	08 95       	ret
    301e:	83 e0       	ldi	r24, 0x03	; 3
    3020:	08 95       	ret

00003022 <hih8120_measure>:
    3022:	80 91 76 13 	lds	r24, 0x1376	; 0x801376 <_hih8120Handler>
    3026:	90 91 77 13 	lds	r25, 0x1377	; 0x801377 <_hih8120Handler+0x1>
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	31 f0       	breq	.+12     	; 0x303a <hih8120_measure+0x18>
    302e:	64 e0       	ldi	r22, 0x04	; 4
    3030:	58 d7       	rcall	.+3760   	; 0x3ee2 <twiReceive>
    3032:	85 30       	cpi	r24, 0x05	; 5
    3034:	21 f0       	breq	.+8      	; 0x303e <hih8120_measure+0x1c>
    3036:	83 e0       	ldi	r24, 0x03	; 3
    3038:	08 95       	ret
    303a:	82 e0       	ldi	r24, 0x02	; 2
    303c:	08 95       	ret
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	08 95       	ret

00003042 <hih8120_getHumidity>:
    3042:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3046:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	0e 94 04 25 	call	0x4a08	; 0x4a08 <__floatunsisf>
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	48 ec       	ldi	r20, 0xC8	; 200
    3058:	52 e4       	ldi	r21, 0x42	; 66
    305a:	0e 94 92 25 	call	0x4b24	; 0x4b24 <__mulsf3>
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	38 ef       	ldi	r19, 0xF8	; 248
    3062:	4f e7       	ldi	r20, 0x7F	; 127
    3064:	56 e4       	ldi	r21, 0x46	; 70
    3066:	0c 94 6b 24 	jmp	0x48d6	; 0x48d6 <__divsf3>
    306a:	08 95       	ret

0000306c <hih8120_getHumidityPercent_x10>:
    306c:	ea df       	rcall	.-44     	; 0x3042 <hih8120_getHumidity>
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e2       	ldi	r20, 0x20	; 32
    3074:	51 e4       	ldi	r21, 0x41	; 65
    3076:	0e 94 92 25 	call	0x4b24	; 0x4b24 <__mulsf3>
    307a:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    307e:	cb 01       	movw	r24, r22
    3080:	08 95       	ret

00003082 <hih8120_getTemperature>:
    3082:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3086:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0e 94 04 25 	call	0x4a08	; 0x4a08 <__floatunsisf>
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	45 e2       	ldi	r20, 0x25	; 37
    3098:	53 e4       	ldi	r21, 0x43	; 67
    309a:	0e 94 92 25 	call	0x4b24	; 0x4b24 <__mulsf3>
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	38 ef       	ldi	r19, 0xF8	; 248
    30a2:	4f e7       	ldi	r20, 0x7F	; 127
    30a4:	56 e4       	ldi	r21, 0x46	; 70
    30a6:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <__divsf3>
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	40 e2       	ldi	r20, 0x20	; 32
    30b0:	52 e4       	ldi	r21, 0x42	; 66
    30b2:	0c 94 06 24 	jmp	0x480c	; 0x480c <__subsf3>
    30b6:	08 95       	ret

000030b8 <hih8120_getTemperature_x10>:
    30b8:	e4 df       	rcall	.-56     	; 0x3082 <hih8120_getTemperature>
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e2       	ldi	r20, 0x20	; 32
    30c0:	51 e4       	ldi	r21, 0x41	; 65
    30c2:	0e 94 92 25 	call	0x4b24	; 0x4b24 <__mulsf3>
    30c6:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__fixsfsi>
    30ca:	cb 01       	movw	r24, r22
    30cc:	08 95       	ret

000030ce <_serialCallBack>:
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	1f 92       	push	r1
    30d8:	1f 92       	push	r1
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
    30de:	8c 01       	movw	r16, r24
    30e0:	19 82       	std	Y+1, r1	; 0x01
    30e2:	2d c0       	rjmp	.+90     	; 0x313e <_serialCallBack+0x70>
    30e4:	e0 91 78 13 	lds	r30, 0x1378	; 0x801378 <rec_buf_inp.2878>
    30e8:	ec 32       	cpi	r30, 0x2C	; 44
    30ea:	50 f4       	brcc	.+20     	; 0x3100 <_serialCallBack+0x32>
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	8e 0f       	add	r24, r30
    30f0:	80 93 78 13 	sts	0x1378, r24	; 0x801378 <rec_buf_inp.2878>
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	e1 58       	subi	r30, 0x81	; 129
    30f8:	fc 4e       	sbci	r31, 0xEC	; 236
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	80 83       	st	Z, r24
    30fe:	02 c0       	rjmp	.+4      	; 0x3104 <_serialCallBack+0x36>
    3100:	10 92 78 13 	sts	0x1378, r1	; 0x801378 <rec_buf_inp.2878>
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	8a 30       	cpi	r24, 0x0A	; 10
    3108:	d1 f4       	brne	.+52     	; 0x313e <_serialCallBack+0x70>
    310a:	40 91 78 13 	lds	r20, 0x1378	; 0x801378 <rec_buf_inp.2878>
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	fa 01       	movw	r30, r20
    3112:	e3 58       	subi	r30, 0x83	; 131
    3114:	fc 4e       	sbci	r31, 0xEC	; 236
    3116:	10 82       	st	Z, r1
    3118:	41 50       	subi	r20, 0x01	; 1
    311a:	51 09       	sbc	r21, r1
    311c:	9e 01       	movw	r18, r28
    311e:	2f 5f       	subi	r18, 0xFF	; 255
    3120:	3f 4f       	sbci	r19, 0xFF	; 255
    3122:	6f e7       	ldi	r22, 0x7F	; 127
    3124:	73 e1       	ldi	r23, 0x13	; 19
    3126:	80 91 7b 13 	lds	r24, 0x137B	; 0x80137b <_serialReplyBufferHandle>
    312a:	90 91 7c 13 	lds	r25, 0x137C	; 0x80137c <_serialReplyBufferHandle+0x1>
    312e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <xStreamBufferSendFromISR>
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	81 11       	cpse	r24, r1
    3136:	0e 94 8d 06 	call	0xd1a	; 0xd1a <vPortYield>
    313a:	10 92 78 13 	sts	0x1378, r1	; 0x801378 <rec_buf_inp.2878>
    313e:	be 01       	movw	r22, r28
    3140:	6e 5f       	subi	r22, 0xFE	; 254
    3142:	7f 4f       	sbci	r23, 0xFF	; 255
    3144:	c8 01       	movw	r24, r16
    3146:	34 d2       	rcall	.+1128   	; 0x35b0 <serial_getByte>
    3148:	88 23       	and	r24, r24
    314a:	61 f2       	breq	.-104    	; 0x30e4 <_serialCallBack+0x16>
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	df 91       	pop	r29
    3152:	cf 91       	pop	r28
    3154:	1f 91       	pop	r17
    3156:	0f 91       	pop	r16
    3158:	08 95       	ret

0000315a <lora_driver_initialise>:
    315a:	8f 92       	push	r8
    315c:	9f 92       	push	r9
    315e:	af 92       	push	r10
    3160:	cf 92       	push	r12
    3162:	ef 92       	push	r14
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	cf 93       	push	r28
    316a:	c8 2f       	mov	r28, r24
    316c:	8b 01       	movw	r16, r22
    316e:	41 e0       	ldi	r20, 0x01	; 1
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	70 e0       	ldi	r23, 0x00	; 0
    3174:	88 ec       	ldi	r24, 0xC8	; 200
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	0e 94 b3 0a 	call	0x1566	; 0x1566 <xStreamBufferGenericCreate>
    317c:	90 93 7c 13 	sts	0x137C, r25	; 0x80137c <_serialReplyBufferHandle+0x1>
    3180:	80 93 7b 13 	sts	0x137B, r24	; 0x80137b <_serialReplyBufferHandle>
    3184:	10 93 7a 13 	sts	0x137A, r17	; 0x80137a <_downlinkMessageBuffer+0x1>
    3188:	00 93 79 13 	sts	0x1379, r16	; 0x801379 <_downlinkMessageBuffer>
    318c:	0f 2e       	mov	r0, r31
    318e:	f7 e6       	ldi	r31, 0x67	; 103
    3190:	8f 2e       	mov	r8, r31
    3192:	f8 e1       	ldi	r31, 0x18	; 24
    3194:	9f 2e       	mov	r9, r31
    3196:	f0 2d       	mov	r31, r0
    3198:	68 94       	set
    319a:	aa 24       	eor	r10, r10
    319c:	a6 f8       	bld	r10, 6
    319e:	68 94       	set
    31a0:	cc 24       	eor	r12, r12
    31a2:	c6 f8       	bld	r12, 6
    31a4:	e1 2c       	mov	r14, r1
    31a6:	00 e0       	ldi	r16, 0x00	; 0
    31a8:	23 e0       	ldi	r18, 0x03	; 3
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	51 ee       	ldi	r21, 0xE1	; 225
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	70 e0       	ldi	r23, 0x00	; 0
    31b2:	8c 2f       	mov	r24, r28
    31b4:	d7 d0       	rcall	.+430    	; 0x3364 <serial_create>
    31b6:	90 93 7e 13 	sts	0x137E, r25	; 0x80137e <_rn2483_serial+0x1>
    31ba:	80 93 7d 13 	sts	0x137D, r24	; 0x80137d <_rn2483_serial>
    31be:	e7 e0       	ldi	r30, 0x07	; 7
    31c0:	f1 e0       	ldi	r31, 0x01	; 1
    31c2:	80 81       	ld	r24, Z
    31c4:	80 61       	ori	r24, 0x10	; 16
    31c6:	80 83       	st	Z, r24
    31c8:	cf 91       	pop	r28
    31ca:	1f 91       	pop	r17
    31cc:	0f 91       	pop	r16
    31ce:	ef 90       	pop	r14
    31d0:	cf 90       	pop	r12
    31d2:	af 90       	pop	r10
    31d4:	9f 90       	pop	r9
    31d6:	8f 90       	pop	r8
    31d8:	08 95       	ret

000031da <_serialCallBack>:
    31da:	80 91 af 13 	lds	r24, 0x13AF	; 0x8013af <crc_sum.1945>
    31de:	86 0f       	add	r24, r22
    31e0:	80 93 af 13 	sts	0x13AF, r24	; 0x8013af <crc_sum.1945>
    31e4:	90 91 b2 13 	lds	r25, 0x13B2	; 0x8013b2 <_mh_state>
    31e8:	91 30       	cpi	r25, 0x01	; 1
    31ea:	79 f0       	breq	.+30     	; 0x320a <_serialCallBack+0x30>
    31ec:	28 f0       	brcs	.+10     	; 0x31f8 <_serialCallBack+0x1e>
    31ee:	92 30       	cpi	r25, 0x02	; 2
    31f0:	a9 f0       	breq	.+42     	; 0x321c <_serialCallBack+0x42>
    31f2:	93 30       	cpi	r25, 0x03	; 3
    31f4:	19 f1       	breq	.+70     	; 0x323c <_serialCallBack+0x62>
    31f6:	08 95       	ret
    31f8:	6f 3f       	cpi	r22, 0xFF	; 255
    31fa:	09 f0       	breq	.+2      	; 0x31fe <_serialCallBack+0x24>
    31fc:	48 c0       	rjmp	.+144    	; 0x328e <_serialCallBack+0xb4>
    31fe:	10 92 af 13 	sts	0x13AF, r1	; 0x8013af <crc_sum.1945>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	80 93 b2 13 	sts	0x13B2, r24	; 0x8013b2 <_mh_state>
    3208:	08 95       	ret
    320a:	66 38       	cpi	r22, 0x86	; 134
    320c:	09 f0       	breq	.+2      	; 0x3210 <_serialCallBack+0x36>
    320e:	3f c0       	rjmp	.+126    	; 0x328e <_serialCallBack+0xb4>
    3210:	10 92 ae 13 	sts	0x13AE, r1	; 0x8013ae <inDex.1943>
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	80 93 b2 13 	sts	0x13B2, r24	; 0x8013b2 <_mh_state>
    321a:	08 95       	ret
    321c:	e0 91 ae 13 	lds	r30, 0x13AE	; 0x8013ae <inDex.1943>
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	8e 0f       	add	r24, r30
    3224:	80 93 ae 13 	sts	0x13AE, r24	; 0x8013ae <inDex.1943>
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	e4 55       	subi	r30, 0x54	; 84
    322c:	fc 4e       	sbci	r31, 0xEC	; 236
    322e:	60 83       	st	Z, r22
    3230:	82 30       	cpi	r24, 0x02	; 2
    3232:	69 f5       	brne	.+90     	; 0x328e <_serialCallBack+0xb4>
    3234:	83 e0       	ldi	r24, 0x03	; 3
    3236:	80 93 b2 13 	sts	0x13B2, r24	; 0x8013b2 <_mh_state>
    323a:	08 95       	ret
    323c:	90 91 ae 13 	lds	r25, 0x13AE	; 0x8013ae <inDex.1943>
    3240:	21 e0       	ldi	r18, 0x01	; 1
    3242:	29 0f       	add	r18, r25
    3244:	20 93 ae 13 	sts	0x13AE, r18	; 0x8013ae <inDex.1943>
    3248:	96 30       	cpi	r25, 0x06	; 6
    324a:	09 f5       	brne	.+66     	; 0x328e <_serialCallBack+0xb4>
    324c:	81 11       	cpse	r24, r1
    324e:	0e c0       	rjmp	.+28     	; 0x326c <_serialCallBack+0x92>
    3250:	ec ea       	ldi	r30, 0xAC	; 172
    3252:	f3 e1       	ldi	r31, 0x13	; 19
    3254:	80 81       	ld	r24, Z
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	98 2f       	mov	r25, r24
    325a:	88 27       	eor	r24, r24
    325c:	21 81       	ldd	r18, Z+1	; 0x01
    325e:	82 0f       	add	r24, r18
    3260:	91 1d       	adc	r25, r1
    3262:	90 93 b4 13 	sts	0x13B4, r25	; 0x8013b4 <_ppm+0x1>
    3266:	80 93 b3 13 	sts	0x13B3, r24	; 0x8013b3 <_ppm>
    326a:	04 c0       	rjmp	.+8      	; 0x3274 <_serialCallBack+0x9a>
    326c:	10 92 b4 13 	sts	0x13B4, r1	; 0x8013b4 <_ppm+0x1>
    3270:	10 92 b3 13 	sts	0x13B3, r1	; 0x8013b3 <_ppm>
    3274:	10 92 b2 13 	sts	0x13B2, r1	; 0x8013b2 <_mh_state>
    3278:	e0 91 b0 13 	lds	r30, 0x13B0	; 0x8013b0 <_appCallBack>
    327c:	f0 91 b1 13 	lds	r31, 0x13B1	; 0x8013b1 <_appCallBack+0x1>
    3280:	30 97       	sbiw	r30, 0x00	; 0
    3282:	29 f0       	breq	.+10     	; 0x328e <_serialCallBack+0xb4>
    3284:	80 91 b3 13 	lds	r24, 0x13B3	; 0x8013b3 <_ppm>
    3288:	90 91 b4 13 	lds	r25, 0x13B4	; 0x8013b4 <_ppm+0x1>
    328c:	19 95       	eicall
    328e:	08 95       	ret

00003290 <mh_z19_initialise>:
    3290:	8f 92       	push	r8
    3292:	9f 92       	push	r9
    3294:	af 92       	push	r10
    3296:	cf 92       	push	r12
    3298:	ef 92       	push	r14
    329a:	0f 93       	push	r16
    329c:	0f 2e       	mov	r0, r31
    329e:	fd ee       	ldi	r31, 0xED	; 237
    32a0:	8f 2e       	mov	r8, r31
    32a2:	f8 e1       	ldi	r31, 0x18	; 24
    32a4:	9f 2e       	mov	r9, r31
    32a6:	f0 2d       	mov	r31, r0
    32a8:	68 94       	set
    32aa:	aa 24       	eor	r10, r10
    32ac:	a4 f8       	bld	r10, 4
    32ae:	68 94       	set
    32b0:	cc 24       	eor	r12, r12
    32b2:	c4 f8       	bld	r12, 4
    32b4:	e1 2c       	mov	r14, r1
    32b6:	00 e0       	ldi	r16, 0x00	; 0
    32b8:	23 e0       	ldi	r18, 0x03	; 3
    32ba:	40 e8       	ldi	r20, 0x80	; 128
    32bc:	55 e2       	ldi	r21, 0x25	; 37
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	70 e0       	ldi	r23, 0x00	; 0
    32c2:	50 d0       	rcall	.+160    	; 0x3364 <serial_create>
    32c4:	90 93 b6 13 	sts	0x13B6, r25	; 0x8013b6 <_serial+0x1>
    32c8:	80 93 b5 13 	sts	0x13B5, r24	; 0x8013b5 <_serial>
    32cc:	0f 91       	pop	r16
    32ce:	ef 90       	pop	r14
    32d0:	cf 90       	pop	r12
    32d2:	af 90       	pop	r10
    32d4:	9f 90       	pop	r9
    32d6:	8f 90       	pop	r8
    32d8:	08 95       	ret

000032da <mh_z19_injectCallBack>:
    32da:	90 93 b1 13 	sts	0x13B1, r25	; 0x8013b1 <_appCallBack+0x1>
    32de:	80 93 b0 13 	sts	0x13B0, r24	; 0x8013b0 <_appCallBack>
    32e2:	08 95       	ret

000032e4 <mh_z19_takeMeassuring>:
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	29 97       	sbiw	r28, 0x09	; 9
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	89 e0       	ldi	r24, 0x09	; 9
    32fa:	e2 e2       	ldi	r30, 0x22	; 34
    32fc:	f2 e0       	ldi	r31, 0x02	; 2
    32fe:	9e 01       	movw	r18, r28
    3300:	2f 5f       	subi	r18, 0xFF	; 255
    3302:	3f 4f       	sbci	r19, 0xFF	; 255
    3304:	d9 01       	movw	r26, r18
    3306:	01 90       	ld	r0, Z+
    3308:	0d 92       	st	X+, r0
    330a:	8a 95       	dec	r24
    330c:	e1 f7       	brne	.-8      	; 0x3306 <mh_z19_takeMeassuring+0x22>
    330e:	10 92 b4 13 	sts	0x13B4, r1	; 0x8013b4 <_ppm+0x1>
    3312:	10 92 b3 13 	sts	0x13B3, r1	; 0x8013b3 <_ppm>
    3316:	80 91 b5 13 	lds	r24, 0x13B5	; 0x8013b5 <_serial>
    331a:	90 91 b6 13 	lds	r25, 0x13B6	; 0x8013b6 <_serial+0x1>
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	31 f0       	breq	.+12     	; 0x332e <mh_z19_takeMeassuring+0x4a>
    3322:	42 2f       	mov	r20, r18
    3324:	53 2f       	mov	r21, r19
    3326:	69 e0       	ldi	r22, 0x09	; 9
    3328:	ee d0       	rcall	.+476    	; 0x3506 <serial_sendBytes>
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	01 c0       	rjmp	.+2      	; 0x3330 <mh_z19_takeMeassuring+0x4c>
    332e:	82 e0       	ldi	r24, 0x02	; 2
    3330:	29 96       	adiw	r28, 0x09	; 9
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	08 95       	ret

00003342 <mh_z19_getCo2Ppm>:
    3342:	20 91 b3 13 	lds	r18, 0x13B3	; 0x8013b3 <_ppm>
    3346:	30 91 b4 13 	lds	r19, 0x13B4	; 0x8013b4 <_ppm+0x1>
    334a:	21 15       	cp	r18, r1
    334c:	31 05       	cpc	r19, r1
    334e:	29 f4       	brne	.+10     	; 0x335a <mh_z19_getCo2Ppm+0x18>
    3350:	fc 01       	movw	r30, r24
    3352:	11 82       	std	Z+1, r1	; 0x01
    3354:	10 82       	st	Z, r1
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	08 95       	ret
    335a:	fc 01       	movw	r30, r24
    335c:	31 83       	std	Z+1, r19	; 0x01
    335e:	20 83       	st	Z, r18
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	08 95       	ret

00003364 <serial_create>:
    3364:	2f 92       	push	r2
    3366:	3f 92       	push	r3
    3368:	4f 92       	push	r4
    336a:	5f 92       	push	r5
    336c:	6f 92       	push	r6
    336e:	7f 92       	push	r7
    3370:	8f 92       	push	r8
    3372:	9f 92       	push	r9
    3374:	af 92       	push	r10
    3376:	cf 92       	push	r12
    3378:	ef 92       	push	r14
    337a:	ff 92       	push	r15
    337c:	0f 93       	push	r16
    337e:	1f 93       	push	r17
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	f8 2e       	mov	r15, r24
    338a:	2a 01       	movw	r4, r20
    338c:	3b 01       	movw	r6, r22
    338e:	88 e0       	ldi	r24, 0x08	; 8
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <malloc>
    3396:	8c 01       	movw	r16, r24
    3398:	8f 2d       	mov	r24, r15
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	fc 01       	movw	r30, r24
    339e:	ee 0f       	add	r30, r30
    33a0:	ff 1f       	adc	r31, r31
    33a2:	e9 54       	subi	r30, 0x49	; 73
    33a4:	fc 4e       	sbci	r31, 0xEC	; 236
    33a6:	11 83       	std	Z+1, r17	; 0x01
    33a8:	00 83       	st	Z, r16
    33aa:	01 15       	cp	r16, r1
    33ac:	11 05       	cpc	r17, r1
    33ae:	09 f4       	brne	.+2      	; 0x33b2 <serial_create+0x4e>
    33b0:	6d c0       	rjmp	.+218    	; 0x348c <serial_create+0x128>
    33b2:	88 0f       	add	r24, r24
    33b4:	99 1f       	adc	r25, r25
    33b6:	fc 01       	movw	r30, r24
    33b8:	e5 5f       	subi	r30, 0xF5	; 245
    33ba:	fd 4f       	sbci	r31, 0xFD	; 253
    33bc:	80 81       	ld	r24, Z
    33be:	91 81       	ldd	r25, Z+1	; 0x01
    33c0:	d8 01       	movw	r26, r16
    33c2:	8d 93       	st	X+, r24
    33c4:	9c 93       	st	X, r25
    33c6:	8c 2d       	mov	r24, r12
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	88 0f       	add	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <malloc>
    33d6:	1c 01       	movw	r2, r24
    33d8:	86 e0       	ldi	r24, 0x06	; 6
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <malloc>
    33e0:	7c 01       	movw	r14, r24
    33e2:	4c 2d       	mov	r20, r12
    33e4:	b1 01       	movw	r22, r2
    33e6:	6d d6       	rcall	.+3290   	; 0x40c2 <fifo_init>
    33e8:	f8 01       	movw	r30, r16
    33ea:	f5 82       	std	Z+5, r15	; 0x05
    33ec:	e4 82       	std	Z+4, r14	; 0x04
    33ee:	8a 2d       	mov	r24, r10
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <malloc>
    33fe:	1c 01       	movw	r2, r24
    3400:	86 e0       	ldi	r24, 0x06	; 6
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <malloc>
    3408:	7c 01       	movw	r14, r24
    340a:	4a 2d       	mov	r20, r10
    340c:	b1 01       	movw	r22, r2
    340e:	59 d6       	rcall	.+3250   	; 0x40c2 <fifo_init>
    3410:	d8 01       	movw	r26, r16
    3412:	13 96       	adiw	r26, 0x03	; 3
    3414:	fc 92       	st	X, r15
    3416:	ee 92       	st	-X, r14
    3418:	12 97       	sbiw	r26, 0x02	; 2
    341a:	17 96       	adiw	r26, 0x07	; 7
    341c:	9c 92       	st	X, r9
    341e:	8e 92       	st	-X, r8
    3420:	16 97       	sbiw	r26, 0x06	; 6
    3422:	ff b6       	in	r15, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	ed 91       	ld	r30, X+
    3428:	fc 91       	ld	r31, X
    342a:	11 97       	sbiw	r26, 0x01	; 1
    342c:	36 97       	sbiw	r30, 0x06	; 6
    342e:	80 81       	ld	r24, Z
    3430:	82 60       	ori	r24, 0x02	; 2
    3432:	80 83       	st	Z, r24
    3434:	8d 90       	ld	r8, X+
    3436:	9c 90       	ld	r9, X
    3438:	c3 01       	movw	r24, r6
    343a:	b2 01       	movw	r22, r4
    343c:	0e 94 04 25 	call	0x4a08	; 0x4a08 <__floatunsisf>
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e0       	ldi	r20, 0x00	; 0
    3446:	51 e4       	ldi	r21, 0x41	; 65
    3448:	0e 94 92 25 	call	0x4b24	; 0x4b24 <__mulsf3>
    344c:	9b 01       	movw	r18, r22
    344e:	ac 01       	movw	r20, r24
    3450:	60 e0       	ldi	r22, 0x00	; 0
    3452:	74 e2       	ldi	r23, 0x24	; 36
    3454:	84 e7       	ldi	r24, 0x74	; 116
    3456:	9b e4       	ldi	r25, 0x4B	; 75
    3458:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <__divsf3>
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e8       	ldi	r20, 0x80	; 128
    3462:	5f e3       	ldi	r21, 0x3F	; 63
    3464:	0e 94 06 24 	call	0x480c	; 0x480c <__subsf3>
    3468:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__fixunssfsi>
    346c:	f4 01       	movw	r30, r8
    346e:	32 97       	sbiw	r30, 0x02	; 2
    3470:	60 83       	st	Z, r22
    3472:	d8 01       	movw	r26, r16
    3474:	ed 91       	ld	r30, X+
    3476:	fc 91       	ld	r31, X
    3478:	11 97       	sbiw	r26, 0x01	; 1
    347a:	35 97       	sbiw	r30, 0x05	; 5
    347c:	88 e9       	ldi	r24, 0x98	; 152
    347e:	80 83       	st	Z, r24
    3480:	ed 91       	ld	r30, X+
    3482:	fc 91       	ld	r31, X
    3484:	34 97       	sbiw	r30, 0x04	; 4
    3486:	86 e0       	ldi	r24, 0x06	; 6
    3488:	80 83       	st	Z, r24
    348a:	ff be       	out	0x3f, r15	; 63
    348c:	c8 01       	movw	r24, r16
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	cf 90       	pop	r12
    349c:	af 90       	pop	r10
    349e:	9f 90       	pop	r9
    34a0:	8f 90       	pop	r8
    34a2:	7f 90       	pop	r7
    34a4:	6f 90       	pop	r6
    34a6:	5f 90       	pop	r5
    34a8:	4f 90       	pop	r4
    34aa:	3f 90       	pop	r3
    34ac:	2f 90       	pop	r2
    34ae:	08 95       	ret

000034b0 <serial_sendByte>:
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
    34b4:	dc 01       	movw	r26, r24
    34b6:	89 2b       	or	r24, r25
    34b8:	01 f1       	breq	.+64     	; 0x34fa <serial_sendByte+0x4a>
    34ba:	12 96       	adiw	r26, 0x02	; 2
    34bc:	ed 91       	ld	r30, X+
    34be:	fc 91       	ld	r31, X
    34c0:	13 97       	sbiw	r26, 0x03	; 3
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	82 81       	ldd	r24, Z+2	; 0x02
    34c6:	25 81       	ldd	r18, Z+5	; 0x05
    34c8:	98 1b       	sub	r25, r24
    34ca:	92 23       	and	r25, r18
    34cc:	84 81       	ldd	r24, Z+4	; 0x04
    34ce:	98 17       	cp	r25, r24
    34d0:	b1 f0       	breq	.+44     	; 0x34fe <serial_sendByte+0x4e>
    34d2:	83 81       	ldd	r24, Z+3	; 0x03
    34d4:	26 95       	lsr	r18
    34d6:	28 23       	and	r18, r24
    34d8:	c0 81       	ld	r28, Z
    34da:	d1 81       	ldd	r29, Z+1	; 0x01
    34dc:	c2 0f       	add	r28, r18
    34de:	d1 1d       	adc	r29, r1
    34e0:	68 83       	st	Y, r22
    34e2:	8f 5f       	subi	r24, 0xFF	; 255
    34e4:	95 81       	ldd	r25, Z+5	; 0x05
    34e6:	89 23       	and	r24, r25
    34e8:	83 83       	std	Z+3, r24	; 0x03
    34ea:	ed 91       	ld	r30, X+
    34ec:	fc 91       	ld	r31, X
    34ee:	35 97       	sbiw	r30, 0x05	; 5
    34f0:	80 81       	ld	r24, Z
    34f2:	80 62       	ori	r24, 0x20	; 32
    34f4:	80 83       	st	Z, r24
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	03 c0       	rjmp	.+6      	; 0x3500 <serial_sendByte+0x50>
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	01 c0       	rjmp	.+2      	; 0x3500 <serial_sendByte+0x50>
    34fe:	82 e0       	ldi	r24, 0x02	; 2
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	08 95       	ret

00003506 <serial_sendBytes>:
    3506:	ef 92       	push	r14
    3508:	ff 92       	push	r15
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	7c 01       	movw	r14, r24
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	09 f4       	brne	.+2      	; 0x351a <serial_sendBytes+0x14>
    3518:	41 c0       	rjmp	.+130    	; 0x359c <serial_sendBytes+0x96>
    351a:	dc 01       	movw	r26, r24
    351c:	12 96       	adiw	r26, 0x02	; 2
    351e:	ed 91       	ld	r30, X+
    3520:	fc 91       	ld	r31, X
    3522:	13 97       	sbiw	r26, 0x03	; 3
    3524:	93 81       	ldd	r25, Z+3	; 0x03
    3526:	82 81       	ldd	r24, Z+2	; 0x02
    3528:	98 1b       	sub	r25, r24
    352a:	85 81       	ldd	r24, Z+5	; 0x05
    352c:	98 23       	and	r25, r24
    352e:	84 81       	ldd	r24, Z+4	; 0x04
    3530:	89 1b       	sub	r24, r25
    3532:	86 17       	cp	r24, r22
    3534:	a8 f1       	brcs	.+106    	; 0x35a0 <serial_sendBytes+0x9a>
    3536:	66 23       	and	r22, r22
    3538:	41 f1       	breq	.+80     	; 0x358a <serial_sendBytes+0x84>
    353a:	84 2f       	mov	r24, r20
    353c:	95 2f       	mov	r25, r21
    353e:	dc 01       	movw	r26, r24
    3540:	61 50       	subi	r22, 0x01	; 1
    3542:	46 2f       	mov	r20, r22
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	4f 5f       	subi	r20, 0xFF	; 255
    3548:	5f 4f       	sbci	r21, 0xFF	; 255
    354a:	48 0f       	add	r20, r24
    354c:	59 1f       	adc	r21, r25
    354e:	e7 01       	movw	r28, r14
    3550:	ea 81       	ldd	r30, Y+2	; 0x02
    3552:	fb 81       	ldd	r31, Y+3	; 0x03
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	25 81       	ldd	r18, Z+5	; 0x05
    355a:	98 1b       	sub	r25, r24
    355c:	92 23       	and	r25, r18
    355e:	84 81       	ldd	r24, Z+4	; 0x04
    3560:	98 17       	cp	r25, r24
    3562:	79 f0       	breq	.+30     	; 0x3582 <serial_sendBytes+0x7c>
    3564:	8c 91       	ld	r24, X
    3566:	93 81       	ldd	r25, Z+3	; 0x03
    3568:	26 95       	lsr	r18
    356a:	29 23       	and	r18, r25
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	8b 01       	movw	r16, r22
    3572:	02 0f       	add	r16, r18
    3574:	11 1d       	adc	r17, r1
    3576:	e8 01       	movw	r28, r16
    3578:	88 83       	st	Y, r24
    357a:	9f 5f       	subi	r25, 0xFF	; 255
    357c:	85 81       	ldd	r24, Z+5	; 0x05
    357e:	98 23       	and	r25, r24
    3580:	93 83       	std	Z+3, r25	; 0x03
    3582:	11 96       	adiw	r26, 0x01	; 1
    3584:	a4 17       	cp	r26, r20
    3586:	b5 07       	cpc	r27, r21
    3588:	11 f7       	brne	.-60     	; 0x354e <serial_sendBytes+0x48>
    358a:	d7 01       	movw	r26, r14
    358c:	ed 91       	ld	r30, X+
    358e:	fc 91       	ld	r31, X
    3590:	35 97       	sbiw	r30, 0x05	; 5
    3592:	80 81       	ld	r24, Z
    3594:	80 62       	ori	r24, 0x20	; 32
    3596:	80 83       	st	Z, r24
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	03 c0       	rjmp	.+6      	; 0x35a2 <serial_sendBytes+0x9c>
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	01 c0       	rjmp	.+2      	; 0x35a2 <serial_sendBytes+0x9c>
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	ff 90       	pop	r15
    35ac:	ef 90       	pop	r14
    35ae:	08 95       	ret

000035b0 <serial_getByte>:
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	d1 f0       	breq	.+52     	; 0x35e8 <serial_getByte+0x38>
    35b4:	dc 01       	movw	r26, r24
    35b6:	14 96       	adiw	r26, 0x04	; 4
    35b8:	ed 91       	ld	r30, X+
    35ba:	fc 91       	ld	r31, X
    35bc:	15 97       	sbiw	r26, 0x05	; 5
    35be:	93 81       	ldd	r25, Z+3	; 0x03
    35c0:	82 81       	ldd	r24, Z+2	; 0x02
    35c2:	98 17       	cp	r25, r24
    35c4:	99 f0       	breq	.+38     	; 0x35ec <serial_getByte+0x3c>
    35c6:	92 81       	ldd	r25, Z+2	; 0x02
    35c8:	85 81       	ldd	r24, Z+5	; 0x05
    35ca:	86 95       	lsr	r24
    35cc:	89 23       	and	r24, r25
    35ce:	a0 81       	ld	r26, Z
    35d0:	b1 81       	ldd	r27, Z+1	; 0x01
    35d2:	a8 0f       	add	r26, r24
    35d4:	b1 1d       	adc	r27, r1
    35d6:	8c 91       	ld	r24, X
    35d8:	db 01       	movw	r26, r22
    35da:	8c 93       	st	X, r24
    35dc:	9f 5f       	subi	r25, 0xFF	; 255
    35de:	85 81       	ldd	r24, Z+5	; 0x05
    35e0:	98 23       	and	r25, r24
    35e2:	92 83       	std	Z+2, r25	; 0x02
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	08 95       	ret
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	08 95       	ret
    35ec:	83 e0       	ldi	r24, 0x03	; 3
    35ee:	08 95       	ret

000035f0 <__vector_25>:
    35f0:	1f 92       	push	r1
    35f2:	0f 92       	push	r0
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	0f 92       	push	r0
    35f8:	11 24       	eor	r1, r1
    35fa:	0b b6       	in	r0, 0x3b	; 59
    35fc:	0f 92       	push	r0
    35fe:	2f 93       	push	r18
    3600:	3f 93       	push	r19
    3602:	4f 93       	push	r20
    3604:	5f 93       	push	r21
    3606:	6f 93       	push	r22
    3608:	7f 93       	push	r23
    360a:	8f 93       	push	r24
    360c:	9f 93       	push	r25
    360e:	af 93       	push	r26
    3610:	bf 93       	push	r27
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	ef 93       	push	r30
    3618:	ff 93       	push	r31
    361a:	a0 91 b7 13 	lds	r26, 0x13B7	; 0x8013b7 <_ser_handle>
    361e:	b0 91 b8 13 	lds	r27, 0x13B8	; 0x8013b8 <_ser_handle+0x1>
    3622:	10 97       	sbiw	r26, 0x00	; 0
    3624:	11 f1       	breq	.+68     	; 0x366a <__vector_25+0x7a>
    3626:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    362a:	14 96       	adiw	r26, 0x04	; 4
    362c:	ed 91       	ld	r30, X+
    362e:	fc 91       	ld	r31, X
    3630:	15 97       	sbiw	r26, 0x05	; 5
    3632:	93 81       	ldd	r25, Z+3	; 0x03
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	25 81       	ldd	r18, Z+5	; 0x05
    3638:	98 1b       	sub	r25, r24
    363a:	92 23       	and	r25, r18
    363c:	84 81       	ldd	r24, Z+4	; 0x04
    363e:	98 17       	cp	r25, r24
    3640:	61 f0       	breq	.+24     	; 0x365a <__vector_25+0x6a>
    3642:	83 81       	ldd	r24, Z+3	; 0x03
    3644:	26 95       	lsr	r18
    3646:	28 23       	and	r18, r24
    3648:	c0 81       	ld	r28, Z
    364a:	d1 81       	ldd	r29, Z+1	; 0x01
    364c:	c2 0f       	add	r28, r18
    364e:	d1 1d       	adc	r29, r1
    3650:	68 83       	st	Y, r22
    3652:	8f 5f       	subi	r24, 0xFF	; 255
    3654:	95 81       	ldd	r25, Z+5	; 0x05
    3656:	89 23       	and	r24, r25
    3658:	83 83       	std	Z+3, r24	; 0x03
    365a:	16 96       	adiw	r26, 0x06	; 6
    365c:	ed 91       	ld	r30, X+
    365e:	fc 91       	ld	r31, X
    3660:	17 97       	sbiw	r26, 0x07	; 7
    3662:	30 97       	sbiw	r30, 0x00	; 0
    3664:	11 f0       	breq	.+4      	; 0x366a <__vector_25+0x7a>
    3666:	cd 01       	movw	r24, r26
    3668:	19 95       	eicall
    366a:	ff 91       	pop	r31
    366c:	ef 91       	pop	r30
    366e:	df 91       	pop	r29
    3670:	cf 91       	pop	r28
    3672:	bf 91       	pop	r27
    3674:	af 91       	pop	r26
    3676:	9f 91       	pop	r25
    3678:	8f 91       	pop	r24
    367a:	7f 91       	pop	r23
    367c:	6f 91       	pop	r22
    367e:	5f 91       	pop	r21
    3680:	4f 91       	pop	r20
    3682:	3f 91       	pop	r19
    3684:	2f 91       	pop	r18
    3686:	0f 90       	pop	r0
    3688:	0b be       	out	0x3b, r0	; 59
    368a:	0f 90       	pop	r0
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	0f 90       	pop	r0
    3690:	1f 90       	pop	r1
    3692:	18 95       	reti

00003694 <__vector_26>:
    3694:	1f 92       	push	r1
    3696:	0f 92       	push	r0
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	0f 92       	push	r0
    369c:	11 24       	eor	r1, r1
    369e:	0b b6       	in	r0, 0x3b	; 59
    36a0:	0f 92       	push	r0
    36a2:	2f 93       	push	r18
    36a4:	8f 93       	push	r24
    36a6:	9f 93       	push	r25
    36a8:	af 93       	push	r26
    36aa:	bf 93       	push	r27
    36ac:	ef 93       	push	r30
    36ae:	ff 93       	push	r31
    36b0:	e0 91 b7 13 	lds	r30, 0x13B7	; 0x8013b7 <_ser_handle>
    36b4:	f0 91 b8 13 	lds	r31, 0x13B8	; 0x8013b8 <_ser_handle+0x1>
    36b8:	30 97       	sbiw	r30, 0x00	; 0
    36ba:	b9 f0       	breq	.+46     	; 0x36ea <__vector_26+0x56>
    36bc:	02 80       	ldd	r0, Z+2	; 0x02
    36be:	f3 81       	ldd	r31, Z+3	; 0x03
    36c0:	e0 2d       	mov	r30, r0
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	98 17       	cp	r25, r24
    36c8:	b1 f0       	breq	.+44     	; 0x36f6 <__vector_26+0x62>
    36ca:	92 81       	ldd	r25, Z+2	; 0x02
    36cc:	85 81       	ldd	r24, Z+5	; 0x05
    36ce:	28 2f       	mov	r18, r24
    36d0:	26 95       	lsr	r18
    36d2:	29 23       	and	r18, r25
    36d4:	a0 81       	ld	r26, Z
    36d6:	b1 81       	ldd	r27, Z+1	; 0x01
    36d8:	a2 0f       	add	r26, r18
    36da:	b1 1d       	adc	r27, r1
    36dc:	2c 91       	ld	r18, X
    36de:	9f 5f       	subi	r25, 0xFF	; 255
    36e0:	89 23       	and	r24, r25
    36e2:	82 83       	std	Z+2, r24	; 0x02
    36e4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    36e8:	0b c0       	rjmp	.+22     	; 0x3700 <__vector_26+0x6c>
    36ea:	e1 ec       	ldi	r30, 0xC1	; 193
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	8f 7d       	andi	r24, 0xDF	; 223
    36f2:	80 83       	st	Z, r24
    36f4:	05 c0       	rjmp	.+10     	; 0x3700 <__vector_26+0x6c>
    36f6:	e1 ec       	ldi	r30, 0xC1	; 193
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	8f 7d       	andi	r24, 0xDF	; 223
    36fe:	80 83       	st	Z, r24
    3700:	ff 91       	pop	r31
    3702:	ef 91       	pop	r30
    3704:	bf 91       	pop	r27
    3706:	af 91       	pop	r26
    3708:	9f 91       	pop	r25
    370a:	8f 91       	pop	r24
    370c:	2f 91       	pop	r18
    370e:	0f 90       	pop	r0
    3710:	0b be       	out	0x3b, r0	; 59
    3712:	0f 90       	pop	r0
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	0f 90       	pop	r0
    3718:	1f 90       	pop	r1
    371a:	18 95       	reti

0000371c <__vector_36>:
    371c:	1f 92       	push	r1
    371e:	0f 92       	push	r0
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	0f 92       	push	r0
    3724:	11 24       	eor	r1, r1
    3726:	0b b6       	in	r0, 0x3b	; 59
    3728:	0f 92       	push	r0
    372a:	2f 93       	push	r18
    372c:	3f 93       	push	r19
    372e:	4f 93       	push	r20
    3730:	5f 93       	push	r21
    3732:	6f 93       	push	r22
    3734:	7f 93       	push	r23
    3736:	8f 93       	push	r24
    3738:	9f 93       	push	r25
    373a:	af 93       	push	r26
    373c:	bf 93       	push	r27
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	ef 93       	push	r30
    3744:	ff 93       	push	r31
    3746:	a0 91 b9 13 	lds	r26, 0x13B9	; 0x8013b9 <_ser_handle+0x2>
    374a:	b0 91 ba 13 	lds	r27, 0x13BA	; 0x8013ba <_ser_handle+0x3>
    374e:	10 97       	sbiw	r26, 0x00	; 0
    3750:	11 f1       	breq	.+68     	; 0x3796 <__vector_36+0x7a>
    3752:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3756:	14 96       	adiw	r26, 0x04	; 4
    3758:	ed 91       	ld	r30, X+
    375a:	fc 91       	ld	r31, X
    375c:	15 97       	sbiw	r26, 0x05	; 5
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	82 81       	ldd	r24, Z+2	; 0x02
    3762:	25 81       	ldd	r18, Z+5	; 0x05
    3764:	98 1b       	sub	r25, r24
    3766:	92 23       	and	r25, r18
    3768:	84 81       	ldd	r24, Z+4	; 0x04
    376a:	98 17       	cp	r25, r24
    376c:	61 f0       	breq	.+24     	; 0x3786 <__vector_36+0x6a>
    376e:	83 81       	ldd	r24, Z+3	; 0x03
    3770:	26 95       	lsr	r18
    3772:	28 23       	and	r18, r24
    3774:	c0 81       	ld	r28, Z
    3776:	d1 81       	ldd	r29, Z+1	; 0x01
    3778:	c2 0f       	add	r28, r18
    377a:	d1 1d       	adc	r29, r1
    377c:	68 83       	st	Y, r22
    377e:	8f 5f       	subi	r24, 0xFF	; 255
    3780:	95 81       	ldd	r25, Z+5	; 0x05
    3782:	89 23       	and	r24, r25
    3784:	83 83       	std	Z+3, r24	; 0x03
    3786:	16 96       	adiw	r26, 0x06	; 6
    3788:	ed 91       	ld	r30, X+
    378a:	fc 91       	ld	r31, X
    378c:	17 97       	sbiw	r26, 0x07	; 7
    378e:	30 97       	sbiw	r30, 0x00	; 0
    3790:	11 f0       	breq	.+4      	; 0x3796 <__vector_36+0x7a>
    3792:	cd 01       	movw	r24, r26
    3794:	19 95       	eicall
    3796:	ff 91       	pop	r31
    3798:	ef 91       	pop	r30
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	bf 91       	pop	r27
    37a0:	af 91       	pop	r26
    37a2:	9f 91       	pop	r25
    37a4:	8f 91       	pop	r24
    37a6:	7f 91       	pop	r23
    37a8:	6f 91       	pop	r22
    37aa:	5f 91       	pop	r21
    37ac:	4f 91       	pop	r20
    37ae:	3f 91       	pop	r19
    37b0:	2f 91       	pop	r18
    37b2:	0f 90       	pop	r0
    37b4:	0b be       	out	0x3b, r0	; 59
    37b6:	0f 90       	pop	r0
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	0f 90       	pop	r0
    37bc:	1f 90       	pop	r1
    37be:	18 95       	reti

000037c0 <__vector_37>:
    37c0:	1f 92       	push	r1
    37c2:	0f 92       	push	r0
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	0f 92       	push	r0
    37c8:	11 24       	eor	r1, r1
    37ca:	0b b6       	in	r0, 0x3b	; 59
    37cc:	0f 92       	push	r0
    37ce:	2f 93       	push	r18
    37d0:	8f 93       	push	r24
    37d2:	9f 93       	push	r25
    37d4:	af 93       	push	r26
    37d6:	bf 93       	push	r27
    37d8:	ef 93       	push	r30
    37da:	ff 93       	push	r31
    37dc:	e0 91 b9 13 	lds	r30, 0x13B9	; 0x8013b9 <_ser_handle+0x2>
    37e0:	f0 91 ba 13 	lds	r31, 0x13BA	; 0x8013ba <_ser_handle+0x3>
    37e4:	30 97       	sbiw	r30, 0x00	; 0
    37e6:	b9 f0       	breq	.+46     	; 0x3816 <__vector_37+0x56>
    37e8:	02 80       	ldd	r0, Z+2	; 0x02
    37ea:	f3 81       	ldd	r31, Z+3	; 0x03
    37ec:	e0 2d       	mov	r30, r0
    37ee:	93 81       	ldd	r25, Z+3	; 0x03
    37f0:	82 81       	ldd	r24, Z+2	; 0x02
    37f2:	98 17       	cp	r25, r24
    37f4:	b1 f0       	breq	.+44     	; 0x3822 <__vector_37+0x62>
    37f6:	92 81       	ldd	r25, Z+2	; 0x02
    37f8:	85 81       	ldd	r24, Z+5	; 0x05
    37fa:	28 2f       	mov	r18, r24
    37fc:	26 95       	lsr	r18
    37fe:	29 23       	and	r18, r25
    3800:	a0 81       	ld	r26, Z
    3802:	b1 81       	ldd	r27, Z+1	; 0x01
    3804:	a2 0f       	add	r26, r18
    3806:	b1 1d       	adc	r27, r1
    3808:	2c 91       	ld	r18, X
    380a:	9f 5f       	subi	r25, 0xFF	; 255
    380c:	89 23       	and	r24, r25
    380e:	82 83       	std	Z+2, r24	; 0x02
    3810:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3814:	0b c0       	rjmp	.+22     	; 0x382c <__vector_37+0x6c>
    3816:	e9 ec       	ldi	r30, 0xC9	; 201
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 81       	ld	r24, Z
    381c:	8f 7d       	andi	r24, 0xDF	; 223
    381e:	80 83       	st	Z, r24
    3820:	05 c0       	rjmp	.+10     	; 0x382c <__vector_37+0x6c>
    3822:	e9 ec       	ldi	r30, 0xC9	; 201
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	8f 7d       	andi	r24, 0xDF	; 223
    382a:	80 83       	st	Z, r24
    382c:	ff 91       	pop	r31
    382e:	ef 91       	pop	r30
    3830:	bf 91       	pop	r27
    3832:	af 91       	pop	r26
    3834:	9f 91       	pop	r25
    3836:	8f 91       	pop	r24
    3838:	2f 91       	pop	r18
    383a:	0f 90       	pop	r0
    383c:	0b be       	out	0x3b, r0	; 59
    383e:	0f 90       	pop	r0
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	0f 90       	pop	r0
    3844:	1f 90       	pop	r1
    3846:	18 95       	reti

00003848 <__vector_51>:
    3848:	1f 92       	push	r1
    384a:	0f 92       	push	r0
    384c:	0f b6       	in	r0, 0x3f	; 63
    384e:	0f 92       	push	r0
    3850:	11 24       	eor	r1, r1
    3852:	0b b6       	in	r0, 0x3b	; 59
    3854:	0f 92       	push	r0
    3856:	2f 93       	push	r18
    3858:	3f 93       	push	r19
    385a:	4f 93       	push	r20
    385c:	5f 93       	push	r21
    385e:	6f 93       	push	r22
    3860:	7f 93       	push	r23
    3862:	8f 93       	push	r24
    3864:	9f 93       	push	r25
    3866:	af 93       	push	r26
    3868:	bf 93       	push	r27
    386a:	cf 93       	push	r28
    386c:	df 93       	push	r29
    386e:	ef 93       	push	r30
    3870:	ff 93       	push	r31
    3872:	a0 91 bb 13 	lds	r26, 0x13BB	; 0x8013bb <_ser_handle+0x4>
    3876:	b0 91 bc 13 	lds	r27, 0x13BC	; 0x8013bc <_ser_handle+0x5>
    387a:	10 97       	sbiw	r26, 0x00	; 0
    387c:	11 f1       	breq	.+68     	; 0x38c2 <__vector_51+0x7a>
    387e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3882:	14 96       	adiw	r26, 0x04	; 4
    3884:	ed 91       	ld	r30, X+
    3886:	fc 91       	ld	r31, X
    3888:	15 97       	sbiw	r26, 0x05	; 5
    388a:	93 81       	ldd	r25, Z+3	; 0x03
    388c:	82 81       	ldd	r24, Z+2	; 0x02
    388e:	25 81       	ldd	r18, Z+5	; 0x05
    3890:	98 1b       	sub	r25, r24
    3892:	92 23       	and	r25, r18
    3894:	84 81       	ldd	r24, Z+4	; 0x04
    3896:	98 17       	cp	r25, r24
    3898:	61 f0       	breq	.+24     	; 0x38b2 <__vector_51+0x6a>
    389a:	83 81       	ldd	r24, Z+3	; 0x03
    389c:	26 95       	lsr	r18
    389e:	28 23       	and	r18, r24
    38a0:	c0 81       	ld	r28, Z
    38a2:	d1 81       	ldd	r29, Z+1	; 0x01
    38a4:	c2 0f       	add	r28, r18
    38a6:	d1 1d       	adc	r29, r1
    38a8:	68 83       	st	Y, r22
    38aa:	8f 5f       	subi	r24, 0xFF	; 255
    38ac:	95 81       	ldd	r25, Z+5	; 0x05
    38ae:	89 23       	and	r24, r25
    38b0:	83 83       	std	Z+3, r24	; 0x03
    38b2:	16 96       	adiw	r26, 0x06	; 6
    38b4:	ed 91       	ld	r30, X+
    38b6:	fc 91       	ld	r31, X
    38b8:	17 97       	sbiw	r26, 0x07	; 7
    38ba:	30 97       	sbiw	r30, 0x00	; 0
    38bc:	11 f0       	breq	.+4      	; 0x38c2 <__vector_51+0x7a>
    38be:	cd 01       	movw	r24, r26
    38c0:	19 95       	eicall
    38c2:	ff 91       	pop	r31
    38c4:	ef 91       	pop	r30
    38c6:	df 91       	pop	r29
    38c8:	cf 91       	pop	r28
    38ca:	bf 91       	pop	r27
    38cc:	af 91       	pop	r26
    38ce:	9f 91       	pop	r25
    38d0:	8f 91       	pop	r24
    38d2:	7f 91       	pop	r23
    38d4:	6f 91       	pop	r22
    38d6:	5f 91       	pop	r21
    38d8:	4f 91       	pop	r20
    38da:	3f 91       	pop	r19
    38dc:	2f 91       	pop	r18
    38de:	0f 90       	pop	r0
    38e0:	0b be       	out	0x3b, r0	; 59
    38e2:	0f 90       	pop	r0
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	0f 90       	pop	r0
    38e8:	1f 90       	pop	r1
    38ea:	18 95       	reti

000038ec <__vector_52>:
    38ec:	1f 92       	push	r1
    38ee:	0f 92       	push	r0
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	0f 92       	push	r0
    38f4:	11 24       	eor	r1, r1
    38f6:	0b b6       	in	r0, 0x3b	; 59
    38f8:	0f 92       	push	r0
    38fa:	2f 93       	push	r18
    38fc:	8f 93       	push	r24
    38fe:	9f 93       	push	r25
    3900:	af 93       	push	r26
    3902:	bf 93       	push	r27
    3904:	ef 93       	push	r30
    3906:	ff 93       	push	r31
    3908:	e0 91 bb 13 	lds	r30, 0x13BB	; 0x8013bb <_ser_handle+0x4>
    390c:	f0 91 bc 13 	lds	r31, 0x13BC	; 0x8013bc <_ser_handle+0x5>
    3910:	30 97       	sbiw	r30, 0x00	; 0
    3912:	b9 f0       	breq	.+46     	; 0x3942 <__vector_52+0x56>
    3914:	02 80       	ldd	r0, Z+2	; 0x02
    3916:	f3 81       	ldd	r31, Z+3	; 0x03
    3918:	e0 2d       	mov	r30, r0
    391a:	93 81       	ldd	r25, Z+3	; 0x03
    391c:	82 81       	ldd	r24, Z+2	; 0x02
    391e:	98 17       	cp	r25, r24
    3920:	b1 f0       	breq	.+44     	; 0x394e <__vector_52+0x62>
    3922:	92 81       	ldd	r25, Z+2	; 0x02
    3924:	85 81       	ldd	r24, Z+5	; 0x05
    3926:	28 2f       	mov	r18, r24
    3928:	26 95       	lsr	r18
    392a:	29 23       	and	r18, r25
    392c:	a0 81       	ld	r26, Z
    392e:	b1 81       	ldd	r27, Z+1	; 0x01
    3930:	a2 0f       	add	r26, r18
    3932:	b1 1d       	adc	r27, r1
    3934:	2c 91       	ld	r18, X
    3936:	9f 5f       	subi	r25, 0xFF	; 255
    3938:	89 23       	and	r24, r25
    393a:	82 83       	std	Z+2, r24	; 0x02
    393c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3940:	0b c0       	rjmp	.+22     	; 0x3958 <__vector_52+0x6c>
    3942:	e1 ed       	ldi	r30, 0xD1	; 209
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	8f 7d       	andi	r24, 0xDF	; 223
    394a:	80 83       	st	Z, r24
    394c:	05 c0       	rjmp	.+10     	; 0x3958 <__vector_52+0x6c>
    394e:	e1 ed       	ldi	r30, 0xD1	; 209
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	8f 7d       	andi	r24, 0xDF	; 223
    3956:	80 83       	st	Z, r24
    3958:	ff 91       	pop	r31
    395a:	ef 91       	pop	r30
    395c:	bf 91       	pop	r27
    395e:	af 91       	pop	r26
    3960:	9f 91       	pop	r25
    3962:	8f 91       	pop	r24
    3964:	2f 91       	pop	r18
    3966:	0f 90       	pop	r0
    3968:	0b be       	out	0x3b, r0	; 59
    396a:	0f 90       	pop	r0
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	0f 90       	pop	r0
    3970:	1f 90       	pop	r1
    3972:	18 95       	reti

00003974 <__vector_54>:
    3974:	1f 92       	push	r1
    3976:	0f 92       	push	r0
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	0f 92       	push	r0
    397c:	11 24       	eor	r1, r1
    397e:	0b b6       	in	r0, 0x3b	; 59
    3980:	0f 92       	push	r0
    3982:	2f 93       	push	r18
    3984:	3f 93       	push	r19
    3986:	4f 93       	push	r20
    3988:	5f 93       	push	r21
    398a:	6f 93       	push	r22
    398c:	7f 93       	push	r23
    398e:	8f 93       	push	r24
    3990:	9f 93       	push	r25
    3992:	af 93       	push	r26
    3994:	bf 93       	push	r27
    3996:	cf 93       	push	r28
    3998:	df 93       	push	r29
    399a:	ef 93       	push	r30
    399c:	ff 93       	push	r31
    399e:	a0 91 bd 13 	lds	r26, 0x13BD	; 0x8013bd <_ser_handle+0x6>
    39a2:	b0 91 be 13 	lds	r27, 0x13BE	; 0x8013be <_ser_handle+0x7>
    39a6:	10 97       	sbiw	r26, 0x00	; 0
    39a8:	11 f1       	breq	.+68     	; 0x39ee <__vector_54+0x7a>
    39aa:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    39ae:	14 96       	adiw	r26, 0x04	; 4
    39b0:	ed 91       	ld	r30, X+
    39b2:	fc 91       	ld	r31, X
    39b4:	15 97       	sbiw	r26, 0x05	; 5
    39b6:	93 81       	ldd	r25, Z+3	; 0x03
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	25 81       	ldd	r18, Z+5	; 0x05
    39bc:	98 1b       	sub	r25, r24
    39be:	92 23       	and	r25, r18
    39c0:	84 81       	ldd	r24, Z+4	; 0x04
    39c2:	98 17       	cp	r25, r24
    39c4:	61 f0       	breq	.+24     	; 0x39de <__vector_54+0x6a>
    39c6:	83 81       	ldd	r24, Z+3	; 0x03
    39c8:	26 95       	lsr	r18
    39ca:	28 23       	and	r18, r24
    39cc:	c0 81       	ld	r28, Z
    39ce:	d1 81       	ldd	r29, Z+1	; 0x01
    39d0:	c2 0f       	add	r28, r18
    39d2:	d1 1d       	adc	r29, r1
    39d4:	68 83       	st	Y, r22
    39d6:	8f 5f       	subi	r24, 0xFF	; 255
    39d8:	95 81       	ldd	r25, Z+5	; 0x05
    39da:	89 23       	and	r24, r25
    39dc:	83 83       	std	Z+3, r24	; 0x03
    39de:	16 96       	adiw	r26, 0x06	; 6
    39e0:	ed 91       	ld	r30, X+
    39e2:	fc 91       	ld	r31, X
    39e4:	17 97       	sbiw	r26, 0x07	; 7
    39e6:	30 97       	sbiw	r30, 0x00	; 0
    39e8:	11 f0       	breq	.+4      	; 0x39ee <__vector_54+0x7a>
    39ea:	cd 01       	movw	r24, r26
    39ec:	19 95       	eicall
    39ee:	ff 91       	pop	r31
    39f0:	ef 91       	pop	r30
    39f2:	df 91       	pop	r29
    39f4:	cf 91       	pop	r28
    39f6:	bf 91       	pop	r27
    39f8:	af 91       	pop	r26
    39fa:	9f 91       	pop	r25
    39fc:	8f 91       	pop	r24
    39fe:	7f 91       	pop	r23
    3a00:	6f 91       	pop	r22
    3a02:	5f 91       	pop	r21
    3a04:	4f 91       	pop	r20
    3a06:	3f 91       	pop	r19
    3a08:	2f 91       	pop	r18
    3a0a:	0f 90       	pop	r0
    3a0c:	0b be       	out	0x3b, r0	; 59
    3a0e:	0f 90       	pop	r0
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	0f 90       	pop	r0
    3a14:	1f 90       	pop	r1
    3a16:	18 95       	reti

00003a18 <__vector_55>:
    3a18:	1f 92       	push	r1
    3a1a:	0f 92       	push	r0
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	0f 92       	push	r0
    3a20:	11 24       	eor	r1, r1
    3a22:	0b b6       	in	r0, 0x3b	; 59
    3a24:	0f 92       	push	r0
    3a26:	2f 93       	push	r18
    3a28:	8f 93       	push	r24
    3a2a:	9f 93       	push	r25
    3a2c:	af 93       	push	r26
    3a2e:	bf 93       	push	r27
    3a30:	ef 93       	push	r30
    3a32:	ff 93       	push	r31
    3a34:	e0 91 bd 13 	lds	r30, 0x13BD	; 0x8013bd <_ser_handle+0x6>
    3a38:	f0 91 be 13 	lds	r31, 0x13BE	; 0x8013be <_ser_handle+0x7>
    3a3c:	30 97       	sbiw	r30, 0x00	; 0
    3a3e:	b9 f0       	breq	.+46     	; 0x3a6e <__vector_55+0x56>
    3a40:	02 80       	ldd	r0, Z+2	; 0x02
    3a42:	f3 81       	ldd	r31, Z+3	; 0x03
    3a44:	e0 2d       	mov	r30, r0
    3a46:	93 81       	ldd	r25, Z+3	; 0x03
    3a48:	82 81       	ldd	r24, Z+2	; 0x02
    3a4a:	98 17       	cp	r25, r24
    3a4c:	b1 f0       	breq	.+44     	; 0x3a7a <__vector_55+0x62>
    3a4e:	92 81       	ldd	r25, Z+2	; 0x02
    3a50:	85 81       	ldd	r24, Z+5	; 0x05
    3a52:	28 2f       	mov	r18, r24
    3a54:	26 95       	lsr	r18
    3a56:	29 23       	and	r18, r25
    3a58:	a0 81       	ld	r26, Z
    3a5a:	b1 81       	ldd	r27, Z+1	; 0x01
    3a5c:	a2 0f       	add	r26, r18
    3a5e:	b1 1d       	adc	r27, r1
    3a60:	2c 91       	ld	r18, X
    3a62:	9f 5f       	subi	r25, 0xFF	; 255
    3a64:	89 23       	and	r24, r25
    3a66:	82 83       	std	Z+2, r24	; 0x02
    3a68:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3a6c:	0b c0       	rjmp	.+22     	; 0x3a84 <__vector_55+0x6c>
    3a6e:	e1 e3       	ldi	r30, 0x31	; 49
    3a70:	f1 e0       	ldi	r31, 0x01	; 1
    3a72:	80 81       	ld	r24, Z
    3a74:	8f 7d       	andi	r24, 0xDF	; 223
    3a76:	80 83       	st	Z, r24
    3a78:	05 c0       	rjmp	.+10     	; 0x3a84 <__vector_55+0x6c>
    3a7a:	e1 e3       	ldi	r30, 0x31	; 49
    3a7c:	f1 e0       	ldi	r31, 0x01	; 1
    3a7e:	80 81       	ld	r24, Z
    3a80:	8f 7d       	andi	r24, 0xDF	; 223
    3a82:	80 83       	st	Z, r24
    3a84:	ff 91       	pop	r31
    3a86:	ef 91       	pop	r30
    3a88:	bf 91       	pop	r27
    3a8a:	af 91       	pop	r26
    3a8c:	9f 91       	pop	r25
    3a8e:	8f 91       	pop	r24
    3a90:	2f 91       	pop	r18
    3a92:	0f 90       	pop	r0
    3a94:	0b be       	out	0x3b, r0	; 59
    3a96:	0f 90       	pop	r0
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	0f 90       	pop	r0
    3a9c:	1f 90       	pop	r1
    3a9e:	18 95       	reti

00003aa0 <usart_getchar>:
    3aa0:	cf 93       	push	r28
    3aa2:	df 93       	push	r29
    3aa4:	1f 92       	push	r1
    3aa6:	cd b7       	in	r28, 0x3d	; 61
    3aa8:	de b7       	in	r29, 0x3e	; 62
    3aaa:	be 01       	movw	r22, r28
    3aac:	6f 5f       	subi	r22, 0xFF	; 255
    3aae:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab0:	80 91 bf 13 	lds	r24, 0x13BF	; 0x8013bf <_com_serial_instance>
    3ab4:	90 91 c0 13 	lds	r25, 0x13C0	; 0x8013c0 <_com_serial_instance+0x1>
    3ab8:	7b dd       	rcall	.-1290   	; 0x35b0 <serial_getByte>
    3aba:	81 11       	cpse	r24, r1
    3abc:	f6 cf       	rjmp	.-20     	; 0x3aaa <usart_getchar+0xa>
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	0f 90       	pop	r0
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	08 95       	ret

00003aca <usart_putchar>:
    3aca:	68 2f       	mov	r22, r24
    3acc:	80 91 bf 13 	lds	r24, 0x13BF	; 0x8013bf <_com_serial_instance>
    3ad0:	90 91 c0 13 	lds	r25, 0x13C0	; 0x8013c0 <_com_serial_instance+0x1>
    3ad4:	ed dc       	rcall	.-1574   	; 0x34b0 <serial_sendByte>
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	08 95       	ret

00003adc <stdio_initialise>:
    3adc:	8f 92       	push	r8
    3ade:	9f 92       	push	r9
    3ae0:	af 92       	push	r10
    3ae2:	cf 92       	push	r12
    3ae4:	ef 92       	push	r14
    3ae6:	0f 93       	push	r16
    3ae8:	81 2c       	mov	r8, r1
    3aea:	91 2c       	mov	r9, r1
    3aec:	68 94       	set
    3aee:	aa 24       	eor	r10, r10
    3af0:	a7 f8       	bld	r10, 7
    3af2:	68 94       	set
    3af4:	cc 24       	eor	r12, r12
    3af6:	c7 f8       	bld	r12, 7
    3af8:	e1 2c       	mov	r14, r1
    3afa:	00 e0       	ldi	r16, 0x00	; 0
    3afc:	23 e0       	ldi	r18, 0x03	; 3
    3afe:	40 e0       	ldi	r20, 0x00	; 0
    3b00:	51 ee       	ldi	r21, 0xE1	; 225
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	2e dc       	rcall	.-1956   	; 0x3364 <serial_create>
    3b08:	90 93 c0 13 	sts	0x13C0, r25	; 0x8013c0 <_com_serial_instance+0x1>
    3b0c:	80 93 bf 13 	sts	0x13BF, r24	; 0x8013bf <_com_serial_instance>
    3b10:	e1 ef       	ldi	r30, 0xF1	; 241
    3b12:	f3 e1       	ldi	r31, 0x13	; 19
    3b14:	83 e1       	ldi	r24, 0x13	; 19
    3b16:	92 e0       	ldi	r25, 0x02	; 2
    3b18:	91 83       	std	Z+1, r25	; 0x01
    3b1a:	80 83       	st	Z, r24
    3b1c:	93 83       	std	Z+3, r25	; 0x03
    3b1e:	82 83       	std	Z+2, r24	; 0x02
    3b20:	0f 91       	pop	r16
    3b22:	ef 90       	pop	r14
    3b24:	cf 90       	pop	r12
    3b26:	af 90       	pop	r10
    3b28:	9f 90       	pop	r9
    3b2a:	8f 90       	pop	r8
    3b2c:	08 95       	ret

00003b2e <_turn_off>:
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	fc 01       	movw	r30, r24
    3b32:	ee 0f       	add	r30, r30
    3b34:	ff 1f       	adc	r31, r31
    3b36:	e8 0f       	add	r30, r24
    3b38:	f9 1f       	adc	r31, r25
    3b3a:	ee 0f       	add	r30, r30
    3b3c:	ff 1f       	adc	r31, r31
    3b3e:	ef 53       	subi	r30, 0x3F	; 63
    3b40:	fc 4e       	sbci	r31, 0xEC	; 236
    3b42:	23 81       	ldd	r18, Z+3	; 0x03
    3b44:	21 11       	cpse	r18, r1
    3b46:	1f c0       	rjmp	.+62     	; 0x3b86 <_turn_off+0x58>
    3b48:	9c 01       	movw	r18, r24
    3b4a:	22 0f       	add	r18, r18
    3b4c:	33 1f       	adc	r19, r19
    3b4e:	f9 01       	movw	r30, r18
    3b50:	e8 0f       	add	r30, r24
    3b52:	f9 1f       	adc	r31, r25
    3b54:	ee 0f       	add	r30, r30
    3b56:	ff 1f       	adc	r31, r31
    3b58:	ef 53       	subi	r30, 0x3F	; 63
    3b5a:	fc 4e       	sbci	r31, 0xEC	; 236
    3b5c:	a0 81       	ld	r26, Z
    3b5e:	b1 81       	ldd	r27, Z+1	; 0x01
    3b60:	4c 91       	ld	r20, X
    3b62:	f9 01       	movw	r30, r18
    3b64:	e8 0f       	add	r30, r24
    3b66:	f9 1f       	adc	r31, r25
    3b68:	ee 0f       	add	r30, r30
    3b6a:	ff 1f       	adc	r31, r31
    3b6c:	ef 53       	subi	r30, 0x3F	; 63
    3b6e:	fc 4e       	sbci	r31, 0xEC	; 236
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	02 80       	ldd	r0, Z+2	; 0x02
    3b76:	02 c0       	rjmp	.+4      	; 0x3b7c <_turn_off+0x4e>
    3b78:	88 0f       	add	r24, r24
    3b7a:	99 1f       	adc	r25, r25
    3b7c:	0a 94       	dec	r0
    3b7e:	e2 f7       	brpl	.-8      	; 0x3b78 <_turn_off+0x4a>
    3b80:	84 2b       	or	r24, r20
    3b82:	8c 93       	st	X, r24
    3b84:	08 95       	ret
    3b86:	fc 01       	movw	r30, r24
    3b88:	ee 0f       	add	r30, r30
    3b8a:	ff 1f       	adc	r31, r31
    3b8c:	df 01       	movw	r26, r30
    3b8e:	a8 0f       	add	r26, r24
    3b90:	b9 1f       	adc	r27, r25
    3b92:	aa 0f       	add	r26, r26
    3b94:	bb 1f       	adc	r27, r27
    3b96:	af 53       	subi	r26, 0x3F	; 63
    3b98:	bc 4e       	sbci	r27, 0xEC	; 236
    3b9a:	0d 90       	ld	r0, X+
    3b9c:	bc 91       	ld	r27, X
    3b9e:	a0 2d       	mov	r26, r0
    3ba0:	2c 91       	ld	r18, X
    3ba2:	e8 0f       	add	r30, r24
    3ba4:	f9 1f       	adc	r31, r25
    3ba6:	ee 0f       	add	r30, r30
    3ba8:	ff 1f       	adc	r31, r31
    3baa:	ef 53       	subi	r30, 0x3F	; 63
    3bac:	fc 4e       	sbci	r31, 0xEC	; 236
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	02 80       	ldd	r0, Z+2	; 0x02
    3bb4:	02 c0       	rjmp	.+4      	; 0x3bba <_turn_off+0x8c>
    3bb6:	88 0f       	add	r24, r24
    3bb8:	99 1f       	adc	r25, r25
    3bba:	0a 94       	dec	r0
    3bbc:	e2 f7       	brpl	.-8      	; 0x3bb6 <_turn_off+0x88>
    3bbe:	80 95       	com	r24
    3bc0:	82 23       	and	r24, r18
    3bc2:	8c 93       	st	X, r24
    3bc4:	08 95       	ret

00003bc6 <_turn_on>:
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	fc 01       	movw	r30, r24
    3bca:	ee 0f       	add	r30, r30
    3bcc:	ff 1f       	adc	r31, r31
    3bce:	e8 0f       	add	r30, r24
    3bd0:	f9 1f       	adc	r31, r25
    3bd2:	ee 0f       	add	r30, r30
    3bd4:	ff 1f       	adc	r31, r31
    3bd6:	ef 53       	subi	r30, 0x3F	; 63
    3bd8:	fc 4e       	sbci	r31, 0xEC	; 236
    3bda:	23 81       	ldd	r18, Z+3	; 0x03
    3bdc:	21 11       	cpse	r18, r1
    3bde:	20 c0       	rjmp	.+64     	; 0x3c20 <_turn_on+0x5a>
    3be0:	9c 01       	movw	r18, r24
    3be2:	22 0f       	add	r18, r18
    3be4:	33 1f       	adc	r19, r19
    3be6:	f9 01       	movw	r30, r18
    3be8:	e8 0f       	add	r30, r24
    3bea:	f9 1f       	adc	r31, r25
    3bec:	ee 0f       	add	r30, r30
    3bee:	ff 1f       	adc	r31, r31
    3bf0:	ef 53       	subi	r30, 0x3F	; 63
    3bf2:	fc 4e       	sbci	r31, 0xEC	; 236
    3bf4:	a0 81       	ld	r26, Z
    3bf6:	b1 81       	ldd	r27, Z+1	; 0x01
    3bf8:	4c 91       	ld	r20, X
    3bfa:	f9 01       	movw	r30, r18
    3bfc:	e8 0f       	add	r30, r24
    3bfe:	f9 1f       	adc	r31, r25
    3c00:	ee 0f       	add	r30, r30
    3c02:	ff 1f       	adc	r31, r31
    3c04:	ef 53       	subi	r30, 0x3F	; 63
    3c06:	fc 4e       	sbci	r31, 0xEC	; 236
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	02 80       	ldd	r0, Z+2	; 0x02
    3c0e:	02 c0       	rjmp	.+4      	; 0x3c14 <_turn_on+0x4e>
    3c10:	88 0f       	add	r24, r24
    3c12:	99 1f       	adc	r25, r25
    3c14:	0a 94       	dec	r0
    3c16:	e2 f7       	brpl	.-8      	; 0x3c10 <_turn_on+0x4a>
    3c18:	80 95       	com	r24
    3c1a:	84 23       	and	r24, r20
    3c1c:	8c 93       	st	X, r24
    3c1e:	08 95       	ret
    3c20:	fc 01       	movw	r30, r24
    3c22:	ee 0f       	add	r30, r30
    3c24:	ff 1f       	adc	r31, r31
    3c26:	df 01       	movw	r26, r30
    3c28:	a8 0f       	add	r26, r24
    3c2a:	b9 1f       	adc	r27, r25
    3c2c:	aa 0f       	add	r26, r26
    3c2e:	bb 1f       	adc	r27, r27
    3c30:	af 53       	subi	r26, 0x3F	; 63
    3c32:	bc 4e       	sbci	r27, 0xEC	; 236
    3c34:	0d 90       	ld	r0, X+
    3c36:	bc 91       	ld	r27, X
    3c38:	a0 2d       	mov	r26, r0
    3c3a:	2c 91       	ld	r18, X
    3c3c:	e8 0f       	add	r30, r24
    3c3e:	f9 1f       	adc	r31, r25
    3c40:	ee 0f       	add	r30, r30
    3c42:	ff 1f       	adc	r31, r31
    3c44:	ef 53       	subi	r30, 0x3F	; 63
    3c46:	fc 4e       	sbci	r31, 0xEC	; 236
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	02 80       	ldd	r0, Z+2	; 0x02
    3c4e:	02 c0       	rjmp	.+4      	; 0x3c54 <_turn_on+0x8e>
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	0a 94       	dec	r0
    3c56:	e2 f7       	brpl	.-8      	; 0x3c50 <_turn_on+0x8a>
    3c58:	82 2b       	or	r24, r18
    3c5a:	8c 93       	st	X, r24
    3c5c:	08 95       	ret

00003c5e <_hal_led_task>:
    3c5e:	cc 24       	eor	r12, r12
    3c60:	c3 94       	inc	r12
    3c62:	d1 2c       	mov	r13, r1
    3c64:	68 94       	set
    3c66:	bb 24       	eor	r11, r11
    3c68:	b2 f8       	bld	r11, 2
    3c6a:	c1 ec       	ldi	r28, 0xC1	; 193
    3c6c:	d3 e1       	ldi	r29, 0x13	; 19
    3c6e:	10 e0       	ldi	r17, 0x00	; 0
    3c70:	8c 81       	ldd	r24, Y+4	; 0x04
    3c72:	81 30       	cpi	r24, 0x01	; 1
    3c74:	81 f0       	breq	.+32     	; 0x3c96 <_hal_led_task+0x38>
    3c76:	18 f1       	brcs	.+70     	; 0x3cbe <_hal_led_task+0x60>
    3c78:	82 30       	cpi	r24, 0x02	; 2
    3c7a:	61 f5       	brne	.+88     	; 0x3cd4 <_hal_led_task+0x76>
    3c7c:	e8 81       	ld	r30, Y
    3c7e:	f9 81       	ldd	r31, Y+1	; 0x01
    3c80:	20 81       	ld	r18, Z
    3c82:	c6 01       	movw	r24, r12
    3c84:	0a 80       	ldd	r0, Y+2	; 0x02
    3c86:	02 c0       	rjmp	.+4      	; 0x3c8c <_hal_led_task+0x2e>
    3c88:	88 0f       	add	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	0a 94       	dec	r0
    3c8e:	e2 f7       	brpl	.-8      	; 0x3c88 <_hal_led_task+0x2a>
    3c90:	82 27       	eor	r24, r18
    3c92:	80 83       	st	Z, r24
    3c94:	1f c0       	rjmp	.+62     	; 0x3cd4 <_hal_led_task+0x76>
    3c96:	8d 81       	ldd	r24, Y+5	; 0x05
    3c98:	8f 5f       	subi	r24, 0xFF	; 255
    3c9a:	86 30       	cpi	r24, 0x06	; 6
    3c9c:	10 f4       	brcc	.+4      	; 0x3ca2 <_hal_led_task+0x44>
    3c9e:	8d 83       	std	Y+5, r24	; 0x05
    3ca0:	19 c0       	rjmp	.+50     	; 0x3cd4 <_hal_led_task+0x76>
    3ca2:	1d 82       	std	Y+5, r1	; 0x05
    3ca4:	e8 81       	ld	r30, Y
    3ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ca8:	20 81       	ld	r18, Z
    3caa:	c6 01       	movw	r24, r12
    3cac:	0a 80       	ldd	r0, Y+2	; 0x02
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <_hal_led_task+0x56>
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	0a 94       	dec	r0
    3cb6:	e2 f7       	brpl	.-8      	; 0x3cb0 <_hal_led_task+0x52>
    3cb8:	82 27       	eor	r24, r18
    3cba:	80 83       	st	Z, r24
    3cbc:	0b c0       	rjmp	.+22     	; 0x3cd4 <_hal_led_task+0x76>
    3cbe:	0d 81       	ldd	r16, Y+5	; 0x05
    3cc0:	00 23       	and	r16, r16
    3cc2:	29 f0       	breq	.+10     	; 0x3cce <_hal_led_task+0x70>
    3cc4:	81 2f       	mov	r24, r17
    3cc6:	7f df       	rcall	.-258    	; 0x3bc6 <_turn_on>
    3cc8:	01 50       	subi	r16, 0x01	; 1
    3cca:	0d 83       	std	Y+5, r16	; 0x05
    3ccc:	03 c0       	rjmp	.+6      	; 0x3cd4 <_hal_led_task+0x76>
    3cce:	bc 82       	std	Y+4, r11	; 0x04
    3cd0:	81 2f       	mov	r24, r17
    3cd2:	2d df       	rcall	.-422    	; 0x3b2e <_turn_off>
    3cd4:	1f 5f       	subi	r17, 0xFF	; 255
    3cd6:	26 96       	adiw	r28, 0x06	; 6
    3cd8:	14 30       	cpi	r17, 0x04	; 4
    3cda:	51 f6       	brne	.-108    	; 0x3c70 <_hal_led_task+0x12>
    3cdc:	6c e0       	ldi	r22, 0x0C	; 12
    3cde:	70 e0       	ldi	r23, 0x00	; 0
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <vTaskDelay>
    3ce8:	c0 cf       	rjmp	.-128    	; 0x3c6a <_hal_led_task+0xc>

00003cea <status_leds_initialise>:
    3cea:	ef 92       	push	r14
    3cec:	ff 92       	push	r15
    3cee:	0f 93       	push	r16
    3cf0:	1f 93       	push	r17
    3cf2:	cf 93       	push	r28
    3cf4:	df 93       	push	r29
    3cf6:	08 2f       	mov	r16, r24
    3cf8:	80 e4       	ldi	r24, 0x40	; 64
    3cfa:	87 b9       	out	0x07, r24	; 7
    3cfc:	c1 ec       	ldi	r28, 0xC1	; 193
    3cfe:	d3 e1       	ldi	r29, 0x13	; 19
    3d00:	0f 2e       	mov	r0, r31
    3d02:	f8 e2       	ldi	r31, 0x28	; 40
    3d04:	ef 2e       	mov	r14, r31
    3d06:	f1 2c       	mov	r15, r1
    3d08:	f0 2d       	mov	r31, r0
    3d0a:	f9 82       	std	Y+1, r15	; 0x01
    3d0c:	e8 82       	st	Y, r14
    3d0e:	86 e0       	ldi	r24, 0x06	; 6
    3d10:	8a 83       	std	Y+2, r24	; 0x02
    3d12:	1b 82       	std	Y+3, r1	; 0x03
    3d14:	14 e0       	ldi	r17, 0x04	; 4
    3d16:	1c 83       	std	Y+4, r17	; 0x04
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	09 df       	rcall	.-494    	; 0x3b2e <_turn_off>
    3d1c:	80 e8       	ldi	r24, 0x80	; 128
    3d1e:	87 b9       	out	0x07, r24	; 7
    3d20:	ff 82       	std	Y+7, r15	; 0x07
    3d22:	ee 82       	std	Y+6, r14	; 0x06
    3d24:	87 e0       	ldi	r24, 0x07	; 7
    3d26:	88 87       	std	Y+8, r24	; 0x08
    3d28:	19 86       	std	Y+9, r1	; 0x09
    3d2a:	1a 87       	std	Y+10, r17	; 0x0a
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	ff de       	rcall	.-514    	; 0x3b2e <_turn_off>
    3d30:	80 e2       	ldi	r24, 0x20	; 32
    3d32:	83 bb       	out	0x13, r24	; 19
    3d34:	84 e3       	ldi	r24, 0x34	; 52
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	9d 87       	std	Y+13, r25	; 0x0d
    3d3a:	8c 87       	std	Y+12, r24	; 0x0c
    3d3c:	85 e0       	ldi	r24, 0x05	; 5
    3d3e:	8e 87       	std	Y+14, r24	; 0x0e
    3d40:	1f 86       	std	Y+15, r1	; 0x0f
    3d42:	18 8b       	std	Y+16, r17	; 0x10
    3d44:	82 e0       	ldi	r24, 0x02	; 2
    3d46:	f3 de       	rcall	.-538    	; 0x3b2e <_turn_off>
    3d48:	80 e1       	ldi	r24, 0x10	; 16
    3d4a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    3d4e:	82 e0       	ldi	r24, 0x02	; 2
    3d50:	91 e0       	ldi	r25, 0x01	; 1
    3d52:	9b 8b       	std	Y+19, r25	; 0x13
    3d54:	8a 8b       	std	Y+18, r24	; 0x12
    3d56:	1c 8b       	std	Y+20, r17	; 0x14
    3d58:	1d 8a       	std	Y+21, r1	; 0x15
    3d5a:	1e 8b       	std	Y+22, r17	; 0x16
    3d5c:	83 e0       	ldi	r24, 0x03	; 3
    3d5e:	e7 de       	rcall	.-562    	; 0x3b2e <_turn_off>
    3d60:	e1 2c       	mov	r14, r1
    3d62:	f1 2c       	mov	r15, r1
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 ec       	ldi	r20, 0xC0	; 192
    3d6a:	50 e0       	ldi	r21, 0x00	; 0
    3d6c:	67 ec       	ldi	r22, 0xC7	; 199
    3d6e:	74 e0       	ldi	r23, 0x04	; 4
    3d70:	8f e2       	ldi	r24, 0x2F	; 47
    3d72:	9e e1       	ldi	r25, 0x1E	; 30
    3d74:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <xTaskCreate>
    3d78:	df 91       	pop	r29
    3d7a:	cf 91       	pop	r28
    3d7c:	1f 91       	pop	r17
    3d7e:	0f 91       	pop	r16
    3d80:	ff 90       	pop	r15
    3d82:	ef 90       	pop	r14
    3d84:	08 95       	ret

00003d86 <_initTwiInterface>:
    3d86:	80 91 e7 13 	lds	r24, 0x13E7	; 0x8013e7 <_twiIsInitiated>
    3d8a:	81 11       	cpse	r24, r1
    3d8c:	0c c0       	rjmp	.+24     	; 0x3da6 <_initTwiInterface+0x20>
    3d8e:	8c e0       	ldi	r24, 0x0C	; 12
    3d90:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    3d94:	8f ef       	ldi	r24, 0xFF	; 255
    3d96:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3d9a:	84 e0       	ldi	r24, 0x04	; 4
    3d9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	80 93 e7 13 	sts	0x13E7, r24	; 0x8013e7 <_twiIsInitiated>
    3da6:	08 95       	ret

00003da8 <twiCreate>:
    3da8:	af 92       	push	r10
    3daa:	bf 92       	push	r11
    3dac:	cf 92       	push	r12
    3dae:	df 92       	push	r13
    3db0:	ef 92       	push	r14
    3db2:	ff 92       	push	r15
    3db4:	0f 93       	push	r16
    3db6:	1f 93       	push	r17
    3db8:	cf 93       	push	r28
    3dba:	df 93       	push	r29
    3dbc:	a8 2e       	mov	r10, r24
    3dbe:	b6 2e       	mov	r11, r22
    3dc0:	69 01       	movw	r12, r18
    3dc2:	7a 01       	movw	r14, r20
    3dc4:	84 e0       	ldi	r24, 0x04	; 4
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	3a d7       	rcall	.+3700   	; 0x4c3e <malloc>
    3dca:	ec 01       	movw	r28, r24
    3dcc:	89 2b       	or	r24, r25
    3dce:	61 f1       	breq	.+88     	; 0x3e28 <twiCreate+0x80>
    3dd0:	a8 82       	st	Y, r10
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	b8 12       	cpse	r11, r24
    3dd6:	12 c0       	rjmp	.+36     	; 0x3dfc <twiCreate+0x54>
    3dd8:	c7 01       	movw	r24, r14
    3dda:	b6 01       	movw	r22, r12
    3ddc:	20 ea       	ldi	r18, 0xA0	; 160
    3dde:	36 e8       	ldi	r19, 0x86	; 134
    3de0:	41 e0       	ldi	r20, 0x01	; 1
    3de2:	50 e0       	ldi	r21, 0x00	; 0
    3de4:	02 d7       	rcall	.+3588   	; 0x4bea <__udivmodsi4>
    3de6:	da 01       	movw	r26, r20
    3de8:	c9 01       	movw	r24, r18
    3dea:	40 97       	sbiw	r24, 0x10	; 16
    3dec:	a1 09       	sbc	r26, r1
    3dee:	b1 09       	sbc	r27, r1
    3df0:	b6 95       	lsr	r27
    3df2:	a7 95       	ror	r26
    3df4:	97 95       	ror	r25
    3df6:	87 95       	ror	r24
    3df8:	89 83       	std	Y+1, r24	; 0x01
    3dfa:	11 c0       	rjmp	.+34     	; 0x3e1e <twiCreate+0x76>
    3dfc:	c7 01       	movw	r24, r14
    3dfe:	b6 01       	movw	r22, r12
    3e00:	20 e8       	ldi	r18, 0x80	; 128
    3e02:	3a e1       	ldi	r19, 0x1A	; 26
    3e04:	46 e0       	ldi	r20, 0x06	; 6
    3e06:	50 e0       	ldi	r21, 0x00	; 0
    3e08:	f0 d6       	rcall	.+3552   	; 0x4bea <__udivmodsi4>
    3e0a:	da 01       	movw	r26, r20
    3e0c:	c9 01       	movw	r24, r18
    3e0e:	40 97       	sbiw	r24, 0x10	; 16
    3e10:	a1 09       	sbc	r26, r1
    3e12:	b1 09       	sbc	r27, r1
    3e14:	b6 95       	lsr	r27
    3e16:	a7 95       	ror	r26
    3e18:	97 95       	ror	r25
    3e1a:	87 95       	ror	r24
    3e1c:	89 83       	std	Y+1, r24	; 0x01
    3e1e:	1b 83       	std	Y+3, r17	; 0x03
    3e20:	0a 83       	std	Y+2, r16	; 0x02
    3e22:	8c 2f       	mov	r24, r28
    3e24:	9d 2f       	mov	r25, r29
    3e26:	02 c0       	rjmp	.+4      	; 0x3e2c <twiCreate+0x84>
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	ff 90       	pop	r15
    3e36:	ef 90       	pop	r14
    3e38:	df 90       	pop	r13
    3e3a:	cf 90       	pop	r12
    3e3c:	bf 90       	pop	r11
    3e3e:	af 90       	pop	r10
    3e40:	08 95       	ret

00003e42 <twiIsBusy>:
    3e42:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3e46:	81 70       	andi	r24, 0x01	; 1
    3e48:	08 95       	ret

00003e4a <twiTransmit>:
    3e4a:	ff 92       	push	r15
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	00 97       	sbiw	r24, 0x00	; 0
    3e56:	d1 f1       	breq	.+116    	; 0x3ecc <twiTransmit+0x82>
    3e58:	4a 30       	cpi	r20, 0x0A	; 10
    3e5a:	d0 f5       	brcc	.+116    	; 0x3ed0 <twiTransmit+0x86>
    3e5c:	f4 2e       	mov	r15, r20
    3e5e:	8b 01       	movw	r16, r22
    3e60:	ec 01       	movw	r28, r24
    3e62:	ef df       	rcall	.-34     	; 0x3e42 <twiIsBusy>
    3e64:	81 11       	cpse	r24, r1
    3e66:	36 c0       	rjmp	.+108    	; 0x3ed4 <twiTransmit+0x8a>
    3e68:	80 91 da 13 	lds	r24, 0x13DA	; 0x8013da <_twiCurrentHandler>
    3e6c:	90 91 db 13 	lds	r25, 0x13DB	; 0x8013db <_twiCurrentHandler+0x1>
    3e70:	c8 17       	cp	r28, r24
    3e72:	d9 07       	cpc	r29, r25
    3e74:	41 f0       	breq	.+16     	; 0x3e86 <twiTransmit+0x3c>
    3e76:	87 df       	rcall	.-242    	; 0x3d86 <_initTwiInterface>
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    3e7e:	d0 93 db 13 	sts	0x13DB, r29	; 0x8013db <_twiCurrentHandler+0x1>
    3e82:	c0 93 da 13 	sts	0x13DA, r28	; 0x8013da <_twiCurrentHandler>
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	8f 0d       	add	r24, r15
    3e8a:	80 93 dc 13 	sts	0x13DC, r24	; 0x8013dc <_twiMessageLen>
    3e8e:	88 81       	ld	r24, Y
    3e90:	88 0f       	add	r24, r24
    3e92:	80 93 dd 13 	sts	0x13DD, r24	; 0x8013dd <_twiMessageBuffer>
    3e96:	ff 20       	and	r15, r15
    3e98:	89 f0       	breq	.+34     	; 0x3ebc <twiTransmit+0x72>
    3e9a:	f8 01       	movw	r30, r16
    3e9c:	ae ed       	ldi	r26, 0xDE	; 222
    3e9e:	b3 e1       	ldi	r27, 0x13	; 19
    3ea0:	4f ef       	ldi	r20, 0xFF	; 255
    3ea2:	4f 0d       	add	r20, r15
    3ea4:	64 2f       	mov	r22, r20
    3ea6:	70 e0       	ldi	r23, 0x00	; 0
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	01 96       	adiw	r24, 0x01	; 1
    3eac:	b8 01       	movw	r22, r16
    3eae:	68 0f       	add	r22, r24
    3eb0:	79 1f       	adc	r23, r25
    3eb2:	81 91       	ld	r24, Z+
    3eb4:	8d 93       	st	X+, r24
    3eb6:	e6 17       	cp	r30, r22
    3eb8:	f7 07       	cpc	r31, r23
    3eba:	d9 f7       	brne	.-10     	; 0x3eb2 <twiTransmit+0x68>
    3ebc:	88 ef       	ldi	r24, 0xF8	; 248
    3ebe:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3ec2:	85 ea       	ldi	r24, 0xA5	; 165
    3ec4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3ec8:	84 e0       	ldi	r24, 0x04	; 4
    3eca:	05 c0       	rjmp	.+10     	; 0x3ed6 <twiTransmit+0x8c>
    3ecc:	86 e0       	ldi	r24, 0x06	; 6
    3ece:	03 c0       	rjmp	.+6      	; 0x3ed6 <twiTransmit+0x8c>
    3ed0:	87 e0       	ldi	r24, 0x07	; 7
    3ed2:	01 c0       	rjmp	.+2      	; 0x3ed6 <twiTransmit+0x8c>
    3ed4:	82 e0       	ldi	r24, 0x02	; 2
    3ed6:	df 91       	pop	r29
    3ed8:	cf 91       	pop	r28
    3eda:	1f 91       	pop	r17
    3edc:	0f 91       	pop	r16
    3ede:	ff 90       	pop	r15
    3ee0:	08 95       	ret

00003ee2 <twiReceive>:
    3ee2:	1f 93       	push	r17
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	00 97       	sbiw	r24, 0x00	; 0
    3eea:	29 f1       	breq	.+74     	; 0x3f36 <twiReceive+0x54>
    3eec:	6b 30       	cpi	r22, 0x0B	; 11
    3eee:	28 f5       	brcc	.+74     	; 0x3f3a <twiReceive+0x58>
    3ef0:	16 2f       	mov	r17, r22
    3ef2:	ec 01       	movw	r28, r24
    3ef4:	a6 df       	rcall	.-180    	; 0x3e42 <twiIsBusy>
    3ef6:	81 11       	cpse	r24, r1
    3ef8:	22 c0       	rjmp	.+68     	; 0x3f3e <twiReceive+0x5c>
    3efa:	80 91 da 13 	lds	r24, 0x13DA	; 0x8013da <_twiCurrentHandler>
    3efe:	90 91 db 13 	lds	r25, 0x13DB	; 0x8013db <_twiCurrentHandler+0x1>
    3f02:	c8 17       	cp	r28, r24
    3f04:	d9 07       	cpc	r29, r25
    3f06:	41 f0       	breq	.+16     	; 0x3f18 <twiReceive+0x36>
    3f08:	3e df       	rcall	.-388    	; 0x3d86 <_initTwiInterface>
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    3f10:	d0 93 db 13 	sts	0x13DB, r29	; 0x8013db <_twiCurrentHandler+0x1>
    3f14:	c0 93 da 13 	sts	0x13DA, r28	; 0x8013da <_twiCurrentHandler>
    3f18:	10 93 dc 13 	sts	0x13DC, r17	; 0x8013dc <_twiMessageLen>
    3f1c:	88 81       	ld	r24, Y
    3f1e:	88 0f       	add	r24, r24
    3f20:	81 60       	ori	r24, 0x01	; 1
    3f22:	80 93 dd 13 	sts	0x13DD, r24	; 0x8013dd <_twiMessageBuffer>
    3f26:	88 ef       	ldi	r24, 0xF8	; 248
    3f28:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    3f2c:	85 ea       	ldi	r24, 0xA5	; 165
    3f2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3f32:	85 e0       	ldi	r24, 0x05	; 5
    3f34:	05 c0       	rjmp	.+10     	; 0x3f40 <twiReceive+0x5e>
    3f36:	86 e0       	ldi	r24, 0x06	; 6
    3f38:	03 c0       	rjmp	.+6      	; 0x3f40 <twiReceive+0x5e>
    3f3a:	87 e0       	ldi	r24, 0x07	; 7
    3f3c:	01 c0       	rjmp	.+2      	; 0x3f40 <twiReceive+0x5e>
    3f3e:	82 e0       	ldi	r24, 0x02	; 2
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	1f 91       	pop	r17
    3f46:	08 95       	ret

00003f48 <__vector_39>:
    3f48:	1f 92       	push	r1
    3f4a:	0f 92       	push	r0
    3f4c:	0f b6       	in	r0, 0x3f	; 63
    3f4e:	0f 92       	push	r0
    3f50:	11 24       	eor	r1, r1
    3f52:	0b b6       	in	r0, 0x3b	; 59
    3f54:	0f 92       	push	r0
    3f56:	2f 93       	push	r18
    3f58:	3f 93       	push	r19
    3f5a:	4f 93       	push	r20
    3f5c:	5f 93       	push	r21
    3f5e:	6f 93       	push	r22
    3f60:	7f 93       	push	r23
    3f62:	8f 93       	push	r24
    3f64:	9f 93       	push	r25
    3f66:	af 93       	push	r26
    3f68:	bf 93       	push	r27
    3f6a:	ef 93       	push	r30
    3f6c:	ff 93       	push	r31
    3f6e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3f72:	8e 2f       	mov	r24, r30
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	fc 01       	movw	r30, r24
    3f78:	38 97       	sbiw	r30, 0x08	; 8
    3f7a:	e1 35       	cpi	r30, 0x51	; 81
    3f7c:	f1 05       	cpc	r31, r1
    3f7e:	08 f0       	brcs	.+2      	; 0x3f82 <__vector_39+0x3a>
    3f80:	75 c0       	rjmp	.+234    	; 0x406c <__vector_39+0x124>
    3f82:	88 27       	eor	r24, r24
    3f84:	e4 58       	subi	r30, 0x84	; 132
    3f86:	ff 4f       	sbci	r31, 0xFF	; 255
    3f88:	8f 4f       	sbci	r24, 0xFF	; 255
    3f8a:	51 c6       	rjmp	.+3234   	; 0x4c2e <__tablejump2__>
    3f8c:	10 92 d9 13 	sts	0x13D9, r1	; 0x8013d9 <_index.1885>
    3f90:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <_index.1885>
    3f94:	80 91 dc 13 	lds	r24, 0x13DC	; 0x8013dc <_twiMessageLen>
    3f98:	e8 17       	cp	r30, r24
    3f9a:	70 f4       	brcc	.+28     	; 0x3fb8 <__vector_39+0x70>
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	8e 0f       	add	r24, r30
    3fa0:	80 93 d9 13 	sts	0x13D9, r24	; 0x8013d9 <_index.1885>
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	e3 52       	subi	r30, 0x23	; 35
    3fa8:	fc 4e       	sbci	r31, 0xEC	; 236
    3faa:	80 81       	ld	r24, Z
    3fac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3fb0:	85 e8       	ldi	r24, 0x85	; 133
    3fb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3fb6:	72 c0       	rjmp	.+228    	; 0x409c <__vector_39+0x154>
    3fb8:	84 e9       	ldi	r24, 0x94	; 148
    3fba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    3fbe:	80 91 da 13 	lds	r24, 0x13DA	; 0x8013da <_twiCurrentHandler>
    3fc2:	90 91 db 13 	lds	r25, 0x13DB	; 0x8013db <_twiCurrentHandler+0x1>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	12 96       	adiw	r26, 0x02	; 2
    3fca:	ed 91       	ld	r30, X+
    3fcc:	fc 91       	ld	r31, X
    3fce:	13 97       	sbiw	r26, 0x03	; 3
    3fd0:	30 97       	sbiw	r30, 0x00	; 0
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <__vector_39+0x8e>
    3fd4:	63 c0       	rjmp	.+198    	; 0x409c <__vector_39+0x154>
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	40 e0       	ldi	r20, 0x00	; 0
    3fda:	50 e0       	ldi	r21, 0x00	; 0
    3fdc:	64 e0       	ldi	r22, 0x04	; 4
    3fde:	19 95       	eicall
    3fe0:	5d c0       	rjmp	.+186    	; 0x409c <__vector_39+0x154>
    3fe2:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <_index.1885>
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	8e 0f       	add	r24, r30
    3fea:	80 93 d9 13 	sts	0x13D9, r24	; 0x8013d9 <_index.1885>
    3fee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	e3 52       	subi	r30, 0x23	; 35
    3ff6:	fc 4e       	sbci	r31, 0xEC	; 236
    3ff8:	80 83       	st	Z, r24
    3ffa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    3ffe:	80 34       	cpi	r24, 0x40	; 64
    4000:	11 f4       	brne	.+4      	; 0x4006 <__vector_39+0xbe>
    4002:	10 92 d9 13 	sts	0x13D9, r1	; 0x8013d9 <_index.1885>
    4006:	20 91 d9 13 	lds	r18, 0x13D9	; 0x8013d9 <_index.1885>
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	80 91 dc 13 	lds	r24, 0x13DC	; 0x8013dc <_twiMessageLen>
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	01 97       	sbiw	r24, 0x01	; 1
    4014:	28 17       	cp	r18, r24
    4016:	39 07       	cpc	r19, r25
    4018:	24 f4       	brge	.+8      	; 0x4022 <__vector_39+0xda>
    401a:	85 ec       	ldi	r24, 0xC5	; 197
    401c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4020:	3d c0       	rjmp	.+122    	; 0x409c <__vector_39+0x154>
    4022:	85 e8       	ldi	r24, 0x85	; 133
    4024:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4028:	39 c0       	rjmp	.+114    	; 0x409c <__vector_39+0x154>
    402a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    402e:	e0 91 d9 13 	lds	r30, 0x13D9	; 0x8013d9 <_index.1885>
    4032:	f0 e0       	ldi	r31, 0x00	; 0
    4034:	e3 52       	subi	r30, 0x23	; 35
    4036:	fc 4e       	sbci	r31, 0xEC	; 236
    4038:	80 83       	st	Z, r24
    403a:	84 e9       	ldi	r24, 0x94	; 148
    403c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4040:	80 91 da 13 	lds	r24, 0x13DA	; 0x8013da <_twiCurrentHandler>
    4044:	90 91 db 13 	lds	r25, 0x13DB	; 0x8013db <_twiCurrentHandler+0x1>
    4048:	dc 01       	movw	r26, r24
    404a:	12 96       	adiw	r26, 0x02	; 2
    404c:	ed 91       	ld	r30, X+
    404e:	fc 91       	ld	r31, X
    4050:	13 97       	sbiw	r26, 0x03	; 3
    4052:	30 97       	sbiw	r30, 0x00	; 0
    4054:	19 f1       	breq	.+70     	; 0x409c <__vector_39+0x154>
    4056:	20 91 dc 13 	lds	r18, 0x13DC	; 0x8013dc <_twiMessageLen>
    405a:	4d ed       	ldi	r20, 0xDD	; 221
    405c:	53 e1       	ldi	r21, 0x13	; 19
    405e:	65 e0       	ldi	r22, 0x05	; 5
    4060:	19 95       	eicall
    4062:	1c c0       	rjmp	.+56     	; 0x409c <__vector_39+0x154>
    4064:	85 ea       	ldi	r24, 0xA5	; 165
    4066:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    406a:	18 c0       	rjmp	.+48     	; 0x409c <__vector_39+0x154>
    406c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4070:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4074:	84 e0       	ldi	r24, 0x04	; 4
    4076:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    407a:	80 91 da 13 	lds	r24, 0x13DA	; 0x8013da <_twiCurrentHandler>
    407e:	90 91 db 13 	lds	r25, 0x13DB	; 0x8013db <_twiCurrentHandler+0x1>
    4082:	dc 01       	movw	r26, r24
    4084:	12 96       	adiw	r26, 0x02	; 2
    4086:	ed 91       	ld	r30, X+
    4088:	fc 91       	ld	r31, X
    408a:	13 97       	sbiw	r26, 0x03	; 3
    408c:	30 97       	sbiw	r30, 0x00	; 0
    408e:	31 f0       	breq	.+12     	; 0x409c <__vector_39+0x154>
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	50 e0       	ldi	r21, 0x00	; 0
    4096:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    409a:	19 95       	eicall
    409c:	ff 91       	pop	r31
    409e:	ef 91       	pop	r30
    40a0:	bf 91       	pop	r27
    40a2:	af 91       	pop	r26
    40a4:	9f 91       	pop	r25
    40a6:	8f 91       	pop	r24
    40a8:	7f 91       	pop	r23
    40aa:	6f 91       	pop	r22
    40ac:	5f 91       	pop	r21
    40ae:	4f 91       	pop	r20
    40b0:	3f 91       	pop	r19
    40b2:	2f 91       	pop	r18
    40b4:	0f 90       	pop	r0
    40b6:	0b be       	out	0x3b, r0	; 59
    40b8:	0f 90       	pop	r0
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	0f 90       	pop	r0
    40be:	1f 90       	pop	r1
    40c0:	18 95       	reti

000040c2 <fifo_init>:
    40c2:	fc 01       	movw	r30, r24
    40c4:	41 11       	cpse	r20, r1
    40c6:	01 c0       	rjmp	.+2      	; 0x40ca <fifo_init+0x8>
    40c8:	db d6       	rcall	.+3510   	; 0x4e80 <abort>
    40ca:	84 2f       	mov	r24, r20
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	9c 01       	movw	r18, r24
    40d0:	21 50       	subi	r18, 0x01	; 1
    40d2:	31 09       	sbc	r19, r1
    40d4:	82 23       	and	r24, r18
    40d6:	93 23       	and	r25, r19
    40d8:	89 2b       	or	r24, r25
    40da:	09 f0       	breq	.+2      	; 0x40de <fifo_init+0x1c>
    40dc:	d1 d6       	rcall	.+3490   	; 0x4e80 <abort>
    40de:	41 38       	cpi	r20, 0x81	; 129
    40e0:	08 f0       	brcs	.+2      	; 0x40e4 <fifo_init+0x22>
    40e2:	ce d6       	rcall	.+3484   	; 0x4e80 <abort>
    40e4:	12 82       	std	Z+2, r1	; 0x02
    40e6:	13 82       	std	Z+3, r1	; 0x03
    40e8:	44 83       	std	Z+4, r20	; 0x04
    40ea:	44 0f       	add	r20, r20
    40ec:	41 50       	subi	r20, 0x01	; 1
    40ee:	45 83       	std	Z+5, r20	; 0x05
    40f0:	71 83       	std	Z+1, r23	; 0x01
    40f2:	60 83       	st	Z, r22
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	08 95       	ret

000040fa <vfprintf>:
    40fa:	2f 92       	push	r2
    40fc:	3f 92       	push	r3
    40fe:	4f 92       	push	r4
    4100:	5f 92       	push	r5
    4102:	6f 92       	push	r6
    4104:	7f 92       	push	r7
    4106:	8f 92       	push	r8
    4108:	9f 92       	push	r9
    410a:	af 92       	push	r10
    410c:	bf 92       	push	r11
    410e:	cf 92       	push	r12
    4110:	df 92       	push	r13
    4112:	ef 92       	push	r14
    4114:	ff 92       	push	r15
    4116:	0f 93       	push	r16
    4118:	1f 93       	push	r17
    411a:	cf 93       	push	r28
    411c:	df 93       	push	r29
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
    4122:	60 97       	sbiw	r28, 0x10	; 16
    4124:	0f b6       	in	r0, 0x3f	; 63
    4126:	f8 94       	cli
    4128:	de bf       	out	0x3e, r29	; 62
    412a:	0f be       	out	0x3f, r0	; 63
    412c:	cd bf       	out	0x3d, r28	; 61
    412e:	7c 01       	movw	r14, r24
    4130:	1b 01       	movw	r2, r22
    4132:	6a 01       	movw	r12, r20
    4134:	fc 01       	movw	r30, r24
    4136:	17 82       	std	Z+7, r1	; 0x07
    4138:	16 82       	std	Z+6, r1	; 0x06
    413a:	83 81       	ldd	r24, Z+3	; 0x03
    413c:	81 ff       	sbrs	r24, 1
    413e:	2a c3       	rjmp	.+1620   	; 0x4794 <vfprintf+0x69a>
    4140:	9e 01       	movw	r18, r28
    4142:	2f 5f       	subi	r18, 0xFF	; 255
    4144:	3f 4f       	sbci	r19, 0xFF	; 255
    4146:	39 01       	movw	r6, r18
    4148:	f7 01       	movw	r30, r14
    414a:	93 81       	ldd	r25, Z+3	; 0x03
    414c:	f1 01       	movw	r30, r2
    414e:	93 fd       	sbrc	r25, 3
    4150:	85 91       	lpm	r24, Z+
    4152:	93 ff       	sbrs	r25, 3
    4154:	81 91       	ld	r24, Z+
    4156:	1f 01       	movw	r2, r30
    4158:	88 23       	and	r24, r24
    415a:	09 f4       	brne	.+2      	; 0x415e <vfprintf+0x64>
    415c:	17 c3       	rjmp	.+1582   	; 0x478c <vfprintf+0x692>
    415e:	85 32       	cpi	r24, 0x25	; 37
    4160:	39 f4       	brne	.+14     	; 0x4170 <vfprintf+0x76>
    4162:	93 fd       	sbrc	r25, 3
    4164:	85 91       	lpm	r24, Z+
    4166:	93 ff       	sbrs	r25, 3
    4168:	81 91       	ld	r24, Z+
    416a:	1f 01       	movw	r2, r30
    416c:	85 32       	cpi	r24, 0x25	; 37
    416e:	31 f4       	brne	.+12     	; 0x417c <vfprintf+0x82>
    4170:	b7 01       	movw	r22, r14
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	87 d7       	rcall	.+3854   	; 0x5084 <fputc>
    4176:	56 01       	movw	r10, r12
    4178:	65 01       	movw	r12, r10
    417a:	e6 cf       	rjmp	.-52     	; 0x4148 <vfprintf+0x4e>
    417c:	10 e0       	ldi	r17, 0x00	; 0
    417e:	51 2c       	mov	r5, r1
    4180:	91 2c       	mov	r9, r1
    4182:	ff e1       	ldi	r31, 0x1F	; 31
    4184:	f9 15       	cp	r31, r9
    4186:	d8 f0       	brcs	.+54     	; 0x41be <vfprintf+0xc4>
    4188:	8b 32       	cpi	r24, 0x2B	; 43
    418a:	79 f0       	breq	.+30     	; 0x41aa <vfprintf+0xb0>
    418c:	38 f4       	brcc	.+14     	; 0x419c <vfprintf+0xa2>
    418e:	80 32       	cpi	r24, 0x20	; 32
    4190:	79 f0       	breq	.+30     	; 0x41b0 <vfprintf+0xb6>
    4192:	83 32       	cpi	r24, 0x23	; 35
    4194:	a1 f4       	brne	.+40     	; 0x41be <vfprintf+0xc4>
    4196:	f9 2d       	mov	r31, r9
    4198:	f0 61       	ori	r31, 0x10	; 16
    419a:	2e c0       	rjmp	.+92     	; 0x41f8 <vfprintf+0xfe>
    419c:	8d 32       	cpi	r24, 0x2D	; 45
    419e:	61 f0       	breq	.+24     	; 0x41b8 <vfprintf+0xbe>
    41a0:	80 33       	cpi	r24, 0x30	; 48
    41a2:	69 f4       	brne	.+26     	; 0x41be <vfprintf+0xc4>
    41a4:	29 2d       	mov	r18, r9
    41a6:	21 60       	ori	r18, 0x01	; 1
    41a8:	2d c0       	rjmp	.+90     	; 0x4204 <vfprintf+0x10a>
    41aa:	39 2d       	mov	r19, r9
    41ac:	32 60       	ori	r19, 0x02	; 2
    41ae:	93 2e       	mov	r9, r19
    41b0:	89 2d       	mov	r24, r9
    41b2:	84 60       	ori	r24, 0x04	; 4
    41b4:	98 2e       	mov	r9, r24
    41b6:	2a c0       	rjmp	.+84     	; 0x420c <vfprintf+0x112>
    41b8:	e9 2d       	mov	r30, r9
    41ba:	e8 60       	ori	r30, 0x08	; 8
    41bc:	15 c0       	rjmp	.+42     	; 0x41e8 <vfprintf+0xee>
    41be:	97 fc       	sbrc	r9, 7
    41c0:	2d c0       	rjmp	.+90     	; 0x421c <vfprintf+0x122>
    41c2:	20 ed       	ldi	r18, 0xD0	; 208
    41c4:	28 0f       	add	r18, r24
    41c6:	2a 30       	cpi	r18, 0x0A	; 10
    41c8:	88 f4       	brcc	.+34     	; 0x41ec <vfprintf+0xf2>
    41ca:	96 fe       	sbrs	r9, 6
    41cc:	06 c0       	rjmp	.+12     	; 0x41da <vfprintf+0xe0>
    41ce:	3a e0       	ldi	r19, 0x0A	; 10
    41d0:	13 9f       	mul	r17, r19
    41d2:	20 0d       	add	r18, r0
    41d4:	11 24       	eor	r1, r1
    41d6:	12 2f       	mov	r17, r18
    41d8:	19 c0       	rjmp	.+50     	; 0x420c <vfprintf+0x112>
    41da:	8a e0       	ldi	r24, 0x0A	; 10
    41dc:	58 9e       	mul	r5, r24
    41de:	20 0d       	add	r18, r0
    41e0:	11 24       	eor	r1, r1
    41e2:	52 2e       	mov	r5, r18
    41e4:	e9 2d       	mov	r30, r9
    41e6:	e0 62       	ori	r30, 0x20	; 32
    41e8:	9e 2e       	mov	r9, r30
    41ea:	10 c0       	rjmp	.+32     	; 0x420c <vfprintf+0x112>
    41ec:	8e 32       	cpi	r24, 0x2E	; 46
    41ee:	31 f4       	brne	.+12     	; 0x41fc <vfprintf+0x102>
    41f0:	96 fc       	sbrc	r9, 6
    41f2:	cc c2       	rjmp	.+1432   	; 0x478c <vfprintf+0x692>
    41f4:	f9 2d       	mov	r31, r9
    41f6:	f0 64       	ori	r31, 0x40	; 64
    41f8:	9f 2e       	mov	r9, r31
    41fa:	08 c0       	rjmp	.+16     	; 0x420c <vfprintf+0x112>
    41fc:	8c 36       	cpi	r24, 0x6C	; 108
    41fe:	21 f4       	brne	.+8      	; 0x4208 <vfprintf+0x10e>
    4200:	29 2d       	mov	r18, r9
    4202:	20 68       	ori	r18, 0x80	; 128
    4204:	92 2e       	mov	r9, r18
    4206:	02 c0       	rjmp	.+4      	; 0x420c <vfprintf+0x112>
    4208:	88 36       	cpi	r24, 0x68	; 104
    420a:	41 f4       	brne	.+16     	; 0x421c <vfprintf+0x122>
    420c:	f1 01       	movw	r30, r2
    420e:	93 fd       	sbrc	r25, 3
    4210:	85 91       	lpm	r24, Z+
    4212:	93 ff       	sbrs	r25, 3
    4214:	81 91       	ld	r24, Z+
    4216:	1f 01       	movw	r2, r30
    4218:	81 11       	cpse	r24, r1
    421a:	b3 cf       	rjmp	.-154    	; 0x4182 <vfprintf+0x88>
    421c:	9b eb       	ldi	r25, 0xBB	; 187
    421e:	98 0f       	add	r25, r24
    4220:	93 30       	cpi	r25, 0x03	; 3
    4222:	20 f4       	brcc	.+8      	; 0x422c <vfprintf+0x132>
    4224:	99 2d       	mov	r25, r9
    4226:	90 61       	ori	r25, 0x10	; 16
    4228:	80 5e       	subi	r24, 0xE0	; 224
    422a:	07 c0       	rjmp	.+14     	; 0x423a <vfprintf+0x140>
    422c:	9b e9       	ldi	r25, 0x9B	; 155
    422e:	98 0f       	add	r25, r24
    4230:	93 30       	cpi	r25, 0x03	; 3
    4232:	08 f0       	brcs	.+2      	; 0x4236 <vfprintf+0x13c>
    4234:	59 c1       	rjmp	.+690    	; 0x44e8 <vfprintf+0x3ee>
    4236:	99 2d       	mov	r25, r9
    4238:	9f 7e       	andi	r25, 0xEF	; 239
    423a:	96 ff       	sbrs	r25, 6
    423c:	16 e0       	ldi	r17, 0x06	; 6
    423e:	9f 73       	andi	r25, 0x3F	; 63
    4240:	99 2e       	mov	r9, r25
    4242:	85 36       	cpi	r24, 0x65	; 101
    4244:	19 f4       	brne	.+6      	; 0x424c <vfprintf+0x152>
    4246:	90 64       	ori	r25, 0x40	; 64
    4248:	99 2e       	mov	r9, r25
    424a:	08 c0       	rjmp	.+16     	; 0x425c <vfprintf+0x162>
    424c:	86 36       	cpi	r24, 0x66	; 102
    424e:	21 f4       	brne	.+8      	; 0x4258 <vfprintf+0x15e>
    4250:	39 2f       	mov	r19, r25
    4252:	30 68       	ori	r19, 0x80	; 128
    4254:	93 2e       	mov	r9, r19
    4256:	02 c0       	rjmp	.+4      	; 0x425c <vfprintf+0x162>
    4258:	11 11       	cpse	r17, r1
    425a:	11 50       	subi	r17, 0x01	; 1
    425c:	97 fe       	sbrs	r9, 7
    425e:	07 c0       	rjmp	.+14     	; 0x426e <vfprintf+0x174>
    4260:	1c 33       	cpi	r17, 0x3C	; 60
    4262:	50 f4       	brcc	.+20     	; 0x4278 <vfprintf+0x17e>
    4264:	44 24       	eor	r4, r4
    4266:	43 94       	inc	r4
    4268:	41 0e       	add	r4, r17
    426a:	27 e0       	ldi	r18, 0x07	; 7
    426c:	0b c0       	rjmp	.+22     	; 0x4284 <vfprintf+0x18a>
    426e:	18 30       	cpi	r17, 0x08	; 8
    4270:	38 f0       	brcs	.+14     	; 0x4280 <vfprintf+0x186>
    4272:	27 e0       	ldi	r18, 0x07	; 7
    4274:	17 e0       	ldi	r17, 0x07	; 7
    4276:	05 c0       	rjmp	.+10     	; 0x4282 <vfprintf+0x188>
    4278:	27 e0       	ldi	r18, 0x07	; 7
    427a:	9c e3       	ldi	r25, 0x3C	; 60
    427c:	49 2e       	mov	r4, r25
    427e:	02 c0       	rjmp	.+4      	; 0x4284 <vfprintf+0x18a>
    4280:	21 2f       	mov	r18, r17
    4282:	41 2c       	mov	r4, r1
    4284:	56 01       	movw	r10, r12
    4286:	84 e0       	ldi	r24, 0x04	; 4
    4288:	a8 0e       	add	r10, r24
    428a:	b1 1c       	adc	r11, r1
    428c:	f6 01       	movw	r30, r12
    428e:	60 81       	ld	r22, Z
    4290:	71 81       	ldd	r23, Z+1	; 0x01
    4292:	82 81       	ldd	r24, Z+2	; 0x02
    4294:	93 81       	ldd	r25, Z+3	; 0x03
    4296:	04 2d       	mov	r16, r4
    4298:	a3 01       	movw	r20, r6
    429a:	f6 d5       	rcall	.+3052   	; 0x4e88 <__ftoa_engine>
    429c:	6c 01       	movw	r12, r24
    429e:	f9 81       	ldd	r31, Y+1	; 0x01
    42a0:	fc 87       	std	Y+12, r31	; 0x0c
    42a2:	f0 ff       	sbrs	r31, 0
    42a4:	02 c0       	rjmp	.+4      	; 0x42aa <vfprintf+0x1b0>
    42a6:	f3 ff       	sbrs	r31, 3
    42a8:	06 c0       	rjmp	.+12     	; 0x42b6 <vfprintf+0x1bc>
    42aa:	91 fc       	sbrc	r9, 1
    42ac:	06 c0       	rjmp	.+12     	; 0x42ba <vfprintf+0x1c0>
    42ae:	92 fe       	sbrs	r9, 2
    42b0:	06 c0       	rjmp	.+12     	; 0x42be <vfprintf+0x1c4>
    42b2:	00 e2       	ldi	r16, 0x20	; 32
    42b4:	05 c0       	rjmp	.+10     	; 0x42c0 <vfprintf+0x1c6>
    42b6:	0d e2       	ldi	r16, 0x2D	; 45
    42b8:	03 c0       	rjmp	.+6      	; 0x42c0 <vfprintf+0x1c6>
    42ba:	0b e2       	ldi	r16, 0x2B	; 43
    42bc:	01 c0       	rjmp	.+2      	; 0x42c0 <vfprintf+0x1c6>
    42be:	00 e0       	ldi	r16, 0x00	; 0
    42c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    42c2:	8c 70       	andi	r24, 0x0C	; 12
    42c4:	19 f0       	breq	.+6      	; 0x42cc <vfprintf+0x1d2>
    42c6:	01 11       	cpse	r16, r1
    42c8:	43 c2       	rjmp	.+1158   	; 0x4750 <vfprintf+0x656>
    42ca:	80 c2       	rjmp	.+1280   	; 0x47cc <vfprintf+0x6d2>
    42cc:	97 fe       	sbrs	r9, 7
    42ce:	10 c0       	rjmp	.+32     	; 0x42f0 <vfprintf+0x1f6>
    42d0:	4c 0c       	add	r4, r12
    42d2:	fc 85       	ldd	r31, Y+12	; 0x0c
    42d4:	f4 ff       	sbrs	r31, 4
    42d6:	04 c0       	rjmp	.+8      	; 0x42e0 <vfprintf+0x1e6>
    42d8:	8a 81       	ldd	r24, Y+2	; 0x02
    42da:	81 33       	cpi	r24, 0x31	; 49
    42dc:	09 f4       	brne	.+2      	; 0x42e0 <vfprintf+0x1e6>
    42de:	4a 94       	dec	r4
    42e0:	14 14       	cp	r1, r4
    42e2:	74 f5       	brge	.+92     	; 0x4340 <vfprintf+0x246>
    42e4:	28 e0       	ldi	r18, 0x08	; 8
    42e6:	24 15       	cp	r18, r4
    42e8:	78 f5       	brcc	.+94     	; 0x4348 <vfprintf+0x24e>
    42ea:	88 e0       	ldi	r24, 0x08	; 8
    42ec:	48 2e       	mov	r4, r24
    42ee:	2c c0       	rjmp	.+88     	; 0x4348 <vfprintf+0x24e>
    42f0:	96 fc       	sbrc	r9, 6
    42f2:	2a c0       	rjmp	.+84     	; 0x4348 <vfprintf+0x24e>
    42f4:	81 2f       	mov	r24, r17
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	8c 15       	cp	r24, r12
    42fa:	9d 05       	cpc	r25, r13
    42fc:	9c f0       	brlt	.+38     	; 0x4324 <vfprintf+0x22a>
    42fe:	3c ef       	ldi	r19, 0xFC	; 252
    4300:	c3 16       	cp	r12, r19
    4302:	3f ef       	ldi	r19, 0xFF	; 255
    4304:	d3 06       	cpc	r13, r19
    4306:	74 f0       	brlt	.+28     	; 0x4324 <vfprintf+0x22a>
    4308:	89 2d       	mov	r24, r9
    430a:	80 68       	ori	r24, 0x80	; 128
    430c:	98 2e       	mov	r9, r24
    430e:	0a c0       	rjmp	.+20     	; 0x4324 <vfprintf+0x22a>
    4310:	e2 e0       	ldi	r30, 0x02	; 2
    4312:	f0 e0       	ldi	r31, 0x00	; 0
    4314:	ec 0f       	add	r30, r28
    4316:	fd 1f       	adc	r31, r29
    4318:	e1 0f       	add	r30, r17
    431a:	f1 1d       	adc	r31, r1
    431c:	80 81       	ld	r24, Z
    431e:	80 33       	cpi	r24, 0x30	; 48
    4320:	19 f4       	brne	.+6      	; 0x4328 <vfprintf+0x22e>
    4322:	11 50       	subi	r17, 0x01	; 1
    4324:	11 11       	cpse	r17, r1
    4326:	f4 cf       	rjmp	.-24     	; 0x4310 <vfprintf+0x216>
    4328:	97 fe       	sbrs	r9, 7
    432a:	0e c0       	rjmp	.+28     	; 0x4348 <vfprintf+0x24e>
    432c:	44 24       	eor	r4, r4
    432e:	43 94       	inc	r4
    4330:	41 0e       	add	r4, r17
    4332:	81 2f       	mov	r24, r17
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	c8 16       	cp	r12, r24
    4338:	d9 06       	cpc	r13, r25
    433a:	2c f4       	brge	.+10     	; 0x4346 <vfprintf+0x24c>
    433c:	1c 19       	sub	r17, r12
    433e:	04 c0       	rjmp	.+8      	; 0x4348 <vfprintf+0x24e>
    4340:	44 24       	eor	r4, r4
    4342:	43 94       	inc	r4
    4344:	01 c0       	rjmp	.+2      	; 0x4348 <vfprintf+0x24e>
    4346:	10 e0       	ldi	r17, 0x00	; 0
    4348:	97 fe       	sbrs	r9, 7
    434a:	06 c0       	rjmp	.+12     	; 0x4358 <vfprintf+0x25e>
    434c:	1c 14       	cp	r1, r12
    434e:	1d 04       	cpc	r1, r13
    4350:	34 f4       	brge	.+12     	; 0x435e <vfprintf+0x264>
    4352:	c6 01       	movw	r24, r12
    4354:	01 96       	adiw	r24, 0x01	; 1
    4356:	05 c0       	rjmp	.+10     	; 0x4362 <vfprintf+0x268>
    4358:	85 e0       	ldi	r24, 0x05	; 5
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	02 c0       	rjmp	.+4      	; 0x4362 <vfprintf+0x268>
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	01 11       	cpse	r16, r1
    4364:	01 96       	adiw	r24, 0x01	; 1
    4366:	11 23       	and	r17, r17
    4368:	31 f0       	breq	.+12     	; 0x4376 <vfprintf+0x27c>
    436a:	21 2f       	mov	r18, r17
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	2f 5f       	subi	r18, 0xFF	; 255
    4370:	3f 4f       	sbci	r19, 0xFF	; 255
    4372:	82 0f       	add	r24, r18
    4374:	93 1f       	adc	r25, r19
    4376:	25 2d       	mov	r18, r5
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	82 17       	cp	r24, r18
    437c:	93 07       	cpc	r25, r19
    437e:	14 f4       	brge	.+4      	; 0x4384 <vfprintf+0x28a>
    4380:	58 1a       	sub	r5, r24
    4382:	01 c0       	rjmp	.+2      	; 0x4386 <vfprintf+0x28c>
    4384:	51 2c       	mov	r5, r1
    4386:	89 2d       	mov	r24, r9
    4388:	89 70       	andi	r24, 0x09	; 9
    438a:	41 f4       	brne	.+16     	; 0x439c <vfprintf+0x2a2>
    438c:	55 20       	and	r5, r5
    438e:	31 f0       	breq	.+12     	; 0x439c <vfprintf+0x2a2>
    4390:	b7 01       	movw	r22, r14
    4392:	80 e2       	ldi	r24, 0x20	; 32
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	76 d6       	rcall	.+3308   	; 0x5084 <fputc>
    4398:	5a 94       	dec	r5
    439a:	f8 cf       	rjmp	.-16     	; 0x438c <vfprintf+0x292>
    439c:	00 23       	and	r16, r16
    439e:	21 f0       	breq	.+8      	; 0x43a8 <vfprintf+0x2ae>
    43a0:	b7 01       	movw	r22, r14
    43a2:	80 2f       	mov	r24, r16
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	6e d6       	rcall	.+3292   	; 0x5084 <fputc>
    43a8:	93 fc       	sbrc	r9, 3
    43aa:	08 c0       	rjmp	.+16     	; 0x43bc <vfprintf+0x2c2>
    43ac:	55 20       	and	r5, r5
    43ae:	31 f0       	breq	.+12     	; 0x43bc <vfprintf+0x2c2>
    43b0:	b7 01       	movw	r22, r14
    43b2:	80 e3       	ldi	r24, 0x30	; 48
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	66 d6       	rcall	.+3276   	; 0x5084 <fputc>
    43b8:	5a 94       	dec	r5
    43ba:	f8 cf       	rjmp	.-16     	; 0x43ac <vfprintf+0x2b2>
    43bc:	97 fe       	sbrs	r9, 7
    43be:	4a c0       	rjmp	.+148    	; 0x4454 <vfprintf+0x35a>
    43c0:	46 01       	movw	r8, r12
    43c2:	d7 fe       	sbrs	r13, 7
    43c4:	02 c0       	rjmp	.+4      	; 0x43ca <vfprintf+0x2d0>
    43c6:	81 2c       	mov	r8, r1
    43c8:	91 2c       	mov	r9, r1
    43ca:	c6 01       	movw	r24, r12
    43cc:	88 19       	sub	r24, r8
    43ce:	99 09       	sbc	r25, r9
    43d0:	f3 01       	movw	r30, r6
    43d2:	e8 0f       	add	r30, r24
    43d4:	f9 1f       	adc	r31, r25
    43d6:	fe 87       	std	Y+14, r31	; 0x0e
    43d8:	ed 87       	std	Y+13, r30	; 0x0d
    43da:	96 01       	movw	r18, r12
    43dc:	24 19       	sub	r18, r4
    43de:	31 09       	sbc	r19, r1
    43e0:	38 8b       	std	Y+16, r19	; 0x10
    43e2:	2f 87       	std	Y+15, r18	; 0x0f
    43e4:	01 2f       	mov	r16, r17
    43e6:	10 e0       	ldi	r17, 0x00	; 0
    43e8:	11 95       	neg	r17
    43ea:	01 95       	neg	r16
    43ec:	11 09       	sbc	r17, r1
    43ee:	3f ef       	ldi	r19, 0xFF	; 255
    43f0:	83 16       	cp	r8, r19
    43f2:	93 06       	cpc	r9, r19
    43f4:	21 f4       	brne	.+8      	; 0x43fe <vfprintf+0x304>
    43f6:	b7 01       	movw	r22, r14
    43f8:	8e e2       	ldi	r24, 0x2E	; 46
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	43 d6       	rcall	.+3206   	; 0x5084 <fputc>
    43fe:	c8 14       	cp	r12, r8
    4400:	d9 04       	cpc	r13, r9
    4402:	4c f0       	brlt	.+18     	; 0x4416 <vfprintf+0x31c>
    4404:	8f 85       	ldd	r24, Y+15	; 0x0f
    4406:	98 89       	ldd	r25, Y+16	; 0x10
    4408:	88 15       	cp	r24, r8
    440a:	99 05       	cpc	r25, r9
    440c:	24 f4       	brge	.+8      	; 0x4416 <vfprintf+0x31c>
    440e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4410:	fe 85       	ldd	r31, Y+14	; 0x0e
    4412:	81 81       	ldd	r24, Z+1	; 0x01
    4414:	01 c0       	rjmp	.+2      	; 0x4418 <vfprintf+0x31e>
    4416:	80 e3       	ldi	r24, 0x30	; 48
    4418:	f1 e0       	ldi	r31, 0x01	; 1
    441a:	8f 1a       	sub	r8, r31
    441c:	91 08       	sbc	r9, r1
    441e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4420:	3e 85       	ldd	r19, Y+14	; 0x0e
    4422:	2f 5f       	subi	r18, 0xFF	; 255
    4424:	3f 4f       	sbci	r19, 0xFF	; 255
    4426:	3e 87       	std	Y+14, r19	; 0x0e
    4428:	2d 87       	std	Y+13, r18	; 0x0d
    442a:	80 16       	cp	r8, r16
    442c:	91 06       	cpc	r9, r17
    442e:	24 f0       	brlt	.+8      	; 0x4438 <vfprintf+0x33e>
    4430:	b7 01       	movw	r22, r14
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	27 d6       	rcall	.+3150   	; 0x5084 <fputc>
    4436:	db cf       	rjmp	.-74     	; 0x43ee <vfprintf+0x2f4>
    4438:	c8 14       	cp	r12, r8
    443a:	d9 04       	cpc	r13, r9
    443c:	41 f4       	brne	.+16     	; 0x444e <vfprintf+0x354>
    443e:	9a 81       	ldd	r25, Y+2	; 0x02
    4440:	96 33       	cpi	r25, 0x36	; 54
    4442:	20 f4       	brcc	.+8      	; 0x444c <vfprintf+0x352>
    4444:	95 33       	cpi	r25, 0x35	; 53
    4446:	19 f4       	brne	.+6      	; 0x444e <vfprintf+0x354>
    4448:	3c 85       	ldd	r19, Y+12	; 0x0c
    444a:	34 ff       	sbrs	r19, 4
    444c:	81 e3       	ldi	r24, 0x31	; 49
    444e:	b7 01       	movw	r22, r14
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	48 c0       	rjmp	.+144    	; 0x44e4 <vfprintf+0x3ea>
    4454:	8a 81       	ldd	r24, Y+2	; 0x02
    4456:	81 33       	cpi	r24, 0x31	; 49
    4458:	19 f0       	breq	.+6      	; 0x4460 <vfprintf+0x366>
    445a:	9c 85       	ldd	r25, Y+12	; 0x0c
    445c:	9f 7e       	andi	r25, 0xEF	; 239
    445e:	9c 87       	std	Y+12, r25	; 0x0c
    4460:	b7 01       	movw	r22, r14
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	0f d6       	rcall	.+3102   	; 0x5084 <fputc>
    4466:	11 11       	cpse	r17, r1
    4468:	05 c0       	rjmp	.+10     	; 0x4474 <vfprintf+0x37a>
    446a:	94 fc       	sbrc	r9, 4
    446c:	16 c0       	rjmp	.+44     	; 0x449a <vfprintf+0x3a0>
    446e:	85 e6       	ldi	r24, 0x65	; 101
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	15 c0       	rjmp	.+42     	; 0x449e <vfprintf+0x3a4>
    4474:	b7 01       	movw	r22, r14
    4476:	8e e2       	ldi	r24, 0x2E	; 46
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	04 d6       	rcall	.+3080   	; 0x5084 <fputc>
    447c:	1e 5f       	subi	r17, 0xFE	; 254
    447e:	82 e0       	ldi	r24, 0x02	; 2
    4480:	01 e0       	ldi	r16, 0x01	; 1
    4482:	08 0f       	add	r16, r24
    4484:	f3 01       	movw	r30, r6
    4486:	e8 0f       	add	r30, r24
    4488:	f1 1d       	adc	r31, r1
    448a:	80 81       	ld	r24, Z
    448c:	b7 01       	movw	r22, r14
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	f9 d5       	rcall	.+3058   	; 0x5084 <fputc>
    4492:	80 2f       	mov	r24, r16
    4494:	01 13       	cpse	r16, r17
    4496:	f4 cf       	rjmp	.-24     	; 0x4480 <vfprintf+0x386>
    4498:	e8 cf       	rjmp	.-48     	; 0x446a <vfprintf+0x370>
    449a:	85 e4       	ldi	r24, 0x45	; 69
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	b7 01       	movw	r22, r14
    44a0:	f1 d5       	rcall	.+3042   	; 0x5084 <fputc>
    44a2:	d7 fc       	sbrc	r13, 7
    44a4:	06 c0       	rjmp	.+12     	; 0x44b2 <vfprintf+0x3b8>
    44a6:	c1 14       	cp	r12, r1
    44a8:	d1 04       	cpc	r13, r1
    44aa:	41 f4       	brne	.+16     	; 0x44bc <vfprintf+0x3c2>
    44ac:	ec 85       	ldd	r30, Y+12	; 0x0c
    44ae:	e4 ff       	sbrs	r30, 4
    44b0:	05 c0       	rjmp	.+10     	; 0x44bc <vfprintf+0x3c2>
    44b2:	d1 94       	neg	r13
    44b4:	c1 94       	neg	r12
    44b6:	d1 08       	sbc	r13, r1
    44b8:	8d e2       	ldi	r24, 0x2D	; 45
    44ba:	01 c0       	rjmp	.+2      	; 0x44be <vfprintf+0x3c4>
    44bc:	8b e2       	ldi	r24, 0x2B	; 43
    44be:	b7 01       	movw	r22, r14
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	e0 d5       	rcall	.+3008   	; 0x5084 <fputc>
    44c4:	80 e3       	ldi	r24, 0x30	; 48
    44c6:	2a e0       	ldi	r18, 0x0A	; 10
    44c8:	c2 16       	cp	r12, r18
    44ca:	d1 04       	cpc	r13, r1
    44cc:	2c f0       	brlt	.+10     	; 0x44d8 <vfprintf+0x3de>
    44ce:	8f 5f       	subi	r24, 0xFF	; 255
    44d0:	fa e0       	ldi	r31, 0x0A	; 10
    44d2:	cf 1a       	sub	r12, r31
    44d4:	d1 08       	sbc	r13, r1
    44d6:	f7 cf       	rjmp	.-18     	; 0x44c6 <vfprintf+0x3cc>
    44d8:	b7 01       	movw	r22, r14
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	d3 d5       	rcall	.+2982   	; 0x5084 <fputc>
    44de:	b7 01       	movw	r22, r14
    44e0:	c6 01       	movw	r24, r12
    44e2:	c0 96       	adiw	r24, 0x30	; 48
    44e4:	cf d5       	rcall	.+2974   	; 0x5084 <fputc>
    44e6:	49 c1       	rjmp	.+658    	; 0x477a <vfprintf+0x680>
    44e8:	83 36       	cpi	r24, 0x63	; 99
    44ea:	31 f0       	breq	.+12     	; 0x44f8 <vfprintf+0x3fe>
    44ec:	83 37       	cpi	r24, 0x73	; 115
    44ee:	79 f0       	breq	.+30     	; 0x450e <vfprintf+0x414>
    44f0:	83 35       	cpi	r24, 0x53	; 83
    44f2:	09 f0       	breq	.+2      	; 0x44f6 <vfprintf+0x3fc>
    44f4:	52 c0       	rjmp	.+164    	; 0x459a <vfprintf+0x4a0>
    44f6:	1f c0       	rjmp	.+62     	; 0x4536 <vfprintf+0x43c>
    44f8:	56 01       	movw	r10, r12
    44fa:	32 e0       	ldi	r19, 0x02	; 2
    44fc:	a3 0e       	add	r10, r19
    44fe:	b1 1c       	adc	r11, r1
    4500:	f6 01       	movw	r30, r12
    4502:	80 81       	ld	r24, Z
    4504:	89 83       	std	Y+1, r24	; 0x01
    4506:	01 e0       	ldi	r16, 0x01	; 1
    4508:	10 e0       	ldi	r17, 0x00	; 0
    450a:	63 01       	movw	r12, r6
    450c:	11 c0       	rjmp	.+34     	; 0x4530 <vfprintf+0x436>
    450e:	56 01       	movw	r10, r12
    4510:	f2 e0       	ldi	r31, 0x02	; 2
    4512:	af 0e       	add	r10, r31
    4514:	b1 1c       	adc	r11, r1
    4516:	f6 01       	movw	r30, r12
    4518:	c0 80       	ld	r12, Z
    451a:	d1 80       	ldd	r13, Z+1	; 0x01
    451c:	96 fe       	sbrs	r9, 6
    451e:	03 c0       	rjmp	.+6      	; 0x4526 <vfprintf+0x42c>
    4520:	61 2f       	mov	r22, r17
    4522:	70 e0       	ldi	r23, 0x00	; 0
    4524:	02 c0       	rjmp	.+4      	; 0x452a <vfprintf+0x430>
    4526:	6f ef       	ldi	r22, 0xFF	; 255
    4528:	7f ef       	ldi	r23, 0xFF	; 255
    452a:	c6 01       	movw	r24, r12
    452c:	a0 d5       	rcall	.+2880   	; 0x506e <strnlen>
    452e:	8c 01       	movw	r16, r24
    4530:	f9 2d       	mov	r31, r9
    4532:	ff 77       	andi	r31, 0x7F	; 127
    4534:	13 c0       	rjmp	.+38     	; 0x455c <vfprintf+0x462>
    4536:	56 01       	movw	r10, r12
    4538:	22 e0       	ldi	r18, 0x02	; 2
    453a:	a2 0e       	add	r10, r18
    453c:	b1 1c       	adc	r11, r1
    453e:	f6 01       	movw	r30, r12
    4540:	c0 80       	ld	r12, Z
    4542:	d1 80       	ldd	r13, Z+1	; 0x01
    4544:	96 fe       	sbrs	r9, 6
    4546:	03 c0       	rjmp	.+6      	; 0x454e <vfprintf+0x454>
    4548:	61 2f       	mov	r22, r17
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	02 c0       	rjmp	.+4      	; 0x4552 <vfprintf+0x458>
    454e:	6f ef       	ldi	r22, 0xFF	; 255
    4550:	7f ef       	ldi	r23, 0xFF	; 255
    4552:	c6 01       	movw	r24, r12
    4554:	71 d5       	rcall	.+2786   	; 0x5038 <strnlen_P>
    4556:	8c 01       	movw	r16, r24
    4558:	f9 2d       	mov	r31, r9
    455a:	f0 68       	ori	r31, 0x80	; 128
    455c:	9f 2e       	mov	r9, r31
    455e:	f3 fd       	sbrc	r31, 3
    4560:	18 c0       	rjmp	.+48     	; 0x4592 <vfprintf+0x498>
    4562:	85 2d       	mov	r24, r5
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	08 17       	cp	r16, r24
    4568:	19 07       	cpc	r17, r25
    456a:	98 f4       	brcc	.+38     	; 0x4592 <vfprintf+0x498>
    456c:	b7 01       	movw	r22, r14
    456e:	80 e2       	ldi	r24, 0x20	; 32
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	88 d5       	rcall	.+2832   	; 0x5084 <fputc>
    4574:	5a 94       	dec	r5
    4576:	f5 cf       	rjmp	.-22     	; 0x4562 <vfprintf+0x468>
    4578:	f6 01       	movw	r30, r12
    457a:	97 fc       	sbrc	r9, 7
    457c:	85 91       	lpm	r24, Z+
    457e:	97 fe       	sbrs	r9, 7
    4580:	81 91       	ld	r24, Z+
    4582:	6f 01       	movw	r12, r30
    4584:	b7 01       	movw	r22, r14
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	7d d5       	rcall	.+2810   	; 0x5084 <fputc>
    458a:	51 10       	cpse	r5, r1
    458c:	5a 94       	dec	r5
    458e:	01 50       	subi	r16, 0x01	; 1
    4590:	11 09       	sbc	r17, r1
    4592:	01 15       	cp	r16, r1
    4594:	11 05       	cpc	r17, r1
    4596:	81 f7       	brne	.-32     	; 0x4578 <vfprintf+0x47e>
    4598:	f0 c0       	rjmp	.+480    	; 0x477a <vfprintf+0x680>
    459a:	84 36       	cpi	r24, 0x64	; 100
    459c:	11 f0       	breq	.+4      	; 0x45a2 <vfprintf+0x4a8>
    459e:	89 36       	cpi	r24, 0x69	; 105
    45a0:	59 f5       	brne	.+86     	; 0x45f8 <vfprintf+0x4fe>
    45a2:	56 01       	movw	r10, r12
    45a4:	97 fe       	sbrs	r9, 7
    45a6:	09 c0       	rjmp	.+18     	; 0x45ba <vfprintf+0x4c0>
    45a8:	24 e0       	ldi	r18, 0x04	; 4
    45aa:	a2 0e       	add	r10, r18
    45ac:	b1 1c       	adc	r11, r1
    45ae:	f6 01       	movw	r30, r12
    45b0:	60 81       	ld	r22, Z
    45b2:	71 81       	ldd	r23, Z+1	; 0x01
    45b4:	82 81       	ldd	r24, Z+2	; 0x02
    45b6:	93 81       	ldd	r25, Z+3	; 0x03
    45b8:	0a c0       	rjmp	.+20     	; 0x45ce <vfprintf+0x4d4>
    45ba:	f2 e0       	ldi	r31, 0x02	; 2
    45bc:	af 0e       	add	r10, r31
    45be:	b1 1c       	adc	r11, r1
    45c0:	f6 01       	movw	r30, r12
    45c2:	60 81       	ld	r22, Z
    45c4:	71 81       	ldd	r23, Z+1	; 0x01
    45c6:	07 2e       	mov	r0, r23
    45c8:	00 0c       	add	r0, r0
    45ca:	88 0b       	sbc	r24, r24
    45cc:	99 0b       	sbc	r25, r25
    45ce:	f9 2d       	mov	r31, r9
    45d0:	ff 76       	andi	r31, 0x6F	; 111
    45d2:	9f 2e       	mov	r9, r31
    45d4:	97 ff       	sbrs	r25, 7
    45d6:	09 c0       	rjmp	.+18     	; 0x45ea <vfprintf+0x4f0>
    45d8:	90 95       	com	r25
    45da:	80 95       	com	r24
    45dc:	70 95       	com	r23
    45de:	61 95       	neg	r22
    45e0:	7f 4f       	sbci	r23, 0xFF	; 255
    45e2:	8f 4f       	sbci	r24, 0xFF	; 255
    45e4:	9f 4f       	sbci	r25, 0xFF	; 255
    45e6:	f0 68       	ori	r31, 0x80	; 128
    45e8:	9f 2e       	mov	r9, r31
    45ea:	2a e0       	ldi	r18, 0x0A	; 10
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	a3 01       	movw	r20, r6
    45f0:	c9 d5       	rcall	.+2962   	; 0x5184 <__ultoa_invert>
    45f2:	c8 2e       	mov	r12, r24
    45f4:	c6 18       	sub	r12, r6
    45f6:	3e c0       	rjmp	.+124    	; 0x4674 <vfprintf+0x57a>
    45f8:	09 2d       	mov	r16, r9
    45fa:	85 37       	cpi	r24, 0x75	; 117
    45fc:	21 f4       	brne	.+8      	; 0x4606 <vfprintf+0x50c>
    45fe:	0f 7e       	andi	r16, 0xEF	; 239
    4600:	2a e0       	ldi	r18, 0x0A	; 10
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	1d c0       	rjmp	.+58     	; 0x4640 <vfprintf+0x546>
    4606:	09 7f       	andi	r16, 0xF9	; 249
    4608:	8f 36       	cpi	r24, 0x6F	; 111
    460a:	91 f0       	breq	.+36     	; 0x4630 <vfprintf+0x536>
    460c:	18 f4       	brcc	.+6      	; 0x4614 <vfprintf+0x51a>
    460e:	88 35       	cpi	r24, 0x58	; 88
    4610:	59 f0       	breq	.+22     	; 0x4628 <vfprintf+0x52e>
    4612:	bc c0       	rjmp	.+376    	; 0x478c <vfprintf+0x692>
    4614:	80 37       	cpi	r24, 0x70	; 112
    4616:	19 f0       	breq	.+6      	; 0x461e <vfprintf+0x524>
    4618:	88 37       	cpi	r24, 0x78	; 120
    461a:	11 f0       	breq	.+4      	; 0x4620 <vfprintf+0x526>
    461c:	b7 c0       	rjmp	.+366    	; 0x478c <vfprintf+0x692>
    461e:	00 61       	ori	r16, 0x10	; 16
    4620:	04 ff       	sbrs	r16, 4
    4622:	09 c0       	rjmp	.+18     	; 0x4636 <vfprintf+0x53c>
    4624:	04 60       	ori	r16, 0x04	; 4
    4626:	07 c0       	rjmp	.+14     	; 0x4636 <vfprintf+0x53c>
    4628:	94 fe       	sbrs	r9, 4
    462a:	08 c0       	rjmp	.+16     	; 0x463c <vfprintf+0x542>
    462c:	06 60       	ori	r16, 0x06	; 6
    462e:	06 c0       	rjmp	.+12     	; 0x463c <vfprintf+0x542>
    4630:	28 e0       	ldi	r18, 0x08	; 8
    4632:	30 e0       	ldi	r19, 0x00	; 0
    4634:	05 c0       	rjmp	.+10     	; 0x4640 <vfprintf+0x546>
    4636:	20 e1       	ldi	r18, 0x10	; 16
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	02 c0       	rjmp	.+4      	; 0x4640 <vfprintf+0x546>
    463c:	20 e1       	ldi	r18, 0x10	; 16
    463e:	32 e0       	ldi	r19, 0x02	; 2
    4640:	56 01       	movw	r10, r12
    4642:	07 ff       	sbrs	r16, 7
    4644:	09 c0       	rjmp	.+18     	; 0x4658 <vfprintf+0x55e>
    4646:	84 e0       	ldi	r24, 0x04	; 4
    4648:	a8 0e       	add	r10, r24
    464a:	b1 1c       	adc	r11, r1
    464c:	f6 01       	movw	r30, r12
    464e:	60 81       	ld	r22, Z
    4650:	71 81       	ldd	r23, Z+1	; 0x01
    4652:	82 81       	ldd	r24, Z+2	; 0x02
    4654:	93 81       	ldd	r25, Z+3	; 0x03
    4656:	08 c0       	rjmp	.+16     	; 0x4668 <vfprintf+0x56e>
    4658:	f2 e0       	ldi	r31, 0x02	; 2
    465a:	af 0e       	add	r10, r31
    465c:	b1 1c       	adc	r11, r1
    465e:	f6 01       	movw	r30, r12
    4660:	60 81       	ld	r22, Z
    4662:	71 81       	ldd	r23, Z+1	; 0x01
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	a3 01       	movw	r20, r6
    466a:	8c d5       	rcall	.+2840   	; 0x5184 <__ultoa_invert>
    466c:	c8 2e       	mov	r12, r24
    466e:	c6 18       	sub	r12, r6
    4670:	0f 77       	andi	r16, 0x7F	; 127
    4672:	90 2e       	mov	r9, r16
    4674:	96 fe       	sbrs	r9, 6
    4676:	0b c0       	rjmp	.+22     	; 0x468e <vfprintf+0x594>
    4678:	09 2d       	mov	r16, r9
    467a:	0e 7f       	andi	r16, 0xFE	; 254
    467c:	c1 16       	cp	r12, r17
    467e:	50 f4       	brcc	.+20     	; 0x4694 <vfprintf+0x59a>
    4680:	94 fe       	sbrs	r9, 4
    4682:	0a c0       	rjmp	.+20     	; 0x4698 <vfprintf+0x59e>
    4684:	92 fc       	sbrc	r9, 2
    4686:	08 c0       	rjmp	.+16     	; 0x4698 <vfprintf+0x59e>
    4688:	09 2d       	mov	r16, r9
    468a:	0e 7e       	andi	r16, 0xEE	; 238
    468c:	05 c0       	rjmp	.+10     	; 0x4698 <vfprintf+0x59e>
    468e:	dc 2c       	mov	r13, r12
    4690:	09 2d       	mov	r16, r9
    4692:	03 c0       	rjmp	.+6      	; 0x469a <vfprintf+0x5a0>
    4694:	dc 2c       	mov	r13, r12
    4696:	01 c0       	rjmp	.+2      	; 0x469a <vfprintf+0x5a0>
    4698:	d1 2e       	mov	r13, r17
    469a:	04 ff       	sbrs	r16, 4
    469c:	0d c0       	rjmp	.+26     	; 0x46b8 <vfprintf+0x5be>
    469e:	fe 01       	movw	r30, r28
    46a0:	ec 0d       	add	r30, r12
    46a2:	f1 1d       	adc	r31, r1
    46a4:	80 81       	ld	r24, Z
    46a6:	80 33       	cpi	r24, 0x30	; 48
    46a8:	11 f4       	brne	.+4      	; 0x46ae <vfprintf+0x5b4>
    46aa:	09 7e       	andi	r16, 0xE9	; 233
    46ac:	09 c0       	rjmp	.+18     	; 0x46c0 <vfprintf+0x5c6>
    46ae:	02 ff       	sbrs	r16, 2
    46b0:	06 c0       	rjmp	.+12     	; 0x46be <vfprintf+0x5c4>
    46b2:	d3 94       	inc	r13
    46b4:	d3 94       	inc	r13
    46b6:	04 c0       	rjmp	.+8      	; 0x46c0 <vfprintf+0x5c6>
    46b8:	80 2f       	mov	r24, r16
    46ba:	86 78       	andi	r24, 0x86	; 134
    46bc:	09 f0       	breq	.+2      	; 0x46c0 <vfprintf+0x5c6>
    46be:	d3 94       	inc	r13
    46c0:	03 fd       	sbrc	r16, 3
    46c2:	10 c0       	rjmp	.+32     	; 0x46e4 <vfprintf+0x5ea>
    46c4:	00 ff       	sbrs	r16, 0
    46c6:	06 c0       	rjmp	.+12     	; 0x46d4 <vfprintf+0x5da>
    46c8:	1c 2d       	mov	r17, r12
    46ca:	d5 14       	cp	r13, r5
    46cc:	78 f4       	brcc	.+30     	; 0x46ec <vfprintf+0x5f2>
    46ce:	15 0d       	add	r17, r5
    46d0:	1d 19       	sub	r17, r13
    46d2:	0c c0       	rjmp	.+24     	; 0x46ec <vfprintf+0x5f2>
    46d4:	d5 14       	cp	r13, r5
    46d6:	50 f4       	brcc	.+20     	; 0x46ec <vfprintf+0x5f2>
    46d8:	b7 01       	movw	r22, r14
    46da:	80 e2       	ldi	r24, 0x20	; 32
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	d2 d4       	rcall	.+2468   	; 0x5084 <fputc>
    46e0:	d3 94       	inc	r13
    46e2:	f8 cf       	rjmp	.-16     	; 0x46d4 <vfprintf+0x5da>
    46e4:	d5 14       	cp	r13, r5
    46e6:	10 f4       	brcc	.+4      	; 0x46ec <vfprintf+0x5f2>
    46e8:	5d 18       	sub	r5, r13
    46ea:	01 c0       	rjmp	.+2      	; 0x46ee <vfprintf+0x5f4>
    46ec:	51 2c       	mov	r5, r1
    46ee:	04 ff       	sbrs	r16, 4
    46f0:	0f c0       	rjmp	.+30     	; 0x4710 <vfprintf+0x616>
    46f2:	b7 01       	movw	r22, r14
    46f4:	80 e3       	ldi	r24, 0x30	; 48
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	c5 d4       	rcall	.+2442   	; 0x5084 <fputc>
    46fa:	02 ff       	sbrs	r16, 2
    46fc:	16 c0       	rjmp	.+44     	; 0x472a <vfprintf+0x630>
    46fe:	01 fd       	sbrc	r16, 1
    4700:	03 c0       	rjmp	.+6      	; 0x4708 <vfprintf+0x60e>
    4702:	88 e7       	ldi	r24, 0x78	; 120
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	02 c0       	rjmp	.+4      	; 0x470c <vfprintf+0x612>
    4708:	88 e5       	ldi	r24, 0x58	; 88
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	b7 01       	movw	r22, r14
    470e:	0c c0       	rjmp	.+24     	; 0x4728 <vfprintf+0x62e>
    4710:	80 2f       	mov	r24, r16
    4712:	86 78       	andi	r24, 0x86	; 134
    4714:	51 f0       	breq	.+20     	; 0x472a <vfprintf+0x630>
    4716:	01 ff       	sbrs	r16, 1
    4718:	02 c0       	rjmp	.+4      	; 0x471e <vfprintf+0x624>
    471a:	8b e2       	ldi	r24, 0x2B	; 43
    471c:	01 c0       	rjmp	.+2      	; 0x4720 <vfprintf+0x626>
    471e:	80 e2       	ldi	r24, 0x20	; 32
    4720:	07 fd       	sbrc	r16, 7
    4722:	8d e2       	ldi	r24, 0x2D	; 45
    4724:	b7 01       	movw	r22, r14
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	ad d4       	rcall	.+2394   	; 0x5084 <fputc>
    472a:	c1 16       	cp	r12, r17
    472c:	30 f4       	brcc	.+12     	; 0x473a <vfprintf+0x640>
    472e:	b7 01       	movw	r22, r14
    4730:	80 e3       	ldi	r24, 0x30	; 48
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	a7 d4       	rcall	.+2382   	; 0x5084 <fputc>
    4736:	11 50       	subi	r17, 0x01	; 1
    4738:	f8 cf       	rjmp	.-16     	; 0x472a <vfprintf+0x630>
    473a:	ca 94       	dec	r12
    473c:	f3 01       	movw	r30, r6
    473e:	ec 0d       	add	r30, r12
    4740:	f1 1d       	adc	r31, r1
    4742:	80 81       	ld	r24, Z
    4744:	b7 01       	movw	r22, r14
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	9d d4       	rcall	.+2362   	; 0x5084 <fputc>
    474a:	c1 10       	cpse	r12, r1
    474c:	f6 cf       	rjmp	.-20     	; 0x473a <vfprintf+0x640>
    474e:	15 c0       	rjmp	.+42     	; 0x477a <vfprintf+0x680>
    4750:	f4 e0       	ldi	r31, 0x04	; 4
    4752:	f5 15       	cp	r31, r5
    4754:	50 f5       	brcc	.+84     	; 0x47aa <vfprintf+0x6b0>
    4756:	84 e0       	ldi	r24, 0x04	; 4
    4758:	58 1a       	sub	r5, r24
    475a:	93 fe       	sbrs	r9, 3
    475c:	1e c0       	rjmp	.+60     	; 0x479a <vfprintf+0x6a0>
    475e:	01 11       	cpse	r16, r1
    4760:	25 c0       	rjmp	.+74     	; 0x47ac <vfprintf+0x6b2>
    4762:	2c 85       	ldd	r18, Y+12	; 0x0c
    4764:	23 ff       	sbrs	r18, 3
    4766:	27 c0       	rjmp	.+78     	; 0x47b6 <vfprintf+0x6bc>
    4768:	0a e9       	ldi	r16, 0x9A	; 154
    476a:	11 e0       	ldi	r17, 0x01	; 1
    476c:	39 2d       	mov	r19, r9
    476e:	30 71       	andi	r19, 0x10	; 16
    4770:	93 2e       	mov	r9, r19
    4772:	f8 01       	movw	r30, r16
    4774:	84 91       	lpm	r24, Z
    4776:	81 11       	cpse	r24, r1
    4778:	21 c0       	rjmp	.+66     	; 0x47bc <vfprintf+0x6c2>
    477a:	55 20       	and	r5, r5
    477c:	09 f4       	brne	.+2      	; 0x4780 <vfprintf+0x686>
    477e:	fc cc       	rjmp	.-1544   	; 0x4178 <vfprintf+0x7e>
    4780:	b7 01       	movw	r22, r14
    4782:	80 e2       	ldi	r24, 0x20	; 32
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	7e d4       	rcall	.+2300   	; 0x5084 <fputc>
    4788:	5a 94       	dec	r5
    478a:	f7 cf       	rjmp	.-18     	; 0x477a <vfprintf+0x680>
    478c:	f7 01       	movw	r30, r14
    478e:	86 81       	ldd	r24, Z+6	; 0x06
    4790:	97 81       	ldd	r25, Z+7	; 0x07
    4792:	23 c0       	rjmp	.+70     	; 0x47da <vfprintf+0x6e0>
    4794:	8f ef       	ldi	r24, 0xFF	; 255
    4796:	9f ef       	ldi	r25, 0xFF	; 255
    4798:	20 c0       	rjmp	.+64     	; 0x47da <vfprintf+0x6e0>
    479a:	b7 01       	movw	r22, r14
    479c:	80 e2       	ldi	r24, 0x20	; 32
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	71 d4       	rcall	.+2274   	; 0x5084 <fputc>
    47a2:	5a 94       	dec	r5
    47a4:	51 10       	cpse	r5, r1
    47a6:	f9 cf       	rjmp	.-14     	; 0x479a <vfprintf+0x6a0>
    47a8:	da cf       	rjmp	.-76     	; 0x475e <vfprintf+0x664>
    47aa:	51 2c       	mov	r5, r1
    47ac:	b7 01       	movw	r22, r14
    47ae:	80 2f       	mov	r24, r16
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	68 d4       	rcall	.+2256   	; 0x5084 <fputc>
    47b4:	d6 cf       	rjmp	.-84     	; 0x4762 <vfprintf+0x668>
    47b6:	0e e9       	ldi	r16, 0x9E	; 158
    47b8:	11 e0       	ldi	r17, 0x01	; 1
    47ba:	d8 cf       	rjmp	.-80     	; 0x476c <vfprintf+0x672>
    47bc:	91 10       	cpse	r9, r1
    47be:	80 52       	subi	r24, 0x20	; 32
    47c0:	b7 01       	movw	r22, r14
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	5f d4       	rcall	.+2238   	; 0x5084 <fputc>
    47c6:	0f 5f       	subi	r16, 0xFF	; 255
    47c8:	1f 4f       	sbci	r17, 0xFF	; 255
    47ca:	d3 cf       	rjmp	.-90     	; 0x4772 <vfprintf+0x678>
    47cc:	23 e0       	ldi	r18, 0x03	; 3
    47ce:	25 15       	cp	r18, r5
    47d0:	10 f4       	brcc	.+4      	; 0x47d6 <vfprintf+0x6dc>
    47d2:	83 e0       	ldi	r24, 0x03	; 3
    47d4:	c1 cf       	rjmp	.-126    	; 0x4758 <vfprintf+0x65e>
    47d6:	51 2c       	mov	r5, r1
    47d8:	c4 cf       	rjmp	.-120    	; 0x4762 <vfprintf+0x668>
    47da:	60 96       	adiw	r28, 0x10	; 16
    47dc:	0f b6       	in	r0, 0x3f	; 63
    47de:	f8 94       	cli
    47e0:	de bf       	out	0x3e, r29	; 62
    47e2:	0f be       	out	0x3f, r0	; 63
    47e4:	cd bf       	out	0x3d, r28	; 61
    47e6:	df 91       	pop	r29
    47e8:	cf 91       	pop	r28
    47ea:	1f 91       	pop	r17
    47ec:	0f 91       	pop	r16
    47ee:	ff 90       	pop	r15
    47f0:	ef 90       	pop	r14
    47f2:	df 90       	pop	r13
    47f4:	cf 90       	pop	r12
    47f6:	bf 90       	pop	r11
    47f8:	af 90       	pop	r10
    47fa:	9f 90       	pop	r9
    47fc:	8f 90       	pop	r8
    47fe:	7f 90       	pop	r7
    4800:	6f 90       	pop	r6
    4802:	5f 90       	pop	r5
    4804:	4f 90       	pop	r4
    4806:	3f 90       	pop	r3
    4808:	2f 90       	pop	r2
    480a:	08 95       	ret

0000480c <__subsf3>:
    480c:	50 58       	subi	r21, 0x80	; 128

0000480e <__addsf3>:
    480e:	bb 27       	eor	r27, r27
    4810:	aa 27       	eor	r26, r26
    4812:	0e d0       	rcall	.+28     	; 0x4830 <__addsf3x>
    4814:	4d c1       	rjmp	.+666    	; 0x4ab0 <__fp_round>
    4816:	3e d1       	rcall	.+636    	; 0x4a94 <__fp_pscA>
    4818:	30 f0       	brcs	.+12     	; 0x4826 <__addsf3+0x18>
    481a:	43 d1       	rcall	.+646    	; 0x4aa2 <__fp_pscB>
    481c:	20 f0       	brcs	.+8      	; 0x4826 <__addsf3+0x18>
    481e:	31 f4       	brne	.+12     	; 0x482c <__addsf3+0x1e>
    4820:	9f 3f       	cpi	r25, 0xFF	; 255
    4822:	11 f4       	brne	.+4      	; 0x4828 <__addsf3+0x1a>
    4824:	1e f4       	brtc	.+6      	; 0x482c <__addsf3+0x1e>
    4826:	33 c1       	rjmp	.+614    	; 0x4a8e <__fp_nan>
    4828:	0e f4       	brtc	.+2      	; 0x482c <__addsf3+0x1e>
    482a:	e0 95       	com	r30
    482c:	e7 fb       	bst	r30, 7
    482e:	29 c1       	rjmp	.+594    	; 0x4a82 <__fp_inf>

00004830 <__addsf3x>:
    4830:	e9 2f       	mov	r30, r25
    4832:	4f d1       	rcall	.+670    	; 0x4ad2 <__fp_split3>
    4834:	80 f3       	brcs	.-32     	; 0x4816 <__addsf3+0x8>
    4836:	ba 17       	cp	r27, r26
    4838:	62 07       	cpc	r22, r18
    483a:	73 07       	cpc	r23, r19
    483c:	84 07       	cpc	r24, r20
    483e:	95 07       	cpc	r25, r21
    4840:	18 f0       	brcs	.+6      	; 0x4848 <__addsf3x+0x18>
    4842:	71 f4       	brne	.+28     	; 0x4860 <__addsf3x+0x30>
    4844:	9e f5       	brtc	.+102    	; 0x48ac <__addsf3x+0x7c>
    4846:	67 c1       	rjmp	.+718    	; 0x4b16 <__fp_zero>
    4848:	0e f4       	brtc	.+2      	; 0x484c <__addsf3x+0x1c>
    484a:	e0 95       	com	r30
    484c:	0b 2e       	mov	r0, r27
    484e:	ba 2f       	mov	r27, r26
    4850:	a0 2d       	mov	r26, r0
    4852:	0b 01       	movw	r0, r22
    4854:	b9 01       	movw	r22, r18
    4856:	90 01       	movw	r18, r0
    4858:	0c 01       	movw	r0, r24
    485a:	ca 01       	movw	r24, r20
    485c:	a0 01       	movw	r20, r0
    485e:	11 24       	eor	r1, r1
    4860:	ff 27       	eor	r31, r31
    4862:	59 1b       	sub	r21, r25
    4864:	99 f0       	breq	.+38     	; 0x488c <__addsf3x+0x5c>
    4866:	59 3f       	cpi	r21, 0xF9	; 249
    4868:	50 f4       	brcc	.+20     	; 0x487e <__addsf3x+0x4e>
    486a:	50 3e       	cpi	r21, 0xE0	; 224
    486c:	68 f1       	brcs	.+90     	; 0x48c8 <__addsf3x+0x98>
    486e:	1a 16       	cp	r1, r26
    4870:	f0 40       	sbci	r31, 0x00	; 0
    4872:	a2 2f       	mov	r26, r18
    4874:	23 2f       	mov	r18, r19
    4876:	34 2f       	mov	r19, r20
    4878:	44 27       	eor	r20, r20
    487a:	58 5f       	subi	r21, 0xF8	; 248
    487c:	f3 cf       	rjmp	.-26     	; 0x4864 <__addsf3x+0x34>
    487e:	46 95       	lsr	r20
    4880:	37 95       	ror	r19
    4882:	27 95       	ror	r18
    4884:	a7 95       	ror	r26
    4886:	f0 40       	sbci	r31, 0x00	; 0
    4888:	53 95       	inc	r21
    488a:	c9 f7       	brne	.-14     	; 0x487e <__addsf3x+0x4e>
    488c:	7e f4       	brtc	.+30     	; 0x48ac <__addsf3x+0x7c>
    488e:	1f 16       	cp	r1, r31
    4890:	ba 0b       	sbc	r27, r26
    4892:	62 0b       	sbc	r22, r18
    4894:	73 0b       	sbc	r23, r19
    4896:	84 0b       	sbc	r24, r20
    4898:	ba f0       	brmi	.+46     	; 0x48c8 <__addsf3x+0x98>
    489a:	91 50       	subi	r25, 0x01	; 1
    489c:	a1 f0       	breq	.+40     	; 0x48c6 <__addsf3x+0x96>
    489e:	ff 0f       	add	r31, r31
    48a0:	bb 1f       	adc	r27, r27
    48a2:	66 1f       	adc	r22, r22
    48a4:	77 1f       	adc	r23, r23
    48a6:	88 1f       	adc	r24, r24
    48a8:	c2 f7       	brpl	.-16     	; 0x489a <__addsf3x+0x6a>
    48aa:	0e c0       	rjmp	.+28     	; 0x48c8 <__addsf3x+0x98>
    48ac:	ba 0f       	add	r27, r26
    48ae:	62 1f       	adc	r22, r18
    48b0:	73 1f       	adc	r23, r19
    48b2:	84 1f       	adc	r24, r20
    48b4:	48 f4       	brcc	.+18     	; 0x48c8 <__addsf3x+0x98>
    48b6:	87 95       	ror	r24
    48b8:	77 95       	ror	r23
    48ba:	67 95       	ror	r22
    48bc:	b7 95       	ror	r27
    48be:	f7 95       	ror	r31
    48c0:	9e 3f       	cpi	r25, 0xFE	; 254
    48c2:	08 f0       	brcs	.+2      	; 0x48c6 <__addsf3x+0x96>
    48c4:	b3 cf       	rjmp	.-154    	; 0x482c <__addsf3+0x1e>
    48c6:	93 95       	inc	r25
    48c8:	88 0f       	add	r24, r24
    48ca:	08 f0       	brcs	.+2      	; 0x48ce <__addsf3x+0x9e>
    48cc:	99 27       	eor	r25, r25
    48ce:	ee 0f       	add	r30, r30
    48d0:	97 95       	ror	r25
    48d2:	87 95       	ror	r24
    48d4:	08 95       	ret

000048d6 <__divsf3>:
    48d6:	0c d0       	rcall	.+24     	; 0x48f0 <__divsf3x>
    48d8:	eb c0       	rjmp	.+470    	; 0x4ab0 <__fp_round>
    48da:	e3 d0       	rcall	.+454    	; 0x4aa2 <__fp_pscB>
    48dc:	40 f0       	brcs	.+16     	; 0x48ee <__divsf3+0x18>
    48de:	da d0       	rcall	.+436    	; 0x4a94 <__fp_pscA>
    48e0:	30 f0       	brcs	.+12     	; 0x48ee <__divsf3+0x18>
    48e2:	21 f4       	brne	.+8      	; 0x48ec <__divsf3+0x16>
    48e4:	5f 3f       	cpi	r21, 0xFF	; 255
    48e6:	19 f0       	breq	.+6      	; 0x48ee <__divsf3+0x18>
    48e8:	cc c0       	rjmp	.+408    	; 0x4a82 <__fp_inf>
    48ea:	51 11       	cpse	r21, r1
    48ec:	15 c1       	rjmp	.+554    	; 0x4b18 <__fp_szero>
    48ee:	cf c0       	rjmp	.+414    	; 0x4a8e <__fp_nan>

000048f0 <__divsf3x>:
    48f0:	f0 d0       	rcall	.+480    	; 0x4ad2 <__fp_split3>
    48f2:	98 f3       	brcs	.-26     	; 0x48da <__divsf3+0x4>

000048f4 <__divsf3_pse>:
    48f4:	99 23       	and	r25, r25
    48f6:	c9 f3       	breq	.-14     	; 0x48ea <__divsf3+0x14>
    48f8:	55 23       	and	r21, r21
    48fa:	b1 f3       	breq	.-20     	; 0x48e8 <__divsf3+0x12>
    48fc:	95 1b       	sub	r25, r21
    48fe:	55 0b       	sbc	r21, r21
    4900:	bb 27       	eor	r27, r27
    4902:	aa 27       	eor	r26, r26
    4904:	62 17       	cp	r22, r18
    4906:	73 07       	cpc	r23, r19
    4908:	84 07       	cpc	r24, r20
    490a:	38 f0       	brcs	.+14     	; 0x491a <__divsf3_pse+0x26>
    490c:	9f 5f       	subi	r25, 0xFF	; 255
    490e:	5f 4f       	sbci	r21, 0xFF	; 255
    4910:	22 0f       	add	r18, r18
    4912:	33 1f       	adc	r19, r19
    4914:	44 1f       	adc	r20, r20
    4916:	aa 1f       	adc	r26, r26
    4918:	a9 f3       	breq	.-22     	; 0x4904 <__divsf3_pse+0x10>
    491a:	33 d0       	rcall	.+102    	; 0x4982 <__divsf3_pse+0x8e>
    491c:	0e 2e       	mov	r0, r30
    491e:	3a f0       	brmi	.+14     	; 0x492e <__divsf3_pse+0x3a>
    4920:	e0 e8       	ldi	r30, 0x80	; 128
    4922:	30 d0       	rcall	.+96     	; 0x4984 <__divsf3_pse+0x90>
    4924:	91 50       	subi	r25, 0x01	; 1
    4926:	50 40       	sbci	r21, 0x00	; 0
    4928:	e6 95       	lsr	r30
    492a:	00 1c       	adc	r0, r0
    492c:	ca f7       	brpl	.-14     	; 0x4920 <__divsf3_pse+0x2c>
    492e:	29 d0       	rcall	.+82     	; 0x4982 <__divsf3_pse+0x8e>
    4930:	fe 2f       	mov	r31, r30
    4932:	27 d0       	rcall	.+78     	; 0x4982 <__divsf3_pse+0x8e>
    4934:	66 0f       	add	r22, r22
    4936:	77 1f       	adc	r23, r23
    4938:	88 1f       	adc	r24, r24
    493a:	bb 1f       	adc	r27, r27
    493c:	26 17       	cp	r18, r22
    493e:	37 07       	cpc	r19, r23
    4940:	48 07       	cpc	r20, r24
    4942:	ab 07       	cpc	r26, r27
    4944:	b0 e8       	ldi	r27, 0x80	; 128
    4946:	09 f0       	breq	.+2      	; 0x494a <__divsf3_pse+0x56>
    4948:	bb 0b       	sbc	r27, r27
    494a:	80 2d       	mov	r24, r0
    494c:	bf 01       	movw	r22, r30
    494e:	ff 27       	eor	r31, r31
    4950:	93 58       	subi	r25, 0x83	; 131
    4952:	5f 4f       	sbci	r21, 0xFF	; 255
    4954:	2a f0       	brmi	.+10     	; 0x4960 <__divsf3_pse+0x6c>
    4956:	9e 3f       	cpi	r25, 0xFE	; 254
    4958:	51 05       	cpc	r21, r1
    495a:	68 f0       	brcs	.+26     	; 0x4976 <__divsf3_pse+0x82>
    495c:	92 c0       	rjmp	.+292    	; 0x4a82 <__fp_inf>
    495e:	dc c0       	rjmp	.+440    	; 0x4b18 <__fp_szero>
    4960:	5f 3f       	cpi	r21, 0xFF	; 255
    4962:	ec f3       	brlt	.-6      	; 0x495e <__divsf3_pse+0x6a>
    4964:	98 3e       	cpi	r25, 0xE8	; 232
    4966:	dc f3       	brlt	.-10     	; 0x495e <__divsf3_pse+0x6a>
    4968:	86 95       	lsr	r24
    496a:	77 95       	ror	r23
    496c:	67 95       	ror	r22
    496e:	b7 95       	ror	r27
    4970:	f7 95       	ror	r31
    4972:	9f 5f       	subi	r25, 0xFF	; 255
    4974:	c9 f7       	brne	.-14     	; 0x4968 <__divsf3_pse+0x74>
    4976:	88 0f       	add	r24, r24
    4978:	91 1d       	adc	r25, r1
    497a:	96 95       	lsr	r25
    497c:	87 95       	ror	r24
    497e:	97 f9       	bld	r25, 7
    4980:	08 95       	ret
    4982:	e1 e0       	ldi	r30, 0x01	; 1
    4984:	66 0f       	add	r22, r22
    4986:	77 1f       	adc	r23, r23
    4988:	88 1f       	adc	r24, r24
    498a:	bb 1f       	adc	r27, r27
    498c:	62 17       	cp	r22, r18
    498e:	73 07       	cpc	r23, r19
    4990:	84 07       	cpc	r24, r20
    4992:	ba 07       	cpc	r27, r26
    4994:	20 f0       	brcs	.+8      	; 0x499e <__divsf3_pse+0xaa>
    4996:	62 1b       	sub	r22, r18
    4998:	73 0b       	sbc	r23, r19
    499a:	84 0b       	sbc	r24, r20
    499c:	ba 0b       	sbc	r27, r26
    499e:	ee 1f       	adc	r30, r30
    49a0:	88 f7       	brcc	.-30     	; 0x4984 <__divsf3_pse+0x90>
    49a2:	e0 95       	com	r30
    49a4:	08 95       	ret

000049a6 <__fixsfsi>:
    49a6:	04 d0       	rcall	.+8      	; 0x49b0 <__fixunssfsi>
    49a8:	68 94       	set
    49aa:	b1 11       	cpse	r27, r1
    49ac:	b5 c0       	rjmp	.+362    	; 0x4b18 <__fp_szero>
    49ae:	08 95       	ret

000049b0 <__fixunssfsi>:
    49b0:	98 d0       	rcall	.+304    	; 0x4ae2 <__fp_splitA>
    49b2:	88 f0       	brcs	.+34     	; 0x49d6 <__fixunssfsi+0x26>
    49b4:	9f 57       	subi	r25, 0x7F	; 127
    49b6:	90 f0       	brcs	.+36     	; 0x49dc <__fixunssfsi+0x2c>
    49b8:	b9 2f       	mov	r27, r25
    49ba:	99 27       	eor	r25, r25
    49bc:	b7 51       	subi	r27, 0x17	; 23
    49be:	a0 f0       	brcs	.+40     	; 0x49e8 <__fixunssfsi+0x38>
    49c0:	d1 f0       	breq	.+52     	; 0x49f6 <__fixunssfsi+0x46>
    49c2:	66 0f       	add	r22, r22
    49c4:	77 1f       	adc	r23, r23
    49c6:	88 1f       	adc	r24, r24
    49c8:	99 1f       	adc	r25, r25
    49ca:	1a f0       	brmi	.+6      	; 0x49d2 <__fixunssfsi+0x22>
    49cc:	ba 95       	dec	r27
    49ce:	c9 f7       	brne	.-14     	; 0x49c2 <__fixunssfsi+0x12>
    49d0:	12 c0       	rjmp	.+36     	; 0x49f6 <__fixunssfsi+0x46>
    49d2:	b1 30       	cpi	r27, 0x01	; 1
    49d4:	81 f0       	breq	.+32     	; 0x49f6 <__fixunssfsi+0x46>
    49d6:	9f d0       	rcall	.+318    	; 0x4b16 <__fp_zero>
    49d8:	b1 e0       	ldi	r27, 0x01	; 1
    49da:	08 95       	ret
    49dc:	9c c0       	rjmp	.+312    	; 0x4b16 <__fp_zero>
    49de:	67 2f       	mov	r22, r23
    49e0:	78 2f       	mov	r23, r24
    49e2:	88 27       	eor	r24, r24
    49e4:	b8 5f       	subi	r27, 0xF8	; 248
    49e6:	39 f0       	breq	.+14     	; 0x49f6 <__fixunssfsi+0x46>
    49e8:	b9 3f       	cpi	r27, 0xF9	; 249
    49ea:	cc f3       	brlt	.-14     	; 0x49de <__fixunssfsi+0x2e>
    49ec:	86 95       	lsr	r24
    49ee:	77 95       	ror	r23
    49f0:	67 95       	ror	r22
    49f2:	b3 95       	inc	r27
    49f4:	d9 f7       	brne	.-10     	; 0x49ec <__fixunssfsi+0x3c>
    49f6:	3e f4       	brtc	.+14     	; 0x4a06 <__fixunssfsi+0x56>
    49f8:	90 95       	com	r25
    49fa:	80 95       	com	r24
    49fc:	70 95       	com	r23
    49fe:	61 95       	neg	r22
    4a00:	7f 4f       	sbci	r23, 0xFF	; 255
    4a02:	8f 4f       	sbci	r24, 0xFF	; 255
    4a04:	9f 4f       	sbci	r25, 0xFF	; 255
    4a06:	08 95       	ret

00004a08 <__floatunsisf>:
    4a08:	e8 94       	clt
    4a0a:	09 c0       	rjmp	.+18     	; 0x4a1e <__floatsisf+0x12>

00004a0c <__floatsisf>:
    4a0c:	97 fb       	bst	r25, 7
    4a0e:	3e f4       	brtc	.+14     	; 0x4a1e <__floatsisf+0x12>
    4a10:	90 95       	com	r25
    4a12:	80 95       	com	r24
    4a14:	70 95       	com	r23
    4a16:	61 95       	neg	r22
    4a18:	7f 4f       	sbci	r23, 0xFF	; 255
    4a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a1e:	99 23       	and	r25, r25
    4a20:	a9 f0       	breq	.+42     	; 0x4a4c <__floatsisf+0x40>
    4a22:	f9 2f       	mov	r31, r25
    4a24:	96 e9       	ldi	r25, 0x96	; 150
    4a26:	bb 27       	eor	r27, r27
    4a28:	93 95       	inc	r25
    4a2a:	f6 95       	lsr	r31
    4a2c:	87 95       	ror	r24
    4a2e:	77 95       	ror	r23
    4a30:	67 95       	ror	r22
    4a32:	b7 95       	ror	r27
    4a34:	f1 11       	cpse	r31, r1
    4a36:	f8 cf       	rjmp	.-16     	; 0x4a28 <__floatsisf+0x1c>
    4a38:	fa f4       	brpl	.+62     	; 0x4a78 <__floatsisf+0x6c>
    4a3a:	bb 0f       	add	r27, r27
    4a3c:	11 f4       	brne	.+4      	; 0x4a42 <__floatsisf+0x36>
    4a3e:	60 ff       	sbrs	r22, 0
    4a40:	1b c0       	rjmp	.+54     	; 0x4a78 <__floatsisf+0x6c>
    4a42:	6f 5f       	subi	r22, 0xFF	; 255
    4a44:	7f 4f       	sbci	r23, 0xFF	; 255
    4a46:	8f 4f       	sbci	r24, 0xFF	; 255
    4a48:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4a:	16 c0       	rjmp	.+44     	; 0x4a78 <__floatsisf+0x6c>
    4a4c:	88 23       	and	r24, r24
    4a4e:	11 f0       	breq	.+4      	; 0x4a54 <__floatsisf+0x48>
    4a50:	96 e9       	ldi	r25, 0x96	; 150
    4a52:	11 c0       	rjmp	.+34     	; 0x4a76 <__floatsisf+0x6a>
    4a54:	77 23       	and	r23, r23
    4a56:	21 f0       	breq	.+8      	; 0x4a60 <__floatsisf+0x54>
    4a58:	9e e8       	ldi	r25, 0x8E	; 142
    4a5a:	87 2f       	mov	r24, r23
    4a5c:	76 2f       	mov	r23, r22
    4a5e:	05 c0       	rjmp	.+10     	; 0x4a6a <__floatsisf+0x5e>
    4a60:	66 23       	and	r22, r22
    4a62:	71 f0       	breq	.+28     	; 0x4a80 <__floatsisf+0x74>
    4a64:	96 e8       	ldi	r25, 0x86	; 134
    4a66:	86 2f       	mov	r24, r22
    4a68:	70 e0       	ldi	r23, 0x00	; 0
    4a6a:	60 e0       	ldi	r22, 0x00	; 0
    4a6c:	2a f0       	brmi	.+10     	; 0x4a78 <__floatsisf+0x6c>
    4a6e:	9a 95       	dec	r25
    4a70:	66 0f       	add	r22, r22
    4a72:	77 1f       	adc	r23, r23
    4a74:	88 1f       	adc	r24, r24
    4a76:	da f7       	brpl	.-10     	; 0x4a6e <__floatsisf+0x62>
    4a78:	88 0f       	add	r24, r24
    4a7a:	96 95       	lsr	r25
    4a7c:	87 95       	ror	r24
    4a7e:	97 f9       	bld	r25, 7
    4a80:	08 95       	ret

00004a82 <__fp_inf>:
    4a82:	97 f9       	bld	r25, 7
    4a84:	9f 67       	ori	r25, 0x7F	; 127
    4a86:	80 e8       	ldi	r24, 0x80	; 128
    4a88:	70 e0       	ldi	r23, 0x00	; 0
    4a8a:	60 e0       	ldi	r22, 0x00	; 0
    4a8c:	08 95       	ret

00004a8e <__fp_nan>:
    4a8e:	9f ef       	ldi	r25, 0xFF	; 255
    4a90:	80 ec       	ldi	r24, 0xC0	; 192
    4a92:	08 95       	ret

00004a94 <__fp_pscA>:
    4a94:	00 24       	eor	r0, r0
    4a96:	0a 94       	dec	r0
    4a98:	16 16       	cp	r1, r22
    4a9a:	17 06       	cpc	r1, r23
    4a9c:	18 06       	cpc	r1, r24
    4a9e:	09 06       	cpc	r0, r25
    4aa0:	08 95       	ret

00004aa2 <__fp_pscB>:
    4aa2:	00 24       	eor	r0, r0
    4aa4:	0a 94       	dec	r0
    4aa6:	12 16       	cp	r1, r18
    4aa8:	13 06       	cpc	r1, r19
    4aaa:	14 06       	cpc	r1, r20
    4aac:	05 06       	cpc	r0, r21
    4aae:	08 95       	ret

00004ab0 <__fp_round>:
    4ab0:	09 2e       	mov	r0, r25
    4ab2:	03 94       	inc	r0
    4ab4:	00 0c       	add	r0, r0
    4ab6:	11 f4       	brne	.+4      	; 0x4abc <__fp_round+0xc>
    4ab8:	88 23       	and	r24, r24
    4aba:	52 f0       	brmi	.+20     	; 0x4ad0 <__fp_round+0x20>
    4abc:	bb 0f       	add	r27, r27
    4abe:	40 f4       	brcc	.+16     	; 0x4ad0 <__fp_round+0x20>
    4ac0:	bf 2b       	or	r27, r31
    4ac2:	11 f4       	brne	.+4      	; 0x4ac8 <__fp_round+0x18>
    4ac4:	60 ff       	sbrs	r22, 0
    4ac6:	04 c0       	rjmp	.+8      	; 0x4ad0 <__fp_round+0x20>
    4ac8:	6f 5f       	subi	r22, 0xFF	; 255
    4aca:	7f 4f       	sbci	r23, 0xFF	; 255
    4acc:	8f 4f       	sbci	r24, 0xFF	; 255
    4ace:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad0:	08 95       	ret

00004ad2 <__fp_split3>:
    4ad2:	57 fd       	sbrc	r21, 7
    4ad4:	90 58       	subi	r25, 0x80	; 128
    4ad6:	44 0f       	add	r20, r20
    4ad8:	55 1f       	adc	r21, r21
    4ada:	59 f0       	breq	.+22     	; 0x4af2 <__fp_splitA+0x10>
    4adc:	5f 3f       	cpi	r21, 0xFF	; 255
    4ade:	71 f0       	breq	.+28     	; 0x4afc <__fp_splitA+0x1a>
    4ae0:	47 95       	ror	r20

00004ae2 <__fp_splitA>:
    4ae2:	88 0f       	add	r24, r24
    4ae4:	97 fb       	bst	r25, 7
    4ae6:	99 1f       	adc	r25, r25
    4ae8:	61 f0       	breq	.+24     	; 0x4b02 <__fp_splitA+0x20>
    4aea:	9f 3f       	cpi	r25, 0xFF	; 255
    4aec:	79 f0       	breq	.+30     	; 0x4b0c <__fp_splitA+0x2a>
    4aee:	87 95       	ror	r24
    4af0:	08 95       	ret
    4af2:	12 16       	cp	r1, r18
    4af4:	13 06       	cpc	r1, r19
    4af6:	14 06       	cpc	r1, r20
    4af8:	55 1f       	adc	r21, r21
    4afa:	f2 cf       	rjmp	.-28     	; 0x4ae0 <__fp_split3+0xe>
    4afc:	46 95       	lsr	r20
    4afe:	f1 df       	rcall	.-30     	; 0x4ae2 <__fp_splitA>
    4b00:	08 c0       	rjmp	.+16     	; 0x4b12 <__fp_splitA+0x30>
    4b02:	16 16       	cp	r1, r22
    4b04:	17 06       	cpc	r1, r23
    4b06:	18 06       	cpc	r1, r24
    4b08:	99 1f       	adc	r25, r25
    4b0a:	f1 cf       	rjmp	.-30     	; 0x4aee <__fp_splitA+0xc>
    4b0c:	86 95       	lsr	r24
    4b0e:	71 05       	cpc	r23, r1
    4b10:	61 05       	cpc	r22, r1
    4b12:	08 94       	sec
    4b14:	08 95       	ret

00004b16 <__fp_zero>:
    4b16:	e8 94       	clt

00004b18 <__fp_szero>:
    4b18:	bb 27       	eor	r27, r27
    4b1a:	66 27       	eor	r22, r22
    4b1c:	77 27       	eor	r23, r23
    4b1e:	cb 01       	movw	r24, r22
    4b20:	97 f9       	bld	r25, 7
    4b22:	08 95       	ret

00004b24 <__mulsf3>:
    4b24:	0b d0       	rcall	.+22     	; 0x4b3c <__mulsf3x>
    4b26:	c4 cf       	rjmp	.-120    	; 0x4ab0 <__fp_round>
    4b28:	b5 df       	rcall	.-150    	; 0x4a94 <__fp_pscA>
    4b2a:	28 f0       	brcs	.+10     	; 0x4b36 <__mulsf3+0x12>
    4b2c:	ba df       	rcall	.-140    	; 0x4aa2 <__fp_pscB>
    4b2e:	18 f0       	brcs	.+6      	; 0x4b36 <__mulsf3+0x12>
    4b30:	95 23       	and	r25, r21
    4b32:	09 f0       	breq	.+2      	; 0x4b36 <__mulsf3+0x12>
    4b34:	a6 cf       	rjmp	.-180    	; 0x4a82 <__fp_inf>
    4b36:	ab cf       	rjmp	.-170    	; 0x4a8e <__fp_nan>
    4b38:	11 24       	eor	r1, r1
    4b3a:	ee cf       	rjmp	.-36     	; 0x4b18 <__fp_szero>

00004b3c <__mulsf3x>:
    4b3c:	ca df       	rcall	.-108    	; 0x4ad2 <__fp_split3>
    4b3e:	a0 f3       	brcs	.-24     	; 0x4b28 <__mulsf3+0x4>

00004b40 <__mulsf3_pse>:
    4b40:	95 9f       	mul	r25, r21
    4b42:	d1 f3       	breq	.-12     	; 0x4b38 <__mulsf3+0x14>
    4b44:	95 0f       	add	r25, r21
    4b46:	50 e0       	ldi	r21, 0x00	; 0
    4b48:	55 1f       	adc	r21, r21
    4b4a:	62 9f       	mul	r22, r18
    4b4c:	f0 01       	movw	r30, r0
    4b4e:	72 9f       	mul	r23, r18
    4b50:	bb 27       	eor	r27, r27
    4b52:	f0 0d       	add	r31, r0
    4b54:	b1 1d       	adc	r27, r1
    4b56:	63 9f       	mul	r22, r19
    4b58:	aa 27       	eor	r26, r26
    4b5a:	f0 0d       	add	r31, r0
    4b5c:	b1 1d       	adc	r27, r1
    4b5e:	aa 1f       	adc	r26, r26
    4b60:	64 9f       	mul	r22, r20
    4b62:	66 27       	eor	r22, r22
    4b64:	b0 0d       	add	r27, r0
    4b66:	a1 1d       	adc	r26, r1
    4b68:	66 1f       	adc	r22, r22
    4b6a:	82 9f       	mul	r24, r18
    4b6c:	22 27       	eor	r18, r18
    4b6e:	b0 0d       	add	r27, r0
    4b70:	a1 1d       	adc	r26, r1
    4b72:	62 1f       	adc	r22, r18
    4b74:	73 9f       	mul	r23, r19
    4b76:	b0 0d       	add	r27, r0
    4b78:	a1 1d       	adc	r26, r1
    4b7a:	62 1f       	adc	r22, r18
    4b7c:	83 9f       	mul	r24, r19
    4b7e:	a0 0d       	add	r26, r0
    4b80:	61 1d       	adc	r22, r1
    4b82:	22 1f       	adc	r18, r18
    4b84:	74 9f       	mul	r23, r20
    4b86:	33 27       	eor	r19, r19
    4b88:	a0 0d       	add	r26, r0
    4b8a:	61 1d       	adc	r22, r1
    4b8c:	23 1f       	adc	r18, r19
    4b8e:	84 9f       	mul	r24, r20
    4b90:	60 0d       	add	r22, r0
    4b92:	21 1d       	adc	r18, r1
    4b94:	82 2f       	mov	r24, r18
    4b96:	76 2f       	mov	r23, r22
    4b98:	6a 2f       	mov	r22, r26
    4b9a:	11 24       	eor	r1, r1
    4b9c:	9f 57       	subi	r25, 0x7F	; 127
    4b9e:	50 40       	sbci	r21, 0x00	; 0
    4ba0:	8a f0       	brmi	.+34     	; 0x4bc4 <__mulsf3_pse+0x84>
    4ba2:	e1 f0       	breq	.+56     	; 0x4bdc <__mulsf3_pse+0x9c>
    4ba4:	88 23       	and	r24, r24
    4ba6:	4a f0       	brmi	.+18     	; 0x4bba <__mulsf3_pse+0x7a>
    4ba8:	ee 0f       	add	r30, r30
    4baa:	ff 1f       	adc	r31, r31
    4bac:	bb 1f       	adc	r27, r27
    4bae:	66 1f       	adc	r22, r22
    4bb0:	77 1f       	adc	r23, r23
    4bb2:	88 1f       	adc	r24, r24
    4bb4:	91 50       	subi	r25, 0x01	; 1
    4bb6:	50 40       	sbci	r21, 0x00	; 0
    4bb8:	a9 f7       	brne	.-22     	; 0x4ba4 <__mulsf3_pse+0x64>
    4bba:	9e 3f       	cpi	r25, 0xFE	; 254
    4bbc:	51 05       	cpc	r21, r1
    4bbe:	70 f0       	brcs	.+28     	; 0x4bdc <__mulsf3_pse+0x9c>
    4bc0:	60 cf       	rjmp	.-320    	; 0x4a82 <__fp_inf>
    4bc2:	aa cf       	rjmp	.-172    	; 0x4b18 <__fp_szero>
    4bc4:	5f 3f       	cpi	r21, 0xFF	; 255
    4bc6:	ec f3       	brlt	.-6      	; 0x4bc2 <__mulsf3_pse+0x82>
    4bc8:	98 3e       	cpi	r25, 0xE8	; 232
    4bca:	dc f3       	brlt	.-10     	; 0x4bc2 <__mulsf3_pse+0x82>
    4bcc:	86 95       	lsr	r24
    4bce:	77 95       	ror	r23
    4bd0:	67 95       	ror	r22
    4bd2:	b7 95       	ror	r27
    4bd4:	f7 95       	ror	r31
    4bd6:	e7 95       	ror	r30
    4bd8:	9f 5f       	subi	r25, 0xFF	; 255
    4bda:	c1 f7       	brne	.-16     	; 0x4bcc <__mulsf3_pse+0x8c>
    4bdc:	fe 2b       	or	r31, r30
    4bde:	88 0f       	add	r24, r24
    4be0:	91 1d       	adc	r25, r1
    4be2:	96 95       	lsr	r25
    4be4:	87 95       	ror	r24
    4be6:	97 f9       	bld	r25, 7
    4be8:	08 95       	ret

00004bea <__udivmodsi4>:
    4bea:	a1 e2       	ldi	r26, 0x21	; 33
    4bec:	1a 2e       	mov	r1, r26
    4bee:	aa 1b       	sub	r26, r26
    4bf0:	bb 1b       	sub	r27, r27
    4bf2:	fd 01       	movw	r30, r26
    4bf4:	0d c0       	rjmp	.+26     	; 0x4c10 <__udivmodsi4_ep>

00004bf6 <__udivmodsi4_loop>:
    4bf6:	aa 1f       	adc	r26, r26
    4bf8:	bb 1f       	adc	r27, r27
    4bfa:	ee 1f       	adc	r30, r30
    4bfc:	ff 1f       	adc	r31, r31
    4bfe:	a2 17       	cp	r26, r18
    4c00:	b3 07       	cpc	r27, r19
    4c02:	e4 07       	cpc	r30, r20
    4c04:	f5 07       	cpc	r31, r21
    4c06:	20 f0       	brcs	.+8      	; 0x4c10 <__udivmodsi4_ep>
    4c08:	a2 1b       	sub	r26, r18
    4c0a:	b3 0b       	sbc	r27, r19
    4c0c:	e4 0b       	sbc	r30, r20
    4c0e:	f5 0b       	sbc	r31, r21

00004c10 <__udivmodsi4_ep>:
    4c10:	66 1f       	adc	r22, r22
    4c12:	77 1f       	adc	r23, r23
    4c14:	88 1f       	adc	r24, r24
    4c16:	99 1f       	adc	r25, r25
    4c18:	1a 94       	dec	r1
    4c1a:	69 f7       	brne	.-38     	; 0x4bf6 <__udivmodsi4_loop>
    4c1c:	60 95       	com	r22
    4c1e:	70 95       	com	r23
    4c20:	80 95       	com	r24
    4c22:	90 95       	com	r25
    4c24:	9b 01       	movw	r18, r22
    4c26:	ac 01       	movw	r20, r24
    4c28:	bd 01       	movw	r22, r26
    4c2a:	cf 01       	movw	r24, r30
    4c2c:	08 95       	ret

00004c2e <__tablejump2__>:
    4c2e:	ee 0f       	add	r30, r30
    4c30:	ff 1f       	adc	r31, r31
    4c32:	88 1f       	adc	r24, r24
    4c34:	8b bf       	out	0x3b, r24	; 59
    4c36:	07 90       	elpm	r0, Z+
    4c38:	f6 91       	elpm	r31, Z
    4c3a:	e0 2d       	mov	r30, r0
    4c3c:	19 94       	eijmp

00004c3e <malloc>:
    4c3e:	0f 93       	push	r16
    4c40:	1f 93       	push	r17
    4c42:	cf 93       	push	r28
    4c44:	df 93       	push	r29
    4c46:	82 30       	cpi	r24, 0x02	; 2
    4c48:	91 05       	cpc	r25, r1
    4c4a:	10 f4       	brcc	.+4      	; 0x4c50 <malloc+0x12>
    4c4c:	82 e0       	ldi	r24, 0x02	; 2
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <__flp>
    4c54:	f0 91 f0 13 	lds	r31, 0x13F0	; 0x8013f0 <__flp+0x1>
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	a0 e0       	ldi	r26, 0x00	; 0
    4c5e:	b0 e0       	ldi	r27, 0x00	; 0
    4c60:	30 97       	sbiw	r30, 0x00	; 0
    4c62:	19 f1       	breq	.+70     	; 0x4caa <malloc+0x6c>
    4c64:	40 81       	ld	r20, Z
    4c66:	51 81       	ldd	r21, Z+1	; 0x01
    4c68:	02 81       	ldd	r16, Z+2	; 0x02
    4c6a:	13 81       	ldd	r17, Z+3	; 0x03
    4c6c:	48 17       	cp	r20, r24
    4c6e:	59 07       	cpc	r21, r25
    4c70:	c8 f0       	brcs	.+50     	; 0x4ca4 <malloc+0x66>
    4c72:	84 17       	cp	r24, r20
    4c74:	95 07       	cpc	r25, r21
    4c76:	69 f4       	brne	.+26     	; 0x4c92 <malloc+0x54>
    4c78:	10 97       	sbiw	r26, 0x00	; 0
    4c7a:	31 f0       	breq	.+12     	; 0x4c88 <malloc+0x4a>
    4c7c:	12 96       	adiw	r26, 0x02	; 2
    4c7e:	0c 93       	st	X, r16
    4c80:	12 97       	sbiw	r26, 0x02	; 2
    4c82:	13 96       	adiw	r26, 0x03	; 3
    4c84:	1c 93       	st	X, r17
    4c86:	27 c0       	rjmp	.+78     	; 0x4cd6 <malloc+0x98>
    4c88:	00 93 ef 13 	sts	0x13EF, r16	; 0x8013ef <__flp>
    4c8c:	10 93 f0 13 	sts	0x13F0, r17	; 0x8013f0 <__flp+0x1>
    4c90:	22 c0       	rjmp	.+68     	; 0x4cd6 <malloc+0x98>
    4c92:	21 15       	cp	r18, r1
    4c94:	31 05       	cpc	r19, r1
    4c96:	19 f0       	breq	.+6      	; 0x4c9e <malloc+0x60>
    4c98:	42 17       	cp	r20, r18
    4c9a:	53 07       	cpc	r21, r19
    4c9c:	18 f4       	brcc	.+6      	; 0x4ca4 <malloc+0x66>
    4c9e:	9a 01       	movw	r18, r20
    4ca0:	bd 01       	movw	r22, r26
    4ca2:	ef 01       	movw	r28, r30
    4ca4:	df 01       	movw	r26, r30
    4ca6:	f8 01       	movw	r30, r16
    4ca8:	db cf       	rjmp	.-74     	; 0x4c60 <malloc+0x22>
    4caa:	21 15       	cp	r18, r1
    4cac:	31 05       	cpc	r19, r1
    4cae:	f9 f0       	breq	.+62     	; 0x4cee <malloc+0xb0>
    4cb0:	28 1b       	sub	r18, r24
    4cb2:	39 0b       	sbc	r19, r25
    4cb4:	24 30       	cpi	r18, 0x04	; 4
    4cb6:	31 05       	cpc	r19, r1
    4cb8:	80 f4       	brcc	.+32     	; 0x4cda <malloc+0x9c>
    4cba:	8a 81       	ldd	r24, Y+2	; 0x02
    4cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    4cbe:	61 15       	cp	r22, r1
    4cc0:	71 05       	cpc	r23, r1
    4cc2:	21 f0       	breq	.+8      	; 0x4ccc <malloc+0x8e>
    4cc4:	fb 01       	movw	r30, r22
    4cc6:	93 83       	std	Z+3, r25	; 0x03
    4cc8:	82 83       	std	Z+2, r24	; 0x02
    4cca:	04 c0       	rjmp	.+8      	; 0x4cd4 <malloc+0x96>
    4ccc:	90 93 f0 13 	sts	0x13F0, r25	; 0x8013f0 <__flp+0x1>
    4cd0:	80 93 ef 13 	sts	0x13EF, r24	; 0x8013ef <__flp>
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	32 96       	adiw	r30, 0x02	; 2
    4cd8:	44 c0       	rjmp	.+136    	; 0x4d62 <malloc+0x124>
    4cda:	fe 01       	movw	r30, r28
    4cdc:	e2 0f       	add	r30, r18
    4cde:	f3 1f       	adc	r31, r19
    4ce0:	81 93       	st	Z+, r24
    4ce2:	91 93       	st	Z+, r25
    4ce4:	22 50       	subi	r18, 0x02	; 2
    4ce6:	31 09       	sbc	r19, r1
    4ce8:	39 83       	std	Y+1, r19	; 0x01
    4cea:	28 83       	st	Y, r18
    4cec:	3a c0       	rjmp	.+116    	; 0x4d62 <malloc+0x124>
    4cee:	20 91 ed 13 	lds	r18, 0x13ED	; 0x8013ed <__brkval>
    4cf2:	30 91 ee 13 	lds	r19, 0x13EE	; 0x8013ee <__brkval+0x1>
    4cf6:	23 2b       	or	r18, r19
    4cf8:	41 f4       	brne	.+16     	; 0x4d0a <malloc+0xcc>
    4cfa:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4cfe:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4d02:	30 93 ee 13 	sts	0x13EE, r19	; 0x8013ee <__brkval+0x1>
    4d06:	20 93 ed 13 	sts	0x13ED, r18	; 0x8013ed <__brkval>
    4d0a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4d0e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4d12:	21 15       	cp	r18, r1
    4d14:	31 05       	cpc	r19, r1
    4d16:	41 f4       	brne	.+16     	; 0x4d28 <malloc+0xea>
    4d18:	2d b7       	in	r18, 0x3d	; 61
    4d1a:	3e b7       	in	r19, 0x3e	; 62
    4d1c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4d20:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4d24:	24 1b       	sub	r18, r20
    4d26:	35 0b       	sbc	r19, r21
    4d28:	e0 91 ed 13 	lds	r30, 0x13ED	; 0x8013ed <__brkval>
    4d2c:	f0 91 ee 13 	lds	r31, 0x13EE	; 0x8013ee <__brkval+0x1>
    4d30:	e2 17       	cp	r30, r18
    4d32:	f3 07       	cpc	r31, r19
    4d34:	a0 f4       	brcc	.+40     	; 0x4d5e <malloc+0x120>
    4d36:	2e 1b       	sub	r18, r30
    4d38:	3f 0b       	sbc	r19, r31
    4d3a:	28 17       	cp	r18, r24
    4d3c:	39 07       	cpc	r19, r25
    4d3e:	78 f0       	brcs	.+30     	; 0x4d5e <malloc+0x120>
    4d40:	ac 01       	movw	r20, r24
    4d42:	4e 5f       	subi	r20, 0xFE	; 254
    4d44:	5f 4f       	sbci	r21, 0xFF	; 255
    4d46:	24 17       	cp	r18, r20
    4d48:	35 07       	cpc	r19, r21
    4d4a:	48 f0       	brcs	.+18     	; 0x4d5e <malloc+0x120>
    4d4c:	4e 0f       	add	r20, r30
    4d4e:	5f 1f       	adc	r21, r31
    4d50:	50 93 ee 13 	sts	0x13EE, r21	; 0x8013ee <__brkval+0x1>
    4d54:	40 93 ed 13 	sts	0x13ED, r20	; 0x8013ed <__brkval>
    4d58:	81 93       	st	Z+, r24
    4d5a:	91 93       	st	Z+, r25
    4d5c:	02 c0       	rjmp	.+4      	; 0x4d62 <malloc+0x124>
    4d5e:	e0 e0       	ldi	r30, 0x00	; 0
    4d60:	f0 e0       	ldi	r31, 0x00	; 0
    4d62:	cf 01       	movw	r24, r30
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	1f 91       	pop	r17
    4d6a:	0f 91       	pop	r16
    4d6c:	08 95       	ret

00004d6e <free>:
    4d6e:	cf 93       	push	r28
    4d70:	df 93       	push	r29
    4d72:	00 97       	sbiw	r24, 0x00	; 0
    4d74:	09 f4       	brne	.+2      	; 0x4d78 <free+0xa>
    4d76:	81 c0       	rjmp	.+258    	; 0x4e7a <free+0x10c>
    4d78:	fc 01       	movw	r30, r24
    4d7a:	32 97       	sbiw	r30, 0x02	; 2
    4d7c:	13 82       	std	Z+3, r1	; 0x03
    4d7e:	12 82       	std	Z+2, r1	; 0x02
    4d80:	a0 91 ef 13 	lds	r26, 0x13EF	; 0x8013ef <__flp>
    4d84:	b0 91 f0 13 	lds	r27, 0x13F0	; 0x8013f0 <__flp+0x1>
    4d88:	10 97       	sbiw	r26, 0x00	; 0
    4d8a:	81 f4       	brne	.+32     	; 0x4dac <free+0x3e>
    4d8c:	20 81       	ld	r18, Z
    4d8e:	31 81       	ldd	r19, Z+1	; 0x01
    4d90:	82 0f       	add	r24, r18
    4d92:	93 1f       	adc	r25, r19
    4d94:	20 91 ed 13 	lds	r18, 0x13ED	; 0x8013ed <__brkval>
    4d98:	30 91 ee 13 	lds	r19, 0x13EE	; 0x8013ee <__brkval+0x1>
    4d9c:	28 17       	cp	r18, r24
    4d9e:	39 07       	cpc	r19, r25
    4da0:	51 f5       	brne	.+84     	; 0x4df6 <free+0x88>
    4da2:	f0 93 ee 13 	sts	0x13EE, r31	; 0x8013ee <__brkval+0x1>
    4da6:	e0 93 ed 13 	sts	0x13ED, r30	; 0x8013ed <__brkval>
    4daa:	67 c0       	rjmp	.+206    	; 0x4e7a <free+0x10c>
    4dac:	ed 01       	movw	r28, r26
    4dae:	20 e0       	ldi	r18, 0x00	; 0
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	ce 17       	cp	r28, r30
    4db4:	df 07       	cpc	r29, r31
    4db6:	40 f4       	brcc	.+16     	; 0x4dc8 <free+0x5a>
    4db8:	4a 81       	ldd	r20, Y+2	; 0x02
    4dba:	5b 81       	ldd	r21, Y+3	; 0x03
    4dbc:	9e 01       	movw	r18, r28
    4dbe:	41 15       	cp	r20, r1
    4dc0:	51 05       	cpc	r21, r1
    4dc2:	f1 f0       	breq	.+60     	; 0x4e00 <free+0x92>
    4dc4:	ea 01       	movw	r28, r20
    4dc6:	f5 cf       	rjmp	.-22     	; 0x4db2 <free+0x44>
    4dc8:	d3 83       	std	Z+3, r29	; 0x03
    4dca:	c2 83       	std	Z+2, r28	; 0x02
    4dcc:	40 81       	ld	r20, Z
    4dce:	51 81       	ldd	r21, Z+1	; 0x01
    4dd0:	84 0f       	add	r24, r20
    4dd2:	95 1f       	adc	r25, r21
    4dd4:	c8 17       	cp	r28, r24
    4dd6:	d9 07       	cpc	r29, r25
    4dd8:	59 f4       	brne	.+22     	; 0x4df0 <free+0x82>
    4dda:	88 81       	ld	r24, Y
    4ddc:	99 81       	ldd	r25, Y+1	; 0x01
    4dde:	84 0f       	add	r24, r20
    4de0:	95 1f       	adc	r25, r21
    4de2:	02 96       	adiw	r24, 0x02	; 2
    4de4:	91 83       	std	Z+1, r25	; 0x01
    4de6:	80 83       	st	Z, r24
    4de8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dea:	9b 81       	ldd	r25, Y+3	; 0x03
    4dec:	93 83       	std	Z+3, r25	; 0x03
    4dee:	82 83       	std	Z+2, r24	; 0x02
    4df0:	21 15       	cp	r18, r1
    4df2:	31 05       	cpc	r19, r1
    4df4:	29 f4       	brne	.+10     	; 0x4e00 <free+0x92>
    4df6:	f0 93 f0 13 	sts	0x13F0, r31	; 0x8013f0 <__flp+0x1>
    4dfa:	e0 93 ef 13 	sts	0x13EF, r30	; 0x8013ef <__flp>
    4dfe:	3d c0       	rjmp	.+122    	; 0x4e7a <free+0x10c>
    4e00:	e9 01       	movw	r28, r18
    4e02:	fb 83       	std	Y+3, r31	; 0x03
    4e04:	ea 83       	std	Y+2, r30	; 0x02
    4e06:	49 91       	ld	r20, Y+
    4e08:	59 91       	ld	r21, Y+
    4e0a:	c4 0f       	add	r28, r20
    4e0c:	d5 1f       	adc	r29, r21
    4e0e:	ec 17       	cp	r30, r28
    4e10:	fd 07       	cpc	r31, r29
    4e12:	61 f4       	brne	.+24     	; 0x4e2c <free+0xbe>
    4e14:	80 81       	ld	r24, Z
    4e16:	91 81       	ldd	r25, Z+1	; 0x01
    4e18:	84 0f       	add	r24, r20
    4e1a:	95 1f       	adc	r25, r21
    4e1c:	02 96       	adiw	r24, 0x02	; 2
    4e1e:	e9 01       	movw	r28, r18
    4e20:	99 83       	std	Y+1, r25	; 0x01
    4e22:	88 83       	st	Y, r24
    4e24:	82 81       	ldd	r24, Z+2	; 0x02
    4e26:	93 81       	ldd	r25, Z+3	; 0x03
    4e28:	9b 83       	std	Y+3, r25	; 0x03
    4e2a:	8a 83       	std	Y+2, r24	; 0x02
    4e2c:	e0 e0       	ldi	r30, 0x00	; 0
    4e2e:	f0 e0       	ldi	r31, 0x00	; 0
    4e30:	12 96       	adiw	r26, 0x02	; 2
    4e32:	8d 91       	ld	r24, X+
    4e34:	9c 91       	ld	r25, X
    4e36:	13 97       	sbiw	r26, 0x03	; 3
    4e38:	00 97       	sbiw	r24, 0x00	; 0
    4e3a:	19 f0       	breq	.+6      	; 0x4e42 <free+0xd4>
    4e3c:	fd 01       	movw	r30, r26
    4e3e:	dc 01       	movw	r26, r24
    4e40:	f7 cf       	rjmp	.-18     	; 0x4e30 <free+0xc2>
    4e42:	8d 91       	ld	r24, X+
    4e44:	9c 91       	ld	r25, X
    4e46:	11 97       	sbiw	r26, 0x01	; 1
    4e48:	9d 01       	movw	r18, r26
    4e4a:	2e 5f       	subi	r18, 0xFE	; 254
    4e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4e:	82 0f       	add	r24, r18
    4e50:	93 1f       	adc	r25, r19
    4e52:	20 91 ed 13 	lds	r18, 0x13ED	; 0x8013ed <__brkval>
    4e56:	30 91 ee 13 	lds	r19, 0x13EE	; 0x8013ee <__brkval+0x1>
    4e5a:	28 17       	cp	r18, r24
    4e5c:	39 07       	cpc	r19, r25
    4e5e:	69 f4       	brne	.+26     	; 0x4e7a <free+0x10c>
    4e60:	30 97       	sbiw	r30, 0x00	; 0
    4e62:	29 f4       	brne	.+10     	; 0x4e6e <free+0x100>
    4e64:	10 92 f0 13 	sts	0x13F0, r1	; 0x8013f0 <__flp+0x1>
    4e68:	10 92 ef 13 	sts	0x13EF, r1	; 0x8013ef <__flp>
    4e6c:	02 c0       	rjmp	.+4      	; 0x4e72 <free+0x104>
    4e6e:	13 82       	std	Z+3, r1	; 0x03
    4e70:	12 82       	std	Z+2, r1	; 0x02
    4e72:	b0 93 ee 13 	sts	0x13EE, r27	; 0x8013ee <__brkval+0x1>
    4e76:	a0 93 ed 13 	sts	0x13ED, r26	; 0x8013ed <__brkval>
    4e7a:	df 91       	pop	r29
    4e7c:	cf 91       	pop	r28
    4e7e:	08 95       	ret

00004e80 <abort>:
    4e80:	81 e0       	ldi	r24, 0x01	; 1
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	f8 94       	cli
    4e86:	dc c1       	rjmp	.+952    	; 0x5240 <_exit>

00004e88 <__ftoa_engine>:
    4e88:	28 30       	cpi	r18, 0x08	; 8
    4e8a:	08 f0       	brcs	.+2      	; 0x4e8e <__ftoa_engine+0x6>
    4e8c:	27 e0       	ldi	r18, 0x07	; 7
    4e8e:	33 27       	eor	r19, r19
    4e90:	da 01       	movw	r26, r20
    4e92:	99 0f       	add	r25, r25
    4e94:	31 1d       	adc	r19, r1
    4e96:	87 fd       	sbrc	r24, 7
    4e98:	91 60       	ori	r25, 0x01	; 1
    4e9a:	00 96       	adiw	r24, 0x00	; 0
    4e9c:	61 05       	cpc	r22, r1
    4e9e:	71 05       	cpc	r23, r1
    4ea0:	39 f4       	brne	.+14     	; 0x4eb0 <__ftoa_engine+0x28>
    4ea2:	32 60       	ori	r19, 0x02	; 2
    4ea4:	2e 5f       	subi	r18, 0xFE	; 254
    4ea6:	3d 93       	st	X+, r19
    4ea8:	30 e3       	ldi	r19, 0x30	; 48
    4eaa:	2a 95       	dec	r18
    4eac:	e1 f7       	brne	.-8      	; 0x4ea6 <__ftoa_engine+0x1e>
    4eae:	08 95       	ret
    4eb0:	9f 3f       	cpi	r25, 0xFF	; 255
    4eb2:	30 f0       	brcs	.+12     	; 0x4ec0 <__ftoa_engine+0x38>
    4eb4:	80 38       	cpi	r24, 0x80	; 128
    4eb6:	71 05       	cpc	r23, r1
    4eb8:	61 05       	cpc	r22, r1
    4eba:	09 f0       	breq	.+2      	; 0x4ebe <__ftoa_engine+0x36>
    4ebc:	3c 5f       	subi	r19, 0xFC	; 252
    4ebe:	3c 5f       	subi	r19, 0xFC	; 252
    4ec0:	3d 93       	st	X+, r19
    4ec2:	91 30       	cpi	r25, 0x01	; 1
    4ec4:	08 f0       	brcs	.+2      	; 0x4ec8 <__ftoa_engine+0x40>
    4ec6:	80 68       	ori	r24, 0x80	; 128
    4ec8:	91 1d       	adc	r25, r1
    4eca:	df 93       	push	r29
    4ecc:	cf 93       	push	r28
    4ece:	1f 93       	push	r17
    4ed0:	0f 93       	push	r16
    4ed2:	ff 92       	push	r15
    4ed4:	ef 92       	push	r14
    4ed6:	19 2f       	mov	r17, r25
    4ed8:	98 7f       	andi	r25, 0xF8	; 248
    4eda:	96 95       	lsr	r25
    4edc:	e9 2f       	mov	r30, r25
    4ede:	96 95       	lsr	r25
    4ee0:	96 95       	lsr	r25
    4ee2:	e9 0f       	add	r30, r25
    4ee4:	ff 27       	eor	r31, r31
    4ee6:	e4 50       	subi	r30, 0x04	; 4
    4ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    4eea:	99 27       	eor	r25, r25
    4eec:	33 27       	eor	r19, r19
    4eee:	ee 24       	eor	r14, r14
    4ef0:	ff 24       	eor	r15, r15
    4ef2:	a7 01       	movw	r20, r14
    4ef4:	e7 01       	movw	r28, r14
    4ef6:	05 90       	lpm	r0, Z+
    4ef8:	08 94       	sec
    4efa:	07 94       	ror	r0
    4efc:	28 f4       	brcc	.+10     	; 0x4f08 <__ftoa_engine+0x80>
    4efe:	36 0f       	add	r19, r22
    4f00:	e7 1e       	adc	r14, r23
    4f02:	f8 1e       	adc	r15, r24
    4f04:	49 1f       	adc	r20, r25
    4f06:	51 1d       	adc	r21, r1
    4f08:	66 0f       	add	r22, r22
    4f0a:	77 1f       	adc	r23, r23
    4f0c:	88 1f       	adc	r24, r24
    4f0e:	99 1f       	adc	r25, r25
    4f10:	06 94       	lsr	r0
    4f12:	a1 f7       	brne	.-24     	; 0x4efc <__ftoa_engine+0x74>
    4f14:	05 90       	lpm	r0, Z+
    4f16:	07 94       	ror	r0
    4f18:	28 f4       	brcc	.+10     	; 0x4f24 <__ftoa_engine+0x9c>
    4f1a:	e7 0e       	add	r14, r23
    4f1c:	f8 1e       	adc	r15, r24
    4f1e:	49 1f       	adc	r20, r25
    4f20:	56 1f       	adc	r21, r22
    4f22:	c1 1d       	adc	r28, r1
    4f24:	77 0f       	add	r23, r23
    4f26:	88 1f       	adc	r24, r24
    4f28:	99 1f       	adc	r25, r25
    4f2a:	66 1f       	adc	r22, r22
    4f2c:	06 94       	lsr	r0
    4f2e:	a1 f7       	brne	.-24     	; 0x4f18 <__ftoa_engine+0x90>
    4f30:	05 90       	lpm	r0, Z+
    4f32:	07 94       	ror	r0
    4f34:	28 f4       	brcc	.+10     	; 0x4f40 <__ftoa_engine+0xb8>
    4f36:	f8 0e       	add	r15, r24
    4f38:	49 1f       	adc	r20, r25
    4f3a:	56 1f       	adc	r21, r22
    4f3c:	c7 1f       	adc	r28, r23
    4f3e:	d1 1d       	adc	r29, r1
    4f40:	88 0f       	add	r24, r24
    4f42:	99 1f       	adc	r25, r25
    4f44:	66 1f       	adc	r22, r22
    4f46:	77 1f       	adc	r23, r23
    4f48:	06 94       	lsr	r0
    4f4a:	a1 f7       	brne	.-24     	; 0x4f34 <__ftoa_engine+0xac>
    4f4c:	05 90       	lpm	r0, Z+
    4f4e:	07 94       	ror	r0
    4f50:	20 f4       	brcc	.+8      	; 0x4f5a <__ftoa_engine+0xd2>
    4f52:	49 0f       	add	r20, r25
    4f54:	56 1f       	adc	r21, r22
    4f56:	c7 1f       	adc	r28, r23
    4f58:	d8 1f       	adc	r29, r24
    4f5a:	99 0f       	add	r25, r25
    4f5c:	66 1f       	adc	r22, r22
    4f5e:	77 1f       	adc	r23, r23
    4f60:	88 1f       	adc	r24, r24
    4f62:	06 94       	lsr	r0
    4f64:	a9 f7       	brne	.-22     	; 0x4f50 <__ftoa_engine+0xc8>
    4f66:	84 91       	lpm	r24, Z
    4f68:	10 95       	com	r17
    4f6a:	17 70       	andi	r17, 0x07	; 7
    4f6c:	41 f0       	breq	.+16     	; 0x4f7e <__ftoa_engine+0xf6>
    4f6e:	d6 95       	lsr	r29
    4f70:	c7 95       	ror	r28
    4f72:	57 95       	ror	r21
    4f74:	47 95       	ror	r20
    4f76:	f7 94       	ror	r15
    4f78:	e7 94       	ror	r14
    4f7a:	1a 95       	dec	r17
    4f7c:	c1 f7       	brne	.-16     	; 0x4f6e <__ftoa_engine+0xe6>
    4f7e:	e2 ea       	ldi	r30, 0xA2	; 162
    4f80:	f1 e0       	ldi	r31, 0x01	; 1
    4f82:	68 94       	set
    4f84:	15 90       	lpm	r1, Z+
    4f86:	15 91       	lpm	r17, Z+
    4f88:	35 91       	lpm	r19, Z+
    4f8a:	65 91       	lpm	r22, Z+
    4f8c:	95 91       	lpm	r25, Z+
    4f8e:	05 90       	lpm	r0, Z+
    4f90:	7f e2       	ldi	r23, 0x2F	; 47
    4f92:	73 95       	inc	r23
    4f94:	e1 18       	sub	r14, r1
    4f96:	f1 0a       	sbc	r15, r17
    4f98:	43 0b       	sbc	r20, r19
    4f9a:	56 0b       	sbc	r21, r22
    4f9c:	c9 0b       	sbc	r28, r25
    4f9e:	d0 09       	sbc	r29, r0
    4fa0:	c0 f7       	brcc	.-16     	; 0x4f92 <__ftoa_engine+0x10a>
    4fa2:	e1 0c       	add	r14, r1
    4fa4:	f1 1e       	adc	r15, r17
    4fa6:	43 1f       	adc	r20, r19
    4fa8:	56 1f       	adc	r21, r22
    4faa:	c9 1f       	adc	r28, r25
    4fac:	d0 1d       	adc	r29, r0
    4fae:	7e f4       	brtc	.+30     	; 0x4fce <__ftoa_engine+0x146>
    4fb0:	70 33       	cpi	r23, 0x30	; 48
    4fb2:	11 f4       	brne	.+4      	; 0x4fb8 <__ftoa_engine+0x130>
    4fb4:	8a 95       	dec	r24
    4fb6:	e6 cf       	rjmp	.-52     	; 0x4f84 <__ftoa_engine+0xfc>
    4fb8:	e8 94       	clt
    4fba:	01 50       	subi	r16, 0x01	; 1
    4fbc:	30 f0       	brcs	.+12     	; 0x4fca <__ftoa_engine+0x142>
    4fbe:	08 0f       	add	r16, r24
    4fc0:	0a f4       	brpl	.+2      	; 0x4fc4 <__ftoa_engine+0x13c>
    4fc2:	00 27       	eor	r16, r16
    4fc4:	02 17       	cp	r16, r18
    4fc6:	08 f4       	brcc	.+2      	; 0x4fca <__ftoa_engine+0x142>
    4fc8:	20 2f       	mov	r18, r16
    4fca:	23 95       	inc	r18
    4fcc:	02 2f       	mov	r16, r18
    4fce:	7a 33       	cpi	r23, 0x3A	; 58
    4fd0:	28 f0       	brcs	.+10     	; 0x4fdc <__ftoa_engine+0x154>
    4fd2:	79 e3       	ldi	r23, 0x39	; 57
    4fd4:	7d 93       	st	X+, r23
    4fd6:	2a 95       	dec	r18
    4fd8:	e9 f7       	brne	.-6      	; 0x4fd4 <__ftoa_engine+0x14c>
    4fda:	10 c0       	rjmp	.+32     	; 0x4ffc <__ftoa_engine+0x174>
    4fdc:	7d 93       	st	X+, r23
    4fde:	2a 95       	dec	r18
    4fe0:	89 f6       	brne	.-94     	; 0x4f84 <__ftoa_engine+0xfc>
    4fe2:	06 94       	lsr	r0
    4fe4:	97 95       	ror	r25
    4fe6:	67 95       	ror	r22
    4fe8:	37 95       	ror	r19
    4fea:	17 95       	ror	r17
    4fec:	17 94       	ror	r1
    4fee:	e1 18       	sub	r14, r1
    4ff0:	f1 0a       	sbc	r15, r17
    4ff2:	43 0b       	sbc	r20, r19
    4ff4:	56 0b       	sbc	r21, r22
    4ff6:	c9 0b       	sbc	r28, r25
    4ff8:	d0 09       	sbc	r29, r0
    4ffa:	98 f0       	brcs	.+38     	; 0x5022 <__ftoa_engine+0x19a>
    4ffc:	23 95       	inc	r18
    4ffe:	7e 91       	ld	r23, -X
    5000:	73 95       	inc	r23
    5002:	7a 33       	cpi	r23, 0x3A	; 58
    5004:	08 f0       	brcs	.+2      	; 0x5008 <__ftoa_engine+0x180>
    5006:	70 e3       	ldi	r23, 0x30	; 48
    5008:	7c 93       	st	X, r23
    500a:	20 13       	cpse	r18, r16
    500c:	b8 f7       	brcc	.-18     	; 0x4ffc <__ftoa_engine+0x174>
    500e:	7e 91       	ld	r23, -X
    5010:	70 61       	ori	r23, 0x10	; 16
    5012:	7d 93       	st	X+, r23
    5014:	30 f0       	brcs	.+12     	; 0x5022 <__ftoa_engine+0x19a>
    5016:	83 95       	inc	r24
    5018:	71 e3       	ldi	r23, 0x31	; 49
    501a:	7d 93       	st	X+, r23
    501c:	70 e3       	ldi	r23, 0x30	; 48
    501e:	2a 95       	dec	r18
    5020:	e1 f7       	brne	.-8      	; 0x501a <__ftoa_engine+0x192>
    5022:	11 24       	eor	r1, r1
    5024:	ef 90       	pop	r14
    5026:	ff 90       	pop	r15
    5028:	0f 91       	pop	r16
    502a:	1f 91       	pop	r17
    502c:	cf 91       	pop	r28
    502e:	df 91       	pop	r29
    5030:	99 27       	eor	r25, r25
    5032:	87 fd       	sbrc	r24, 7
    5034:	90 95       	com	r25
    5036:	08 95       	ret

00005038 <strnlen_P>:
    5038:	fc 01       	movw	r30, r24
    503a:	05 90       	lpm	r0, Z+
    503c:	61 50       	subi	r22, 0x01	; 1
    503e:	70 40       	sbci	r23, 0x00	; 0
    5040:	01 10       	cpse	r0, r1
    5042:	d8 f7       	brcc	.-10     	; 0x503a <strnlen_P+0x2>
    5044:	80 95       	com	r24
    5046:	90 95       	com	r25
    5048:	8e 0f       	add	r24, r30
    504a:	9f 1f       	adc	r25, r31
    504c:	08 95       	ret

0000504e <memcpy>:
    504e:	fb 01       	movw	r30, r22
    5050:	dc 01       	movw	r26, r24
    5052:	02 c0       	rjmp	.+4      	; 0x5058 <memcpy+0xa>
    5054:	01 90       	ld	r0, Z+
    5056:	0d 92       	st	X+, r0
    5058:	41 50       	subi	r20, 0x01	; 1
    505a:	50 40       	sbci	r21, 0x00	; 0
    505c:	d8 f7       	brcc	.-10     	; 0x5054 <memcpy+0x6>
    505e:	08 95       	ret

00005060 <memset>:
    5060:	dc 01       	movw	r26, r24
    5062:	01 c0       	rjmp	.+2      	; 0x5066 <memset+0x6>
    5064:	6d 93       	st	X+, r22
    5066:	41 50       	subi	r20, 0x01	; 1
    5068:	50 40       	sbci	r21, 0x00	; 0
    506a:	e0 f7       	brcc	.-8      	; 0x5064 <memset+0x4>
    506c:	08 95       	ret

0000506e <strnlen>:
    506e:	fc 01       	movw	r30, r24
    5070:	61 50       	subi	r22, 0x01	; 1
    5072:	70 40       	sbci	r23, 0x00	; 0
    5074:	01 90       	ld	r0, Z+
    5076:	01 10       	cpse	r0, r1
    5078:	d8 f7       	brcc	.-10     	; 0x5070 <strnlen+0x2>
    507a:	80 95       	com	r24
    507c:	90 95       	com	r25
    507e:	8e 0f       	add	r24, r30
    5080:	9f 1f       	adc	r25, r31
    5082:	08 95       	ret

00005084 <fputc>:
    5084:	0f 93       	push	r16
    5086:	1f 93       	push	r17
    5088:	cf 93       	push	r28
    508a:	df 93       	push	r29
    508c:	fb 01       	movw	r30, r22
    508e:	23 81       	ldd	r18, Z+3	; 0x03
    5090:	21 fd       	sbrc	r18, 1
    5092:	03 c0       	rjmp	.+6      	; 0x509a <fputc+0x16>
    5094:	8f ef       	ldi	r24, 0xFF	; 255
    5096:	9f ef       	ldi	r25, 0xFF	; 255
    5098:	2c c0       	rjmp	.+88     	; 0x50f2 <fputc+0x6e>
    509a:	22 ff       	sbrs	r18, 2
    509c:	16 c0       	rjmp	.+44     	; 0x50ca <fputc+0x46>
    509e:	46 81       	ldd	r20, Z+6	; 0x06
    50a0:	57 81       	ldd	r21, Z+7	; 0x07
    50a2:	24 81       	ldd	r18, Z+4	; 0x04
    50a4:	35 81       	ldd	r19, Z+5	; 0x05
    50a6:	42 17       	cp	r20, r18
    50a8:	53 07       	cpc	r21, r19
    50aa:	44 f4       	brge	.+16     	; 0x50bc <fputc+0x38>
    50ac:	a0 81       	ld	r26, Z
    50ae:	b1 81       	ldd	r27, Z+1	; 0x01
    50b0:	9d 01       	movw	r18, r26
    50b2:	2f 5f       	subi	r18, 0xFF	; 255
    50b4:	3f 4f       	sbci	r19, 0xFF	; 255
    50b6:	31 83       	std	Z+1, r19	; 0x01
    50b8:	20 83       	st	Z, r18
    50ba:	8c 93       	st	X, r24
    50bc:	26 81       	ldd	r18, Z+6	; 0x06
    50be:	37 81       	ldd	r19, Z+7	; 0x07
    50c0:	2f 5f       	subi	r18, 0xFF	; 255
    50c2:	3f 4f       	sbci	r19, 0xFF	; 255
    50c4:	37 83       	std	Z+7, r19	; 0x07
    50c6:	26 83       	std	Z+6, r18	; 0x06
    50c8:	14 c0       	rjmp	.+40     	; 0x50f2 <fputc+0x6e>
    50ca:	8b 01       	movw	r16, r22
    50cc:	ec 01       	movw	r28, r24
    50ce:	fb 01       	movw	r30, r22
    50d0:	00 84       	ldd	r0, Z+8	; 0x08
    50d2:	f1 85       	ldd	r31, Z+9	; 0x09
    50d4:	e0 2d       	mov	r30, r0
    50d6:	19 95       	eicall
    50d8:	89 2b       	or	r24, r25
    50da:	e1 f6       	brne	.-72     	; 0x5094 <fputc+0x10>
    50dc:	d8 01       	movw	r26, r16
    50de:	16 96       	adiw	r26, 0x06	; 6
    50e0:	8d 91       	ld	r24, X+
    50e2:	9c 91       	ld	r25, X
    50e4:	17 97       	sbiw	r26, 0x07	; 7
    50e6:	01 96       	adiw	r24, 0x01	; 1
    50e8:	17 96       	adiw	r26, 0x07	; 7
    50ea:	9c 93       	st	X, r25
    50ec:	8e 93       	st	-X, r24
    50ee:	16 97       	sbiw	r26, 0x06	; 6
    50f0:	ce 01       	movw	r24, r28
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
    50f6:	1f 91       	pop	r17
    50f8:	0f 91       	pop	r16
    50fa:	08 95       	ret

000050fc <printf>:
    50fc:	cf 93       	push	r28
    50fe:	df 93       	push	r29
    5100:	cd b7       	in	r28, 0x3d	; 61
    5102:	de b7       	in	r29, 0x3e	; 62
    5104:	ae 01       	movw	r20, r28
    5106:	4a 5f       	subi	r20, 0xFA	; 250
    5108:	5f 4f       	sbci	r21, 0xFF	; 255
    510a:	fa 01       	movw	r30, r20
    510c:	61 91       	ld	r22, Z+
    510e:	71 91       	ld	r23, Z+
    5110:	af 01       	movw	r20, r30
    5112:	80 91 f3 13 	lds	r24, 0x13F3	; 0x8013f3 <__iob+0x2>
    5116:	90 91 f4 13 	lds	r25, 0x13F4	; 0x8013f4 <__iob+0x3>
    511a:	0e 94 7d 20 	call	0x40fa	; 0x40fa <vfprintf>
    511e:	df 91       	pop	r29
    5120:	cf 91       	pop	r28
    5122:	08 95       	ret

00005124 <puts>:
    5124:	0f 93       	push	r16
    5126:	1f 93       	push	r17
    5128:	cf 93       	push	r28
    512a:	df 93       	push	r29
    512c:	e0 91 f3 13 	lds	r30, 0x13F3	; 0x8013f3 <__iob+0x2>
    5130:	f0 91 f4 13 	lds	r31, 0x13F4	; 0x8013f4 <__iob+0x3>
    5134:	23 81       	ldd	r18, Z+3	; 0x03
    5136:	21 ff       	sbrs	r18, 1
    5138:	1b c0       	rjmp	.+54     	; 0x5170 <puts+0x4c>
    513a:	8c 01       	movw	r16, r24
    513c:	d0 e0       	ldi	r29, 0x00	; 0
    513e:	c0 e0       	ldi	r28, 0x00	; 0
    5140:	f8 01       	movw	r30, r16
    5142:	81 91       	ld	r24, Z+
    5144:	8f 01       	movw	r16, r30
    5146:	60 91 f3 13 	lds	r22, 0x13F3	; 0x8013f3 <__iob+0x2>
    514a:	70 91 f4 13 	lds	r23, 0x13F4	; 0x8013f4 <__iob+0x3>
    514e:	db 01       	movw	r26, r22
    5150:	18 96       	adiw	r26, 0x08	; 8
    5152:	ed 91       	ld	r30, X+
    5154:	fc 91       	ld	r31, X
    5156:	19 97       	sbiw	r26, 0x09	; 9
    5158:	88 23       	and	r24, r24
    515a:	31 f0       	breq	.+12     	; 0x5168 <puts+0x44>
    515c:	19 95       	eicall
    515e:	89 2b       	or	r24, r25
    5160:	79 f3       	breq	.-34     	; 0x5140 <puts+0x1c>
    5162:	df ef       	ldi	r29, 0xFF	; 255
    5164:	cf ef       	ldi	r28, 0xFF	; 255
    5166:	ec cf       	rjmp	.-40     	; 0x5140 <puts+0x1c>
    5168:	8a e0       	ldi	r24, 0x0A	; 10
    516a:	19 95       	eicall
    516c:	89 2b       	or	r24, r25
    516e:	19 f0       	breq	.+6      	; 0x5176 <puts+0x52>
    5170:	8f ef       	ldi	r24, 0xFF	; 255
    5172:	9f ef       	ldi	r25, 0xFF	; 255
    5174:	02 c0       	rjmp	.+4      	; 0x517a <puts+0x56>
    5176:	8d 2f       	mov	r24, r29
    5178:	9c 2f       	mov	r25, r28
    517a:	df 91       	pop	r29
    517c:	cf 91       	pop	r28
    517e:	1f 91       	pop	r17
    5180:	0f 91       	pop	r16
    5182:	08 95       	ret

00005184 <__ultoa_invert>:
    5184:	fa 01       	movw	r30, r20
    5186:	aa 27       	eor	r26, r26
    5188:	28 30       	cpi	r18, 0x08	; 8
    518a:	51 f1       	breq	.+84     	; 0x51e0 <__ultoa_invert+0x5c>
    518c:	20 31       	cpi	r18, 0x10	; 16
    518e:	81 f1       	breq	.+96     	; 0x51f0 <__ultoa_invert+0x6c>
    5190:	e8 94       	clt
    5192:	6f 93       	push	r22
    5194:	6e 7f       	andi	r22, 0xFE	; 254
    5196:	6e 5f       	subi	r22, 0xFE	; 254
    5198:	7f 4f       	sbci	r23, 0xFF	; 255
    519a:	8f 4f       	sbci	r24, 0xFF	; 255
    519c:	9f 4f       	sbci	r25, 0xFF	; 255
    519e:	af 4f       	sbci	r26, 0xFF	; 255
    51a0:	b1 e0       	ldi	r27, 0x01	; 1
    51a2:	3e d0       	rcall	.+124    	; 0x5220 <__ultoa_invert+0x9c>
    51a4:	b4 e0       	ldi	r27, 0x04	; 4
    51a6:	3c d0       	rcall	.+120    	; 0x5220 <__ultoa_invert+0x9c>
    51a8:	67 0f       	add	r22, r23
    51aa:	78 1f       	adc	r23, r24
    51ac:	89 1f       	adc	r24, r25
    51ae:	9a 1f       	adc	r25, r26
    51b0:	a1 1d       	adc	r26, r1
    51b2:	68 0f       	add	r22, r24
    51b4:	79 1f       	adc	r23, r25
    51b6:	8a 1f       	adc	r24, r26
    51b8:	91 1d       	adc	r25, r1
    51ba:	a1 1d       	adc	r26, r1
    51bc:	6a 0f       	add	r22, r26
    51be:	71 1d       	adc	r23, r1
    51c0:	81 1d       	adc	r24, r1
    51c2:	91 1d       	adc	r25, r1
    51c4:	a1 1d       	adc	r26, r1
    51c6:	20 d0       	rcall	.+64     	; 0x5208 <__ultoa_invert+0x84>
    51c8:	09 f4       	brne	.+2      	; 0x51cc <__ultoa_invert+0x48>
    51ca:	68 94       	set
    51cc:	3f 91       	pop	r19
    51ce:	2a e0       	ldi	r18, 0x0A	; 10
    51d0:	26 9f       	mul	r18, r22
    51d2:	11 24       	eor	r1, r1
    51d4:	30 19       	sub	r19, r0
    51d6:	30 5d       	subi	r19, 0xD0	; 208
    51d8:	31 93       	st	Z+, r19
    51da:	de f6       	brtc	.-74     	; 0x5192 <__ultoa_invert+0xe>
    51dc:	cf 01       	movw	r24, r30
    51de:	08 95       	ret
    51e0:	46 2f       	mov	r20, r22
    51e2:	47 70       	andi	r20, 0x07	; 7
    51e4:	40 5d       	subi	r20, 0xD0	; 208
    51e6:	41 93       	st	Z+, r20
    51e8:	b3 e0       	ldi	r27, 0x03	; 3
    51ea:	0f d0       	rcall	.+30     	; 0x520a <__ultoa_invert+0x86>
    51ec:	c9 f7       	brne	.-14     	; 0x51e0 <__ultoa_invert+0x5c>
    51ee:	f6 cf       	rjmp	.-20     	; 0x51dc <__ultoa_invert+0x58>
    51f0:	46 2f       	mov	r20, r22
    51f2:	4f 70       	andi	r20, 0x0F	; 15
    51f4:	40 5d       	subi	r20, 0xD0	; 208
    51f6:	4a 33       	cpi	r20, 0x3A	; 58
    51f8:	18 f0       	brcs	.+6      	; 0x5200 <__ultoa_invert+0x7c>
    51fa:	49 5d       	subi	r20, 0xD9	; 217
    51fc:	31 fd       	sbrc	r19, 1
    51fe:	40 52       	subi	r20, 0x20	; 32
    5200:	41 93       	st	Z+, r20
    5202:	02 d0       	rcall	.+4      	; 0x5208 <__ultoa_invert+0x84>
    5204:	a9 f7       	brne	.-22     	; 0x51f0 <__ultoa_invert+0x6c>
    5206:	ea cf       	rjmp	.-44     	; 0x51dc <__ultoa_invert+0x58>
    5208:	b4 e0       	ldi	r27, 0x04	; 4
    520a:	a6 95       	lsr	r26
    520c:	97 95       	ror	r25
    520e:	87 95       	ror	r24
    5210:	77 95       	ror	r23
    5212:	67 95       	ror	r22
    5214:	ba 95       	dec	r27
    5216:	c9 f7       	brne	.-14     	; 0x520a <__ultoa_invert+0x86>
    5218:	00 97       	sbiw	r24, 0x00	; 0
    521a:	61 05       	cpc	r22, r1
    521c:	71 05       	cpc	r23, r1
    521e:	08 95       	ret
    5220:	9b 01       	movw	r18, r22
    5222:	ac 01       	movw	r20, r24
    5224:	0a 2e       	mov	r0, r26
    5226:	06 94       	lsr	r0
    5228:	57 95       	ror	r21
    522a:	47 95       	ror	r20
    522c:	37 95       	ror	r19
    522e:	27 95       	ror	r18
    5230:	ba 95       	dec	r27
    5232:	c9 f7       	brne	.-14     	; 0x5226 <__ultoa_invert+0xa2>
    5234:	62 0f       	add	r22, r18
    5236:	73 1f       	adc	r23, r19
    5238:	84 1f       	adc	r24, r20
    523a:	95 1f       	adc	r25, r21
    523c:	a0 1d       	adc	r26, r0
    523e:	08 95       	ret

00005240 <_exit>:
    5240:	f8 94       	cli

00005242 <__stop_program>:
    5242:	ff cf       	rjmp	.-2      	; 0x5242 <__stop_program>
