
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000966  00800200  00006fd0  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006fd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000101e  00800b66  00800b66  000079ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000079ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c40  00000000  00000000  00007a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e7bb  00000000  00000000  000086a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e08  00000000  00000000  00016e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007413  00000000  00000000  0001ac6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000029ac  00000000  00000000  00022080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004613  00000000  00000000  00024a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c926  00000000  00000000  0002903f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b30  00000000  00000000  00035965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c7       	rjmp	.+3762   	; 0xee4 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 82 28 	jmp	0x5104	; 0x5104 <__vector_25>
      68:	0c 94 d4 28 	jmp	0x51a8	; 0x51a8 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 18 29 	jmp	0x5230	; 0x5230 <__vector_36>
      94:	0c 94 6a 29 	jmp	0x52d4	; 0x52d4 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b5 2d 	jmp	0x5b6a	; 0x5b6a <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__vector_51>
      d0:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 44 2a 	jmp	0x5488	; 0x5488 <__vector_54>
      dc:	0c 94 96 2a 	jmp	0x552c	; 0x552c <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4c 1d       	adc	r20, r12
      e6:	4c 1d       	adc	r20, r12
      e8:	4c 1d       	adc	r20, r12
      ea:	83 1d       	adc	r24, r3
      ec:	8b 1d       	adc	r24, r11
      ee:	a0 1d       	adc	r26, r0
      f0:	4c 1d       	adc	r20, r12
      f2:	4c 1d       	adc	r20, r12
      f4:	83 1d       	adc	r24, r3
      f6:	8b 1d       	adc	r24, r11
      f8:	d7 2d       	mov	r29, r7
      fa:	47 2e       	mov	r4, r23
      fc:	47 2e       	mov	r4, r23
      fe:	47 2e       	mov	r4, r23
     100:	47 2e       	mov	r4, r23
     102:	47 2e       	mov	r4, r23
     104:	47 2e       	mov	r4, r23
     106:	47 2e       	mov	r4, r23
     108:	d7 2d       	mov	r29, r7
     10a:	47 2e       	mov	r4, r23
     10c:	47 2e       	mov	r4, r23
     10e:	47 2e       	mov	r4, r23
     110:	47 2e       	mov	r4, r23
     112:	47 2e       	mov	r4, r23
     114:	47 2e       	mov	r4, r23
     116:	47 2e       	mov	r4, r23
     118:	d9 2d       	mov	r29, r9
     11a:	47 2e       	mov	r4, r23
     11c:	47 2e       	mov	r4, r23
     11e:	47 2e       	mov	r4, r23
     120:	47 2e       	mov	r4, r23
     122:	47 2e       	mov	r4, r23
     124:	47 2e       	mov	r4, r23
     126:	47 2e       	mov	r4, r23
     128:	47 2e       	mov	r4, r23
     12a:	47 2e       	mov	r4, r23
     12c:	47 2e       	mov	r4, r23
     12e:	47 2e       	mov	r4, r23
     130:	47 2e       	mov	r4, r23
     132:	47 2e       	mov	r4, r23
     134:	47 2e       	mov	r4, r23
     136:	47 2e       	mov	r4, r23
     138:	d9 2d       	mov	r29, r9
     13a:	47 2e       	mov	r4, r23
     13c:	47 2e       	mov	r4, r23
     13e:	47 2e       	mov	r4, r23
     140:	47 2e       	mov	r4, r23
     142:	47 2e       	mov	r4, r23
     144:	47 2e       	mov	r4, r23
     146:	47 2e       	mov	r4, r23
     148:	47 2e       	mov	r4, r23
     14a:	47 2e       	mov	r4, r23
     14c:	47 2e       	mov	r4, r23
     14e:	47 2e       	mov	r4, r23
     150:	47 2e       	mov	r4, r23
     152:	47 2e       	mov	r4, r23
     154:	47 2e       	mov	r4, r23
     156:	47 2e       	mov	r4, r23
     158:	43 2e       	mov	r4, r19
     15a:	47 2e       	mov	r4, r23
     15c:	47 2e       	mov	r4, r23
     15e:	47 2e       	mov	r4, r23
     160:	47 2e       	mov	r4, r23
     162:	47 2e       	mov	r4, r23
     164:	47 2e       	mov	r4, r23
     166:	47 2e       	mov	r4, r23
     168:	0e 2e       	mov	r0, r30
     16a:	47 2e       	mov	r4, r23
     16c:	47 2e       	mov	r4, r23
     16e:	47 2e       	mov	r4, r23
     170:	47 2e       	mov	r4, r23
     172:	47 2e       	mov	r4, r23
     174:	47 2e       	mov	r4, r23
     176:	47 2e       	mov	r4, r23
     178:	47 2e       	mov	r4, r23
     17a:	47 2e       	mov	r4, r23
     17c:	47 2e       	mov	r4, r23
     17e:	47 2e       	mov	r4, r23
     180:	47 2e       	mov	r4, r23
     182:	47 2e       	mov	r4, r23
     184:	47 2e       	mov	r4, r23
     186:	47 2e       	mov	r4, r23
     188:	02 2e       	mov	r0, r18
     18a:	47 2e       	mov	r4, r23
     18c:	47 2e       	mov	r4, r23
     18e:	47 2e       	mov	r4, r23
     190:	47 2e       	mov	r4, r23
     192:	47 2e       	mov	r4, r23
     194:	47 2e       	mov	r4, r23
     196:	47 2e       	mov	r4, r23
     198:	26 2e       	mov	r2, r22

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <prvCheckTasksWaitingTermination>
     2a0:	80 91 8d 19 	lds	r24, 0x198D	; 0x80198d <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	57 d5       	rcall	.+2734   	; 0xd58 <vPortYield>
     2aa:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 c9 1a 	call	0x3592	; 0x3592 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 be 1c 	call	0x397c	; 0x397c <prvProcessTimerOrBlockTask>
     2c8:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	1b e0       	ldi	r17, 0x0B	; 11
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e0 ed       	ldi	r30, 0xD0	; 208
     2e6:	ff e6       	ldi	r31, 0x6F	; 111
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a6 36       	cpi	r26, 0x66	; 102
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	2b e1       	ldi	r18, 0x1B	; 27
     2fa:	a6 e6       	ldi	r26, 0x66	; 102
     2fc:	bb e0       	ldi	r27, 0x0B	; 11
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a4 38       	cpi	r26, 0x84	; 132
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 1c 21 	call	0x4238	; 0x4238 <main>
     30c:	0c 94 e6 37 	jmp	0x6fcc	; 0x6fcc <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <application_task>:
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

// Main task For application to get result when every measurement is done
void application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 de 10 	call	0x21bc	; 0x21bc <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 74 1b 	lds	r24, 0x1B74	; 0x801b74 <measureEventGroup>
     34e:	90 91 75 1b 	lds	r25, 0x1B75	; 0x801b75 <measureEventGroup+0x1>
     352:	4d d2       	rcall	.+1178   	; 0x7ee <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 72 1b 	lds	r24, 0x1B72	; 0x801b72 <dataReadyEventGroup>
     36c:	90 91 73 1b 	lds	r25, 0x1B73	; 0x801b73 <dataReadyEventGroup+0x1>
     370:	9e d1       	rcall	.+828    	; 0x6ae <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <application_task+0x20>
		{
			packageHandler_setTemperaturePercent(tempHumSensor_getTemp());
     386:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <tempHumSensor_getTemp>
     38a:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <packageHandler_setTemperaturePercent>
			packageHandler_setHumidityPercent(tempHumSensor_getHum());
     38e:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <tempHumSensor_getHum>
     392:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <packageHandler_setHumidityPercent>
			packageHandler_setCO2ppm(co2Sensor_getPPM());
     396:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <co2Sensor_getPPM>
     39a:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <packageHandler_setCO2ppm>
			lora_driver_payload_t payload = packageHandler_getLoraPackage(2);
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	ce 01       	movw	r24, r28
     3a2:	05 96       	adiw	r24, 0x05	; 5
     3a4:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <packageHandler_getLoraPackage>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3a8:	0f ef       	ldi	r16, 0xFF	; 255
     3aa:	1f ef       	ldi	r17, 0xFF	; 255
     3ac:	98 01       	movw	r18, r16
     3ae:	46 e1       	ldi	r20, 0x16	; 22
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	be 01       	movw	r22, r28
     3b4:	6b 5f       	subi	r22, 0xFB	; 251
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	80 91 76 1b 	lds	r24, 0x1B76	; 0x801b76 <uplinkMessageBufferHandle>
     3bc:	90 91 77 1b 	lds	r25, 0x1B77	; 0x801b77 <uplinkMessageBufferHandle+0x1>
     3c0:	0e 94 b0 0c 	call	0x1960	; 0x1960 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     3c4:	86 31       	cpi	r24, 0x16	; 22
     3c6:	29 f0       	breq	.+10     	; 0x3d2 <application_task+0xc0>
				printf("Timed out.\n");
     3c8:	8f e6       	ldi	r24, 0x6F	; 111
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	0e 94 29 37 	call	0x6e52	; 0x6e52 <puts>
     3d0:	b0 cf       	rjmp	.-160    	; 0x332 <application_task+0x20>
				// 			printf("Bytes sent: %d\n", xBytesSent);
				// 			printf("Temp sent: %d\n", tem);
				// 			printf("Humidity sent: %d\n", hum);
				// 			printf("Size of payload: %d\n", sizeof(payload));
				//			receivePayload();
				printf("Bytes put in buffer: %d\n", xBytesSent);
     3d2:	99 27       	eor	r25, r25
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	8a e7       	ldi	r24, 0x7A	; 122
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	a2 cf       	rjmp	.-188    	; 0x332 <application_task+0x20>

000003ee <application_craeteTask>:
void application_create(UBaseType_t priority)
{
	application_craeteTask(priority);
}

void application_craeteTask(UBaseType_t priority){
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
	xTaskCreate(
     3f4:	e1 2c       	mov	r14, r1
     3f6:	f1 2c       	mov	r15, r1
     3f8:	08 2f       	mov	r16, r24
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 ec       	ldi	r20, 0xC0	; 192
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	63 e9       	ldi	r22, 0x93	; 147
     404:	72 e0       	ldi	r23, 0x02	; 2
     406:	89 e8       	ldi	r24, 0x89	; 137
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xTaskCreate>
	,  "MainApplication"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	08 95       	ret

00000416 <application_create>:

void application_task(void *pvParameters);

void application_create(UBaseType_t priority)
{
	application_craeteTask(priority);
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	ea cf       	rjmp	.-44     	; 0x3ee <application_craeteTask>
     41a:	08 95       	ret

0000041c <configuration_getMaxTemperature>:
static uint16_t max_humidity = 0;
static uint16_t min_humidity = 0;

int16_t configuration_getMaxTemperature(){
	return max_temperature;
}
     41c:	80 91 68 0b 	lds	r24, 0x0B68	; 0x800b68 <max_temperature>
     420:	90 91 69 0b 	lds	r25, 0x0B69	; 0x800b69 <max_temperature+0x1>
     424:	08 95       	ret

00000426 <configuration_getMaxHumidity>:

uint16_t configuration_getMaxHumidity(){
	return max_humidity;
}
     426:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <__data_end>
     42a:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <__data_end+0x1>
     42e:	08 95       	ret

00000430 <configuration_setMaxTemperature>:

void configuration_setMaxTemperature(int16_t maxTemp){
	max_temperature = maxTemp;
     430:	90 93 69 0b 	sts	0x0B69, r25	; 0x800b69 <max_temperature+0x1>
     434:	80 93 68 0b 	sts	0x0B68, r24	; 0x800b68 <max_temperature>
     438:	08 95       	ret

0000043a <configuration_setMaxHumidity>:
}
void configuration_setMaxHumidity(uint16_t maxHum){
	max_humidity = maxHum;
     43a:	90 93 67 0b 	sts	0x0B67, r25	; 0x800b67 <__data_end+0x1>
     43e:	80 93 66 0b 	sts	0x0B66, r24	; 0x800b66 <__data_end>
     442:	08 95       	ret

00000444 <configuration_setConfiguration>:
}


void configuration_setConfiguration(lora_driver_payload_t payload){
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
	int16_t newMaxTemp = 0;
	uint16_t newMaxHum = 0;
	newMaxTemp = (payload.bytes[0] << 8 | payload.bytes[1]);
     454:	ec 84       	ldd	r14, Y+12	; 0x0c
     456:	f1 2c       	mov	r15, r1
     458:	fe 2c       	mov	r15, r14
     45a:	ee 24       	eor	r14, r14
     45c:	8d 85       	ldd	r24, Y+13	; 0x0d
     45e:	e8 2a       	or	r14, r24
	newMaxHum = (payload.bytes[2] << 8 | payload.bytes[3]);
     460:	0e 85       	ldd	r16, Y+14	; 0x0e
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	10 2f       	mov	r17, r16
     466:	00 27       	eor	r16, r16
     468:	8f 85       	ldd	r24, Y+15	; 0x0f
     46a:	08 2b       	or	r16, r24
	configuration_setMaxTemperature(newMaxTemp);
     46c:	c7 01       	movw	r24, r14
     46e:	e0 df       	rcall	.-64     	; 0x430 <configuration_setMaxTemperature>
	configuration_setMaxHumidity(newMaxHum);
     470:	80 2f       	mov	r24, r16
     472:	91 2f       	mov	r25, r17
     474:	e2 df       	rcall	.-60     	; 0x43a <configuration_setMaxHumidity>
	printf("--->New config, max temp: %d, max hum: %d<---\n", newMaxTemp, newMaxHum);
     476:	1f 93       	push	r17
     478:	0f 93       	push	r16
     47a:	ff 92       	push	r15
     47c:	ef 92       	push	r14
     47e:	83 ea       	ldi	r24, 0xA3	; 163
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	08 95       	ret

000004a4 <downlinkHandler_task>:
	uint8_t xReceivedBytes = 0;
	
	for(;;){
		
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle,
     4a4:	0f ef       	ldi	r16, 0xFF	; 255
     4a6:	1f ef       	ldi	r17, 0xFF	; 255
     4a8:	98 01       	movw	r18, r16
     4aa:	46 e1       	ldi	r20, 0x16	; 22
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	6a e6       	ldi	r22, 0x6A	; 106
     4b0:	7b e0       	ldi	r23, 0x0B	; 11
     4b2:	80 91 78 1b 	lds	r24, 0x1B78	; 0x801b78 <downlinkMessageBufferHandle>
     4b6:	90 91 79 1b 	lds	r25, 0x1B79	; 0x801b79 <downlinkMessageBufferHandle+0x1>
     4ba:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xStreamBufferReceive>
		&_downlink_payload,
		sizeof(lora_driver_payload_t),
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     4be:	88 23       	and	r24, r24
     4c0:	89 f3       	breq	.-30     	; 0x4a4 <downlinkHandler_task>
			printf("--->DOWN LINK: from port: %d with %d bytes received.<---", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     4c2:	ea e6       	ldi	r30, 0x6A	; 106
     4c4:	fb e0       	ldi	r31, 0x0B	; 11
     4c6:	91 81       	ldd	r25, Z+1	; 0x01
     4c8:	80 81       	ld	r24, Z
     4ca:	1f 92       	push	r1
     4cc:	9f 93       	push	r25
     4ce:	1f 92       	push	r1
     4d0:	8f 93       	push	r24
     4d2:	82 ed       	ldi	r24, 0xD2	; 210
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	9f 93       	push	r25
     4d8:	8f 93       	push	r24
     4da:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
			
			if(configSemaphore != NULL){
     4de:	80 91 70 1b 	lds	r24, 0x1B70	; 0x801b70 <configSemaphore>
     4e2:	90 91 71 1b 	lds	r25, 0x1B71	; 0x801b71 <configSemaphore+0x1>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	00 97       	sbiw	r24, 0x00	; 0
     4f4:	b9 f2       	breq	.-82     	; 0x4a4 <downlinkHandler_task>
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     4f6:	4a e0       	ldi	r20, 0x0A	; 10
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	be d7       	rcall	.+3964   	; 0x147c <xQueueSemaphoreTake>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	39 f5       	brne	.+78     	; 0x552 <downlinkHandler_task+0xae>
					configuration_setConfiguration(_downlink_payload);
     504:	8d b7       	in	r24, 0x3d	; 61
     506:	9e b7       	in	r25, 0x3e	; 62
     508:	46 97       	sbiw	r24, 0x16	; 22
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	9e bf       	out	0x3e, r25	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	8d bf       	out	0x3d, r24	; 61
     514:	ad b7       	in	r26, 0x3d	; 61
     516:	be b7       	in	r27, 0x3e	; 62
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	86 e1       	ldi	r24, 0x16	; 22
     51c:	ea e6       	ldi	r30, 0x6A	; 106
     51e:	fb e0       	ldi	r31, 0x0B	; 11
     520:	01 90       	ld	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	8a 95       	dec	r24
     526:	e1 f7       	brne	.-8      	; 0x520 <downlinkHandler_task+0x7c>
     528:	8d df       	rcall	.-230    	; 0x444 <configuration_setConfiguration>
					xSemaphoreGive(configSemaphore);
     52a:	00 e0       	ldi	r16, 0x00	; 0
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	a9 01       	movw	r20, r18
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	80 91 70 1b 	lds	r24, 0x1B70	; 0x801b70 <configSemaphore>
     53a:	90 91 71 1b 	lds	r25, 0x1B71	; 0x801b71 <configSemaphore+0x1>
     53e:	24 d6       	rcall	.+3144   	; 0x1188 <xQueueGenericSend>
     540:	8d b7       	in	r24, 0x3d	; 61
     542:	9e b7       	in	r25, 0x3e	; 62
     544:	46 96       	adiw	r24, 0x16	; 22
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	9e bf       	out	0x3e, r25	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	8d bf       	out	0x3d, r24	; 61
     550:	a9 cf       	rjmp	.-174    	; 0x4a4 <downlinkHandler_task>
				}
				else{
					printf("ERROR: DownlinkHandler Couldn't obtain semaphore.\n");
     552:	8b e0       	ldi	r24, 0x0B	; 11
     554:	93 e0       	ldi	r25, 0x03	; 3
     556:	0e 94 29 37 	call	0x6e52	; 0x6e52 <puts>
     55a:	a4 cf       	rjmp	.-184    	; 0x4a4 <downlinkHandler_task>

0000055c <downlinkHandler_createTask>:
	downlinkHandler_createTask(priority);
}

void downlinkHandler_createTask(UBaseType_t priority){
	xTaskCreate(
	downlinkHandler_task()
     55c:	a3 df       	rcall	.-186    	; 0x4a4 <downlinkHandler_task>

0000055e <downlinkHandler_create>:

static lora_driver_payload_t _downlink_payload;

void downlinkHandler_create(UBaseType_t priority)
{
	downlinkHandler_createTask(priority);
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	fd df       	rcall	.-6      	; 0x55c <downlinkHandler_createTask>

00000562 <servoController_craete>:

#include "servoController.h"
#include <rc_servo.h>

void servoController_craete(){
	rc_servo_initialise();
     562:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <rc_servo_initialise>
     566:	08 95       	ret

00000568 <servoController_setPosition>:
}

void servoController_setPosition(uint8_t servoNo, int8_t percent){
	rc_servo_setPosition(servoNo, percent);
     568:	0c 94 08 27 	jmp	0x4e10	; 0x4e10 <rc_servo_setPosition>
     56c:	08 95       	ret

0000056e <windowController_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void windowController_task(void *pvParameters) {
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	00 d0       	rcall	.+0      	; 0x574 <windowController_task+0x6>
     574:	1f 92       	push	r1
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
	int16_t thresholdTemperature = 0;
	uint16_t thresholdHumidity = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(120000);
	xLastWakeTime = xTaskGetTickCount();
     57a:	0e 94 de 10 	call	0x21bc	; 0x21bc <xTaskGetTickCount>
     57e:	69 83       	std	Y+1, r22	; 0x01
     580:	7a 83       	std	Y+2, r23	; 0x02
     582:	8b 83       	std	Y+3, r24	; 0x03
     584:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     586:	40 e1       	ldi	r20, 0x10	; 16
     588:	5d e1       	ldi	r21, 0x1D	; 29
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	ce 01       	movw	r24, r28
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <xTaskDelayUntil>
		thresholdTemperature = configuration_getMaxTemperature();
     596:	42 df       	rcall	.-380    	; 0x41c <configuration_getMaxTemperature>
     598:	7c 01       	movw	r14, r24
		thresholdHumidity = configuration_getMaxHumidity();
     59a:	45 df       	rcall	.-374    	; 0x426 <configuration_getMaxHumidity>
     59c:	d8 2e       	mov	r13, r24
     59e:	c9 2e       	mov	r12, r25
     5a0:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <tempHumSensor_measure>
		
		tempHumSensor_measure();
     5a4:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <tempHumSensor_getTemp>
		currentTemperature = tempHumSensor_getTemp();
     5a8:	6a e0       	ldi	r22, 0x0A	; 10
		currentHumidity = tempHumSensor_getHum;
		
		printf("--->Fan Controller checked temp: %d threshold: %d<---\n", currentTemperature/10, thresholdTemperature);
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	0e 94 07 34 	call	0x680e	; 0x680e <__divmodhi4>
     5b0:	8b 01       	movw	r16, r22
     5b2:	ff 92       	push	r15
     5b4:	ef 92       	push	r14
     5b6:	1f 93       	push	r17
     5b8:	6f 93       	push	r22
     5ba:	8d e3       	ldi	r24, 0x3D	; 61
     5bc:	93 e0       	ldi	r25, 0x03	; 3
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
     5c6:	cf 92       	push	r12
		printf("--->Fan Controller checked hum: %d threshold: %d<---\n", currentHumidity/10, thresholdHumidity);
     5c8:	df 92       	push	r13
     5ca:	29 e9       	ldi	r18, 0x99	; 153
     5cc:	3e e1       	ldi	r19, 0x1E	; 30
     5ce:	ad ec       	ldi	r26, 0xCD	; 205
     5d0:	bc ec       	ldi	r27, 0xCC	; 204
     5d2:	0e 94 44 34 	call	0x6888	; 0x6888 <__umulhisi3>
     5d6:	96 95       	lsr	r25
     5d8:	87 95       	ror	r24
     5da:	96 95       	lsr	r25
     5dc:	87 95       	ror	r24
     5de:	96 95       	lsr	r25
     5e0:	87 95       	ror	r24
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	84 e7       	ldi	r24, 0x74	; 116
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
     5f2:	0f b6       	in	r0, 0x3f	; 63
	if(currentTemperature/10 > thresholdTemperature){
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	e0 16       	cp	r14, r16
     5fe:	f1 06       	cpc	r15, r17
     600:	24 f4       	brge	.+8      	; 0x60a <windowController_task+0x9c>
     602:	64 e6       	ldi	r22, 0x64	; 100
		// 			PORTA = 0x00;
		servoController_setPosition(0, 100);
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	b0 df       	rcall	.-160    	; 0x568 <servoController_setPosition>
     608:	be cf       	rjmp	.-132    	; 0x586 <windowController_task+0x18>
     60a:	6c e9       	ldi	r22, 0x9C	; 156
	}
	else{
		// 			PORTA = 0xFF;
		servoController_setPosition(0, -100);
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	ac df       	rcall	.-168    	; 0x568 <servoController_setPosition>
     610:	ba cf       	rjmp	.-140    	; 0x586 <windowController_task+0x18>

00000612 <windowController_createTask>:
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
	windowController_createTask(priority);
	DDRA = 0xFF;
	PORTA = 0xFF;
}

void windowController_createTask(UBaseType_t priority){
     616:	0f 93       	push	r16
	xTaskCreate(
     618:	e1 2c       	mov	r14, r1
     61a:	f1 2c       	mov	r15, r1
     61c:	08 2f       	mov	r16, r24
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	40 ec       	ldi	r20, 0xC0	; 192
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	6a ea       	ldi	r22, 0xAA	; 170
     628:	73 e0       	ldi	r23, 0x03	; 3
     62a:	87 eb       	ldi	r24, 0xB7	; 183
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xTaskCreate>
	,  "windowController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	08 95       	ret

0000063a <windowController_create>:

void windowController_task(void *pvParameters);

void windowController_create(UBaseType_t priority)
{
	windowController_createTask(priority);
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	ea df       	rcall	.-44     	; 0x612 <windowController_createTask>
	DDRA = 0xFF;
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFF;
     642:	82 b9       	out	0x02, r24	; 2
     644:	08 95       	ret

00000646 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     646:	0f 93       	push	r16
     648:	01 11       	cpse	r16, r1
     64a:	0c c0       	rjmp	.+24     	; 0x664 <prvTestWaitCondition+0x1e>
     64c:	dc 01       	movw	r26, r24
     64e:	cb 01       	movw	r24, r22
     650:	82 23       	and	r24, r18
     652:	93 23       	and	r25, r19
     654:	a4 23       	and	r26, r20
     656:	b5 23       	and	r27, r21
     658:	89 2b       	or	r24, r25
     65a:	8a 2b       	or	r24, r26
     65c:	8b 2b       	or	r24, r27
     65e:	79 f4       	brne	.+30     	; 0x67e <prvTestWaitCondition+0x38>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	10 c0       	rjmp	.+32     	; 0x684 <prvTestWaitCondition+0x3e>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	82 23       	and	r24, r18
     66a:	93 23       	and	r25, r19
     66c:	a4 23       	and	r26, r20
     66e:	b5 23       	and	r27, r21
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	4a 07       	cpc	r20, r26
     676:	5b 07       	cpc	r21, r27
     678:	21 f0       	breq	.+8      	; 0x682 <prvTestWaitCondition+0x3c>
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	03 c0       	rjmp	.+6      	; 0x684 <prvTestWaitCondition+0x3e>
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	01 c0       	rjmp	.+2      	; 0x684 <prvTestWaitCondition+0x3e>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0f 91       	pop	r16
     686:	08 95       	ret

00000688 <xEventGroupCreate>:
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	8f e0       	ldi	r24, 0x0F	; 15
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	af d1       	rcall	.+862    	; 0x9f0 <pvPortMalloc>
     692:	ec 01       	movw	r28, r24
     694:	00 97       	sbiw	r24, 0x00	; 0
     696:	39 f0       	breq	.+14     	; 0x6a6 <xEventGroupCreate+0x1e>
     698:	fc 01       	movw	r30, r24
     69a:	11 92       	st	Z+, r1
     69c:	11 92       	st	Z+, r1
     69e:	11 92       	st	Z+, r1
     6a0:	11 92       	st	Z+, r1
     6a2:	cf 01       	movw	r24, r30
     6a4:	8b d2       	rcall	.+1302   	; 0xbbc <vListInitialise>
     6a6:	ce 01       	movw	r24, r28
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <xEventGroupWaitBits>:
     6ae:	2f 92       	push	r2
     6b0:	3f 92       	push	r3
     6b2:	4f 92       	push	r4
     6b4:	5f 92       	push	r5
     6b6:	6f 92       	push	r6
     6b8:	7f 92       	push	r7
     6ba:	8f 92       	push	r8
     6bc:	9f 92       	push	r9
     6be:	af 92       	push	r10
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	ec 01       	movw	r28, r24
     6d4:	4a 01       	movw	r8, r20
     6d6:	5b 01       	movw	r10, r22
     6d8:	62 2e       	mov	r6, r18
     6da:	70 2e       	mov	r7, r16
     6dc:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <vTaskSuspendAll>
     6e0:	28 80       	ld	r2, Y
     6e2:	39 80       	ldd	r3, Y+1	; 0x01
     6e4:	4a 80       	ldd	r4, Y+2	; 0x02
     6e6:	5b 80       	ldd	r5, Y+3	; 0x03
     6e8:	a5 01       	movw	r20, r10
     6ea:	94 01       	movw	r18, r8
     6ec:	c2 01       	movw	r24, r4
     6ee:	b1 01       	movw	r22, r2
     6f0:	aa df       	rcall	.-172    	; 0x646 <prvTestWaitCondition>
     6f2:	88 23       	and	r24, r24
     6f4:	a1 f0       	breq	.+40     	; 0x71e <xEventGroupWaitBits+0x70>
     6f6:	66 20       	and	r6, r6
     6f8:	89 f1       	breq	.+98     	; 0x75c <xEventGroupWaitBits+0xae>
     6fa:	d5 01       	movw	r26, r10
     6fc:	c4 01       	movw	r24, r8
     6fe:	80 95       	com	r24
     700:	90 95       	com	r25
     702:	a0 95       	com	r26
     704:	b0 95       	com	r27
     706:	82 21       	and	r24, r2
     708:	93 21       	and	r25, r3
     70a:	a4 21       	and	r26, r4
     70c:	b5 21       	and	r27, r5
     70e:	88 83       	st	Y, r24
     710:	99 83       	std	Y+1, r25	; 0x01
     712:	aa 83       	std	Y+2, r26	; 0x02
     714:	bb 83       	std	Y+3, r27	; 0x03
     716:	c1 2c       	mov	r12, r1
     718:	d1 2c       	mov	r13, r1
     71a:	76 01       	movw	r14, r12
     71c:	22 c0       	rjmp	.+68     	; 0x762 <xEventGroupWaitBits+0xb4>
     71e:	c1 14       	cp	r12, r1
     720:	d1 04       	cpc	r13, r1
     722:	e1 04       	cpc	r14, r1
     724:	f1 04       	cpc	r15, r1
     726:	e9 f0       	breq	.+58     	; 0x762 <xEventGroupWaitBits+0xb4>
     728:	61 10       	cpse	r6, r1
     72a:	04 c0       	rjmp	.+8      	; 0x734 <xEventGroupWaitBits+0x86>
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	ba 01       	movw	r22, r20
     732:	04 c0       	rjmp	.+8      	; 0x73c <xEventGroupWaitBits+0x8e>
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	71 10       	cpse	r7, r1
     73e:	74 60       	ori	r23, 0x04	; 4
     740:	48 29       	or	r20, r8
     742:	59 29       	or	r21, r9
     744:	6a 29       	or	r22, r10
     746:	7b 29       	or	r23, r11
     748:	97 01       	movw	r18, r14
     74a:	86 01       	movw	r16, r12
     74c:	ce 01       	movw	r24, r28
     74e:	04 96       	adiw	r24, 0x04	; 4
     750:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <vTaskPlaceOnUnorderedEventList>
     754:	21 2c       	mov	r2, r1
     756:	31 2c       	mov	r3, r1
     758:	21 01       	movw	r4, r2
     75a:	03 c0       	rjmp	.+6      	; 0x762 <xEventGroupWaitBits+0xb4>
     75c:	c1 2c       	mov	r12, r1
     75e:	d1 2c       	mov	r13, r1
     760:	76 01       	movw	r14, r12
     762:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>
     766:	cd 28       	or	r12, r13
     768:	ce 28       	or	r12, r14
     76a:	cf 28       	or	r12, r15
     76c:	59 f1       	breq	.+86     	; 0x7c4 <xEventGroupWaitBits+0x116>
     76e:	81 11       	cpse	r24, r1
     770:	01 c0       	rjmp	.+2      	; 0x774 <xEventGroupWaitBits+0xc6>
     772:	f2 d2       	rcall	.+1508   	; 0xd58 <vPortYield>
     774:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <uxTaskResetEventItemValue>
     778:	6b 01       	movw	r12, r22
     77a:	7c 01       	movw	r14, r24
     77c:	91 fd       	sbrc	r25, 1
     77e:	1f c0       	rjmp	.+62     	; 0x7be <xEventGroupWaitBits+0x110>
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	0f 92       	push	r0
     786:	c8 80       	ld	r12, Y
     788:	d9 80       	ldd	r13, Y+1	; 0x01
     78a:	ea 80       	ldd	r14, Y+2	; 0x02
     78c:	fb 80       	ldd	r15, Y+3	; 0x03
     78e:	07 2d       	mov	r16, r7
     790:	a5 01       	movw	r20, r10
     792:	94 01       	movw	r18, r8
     794:	c7 01       	movw	r24, r14
     796:	b6 01       	movw	r22, r12
     798:	56 df       	rcall	.-340    	; 0x646 <prvTestWaitCondition>
     79a:	88 23       	and	r24, r24
     79c:	71 f0       	breq	.+28     	; 0x7ba <xEventGroupWaitBits+0x10c>
     79e:	66 20       	and	r6, r6
     7a0:	61 f0       	breq	.+24     	; 0x7ba <xEventGroupWaitBits+0x10c>
     7a2:	80 94       	com	r8
     7a4:	90 94       	com	r9
     7a6:	a0 94       	com	r10
     7a8:	b0 94       	com	r11
     7aa:	8c 20       	and	r8, r12
     7ac:	9d 20       	and	r9, r13
     7ae:	ae 20       	and	r10, r14
     7b0:	bf 20       	and	r11, r15
     7b2:	88 82       	st	Y, r8
     7b4:	99 82       	std	Y+1, r9	; 0x01
     7b6:	aa 82       	std	Y+2, r10	; 0x02
     7b8:	bb 82       	std	Y+3, r11	; 0x03
     7ba:	0f 90       	pop	r0
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	16 01       	movw	r2, r12
     7c0:	27 01       	movw	r4, r14
     7c2:	55 24       	eor	r5, r5
     7c4:	c2 01       	movw	r24, r4
     7c6:	b1 01       	movw	r22, r2
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	af 90       	pop	r10
     7dc:	9f 90       	pop	r9
     7de:	8f 90       	pop	r8
     7e0:	7f 90       	pop	r7
     7e2:	6f 90       	pop	r6
     7e4:	5f 90       	pop	r5
     7e6:	4f 90       	pop	r4
     7e8:	3f 90       	pop	r3
     7ea:	2f 90       	pop	r2
     7ec:	08 95       	ret

000007ee <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     7ee:	4f 92       	push	r4
     7f0:	5f 92       	push	r5
     7f2:	6f 92       	push	r6
     7f4:	7f 92       	push	r7
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	ec 01       	movw	r28, r24
     80c:	6a 01       	movw	r12, r20
     80e:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     810:	8c 01       	movw	r16, r24
     812:	09 5f       	subi	r16, 0xF9	; 249
     814:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     816:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     81a:	eb 85       	ldd	r30, Y+11	; 0x0b
     81c:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     81e:	88 81       	ld	r24, Y
     820:	99 81       	ldd	r25, Y+1	; 0x01
     822:	aa 81       	ldd	r26, Y+2	; 0x02
     824:	bb 81       	ldd	r27, Y+3	; 0x03
     826:	c8 2a       	or	r12, r24
     828:	d9 2a       	or	r13, r25
     82a:	ea 2a       	or	r14, r26
     82c:	fb 2a       	or	r15, r27
     82e:	c8 82       	st	Y, r12
     830:	d9 82       	std	Y+1, r13	; 0x01
     832:	ea 82       	std	Y+2, r14	; 0x02
     834:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     836:	c1 2c       	mov	r12, r1
     838:	d1 2c       	mov	r13, r1
     83a:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     83c:	3d c0       	rjmp	.+122    	; 0x8b8 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     83e:	a4 80       	ldd	r10, Z+4	; 0x04
     840:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     842:	80 81       	ld	r24, Z
     844:	91 81       	ldd	r25, Z+1	; 0x01
     846:	a2 81       	ldd	r26, Z+2	; 0x02
     848:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     84a:	ac 01       	movw	r20, r24
     84c:	bd 01       	movw	r22, r26
     84e:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     850:	b2 fd       	sbrc	r27, 2
     852:	0e c0       	rjmp	.+28     	; 0x870 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     854:	48 80       	ld	r4, Y
     856:	59 80       	ldd	r5, Y+1	; 0x01
     858:	6a 80       	ldd	r6, Y+2	; 0x02
     85a:	7b 80       	ldd	r7, Y+3	; 0x03
     85c:	44 22       	and	r4, r20
     85e:	55 22       	and	r5, r21
     860:	66 22       	and	r6, r22
     862:	77 22       	and	r7, r23
     864:	45 28       	or	r4, r5
     866:	46 28       	or	r4, r6
     868:	47 28       	or	r4, r7
     86a:	89 f4       	brne	.+34     	; 0x88e <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	12 c0       	rjmp	.+36     	; 0x894 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     870:	48 80       	ld	r4, Y
     872:	59 80       	ldd	r5, Y+1	; 0x01
     874:	6a 80       	ldd	r6, Y+2	; 0x02
     876:	7b 80       	ldd	r7, Y+3	; 0x03
     878:	44 22       	and	r4, r20
     87a:	55 22       	and	r5, r21
     87c:	66 22       	and	r6, r22
     87e:	77 22       	and	r7, r23
     880:	44 15       	cp	r20, r4
     882:	55 05       	cpc	r21, r5
     884:	66 05       	cpc	r22, r6
     886:	77 05       	cpc	r23, r7
     888:	21 f0       	breq	.+8      	; 0x892 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	03 c0       	rjmp	.+6      	; 0x894 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     88e:	21 e0       	ldi	r18, 0x01	; 1
     890:	01 c0       	rjmp	.+2      	; 0x894 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     892:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     894:	22 23       	and	r18, r18
     896:	71 f0       	breq	.+28     	; 0x8b4 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     898:	b0 ff       	sbrs	r27, 0
     89a:	04 c0       	rjmp	.+8      	; 0x8a4 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     89c:	c4 2a       	or	r12, r20
     89e:	d5 2a       	or	r13, r21
     8a0:	e6 2a       	or	r14, r22
     8a2:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     8a4:	48 81       	ld	r20, Y
     8a6:	59 81       	ldd	r21, Y+1	; 0x01
     8a8:	6a 81       	ldd	r22, Y+2	; 0x02
     8aa:	7b 81       	ldd	r23, Y+3	; 0x03
     8ac:	72 60       	ori	r23, 0x02	; 2
     8ae:	cf 01       	movw	r24, r30
     8b0:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     8b4:	ea 2d       	mov	r30, r10
     8b6:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     8b8:	e0 17       	cp	r30, r16
     8ba:	f1 07       	cpc	r31, r17
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <xEventGroupSetBits+0xd2>
     8be:	bf cf       	rjmp	.-130    	; 0x83e <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     8c0:	c0 94       	com	r12
     8c2:	d0 94       	com	r13
     8c4:	e0 94       	com	r14
     8c6:	f0 94       	com	r15
     8c8:	88 81       	ld	r24, Y
     8ca:	99 81       	ldd	r25, Y+1	; 0x01
     8cc:	aa 81       	ldd	r26, Y+2	; 0x02
     8ce:	bb 81       	ldd	r27, Y+3	; 0x03
     8d0:	c8 22       	and	r12, r24
     8d2:	d9 22       	and	r13, r25
     8d4:	ea 22       	and	r14, r26
     8d6:	fb 22       	and	r15, r27
     8d8:	c8 82       	st	Y, r12
     8da:	d9 82       	std	Y+1, r13	; 0x01
     8dc:	ea 82       	std	Y+2, r14	; 0x02
     8de:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     8e0:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     8e4:	68 81       	ld	r22, Y
     8e6:	79 81       	ldd	r23, Y+1	; 0x01
     8e8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ea:	9b 81       	ldd	r25, Y+3	; 0x03
}
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	df 90       	pop	r13
     8fa:	cf 90       	pop	r12
     8fc:	bf 90       	pop	r11
     8fe:	af 90       	pop	r10
     900:	7f 90       	pop	r7
     902:	6f 90       	pop	r6
     904:	5f 90       	pop	r5
     906:	4f 90       	pop	r4
     908:	08 95       	ret

0000090a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     90a:	ec e8       	ldi	r30, 0x8C	; 140
     90c:	fb e0       	ldi	r31, 0x0B	; 11
     90e:	a0 e9       	ldi	r26, 0x90	; 144
     910:	bb e0       	ldi	r27, 0x0B	; 11
     912:	b1 83       	std	Z+1, r27	; 0x01
     914:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     916:	13 82       	std	Z+3, r1	; 0x03
     918:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     91a:	e8 e3       	ldi	r30, 0x38	; 56
     91c:	f9 e1       	ldi	r31, 0x19	; 25
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     91e:	f0 93 8b 0b 	sts	0x0B8B, r31	; 0x800b8b <pxEnd+0x1>
     922:	e0 93 8a 0b 	sts	0x0B8A, r30	; 0x800b8a <pxEnd>
    pxEnd->xBlockSize = 0;
     926:	13 82       	std	Z+3, r1	; 0x03
     928:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     92a:	11 82       	std	Z+1, r1	; 0x01
     92c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     92e:	88 ea       	ldi	r24, 0xA8	; 168
     930:	9d e0       	ldi	r25, 0x0D	; 13
     932:	13 96       	adiw	r26, 0x03	; 3
     934:	9c 93       	st	X, r25
     936:	8e 93       	st	-X, r24
     938:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     93a:	ed 93       	st	X+, r30
     93c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     93e:	90 93 87 0b 	sts	0x0B87, r25	; 0x800b87 <xMinimumEverFreeBytesRemaining+0x1>
     942:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     946:	90 93 89 0b 	sts	0x0B89, r25	; 0x800b89 <xFreeBytesRemaining+0x1>
     94a:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e8       	ldi	r25, 0x80	; 128
     952:	90 93 81 0b 	sts	0x0B81, r25	; 0x800b81 <xBlockAllocatedBit+0x1>
     956:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <xBlockAllocatedBit>
     95a:	08 95       	ret

0000095c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     962:	ac e8       	ldi	r26, 0x8C	; 140
     964:	bb e0       	ldi	r27, 0x0B	; 11
     966:	01 c0       	rjmp	.+2      	; 0x96a <prvInsertBlockIntoFreeList+0xe>
     968:	df 01       	movw	r26, r30
     96a:	ed 91       	ld	r30, X+
     96c:	fc 91       	ld	r31, X
     96e:	11 97       	sbiw	r26, 0x01	; 1
     970:	ec 17       	cp	r30, r28
     972:	fd 07       	cpc	r31, r29
     974:	c8 f3       	brcs	.-14     	; 0x968 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     976:	12 96       	adiw	r26, 0x02	; 2
     978:	8d 91       	ld	r24, X+
     97a:	9c 91       	ld	r25, X
     97c:	13 97       	sbiw	r26, 0x03	; 3
     97e:	9d 01       	movw	r18, r26
     980:	28 0f       	add	r18, r24
     982:	39 1f       	adc	r19, r25
     984:	c2 17       	cp	r28, r18
     986:	d3 07       	cpc	r29, r19
     988:	49 f4       	brne	.+18     	; 0x99c <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     98a:	2a 81       	ldd	r18, Y+2	; 0x02
     98c:	3b 81       	ldd	r19, Y+3	; 0x03
     98e:	82 0f       	add	r24, r18
     990:	93 1f       	adc	r25, r19
     992:	13 96       	adiw	r26, 0x03	; 3
     994:	9c 93       	st	X, r25
     996:	8e 93       	st	-X, r24
     998:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     99a:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	9b 81       	ldd	r25, Y+3	; 0x03
     9a0:	9e 01       	movw	r18, r28
     9a2:	28 0f       	add	r18, r24
     9a4:	39 1f       	adc	r19, r25
     9a6:	e2 17       	cp	r30, r18
     9a8:	f3 07       	cpc	r31, r19
     9aa:	c1 f4       	brne	.+48     	; 0x9dc <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     9ac:	20 91 8a 0b 	lds	r18, 0x0B8A	; 0x800b8a <pxEnd>
     9b0:	30 91 8b 0b 	lds	r19, 0x0B8B	; 0x800b8b <pxEnd+0x1>
     9b4:	e2 17       	cp	r30, r18
     9b6:	f3 07       	cpc	r31, r19
     9b8:	71 f0       	breq	.+28     	; 0x9d6 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     9ba:	22 81       	ldd	r18, Z+2	; 0x02
     9bc:	33 81       	ldd	r19, Z+3	; 0x03
     9be:	82 0f       	add	r24, r18
     9c0:	93 1f       	adc	r25, r19
     9c2:	9b 83       	std	Y+3, r25	; 0x03
     9c4:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     9c6:	ed 91       	ld	r30, X+
     9c8:	fc 91       	ld	r31, X
     9ca:	11 97       	sbiw	r26, 0x01	; 1
     9cc:	80 81       	ld	r24, Z
     9ce:	91 81       	ldd	r25, Z+1	; 0x01
     9d0:	99 83       	std	Y+1, r25	; 0x01
     9d2:	88 83       	st	Y, r24
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     9d6:	39 83       	std	Y+1, r19	; 0x01
     9d8:	28 83       	st	Y, r18
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     9dc:	f9 83       	std	Y+1, r31	; 0x01
     9de:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     9e0:	ca 17       	cp	r28, r26
     9e2:	db 07       	cpc	r29, r27
     9e4:	11 f0       	breq	.+4      	; 0x9ea <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     9e6:	cd 93       	st	X+, r28
     9e8:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     9fe:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     a02:	80 91 8a 0b 	lds	r24, 0x0B8A	; 0x800b8a <pxEnd>
     a06:	90 91 8b 0b 	lds	r25, 0x0B8B	; 0x800b8b <pxEnd+0x1>
     a0a:	89 2b       	or	r24, r25
     a0c:	09 f4       	brne	.+2      	; 0xa10 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     a0e:	7d df       	rcall	.-262    	; 0x90a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     a10:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <xBlockAllocatedBit>
     a14:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <xBlockAllocatedBit+0x1>
     a18:	80 23       	and	r24, r16
     a1a:	91 23       	and	r25, r17
     a1c:	89 2b       	or	r24, r25
     a1e:	09 f0       	breq	.+2      	; 0xa22 <pvPortMalloc+0x32>
     a20:	76 c0       	rjmp	.+236    	; 0xb0e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a22:	01 15       	cp	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	49 f0       	breq	.+18     	; 0xa3a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a28:	c8 01       	movw	r24, r16
     a2a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a2c:	08 17       	cp	r16, r24
     a2e:	19 07       	cpc	r17, r25
     a30:	18 f0       	brcs	.+6      	; 0xa38 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     a32:	00 e0       	ldi	r16, 0x00	; 0
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     a38:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a3a:	01 15       	cp	r16, r1
     a3c:	11 05       	cpc	r17, r1
     a3e:	09 f4       	brne	.+2      	; 0xa42 <pvPortMalloc+0x52>
     a40:	69 c0       	rjmp	.+210    	; 0xb14 <pvPortMalloc+0x124>
     a42:	80 91 88 0b 	lds	r24, 0x0B88	; 0x800b88 <xFreeBytesRemaining>
     a46:	90 91 89 0b 	lds	r25, 0x0B89	; 0x800b89 <xFreeBytesRemaining+0x1>
     a4a:	80 17       	cp	r24, r16
     a4c:	91 07       	cpc	r25, r17
     a4e:	08 f4       	brcc	.+2      	; 0xa52 <pvPortMalloc+0x62>
     a50:	64 c0       	rjmp	.+200    	; 0xb1a <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a52:	c0 91 8c 0b 	lds	r28, 0x0B8C	; 0x800b8c <xStart>
     a56:	d0 91 8d 0b 	lds	r29, 0x0B8D	; 0x800b8d <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a5a:	ec e8       	ldi	r30, 0x8C	; 140
     a5c:	fb e0       	ldi	r31, 0x0B	; 11
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a60:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a62:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	9b 81       	ldd	r25, Y+3	; 0x03
     a68:	80 17       	cp	r24, r16
     a6a:	91 07       	cpc	r25, r17
     a6c:	20 f4       	brcc	.+8      	; 0xa76 <pvPortMalloc+0x86>
     a6e:	88 81       	ld	r24, Y
     a70:	99 81       	ldd	r25, Y+1	; 0x01
     a72:	00 97       	sbiw	r24, 0x00	; 0
     a74:	a9 f7       	brne	.-22     	; 0xa60 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     a76:	80 91 8a 0b 	lds	r24, 0x0B8A	; 0x800b8a <pxEnd>
     a7a:	90 91 8b 0b 	lds	r25, 0x0B8B	; 0x800b8b <pxEnd+0x1>
     a7e:	c8 17       	cp	r28, r24
     a80:	d9 07       	cpc	r29, r25
     a82:	09 f4       	brne	.+2      	; 0xa86 <pvPortMalloc+0x96>
     a84:	4d c0       	rjmp	.+154    	; 0xb20 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a86:	e0 80       	ld	r14, Z
     a88:	f1 80       	ldd	r15, Z+1	; 0x01
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	e8 0e       	add	r14, r24
     a8e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a90:	88 81       	ld	r24, Y
     a92:	99 81       	ldd	r25, Y+1	; 0x01
     a94:	91 83       	std	Z+1, r25	; 0x01
     a96:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a98:	2a 81       	ldd	r18, Y+2	; 0x02
     a9a:	3b 81       	ldd	r19, Y+3	; 0x03
     a9c:	20 1b       	sub	r18, r16
     a9e:	31 0b       	sbc	r19, r17
     aa0:	29 30       	cpi	r18, 0x09	; 9
     aa2:	31 05       	cpc	r19, r1
     aa4:	48 f0       	brcs	.+18     	; 0xab8 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     aa6:	ce 01       	movw	r24, r28
     aa8:	80 0f       	add	r24, r16
     aaa:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     aac:	fc 01       	movw	r30, r24
     aae:	33 83       	std	Z+3, r19	; 0x03
     ab0:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     ab2:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     ab4:	0a 83       	std	Y+2, r16	; 0x02
     ab6:	52 df       	rcall	.-348    	; 0x95c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     ab8:	2a 81       	ldd	r18, Y+2	; 0x02
     aba:	3b 81       	ldd	r19, Y+3	; 0x03
     abc:	80 91 88 0b 	lds	r24, 0x0B88	; 0x800b88 <xFreeBytesRemaining>
     ac0:	90 91 89 0b 	lds	r25, 0x0B89	; 0x800b89 <xFreeBytesRemaining+0x1>
     ac4:	82 1b       	sub	r24, r18
     ac6:	93 0b       	sbc	r25, r19
     ac8:	90 93 89 0b 	sts	0x0B89, r25	; 0x800b89 <xFreeBytesRemaining+0x1>
     acc:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     ad0:	40 91 86 0b 	lds	r20, 0x0B86	; 0x800b86 <xMinimumEverFreeBytesRemaining>
     ad4:	50 91 87 0b 	lds	r21, 0x0B87	; 0x800b87 <xMinimumEverFreeBytesRemaining+0x1>
     ad8:	84 17       	cp	r24, r20
     ada:	95 07       	cpc	r25, r21
     adc:	20 f4       	brcc	.+8      	; 0xae6 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     ade:	90 93 87 0b 	sts	0x0B87, r25	; 0x800b87 <xMinimumEverFreeBytesRemaining+0x1>
     ae2:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     ae6:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <xBlockAllocatedBit>
     aea:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <xBlockAllocatedBit+0x1>
     aee:	28 2b       	or	r18, r24
     af0:	39 2b       	or	r19, r25
     af2:	3b 83       	std	Y+3, r19	; 0x03
     af4:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     af6:	19 82       	std	Y+1, r1	; 0x01
     af8:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     afa:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <xNumberOfSuccessfulAllocations>
     afe:	90 91 85 0b 	lds	r25, 0x0B85	; 0x800b85 <xNumberOfSuccessfulAllocations+0x1>
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	90 93 85 0b 	sts	0x0B85, r25	; 0x800b85 <xNumberOfSuccessfulAllocations+0x1>
     b08:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <xNumberOfSuccessfulAllocations>
     b0c:	0b c0       	rjmp	.+22     	; 0xb24 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     b0e:	e1 2c       	mov	r14, r1
     b10:	f1 2c       	mov	r15, r1
     b12:	08 c0       	rjmp	.+16     	; 0xb24 <pvPortMalloc+0x134>
     b14:	e1 2c       	mov	r14, r1
     b16:	f1 2c       	mov	r15, r1
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <pvPortMalloc+0x134>
     b1a:	e1 2c       	mov	r14, r1
     b1c:	f1 2c       	mov	r15, r1
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <pvPortMalloc+0x134>
     b20:	e1 2c       	mov	r14, r1
     b22:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b24:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b28:	e1 14       	cp	r14, r1
     b2a:	f1 04       	cpc	r15, r1
     b2c:	11 f4       	brne	.+4      	; 0xb32 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     b2e:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     b32:	c7 01       	movw	r24, r14
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	91 f1       	breq	.+100    	; 0xbb2 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b4e:	ec 01       	movw	r28, r24
     b50:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b52:	4a 81       	ldd	r20, Y+2	; 0x02
     b54:	5b 81       	ldd	r21, Y+3	; 0x03
     b56:	20 91 80 0b 	lds	r18, 0x0B80	; 0x800b80 <xBlockAllocatedBit>
     b5a:	30 91 81 0b 	lds	r19, 0x0B81	; 0x800b81 <xBlockAllocatedBit+0x1>
     b5e:	ba 01       	movw	r22, r20
     b60:	62 23       	and	r22, r18
     b62:	73 23       	and	r23, r19
     b64:	67 2b       	or	r22, r23
     b66:	29 f1       	breq	.+74     	; 0xbb2 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b68:	68 81       	ld	r22, Y
     b6a:	79 81       	ldd	r23, Y+1	; 0x01
     b6c:	67 2b       	or	r22, r23
     b6e:	09 f5       	brne	.+66     	; 0xbb2 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b70:	20 95       	com	r18
     b72:	30 95       	com	r19
     b74:	24 23       	and	r18, r20
     b76:	35 23       	and	r19, r21
     b78:	3b 83       	std	Y+3, r19	; 0x03
     b7a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     b7c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	9b 81       	ldd	r25, Y+3	; 0x03
     b84:	20 91 88 0b 	lds	r18, 0x0B88	; 0x800b88 <xFreeBytesRemaining>
     b88:	30 91 89 0b 	lds	r19, 0x0B89	; 0x800b89 <xFreeBytesRemaining+0x1>
     b8c:	82 0f       	add	r24, r18
     b8e:	93 1f       	adc	r25, r19
     b90:	90 93 89 0b 	sts	0x0B89, r25	; 0x800b89 <xFreeBytesRemaining+0x1>
     b94:	80 93 88 0b 	sts	0x0B88, r24	; 0x800b88 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b98:	ce 01       	movw	r24, r28
     b9a:	e0 de       	rcall	.-576    	; 0x95c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     b9c:	80 91 82 0b 	lds	r24, 0x0B82	; 0x800b82 <xNumberOfSuccessfulFrees>
     ba0:	90 91 83 0b 	lds	r25, 0x0B83	; 0x800b83 <xNumberOfSuccessfulFrees+0x1>
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	90 93 83 0b 	sts	0x0B83, r25	; 0x800b83 <xNumberOfSuccessfulFrees+0x1>
     baa:	80 93 82 0b 	sts	0x0B82, r24	; 0x800b82 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     bae:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	08 95       	ret

00000bbc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     bbc:	fc 01       	movw	r30, r24
     bbe:	03 96       	adiw	r24, 0x03	; 3
     bc0:	92 83       	std	Z+2, r25	; 0x02
     bc2:	81 83       	std	Z+1, r24	; 0x01
     bc4:	4f ef       	ldi	r20, 0xFF	; 255
     bc6:	5f ef       	ldi	r21, 0xFF	; 255
     bc8:	ba 01       	movw	r22, r20
     bca:	43 83       	std	Z+3, r20	; 0x03
     bcc:	54 83       	std	Z+4, r21	; 0x04
     bce:	65 83       	std	Z+5, r22	; 0x05
     bd0:	76 83       	std	Z+6, r23	; 0x06
     bd2:	90 87       	std	Z+8, r25	; 0x08
     bd4:	87 83       	std	Z+7, r24	; 0x07
     bd6:	92 87       	std	Z+10, r25	; 0x0a
     bd8:	81 87       	std	Z+9, r24	; 0x09
     bda:	10 82       	st	Z, r1
     bdc:	08 95       	ret

00000bde <vListInitialiseItem>:
     bde:	fc 01       	movw	r30, r24
     be0:	13 86       	std	Z+11, r1	; 0x0b
     be2:	12 86       	std	Z+10, r1	; 0x0a
     be4:	08 95       	ret

00000be6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bf0:	08 81       	ld	r16, Y
     bf2:	19 81       	ldd	r17, Y+1	; 0x01
     bf4:	2a 81       	ldd	r18, Y+2	; 0x02
     bf6:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bf8:	0f 3f       	cpi	r16, 0xFF	; 255
     bfa:	4f ef       	ldi	r20, 0xFF	; 255
     bfc:	14 07       	cpc	r17, r20
     bfe:	24 07       	cpc	r18, r20
     c00:	34 07       	cpc	r19, r20
     c02:	21 f4       	brne	.+8      	; 0xc0c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c04:	fc 01       	movw	r30, r24
     c06:	a1 85       	ldd	r26, Z+9	; 0x09
     c08:	b2 85       	ldd	r27, Z+10	; 0x0a
     c0a:	11 c0       	rjmp	.+34     	; 0xc2e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c0c:	dc 01       	movw	r26, r24
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <vListInsert+0x2e>
     c12:	df 01       	movw	r26, r30
     c14:	14 96       	adiw	r26, 0x04	; 4
     c16:	ed 91       	ld	r30, X+
     c18:	fc 91       	ld	r31, X
     c1a:	15 97       	sbiw	r26, 0x05	; 5
     c1c:	40 81       	ld	r20, Z
     c1e:	51 81       	ldd	r21, Z+1	; 0x01
     c20:	62 81       	ldd	r22, Z+2	; 0x02
     c22:	73 81       	ldd	r23, Z+3	; 0x03
     c24:	04 17       	cp	r16, r20
     c26:	15 07       	cpc	r17, r21
     c28:	26 07       	cpc	r18, r22
     c2a:	37 07       	cpc	r19, r23
     c2c:	90 f7       	brcc	.-28     	; 0xc12 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c2e:	14 96       	adiw	r26, 0x04	; 4
     c30:	ed 91       	ld	r30, X+
     c32:	fc 91       	ld	r31, X
     c34:	15 97       	sbiw	r26, 0x05	; 5
     c36:	fd 83       	std	Y+5, r31	; 0x05
     c38:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c3a:	d7 83       	std	Z+7, r29	; 0x07
     c3c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c3e:	bf 83       	std	Y+7, r27	; 0x07
     c40:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c42:	15 96       	adiw	r26, 0x05	; 5
     c44:	dc 93       	st	X, r29
     c46:	ce 93       	st	-X, r28
     c48:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c4a:	9b 87       	std	Y+11, r25	; 0x0b
     c4c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c4e:	fc 01       	movw	r30, r24
     c50:	20 81       	ld	r18, Z
     c52:	2f 5f       	subi	r18, 0xFF	; 255
     c54:	20 83       	st	Z, r18
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c66:	a2 85       	ldd	r26, Z+10	; 0x0a
     c68:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c6a:	c4 81       	ldd	r28, Z+4	; 0x04
     c6c:	d5 81       	ldd	r29, Z+5	; 0x05
     c6e:	86 81       	ldd	r24, Z+6	; 0x06
     c70:	97 81       	ldd	r25, Z+7	; 0x07
     c72:	9f 83       	std	Y+7, r25	; 0x07
     c74:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c76:	c6 81       	ldd	r28, Z+6	; 0x06
     c78:	d7 81       	ldd	r29, Z+7	; 0x07
     c7a:	84 81       	ldd	r24, Z+4	; 0x04
     c7c:	95 81       	ldd	r25, Z+5	; 0x05
     c7e:	9d 83       	std	Y+5, r25	; 0x05
     c80:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c82:	11 96       	adiw	r26, 0x01	; 1
     c84:	8d 91       	ld	r24, X+
     c86:	9c 91       	ld	r25, X
     c88:	12 97       	sbiw	r26, 0x02	; 2
     c8a:	e8 17       	cp	r30, r24
     c8c:	f9 07       	cpc	r31, r25
     c8e:	31 f4       	brne	.+12     	; 0xc9c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c90:	86 81       	ldd	r24, Z+6	; 0x06
     c92:	97 81       	ldd	r25, Z+7	; 0x07
     c94:	12 96       	adiw	r26, 0x02	; 2
     c96:	9c 93       	st	X, r25
     c98:	8e 93       	st	-X, r24
     c9a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c9c:	13 86       	std	Z+11, r1	; 0x0b
     c9e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     ca0:	8c 91       	ld	r24, X
     ca2:	81 50       	subi	r24, 0x01	; 1
     ca4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ca6:	8c 91       	ld	r24, X
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     cae:	a8 95       	wdr
     cb0:	90 ec       	ldi	r25, 0xC0	; 192
     cb2:	88 e1       	ldi	r24, 0x18	; 24
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	a8 95       	wdr
     cba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     cc4:	08 95       	ret

00000cc6 <pxPortInitialiseStack>:
     cc6:	fc 01       	movw	r30, r24
     cc8:	60 83       	st	Z, r22
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	70 83       	st	Z, r23
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	10 82       	st	Z, r1
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	10 82       	st	Z, r1
     cd6:	31 97       	sbiw	r30, 0x01	; 1
     cd8:	20 e8       	ldi	r18, 0x80	; 128
     cda:	20 83       	st	Z, r18
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	10 82       	st	Z, r1
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	10 82       	st	Z, r1
     ce4:	31 97       	sbiw	r30, 0x01	; 1
     ce6:	10 82       	st	Z, r1
     ce8:	77 97       	sbiw	r30, 0x17	; 23
     cea:	40 83       	st	Z, r20
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	50 83       	st	Z, r21
     cf0:	86 97       	sbiw	r24, 0x26	; 38
     cf2:	08 95       	ret

00000cf4 <xPortStartScheduler>:
     cf4:	dc df       	rcall	.-72     	; 0xcae <prvSetupTimerInterrupt>
     cf6:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
     cfa:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
     cfe:	cd 91       	ld	r28, X+
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	dd 91       	ld	r29, X+
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	7f 90       	pop	r7
     d38:	6f 90       	pop	r6
     d3a:	5f 90       	pop	r5
     d3c:	4f 90       	pop	r4
     d3e:	3f 90       	pop	r3
     d40:	2f 90       	pop	r2
     d42:	1f 90       	pop	r1
     d44:	0f 90       	pop	r0
     d46:	0c be       	out	0x3c, r0	; 60
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	08 95       	ret
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	08 95       	ret

00000d58 <vPortYield>:
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	0f 92       	push	r0
     d60:	0b b6       	in	r0, 0x3b	; 59
     d62:	0f 92       	push	r0
     d64:	0c b6       	in	r0, 0x3c	; 60
     d66:	0f 92       	push	r0
     d68:	1f 92       	push	r1
     d6a:	11 24       	eor	r1, r1
     d6c:	2f 92       	push	r2
     d6e:	3f 92       	push	r3
     d70:	4f 92       	push	r4
     d72:	5f 92       	push	r5
     d74:	6f 92       	push	r6
     d76:	7f 92       	push	r7
     d78:	8f 92       	push	r8
     d7a:	9f 92       	push	r9
     d7c:	af 92       	push	r10
     d7e:	bf 92       	push	r11
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
     da8:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
     dac:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
     db0:	0d b6       	in	r0, 0x3d	; 61
     db2:	0d 92       	st	X+, r0
     db4:	0e b6       	in	r0, 0x3e	; 62
     db6:	0d 92       	st	X+, r0
     db8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <vTaskSwitchContext>
     dbc:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
     dc0:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
     dc4:	cd 91       	ld	r28, X+
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	dd 91       	ld	r29, X+
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	ff 91       	pop	r31
     dce:	ef 91       	pop	r30
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	bf 90       	pop	r11
     df6:	af 90       	pop	r10
     df8:	9f 90       	pop	r9
     dfa:	8f 90       	pop	r8
     dfc:	7f 90       	pop	r7
     dfe:	6f 90       	pop	r6
     e00:	5f 90       	pop	r5
     e02:	4f 90       	pop	r4
     e04:	3f 90       	pop	r3
     e06:	2f 90       	pop	r2
     e08:	1f 90       	pop	r1
     e0a:	0f 90       	pop	r0
     e0c:	0c be       	out	0x3c, r0	; 60
     e0e:	0f 90       	pop	r0
     e10:	0b be       	out	0x3b, r0	; 59
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	08 95       	ret

00000e1a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	0f 92       	push	r0
     e22:	0b b6       	in	r0, 0x3b	; 59
     e24:	0f 92       	push	r0
     e26:	0c b6       	in	r0, 0x3c	; 60
     e28:	0f 92       	push	r0
     e2a:	1f 92       	push	r1
     e2c:	11 24       	eor	r1, r1
     e2e:	2f 92       	push	r2
     e30:	3f 92       	push	r3
     e32:	4f 92       	push	r4
     e34:	5f 92       	push	r5
     e36:	6f 92       	push	r6
     e38:	7f 92       	push	r7
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
     e6a:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
     e6e:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
     e72:	0d b6       	in	r0, 0x3d	; 61
     e74:	0d 92       	st	X+, r0
     e76:	0e b6       	in	r0, 0x3e	; 62
     e78:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     e7a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     e7c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <xTaskIncrementTick>
     e80:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e82:	0e 94 74 13 	call	0x26e8	; 0x26e8 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     e86:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
     e8a:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
     e8e:	cd 91       	ld	r28, X+
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	dd 91       	ld	r29, X+
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	7f 91       	pop	r23
     ea8:	6f 91       	pop	r22
     eaa:	5f 91       	pop	r21
     eac:	4f 91       	pop	r20
     eae:	3f 91       	pop	r19
     eb0:	2f 91       	pop	r18
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	df 90       	pop	r13
     ebc:	cf 90       	pop	r12
     ebe:	bf 90       	pop	r11
     ec0:	af 90       	pop	r10
     ec2:	9f 90       	pop	r9
     ec4:	8f 90       	pop	r8
     ec6:	7f 90       	pop	r7
     ec8:	6f 90       	pop	r6
     eca:	5f 90       	pop	r5
     ecc:	4f 90       	pop	r4
     ece:	3f 90       	pop	r3
     ed0:	2f 90       	pop	r2
     ed2:	1f 90       	pop	r1
     ed4:	0f 90       	pop	r0
     ed6:	0c be       	out	0x3c, r0	; 60
     ed8:	0f 90       	pop	r0
     eda:	0b be       	out	0x3b, r0	; 59
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ee2:	08 95       	ret

00000ee4 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     ee4:	9a df       	rcall	.-204    	; 0xe1a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ee6:	18 95       	reti

00000ee8 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ee8:	dc 01       	movw	r26, r24
     eea:	53 96       	adiw	r26, 0x13	; 19
     eec:	2c 91       	ld	r18, X
     eee:	53 97       	sbiw	r26, 0x13	; 19
     ef0:	22 23       	and	r18, r18
     ef2:	41 f0       	breq	.+16     	; 0xf04 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     ef4:	5a 96       	adiw	r26, 0x1a	; 26
     ef6:	ed 91       	ld	r30, X+
     ef8:	fc 91       	ld	r31, X
     efa:	5b 97       	sbiw	r26, 0x1b	; 27
     efc:	90 81       	ld	r25, Z
     efe:	8a e0       	ldi	r24, 0x0A	; 10
     f00:	89 1b       	sub	r24, r25
     f02:	08 95       	ret
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	08 95       	ret

00000f08 <prvIsQueueEmpty>:
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	0f 92       	push	r0
     f0e:	fc 01       	movw	r30, r24
     f10:	86 8d       	ldd	r24, Z+30	; 0x1e
     f12:	81 11       	cpse	r24, r1
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <prvIsQueueEmpty+0x12>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <prvIsQueueEmpty+0x14>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	08 95       	ret

00000f22 <prvIsQueueFull>:
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	0f 92       	push	r0
     f28:	fc 01       	movw	r30, r24
     f2a:	26 8d       	ldd	r18, Z+30	; 0x1e
     f2c:	87 8d       	ldd	r24, Z+31	; 0x1f
     f2e:	28 13       	cpse	r18, r24
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <prvIsQueueFull+0x14>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <prvIsQueueFull+0x16>
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0f 90       	pop	r0
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	08 95       	ret

00000f3e <prvCopyDataToQueue>:
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
     f48:	04 2f       	mov	r16, r20
     f4a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f4c:	48 a1       	ldd	r20, Y+32	; 0x20
     f4e:	41 11       	cpse	r20, r1
     f50:	0c c0       	rjmp	.+24     	; 0xf6a <prvCopyDataToQueue+0x2c>
     f52:	88 81       	ld	r24, Y
     f54:	99 81       	ldd	r25, Y+1	; 0x01
     f56:	89 2b       	or	r24, r25
     f58:	09 f0       	breq	.+2      	; 0xf5c <prvCopyDataToQueue+0x1e>
     f5a:	42 c0       	rjmp	.+132    	; 0xfe0 <prvCopyDataToQueue+0xa2>
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <xTaskPriorityDisinherit>
     f64:	1d 82       	std	Y+5, r1	; 0x05
     f66:	1c 82       	std	Y+4, r1	; 0x04
     f68:	42 c0       	rjmp	.+132    	; 0xfee <prvCopyDataToQueue+0xb0>
     f6a:	01 11       	cpse	r16, r1
     f6c:	17 c0       	rjmp	.+46     	; 0xf9c <prvCopyDataToQueue+0x5e>
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	9b 81       	ldd	r25, Y+3	; 0x03
     f74:	0e 94 6f 36 	call	0x6cde	; 0x6cde <memcpy>
     f78:	28 a1       	ldd	r18, Y+32	; 0x20
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	9b 81       	ldd	r25, Y+3	; 0x03
     f7e:	82 0f       	add	r24, r18
     f80:	91 1d       	adc	r25, r1
     f82:	9b 83       	std	Y+3, r25	; 0x03
     f84:	8a 83       	std	Y+2, r24	; 0x02
     f86:	2c 81       	ldd	r18, Y+4	; 0x04
     f88:	3d 81       	ldd	r19, Y+5	; 0x05
     f8a:	82 17       	cp	r24, r18
     f8c:	93 07       	cpc	r25, r19
     f8e:	50 f1       	brcs	.+84     	; 0xfe4 <prvCopyDataToQueue+0xa6>
     f90:	88 81       	ld	r24, Y
     f92:	99 81       	ldd	r25, Y+1	; 0x01
     f94:	9b 83       	std	Y+3, r25	; 0x03
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	29 c0       	rjmp	.+82     	; 0xfee <prvCopyDataToQueue+0xb0>
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	9f 81       	ldd	r25, Y+7	; 0x07
     fa2:	0e 94 6f 36 	call	0x6cde	; 0x6cde <memcpy>
     fa6:	88 a1       	ldd	r24, Y+32	; 0x20
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	91 95       	neg	r25
     fac:	81 95       	neg	r24
     fae:	91 09       	sbc	r25, r1
     fb0:	2e 81       	ldd	r18, Y+6	; 0x06
     fb2:	3f 81       	ldd	r19, Y+7	; 0x07
     fb4:	28 0f       	add	r18, r24
     fb6:	39 1f       	adc	r19, r25
     fb8:	3f 83       	std	Y+7, r19	; 0x07
     fba:	2e 83       	std	Y+6, r18	; 0x06
     fbc:	48 81       	ld	r20, Y
     fbe:	59 81       	ldd	r21, Y+1	; 0x01
     fc0:	24 17       	cp	r18, r20
     fc2:	35 07       	cpc	r19, r21
     fc4:	30 f4       	brcc	.+12     	; 0xfd2 <prvCopyDataToQueue+0x94>
     fc6:	2c 81       	ldd	r18, Y+4	; 0x04
     fc8:	3d 81       	ldd	r19, Y+5	; 0x05
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	9f 83       	std	Y+7, r25	; 0x07
     fd0:	8e 83       	std	Y+6, r24	; 0x06
     fd2:	02 30       	cpi	r16, 0x02	; 2
     fd4:	49 f4       	brne	.+18     	; 0xfe8 <prvCopyDataToQueue+0xaa>
     fd6:	11 23       	and	r17, r17
     fd8:	49 f0       	breq	.+18     	; 0xfec <prvCopyDataToQueue+0xae>
     fda:	11 50       	subi	r17, 0x01	; 1
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	07 c0       	rjmp	.+14     	; 0xfee <prvCopyDataToQueue+0xb0>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <prvCopyDataToQueue+0xb0>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <prvCopyDataToQueue+0xb0>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	01 c0       	rjmp	.+2      	; 0xfee <prvCopyDataToQueue+0xb0>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	1f 5f       	subi	r17, 0xFF	; 255
     ff0:	1e 8f       	std	Y+30, r17	; 0x1e
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <prvCopyDataFromQueue>:
     ffc:	fc 01       	movw	r30, r24
     ffe:	40 a1       	ldd	r20, Z+32	; 0x20
    1000:	44 23       	and	r20, r20
    1002:	a9 f0       	breq	.+42     	; 0x102e <__EEPROM_REGION_LENGTH__+0x2e>
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	26 81       	ldd	r18, Z+6	; 0x06
    1008:	37 81       	ldd	r19, Z+7	; 0x07
    100a:	24 0f       	add	r18, r20
    100c:	35 1f       	adc	r19, r21
    100e:	37 83       	std	Z+7, r19	; 0x07
    1010:	26 83       	std	Z+6, r18	; 0x06
    1012:	84 81       	ldd	r24, Z+4	; 0x04
    1014:	95 81       	ldd	r25, Z+5	; 0x05
    1016:	28 17       	cp	r18, r24
    1018:	39 07       	cpc	r19, r25
    101a:	20 f0       	brcs	.+8      	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
    101c:	80 81       	ld	r24, Z
    101e:	91 81       	ldd	r25, Z+1	; 0x01
    1020:	97 83       	std	Z+7, r25	; 0x07
    1022:	86 83       	std	Z+6, r24	; 0x06
    1024:	cb 01       	movw	r24, r22
    1026:	66 81       	ldd	r22, Z+6	; 0x06
    1028:	77 81       	ldd	r23, Z+7	; 0x07
    102a:	0c 94 6f 36 	jmp	0x6cde	; 0x6cde <memcpy>
    102e:	08 95       	ret

00001030 <prvUnlockQueue>:
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	ec 01       	movw	r28, r24
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	0f 92       	push	r0
    103e:	1a a1       	ldd	r17, Y+34	; 0x22
    1040:	0b c0       	rjmp	.+22     	; 0x1058 <prvUnlockQueue+0x28>
    1042:	8b 89       	ldd	r24, Y+19	; 0x13
    1044:	88 23       	and	r24, r24
    1046:	51 f0       	breq	.+20     	; 0x105c <prvUnlockQueue+0x2c>
    1048:	ce 01       	movw	r24, r28
    104a:	43 96       	adiw	r24, 0x13	; 19
    104c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <xTaskRemoveFromEventList>
    1050:	81 11       	cpse	r24, r1
    1052:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <vTaskMissedYield>
    1056:	11 50       	subi	r17, 0x01	; 1
    1058:	11 16       	cp	r1, r17
    105a:	9c f3       	brlt	.-26     	; 0x1042 <prvUnlockQueue+0x12>
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	8a a3       	std	Y+34, r24	; 0x22
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	0f 92       	push	r0
    106a:	19 a1       	ldd	r17, Y+33	; 0x21
    106c:	0b c0       	rjmp	.+22     	; 0x1084 <prvUnlockQueue+0x54>
    106e:	88 85       	ldd	r24, Y+8	; 0x08
    1070:	88 23       	and	r24, r24
    1072:	51 f0       	breq	.+20     	; 0x1088 <prvUnlockQueue+0x58>
    1074:	ce 01       	movw	r24, r28
    1076:	08 96       	adiw	r24, 0x08	; 8
    1078:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <xTaskRemoveFromEventList>
    107c:	81 11       	cpse	r24, r1
    107e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <vTaskMissedYield>
    1082:	11 50       	subi	r17, 0x01	; 1
    1084:	11 16       	cp	r1, r17
    1086:	9c f3       	brlt	.-26     	; 0x106e <prvUnlockQueue+0x3e>
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	89 a3       	std	Y+33, r24	; 0x21
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	08 95       	ret

00001098 <xQueueGenericReset>:
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	0f 92       	push	r0
    10a4:	e8 81       	ld	r30, Y
    10a6:	f9 81       	ldd	r31, Y+1	; 0x01
    10a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10aa:	28 a1       	ldd	r18, Y+32	; 0x20
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	82 9f       	mul	r24, r18
    10b2:	a0 01       	movw	r20, r0
    10b4:	83 9f       	mul	r24, r19
    10b6:	50 0d       	add	r21, r0
    10b8:	92 9f       	mul	r25, r18
    10ba:	50 0d       	add	r21, r0
    10bc:	11 24       	eor	r1, r1
    10be:	4e 0f       	add	r20, r30
    10c0:	5f 1f       	adc	r21, r31
    10c2:	5d 83       	std	Y+5, r21	; 0x05
    10c4:	4c 83       	std	Y+4, r20	; 0x04
    10c6:	1e 8e       	std	Y+30, r1	; 0x1e
    10c8:	fb 83       	std	Y+3, r31	; 0x03
    10ca:	ea 83       	std	Y+2, r30	; 0x02
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	28 9f       	mul	r18, r24
    10d0:	a0 01       	movw	r20, r0
    10d2:	29 9f       	mul	r18, r25
    10d4:	50 0d       	add	r21, r0
    10d6:	38 9f       	mul	r19, r24
    10d8:	50 0d       	add	r21, r0
    10da:	11 24       	eor	r1, r1
    10dc:	cf 01       	movw	r24, r30
    10de:	84 0f       	add	r24, r20
    10e0:	95 1f       	adc	r25, r21
    10e2:	9f 83       	std	Y+7, r25	; 0x07
    10e4:	8e 83       	std	Y+6, r24	; 0x06
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	89 a3       	std	Y+33, r24	; 0x21
    10ea:	8a a3       	std	Y+34, r24	; 0x22
    10ec:	61 11       	cpse	r22, r1
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <xQueueGenericReset+0x6e>
    10f0:	88 85       	ldd	r24, Y+8	; 0x08
    10f2:	88 23       	and	r24, r24
    10f4:	71 f0       	breq	.+28     	; 0x1112 <xQueueGenericReset+0x7a>
    10f6:	ce 01       	movw	r24, r28
    10f8:	08 96       	adiw	r24, 0x08	; 8
    10fa:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <xTaskRemoveFromEventList>
    10fe:	88 23       	and	r24, r24
    1100:	41 f0       	breq	.+16     	; 0x1112 <xQueueGenericReset+0x7a>
    1102:	2a de       	rcall	.-940    	; 0xd58 <vPortYield>
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <xQueueGenericReset+0x7a>
    1106:	ce 01       	movw	r24, r28
    1108:	08 96       	adiw	r24, 0x08	; 8
    110a:	58 dd       	rcall	.-1360   	; 0xbbc <vListInitialise>
    110c:	ce 01       	movw	r24, r28
    110e:	43 96       	adiw	r24, 0x13	; 19
    1110:	55 dd       	rcall	.-1366   	; 0xbbc <vListInitialise>
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <prvInitialiseNewQueue>:
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	f8 01       	movw	r30, r16
    1124:	61 11       	cpse	r22, r1
    1126:	03 c0       	rjmp	.+6      	; 0x112e <prvInitialiseNewQueue+0x10>
    1128:	11 83       	std	Z+1, r17	; 0x01
    112a:	00 83       	st	Z, r16
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <prvInitialiseNewQueue+0x14>
    112e:	51 83       	std	Z+1, r21	; 0x01
    1130:	40 83       	st	Z, r20
    1132:	87 8f       	std	Z+31, r24	; 0x1f
    1134:	60 a3       	std	Z+32, r22	; 0x20
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	cf 01       	movw	r24, r30
    113a:	ae df       	rcall	.-164    	; 0x1098 <xQueueGenericReset>
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <xQueueGenericCreate>:
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	f8 2e       	mov	r15, r24
    1152:	e6 2e       	mov	r14, r22
    1154:	d4 2e       	mov	r13, r20
    1156:	86 9f       	mul	r24, r22
    1158:	c0 01       	movw	r24, r0
    115a:	11 24       	eor	r1, r1
    115c:	83 96       	adiw	r24, 0x23	; 35
    115e:	48 dc       	rcall	.-1904   	; 0x9f0 <pvPortMalloc>
    1160:	ec 01       	movw	r28, r24
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	41 f0       	breq	.+16     	; 0x1176 <xQueueGenericCreate+0x34>
    1166:	8c 01       	movw	r16, r24
    1168:	2d 2d       	mov	r18, r13
    116a:	ac 01       	movw	r20, r24
    116c:	4d 5d       	subi	r20, 0xDD	; 221
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	6e 2d       	mov	r22, r14
    1172:	8f 2d       	mov	r24, r15
    1174:	d4 df       	rcall	.-88     	; 0x111e <prvInitialiseNewQueue>
    1176:	ce 01       	movw	r24, r28
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	df 90       	pop	r13
    1186:	08 95       	ret

00001188 <xQueueGenericSend>:
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	29 97       	sbiw	r28, 0x09	; 9
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	7c 01       	movw	r14, r24
    11aa:	6b 01       	movw	r12, r22
    11ac:	2e 83       	std	Y+6, r18	; 0x06
    11ae:	3f 83       	std	Y+7, r19	; 0x07
    11b0:	48 87       	std	Y+8, r20	; 0x08
    11b2:	59 87       	std	Y+9, r21	; 0x09
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	0f 92       	push	r0
    11bc:	f7 01       	movw	r30, r14
    11be:	96 8d       	ldd	r25, Z+30	; 0x1e
    11c0:	87 8d       	ldd	r24, Z+31	; 0x1f
    11c2:	98 17       	cp	r25, r24
    11c4:	10 f0       	brcs	.+4      	; 0x11ca <xQueueGenericSend+0x42>
    11c6:	02 30       	cpi	r16, 0x02	; 2
    11c8:	b1 f4       	brne	.+44     	; 0x11f6 <xQueueGenericSend+0x6e>
    11ca:	40 2f       	mov	r20, r16
    11cc:	b6 01       	movw	r22, r12
    11ce:	c7 01       	movw	r24, r14
    11d0:	b6 de       	rcall	.-660    	; 0xf3e <prvCopyDataToQueue>
    11d2:	f7 01       	movw	r30, r14
    11d4:	93 89       	ldd	r25, Z+19	; 0x13
    11d6:	99 23       	and	r25, r25
    11d8:	41 f0       	breq	.+16     	; 0x11ea <xQueueGenericSend+0x62>
    11da:	c7 01       	movw	r24, r14
    11dc:	43 96       	adiw	r24, 0x13	; 19
    11de:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <xTaskRemoveFromEventList>
    11e2:	88 23       	and	r24, r24
    11e4:	21 f0       	breq	.+8      	; 0x11ee <xQueueGenericSend+0x66>
    11e6:	b8 dd       	rcall	.-1168   	; 0xd58 <vPortYield>
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <xQueueGenericSend+0x66>
    11ea:	81 11       	cpse	r24, r1
    11ec:	b5 dd       	rcall	.-1174   	; 0xd58 <vPortYield>
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	4c c0       	rjmp	.+152    	; 0x128e <xQueueGenericSend+0x106>
    11f6:	8e 81       	ldd	r24, Y+6	; 0x06
    11f8:	9f 81       	ldd	r25, Y+7	; 0x07
    11fa:	a8 85       	ldd	r26, Y+8	; 0x08
    11fc:	b9 85       	ldd	r27, Y+9	; 0x09
    11fe:	89 2b       	or	r24, r25
    1200:	8a 2b       	or	r24, r26
    1202:	8b 2b       	or	r24, r27
    1204:	21 f4       	brne	.+8      	; 0x120e <xQueueGenericSend+0x86>
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	40 c0       	rjmp	.+128    	; 0x128e <xQueueGenericSend+0x106>
    120e:	11 11       	cpse	r17, r1
    1210:	05 c0       	rjmp	.+10     	; 0x121c <xQueueGenericSend+0x94>
    1212:	ce 01       	movw	r24, r28
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <vTaskInternalSetTimeOutState>
    121a:	11 e0       	ldi	r17, 0x01	; 1
    121c:	0f 90       	pop	r0
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	c7 d7       	rcall	.+3982   	; 0x21b0 <vTaskSuspendAll>
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	0f 92       	push	r0
    1228:	f7 01       	movw	r30, r14
    122a:	81 a1       	ldd	r24, Z+33	; 0x21
    122c:	8f 3f       	cpi	r24, 0xFF	; 255
    122e:	09 f4       	brne	.+2      	; 0x1232 <xQueueGenericSend+0xaa>
    1230:	11 a2       	std	Z+33, r1	; 0x21
    1232:	f7 01       	movw	r30, r14
    1234:	82 a1       	ldd	r24, Z+34	; 0x22
    1236:	8f 3f       	cpi	r24, 0xFF	; 255
    1238:	09 f4       	brne	.+2      	; 0x123c <xQueueGenericSend+0xb4>
    123a:	12 a2       	std	Z+34, r1	; 0x22
    123c:	0f 90       	pop	r0
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	be 01       	movw	r22, r28
    1242:	6a 5f       	subi	r22, 0xFA	; 250
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	ce 01       	movw	r24, r28
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <xTaskCheckForTimeOut>
    124e:	81 11       	cpse	r24, r1
    1250:	19 c0       	rjmp	.+50     	; 0x1284 <xQueueGenericSend+0xfc>
    1252:	c7 01       	movw	r24, r14
    1254:	66 de       	rcall	.-820    	; 0xf22 <prvIsQueueFull>
    1256:	88 23       	and	r24, r24
    1258:	81 f0       	breq	.+32     	; 0x127a <xQueueGenericSend+0xf2>
    125a:	4e 81       	ldd	r20, Y+6	; 0x06
    125c:	5f 81       	ldd	r21, Y+7	; 0x07
    125e:	68 85       	ldd	r22, Y+8	; 0x08
    1260:	79 85       	ldd	r23, Y+9	; 0x09
    1262:	c7 01       	movw	r24, r14
    1264:	08 96       	adiw	r24, 0x08	; 8
    1266:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vTaskPlaceOnEventList>
    126a:	c7 01       	movw	r24, r14
    126c:	e1 de       	rcall	.-574    	; 0x1030 <prvUnlockQueue>
    126e:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>
    1272:	81 11       	cpse	r24, r1
    1274:	a0 cf       	rjmp	.-192    	; 0x11b6 <xQueueGenericSend+0x2e>
    1276:	70 dd       	rcall	.-1312   	; 0xd58 <vPortYield>
    1278:	9e cf       	rjmp	.-196    	; 0x11b6 <xQueueGenericSend+0x2e>
    127a:	c7 01       	movw	r24, r14
    127c:	d9 de       	rcall	.-590    	; 0x1030 <prvUnlockQueue>
    127e:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>
    1282:	99 cf       	rjmp	.-206    	; 0x11b6 <xQueueGenericSend+0x2e>
    1284:	c7 01       	movw	r24, r14
    1286:	d4 de       	rcall	.-600    	; 0x1030 <prvUnlockQueue>
    1288:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	29 96       	adiw	r28, 0x09	; 9
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	08 95       	ret

000012ac <prvInitialiseMutex>:
    12ac:	0f 93       	push	r16
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	69 f0       	breq	.+26     	; 0x12cc <prvInitialiseMutex+0x20>
    12b2:	fc 01       	movw	r30, r24
    12b4:	15 82       	std	Z+5, r1	; 0x05
    12b6:	14 82       	std	Z+4, r1	; 0x04
    12b8:	11 82       	std	Z+1, r1	; 0x01
    12ba:	10 82       	st	Z, r1
    12bc:	16 82       	std	Z+6, r1	; 0x06
    12be:	00 e0       	ldi	r16, 0x00	; 0
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	a9 01       	movw	r20, r18
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	5e df       	rcall	.-324    	; 0x1188 <xQueueGenericSend>
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <xQueueCreateMutex>:
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	48 2f       	mov	r20, r24
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	33 df       	rcall	.-410    	; 0x1142 <xQueueGenericCreate>
    12dc:	ec 01       	movw	r28, r24
    12de:	e6 df       	rcall	.-52     	; 0x12ac <prvInitialiseMutex>
    12e0:	ce 01       	movw	r24, r28
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <xQueueGenericSendFromISR>:
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	8a 01       	movw	r16, r20
    12f6:	fc 01       	movw	r30, r24
    12f8:	56 8d       	ldd	r21, Z+30	; 0x1e
    12fa:	37 8d       	ldd	r19, Z+31	; 0x1f
    12fc:	53 17       	cp	r21, r19
    12fe:	10 f0       	brcs	.+4      	; 0x1304 <xQueueGenericSendFromISR+0x1c>
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	f9 f4       	brne	.+62     	; 0x1342 <xQueueGenericSendFromISR+0x5a>
    1304:	42 2f       	mov	r20, r18
    1306:	78 01       	movw	r14, r16
    1308:	ec 01       	movw	r28, r24
    130a:	1a a1       	ldd	r17, Y+34	; 0x22
    130c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    130e:	ce 01       	movw	r24, r28
    1310:	16 de       	rcall	.-980    	; 0xf3e <prvCopyDataToQueue>
    1312:	1f 3f       	cpi	r17, 0xFF	; 255
    1314:	81 f4       	brne	.+32     	; 0x1336 <xQueueGenericSendFromISR+0x4e>
    1316:	8b 89       	ldd	r24, Y+19	; 0x13
    1318:	88 23       	and	r24, r24
    131a:	a9 f0       	breq	.+42     	; 0x1346 <xQueueGenericSendFromISR+0x5e>
    131c:	ce 01       	movw	r24, r28
    131e:	43 96       	adiw	r24, 0x13	; 19
    1320:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <xTaskRemoveFromEventList>
    1324:	88 23       	and	r24, r24
    1326:	89 f0       	breq	.+34     	; 0x134a <xQueueGenericSendFromISR+0x62>
    1328:	e1 14       	cp	r14, r1
    132a:	f1 04       	cpc	r15, r1
    132c:	81 f0       	breq	.+32     	; 0x134e <xQueueGenericSendFromISR+0x66>
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	f7 01       	movw	r30, r14
    1332:	80 83       	st	Z, r24
    1334:	0d c0       	rjmp	.+26     	; 0x1350 <xQueueGenericSendFromISR+0x68>
    1336:	ff 24       	eor	r15, r15
    1338:	f3 94       	inc	r15
    133a:	f1 0e       	add	r15, r17
    133c:	fa a2       	std	Y+34, r15	; 0x22
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	07 c0       	rjmp	.+14     	; 0x1350 <xQueueGenericSendFromISR+0x68>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <xQueueGenericSendFromISR+0x68>
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <xQueueGenericSendFromISR+0x68>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <xQueueGenericSendFromISR+0x68>
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	08 95       	ret

0000135e <xQueueReceive>:
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	29 97       	sbiw	r28, 0x09	; 9
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	8c 01       	movw	r16, r24
    1380:	6b 01       	movw	r12, r22
    1382:	2e 83       	std	Y+6, r18	; 0x06
    1384:	3f 83       	std	Y+7, r19	; 0x07
    1386:	48 87       	std	Y+8, r20	; 0x08
    1388:	59 87       	std	Y+9, r21	; 0x09
    138a:	e1 2c       	mov	r14, r1
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	0f 92       	push	r0
    1392:	f8 01       	movw	r30, r16
    1394:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1396:	ff 20       	and	r15, r15
    1398:	99 f0       	breq	.+38     	; 0x13c0 <xQueueReceive+0x62>
    139a:	b6 01       	movw	r22, r12
    139c:	c8 01       	movw	r24, r16
    139e:	2e de       	rcall	.-932    	; 0xffc <prvCopyDataFromQueue>
    13a0:	fa 94       	dec	r15
    13a2:	f8 01       	movw	r30, r16
    13a4:	f6 8e       	std	Z+30, r15	; 0x1e
    13a6:	80 85       	ldd	r24, Z+8	; 0x08
    13a8:	88 23       	and	r24, r24
    13aa:	31 f0       	breq	.+12     	; 0x13b8 <xQueueReceive+0x5a>
    13ac:	c8 01       	movw	r24, r16
    13ae:	08 96       	adiw	r24, 0x08	; 8
    13b0:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <xTaskRemoveFromEventList>
    13b4:	81 11       	cpse	r24, r1
    13b6:	d0 dc       	rcall	.-1632   	; 0xd58 <vPortYield>
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	4f c0       	rjmp	.+158    	; 0x145e <xQueueReceive+0x100>
    13c0:	8e 81       	ldd	r24, Y+6	; 0x06
    13c2:	9f 81       	ldd	r25, Y+7	; 0x07
    13c4:	a8 85       	ldd	r26, Y+8	; 0x08
    13c6:	b9 85       	ldd	r27, Y+9	; 0x09
    13c8:	89 2b       	or	r24, r25
    13ca:	8a 2b       	or	r24, r26
    13cc:	8b 2b       	or	r24, r27
    13ce:	21 f4       	brne	.+8      	; 0x13d8 <xQueueReceive+0x7a>
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	43 c0       	rjmp	.+134    	; 0x145e <xQueueReceive+0x100>
    13d8:	e1 10       	cpse	r14, r1
    13da:	06 c0       	rjmp	.+12     	; 0x13e8 <xQueueReceive+0x8a>
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <vTaskInternalSetTimeOutState>
    13e4:	ee 24       	eor	r14, r14
    13e6:	e3 94       	inc	r14
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	e1 d6       	rcall	.+3522   	; 0x21b0 <vTaskSuspendAll>
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	0f 92       	push	r0
    13f4:	f8 01       	movw	r30, r16
    13f6:	81 a1       	ldd	r24, Z+33	; 0x21
    13f8:	8f 3f       	cpi	r24, 0xFF	; 255
    13fa:	09 f4       	brne	.+2      	; 0x13fe <xQueueReceive+0xa0>
    13fc:	11 a2       	std	Z+33, r1	; 0x21
    13fe:	f8 01       	movw	r30, r16
    1400:	82 a1       	ldd	r24, Z+34	; 0x22
    1402:	8f 3f       	cpi	r24, 0xFF	; 255
    1404:	09 f4       	brne	.+2      	; 0x1408 <xQueueReceive+0xaa>
    1406:	12 a2       	std	Z+34, r1	; 0x22
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	be 01       	movw	r22, r28
    140e:	6a 5f       	subi	r22, 0xFA	; 250
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	ce 01       	movw	r24, r28
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <xTaskCheckForTimeOut>
    141a:	81 11       	cpse	r24, r1
    141c:	17 c0       	rjmp	.+46     	; 0x144c <xQueueReceive+0xee>
    141e:	c8 01       	movw	r24, r16
    1420:	73 dd       	rcall	.-1306   	; 0xf08 <prvIsQueueEmpty>
    1422:	88 23       	and	r24, r24
    1424:	79 f0       	breq	.+30     	; 0x1444 <xQueueReceive+0xe6>
    1426:	4e 81       	ldd	r20, Y+6	; 0x06
    1428:	5f 81       	ldd	r21, Y+7	; 0x07
    142a:	68 85       	ldd	r22, Y+8	; 0x08
    142c:	79 85       	ldd	r23, Y+9	; 0x09
    142e:	c8 01       	movw	r24, r16
    1430:	43 96       	adiw	r24, 0x13	; 19
    1432:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vTaskPlaceOnEventList>
    1436:	c8 01       	movw	r24, r16
    1438:	fb dd       	rcall	.-1034   	; 0x1030 <prvUnlockQueue>
    143a:	fa d7       	rcall	.+4084   	; 0x2430 <xTaskResumeAll>
    143c:	81 11       	cpse	r24, r1
    143e:	a6 cf       	rjmp	.-180    	; 0x138c <xQueueReceive+0x2e>
    1440:	8b dc       	rcall	.-1770   	; 0xd58 <vPortYield>
    1442:	a4 cf       	rjmp	.-184    	; 0x138c <xQueueReceive+0x2e>
    1444:	c8 01       	movw	r24, r16
    1446:	f4 dd       	rcall	.-1048   	; 0x1030 <prvUnlockQueue>
    1448:	f3 d7       	rcall	.+4070   	; 0x2430 <xTaskResumeAll>
    144a:	a0 cf       	rjmp	.-192    	; 0x138c <xQueueReceive+0x2e>
    144c:	c8 01       	movw	r24, r16
    144e:	f0 dd       	rcall	.-1056   	; 0x1030 <prvUnlockQueue>
    1450:	ef d7       	rcall	.+4062   	; 0x2430 <xTaskResumeAll>
    1452:	c8 01       	movw	r24, r16
    1454:	59 dd       	rcall	.-1358   	; 0xf08 <prvIsQueueEmpty>
    1456:	88 23       	and	r24, r24
    1458:	09 f4       	brne	.+2      	; 0x145c <xQueueReceive+0xfe>
    145a:	98 cf       	rjmp	.-208    	; 0x138c <xQueueReceive+0x2e>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	29 96       	adiw	r28, 0x09	; 9
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	cf 90       	pop	r12
    147a:	08 95       	ret

0000147c <xQueueSemaphoreTake>:
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	29 97       	sbiw	r28, 0x09	; 9
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	8c 01       	movw	r16, r24
    149a:	4e 83       	std	Y+6, r20	; 0x06
    149c:	5f 83       	std	Y+7, r21	; 0x07
    149e:	68 87       	std	Y+8, r22	; 0x08
    14a0:	79 87       	std	Y+9, r23	; 0x09
    14a2:	e1 2c       	mov	r14, r1
    14a4:	f1 2c       	mov	r15, r1
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	0f 92       	push	r0
    14ac:	f8 01       	movw	r30, r16
    14ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    14b0:	88 23       	and	r24, r24
    14b2:	c9 f0       	breq	.+50     	; 0x14e6 <xQueueSemaphoreTake+0x6a>
    14b4:	81 50       	subi	r24, 0x01	; 1
    14b6:	86 8f       	std	Z+30, r24	; 0x1e
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	89 2b       	or	r24, r25
    14be:	29 f4       	brne	.+10     	; 0x14ca <xQueueSemaphoreTake+0x4e>
    14c0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <pvTaskIncrementMutexHeldCount>
    14c4:	f8 01       	movw	r30, r16
    14c6:	95 83       	std	Z+5, r25	; 0x05
    14c8:	84 83       	std	Z+4, r24	; 0x04
    14ca:	f8 01       	movw	r30, r16
    14cc:	80 85       	ldd	r24, Z+8	; 0x08
    14ce:	88 23       	and	r24, r24
    14d0:	31 f0       	breq	.+12     	; 0x14de <xQueueSemaphoreTake+0x62>
    14d2:	c8 01       	movw	r24, r16
    14d4:	08 96       	adiw	r24, 0x08	; 8
    14d6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <xTaskRemoveFromEventList>
    14da:	81 11       	cpse	r24, r1
    14dc:	3d dc       	rcall	.-1926   	; 0xd58 <vPortYield>
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	6f c0       	rjmp	.+222    	; 0x15c4 <xQueueSemaphoreTake+0x148>
    14e6:	8e 81       	ldd	r24, Y+6	; 0x06
    14e8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ea:	a8 85       	ldd	r26, Y+8	; 0x08
    14ec:	b9 85       	ldd	r27, Y+9	; 0x09
    14ee:	89 2b       	or	r24, r25
    14f0:	8a 2b       	or	r24, r26
    14f2:	8b 2b       	or	r24, r27
    14f4:	21 f4       	brne	.+8      	; 0x14fe <xQueueSemaphoreTake+0x82>
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	63 c0       	rjmp	.+198    	; 0x15c4 <xQueueSemaphoreTake+0x148>
    14fe:	f1 10       	cpse	r15, r1
    1500:	06 c0       	rjmp	.+12     	; 0x150e <xQueueSemaphoreTake+0x92>
    1502:	ce 01       	movw	r24, r28
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <vTaskInternalSetTimeOutState>
    150a:	ff 24       	eor	r15, r15
    150c:	f3 94       	inc	r15
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	4e d6       	rcall	.+3228   	; 0x21b0 <vTaskSuspendAll>
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	0f 92       	push	r0
    151a:	f8 01       	movw	r30, r16
    151c:	81 a1       	ldd	r24, Z+33	; 0x21
    151e:	8f 3f       	cpi	r24, 0xFF	; 255
    1520:	09 f4       	brne	.+2      	; 0x1524 <xQueueSemaphoreTake+0xa8>
    1522:	11 a2       	std	Z+33, r1	; 0x21
    1524:	f8 01       	movw	r30, r16
    1526:	82 a1       	ldd	r24, Z+34	; 0x22
    1528:	8f 3f       	cpi	r24, 0xFF	; 255
    152a:	09 f4       	brne	.+2      	; 0x152e <xQueueSemaphoreTake+0xb2>
    152c:	12 a2       	std	Z+34, r1	; 0x22
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	be 01       	movw	r22, r28
    1534:	6a 5f       	subi	r22, 0xFA	; 250
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	ce 01       	movw	r24, r28
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <xTaskCheckForTimeOut>
    1540:	81 11       	cpse	r24, r1
    1542:	26 c0       	rjmp	.+76     	; 0x1590 <xQueueSemaphoreTake+0x114>
    1544:	c8 01       	movw	r24, r16
    1546:	e0 dc       	rcall	.-1600   	; 0xf08 <prvIsQueueEmpty>
    1548:	88 23       	and	r24, r24
    154a:	f1 f0       	breq	.+60     	; 0x1588 <xQueueSemaphoreTake+0x10c>
    154c:	f8 01       	movw	r30, r16
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	89 2b       	or	r24, r25
    1554:	51 f4       	brne	.+20     	; 0x156a <xQueueSemaphoreTake+0xee>
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	0f 92       	push	r0
    155c:	84 81       	ldd	r24, Z+4	; 0x04
    155e:	95 81       	ldd	r25, Z+5	; 0x05
    1560:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <xTaskPriorityInherit>
    1564:	e8 2e       	mov	r14, r24
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	4e 81       	ldd	r20, Y+6	; 0x06
    156c:	5f 81       	ldd	r21, Y+7	; 0x07
    156e:	68 85       	ldd	r22, Y+8	; 0x08
    1570:	79 85       	ldd	r23, Y+9	; 0x09
    1572:	c8 01       	movw	r24, r16
    1574:	43 96       	adiw	r24, 0x13	; 19
    1576:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <vTaskPlaceOnEventList>
    157a:	c8 01       	movw	r24, r16
    157c:	59 dd       	rcall	.-1358   	; 0x1030 <prvUnlockQueue>
    157e:	58 d7       	rcall	.+3760   	; 0x2430 <xTaskResumeAll>
    1580:	81 11       	cpse	r24, r1
    1582:	91 cf       	rjmp	.-222    	; 0x14a6 <xQueueSemaphoreTake+0x2a>
    1584:	e9 db       	rcall	.-2094   	; 0xd58 <vPortYield>
    1586:	8f cf       	rjmp	.-226    	; 0x14a6 <xQueueSemaphoreTake+0x2a>
    1588:	c8 01       	movw	r24, r16
    158a:	52 dd       	rcall	.-1372   	; 0x1030 <prvUnlockQueue>
    158c:	51 d7       	rcall	.+3746   	; 0x2430 <xTaskResumeAll>
    158e:	8b cf       	rjmp	.-234    	; 0x14a6 <xQueueSemaphoreTake+0x2a>
    1590:	c8 01       	movw	r24, r16
    1592:	4e dd       	rcall	.-1380   	; 0x1030 <prvUnlockQueue>
    1594:	4d d7       	rcall	.+3738   	; 0x2430 <xTaskResumeAll>
    1596:	c8 01       	movw	r24, r16
    1598:	b7 dc       	rcall	.-1682   	; 0xf08 <prvIsQueueEmpty>
    159a:	88 23       	and	r24, r24
    159c:	09 f4       	brne	.+2      	; 0x15a0 <xQueueSemaphoreTake+0x124>
    159e:	83 cf       	rjmp	.-250    	; 0x14a6 <xQueueSemaphoreTake+0x2a>
    15a0:	ee 20       	and	r14, r14
    15a2:	79 f0       	breq	.+30     	; 0x15c2 <xQueueSemaphoreTake+0x146>
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	0f 92       	push	r0
    15aa:	c8 01       	movw	r24, r16
    15ac:	9d dc       	rcall	.-1734   	; 0xee8 <prvGetDisinheritPriorityAfterTimeout>
    15ae:	68 2f       	mov	r22, r24
    15b0:	f8 01       	movw	r30, r16
    15b2:	84 81       	ldd	r24, Z+4	; 0x04
    15b4:	95 81       	ldd	r25, Z+5	; 0x05
    15b6:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <vTaskPriorityDisinheritAfterTimeout>
    15ba:	0f 90       	pop	r0
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <xQueueSemaphoreTake+0x148>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	29 96       	adiw	r28, 0x09	; 9
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	08 95       	ret

000015de <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	0f 92       	push	r0
    15ea:	89 a1       	ldd	r24, Y+33	; 0x21
    15ec:	8f 3f       	cpi	r24, 0xFF	; 255
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <vQueueWaitForMessageRestricted+0x14>
    15f0:	19 a2       	std	Y+33, r1	; 0x21
    15f2:	8a a1       	ldd	r24, Y+34	; 0x22
    15f4:	8f 3f       	cpi	r24, 0xFF	; 255
    15f6:	09 f4       	brne	.+2      	; 0x15fa <vQueueWaitForMessageRestricted+0x1c>
    15f8:	1a a2       	std	Y+34, r1	; 0x22
    15fa:	0f 90       	pop	r0
    15fc:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    15fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1600:	81 11       	cpse	r24, r1
    1602:	04 c0       	rjmp	.+8      	; 0x160c <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1604:	ce 01       	movw	r24, r28
    1606:	43 96       	adiw	r24, 0x13	; 19
    1608:	0e 94 3a 14 	call	0x2874	; 0x2874 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    160c:	ce 01       	movw	r24, r28
    160e:	10 dd       	rcall	.-1504   	; 0x1030 <prvUnlockQueue>
    }
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1616:	fc 01       	movw	r30, r24
    1618:	44 81       	ldd	r20, Z+4	; 0x04
    161a:	55 81       	ldd	r21, Z+5	; 0x05
    161c:	22 81       	ldd	r18, Z+2	; 0x02
    161e:	33 81       	ldd	r19, Z+3	; 0x03
    1620:	24 0f       	add	r18, r20
    1622:	35 1f       	adc	r19, r21
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	b9 01       	movw	r22, r18
    162a:	68 1b       	sub	r22, r24
    162c:	79 0b       	sbc	r23, r25
    162e:	cb 01       	movw	r24, r22
    1630:	64 17       	cp	r22, r20
    1632:	75 07       	cpc	r23, r21
    1634:	10 f0       	brcs	.+4      	; 0x163a <prvBytesInBuffer+0x24>
    1636:	84 1b       	sub	r24, r20
    1638:	95 0b       	sbc	r25, r21
    163a:	08 95       	ret

0000163c <prvInitialiseNewStreamBuffer>:
    163c:	0f 93       	push	r16
    163e:	fc 01       	movw	r30, r24
    1640:	8f e0       	ldi	r24, 0x0F	; 15
    1642:	df 01       	movw	r26, r30
    1644:	1d 92       	st	X+, r1
    1646:	8a 95       	dec	r24
    1648:	e9 f7       	brne	.-6      	; 0x1644 <prvInitialiseNewStreamBuffer+0x8>
    164a:	75 87       	std	Z+13, r23	; 0x0d
    164c:	64 87       	std	Z+12, r22	; 0x0c
    164e:	55 83       	std	Z+5, r21	; 0x05
    1650:	44 83       	std	Z+4, r20	; 0x04
    1652:	37 83       	std	Z+7, r19	; 0x07
    1654:	26 83       	std	Z+6, r18	; 0x06
    1656:	06 87       	std	Z+14, r16	; 0x0e
    1658:	0f 91       	pop	r16
    165a:	08 95       	ret

0000165c <prvWriteBytesToBuffer>:
    165c:	af 92       	push	r10
    165e:	bf 92       	push	r11
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	6c 01       	movw	r12, r24
    1672:	5b 01       	movw	r10, r22
    1674:	7a 01       	movw	r14, r20
    1676:	fc 01       	movw	r30, r24
    1678:	c2 81       	ldd	r28, Z+2	; 0x02
    167a:	d3 81       	ldd	r29, Z+3	; 0x03
    167c:	04 81       	ldd	r16, Z+4	; 0x04
    167e:	15 81       	ldd	r17, Z+5	; 0x05
    1680:	0c 1b       	sub	r16, r28
    1682:	1d 0b       	sbc	r17, r29
    1684:	40 17       	cp	r20, r16
    1686:	51 07       	cpc	r21, r17
    1688:	08 f4       	brcc	.+2      	; 0x168c <prvWriteBytesToBuffer+0x30>
    168a:	8a 01       	movw	r16, r20
    168c:	f6 01       	movw	r30, r12
    168e:	84 85       	ldd	r24, Z+12	; 0x0c
    1690:	95 85       	ldd	r25, Z+13	; 0x0d
    1692:	a8 01       	movw	r20, r16
    1694:	b5 01       	movw	r22, r10
    1696:	8c 0f       	add	r24, r28
    1698:	9d 1f       	adc	r25, r29
    169a:	0e 94 6f 36 	call	0x6cde	; 0x6cde <memcpy>
    169e:	0e 15       	cp	r16, r14
    16a0:	1f 05       	cpc	r17, r15
    16a2:	58 f4       	brcc	.+22     	; 0x16ba <prvWriteBytesToBuffer+0x5e>
    16a4:	a7 01       	movw	r20, r14
    16a6:	40 1b       	sub	r20, r16
    16a8:	51 0b       	sbc	r21, r17
    16aa:	b5 01       	movw	r22, r10
    16ac:	60 0f       	add	r22, r16
    16ae:	71 1f       	adc	r23, r17
    16b0:	f6 01       	movw	r30, r12
    16b2:	84 85       	ldd	r24, Z+12	; 0x0c
    16b4:	95 85       	ldd	r25, Z+13	; 0x0d
    16b6:	0e 94 6f 36 	call	0x6cde	; 0x6cde <memcpy>
    16ba:	ce 01       	movw	r24, r28
    16bc:	8e 0d       	add	r24, r14
    16be:	9f 1d       	adc	r25, r15
    16c0:	f6 01       	movw	r30, r12
    16c2:	24 81       	ldd	r18, Z+4	; 0x04
    16c4:	35 81       	ldd	r19, Z+5	; 0x05
    16c6:	82 17       	cp	r24, r18
    16c8:	93 07       	cpc	r25, r19
    16ca:	10 f0       	brcs	.+4      	; 0x16d0 <prvWriteBytesToBuffer+0x74>
    16cc:	82 1b       	sub	r24, r18
    16ce:	93 0b       	sbc	r25, r19
    16d0:	f6 01       	movw	r30, r12
    16d2:	93 83       	std	Z+3, r25	; 0x03
    16d4:	82 83       	std	Z+2, r24	; 0x02
    16d6:	c7 01       	movw	r24, r14
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	08 95       	ret

000016ee <prvWriteMessageToBuffer>:
    16ee:	cf 92       	push	r12
    16f0:	df 92       	push	r13
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	1f 92       	push	r1
    1700:	1f 92       	push	r1
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	7c 01       	movw	r14, r24
    1708:	6b 01       	movw	r12, r22
    170a:	5a 83       	std	Y+2, r21	; 0x02
    170c:	49 83       	std	Y+1, r20	; 0x01
    170e:	21 15       	cp	r18, r1
    1710:	31 05       	cpc	r19, r1
    1712:	c1 f0       	breq	.+48     	; 0x1744 <prvWriteMessageToBuffer+0x56>
    1714:	fc 01       	movw	r30, r24
    1716:	86 85       	ldd	r24, Z+14	; 0x0e
    1718:	80 fd       	sbrc	r24, 0
    171a:	08 c0       	rjmp	.+16     	; 0x172c <prvWriteMessageToBuffer+0x3e>
    171c:	42 17       	cp	r20, r18
    171e:	53 07       	cpc	r21, r19
    1720:	08 f4       	brcc	.+2      	; 0x1724 <prvWriteMessageToBuffer+0x36>
    1722:	9a 01       	movw	r18, r20
    1724:	3a 83       	std	Y+2, r19	; 0x02
    1726:	29 83       	std	Y+1, r18	; 0x01
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	0f c0       	rjmp	.+30     	; 0x174a <prvWriteMessageToBuffer+0x5c>
    172c:	20 17       	cp	r18, r16
    172e:	31 07       	cpc	r19, r17
    1730:	58 f0       	brcs	.+22     	; 0x1748 <prvWriteMessageToBuffer+0x5a>
    1732:	42 e0       	ldi	r20, 0x02	; 2
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	be 01       	movw	r22, r28
    1738:	6f 5f       	subi	r22, 0xFF	; 255
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	c7 01       	movw	r24, r14
    173e:	8e df       	rcall	.-228    	; 0x165c <prvWriteBytesToBuffer>
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	03 c0       	rjmp	.+6      	; 0x174a <prvWriteMessageToBuffer+0x5c>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	01 c0       	rjmp	.+2      	; 0x174a <prvWriteMessageToBuffer+0x5c>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	88 23       	and	r24, r24
    174c:	31 f0       	breq	.+12     	; 0x175a <prvWriteMessageToBuffer+0x6c>
    174e:	49 81       	ldd	r20, Y+1	; 0x01
    1750:	5a 81       	ldd	r21, Y+2	; 0x02
    1752:	b6 01       	movw	r22, r12
    1754:	c7 01       	movw	r24, r14
    1756:	82 df       	rcall	.-252    	; 0x165c <prvWriteBytesToBuffer>
    1758:	02 c0       	rjmp	.+4      	; 0x175e <prvWriteMessageToBuffer+0x70>
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	08 95       	ret

00001774 <prvReadBytesFromBuffer>:
    1774:	af 92       	push	r10
    1776:	bf 92       	push	r11
    1778:	cf 92       	push	r12
    177a:	df 92       	push	r13
    177c:	ef 92       	push	r14
    177e:	ff 92       	push	r15
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	7c 01       	movw	r14, r24
    178a:	5b 01       	movw	r10, r22
    178c:	e9 01       	movw	r28, r18
    178e:	42 17       	cp	r20, r18
    1790:	53 07       	cpc	r21, r19
    1792:	08 f4       	brcc	.+2      	; 0x1796 <prvReadBytesFromBuffer+0x22>
    1794:	ea 01       	movw	r28, r20
    1796:	20 97       	sbiw	r28, 0x00	; 0
    1798:	81 f1       	breq	.+96     	; 0x17fa <prvReadBytesFromBuffer+0x86>
    179a:	f7 01       	movw	r30, r14
    179c:	00 81       	ld	r16, Z
    179e:	11 81       	ldd	r17, Z+1	; 0x01
    17a0:	84 81       	ldd	r24, Z+4	; 0x04
    17a2:	95 81       	ldd	r25, Z+5	; 0x05
    17a4:	80 1b       	sub	r24, r16
    17a6:	91 0b       	sbc	r25, r17
    17a8:	6e 01       	movw	r12, r28
    17aa:	8c 17       	cp	r24, r28
    17ac:	9d 07       	cpc	r25, r29
    17ae:	08 f4       	brcc	.+2      	; 0x17b2 <prvReadBytesFromBuffer+0x3e>
    17b0:	6c 01       	movw	r12, r24
    17b2:	f7 01       	movw	r30, r14
    17b4:	64 85       	ldd	r22, Z+12	; 0x0c
    17b6:	75 85       	ldd	r23, Z+13	; 0x0d
    17b8:	60 0f       	add	r22, r16
    17ba:	71 1f       	adc	r23, r17
    17bc:	a6 01       	movw	r20, r12
    17be:	c5 01       	movw	r24, r10
    17c0:	0e 94 6f 36 	call	0x6cde	; 0x6cde <memcpy>
    17c4:	cc 16       	cp	r12, r28
    17c6:	dd 06       	cpc	r13, r29
    17c8:	58 f4       	brcc	.+22     	; 0x17e0 <prvReadBytesFromBuffer+0x6c>
    17ca:	ae 01       	movw	r20, r28
    17cc:	4c 19       	sub	r20, r12
    17ce:	5d 09       	sbc	r21, r13
    17d0:	f7 01       	movw	r30, r14
    17d2:	64 85       	ldd	r22, Z+12	; 0x0c
    17d4:	75 85       	ldd	r23, Z+13	; 0x0d
    17d6:	c5 01       	movw	r24, r10
    17d8:	8c 0d       	add	r24, r12
    17da:	9d 1d       	adc	r25, r13
    17dc:	0e 94 6f 36 	call	0x6cde	; 0x6cde <memcpy>
    17e0:	0c 0f       	add	r16, r28
    17e2:	1d 1f       	adc	r17, r29
    17e4:	f7 01       	movw	r30, r14
    17e6:	84 81       	ldd	r24, Z+4	; 0x04
    17e8:	95 81       	ldd	r25, Z+5	; 0x05
    17ea:	08 17       	cp	r16, r24
    17ec:	19 07       	cpc	r17, r25
    17ee:	10 f0       	brcs	.+4      	; 0x17f4 <prvReadBytesFromBuffer+0x80>
    17f0:	08 1b       	sub	r16, r24
    17f2:	19 0b       	sbc	r17, r25
    17f4:	f7 01       	movw	r30, r14
    17f6:	11 83       	std	Z+1, r17	; 0x01
    17f8:	00 83       	st	Z, r16
    17fa:	ce 01       	movw	r24, r28
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	bf 90       	pop	r11
    180e:	af 90       	pop	r10
    1810:	08 95       	ret

00001812 <prvReadMessageFromBuffer>:
    1812:	6f 92       	push	r6
    1814:	7f 92       	push	r7
    1816:	8f 92       	push	r8
    1818:	9f 92       	push	r9
    181a:	af 92       	push	r10
    181c:	bf 92       	push	r11
    181e:	cf 92       	push	r12
    1820:	df 92       	push	r13
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	1f 92       	push	r1
    1830:	1f 92       	push	r1
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	6c 01       	movw	r12, r24
    1838:	4b 01       	movw	r8, r22
    183a:	5a 01       	movw	r10, r20
    183c:	79 01       	movw	r14, r18
    183e:	01 15       	cp	r16, r1
    1840:	11 05       	cpc	r17, r1
    1842:	b1 f0       	breq	.+44     	; 0x1870 <prvReadMessageFromBuffer+0x5e>
    1844:	fc 01       	movw	r30, r24
    1846:	60 80       	ld	r6, Z
    1848:	71 80       	ldd	r7, Z+1	; 0x01
    184a:	a8 01       	movw	r20, r16
    184c:	be 01       	movw	r22, r28
    184e:	6f 5f       	subi	r22, 0xFF	; 255
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	90 df       	rcall	.-224    	; 0x1774 <prvReadBytesFromBuffer>
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	e0 1a       	sub	r14, r16
    185a:	f1 0a       	sbc	r15, r17
    185c:	a8 16       	cp	r10, r24
    185e:	b9 06       	cpc	r11, r25
    1860:	30 f4       	brcc	.+12     	; 0x186e <prvReadMessageFromBuffer+0x5c>
    1862:	f6 01       	movw	r30, r12
    1864:	71 82       	std	Z+1, r7	; 0x01
    1866:	60 82       	st	Z, r6
    1868:	a1 2c       	mov	r10, r1
    186a:	b1 2c       	mov	r11, r1
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <prvReadMessageFromBuffer+0x5e>
    186e:	5c 01       	movw	r10, r24
    1870:	97 01       	movw	r18, r14
    1872:	a5 01       	movw	r20, r10
    1874:	b4 01       	movw	r22, r8
    1876:	c6 01       	movw	r24, r12
    1878:	7d df       	rcall	.-262    	; 0x1774 <prvReadBytesFromBuffer>
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	ff 90       	pop	r15
    1888:	ef 90       	pop	r14
    188a:	df 90       	pop	r13
    188c:	cf 90       	pop	r12
    188e:	bf 90       	pop	r11
    1890:	af 90       	pop	r10
    1892:	9f 90       	pop	r9
    1894:	8f 90       	pop	r8
    1896:	7f 90       	pop	r7
    1898:	6f 90       	pop	r6
    189a:	08 95       	ret

0000189c <xStreamBufferGenericCreate>:
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	ec 01       	movw	r28, r24
    18ac:	6b 01       	movw	r12, r22
    18ae:	41 30       	cpi	r20, 0x01	; 1
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <xStreamBufferGenericCreate+0x1a>
    18b2:	01 e0       	ldi	r16, 0x01	; 1
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <xStreamBufferGenericCreate+0x1c>
    18b6:	00 e0       	ldi	r16, 0x00	; 0
    18b8:	c1 14       	cp	r12, r1
    18ba:	d1 04       	cpc	r13, r1
    18bc:	19 f4       	brne	.+6      	; 0x18c4 <xStreamBufferGenericCreate+0x28>
    18be:	cc 24       	eor	r12, r12
    18c0:	c3 94       	inc	r12
    18c2:	d1 2c       	mov	r13, r1
    18c4:	ce 01       	movw	r24, r28
    18c6:	40 96       	adiw	r24, 0x10	; 16
    18c8:	c8 17       	cp	r28, r24
    18ca:	d9 07       	cpc	r29, r25
    18cc:	20 f4       	brcc	.+8      	; 0x18d6 <xStreamBufferGenericCreate+0x3a>
    18ce:	21 96       	adiw	r28, 0x01	; 1
    18d0:	8f d8       	rcall	.-3810   	; 0x9f0 <pvPortMalloc>
    18d2:	7c 01       	movw	r14, r24
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <xStreamBufferGenericCreate+0x3e>
    18d6:	e1 2c       	mov	r14, r1
    18d8:	f1 2c       	mov	r15, r1
    18da:	e1 14       	cp	r14, r1
    18dc:	f1 04       	cpc	r15, r1
    18de:	39 f0       	breq	.+14     	; 0x18ee <xStreamBufferGenericCreate+0x52>
    18e0:	96 01       	movw	r18, r12
    18e2:	ae 01       	movw	r20, r28
    18e4:	b7 01       	movw	r22, r14
    18e6:	61 5f       	subi	r22, 0xF1	; 241
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	c7 01       	movw	r24, r14
    18ec:	a7 de       	rcall	.-690    	; 0x163c <prvInitialiseNewStreamBuffer>
    18ee:	c7 01       	movw	r24, r14
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	08 95       	ret

00001900 <xStreamBufferReset>:
    1900:	0f 93       	push	r16
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	0f 92       	push	r0
    1908:	fc 01       	movw	r30, r24
    190a:	20 85       	ldd	r18, Z+8	; 0x08
    190c:	31 85       	ldd	r19, Z+9	; 0x09
    190e:	23 2b       	or	r18, r19
    1910:	71 f4       	brne	.+28     	; 0x192e <xStreamBufferReset+0x2e>
    1912:	22 85       	ldd	r18, Z+10	; 0x0a
    1914:	33 85       	ldd	r19, Z+11	; 0x0b
    1916:	23 2b       	or	r18, r19
    1918:	61 f4       	brne	.+24     	; 0x1932 <xStreamBufferReset+0x32>
    191a:	26 81       	ldd	r18, Z+6	; 0x06
    191c:	37 81       	ldd	r19, Z+7	; 0x07
    191e:	44 81       	ldd	r20, Z+4	; 0x04
    1920:	55 81       	ldd	r21, Z+5	; 0x05
    1922:	64 85       	ldd	r22, Z+12	; 0x0c
    1924:	75 85       	ldd	r23, Z+13	; 0x0d
    1926:	06 85       	ldd	r16, Z+14	; 0x0e
    1928:	89 de       	rcall	.-750    	; 0x163c <prvInitialiseNewStreamBuffer>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <xStreamBufferReset+0x34>
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <xStreamBufferReset+0x34>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <xStreamBufferSpacesAvailable>:
    193c:	fc 01       	movw	r30, r24
    193e:	24 81       	ldd	r18, Z+4	; 0x04
    1940:	35 81       	ldd	r19, Z+5	; 0x05
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	82 0f       	add	r24, r18
    1948:	93 1f       	adc	r25, r19
    194a:	42 81       	ldd	r20, Z+2	; 0x02
    194c:	53 81       	ldd	r21, Z+3	; 0x03
    194e:	84 1b       	sub	r24, r20
    1950:	95 0b       	sbc	r25, r21
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	82 17       	cp	r24, r18
    1956:	93 07       	cpc	r25, r19
    1958:	10 f0       	brcs	.+4      	; 0x195e <xStreamBufferSpacesAvailable+0x22>
    195a:	82 1b       	sub	r24, r18
    195c:	93 0b       	sbc	r25, r19
    195e:	08 95       	ret

00001960 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1960:	2f 92       	push	r2
    1962:	3f 92       	push	r3
    1964:	4f 92       	push	r4
    1966:	5f 92       	push	r5
    1968:	6f 92       	push	r6
    196a:	7f 92       	push	r7
    196c:	8f 92       	push	r8
    196e:	9f 92       	push	r9
    1970:	af 92       	push	r10
    1972:	bf 92       	push	r11
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	2b 97       	sbiw	r28, 0x0b	; 11
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	4c 01       	movw	r8, r24
    1996:	7b 87       	std	Y+11, r23	; 0x0b
    1998:	6a 87       	std	Y+10, r22	; 0x0a
    199a:	1a 01       	movw	r2, r20
    199c:	0e 83       	std	Y+6, r16	; 0x06
    199e:	1f 83       	std	Y+7, r17	; 0x07
    19a0:	28 87       	std	Y+8, r18	; 0x08
    19a2:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    19a4:	fc 01       	movw	r30, r24
    19a6:	84 81       	ldd	r24, Z+4	; 0x04
    19a8:	95 81       	ldd	r25, Z+5	; 0x05
    19aa:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    19ac:	26 85       	ldd	r18, Z+14	; 0x0e
    19ae:	20 ff       	sbrs	r18, 0
    19b0:	0c c0       	rjmp	.+24     	; 0x19ca <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    19b2:	2a 01       	movw	r4, r20
    19b4:	f2 e0       	ldi	r31, 0x02	; 2
    19b6:	4f 0e       	add	r4, r31
    19b8:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    19ba:	84 15       	cp	r24, r4
    19bc:	95 05       	cpc	r25, r5
    19be:	58 f4       	brcc	.+22     	; 0x19d6 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    19c0:	1e 82       	std	Y+6, r1	; 0x06
    19c2:	1f 82       	std	Y+7, r1	; 0x07
    19c4:	18 86       	std	Y+8, r1	; 0x08
    19c6:	19 86       	std	Y+9, r1	; 0x09
    19c8:	06 c0       	rjmp	.+12     	; 0x19d6 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    19ca:	84 17       	cp	r24, r20
    19cc:	95 07       	cpc	r25, r21
    19ce:	10 f0       	brcs	.+4      	; 0x19d4 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    19d0:	2a 01       	movw	r4, r20
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    19d4:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19d6:	8e 81       	ldd	r24, Y+6	; 0x06
    19d8:	9f 81       	ldd	r25, Y+7	; 0x07
    19da:	a8 85       	ldd	r26, Y+8	; 0x08
    19dc:	b9 85       	ldd	r27, Y+9	; 0x09
    19de:	89 2b       	or	r24, r25
    19e0:	8a 2b       	or	r24, r26
    19e2:	8b 2b       	or	r24, r27
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <xStreamBufferSend+0x88>
    19e6:	38 c0       	rjmp	.+112    	; 0x1a58 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    19e8:	ce 01       	movw	r24, r28
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    19f6:	c4 01       	movw	r24, r8
    19f8:	a1 df       	rcall	.-190    	; 0x193c <xStreamBufferSpacesAvailable>
    19fa:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    19fc:	84 15       	cp	r24, r4
    19fe:	95 05       	cpc	r25, r5
    1a00:	40 f5       	brcc	.+80     	; 0x1a52 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 af 1a 	call	0x355e	; 0x355e <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1a0c:	0e 94 56 16 	call	0x2cac	; 0x2cac <xTaskGetCurrentTaskHandle>
    1a10:	f4 01       	movw	r30, r8
    1a12:	93 87       	std	Z+11, r25	; 0x0b
    1a14:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a1a:	ae 80       	ldd	r10, Y+6	; 0x06
    1a1c:	bf 80       	ldd	r11, Y+7	; 0x07
    1a1e:	c8 84       	ldd	r12, Y+8	; 0x08
    1a20:	d9 84       	ldd	r13, Y+9	; 0x09
    1a22:	e1 2c       	mov	r14, r1
    1a24:	f1 2c       	mov	r15, r1
    1a26:	00 e0       	ldi	r16, 0x00	; 0
    1a28:	10 e0       	ldi	r17, 0x00	; 0
    1a2a:	98 01       	movw	r18, r16
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	ba 01       	movw	r22, r20
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1a38:	f4 01       	movw	r30, r8
    1a3a:	13 86       	std	Z+11, r1	; 0x0b
    1a3c:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1a3e:	be 01       	movw	r22, r28
    1a40:	6a 5f       	subi	r22, 0xFA	; 250
    1a42:	7f 4f       	sbci	r23, 0xFF	; 255
    1a44:	ce 01       	movw	r24, r28
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <xTaskCheckForTimeOut>
    1a4c:	88 23       	and	r24, r24
    1a4e:	81 f2       	breq	.-96     	; 0x19f0 <xStreamBufferSend+0x90>
    1a50:	05 c0       	rjmp	.+10     	; 0x1a5c <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1a52:	0f 90       	pop	r0
    1a54:	0f be       	out	0x3f, r0	; 63
                    break;
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1a58:	61 2c       	mov	r6, r1
    1a5a:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1a5c:	61 14       	cp	r6, r1
    1a5e:	71 04       	cpc	r7, r1
    1a60:	19 f4       	brne	.+6      	; 0x1a68 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a62:	c4 01       	movw	r24, r8
    1a64:	6b df       	rcall	.-298    	; 0x193c <xStreamBufferSpacesAvailable>
    1a66:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a68:	82 01       	movw	r16, r4
    1a6a:	93 01       	movw	r18, r6
    1a6c:	a1 01       	movw	r20, r2
    1a6e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a70:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a72:	c4 01       	movw	r24, r8
    1a74:	3c de       	rcall	.-904    	; 0x16ee <prvWriteMessageToBuffer>
    1a76:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1a78:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a7a:	e9 f0       	breq	.+58     	; 0x1ab6 <xStreamBufferSend+0x156>
    1a7c:	c4 01       	movw	r24, r8
    1a7e:	cb dd       	rcall	.-1130   	; 0x1616 <prvBytesInBuffer>
    1a80:	f4 01       	movw	r30, r8
    1a82:	26 81       	ldd	r18, Z+6	; 0x06
    1a84:	37 81       	ldd	r19, Z+7	; 0x07
    1a86:	82 17       	cp	r24, r18
    1a88:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1a8a:	a8 f0       	brcs	.+42     	; 0x1ab6 <xStreamBufferSend+0x156>
    1a8c:	91 d3       	rcall	.+1826   	; 0x21b0 <vTaskSuspendAll>
    1a8e:	f4 01       	movw	r30, r8
    1a90:	80 85       	ldd	r24, Z+8	; 0x08
    1a92:	91 85       	ldd	r25, Z+9	; 0x09
    1a94:	89 2b       	or	r24, r25
    1a96:	71 f0       	breq	.+28     	; 0x1ab4 <xStreamBufferSend+0x154>
    1a98:	80 85       	ldd	r24, Z+8	; 0x08
    1a9a:	91 85       	ldd	r25, Z+9	; 0x09
    1a9c:	e1 2c       	mov	r14, r1
    1a9e:	f1 2c       	mov	r15, r1
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	a9 01       	movw	r20, r18
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	0e 94 96 18 	call	0x312c	; 0x312c <xTaskGenericNotify>
    1aae:	f4 01       	movw	r30, r8
    1ab0:	11 86       	std	Z+9, r1	; 0x09
    1ab2:	10 86       	std	Z+8, r1	; 0x08
    1ab4:	bd d4       	rcall	.+2426   	; 0x2430 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1ab6:	c6 01       	movw	r24, r12
    1ab8:	2b 96       	adiw	r28, 0x0b	; 11
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1aea:	af 92       	push	r10
    1aec:	bf 92       	push	r11
    1aee:	cf 92       	push	r12
    1af0:	df 92       	push	r13
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	ec 01       	movw	r28, r24
    1b00:	7b 01       	movw	r14, r22
    1b02:	5a 01       	movw	r10, r20
    1b04:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b08:	80 ff       	sbrs	r24, 0
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b0c:	8a 01       	movw	r16, r20
    1b0e:	0e 5f       	subi	r16, 0xFE	; 254
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1b14:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b16:	ce 01       	movw	r24, r28
    1b18:	11 df       	rcall	.-478    	; 0x193c <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1b1a:	9c 01       	movw	r18, r24
    1b1c:	a5 01       	movw	r20, r10
    1b1e:	b7 01       	movw	r22, r14
    1b20:	ce 01       	movw	r24, r28
    1b22:	e5 dd       	rcall	.-1078   	; 0x16ee <prvWriteMessageToBuffer>
    1b24:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1b26:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b28:	c1 f0       	breq	.+48     	; 0x1b5a <xStreamBufferSendFromISR+0x70>
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	74 dd       	rcall	.-1304   	; 0x1616 <prvBytesInBuffer>
    1b2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b30:	3f 81       	ldd	r19, Y+7	; 0x07
    1b32:	82 17       	cp	r24, r18
    1b34:	93 07       	cpc	r25, r19
    1b36:	88 f0       	brcs	.+34     	; 0x1b5a <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1b38:	88 85       	ldd	r24, Y+8	; 0x08
    1b3a:	99 85       	ldd	r25, Y+9	; 0x09
    1b3c:	89 2b       	or	r24, r25
    1b3e:	69 f0       	breq	.+26     	; 0x1b5a <xStreamBufferSendFromISR+0x70>
    1b40:	88 85       	ldd	r24, Y+8	; 0x08
    1b42:	99 85       	ldd	r25, Y+9	; 0x09
    1b44:	e1 2c       	mov	r14, r1
    1b46:	f1 2c       	mov	r15, r1
    1b48:	00 e0       	ldi	r16, 0x00	; 0
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	a9 01       	movw	r20, r18
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	0e 94 8d 19 	call	0x331a	; 0x331a <xTaskGenericNotifyFromISR>
    1b56:	19 86       	std	Y+9, r1	; 0x09
    1b58:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1b5a:	c5 01       	movw	r24, r10
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	08 95       	ret

00001b72 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1b72:	4f 92       	push	r4
    1b74:	5f 92       	push	r5
    1b76:	6f 92       	push	r6
    1b78:	7f 92       	push	r7
    1b7a:	8f 92       	push	r8
    1b7c:	9f 92       	push	r9
    1b7e:	af 92       	push	r10
    1b80:	bf 92       	push	r11
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
    1b94:	2b 01       	movw	r4, r22
    1b96:	3a 01       	movw	r6, r20
    1b98:	58 01       	movw	r10, r16
    1b9a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b9e:	80 ff       	sbrs	r24, 0
    1ba0:	05 c0       	rjmp	.+10     	; 0x1bac <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1ba2:	68 94       	set
    1ba4:	88 24       	eor	r8, r8
    1ba6:	81 f8       	bld	r8, 1
    1ba8:	91 2c       	mov	r9, r1
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1bac:	81 2c       	mov	r8, r1
    1bae:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1bb0:	a1 14       	cp	r10, r1
    1bb2:	b1 04       	cpc	r11, r1
    1bb4:	c1 04       	cpc	r12, r1
    1bb6:	d1 04       	cpc	r13, r1
    1bb8:	41 f1       	breq	.+80     	; 0x1c0a <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	29 dd       	rcall	.-1454   	; 0x1616 <prvBytesInBuffer>
    1bc4:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bc6:	88 16       	cp	r8, r24
    1bc8:	99 06       	cpc	r9, r25
    1bca:	48 f0       	brcs	.+18     	; 0x1bde <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 af 1a 	call	0x355e	; 0x355e <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1bd6:	0e 94 56 16 	call	0x2cac	; 0x2cac <xTaskGetCurrentTaskHandle>
    1bda:	99 87       	std	Y+9, r25	; 0x09
    1bdc:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1bde:	0f 90       	pop	r0
    1be0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1be2:	8e 14       	cp	r8, r14
    1be4:	9f 04       	cpc	r9, r15
    1be6:	a0 f0       	brcs	.+40     	; 0x1c10 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1be8:	e1 2c       	mov	r14, r1
    1bea:	f1 2c       	mov	r15, r1
    1bec:	00 e0       	ldi	r16, 0x00	; 0
    1bee:	10 e0       	ldi	r17, 0x00	; 0
    1bf0:	98 01       	movw	r18, r16
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	ba 01       	movw	r22, r20
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1bfe:	19 86       	std	Y+9, r1	; 0x09
    1c00:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c02:	ce 01       	movw	r24, r28
    1c04:	08 dd       	rcall	.-1520   	; 0x1616 <prvBytesInBuffer>
    1c06:	7c 01       	movw	r14, r24
    1c08:	03 c0       	rjmp	.+6      	; 0x1c10 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	04 dd       	rcall	.-1528   	; 0x1616 <prvBytesInBuffer>
    1c0e:	7c 01       	movw	r14, r24
    1c10:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1c12:	9f 04       	cpc	r9, r15
    1c14:	e8 f4       	brcc	.+58     	; 0x1c50 <xStreamBufferReceive+0xde>
    1c16:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1c18:	97 01       	movw	r18, r14
    1c1a:	a3 01       	movw	r20, r6
    1c1c:	b2 01       	movw	r22, r4
    1c1e:	ce 01       	movw	r24, r28
    1c20:	f8 dd       	rcall	.-1040   	; 0x1812 <prvReadMessageFromBuffer>
    1c22:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c24:	89 2b       	or	r24, r25
    1c26:	b1 f0       	breq	.+44     	; 0x1c54 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c28:	c3 d2       	rcall	.+1414   	; 0x21b0 <vTaskSuspendAll>
    1c2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c2e:	89 2b       	or	r24, r25
    1c30:	69 f0       	breq	.+26     	; 0x1c4c <xStreamBufferReceive+0xda>
    1c32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c36:	e1 2c       	mov	r14, r1
    1c38:	f1 2c       	mov	r15, r1
    1c3a:	00 e0       	ldi	r16, 0x00	; 0
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	a9 01       	movw	r20, r18
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	0e 94 96 18 	call	0x312c	; 0x312c <xTaskGenericNotify>
    1c48:	1b 86       	std	Y+11, r1	; 0x0b
    1c4a:	1a 86       	std	Y+10, r1	; 0x0a
    1c4c:	f1 d3       	rcall	.+2018   	; 0x2430 <xTaskResumeAll>
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <xStreamBufferReceive+0xe2>
    1c50:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1c52:	d1 2c       	mov	r13, r1
    1c54:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	bf 90       	pop	r11
    1c68:	af 90       	pop	r10
    1c6a:	9f 90       	pop	r9
    1c6c:	8f 90       	pop	r8
    1c6e:	7f 90       	pop	r7
    1c70:	6f 90       	pop	r6
    1c72:	5f 90       	pop	r5
    1c74:	4f 90       	pop	r4
    1c76:	08 95       	ret

00001c78 <prvResetNextTaskUnblockTime>:
    1c78:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxDelayedTaskList>
    1c7c:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxDelayedTaskList+0x1>
    1c80:	80 81       	ld	r24, Z
    1c82:	81 11       	cpse	r24, r1
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <prvResetNextTaskUnblockTime+0x26>
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	9f ef       	ldi	r25, 0xFF	; 255
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <xNextTaskUnblockTime>
    1c90:	90 93 40 19 	sts	0x1940, r25	; 0x801940 <xNextTaskUnblockTime+0x1>
    1c94:	a0 93 41 19 	sts	0x1941, r26	; 0x801941 <xNextTaskUnblockTime+0x2>
    1c98:	b0 93 42 19 	sts	0x1942, r27	; 0x801942 <xNextTaskUnblockTime+0x3>
    1c9c:	08 95       	ret
    1c9e:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxDelayedTaskList>
    1ca2:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxDelayedTaskList+0x1>
    1ca6:	07 80       	ldd	r0, Z+7	; 0x07
    1ca8:	f0 85       	ldd	r31, Z+8	; 0x08
    1caa:	e0 2d       	mov	r30, r0
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	a2 81       	ldd	r26, Z+2	; 0x02
    1cb2:	b3 81       	ldd	r27, Z+3	; 0x03
    1cb4:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <xNextTaskUnblockTime>
    1cb8:	90 93 40 19 	sts	0x1940, r25	; 0x801940 <xNextTaskUnblockTime+0x1>
    1cbc:	a0 93 41 19 	sts	0x1941, r26	; 0x801941 <xNextTaskUnblockTime+0x2>
    1cc0:	b0 93 42 19 	sts	0x1942, r27	; 0x801942 <xNextTaskUnblockTime+0x3>
    1cc4:	08 95       	ret

00001cc6 <prvDeleteTCB>:
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	ec 01       	movw	r28, r24
    1ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd0:	0e 94 a1 05 	call	0xb42	; 0xb42 <vPortFree>
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	0e 94 a1 05 	call	0xb42	; 0xb42 <vPortFree>
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	08 95       	ret

00001ce0 <prvInitialiseNewTask>:
    1ce0:	4f 92       	push	r4
    1ce2:	5f 92       	push	r5
    1ce4:	6f 92       	push	r6
    1ce6:	7f 92       	push	r7
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	2c 01       	movw	r4, r24
    1d00:	5b 01       	movw	r10, r22
    1d02:	4a 01       	movw	r8, r20
    1d04:	39 01       	movw	r6, r18
    1d06:	e6 01       	movw	r28, r12
    1d08:	65 ea       	ldi	r22, 0xA5	; 165
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d10:	0e 94 78 36 	call	0x6cf0	; 0x6cf0 <memset>
    1d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	82 1a       	sub	r8, r18
    1d1c:	91 08       	sbc	r9, r1
    1d1e:	88 0e       	add	r8, r24
    1d20:	99 1e       	adc	r9, r25
    1d22:	a1 14       	cp	r10, r1
    1d24:	b1 04       	cpc	r11, r1
    1d26:	89 f4       	brne	.+34     	; 0x1d4a <prvInitialiseNewTask+0x6a>
    1d28:	15 c0       	rjmp	.+42     	; 0x1d54 <prvInitialiseNewTask+0x74>
    1d2a:	82 2f       	mov	r24, r18
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	f5 01       	movw	r30, r10
    1d30:	e8 0f       	add	r30, r24
    1d32:	f9 1f       	adc	r31, r25
    1d34:	30 81       	ld	r19, Z
    1d36:	de 01       	movw	r26, r28
    1d38:	a8 0f       	add	r26, r24
    1d3a:	b9 1f       	adc	r27, r25
    1d3c:	5d 96       	adiw	r26, 0x1d	; 29
    1d3e:	3c 93       	st	X, r19
    1d40:	80 81       	ld	r24, Z
    1d42:	88 23       	and	r24, r24
    1d44:	29 f0       	breq	.+10     	; 0x1d50 <prvInitialiseNewTask+0x70>
    1d46:	2f 5f       	subi	r18, 0xFF	; 255
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <prvInitialiseNewTask+0x6c>
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	20 31       	cpi	r18, 0x10	; 16
    1d4e:	68 f3       	brcs	.-38     	; 0x1d2a <prvInitialiseNewTask+0x4a>
    1d50:	1c a6       	std	Y+44, r1	; 0x2c
    1d52:	01 c0       	rjmp	.+2      	; 0x1d56 <prvInitialiseNewTask+0x76>
    1d54:	1d 8e       	std	Y+29, r1	; 0x1d
    1d56:	0a 30       	cpi	r16, 0x0A	; 10
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <prvInitialiseNewTask+0x7c>
    1d5a:	09 e0       	ldi	r16, 0x09	; 9
    1d5c:	0a 8f       	std	Y+26, r16	; 0x1a
    1d5e:	0d a7       	std	Y+45, r16	; 0x2d
    1d60:	1e a6       	std	Y+46, r1	; 0x2e
    1d62:	ce 01       	movw	r24, r28
    1d64:	02 96       	adiw	r24, 0x02	; 2
    1d66:	0e 94 ef 05 	call	0xbde	; 0xbde <vListInitialiseItem>
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	0e 96       	adiw	r24, 0x0e	; 14
    1d6e:	0e 94 ef 05 	call	0xbde	; 0xbde <vListInitialiseItem>
    1d72:	db 87       	std	Y+11, r29	; 0x0b
    1d74:	ca 87       	std	Y+10, r28	; 0x0a
    1d76:	8a e0       	ldi	r24, 0x0A	; 10
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a0 e0       	ldi	r26, 0x00	; 0
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	80 1b       	sub	r24, r16
    1d80:	91 09       	sbc	r25, r1
    1d82:	a1 09       	sbc	r26, r1
    1d84:	b1 09       	sbc	r27, r1
    1d86:	8e 87       	std	Y+14, r24	; 0x0e
    1d88:	9f 87       	std	Y+15, r25	; 0x0f
    1d8a:	a8 8b       	std	Y+16, r26	; 0x10
    1d8c:	b9 8b       	std	Y+17, r27	; 0x11
    1d8e:	df 8b       	std	Y+23, r29	; 0x17
    1d90:	ce 8b       	std	Y+22, r28	; 0x16
    1d92:	84 e0       	ldi	r24, 0x04	; 4
    1d94:	fe 01       	movw	r30, r28
    1d96:	bf 96       	adiw	r30, 0x2f	; 47
    1d98:	df 01       	movw	r26, r30
    1d9a:	1d 92       	st	X+, r1
    1d9c:	8a 95       	dec	r24
    1d9e:	e9 f7       	brne	.-6      	; 0x1d9a <prvInitialiseNewTask+0xba>
    1da0:	1b aa       	std	Y+51, r1	; 0x33
    1da2:	a3 01       	movw	r20, r6
    1da4:	b2 01       	movw	r22, r4
    1da6:	c4 01       	movw	r24, r8
    1da8:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pxPortInitialiseStack>
    1dac:	99 83       	std	Y+1, r25	; 0x01
    1dae:	88 83       	st	Y, r24
    1db0:	e1 14       	cp	r14, r1
    1db2:	f1 04       	cpc	r15, r1
    1db4:	19 f0       	breq	.+6      	; 0x1dbc <prvInitialiseNewTask+0xdc>
    1db6:	f7 01       	movw	r30, r14
    1db8:	d1 83       	std	Z+1, r29	; 0x01
    1dba:	c0 83       	st	Z, r28
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	9f 90       	pop	r9
    1dd0:	8f 90       	pop	r8
    1dd2:	7f 90       	pop	r7
    1dd4:	6f 90       	pop	r6
    1dd6:	5f 90       	pop	r5
    1dd8:	4f 90       	pop	r4
    1dda:	08 95       	ret

00001ddc <prvInitialiseTaskLists>:
    1ddc:	cf 93       	push	r28
    1dde:	c0 e0       	ldi	r28, 0x00	; 0
    1de0:	09 c0       	rjmp	.+18     	; 0x1df4 <prvInitialiseTaskLists+0x18>
    1de2:	2b e0       	ldi	r18, 0x0B	; 11
    1de4:	c2 9f       	mul	r28, r18
    1de6:	c0 01       	movw	r24, r0
    1de8:	11 24       	eor	r1, r1
    1dea:	83 57       	subi	r24, 0x73	; 115
    1dec:	96 4e       	sbci	r25, 0xE6	; 230
    1dee:	0e 94 de 05 	call	0xbbc	; 0xbbc <vListInitialise>
    1df2:	cf 5f       	subi	r28, 0xFF	; 255
    1df4:	ca 30       	cpi	r28, 0x0A	; 10
    1df6:	a8 f3       	brcs	.-22     	; 0x1de2 <prvInitialiseTaskLists+0x6>
    1df8:	82 e8       	ldi	r24, 0x82	; 130
    1dfa:	99 e1       	ldi	r25, 0x19	; 25
    1dfc:	0e 94 de 05 	call	0xbbc	; 0xbbc <vListInitialise>
    1e00:	87 e7       	ldi	r24, 0x77	; 119
    1e02:	99 e1       	ldi	r25, 0x19	; 25
    1e04:	0e 94 de 05 	call	0xbbc	; 0xbbc <vListInitialise>
    1e08:	88 e6       	ldi	r24, 0x68	; 104
    1e0a:	99 e1       	ldi	r25, 0x19	; 25
    1e0c:	0e 94 de 05 	call	0xbbc	; 0xbbc <vListInitialise>
    1e10:	8d e5       	ldi	r24, 0x5D	; 93
    1e12:	99 e1       	ldi	r25, 0x19	; 25
    1e14:	0e 94 de 05 	call	0xbbc	; 0xbbc <vListInitialise>
    1e18:	81 e5       	ldi	r24, 0x51	; 81
    1e1a:	99 e1       	ldi	r25, 0x19	; 25
    1e1c:	0e 94 de 05 	call	0xbbc	; 0xbbc <vListInitialise>
    1e20:	82 e8       	ldi	r24, 0x82	; 130
    1e22:	99 e1       	ldi	r25, 0x19	; 25
    1e24:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <pxDelayedTaskList+0x1>
    1e28:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <pxDelayedTaskList>
    1e2c:	87 e7       	ldi	r24, 0x77	; 119
    1e2e:	99 e1       	ldi	r25, 0x19	; 25
    1e30:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <pxOverflowDelayedTaskList+0x1>
    1e34:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <pxOverflowDelayedTaskList>
    1e38:	cf 91       	pop	r28
    1e3a:	08 95       	ret

00001e3c <prvAddNewTaskToReadyList>:
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	ec 01       	movw	r28, r24
    1e42:	0f b6       	in	r0, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	0f 92       	push	r0
    1e48:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <uxCurrentNumberOfTasks>
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	80 93 50 19 	sts	0x1950, r24	; 0x801950 <uxCurrentNumberOfTasks>
    1e52:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    1e56:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    1e5a:	89 2b       	or	r24, r25
    1e5c:	51 f4       	brne	.+20     	; 0x1e72 <prvAddNewTaskToReadyList+0x36>
    1e5e:	d0 93 fc 19 	sts	0x19FC, r29	; 0x8019fc <pxCurrentTCB+0x1>
    1e62:	c0 93 fb 19 	sts	0x19FB, r28	; 0x8019fb <pxCurrentTCB>
    1e66:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <uxCurrentNumberOfTasks>
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	91 f4       	brne	.+36     	; 0x1e92 <prvAddNewTaskToReadyList+0x56>
    1e6e:	b6 df       	rcall	.-148    	; 0x1ddc <prvInitialiseTaskLists>
    1e70:	10 c0       	rjmp	.+32     	; 0x1e92 <prvAddNewTaskToReadyList+0x56>
    1e72:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <xSchedulerRunning>
    1e76:	81 11       	cpse	r24, r1
    1e78:	0c c0       	rjmp	.+24     	; 0x1e92 <prvAddNewTaskToReadyList+0x56>
    1e7a:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    1e7e:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    1e82:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e86:	89 17       	cp	r24, r25
    1e88:	20 f0       	brcs	.+8      	; 0x1e92 <prvAddNewTaskToReadyList+0x56>
    1e8a:	d0 93 fc 19 	sts	0x19FC, r29	; 0x8019fc <pxCurrentTCB+0x1>
    1e8e:	c0 93 fb 19 	sts	0x19FB, r28	; 0x8019fb <pxCurrentTCB>
    1e92:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <uxTaskNumber>
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <uxTaskNumber>
    1e9c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e9e:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uxTopReadyPriority>
    1ea2:	8e 17       	cp	r24, r30
    1ea4:	10 f4       	brcc	.+4      	; 0x1eaa <prvAddNewTaskToReadyList+0x6e>
    1ea6:	e0 93 4b 19 	sts	0x194B, r30	; 0x80194b <uxTopReadyPriority>
    1eaa:	8b e0       	ldi	r24, 0x0B	; 11
    1eac:	8e 9f       	mul	r24, r30
    1eae:	f0 01       	movw	r30, r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	e3 57       	subi	r30, 0x73	; 115
    1eb4:	f6 4e       	sbci	r31, 0xE6	; 230
    1eb6:	01 80       	ldd	r0, Z+1	; 0x01
    1eb8:	f2 81       	ldd	r31, Z+2	; 0x02
    1eba:	e0 2d       	mov	r30, r0
    1ebc:	ff 83       	std	Y+7, r31	; 0x07
    1ebe:	ee 83       	std	Y+6, r30	; 0x06
    1ec0:	26 81       	ldd	r18, Z+6	; 0x06
    1ec2:	37 81       	ldd	r19, Z+7	; 0x07
    1ec4:	39 87       	std	Y+9, r19	; 0x09
    1ec6:	28 87       	std	Y+8, r18	; 0x08
    1ec8:	a6 81       	ldd	r26, Z+6	; 0x06
    1eca:	b7 81       	ldd	r27, Z+7	; 0x07
    1ecc:	9e 01       	movw	r18, r28
    1ece:	2e 5f       	subi	r18, 0xFE	; 254
    1ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed2:	15 96       	adiw	r26, 0x05	; 5
    1ed4:	3c 93       	st	X, r19
    1ed6:	2e 93       	st	-X, r18
    1ed8:	14 97       	sbiw	r26, 0x04	; 4
    1eda:	37 83       	std	Z+7, r19	; 0x07
    1edc:	26 83       	std	Z+6, r18	; 0x06
    1ede:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ee0:	8e 9f       	mul	r24, r30
    1ee2:	f0 01       	movw	r30, r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	e3 57       	subi	r30, 0x73	; 115
    1ee8:	f6 4e       	sbci	r31, 0xE6	; 230
    1eea:	fd 87       	std	Y+13, r31	; 0x0d
    1eec:	ec 87       	std	Y+12, r30	; 0x0c
    1eee:	80 81       	ld	r24, Z
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
    1ef2:	80 83       	st	Z, r24
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <xSchedulerRunning>
    1efc:	88 23       	and	r24, r24
    1efe:	51 f0       	breq	.+20     	; 0x1f14 <prvAddNewTaskToReadyList+0xd8>
    1f00:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    1f04:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    1f08:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f0c:	98 17       	cp	r25, r24
    1f0e:	10 f4       	brcc	.+4      	; 0x1f14 <prvAddNewTaskToReadyList+0xd8>
    1f10:	0e 94 ac 06 	call	0xd58	; 0xd58 <vPortYield>
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <prvCheckTasksWaitingTermination>:
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	1b c0       	rjmp	.+54     	; 0x1f56 <prvCheckTasksWaitingTermination+0x3c>
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	0f 92       	push	r0
    1f26:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <xTasksWaitingTermination+0x7>
    1f2a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <xTasksWaitingTermination+0x8>
    1f2e:	c0 85       	ldd	r28, Z+8	; 0x08
    1f30:	d1 85       	ldd	r29, Z+9	; 0x09
    1f32:	ce 01       	movw	r24, r28
    1f34:	02 96       	adiw	r24, 0x02	; 2
    1f36:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
    1f3a:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <uxCurrentNumberOfTasks>
    1f3e:	81 50       	subi	r24, 0x01	; 1
    1f40:	80 93 50 19 	sts	0x1950, r24	; 0x801950 <uxCurrentNumberOfTasks>
    1f44:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <uxDeletedTasksWaitingCleanUp>
    1f48:	81 50       	subi	r24, 0x01	; 1
    1f4a:	80 93 5c 19 	sts	0x195C, r24	; 0x80195c <uxDeletedTasksWaitingCleanUp>
    1f4e:	0f 90       	pop	r0
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	ce 01       	movw	r24, r28
    1f54:	b8 de       	rcall	.-656    	; 0x1cc6 <prvDeleteTCB>
    1f56:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <uxDeletedTasksWaitingCleanUp>
    1f5a:	81 11       	cpse	r24, r1
    1f5c:	e1 cf       	rjmp	.-62     	; 0x1f20 <prvCheckTasksWaitingTermination+0x6>
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	08 95       	ret

00001f64 <prvAddCurrentTaskToDelayedList>:
    1f64:	8f 92       	push	r8
    1f66:	9f 92       	push	r9
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	6b 01       	movw	r12, r22
    1f7a:	7c 01       	movw	r14, r24
    1f7c:	c4 2f       	mov	r28, r20
    1f7e:	80 90 4c 19 	lds	r8, 0x194C	; 0x80194c <xTickCount>
    1f82:	90 90 4d 19 	lds	r9, 0x194D	; 0x80194d <xTickCount+0x1>
    1f86:	a0 90 4e 19 	lds	r10, 0x194E	; 0x80194e <xTickCount+0x2>
    1f8a:	b0 90 4f 19 	lds	r11, 0x194F	; 0x80194f <xTickCount+0x3>
    1f8e:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    1f92:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    1f96:	02 96       	adiw	r24, 0x02	; 2
    1f98:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
    1f9c:	8f ef       	ldi	r24, 0xFF	; 255
    1f9e:	c8 16       	cp	r12, r24
    1fa0:	d8 06       	cpc	r13, r24
    1fa2:	e8 06       	cpc	r14, r24
    1fa4:	f8 06       	cpc	r15, r24
    1fa6:	b1 f5       	brne	.+108    	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    1fa8:	cc 23       	and	r28, r28
    1faa:	a1 f1       	breq	.+104    	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    1fac:	e1 e5       	ldi	r30, 0x51	; 81
    1fae:	f9 e1       	ldi	r31, 0x19	; 25
    1fb0:	a1 81       	ldd	r26, Z+1	; 0x01
    1fb2:	b2 81       	ldd	r27, Z+2	; 0x02
    1fb4:	c0 91 fb 19 	lds	r28, 0x19FB	; 0x8019fb <pxCurrentTCB>
    1fb8:	d0 91 fc 19 	lds	r29, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    1fbc:	bf 83       	std	Y+7, r27	; 0x07
    1fbe:	ae 83       	std	Y+6, r26	; 0x06
    1fc0:	c0 91 fb 19 	lds	r28, 0x19FB	; 0x8019fb <pxCurrentTCB>
    1fc4:	d0 91 fc 19 	lds	r29, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    1fc8:	16 96       	adiw	r26, 0x06	; 6
    1fca:	8d 91       	ld	r24, X+
    1fcc:	9c 91       	ld	r25, X
    1fce:	17 97       	sbiw	r26, 0x07	; 7
    1fd0:	99 87       	std	Y+9, r25	; 0x09
    1fd2:	88 87       	std	Y+8, r24	; 0x08
    1fd4:	16 96       	adiw	r26, 0x06	; 6
    1fd6:	cd 91       	ld	r28, X+
    1fd8:	dc 91       	ld	r29, X
    1fda:	17 97       	sbiw	r26, 0x07	; 7
    1fdc:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    1fe0:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    1fe4:	02 96       	adiw	r24, 0x02	; 2
    1fe6:	9d 83       	std	Y+5, r25	; 0x05
    1fe8:	8c 83       	std	Y+4, r24	; 0x04
    1fea:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    1fee:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    1ff2:	02 96       	adiw	r24, 0x02	; 2
    1ff4:	17 96       	adiw	r26, 0x07	; 7
    1ff6:	9c 93       	st	X, r25
    1ff8:	8e 93       	st	-X, r24
    1ffa:	16 97       	sbiw	r26, 0x06	; 6
    1ffc:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2000:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2004:	1d 96       	adiw	r26, 0x0d	; 13
    2006:	fc 93       	st	X, r31
    2008:	ee 93       	st	-X, r30
    200a:	1c 97       	sbiw	r26, 0x0c	; 12
    200c:	80 81       	ld	r24, Z
    200e:	8f 5f       	subi	r24, 0xFF	; 255
    2010:	80 83       	st	Z, r24
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    2014:	c8 0c       	add	r12, r8
    2016:	d9 1c       	adc	r13, r9
    2018:	ea 1c       	adc	r14, r10
    201a:	fb 1c       	adc	r15, r11
    201c:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2020:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2024:	c2 82       	std	Z+2, r12	; 0x02
    2026:	d3 82       	std	Z+3, r13	; 0x03
    2028:	e4 82       	std	Z+4, r14	; 0x04
    202a:	f5 82       	std	Z+5, r15	; 0x05
    202c:	c8 14       	cp	r12, r8
    202e:	d9 04       	cpc	r13, r9
    2030:	ea 04       	cpc	r14, r10
    2032:	fb 04       	cpc	r15, r11
    2034:	68 f4       	brcc	.+26     	; 0x2050 <__DATA_REGION_LENGTH__+0x50>
    2036:	60 91 fb 19 	lds	r22, 0x19FB	; 0x8019fb <pxCurrentTCB>
    203a:	70 91 fc 19 	lds	r23, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    203e:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <pxOverflowDelayedTaskList>
    2042:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <pxOverflowDelayedTaskList+0x1>
    2046:	6e 5f       	subi	r22, 0xFE	; 254
    2048:	7f 4f       	sbci	r23, 0xFF	; 255
    204a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <vListInsert>
    204e:	21 c0       	rjmp	.+66     	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    2050:	60 91 fb 19 	lds	r22, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2054:	70 91 fc 19 	lds	r23, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2058:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <pxDelayedTaskList>
    205c:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <pxDelayedTaskList+0x1>
    2060:	6e 5f       	subi	r22, 0xFE	; 254
    2062:	7f 4f       	sbci	r23, 0xFF	; 255
    2064:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <vListInsert>
    2068:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <xNextTaskUnblockTime>
    206c:	90 91 40 19 	lds	r25, 0x1940	; 0x801940 <xNextTaskUnblockTime+0x1>
    2070:	a0 91 41 19 	lds	r26, 0x1941	; 0x801941 <xNextTaskUnblockTime+0x2>
    2074:	b0 91 42 19 	lds	r27, 0x1942	; 0x801942 <xNextTaskUnblockTime+0x3>
    2078:	c8 16       	cp	r12, r24
    207a:	d9 06       	cpc	r13, r25
    207c:	ea 06       	cpc	r14, r26
    207e:	fb 06       	cpc	r15, r27
    2080:	40 f4       	brcc	.+16     	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    2082:	c0 92 3f 19 	sts	0x193F, r12	; 0x80193f <xNextTaskUnblockTime>
    2086:	d0 92 40 19 	sts	0x1940, r13	; 0x801940 <xNextTaskUnblockTime+0x1>
    208a:	e0 92 41 19 	sts	0x1941, r14	; 0x801941 <xNextTaskUnblockTime+0x2>
    208e:	f0 92 42 19 	sts	0x1942, r15	; 0x801942 <xNextTaskUnblockTime+0x3>
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	bf 90       	pop	r11
    20a0:	af 90       	pop	r10
    20a2:	9f 90       	pop	r9
    20a4:	8f 90       	pop	r8
    20a6:	08 95       	ret

000020a8 <xTaskCreate>:
    20a8:	2f 92       	push	r2
    20aa:	3f 92       	push	r3
    20ac:	4f 92       	push	r4
    20ae:	5f 92       	push	r5
    20b0:	6f 92       	push	r6
    20b2:	7f 92       	push	r7
    20b4:	8f 92       	push	r8
    20b6:	9f 92       	push	r9
    20b8:	af 92       	push	r10
    20ba:	bf 92       	push	r11
    20bc:	cf 92       	push	r12
    20be:	df 92       	push	r13
    20c0:	ef 92       	push	r14
    20c2:	ff 92       	push	r15
    20c4:	0f 93       	push	r16
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	3c 01       	movw	r6, r24
    20cc:	1b 01       	movw	r2, r22
    20ce:	4a 01       	movw	r8, r20
    20d0:	29 01       	movw	r4, r18
    20d2:	ca 01       	movw	r24, r20
    20d4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <pvPortMalloc>
    20d8:	6c 01       	movw	r12, r24
    20da:	89 2b       	or	r24, r25
    20dc:	71 f0       	breq	.+28     	; 0x20fa <xTaskCreate+0x52>
    20de:	84 e3       	ldi	r24, 0x34	; 52
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <pvPortMalloc>
    20e6:	ec 01       	movw	r28, r24
    20e8:	89 2b       	or	r24, r25
    20ea:	19 f0       	breq	.+6      	; 0x20f2 <xTaskCreate+0x4a>
    20ec:	dc 8e       	std	Y+28, r13	; 0x1c
    20ee:	cb 8e       	std	Y+27, r12	; 0x1b
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <xTaskCreate+0x56>
    20f2:	c6 01       	movw	r24, r12
    20f4:	0e 94 a1 05 	call	0xb42	; 0xb42 <vPortFree>
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <xTaskCreate+0x56>
    20fa:	c0 e0       	ldi	r28, 0x00	; 0
    20fc:	d0 e0       	ldi	r29, 0x00	; 0
    20fe:	20 97       	sbiw	r28, 0x00	; 0
    2100:	61 f0       	breq	.+24     	; 0x211a <xTaskCreate+0x72>
    2102:	a1 2c       	mov	r10, r1
    2104:	b1 2c       	mov	r11, r1
    2106:	6e 01       	movw	r12, r28
    2108:	92 01       	movw	r18, r4
    210a:	a4 01       	movw	r20, r8
    210c:	b1 01       	movw	r22, r2
    210e:	c3 01       	movw	r24, r6
    2110:	e7 dd       	rcall	.-1074   	; 0x1ce0 <prvInitialiseNewTask>
    2112:	ce 01       	movw	r24, r28
    2114:	93 de       	rcall	.-730    	; 0x1e3c <prvAddNewTaskToReadyList>
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	01 c0       	rjmp	.+2      	; 0x211c <xTaskCreate+0x74>
    211a:	8f ef       	ldi	r24, 0xFF	; 255
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	ef 90       	pop	r14
    2126:	df 90       	pop	r13
    2128:	cf 90       	pop	r12
    212a:	bf 90       	pop	r11
    212c:	af 90       	pop	r10
    212e:	9f 90       	pop	r9
    2130:	8f 90       	pop	r8
    2132:	7f 90       	pop	r7
    2134:	6f 90       	pop	r6
    2136:	5f 90       	pop	r5
    2138:	4f 90       	pop	r4
    213a:	3f 90       	pop	r3
    213c:	2f 90       	pop	r2
    213e:	08 95       	ret

00002140 <vTaskStartScheduler>:
    2140:	ef 92       	push	r14
    2142:	ff 92       	push	r15
    2144:	0f 93       	push	r16
    2146:	0f 2e       	mov	r0, r31
    2148:	fd e3       	ldi	r31, 0x3D	; 61
    214a:	ef 2e       	mov	r14, r31
    214c:	f9 e1       	ldi	r31, 0x19	; 25
    214e:	ff 2e       	mov	r15, r31
    2150:	f0 2d       	mov	r31, r0
    2152:	00 e0       	ldi	r16, 0x00	; 0
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 ec       	ldi	r20, 0xC0	; 192
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	6b eb       	ldi	r22, 0xBB	; 187
    215e:	73 e0       	ldi	r23, 0x03	; 3
    2160:	8e e4       	ldi	r24, 0x4E	; 78
    2162:	91 e0       	ldi	r25, 0x01	; 1
    2164:	a1 df       	rcall	.-190    	; 0x20a8 <xTaskCreate>
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	11 f4       	brne	.+4      	; 0x216e <vTaskStartScheduler+0x2e>
    216a:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <xTimerCreateTimerTask>
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	c9 f4       	brne	.+50     	; 0x21a4 <vTaskStartScheduler+0x64>
    2172:	f8 94       	cli
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	9f ef       	ldi	r25, 0xFF	; 255
    2178:	dc 01       	movw	r26, r24
    217a:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <xNextTaskUnblockTime>
    217e:	90 93 40 19 	sts	0x1940, r25	; 0x801940 <xNextTaskUnblockTime+0x1>
    2182:	a0 93 41 19 	sts	0x1941, r26	; 0x801941 <xNextTaskUnblockTime+0x2>
    2186:	b0 93 42 19 	sts	0x1942, r27	; 0x801942 <xNextTaskUnblockTime+0x3>
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	80 93 4a 19 	sts	0x194A, r24	; 0x80194a <xSchedulerRunning>
    2190:	10 92 4c 19 	sts	0x194C, r1	; 0x80194c <xTickCount>
    2194:	10 92 4d 19 	sts	0x194D, r1	; 0x80194d <xTickCount+0x1>
    2198:	10 92 4e 19 	sts	0x194E, r1	; 0x80194e <xTickCount+0x2>
    219c:	10 92 4f 19 	sts	0x194F, r1	; 0x80194f <xTickCount+0x3>
    21a0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <xPortStartScheduler>
    21a4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	08 95       	ret

000021b0 <vTaskSuspendAll>:
    21b0:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <uxSchedulerSuspended>
    21b4:	8f 5f       	subi	r24, 0xFF	; 255
    21b6:	80 93 3c 19 	sts	0x193C, r24	; 0x80193c <uxSchedulerSuspended>
    21ba:	08 95       	ret

000021bc <xTaskGetTickCount>:
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	0f 92       	push	r0
    21c2:	60 91 4c 19 	lds	r22, 0x194C	; 0x80194c <xTickCount>
    21c6:	70 91 4d 19 	lds	r23, 0x194D	; 0x80194d <xTickCount+0x1>
    21ca:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <xTickCount+0x2>
    21ce:	90 91 4f 19 	lds	r25, 0x194F	; 0x80194f <xTickCount+0x3>
    21d2:	0f 90       	pop	r0
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	08 95       	ret

000021d8 <xTaskIncrementTick>:
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <uxSchedulerSuspended>
    21e8:	81 11       	cpse	r24, r1
    21ea:	05 c1       	rjmp	.+522    	; 0x23f6 <__stack+0x1f7>
    21ec:	c0 90 4c 19 	lds	r12, 0x194C	; 0x80194c <xTickCount>
    21f0:	d0 90 4d 19 	lds	r13, 0x194D	; 0x80194d <xTickCount+0x1>
    21f4:	e0 90 4e 19 	lds	r14, 0x194E	; 0x80194e <xTickCount+0x2>
    21f8:	f0 90 4f 19 	lds	r15, 0x194F	; 0x80194f <xTickCount+0x3>
    21fc:	8f ef       	ldi	r24, 0xFF	; 255
    21fe:	c8 1a       	sub	r12, r24
    2200:	d8 0a       	sbc	r13, r24
    2202:	e8 0a       	sbc	r14, r24
    2204:	f8 0a       	sbc	r15, r24
    2206:	c0 92 4c 19 	sts	0x194C, r12	; 0x80194c <xTickCount>
    220a:	d0 92 4d 19 	sts	0x194D, r13	; 0x80194d <xTickCount+0x1>
    220e:	e0 92 4e 19 	sts	0x194E, r14	; 0x80194e <xTickCount+0x2>
    2212:	f0 92 4f 19 	sts	0x194F, r15	; 0x80194f <xTickCount+0x3>
    2216:	c1 14       	cp	r12, r1
    2218:	d1 04       	cpc	r13, r1
    221a:	e1 04       	cpc	r14, r1
    221c:	f1 04       	cpc	r15, r1
    221e:	b1 f4       	brne	.+44     	; 0x224c <__stack+0x4d>
    2220:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <pxDelayedTaskList>
    2224:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <pxDelayedTaskList+0x1>
    2228:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <pxOverflowDelayedTaskList>
    222c:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <pxOverflowDelayedTaskList+0x1>
    2230:	30 93 76 19 	sts	0x1976, r19	; 0x801976 <pxDelayedTaskList+0x1>
    2234:	20 93 75 19 	sts	0x1975, r18	; 0x801975 <pxDelayedTaskList>
    2238:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <pxOverflowDelayedTaskList+0x1>
    223c:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <pxOverflowDelayedTaskList>
    2240:	80 91 44 19 	lds	r24, 0x1944	; 0x801944 <xNumOfOverflows>
    2244:	8f 5f       	subi	r24, 0xFF	; 255
    2246:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <xNumOfOverflows>
    224a:	16 dd       	rcall	.-1492   	; 0x1c78 <prvResetNextTaskUnblockTime>
    224c:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <xNextTaskUnblockTime>
    2250:	90 91 40 19 	lds	r25, 0x1940	; 0x801940 <xNextTaskUnblockTime+0x1>
    2254:	a0 91 41 19 	lds	r26, 0x1941	; 0x801941 <xNextTaskUnblockTime+0x2>
    2258:	b0 91 42 19 	lds	r27, 0x1942	; 0x801942 <xNextTaskUnblockTime+0x3>
    225c:	c8 16       	cp	r12, r24
    225e:	d9 06       	cpc	r13, r25
    2260:	ea 06       	cpc	r14, r26
    2262:	fb 06       	cpc	r15, r27
    2264:	20 f4       	brcc	.+8      	; 0x226e <__stack+0x6f>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	b2 c0       	rjmp	.+356    	; 0x23ce <__stack+0x1cf>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	01 c0       	rjmp	.+2      	; 0x2270 <__stack+0x71>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxDelayedTaskList>
    2274:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxDelayedTaskList+0x1>
    2278:	90 81       	ld	r25, Z
    227a:	91 11       	cpse	r25, r1
    227c:	0c c0       	rjmp	.+24     	; 0x2296 <__stack+0x97>
    227e:	4f ef       	ldi	r20, 0xFF	; 255
    2280:	5f ef       	ldi	r21, 0xFF	; 255
    2282:	ba 01       	movw	r22, r20
    2284:	40 93 3f 19 	sts	0x193F, r20	; 0x80193f <xNextTaskUnblockTime>
    2288:	50 93 40 19 	sts	0x1940, r21	; 0x801940 <xNextTaskUnblockTime+0x1>
    228c:	60 93 41 19 	sts	0x1941, r22	; 0x801941 <xNextTaskUnblockTime+0x2>
    2290:	70 93 42 19 	sts	0x1942, r23	; 0x801942 <xNextTaskUnblockTime+0x3>
    2294:	9c c0       	rjmp	.+312    	; 0x23ce <__stack+0x1cf>
    2296:	e0 91 75 19 	lds	r30, 0x1975	; 0x801975 <pxDelayedTaskList>
    229a:	f0 91 76 19 	lds	r31, 0x1976	; 0x801976 <pxDelayedTaskList+0x1>
    229e:	07 80       	ldd	r0, Z+7	; 0x07
    22a0:	f0 85       	ldd	r31, Z+8	; 0x08
    22a2:	e0 2d       	mov	r30, r0
    22a4:	00 84       	ldd	r0, Z+8	; 0x08
    22a6:	f1 85       	ldd	r31, Z+9	; 0x09
    22a8:	e0 2d       	mov	r30, r0
    22aa:	42 81       	ldd	r20, Z+2	; 0x02
    22ac:	53 81       	ldd	r21, Z+3	; 0x03
    22ae:	64 81       	ldd	r22, Z+4	; 0x04
    22b0:	75 81       	ldd	r23, Z+5	; 0x05
    22b2:	c4 16       	cp	r12, r20
    22b4:	d5 06       	cpc	r13, r21
    22b6:	e6 06       	cpc	r14, r22
    22b8:	f7 06       	cpc	r15, r23
    22ba:	48 f4       	brcc	.+18     	; 0x22ce <__stack+0xcf>
    22bc:	40 93 3f 19 	sts	0x193F, r20	; 0x80193f <xNextTaskUnblockTime>
    22c0:	50 93 40 19 	sts	0x1940, r21	; 0x801940 <xNextTaskUnblockTime+0x1>
    22c4:	60 93 41 19 	sts	0x1941, r22	; 0x801941 <xNextTaskUnblockTime+0x2>
    22c8:	70 93 42 19 	sts	0x1942, r23	; 0x801942 <xNextTaskUnblockTime+0x3>
    22cc:	80 c0       	rjmp	.+256    	; 0x23ce <__stack+0x1cf>
    22ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    22d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    22d2:	c6 81       	ldd	r28, Z+6	; 0x06
    22d4:	d7 81       	ldd	r29, Z+7	; 0x07
    22d6:	20 85       	ldd	r18, Z+8	; 0x08
    22d8:	31 85       	ldd	r19, Z+9	; 0x09
    22da:	3f 83       	std	Y+7, r19	; 0x07
    22dc:	2e 83       	std	Y+6, r18	; 0x06
    22de:	c0 85       	ldd	r28, Z+8	; 0x08
    22e0:	d1 85       	ldd	r29, Z+9	; 0x09
    22e2:	26 81       	ldd	r18, Z+6	; 0x06
    22e4:	37 81       	ldd	r19, Z+7	; 0x07
    22e6:	3d 83       	std	Y+5, r19	; 0x05
    22e8:	2c 83       	std	Y+4, r18	; 0x04
    22ea:	11 96       	adiw	r26, 0x01	; 1
    22ec:	4d 91       	ld	r20, X+
    22ee:	5c 91       	ld	r21, X
    22f0:	12 97       	sbiw	r26, 0x02	; 2
    22f2:	9f 01       	movw	r18, r30
    22f4:	2e 5f       	subi	r18, 0xFE	; 254
    22f6:	3f 4f       	sbci	r19, 0xFF	; 255
    22f8:	42 17       	cp	r20, r18
    22fa:	53 07       	cpc	r21, r19
    22fc:	31 f4       	brne	.+12     	; 0x230a <__stack+0x10b>
    22fe:	40 85       	ldd	r20, Z+8	; 0x08
    2300:	51 85       	ldd	r21, Z+9	; 0x09
    2302:	12 96       	adiw	r26, 0x02	; 2
    2304:	5c 93       	st	X, r21
    2306:	4e 93       	st	-X, r20
    2308:	11 97       	sbiw	r26, 0x01	; 1
    230a:	15 86       	std	Z+13, r1	; 0x0d
    230c:	14 86       	std	Z+12, r1	; 0x0c
    230e:	9c 91       	ld	r25, X
    2310:	91 50       	subi	r25, 0x01	; 1
    2312:	9c 93       	st	X, r25
    2314:	a0 8d       	ldd	r26, Z+24	; 0x18
    2316:	b1 8d       	ldd	r27, Z+25	; 0x19
    2318:	10 97       	sbiw	r26, 0x00	; 0
    231a:	09 f1       	breq	.+66     	; 0x235e <__stack+0x15f>
    231c:	c2 89       	ldd	r28, Z+18	; 0x12
    231e:	d3 89       	ldd	r29, Z+19	; 0x13
    2320:	44 89       	ldd	r20, Z+20	; 0x14
    2322:	55 89       	ldd	r21, Z+21	; 0x15
    2324:	5f 83       	std	Y+7, r21	; 0x07
    2326:	4e 83       	std	Y+6, r20	; 0x06
    2328:	c4 89       	ldd	r28, Z+20	; 0x14
    232a:	d5 89       	ldd	r29, Z+21	; 0x15
    232c:	42 89       	ldd	r20, Z+18	; 0x12
    232e:	53 89       	ldd	r21, Z+19	; 0x13
    2330:	5d 83       	std	Y+5, r21	; 0x05
    2332:	4c 83       	std	Y+4, r20	; 0x04
    2334:	11 96       	adiw	r26, 0x01	; 1
    2336:	6d 91       	ld	r22, X+
    2338:	7c 91       	ld	r23, X
    233a:	12 97       	sbiw	r26, 0x02	; 2
    233c:	af 01       	movw	r20, r30
    233e:	42 5f       	subi	r20, 0xF2	; 242
    2340:	5f 4f       	sbci	r21, 0xFF	; 255
    2342:	64 17       	cp	r22, r20
    2344:	75 07       	cpc	r23, r21
    2346:	31 f4       	brne	.+12     	; 0x2354 <__stack+0x155>
    2348:	44 89       	ldd	r20, Z+20	; 0x14
    234a:	55 89       	ldd	r21, Z+21	; 0x15
    234c:	12 96       	adiw	r26, 0x02	; 2
    234e:	5c 93       	st	X, r21
    2350:	4e 93       	st	-X, r20
    2352:	11 97       	sbiw	r26, 0x01	; 1
    2354:	11 8e       	std	Z+25, r1	; 0x19
    2356:	10 8e       	std	Z+24, r1	; 0x18
    2358:	9c 91       	ld	r25, X
    235a:	91 50       	subi	r25, 0x01	; 1
    235c:	9c 93       	st	X, r25
    235e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2360:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <uxTopReadyPriority>
    2364:	9a 17       	cp	r25, r26
    2366:	10 f4       	brcc	.+4      	; 0x236c <__stack+0x16d>
    2368:	a0 93 4b 19 	sts	0x194B, r26	; 0x80194b <uxTopReadyPriority>
    236c:	9b e0       	ldi	r25, 0x0B	; 11
    236e:	9a 9f       	mul	r25, r26
    2370:	d0 01       	movw	r26, r0
    2372:	11 24       	eor	r1, r1
    2374:	a3 57       	subi	r26, 0x73	; 115
    2376:	b6 4e       	sbci	r27, 0xE6	; 230
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	0d 90       	ld	r0, X+
    237c:	bc 91       	ld	r27, X
    237e:	a0 2d       	mov	r26, r0
    2380:	b7 83       	std	Z+7, r27	; 0x07
    2382:	a6 83       	std	Z+6, r26	; 0x06
    2384:	16 96       	adiw	r26, 0x06	; 6
    2386:	4d 91       	ld	r20, X+
    2388:	5c 91       	ld	r21, X
    238a:	17 97       	sbiw	r26, 0x07	; 7
    238c:	51 87       	std	Z+9, r21	; 0x09
    238e:	40 87       	std	Z+8, r20	; 0x08
    2390:	16 96       	adiw	r26, 0x06	; 6
    2392:	cd 91       	ld	r28, X+
    2394:	dc 91       	ld	r29, X
    2396:	17 97       	sbiw	r26, 0x07	; 7
    2398:	3d 83       	std	Y+5, r19	; 0x05
    239a:	2c 83       	std	Y+4, r18	; 0x04
    239c:	17 96       	adiw	r26, 0x07	; 7
    239e:	3c 93       	st	X, r19
    23a0:	2e 93       	st	-X, r18
    23a2:	16 97       	sbiw	r26, 0x06	; 6
    23a4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23a6:	9a 9f       	mul	r25, r26
    23a8:	d0 01       	movw	r26, r0
    23aa:	11 24       	eor	r1, r1
    23ac:	a3 57       	subi	r26, 0x73	; 115
    23ae:	b6 4e       	sbci	r27, 0xE6	; 230
    23b0:	b5 87       	std	Z+13, r27	; 0x0d
    23b2:	a4 87       	std	Z+12, r26	; 0x0c
    23b4:	9c 91       	ld	r25, X
    23b6:	9f 5f       	subi	r25, 0xFF	; 255
    23b8:	9c 93       	st	X, r25
    23ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    23bc:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    23c0:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    23c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    23c6:	29 17       	cp	r18, r25
    23c8:	08 f0       	brcs	.+2      	; 0x23cc <__stack+0x1cd>
    23ca:	4f cf       	rjmp	.-354    	; 0x226a <__stack+0x6b>
    23cc:	51 cf       	rjmp	.-350    	; 0x2270 <__stack+0x71>
    23ce:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    23d2:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    23d6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    23d8:	9b e0       	ldi	r25, 0x0B	; 11
    23da:	e9 9f       	mul	r30, r25
    23dc:	f0 01       	movw	r30, r0
    23de:	11 24       	eor	r1, r1
    23e0:	e3 57       	subi	r30, 0x73	; 115
    23e2:	f6 4e       	sbci	r31, 0xE6	; 230
    23e4:	90 81       	ld	r25, Z
    23e6:	92 30       	cpi	r25, 0x02	; 2
    23e8:	08 f0       	brcs	.+2      	; 0x23ec <__stack+0x1ed>
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 91 45 19 	lds	r25, 0x1945	; 0x801945 <xYieldPending>
    23f0:	91 11       	cpse	r25, r1
    23f2:	16 c0       	rjmp	.+44     	; 0x2420 <__stack+0x221>
    23f4:	16 c0       	rjmp	.+44     	; 0x2422 <__stack+0x223>
    23f6:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <xPendedTicks>
    23fa:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <xPendedTicks+0x1>
    23fe:	a0 91 48 19 	lds	r26, 0x1948	; 0x801948 <xPendedTicks+0x2>
    2402:	b0 91 49 19 	lds	r27, 0x1949	; 0x801949 <xPendedTicks+0x3>
    2406:	01 96       	adiw	r24, 0x01	; 1
    2408:	a1 1d       	adc	r26, r1
    240a:	b1 1d       	adc	r27, r1
    240c:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <xPendedTicks>
    2410:	90 93 47 19 	sts	0x1947, r25	; 0x801947 <xPendedTicks+0x1>
    2414:	a0 93 48 19 	sts	0x1948, r26	; 0x801948 <xPendedTicks+0x2>
    2418:	b0 93 49 19 	sts	0x1949, r27	; 0x801949 <xPendedTicks+0x3>
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <__stack+0x223>
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	ff 90       	pop	r15
    2428:	ef 90       	pop	r14
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	08 95       	ret

00002430 <xTaskResumeAll>:
    2430:	cf 92       	push	r12
    2432:	df 92       	push	r13
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	0f 92       	push	r0
    2442:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <uxSchedulerSuspended>
    2446:	81 50       	subi	r24, 0x01	; 1
    2448:	80 93 3c 19 	sts	0x193C, r24	; 0x80193c <uxSchedulerSuspended>
    244c:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <uxSchedulerSuspended>
    2450:	81 11       	cpse	r24, r1
    2452:	be c0       	rjmp	.+380    	; 0x25d0 <xTaskResumeAll+0x1a0>
    2454:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <uxCurrentNumberOfTasks>
    2458:	81 11       	cpse	r24, r1
    245a:	88 c0       	rjmp	.+272    	; 0x256c <xTaskResumeAll+0x13c>
    245c:	bc c0       	rjmp	.+376    	; 0x25d6 <xTaskResumeAll+0x1a6>
    245e:	e0 91 6f 19 	lds	r30, 0x196F	; 0x80196f <xPendingReadyList+0x7>
    2462:	f0 91 70 19 	lds	r31, 0x1970	; 0x801970 <xPendingReadyList+0x8>
    2466:	00 84       	ldd	r0, Z+8	; 0x08
    2468:	f1 85       	ldd	r31, Z+9	; 0x09
    246a:	e0 2d       	mov	r30, r0
    246c:	a0 8d       	ldd	r26, Z+24	; 0x18
    246e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2470:	c2 89       	ldd	r28, Z+18	; 0x12
    2472:	d3 89       	ldd	r29, Z+19	; 0x13
    2474:	84 89       	ldd	r24, Z+20	; 0x14
    2476:	95 89       	ldd	r25, Z+21	; 0x15
    2478:	9f 83       	std	Y+7, r25	; 0x07
    247a:	8e 83       	std	Y+6, r24	; 0x06
    247c:	c4 89       	ldd	r28, Z+20	; 0x14
    247e:	d5 89       	ldd	r29, Z+21	; 0x15
    2480:	82 89       	ldd	r24, Z+18	; 0x12
    2482:	93 89       	ldd	r25, Z+19	; 0x13
    2484:	9d 83       	std	Y+5, r25	; 0x05
    2486:	8c 83       	std	Y+4, r24	; 0x04
    2488:	11 96       	adiw	r26, 0x01	; 1
    248a:	2d 91       	ld	r18, X+
    248c:	3c 91       	ld	r19, X
    248e:	12 97       	sbiw	r26, 0x02	; 2
    2490:	cf 01       	movw	r24, r30
    2492:	0e 96       	adiw	r24, 0x0e	; 14
    2494:	28 17       	cp	r18, r24
    2496:	39 07       	cpc	r19, r25
    2498:	31 f4       	brne	.+12     	; 0x24a6 <xTaskResumeAll+0x76>
    249a:	84 89       	ldd	r24, Z+20	; 0x14
    249c:	95 89       	ldd	r25, Z+21	; 0x15
    249e:	12 96       	adiw	r26, 0x02	; 2
    24a0:	9c 93       	st	X, r25
    24a2:	8e 93       	st	-X, r24
    24a4:	11 97       	sbiw	r26, 0x01	; 1
    24a6:	11 8e       	std	Z+25, r1	; 0x19
    24a8:	10 8e       	std	Z+24, r1	; 0x18
    24aa:	8c 91       	ld	r24, X
    24ac:	81 50       	subi	r24, 0x01	; 1
    24ae:	8c 93       	st	X, r24
    24b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    24b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    24b4:	c6 81       	ldd	r28, Z+6	; 0x06
    24b6:	d7 81       	ldd	r29, Z+7	; 0x07
    24b8:	80 85       	ldd	r24, Z+8	; 0x08
    24ba:	91 85       	ldd	r25, Z+9	; 0x09
    24bc:	9f 83       	std	Y+7, r25	; 0x07
    24be:	8e 83       	std	Y+6, r24	; 0x06
    24c0:	c0 85       	ldd	r28, Z+8	; 0x08
    24c2:	d1 85       	ldd	r29, Z+9	; 0x09
    24c4:	86 81       	ldd	r24, Z+6	; 0x06
    24c6:	97 81       	ldd	r25, Z+7	; 0x07
    24c8:	9d 83       	std	Y+5, r25	; 0x05
    24ca:	8c 83       	std	Y+4, r24	; 0x04
    24cc:	11 96       	adiw	r26, 0x01	; 1
    24ce:	8d 91       	ld	r24, X+
    24d0:	9c 91       	ld	r25, X
    24d2:	12 97       	sbiw	r26, 0x02	; 2
    24d4:	9f 01       	movw	r18, r30
    24d6:	2e 5f       	subi	r18, 0xFE	; 254
    24d8:	3f 4f       	sbci	r19, 0xFF	; 255
    24da:	82 17       	cp	r24, r18
    24dc:	93 07       	cpc	r25, r19
    24de:	31 f4       	brne	.+12     	; 0x24ec <xTaskResumeAll+0xbc>
    24e0:	80 85       	ldd	r24, Z+8	; 0x08
    24e2:	91 85       	ldd	r25, Z+9	; 0x09
    24e4:	12 96       	adiw	r26, 0x02	; 2
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	11 97       	sbiw	r26, 0x01	; 1
    24ec:	15 86       	std	Z+13, r1	; 0x0d
    24ee:	14 86       	std	Z+12, r1	; 0x0c
    24f0:	8c 91       	ld	r24, X
    24f2:	81 50       	subi	r24, 0x01	; 1
    24f4:	8c 93       	st	X, r24
    24f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24f8:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uxTopReadyPriority>
    24fc:	8a 17       	cp	r24, r26
    24fe:	10 f4       	brcc	.+4      	; 0x2504 <xTaskResumeAll+0xd4>
    2500:	a0 93 4b 19 	sts	0x194B, r26	; 0x80194b <uxTopReadyPriority>
    2504:	8b e0       	ldi	r24, 0x0B	; 11
    2506:	8a 9f       	mul	r24, r26
    2508:	d0 01       	movw	r26, r0
    250a:	11 24       	eor	r1, r1
    250c:	a3 57       	subi	r26, 0x73	; 115
    250e:	b6 4e       	sbci	r27, 0xE6	; 230
    2510:	11 96       	adiw	r26, 0x01	; 1
    2512:	0d 90       	ld	r0, X+
    2514:	bc 91       	ld	r27, X
    2516:	a0 2d       	mov	r26, r0
    2518:	b7 83       	std	Z+7, r27	; 0x07
    251a:	a6 83       	std	Z+6, r26	; 0x06
    251c:	16 96       	adiw	r26, 0x06	; 6
    251e:	4d 91       	ld	r20, X+
    2520:	5c 91       	ld	r21, X
    2522:	17 97       	sbiw	r26, 0x07	; 7
    2524:	51 87       	std	Z+9, r21	; 0x09
    2526:	40 87       	std	Z+8, r20	; 0x08
    2528:	16 96       	adiw	r26, 0x06	; 6
    252a:	cd 91       	ld	r28, X+
    252c:	dc 91       	ld	r29, X
    252e:	17 97       	sbiw	r26, 0x07	; 7
    2530:	3d 83       	std	Y+5, r19	; 0x05
    2532:	2c 83       	std	Y+4, r18	; 0x04
    2534:	17 96       	adiw	r26, 0x07	; 7
    2536:	3c 93       	st	X, r19
    2538:	2e 93       	st	-X, r18
    253a:	16 97       	sbiw	r26, 0x06	; 6
    253c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    253e:	8a 9f       	mul	r24, r26
    2540:	d0 01       	movw	r26, r0
    2542:	11 24       	eor	r1, r1
    2544:	a3 57       	subi	r26, 0x73	; 115
    2546:	b6 4e       	sbci	r27, 0xE6	; 230
    2548:	b5 87       	std	Z+13, r27	; 0x0d
    254a:	a4 87       	std	Z+12, r26	; 0x0c
    254c:	8c 91       	ld	r24, X
    254e:	8f 5f       	subi	r24, 0xFF	; 255
    2550:	8c 93       	st	X, r24
    2552:	92 8d       	ldd	r25, Z+26	; 0x1a
    2554:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2558:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    255c:	5a 96       	adiw	r26, 0x1a	; 26
    255e:	8c 91       	ld	r24, X
    2560:	98 17       	cp	r25, r24
    2562:	30 f0       	brcs	.+12     	; 0x2570 <xTaskResumeAll+0x140>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <xYieldPending>
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <xTaskResumeAll+0x140>
    256c:	e0 e0       	ldi	r30, 0x00	; 0
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <xPendingReadyList>
    2574:	81 11       	cpse	r24, r1
    2576:	73 cf       	rjmp	.-282    	; 0x245e <xTaskResumeAll+0x2e>
    2578:	ef 2b       	or	r30, r31
    257a:	09 f0       	breq	.+2      	; 0x257e <xTaskResumeAll+0x14e>
    257c:	7d db       	rcall	.-2310   	; 0x1c78 <prvResetNextTaskUnblockTime>
    257e:	c0 90 46 19 	lds	r12, 0x1946	; 0x801946 <xPendedTicks>
    2582:	d0 90 47 19 	lds	r13, 0x1947	; 0x801947 <xPendedTicks+0x1>
    2586:	e0 90 48 19 	lds	r14, 0x1948	; 0x801948 <xPendedTicks+0x2>
    258a:	f0 90 49 19 	lds	r15, 0x1949	; 0x801949 <xPendedTicks+0x3>
    258e:	c1 14       	cp	r12, r1
    2590:	d1 04       	cpc	r13, r1
    2592:	e1 04       	cpc	r14, r1
    2594:	f1 04       	cpc	r15, r1
    2596:	a1 f0       	breq	.+40     	; 0x25c0 <xTaskResumeAll+0x190>
    2598:	1f de       	rcall	.-962    	; 0x21d8 <xTaskIncrementTick>
    259a:	88 23       	and	r24, r24
    259c:	19 f0       	breq	.+6      	; 0x25a4 <xTaskResumeAll+0x174>
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <xYieldPending>
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	c8 1a       	sub	r12, r24
    25a8:	d1 08       	sbc	r13, r1
    25aa:	e1 08       	sbc	r14, r1
    25ac:	f1 08       	sbc	r15, r1
    25ae:	a1 f7       	brne	.-24     	; 0x2598 <xTaskResumeAll+0x168>
    25b0:	10 92 46 19 	sts	0x1946, r1	; 0x801946 <xPendedTicks>
    25b4:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <xPendedTicks+0x1>
    25b8:	10 92 48 19 	sts	0x1948, r1	; 0x801948 <xPendedTicks+0x2>
    25bc:	10 92 49 19 	sts	0x1949, r1	; 0x801949 <xPendedTicks+0x3>
    25c0:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <xYieldPending>
    25c4:	88 23       	and	r24, r24
    25c6:	31 f0       	breq	.+12     	; 0x25d4 <xTaskResumeAll+0x1a4>
    25c8:	0e 94 ac 06 	call	0xd58	; 0xd58 <vPortYield>
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <xTaskResumeAll+0x1a6>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	01 c0       	rjmp	.+2      	; 0x25d6 <xTaskResumeAll+0x1a6>
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	0f 90       	pop	r0
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	ff 90       	pop	r15
    25e0:	ef 90       	pop	r14
    25e2:	df 90       	pop	r13
    25e4:	cf 90       	pop	r12
    25e6:	08 95       	ret

000025e8 <xTaskDelayUntil>:
    25e8:	8f 92       	push	r8
    25ea:	9f 92       	push	r9
    25ec:	af 92       	push	r10
    25ee:	bf 92       	push	r11
    25f0:	cf 92       	push	r12
    25f2:	df 92       	push	r13
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	ec 01       	movw	r28, r24
    2600:	6a 01       	movw	r12, r20
    2602:	7b 01       	movw	r14, r22
    2604:	d5 dd       	rcall	.-1110   	; 0x21b0 <vTaskSuspendAll>
    2606:	80 90 4c 19 	lds	r8, 0x194C	; 0x80194c <xTickCount>
    260a:	90 90 4d 19 	lds	r9, 0x194D	; 0x80194d <xTickCount+0x1>
    260e:	a0 90 4e 19 	lds	r10, 0x194E	; 0x80194e <xTickCount+0x2>
    2612:	b0 90 4f 19 	lds	r11, 0x194F	; 0x80194f <xTickCount+0x3>
    2616:	88 81       	ld	r24, Y
    2618:	99 81       	ldd	r25, Y+1	; 0x01
    261a:	aa 81       	ldd	r26, Y+2	; 0x02
    261c:	bb 81       	ldd	r27, Y+3	; 0x03
    261e:	ac 01       	movw	r20, r24
    2620:	bd 01       	movw	r22, r26
    2622:	4c 0d       	add	r20, r12
    2624:	5d 1d       	adc	r21, r13
    2626:	6e 1d       	adc	r22, r14
    2628:	7f 1d       	adc	r23, r15
    262a:	88 16       	cp	r8, r24
    262c:	99 06       	cpc	r9, r25
    262e:	aa 06       	cpc	r10, r26
    2630:	bb 06       	cpc	r11, r27
    2632:	60 f4       	brcc	.+24     	; 0x264c <xTaskDelayUntil+0x64>
    2634:	48 17       	cp	r20, r24
    2636:	59 07       	cpc	r21, r25
    2638:	6a 07       	cpc	r22, r26
    263a:	7b 07       	cpc	r23, r27
    263c:	98 f4       	brcc	.+38     	; 0x2664 <xTaskDelayUntil+0x7c>
    263e:	84 16       	cp	r8, r20
    2640:	95 06       	cpc	r9, r21
    2642:	a6 06       	cpc	r10, r22
    2644:	b7 06       	cpc	r11, r23
    2646:	80 f0       	brcs	.+32     	; 0x2668 <xTaskDelayUntil+0x80>
    2648:	10 e0       	ldi	r17, 0x00	; 0
    264a:	13 c0       	rjmp	.+38     	; 0x2672 <xTaskDelayUntil+0x8a>
    264c:	48 17       	cp	r20, r24
    264e:	59 07       	cpc	r21, r25
    2650:	6a 07       	cpc	r22, r26
    2652:	7b 07       	cpc	r23, r27
    2654:	58 f0       	brcs	.+22     	; 0x266c <xTaskDelayUntil+0x84>
    2656:	84 16       	cp	r8, r20
    2658:	95 06       	cpc	r9, r21
    265a:	a6 06       	cpc	r10, r22
    265c:	b7 06       	cpc	r11, r23
    265e:	40 f0       	brcs	.+16     	; 0x2670 <xTaskDelayUntil+0x88>
    2660:	10 e0       	ldi	r17, 0x00	; 0
    2662:	07 c0       	rjmp	.+14     	; 0x2672 <xTaskDelayUntil+0x8a>
    2664:	10 e0       	ldi	r17, 0x00	; 0
    2666:	05 c0       	rjmp	.+10     	; 0x2672 <xTaskDelayUntil+0x8a>
    2668:	11 e0       	ldi	r17, 0x01	; 1
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <xTaskDelayUntil+0x8a>
    266c:	11 e0       	ldi	r17, 0x01	; 1
    266e:	01 c0       	rjmp	.+2      	; 0x2672 <xTaskDelayUntil+0x8a>
    2670:	11 e0       	ldi	r17, 0x01	; 1
    2672:	48 83       	st	Y, r20
    2674:	59 83       	std	Y+1, r21	; 0x01
    2676:	6a 83       	std	Y+2, r22	; 0x02
    2678:	7b 83       	std	Y+3, r23	; 0x03
    267a:	11 23       	and	r17, r17
    267c:	41 f0       	breq	.+16     	; 0x268e <xTaskDelayUntil+0xa6>
    267e:	cb 01       	movw	r24, r22
    2680:	ba 01       	movw	r22, r20
    2682:	68 19       	sub	r22, r8
    2684:	79 09       	sbc	r23, r9
    2686:	8a 09       	sbc	r24, r10
    2688:	9b 09       	sbc	r25, r11
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	6b dc       	rcall	.-1834   	; 0x1f64 <prvAddCurrentTaskToDelayedList>
    268e:	d0 de       	rcall	.-608    	; 0x2430 <xTaskResumeAll>
    2690:	81 11       	cpse	r24, r1
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <xTaskDelayUntil+0xb0>
    2694:	0e 94 ac 06 	call	0xd58	; 0xd58 <vPortYield>
    2698:	81 2f       	mov	r24, r17
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	ff 90       	pop	r15
    26a2:	ef 90       	pop	r14
    26a4:	df 90       	pop	r13
    26a6:	cf 90       	pop	r12
    26a8:	bf 90       	pop	r11
    26aa:	af 90       	pop	r10
    26ac:	9f 90       	pop	r9
    26ae:	8f 90       	pop	r8
    26b0:	08 95       	ret

000026b2 <vTaskDelay>:
    26b2:	cf 92       	push	r12
    26b4:	df 92       	push	r13
    26b6:	ef 92       	push	r14
    26b8:	ff 92       	push	r15
    26ba:	6b 01       	movw	r12, r22
    26bc:	7c 01       	movw	r14, r24
    26be:	67 2b       	or	r22, r23
    26c0:	68 2b       	or	r22, r24
    26c2:	69 2b       	or	r22, r25
    26c4:	39 f0       	breq	.+14     	; 0x26d4 <vTaskDelay+0x22>
    26c6:	74 dd       	rcall	.-1304   	; 0x21b0 <vTaskSuspendAll>
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	c7 01       	movw	r24, r14
    26cc:	b6 01       	movw	r22, r12
    26ce:	4a dc       	rcall	.-1900   	; 0x1f64 <prvAddCurrentTaskToDelayedList>
    26d0:	af de       	rcall	.-674    	; 0x2430 <xTaskResumeAll>
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <vTaskDelay+0x24>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	81 11       	cpse	r24, r1
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <vTaskDelay+0x2c>
    26da:	0e 94 ac 06 	call	0xd58	; 0xd58 <vPortYield>
    26de:	ff 90       	pop	r15
    26e0:	ef 90       	pop	r14
    26e2:	df 90       	pop	r13
    26e4:	cf 90       	pop	r12
    26e6:	08 95       	ret

000026e8 <vTaskSwitchContext>:
    26e8:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <uxSchedulerSuspended>
    26ec:	88 23       	and	r24, r24
    26ee:	21 f0       	breq	.+8      	; 0x26f8 <vTaskSwitchContext+0x10>
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <xYieldPending>
    26f6:	08 95       	ret
    26f8:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <xYieldPending>
    26fc:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2700:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2704:	20 81       	ld	r18, Z
    2706:	31 81       	ldd	r19, Z+1	; 0x01
    2708:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    270c:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2710:	83 8d       	ldd	r24, Z+27	; 0x1b
    2712:	94 8d       	ldd	r25, Z+28	; 0x1c
    2714:	82 17       	cp	r24, r18
    2716:	93 07       	cpc	r25, r19
    2718:	60 f0       	brcs	.+24     	; 0x2732 <vTaskSwitchContext+0x4a>
    271a:	60 91 fb 19 	lds	r22, 0x19FB	; 0x8019fb <pxCurrentTCB>
    271e:	70 91 fc 19 	lds	r23, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2722:	63 5e       	subi	r22, 0xE3	; 227
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    272a:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    272e:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <vApplicationStackOverflowHook>
    2732:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uxTopReadyPriority>
    2736:	01 c0       	rjmp	.+2      	; 0x273a <vTaskSwitchContext+0x52>
    2738:	81 50       	subi	r24, 0x01	; 1
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	9b e0       	ldi	r25, 0x0B	; 11
    2740:	92 9f       	mul	r25, r18
    2742:	f0 01       	movw	r30, r0
    2744:	93 9f       	mul	r25, r19
    2746:	f0 0d       	add	r31, r0
    2748:	11 24       	eor	r1, r1
    274a:	e3 57       	subi	r30, 0x73	; 115
    274c:	f6 4e       	sbci	r31, 0xE6	; 230
    274e:	90 81       	ld	r25, Z
    2750:	99 23       	and	r25, r25
    2752:	91 f3       	breq	.-28     	; 0x2738 <vTaskSwitchContext+0x50>
    2754:	9b e0       	ldi	r25, 0x0B	; 11
    2756:	92 9f       	mul	r25, r18
    2758:	a0 01       	movw	r20, r0
    275a:	93 9f       	mul	r25, r19
    275c:	50 0d       	add	r21, r0
    275e:	11 24       	eor	r1, r1
    2760:	df 01       	movw	r26, r30
    2762:	01 80       	ldd	r0, Z+1	; 0x01
    2764:	f2 81       	ldd	r31, Z+2	; 0x02
    2766:	e0 2d       	mov	r30, r0
    2768:	04 80       	ldd	r0, Z+4	; 0x04
    276a:	f5 81       	ldd	r31, Z+5	; 0x05
    276c:	e0 2d       	mov	r30, r0
    276e:	12 96       	adiw	r26, 0x02	; 2
    2770:	fc 93       	st	X, r31
    2772:	ee 93       	st	-X, r30
    2774:	11 97       	sbiw	r26, 0x01	; 1
    2776:	40 57       	subi	r20, 0x70	; 112
    2778:	56 4e       	sbci	r21, 0xE6	; 230
    277a:	e4 17       	cp	r30, r20
    277c:	f5 07       	cpc	r31, r21
    277e:	29 f4       	brne	.+10     	; 0x278a <vTaskSwitchContext+0xa2>
    2780:	44 81       	ldd	r20, Z+4	; 0x04
    2782:	55 81       	ldd	r21, Z+5	; 0x05
    2784:	fd 01       	movw	r30, r26
    2786:	52 83       	std	Z+2, r21	; 0x02
    2788:	41 83       	std	Z+1, r20	; 0x01
    278a:	9b e0       	ldi	r25, 0x0B	; 11
    278c:	92 9f       	mul	r25, r18
    278e:	f0 01       	movw	r30, r0
    2790:	93 9f       	mul	r25, r19
    2792:	f0 0d       	add	r31, r0
    2794:	11 24       	eor	r1, r1
    2796:	e3 57       	subi	r30, 0x73	; 115
    2798:	f6 4e       	sbci	r31, 0xE6	; 230
    279a:	01 80       	ldd	r0, Z+1	; 0x01
    279c:	f2 81       	ldd	r31, Z+2	; 0x02
    279e:	e0 2d       	mov	r30, r0
    27a0:	20 85       	ldd	r18, Z+8	; 0x08
    27a2:	31 85       	ldd	r19, Z+9	; 0x09
    27a4:	30 93 fc 19 	sts	0x19FC, r19	; 0x8019fc <pxCurrentTCB+0x1>
    27a8:	20 93 fb 19 	sts	0x19FB, r18	; 0x8019fb <pxCurrentTCB>
    27ac:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <uxTopReadyPriority>
    27b0:	08 95       	ret

000027b2 <vTaskPlaceOnEventList>:
    27b2:	cf 92       	push	r12
    27b4:	df 92       	push	r13
    27b6:	ef 92       	push	r14
    27b8:	ff 92       	push	r15
    27ba:	6a 01       	movw	r12, r20
    27bc:	7b 01       	movw	r14, r22
    27be:	60 91 fb 19 	lds	r22, 0x19FB	; 0x8019fb <pxCurrentTCB>
    27c2:	70 91 fc 19 	lds	r23, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    27c6:	62 5f       	subi	r22, 0xF2	; 242
    27c8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ca:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <vListInsert>
    27ce:	41 e0       	ldi	r20, 0x01	; 1
    27d0:	c7 01       	movw	r24, r14
    27d2:	b6 01       	movw	r22, r12
    27d4:	c7 db       	rcall	.-2162   	; 0x1f64 <prvAddCurrentTaskToDelayedList>
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	df 90       	pop	r13
    27dc:	cf 90       	pop	r12
    27de:	08 95       	ret

000027e0 <vTaskPlaceOnUnorderedEventList>:
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	fc 01       	movw	r30, r24
    27ea:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
    27ee:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    27f2:	70 68       	ori	r23, 0x80	; 128
    27f4:	1e 96       	adiw	r26, 0x0e	; 14
    27f6:	4d 93       	st	X+, r20
    27f8:	5d 93       	st	X+, r21
    27fa:	6d 93       	st	X+, r22
    27fc:	7c 93       	st	X, r23
    27fe:	51 97       	sbiw	r26, 0x11	; 17
    2800:	a1 81       	ldd	r26, Z+1	; 0x01
    2802:	b2 81       	ldd	r27, Z+2	; 0x02
    2804:	c0 91 fb 19 	lds	r28, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2808:	d0 91 fc 19 	lds	r29, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    280c:	bb 8b       	std	Y+19, r27	; 0x13
    280e:	aa 8b       	std	Y+18, r26	; 0x12
    2810:	c0 91 fb 19 	lds	r28, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2814:	d0 91 fc 19 	lds	r29, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2818:	16 96       	adiw	r26, 0x06	; 6
    281a:	8d 91       	ld	r24, X+
    281c:	9c 91       	ld	r25, X
    281e:	17 97       	sbiw	r26, 0x07	; 7
    2820:	9d 8b       	std	Y+21, r25	; 0x15
    2822:	8c 8b       	std	Y+20, r24	; 0x14
    2824:	16 96       	adiw	r26, 0x06	; 6
    2826:	cd 91       	ld	r28, X+
    2828:	dc 91       	ld	r29, X
    282a:	17 97       	sbiw	r26, 0x07	; 7
    282c:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2830:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2834:	0e 96       	adiw	r24, 0x0e	; 14
    2836:	9d 83       	std	Y+5, r25	; 0x05
    2838:	8c 83       	std	Y+4, r24	; 0x04
    283a:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    283e:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2842:	0e 96       	adiw	r24, 0x0e	; 14
    2844:	17 96       	adiw	r26, 0x07	; 7
    2846:	9c 93       	st	X, r25
    2848:	8e 93       	st	-X, r24
    284a:	16 97       	sbiw	r26, 0x06	; 6
    284c:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2850:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2854:	59 96       	adiw	r26, 0x19	; 25
    2856:	fc 93       	st	X, r31
    2858:	ee 93       	st	-X, r30
    285a:	58 97       	sbiw	r26, 0x18	; 24
    285c:	80 81       	ld	r24, Z
    285e:	8f 5f       	subi	r24, 0xFF	; 255
    2860:	80 83       	st	Z, r24
    2862:	41 e0       	ldi	r20, 0x01	; 1
    2864:	c9 01       	movw	r24, r18
    2866:	b8 01       	movw	r22, r16
    2868:	7d db       	rcall	.-2310   	; 0x1f64 <prvAddCurrentTaskToDelayedList>
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	08 95       	ret

00002874 <vTaskPlaceOnEventListRestricted>:
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	fc 01       	movw	r30, r24
    287a:	cb 01       	movw	r24, r22
    287c:	ba 01       	movw	r22, r20
    287e:	a1 81       	ldd	r26, Z+1	; 0x01
    2880:	b2 81       	ldd	r27, Z+2	; 0x02
    2882:	c0 91 fb 19 	lds	r28, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2886:	d0 91 fc 19 	lds	r29, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    288a:	bb 8b       	std	Y+19, r27	; 0x13
    288c:	aa 8b       	std	Y+18, r26	; 0x12
    288e:	c0 91 fb 19 	lds	r28, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2892:	d0 91 fc 19 	lds	r29, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2896:	16 96       	adiw	r26, 0x06	; 6
    2898:	4d 91       	ld	r20, X+
    289a:	5c 91       	ld	r21, X
    289c:	17 97       	sbiw	r26, 0x07	; 7
    289e:	5d 8b       	std	Y+21, r21	; 0x15
    28a0:	4c 8b       	std	Y+20, r20	; 0x14
    28a2:	16 96       	adiw	r26, 0x06	; 6
    28a4:	cd 91       	ld	r28, X+
    28a6:	dc 91       	ld	r29, X
    28a8:	17 97       	sbiw	r26, 0x07	; 7
    28aa:	40 91 fb 19 	lds	r20, 0x19FB	; 0x8019fb <pxCurrentTCB>
    28ae:	50 91 fc 19 	lds	r21, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    28b2:	42 5f       	subi	r20, 0xF2	; 242
    28b4:	5f 4f       	sbci	r21, 0xFF	; 255
    28b6:	5d 83       	std	Y+5, r21	; 0x05
    28b8:	4c 83       	std	Y+4, r20	; 0x04
    28ba:	40 91 fb 19 	lds	r20, 0x19FB	; 0x8019fb <pxCurrentTCB>
    28be:	50 91 fc 19 	lds	r21, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    28c2:	42 5f       	subi	r20, 0xF2	; 242
    28c4:	5f 4f       	sbci	r21, 0xFF	; 255
    28c6:	17 96       	adiw	r26, 0x07	; 7
    28c8:	5c 93       	st	X, r21
    28ca:	4e 93       	st	-X, r20
    28cc:	16 97       	sbiw	r26, 0x06	; 6
    28ce:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
    28d2:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    28d6:	59 96       	adiw	r26, 0x19	; 25
    28d8:	fc 93       	st	X, r31
    28da:	ee 93       	st	-X, r30
    28dc:	58 97       	sbiw	r26, 0x18	; 24
    28de:	30 81       	ld	r19, Z
    28e0:	3f 5f       	subi	r19, 0xFF	; 255
    28e2:	30 83       	st	Z, r19
    28e4:	22 23       	and	r18, r18
    28e6:	19 f0       	breq	.+6      	; 0x28ee <vTaskPlaceOnEventListRestricted+0x7a>
    28e8:	6f ef       	ldi	r22, 0xFF	; 255
    28ea:	7f ef       	ldi	r23, 0xFF	; 255
    28ec:	cb 01       	movw	r24, r22
    28ee:	42 2f       	mov	r20, r18
    28f0:	39 db       	rcall	.-2446   	; 0x1f64 <prvAddCurrentTaskToDelayedList>
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	08 95       	ret

000028f8 <xTaskRemoveFromEventList>:
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	dc 01       	movw	r26, r24
    28fe:	17 96       	adiw	r26, 0x07	; 7
    2900:	ed 91       	ld	r30, X+
    2902:	fc 91       	ld	r31, X
    2904:	18 97       	sbiw	r26, 0x08	; 8
    2906:	00 84       	ldd	r0, Z+8	; 0x08
    2908:	f1 85       	ldd	r31, Z+9	; 0x09
    290a:	e0 2d       	mov	r30, r0
    290c:	a0 8d       	ldd	r26, Z+24	; 0x18
    290e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2910:	c2 89       	ldd	r28, Z+18	; 0x12
    2912:	d3 89       	ldd	r29, Z+19	; 0x13
    2914:	84 89       	ldd	r24, Z+20	; 0x14
    2916:	95 89       	ldd	r25, Z+21	; 0x15
    2918:	9f 83       	std	Y+7, r25	; 0x07
    291a:	8e 83       	std	Y+6, r24	; 0x06
    291c:	c4 89       	ldd	r28, Z+20	; 0x14
    291e:	d5 89       	ldd	r29, Z+21	; 0x15
    2920:	82 89       	ldd	r24, Z+18	; 0x12
    2922:	93 89       	ldd	r25, Z+19	; 0x13
    2924:	9d 83       	std	Y+5, r25	; 0x05
    2926:	8c 83       	std	Y+4, r24	; 0x04
    2928:	11 96       	adiw	r26, 0x01	; 1
    292a:	8d 91       	ld	r24, X+
    292c:	9c 91       	ld	r25, X
    292e:	12 97       	sbiw	r26, 0x02	; 2
    2930:	9f 01       	movw	r18, r30
    2932:	22 5f       	subi	r18, 0xF2	; 242
    2934:	3f 4f       	sbci	r19, 0xFF	; 255
    2936:	82 17       	cp	r24, r18
    2938:	93 07       	cpc	r25, r19
    293a:	31 f4       	brne	.+12     	; 0x2948 <xTaskRemoveFromEventList+0x50>
    293c:	84 89       	ldd	r24, Z+20	; 0x14
    293e:	95 89       	ldd	r25, Z+21	; 0x15
    2940:	12 96       	adiw	r26, 0x02	; 2
    2942:	9c 93       	st	X, r25
    2944:	8e 93       	st	-X, r24
    2946:	11 97       	sbiw	r26, 0x01	; 1
    2948:	11 8e       	std	Z+25, r1	; 0x19
    294a:	10 8e       	std	Z+24, r1	; 0x18
    294c:	8c 91       	ld	r24, X
    294e:	81 50       	subi	r24, 0x01	; 1
    2950:	8c 93       	st	X, r24
    2952:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <uxSchedulerSuspended>
    2956:	81 11       	cpse	r24, r1
    2958:	52 c0       	rjmp	.+164    	; 0x29fe <xTaskRemoveFromEventList+0x106>
    295a:	a4 85       	ldd	r26, Z+12	; 0x0c
    295c:	b5 85       	ldd	r27, Z+13	; 0x0d
    295e:	c6 81       	ldd	r28, Z+6	; 0x06
    2960:	d7 81       	ldd	r29, Z+7	; 0x07
    2962:	80 85       	ldd	r24, Z+8	; 0x08
    2964:	91 85       	ldd	r25, Z+9	; 0x09
    2966:	9f 83       	std	Y+7, r25	; 0x07
    2968:	8e 83       	std	Y+6, r24	; 0x06
    296a:	c0 85       	ldd	r28, Z+8	; 0x08
    296c:	d1 85       	ldd	r29, Z+9	; 0x09
    296e:	86 81       	ldd	r24, Z+6	; 0x06
    2970:	97 81       	ldd	r25, Z+7	; 0x07
    2972:	9d 83       	std	Y+5, r25	; 0x05
    2974:	8c 83       	std	Y+4, r24	; 0x04
    2976:	11 96       	adiw	r26, 0x01	; 1
    2978:	8d 91       	ld	r24, X+
    297a:	9c 91       	ld	r25, X
    297c:	12 97       	sbiw	r26, 0x02	; 2
    297e:	9f 01       	movw	r18, r30
    2980:	2e 5f       	subi	r18, 0xFE	; 254
    2982:	3f 4f       	sbci	r19, 0xFF	; 255
    2984:	82 17       	cp	r24, r18
    2986:	93 07       	cpc	r25, r19
    2988:	31 f4       	brne	.+12     	; 0x2996 <xTaskRemoveFromEventList+0x9e>
    298a:	80 85       	ldd	r24, Z+8	; 0x08
    298c:	91 85       	ldd	r25, Z+9	; 0x09
    298e:	12 96       	adiw	r26, 0x02	; 2
    2990:	9c 93       	st	X, r25
    2992:	8e 93       	st	-X, r24
    2994:	11 97       	sbiw	r26, 0x01	; 1
    2996:	15 86       	std	Z+13, r1	; 0x0d
    2998:	14 86       	std	Z+12, r1	; 0x0c
    299a:	8c 91       	ld	r24, X
    299c:	81 50       	subi	r24, 0x01	; 1
    299e:	8c 93       	st	X, r24
    29a0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29a2:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uxTopReadyPriority>
    29a6:	8a 17       	cp	r24, r26
    29a8:	10 f4       	brcc	.+4      	; 0x29ae <xTaskRemoveFromEventList+0xb6>
    29aa:	a0 93 4b 19 	sts	0x194B, r26	; 0x80194b <uxTopReadyPriority>
    29ae:	8b e0       	ldi	r24, 0x0B	; 11
    29b0:	8a 9f       	mul	r24, r26
    29b2:	d0 01       	movw	r26, r0
    29b4:	11 24       	eor	r1, r1
    29b6:	a3 57       	subi	r26, 0x73	; 115
    29b8:	b6 4e       	sbci	r27, 0xE6	; 230
    29ba:	11 96       	adiw	r26, 0x01	; 1
    29bc:	0d 90       	ld	r0, X+
    29be:	bc 91       	ld	r27, X
    29c0:	a0 2d       	mov	r26, r0
    29c2:	b7 83       	std	Z+7, r27	; 0x07
    29c4:	a6 83       	std	Z+6, r26	; 0x06
    29c6:	16 96       	adiw	r26, 0x06	; 6
    29c8:	4d 91       	ld	r20, X+
    29ca:	5c 91       	ld	r21, X
    29cc:	17 97       	sbiw	r26, 0x07	; 7
    29ce:	51 87       	std	Z+9, r21	; 0x09
    29d0:	40 87       	std	Z+8, r20	; 0x08
    29d2:	16 96       	adiw	r26, 0x06	; 6
    29d4:	cd 91       	ld	r28, X+
    29d6:	dc 91       	ld	r29, X
    29d8:	17 97       	sbiw	r26, 0x07	; 7
    29da:	3d 83       	std	Y+5, r19	; 0x05
    29dc:	2c 83       	std	Y+4, r18	; 0x04
    29de:	17 96       	adiw	r26, 0x07	; 7
    29e0:	3c 93       	st	X, r19
    29e2:	2e 93       	st	-X, r18
    29e4:	16 97       	sbiw	r26, 0x06	; 6
    29e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29e8:	8a 9f       	mul	r24, r26
    29ea:	d0 01       	movw	r26, r0
    29ec:	11 24       	eor	r1, r1
    29ee:	a3 57       	subi	r26, 0x73	; 115
    29f0:	b6 4e       	sbci	r27, 0xE6	; 230
    29f2:	b5 87       	std	Z+13, r27	; 0x0d
    29f4:	a4 87       	std	Z+12, r26	; 0x0c
    29f6:	8c 91       	ld	r24, X
    29f8:	8f 5f       	subi	r24, 0xFF	; 255
    29fa:	8c 93       	st	X, r24
    29fc:	1c c0       	rjmp	.+56     	; 0x2a36 <xTaskRemoveFromEventList+0x13e>
    29fe:	48 e6       	ldi	r20, 0x68	; 104
    2a00:	59 e1       	ldi	r21, 0x19	; 25
    2a02:	da 01       	movw	r26, r20
    2a04:	11 96       	adiw	r26, 0x01	; 1
    2a06:	cd 91       	ld	r28, X+
    2a08:	dc 91       	ld	r29, X
    2a0a:	12 97       	sbiw	r26, 0x02	; 2
    2a0c:	d3 8b       	std	Z+19, r29	; 0x13
    2a0e:	c2 8b       	std	Z+18, r28	; 0x12
    2a10:	8e 81       	ldd	r24, Y+6	; 0x06
    2a12:	9f 81       	ldd	r25, Y+7	; 0x07
    2a14:	95 8b       	std	Z+21, r25	; 0x15
    2a16:	84 8b       	std	Z+20, r24	; 0x14
    2a18:	8e 81       	ldd	r24, Y+6	; 0x06
    2a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	15 96       	adiw	r26, 0x05	; 5
    2a20:	3c 93       	st	X, r19
    2a22:	2e 93       	st	-X, r18
    2a24:	14 97       	sbiw	r26, 0x04	; 4
    2a26:	3f 83       	std	Y+7, r19	; 0x07
    2a28:	2e 83       	std	Y+6, r18	; 0x06
    2a2a:	51 8f       	std	Z+25, r21	; 0x19
    2a2c:	40 8f       	std	Z+24, r20	; 0x18
    2a2e:	da 01       	movw	r26, r20
    2a30:	8c 91       	ld	r24, X
    2a32:	8f 5f       	subi	r24, 0xFF	; 255
    2a34:	8c 93       	st	X, r24
    2a36:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a38:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2a3c:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2a40:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a42:	89 17       	cp	r24, r25
    2a44:	20 f4       	brcc	.+8      	; 0x2a4e <xTaskRemoveFromEventList+0x156>
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <xYieldPending>
    2a4c:	01 c0       	rjmp	.+2      	; 0x2a50 <xTaskRemoveFromEventList+0x158>
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	df 91       	pop	r29
    2a52:	cf 91       	pop	r28
    2a54:	08 95       	ret

00002a56 <vTaskRemoveFromUnorderedEventList>:
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	70 68       	ori	r23, 0x80	; 128
    2a5e:	4d 93       	st	X+, r20
    2a60:	5d 93       	st	X+, r21
    2a62:	6d 93       	st	X+, r22
    2a64:	7c 93       	st	X, r23
    2a66:	13 97       	sbiw	r26, 0x03	; 3
    2a68:	18 96       	adiw	r26, 0x08	; 8
    2a6a:	ed 91       	ld	r30, X+
    2a6c:	fc 91       	ld	r31, X
    2a6e:	19 97       	sbiw	r26, 0x09	; 9
    2a70:	1a 96       	adiw	r26, 0x0a	; 10
    2a72:	4d 91       	ld	r20, X+
    2a74:	5c 91       	ld	r21, X
    2a76:	1b 97       	sbiw	r26, 0x0b	; 11
    2a78:	14 96       	adiw	r26, 0x04	; 4
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	9c 91       	ld	r25, X
    2a7e:	15 97       	sbiw	r26, 0x05	; 5
    2a80:	16 96       	adiw	r26, 0x06	; 6
    2a82:	2d 91       	ld	r18, X+
    2a84:	3c 91       	ld	r19, X
    2a86:	17 97       	sbiw	r26, 0x07	; 7
    2a88:	ec 01       	movw	r28, r24
    2a8a:	3f 83       	std	Y+7, r19	; 0x07
    2a8c:	2e 83       	std	Y+6, r18	; 0x06
    2a8e:	16 96       	adiw	r26, 0x06	; 6
    2a90:	8d 91       	ld	r24, X+
    2a92:	9c 91       	ld	r25, X
    2a94:	17 97       	sbiw	r26, 0x07	; 7
    2a96:	14 96       	adiw	r26, 0x04	; 4
    2a98:	2d 91       	ld	r18, X+
    2a9a:	3c 91       	ld	r19, X
    2a9c:	15 97       	sbiw	r26, 0x05	; 5
    2a9e:	ec 01       	movw	r28, r24
    2aa0:	3d 83       	std	Y+5, r19	; 0x05
    2aa2:	2c 83       	std	Y+4, r18	; 0x04
    2aa4:	ea 01       	movw	r28, r20
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aaa:	a8 17       	cp	r26, r24
    2aac:	b9 07       	cpc	r27, r25
    2aae:	31 f4       	brne	.+12     	; 0x2abc <vTaskRemoveFromUnorderedEventList+0x66>
    2ab0:	16 96       	adiw	r26, 0x06	; 6
    2ab2:	8d 91       	ld	r24, X+
    2ab4:	9c 91       	ld	r25, X
    2ab6:	17 97       	sbiw	r26, 0x07	; 7
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	89 83       	std	Y+1, r24	; 0x01
    2abc:	1b 96       	adiw	r26, 0x0b	; 11
    2abe:	1c 92       	st	X, r1
    2ac0:	1e 92       	st	-X, r1
    2ac2:	1a 97       	sbiw	r26, 0x0a	; 10
    2ac4:	da 01       	movw	r26, r20
    2ac6:	8c 91       	ld	r24, X
    2ac8:	81 50       	subi	r24, 0x01	; 1
    2aca:	8c 93       	st	X, r24
    2acc:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ace:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ad0:	c6 81       	ldd	r28, Z+6	; 0x06
    2ad2:	d7 81       	ldd	r29, Z+7	; 0x07
    2ad4:	80 85       	ldd	r24, Z+8	; 0x08
    2ad6:	91 85       	ldd	r25, Z+9	; 0x09
    2ad8:	9f 83       	std	Y+7, r25	; 0x07
    2ada:	8e 83       	std	Y+6, r24	; 0x06
    2adc:	c0 85       	ldd	r28, Z+8	; 0x08
    2ade:	d1 85       	ldd	r29, Z+9	; 0x09
    2ae0:	86 81       	ldd	r24, Z+6	; 0x06
    2ae2:	97 81       	ldd	r25, Z+7	; 0x07
    2ae4:	9d 83       	std	Y+5, r25	; 0x05
    2ae6:	8c 83       	std	Y+4, r24	; 0x04
    2ae8:	11 96       	adiw	r26, 0x01	; 1
    2aea:	8d 91       	ld	r24, X+
    2aec:	9c 91       	ld	r25, X
    2aee:	12 97       	sbiw	r26, 0x02	; 2
    2af0:	9f 01       	movw	r18, r30
    2af2:	2e 5f       	subi	r18, 0xFE	; 254
    2af4:	3f 4f       	sbci	r19, 0xFF	; 255
    2af6:	82 17       	cp	r24, r18
    2af8:	93 07       	cpc	r25, r19
    2afa:	31 f4       	brne	.+12     	; 0x2b08 <vTaskRemoveFromUnorderedEventList+0xb2>
    2afc:	80 85       	ldd	r24, Z+8	; 0x08
    2afe:	91 85       	ldd	r25, Z+9	; 0x09
    2b00:	12 96       	adiw	r26, 0x02	; 2
    2b02:	9c 93       	st	X, r25
    2b04:	8e 93       	st	-X, r24
    2b06:	11 97       	sbiw	r26, 0x01	; 1
    2b08:	15 86       	std	Z+13, r1	; 0x0d
    2b0a:	14 86       	std	Z+12, r1	; 0x0c
    2b0c:	8c 91       	ld	r24, X
    2b0e:	81 50       	subi	r24, 0x01	; 1
    2b10:	8c 93       	st	X, r24
    2b12:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b14:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uxTopReadyPriority>
    2b18:	8a 17       	cp	r24, r26
    2b1a:	10 f4       	brcc	.+4      	; 0x2b20 <vTaskRemoveFromUnorderedEventList+0xca>
    2b1c:	a0 93 4b 19 	sts	0x194B, r26	; 0x80194b <uxTopReadyPriority>
    2b20:	8b e0       	ldi	r24, 0x0B	; 11
    2b22:	8a 9f       	mul	r24, r26
    2b24:	d0 01       	movw	r26, r0
    2b26:	11 24       	eor	r1, r1
    2b28:	a3 57       	subi	r26, 0x73	; 115
    2b2a:	b6 4e       	sbci	r27, 0xE6	; 230
    2b2c:	11 96       	adiw	r26, 0x01	; 1
    2b2e:	0d 90       	ld	r0, X+
    2b30:	bc 91       	ld	r27, X
    2b32:	a0 2d       	mov	r26, r0
    2b34:	b7 83       	std	Z+7, r27	; 0x07
    2b36:	a6 83       	std	Z+6, r26	; 0x06
    2b38:	16 96       	adiw	r26, 0x06	; 6
    2b3a:	4d 91       	ld	r20, X+
    2b3c:	5c 91       	ld	r21, X
    2b3e:	17 97       	sbiw	r26, 0x07	; 7
    2b40:	51 87       	std	Z+9, r21	; 0x09
    2b42:	40 87       	std	Z+8, r20	; 0x08
    2b44:	16 96       	adiw	r26, 0x06	; 6
    2b46:	cd 91       	ld	r28, X+
    2b48:	dc 91       	ld	r29, X
    2b4a:	17 97       	sbiw	r26, 0x07	; 7
    2b4c:	3d 83       	std	Y+5, r19	; 0x05
    2b4e:	2c 83       	std	Y+4, r18	; 0x04
    2b50:	17 96       	adiw	r26, 0x07	; 7
    2b52:	3c 93       	st	X, r19
    2b54:	2e 93       	st	-X, r18
    2b56:	16 97       	sbiw	r26, 0x06	; 6
    2b58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b5a:	8a 9f       	mul	r24, r26
    2b5c:	d0 01       	movw	r26, r0
    2b5e:	11 24       	eor	r1, r1
    2b60:	a3 57       	subi	r26, 0x73	; 115
    2b62:	b6 4e       	sbci	r27, 0xE6	; 230
    2b64:	b5 87       	std	Z+13, r27	; 0x0d
    2b66:	a4 87       	std	Z+12, r26	; 0x0c
    2b68:	8c 91       	ld	r24, X
    2b6a:	8f 5f       	subi	r24, 0xFF	; 255
    2b6c:	8c 93       	st	X, r24
    2b6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b70:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2b74:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2b78:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b7a:	89 17       	cp	r24, r25
    2b7c:	18 f4       	brcc	.+6      	; 0x2b84 <vTaskRemoveFromUnorderedEventList+0x12e>
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <xYieldPending>
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	08 95       	ret

00002b8a <vTaskSetTimeOutState>:
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	0f 92       	push	r0
    2b90:	20 91 44 19 	lds	r18, 0x1944	; 0x801944 <xNumOfOverflows>
    2b94:	fc 01       	movw	r30, r24
    2b96:	20 83       	st	Z, r18
    2b98:	40 91 4c 19 	lds	r20, 0x194C	; 0x80194c <xTickCount>
    2b9c:	50 91 4d 19 	lds	r21, 0x194D	; 0x80194d <xTickCount+0x1>
    2ba0:	60 91 4e 19 	lds	r22, 0x194E	; 0x80194e <xTickCount+0x2>
    2ba4:	70 91 4f 19 	lds	r23, 0x194F	; 0x80194f <xTickCount+0x3>
    2ba8:	41 83       	std	Z+1, r20	; 0x01
    2baa:	52 83       	std	Z+2, r21	; 0x02
    2bac:	63 83       	std	Z+3, r22	; 0x03
    2bae:	74 83       	std	Z+4, r23	; 0x04
    2bb0:	0f 90       	pop	r0
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	08 95       	ret

00002bb6 <vTaskInternalSetTimeOutState>:
    2bb6:	20 91 44 19 	lds	r18, 0x1944	; 0x801944 <xNumOfOverflows>
    2bba:	fc 01       	movw	r30, r24
    2bbc:	20 83       	st	Z, r18
    2bbe:	40 91 4c 19 	lds	r20, 0x194C	; 0x80194c <xTickCount>
    2bc2:	50 91 4d 19 	lds	r21, 0x194D	; 0x80194d <xTickCount+0x1>
    2bc6:	60 91 4e 19 	lds	r22, 0x194E	; 0x80194e <xTickCount+0x2>
    2bca:	70 91 4f 19 	lds	r23, 0x194F	; 0x80194f <xTickCount+0x3>
    2bce:	41 83       	std	Z+1, r20	; 0x01
    2bd0:	52 83       	std	Z+2, r21	; 0x02
    2bd2:	63 83       	std	Z+3, r22	; 0x03
    2bd4:	74 83       	std	Z+4, r23	; 0x04
    2bd6:	08 95       	ret

00002bd8 <xTaskCheckForTimeOut>:
    2bd8:	8f 92       	push	r8
    2bda:	9f 92       	push	r9
    2bdc:	af 92       	push	r10
    2bde:	bf 92       	push	r11
    2be0:	cf 92       	push	r12
    2be2:	df 92       	push	r13
    2be4:	ef 92       	push	r14
    2be6:	ff 92       	push	r15
    2be8:	0f 93       	push	r16
    2bea:	1f 93       	push	r17
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	fb 01       	movw	r30, r22
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	0f 92       	push	r0
    2bf8:	c0 90 4c 19 	lds	r12, 0x194C	; 0x80194c <xTickCount>
    2bfc:	d0 90 4d 19 	lds	r13, 0x194D	; 0x80194d <xTickCount+0x1>
    2c00:	e0 90 4e 19 	lds	r14, 0x194E	; 0x80194e <xTickCount+0x2>
    2c04:	f0 90 4f 19 	lds	r15, 0x194F	; 0x80194f <xTickCount+0x3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	11 96       	adiw	r26, 0x01	; 1
    2c0c:	0d 91       	ld	r16, X+
    2c0e:	1d 91       	ld	r17, X+
    2c10:	2d 91       	ld	r18, X+
    2c12:	3c 91       	ld	r19, X
    2c14:	14 97       	sbiw	r26, 0x04	; 4
    2c16:	46 01       	movw	r8, r12
    2c18:	57 01       	movw	r10, r14
    2c1a:	80 1a       	sub	r8, r16
    2c1c:	91 0a       	sbc	r9, r17
    2c1e:	a2 0a       	sbc	r10, r18
    2c20:	b3 0a       	sbc	r11, r19
    2c22:	40 81       	ld	r20, Z
    2c24:	51 81       	ldd	r21, Z+1	; 0x01
    2c26:	62 81       	ldd	r22, Z+2	; 0x02
    2c28:	73 81       	ldd	r23, Z+3	; 0x03
    2c2a:	4f 3f       	cpi	r20, 0xFF	; 255
    2c2c:	bf ef       	ldi	r27, 0xFF	; 255
    2c2e:	5b 07       	cpc	r21, r27
    2c30:	6b 07       	cpc	r22, r27
    2c32:	7b 07       	cpc	r23, r27
    2c34:	39 f1       	breq	.+78     	; 0x2c84 <xTaskCheckForTimeOut+0xac>
    2c36:	ec 01       	movw	r28, r24
    2c38:	b8 81       	ld	r27, Y
    2c3a:	a0 91 44 19 	lds	r26, 0x1944	; 0x801944 <xNumOfOverflows>
    2c3e:	ba 17       	cp	r27, r26
    2c40:	59 f0       	breq	.+22     	; 0x2c58 <xTaskCheckForTimeOut+0x80>
    2c42:	c0 16       	cp	r12, r16
    2c44:	d1 06       	cpc	r13, r17
    2c46:	e2 06       	cpc	r14, r18
    2c48:	f3 06       	cpc	r15, r19
    2c4a:	30 f0       	brcs	.+12     	; 0x2c58 <xTaskCheckForTimeOut+0x80>
    2c4c:	10 82       	st	Z, r1
    2c4e:	11 82       	std	Z+1, r1	; 0x01
    2c50:	12 82       	std	Z+2, r1	; 0x02
    2c52:	13 82       	std	Z+3, r1	; 0x03
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	17 c0       	rjmp	.+46     	; 0x2c86 <xTaskCheckForTimeOut+0xae>
    2c58:	84 16       	cp	r8, r20
    2c5a:	95 06       	cpc	r9, r21
    2c5c:	a6 06       	cpc	r10, r22
    2c5e:	b7 06       	cpc	r11, r23
    2c60:	58 f4       	brcc	.+22     	; 0x2c78 <xTaskCheckForTimeOut+0xa0>
    2c62:	48 19       	sub	r20, r8
    2c64:	59 09       	sbc	r21, r9
    2c66:	6a 09       	sbc	r22, r10
    2c68:	7b 09       	sbc	r23, r11
    2c6a:	40 83       	st	Z, r20
    2c6c:	51 83       	std	Z+1, r21	; 0x01
    2c6e:	62 83       	std	Z+2, r22	; 0x02
    2c70:	73 83       	std	Z+3, r23	; 0x03
    2c72:	a1 df       	rcall	.-190    	; 0x2bb6 <vTaskInternalSetTimeOutState>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	07 c0       	rjmp	.+14     	; 0x2c86 <xTaskCheckForTimeOut+0xae>
    2c78:	10 82       	st	Z, r1
    2c7a:	11 82       	std	Z+1, r1	; 0x01
    2c7c:	12 82       	std	Z+2, r1	; 0x02
    2c7e:	13 82       	std	Z+3, r1	; 0x03
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	01 c0       	rjmp	.+2      	; 0x2c86 <xTaskCheckForTimeOut+0xae>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	0f 90       	pop	r0
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	1f 91       	pop	r17
    2c90:	0f 91       	pop	r16
    2c92:	ff 90       	pop	r15
    2c94:	ef 90       	pop	r14
    2c96:	df 90       	pop	r13
    2c98:	cf 90       	pop	r12
    2c9a:	bf 90       	pop	r11
    2c9c:	af 90       	pop	r10
    2c9e:	9f 90       	pop	r9
    2ca0:	8f 90       	pop	r8
    2ca2:	08 95       	ret

00002ca4 <vTaskMissedYield>:
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <xYieldPending>
    2caa:	08 95       	ret

00002cac <xTaskGetCurrentTaskHandle>:
    2cac:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2cb0:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2cb4:	08 95       	ret

00002cb6 <xTaskGetSchedulerState>:
    2cb6:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <xSchedulerRunning>
    2cba:	88 23       	and	r24, r24
    2cbc:	31 f0       	breq	.+12     	; 0x2cca <xTaskGetSchedulerState+0x14>
    2cbe:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <uxSchedulerSuspended>
    2cc2:	81 11       	cpse	r24, r1
    2cc4:	04 c0       	rjmp	.+8      	; 0x2cce <xTaskGetSchedulerState+0x18>
    2cc6:	82 e0       	ldi	r24, 0x02	; 2
    2cc8:	08 95       	ret
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	08 95       	ret
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	08 95       	ret

00002cd2 <xTaskPriorityInherit>:
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	fc 01       	movw	r30, r24
    2cdc:	89 2b       	or	r24, r25
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <xTaskPriorityInherit+0x10>
    2ce0:	77 c0       	rjmp	.+238    	; 0x2dd0 <xTaskPriorityInherit+0xfe>
    2ce2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ce4:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2ce8:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2cec:	5a 96       	adiw	r26, 0x1a	; 26
    2cee:	9c 91       	ld	r25, X
    2cf0:	89 17       	cp	r24, r25
    2cf2:	08 f0       	brcs	.+2      	; 0x2cf6 <xTaskPriorityInherit+0x24>
    2cf4:	63 c0       	rjmp	.+198    	; 0x2dbc <xTaskPriorityInherit+0xea>
    2cf6:	46 85       	ldd	r20, Z+14	; 0x0e
    2cf8:	57 85       	ldd	r21, Z+15	; 0x0f
    2cfa:	60 89       	ldd	r22, Z+16	; 0x10
    2cfc:	71 89       	ldd	r23, Z+17	; 0x11
    2cfe:	77 23       	and	r23, r23
    2d00:	94 f0       	brlt	.+36     	; 0x2d26 <xTaskPriorityInherit+0x54>
    2d02:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2d06:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2d0a:	5a 96       	adiw	r26, 0x1a	; 26
    2d0c:	9c 91       	ld	r25, X
    2d0e:	4a e0       	ldi	r20, 0x0A	; 10
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	70 e0       	ldi	r23, 0x00	; 0
    2d16:	49 1b       	sub	r20, r25
    2d18:	51 09       	sbc	r21, r1
    2d1a:	61 09       	sbc	r22, r1
    2d1c:	71 09       	sbc	r23, r1
    2d1e:	46 87       	std	Z+14, r20	; 0x0e
    2d20:	57 87       	std	Z+15, r21	; 0x0f
    2d22:	60 8b       	std	Z+16, r22	; 0x10
    2d24:	71 8b       	std	Z+17, r23	; 0x11
    2d26:	24 85       	ldd	r18, Z+12	; 0x0c
    2d28:	35 85       	ldd	r19, Z+13	; 0x0d
    2d2a:	4b e0       	ldi	r20, 0x0B	; 11
    2d2c:	84 9f       	mul	r24, r20
    2d2e:	c0 01       	movw	r24, r0
    2d30:	11 24       	eor	r1, r1
    2d32:	83 57       	subi	r24, 0x73	; 115
    2d34:	96 4e       	sbci	r25, 0xE6	; 230
    2d36:	28 17       	cp	r18, r24
    2d38:	39 07       	cpc	r19, r25
    2d3a:	b9 f5       	brne	.+110    	; 0x2daa <xTaskPriorityInherit+0xd8>
    2d3c:	ef 01       	movw	r28, r30
    2d3e:	8f 01       	movw	r16, r30
    2d40:	0e 5f       	subi	r16, 0xFE	; 254
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	c8 01       	movw	r24, r16
    2d46:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
    2d4a:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2d4e:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2d52:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2d54:	ea 8f       	std	Y+26, r30	; 0x1a
    2d56:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uxTopReadyPriority>
    2d5a:	8e 17       	cp	r24, r30
    2d5c:	10 f4       	brcc	.+4      	; 0x2d62 <xTaskPriorityInherit+0x90>
    2d5e:	e0 93 4b 19 	sts	0x194B, r30	; 0x80194b <uxTopReadyPriority>
    2d62:	8b e0       	ldi	r24, 0x0B	; 11
    2d64:	8e 9f       	mul	r24, r30
    2d66:	f0 01       	movw	r30, r0
    2d68:	11 24       	eor	r1, r1
    2d6a:	e3 57       	subi	r30, 0x73	; 115
    2d6c:	f6 4e       	sbci	r31, 0xE6	; 230
    2d6e:	01 80       	ldd	r0, Z+1	; 0x01
    2d70:	f2 81       	ldd	r31, Z+2	; 0x02
    2d72:	e0 2d       	mov	r30, r0
    2d74:	ff 83       	std	Y+7, r31	; 0x07
    2d76:	ee 83       	std	Y+6, r30	; 0x06
    2d78:	26 81       	ldd	r18, Z+6	; 0x06
    2d7a:	37 81       	ldd	r19, Z+7	; 0x07
    2d7c:	39 87       	std	Y+9, r19	; 0x09
    2d7e:	28 87       	std	Y+8, r18	; 0x08
    2d80:	a6 81       	ldd	r26, Z+6	; 0x06
    2d82:	b7 81       	ldd	r27, Z+7	; 0x07
    2d84:	15 96       	adiw	r26, 0x05	; 5
    2d86:	1c 93       	st	X, r17
    2d88:	0e 93       	st	-X, r16
    2d8a:	14 97       	sbiw	r26, 0x04	; 4
    2d8c:	17 83       	std	Z+7, r17	; 0x07
    2d8e:	06 83       	std	Z+6, r16	; 0x06
    2d90:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d92:	8e 9f       	mul	r24, r30
    2d94:	f0 01       	movw	r30, r0
    2d96:	11 24       	eor	r1, r1
    2d98:	e3 57       	subi	r30, 0x73	; 115
    2d9a:	f6 4e       	sbci	r31, 0xE6	; 230
    2d9c:	fd 87       	std	Y+13, r31	; 0x0d
    2d9e:	ec 87       	std	Y+12, r30	; 0x0c
    2da0:	80 81       	ld	r24, Z
    2da2:	8f 5f       	subi	r24, 0xFF	; 255
    2da4:	80 83       	st	Z, r24
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	16 c0       	rjmp	.+44     	; 0x2dd6 <xTaskPriorityInherit+0x104>
    2daa:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2dae:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2db2:	5a 96       	adiw	r26, 0x1a	; 26
    2db4:	8c 91       	ld	r24, X
    2db6:	82 8f       	std	Z+26, r24	; 0x1a
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	0d c0       	rjmp	.+26     	; 0x2dd6 <xTaskPriorityInherit+0x104>
    2dbc:	95 a5       	ldd	r25, Z+45	; 0x2d
    2dbe:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2dc2:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2dc6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dc8:	98 17       	cp	r25, r24
    2dca:	20 f0       	brcs	.+8      	; 0x2dd4 <xTaskPriorityInherit+0x102>
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	03 c0       	rjmp	.+6      	; 0x2dd6 <xTaskPriorityInherit+0x104>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	01 c0       	rjmp	.+2      	; 0x2dd6 <xTaskPriorityInherit+0x104>
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	08 95       	ret

00002de0 <xTaskPriorityDisinherit>:
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	fc 01       	movw	r30, r24
    2dea:	89 2b       	or	r24, r25
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <xTaskPriorityDisinherit+0x10>
    2dee:	49 c0       	rjmp	.+146    	; 0x2e82 <xTaskPriorityDisinherit+0xa2>
    2df0:	86 a5       	ldd	r24, Z+46	; 0x2e
    2df2:	81 50       	subi	r24, 0x01	; 1
    2df4:	86 a7       	std	Z+46, r24	; 0x2e
    2df6:	22 8d       	ldd	r18, Z+26	; 0x1a
    2df8:	95 a5       	ldd	r25, Z+45	; 0x2d
    2dfa:	29 17       	cp	r18, r25
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <xTaskPriorityDisinherit+0x20>
    2dfe:	43 c0       	rjmp	.+134    	; 0x2e86 <xTaskPriorityDisinherit+0xa6>
    2e00:	81 11       	cpse	r24, r1
    2e02:	43 c0       	rjmp	.+134    	; 0x2e8a <xTaskPriorityDisinherit+0xaa>
    2e04:	ef 01       	movw	r28, r30
    2e06:	8f 01       	movw	r16, r30
    2e08:	0e 5f       	subi	r16, 0xFE	; 254
    2e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0c:	c8 01       	movw	r24, r16
    2e0e:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
    2e12:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e14:	ea 8f       	std	Y+26, r30	; 0x1a
    2e16:	8a e0       	ldi	r24, 0x0A	; 10
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	a0 e0       	ldi	r26, 0x00	; 0
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	8e 1b       	sub	r24, r30
    2e20:	91 09       	sbc	r25, r1
    2e22:	a1 09       	sbc	r26, r1
    2e24:	b1 09       	sbc	r27, r1
    2e26:	8e 87       	std	Y+14, r24	; 0x0e
    2e28:	9f 87       	std	Y+15, r25	; 0x0f
    2e2a:	a8 8b       	std	Y+16, r26	; 0x10
    2e2c:	b9 8b       	std	Y+17, r27	; 0x11
    2e2e:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uxTopReadyPriority>
    2e32:	8e 17       	cp	r24, r30
    2e34:	10 f4       	brcc	.+4      	; 0x2e3a <xTaskPriorityDisinherit+0x5a>
    2e36:	e0 93 4b 19 	sts	0x194B, r30	; 0x80194b <uxTopReadyPriority>
    2e3a:	8b e0       	ldi	r24, 0x0B	; 11
    2e3c:	8e 9f       	mul	r24, r30
    2e3e:	f0 01       	movw	r30, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	e3 57       	subi	r30, 0x73	; 115
    2e44:	f6 4e       	sbci	r31, 0xE6	; 230
    2e46:	01 80       	ldd	r0, Z+1	; 0x01
    2e48:	f2 81       	ldd	r31, Z+2	; 0x02
    2e4a:	e0 2d       	mov	r30, r0
    2e4c:	ff 83       	std	Y+7, r31	; 0x07
    2e4e:	ee 83       	std	Y+6, r30	; 0x06
    2e50:	26 81       	ldd	r18, Z+6	; 0x06
    2e52:	37 81       	ldd	r19, Z+7	; 0x07
    2e54:	39 87       	std	Y+9, r19	; 0x09
    2e56:	28 87       	std	Y+8, r18	; 0x08
    2e58:	a6 81       	ldd	r26, Z+6	; 0x06
    2e5a:	b7 81       	ldd	r27, Z+7	; 0x07
    2e5c:	15 96       	adiw	r26, 0x05	; 5
    2e5e:	1c 93       	st	X, r17
    2e60:	0e 93       	st	-X, r16
    2e62:	14 97       	sbiw	r26, 0x04	; 4
    2e64:	17 83       	std	Z+7, r17	; 0x07
    2e66:	06 83       	std	Z+6, r16	; 0x06
    2e68:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e6a:	8e 9f       	mul	r24, r30
    2e6c:	f0 01       	movw	r30, r0
    2e6e:	11 24       	eor	r1, r1
    2e70:	e3 57       	subi	r30, 0x73	; 115
    2e72:	f6 4e       	sbci	r31, 0xE6	; 230
    2e74:	fd 87       	std	Y+13, r31	; 0x0d
    2e76:	ec 87       	std	Y+12, r30	; 0x0c
    2e78:	80 81       	ld	r24, Z
    2e7a:	8f 5f       	subi	r24, 0xFF	; 255
    2e7c:	80 83       	st	Z, r24
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	05 c0       	rjmp	.+10     	; 0x2e8c <xTaskPriorityDisinherit+0xac>
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	03 c0       	rjmp	.+6      	; 0x2e8c <xTaskPriorityDisinherit+0xac>
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	01 c0       	rjmp	.+2      	; 0x2e8c <xTaskPriorityDisinherit+0xac>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	08 95       	ret

00002e96 <vTaskPriorityDisinheritAfterTimeout>:
    2e96:	0f 93       	push	r16
    2e98:	1f 93       	push	r17
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	89 2b       	or	r24, r25
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2ea4:	5a c0       	rjmp	.+180    	; 0x2f5a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ea6:	85 a5       	ldd	r24, Z+45	; 0x2d
    2ea8:	86 17       	cp	r24, r22
    2eaa:	08 f4       	brcc	.+2      	; 0x2eae <vTaskPriorityDisinheritAfterTimeout+0x18>
    2eac:	86 2f       	mov	r24, r22
    2eae:	92 8d       	ldd	r25, Z+26	; 0x1a
    2eb0:	89 17       	cp	r24, r25
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2eb4:	52 c0       	rjmp	.+164    	; 0x2f5a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2eb6:	26 a5       	ldd	r18, Z+46	; 0x2e
    2eb8:	21 30       	cpi	r18, 0x01	; 1
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <vTaskPriorityDisinheritAfterTimeout+0x28>
    2ebc:	4e c0       	rjmp	.+156    	; 0x2f5a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ebe:	82 8f       	std	Z+26, r24	; 0x1a
    2ec0:	46 85       	ldd	r20, Z+14	; 0x0e
    2ec2:	57 85       	ldd	r21, Z+15	; 0x0f
    2ec4:	60 89       	ldd	r22, Z+16	; 0x10
    2ec6:	71 89       	ldd	r23, Z+17	; 0x11
    2ec8:	77 23       	and	r23, r23
    2eca:	64 f0       	brlt	.+24     	; 0x2ee4 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2ecc:	4a e0       	ldi	r20, 0x0A	; 10
    2ece:	50 e0       	ldi	r21, 0x00	; 0
    2ed0:	60 e0       	ldi	r22, 0x00	; 0
    2ed2:	70 e0       	ldi	r23, 0x00	; 0
    2ed4:	48 1b       	sub	r20, r24
    2ed6:	51 09       	sbc	r21, r1
    2ed8:	61 09       	sbc	r22, r1
    2eda:	71 09       	sbc	r23, r1
    2edc:	46 87       	std	Z+14, r20	; 0x0e
    2ede:	57 87       	std	Z+15, r21	; 0x0f
    2ee0:	60 8b       	std	Z+16, r22	; 0x10
    2ee2:	71 8b       	std	Z+17, r23	; 0x11
    2ee4:	24 85       	ldd	r18, Z+12	; 0x0c
    2ee6:	35 85       	ldd	r19, Z+13	; 0x0d
    2ee8:	4b e0       	ldi	r20, 0x0B	; 11
    2eea:	94 9f       	mul	r25, r20
    2eec:	c0 01       	movw	r24, r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	83 57       	subi	r24, 0x73	; 115
    2ef2:	96 4e       	sbci	r25, 0xE6	; 230
    2ef4:	28 17       	cp	r18, r24
    2ef6:	39 07       	cpc	r19, r25
    2ef8:	81 f5       	brne	.+96     	; 0x2f5a <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2efa:	ef 01       	movw	r28, r30
    2efc:	8f 01       	movw	r16, r30
    2efe:	0e 5f       	subi	r16, 0xFE	; 254
    2f00:	1f 4f       	sbci	r17, 0xFF	; 255
    2f02:	c8 01       	movw	r24, r16
    2f04:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
    2f08:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f0a:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uxTopReadyPriority>
    2f0e:	8e 17       	cp	r24, r30
    2f10:	10 f4       	brcc	.+4      	; 0x2f16 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2f12:	e0 93 4b 19 	sts	0x194B, r30	; 0x80194b <uxTopReadyPriority>
    2f16:	8b e0       	ldi	r24, 0x0B	; 11
    2f18:	8e 9f       	mul	r24, r30
    2f1a:	f0 01       	movw	r30, r0
    2f1c:	11 24       	eor	r1, r1
    2f1e:	e3 57       	subi	r30, 0x73	; 115
    2f20:	f6 4e       	sbci	r31, 0xE6	; 230
    2f22:	01 80       	ldd	r0, Z+1	; 0x01
    2f24:	f2 81       	ldd	r31, Z+2	; 0x02
    2f26:	e0 2d       	mov	r30, r0
    2f28:	ff 83       	std	Y+7, r31	; 0x07
    2f2a:	ee 83       	std	Y+6, r30	; 0x06
    2f2c:	26 81       	ldd	r18, Z+6	; 0x06
    2f2e:	37 81       	ldd	r19, Z+7	; 0x07
    2f30:	39 87       	std	Y+9, r19	; 0x09
    2f32:	28 87       	std	Y+8, r18	; 0x08
    2f34:	a6 81       	ldd	r26, Z+6	; 0x06
    2f36:	b7 81       	ldd	r27, Z+7	; 0x07
    2f38:	15 96       	adiw	r26, 0x05	; 5
    2f3a:	1c 93       	st	X, r17
    2f3c:	0e 93       	st	-X, r16
    2f3e:	14 97       	sbiw	r26, 0x04	; 4
    2f40:	17 83       	std	Z+7, r17	; 0x07
    2f42:	06 83       	std	Z+6, r16	; 0x06
    2f44:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f46:	8e 9f       	mul	r24, r30
    2f48:	f0 01       	movw	r30, r0
    2f4a:	11 24       	eor	r1, r1
    2f4c:	e3 57       	subi	r30, 0x73	; 115
    2f4e:	f6 4e       	sbci	r31, 0xE6	; 230
    2f50:	fd 87       	std	Y+13, r31	; 0x0d
    2f52:	ec 87       	std	Y+12, r30	; 0x0c
    2f54:	80 81       	ld	r24, Z
    2f56:	8f 5f       	subi	r24, 0xFF	; 255
    2f58:	80 83       	st	Z, r24
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	08 95       	ret

00002f64 <uxTaskResetEventItemValue>:
    2f64:	cf 92       	push	r12
    2f66:	df 92       	push	r13
    2f68:	ef 92       	push	r14
    2f6a:	ff 92       	push	r15
    2f6c:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2f70:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2f74:	66 85       	ldd	r22, Z+14	; 0x0e
    2f76:	77 85       	ldd	r23, Z+15	; 0x0f
    2f78:	80 89       	ldd	r24, Z+16	; 0x10
    2f7a:	91 89       	ldd	r25, Z+17	; 0x11
    2f7c:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2f80:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2f84:	a0 91 fb 19 	lds	r26, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2f88:	b0 91 fc 19 	lds	r27, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2f8c:	5a 96       	adiw	r26, 0x1a	; 26
    2f8e:	2c 91       	ld	r18, X
    2f90:	0f 2e       	mov	r0, r31
    2f92:	fa e0       	ldi	r31, 0x0A	; 10
    2f94:	cf 2e       	mov	r12, r31
    2f96:	d1 2c       	mov	r13, r1
    2f98:	e1 2c       	mov	r14, r1
    2f9a:	f1 2c       	mov	r15, r1
    2f9c:	f0 2d       	mov	r31, r0
    2f9e:	c2 1a       	sub	r12, r18
    2fa0:	d1 08       	sbc	r13, r1
    2fa2:	e1 08       	sbc	r14, r1
    2fa4:	f1 08       	sbc	r15, r1
    2fa6:	c6 86       	std	Z+14, r12	; 0x0e
    2fa8:	d7 86       	std	Z+15, r13	; 0x0f
    2faa:	e0 8a       	std	Z+16, r14	; 0x10
    2fac:	f1 8a       	std	Z+17, r15	; 0x11
    2fae:	ff 90       	pop	r15
    2fb0:	ef 90       	pop	r14
    2fb2:	df 90       	pop	r13
    2fb4:	cf 90       	pop	r12
    2fb6:	08 95       	ret

00002fb8 <pvTaskIncrementMutexHeldCount>:
    2fb8:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2fbc:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2fc0:	89 2b       	or	r24, r25
    2fc2:	39 f0       	breq	.+14     	; 0x2fd2 <pvTaskIncrementMutexHeldCount+0x1a>
    2fc4:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2fc8:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2fcc:	86 a5       	ldd	r24, Z+46	; 0x2e
    2fce:	8f 5f       	subi	r24, 0xFF	; 255
    2fd0:	86 a7       	std	Z+46, r24	; 0x2e
    2fd2:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    2fd6:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    2fda:	08 95       	ret

00002fdc <xTaskGenericNotifyWait>:
    2fdc:	4f 92       	push	r4
    2fde:	5f 92       	push	r5
    2fe0:	6f 92       	push	r6
    2fe2:	7f 92       	push	r7
    2fe4:	af 92       	push	r10
    2fe6:	bf 92       	push	r11
    2fe8:	cf 92       	push	r12
    2fea:	df 92       	push	r13
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	28 01       	movw	r4, r16
    2ffa:	39 01       	movw	r6, r18
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	0f 92       	push	r0
    3002:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    3006:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    300a:	c8 2f       	mov	r28, r24
    300c:	d0 e0       	ldi	r29, 0x00	; 0
    300e:	ec 0f       	add	r30, r28
    3010:	fd 1f       	adc	r31, r29
    3012:	83 a9       	ldd	r24, Z+51	; 0x33
    3014:	82 30       	cpi	r24, 0x02	; 2
    3016:	79 f1       	breq	.+94     	; 0x3076 <xTaskGenericNotifyWait+0x9a>
    3018:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    301c:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    3020:	ce 01       	movw	r24, r28
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	e8 0f       	add	r30, r24
    302c:	f9 1f       	adc	r31, r25
    302e:	87 a5       	ldd	r24, Z+47	; 0x2f
    3030:	90 a9       	ldd	r25, Z+48	; 0x30
    3032:	a1 a9       	ldd	r26, Z+49	; 0x31
    3034:	b2 a9       	ldd	r27, Z+50	; 0x32
    3036:	40 95       	com	r20
    3038:	50 95       	com	r21
    303a:	60 95       	com	r22
    303c:	70 95       	com	r23
    303e:	48 23       	and	r20, r24
    3040:	59 23       	and	r21, r25
    3042:	6a 23       	and	r22, r26
    3044:	7b 23       	and	r23, r27
    3046:	47 a7       	std	Z+47, r20	; 0x2f
    3048:	50 ab       	std	Z+48, r21	; 0x30
    304a:	61 ab       	std	Z+49, r22	; 0x31
    304c:	72 ab       	std	Z+50, r23	; 0x32
    304e:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    3052:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    3056:	ec 0f       	add	r30, r28
    3058:	fd 1f       	adc	r31, r29
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	83 ab       	std	Z+51, r24	; 0x33
    305e:	a1 14       	cp	r10, r1
    3060:	b1 04       	cpc	r11, r1
    3062:	c1 04       	cpc	r12, r1
    3064:	d1 04       	cpc	r13, r1
    3066:	39 f0       	breq	.+14     	; 0x3076 <xTaskGenericNotifyWait+0x9a>
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	c6 01       	movw	r24, r12
    306c:	b5 01       	movw	r22, r10
    306e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <prvAddCurrentTaskToDelayedList>
    3072:	0e 94 ac 06 	call	0xd58	; 0xd58 <vPortYield>
    3076:	0f 90       	pop	r0
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	f8 94       	cli
    307e:	0f 92       	push	r0
    3080:	e1 14       	cp	r14, r1
    3082:	f1 04       	cpc	r15, r1
    3084:	a1 f0       	breq	.+40     	; 0x30ae <xTaskGenericNotifyWait+0xd2>
    3086:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    308a:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    308e:	ce 01       	movw	r24, r28
    3090:	88 0f       	add	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	e8 0f       	add	r30, r24
    309a:	f9 1f       	adc	r31, r25
    309c:	87 a5       	ldd	r24, Z+47	; 0x2f
    309e:	90 a9       	ldd	r25, Z+48	; 0x30
    30a0:	a1 a9       	ldd	r26, Z+49	; 0x31
    30a2:	b2 a9       	ldd	r27, Z+50	; 0x32
    30a4:	f7 01       	movw	r30, r14
    30a6:	80 83       	st	Z, r24
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	a2 83       	std	Z+2, r26	; 0x02
    30ac:	b3 83       	std	Z+3, r27	; 0x03
    30ae:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    30b2:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    30b6:	ec 0f       	add	r30, r28
    30b8:	fd 1f       	adc	r31, r29
    30ba:	83 a9       	ldd	r24, Z+51	; 0x33
    30bc:	82 30       	cpi	r24, 0x02	; 2
    30be:	e9 f4       	brne	.+58     	; 0x30fa <xTaskGenericNotifyWait+0x11e>
    30c0:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    30c4:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    30c8:	ce 01       	movw	r24, r28
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	e8 0f       	add	r30, r24
    30d4:	f9 1f       	adc	r31, r25
    30d6:	87 a5       	ldd	r24, Z+47	; 0x2f
    30d8:	90 a9       	ldd	r25, Z+48	; 0x30
    30da:	a1 a9       	ldd	r26, Z+49	; 0x31
    30dc:	b2 a9       	ldd	r27, Z+50	; 0x32
    30de:	40 94       	com	r4
    30e0:	50 94       	com	r5
    30e2:	60 94       	com	r6
    30e4:	70 94       	com	r7
    30e6:	48 22       	and	r4, r24
    30e8:	59 22       	and	r5, r25
    30ea:	6a 22       	and	r6, r26
    30ec:	7b 22       	and	r7, r27
    30ee:	47 a6       	std	Z+47, r4	; 0x2f
    30f0:	50 aa       	std	Z+48, r5	; 0x30
    30f2:	61 aa       	std	Z+49, r6	; 0x31
    30f4:	72 aa       	std	Z+50, r7	; 0x32
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	01 c0       	rjmp	.+2      	; 0x30fc <xTaskGenericNotifyWait+0x120>
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	20 91 fb 19 	lds	r18, 0x19FB	; 0x8019fb <pxCurrentTCB>
    3100:	30 91 fc 19 	lds	r19, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    3104:	c2 0f       	add	r28, r18
    3106:	d3 1f       	adc	r29, r19
    3108:	1b aa       	std	Y+51, r1	; 0x33
    310a:	0f 90       	pop	r0
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	df 90       	pop	r13
    311c:	cf 90       	pop	r12
    311e:	bf 90       	pop	r11
    3120:	af 90       	pop	r10
    3122:	7f 90       	pop	r7
    3124:	6f 90       	pop	r6
    3126:	5f 90       	pop	r5
    3128:	4f 90       	pop	r4
    312a:	08 95       	ret

0000312c <xTaskGenericNotify>:
    312c:	8f 92       	push	r8
    312e:	9f 92       	push	r9
    3130:	af 92       	push	r10
    3132:	bf 92       	push	r11
    3134:	ef 92       	push	r14
    3136:	ff 92       	push	r15
    3138:	0f 93       	push	r16
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	dc 01       	movw	r26, r24
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	0f 92       	push	r0
    3146:	e1 14       	cp	r14, r1
    3148:	f1 04       	cpc	r15, r1
    314a:	89 f0       	breq	.+34     	; 0x316e <xTaskGenericNotify+0x42>
    314c:	e6 2f       	mov	r30, r22
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	ee 0f       	add	r30, r30
    3152:	ff 1f       	adc	r31, r31
    3154:	ee 0f       	add	r30, r30
    3156:	ff 1f       	adc	r31, r31
    3158:	e8 0f       	add	r30, r24
    315a:	f9 1f       	adc	r31, r25
    315c:	87 a4       	ldd	r8, Z+47	; 0x2f
    315e:	90 a8       	ldd	r9, Z+48	; 0x30
    3160:	a1 a8       	ldd	r10, Z+49	; 0x31
    3162:	b2 a8       	ldd	r11, Z+50	; 0x32
    3164:	f7 01       	movw	r30, r14
    3166:	80 82       	st	Z, r8
    3168:	91 82       	std	Z+1, r9	; 0x01
    316a:	a2 82       	std	Z+2, r10	; 0x02
    316c:	b3 82       	std	Z+3, r11	; 0x03
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	fd 01       	movw	r30, r26
    3172:	e6 0f       	add	r30, r22
    3174:	f7 1f       	adc	r31, r23
    3176:	83 a9       	ldd	r24, Z+51	; 0x33
    3178:	92 e0       	ldi	r25, 0x02	; 2
    317a:	93 ab       	std	Z+51, r25	; 0x33
    317c:	02 30       	cpi	r16, 0x02	; 2
    317e:	01 f1       	breq	.+64     	; 0x31c0 <xTaskGenericNotify+0x94>
    3180:	18 f4       	brcc	.+6      	; 0x3188 <xTaskGenericNotify+0x5c>
    3182:	01 30       	cpi	r16, 0x01	; 1
    3184:	31 f0       	breq	.+12     	; 0x3192 <xTaskGenericNotify+0x66>
    3186:	4d c0       	rjmp	.+154    	; 0x3222 <xTaskGenericNotify+0xf6>
    3188:	03 30       	cpi	r16, 0x03	; 3
    318a:	79 f1       	breq	.+94     	; 0x31ea <xTaskGenericNotify+0xbe>
    318c:	04 30       	cpi	r16, 0x04	; 4
    318e:	d1 f1       	breq	.+116    	; 0x3204 <xTaskGenericNotify+0xd8>
    3190:	48 c0       	rjmp	.+144    	; 0x3222 <xTaskGenericNotify+0xf6>
    3192:	66 0f       	add	r22, r22
    3194:	77 1f       	adc	r23, r23
    3196:	66 0f       	add	r22, r22
    3198:	77 1f       	adc	r23, r23
    319a:	fd 01       	movw	r30, r26
    319c:	e6 0f       	add	r30, r22
    319e:	f7 1f       	adc	r31, r23
    31a0:	87 a4       	ldd	r8, Z+47	; 0x2f
    31a2:	90 a8       	ldd	r9, Z+48	; 0x30
    31a4:	a1 a8       	ldd	r10, Z+49	; 0x31
    31a6:	b2 a8       	ldd	r11, Z+50	; 0x32
    31a8:	ba 01       	movw	r22, r20
    31aa:	a9 01       	movw	r20, r18
    31ac:	48 29       	or	r20, r8
    31ae:	59 29       	or	r21, r9
    31b0:	6a 29       	or	r22, r10
    31b2:	7b 29       	or	r23, r11
    31b4:	47 a7       	std	Z+47, r20	; 0x2f
    31b6:	50 ab       	std	Z+48, r21	; 0x30
    31b8:	61 ab       	std	Z+49, r22	; 0x31
    31ba:	72 ab       	std	Z+50, r23	; 0x32
    31bc:	01 e0       	ldi	r16, 0x01	; 1
    31be:	34 c0       	rjmp	.+104    	; 0x3228 <xTaskGenericNotify+0xfc>
    31c0:	66 0f       	add	r22, r22
    31c2:	77 1f       	adc	r23, r23
    31c4:	66 0f       	add	r22, r22
    31c6:	77 1f       	adc	r23, r23
    31c8:	fd 01       	movw	r30, r26
    31ca:	e6 0f       	add	r30, r22
    31cc:	f7 1f       	adc	r31, r23
    31ce:	47 a5       	ldd	r20, Z+47	; 0x2f
    31d0:	50 a9       	ldd	r21, Z+48	; 0x30
    31d2:	61 a9       	ldd	r22, Z+49	; 0x31
    31d4:	72 a9       	ldd	r23, Z+50	; 0x32
    31d6:	4f 5f       	subi	r20, 0xFF	; 255
    31d8:	5f 4f       	sbci	r21, 0xFF	; 255
    31da:	6f 4f       	sbci	r22, 0xFF	; 255
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	47 a7       	std	Z+47, r20	; 0x2f
    31e0:	50 ab       	std	Z+48, r21	; 0x30
    31e2:	61 ab       	std	Z+49, r22	; 0x31
    31e4:	72 ab       	std	Z+50, r23	; 0x32
    31e6:	01 e0       	ldi	r16, 0x01	; 1
    31e8:	1f c0       	rjmp	.+62     	; 0x3228 <xTaskGenericNotify+0xfc>
    31ea:	66 0f       	add	r22, r22
    31ec:	77 1f       	adc	r23, r23
    31ee:	66 0f       	add	r22, r22
    31f0:	77 1f       	adc	r23, r23
    31f2:	fd 01       	movw	r30, r26
    31f4:	e6 0f       	add	r30, r22
    31f6:	f7 1f       	adc	r31, r23
    31f8:	27 a7       	std	Z+47, r18	; 0x2f
    31fa:	30 ab       	std	Z+48, r19	; 0x30
    31fc:	41 ab       	std	Z+49, r20	; 0x31
    31fe:	52 ab       	std	Z+50, r21	; 0x32
    3200:	01 e0       	ldi	r16, 0x01	; 1
    3202:	12 c0       	rjmp	.+36     	; 0x3228 <xTaskGenericNotify+0xfc>
    3204:	82 30       	cpi	r24, 0x02	; 2
    3206:	79 f0       	breq	.+30     	; 0x3226 <xTaskGenericNotify+0xfa>
    3208:	66 0f       	add	r22, r22
    320a:	77 1f       	adc	r23, r23
    320c:	66 0f       	add	r22, r22
    320e:	77 1f       	adc	r23, r23
    3210:	fd 01       	movw	r30, r26
    3212:	e6 0f       	add	r30, r22
    3214:	f7 1f       	adc	r31, r23
    3216:	27 a7       	std	Z+47, r18	; 0x2f
    3218:	30 ab       	std	Z+48, r19	; 0x30
    321a:	41 ab       	std	Z+49, r20	; 0x31
    321c:	52 ab       	std	Z+50, r21	; 0x32
    321e:	01 e0       	ldi	r16, 0x01	; 1
    3220:	03 c0       	rjmp	.+6      	; 0x3228 <xTaskGenericNotify+0xfc>
    3222:	01 e0       	ldi	r16, 0x01	; 1
    3224:	01 c0       	rjmp	.+2      	; 0x3228 <xTaskGenericNotify+0xfc>
    3226:	00 e0       	ldi	r16, 0x00	; 0
    3228:	81 30       	cpi	r24, 0x01	; 1
    322a:	09 f0       	breq	.+2      	; 0x322e <xTaskGenericNotify+0x102>
    322c:	69 c0       	rjmp	.+210    	; 0x3300 <xTaskGenericNotify+0x1d4>
    322e:	1c 96       	adiw	r26, 0x0c	; 12
    3230:	ed 91       	ld	r30, X+
    3232:	fc 91       	ld	r31, X
    3234:	1d 97       	sbiw	r26, 0x0d	; 13
    3236:	16 96       	adiw	r26, 0x06	; 6
    3238:	cd 91       	ld	r28, X+
    323a:	dc 91       	ld	r29, X
    323c:	17 97       	sbiw	r26, 0x07	; 7
    323e:	18 96       	adiw	r26, 0x08	; 8
    3240:	8d 91       	ld	r24, X+
    3242:	9c 91       	ld	r25, X
    3244:	19 97       	sbiw	r26, 0x09	; 9
    3246:	9f 83       	std	Y+7, r25	; 0x07
    3248:	8e 83       	std	Y+6, r24	; 0x06
    324a:	18 96       	adiw	r26, 0x08	; 8
    324c:	cd 91       	ld	r28, X+
    324e:	dc 91       	ld	r29, X
    3250:	19 97       	sbiw	r26, 0x09	; 9
    3252:	16 96       	adiw	r26, 0x06	; 6
    3254:	8d 91       	ld	r24, X+
    3256:	9c 91       	ld	r25, X
    3258:	17 97       	sbiw	r26, 0x07	; 7
    325a:	9d 83       	std	Y+5, r25	; 0x05
    325c:	8c 83       	std	Y+4, r24	; 0x04
    325e:	81 81       	ldd	r24, Z+1	; 0x01
    3260:	92 81       	ldd	r25, Z+2	; 0x02
    3262:	9d 01       	movw	r18, r26
    3264:	2e 5f       	subi	r18, 0xFE	; 254
    3266:	3f 4f       	sbci	r19, 0xFF	; 255
    3268:	82 17       	cp	r24, r18
    326a:	93 07       	cpc	r25, r19
    326c:	31 f4       	brne	.+12     	; 0x327a <xTaskGenericNotify+0x14e>
    326e:	18 96       	adiw	r26, 0x08	; 8
    3270:	8d 91       	ld	r24, X+
    3272:	9c 91       	ld	r25, X
    3274:	19 97       	sbiw	r26, 0x09	; 9
    3276:	92 83       	std	Z+2, r25	; 0x02
    3278:	81 83       	std	Z+1, r24	; 0x01
    327a:	1d 96       	adiw	r26, 0x0d	; 13
    327c:	1c 92       	st	X, r1
    327e:	1e 92       	st	-X, r1
    3280:	1c 97       	sbiw	r26, 0x0c	; 12
    3282:	80 81       	ld	r24, Z
    3284:	81 50       	subi	r24, 0x01	; 1
    3286:	80 83       	st	Z, r24
    3288:	5a 96       	adiw	r26, 0x1a	; 26
    328a:	ec 91       	ld	r30, X
    328c:	5a 97       	sbiw	r26, 0x1a	; 26
    328e:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uxTopReadyPriority>
    3292:	8e 17       	cp	r24, r30
    3294:	10 f4       	brcc	.+4      	; 0x329a <xTaskGenericNotify+0x16e>
    3296:	e0 93 4b 19 	sts	0x194B, r30	; 0x80194b <uxTopReadyPriority>
    329a:	8b e0       	ldi	r24, 0x0B	; 11
    329c:	8e 9f       	mul	r24, r30
    329e:	f0 01       	movw	r30, r0
    32a0:	11 24       	eor	r1, r1
    32a2:	e3 57       	subi	r30, 0x73	; 115
    32a4:	f6 4e       	sbci	r31, 0xE6	; 230
    32a6:	01 80       	ldd	r0, Z+1	; 0x01
    32a8:	f2 81       	ldd	r31, Z+2	; 0x02
    32aa:	e0 2d       	mov	r30, r0
    32ac:	17 96       	adiw	r26, 0x07	; 7
    32ae:	fc 93       	st	X, r31
    32b0:	ee 93       	st	-X, r30
    32b2:	16 97       	sbiw	r26, 0x06	; 6
    32b4:	46 81       	ldd	r20, Z+6	; 0x06
    32b6:	57 81       	ldd	r21, Z+7	; 0x07
    32b8:	19 96       	adiw	r26, 0x09	; 9
    32ba:	5c 93       	st	X, r21
    32bc:	4e 93       	st	-X, r20
    32be:	18 97       	sbiw	r26, 0x08	; 8
    32c0:	c6 81       	ldd	r28, Z+6	; 0x06
    32c2:	d7 81       	ldd	r29, Z+7	; 0x07
    32c4:	3d 83       	std	Y+5, r19	; 0x05
    32c6:	2c 83       	std	Y+4, r18	; 0x04
    32c8:	37 83       	std	Z+7, r19	; 0x07
    32ca:	26 83       	std	Z+6, r18	; 0x06
    32cc:	5a 96       	adiw	r26, 0x1a	; 26
    32ce:	ec 91       	ld	r30, X
    32d0:	5a 97       	sbiw	r26, 0x1a	; 26
    32d2:	8e 9f       	mul	r24, r30
    32d4:	f0 01       	movw	r30, r0
    32d6:	11 24       	eor	r1, r1
    32d8:	e3 57       	subi	r30, 0x73	; 115
    32da:	f6 4e       	sbci	r31, 0xE6	; 230
    32dc:	1d 96       	adiw	r26, 0x0d	; 13
    32de:	fc 93       	st	X, r31
    32e0:	ee 93       	st	-X, r30
    32e2:	1c 97       	sbiw	r26, 0x0c	; 12
    32e4:	80 81       	ld	r24, Z
    32e6:	8f 5f       	subi	r24, 0xFF	; 255
    32e8:	80 83       	st	Z, r24
    32ea:	5a 96       	adiw	r26, 0x1a	; 26
    32ec:	9c 91       	ld	r25, X
    32ee:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    32f2:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    32f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    32f8:	89 17       	cp	r24, r25
    32fa:	10 f4       	brcc	.+4      	; 0x3300 <xTaskGenericNotify+0x1d4>
    32fc:	0e 94 ac 06 	call	0xd58	; 0xd58 <vPortYield>
    3300:	0f 90       	pop	r0
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	80 2f       	mov	r24, r16
    3306:	df 91       	pop	r29
    3308:	cf 91       	pop	r28
    330a:	0f 91       	pop	r16
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	bf 90       	pop	r11
    3312:	af 90       	pop	r10
    3314:	9f 90       	pop	r9
    3316:	8f 90       	pop	r8
    3318:	08 95       	ret

0000331a <xTaskGenericNotifyFromISR>:
    331a:	8f 92       	push	r8
    331c:	9f 92       	push	r9
    331e:	af 92       	push	r10
    3320:	bf 92       	push	r11
    3322:	cf 92       	push	r12
    3324:	df 92       	push	r13
    3326:	ef 92       	push	r14
    3328:	ff 92       	push	r15
    332a:	0f 93       	push	r16
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	dc 01       	movw	r26, r24
    3332:	e1 14       	cp	r14, r1
    3334:	f1 04       	cpc	r15, r1
    3336:	89 f0       	breq	.+34     	; 0x335a <xTaskGenericNotifyFromISR+0x40>
    3338:	e6 2f       	mov	r30, r22
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	ee 0f       	add	r30, r30
    333e:	ff 1f       	adc	r31, r31
    3340:	ee 0f       	add	r30, r30
    3342:	ff 1f       	adc	r31, r31
    3344:	e8 0f       	add	r30, r24
    3346:	f9 1f       	adc	r31, r25
    3348:	87 a4       	ldd	r8, Z+47	; 0x2f
    334a:	90 a8       	ldd	r9, Z+48	; 0x30
    334c:	a1 a8       	ldd	r10, Z+49	; 0x31
    334e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3350:	f7 01       	movw	r30, r14
    3352:	80 82       	st	Z, r8
    3354:	91 82       	std	Z+1, r9	; 0x01
    3356:	a2 82       	std	Z+2, r10	; 0x02
    3358:	b3 82       	std	Z+3, r11	; 0x03
    335a:	70 e0       	ldi	r23, 0x00	; 0
    335c:	fd 01       	movw	r30, r26
    335e:	e6 0f       	add	r30, r22
    3360:	f7 1f       	adc	r31, r23
    3362:	93 a9       	ldd	r25, Z+51	; 0x33
    3364:	82 e0       	ldi	r24, 0x02	; 2
    3366:	83 ab       	std	Z+51, r24	; 0x33
    3368:	02 30       	cpi	r16, 0x02	; 2
    336a:	01 f1       	breq	.+64     	; 0x33ac <xTaskGenericNotifyFromISR+0x92>
    336c:	18 f4       	brcc	.+6      	; 0x3374 <xTaskGenericNotifyFromISR+0x5a>
    336e:	01 30       	cpi	r16, 0x01	; 1
    3370:	31 f0       	breq	.+12     	; 0x337e <xTaskGenericNotifyFromISR+0x64>
    3372:	4d c0       	rjmp	.+154    	; 0x340e <xTaskGenericNotifyFromISR+0xf4>
    3374:	03 30       	cpi	r16, 0x03	; 3
    3376:	79 f1       	breq	.+94     	; 0x33d6 <xTaskGenericNotifyFromISR+0xbc>
    3378:	04 30       	cpi	r16, 0x04	; 4
    337a:	d1 f1       	breq	.+116    	; 0x33f0 <xTaskGenericNotifyFromISR+0xd6>
    337c:	48 c0       	rjmp	.+144    	; 0x340e <xTaskGenericNotifyFromISR+0xf4>
    337e:	66 0f       	add	r22, r22
    3380:	77 1f       	adc	r23, r23
    3382:	66 0f       	add	r22, r22
    3384:	77 1f       	adc	r23, r23
    3386:	fd 01       	movw	r30, r26
    3388:	e6 0f       	add	r30, r22
    338a:	f7 1f       	adc	r31, r23
    338c:	87 a4       	ldd	r8, Z+47	; 0x2f
    338e:	90 a8       	ldd	r9, Z+48	; 0x30
    3390:	a1 a8       	ldd	r10, Z+49	; 0x31
    3392:	b2 a8       	ldd	r11, Z+50	; 0x32
    3394:	ba 01       	movw	r22, r20
    3396:	a9 01       	movw	r20, r18
    3398:	48 29       	or	r20, r8
    339a:	59 29       	or	r21, r9
    339c:	6a 29       	or	r22, r10
    339e:	7b 29       	or	r23, r11
    33a0:	47 a7       	std	Z+47, r20	; 0x2f
    33a2:	50 ab       	std	Z+48, r21	; 0x30
    33a4:	61 ab       	std	Z+49, r22	; 0x31
    33a6:	72 ab       	std	Z+50, r23	; 0x32
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	34 c0       	rjmp	.+104    	; 0x3414 <xTaskGenericNotifyFromISR+0xfa>
    33ac:	66 0f       	add	r22, r22
    33ae:	77 1f       	adc	r23, r23
    33b0:	66 0f       	add	r22, r22
    33b2:	77 1f       	adc	r23, r23
    33b4:	fd 01       	movw	r30, r26
    33b6:	e6 0f       	add	r30, r22
    33b8:	f7 1f       	adc	r31, r23
    33ba:	47 a5       	ldd	r20, Z+47	; 0x2f
    33bc:	50 a9       	ldd	r21, Z+48	; 0x30
    33be:	61 a9       	ldd	r22, Z+49	; 0x31
    33c0:	72 a9       	ldd	r23, Z+50	; 0x32
    33c2:	4f 5f       	subi	r20, 0xFF	; 255
    33c4:	5f 4f       	sbci	r21, 0xFF	; 255
    33c6:	6f 4f       	sbci	r22, 0xFF	; 255
    33c8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ca:	47 a7       	std	Z+47, r20	; 0x2f
    33cc:	50 ab       	std	Z+48, r21	; 0x30
    33ce:	61 ab       	std	Z+49, r22	; 0x31
    33d0:	72 ab       	std	Z+50, r23	; 0x32
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	1f c0       	rjmp	.+62     	; 0x3414 <xTaskGenericNotifyFromISR+0xfa>
    33d6:	66 0f       	add	r22, r22
    33d8:	77 1f       	adc	r23, r23
    33da:	66 0f       	add	r22, r22
    33dc:	77 1f       	adc	r23, r23
    33de:	fd 01       	movw	r30, r26
    33e0:	e6 0f       	add	r30, r22
    33e2:	f7 1f       	adc	r31, r23
    33e4:	27 a7       	std	Z+47, r18	; 0x2f
    33e6:	30 ab       	std	Z+48, r19	; 0x30
    33e8:	41 ab       	std	Z+49, r20	; 0x31
    33ea:	52 ab       	std	Z+50, r21	; 0x32
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	12 c0       	rjmp	.+36     	; 0x3414 <xTaskGenericNotifyFromISR+0xfa>
    33f0:	92 30       	cpi	r25, 0x02	; 2
    33f2:	79 f0       	breq	.+30     	; 0x3412 <xTaskGenericNotifyFromISR+0xf8>
    33f4:	66 0f       	add	r22, r22
    33f6:	77 1f       	adc	r23, r23
    33f8:	66 0f       	add	r22, r22
    33fa:	77 1f       	adc	r23, r23
    33fc:	fd 01       	movw	r30, r26
    33fe:	e6 0f       	add	r30, r22
    3400:	f7 1f       	adc	r31, r23
    3402:	27 a7       	std	Z+47, r18	; 0x2f
    3404:	30 ab       	std	Z+48, r19	; 0x30
    3406:	41 ab       	std	Z+49, r20	; 0x31
    3408:	52 ab       	std	Z+50, r21	; 0x32
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	03 c0       	rjmp	.+6      	; 0x3414 <xTaskGenericNotifyFromISR+0xfa>
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	01 c0       	rjmp	.+2      	; 0x3414 <xTaskGenericNotifyFromISR+0xfa>
    3412:	80 e0       	ldi	r24, 0x00	; 0
    3414:	91 30       	cpi	r25, 0x01	; 1
    3416:	09 f0       	breq	.+2      	; 0x341a <xTaskGenericNotifyFromISR+0x100>
    3418:	96 c0       	rjmp	.+300    	; 0x3546 <xTaskGenericNotifyFromISR+0x22c>
    341a:	90 91 3c 19 	lds	r25, 0x193C	; 0x80193c <uxSchedulerSuspended>
    341e:	91 11       	cpse	r25, r1
    3420:	5f c0       	rjmp	.+190    	; 0x34e0 <xTaskGenericNotifyFromISR+0x1c6>
    3422:	1c 96       	adiw	r26, 0x0c	; 12
    3424:	ed 91       	ld	r30, X+
    3426:	fc 91       	ld	r31, X
    3428:	1d 97       	sbiw	r26, 0x0d	; 13
    342a:	16 96       	adiw	r26, 0x06	; 6
    342c:	cd 91       	ld	r28, X+
    342e:	dc 91       	ld	r29, X
    3430:	17 97       	sbiw	r26, 0x07	; 7
    3432:	18 96       	adiw	r26, 0x08	; 8
    3434:	2d 91       	ld	r18, X+
    3436:	3c 91       	ld	r19, X
    3438:	19 97       	sbiw	r26, 0x09	; 9
    343a:	3f 83       	std	Y+7, r19	; 0x07
    343c:	2e 83       	std	Y+6, r18	; 0x06
    343e:	18 96       	adiw	r26, 0x08	; 8
    3440:	cd 91       	ld	r28, X+
    3442:	dc 91       	ld	r29, X
    3444:	19 97       	sbiw	r26, 0x09	; 9
    3446:	16 96       	adiw	r26, 0x06	; 6
    3448:	2d 91       	ld	r18, X+
    344a:	3c 91       	ld	r19, X
    344c:	17 97       	sbiw	r26, 0x07	; 7
    344e:	3d 83       	std	Y+5, r19	; 0x05
    3450:	2c 83       	std	Y+4, r18	; 0x04
    3452:	41 81       	ldd	r20, Z+1	; 0x01
    3454:	52 81       	ldd	r21, Z+2	; 0x02
    3456:	9d 01       	movw	r18, r26
    3458:	2e 5f       	subi	r18, 0xFE	; 254
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	42 17       	cp	r20, r18
    345e:	53 07       	cpc	r21, r19
    3460:	31 f4       	brne	.+12     	; 0x346e <xTaskGenericNotifyFromISR+0x154>
    3462:	18 96       	adiw	r26, 0x08	; 8
    3464:	4d 91       	ld	r20, X+
    3466:	5c 91       	ld	r21, X
    3468:	19 97       	sbiw	r26, 0x09	; 9
    346a:	52 83       	std	Z+2, r21	; 0x02
    346c:	41 83       	std	Z+1, r20	; 0x01
    346e:	1d 96       	adiw	r26, 0x0d	; 13
    3470:	1c 92       	st	X, r1
    3472:	1e 92       	st	-X, r1
    3474:	1c 97       	sbiw	r26, 0x0c	; 12
    3476:	90 81       	ld	r25, Z
    3478:	91 50       	subi	r25, 0x01	; 1
    347a:	90 83       	st	Z, r25
    347c:	5a 96       	adiw	r26, 0x1a	; 26
    347e:	ec 91       	ld	r30, X
    3480:	5a 97       	sbiw	r26, 0x1a	; 26
    3482:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <uxTopReadyPriority>
    3486:	9e 17       	cp	r25, r30
    3488:	10 f4       	brcc	.+4      	; 0x348e <xTaskGenericNotifyFromISR+0x174>
    348a:	e0 93 4b 19 	sts	0x194B, r30	; 0x80194b <uxTopReadyPriority>
    348e:	9b e0       	ldi	r25, 0x0B	; 11
    3490:	9e 9f       	mul	r25, r30
    3492:	f0 01       	movw	r30, r0
    3494:	11 24       	eor	r1, r1
    3496:	e3 57       	subi	r30, 0x73	; 115
    3498:	f6 4e       	sbci	r31, 0xE6	; 230
    349a:	01 80       	ldd	r0, Z+1	; 0x01
    349c:	f2 81       	ldd	r31, Z+2	; 0x02
    349e:	e0 2d       	mov	r30, r0
    34a0:	17 96       	adiw	r26, 0x07	; 7
    34a2:	fc 93       	st	X, r31
    34a4:	ee 93       	st	-X, r30
    34a6:	16 97       	sbiw	r26, 0x06	; 6
    34a8:	46 81       	ldd	r20, Z+6	; 0x06
    34aa:	57 81       	ldd	r21, Z+7	; 0x07
    34ac:	19 96       	adiw	r26, 0x09	; 9
    34ae:	5c 93       	st	X, r21
    34b0:	4e 93       	st	-X, r20
    34b2:	18 97       	sbiw	r26, 0x08	; 8
    34b4:	c6 81       	ldd	r28, Z+6	; 0x06
    34b6:	d7 81       	ldd	r29, Z+7	; 0x07
    34b8:	3d 83       	std	Y+5, r19	; 0x05
    34ba:	2c 83       	std	Y+4, r18	; 0x04
    34bc:	37 83       	std	Z+7, r19	; 0x07
    34be:	26 83       	std	Z+6, r18	; 0x06
    34c0:	5a 96       	adiw	r26, 0x1a	; 26
    34c2:	ec 91       	ld	r30, X
    34c4:	5a 97       	sbiw	r26, 0x1a	; 26
    34c6:	9e 9f       	mul	r25, r30
    34c8:	f0 01       	movw	r30, r0
    34ca:	11 24       	eor	r1, r1
    34cc:	e3 57       	subi	r30, 0x73	; 115
    34ce:	f6 4e       	sbci	r31, 0xE6	; 230
    34d0:	1d 96       	adiw	r26, 0x0d	; 13
    34d2:	fc 93       	st	X, r31
    34d4:	ee 93       	st	-X, r30
    34d6:	1c 97       	sbiw	r26, 0x0c	; 12
    34d8:	90 81       	ld	r25, Z
    34da:	9f 5f       	subi	r25, 0xFF	; 255
    34dc:	90 83       	st	Z, r25
    34de:	21 c0       	rjmp	.+66     	; 0x3522 <xTaskGenericNotifyFromISR+0x208>
    34e0:	68 e6       	ldi	r22, 0x68	; 104
    34e2:	79 e1       	ldi	r23, 0x19	; 25
    34e4:	fb 01       	movw	r30, r22
    34e6:	c1 81       	ldd	r28, Z+1	; 0x01
    34e8:	d2 81       	ldd	r29, Z+2	; 0x02
    34ea:	53 96       	adiw	r26, 0x13	; 19
    34ec:	dc 93       	st	X, r29
    34ee:	ce 93       	st	-X, r28
    34f0:	52 97       	sbiw	r26, 0x12	; 18
    34f2:	2e 81       	ldd	r18, Y+6	; 0x06
    34f4:	3f 81       	ldd	r19, Y+7	; 0x07
    34f6:	55 96       	adiw	r26, 0x15	; 21
    34f8:	3c 93       	st	X, r19
    34fa:	2e 93       	st	-X, r18
    34fc:	54 97       	sbiw	r26, 0x14	; 20
    34fe:	4e 81       	ldd	r20, Y+6	; 0x06
    3500:	5f 81       	ldd	r21, Y+7	; 0x07
    3502:	9d 01       	movw	r18, r26
    3504:	22 5f       	subi	r18, 0xF2	; 242
    3506:	3f 4f       	sbci	r19, 0xFF	; 255
    3508:	fa 01       	movw	r30, r20
    350a:	35 83       	std	Z+5, r19	; 0x05
    350c:	24 83       	std	Z+4, r18	; 0x04
    350e:	3f 83       	std	Y+7, r19	; 0x07
    3510:	2e 83       	std	Y+6, r18	; 0x06
    3512:	59 96       	adiw	r26, 0x19	; 25
    3514:	7c 93       	st	X, r23
    3516:	6e 93       	st	-X, r22
    3518:	58 97       	sbiw	r26, 0x18	; 24
    351a:	fb 01       	movw	r30, r22
    351c:	90 81       	ld	r25, Z
    351e:	9f 5f       	subi	r25, 0xFF	; 255
    3520:	90 83       	st	Z, r25
    3522:	5a 96       	adiw	r26, 0x1a	; 26
    3524:	2c 91       	ld	r18, X
    3526:	e0 91 fb 19 	lds	r30, 0x19FB	; 0x8019fb <pxCurrentTCB>
    352a:	f0 91 fc 19 	lds	r31, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>
    352e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3530:	92 17       	cp	r25, r18
    3532:	48 f4       	brcc	.+18     	; 0x3546 <xTaskGenericNotifyFromISR+0x22c>
    3534:	c1 14       	cp	r12, r1
    3536:	d1 04       	cpc	r13, r1
    3538:	19 f0       	breq	.+6      	; 0x3540 <xTaskGenericNotifyFromISR+0x226>
    353a:	91 e0       	ldi	r25, 0x01	; 1
    353c:	f6 01       	movw	r30, r12
    353e:	90 83       	st	Z, r25
    3540:	91 e0       	ldi	r25, 0x01	; 1
    3542:	90 93 45 19 	sts	0x1945, r25	; 0x801945 <xYieldPending>
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	0f 91       	pop	r16
    354c:	ff 90       	pop	r15
    354e:	ef 90       	pop	r14
    3550:	df 90       	pop	r13
    3552:	cf 90       	pop	r12
    3554:	bf 90       	pop	r11
    3556:	af 90       	pop	r10
    3558:	9f 90       	pop	r9
    355a:	8f 90       	pop	r8
    355c:	08 95       	ret

0000355e <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	21 f4       	brne	.+8      	; 0x356a <xTaskGenericNotifyStateClear+0xc>
    3562:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <pxCurrentTCB>
    3566:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	fc 01       	movw	r30, r24
    3574:	e6 0f       	add	r30, r22
    3576:	f7 1f       	adc	r31, r23
    3578:	23 a9       	ldd	r18, Z+51	; 0x33
    357a:	22 30       	cpi	r18, 0x02	; 2
    357c:	31 f4       	brne	.+12     	; 0x358a <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    357e:	fc 01       	movw	r30, r24
    3580:	e6 0f       	add	r30, r22
    3582:	f7 1f       	adc	r31, r23
    3584:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	01 c0       	rjmp	.+2      	; 0x358c <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    358a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    358c:	0f 90       	pop	r0
    358e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3590:	08 95       	ret

00003592 <prvGetNextExpireTime>:
    3592:	dc 01       	movw	r26, r24
    3594:	e0 91 07 1a 	lds	r30, 0x1A07	; 0x801a07 <pxCurrentTimerList>
    3598:	f0 91 08 1a 	lds	r31, 0x1A08	; 0x801a08 <pxCurrentTimerList+0x1>
    359c:	80 81       	ld	r24, Z
    359e:	91 e0       	ldi	r25, 0x01	; 1
    35a0:	81 11       	cpse	r24, r1
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	9c 93       	st	X, r25
    35a6:	91 11       	cpse	r25, r1
    35a8:	08 c0       	rjmp	.+16     	; 0x35ba <prvGetNextExpireTime+0x28>
    35aa:	07 80       	ldd	r0, Z+7	; 0x07
    35ac:	f0 85       	ldd	r31, Z+8	; 0x08
    35ae:	e0 2d       	mov	r30, r0
    35b0:	60 81       	ld	r22, Z
    35b2:	71 81       	ldd	r23, Z+1	; 0x01
    35b4:	82 81       	ldd	r24, Z+2	; 0x02
    35b6:	93 81       	ldd	r25, Z+3	; 0x03
    35b8:	08 95       	ret
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	70 e0       	ldi	r23, 0x00	; 0
    35be:	cb 01       	movw	r24, r22
    35c0:	08 95       	ret

000035c2 <prvInsertTimerInActiveList>:
    35c2:	cf 92       	push	r12
    35c4:	df 92       	push	r13
    35c6:	ef 92       	push	r14
    35c8:	ff 92       	push	r15
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	fc 01       	movw	r30, r24
    35d0:	42 83       	std	Z+2, r20	; 0x02
    35d2:	53 83       	std	Z+3, r21	; 0x03
    35d4:	64 83       	std	Z+4, r22	; 0x04
    35d6:	75 83       	std	Z+5, r23	; 0x05
    35d8:	93 87       	std	Z+11, r25	; 0x0b
    35da:	82 87       	std	Z+10, r24	; 0x0a
    35dc:	04 17       	cp	r16, r20
    35de:	15 07       	cpc	r17, r21
    35e0:	26 07       	cpc	r18, r22
    35e2:	37 07       	cpc	r19, r23
    35e4:	c0 f0       	brcs	.+48     	; 0x3616 <prvInsertTimerInActiveList+0x54>
    35e6:	0c 19       	sub	r16, r12
    35e8:	1d 09       	sbc	r17, r13
    35ea:	2e 09       	sbc	r18, r14
    35ec:	3f 09       	sbc	r19, r15
    35ee:	86 85       	ldd	r24, Z+14	; 0x0e
    35f0:	97 85       	ldd	r25, Z+15	; 0x0f
    35f2:	a0 89       	ldd	r26, Z+16	; 0x10
    35f4:	b1 89       	ldd	r27, Z+17	; 0x11
    35f6:	08 17       	cp	r16, r24
    35f8:	19 07       	cpc	r17, r25
    35fa:	2a 07       	cpc	r18, r26
    35fc:	3b 07       	cpc	r19, r27
    35fe:	00 f5       	brcc	.+64     	; 0x3640 <prvInsertTimerInActiveList+0x7e>
    3600:	bf 01       	movw	r22, r30
    3602:	6e 5f       	subi	r22, 0xFE	; 254
    3604:	7f 4f       	sbci	r23, 0xFF	; 255
    3606:	80 91 05 1a 	lds	r24, 0x1A05	; 0x801a05 <pxOverflowTimerList>
    360a:	90 91 06 1a 	lds	r25, 0x1A06	; 0x801a06 <pxOverflowTimerList+0x1>
    360e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <vListInsert>
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	18 c0       	rjmp	.+48     	; 0x3646 <prvInsertTimerInActiveList+0x84>
    3616:	0c 15       	cp	r16, r12
    3618:	1d 05       	cpc	r17, r13
    361a:	2e 05       	cpc	r18, r14
    361c:	3f 05       	cpc	r19, r15
    361e:	28 f4       	brcc	.+10     	; 0x362a <prvInsertTimerInActiveList+0x68>
    3620:	4c 15       	cp	r20, r12
    3622:	5d 05       	cpc	r21, r13
    3624:	6e 05       	cpc	r22, r14
    3626:	7f 05       	cpc	r23, r15
    3628:	68 f4       	brcc	.+26     	; 0x3644 <prvInsertTimerInActiveList+0x82>
    362a:	bf 01       	movw	r22, r30
    362c:	6e 5f       	subi	r22, 0xFE	; 254
    362e:	7f 4f       	sbci	r23, 0xFF	; 255
    3630:	80 91 07 1a 	lds	r24, 0x1A07	; 0x801a07 <pxCurrentTimerList>
    3634:	90 91 08 1a 	lds	r25, 0x1A08	; 0x801a08 <pxCurrentTimerList+0x1>
    3638:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <vListInsert>
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	03 c0       	rjmp	.+6      	; 0x3646 <prvInsertTimerInActiveList+0x84>
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	01 c0       	rjmp	.+2      	; 0x3646 <prvInsertTimerInActiveList+0x84>
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	1f 91       	pop	r17
    3648:	0f 91       	pop	r16
    364a:	ff 90       	pop	r15
    364c:	ef 90       	pop	r14
    364e:	df 90       	pop	r13
    3650:	cf 90       	pop	r12
    3652:	08 95       	ret

00003654 <prvCheckForValidListAndQueue>:
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	f8 94       	cli
    3658:	0f 92       	push	r0
    365a:	80 91 03 1a 	lds	r24, 0x1A03	; 0x801a03 <xTimerQueue>
    365e:	90 91 04 1a 	lds	r25, 0x1A04	; 0x801a04 <xTimerQueue+0x1>
    3662:	89 2b       	or	r24, r25
    3664:	e9 f4       	brne	.+58     	; 0x36a0 <prvCheckForValidListAndQueue+0x4c>
    3666:	84 e1       	ldi	r24, 0x14	; 20
    3668:	9a e1       	ldi	r25, 0x1A	; 26
    366a:	0e 94 de 05 	call	0xbbc	; 0xbbc <vListInitialise>
    366e:	89 e0       	ldi	r24, 0x09	; 9
    3670:	9a e1       	ldi	r25, 0x1A	; 26
    3672:	0e 94 de 05 	call	0xbbc	; 0xbbc <vListInitialise>
    3676:	84 e1       	ldi	r24, 0x14	; 20
    3678:	9a e1       	ldi	r25, 0x1A	; 26
    367a:	90 93 08 1a 	sts	0x1A08, r25	; 0x801a08 <pxCurrentTimerList+0x1>
    367e:	80 93 07 1a 	sts	0x1A07, r24	; 0x801a07 <pxCurrentTimerList>
    3682:	89 e0       	ldi	r24, 0x09	; 9
    3684:	9a e1       	ldi	r25, 0x1A	; 26
    3686:	90 93 06 1a 	sts	0x1A06, r25	; 0x801a06 <pxOverflowTimerList+0x1>
    368a:	80 93 05 1a 	sts	0x1A05, r24	; 0x801a05 <pxOverflowTimerList>
    368e:	40 e0       	ldi	r20, 0x00	; 0
    3690:	67 e0       	ldi	r22, 0x07	; 7
    3692:	8a e0       	ldi	r24, 0x0A	; 10
    3694:	0e 94 a1 08 	call	0x1142	; 0x1142 <xQueueGenericCreate>
    3698:	90 93 04 1a 	sts	0x1A04, r25	; 0x801a04 <xTimerQueue+0x1>
    369c:	80 93 03 1a 	sts	0x1A03, r24	; 0x801a03 <xTimerQueue>
    36a0:	0f 90       	pop	r0
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	08 95       	ret

000036a6 <xTimerCreateTimerTask>:
    36a6:	ef 92       	push	r14
    36a8:	ff 92       	push	r15
    36aa:	0f 93       	push	r16
    36ac:	d3 df       	rcall	.-90     	; 0x3654 <prvCheckForValidListAndQueue>
    36ae:	80 91 03 1a 	lds	r24, 0x1A03	; 0x801a03 <xTimerQueue>
    36b2:	90 91 04 1a 	lds	r25, 0x1A04	; 0x801a04 <xTimerQueue+0x1>
    36b6:	89 2b       	or	r24, r25
    36b8:	91 f0       	breq	.+36     	; 0x36de <xTimerCreateTimerTask+0x38>
    36ba:	0f 2e       	mov	r0, r31
    36bc:	f1 e0       	ldi	r31, 0x01	; 1
    36be:	ef 2e       	mov	r14, r31
    36c0:	fa e1       	ldi	r31, 0x1A	; 26
    36c2:	ff 2e       	mov	r15, r31
    36c4:	f0 2d       	mov	r31, r0
    36c6:	03 e0       	ldi	r16, 0x03	; 3
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	40 ec       	ldi	r20, 0xC0	; 192
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	60 ec       	ldi	r22, 0xC0	; 192
    36d2:	73 e0       	ldi	r23, 0x03	; 3
    36d4:	88 e5       	ldi	r24, 0x58	; 88
    36d6:	91 e0       	ldi	r25, 0x01	; 1
    36d8:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xTaskCreate>
    36dc:	01 c0       	rjmp	.+2      	; 0x36e0 <xTimerCreateTimerTask+0x3a>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	0f 91       	pop	r16
    36e2:	ff 90       	pop	r15
    36e4:	ef 90       	pop	r14
    36e6:	08 95       	ret

000036e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    36e8:	8f 92       	push	r8
    36ea:	9f 92       	push	r9
    36ec:	af 92       	push	r10
    36ee:	bf 92       	push	r11
    36f0:	cf 92       	push	r12
    36f2:	df 92       	push	r13
    36f4:	ef 92       	push	r14
    36f6:	ff 92       	push	r15
    36f8:	0f 93       	push	r16
    36fa:	1f 93       	push	r17
    36fc:	cf 93       	push	r28
    36fe:	df 93       	push	r29
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
    3704:	27 97       	sbiw	r28, 0x07	; 7
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3710:	e0 91 03 1a 	lds	r30, 0x1A03	; 0x801a03 <xTimerQueue>
    3714:	f0 91 04 1a 	lds	r31, 0x1A04	; 0x801a04 <xTimerQueue+0x1>
    3718:	30 97       	sbiw	r30, 0x00	; 0
    371a:	81 f1       	breq	.+96     	; 0x377c <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    371c:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    371e:	2a 83       	std	Y+2, r18	; 0x02
    3720:	3b 83       	std	Y+3, r19	; 0x03
    3722:	4c 83       	std	Y+4, r20	; 0x04
    3724:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3726:	9f 83       	std	Y+7, r25	; 0x07
    3728:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    372a:	66 30       	cpi	r22, 0x06	; 6
    372c:	f4 f4       	brge	.+60     	; 0x376a <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    372e:	c3 da       	rcall	.-2682   	; 0x2cb6 <xTaskGetSchedulerState>
    3730:	82 30       	cpi	r24, 0x02	; 2
    3732:	69 f4       	brne	.+26     	; 0x374e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3734:	00 e0       	ldi	r16, 0x00	; 0
    3736:	a7 01       	movw	r20, r14
    3738:	96 01       	movw	r18, r12
    373a:	be 01       	movw	r22, r28
    373c:	6f 5f       	subi	r22, 0xFF	; 255
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    3740:	80 91 03 1a 	lds	r24, 0x1A03	; 0x801a03 <xTimerQueue>
    3744:	90 91 04 1a 	lds	r25, 0x1A04	; 0x801a04 <xTimerQueue+0x1>
    3748:	0e 94 c4 08 	call	0x1188	; 0x1188 <xQueueGenericSend>
    374c:	18 c0       	rjmp	.+48     	; 0x377e <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    374e:	00 e0       	ldi	r16, 0x00	; 0
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	a9 01       	movw	r20, r18
    3756:	be 01       	movw	r22, r28
    3758:	6f 5f       	subi	r22, 0xFF	; 255
    375a:	7f 4f       	sbci	r23, 0xFF	; 255
    375c:	80 91 03 1a 	lds	r24, 0x1A03	; 0x801a03 <xTimerQueue>
    3760:	90 91 04 1a 	lds	r25, 0x1A04	; 0x801a04 <xTimerQueue+0x1>
    3764:	0e 94 c4 08 	call	0x1188	; 0x1188 <xQueueGenericSend>
    3768:	0a c0       	rjmp	.+20     	; 0x377e <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	a8 01       	movw	r20, r16
    376e:	be 01       	movw	r22, r28
    3770:	6f 5f       	subi	r22, 0xFF	; 255
    3772:	7f 4f       	sbci	r23, 0xFF	; 255
    3774:	cf 01       	movw	r24, r30
    3776:	0e 94 74 09 	call	0x12e8	; 0x12e8 <xQueueGenericSendFromISR>
    377a:	01 c0       	rjmp	.+2      	; 0x377e <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    377c:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    377e:	27 96       	adiw	r28, 0x07	; 7
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	cd bf       	out	0x3d, r28	; 61
    378a:	df 91       	pop	r29
    378c:	cf 91       	pop	r28
    378e:	1f 91       	pop	r17
    3790:	0f 91       	pop	r16
    3792:	ff 90       	pop	r15
    3794:	ef 90       	pop	r14
    3796:	df 90       	pop	r13
    3798:	cf 90       	pop	r12
    379a:	bf 90       	pop	r11
    379c:	af 90       	pop	r10
    379e:	9f 90       	pop	r9
    37a0:	8f 90       	pop	r8
    37a2:	08 95       	ret

000037a4 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    37a4:	8f 92       	push	r8
    37a6:	9f 92       	push	r9
    37a8:	af 92       	push	r10
    37aa:	bf 92       	push	r11
    37ac:	cf 92       	push	r12
    37ae:	df 92       	push	r13
    37b0:	ef 92       	push	r14
    37b2:	ff 92       	push	r15
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    37bc:	3b c0       	rjmp	.+118    	; 0x3834 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    37be:	07 80       	ldd	r0, Z+7	; 0x07
    37c0:	f0 85       	ldd	r31, Z+8	; 0x08
    37c2:	e0 2d       	mov	r30, r0
    37c4:	80 80       	ld	r8, Z
    37c6:	91 80       	ldd	r9, Z+1	; 0x01
    37c8:	a2 80       	ldd	r10, Z+2	; 0x02
    37ca:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37cc:	c0 85       	ldd	r28, Z+8	; 0x08
    37ce:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37d0:	8e 01       	movw	r16, r28
    37d2:	0e 5f       	subi	r16, 0xFE	; 254
    37d4:	1f 4f       	sbci	r17, 0xFF	; 255
    37d6:	c8 01       	movw	r24, r16
    37d8:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37dc:	ec 89       	ldd	r30, Y+20	; 0x14
    37de:	fd 89       	ldd	r31, Y+21	; 0x15
    37e0:	ce 01       	movw	r24, r28
    37e2:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    37e4:	8e 89       	ldd	r24, Y+22	; 0x16
    37e6:	82 ff       	sbrs	r24, 2
    37e8:	25 c0       	rjmp	.+74     	; 0x3834 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    37ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    37ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    37ee:	a8 89       	ldd	r26, Y+16	; 0x10
    37f0:	b9 89       	ldd	r27, Y+17	; 0x11
    37f2:	88 0d       	add	r24, r8
    37f4:	99 1d       	adc	r25, r9
    37f6:	aa 1d       	adc	r26, r10
    37f8:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    37fa:	88 16       	cp	r8, r24
    37fc:	99 06       	cpc	r9, r25
    37fe:	aa 06       	cpc	r10, r26
    3800:	bb 06       	cpc	r11, r27
    3802:	70 f4       	brcc	.+28     	; 0x3820 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3804:	8a 83       	std	Y+2, r24	; 0x02
    3806:	9b 83       	std	Y+3, r25	; 0x03
    3808:	ac 83       	std	Y+4, r26	; 0x04
    380a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    380c:	db 87       	std	Y+11, r29	; 0x0b
    380e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3810:	b8 01       	movw	r22, r16
    3812:	80 91 07 1a 	lds	r24, 0x1A07	; 0x801a07 <pxCurrentTimerList>
    3816:	90 91 08 1a 	lds	r25, 0x1A08	; 0x801a08 <pxCurrentTimerList+0x1>
    381a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <vListInsert>
    381e:	0a c0       	rjmp	.+20     	; 0x3834 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3820:	c1 2c       	mov	r12, r1
    3822:	d1 2c       	mov	r13, r1
    3824:	76 01       	movw	r14, r12
    3826:	00 e0       	ldi	r16, 0x00	; 0
    3828:	10 e0       	ldi	r17, 0x00	; 0
    382a:	a5 01       	movw	r20, r10
    382c:	94 01       	movw	r18, r8
    382e:	60 e0       	ldi	r22, 0x00	; 0
    3830:	ce 01       	movw	r24, r28
    3832:	5a df       	rcall	.-332    	; 0x36e8 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3834:	e0 91 07 1a 	lds	r30, 0x1A07	; 0x801a07 <pxCurrentTimerList>
    3838:	f0 91 08 1a 	lds	r31, 0x1A08	; 0x801a08 <pxCurrentTimerList+0x1>
    383c:	80 81       	ld	r24, Z
    383e:	81 11       	cpse	r24, r1
    3840:	be cf       	rjmp	.-132    	; 0x37be <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3842:	80 91 05 1a 	lds	r24, 0x1A05	; 0x801a05 <pxOverflowTimerList>
    3846:	90 91 06 1a 	lds	r25, 0x1A06	; 0x801a06 <pxOverflowTimerList+0x1>
    384a:	90 93 08 1a 	sts	0x1A08, r25	; 0x801a08 <pxCurrentTimerList+0x1>
    384e:	80 93 07 1a 	sts	0x1A07, r24	; 0x801a07 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3852:	f0 93 06 1a 	sts	0x1A06, r31	; 0x801a06 <pxOverflowTimerList+0x1>
    3856:	e0 93 05 1a 	sts	0x1A05, r30	; 0x801a05 <pxOverflowTimerList>
    }
    385a:	df 91       	pop	r29
    385c:	cf 91       	pop	r28
    385e:	1f 91       	pop	r17
    3860:	0f 91       	pop	r16
    3862:	ff 90       	pop	r15
    3864:	ef 90       	pop	r14
    3866:	df 90       	pop	r13
    3868:	cf 90       	pop	r12
    386a:	bf 90       	pop	r11
    386c:	af 90       	pop	r10
    386e:	9f 90       	pop	r9
    3870:	8f 90       	pop	r8
    3872:	08 95       	ret

00003874 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3874:	cf 92       	push	r12
    3876:	df 92       	push	r13
    3878:	ef 92       	push	r14
    387a:	ff 92       	push	r15
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3882:	0e 94 de 10 	call	0x21bc	; 0x21bc <xTaskGetTickCount>
    3886:	6b 01       	movw	r12, r22
    3888:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    388a:	80 91 fd 19 	lds	r24, 0x19FD	; 0x8019fd <xLastTime.2436>
    388e:	90 91 fe 19 	lds	r25, 0x19FE	; 0x8019fe <xLastTime.2436+0x1>
    3892:	a0 91 ff 19 	lds	r26, 0x19FF	; 0x8019ff <xLastTime.2436+0x2>
    3896:	b0 91 00 1a 	lds	r27, 0x1A00	; 0x801a00 <xLastTime.2436+0x3>
    389a:	c8 16       	cp	r12, r24
    389c:	d9 06       	cpc	r13, r25
    389e:	ea 06       	cpc	r14, r26
    38a0:	fb 06       	cpc	r15, r27
    38a2:	20 f4       	brcc	.+8      	; 0x38ac <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    38a4:	7f df       	rcall	.-258    	; 0x37a4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	88 83       	st	Y, r24
    38aa:	01 c0       	rjmp	.+2      	; 0x38ae <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    38ac:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    38ae:	c0 92 fd 19 	sts	0x19FD, r12	; 0x8019fd <xLastTime.2436>
    38b2:	d0 92 fe 19 	sts	0x19FE, r13	; 0x8019fe <xLastTime.2436+0x1>
    38b6:	e0 92 ff 19 	sts	0x19FF, r14	; 0x8019ff <xLastTime.2436+0x2>
    38ba:	f0 92 00 1a 	sts	0x1A00, r15	; 0x801a00 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    38be:	c7 01       	movw	r24, r14
    38c0:	b6 01       	movw	r22, r12
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	ff 90       	pop	r15
    38c8:	ef 90       	pop	r14
    38ca:	df 90       	pop	r13
    38cc:	cf 90       	pop	r12
    38ce:	08 95       	ret

000038d0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    38d0:	4f 92       	push	r4
    38d2:	5f 92       	push	r5
    38d4:	6f 92       	push	r6
    38d6:	7f 92       	push	r7
    38d8:	8f 92       	push	r8
    38da:	9f 92       	push	r9
    38dc:	af 92       	push	r10
    38de:	bf 92       	push	r11
    38e0:	cf 92       	push	r12
    38e2:	df 92       	push	r13
    38e4:	ef 92       	push	r14
    38e6:	ff 92       	push	r15
    38e8:	0f 93       	push	r16
    38ea:	1f 93       	push	r17
    38ec:	cf 93       	push	r28
    38ee:	df 93       	push	r29
    38f0:	4b 01       	movw	r8, r22
    38f2:	5c 01       	movw	r10, r24
    38f4:	29 01       	movw	r4, r18
    38f6:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    38f8:	e0 91 07 1a 	lds	r30, 0x1A07	; 0x801a07 <pxCurrentTimerList>
    38fc:	f0 91 08 1a 	lds	r31, 0x1A08	; 0x801a08 <pxCurrentTimerList+0x1>
    3900:	07 80       	ldd	r0, Z+7	; 0x07
    3902:	f0 85       	ldd	r31, Z+8	; 0x08
    3904:	e0 2d       	mov	r30, r0
    3906:	c0 85       	ldd	r28, Z+8	; 0x08
    3908:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    390a:	ce 01       	movw	r24, r28
    390c:	02 96       	adiw	r24, 0x02	; 2
    390e:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3912:	8e 89       	ldd	r24, Y+22	; 0x16
    3914:	82 ff       	sbrs	r24, 2
    3916:	1b c0       	rjmp	.+54     	; 0x394e <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3918:	4e 85       	ldd	r20, Y+14	; 0x0e
    391a:	5f 85       	ldd	r21, Y+15	; 0x0f
    391c:	68 89       	ldd	r22, Y+16	; 0x10
    391e:	79 89       	ldd	r23, Y+17	; 0x11
    3920:	48 0d       	add	r20, r8
    3922:	59 1d       	adc	r21, r9
    3924:	6a 1d       	adc	r22, r10
    3926:	7b 1d       	adc	r23, r11
    3928:	75 01       	movw	r14, r10
    392a:	64 01       	movw	r12, r8
    392c:	93 01       	movw	r18, r6
    392e:	82 01       	movw	r16, r4
    3930:	ce 01       	movw	r24, r28
    3932:	47 de       	rcall	.-882    	; 0x35c2 <prvInsertTimerInActiveList>
    3934:	88 23       	and	r24, r24
    3936:	69 f0       	breq	.+26     	; 0x3952 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3938:	c1 2c       	mov	r12, r1
    393a:	d1 2c       	mov	r13, r1
    393c:	76 01       	movw	r14, r12
    393e:	00 e0       	ldi	r16, 0x00	; 0
    3940:	10 e0       	ldi	r17, 0x00	; 0
    3942:	a5 01       	movw	r20, r10
    3944:	94 01       	movw	r18, r8
    3946:	60 e0       	ldi	r22, 0x00	; 0
    3948:	ce 01       	movw	r24, r28
    394a:	ce de       	rcall	.-612    	; 0x36e8 <xTimerGenericCommand>
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    394e:	8e 7f       	andi	r24, 0xFE	; 254
    3950:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3952:	ec 89       	ldd	r30, Y+20	; 0x14
    3954:	fd 89       	ldd	r31, Y+21	; 0x15
    3956:	ce 01       	movw	r24, r28
    3958:	19 95       	eicall
    }
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	ff 90       	pop	r15
    3964:	ef 90       	pop	r14
    3966:	df 90       	pop	r13
    3968:	cf 90       	pop	r12
    396a:	bf 90       	pop	r11
    396c:	af 90       	pop	r10
    396e:	9f 90       	pop	r9
    3970:	8f 90       	pop	r8
    3972:	7f 90       	pop	r7
    3974:	6f 90       	pop	r6
    3976:	5f 90       	pop	r5
    3978:	4f 90       	pop	r4
    397a:	08 95       	ret

0000397c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    397c:	8f 92       	push	r8
    397e:	9f 92       	push	r9
    3980:	af 92       	push	r10
    3982:	bf 92       	push	r11
    3984:	cf 92       	push	r12
    3986:	df 92       	push	r13
    3988:	ef 92       	push	r14
    398a:	ff 92       	push	r15
    398c:	1f 93       	push	r17
    398e:	cf 93       	push	r28
    3990:	df 93       	push	r29
    3992:	1f 92       	push	r1
    3994:	cd b7       	in	r28, 0x3d	; 61
    3996:	de b7       	in	r29, 0x3e	; 62
    3998:	6b 01       	movw	r12, r22
    399a:	7c 01       	movw	r14, r24
    399c:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    399e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    39a2:	ce 01       	movw	r24, r28
    39a4:	01 96       	adiw	r24, 0x01	; 1
    39a6:	66 df       	rcall	.-308    	; 0x3874 <prvSampleTimeNow>
    39a8:	4b 01       	movw	r8, r22
    39aa:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    39ac:	89 81       	ldd	r24, Y+1	; 0x01
    39ae:	81 11       	cpse	r24, r1
    39b0:	2d c0       	rjmp	.+90     	; 0x3a0c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    39b2:	11 11       	cpse	r17, r1
    39b4:	0d c0       	rjmp	.+26     	; 0x39d0 <prvProcessTimerOrBlockTask+0x54>
    39b6:	8c 14       	cp	r8, r12
    39b8:	9d 04       	cpc	r9, r13
    39ba:	ae 04       	cpc	r10, r14
    39bc:	bf 04       	cpc	r11, r15
    39be:	40 f0       	brcs	.+16     	; 0x39d0 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    39c0:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    39c4:	a5 01       	movw	r20, r10
    39c6:	94 01       	movw	r18, r8
    39c8:	c7 01       	movw	r24, r14
    39ca:	b6 01       	movw	r22, r12
    39cc:	81 df       	rcall	.-254    	; 0x38d0 <prvProcessExpiredTimer>
    39ce:	20 c0       	rjmp	.+64     	; 0x3a10 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    39d0:	11 23       	and	r17, r17
    39d2:	41 f0       	breq	.+16     	; 0x39e4 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    39d4:	e0 91 05 1a 	lds	r30, 0x1A05	; 0x801a05 <pxOverflowTimerList>
    39d8:	f0 91 06 1a 	lds	r31, 0x1A06	; 0x801a06 <pxOverflowTimerList+0x1>
    39dc:	80 81       	ld	r24, Z
    39de:	11 e0       	ldi	r17, 0x01	; 1
    39e0:	81 11       	cpse	r24, r1
    39e2:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    39e4:	b7 01       	movw	r22, r14
    39e6:	a6 01       	movw	r20, r12
    39e8:	48 19       	sub	r20, r8
    39ea:	59 09       	sbc	r21, r9
    39ec:	6a 09       	sbc	r22, r10
    39ee:	7b 09       	sbc	r23, r11
    39f0:	21 2f       	mov	r18, r17
    39f2:	80 91 03 1a 	lds	r24, 0x1A03	; 0x801a03 <xTimerQueue>
    39f6:	90 91 04 1a 	lds	r25, 0x1A04	; 0x801a04 <xTimerQueue+0x1>
    39fa:	0e 94 ef 0a 	call	0x15de	; 0x15de <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    39fe:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>
    3a02:	81 11       	cpse	r24, r1
    3a04:	05 c0       	rjmp	.+10     	; 0x3a10 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3a06:	0e 94 ac 06 	call	0xd58	; 0xd58 <vPortYield>
    3a0a:	02 c0       	rjmp	.+4      	; 0x3a10 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3a0c:	0e 94 18 12 	call	0x2430	; 0x2430 <xTaskResumeAll>
            }
        }
    }
    3a10:	0f 90       	pop	r0
    3a12:	df 91       	pop	r29
    3a14:	cf 91       	pop	r28
    3a16:	1f 91       	pop	r17
    3a18:	ff 90       	pop	r15
    3a1a:	ef 90       	pop	r14
    3a1c:	df 90       	pop	r13
    3a1e:	cf 90       	pop	r12
    3a20:	bf 90       	pop	r11
    3a22:	af 90       	pop	r10
    3a24:	9f 90       	pop	r9
    3a26:	8f 90       	pop	r8
    3a28:	08 95       	ret

00003a2a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3a2a:	af 92       	push	r10
    3a2c:	bf 92       	push	r11
    3a2e:	cf 92       	push	r12
    3a30:	df 92       	push	r13
    3a32:	ef 92       	push	r14
    3a34:	ff 92       	push	r15
    3a36:	0f 93       	push	r16
    3a38:	1f 93       	push	r17
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	28 97       	sbiw	r28, 0x08	; 8
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3a4e:	82 c0       	rjmp	.+260    	; 0x3b54 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	88 23       	and	r24, r24
    3a54:	0c f4       	brge	.+2      	; 0x3a58 <prvProcessReceivedCommands+0x2e>
    3a56:	7e c0       	rjmp	.+252    	; 0x3b54 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3a58:	ae 80       	ldd	r10, Y+6	; 0x06
    3a5a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3a5c:	d5 01       	movw	r26, r10
    3a5e:	1c 96       	adiw	r26, 0x0c	; 12
    3a60:	8d 91       	ld	r24, X+
    3a62:	9c 91       	ld	r25, X
    3a64:	1d 97       	sbiw	r26, 0x0d	; 13
    3a66:	89 2b       	or	r24, r25
    3a68:	21 f0       	breq	.+8      	; 0x3a72 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a6a:	c5 01       	movw	r24, r10
    3a6c:	02 96       	adiw	r24, 0x02	; 2
    3a6e:	0e 94 30 06 	call	0xc60	; 0xc60 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a72:	ce 01       	movw	r24, r28
    3a74:	08 96       	adiw	r24, 0x08	; 8
    3a76:	fe de       	rcall	.-516    	; 0x3874 <prvSampleTimeNow>
    3a78:	8b 01       	movw	r16, r22
    3a7a:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7e:	0e 2e       	mov	r0, r30
    3a80:	00 0c       	add	r0, r0
    3a82:	ff 0b       	sbc	r31, r31
    3a84:	ea 30       	cpi	r30, 0x0A	; 10
    3a86:	f1 05       	cpc	r31, r1
    3a88:	08 f0       	brcs	.+2      	; 0x3a8c <prvProcessReceivedCommands+0x62>
    3a8a:	64 c0       	rjmp	.+200    	; 0x3b54 <prvProcessReceivedCommands+0x12a>
    3a8c:	88 27       	eor	r24, r24
    3a8e:	ee 58       	subi	r30, 0x8E	; 142
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	8f 4f       	sbci	r24, 0xFF	; 255
    3a94:	0c 94 3c 34 	jmp	0x6878	; 0x6878 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3a98:	f5 01       	movw	r30, r10
    3a9a:	86 89       	ldd	r24, Z+22	; 0x16
    3a9c:	81 60       	ori	r24, 0x01	; 1
    3a9e:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3aa0:	ca 80       	ldd	r12, Y+2	; 0x02
    3aa2:	db 80       	ldd	r13, Y+3	; 0x03
    3aa4:	ec 80       	ldd	r14, Y+4	; 0x04
    3aa6:	fd 80       	ldd	r15, Y+5	; 0x05
    3aa8:	46 85       	ldd	r20, Z+14	; 0x0e
    3aaa:	57 85       	ldd	r21, Z+15	; 0x0f
    3aac:	60 89       	ldd	r22, Z+16	; 0x10
    3aae:	71 89       	ldd	r23, Z+17	; 0x11
    3ab0:	4c 0d       	add	r20, r12
    3ab2:	5d 1d       	adc	r21, r13
    3ab4:	6e 1d       	adc	r22, r14
    3ab6:	7f 1d       	adc	r23, r15
    3ab8:	c5 01       	movw	r24, r10
    3aba:	83 dd       	rcall	.-1274   	; 0x35c2 <prvInsertTimerInActiveList>
    3abc:	88 23       	and	r24, r24
    3abe:	09 f4       	brne	.+2      	; 0x3ac2 <prvProcessReceivedCommands+0x98>
    3ac0:	49 c0       	rjmp	.+146    	; 0x3b54 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3ac2:	d5 01       	movw	r26, r10
    3ac4:	54 96       	adiw	r26, 0x14	; 20
    3ac6:	ed 91       	ld	r30, X+
    3ac8:	fc 91       	ld	r31, X
    3aca:	55 97       	sbiw	r26, 0x15	; 21
    3acc:	c5 01       	movw	r24, r10
    3ace:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3ad0:	f5 01       	movw	r30, r10
    3ad2:	86 89       	ldd	r24, Z+22	; 0x16
    3ad4:	82 ff       	sbrs	r24, 2
    3ad6:	3e c0       	rjmp	.+124    	; 0x3b54 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3ad8:	4a 81       	ldd	r20, Y+2	; 0x02
    3ada:	5b 81       	ldd	r21, Y+3	; 0x03
    3adc:	6c 81       	ldd	r22, Y+4	; 0x04
    3ade:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae0:	86 85       	ldd	r24, Z+14	; 0x0e
    3ae2:	97 85       	ldd	r25, Z+15	; 0x0f
    3ae4:	a0 89       	ldd	r26, Z+16	; 0x10
    3ae6:	b1 89       	ldd	r27, Z+17	; 0x11
    3ae8:	9a 01       	movw	r18, r20
    3aea:	ab 01       	movw	r20, r22
    3aec:	28 0f       	add	r18, r24
    3aee:	39 1f       	adc	r19, r25
    3af0:	4a 1f       	adc	r20, r26
    3af2:	5b 1f       	adc	r21, r27
    3af4:	c1 2c       	mov	r12, r1
    3af6:	d1 2c       	mov	r13, r1
    3af8:	76 01       	movw	r14, r12
    3afa:	00 e0       	ldi	r16, 0x00	; 0
    3afc:	10 e0       	ldi	r17, 0x00	; 0
    3afe:	60 e0       	ldi	r22, 0x00	; 0
    3b00:	c5 01       	movw	r24, r10
    3b02:	f2 dd       	rcall	.-1052   	; 0x36e8 <xTimerGenericCommand>
    3b04:	27 c0       	rjmp	.+78     	; 0x3b54 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b06:	d5 01       	movw	r26, r10
    3b08:	56 96       	adiw	r26, 0x16	; 22
    3b0a:	8c 91       	ld	r24, X
    3b0c:	56 97       	sbiw	r26, 0x16	; 22
    3b0e:	8e 7f       	andi	r24, 0xFE	; 254
    3b10:	56 96       	adiw	r26, 0x16	; 22
    3b12:	8c 93       	st	X, r24
                        break;
    3b14:	1f c0       	rjmp	.+62     	; 0x3b54 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3b16:	f5 01       	movw	r30, r10
    3b18:	86 89       	ldd	r24, Z+22	; 0x16
    3b1a:	81 60       	ori	r24, 0x01	; 1
    3b1c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3b1e:	4a 81       	ldd	r20, Y+2	; 0x02
    3b20:	5b 81       	ldd	r21, Y+3	; 0x03
    3b22:	6c 81       	ldd	r22, Y+4	; 0x04
    3b24:	7d 81       	ldd	r23, Y+5	; 0x05
    3b26:	46 87       	std	Z+14, r20	; 0x0e
    3b28:	57 87       	std	Z+15, r21	; 0x0f
    3b2a:	60 8b       	std	Z+16, r22	; 0x10
    3b2c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3b2e:	40 0f       	add	r20, r16
    3b30:	51 1f       	adc	r21, r17
    3b32:	62 1f       	adc	r22, r18
    3b34:	73 1f       	adc	r23, r19
    3b36:	68 01       	movw	r12, r16
    3b38:	79 01       	movw	r14, r18
    3b3a:	c5 01       	movw	r24, r10
    3b3c:	42 dd       	rcall	.-1404   	; 0x35c2 <prvInsertTimerInActiveList>
                        break;
    3b3e:	0a c0       	rjmp	.+20     	; 0x3b54 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3b40:	f5 01       	movw	r30, r10
    3b42:	86 89       	ldd	r24, Z+22	; 0x16
    3b44:	81 fd       	sbrc	r24, 1
    3b46:	04 c0       	rjmp	.+8      	; 0x3b50 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3b48:	c5 01       	movw	r24, r10
    3b4a:	0e 94 a1 05 	call	0xb42	; 0xb42 <vPortFree>
    3b4e:	02 c0       	rjmp	.+4      	; 0x3b54 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b50:	8e 7f       	andi	r24, 0xFE	; 254
    3b52:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	a9 01       	movw	r20, r18
    3b5a:	be 01       	movw	r22, r28
    3b5c:	6f 5f       	subi	r22, 0xFF	; 255
    3b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b60:	80 91 03 1a 	lds	r24, 0x1A03	; 0x801a03 <xTimerQueue>
    3b64:	90 91 04 1a 	lds	r25, 0x1A04	; 0x801a04 <xTimerQueue+0x1>
    3b68:	0e 94 af 09 	call	0x135e	; 0x135e <xQueueReceive>
    3b6c:	81 11       	cpse	r24, r1
    3b6e:	70 cf       	rjmp	.-288    	; 0x3a50 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3b70:	28 96       	adiw	r28, 0x08	; 8
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	f8 94       	cli
    3b76:	de bf       	out	0x3e, r29	; 62
    3b78:	0f be       	out	0x3f, r0	; 63
    3b7a:	cd bf       	out	0x3d, r28	; 61
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	ff 90       	pop	r15
    3b86:	ef 90       	pop	r14
    3b88:	df 90       	pop	r13
    3b8a:	cf 90       	pop	r12
    3b8c:	bf 90       	pop	r11
    3b8e:	af 90       	pop	r10
    3b90:	08 95       	ret

00003b92 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3b92:	08 95       	ret

00003b94 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3b94:	84 b1       	in	r24, 0x04	; 4
    3b96:	80 68       	ori	r24, 0x80	; 128
    3b98:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3b9a:	85 b1       	in	r24, 0x05	; 5
    3b9c:	80 68       	ori	r24, 0x80	; 128
    3b9e:	85 b9       	out	0x05, r24	; 5
    3ba0:	08 95       	ret

00003ba2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3ba2:	83 b1       	in	r24, 0x03	; 3
    3ba4:	80 68       	ori	r24, 0x80	; 128
    3ba6:	83 b9       	out	0x03, r24	; 3
    3ba8:	08 95       	ret

00003baa <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3baa:	f4 df       	rcall	.-24     	; 0x3b94 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3bac:	2f ef       	ldi	r18, 0xFF	; 255
    3bae:	80 e7       	ldi	r24, 0x70	; 112
    3bb0:	92 e0       	ldi	r25, 0x02	; 2
    3bb2:	21 50       	subi	r18, 0x01	; 1
    3bb4:	80 40       	sbci	r24, 0x00	; 0
    3bb6:	90 40       	sbci	r25, 0x00	; 0
    3bb8:	e1 f7       	brne	.-8      	; 0x3bb2 <vApplicationMallocFailedHook+0x8>
    3bba:	00 c0       	rjmp	.+0      	; 0x3bbc <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3bbc:	00 00       	nop
    3bbe:	f1 df       	rcall	.-30     	; 0x3ba2 <prvBlinkMainLed>
    3bc0:	f5 cf       	rjmp	.-22     	; 0x3bac <vApplicationMallocFailedHook+0x2>

00003bc2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3bc2:	e8 df       	rcall	.-48     	; 0x3b94 <prvSetMainLedOn>
    3bc4:	2f ef       	ldi	r18, 0xFF	; 255
    3bc6:	87 ea       	ldi	r24, 0xA7	; 167
    3bc8:	91 e6       	ldi	r25, 0x61	; 97
    3bca:	21 50       	subi	r18, 0x01	; 1
    3bcc:	80 40       	sbci	r24, 0x00	; 0
    3bce:	90 40       	sbci	r25, 0x00	; 0
    3bd0:	e1 f7       	brne	.-8      	; 0x3bca <vApplicationStackOverflowHook+0x8>
    3bd2:	00 c0       	rjmp	.+0      	; 0x3bd4 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3bd4:	00 00       	nop
    3bd6:	e5 df       	rcall	.-54     	; 0x3ba2 <prvBlinkMainLed>
    3bd8:	f5 cf       	rjmp	.-22     	; 0x3bc4 <vApplicationStackOverflowHook+0x2>

00003bda <packageHandler_setTemperaturePercent>:
static uint16_t humidityPercent;
static uint16_t CO2_PPM;
static uint8_t status = 0x10;

void packageHandler_setTemperaturePercent(int16_t temperature){
	temperaturePercent = temperature;
    3bda:	90 93 24 1a 	sts	0x1A24, r25	; 0x801a24 <temperaturePercent+0x1>
    3bde:	80 93 23 1a 	sts	0x1A23, r24	; 0x801a23 <temperaturePercent>
    3be2:	08 95       	ret

00003be4 <packageHandler_setHumidityPercent>:
}

void packageHandler_setHumidityPercent(uint16_t humidity){
	humidityPercent = humidity;
    3be4:	90 93 22 1a 	sts	0x1A22, r25	; 0x801a22 <humidityPercent+0x1>
    3be8:	80 93 21 1a 	sts	0x1A21, r24	; 0x801a21 <humidityPercent>
    3bec:	08 95       	ret

00003bee <packageHandler_setCO2ppm>:
}

void packageHandler_setCO2ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    3bee:	90 93 20 1a 	sts	0x1A20, r25	; 0x801a20 <CO2_PPM+0x1>
    3bf2:	80 93 1f 1a 	sts	0x1A1F, r24	; 0x801a1f <CO2_PPM>
    3bf6:	08 95       	ret

00003bf8 <packageHandler_getLoraPackage>:
}

lora_driver_payload_t packageHandler_getLoraPackage(uint8_t port){
    3bf8:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    3bfa:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    3bfc:	87 e0       	ldi	r24, 0x07	; 7
    3bfe:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3c00:	80 91 23 1a 	lds	r24, 0x1A23	; 0x801a23 <temperaturePercent>
    3c04:	90 91 24 1a 	lds	r25, 0x1A24	; 0x801a24 <temperaturePercent+0x1>
    3c08:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    3c0a:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3c0c:	80 91 21 1a 	lds	r24, 0x1A21	; 0x801a21 <humidityPercent>
    3c10:	90 91 22 1a 	lds	r25, 0x1A22	; 0x801a22 <humidityPercent+0x1>
    3c14:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    3c16:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    3c18:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <CO2_PPM>
    3c1c:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <CO2_PPM+0x1>
    3c20:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    3c22:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    3c24:	80 e1       	ldi	r24, 0x10	; 16
    3c26:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    3c28:	cf 01       	movw	r24, r30
    3c2a:	08 95       	ret

00003c2c <myCo2CallBack>:
}

//Sets lastCO2ppm when the callback is called
void myCo2CallBack(uint16_t ppm_parameter)
{
	lastCO2ppm = ppm_parameter;
    3c2c:	90 93 26 1a 	sts	0x1A26, r25	; 0x801a26 <lastCO2ppm+0x1>
    3c30:	80 93 25 1a 	sts	0x1A25, r24	; 0x801a25 <lastCO2ppm>
    3c34:	08 95       	ret

00003c36 <co2Sensor_getPPM>:
}

//Getter for lastCO2ppm.
uint16_t co2Sensor_getPPM() {
	return lastCO2ppm;
}
    3c36:	80 91 25 1a 	lds	r24, 0x1A25	; 0x801a25 <lastCO2ppm>
    3c3a:	90 91 26 1a 	lds	r25, 0x1A26	; 0x801a26 <lastCO2ppm+0x1>
    3c3e:	08 95       	ret

00003c40 <co2Sensor_createTask>:
	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

//Creates the CO2 task.
void co2Sensor_createTask(UBaseType_t priority){
    3c40:	ef 92       	push	r14
    3c42:	ff 92       	push	r15
    3c44:	0f 93       	push	r16
	xTaskCreate(
    3c46:	e1 2c       	mov	r14, r1
    3c48:	f1 2c       	mov	r15, r1
    3c4a:	08 2f       	mov	r16, r24
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 ec       	ldi	r20, 0xC0	; 192
    3c52:	50 e0       	ldi	r21, 0x00	; 0
    3c54:	68 ec       	ldi	r22, 0xC8	; 200
    3c56:	73 e0       	ldi	r23, 0x03	; 3
    3c58:	86 e7       	ldi	r24, 0x76	; 118
    3c5a:	9e e1       	ldi	r25, 0x1E	; 30
    3c5c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xTaskCreate>
	"MeasuringCO2_Task",
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
}
    3c60:	0f 91       	pop	r16
    3c62:	ff 90       	pop	r15
    3c64:	ef 90       	pop	r14
    3c66:	08 95       	ret

00003c68 <co2Sensor_create>:
uint16_t lastCO2ppm = 0;


//Initializes the CO2 sensor driver, creates the CO2 task and sets up the callback.
// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3.
void co2Sensor_create(UBaseType_t priority) {
    3c68:	cf 93       	push	r28
    3c6a:	c8 2f       	mov	r28, r24
	mh_z19_initialise(ser_USART3);
    3c6c:	83 e0       	ldi	r24, 0x03	; 3
    3c6e:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
    3c72:	86 e1       	ldi	r24, 0x16	; 22
    3c74:	9e e1       	ldi	r25, 0x1E	; 30
    3c76:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <mh_z19_injectCallBack>
	co2Sensor_createTask(priority);
    3c7a:	8c 2f       	mov	r24, r28
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	e0 df       	rcall	.-64     	; 0x3c40 <co2Sensor_createTask>
}
    3c80:	cf 91       	pop	r28
    3c82:	08 95       	ret

00003c84 <co2Sensor_printReturnCode>:
			case MHZ19_OK: returnCodeString = "MHZ19_OK - Everything went well";
			case MHZ19_NO_MEASSURING_AVAILABLE: returnCodeString = "MHZ19_NO_MEASSURING_AVAILABLE - No results are received from the sensor";
			case MHZ19_NO_SERIAL: returnCodeString = "MHZ19_NO_SERIAL - No serial driver is specified";
			case MHZ19_PPM_MUST_BE_GT_999: returnCodeString = "MHZ19_PPM_MUST_BE_GT_999 - Span calibration is only allowed from ppm >= 1000";
		}
		printf("RETURNCODE: %s \n", returnCodeString);
    3c84:	8a ed       	ldi	r24, 0xDA	; 218
    3c86:	93 e0       	ldi	r25, 0x03	; 3
    3c88:	9f 93       	push	r25
    3c8a:	8f 93       	push	r24
    3c8c:	87 e2       	ldi	r24, 0x27	; 39
    3c8e:	94 e0       	ldi	r25, 0x04	; 4
    3c90:	9f 93       	push	r25
    3c92:	8f 93       	push	r24
    3c94:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
	}
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	0f 90       	pop	r0
    3ca0:	08 95       	ret

00003ca2 <co2Sensor_measure>:
{
	lastCO2ppm = ppm_parameter;
}

//Measures the CO2.
void co2Sensor_measure() {
    3ca2:	cf 93       	push	r28
	mh_z19_returnCode_t measure_rc = mh_z19_takeMeassuring();
    3ca4:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <mh_z19_takeMeassuring>
    3ca8:	c8 2f       	mov	r28, r24
	if (measure_rc != MHZ19_OK)
    3caa:	88 23       	and	r24, r24
    3cac:	61 f0       	breq	.+24     	; 0x3cc6 <co2Sensor_measure+0x24>
	{
		printf("ERROR: CO2 Sensor could not measure, ");
    3cae:	88 e3       	ldi	r24, 0x38	; 56
    3cb0:	94 e0       	ldi	r25, 0x04	; 4
    3cb2:	9f 93       	push	r25
    3cb4:	8f 93       	push	r24
    3cb6:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
		co2Sensor_printReturnCode(measure_rc);
    3cba:	8c 2f       	mov	r24, r28
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	e2 df       	rcall	.-60     	; 0x3c84 <co2Sensor_printReturnCode>
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	08 c0       	rjmp	.+16     	; 0x3cd6 <co2Sensor_measure+0x34>
	}
	else
	{
		printf("--->Initialized, CO2 Sensor<---");
    3cc6:	8e e5       	ldi	r24, 0x5E	; 94
    3cc8:	94 e0       	ldi	r25, 0x04	; 4
    3cca:	9f 93       	push	r25
    3ccc:	8f 93       	push	r24
    3cce:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3cd6:	85 e2       	ldi	r24, 0x25	; 37
    3cd8:	9a e1       	ldi	r25, 0x1A	; 26
    3cda:	0e 94 f7 26 	call	0x4dee	; 0x4dee <mh_z19_getCo2Ppm>
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	90 93 26 1a 	sts	0x1A26, r25	; 0x801a26 <lastCO2ppm+0x1>
    3ce4:	80 93 25 1a 	sts	0x1A25, r24	; 0x801a25 <lastCO2ppm>
}
    3ce8:	cf 91       	pop	r28
    3cea:	08 95       	ret

00003cec <co2Sensor_task>:
//The CO2 sensor task.
void co2Sensor_task(void* pvpParameter){
	while(1)
	{
		//Usage of Event group Wait fun until co2 measure bit is set to 1
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3cec:	cc 24       	eor	r12, r12
    3cee:	ca 94       	dec	r12
    3cf0:	dc 2c       	mov	r13, r12
    3cf2:	76 01       	movw	r14, r12
    3cf4:	01 e0       	ldi	r16, 0x01	; 1
    3cf6:	21 e0       	ldi	r18, 0x01	; 1
    3cf8:	41 e0       	ldi	r20, 0x01	; 1
    3cfa:	50 e0       	ldi	r21, 0x00	; 0
    3cfc:	60 e0       	ldi	r22, 0x00	; 0
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	80 91 74 1b 	lds	r24, 0x1B74	; 0x801b74 <measureEventGroup>
    3d04:	90 91 75 1b 	lds	r25, 0x1B75	; 0x801b75 <measureEventGroup+0x1>
    3d08:	0e 94 57 03 	call	0x6ae	; 0x6ae <xEventGroupWaitBits>
		
		if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3d0c:	60 ff       	sbrs	r22, 0
    3d0e:	ee cf       	rjmp	.-36     	; 0x3cec <co2Sensor_task>
		{
			//printf("Measure bit and event bit was successfully checked ");
			co2Sensor_measure();
    3d10:	c8 df       	rcall	.-112    	; 0x3ca2 <co2Sensor_measure>
			//printf("Measurement successful , now time to set ready bit of c02 ");
			xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    3d12:	42 e0       	ldi	r20, 0x02	; 2
    3d14:	50 e0       	ldi	r21, 0x00	; 0
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	80 91 72 1b 	lds	r24, 0x1B72	; 0x801b72 <dataReadyEventGroup>
    3d1e:	90 91 73 1b 	lds	r25, 0x1B73	; 0x801b73 <dataReadyEventGroup+0x1>
    3d22:	0e 94 f7 03 	call	0x7ee	; 0x7ee <xEventGroupSetBits>
    3d26:	e2 cf       	rjmp	.-60     	; 0x3cec <co2Sensor_task>

00003d28 <tempHumSensor_getTemp>:
	tempHumSensor_createTask(priority);
}
//Getter for temperature.
int16_t tempHumSensor_getTemp(){
	return temperature;
}
    3d28:	80 91 27 1a 	lds	r24, 0x1A27	; 0x801a27 <temperature>
    3d2c:	90 91 28 1a 	lds	r25, 0x1A28	; 0x801a28 <temperature+0x1>
    3d30:	08 95       	ret

00003d32 <tempHumSensor_getHum>:
//Getter for humidity.
uint16_t tempHumSensor_getHum(){
	return humidity;
}
    3d32:	80 91 29 1a 	lds	r24, 0x1A29	; 0x801a29 <humidity>
    3d36:	90 91 2a 1a 	lds	r25, 0x1A2A	; 0x801a2a <humidity+0x1>
    3d3a:	08 95       	ret

00003d3c <tempHumSensor_createTask>:
		printf("--->Temperature Set.<---");
	}
}

// Creates the temperature and humidity task.
void tempHumSensor_createTask(UBaseType_t priority){
    3d3c:	ef 92       	push	r14
    3d3e:	ff 92       	push	r15
    3d40:	0f 93       	push	r16
	xTaskCreate(tempHumSensor_task,
    3d42:	e1 2c       	mov	r14, r1
    3d44:	f1 2c       	mov	r15, r1
    3d46:	08 2f       	mov	r16, r24
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 ec       	ldi	r20, 0xC0	; 192
    3d4e:	50 e0       	ldi	r21, 0x00	; 0
    3d50:	6e e7       	ldi	r22, 0x7E	; 126
    3d52:	74 e0       	ldi	r23, 0x04	; 4
    3d54:	88 e4       	ldi	r24, 0x48	; 72
    3d56:	9f e1       	ldi	r25, 0x1F	; 31
    3d58:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xTaskCreate>
	"TempHumTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
}
    3d5c:	0f 91       	pop	r16
    3d5e:	ff 90       	pop	r15
    3d60:	ef 90       	pop	r14
    3d62:	08 95       	ret

00003d64 <tempHumSensor_printReturnCode>:
			case HIH8120_OK: returnCodeString = "HIH8120_OK - Everything went well ";
			case HIH8120_OUT_OF_HEAP: returnCodeString = "HIH8120_OUT_OF_HEAP - Not enough heap to initialize the driver";
			case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED - Driver must be initialize before use";
			case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY - The two wire/I2C interface is busy";
		}
		printf("RETURNCODE: %s \n", returnCodeString);
    3d64:	8a e8       	ldi	r24, 0x8A	; 138
    3d66:	94 e0       	ldi	r25, 0x04	; 4
    3d68:	9f 93       	push	r25
    3d6a:	8f 93       	push	r24
    3d6c:	87 e2       	ldi	r24, 0x27	; 39
    3d6e:	94 e0       	ldi	r25, 0x04	; 4
    3d70:	9f 93       	push	r25
    3d72:	8f 93       	push	r24
    3d74:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	08 95       	ret

00003d82 <tempHumSensor_initialise>:
	return humidity;
}

//Initializes the temperature and humidity sensor driver and prints the return code.
void tempHumSensor_initialise()
{
    3d82:	cf 93       	push	r28
	hih8120_driverReturnCode_t rc = hih8120_initialise();
    3d84:	8e d2       	rcall	.+1308   	; 0x42a2 <hih8120_initialise>
    3d86:	c8 2f       	mov	r28, r24
	
	if (rc != HIH8120_OK)
    3d88:	88 23       	and	r24, r24
    3d8a:	61 f0       	breq	.+24     	; 0x3da4 <tempHumSensor_initialise+0x22>
	{
		printf("ERROR: Initializing temperature & Humidity Sensor, ");
    3d8c:	80 ec       	ldi	r24, 0xC0	; 192
    3d8e:	94 e0       	ldi	r25, 0x04	; 4
    3d90:	9f 93       	push	r25
    3d92:	8f 93       	push	r24
    3d94:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
		tempHumSensor_printReturnCode(rc);
    3d98:	8c 2f       	mov	r24, r28
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	e3 df       	rcall	.-58     	; 0x3d64 <tempHumSensor_printReturnCode>
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	08 c0       	rjmp	.+16     	; 0x3db4 <tempHumSensor_initialise+0x32>
	}
	else
	{
		printf("--->Initialized, Temperature & Humidity Sensor<---");
    3da4:	84 ef       	ldi	r24, 0xF4	; 244
    3da6:	94 e0       	ldi	r25, 0x04	; 4
    3da8:	9f 93       	push	r25
    3daa:	8f 93       	push	r24
    3dac:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
	}
}
    3db4:	cf 91       	pop	r28
    3db6:	08 95       	ret

00003db8 <tempHumSensor_create>:

void tempHumSensor_task(void* pvpParameter);

//Initializes the temperature and humidity sensor driver and creates the temperature and humidity task.
void tempHumSensor_create(UBaseType_t priority)
{
    3db8:	cf 93       	push	r28
    3dba:	c8 2f       	mov	r28, r24
	tempHumSensor_initialise();
    3dbc:	e2 df       	rcall	.-60     	; 0x3d82 <tempHumSensor_initialise>
	tempHumSensor_createTask(priority);
    3dbe:	8c 2f       	mov	r24, r28
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	bc df       	rcall	.-136    	; 0x3d3c <tempHumSensor_createTask>
}
    3dc4:	cf 91       	pop	r28
    3dc6:	08 95       	ret

00003dc8 <tempHumSensor_measure>:
	}
}


//Measures the temperature and humidity.
void tempHumSensor_measure(){
    3dc8:	cf 93       	push	r28
	//waking up the sensor and getting return code.
	hih8120_driverReturnCode_t wakeup_rc = hih8120_wakeup();
    3dca:	86 d2       	rcall	.+1292   	; 0x42d8 <hih8120_wakeup>
    3dcc:	c8 2f       	mov	r28, r24
	
	//checking return code and printing result.
	if (wakeup_rc != HIH8120_OK)
    3dce:	88 23       	and	r24, r24
    3dd0:	61 f0       	breq	.+24     	; 0x3dea <tempHumSensor_measure+0x22>
	{
		printf("ERROR: Waking temperature & Humidity Sensor up, ");
    3dd2:	87 e2       	ldi	r24, 0x27	; 39
    3dd4:	95 e0       	ldi	r25, 0x05	; 5
    3dd6:	9f 93       	push	r25
    3dd8:	8f 93       	push	r24
    3dda:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
		tempHumSensor_printReturnCode(wakeup_rc);
    3dde:	8c 2f       	mov	r24, r28
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	c0 df       	rcall	.-128    	; 0x3d64 <tempHumSensor_printReturnCode>
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	08 c0       	rjmp	.+16     	; 0x3dfa <tempHumSensor_measure+0x32>
	}
	else
	{
		printf("--->Woke Temperature & Humidity Sensor up<---");
    3dea:	88 e5       	ldi	r24, 0x58	; 88
    3dec:	95 e0       	ldi	r25, 0x05	; 5
    3dee:	9f 93       	push	r25
    3df0:	8f 93       	push	r24
    3df2:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
	}
	
	//note: After the hih8120_wakeup() call the sensor will need minimum 50 ms to be ready!
	vTaskDelay(pdMS_TO_TICKS(100));
    3dfa:	66 e0       	ldi	r22, 0x06	; 6
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	0e 94 59 13 	call	0x26b2	; 0x26b2 <vTaskDelay>
	
	//waking up the sensor and getting return code.
	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
    3e06:	7d d2       	rcall	.+1274   	; 0x4302 <hih8120_measure>
    3e08:	c8 2f       	mov	r28, r24
	
	//checking return code and printing result.
	if (measure_rc != HIH8120_OK)
    3e0a:	88 23       	and	r24, r24
    3e0c:	61 f0       	breq	.+24     	; 0x3e26 <tempHumSensor_measure+0x5e>
	{
		printf("ERROR: Temperature & Humidity Sensor could not measure, ");
    3e0e:	86 e8       	ldi	r24, 0x86	; 134
    3e10:	95 e0       	ldi	r25, 0x05	; 5
    3e12:	9f 93       	push	r25
    3e14:	8f 93       	push	r24
    3e16:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
		tempHumSensor_printReturnCode(measure_rc);
    3e1a:	8c 2f       	mov	r24, r28
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	a2 df       	rcall	.-188    	; 0x3d64 <tempHumSensor_printReturnCode>
    3e20:	0f 90       	pop	r0
    3e22:	0f 90       	pop	r0
    3e24:	08 c0       	rjmp	.+16     	; 0x3e36 <tempHumSensor_measure+0x6e>
	}
	else
	{
		printf("--->Temperature & Humidity Sensor done measuring<---");
    3e26:	8f eb       	ldi	r24, 0xBF	; 191
    3e28:	95 e0       	ldi	r25, 0x05	; 5
    3e2a:	9f 93       	push	r25
    3e2c:	8f 93       	push	r24
    3e2e:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    3e32:	0f 90       	pop	r0
    3e34:	0f 90       	pop	r0
	}
	
	//note: After the hih8120_measure() call the two wire inteface (TWI) will need minimum 1 ms to fetch the results from the sensor!
	vTaskDelay(pdMS_TO_TICKS(50));
    3e36:	63 e0       	ldi	r22, 0x03	; 3
    3e38:	70 e0       	ldi	r23, 0x00	; 0
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <vTaskDelay>
	
	//Checking if sensor is ready to return measurements.
	if (hih8120_isReady())
    3e42:	47 d2       	rcall	.+1166   	; 0x42d2 <hih8120_isReady>
    3e44:	88 23       	and	r24, r24
    3e46:	11 f1       	breq	.+68     	; 0x3e8c <tempHumSensor_measure+0xc4>
	{
		printf("--->HIH8120 is Ready.<---");
    3e48:	84 ef       	ldi	r24, 0xF4	; 244
    3e4a:	95 e0       	ldi	r25, 0x05	; 5
    3e4c:	9f 93       	push	r25
    3e4e:	8f 93       	push	r24
    3e50:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
		humidity = hih8120_getHumidityPercent_x10();
    3e54:	7c d2       	rcall	.+1272   	; 0x434e <hih8120_getHumidityPercent_x10>
    3e56:	90 93 2a 1a 	sts	0x1A2A, r25	; 0x801a2a <humidity+0x1>
    3e5a:	80 93 29 1a 	sts	0x1A29, r24	; 0x801a29 <humidity>
		printf("--->Humidity Set.<---");
    3e5e:	8e e0       	ldi	r24, 0x0E	; 14
    3e60:	96 e0       	ldi	r25, 0x06	; 6
    3e62:	9f 93       	push	r25
    3e64:	8f 93       	push	r24
    3e66:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
		temperature = hih8120_getTemperature_x10();
    3e6a:	97 d2       	rcall	.+1326   	; 0x439a <hih8120_getTemperature_x10>
    3e6c:	90 93 28 1a 	sts	0x1A28, r25	; 0x801a28 <temperature+0x1>
    3e70:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <temperature>
		printf("--->Temperature Set.<---");
    3e74:	84 e2       	ldi	r24, 0x24	; 36
    3e76:	96 e0       	ldi	r25, 0x06	; 6
    3e78:	9f 93       	push	r25
    3e7a:	8f 93       	push	r24
    3e7c:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    3e80:	0f 90       	pop	r0
    3e82:	0f 90       	pop	r0
    3e84:	0f 90       	pop	r0
    3e86:	0f 90       	pop	r0
    3e88:	0f 90       	pop	r0
    3e8a:	0f 90       	pop	r0
	}
}
    3e8c:	cf 91       	pop	r28
    3e8e:	08 95       	ret

00003e90 <tempHumSensor_task>:

//The temperature and humidity task.
void tempHumSensor_task(void* pvpParameter){
	while (1)
	{
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3e90:	cc 24       	eor	r12, r12
    3e92:	ca 94       	dec	r12
    3e94:	dc 2c       	mov	r13, r12
    3e96:	76 01       	movw	r14, r12
    3e98:	01 e0       	ldi	r16, 0x01	; 1
    3e9a:	21 e0       	ldi	r18, 0x01	; 1
    3e9c:	44 e0       	ldi	r20, 0x04	; 4
    3e9e:	50 e0       	ldi	r21, 0x00	; 0
    3ea0:	60 e0       	ldi	r22, 0x00	; 0
    3ea2:	70 e0       	ldi	r23, 0x00	; 0
    3ea4:	80 91 74 1b 	lds	r24, 0x1B74	; 0x801b74 <measureEventGroup>
    3ea8:	90 91 75 1b 	lds	r25, 0x1B75	; 0x801b75 <measureEventGroup+0x1>
    3eac:	0e 94 57 03 	call	0x6ae	; 0x6ae <xEventGroupWaitBits>
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    3eb0:	62 ff       	sbrs	r22, 2
    3eb2:	ee cf       	rjmp	.-36     	; 0x3e90 <tempHumSensor_task>
		{
			tempHumSensor_measure();
    3eb4:	89 df       	rcall	.-238    	; 0x3dc8 <tempHumSensor_measure>
			//After everything is done just setting 1 to ready bit so its now unblocked
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    3eb6:	48 e0       	ldi	r20, 0x08	; 8
    3eb8:	50 e0       	ldi	r21, 0x00	; 0
    3eba:	60 e0       	ldi	r22, 0x00	; 0
    3ebc:	70 e0       	ldi	r23, 0x00	; 0
    3ebe:	80 91 72 1b 	lds	r24, 0x1B72	; 0x801b72 <dataReadyEventGroup>
    3ec2:	90 91 73 1b 	lds	r25, 0x1B73	; 0x801b73 <dataReadyEventGroup+0x1>
    3ec6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <xEventGroupSetBits>
    3eca:	e2 cf       	rjmp	.-60     	; 0x3e90 <tempHumSensor_task>

00003ecc <initialize_event_groups>:
MessageBufferHandle_t downlinkMessageBufferHandle;
SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    3ecc:	0e 94 44 03 	call	0x688	; 0x688 <xEventGroupCreate>
    3ed0:	90 93 73 1b 	sts	0x1B73, r25	; 0x801b73 <dataReadyEventGroup+0x1>
    3ed4:	80 93 72 1b 	sts	0x1B72, r24	; 0x801b72 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    3ed8:	0e 94 44 03 	call	0x688	; 0x688 <xEventGroupCreate>
    3edc:	90 93 75 1b 	sts	0x1B75, r25	; 0x801b75 <measureEventGroup+0x1>
    3ee0:	80 93 74 1b 	sts	0x1B74, r24	; 0x801b74 <measureEventGroup>
    3ee4:	08 95       	ret

00003ee6 <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3ee6:	41 e0       	ldi	r20, 0x01	; 1
    3ee8:	60 e0       	ldi	r22, 0x00	; 0
    3eea:	70 e0       	ldi	r23, 0x00	; 0
    3eec:	8c e2       	ldi	r24, 0x2C	; 44
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0e 94 4e 0c 	call	0x189c	; 0x189c <xStreamBufferGenericCreate>
    3ef4:	90 93 77 1b 	sts	0x1B77, r25	; 0x801b77 <uplinkMessageBufferHandle+0x1>
    3ef8:	80 93 76 1b 	sts	0x1B76, r24	; 0x801b76 <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    3efc:	89 2b       	or	r24, r25
    3efe:	21 f4       	brne	.+8      	; 0x3f08 <initialize_message_buffers+0x22>
		printf("initialize.c ---> Failed to create uplink message buffer.\n");
    3f00:	8d e3       	ldi	r24, 0x3D	; 61
    3f02:	96 e0       	ldi	r25, 0x06	; 6
    3f04:	0e 94 29 37 	call	0x6e52	; 0x6e52 <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3f08:	41 e0       	ldi	r20, 0x01	; 1
    3f0a:	60 e0       	ldi	r22, 0x00	; 0
    3f0c:	70 e0       	ldi	r23, 0x00	; 0
    3f0e:	8c e2       	ldi	r24, 0x2C	; 44
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	0e 94 4e 0c 	call	0x189c	; 0x189c <xStreamBufferGenericCreate>
    3f16:	90 93 79 1b 	sts	0x1B79, r25	; 0x801b79 <downlinkMessageBufferHandle+0x1>
    3f1a:	80 93 78 1b 	sts	0x1B78, r24	; 0x801b78 <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    3f1e:	89 2b       	or	r24, r25
    3f20:	21 f4       	brne	.+8      	; 0x3f2a <initialize_message_buffers+0x44>
		printf("initialize.c ---> Failed to create downlink message buffer.\n");
    3f22:	87 e7       	ldi	r24, 0x77	; 119
    3f24:	96 e0       	ldi	r25, 0x06	; 6
    3f26:	0c 94 29 37 	jmp	0x6e52	; 0x6e52 <puts>
    3f2a:	08 95       	ret

00003f2c <initialize_semaphore>:
	}
}

void initialize_semaphore(){
    3f2c:	0f 93       	push	r16
	configSemaphore = xSemaphoreCreateMutex();
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	0e 94 68 09 	call	0x12d0	; 0x12d0 <xQueueCreateMutex>
    3f34:	90 93 71 1b 	sts	0x1B71, r25	; 0x801b71 <configSemaphore+0x1>
    3f38:	80 93 70 1b 	sts	0x1B70, r24	; 0x801b70 <configSemaphore>
	if(configSemaphore != NULL){
    3f3c:	00 97       	sbiw	r24, 0x00	; 0
    3f3e:	49 f0       	breq	.+18     	; 0x3f52 <initialize_semaphore+0x26>
		xSemaphoreGive(configSemaphore);
    3f40:	00 e0       	ldi	r16, 0x00	; 0
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	a9 01       	movw	r20, r18
    3f48:	60 e0       	ldi	r22, 0x00	; 0
    3f4a:	70 e0       	ldi	r23, 0x00	; 0
    3f4c:	0e 94 c4 08 	call	0x1188	; 0x1188 <xQueueGenericSend>
    3f50:	04 c0       	rjmp	.+8      	; 0x3f5a <initialize_semaphore+0x2e>
	}
	else{
		printf("initialize.c ---> Failed to create config semaphore.\n");
    3f52:	83 eb       	ldi	r24, 0xB3	; 179
    3f54:	96 e0       	ldi	r25, 0x06	; 6
    3f56:	0e 94 29 37 	call	0x6e52	; 0x6e52 <puts>
	}
}
    3f5a:	0f 91       	pop	r16
    3f5c:	08 95       	ret

00003f5e <_lora_setup>:
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

static void _lora_setup(void)
{
    3f5e:	0f 93       	push	r16
    3f60:	1f 93       	push	r17
    3f62:	cf 93       	push	r28
    3f64:	df 93       	push	r29
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	64 97       	sbiw	r28, 0x14	; 20
    3f6c:	0f b6       	in	r0, 0x3f	; 63
    3f6e:	f8 94       	cli
    3f70:	de bf       	out	0x3e, r29	; 62
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	0e 94 4d 2c 	call	0x589a	; 0x589a <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3f7c:	86 d3       	rcall	.+1804   	; 0x468a <lora_driver_rn2483FactoryReset>
    3f7e:	02 d6       	rcall	.+3076   	; 0x4b84 <lora_driver_mapReturnCodeToText>
    3f80:	9f 93       	push	r25
    3f82:	8f 93       	push	r24
    3f84:	88 ee       	ldi	r24, 0xE8	; 232
    3f86:	96 e0       	ldi	r25, 0x06	; 6
    3f88:	9f 93       	push	r25
    3f8a:	8f 93       	push	r24
    3f8c:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3f90:	fa d4       	rcall	.+2548   	; 0x4986 <lora_driver_configureToEu868>
    3f92:	f8 d5       	rcall	.+3056   	; 0x4b84 <lora_driver_mapReturnCodeToText>
    3f94:	9f 93       	push	r25
    3f96:	8f 93       	push	r24
    3f98:	8b ef       	ldi	r24, 0xFB	; 251
    3f9a:	96 e0       	ldi	r25, 0x06	; 6
    3f9c:	9f 93       	push	r25
    3f9e:	8f 93       	push	r24
    3fa0:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    3fa4:	8e 01       	movw	r16, r28
    3fa6:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3faa:	c8 01       	movw	r24, r16
    3fac:	80 d3       	rcall	.+1792   	; 0x46ae <lora_driver_getRn2483Hweui>
    3fae:	ea d5       	rcall	.+3028   	; 0x4b84 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3fb0:	1f 93       	push	r17
    3fb2:	0f 93       	push	r16
    3fb4:	9f 93       	push	r25
    3fb6:	8f 93       	push	r24
    3fb8:	84 e1       	ldi	r24, 0x14	; 20
    3fba:	97 e0       	ldi	r25, 0x07	; 7
    3fbc:	9f 93       	push	r25
    3fbe:	8f 93       	push	r24
    3fc0:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3fc4:	c8 01       	movw	r24, r16
    3fc6:	8f d3       	rcall	.+1822   	; 0x46e6 <lora_driver_setDeviceIdentifier>
    3fc8:	dd d5       	rcall	.+3002   	; 0x4b84 <lora_driver_mapReturnCodeToText>
    3fca:	9f 93       	push	r25
    3fcc:	8f 93       	push	r24
    3fce:	1f 93       	push	r17
    3fd0:	0f 93       	push	r16
    3fd2:	88 e2       	ldi	r24, 0x28	; 40
    3fd4:	97 e0       	ldi	r25, 0x07	; 7
    3fd6:	9f 93       	push	r25
    3fd8:	8f 93       	push	r24
    3fda:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3fde:	a8 01       	movw	r20, r16
    3fe0:	6d e3       	ldi	r22, 0x3D	; 61
    3fe2:	77 e0       	ldi	r23, 0x07	; 7
    3fe4:	8e e5       	ldi	r24, 0x5E	; 94
    3fe6:	97 e0       	ldi	r25, 0x07	; 7
    3fe8:	ac d5       	rcall	.+2904   	; 0x4b42 <lora_driver_setOtaaIdentity>
    3fea:	cc d5       	rcall	.+2968   	; 0x4b84 <lora_driver_mapReturnCodeToText>
    3fec:	9f 93       	push	r25
    3fee:	8f 93       	push	r24
    3ff0:	1f 93       	push	r17
    3ff2:	0f 93       	push	r16
    3ff4:	8d e3       	ldi	r24, 0x3D	; 61
    3ff6:	97 e0       	ldi	r25, 0x07	; 7
    3ff8:	9f 93       	push	r25
    3ffa:	8f 93       	push	r24
    3ffc:	8e e5       	ldi	r24, 0x5E	; 94
    3ffe:	97 e0       	ldi	r25, 0x07	; 7
    4000:	9f 93       	push	r25
    4002:	8f 93       	push	r24
    4004:	8f e6       	ldi	r24, 0x6F	; 111
    4006:	97 e0       	ldi	r25, 0x07	; 7
    4008:	9f 93       	push	r25
    400a:	8f 93       	push	r24
    400c:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    4010:	9d d3       	rcall	.+1850   	; 0x474c <lora_driver_saveMac>
    4012:	b8 d5       	rcall	.+2928   	; 0x4b84 <lora_driver_mapReturnCodeToText>
    4014:	9f 93       	push	r25
    4016:	8f 93       	push	r24
    4018:	85 ea       	ldi	r24, 0xA5	; 165
    401a:	97 e0       	ldi	r25, 0x07	; 7
    401c:	9f 93       	push	r25
    401e:	8f 93       	push	r24
    4020:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	de bf       	out	0x3e, r29	; 62
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	cd bf       	out	0x3d, r28	; 61
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	87 d4       	rcall	.+2318   	; 0x4940 <lora_driver_setAdaptiveDataRate>
    4032:	a8 d5       	rcall	.+2896   	; 0x4b84 <lora_driver_mapReturnCodeToText>
    4034:	9f 93       	push	r25
    4036:	8f 93       	push	r24
    4038:	84 eb       	ldi	r24, 0xB4	; 180
    403a:	97 e0       	ldi	r25, 0x07	; 7
    403c:	9f 93       	push	r25
    403e:	8f 93       	push	r24
    4040:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    4044:	84 ef       	ldi	r24, 0xF4	; 244
    4046:	91 e0       	ldi	r25, 0x01	; 1
    4048:	86 d4       	rcall	.+2316   	; 0x4956 <lora_driver_setReceiveDelay>
    404a:	9c d5       	rcall	.+2872   	; 0x4b84 <lora_driver_mapReturnCodeToText>
    404c:	9f 93       	push	r25
    404e:	8f 93       	push	r24
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	8f 93       	push	r24
    4054:	84 ef       	ldi	r24, 0xF4	; 244
    4056:	8f 93       	push	r24
    4058:	85 ed       	ldi	r24, 0xD5	; 213
    405a:	97 e0       	ldi	r25, 0x07	; 7
    405c:	9f 93       	push	r25
    405e:	8f 93       	push	r24
    4060:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    406e:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	72 d3       	rcall	.+1764   	; 0x4758 <lora_driver_join>
    4074:	08 2f       	mov	r16, r24
    4076:	86 d5       	rcall	.+2828   	; 0x4b84 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    4078:	9f 93       	push	r25
    407a:	8f 93       	push	r24
    407c:	1f 92       	push	r1
    407e:	1f 93       	push	r17
    4080:	85 ef       	ldi	r24, 0xF5	; 245
    4082:	97 e0       	ldi	r25, 0x07	; 7
    4084:	9f 93       	push	r25
    4086:	8f 93       	push	r24
    4088:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    4090:	0f 90       	pop	r0
    4092:	0f 90       	pop	r0
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	08 30       	cpi	r16, 0x08	; 8
    409a:	59 f0       	breq	.+22     	; 0x40b2 <_lora_setup+0x154>
    409c:	80 e0       	ldi	r24, 0x00	; 0
    409e:	0e 94 b1 2c 	call	0x5962	; 0x5962 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    40a2:	66 e3       	ldi	r22, 0x36	; 54
    40a4:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 59 13 	call	0x26b2	; 0x26b2 <vTaskDelay>
    40ae:	11 50       	subi	r17, 0x01	; 1
    40b0:	f9 f6       	brne	.-66     	; 0x4070 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    40b2:	08 30       	cpi	r16, 0x08	; 8
    40b4:	21 f4       	brne	.+8      	; 0x40be <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	0e 94 93 2c 	call	0x5926	; 0x5926 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    40bc:	09 c0       	rjmp	.+18     	; 0x40d0 <_lora_setup+0x172>
    40be:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    40c0:	0e 94 a2 2c 	call	0x5944	; 0x5944 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    40ca:	0e 94 ac 06 	call	0xd58	; 0xd58 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    40ce:	fd cf       	rjmp	.-6      	; 0x40ca <_lora_setup+0x16c>
    40d0:	64 96       	adiw	r28, 0x14	; 20
    40d2:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    40d4:	f8 94       	cli
    40d6:	de bf       	out	0x3e, r29	; 62
    40d8:	0f be       	out	0x3f, r0	; 63
    40da:	cd bf       	out	0x3d, r28	; 61
    40dc:	df 91       	pop	r29
    40de:	cf 91       	pop	r28
    40e0:	1f 91       	pop	r17
    40e2:	0f 91       	pop	r16
    40e4:	08 95       	ret

000040e6 <uplinkHandler_task>:
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	c2 d2       	rcall	.+1412   	; 0x466e <lora_driver_resetRn2483>

void uplinkHandler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    40ea:	62 e0       	ldi	r22, 0x02	; 2
    40ec:	70 e0       	ldi	r23, 0x00	; 0
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	0e 94 59 13 	call	0x26b2	; 0x26b2 <vTaskDelay>
	lora_driver_resetRn2483(0);
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	ba d2       	rcall	.+1396   	; 0x466e <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    40fa:	66 e9       	ldi	r22, 0x96	; 150
    40fc:	70 e0       	ldi	r23, 0x00	; 0
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	0e 94 59 13 	call	0x26b2	; 0x26b2 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    4106:	6c d2       	rcall	.+1240   	; 0x45e0 <lora_driver_flushBuffers>

	_lora_setup();
    4108:	2a df       	rcall	.-428    	; 0x3f5e <_lora_setup>
    410a:	0f ef       	ldi	r16, 0xFF	; 255
		uint16_t hum = 0;
		uint16_t co2 = 0;
		uint8_t status = 0;
		uint8_t xReceivedBytes = 0;
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    410c:	1f ef       	ldi	r17, 0xFF	; 255
    410e:	98 01       	movw	r18, r16
    4110:	46 e1       	ldi	r20, 0x16	; 22
    4112:	50 e0       	ldi	r21, 0x00	; 0
    4114:	6b e2       	ldi	r22, 0x2B	; 43
    4116:	7a e1       	ldi	r23, 0x1A	; 26
    4118:	80 91 76 1b 	lds	r24, 0x1B76	; 0x801b76 <uplinkMessageBufferHandle>
    411c:	90 91 77 1b 	lds	r25, 0x1B77	; 0x801b77 <uplinkMessageBufferHandle+0x1>
    4120:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xStreamBufferReceive>
    4124:	88 23       	and	r24, r24
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    4126:	89 f3       	breq	.-30     	; 0x410a <uplinkHandler_task+0x24>
    4128:	eb e2       	ldi	r30, 0x2B	; 43
			// 				printf("Number of bytes read from the message buffer: %d\n", xReceivedBytes);
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    412a:	fa e1       	ldi	r31, 0x1A	; 26
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	98 2f       	mov	r25, r24
    4132:	88 27       	eor	r24, r24
    4134:	23 81       	ldd	r18, Z+3	; 0x03
    4136:	82 2b       	or	r24, r18
    4138:	04 81       	ldd	r16, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    413a:	10 e0       	ldi	r17, 0x00	; 0
    413c:	10 2f       	mov	r17, r16
    413e:	00 27       	eor	r16, r16
    4140:	25 81       	ldd	r18, Z+5	; 0x05
    4142:	02 2b       	or	r16, r18
    4144:	c6 81       	ldd	r28, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    4146:	d0 e0       	ldi	r29, 0x00	; 0
    4148:	dc 2f       	mov	r29, r28
    414a:	cc 27       	eor	r28, r28
    414c:	27 81       	ldd	r18, Z+7	; 0x07
    414e:	c2 2b       	or	r28, r18
    4150:	f0 84       	ldd	r15, Z+8	; 0x08
			status = _uplink_payload.bytes[6];
    4152:	9f 93       	push	r25
			
			printf("Temperature sent: %d\n", tem);
    4154:	8f 93       	push	r24
    4156:	85 e1       	ldi	r24, 0x15	; 21
    4158:	98 e0       	ldi	r25, 0x08	; 8
    415a:	9f 93       	push	r25
    415c:	8f 93       	push	r24
    415e:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    4162:	1f 93       	push	r17
			printf("Humidity sent: %d\n", hum);
    4164:	0f 93       	push	r16
    4166:	8b e2       	ldi	r24, 0x2B	; 43
    4168:	98 e0       	ldi	r25, 0x08	; 8
    416a:	9f 93       	push	r25
    416c:	8f 93       	push	r24
    416e:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    4172:	df 93       	push	r29
			printf("CO2 sent: %d\n", co2);
    4174:	cf 93       	push	r28
    4176:	8e e3       	ldi	r24, 0x3E	; 62
    4178:	98 e0       	ldi	r25, 0x08	; 8
    417a:	9f 93       	push	r25
    417c:	8f 93       	push	r24
    417e:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    4182:	1f 92       	push	r1
			printf("Status sent: %d\n", status);
    4184:	ff 92       	push	r15
    4186:	8c e4       	ldi	r24, 0x4C	; 76
    4188:	98 e0       	ldi	r25, 0x08	; 8
    418a:	9f 93       	push	r25
    418c:	8f 93       	push	r24
    418e:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    4192:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    4194:	0e 94 c3 2c 	call	0x5986	; 0x5986 <status_leds_shortPuls>
			//WHAT THE HELL DOES THE FALSE DO
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    4198:	6b e2       	ldi	r22, 0x2B	; 43
    419a:	7a e1       	ldi	r23, 0x1A	; 26
    419c:	80 e0       	ldi	r24, 0x00	; 0
    419e:	05 d3       	rcall	.+1546   	; 0x47aa <lora_driver_sendUploadMessage>
    41a0:	f1 d4       	rcall	.+2530   	; 0x4b84 <lora_driver_mapReturnCodeToText>
    41a2:	9f 93       	push	r25
    41a4:	8f 93       	push	r24
    41a6:	8d e5       	ldi	r24, 0x5D	; 93
    41a8:	98 e0       	ldi	r25, 0x08	; 8
    41aa:	9f 93       	push	r25
    41ac:	8f 93       	push	r24
    41ae:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <printf>
    41b2:	8d b7       	in	r24, 0x3d	; 61
    41b4:	9e b7       	in	r25, 0x3e	; 62
    41b6:	44 96       	adiw	r24, 0x14	; 20
    41b8:	0f b6       	in	r0, 0x3f	; 63
    41ba:	f8 94       	cli
    41bc:	9e bf       	out	0x3e, r25	; 62
    41be:	0f be       	out	0x3f, r0	; 63
    41c0:	8d bf       	out	0x3d, r24	; 61
    41c2:	a3 cf       	rjmp	.-186    	; 0x410a <uplinkHandler_task+0x24>

000041c4 <uplinkHandler_createTask>:
    41c4:	ef 92       	push	r14
void uplinkHandler_create(UBaseType_t priority)
{
	uplinkHandler_createTask(priority);
}

void uplinkHandler_createTask(UBaseType_t priority){
    41c6:	ff 92       	push	r15
    41c8:	0f 93       	push	r16
	xTaskCreate(
    41ca:	e1 2c       	mov	r14, r1
    41cc:	f1 2c       	mov	r15, r1
    41ce:	08 2f       	mov	r16, r24
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	48 e8       	ldi	r20, 0x88	; 136
    41d6:	51 e0       	ldi	r21, 0x01	; 1
    41d8:	62 e7       	ldi	r22, 0x72	; 114
    41da:	78 e0       	ldi	r23, 0x08	; 8
    41dc:	83 e7       	ldi	r24, 0x73	; 115
    41de:	90 e2       	ldi	r25, 0x20	; 32
    41e0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xTaskCreate>
	,  "LRHandUplink"
	,  configMINIMAL_STACK_SIZE+200
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
    41e4:	0f 91       	pop	r16
    41e6:	ff 90       	pop	r15
    41e8:	ef 90       	pop	r14
    41ea:	08 95       	ret

000041ec <uplinkHandler_create>:

void uplinkHandler_task( void *pvParameters);

void uplinkHandler_create(UBaseType_t priority)
{
	uplinkHandler_createTask(priority);
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	ea cf       	rjmp	.-44     	; 0x41c4 <uplinkHandler_createTask>
    41f0:	08 95       	ret

000041f2 <main_create>:
#include "uplinkHandler.h"
#include "downlinkHandler.h"


void main_create(){
	uplinkHandler_create(4);
    41f2:	84 e0       	ldi	r24, 0x04	; 4
    41f4:	fb df       	rcall	.-10     	; 0x41ec <uplinkHandler_create>
	downlinkHandler_create(4);
    41f6:	84 e0       	ldi	r24, 0x04	; 4
    41f8:	0e 94 af 02 	call	0x55e	; 0x55e <downlinkHandler_create>
	application_create(3);
    41fc:	83 e0       	ldi	r24, 0x03	; 3
    41fe:	0e 94 0b 02 	call	0x416	; 0x416 <application_create>
	co2Sensor_create(1);
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	31 dd       	rcall	.-1438   	; 0x3c68 <co2Sensor_create>
	tempHumSensor_create(1);
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	d7 dd       	rcall	.-1106   	; 0x3db8 <tempHumSensor_create>
    420a:	82 e0       	ldi	r24, 0x02	; 2
	windowController_create(2);
    420c:	0e 94 1d 03 	call	0x63a	; 0x63a <windowController_create>
    4210:	0c 94 b1 02 	jmp	0x562	; 0x562 <servoController_craete>
	servoController_craete();
    4214:	08 95       	ret

00004216 <initializeSystem>:
    4216:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4218:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    421c:	85 e0       	ldi	r24, 0x05	; 5
    421e:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <status_leds_initialise>

	initialize_event_groups();
    4222:	54 de       	rcall	.-856    	; 0x3ecc <initialize_event_groups>
	initialize_message_buffers();
    4224:	60 de       	rcall	.-832    	; 0x3ee6 <initialize_message_buffers>
	initialize_semaphore();
    4226:	82 de       	rcall	.-764    	; 0x3f2c <initialize_semaphore>
    4228:	60 91 78 1b 	lds	r22, 0x1B78	; 0x801b78 <downlinkMessageBufferHandle>
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    422c:	70 91 79 1b 	lds	r23, 0x1B79	; 0x801b79 <downlinkMessageBufferHandle+0x1>
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	dd d1       	rcall	.+954    	; 0x45ee <lora_driver_initialise>
	main_create();
    4234:	de cf       	rjmp	.-68     	; 0x41f2 <main_create>
    4236:	08 95       	ret

00004238 <main>:
    4238:	ee df       	rcall	.-36     	; 0x4216 <initializeSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    423a:	8f e7       	ldi	r24, 0x7F	; 127
    423c:	98 e0       	ldi	r25, 0x08	; 8
    423e:	0e 94 29 37 	call	0x6e52	; 0x6e52 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    4242:	0e 94 a0 10 	call	0x2140	; 0x2140 <vTaskStartScheduler>
    4246:	ff cf       	rjmp	.-2      	; 0x4246 <main+0xe>

00004248 <_hihTwiCallback>:
    4248:	65 30       	cpi	r22, 0x05	; 5
    424a:	f1 f4       	brne	.+60     	; 0x4288 <_hihTwiCallback+0x40>
    424c:	fa 01       	movw	r30, r20
    424e:	80 81       	ld	r24, Z
    4250:	8f 73       	andi	r24, 0x3F	; 63
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	98 2f       	mov	r25, r24
    4256:	88 27       	eor	r24, r24
    4258:	21 81       	ldd	r18, Z+1	; 0x01
    425a:	82 2b       	or	r24, r18
    425c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4260:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4264:	82 81       	ldd	r24, Z+2	; 0x02
    4266:	f0 e4       	ldi	r31, 0x40	; 64
    4268:	8f 9f       	mul	r24, r31
    426a:	c0 01       	movw	r24, r0
    426c:	11 24       	eor	r1, r1
    426e:	fa 01       	movw	r30, r20
    4270:	23 81       	ldd	r18, Z+3	; 0x03
    4272:	26 95       	lsr	r18
    4274:	26 95       	lsr	r18
    4276:	82 2b       	or	r24, r18
    4278:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    427c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <_measuringIsReady>
    4286:	08 95       	ret
    4288:	64 30       	cpi	r22, 0x04	; 4
    428a:	51 f0       	breq	.+20     	; 0x42a0 <_hihTwiCallback+0x58>
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	90 e4       	ldi	r25, 0x40	; 64
    4290:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4294:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4298:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    429c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    42a0:	08 95       	ret

000042a2 <hih8120_initialise>:
    42a2:	0f 93       	push	r16
    42a4:	1f 93       	push	r17
    42a6:	04 e2       	ldi	r16, 0x24	; 36
    42a8:	11 e2       	ldi	r17, 0x21	; 33
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	34 e2       	ldi	r19, 0x24	; 36
    42ae:	44 ef       	ldi	r20, 0xF4	; 244
    42b0:	50 e0       	ldi	r21, 0x00	; 0
    42b2:	60 e0       	ldi	r22, 0x00	; 0
    42b4:	87 e2       	ldi	r24, 0x27	; 39
    42b6:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <twiCreate>
    42ba:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <_hih8120Handler+0x1>
    42be:	80 93 42 1a 	sts	0x1A42, r24	; 0x801a42 <_hih8120Handler>
    42c2:	21 e0       	ldi	r18, 0x01	; 1
    42c4:	89 2b       	or	r24, r25
    42c6:	09 f0       	breq	.+2      	; 0x42ca <hih8120_initialise+0x28>
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	82 2f       	mov	r24, r18
    42cc:	1f 91       	pop	r17
    42ce:	0f 91       	pop	r16
    42d0:	08 95       	ret

000042d2 <hih8120_isReady>:
    42d2:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <_measuringIsReady>
    42d6:	08 95       	ret

000042d8 <hih8120_wakeup>:
    42d8:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <_hih8120Handler>
    42dc:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <_hih8120Handler+0x1>
    42e0:	00 97       	sbiw	r24, 0x00	; 0
    42e2:	59 f0       	breq	.+22     	; 0x42fa <hih8120_wakeup+0x22>
    42e4:	40 e0       	ldi	r20, 0x00	; 0
    42e6:	60 e0       	ldi	r22, 0x00	; 0
    42e8:	70 e0       	ldi	r23, 0x00	; 0
    42ea:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <twiTransmit>
    42ee:	84 30       	cpi	r24, 0x04	; 4
    42f0:	31 f4       	brne	.+12     	; 0x42fe <hih8120_wakeup+0x26>
    42f2:	10 92 41 1a 	sts	0x1A41, r1	; 0x801a41 <_measuringIsReady>
    42f6:	80 e0       	ldi	r24, 0x00	; 0
    42f8:	08 95       	ret
    42fa:	82 e0       	ldi	r24, 0x02	; 2
    42fc:	08 95       	ret
    42fe:	83 e0       	ldi	r24, 0x03	; 3
    4300:	08 95       	ret

00004302 <hih8120_measure>:
    4302:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <_hih8120Handler>
    4306:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <_hih8120Handler+0x1>
    430a:	00 97       	sbiw	r24, 0x00	; 0
    430c:	39 f0       	breq	.+14     	; 0x431c <hih8120_measure+0x1a>
    430e:	64 e0       	ldi	r22, 0x04	; 4
    4310:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <twiReceive>
    4314:	85 30       	cpi	r24, 0x05	; 5
    4316:	21 f0       	breq	.+8      	; 0x4320 <hih8120_measure+0x1e>
    4318:	83 e0       	ldi	r24, 0x03	; 3
    431a:	08 95       	ret
    431c:	82 e0       	ldi	r24, 0x02	; 2
    431e:	08 95       	ret
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	08 95       	ret

00004324 <hih8120_getHumidity>:
    4324:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4328:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	0e 94 16 33 	call	0x662c	; 0x662c <__floatunsisf>
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	48 ec       	ldi	r20, 0xC8	; 200
    433a:	52 e4       	ldi	r21, 0x42	; 66
    433c:	0e 94 a4 33 	call	0x6748	; 0x6748 <__mulsf3>
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	38 ef       	ldi	r19, 0xF8	; 248
    4344:	4f e7       	ldi	r20, 0x7F	; 127
    4346:	56 e4       	ldi	r21, 0x46	; 70
    4348:	0c 94 7d 32 	jmp	0x64fa	; 0x64fa <__divsf3>
    434c:	08 95       	ret

0000434e <hih8120_getHumidityPercent_x10>:
    434e:	ea df       	rcall	.-44     	; 0x4324 <hih8120_getHumidity>
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	30 e0       	ldi	r19, 0x00	; 0
    4354:	40 e2       	ldi	r20, 0x20	; 32
    4356:	51 e4       	ldi	r21, 0x41	; 65
    4358:	0e 94 a4 33 	call	0x6748	; 0x6748 <__mulsf3>
    435c:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__fixunssfsi>
    4360:	cb 01       	movw	r24, r22
    4362:	08 95       	ret

00004364 <hih8120_getTemperature>:
    4364:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4368:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    436c:	80 e0       	ldi	r24, 0x00	; 0
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	0e 94 16 33 	call	0x662c	; 0x662c <__floatunsisf>
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	45 e2       	ldi	r20, 0x25	; 37
    437a:	53 e4       	ldi	r21, 0x43	; 67
    437c:	0e 94 a4 33 	call	0x6748	; 0x6748 <__mulsf3>
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	38 ef       	ldi	r19, 0xF8	; 248
    4384:	4f e7       	ldi	r20, 0x7F	; 127
    4386:	56 e4       	ldi	r21, 0x46	; 70
    4388:	0e 94 7d 32 	call	0x64fa	; 0x64fa <__divsf3>
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	40 e2       	ldi	r20, 0x20	; 32
    4392:	52 e4       	ldi	r21, 0x42	; 66
    4394:	0c 94 18 32 	jmp	0x6430	; 0x6430 <__subsf3>
    4398:	08 95       	ret

0000439a <hih8120_getTemperature_x10>:
    439a:	e4 df       	rcall	.-56     	; 0x4364 <hih8120_getTemperature>
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	40 e2       	ldi	r20, 0x20	; 32
    43a2:	51 e4       	ldi	r21, 0x41	; 65
    43a4:	0e 94 a4 33 	call	0x6748	; 0x6748 <__mulsf3>
    43a8:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__fixsfsi>
    43ac:	cb 01       	movw	r24, r22
    43ae:	08 95       	ret

000043b0 <_serialCallBack>:
    43b0:	0f 93       	push	r16
    43b2:	1f 93       	push	r17
    43b4:	cf 93       	push	r28
    43b6:	df 93       	push	r29
    43b8:	1f 92       	push	r1
    43ba:	1f 92       	push	r1
    43bc:	cd b7       	in	r28, 0x3d	; 61
    43be:	de b7       	in	r29, 0x3e	; 62
    43c0:	8c 01       	movw	r16, r24
    43c2:	19 82       	std	Y+1, r1	; 0x01
    43c4:	2d c0       	rjmp	.+90     	; 0x4420 <_serialCallBack+0x70>
    43c6:	e0 91 7b 1a 	lds	r30, 0x1A7B	; 0x801a7b <rec_buf_inp.2878>
    43ca:	ec 32       	cpi	r30, 0x2C	; 44
    43cc:	50 f4       	brcc	.+20     	; 0x43e2 <_serialCallBack+0x32>
    43ce:	81 e0       	ldi	r24, 0x01	; 1
    43d0:	8e 0f       	add	r24, r30
    43d2:	80 93 7b 1a 	sts	0x1A7B, r24	; 0x801a7b <rec_buf_inp.2878>
    43d6:	f0 e0       	ldi	r31, 0x00	; 0
    43d8:	e3 55       	subi	r30, 0x53	; 83
    43da:	f5 4e       	sbci	r31, 0xE5	; 229
    43dc:	8a 81       	ldd	r24, Y+2	; 0x02
    43de:	80 83       	st	Z, r24
    43e0:	02 c0       	rjmp	.+4      	; 0x43e6 <_serialCallBack+0x36>
    43e2:	10 92 7b 1a 	sts	0x1A7B, r1	; 0x801a7b <rec_buf_inp.2878>
    43e6:	8a 81       	ldd	r24, Y+2	; 0x02
    43e8:	8a 30       	cpi	r24, 0x0A	; 10
    43ea:	d1 f4       	brne	.+52     	; 0x4420 <_serialCallBack+0x70>
    43ec:	40 91 7b 1a 	lds	r20, 0x1A7B	; 0x801a7b <rec_buf_inp.2878>
    43f0:	50 e0       	ldi	r21, 0x00	; 0
    43f2:	fa 01       	movw	r30, r20
    43f4:	e5 55       	subi	r30, 0x55	; 85
    43f6:	f5 4e       	sbci	r31, 0xE5	; 229
    43f8:	10 82       	st	Z, r1
    43fa:	41 50       	subi	r20, 0x01	; 1
    43fc:	51 09       	sbc	r21, r1
    43fe:	9e 01       	movw	r18, r28
    4400:	2f 5f       	subi	r18, 0xFF	; 255
    4402:	3f 4f       	sbci	r19, 0xFF	; 255
    4404:	6d ea       	ldi	r22, 0xAD	; 173
    4406:	7a e1       	ldi	r23, 0x1A	; 26
    4408:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <_serialReplyBufferHandle>
    440c:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <_serialReplyBufferHandle+0x1>
    4410:	0e 94 75 0d 	call	0x1aea	; 0x1aea <xStreamBufferSendFromISR>
    4414:	89 81       	ldd	r24, Y+1	; 0x01
    4416:	81 11       	cpse	r24, r1
    4418:	0e 94 ac 06 	call	0xd58	; 0xd58 <vPortYield>
    441c:	10 92 7b 1a 	sts	0x1A7B, r1	; 0x801a7b <rec_buf_inp.2878>
    4420:	be 01       	movw	r22, r28
    4422:	6e 5f       	subi	r22, 0xFE	; 254
    4424:	7f 4f       	sbci	r23, 0xFF	; 255
    4426:	c8 01       	movw	r24, r16
    4428:	4d d6       	rcall	.+3226   	; 0x50c4 <serial_getByte>
    442a:	88 23       	and	r24, r24
    442c:	61 f2       	breq	.-104    	; 0x43c6 <_serialCallBack+0x16>
    442e:	0f 90       	pop	r0
    4430:	0f 90       	pop	r0
    4432:	df 91       	pop	r29
    4434:	cf 91       	pop	r28
    4436:	1f 91       	pop	r17
    4438:	0f 91       	pop	r16
    443a:	08 95       	ret

0000443c <_uploadMessage>:
    443c:	0f 93       	push	r16
    443e:	1f 93       	push	r17
    4440:	cf 93       	push	r28
    4442:	df 93       	push	r29
    4444:	8c 01       	movw	r16, r24
    4446:	eb 01       	movw	r28, r22
    4448:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <_serialReplyBufferHandle>
    444c:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <_serialReplyBufferHandle+0x1>
    4450:	0e 94 80 0c 	call	0x1900	; 0x1900 <xStreamBufferReset>
    4454:	b8 01       	movw	r22, r16
    4456:	84 e4       	ldi	r24, 0x44	; 68
    4458:	9a e1       	ldi	r25, 0x1A	; 26
    445a:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <strcpy>
    445e:	20 97       	sbiw	r28, 0x00	; 0
    4460:	79 f0       	breq	.+30     	; 0x4480 <_uploadMessage+0x44>
    4462:	e4 e4       	ldi	r30, 0x44	; 68
    4464:	fa e1       	ldi	r31, 0x1A	; 26
    4466:	01 90       	ld	r0, Z+
    4468:	00 20       	and	r0, r0
    446a:	e9 f7       	brne	.-6      	; 0x4466 <_uploadMessage+0x2a>
    446c:	31 97       	sbiw	r30, 0x01	; 1
    446e:	80 e2       	ldi	r24, 0x20	; 32
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	91 83       	std	Z+1, r25	; 0x01
    4474:	80 83       	st	Z, r24
    4476:	be 01       	movw	r22, r28
    4478:	84 e4       	ldi	r24, 0x44	; 68
    447a:	9a e1       	ldi	r25, 0x1A	; 26
    447c:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <strcat>
    4480:	e4 e4       	ldi	r30, 0x44	; 68
    4482:	fa e1       	ldi	r31, 0x1A	; 26
    4484:	df 01       	movw	r26, r30
    4486:	0d 90       	ld	r0, X+
    4488:	00 20       	and	r0, r0
    448a:	e9 f7       	brne	.-6      	; 0x4486 <_uploadMessage+0x4a>
    448c:	11 97       	sbiw	r26, 0x01	; 1
    448e:	8d e0       	ldi	r24, 0x0D	; 13
    4490:	9a e0       	ldi	r25, 0x0A	; 10
    4492:	11 96       	adiw	r26, 0x01	; 1
    4494:	9c 93       	st	X, r25
    4496:	8e 93       	st	-X, r24
    4498:	12 96       	adiw	r26, 0x02	; 2
    449a:	1c 92       	st	X, r1
    449c:	01 90       	ld	r0, Z+
    449e:	00 20       	and	r0, r0
    44a0:	e9 f7       	brne	.-6      	; 0x449c <_uploadMessage+0x60>
    44a2:	31 97       	sbiw	r30, 0x01	; 1
    44a4:	e4 54       	subi	r30, 0x44	; 68
    44a6:	fa 41       	sbci	r31, 0x1A	; 26
    44a8:	ae 2f       	mov	r26, r30
    44aa:	84 e4       	ldi	r24, 0x44	; 68
    44ac:	9a e1       	ldi	r25, 0x1A	; 26
    44ae:	ac 01       	movw	r20, r24
    44b0:	6a 2f       	mov	r22, r26
    44b2:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <_rn2483_serial>
    44b6:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <_rn2483_serial+0x1>
    44ba:	af d5       	rcall	.+2910   	; 0x501a <serial_sendBytes>
    44bc:	81 11       	cpse	r24, r1
    44be:	11 c0       	rjmp	.+34     	; 0x44e2 <_uploadMessage+0xa6>
    44c0:	08 e2       	ldi	r16, 0x28	; 40
    44c2:	15 e0       	ldi	r17, 0x05	; 5
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	4d e2       	ldi	r20, 0x2D	; 45
    44ca:	50 e0       	ldi	r21, 0x00	; 0
    44cc:	67 e0       	ldi	r22, 0x07	; 7
    44ce:	7b e1       	ldi	r23, 0x1B	; 27
    44d0:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <_serialReplyBufferHandle>
    44d4:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <_serialReplyBufferHandle+0x1>
    44d8:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xStreamBufferReceive>
    44dc:	87 e0       	ldi	r24, 0x07	; 7
    44de:	9b e1       	ldi	r25, 0x1B	; 27
    44e0:	02 c0       	rjmp	.+4      	; 0x44e6 <_uploadMessage+0xaa>
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	1f 91       	pop	r17
    44ec:	0f 91       	pop	r16
    44ee:	08 95       	ret

000044f0 <_reply2ReturnCode>:
    44f0:	2f 92       	push	r2
    44f2:	3f 92       	push	r3
    44f4:	4f 92       	push	r4
    44f6:	5f 92       	push	r5
    44f8:	6f 92       	push	r6
    44fa:	7f 92       	push	r7
    44fc:	8f 92       	push	r8
    44fe:	9f 92       	push	r9
    4500:	af 92       	push	r10
    4502:	bf 92       	push	r11
    4504:	cf 92       	push	r12
    4506:	df 92       	push	r13
    4508:	ef 92       	push	r14
    450a:	ff 92       	push	r15
    450c:	0f 93       	push	r16
    450e:	1f 93       	push	r17
    4510:	cf 93       	push	r28
    4512:	df 93       	push	r29
    4514:	5c 01       	movw	r10, r24
    4516:	fc 01       	movw	r30, r24
    4518:	01 90       	ld	r0, Z+
    451a:	00 20       	and	r0, r0
    451c:	e9 f7       	brne	.-6      	; 0x4518 <_reply2ReturnCode+0x28>
    451e:	31 97       	sbiw	r30, 0x01	; 1
    4520:	6f 01       	movw	r12, r30
    4522:	c8 1a       	sub	r12, r24
    4524:	d9 0a       	sbc	r13, r25
    4526:	5c 2c       	mov	r5, r12
    4528:	0f 2e       	mov	r0, r31
    452a:	fa e2       	ldi	r31, 0x2A	; 42
    452c:	8f 2e       	mov	r8, r31
    452e:	fb e0       	ldi	r31, 0x0B	; 11
    4530:	9f 2e       	mov	r9, r31
    4532:	f0 2d       	mov	r31, r0
    4534:	e1 2c       	mov	r14, r1
    4536:	f1 2c       	mov	r15, r1
    4538:	4c 2c       	mov	r4, r12
    453a:	37 01       	movw	r6, r14
    453c:	f4 01       	movw	r30, r8
    453e:	01 81       	ldd	r16, Z+1	; 0x01
    4540:	12 81       	ldd	r17, Z+2	; 0x02
    4542:	e8 01       	movw	r28, r16
    4544:	09 90       	ld	r0, Y+
    4546:	00 20       	and	r0, r0
    4548:	e9 f7       	brne	.-6      	; 0x4544 <_reply2ReturnCode+0x54>
    454a:	21 97       	sbiw	r28, 0x01	; 1
    454c:	c0 1b       	sub	r28, r16
    454e:	d1 0b       	sbc	r29, r17
    4550:	3c 2e       	mov	r3, r28
    4552:	f9 e0       	ldi	r31, 0x09	; 9
    4554:	cf 16       	cp	r12, r31
    4556:	d1 04       	cpc	r13, r1
    4558:	58 f0       	brcs	.+22     	; 0x4570 <_reply2ReturnCode+0x80>
    455a:	f4 01       	movw	r30, r8
    455c:	20 80       	ld	r2, Z
    455e:	fe e0       	ldi	r31, 0x0E	; 14
    4560:	2f 12       	cpse	r2, r31
    4562:	06 c0       	rjmp	.+12     	; 0x4570 <_reply2ReturnCode+0x80>
    4564:	b8 01       	movw	r22, r16
    4566:	c5 01       	movw	r24, r10
    4568:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <strcasestr>
    456c:	89 2b       	or	r24, r25
    456e:	09 f5       	brne	.+66     	; 0x45b2 <_reply2ReturnCode+0xc2>
    4570:	44 2d       	mov	r20, r4
    4572:	35 14       	cp	r3, r5
    4574:	08 f4       	brcc	.+2      	; 0x4578 <_reply2ReturnCode+0x88>
    4576:	4c 2f       	mov	r20, r28
    4578:	50 e0       	ldi	r21, 0x00	; 0
    457a:	b8 01       	movw	r22, r16
    457c:	c5 01       	movw	r24, r10
    457e:	0e 94 b6 36 	call	0x6d6c	; 0x6d6c <strncasecmp>
    4582:	89 2b       	or	r24, r25
    4584:	49 f4       	brne	.+18     	; 0x4598 <_reply2ReturnCode+0xa8>
    4586:	f3 01       	movw	r30, r6
    4588:	ee 0f       	add	r30, r30
    458a:	ff 1f       	adc	r31, r31
    458c:	e6 0d       	add	r30, r6
    458e:	f7 1d       	adc	r31, r7
    4590:	e6 5d       	subi	r30, 0xD6	; 214
    4592:	f4 4f       	sbci	r31, 0xF4	; 244
    4594:	20 80       	ld	r2, Z
    4596:	0d c0       	rjmp	.+26     	; 0x45b2 <_reply2ReturnCode+0xc2>
    4598:	8f ef       	ldi	r24, 0xFF	; 255
    459a:	e8 1a       	sub	r14, r24
    459c:	f8 0a       	sbc	r15, r24
    459e:	e3 e0       	ldi	r30, 0x03	; 3
    45a0:	8e 0e       	add	r8, r30
    45a2:	91 1c       	adc	r9, r1
    45a4:	f1 e1       	ldi	r31, 0x11	; 17
    45a6:	ef 16       	cp	r14, r31
    45a8:	f1 04       	cpc	r15, r1
    45aa:	39 f6       	brne	.-114    	; 0x453a <_reply2ReturnCode+0x4a>
    45ac:	68 94       	set
    45ae:	22 24       	eor	r2, r2
    45b0:	24 f8       	bld	r2, 4
    45b2:	82 2d       	mov	r24, r2
    45b4:	df 91       	pop	r29
    45b6:	cf 91       	pop	r28
    45b8:	1f 91       	pop	r17
    45ba:	0f 91       	pop	r16
    45bc:	ff 90       	pop	r15
    45be:	ef 90       	pop	r14
    45c0:	df 90       	pop	r13
    45c2:	cf 90       	pop	r12
    45c4:	bf 90       	pop	r11
    45c6:	af 90       	pop	r10
    45c8:	9f 90       	pop	r9
    45ca:	8f 90       	pop	r8
    45cc:	7f 90       	pop	r7
    45ce:	6f 90       	pop	r6
    45d0:	5f 90       	pop	r5
    45d2:	4f 90       	pop	r4
    45d4:	3f 90       	pop	r3
    45d6:	2f 90       	pop	r2
    45d8:	08 95       	ret

000045da <_uploadMessageRc>:
    45da:	30 df       	rcall	.-416    	; 0x443c <_uploadMessage>
    45dc:	89 cf       	rjmp	.-238    	; 0x44f0 <_reply2ReturnCode>
    45de:	08 95       	ret

000045e0 <lora_driver_flushBuffers>:
    45e0:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <_serialReplyBufferHandle>
    45e4:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <_serialReplyBufferHandle+0x1>
    45e8:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <xStreamBufferReset>
    45ec:	08 95       	ret

000045ee <lora_driver_initialise>:
    45ee:	8f 92       	push	r8
    45f0:	9f 92       	push	r9
    45f2:	af 92       	push	r10
    45f4:	cf 92       	push	r12
    45f6:	ef 92       	push	r14
    45f8:	0f 93       	push	r16
    45fa:	1f 93       	push	r17
    45fc:	cf 93       	push	r28
    45fe:	c8 2f       	mov	r28, r24
    4600:	8b 01       	movw	r16, r22
    4602:	41 e0       	ldi	r20, 0x01	; 1
    4604:	60 e0       	ldi	r22, 0x00	; 0
    4606:	70 e0       	ldi	r23, 0x00	; 0
    4608:	88 ec       	ldi	r24, 0xC8	; 200
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	0e 94 4e 0c 	call	0x189c	; 0x189c <xStreamBufferGenericCreate>
    4610:	90 93 7f 1a 	sts	0x1A7F, r25	; 0x801a7f <_serialReplyBufferHandle+0x1>
    4614:	80 93 7e 1a 	sts	0x1A7E, r24	; 0x801a7e <_serialReplyBufferHandle>
    4618:	10 93 7d 1a 	sts	0x1A7D, r17	; 0x801a7d <_downlinkMessageBuffer+0x1>
    461c:	00 93 7c 1a 	sts	0x1A7C, r16	; 0x801a7c <_downlinkMessageBuffer>
    4620:	0f 2e       	mov	r0, r31
    4622:	f8 ed       	ldi	r31, 0xD8	; 216
    4624:	8f 2e       	mov	r8, r31
    4626:	f1 e2       	ldi	r31, 0x21	; 33
    4628:	9f 2e       	mov	r9, r31
    462a:	f0 2d       	mov	r31, r0
    462c:	68 94       	set
    462e:	aa 24       	eor	r10, r10
    4630:	a6 f8       	bld	r10, 6
    4632:	68 94       	set
    4634:	cc 24       	eor	r12, r12
    4636:	c6 f8       	bld	r12, 6
    4638:	e1 2c       	mov	r14, r1
    463a:	00 e0       	ldi	r16, 0x00	; 0
    463c:	23 e0       	ldi	r18, 0x03	; 3
    463e:	40 e0       	ldi	r20, 0x00	; 0
    4640:	51 ee       	ldi	r21, 0xE1	; 225
    4642:	60 e0       	ldi	r22, 0x00	; 0
    4644:	70 e0       	ldi	r23, 0x00	; 0
    4646:	8c 2f       	mov	r24, r28
    4648:	17 d4       	rcall	.+2094   	; 0x4e78 <serial_create>
    464a:	90 93 81 1a 	sts	0x1A81, r25	; 0x801a81 <_rn2483_serial+0x1>
    464e:	80 93 80 1a 	sts	0x1A80, r24	; 0x801a80 <_rn2483_serial>
    4652:	e7 e0       	ldi	r30, 0x07	; 7
    4654:	f1 e0       	ldi	r31, 0x01	; 1
    4656:	80 81       	ld	r24, Z
    4658:	80 61       	ori	r24, 0x10	; 16
    465a:	80 83       	st	Z, r24
    465c:	cf 91       	pop	r28
    465e:	1f 91       	pop	r17
    4660:	0f 91       	pop	r16
    4662:	ef 90       	pop	r14
    4664:	cf 90       	pop	r12
    4666:	af 90       	pop	r10
    4668:	9f 90       	pop	r9
    466a:	8f 90       	pop	r8
    466c:	08 95       	ret

0000466e <lora_driver_resetRn2483>:
    466e:	88 23       	and	r24, r24
    4670:	31 f0       	breq	.+12     	; 0x467e <lora_driver_resetRn2483+0x10>
    4672:	e8 e0       	ldi	r30, 0x08	; 8
    4674:	f1 e0       	ldi	r31, 0x01	; 1
    4676:	80 81       	ld	r24, Z
    4678:	8f 7e       	andi	r24, 0xEF	; 239
    467a:	80 83       	st	Z, r24
    467c:	08 95       	ret
    467e:	e8 e0       	ldi	r30, 0x08	; 8
    4680:	f1 e0       	ldi	r31, 0x01	; 1
    4682:	80 81       	ld	r24, Z
    4684:	80 61       	ori	r24, 0x10	; 16
    4686:	80 83       	st	Z, r24
    4688:	08 95       	ret

0000468a <lora_driver_rn2483FactoryReset>:
    468a:	60 e0       	ldi	r22, 0x00	; 0
    468c:	70 e0       	ldi	r23, 0x00	; 0
    468e:	80 eb       	ldi	r24, 0xB0	; 176
    4690:	98 e0       	ldi	r25, 0x08	; 8
    4692:	d4 de       	rcall	.-600    	; 0x443c <_uploadMessage>
    4694:	e7 e0       	ldi	r30, 0x07	; 7
    4696:	fb e1       	ldi	r31, 0x1B	; 27
    4698:	01 90       	ld	r0, Z+
    469a:	00 20       	and	r0, r0
    469c:	e9 f7       	brne	.-6      	; 0x4698 <lora_driver_rn2483FactoryReset+0xe>
    469e:	31 97       	sbiw	r30, 0x01	; 1
    46a0:	e7 50       	subi	r30, 0x07	; 7
    46a2:	fb 41       	sbci	r31, 0x1B	; 27
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	75 97       	sbiw	r30, 0x15	; 21
    46a8:	08 f0       	brcs	.+2      	; 0x46ac <lora_driver_rn2483FactoryReset+0x22>
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	08 95       	ret

000046ae <lora_driver_getRn2483Hweui>:
    46ae:	cf 93       	push	r28
    46b0:	df 93       	push	r29
    46b2:	ec 01       	movw	r28, r24
    46b4:	60 e0       	ldi	r22, 0x00	; 0
    46b6:	70 e0       	ldi	r23, 0x00	; 0
    46b8:	81 ec       	ldi	r24, 0xC1	; 193
    46ba:	98 e0       	ldi	r25, 0x08	; 8
    46bc:	bf de       	rcall	.-642    	; 0x443c <_uploadMessage>
    46be:	e7 e0       	ldi	r30, 0x07	; 7
    46c0:	fb e1       	ldi	r31, 0x1B	; 27
    46c2:	01 90       	ld	r0, Z+
    46c4:	00 20       	and	r0, r0
    46c6:	e9 f7       	brne	.-6      	; 0x46c2 <lora_driver_getRn2483Hweui+0x14>
    46c8:	e8 51       	subi	r30, 0x18	; 24
    46ca:	fb 41       	sbci	r31, 0x1B	; 27
    46cc:	39 f4       	brne	.+14     	; 0x46dc <lora_driver_getRn2483Hweui+0x2e>
    46ce:	67 e0       	ldi	r22, 0x07	; 7
    46d0:	7b e1       	ldi	r23, 0x1B	; 27
    46d2:	ce 01       	movw	r24, r28
    46d4:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <strcpy>
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	02 c0       	rjmp	.+4      	; 0x46e0 <lora_driver_getRn2483Hweui+0x32>
    46dc:	18 82       	st	Y, r1
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	df 91       	pop	r29
    46e2:	cf 91       	pop	r28
    46e4:	08 95       	ret

000046e6 <lora_driver_setDeviceIdentifier>:
    46e6:	fc 01       	movw	r30, r24
    46e8:	01 90       	ld	r0, Z+
    46ea:	00 20       	and	r0, r0
    46ec:	e9 f7       	brne	.-6      	; 0x46e8 <lora_driver_setDeviceIdentifier+0x2>
    46ee:	9f 01       	movw	r18, r30
    46f0:	21 51       	subi	r18, 0x11	; 17
    46f2:	31 09       	sbc	r19, r1
    46f4:	28 17       	cp	r18, r24
    46f6:	39 07       	cpc	r19, r25
    46f8:	29 f4       	brne	.+10     	; 0x4704 <lora_driver_setDeviceIdentifier+0x1e>
    46fa:	bc 01       	movw	r22, r24
    46fc:	8f ee       	ldi	r24, 0xEF	; 239
    46fe:	98 e0       	ldi	r25, 0x08	; 8
    4700:	6c cf       	rjmp	.-296    	; 0x45da <_uploadMessageRc>
    4702:	08 95       	ret
    4704:	89 e0       	ldi	r24, 0x09	; 9
    4706:	08 95       	ret

00004708 <lora_driver_setApplicationIdentifier>:
    4708:	fc 01       	movw	r30, r24
    470a:	01 90       	ld	r0, Z+
    470c:	00 20       	and	r0, r0
    470e:	e9 f7       	brne	.-6      	; 0x470a <lora_driver_setApplicationIdentifier+0x2>
    4710:	9f 01       	movw	r18, r30
    4712:	21 51       	subi	r18, 0x11	; 17
    4714:	31 09       	sbc	r19, r1
    4716:	28 17       	cp	r18, r24
    4718:	39 07       	cpc	r19, r25
    471a:	29 f4       	brne	.+10     	; 0x4726 <lora_driver_setApplicationIdentifier+0x1e>
    471c:	bc 01       	movw	r22, r24
    471e:	8e ef       	ldi	r24, 0xFE	; 254
    4720:	98 e0       	ldi	r25, 0x08	; 8
    4722:	5b cf       	rjmp	.-330    	; 0x45da <_uploadMessageRc>
    4724:	08 95       	ret
    4726:	89 e0       	ldi	r24, 0x09	; 9
    4728:	08 95       	ret

0000472a <lora_driver_setApplicationKey>:
    472a:	fc 01       	movw	r30, r24
    472c:	01 90       	ld	r0, Z+
    472e:	00 20       	and	r0, r0
    4730:	e9 f7       	brne	.-6      	; 0x472c <lora_driver_setApplicationKey+0x2>
    4732:	9f 01       	movw	r18, r30
    4734:	21 52       	subi	r18, 0x21	; 33
    4736:	31 09       	sbc	r19, r1
    4738:	28 17       	cp	r18, r24
    473a:	39 07       	cpc	r19, r25
    473c:	29 f4       	brne	.+10     	; 0x4748 <lora_driver_setApplicationKey+0x1e>
    473e:	bc 01       	movw	r22, r24
    4740:	8d e0       	ldi	r24, 0x0D	; 13
    4742:	99 e0       	ldi	r25, 0x09	; 9
    4744:	4a cf       	rjmp	.-364    	; 0x45da <_uploadMessageRc>
    4746:	08 95       	ret
    4748:	89 e0       	ldi	r24, 0x09	; 9
    474a:	08 95       	ret

0000474c <lora_driver_saveMac>:
    474c:	60 e0       	ldi	r22, 0x00	; 0
    474e:	70 e0       	ldi	r23, 0x00	; 0
    4750:	8c e4       	ldi	r24, 0x4C	; 76
    4752:	99 e0       	ldi	r25, 0x09	; 9
    4754:	42 cf       	rjmp	.-380    	; 0x45da <_uploadMessageRc>
    4756:	08 95       	ret

00004758 <lora_driver_join>:
    4758:	0f 93       	push	r16
    475a:	1f 93       	push	r17
    475c:	e8 2f       	mov	r30, r24
    475e:	f0 e0       	ldi	r31, 0x00	; 0
    4760:	ee 0f       	add	r30, r30
    4762:	ff 1f       	adc	r31, r31
    4764:	ea 5d       	subi	r30, 0xDA	; 218
    4766:	f4 4f       	sbci	r31, 0xF4	; 244
    4768:	60 81       	ld	r22, Z
    476a:	71 81       	ldd	r23, Z+1	; 0x01
    476c:	85 e5       	ldi	r24, 0x55	; 85
    476e:	99 e0       	ldi	r25, 0x09	; 9
    4770:	34 df       	rcall	.-408    	; 0x45da <_uploadMessageRc>
    4772:	81 11       	cpse	r24, r1
    4774:	14 c0       	rjmp	.+40     	; 0x479e <lora_driver_join+0x46>
    4776:	08 e2       	ldi	r16, 0x28	; 40
    4778:	15 e0       	ldi	r17, 0x05	; 5
    477a:	20 e0       	ldi	r18, 0x00	; 0
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	4d e2       	ldi	r20, 0x2D	; 45
    4780:	50 e0       	ldi	r21, 0x00	; 0
    4782:	67 e0       	ldi	r22, 0x07	; 7
    4784:	7b e1       	ldi	r23, 0x1B	; 27
    4786:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <_serialReplyBufferHandle>
    478a:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <_serialReplyBufferHandle+0x1>
    478e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xStreamBufferReceive>
    4792:	88 23       	and	r24, r24
    4794:	21 f0       	breq	.+8      	; 0x479e <lora_driver_join+0x46>
    4796:	87 e0       	ldi	r24, 0x07	; 7
    4798:	9b e1       	ldi	r25, 0x1B	; 27
    479a:	aa de       	rcall	.-684    	; 0x44f0 <_reply2ReturnCode>
    479c:	03 c0       	rjmp	.+6      	; 0x47a4 <lora_driver_join+0x4c>
    479e:	87 e0       	ldi	r24, 0x07	; 7
    47a0:	9b e1       	ldi	r25, 0x1B	; 27
    47a2:	a6 de       	rcall	.-692    	; 0x44f0 <_reply2ReturnCode>
    47a4:	1f 91       	pop	r17
    47a6:	0f 91       	pop	r16
    47a8:	08 95       	ret

000047aa <lora_driver_sendUploadMessage>:
    47aa:	0f 93       	push	r16
    47ac:	1f 93       	push	r17
    47ae:	cf 93       	push	r28
    47b0:	df 93       	push	r29
    47b2:	1f 92       	push	r1
    47b4:	cd b7       	in	r28, 0x3d	; 61
    47b6:	de b7       	in	r29, 0x3e	; 62
    47b8:	db 01       	movw	r26, r22
    47ba:	11 96       	adiw	r26, 0x01	; 1
    47bc:	9c 91       	ld	r25, X
    47be:	11 97       	sbiw	r26, 0x01	; 1
    47c0:	95 31       	cpi	r25, 0x15	; 21
    47c2:	08 f0       	brcs	.+2      	; 0x47c6 <lora_driver_sendUploadMessage+0x1c>
    47c4:	b4 c0       	rjmp	.+360    	; 0x492e <lora_driver_sendUploadMessage+0x184>
    47c6:	99 23       	and	r25, r25
    47c8:	81 f1       	breq	.+96     	; 0x482a <lora_driver_sendUploadMessage+0x80>
    47ca:	60 e0       	ldi	r22, 0x00	; 0
    47cc:	70 e0       	ldi	r23, 0x00	; 0
    47ce:	27 2f       	mov	r18, r23
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	46 2f       	mov	r20, r22
    47d4:	50 e0       	ldi	r21, 0x00	; 0
    47d6:	fd 01       	movw	r30, r26
    47d8:	e4 0f       	add	r30, r20
    47da:	f5 1f       	adc	r31, r21
    47dc:	92 81       	ldd	r25, Z+2	; 0x02
    47de:	92 95       	swap	r25
    47e0:	9f 70       	andi	r25, 0x0F	; 15
    47e2:	9a 30       	cpi	r25, 0x0A	; 10
    47e4:	10 f0       	brcs	.+4      	; 0x47ea <lora_driver_sendUploadMessage+0x40>
    47e6:	99 5c       	subi	r25, 0xC9	; 201
    47e8:	01 c0       	rjmp	.+2      	; 0x47ec <lora_driver_sendUploadMessage+0x42>
    47ea:	90 5d       	subi	r25, 0xD0	; 208
    47ec:	f9 01       	movw	r30, r18
    47ee:	e8 56       	subi	r30, 0x68	; 104
    47f0:	f5 4e       	sbci	r31, 0xE5	; 229
    47f2:	90 83       	st	Z, r25
    47f4:	2f 5f       	subi	r18, 0xFF	; 255
    47f6:	3f 4f       	sbci	r19, 0xFF	; 255
    47f8:	fd 01       	movw	r30, r26
    47fa:	e4 0f       	add	r30, r20
    47fc:	f5 1f       	adc	r31, r21
    47fe:	92 81       	ldd	r25, Z+2	; 0x02
    4800:	9f 70       	andi	r25, 0x0F	; 15
    4802:	49 2f       	mov	r20, r25
    4804:	50 e0       	ldi	r21, 0x00	; 0
    4806:	4a 30       	cpi	r20, 0x0A	; 10
    4808:	51 05       	cpc	r21, r1
    480a:	14 f0       	brlt	.+4      	; 0x4810 <lora_driver_sendUploadMessage+0x66>
    480c:	99 5c       	subi	r25, 0xC9	; 201
    480e:	01 c0       	rjmp	.+2      	; 0x4812 <lora_driver_sendUploadMessage+0x68>
    4810:	90 5d       	subi	r25, 0xD0	; 208
    4812:	f9 01       	movw	r30, r18
    4814:	e8 56       	subi	r30, 0x68	; 104
    4816:	f5 4e       	sbci	r31, 0xE5	; 229
    4818:	90 83       	st	Z, r25
    481a:	7e 5f       	subi	r23, 0xFE	; 254
    481c:	6f 5f       	subi	r22, 0xFF	; 255
    481e:	11 96       	adiw	r26, 0x01	; 1
    4820:	9c 91       	ld	r25, X
    4822:	11 97       	sbiw	r26, 0x01	; 1
    4824:	69 17       	cp	r22, r25
    4826:	98 f2       	brcs	.-90     	; 0x47ce <lora_driver_sendUploadMessage+0x24>
    4828:	01 c0       	rjmp	.+2      	; 0x482c <lora_driver_sendUploadMessage+0x82>
    482a:	70 e0       	ldi	r23, 0x00	; 0
    482c:	e7 2f       	mov	r30, r23
    482e:	f0 e0       	ldi	r31, 0x00	; 0
    4830:	e8 56       	subi	r30, 0x68	; 104
    4832:	f5 4e       	sbci	r31, 0xE5	; 229
    4834:	10 82       	st	Z, r1
    4836:	4c 91       	ld	r20, X
    4838:	81 11       	cpse	r24, r1
    483a:	03 c0       	rjmp	.+6      	; 0x4842 <lora_driver_sendUploadMessage+0x98>
    483c:	8e e5       	ldi	r24, 0x5E	; 94
    483e:	99 e0       	ldi	r25, 0x09	; 9
    4840:	02 c0       	rjmp	.+4      	; 0x4846 <lora_driver_sendUploadMessage+0x9c>
    4842:	80 e6       	ldi	r24, 0x60	; 96
    4844:	99 e0       	ldi	r25, 0x09	; 9
    4846:	28 e9       	ldi	r18, 0x98	; 152
    4848:	3a e1       	ldi	r19, 0x1A	; 26
    484a:	3f 93       	push	r19
    484c:	2f 93       	push	r18
    484e:	1f 92       	push	r1
    4850:	4f 93       	push	r20
    4852:	9f 93       	push	r25
    4854:	8f 93       	push	r24
    4856:	84 e6       	ldi	r24, 0x64	; 100
    4858:	99 e0       	ldi	r25, 0x09	; 9
    485a:	9f 93       	push	r25
    485c:	8f 93       	push	r24
    485e:	8a ed       	ldi	r24, 0xDA	; 218
    4860:	9a e1       	ldi	r25, 0x1A	; 26
    4862:	9f 93       	push	r25
    4864:	8f 93       	push	r24
    4866:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <sprintf>
    486a:	60 e0       	ldi	r22, 0x00	; 0
    486c:	70 e0       	ldi	r23, 0x00	; 0
    486e:	8a ed       	ldi	r24, 0xDA	; 218
    4870:	9a e1       	ldi	r25, 0x1A	; 26
    4872:	b3 de       	rcall	.-666    	; 0x45da <_uploadMessageRc>
    4874:	0f b6       	in	r0, 0x3f	; 63
    4876:	f8 94       	cli
    4878:	de bf       	out	0x3e, r29	; 62
    487a:	0f be       	out	0x3f, r0	; 63
    487c:	cd bf       	out	0x3d, r28	; 61
    487e:	81 11       	cpse	r24, r1
    4880:	59 c0       	rjmp	.+178    	; 0x4934 <lora_driver_sendUploadMessage+0x18a>
    4882:	08 e2       	ldi	r16, 0x28	; 40
    4884:	15 e0       	ldi	r17, 0x05	; 5
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	4d e2       	ldi	r20, 0x2D	; 45
    488c:	50 e0       	ldi	r21, 0x00	; 0
    488e:	67 e0       	ldi	r22, 0x07	; 7
    4890:	7b e1       	ldi	r23, 0x1B	; 27
    4892:	80 91 7e 1a 	lds	r24, 0x1A7E	; 0x801a7e <_serialReplyBufferHandle>
    4896:	90 91 7f 1a 	lds	r25, 0x1A7F	; 0x801a7f <_serialReplyBufferHandle+0x1>
    489a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <xStreamBufferReceive>
    489e:	88 23       	and	r24, r24
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <lora_driver_sendUploadMessage+0xfa>
    48a2:	47 c0       	rjmp	.+142    	; 0x4932 <lora_driver_sendUploadMessage+0x188>
    48a4:	87 e0       	ldi	r24, 0x07	; 7
    48a6:	9b e1       	ldi	r25, 0x1B	; 27
    48a8:	23 de       	rcall	.-954    	; 0x44f0 <_reply2ReturnCode>
    48aa:	8e 30       	cpi	r24, 0x0E	; 14
    48ac:	09 f0       	breq	.+2      	; 0x48b0 <lora_driver_sendUploadMessage+0x106>
    48ae:	42 c0       	rjmp	.+132    	; 0x4934 <lora_driver_sendUploadMessage+0x18a>
    48b0:	87 e0       	ldi	r24, 0x07	; 7
    48b2:	89 83       	std	Y+1, r24	; 0x01
    48b4:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <_downlinkMessageBuffer>
    48b8:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <_downlinkMessageBuffer+0x1>
    48bc:	89 2b       	or	r24, r25
    48be:	a9 f1       	breq	.+106    	; 0x492a <lora_driver_sendUploadMessage+0x180>
    48c0:	be 01       	movw	r22, r28
    48c2:	6f 5f       	subi	r22, 0xFF	; 255
    48c4:	7f 4f       	sbci	r23, 0xFF	; 255
    48c6:	87 e0       	ldi	r24, 0x07	; 7
    48c8:	9b e1       	ldi	r25, 0x1B	; 27
    48ca:	68 d1       	rcall	.+720    	; 0x4b9c <decode_port_no>
    48cc:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <_downlinkPayload>
    48d0:	e9 81       	ldd	r30, Y+1	; 0x01
    48d2:	f0 e0       	ldi	r31, 0x00	; 0
    48d4:	e9 5f       	subi	r30, 0xF9	; 249
    48d6:	f4 4e       	sbci	r31, 0xE4	; 228
    48d8:	df 01       	movw	r26, r30
    48da:	0d 90       	ld	r0, X+
    48dc:	00 20       	and	r0, r0
    48de:	e9 f7       	brne	.-6      	; 0x48da <lora_driver_sendUploadMessage+0x130>
    48e0:	11 97       	sbiw	r26, 0x01	; 1
    48e2:	ae 1b       	sub	r26, r30
    48e4:	bf 0b       	sbc	r27, r31
    48e6:	aa 23       	and	r26, r26
    48e8:	91 f0       	breq	.+36     	; 0x490e <lora_driver_sendUploadMessage+0x164>
    48ea:	bb 27       	eor	r27, r27
    48ec:	cd 01       	movw	r24, r26
    48ee:	01 97       	sbiw	r24, 0x01	; 1
    48f0:	9c 01       	movw	r18, r24
    48f2:	12 f4       	brpl	.+4      	; 0x48f8 <lora_driver_sendUploadMessage+0x14e>
    48f4:	2f 5f       	subi	r18, 0xFF	; 255
    48f6:	3f 4f       	sbci	r19, 0xFF	; 255
    48f8:	35 95       	asr	r19
    48fa:	27 95       	ror	r18
    48fc:	20 93 83 1a 	sts	0x1A83, r18	; 0x801a83 <_downlinkPayload+0x1>
    4900:	af 01       	movw	r20, r30
    4902:	4f 5f       	subi	r20, 0xFF	; 255
    4904:	5f 4f       	sbci	r21, 0xFF	; 255
    4906:	64 e1       	ldi	r22, 0x14	; 20
    4908:	84 e8       	ldi	r24, 0x84	; 132
    490a:	9a e1       	ldi	r25, 0x1A	; 26
    490c:	73 d1       	rcall	.+742    	; 0x4bf4 <decode_hexadecimal_string_bytes>
    490e:	01 e0       	ldi	r16, 0x01	; 1
    4910:	10 e0       	ldi	r17, 0x00	; 0
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	46 e1       	ldi	r20, 0x16	; 22
    4918:	50 e0       	ldi	r21, 0x00	; 0
    491a:	62 e8       	ldi	r22, 0x82	; 130
    491c:	7a e1       	ldi	r23, 0x1A	; 26
    491e:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <_downlinkMessageBuffer>
    4922:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <_downlinkMessageBuffer+0x1>
    4926:	0e 94 b0 0c 	call	0x1960	; 0x1960 <xStreamBufferSend>
    492a:	8e e0       	ldi	r24, 0x0E	; 14
    492c:	03 c0       	rjmp	.+6      	; 0x4934 <lora_driver_sendUploadMessage+0x18a>
    492e:	84 e1       	ldi	r24, 0x14	; 20
    4930:	01 c0       	rjmp	.+2      	; 0x4934 <lora_driver_sendUploadMessage+0x18a>
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	0f 90       	pop	r0
    4936:	df 91       	pop	r29
    4938:	cf 91       	pop	r28
    493a:	1f 91       	pop	r17
    493c:	0f 91       	pop	r16
    493e:	08 95       	ret

00004940 <lora_driver_setAdaptiveDataRate>:
    4940:	81 30       	cpi	r24, 0x01	; 1
    4942:	19 f0       	breq	.+6      	; 0x494a <lora_driver_setAdaptiveDataRate+0xa>
    4944:	64 e7       	ldi	r22, 0x74	; 116
    4946:	79 e0       	ldi	r23, 0x09	; 9
    4948:	02 c0       	rjmp	.+4      	; 0x494e <lora_driver_setAdaptiveDataRate+0xe>
    494a:	6d e4       	ldi	r22, 0x4D	; 77
    494c:	7a e0       	ldi	r23, 0x0A	; 10
    494e:	88 e7       	ldi	r24, 0x78	; 120
    4950:	99 e0       	ldi	r25, 0x09	; 9
    4952:	43 ce       	rjmp	.-890    	; 0x45da <_uploadMessageRc>
    4954:	08 95       	ret

00004956 <lora_driver_setReceiveDelay>:
    4956:	9f 93       	push	r25
    4958:	8f 93       	push	r24
    495a:	89 ea       	ldi	r24, 0xA9	; 169
    495c:	99 e0       	ldi	r25, 0x09	; 9
    495e:	9f 93       	push	r25
    4960:	8f 93       	push	r24
    4962:	8a ed       	ldi	r24, 0xDA	; 218
    4964:	9a e1       	ldi	r25, 0x1A	; 26
    4966:	9f 93       	push	r25
    4968:	8f 93       	push	r24
    496a:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <sprintf>
    496e:	60 e0       	ldi	r22, 0x00	; 0
    4970:	70 e0       	ldi	r23, 0x00	; 0
    4972:	8a ed       	ldi	r24, 0xDA	; 218
    4974:	9a e1       	ldi	r25, 0x1A	; 26
    4976:	31 de       	rcall	.-926    	; 0x45da <_uploadMessageRc>
    4978:	0f 90       	pop	r0
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	0f 90       	pop	r0
    4984:	08 95       	ret

00004986 <lora_driver_configureToEu868>:
    4986:	2f 92       	push	r2
    4988:	3f 92       	push	r3
    498a:	4f 92       	push	r4
    498c:	5f 92       	push	r5
    498e:	6f 92       	push	r6
    4990:	7f 92       	push	r7
    4992:	8f 92       	push	r8
    4994:	9f 92       	push	r9
    4996:	af 92       	push	r10
    4998:	bf 92       	push	r11
    499a:	cf 92       	push	r12
    499c:	df 92       	push	r13
    499e:	ef 92       	push	r14
    49a0:	ff 92       	push	r15
    49a2:	0f 93       	push	r16
    49a4:	1f 93       	push	r17
    49a6:	cf 93       	push	r28
    49a8:	df 93       	push	r29
    49aa:	cd b7       	in	r28, 0x3d	; 61
    49ac:	de b7       	in	r29, 0x3e	; 62
    49ae:	a0 97       	sbiw	r28, 0x20	; 32
    49b0:	0f b6       	in	r0, 0x3f	; 63
    49b2:	f8 94       	cli
    49b4:	de bf       	out	0x3e, r29	; 62
    49b6:	0f be       	out	0x3f, r0	; 63
    49b8:	cd bf       	out	0x3d, r28	; 61
    49ba:	66 ed       	ldi	r22, 0xD6	; 214
    49bc:	79 e0       	ldi	r23, 0x09	; 9
    49be:	82 ee       	ldi	r24, 0xE2	; 226
    49c0:	99 e0       	ldi	r25, 0x09	; 9
    49c2:	3c dd       	rcall	.-1416   	; 0x443c <_uploadMessage>
    49c4:	95 dd       	rcall	.-1238   	; 0x44f0 <_reply2ReturnCode>
    49c6:	81 11       	cpse	r24, r1
    49c8:	a3 c0       	rjmp	.+326    	; 0x4b10 <lora_driver_configureToEu868+0x18a>
    49ca:	80 e2       	ldi	r24, 0x20	; 32
    49cc:	e2 e2       	ldi	r30, 0x22	; 34
    49ce:	f2 e0       	ldi	r31, 0x02	; 2
    49d0:	de 01       	movw	r26, r28
    49d2:	11 96       	adiw	r26, 0x01	; 1
    49d4:	01 90       	ld	r0, Z+
    49d6:	0d 92       	st	X+, r0
    49d8:	8a 95       	dec	r24
    49da:	e1 f7       	brne	.-8      	; 0x49d4 <lora_driver_configureToEu868+0x4e>
    49dc:	9e 01       	movw	r18, r28
    49de:	2f 5f       	subi	r18, 0xFF	; 255
    49e0:	3f 4f       	sbci	r19, 0xFF	; 255
    49e2:	69 01       	movw	r12, r18
    49e4:	e1 2c       	mov	r14, r1
    49e6:	f1 2c       	mov	r15, r1
    49e8:	0f 2e       	mov	r0, r31
    49ea:	fe ee       	ldi	r31, 0xEE	; 238
    49ec:	af 2e       	mov	r10, r31
    49ee:	f9 e0       	ldi	r31, 0x09	; 9
    49f0:	bf 2e       	mov	r11, r31
    49f2:	f0 2d       	mov	r31, r0
    49f4:	0a ed       	ldi	r16, 0xDA	; 218
    49f6:	1a e1       	ldi	r17, 0x1A	; 26
    49f8:	0f 2e       	mov	r0, r31
    49fa:	f7 e0       	ldi	r31, 0x07	; 7
    49fc:	4f 2e       	mov	r4, r31
    49fe:	fa e0       	ldi	r31, 0x0A	; 10
    4a00:	5f 2e       	mov	r5, r31
    4a02:	f0 2d       	mov	r31, r0
    4a04:	0f 2e       	mov	r0, r31
    4a06:	fe e1       	ldi	r31, 0x1E	; 30
    4a08:	8f 2e       	mov	r8, r31
    4a0a:	fa e0       	ldi	r31, 0x0A	; 10
    4a0c:	9f 2e       	mov	r9, r31
    4a0e:	f0 2d       	mov	r31, r0
    4a10:	0f 2e       	mov	r0, r31
    4a12:	f8 e3       	ldi	r31, 0x38	; 56
    4a14:	6f 2e       	mov	r6, r31
    4a16:	fa e0       	ldi	r31, 0x0A	; 10
    4a18:	7f 2e       	mov	r7, r31
    4a1a:	f0 2d       	mov	r31, r0
    4a1c:	3e 2c       	mov	r3, r14
    4a1e:	2f 2c       	mov	r2, r15
    4a20:	ff 92       	push	r15
    4a22:	ef 92       	push	r14
    4a24:	bf 92       	push	r11
    4a26:	af 92       	push	r10
    4a28:	1f 93       	push	r17
    4a2a:	0f 93       	push	r16
    4a2c:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <sprintf>
    4a30:	60 e0       	ldi	r22, 0x00	; 0
    4a32:	70 e0       	ldi	r23, 0x00	; 0
    4a34:	c8 01       	movw	r24, r16
    4a36:	02 dd       	rcall	.-1532   	; 0x443c <_uploadMessage>
    4a38:	5b dd       	rcall	.-1354   	; 0x44f0 <_reply2ReturnCode>
    4a3a:	0f 90       	pop	r0
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	0f 90       	pop	r0
    4a46:	81 11       	cpse	r24, r1
    4a48:	63 c0       	rjmp	.+198    	; 0x4b10 <lora_driver_configureToEu868+0x18a>
    4a4a:	32 e0       	ldi	r19, 0x02	; 2
    4a4c:	3e 15       	cp	r19, r14
    4a4e:	e8 f4       	brcc	.+58     	; 0x4a8a <lora_driver_configureToEu868+0x104>
    4a50:	f6 01       	movw	r30, r12
    4a52:	83 81       	ldd	r24, Z+3	; 0x03
    4a54:	8f 93       	push	r24
    4a56:	82 81       	ldd	r24, Z+2	; 0x02
    4a58:	8f 93       	push	r24
    4a5a:	81 81       	ldd	r24, Z+1	; 0x01
    4a5c:	8f 93       	push	r24
    4a5e:	80 81       	ld	r24, Z
    4a60:	8f 93       	push	r24
    4a62:	ff 92       	push	r15
    4a64:	ef 92       	push	r14
    4a66:	5f 92       	push	r5
    4a68:	4f 92       	push	r4
    4a6a:	1f 93       	push	r17
    4a6c:	0f 93       	push	r16
    4a6e:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <sprintf>
    4a72:	60 e0       	ldi	r22, 0x00	; 0
    4a74:	70 e0       	ldi	r23, 0x00	; 0
    4a76:	c8 01       	movw	r24, r16
    4a78:	e1 dc       	rcall	.-1598   	; 0x443c <_uploadMessage>
    4a7a:	3a dd       	rcall	.-1420   	; 0x44f0 <_reply2ReturnCode>
    4a7c:	0f b6       	in	r0, 0x3f	; 63
    4a7e:	f8 94       	cli
    4a80:	de bf       	out	0x3e, r29	; 62
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	cd bf       	out	0x3d, r28	; 61
    4a86:	81 11       	cpse	r24, r1
    4a88:	43 c0       	rjmp	.+134    	; 0x4b10 <lora_driver_configureToEu868+0x18a>
    4a8a:	2f 92       	push	r2
    4a8c:	3f 92       	push	r3
    4a8e:	9f 92       	push	r9
    4a90:	8f 92       	push	r8
    4a92:	1f 93       	push	r17
    4a94:	0f 93       	push	r16
    4a96:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <sprintf>
    4a9a:	60 e0       	ldi	r22, 0x00	; 0
    4a9c:	70 e0       	ldi	r23, 0x00	; 0
    4a9e:	c8 01       	movw	r24, r16
    4aa0:	cd dc       	rcall	.-1638   	; 0x443c <_uploadMessage>
    4aa2:	26 dd       	rcall	.-1460   	; 0x44f0 <_reply2ReturnCode>
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	0f 90       	pop	r0
    4aac:	0f 90       	pop	r0
    4aae:	0f 90       	pop	r0
    4ab0:	81 11       	cpse	r24, r1
    4ab2:	2e c0       	rjmp	.+92     	; 0x4b10 <lora_driver_configureToEu868+0x18a>
    4ab4:	2f 92       	push	r2
    4ab6:	3f 92       	push	r3
    4ab8:	7f 92       	push	r7
    4aba:	6f 92       	push	r6
    4abc:	1f 93       	push	r17
    4abe:	0f 93       	push	r16
    4ac0:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <sprintf>
    4ac4:	60 e0       	ldi	r22, 0x00	; 0
    4ac6:	70 e0       	ldi	r23, 0x00	; 0
    4ac8:	c8 01       	movw	r24, r16
    4aca:	b8 dc       	rcall	.-1680   	; 0x443c <_uploadMessage>
    4acc:	11 dd       	rcall	.-1502   	; 0x44f0 <_reply2ReturnCode>
    4ace:	0f 90       	pop	r0
    4ad0:	0f 90       	pop	r0
    4ad2:	0f 90       	pop	r0
    4ad4:	0f 90       	pop	r0
    4ad6:	0f 90       	pop	r0
    4ad8:	0f 90       	pop	r0
    4ada:	81 11       	cpse	r24, r1
    4adc:	19 c0       	rjmp	.+50     	; 0x4b10 <lora_driver_configureToEu868+0x18a>
    4ade:	3f ef       	ldi	r19, 0xFF	; 255
    4ae0:	e3 1a       	sub	r14, r19
    4ae2:	f3 0a       	sbc	r15, r19
    4ae4:	84 e0       	ldi	r24, 0x04	; 4
    4ae6:	c8 0e       	add	r12, r24
    4ae8:	d1 1c       	adc	r13, r1
    4aea:	98 e0       	ldi	r25, 0x08	; 8
    4aec:	e9 16       	cp	r14, r25
    4aee:	f1 04       	cpc	r15, r1
    4af0:	09 f0       	breq	.+2      	; 0x4af4 <lora_driver_configureToEu868+0x16e>
    4af2:	94 cf       	rjmp	.-216    	; 0x4a1c <lora_driver_configureToEu868+0x96>
    4af4:	60 e0       	ldi	r22, 0x00	; 0
    4af6:	70 e0       	ldi	r23, 0x00	; 0
    4af8:	80 e5       	ldi	r24, 0x50	; 80
    4afa:	9a e0       	ldi	r25, 0x0A	; 10
    4afc:	9f dc       	rcall	.-1730   	; 0x443c <_uploadMessage>
    4afe:	f8 dc       	rcall	.-1552   	; 0x44f0 <_reply2ReturnCode>
    4b00:	81 11       	cpse	r24, r1
    4b02:	06 c0       	rjmp	.+12     	; 0x4b10 <lora_driver_configureToEu868+0x18a>
    4b04:	60 e0       	ldi	r22, 0x00	; 0
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	81 e6       	ldi	r24, 0x61	; 97
    4b0a:	9a e0       	ldi	r25, 0x0A	; 10
    4b0c:	97 dc       	rcall	.-1746   	; 0x443c <_uploadMessage>
    4b0e:	f0 dc       	rcall	.-1568   	; 0x44f0 <_reply2ReturnCode>
    4b10:	a0 96       	adiw	r28, 0x20	; 32
    4b12:	0f b6       	in	r0, 0x3f	; 63
    4b14:	f8 94       	cli
    4b16:	de bf       	out	0x3e, r29	; 62
    4b18:	0f be       	out	0x3f, r0	; 63
    4b1a:	cd bf       	out	0x3d, r28	; 61
    4b1c:	df 91       	pop	r29
    4b1e:	cf 91       	pop	r28
    4b20:	1f 91       	pop	r17
    4b22:	0f 91       	pop	r16
    4b24:	ff 90       	pop	r15
    4b26:	ef 90       	pop	r14
    4b28:	df 90       	pop	r13
    4b2a:	cf 90       	pop	r12
    4b2c:	bf 90       	pop	r11
    4b2e:	af 90       	pop	r10
    4b30:	9f 90       	pop	r9
    4b32:	8f 90       	pop	r8
    4b34:	7f 90       	pop	r7
    4b36:	6f 90       	pop	r6
    4b38:	5f 90       	pop	r5
    4b3a:	4f 90       	pop	r4
    4b3c:	3f 90       	pop	r3
    4b3e:	2f 90       	pop	r2
    4b40:	08 95       	ret

00004b42 <lora_driver_setOtaaIdentity>:
    4b42:	ef 92       	push	r14
    4b44:	ff 92       	push	r15
    4b46:	0f 93       	push	r16
    4b48:	1f 93       	push	r17
    4b4a:	cf 93       	push	r28
    4b4c:	df 93       	push	r29
    4b4e:	ec 01       	movw	r28, r24
    4b50:	8b 01       	movw	r16, r22
    4b52:	7a 01       	movw	r14, r20
    4b54:	81 e0       	ldi	r24, 0x01	; 1
    4b56:	f4 de       	rcall	.-536    	; 0x4940 <lora_driver_setAdaptiveDataRate>
    4b58:	81 11       	cpse	r24, r1
    4b5a:	0d c0       	rjmp	.+26     	; 0x4b76 <lora_driver_setOtaaIdentity+0x34>
    4b5c:	ce 01       	movw	r24, r28
    4b5e:	d4 dd       	rcall	.-1112   	; 0x4708 <lora_driver_setApplicationIdentifier>
    4b60:	81 11       	cpse	r24, r1
    4b62:	09 c0       	rjmp	.+18     	; 0x4b76 <lora_driver_setOtaaIdentity+0x34>
    4b64:	c8 01       	movw	r24, r16
    4b66:	e1 dd       	rcall	.-1086   	; 0x472a <lora_driver_setApplicationKey>
    4b68:	81 11       	cpse	r24, r1
    4b6a:	05 c0       	rjmp	.+10     	; 0x4b76 <lora_driver_setOtaaIdentity+0x34>
    4b6c:	c7 01       	movw	r24, r14
    4b6e:	bb dd       	rcall	.-1162   	; 0x46e6 <lora_driver_setDeviceIdentifier>
    4b70:	81 11       	cpse	r24, r1
    4b72:	01 c0       	rjmp	.+2      	; 0x4b76 <lora_driver_setOtaaIdentity+0x34>
    4b74:	eb dd       	rcall	.-1066   	; 0x474c <lora_driver_saveMac>
    4b76:	df 91       	pop	r29
    4b78:	cf 91       	pop	r28
    4b7a:	1f 91       	pop	r17
    4b7c:	0f 91       	pop	r16
    4b7e:	ff 90       	pop	r15
    4b80:	ef 90       	pop	r14
    4b82:	08 95       	ret

00004b84 <lora_driver_mapReturnCodeToText>:
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	fc 01       	movw	r30, r24
    4b88:	ee 0f       	add	r30, r30
    4b8a:	ff 1f       	adc	r31, r31
    4b8c:	8e 0f       	add	r24, r30
    4b8e:	9f 1f       	adc	r25, r31
    4b90:	fc 01       	movw	r30, r24
    4b92:	e6 5d       	subi	r30, 0xD6	; 214
    4b94:	f4 4f       	sbci	r31, 0xF4	; 244
    4b96:	81 81       	ldd	r24, Z+1	; 0x01
    4b98:	92 81       	ldd	r25, Z+2	; 0x02
    4b9a:	08 95       	ret

00004b9c <decode_port_no>:
    4b9c:	dc 01       	movw	r26, r24
    4b9e:	00 97       	sbiw	r24, 0x00	; 0
    4ba0:	29 f1       	breq	.+74     	; 0x4bec <decode_port_no+0x50>
    4ba2:	fb 01       	movw	r30, r22
    4ba4:	20 81       	ld	r18, Z
    4ba6:	fc 01       	movw	r30, r24
    4ba8:	01 90       	ld	r0, Z+
    4baa:	00 20       	and	r0, r0
    4bac:	e9 f7       	brne	.-6      	; 0x4ba8 <decode_port_no+0xc>
    4bae:	31 97       	sbiw	r30, 0x01	; 1
    4bb0:	e8 1b       	sub	r30, r24
    4bb2:	f9 0b       	sbc	r31, r25
    4bb4:	82 2f       	mov	r24, r18
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	e8 17       	cp	r30, r24
    4bba:	f9 07       	cpc	r31, r25
    4bbc:	c8 f0       	brcs	.+50     	; 0x4bf0 <decode_port_no+0x54>
    4bbe:	80 e0       	ldi	r24, 0x00	; 0
    4bc0:	08 c0       	rjmp	.+16     	; 0x4bd2 <decode_port_no+0x36>
    4bc2:	88 0f       	add	r24, r24
    4bc4:	38 2f       	mov	r19, r24
    4bc6:	33 0f       	add	r19, r19
    4bc8:	33 0f       	add	r19, r19
    4bca:	83 0f       	add	r24, r19
    4bcc:	80 53       	subi	r24, 0x30	; 48
    4bce:	89 0f       	add	r24, r25
    4bd0:	2f 5f       	subi	r18, 0xFF	; 255
    4bd2:	fd 01       	movw	r30, r26
    4bd4:	e2 0f       	add	r30, r18
    4bd6:	f1 1d       	adc	r31, r1
    4bd8:	90 81       	ld	r25, Z
    4bda:	30 ed       	ldi	r19, 0xD0	; 208
    4bdc:	39 0f       	add	r19, r25
    4bde:	3a 30       	cpi	r19, 0x0A	; 10
    4be0:	10 f4       	brcc	.+4      	; 0x4be6 <decode_port_no+0x4a>
    4be2:	91 11       	cpse	r25, r1
    4be4:	ee cf       	rjmp	.-36     	; 0x4bc2 <decode_port_no+0x26>
    4be6:	fb 01       	movw	r30, r22
    4be8:	20 83       	st	Z, r18
    4bea:	08 95       	ret
    4bec:	80 e0       	ldi	r24, 0x00	; 0
    4bee:	08 95       	ret
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	08 95       	ret

00004bf4 <decode_hexadecimal_string_bytes>:
    4bf4:	0f 93       	push	r16
    4bf6:	1f 93       	push	r17
    4bf8:	cf 93       	push	r28
    4bfa:	df 93       	push	r29
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	ea 01       	movw	r28, r20
    4c00:	20 97       	sbiw	r28, 0x00	; 0
    4c02:	e1 f1       	breq	.+120    	; 0x4c7c <decode_hexadecimal_string_bytes+0x88>
    4c04:	fa 01       	movw	r30, r20
    4c06:	01 90       	ld	r0, Z+
    4c08:	00 20       	and	r0, r0
    4c0a:	e9 f7       	brne	.-6      	; 0x4c06 <decode_hexadecimal_string_bytes+0x12>
    4c0c:	31 97       	sbiw	r30, 0x01	; 1
    4c0e:	e4 1b       	sub	r30, r20
    4c10:	f5 0b       	sbc	r31, r21
    4c12:	32 97       	sbiw	r30, 0x02	; 2
    4c14:	10 f5       	brcc	.+68     	; 0x4c5a <decode_hexadecimal_string_bytes+0x66>
    4c16:	32 c0       	rjmp	.+100    	; 0x4c7c <decode_hexadecimal_string_bytes+0x88>
    4c18:	8d 01       	movw	r16, r26
    4c1a:	04 0f       	add	r16, r20
    4c1c:	15 1f       	adc	r17, r21
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	ae 01       	movw	r20, r28
    4c22:	42 0f       	add	r20, r18
    4c24:	53 1f       	adc	r21, r19
    4c26:	fa 01       	movw	r30, r20
    4c28:	90 81       	ld	r25, Z
    4c2a:	91 34       	cpi	r25, 0x41	; 65
    4c2c:	28 f0       	brcs	.+10     	; 0x4c38 <decode_hexadecimal_string_bytes+0x44>
    4c2e:	97 53       	subi	r25, 0x37	; 55
    4c30:	59 2f       	mov	r21, r25
    4c32:	52 95       	swap	r21
    4c34:	50 7f       	andi	r21, 0xF0	; 240
    4c36:	03 c0       	rjmp	.+6      	; 0x4c3e <decode_hexadecimal_string_bytes+0x4a>
    4c38:	59 2f       	mov	r21, r25
    4c3a:	52 95       	swap	r21
    4c3c:	50 7f       	andi	r21, 0xF0	; 240
    4c3e:	2c 0f       	add	r18, r28
    4c40:	3d 1f       	adc	r19, r29
    4c42:	f9 01       	movw	r30, r18
    4c44:	91 81       	ldd	r25, Z+1	; 0x01
    4c46:	91 34       	cpi	r25, 0x41	; 65
    4c48:	10 f0       	brcs	.+4      	; 0x4c4e <decode_hexadecimal_string_bytes+0x5a>
    4c4a:	97 53       	subi	r25, 0x37	; 55
    4c4c:	01 c0       	rjmp	.+2      	; 0x4c50 <decode_hexadecimal_string_bytes+0x5c>
    4c4e:	90 53       	subi	r25, 0x30	; 48
    4c50:	95 0f       	add	r25, r21
    4c52:	f8 01       	movw	r30, r16
    4c54:	90 83       	st	Z, r25
    4c56:	8f 5f       	subi	r24, 0xFF	; 255
    4c58:	01 c0       	rjmp	.+2      	; 0x4c5c <decode_hexadecimal_string_bytes+0x68>
    4c5a:	80 e0       	ldi	r24, 0x00	; 0
    4c5c:	28 2f       	mov	r18, r24
    4c5e:	22 0f       	add	r18, r18
    4c60:	48 2f       	mov	r20, r24
    4c62:	50 e0       	ldi	r21, 0x00	; 0
    4c64:	fe 01       	movw	r30, r28
    4c66:	01 90       	ld	r0, Z+
    4c68:	00 20       	and	r0, r0
    4c6a:	e9 f7       	brne	.-6      	; 0x4c66 <decode_hexadecimal_string_bytes+0x72>
    4c6c:	31 97       	sbiw	r30, 0x01	; 1
    4c6e:	ec 1b       	sub	r30, r28
    4c70:	fd 0b       	sbc	r31, r29
    4c72:	4e 17       	cp	r20, r30
    4c74:	5f 07       	cpc	r21, r31
    4c76:	10 f4       	brcc	.+4      	; 0x4c7c <decode_hexadecimal_string_bytes+0x88>
    4c78:	86 13       	cpse	r24, r22
    4c7a:	ce cf       	rjmp	.-100    	; 0x4c18 <decode_hexadecimal_string_bytes+0x24>
    4c7c:	df 91       	pop	r29
    4c7e:	cf 91       	pop	r28
    4c80:	1f 91       	pop	r17
    4c82:	0f 91       	pop	r16
    4c84:	08 95       	ret

00004c86 <_serialCallBack>:
    4c86:	80 91 37 1b 	lds	r24, 0x1B37	; 0x801b37 <crc_sum.1945>
    4c8a:	86 0f       	add	r24, r22
    4c8c:	80 93 37 1b 	sts	0x1B37, r24	; 0x801b37 <crc_sum.1945>
    4c90:	90 91 3a 1b 	lds	r25, 0x1B3A	; 0x801b3a <_mh_state>
    4c94:	91 30       	cpi	r25, 0x01	; 1
    4c96:	79 f0       	breq	.+30     	; 0x4cb6 <_serialCallBack+0x30>
    4c98:	28 f0       	brcs	.+10     	; 0x4ca4 <_serialCallBack+0x1e>
    4c9a:	92 30       	cpi	r25, 0x02	; 2
    4c9c:	a9 f0       	breq	.+42     	; 0x4cc8 <_serialCallBack+0x42>
    4c9e:	93 30       	cpi	r25, 0x03	; 3
    4ca0:	19 f1       	breq	.+70     	; 0x4ce8 <_serialCallBack+0x62>
    4ca2:	08 95       	ret
    4ca4:	6f 3f       	cpi	r22, 0xFF	; 255
    4ca6:	09 f0       	breq	.+2      	; 0x4caa <_serialCallBack+0x24>
    4ca8:	48 c0       	rjmp	.+144    	; 0x4d3a <_serialCallBack+0xb4>
    4caa:	10 92 37 1b 	sts	0x1B37, r1	; 0x801b37 <crc_sum.1945>
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	80 93 3a 1b 	sts	0x1B3A, r24	; 0x801b3a <_mh_state>
    4cb4:	08 95       	ret
    4cb6:	66 38       	cpi	r22, 0x86	; 134
    4cb8:	09 f0       	breq	.+2      	; 0x4cbc <_serialCallBack+0x36>
    4cba:	3f c0       	rjmp	.+126    	; 0x4d3a <_serialCallBack+0xb4>
    4cbc:	10 92 36 1b 	sts	0x1B36, r1	; 0x801b36 <inDex.1943>
    4cc0:	82 e0       	ldi	r24, 0x02	; 2
    4cc2:	80 93 3a 1b 	sts	0x1B3A, r24	; 0x801b3a <_mh_state>
    4cc6:	08 95       	ret
    4cc8:	e0 91 36 1b 	lds	r30, 0x1B36	; 0x801b36 <inDex.1943>
    4ccc:	81 e0       	ldi	r24, 0x01	; 1
    4cce:	8e 0f       	add	r24, r30
    4cd0:	80 93 36 1b 	sts	0x1B36, r24	; 0x801b36 <inDex.1943>
    4cd4:	f0 e0       	ldi	r31, 0x00	; 0
    4cd6:	ec 5c       	subi	r30, 0xCC	; 204
    4cd8:	f4 4e       	sbci	r31, 0xE4	; 228
    4cda:	60 83       	st	Z, r22
    4cdc:	82 30       	cpi	r24, 0x02	; 2
    4cde:	69 f5       	brne	.+90     	; 0x4d3a <_serialCallBack+0xb4>
    4ce0:	83 e0       	ldi	r24, 0x03	; 3
    4ce2:	80 93 3a 1b 	sts	0x1B3A, r24	; 0x801b3a <_mh_state>
    4ce6:	08 95       	ret
    4ce8:	90 91 36 1b 	lds	r25, 0x1B36	; 0x801b36 <inDex.1943>
    4cec:	21 e0       	ldi	r18, 0x01	; 1
    4cee:	29 0f       	add	r18, r25
    4cf0:	20 93 36 1b 	sts	0x1B36, r18	; 0x801b36 <inDex.1943>
    4cf4:	96 30       	cpi	r25, 0x06	; 6
    4cf6:	09 f5       	brne	.+66     	; 0x4d3a <_serialCallBack+0xb4>
    4cf8:	81 11       	cpse	r24, r1
    4cfa:	0e c0       	rjmp	.+28     	; 0x4d18 <_serialCallBack+0x92>
    4cfc:	e4 e3       	ldi	r30, 0x34	; 52
    4cfe:	fb e1       	ldi	r31, 0x1B	; 27
    4d00:	80 81       	ld	r24, Z
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	98 2f       	mov	r25, r24
    4d06:	88 27       	eor	r24, r24
    4d08:	21 81       	ldd	r18, Z+1	; 0x01
    4d0a:	82 0f       	add	r24, r18
    4d0c:	91 1d       	adc	r25, r1
    4d0e:	90 93 3c 1b 	sts	0x1B3C, r25	; 0x801b3c <_ppm+0x1>
    4d12:	80 93 3b 1b 	sts	0x1B3B, r24	; 0x801b3b <_ppm>
    4d16:	04 c0       	rjmp	.+8      	; 0x4d20 <_serialCallBack+0x9a>
    4d18:	10 92 3c 1b 	sts	0x1B3C, r1	; 0x801b3c <_ppm+0x1>
    4d1c:	10 92 3b 1b 	sts	0x1B3B, r1	; 0x801b3b <_ppm>
    4d20:	10 92 3a 1b 	sts	0x1B3A, r1	; 0x801b3a <_mh_state>
    4d24:	e0 91 38 1b 	lds	r30, 0x1B38	; 0x801b38 <_appCallBack>
    4d28:	f0 91 39 1b 	lds	r31, 0x1B39	; 0x801b39 <_appCallBack+0x1>
    4d2c:	30 97       	sbiw	r30, 0x00	; 0
    4d2e:	29 f0       	breq	.+10     	; 0x4d3a <_serialCallBack+0xb4>
    4d30:	80 91 3b 1b 	lds	r24, 0x1B3B	; 0x801b3b <_ppm>
    4d34:	90 91 3c 1b 	lds	r25, 0x1B3C	; 0x801b3c <_ppm+0x1>
    4d38:	19 95       	eicall
    4d3a:	08 95       	ret

00004d3c <mh_z19_initialise>:
    4d3c:	8f 92       	push	r8
    4d3e:	9f 92       	push	r9
    4d40:	af 92       	push	r10
    4d42:	cf 92       	push	r12
    4d44:	ef 92       	push	r14
    4d46:	0f 93       	push	r16
    4d48:	0f 2e       	mov	r0, r31
    4d4a:	f3 e4       	ldi	r31, 0x43	; 67
    4d4c:	8f 2e       	mov	r8, r31
    4d4e:	f6 e2       	ldi	r31, 0x26	; 38
    4d50:	9f 2e       	mov	r9, r31
    4d52:	f0 2d       	mov	r31, r0
    4d54:	68 94       	set
    4d56:	aa 24       	eor	r10, r10
    4d58:	a4 f8       	bld	r10, 4
    4d5a:	68 94       	set
    4d5c:	cc 24       	eor	r12, r12
    4d5e:	c4 f8       	bld	r12, 4
    4d60:	e1 2c       	mov	r14, r1
    4d62:	00 e0       	ldi	r16, 0x00	; 0
    4d64:	23 e0       	ldi	r18, 0x03	; 3
    4d66:	40 e8       	ldi	r20, 0x80	; 128
    4d68:	55 e2       	ldi	r21, 0x25	; 37
    4d6a:	60 e0       	ldi	r22, 0x00	; 0
    4d6c:	70 e0       	ldi	r23, 0x00	; 0
    4d6e:	84 d0       	rcall	.+264    	; 0x4e78 <serial_create>
    4d70:	90 93 3e 1b 	sts	0x1B3E, r25	; 0x801b3e <_serial+0x1>
    4d74:	80 93 3d 1b 	sts	0x1B3D, r24	; 0x801b3d <_serial>
    4d78:	0f 91       	pop	r16
    4d7a:	ef 90       	pop	r14
    4d7c:	cf 90       	pop	r12
    4d7e:	af 90       	pop	r10
    4d80:	9f 90       	pop	r9
    4d82:	8f 90       	pop	r8
    4d84:	08 95       	ret

00004d86 <mh_z19_injectCallBack>:
    4d86:	90 93 39 1b 	sts	0x1B39, r25	; 0x801b39 <_appCallBack+0x1>
    4d8a:	80 93 38 1b 	sts	0x1B38, r24	; 0x801b38 <_appCallBack>
    4d8e:	08 95       	ret

00004d90 <mh_z19_takeMeassuring>:
    4d90:	cf 93       	push	r28
    4d92:	df 93       	push	r29
    4d94:	cd b7       	in	r28, 0x3d	; 61
    4d96:	de b7       	in	r29, 0x3e	; 62
    4d98:	29 97       	sbiw	r28, 0x09	; 9
    4d9a:	0f b6       	in	r0, 0x3f	; 63
    4d9c:	f8 94       	cli
    4d9e:	de bf       	out	0x3e, r29	; 62
    4da0:	0f be       	out	0x3f, r0	; 63
    4da2:	cd bf       	out	0x3d, r28	; 61
    4da4:	89 e0       	ldi	r24, 0x09	; 9
    4da6:	e2 e4       	ldi	r30, 0x42	; 66
    4da8:	f2 e0       	ldi	r31, 0x02	; 2
    4daa:	9e 01       	movw	r18, r28
    4dac:	2f 5f       	subi	r18, 0xFF	; 255
    4dae:	3f 4f       	sbci	r19, 0xFF	; 255
    4db0:	d9 01       	movw	r26, r18
    4db2:	01 90       	ld	r0, Z+
    4db4:	0d 92       	st	X+, r0
    4db6:	8a 95       	dec	r24
    4db8:	e1 f7       	brne	.-8      	; 0x4db2 <mh_z19_takeMeassuring+0x22>
    4dba:	10 92 3c 1b 	sts	0x1B3C, r1	; 0x801b3c <_ppm+0x1>
    4dbe:	10 92 3b 1b 	sts	0x1B3B, r1	; 0x801b3b <_ppm>
    4dc2:	80 91 3d 1b 	lds	r24, 0x1B3D	; 0x801b3d <_serial>
    4dc6:	90 91 3e 1b 	lds	r25, 0x1B3E	; 0x801b3e <_serial+0x1>
    4dca:	00 97       	sbiw	r24, 0x00	; 0
    4dcc:	31 f0       	breq	.+12     	; 0x4dda <mh_z19_takeMeassuring+0x4a>
    4dce:	42 2f       	mov	r20, r18
    4dd0:	53 2f       	mov	r21, r19
    4dd2:	69 e0       	ldi	r22, 0x09	; 9
    4dd4:	22 d1       	rcall	.+580    	; 0x501a <serial_sendBytes>
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	01 c0       	rjmp	.+2      	; 0x4ddc <mh_z19_takeMeassuring+0x4c>
    4dda:	82 e0       	ldi	r24, 0x02	; 2
    4ddc:	29 96       	adiw	r28, 0x09	; 9
    4dde:	0f b6       	in	r0, 0x3f	; 63
    4de0:	f8 94       	cli
    4de2:	de bf       	out	0x3e, r29	; 62
    4de4:	0f be       	out	0x3f, r0	; 63
    4de6:	cd bf       	out	0x3d, r28	; 61
    4de8:	df 91       	pop	r29
    4dea:	cf 91       	pop	r28
    4dec:	08 95       	ret

00004dee <mh_z19_getCo2Ppm>:
    4dee:	20 91 3b 1b 	lds	r18, 0x1B3B	; 0x801b3b <_ppm>
    4df2:	30 91 3c 1b 	lds	r19, 0x1B3C	; 0x801b3c <_ppm+0x1>
    4df6:	21 15       	cp	r18, r1
    4df8:	31 05       	cpc	r19, r1
    4dfa:	29 f4       	brne	.+10     	; 0x4e06 <mh_z19_getCo2Ppm+0x18>
    4dfc:	fc 01       	movw	r30, r24
    4dfe:	11 82       	std	Z+1, r1	; 0x01
    4e00:	10 82       	st	Z, r1
    4e02:	81 e0       	ldi	r24, 0x01	; 1
    4e04:	08 95       	ret
    4e06:	fc 01       	movw	r30, r24
    4e08:	31 83       	std	Z+1, r19	; 0x01
    4e0a:	20 83       	st	Z, r18
    4e0c:	80 e0       	ldi	r24, 0x00	; 0
    4e0e:	08 95       	ret

00004e10 <rc_servo_setPosition>:
    4e10:	65 36       	cpi	r22, 0x65	; 101
    4e12:	0c f0       	brlt	.+2      	; 0x4e16 <rc_servo_setPosition+0x6>
    4e14:	64 e6       	ldi	r22, 0x64	; 100
    4e16:	6c 39       	cpi	r22, 0x9C	; 156
    4e18:	0c f4       	brge	.+2      	; 0x4e1c <rc_servo_setPosition+0xc>
    4e1a:	6c e9       	ldi	r22, 0x9C	; 156
    4e1c:	96 ef       	ldi	r25, 0xF6	; 246
    4e1e:	69 02       	muls	r22, r25
    4e20:	b0 01       	movw	r22, r0
    4e22:	11 24       	eor	r1, r1
    4e24:	68 54       	subi	r22, 0x48	; 72
    4e26:	74 4f       	sbci	r23, 0xF4	; 244
    4e28:	81 11       	cpse	r24, r1
    4e2a:	05 c0       	rjmp	.+10     	; 0x4e36 <rc_servo_setPosition+0x26>
    4e2c:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4e30:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4e34:	08 95       	ret
    4e36:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4e3a:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4e3e:	08 95       	ret

00004e40 <rc_servo_initialise>:
    4e40:	ea e0       	ldi	r30, 0x0A	; 10
    4e42:	f1 e0       	ldi	r31, 0x01	; 1
    4e44:	80 81       	ld	r24, Z
    4e46:	88 61       	ori	r24, 0x18	; 24
    4e48:	80 83       	st	Z, r24
    4e4a:	8f e3       	ldi	r24, 0x3F	; 63
    4e4c:	9c e9       	ldi	r25, 0x9C	; 156
    4e4e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4e52:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4e56:	60 e0       	ldi	r22, 0x00	; 0
    4e58:	80 e0       	ldi	r24, 0x00	; 0
    4e5a:	da df       	rcall	.-76     	; 0x4e10 <rc_servo_setPosition>
    4e5c:	60 e0       	ldi	r22, 0x00	; 0
    4e5e:	81 e0       	ldi	r24, 0x01	; 1
    4e60:	d7 df       	rcall	.-82     	; 0x4e10 <rc_servo_setPosition>
    4e62:	e0 e2       	ldi	r30, 0x20	; 32
    4e64:	f1 e0       	ldi	r31, 0x01	; 1
    4e66:	80 81       	ld	r24, Z
    4e68:	82 6a       	ori	r24, 0xA2	; 162
    4e6a:	80 83       	st	Z, r24
    4e6c:	e1 e2       	ldi	r30, 0x21	; 33
    4e6e:	f1 e0       	ldi	r31, 0x01	; 1
    4e70:	80 81       	ld	r24, Z
    4e72:	8a 61       	ori	r24, 0x1A	; 26
    4e74:	80 83       	st	Z, r24
    4e76:	08 95       	ret

00004e78 <serial_create>:
    4e78:	2f 92       	push	r2
    4e7a:	3f 92       	push	r3
    4e7c:	4f 92       	push	r4
    4e7e:	5f 92       	push	r5
    4e80:	6f 92       	push	r6
    4e82:	7f 92       	push	r7
    4e84:	8f 92       	push	r8
    4e86:	9f 92       	push	r9
    4e88:	af 92       	push	r10
    4e8a:	cf 92       	push	r12
    4e8c:	ef 92       	push	r14
    4e8e:	ff 92       	push	r15
    4e90:	0f 93       	push	r16
    4e92:	1f 93       	push	r17
    4e94:	cf 93       	push	r28
    4e96:	df 93       	push	r29
    4e98:	cd b7       	in	r28, 0x3d	; 61
    4e9a:	de b7       	in	r29, 0x3e	; 62
    4e9c:	f8 2e       	mov	r15, r24
    4e9e:	2a 01       	movw	r4, r20
    4ea0:	3b 01       	movw	r6, r22
    4ea2:	88 e0       	ldi	r24, 0x08	; 8
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	0e 94 67 34 	call	0x68ce	; 0x68ce <malloc>
    4eaa:	8c 01       	movw	r16, r24
    4eac:	8f 2d       	mov	r24, r15
    4eae:	90 e0       	ldi	r25, 0x00	; 0
    4eb0:	fc 01       	movw	r30, r24
    4eb2:	ee 0f       	add	r30, r30
    4eb4:	ff 1f       	adc	r31, r31
    4eb6:	e1 5c       	subi	r30, 0xC1	; 193
    4eb8:	f4 4e       	sbci	r31, 0xE4	; 228
    4eba:	11 83       	std	Z+1, r17	; 0x01
    4ebc:	00 83       	st	Z, r16
    4ebe:	01 15       	cp	r16, r1
    4ec0:	11 05       	cpc	r17, r1
    4ec2:	09 f4       	brne	.+2      	; 0x4ec6 <serial_create+0x4e>
    4ec4:	6d c0       	rjmp	.+218    	; 0x4fa0 <serial_create+0x128>
    4ec6:	88 0f       	add	r24, r24
    4ec8:	99 1f       	adc	r25, r25
    4eca:	fc 01       	movw	r30, r24
    4ecc:	e5 5f       	subi	r30, 0xF5	; 245
    4ece:	fd 4f       	sbci	r31, 0xFD	; 253
    4ed0:	80 81       	ld	r24, Z
    4ed2:	91 81       	ldd	r25, Z+1	; 0x01
    4ed4:	d8 01       	movw	r26, r16
    4ed6:	8d 93       	st	X+, r24
    4ed8:	9c 93       	st	X, r25
    4eda:	8c 2d       	mov	r24, r12
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	88 0f       	add	r24, r24
    4ee0:	99 1f       	adc	r25, r25
    4ee2:	88 0f       	add	r24, r24
    4ee4:	99 1f       	adc	r25, r25
    4ee6:	0e 94 67 34 	call	0x68ce	; 0x68ce <malloc>
    4eea:	1c 01       	movw	r2, r24
    4eec:	86 e0       	ldi	r24, 0x06	; 6
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	0e 94 67 34 	call	0x68ce	; 0x68ce <malloc>
    4ef4:	7c 01       	movw	r14, r24
    4ef6:	4c 2d       	mov	r20, r12
    4ef8:	b1 01       	movw	r22, r2
    4efa:	f4 d6       	rcall	.+3560   	; 0x5ce4 <fifo_init>
    4efc:	f8 01       	movw	r30, r16
    4efe:	f5 82       	std	Z+5, r15	; 0x05
    4f00:	e4 82       	std	Z+4, r14	; 0x04
    4f02:	8a 2d       	mov	r24, r10
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	88 0f       	add	r24, r24
    4f08:	99 1f       	adc	r25, r25
    4f0a:	88 0f       	add	r24, r24
    4f0c:	99 1f       	adc	r25, r25
    4f0e:	0e 94 67 34 	call	0x68ce	; 0x68ce <malloc>
    4f12:	1c 01       	movw	r2, r24
    4f14:	86 e0       	ldi	r24, 0x06	; 6
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	0e 94 67 34 	call	0x68ce	; 0x68ce <malloc>
    4f1c:	7c 01       	movw	r14, r24
    4f1e:	4a 2d       	mov	r20, r10
    4f20:	b1 01       	movw	r22, r2
    4f22:	e0 d6       	rcall	.+3520   	; 0x5ce4 <fifo_init>
    4f24:	d8 01       	movw	r26, r16
    4f26:	13 96       	adiw	r26, 0x03	; 3
    4f28:	fc 92       	st	X, r15
    4f2a:	ee 92       	st	-X, r14
    4f2c:	12 97       	sbiw	r26, 0x02	; 2
    4f2e:	17 96       	adiw	r26, 0x07	; 7
    4f30:	9c 92       	st	X, r9
    4f32:	8e 92       	st	-X, r8
    4f34:	16 97       	sbiw	r26, 0x06	; 6
    4f36:	ff b6       	in	r15, 0x3f	; 63
    4f38:	f8 94       	cli
    4f3a:	ed 91       	ld	r30, X+
    4f3c:	fc 91       	ld	r31, X
    4f3e:	11 97       	sbiw	r26, 0x01	; 1
    4f40:	36 97       	sbiw	r30, 0x06	; 6
    4f42:	80 81       	ld	r24, Z
    4f44:	82 60       	ori	r24, 0x02	; 2
    4f46:	80 83       	st	Z, r24
    4f48:	8d 90       	ld	r8, X+
    4f4a:	9c 90       	ld	r9, X
    4f4c:	c3 01       	movw	r24, r6
    4f4e:	b2 01       	movw	r22, r4
    4f50:	0e 94 16 33 	call	0x662c	; 0x662c <__floatunsisf>
    4f54:	20 e0       	ldi	r18, 0x00	; 0
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	40 e0       	ldi	r20, 0x00	; 0
    4f5a:	51 e4       	ldi	r21, 0x41	; 65
    4f5c:	0e 94 a4 33 	call	0x6748	; 0x6748 <__mulsf3>
    4f60:	9b 01       	movw	r18, r22
    4f62:	ac 01       	movw	r20, r24
    4f64:	60 e0       	ldi	r22, 0x00	; 0
    4f66:	74 e2       	ldi	r23, 0x24	; 36
    4f68:	84 e7       	ldi	r24, 0x74	; 116
    4f6a:	9b e4       	ldi	r25, 0x4B	; 75
    4f6c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <__divsf3>
    4f70:	20 e0       	ldi	r18, 0x00	; 0
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	40 e8       	ldi	r20, 0x80	; 128
    4f76:	5f e3       	ldi	r21, 0x3F	; 63
    4f78:	0e 94 18 32 	call	0x6430	; 0x6430 <__subsf3>
    4f7c:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__fixunssfsi>
    4f80:	f4 01       	movw	r30, r8
    4f82:	32 97       	sbiw	r30, 0x02	; 2
    4f84:	60 83       	st	Z, r22
    4f86:	d8 01       	movw	r26, r16
    4f88:	ed 91       	ld	r30, X+
    4f8a:	fc 91       	ld	r31, X
    4f8c:	11 97       	sbiw	r26, 0x01	; 1
    4f8e:	35 97       	sbiw	r30, 0x05	; 5
    4f90:	88 e9       	ldi	r24, 0x98	; 152
    4f92:	80 83       	st	Z, r24
    4f94:	ed 91       	ld	r30, X+
    4f96:	fc 91       	ld	r31, X
    4f98:	34 97       	sbiw	r30, 0x04	; 4
    4f9a:	86 e0       	ldi	r24, 0x06	; 6
    4f9c:	80 83       	st	Z, r24
    4f9e:	ff be       	out	0x3f, r15	; 63
    4fa0:	c8 01       	movw	r24, r16
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	1f 91       	pop	r17
    4fa8:	0f 91       	pop	r16
    4faa:	ff 90       	pop	r15
    4fac:	ef 90       	pop	r14
    4fae:	cf 90       	pop	r12
    4fb0:	af 90       	pop	r10
    4fb2:	9f 90       	pop	r9
    4fb4:	8f 90       	pop	r8
    4fb6:	7f 90       	pop	r7
    4fb8:	6f 90       	pop	r6
    4fba:	5f 90       	pop	r5
    4fbc:	4f 90       	pop	r4
    4fbe:	3f 90       	pop	r3
    4fc0:	2f 90       	pop	r2
    4fc2:	08 95       	ret

00004fc4 <serial_sendByte>:
    4fc4:	cf 93       	push	r28
    4fc6:	df 93       	push	r29
    4fc8:	dc 01       	movw	r26, r24
    4fca:	89 2b       	or	r24, r25
    4fcc:	01 f1       	breq	.+64     	; 0x500e <serial_sendByte+0x4a>
    4fce:	12 96       	adiw	r26, 0x02	; 2
    4fd0:	ed 91       	ld	r30, X+
    4fd2:	fc 91       	ld	r31, X
    4fd4:	13 97       	sbiw	r26, 0x03	; 3
    4fd6:	93 81       	ldd	r25, Z+3	; 0x03
    4fd8:	82 81       	ldd	r24, Z+2	; 0x02
    4fda:	25 81       	ldd	r18, Z+5	; 0x05
    4fdc:	98 1b       	sub	r25, r24
    4fde:	92 23       	and	r25, r18
    4fe0:	84 81       	ldd	r24, Z+4	; 0x04
    4fe2:	98 17       	cp	r25, r24
    4fe4:	b1 f0       	breq	.+44     	; 0x5012 <serial_sendByte+0x4e>
    4fe6:	83 81       	ldd	r24, Z+3	; 0x03
    4fe8:	26 95       	lsr	r18
    4fea:	28 23       	and	r18, r24
    4fec:	c0 81       	ld	r28, Z
    4fee:	d1 81       	ldd	r29, Z+1	; 0x01
    4ff0:	c2 0f       	add	r28, r18
    4ff2:	d1 1d       	adc	r29, r1
    4ff4:	68 83       	st	Y, r22
    4ff6:	8f 5f       	subi	r24, 0xFF	; 255
    4ff8:	95 81       	ldd	r25, Z+5	; 0x05
    4ffa:	89 23       	and	r24, r25
    4ffc:	83 83       	std	Z+3, r24	; 0x03
    4ffe:	ed 91       	ld	r30, X+
    5000:	fc 91       	ld	r31, X
    5002:	35 97       	sbiw	r30, 0x05	; 5
    5004:	80 81       	ld	r24, Z
    5006:	80 62       	ori	r24, 0x20	; 32
    5008:	80 83       	st	Z, r24
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	03 c0       	rjmp	.+6      	; 0x5014 <serial_sendByte+0x50>
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	01 c0       	rjmp	.+2      	; 0x5014 <serial_sendByte+0x50>
    5012:	82 e0       	ldi	r24, 0x02	; 2
    5014:	df 91       	pop	r29
    5016:	cf 91       	pop	r28
    5018:	08 95       	ret

0000501a <serial_sendBytes>:
    501a:	ef 92       	push	r14
    501c:	ff 92       	push	r15
    501e:	0f 93       	push	r16
    5020:	1f 93       	push	r17
    5022:	cf 93       	push	r28
    5024:	df 93       	push	r29
    5026:	7c 01       	movw	r14, r24
    5028:	00 97       	sbiw	r24, 0x00	; 0
    502a:	09 f4       	brne	.+2      	; 0x502e <serial_sendBytes+0x14>
    502c:	41 c0       	rjmp	.+130    	; 0x50b0 <serial_sendBytes+0x96>
    502e:	dc 01       	movw	r26, r24
    5030:	12 96       	adiw	r26, 0x02	; 2
    5032:	ed 91       	ld	r30, X+
    5034:	fc 91       	ld	r31, X
    5036:	13 97       	sbiw	r26, 0x03	; 3
    5038:	93 81       	ldd	r25, Z+3	; 0x03
    503a:	82 81       	ldd	r24, Z+2	; 0x02
    503c:	98 1b       	sub	r25, r24
    503e:	85 81       	ldd	r24, Z+5	; 0x05
    5040:	98 23       	and	r25, r24
    5042:	84 81       	ldd	r24, Z+4	; 0x04
    5044:	89 1b       	sub	r24, r25
    5046:	86 17       	cp	r24, r22
    5048:	a8 f1       	brcs	.+106    	; 0x50b4 <serial_sendBytes+0x9a>
    504a:	66 23       	and	r22, r22
    504c:	41 f1       	breq	.+80     	; 0x509e <serial_sendBytes+0x84>
    504e:	84 2f       	mov	r24, r20
    5050:	95 2f       	mov	r25, r21
    5052:	dc 01       	movw	r26, r24
    5054:	61 50       	subi	r22, 0x01	; 1
    5056:	46 2f       	mov	r20, r22
    5058:	50 e0       	ldi	r21, 0x00	; 0
    505a:	4f 5f       	subi	r20, 0xFF	; 255
    505c:	5f 4f       	sbci	r21, 0xFF	; 255
    505e:	48 0f       	add	r20, r24
    5060:	59 1f       	adc	r21, r25
    5062:	e7 01       	movw	r28, r14
    5064:	ea 81       	ldd	r30, Y+2	; 0x02
    5066:	fb 81       	ldd	r31, Y+3	; 0x03
    5068:	93 81       	ldd	r25, Z+3	; 0x03
    506a:	82 81       	ldd	r24, Z+2	; 0x02
    506c:	25 81       	ldd	r18, Z+5	; 0x05
    506e:	98 1b       	sub	r25, r24
    5070:	92 23       	and	r25, r18
    5072:	84 81       	ldd	r24, Z+4	; 0x04
    5074:	98 17       	cp	r25, r24
    5076:	79 f0       	breq	.+30     	; 0x5096 <serial_sendBytes+0x7c>
    5078:	8c 91       	ld	r24, X
    507a:	93 81       	ldd	r25, Z+3	; 0x03
    507c:	26 95       	lsr	r18
    507e:	29 23       	and	r18, r25
    5080:	60 81       	ld	r22, Z
    5082:	71 81       	ldd	r23, Z+1	; 0x01
    5084:	8b 01       	movw	r16, r22
    5086:	02 0f       	add	r16, r18
    5088:	11 1d       	adc	r17, r1
    508a:	e8 01       	movw	r28, r16
    508c:	88 83       	st	Y, r24
    508e:	9f 5f       	subi	r25, 0xFF	; 255
    5090:	85 81       	ldd	r24, Z+5	; 0x05
    5092:	98 23       	and	r25, r24
    5094:	93 83       	std	Z+3, r25	; 0x03
    5096:	11 96       	adiw	r26, 0x01	; 1
    5098:	a4 17       	cp	r26, r20
    509a:	b5 07       	cpc	r27, r21
    509c:	11 f7       	brne	.-60     	; 0x5062 <serial_sendBytes+0x48>
    509e:	d7 01       	movw	r26, r14
    50a0:	ed 91       	ld	r30, X+
    50a2:	fc 91       	ld	r31, X
    50a4:	35 97       	sbiw	r30, 0x05	; 5
    50a6:	80 81       	ld	r24, Z
    50a8:	80 62       	ori	r24, 0x20	; 32
    50aa:	80 83       	st	Z, r24
    50ac:	80 e0       	ldi	r24, 0x00	; 0
    50ae:	03 c0       	rjmp	.+6      	; 0x50b6 <serial_sendBytes+0x9c>
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	01 c0       	rjmp	.+2      	; 0x50b6 <serial_sendBytes+0x9c>
    50b4:	82 e0       	ldi	r24, 0x02	; 2
    50b6:	df 91       	pop	r29
    50b8:	cf 91       	pop	r28
    50ba:	1f 91       	pop	r17
    50bc:	0f 91       	pop	r16
    50be:	ff 90       	pop	r15
    50c0:	ef 90       	pop	r14
    50c2:	08 95       	ret

000050c4 <serial_getByte>:
    50c4:	00 97       	sbiw	r24, 0x00	; 0
    50c6:	d1 f0       	breq	.+52     	; 0x50fc <serial_getByte+0x38>
    50c8:	dc 01       	movw	r26, r24
    50ca:	14 96       	adiw	r26, 0x04	; 4
    50cc:	ed 91       	ld	r30, X+
    50ce:	fc 91       	ld	r31, X
    50d0:	15 97       	sbiw	r26, 0x05	; 5
    50d2:	93 81       	ldd	r25, Z+3	; 0x03
    50d4:	82 81       	ldd	r24, Z+2	; 0x02
    50d6:	98 17       	cp	r25, r24
    50d8:	99 f0       	breq	.+38     	; 0x5100 <serial_getByte+0x3c>
    50da:	92 81       	ldd	r25, Z+2	; 0x02
    50dc:	85 81       	ldd	r24, Z+5	; 0x05
    50de:	86 95       	lsr	r24
    50e0:	89 23       	and	r24, r25
    50e2:	a0 81       	ld	r26, Z
    50e4:	b1 81       	ldd	r27, Z+1	; 0x01
    50e6:	a8 0f       	add	r26, r24
    50e8:	b1 1d       	adc	r27, r1
    50ea:	8c 91       	ld	r24, X
    50ec:	db 01       	movw	r26, r22
    50ee:	8c 93       	st	X, r24
    50f0:	9f 5f       	subi	r25, 0xFF	; 255
    50f2:	85 81       	ldd	r24, Z+5	; 0x05
    50f4:	98 23       	and	r25, r24
    50f6:	92 83       	std	Z+2, r25	; 0x02
    50f8:	80 e0       	ldi	r24, 0x00	; 0
    50fa:	08 95       	ret
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	08 95       	ret
    5100:	83 e0       	ldi	r24, 0x03	; 3
    5102:	08 95       	ret

00005104 <__vector_25>:
    5104:	1f 92       	push	r1
    5106:	0f 92       	push	r0
    5108:	0f b6       	in	r0, 0x3f	; 63
    510a:	0f 92       	push	r0
    510c:	11 24       	eor	r1, r1
    510e:	0b b6       	in	r0, 0x3b	; 59
    5110:	0f 92       	push	r0
    5112:	2f 93       	push	r18
    5114:	3f 93       	push	r19
    5116:	4f 93       	push	r20
    5118:	5f 93       	push	r21
    511a:	6f 93       	push	r22
    511c:	7f 93       	push	r23
    511e:	8f 93       	push	r24
    5120:	9f 93       	push	r25
    5122:	af 93       	push	r26
    5124:	bf 93       	push	r27
    5126:	cf 93       	push	r28
    5128:	df 93       	push	r29
    512a:	ef 93       	push	r30
    512c:	ff 93       	push	r31
    512e:	a0 91 3f 1b 	lds	r26, 0x1B3F	; 0x801b3f <_ser_handle>
    5132:	b0 91 40 1b 	lds	r27, 0x1B40	; 0x801b40 <_ser_handle+0x1>
    5136:	10 97       	sbiw	r26, 0x00	; 0
    5138:	11 f1       	breq	.+68     	; 0x517e <__vector_25+0x7a>
    513a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    513e:	14 96       	adiw	r26, 0x04	; 4
    5140:	ed 91       	ld	r30, X+
    5142:	fc 91       	ld	r31, X
    5144:	15 97       	sbiw	r26, 0x05	; 5
    5146:	93 81       	ldd	r25, Z+3	; 0x03
    5148:	82 81       	ldd	r24, Z+2	; 0x02
    514a:	25 81       	ldd	r18, Z+5	; 0x05
    514c:	98 1b       	sub	r25, r24
    514e:	92 23       	and	r25, r18
    5150:	84 81       	ldd	r24, Z+4	; 0x04
    5152:	98 17       	cp	r25, r24
    5154:	61 f0       	breq	.+24     	; 0x516e <__vector_25+0x6a>
    5156:	83 81       	ldd	r24, Z+3	; 0x03
    5158:	26 95       	lsr	r18
    515a:	28 23       	and	r18, r24
    515c:	c0 81       	ld	r28, Z
    515e:	d1 81       	ldd	r29, Z+1	; 0x01
    5160:	c2 0f       	add	r28, r18
    5162:	d1 1d       	adc	r29, r1
    5164:	68 83       	st	Y, r22
    5166:	8f 5f       	subi	r24, 0xFF	; 255
    5168:	95 81       	ldd	r25, Z+5	; 0x05
    516a:	89 23       	and	r24, r25
    516c:	83 83       	std	Z+3, r24	; 0x03
    516e:	16 96       	adiw	r26, 0x06	; 6
    5170:	ed 91       	ld	r30, X+
    5172:	fc 91       	ld	r31, X
    5174:	17 97       	sbiw	r26, 0x07	; 7
    5176:	30 97       	sbiw	r30, 0x00	; 0
    5178:	11 f0       	breq	.+4      	; 0x517e <__vector_25+0x7a>
    517a:	cd 01       	movw	r24, r26
    517c:	19 95       	eicall
    517e:	ff 91       	pop	r31
    5180:	ef 91       	pop	r30
    5182:	df 91       	pop	r29
    5184:	cf 91       	pop	r28
    5186:	bf 91       	pop	r27
    5188:	af 91       	pop	r26
    518a:	9f 91       	pop	r25
    518c:	8f 91       	pop	r24
    518e:	7f 91       	pop	r23
    5190:	6f 91       	pop	r22
    5192:	5f 91       	pop	r21
    5194:	4f 91       	pop	r20
    5196:	3f 91       	pop	r19
    5198:	2f 91       	pop	r18
    519a:	0f 90       	pop	r0
    519c:	0b be       	out	0x3b, r0	; 59
    519e:	0f 90       	pop	r0
    51a0:	0f be       	out	0x3f, r0	; 63
    51a2:	0f 90       	pop	r0
    51a4:	1f 90       	pop	r1
    51a6:	18 95       	reti

000051a8 <__vector_26>:
    51a8:	1f 92       	push	r1
    51aa:	0f 92       	push	r0
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	0f 92       	push	r0
    51b0:	11 24       	eor	r1, r1
    51b2:	0b b6       	in	r0, 0x3b	; 59
    51b4:	0f 92       	push	r0
    51b6:	2f 93       	push	r18
    51b8:	8f 93       	push	r24
    51ba:	9f 93       	push	r25
    51bc:	af 93       	push	r26
    51be:	bf 93       	push	r27
    51c0:	ef 93       	push	r30
    51c2:	ff 93       	push	r31
    51c4:	e0 91 3f 1b 	lds	r30, 0x1B3F	; 0x801b3f <_ser_handle>
    51c8:	f0 91 40 1b 	lds	r31, 0x1B40	; 0x801b40 <_ser_handle+0x1>
    51cc:	30 97       	sbiw	r30, 0x00	; 0
    51ce:	b9 f0       	breq	.+46     	; 0x51fe <__vector_26+0x56>
    51d0:	02 80       	ldd	r0, Z+2	; 0x02
    51d2:	f3 81       	ldd	r31, Z+3	; 0x03
    51d4:	e0 2d       	mov	r30, r0
    51d6:	93 81       	ldd	r25, Z+3	; 0x03
    51d8:	82 81       	ldd	r24, Z+2	; 0x02
    51da:	98 17       	cp	r25, r24
    51dc:	b1 f0       	breq	.+44     	; 0x520a <__vector_26+0x62>
    51de:	92 81       	ldd	r25, Z+2	; 0x02
    51e0:	85 81       	ldd	r24, Z+5	; 0x05
    51e2:	28 2f       	mov	r18, r24
    51e4:	26 95       	lsr	r18
    51e6:	29 23       	and	r18, r25
    51e8:	a0 81       	ld	r26, Z
    51ea:	b1 81       	ldd	r27, Z+1	; 0x01
    51ec:	a2 0f       	add	r26, r18
    51ee:	b1 1d       	adc	r27, r1
    51f0:	2c 91       	ld	r18, X
    51f2:	9f 5f       	subi	r25, 0xFF	; 255
    51f4:	89 23       	and	r24, r25
    51f6:	82 83       	std	Z+2, r24	; 0x02
    51f8:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    51fc:	0b c0       	rjmp	.+22     	; 0x5214 <__vector_26+0x6c>
    51fe:	e1 ec       	ldi	r30, 0xC1	; 193
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	80 81       	ld	r24, Z
    5204:	8f 7d       	andi	r24, 0xDF	; 223
    5206:	80 83       	st	Z, r24
    5208:	05 c0       	rjmp	.+10     	; 0x5214 <__vector_26+0x6c>
    520a:	e1 ec       	ldi	r30, 0xC1	; 193
    520c:	f0 e0       	ldi	r31, 0x00	; 0
    520e:	80 81       	ld	r24, Z
    5210:	8f 7d       	andi	r24, 0xDF	; 223
    5212:	80 83       	st	Z, r24
    5214:	ff 91       	pop	r31
    5216:	ef 91       	pop	r30
    5218:	bf 91       	pop	r27
    521a:	af 91       	pop	r26
    521c:	9f 91       	pop	r25
    521e:	8f 91       	pop	r24
    5220:	2f 91       	pop	r18
    5222:	0f 90       	pop	r0
    5224:	0b be       	out	0x3b, r0	; 59
    5226:	0f 90       	pop	r0
    5228:	0f be       	out	0x3f, r0	; 63
    522a:	0f 90       	pop	r0
    522c:	1f 90       	pop	r1
    522e:	18 95       	reti

00005230 <__vector_36>:
    5230:	1f 92       	push	r1
    5232:	0f 92       	push	r0
    5234:	0f b6       	in	r0, 0x3f	; 63
    5236:	0f 92       	push	r0
    5238:	11 24       	eor	r1, r1
    523a:	0b b6       	in	r0, 0x3b	; 59
    523c:	0f 92       	push	r0
    523e:	2f 93       	push	r18
    5240:	3f 93       	push	r19
    5242:	4f 93       	push	r20
    5244:	5f 93       	push	r21
    5246:	6f 93       	push	r22
    5248:	7f 93       	push	r23
    524a:	8f 93       	push	r24
    524c:	9f 93       	push	r25
    524e:	af 93       	push	r26
    5250:	bf 93       	push	r27
    5252:	cf 93       	push	r28
    5254:	df 93       	push	r29
    5256:	ef 93       	push	r30
    5258:	ff 93       	push	r31
    525a:	a0 91 41 1b 	lds	r26, 0x1B41	; 0x801b41 <_ser_handle+0x2>
    525e:	b0 91 42 1b 	lds	r27, 0x1B42	; 0x801b42 <_ser_handle+0x3>
    5262:	10 97       	sbiw	r26, 0x00	; 0
    5264:	11 f1       	breq	.+68     	; 0x52aa <__vector_36+0x7a>
    5266:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    526a:	14 96       	adiw	r26, 0x04	; 4
    526c:	ed 91       	ld	r30, X+
    526e:	fc 91       	ld	r31, X
    5270:	15 97       	sbiw	r26, 0x05	; 5
    5272:	93 81       	ldd	r25, Z+3	; 0x03
    5274:	82 81       	ldd	r24, Z+2	; 0x02
    5276:	25 81       	ldd	r18, Z+5	; 0x05
    5278:	98 1b       	sub	r25, r24
    527a:	92 23       	and	r25, r18
    527c:	84 81       	ldd	r24, Z+4	; 0x04
    527e:	98 17       	cp	r25, r24
    5280:	61 f0       	breq	.+24     	; 0x529a <__vector_36+0x6a>
    5282:	83 81       	ldd	r24, Z+3	; 0x03
    5284:	26 95       	lsr	r18
    5286:	28 23       	and	r18, r24
    5288:	c0 81       	ld	r28, Z
    528a:	d1 81       	ldd	r29, Z+1	; 0x01
    528c:	c2 0f       	add	r28, r18
    528e:	d1 1d       	adc	r29, r1
    5290:	68 83       	st	Y, r22
    5292:	8f 5f       	subi	r24, 0xFF	; 255
    5294:	95 81       	ldd	r25, Z+5	; 0x05
    5296:	89 23       	and	r24, r25
    5298:	83 83       	std	Z+3, r24	; 0x03
    529a:	16 96       	adiw	r26, 0x06	; 6
    529c:	ed 91       	ld	r30, X+
    529e:	fc 91       	ld	r31, X
    52a0:	17 97       	sbiw	r26, 0x07	; 7
    52a2:	30 97       	sbiw	r30, 0x00	; 0
    52a4:	11 f0       	breq	.+4      	; 0x52aa <__vector_36+0x7a>
    52a6:	cd 01       	movw	r24, r26
    52a8:	19 95       	eicall
    52aa:	ff 91       	pop	r31
    52ac:	ef 91       	pop	r30
    52ae:	df 91       	pop	r29
    52b0:	cf 91       	pop	r28
    52b2:	bf 91       	pop	r27
    52b4:	af 91       	pop	r26
    52b6:	9f 91       	pop	r25
    52b8:	8f 91       	pop	r24
    52ba:	7f 91       	pop	r23
    52bc:	6f 91       	pop	r22
    52be:	5f 91       	pop	r21
    52c0:	4f 91       	pop	r20
    52c2:	3f 91       	pop	r19
    52c4:	2f 91       	pop	r18
    52c6:	0f 90       	pop	r0
    52c8:	0b be       	out	0x3b, r0	; 59
    52ca:	0f 90       	pop	r0
    52cc:	0f be       	out	0x3f, r0	; 63
    52ce:	0f 90       	pop	r0
    52d0:	1f 90       	pop	r1
    52d2:	18 95       	reti

000052d4 <__vector_37>:
    52d4:	1f 92       	push	r1
    52d6:	0f 92       	push	r0
    52d8:	0f b6       	in	r0, 0x3f	; 63
    52da:	0f 92       	push	r0
    52dc:	11 24       	eor	r1, r1
    52de:	0b b6       	in	r0, 0x3b	; 59
    52e0:	0f 92       	push	r0
    52e2:	2f 93       	push	r18
    52e4:	8f 93       	push	r24
    52e6:	9f 93       	push	r25
    52e8:	af 93       	push	r26
    52ea:	bf 93       	push	r27
    52ec:	ef 93       	push	r30
    52ee:	ff 93       	push	r31
    52f0:	e0 91 41 1b 	lds	r30, 0x1B41	; 0x801b41 <_ser_handle+0x2>
    52f4:	f0 91 42 1b 	lds	r31, 0x1B42	; 0x801b42 <_ser_handle+0x3>
    52f8:	30 97       	sbiw	r30, 0x00	; 0
    52fa:	b9 f0       	breq	.+46     	; 0x532a <__vector_37+0x56>
    52fc:	02 80       	ldd	r0, Z+2	; 0x02
    52fe:	f3 81       	ldd	r31, Z+3	; 0x03
    5300:	e0 2d       	mov	r30, r0
    5302:	93 81       	ldd	r25, Z+3	; 0x03
    5304:	82 81       	ldd	r24, Z+2	; 0x02
    5306:	98 17       	cp	r25, r24
    5308:	b1 f0       	breq	.+44     	; 0x5336 <__vector_37+0x62>
    530a:	92 81       	ldd	r25, Z+2	; 0x02
    530c:	85 81       	ldd	r24, Z+5	; 0x05
    530e:	28 2f       	mov	r18, r24
    5310:	26 95       	lsr	r18
    5312:	29 23       	and	r18, r25
    5314:	a0 81       	ld	r26, Z
    5316:	b1 81       	ldd	r27, Z+1	; 0x01
    5318:	a2 0f       	add	r26, r18
    531a:	b1 1d       	adc	r27, r1
    531c:	2c 91       	ld	r18, X
    531e:	9f 5f       	subi	r25, 0xFF	; 255
    5320:	89 23       	and	r24, r25
    5322:	82 83       	std	Z+2, r24	; 0x02
    5324:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5328:	0b c0       	rjmp	.+22     	; 0x5340 <__vector_37+0x6c>
    532a:	e9 ec       	ldi	r30, 0xC9	; 201
    532c:	f0 e0       	ldi	r31, 0x00	; 0
    532e:	80 81       	ld	r24, Z
    5330:	8f 7d       	andi	r24, 0xDF	; 223
    5332:	80 83       	st	Z, r24
    5334:	05 c0       	rjmp	.+10     	; 0x5340 <__vector_37+0x6c>
    5336:	e9 ec       	ldi	r30, 0xC9	; 201
    5338:	f0 e0       	ldi	r31, 0x00	; 0
    533a:	80 81       	ld	r24, Z
    533c:	8f 7d       	andi	r24, 0xDF	; 223
    533e:	80 83       	st	Z, r24
    5340:	ff 91       	pop	r31
    5342:	ef 91       	pop	r30
    5344:	bf 91       	pop	r27
    5346:	af 91       	pop	r26
    5348:	9f 91       	pop	r25
    534a:	8f 91       	pop	r24
    534c:	2f 91       	pop	r18
    534e:	0f 90       	pop	r0
    5350:	0b be       	out	0x3b, r0	; 59
    5352:	0f 90       	pop	r0
    5354:	0f be       	out	0x3f, r0	; 63
    5356:	0f 90       	pop	r0
    5358:	1f 90       	pop	r1
    535a:	18 95       	reti

0000535c <__vector_51>:
    535c:	1f 92       	push	r1
    535e:	0f 92       	push	r0
    5360:	0f b6       	in	r0, 0x3f	; 63
    5362:	0f 92       	push	r0
    5364:	11 24       	eor	r1, r1
    5366:	0b b6       	in	r0, 0x3b	; 59
    5368:	0f 92       	push	r0
    536a:	2f 93       	push	r18
    536c:	3f 93       	push	r19
    536e:	4f 93       	push	r20
    5370:	5f 93       	push	r21
    5372:	6f 93       	push	r22
    5374:	7f 93       	push	r23
    5376:	8f 93       	push	r24
    5378:	9f 93       	push	r25
    537a:	af 93       	push	r26
    537c:	bf 93       	push	r27
    537e:	cf 93       	push	r28
    5380:	df 93       	push	r29
    5382:	ef 93       	push	r30
    5384:	ff 93       	push	r31
    5386:	a0 91 43 1b 	lds	r26, 0x1B43	; 0x801b43 <_ser_handle+0x4>
    538a:	b0 91 44 1b 	lds	r27, 0x1B44	; 0x801b44 <_ser_handle+0x5>
    538e:	10 97       	sbiw	r26, 0x00	; 0
    5390:	11 f1       	breq	.+68     	; 0x53d6 <__vector_51+0x7a>
    5392:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5396:	14 96       	adiw	r26, 0x04	; 4
    5398:	ed 91       	ld	r30, X+
    539a:	fc 91       	ld	r31, X
    539c:	15 97       	sbiw	r26, 0x05	; 5
    539e:	93 81       	ldd	r25, Z+3	; 0x03
    53a0:	82 81       	ldd	r24, Z+2	; 0x02
    53a2:	25 81       	ldd	r18, Z+5	; 0x05
    53a4:	98 1b       	sub	r25, r24
    53a6:	92 23       	and	r25, r18
    53a8:	84 81       	ldd	r24, Z+4	; 0x04
    53aa:	98 17       	cp	r25, r24
    53ac:	61 f0       	breq	.+24     	; 0x53c6 <__vector_51+0x6a>
    53ae:	83 81       	ldd	r24, Z+3	; 0x03
    53b0:	26 95       	lsr	r18
    53b2:	28 23       	and	r18, r24
    53b4:	c0 81       	ld	r28, Z
    53b6:	d1 81       	ldd	r29, Z+1	; 0x01
    53b8:	c2 0f       	add	r28, r18
    53ba:	d1 1d       	adc	r29, r1
    53bc:	68 83       	st	Y, r22
    53be:	8f 5f       	subi	r24, 0xFF	; 255
    53c0:	95 81       	ldd	r25, Z+5	; 0x05
    53c2:	89 23       	and	r24, r25
    53c4:	83 83       	std	Z+3, r24	; 0x03
    53c6:	16 96       	adiw	r26, 0x06	; 6
    53c8:	ed 91       	ld	r30, X+
    53ca:	fc 91       	ld	r31, X
    53cc:	17 97       	sbiw	r26, 0x07	; 7
    53ce:	30 97       	sbiw	r30, 0x00	; 0
    53d0:	11 f0       	breq	.+4      	; 0x53d6 <__vector_51+0x7a>
    53d2:	cd 01       	movw	r24, r26
    53d4:	19 95       	eicall
    53d6:	ff 91       	pop	r31
    53d8:	ef 91       	pop	r30
    53da:	df 91       	pop	r29
    53dc:	cf 91       	pop	r28
    53de:	bf 91       	pop	r27
    53e0:	af 91       	pop	r26
    53e2:	9f 91       	pop	r25
    53e4:	8f 91       	pop	r24
    53e6:	7f 91       	pop	r23
    53e8:	6f 91       	pop	r22
    53ea:	5f 91       	pop	r21
    53ec:	4f 91       	pop	r20
    53ee:	3f 91       	pop	r19
    53f0:	2f 91       	pop	r18
    53f2:	0f 90       	pop	r0
    53f4:	0b be       	out	0x3b, r0	; 59
    53f6:	0f 90       	pop	r0
    53f8:	0f be       	out	0x3f, r0	; 63
    53fa:	0f 90       	pop	r0
    53fc:	1f 90       	pop	r1
    53fe:	18 95       	reti

00005400 <__vector_52>:
    5400:	1f 92       	push	r1
    5402:	0f 92       	push	r0
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	0f 92       	push	r0
    5408:	11 24       	eor	r1, r1
    540a:	0b b6       	in	r0, 0x3b	; 59
    540c:	0f 92       	push	r0
    540e:	2f 93       	push	r18
    5410:	8f 93       	push	r24
    5412:	9f 93       	push	r25
    5414:	af 93       	push	r26
    5416:	bf 93       	push	r27
    5418:	ef 93       	push	r30
    541a:	ff 93       	push	r31
    541c:	e0 91 43 1b 	lds	r30, 0x1B43	; 0x801b43 <_ser_handle+0x4>
    5420:	f0 91 44 1b 	lds	r31, 0x1B44	; 0x801b44 <_ser_handle+0x5>
    5424:	30 97       	sbiw	r30, 0x00	; 0
    5426:	b9 f0       	breq	.+46     	; 0x5456 <__vector_52+0x56>
    5428:	02 80       	ldd	r0, Z+2	; 0x02
    542a:	f3 81       	ldd	r31, Z+3	; 0x03
    542c:	e0 2d       	mov	r30, r0
    542e:	93 81       	ldd	r25, Z+3	; 0x03
    5430:	82 81       	ldd	r24, Z+2	; 0x02
    5432:	98 17       	cp	r25, r24
    5434:	b1 f0       	breq	.+44     	; 0x5462 <__vector_52+0x62>
    5436:	92 81       	ldd	r25, Z+2	; 0x02
    5438:	85 81       	ldd	r24, Z+5	; 0x05
    543a:	28 2f       	mov	r18, r24
    543c:	26 95       	lsr	r18
    543e:	29 23       	and	r18, r25
    5440:	a0 81       	ld	r26, Z
    5442:	b1 81       	ldd	r27, Z+1	; 0x01
    5444:	a2 0f       	add	r26, r18
    5446:	b1 1d       	adc	r27, r1
    5448:	2c 91       	ld	r18, X
    544a:	9f 5f       	subi	r25, 0xFF	; 255
    544c:	89 23       	and	r24, r25
    544e:	82 83       	std	Z+2, r24	; 0x02
    5450:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5454:	0b c0       	rjmp	.+22     	; 0x546c <__vector_52+0x6c>
    5456:	e1 ed       	ldi	r30, 0xD1	; 209
    5458:	f0 e0       	ldi	r31, 0x00	; 0
    545a:	80 81       	ld	r24, Z
    545c:	8f 7d       	andi	r24, 0xDF	; 223
    545e:	80 83       	st	Z, r24
    5460:	05 c0       	rjmp	.+10     	; 0x546c <__vector_52+0x6c>
    5462:	e1 ed       	ldi	r30, 0xD1	; 209
    5464:	f0 e0       	ldi	r31, 0x00	; 0
    5466:	80 81       	ld	r24, Z
    5468:	8f 7d       	andi	r24, 0xDF	; 223
    546a:	80 83       	st	Z, r24
    546c:	ff 91       	pop	r31
    546e:	ef 91       	pop	r30
    5470:	bf 91       	pop	r27
    5472:	af 91       	pop	r26
    5474:	9f 91       	pop	r25
    5476:	8f 91       	pop	r24
    5478:	2f 91       	pop	r18
    547a:	0f 90       	pop	r0
    547c:	0b be       	out	0x3b, r0	; 59
    547e:	0f 90       	pop	r0
    5480:	0f be       	out	0x3f, r0	; 63
    5482:	0f 90       	pop	r0
    5484:	1f 90       	pop	r1
    5486:	18 95       	reti

00005488 <__vector_54>:
    5488:	1f 92       	push	r1
    548a:	0f 92       	push	r0
    548c:	0f b6       	in	r0, 0x3f	; 63
    548e:	0f 92       	push	r0
    5490:	11 24       	eor	r1, r1
    5492:	0b b6       	in	r0, 0x3b	; 59
    5494:	0f 92       	push	r0
    5496:	2f 93       	push	r18
    5498:	3f 93       	push	r19
    549a:	4f 93       	push	r20
    549c:	5f 93       	push	r21
    549e:	6f 93       	push	r22
    54a0:	7f 93       	push	r23
    54a2:	8f 93       	push	r24
    54a4:	9f 93       	push	r25
    54a6:	af 93       	push	r26
    54a8:	bf 93       	push	r27
    54aa:	cf 93       	push	r28
    54ac:	df 93       	push	r29
    54ae:	ef 93       	push	r30
    54b0:	ff 93       	push	r31
    54b2:	a0 91 45 1b 	lds	r26, 0x1B45	; 0x801b45 <_ser_handle+0x6>
    54b6:	b0 91 46 1b 	lds	r27, 0x1B46	; 0x801b46 <_ser_handle+0x7>
    54ba:	10 97       	sbiw	r26, 0x00	; 0
    54bc:	11 f1       	breq	.+68     	; 0x5502 <__vector_54+0x7a>
    54be:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    54c2:	14 96       	adiw	r26, 0x04	; 4
    54c4:	ed 91       	ld	r30, X+
    54c6:	fc 91       	ld	r31, X
    54c8:	15 97       	sbiw	r26, 0x05	; 5
    54ca:	93 81       	ldd	r25, Z+3	; 0x03
    54cc:	82 81       	ldd	r24, Z+2	; 0x02
    54ce:	25 81       	ldd	r18, Z+5	; 0x05
    54d0:	98 1b       	sub	r25, r24
    54d2:	92 23       	and	r25, r18
    54d4:	84 81       	ldd	r24, Z+4	; 0x04
    54d6:	98 17       	cp	r25, r24
    54d8:	61 f0       	breq	.+24     	; 0x54f2 <__vector_54+0x6a>
    54da:	83 81       	ldd	r24, Z+3	; 0x03
    54dc:	26 95       	lsr	r18
    54de:	28 23       	and	r18, r24
    54e0:	c0 81       	ld	r28, Z
    54e2:	d1 81       	ldd	r29, Z+1	; 0x01
    54e4:	c2 0f       	add	r28, r18
    54e6:	d1 1d       	adc	r29, r1
    54e8:	68 83       	st	Y, r22
    54ea:	8f 5f       	subi	r24, 0xFF	; 255
    54ec:	95 81       	ldd	r25, Z+5	; 0x05
    54ee:	89 23       	and	r24, r25
    54f0:	83 83       	std	Z+3, r24	; 0x03
    54f2:	16 96       	adiw	r26, 0x06	; 6
    54f4:	ed 91       	ld	r30, X+
    54f6:	fc 91       	ld	r31, X
    54f8:	17 97       	sbiw	r26, 0x07	; 7
    54fa:	30 97       	sbiw	r30, 0x00	; 0
    54fc:	11 f0       	breq	.+4      	; 0x5502 <__vector_54+0x7a>
    54fe:	cd 01       	movw	r24, r26
    5500:	19 95       	eicall
    5502:	ff 91       	pop	r31
    5504:	ef 91       	pop	r30
    5506:	df 91       	pop	r29
    5508:	cf 91       	pop	r28
    550a:	bf 91       	pop	r27
    550c:	af 91       	pop	r26
    550e:	9f 91       	pop	r25
    5510:	8f 91       	pop	r24
    5512:	7f 91       	pop	r23
    5514:	6f 91       	pop	r22
    5516:	5f 91       	pop	r21
    5518:	4f 91       	pop	r20
    551a:	3f 91       	pop	r19
    551c:	2f 91       	pop	r18
    551e:	0f 90       	pop	r0
    5520:	0b be       	out	0x3b, r0	; 59
    5522:	0f 90       	pop	r0
    5524:	0f be       	out	0x3f, r0	; 63
    5526:	0f 90       	pop	r0
    5528:	1f 90       	pop	r1
    552a:	18 95       	reti

0000552c <__vector_55>:
    552c:	1f 92       	push	r1
    552e:	0f 92       	push	r0
    5530:	0f b6       	in	r0, 0x3f	; 63
    5532:	0f 92       	push	r0
    5534:	11 24       	eor	r1, r1
    5536:	0b b6       	in	r0, 0x3b	; 59
    5538:	0f 92       	push	r0
    553a:	2f 93       	push	r18
    553c:	8f 93       	push	r24
    553e:	9f 93       	push	r25
    5540:	af 93       	push	r26
    5542:	bf 93       	push	r27
    5544:	ef 93       	push	r30
    5546:	ff 93       	push	r31
    5548:	e0 91 45 1b 	lds	r30, 0x1B45	; 0x801b45 <_ser_handle+0x6>
    554c:	f0 91 46 1b 	lds	r31, 0x1B46	; 0x801b46 <_ser_handle+0x7>
    5550:	30 97       	sbiw	r30, 0x00	; 0
    5552:	b9 f0       	breq	.+46     	; 0x5582 <__vector_55+0x56>
    5554:	02 80       	ldd	r0, Z+2	; 0x02
    5556:	f3 81       	ldd	r31, Z+3	; 0x03
    5558:	e0 2d       	mov	r30, r0
    555a:	93 81       	ldd	r25, Z+3	; 0x03
    555c:	82 81       	ldd	r24, Z+2	; 0x02
    555e:	98 17       	cp	r25, r24
    5560:	b1 f0       	breq	.+44     	; 0x558e <__vector_55+0x62>
    5562:	92 81       	ldd	r25, Z+2	; 0x02
    5564:	85 81       	ldd	r24, Z+5	; 0x05
    5566:	28 2f       	mov	r18, r24
    5568:	26 95       	lsr	r18
    556a:	29 23       	and	r18, r25
    556c:	a0 81       	ld	r26, Z
    556e:	b1 81       	ldd	r27, Z+1	; 0x01
    5570:	a2 0f       	add	r26, r18
    5572:	b1 1d       	adc	r27, r1
    5574:	2c 91       	ld	r18, X
    5576:	9f 5f       	subi	r25, 0xFF	; 255
    5578:	89 23       	and	r24, r25
    557a:	82 83       	std	Z+2, r24	; 0x02
    557c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5580:	0b c0       	rjmp	.+22     	; 0x5598 <__vector_55+0x6c>
    5582:	e1 e3       	ldi	r30, 0x31	; 49
    5584:	f1 e0       	ldi	r31, 0x01	; 1
    5586:	80 81       	ld	r24, Z
    5588:	8f 7d       	andi	r24, 0xDF	; 223
    558a:	80 83       	st	Z, r24
    558c:	05 c0       	rjmp	.+10     	; 0x5598 <__vector_55+0x6c>
    558e:	e1 e3       	ldi	r30, 0x31	; 49
    5590:	f1 e0       	ldi	r31, 0x01	; 1
    5592:	80 81       	ld	r24, Z
    5594:	8f 7d       	andi	r24, 0xDF	; 223
    5596:	80 83       	st	Z, r24
    5598:	ff 91       	pop	r31
    559a:	ef 91       	pop	r30
    559c:	bf 91       	pop	r27
    559e:	af 91       	pop	r26
    55a0:	9f 91       	pop	r25
    55a2:	8f 91       	pop	r24
    55a4:	2f 91       	pop	r18
    55a6:	0f 90       	pop	r0
    55a8:	0b be       	out	0x3b, r0	; 59
    55aa:	0f 90       	pop	r0
    55ac:	0f be       	out	0x3f, r0	; 63
    55ae:	0f 90       	pop	r0
    55b0:	1f 90       	pop	r1
    55b2:	18 95       	reti

000055b4 <usart_getchar>:
    55b4:	cf 93       	push	r28
    55b6:	df 93       	push	r29
    55b8:	1f 92       	push	r1
    55ba:	cd b7       	in	r28, 0x3d	; 61
    55bc:	de b7       	in	r29, 0x3e	; 62
    55be:	be 01       	movw	r22, r28
    55c0:	6f 5f       	subi	r22, 0xFF	; 255
    55c2:	7f 4f       	sbci	r23, 0xFF	; 255
    55c4:	80 91 47 1b 	lds	r24, 0x1B47	; 0x801b47 <_com_serial_instance>
    55c8:	90 91 48 1b 	lds	r25, 0x1B48	; 0x801b48 <_com_serial_instance+0x1>
    55cc:	7b dd       	rcall	.-1290   	; 0x50c4 <serial_getByte>
    55ce:	81 11       	cpse	r24, r1
    55d0:	f6 cf       	rjmp	.-20     	; 0x55be <usart_getchar+0xa>
    55d2:	89 81       	ldd	r24, Y+1	; 0x01
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	0f 90       	pop	r0
    55d8:	df 91       	pop	r29
    55da:	cf 91       	pop	r28
    55dc:	08 95       	ret

000055de <usart_putchar>:
    55de:	68 2f       	mov	r22, r24
    55e0:	80 91 47 1b 	lds	r24, 0x1B47	; 0x801b47 <_com_serial_instance>
    55e4:	90 91 48 1b 	lds	r25, 0x1B48	; 0x801b48 <_com_serial_instance+0x1>
    55e8:	ed dc       	rcall	.-1574   	; 0x4fc4 <serial_sendByte>
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	08 95       	ret

000055f0 <stdio_initialise>:
    55f0:	8f 92       	push	r8
    55f2:	9f 92       	push	r9
    55f4:	af 92       	push	r10
    55f6:	cf 92       	push	r12
    55f8:	ef 92       	push	r14
    55fa:	0f 93       	push	r16
    55fc:	81 2c       	mov	r8, r1
    55fe:	91 2c       	mov	r9, r1
    5600:	68 94       	set
    5602:	aa 24       	eor	r10, r10
    5604:	a7 f8       	bld	r10, 7
    5606:	68 94       	set
    5608:	cc 24       	eor	r12, r12
    560a:	c7 f8       	bld	r12, 7
    560c:	e1 2c       	mov	r14, r1
    560e:	00 e0       	ldi	r16, 0x00	; 0
    5610:	23 e0       	ldi	r18, 0x03	; 3
    5612:	40 e0       	ldi	r20, 0x00	; 0
    5614:	51 ee       	ldi	r21, 0xE1	; 225
    5616:	60 e0       	ldi	r22, 0x00	; 0
    5618:	70 e0       	ldi	r23, 0x00	; 0
    561a:	2e dc       	rcall	.-1956   	; 0x4e78 <serial_create>
    561c:	90 93 48 1b 	sts	0x1B48, r25	; 0x801b48 <_com_serial_instance+0x1>
    5620:	80 93 47 1b 	sts	0x1B47, r24	; 0x801b47 <_com_serial_instance>
    5624:	ee e7       	ldi	r30, 0x7E	; 126
    5626:	fb e1       	ldi	r31, 0x1B	; 27
    5628:	83 e1       	ldi	r24, 0x13	; 19
    562a:	92 e0       	ldi	r25, 0x02	; 2
    562c:	91 83       	std	Z+1, r25	; 0x01
    562e:	80 83       	st	Z, r24
    5630:	93 83       	std	Z+3, r25	; 0x03
    5632:	82 83       	std	Z+2, r24	; 0x02
    5634:	0f 91       	pop	r16
    5636:	ef 90       	pop	r14
    5638:	cf 90       	pop	r12
    563a:	af 90       	pop	r10
    563c:	9f 90       	pop	r9
    563e:	8f 90       	pop	r8
    5640:	08 95       	ret

00005642 <_turn_off>:
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	fc 01       	movw	r30, r24
    5646:	ee 0f       	add	r30, r30
    5648:	ff 1f       	adc	r31, r31
    564a:	e8 0f       	add	r30, r24
    564c:	f9 1f       	adc	r31, r25
    564e:	ee 0f       	add	r30, r30
    5650:	ff 1f       	adc	r31, r31
    5652:	e7 5b       	subi	r30, 0xB7	; 183
    5654:	f4 4e       	sbci	r31, 0xE4	; 228
    5656:	23 81       	ldd	r18, Z+3	; 0x03
    5658:	21 11       	cpse	r18, r1
    565a:	1f c0       	rjmp	.+62     	; 0x569a <_turn_off+0x58>
    565c:	9c 01       	movw	r18, r24
    565e:	22 0f       	add	r18, r18
    5660:	33 1f       	adc	r19, r19
    5662:	f9 01       	movw	r30, r18
    5664:	e8 0f       	add	r30, r24
    5666:	f9 1f       	adc	r31, r25
    5668:	ee 0f       	add	r30, r30
    566a:	ff 1f       	adc	r31, r31
    566c:	e7 5b       	subi	r30, 0xB7	; 183
    566e:	f4 4e       	sbci	r31, 0xE4	; 228
    5670:	a0 81       	ld	r26, Z
    5672:	b1 81       	ldd	r27, Z+1	; 0x01
    5674:	4c 91       	ld	r20, X
    5676:	f9 01       	movw	r30, r18
    5678:	e8 0f       	add	r30, r24
    567a:	f9 1f       	adc	r31, r25
    567c:	ee 0f       	add	r30, r30
    567e:	ff 1f       	adc	r31, r31
    5680:	e7 5b       	subi	r30, 0xB7	; 183
    5682:	f4 4e       	sbci	r31, 0xE4	; 228
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	90 e0       	ldi	r25, 0x00	; 0
    5688:	02 80       	ldd	r0, Z+2	; 0x02
    568a:	02 c0       	rjmp	.+4      	; 0x5690 <_turn_off+0x4e>
    568c:	88 0f       	add	r24, r24
    568e:	99 1f       	adc	r25, r25
    5690:	0a 94       	dec	r0
    5692:	e2 f7       	brpl	.-8      	; 0x568c <_turn_off+0x4a>
    5694:	84 2b       	or	r24, r20
    5696:	8c 93       	st	X, r24
    5698:	08 95       	ret
    569a:	fc 01       	movw	r30, r24
    569c:	ee 0f       	add	r30, r30
    569e:	ff 1f       	adc	r31, r31
    56a0:	df 01       	movw	r26, r30
    56a2:	a8 0f       	add	r26, r24
    56a4:	b9 1f       	adc	r27, r25
    56a6:	aa 0f       	add	r26, r26
    56a8:	bb 1f       	adc	r27, r27
    56aa:	a7 5b       	subi	r26, 0xB7	; 183
    56ac:	b4 4e       	sbci	r27, 0xE4	; 228
    56ae:	0d 90       	ld	r0, X+
    56b0:	bc 91       	ld	r27, X
    56b2:	a0 2d       	mov	r26, r0
    56b4:	2c 91       	ld	r18, X
    56b6:	e8 0f       	add	r30, r24
    56b8:	f9 1f       	adc	r31, r25
    56ba:	ee 0f       	add	r30, r30
    56bc:	ff 1f       	adc	r31, r31
    56be:	e7 5b       	subi	r30, 0xB7	; 183
    56c0:	f4 4e       	sbci	r31, 0xE4	; 228
    56c2:	81 e0       	ldi	r24, 0x01	; 1
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	02 80       	ldd	r0, Z+2	; 0x02
    56c8:	02 c0       	rjmp	.+4      	; 0x56ce <_turn_off+0x8c>
    56ca:	88 0f       	add	r24, r24
    56cc:	99 1f       	adc	r25, r25
    56ce:	0a 94       	dec	r0
    56d0:	e2 f7       	brpl	.-8      	; 0x56ca <_turn_off+0x88>
    56d2:	80 95       	com	r24
    56d4:	82 23       	and	r24, r18
    56d6:	8c 93       	st	X, r24
    56d8:	08 95       	ret

000056da <_turn_on>:
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	fc 01       	movw	r30, r24
    56de:	ee 0f       	add	r30, r30
    56e0:	ff 1f       	adc	r31, r31
    56e2:	e8 0f       	add	r30, r24
    56e4:	f9 1f       	adc	r31, r25
    56e6:	ee 0f       	add	r30, r30
    56e8:	ff 1f       	adc	r31, r31
    56ea:	e7 5b       	subi	r30, 0xB7	; 183
    56ec:	f4 4e       	sbci	r31, 0xE4	; 228
    56ee:	23 81       	ldd	r18, Z+3	; 0x03
    56f0:	21 11       	cpse	r18, r1
    56f2:	20 c0       	rjmp	.+64     	; 0x5734 <_turn_on+0x5a>
    56f4:	9c 01       	movw	r18, r24
    56f6:	22 0f       	add	r18, r18
    56f8:	33 1f       	adc	r19, r19
    56fa:	f9 01       	movw	r30, r18
    56fc:	e8 0f       	add	r30, r24
    56fe:	f9 1f       	adc	r31, r25
    5700:	ee 0f       	add	r30, r30
    5702:	ff 1f       	adc	r31, r31
    5704:	e7 5b       	subi	r30, 0xB7	; 183
    5706:	f4 4e       	sbci	r31, 0xE4	; 228
    5708:	a0 81       	ld	r26, Z
    570a:	b1 81       	ldd	r27, Z+1	; 0x01
    570c:	4c 91       	ld	r20, X
    570e:	f9 01       	movw	r30, r18
    5710:	e8 0f       	add	r30, r24
    5712:	f9 1f       	adc	r31, r25
    5714:	ee 0f       	add	r30, r30
    5716:	ff 1f       	adc	r31, r31
    5718:	e7 5b       	subi	r30, 0xB7	; 183
    571a:	f4 4e       	sbci	r31, 0xE4	; 228
    571c:	81 e0       	ldi	r24, 0x01	; 1
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	02 80       	ldd	r0, Z+2	; 0x02
    5722:	02 c0       	rjmp	.+4      	; 0x5728 <_turn_on+0x4e>
    5724:	88 0f       	add	r24, r24
    5726:	99 1f       	adc	r25, r25
    5728:	0a 94       	dec	r0
    572a:	e2 f7       	brpl	.-8      	; 0x5724 <_turn_on+0x4a>
    572c:	80 95       	com	r24
    572e:	84 23       	and	r24, r20
    5730:	8c 93       	st	X, r24
    5732:	08 95       	ret
    5734:	fc 01       	movw	r30, r24
    5736:	ee 0f       	add	r30, r30
    5738:	ff 1f       	adc	r31, r31
    573a:	df 01       	movw	r26, r30
    573c:	a8 0f       	add	r26, r24
    573e:	b9 1f       	adc	r27, r25
    5740:	aa 0f       	add	r26, r26
    5742:	bb 1f       	adc	r27, r27
    5744:	a7 5b       	subi	r26, 0xB7	; 183
    5746:	b4 4e       	sbci	r27, 0xE4	; 228
    5748:	0d 90       	ld	r0, X+
    574a:	bc 91       	ld	r27, X
    574c:	a0 2d       	mov	r26, r0
    574e:	2c 91       	ld	r18, X
    5750:	e8 0f       	add	r30, r24
    5752:	f9 1f       	adc	r31, r25
    5754:	ee 0f       	add	r30, r30
    5756:	ff 1f       	adc	r31, r31
    5758:	e7 5b       	subi	r30, 0xB7	; 183
    575a:	f4 4e       	sbci	r31, 0xE4	; 228
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	02 80       	ldd	r0, Z+2	; 0x02
    5762:	02 c0       	rjmp	.+4      	; 0x5768 <_turn_on+0x8e>
    5764:	88 0f       	add	r24, r24
    5766:	99 1f       	adc	r25, r25
    5768:	0a 94       	dec	r0
    576a:	e2 f7       	brpl	.-8      	; 0x5764 <_turn_on+0x8a>
    576c:	82 2b       	or	r24, r18
    576e:	8c 93       	st	X, r24
    5770:	08 95       	ret

00005772 <_hal_led_task>:
    5772:	cc 24       	eor	r12, r12
    5774:	c3 94       	inc	r12
    5776:	d1 2c       	mov	r13, r1
    5778:	68 94       	set
    577a:	bb 24       	eor	r11, r11
    577c:	b2 f8       	bld	r11, 2
    577e:	c9 e4       	ldi	r28, 0x49	; 73
    5780:	db e1       	ldi	r29, 0x1B	; 27
    5782:	10 e0       	ldi	r17, 0x00	; 0
    5784:	8c 81       	ldd	r24, Y+4	; 0x04
    5786:	81 30       	cpi	r24, 0x01	; 1
    5788:	81 f0       	breq	.+32     	; 0x57aa <_hal_led_task+0x38>
    578a:	18 f1       	brcs	.+70     	; 0x57d2 <_hal_led_task+0x60>
    578c:	82 30       	cpi	r24, 0x02	; 2
    578e:	61 f5       	brne	.+88     	; 0x57e8 <_hal_led_task+0x76>
    5790:	e8 81       	ld	r30, Y
    5792:	f9 81       	ldd	r31, Y+1	; 0x01
    5794:	20 81       	ld	r18, Z
    5796:	c6 01       	movw	r24, r12
    5798:	0a 80       	ldd	r0, Y+2	; 0x02
    579a:	02 c0       	rjmp	.+4      	; 0x57a0 <_hal_led_task+0x2e>
    579c:	88 0f       	add	r24, r24
    579e:	99 1f       	adc	r25, r25
    57a0:	0a 94       	dec	r0
    57a2:	e2 f7       	brpl	.-8      	; 0x579c <_hal_led_task+0x2a>
    57a4:	82 27       	eor	r24, r18
    57a6:	80 83       	st	Z, r24
    57a8:	1f c0       	rjmp	.+62     	; 0x57e8 <_hal_led_task+0x76>
    57aa:	8d 81       	ldd	r24, Y+5	; 0x05
    57ac:	8f 5f       	subi	r24, 0xFF	; 255
    57ae:	86 30       	cpi	r24, 0x06	; 6
    57b0:	10 f4       	brcc	.+4      	; 0x57b6 <_hal_led_task+0x44>
    57b2:	8d 83       	std	Y+5, r24	; 0x05
    57b4:	19 c0       	rjmp	.+50     	; 0x57e8 <_hal_led_task+0x76>
    57b6:	1d 82       	std	Y+5, r1	; 0x05
    57b8:	e8 81       	ld	r30, Y
    57ba:	f9 81       	ldd	r31, Y+1	; 0x01
    57bc:	20 81       	ld	r18, Z
    57be:	c6 01       	movw	r24, r12
    57c0:	0a 80       	ldd	r0, Y+2	; 0x02
    57c2:	02 c0       	rjmp	.+4      	; 0x57c8 <_hal_led_task+0x56>
    57c4:	88 0f       	add	r24, r24
    57c6:	99 1f       	adc	r25, r25
    57c8:	0a 94       	dec	r0
    57ca:	e2 f7       	brpl	.-8      	; 0x57c4 <_hal_led_task+0x52>
    57cc:	82 27       	eor	r24, r18
    57ce:	80 83       	st	Z, r24
    57d0:	0b c0       	rjmp	.+22     	; 0x57e8 <_hal_led_task+0x76>
    57d2:	0d 81       	ldd	r16, Y+5	; 0x05
    57d4:	00 23       	and	r16, r16
    57d6:	29 f0       	breq	.+10     	; 0x57e2 <_hal_led_task+0x70>
    57d8:	81 2f       	mov	r24, r17
    57da:	7f df       	rcall	.-258    	; 0x56da <_turn_on>
    57dc:	01 50       	subi	r16, 0x01	; 1
    57de:	0d 83       	std	Y+5, r16	; 0x05
    57e0:	03 c0       	rjmp	.+6      	; 0x57e8 <_hal_led_task+0x76>
    57e2:	bc 82       	std	Y+4, r11	; 0x04
    57e4:	81 2f       	mov	r24, r17
    57e6:	2d df       	rcall	.-422    	; 0x5642 <_turn_off>
    57e8:	1f 5f       	subi	r17, 0xFF	; 255
    57ea:	26 96       	adiw	r28, 0x06	; 6
    57ec:	14 30       	cpi	r17, 0x04	; 4
    57ee:	51 f6       	brne	.-108    	; 0x5784 <_hal_led_task+0x12>
    57f0:	6c e0       	ldi	r22, 0x0C	; 12
    57f2:	70 e0       	ldi	r23, 0x00	; 0
    57f4:	80 e0       	ldi	r24, 0x00	; 0
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	0e 94 59 13 	call	0x26b2	; 0x26b2 <vTaskDelay>
    57fc:	c0 cf       	rjmp	.-128    	; 0x577e <_hal_led_task+0xc>

000057fe <status_leds_initialise>:
    57fe:	ef 92       	push	r14
    5800:	ff 92       	push	r15
    5802:	0f 93       	push	r16
    5804:	1f 93       	push	r17
    5806:	cf 93       	push	r28
    5808:	df 93       	push	r29
    580a:	08 2f       	mov	r16, r24
    580c:	80 e4       	ldi	r24, 0x40	; 64
    580e:	87 b9       	out	0x07, r24	; 7
    5810:	c9 e4       	ldi	r28, 0x49	; 73
    5812:	db e1       	ldi	r29, 0x1B	; 27
    5814:	0f 2e       	mov	r0, r31
    5816:	f8 e2       	ldi	r31, 0x28	; 40
    5818:	ef 2e       	mov	r14, r31
    581a:	f1 2c       	mov	r15, r1
    581c:	f0 2d       	mov	r31, r0
    581e:	f9 82       	std	Y+1, r15	; 0x01
    5820:	e8 82       	st	Y, r14
    5822:	86 e0       	ldi	r24, 0x06	; 6
    5824:	8a 83       	std	Y+2, r24	; 0x02
    5826:	1b 82       	std	Y+3, r1	; 0x03
    5828:	14 e0       	ldi	r17, 0x04	; 4
    582a:	1c 83       	std	Y+4, r17	; 0x04
    582c:	80 e0       	ldi	r24, 0x00	; 0
    582e:	09 df       	rcall	.-494    	; 0x5642 <_turn_off>
    5830:	80 e8       	ldi	r24, 0x80	; 128
    5832:	87 b9       	out	0x07, r24	; 7
    5834:	ff 82       	std	Y+7, r15	; 0x07
    5836:	ee 82       	std	Y+6, r14	; 0x06
    5838:	87 e0       	ldi	r24, 0x07	; 7
    583a:	88 87       	std	Y+8, r24	; 0x08
    583c:	19 86       	std	Y+9, r1	; 0x09
    583e:	1a 87       	std	Y+10, r17	; 0x0a
    5840:	81 e0       	ldi	r24, 0x01	; 1
    5842:	ff de       	rcall	.-514    	; 0x5642 <_turn_off>
    5844:	80 e2       	ldi	r24, 0x20	; 32
    5846:	83 bb       	out	0x13, r24	; 19
    5848:	84 e3       	ldi	r24, 0x34	; 52
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	9d 87       	std	Y+13, r25	; 0x0d
    584e:	8c 87       	std	Y+12, r24	; 0x0c
    5850:	85 e0       	ldi	r24, 0x05	; 5
    5852:	8e 87       	std	Y+14, r24	; 0x0e
    5854:	1f 86       	std	Y+15, r1	; 0x0f
    5856:	18 8b       	std	Y+16, r17	; 0x10
    5858:	82 e0       	ldi	r24, 0x02	; 2
    585a:	f3 de       	rcall	.-538    	; 0x5642 <_turn_off>
    585c:	80 e1       	ldi	r24, 0x10	; 16
    585e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5862:	82 e0       	ldi	r24, 0x02	; 2
    5864:	91 e0       	ldi	r25, 0x01	; 1
    5866:	9b 8b       	std	Y+19, r25	; 0x13
    5868:	8a 8b       	std	Y+18, r24	; 0x12
    586a:	1c 8b       	std	Y+20, r17	; 0x14
    586c:	1d 8a       	std	Y+21, r1	; 0x15
    586e:	1e 8b       	std	Y+22, r17	; 0x16
    5870:	83 e0       	ldi	r24, 0x03	; 3
    5872:	e7 de       	rcall	.-562    	; 0x5642 <_turn_off>
    5874:	e1 2c       	mov	r14, r1
    5876:	f1 2c       	mov	r15, r1
    5878:	20 e0       	ldi	r18, 0x00	; 0
    587a:	30 e0       	ldi	r19, 0x00	; 0
    587c:	40 ec       	ldi	r20, 0xC0	; 192
    587e:	50 e0       	ldi	r21, 0x00	; 0
    5880:	6d e5       	ldi	r22, 0x5D	; 93
    5882:	7b e0       	ldi	r23, 0x0B	; 11
    5884:	89 eb       	ldi	r24, 0xB9	; 185
    5886:	9b e2       	ldi	r25, 0x2B	; 43
    5888:	0e 94 54 10 	call	0x20a8	; 0x20a8 <xTaskCreate>
    588c:	df 91       	pop	r29
    588e:	cf 91       	pop	r28
    5890:	1f 91       	pop	r17
    5892:	0f 91       	pop	r16
    5894:	ff 90       	pop	r15
    5896:	ef 90       	pop	r14
    5898:	08 95       	ret

0000589a <status_leds_slowBlink>:
    589a:	cf 93       	push	r28
    589c:	df 93       	push	r29
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	fc 01       	movw	r30, r24
    58a2:	ee 0f       	add	r30, r30
    58a4:	ff 1f       	adc	r31, r31
    58a6:	df 01       	movw	r26, r30
    58a8:	a8 0f       	add	r26, r24
    58aa:	b9 1f       	adc	r27, r25
    58ac:	aa 0f       	add	r26, r26
    58ae:	bb 1f       	adc	r27, r27
    58b0:	a7 5b       	subi	r26, 0xB7	; 183
    58b2:	b4 4e       	sbci	r27, 0xE4	; 228
    58b4:	cd 91       	ld	r28, X+
    58b6:	dc 91       	ld	r29, X
    58b8:	11 97       	sbiw	r26, 0x01	; 1
    58ba:	48 81       	ld	r20, Y
    58bc:	21 e0       	ldi	r18, 0x01	; 1
    58be:	30 e0       	ldi	r19, 0x00	; 0
    58c0:	12 96       	adiw	r26, 0x02	; 2
    58c2:	0c 90       	ld	r0, X
    58c4:	12 97       	sbiw	r26, 0x02	; 2
    58c6:	02 c0       	rjmp	.+4      	; 0x58cc <status_leds_slowBlink+0x32>
    58c8:	22 0f       	add	r18, r18
    58ca:	33 1f       	adc	r19, r19
    58cc:	0a 94       	dec	r0
    58ce:	e2 f7       	brpl	.-8      	; 0x58c8 <status_leds_slowBlink+0x2e>
    58d0:	24 27       	eor	r18, r20
    58d2:	28 83       	st	Y, r18
    58d4:	fd 01       	movw	r30, r26
    58d6:	81 e0       	ldi	r24, 0x01	; 1
    58d8:	84 83       	std	Z+4, r24	; 0x04
    58da:	df 91       	pop	r29
    58dc:	cf 91       	pop	r28
    58de:	08 95       	ret

000058e0 <status_leds_fastBlink>:
    58e0:	cf 93       	push	r28
    58e2:	df 93       	push	r29
    58e4:	90 e0       	ldi	r25, 0x00	; 0
    58e6:	fc 01       	movw	r30, r24
    58e8:	ee 0f       	add	r30, r30
    58ea:	ff 1f       	adc	r31, r31
    58ec:	df 01       	movw	r26, r30
    58ee:	a8 0f       	add	r26, r24
    58f0:	b9 1f       	adc	r27, r25
    58f2:	aa 0f       	add	r26, r26
    58f4:	bb 1f       	adc	r27, r27
    58f6:	a7 5b       	subi	r26, 0xB7	; 183
    58f8:	b4 4e       	sbci	r27, 0xE4	; 228
    58fa:	cd 91       	ld	r28, X+
    58fc:	dc 91       	ld	r29, X
    58fe:	11 97       	sbiw	r26, 0x01	; 1
    5900:	48 81       	ld	r20, Y
    5902:	21 e0       	ldi	r18, 0x01	; 1
    5904:	30 e0       	ldi	r19, 0x00	; 0
    5906:	12 96       	adiw	r26, 0x02	; 2
    5908:	0c 90       	ld	r0, X
    590a:	12 97       	sbiw	r26, 0x02	; 2
    590c:	02 c0       	rjmp	.+4      	; 0x5912 <status_leds_fastBlink+0x32>
    590e:	22 0f       	add	r18, r18
    5910:	33 1f       	adc	r19, r19
    5912:	0a 94       	dec	r0
    5914:	e2 f7       	brpl	.-8      	; 0x590e <status_leds_fastBlink+0x2e>
    5916:	24 27       	eor	r18, r20
    5918:	28 83       	st	Y, r18
    591a:	fd 01       	movw	r30, r26
    591c:	82 e0       	ldi	r24, 0x02	; 2
    591e:	84 83       	std	Z+4, r24	; 0x04
    5920:	df 91       	pop	r29
    5922:	cf 91       	pop	r28
    5924:	08 95       	ret

00005926 <status_leds_ledOn>:
    5926:	28 2f       	mov	r18, r24
    5928:	30 e0       	ldi	r19, 0x00	; 0
    592a:	f9 01       	movw	r30, r18
    592c:	ee 0f       	add	r30, r30
    592e:	ff 1f       	adc	r31, r31
    5930:	e2 0f       	add	r30, r18
    5932:	f3 1f       	adc	r31, r19
    5934:	ee 0f       	add	r30, r30
    5936:	ff 1f       	adc	r31, r31
    5938:	e7 5b       	subi	r30, 0xB7	; 183
    593a:	f4 4e       	sbci	r31, 0xE4	; 228
    593c:	93 e0       	ldi	r25, 0x03	; 3
    593e:	94 83       	std	Z+4, r25	; 0x04
    5940:	cc ce       	rjmp	.-616    	; 0x56da <_turn_on>
    5942:	08 95       	ret

00005944 <status_leds_ledOff>:
    5944:	28 2f       	mov	r18, r24
    5946:	30 e0       	ldi	r19, 0x00	; 0
    5948:	f9 01       	movw	r30, r18
    594a:	ee 0f       	add	r30, r30
    594c:	ff 1f       	adc	r31, r31
    594e:	e2 0f       	add	r30, r18
    5950:	f3 1f       	adc	r31, r19
    5952:	ee 0f       	add	r30, r30
    5954:	ff 1f       	adc	r31, r31
    5956:	e7 5b       	subi	r30, 0xB7	; 183
    5958:	f4 4e       	sbci	r31, 0xE4	; 228
    595a:	94 e0       	ldi	r25, 0x04	; 4
    595c:	94 83       	std	Z+4, r25	; 0x04
    595e:	71 ce       	rjmp	.-798    	; 0x5642 <_turn_off>
    5960:	08 95       	ret

00005962 <status_leds_longPuls>:
    5962:	90 e0       	ldi	r25, 0x00	; 0
    5964:	fc 01       	movw	r30, r24
    5966:	ee 0f       	add	r30, r30
    5968:	ff 1f       	adc	r31, r31
    596a:	df 01       	movw	r26, r30
    596c:	a8 0f       	add	r26, r24
    596e:	b9 1f       	adc	r27, r25
    5970:	aa 0f       	add	r26, r26
    5972:	bb 1f       	adc	r27, r27
    5974:	a7 5b       	subi	r26, 0xB7	; 183
    5976:	b4 4e       	sbci	r27, 0xE4	; 228
    5978:	26 e0       	ldi	r18, 0x06	; 6
    597a:	15 96       	adiw	r26, 0x05	; 5
    597c:	2c 93       	st	X, r18
    597e:	15 97       	sbiw	r26, 0x05	; 5
    5980:	fd 01       	movw	r30, r26
    5982:	14 82       	std	Z+4, r1	; 0x04
    5984:	08 95       	ret

00005986 <status_leds_shortPuls>:
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	fc 01       	movw	r30, r24
    598a:	ee 0f       	add	r30, r30
    598c:	ff 1f       	adc	r31, r31
    598e:	df 01       	movw	r26, r30
    5990:	a8 0f       	add	r26, r24
    5992:	b9 1f       	adc	r27, r25
    5994:	aa 0f       	add	r26, r26
    5996:	bb 1f       	adc	r27, r27
    5998:	a7 5b       	subi	r26, 0xB7	; 183
    599a:	b4 4e       	sbci	r27, 0xE4	; 228
    599c:	15 96       	adiw	r26, 0x05	; 5
    599e:	1c 92       	st	X, r1
    59a0:	15 97       	sbiw	r26, 0x05	; 5
    59a2:	fd 01       	movw	r30, r26
    59a4:	14 82       	std	Z+4, r1	; 0x04
    59a6:	08 95       	ret

000059a8 <_initTwiInterface>:
    59a8:	80 91 6f 1b 	lds	r24, 0x1B6F	; 0x801b6f <_twiIsInitiated>
    59ac:	81 11       	cpse	r24, r1
    59ae:	0c c0       	rjmp	.+24     	; 0x59c8 <_initTwiInterface+0x20>
    59b0:	8c e0       	ldi	r24, 0x0C	; 12
    59b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    59b6:	8f ef       	ldi	r24, 0xFF	; 255
    59b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    59bc:	84 e0       	ldi	r24, 0x04	; 4
    59be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59c2:	81 e0       	ldi	r24, 0x01	; 1
    59c4:	80 93 6f 1b 	sts	0x1B6F, r24	; 0x801b6f <_twiIsInitiated>
    59c8:	08 95       	ret

000059ca <twiCreate>:
    59ca:	af 92       	push	r10
    59cc:	bf 92       	push	r11
    59ce:	cf 92       	push	r12
    59d0:	df 92       	push	r13
    59d2:	ef 92       	push	r14
    59d4:	ff 92       	push	r15
    59d6:	0f 93       	push	r16
    59d8:	1f 93       	push	r17
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	a8 2e       	mov	r10, r24
    59e0:	b6 2e       	mov	r11, r22
    59e2:	69 01       	movw	r12, r18
    59e4:	7a 01       	movw	r14, r20
    59e6:	84 e0       	ldi	r24, 0x04	; 4
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	71 d7       	rcall	.+3810   	; 0x68ce <malloc>
    59ec:	ec 01       	movw	r28, r24
    59ee:	89 2b       	or	r24, r25
    59f0:	61 f1       	breq	.+88     	; 0x5a4a <twiCreate+0x80>
    59f2:	a8 82       	st	Y, r10
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	b8 12       	cpse	r11, r24
    59f8:	12 c0       	rjmp	.+36     	; 0x5a1e <twiCreate+0x54>
    59fa:	c7 01       	movw	r24, r14
    59fc:	b6 01       	movw	r22, r12
    59fe:	20 ea       	ldi	r18, 0xA0	; 160
    5a00:	36 e8       	ldi	r19, 0x86	; 134
    5a02:	41 e0       	ldi	r20, 0x01	; 1
    5a04:	50 e0       	ldi	r21, 0x00	; 0
    5a06:	16 d7       	rcall	.+3628   	; 0x6834 <__udivmodsi4>
    5a08:	da 01       	movw	r26, r20
    5a0a:	c9 01       	movw	r24, r18
    5a0c:	40 97       	sbiw	r24, 0x10	; 16
    5a0e:	a1 09       	sbc	r26, r1
    5a10:	b1 09       	sbc	r27, r1
    5a12:	b6 95       	lsr	r27
    5a14:	a7 95       	ror	r26
    5a16:	97 95       	ror	r25
    5a18:	87 95       	ror	r24
    5a1a:	89 83       	std	Y+1, r24	; 0x01
    5a1c:	11 c0       	rjmp	.+34     	; 0x5a40 <twiCreate+0x76>
    5a1e:	c7 01       	movw	r24, r14
    5a20:	b6 01       	movw	r22, r12
    5a22:	20 e8       	ldi	r18, 0x80	; 128
    5a24:	3a e1       	ldi	r19, 0x1A	; 26
    5a26:	46 e0       	ldi	r20, 0x06	; 6
    5a28:	50 e0       	ldi	r21, 0x00	; 0
    5a2a:	04 d7       	rcall	.+3592   	; 0x6834 <__udivmodsi4>
    5a2c:	da 01       	movw	r26, r20
    5a2e:	c9 01       	movw	r24, r18
    5a30:	40 97       	sbiw	r24, 0x10	; 16
    5a32:	a1 09       	sbc	r26, r1
    5a34:	b1 09       	sbc	r27, r1
    5a36:	b6 95       	lsr	r27
    5a38:	a7 95       	ror	r26
    5a3a:	97 95       	ror	r25
    5a3c:	87 95       	ror	r24
    5a3e:	89 83       	std	Y+1, r24	; 0x01
    5a40:	1b 83       	std	Y+3, r17	; 0x03
    5a42:	0a 83       	std	Y+2, r16	; 0x02
    5a44:	8c 2f       	mov	r24, r28
    5a46:	9d 2f       	mov	r25, r29
    5a48:	02 c0       	rjmp	.+4      	; 0x5a4e <twiCreate+0x84>
    5a4a:	80 e0       	ldi	r24, 0x00	; 0
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	df 91       	pop	r29
    5a50:	cf 91       	pop	r28
    5a52:	1f 91       	pop	r17
    5a54:	0f 91       	pop	r16
    5a56:	ff 90       	pop	r15
    5a58:	ef 90       	pop	r14
    5a5a:	df 90       	pop	r13
    5a5c:	cf 90       	pop	r12
    5a5e:	bf 90       	pop	r11
    5a60:	af 90       	pop	r10
    5a62:	08 95       	ret

00005a64 <twiIsBusy>:
    5a64:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a68:	81 70       	andi	r24, 0x01	; 1
    5a6a:	08 95       	ret

00005a6c <twiTransmit>:
    5a6c:	ff 92       	push	r15
    5a6e:	0f 93       	push	r16
    5a70:	1f 93       	push	r17
    5a72:	cf 93       	push	r28
    5a74:	df 93       	push	r29
    5a76:	00 97       	sbiw	r24, 0x00	; 0
    5a78:	d1 f1       	breq	.+116    	; 0x5aee <twiTransmit+0x82>
    5a7a:	4a 30       	cpi	r20, 0x0A	; 10
    5a7c:	d0 f5       	brcc	.+116    	; 0x5af2 <twiTransmit+0x86>
    5a7e:	f4 2e       	mov	r15, r20
    5a80:	8b 01       	movw	r16, r22
    5a82:	ec 01       	movw	r28, r24
    5a84:	ef df       	rcall	.-34     	; 0x5a64 <twiIsBusy>
    5a86:	81 11       	cpse	r24, r1
    5a88:	36 c0       	rjmp	.+108    	; 0x5af6 <twiTransmit+0x8a>
    5a8a:	80 91 62 1b 	lds	r24, 0x1B62	; 0x801b62 <_twiCurrentHandler>
    5a8e:	90 91 63 1b 	lds	r25, 0x1B63	; 0x801b63 <_twiCurrentHandler+0x1>
    5a92:	c8 17       	cp	r28, r24
    5a94:	d9 07       	cpc	r29, r25
    5a96:	41 f0       	breq	.+16     	; 0x5aa8 <twiTransmit+0x3c>
    5a98:	87 df       	rcall	.-242    	; 0x59a8 <_initTwiInterface>
    5a9a:	89 81       	ldd	r24, Y+1	; 0x01
    5a9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5aa0:	d0 93 63 1b 	sts	0x1B63, r29	; 0x801b63 <_twiCurrentHandler+0x1>
    5aa4:	c0 93 62 1b 	sts	0x1B62, r28	; 0x801b62 <_twiCurrentHandler>
    5aa8:	81 e0       	ldi	r24, 0x01	; 1
    5aaa:	8f 0d       	add	r24, r15
    5aac:	80 93 64 1b 	sts	0x1B64, r24	; 0x801b64 <_twiMessageLen>
    5ab0:	88 81       	ld	r24, Y
    5ab2:	88 0f       	add	r24, r24
    5ab4:	80 93 65 1b 	sts	0x1B65, r24	; 0x801b65 <_twiMessageBuffer>
    5ab8:	ff 20       	and	r15, r15
    5aba:	89 f0       	breq	.+34     	; 0x5ade <twiTransmit+0x72>
    5abc:	f8 01       	movw	r30, r16
    5abe:	a6 e6       	ldi	r26, 0x66	; 102
    5ac0:	bb e1       	ldi	r27, 0x1B	; 27
    5ac2:	4f ef       	ldi	r20, 0xFF	; 255
    5ac4:	4f 0d       	add	r20, r15
    5ac6:	64 2f       	mov	r22, r20
    5ac8:	70 e0       	ldi	r23, 0x00	; 0
    5aca:	cb 01       	movw	r24, r22
    5acc:	01 96       	adiw	r24, 0x01	; 1
    5ace:	b8 01       	movw	r22, r16
    5ad0:	68 0f       	add	r22, r24
    5ad2:	79 1f       	adc	r23, r25
    5ad4:	81 91       	ld	r24, Z+
    5ad6:	8d 93       	st	X+, r24
    5ad8:	e6 17       	cp	r30, r22
    5ada:	f7 07       	cpc	r31, r23
    5adc:	d9 f7       	brne	.-10     	; 0x5ad4 <twiTransmit+0x68>
    5ade:	88 ef       	ldi	r24, 0xF8	; 248
    5ae0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5ae4:	85 ea       	ldi	r24, 0xA5	; 165
    5ae6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5aea:	84 e0       	ldi	r24, 0x04	; 4
    5aec:	05 c0       	rjmp	.+10     	; 0x5af8 <twiTransmit+0x8c>
    5aee:	86 e0       	ldi	r24, 0x06	; 6
    5af0:	03 c0       	rjmp	.+6      	; 0x5af8 <twiTransmit+0x8c>
    5af2:	87 e0       	ldi	r24, 0x07	; 7
    5af4:	01 c0       	rjmp	.+2      	; 0x5af8 <twiTransmit+0x8c>
    5af6:	82 e0       	ldi	r24, 0x02	; 2
    5af8:	df 91       	pop	r29
    5afa:	cf 91       	pop	r28
    5afc:	1f 91       	pop	r17
    5afe:	0f 91       	pop	r16
    5b00:	ff 90       	pop	r15
    5b02:	08 95       	ret

00005b04 <twiReceive>:
    5b04:	1f 93       	push	r17
    5b06:	cf 93       	push	r28
    5b08:	df 93       	push	r29
    5b0a:	00 97       	sbiw	r24, 0x00	; 0
    5b0c:	29 f1       	breq	.+74     	; 0x5b58 <twiReceive+0x54>
    5b0e:	6b 30       	cpi	r22, 0x0B	; 11
    5b10:	28 f5       	brcc	.+74     	; 0x5b5c <twiReceive+0x58>
    5b12:	16 2f       	mov	r17, r22
    5b14:	ec 01       	movw	r28, r24
    5b16:	a6 df       	rcall	.-180    	; 0x5a64 <twiIsBusy>
    5b18:	81 11       	cpse	r24, r1
    5b1a:	22 c0       	rjmp	.+68     	; 0x5b60 <twiReceive+0x5c>
    5b1c:	80 91 62 1b 	lds	r24, 0x1B62	; 0x801b62 <_twiCurrentHandler>
    5b20:	90 91 63 1b 	lds	r25, 0x1B63	; 0x801b63 <_twiCurrentHandler+0x1>
    5b24:	c8 17       	cp	r28, r24
    5b26:	d9 07       	cpc	r29, r25
    5b28:	41 f0       	breq	.+16     	; 0x5b3a <twiReceive+0x36>
    5b2a:	3e df       	rcall	.-388    	; 0x59a8 <_initTwiInterface>
    5b2c:	89 81       	ldd	r24, Y+1	; 0x01
    5b2e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5b32:	d0 93 63 1b 	sts	0x1B63, r29	; 0x801b63 <_twiCurrentHandler+0x1>
    5b36:	c0 93 62 1b 	sts	0x1B62, r28	; 0x801b62 <_twiCurrentHandler>
    5b3a:	10 93 64 1b 	sts	0x1B64, r17	; 0x801b64 <_twiMessageLen>
    5b3e:	88 81       	ld	r24, Y
    5b40:	88 0f       	add	r24, r24
    5b42:	81 60       	ori	r24, 0x01	; 1
    5b44:	80 93 65 1b 	sts	0x1B65, r24	; 0x801b65 <_twiMessageBuffer>
    5b48:	88 ef       	ldi	r24, 0xF8	; 248
    5b4a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b4e:	85 ea       	ldi	r24, 0xA5	; 165
    5b50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b54:	85 e0       	ldi	r24, 0x05	; 5
    5b56:	05 c0       	rjmp	.+10     	; 0x5b62 <twiReceive+0x5e>
    5b58:	86 e0       	ldi	r24, 0x06	; 6
    5b5a:	03 c0       	rjmp	.+6      	; 0x5b62 <twiReceive+0x5e>
    5b5c:	87 e0       	ldi	r24, 0x07	; 7
    5b5e:	01 c0       	rjmp	.+2      	; 0x5b62 <twiReceive+0x5e>
    5b60:	82 e0       	ldi	r24, 0x02	; 2
    5b62:	df 91       	pop	r29
    5b64:	cf 91       	pop	r28
    5b66:	1f 91       	pop	r17
    5b68:	08 95       	ret

00005b6a <__vector_39>:
    5b6a:	1f 92       	push	r1
    5b6c:	0f 92       	push	r0
    5b6e:	0f b6       	in	r0, 0x3f	; 63
    5b70:	0f 92       	push	r0
    5b72:	11 24       	eor	r1, r1
    5b74:	0b b6       	in	r0, 0x3b	; 59
    5b76:	0f 92       	push	r0
    5b78:	2f 93       	push	r18
    5b7a:	3f 93       	push	r19
    5b7c:	4f 93       	push	r20
    5b7e:	5f 93       	push	r21
    5b80:	6f 93       	push	r22
    5b82:	7f 93       	push	r23
    5b84:	8f 93       	push	r24
    5b86:	9f 93       	push	r25
    5b88:	af 93       	push	r26
    5b8a:	bf 93       	push	r27
    5b8c:	ef 93       	push	r30
    5b8e:	ff 93       	push	r31
    5b90:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5b94:	8e 2f       	mov	r24, r30
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	fc 01       	movw	r30, r24
    5b9a:	38 97       	sbiw	r30, 0x08	; 8
    5b9c:	e1 35       	cpi	r30, 0x51	; 81
    5b9e:	f1 05       	cpc	r31, r1
    5ba0:	08 f0       	brcs	.+2      	; 0x5ba4 <__vector_39+0x3a>
    5ba2:	75 c0       	rjmp	.+234    	; 0x5c8e <__vector_39+0x124>
    5ba4:	88 27       	eor	r24, r24
    5ba6:	e4 58       	subi	r30, 0x84	; 132
    5ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    5baa:	8f 4f       	sbci	r24, 0xFF	; 255
    5bac:	65 c6       	rjmp	.+3274   	; 0x6878 <__tablejump2__>
    5bae:	10 92 61 1b 	sts	0x1B61, r1	; 0x801b61 <_index.1885>
    5bb2:	e0 91 61 1b 	lds	r30, 0x1B61	; 0x801b61 <_index.1885>
    5bb6:	80 91 64 1b 	lds	r24, 0x1B64	; 0x801b64 <_twiMessageLen>
    5bba:	e8 17       	cp	r30, r24
    5bbc:	70 f4       	brcc	.+28     	; 0x5bda <__vector_39+0x70>
    5bbe:	81 e0       	ldi	r24, 0x01	; 1
    5bc0:	8e 0f       	add	r24, r30
    5bc2:	80 93 61 1b 	sts	0x1B61, r24	; 0x801b61 <_index.1885>
    5bc6:	f0 e0       	ldi	r31, 0x00	; 0
    5bc8:	eb 59       	subi	r30, 0x9B	; 155
    5bca:	f4 4e       	sbci	r31, 0xE4	; 228
    5bcc:	80 81       	ld	r24, Z
    5bce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5bd2:	85 e8       	ldi	r24, 0x85	; 133
    5bd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5bd8:	72 c0       	rjmp	.+228    	; 0x5cbe <__vector_39+0x154>
    5bda:	84 e9       	ldi	r24, 0x94	; 148
    5bdc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5be0:	80 91 62 1b 	lds	r24, 0x1B62	; 0x801b62 <_twiCurrentHandler>
    5be4:	90 91 63 1b 	lds	r25, 0x1B63	; 0x801b63 <_twiCurrentHandler+0x1>
    5be8:	dc 01       	movw	r26, r24
    5bea:	12 96       	adiw	r26, 0x02	; 2
    5bec:	ed 91       	ld	r30, X+
    5bee:	fc 91       	ld	r31, X
    5bf0:	13 97       	sbiw	r26, 0x03	; 3
    5bf2:	30 97       	sbiw	r30, 0x00	; 0
    5bf4:	09 f4       	brne	.+2      	; 0x5bf8 <__vector_39+0x8e>
    5bf6:	63 c0       	rjmp	.+198    	; 0x5cbe <__vector_39+0x154>
    5bf8:	20 e0       	ldi	r18, 0x00	; 0
    5bfa:	40 e0       	ldi	r20, 0x00	; 0
    5bfc:	50 e0       	ldi	r21, 0x00	; 0
    5bfe:	64 e0       	ldi	r22, 0x04	; 4
    5c00:	19 95       	eicall
    5c02:	5d c0       	rjmp	.+186    	; 0x5cbe <__vector_39+0x154>
    5c04:	e0 91 61 1b 	lds	r30, 0x1B61	; 0x801b61 <_index.1885>
    5c08:	81 e0       	ldi	r24, 0x01	; 1
    5c0a:	8e 0f       	add	r24, r30
    5c0c:	80 93 61 1b 	sts	0x1B61, r24	; 0x801b61 <_index.1885>
    5c10:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5c14:	f0 e0       	ldi	r31, 0x00	; 0
    5c16:	eb 59       	subi	r30, 0x9B	; 155
    5c18:	f4 4e       	sbci	r31, 0xE4	; 228
    5c1a:	80 83       	st	Z, r24
    5c1c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5c20:	80 34       	cpi	r24, 0x40	; 64
    5c22:	11 f4       	brne	.+4      	; 0x5c28 <__vector_39+0xbe>
    5c24:	10 92 61 1b 	sts	0x1B61, r1	; 0x801b61 <_index.1885>
    5c28:	20 91 61 1b 	lds	r18, 0x1B61	; 0x801b61 <_index.1885>
    5c2c:	30 e0       	ldi	r19, 0x00	; 0
    5c2e:	80 91 64 1b 	lds	r24, 0x1B64	; 0x801b64 <_twiMessageLen>
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	01 97       	sbiw	r24, 0x01	; 1
    5c36:	28 17       	cp	r18, r24
    5c38:	39 07       	cpc	r19, r25
    5c3a:	24 f4       	brge	.+8      	; 0x5c44 <__vector_39+0xda>
    5c3c:	85 ec       	ldi	r24, 0xC5	; 197
    5c3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c42:	3d c0       	rjmp	.+122    	; 0x5cbe <__vector_39+0x154>
    5c44:	85 e8       	ldi	r24, 0x85	; 133
    5c46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c4a:	39 c0       	rjmp	.+114    	; 0x5cbe <__vector_39+0x154>
    5c4c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5c50:	e0 91 61 1b 	lds	r30, 0x1B61	; 0x801b61 <_index.1885>
    5c54:	f0 e0       	ldi	r31, 0x00	; 0
    5c56:	eb 59       	subi	r30, 0x9B	; 155
    5c58:	f4 4e       	sbci	r31, 0xE4	; 228
    5c5a:	80 83       	st	Z, r24
    5c5c:	84 e9       	ldi	r24, 0x94	; 148
    5c5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c62:	80 91 62 1b 	lds	r24, 0x1B62	; 0x801b62 <_twiCurrentHandler>
    5c66:	90 91 63 1b 	lds	r25, 0x1B63	; 0x801b63 <_twiCurrentHandler+0x1>
    5c6a:	dc 01       	movw	r26, r24
    5c6c:	12 96       	adiw	r26, 0x02	; 2
    5c6e:	ed 91       	ld	r30, X+
    5c70:	fc 91       	ld	r31, X
    5c72:	13 97       	sbiw	r26, 0x03	; 3
    5c74:	30 97       	sbiw	r30, 0x00	; 0
    5c76:	19 f1       	breq	.+70     	; 0x5cbe <__vector_39+0x154>
    5c78:	20 91 64 1b 	lds	r18, 0x1B64	; 0x801b64 <_twiMessageLen>
    5c7c:	45 e6       	ldi	r20, 0x65	; 101
    5c7e:	5b e1       	ldi	r21, 0x1B	; 27
    5c80:	65 e0       	ldi	r22, 0x05	; 5
    5c82:	19 95       	eicall
    5c84:	1c c0       	rjmp	.+56     	; 0x5cbe <__vector_39+0x154>
    5c86:	85 ea       	ldi	r24, 0xA5	; 165
    5c88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c8c:	18 c0       	rjmp	.+48     	; 0x5cbe <__vector_39+0x154>
    5c8e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5c92:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5c96:	84 e0       	ldi	r24, 0x04	; 4
    5c98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c9c:	80 91 62 1b 	lds	r24, 0x1B62	; 0x801b62 <_twiCurrentHandler>
    5ca0:	90 91 63 1b 	lds	r25, 0x1B63	; 0x801b63 <_twiCurrentHandler+0x1>
    5ca4:	dc 01       	movw	r26, r24
    5ca6:	12 96       	adiw	r26, 0x02	; 2
    5ca8:	ed 91       	ld	r30, X+
    5caa:	fc 91       	ld	r31, X
    5cac:	13 97       	sbiw	r26, 0x03	; 3
    5cae:	30 97       	sbiw	r30, 0x00	; 0
    5cb0:	31 f0       	breq	.+12     	; 0x5cbe <__vector_39+0x154>
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	40 e0       	ldi	r20, 0x00	; 0
    5cb6:	50 e0       	ldi	r21, 0x00	; 0
    5cb8:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5cbc:	19 95       	eicall
    5cbe:	ff 91       	pop	r31
    5cc0:	ef 91       	pop	r30
    5cc2:	bf 91       	pop	r27
    5cc4:	af 91       	pop	r26
    5cc6:	9f 91       	pop	r25
    5cc8:	8f 91       	pop	r24
    5cca:	7f 91       	pop	r23
    5ccc:	6f 91       	pop	r22
    5cce:	5f 91       	pop	r21
    5cd0:	4f 91       	pop	r20
    5cd2:	3f 91       	pop	r19
    5cd4:	2f 91       	pop	r18
    5cd6:	0f 90       	pop	r0
    5cd8:	0b be       	out	0x3b, r0	; 59
    5cda:	0f 90       	pop	r0
    5cdc:	0f be       	out	0x3f, r0	; 63
    5cde:	0f 90       	pop	r0
    5ce0:	1f 90       	pop	r1
    5ce2:	18 95       	reti

00005ce4 <fifo_init>:
    5ce4:	fc 01       	movw	r30, r24
    5ce6:	41 11       	cpse	r20, r1
    5ce8:	01 c0       	rjmp	.+2      	; 0x5cec <fifo_init+0x8>
    5cea:	12 d7       	rcall	.+3620   	; 0x6b10 <abort>
    5cec:	84 2f       	mov	r24, r20
    5cee:	90 e0       	ldi	r25, 0x00	; 0
    5cf0:	9c 01       	movw	r18, r24
    5cf2:	21 50       	subi	r18, 0x01	; 1
    5cf4:	31 09       	sbc	r19, r1
    5cf6:	82 23       	and	r24, r18
    5cf8:	93 23       	and	r25, r19
    5cfa:	89 2b       	or	r24, r25
    5cfc:	09 f0       	breq	.+2      	; 0x5d00 <fifo_init+0x1c>
    5cfe:	08 d7       	rcall	.+3600   	; 0x6b10 <abort>
    5d00:	41 38       	cpi	r20, 0x81	; 129
    5d02:	08 f0       	brcs	.+2      	; 0x5d06 <fifo_init+0x22>
    5d04:	05 d7       	rcall	.+3594   	; 0x6b10 <abort>
    5d06:	12 82       	std	Z+2, r1	; 0x02
    5d08:	13 82       	std	Z+3, r1	; 0x03
    5d0a:	44 83       	std	Z+4, r20	; 0x04
    5d0c:	44 0f       	add	r20, r20
    5d0e:	41 50       	subi	r20, 0x01	; 1
    5d10:	45 83       	std	Z+5, r20	; 0x05
    5d12:	71 83       	std	Z+1, r23	; 0x01
    5d14:	60 83       	st	Z, r22
    5d16:	80 e0       	ldi	r24, 0x00	; 0
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	08 95       	ret

00005d1c <vfprintf>:
    5d1c:	2f 92       	push	r2
    5d1e:	3f 92       	push	r3
    5d20:	4f 92       	push	r4
    5d22:	5f 92       	push	r5
    5d24:	6f 92       	push	r6
    5d26:	7f 92       	push	r7
    5d28:	8f 92       	push	r8
    5d2a:	9f 92       	push	r9
    5d2c:	af 92       	push	r10
    5d2e:	bf 92       	push	r11
    5d30:	cf 92       	push	r12
    5d32:	df 92       	push	r13
    5d34:	ef 92       	push	r14
    5d36:	ff 92       	push	r15
    5d38:	0f 93       	push	r16
    5d3a:	1f 93       	push	r17
    5d3c:	cf 93       	push	r28
    5d3e:	df 93       	push	r29
    5d40:	cd b7       	in	r28, 0x3d	; 61
    5d42:	de b7       	in	r29, 0x3e	; 62
    5d44:	60 97       	sbiw	r28, 0x10	; 16
    5d46:	0f b6       	in	r0, 0x3f	; 63
    5d48:	f8 94       	cli
    5d4a:	de bf       	out	0x3e, r29	; 62
    5d4c:	0f be       	out	0x3f, r0	; 63
    5d4e:	cd bf       	out	0x3d, r28	; 61
    5d50:	7c 01       	movw	r14, r24
    5d52:	1b 01       	movw	r2, r22
    5d54:	6a 01       	movw	r12, r20
    5d56:	fc 01       	movw	r30, r24
    5d58:	17 82       	std	Z+7, r1	; 0x07
    5d5a:	16 82       	std	Z+6, r1	; 0x06
    5d5c:	83 81       	ldd	r24, Z+3	; 0x03
    5d5e:	81 ff       	sbrs	r24, 1
    5d60:	2b c3       	rjmp	.+1622   	; 0x63b8 <vfprintf+0x69c>
    5d62:	9e 01       	movw	r18, r28
    5d64:	2f 5f       	subi	r18, 0xFF	; 255
    5d66:	3f 4f       	sbci	r19, 0xFF	; 255
    5d68:	39 01       	movw	r6, r18
    5d6a:	f7 01       	movw	r30, r14
    5d6c:	93 81       	ldd	r25, Z+3	; 0x03
    5d6e:	f1 01       	movw	r30, r2
    5d70:	93 fd       	sbrc	r25, 3
    5d72:	85 91       	lpm	r24, Z+
    5d74:	93 ff       	sbrs	r25, 3
    5d76:	81 91       	ld	r24, Z+
    5d78:	1f 01       	movw	r2, r30
    5d7a:	88 23       	and	r24, r24
    5d7c:	09 f4       	brne	.+2      	; 0x5d80 <vfprintf+0x64>
    5d7e:	18 c3       	rjmp	.+1584   	; 0x63b0 <vfprintf+0x694>
    5d80:	85 32       	cpi	r24, 0x25	; 37
    5d82:	39 f4       	brne	.+14     	; 0x5d92 <vfprintf+0x76>
    5d84:	93 fd       	sbrc	r25, 3
    5d86:	85 91       	lpm	r24, Z+
    5d88:	93 ff       	sbrs	r25, 3
    5d8a:	81 91       	ld	r24, Z+
    5d8c:	1f 01       	movw	r2, r30
    5d8e:	85 32       	cpi	r24, 0x25	; 37
    5d90:	39 f4       	brne	.+14     	; 0x5da0 <vfprintf+0x84>
    5d92:	b7 01       	movw	r22, r14
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <fputc>
    5d9a:	56 01       	movw	r10, r12
    5d9c:	65 01       	movw	r12, r10
    5d9e:	e5 cf       	rjmp	.-54     	; 0x5d6a <vfprintf+0x4e>
    5da0:	10 e0       	ldi	r17, 0x00	; 0
    5da2:	51 2c       	mov	r5, r1
    5da4:	91 2c       	mov	r9, r1
    5da6:	ff e1       	ldi	r31, 0x1F	; 31
    5da8:	f9 15       	cp	r31, r9
    5daa:	d8 f0       	brcs	.+54     	; 0x5de2 <vfprintf+0xc6>
    5dac:	8b 32       	cpi	r24, 0x2B	; 43
    5dae:	79 f0       	breq	.+30     	; 0x5dce <vfprintf+0xb2>
    5db0:	38 f4       	brcc	.+14     	; 0x5dc0 <vfprintf+0xa4>
    5db2:	80 32       	cpi	r24, 0x20	; 32
    5db4:	79 f0       	breq	.+30     	; 0x5dd4 <vfprintf+0xb8>
    5db6:	83 32       	cpi	r24, 0x23	; 35
    5db8:	a1 f4       	brne	.+40     	; 0x5de2 <vfprintf+0xc6>
    5dba:	f9 2d       	mov	r31, r9
    5dbc:	f0 61       	ori	r31, 0x10	; 16
    5dbe:	2e c0       	rjmp	.+92     	; 0x5e1c <vfprintf+0x100>
    5dc0:	8d 32       	cpi	r24, 0x2D	; 45
    5dc2:	61 f0       	breq	.+24     	; 0x5ddc <vfprintf+0xc0>
    5dc4:	80 33       	cpi	r24, 0x30	; 48
    5dc6:	69 f4       	brne	.+26     	; 0x5de2 <vfprintf+0xc6>
    5dc8:	29 2d       	mov	r18, r9
    5dca:	21 60       	ori	r18, 0x01	; 1
    5dcc:	2d c0       	rjmp	.+90     	; 0x5e28 <vfprintf+0x10c>
    5dce:	39 2d       	mov	r19, r9
    5dd0:	32 60       	ori	r19, 0x02	; 2
    5dd2:	93 2e       	mov	r9, r19
    5dd4:	89 2d       	mov	r24, r9
    5dd6:	84 60       	ori	r24, 0x04	; 4
    5dd8:	98 2e       	mov	r9, r24
    5dda:	2a c0       	rjmp	.+84     	; 0x5e30 <vfprintf+0x114>
    5ddc:	e9 2d       	mov	r30, r9
    5dde:	e8 60       	ori	r30, 0x08	; 8
    5de0:	15 c0       	rjmp	.+42     	; 0x5e0c <vfprintf+0xf0>
    5de2:	97 fc       	sbrc	r9, 7
    5de4:	2d c0       	rjmp	.+90     	; 0x5e40 <vfprintf+0x124>
    5de6:	20 ed       	ldi	r18, 0xD0	; 208
    5de8:	28 0f       	add	r18, r24
    5dea:	2a 30       	cpi	r18, 0x0A	; 10
    5dec:	88 f4       	brcc	.+34     	; 0x5e10 <vfprintf+0xf4>
    5dee:	96 fe       	sbrs	r9, 6
    5df0:	06 c0       	rjmp	.+12     	; 0x5dfe <vfprintf+0xe2>
    5df2:	3a e0       	ldi	r19, 0x0A	; 10
    5df4:	13 9f       	mul	r17, r19
    5df6:	20 0d       	add	r18, r0
    5df8:	11 24       	eor	r1, r1
    5dfa:	12 2f       	mov	r17, r18
    5dfc:	19 c0       	rjmp	.+50     	; 0x5e30 <vfprintf+0x114>
    5dfe:	8a e0       	ldi	r24, 0x0A	; 10
    5e00:	58 9e       	mul	r5, r24
    5e02:	20 0d       	add	r18, r0
    5e04:	11 24       	eor	r1, r1
    5e06:	52 2e       	mov	r5, r18
    5e08:	e9 2d       	mov	r30, r9
    5e0a:	e0 62       	ori	r30, 0x20	; 32
    5e0c:	9e 2e       	mov	r9, r30
    5e0e:	10 c0       	rjmp	.+32     	; 0x5e30 <vfprintf+0x114>
    5e10:	8e 32       	cpi	r24, 0x2E	; 46
    5e12:	31 f4       	brne	.+12     	; 0x5e20 <vfprintf+0x104>
    5e14:	96 fc       	sbrc	r9, 6
    5e16:	cc c2       	rjmp	.+1432   	; 0x63b0 <vfprintf+0x694>
    5e18:	f9 2d       	mov	r31, r9
    5e1a:	f0 64       	ori	r31, 0x40	; 64
    5e1c:	9f 2e       	mov	r9, r31
    5e1e:	08 c0       	rjmp	.+16     	; 0x5e30 <vfprintf+0x114>
    5e20:	8c 36       	cpi	r24, 0x6C	; 108
    5e22:	21 f4       	brne	.+8      	; 0x5e2c <vfprintf+0x110>
    5e24:	29 2d       	mov	r18, r9
    5e26:	20 68       	ori	r18, 0x80	; 128
    5e28:	92 2e       	mov	r9, r18
    5e2a:	02 c0       	rjmp	.+4      	; 0x5e30 <vfprintf+0x114>
    5e2c:	88 36       	cpi	r24, 0x68	; 104
    5e2e:	41 f4       	brne	.+16     	; 0x5e40 <vfprintf+0x124>
    5e30:	f1 01       	movw	r30, r2
    5e32:	93 fd       	sbrc	r25, 3
    5e34:	85 91       	lpm	r24, Z+
    5e36:	93 ff       	sbrs	r25, 3
    5e38:	81 91       	ld	r24, Z+
    5e3a:	1f 01       	movw	r2, r30
    5e3c:	81 11       	cpse	r24, r1
    5e3e:	b3 cf       	rjmp	.-154    	; 0x5da6 <vfprintf+0x8a>
    5e40:	9b eb       	ldi	r25, 0xBB	; 187
    5e42:	98 0f       	add	r25, r24
    5e44:	93 30       	cpi	r25, 0x03	; 3
    5e46:	20 f4       	brcc	.+8      	; 0x5e50 <vfprintf+0x134>
    5e48:	99 2d       	mov	r25, r9
    5e4a:	90 61       	ori	r25, 0x10	; 16
    5e4c:	80 5e       	subi	r24, 0xE0	; 224
    5e4e:	07 c0       	rjmp	.+14     	; 0x5e5e <vfprintf+0x142>
    5e50:	9b e9       	ldi	r25, 0x9B	; 155
    5e52:	98 0f       	add	r25, r24
    5e54:	93 30       	cpi	r25, 0x03	; 3
    5e56:	08 f0       	brcs	.+2      	; 0x5e5a <vfprintf+0x13e>
    5e58:	59 c1       	rjmp	.+690    	; 0x610c <vfprintf+0x3f0>
    5e5a:	99 2d       	mov	r25, r9
    5e5c:	9f 7e       	andi	r25, 0xEF	; 239
    5e5e:	96 ff       	sbrs	r25, 6
    5e60:	16 e0       	ldi	r17, 0x06	; 6
    5e62:	9f 73       	andi	r25, 0x3F	; 63
    5e64:	99 2e       	mov	r9, r25
    5e66:	85 36       	cpi	r24, 0x65	; 101
    5e68:	19 f4       	brne	.+6      	; 0x5e70 <vfprintf+0x154>
    5e6a:	90 64       	ori	r25, 0x40	; 64
    5e6c:	99 2e       	mov	r9, r25
    5e6e:	08 c0       	rjmp	.+16     	; 0x5e80 <vfprintf+0x164>
    5e70:	86 36       	cpi	r24, 0x66	; 102
    5e72:	21 f4       	brne	.+8      	; 0x5e7c <vfprintf+0x160>
    5e74:	39 2f       	mov	r19, r25
    5e76:	30 68       	ori	r19, 0x80	; 128
    5e78:	93 2e       	mov	r9, r19
    5e7a:	02 c0       	rjmp	.+4      	; 0x5e80 <vfprintf+0x164>
    5e7c:	11 11       	cpse	r17, r1
    5e7e:	11 50       	subi	r17, 0x01	; 1
    5e80:	97 fe       	sbrs	r9, 7
    5e82:	07 c0       	rjmp	.+14     	; 0x5e92 <vfprintf+0x176>
    5e84:	1c 33       	cpi	r17, 0x3C	; 60
    5e86:	50 f4       	brcc	.+20     	; 0x5e9c <vfprintf+0x180>
    5e88:	44 24       	eor	r4, r4
    5e8a:	43 94       	inc	r4
    5e8c:	41 0e       	add	r4, r17
    5e8e:	27 e0       	ldi	r18, 0x07	; 7
    5e90:	0b c0       	rjmp	.+22     	; 0x5ea8 <vfprintf+0x18c>
    5e92:	18 30       	cpi	r17, 0x08	; 8
    5e94:	38 f0       	brcs	.+14     	; 0x5ea4 <vfprintf+0x188>
    5e96:	27 e0       	ldi	r18, 0x07	; 7
    5e98:	17 e0       	ldi	r17, 0x07	; 7
    5e9a:	05 c0       	rjmp	.+10     	; 0x5ea6 <vfprintf+0x18a>
    5e9c:	27 e0       	ldi	r18, 0x07	; 7
    5e9e:	9c e3       	ldi	r25, 0x3C	; 60
    5ea0:	49 2e       	mov	r4, r25
    5ea2:	02 c0       	rjmp	.+4      	; 0x5ea8 <vfprintf+0x18c>
    5ea4:	21 2f       	mov	r18, r17
    5ea6:	41 2c       	mov	r4, r1
    5ea8:	56 01       	movw	r10, r12
    5eaa:	84 e0       	ldi	r24, 0x04	; 4
    5eac:	a8 0e       	add	r10, r24
    5eae:	b1 1c       	adc	r11, r1
    5eb0:	f6 01       	movw	r30, r12
    5eb2:	60 81       	ld	r22, Z
    5eb4:	71 81       	ldd	r23, Z+1	; 0x01
    5eb6:	82 81       	ldd	r24, Z+2	; 0x02
    5eb8:	93 81       	ldd	r25, Z+3	; 0x03
    5eba:	04 2d       	mov	r16, r4
    5ebc:	a3 01       	movw	r20, r6
    5ebe:	2c d6       	rcall	.+3160   	; 0x6b18 <__ftoa_engine>
    5ec0:	6c 01       	movw	r12, r24
    5ec2:	f9 81       	ldd	r31, Y+1	; 0x01
    5ec4:	fc 87       	std	Y+12, r31	; 0x0c
    5ec6:	f0 ff       	sbrs	r31, 0
    5ec8:	02 c0       	rjmp	.+4      	; 0x5ece <vfprintf+0x1b2>
    5eca:	f3 ff       	sbrs	r31, 3
    5ecc:	06 c0       	rjmp	.+12     	; 0x5eda <vfprintf+0x1be>
    5ece:	91 fc       	sbrc	r9, 1
    5ed0:	06 c0       	rjmp	.+12     	; 0x5ede <vfprintf+0x1c2>
    5ed2:	92 fe       	sbrs	r9, 2
    5ed4:	06 c0       	rjmp	.+12     	; 0x5ee2 <vfprintf+0x1c6>
    5ed6:	00 e2       	ldi	r16, 0x20	; 32
    5ed8:	05 c0       	rjmp	.+10     	; 0x5ee4 <vfprintf+0x1c8>
    5eda:	0d e2       	ldi	r16, 0x2D	; 45
    5edc:	03 c0       	rjmp	.+6      	; 0x5ee4 <vfprintf+0x1c8>
    5ede:	0b e2       	ldi	r16, 0x2B	; 43
    5ee0:	01 c0       	rjmp	.+2      	; 0x5ee4 <vfprintf+0x1c8>
    5ee2:	00 e0       	ldi	r16, 0x00	; 0
    5ee4:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ee6:	8c 70       	andi	r24, 0x0C	; 12
    5ee8:	19 f0       	breq	.+6      	; 0x5ef0 <vfprintf+0x1d4>
    5eea:	01 11       	cpse	r16, r1
    5eec:	43 c2       	rjmp	.+1158   	; 0x6374 <vfprintf+0x658>
    5eee:	80 c2       	rjmp	.+1280   	; 0x63f0 <vfprintf+0x6d4>
    5ef0:	97 fe       	sbrs	r9, 7
    5ef2:	10 c0       	rjmp	.+32     	; 0x5f14 <vfprintf+0x1f8>
    5ef4:	4c 0c       	add	r4, r12
    5ef6:	fc 85       	ldd	r31, Y+12	; 0x0c
    5ef8:	f4 ff       	sbrs	r31, 4
    5efa:	04 c0       	rjmp	.+8      	; 0x5f04 <vfprintf+0x1e8>
    5efc:	8a 81       	ldd	r24, Y+2	; 0x02
    5efe:	81 33       	cpi	r24, 0x31	; 49
    5f00:	09 f4       	brne	.+2      	; 0x5f04 <vfprintf+0x1e8>
    5f02:	4a 94       	dec	r4
    5f04:	14 14       	cp	r1, r4
    5f06:	74 f5       	brge	.+92     	; 0x5f64 <vfprintf+0x248>
    5f08:	28 e0       	ldi	r18, 0x08	; 8
    5f0a:	24 15       	cp	r18, r4
    5f0c:	78 f5       	brcc	.+94     	; 0x5f6c <vfprintf+0x250>
    5f0e:	88 e0       	ldi	r24, 0x08	; 8
    5f10:	48 2e       	mov	r4, r24
    5f12:	2c c0       	rjmp	.+88     	; 0x5f6c <vfprintf+0x250>
    5f14:	96 fc       	sbrc	r9, 6
    5f16:	2a c0       	rjmp	.+84     	; 0x5f6c <vfprintf+0x250>
    5f18:	81 2f       	mov	r24, r17
    5f1a:	90 e0       	ldi	r25, 0x00	; 0
    5f1c:	8c 15       	cp	r24, r12
    5f1e:	9d 05       	cpc	r25, r13
    5f20:	9c f0       	brlt	.+38     	; 0x5f48 <vfprintf+0x22c>
    5f22:	3c ef       	ldi	r19, 0xFC	; 252
    5f24:	c3 16       	cp	r12, r19
    5f26:	3f ef       	ldi	r19, 0xFF	; 255
    5f28:	d3 06       	cpc	r13, r19
    5f2a:	74 f0       	brlt	.+28     	; 0x5f48 <vfprintf+0x22c>
    5f2c:	89 2d       	mov	r24, r9
    5f2e:	80 68       	ori	r24, 0x80	; 128
    5f30:	98 2e       	mov	r9, r24
    5f32:	0a c0       	rjmp	.+20     	; 0x5f48 <vfprintf+0x22c>
    5f34:	e2 e0       	ldi	r30, 0x02	; 2
    5f36:	f0 e0       	ldi	r31, 0x00	; 0
    5f38:	ec 0f       	add	r30, r28
    5f3a:	fd 1f       	adc	r31, r29
    5f3c:	e1 0f       	add	r30, r17
    5f3e:	f1 1d       	adc	r31, r1
    5f40:	80 81       	ld	r24, Z
    5f42:	80 33       	cpi	r24, 0x30	; 48
    5f44:	19 f4       	brne	.+6      	; 0x5f4c <vfprintf+0x230>
    5f46:	11 50       	subi	r17, 0x01	; 1
    5f48:	11 11       	cpse	r17, r1
    5f4a:	f4 cf       	rjmp	.-24     	; 0x5f34 <vfprintf+0x218>
    5f4c:	97 fe       	sbrs	r9, 7
    5f4e:	0e c0       	rjmp	.+28     	; 0x5f6c <vfprintf+0x250>
    5f50:	44 24       	eor	r4, r4
    5f52:	43 94       	inc	r4
    5f54:	41 0e       	add	r4, r17
    5f56:	81 2f       	mov	r24, r17
    5f58:	90 e0       	ldi	r25, 0x00	; 0
    5f5a:	c8 16       	cp	r12, r24
    5f5c:	d9 06       	cpc	r13, r25
    5f5e:	2c f4       	brge	.+10     	; 0x5f6a <vfprintf+0x24e>
    5f60:	1c 19       	sub	r17, r12
    5f62:	04 c0       	rjmp	.+8      	; 0x5f6c <vfprintf+0x250>
    5f64:	44 24       	eor	r4, r4
    5f66:	43 94       	inc	r4
    5f68:	01 c0       	rjmp	.+2      	; 0x5f6c <vfprintf+0x250>
    5f6a:	10 e0       	ldi	r17, 0x00	; 0
    5f6c:	97 fe       	sbrs	r9, 7
    5f6e:	06 c0       	rjmp	.+12     	; 0x5f7c <vfprintf+0x260>
    5f70:	1c 14       	cp	r1, r12
    5f72:	1d 04       	cpc	r1, r13
    5f74:	34 f4       	brge	.+12     	; 0x5f82 <vfprintf+0x266>
    5f76:	c6 01       	movw	r24, r12
    5f78:	01 96       	adiw	r24, 0x01	; 1
    5f7a:	05 c0       	rjmp	.+10     	; 0x5f86 <vfprintf+0x26a>
    5f7c:	85 e0       	ldi	r24, 0x05	; 5
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	02 c0       	rjmp	.+4      	; 0x5f86 <vfprintf+0x26a>
    5f82:	81 e0       	ldi	r24, 0x01	; 1
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	01 11       	cpse	r16, r1
    5f88:	01 96       	adiw	r24, 0x01	; 1
    5f8a:	11 23       	and	r17, r17
    5f8c:	31 f0       	breq	.+12     	; 0x5f9a <vfprintf+0x27e>
    5f8e:	21 2f       	mov	r18, r17
    5f90:	30 e0       	ldi	r19, 0x00	; 0
    5f92:	2f 5f       	subi	r18, 0xFF	; 255
    5f94:	3f 4f       	sbci	r19, 0xFF	; 255
    5f96:	82 0f       	add	r24, r18
    5f98:	93 1f       	adc	r25, r19
    5f9a:	25 2d       	mov	r18, r5
    5f9c:	30 e0       	ldi	r19, 0x00	; 0
    5f9e:	82 17       	cp	r24, r18
    5fa0:	93 07       	cpc	r25, r19
    5fa2:	14 f4       	brge	.+4      	; 0x5fa8 <vfprintf+0x28c>
    5fa4:	58 1a       	sub	r5, r24
    5fa6:	01 c0       	rjmp	.+2      	; 0x5faa <vfprintf+0x28e>
    5fa8:	51 2c       	mov	r5, r1
    5faa:	89 2d       	mov	r24, r9
    5fac:	89 70       	andi	r24, 0x09	; 9
    5fae:	41 f4       	brne	.+16     	; 0x5fc0 <vfprintf+0x2a4>
    5fb0:	55 20       	and	r5, r5
    5fb2:	31 f0       	breq	.+12     	; 0x5fc0 <vfprintf+0x2a4>
    5fb4:	b7 01       	movw	r22, r14
    5fb6:	80 e2       	ldi	r24, 0x20	; 32
    5fb8:	90 e0       	ldi	r25, 0x00	; 0
    5fba:	fb d6       	rcall	.+3574   	; 0x6db2 <fputc>
    5fbc:	5a 94       	dec	r5
    5fbe:	f8 cf       	rjmp	.-16     	; 0x5fb0 <vfprintf+0x294>
    5fc0:	00 23       	and	r16, r16
    5fc2:	21 f0       	breq	.+8      	; 0x5fcc <vfprintf+0x2b0>
    5fc4:	b7 01       	movw	r22, r14
    5fc6:	80 2f       	mov	r24, r16
    5fc8:	90 e0       	ldi	r25, 0x00	; 0
    5fca:	f3 d6       	rcall	.+3558   	; 0x6db2 <fputc>
    5fcc:	93 fc       	sbrc	r9, 3
    5fce:	08 c0       	rjmp	.+16     	; 0x5fe0 <vfprintf+0x2c4>
    5fd0:	55 20       	and	r5, r5
    5fd2:	31 f0       	breq	.+12     	; 0x5fe0 <vfprintf+0x2c4>
    5fd4:	b7 01       	movw	r22, r14
    5fd6:	80 e3       	ldi	r24, 0x30	; 48
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	eb d6       	rcall	.+3542   	; 0x6db2 <fputc>
    5fdc:	5a 94       	dec	r5
    5fde:	f8 cf       	rjmp	.-16     	; 0x5fd0 <vfprintf+0x2b4>
    5fe0:	97 fe       	sbrs	r9, 7
    5fe2:	4a c0       	rjmp	.+148    	; 0x6078 <vfprintf+0x35c>
    5fe4:	46 01       	movw	r8, r12
    5fe6:	d7 fe       	sbrs	r13, 7
    5fe8:	02 c0       	rjmp	.+4      	; 0x5fee <vfprintf+0x2d2>
    5fea:	81 2c       	mov	r8, r1
    5fec:	91 2c       	mov	r9, r1
    5fee:	c6 01       	movw	r24, r12
    5ff0:	88 19       	sub	r24, r8
    5ff2:	99 09       	sbc	r25, r9
    5ff4:	f3 01       	movw	r30, r6
    5ff6:	e8 0f       	add	r30, r24
    5ff8:	f9 1f       	adc	r31, r25
    5ffa:	fe 87       	std	Y+14, r31	; 0x0e
    5ffc:	ed 87       	std	Y+13, r30	; 0x0d
    5ffe:	96 01       	movw	r18, r12
    6000:	24 19       	sub	r18, r4
    6002:	31 09       	sbc	r19, r1
    6004:	38 8b       	std	Y+16, r19	; 0x10
    6006:	2f 87       	std	Y+15, r18	; 0x0f
    6008:	01 2f       	mov	r16, r17
    600a:	10 e0       	ldi	r17, 0x00	; 0
    600c:	11 95       	neg	r17
    600e:	01 95       	neg	r16
    6010:	11 09       	sbc	r17, r1
    6012:	3f ef       	ldi	r19, 0xFF	; 255
    6014:	83 16       	cp	r8, r19
    6016:	93 06       	cpc	r9, r19
    6018:	21 f4       	brne	.+8      	; 0x6022 <vfprintf+0x306>
    601a:	b7 01       	movw	r22, r14
    601c:	8e e2       	ldi	r24, 0x2E	; 46
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	c8 d6       	rcall	.+3472   	; 0x6db2 <fputc>
    6022:	c8 14       	cp	r12, r8
    6024:	d9 04       	cpc	r13, r9
    6026:	4c f0       	brlt	.+18     	; 0x603a <vfprintf+0x31e>
    6028:	8f 85       	ldd	r24, Y+15	; 0x0f
    602a:	98 89       	ldd	r25, Y+16	; 0x10
    602c:	88 15       	cp	r24, r8
    602e:	99 05       	cpc	r25, r9
    6030:	24 f4       	brge	.+8      	; 0x603a <vfprintf+0x31e>
    6032:	ed 85       	ldd	r30, Y+13	; 0x0d
    6034:	fe 85       	ldd	r31, Y+14	; 0x0e
    6036:	81 81       	ldd	r24, Z+1	; 0x01
    6038:	01 c0       	rjmp	.+2      	; 0x603c <vfprintf+0x320>
    603a:	80 e3       	ldi	r24, 0x30	; 48
    603c:	f1 e0       	ldi	r31, 0x01	; 1
    603e:	8f 1a       	sub	r8, r31
    6040:	91 08       	sbc	r9, r1
    6042:	2d 85       	ldd	r18, Y+13	; 0x0d
    6044:	3e 85       	ldd	r19, Y+14	; 0x0e
    6046:	2f 5f       	subi	r18, 0xFF	; 255
    6048:	3f 4f       	sbci	r19, 0xFF	; 255
    604a:	3e 87       	std	Y+14, r19	; 0x0e
    604c:	2d 87       	std	Y+13, r18	; 0x0d
    604e:	80 16       	cp	r8, r16
    6050:	91 06       	cpc	r9, r17
    6052:	24 f0       	brlt	.+8      	; 0x605c <vfprintf+0x340>
    6054:	b7 01       	movw	r22, r14
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	ac d6       	rcall	.+3416   	; 0x6db2 <fputc>
    605a:	db cf       	rjmp	.-74     	; 0x6012 <vfprintf+0x2f6>
    605c:	c8 14       	cp	r12, r8
    605e:	d9 04       	cpc	r13, r9
    6060:	41 f4       	brne	.+16     	; 0x6072 <vfprintf+0x356>
    6062:	9a 81       	ldd	r25, Y+2	; 0x02
    6064:	96 33       	cpi	r25, 0x36	; 54
    6066:	20 f4       	brcc	.+8      	; 0x6070 <vfprintf+0x354>
    6068:	95 33       	cpi	r25, 0x35	; 53
    606a:	19 f4       	brne	.+6      	; 0x6072 <vfprintf+0x356>
    606c:	3c 85       	ldd	r19, Y+12	; 0x0c
    606e:	34 ff       	sbrs	r19, 4
    6070:	81 e3       	ldi	r24, 0x31	; 49
    6072:	b7 01       	movw	r22, r14
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	48 c0       	rjmp	.+144    	; 0x6108 <vfprintf+0x3ec>
    6078:	8a 81       	ldd	r24, Y+2	; 0x02
    607a:	81 33       	cpi	r24, 0x31	; 49
    607c:	19 f0       	breq	.+6      	; 0x6084 <vfprintf+0x368>
    607e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6080:	9f 7e       	andi	r25, 0xEF	; 239
    6082:	9c 87       	std	Y+12, r25	; 0x0c
    6084:	b7 01       	movw	r22, r14
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	94 d6       	rcall	.+3368   	; 0x6db2 <fputc>
    608a:	11 11       	cpse	r17, r1
    608c:	05 c0       	rjmp	.+10     	; 0x6098 <vfprintf+0x37c>
    608e:	94 fc       	sbrc	r9, 4
    6090:	16 c0       	rjmp	.+44     	; 0x60be <vfprintf+0x3a2>
    6092:	85 e6       	ldi	r24, 0x65	; 101
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	15 c0       	rjmp	.+42     	; 0x60c2 <vfprintf+0x3a6>
    6098:	b7 01       	movw	r22, r14
    609a:	8e e2       	ldi	r24, 0x2E	; 46
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	89 d6       	rcall	.+3346   	; 0x6db2 <fputc>
    60a0:	1e 5f       	subi	r17, 0xFE	; 254
    60a2:	82 e0       	ldi	r24, 0x02	; 2
    60a4:	01 e0       	ldi	r16, 0x01	; 1
    60a6:	08 0f       	add	r16, r24
    60a8:	f3 01       	movw	r30, r6
    60aa:	e8 0f       	add	r30, r24
    60ac:	f1 1d       	adc	r31, r1
    60ae:	80 81       	ld	r24, Z
    60b0:	b7 01       	movw	r22, r14
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	7e d6       	rcall	.+3324   	; 0x6db2 <fputc>
    60b6:	80 2f       	mov	r24, r16
    60b8:	01 13       	cpse	r16, r17
    60ba:	f4 cf       	rjmp	.-24     	; 0x60a4 <vfprintf+0x388>
    60bc:	e8 cf       	rjmp	.-48     	; 0x608e <vfprintf+0x372>
    60be:	85 e4       	ldi	r24, 0x45	; 69
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	b7 01       	movw	r22, r14
    60c4:	76 d6       	rcall	.+3308   	; 0x6db2 <fputc>
    60c6:	d7 fc       	sbrc	r13, 7
    60c8:	06 c0       	rjmp	.+12     	; 0x60d6 <vfprintf+0x3ba>
    60ca:	c1 14       	cp	r12, r1
    60cc:	d1 04       	cpc	r13, r1
    60ce:	41 f4       	brne	.+16     	; 0x60e0 <vfprintf+0x3c4>
    60d0:	ec 85       	ldd	r30, Y+12	; 0x0c
    60d2:	e4 ff       	sbrs	r30, 4
    60d4:	05 c0       	rjmp	.+10     	; 0x60e0 <vfprintf+0x3c4>
    60d6:	d1 94       	neg	r13
    60d8:	c1 94       	neg	r12
    60da:	d1 08       	sbc	r13, r1
    60dc:	8d e2       	ldi	r24, 0x2D	; 45
    60de:	01 c0       	rjmp	.+2      	; 0x60e2 <vfprintf+0x3c6>
    60e0:	8b e2       	ldi	r24, 0x2B	; 43
    60e2:	b7 01       	movw	r22, r14
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	65 d6       	rcall	.+3274   	; 0x6db2 <fputc>
    60e8:	80 e3       	ldi	r24, 0x30	; 48
    60ea:	2a e0       	ldi	r18, 0x0A	; 10
    60ec:	c2 16       	cp	r12, r18
    60ee:	d1 04       	cpc	r13, r1
    60f0:	2c f0       	brlt	.+10     	; 0x60fc <vfprintf+0x3e0>
    60f2:	8f 5f       	subi	r24, 0xFF	; 255
    60f4:	fa e0       	ldi	r31, 0x0A	; 10
    60f6:	cf 1a       	sub	r12, r31
    60f8:	d1 08       	sbc	r13, r1
    60fa:	f7 cf       	rjmp	.-18     	; 0x60ea <vfprintf+0x3ce>
    60fc:	b7 01       	movw	r22, r14
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	58 d6       	rcall	.+3248   	; 0x6db2 <fputc>
    6102:	b7 01       	movw	r22, r14
    6104:	c6 01       	movw	r24, r12
    6106:	c0 96       	adiw	r24, 0x30	; 48
    6108:	54 d6       	rcall	.+3240   	; 0x6db2 <fputc>
    610a:	49 c1       	rjmp	.+658    	; 0x639e <vfprintf+0x682>
    610c:	83 36       	cpi	r24, 0x63	; 99
    610e:	31 f0       	breq	.+12     	; 0x611c <vfprintf+0x400>
    6110:	83 37       	cpi	r24, 0x73	; 115
    6112:	79 f0       	breq	.+30     	; 0x6132 <vfprintf+0x416>
    6114:	83 35       	cpi	r24, 0x53	; 83
    6116:	09 f0       	breq	.+2      	; 0x611a <vfprintf+0x3fe>
    6118:	52 c0       	rjmp	.+164    	; 0x61be <vfprintf+0x4a2>
    611a:	1f c0       	rjmp	.+62     	; 0x615a <vfprintf+0x43e>
    611c:	56 01       	movw	r10, r12
    611e:	32 e0       	ldi	r19, 0x02	; 2
    6120:	a3 0e       	add	r10, r19
    6122:	b1 1c       	adc	r11, r1
    6124:	f6 01       	movw	r30, r12
    6126:	80 81       	ld	r24, Z
    6128:	89 83       	std	Y+1, r24	; 0x01
    612a:	01 e0       	ldi	r16, 0x01	; 1
    612c:	10 e0       	ldi	r17, 0x00	; 0
    612e:	63 01       	movw	r12, r6
    6130:	11 c0       	rjmp	.+34     	; 0x6154 <vfprintf+0x438>
    6132:	56 01       	movw	r10, r12
    6134:	f2 e0       	ldi	r31, 0x02	; 2
    6136:	af 0e       	add	r10, r31
    6138:	b1 1c       	adc	r11, r1
    613a:	f6 01       	movw	r30, r12
    613c:	c0 80       	ld	r12, Z
    613e:	d1 80       	ldd	r13, Z+1	; 0x01
    6140:	96 fe       	sbrs	r9, 6
    6142:	03 c0       	rjmp	.+6      	; 0x614a <vfprintf+0x42e>
    6144:	61 2f       	mov	r22, r17
    6146:	70 e0       	ldi	r23, 0x00	; 0
    6148:	02 c0       	rjmp	.+4      	; 0x614e <vfprintf+0x432>
    614a:	6f ef       	ldi	r22, 0xFF	; 255
    614c:	7f ef       	ldi	r23, 0xFF	; 255
    614e:	c6 01       	movw	r24, r12
    6150:	25 d6       	rcall	.+3146   	; 0x6d9c <strnlen>
    6152:	8c 01       	movw	r16, r24
    6154:	f9 2d       	mov	r31, r9
    6156:	ff 77       	andi	r31, 0x7F	; 127
    6158:	13 c0       	rjmp	.+38     	; 0x6180 <vfprintf+0x464>
    615a:	56 01       	movw	r10, r12
    615c:	22 e0       	ldi	r18, 0x02	; 2
    615e:	a2 0e       	add	r10, r18
    6160:	b1 1c       	adc	r11, r1
    6162:	f6 01       	movw	r30, r12
    6164:	c0 80       	ld	r12, Z
    6166:	d1 80       	ldd	r13, Z+1	; 0x01
    6168:	96 fe       	sbrs	r9, 6
    616a:	03 c0       	rjmp	.+6      	; 0x6172 <vfprintf+0x456>
    616c:	61 2f       	mov	r22, r17
    616e:	70 e0       	ldi	r23, 0x00	; 0
    6170:	02 c0       	rjmp	.+4      	; 0x6176 <vfprintf+0x45a>
    6172:	6f ef       	ldi	r22, 0xFF	; 255
    6174:	7f ef       	ldi	r23, 0xFF	; 255
    6176:	c6 01       	movw	r24, r12
    6178:	a7 d5       	rcall	.+2894   	; 0x6cc8 <strnlen_P>
    617a:	8c 01       	movw	r16, r24
    617c:	f9 2d       	mov	r31, r9
    617e:	f0 68       	ori	r31, 0x80	; 128
    6180:	9f 2e       	mov	r9, r31
    6182:	f3 fd       	sbrc	r31, 3
    6184:	18 c0       	rjmp	.+48     	; 0x61b6 <vfprintf+0x49a>
    6186:	85 2d       	mov	r24, r5
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	08 17       	cp	r16, r24
    618c:	19 07       	cpc	r17, r25
    618e:	98 f4       	brcc	.+38     	; 0x61b6 <vfprintf+0x49a>
    6190:	b7 01       	movw	r22, r14
    6192:	80 e2       	ldi	r24, 0x20	; 32
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	0d d6       	rcall	.+3098   	; 0x6db2 <fputc>
    6198:	5a 94       	dec	r5
    619a:	f5 cf       	rjmp	.-22     	; 0x6186 <vfprintf+0x46a>
    619c:	f6 01       	movw	r30, r12
    619e:	97 fc       	sbrc	r9, 7
    61a0:	85 91       	lpm	r24, Z+
    61a2:	97 fe       	sbrs	r9, 7
    61a4:	81 91       	ld	r24, Z+
    61a6:	6f 01       	movw	r12, r30
    61a8:	b7 01       	movw	r22, r14
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	02 d6       	rcall	.+3076   	; 0x6db2 <fputc>
    61ae:	51 10       	cpse	r5, r1
    61b0:	5a 94       	dec	r5
    61b2:	01 50       	subi	r16, 0x01	; 1
    61b4:	11 09       	sbc	r17, r1
    61b6:	01 15       	cp	r16, r1
    61b8:	11 05       	cpc	r17, r1
    61ba:	81 f7       	brne	.-32     	; 0x619c <vfprintf+0x480>
    61bc:	f0 c0       	rjmp	.+480    	; 0x639e <vfprintf+0x682>
    61be:	84 36       	cpi	r24, 0x64	; 100
    61c0:	11 f0       	breq	.+4      	; 0x61c6 <vfprintf+0x4aa>
    61c2:	89 36       	cpi	r24, 0x69	; 105
    61c4:	59 f5       	brne	.+86     	; 0x621c <vfprintf+0x500>
    61c6:	56 01       	movw	r10, r12
    61c8:	97 fe       	sbrs	r9, 7
    61ca:	09 c0       	rjmp	.+18     	; 0x61de <vfprintf+0x4c2>
    61cc:	24 e0       	ldi	r18, 0x04	; 4
    61ce:	a2 0e       	add	r10, r18
    61d0:	b1 1c       	adc	r11, r1
    61d2:	f6 01       	movw	r30, r12
    61d4:	60 81       	ld	r22, Z
    61d6:	71 81       	ldd	r23, Z+1	; 0x01
    61d8:	82 81       	ldd	r24, Z+2	; 0x02
    61da:	93 81       	ldd	r25, Z+3	; 0x03
    61dc:	0a c0       	rjmp	.+20     	; 0x61f2 <vfprintf+0x4d6>
    61de:	f2 e0       	ldi	r31, 0x02	; 2
    61e0:	af 0e       	add	r10, r31
    61e2:	b1 1c       	adc	r11, r1
    61e4:	f6 01       	movw	r30, r12
    61e6:	60 81       	ld	r22, Z
    61e8:	71 81       	ldd	r23, Z+1	; 0x01
    61ea:	07 2e       	mov	r0, r23
    61ec:	00 0c       	add	r0, r0
    61ee:	88 0b       	sbc	r24, r24
    61f0:	99 0b       	sbc	r25, r25
    61f2:	f9 2d       	mov	r31, r9
    61f4:	ff 76       	andi	r31, 0x6F	; 111
    61f6:	9f 2e       	mov	r9, r31
    61f8:	97 ff       	sbrs	r25, 7
    61fa:	09 c0       	rjmp	.+18     	; 0x620e <vfprintf+0x4f2>
    61fc:	90 95       	com	r25
    61fe:	80 95       	com	r24
    6200:	70 95       	com	r23
    6202:	61 95       	neg	r22
    6204:	7f 4f       	sbci	r23, 0xFF	; 255
    6206:	8f 4f       	sbci	r24, 0xFF	; 255
    6208:	9f 4f       	sbci	r25, 0xFF	; 255
    620a:	f0 68       	ori	r31, 0x80	; 128
    620c:	9f 2e       	mov	r9, r31
    620e:	2a e0       	ldi	r18, 0x0A	; 10
    6210:	30 e0       	ldi	r19, 0x00	; 0
    6212:	a3 01       	movw	r20, r6
    6214:	7d d6       	rcall	.+3322   	; 0x6f10 <__ultoa_invert>
    6216:	c8 2e       	mov	r12, r24
    6218:	c6 18       	sub	r12, r6
    621a:	3e c0       	rjmp	.+124    	; 0x6298 <vfprintf+0x57c>
    621c:	09 2d       	mov	r16, r9
    621e:	85 37       	cpi	r24, 0x75	; 117
    6220:	21 f4       	brne	.+8      	; 0x622a <vfprintf+0x50e>
    6222:	0f 7e       	andi	r16, 0xEF	; 239
    6224:	2a e0       	ldi	r18, 0x0A	; 10
    6226:	30 e0       	ldi	r19, 0x00	; 0
    6228:	1d c0       	rjmp	.+58     	; 0x6264 <vfprintf+0x548>
    622a:	09 7f       	andi	r16, 0xF9	; 249
    622c:	8f 36       	cpi	r24, 0x6F	; 111
    622e:	91 f0       	breq	.+36     	; 0x6254 <vfprintf+0x538>
    6230:	18 f4       	brcc	.+6      	; 0x6238 <vfprintf+0x51c>
    6232:	88 35       	cpi	r24, 0x58	; 88
    6234:	59 f0       	breq	.+22     	; 0x624c <vfprintf+0x530>
    6236:	bc c0       	rjmp	.+376    	; 0x63b0 <vfprintf+0x694>
    6238:	80 37       	cpi	r24, 0x70	; 112
    623a:	19 f0       	breq	.+6      	; 0x6242 <vfprintf+0x526>
    623c:	88 37       	cpi	r24, 0x78	; 120
    623e:	11 f0       	breq	.+4      	; 0x6244 <vfprintf+0x528>
    6240:	b7 c0       	rjmp	.+366    	; 0x63b0 <vfprintf+0x694>
    6242:	00 61       	ori	r16, 0x10	; 16
    6244:	04 ff       	sbrs	r16, 4
    6246:	09 c0       	rjmp	.+18     	; 0x625a <vfprintf+0x53e>
    6248:	04 60       	ori	r16, 0x04	; 4
    624a:	07 c0       	rjmp	.+14     	; 0x625a <vfprintf+0x53e>
    624c:	94 fe       	sbrs	r9, 4
    624e:	08 c0       	rjmp	.+16     	; 0x6260 <vfprintf+0x544>
    6250:	06 60       	ori	r16, 0x06	; 6
    6252:	06 c0       	rjmp	.+12     	; 0x6260 <vfprintf+0x544>
    6254:	28 e0       	ldi	r18, 0x08	; 8
    6256:	30 e0       	ldi	r19, 0x00	; 0
    6258:	05 c0       	rjmp	.+10     	; 0x6264 <vfprintf+0x548>
    625a:	20 e1       	ldi	r18, 0x10	; 16
    625c:	30 e0       	ldi	r19, 0x00	; 0
    625e:	02 c0       	rjmp	.+4      	; 0x6264 <vfprintf+0x548>
    6260:	20 e1       	ldi	r18, 0x10	; 16
    6262:	32 e0       	ldi	r19, 0x02	; 2
    6264:	56 01       	movw	r10, r12
    6266:	07 ff       	sbrs	r16, 7
    6268:	09 c0       	rjmp	.+18     	; 0x627c <vfprintf+0x560>
    626a:	84 e0       	ldi	r24, 0x04	; 4
    626c:	a8 0e       	add	r10, r24
    626e:	b1 1c       	adc	r11, r1
    6270:	f6 01       	movw	r30, r12
    6272:	60 81       	ld	r22, Z
    6274:	71 81       	ldd	r23, Z+1	; 0x01
    6276:	82 81       	ldd	r24, Z+2	; 0x02
    6278:	93 81       	ldd	r25, Z+3	; 0x03
    627a:	08 c0       	rjmp	.+16     	; 0x628c <vfprintf+0x570>
    627c:	f2 e0       	ldi	r31, 0x02	; 2
    627e:	af 0e       	add	r10, r31
    6280:	b1 1c       	adc	r11, r1
    6282:	f6 01       	movw	r30, r12
    6284:	60 81       	ld	r22, Z
    6286:	71 81       	ldd	r23, Z+1	; 0x01
    6288:	80 e0       	ldi	r24, 0x00	; 0
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	a3 01       	movw	r20, r6
    628e:	40 d6       	rcall	.+3200   	; 0x6f10 <__ultoa_invert>
    6290:	c8 2e       	mov	r12, r24
    6292:	c6 18       	sub	r12, r6
    6294:	0f 77       	andi	r16, 0x7F	; 127
    6296:	90 2e       	mov	r9, r16
    6298:	96 fe       	sbrs	r9, 6
    629a:	0b c0       	rjmp	.+22     	; 0x62b2 <vfprintf+0x596>
    629c:	09 2d       	mov	r16, r9
    629e:	0e 7f       	andi	r16, 0xFE	; 254
    62a0:	c1 16       	cp	r12, r17
    62a2:	50 f4       	brcc	.+20     	; 0x62b8 <vfprintf+0x59c>
    62a4:	94 fe       	sbrs	r9, 4
    62a6:	0a c0       	rjmp	.+20     	; 0x62bc <vfprintf+0x5a0>
    62a8:	92 fc       	sbrc	r9, 2
    62aa:	08 c0       	rjmp	.+16     	; 0x62bc <vfprintf+0x5a0>
    62ac:	09 2d       	mov	r16, r9
    62ae:	0e 7e       	andi	r16, 0xEE	; 238
    62b0:	05 c0       	rjmp	.+10     	; 0x62bc <vfprintf+0x5a0>
    62b2:	dc 2c       	mov	r13, r12
    62b4:	09 2d       	mov	r16, r9
    62b6:	03 c0       	rjmp	.+6      	; 0x62be <vfprintf+0x5a2>
    62b8:	dc 2c       	mov	r13, r12
    62ba:	01 c0       	rjmp	.+2      	; 0x62be <vfprintf+0x5a2>
    62bc:	d1 2e       	mov	r13, r17
    62be:	04 ff       	sbrs	r16, 4
    62c0:	0d c0       	rjmp	.+26     	; 0x62dc <vfprintf+0x5c0>
    62c2:	fe 01       	movw	r30, r28
    62c4:	ec 0d       	add	r30, r12
    62c6:	f1 1d       	adc	r31, r1
    62c8:	80 81       	ld	r24, Z
    62ca:	80 33       	cpi	r24, 0x30	; 48
    62cc:	11 f4       	brne	.+4      	; 0x62d2 <vfprintf+0x5b6>
    62ce:	09 7e       	andi	r16, 0xE9	; 233
    62d0:	09 c0       	rjmp	.+18     	; 0x62e4 <vfprintf+0x5c8>
    62d2:	02 ff       	sbrs	r16, 2
    62d4:	06 c0       	rjmp	.+12     	; 0x62e2 <vfprintf+0x5c6>
    62d6:	d3 94       	inc	r13
    62d8:	d3 94       	inc	r13
    62da:	04 c0       	rjmp	.+8      	; 0x62e4 <vfprintf+0x5c8>
    62dc:	80 2f       	mov	r24, r16
    62de:	86 78       	andi	r24, 0x86	; 134
    62e0:	09 f0       	breq	.+2      	; 0x62e4 <vfprintf+0x5c8>
    62e2:	d3 94       	inc	r13
    62e4:	03 fd       	sbrc	r16, 3
    62e6:	10 c0       	rjmp	.+32     	; 0x6308 <vfprintf+0x5ec>
    62e8:	00 ff       	sbrs	r16, 0
    62ea:	06 c0       	rjmp	.+12     	; 0x62f8 <vfprintf+0x5dc>
    62ec:	1c 2d       	mov	r17, r12
    62ee:	d5 14       	cp	r13, r5
    62f0:	78 f4       	brcc	.+30     	; 0x6310 <vfprintf+0x5f4>
    62f2:	15 0d       	add	r17, r5
    62f4:	1d 19       	sub	r17, r13
    62f6:	0c c0       	rjmp	.+24     	; 0x6310 <vfprintf+0x5f4>
    62f8:	d5 14       	cp	r13, r5
    62fa:	50 f4       	brcc	.+20     	; 0x6310 <vfprintf+0x5f4>
    62fc:	b7 01       	movw	r22, r14
    62fe:	80 e2       	ldi	r24, 0x20	; 32
    6300:	90 e0       	ldi	r25, 0x00	; 0
    6302:	57 d5       	rcall	.+2734   	; 0x6db2 <fputc>
    6304:	d3 94       	inc	r13
    6306:	f8 cf       	rjmp	.-16     	; 0x62f8 <vfprintf+0x5dc>
    6308:	d5 14       	cp	r13, r5
    630a:	10 f4       	brcc	.+4      	; 0x6310 <vfprintf+0x5f4>
    630c:	5d 18       	sub	r5, r13
    630e:	01 c0       	rjmp	.+2      	; 0x6312 <vfprintf+0x5f6>
    6310:	51 2c       	mov	r5, r1
    6312:	04 ff       	sbrs	r16, 4
    6314:	0f c0       	rjmp	.+30     	; 0x6334 <vfprintf+0x618>
    6316:	b7 01       	movw	r22, r14
    6318:	80 e3       	ldi	r24, 0x30	; 48
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	4a d5       	rcall	.+2708   	; 0x6db2 <fputc>
    631e:	02 ff       	sbrs	r16, 2
    6320:	16 c0       	rjmp	.+44     	; 0x634e <vfprintf+0x632>
    6322:	01 fd       	sbrc	r16, 1
    6324:	03 c0       	rjmp	.+6      	; 0x632c <vfprintf+0x610>
    6326:	88 e7       	ldi	r24, 0x78	; 120
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	02 c0       	rjmp	.+4      	; 0x6330 <vfprintf+0x614>
    632c:	88 e5       	ldi	r24, 0x58	; 88
    632e:	90 e0       	ldi	r25, 0x00	; 0
    6330:	b7 01       	movw	r22, r14
    6332:	0c c0       	rjmp	.+24     	; 0x634c <vfprintf+0x630>
    6334:	80 2f       	mov	r24, r16
    6336:	86 78       	andi	r24, 0x86	; 134
    6338:	51 f0       	breq	.+20     	; 0x634e <vfprintf+0x632>
    633a:	01 ff       	sbrs	r16, 1
    633c:	02 c0       	rjmp	.+4      	; 0x6342 <vfprintf+0x626>
    633e:	8b e2       	ldi	r24, 0x2B	; 43
    6340:	01 c0       	rjmp	.+2      	; 0x6344 <vfprintf+0x628>
    6342:	80 e2       	ldi	r24, 0x20	; 32
    6344:	07 fd       	sbrc	r16, 7
    6346:	8d e2       	ldi	r24, 0x2D	; 45
    6348:	b7 01       	movw	r22, r14
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	32 d5       	rcall	.+2660   	; 0x6db2 <fputc>
    634e:	c1 16       	cp	r12, r17
    6350:	30 f4       	brcc	.+12     	; 0x635e <vfprintf+0x642>
    6352:	b7 01       	movw	r22, r14
    6354:	80 e3       	ldi	r24, 0x30	; 48
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	2c d5       	rcall	.+2648   	; 0x6db2 <fputc>
    635a:	11 50       	subi	r17, 0x01	; 1
    635c:	f8 cf       	rjmp	.-16     	; 0x634e <vfprintf+0x632>
    635e:	ca 94       	dec	r12
    6360:	f3 01       	movw	r30, r6
    6362:	ec 0d       	add	r30, r12
    6364:	f1 1d       	adc	r31, r1
    6366:	80 81       	ld	r24, Z
    6368:	b7 01       	movw	r22, r14
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	22 d5       	rcall	.+2628   	; 0x6db2 <fputc>
    636e:	c1 10       	cpse	r12, r1
    6370:	f6 cf       	rjmp	.-20     	; 0x635e <vfprintf+0x642>
    6372:	15 c0       	rjmp	.+42     	; 0x639e <vfprintf+0x682>
    6374:	f4 e0       	ldi	r31, 0x04	; 4
    6376:	f5 15       	cp	r31, r5
    6378:	50 f5       	brcc	.+84     	; 0x63ce <vfprintf+0x6b2>
    637a:	84 e0       	ldi	r24, 0x04	; 4
    637c:	58 1a       	sub	r5, r24
    637e:	93 fe       	sbrs	r9, 3
    6380:	1e c0       	rjmp	.+60     	; 0x63be <vfprintf+0x6a2>
    6382:	01 11       	cpse	r16, r1
    6384:	25 c0       	rjmp	.+74     	; 0x63d0 <vfprintf+0x6b4>
    6386:	2c 85       	ldd	r18, Y+12	; 0x0c
    6388:	23 ff       	sbrs	r18, 3
    638a:	27 c0       	rjmp	.+78     	; 0x63da <vfprintf+0x6be>
    638c:	0a e9       	ldi	r16, 0x9A	; 154
    638e:	11 e0       	ldi	r17, 0x01	; 1
    6390:	39 2d       	mov	r19, r9
    6392:	30 71       	andi	r19, 0x10	; 16
    6394:	93 2e       	mov	r9, r19
    6396:	f8 01       	movw	r30, r16
    6398:	84 91       	lpm	r24, Z
    639a:	81 11       	cpse	r24, r1
    639c:	21 c0       	rjmp	.+66     	; 0x63e0 <vfprintf+0x6c4>
    639e:	55 20       	and	r5, r5
    63a0:	09 f4       	brne	.+2      	; 0x63a4 <vfprintf+0x688>
    63a2:	fc cc       	rjmp	.-1544   	; 0x5d9c <vfprintf+0x80>
    63a4:	b7 01       	movw	r22, r14
    63a6:	80 e2       	ldi	r24, 0x20	; 32
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	03 d5       	rcall	.+2566   	; 0x6db2 <fputc>
    63ac:	5a 94       	dec	r5
    63ae:	f7 cf       	rjmp	.-18     	; 0x639e <vfprintf+0x682>
    63b0:	f7 01       	movw	r30, r14
    63b2:	86 81       	ldd	r24, Z+6	; 0x06
    63b4:	97 81       	ldd	r25, Z+7	; 0x07
    63b6:	23 c0       	rjmp	.+70     	; 0x63fe <vfprintf+0x6e2>
    63b8:	8f ef       	ldi	r24, 0xFF	; 255
    63ba:	9f ef       	ldi	r25, 0xFF	; 255
    63bc:	20 c0       	rjmp	.+64     	; 0x63fe <vfprintf+0x6e2>
    63be:	b7 01       	movw	r22, r14
    63c0:	80 e2       	ldi	r24, 0x20	; 32
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	f6 d4       	rcall	.+2540   	; 0x6db2 <fputc>
    63c6:	5a 94       	dec	r5
    63c8:	51 10       	cpse	r5, r1
    63ca:	f9 cf       	rjmp	.-14     	; 0x63be <vfprintf+0x6a2>
    63cc:	da cf       	rjmp	.-76     	; 0x6382 <vfprintf+0x666>
    63ce:	51 2c       	mov	r5, r1
    63d0:	b7 01       	movw	r22, r14
    63d2:	80 2f       	mov	r24, r16
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	ed d4       	rcall	.+2522   	; 0x6db2 <fputc>
    63d8:	d6 cf       	rjmp	.-84     	; 0x6386 <vfprintf+0x66a>
    63da:	0e e9       	ldi	r16, 0x9E	; 158
    63dc:	11 e0       	ldi	r17, 0x01	; 1
    63de:	d8 cf       	rjmp	.-80     	; 0x6390 <vfprintf+0x674>
    63e0:	91 10       	cpse	r9, r1
    63e2:	80 52       	subi	r24, 0x20	; 32
    63e4:	b7 01       	movw	r22, r14
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	e4 d4       	rcall	.+2504   	; 0x6db2 <fputc>
    63ea:	0f 5f       	subi	r16, 0xFF	; 255
    63ec:	1f 4f       	sbci	r17, 0xFF	; 255
    63ee:	d3 cf       	rjmp	.-90     	; 0x6396 <vfprintf+0x67a>
    63f0:	23 e0       	ldi	r18, 0x03	; 3
    63f2:	25 15       	cp	r18, r5
    63f4:	10 f4       	brcc	.+4      	; 0x63fa <vfprintf+0x6de>
    63f6:	83 e0       	ldi	r24, 0x03	; 3
    63f8:	c1 cf       	rjmp	.-126    	; 0x637c <vfprintf+0x660>
    63fa:	51 2c       	mov	r5, r1
    63fc:	c4 cf       	rjmp	.-120    	; 0x6386 <vfprintf+0x66a>
    63fe:	60 96       	adiw	r28, 0x10	; 16
    6400:	0f b6       	in	r0, 0x3f	; 63
    6402:	f8 94       	cli
    6404:	de bf       	out	0x3e, r29	; 62
    6406:	0f be       	out	0x3f, r0	; 63
    6408:	cd bf       	out	0x3d, r28	; 61
    640a:	df 91       	pop	r29
    640c:	cf 91       	pop	r28
    640e:	1f 91       	pop	r17
    6410:	0f 91       	pop	r16
    6412:	ff 90       	pop	r15
    6414:	ef 90       	pop	r14
    6416:	df 90       	pop	r13
    6418:	cf 90       	pop	r12
    641a:	bf 90       	pop	r11
    641c:	af 90       	pop	r10
    641e:	9f 90       	pop	r9
    6420:	8f 90       	pop	r8
    6422:	7f 90       	pop	r7
    6424:	6f 90       	pop	r6
    6426:	5f 90       	pop	r5
    6428:	4f 90       	pop	r4
    642a:	3f 90       	pop	r3
    642c:	2f 90       	pop	r2
    642e:	08 95       	ret

00006430 <__subsf3>:
    6430:	50 58       	subi	r21, 0x80	; 128

00006432 <__addsf3>:
    6432:	bb 27       	eor	r27, r27
    6434:	aa 27       	eor	r26, r26
    6436:	0e d0       	rcall	.+28     	; 0x6454 <__addsf3x>
    6438:	4d c1       	rjmp	.+666    	; 0x66d4 <__fp_round>
    643a:	3e d1       	rcall	.+636    	; 0x66b8 <__fp_pscA>
    643c:	30 f0       	brcs	.+12     	; 0x644a <__addsf3+0x18>
    643e:	43 d1       	rcall	.+646    	; 0x66c6 <__fp_pscB>
    6440:	20 f0       	brcs	.+8      	; 0x644a <__addsf3+0x18>
    6442:	31 f4       	brne	.+12     	; 0x6450 <__addsf3+0x1e>
    6444:	9f 3f       	cpi	r25, 0xFF	; 255
    6446:	11 f4       	brne	.+4      	; 0x644c <__addsf3+0x1a>
    6448:	1e f4       	brtc	.+6      	; 0x6450 <__addsf3+0x1e>
    644a:	33 c1       	rjmp	.+614    	; 0x66b2 <__fp_nan>
    644c:	0e f4       	brtc	.+2      	; 0x6450 <__addsf3+0x1e>
    644e:	e0 95       	com	r30
    6450:	e7 fb       	bst	r30, 7
    6452:	29 c1       	rjmp	.+594    	; 0x66a6 <__fp_inf>

00006454 <__addsf3x>:
    6454:	e9 2f       	mov	r30, r25
    6456:	4f d1       	rcall	.+670    	; 0x66f6 <__fp_split3>
    6458:	80 f3       	brcs	.-32     	; 0x643a <__addsf3+0x8>
    645a:	ba 17       	cp	r27, r26
    645c:	62 07       	cpc	r22, r18
    645e:	73 07       	cpc	r23, r19
    6460:	84 07       	cpc	r24, r20
    6462:	95 07       	cpc	r25, r21
    6464:	18 f0       	brcs	.+6      	; 0x646c <__addsf3x+0x18>
    6466:	71 f4       	brne	.+28     	; 0x6484 <__addsf3x+0x30>
    6468:	9e f5       	brtc	.+102    	; 0x64d0 <__addsf3x+0x7c>
    646a:	67 c1       	rjmp	.+718    	; 0x673a <__fp_zero>
    646c:	0e f4       	brtc	.+2      	; 0x6470 <__addsf3x+0x1c>
    646e:	e0 95       	com	r30
    6470:	0b 2e       	mov	r0, r27
    6472:	ba 2f       	mov	r27, r26
    6474:	a0 2d       	mov	r26, r0
    6476:	0b 01       	movw	r0, r22
    6478:	b9 01       	movw	r22, r18
    647a:	90 01       	movw	r18, r0
    647c:	0c 01       	movw	r0, r24
    647e:	ca 01       	movw	r24, r20
    6480:	a0 01       	movw	r20, r0
    6482:	11 24       	eor	r1, r1
    6484:	ff 27       	eor	r31, r31
    6486:	59 1b       	sub	r21, r25
    6488:	99 f0       	breq	.+38     	; 0x64b0 <__addsf3x+0x5c>
    648a:	59 3f       	cpi	r21, 0xF9	; 249
    648c:	50 f4       	brcc	.+20     	; 0x64a2 <__addsf3x+0x4e>
    648e:	50 3e       	cpi	r21, 0xE0	; 224
    6490:	68 f1       	brcs	.+90     	; 0x64ec <__addsf3x+0x98>
    6492:	1a 16       	cp	r1, r26
    6494:	f0 40       	sbci	r31, 0x00	; 0
    6496:	a2 2f       	mov	r26, r18
    6498:	23 2f       	mov	r18, r19
    649a:	34 2f       	mov	r19, r20
    649c:	44 27       	eor	r20, r20
    649e:	58 5f       	subi	r21, 0xF8	; 248
    64a0:	f3 cf       	rjmp	.-26     	; 0x6488 <__addsf3x+0x34>
    64a2:	46 95       	lsr	r20
    64a4:	37 95       	ror	r19
    64a6:	27 95       	ror	r18
    64a8:	a7 95       	ror	r26
    64aa:	f0 40       	sbci	r31, 0x00	; 0
    64ac:	53 95       	inc	r21
    64ae:	c9 f7       	brne	.-14     	; 0x64a2 <__addsf3x+0x4e>
    64b0:	7e f4       	brtc	.+30     	; 0x64d0 <__addsf3x+0x7c>
    64b2:	1f 16       	cp	r1, r31
    64b4:	ba 0b       	sbc	r27, r26
    64b6:	62 0b       	sbc	r22, r18
    64b8:	73 0b       	sbc	r23, r19
    64ba:	84 0b       	sbc	r24, r20
    64bc:	ba f0       	brmi	.+46     	; 0x64ec <__addsf3x+0x98>
    64be:	91 50       	subi	r25, 0x01	; 1
    64c0:	a1 f0       	breq	.+40     	; 0x64ea <__addsf3x+0x96>
    64c2:	ff 0f       	add	r31, r31
    64c4:	bb 1f       	adc	r27, r27
    64c6:	66 1f       	adc	r22, r22
    64c8:	77 1f       	adc	r23, r23
    64ca:	88 1f       	adc	r24, r24
    64cc:	c2 f7       	brpl	.-16     	; 0x64be <__addsf3x+0x6a>
    64ce:	0e c0       	rjmp	.+28     	; 0x64ec <__addsf3x+0x98>
    64d0:	ba 0f       	add	r27, r26
    64d2:	62 1f       	adc	r22, r18
    64d4:	73 1f       	adc	r23, r19
    64d6:	84 1f       	adc	r24, r20
    64d8:	48 f4       	brcc	.+18     	; 0x64ec <__addsf3x+0x98>
    64da:	87 95       	ror	r24
    64dc:	77 95       	ror	r23
    64de:	67 95       	ror	r22
    64e0:	b7 95       	ror	r27
    64e2:	f7 95       	ror	r31
    64e4:	9e 3f       	cpi	r25, 0xFE	; 254
    64e6:	08 f0       	brcs	.+2      	; 0x64ea <__addsf3x+0x96>
    64e8:	b3 cf       	rjmp	.-154    	; 0x6450 <__addsf3+0x1e>
    64ea:	93 95       	inc	r25
    64ec:	88 0f       	add	r24, r24
    64ee:	08 f0       	brcs	.+2      	; 0x64f2 <__addsf3x+0x9e>
    64f0:	99 27       	eor	r25, r25
    64f2:	ee 0f       	add	r30, r30
    64f4:	97 95       	ror	r25
    64f6:	87 95       	ror	r24
    64f8:	08 95       	ret

000064fa <__divsf3>:
    64fa:	0c d0       	rcall	.+24     	; 0x6514 <__divsf3x>
    64fc:	eb c0       	rjmp	.+470    	; 0x66d4 <__fp_round>
    64fe:	e3 d0       	rcall	.+454    	; 0x66c6 <__fp_pscB>
    6500:	40 f0       	brcs	.+16     	; 0x6512 <__divsf3+0x18>
    6502:	da d0       	rcall	.+436    	; 0x66b8 <__fp_pscA>
    6504:	30 f0       	brcs	.+12     	; 0x6512 <__divsf3+0x18>
    6506:	21 f4       	brne	.+8      	; 0x6510 <__divsf3+0x16>
    6508:	5f 3f       	cpi	r21, 0xFF	; 255
    650a:	19 f0       	breq	.+6      	; 0x6512 <__divsf3+0x18>
    650c:	cc c0       	rjmp	.+408    	; 0x66a6 <__fp_inf>
    650e:	51 11       	cpse	r21, r1
    6510:	15 c1       	rjmp	.+554    	; 0x673c <__fp_szero>
    6512:	cf c0       	rjmp	.+414    	; 0x66b2 <__fp_nan>

00006514 <__divsf3x>:
    6514:	f0 d0       	rcall	.+480    	; 0x66f6 <__fp_split3>
    6516:	98 f3       	brcs	.-26     	; 0x64fe <__divsf3+0x4>

00006518 <__divsf3_pse>:
    6518:	99 23       	and	r25, r25
    651a:	c9 f3       	breq	.-14     	; 0x650e <__divsf3+0x14>
    651c:	55 23       	and	r21, r21
    651e:	b1 f3       	breq	.-20     	; 0x650c <__divsf3+0x12>
    6520:	95 1b       	sub	r25, r21
    6522:	55 0b       	sbc	r21, r21
    6524:	bb 27       	eor	r27, r27
    6526:	aa 27       	eor	r26, r26
    6528:	62 17       	cp	r22, r18
    652a:	73 07       	cpc	r23, r19
    652c:	84 07       	cpc	r24, r20
    652e:	38 f0       	brcs	.+14     	; 0x653e <__divsf3_pse+0x26>
    6530:	9f 5f       	subi	r25, 0xFF	; 255
    6532:	5f 4f       	sbci	r21, 0xFF	; 255
    6534:	22 0f       	add	r18, r18
    6536:	33 1f       	adc	r19, r19
    6538:	44 1f       	adc	r20, r20
    653a:	aa 1f       	adc	r26, r26
    653c:	a9 f3       	breq	.-22     	; 0x6528 <__divsf3_pse+0x10>
    653e:	33 d0       	rcall	.+102    	; 0x65a6 <__divsf3_pse+0x8e>
    6540:	0e 2e       	mov	r0, r30
    6542:	3a f0       	brmi	.+14     	; 0x6552 <__divsf3_pse+0x3a>
    6544:	e0 e8       	ldi	r30, 0x80	; 128
    6546:	30 d0       	rcall	.+96     	; 0x65a8 <__divsf3_pse+0x90>
    6548:	91 50       	subi	r25, 0x01	; 1
    654a:	50 40       	sbci	r21, 0x00	; 0
    654c:	e6 95       	lsr	r30
    654e:	00 1c       	adc	r0, r0
    6550:	ca f7       	brpl	.-14     	; 0x6544 <__divsf3_pse+0x2c>
    6552:	29 d0       	rcall	.+82     	; 0x65a6 <__divsf3_pse+0x8e>
    6554:	fe 2f       	mov	r31, r30
    6556:	27 d0       	rcall	.+78     	; 0x65a6 <__divsf3_pse+0x8e>
    6558:	66 0f       	add	r22, r22
    655a:	77 1f       	adc	r23, r23
    655c:	88 1f       	adc	r24, r24
    655e:	bb 1f       	adc	r27, r27
    6560:	26 17       	cp	r18, r22
    6562:	37 07       	cpc	r19, r23
    6564:	48 07       	cpc	r20, r24
    6566:	ab 07       	cpc	r26, r27
    6568:	b0 e8       	ldi	r27, 0x80	; 128
    656a:	09 f0       	breq	.+2      	; 0x656e <__divsf3_pse+0x56>
    656c:	bb 0b       	sbc	r27, r27
    656e:	80 2d       	mov	r24, r0
    6570:	bf 01       	movw	r22, r30
    6572:	ff 27       	eor	r31, r31
    6574:	93 58       	subi	r25, 0x83	; 131
    6576:	5f 4f       	sbci	r21, 0xFF	; 255
    6578:	2a f0       	brmi	.+10     	; 0x6584 <__divsf3_pse+0x6c>
    657a:	9e 3f       	cpi	r25, 0xFE	; 254
    657c:	51 05       	cpc	r21, r1
    657e:	68 f0       	brcs	.+26     	; 0x659a <__divsf3_pse+0x82>
    6580:	92 c0       	rjmp	.+292    	; 0x66a6 <__fp_inf>
    6582:	dc c0       	rjmp	.+440    	; 0x673c <__fp_szero>
    6584:	5f 3f       	cpi	r21, 0xFF	; 255
    6586:	ec f3       	brlt	.-6      	; 0x6582 <__divsf3_pse+0x6a>
    6588:	98 3e       	cpi	r25, 0xE8	; 232
    658a:	dc f3       	brlt	.-10     	; 0x6582 <__divsf3_pse+0x6a>
    658c:	86 95       	lsr	r24
    658e:	77 95       	ror	r23
    6590:	67 95       	ror	r22
    6592:	b7 95       	ror	r27
    6594:	f7 95       	ror	r31
    6596:	9f 5f       	subi	r25, 0xFF	; 255
    6598:	c9 f7       	brne	.-14     	; 0x658c <__divsf3_pse+0x74>
    659a:	88 0f       	add	r24, r24
    659c:	91 1d       	adc	r25, r1
    659e:	96 95       	lsr	r25
    65a0:	87 95       	ror	r24
    65a2:	97 f9       	bld	r25, 7
    65a4:	08 95       	ret
    65a6:	e1 e0       	ldi	r30, 0x01	; 1
    65a8:	66 0f       	add	r22, r22
    65aa:	77 1f       	adc	r23, r23
    65ac:	88 1f       	adc	r24, r24
    65ae:	bb 1f       	adc	r27, r27
    65b0:	62 17       	cp	r22, r18
    65b2:	73 07       	cpc	r23, r19
    65b4:	84 07       	cpc	r24, r20
    65b6:	ba 07       	cpc	r27, r26
    65b8:	20 f0       	brcs	.+8      	; 0x65c2 <__divsf3_pse+0xaa>
    65ba:	62 1b       	sub	r22, r18
    65bc:	73 0b       	sbc	r23, r19
    65be:	84 0b       	sbc	r24, r20
    65c0:	ba 0b       	sbc	r27, r26
    65c2:	ee 1f       	adc	r30, r30
    65c4:	88 f7       	brcc	.-30     	; 0x65a8 <__divsf3_pse+0x90>
    65c6:	e0 95       	com	r30
    65c8:	08 95       	ret

000065ca <__fixsfsi>:
    65ca:	04 d0       	rcall	.+8      	; 0x65d4 <__fixunssfsi>
    65cc:	68 94       	set
    65ce:	b1 11       	cpse	r27, r1
    65d0:	b5 c0       	rjmp	.+362    	; 0x673c <__fp_szero>
    65d2:	08 95       	ret

000065d4 <__fixunssfsi>:
    65d4:	98 d0       	rcall	.+304    	; 0x6706 <__fp_splitA>
    65d6:	88 f0       	brcs	.+34     	; 0x65fa <__fixunssfsi+0x26>
    65d8:	9f 57       	subi	r25, 0x7F	; 127
    65da:	90 f0       	brcs	.+36     	; 0x6600 <__fixunssfsi+0x2c>
    65dc:	b9 2f       	mov	r27, r25
    65de:	99 27       	eor	r25, r25
    65e0:	b7 51       	subi	r27, 0x17	; 23
    65e2:	a0 f0       	brcs	.+40     	; 0x660c <__fixunssfsi+0x38>
    65e4:	d1 f0       	breq	.+52     	; 0x661a <__fixunssfsi+0x46>
    65e6:	66 0f       	add	r22, r22
    65e8:	77 1f       	adc	r23, r23
    65ea:	88 1f       	adc	r24, r24
    65ec:	99 1f       	adc	r25, r25
    65ee:	1a f0       	brmi	.+6      	; 0x65f6 <__fixunssfsi+0x22>
    65f0:	ba 95       	dec	r27
    65f2:	c9 f7       	brne	.-14     	; 0x65e6 <__fixunssfsi+0x12>
    65f4:	12 c0       	rjmp	.+36     	; 0x661a <__fixunssfsi+0x46>
    65f6:	b1 30       	cpi	r27, 0x01	; 1
    65f8:	81 f0       	breq	.+32     	; 0x661a <__fixunssfsi+0x46>
    65fa:	9f d0       	rcall	.+318    	; 0x673a <__fp_zero>
    65fc:	b1 e0       	ldi	r27, 0x01	; 1
    65fe:	08 95       	ret
    6600:	9c c0       	rjmp	.+312    	; 0x673a <__fp_zero>
    6602:	67 2f       	mov	r22, r23
    6604:	78 2f       	mov	r23, r24
    6606:	88 27       	eor	r24, r24
    6608:	b8 5f       	subi	r27, 0xF8	; 248
    660a:	39 f0       	breq	.+14     	; 0x661a <__fixunssfsi+0x46>
    660c:	b9 3f       	cpi	r27, 0xF9	; 249
    660e:	cc f3       	brlt	.-14     	; 0x6602 <__fixunssfsi+0x2e>
    6610:	86 95       	lsr	r24
    6612:	77 95       	ror	r23
    6614:	67 95       	ror	r22
    6616:	b3 95       	inc	r27
    6618:	d9 f7       	brne	.-10     	; 0x6610 <__fixunssfsi+0x3c>
    661a:	3e f4       	brtc	.+14     	; 0x662a <__fixunssfsi+0x56>
    661c:	90 95       	com	r25
    661e:	80 95       	com	r24
    6620:	70 95       	com	r23
    6622:	61 95       	neg	r22
    6624:	7f 4f       	sbci	r23, 0xFF	; 255
    6626:	8f 4f       	sbci	r24, 0xFF	; 255
    6628:	9f 4f       	sbci	r25, 0xFF	; 255
    662a:	08 95       	ret

0000662c <__floatunsisf>:
    662c:	e8 94       	clt
    662e:	09 c0       	rjmp	.+18     	; 0x6642 <__floatsisf+0x12>

00006630 <__floatsisf>:
    6630:	97 fb       	bst	r25, 7
    6632:	3e f4       	brtc	.+14     	; 0x6642 <__floatsisf+0x12>
    6634:	90 95       	com	r25
    6636:	80 95       	com	r24
    6638:	70 95       	com	r23
    663a:	61 95       	neg	r22
    663c:	7f 4f       	sbci	r23, 0xFF	; 255
    663e:	8f 4f       	sbci	r24, 0xFF	; 255
    6640:	9f 4f       	sbci	r25, 0xFF	; 255
    6642:	99 23       	and	r25, r25
    6644:	a9 f0       	breq	.+42     	; 0x6670 <__floatsisf+0x40>
    6646:	f9 2f       	mov	r31, r25
    6648:	96 e9       	ldi	r25, 0x96	; 150
    664a:	bb 27       	eor	r27, r27
    664c:	93 95       	inc	r25
    664e:	f6 95       	lsr	r31
    6650:	87 95       	ror	r24
    6652:	77 95       	ror	r23
    6654:	67 95       	ror	r22
    6656:	b7 95       	ror	r27
    6658:	f1 11       	cpse	r31, r1
    665a:	f8 cf       	rjmp	.-16     	; 0x664c <__floatsisf+0x1c>
    665c:	fa f4       	brpl	.+62     	; 0x669c <__floatsisf+0x6c>
    665e:	bb 0f       	add	r27, r27
    6660:	11 f4       	brne	.+4      	; 0x6666 <__floatsisf+0x36>
    6662:	60 ff       	sbrs	r22, 0
    6664:	1b c0       	rjmp	.+54     	; 0x669c <__floatsisf+0x6c>
    6666:	6f 5f       	subi	r22, 0xFF	; 255
    6668:	7f 4f       	sbci	r23, 0xFF	; 255
    666a:	8f 4f       	sbci	r24, 0xFF	; 255
    666c:	9f 4f       	sbci	r25, 0xFF	; 255
    666e:	16 c0       	rjmp	.+44     	; 0x669c <__floatsisf+0x6c>
    6670:	88 23       	and	r24, r24
    6672:	11 f0       	breq	.+4      	; 0x6678 <__floatsisf+0x48>
    6674:	96 e9       	ldi	r25, 0x96	; 150
    6676:	11 c0       	rjmp	.+34     	; 0x669a <__floatsisf+0x6a>
    6678:	77 23       	and	r23, r23
    667a:	21 f0       	breq	.+8      	; 0x6684 <__floatsisf+0x54>
    667c:	9e e8       	ldi	r25, 0x8E	; 142
    667e:	87 2f       	mov	r24, r23
    6680:	76 2f       	mov	r23, r22
    6682:	05 c0       	rjmp	.+10     	; 0x668e <__floatsisf+0x5e>
    6684:	66 23       	and	r22, r22
    6686:	71 f0       	breq	.+28     	; 0x66a4 <__floatsisf+0x74>
    6688:	96 e8       	ldi	r25, 0x86	; 134
    668a:	86 2f       	mov	r24, r22
    668c:	70 e0       	ldi	r23, 0x00	; 0
    668e:	60 e0       	ldi	r22, 0x00	; 0
    6690:	2a f0       	brmi	.+10     	; 0x669c <__floatsisf+0x6c>
    6692:	9a 95       	dec	r25
    6694:	66 0f       	add	r22, r22
    6696:	77 1f       	adc	r23, r23
    6698:	88 1f       	adc	r24, r24
    669a:	da f7       	brpl	.-10     	; 0x6692 <__floatsisf+0x62>
    669c:	88 0f       	add	r24, r24
    669e:	96 95       	lsr	r25
    66a0:	87 95       	ror	r24
    66a2:	97 f9       	bld	r25, 7
    66a4:	08 95       	ret

000066a6 <__fp_inf>:
    66a6:	97 f9       	bld	r25, 7
    66a8:	9f 67       	ori	r25, 0x7F	; 127
    66aa:	80 e8       	ldi	r24, 0x80	; 128
    66ac:	70 e0       	ldi	r23, 0x00	; 0
    66ae:	60 e0       	ldi	r22, 0x00	; 0
    66b0:	08 95       	ret

000066b2 <__fp_nan>:
    66b2:	9f ef       	ldi	r25, 0xFF	; 255
    66b4:	80 ec       	ldi	r24, 0xC0	; 192
    66b6:	08 95       	ret

000066b8 <__fp_pscA>:
    66b8:	00 24       	eor	r0, r0
    66ba:	0a 94       	dec	r0
    66bc:	16 16       	cp	r1, r22
    66be:	17 06       	cpc	r1, r23
    66c0:	18 06       	cpc	r1, r24
    66c2:	09 06       	cpc	r0, r25
    66c4:	08 95       	ret

000066c6 <__fp_pscB>:
    66c6:	00 24       	eor	r0, r0
    66c8:	0a 94       	dec	r0
    66ca:	12 16       	cp	r1, r18
    66cc:	13 06       	cpc	r1, r19
    66ce:	14 06       	cpc	r1, r20
    66d0:	05 06       	cpc	r0, r21
    66d2:	08 95       	ret

000066d4 <__fp_round>:
    66d4:	09 2e       	mov	r0, r25
    66d6:	03 94       	inc	r0
    66d8:	00 0c       	add	r0, r0
    66da:	11 f4       	brne	.+4      	; 0x66e0 <__fp_round+0xc>
    66dc:	88 23       	and	r24, r24
    66de:	52 f0       	brmi	.+20     	; 0x66f4 <__fp_round+0x20>
    66e0:	bb 0f       	add	r27, r27
    66e2:	40 f4       	brcc	.+16     	; 0x66f4 <__fp_round+0x20>
    66e4:	bf 2b       	or	r27, r31
    66e6:	11 f4       	brne	.+4      	; 0x66ec <__fp_round+0x18>
    66e8:	60 ff       	sbrs	r22, 0
    66ea:	04 c0       	rjmp	.+8      	; 0x66f4 <__fp_round+0x20>
    66ec:	6f 5f       	subi	r22, 0xFF	; 255
    66ee:	7f 4f       	sbci	r23, 0xFF	; 255
    66f0:	8f 4f       	sbci	r24, 0xFF	; 255
    66f2:	9f 4f       	sbci	r25, 0xFF	; 255
    66f4:	08 95       	ret

000066f6 <__fp_split3>:
    66f6:	57 fd       	sbrc	r21, 7
    66f8:	90 58       	subi	r25, 0x80	; 128
    66fa:	44 0f       	add	r20, r20
    66fc:	55 1f       	adc	r21, r21
    66fe:	59 f0       	breq	.+22     	; 0x6716 <__fp_splitA+0x10>
    6700:	5f 3f       	cpi	r21, 0xFF	; 255
    6702:	71 f0       	breq	.+28     	; 0x6720 <__fp_splitA+0x1a>
    6704:	47 95       	ror	r20

00006706 <__fp_splitA>:
    6706:	88 0f       	add	r24, r24
    6708:	97 fb       	bst	r25, 7
    670a:	99 1f       	adc	r25, r25
    670c:	61 f0       	breq	.+24     	; 0x6726 <__fp_splitA+0x20>
    670e:	9f 3f       	cpi	r25, 0xFF	; 255
    6710:	79 f0       	breq	.+30     	; 0x6730 <__fp_splitA+0x2a>
    6712:	87 95       	ror	r24
    6714:	08 95       	ret
    6716:	12 16       	cp	r1, r18
    6718:	13 06       	cpc	r1, r19
    671a:	14 06       	cpc	r1, r20
    671c:	55 1f       	adc	r21, r21
    671e:	f2 cf       	rjmp	.-28     	; 0x6704 <__fp_split3+0xe>
    6720:	46 95       	lsr	r20
    6722:	f1 df       	rcall	.-30     	; 0x6706 <__fp_splitA>
    6724:	08 c0       	rjmp	.+16     	; 0x6736 <__fp_splitA+0x30>
    6726:	16 16       	cp	r1, r22
    6728:	17 06       	cpc	r1, r23
    672a:	18 06       	cpc	r1, r24
    672c:	99 1f       	adc	r25, r25
    672e:	f1 cf       	rjmp	.-30     	; 0x6712 <__fp_splitA+0xc>
    6730:	86 95       	lsr	r24
    6732:	71 05       	cpc	r23, r1
    6734:	61 05       	cpc	r22, r1
    6736:	08 94       	sec
    6738:	08 95       	ret

0000673a <__fp_zero>:
    673a:	e8 94       	clt

0000673c <__fp_szero>:
    673c:	bb 27       	eor	r27, r27
    673e:	66 27       	eor	r22, r22
    6740:	77 27       	eor	r23, r23
    6742:	cb 01       	movw	r24, r22
    6744:	97 f9       	bld	r25, 7
    6746:	08 95       	ret

00006748 <__mulsf3>:
    6748:	0b d0       	rcall	.+22     	; 0x6760 <__mulsf3x>
    674a:	c4 cf       	rjmp	.-120    	; 0x66d4 <__fp_round>
    674c:	b5 df       	rcall	.-150    	; 0x66b8 <__fp_pscA>
    674e:	28 f0       	brcs	.+10     	; 0x675a <__mulsf3+0x12>
    6750:	ba df       	rcall	.-140    	; 0x66c6 <__fp_pscB>
    6752:	18 f0       	brcs	.+6      	; 0x675a <__mulsf3+0x12>
    6754:	95 23       	and	r25, r21
    6756:	09 f0       	breq	.+2      	; 0x675a <__mulsf3+0x12>
    6758:	a6 cf       	rjmp	.-180    	; 0x66a6 <__fp_inf>
    675a:	ab cf       	rjmp	.-170    	; 0x66b2 <__fp_nan>
    675c:	11 24       	eor	r1, r1
    675e:	ee cf       	rjmp	.-36     	; 0x673c <__fp_szero>

00006760 <__mulsf3x>:
    6760:	ca df       	rcall	.-108    	; 0x66f6 <__fp_split3>
    6762:	a0 f3       	brcs	.-24     	; 0x674c <__mulsf3+0x4>

00006764 <__mulsf3_pse>:
    6764:	95 9f       	mul	r25, r21
    6766:	d1 f3       	breq	.-12     	; 0x675c <__mulsf3+0x14>
    6768:	95 0f       	add	r25, r21
    676a:	50 e0       	ldi	r21, 0x00	; 0
    676c:	55 1f       	adc	r21, r21
    676e:	62 9f       	mul	r22, r18
    6770:	f0 01       	movw	r30, r0
    6772:	72 9f       	mul	r23, r18
    6774:	bb 27       	eor	r27, r27
    6776:	f0 0d       	add	r31, r0
    6778:	b1 1d       	adc	r27, r1
    677a:	63 9f       	mul	r22, r19
    677c:	aa 27       	eor	r26, r26
    677e:	f0 0d       	add	r31, r0
    6780:	b1 1d       	adc	r27, r1
    6782:	aa 1f       	adc	r26, r26
    6784:	64 9f       	mul	r22, r20
    6786:	66 27       	eor	r22, r22
    6788:	b0 0d       	add	r27, r0
    678a:	a1 1d       	adc	r26, r1
    678c:	66 1f       	adc	r22, r22
    678e:	82 9f       	mul	r24, r18
    6790:	22 27       	eor	r18, r18
    6792:	b0 0d       	add	r27, r0
    6794:	a1 1d       	adc	r26, r1
    6796:	62 1f       	adc	r22, r18
    6798:	73 9f       	mul	r23, r19
    679a:	b0 0d       	add	r27, r0
    679c:	a1 1d       	adc	r26, r1
    679e:	62 1f       	adc	r22, r18
    67a0:	83 9f       	mul	r24, r19
    67a2:	a0 0d       	add	r26, r0
    67a4:	61 1d       	adc	r22, r1
    67a6:	22 1f       	adc	r18, r18
    67a8:	74 9f       	mul	r23, r20
    67aa:	33 27       	eor	r19, r19
    67ac:	a0 0d       	add	r26, r0
    67ae:	61 1d       	adc	r22, r1
    67b0:	23 1f       	adc	r18, r19
    67b2:	84 9f       	mul	r24, r20
    67b4:	60 0d       	add	r22, r0
    67b6:	21 1d       	adc	r18, r1
    67b8:	82 2f       	mov	r24, r18
    67ba:	76 2f       	mov	r23, r22
    67bc:	6a 2f       	mov	r22, r26
    67be:	11 24       	eor	r1, r1
    67c0:	9f 57       	subi	r25, 0x7F	; 127
    67c2:	50 40       	sbci	r21, 0x00	; 0
    67c4:	8a f0       	brmi	.+34     	; 0x67e8 <__mulsf3_pse+0x84>
    67c6:	e1 f0       	breq	.+56     	; 0x6800 <__mulsf3_pse+0x9c>
    67c8:	88 23       	and	r24, r24
    67ca:	4a f0       	brmi	.+18     	; 0x67de <__mulsf3_pse+0x7a>
    67cc:	ee 0f       	add	r30, r30
    67ce:	ff 1f       	adc	r31, r31
    67d0:	bb 1f       	adc	r27, r27
    67d2:	66 1f       	adc	r22, r22
    67d4:	77 1f       	adc	r23, r23
    67d6:	88 1f       	adc	r24, r24
    67d8:	91 50       	subi	r25, 0x01	; 1
    67da:	50 40       	sbci	r21, 0x00	; 0
    67dc:	a9 f7       	brne	.-22     	; 0x67c8 <__mulsf3_pse+0x64>
    67de:	9e 3f       	cpi	r25, 0xFE	; 254
    67e0:	51 05       	cpc	r21, r1
    67e2:	70 f0       	brcs	.+28     	; 0x6800 <__mulsf3_pse+0x9c>
    67e4:	60 cf       	rjmp	.-320    	; 0x66a6 <__fp_inf>
    67e6:	aa cf       	rjmp	.-172    	; 0x673c <__fp_szero>
    67e8:	5f 3f       	cpi	r21, 0xFF	; 255
    67ea:	ec f3       	brlt	.-6      	; 0x67e6 <__mulsf3_pse+0x82>
    67ec:	98 3e       	cpi	r25, 0xE8	; 232
    67ee:	dc f3       	brlt	.-10     	; 0x67e6 <__mulsf3_pse+0x82>
    67f0:	86 95       	lsr	r24
    67f2:	77 95       	ror	r23
    67f4:	67 95       	ror	r22
    67f6:	b7 95       	ror	r27
    67f8:	f7 95       	ror	r31
    67fa:	e7 95       	ror	r30
    67fc:	9f 5f       	subi	r25, 0xFF	; 255
    67fe:	c1 f7       	brne	.-16     	; 0x67f0 <__mulsf3_pse+0x8c>
    6800:	fe 2b       	or	r31, r30
    6802:	88 0f       	add	r24, r24
    6804:	91 1d       	adc	r25, r1
    6806:	96 95       	lsr	r25
    6808:	87 95       	ror	r24
    680a:	97 f9       	bld	r25, 7
    680c:	08 95       	ret

0000680e <__divmodhi4>:
    680e:	97 fb       	bst	r25, 7
    6810:	07 2e       	mov	r0, r23
    6812:	16 f4       	brtc	.+4      	; 0x6818 <__divmodhi4+0xa>
    6814:	00 94       	com	r0
    6816:	06 d0       	rcall	.+12     	; 0x6824 <__divmodhi4_neg1>
    6818:	77 fd       	sbrc	r23, 7
    681a:	08 d0       	rcall	.+16     	; 0x682c <__divmodhi4_neg2>
    681c:	44 d0       	rcall	.+136    	; 0x68a6 <__udivmodhi4>
    681e:	07 fc       	sbrc	r0, 7
    6820:	05 d0       	rcall	.+10     	; 0x682c <__divmodhi4_neg2>
    6822:	3e f4       	brtc	.+14     	; 0x6832 <__divmodhi4_exit>

00006824 <__divmodhi4_neg1>:
    6824:	90 95       	com	r25
    6826:	81 95       	neg	r24
    6828:	9f 4f       	sbci	r25, 0xFF	; 255
    682a:	08 95       	ret

0000682c <__divmodhi4_neg2>:
    682c:	70 95       	com	r23
    682e:	61 95       	neg	r22
    6830:	7f 4f       	sbci	r23, 0xFF	; 255

00006832 <__divmodhi4_exit>:
    6832:	08 95       	ret

00006834 <__udivmodsi4>:
    6834:	a1 e2       	ldi	r26, 0x21	; 33
    6836:	1a 2e       	mov	r1, r26
    6838:	aa 1b       	sub	r26, r26
    683a:	bb 1b       	sub	r27, r27
    683c:	fd 01       	movw	r30, r26
    683e:	0d c0       	rjmp	.+26     	; 0x685a <__udivmodsi4_ep>

00006840 <__udivmodsi4_loop>:
    6840:	aa 1f       	adc	r26, r26
    6842:	bb 1f       	adc	r27, r27
    6844:	ee 1f       	adc	r30, r30
    6846:	ff 1f       	adc	r31, r31
    6848:	a2 17       	cp	r26, r18
    684a:	b3 07       	cpc	r27, r19
    684c:	e4 07       	cpc	r30, r20
    684e:	f5 07       	cpc	r31, r21
    6850:	20 f0       	brcs	.+8      	; 0x685a <__udivmodsi4_ep>
    6852:	a2 1b       	sub	r26, r18
    6854:	b3 0b       	sbc	r27, r19
    6856:	e4 0b       	sbc	r30, r20
    6858:	f5 0b       	sbc	r31, r21

0000685a <__udivmodsi4_ep>:
    685a:	66 1f       	adc	r22, r22
    685c:	77 1f       	adc	r23, r23
    685e:	88 1f       	adc	r24, r24
    6860:	99 1f       	adc	r25, r25
    6862:	1a 94       	dec	r1
    6864:	69 f7       	brne	.-38     	; 0x6840 <__udivmodsi4_loop>
    6866:	60 95       	com	r22
    6868:	70 95       	com	r23
    686a:	80 95       	com	r24
    686c:	90 95       	com	r25
    686e:	9b 01       	movw	r18, r22
    6870:	ac 01       	movw	r20, r24
    6872:	bd 01       	movw	r22, r26
    6874:	cf 01       	movw	r24, r30
    6876:	08 95       	ret

00006878 <__tablejump2__>:
    6878:	ee 0f       	add	r30, r30
    687a:	ff 1f       	adc	r31, r31
    687c:	88 1f       	adc	r24, r24
    687e:	8b bf       	out	0x3b, r24	; 59
    6880:	07 90       	elpm	r0, Z+
    6882:	f6 91       	elpm	r31, Z
    6884:	e0 2d       	mov	r30, r0
    6886:	19 94       	eijmp

00006888 <__umulhisi3>:
    6888:	a2 9f       	mul	r26, r18
    688a:	b0 01       	movw	r22, r0
    688c:	b3 9f       	mul	r27, r19
    688e:	c0 01       	movw	r24, r0
    6890:	a3 9f       	mul	r26, r19
    6892:	70 0d       	add	r23, r0
    6894:	81 1d       	adc	r24, r1
    6896:	11 24       	eor	r1, r1
    6898:	91 1d       	adc	r25, r1
    689a:	b2 9f       	mul	r27, r18
    689c:	70 0d       	add	r23, r0
    689e:	81 1d       	adc	r24, r1
    68a0:	11 24       	eor	r1, r1
    68a2:	91 1d       	adc	r25, r1
    68a4:	08 95       	ret

000068a6 <__udivmodhi4>:
    68a6:	aa 1b       	sub	r26, r26
    68a8:	bb 1b       	sub	r27, r27
    68aa:	51 e1       	ldi	r21, 0x11	; 17
    68ac:	07 c0       	rjmp	.+14     	; 0x68bc <__udivmodhi4_ep>

000068ae <__udivmodhi4_loop>:
    68ae:	aa 1f       	adc	r26, r26
    68b0:	bb 1f       	adc	r27, r27
    68b2:	a6 17       	cp	r26, r22
    68b4:	b7 07       	cpc	r27, r23
    68b6:	10 f0       	brcs	.+4      	; 0x68bc <__udivmodhi4_ep>
    68b8:	a6 1b       	sub	r26, r22
    68ba:	b7 0b       	sbc	r27, r23

000068bc <__udivmodhi4_ep>:
    68bc:	88 1f       	adc	r24, r24
    68be:	99 1f       	adc	r25, r25
    68c0:	5a 95       	dec	r21
    68c2:	a9 f7       	brne	.-22     	; 0x68ae <__udivmodhi4_loop>
    68c4:	80 95       	com	r24
    68c6:	90 95       	com	r25
    68c8:	bc 01       	movw	r22, r24
    68ca:	cd 01       	movw	r24, r26
    68cc:	08 95       	ret

000068ce <malloc>:
    68ce:	0f 93       	push	r16
    68d0:	1f 93       	push	r17
    68d2:	cf 93       	push	r28
    68d4:	df 93       	push	r29
    68d6:	82 30       	cpi	r24, 0x02	; 2
    68d8:	91 05       	cpc	r25, r1
    68da:	10 f4       	brcc	.+4      	; 0x68e0 <malloc+0x12>
    68dc:	82 e0       	ldi	r24, 0x02	; 2
    68de:	90 e0       	ldi	r25, 0x00	; 0
    68e0:	e0 91 7c 1b 	lds	r30, 0x1B7C	; 0x801b7c <__flp>
    68e4:	f0 91 7d 1b 	lds	r31, 0x1B7D	; 0x801b7d <__flp+0x1>
    68e8:	20 e0       	ldi	r18, 0x00	; 0
    68ea:	30 e0       	ldi	r19, 0x00	; 0
    68ec:	a0 e0       	ldi	r26, 0x00	; 0
    68ee:	b0 e0       	ldi	r27, 0x00	; 0
    68f0:	30 97       	sbiw	r30, 0x00	; 0
    68f2:	19 f1       	breq	.+70     	; 0x693a <malloc+0x6c>
    68f4:	40 81       	ld	r20, Z
    68f6:	51 81       	ldd	r21, Z+1	; 0x01
    68f8:	02 81       	ldd	r16, Z+2	; 0x02
    68fa:	13 81       	ldd	r17, Z+3	; 0x03
    68fc:	48 17       	cp	r20, r24
    68fe:	59 07       	cpc	r21, r25
    6900:	c8 f0       	brcs	.+50     	; 0x6934 <malloc+0x66>
    6902:	84 17       	cp	r24, r20
    6904:	95 07       	cpc	r25, r21
    6906:	69 f4       	brne	.+26     	; 0x6922 <malloc+0x54>
    6908:	10 97       	sbiw	r26, 0x00	; 0
    690a:	31 f0       	breq	.+12     	; 0x6918 <malloc+0x4a>
    690c:	12 96       	adiw	r26, 0x02	; 2
    690e:	0c 93       	st	X, r16
    6910:	12 97       	sbiw	r26, 0x02	; 2
    6912:	13 96       	adiw	r26, 0x03	; 3
    6914:	1c 93       	st	X, r17
    6916:	27 c0       	rjmp	.+78     	; 0x6966 <malloc+0x98>
    6918:	00 93 7c 1b 	sts	0x1B7C, r16	; 0x801b7c <__flp>
    691c:	10 93 7d 1b 	sts	0x1B7D, r17	; 0x801b7d <__flp+0x1>
    6920:	22 c0       	rjmp	.+68     	; 0x6966 <malloc+0x98>
    6922:	21 15       	cp	r18, r1
    6924:	31 05       	cpc	r19, r1
    6926:	19 f0       	breq	.+6      	; 0x692e <malloc+0x60>
    6928:	42 17       	cp	r20, r18
    692a:	53 07       	cpc	r21, r19
    692c:	18 f4       	brcc	.+6      	; 0x6934 <malloc+0x66>
    692e:	9a 01       	movw	r18, r20
    6930:	bd 01       	movw	r22, r26
    6932:	ef 01       	movw	r28, r30
    6934:	df 01       	movw	r26, r30
    6936:	f8 01       	movw	r30, r16
    6938:	db cf       	rjmp	.-74     	; 0x68f0 <malloc+0x22>
    693a:	21 15       	cp	r18, r1
    693c:	31 05       	cpc	r19, r1
    693e:	f9 f0       	breq	.+62     	; 0x697e <malloc+0xb0>
    6940:	28 1b       	sub	r18, r24
    6942:	39 0b       	sbc	r19, r25
    6944:	24 30       	cpi	r18, 0x04	; 4
    6946:	31 05       	cpc	r19, r1
    6948:	80 f4       	brcc	.+32     	; 0x696a <malloc+0x9c>
    694a:	8a 81       	ldd	r24, Y+2	; 0x02
    694c:	9b 81       	ldd	r25, Y+3	; 0x03
    694e:	61 15       	cp	r22, r1
    6950:	71 05       	cpc	r23, r1
    6952:	21 f0       	breq	.+8      	; 0x695c <malloc+0x8e>
    6954:	fb 01       	movw	r30, r22
    6956:	93 83       	std	Z+3, r25	; 0x03
    6958:	82 83       	std	Z+2, r24	; 0x02
    695a:	04 c0       	rjmp	.+8      	; 0x6964 <malloc+0x96>
    695c:	90 93 7d 1b 	sts	0x1B7D, r25	; 0x801b7d <__flp+0x1>
    6960:	80 93 7c 1b 	sts	0x1B7C, r24	; 0x801b7c <__flp>
    6964:	fe 01       	movw	r30, r28
    6966:	32 96       	adiw	r30, 0x02	; 2
    6968:	44 c0       	rjmp	.+136    	; 0x69f2 <malloc+0x124>
    696a:	fe 01       	movw	r30, r28
    696c:	e2 0f       	add	r30, r18
    696e:	f3 1f       	adc	r31, r19
    6970:	81 93       	st	Z+, r24
    6972:	91 93       	st	Z+, r25
    6974:	22 50       	subi	r18, 0x02	; 2
    6976:	31 09       	sbc	r19, r1
    6978:	39 83       	std	Y+1, r19	; 0x01
    697a:	28 83       	st	Y, r18
    697c:	3a c0       	rjmp	.+116    	; 0x69f2 <malloc+0x124>
    697e:	20 91 7a 1b 	lds	r18, 0x1B7A	; 0x801b7a <__brkval>
    6982:	30 91 7b 1b 	lds	r19, 0x1B7B	; 0x801b7b <__brkval+0x1>
    6986:	23 2b       	or	r18, r19
    6988:	41 f4       	brne	.+16     	; 0x699a <malloc+0xcc>
    698a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    698e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6992:	30 93 7b 1b 	sts	0x1B7B, r19	; 0x801b7b <__brkval+0x1>
    6996:	20 93 7a 1b 	sts	0x1B7A, r18	; 0x801b7a <__brkval>
    699a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    699e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    69a2:	21 15       	cp	r18, r1
    69a4:	31 05       	cpc	r19, r1
    69a6:	41 f4       	brne	.+16     	; 0x69b8 <malloc+0xea>
    69a8:	2d b7       	in	r18, 0x3d	; 61
    69aa:	3e b7       	in	r19, 0x3e	; 62
    69ac:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    69b0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    69b4:	24 1b       	sub	r18, r20
    69b6:	35 0b       	sbc	r19, r21
    69b8:	e0 91 7a 1b 	lds	r30, 0x1B7A	; 0x801b7a <__brkval>
    69bc:	f0 91 7b 1b 	lds	r31, 0x1B7B	; 0x801b7b <__brkval+0x1>
    69c0:	e2 17       	cp	r30, r18
    69c2:	f3 07       	cpc	r31, r19
    69c4:	a0 f4       	brcc	.+40     	; 0x69ee <malloc+0x120>
    69c6:	2e 1b       	sub	r18, r30
    69c8:	3f 0b       	sbc	r19, r31
    69ca:	28 17       	cp	r18, r24
    69cc:	39 07       	cpc	r19, r25
    69ce:	78 f0       	brcs	.+30     	; 0x69ee <malloc+0x120>
    69d0:	ac 01       	movw	r20, r24
    69d2:	4e 5f       	subi	r20, 0xFE	; 254
    69d4:	5f 4f       	sbci	r21, 0xFF	; 255
    69d6:	24 17       	cp	r18, r20
    69d8:	35 07       	cpc	r19, r21
    69da:	48 f0       	brcs	.+18     	; 0x69ee <malloc+0x120>
    69dc:	4e 0f       	add	r20, r30
    69de:	5f 1f       	adc	r21, r31
    69e0:	50 93 7b 1b 	sts	0x1B7B, r21	; 0x801b7b <__brkval+0x1>
    69e4:	40 93 7a 1b 	sts	0x1B7A, r20	; 0x801b7a <__brkval>
    69e8:	81 93       	st	Z+, r24
    69ea:	91 93       	st	Z+, r25
    69ec:	02 c0       	rjmp	.+4      	; 0x69f2 <malloc+0x124>
    69ee:	e0 e0       	ldi	r30, 0x00	; 0
    69f0:	f0 e0       	ldi	r31, 0x00	; 0
    69f2:	cf 01       	movw	r24, r30
    69f4:	df 91       	pop	r29
    69f6:	cf 91       	pop	r28
    69f8:	1f 91       	pop	r17
    69fa:	0f 91       	pop	r16
    69fc:	08 95       	ret

000069fe <free>:
    69fe:	cf 93       	push	r28
    6a00:	df 93       	push	r29
    6a02:	00 97       	sbiw	r24, 0x00	; 0
    6a04:	09 f4       	brne	.+2      	; 0x6a08 <free+0xa>
    6a06:	81 c0       	rjmp	.+258    	; 0x6b0a <free+0x10c>
    6a08:	fc 01       	movw	r30, r24
    6a0a:	32 97       	sbiw	r30, 0x02	; 2
    6a0c:	13 82       	std	Z+3, r1	; 0x03
    6a0e:	12 82       	std	Z+2, r1	; 0x02
    6a10:	a0 91 7c 1b 	lds	r26, 0x1B7C	; 0x801b7c <__flp>
    6a14:	b0 91 7d 1b 	lds	r27, 0x1B7D	; 0x801b7d <__flp+0x1>
    6a18:	10 97       	sbiw	r26, 0x00	; 0
    6a1a:	81 f4       	brne	.+32     	; 0x6a3c <free+0x3e>
    6a1c:	20 81       	ld	r18, Z
    6a1e:	31 81       	ldd	r19, Z+1	; 0x01
    6a20:	82 0f       	add	r24, r18
    6a22:	93 1f       	adc	r25, r19
    6a24:	20 91 7a 1b 	lds	r18, 0x1B7A	; 0x801b7a <__brkval>
    6a28:	30 91 7b 1b 	lds	r19, 0x1B7B	; 0x801b7b <__brkval+0x1>
    6a2c:	28 17       	cp	r18, r24
    6a2e:	39 07       	cpc	r19, r25
    6a30:	51 f5       	brne	.+84     	; 0x6a86 <free+0x88>
    6a32:	f0 93 7b 1b 	sts	0x1B7B, r31	; 0x801b7b <__brkval+0x1>
    6a36:	e0 93 7a 1b 	sts	0x1B7A, r30	; 0x801b7a <__brkval>
    6a3a:	67 c0       	rjmp	.+206    	; 0x6b0a <free+0x10c>
    6a3c:	ed 01       	movw	r28, r26
    6a3e:	20 e0       	ldi	r18, 0x00	; 0
    6a40:	30 e0       	ldi	r19, 0x00	; 0
    6a42:	ce 17       	cp	r28, r30
    6a44:	df 07       	cpc	r29, r31
    6a46:	40 f4       	brcc	.+16     	; 0x6a58 <free+0x5a>
    6a48:	4a 81       	ldd	r20, Y+2	; 0x02
    6a4a:	5b 81       	ldd	r21, Y+3	; 0x03
    6a4c:	9e 01       	movw	r18, r28
    6a4e:	41 15       	cp	r20, r1
    6a50:	51 05       	cpc	r21, r1
    6a52:	f1 f0       	breq	.+60     	; 0x6a90 <free+0x92>
    6a54:	ea 01       	movw	r28, r20
    6a56:	f5 cf       	rjmp	.-22     	; 0x6a42 <free+0x44>
    6a58:	d3 83       	std	Z+3, r29	; 0x03
    6a5a:	c2 83       	std	Z+2, r28	; 0x02
    6a5c:	40 81       	ld	r20, Z
    6a5e:	51 81       	ldd	r21, Z+1	; 0x01
    6a60:	84 0f       	add	r24, r20
    6a62:	95 1f       	adc	r25, r21
    6a64:	c8 17       	cp	r28, r24
    6a66:	d9 07       	cpc	r29, r25
    6a68:	59 f4       	brne	.+22     	; 0x6a80 <free+0x82>
    6a6a:	88 81       	ld	r24, Y
    6a6c:	99 81       	ldd	r25, Y+1	; 0x01
    6a6e:	84 0f       	add	r24, r20
    6a70:	95 1f       	adc	r25, r21
    6a72:	02 96       	adiw	r24, 0x02	; 2
    6a74:	91 83       	std	Z+1, r25	; 0x01
    6a76:	80 83       	st	Z, r24
    6a78:	8a 81       	ldd	r24, Y+2	; 0x02
    6a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a7c:	93 83       	std	Z+3, r25	; 0x03
    6a7e:	82 83       	std	Z+2, r24	; 0x02
    6a80:	21 15       	cp	r18, r1
    6a82:	31 05       	cpc	r19, r1
    6a84:	29 f4       	brne	.+10     	; 0x6a90 <free+0x92>
    6a86:	f0 93 7d 1b 	sts	0x1B7D, r31	; 0x801b7d <__flp+0x1>
    6a8a:	e0 93 7c 1b 	sts	0x1B7C, r30	; 0x801b7c <__flp>
    6a8e:	3d c0       	rjmp	.+122    	; 0x6b0a <free+0x10c>
    6a90:	e9 01       	movw	r28, r18
    6a92:	fb 83       	std	Y+3, r31	; 0x03
    6a94:	ea 83       	std	Y+2, r30	; 0x02
    6a96:	49 91       	ld	r20, Y+
    6a98:	59 91       	ld	r21, Y+
    6a9a:	c4 0f       	add	r28, r20
    6a9c:	d5 1f       	adc	r29, r21
    6a9e:	ec 17       	cp	r30, r28
    6aa0:	fd 07       	cpc	r31, r29
    6aa2:	61 f4       	brne	.+24     	; 0x6abc <free+0xbe>
    6aa4:	80 81       	ld	r24, Z
    6aa6:	91 81       	ldd	r25, Z+1	; 0x01
    6aa8:	84 0f       	add	r24, r20
    6aaa:	95 1f       	adc	r25, r21
    6aac:	02 96       	adiw	r24, 0x02	; 2
    6aae:	e9 01       	movw	r28, r18
    6ab0:	99 83       	std	Y+1, r25	; 0x01
    6ab2:	88 83       	st	Y, r24
    6ab4:	82 81       	ldd	r24, Z+2	; 0x02
    6ab6:	93 81       	ldd	r25, Z+3	; 0x03
    6ab8:	9b 83       	std	Y+3, r25	; 0x03
    6aba:	8a 83       	std	Y+2, r24	; 0x02
    6abc:	e0 e0       	ldi	r30, 0x00	; 0
    6abe:	f0 e0       	ldi	r31, 0x00	; 0
    6ac0:	12 96       	adiw	r26, 0x02	; 2
    6ac2:	8d 91       	ld	r24, X+
    6ac4:	9c 91       	ld	r25, X
    6ac6:	13 97       	sbiw	r26, 0x03	; 3
    6ac8:	00 97       	sbiw	r24, 0x00	; 0
    6aca:	19 f0       	breq	.+6      	; 0x6ad2 <free+0xd4>
    6acc:	fd 01       	movw	r30, r26
    6ace:	dc 01       	movw	r26, r24
    6ad0:	f7 cf       	rjmp	.-18     	; 0x6ac0 <free+0xc2>
    6ad2:	8d 91       	ld	r24, X+
    6ad4:	9c 91       	ld	r25, X
    6ad6:	11 97       	sbiw	r26, 0x01	; 1
    6ad8:	9d 01       	movw	r18, r26
    6ada:	2e 5f       	subi	r18, 0xFE	; 254
    6adc:	3f 4f       	sbci	r19, 0xFF	; 255
    6ade:	82 0f       	add	r24, r18
    6ae0:	93 1f       	adc	r25, r19
    6ae2:	20 91 7a 1b 	lds	r18, 0x1B7A	; 0x801b7a <__brkval>
    6ae6:	30 91 7b 1b 	lds	r19, 0x1B7B	; 0x801b7b <__brkval+0x1>
    6aea:	28 17       	cp	r18, r24
    6aec:	39 07       	cpc	r19, r25
    6aee:	69 f4       	brne	.+26     	; 0x6b0a <free+0x10c>
    6af0:	30 97       	sbiw	r30, 0x00	; 0
    6af2:	29 f4       	brne	.+10     	; 0x6afe <free+0x100>
    6af4:	10 92 7d 1b 	sts	0x1B7D, r1	; 0x801b7d <__flp+0x1>
    6af8:	10 92 7c 1b 	sts	0x1B7C, r1	; 0x801b7c <__flp>
    6afc:	02 c0       	rjmp	.+4      	; 0x6b02 <free+0x104>
    6afe:	13 82       	std	Z+3, r1	; 0x03
    6b00:	12 82       	std	Z+2, r1	; 0x02
    6b02:	b0 93 7b 1b 	sts	0x1B7B, r27	; 0x801b7b <__brkval+0x1>
    6b06:	a0 93 7a 1b 	sts	0x1B7A, r26	; 0x801b7a <__brkval>
    6b0a:	df 91       	pop	r29
    6b0c:	cf 91       	pop	r28
    6b0e:	08 95       	ret

00006b10 <abort>:
    6b10:	81 e0       	ldi	r24, 0x01	; 1
    6b12:	90 e0       	ldi	r25, 0x00	; 0
    6b14:	f8 94       	cli
    6b16:	5a c2       	rjmp	.+1204   	; 0x6fcc <_exit>

00006b18 <__ftoa_engine>:
    6b18:	28 30       	cpi	r18, 0x08	; 8
    6b1a:	08 f0       	brcs	.+2      	; 0x6b1e <__ftoa_engine+0x6>
    6b1c:	27 e0       	ldi	r18, 0x07	; 7
    6b1e:	33 27       	eor	r19, r19
    6b20:	da 01       	movw	r26, r20
    6b22:	99 0f       	add	r25, r25
    6b24:	31 1d       	adc	r19, r1
    6b26:	87 fd       	sbrc	r24, 7
    6b28:	91 60       	ori	r25, 0x01	; 1
    6b2a:	00 96       	adiw	r24, 0x00	; 0
    6b2c:	61 05       	cpc	r22, r1
    6b2e:	71 05       	cpc	r23, r1
    6b30:	39 f4       	brne	.+14     	; 0x6b40 <__ftoa_engine+0x28>
    6b32:	32 60       	ori	r19, 0x02	; 2
    6b34:	2e 5f       	subi	r18, 0xFE	; 254
    6b36:	3d 93       	st	X+, r19
    6b38:	30 e3       	ldi	r19, 0x30	; 48
    6b3a:	2a 95       	dec	r18
    6b3c:	e1 f7       	brne	.-8      	; 0x6b36 <__ftoa_engine+0x1e>
    6b3e:	08 95       	ret
    6b40:	9f 3f       	cpi	r25, 0xFF	; 255
    6b42:	30 f0       	brcs	.+12     	; 0x6b50 <__ftoa_engine+0x38>
    6b44:	80 38       	cpi	r24, 0x80	; 128
    6b46:	71 05       	cpc	r23, r1
    6b48:	61 05       	cpc	r22, r1
    6b4a:	09 f0       	breq	.+2      	; 0x6b4e <__ftoa_engine+0x36>
    6b4c:	3c 5f       	subi	r19, 0xFC	; 252
    6b4e:	3c 5f       	subi	r19, 0xFC	; 252
    6b50:	3d 93       	st	X+, r19
    6b52:	91 30       	cpi	r25, 0x01	; 1
    6b54:	08 f0       	brcs	.+2      	; 0x6b58 <__ftoa_engine+0x40>
    6b56:	80 68       	ori	r24, 0x80	; 128
    6b58:	91 1d       	adc	r25, r1
    6b5a:	df 93       	push	r29
    6b5c:	cf 93       	push	r28
    6b5e:	1f 93       	push	r17
    6b60:	0f 93       	push	r16
    6b62:	ff 92       	push	r15
    6b64:	ef 92       	push	r14
    6b66:	19 2f       	mov	r17, r25
    6b68:	98 7f       	andi	r25, 0xF8	; 248
    6b6a:	96 95       	lsr	r25
    6b6c:	e9 2f       	mov	r30, r25
    6b6e:	96 95       	lsr	r25
    6b70:	96 95       	lsr	r25
    6b72:	e9 0f       	add	r30, r25
    6b74:	ff 27       	eor	r31, r31
    6b76:	e4 50       	subi	r30, 0x04	; 4
    6b78:	fe 4f       	sbci	r31, 0xFE	; 254
    6b7a:	99 27       	eor	r25, r25
    6b7c:	33 27       	eor	r19, r19
    6b7e:	ee 24       	eor	r14, r14
    6b80:	ff 24       	eor	r15, r15
    6b82:	a7 01       	movw	r20, r14
    6b84:	e7 01       	movw	r28, r14
    6b86:	05 90       	lpm	r0, Z+
    6b88:	08 94       	sec
    6b8a:	07 94       	ror	r0
    6b8c:	28 f4       	brcc	.+10     	; 0x6b98 <__ftoa_engine+0x80>
    6b8e:	36 0f       	add	r19, r22
    6b90:	e7 1e       	adc	r14, r23
    6b92:	f8 1e       	adc	r15, r24
    6b94:	49 1f       	adc	r20, r25
    6b96:	51 1d       	adc	r21, r1
    6b98:	66 0f       	add	r22, r22
    6b9a:	77 1f       	adc	r23, r23
    6b9c:	88 1f       	adc	r24, r24
    6b9e:	99 1f       	adc	r25, r25
    6ba0:	06 94       	lsr	r0
    6ba2:	a1 f7       	brne	.-24     	; 0x6b8c <__ftoa_engine+0x74>
    6ba4:	05 90       	lpm	r0, Z+
    6ba6:	07 94       	ror	r0
    6ba8:	28 f4       	brcc	.+10     	; 0x6bb4 <__ftoa_engine+0x9c>
    6baa:	e7 0e       	add	r14, r23
    6bac:	f8 1e       	adc	r15, r24
    6bae:	49 1f       	adc	r20, r25
    6bb0:	56 1f       	adc	r21, r22
    6bb2:	c1 1d       	adc	r28, r1
    6bb4:	77 0f       	add	r23, r23
    6bb6:	88 1f       	adc	r24, r24
    6bb8:	99 1f       	adc	r25, r25
    6bba:	66 1f       	adc	r22, r22
    6bbc:	06 94       	lsr	r0
    6bbe:	a1 f7       	brne	.-24     	; 0x6ba8 <__ftoa_engine+0x90>
    6bc0:	05 90       	lpm	r0, Z+
    6bc2:	07 94       	ror	r0
    6bc4:	28 f4       	brcc	.+10     	; 0x6bd0 <__ftoa_engine+0xb8>
    6bc6:	f8 0e       	add	r15, r24
    6bc8:	49 1f       	adc	r20, r25
    6bca:	56 1f       	adc	r21, r22
    6bcc:	c7 1f       	adc	r28, r23
    6bce:	d1 1d       	adc	r29, r1
    6bd0:	88 0f       	add	r24, r24
    6bd2:	99 1f       	adc	r25, r25
    6bd4:	66 1f       	adc	r22, r22
    6bd6:	77 1f       	adc	r23, r23
    6bd8:	06 94       	lsr	r0
    6bda:	a1 f7       	brne	.-24     	; 0x6bc4 <__ftoa_engine+0xac>
    6bdc:	05 90       	lpm	r0, Z+
    6bde:	07 94       	ror	r0
    6be0:	20 f4       	brcc	.+8      	; 0x6bea <__ftoa_engine+0xd2>
    6be2:	49 0f       	add	r20, r25
    6be4:	56 1f       	adc	r21, r22
    6be6:	c7 1f       	adc	r28, r23
    6be8:	d8 1f       	adc	r29, r24
    6bea:	99 0f       	add	r25, r25
    6bec:	66 1f       	adc	r22, r22
    6bee:	77 1f       	adc	r23, r23
    6bf0:	88 1f       	adc	r24, r24
    6bf2:	06 94       	lsr	r0
    6bf4:	a9 f7       	brne	.-22     	; 0x6be0 <__ftoa_engine+0xc8>
    6bf6:	84 91       	lpm	r24, Z
    6bf8:	10 95       	com	r17
    6bfa:	17 70       	andi	r17, 0x07	; 7
    6bfc:	41 f0       	breq	.+16     	; 0x6c0e <__ftoa_engine+0xf6>
    6bfe:	d6 95       	lsr	r29
    6c00:	c7 95       	ror	r28
    6c02:	57 95       	ror	r21
    6c04:	47 95       	ror	r20
    6c06:	f7 94       	ror	r15
    6c08:	e7 94       	ror	r14
    6c0a:	1a 95       	dec	r17
    6c0c:	c1 f7       	brne	.-16     	; 0x6bfe <__ftoa_engine+0xe6>
    6c0e:	e2 ea       	ldi	r30, 0xA2	; 162
    6c10:	f1 e0       	ldi	r31, 0x01	; 1
    6c12:	68 94       	set
    6c14:	15 90       	lpm	r1, Z+
    6c16:	15 91       	lpm	r17, Z+
    6c18:	35 91       	lpm	r19, Z+
    6c1a:	65 91       	lpm	r22, Z+
    6c1c:	95 91       	lpm	r25, Z+
    6c1e:	05 90       	lpm	r0, Z+
    6c20:	7f e2       	ldi	r23, 0x2F	; 47
    6c22:	73 95       	inc	r23
    6c24:	e1 18       	sub	r14, r1
    6c26:	f1 0a       	sbc	r15, r17
    6c28:	43 0b       	sbc	r20, r19
    6c2a:	56 0b       	sbc	r21, r22
    6c2c:	c9 0b       	sbc	r28, r25
    6c2e:	d0 09       	sbc	r29, r0
    6c30:	c0 f7       	brcc	.-16     	; 0x6c22 <__ftoa_engine+0x10a>
    6c32:	e1 0c       	add	r14, r1
    6c34:	f1 1e       	adc	r15, r17
    6c36:	43 1f       	adc	r20, r19
    6c38:	56 1f       	adc	r21, r22
    6c3a:	c9 1f       	adc	r28, r25
    6c3c:	d0 1d       	adc	r29, r0
    6c3e:	7e f4       	brtc	.+30     	; 0x6c5e <__ftoa_engine+0x146>
    6c40:	70 33       	cpi	r23, 0x30	; 48
    6c42:	11 f4       	brne	.+4      	; 0x6c48 <__ftoa_engine+0x130>
    6c44:	8a 95       	dec	r24
    6c46:	e6 cf       	rjmp	.-52     	; 0x6c14 <__ftoa_engine+0xfc>
    6c48:	e8 94       	clt
    6c4a:	01 50       	subi	r16, 0x01	; 1
    6c4c:	30 f0       	brcs	.+12     	; 0x6c5a <__ftoa_engine+0x142>
    6c4e:	08 0f       	add	r16, r24
    6c50:	0a f4       	brpl	.+2      	; 0x6c54 <__ftoa_engine+0x13c>
    6c52:	00 27       	eor	r16, r16
    6c54:	02 17       	cp	r16, r18
    6c56:	08 f4       	brcc	.+2      	; 0x6c5a <__ftoa_engine+0x142>
    6c58:	20 2f       	mov	r18, r16
    6c5a:	23 95       	inc	r18
    6c5c:	02 2f       	mov	r16, r18
    6c5e:	7a 33       	cpi	r23, 0x3A	; 58
    6c60:	28 f0       	brcs	.+10     	; 0x6c6c <__ftoa_engine+0x154>
    6c62:	79 e3       	ldi	r23, 0x39	; 57
    6c64:	7d 93       	st	X+, r23
    6c66:	2a 95       	dec	r18
    6c68:	e9 f7       	brne	.-6      	; 0x6c64 <__ftoa_engine+0x14c>
    6c6a:	10 c0       	rjmp	.+32     	; 0x6c8c <__ftoa_engine+0x174>
    6c6c:	7d 93       	st	X+, r23
    6c6e:	2a 95       	dec	r18
    6c70:	89 f6       	brne	.-94     	; 0x6c14 <__ftoa_engine+0xfc>
    6c72:	06 94       	lsr	r0
    6c74:	97 95       	ror	r25
    6c76:	67 95       	ror	r22
    6c78:	37 95       	ror	r19
    6c7a:	17 95       	ror	r17
    6c7c:	17 94       	ror	r1
    6c7e:	e1 18       	sub	r14, r1
    6c80:	f1 0a       	sbc	r15, r17
    6c82:	43 0b       	sbc	r20, r19
    6c84:	56 0b       	sbc	r21, r22
    6c86:	c9 0b       	sbc	r28, r25
    6c88:	d0 09       	sbc	r29, r0
    6c8a:	98 f0       	brcs	.+38     	; 0x6cb2 <__ftoa_engine+0x19a>
    6c8c:	23 95       	inc	r18
    6c8e:	7e 91       	ld	r23, -X
    6c90:	73 95       	inc	r23
    6c92:	7a 33       	cpi	r23, 0x3A	; 58
    6c94:	08 f0       	brcs	.+2      	; 0x6c98 <__ftoa_engine+0x180>
    6c96:	70 e3       	ldi	r23, 0x30	; 48
    6c98:	7c 93       	st	X, r23
    6c9a:	20 13       	cpse	r18, r16
    6c9c:	b8 f7       	brcc	.-18     	; 0x6c8c <__ftoa_engine+0x174>
    6c9e:	7e 91       	ld	r23, -X
    6ca0:	70 61       	ori	r23, 0x10	; 16
    6ca2:	7d 93       	st	X+, r23
    6ca4:	30 f0       	brcs	.+12     	; 0x6cb2 <__ftoa_engine+0x19a>
    6ca6:	83 95       	inc	r24
    6ca8:	71 e3       	ldi	r23, 0x31	; 49
    6caa:	7d 93       	st	X+, r23
    6cac:	70 e3       	ldi	r23, 0x30	; 48
    6cae:	2a 95       	dec	r18
    6cb0:	e1 f7       	brne	.-8      	; 0x6caa <__ftoa_engine+0x192>
    6cb2:	11 24       	eor	r1, r1
    6cb4:	ef 90       	pop	r14
    6cb6:	ff 90       	pop	r15
    6cb8:	0f 91       	pop	r16
    6cba:	1f 91       	pop	r17
    6cbc:	cf 91       	pop	r28
    6cbe:	df 91       	pop	r29
    6cc0:	99 27       	eor	r25, r25
    6cc2:	87 fd       	sbrc	r24, 7
    6cc4:	90 95       	com	r25
    6cc6:	08 95       	ret

00006cc8 <strnlen_P>:
    6cc8:	fc 01       	movw	r30, r24
    6cca:	05 90       	lpm	r0, Z+
    6ccc:	61 50       	subi	r22, 0x01	; 1
    6cce:	70 40       	sbci	r23, 0x00	; 0
    6cd0:	01 10       	cpse	r0, r1
    6cd2:	d8 f7       	brcc	.-10     	; 0x6cca <strnlen_P+0x2>
    6cd4:	80 95       	com	r24
    6cd6:	90 95       	com	r25
    6cd8:	8e 0f       	add	r24, r30
    6cda:	9f 1f       	adc	r25, r31
    6cdc:	08 95       	ret

00006cde <memcpy>:
    6cde:	fb 01       	movw	r30, r22
    6ce0:	dc 01       	movw	r26, r24
    6ce2:	02 c0       	rjmp	.+4      	; 0x6ce8 <memcpy+0xa>
    6ce4:	01 90       	ld	r0, Z+
    6ce6:	0d 92       	st	X+, r0
    6ce8:	41 50       	subi	r20, 0x01	; 1
    6cea:	50 40       	sbci	r21, 0x00	; 0
    6cec:	d8 f7       	brcc	.-10     	; 0x6ce4 <memcpy+0x6>
    6cee:	08 95       	ret

00006cf0 <memset>:
    6cf0:	dc 01       	movw	r26, r24
    6cf2:	01 c0       	rjmp	.+2      	; 0x6cf6 <memset+0x6>
    6cf4:	6d 93       	st	X+, r22
    6cf6:	41 50       	subi	r20, 0x01	; 1
    6cf8:	50 40       	sbci	r21, 0x00	; 0
    6cfa:	e0 f7       	brcc	.-8      	; 0x6cf4 <memset+0x4>
    6cfc:	08 95       	ret

00006cfe <strcasestr>:
    6cfe:	fb 01       	movw	r30, r22
    6d00:	51 91       	ld	r21, Z+
    6d02:	55 23       	and	r21, r21
    6d04:	b1 f0       	breq	.+44     	; 0x6d32 <strcasestr+0x34>
    6d06:	bf 01       	movw	r22, r30
    6d08:	dc 01       	movw	r26, r24
    6d0a:	05 2e       	mov	r0, r21
    6d0c:	4d 91       	ld	r20, X+
    6d0e:	44 23       	and	r20, r20
    6d10:	69 f0       	breq	.+26     	; 0x6d2c <strcasestr+0x2e>
    6d12:	10 d0       	rcall	.+32     	; 0x6d34 <strcasestr+0x36>
    6d14:	d9 f7       	brne	.-10     	; 0x6d0c <strcasestr+0xe>
    6d16:	cd 01       	movw	r24, r26
    6d18:	01 90       	ld	r0, Z+
    6d1a:	00 20       	and	r0, r0
    6d1c:	49 f0       	breq	.+18     	; 0x6d30 <strcasestr+0x32>
    6d1e:	4d 91       	ld	r20, X+
    6d20:	41 11       	cpse	r20, r1
    6d22:	08 d0       	rcall	.+16     	; 0x6d34 <strcasestr+0x36>
    6d24:	c9 f3       	breq	.-14     	; 0x6d18 <strcasestr+0x1a>
    6d26:	fb 01       	movw	r30, r22
    6d28:	41 11       	cpse	r20, r1
    6d2a:	ee cf       	rjmp	.-36     	; 0x6d08 <strcasestr+0xa>
    6d2c:	81 e0       	ldi	r24, 0x01	; 1
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	01 97       	sbiw	r24, 0x01	; 1
    6d32:	08 95       	ret
    6d34:	40 25       	eor	r20, r0
    6d36:	39 f0       	breq	.+14     	; 0x6d46 <strcasestr+0x48>
    6d38:	40 32       	cpi	r20, 0x20	; 32
    6d3a:	29 f4       	brne	.+10     	; 0x6d46 <strcasestr+0x48>
    6d3c:	40 29       	or	r20, r0
    6d3e:	4b 57       	subi	r20, 0x7B	; 123
    6d40:	46 5e       	subi	r20, 0xE6	; 230
    6d42:	08 f0       	brcs	.+2      	; 0x6d46 <strcasestr+0x48>
    6d44:	18 94       	sez
    6d46:	08 95       	ret

00006d48 <strcat>:
    6d48:	fb 01       	movw	r30, r22
    6d4a:	dc 01       	movw	r26, r24
    6d4c:	0d 90       	ld	r0, X+
    6d4e:	00 20       	and	r0, r0
    6d50:	e9 f7       	brne	.-6      	; 0x6d4c <strcat+0x4>
    6d52:	11 97       	sbiw	r26, 0x01	; 1
    6d54:	01 90       	ld	r0, Z+
    6d56:	0d 92       	st	X+, r0
    6d58:	00 20       	and	r0, r0
    6d5a:	e1 f7       	brne	.-8      	; 0x6d54 <strcat+0xc>
    6d5c:	08 95       	ret

00006d5e <strcpy>:
    6d5e:	fb 01       	movw	r30, r22
    6d60:	dc 01       	movw	r26, r24
    6d62:	01 90       	ld	r0, Z+
    6d64:	0d 92       	st	X+, r0
    6d66:	00 20       	and	r0, r0
    6d68:	e1 f7       	brne	.-8      	; 0x6d62 <strcpy+0x4>
    6d6a:	08 95       	ret

00006d6c <strncasecmp>:
    6d6c:	fb 01       	movw	r30, r22
    6d6e:	dc 01       	movw	r26, r24
    6d70:	41 50       	subi	r20, 0x01	; 1
    6d72:	50 40       	sbci	r21, 0x00	; 0
    6d74:	88 f0       	brcs	.+34     	; 0x6d98 <strncasecmp+0x2c>
    6d76:	8d 91       	ld	r24, X+
    6d78:	81 34       	cpi	r24, 0x41	; 65
    6d7a:	1c f0       	brlt	.+6      	; 0x6d82 <strncasecmp+0x16>
    6d7c:	8b 35       	cpi	r24, 0x5B	; 91
    6d7e:	0c f4       	brge	.+2      	; 0x6d82 <strncasecmp+0x16>
    6d80:	80 5e       	subi	r24, 0xE0	; 224
    6d82:	61 91       	ld	r22, Z+
    6d84:	61 34       	cpi	r22, 0x41	; 65
    6d86:	1c f0       	brlt	.+6      	; 0x6d8e <strncasecmp+0x22>
    6d88:	6b 35       	cpi	r22, 0x5B	; 91
    6d8a:	0c f4       	brge	.+2      	; 0x6d8e <strncasecmp+0x22>
    6d8c:	60 5e       	subi	r22, 0xE0	; 224
    6d8e:	86 1b       	sub	r24, r22
    6d90:	61 11       	cpse	r22, r1
    6d92:	71 f3       	breq	.-36     	; 0x6d70 <strncasecmp+0x4>
    6d94:	99 0b       	sbc	r25, r25
    6d96:	08 95       	ret
    6d98:	88 1b       	sub	r24, r24
    6d9a:	fc cf       	rjmp	.-8      	; 0x6d94 <strncasecmp+0x28>

00006d9c <strnlen>:
    6d9c:	fc 01       	movw	r30, r24
    6d9e:	61 50       	subi	r22, 0x01	; 1
    6da0:	70 40       	sbci	r23, 0x00	; 0
    6da2:	01 90       	ld	r0, Z+
    6da4:	01 10       	cpse	r0, r1
    6da6:	d8 f7       	brcc	.-10     	; 0x6d9e <strnlen+0x2>
    6da8:	80 95       	com	r24
    6daa:	90 95       	com	r25
    6dac:	8e 0f       	add	r24, r30
    6dae:	9f 1f       	adc	r25, r31
    6db0:	08 95       	ret

00006db2 <fputc>:
    6db2:	0f 93       	push	r16
    6db4:	1f 93       	push	r17
    6db6:	cf 93       	push	r28
    6db8:	df 93       	push	r29
    6dba:	fb 01       	movw	r30, r22
    6dbc:	23 81       	ldd	r18, Z+3	; 0x03
    6dbe:	21 fd       	sbrc	r18, 1
    6dc0:	03 c0       	rjmp	.+6      	; 0x6dc8 <fputc+0x16>
    6dc2:	8f ef       	ldi	r24, 0xFF	; 255
    6dc4:	9f ef       	ldi	r25, 0xFF	; 255
    6dc6:	2c c0       	rjmp	.+88     	; 0x6e20 <fputc+0x6e>
    6dc8:	22 ff       	sbrs	r18, 2
    6dca:	16 c0       	rjmp	.+44     	; 0x6df8 <fputc+0x46>
    6dcc:	46 81       	ldd	r20, Z+6	; 0x06
    6dce:	57 81       	ldd	r21, Z+7	; 0x07
    6dd0:	24 81       	ldd	r18, Z+4	; 0x04
    6dd2:	35 81       	ldd	r19, Z+5	; 0x05
    6dd4:	42 17       	cp	r20, r18
    6dd6:	53 07       	cpc	r21, r19
    6dd8:	44 f4       	brge	.+16     	; 0x6dea <fputc+0x38>
    6dda:	a0 81       	ld	r26, Z
    6ddc:	b1 81       	ldd	r27, Z+1	; 0x01
    6dde:	9d 01       	movw	r18, r26
    6de0:	2f 5f       	subi	r18, 0xFF	; 255
    6de2:	3f 4f       	sbci	r19, 0xFF	; 255
    6de4:	31 83       	std	Z+1, r19	; 0x01
    6de6:	20 83       	st	Z, r18
    6de8:	8c 93       	st	X, r24
    6dea:	26 81       	ldd	r18, Z+6	; 0x06
    6dec:	37 81       	ldd	r19, Z+7	; 0x07
    6dee:	2f 5f       	subi	r18, 0xFF	; 255
    6df0:	3f 4f       	sbci	r19, 0xFF	; 255
    6df2:	37 83       	std	Z+7, r19	; 0x07
    6df4:	26 83       	std	Z+6, r18	; 0x06
    6df6:	14 c0       	rjmp	.+40     	; 0x6e20 <fputc+0x6e>
    6df8:	8b 01       	movw	r16, r22
    6dfa:	ec 01       	movw	r28, r24
    6dfc:	fb 01       	movw	r30, r22
    6dfe:	00 84       	ldd	r0, Z+8	; 0x08
    6e00:	f1 85       	ldd	r31, Z+9	; 0x09
    6e02:	e0 2d       	mov	r30, r0
    6e04:	19 95       	eicall
    6e06:	89 2b       	or	r24, r25
    6e08:	e1 f6       	brne	.-72     	; 0x6dc2 <fputc+0x10>
    6e0a:	d8 01       	movw	r26, r16
    6e0c:	16 96       	adiw	r26, 0x06	; 6
    6e0e:	8d 91       	ld	r24, X+
    6e10:	9c 91       	ld	r25, X
    6e12:	17 97       	sbiw	r26, 0x07	; 7
    6e14:	01 96       	adiw	r24, 0x01	; 1
    6e16:	17 96       	adiw	r26, 0x07	; 7
    6e18:	9c 93       	st	X, r25
    6e1a:	8e 93       	st	-X, r24
    6e1c:	16 97       	sbiw	r26, 0x06	; 6
    6e1e:	ce 01       	movw	r24, r28
    6e20:	df 91       	pop	r29
    6e22:	cf 91       	pop	r28
    6e24:	1f 91       	pop	r17
    6e26:	0f 91       	pop	r16
    6e28:	08 95       	ret

00006e2a <printf>:
    6e2a:	cf 93       	push	r28
    6e2c:	df 93       	push	r29
    6e2e:	cd b7       	in	r28, 0x3d	; 61
    6e30:	de b7       	in	r29, 0x3e	; 62
    6e32:	ae 01       	movw	r20, r28
    6e34:	4a 5f       	subi	r20, 0xFA	; 250
    6e36:	5f 4f       	sbci	r21, 0xFF	; 255
    6e38:	fa 01       	movw	r30, r20
    6e3a:	61 91       	ld	r22, Z+
    6e3c:	71 91       	ld	r23, Z+
    6e3e:	af 01       	movw	r20, r30
    6e40:	80 91 80 1b 	lds	r24, 0x1B80	; 0x801b80 <__iob+0x2>
    6e44:	90 91 81 1b 	lds	r25, 0x1B81	; 0x801b81 <__iob+0x3>
    6e48:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <vfprintf>
    6e4c:	df 91       	pop	r29
    6e4e:	cf 91       	pop	r28
    6e50:	08 95       	ret

00006e52 <puts>:
    6e52:	0f 93       	push	r16
    6e54:	1f 93       	push	r17
    6e56:	cf 93       	push	r28
    6e58:	df 93       	push	r29
    6e5a:	e0 91 80 1b 	lds	r30, 0x1B80	; 0x801b80 <__iob+0x2>
    6e5e:	f0 91 81 1b 	lds	r31, 0x1B81	; 0x801b81 <__iob+0x3>
    6e62:	23 81       	ldd	r18, Z+3	; 0x03
    6e64:	21 ff       	sbrs	r18, 1
    6e66:	1b c0       	rjmp	.+54     	; 0x6e9e <puts+0x4c>
    6e68:	8c 01       	movw	r16, r24
    6e6a:	d0 e0       	ldi	r29, 0x00	; 0
    6e6c:	c0 e0       	ldi	r28, 0x00	; 0
    6e6e:	f8 01       	movw	r30, r16
    6e70:	81 91       	ld	r24, Z+
    6e72:	8f 01       	movw	r16, r30
    6e74:	60 91 80 1b 	lds	r22, 0x1B80	; 0x801b80 <__iob+0x2>
    6e78:	70 91 81 1b 	lds	r23, 0x1B81	; 0x801b81 <__iob+0x3>
    6e7c:	db 01       	movw	r26, r22
    6e7e:	18 96       	adiw	r26, 0x08	; 8
    6e80:	ed 91       	ld	r30, X+
    6e82:	fc 91       	ld	r31, X
    6e84:	19 97       	sbiw	r26, 0x09	; 9
    6e86:	88 23       	and	r24, r24
    6e88:	31 f0       	breq	.+12     	; 0x6e96 <puts+0x44>
    6e8a:	19 95       	eicall
    6e8c:	89 2b       	or	r24, r25
    6e8e:	79 f3       	breq	.-34     	; 0x6e6e <puts+0x1c>
    6e90:	df ef       	ldi	r29, 0xFF	; 255
    6e92:	cf ef       	ldi	r28, 0xFF	; 255
    6e94:	ec cf       	rjmp	.-40     	; 0x6e6e <puts+0x1c>
    6e96:	8a e0       	ldi	r24, 0x0A	; 10
    6e98:	19 95       	eicall
    6e9a:	89 2b       	or	r24, r25
    6e9c:	19 f0       	breq	.+6      	; 0x6ea4 <puts+0x52>
    6e9e:	8f ef       	ldi	r24, 0xFF	; 255
    6ea0:	9f ef       	ldi	r25, 0xFF	; 255
    6ea2:	02 c0       	rjmp	.+4      	; 0x6ea8 <puts+0x56>
    6ea4:	8d 2f       	mov	r24, r29
    6ea6:	9c 2f       	mov	r25, r28
    6ea8:	df 91       	pop	r29
    6eaa:	cf 91       	pop	r28
    6eac:	1f 91       	pop	r17
    6eae:	0f 91       	pop	r16
    6eb0:	08 95       	ret

00006eb2 <sprintf>:
    6eb2:	0f 93       	push	r16
    6eb4:	1f 93       	push	r17
    6eb6:	cf 93       	push	r28
    6eb8:	df 93       	push	r29
    6eba:	cd b7       	in	r28, 0x3d	; 61
    6ebc:	de b7       	in	r29, 0x3e	; 62
    6ebe:	2e 97       	sbiw	r28, 0x0e	; 14
    6ec0:	0f b6       	in	r0, 0x3f	; 63
    6ec2:	f8 94       	cli
    6ec4:	de bf       	out	0x3e, r29	; 62
    6ec6:	0f be       	out	0x3f, r0	; 63
    6ec8:	cd bf       	out	0x3d, r28	; 61
    6eca:	0e 89       	ldd	r16, Y+22	; 0x16
    6ecc:	1f 89       	ldd	r17, Y+23	; 0x17
    6ece:	86 e0       	ldi	r24, 0x06	; 6
    6ed0:	8c 83       	std	Y+4, r24	; 0x04
    6ed2:	1a 83       	std	Y+2, r17	; 0x02
    6ed4:	09 83       	std	Y+1, r16	; 0x01
    6ed6:	8f ef       	ldi	r24, 0xFF	; 255
    6ed8:	9f e7       	ldi	r25, 0x7F	; 127
    6eda:	9e 83       	std	Y+6, r25	; 0x06
    6edc:	8d 83       	std	Y+5, r24	; 0x05
    6ede:	ae 01       	movw	r20, r28
    6ee0:	46 5e       	subi	r20, 0xE6	; 230
    6ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    6ee4:	68 8d       	ldd	r22, Y+24	; 0x18
    6ee6:	79 8d       	ldd	r23, Y+25	; 0x19
    6ee8:	ce 01       	movw	r24, r28
    6eea:	01 96       	adiw	r24, 0x01	; 1
    6eec:	0e 94 8e 2e 	call	0x5d1c	; 0x5d1c <vfprintf>
    6ef0:	ef 81       	ldd	r30, Y+7	; 0x07
    6ef2:	f8 85       	ldd	r31, Y+8	; 0x08
    6ef4:	e0 0f       	add	r30, r16
    6ef6:	f1 1f       	adc	r31, r17
    6ef8:	10 82       	st	Z, r1
    6efa:	2e 96       	adiw	r28, 0x0e	; 14
    6efc:	0f b6       	in	r0, 0x3f	; 63
    6efe:	f8 94       	cli
    6f00:	de bf       	out	0x3e, r29	; 62
    6f02:	0f be       	out	0x3f, r0	; 63
    6f04:	cd bf       	out	0x3d, r28	; 61
    6f06:	df 91       	pop	r29
    6f08:	cf 91       	pop	r28
    6f0a:	1f 91       	pop	r17
    6f0c:	0f 91       	pop	r16
    6f0e:	08 95       	ret

00006f10 <__ultoa_invert>:
    6f10:	fa 01       	movw	r30, r20
    6f12:	aa 27       	eor	r26, r26
    6f14:	28 30       	cpi	r18, 0x08	; 8
    6f16:	51 f1       	breq	.+84     	; 0x6f6c <__ultoa_invert+0x5c>
    6f18:	20 31       	cpi	r18, 0x10	; 16
    6f1a:	81 f1       	breq	.+96     	; 0x6f7c <__ultoa_invert+0x6c>
    6f1c:	e8 94       	clt
    6f1e:	6f 93       	push	r22
    6f20:	6e 7f       	andi	r22, 0xFE	; 254
    6f22:	6e 5f       	subi	r22, 0xFE	; 254
    6f24:	7f 4f       	sbci	r23, 0xFF	; 255
    6f26:	8f 4f       	sbci	r24, 0xFF	; 255
    6f28:	9f 4f       	sbci	r25, 0xFF	; 255
    6f2a:	af 4f       	sbci	r26, 0xFF	; 255
    6f2c:	b1 e0       	ldi	r27, 0x01	; 1
    6f2e:	3e d0       	rcall	.+124    	; 0x6fac <__ultoa_invert+0x9c>
    6f30:	b4 e0       	ldi	r27, 0x04	; 4
    6f32:	3c d0       	rcall	.+120    	; 0x6fac <__ultoa_invert+0x9c>
    6f34:	67 0f       	add	r22, r23
    6f36:	78 1f       	adc	r23, r24
    6f38:	89 1f       	adc	r24, r25
    6f3a:	9a 1f       	adc	r25, r26
    6f3c:	a1 1d       	adc	r26, r1
    6f3e:	68 0f       	add	r22, r24
    6f40:	79 1f       	adc	r23, r25
    6f42:	8a 1f       	adc	r24, r26
    6f44:	91 1d       	adc	r25, r1
    6f46:	a1 1d       	adc	r26, r1
    6f48:	6a 0f       	add	r22, r26
    6f4a:	71 1d       	adc	r23, r1
    6f4c:	81 1d       	adc	r24, r1
    6f4e:	91 1d       	adc	r25, r1
    6f50:	a1 1d       	adc	r26, r1
    6f52:	20 d0       	rcall	.+64     	; 0x6f94 <__ultoa_invert+0x84>
    6f54:	09 f4       	brne	.+2      	; 0x6f58 <__ultoa_invert+0x48>
    6f56:	68 94       	set
    6f58:	3f 91       	pop	r19
    6f5a:	2a e0       	ldi	r18, 0x0A	; 10
    6f5c:	26 9f       	mul	r18, r22
    6f5e:	11 24       	eor	r1, r1
    6f60:	30 19       	sub	r19, r0
    6f62:	30 5d       	subi	r19, 0xD0	; 208
    6f64:	31 93       	st	Z+, r19
    6f66:	de f6       	brtc	.-74     	; 0x6f1e <__ultoa_invert+0xe>
    6f68:	cf 01       	movw	r24, r30
    6f6a:	08 95       	ret
    6f6c:	46 2f       	mov	r20, r22
    6f6e:	47 70       	andi	r20, 0x07	; 7
    6f70:	40 5d       	subi	r20, 0xD0	; 208
    6f72:	41 93       	st	Z+, r20
    6f74:	b3 e0       	ldi	r27, 0x03	; 3
    6f76:	0f d0       	rcall	.+30     	; 0x6f96 <__ultoa_invert+0x86>
    6f78:	c9 f7       	brne	.-14     	; 0x6f6c <__ultoa_invert+0x5c>
    6f7a:	f6 cf       	rjmp	.-20     	; 0x6f68 <__ultoa_invert+0x58>
    6f7c:	46 2f       	mov	r20, r22
    6f7e:	4f 70       	andi	r20, 0x0F	; 15
    6f80:	40 5d       	subi	r20, 0xD0	; 208
    6f82:	4a 33       	cpi	r20, 0x3A	; 58
    6f84:	18 f0       	brcs	.+6      	; 0x6f8c <__ultoa_invert+0x7c>
    6f86:	49 5d       	subi	r20, 0xD9	; 217
    6f88:	31 fd       	sbrc	r19, 1
    6f8a:	40 52       	subi	r20, 0x20	; 32
    6f8c:	41 93       	st	Z+, r20
    6f8e:	02 d0       	rcall	.+4      	; 0x6f94 <__ultoa_invert+0x84>
    6f90:	a9 f7       	brne	.-22     	; 0x6f7c <__ultoa_invert+0x6c>
    6f92:	ea cf       	rjmp	.-44     	; 0x6f68 <__ultoa_invert+0x58>
    6f94:	b4 e0       	ldi	r27, 0x04	; 4
    6f96:	a6 95       	lsr	r26
    6f98:	97 95       	ror	r25
    6f9a:	87 95       	ror	r24
    6f9c:	77 95       	ror	r23
    6f9e:	67 95       	ror	r22
    6fa0:	ba 95       	dec	r27
    6fa2:	c9 f7       	brne	.-14     	; 0x6f96 <__ultoa_invert+0x86>
    6fa4:	00 97       	sbiw	r24, 0x00	; 0
    6fa6:	61 05       	cpc	r22, r1
    6fa8:	71 05       	cpc	r23, r1
    6faa:	08 95       	ret
    6fac:	9b 01       	movw	r18, r22
    6fae:	ac 01       	movw	r20, r24
    6fb0:	0a 2e       	mov	r0, r26
    6fb2:	06 94       	lsr	r0
    6fb4:	57 95       	ror	r21
    6fb6:	47 95       	ror	r20
    6fb8:	37 95       	ror	r19
    6fba:	27 95       	ror	r18
    6fbc:	ba 95       	dec	r27
    6fbe:	c9 f7       	brne	.-14     	; 0x6fb2 <__ultoa_invert+0xa2>
    6fc0:	62 0f       	add	r22, r18
    6fc2:	73 1f       	adc	r23, r19
    6fc4:	84 1f       	adc	r24, r20
    6fc6:	95 1f       	adc	r25, r21
    6fc8:	a0 1d       	adc	r26, r0
    6fca:	08 95       	ret

00006fcc <_exit>:
    6fcc:	f8 94       	cli

00006fce <__stop_program>:
    6fce:	ff cf       	rjmp	.-2      	; 0x6fce <__stop_program>
