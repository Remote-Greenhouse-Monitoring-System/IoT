
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000734  00800200  00007182  00007216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001023  00800934  00800934  0000794a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000794a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000079a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c68  00000000  00000000  000079e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ebc7  00000000  00000000  00008650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d84  00000000  00000000  00017217  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007623  00000000  00000000  0001af9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000029cc  00000000  00000000  000225c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000467d  00000000  00000000  00024f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c940  00000000  00000000  00029609  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b58  00000000  00000000  00035f49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_12>
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5b 29 	jmp	0x52b6	; 0x52b6 <__vector_25>
      68:	0c 94 ad 29 	jmp	0x535a	; 0x535a <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f1 29 	jmp	0x53e2	; 0x53e2 <__vector_36>
      94:	0c 94 43 2a 	jmp	0x5486	; 0x5486 <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8e 2e 	jmp	0x5d1c	; 0x5d1c <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 87 2a 	jmp	0x550e	; 0x550e <__vector_51>
      d0:	0c 94 d9 2a 	jmp	0x55b2	; 0x55b2 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 1d 2b 	jmp	0x563a	; 0x563a <__vector_54>
      dc:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	94 1e       	adc	r9, r20
      e6:	94 1e       	adc	r9, r20
      e8:	94 1e       	adc	r9, r20
      ea:	cb 1e       	adc	r12, r27
      ec:	d3 1e       	adc	r13, r19
      ee:	e8 1e       	adc	r14, r24
      f0:	94 1e       	adc	r9, r20
      f2:	94 1e       	adc	r9, r20
      f4:	cb 1e       	adc	r12, r27
      f6:	d3 1e       	adc	r13, r19
      f8:	b0 2e       	mov	r11, r16
      fa:	20 2f       	mov	r18, r16
      fc:	20 2f       	mov	r18, r16
      fe:	20 2f       	mov	r18, r16
     100:	20 2f       	mov	r18, r16
     102:	20 2f       	mov	r18, r16
     104:	20 2f       	mov	r18, r16
     106:	20 2f       	mov	r18, r16
     108:	b0 2e       	mov	r11, r16
     10a:	20 2f       	mov	r18, r16
     10c:	20 2f       	mov	r18, r16
     10e:	20 2f       	mov	r18, r16
     110:	20 2f       	mov	r18, r16
     112:	20 2f       	mov	r18, r16
     114:	20 2f       	mov	r18, r16
     116:	20 2f       	mov	r18, r16
     118:	b2 2e       	mov	r11, r18
     11a:	20 2f       	mov	r18, r16
     11c:	20 2f       	mov	r18, r16
     11e:	20 2f       	mov	r18, r16
     120:	20 2f       	mov	r18, r16
     122:	20 2f       	mov	r18, r16
     124:	20 2f       	mov	r18, r16
     126:	20 2f       	mov	r18, r16
     128:	20 2f       	mov	r18, r16
     12a:	20 2f       	mov	r18, r16
     12c:	20 2f       	mov	r18, r16
     12e:	20 2f       	mov	r18, r16
     130:	20 2f       	mov	r18, r16
     132:	20 2f       	mov	r18, r16
     134:	20 2f       	mov	r18, r16
     136:	20 2f       	mov	r18, r16
     138:	b2 2e       	mov	r11, r18
     13a:	20 2f       	mov	r18, r16
     13c:	20 2f       	mov	r18, r16
     13e:	20 2f       	mov	r18, r16
     140:	20 2f       	mov	r18, r16
     142:	20 2f       	mov	r18, r16
     144:	20 2f       	mov	r18, r16
     146:	20 2f       	mov	r18, r16
     148:	20 2f       	mov	r18, r16
     14a:	20 2f       	mov	r18, r16
     14c:	20 2f       	mov	r18, r16
     14e:	20 2f       	mov	r18, r16
     150:	20 2f       	mov	r18, r16
     152:	20 2f       	mov	r18, r16
     154:	20 2f       	mov	r18, r16
     156:	20 2f       	mov	r18, r16
     158:	1c 2f       	mov	r17, r28
     15a:	20 2f       	mov	r18, r16
     15c:	20 2f       	mov	r18, r16
     15e:	20 2f       	mov	r18, r16
     160:	20 2f       	mov	r18, r16
     162:	20 2f       	mov	r18, r16
     164:	20 2f       	mov	r18, r16
     166:	20 2f       	mov	r18, r16
     168:	e7 2e       	mov	r14, r23
     16a:	20 2f       	mov	r18, r16
     16c:	20 2f       	mov	r18, r16
     16e:	20 2f       	mov	r18, r16
     170:	20 2f       	mov	r18, r16
     172:	20 2f       	mov	r18, r16
     174:	20 2f       	mov	r18, r16
     176:	20 2f       	mov	r18, r16
     178:	20 2f       	mov	r18, r16
     17a:	20 2f       	mov	r18, r16
     17c:	20 2f       	mov	r18, r16
     17e:	20 2f       	mov	r18, r16
     180:	20 2f       	mov	r18, r16
     182:	20 2f       	mov	r18, r16
     184:	20 2f       	mov	r18, r16
     186:	20 2f       	mov	r18, r16
     188:	db 2e       	mov	r13, r27
     18a:	20 2f       	mov	r18, r16
     18c:	20 2f       	mov	r18, r16
     18e:	20 2f       	mov	r18, r16
     190:	20 2f       	mov	r18, r16
     192:	20 2f       	mov	r18, r16
     194:	20 2f       	mov	r18, r16
     196:	20 2f       	mov	r18, r16
     198:	ff 2e       	mov	r15, r31

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <prvCheckTasksWaitingTermination>
     2a0:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	9f d6       	rcall	.+3390   	; 0xfe8 <vPortYield>
     2aa:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 11 1c 	call	0x3822	; 0x3822 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <prvProcessTimerOrBlockTask>
     2c8:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	19 e0       	ldi	r17, 0x09	; 9
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e2 e8       	ldi	r30, 0x82	; 130
     2e6:	f1 e7       	ldi	r31, 0x71	; 113
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a4 33       	cpi	r26, 0x34	; 52
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	29 e1       	ldi	r18, 0x19	; 25
     2fa:	a4 e3       	ldi	r26, 0x34	; 52
     2fc:	b9 e0       	ldi	r27, 0x09	; 9
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a7 35       	cpi	r26, 0x57	; 87
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <main>
     30c:	0c 94 bf 38 	jmp	0x717e	; 0x717e <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
// 	const TickType_t xFrequency = pdMS_TO_TICKS(60000); 
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 26 12 	call	0x244c	; 0x244c <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 3c 14 	call	0x2878	; 0x2878 <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <measureEventGroup>
     34e:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <measureEventGroup+0x1>
     352:	95 d3       	rcall	.+1834   	; 0xa7e <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <dataReadyEventGroup>
     36c:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <dataReadyEventGroup+0x1>
     370:	e6 d2       	rcall	.+1484   	; 0x93e <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 34 20 	call	0x4068	; 0x4068 <TempHumSensor_getTemp>
     38a:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 39 20 	call	0x4072	; 0x4072 <TempHumSensor_getHum>
     392:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <CO2_getPPM>
     39a:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <set_CO2_ppm>
			
			if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     39e:	4a e0       	ldi	r20, 0x0A	; 10
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <configSemaphore>
     3aa:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <configSemaphore+0x1>
     3ae:	0e 94 86 0b 	call	0x170c	; 0x170c <xQueueSemaphoreTake>
     3b2:	81 30       	cpi	r24, 0x01	; 1
				set_status(get_system_status());
     3b4:	79 f4       	brne	.+30     	; 0x3d4 <main_application_task+0xc2>
     3b6:	4b d0       	rcall	.+150    	; 0x44e <get_system_status>
     3b8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <set_status>
				xSemaphoreGive(configSemaphore);
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <configSemaphore>
     3cc:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <configSemaphore+0x1>
     3d0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xQueueGenericSend>
			}
			
			lora_driver_payload_t payload = get_lora_package(2);
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	ce 01       	movw	r24, r28
     3d8:	05 96       	adiw	r24, 0x05	; 5
     3da:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3de:	0f ef       	ldi	r16, 0xFF	; 255
     3e0:	1f ef       	ldi	r17, 0xFF	; 255
     3e2:	98 01       	movw	r18, r16
     3e4:	46 e1       	ldi	r20, 0x16	; 22
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	be 01       	movw	r22, r28
     3ea:	6b 5f       	subi	r22, 0xFB	; 251
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uplinkMessageBufferHandle>
     3f2:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <uplinkMessageBufferHandle+0x1>
     3f6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     3fa:	86 31       	cpi	r24, 0x16	; 22
     3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	99 cf       	rjmp	.-206    	; 0x332 <main_application_task+0x20>
				printf("Timed out.\n");
     400:	8f e6       	ldi	r24, 0x6F	; 111
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 02 38 	call	0x7004	; 0x7004 <puts>
     408:	94 cf       	rjmp	.-216    	; 0x332 <main_application_task+0x20>

0000040a <create_main_application_task>:



void main_application_task(void *pvParameters);

void create_main_application_task(UBaseType_t priority){
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
		
	xTaskCreate(
     410:	e1 2c       	mov	r14, r1
     412:	f1 2c       	mov	r15, r1
     414:	08 2f       	mov	r16, r24
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	40 ec       	ldi	r20, 0xC0	; 192
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	6a e7       	ldi	r22, 0x7A	; 122
     420:	72 e0       	ldi	r23, 0x02	; 2
     422:	89 e8       	ldi	r24, 0x89	; 137
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + priority 
	,  NULL );
	
}
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	08 95       	ret

00000432 <set_system_status>:

void set_max_co2(uint16_t maxCO2){
	max_co2 = maxCO2;
}

void set_min_co2(uint16_t minCO2){
     432:	87 3f       	cpi	r24, 0xF7	; 247
     434:	30 f0       	brcs	.+12     	; 0x442 <set_system_status+0x10>
     436:	90 91 34 09 	lds	r25, 0x0934	; 0x800934 <__data_end>
     43a:	89 23       	and	r24, r25
     43c:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <__data_end>
     440:	08 95       	ret
     442:	90 91 34 09 	lds	r25, 0x0934	; 0x800934 <__data_end>
     446:	89 2b       	or	r24, r25
     448:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <__data_end>
     44c:	08 95       	ret

0000044e <get_system_status>:
     44e:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <__data_end>
     452:	08 95       	ret

00000454 <get_max_temperature>:
     454:	80 91 39 09 	lds	r24, 0x0939	; 0x800939 <max_temperature>
     458:	90 91 3a 09 	lds	r25, 0x093A	; 0x80093a <max_temperature+0x1>
     45c:	08 95       	ret

0000045e <set_max_temperature>:
     45e:	90 93 3a 09 	sts	0x093A, r25	; 0x80093a <max_temperature+0x1>
     462:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <max_temperature>
     466:	08 95       	ret

00000468 <get_max_humidity>:
     468:	80 91 37 09 	lds	r24, 0x0937	; 0x800937 <max_humidity>
     46c:	90 91 38 09 	lds	r25, 0x0938	; 0x800938 <max_humidity+0x1>
     470:	08 95       	ret

00000472 <set_max_humidity>:
     472:	90 93 38 09 	sts	0x0938, r25	; 0x800938 <max_humidity+0x1>
     476:	80 93 37 09 	sts	0x0937, r24	; 0x800937 <max_humidity>
     47a:	08 95       	ret

0000047c <get_max_co2>:
     47c:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <max_co2>
     480:	90 91 36 09 	lds	r25, 0x0936	; 0x800936 <max_co2+0x1>
     484:	08 95       	ret

00000486 <set_max_co2>:
     486:	90 93 36 09 	sts	0x0936, r25	; 0x800936 <max_co2+0x1>
     48a:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <max_co2>
     48e:	08 95       	ret

00000490 <setConfiguration>:
static uint16_t max_co2 = 0;
static uint16_t min_co2 = 0;
static uint8_t system_status = 0;


void setConfiguration(lora_driver_payload_t payload){
     490:	4f 92       	push	r4
     492:	5f 92       	push	r5
     494:	6f 92       	push	r6
     496:	7f 92       	push	r7
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	uint16_t newMaxHum = 0;
	uint16_t newMinHum = 0;
	uint16_t newMaxCO2 = 0;
	uint16_t newMinCO2 = 0;
	
	newMaxTemp = (payload.bytes[0] << 8 | payload.bytes[1]);
     4b4:	8e 89       	ldd	r24, Y+22	; 0x16
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	98 2f       	mov	r25, r24
     4ba:	88 27       	eor	r24, r24
     4bc:	2f 89       	ldd	r18, Y+23	; 0x17
     4be:	82 2b       	or	r24, r18
	newMinTemp = (payload.bytes[2] << 8 | payload.bytes[3]);
     4c0:	a8 8c       	ldd	r10, Y+24	; 0x18
     4c2:	b1 2c       	mov	r11, r1
     4c4:	ba 2c       	mov	r11, r10
     4c6:	aa 24       	eor	r10, r10
     4c8:	29 8d       	ldd	r18, Y+25	; 0x19
     4ca:	a2 2a       	or	r10, r18
	newMaxHum = (payload.bytes[4] << 8 | payload.bytes[5]);
     4cc:	6a 8c       	ldd	r6, Y+26	; 0x1a
     4ce:	71 2c       	mov	r7, r1
     4d0:	76 2c       	mov	r7, r6
     4d2:	66 24       	eor	r6, r6
     4d4:	2b 8d       	ldd	r18, Y+27	; 0x1b
     4d6:	62 2a       	or	r6, r18
	newMinHum = (payload.bytes[6] << 8 | payload.bytes[7]);
     4d8:	cc 8c       	ldd	r12, Y+28	; 0x1c
     4da:	d1 2c       	mov	r13, r1
     4dc:	dc 2c       	mov	r13, r12
     4de:	cc 24       	eor	r12, r12
     4e0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     4e2:	c2 2a       	or	r12, r18
	newMaxCO2 = (payload.bytes[8] << 8 | payload.bytes[9]);
     4e4:	0e 8d       	ldd	r16, Y+30	; 0x1e
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	10 2f       	mov	r17, r16
     4ea:	00 27       	eor	r16, r16
     4ec:	2f 8d       	ldd	r18, Y+31	; 0x1f
     4ee:	02 2b       	or	r16, r18
	newMinCO2 =(payload.bytes[10] << 8 | payload.bytes[11]);
     4f0:	e8 a0       	ldd	r14, Y+32	; 0x20
     4f2:	f1 2c       	mov	r15, r1
     4f4:	fe 2c       	mov	r15, r14
     4f6:	ee 24       	eor	r14, r14
     4f8:	29 a1       	ldd	r18, Y+33	; 0x21
     4fa:	e2 2a       	or	r14, r18
	
	set_max_temperature(newMaxTemp/10);
     4fc:	0f 2e       	mov	r0, r31
     4fe:	fa e0       	ldi	r31, 0x0A	; 10
     500:	8f 2e       	mov	r8, r31
     502:	91 2c       	mov	r9, r1
     504:	f0 2d       	mov	r31, r0
     506:	b4 01       	movw	r22, r8
     508:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__divmodhi4>
     50c:	56 2e       	mov	r5, r22
     50e:	47 2e       	mov	r4, r23
     510:	86 2f       	mov	r24, r22
     512:	97 2f       	mov	r25, r23
     514:	a4 df       	rcall	.-184    	; 0x45e <set_max_temperature>
	set_min_temperature(newMinTemp/10);
     516:	c5 01       	movw	r24, r10
     518:	b4 01       	movw	r22, r8
     51a:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__divmodhi4>
     51e:	96 2e       	mov	r9, r22
     520:	87 2e       	mov	r8, r23
	set_max_humidity(newMaxHum/10);
     522:	93 01       	movw	r18, r6
     524:	ad ec       	ldi	r26, 0xCD	; 205
     526:	bc ec       	ldi	r27, 0xCC	; 204
     528:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <__umulhisi3>
     52c:	5c 01       	movw	r10, r24
     52e:	b6 94       	lsr	r11
     530:	a7 94       	ror	r10
     532:	b6 94       	lsr	r11
     534:	a7 94       	ror	r10
     536:	b6 94       	lsr	r11
     538:	a7 94       	ror	r10
     53a:	c5 01       	movw	r24, r10
     53c:	9a df       	rcall	.-204    	; 0x472 <set_max_humidity>
	set_min_humidity(newMinHum/10);
     53e:	96 01       	movw	r18, r12
     540:	ad ec       	ldi	r26, 0xCD	; 205
     542:	bc ec       	ldi	r27, 0xCC	; 204
     544:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <__umulhisi3>
     548:	6c 01       	movw	r12, r24
     54a:	d6 94       	lsr	r13
     54c:	c7 94       	ror	r12
     54e:	d6 94       	lsr	r13
     550:	c7 94       	ror	r12
     552:	d6 94       	lsr	r13
     554:	c7 94       	ror	r12
	set_max_co2(newMaxCO2);
     556:	80 2f       	mov	r24, r16
     558:	91 2f       	mov	r25, r17
     55a:	95 df       	rcall	.-214    	; 0x486 <set_max_co2>
	set_min_co2(newMinCO2);
	
	printf("CONF MIN/MAX, tmp: %d/%d, hum: %d/%d, co2: %d/%d\n", newMaxTemp/10, newMinTemp/10, newMaxHum/10, newMinHum/10, newMaxCO2, newMinCO2);
     55c:	ff 92       	push	r15
     55e:	ef 92       	push	r14
     560:	1f 93       	push	r17
     562:	0f 93       	push	r16
     564:	df 92       	push	r13
     566:	cf 92       	push	r12
     568:	bf 92       	push	r11
     56a:	af 92       	push	r10
     56c:	8f 92       	push	r8
     56e:	9f 92       	push	r9
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	8a e8       	ldi	r24, 0x8A	; 138
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
}
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	bf 90       	pop	r11
     59c:	af 90       	pop	r10
     59e:	9f 90       	pop	r9
     5a0:	8f 90       	pop	r8
     5a2:	7f 90       	pop	r7
     5a4:	6f 90       	pop	r6
     5a6:	5f 90       	pop	r5
     5a8:	4f 90       	pop	r4
     5aa:	08 95       	ret

000005ac <lora_downlink_handler_task>:
	uint8_t xReceivedBytes = 0;
	
	for(;;){
		
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle, 
     5ac:	0f ef       	ldi	r16, 0xFF	; 255
     5ae:	1f ef       	ldi	r17, 0xFF	; 255
     5b0:	98 01       	movw	r18, r16
     5b2:	46 e1       	ldi	r20, 0x16	; 22
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	6b e3       	ldi	r22, 0x3B	; 59
     5b8:	79 e0       	ldi	r23, 0x09	; 9
     5ba:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <downlinkMessageBufferHandle>
     5be:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <downlinkMessageBufferHandle+0x1>
     5c2:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <xStreamBufferReceive>
		&_downlink_payload, 
		sizeof(lora_driver_payload_t), 
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     5c6:	88 23       	and	r24, r24
     5c8:	89 f3       	breq	.-30     	; 0x5ac <lora_downlink_handler_task>
			printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     5ca:	eb e3       	ldi	r30, 0x3B	; 59
     5cc:	f9 e0       	ldi	r31, 0x09	; 9
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	80 81       	ld	r24, Z
     5d2:	1f 92       	push	r1
     5d4:	9f 93       	push	r25
     5d6:	1f 92       	push	r1
     5d8:	8f 93       	push	r24
     5da:	8c eb       	ldi	r24, 0xBC	; 188
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	9f 93       	push	r25
     5e0:	8f 93       	push	r24
     5e2:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
			
			if(configSemaphore != NULL){
     5e6:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <configSemaphore>
     5ea:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <configSemaphore+0x1>
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	b9 f2       	breq	.-82     	; 0x5ac <lora_downlink_handler_task>
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     5fe:	4a e0       	ldi	r20, 0x0A	; 10
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	0e 94 86 0b 	call	0x170c	; 0x170c <xQueueSemaphoreTake>
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	39 f5       	brne	.+78     	; 0x65c <lora_downlink_handler_task+0xb0>
					setConfiguration(_downlink_payload);
     60e:	8d b7       	in	r24, 0x3d	; 61
     610:	9e b7       	in	r25, 0x3e	; 62
     612:	46 97       	sbiw	r24, 0x16	; 22
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	9e bf       	out	0x3e, r25	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	8d bf       	out	0x3d, r24	; 61
     61e:	ad b7       	in	r26, 0x3d	; 61
     620:	be b7       	in	r27, 0x3e	; 62
     622:	11 96       	adiw	r26, 0x01	; 1
     624:	86 e1       	ldi	r24, 0x16	; 22
     626:	eb e3       	ldi	r30, 0x3B	; 59
     628:	f9 e0       	ldi	r31, 0x09	; 9
     62a:	01 90       	ld	r0, Z+
     62c:	0d 92       	st	X+, r0
     62e:	8a 95       	dec	r24
     630:	e1 f7       	brne	.-8      	; 0x62a <lora_downlink_handler_task+0x7e>
     632:	2e df       	rcall	.-420    	; 0x490 <setConfiguration>
					xSemaphoreGive(configSemaphore);
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	a9 01       	movw	r20, r18
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <configSemaphore>
     644:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <configSemaphore+0x1>
     648:	e7 d6       	rcall	.+3534   	; 0x1418 <xQueueGenericSend>
     64a:	8d b7       	in	r24, 0x3d	; 61
     64c:	9e b7       	in	r25, 0x3e	; 62
     64e:	46 96       	adiw	r24, 0x16	; 22
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	9e bf       	out	0x3e, r25	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	8d bf       	out	0x3d, r24	; 61
     65a:	a8 cf       	rjmp	.-176    	; 0x5ac <lora_downlink_handler_task>
				}
				else{
					printf("Couldn't obtain semaphore.\n");
     65c:	8e ee       	ldi	r24, 0xEE	; 238
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	0e 94 02 38 	call	0x7004	; 0x7004 <puts>
     664:	a3 cf       	rjmp	.-186    	; 0x5ac <lora_downlink_handler_task>

00000666 <create_lora_downlink_handler_task>:

void lora_downlink_handler_task(void *pvParameters);

static lora_driver_payload_t _downlink_payload;

void create_lora_downlink_handler_task(UBaseType_t priority){
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
		xTaskCreate(
     66c:	e1 2c       	mov	r14, r1
     66e:	f1 2c       	mov	r15, r1
     670:	08 2f       	mov	r16, r24
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	48 e8       	ldi	r20, 0x88	; 136
     678:	51 e0       	ldi	r21, 0x01	; 1
     67a:	69 e0       	ldi	r22, 0x09	; 9
     67c:	73 e0       	ldi	r23, 0x03	; 3
     67e:	86 ed       	ldi	r24, 0xD6	; 214
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
		,  "LRHandDownlink"
		,  configMINIMAL_STACK_SIZE+200
		,  NULL
		,  tskIDLE_PRIORITY + priority
		,  NULL );
}
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	08 95       	ret

0000068e <create_fan_controller_task>:
void fan_controller_task(void *pvParameters);
void temperature_action(int16_t currentTemp, int16_t thresholdTemp);
void humidity_action(uint16_t currentHum, uint16_t thresholdHum);
void co2_action(uint16_t currentCO2, uint16_t thresholdCO2);

void create_fan_controller_task(UBaseType_t priority){
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
	
	DDRA = 0xFF;
     694:	9f ef       	ldi	r25, 0xFF	; 255
     696:	91 b9       	out	0x01, r25	; 1
	PORTA = 0xFF;
     698:	92 b9       	out	0x02, r25	; 2
	
	xTaskCreate(
     69a:	e1 2c       	mov	r14, r1
     69c:	f1 2c       	mov	r15, r1
     69e:	08 2f       	mov	r16, r24
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 ec       	ldi	r20, 0xC0	; 192
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	68 e1       	ldi	r22, 0x18	; 24
     6aa:	73 e0       	ldi	r23, 0x03	; 3
     6ac:	84 ea       	ldi	r24, 0xA4	; 164
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
	,  "FanController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <temperature_action>:
			}	
		}
	}
}

void temperature_action(int16_t currentTemp, int16_t thresholdTemp){
     6bc:	9b 01       	movw	r18, r22
	if(currentTemp/10 > thresholdTemp){
     6be:	6a e0       	ldi	r22, 0x0A	; 10
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__divmodhi4>
     6c6:	26 17       	cp	r18, r22
     6c8:	37 07       	cpc	r19, r23
     6ca:	54 f4       	brge	.+20     	; 0x6e0 <temperature_action+0x24>
		servo_set_position(0, 100);
     6cc:	64 e6       	ldi	r22, 0x64	; 100
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 8d 20 	call	0x411a	; 0x411a <servo_set_position>
		PORTA &= ~(1 << 0);
     6d4:	82 b1       	in	r24, 0x02	; 2
     6d6:	8e 7f       	andi	r24, 0xFE	; 254
     6d8:	82 b9       	out	0x02, r24	; 2
		set_system_status(TEMPERATURE_ACTION_ON);
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	aa ce       	rjmp	.-684    	; 0x432 <set_system_status>
     6de:	08 95       	ret
	}
	else{
		servo_set_position(0, -100);
     6e0:	6c e9       	ldi	r22, 0x9C	; 156
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	0e 94 8d 20 	call	0x411a	; 0x411a <servo_set_position>
		PORTA |= (1 << 0);
     6e8:	82 b1       	in	r24, 0x02	; 2
     6ea:	81 60       	ori	r24, 0x01	; 1
     6ec:	82 b9       	out	0x02, r24	; 2
		set_system_status(TEMPERATURE_ACTION_OFF);
     6ee:	8e ef       	ldi	r24, 0xFE	; 254
     6f0:	a0 ce       	rjmp	.-704    	; 0x432 <set_system_status>
     6f2:	08 95       	ret

000006f4 <humidity_action>:
	}
}
void humidity_action(uint16_t currentHum, uint16_t thresholdHum){
     6f4:	ab 01       	movw	r20, r22
	if(currentHum/10 > thresholdHum){
     6f6:	9c 01       	movw	r18, r24
     6f8:	ad ec       	ldi	r26, 0xCD	; 205
     6fa:	bc ec       	ldi	r27, 0xCC	; 204
     6fc:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <__umulhisi3>
     700:	96 95       	lsr	r25
     702:	87 95       	ror	r24
     704:	96 95       	lsr	r25
     706:	87 95       	ror	r24
     708:	96 95       	lsr	r25
     70a:	87 95       	ror	r24
     70c:	48 17       	cp	r20, r24
     70e:	59 07       	cpc	r21, r25
     710:	30 f4       	brcc	.+12     	; 0x71e <humidity_action+0x2a>
		PORTA &= ~(1 << 1);
     712:	82 b1       	in	r24, 0x02	; 2
     714:	8d 7f       	andi	r24, 0xFD	; 253
     716:	82 b9       	out	0x02, r24	; 2
		set_system_status(HUMIDITY_ACTION_ON);
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	8b ce       	rjmp	.-746    	; 0x432 <set_system_status>
     71c:	08 95       	ret
	}
	else{
		PORTA |= (1 << 1);
     71e:	82 b1       	in	r24, 0x02	; 2
     720:	82 60       	ori	r24, 0x02	; 2
     722:	82 b9       	out	0x02, r24	; 2
		set_system_status(HUMIDITY_ACTION_OFF);
     724:	8d ef       	ldi	r24, 0xFD	; 253
     726:	85 ce       	rjmp	.-758    	; 0x432 <set_system_status>
     728:	08 95       	ret

0000072a <co2_action>:
	}
}
void co2_action(uint16_t currentCO2, uint16_t thresholdCO2){
	if(currentCO2 > thresholdCO2){
     72a:	68 17       	cp	r22, r24
     72c:	79 07       	cpc	r23, r25
     72e:	30 f4       	brcc	.+12     	; 0x73c <co2_action+0x12>
		PORTA &= ~(1 << 2);
     730:	82 b1       	in	r24, 0x02	; 2
     732:	8b 7f       	andi	r24, 0xFB	; 251
     734:	82 b9       	out	0x02, r24	; 2
		set_system_status(CO2_ACTION_ON);
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	7c ce       	rjmp	.-776    	; 0x432 <set_system_status>
     73a:	08 95       	ret
	}
	else{
		PORTA |= (1 << 2);
     73c:	82 b1       	in	r24, 0x02	; 2
     73e:	84 60       	ori	r24, 0x04	; 4
     740:	82 b9       	out	0x02, r24	; 2
		set_system_status(CO2_ACTION_OFF);
     742:	8b ef       	ldi	r24, 0xFB	; 251
     744:	76 ce       	rjmp	.-788    	; 0x432 <set_system_status>
     746:	08 95       	ret

00000748 <fan_controller_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void fan_controller_task(void *pvParameters) {
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	00 d0       	rcall	.+0      	; 0x74e <fan_controller_task+0x6>
     74e:	1f 92       	push	r1
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
	uint16_t currentCO2 = 0;
	uint16_t thresholdCO2 = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(5000); 
	xLastWakeTime = xTaskGetTickCount();
     754:	0e 94 26 12 	call	0x244c	; 0x244c <xTaskGetTickCount>
     758:	69 83       	std	Y+1, r22	; 0x01
     75a:	7a 83       	std	Y+2, r23	; 0x02
     75c:	8b 83       	std	Y+3, r24	; 0x03
     75e:	9c 83       	std	Y+4, r25	; 0x04
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
	uint16_t currentHumidity = 0;
	uint16_t thresholdHumidity = 0;
	uint16_t currentCO2 = 0;
	uint16_t thresholdCO2 = 0;
     760:	61 2c       	mov	r6, r1
     762:	71 2c       	mov	r7, r1
void fan_controller_task(void *pvParameters) {
	
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
	uint16_t currentHumidity = 0;
	uint16_t thresholdHumidity = 0;
     764:	81 2c       	mov	r8, r1
     766:	91 2c       	mov	r9, r1
}

void fan_controller_task(void *pvParameters) {
	
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
     768:	a1 2c       	mov	r10, r1
     76a:	b1 2c       	mov	r11, r1
	const TickType_t xFrequency = pdMS_TO_TICKS(5000); 
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     76c:	46 e3       	ldi	r20, 0x36	; 54
     76e:	51 e0       	ldi	r21, 0x01	; 1
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	0e 94 3c 14 	call	0x2878	; 0x2878 <xTaskDelayUntil>
		

		if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     77c:	4a e0       	ldi	r20, 0x0A	; 10
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <configSemaphore>
     788:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <configSemaphore+0x1>
     78c:	bf d7       	rcall	.+3966   	; 0x170c <xQueueSemaphoreTake>
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	89 f4       	brne	.+34     	; 0x7b4 <fan_controller_task+0x6c>
			thresholdTemperature = get_max_temperature();
     792:	60 de       	rcall	.-832    	; 0x454 <get_max_temperature>
     794:	5c 01       	movw	r10, r24
			thresholdHumidity = get_max_humidity();
     796:	68 de       	rcall	.-816    	; 0x468 <get_max_humidity>
     798:	4c 01       	movw	r8, r24
			thresholdCO2 = get_max_co2();
     79a:	70 de       	rcall	.-800    	; 0x47c <get_max_co2>
     79c:	3c 01       	movw	r6, r24
     79e:	00 e0       	ldi	r16, 0x00	; 0
			xSemaphoreGive(configSemaphore);
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	a9 01       	movw	r20, r18
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <configSemaphore>
     7ae:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <configSemaphore+0x1>
     7b2:	32 d6       	rcall	.+3172   	; 0x1418 <xQueueGenericSend>
     7b4:	45 e0       	ldi	r20, 0x05	; 5
			}
			
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);		
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <measureEventGroup>
     7c0:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <measureEventGroup+0x1>
     7c4:	5c d1       	rcall	.+696    	; 0xa7e <xEventGroupSetBits>
     7c6:	cc 24       	eor	r12, r12
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     7c8:	ca 94       	dec	r12
     7ca:	dc 2c       	mov	r13, r12
     7cc:	76 01       	movw	r14, r12
     7ce:	01 e0       	ldi	r16, 0x01	; 1
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	4a e0       	ldi	r20, 0x0A	; 10
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <dataReadyEventGroup>
     7de:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <dataReadyEventGroup+0x1>
     7e2:	ad d0       	rcall	.+346    	; 0x93e <xEventGroupWaitBits>
     7e4:	dc 01       	movw	r26, r24
				
		if (uxBits&(ALL_READY_BITS)){
     7e6:	cb 01       	movw	r24, r22
     7e8:	8a 70       	andi	r24, 0x0A	; 10
     7ea:	99 27       	eor	r25, r25
     7ec:	aa 27       	eor	r26, r26
     7ee:	bb 27       	eor	r27, r27
     7f0:	89 2b       	or	r24, r25
     7f2:	8a 2b       	or	r24, r26
     7f4:	8b 2b       	or	r24, r27
     7f6:	09 f4       	brne	.+2      	; 0x7fa <fan_controller_task+0xb2>
     7f8:	b9 cf       	rjmp	.-142    	; 0x76c <fan_controller_task+0x24>
     7fa:	0e 94 34 20 	call	0x4068	; 0x4068 <TempHumSensor_getTemp>
			currentTemperature = TempHumSensor_getTemp();
     7fe:	7c 01       	movw	r14, r24
     800:	0e 94 39 20 	call	0x4072	; 0x4072 <TempHumSensor_getHum>
			currentHumidity = TempHumSensor_getHum();
     804:	8c 01       	movw	r16, r24
     806:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <CO2_getPPM>
			currentCO2 = CO2_getPPM();
     80a:	c8 2e       	mov	r12, r24
     80c:	d9 2e       	mov	r13, r25
     80e:	7f 92       	push	r7
			printf("CURR/THRS: tmp %d/%d, hum %d/%d, co2ppm %d/%d\n", 
     810:	6f 92       	push	r6
     812:	9f 93       	push	r25
     814:	8f 93       	push	r24
     816:	9f 92       	push	r9
     818:	8f 92       	push	r8
     81a:	98 01       	movw	r18, r16
     81c:	ad ec       	ldi	r26, 0xCD	; 205
     81e:	bc ec       	ldi	r27, 0xCC	; 204
     820:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <__umulhisi3>
     824:	96 95       	lsr	r25
     826:	87 95       	ror	r24
     828:	96 95       	lsr	r25
     82a:	87 95       	ror	r24
     82c:	96 95       	lsr	r25
     82e:	87 95       	ror	r24
     830:	9f 93       	push	r25
     832:	8f 93       	push	r24
     834:	bf 92       	push	r11
     836:	af 92       	push	r10
     838:	c7 01       	movw	r24, r14
     83a:	6a e0       	ldi	r22, 0x0A	; 10
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <__divmodhi4>
     842:	7f 93       	push	r23
     844:	6f 93       	push	r22
     846:	86 e2       	ldi	r24, 0x26	; 38
     848:	93 e0       	ldi	r25, 0x03	; 3
     84a:	9f 93       	push	r25
     84c:	8f 93       	push	r24
     84e:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
     852:	0f b6       	in	r0, 0x3f	; 63
			currentTemperature/10, thresholdTemperature, currentHumidity/10, thresholdHumidity, currentCO2, thresholdCO2);
			
			if(!(thresholdTemperature == 0 && thresholdHumidity == 0 && thresholdCO2 == 0)){
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	a1 14       	cp	r10, r1
     85e:	b1 04       	cpc	r11, r1
     860:	31 f4       	brne	.+12     	; 0x86e <fan_controller_task+0x126>
     862:	81 14       	cp	r8, r1
     864:	91 04       	cpc	r9, r1
     866:	19 f4       	brne	.+6      	; 0x86e <fan_controller_task+0x126>
     868:	61 14       	cp	r6, r1
     86a:	71 04       	cpc	r7, r1
     86c:	79 f1       	breq	.+94     	; 0x8cc <fan_controller_task+0x184>
     86e:	4a e0       	ldi	r20, 0x0A	; 10
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <configSemaphore>
     87a:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <configSemaphore+0x1>
     87e:	46 d7       	rcall	.+3724   	; 0x170c <xQueueSemaphoreTake>
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	09 f0       	breq	.+2      	; 0x886 <fan_controller_task+0x13e>
					temperature_action(currentTemperature, thresholdTemperature);
     884:	73 cf       	rjmp	.-282    	; 0x76c <fan_controller_task+0x24>
     886:	b5 01       	movw	r22, r10
					humidity_action(currentHumidity, thresholdHumidity);
     888:	c7 01       	movw	r24, r14
     88a:	18 df       	rcall	.-464    	; 0x6bc <temperature_action>
     88c:	b4 01       	movw	r22, r8
     88e:	c8 01       	movw	r24, r16
					co2_action(currentCO2, thresholdCO2);
     890:	31 df       	rcall	.-414    	; 0x6f4 <humidity_action>
     892:	b3 01       	movw	r22, r6
     894:	8c 2d       	mov	r24, r12
     896:	9d 2d       	mov	r25, r13
     898:	48 df       	rcall	.-368    	; 0x72a <co2_action>
					printf("status: %x\n", get_system_status());
     89a:	d9 dd       	rcall	.-1102   	; 0x44e <get_system_status>
     89c:	1f 92       	push	r1
     89e:	8f 93       	push	r24
     8a0:	85 e5       	ldi	r24, 0x55	; 85
     8a2:	93 e0       	ldi	r25, 0x03	; 3
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
					xSemaphoreGive(configSemaphore);
     8ac:	00 e0       	ldi	r16, 0x00	; 0
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	a9 01       	movw	r20, r18
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <configSemaphore>
     8bc:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <configSemaphore+0x1>
     8c0:	ab d5       	rcall	.+2902   	; 0x1418 <xQueueGenericSend>
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	50 cf       	rjmp	.-352    	; 0x76c <fan_controller_task+0x24>
     8cc:	81 e6       	ldi	r24, 0x61	; 97
				}
			}
			else{
				printf("No config yet.\n");
     8ce:	93 e0       	ldi	r25, 0x03	; 3
     8d0:	0e 94 02 38 	call	0x7004	; 0x7004 <puts>
     8d4:	4b cf       	rjmp	.-362    	; 0x76c <fan_controller_task+0x24>

000008d6 <prvTestWaitCondition>:
     8d6:	0f 93       	push	r16
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     8d8:	01 11       	cpse	r16, r1
     8da:	0c c0       	rjmp	.+24     	; 0x8f4 <prvTestWaitCondition+0x1e>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	82 23       	and	r24, r18
     8e2:	93 23       	and	r25, r19
     8e4:	a4 23       	and	r26, r20
     8e6:	b5 23       	and	r27, r21
     8e8:	89 2b       	or	r24, r25
     8ea:	8a 2b       	or	r24, r26
     8ec:	8b 2b       	or	r24, r27
     8ee:	79 f4       	brne	.+30     	; 0x90e <prvTestWaitCondition+0x38>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	10 c0       	rjmp	.+32     	; 0x914 <prvTestWaitCondition+0x3e>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	82 23       	and	r24, r18
     8fa:	93 23       	and	r25, r19
     8fc:	a4 23       	and	r26, r20
     8fe:	b5 23       	and	r27, r21
     900:	28 17       	cp	r18, r24
     902:	39 07       	cpc	r19, r25
     904:	4a 07       	cpc	r20, r26
     906:	5b 07       	cpc	r21, r27
     908:	21 f0       	breq	.+8      	; 0x912 <prvTestWaitCondition+0x3c>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	03 c0       	rjmp	.+6      	; 0x914 <prvTestWaitCondition+0x3e>
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	01 c0       	rjmp	.+2      	; 0x914 <prvTestWaitCondition+0x3e>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	0f 91       	pop	r16
     916:	08 95       	ret

00000918 <xEventGroupCreate>:
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	8f e0       	ldi	r24, 0x0F	; 15
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	af d1       	rcall	.+862    	; 0xc80 <pvPortMalloc>
     922:	ec 01       	movw	r28, r24
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	39 f0       	breq	.+14     	; 0x936 <xEventGroupCreate+0x1e>
     928:	fc 01       	movw	r30, r24
     92a:	11 92       	st	Z+, r1
     92c:	11 92       	st	Z+, r1
     92e:	11 92       	st	Z+, r1
     930:	11 92       	st	Z+, r1
     932:	cf 01       	movw	r24, r30
     934:	8b d2       	rcall	.+1302   	; 0xe4c <vListInitialise>
     936:	ce 01       	movw	r24, r28
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <xEventGroupWaitBits>:
     93e:	2f 92       	push	r2
     940:	3f 92       	push	r3
     942:	4f 92       	push	r4
     944:	5f 92       	push	r5
     946:	6f 92       	push	r6
     948:	7f 92       	push	r7
     94a:	8f 92       	push	r8
     94c:	9f 92       	push	r9
     94e:	af 92       	push	r10
     950:	bf 92       	push	r11
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	ec 01       	movw	r28, r24
     964:	4a 01       	movw	r8, r20
     966:	5b 01       	movw	r10, r22
     968:	62 2e       	mov	r6, r18
     96a:	70 2e       	mov	r7, r16
     96c:	0e 94 20 12 	call	0x2440	; 0x2440 <vTaskSuspendAll>
     970:	28 80       	ld	r2, Y
     972:	39 80       	ldd	r3, Y+1	; 0x01
     974:	4a 80       	ldd	r4, Y+2	; 0x02
     976:	5b 80       	ldd	r5, Y+3	; 0x03
     978:	a5 01       	movw	r20, r10
     97a:	94 01       	movw	r18, r8
     97c:	c2 01       	movw	r24, r4
     97e:	b1 01       	movw	r22, r2
     980:	aa df       	rcall	.-172    	; 0x8d6 <prvTestWaitCondition>
     982:	88 23       	and	r24, r24
     984:	a1 f0       	breq	.+40     	; 0x9ae <xEventGroupWaitBits+0x70>
     986:	66 20       	and	r6, r6
     988:	89 f1       	breq	.+98     	; 0x9ec <xEventGroupWaitBits+0xae>
     98a:	d5 01       	movw	r26, r10
     98c:	c4 01       	movw	r24, r8
     98e:	80 95       	com	r24
     990:	90 95       	com	r25
     992:	a0 95       	com	r26
     994:	b0 95       	com	r27
     996:	82 21       	and	r24, r2
     998:	93 21       	and	r25, r3
     99a:	a4 21       	and	r26, r4
     99c:	b5 21       	and	r27, r5
     99e:	88 83       	st	Y, r24
     9a0:	99 83       	std	Y+1, r25	; 0x01
     9a2:	aa 83       	std	Y+2, r26	; 0x02
     9a4:	bb 83       	std	Y+3, r27	; 0x03
     9a6:	c1 2c       	mov	r12, r1
     9a8:	d1 2c       	mov	r13, r1
     9aa:	76 01       	movw	r14, r12
     9ac:	22 c0       	rjmp	.+68     	; 0x9f2 <xEventGroupWaitBits+0xb4>
     9ae:	c1 14       	cp	r12, r1
     9b0:	d1 04       	cpc	r13, r1
     9b2:	e1 04       	cpc	r14, r1
     9b4:	f1 04       	cpc	r15, r1
     9b6:	e9 f0       	breq	.+58     	; 0x9f2 <xEventGroupWaitBits+0xb4>
     9b8:	61 10       	cpse	r6, r1
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <xEventGroupWaitBits+0x86>
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	ba 01       	movw	r22, r20
     9c2:	04 c0       	rjmp	.+8      	; 0x9cc <xEventGroupWaitBits+0x8e>
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	71 10       	cpse	r7, r1
     9ce:	74 60       	ori	r23, 0x04	; 4
     9d0:	48 29       	or	r20, r8
     9d2:	59 29       	or	r21, r9
     9d4:	6a 29       	or	r22, r10
     9d6:	7b 29       	or	r23, r11
     9d8:	97 01       	movw	r18, r14
     9da:	86 01       	movw	r16, r12
     9dc:	ce 01       	movw	r24, r28
     9de:	04 96       	adiw	r24, 0x04	; 4
     9e0:	0e 94 38 15 	call	0x2a70	; 0x2a70 <vTaskPlaceOnUnorderedEventList>
     9e4:	21 2c       	mov	r2, r1
     9e6:	31 2c       	mov	r3, r1
     9e8:	21 01       	movw	r4, r2
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <xEventGroupWaitBits+0xb4>
     9ec:	c1 2c       	mov	r12, r1
     9ee:	d1 2c       	mov	r13, r1
     9f0:	76 01       	movw	r14, r12
     9f2:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>
     9f6:	cd 28       	or	r12, r13
     9f8:	ce 28       	or	r12, r14
     9fa:	cf 28       	or	r12, r15
     9fc:	59 f1       	breq	.+86     	; 0xa54 <xEventGroupWaitBits+0x116>
     9fe:	81 11       	cpse	r24, r1
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <xEventGroupWaitBits+0xc6>
     a02:	f2 d2       	rcall	.+1508   	; 0xfe8 <vPortYield>
     a04:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <uxTaskResetEventItemValue>
     a08:	6b 01       	movw	r12, r22
     a0a:	7c 01       	movw	r14, r24
     a0c:	91 fd       	sbrc	r25, 1
     a0e:	1f c0       	rjmp	.+62     	; 0xa4e <xEventGroupWaitBits+0x110>
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	0f 92       	push	r0
     a16:	c8 80       	ld	r12, Y
     a18:	d9 80       	ldd	r13, Y+1	; 0x01
     a1a:	ea 80       	ldd	r14, Y+2	; 0x02
     a1c:	fb 80       	ldd	r15, Y+3	; 0x03
     a1e:	07 2d       	mov	r16, r7
     a20:	a5 01       	movw	r20, r10
     a22:	94 01       	movw	r18, r8
     a24:	c7 01       	movw	r24, r14
     a26:	b6 01       	movw	r22, r12
     a28:	56 df       	rcall	.-340    	; 0x8d6 <prvTestWaitCondition>
     a2a:	88 23       	and	r24, r24
     a2c:	71 f0       	breq	.+28     	; 0xa4a <xEventGroupWaitBits+0x10c>
     a2e:	66 20       	and	r6, r6
     a30:	61 f0       	breq	.+24     	; 0xa4a <xEventGroupWaitBits+0x10c>
     a32:	80 94       	com	r8
     a34:	90 94       	com	r9
     a36:	a0 94       	com	r10
     a38:	b0 94       	com	r11
     a3a:	8c 20       	and	r8, r12
     a3c:	9d 20       	and	r9, r13
     a3e:	ae 20       	and	r10, r14
     a40:	bf 20       	and	r11, r15
     a42:	88 82       	st	Y, r8
     a44:	99 82       	std	Y+1, r9	; 0x01
     a46:	aa 82       	std	Y+2, r10	; 0x02
     a48:	bb 82       	std	Y+3, r11	; 0x03
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	16 01       	movw	r2, r12
     a50:	27 01       	movw	r4, r14
     a52:	55 24       	eor	r5, r5
     a54:	c2 01       	movw	r24, r4
     a56:	b1 01       	movw	r22, r2
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	af 90       	pop	r10
     a6c:	9f 90       	pop	r9
     a6e:	8f 90       	pop	r8
     a70:	7f 90       	pop	r7
     a72:	6f 90       	pop	r6
     a74:	5f 90       	pop	r5
     a76:	4f 90       	pop	r4
     a78:	3f 90       	pop	r3
     a7a:	2f 90       	pop	r2
     a7c:	08 95       	ret

00000a7e <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     a7e:	4f 92       	push	r4
     a80:	5f 92       	push	r5
     a82:	6f 92       	push	r6
     a84:	7f 92       	push	r7
     a86:	af 92       	push	r10
     a88:	bf 92       	push	r11
     a8a:	cf 92       	push	r12
     a8c:	df 92       	push	r13
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ec 01       	movw	r28, r24
     a9c:	6a 01       	movw	r12, r20
     a9e:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     aa0:	8c 01       	movw	r16, r24
     aa2:	09 5f       	subi	r16, 0xF9	; 249
     aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     aa6:	0e 94 20 12 	call	0x2440	; 0x2440 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     aaa:	eb 85       	ldd	r30, Y+11	; 0x0b
     aac:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     aae:	88 81       	ld	r24, Y
     ab0:	99 81       	ldd	r25, Y+1	; 0x01
     ab2:	aa 81       	ldd	r26, Y+2	; 0x02
     ab4:	bb 81       	ldd	r27, Y+3	; 0x03
     ab6:	c8 2a       	or	r12, r24
     ab8:	d9 2a       	or	r13, r25
     aba:	ea 2a       	or	r14, r26
     abc:	fb 2a       	or	r15, r27
     abe:	c8 82       	st	Y, r12
     ac0:	d9 82       	std	Y+1, r13	; 0x01
     ac2:	ea 82       	std	Y+2, r14	; 0x02
     ac4:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     ac6:	c1 2c       	mov	r12, r1
     ac8:	d1 2c       	mov	r13, r1
     aca:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     acc:	3d c0       	rjmp	.+122    	; 0xb48 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     ace:	a4 80       	ldd	r10, Z+4	; 0x04
     ad0:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	a2 81       	ldd	r26, Z+2	; 0x02
     ad8:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     ada:	ac 01       	movw	r20, r24
     adc:	bd 01       	movw	r22, r26
     ade:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     ae0:	b2 fd       	sbrc	r27, 2
     ae2:	0e c0       	rjmp	.+28     	; 0xb00 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     ae4:	48 80       	ld	r4, Y
     ae6:	59 80       	ldd	r5, Y+1	; 0x01
     ae8:	6a 80       	ldd	r6, Y+2	; 0x02
     aea:	7b 80       	ldd	r7, Y+3	; 0x03
     aec:	44 22       	and	r4, r20
     aee:	55 22       	and	r5, r21
     af0:	66 22       	and	r6, r22
     af2:	77 22       	and	r7, r23
     af4:	45 28       	or	r4, r5
     af6:	46 28       	or	r4, r6
     af8:	47 28       	or	r4, r7
     afa:	89 f4       	brne	.+34     	; 0xb1e <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	12 c0       	rjmp	.+36     	; 0xb24 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     b00:	48 80       	ld	r4, Y
     b02:	59 80       	ldd	r5, Y+1	; 0x01
     b04:	6a 80       	ldd	r6, Y+2	; 0x02
     b06:	7b 80       	ldd	r7, Y+3	; 0x03
     b08:	44 22       	and	r4, r20
     b0a:	55 22       	and	r5, r21
     b0c:	66 22       	and	r6, r22
     b0e:	77 22       	and	r7, r23
     b10:	44 15       	cp	r20, r4
     b12:	55 05       	cpc	r21, r5
     b14:	66 05       	cpc	r22, r6
     b16:	77 05       	cpc	r23, r7
     b18:	21 f0       	breq	.+8      	; 0xb22 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     b1e:	21 e0       	ldi	r18, 0x01	; 1
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     b22:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     b24:	22 23       	and	r18, r18
     b26:	71 f0       	breq	.+28     	; 0xb44 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     b28:	b0 ff       	sbrs	r27, 0
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     b2c:	c4 2a       	or	r12, r20
     b2e:	d5 2a       	or	r13, r21
     b30:	e6 2a       	or	r14, r22
     b32:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     b34:	48 81       	ld	r20, Y
     b36:	59 81       	ldd	r21, Y+1	; 0x01
     b38:	6a 81       	ldd	r22, Y+2	; 0x02
     b3a:	7b 81       	ldd	r23, Y+3	; 0x03
     b3c:	72 60       	ori	r23, 0x02	; 2
     b3e:	cf 01       	movw	r24, r30
     b40:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     b44:	ea 2d       	mov	r30, r10
     b46:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     b48:	e0 17       	cp	r30, r16
     b4a:	f1 07       	cpc	r31, r17
     b4c:	09 f0       	breq	.+2      	; 0xb50 <xEventGroupSetBits+0xd2>
     b4e:	bf cf       	rjmp	.-130    	; 0xace <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     b50:	c0 94       	com	r12
     b52:	d0 94       	com	r13
     b54:	e0 94       	com	r14
     b56:	f0 94       	com	r15
     b58:	88 81       	ld	r24, Y
     b5a:	99 81       	ldd	r25, Y+1	; 0x01
     b5c:	aa 81       	ldd	r26, Y+2	; 0x02
     b5e:	bb 81       	ldd	r27, Y+3	; 0x03
     b60:	c8 22       	and	r12, r24
     b62:	d9 22       	and	r13, r25
     b64:	ea 22       	and	r14, r26
     b66:	fb 22       	and	r15, r27
     b68:	c8 82       	st	Y, r12
     b6a:	d9 82       	std	Y+1, r13	; 0x01
     b6c:	ea 82       	std	Y+2, r14	; 0x02
     b6e:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     b70:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     b74:	68 81       	ld	r22, Y
     b76:	79 81       	ldd	r23, Y+1	; 0x01
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	9b 81       	ldd	r25, Y+3	; 0x03
}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	bf 90       	pop	r11
     b8e:	af 90       	pop	r10
     b90:	7f 90       	pop	r7
     b92:	6f 90       	pop	r6
     b94:	5f 90       	pop	r5
     b96:	4f 90       	pop	r4
     b98:	08 95       	ret

00000b9a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     b9a:	ed e5       	ldi	r30, 0x5D	; 93
     b9c:	f9 e0       	ldi	r31, 0x09	; 9
     b9e:	a1 e6       	ldi	r26, 0x61	; 97
     ba0:	b9 e0       	ldi	r27, 0x09	; 9
     ba2:	b1 83       	std	Z+1, r27	; 0x01
     ba4:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     ba6:	13 82       	std	Z+3, r1	; 0x03
     ba8:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     baa:	e9 e0       	ldi	r30, 0x09	; 9
     bac:	f7 e1       	ldi	r31, 0x17	; 23
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     bae:	f0 93 5c 09 	sts	0x095C, r31	; 0x80095c <pxEnd+0x1>
     bb2:	e0 93 5b 09 	sts	0x095B, r30	; 0x80095b <pxEnd>
    pxEnd->xBlockSize = 0;
     bb6:	13 82       	std	Z+3, r1	; 0x03
     bb8:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     bba:	11 82       	std	Z+1, r1	; 0x01
     bbc:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     bbe:	88 ea       	ldi	r24, 0xA8	; 168
     bc0:	9d e0       	ldi	r25, 0x0D	; 13
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	9c 93       	st	X, r25
     bc6:	8e 93       	st	-X, r24
     bc8:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     bca:	ed 93       	st	X+, r30
     bcc:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     bce:	90 93 58 09 	sts	0x0958, r25	; 0x800958 <xMinimumEverFreeBytesRemaining+0x1>
     bd2:	80 93 57 09 	sts	0x0957, r24	; 0x800957 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     bd6:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <xFreeBytesRemaining+0x1>
     bda:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e8       	ldi	r25, 0x80	; 128
     be2:	90 93 52 09 	sts	0x0952, r25	; 0x800952 <xBlockAllocatedBit+0x1>
     be6:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <xBlockAllocatedBit>
     bea:	08 95       	ret

00000bec <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     bf2:	ad e5       	ldi	r26, 0x5D	; 93
     bf4:	b9 e0       	ldi	r27, 0x09	; 9
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <prvInsertBlockIntoFreeList+0xe>
     bf8:	df 01       	movw	r26, r30
     bfa:	ed 91       	ld	r30, X+
     bfc:	fc 91       	ld	r31, X
     bfe:	11 97       	sbiw	r26, 0x01	; 1
     c00:	ec 17       	cp	r30, r28
     c02:	fd 07       	cpc	r31, r29
     c04:	c8 f3       	brcs	.-14     	; 0xbf8 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     c06:	12 96       	adiw	r26, 0x02	; 2
     c08:	8d 91       	ld	r24, X+
     c0a:	9c 91       	ld	r25, X
     c0c:	13 97       	sbiw	r26, 0x03	; 3
     c0e:	9d 01       	movw	r18, r26
     c10:	28 0f       	add	r18, r24
     c12:	39 1f       	adc	r19, r25
     c14:	c2 17       	cp	r28, r18
     c16:	d3 07       	cpc	r29, r19
     c18:	49 f4       	brne	.+18     	; 0xc2c <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     c1a:	2a 81       	ldd	r18, Y+2	; 0x02
     c1c:	3b 81       	ldd	r19, Y+3	; 0x03
     c1e:	82 0f       	add	r24, r18
     c20:	93 1f       	adc	r25, r19
     c22:	13 96       	adiw	r26, 0x03	; 3
     c24:	9c 93       	st	X, r25
     c26:	8e 93       	st	-X, r24
     c28:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     c2a:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	9b 81       	ldd	r25, Y+3	; 0x03
     c30:	9e 01       	movw	r18, r28
     c32:	28 0f       	add	r18, r24
     c34:	39 1f       	adc	r19, r25
     c36:	e2 17       	cp	r30, r18
     c38:	f3 07       	cpc	r31, r19
     c3a:	c1 f4       	brne	.+48     	; 0xc6c <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     c3c:	20 91 5b 09 	lds	r18, 0x095B	; 0x80095b <pxEnd>
     c40:	30 91 5c 09 	lds	r19, 0x095C	; 0x80095c <pxEnd+0x1>
     c44:	e2 17       	cp	r30, r18
     c46:	f3 07       	cpc	r31, r19
     c48:	71 f0       	breq	.+28     	; 0xc66 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     c4a:	22 81       	ldd	r18, Z+2	; 0x02
     c4c:	33 81       	ldd	r19, Z+3	; 0x03
     c4e:	82 0f       	add	r24, r18
     c50:	93 1f       	adc	r25, r19
     c52:	9b 83       	std	Y+3, r25	; 0x03
     c54:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     c56:	ed 91       	ld	r30, X+
     c58:	fc 91       	ld	r31, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	99 83       	std	Y+1, r25	; 0x01
     c62:	88 83       	st	Y, r24
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     c66:	39 83       	std	Y+1, r19	; 0x01
     c68:	28 83       	st	Y, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     c6c:	f9 83       	std	Y+1, r31	; 0x01
     c6e:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     c70:	ca 17       	cp	r28, r26
     c72:	db 07       	cpc	r29, r27
     c74:	11 f0       	breq	.+4      	; 0xc7a <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     c76:	cd 93       	st	X+, r28
     c78:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     c8e:	0e 94 20 12 	call	0x2440	; 0x2440 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     c92:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <pxEnd>
     c96:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <pxEnd+0x1>
     c9a:	89 2b       	or	r24, r25
     c9c:	09 f4       	brne	.+2      	; 0xca0 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     c9e:	7d df       	rcall	.-262    	; 0xb9a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     ca0:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <xBlockAllocatedBit>
     ca4:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <xBlockAllocatedBit+0x1>
     ca8:	80 23       	and	r24, r16
     caa:	91 23       	and	r25, r17
     cac:	89 2b       	or	r24, r25
     cae:	09 f0       	breq	.+2      	; 0xcb2 <pvPortMalloc+0x32>
     cb0:	76 c0       	rjmp	.+236    	; 0xd9e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     cb2:	01 15       	cp	r16, r1
     cb4:	11 05       	cpc	r17, r1
     cb6:	49 f0       	breq	.+18     	; 0xcca <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     cb8:	c8 01       	movw	r24, r16
     cba:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     cbc:	08 17       	cp	r16, r24
     cbe:	19 07       	cpc	r17, r25
     cc0:	18 f0       	brcs	.+6      	; 0xcc8 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     cc2:	00 e0       	ldi	r16, 0x00	; 0
     cc4:	10 e0       	ldi	r17, 0x00	; 0
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     cc8:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     cca:	01 15       	cp	r16, r1
     ccc:	11 05       	cpc	r17, r1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <pvPortMalloc+0x52>
     cd0:	69 c0       	rjmp	.+210    	; 0xda4 <pvPortMalloc+0x124>
     cd2:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <xFreeBytesRemaining>
     cd6:	90 91 5a 09 	lds	r25, 0x095A	; 0x80095a <xFreeBytesRemaining+0x1>
     cda:	80 17       	cp	r24, r16
     cdc:	91 07       	cpc	r25, r17
     cde:	08 f4       	brcc	.+2      	; 0xce2 <pvPortMalloc+0x62>
     ce0:	64 c0       	rjmp	.+200    	; 0xdaa <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     ce2:	c0 91 5d 09 	lds	r28, 0x095D	; 0x80095d <xStart>
     ce6:	d0 91 5e 09 	lds	r29, 0x095E	; 0x80095e <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     cea:	ed e5       	ldi	r30, 0x5D	; 93
     cec:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     cf0:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     cf2:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	80 17       	cp	r24, r16
     cfa:	91 07       	cpc	r25, r17
     cfc:	20 f4       	brcc	.+8      	; 0xd06 <pvPortMalloc+0x86>
     cfe:	88 81       	ld	r24, Y
     d00:	99 81       	ldd	r25, Y+1	; 0x01
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	a9 f7       	brne	.-22     	; 0xcf0 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     d06:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <pxEnd>
     d0a:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <pxEnd+0x1>
     d0e:	c8 17       	cp	r28, r24
     d10:	d9 07       	cpc	r29, r25
     d12:	09 f4       	brne	.+2      	; 0xd16 <pvPortMalloc+0x96>
     d14:	4d c0       	rjmp	.+154    	; 0xdb0 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     d16:	e0 80       	ld	r14, Z
     d18:	f1 80       	ldd	r15, Z+1	; 0x01
     d1a:	84 e0       	ldi	r24, 0x04	; 4
     d1c:	e8 0e       	add	r14, r24
     d1e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     d20:	88 81       	ld	r24, Y
     d22:	99 81       	ldd	r25, Y+1	; 0x01
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     d28:	2a 81       	ldd	r18, Y+2	; 0x02
     d2a:	3b 81       	ldd	r19, Y+3	; 0x03
     d2c:	20 1b       	sub	r18, r16
     d2e:	31 0b       	sbc	r19, r17
     d30:	29 30       	cpi	r18, 0x09	; 9
     d32:	31 05       	cpc	r19, r1
     d34:	48 f0       	brcs	.+18     	; 0xd48 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     d36:	ce 01       	movw	r24, r28
     d38:	80 0f       	add	r24, r16
     d3a:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     d3c:	fc 01       	movw	r30, r24
     d3e:	33 83       	std	Z+3, r19	; 0x03
     d40:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     d42:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     d44:	0a 83       	std	Y+2, r16	; 0x02
     d46:	52 df       	rcall	.-348    	; 0xbec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     d48:	2a 81       	ldd	r18, Y+2	; 0x02
     d4a:	3b 81       	ldd	r19, Y+3	; 0x03
     d4c:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <xFreeBytesRemaining>
     d50:	90 91 5a 09 	lds	r25, 0x095A	; 0x80095a <xFreeBytesRemaining+0x1>
     d54:	82 1b       	sub	r24, r18
     d56:	93 0b       	sbc	r25, r19
     d58:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <xFreeBytesRemaining+0x1>
     d5c:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     d60:	40 91 57 09 	lds	r20, 0x0957	; 0x800957 <xMinimumEverFreeBytesRemaining>
     d64:	50 91 58 09 	lds	r21, 0x0958	; 0x800958 <xMinimumEverFreeBytesRemaining+0x1>
     d68:	84 17       	cp	r24, r20
     d6a:	95 07       	cpc	r25, r21
     d6c:	20 f4       	brcc	.+8      	; 0xd76 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     d6e:	90 93 58 09 	sts	0x0958, r25	; 0x800958 <xMinimumEverFreeBytesRemaining+0x1>
     d72:	80 93 57 09 	sts	0x0957, r24	; 0x800957 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     d76:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <xBlockAllocatedBit>
     d7a:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <xBlockAllocatedBit+0x1>
     d7e:	28 2b       	or	r18, r24
     d80:	39 2b       	or	r19, r25
     d82:	3b 83       	std	Y+3, r19	; 0x03
     d84:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     d86:	19 82       	std	Y+1, r1	; 0x01
     d88:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     d8a:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <xNumberOfSuccessfulAllocations>
     d8e:	90 91 56 09 	lds	r25, 0x0956	; 0x800956 <xNumberOfSuccessfulAllocations+0x1>
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	90 93 56 09 	sts	0x0956, r25	; 0x800956 <xNumberOfSuccessfulAllocations+0x1>
     d98:	80 93 55 09 	sts	0x0955, r24	; 0x800955 <xNumberOfSuccessfulAllocations>
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     d9e:	e1 2c       	mov	r14, r1
     da0:	f1 2c       	mov	r15, r1
     da2:	08 c0       	rjmp	.+16     	; 0xdb4 <pvPortMalloc+0x134>
     da4:	e1 2c       	mov	r14, r1
     da6:	f1 2c       	mov	r15, r1
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <pvPortMalloc+0x134>
     daa:	e1 2c       	mov	r14, r1
     dac:	f1 2c       	mov	r15, r1
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <pvPortMalloc+0x134>
     db0:	e1 2c       	mov	r14, r1
     db2:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     db4:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     db8:	e1 14       	cp	r14, r1
     dba:	f1 04       	cpc	r15, r1
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     dbe:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     dc2:	c7 01       	movw	r24, r14
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	08 95       	ret

00000dd2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	91 f1       	breq	.+100    	; 0xe42 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     dde:	ec 01       	movw	r28, r24
     de0:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     de2:	4a 81       	ldd	r20, Y+2	; 0x02
     de4:	5b 81       	ldd	r21, Y+3	; 0x03
     de6:	20 91 51 09 	lds	r18, 0x0951	; 0x800951 <xBlockAllocatedBit>
     dea:	30 91 52 09 	lds	r19, 0x0952	; 0x800952 <xBlockAllocatedBit+0x1>
     dee:	ba 01       	movw	r22, r20
     df0:	62 23       	and	r22, r18
     df2:	73 23       	and	r23, r19
     df4:	67 2b       	or	r22, r23
     df6:	29 f1       	breq	.+74     	; 0xe42 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     df8:	68 81       	ld	r22, Y
     dfa:	79 81       	ldd	r23, Y+1	; 0x01
     dfc:	67 2b       	or	r22, r23
     dfe:	09 f5       	brne	.+66     	; 0xe42 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     e00:	20 95       	com	r18
     e02:	30 95       	com	r19
     e04:	24 23       	and	r18, r20
     e06:	35 23       	and	r19, r21
     e08:	3b 83       	std	Y+3, r19	; 0x03
     e0a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     e0c:	0e 94 20 12 	call	0x2440	; 0x2440 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	20 91 59 09 	lds	r18, 0x0959	; 0x800959 <xFreeBytesRemaining>
     e18:	30 91 5a 09 	lds	r19, 0x095A	; 0x80095a <xFreeBytesRemaining+0x1>
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <xFreeBytesRemaining+0x1>
     e24:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     e28:	ce 01       	movw	r24, r28
     e2a:	e0 de       	rcall	.-576    	; 0xbec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     e2c:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <xNumberOfSuccessfulFrees>
     e30:	90 91 54 09 	lds	r25, 0x0954	; 0x800954 <xNumberOfSuccessfulFrees+0x1>
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	90 93 54 09 	sts	0x0954, r25	; 0x800954 <xNumberOfSuccessfulFrees+0x1>
     e3a:	80 93 53 09 	sts	0x0953, r24	; 0x800953 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     e3e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret

00000e4c <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     e4c:	fc 01       	movw	r30, r24
     e4e:	03 96       	adiw	r24, 0x03	; 3
     e50:	92 83       	std	Z+2, r25	; 0x02
     e52:	81 83       	std	Z+1, r24	; 0x01
     e54:	4f ef       	ldi	r20, 0xFF	; 255
     e56:	5f ef       	ldi	r21, 0xFF	; 255
     e58:	ba 01       	movw	r22, r20
     e5a:	43 83       	std	Z+3, r20	; 0x03
     e5c:	54 83       	std	Z+4, r21	; 0x04
     e5e:	65 83       	std	Z+5, r22	; 0x05
     e60:	76 83       	std	Z+6, r23	; 0x06
     e62:	90 87       	std	Z+8, r25	; 0x08
     e64:	87 83       	std	Z+7, r24	; 0x07
     e66:	92 87       	std	Z+10, r25	; 0x0a
     e68:	81 87       	std	Z+9, r24	; 0x09
     e6a:	10 82       	st	Z, r1
     e6c:	08 95       	ret

00000e6e <vListInitialiseItem>:
     e6e:	fc 01       	movw	r30, r24
     e70:	13 86       	std	Z+11, r1	; 0x0b
     e72:	12 86       	std	Z+10, r1	; 0x0a
     e74:	08 95       	ret

00000e76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e80:	08 81       	ld	r16, Y
     e82:	19 81       	ldd	r17, Y+1	; 0x01
     e84:	2a 81       	ldd	r18, Y+2	; 0x02
     e86:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     e88:	0f 3f       	cpi	r16, 0xFF	; 255
     e8a:	4f ef       	ldi	r20, 0xFF	; 255
     e8c:	14 07       	cpc	r17, r20
     e8e:	24 07       	cpc	r18, r20
     e90:	34 07       	cpc	r19, r20
     e92:	21 f4       	brne	.+8      	; 0xe9c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     e94:	fc 01       	movw	r30, r24
     e96:	a1 85       	ldd	r26, Z+9	; 0x09
     e98:	b2 85       	ldd	r27, Z+10	; 0x0a
     e9a:	11 c0       	rjmp	.+34     	; 0xebe <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     e9c:	dc 01       	movw	r26, r24
     e9e:	13 96       	adiw	r26, 0x03	; 3
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <vListInsert+0x2e>
     ea2:	df 01       	movw	r26, r30
     ea4:	14 96       	adiw	r26, 0x04	; 4
     ea6:	ed 91       	ld	r30, X+
     ea8:	fc 91       	ld	r31, X
     eaa:	15 97       	sbiw	r26, 0x05	; 5
     eac:	40 81       	ld	r20, Z
     eae:	51 81       	ldd	r21, Z+1	; 0x01
     eb0:	62 81       	ldd	r22, Z+2	; 0x02
     eb2:	73 81       	ldd	r23, Z+3	; 0x03
     eb4:	04 17       	cp	r16, r20
     eb6:	15 07       	cpc	r17, r21
     eb8:	26 07       	cpc	r18, r22
     eba:	37 07       	cpc	r19, r23
     ebc:	90 f7       	brcc	.-28     	; 0xea2 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     ebe:	14 96       	adiw	r26, 0x04	; 4
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	15 97       	sbiw	r26, 0x05	; 5
     ec6:	fd 83       	std	Y+5, r31	; 0x05
     ec8:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     eca:	d7 83       	std	Z+7, r29	; 0x07
     ecc:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     ece:	bf 83       	std	Y+7, r27	; 0x07
     ed0:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     ed2:	15 96       	adiw	r26, 0x05	; 5
     ed4:	dc 93       	st	X, r29
     ed6:	ce 93       	st	-X, r28
     ed8:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     eda:	9b 87       	std	Y+11, r25	; 0x0b
     edc:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ede:	fc 01       	movw	r30, r24
     ee0:	20 81       	ld	r18, Z
     ee2:	2f 5f       	subi	r18, 0xFF	; 255
     ee4:	20 83       	st	Z, r18
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     ef6:	a2 85       	ldd	r26, Z+10	; 0x0a
     ef8:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     efa:	c4 81       	ldd	r28, Z+4	; 0x04
     efc:	d5 81       	ldd	r29, Z+5	; 0x05
     efe:	86 81       	ldd	r24, Z+6	; 0x06
     f00:	97 81       	ldd	r25, Z+7	; 0x07
     f02:	9f 83       	std	Y+7, r25	; 0x07
     f04:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f06:	c6 81       	ldd	r28, Z+6	; 0x06
     f08:	d7 81       	ldd	r29, Z+7	; 0x07
     f0a:	84 81       	ldd	r24, Z+4	; 0x04
     f0c:	95 81       	ldd	r25, Z+5	; 0x05
     f0e:	9d 83       	std	Y+5, r25	; 0x05
     f10:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	8d 91       	ld	r24, X+
     f16:	9c 91       	ld	r25, X
     f18:	12 97       	sbiw	r26, 0x02	; 2
     f1a:	e8 17       	cp	r30, r24
     f1c:	f9 07       	cpc	r31, r25
     f1e:	31 f4       	brne	.+12     	; 0xf2c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     f20:	86 81       	ldd	r24, Z+6	; 0x06
     f22:	97 81       	ldd	r25, Z+7	; 0x07
     f24:	12 96       	adiw	r26, 0x02	; 2
     f26:	9c 93       	st	X, r25
     f28:	8e 93       	st	-X, r24
     f2a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     f2c:	13 86       	std	Z+11, r1	; 0x0b
     f2e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     f30:	8c 91       	ld	r24, X
     f32:	81 50       	subi	r24, 0x01	; 1
     f34:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     f36:	8c 91       	ld	r24, X
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     f3e:	a8 95       	wdr
     f40:	90 ec       	ldi	r25, 0xC0	; 192
     f42:	88 e1       	ldi	r24, 0x18	; 24
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	a8 95       	wdr
     f4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     f54:	08 95       	ret

00000f56 <pxPortInitialiseStack>:
     f56:	fc 01       	movw	r30, r24
     f58:	60 83       	st	Z, r22
     f5a:	31 97       	sbiw	r30, 0x01	; 1
     f5c:	70 83       	st	Z, r23
     f5e:	31 97       	sbiw	r30, 0x01	; 1
     f60:	10 82       	st	Z, r1
     f62:	31 97       	sbiw	r30, 0x01	; 1
     f64:	10 82       	st	Z, r1
     f66:	31 97       	sbiw	r30, 0x01	; 1
     f68:	20 e8       	ldi	r18, 0x80	; 128
     f6a:	20 83       	st	Z, r18
     f6c:	31 97       	sbiw	r30, 0x01	; 1
     f6e:	10 82       	st	Z, r1
     f70:	31 97       	sbiw	r30, 0x01	; 1
     f72:	10 82       	st	Z, r1
     f74:	31 97       	sbiw	r30, 0x01	; 1
     f76:	10 82       	st	Z, r1
     f78:	77 97       	sbiw	r30, 0x17	; 23
     f7a:	40 83       	st	Z, r20
     f7c:	31 97       	sbiw	r30, 0x01	; 1
     f7e:	50 83       	st	Z, r21
     f80:	86 97       	sbiw	r24, 0x26	; 38
     f82:	08 95       	ret

00000f84 <xPortStartScheduler>:
     f84:	dc df       	rcall	.-72     	; 0xf3e <prvSetupTimerInterrupt>
     f86:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
     f8a:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
     f8e:	cd 91       	ld	r28, X+
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	dd 91       	ld	r29, X+
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	ff 91       	pop	r31
     f98:	ef 91       	pop	r30
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	bf 90       	pop	r11
     fc0:	af 90       	pop	r10
     fc2:	9f 90       	pop	r9
     fc4:	8f 90       	pop	r8
     fc6:	7f 90       	pop	r7
     fc8:	6f 90       	pop	r6
     fca:	5f 90       	pop	r5
     fcc:	4f 90       	pop	r4
     fce:	3f 90       	pop	r3
     fd0:	2f 90       	pop	r2
     fd2:	1f 90       	pop	r1
     fd4:	0f 90       	pop	r0
     fd6:	0c be       	out	0x3c, r0	; 60
     fd8:	0f 90       	pop	r0
     fda:	0b be       	out	0x3b, r0	; 59
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	0f 90       	pop	r0
     fe2:	08 95       	ret
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	08 95       	ret

00000fe8 <vPortYield>:
     fe8:	0f 92       	push	r0
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	0f 92       	push	r0
     ff0:	0b b6       	in	r0, 0x3b	; 59
     ff2:	0f 92       	push	r0
     ff4:	0c b6       	in	r0, 0x3c	; 60
     ff6:	0f 92       	push	r0
     ff8:	1f 92       	push	r1
     ffa:	11 24       	eor	r1, r1
     ffc:	2f 92       	push	r2
     ffe:	3f 92       	push	r3
    1000:	4f 92       	push	r4
    1002:	5f 92       	push	r5
    1004:	6f 92       	push	r6
    1006:	7f 92       	push	r7
    1008:	8f 92       	push	r8
    100a:	9f 92       	push	r9
    100c:	af 92       	push	r10
    100e:	bf 92       	push	r11
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	2f 93       	push	r18
    101e:	3f 93       	push	r19
    1020:	4f 93       	push	r20
    1022:	5f 93       	push	r21
    1024:	6f 93       	push	r22
    1026:	7f 93       	push	r23
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	af 93       	push	r26
    102e:	bf 93       	push	r27
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
    1038:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    103c:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    1040:	0d b6       	in	r0, 0x3d	; 61
    1042:	0d 92       	st	X+, r0
    1044:	0e b6       	in	r0, 0x3e	; 62
    1046:	0d 92       	st	X+, r0
    1048:	0e 94 bc 14 	call	0x2978	; 0x2978 <vTaskSwitchContext>
    104c:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    1050:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    1054:	cd 91       	ld	r28, X+
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	dd 91       	ld	r29, X+
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	bf 90       	pop	r11
    1086:	af 90       	pop	r10
    1088:	9f 90       	pop	r9
    108a:	8f 90       	pop	r8
    108c:	7f 90       	pop	r7
    108e:	6f 90       	pop	r6
    1090:	5f 90       	pop	r5
    1092:	4f 90       	pop	r4
    1094:	3f 90       	pop	r3
    1096:	2f 90       	pop	r2
    1098:	1f 90       	pop	r1
    109a:	0f 90       	pop	r0
    109c:	0c be       	out	0x3c, r0	; 60
    109e:	0f 90       	pop	r0
    10a0:	0b be       	out	0x3b, r0	; 59
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	08 95       	ret

000010aa <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	0f 92       	push	r0
    10b2:	0b b6       	in	r0, 0x3b	; 59
    10b4:	0f 92       	push	r0
    10b6:	0c b6       	in	r0, 0x3c	; 60
    10b8:	0f 92       	push	r0
    10ba:	1f 92       	push	r1
    10bc:	11 24       	eor	r1, r1
    10be:	2f 92       	push	r2
    10c0:	3f 92       	push	r3
    10c2:	4f 92       	push	r4
    10c4:	5f 92       	push	r5
    10c6:	6f 92       	push	r6
    10c8:	7f 92       	push	r7
    10ca:	8f 92       	push	r8
    10cc:	9f 92       	push	r9
    10ce:	af 92       	push	r10
    10d0:	bf 92       	push	r11
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	2f 93       	push	r18
    10e0:	3f 93       	push	r19
    10e2:	4f 93       	push	r20
    10e4:	5f 93       	push	r21
    10e6:	6f 93       	push	r22
    10e8:	7f 93       	push	r23
    10ea:	8f 93       	push	r24
    10ec:	9f 93       	push	r25
    10ee:	af 93       	push	r26
    10f0:	bf 93       	push	r27
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
    10fa:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    10fe:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    1102:	0d b6       	in	r0, 0x3d	; 61
    1104:	0d 92       	st	X+, r0
    1106:	0e b6       	in	r0, 0x3e	; 62
    1108:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    110a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    110c:	0e 94 34 12 	call	0x2468	; 0x2468 <xTaskIncrementTick>
    1110:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1112:	0e 94 bc 14 	call	0x2978	; 0x2978 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1116:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    111a:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    111e:	cd 91       	ld	r28, X+
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	dd 91       	ld	r29, X+
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	bf 90       	pop	r11
    1150:	af 90       	pop	r10
    1152:	9f 90       	pop	r9
    1154:	8f 90       	pop	r8
    1156:	7f 90       	pop	r7
    1158:	6f 90       	pop	r6
    115a:	5f 90       	pop	r5
    115c:	4f 90       	pop	r4
    115e:	3f 90       	pop	r3
    1160:	2f 90       	pop	r2
    1162:	1f 90       	pop	r1
    1164:	0f 90       	pop	r0
    1166:	0c be       	out	0x3c, r0	; 60
    1168:	0f 90       	pop	r0
    116a:	0b be       	out	0x3b, r0	; 59
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1172:	08 95       	ret

00001174 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1174:	9a df       	rcall	.-204    	; 0x10aa <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1176:	18 95       	reti

00001178 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1178:	dc 01       	movw	r26, r24
    117a:	53 96       	adiw	r26, 0x13	; 19
    117c:	2c 91       	ld	r18, X
    117e:	53 97       	sbiw	r26, 0x13	; 19
    1180:	22 23       	and	r18, r18
    1182:	41 f0       	breq	.+16     	; 0x1194 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1184:	5a 96       	adiw	r26, 0x1a	; 26
    1186:	ed 91       	ld	r30, X+
    1188:	fc 91       	ld	r31, X
    118a:	5b 97       	sbiw	r26, 0x1b	; 27
    118c:	90 81       	ld	r25, Z
    118e:	8a e0       	ldi	r24, 0x0A	; 10
    1190:	89 1b       	sub	r24, r25
    1192:	08 95       	ret
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	08 95       	ret

00001198 <prvIsQueueEmpty>:
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	0f 92       	push	r0
    119e:	fc 01       	movw	r30, r24
    11a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    11a2:	81 11       	cpse	r24, r1
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <prvIsQueueEmpty+0x12>
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <prvIsQueueEmpty+0x14>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	0f 90       	pop	r0
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	08 95       	ret

000011b2 <prvIsQueueFull>:
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	0f 92       	push	r0
    11b8:	fc 01       	movw	r30, r24
    11ba:	26 8d       	ldd	r18, Z+30	; 0x1e
    11bc:	87 8d       	ldd	r24, Z+31	; 0x1f
    11be:	28 13       	cpse	r18, r24
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <prvIsQueueFull+0x14>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <prvIsQueueFull+0x16>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	08 95       	ret

000011ce <prvCopyDataToQueue>:
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
    11d8:	04 2f       	mov	r16, r20
    11da:	1e 8d       	ldd	r17, Y+30	; 0x1e
    11dc:	48 a1       	ldd	r20, Y+32	; 0x20
    11de:	41 11       	cpse	r20, r1
    11e0:	0c c0       	rjmp	.+24     	; 0x11fa <prvCopyDataToQueue+0x2c>
    11e2:	88 81       	ld	r24, Y
    11e4:	99 81       	ldd	r25, Y+1	; 0x01
    11e6:	89 2b       	or	r24, r25
    11e8:	09 f0       	breq	.+2      	; 0x11ec <prvCopyDataToQueue+0x1e>
    11ea:	42 c0       	rjmp	.+132    	; 0x1270 <prvCopyDataToQueue+0xa2>
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	0e 94 38 18 	call	0x3070	; 0x3070 <xTaskPriorityDisinherit>
    11f4:	1d 82       	std	Y+5, r1	; 0x05
    11f6:	1c 82       	std	Y+4, r1	; 0x04
    11f8:	42 c0       	rjmp	.+132    	; 0x127e <prvCopyDataToQueue+0xb0>
    11fa:	01 11       	cpse	r16, r1
    11fc:	17 c0       	rjmp	.+46     	; 0x122c <prvCopyDataToQueue+0x5e>
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	9b 81       	ldd	r25, Y+3	; 0x03
    1204:	0e 94 48 37 	call	0x6e90	; 0x6e90 <memcpy>
    1208:	28 a1       	ldd	r18, Y+32	; 0x20
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	9b 81       	ldd	r25, Y+3	; 0x03
    120e:	82 0f       	add	r24, r18
    1210:	91 1d       	adc	r25, r1
    1212:	9b 83       	std	Y+3, r25	; 0x03
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	2c 81       	ldd	r18, Y+4	; 0x04
    1218:	3d 81       	ldd	r19, Y+5	; 0x05
    121a:	82 17       	cp	r24, r18
    121c:	93 07       	cpc	r25, r19
    121e:	50 f1       	brcs	.+84     	; 0x1274 <prvCopyDataToQueue+0xa6>
    1220:	88 81       	ld	r24, Y
    1222:	99 81       	ldd	r25, Y+1	; 0x01
    1224:	9b 83       	std	Y+3, r25	; 0x03
    1226:	8a 83       	std	Y+2, r24	; 0x02
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	29 c0       	rjmp	.+82     	; 0x127e <prvCopyDataToQueue+0xb0>
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	8e 81       	ldd	r24, Y+6	; 0x06
    1230:	9f 81       	ldd	r25, Y+7	; 0x07
    1232:	0e 94 48 37 	call	0x6e90	; 0x6e90 <memcpy>
    1236:	88 a1       	ldd	r24, Y+32	; 0x20
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	91 95       	neg	r25
    123c:	81 95       	neg	r24
    123e:	91 09       	sbc	r25, r1
    1240:	2e 81       	ldd	r18, Y+6	; 0x06
    1242:	3f 81       	ldd	r19, Y+7	; 0x07
    1244:	28 0f       	add	r18, r24
    1246:	39 1f       	adc	r19, r25
    1248:	3f 83       	std	Y+7, r19	; 0x07
    124a:	2e 83       	std	Y+6, r18	; 0x06
    124c:	48 81       	ld	r20, Y
    124e:	59 81       	ldd	r21, Y+1	; 0x01
    1250:	24 17       	cp	r18, r20
    1252:	35 07       	cpc	r19, r21
    1254:	30 f4       	brcc	.+12     	; 0x1262 <prvCopyDataToQueue+0x94>
    1256:	2c 81       	ldd	r18, Y+4	; 0x04
    1258:	3d 81       	ldd	r19, Y+5	; 0x05
    125a:	82 0f       	add	r24, r18
    125c:	93 1f       	adc	r25, r19
    125e:	9f 83       	std	Y+7, r25	; 0x07
    1260:	8e 83       	std	Y+6, r24	; 0x06
    1262:	02 30       	cpi	r16, 0x02	; 2
    1264:	49 f4       	brne	.+18     	; 0x1278 <prvCopyDataToQueue+0xaa>
    1266:	11 23       	and	r17, r17
    1268:	49 f0       	breq	.+18     	; 0x127c <prvCopyDataToQueue+0xae>
    126a:	11 50       	subi	r17, 0x01	; 1
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	07 c0       	rjmp	.+14     	; 0x127e <prvCopyDataToQueue+0xb0>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	05 c0       	rjmp	.+10     	; 0x127e <prvCopyDataToQueue+0xb0>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	03 c0       	rjmp	.+6      	; 0x127e <prvCopyDataToQueue+0xb0>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	01 c0       	rjmp	.+2      	; 0x127e <prvCopyDataToQueue+0xb0>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	1f 5f       	subi	r17, 0xFF	; 255
    1280:	1e 8f       	std	Y+30, r17	; 0x1e
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	08 95       	ret

0000128c <prvCopyDataFromQueue>:
    128c:	fc 01       	movw	r30, r24
    128e:	40 a1       	ldd	r20, Z+32	; 0x20
    1290:	44 23       	and	r20, r20
    1292:	a9 f0       	breq	.+42     	; 0x12be <prvCopyDataFromQueue+0x32>
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	26 81       	ldd	r18, Z+6	; 0x06
    1298:	37 81       	ldd	r19, Z+7	; 0x07
    129a:	24 0f       	add	r18, r20
    129c:	35 1f       	adc	r19, r21
    129e:	37 83       	std	Z+7, r19	; 0x07
    12a0:	26 83       	std	Z+6, r18	; 0x06
    12a2:	84 81       	ldd	r24, Z+4	; 0x04
    12a4:	95 81       	ldd	r25, Z+5	; 0x05
    12a6:	28 17       	cp	r18, r24
    12a8:	39 07       	cpc	r19, r25
    12aa:	20 f0       	brcs	.+8      	; 0x12b4 <prvCopyDataFromQueue+0x28>
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	97 83       	std	Z+7, r25	; 0x07
    12b2:	86 83       	std	Z+6, r24	; 0x06
    12b4:	cb 01       	movw	r24, r22
    12b6:	66 81       	ldd	r22, Z+6	; 0x06
    12b8:	77 81       	ldd	r23, Z+7	; 0x07
    12ba:	0c 94 48 37 	jmp	0x6e90	; 0x6e90 <memcpy>
    12be:	08 95       	ret

000012c0 <prvUnlockQueue>:
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	ec 01       	movw	r28, r24
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	0f 92       	push	r0
    12ce:	1a a1       	ldd	r17, Y+34	; 0x22
    12d0:	0b c0       	rjmp	.+22     	; 0x12e8 <prvUnlockQueue+0x28>
    12d2:	8b 89       	ldd	r24, Y+19	; 0x13
    12d4:	88 23       	and	r24, r24
    12d6:	51 f0       	breq	.+20     	; 0x12ec <prvUnlockQueue+0x2c>
    12d8:	ce 01       	movw	r24, r28
    12da:	43 96       	adiw	r24, 0x13	; 19
    12dc:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <xTaskRemoveFromEventList>
    12e0:	81 11       	cpse	r24, r1
    12e2:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <vTaskMissedYield>
    12e6:	11 50       	subi	r17, 0x01	; 1
    12e8:	11 16       	cp	r1, r17
    12ea:	9c f3       	brlt	.-26     	; 0x12d2 <prvUnlockQueue+0x12>
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	8a a3       	std	Y+34, r24	; 0x22
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	0f 92       	push	r0
    12fa:	19 a1       	ldd	r17, Y+33	; 0x21
    12fc:	0b c0       	rjmp	.+22     	; 0x1314 <prvUnlockQueue+0x54>
    12fe:	88 85       	ldd	r24, Y+8	; 0x08
    1300:	88 23       	and	r24, r24
    1302:	51 f0       	breq	.+20     	; 0x1318 <prvUnlockQueue+0x58>
    1304:	ce 01       	movw	r24, r28
    1306:	08 96       	adiw	r24, 0x08	; 8
    1308:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <xTaskRemoveFromEventList>
    130c:	81 11       	cpse	r24, r1
    130e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <vTaskMissedYield>
    1312:	11 50       	subi	r17, 0x01	; 1
    1314:	11 16       	cp	r1, r17
    1316:	9c f3       	brlt	.-26     	; 0x12fe <prvUnlockQueue+0x3e>
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	89 a3       	std	Y+33, r24	; 0x21
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	08 95       	ret

00001328 <xQueueGenericReset>:
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	ec 01       	movw	r28, r24
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	0f 92       	push	r0
    1334:	e8 81       	ld	r30, Y
    1336:	f9 81       	ldd	r31, Y+1	; 0x01
    1338:	8f 8d       	ldd	r24, Y+31	; 0x1f
    133a:	28 a1       	ldd	r18, Y+32	; 0x20
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	82 9f       	mul	r24, r18
    1342:	a0 01       	movw	r20, r0
    1344:	83 9f       	mul	r24, r19
    1346:	50 0d       	add	r21, r0
    1348:	92 9f       	mul	r25, r18
    134a:	50 0d       	add	r21, r0
    134c:	11 24       	eor	r1, r1
    134e:	4e 0f       	add	r20, r30
    1350:	5f 1f       	adc	r21, r31
    1352:	5d 83       	std	Y+5, r21	; 0x05
    1354:	4c 83       	std	Y+4, r20	; 0x04
    1356:	1e 8e       	std	Y+30, r1	; 0x1e
    1358:	fb 83       	std	Y+3, r31	; 0x03
    135a:	ea 83       	std	Y+2, r30	; 0x02
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	28 9f       	mul	r18, r24
    1360:	a0 01       	movw	r20, r0
    1362:	29 9f       	mul	r18, r25
    1364:	50 0d       	add	r21, r0
    1366:	38 9f       	mul	r19, r24
    1368:	50 0d       	add	r21, r0
    136a:	11 24       	eor	r1, r1
    136c:	cf 01       	movw	r24, r30
    136e:	84 0f       	add	r24, r20
    1370:	95 1f       	adc	r25, r21
    1372:	9f 83       	std	Y+7, r25	; 0x07
    1374:	8e 83       	std	Y+6, r24	; 0x06
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	89 a3       	std	Y+33, r24	; 0x21
    137a:	8a a3       	std	Y+34, r24	; 0x22
    137c:	61 11       	cpse	r22, r1
    137e:	0b c0       	rjmp	.+22     	; 0x1396 <xQueueGenericReset+0x6e>
    1380:	88 85       	ldd	r24, Y+8	; 0x08
    1382:	88 23       	and	r24, r24
    1384:	71 f0       	breq	.+28     	; 0x13a2 <xQueueGenericReset+0x7a>
    1386:	ce 01       	movw	r24, r28
    1388:	08 96       	adiw	r24, 0x08	; 8
    138a:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <xTaskRemoveFromEventList>
    138e:	88 23       	and	r24, r24
    1390:	41 f0       	breq	.+16     	; 0x13a2 <xQueueGenericReset+0x7a>
    1392:	2a de       	rcall	.-940    	; 0xfe8 <vPortYield>
    1394:	06 c0       	rjmp	.+12     	; 0x13a2 <xQueueGenericReset+0x7a>
    1396:	ce 01       	movw	r24, r28
    1398:	08 96       	adiw	r24, 0x08	; 8
    139a:	58 dd       	rcall	.-1360   	; 0xe4c <vListInitialise>
    139c:	ce 01       	movw	r24, r28
    139e:	43 96       	adiw	r24, 0x13	; 19
    13a0:	55 dd       	rcall	.-1366   	; 0xe4c <vListInitialise>
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <prvInitialiseNewQueue>:
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	f8 01       	movw	r30, r16
    13b4:	61 11       	cpse	r22, r1
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <prvInitialiseNewQueue+0x10>
    13b8:	11 83       	std	Z+1, r17	; 0x01
    13ba:	00 83       	st	Z, r16
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <prvInitialiseNewQueue+0x14>
    13be:	51 83       	std	Z+1, r21	; 0x01
    13c0:	40 83       	st	Z, r20
    13c2:	87 8f       	std	Z+31, r24	; 0x1f
    13c4:	60 a3       	std	Z+32, r22	; 0x20
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	cf 01       	movw	r24, r30
    13ca:	ae df       	rcall	.-164    	; 0x1328 <xQueueGenericReset>
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	08 95       	ret

000013d2 <xQueueGenericCreate>:
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	f8 2e       	mov	r15, r24
    13e2:	e6 2e       	mov	r14, r22
    13e4:	d4 2e       	mov	r13, r20
    13e6:	86 9f       	mul	r24, r22
    13e8:	c0 01       	movw	r24, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	83 96       	adiw	r24, 0x23	; 35
    13ee:	48 dc       	rcall	.-1904   	; 0xc80 <pvPortMalloc>
    13f0:	ec 01       	movw	r28, r24
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	41 f0       	breq	.+16     	; 0x1406 <xQueueGenericCreate+0x34>
    13f6:	8c 01       	movw	r16, r24
    13f8:	2d 2d       	mov	r18, r13
    13fa:	ac 01       	movw	r20, r24
    13fc:	4d 5d       	subi	r20, 0xDD	; 221
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	6e 2d       	mov	r22, r14
    1402:	8f 2d       	mov	r24, r15
    1404:	d4 df       	rcall	.-88     	; 0x13ae <prvInitialiseNewQueue>
    1406:	ce 01       	movw	r24, r28
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	08 95       	ret

00001418 <xQueueGenericSend>:
    1418:	cf 92       	push	r12
    141a:	df 92       	push	r13
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	29 97       	sbiw	r28, 0x09	; 9
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	7c 01       	movw	r14, r24
    143a:	6b 01       	movw	r12, r22
    143c:	2e 83       	std	Y+6, r18	; 0x06
    143e:	3f 83       	std	Y+7, r19	; 0x07
    1440:	48 87       	std	Y+8, r20	; 0x08
    1442:	59 87       	std	Y+9, r21	; 0x09
    1444:	10 e0       	ldi	r17, 0x00	; 0
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	0f 92       	push	r0
    144c:	f7 01       	movw	r30, r14
    144e:	96 8d       	ldd	r25, Z+30	; 0x1e
    1450:	87 8d       	ldd	r24, Z+31	; 0x1f
    1452:	98 17       	cp	r25, r24
    1454:	10 f0       	brcs	.+4      	; 0x145a <xQueueGenericSend+0x42>
    1456:	02 30       	cpi	r16, 0x02	; 2
    1458:	b1 f4       	brne	.+44     	; 0x1486 <xQueueGenericSend+0x6e>
    145a:	40 2f       	mov	r20, r16
    145c:	b6 01       	movw	r22, r12
    145e:	c7 01       	movw	r24, r14
    1460:	b6 de       	rcall	.-660    	; 0x11ce <prvCopyDataToQueue>
    1462:	f7 01       	movw	r30, r14
    1464:	93 89       	ldd	r25, Z+19	; 0x13
    1466:	99 23       	and	r25, r25
    1468:	41 f0       	breq	.+16     	; 0x147a <xQueueGenericSend+0x62>
    146a:	c7 01       	movw	r24, r14
    146c:	43 96       	adiw	r24, 0x13	; 19
    146e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <xTaskRemoveFromEventList>
    1472:	88 23       	and	r24, r24
    1474:	21 f0       	breq	.+8      	; 0x147e <xQueueGenericSend+0x66>
    1476:	b8 dd       	rcall	.-1168   	; 0xfe8 <vPortYield>
    1478:	02 c0       	rjmp	.+4      	; 0x147e <xQueueGenericSend+0x66>
    147a:	81 11       	cpse	r24, r1
    147c:	b5 dd       	rcall	.-1174   	; 0xfe8 <vPortYield>
    147e:	0f 90       	pop	r0
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	4c c0       	rjmp	.+152    	; 0x151e <xQueueGenericSend+0x106>
    1486:	8e 81       	ldd	r24, Y+6	; 0x06
    1488:	9f 81       	ldd	r25, Y+7	; 0x07
    148a:	a8 85       	ldd	r26, Y+8	; 0x08
    148c:	b9 85       	ldd	r27, Y+9	; 0x09
    148e:	89 2b       	or	r24, r25
    1490:	8a 2b       	or	r24, r26
    1492:	8b 2b       	or	r24, r27
    1494:	21 f4       	brne	.+8      	; 0x149e <xQueueGenericSend+0x86>
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	40 c0       	rjmp	.+128    	; 0x151e <xQueueGenericSend+0x106>
    149e:	11 11       	cpse	r17, r1
    14a0:	05 c0       	rjmp	.+10     	; 0x14ac <xQueueGenericSend+0x94>
    14a2:	ce 01       	movw	r24, r28
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <vTaskInternalSetTimeOutState>
    14aa:	11 e0       	ldi	r17, 0x01	; 1
    14ac:	0f 90       	pop	r0
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	c7 d7       	rcall	.+3982   	; 0x2440 <vTaskSuspendAll>
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	0f 92       	push	r0
    14b8:	f7 01       	movw	r30, r14
    14ba:	81 a1       	ldd	r24, Z+33	; 0x21
    14bc:	8f 3f       	cpi	r24, 0xFF	; 255
    14be:	09 f4       	brne	.+2      	; 0x14c2 <xQueueGenericSend+0xaa>
    14c0:	11 a2       	std	Z+33, r1	; 0x21
    14c2:	f7 01       	movw	r30, r14
    14c4:	82 a1       	ldd	r24, Z+34	; 0x22
    14c6:	8f 3f       	cpi	r24, 0xFF	; 255
    14c8:	09 f4       	brne	.+2      	; 0x14cc <xQueueGenericSend+0xb4>
    14ca:	12 a2       	std	Z+34, r1	; 0x22
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	be 01       	movw	r22, r28
    14d2:	6a 5f       	subi	r22, 0xFA	; 250
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255
    14d6:	ce 01       	movw	r24, r28
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	0e 94 34 17 	call	0x2e68	; 0x2e68 <xTaskCheckForTimeOut>
    14de:	81 11       	cpse	r24, r1
    14e0:	19 c0       	rjmp	.+50     	; 0x1514 <xQueueGenericSend+0xfc>
    14e2:	c7 01       	movw	r24, r14
    14e4:	66 de       	rcall	.-820    	; 0x11b2 <prvIsQueueFull>
    14e6:	88 23       	and	r24, r24
    14e8:	81 f0       	breq	.+32     	; 0x150a <xQueueGenericSend+0xf2>
    14ea:	4e 81       	ldd	r20, Y+6	; 0x06
    14ec:	5f 81       	ldd	r21, Y+7	; 0x07
    14ee:	68 85       	ldd	r22, Y+8	; 0x08
    14f0:	79 85       	ldd	r23, Y+9	; 0x09
    14f2:	c7 01       	movw	r24, r14
    14f4:	08 96       	adiw	r24, 0x08	; 8
    14f6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <vTaskPlaceOnEventList>
    14fa:	c7 01       	movw	r24, r14
    14fc:	e1 de       	rcall	.-574    	; 0x12c0 <prvUnlockQueue>
    14fe:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>
    1502:	81 11       	cpse	r24, r1
    1504:	a0 cf       	rjmp	.-192    	; 0x1446 <xQueueGenericSend+0x2e>
    1506:	70 dd       	rcall	.-1312   	; 0xfe8 <vPortYield>
    1508:	9e cf       	rjmp	.-196    	; 0x1446 <xQueueGenericSend+0x2e>
    150a:	c7 01       	movw	r24, r14
    150c:	d9 de       	rcall	.-590    	; 0x12c0 <prvUnlockQueue>
    150e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>
    1512:	99 cf       	rjmp	.-206    	; 0x1446 <xQueueGenericSend+0x2e>
    1514:	c7 01       	movw	r24, r14
    1516:	d4 de       	rcall	.-600    	; 0x12c0 <prvUnlockQueue>
    1518:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	29 96       	adiw	r28, 0x09	; 9
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	08 95       	ret

0000153c <prvInitialiseMutex>:
    153c:	0f 93       	push	r16
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	69 f0       	breq	.+26     	; 0x155c <prvInitialiseMutex+0x20>
    1542:	fc 01       	movw	r30, r24
    1544:	15 82       	std	Z+5, r1	; 0x05
    1546:	14 82       	std	Z+4, r1	; 0x04
    1548:	11 82       	std	Z+1, r1	; 0x01
    154a:	10 82       	st	Z, r1
    154c:	16 82       	std	Z+6, r1	; 0x06
    154e:	00 e0       	ldi	r16, 0x00	; 0
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	a9 01       	movw	r20, r18
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	5e df       	rcall	.-324    	; 0x1418 <xQueueGenericSend>
    155c:	0f 91       	pop	r16
    155e:	08 95       	ret

00001560 <xQueueCreateMutex>:
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	48 2f       	mov	r20, r24
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	33 df       	rcall	.-410    	; 0x13d2 <xQueueGenericCreate>
    156c:	ec 01       	movw	r28, r24
    156e:	e6 df       	rcall	.-52     	; 0x153c <prvInitialiseMutex>
    1570:	ce 01       	movw	r24, r28
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <xQueueGenericSendFromISR>:
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	8a 01       	movw	r16, r20
    1586:	fc 01       	movw	r30, r24
    1588:	56 8d       	ldd	r21, Z+30	; 0x1e
    158a:	37 8d       	ldd	r19, Z+31	; 0x1f
    158c:	53 17       	cp	r21, r19
    158e:	10 f0       	brcs	.+4      	; 0x1594 <xQueueGenericSendFromISR+0x1c>
    1590:	22 30       	cpi	r18, 0x02	; 2
    1592:	f9 f4       	brne	.+62     	; 0x15d2 <xQueueGenericSendFromISR+0x5a>
    1594:	42 2f       	mov	r20, r18
    1596:	78 01       	movw	r14, r16
    1598:	ec 01       	movw	r28, r24
    159a:	1a a1       	ldd	r17, Y+34	; 0x22
    159c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    159e:	ce 01       	movw	r24, r28
    15a0:	16 de       	rcall	.-980    	; 0x11ce <prvCopyDataToQueue>
    15a2:	1f 3f       	cpi	r17, 0xFF	; 255
    15a4:	81 f4       	brne	.+32     	; 0x15c6 <xQueueGenericSendFromISR+0x4e>
    15a6:	8b 89       	ldd	r24, Y+19	; 0x13
    15a8:	88 23       	and	r24, r24
    15aa:	a9 f0       	breq	.+42     	; 0x15d6 <xQueueGenericSendFromISR+0x5e>
    15ac:	ce 01       	movw	r24, r28
    15ae:	43 96       	adiw	r24, 0x13	; 19
    15b0:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <xTaskRemoveFromEventList>
    15b4:	88 23       	and	r24, r24
    15b6:	89 f0       	breq	.+34     	; 0x15da <xQueueGenericSendFromISR+0x62>
    15b8:	e1 14       	cp	r14, r1
    15ba:	f1 04       	cpc	r15, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <xQueueGenericSendFromISR+0x66>
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	f7 01       	movw	r30, r14
    15c2:	80 83       	st	Z, r24
    15c4:	0d c0       	rjmp	.+26     	; 0x15e0 <xQueueGenericSendFromISR+0x68>
    15c6:	ff 24       	eor	r15, r15
    15c8:	f3 94       	inc	r15
    15ca:	f1 0e       	add	r15, r17
    15cc:	fa a2       	std	Y+34, r15	; 0x22
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	07 c0       	rjmp	.+14     	; 0x15e0 <xQueueGenericSendFromISR+0x68>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	05 c0       	rjmp	.+10     	; 0x15e0 <xQueueGenericSendFromISR+0x68>
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	03 c0       	rjmp	.+6      	; 0x15e0 <xQueueGenericSendFromISR+0x68>
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	01 c0       	rjmp	.+2      	; 0x15e0 <xQueueGenericSendFromISR+0x68>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	08 95       	ret

000015ee <xQueueReceive>:
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	29 97       	sbiw	r28, 0x09	; 9
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	8c 01       	movw	r16, r24
    1610:	6b 01       	movw	r12, r22
    1612:	2e 83       	std	Y+6, r18	; 0x06
    1614:	3f 83       	std	Y+7, r19	; 0x07
    1616:	48 87       	std	Y+8, r20	; 0x08
    1618:	59 87       	std	Y+9, r21	; 0x09
    161a:	e1 2c       	mov	r14, r1
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	0f 92       	push	r0
    1622:	f8 01       	movw	r30, r16
    1624:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1626:	ff 20       	and	r15, r15
    1628:	99 f0       	breq	.+38     	; 0x1650 <xQueueReceive+0x62>
    162a:	b6 01       	movw	r22, r12
    162c:	c8 01       	movw	r24, r16
    162e:	2e de       	rcall	.-932    	; 0x128c <prvCopyDataFromQueue>
    1630:	fa 94       	dec	r15
    1632:	f8 01       	movw	r30, r16
    1634:	f6 8e       	std	Z+30, r15	; 0x1e
    1636:	80 85       	ldd	r24, Z+8	; 0x08
    1638:	88 23       	and	r24, r24
    163a:	31 f0       	breq	.+12     	; 0x1648 <xQueueReceive+0x5a>
    163c:	c8 01       	movw	r24, r16
    163e:	08 96       	adiw	r24, 0x08	; 8
    1640:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <xTaskRemoveFromEventList>
    1644:	81 11       	cpse	r24, r1
    1646:	d0 dc       	rcall	.-1632   	; 0xfe8 <vPortYield>
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	4f c0       	rjmp	.+158    	; 0x16ee <xQueueReceive+0x100>
    1650:	8e 81       	ldd	r24, Y+6	; 0x06
    1652:	9f 81       	ldd	r25, Y+7	; 0x07
    1654:	a8 85       	ldd	r26, Y+8	; 0x08
    1656:	b9 85       	ldd	r27, Y+9	; 0x09
    1658:	89 2b       	or	r24, r25
    165a:	8a 2b       	or	r24, r26
    165c:	8b 2b       	or	r24, r27
    165e:	21 f4       	brne	.+8      	; 0x1668 <xQueueReceive+0x7a>
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	43 c0       	rjmp	.+134    	; 0x16ee <xQueueReceive+0x100>
    1668:	e1 10       	cpse	r14, r1
    166a:	06 c0       	rjmp	.+12     	; 0x1678 <xQueueReceive+0x8a>
    166c:	ce 01       	movw	r24, r28
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	0e 94 23 17 	call	0x2e46	; 0x2e46 <vTaskInternalSetTimeOutState>
    1674:	ee 24       	eor	r14, r14
    1676:	e3 94       	inc	r14
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	e1 d6       	rcall	.+3522   	; 0x2440 <vTaskSuspendAll>
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	0f 92       	push	r0
    1684:	f8 01       	movw	r30, r16
    1686:	81 a1       	ldd	r24, Z+33	; 0x21
    1688:	8f 3f       	cpi	r24, 0xFF	; 255
    168a:	09 f4       	brne	.+2      	; 0x168e <xQueueReceive+0xa0>
    168c:	11 a2       	std	Z+33, r1	; 0x21
    168e:	f8 01       	movw	r30, r16
    1690:	82 a1       	ldd	r24, Z+34	; 0x22
    1692:	8f 3f       	cpi	r24, 0xFF	; 255
    1694:	09 f4       	brne	.+2      	; 0x1698 <xQueueReceive+0xaa>
    1696:	12 a2       	std	Z+34, r1	; 0x22
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	be 01       	movw	r22, r28
    169e:	6a 5f       	subi	r22, 0xFA	; 250
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	ce 01       	movw	r24, r28
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	0e 94 34 17 	call	0x2e68	; 0x2e68 <xTaskCheckForTimeOut>
    16aa:	81 11       	cpse	r24, r1
    16ac:	17 c0       	rjmp	.+46     	; 0x16dc <xQueueReceive+0xee>
    16ae:	c8 01       	movw	r24, r16
    16b0:	73 dd       	rcall	.-1306   	; 0x1198 <prvIsQueueEmpty>
    16b2:	88 23       	and	r24, r24
    16b4:	79 f0       	breq	.+30     	; 0x16d4 <xQueueReceive+0xe6>
    16b6:	4e 81       	ldd	r20, Y+6	; 0x06
    16b8:	5f 81       	ldd	r21, Y+7	; 0x07
    16ba:	68 85       	ldd	r22, Y+8	; 0x08
    16bc:	79 85       	ldd	r23, Y+9	; 0x09
    16be:	c8 01       	movw	r24, r16
    16c0:	43 96       	adiw	r24, 0x13	; 19
    16c2:	0e 94 21 15 	call	0x2a42	; 0x2a42 <vTaskPlaceOnEventList>
    16c6:	c8 01       	movw	r24, r16
    16c8:	fb dd       	rcall	.-1034   	; 0x12c0 <prvUnlockQueue>
    16ca:	fa d7       	rcall	.+4084   	; 0x26c0 <xTaskResumeAll>
    16cc:	81 11       	cpse	r24, r1
    16ce:	a6 cf       	rjmp	.-180    	; 0x161c <xQueueReceive+0x2e>
    16d0:	8b dc       	rcall	.-1770   	; 0xfe8 <vPortYield>
    16d2:	a4 cf       	rjmp	.-184    	; 0x161c <xQueueReceive+0x2e>
    16d4:	c8 01       	movw	r24, r16
    16d6:	f4 dd       	rcall	.-1048   	; 0x12c0 <prvUnlockQueue>
    16d8:	f3 d7       	rcall	.+4070   	; 0x26c0 <xTaskResumeAll>
    16da:	a0 cf       	rjmp	.-192    	; 0x161c <xQueueReceive+0x2e>
    16dc:	c8 01       	movw	r24, r16
    16de:	f0 dd       	rcall	.-1056   	; 0x12c0 <prvUnlockQueue>
    16e0:	ef d7       	rcall	.+4062   	; 0x26c0 <xTaskResumeAll>
    16e2:	c8 01       	movw	r24, r16
    16e4:	59 dd       	rcall	.-1358   	; 0x1198 <prvIsQueueEmpty>
    16e6:	88 23       	and	r24, r24
    16e8:	09 f4       	brne	.+2      	; 0x16ec <xQueueReceive+0xfe>
    16ea:	98 cf       	rjmp	.-208    	; 0x161c <xQueueReceive+0x2e>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	29 96       	adiw	r28, 0x09	; 9
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	ff 90       	pop	r15
    1704:	ef 90       	pop	r14
    1706:	df 90       	pop	r13
    1708:	cf 90       	pop	r12
    170a:	08 95       	ret

0000170c <xQueueSemaphoreTake>:
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	29 97       	sbiw	r28, 0x09	; 9
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	8c 01       	movw	r16, r24
    172a:	4e 83       	std	Y+6, r20	; 0x06
    172c:	5f 83       	std	Y+7, r21	; 0x07
    172e:	68 87       	std	Y+8, r22	; 0x08
    1730:	79 87       	std	Y+9, r23	; 0x09
    1732:	e1 2c       	mov	r14, r1
    1734:	f1 2c       	mov	r15, r1
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
    173c:	f8 01       	movw	r30, r16
    173e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1740:	88 23       	and	r24, r24
    1742:	c9 f0       	breq	.+50     	; 0x1776 <xQueueSemaphoreTake+0x6a>
    1744:	81 50       	subi	r24, 0x01	; 1
    1746:	86 8f       	std	Z+30, r24	; 0x1e
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	89 2b       	or	r24, r25
    174e:	29 f4       	brne	.+10     	; 0x175a <xQueueSemaphoreTake+0x4e>
    1750:	0e 94 24 19 	call	0x3248	; 0x3248 <pvTaskIncrementMutexHeldCount>
    1754:	f8 01       	movw	r30, r16
    1756:	95 83       	std	Z+5, r25	; 0x05
    1758:	84 83       	std	Z+4, r24	; 0x04
    175a:	f8 01       	movw	r30, r16
    175c:	80 85       	ldd	r24, Z+8	; 0x08
    175e:	88 23       	and	r24, r24
    1760:	31 f0       	breq	.+12     	; 0x176e <xQueueSemaphoreTake+0x62>
    1762:	c8 01       	movw	r24, r16
    1764:	08 96       	adiw	r24, 0x08	; 8
    1766:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <xTaskRemoveFromEventList>
    176a:	81 11       	cpse	r24, r1
    176c:	3d dc       	rcall	.-1926   	; 0xfe8 <vPortYield>
    176e:	0f 90       	pop	r0
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	6f c0       	rjmp	.+222    	; 0x1854 <xQueueSemaphoreTake+0x148>
    1776:	8e 81       	ldd	r24, Y+6	; 0x06
    1778:	9f 81       	ldd	r25, Y+7	; 0x07
    177a:	a8 85       	ldd	r26, Y+8	; 0x08
    177c:	b9 85       	ldd	r27, Y+9	; 0x09
    177e:	89 2b       	or	r24, r25
    1780:	8a 2b       	or	r24, r26
    1782:	8b 2b       	or	r24, r27
    1784:	21 f4       	brne	.+8      	; 0x178e <xQueueSemaphoreTake+0x82>
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	63 c0       	rjmp	.+198    	; 0x1854 <xQueueSemaphoreTake+0x148>
    178e:	f1 10       	cpse	r15, r1
    1790:	06 c0       	rjmp	.+12     	; 0x179e <xQueueSemaphoreTake+0x92>
    1792:	ce 01       	movw	r24, r28
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	0e 94 23 17 	call	0x2e46	; 0x2e46 <vTaskInternalSetTimeOutState>
    179a:	ff 24       	eor	r15, r15
    179c:	f3 94       	inc	r15
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	4e d6       	rcall	.+3228   	; 0x2440 <vTaskSuspendAll>
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	0f 92       	push	r0
    17aa:	f8 01       	movw	r30, r16
    17ac:	81 a1       	ldd	r24, Z+33	; 0x21
    17ae:	8f 3f       	cpi	r24, 0xFF	; 255
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <xQueueSemaphoreTake+0xa8>
    17b2:	11 a2       	std	Z+33, r1	; 0x21
    17b4:	f8 01       	movw	r30, r16
    17b6:	82 a1       	ldd	r24, Z+34	; 0x22
    17b8:	8f 3f       	cpi	r24, 0xFF	; 255
    17ba:	09 f4       	brne	.+2      	; 0x17be <xQueueSemaphoreTake+0xb2>
    17bc:	12 a2       	std	Z+34, r1	; 0x22
    17be:	0f 90       	pop	r0
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	be 01       	movw	r22, r28
    17c4:	6a 5f       	subi	r22, 0xFA	; 250
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	ce 01       	movw	r24, r28
    17ca:	01 96       	adiw	r24, 0x01	; 1
    17cc:	0e 94 34 17 	call	0x2e68	; 0x2e68 <xTaskCheckForTimeOut>
    17d0:	81 11       	cpse	r24, r1
    17d2:	26 c0       	rjmp	.+76     	; 0x1820 <xQueueSemaphoreTake+0x114>
    17d4:	c8 01       	movw	r24, r16
    17d6:	e0 dc       	rcall	.-1600   	; 0x1198 <prvIsQueueEmpty>
    17d8:	88 23       	and	r24, r24
    17da:	f1 f0       	breq	.+60     	; 0x1818 <xQueueSemaphoreTake+0x10c>
    17dc:	f8 01       	movw	r30, r16
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	89 2b       	or	r24, r25
    17e4:	51 f4       	brne	.+20     	; 0x17fa <xQueueSemaphoreTake+0xee>
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	0f 92       	push	r0
    17ec:	84 81       	ldd	r24, Z+4	; 0x04
    17ee:	95 81       	ldd	r25, Z+5	; 0x05
    17f0:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <xTaskPriorityInherit>
    17f4:	e8 2e       	mov	r14, r24
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	4e 81       	ldd	r20, Y+6	; 0x06
    17fc:	5f 81       	ldd	r21, Y+7	; 0x07
    17fe:	68 85       	ldd	r22, Y+8	; 0x08
    1800:	79 85       	ldd	r23, Y+9	; 0x09
    1802:	c8 01       	movw	r24, r16
    1804:	43 96       	adiw	r24, 0x13	; 19
    1806:	0e 94 21 15 	call	0x2a42	; 0x2a42 <vTaskPlaceOnEventList>
    180a:	c8 01       	movw	r24, r16
    180c:	59 dd       	rcall	.-1358   	; 0x12c0 <prvUnlockQueue>
    180e:	58 d7       	rcall	.+3760   	; 0x26c0 <xTaskResumeAll>
    1810:	81 11       	cpse	r24, r1
    1812:	91 cf       	rjmp	.-222    	; 0x1736 <xQueueSemaphoreTake+0x2a>
    1814:	e9 db       	rcall	.-2094   	; 0xfe8 <vPortYield>
    1816:	8f cf       	rjmp	.-226    	; 0x1736 <xQueueSemaphoreTake+0x2a>
    1818:	c8 01       	movw	r24, r16
    181a:	52 dd       	rcall	.-1372   	; 0x12c0 <prvUnlockQueue>
    181c:	51 d7       	rcall	.+3746   	; 0x26c0 <xTaskResumeAll>
    181e:	8b cf       	rjmp	.-234    	; 0x1736 <xQueueSemaphoreTake+0x2a>
    1820:	c8 01       	movw	r24, r16
    1822:	4e dd       	rcall	.-1380   	; 0x12c0 <prvUnlockQueue>
    1824:	4d d7       	rcall	.+3738   	; 0x26c0 <xTaskResumeAll>
    1826:	c8 01       	movw	r24, r16
    1828:	b7 dc       	rcall	.-1682   	; 0x1198 <prvIsQueueEmpty>
    182a:	88 23       	and	r24, r24
    182c:	09 f4       	brne	.+2      	; 0x1830 <xQueueSemaphoreTake+0x124>
    182e:	83 cf       	rjmp	.-250    	; 0x1736 <xQueueSemaphoreTake+0x2a>
    1830:	ee 20       	and	r14, r14
    1832:	79 f0       	breq	.+30     	; 0x1852 <xQueueSemaphoreTake+0x146>
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	0f 92       	push	r0
    183a:	c8 01       	movw	r24, r16
    183c:	9d dc       	rcall	.-1734   	; 0x1178 <prvGetDisinheritPriorityAfterTimeout>
    183e:	68 2f       	mov	r22, r24
    1840:	f8 01       	movw	r30, r16
    1842:	84 81       	ldd	r24, Z+4	; 0x04
    1844:	95 81       	ldd	r25, Z+5	; 0x05
    1846:	0e 94 93 18 	call	0x3126	; 0x3126 <vTaskPriorityDisinheritAfterTimeout>
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <xQueueSemaphoreTake+0x148>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	29 96       	adiw	r28, 0x09	; 9
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	ff 90       	pop	r15
    186a:	ef 90       	pop	r14
    186c:	08 95       	ret

0000186e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	0f 92       	push	r0
    187a:	89 a1       	ldd	r24, Y+33	; 0x21
    187c:	8f 3f       	cpi	r24, 0xFF	; 255
    187e:	09 f4       	brne	.+2      	; 0x1882 <vQueueWaitForMessageRestricted+0x14>
    1880:	19 a2       	std	Y+33, r1	; 0x21
    1882:	8a a1       	ldd	r24, Y+34	; 0x22
    1884:	8f 3f       	cpi	r24, 0xFF	; 255
    1886:	09 f4       	brne	.+2      	; 0x188a <vQueueWaitForMessageRestricted+0x1c>
    1888:	1a a2       	std	Y+34, r1	; 0x22
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    188e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1890:	81 11       	cpse	r24, r1
    1892:	04 c0       	rjmp	.+8      	; 0x189c <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1894:	ce 01       	movw	r24, r28
    1896:	43 96       	adiw	r24, 0x13	; 19
    1898:	0e 94 82 15 	call	0x2b04	; 0x2b04 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    189c:	ce 01       	movw	r24, r28
    189e:	10 dd       	rcall	.-1504   	; 0x12c0 <prvUnlockQueue>
    }
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    18a6:	fc 01       	movw	r30, r24
    18a8:	44 81       	ldd	r20, Z+4	; 0x04
    18aa:	55 81       	ldd	r21, Z+5	; 0x05
    18ac:	22 81       	ldd	r18, Z+2	; 0x02
    18ae:	33 81       	ldd	r19, Z+3	; 0x03
    18b0:	24 0f       	add	r18, r20
    18b2:	35 1f       	adc	r19, r21
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	b9 01       	movw	r22, r18
    18ba:	68 1b       	sub	r22, r24
    18bc:	79 0b       	sbc	r23, r25
    18be:	cb 01       	movw	r24, r22
    18c0:	64 17       	cp	r22, r20
    18c2:	75 07       	cpc	r23, r21
    18c4:	10 f0       	brcs	.+4      	; 0x18ca <prvBytesInBuffer+0x24>
    18c6:	84 1b       	sub	r24, r20
    18c8:	95 0b       	sbc	r25, r21
    18ca:	08 95       	ret

000018cc <prvInitialiseNewStreamBuffer>:
    18cc:	0f 93       	push	r16
    18ce:	fc 01       	movw	r30, r24
    18d0:	8f e0       	ldi	r24, 0x0F	; 15
    18d2:	df 01       	movw	r26, r30
    18d4:	1d 92       	st	X+, r1
    18d6:	8a 95       	dec	r24
    18d8:	e9 f7       	brne	.-6      	; 0x18d4 <prvInitialiseNewStreamBuffer+0x8>
    18da:	75 87       	std	Z+13, r23	; 0x0d
    18dc:	64 87       	std	Z+12, r22	; 0x0c
    18de:	55 83       	std	Z+5, r21	; 0x05
    18e0:	44 83       	std	Z+4, r20	; 0x04
    18e2:	37 83       	std	Z+7, r19	; 0x07
    18e4:	26 83       	std	Z+6, r18	; 0x06
    18e6:	06 87       	std	Z+14, r16	; 0x0e
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <prvWriteBytesToBuffer>:
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	6c 01       	movw	r12, r24
    1902:	5b 01       	movw	r10, r22
    1904:	7a 01       	movw	r14, r20
    1906:	fc 01       	movw	r30, r24
    1908:	c2 81       	ldd	r28, Z+2	; 0x02
    190a:	d3 81       	ldd	r29, Z+3	; 0x03
    190c:	04 81       	ldd	r16, Z+4	; 0x04
    190e:	15 81       	ldd	r17, Z+5	; 0x05
    1910:	0c 1b       	sub	r16, r28
    1912:	1d 0b       	sbc	r17, r29
    1914:	40 17       	cp	r20, r16
    1916:	51 07       	cpc	r21, r17
    1918:	08 f4       	brcc	.+2      	; 0x191c <prvWriteBytesToBuffer+0x30>
    191a:	8a 01       	movw	r16, r20
    191c:	f6 01       	movw	r30, r12
    191e:	84 85       	ldd	r24, Z+12	; 0x0c
    1920:	95 85       	ldd	r25, Z+13	; 0x0d
    1922:	a8 01       	movw	r20, r16
    1924:	b5 01       	movw	r22, r10
    1926:	8c 0f       	add	r24, r28
    1928:	9d 1f       	adc	r25, r29
    192a:	0e 94 48 37 	call	0x6e90	; 0x6e90 <memcpy>
    192e:	0e 15       	cp	r16, r14
    1930:	1f 05       	cpc	r17, r15
    1932:	58 f4       	brcc	.+22     	; 0x194a <prvWriteBytesToBuffer+0x5e>
    1934:	a7 01       	movw	r20, r14
    1936:	40 1b       	sub	r20, r16
    1938:	51 0b       	sbc	r21, r17
    193a:	b5 01       	movw	r22, r10
    193c:	60 0f       	add	r22, r16
    193e:	71 1f       	adc	r23, r17
    1940:	f6 01       	movw	r30, r12
    1942:	84 85       	ldd	r24, Z+12	; 0x0c
    1944:	95 85       	ldd	r25, Z+13	; 0x0d
    1946:	0e 94 48 37 	call	0x6e90	; 0x6e90 <memcpy>
    194a:	ce 01       	movw	r24, r28
    194c:	8e 0d       	add	r24, r14
    194e:	9f 1d       	adc	r25, r15
    1950:	f6 01       	movw	r30, r12
    1952:	24 81       	ldd	r18, Z+4	; 0x04
    1954:	35 81       	ldd	r19, Z+5	; 0x05
    1956:	82 17       	cp	r24, r18
    1958:	93 07       	cpc	r25, r19
    195a:	10 f0       	brcs	.+4      	; 0x1960 <prvWriteBytesToBuffer+0x74>
    195c:	82 1b       	sub	r24, r18
    195e:	93 0b       	sbc	r25, r19
    1960:	f6 01       	movw	r30, r12
    1962:	93 83       	std	Z+3, r25	; 0x03
    1964:	82 83       	std	Z+2, r24	; 0x02
    1966:	c7 01       	movw	r24, r14
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	bf 90       	pop	r11
    197a:	af 90       	pop	r10
    197c:	08 95       	ret

0000197e <prvWriteMessageToBuffer>:
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	1f 92       	push	r1
    1990:	1f 92       	push	r1
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	7c 01       	movw	r14, r24
    1998:	6b 01       	movw	r12, r22
    199a:	5a 83       	std	Y+2, r21	; 0x02
    199c:	49 83       	std	Y+1, r20	; 0x01
    199e:	21 15       	cp	r18, r1
    19a0:	31 05       	cpc	r19, r1
    19a2:	c1 f0       	breq	.+48     	; 0x19d4 <prvWriteMessageToBuffer+0x56>
    19a4:	fc 01       	movw	r30, r24
    19a6:	86 85       	ldd	r24, Z+14	; 0x0e
    19a8:	80 fd       	sbrc	r24, 0
    19aa:	08 c0       	rjmp	.+16     	; 0x19bc <prvWriteMessageToBuffer+0x3e>
    19ac:	42 17       	cp	r20, r18
    19ae:	53 07       	cpc	r21, r19
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <prvWriteMessageToBuffer+0x36>
    19b2:	9a 01       	movw	r18, r20
    19b4:	3a 83       	std	Y+2, r19	; 0x02
    19b6:	29 83       	std	Y+1, r18	; 0x01
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	0f c0       	rjmp	.+30     	; 0x19da <prvWriteMessageToBuffer+0x5c>
    19bc:	20 17       	cp	r18, r16
    19be:	31 07       	cpc	r19, r17
    19c0:	58 f0       	brcs	.+22     	; 0x19d8 <prvWriteMessageToBuffer+0x5a>
    19c2:	42 e0       	ldi	r20, 0x02	; 2
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	be 01       	movw	r22, r28
    19c8:	6f 5f       	subi	r22, 0xFF	; 255
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255
    19cc:	c7 01       	movw	r24, r14
    19ce:	8e df       	rcall	.-228    	; 0x18ec <prvWriteBytesToBuffer>
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <prvWriteMessageToBuffer+0x5c>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <prvWriteMessageToBuffer+0x5c>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	88 23       	and	r24, r24
    19dc:	31 f0       	breq	.+12     	; 0x19ea <prvWriteMessageToBuffer+0x6c>
    19de:	49 81       	ldd	r20, Y+1	; 0x01
    19e0:	5a 81       	ldd	r21, Y+2	; 0x02
    19e2:	b6 01       	movw	r22, r12
    19e4:	c7 01       	movw	r24, r14
    19e6:	82 df       	rcall	.-252    	; 0x18ec <prvWriteBytesToBuffer>
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <prvWriteMessageToBuffer+0x70>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	ff 90       	pop	r15
    19fc:	ef 90       	pop	r14
    19fe:	df 90       	pop	r13
    1a00:	cf 90       	pop	r12
    1a02:	08 95       	ret

00001a04 <prvReadBytesFromBuffer>:
    1a04:	af 92       	push	r10
    1a06:	bf 92       	push	r11
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	7c 01       	movw	r14, r24
    1a1a:	5b 01       	movw	r10, r22
    1a1c:	e9 01       	movw	r28, r18
    1a1e:	42 17       	cp	r20, r18
    1a20:	53 07       	cpc	r21, r19
    1a22:	08 f4       	brcc	.+2      	; 0x1a26 <prvReadBytesFromBuffer+0x22>
    1a24:	ea 01       	movw	r28, r20
    1a26:	20 97       	sbiw	r28, 0x00	; 0
    1a28:	81 f1       	breq	.+96     	; 0x1a8a <prvReadBytesFromBuffer+0x86>
    1a2a:	f7 01       	movw	r30, r14
    1a2c:	00 81       	ld	r16, Z
    1a2e:	11 81       	ldd	r17, Z+1	; 0x01
    1a30:	84 81       	ldd	r24, Z+4	; 0x04
    1a32:	95 81       	ldd	r25, Z+5	; 0x05
    1a34:	80 1b       	sub	r24, r16
    1a36:	91 0b       	sbc	r25, r17
    1a38:	6e 01       	movw	r12, r28
    1a3a:	8c 17       	cp	r24, r28
    1a3c:	9d 07       	cpc	r25, r29
    1a3e:	08 f4       	brcc	.+2      	; 0x1a42 <prvReadBytesFromBuffer+0x3e>
    1a40:	6c 01       	movw	r12, r24
    1a42:	f7 01       	movw	r30, r14
    1a44:	64 85       	ldd	r22, Z+12	; 0x0c
    1a46:	75 85       	ldd	r23, Z+13	; 0x0d
    1a48:	60 0f       	add	r22, r16
    1a4a:	71 1f       	adc	r23, r17
    1a4c:	a6 01       	movw	r20, r12
    1a4e:	c5 01       	movw	r24, r10
    1a50:	0e 94 48 37 	call	0x6e90	; 0x6e90 <memcpy>
    1a54:	cc 16       	cp	r12, r28
    1a56:	dd 06       	cpc	r13, r29
    1a58:	58 f4       	brcc	.+22     	; 0x1a70 <prvReadBytesFromBuffer+0x6c>
    1a5a:	ae 01       	movw	r20, r28
    1a5c:	4c 19       	sub	r20, r12
    1a5e:	5d 09       	sbc	r21, r13
    1a60:	f7 01       	movw	r30, r14
    1a62:	64 85       	ldd	r22, Z+12	; 0x0c
    1a64:	75 85       	ldd	r23, Z+13	; 0x0d
    1a66:	c5 01       	movw	r24, r10
    1a68:	8c 0d       	add	r24, r12
    1a6a:	9d 1d       	adc	r25, r13
    1a6c:	0e 94 48 37 	call	0x6e90	; 0x6e90 <memcpy>
    1a70:	0c 0f       	add	r16, r28
    1a72:	1d 1f       	adc	r17, r29
    1a74:	f7 01       	movw	r30, r14
    1a76:	84 81       	ldd	r24, Z+4	; 0x04
    1a78:	95 81       	ldd	r25, Z+5	; 0x05
    1a7a:	08 17       	cp	r16, r24
    1a7c:	19 07       	cpc	r17, r25
    1a7e:	10 f0       	brcs	.+4      	; 0x1a84 <prvReadBytesFromBuffer+0x80>
    1a80:	08 1b       	sub	r16, r24
    1a82:	19 0b       	sbc	r17, r25
    1a84:	f7 01       	movw	r30, r14
    1a86:	11 83       	std	Z+1, r17	; 0x01
    1a88:	00 83       	st	Z, r16
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	df 90       	pop	r13
    1a9a:	cf 90       	pop	r12
    1a9c:	bf 90       	pop	r11
    1a9e:	af 90       	pop	r10
    1aa0:	08 95       	ret

00001aa2 <prvReadMessageFromBuffer>:
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	1f 92       	push	r1
    1ac0:	1f 92       	push	r1
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	6c 01       	movw	r12, r24
    1ac8:	4b 01       	movw	r8, r22
    1aca:	5a 01       	movw	r10, r20
    1acc:	79 01       	movw	r14, r18
    1ace:	01 15       	cp	r16, r1
    1ad0:	11 05       	cpc	r17, r1
    1ad2:	b1 f0       	breq	.+44     	; 0x1b00 <prvReadMessageFromBuffer+0x5e>
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	60 80       	ld	r6, Z
    1ad8:	71 80       	ldd	r7, Z+1	; 0x01
    1ada:	a8 01       	movw	r20, r16
    1adc:	be 01       	movw	r22, r28
    1ade:	6f 5f       	subi	r22, 0xFF	; 255
    1ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae2:	90 df       	rcall	.-224    	; 0x1a04 <prvReadBytesFromBuffer>
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	e0 1a       	sub	r14, r16
    1aea:	f1 0a       	sbc	r15, r17
    1aec:	a8 16       	cp	r10, r24
    1aee:	b9 06       	cpc	r11, r25
    1af0:	30 f4       	brcc	.+12     	; 0x1afe <prvReadMessageFromBuffer+0x5c>
    1af2:	f6 01       	movw	r30, r12
    1af4:	71 82       	std	Z+1, r7	; 0x01
    1af6:	60 82       	st	Z, r6
    1af8:	a1 2c       	mov	r10, r1
    1afa:	b1 2c       	mov	r11, r1
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <prvReadMessageFromBuffer+0x5e>
    1afe:	5c 01       	movw	r10, r24
    1b00:	97 01       	movw	r18, r14
    1b02:	a5 01       	movw	r20, r10
    1b04:	b4 01       	movw	r22, r8
    1b06:	c6 01       	movw	r24, r12
    1b08:	7d df       	rcall	.-262    	; 0x1a04 <prvReadBytesFromBuffer>
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	8f 90       	pop	r8
    1b26:	7f 90       	pop	r7
    1b28:	6f 90       	pop	r6
    1b2a:	08 95       	ret

00001b2c <xStreamBufferGenericCreate>:
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	ec 01       	movw	r28, r24
    1b3c:	6b 01       	movw	r12, r22
    1b3e:	41 30       	cpi	r20, 0x01	; 1
    1b40:	11 f4       	brne	.+4      	; 0x1b46 <xStreamBufferGenericCreate+0x1a>
    1b42:	01 e0       	ldi	r16, 0x01	; 1
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <xStreamBufferGenericCreate+0x1c>
    1b46:	00 e0       	ldi	r16, 0x00	; 0
    1b48:	c1 14       	cp	r12, r1
    1b4a:	d1 04       	cpc	r13, r1
    1b4c:	19 f4       	brne	.+6      	; 0x1b54 <xStreamBufferGenericCreate+0x28>
    1b4e:	cc 24       	eor	r12, r12
    1b50:	c3 94       	inc	r12
    1b52:	d1 2c       	mov	r13, r1
    1b54:	ce 01       	movw	r24, r28
    1b56:	40 96       	adiw	r24, 0x10	; 16
    1b58:	c8 17       	cp	r28, r24
    1b5a:	d9 07       	cpc	r29, r25
    1b5c:	20 f4       	brcc	.+8      	; 0x1b66 <xStreamBufferGenericCreate+0x3a>
    1b5e:	21 96       	adiw	r28, 0x01	; 1
    1b60:	8f d8       	rcall	.-3810   	; 0xc80 <pvPortMalloc>
    1b62:	7c 01       	movw	r14, r24
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <xStreamBufferGenericCreate+0x3e>
    1b66:	e1 2c       	mov	r14, r1
    1b68:	f1 2c       	mov	r15, r1
    1b6a:	e1 14       	cp	r14, r1
    1b6c:	f1 04       	cpc	r15, r1
    1b6e:	39 f0       	breq	.+14     	; 0x1b7e <xStreamBufferGenericCreate+0x52>
    1b70:	96 01       	movw	r18, r12
    1b72:	ae 01       	movw	r20, r28
    1b74:	b7 01       	movw	r22, r14
    1b76:	61 5f       	subi	r22, 0xF1	; 241
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	a7 de       	rcall	.-690    	; 0x18cc <prvInitialiseNewStreamBuffer>
    1b7e:	c7 01       	movw	r24, r14
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	df 90       	pop	r13
    1b8c:	cf 90       	pop	r12
    1b8e:	08 95       	ret

00001b90 <xStreamBufferReset>:
    1b90:	0f 93       	push	r16
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	0f 92       	push	r0
    1b98:	fc 01       	movw	r30, r24
    1b9a:	20 85       	ldd	r18, Z+8	; 0x08
    1b9c:	31 85       	ldd	r19, Z+9	; 0x09
    1b9e:	23 2b       	or	r18, r19
    1ba0:	71 f4       	brne	.+28     	; 0x1bbe <xStreamBufferReset+0x2e>
    1ba2:	22 85       	ldd	r18, Z+10	; 0x0a
    1ba4:	33 85       	ldd	r19, Z+11	; 0x0b
    1ba6:	23 2b       	or	r18, r19
    1ba8:	61 f4       	brne	.+24     	; 0x1bc2 <xStreamBufferReset+0x32>
    1baa:	26 81       	ldd	r18, Z+6	; 0x06
    1bac:	37 81       	ldd	r19, Z+7	; 0x07
    1bae:	44 81       	ldd	r20, Z+4	; 0x04
    1bb0:	55 81       	ldd	r21, Z+5	; 0x05
    1bb2:	64 85       	ldd	r22, Z+12	; 0x0c
    1bb4:	75 85       	ldd	r23, Z+13	; 0x0d
    1bb6:	06 85       	ldd	r16, Z+14	; 0x0e
    1bb8:	89 de       	rcall	.-750    	; 0x18cc <prvInitialiseNewStreamBuffer>
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <xStreamBufferReset+0x34>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <xStreamBufferReset+0x34>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 91       	pop	r16
    1bca:	08 95       	ret

00001bcc <xStreamBufferSpacesAvailable>:
    1bcc:	fc 01       	movw	r30, r24
    1bce:	24 81       	ldd	r18, Z+4	; 0x04
    1bd0:	35 81       	ldd	r19, Z+5	; 0x05
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	82 0f       	add	r24, r18
    1bd8:	93 1f       	adc	r25, r19
    1bda:	42 81       	ldd	r20, Z+2	; 0x02
    1bdc:	53 81       	ldd	r21, Z+3	; 0x03
    1bde:	84 1b       	sub	r24, r20
    1be0:	95 0b       	sbc	r25, r21
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	82 17       	cp	r24, r18
    1be6:	93 07       	cpc	r25, r19
    1be8:	10 f0       	brcs	.+4      	; 0x1bee <xStreamBufferSpacesAvailable+0x22>
    1bea:	82 1b       	sub	r24, r18
    1bec:	93 0b       	sbc	r25, r19
    1bee:	08 95       	ret

00001bf0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1bf0:	2f 92       	push	r2
    1bf2:	3f 92       	push	r3
    1bf4:	4f 92       	push	r4
    1bf6:	5f 92       	push	r5
    1bf8:	6f 92       	push	r6
    1bfa:	7f 92       	push	r7
    1bfc:	8f 92       	push	r8
    1bfe:	9f 92       	push	r9
    1c00:	af 92       	push	r10
    1c02:	bf 92       	push	r11
    1c04:	cf 92       	push	r12
    1c06:	df 92       	push	r13
    1c08:	ef 92       	push	r14
    1c0a:	ff 92       	push	r15
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	2b 97       	sbiw	r28, 0x0b	; 11
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	4c 01       	movw	r8, r24
    1c26:	7b 87       	std	Y+11, r23	; 0x0b
    1c28:	6a 87       	std	Y+10, r22	; 0x0a
    1c2a:	1a 01       	movw	r2, r20
    1c2c:	0e 83       	std	Y+6, r16	; 0x06
    1c2e:	1f 83       	std	Y+7, r17	; 0x07
    1c30:	28 87       	std	Y+8, r18	; 0x08
    1c32:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1c34:	fc 01       	movw	r30, r24
    1c36:	84 81       	ldd	r24, Z+4	; 0x04
    1c38:	95 81       	ldd	r25, Z+5	; 0x05
    1c3a:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c3c:	26 85       	ldd	r18, Z+14	; 0x0e
    1c3e:	20 ff       	sbrs	r18, 0
    1c40:	0c c0       	rjmp	.+24     	; 0x1c5a <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c42:	2a 01       	movw	r4, r20
    1c44:	f2 e0       	ldi	r31, 0x02	; 2
    1c46:	4f 0e       	add	r4, r31
    1c48:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1c4a:	84 15       	cp	r24, r4
    1c4c:	95 05       	cpc	r25, r5
    1c4e:	58 f4       	brcc	.+22     	; 0x1c66 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1c50:	1e 82       	std	Y+6, r1	; 0x06
    1c52:	1f 82       	std	Y+7, r1	; 0x07
    1c54:	18 86       	std	Y+8, r1	; 0x08
    1c56:	19 86       	std	Y+9, r1	; 0x09
    1c58:	06 c0       	rjmp	.+12     	; 0x1c66 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1c5a:	84 17       	cp	r24, r20
    1c5c:	95 07       	cpc	r25, r21
    1c5e:	10 f0       	brcs	.+4      	; 0x1c64 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1c60:	2a 01       	movw	r4, r20
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1c64:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1c66:	8e 81       	ldd	r24, Y+6	; 0x06
    1c68:	9f 81       	ldd	r25, Y+7	; 0x07
    1c6a:	a8 85       	ldd	r26, Y+8	; 0x08
    1c6c:	b9 85       	ldd	r27, Y+9	; 0x09
    1c6e:	89 2b       	or	r24, r25
    1c70:	8a 2b       	or	r24, r26
    1c72:	8b 2b       	or	r24, r27
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <xStreamBufferSend+0x88>
    1c76:	38 c0       	rjmp	.+112    	; 0x1ce8 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1c78:	ce 01       	movw	r24, r28
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1c86:	c4 01       	movw	r24, r8
    1c88:	a1 df       	rcall	.-190    	; 0x1bcc <xStreamBufferSpacesAvailable>
    1c8a:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1c8c:	84 15       	cp	r24, r4
    1c8e:	95 05       	cpc	r25, r5
    1c90:	40 f5       	brcc	.+80     	; 0x1ce2 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1c9c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <xTaskGetCurrentTaskHandle>
    1ca0:	f4 01       	movw	r30, r8
    1ca2:	93 87       	std	Z+11, r25	; 0x0b
    1ca4:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1ca6:	0f 90       	pop	r0
    1ca8:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1caa:	ae 80       	ldd	r10, Y+6	; 0x06
    1cac:	bf 80       	ldd	r11, Y+7	; 0x07
    1cae:	c8 84       	ldd	r12, Y+8	; 0x08
    1cb0:	d9 84       	ldd	r13, Y+9	; 0x09
    1cb2:	e1 2c       	mov	r14, r1
    1cb4:	f1 2c       	mov	r15, r1
    1cb6:	00 e0       	ldi	r16, 0x00	; 0
    1cb8:	10 e0       	ldi	r17, 0x00	; 0
    1cba:	98 01       	movw	r18, r16
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	ba 01       	movw	r22, r20
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	0e 94 36 19 	call	0x326c	; 0x326c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1cc8:	f4 01       	movw	r30, r8
    1cca:	13 86       	std	Z+11, r1	; 0x0b
    1ccc:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1cce:	be 01       	movw	r22, r28
    1cd0:	6a 5f       	subi	r22, 0xFA	; 250
    1cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	0e 94 34 17 	call	0x2e68	; 0x2e68 <xTaskCheckForTimeOut>
    1cdc:	88 23       	and	r24, r24
    1cde:	81 f2       	breq	.-96     	; 0x1c80 <xStreamBufferSend+0x90>
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1ce2:	0f 90       	pop	r0
    1ce4:	0f be       	out	0x3f, r0	; 63
                    break;
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1ce8:	61 2c       	mov	r6, r1
    1cea:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1cec:	61 14       	cp	r6, r1
    1cee:	71 04       	cpc	r7, r1
    1cf0:	19 f4       	brne	.+6      	; 0x1cf8 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1cf2:	c4 01       	movw	r24, r8
    1cf4:	6b df       	rcall	.-298    	; 0x1bcc <xStreamBufferSpacesAvailable>
    1cf6:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1cf8:	82 01       	movw	r16, r4
    1cfa:	93 01       	movw	r18, r6
    1cfc:	a1 01       	movw	r20, r2
    1cfe:	6a 85       	ldd	r22, Y+10	; 0x0a
    1d00:	7b 85       	ldd	r23, Y+11	; 0x0b
    1d02:	c4 01       	movw	r24, r8
    1d04:	3c de       	rcall	.-904    	; 0x197e <prvWriteMessageToBuffer>
    1d06:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1d08:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1d0a:	e9 f0       	breq	.+58     	; 0x1d46 <xStreamBufferSend+0x156>
    1d0c:	c4 01       	movw	r24, r8
    1d0e:	cb dd       	rcall	.-1130   	; 0x18a6 <prvBytesInBuffer>
    1d10:	f4 01       	movw	r30, r8
    1d12:	26 81       	ldd	r18, Z+6	; 0x06
    1d14:	37 81       	ldd	r19, Z+7	; 0x07
    1d16:	82 17       	cp	r24, r18
    1d18:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1d1a:	a8 f0       	brcs	.+42     	; 0x1d46 <xStreamBufferSend+0x156>
    1d1c:	91 d3       	rcall	.+1826   	; 0x2440 <vTaskSuspendAll>
    1d1e:	f4 01       	movw	r30, r8
    1d20:	80 85       	ldd	r24, Z+8	; 0x08
    1d22:	91 85       	ldd	r25, Z+9	; 0x09
    1d24:	89 2b       	or	r24, r25
    1d26:	71 f0       	breq	.+28     	; 0x1d44 <xStreamBufferSend+0x154>
    1d28:	80 85       	ldd	r24, Z+8	; 0x08
    1d2a:	91 85       	ldd	r25, Z+9	; 0x09
    1d2c:	e1 2c       	mov	r14, r1
    1d2e:	f1 2c       	mov	r15, r1
    1d30:	00 e0       	ldi	r16, 0x00	; 0
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	a9 01       	movw	r20, r18
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	0e 94 de 19 	call	0x33bc	; 0x33bc <xTaskGenericNotify>
    1d3e:	f4 01       	movw	r30, r8
    1d40:	11 86       	std	Z+9, r1	; 0x09
    1d42:	10 86       	std	Z+8, r1	; 0x08
    1d44:	bd d4       	rcall	.+2426   	; 0x26c0 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1d46:	c6 01       	movw	r24, r12
    1d48:	2b 96       	adiw	r28, 0x0b	; 11
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	df 90       	pop	r13
    1d62:	cf 90       	pop	r12
    1d64:	bf 90       	pop	r11
    1d66:	af 90       	pop	r10
    1d68:	9f 90       	pop	r9
    1d6a:	8f 90       	pop	r8
    1d6c:	7f 90       	pop	r7
    1d6e:	6f 90       	pop	r6
    1d70:	5f 90       	pop	r5
    1d72:	4f 90       	pop	r4
    1d74:	3f 90       	pop	r3
    1d76:	2f 90       	pop	r2
    1d78:	08 95       	ret

00001d7a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1d7a:	af 92       	push	r10
    1d7c:	bf 92       	push	r11
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	ec 01       	movw	r28, r24
    1d90:	7b 01       	movw	r14, r22
    1d92:	5a 01       	movw	r10, r20
    1d94:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1d96:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d98:	80 ff       	sbrs	r24, 0
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1d9c:	8a 01       	movw	r16, r20
    1d9e:	0e 5f       	subi	r16, 0xFE	; 254
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1da4:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1da6:	ce 01       	movw	r24, r28
    1da8:	11 df       	rcall	.-478    	; 0x1bcc <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1daa:	9c 01       	movw	r18, r24
    1dac:	a5 01       	movw	r20, r10
    1dae:	b7 01       	movw	r22, r14
    1db0:	ce 01       	movw	r24, r28
    1db2:	e5 dd       	rcall	.-1078   	; 0x197e <prvWriteMessageToBuffer>
    1db4:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1db6:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1db8:	c1 f0       	breq	.+48     	; 0x1dea <xStreamBufferSendFromISR+0x70>
    1dba:	ce 01       	movw	r24, r28
    1dbc:	74 dd       	rcall	.-1304   	; 0x18a6 <prvBytesInBuffer>
    1dbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1dc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1dc2:	82 17       	cp	r24, r18
    1dc4:	93 07       	cpc	r25, r19
    1dc6:	88 f0       	brcs	.+34     	; 0x1dea <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1dc8:	88 85       	ldd	r24, Y+8	; 0x08
    1dca:	99 85       	ldd	r25, Y+9	; 0x09
    1dcc:	89 2b       	or	r24, r25
    1dce:	69 f0       	breq	.+26     	; 0x1dea <xStreamBufferSendFromISR+0x70>
    1dd0:	88 85       	ldd	r24, Y+8	; 0x08
    1dd2:	99 85       	ldd	r25, Y+9	; 0x09
    1dd4:	e1 2c       	mov	r14, r1
    1dd6:	f1 2c       	mov	r15, r1
    1dd8:	00 e0       	ldi	r16, 0x00	; 0
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	a9 01       	movw	r20, r18
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <xTaskGenericNotifyFromISR>
    1de6:	19 86       	std	Y+9, r1	; 0x09
    1de8:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1dea:	c5 01       	movw	r24, r10
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	df 90       	pop	r13
    1dfa:	cf 90       	pop	r12
    1dfc:	bf 90       	pop	r11
    1dfe:	af 90       	pop	r10
    1e00:	08 95       	ret

00001e02 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1e02:	4f 92       	push	r4
    1e04:	5f 92       	push	r5
    1e06:	6f 92       	push	r6
    1e08:	7f 92       	push	r7
    1e0a:	8f 92       	push	r8
    1e0c:	9f 92       	push	r9
    1e0e:	af 92       	push	r10
    1e10:	bf 92       	push	r11
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	ec 01       	movw	r28, r24
    1e24:	2b 01       	movw	r4, r22
    1e26:	3a 01       	movw	r6, r20
    1e28:	58 01       	movw	r10, r16
    1e2a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1e2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e2e:	80 ff       	sbrs	r24, 0
    1e30:	05 c0       	rjmp	.+10     	; 0x1e3c <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1e32:	68 94       	set
    1e34:	88 24       	eor	r8, r8
    1e36:	81 f8       	bld	r8, 1
    1e38:	91 2c       	mov	r9, r1
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1e3c:	81 2c       	mov	r8, r1
    1e3e:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1e40:	a1 14       	cp	r10, r1
    1e42:	b1 04       	cpc	r11, r1
    1e44:	c1 04       	cpc	r12, r1
    1e46:	d1 04       	cpc	r13, r1
    1e48:	41 f1       	breq	.+80     	; 0x1e9a <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e50:	ce 01       	movw	r24, r28
    1e52:	29 dd       	rcall	.-1454   	; 0x18a6 <prvBytesInBuffer>
    1e54:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e56:	88 16       	cp	r8, r24
    1e58:	99 06       	cpc	r9, r25
    1e5a:	48 f0       	brcs	.+18     	; 0x1e6e <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1e66:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <xTaskGetCurrentTaskHandle>
    1e6a:	99 87       	std	Y+9, r25	; 0x09
    1e6c:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1e72:	8e 14       	cp	r8, r14
    1e74:	9f 04       	cpc	r9, r15
    1e76:	a0 f0       	brcs	.+40     	; 0x1ea0 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1e78:	e1 2c       	mov	r14, r1
    1e7a:	f1 2c       	mov	r15, r1
    1e7c:	00 e0       	ldi	r16, 0x00	; 0
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
    1e80:	98 01       	movw	r18, r16
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	ba 01       	movw	r22, r20
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	0e 94 36 19 	call	0x326c	; 0x326c <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1e8e:	19 86       	std	Y+9, r1	; 0x09
    1e90:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e92:	ce 01       	movw	r24, r28
    1e94:	08 dd       	rcall	.-1520   	; 0x18a6 <prvBytesInBuffer>
    1e96:	7c 01       	movw	r14, r24
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	04 dd       	rcall	.-1528   	; 0x18a6 <prvBytesInBuffer>
    1e9e:	7c 01       	movw	r14, r24
    1ea0:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1ea2:	9f 04       	cpc	r9, r15
    1ea4:	e8 f4       	brcc	.+58     	; 0x1ee0 <xStreamBufferReceive+0xde>
    1ea6:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1ea8:	97 01       	movw	r18, r14
    1eaa:	a3 01       	movw	r20, r6
    1eac:	b2 01       	movw	r22, r4
    1eae:	ce 01       	movw	r24, r28
    1eb0:	f8 dd       	rcall	.-1040   	; 0x1aa2 <prvReadMessageFromBuffer>
    1eb2:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1eb4:	89 2b       	or	r24, r25
    1eb6:	b1 f0       	breq	.+44     	; 0x1ee4 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1eb8:	c3 d2       	rcall	.+1414   	; 0x2440 <vTaskSuspendAll>
    1eba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ebc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ebe:	89 2b       	or	r24, r25
    1ec0:	69 f0       	breq	.+26     	; 0x1edc <xStreamBufferReceive+0xda>
    1ec2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ec6:	e1 2c       	mov	r14, r1
    1ec8:	f1 2c       	mov	r15, r1
    1eca:	00 e0       	ldi	r16, 0x00	; 0
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	a9 01       	movw	r20, r18
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	0e 94 de 19 	call	0x33bc	; 0x33bc <xTaskGenericNotify>
    1ed8:	1b 86       	std	Y+11, r1	; 0x0b
    1eda:	1a 86       	std	Y+10, r1	; 0x0a
    1edc:	f1 d3       	rcall	.+2018   	; 0x26c0 <xTaskResumeAll>
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <xStreamBufferReceive+0xe2>
    1ee0:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1ee2:	d1 2c       	mov	r13, r1
    1ee4:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15
    1ef0:	ef 90       	pop	r14
    1ef2:	df 90       	pop	r13
    1ef4:	cf 90       	pop	r12
    1ef6:	bf 90       	pop	r11
    1ef8:	af 90       	pop	r10
    1efa:	9f 90       	pop	r9
    1efc:	8f 90       	pop	r8
    1efe:	7f 90       	pop	r7
    1f00:	6f 90       	pop	r6
    1f02:	5f 90       	pop	r5
    1f04:	4f 90       	pop	r4
    1f06:	08 95       	ret

00001f08 <prvResetNextTaskUnblockTime>:
    1f08:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxDelayedTaskList>
    1f0c:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxDelayedTaskList+0x1>
    1f10:	80 81       	ld	r24, Z
    1f12:	81 11       	cpse	r24, r1
    1f14:	0c c0       	rjmp	.+24     	; 0x1f2e <prvResetNextTaskUnblockTime+0x26>
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	9f ef       	ldi	r25, 0xFF	; 255
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <xNextTaskUnblockTime>
    1f20:	90 93 11 17 	sts	0x1711, r25	; 0x801711 <xNextTaskUnblockTime+0x1>
    1f24:	a0 93 12 17 	sts	0x1712, r26	; 0x801712 <xNextTaskUnblockTime+0x2>
    1f28:	b0 93 13 17 	sts	0x1713, r27	; 0x801713 <xNextTaskUnblockTime+0x3>
    1f2c:	08 95       	ret
    1f2e:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxDelayedTaskList>
    1f32:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxDelayedTaskList+0x1>
    1f36:	07 80       	ldd	r0, Z+7	; 0x07
    1f38:	f0 85       	ldd	r31, Z+8	; 0x08
    1f3a:	e0 2d       	mov	r30, r0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	a2 81       	ldd	r26, Z+2	; 0x02
    1f42:	b3 81       	ldd	r27, Z+3	; 0x03
    1f44:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <xNextTaskUnblockTime>
    1f48:	90 93 11 17 	sts	0x1711, r25	; 0x801711 <xNextTaskUnblockTime+0x1>
    1f4c:	a0 93 12 17 	sts	0x1712, r26	; 0x801712 <xNextTaskUnblockTime+0x2>
    1f50:	b0 93 13 17 	sts	0x1713, r27	; 0x801713 <xNextTaskUnblockTime+0x3>
    1f54:	08 95       	ret

00001f56 <prvDeleteTCB>:
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	ec 01       	movw	r28, r24
    1f5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f60:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vPortFree>
    1f64:	ce 01       	movw	r24, r28
    1f66:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vPortFree>
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <prvInitialiseNewTask>:
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	2c 01       	movw	r4, r24
    1f90:	5b 01       	movw	r10, r22
    1f92:	4a 01       	movw	r8, r20
    1f94:	39 01       	movw	r6, r18
    1f96:	e6 01       	movw	r28, r12
    1f98:	65 ea       	ldi	r22, 0xA5	; 165
    1f9a:	70 e0       	ldi	r23, 0x00	; 0
    1f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa0:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <memset>
    1fa4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa8:	21 e0       	ldi	r18, 0x01	; 1
    1faa:	82 1a       	sub	r8, r18
    1fac:	91 08       	sbc	r9, r1
    1fae:	88 0e       	add	r8, r24
    1fb0:	99 1e       	adc	r9, r25
    1fb2:	a1 14       	cp	r10, r1
    1fb4:	b1 04       	cpc	r11, r1
    1fb6:	89 f4       	brne	.+34     	; 0x1fda <prvInitialiseNewTask+0x6a>
    1fb8:	15 c0       	rjmp	.+42     	; 0x1fe4 <prvInitialiseNewTask+0x74>
    1fba:	82 2f       	mov	r24, r18
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	f5 01       	movw	r30, r10
    1fc0:	e8 0f       	add	r30, r24
    1fc2:	f9 1f       	adc	r31, r25
    1fc4:	30 81       	ld	r19, Z
    1fc6:	de 01       	movw	r26, r28
    1fc8:	a8 0f       	add	r26, r24
    1fca:	b9 1f       	adc	r27, r25
    1fcc:	5d 96       	adiw	r26, 0x1d	; 29
    1fce:	3c 93       	st	X, r19
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 23       	and	r24, r24
    1fd4:	29 f0       	breq	.+10     	; 0x1fe0 <prvInitialiseNewTask+0x70>
    1fd6:	2f 5f       	subi	r18, 0xFF	; 255
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <prvInitialiseNewTask+0x6c>
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	20 31       	cpi	r18, 0x10	; 16
    1fde:	68 f3       	brcs	.-38     	; 0x1fba <prvInitialiseNewTask+0x4a>
    1fe0:	1c a6       	std	Y+44, r1	; 0x2c
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <prvInitialiseNewTask+0x76>
    1fe4:	1d 8e       	std	Y+29, r1	; 0x1d
    1fe6:	0a 30       	cpi	r16, 0x0A	; 10
    1fe8:	08 f0       	brcs	.+2      	; 0x1fec <prvInitialiseNewTask+0x7c>
    1fea:	09 e0       	ldi	r16, 0x09	; 9
    1fec:	0a 8f       	std	Y+26, r16	; 0x1a
    1fee:	0d a7       	std	Y+45, r16	; 0x2d
    1ff0:	1e a6       	std	Y+46, r1	; 0x2e
    1ff2:	ce 01       	movw	r24, r28
    1ff4:	02 96       	adiw	r24, 0x02	; 2
    1ff6:	0e 94 37 07 	call	0xe6e	; 0xe6e <vListInitialiseItem>
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	0e 96       	adiw	r24, 0x0e	; 14
    1ffe:	0e 94 37 07 	call	0xe6e	; 0xe6e <vListInitialiseItem>
    2002:	db 87       	std	Y+11, r29	; 0x0b
    2004:	ca 87       	std	Y+10, r28	; 0x0a
    2006:	8a e0       	ldi	r24, 0x0A	; 10
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	80 1b       	sub	r24, r16
    2010:	91 09       	sbc	r25, r1
    2012:	a1 09       	sbc	r26, r1
    2014:	b1 09       	sbc	r27, r1
    2016:	8e 87       	std	Y+14, r24	; 0x0e
    2018:	9f 87       	std	Y+15, r25	; 0x0f
    201a:	a8 8b       	std	Y+16, r26	; 0x10
    201c:	b9 8b       	std	Y+17, r27	; 0x11
    201e:	df 8b       	std	Y+23, r29	; 0x17
    2020:	ce 8b       	std	Y+22, r28	; 0x16
    2022:	84 e0       	ldi	r24, 0x04	; 4
    2024:	fe 01       	movw	r30, r28
    2026:	bf 96       	adiw	r30, 0x2f	; 47
    2028:	df 01       	movw	r26, r30
    202a:	1d 92       	st	X+, r1
    202c:	8a 95       	dec	r24
    202e:	e9 f7       	brne	.-6      	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    2030:	1b aa       	std	Y+51, r1	; 0x33
    2032:	a3 01       	movw	r20, r6
    2034:	b2 01       	movw	r22, r4
    2036:	c4 01       	movw	r24, r8
    2038:	0e 94 ab 07 	call	0xf56	; 0xf56 <pxPortInitialiseStack>
    203c:	99 83       	std	Y+1, r25	; 0x01
    203e:	88 83       	st	Y, r24
    2040:	e1 14       	cp	r14, r1
    2042:	f1 04       	cpc	r15, r1
    2044:	19 f0       	breq	.+6      	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2046:	f7 01       	movw	r30, r14
    2048:	d1 83       	std	Z+1, r29	; 0x01
    204a:	c0 83       	st	Z, r28
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	0f 91       	pop	r16
    2052:	ff 90       	pop	r15
    2054:	ef 90       	pop	r14
    2056:	df 90       	pop	r13
    2058:	cf 90       	pop	r12
    205a:	bf 90       	pop	r11
    205c:	af 90       	pop	r10
    205e:	9f 90       	pop	r9
    2060:	8f 90       	pop	r8
    2062:	7f 90       	pop	r7
    2064:	6f 90       	pop	r6
    2066:	5f 90       	pop	r5
    2068:	4f 90       	pop	r4
    206a:	08 95       	ret

0000206c <prvInitialiseTaskLists>:
    206c:	cf 93       	push	r28
    206e:	c0 e0       	ldi	r28, 0x00	; 0
    2070:	09 c0       	rjmp	.+18     	; 0x2084 <prvInitialiseTaskLists+0x18>
    2072:	2b e0       	ldi	r18, 0x0B	; 11
    2074:	c2 9f       	mul	r28, r18
    2076:	c0 01       	movw	r24, r0
    2078:	11 24       	eor	r1, r1
    207a:	82 5a       	subi	r24, 0xA2	; 162
    207c:	98 4e       	sbci	r25, 0xE8	; 232
    207e:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInitialise>
    2082:	cf 5f       	subi	r28, 0xFF	; 255
    2084:	ca 30       	cpi	r28, 0x0A	; 10
    2086:	a8 f3       	brcs	.-22     	; 0x2072 <prvInitialiseTaskLists+0x6>
    2088:	83 e5       	ldi	r24, 0x53	; 83
    208a:	97 e1       	ldi	r25, 0x17	; 23
    208c:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInitialise>
    2090:	88 e4       	ldi	r24, 0x48	; 72
    2092:	97 e1       	ldi	r25, 0x17	; 23
    2094:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInitialise>
    2098:	89 e3       	ldi	r24, 0x39	; 57
    209a:	97 e1       	ldi	r25, 0x17	; 23
    209c:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInitialise>
    20a0:	8e e2       	ldi	r24, 0x2E	; 46
    20a2:	97 e1       	ldi	r25, 0x17	; 23
    20a4:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInitialise>
    20a8:	82 e2       	ldi	r24, 0x22	; 34
    20aa:	97 e1       	ldi	r25, 0x17	; 23
    20ac:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInitialise>
    20b0:	83 e5       	ldi	r24, 0x53	; 83
    20b2:	97 e1       	ldi	r25, 0x17	; 23
    20b4:	90 93 47 17 	sts	0x1747, r25	; 0x801747 <pxDelayedTaskList+0x1>
    20b8:	80 93 46 17 	sts	0x1746, r24	; 0x801746 <pxDelayedTaskList>
    20bc:	88 e4       	ldi	r24, 0x48	; 72
    20be:	97 e1       	ldi	r25, 0x17	; 23
    20c0:	90 93 45 17 	sts	0x1745, r25	; 0x801745 <pxOverflowDelayedTaskList+0x1>
    20c4:	80 93 44 17 	sts	0x1744, r24	; 0x801744 <pxOverflowDelayedTaskList>
    20c8:	cf 91       	pop	r28
    20ca:	08 95       	ret

000020cc <prvAddNewTaskToReadyList>:
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	ec 01       	movw	r28, r24
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	0f 92       	push	r0
    20d8:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <uxCurrentNumberOfTasks>
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	80 93 21 17 	sts	0x1721, r24	; 0x801721 <uxCurrentNumberOfTasks>
    20e2:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    20e6:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    20ea:	89 2b       	or	r24, r25
    20ec:	51 f4       	brne	.+20     	; 0x2102 <prvAddNewTaskToReadyList+0x36>
    20ee:	d0 93 cd 17 	sts	0x17CD, r29	; 0x8017cd <pxCurrentTCB+0x1>
    20f2:	c0 93 cc 17 	sts	0x17CC, r28	; 0x8017cc <pxCurrentTCB>
    20f6:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <uxCurrentNumberOfTasks>
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	91 f4       	brne	.+36     	; 0x2122 <prvAddNewTaskToReadyList+0x56>
    20fe:	b6 df       	rcall	.-148    	; 0x206c <prvInitialiseTaskLists>
    2100:	10 c0       	rjmp	.+32     	; 0x2122 <prvAddNewTaskToReadyList+0x56>
    2102:	80 91 1b 17 	lds	r24, 0x171B	; 0x80171b <xSchedulerRunning>
    2106:	81 11       	cpse	r24, r1
    2108:	0c c0       	rjmp	.+24     	; 0x2122 <prvAddNewTaskToReadyList+0x56>
    210a:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    210e:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2112:	92 8d       	ldd	r25, Z+26	; 0x1a
    2114:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2116:	89 17       	cp	r24, r25
    2118:	20 f0       	brcs	.+8      	; 0x2122 <prvAddNewTaskToReadyList+0x56>
    211a:	d0 93 cd 17 	sts	0x17CD, r29	; 0x8017cd <pxCurrentTCB+0x1>
    211e:	c0 93 cc 17 	sts	0x17CC, r28	; 0x8017cc <pxCurrentTCB>
    2122:	80 91 14 17 	lds	r24, 0x1714	; 0x801714 <uxTaskNumber>
    2126:	8f 5f       	subi	r24, 0xFF	; 255
    2128:	80 93 14 17 	sts	0x1714, r24	; 0x801714 <uxTaskNumber>
    212c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    212e:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <uxTopReadyPriority>
    2132:	8e 17       	cp	r24, r30
    2134:	10 f4       	brcc	.+4      	; 0x213a <prvAddNewTaskToReadyList+0x6e>
    2136:	e0 93 1c 17 	sts	0x171C, r30	; 0x80171c <uxTopReadyPriority>
    213a:	8b e0       	ldi	r24, 0x0B	; 11
    213c:	8e 9f       	mul	r24, r30
    213e:	f0 01       	movw	r30, r0
    2140:	11 24       	eor	r1, r1
    2142:	e2 5a       	subi	r30, 0xA2	; 162
    2144:	f8 4e       	sbci	r31, 0xE8	; 232
    2146:	01 80       	ldd	r0, Z+1	; 0x01
    2148:	f2 81       	ldd	r31, Z+2	; 0x02
    214a:	e0 2d       	mov	r30, r0
    214c:	ff 83       	std	Y+7, r31	; 0x07
    214e:	ee 83       	std	Y+6, r30	; 0x06
    2150:	26 81       	ldd	r18, Z+6	; 0x06
    2152:	37 81       	ldd	r19, Z+7	; 0x07
    2154:	39 87       	std	Y+9, r19	; 0x09
    2156:	28 87       	std	Y+8, r18	; 0x08
    2158:	a6 81       	ldd	r26, Z+6	; 0x06
    215a:	b7 81       	ldd	r27, Z+7	; 0x07
    215c:	9e 01       	movw	r18, r28
    215e:	2e 5f       	subi	r18, 0xFE	; 254
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	15 96       	adiw	r26, 0x05	; 5
    2164:	3c 93       	st	X, r19
    2166:	2e 93       	st	-X, r18
    2168:	14 97       	sbiw	r26, 0x04	; 4
    216a:	37 83       	std	Z+7, r19	; 0x07
    216c:	26 83       	std	Z+6, r18	; 0x06
    216e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2170:	8e 9f       	mul	r24, r30
    2172:	f0 01       	movw	r30, r0
    2174:	11 24       	eor	r1, r1
    2176:	e2 5a       	subi	r30, 0xA2	; 162
    2178:	f8 4e       	sbci	r31, 0xE8	; 232
    217a:	fd 87       	std	Y+13, r31	; 0x0d
    217c:	ec 87       	std	Y+12, r30	; 0x0c
    217e:	80 81       	ld	r24, Z
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	80 83       	st	Z, r24
    2184:	0f 90       	pop	r0
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	80 91 1b 17 	lds	r24, 0x171B	; 0x80171b <xSchedulerRunning>
    218c:	88 23       	and	r24, r24
    218e:	51 f0       	breq	.+20     	; 0x21a4 <prvAddNewTaskToReadyList+0xd8>
    2190:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2194:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2198:	92 8d       	ldd	r25, Z+26	; 0x1a
    219a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    219c:	98 17       	cp	r25, r24
    219e:	10 f4       	brcc	.+4      	; 0x21a4 <prvAddNewTaskToReadyList+0xd8>
    21a0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vPortYield>
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	08 95       	ret

000021aa <prvCheckTasksWaitingTermination>:
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	1b c0       	rjmp	.+54     	; 0x21e6 <prvCheckTasksWaitingTermination+0x3c>
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	0f 92       	push	r0
    21b6:	e0 91 35 17 	lds	r30, 0x1735	; 0x801735 <xTasksWaitingTermination+0x7>
    21ba:	f0 91 36 17 	lds	r31, 0x1736	; 0x801736 <xTasksWaitingTermination+0x8>
    21be:	c0 85       	ldd	r28, Z+8	; 0x08
    21c0:	d1 85       	ldd	r29, Z+9	; 0x09
    21c2:	ce 01       	movw	r24, r28
    21c4:	02 96       	adiw	r24, 0x02	; 2
    21c6:	0e 94 78 07 	call	0xef0	; 0xef0 <uxListRemove>
    21ca:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <uxCurrentNumberOfTasks>
    21ce:	81 50       	subi	r24, 0x01	; 1
    21d0:	80 93 21 17 	sts	0x1721, r24	; 0x801721 <uxCurrentNumberOfTasks>
    21d4:	80 91 2d 17 	lds	r24, 0x172D	; 0x80172d <uxDeletedTasksWaitingCleanUp>
    21d8:	81 50       	subi	r24, 0x01	; 1
    21da:	80 93 2d 17 	sts	0x172D, r24	; 0x80172d <uxDeletedTasksWaitingCleanUp>
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	ce 01       	movw	r24, r28
    21e4:	b8 de       	rcall	.-656    	; 0x1f56 <prvDeleteTCB>
    21e6:	80 91 2d 17 	lds	r24, 0x172D	; 0x80172d <uxDeletedTasksWaitingCleanUp>
    21ea:	81 11       	cpse	r24, r1
    21ec:	e1 cf       	rjmp	.-62     	; 0x21b0 <prvCheckTasksWaitingTermination+0x6>
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	08 95       	ret

000021f4 <prvAddCurrentTaskToDelayedList>:
    21f4:	8f 92       	push	r8
    21f6:	9f 92       	push	r9
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	6b 01       	movw	r12, r22
    220a:	7c 01       	movw	r14, r24
    220c:	c4 2f       	mov	r28, r20
    220e:	80 90 1d 17 	lds	r8, 0x171D	; 0x80171d <xTickCount>
    2212:	90 90 1e 17 	lds	r9, 0x171E	; 0x80171e <xTickCount+0x1>
    2216:	a0 90 1f 17 	lds	r10, 0x171F	; 0x80171f <xTickCount+0x2>
    221a:	b0 90 20 17 	lds	r11, 0x1720	; 0x801720 <xTickCount+0x3>
    221e:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2222:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2226:	02 96       	adiw	r24, 0x02	; 2
    2228:	0e 94 78 07 	call	0xef0	; 0xef0 <uxListRemove>
    222c:	8f ef       	ldi	r24, 0xFF	; 255
    222e:	c8 16       	cp	r12, r24
    2230:	d8 06       	cpc	r13, r24
    2232:	e8 06       	cpc	r14, r24
    2234:	f8 06       	cpc	r15, r24
    2236:	b1 f5       	brne	.+108    	; 0x22a4 <__stack+0xa5>
    2238:	cc 23       	and	r28, r28
    223a:	a1 f1       	breq	.+104    	; 0x22a4 <__stack+0xa5>
    223c:	e2 e2       	ldi	r30, 0x22	; 34
    223e:	f7 e1       	ldi	r31, 0x17	; 23
    2240:	a1 81       	ldd	r26, Z+1	; 0x01
    2242:	b2 81       	ldd	r27, Z+2	; 0x02
    2244:	c0 91 cc 17 	lds	r28, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2248:	d0 91 cd 17 	lds	r29, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    224c:	bf 83       	std	Y+7, r27	; 0x07
    224e:	ae 83       	std	Y+6, r26	; 0x06
    2250:	c0 91 cc 17 	lds	r28, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2254:	d0 91 cd 17 	lds	r29, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2258:	16 96       	adiw	r26, 0x06	; 6
    225a:	8d 91       	ld	r24, X+
    225c:	9c 91       	ld	r25, X
    225e:	17 97       	sbiw	r26, 0x07	; 7
    2260:	99 87       	std	Y+9, r25	; 0x09
    2262:	88 87       	std	Y+8, r24	; 0x08
    2264:	16 96       	adiw	r26, 0x06	; 6
    2266:	cd 91       	ld	r28, X+
    2268:	dc 91       	ld	r29, X
    226a:	17 97       	sbiw	r26, 0x07	; 7
    226c:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2270:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2274:	02 96       	adiw	r24, 0x02	; 2
    2276:	9d 83       	std	Y+5, r25	; 0x05
    2278:	8c 83       	std	Y+4, r24	; 0x04
    227a:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    227e:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2282:	02 96       	adiw	r24, 0x02	; 2
    2284:	17 96       	adiw	r26, 0x07	; 7
    2286:	9c 93       	st	X, r25
    2288:	8e 93       	st	-X, r24
    228a:	16 97       	sbiw	r26, 0x06	; 6
    228c:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2290:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2294:	1d 96       	adiw	r26, 0x0d	; 13
    2296:	fc 93       	st	X, r31
    2298:	ee 93       	st	-X, r30
    229a:	1c 97       	sbiw	r26, 0x0c	; 12
    229c:	80 81       	ld	r24, Z
    229e:	8f 5f       	subi	r24, 0xFF	; 255
    22a0:	80 83       	st	Z, r24
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <__stack+0x123>
    22a4:	c8 0c       	add	r12, r8
    22a6:	d9 1c       	adc	r13, r9
    22a8:	ea 1c       	adc	r14, r10
    22aa:	fb 1c       	adc	r15, r11
    22ac:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    22b0:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    22b4:	c2 82       	std	Z+2, r12	; 0x02
    22b6:	d3 82       	std	Z+3, r13	; 0x03
    22b8:	e4 82       	std	Z+4, r14	; 0x04
    22ba:	f5 82       	std	Z+5, r15	; 0x05
    22bc:	c8 14       	cp	r12, r8
    22be:	d9 04       	cpc	r13, r9
    22c0:	ea 04       	cpc	r14, r10
    22c2:	fb 04       	cpc	r15, r11
    22c4:	68 f4       	brcc	.+26     	; 0x22e0 <__stack+0xe1>
    22c6:	60 91 cc 17 	lds	r22, 0x17CC	; 0x8017cc <pxCurrentTCB>
    22ca:	70 91 cd 17 	lds	r23, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    22ce:	80 91 44 17 	lds	r24, 0x1744	; 0x801744 <pxOverflowDelayedTaskList>
    22d2:	90 91 45 17 	lds	r25, 0x1745	; 0x801745 <pxOverflowDelayedTaskList+0x1>
    22d6:	6e 5f       	subi	r22, 0xFE	; 254
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255
    22da:	0e 94 3b 07 	call	0xe76	; 0xe76 <vListInsert>
    22de:	21 c0       	rjmp	.+66     	; 0x2322 <__stack+0x123>
    22e0:	60 91 cc 17 	lds	r22, 0x17CC	; 0x8017cc <pxCurrentTCB>
    22e4:	70 91 cd 17 	lds	r23, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    22e8:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <pxDelayedTaskList>
    22ec:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <pxDelayedTaskList+0x1>
    22f0:	6e 5f       	subi	r22, 0xFE	; 254
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	0e 94 3b 07 	call	0xe76	; 0xe76 <vListInsert>
    22f8:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <xNextTaskUnblockTime>
    22fc:	90 91 11 17 	lds	r25, 0x1711	; 0x801711 <xNextTaskUnblockTime+0x1>
    2300:	a0 91 12 17 	lds	r26, 0x1712	; 0x801712 <xNextTaskUnblockTime+0x2>
    2304:	b0 91 13 17 	lds	r27, 0x1713	; 0x801713 <xNextTaskUnblockTime+0x3>
    2308:	c8 16       	cp	r12, r24
    230a:	d9 06       	cpc	r13, r25
    230c:	ea 06       	cpc	r14, r26
    230e:	fb 06       	cpc	r15, r27
    2310:	40 f4       	brcc	.+16     	; 0x2322 <__stack+0x123>
    2312:	c0 92 10 17 	sts	0x1710, r12	; 0x801710 <xNextTaskUnblockTime>
    2316:	d0 92 11 17 	sts	0x1711, r13	; 0x801711 <xNextTaskUnblockTime+0x1>
    231a:	e0 92 12 17 	sts	0x1712, r14	; 0x801712 <xNextTaskUnblockTime+0x2>
    231e:	f0 92 13 17 	sts	0x1713, r15	; 0x801713 <xNextTaskUnblockTime+0x3>
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	bf 90       	pop	r11
    2330:	af 90       	pop	r10
    2332:	9f 90       	pop	r9
    2334:	8f 90       	pop	r8
    2336:	08 95       	ret

00002338 <xTaskCreate>:
    2338:	2f 92       	push	r2
    233a:	3f 92       	push	r3
    233c:	4f 92       	push	r4
    233e:	5f 92       	push	r5
    2340:	6f 92       	push	r6
    2342:	7f 92       	push	r7
    2344:	8f 92       	push	r8
    2346:	9f 92       	push	r9
    2348:	af 92       	push	r10
    234a:	bf 92       	push	r11
    234c:	cf 92       	push	r12
    234e:	df 92       	push	r13
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
    235a:	3c 01       	movw	r6, r24
    235c:	1b 01       	movw	r2, r22
    235e:	4a 01       	movw	r8, r20
    2360:	29 01       	movw	r4, r18
    2362:	ca 01       	movw	r24, r20
    2364:	0e 94 40 06 	call	0xc80	; 0xc80 <pvPortMalloc>
    2368:	6c 01       	movw	r12, r24
    236a:	89 2b       	or	r24, r25
    236c:	71 f0       	breq	.+28     	; 0x238a <xTaskCreate+0x52>
    236e:	84 e3       	ldi	r24, 0x34	; 52
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	0e 94 40 06 	call	0xc80	; 0xc80 <pvPortMalloc>
    2376:	ec 01       	movw	r28, r24
    2378:	89 2b       	or	r24, r25
    237a:	19 f0       	breq	.+6      	; 0x2382 <xTaskCreate+0x4a>
    237c:	dc 8e       	std	Y+28, r13	; 0x1c
    237e:	cb 8e       	std	Y+27, r12	; 0x1b
    2380:	06 c0       	rjmp	.+12     	; 0x238e <xTaskCreate+0x56>
    2382:	c6 01       	movw	r24, r12
    2384:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vPortFree>
    2388:	02 c0       	rjmp	.+4      	; 0x238e <xTaskCreate+0x56>
    238a:	c0 e0       	ldi	r28, 0x00	; 0
    238c:	d0 e0       	ldi	r29, 0x00	; 0
    238e:	20 97       	sbiw	r28, 0x00	; 0
    2390:	61 f0       	breq	.+24     	; 0x23aa <xTaskCreate+0x72>
    2392:	a1 2c       	mov	r10, r1
    2394:	b1 2c       	mov	r11, r1
    2396:	6e 01       	movw	r12, r28
    2398:	92 01       	movw	r18, r4
    239a:	a4 01       	movw	r20, r8
    239c:	b1 01       	movw	r22, r2
    239e:	c3 01       	movw	r24, r6
    23a0:	e7 dd       	rcall	.-1074   	; 0x1f70 <prvInitialiseNewTask>
    23a2:	ce 01       	movw	r24, r28
    23a4:	93 de       	rcall	.-730    	; 0x20cc <prvAddNewTaskToReadyList>
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <xTaskCreate+0x74>
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	0f 91       	pop	r16
    23b2:	ff 90       	pop	r15
    23b4:	ef 90       	pop	r14
    23b6:	df 90       	pop	r13
    23b8:	cf 90       	pop	r12
    23ba:	bf 90       	pop	r11
    23bc:	af 90       	pop	r10
    23be:	9f 90       	pop	r9
    23c0:	8f 90       	pop	r8
    23c2:	7f 90       	pop	r7
    23c4:	6f 90       	pop	r6
    23c6:	5f 90       	pop	r5
    23c8:	4f 90       	pop	r4
    23ca:	3f 90       	pop	r3
    23cc:	2f 90       	pop	r2
    23ce:	08 95       	ret

000023d0 <vTaskStartScheduler>:
    23d0:	ef 92       	push	r14
    23d2:	ff 92       	push	r15
    23d4:	0f 93       	push	r16
    23d6:	0f 2e       	mov	r0, r31
    23d8:	fe e0       	ldi	r31, 0x0E	; 14
    23da:	ef 2e       	mov	r14, r31
    23dc:	f7 e1       	ldi	r31, 0x17	; 23
    23de:	ff 2e       	mov	r15, r31
    23e0:	f0 2d       	mov	r31, r0
    23e2:	00 e0       	ldi	r16, 0x00	; 0
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 ec       	ldi	r20, 0xC0	; 192
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	60 e7       	ldi	r22, 0x70	; 112
    23ee:	73 e0       	ldi	r23, 0x03	; 3
    23f0:	8e e4       	ldi	r24, 0x4E	; 78
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	a1 df       	rcall	.-190    	; 0x2338 <xTaskCreate>
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	11 f4       	brne	.+4      	; 0x23fe <vTaskStartScheduler+0x2e>
    23fa:	0e 94 9b 1c 	call	0x3936	; 0x3936 <xTimerCreateTimerTask>
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	c9 f4       	brne	.+50     	; 0x2434 <vTaskStartScheduler+0x64>
    2402:	f8 94       	cli
    2404:	8f ef       	ldi	r24, 0xFF	; 255
    2406:	9f ef       	ldi	r25, 0xFF	; 255
    2408:	dc 01       	movw	r26, r24
    240a:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <xNextTaskUnblockTime>
    240e:	90 93 11 17 	sts	0x1711, r25	; 0x801711 <xNextTaskUnblockTime+0x1>
    2412:	a0 93 12 17 	sts	0x1712, r26	; 0x801712 <xNextTaskUnblockTime+0x2>
    2416:	b0 93 13 17 	sts	0x1713, r27	; 0x801713 <xNextTaskUnblockTime+0x3>
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	80 93 1b 17 	sts	0x171B, r24	; 0x80171b <xSchedulerRunning>
    2420:	10 92 1d 17 	sts	0x171D, r1	; 0x80171d <xTickCount>
    2424:	10 92 1e 17 	sts	0x171E, r1	; 0x80171e <xTickCount+0x1>
    2428:	10 92 1f 17 	sts	0x171F, r1	; 0x80171f <xTickCount+0x2>
    242c:	10 92 20 17 	sts	0x1720, r1	; 0x801720 <xTickCount+0x3>
    2430:	0e 94 c2 07 	call	0xf84	; 0xf84 <xPortStartScheduler>
    2434:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2438:	0f 91       	pop	r16
    243a:	ff 90       	pop	r15
    243c:	ef 90       	pop	r14
    243e:	08 95       	ret

00002440 <vTaskSuspendAll>:
    2440:	80 91 0d 17 	lds	r24, 0x170D	; 0x80170d <uxSchedulerSuspended>
    2444:	8f 5f       	subi	r24, 0xFF	; 255
    2446:	80 93 0d 17 	sts	0x170D, r24	; 0x80170d <uxSchedulerSuspended>
    244a:	08 95       	ret

0000244c <xTaskGetTickCount>:
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	0f 92       	push	r0
    2452:	60 91 1d 17 	lds	r22, 0x171D	; 0x80171d <xTickCount>
    2456:	70 91 1e 17 	lds	r23, 0x171E	; 0x80171e <xTickCount+0x1>
    245a:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <xTickCount+0x2>
    245e:	90 91 20 17 	lds	r25, 0x1720	; 0x801720 <xTickCount+0x3>
    2462:	0f 90       	pop	r0
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	08 95       	ret

00002468 <xTaskIncrementTick>:
    2468:	cf 92       	push	r12
    246a:	df 92       	push	r13
    246c:	ef 92       	push	r14
    246e:	ff 92       	push	r15
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	80 91 0d 17 	lds	r24, 0x170D	; 0x80170d <uxSchedulerSuspended>
    2478:	81 11       	cpse	r24, r1
    247a:	05 c1       	rjmp	.+522    	; 0x2686 <xTaskIncrementTick+0x21e>
    247c:	c0 90 1d 17 	lds	r12, 0x171D	; 0x80171d <xTickCount>
    2480:	d0 90 1e 17 	lds	r13, 0x171E	; 0x80171e <xTickCount+0x1>
    2484:	e0 90 1f 17 	lds	r14, 0x171F	; 0x80171f <xTickCount+0x2>
    2488:	f0 90 20 17 	lds	r15, 0x1720	; 0x801720 <xTickCount+0x3>
    248c:	8f ef       	ldi	r24, 0xFF	; 255
    248e:	c8 1a       	sub	r12, r24
    2490:	d8 0a       	sbc	r13, r24
    2492:	e8 0a       	sbc	r14, r24
    2494:	f8 0a       	sbc	r15, r24
    2496:	c0 92 1d 17 	sts	0x171D, r12	; 0x80171d <xTickCount>
    249a:	d0 92 1e 17 	sts	0x171E, r13	; 0x80171e <xTickCount+0x1>
    249e:	e0 92 1f 17 	sts	0x171F, r14	; 0x80171f <xTickCount+0x2>
    24a2:	f0 92 20 17 	sts	0x1720, r15	; 0x801720 <xTickCount+0x3>
    24a6:	c1 14       	cp	r12, r1
    24a8:	d1 04       	cpc	r13, r1
    24aa:	e1 04       	cpc	r14, r1
    24ac:	f1 04       	cpc	r15, r1
    24ae:	b1 f4       	brne	.+44     	; 0x24dc <xTaskIncrementTick+0x74>
    24b0:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <pxDelayedTaskList>
    24b4:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <pxDelayedTaskList+0x1>
    24b8:	20 91 44 17 	lds	r18, 0x1744	; 0x801744 <pxOverflowDelayedTaskList>
    24bc:	30 91 45 17 	lds	r19, 0x1745	; 0x801745 <pxOverflowDelayedTaskList+0x1>
    24c0:	30 93 47 17 	sts	0x1747, r19	; 0x801747 <pxDelayedTaskList+0x1>
    24c4:	20 93 46 17 	sts	0x1746, r18	; 0x801746 <pxDelayedTaskList>
    24c8:	90 93 45 17 	sts	0x1745, r25	; 0x801745 <pxOverflowDelayedTaskList+0x1>
    24cc:	80 93 44 17 	sts	0x1744, r24	; 0x801744 <pxOverflowDelayedTaskList>
    24d0:	80 91 15 17 	lds	r24, 0x1715	; 0x801715 <xNumOfOverflows>
    24d4:	8f 5f       	subi	r24, 0xFF	; 255
    24d6:	80 93 15 17 	sts	0x1715, r24	; 0x801715 <xNumOfOverflows>
    24da:	16 dd       	rcall	.-1492   	; 0x1f08 <prvResetNextTaskUnblockTime>
    24dc:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <xNextTaskUnblockTime>
    24e0:	90 91 11 17 	lds	r25, 0x1711	; 0x801711 <xNextTaskUnblockTime+0x1>
    24e4:	a0 91 12 17 	lds	r26, 0x1712	; 0x801712 <xNextTaskUnblockTime+0x2>
    24e8:	b0 91 13 17 	lds	r27, 0x1713	; 0x801713 <xNextTaskUnblockTime+0x3>
    24ec:	c8 16       	cp	r12, r24
    24ee:	d9 06       	cpc	r13, r25
    24f0:	ea 06       	cpc	r14, r26
    24f2:	fb 06       	cpc	r15, r27
    24f4:	20 f4       	brcc	.+8      	; 0x24fe <xTaskIncrementTick+0x96>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	b2 c0       	rjmp	.+356    	; 0x265e <xTaskIncrementTick+0x1f6>
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <xTaskIncrementTick+0x98>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxDelayedTaskList>
    2504:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxDelayedTaskList+0x1>
    2508:	90 81       	ld	r25, Z
    250a:	91 11       	cpse	r25, r1
    250c:	0c c0       	rjmp	.+24     	; 0x2526 <xTaskIncrementTick+0xbe>
    250e:	4f ef       	ldi	r20, 0xFF	; 255
    2510:	5f ef       	ldi	r21, 0xFF	; 255
    2512:	ba 01       	movw	r22, r20
    2514:	40 93 10 17 	sts	0x1710, r20	; 0x801710 <xNextTaskUnblockTime>
    2518:	50 93 11 17 	sts	0x1711, r21	; 0x801711 <xNextTaskUnblockTime+0x1>
    251c:	60 93 12 17 	sts	0x1712, r22	; 0x801712 <xNextTaskUnblockTime+0x2>
    2520:	70 93 13 17 	sts	0x1713, r23	; 0x801713 <xNextTaskUnblockTime+0x3>
    2524:	9c c0       	rjmp	.+312    	; 0x265e <xTaskIncrementTick+0x1f6>
    2526:	e0 91 46 17 	lds	r30, 0x1746	; 0x801746 <pxDelayedTaskList>
    252a:	f0 91 47 17 	lds	r31, 0x1747	; 0x801747 <pxDelayedTaskList+0x1>
    252e:	07 80       	ldd	r0, Z+7	; 0x07
    2530:	f0 85       	ldd	r31, Z+8	; 0x08
    2532:	e0 2d       	mov	r30, r0
    2534:	00 84       	ldd	r0, Z+8	; 0x08
    2536:	f1 85       	ldd	r31, Z+9	; 0x09
    2538:	e0 2d       	mov	r30, r0
    253a:	42 81       	ldd	r20, Z+2	; 0x02
    253c:	53 81       	ldd	r21, Z+3	; 0x03
    253e:	64 81       	ldd	r22, Z+4	; 0x04
    2540:	75 81       	ldd	r23, Z+5	; 0x05
    2542:	c4 16       	cp	r12, r20
    2544:	d5 06       	cpc	r13, r21
    2546:	e6 06       	cpc	r14, r22
    2548:	f7 06       	cpc	r15, r23
    254a:	48 f4       	brcc	.+18     	; 0x255e <xTaskIncrementTick+0xf6>
    254c:	40 93 10 17 	sts	0x1710, r20	; 0x801710 <xNextTaskUnblockTime>
    2550:	50 93 11 17 	sts	0x1711, r21	; 0x801711 <xNextTaskUnblockTime+0x1>
    2554:	60 93 12 17 	sts	0x1712, r22	; 0x801712 <xNextTaskUnblockTime+0x2>
    2558:	70 93 13 17 	sts	0x1713, r23	; 0x801713 <xNextTaskUnblockTime+0x3>
    255c:	80 c0       	rjmp	.+256    	; 0x265e <xTaskIncrementTick+0x1f6>
    255e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2560:	b5 85       	ldd	r27, Z+13	; 0x0d
    2562:	c6 81       	ldd	r28, Z+6	; 0x06
    2564:	d7 81       	ldd	r29, Z+7	; 0x07
    2566:	20 85       	ldd	r18, Z+8	; 0x08
    2568:	31 85       	ldd	r19, Z+9	; 0x09
    256a:	3f 83       	std	Y+7, r19	; 0x07
    256c:	2e 83       	std	Y+6, r18	; 0x06
    256e:	c0 85       	ldd	r28, Z+8	; 0x08
    2570:	d1 85       	ldd	r29, Z+9	; 0x09
    2572:	26 81       	ldd	r18, Z+6	; 0x06
    2574:	37 81       	ldd	r19, Z+7	; 0x07
    2576:	3d 83       	std	Y+5, r19	; 0x05
    2578:	2c 83       	std	Y+4, r18	; 0x04
    257a:	11 96       	adiw	r26, 0x01	; 1
    257c:	4d 91       	ld	r20, X+
    257e:	5c 91       	ld	r21, X
    2580:	12 97       	sbiw	r26, 0x02	; 2
    2582:	9f 01       	movw	r18, r30
    2584:	2e 5f       	subi	r18, 0xFE	; 254
    2586:	3f 4f       	sbci	r19, 0xFF	; 255
    2588:	42 17       	cp	r20, r18
    258a:	53 07       	cpc	r21, r19
    258c:	31 f4       	brne	.+12     	; 0x259a <xTaskIncrementTick+0x132>
    258e:	40 85       	ldd	r20, Z+8	; 0x08
    2590:	51 85       	ldd	r21, Z+9	; 0x09
    2592:	12 96       	adiw	r26, 0x02	; 2
    2594:	5c 93       	st	X, r21
    2596:	4e 93       	st	-X, r20
    2598:	11 97       	sbiw	r26, 0x01	; 1
    259a:	15 86       	std	Z+13, r1	; 0x0d
    259c:	14 86       	std	Z+12, r1	; 0x0c
    259e:	9c 91       	ld	r25, X
    25a0:	91 50       	subi	r25, 0x01	; 1
    25a2:	9c 93       	st	X, r25
    25a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    25a6:	b1 8d       	ldd	r27, Z+25	; 0x19
    25a8:	10 97       	sbiw	r26, 0x00	; 0
    25aa:	09 f1       	breq	.+66     	; 0x25ee <xTaskIncrementTick+0x186>
    25ac:	c2 89       	ldd	r28, Z+18	; 0x12
    25ae:	d3 89       	ldd	r29, Z+19	; 0x13
    25b0:	44 89       	ldd	r20, Z+20	; 0x14
    25b2:	55 89       	ldd	r21, Z+21	; 0x15
    25b4:	5f 83       	std	Y+7, r21	; 0x07
    25b6:	4e 83       	std	Y+6, r20	; 0x06
    25b8:	c4 89       	ldd	r28, Z+20	; 0x14
    25ba:	d5 89       	ldd	r29, Z+21	; 0x15
    25bc:	42 89       	ldd	r20, Z+18	; 0x12
    25be:	53 89       	ldd	r21, Z+19	; 0x13
    25c0:	5d 83       	std	Y+5, r21	; 0x05
    25c2:	4c 83       	std	Y+4, r20	; 0x04
    25c4:	11 96       	adiw	r26, 0x01	; 1
    25c6:	6d 91       	ld	r22, X+
    25c8:	7c 91       	ld	r23, X
    25ca:	12 97       	sbiw	r26, 0x02	; 2
    25cc:	af 01       	movw	r20, r30
    25ce:	42 5f       	subi	r20, 0xF2	; 242
    25d0:	5f 4f       	sbci	r21, 0xFF	; 255
    25d2:	64 17       	cp	r22, r20
    25d4:	75 07       	cpc	r23, r21
    25d6:	31 f4       	brne	.+12     	; 0x25e4 <xTaskIncrementTick+0x17c>
    25d8:	44 89       	ldd	r20, Z+20	; 0x14
    25da:	55 89       	ldd	r21, Z+21	; 0x15
    25dc:	12 96       	adiw	r26, 0x02	; 2
    25de:	5c 93       	st	X, r21
    25e0:	4e 93       	st	-X, r20
    25e2:	11 97       	sbiw	r26, 0x01	; 1
    25e4:	11 8e       	std	Z+25, r1	; 0x19
    25e6:	10 8e       	std	Z+24, r1	; 0x18
    25e8:	9c 91       	ld	r25, X
    25ea:	91 50       	subi	r25, 0x01	; 1
    25ec:	9c 93       	st	X, r25
    25ee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25f0:	90 91 1c 17 	lds	r25, 0x171C	; 0x80171c <uxTopReadyPriority>
    25f4:	9a 17       	cp	r25, r26
    25f6:	10 f4       	brcc	.+4      	; 0x25fc <xTaskIncrementTick+0x194>
    25f8:	a0 93 1c 17 	sts	0x171C, r26	; 0x80171c <uxTopReadyPriority>
    25fc:	9b e0       	ldi	r25, 0x0B	; 11
    25fe:	9a 9f       	mul	r25, r26
    2600:	d0 01       	movw	r26, r0
    2602:	11 24       	eor	r1, r1
    2604:	a2 5a       	subi	r26, 0xA2	; 162
    2606:	b8 4e       	sbci	r27, 0xE8	; 232
    2608:	11 96       	adiw	r26, 0x01	; 1
    260a:	0d 90       	ld	r0, X+
    260c:	bc 91       	ld	r27, X
    260e:	a0 2d       	mov	r26, r0
    2610:	b7 83       	std	Z+7, r27	; 0x07
    2612:	a6 83       	std	Z+6, r26	; 0x06
    2614:	16 96       	adiw	r26, 0x06	; 6
    2616:	4d 91       	ld	r20, X+
    2618:	5c 91       	ld	r21, X
    261a:	17 97       	sbiw	r26, 0x07	; 7
    261c:	51 87       	std	Z+9, r21	; 0x09
    261e:	40 87       	std	Z+8, r20	; 0x08
    2620:	16 96       	adiw	r26, 0x06	; 6
    2622:	cd 91       	ld	r28, X+
    2624:	dc 91       	ld	r29, X
    2626:	17 97       	sbiw	r26, 0x07	; 7
    2628:	3d 83       	std	Y+5, r19	; 0x05
    262a:	2c 83       	std	Y+4, r18	; 0x04
    262c:	17 96       	adiw	r26, 0x07	; 7
    262e:	3c 93       	st	X, r19
    2630:	2e 93       	st	-X, r18
    2632:	16 97       	sbiw	r26, 0x06	; 6
    2634:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2636:	9a 9f       	mul	r25, r26
    2638:	d0 01       	movw	r26, r0
    263a:	11 24       	eor	r1, r1
    263c:	a2 5a       	subi	r26, 0xA2	; 162
    263e:	b8 4e       	sbci	r27, 0xE8	; 232
    2640:	b5 87       	std	Z+13, r27	; 0x0d
    2642:	a4 87       	std	Z+12, r26	; 0x0c
    2644:	9c 91       	ld	r25, X
    2646:	9f 5f       	subi	r25, 0xFF	; 255
    2648:	9c 93       	st	X, r25
    264a:	22 8d       	ldd	r18, Z+26	; 0x1a
    264c:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2650:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2654:	92 8d       	ldd	r25, Z+26	; 0x1a
    2656:	29 17       	cp	r18, r25
    2658:	08 f0       	brcs	.+2      	; 0x265c <xTaskIncrementTick+0x1f4>
    265a:	4f cf       	rjmp	.-354    	; 0x24fa <xTaskIncrementTick+0x92>
    265c:	51 cf       	rjmp	.-350    	; 0x2500 <xTaskIncrementTick+0x98>
    265e:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2662:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2666:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2668:	9b e0       	ldi	r25, 0x0B	; 11
    266a:	e9 9f       	mul	r30, r25
    266c:	f0 01       	movw	r30, r0
    266e:	11 24       	eor	r1, r1
    2670:	e2 5a       	subi	r30, 0xA2	; 162
    2672:	f8 4e       	sbci	r31, 0xE8	; 232
    2674:	90 81       	ld	r25, Z
    2676:	92 30       	cpi	r25, 0x02	; 2
    2678:	08 f0       	brcs	.+2      	; 0x267c <xTaskIncrementTick+0x214>
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 91 16 17 	lds	r25, 0x1716	; 0x801716 <xYieldPending>
    2680:	91 11       	cpse	r25, r1
    2682:	16 c0       	rjmp	.+44     	; 0x26b0 <xTaskIncrementTick+0x248>
    2684:	16 c0       	rjmp	.+44     	; 0x26b2 <xTaskIncrementTick+0x24a>
    2686:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <xPendedTicks>
    268a:	90 91 18 17 	lds	r25, 0x1718	; 0x801718 <xPendedTicks+0x1>
    268e:	a0 91 19 17 	lds	r26, 0x1719	; 0x801719 <xPendedTicks+0x2>
    2692:	b0 91 1a 17 	lds	r27, 0x171A	; 0x80171a <xPendedTicks+0x3>
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	a1 1d       	adc	r26, r1
    269a:	b1 1d       	adc	r27, r1
    269c:	80 93 17 17 	sts	0x1717, r24	; 0x801717 <xPendedTicks>
    26a0:	90 93 18 17 	sts	0x1718, r25	; 0x801718 <xPendedTicks+0x1>
    26a4:	a0 93 19 17 	sts	0x1719, r26	; 0x801719 <xPendedTicks+0x2>
    26a8:	b0 93 1a 17 	sts	0x171A, r27	; 0x80171a <xPendedTicks+0x3>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <xTaskIncrementTick+0x24a>
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	ff 90       	pop	r15
    26b8:	ef 90       	pop	r14
    26ba:	df 90       	pop	r13
    26bc:	cf 90       	pop	r12
    26be:	08 95       	ret

000026c0 <xTaskResumeAll>:
    26c0:	cf 92       	push	r12
    26c2:	df 92       	push	r13
    26c4:	ef 92       	push	r14
    26c6:	ff 92       	push	r15
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	0f 92       	push	r0
    26d2:	80 91 0d 17 	lds	r24, 0x170D	; 0x80170d <uxSchedulerSuspended>
    26d6:	81 50       	subi	r24, 0x01	; 1
    26d8:	80 93 0d 17 	sts	0x170D, r24	; 0x80170d <uxSchedulerSuspended>
    26dc:	80 91 0d 17 	lds	r24, 0x170D	; 0x80170d <uxSchedulerSuspended>
    26e0:	81 11       	cpse	r24, r1
    26e2:	be c0       	rjmp	.+380    	; 0x2860 <xTaskResumeAll+0x1a0>
    26e4:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <uxCurrentNumberOfTasks>
    26e8:	81 11       	cpse	r24, r1
    26ea:	88 c0       	rjmp	.+272    	; 0x27fc <xTaskResumeAll+0x13c>
    26ec:	bc c0       	rjmp	.+376    	; 0x2866 <xTaskResumeAll+0x1a6>
    26ee:	e0 91 40 17 	lds	r30, 0x1740	; 0x801740 <xPendingReadyList+0x7>
    26f2:	f0 91 41 17 	lds	r31, 0x1741	; 0x801741 <xPendingReadyList+0x8>
    26f6:	00 84       	ldd	r0, Z+8	; 0x08
    26f8:	f1 85       	ldd	r31, Z+9	; 0x09
    26fa:	e0 2d       	mov	r30, r0
    26fc:	a0 8d       	ldd	r26, Z+24	; 0x18
    26fe:	b1 8d       	ldd	r27, Z+25	; 0x19
    2700:	c2 89       	ldd	r28, Z+18	; 0x12
    2702:	d3 89       	ldd	r29, Z+19	; 0x13
    2704:	84 89       	ldd	r24, Z+20	; 0x14
    2706:	95 89       	ldd	r25, Z+21	; 0x15
    2708:	9f 83       	std	Y+7, r25	; 0x07
    270a:	8e 83       	std	Y+6, r24	; 0x06
    270c:	c4 89       	ldd	r28, Z+20	; 0x14
    270e:	d5 89       	ldd	r29, Z+21	; 0x15
    2710:	82 89       	ldd	r24, Z+18	; 0x12
    2712:	93 89       	ldd	r25, Z+19	; 0x13
    2714:	9d 83       	std	Y+5, r25	; 0x05
    2716:	8c 83       	std	Y+4, r24	; 0x04
    2718:	11 96       	adiw	r26, 0x01	; 1
    271a:	2d 91       	ld	r18, X+
    271c:	3c 91       	ld	r19, X
    271e:	12 97       	sbiw	r26, 0x02	; 2
    2720:	cf 01       	movw	r24, r30
    2722:	0e 96       	adiw	r24, 0x0e	; 14
    2724:	28 17       	cp	r18, r24
    2726:	39 07       	cpc	r19, r25
    2728:	31 f4       	brne	.+12     	; 0x2736 <xTaskResumeAll+0x76>
    272a:	84 89       	ldd	r24, Z+20	; 0x14
    272c:	95 89       	ldd	r25, Z+21	; 0x15
    272e:	12 96       	adiw	r26, 0x02	; 2
    2730:	9c 93       	st	X, r25
    2732:	8e 93       	st	-X, r24
    2734:	11 97       	sbiw	r26, 0x01	; 1
    2736:	11 8e       	std	Z+25, r1	; 0x19
    2738:	10 8e       	std	Z+24, r1	; 0x18
    273a:	8c 91       	ld	r24, X
    273c:	81 50       	subi	r24, 0x01	; 1
    273e:	8c 93       	st	X, r24
    2740:	a4 85       	ldd	r26, Z+12	; 0x0c
    2742:	b5 85       	ldd	r27, Z+13	; 0x0d
    2744:	c6 81       	ldd	r28, Z+6	; 0x06
    2746:	d7 81       	ldd	r29, Z+7	; 0x07
    2748:	80 85       	ldd	r24, Z+8	; 0x08
    274a:	91 85       	ldd	r25, Z+9	; 0x09
    274c:	9f 83       	std	Y+7, r25	; 0x07
    274e:	8e 83       	std	Y+6, r24	; 0x06
    2750:	c0 85       	ldd	r28, Z+8	; 0x08
    2752:	d1 85       	ldd	r29, Z+9	; 0x09
    2754:	86 81       	ldd	r24, Z+6	; 0x06
    2756:	97 81       	ldd	r25, Z+7	; 0x07
    2758:	9d 83       	std	Y+5, r25	; 0x05
    275a:	8c 83       	std	Y+4, r24	; 0x04
    275c:	11 96       	adiw	r26, 0x01	; 1
    275e:	8d 91       	ld	r24, X+
    2760:	9c 91       	ld	r25, X
    2762:	12 97       	sbiw	r26, 0x02	; 2
    2764:	9f 01       	movw	r18, r30
    2766:	2e 5f       	subi	r18, 0xFE	; 254
    2768:	3f 4f       	sbci	r19, 0xFF	; 255
    276a:	82 17       	cp	r24, r18
    276c:	93 07       	cpc	r25, r19
    276e:	31 f4       	brne	.+12     	; 0x277c <xTaskResumeAll+0xbc>
    2770:	80 85       	ldd	r24, Z+8	; 0x08
    2772:	91 85       	ldd	r25, Z+9	; 0x09
    2774:	12 96       	adiw	r26, 0x02	; 2
    2776:	9c 93       	st	X, r25
    2778:	8e 93       	st	-X, r24
    277a:	11 97       	sbiw	r26, 0x01	; 1
    277c:	15 86       	std	Z+13, r1	; 0x0d
    277e:	14 86       	std	Z+12, r1	; 0x0c
    2780:	8c 91       	ld	r24, X
    2782:	81 50       	subi	r24, 0x01	; 1
    2784:	8c 93       	st	X, r24
    2786:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2788:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <uxTopReadyPriority>
    278c:	8a 17       	cp	r24, r26
    278e:	10 f4       	brcc	.+4      	; 0x2794 <xTaskResumeAll+0xd4>
    2790:	a0 93 1c 17 	sts	0x171C, r26	; 0x80171c <uxTopReadyPriority>
    2794:	8b e0       	ldi	r24, 0x0B	; 11
    2796:	8a 9f       	mul	r24, r26
    2798:	d0 01       	movw	r26, r0
    279a:	11 24       	eor	r1, r1
    279c:	a2 5a       	subi	r26, 0xA2	; 162
    279e:	b8 4e       	sbci	r27, 0xE8	; 232
    27a0:	11 96       	adiw	r26, 0x01	; 1
    27a2:	0d 90       	ld	r0, X+
    27a4:	bc 91       	ld	r27, X
    27a6:	a0 2d       	mov	r26, r0
    27a8:	b7 83       	std	Z+7, r27	; 0x07
    27aa:	a6 83       	std	Z+6, r26	; 0x06
    27ac:	16 96       	adiw	r26, 0x06	; 6
    27ae:	4d 91       	ld	r20, X+
    27b0:	5c 91       	ld	r21, X
    27b2:	17 97       	sbiw	r26, 0x07	; 7
    27b4:	51 87       	std	Z+9, r21	; 0x09
    27b6:	40 87       	std	Z+8, r20	; 0x08
    27b8:	16 96       	adiw	r26, 0x06	; 6
    27ba:	cd 91       	ld	r28, X+
    27bc:	dc 91       	ld	r29, X
    27be:	17 97       	sbiw	r26, 0x07	; 7
    27c0:	3d 83       	std	Y+5, r19	; 0x05
    27c2:	2c 83       	std	Y+4, r18	; 0x04
    27c4:	17 96       	adiw	r26, 0x07	; 7
    27c6:	3c 93       	st	X, r19
    27c8:	2e 93       	st	-X, r18
    27ca:	16 97       	sbiw	r26, 0x06	; 6
    27cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    27ce:	8a 9f       	mul	r24, r26
    27d0:	d0 01       	movw	r26, r0
    27d2:	11 24       	eor	r1, r1
    27d4:	a2 5a       	subi	r26, 0xA2	; 162
    27d6:	b8 4e       	sbci	r27, 0xE8	; 232
    27d8:	b5 87       	std	Z+13, r27	; 0x0d
    27da:	a4 87       	std	Z+12, r26	; 0x0c
    27dc:	8c 91       	ld	r24, X
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	8c 93       	st	X, r24
    27e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    27e4:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    27e8:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    27ec:	5a 96       	adiw	r26, 0x1a	; 26
    27ee:	8c 91       	ld	r24, X
    27f0:	98 17       	cp	r25, r24
    27f2:	30 f0       	brcs	.+12     	; 0x2800 <xTaskResumeAll+0x140>
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <xYieldPending>
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <xTaskResumeAll+0x140>
    27fc:	e0 e0       	ldi	r30, 0x00	; 0
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <xPendingReadyList>
    2804:	81 11       	cpse	r24, r1
    2806:	73 cf       	rjmp	.-282    	; 0x26ee <xTaskResumeAll+0x2e>
    2808:	ef 2b       	or	r30, r31
    280a:	09 f0       	breq	.+2      	; 0x280e <xTaskResumeAll+0x14e>
    280c:	7d db       	rcall	.-2310   	; 0x1f08 <prvResetNextTaskUnblockTime>
    280e:	c0 90 17 17 	lds	r12, 0x1717	; 0x801717 <xPendedTicks>
    2812:	d0 90 18 17 	lds	r13, 0x1718	; 0x801718 <xPendedTicks+0x1>
    2816:	e0 90 19 17 	lds	r14, 0x1719	; 0x801719 <xPendedTicks+0x2>
    281a:	f0 90 1a 17 	lds	r15, 0x171A	; 0x80171a <xPendedTicks+0x3>
    281e:	c1 14       	cp	r12, r1
    2820:	d1 04       	cpc	r13, r1
    2822:	e1 04       	cpc	r14, r1
    2824:	f1 04       	cpc	r15, r1
    2826:	a1 f0       	breq	.+40     	; 0x2850 <xTaskResumeAll+0x190>
    2828:	1f de       	rcall	.-962    	; 0x2468 <xTaskIncrementTick>
    282a:	88 23       	and	r24, r24
    282c:	19 f0       	breq	.+6      	; 0x2834 <xTaskResumeAll+0x174>
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <xYieldPending>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	c8 1a       	sub	r12, r24
    2838:	d1 08       	sbc	r13, r1
    283a:	e1 08       	sbc	r14, r1
    283c:	f1 08       	sbc	r15, r1
    283e:	a1 f7       	brne	.-24     	; 0x2828 <xTaskResumeAll+0x168>
    2840:	10 92 17 17 	sts	0x1717, r1	; 0x801717 <xPendedTicks>
    2844:	10 92 18 17 	sts	0x1718, r1	; 0x801718 <xPendedTicks+0x1>
    2848:	10 92 19 17 	sts	0x1719, r1	; 0x801719 <xPendedTicks+0x2>
    284c:	10 92 1a 17 	sts	0x171A, r1	; 0x80171a <xPendedTicks+0x3>
    2850:	80 91 16 17 	lds	r24, 0x1716	; 0x801716 <xYieldPending>
    2854:	88 23       	and	r24, r24
    2856:	31 f0       	breq	.+12     	; 0x2864 <xTaskResumeAll+0x1a4>
    2858:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vPortYield>
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	03 c0       	rjmp	.+6      	; 0x2866 <xTaskResumeAll+0x1a6>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	01 c0       	rjmp	.+2      	; 0x2866 <xTaskResumeAll+0x1a6>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	0f 90       	pop	r0
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	ff 90       	pop	r15
    2870:	ef 90       	pop	r14
    2872:	df 90       	pop	r13
    2874:	cf 90       	pop	r12
    2876:	08 95       	ret

00002878 <xTaskDelayUntil>:
    2878:	8f 92       	push	r8
    287a:	9f 92       	push	r9
    287c:	af 92       	push	r10
    287e:	bf 92       	push	r11
    2880:	cf 92       	push	r12
    2882:	df 92       	push	r13
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	1f 93       	push	r17
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	ec 01       	movw	r28, r24
    2890:	6a 01       	movw	r12, r20
    2892:	7b 01       	movw	r14, r22
    2894:	d5 dd       	rcall	.-1110   	; 0x2440 <vTaskSuspendAll>
    2896:	80 90 1d 17 	lds	r8, 0x171D	; 0x80171d <xTickCount>
    289a:	90 90 1e 17 	lds	r9, 0x171E	; 0x80171e <xTickCount+0x1>
    289e:	a0 90 1f 17 	lds	r10, 0x171F	; 0x80171f <xTickCount+0x2>
    28a2:	b0 90 20 17 	lds	r11, 0x1720	; 0x801720 <xTickCount+0x3>
    28a6:	88 81       	ld	r24, Y
    28a8:	99 81       	ldd	r25, Y+1	; 0x01
    28aa:	aa 81       	ldd	r26, Y+2	; 0x02
    28ac:	bb 81       	ldd	r27, Y+3	; 0x03
    28ae:	ac 01       	movw	r20, r24
    28b0:	bd 01       	movw	r22, r26
    28b2:	4c 0d       	add	r20, r12
    28b4:	5d 1d       	adc	r21, r13
    28b6:	6e 1d       	adc	r22, r14
    28b8:	7f 1d       	adc	r23, r15
    28ba:	88 16       	cp	r8, r24
    28bc:	99 06       	cpc	r9, r25
    28be:	aa 06       	cpc	r10, r26
    28c0:	bb 06       	cpc	r11, r27
    28c2:	60 f4       	brcc	.+24     	; 0x28dc <xTaskDelayUntil+0x64>
    28c4:	48 17       	cp	r20, r24
    28c6:	59 07       	cpc	r21, r25
    28c8:	6a 07       	cpc	r22, r26
    28ca:	7b 07       	cpc	r23, r27
    28cc:	98 f4       	brcc	.+38     	; 0x28f4 <xTaskDelayUntil+0x7c>
    28ce:	84 16       	cp	r8, r20
    28d0:	95 06       	cpc	r9, r21
    28d2:	a6 06       	cpc	r10, r22
    28d4:	b7 06       	cpc	r11, r23
    28d6:	80 f0       	brcs	.+32     	; 0x28f8 <xTaskDelayUntil+0x80>
    28d8:	10 e0       	ldi	r17, 0x00	; 0
    28da:	13 c0       	rjmp	.+38     	; 0x2902 <xTaskDelayUntil+0x8a>
    28dc:	48 17       	cp	r20, r24
    28de:	59 07       	cpc	r21, r25
    28e0:	6a 07       	cpc	r22, r26
    28e2:	7b 07       	cpc	r23, r27
    28e4:	58 f0       	brcs	.+22     	; 0x28fc <xTaskDelayUntil+0x84>
    28e6:	84 16       	cp	r8, r20
    28e8:	95 06       	cpc	r9, r21
    28ea:	a6 06       	cpc	r10, r22
    28ec:	b7 06       	cpc	r11, r23
    28ee:	40 f0       	brcs	.+16     	; 0x2900 <xTaskDelayUntil+0x88>
    28f0:	10 e0       	ldi	r17, 0x00	; 0
    28f2:	07 c0       	rjmp	.+14     	; 0x2902 <xTaskDelayUntil+0x8a>
    28f4:	10 e0       	ldi	r17, 0x00	; 0
    28f6:	05 c0       	rjmp	.+10     	; 0x2902 <xTaskDelayUntil+0x8a>
    28f8:	11 e0       	ldi	r17, 0x01	; 1
    28fa:	03 c0       	rjmp	.+6      	; 0x2902 <xTaskDelayUntil+0x8a>
    28fc:	11 e0       	ldi	r17, 0x01	; 1
    28fe:	01 c0       	rjmp	.+2      	; 0x2902 <xTaskDelayUntil+0x8a>
    2900:	11 e0       	ldi	r17, 0x01	; 1
    2902:	48 83       	st	Y, r20
    2904:	59 83       	std	Y+1, r21	; 0x01
    2906:	6a 83       	std	Y+2, r22	; 0x02
    2908:	7b 83       	std	Y+3, r23	; 0x03
    290a:	11 23       	and	r17, r17
    290c:	41 f0       	breq	.+16     	; 0x291e <xTaskDelayUntil+0xa6>
    290e:	cb 01       	movw	r24, r22
    2910:	ba 01       	movw	r22, r20
    2912:	68 19       	sub	r22, r8
    2914:	79 09       	sbc	r23, r9
    2916:	8a 09       	sbc	r24, r10
    2918:	9b 09       	sbc	r25, r11
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	6b dc       	rcall	.-1834   	; 0x21f4 <prvAddCurrentTaskToDelayedList>
    291e:	d0 de       	rcall	.-608    	; 0x26c0 <xTaskResumeAll>
    2920:	81 11       	cpse	r24, r1
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <xTaskDelayUntil+0xb0>
    2924:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vPortYield>
    2928:	81 2f       	mov	r24, r17
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	ff 90       	pop	r15
    2932:	ef 90       	pop	r14
    2934:	df 90       	pop	r13
    2936:	cf 90       	pop	r12
    2938:	bf 90       	pop	r11
    293a:	af 90       	pop	r10
    293c:	9f 90       	pop	r9
    293e:	8f 90       	pop	r8
    2940:	08 95       	ret

00002942 <vTaskDelay>:
    2942:	cf 92       	push	r12
    2944:	df 92       	push	r13
    2946:	ef 92       	push	r14
    2948:	ff 92       	push	r15
    294a:	6b 01       	movw	r12, r22
    294c:	7c 01       	movw	r14, r24
    294e:	67 2b       	or	r22, r23
    2950:	68 2b       	or	r22, r24
    2952:	69 2b       	or	r22, r25
    2954:	39 f0       	breq	.+14     	; 0x2964 <vTaskDelay+0x22>
    2956:	74 dd       	rcall	.-1304   	; 0x2440 <vTaskSuspendAll>
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	c7 01       	movw	r24, r14
    295c:	b6 01       	movw	r22, r12
    295e:	4a dc       	rcall	.-1900   	; 0x21f4 <prvAddCurrentTaskToDelayedList>
    2960:	af de       	rcall	.-674    	; 0x26c0 <xTaskResumeAll>
    2962:	01 c0       	rjmp	.+2      	; 0x2966 <vTaskDelay+0x24>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	81 11       	cpse	r24, r1
    2968:	02 c0       	rjmp	.+4      	; 0x296e <vTaskDelay+0x2c>
    296a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vPortYield>
    296e:	ff 90       	pop	r15
    2970:	ef 90       	pop	r14
    2972:	df 90       	pop	r13
    2974:	cf 90       	pop	r12
    2976:	08 95       	ret

00002978 <vTaskSwitchContext>:
    2978:	80 91 0d 17 	lds	r24, 0x170D	; 0x80170d <uxSchedulerSuspended>
    297c:	88 23       	and	r24, r24
    297e:	21 f0       	breq	.+8      	; 0x2988 <vTaskSwitchContext+0x10>
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <xYieldPending>
    2986:	08 95       	ret
    2988:	10 92 16 17 	sts	0x1716, r1	; 0x801716 <xYieldPending>
    298c:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2990:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2994:	20 81       	ld	r18, Z
    2996:	31 81       	ldd	r19, Z+1	; 0x01
    2998:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    299c:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    29a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    29a2:	94 8d       	ldd	r25, Z+28	; 0x1c
    29a4:	82 17       	cp	r24, r18
    29a6:	93 07       	cpc	r25, r19
    29a8:	60 f0       	brcs	.+24     	; 0x29c2 <vTaskSwitchContext+0x4a>
    29aa:	60 91 cc 17 	lds	r22, 0x17CC	; 0x8017cc <pxCurrentTCB>
    29ae:	70 91 cd 17 	lds	r23, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    29b2:	63 5e       	subi	r22, 0xE3	; 227
    29b4:	7f 4f       	sbci	r23, 0xFF	; 255
    29b6:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    29ba:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    29be:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <vApplicationStackOverflowHook>
    29c2:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <uxTopReadyPriority>
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <vTaskSwitchContext+0x52>
    29c8:	81 50       	subi	r24, 0x01	; 1
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	9b e0       	ldi	r25, 0x0B	; 11
    29d0:	92 9f       	mul	r25, r18
    29d2:	f0 01       	movw	r30, r0
    29d4:	93 9f       	mul	r25, r19
    29d6:	f0 0d       	add	r31, r0
    29d8:	11 24       	eor	r1, r1
    29da:	e2 5a       	subi	r30, 0xA2	; 162
    29dc:	f8 4e       	sbci	r31, 0xE8	; 232
    29de:	90 81       	ld	r25, Z
    29e0:	99 23       	and	r25, r25
    29e2:	91 f3       	breq	.-28     	; 0x29c8 <vTaskSwitchContext+0x50>
    29e4:	9b e0       	ldi	r25, 0x0B	; 11
    29e6:	92 9f       	mul	r25, r18
    29e8:	a0 01       	movw	r20, r0
    29ea:	93 9f       	mul	r25, r19
    29ec:	50 0d       	add	r21, r0
    29ee:	11 24       	eor	r1, r1
    29f0:	df 01       	movw	r26, r30
    29f2:	01 80       	ldd	r0, Z+1	; 0x01
    29f4:	f2 81       	ldd	r31, Z+2	; 0x02
    29f6:	e0 2d       	mov	r30, r0
    29f8:	04 80       	ldd	r0, Z+4	; 0x04
    29fa:	f5 81       	ldd	r31, Z+5	; 0x05
    29fc:	e0 2d       	mov	r30, r0
    29fe:	12 96       	adiw	r26, 0x02	; 2
    2a00:	fc 93       	st	X, r31
    2a02:	ee 93       	st	-X, r30
    2a04:	11 97       	sbiw	r26, 0x01	; 1
    2a06:	4f 59       	subi	r20, 0x9F	; 159
    2a08:	58 4e       	sbci	r21, 0xE8	; 232
    2a0a:	e4 17       	cp	r30, r20
    2a0c:	f5 07       	cpc	r31, r21
    2a0e:	29 f4       	brne	.+10     	; 0x2a1a <vTaskSwitchContext+0xa2>
    2a10:	44 81       	ldd	r20, Z+4	; 0x04
    2a12:	55 81       	ldd	r21, Z+5	; 0x05
    2a14:	fd 01       	movw	r30, r26
    2a16:	52 83       	std	Z+2, r21	; 0x02
    2a18:	41 83       	std	Z+1, r20	; 0x01
    2a1a:	9b e0       	ldi	r25, 0x0B	; 11
    2a1c:	92 9f       	mul	r25, r18
    2a1e:	f0 01       	movw	r30, r0
    2a20:	93 9f       	mul	r25, r19
    2a22:	f0 0d       	add	r31, r0
    2a24:	11 24       	eor	r1, r1
    2a26:	e2 5a       	subi	r30, 0xA2	; 162
    2a28:	f8 4e       	sbci	r31, 0xE8	; 232
    2a2a:	01 80       	ldd	r0, Z+1	; 0x01
    2a2c:	f2 81       	ldd	r31, Z+2	; 0x02
    2a2e:	e0 2d       	mov	r30, r0
    2a30:	20 85       	ldd	r18, Z+8	; 0x08
    2a32:	31 85       	ldd	r19, Z+9	; 0x09
    2a34:	30 93 cd 17 	sts	0x17CD, r19	; 0x8017cd <pxCurrentTCB+0x1>
    2a38:	20 93 cc 17 	sts	0x17CC, r18	; 0x8017cc <pxCurrentTCB>
    2a3c:	80 93 1c 17 	sts	0x171C, r24	; 0x80171c <uxTopReadyPriority>
    2a40:	08 95       	ret

00002a42 <vTaskPlaceOnEventList>:
    2a42:	cf 92       	push	r12
    2a44:	df 92       	push	r13
    2a46:	ef 92       	push	r14
    2a48:	ff 92       	push	r15
    2a4a:	6a 01       	movw	r12, r20
    2a4c:	7b 01       	movw	r14, r22
    2a4e:	60 91 cc 17 	lds	r22, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2a52:	70 91 cd 17 	lds	r23, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2a56:	62 5f       	subi	r22, 0xF2	; 242
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	0e 94 3b 07 	call	0xe76	; 0xe76 <vListInsert>
    2a5e:	41 e0       	ldi	r20, 0x01	; 1
    2a60:	c7 01       	movw	r24, r14
    2a62:	b6 01       	movw	r22, r12
    2a64:	c7 db       	rcall	.-2162   	; 0x21f4 <prvAddCurrentTaskToDelayedList>
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	cf 90       	pop	r12
    2a6e:	08 95       	ret

00002a70 <vTaskPlaceOnUnorderedEventList>:
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	fc 01       	movw	r30, r24
    2a7a:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2a7e:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2a82:	70 68       	ori	r23, 0x80	; 128
    2a84:	1e 96       	adiw	r26, 0x0e	; 14
    2a86:	4d 93       	st	X+, r20
    2a88:	5d 93       	st	X+, r21
    2a8a:	6d 93       	st	X+, r22
    2a8c:	7c 93       	st	X, r23
    2a8e:	51 97       	sbiw	r26, 0x11	; 17
    2a90:	a1 81       	ldd	r26, Z+1	; 0x01
    2a92:	b2 81       	ldd	r27, Z+2	; 0x02
    2a94:	c0 91 cc 17 	lds	r28, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2a98:	d0 91 cd 17 	lds	r29, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2a9c:	bb 8b       	std	Y+19, r27	; 0x13
    2a9e:	aa 8b       	std	Y+18, r26	; 0x12
    2aa0:	c0 91 cc 17 	lds	r28, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2aa4:	d0 91 cd 17 	lds	r29, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2aa8:	16 96       	adiw	r26, 0x06	; 6
    2aaa:	8d 91       	ld	r24, X+
    2aac:	9c 91       	ld	r25, X
    2aae:	17 97       	sbiw	r26, 0x07	; 7
    2ab0:	9d 8b       	std	Y+21, r25	; 0x15
    2ab2:	8c 8b       	std	Y+20, r24	; 0x14
    2ab4:	16 96       	adiw	r26, 0x06	; 6
    2ab6:	cd 91       	ld	r28, X+
    2ab8:	dc 91       	ld	r29, X
    2aba:	17 97       	sbiw	r26, 0x07	; 7
    2abc:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2ac0:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2ac4:	0e 96       	adiw	r24, 0x0e	; 14
    2ac6:	9d 83       	std	Y+5, r25	; 0x05
    2ac8:	8c 83       	std	Y+4, r24	; 0x04
    2aca:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2ace:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2ad2:	0e 96       	adiw	r24, 0x0e	; 14
    2ad4:	17 96       	adiw	r26, 0x07	; 7
    2ad6:	9c 93       	st	X, r25
    2ad8:	8e 93       	st	-X, r24
    2ada:	16 97       	sbiw	r26, 0x06	; 6
    2adc:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2ae0:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2ae4:	59 96       	adiw	r26, 0x19	; 25
    2ae6:	fc 93       	st	X, r31
    2ae8:	ee 93       	st	-X, r30
    2aea:	58 97       	sbiw	r26, 0x18	; 24
    2aec:	80 81       	ld	r24, Z
    2aee:	8f 5f       	subi	r24, 0xFF	; 255
    2af0:	80 83       	st	Z, r24
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	c9 01       	movw	r24, r18
    2af6:	b8 01       	movw	r22, r16
    2af8:	7d db       	rcall	.-2310   	; 0x21f4 <prvAddCurrentTaskToDelayedList>
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <vTaskPlaceOnEventListRestricted>:
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	fc 01       	movw	r30, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	ba 01       	movw	r22, r20
    2b0e:	a1 81       	ldd	r26, Z+1	; 0x01
    2b10:	b2 81       	ldd	r27, Z+2	; 0x02
    2b12:	c0 91 cc 17 	lds	r28, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2b16:	d0 91 cd 17 	lds	r29, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2b1a:	bb 8b       	std	Y+19, r27	; 0x13
    2b1c:	aa 8b       	std	Y+18, r26	; 0x12
    2b1e:	c0 91 cc 17 	lds	r28, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2b22:	d0 91 cd 17 	lds	r29, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2b26:	16 96       	adiw	r26, 0x06	; 6
    2b28:	4d 91       	ld	r20, X+
    2b2a:	5c 91       	ld	r21, X
    2b2c:	17 97       	sbiw	r26, 0x07	; 7
    2b2e:	5d 8b       	std	Y+21, r21	; 0x15
    2b30:	4c 8b       	std	Y+20, r20	; 0x14
    2b32:	16 96       	adiw	r26, 0x06	; 6
    2b34:	cd 91       	ld	r28, X+
    2b36:	dc 91       	ld	r29, X
    2b38:	17 97       	sbiw	r26, 0x07	; 7
    2b3a:	40 91 cc 17 	lds	r20, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2b3e:	50 91 cd 17 	lds	r21, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2b42:	42 5f       	subi	r20, 0xF2	; 242
    2b44:	5f 4f       	sbci	r21, 0xFF	; 255
    2b46:	5d 83       	std	Y+5, r21	; 0x05
    2b48:	4c 83       	std	Y+4, r20	; 0x04
    2b4a:	40 91 cc 17 	lds	r20, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2b4e:	50 91 cd 17 	lds	r21, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2b52:	42 5f       	subi	r20, 0xF2	; 242
    2b54:	5f 4f       	sbci	r21, 0xFF	; 255
    2b56:	17 96       	adiw	r26, 0x07	; 7
    2b58:	5c 93       	st	X, r21
    2b5a:	4e 93       	st	-X, r20
    2b5c:	16 97       	sbiw	r26, 0x06	; 6
    2b5e:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2b62:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2b66:	59 96       	adiw	r26, 0x19	; 25
    2b68:	fc 93       	st	X, r31
    2b6a:	ee 93       	st	-X, r30
    2b6c:	58 97       	sbiw	r26, 0x18	; 24
    2b6e:	30 81       	ld	r19, Z
    2b70:	3f 5f       	subi	r19, 0xFF	; 255
    2b72:	30 83       	st	Z, r19
    2b74:	22 23       	and	r18, r18
    2b76:	19 f0       	breq	.+6      	; 0x2b7e <vTaskPlaceOnEventListRestricted+0x7a>
    2b78:	6f ef       	ldi	r22, 0xFF	; 255
    2b7a:	7f ef       	ldi	r23, 0xFF	; 255
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	42 2f       	mov	r20, r18
    2b80:	39 db       	rcall	.-2446   	; 0x21f4 <prvAddCurrentTaskToDelayedList>
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	08 95       	ret

00002b88 <xTaskRemoveFromEventList>:
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	17 96       	adiw	r26, 0x07	; 7
    2b90:	ed 91       	ld	r30, X+
    2b92:	fc 91       	ld	r31, X
    2b94:	18 97       	sbiw	r26, 0x08	; 8
    2b96:	00 84       	ldd	r0, Z+8	; 0x08
    2b98:	f1 85       	ldd	r31, Z+9	; 0x09
    2b9a:	e0 2d       	mov	r30, r0
    2b9c:	a0 8d       	ldd	r26, Z+24	; 0x18
    2b9e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2ba0:	c2 89       	ldd	r28, Z+18	; 0x12
    2ba2:	d3 89       	ldd	r29, Z+19	; 0x13
    2ba4:	84 89       	ldd	r24, Z+20	; 0x14
    2ba6:	95 89       	ldd	r25, Z+21	; 0x15
    2ba8:	9f 83       	std	Y+7, r25	; 0x07
    2baa:	8e 83       	std	Y+6, r24	; 0x06
    2bac:	c4 89       	ldd	r28, Z+20	; 0x14
    2bae:	d5 89       	ldd	r29, Z+21	; 0x15
    2bb0:	82 89       	ldd	r24, Z+18	; 0x12
    2bb2:	93 89       	ldd	r25, Z+19	; 0x13
    2bb4:	9d 83       	std	Y+5, r25	; 0x05
    2bb6:	8c 83       	std	Y+4, r24	; 0x04
    2bb8:	11 96       	adiw	r26, 0x01	; 1
    2bba:	8d 91       	ld	r24, X+
    2bbc:	9c 91       	ld	r25, X
    2bbe:	12 97       	sbiw	r26, 0x02	; 2
    2bc0:	9f 01       	movw	r18, r30
    2bc2:	22 5f       	subi	r18, 0xF2	; 242
    2bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc6:	82 17       	cp	r24, r18
    2bc8:	93 07       	cpc	r25, r19
    2bca:	31 f4       	brne	.+12     	; 0x2bd8 <xTaskRemoveFromEventList+0x50>
    2bcc:	84 89       	ldd	r24, Z+20	; 0x14
    2bce:	95 89       	ldd	r25, Z+21	; 0x15
    2bd0:	12 96       	adiw	r26, 0x02	; 2
    2bd2:	9c 93       	st	X, r25
    2bd4:	8e 93       	st	-X, r24
    2bd6:	11 97       	sbiw	r26, 0x01	; 1
    2bd8:	11 8e       	std	Z+25, r1	; 0x19
    2bda:	10 8e       	std	Z+24, r1	; 0x18
    2bdc:	8c 91       	ld	r24, X
    2bde:	81 50       	subi	r24, 0x01	; 1
    2be0:	8c 93       	st	X, r24
    2be2:	80 91 0d 17 	lds	r24, 0x170D	; 0x80170d <uxSchedulerSuspended>
    2be6:	81 11       	cpse	r24, r1
    2be8:	52 c0       	rjmp	.+164    	; 0x2c8e <xTaskRemoveFromEventList+0x106>
    2bea:	a4 85       	ldd	r26, Z+12	; 0x0c
    2bec:	b5 85       	ldd	r27, Z+13	; 0x0d
    2bee:	c6 81       	ldd	r28, Z+6	; 0x06
    2bf0:	d7 81       	ldd	r29, Z+7	; 0x07
    2bf2:	80 85       	ldd	r24, Z+8	; 0x08
    2bf4:	91 85       	ldd	r25, Z+9	; 0x09
    2bf6:	9f 83       	std	Y+7, r25	; 0x07
    2bf8:	8e 83       	std	Y+6, r24	; 0x06
    2bfa:	c0 85       	ldd	r28, Z+8	; 0x08
    2bfc:	d1 85       	ldd	r29, Z+9	; 0x09
    2bfe:	86 81       	ldd	r24, Z+6	; 0x06
    2c00:	97 81       	ldd	r25, Z+7	; 0x07
    2c02:	9d 83       	std	Y+5, r25	; 0x05
    2c04:	8c 83       	std	Y+4, r24	; 0x04
    2c06:	11 96       	adiw	r26, 0x01	; 1
    2c08:	8d 91       	ld	r24, X+
    2c0a:	9c 91       	ld	r25, X
    2c0c:	12 97       	sbiw	r26, 0x02	; 2
    2c0e:	9f 01       	movw	r18, r30
    2c10:	2e 5f       	subi	r18, 0xFE	; 254
    2c12:	3f 4f       	sbci	r19, 0xFF	; 255
    2c14:	82 17       	cp	r24, r18
    2c16:	93 07       	cpc	r25, r19
    2c18:	31 f4       	brne	.+12     	; 0x2c26 <xTaskRemoveFromEventList+0x9e>
    2c1a:	80 85       	ldd	r24, Z+8	; 0x08
    2c1c:	91 85       	ldd	r25, Z+9	; 0x09
    2c1e:	12 96       	adiw	r26, 0x02	; 2
    2c20:	9c 93       	st	X, r25
    2c22:	8e 93       	st	-X, r24
    2c24:	11 97       	sbiw	r26, 0x01	; 1
    2c26:	15 86       	std	Z+13, r1	; 0x0d
    2c28:	14 86       	std	Z+12, r1	; 0x0c
    2c2a:	8c 91       	ld	r24, X
    2c2c:	81 50       	subi	r24, 0x01	; 1
    2c2e:	8c 93       	st	X, r24
    2c30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c32:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <uxTopReadyPriority>
    2c36:	8a 17       	cp	r24, r26
    2c38:	10 f4       	brcc	.+4      	; 0x2c3e <xTaskRemoveFromEventList+0xb6>
    2c3a:	a0 93 1c 17 	sts	0x171C, r26	; 0x80171c <uxTopReadyPriority>
    2c3e:	8b e0       	ldi	r24, 0x0B	; 11
    2c40:	8a 9f       	mul	r24, r26
    2c42:	d0 01       	movw	r26, r0
    2c44:	11 24       	eor	r1, r1
    2c46:	a2 5a       	subi	r26, 0xA2	; 162
    2c48:	b8 4e       	sbci	r27, 0xE8	; 232
    2c4a:	11 96       	adiw	r26, 0x01	; 1
    2c4c:	0d 90       	ld	r0, X+
    2c4e:	bc 91       	ld	r27, X
    2c50:	a0 2d       	mov	r26, r0
    2c52:	b7 83       	std	Z+7, r27	; 0x07
    2c54:	a6 83       	std	Z+6, r26	; 0x06
    2c56:	16 96       	adiw	r26, 0x06	; 6
    2c58:	4d 91       	ld	r20, X+
    2c5a:	5c 91       	ld	r21, X
    2c5c:	17 97       	sbiw	r26, 0x07	; 7
    2c5e:	51 87       	std	Z+9, r21	; 0x09
    2c60:	40 87       	std	Z+8, r20	; 0x08
    2c62:	16 96       	adiw	r26, 0x06	; 6
    2c64:	cd 91       	ld	r28, X+
    2c66:	dc 91       	ld	r29, X
    2c68:	17 97       	sbiw	r26, 0x07	; 7
    2c6a:	3d 83       	std	Y+5, r19	; 0x05
    2c6c:	2c 83       	std	Y+4, r18	; 0x04
    2c6e:	17 96       	adiw	r26, 0x07	; 7
    2c70:	3c 93       	st	X, r19
    2c72:	2e 93       	st	-X, r18
    2c74:	16 97       	sbiw	r26, 0x06	; 6
    2c76:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c78:	8a 9f       	mul	r24, r26
    2c7a:	d0 01       	movw	r26, r0
    2c7c:	11 24       	eor	r1, r1
    2c7e:	a2 5a       	subi	r26, 0xA2	; 162
    2c80:	b8 4e       	sbci	r27, 0xE8	; 232
    2c82:	b5 87       	std	Z+13, r27	; 0x0d
    2c84:	a4 87       	std	Z+12, r26	; 0x0c
    2c86:	8c 91       	ld	r24, X
    2c88:	8f 5f       	subi	r24, 0xFF	; 255
    2c8a:	8c 93       	st	X, r24
    2c8c:	1c c0       	rjmp	.+56     	; 0x2cc6 <xTaskRemoveFromEventList+0x13e>
    2c8e:	49 e3       	ldi	r20, 0x39	; 57
    2c90:	57 e1       	ldi	r21, 0x17	; 23
    2c92:	da 01       	movw	r26, r20
    2c94:	11 96       	adiw	r26, 0x01	; 1
    2c96:	cd 91       	ld	r28, X+
    2c98:	dc 91       	ld	r29, X
    2c9a:	12 97       	sbiw	r26, 0x02	; 2
    2c9c:	d3 8b       	std	Z+19, r29	; 0x13
    2c9e:	c2 8b       	std	Z+18, r28	; 0x12
    2ca0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca4:	95 8b       	std	Z+21, r25	; 0x15
    2ca6:	84 8b       	std	Z+20, r24	; 0x14
    2ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    2caa:	9f 81       	ldd	r25, Y+7	; 0x07
    2cac:	dc 01       	movw	r26, r24
    2cae:	15 96       	adiw	r26, 0x05	; 5
    2cb0:	3c 93       	st	X, r19
    2cb2:	2e 93       	st	-X, r18
    2cb4:	14 97       	sbiw	r26, 0x04	; 4
    2cb6:	3f 83       	std	Y+7, r19	; 0x07
    2cb8:	2e 83       	std	Y+6, r18	; 0x06
    2cba:	51 8f       	std	Z+25, r21	; 0x19
    2cbc:	40 8f       	std	Z+24, r20	; 0x18
    2cbe:	da 01       	movw	r26, r20
    2cc0:	8c 91       	ld	r24, X
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	8c 93       	st	X, r24
    2cc6:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cc8:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2ccc:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2cd0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cd2:	89 17       	cp	r24, r25
    2cd4:	20 f4       	brcc	.+8      	; 0x2cde <xTaskRemoveFromEventList+0x156>
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <xYieldPending>
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <xTaskRemoveFromEventList+0x158>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	08 95       	ret

00002ce6 <vTaskRemoveFromUnorderedEventList>:
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	dc 01       	movw	r26, r24
    2cec:	70 68       	ori	r23, 0x80	; 128
    2cee:	4d 93       	st	X+, r20
    2cf0:	5d 93       	st	X+, r21
    2cf2:	6d 93       	st	X+, r22
    2cf4:	7c 93       	st	X, r23
    2cf6:	13 97       	sbiw	r26, 0x03	; 3
    2cf8:	18 96       	adiw	r26, 0x08	; 8
    2cfa:	ed 91       	ld	r30, X+
    2cfc:	fc 91       	ld	r31, X
    2cfe:	19 97       	sbiw	r26, 0x09	; 9
    2d00:	1a 96       	adiw	r26, 0x0a	; 10
    2d02:	4d 91       	ld	r20, X+
    2d04:	5c 91       	ld	r21, X
    2d06:	1b 97       	sbiw	r26, 0x0b	; 11
    2d08:	14 96       	adiw	r26, 0x04	; 4
    2d0a:	8d 91       	ld	r24, X+
    2d0c:	9c 91       	ld	r25, X
    2d0e:	15 97       	sbiw	r26, 0x05	; 5
    2d10:	16 96       	adiw	r26, 0x06	; 6
    2d12:	2d 91       	ld	r18, X+
    2d14:	3c 91       	ld	r19, X
    2d16:	17 97       	sbiw	r26, 0x07	; 7
    2d18:	ec 01       	movw	r28, r24
    2d1a:	3f 83       	std	Y+7, r19	; 0x07
    2d1c:	2e 83       	std	Y+6, r18	; 0x06
    2d1e:	16 96       	adiw	r26, 0x06	; 6
    2d20:	8d 91       	ld	r24, X+
    2d22:	9c 91       	ld	r25, X
    2d24:	17 97       	sbiw	r26, 0x07	; 7
    2d26:	14 96       	adiw	r26, 0x04	; 4
    2d28:	2d 91       	ld	r18, X+
    2d2a:	3c 91       	ld	r19, X
    2d2c:	15 97       	sbiw	r26, 0x05	; 5
    2d2e:	ec 01       	movw	r28, r24
    2d30:	3d 83       	std	Y+5, r19	; 0x05
    2d32:	2c 83       	std	Y+4, r18	; 0x04
    2d34:	ea 01       	movw	r28, r20
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3a:	a8 17       	cp	r26, r24
    2d3c:	b9 07       	cpc	r27, r25
    2d3e:	31 f4       	brne	.+12     	; 0x2d4c <vTaskRemoveFromUnorderedEventList+0x66>
    2d40:	16 96       	adiw	r26, 0x06	; 6
    2d42:	8d 91       	ld	r24, X+
    2d44:	9c 91       	ld	r25, X
    2d46:	17 97       	sbiw	r26, 0x07	; 7
    2d48:	9a 83       	std	Y+2, r25	; 0x02
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	1b 96       	adiw	r26, 0x0b	; 11
    2d4e:	1c 92       	st	X, r1
    2d50:	1e 92       	st	-X, r1
    2d52:	1a 97       	sbiw	r26, 0x0a	; 10
    2d54:	da 01       	movw	r26, r20
    2d56:	8c 91       	ld	r24, X
    2d58:	81 50       	subi	r24, 0x01	; 1
    2d5a:	8c 93       	st	X, r24
    2d5c:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d5e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d60:	c6 81       	ldd	r28, Z+6	; 0x06
    2d62:	d7 81       	ldd	r29, Z+7	; 0x07
    2d64:	80 85       	ldd	r24, Z+8	; 0x08
    2d66:	91 85       	ldd	r25, Z+9	; 0x09
    2d68:	9f 83       	std	Y+7, r25	; 0x07
    2d6a:	8e 83       	std	Y+6, r24	; 0x06
    2d6c:	c0 85       	ldd	r28, Z+8	; 0x08
    2d6e:	d1 85       	ldd	r29, Z+9	; 0x09
    2d70:	86 81       	ldd	r24, Z+6	; 0x06
    2d72:	97 81       	ldd	r25, Z+7	; 0x07
    2d74:	9d 83       	std	Y+5, r25	; 0x05
    2d76:	8c 83       	std	Y+4, r24	; 0x04
    2d78:	11 96       	adiw	r26, 0x01	; 1
    2d7a:	8d 91       	ld	r24, X+
    2d7c:	9c 91       	ld	r25, X
    2d7e:	12 97       	sbiw	r26, 0x02	; 2
    2d80:	9f 01       	movw	r18, r30
    2d82:	2e 5f       	subi	r18, 0xFE	; 254
    2d84:	3f 4f       	sbci	r19, 0xFF	; 255
    2d86:	82 17       	cp	r24, r18
    2d88:	93 07       	cpc	r25, r19
    2d8a:	31 f4       	brne	.+12     	; 0x2d98 <vTaskRemoveFromUnorderedEventList+0xb2>
    2d8c:	80 85       	ldd	r24, Z+8	; 0x08
    2d8e:	91 85       	ldd	r25, Z+9	; 0x09
    2d90:	12 96       	adiw	r26, 0x02	; 2
    2d92:	9c 93       	st	X, r25
    2d94:	8e 93       	st	-X, r24
    2d96:	11 97       	sbiw	r26, 0x01	; 1
    2d98:	15 86       	std	Z+13, r1	; 0x0d
    2d9a:	14 86       	std	Z+12, r1	; 0x0c
    2d9c:	8c 91       	ld	r24, X
    2d9e:	81 50       	subi	r24, 0x01	; 1
    2da0:	8c 93       	st	X, r24
    2da2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2da4:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <uxTopReadyPriority>
    2da8:	8a 17       	cp	r24, r26
    2daa:	10 f4       	brcc	.+4      	; 0x2db0 <vTaskRemoveFromUnorderedEventList+0xca>
    2dac:	a0 93 1c 17 	sts	0x171C, r26	; 0x80171c <uxTopReadyPriority>
    2db0:	8b e0       	ldi	r24, 0x0B	; 11
    2db2:	8a 9f       	mul	r24, r26
    2db4:	d0 01       	movw	r26, r0
    2db6:	11 24       	eor	r1, r1
    2db8:	a2 5a       	subi	r26, 0xA2	; 162
    2dba:	b8 4e       	sbci	r27, 0xE8	; 232
    2dbc:	11 96       	adiw	r26, 0x01	; 1
    2dbe:	0d 90       	ld	r0, X+
    2dc0:	bc 91       	ld	r27, X
    2dc2:	a0 2d       	mov	r26, r0
    2dc4:	b7 83       	std	Z+7, r27	; 0x07
    2dc6:	a6 83       	std	Z+6, r26	; 0x06
    2dc8:	16 96       	adiw	r26, 0x06	; 6
    2dca:	4d 91       	ld	r20, X+
    2dcc:	5c 91       	ld	r21, X
    2dce:	17 97       	sbiw	r26, 0x07	; 7
    2dd0:	51 87       	std	Z+9, r21	; 0x09
    2dd2:	40 87       	std	Z+8, r20	; 0x08
    2dd4:	16 96       	adiw	r26, 0x06	; 6
    2dd6:	cd 91       	ld	r28, X+
    2dd8:	dc 91       	ld	r29, X
    2dda:	17 97       	sbiw	r26, 0x07	; 7
    2ddc:	3d 83       	std	Y+5, r19	; 0x05
    2dde:	2c 83       	std	Y+4, r18	; 0x04
    2de0:	17 96       	adiw	r26, 0x07	; 7
    2de2:	3c 93       	st	X, r19
    2de4:	2e 93       	st	-X, r18
    2de6:	16 97       	sbiw	r26, 0x06	; 6
    2de8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2dea:	8a 9f       	mul	r24, r26
    2dec:	d0 01       	movw	r26, r0
    2dee:	11 24       	eor	r1, r1
    2df0:	a2 5a       	subi	r26, 0xA2	; 162
    2df2:	b8 4e       	sbci	r27, 0xE8	; 232
    2df4:	b5 87       	std	Z+13, r27	; 0x0d
    2df6:	a4 87       	std	Z+12, r26	; 0x0c
    2df8:	8c 91       	ld	r24, X
    2dfa:	8f 5f       	subi	r24, 0xFF	; 255
    2dfc:	8c 93       	st	X, r24
    2dfe:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e00:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2e04:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2e08:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e0a:	89 17       	cp	r24, r25
    2e0c:	18 f4       	brcc	.+6      	; 0x2e14 <vTaskRemoveFromUnorderedEventList+0x12e>
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <xYieldPending>
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	08 95       	ret

00002e1a <vTaskSetTimeOutState>:
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	0f 92       	push	r0
    2e20:	20 91 15 17 	lds	r18, 0x1715	; 0x801715 <xNumOfOverflows>
    2e24:	fc 01       	movw	r30, r24
    2e26:	20 83       	st	Z, r18
    2e28:	40 91 1d 17 	lds	r20, 0x171D	; 0x80171d <xTickCount>
    2e2c:	50 91 1e 17 	lds	r21, 0x171E	; 0x80171e <xTickCount+0x1>
    2e30:	60 91 1f 17 	lds	r22, 0x171F	; 0x80171f <xTickCount+0x2>
    2e34:	70 91 20 17 	lds	r23, 0x1720	; 0x801720 <xTickCount+0x3>
    2e38:	41 83       	std	Z+1, r20	; 0x01
    2e3a:	52 83       	std	Z+2, r21	; 0x02
    2e3c:	63 83       	std	Z+3, r22	; 0x03
    2e3e:	74 83       	std	Z+4, r23	; 0x04
    2e40:	0f 90       	pop	r0
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	08 95       	ret

00002e46 <vTaskInternalSetTimeOutState>:
    2e46:	20 91 15 17 	lds	r18, 0x1715	; 0x801715 <xNumOfOverflows>
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	20 83       	st	Z, r18
    2e4e:	40 91 1d 17 	lds	r20, 0x171D	; 0x80171d <xTickCount>
    2e52:	50 91 1e 17 	lds	r21, 0x171E	; 0x80171e <xTickCount+0x1>
    2e56:	60 91 1f 17 	lds	r22, 0x171F	; 0x80171f <xTickCount+0x2>
    2e5a:	70 91 20 17 	lds	r23, 0x1720	; 0x801720 <xTickCount+0x3>
    2e5e:	41 83       	std	Z+1, r20	; 0x01
    2e60:	52 83       	std	Z+2, r21	; 0x02
    2e62:	63 83       	std	Z+3, r22	; 0x03
    2e64:	74 83       	std	Z+4, r23	; 0x04
    2e66:	08 95       	ret

00002e68 <xTaskCheckForTimeOut>:
    2e68:	8f 92       	push	r8
    2e6a:	9f 92       	push	r9
    2e6c:	af 92       	push	r10
    2e6e:	bf 92       	push	r11
    2e70:	cf 92       	push	r12
    2e72:	df 92       	push	r13
    2e74:	ef 92       	push	r14
    2e76:	ff 92       	push	r15
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	fb 01       	movw	r30, r22
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	0f 92       	push	r0
    2e88:	c0 90 1d 17 	lds	r12, 0x171D	; 0x80171d <xTickCount>
    2e8c:	d0 90 1e 17 	lds	r13, 0x171E	; 0x80171e <xTickCount+0x1>
    2e90:	e0 90 1f 17 	lds	r14, 0x171F	; 0x80171f <xTickCount+0x2>
    2e94:	f0 90 20 17 	lds	r15, 0x1720	; 0x801720 <xTickCount+0x3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	11 96       	adiw	r26, 0x01	; 1
    2e9c:	0d 91       	ld	r16, X+
    2e9e:	1d 91       	ld	r17, X+
    2ea0:	2d 91       	ld	r18, X+
    2ea2:	3c 91       	ld	r19, X
    2ea4:	14 97       	sbiw	r26, 0x04	; 4
    2ea6:	46 01       	movw	r8, r12
    2ea8:	57 01       	movw	r10, r14
    2eaa:	80 1a       	sub	r8, r16
    2eac:	91 0a       	sbc	r9, r17
    2eae:	a2 0a       	sbc	r10, r18
    2eb0:	b3 0a       	sbc	r11, r19
    2eb2:	40 81       	ld	r20, Z
    2eb4:	51 81       	ldd	r21, Z+1	; 0x01
    2eb6:	62 81       	ldd	r22, Z+2	; 0x02
    2eb8:	73 81       	ldd	r23, Z+3	; 0x03
    2eba:	4f 3f       	cpi	r20, 0xFF	; 255
    2ebc:	bf ef       	ldi	r27, 0xFF	; 255
    2ebe:	5b 07       	cpc	r21, r27
    2ec0:	6b 07       	cpc	r22, r27
    2ec2:	7b 07       	cpc	r23, r27
    2ec4:	39 f1       	breq	.+78     	; 0x2f14 <xTaskCheckForTimeOut+0xac>
    2ec6:	ec 01       	movw	r28, r24
    2ec8:	b8 81       	ld	r27, Y
    2eca:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <xNumOfOverflows>
    2ece:	ba 17       	cp	r27, r26
    2ed0:	59 f0       	breq	.+22     	; 0x2ee8 <xTaskCheckForTimeOut+0x80>
    2ed2:	c0 16       	cp	r12, r16
    2ed4:	d1 06       	cpc	r13, r17
    2ed6:	e2 06       	cpc	r14, r18
    2ed8:	f3 06       	cpc	r15, r19
    2eda:	30 f0       	brcs	.+12     	; 0x2ee8 <xTaskCheckForTimeOut+0x80>
    2edc:	10 82       	st	Z, r1
    2ede:	11 82       	std	Z+1, r1	; 0x01
    2ee0:	12 82       	std	Z+2, r1	; 0x02
    2ee2:	13 82       	std	Z+3, r1	; 0x03
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	17 c0       	rjmp	.+46     	; 0x2f16 <xTaskCheckForTimeOut+0xae>
    2ee8:	84 16       	cp	r8, r20
    2eea:	95 06       	cpc	r9, r21
    2eec:	a6 06       	cpc	r10, r22
    2eee:	b7 06       	cpc	r11, r23
    2ef0:	58 f4       	brcc	.+22     	; 0x2f08 <xTaskCheckForTimeOut+0xa0>
    2ef2:	48 19       	sub	r20, r8
    2ef4:	59 09       	sbc	r21, r9
    2ef6:	6a 09       	sbc	r22, r10
    2ef8:	7b 09       	sbc	r23, r11
    2efa:	40 83       	st	Z, r20
    2efc:	51 83       	std	Z+1, r21	; 0x01
    2efe:	62 83       	std	Z+2, r22	; 0x02
    2f00:	73 83       	std	Z+3, r23	; 0x03
    2f02:	a1 df       	rcall	.-190    	; 0x2e46 <vTaskInternalSetTimeOutState>
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	07 c0       	rjmp	.+14     	; 0x2f16 <xTaskCheckForTimeOut+0xae>
    2f08:	10 82       	st	Z, r1
    2f0a:	11 82       	std	Z+1, r1	; 0x01
    2f0c:	12 82       	std	Z+2, r1	; 0x02
    2f0e:	13 82       	std	Z+3, r1	; 0x03
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	01 c0       	rjmp	.+2      	; 0x2f16 <xTaskCheckForTimeOut+0xae>
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	0f 90       	pop	r0
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	ff 90       	pop	r15
    2f24:	ef 90       	pop	r14
    2f26:	df 90       	pop	r13
    2f28:	cf 90       	pop	r12
    2f2a:	bf 90       	pop	r11
    2f2c:	af 90       	pop	r10
    2f2e:	9f 90       	pop	r9
    2f30:	8f 90       	pop	r8
    2f32:	08 95       	ret

00002f34 <vTaskMissedYield>:
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <xYieldPending>
    2f3a:	08 95       	ret

00002f3c <xTaskGetCurrentTaskHandle>:
    2f3c:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2f40:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2f44:	08 95       	ret

00002f46 <xTaskGetSchedulerState>:
    2f46:	80 91 1b 17 	lds	r24, 0x171B	; 0x80171b <xSchedulerRunning>
    2f4a:	88 23       	and	r24, r24
    2f4c:	31 f0       	breq	.+12     	; 0x2f5a <xTaskGetSchedulerState+0x14>
    2f4e:	80 91 0d 17 	lds	r24, 0x170D	; 0x80170d <uxSchedulerSuspended>
    2f52:	81 11       	cpse	r24, r1
    2f54:	04 c0       	rjmp	.+8      	; 0x2f5e <xTaskGetSchedulerState+0x18>
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	08 95       	ret
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	08 95       	ret
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	08 95       	ret

00002f62 <xTaskPriorityInherit>:
    2f62:	0f 93       	push	r16
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	89 2b       	or	r24, r25
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <xTaskPriorityInherit+0x10>
    2f70:	77 c0       	rjmp	.+238    	; 0x3060 <xTaskPriorityInherit+0xfe>
    2f72:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f74:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2f78:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2f7c:	5a 96       	adiw	r26, 0x1a	; 26
    2f7e:	9c 91       	ld	r25, X
    2f80:	89 17       	cp	r24, r25
    2f82:	08 f0       	brcs	.+2      	; 0x2f86 <xTaskPriorityInherit+0x24>
    2f84:	63 c0       	rjmp	.+198    	; 0x304c <xTaskPriorityInherit+0xea>
    2f86:	46 85       	ldd	r20, Z+14	; 0x0e
    2f88:	57 85       	ldd	r21, Z+15	; 0x0f
    2f8a:	60 89       	ldd	r22, Z+16	; 0x10
    2f8c:	71 89       	ldd	r23, Z+17	; 0x11
    2f8e:	77 23       	and	r23, r23
    2f90:	94 f0       	brlt	.+36     	; 0x2fb6 <xTaskPriorityInherit+0x54>
    2f92:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2f96:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2f9a:	5a 96       	adiw	r26, 0x1a	; 26
    2f9c:	9c 91       	ld	r25, X
    2f9e:	4a e0       	ldi	r20, 0x0A	; 10
    2fa0:	50 e0       	ldi	r21, 0x00	; 0
    2fa2:	60 e0       	ldi	r22, 0x00	; 0
    2fa4:	70 e0       	ldi	r23, 0x00	; 0
    2fa6:	49 1b       	sub	r20, r25
    2fa8:	51 09       	sbc	r21, r1
    2faa:	61 09       	sbc	r22, r1
    2fac:	71 09       	sbc	r23, r1
    2fae:	46 87       	std	Z+14, r20	; 0x0e
    2fb0:	57 87       	std	Z+15, r21	; 0x0f
    2fb2:	60 8b       	std	Z+16, r22	; 0x10
    2fb4:	71 8b       	std	Z+17, r23	; 0x11
    2fb6:	24 85       	ldd	r18, Z+12	; 0x0c
    2fb8:	35 85       	ldd	r19, Z+13	; 0x0d
    2fba:	4b e0       	ldi	r20, 0x0B	; 11
    2fbc:	84 9f       	mul	r24, r20
    2fbe:	c0 01       	movw	r24, r0
    2fc0:	11 24       	eor	r1, r1
    2fc2:	82 5a       	subi	r24, 0xA2	; 162
    2fc4:	98 4e       	sbci	r25, 0xE8	; 232
    2fc6:	28 17       	cp	r18, r24
    2fc8:	39 07       	cpc	r19, r25
    2fca:	b9 f5       	brne	.+110    	; 0x303a <xTaskPriorityInherit+0xd8>
    2fcc:	ef 01       	movw	r28, r30
    2fce:	8f 01       	movw	r16, r30
    2fd0:	0e 5f       	subi	r16, 0xFE	; 254
    2fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd4:	c8 01       	movw	r24, r16
    2fd6:	0e 94 78 07 	call	0xef0	; 0xef0 <uxListRemove>
    2fda:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    2fde:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    2fe2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2fe4:	ea 8f       	std	Y+26, r30	; 0x1a
    2fe6:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <uxTopReadyPriority>
    2fea:	8e 17       	cp	r24, r30
    2fec:	10 f4       	brcc	.+4      	; 0x2ff2 <xTaskPriorityInherit+0x90>
    2fee:	e0 93 1c 17 	sts	0x171C, r30	; 0x80171c <uxTopReadyPriority>
    2ff2:	8b e0       	ldi	r24, 0x0B	; 11
    2ff4:	8e 9f       	mul	r24, r30
    2ff6:	f0 01       	movw	r30, r0
    2ff8:	11 24       	eor	r1, r1
    2ffa:	e2 5a       	subi	r30, 0xA2	; 162
    2ffc:	f8 4e       	sbci	r31, 0xE8	; 232
    2ffe:	01 80       	ldd	r0, Z+1	; 0x01
    3000:	f2 81       	ldd	r31, Z+2	; 0x02
    3002:	e0 2d       	mov	r30, r0
    3004:	ff 83       	std	Y+7, r31	; 0x07
    3006:	ee 83       	std	Y+6, r30	; 0x06
    3008:	26 81       	ldd	r18, Z+6	; 0x06
    300a:	37 81       	ldd	r19, Z+7	; 0x07
    300c:	39 87       	std	Y+9, r19	; 0x09
    300e:	28 87       	std	Y+8, r18	; 0x08
    3010:	a6 81       	ldd	r26, Z+6	; 0x06
    3012:	b7 81       	ldd	r27, Z+7	; 0x07
    3014:	15 96       	adiw	r26, 0x05	; 5
    3016:	1c 93       	st	X, r17
    3018:	0e 93       	st	-X, r16
    301a:	14 97       	sbiw	r26, 0x04	; 4
    301c:	17 83       	std	Z+7, r17	; 0x07
    301e:	06 83       	std	Z+6, r16	; 0x06
    3020:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3022:	8e 9f       	mul	r24, r30
    3024:	f0 01       	movw	r30, r0
    3026:	11 24       	eor	r1, r1
    3028:	e2 5a       	subi	r30, 0xA2	; 162
    302a:	f8 4e       	sbci	r31, 0xE8	; 232
    302c:	fd 87       	std	Y+13, r31	; 0x0d
    302e:	ec 87       	std	Y+12, r30	; 0x0c
    3030:	80 81       	ld	r24, Z
    3032:	8f 5f       	subi	r24, 0xFF	; 255
    3034:	80 83       	st	Z, r24
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	16 c0       	rjmp	.+44     	; 0x3066 <xTaskPriorityInherit+0x104>
    303a:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    303e:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    3042:	5a 96       	adiw	r26, 0x1a	; 26
    3044:	8c 91       	ld	r24, X
    3046:	82 8f       	std	Z+26, r24	; 0x1a
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	0d c0       	rjmp	.+26     	; 0x3066 <xTaskPriorityInherit+0x104>
    304c:	95 a5       	ldd	r25, Z+45	; 0x2d
    304e:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3052:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    3056:	82 8d       	ldd	r24, Z+26	; 0x1a
    3058:	98 17       	cp	r25, r24
    305a:	20 f0       	brcs	.+8      	; 0x3064 <xTaskPriorityInherit+0x102>
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	03 c0       	rjmp	.+6      	; 0x3066 <xTaskPriorityInherit+0x104>
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	01 c0       	rjmp	.+2      	; 0x3066 <xTaskPriorityInherit+0x104>
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	df 91       	pop	r29
    3068:	cf 91       	pop	r28
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	08 95       	ret

00003070 <xTaskPriorityDisinherit>:
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	fc 01       	movw	r30, r24
    307a:	89 2b       	or	r24, r25
    307c:	09 f4       	brne	.+2      	; 0x3080 <xTaskPriorityDisinherit+0x10>
    307e:	49 c0       	rjmp	.+146    	; 0x3112 <xTaskPriorityDisinherit+0xa2>
    3080:	86 a5       	ldd	r24, Z+46	; 0x2e
    3082:	81 50       	subi	r24, 0x01	; 1
    3084:	86 a7       	std	Z+46, r24	; 0x2e
    3086:	22 8d       	ldd	r18, Z+26	; 0x1a
    3088:	95 a5       	ldd	r25, Z+45	; 0x2d
    308a:	29 17       	cp	r18, r25
    308c:	09 f4       	brne	.+2      	; 0x3090 <xTaskPriorityDisinherit+0x20>
    308e:	43 c0       	rjmp	.+134    	; 0x3116 <xTaskPriorityDisinherit+0xa6>
    3090:	81 11       	cpse	r24, r1
    3092:	43 c0       	rjmp	.+134    	; 0x311a <xTaskPriorityDisinherit+0xaa>
    3094:	ef 01       	movw	r28, r30
    3096:	8f 01       	movw	r16, r30
    3098:	0e 5f       	subi	r16, 0xFE	; 254
    309a:	1f 4f       	sbci	r17, 0xFF	; 255
    309c:	c8 01       	movw	r24, r16
    309e:	0e 94 78 07 	call	0xef0	; 0xef0 <uxListRemove>
    30a2:	ed a5       	ldd	r30, Y+45	; 0x2d
    30a4:	ea 8f       	std	Y+26, r30	; 0x1a
    30a6:	8a e0       	ldi	r24, 0x0A	; 10
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	a0 e0       	ldi	r26, 0x00	; 0
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	8e 1b       	sub	r24, r30
    30b0:	91 09       	sbc	r25, r1
    30b2:	a1 09       	sbc	r26, r1
    30b4:	b1 09       	sbc	r27, r1
    30b6:	8e 87       	std	Y+14, r24	; 0x0e
    30b8:	9f 87       	std	Y+15, r25	; 0x0f
    30ba:	a8 8b       	std	Y+16, r26	; 0x10
    30bc:	b9 8b       	std	Y+17, r27	; 0x11
    30be:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <uxTopReadyPriority>
    30c2:	8e 17       	cp	r24, r30
    30c4:	10 f4       	brcc	.+4      	; 0x30ca <xTaskPriorityDisinherit+0x5a>
    30c6:	e0 93 1c 17 	sts	0x171C, r30	; 0x80171c <uxTopReadyPriority>
    30ca:	8b e0       	ldi	r24, 0x0B	; 11
    30cc:	8e 9f       	mul	r24, r30
    30ce:	f0 01       	movw	r30, r0
    30d0:	11 24       	eor	r1, r1
    30d2:	e2 5a       	subi	r30, 0xA2	; 162
    30d4:	f8 4e       	sbci	r31, 0xE8	; 232
    30d6:	01 80       	ldd	r0, Z+1	; 0x01
    30d8:	f2 81       	ldd	r31, Z+2	; 0x02
    30da:	e0 2d       	mov	r30, r0
    30dc:	ff 83       	std	Y+7, r31	; 0x07
    30de:	ee 83       	std	Y+6, r30	; 0x06
    30e0:	26 81       	ldd	r18, Z+6	; 0x06
    30e2:	37 81       	ldd	r19, Z+7	; 0x07
    30e4:	39 87       	std	Y+9, r19	; 0x09
    30e6:	28 87       	std	Y+8, r18	; 0x08
    30e8:	a6 81       	ldd	r26, Z+6	; 0x06
    30ea:	b7 81       	ldd	r27, Z+7	; 0x07
    30ec:	15 96       	adiw	r26, 0x05	; 5
    30ee:	1c 93       	st	X, r17
    30f0:	0e 93       	st	-X, r16
    30f2:	14 97       	sbiw	r26, 0x04	; 4
    30f4:	17 83       	std	Z+7, r17	; 0x07
    30f6:	06 83       	std	Z+6, r16	; 0x06
    30f8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    30fa:	8e 9f       	mul	r24, r30
    30fc:	f0 01       	movw	r30, r0
    30fe:	11 24       	eor	r1, r1
    3100:	e2 5a       	subi	r30, 0xA2	; 162
    3102:	f8 4e       	sbci	r31, 0xE8	; 232
    3104:	fd 87       	std	Y+13, r31	; 0x0d
    3106:	ec 87       	std	Y+12, r30	; 0x0c
    3108:	80 81       	ld	r24, Z
    310a:	8f 5f       	subi	r24, 0xFF	; 255
    310c:	80 83       	st	Z, r24
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	05 c0       	rjmp	.+10     	; 0x311c <xTaskPriorityDisinherit+0xac>
    3112:	80 e0       	ldi	r24, 0x00	; 0
    3114:	03 c0       	rjmp	.+6      	; 0x311c <xTaskPriorityDisinherit+0xac>
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	01 c0       	rjmp	.+2      	; 0x311c <xTaskPriorityDisinherit+0xac>
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	df 91       	pop	r29
    311e:	cf 91       	pop	r28
    3120:	1f 91       	pop	r17
    3122:	0f 91       	pop	r16
    3124:	08 95       	ret

00003126 <vTaskPriorityDisinheritAfterTimeout>:
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	fc 01       	movw	r30, r24
    3130:	89 2b       	or	r24, r25
    3132:	09 f4       	brne	.+2      	; 0x3136 <vTaskPriorityDisinheritAfterTimeout+0x10>
    3134:	5a c0       	rjmp	.+180    	; 0x31ea <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3136:	85 a5       	ldd	r24, Z+45	; 0x2d
    3138:	86 17       	cp	r24, r22
    313a:	08 f4       	brcc	.+2      	; 0x313e <vTaskPriorityDisinheritAfterTimeout+0x18>
    313c:	86 2f       	mov	r24, r22
    313e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3140:	89 17       	cp	r24, r25
    3142:	09 f4       	brne	.+2      	; 0x3146 <vTaskPriorityDisinheritAfterTimeout+0x20>
    3144:	52 c0       	rjmp	.+164    	; 0x31ea <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3146:	26 a5       	ldd	r18, Z+46	; 0x2e
    3148:	21 30       	cpi	r18, 0x01	; 1
    314a:	09 f0       	breq	.+2      	; 0x314e <vTaskPriorityDisinheritAfterTimeout+0x28>
    314c:	4e c0       	rjmp	.+156    	; 0x31ea <vTaskPriorityDisinheritAfterTimeout+0xc4>
    314e:	82 8f       	std	Z+26, r24	; 0x1a
    3150:	46 85       	ldd	r20, Z+14	; 0x0e
    3152:	57 85       	ldd	r21, Z+15	; 0x0f
    3154:	60 89       	ldd	r22, Z+16	; 0x10
    3156:	71 89       	ldd	r23, Z+17	; 0x11
    3158:	77 23       	and	r23, r23
    315a:	64 f0       	brlt	.+24     	; 0x3174 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    315c:	4a e0       	ldi	r20, 0x0A	; 10
    315e:	50 e0       	ldi	r21, 0x00	; 0
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	70 e0       	ldi	r23, 0x00	; 0
    3164:	48 1b       	sub	r20, r24
    3166:	51 09       	sbc	r21, r1
    3168:	61 09       	sbc	r22, r1
    316a:	71 09       	sbc	r23, r1
    316c:	46 87       	std	Z+14, r20	; 0x0e
    316e:	57 87       	std	Z+15, r21	; 0x0f
    3170:	60 8b       	std	Z+16, r22	; 0x10
    3172:	71 8b       	std	Z+17, r23	; 0x11
    3174:	24 85       	ldd	r18, Z+12	; 0x0c
    3176:	35 85       	ldd	r19, Z+13	; 0x0d
    3178:	4b e0       	ldi	r20, 0x0B	; 11
    317a:	94 9f       	mul	r25, r20
    317c:	c0 01       	movw	r24, r0
    317e:	11 24       	eor	r1, r1
    3180:	82 5a       	subi	r24, 0xA2	; 162
    3182:	98 4e       	sbci	r25, 0xE8	; 232
    3184:	28 17       	cp	r18, r24
    3186:	39 07       	cpc	r19, r25
    3188:	81 f5       	brne	.+96     	; 0x31ea <vTaskPriorityDisinheritAfterTimeout+0xc4>
    318a:	ef 01       	movw	r28, r30
    318c:	8f 01       	movw	r16, r30
    318e:	0e 5f       	subi	r16, 0xFE	; 254
    3190:	1f 4f       	sbci	r17, 0xFF	; 255
    3192:	c8 01       	movw	r24, r16
    3194:	0e 94 78 07 	call	0xef0	; 0xef0 <uxListRemove>
    3198:	ea 8d       	ldd	r30, Y+26	; 0x1a
    319a:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <uxTopReadyPriority>
    319e:	8e 17       	cp	r24, r30
    31a0:	10 f4       	brcc	.+4      	; 0x31a6 <vTaskPriorityDisinheritAfterTimeout+0x80>
    31a2:	e0 93 1c 17 	sts	0x171C, r30	; 0x80171c <uxTopReadyPriority>
    31a6:	8b e0       	ldi	r24, 0x0B	; 11
    31a8:	8e 9f       	mul	r24, r30
    31aa:	f0 01       	movw	r30, r0
    31ac:	11 24       	eor	r1, r1
    31ae:	e2 5a       	subi	r30, 0xA2	; 162
    31b0:	f8 4e       	sbci	r31, 0xE8	; 232
    31b2:	01 80       	ldd	r0, Z+1	; 0x01
    31b4:	f2 81       	ldd	r31, Z+2	; 0x02
    31b6:	e0 2d       	mov	r30, r0
    31b8:	ff 83       	std	Y+7, r31	; 0x07
    31ba:	ee 83       	std	Y+6, r30	; 0x06
    31bc:	26 81       	ldd	r18, Z+6	; 0x06
    31be:	37 81       	ldd	r19, Z+7	; 0x07
    31c0:	39 87       	std	Y+9, r19	; 0x09
    31c2:	28 87       	std	Y+8, r18	; 0x08
    31c4:	a6 81       	ldd	r26, Z+6	; 0x06
    31c6:	b7 81       	ldd	r27, Z+7	; 0x07
    31c8:	15 96       	adiw	r26, 0x05	; 5
    31ca:	1c 93       	st	X, r17
    31cc:	0e 93       	st	-X, r16
    31ce:	14 97       	sbiw	r26, 0x04	; 4
    31d0:	17 83       	std	Z+7, r17	; 0x07
    31d2:	06 83       	std	Z+6, r16	; 0x06
    31d4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    31d6:	8e 9f       	mul	r24, r30
    31d8:	f0 01       	movw	r30, r0
    31da:	11 24       	eor	r1, r1
    31dc:	e2 5a       	subi	r30, 0xA2	; 162
    31de:	f8 4e       	sbci	r31, 0xE8	; 232
    31e0:	fd 87       	std	Y+13, r31	; 0x0d
    31e2:	ec 87       	std	Y+12, r30	; 0x0c
    31e4:	80 81       	ld	r24, Z
    31e6:	8f 5f       	subi	r24, 0xFF	; 255
    31e8:	80 83       	st	Z, r24
    31ea:	df 91       	pop	r29
    31ec:	cf 91       	pop	r28
    31ee:	1f 91       	pop	r17
    31f0:	0f 91       	pop	r16
    31f2:	08 95       	ret

000031f4 <uxTaskResetEventItemValue>:
    31f4:	cf 92       	push	r12
    31f6:	df 92       	push	r13
    31f8:	ef 92       	push	r14
    31fa:	ff 92       	push	r15
    31fc:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3200:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    3204:	66 85       	ldd	r22, Z+14	; 0x0e
    3206:	77 85       	ldd	r23, Z+15	; 0x0f
    3208:	80 89       	ldd	r24, Z+16	; 0x10
    320a:	91 89       	ldd	r25, Z+17	; 0x11
    320c:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3210:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    3214:	a0 91 cc 17 	lds	r26, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3218:	b0 91 cd 17 	lds	r27, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    321c:	5a 96       	adiw	r26, 0x1a	; 26
    321e:	2c 91       	ld	r18, X
    3220:	0f 2e       	mov	r0, r31
    3222:	fa e0       	ldi	r31, 0x0A	; 10
    3224:	cf 2e       	mov	r12, r31
    3226:	d1 2c       	mov	r13, r1
    3228:	e1 2c       	mov	r14, r1
    322a:	f1 2c       	mov	r15, r1
    322c:	f0 2d       	mov	r31, r0
    322e:	c2 1a       	sub	r12, r18
    3230:	d1 08       	sbc	r13, r1
    3232:	e1 08       	sbc	r14, r1
    3234:	f1 08       	sbc	r15, r1
    3236:	c6 86       	std	Z+14, r12	; 0x0e
    3238:	d7 86       	std	Z+15, r13	; 0x0f
    323a:	e0 8a       	std	Z+16, r14	; 0x10
    323c:	f1 8a       	std	Z+17, r15	; 0x11
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	df 90       	pop	r13
    3244:	cf 90       	pop	r12
    3246:	08 95       	ret

00003248 <pvTaskIncrementMutexHeldCount>:
    3248:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    324c:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    3250:	89 2b       	or	r24, r25
    3252:	39 f0       	breq	.+14     	; 0x3262 <pvTaskIncrementMutexHeldCount+0x1a>
    3254:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3258:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    325c:	86 a5       	ldd	r24, Z+46	; 0x2e
    325e:	8f 5f       	subi	r24, 0xFF	; 255
    3260:	86 a7       	std	Z+46, r24	; 0x2e
    3262:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3266:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    326a:	08 95       	ret

0000326c <xTaskGenericNotifyWait>:
    326c:	4f 92       	push	r4
    326e:	5f 92       	push	r5
    3270:	6f 92       	push	r6
    3272:	7f 92       	push	r7
    3274:	af 92       	push	r10
    3276:	bf 92       	push	r11
    3278:	cf 92       	push	r12
    327a:	df 92       	push	r13
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	28 01       	movw	r4, r16
    328a:	39 01       	movw	r6, r18
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	0f 92       	push	r0
    3292:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3296:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    329a:	c8 2f       	mov	r28, r24
    329c:	d0 e0       	ldi	r29, 0x00	; 0
    329e:	ec 0f       	add	r30, r28
    32a0:	fd 1f       	adc	r31, r29
    32a2:	83 a9       	ldd	r24, Z+51	; 0x33
    32a4:	82 30       	cpi	r24, 0x02	; 2
    32a6:	79 f1       	breq	.+94     	; 0x3306 <xTaskGenericNotifyWait+0x9a>
    32a8:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    32ac:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    32b0:	ce 01       	movw	r24, r28
    32b2:	88 0f       	add	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	88 0f       	add	r24, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	e8 0f       	add	r30, r24
    32bc:	f9 1f       	adc	r31, r25
    32be:	87 a5       	ldd	r24, Z+47	; 0x2f
    32c0:	90 a9       	ldd	r25, Z+48	; 0x30
    32c2:	a1 a9       	ldd	r26, Z+49	; 0x31
    32c4:	b2 a9       	ldd	r27, Z+50	; 0x32
    32c6:	40 95       	com	r20
    32c8:	50 95       	com	r21
    32ca:	60 95       	com	r22
    32cc:	70 95       	com	r23
    32ce:	48 23       	and	r20, r24
    32d0:	59 23       	and	r21, r25
    32d2:	6a 23       	and	r22, r26
    32d4:	7b 23       	and	r23, r27
    32d6:	47 a7       	std	Z+47, r20	; 0x2f
    32d8:	50 ab       	std	Z+48, r21	; 0x30
    32da:	61 ab       	std	Z+49, r22	; 0x31
    32dc:	72 ab       	std	Z+50, r23	; 0x32
    32de:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    32e2:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    32e6:	ec 0f       	add	r30, r28
    32e8:	fd 1f       	adc	r31, r29
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	83 ab       	std	Z+51, r24	; 0x33
    32ee:	a1 14       	cp	r10, r1
    32f0:	b1 04       	cpc	r11, r1
    32f2:	c1 04       	cpc	r12, r1
    32f4:	d1 04       	cpc	r13, r1
    32f6:	39 f0       	breq	.+14     	; 0x3306 <xTaskGenericNotifyWait+0x9a>
    32f8:	41 e0       	ldi	r20, 0x01	; 1
    32fa:	c6 01       	movw	r24, r12
    32fc:	b5 01       	movw	r22, r10
    32fe:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <prvAddCurrentTaskToDelayedList>
    3302:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vPortYield>
    3306:	0f 90       	pop	r0
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	0f 92       	push	r0
    3310:	e1 14       	cp	r14, r1
    3312:	f1 04       	cpc	r15, r1
    3314:	a1 f0       	breq	.+40     	; 0x333e <xTaskGenericNotifyWait+0xd2>
    3316:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    331a:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    331e:	ce 01       	movw	r24, r28
    3320:	88 0f       	add	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	e8 0f       	add	r30, r24
    332a:	f9 1f       	adc	r31, r25
    332c:	87 a5       	ldd	r24, Z+47	; 0x2f
    332e:	90 a9       	ldd	r25, Z+48	; 0x30
    3330:	a1 a9       	ldd	r26, Z+49	; 0x31
    3332:	b2 a9       	ldd	r27, Z+50	; 0x32
    3334:	f7 01       	movw	r30, r14
    3336:	80 83       	st	Z, r24
    3338:	91 83       	std	Z+1, r25	; 0x01
    333a:	a2 83       	std	Z+2, r26	; 0x02
    333c:	b3 83       	std	Z+3, r27	; 0x03
    333e:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3342:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    3346:	ec 0f       	add	r30, r28
    3348:	fd 1f       	adc	r31, r29
    334a:	83 a9       	ldd	r24, Z+51	; 0x33
    334c:	82 30       	cpi	r24, 0x02	; 2
    334e:	e9 f4       	brne	.+58     	; 0x338a <xTaskGenericNotifyWait+0x11e>
    3350:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3354:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    3358:	ce 01       	movw	r24, r28
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	88 0f       	add	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	e8 0f       	add	r30, r24
    3364:	f9 1f       	adc	r31, r25
    3366:	87 a5       	ldd	r24, Z+47	; 0x2f
    3368:	90 a9       	ldd	r25, Z+48	; 0x30
    336a:	a1 a9       	ldd	r26, Z+49	; 0x31
    336c:	b2 a9       	ldd	r27, Z+50	; 0x32
    336e:	40 94       	com	r4
    3370:	50 94       	com	r5
    3372:	60 94       	com	r6
    3374:	70 94       	com	r7
    3376:	48 22       	and	r4, r24
    3378:	59 22       	and	r5, r25
    337a:	6a 22       	and	r6, r26
    337c:	7b 22       	and	r7, r27
    337e:	47 a6       	std	Z+47, r4	; 0x2f
    3380:	50 aa       	std	Z+48, r5	; 0x30
    3382:	61 aa       	std	Z+49, r6	; 0x31
    3384:	72 aa       	std	Z+50, r7	; 0x32
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	01 c0       	rjmp	.+2      	; 0x338c <xTaskGenericNotifyWait+0x120>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	20 91 cc 17 	lds	r18, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3390:	30 91 cd 17 	lds	r19, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    3394:	c2 0f       	add	r28, r18
    3396:	d3 1f       	adc	r29, r19
    3398:	1b aa       	std	Y+51, r1	; 0x33
    339a:	0f 90       	pop	r0
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	1f 91       	pop	r17
    33a4:	0f 91       	pop	r16
    33a6:	ff 90       	pop	r15
    33a8:	ef 90       	pop	r14
    33aa:	df 90       	pop	r13
    33ac:	cf 90       	pop	r12
    33ae:	bf 90       	pop	r11
    33b0:	af 90       	pop	r10
    33b2:	7f 90       	pop	r7
    33b4:	6f 90       	pop	r6
    33b6:	5f 90       	pop	r5
    33b8:	4f 90       	pop	r4
    33ba:	08 95       	ret

000033bc <xTaskGenericNotify>:
    33bc:	8f 92       	push	r8
    33be:	9f 92       	push	r9
    33c0:	af 92       	push	r10
    33c2:	bf 92       	push	r11
    33c4:	ef 92       	push	r14
    33c6:	ff 92       	push	r15
    33c8:	0f 93       	push	r16
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	dc 01       	movw	r26, r24
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	0f 92       	push	r0
    33d6:	e1 14       	cp	r14, r1
    33d8:	f1 04       	cpc	r15, r1
    33da:	89 f0       	breq	.+34     	; 0x33fe <xTaskGenericNotify+0x42>
    33dc:	e6 2f       	mov	r30, r22
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	ee 0f       	add	r30, r30
    33e2:	ff 1f       	adc	r31, r31
    33e4:	ee 0f       	add	r30, r30
    33e6:	ff 1f       	adc	r31, r31
    33e8:	e8 0f       	add	r30, r24
    33ea:	f9 1f       	adc	r31, r25
    33ec:	87 a4       	ldd	r8, Z+47	; 0x2f
    33ee:	90 a8       	ldd	r9, Z+48	; 0x30
    33f0:	a1 a8       	ldd	r10, Z+49	; 0x31
    33f2:	b2 a8       	ldd	r11, Z+50	; 0x32
    33f4:	f7 01       	movw	r30, r14
    33f6:	80 82       	st	Z, r8
    33f8:	91 82       	std	Z+1, r9	; 0x01
    33fa:	a2 82       	std	Z+2, r10	; 0x02
    33fc:	b3 82       	std	Z+3, r11	; 0x03
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	fd 01       	movw	r30, r26
    3402:	e6 0f       	add	r30, r22
    3404:	f7 1f       	adc	r31, r23
    3406:	83 a9       	ldd	r24, Z+51	; 0x33
    3408:	92 e0       	ldi	r25, 0x02	; 2
    340a:	93 ab       	std	Z+51, r25	; 0x33
    340c:	02 30       	cpi	r16, 0x02	; 2
    340e:	01 f1       	breq	.+64     	; 0x3450 <xTaskGenericNotify+0x94>
    3410:	18 f4       	brcc	.+6      	; 0x3418 <xTaskGenericNotify+0x5c>
    3412:	01 30       	cpi	r16, 0x01	; 1
    3414:	31 f0       	breq	.+12     	; 0x3422 <xTaskGenericNotify+0x66>
    3416:	4d c0       	rjmp	.+154    	; 0x34b2 <xTaskGenericNotify+0xf6>
    3418:	03 30       	cpi	r16, 0x03	; 3
    341a:	79 f1       	breq	.+94     	; 0x347a <xTaskGenericNotify+0xbe>
    341c:	04 30       	cpi	r16, 0x04	; 4
    341e:	d1 f1       	breq	.+116    	; 0x3494 <xTaskGenericNotify+0xd8>
    3420:	48 c0       	rjmp	.+144    	; 0x34b2 <xTaskGenericNotify+0xf6>
    3422:	66 0f       	add	r22, r22
    3424:	77 1f       	adc	r23, r23
    3426:	66 0f       	add	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	fd 01       	movw	r30, r26
    342c:	e6 0f       	add	r30, r22
    342e:	f7 1f       	adc	r31, r23
    3430:	87 a4       	ldd	r8, Z+47	; 0x2f
    3432:	90 a8       	ldd	r9, Z+48	; 0x30
    3434:	a1 a8       	ldd	r10, Z+49	; 0x31
    3436:	b2 a8       	ldd	r11, Z+50	; 0x32
    3438:	ba 01       	movw	r22, r20
    343a:	a9 01       	movw	r20, r18
    343c:	48 29       	or	r20, r8
    343e:	59 29       	or	r21, r9
    3440:	6a 29       	or	r22, r10
    3442:	7b 29       	or	r23, r11
    3444:	47 a7       	std	Z+47, r20	; 0x2f
    3446:	50 ab       	std	Z+48, r21	; 0x30
    3448:	61 ab       	std	Z+49, r22	; 0x31
    344a:	72 ab       	std	Z+50, r23	; 0x32
    344c:	01 e0       	ldi	r16, 0x01	; 1
    344e:	34 c0       	rjmp	.+104    	; 0x34b8 <xTaskGenericNotify+0xfc>
    3450:	66 0f       	add	r22, r22
    3452:	77 1f       	adc	r23, r23
    3454:	66 0f       	add	r22, r22
    3456:	77 1f       	adc	r23, r23
    3458:	fd 01       	movw	r30, r26
    345a:	e6 0f       	add	r30, r22
    345c:	f7 1f       	adc	r31, r23
    345e:	47 a5       	ldd	r20, Z+47	; 0x2f
    3460:	50 a9       	ldd	r21, Z+48	; 0x30
    3462:	61 a9       	ldd	r22, Z+49	; 0x31
    3464:	72 a9       	ldd	r23, Z+50	; 0x32
    3466:	4f 5f       	subi	r20, 0xFF	; 255
    3468:	5f 4f       	sbci	r21, 0xFF	; 255
    346a:	6f 4f       	sbci	r22, 0xFF	; 255
    346c:	7f 4f       	sbci	r23, 0xFF	; 255
    346e:	47 a7       	std	Z+47, r20	; 0x2f
    3470:	50 ab       	std	Z+48, r21	; 0x30
    3472:	61 ab       	std	Z+49, r22	; 0x31
    3474:	72 ab       	std	Z+50, r23	; 0x32
    3476:	01 e0       	ldi	r16, 0x01	; 1
    3478:	1f c0       	rjmp	.+62     	; 0x34b8 <xTaskGenericNotify+0xfc>
    347a:	66 0f       	add	r22, r22
    347c:	77 1f       	adc	r23, r23
    347e:	66 0f       	add	r22, r22
    3480:	77 1f       	adc	r23, r23
    3482:	fd 01       	movw	r30, r26
    3484:	e6 0f       	add	r30, r22
    3486:	f7 1f       	adc	r31, r23
    3488:	27 a7       	std	Z+47, r18	; 0x2f
    348a:	30 ab       	std	Z+48, r19	; 0x30
    348c:	41 ab       	std	Z+49, r20	; 0x31
    348e:	52 ab       	std	Z+50, r21	; 0x32
    3490:	01 e0       	ldi	r16, 0x01	; 1
    3492:	12 c0       	rjmp	.+36     	; 0x34b8 <xTaskGenericNotify+0xfc>
    3494:	82 30       	cpi	r24, 0x02	; 2
    3496:	79 f0       	breq	.+30     	; 0x34b6 <xTaskGenericNotify+0xfa>
    3498:	66 0f       	add	r22, r22
    349a:	77 1f       	adc	r23, r23
    349c:	66 0f       	add	r22, r22
    349e:	77 1f       	adc	r23, r23
    34a0:	fd 01       	movw	r30, r26
    34a2:	e6 0f       	add	r30, r22
    34a4:	f7 1f       	adc	r31, r23
    34a6:	27 a7       	std	Z+47, r18	; 0x2f
    34a8:	30 ab       	std	Z+48, r19	; 0x30
    34aa:	41 ab       	std	Z+49, r20	; 0x31
    34ac:	52 ab       	std	Z+50, r21	; 0x32
    34ae:	01 e0       	ldi	r16, 0x01	; 1
    34b0:	03 c0       	rjmp	.+6      	; 0x34b8 <xTaskGenericNotify+0xfc>
    34b2:	01 e0       	ldi	r16, 0x01	; 1
    34b4:	01 c0       	rjmp	.+2      	; 0x34b8 <xTaskGenericNotify+0xfc>
    34b6:	00 e0       	ldi	r16, 0x00	; 0
    34b8:	81 30       	cpi	r24, 0x01	; 1
    34ba:	09 f0       	breq	.+2      	; 0x34be <xTaskGenericNotify+0x102>
    34bc:	69 c0       	rjmp	.+210    	; 0x3590 <xTaskGenericNotify+0x1d4>
    34be:	1c 96       	adiw	r26, 0x0c	; 12
    34c0:	ed 91       	ld	r30, X+
    34c2:	fc 91       	ld	r31, X
    34c4:	1d 97       	sbiw	r26, 0x0d	; 13
    34c6:	16 96       	adiw	r26, 0x06	; 6
    34c8:	cd 91       	ld	r28, X+
    34ca:	dc 91       	ld	r29, X
    34cc:	17 97       	sbiw	r26, 0x07	; 7
    34ce:	18 96       	adiw	r26, 0x08	; 8
    34d0:	8d 91       	ld	r24, X+
    34d2:	9c 91       	ld	r25, X
    34d4:	19 97       	sbiw	r26, 0x09	; 9
    34d6:	9f 83       	std	Y+7, r25	; 0x07
    34d8:	8e 83       	std	Y+6, r24	; 0x06
    34da:	18 96       	adiw	r26, 0x08	; 8
    34dc:	cd 91       	ld	r28, X+
    34de:	dc 91       	ld	r29, X
    34e0:	19 97       	sbiw	r26, 0x09	; 9
    34e2:	16 96       	adiw	r26, 0x06	; 6
    34e4:	8d 91       	ld	r24, X+
    34e6:	9c 91       	ld	r25, X
    34e8:	17 97       	sbiw	r26, 0x07	; 7
    34ea:	9d 83       	std	Y+5, r25	; 0x05
    34ec:	8c 83       	std	Y+4, r24	; 0x04
    34ee:	81 81       	ldd	r24, Z+1	; 0x01
    34f0:	92 81       	ldd	r25, Z+2	; 0x02
    34f2:	9d 01       	movw	r18, r26
    34f4:	2e 5f       	subi	r18, 0xFE	; 254
    34f6:	3f 4f       	sbci	r19, 0xFF	; 255
    34f8:	82 17       	cp	r24, r18
    34fa:	93 07       	cpc	r25, r19
    34fc:	31 f4       	brne	.+12     	; 0x350a <xTaskGenericNotify+0x14e>
    34fe:	18 96       	adiw	r26, 0x08	; 8
    3500:	8d 91       	ld	r24, X+
    3502:	9c 91       	ld	r25, X
    3504:	19 97       	sbiw	r26, 0x09	; 9
    3506:	92 83       	std	Z+2, r25	; 0x02
    3508:	81 83       	std	Z+1, r24	; 0x01
    350a:	1d 96       	adiw	r26, 0x0d	; 13
    350c:	1c 92       	st	X, r1
    350e:	1e 92       	st	-X, r1
    3510:	1c 97       	sbiw	r26, 0x0c	; 12
    3512:	80 81       	ld	r24, Z
    3514:	81 50       	subi	r24, 0x01	; 1
    3516:	80 83       	st	Z, r24
    3518:	5a 96       	adiw	r26, 0x1a	; 26
    351a:	ec 91       	ld	r30, X
    351c:	5a 97       	sbiw	r26, 0x1a	; 26
    351e:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <uxTopReadyPriority>
    3522:	8e 17       	cp	r24, r30
    3524:	10 f4       	brcc	.+4      	; 0x352a <xTaskGenericNotify+0x16e>
    3526:	e0 93 1c 17 	sts	0x171C, r30	; 0x80171c <uxTopReadyPriority>
    352a:	8b e0       	ldi	r24, 0x0B	; 11
    352c:	8e 9f       	mul	r24, r30
    352e:	f0 01       	movw	r30, r0
    3530:	11 24       	eor	r1, r1
    3532:	e2 5a       	subi	r30, 0xA2	; 162
    3534:	f8 4e       	sbci	r31, 0xE8	; 232
    3536:	01 80       	ldd	r0, Z+1	; 0x01
    3538:	f2 81       	ldd	r31, Z+2	; 0x02
    353a:	e0 2d       	mov	r30, r0
    353c:	17 96       	adiw	r26, 0x07	; 7
    353e:	fc 93       	st	X, r31
    3540:	ee 93       	st	-X, r30
    3542:	16 97       	sbiw	r26, 0x06	; 6
    3544:	46 81       	ldd	r20, Z+6	; 0x06
    3546:	57 81       	ldd	r21, Z+7	; 0x07
    3548:	19 96       	adiw	r26, 0x09	; 9
    354a:	5c 93       	st	X, r21
    354c:	4e 93       	st	-X, r20
    354e:	18 97       	sbiw	r26, 0x08	; 8
    3550:	c6 81       	ldd	r28, Z+6	; 0x06
    3552:	d7 81       	ldd	r29, Z+7	; 0x07
    3554:	3d 83       	std	Y+5, r19	; 0x05
    3556:	2c 83       	std	Y+4, r18	; 0x04
    3558:	37 83       	std	Z+7, r19	; 0x07
    355a:	26 83       	std	Z+6, r18	; 0x06
    355c:	5a 96       	adiw	r26, 0x1a	; 26
    355e:	ec 91       	ld	r30, X
    3560:	5a 97       	sbiw	r26, 0x1a	; 26
    3562:	8e 9f       	mul	r24, r30
    3564:	f0 01       	movw	r30, r0
    3566:	11 24       	eor	r1, r1
    3568:	e2 5a       	subi	r30, 0xA2	; 162
    356a:	f8 4e       	sbci	r31, 0xE8	; 232
    356c:	1d 96       	adiw	r26, 0x0d	; 13
    356e:	fc 93       	st	X, r31
    3570:	ee 93       	st	-X, r30
    3572:	1c 97       	sbiw	r26, 0x0c	; 12
    3574:	80 81       	ld	r24, Z
    3576:	8f 5f       	subi	r24, 0xFF	; 255
    3578:	80 83       	st	Z, r24
    357a:	5a 96       	adiw	r26, 0x1a	; 26
    357c:	9c 91       	ld	r25, X
    357e:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    3582:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    3586:	82 8d       	ldd	r24, Z+26	; 0x1a
    3588:	89 17       	cp	r24, r25
    358a:	10 f4       	brcc	.+4      	; 0x3590 <xTaskGenericNotify+0x1d4>
    358c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vPortYield>
    3590:	0f 90       	pop	r0
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	80 2f       	mov	r24, r16
    3596:	df 91       	pop	r29
    3598:	cf 91       	pop	r28
    359a:	0f 91       	pop	r16
    359c:	ff 90       	pop	r15
    359e:	ef 90       	pop	r14
    35a0:	bf 90       	pop	r11
    35a2:	af 90       	pop	r10
    35a4:	9f 90       	pop	r9
    35a6:	8f 90       	pop	r8
    35a8:	08 95       	ret

000035aa <xTaskGenericNotifyFromISR>:
    35aa:	8f 92       	push	r8
    35ac:	9f 92       	push	r9
    35ae:	af 92       	push	r10
    35b0:	bf 92       	push	r11
    35b2:	cf 92       	push	r12
    35b4:	df 92       	push	r13
    35b6:	ef 92       	push	r14
    35b8:	ff 92       	push	r15
    35ba:	0f 93       	push	r16
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	dc 01       	movw	r26, r24
    35c2:	e1 14       	cp	r14, r1
    35c4:	f1 04       	cpc	r15, r1
    35c6:	89 f0       	breq	.+34     	; 0x35ea <xTaskGenericNotifyFromISR+0x40>
    35c8:	e6 2f       	mov	r30, r22
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	ee 0f       	add	r30, r30
    35ce:	ff 1f       	adc	r31, r31
    35d0:	ee 0f       	add	r30, r30
    35d2:	ff 1f       	adc	r31, r31
    35d4:	e8 0f       	add	r30, r24
    35d6:	f9 1f       	adc	r31, r25
    35d8:	87 a4       	ldd	r8, Z+47	; 0x2f
    35da:	90 a8       	ldd	r9, Z+48	; 0x30
    35dc:	a1 a8       	ldd	r10, Z+49	; 0x31
    35de:	b2 a8       	ldd	r11, Z+50	; 0x32
    35e0:	f7 01       	movw	r30, r14
    35e2:	80 82       	st	Z, r8
    35e4:	91 82       	std	Z+1, r9	; 0x01
    35e6:	a2 82       	std	Z+2, r10	; 0x02
    35e8:	b3 82       	std	Z+3, r11	; 0x03
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	fd 01       	movw	r30, r26
    35ee:	e6 0f       	add	r30, r22
    35f0:	f7 1f       	adc	r31, r23
    35f2:	93 a9       	ldd	r25, Z+51	; 0x33
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	83 ab       	std	Z+51, r24	; 0x33
    35f8:	02 30       	cpi	r16, 0x02	; 2
    35fa:	01 f1       	breq	.+64     	; 0x363c <xTaskGenericNotifyFromISR+0x92>
    35fc:	18 f4       	brcc	.+6      	; 0x3604 <xTaskGenericNotifyFromISR+0x5a>
    35fe:	01 30       	cpi	r16, 0x01	; 1
    3600:	31 f0       	breq	.+12     	; 0x360e <xTaskGenericNotifyFromISR+0x64>
    3602:	4d c0       	rjmp	.+154    	; 0x369e <xTaskGenericNotifyFromISR+0xf4>
    3604:	03 30       	cpi	r16, 0x03	; 3
    3606:	79 f1       	breq	.+94     	; 0x3666 <xTaskGenericNotifyFromISR+0xbc>
    3608:	04 30       	cpi	r16, 0x04	; 4
    360a:	d1 f1       	breq	.+116    	; 0x3680 <xTaskGenericNotifyFromISR+0xd6>
    360c:	48 c0       	rjmp	.+144    	; 0x369e <xTaskGenericNotifyFromISR+0xf4>
    360e:	66 0f       	add	r22, r22
    3610:	77 1f       	adc	r23, r23
    3612:	66 0f       	add	r22, r22
    3614:	77 1f       	adc	r23, r23
    3616:	fd 01       	movw	r30, r26
    3618:	e6 0f       	add	r30, r22
    361a:	f7 1f       	adc	r31, r23
    361c:	87 a4       	ldd	r8, Z+47	; 0x2f
    361e:	90 a8       	ldd	r9, Z+48	; 0x30
    3620:	a1 a8       	ldd	r10, Z+49	; 0x31
    3622:	b2 a8       	ldd	r11, Z+50	; 0x32
    3624:	ba 01       	movw	r22, r20
    3626:	a9 01       	movw	r20, r18
    3628:	48 29       	or	r20, r8
    362a:	59 29       	or	r21, r9
    362c:	6a 29       	or	r22, r10
    362e:	7b 29       	or	r23, r11
    3630:	47 a7       	std	Z+47, r20	; 0x2f
    3632:	50 ab       	std	Z+48, r21	; 0x30
    3634:	61 ab       	std	Z+49, r22	; 0x31
    3636:	72 ab       	std	Z+50, r23	; 0x32
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	34 c0       	rjmp	.+104    	; 0x36a4 <xTaskGenericNotifyFromISR+0xfa>
    363c:	66 0f       	add	r22, r22
    363e:	77 1f       	adc	r23, r23
    3640:	66 0f       	add	r22, r22
    3642:	77 1f       	adc	r23, r23
    3644:	fd 01       	movw	r30, r26
    3646:	e6 0f       	add	r30, r22
    3648:	f7 1f       	adc	r31, r23
    364a:	47 a5       	ldd	r20, Z+47	; 0x2f
    364c:	50 a9       	ldd	r21, Z+48	; 0x30
    364e:	61 a9       	ldd	r22, Z+49	; 0x31
    3650:	72 a9       	ldd	r23, Z+50	; 0x32
    3652:	4f 5f       	subi	r20, 0xFF	; 255
    3654:	5f 4f       	sbci	r21, 0xFF	; 255
    3656:	6f 4f       	sbci	r22, 0xFF	; 255
    3658:	7f 4f       	sbci	r23, 0xFF	; 255
    365a:	47 a7       	std	Z+47, r20	; 0x2f
    365c:	50 ab       	std	Z+48, r21	; 0x30
    365e:	61 ab       	std	Z+49, r22	; 0x31
    3660:	72 ab       	std	Z+50, r23	; 0x32
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	1f c0       	rjmp	.+62     	; 0x36a4 <xTaskGenericNotifyFromISR+0xfa>
    3666:	66 0f       	add	r22, r22
    3668:	77 1f       	adc	r23, r23
    366a:	66 0f       	add	r22, r22
    366c:	77 1f       	adc	r23, r23
    366e:	fd 01       	movw	r30, r26
    3670:	e6 0f       	add	r30, r22
    3672:	f7 1f       	adc	r31, r23
    3674:	27 a7       	std	Z+47, r18	; 0x2f
    3676:	30 ab       	std	Z+48, r19	; 0x30
    3678:	41 ab       	std	Z+49, r20	; 0x31
    367a:	52 ab       	std	Z+50, r21	; 0x32
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	12 c0       	rjmp	.+36     	; 0x36a4 <xTaskGenericNotifyFromISR+0xfa>
    3680:	92 30       	cpi	r25, 0x02	; 2
    3682:	79 f0       	breq	.+30     	; 0x36a2 <xTaskGenericNotifyFromISR+0xf8>
    3684:	66 0f       	add	r22, r22
    3686:	77 1f       	adc	r23, r23
    3688:	66 0f       	add	r22, r22
    368a:	77 1f       	adc	r23, r23
    368c:	fd 01       	movw	r30, r26
    368e:	e6 0f       	add	r30, r22
    3690:	f7 1f       	adc	r31, r23
    3692:	27 a7       	std	Z+47, r18	; 0x2f
    3694:	30 ab       	std	Z+48, r19	; 0x30
    3696:	41 ab       	std	Z+49, r20	; 0x31
    3698:	52 ab       	std	Z+50, r21	; 0x32
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	03 c0       	rjmp	.+6      	; 0x36a4 <xTaskGenericNotifyFromISR+0xfa>
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	01 c0       	rjmp	.+2      	; 0x36a4 <xTaskGenericNotifyFromISR+0xfa>
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	91 30       	cpi	r25, 0x01	; 1
    36a6:	09 f0       	breq	.+2      	; 0x36aa <xTaskGenericNotifyFromISR+0x100>
    36a8:	96 c0       	rjmp	.+300    	; 0x37d6 <xTaskGenericNotifyFromISR+0x22c>
    36aa:	90 91 0d 17 	lds	r25, 0x170D	; 0x80170d <uxSchedulerSuspended>
    36ae:	91 11       	cpse	r25, r1
    36b0:	5f c0       	rjmp	.+190    	; 0x3770 <xTaskGenericNotifyFromISR+0x1c6>
    36b2:	1c 96       	adiw	r26, 0x0c	; 12
    36b4:	ed 91       	ld	r30, X+
    36b6:	fc 91       	ld	r31, X
    36b8:	1d 97       	sbiw	r26, 0x0d	; 13
    36ba:	16 96       	adiw	r26, 0x06	; 6
    36bc:	cd 91       	ld	r28, X+
    36be:	dc 91       	ld	r29, X
    36c0:	17 97       	sbiw	r26, 0x07	; 7
    36c2:	18 96       	adiw	r26, 0x08	; 8
    36c4:	2d 91       	ld	r18, X+
    36c6:	3c 91       	ld	r19, X
    36c8:	19 97       	sbiw	r26, 0x09	; 9
    36ca:	3f 83       	std	Y+7, r19	; 0x07
    36cc:	2e 83       	std	Y+6, r18	; 0x06
    36ce:	18 96       	adiw	r26, 0x08	; 8
    36d0:	cd 91       	ld	r28, X+
    36d2:	dc 91       	ld	r29, X
    36d4:	19 97       	sbiw	r26, 0x09	; 9
    36d6:	16 96       	adiw	r26, 0x06	; 6
    36d8:	2d 91       	ld	r18, X+
    36da:	3c 91       	ld	r19, X
    36dc:	17 97       	sbiw	r26, 0x07	; 7
    36de:	3d 83       	std	Y+5, r19	; 0x05
    36e0:	2c 83       	std	Y+4, r18	; 0x04
    36e2:	41 81       	ldd	r20, Z+1	; 0x01
    36e4:	52 81       	ldd	r21, Z+2	; 0x02
    36e6:	9d 01       	movw	r18, r26
    36e8:	2e 5f       	subi	r18, 0xFE	; 254
    36ea:	3f 4f       	sbci	r19, 0xFF	; 255
    36ec:	42 17       	cp	r20, r18
    36ee:	53 07       	cpc	r21, r19
    36f0:	31 f4       	brne	.+12     	; 0x36fe <xTaskGenericNotifyFromISR+0x154>
    36f2:	18 96       	adiw	r26, 0x08	; 8
    36f4:	4d 91       	ld	r20, X+
    36f6:	5c 91       	ld	r21, X
    36f8:	19 97       	sbiw	r26, 0x09	; 9
    36fa:	52 83       	std	Z+2, r21	; 0x02
    36fc:	41 83       	std	Z+1, r20	; 0x01
    36fe:	1d 96       	adiw	r26, 0x0d	; 13
    3700:	1c 92       	st	X, r1
    3702:	1e 92       	st	-X, r1
    3704:	1c 97       	sbiw	r26, 0x0c	; 12
    3706:	90 81       	ld	r25, Z
    3708:	91 50       	subi	r25, 0x01	; 1
    370a:	90 83       	st	Z, r25
    370c:	5a 96       	adiw	r26, 0x1a	; 26
    370e:	ec 91       	ld	r30, X
    3710:	5a 97       	sbiw	r26, 0x1a	; 26
    3712:	90 91 1c 17 	lds	r25, 0x171C	; 0x80171c <uxTopReadyPriority>
    3716:	9e 17       	cp	r25, r30
    3718:	10 f4       	brcc	.+4      	; 0x371e <xTaskGenericNotifyFromISR+0x174>
    371a:	e0 93 1c 17 	sts	0x171C, r30	; 0x80171c <uxTopReadyPriority>
    371e:	9b e0       	ldi	r25, 0x0B	; 11
    3720:	9e 9f       	mul	r25, r30
    3722:	f0 01       	movw	r30, r0
    3724:	11 24       	eor	r1, r1
    3726:	e2 5a       	subi	r30, 0xA2	; 162
    3728:	f8 4e       	sbci	r31, 0xE8	; 232
    372a:	01 80       	ldd	r0, Z+1	; 0x01
    372c:	f2 81       	ldd	r31, Z+2	; 0x02
    372e:	e0 2d       	mov	r30, r0
    3730:	17 96       	adiw	r26, 0x07	; 7
    3732:	fc 93       	st	X, r31
    3734:	ee 93       	st	-X, r30
    3736:	16 97       	sbiw	r26, 0x06	; 6
    3738:	46 81       	ldd	r20, Z+6	; 0x06
    373a:	57 81       	ldd	r21, Z+7	; 0x07
    373c:	19 96       	adiw	r26, 0x09	; 9
    373e:	5c 93       	st	X, r21
    3740:	4e 93       	st	-X, r20
    3742:	18 97       	sbiw	r26, 0x08	; 8
    3744:	c6 81       	ldd	r28, Z+6	; 0x06
    3746:	d7 81       	ldd	r29, Z+7	; 0x07
    3748:	3d 83       	std	Y+5, r19	; 0x05
    374a:	2c 83       	std	Y+4, r18	; 0x04
    374c:	37 83       	std	Z+7, r19	; 0x07
    374e:	26 83       	std	Z+6, r18	; 0x06
    3750:	5a 96       	adiw	r26, 0x1a	; 26
    3752:	ec 91       	ld	r30, X
    3754:	5a 97       	sbiw	r26, 0x1a	; 26
    3756:	9e 9f       	mul	r25, r30
    3758:	f0 01       	movw	r30, r0
    375a:	11 24       	eor	r1, r1
    375c:	e2 5a       	subi	r30, 0xA2	; 162
    375e:	f8 4e       	sbci	r31, 0xE8	; 232
    3760:	1d 96       	adiw	r26, 0x0d	; 13
    3762:	fc 93       	st	X, r31
    3764:	ee 93       	st	-X, r30
    3766:	1c 97       	sbiw	r26, 0x0c	; 12
    3768:	90 81       	ld	r25, Z
    376a:	9f 5f       	subi	r25, 0xFF	; 255
    376c:	90 83       	st	Z, r25
    376e:	21 c0       	rjmp	.+66     	; 0x37b2 <xTaskGenericNotifyFromISR+0x208>
    3770:	69 e3       	ldi	r22, 0x39	; 57
    3772:	77 e1       	ldi	r23, 0x17	; 23
    3774:	fb 01       	movw	r30, r22
    3776:	c1 81       	ldd	r28, Z+1	; 0x01
    3778:	d2 81       	ldd	r29, Z+2	; 0x02
    377a:	53 96       	adiw	r26, 0x13	; 19
    377c:	dc 93       	st	X, r29
    377e:	ce 93       	st	-X, r28
    3780:	52 97       	sbiw	r26, 0x12	; 18
    3782:	2e 81       	ldd	r18, Y+6	; 0x06
    3784:	3f 81       	ldd	r19, Y+7	; 0x07
    3786:	55 96       	adiw	r26, 0x15	; 21
    3788:	3c 93       	st	X, r19
    378a:	2e 93       	st	-X, r18
    378c:	54 97       	sbiw	r26, 0x14	; 20
    378e:	4e 81       	ldd	r20, Y+6	; 0x06
    3790:	5f 81       	ldd	r21, Y+7	; 0x07
    3792:	9d 01       	movw	r18, r26
    3794:	22 5f       	subi	r18, 0xF2	; 242
    3796:	3f 4f       	sbci	r19, 0xFF	; 255
    3798:	fa 01       	movw	r30, r20
    379a:	35 83       	std	Z+5, r19	; 0x05
    379c:	24 83       	std	Z+4, r18	; 0x04
    379e:	3f 83       	std	Y+7, r19	; 0x07
    37a0:	2e 83       	std	Y+6, r18	; 0x06
    37a2:	59 96       	adiw	r26, 0x19	; 25
    37a4:	7c 93       	st	X, r23
    37a6:	6e 93       	st	-X, r22
    37a8:	58 97       	sbiw	r26, 0x18	; 24
    37aa:	fb 01       	movw	r30, r22
    37ac:	90 81       	ld	r25, Z
    37ae:	9f 5f       	subi	r25, 0xFF	; 255
    37b0:	90 83       	st	Z, r25
    37b2:	5a 96       	adiw	r26, 0x1a	; 26
    37b4:	2c 91       	ld	r18, X
    37b6:	e0 91 cc 17 	lds	r30, 0x17CC	; 0x8017cc <pxCurrentTCB>
    37ba:	f0 91 cd 17 	lds	r31, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>
    37be:	92 8d       	ldd	r25, Z+26	; 0x1a
    37c0:	92 17       	cp	r25, r18
    37c2:	48 f4       	brcc	.+18     	; 0x37d6 <xTaskGenericNotifyFromISR+0x22c>
    37c4:	c1 14       	cp	r12, r1
    37c6:	d1 04       	cpc	r13, r1
    37c8:	19 f0       	breq	.+6      	; 0x37d0 <xTaskGenericNotifyFromISR+0x226>
    37ca:	91 e0       	ldi	r25, 0x01	; 1
    37cc:	f6 01       	movw	r30, r12
    37ce:	90 83       	st	Z, r25
    37d0:	91 e0       	ldi	r25, 0x01	; 1
    37d2:	90 93 16 17 	sts	0x1716, r25	; 0x801716 <xYieldPending>
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	0f 91       	pop	r16
    37dc:	ff 90       	pop	r15
    37de:	ef 90       	pop	r14
    37e0:	df 90       	pop	r13
    37e2:	cf 90       	pop	r12
    37e4:	bf 90       	pop	r11
    37e6:	af 90       	pop	r10
    37e8:	9f 90       	pop	r9
    37ea:	8f 90       	pop	r8
    37ec:	08 95       	ret

000037ee <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    37ee:	00 97       	sbiw	r24, 0x00	; 0
    37f0:	21 f4       	brne	.+8      	; 0x37fa <xTaskGenericNotifyStateClear+0xc>
    37f2:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <pxCurrentTCB>
    37f6:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    3800:	70 e0       	ldi	r23, 0x00	; 0
    3802:	fc 01       	movw	r30, r24
    3804:	e6 0f       	add	r30, r22
    3806:	f7 1f       	adc	r31, r23
    3808:	23 a9       	ldd	r18, Z+51	; 0x33
    380a:	22 30       	cpi	r18, 0x02	; 2
    380c:	31 f4       	brne	.+12     	; 0x381a <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    380e:	fc 01       	movw	r30, r24
    3810:	e6 0f       	add	r30, r22
    3812:	f7 1f       	adc	r31, r23
    3814:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	01 c0       	rjmp	.+2      	; 0x381c <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    381a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    381c:	0f 90       	pop	r0
    381e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    3820:	08 95       	ret

00003822 <prvGetNextExpireTime>:
    3822:	dc 01       	movw	r26, r24
    3824:	e0 91 d8 17 	lds	r30, 0x17D8	; 0x8017d8 <pxCurrentTimerList>
    3828:	f0 91 d9 17 	lds	r31, 0x17D9	; 0x8017d9 <pxCurrentTimerList+0x1>
    382c:	80 81       	ld	r24, Z
    382e:	91 e0       	ldi	r25, 0x01	; 1
    3830:	81 11       	cpse	r24, r1
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	9c 93       	st	X, r25
    3836:	91 11       	cpse	r25, r1
    3838:	08 c0       	rjmp	.+16     	; 0x384a <prvGetNextExpireTime+0x28>
    383a:	07 80       	ldd	r0, Z+7	; 0x07
    383c:	f0 85       	ldd	r31, Z+8	; 0x08
    383e:	e0 2d       	mov	r30, r0
    3840:	60 81       	ld	r22, Z
    3842:	71 81       	ldd	r23, Z+1	; 0x01
    3844:	82 81       	ldd	r24, Z+2	; 0x02
    3846:	93 81       	ldd	r25, Z+3	; 0x03
    3848:	08 95       	ret
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	cb 01       	movw	r24, r22
    3850:	08 95       	ret

00003852 <prvInsertTimerInActiveList>:
    3852:	cf 92       	push	r12
    3854:	df 92       	push	r13
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	fc 01       	movw	r30, r24
    3860:	42 83       	std	Z+2, r20	; 0x02
    3862:	53 83       	std	Z+3, r21	; 0x03
    3864:	64 83       	std	Z+4, r22	; 0x04
    3866:	75 83       	std	Z+5, r23	; 0x05
    3868:	93 87       	std	Z+11, r25	; 0x0b
    386a:	82 87       	std	Z+10, r24	; 0x0a
    386c:	04 17       	cp	r16, r20
    386e:	15 07       	cpc	r17, r21
    3870:	26 07       	cpc	r18, r22
    3872:	37 07       	cpc	r19, r23
    3874:	c0 f0       	brcs	.+48     	; 0x38a6 <prvInsertTimerInActiveList+0x54>
    3876:	0c 19       	sub	r16, r12
    3878:	1d 09       	sbc	r17, r13
    387a:	2e 09       	sbc	r18, r14
    387c:	3f 09       	sbc	r19, r15
    387e:	86 85       	ldd	r24, Z+14	; 0x0e
    3880:	97 85       	ldd	r25, Z+15	; 0x0f
    3882:	a0 89       	ldd	r26, Z+16	; 0x10
    3884:	b1 89       	ldd	r27, Z+17	; 0x11
    3886:	08 17       	cp	r16, r24
    3888:	19 07       	cpc	r17, r25
    388a:	2a 07       	cpc	r18, r26
    388c:	3b 07       	cpc	r19, r27
    388e:	00 f5       	brcc	.+64     	; 0x38d0 <prvInsertTimerInActiveList+0x7e>
    3890:	bf 01       	movw	r22, r30
    3892:	6e 5f       	subi	r22, 0xFE	; 254
    3894:	7f 4f       	sbci	r23, 0xFF	; 255
    3896:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxOverflowTimerList>
    389a:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxOverflowTimerList+0x1>
    389e:	0e 94 3b 07 	call	0xe76	; 0xe76 <vListInsert>
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	18 c0       	rjmp	.+48     	; 0x38d6 <prvInsertTimerInActiveList+0x84>
    38a6:	0c 15       	cp	r16, r12
    38a8:	1d 05       	cpc	r17, r13
    38aa:	2e 05       	cpc	r18, r14
    38ac:	3f 05       	cpc	r19, r15
    38ae:	28 f4       	brcc	.+10     	; 0x38ba <prvInsertTimerInActiveList+0x68>
    38b0:	4c 15       	cp	r20, r12
    38b2:	5d 05       	cpc	r21, r13
    38b4:	6e 05       	cpc	r22, r14
    38b6:	7f 05       	cpc	r23, r15
    38b8:	68 f4       	brcc	.+26     	; 0x38d4 <prvInsertTimerInActiveList+0x82>
    38ba:	bf 01       	movw	r22, r30
    38bc:	6e 5f       	subi	r22, 0xFE	; 254
    38be:	7f 4f       	sbci	r23, 0xFF	; 255
    38c0:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <pxCurrentTimerList>
    38c4:	90 91 d9 17 	lds	r25, 0x17D9	; 0x8017d9 <pxCurrentTimerList+0x1>
    38c8:	0e 94 3b 07 	call	0xe76	; 0xe76 <vListInsert>
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	03 c0       	rjmp	.+6      	; 0x38d6 <prvInsertTimerInActiveList+0x84>
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	01 c0       	rjmp	.+2      	; 0x38d6 <prvInsertTimerInActiveList+0x84>
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	1f 91       	pop	r17
    38d8:	0f 91       	pop	r16
    38da:	ff 90       	pop	r15
    38dc:	ef 90       	pop	r14
    38de:	df 90       	pop	r13
    38e0:	cf 90       	pop	r12
    38e2:	08 95       	ret

000038e4 <prvCheckForValidListAndQueue>:
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	0f 92       	push	r0
    38ea:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xTimerQueue>
    38ee:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <xTimerQueue+0x1>
    38f2:	89 2b       	or	r24, r25
    38f4:	e9 f4       	brne	.+58     	; 0x3930 <prvCheckForValidListAndQueue+0x4c>
    38f6:	85 ee       	ldi	r24, 0xE5	; 229
    38f8:	97 e1       	ldi	r25, 0x17	; 23
    38fa:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInitialise>
    38fe:	8a ed       	ldi	r24, 0xDA	; 218
    3900:	97 e1       	ldi	r25, 0x17	; 23
    3902:	0e 94 26 07 	call	0xe4c	; 0xe4c <vListInitialise>
    3906:	85 ee       	ldi	r24, 0xE5	; 229
    3908:	97 e1       	ldi	r25, 0x17	; 23
    390a:	90 93 d9 17 	sts	0x17D9, r25	; 0x8017d9 <pxCurrentTimerList+0x1>
    390e:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <pxCurrentTimerList>
    3912:	8a ed       	ldi	r24, 0xDA	; 218
    3914:	97 e1       	ldi	r25, 0x17	; 23
    3916:	90 93 d7 17 	sts	0x17D7, r25	; 0x8017d7 <pxOverflowTimerList+0x1>
    391a:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <pxOverflowTimerList>
    391e:	40 e0       	ldi	r20, 0x00	; 0
    3920:	67 e0       	ldi	r22, 0x07	; 7
    3922:	8a e0       	ldi	r24, 0x0A	; 10
    3924:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <xQueueGenericCreate>
    3928:	90 93 d5 17 	sts	0x17D5, r25	; 0x8017d5 <xTimerQueue+0x1>
    392c:	80 93 d4 17 	sts	0x17D4, r24	; 0x8017d4 <xTimerQueue>
    3930:	0f 90       	pop	r0
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	08 95       	ret

00003936 <xTimerCreateTimerTask>:
    3936:	ef 92       	push	r14
    3938:	ff 92       	push	r15
    393a:	0f 93       	push	r16
    393c:	d3 df       	rcall	.-90     	; 0x38e4 <prvCheckForValidListAndQueue>
    393e:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xTimerQueue>
    3942:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <xTimerQueue+0x1>
    3946:	89 2b       	or	r24, r25
    3948:	91 f0       	breq	.+36     	; 0x396e <xTimerCreateTimerTask+0x38>
    394a:	0f 2e       	mov	r0, r31
    394c:	f2 ed       	ldi	r31, 0xD2	; 210
    394e:	ef 2e       	mov	r14, r31
    3950:	f7 e1       	ldi	r31, 0x17	; 23
    3952:	ff 2e       	mov	r15, r31
    3954:	f0 2d       	mov	r31, r0
    3956:	03 e0       	ldi	r16, 0x03	; 3
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	40 ec       	ldi	r20, 0xC0	; 192
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	65 e7       	ldi	r22, 0x75	; 117
    3962:	73 e0       	ldi	r23, 0x03	; 3
    3964:	88 e5       	ldi	r24, 0x58	; 88
    3966:	91 e0       	ldi	r25, 0x01	; 1
    3968:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
    396c:	01 c0       	rjmp	.+2      	; 0x3970 <xTimerCreateTimerTask+0x3a>
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	0f 91       	pop	r16
    3972:	ff 90       	pop	r15
    3974:	ef 90       	pop	r14
    3976:	08 95       	ret

00003978 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    3978:	8f 92       	push	r8
    397a:	9f 92       	push	r9
    397c:	af 92       	push	r10
    397e:	bf 92       	push	r11
    3980:	cf 92       	push	r12
    3982:	df 92       	push	r13
    3984:	ef 92       	push	r14
    3986:	ff 92       	push	r15
    3988:	0f 93       	push	r16
    398a:	1f 93       	push	r17
    398c:	cf 93       	push	r28
    398e:	df 93       	push	r29
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
    3994:	27 97       	sbiw	r28, 0x07	; 7
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    39a0:	e0 91 d4 17 	lds	r30, 0x17D4	; 0x8017d4 <xTimerQueue>
    39a4:	f0 91 d5 17 	lds	r31, 0x17D5	; 0x8017d5 <xTimerQueue+0x1>
    39a8:	30 97       	sbiw	r30, 0x00	; 0
    39aa:	81 f1       	breq	.+96     	; 0x3a0c <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    39ac:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    39ae:	2a 83       	std	Y+2, r18	; 0x02
    39b0:	3b 83       	std	Y+3, r19	; 0x03
    39b2:	4c 83       	std	Y+4, r20	; 0x04
    39b4:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    39b6:	9f 83       	std	Y+7, r25	; 0x07
    39b8:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    39ba:	66 30       	cpi	r22, 0x06	; 6
    39bc:	f4 f4       	brge	.+60     	; 0x39fa <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    39be:	c3 da       	rcall	.-2682   	; 0x2f46 <xTaskGetSchedulerState>
    39c0:	82 30       	cpi	r24, 0x02	; 2
    39c2:	69 f4       	brne	.+26     	; 0x39de <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    39c4:	00 e0       	ldi	r16, 0x00	; 0
    39c6:	a7 01       	movw	r20, r14
    39c8:	96 01       	movw	r18, r12
    39ca:	be 01       	movw	r22, r28
    39cc:	6f 5f       	subi	r22, 0xFF	; 255
    39ce:	7f 4f       	sbci	r23, 0xFF	; 255
    39d0:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xTimerQueue>
    39d4:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <xTimerQueue+0x1>
    39d8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xQueueGenericSend>
    39dc:	18 c0       	rjmp	.+48     	; 0x3a0e <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    39de:	00 e0       	ldi	r16, 0x00	; 0
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	a9 01       	movw	r20, r18
    39e6:	be 01       	movw	r22, r28
    39e8:	6f 5f       	subi	r22, 0xFF	; 255
    39ea:	7f 4f       	sbci	r23, 0xFF	; 255
    39ec:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xTimerQueue>
    39f0:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <xTimerQueue+0x1>
    39f4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xQueueGenericSend>
    39f8:	0a c0       	rjmp	.+20     	; 0x3a0e <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	a8 01       	movw	r20, r16
    39fe:	be 01       	movw	r22, r28
    3a00:	6f 5f       	subi	r22, 0xFF	; 255
    3a02:	7f 4f       	sbci	r23, 0xFF	; 255
    3a04:	cf 01       	movw	r24, r30
    3a06:	0e 94 bc 0a 	call	0x1578	; 0x1578 <xQueueGenericSendFromISR>
    3a0a:	01 c0       	rjmp	.+2      	; 0x3a0e <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3a0e:	27 96       	adiw	r28, 0x07	; 7
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	df 91       	pop	r29
    3a1c:	cf 91       	pop	r28
    3a1e:	1f 91       	pop	r17
    3a20:	0f 91       	pop	r16
    3a22:	ff 90       	pop	r15
    3a24:	ef 90       	pop	r14
    3a26:	df 90       	pop	r13
    3a28:	cf 90       	pop	r12
    3a2a:	bf 90       	pop	r11
    3a2c:	af 90       	pop	r10
    3a2e:	9f 90       	pop	r9
    3a30:	8f 90       	pop	r8
    3a32:	08 95       	ret

00003a34 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3a34:	8f 92       	push	r8
    3a36:	9f 92       	push	r9
    3a38:	af 92       	push	r10
    3a3a:	bf 92       	push	r11
    3a3c:	cf 92       	push	r12
    3a3e:	df 92       	push	r13
    3a40:	ef 92       	push	r14
    3a42:	ff 92       	push	r15
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	cf 93       	push	r28
    3a4a:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3a4c:	3b c0       	rjmp	.+118    	; 0x3ac4 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3a4e:	07 80       	ldd	r0, Z+7	; 0x07
    3a50:	f0 85       	ldd	r31, Z+8	; 0x08
    3a52:	e0 2d       	mov	r30, r0
    3a54:	80 80       	ld	r8, Z
    3a56:	91 80       	ldd	r9, Z+1	; 0x01
    3a58:	a2 80       	ldd	r10, Z+2	; 0x02
    3a5a:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a5c:	c0 85       	ldd	r28, Z+8	; 0x08
    3a5e:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a60:	8e 01       	movw	r16, r28
    3a62:	0e 5f       	subi	r16, 0xFE	; 254
    3a64:	1f 4f       	sbci	r17, 0xFF	; 255
    3a66:	c8 01       	movw	r24, r16
    3a68:	0e 94 78 07 	call	0xef0	; 0xef0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a6c:	ec 89       	ldd	r30, Y+20	; 0x14
    3a6e:	fd 89       	ldd	r31, Y+21	; 0x15
    3a70:	ce 01       	movw	r24, r28
    3a72:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3a74:	8e 89       	ldd	r24, Y+22	; 0x16
    3a76:	82 ff       	sbrs	r24, 2
    3a78:	25 c0       	rjmp	.+74     	; 0x3ac4 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3a7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a7e:	a8 89       	ldd	r26, Y+16	; 0x10
    3a80:	b9 89       	ldd	r27, Y+17	; 0x11
    3a82:	88 0d       	add	r24, r8
    3a84:	99 1d       	adc	r25, r9
    3a86:	aa 1d       	adc	r26, r10
    3a88:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3a8a:	88 16       	cp	r8, r24
    3a8c:	99 06       	cpc	r9, r25
    3a8e:	aa 06       	cpc	r10, r26
    3a90:	bb 06       	cpc	r11, r27
    3a92:	70 f4       	brcc	.+28     	; 0x3ab0 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3a94:	8a 83       	std	Y+2, r24	; 0x02
    3a96:	9b 83       	std	Y+3, r25	; 0x03
    3a98:	ac 83       	std	Y+4, r26	; 0x04
    3a9a:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3a9c:	db 87       	std	Y+11, r29	; 0x0b
    3a9e:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3aa0:	b8 01       	movw	r22, r16
    3aa2:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <pxCurrentTimerList>
    3aa6:	90 91 d9 17 	lds	r25, 0x17D9	; 0x8017d9 <pxCurrentTimerList+0x1>
    3aaa:	0e 94 3b 07 	call	0xe76	; 0xe76 <vListInsert>
    3aae:	0a c0       	rjmp	.+20     	; 0x3ac4 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3ab0:	c1 2c       	mov	r12, r1
    3ab2:	d1 2c       	mov	r13, r1
    3ab4:	76 01       	movw	r14, r12
    3ab6:	00 e0       	ldi	r16, 0x00	; 0
    3ab8:	10 e0       	ldi	r17, 0x00	; 0
    3aba:	a5 01       	movw	r20, r10
    3abc:	94 01       	movw	r18, r8
    3abe:	60 e0       	ldi	r22, 0x00	; 0
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	5a df       	rcall	.-332    	; 0x3978 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3ac4:	e0 91 d8 17 	lds	r30, 0x17D8	; 0x8017d8 <pxCurrentTimerList>
    3ac8:	f0 91 d9 17 	lds	r31, 0x17D9	; 0x8017d9 <pxCurrentTimerList+0x1>
    3acc:	80 81       	ld	r24, Z
    3ace:	81 11       	cpse	r24, r1
    3ad0:	be cf       	rjmp	.-132    	; 0x3a4e <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3ad2:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxOverflowTimerList>
    3ad6:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxOverflowTimerList+0x1>
    3ada:	90 93 d9 17 	sts	0x17D9, r25	; 0x8017d9 <pxCurrentTimerList+0x1>
    3ade:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3ae2:	f0 93 d7 17 	sts	0x17D7, r31	; 0x8017d7 <pxOverflowTimerList+0x1>
    3ae6:	e0 93 d6 17 	sts	0x17D6, r30	; 0x8017d6 <pxOverflowTimerList>
    }
    3aea:	df 91       	pop	r29
    3aec:	cf 91       	pop	r28
    3aee:	1f 91       	pop	r17
    3af0:	0f 91       	pop	r16
    3af2:	ff 90       	pop	r15
    3af4:	ef 90       	pop	r14
    3af6:	df 90       	pop	r13
    3af8:	cf 90       	pop	r12
    3afa:	bf 90       	pop	r11
    3afc:	af 90       	pop	r10
    3afe:	9f 90       	pop	r9
    3b00:	8f 90       	pop	r8
    3b02:	08 95       	ret

00003b04 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3b04:	cf 92       	push	r12
    3b06:	df 92       	push	r13
    3b08:	ef 92       	push	r14
    3b0a:	ff 92       	push	r15
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3b12:	0e 94 26 12 	call	0x244c	; 0x244c <xTaskGetTickCount>
    3b16:	6b 01       	movw	r12, r22
    3b18:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3b1a:	80 91 ce 17 	lds	r24, 0x17CE	; 0x8017ce <xLastTime.2436>
    3b1e:	90 91 cf 17 	lds	r25, 0x17CF	; 0x8017cf <xLastTime.2436+0x1>
    3b22:	a0 91 d0 17 	lds	r26, 0x17D0	; 0x8017d0 <xLastTime.2436+0x2>
    3b26:	b0 91 d1 17 	lds	r27, 0x17D1	; 0x8017d1 <xLastTime.2436+0x3>
    3b2a:	c8 16       	cp	r12, r24
    3b2c:	d9 06       	cpc	r13, r25
    3b2e:	ea 06       	cpc	r14, r26
    3b30:	fb 06       	cpc	r15, r27
    3b32:	20 f4       	brcc	.+8      	; 0x3b3c <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3b34:	7f df       	rcall	.-258    	; 0x3a34 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	88 83       	st	Y, r24
    3b3a:	01 c0       	rjmp	.+2      	; 0x3b3e <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3b3c:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3b3e:	c0 92 ce 17 	sts	0x17CE, r12	; 0x8017ce <xLastTime.2436>
    3b42:	d0 92 cf 17 	sts	0x17CF, r13	; 0x8017cf <xLastTime.2436+0x1>
    3b46:	e0 92 d0 17 	sts	0x17D0, r14	; 0x8017d0 <xLastTime.2436+0x2>
    3b4a:	f0 92 d1 17 	sts	0x17D1, r15	; 0x8017d1 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3b4e:	c7 01       	movw	r24, r14
    3b50:	b6 01       	movw	r22, r12
    3b52:	df 91       	pop	r29
    3b54:	cf 91       	pop	r28
    3b56:	ff 90       	pop	r15
    3b58:	ef 90       	pop	r14
    3b5a:	df 90       	pop	r13
    3b5c:	cf 90       	pop	r12
    3b5e:	08 95       	ret

00003b60 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3b60:	4f 92       	push	r4
    3b62:	5f 92       	push	r5
    3b64:	6f 92       	push	r6
    3b66:	7f 92       	push	r7
    3b68:	8f 92       	push	r8
    3b6a:	9f 92       	push	r9
    3b6c:	af 92       	push	r10
    3b6e:	bf 92       	push	r11
    3b70:	cf 92       	push	r12
    3b72:	df 92       	push	r13
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
    3b7c:	cf 93       	push	r28
    3b7e:	df 93       	push	r29
    3b80:	4b 01       	movw	r8, r22
    3b82:	5c 01       	movw	r10, r24
    3b84:	29 01       	movw	r4, r18
    3b86:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3b88:	e0 91 d8 17 	lds	r30, 0x17D8	; 0x8017d8 <pxCurrentTimerList>
    3b8c:	f0 91 d9 17 	lds	r31, 0x17D9	; 0x8017d9 <pxCurrentTimerList+0x1>
    3b90:	07 80       	ldd	r0, Z+7	; 0x07
    3b92:	f0 85       	ldd	r31, Z+8	; 0x08
    3b94:	e0 2d       	mov	r30, r0
    3b96:	c0 85       	ldd	r28, Z+8	; 0x08
    3b98:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b9a:	ce 01       	movw	r24, r28
    3b9c:	02 96       	adiw	r24, 0x02	; 2
    3b9e:	0e 94 78 07 	call	0xef0	; 0xef0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3ba2:	8e 89       	ldd	r24, Y+22	; 0x16
    3ba4:	82 ff       	sbrs	r24, 2
    3ba6:	1b c0       	rjmp	.+54     	; 0x3bde <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3ba8:	4e 85       	ldd	r20, Y+14	; 0x0e
    3baa:	5f 85       	ldd	r21, Y+15	; 0x0f
    3bac:	68 89       	ldd	r22, Y+16	; 0x10
    3bae:	79 89       	ldd	r23, Y+17	; 0x11
    3bb0:	48 0d       	add	r20, r8
    3bb2:	59 1d       	adc	r21, r9
    3bb4:	6a 1d       	adc	r22, r10
    3bb6:	7b 1d       	adc	r23, r11
    3bb8:	75 01       	movw	r14, r10
    3bba:	64 01       	movw	r12, r8
    3bbc:	93 01       	movw	r18, r6
    3bbe:	82 01       	movw	r16, r4
    3bc0:	ce 01       	movw	r24, r28
    3bc2:	47 de       	rcall	.-882    	; 0x3852 <prvInsertTimerInActiveList>
    3bc4:	88 23       	and	r24, r24
    3bc6:	69 f0       	breq	.+26     	; 0x3be2 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3bc8:	c1 2c       	mov	r12, r1
    3bca:	d1 2c       	mov	r13, r1
    3bcc:	76 01       	movw	r14, r12
    3bce:	00 e0       	ldi	r16, 0x00	; 0
    3bd0:	10 e0       	ldi	r17, 0x00	; 0
    3bd2:	a5 01       	movw	r20, r10
    3bd4:	94 01       	movw	r18, r8
    3bd6:	60 e0       	ldi	r22, 0x00	; 0
    3bd8:	ce 01       	movw	r24, r28
    3bda:	ce de       	rcall	.-612    	; 0x3978 <xTimerGenericCommand>
    3bdc:	02 c0       	rjmp	.+4      	; 0x3be2 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bde:	8e 7f       	andi	r24, 0xFE	; 254
    3be0:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3be2:	ec 89       	ldd	r30, Y+20	; 0x14
    3be4:	fd 89       	ldd	r31, Y+21	; 0x15
    3be6:	ce 01       	movw	r24, r28
    3be8:	19 95       	eicall
    }
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	1f 91       	pop	r17
    3bf0:	0f 91       	pop	r16
    3bf2:	ff 90       	pop	r15
    3bf4:	ef 90       	pop	r14
    3bf6:	df 90       	pop	r13
    3bf8:	cf 90       	pop	r12
    3bfa:	bf 90       	pop	r11
    3bfc:	af 90       	pop	r10
    3bfe:	9f 90       	pop	r9
    3c00:	8f 90       	pop	r8
    3c02:	7f 90       	pop	r7
    3c04:	6f 90       	pop	r6
    3c06:	5f 90       	pop	r5
    3c08:	4f 90       	pop	r4
    3c0a:	08 95       	ret

00003c0c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3c0c:	8f 92       	push	r8
    3c0e:	9f 92       	push	r9
    3c10:	af 92       	push	r10
    3c12:	bf 92       	push	r11
    3c14:	cf 92       	push	r12
    3c16:	df 92       	push	r13
    3c18:	ef 92       	push	r14
    3c1a:	ff 92       	push	r15
    3c1c:	1f 93       	push	r17
    3c1e:	cf 93       	push	r28
    3c20:	df 93       	push	r29
    3c22:	1f 92       	push	r1
    3c24:	cd b7       	in	r28, 0x3d	; 61
    3c26:	de b7       	in	r29, 0x3e	; 62
    3c28:	6b 01       	movw	r12, r22
    3c2a:	7c 01       	movw	r14, r24
    3c2c:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3c2e:	0e 94 20 12 	call	0x2440	; 0x2440 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c32:	ce 01       	movw	r24, r28
    3c34:	01 96       	adiw	r24, 0x01	; 1
    3c36:	66 df       	rcall	.-308    	; 0x3b04 <prvSampleTimeNow>
    3c38:	4b 01       	movw	r8, r22
    3c3a:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	81 11       	cpse	r24, r1
    3c40:	2d c0       	rjmp	.+90     	; 0x3c9c <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3c42:	11 11       	cpse	r17, r1
    3c44:	0d c0       	rjmp	.+26     	; 0x3c60 <prvProcessTimerOrBlockTask+0x54>
    3c46:	8c 14       	cp	r8, r12
    3c48:	9d 04       	cpc	r9, r13
    3c4a:	ae 04       	cpc	r10, r14
    3c4c:	bf 04       	cpc	r11, r15
    3c4e:	40 f0       	brcs	.+16     	; 0x3c60 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3c50:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3c54:	a5 01       	movw	r20, r10
    3c56:	94 01       	movw	r18, r8
    3c58:	c7 01       	movw	r24, r14
    3c5a:	b6 01       	movw	r22, r12
    3c5c:	81 df       	rcall	.-254    	; 0x3b60 <prvProcessExpiredTimer>
    3c5e:	20 c0       	rjmp	.+64     	; 0x3ca0 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3c60:	11 23       	and	r17, r17
    3c62:	41 f0       	breq	.+16     	; 0x3c74 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3c64:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxOverflowTimerList>
    3c68:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxOverflowTimerList+0x1>
    3c6c:	80 81       	ld	r24, Z
    3c6e:	11 e0       	ldi	r17, 0x01	; 1
    3c70:	81 11       	cpse	r24, r1
    3c72:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3c74:	b7 01       	movw	r22, r14
    3c76:	a6 01       	movw	r20, r12
    3c78:	48 19       	sub	r20, r8
    3c7a:	59 09       	sbc	r21, r9
    3c7c:	6a 09       	sbc	r22, r10
    3c7e:	7b 09       	sbc	r23, r11
    3c80:	21 2f       	mov	r18, r17
    3c82:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xTimerQueue>
    3c86:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <xTimerQueue+0x1>
    3c8a:	0e 94 37 0c 	call	0x186e	; 0x186e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3c8e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>
    3c92:	81 11       	cpse	r24, r1
    3c94:	05 c0       	rjmp	.+10     	; 0x3ca0 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3c96:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vPortYield>
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3c9c:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskResumeAll>
            }
        }
    }
    3ca0:	0f 90       	pop	r0
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	1f 91       	pop	r17
    3ca8:	ff 90       	pop	r15
    3caa:	ef 90       	pop	r14
    3cac:	df 90       	pop	r13
    3cae:	cf 90       	pop	r12
    3cb0:	bf 90       	pop	r11
    3cb2:	af 90       	pop	r10
    3cb4:	9f 90       	pop	r9
    3cb6:	8f 90       	pop	r8
    3cb8:	08 95       	ret

00003cba <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3cba:	af 92       	push	r10
    3cbc:	bf 92       	push	r11
    3cbe:	cf 92       	push	r12
    3cc0:	df 92       	push	r13
    3cc2:	ef 92       	push	r14
    3cc4:	ff 92       	push	r15
    3cc6:	0f 93       	push	r16
    3cc8:	1f 93       	push	r17
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	cd b7       	in	r28, 0x3d	; 61
    3cd0:	de b7       	in	r29, 0x3e	; 62
    3cd2:	28 97       	sbiw	r28, 0x08	; 8
    3cd4:	0f b6       	in	r0, 0x3f	; 63
    3cd6:	f8 94       	cli
    3cd8:	de bf       	out	0x3e, r29	; 62
    3cda:	0f be       	out	0x3f, r0	; 63
    3cdc:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3cde:	82 c0       	rjmp	.+260    	; 0x3de4 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	88 23       	and	r24, r24
    3ce4:	0c f4       	brge	.+2      	; 0x3ce8 <prvProcessReceivedCommands+0x2e>
    3ce6:	7e c0       	rjmp	.+252    	; 0x3de4 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3ce8:	ae 80       	ldd	r10, Y+6	; 0x06
    3cea:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3cec:	d5 01       	movw	r26, r10
    3cee:	1c 96       	adiw	r26, 0x0c	; 12
    3cf0:	8d 91       	ld	r24, X+
    3cf2:	9c 91       	ld	r25, X
    3cf4:	1d 97       	sbiw	r26, 0x0d	; 13
    3cf6:	89 2b       	or	r24, r25
    3cf8:	21 f0       	breq	.+8      	; 0x3d02 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3cfa:	c5 01       	movw	r24, r10
    3cfc:	02 96       	adiw	r24, 0x02	; 2
    3cfe:	0e 94 78 07 	call	0xef0	; 0xef0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3d02:	ce 01       	movw	r24, r28
    3d04:	08 96       	adiw	r24, 0x08	; 8
    3d06:	fe de       	rcall	.-516    	; 0x3b04 <prvSampleTimeNow>
    3d08:	8b 01       	movw	r16, r22
    3d0a:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3d0c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d0e:	0e 2e       	mov	r0, r30
    3d10:	00 0c       	add	r0, r0
    3d12:	ff 0b       	sbc	r31, r31
    3d14:	ea 30       	cpi	r30, 0x0A	; 10
    3d16:	f1 05       	cpc	r31, r1
    3d18:	08 f0       	brcs	.+2      	; 0x3d1c <prvProcessReceivedCommands+0x62>
    3d1a:	64 c0       	rjmp	.+200    	; 0x3de4 <prvProcessReceivedCommands+0x12a>
    3d1c:	88 27       	eor	r24, r24
    3d1e:	ee 58       	subi	r30, 0x8E	; 142
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	8f 4f       	sbci	r24, 0xFF	; 255
    3d24:	0c 94 15 35 	jmp	0x6a2a	; 0x6a2a <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3d28:	f5 01       	movw	r30, r10
    3d2a:	86 89       	ldd	r24, Z+22	; 0x16
    3d2c:	81 60       	ori	r24, 0x01	; 1
    3d2e:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3d30:	ca 80       	ldd	r12, Y+2	; 0x02
    3d32:	db 80       	ldd	r13, Y+3	; 0x03
    3d34:	ec 80       	ldd	r14, Y+4	; 0x04
    3d36:	fd 80       	ldd	r15, Y+5	; 0x05
    3d38:	46 85       	ldd	r20, Z+14	; 0x0e
    3d3a:	57 85       	ldd	r21, Z+15	; 0x0f
    3d3c:	60 89       	ldd	r22, Z+16	; 0x10
    3d3e:	71 89       	ldd	r23, Z+17	; 0x11
    3d40:	4c 0d       	add	r20, r12
    3d42:	5d 1d       	adc	r21, r13
    3d44:	6e 1d       	adc	r22, r14
    3d46:	7f 1d       	adc	r23, r15
    3d48:	c5 01       	movw	r24, r10
    3d4a:	83 dd       	rcall	.-1274   	; 0x3852 <prvInsertTimerInActiveList>
    3d4c:	88 23       	and	r24, r24
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <prvProcessReceivedCommands+0x98>
    3d50:	49 c0       	rjmp	.+146    	; 0x3de4 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3d52:	d5 01       	movw	r26, r10
    3d54:	54 96       	adiw	r26, 0x14	; 20
    3d56:	ed 91       	ld	r30, X+
    3d58:	fc 91       	ld	r31, X
    3d5a:	55 97       	sbiw	r26, 0x15	; 21
    3d5c:	c5 01       	movw	r24, r10
    3d5e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3d60:	f5 01       	movw	r30, r10
    3d62:	86 89       	ldd	r24, Z+22	; 0x16
    3d64:	82 ff       	sbrs	r24, 2
    3d66:	3e c0       	rjmp	.+124    	; 0x3de4 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3d68:	4a 81       	ldd	r20, Y+2	; 0x02
    3d6a:	5b 81       	ldd	r21, Y+3	; 0x03
    3d6c:	6c 81       	ldd	r22, Y+4	; 0x04
    3d6e:	7d 81       	ldd	r23, Y+5	; 0x05
    3d70:	86 85       	ldd	r24, Z+14	; 0x0e
    3d72:	97 85       	ldd	r25, Z+15	; 0x0f
    3d74:	a0 89       	ldd	r26, Z+16	; 0x10
    3d76:	b1 89       	ldd	r27, Z+17	; 0x11
    3d78:	9a 01       	movw	r18, r20
    3d7a:	ab 01       	movw	r20, r22
    3d7c:	28 0f       	add	r18, r24
    3d7e:	39 1f       	adc	r19, r25
    3d80:	4a 1f       	adc	r20, r26
    3d82:	5b 1f       	adc	r21, r27
    3d84:	c1 2c       	mov	r12, r1
    3d86:	d1 2c       	mov	r13, r1
    3d88:	76 01       	movw	r14, r12
    3d8a:	00 e0       	ldi	r16, 0x00	; 0
    3d8c:	10 e0       	ldi	r17, 0x00	; 0
    3d8e:	60 e0       	ldi	r22, 0x00	; 0
    3d90:	c5 01       	movw	r24, r10
    3d92:	f2 dd       	rcall	.-1052   	; 0x3978 <xTimerGenericCommand>
    3d94:	27 c0       	rjmp	.+78     	; 0x3de4 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3d96:	d5 01       	movw	r26, r10
    3d98:	56 96       	adiw	r26, 0x16	; 22
    3d9a:	8c 91       	ld	r24, X
    3d9c:	56 97       	sbiw	r26, 0x16	; 22
    3d9e:	8e 7f       	andi	r24, 0xFE	; 254
    3da0:	56 96       	adiw	r26, 0x16	; 22
    3da2:	8c 93       	st	X, r24
                        break;
    3da4:	1f c0       	rjmp	.+62     	; 0x3de4 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3da6:	f5 01       	movw	r30, r10
    3da8:	86 89       	ldd	r24, Z+22	; 0x16
    3daa:	81 60       	ori	r24, 0x01	; 1
    3dac:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3dae:	4a 81       	ldd	r20, Y+2	; 0x02
    3db0:	5b 81       	ldd	r21, Y+3	; 0x03
    3db2:	6c 81       	ldd	r22, Y+4	; 0x04
    3db4:	7d 81       	ldd	r23, Y+5	; 0x05
    3db6:	46 87       	std	Z+14, r20	; 0x0e
    3db8:	57 87       	std	Z+15, r21	; 0x0f
    3dba:	60 8b       	std	Z+16, r22	; 0x10
    3dbc:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3dbe:	40 0f       	add	r20, r16
    3dc0:	51 1f       	adc	r21, r17
    3dc2:	62 1f       	adc	r22, r18
    3dc4:	73 1f       	adc	r23, r19
    3dc6:	68 01       	movw	r12, r16
    3dc8:	79 01       	movw	r14, r18
    3dca:	c5 01       	movw	r24, r10
    3dcc:	42 dd       	rcall	.-1404   	; 0x3852 <prvInsertTimerInActiveList>
                        break;
    3dce:	0a c0       	rjmp	.+20     	; 0x3de4 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3dd0:	f5 01       	movw	r30, r10
    3dd2:	86 89       	ldd	r24, Z+22	; 0x16
    3dd4:	81 fd       	sbrc	r24, 1
    3dd6:	04 c0       	rjmp	.+8      	; 0x3de0 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3dd8:	c5 01       	movw	r24, r10
    3dda:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <vPortFree>
    3dde:	02 c0       	rjmp	.+4      	; 0x3de4 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3de0:	8e 7f       	andi	r24, 0xFE	; 254
    3de2:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	a9 01       	movw	r20, r18
    3dea:	be 01       	movw	r22, r28
    3dec:	6f 5f       	subi	r22, 0xFF	; 255
    3dee:	7f 4f       	sbci	r23, 0xFF	; 255
    3df0:	80 91 d4 17 	lds	r24, 0x17D4	; 0x8017d4 <xTimerQueue>
    3df4:	90 91 d5 17 	lds	r25, 0x17D5	; 0x8017d5 <xTimerQueue+0x1>
    3df8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <xQueueReceive>
    3dfc:	81 11       	cpse	r24, r1
    3dfe:	70 cf       	rjmp	.-288    	; 0x3ce0 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3e00:	28 96       	adiw	r28, 0x08	; 8
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	f8 94       	cli
    3e06:	de bf       	out	0x3e, r29	; 62
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	df 91       	pop	r29
    3e0e:	cf 91       	pop	r28
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	ff 90       	pop	r15
    3e16:	ef 90       	pop	r14
    3e18:	df 90       	pop	r13
    3e1a:	cf 90       	pop	r12
    3e1c:	bf 90       	pop	r11
    3e1e:	af 90       	pop	r10
    3e20:	08 95       	ret

00003e22 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3e22:	08 95       	ret

00003e24 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3e24:	84 b1       	in	r24, 0x04	; 4
    3e26:	80 68       	ori	r24, 0x80	; 128
    3e28:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3e2a:	85 b1       	in	r24, 0x05	; 5
    3e2c:	80 68       	ori	r24, 0x80	; 128
    3e2e:	85 b9       	out	0x05, r24	; 5
    3e30:	08 95       	ret

00003e32 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3e32:	83 b1       	in	r24, 0x03	; 3
    3e34:	80 68       	ori	r24, 0x80	; 128
    3e36:	83 b9       	out	0x03, r24	; 3
    3e38:	08 95       	ret

00003e3a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3e3a:	f4 df       	rcall	.-24     	; 0x3e24 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3e3c:	2f ef       	ldi	r18, 0xFF	; 255
    3e3e:	80 e7       	ldi	r24, 0x70	; 112
    3e40:	92 e0       	ldi	r25, 0x02	; 2
    3e42:	21 50       	subi	r18, 0x01	; 1
    3e44:	80 40       	sbci	r24, 0x00	; 0
    3e46:	90 40       	sbci	r25, 0x00	; 0
    3e48:	e1 f7       	brne	.-8      	; 0x3e42 <vApplicationMallocFailedHook+0x8>
    3e4a:	00 c0       	rjmp	.+0      	; 0x3e4c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3e4c:	00 00       	nop
    3e4e:	f1 df       	rcall	.-30     	; 0x3e32 <prvBlinkMainLed>
    3e50:	f5 cf       	rjmp	.-22     	; 0x3e3c <vApplicationMallocFailedHook+0x2>

00003e52 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3e52:	e8 df       	rcall	.-48     	; 0x3e24 <prvSetMainLedOn>
    3e54:	2f ef       	ldi	r18, 0xFF	; 255
    3e56:	87 ea       	ldi	r24, 0xA7	; 167
    3e58:	91 e6       	ldi	r25, 0x61	; 97
    3e5a:	21 50       	subi	r18, 0x01	; 1
    3e5c:	80 40       	sbci	r24, 0x00	; 0
    3e5e:	90 40       	sbci	r25, 0x00	; 0
    3e60:	e1 f7       	brne	.-8      	; 0x3e5a <vApplicationStackOverflowHook+0x8>
    3e62:	00 c0       	rjmp	.+0      	; 0x3e64 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3e64:	00 00       	nop
    3e66:	e5 df       	rcall	.-54     	; 0x3e32 <prvBlinkMainLed>
    3e68:	f5 cf       	rjmp	.-22     	; 0x3e54 <vApplicationStackOverflowHook+0x2>

00003e6a <set_temperature_percent>:
static uint16_t humidityPercent = 0;
static uint16_t CO2_PPM = 0;
static uint8_t status = 0;

void set_temperature_percent(int16_t temperature){
	temperaturePercent = temperature;
    3e6a:	90 93 f6 17 	sts	0x17F6, r25	; 0x8017f6 <temperaturePercent+0x1>
    3e6e:	80 93 f5 17 	sts	0x17F5, r24	; 0x8017f5 <temperaturePercent>
    3e72:	08 95       	ret

00003e74 <set_humidity_percent>:
}

void set_humidity_percent(uint16_t humidity){
	humidityPercent = humidity;
    3e74:	90 93 f4 17 	sts	0x17F4, r25	; 0x8017f4 <humidityPercent+0x1>
    3e78:	80 93 f3 17 	sts	0x17F3, r24	; 0x8017f3 <humidityPercent>
    3e7c:	08 95       	ret

00003e7e <set_CO2_ppm>:
}

void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    3e7e:	90 93 f2 17 	sts	0x17F2, r25	; 0x8017f2 <CO2_PPM+0x1>
    3e82:	80 93 f1 17 	sts	0x17F1, r24	; 0x8017f1 <CO2_PPM>
    3e86:	08 95       	ret

00003e88 <set_status>:
}

void set_status(uint8_t stat){
	status = stat;
    3e88:	80 93 f0 17 	sts	0x17F0, r24	; 0x8017f0 <status>
    3e8c:	08 95       	ret

00003e8e <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    3e8e:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    3e90:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    3e92:	87 e0       	ldi	r24, 0x07	; 7
    3e94:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3e96:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <temperaturePercent>
    3e9a:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <temperaturePercent+0x1>
    3e9e:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    3ea0:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3ea2:	80 91 f3 17 	lds	r24, 0x17F3	; 0x8017f3 <humidityPercent>
    3ea6:	90 91 f4 17 	lds	r25, 0x17F4	; 0x8017f4 <humidityPercent+0x1>
    3eaa:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    3eac:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    3eae:	80 91 f1 17 	lds	r24, 0x17F1	; 0x8017f1 <CO2_PPM>
    3eb2:	90 91 f2 17 	lds	r25, 0x17F2	; 0x8017f2 <CO2_PPM+0x1>
    3eb6:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    3eb8:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    3eba:	80 91 f0 17 	lds	r24, 0x17F0	; 0x8017f0 <status>
    3ebe:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    3ec0:	cf 01       	movw	r24, r30
    3ec2:	08 95       	ret

00003ec4 <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    3ec4:	90 93 f8 17 	sts	0x17F8, r25	; 0x8017f8 <lastCO2ppm+0x1>
    3ec8:	80 93 f7 17 	sts	0x17F7, r24	; 0x8017f7 <lastCO2ppm>
    3ecc:	08 95       	ret

00003ece <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    3ece:	83 e0       	ldi	r24, 0x03	; 3
    3ed0:	0e 94 77 27 	call	0x4eee	; 0x4eee <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    3ed4:	82 e6       	ldi	r24, 0x62	; 98
    3ed6:	9f e1       	ldi	r25, 0x1F	; 31
    3ed8:	0c 94 9c 27 	jmp	0x4f38	; 0x4f38 <mh_z19_injectCallBack>
    3edc:	08 95       	ret

00003ede <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    3ede:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <mh_z19_takeMeassuring>
    3ee2:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <rc>
	if (rc != MHZ19_OK)
    3ee6:	88 23       	and	r24, r24
    3ee8:	41 f0       	breq	.+16     	; 0x3efa <CO2_measure+0x1c>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
    3eea:	8d e7       	ldi	r24, 0x7D	; 125
    3eec:	93 e0       	ldi	r25, 0x03	; 3
    3eee:	9f 93       	push	r25
    3ef0:	8f 93       	push	r24
    3ef2:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    3ef6:	0f 90       	pop	r0
    3ef8:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3efa:	87 ef       	ldi	r24, 0xF7	; 247
    3efc:	97 e1       	ldi	r25, 0x17	; 23
    3efe:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <mh_z19_getCo2Ppm>
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	90 93 f8 17 	sts	0x17F8, r25	; 0x8017f8 <lastCO2ppm+0x1>
    3f08:	80 93 f7 17 	sts	0x17F7, r24	; 0x8017f7 <lastCO2ppm>
    3f0c:	08 95       	ret

00003f0e <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3f0e:	cc 24       	eor	r12, r12
    3f10:	ca 94       	dec	r12
    3f12:	dc 2c       	mov	r13, r12
    3f14:	76 01       	movw	r14, r12
    3f16:	01 e0       	ldi	r16, 0x01	; 1
    3f18:	21 e0       	ldi	r18, 0x01	; 1
    3f1a:	41 e0       	ldi	r20, 0x01	; 1
    3f1c:	50 e0       	ldi	r21, 0x00	; 0
    3f1e:	60 e0       	ldi	r22, 0x00	; 0
    3f20:	70 e0       	ldi	r23, 0x00	; 0
    3f22:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <measureEventGroup>
    3f26:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <measureEventGroup+0x1>
    3f2a:	0e 94 9f 04 	call	0x93e	; 0x93e <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3f2e:	60 ff       	sbrs	r22, 0
    3f30:	ee cf       	rjmp	.-36     	; 0x3f0e <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    3f32:	d5 df       	rcall	.-86     	; 0x3ede <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				vTaskDelay(pdMS_TO_TICKS(100));
    3f34:	66 e0       	ldi	r22, 0x06	; 6
    3f36:	70 e0       	ldi	r23, 0x00	; 0
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	0e 94 a1 14 	call	0x2942	; 0x2942 <vTaskDelay>
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    3f40:	42 e0       	ldi	r20, 0x02	; 2
    3f42:	50 e0       	ldi	r21, 0x00	; 0
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	70 e0       	ldi	r23, 0x00	; 0
    3f48:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <dataReadyEventGroup>
    3f4c:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <dataReadyEventGroup+0x1>
    3f50:	0e 94 3f 05 	call	0xa7e	; 0xa7e <xEventGroupSetBits>
    3f54:	dc cf       	rjmp	.-72     	; 0x3f0e <MeasureCo2Task>

00003f56 <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    3f56:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <lastCO2ppm>
    3f5a:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <lastCO2ppm+0x1>
    3f5e:	08 95       	ret

00003f60 <create_CO2_sensor_task>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void create_CO2_sensor_task(UBaseType_t priority){
    3f60:	ef 92       	push	r14
    3f62:	ff 92       	push	r15
    3f64:	0f 93       	push	r16
    3f66:	08 2f       	mov	r16, r24
	
	//Initializing 
		CO2_createSensor();
    3f68:	b2 df       	rcall	.-156    	; 0x3ece <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    3f6a:	e1 2c       	mov	r14, r1
    3f6c:	f1 2c       	mov	r15, r1
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 ec       	ldi	r20, 0xC0	; 192
    3f74:	50 e0       	ldi	r21, 0x00	; 0
    3f76:	6d ea       	ldi	r22, 0xAD	; 173
    3f78:	73 e0       	ldi	r23, 0x03	; 3
    3f7a:	87 e8       	ldi	r24, 0x87	; 135
    3f7c:	9f e1       	ldi	r25, 0x1F	; 31
    3f7e:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY + priority,
		NULL);
}
    3f82:	0f 91       	pop	r16
    3f84:	ff 90       	pop	r15
    3f86:	ef 90       	pop	r14
    3f88:	08 95       	ret

00003f8a <initialise_TempHumSensor>:
void Temp_Hum_Main_Task(void *pvParameters);
void tempHumSensor_printReturnCode(hih8120_driverReturnCode_t rc);

void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    3f8a:	67 d2       	rcall	.+1230   	; 0x445a <hih8120_initialise>
    3f8c:	88 23       	and	r24, r24
    3f8e:	41 f0       	breq	.+16     	; 0x3fa0 <initialise_TempHumSensor+0x16>
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{
		printf("Something went wrong while initialising tempHum sensor");
    3f90:	8f eb       	ldi	r24, 0xBF	; 191
    3f92:	93 e0       	ldi	r25, 0x03	; 3
    3f94:	9f 93       	push	r25
    3f96:	8f 93       	push	r24
    3f98:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	08 95       	ret

00003fa2 <create_TempHum_sensor_task>:
	}
}


void create_TempHum_sensor_task(UBaseType_t priority){
    3fa2:	ef 92       	push	r14
    3fa4:	ff 92       	push	r15
    3fa6:	0f 93       	push	r16
    3fa8:	08 2f       	mov	r16, r24
	initialise_TempHumSensor();
    3faa:	ef df       	rcall	.-34     	; 0x3f8a <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    3fac:	e1 2c       	mov	r14, r1
    3fae:	f1 2c       	mov	r15, r1
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 ec       	ldi	r20, 0xC0	; 192
    3fb6:	50 e0       	ldi	r21, 0x00	; 0
    3fb8:	66 ef       	ldi	r22, 0xF6	; 246
    3fba:	73 e0       	ldi	r23, 0x03	; 3
    3fbc:	86 e1       	ldi	r24, 0x16	; 22
    3fbe:	90 e2       	ldi	r25, 0x20	; 32
    3fc0:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
	
}
    3fc4:	0f 91       	pop	r16
    3fc6:	ff 90       	pop	r15
    3fc8:	ef 90       	pop	r14
    3fca:	08 95       	ret

00003fcc <tempHumSensor_printReturnCode>:
		case HIH8120_OK: returnCodeString = "HIH8120_OK";
		case HIH8120_OUT_OF_HEAP: returnCodeString = "HIH8120_OUT_OF_HEAP";
		case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED";
		case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY";
	}
	printf("RETURNCODE: %s \n", returnCodeString);
    3fcc:	82 e0       	ldi	r24, 0x02	; 2
    3fce:	94 e0       	ldi	r25, 0x04	; 4
    3fd0:	9f 93       	push	r25
    3fd2:	8f 93       	push	r24
    3fd4:	83 e1       	ldi	r24, 0x13	; 19
    3fd6:	94 e0       	ldi	r25, 0x04	; 4
    3fd8:	9f 93       	push	r25
    3fda:	8f 93       	push	r24
    3fdc:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
}
    3fe0:	0f 90       	pop	r0
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	08 95       	ret

00003fea <measure_Temp_Hum>:
	
}

void measure_Temp_Hum(){
	
	if ( HIH8120_OK != hih8120_wakeup() )
    3fea:	4f d2       	rcall	.+1182   	; 0x448a <hih8120_wakeup>
    3fec:	88 23       	and	r24, r24
    3fee:	21 f0       	breq	.+8      	; 0x3ff8 <measure_Temp_Hum+0xe>
	{
		printf("Could not wake up temp hum sensor \n");
    3ff0:	84 e2       	ldi	r24, 0x24	; 36
    3ff2:	94 e0       	ldi	r25, 0x04	; 4
    3ff4:	0e 94 02 38 	call	0x7004	; 0x7004 <puts>
		// Something went wrong
		// Investigate the return code further
	}

	vTaskDelay(pdMS_TO_TICKS(60));
    3ff8:	63 e0       	ldi	r22, 0x03	; 3
    3ffa:	70 e0       	ldi	r23, 0x00	; 0
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 a1 14 	call	0x2942	; 0x2942 <vTaskDelay>
	
	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
	if (measure_rc != HIH8120_OK)
    4004:	57 d2       	rcall	.+1198   	; 0x44b4 <hih8120_measure>
	{
		tempHumSensor_printReturnCode(measure_rc);
    4006:	81 11       	cpse	r24, r1
    4008:	e1 df       	rcall	.-62     	; 0x3fcc <tempHumSensor_printReturnCode>
	}
	vTaskDelay(pdMS_TO_TICKS(50));
    400a:	63 e0       	ldi	r22, 0x03	; 3
    400c:	70 e0       	ldi	r23, 0x00	; 0
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	0e 94 a1 14 	call	0x2942	; 0x2942 <vTaskDelay>
	
	humidity = hih8120_getHumidityPercent_x10();
    4016:	74 d2       	rcall	.+1256   	; 0x4500 <hih8120_getHumidityPercent_x10>
    4018:	90 93 fc 17 	sts	0x17FC, r25	; 0x8017fc <humidity+0x1>
    401c:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <humidity>
	temperature = hih8120_getTemperature_x10();	
    4020:	95 d2       	rcall	.+1322   	; 0x454c <hih8120_getTemperature_x10>
    4022:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <temperature+0x1>
    4026:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <temperature>
    402a:	08 95       	ret

0000402c <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(void *pvParameters){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    402c:	cc 24       	eor	r12, r12
    402e:	ca 94       	dec	r12
    4030:	dc 2c       	mov	r13, r12
    4032:	76 01       	movw	r14, r12
    4034:	01 e0       	ldi	r16, 0x01	; 1
    4036:	21 e0       	ldi	r18, 0x01	; 1
    4038:	44 e0       	ldi	r20, 0x04	; 4
    403a:	50 e0       	ldi	r21, 0x00	; 0
    403c:	60 e0       	ldi	r22, 0x00	; 0
    403e:	70 e0       	ldi	r23, 0x00	; 0
    4040:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <measureEventGroup>
    4044:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <measureEventGroup+0x1>
    4048:	0e 94 9f 04 	call	0x93e	; 0x93e <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    404c:	62 ff       	sbrs	r22, 2
    404e:	ee cf       	rjmp	.-36     	; 0x402c <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();			
    4050:	cc df       	rcall	.-104    	; 0x3fea <measure_Temp_Hum>
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    4052:	48 e0       	ldi	r20, 0x08	; 8
    4054:	50 e0       	ldi	r21, 0x00	; 0
    4056:	60 e0       	ldi	r22, 0x00	; 0
    4058:	70 e0       	ldi	r23, 0x00	; 0
    405a:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <dataReadyEventGroup>
    405e:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <dataReadyEventGroup+0x1>
    4062:	0e 94 3f 05 	call	0xa7e	; 0xa7e <xEventGroupSetBits>
    4066:	e2 cf       	rjmp	.-60     	; 0x402c <Temp_Hum_Main_Task>

00004068 <TempHumSensor_getTemp>:
	printf("RETURNCODE: %s \n", returnCodeString);
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    4068:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <temperature>
    406c:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <temperature+0x1>
    4070:	08 95       	ret

00004072 <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    4072:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <humidity>
    4076:	90 91 fc 17 	lds	r25, 0x17FC	; 0x8017fc <humidity+0x1>
    407a:	08 95       	ret

0000407c <initialize_event_groups>:
MessageBufferHandle_t downlinkMessageBufferHandle;
SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    407c:	0e 94 8c 04 	call	0x918	; 0x918 <xEventGroupCreate>
    4080:	90 93 46 19 	sts	0x1946, r25	; 0x801946 <dataReadyEventGroup+0x1>
    4084:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    4088:	0e 94 8c 04 	call	0x918	; 0x918 <xEventGroupCreate>
    408c:	90 93 48 19 	sts	0x1948, r25	; 0x801948 <measureEventGroup+0x1>
    4090:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <measureEventGroup>
    4094:	08 95       	ret

00004096 <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    4096:	41 e0       	ldi	r20, 0x01	; 1
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	8c e2       	ldi	r24, 0x2C	; 44
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <xStreamBufferGenericCreate>
    40a4:	90 93 4a 19 	sts	0x194A, r25	; 0x80194a <uplinkMessageBufferHandle+0x1>
    40a8:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    40ac:	89 2b       	or	r24, r25
    40ae:	21 f4       	brne	.+8      	; 0x40b8 <initialize_message_buffers+0x22>
		printf("Failed to create uplink message buffer.\n");
    40b0:	87 e4       	ldi	r24, 0x47	; 71
    40b2:	94 e0       	ldi	r25, 0x04	; 4
    40b4:	0e 94 02 38 	call	0x7004	; 0x7004 <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    40b8:	41 e0       	ldi	r20, 0x01	; 1
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	70 e0       	ldi	r23, 0x00	; 0
    40be:	8c e2       	ldi	r24, 0x2C	; 44
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <xStreamBufferGenericCreate>
    40c6:	90 93 4c 19 	sts	0x194C, r25	; 0x80194c <downlinkMessageBufferHandle+0x1>
    40ca:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    40ce:	89 2b       	or	r24, r25
    40d0:	21 f4       	brne	.+8      	; 0x40da <initialize_message_buffers+0x44>
		printf("Failed to create downlink message buffer.\n");
    40d2:	8f e6       	ldi	r24, 0x6F	; 111
    40d4:	94 e0       	ldi	r25, 0x04	; 4
    40d6:	0c 94 02 38 	jmp	0x7004	; 0x7004 <puts>
    40da:	08 95       	ret

000040dc <initialize_semaphore>:
	}
}

 void initialize_semaphore(){
    40dc:	0f 93       	push	r16
 	configSemaphore = xSemaphoreCreateMutex();
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <xQueueCreateMutex>
    40e4:	90 93 44 19 	sts	0x1944, r25	; 0x801944 <configSemaphore+0x1>
    40e8:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <configSemaphore>
	 if(configSemaphore != NULL){
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	49 f0       	breq	.+18     	; 0x4102 <initialize_semaphore+0x26>
		 xSemaphoreGive(configSemaphore);
    40f0:	00 e0       	ldi	r16, 0x00	; 0
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	a9 01       	movw	r20, r18
    40f8:	60 e0       	ldi	r22, 0x00	; 0
    40fa:	70 e0       	ldi	r23, 0x00	; 0
    40fc:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xQueueGenericSend>
    4100:	08 c0       	rjmp	.+16     	; 0x4112 <initialize_semaphore+0x36>
	 }
	 else{
		 printf("Failed to create config semaphore");
    4102:	89 e9       	ldi	r24, 0x99	; 153
    4104:	94 e0       	ldi	r25, 0x04	; 4
    4106:	9f 93       	push	r25
    4108:	8f 93       	push	r24
    410a:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
	 }
 }
    4112:	0f 91       	pop	r16
    4114:	08 95       	ret

00004116 <initialise_rc_servo>:
 */ 

#include "servoController.h"

void initialise_rc_servo(){
	rc_servo_initialise();
    4116:	6d c7       	rjmp	.+3802   	; 0x4ff2 <rc_servo_initialise>
    4118:	08 95       	ret

0000411a <servo_set_position>:
}
void servo_set_position(uint8_t servoNo, int8_t percent){
	rc_servo_setPosition(servoNo, percent);
    411a:	53 c7       	rjmp	.+3750   	; 0x4fc2 <rc_servo_setPosition>
    411c:	08 95       	ret

0000411e <_lora_setup>:
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}

static void _lora_setup(void)
{
    411e:	0f 93       	push	r16
    4120:	1f 93       	push	r17
    4122:	cf 93       	push	r28
    4124:	df 93       	push	r29
    4126:	cd b7       	in	r28, 0x3d	; 61
    4128:	de b7       	in	r29, 0x3e	; 62
    412a:	64 97       	sbiw	r28, 0x14	; 20
    412c:	0f b6       	in	r0, 0x3f	; 63
    412e:	f8 94       	cli
    4130:	de bf       	out	0x3e, r29	; 62
    4132:	0f be       	out	0x3f, r0	; 63
    4134:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    413c:	7f d3       	rcall	.+1790   	; 0x483c <lora_driver_rn2483FactoryReset>
    413e:	fb d5       	rcall	.+3062   	; 0x4d36 <lora_driver_mapReturnCodeToText>
    4140:	9f 93       	push	r25
    4142:	8f 93       	push	r24
    4144:	8b eb       	ldi	r24, 0xBB	; 187
    4146:	94 e0       	ldi	r25, 0x04	; 4
    4148:	9f 93       	push	r25
    414a:	8f 93       	push	r24
    414c:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    4150:	f3 d4       	rcall	.+2534   	; 0x4b38 <lora_driver_configureToEu868>
    4152:	f1 d5       	rcall	.+3042   	; 0x4d36 <lora_driver_mapReturnCodeToText>
    4154:	9f 93       	push	r25
    4156:	8f 93       	push	r24
    4158:	8e ec       	ldi	r24, 0xCE	; 206
    415a:	94 e0       	ldi	r25, 0x04	; 4
    415c:	9f 93       	push	r25
    415e:	8f 93       	push	r24
    4160:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    4164:	8e 01       	movw	r16, r28
    4166:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    4168:	1f 4f       	sbci	r17, 0xFF	; 255
    416a:	c8 01       	movw	r24, r16
    416c:	79 d3       	rcall	.+1778   	; 0x4860 <lora_driver_getRn2483Hweui>
    416e:	e3 d5       	rcall	.+3014   	; 0x4d36 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    4170:	1f 93       	push	r17
    4172:	0f 93       	push	r16
    4174:	9f 93       	push	r25
    4176:	8f 93       	push	r24
    4178:	87 ee       	ldi	r24, 0xE7	; 231
    417a:	94 e0       	ldi	r25, 0x04	; 4
    417c:	9f 93       	push	r25
    417e:	8f 93       	push	r24
    4180:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    4184:	c8 01       	movw	r24, r16
    4186:	88 d3       	rcall	.+1808   	; 0x4898 <lora_driver_setDeviceIdentifier>
    4188:	d6 d5       	rcall	.+2988   	; 0x4d36 <lora_driver_mapReturnCodeToText>
    418a:	9f 93       	push	r25
    418c:	8f 93       	push	r24
    418e:	1f 93       	push	r17
    4190:	0f 93       	push	r16
    4192:	8b ef       	ldi	r24, 0xFB	; 251
    4194:	94 e0       	ldi	r25, 0x04	; 4
    4196:	9f 93       	push	r25
    4198:	8f 93       	push	r24
    419a:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    419e:	a8 01       	movw	r20, r16
    41a0:	60 e1       	ldi	r22, 0x10	; 16
    41a2:	75 e0       	ldi	r23, 0x05	; 5
    41a4:	81 e3       	ldi	r24, 0x31	; 49
    41a6:	95 e0       	ldi	r25, 0x05	; 5
    41a8:	a5 d5       	rcall	.+2890   	; 0x4cf4 <lora_driver_setOtaaIdentity>
    41aa:	c5 d5       	rcall	.+2954   	; 0x4d36 <lora_driver_mapReturnCodeToText>
    41ac:	9f 93       	push	r25
    41ae:	8f 93       	push	r24
    41b0:	1f 93       	push	r17
    41b2:	0f 93       	push	r16
    41b4:	80 e1       	ldi	r24, 0x10	; 16
    41b6:	95 e0       	ldi	r25, 0x05	; 5
    41b8:	9f 93       	push	r25
    41ba:	8f 93       	push	r24
    41bc:	81 e3       	ldi	r24, 0x31	; 49
    41be:	95 e0       	ldi	r25, 0x05	; 5
    41c0:	9f 93       	push	r25
    41c2:	8f 93       	push	r24
    41c4:	82 e4       	ldi	r24, 0x42	; 66
    41c6:	95 e0       	ldi	r25, 0x05	; 5
    41c8:	9f 93       	push	r25
    41ca:	8f 93       	push	r24
    41cc:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    41d0:	96 d3       	rcall	.+1836   	; 0x48fe <lora_driver_saveMac>
    41d2:	b1 d5       	rcall	.+2914   	; 0x4d36 <lora_driver_mapReturnCodeToText>
    41d4:	9f 93       	push	r25
    41d6:	8f 93       	push	r24
    41d8:	88 e7       	ldi	r24, 0x78	; 120
    41da:	95 e0       	ldi	r25, 0x05	; 5
    41dc:	9f 93       	push	r25
    41de:	8f 93       	push	r24
    41e0:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	f8 94       	cli
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	0f be       	out	0x3f, r0	; 63
    41ec:	cd bf       	out	0x3d, r28	; 61
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	80 d4       	rcall	.+2304   	; 0x4af2 <lora_driver_setAdaptiveDataRate>
    41f2:	a1 d5       	rcall	.+2882   	; 0x4d36 <lora_driver_mapReturnCodeToText>
    41f4:	9f 93       	push	r25
    41f6:	8f 93       	push	r24
    41f8:	87 e8       	ldi	r24, 0x87	; 135
    41fa:	95 e0       	ldi	r25, 0x05	; 5
    41fc:	9f 93       	push	r25
    41fe:	8f 93       	push	r24
    4200:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    4204:	84 ef       	ldi	r24, 0xF4	; 244
    4206:	91 e0       	ldi	r25, 0x01	; 1
    4208:	7f d4       	rcall	.+2302   	; 0x4b08 <lora_driver_setReceiveDelay>
    420a:	95 d5       	rcall	.+2858   	; 0x4d36 <lora_driver_mapReturnCodeToText>
    420c:	9f 93       	push	r25
    420e:	8f 93       	push	r24
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	8f 93       	push	r24
    4214:	84 ef       	ldi	r24, 0xF4	; 244
    4216:	8f 93       	push	r24
    4218:	88 ea       	ldi	r24, 0xA8	; 168
    421a:	95 e0       	ldi	r25, 0x05	; 5
    421c:	9f 93       	push	r25
    421e:	8f 93       	push	r24
    4220:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	f8 94       	cli
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    422e:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    4230:	80 e0       	ldi	r24, 0x00	; 0
    4232:	6b d3       	rcall	.+1750   	; 0x490a <lora_driver_join>
    4234:	08 2f       	mov	r16, r24
    4236:	7f d5       	rcall	.+2814   	; 0x4d36 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    4238:	9f 93       	push	r25
    423a:	8f 93       	push	r24
    423c:	1f 92       	push	r1
    423e:	1f 93       	push	r17
    4240:	88 ec       	ldi	r24, 0xC8	; 200
    4242:	95 e0       	ldi	r25, 0x05	; 5
    4244:	9f 93       	push	r25
    4246:	8f 93       	push	r24
    4248:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    424c:	0f 90       	pop	r0
    424e:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    4250:	0f 90       	pop	r0
    4252:	0f 90       	pop	r0
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	08 30       	cpi	r16, 0x08	; 8
    425a:	59 f0       	breq	.+22     	; 0x4272 <_lora_setup+0x154>
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    4262:	66 e3       	ldi	r22, 0x36	; 54
    4264:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	0e 94 a1 14 	call	0x2942	; 0x2942 <vTaskDelay>
    426e:	11 50       	subi	r17, 0x01	; 1
    4270:	f9 f6       	brne	.-66     	; 0x4230 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4272:	08 30       	cpi	r16, 0x08	; 8
    4274:	21 f4       	brne	.+8      	; 0x427e <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    427c:	09 c0       	rjmp	.+18     	; 0x4290 <_lora_setup+0x172>
    427e:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    4280:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    4284:	80 e0       	ldi	r24, 0x00	; 0
    4286:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    428a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    428e:	fd cf       	rjmp	.-6      	; 0x428a <_lora_setup+0x16c>
    4290:	64 96       	adiw	r28, 0x14	; 20
    4292:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    4294:	f8 94       	cli
    4296:	de bf       	out	0x3e, r29	; 62
    4298:	0f be       	out	0x3f, r0	; 63
    429a:	cd bf       	out	0x3d, r28	; 61
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	1f 91       	pop	r17
    42a2:	0f 91       	pop	r16
    42a4:	08 95       	ret

000042a6 <lora_uplink_handler_task>:
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	bb d2       	rcall	.+1398   	; 0x4820 <lora_driver_resetRn2483>

void lora_uplink_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    42aa:	62 e0       	ldi	r22, 0x02	; 2
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	0e 94 a1 14 	call	0x2942	; 0x2942 <vTaskDelay>
	lora_driver_resetRn2483(0);
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	b3 d2       	rcall	.+1382   	; 0x4820 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    42ba:	66 e9       	ldi	r22, 0x96	; 150
    42bc:	70 e0       	ldi	r23, 0x00	; 0
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	0e 94 a1 14 	call	0x2942	; 0x2942 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    42c6:	65 d2       	rcall	.+1226   	; 0x4792 <lora_driver_flushBuffers>

	_lora_setup();
    42c8:	2a df       	rcall	.-428    	; 0x411e <_lora_setup>
    42ca:	0f ef       	ldi	r16, 0xFF	; 255
		uint16_t hum = 0;
		uint16_t co2 = 0;
		uint8_t status = 0;
		uint8_t xReceivedBytes = 0;
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    42cc:	1f ef       	ldi	r17, 0xFF	; 255
    42ce:	98 01       	movw	r18, r16
    42d0:	46 e1       	ldi	r20, 0x16	; 22
    42d2:	50 e0       	ldi	r21, 0x00	; 0
    42d4:	6d ef       	ldi	r22, 0xFD	; 253
    42d6:	77 e1       	ldi	r23, 0x17	; 23
    42d8:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <uplinkMessageBufferHandle>
    42dc:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <uplinkMessageBufferHandle+0x1>
    42e0:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <xStreamBufferReceive>
    42e4:	88 23       	and	r24, r24
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    42e6:	89 f3       	breq	.-30     	; 0x42ca <lora_uplink_handler_task+0x24>
    42e8:	ed ef       	ldi	r30, 0xFD	; 253
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    42ea:	f7 e1       	ldi	r31, 0x17	; 23
    42ec:	82 81       	ldd	r24, Z+2	; 0x02
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	98 2f       	mov	r25, r24
    42f2:	88 27       	eor	r24, r24
    42f4:	23 81       	ldd	r18, Z+3	; 0x03
    42f6:	82 2b       	or	r24, r18
    42f8:	04 81       	ldd	r16, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    42fa:	10 e0       	ldi	r17, 0x00	; 0
    42fc:	10 2f       	mov	r17, r16
    42fe:	00 27       	eor	r16, r16
    4300:	25 81       	ldd	r18, Z+5	; 0x05
    4302:	02 2b       	or	r16, r18
    4304:	c6 81       	ldd	r28, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    4306:	d0 e0       	ldi	r29, 0x00	; 0
    4308:	dc 2f       	mov	r29, r28
    430a:	cc 27       	eor	r28, r28
    430c:	27 81       	ldd	r18, Z+7	; 0x07
    430e:	c2 2b       	or	r28, r18
    4310:	f0 84       	ldd	r15, Z+8	; 0x08
			status = _uplink_payload.bytes[6];
    4312:	9f 93       	push	r25
			
			printf("Temperature sent: %d\n", tem);
    4314:	8f 93       	push	r24
    4316:	88 ee       	ldi	r24, 0xE8	; 232
    4318:	95 e0       	ldi	r25, 0x05	; 5
    431a:	9f 93       	push	r25
    431c:	8f 93       	push	r24
    431e:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    4322:	1f 93       	push	r17
			printf("Humidity sent: %d\n", hum);
    4324:	0f 93       	push	r16
    4326:	8e ef       	ldi	r24, 0xFE	; 254
    4328:	95 e0       	ldi	r25, 0x05	; 5
    432a:	9f 93       	push	r25
    432c:	8f 93       	push	r24
    432e:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    4332:	df 93       	push	r29
			printf("CO2 sent: %d\n", co2);
    4334:	cf 93       	push	r28
    4336:	81 e1       	ldi	r24, 0x11	; 17
    4338:	96 e0       	ldi	r25, 0x06	; 6
    433a:	9f 93       	push	r25
    433c:	8f 93       	push	r24
    433e:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    4342:	1f 92       	push	r1
			printf("Status sent: %d\n", status);
    4344:	ff 92       	push	r15
    4346:	8f e1       	ldi	r24, 0x1F	; 31
    4348:	96 e0       	ldi	r25, 0x06	; 6
    434a:	9f 93       	push	r25
    434c:	8f 93       	push	r24
    434e:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    4352:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    4354:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <status_leds_shortPuls>
// 			sizeof(fakePayload),
// 			portMAX_DELAY);
			//---------------------------------------------
			
			
 			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    4358:	6d ef       	ldi	r22, 0xFD	; 253
    435a:	77 e1       	ldi	r23, 0x17	; 23
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	fe d2       	rcall	.+1532   	; 0x495c <lora_driver_sendUploadMessage>
    4360:	ea d4       	rcall	.+2516   	; 0x4d36 <lora_driver_mapReturnCodeToText>
    4362:	9f 93       	push	r25
    4364:	8f 93       	push	r24
    4366:	80 e3       	ldi	r24, 0x30	; 48
    4368:	96 e0       	ldi	r25, 0x06	; 6
    436a:	9f 93       	push	r25
    436c:	8f 93       	push	r24
    436e:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <printf>
    4372:	8d b7       	in	r24, 0x3d	; 61
    4374:	9e b7       	in	r25, 0x3e	; 62
    4376:	44 96       	adiw	r24, 0x14	; 20
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	f8 94       	cli
    437c:	9e bf       	out	0x3e, r25	; 62
    437e:	0f be       	out	0x3f, r0	; 63
    4380:	8d bf       	out	0x3d, r24	; 61
    4382:	a3 cf       	rjmp	.-186    	; 0x42ca <lora_uplink_handler_task+0x24>

00004384 <create_lora_uplink_handler_task>:
    4384:	ef 92       	push	r14

void lora_uplink_handler_task(void *pvParameters);

static lora_driver_payload_t _uplink_payload;

void create_lora_uplink_handler_task(UBaseType_t priority){
    4386:	ff 92       	push	r15
    4388:	0f 93       	push	r16
	xTaskCreate(
    438a:	e1 2c       	mov	r14, r1
    438c:	f1 2c       	mov	r15, r1
    438e:	08 2f       	mov	r16, r24
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	48 e8       	ldi	r20, 0x88	; 136
    4396:	51 e0       	ldi	r21, 0x01	; 1
    4398:	65 e4       	ldi	r22, 0x45	; 69
    439a:	76 e0       	ldi	r23, 0x06	; 6
    439c:	83 e5       	ldi	r24, 0x53	; 83
    439e:	91 e2       	ldi	r25, 0x21	; 33
    43a0:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
	,  "LRHandUplink"  
	,  configMINIMAL_STACK_SIZE+200  
	,  NULL
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}
    43a4:	0f 91       	pop	r16
    43a6:	ff 90       	pop	r15
    43a8:	ef 90       	pop	r14
    43aa:	08 95       	ret

000043ac <create_all_tasks>:
#include "downlinkHandler.h"
#include "servoController.h"


void create_all_tasks(){
	create_lora_uplink_handler_task(4);
    43ac:	84 e0       	ldi	r24, 0x04	; 4
    43ae:	ea df       	rcall	.-44     	; 0x4384 <create_lora_uplink_handler_task>
	create_lora_downlink_handler_task(4);
    43b0:	84 e0       	ldi	r24, 0x04	; 4
    43b2:	0e 94 33 03 	call	0x666	; 0x666 <create_lora_downlink_handler_task>
	create_main_application_task(3);
    43b6:	83 e0       	ldi	r24, 0x03	; 3
    43b8:	0e 94 05 02 	call	0x40a	; 0x40a <create_main_application_task>
	create_CO2_sensor_task(1);
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	d0 dd       	rcall	.-1120   	; 0x3f60 <create_CO2_sensor_task>
	create_TempHum_sensor_task(1);
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	ef dd       	rcall	.-1058   	; 0x3fa2 <create_TempHum_sensor_task>
    43c4:	82 e0       	ldi	r24, 0x02	; 2
	create_fan_controller_task(2);
    43c6:	0c 94 47 03 	jmp	0x68e	; 0x68e <create_fan_controller_task>
    43ca:	08 95       	ret

000043cc <initializeSystem>:
    43cc:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    43ce:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    43d2:	85 e0       	ldi	r24, 0x05	; 5
    43d4:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <status_leds_initialise>

	initialize_event_groups();
    43d8:	51 de       	rcall	.-862    	; 0x407c <initialize_event_groups>
	initialize_message_buffers();
    43da:	5d de       	rcall	.-838    	; 0x4096 <initialize_message_buffers>
	initialize_semaphore();
    43dc:	7f de       	rcall	.-770    	; 0x40dc <initialize_semaphore>
    43de:	9b de       	rcall	.-714    	; 0x4116 <initialise_rc_servo>
	initialise_rc_servo();
    43e0:	60 91 4b 19 	lds	r22, 0x194B	; 0x80194b <downlinkMessageBufferHandle>
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    43e4:	70 91 4c 19 	lds	r23, 0x194C	; 0x80194c <downlinkMessageBufferHandle+0x1>
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	da d1       	rcall	.+948    	; 0x47a0 <lora_driver_initialise>
    43ec:	df cf       	rjmp	.-66     	; 0x43ac <create_all_tasks>
	create_all_tasks();
    43ee:	08 95       	ret

000043f0 <main>:
    43f0:	ed df       	rcall	.-38     	; 0x43cc <initializeSystem>
    43f2:	82 e5       	ldi	r24, 0x52	; 82

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    43f4:	96 e0       	ldi	r25, 0x06	; 6
    43f6:	0e 94 02 38 	call	0x7004	; 0x7004 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    43fa:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <vTaskStartScheduler>
    43fe:	ff cf       	rjmp	.-2      	; 0x43fe <main+0xe>

00004400 <_hihTwiCallback>:
    4400:	65 30       	cpi	r22, 0x05	; 5
    4402:	f1 f4       	brne	.+60     	; 0x4440 <_hihTwiCallback+0x40>
    4404:	fa 01       	movw	r30, r20
    4406:	80 81       	ld	r24, Z
    4408:	8f 73       	andi	r24, 0x3F	; 63
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	98 2f       	mov	r25, r24
    440e:	88 27       	eor	r24, r24
    4410:	21 81       	ldd	r18, Z+1	; 0x01
    4412:	82 2b       	or	r24, r18
    4414:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4418:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    441c:	82 81       	ldd	r24, Z+2	; 0x02
    441e:	f0 e4       	ldi	r31, 0x40	; 64
    4420:	8f 9f       	mul	r24, r31
    4422:	c0 01       	movw	r24, r0
    4424:	11 24       	eor	r1, r1
    4426:	fa 01       	movw	r30, r20
    4428:	23 81       	ldd	r18, Z+3	; 0x03
    442a:	26 95       	lsr	r18
    442c:	26 95       	lsr	r18
    442e:	82 2b       	or	r24, r18
    4430:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4434:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4438:	81 e0       	ldi	r24, 0x01	; 1
    443a:	80 93 13 18 	sts	0x1813, r24	; 0x801813 <_measuringIsReady>
    443e:	08 95       	ret
    4440:	64 30       	cpi	r22, 0x04	; 4
    4442:	51 f0       	breq	.+20     	; 0x4458 <_hihTwiCallback+0x58>
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	90 e4       	ldi	r25, 0x40	; 64
    4448:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    444c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4450:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4454:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4458:	08 95       	ret

0000445a <hih8120_initialise>:
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	00 e0       	ldi	r16, 0x00	; 0
    4460:	12 e2       	ldi	r17, 0x22	; 34
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	34 e2       	ldi	r19, 0x24	; 36
    4466:	44 ef       	ldi	r20, 0xF4	; 244
    4468:	50 e0       	ldi	r21, 0x00	; 0
    446a:	60 e0       	ldi	r22, 0x00	; 0
    446c:	87 e2       	ldi	r24, 0x27	; 39
    446e:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <twiCreate>
    4472:	90 93 15 18 	sts	0x1815, r25	; 0x801815 <_hih8120Handler+0x1>
    4476:	80 93 14 18 	sts	0x1814, r24	; 0x801814 <_hih8120Handler>
    447a:	21 e0       	ldi	r18, 0x01	; 1
    447c:	89 2b       	or	r24, r25
    447e:	09 f0       	breq	.+2      	; 0x4482 <hih8120_initialise+0x28>
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	82 2f       	mov	r24, r18
    4484:	1f 91       	pop	r17
    4486:	0f 91       	pop	r16
    4488:	08 95       	ret

0000448a <hih8120_wakeup>:
    448a:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <_hih8120Handler>
    448e:	90 91 15 18 	lds	r25, 0x1815	; 0x801815 <_hih8120Handler+0x1>
    4492:	00 97       	sbiw	r24, 0x00	; 0
    4494:	59 f0       	breq	.+22     	; 0x44ac <hih8120_wakeup+0x22>
    4496:	40 e0       	ldi	r20, 0x00	; 0
    4498:	60 e0       	ldi	r22, 0x00	; 0
    449a:	70 e0       	ldi	r23, 0x00	; 0
    449c:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <twiTransmit>
    44a0:	84 30       	cpi	r24, 0x04	; 4
    44a2:	31 f4       	brne	.+12     	; 0x44b0 <hih8120_wakeup+0x26>
    44a4:	10 92 13 18 	sts	0x1813, r1	; 0x801813 <_measuringIsReady>
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	08 95       	ret
    44ac:	82 e0       	ldi	r24, 0x02	; 2
    44ae:	08 95       	ret
    44b0:	83 e0       	ldi	r24, 0x03	; 3
    44b2:	08 95       	ret

000044b4 <hih8120_measure>:
    44b4:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <_hih8120Handler>
    44b8:	90 91 15 18 	lds	r25, 0x1815	; 0x801815 <_hih8120Handler+0x1>
    44bc:	00 97       	sbiw	r24, 0x00	; 0
    44be:	39 f0       	breq	.+14     	; 0x44ce <hih8120_measure+0x1a>
    44c0:	64 e0       	ldi	r22, 0x04	; 4
    44c2:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <twiReceive>
    44c6:	85 30       	cpi	r24, 0x05	; 5
    44c8:	21 f0       	breq	.+8      	; 0x44d2 <hih8120_measure+0x1e>
    44ca:	83 e0       	ldi	r24, 0x03	; 3
    44cc:	08 95       	ret
    44ce:	82 e0       	ldi	r24, 0x02	; 2
    44d0:	08 95       	ret
    44d2:	80 e0       	ldi	r24, 0x00	; 0
    44d4:	08 95       	ret

000044d6 <hih8120_getHumidity>:
    44d6:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    44da:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0e 94 ef 33 	call	0x67de	; 0x67de <__floatunsisf>
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	48 ec       	ldi	r20, 0xC8	; 200
    44ec:	52 e4       	ldi	r21, 0x42	; 66
    44ee:	0e 94 7d 34 	call	0x68fa	; 0x68fa <__mulsf3>
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	38 ef       	ldi	r19, 0xF8	; 248
    44f6:	4f e7       	ldi	r20, 0x7F	; 127
    44f8:	56 e4       	ldi	r21, 0x46	; 70
    44fa:	0c 94 56 33 	jmp	0x66ac	; 0x66ac <__divsf3>
    44fe:	08 95       	ret

00004500 <hih8120_getHumidityPercent_x10>:
    4500:	ea df       	rcall	.-44     	; 0x44d6 <hih8120_getHumidity>
    4502:	20 e0       	ldi	r18, 0x00	; 0
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	40 e2       	ldi	r20, 0x20	; 32
    4508:	51 e4       	ldi	r21, 0x41	; 65
    450a:	0e 94 7d 34 	call	0x68fa	; 0x68fa <__mulsf3>
    450e:	0e 94 c3 33 	call	0x6786	; 0x6786 <__fixunssfsi>
    4512:	cb 01       	movw	r24, r22
    4514:	08 95       	ret

00004516 <hih8120_getTemperature>:
    4516:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    451a:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	0e 94 ef 33 	call	0x67de	; 0x67de <__floatunsisf>
    4526:	20 e0       	ldi	r18, 0x00	; 0
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	45 e2       	ldi	r20, 0x25	; 37
    452c:	53 e4       	ldi	r21, 0x43	; 67
    452e:	0e 94 7d 34 	call	0x68fa	; 0x68fa <__mulsf3>
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	38 ef       	ldi	r19, 0xF8	; 248
    4536:	4f e7       	ldi	r20, 0x7F	; 127
    4538:	56 e4       	ldi	r21, 0x46	; 70
    453a:	0e 94 56 33 	call	0x66ac	; 0x66ac <__divsf3>
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	40 e2       	ldi	r20, 0x20	; 32
    4544:	52 e4       	ldi	r21, 0x42	; 66
    4546:	0c 94 f1 32 	jmp	0x65e2	; 0x65e2 <__subsf3>
    454a:	08 95       	ret

0000454c <hih8120_getTemperature_x10>:
    454c:	e4 df       	rcall	.-56     	; 0x4516 <hih8120_getTemperature>
    454e:	20 e0       	ldi	r18, 0x00	; 0
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	40 e2       	ldi	r20, 0x20	; 32
    4554:	51 e4       	ldi	r21, 0x41	; 65
    4556:	0e 94 7d 34 	call	0x68fa	; 0x68fa <__mulsf3>
    455a:	0e 94 be 33 	call	0x677c	; 0x677c <__fixsfsi>
    455e:	cb 01       	movw	r24, r22
    4560:	08 95       	ret

00004562 <_serialCallBack>:
    4562:	0f 93       	push	r16
    4564:	1f 93       	push	r17
    4566:	cf 93       	push	r28
    4568:	df 93       	push	r29
    456a:	1f 92       	push	r1
    456c:	1f 92       	push	r1
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	8c 01       	movw	r16, r24
    4574:	19 82       	std	Y+1, r1	; 0x01
    4576:	2d c0       	rjmp	.+90     	; 0x45d2 <_serialCallBack+0x70>
    4578:	e0 91 4d 18 	lds	r30, 0x184D	; 0x80184d <rec_buf_inp.2878>
    457c:	ec 32       	cpi	r30, 0x2C	; 44
    457e:	50 f4       	brcc	.+20     	; 0x4594 <_serialCallBack+0x32>
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	8e 0f       	add	r24, r30
    4584:	80 93 4d 18 	sts	0x184D, r24	; 0x80184d <rec_buf_inp.2878>
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	e1 58       	subi	r30, 0x81	; 129
    458c:	f7 4e       	sbci	r31, 0xE7	; 231
    458e:	8a 81       	ldd	r24, Y+2	; 0x02
    4590:	80 83       	st	Z, r24
    4592:	02 c0       	rjmp	.+4      	; 0x4598 <_serialCallBack+0x36>
    4594:	10 92 4d 18 	sts	0x184D, r1	; 0x80184d <rec_buf_inp.2878>
    4598:	8a 81       	ldd	r24, Y+2	; 0x02
    459a:	8a 30       	cpi	r24, 0x0A	; 10
    459c:	d1 f4       	brne	.+52     	; 0x45d2 <_serialCallBack+0x70>
    459e:	40 91 4d 18 	lds	r20, 0x184D	; 0x80184d <rec_buf_inp.2878>
    45a2:	50 e0       	ldi	r21, 0x00	; 0
    45a4:	fa 01       	movw	r30, r20
    45a6:	e3 58       	subi	r30, 0x83	; 131
    45a8:	f7 4e       	sbci	r31, 0xE7	; 231
    45aa:	10 82       	st	Z, r1
    45ac:	41 50       	subi	r20, 0x01	; 1
    45ae:	51 09       	sbc	r21, r1
    45b0:	9e 01       	movw	r18, r28
    45b2:	2f 5f       	subi	r18, 0xFF	; 255
    45b4:	3f 4f       	sbci	r19, 0xFF	; 255
    45b6:	6f e7       	ldi	r22, 0x7F	; 127
    45b8:	78 e1       	ldi	r23, 0x18	; 24
    45ba:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_serialReplyBufferHandle>
    45be:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_serialReplyBufferHandle+0x1>
    45c2:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <xStreamBufferSendFromISR>
    45c6:	89 81       	ldd	r24, Y+1	; 0x01
    45c8:	81 11       	cpse	r24, r1
    45ca:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <vPortYield>
    45ce:	10 92 4d 18 	sts	0x184D, r1	; 0x80184d <rec_buf_inp.2878>
    45d2:	be 01       	movw	r22, r28
    45d4:	6e 5f       	subi	r22, 0xFE	; 254
    45d6:	7f 4f       	sbci	r23, 0xFF	; 255
    45d8:	c8 01       	movw	r24, r16
    45da:	4d d6       	rcall	.+3226   	; 0x5276 <serial_getByte>
    45dc:	88 23       	and	r24, r24
    45de:	61 f2       	breq	.-104    	; 0x4578 <_serialCallBack+0x16>
    45e0:	0f 90       	pop	r0
    45e2:	0f 90       	pop	r0
    45e4:	df 91       	pop	r29
    45e6:	cf 91       	pop	r28
    45e8:	1f 91       	pop	r17
    45ea:	0f 91       	pop	r16
    45ec:	08 95       	ret

000045ee <_uploadMessage>:
    45ee:	0f 93       	push	r16
    45f0:	1f 93       	push	r17
    45f2:	cf 93       	push	r28
    45f4:	df 93       	push	r29
    45f6:	8c 01       	movw	r16, r24
    45f8:	eb 01       	movw	r28, r22
    45fa:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_serialReplyBufferHandle>
    45fe:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_serialReplyBufferHandle+0x1>
    4602:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <xStreamBufferReset>
    4606:	b8 01       	movw	r22, r16
    4608:	86 e1       	ldi	r24, 0x16	; 22
    460a:	98 e1       	ldi	r25, 0x18	; 24
    460c:	0e 94 88 37 	call	0x6f10	; 0x6f10 <strcpy>
    4610:	20 97       	sbiw	r28, 0x00	; 0
    4612:	79 f0       	breq	.+30     	; 0x4632 <_uploadMessage+0x44>
    4614:	e6 e1       	ldi	r30, 0x16	; 22
    4616:	f8 e1       	ldi	r31, 0x18	; 24
    4618:	01 90       	ld	r0, Z+
    461a:	00 20       	and	r0, r0
    461c:	e9 f7       	brne	.-6      	; 0x4618 <_uploadMessage+0x2a>
    461e:	31 97       	sbiw	r30, 0x01	; 1
    4620:	80 e2       	ldi	r24, 0x20	; 32
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	91 83       	std	Z+1, r25	; 0x01
    4626:	80 83       	st	Z, r24
    4628:	be 01       	movw	r22, r28
    462a:	86 e1       	ldi	r24, 0x16	; 22
    462c:	98 e1       	ldi	r25, 0x18	; 24
    462e:	0e 94 7d 37 	call	0x6efa	; 0x6efa <strcat>
    4632:	e6 e1       	ldi	r30, 0x16	; 22
    4634:	f8 e1       	ldi	r31, 0x18	; 24
    4636:	df 01       	movw	r26, r30
    4638:	0d 90       	ld	r0, X+
    463a:	00 20       	and	r0, r0
    463c:	e9 f7       	brne	.-6      	; 0x4638 <_uploadMessage+0x4a>
    463e:	11 97       	sbiw	r26, 0x01	; 1
    4640:	8d e0       	ldi	r24, 0x0D	; 13
    4642:	9a e0       	ldi	r25, 0x0A	; 10
    4644:	11 96       	adiw	r26, 0x01	; 1
    4646:	9c 93       	st	X, r25
    4648:	8e 93       	st	-X, r24
    464a:	12 96       	adiw	r26, 0x02	; 2
    464c:	1c 92       	st	X, r1
    464e:	01 90       	ld	r0, Z+
    4650:	00 20       	and	r0, r0
    4652:	e9 f7       	brne	.-6      	; 0x464e <_uploadMessage+0x60>
    4654:	31 97       	sbiw	r30, 0x01	; 1
    4656:	e6 51       	subi	r30, 0x16	; 22
    4658:	f8 41       	sbci	r31, 0x18	; 24
    465a:	ae 2f       	mov	r26, r30
    465c:	86 e1       	ldi	r24, 0x16	; 22
    465e:	98 e1       	ldi	r25, 0x18	; 24
    4660:	ac 01       	movw	r20, r24
    4662:	6a 2f       	mov	r22, r26
    4664:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_rn2483_serial>
    4668:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_rn2483_serial+0x1>
    466c:	af d5       	rcall	.+2910   	; 0x51cc <serial_sendBytes>
    466e:	81 11       	cpse	r24, r1
    4670:	11 c0       	rjmp	.+34     	; 0x4694 <_uploadMessage+0xa6>
    4672:	08 e2       	ldi	r16, 0x28	; 40
    4674:	15 e0       	ldi	r17, 0x05	; 5
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	4d e2       	ldi	r20, 0x2D	; 45
    467c:	50 e0       	ldi	r21, 0x00	; 0
    467e:	69 ed       	ldi	r22, 0xD9	; 217
    4680:	78 e1       	ldi	r23, 0x18	; 24
    4682:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_serialReplyBufferHandle>
    4686:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_serialReplyBufferHandle+0x1>
    468a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <xStreamBufferReceive>
    468e:	89 ed       	ldi	r24, 0xD9	; 217
    4690:	98 e1       	ldi	r25, 0x18	; 24
    4692:	02 c0       	rjmp	.+4      	; 0x4698 <_uploadMessage+0xaa>
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	df 91       	pop	r29
    469a:	cf 91       	pop	r28
    469c:	1f 91       	pop	r17
    469e:	0f 91       	pop	r16
    46a0:	08 95       	ret

000046a2 <_reply2ReturnCode>:
    46a2:	2f 92       	push	r2
    46a4:	3f 92       	push	r3
    46a6:	4f 92       	push	r4
    46a8:	5f 92       	push	r5
    46aa:	6f 92       	push	r6
    46ac:	7f 92       	push	r7
    46ae:	8f 92       	push	r8
    46b0:	9f 92       	push	r9
    46b2:	af 92       	push	r10
    46b4:	bf 92       	push	r11
    46b6:	cf 92       	push	r12
    46b8:	df 92       	push	r13
    46ba:	ef 92       	push	r14
    46bc:	ff 92       	push	r15
    46be:	0f 93       	push	r16
    46c0:	1f 93       	push	r17
    46c2:	cf 93       	push	r28
    46c4:	df 93       	push	r29
    46c6:	5c 01       	movw	r10, r24
    46c8:	fc 01       	movw	r30, r24
    46ca:	01 90       	ld	r0, Z+
    46cc:	00 20       	and	r0, r0
    46ce:	e9 f7       	brne	.-6      	; 0x46ca <_reply2ReturnCode+0x28>
    46d0:	31 97       	sbiw	r30, 0x01	; 1
    46d2:	6f 01       	movw	r12, r30
    46d4:	c8 1a       	sub	r12, r24
    46d6:	d9 0a       	sbc	r13, r25
    46d8:	5c 2c       	mov	r5, r12
    46da:	0f 2e       	mov	r0, r31
    46dc:	f8 ef       	ldi	r31, 0xF8	; 248
    46de:	8f 2e       	mov	r8, r31
    46e0:	f8 e0       	ldi	r31, 0x08	; 8
    46e2:	9f 2e       	mov	r9, r31
    46e4:	f0 2d       	mov	r31, r0
    46e6:	e1 2c       	mov	r14, r1
    46e8:	f1 2c       	mov	r15, r1
    46ea:	4c 2c       	mov	r4, r12
    46ec:	37 01       	movw	r6, r14
    46ee:	f4 01       	movw	r30, r8
    46f0:	01 81       	ldd	r16, Z+1	; 0x01
    46f2:	12 81       	ldd	r17, Z+2	; 0x02
    46f4:	e8 01       	movw	r28, r16
    46f6:	09 90       	ld	r0, Y+
    46f8:	00 20       	and	r0, r0
    46fa:	e9 f7       	brne	.-6      	; 0x46f6 <_reply2ReturnCode+0x54>
    46fc:	21 97       	sbiw	r28, 0x01	; 1
    46fe:	c0 1b       	sub	r28, r16
    4700:	d1 0b       	sbc	r29, r17
    4702:	3c 2e       	mov	r3, r28
    4704:	f9 e0       	ldi	r31, 0x09	; 9
    4706:	cf 16       	cp	r12, r31
    4708:	d1 04       	cpc	r13, r1
    470a:	58 f0       	brcs	.+22     	; 0x4722 <_reply2ReturnCode+0x80>
    470c:	f4 01       	movw	r30, r8
    470e:	20 80       	ld	r2, Z
    4710:	fe e0       	ldi	r31, 0x0E	; 14
    4712:	2f 12       	cpse	r2, r31
    4714:	06 c0       	rjmp	.+12     	; 0x4722 <_reply2ReturnCode+0x80>
    4716:	b8 01       	movw	r22, r16
    4718:	c5 01       	movw	r24, r10
    471a:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <strcasestr>
    471e:	89 2b       	or	r24, r25
    4720:	09 f5       	brne	.+66     	; 0x4764 <_reply2ReturnCode+0xc2>
    4722:	44 2d       	mov	r20, r4
    4724:	35 14       	cp	r3, r5
    4726:	08 f4       	brcc	.+2      	; 0x472a <_reply2ReturnCode+0x88>
    4728:	4c 2f       	mov	r20, r28
    472a:	50 e0       	ldi	r21, 0x00	; 0
    472c:	b8 01       	movw	r22, r16
    472e:	c5 01       	movw	r24, r10
    4730:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <strncasecmp>
    4734:	89 2b       	or	r24, r25
    4736:	49 f4       	brne	.+18     	; 0x474a <_reply2ReturnCode+0xa8>
    4738:	f3 01       	movw	r30, r6
    473a:	ee 0f       	add	r30, r30
    473c:	ff 1f       	adc	r31, r31
    473e:	e6 0d       	add	r30, r6
    4740:	f7 1d       	adc	r31, r7
    4742:	e8 50       	subi	r30, 0x08	; 8
    4744:	f7 4f       	sbci	r31, 0xF7	; 247
    4746:	20 80       	ld	r2, Z
    4748:	0d c0       	rjmp	.+26     	; 0x4764 <_reply2ReturnCode+0xc2>
    474a:	8f ef       	ldi	r24, 0xFF	; 255
    474c:	e8 1a       	sub	r14, r24
    474e:	f8 0a       	sbc	r15, r24
    4750:	e3 e0       	ldi	r30, 0x03	; 3
    4752:	8e 0e       	add	r8, r30
    4754:	91 1c       	adc	r9, r1
    4756:	f1 e1       	ldi	r31, 0x11	; 17
    4758:	ef 16       	cp	r14, r31
    475a:	f1 04       	cpc	r15, r1
    475c:	39 f6       	brne	.-114    	; 0x46ec <_reply2ReturnCode+0x4a>
    475e:	68 94       	set
    4760:	22 24       	eor	r2, r2
    4762:	24 f8       	bld	r2, 4
    4764:	82 2d       	mov	r24, r2
    4766:	df 91       	pop	r29
    4768:	cf 91       	pop	r28
    476a:	1f 91       	pop	r17
    476c:	0f 91       	pop	r16
    476e:	ff 90       	pop	r15
    4770:	ef 90       	pop	r14
    4772:	df 90       	pop	r13
    4774:	cf 90       	pop	r12
    4776:	bf 90       	pop	r11
    4778:	af 90       	pop	r10
    477a:	9f 90       	pop	r9
    477c:	8f 90       	pop	r8
    477e:	7f 90       	pop	r7
    4780:	6f 90       	pop	r6
    4782:	5f 90       	pop	r5
    4784:	4f 90       	pop	r4
    4786:	3f 90       	pop	r3
    4788:	2f 90       	pop	r2
    478a:	08 95       	ret

0000478c <_uploadMessageRc>:
    478c:	30 df       	rcall	.-416    	; 0x45ee <_uploadMessage>
    478e:	89 cf       	rjmp	.-238    	; 0x46a2 <_reply2ReturnCode>
    4790:	08 95       	ret

00004792 <lora_driver_flushBuffers>:
    4792:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_serialReplyBufferHandle>
    4796:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_serialReplyBufferHandle+0x1>
    479a:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <xStreamBufferReset>
    479e:	08 95       	ret

000047a0 <lora_driver_initialise>:
    47a0:	8f 92       	push	r8
    47a2:	9f 92       	push	r9
    47a4:	af 92       	push	r10
    47a6:	cf 92       	push	r12
    47a8:	ef 92       	push	r14
    47aa:	0f 93       	push	r16
    47ac:	1f 93       	push	r17
    47ae:	cf 93       	push	r28
    47b0:	c8 2f       	mov	r28, r24
    47b2:	8b 01       	movw	r16, r22
    47b4:	41 e0       	ldi	r20, 0x01	; 1
    47b6:	60 e0       	ldi	r22, 0x00	; 0
    47b8:	70 e0       	ldi	r23, 0x00	; 0
    47ba:	88 ec       	ldi	r24, 0xC8	; 200
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <xStreamBufferGenericCreate>
    47c2:	90 93 51 18 	sts	0x1851, r25	; 0x801851 <_serialReplyBufferHandle+0x1>
    47c6:	80 93 50 18 	sts	0x1850, r24	; 0x801850 <_serialReplyBufferHandle>
    47ca:	10 93 4f 18 	sts	0x184F, r17	; 0x80184f <_downlinkMessageBuffer+0x1>
    47ce:	00 93 4e 18 	sts	0x184E, r16	; 0x80184e <_downlinkMessageBuffer>
    47d2:	0f 2e       	mov	r0, r31
    47d4:	f1 eb       	ldi	r31, 0xB1	; 177
    47d6:	8f 2e       	mov	r8, r31
    47d8:	f2 e2       	ldi	r31, 0x22	; 34
    47da:	9f 2e       	mov	r9, r31
    47dc:	f0 2d       	mov	r31, r0
    47de:	68 94       	set
    47e0:	aa 24       	eor	r10, r10
    47e2:	a6 f8       	bld	r10, 6
    47e4:	68 94       	set
    47e6:	cc 24       	eor	r12, r12
    47e8:	c6 f8       	bld	r12, 6
    47ea:	e1 2c       	mov	r14, r1
    47ec:	00 e0       	ldi	r16, 0x00	; 0
    47ee:	23 e0       	ldi	r18, 0x03	; 3
    47f0:	40 e0       	ldi	r20, 0x00	; 0
    47f2:	51 ee       	ldi	r21, 0xE1	; 225
    47f4:	60 e0       	ldi	r22, 0x00	; 0
    47f6:	70 e0       	ldi	r23, 0x00	; 0
    47f8:	8c 2f       	mov	r24, r28
    47fa:	17 d4       	rcall	.+2094   	; 0x502a <serial_create>
    47fc:	90 93 53 18 	sts	0x1853, r25	; 0x801853 <_rn2483_serial+0x1>
    4800:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <_rn2483_serial>
    4804:	e7 e0       	ldi	r30, 0x07	; 7
    4806:	f1 e0       	ldi	r31, 0x01	; 1
    4808:	80 81       	ld	r24, Z
    480a:	80 61       	ori	r24, 0x10	; 16
    480c:	80 83       	st	Z, r24
    480e:	cf 91       	pop	r28
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	ef 90       	pop	r14
    4816:	cf 90       	pop	r12
    4818:	af 90       	pop	r10
    481a:	9f 90       	pop	r9
    481c:	8f 90       	pop	r8
    481e:	08 95       	ret

00004820 <lora_driver_resetRn2483>:
    4820:	88 23       	and	r24, r24
    4822:	31 f0       	breq	.+12     	; 0x4830 <lora_driver_resetRn2483+0x10>
    4824:	e8 e0       	ldi	r30, 0x08	; 8
    4826:	f1 e0       	ldi	r31, 0x01	; 1
    4828:	80 81       	ld	r24, Z
    482a:	8f 7e       	andi	r24, 0xEF	; 239
    482c:	80 83       	st	Z, r24
    482e:	08 95       	ret
    4830:	e8 e0       	ldi	r30, 0x08	; 8
    4832:	f1 e0       	ldi	r31, 0x01	; 1
    4834:	80 81       	ld	r24, Z
    4836:	80 61       	ori	r24, 0x10	; 16
    4838:	80 83       	st	Z, r24
    483a:	08 95       	ret

0000483c <lora_driver_rn2483FactoryReset>:
    483c:	60 e0       	ldi	r22, 0x00	; 0
    483e:	70 e0       	ldi	r23, 0x00	; 0
    4840:	83 e8       	ldi	r24, 0x83	; 131
    4842:	96 e0       	ldi	r25, 0x06	; 6
    4844:	d4 de       	rcall	.-600    	; 0x45ee <_uploadMessage>
    4846:	e9 ed       	ldi	r30, 0xD9	; 217
    4848:	f8 e1       	ldi	r31, 0x18	; 24
    484a:	01 90       	ld	r0, Z+
    484c:	00 20       	and	r0, r0
    484e:	e9 f7       	brne	.-6      	; 0x484a <lora_driver_rn2483FactoryReset+0xe>
    4850:	31 97       	sbiw	r30, 0x01	; 1
    4852:	e9 5d       	subi	r30, 0xD9	; 217
    4854:	f8 41       	sbci	r31, 0x18	; 24
    4856:	81 e0       	ldi	r24, 0x01	; 1
    4858:	75 97       	sbiw	r30, 0x15	; 21
    485a:	08 f0       	brcs	.+2      	; 0x485e <lora_driver_rn2483FactoryReset+0x22>
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	08 95       	ret

00004860 <lora_driver_getRn2483Hweui>:
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	ec 01       	movw	r28, r24
    4866:	60 e0       	ldi	r22, 0x00	; 0
    4868:	70 e0       	ldi	r23, 0x00	; 0
    486a:	84 e9       	ldi	r24, 0x94	; 148
    486c:	96 e0       	ldi	r25, 0x06	; 6
    486e:	bf de       	rcall	.-642    	; 0x45ee <_uploadMessage>
    4870:	e9 ed       	ldi	r30, 0xD9	; 217
    4872:	f8 e1       	ldi	r31, 0x18	; 24
    4874:	01 90       	ld	r0, Z+
    4876:	00 20       	and	r0, r0
    4878:	e9 f7       	brne	.-6      	; 0x4874 <lora_driver_getRn2483Hweui+0x14>
    487a:	ea 5e       	subi	r30, 0xEA	; 234
    487c:	f8 41       	sbci	r31, 0x18	; 24
    487e:	39 f4       	brne	.+14     	; 0x488e <lora_driver_getRn2483Hweui+0x2e>
    4880:	69 ed       	ldi	r22, 0xD9	; 217
    4882:	78 e1       	ldi	r23, 0x18	; 24
    4884:	ce 01       	movw	r24, r28
    4886:	0e 94 88 37 	call	0x6f10	; 0x6f10 <strcpy>
    488a:	80 e0       	ldi	r24, 0x00	; 0
    488c:	02 c0       	rjmp	.+4      	; 0x4892 <lora_driver_getRn2483Hweui+0x32>
    488e:	18 82       	st	Y, r1
    4890:	81 e0       	ldi	r24, 0x01	; 1
    4892:	df 91       	pop	r29
    4894:	cf 91       	pop	r28
    4896:	08 95       	ret

00004898 <lora_driver_setDeviceIdentifier>:
    4898:	fc 01       	movw	r30, r24
    489a:	01 90       	ld	r0, Z+
    489c:	00 20       	and	r0, r0
    489e:	e9 f7       	brne	.-6      	; 0x489a <lora_driver_setDeviceIdentifier+0x2>
    48a0:	9f 01       	movw	r18, r30
    48a2:	21 51       	subi	r18, 0x11	; 17
    48a4:	31 09       	sbc	r19, r1
    48a6:	28 17       	cp	r18, r24
    48a8:	39 07       	cpc	r19, r25
    48aa:	29 f4       	brne	.+10     	; 0x48b6 <lora_driver_setDeviceIdentifier+0x1e>
    48ac:	bc 01       	movw	r22, r24
    48ae:	82 ec       	ldi	r24, 0xC2	; 194
    48b0:	96 e0       	ldi	r25, 0x06	; 6
    48b2:	6c cf       	rjmp	.-296    	; 0x478c <_uploadMessageRc>
    48b4:	08 95       	ret
    48b6:	89 e0       	ldi	r24, 0x09	; 9
    48b8:	08 95       	ret

000048ba <lora_driver_setApplicationIdentifier>:
    48ba:	fc 01       	movw	r30, r24
    48bc:	01 90       	ld	r0, Z+
    48be:	00 20       	and	r0, r0
    48c0:	e9 f7       	brne	.-6      	; 0x48bc <lora_driver_setApplicationIdentifier+0x2>
    48c2:	9f 01       	movw	r18, r30
    48c4:	21 51       	subi	r18, 0x11	; 17
    48c6:	31 09       	sbc	r19, r1
    48c8:	28 17       	cp	r18, r24
    48ca:	39 07       	cpc	r19, r25
    48cc:	29 f4       	brne	.+10     	; 0x48d8 <lora_driver_setApplicationIdentifier+0x1e>
    48ce:	bc 01       	movw	r22, r24
    48d0:	81 ed       	ldi	r24, 0xD1	; 209
    48d2:	96 e0       	ldi	r25, 0x06	; 6
    48d4:	5b cf       	rjmp	.-330    	; 0x478c <_uploadMessageRc>
    48d6:	08 95       	ret
    48d8:	89 e0       	ldi	r24, 0x09	; 9
    48da:	08 95       	ret

000048dc <lora_driver_setApplicationKey>:
    48dc:	fc 01       	movw	r30, r24
    48de:	01 90       	ld	r0, Z+
    48e0:	00 20       	and	r0, r0
    48e2:	e9 f7       	brne	.-6      	; 0x48de <lora_driver_setApplicationKey+0x2>
    48e4:	9f 01       	movw	r18, r30
    48e6:	21 52       	subi	r18, 0x21	; 33
    48e8:	31 09       	sbc	r19, r1
    48ea:	28 17       	cp	r18, r24
    48ec:	39 07       	cpc	r19, r25
    48ee:	29 f4       	brne	.+10     	; 0x48fa <lora_driver_setApplicationKey+0x1e>
    48f0:	bc 01       	movw	r22, r24
    48f2:	80 ee       	ldi	r24, 0xE0	; 224
    48f4:	96 e0       	ldi	r25, 0x06	; 6
    48f6:	4a cf       	rjmp	.-364    	; 0x478c <_uploadMessageRc>
    48f8:	08 95       	ret
    48fa:	89 e0       	ldi	r24, 0x09	; 9
    48fc:	08 95       	ret

000048fe <lora_driver_saveMac>:
    48fe:	60 e0       	ldi	r22, 0x00	; 0
    4900:	70 e0       	ldi	r23, 0x00	; 0
    4902:	8f e1       	ldi	r24, 0x1F	; 31
    4904:	97 e0       	ldi	r25, 0x07	; 7
    4906:	42 cf       	rjmp	.-380    	; 0x478c <_uploadMessageRc>
    4908:	08 95       	ret

0000490a <lora_driver_join>:
    490a:	0f 93       	push	r16
    490c:	1f 93       	push	r17
    490e:	e8 2f       	mov	r30, r24
    4910:	f0 e0       	ldi	r31, 0x00	; 0
    4912:	ee 0f       	add	r30, r30
    4914:	ff 1f       	adc	r31, r31
    4916:	ec 50       	subi	r30, 0x0C	; 12
    4918:	f7 4f       	sbci	r31, 0xF7	; 247
    491a:	60 81       	ld	r22, Z
    491c:	71 81       	ldd	r23, Z+1	; 0x01
    491e:	88 e2       	ldi	r24, 0x28	; 40
    4920:	97 e0       	ldi	r25, 0x07	; 7
    4922:	34 df       	rcall	.-408    	; 0x478c <_uploadMessageRc>
    4924:	81 11       	cpse	r24, r1
    4926:	14 c0       	rjmp	.+40     	; 0x4950 <lora_driver_join+0x46>
    4928:	08 e2       	ldi	r16, 0x28	; 40
    492a:	15 e0       	ldi	r17, 0x05	; 5
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	4d e2       	ldi	r20, 0x2D	; 45
    4932:	50 e0       	ldi	r21, 0x00	; 0
    4934:	69 ed       	ldi	r22, 0xD9	; 217
    4936:	78 e1       	ldi	r23, 0x18	; 24
    4938:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_serialReplyBufferHandle>
    493c:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_serialReplyBufferHandle+0x1>
    4940:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <xStreamBufferReceive>
    4944:	88 23       	and	r24, r24
    4946:	21 f0       	breq	.+8      	; 0x4950 <lora_driver_join+0x46>
    4948:	89 ed       	ldi	r24, 0xD9	; 217
    494a:	98 e1       	ldi	r25, 0x18	; 24
    494c:	aa de       	rcall	.-684    	; 0x46a2 <_reply2ReturnCode>
    494e:	03 c0       	rjmp	.+6      	; 0x4956 <lora_driver_join+0x4c>
    4950:	89 ed       	ldi	r24, 0xD9	; 217
    4952:	98 e1       	ldi	r25, 0x18	; 24
    4954:	a6 de       	rcall	.-692    	; 0x46a2 <_reply2ReturnCode>
    4956:	1f 91       	pop	r17
    4958:	0f 91       	pop	r16
    495a:	08 95       	ret

0000495c <lora_driver_sendUploadMessage>:
    495c:	0f 93       	push	r16
    495e:	1f 93       	push	r17
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	1f 92       	push	r1
    4966:	cd b7       	in	r28, 0x3d	; 61
    4968:	de b7       	in	r29, 0x3e	; 62
    496a:	db 01       	movw	r26, r22
    496c:	11 96       	adiw	r26, 0x01	; 1
    496e:	9c 91       	ld	r25, X
    4970:	11 97       	sbiw	r26, 0x01	; 1
    4972:	95 31       	cpi	r25, 0x15	; 21
    4974:	08 f0       	brcs	.+2      	; 0x4978 <lora_driver_sendUploadMessage+0x1c>
    4976:	b4 c0       	rjmp	.+360    	; 0x4ae0 <lora_driver_sendUploadMessage+0x184>
    4978:	99 23       	and	r25, r25
    497a:	81 f1       	breq	.+96     	; 0x49dc <lora_driver_sendUploadMessage+0x80>
    497c:	60 e0       	ldi	r22, 0x00	; 0
    497e:	70 e0       	ldi	r23, 0x00	; 0
    4980:	27 2f       	mov	r18, r23
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	46 2f       	mov	r20, r22
    4986:	50 e0       	ldi	r21, 0x00	; 0
    4988:	fd 01       	movw	r30, r26
    498a:	e4 0f       	add	r30, r20
    498c:	f5 1f       	adc	r31, r21
    498e:	92 81       	ldd	r25, Z+2	; 0x02
    4990:	92 95       	swap	r25
    4992:	9f 70       	andi	r25, 0x0F	; 15
    4994:	9a 30       	cpi	r25, 0x0A	; 10
    4996:	10 f0       	brcs	.+4      	; 0x499c <lora_driver_sendUploadMessage+0x40>
    4998:	99 5c       	subi	r25, 0xC9	; 201
    499a:	01 c0       	rjmp	.+2      	; 0x499e <lora_driver_sendUploadMessage+0x42>
    499c:	90 5d       	subi	r25, 0xD0	; 208
    499e:	f9 01       	movw	r30, r18
    49a0:	e6 59       	subi	r30, 0x96	; 150
    49a2:	f7 4e       	sbci	r31, 0xE7	; 231
    49a4:	90 83       	st	Z, r25
    49a6:	2f 5f       	subi	r18, 0xFF	; 255
    49a8:	3f 4f       	sbci	r19, 0xFF	; 255
    49aa:	fd 01       	movw	r30, r26
    49ac:	e4 0f       	add	r30, r20
    49ae:	f5 1f       	adc	r31, r21
    49b0:	92 81       	ldd	r25, Z+2	; 0x02
    49b2:	9f 70       	andi	r25, 0x0F	; 15
    49b4:	49 2f       	mov	r20, r25
    49b6:	50 e0       	ldi	r21, 0x00	; 0
    49b8:	4a 30       	cpi	r20, 0x0A	; 10
    49ba:	51 05       	cpc	r21, r1
    49bc:	14 f0       	brlt	.+4      	; 0x49c2 <lora_driver_sendUploadMessage+0x66>
    49be:	99 5c       	subi	r25, 0xC9	; 201
    49c0:	01 c0       	rjmp	.+2      	; 0x49c4 <lora_driver_sendUploadMessage+0x68>
    49c2:	90 5d       	subi	r25, 0xD0	; 208
    49c4:	f9 01       	movw	r30, r18
    49c6:	e6 59       	subi	r30, 0x96	; 150
    49c8:	f7 4e       	sbci	r31, 0xE7	; 231
    49ca:	90 83       	st	Z, r25
    49cc:	7e 5f       	subi	r23, 0xFE	; 254
    49ce:	6f 5f       	subi	r22, 0xFF	; 255
    49d0:	11 96       	adiw	r26, 0x01	; 1
    49d2:	9c 91       	ld	r25, X
    49d4:	11 97       	sbiw	r26, 0x01	; 1
    49d6:	69 17       	cp	r22, r25
    49d8:	98 f2       	brcs	.-90     	; 0x4980 <lora_driver_sendUploadMessage+0x24>
    49da:	01 c0       	rjmp	.+2      	; 0x49de <lora_driver_sendUploadMessage+0x82>
    49dc:	70 e0       	ldi	r23, 0x00	; 0
    49de:	e7 2f       	mov	r30, r23
    49e0:	f0 e0       	ldi	r31, 0x00	; 0
    49e2:	e6 59       	subi	r30, 0x96	; 150
    49e4:	f7 4e       	sbci	r31, 0xE7	; 231
    49e6:	10 82       	st	Z, r1
    49e8:	4c 91       	ld	r20, X
    49ea:	81 11       	cpse	r24, r1
    49ec:	03 c0       	rjmp	.+6      	; 0x49f4 <lora_driver_sendUploadMessage+0x98>
    49ee:	81 e3       	ldi	r24, 0x31	; 49
    49f0:	97 e0       	ldi	r25, 0x07	; 7
    49f2:	02 c0       	rjmp	.+4      	; 0x49f8 <lora_driver_sendUploadMessage+0x9c>
    49f4:	83 e3       	ldi	r24, 0x33	; 51
    49f6:	97 e0       	ldi	r25, 0x07	; 7
    49f8:	2a e6       	ldi	r18, 0x6A	; 106
    49fa:	38 e1       	ldi	r19, 0x18	; 24
    49fc:	3f 93       	push	r19
    49fe:	2f 93       	push	r18
    4a00:	1f 92       	push	r1
    4a02:	4f 93       	push	r20
    4a04:	9f 93       	push	r25
    4a06:	8f 93       	push	r24
    4a08:	87 e3       	ldi	r24, 0x37	; 55
    4a0a:	97 e0       	ldi	r25, 0x07	; 7
    4a0c:	9f 93       	push	r25
    4a0e:	8f 93       	push	r24
    4a10:	8c ea       	ldi	r24, 0xAC	; 172
    4a12:	98 e1       	ldi	r25, 0x18	; 24
    4a14:	9f 93       	push	r25
    4a16:	8f 93       	push	r24
    4a18:	0e 94 32 38 	call	0x7064	; 0x7064 <sprintf>
    4a1c:	60 e0       	ldi	r22, 0x00	; 0
    4a1e:	70 e0       	ldi	r23, 0x00	; 0
    4a20:	8c ea       	ldi	r24, 0xAC	; 172
    4a22:	98 e1       	ldi	r25, 0x18	; 24
    4a24:	b3 de       	rcall	.-666    	; 0x478c <_uploadMessageRc>
    4a26:	0f b6       	in	r0, 0x3f	; 63
    4a28:	f8 94       	cli
    4a2a:	de bf       	out	0x3e, r29	; 62
    4a2c:	0f be       	out	0x3f, r0	; 63
    4a2e:	cd bf       	out	0x3d, r28	; 61
    4a30:	81 11       	cpse	r24, r1
    4a32:	59 c0       	rjmp	.+178    	; 0x4ae6 <lora_driver_sendUploadMessage+0x18a>
    4a34:	08 e2       	ldi	r16, 0x28	; 40
    4a36:	15 e0       	ldi	r17, 0x05	; 5
    4a38:	20 e0       	ldi	r18, 0x00	; 0
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	4d e2       	ldi	r20, 0x2D	; 45
    4a3e:	50 e0       	ldi	r21, 0x00	; 0
    4a40:	69 ed       	ldi	r22, 0xD9	; 217
    4a42:	78 e1       	ldi	r23, 0x18	; 24
    4a44:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_serialReplyBufferHandle>
    4a48:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_serialReplyBufferHandle+0x1>
    4a4c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <xStreamBufferReceive>
    4a50:	88 23       	and	r24, r24
    4a52:	09 f4       	brne	.+2      	; 0x4a56 <lora_driver_sendUploadMessage+0xfa>
    4a54:	47 c0       	rjmp	.+142    	; 0x4ae4 <lora_driver_sendUploadMessage+0x188>
    4a56:	89 ed       	ldi	r24, 0xD9	; 217
    4a58:	98 e1       	ldi	r25, 0x18	; 24
    4a5a:	23 de       	rcall	.-954    	; 0x46a2 <_reply2ReturnCode>
    4a5c:	8e 30       	cpi	r24, 0x0E	; 14
    4a5e:	09 f0       	breq	.+2      	; 0x4a62 <lora_driver_sendUploadMessage+0x106>
    4a60:	42 c0       	rjmp	.+132    	; 0x4ae6 <lora_driver_sendUploadMessage+0x18a>
    4a62:	87 e0       	ldi	r24, 0x07	; 7
    4a64:	89 83       	std	Y+1, r24	; 0x01
    4a66:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_downlinkMessageBuffer>
    4a6a:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_downlinkMessageBuffer+0x1>
    4a6e:	89 2b       	or	r24, r25
    4a70:	a9 f1       	breq	.+106    	; 0x4adc <lora_driver_sendUploadMessage+0x180>
    4a72:	be 01       	movw	r22, r28
    4a74:	6f 5f       	subi	r22, 0xFF	; 255
    4a76:	7f 4f       	sbci	r23, 0xFF	; 255
    4a78:	89 ed       	ldi	r24, 0xD9	; 217
    4a7a:	98 e1       	ldi	r25, 0x18	; 24
    4a7c:	68 d1       	rcall	.+720    	; 0x4d4e <decode_port_no>
    4a7e:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <_downlinkPayload>
    4a82:	e9 81       	ldd	r30, Y+1	; 0x01
    4a84:	f0 e0       	ldi	r31, 0x00	; 0
    4a86:	e7 52       	subi	r30, 0x27	; 39
    4a88:	f7 4e       	sbci	r31, 0xE7	; 231
    4a8a:	df 01       	movw	r26, r30
    4a8c:	0d 90       	ld	r0, X+
    4a8e:	00 20       	and	r0, r0
    4a90:	e9 f7       	brne	.-6      	; 0x4a8c <lora_driver_sendUploadMessage+0x130>
    4a92:	11 97       	sbiw	r26, 0x01	; 1
    4a94:	ae 1b       	sub	r26, r30
    4a96:	bf 0b       	sbc	r27, r31
    4a98:	aa 23       	and	r26, r26
    4a9a:	91 f0       	breq	.+36     	; 0x4ac0 <lora_driver_sendUploadMessage+0x164>
    4a9c:	bb 27       	eor	r27, r27
    4a9e:	cd 01       	movw	r24, r26
    4aa0:	01 97       	sbiw	r24, 0x01	; 1
    4aa2:	9c 01       	movw	r18, r24
    4aa4:	12 f4       	brpl	.+4      	; 0x4aaa <lora_driver_sendUploadMessage+0x14e>
    4aa6:	2f 5f       	subi	r18, 0xFF	; 255
    4aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aaa:	35 95       	asr	r19
    4aac:	27 95       	ror	r18
    4aae:	20 93 55 18 	sts	0x1855, r18	; 0x801855 <_downlinkPayload+0x1>
    4ab2:	af 01       	movw	r20, r30
    4ab4:	4f 5f       	subi	r20, 0xFF	; 255
    4ab6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ab8:	64 e1       	ldi	r22, 0x14	; 20
    4aba:	86 e5       	ldi	r24, 0x56	; 86
    4abc:	98 e1       	ldi	r25, 0x18	; 24
    4abe:	73 d1       	rcall	.+742    	; 0x4da6 <decode_hexadecimal_string_bytes>
    4ac0:	01 e0       	ldi	r16, 0x01	; 1
    4ac2:	10 e0       	ldi	r17, 0x00	; 0
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	46 e1       	ldi	r20, 0x16	; 22
    4aca:	50 e0       	ldi	r21, 0x00	; 0
    4acc:	64 e5       	ldi	r22, 0x54	; 84
    4ace:	78 e1       	ldi	r23, 0x18	; 24
    4ad0:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_downlinkMessageBuffer>
    4ad4:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_downlinkMessageBuffer+0x1>
    4ad8:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <xStreamBufferSend>
    4adc:	8e e0       	ldi	r24, 0x0E	; 14
    4ade:	03 c0       	rjmp	.+6      	; 0x4ae6 <lora_driver_sendUploadMessage+0x18a>
    4ae0:	84 e1       	ldi	r24, 0x14	; 20
    4ae2:	01 c0       	rjmp	.+2      	; 0x4ae6 <lora_driver_sendUploadMessage+0x18a>
    4ae4:	80 e0       	ldi	r24, 0x00	; 0
    4ae6:	0f 90       	pop	r0
    4ae8:	df 91       	pop	r29
    4aea:	cf 91       	pop	r28
    4aec:	1f 91       	pop	r17
    4aee:	0f 91       	pop	r16
    4af0:	08 95       	ret

00004af2 <lora_driver_setAdaptiveDataRate>:
    4af2:	81 30       	cpi	r24, 0x01	; 1
    4af4:	19 f0       	breq	.+6      	; 0x4afc <lora_driver_setAdaptiveDataRate+0xa>
    4af6:	67 e4       	ldi	r22, 0x47	; 71
    4af8:	77 e0       	ldi	r23, 0x07	; 7
    4afa:	02 c0       	rjmp	.+4      	; 0x4b00 <lora_driver_setAdaptiveDataRate+0xe>
    4afc:	60 e2       	ldi	r22, 0x20	; 32
    4afe:	78 e0       	ldi	r23, 0x08	; 8
    4b00:	8b e4       	ldi	r24, 0x4B	; 75
    4b02:	97 e0       	ldi	r25, 0x07	; 7
    4b04:	43 ce       	rjmp	.-890    	; 0x478c <_uploadMessageRc>
    4b06:	08 95       	ret

00004b08 <lora_driver_setReceiveDelay>:
    4b08:	9f 93       	push	r25
    4b0a:	8f 93       	push	r24
    4b0c:	8c e7       	ldi	r24, 0x7C	; 124
    4b0e:	97 e0       	ldi	r25, 0x07	; 7
    4b10:	9f 93       	push	r25
    4b12:	8f 93       	push	r24
    4b14:	8c ea       	ldi	r24, 0xAC	; 172
    4b16:	98 e1       	ldi	r25, 0x18	; 24
    4b18:	9f 93       	push	r25
    4b1a:	8f 93       	push	r24
    4b1c:	0e 94 32 38 	call	0x7064	; 0x7064 <sprintf>
    4b20:	60 e0       	ldi	r22, 0x00	; 0
    4b22:	70 e0       	ldi	r23, 0x00	; 0
    4b24:	8c ea       	ldi	r24, 0xAC	; 172
    4b26:	98 e1       	ldi	r25, 0x18	; 24
    4b28:	31 de       	rcall	.-926    	; 0x478c <_uploadMessageRc>
    4b2a:	0f 90       	pop	r0
    4b2c:	0f 90       	pop	r0
    4b2e:	0f 90       	pop	r0
    4b30:	0f 90       	pop	r0
    4b32:	0f 90       	pop	r0
    4b34:	0f 90       	pop	r0
    4b36:	08 95       	ret

00004b38 <lora_driver_configureToEu868>:
    4b38:	2f 92       	push	r2
    4b3a:	3f 92       	push	r3
    4b3c:	4f 92       	push	r4
    4b3e:	5f 92       	push	r5
    4b40:	6f 92       	push	r6
    4b42:	7f 92       	push	r7
    4b44:	8f 92       	push	r8
    4b46:	9f 92       	push	r9
    4b48:	af 92       	push	r10
    4b4a:	bf 92       	push	r11
    4b4c:	cf 92       	push	r12
    4b4e:	df 92       	push	r13
    4b50:	ef 92       	push	r14
    4b52:	ff 92       	push	r15
    4b54:	0f 93       	push	r16
    4b56:	1f 93       	push	r17
    4b58:	cf 93       	push	r28
    4b5a:	df 93       	push	r29
    4b5c:	cd b7       	in	r28, 0x3d	; 61
    4b5e:	de b7       	in	r29, 0x3e	; 62
    4b60:	a0 97       	sbiw	r28, 0x20	; 32
    4b62:	0f b6       	in	r0, 0x3f	; 63
    4b64:	f8 94       	cli
    4b66:	de bf       	out	0x3e, r29	; 62
    4b68:	0f be       	out	0x3f, r0	; 63
    4b6a:	cd bf       	out	0x3d, r28	; 61
    4b6c:	69 ea       	ldi	r22, 0xA9	; 169
    4b6e:	77 e0       	ldi	r23, 0x07	; 7
    4b70:	85 eb       	ldi	r24, 0xB5	; 181
    4b72:	97 e0       	ldi	r25, 0x07	; 7
    4b74:	3c dd       	rcall	.-1416   	; 0x45ee <_uploadMessage>
    4b76:	95 dd       	rcall	.-1238   	; 0x46a2 <_reply2ReturnCode>
    4b78:	81 11       	cpse	r24, r1
    4b7a:	a3 c0       	rjmp	.+326    	; 0x4cc2 <lora_driver_configureToEu868+0x18a>
    4b7c:	80 e2       	ldi	r24, 0x20	; 32
    4b7e:	e2 e2       	ldi	r30, 0x22	; 34
    4b80:	f2 e0       	ldi	r31, 0x02	; 2
    4b82:	de 01       	movw	r26, r28
    4b84:	11 96       	adiw	r26, 0x01	; 1
    4b86:	01 90       	ld	r0, Z+
    4b88:	0d 92       	st	X+, r0
    4b8a:	8a 95       	dec	r24
    4b8c:	e1 f7       	brne	.-8      	; 0x4b86 <lora_driver_configureToEu868+0x4e>
    4b8e:	9e 01       	movw	r18, r28
    4b90:	2f 5f       	subi	r18, 0xFF	; 255
    4b92:	3f 4f       	sbci	r19, 0xFF	; 255
    4b94:	69 01       	movw	r12, r18
    4b96:	e1 2c       	mov	r14, r1
    4b98:	f1 2c       	mov	r15, r1
    4b9a:	0f 2e       	mov	r0, r31
    4b9c:	f1 ec       	ldi	r31, 0xC1	; 193
    4b9e:	af 2e       	mov	r10, r31
    4ba0:	f7 e0       	ldi	r31, 0x07	; 7
    4ba2:	bf 2e       	mov	r11, r31
    4ba4:	f0 2d       	mov	r31, r0
    4ba6:	0c ea       	ldi	r16, 0xAC	; 172
    4ba8:	18 e1       	ldi	r17, 0x18	; 24
    4baa:	0f 2e       	mov	r0, r31
    4bac:	fa ed       	ldi	r31, 0xDA	; 218
    4bae:	4f 2e       	mov	r4, r31
    4bb0:	f7 e0       	ldi	r31, 0x07	; 7
    4bb2:	5f 2e       	mov	r5, r31
    4bb4:	f0 2d       	mov	r31, r0
    4bb6:	0f 2e       	mov	r0, r31
    4bb8:	f1 ef       	ldi	r31, 0xF1	; 241
    4bba:	8f 2e       	mov	r8, r31
    4bbc:	f7 e0       	ldi	r31, 0x07	; 7
    4bbe:	9f 2e       	mov	r9, r31
    4bc0:	f0 2d       	mov	r31, r0
    4bc2:	0f 2e       	mov	r0, r31
    4bc4:	fb e0       	ldi	r31, 0x0B	; 11
    4bc6:	6f 2e       	mov	r6, r31
    4bc8:	f8 e0       	ldi	r31, 0x08	; 8
    4bca:	7f 2e       	mov	r7, r31
    4bcc:	f0 2d       	mov	r31, r0
    4bce:	3e 2c       	mov	r3, r14
    4bd0:	2f 2c       	mov	r2, r15
    4bd2:	ff 92       	push	r15
    4bd4:	ef 92       	push	r14
    4bd6:	bf 92       	push	r11
    4bd8:	af 92       	push	r10
    4bda:	1f 93       	push	r17
    4bdc:	0f 93       	push	r16
    4bde:	0e 94 32 38 	call	0x7064	; 0x7064 <sprintf>
    4be2:	60 e0       	ldi	r22, 0x00	; 0
    4be4:	70 e0       	ldi	r23, 0x00	; 0
    4be6:	c8 01       	movw	r24, r16
    4be8:	02 dd       	rcall	.-1532   	; 0x45ee <_uploadMessage>
    4bea:	5b dd       	rcall	.-1354   	; 0x46a2 <_reply2ReturnCode>
    4bec:	0f 90       	pop	r0
    4bee:	0f 90       	pop	r0
    4bf0:	0f 90       	pop	r0
    4bf2:	0f 90       	pop	r0
    4bf4:	0f 90       	pop	r0
    4bf6:	0f 90       	pop	r0
    4bf8:	81 11       	cpse	r24, r1
    4bfa:	63 c0       	rjmp	.+198    	; 0x4cc2 <lora_driver_configureToEu868+0x18a>
    4bfc:	32 e0       	ldi	r19, 0x02	; 2
    4bfe:	3e 15       	cp	r19, r14
    4c00:	e8 f4       	brcc	.+58     	; 0x4c3c <lora_driver_configureToEu868+0x104>
    4c02:	f6 01       	movw	r30, r12
    4c04:	83 81       	ldd	r24, Z+3	; 0x03
    4c06:	8f 93       	push	r24
    4c08:	82 81       	ldd	r24, Z+2	; 0x02
    4c0a:	8f 93       	push	r24
    4c0c:	81 81       	ldd	r24, Z+1	; 0x01
    4c0e:	8f 93       	push	r24
    4c10:	80 81       	ld	r24, Z
    4c12:	8f 93       	push	r24
    4c14:	ff 92       	push	r15
    4c16:	ef 92       	push	r14
    4c18:	5f 92       	push	r5
    4c1a:	4f 92       	push	r4
    4c1c:	1f 93       	push	r17
    4c1e:	0f 93       	push	r16
    4c20:	0e 94 32 38 	call	0x7064	; 0x7064 <sprintf>
    4c24:	60 e0       	ldi	r22, 0x00	; 0
    4c26:	70 e0       	ldi	r23, 0x00	; 0
    4c28:	c8 01       	movw	r24, r16
    4c2a:	e1 dc       	rcall	.-1598   	; 0x45ee <_uploadMessage>
    4c2c:	3a dd       	rcall	.-1420   	; 0x46a2 <_reply2ReturnCode>
    4c2e:	0f b6       	in	r0, 0x3f	; 63
    4c30:	f8 94       	cli
    4c32:	de bf       	out	0x3e, r29	; 62
    4c34:	0f be       	out	0x3f, r0	; 63
    4c36:	cd bf       	out	0x3d, r28	; 61
    4c38:	81 11       	cpse	r24, r1
    4c3a:	43 c0       	rjmp	.+134    	; 0x4cc2 <lora_driver_configureToEu868+0x18a>
    4c3c:	2f 92       	push	r2
    4c3e:	3f 92       	push	r3
    4c40:	9f 92       	push	r9
    4c42:	8f 92       	push	r8
    4c44:	1f 93       	push	r17
    4c46:	0f 93       	push	r16
    4c48:	0e 94 32 38 	call	0x7064	; 0x7064 <sprintf>
    4c4c:	60 e0       	ldi	r22, 0x00	; 0
    4c4e:	70 e0       	ldi	r23, 0x00	; 0
    4c50:	c8 01       	movw	r24, r16
    4c52:	cd dc       	rcall	.-1638   	; 0x45ee <_uploadMessage>
    4c54:	26 dd       	rcall	.-1460   	; 0x46a2 <_reply2ReturnCode>
    4c56:	0f 90       	pop	r0
    4c58:	0f 90       	pop	r0
    4c5a:	0f 90       	pop	r0
    4c5c:	0f 90       	pop	r0
    4c5e:	0f 90       	pop	r0
    4c60:	0f 90       	pop	r0
    4c62:	81 11       	cpse	r24, r1
    4c64:	2e c0       	rjmp	.+92     	; 0x4cc2 <lora_driver_configureToEu868+0x18a>
    4c66:	2f 92       	push	r2
    4c68:	3f 92       	push	r3
    4c6a:	7f 92       	push	r7
    4c6c:	6f 92       	push	r6
    4c6e:	1f 93       	push	r17
    4c70:	0f 93       	push	r16
    4c72:	0e 94 32 38 	call	0x7064	; 0x7064 <sprintf>
    4c76:	60 e0       	ldi	r22, 0x00	; 0
    4c78:	70 e0       	ldi	r23, 0x00	; 0
    4c7a:	c8 01       	movw	r24, r16
    4c7c:	b8 dc       	rcall	.-1680   	; 0x45ee <_uploadMessage>
    4c7e:	11 dd       	rcall	.-1502   	; 0x46a2 <_reply2ReturnCode>
    4c80:	0f 90       	pop	r0
    4c82:	0f 90       	pop	r0
    4c84:	0f 90       	pop	r0
    4c86:	0f 90       	pop	r0
    4c88:	0f 90       	pop	r0
    4c8a:	0f 90       	pop	r0
    4c8c:	81 11       	cpse	r24, r1
    4c8e:	19 c0       	rjmp	.+50     	; 0x4cc2 <lora_driver_configureToEu868+0x18a>
    4c90:	3f ef       	ldi	r19, 0xFF	; 255
    4c92:	e3 1a       	sub	r14, r19
    4c94:	f3 0a       	sbc	r15, r19
    4c96:	84 e0       	ldi	r24, 0x04	; 4
    4c98:	c8 0e       	add	r12, r24
    4c9a:	d1 1c       	adc	r13, r1
    4c9c:	98 e0       	ldi	r25, 0x08	; 8
    4c9e:	e9 16       	cp	r14, r25
    4ca0:	f1 04       	cpc	r15, r1
    4ca2:	09 f0       	breq	.+2      	; 0x4ca6 <lora_driver_configureToEu868+0x16e>
    4ca4:	94 cf       	rjmp	.-216    	; 0x4bce <lora_driver_configureToEu868+0x96>
    4ca6:	60 e0       	ldi	r22, 0x00	; 0
    4ca8:	70 e0       	ldi	r23, 0x00	; 0
    4caa:	83 e2       	ldi	r24, 0x23	; 35
    4cac:	98 e0       	ldi	r25, 0x08	; 8
    4cae:	9f dc       	rcall	.-1730   	; 0x45ee <_uploadMessage>
    4cb0:	f8 dc       	rcall	.-1552   	; 0x46a2 <_reply2ReturnCode>
    4cb2:	81 11       	cpse	r24, r1
    4cb4:	06 c0       	rjmp	.+12     	; 0x4cc2 <lora_driver_configureToEu868+0x18a>
    4cb6:	60 e0       	ldi	r22, 0x00	; 0
    4cb8:	70 e0       	ldi	r23, 0x00	; 0
    4cba:	84 e3       	ldi	r24, 0x34	; 52
    4cbc:	98 e0       	ldi	r25, 0x08	; 8
    4cbe:	97 dc       	rcall	.-1746   	; 0x45ee <_uploadMessage>
    4cc0:	f0 dc       	rcall	.-1568   	; 0x46a2 <_reply2ReturnCode>
    4cc2:	a0 96       	adiw	r28, 0x20	; 32
    4cc4:	0f b6       	in	r0, 0x3f	; 63
    4cc6:	f8 94       	cli
    4cc8:	de bf       	out	0x3e, r29	; 62
    4cca:	0f be       	out	0x3f, r0	; 63
    4ccc:	cd bf       	out	0x3d, r28	; 61
    4cce:	df 91       	pop	r29
    4cd0:	cf 91       	pop	r28
    4cd2:	1f 91       	pop	r17
    4cd4:	0f 91       	pop	r16
    4cd6:	ff 90       	pop	r15
    4cd8:	ef 90       	pop	r14
    4cda:	df 90       	pop	r13
    4cdc:	cf 90       	pop	r12
    4cde:	bf 90       	pop	r11
    4ce0:	af 90       	pop	r10
    4ce2:	9f 90       	pop	r9
    4ce4:	8f 90       	pop	r8
    4ce6:	7f 90       	pop	r7
    4ce8:	6f 90       	pop	r6
    4cea:	5f 90       	pop	r5
    4cec:	4f 90       	pop	r4
    4cee:	3f 90       	pop	r3
    4cf0:	2f 90       	pop	r2
    4cf2:	08 95       	ret

00004cf4 <lora_driver_setOtaaIdentity>:
    4cf4:	ef 92       	push	r14
    4cf6:	ff 92       	push	r15
    4cf8:	0f 93       	push	r16
    4cfa:	1f 93       	push	r17
    4cfc:	cf 93       	push	r28
    4cfe:	df 93       	push	r29
    4d00:	ec 01       	movw	r28, r24
    4d02:	8b 01       	movw	r16, r22
    4d04:	7a 01       	movw	r14, r20
    4d06:	81 e0       	ldi	r24, 0x01	; 1
    4d08:	f4 de       	rcall	.-536    	; 0x4af2 <lora_driver_setAdaptiveDataRate>
    4d0a:	81 11       	cpse	r24, r1
    4d0c:	0d c0       	rjmp	.+26     	; 0x4d28 <lora_driver_setOtaaIdentity+0x34>
    4d0e:	ce 01       	movw	r24, r28
    4d10:	d4 dd       	rcall	.-1112   	; 0x48ba <lora_driver_setApplicationIdentifier>
    4d12:	81 11       	cpse	r24, r1
    4d14:	09 c0       	rjmp	.+18     	; 0x4d28 <lora_driver_setOtaaIdentity+0x34>
    4d16:	c8 01       	movw	r24, r16
    4d18:	e1 dd       	rcall	.-1086   	; 0x48dc <lora_driver_setApplicationKey>
    4d1a:	81 11       	cpse	r24, r1
    4d1c:	05 c0       	rjmp	.+10     	; 0x4d28 <lora_driver_setOtaaIdentity+0x34>
    4d1e:	c7 01       	movw	r24, r14
    4d20:	bb dd       	rcall	.-1162   	; 0x4898 <lora_driver_setDeviceIdentifier>
    4d22:	81 11       	cpse	r24, r1
    4d24:	01 c0       	rjmp	.+2      	; 0x4d28 <lora_driver_setOtaaIdentity+0x34>
    4d26:	eb dd       	rcall	.-1066   	; 0x48fe <lora_driver_saveMac>
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	1f 91       	pop	r17
    4d2e:	0f 91       	pop	r16
    4d30:	ff 90       	pop	r15
    4d32:	ef 90       	pop	r14
    4d34:	08 95       	ret

00004d36 <lora_driver_mapReturnCodeToText>:
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	fc 01       	movw	r30, r24
    4d3a:	ee 0f       	add	r30, r30
    4d3c:	ff 1f       	adc	r31, r31
    4d3e:	8e 0f       	add	r24, r30
    4d40:	9f 1f       	adc	r25, r31
    4d42:	fc 01       	movw	r30, r24
    4d44:	e8 50       	subi	r30, 0x08	; 8
    4d46:	f7 4f       	sbci	r31, 0xF7	; 247
    4d48:	81 81       	ldd	r24, Z+1	; 0x01
    4d4a:	92 81       	ldd	r25, Z+2	; 0x02
    4d4c:	08 95       	ret

00004d4e <decode_port_no>:
    4d4e:	dc 01       	movw	r26, r24
    4d50:	00 97       	sbiw	r24, 0x00	; 0
    4d52:	29 f1       	breq	.+74     	; 0x4d9e <decode_port_no+0x50>
    4d54:	fb 01       	movw	r30, r22
    4d56:	20 81       	ld	r18, Z
    4d58:	fc 01       	movw	r30, r24
    4d5a:	01 90       	ld	r0, Z+
    4d5c:	00 20       	and	r0, r0
    4d5e:	e9 f7       	brne	.-6      	; 0x4d5a <decode_port_no+0xc>
    4d60:	31 97       	sbiw	r30, 0x01	; 1
    4d62:	e8 1b       	sub	r30, r24
    4d64:	f9 0b       	sbc	r31, r25
    4d66:	82 2f       	mov	r24, r18
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	e8 17       	cp	r30, r24
    4d6c:	f9 07       	cpc	r31, r25
    4d6e:	c8 f0       	brcs	.+50     	; 0x4da2 <decode_port_no+0x54>
    4d70:	80 e0       	ldi	r24, 0x00	; 0
    4d72:	08 c0       	rjmp	.+16     	; 0x4d84 <decode_port_no+0x36>
    4d74:	88 0f       	add	r24, r24
    4d76:	38 2f       	mov	r19, r24
    4d78:	33 0f       	add	r19, r19
    4d7a:	33 0f       	add	r19, r19
    4d7c:	83 0f       	add	r24, r19
    4d7e:	80 53       	subi	r24, 0x30	; 48
    4d80:	89 0f       	add	r24, r25
    4d82:	2f 5f       	subi	r18, 0xFF	; 255
    4d84:	fd 01       	movw	r30, r26
    4d86:	e2 0f       	add	r30, r18
    4d88:	f1 1d       	adc	r31, r1
    4d8a:	90 81       	ld	r25, Z
    4d8c:	30 ed       	ldi	r19, 0xD0	; 208
    4d8e:	39 0f       	add	r19, r25
    4d90:	3a 30       	cpi	r19, 0x0A	; 10
    4d92:	10 f4       	brcc	.+4      	; 0x4d98 <decode_port_no+0x4a>
    4d94:	91 11       	cpse	r25, r1
    4d96:	ee cf       	rjmp	.-36     	; 0x4d74 <decode_port_no+0x26>
    4d98:	fb 01       	movw	r30, r22
    4d9a:	20 83       	st	Z, r18
    4d9c:	08 95       	ret
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	08 95       	ret
    4da2:	80 e0       	ldi	r24, 0x00	; 0
    4da4:	08 95       	ret

00004da6 <decode_hexadecimal_string_bytes>:
    4da6:	0f 93       	push	r16
    4da8:	1f 93       	push	r17
    4daa:	cf 93       	push	r28
    4dac:	df 93       	push	r29
    4dae:	dc 01       	movw	r26, r24
    4db0:	ea 01       	movw	r28, r20
    4db2:	20 97       	sbiw	r28, 0x00	; 0
    4db4:	e1 f1       	breq	.+120    	; 0x4e2e <decode_hexadecimal_string_bytes+0x88>
    4db6:	fa 01       	movw	r30, r20
    4db8:	01 90       	ld	r0, Z+
    4dba:	00 20       	and	r0, r0
    4dbc:	e9 f7       	brne	.-6      	; 0x4db8 <decode_hexadecimal_string_bytes+0x12>
    4dbe:	31 97       	sbiw	r30, 0x01	; 1
    4dc0:	e4 1b       	sub	r30, r20
    4dc2:	f5 0b       	sbc	r31, r21
    4dc4:	32 97       	sbiw	r30, 0x02	; 2
    4dc6:	10 f5       	brcc	.+68     	; 0x4e0c <decode_hexadecimal_string_bytes+0x66>
    4dc8:	32 c0       	rjmp	.+100    	; 0x4e2e <decode_hexadecimal_string_bytes+0x88>
    4dca:	8d 01       	movw	r16, r26
    4dcc:	04 0f       	add	r16, r20
    4dce:	15 1f       	adc	r17, r21
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	ae 01       	movw	r20, r28
    4dd4:	42 0f       	add	r20, r18
    4dd6:	53 1f       	adc	r21, r19
    4dd8:	fa 01       	movw	r30, r20
    4dda:	90 81       	ld	r25, Z
    4ddc:	91 34       	cpi	r25, 0x41	; 65
    4dde:	28 f0       	brcs	.+10     	; 0x4dea <decode_hexadecimal_string_bytes+0x44>
    4de0:	97 53       	subi	r25, 0x37	; 55
    4de2:	59 2f       	mov	r21, r25
    4de4:	52 95       	swap	r21
    4de6:	50 7f       	andi	r21, 0xF0	; 240
    4de8:	03 c0       	rjmp	.+6      	; 0x4df0 <decode_hexadecimal_string_bytes+0x4a>
    4dea:	59 2f       	mov	r21, r25
    4dec:	52 95       	swap	r21
    4dee:	50 7f       	andi	r21, 0xF0	; 240
    4df0:	2c 0f       	add	r18, r28
    4df2:	3d 1f       	adc	r19, r29
    4df4:	f9 01       	movw	r30, r18
    4df6:	91 81       	ldd	r25, Z+1	; 0x01
    4df8:	91 34       	cpi	r25, 0x41	; 65
    4dfa:	10 f0       	brcs	.+4      	; 0x4e00 <decode_hexadecimal_string_bytes+0x5a>
    4dfc:	97 53       	subi	r25, 0x37	; 55
    4dfe:	01 c0       	rjmp	.+2      	; 0x4e02 <decode_hexadecimal_string_bytes+0x5c>
    4e00:	90 53       	subi	r25, 0x30	; 48
    4e02:	95 0f       	add	r25, r21
    4e04:	f8 01       	movw	r30, r16
    4e06:	90 83       	st	Z, r25
    4e08:	8f 5f       	subi	r24, 0xFF	; 255
    4e0a:	01 c0       	rjmp	.+2      	; 0x4e0e <decode_hexadecimal_string_bytes+0x68>
    4e0c:	80 e0       	ldi	r24, 0x00	; 0
    4e0e:	28 2f       	mov	r18, r24
    4e10:	22 0f       	add	r18, r18
    4e12:	48 2f       	mov	r20, r24
    4e14:	50 e0       	ldi	r21, 0x00	; 0
    4e16:	fe 01       	movw	r30, r28
    4e18:	01 90       	ld	r0, Z+
    4e1a:	00 20       	and	r0, r0
    4e1c:	e9 f7       	brne	.-6      	; 0x4e18 <decode_hexadecimal_string_bytes+0x72>
    4e1e:	31 97       	sbiw	r30, 0x01	; 1
    4e20:	ec 1b       	sub	r30, r28
    4e22:	fd 0b       	sbc	r31, r29
    4e24:	4e 17       	cp	r20, r30
    4e26:	5f 07       	cpc	r21, r31
    4e28:	10 f4       	brcc	.+4      	; 0x4e2e <decode_hexadecimal_string_bytes+0x88>
    4e2a:	86 13       	cpse	r24, r22
    4e2c:	ce cf       	rjmp	.-100    	; 0x4dca <decode_hexadecimal_string_bytes+0x24>
    4e2e:	df 91       	pop	r29
    4e30:	cf 91       	pop	r28
    4e32:	1f 91       	pop	r17
    4e34:	0f 91       	pop	r16
    4e36:	08 95       	ret

00004e38 <_serialCallBack>:
    4e38:	80 91 09 19 	lds	r24, 0x1909	; 0x801909 <crc_sum.1945>
    4e3c:	86 0f       	add	r24, r22
    4e3e:	80 93 09 19 	sts	0x1909, r24	; 0x801909 <crc_sum.1945>
    4e42:	90 91 0c 19 	lds	r25, 0x190C	; 0x80190c <_mh_state>
    4e46:	91 30       	cpi	r25, 0x01	; 1
    4e48:	79 f0       	breq	.+30     	; 0x4e68 <_serialCallBack+0x30>
    4e4a:	28 f0       	brcs	.+10     	; 0x4e56 <_serialCallBack+0x1e>
    4e4c:	92 30       	cpi	r25, 0x02	; 2
    4e4e:	a9 f0       	breq	.+42     	; 0x4e7a <_serialCallBack+0x42>
    4e50:	93 30       	cpi	r25, 0x03	; 3
    4e52:	19 f1       	breq	.+70     	; 0x4e9a <_serialCallBack+0x62>
    4e54:	08 95       	ret
    4e56:	6f 3f       	cpi	r22, 0xFF	; 255
    4e58:	09 f0       	breq	.+2      	; 0x4e5c <_serialCallBack+0x24>
    4e5a:	48 c0       	rjmp	.+144    	; 0x4eec <_serialCallBack+0xb4>
    4e5c:	10 92 09 19 	sts	0x1909, r1	; 0x801909 <crc_sum.1945>
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	80 93 0c 19 	sts	0x190C, r24	; 0x80190c <_mh_state>
    4e66:	08 95       	ret
    4e68:	66 38       	cpi	r22, 0x86	; 134
    4e6a:	09 f0       	breq	.+2      	; 0x4e6e <_serialCallBack+0x36>
    4e6c:	3f c0       	rjmp	.+126    	; 0x4eec <_serialCallBack+0xb4>
    4e6e:	10 92 08 19 	sts	0x1908, r1	; 0x801908 <inDex.1943>
    4e72:	82 e0       	ldi	r24, 0x02	; 2
    4e74:	80 93 0c 19 	sts	0x190C, r24	; 0x80190c <_mh_state>
    4e78:	08 95       	ret
    4e7a:	e0 91 08 19 	lds	r30, 0x1908	; 0x801908 <inDex.1943>
    4e7e:	81 e0       	ldi	r24, 0x01	; 1
    4e80:	8e 0f       	add	r24, r30
    4e82:	80 93 08 19 	sts	0x1908, r24	; 0x801908 <inDex.1943>
    4e86:	f0 e0       	ldi	r31, 0x00	; 0
    4e88:	ea 5f       	subi	r30, 0xFA	; 250
    4e8a:	f6 4e       	sbci	r31, 0xE6	; 230
    4e8c:	60 83       	st	Z, r22
    4e8e:	82 30       	cpi	r24, 0x02	; 2
    4e90:	69 f5       	brne	.+90     	; 0x4eec <_serialCallBack+0xb4>
    4e92:	83 e0       	ldi	r24, 0x03	; 3
    4e94:	80 93 0c 19 	sts	0x190C, r24	; 0x80190c <_mh_state>
    4e98:	08 95       	ret
    4e9a:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <inDex.1943>
    4e9e:	21 e0       	ldi	r18, 0x01	; 1
    4ea0:	29 0f       	add	r18, r25
    4ea2:	20 93 08 19 	sts	0x1908, r18	; 0x801908 <inDex.1943>
    4ea6:	96 30       	cpi	r25, 0x06	; 6
    4ea8:	09 f5       	brne	.+66     	; 0x4eec <_serialCallBack+0xb4>
    4eaa:	81 11       	cpse	r24, r1
    4eac:	0e c0       	rjmp	.+28     	; 0x4eca <_serialCallBack+0x92>
    4eae:	e6 e0       	ldi	r30, 0x06	; 6
    4eb0:	f9 e1       	ldi	r31, 0x19	; 25
    4eb2:	80 81       	ld	r24, Z
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	98 2f       	mov	r25, r24
    4eb8:	88 27       	eor	r24, r24
    4eba:	21 81       	ldd	r18, Z+1	; 0x01
    4ebc:	82 0f       	add	r24, r18
    4ebe:	91 1d       	adc	r25, r1
    4ec0:	90 93 0e 19 	sts	0x190E, r25	; 0x80190e <_ppm+0x1>
    4ec4:	80 93 0d 19 	sts	0x190D, r24	; 0x80190d <_ppm>
    4ec8:	04 c0       	rjmp	.+8      	; 0x4ed2 <_serialCallBack+0x9a>
    4eca:	10 92 0e 19 	sts	0x190E, r1	; 0x80190e <_ppm+0x1>
    4ece:	10 92 0d 19 	sts	0x190D, r1	; 0x80190d <_ppm>
    4ed2:	10 92 0c 19 	sts	0x190C, r1	; 0x80190c <_mh_state>
    4ed6:	e0 91 0a 19 	lds	r30, 0x190A	; 0x80190a <_appCallBack>
    4eda:	f0 91 0b 19 	lds	r31, 0x190B	; 0x80190b <_appCallBack+0x1>
    4ede:	30 97       	sbiw	r30, 0x00	; 0
    4ee0:	29 f0       	breq	.+10     	; 0x4eec <_serialCallBack+0xb4>
    4ee2:	80 91 0d 19 	lds	r24, 0x190D	; 0x80190d <_ppm>
    4ee6:	90 91 0e 19 	lds	r25, 0x190E	; 0x80190e <_ppm+0x1>
    4eea:	19 95       	eicall
    4eec:	08 95       	ret

00004eee <mh_z19_initialise>:
    4eee:	8f 92       	push	r8
    4ef0:	9f 92       	push	r9
    4ef2:	af 92       	push	r10
    4ef4:	cf 92       	push	r12
    4ef6:	ef 92       	push	r14
    4ef8:	0f 93       	push	r16
    4efa:	0f 2e       	mov	r0, r31
    4efc:	fc e1       	ldi	r31, 0x1C	; 28
    4efe:	8f 2e       	mov	r8, r31
    4f00:	f7 e2       	ldi	r31, 0x27	; 39
    4f02:	9f 2e       	mov	r9, r31
    4f04:	f0 2d       	mov	r31, r0
    4f06:	68 94       	set
    4f08:	aa 24       	eor	r10, r10
    4f0a:	a4 f8       	bld	r10, 4
    4f0c:	68 94       	set
    4f0e:	cc 24       	eor	r12, r12
    4f10:	c4 f8       	bld	r12, 4
    4f12:	e1 2c       	mov	r14, r1
    4f14:	00 e0       	ldi	r16, 0x00	; 0
    4f16:	23 e0       	ldi	r18, 0x03	; 3
    4f18:	40 e8       	ldi	r20, 0x80	; 128
    4f1a:	55 e2       	ldi	r21, 0x25	; 37
    4f1c:	60 e0       	ldi	r22, 0x00	; 0
    4f1e:	70 e0       	ldi	r23, 0x00	; 0
    4f20:	84 d0       	rcall	.+264    	; 0x502a <serial_create>
    4f22:	90 93 10 19 	sts	0x1910, r25	; 0x801910 <_serial+0x1>
    4f26:	80 93 0f 19 	sts	0x190F, r24	; 0x80190f <_serial>
    4f2a:	0f 91       	pop	r16
    4f2c:	ef 90       	pop	r14
    4f2e:	cf 90       	pop	r12
    4f30:	af 90       	pop	r10
    4f32:	9f 90       	pop	r9
    4f34:	8f 90       	pop	r8
    4f36:	08 95       	ret

00004f38 <mh_z19_injectCallBack>:
    4f38:	90 93 0b 19 	sts	0x190B, r25	; 0x80190b <_appCallBack+0x1>
    4f3c:	80 93 0a 19 	sts	0x190A, r24	; 0x80190a <_appCallBack>
    4f40:	08 95       	ret

00004f42 <mh_z19_takeMeassuring>:
    4f42:	cf 93       	push	r28
    4f44:	df 93       	push	r29
    4f46:	cd b7       	in	r28, 0x3d	; 61
    4f48:	de b7       	in	r29, 0x3e	; 62
    4f4a:	29 97       	sbiw	r28, 0x09	; 9
    4f4c:	0f b6       	in	r0, 0x3f	; 63
    4f4e:	f8 94       	cli
    4f50:	de bf       	out	0x3e, r29	; 62
    4f52:	0f be       	out	0x3f, r0	; 63
    4f54:	cd bf       	out	0x3d, r28	; 61
    4f56:	89 e0       	ldi	r24, 0x09	; 9
    4f58:	e2 e4       	ldi	r30, 0x42	; 66
    4f5a:	f2 e0       	ldi	r31, 0x02	; 2
    4f5c:	9e 01       	movw	r18, r28
    4f5e:	2f 5f       	subi	r18, 0xFF	; 255
    4f60:	3f 4f       	sbci	r19, 0xFF	; 255
    4f62:	d9 01       	movw	r26, r18
    4f64:	01 90       	ld	r0, Z+
    4f66:	0d 92       	st	X+, r0
    4f68:	8a 95       	dec	r24
    4f6a:	e1 f7       	brne	.-8      	; 0x4f64 <mh_z19_takeMeassuring+0x22>
    4f6c:	10 92 0e 19 	sts	0x190E, r1	; 0x80190e <_ppm+0x1>
    4f70:	10 92 0d 19 	sts	0x190D, r1	; 0x80190d <_ppm>
    4f74:	80 91 0f 19 	lds	r24, 0x190F	; 0x80190f <_serial>
    4f78:	90 91 10 19 	lds	r25, 0x1910	; 0x801910 <_serial+0x1>
    4f7c:	00 97       	sbiw	r24, 0x00	; 0
    4f7e:	31 f0       	breq	.+12     	; 0x4f8c <mh_z19_takeMeassuring+0x4a>
    4f80:	42 2f       	mov	r20, r18
    4f82:	53 2f       	mov	r21, r19
    4f84:	69 e0       	ldi	r22, 0x09	; 9
    4f86:	22 d1       	rcall	.+580    	; 0x51cc <serial_sendBytes>
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	01 c0       	rjmp	.+2      	; 0x4f8e <mh_z19_takeMeassuring+0x4c>
    4f8c:	82 e0       	ldi	r24, 0x02	; 2
    4f8e:	29 96       	adiw	r28, 0x09	; 9
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	f8 94       	cli
    4f94:	de bf       	out	0x3e, r29	; 62
    4f96:	0f be       	out	0x3f, r0	; 63
    4f98:	cd bf       	out	0x3d, r28	; 61
    4f9a:	df 91       	pop	r29
    4f9c:	cf 91       	pop	r28
    4f9e:	08 95       	ret

00004fa0 <mh_z19_getCo2Ppm>:
    4fa0:	20 91 0d 19 	lds	r18, 0x190D	; 0x80190d <_ppm>
    4fa4:	30 91 0e 19 	lds	r19, 0x190E	; 0x80190e <_ppm+0x1>
    4fa8:	21 15       	cp	r18, r1
    4faa:	31 05       	cpc	r19, r1
    4fac:	29 f4       	brne	.+10     	; 0x4fb8 <mh_z19_getCo2Ppm+0x18>
    4fae:	fc 01       	movw	r30, r24
    4fb0:	11 82       	std	Z+1, r1	; 0x01
    4fb2:	10 82       	st	Z, r1
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	08 95       	ret
    4fb8:	fc 01       	movw	r30, r24
    4fba:	31 83       	std	Z+1, r19	; 0x01
    4fbc:	20 83       	st	Z, r18
    4fbe:	80 e0       	ldi	r24, 0x00	; 0
    4fc0:	08 95       	ret

00004fc2 <rc_servo_setPosition>:
    4fc2:	65 36       	cpi	r22, 0x65	; 101
    4fc4:	0c f0       	brlt	.+2      	; 0x4fc8 <rc_servo_setPosition+0x6>
    4fc6:	64 e6       	ldi	r22, 0x64	; 100
    4fc8:	6c 39       	cpi	r22, 0x9C	; 156
    4fca:	0c f4       	brge	.+2      	; 0x4fce <rc_servo_setPosition+0xc>
    4fcc:	6c e9       	ldi	r22, 0x9C	; 156
    4fce:	96 ef       	ldi	r25, 0xF6	; 246
    4fd0:	69 02       	muls	r22, r25
    4fd2:	b0 01       	movw	r22, r0
    4fd4:	11 24       	eor	r1, r1
    4fd6:	68 54       	subi	r22, 0x48	; 72
    4fd8:	74 4f       	sbci	r23, 0xF4	; 244
    4fda:	81 11       	cpse	r24, r1
    4fdc:	05 c0       	rjmp	.+10     	; 0x4fe8 <rc_servo_setPosition+0x26>
    4fde:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4fe2:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4fe6:	08 95       	ret
    4fe8:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4fec:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4ff0:	08 95       	ret

00004ff2 <rc_servo_initialise>:
    4ff2:	ea e0       	ldi	r30, 0x0A	; 10
    4ff4:	f1 e0       	ldi	r31, 0x01	; 1
    4ff6:	80 81       	ld	r24, Z
    4ff8:	88 61       	ori	r24, 0x18	; 24
    4ffa:	80 83       	st	Z, r24
    4ffc:	8f e3       	ldi	r24, 0x3F	; 63
    4ffe:	9c e9       	ldi	r25, 0x9C	; 156
    5000:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    5004:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    5008:	60 e0       	ldi	r22, 0x00	; 0
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	da df       	rcall	.-76     	; 0x4fc2 <rc_servo_setPosition>
    500e:	60 e0       	ldi	r22, 0x00	; 0
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	d7 df       	rcall	.-82     	; 0x4fc2 <rc_servo_setPosition>
    5014:	e0 e2       	ldi	r30, 0x20	; 32
    5016:	f1 e0       	ldi	r31, 0x01	; 1
    5018:	80 81       	ld	r24, Z
    501a:	82 6a       	ori	r24, 0xA2	; 162
    501c:	80 83       	st	Z, r24
    501e:	e1 e2       	ldi	r30, 0x21	; 33
    5020:	f1 e0       	ldi	r31, 0x01	; 1
    5022:	80 81       	ld	r24, Z
    5024:	8a 61       	ori	r24, 0x1A	; 26
    5026:	80 83       	st	Z, r24
    5028:	08 95       	ret

0000502a <serial_create>:
    502a:	2f 92       	push	r2
    502c:	3f 92       	push	r3
    502e:	4f 92       	push	r4
    5030:	5f 92       	push	r5
    5032:	6f 92       	push	r6
    5034:	7f 92       	push	r7
    5036:	8f 92       	push	r8
    5038:	9f 92       	push	r9
    503a:	af 92       	push	r10
    503c:	cf 92       	push	r12
    503e:	ef 92       	push	r14
    5040:	ff 92       	push	r15
    5042:	0f 93       	push	r16
    5044:	1f 93       	push	r17
    5046:	cf 93       	push	r28
    5048:	df 93       	push	r29
    504a:	cd b7       	in	r28, 0x3d	; 61
    504c:	de b7       	in	r29, 0x3e	; 62
    504e:	f8 2e       	mov	r15, r24
    5050:	2a 01       	movw	r4, r20
    5052:	3b 01       	movw	r6, r22
    5054:	88 e0       	ldi	r24, 0x08	; 8
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	0e 94 40 35 	call	0x6a80	; 0x6a80 <malloc>
    505c:	8c 01       	movw	r16, r24
    505e:	8f 2d       	mov	r24, r15
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	fc 01       	movw	r30, r24
    5064:	ee 0f       	add	r30, r30
    5066:	ff 1f       	adc	r31, r31
    5068:	ef 5e       	subi	r30, 0xEF	; 239
    506a:	f6 4e       	sbci	r31, 0xE6	; 230
    506c:	11 83       	std	Z+1, r17	; 0x01
    506e:	00 83       	st	Z, r16
    5070:	01 15       	cp	r16, r1
    5072:	11 05       	cpc	r17, r1
    5074:	09 f4       	brne	.+2      	; 0x5078 <serial_create+0x4e>
    5076:	6d c0       	rjmp	.+218    	; 0x5152 <serial_create+0x128>
    5078:	88 0f       	add	r24, r24
    507a:	99 1f       	adc	r25, r25
    507c:	fc 01       	movw	r30, r24
    507e:	e5 5f       	subi	r30, 0xF5	; 245
    5080:	fd 4f       	sbci	r31, 0xFD	; 253
    5082:	80 81       	ld	r24, Z
    5084:	91 81       	ldd	r25, Z+1	; 0x01
    5086:	d8 01       	movw	r26, r16
    5088:	8d 93       	st	X+, r24
    508a:	9c 93       	st	X, r25
    508c:	8c 2d       	mov	r24, r12
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	88 0f       	add	r24, r24
    5092:	99 1f       	adc	r25, r25
    5094:	88 0f       	add	r24, r24
    5096:	99 1f       	adc	r25, r25
    5098:	0e 94 40 35 	call	0x6a80	; 0x6a80 <malloc>
    509c:	1c 01       	movw	r2, r24
    509e:	86 e0       	ldi	r24, 0x06	; 6
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	0e 94 40 35 	call	0x6a80	; 0x6a80 <malloc>
    50a6:	7c 01       	movw	r14, r24
    50a8:	4c 2d       	mov	r20, r12
    50aa:	b1 01       	movw	r22, r2
    50ac:	f4 d6       	rcall	.+3560   	; 0x5e96 <fifo_init>
    50ae:	f8 01       	movw	r30, r16
    50b0:	f5 82       	std	Z+5, r15	; 0x05
    50b2:	e4 82       	std	Z+4, r14	; 0x04
    50b4:	8a 2d       	mov	r24, r10
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	88 0f       	add	r24, r24
    50be:	99 1f       	adc	r25, r25
    50c0:	0e 94 40 35 	call	0x6a80	; 0x6a80 <malloc>
    50c4:	1c 01       	movw	r2, r24
    50c6:	86 e0       	ldi	r24, 0x06	; 6
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	0e 94 40 35 	call	0x6a80	; 0x6a80 <malloc>
    50ce:	7c 01       	movw	r14, r24
    50d0:	4a 2d       	mov	r20, r10
    50d2:	b1 01       	movw	r22, r2
    50d4:	e0 d6       	rcall	.+3520   	; 0x5e96 <fifo_init>
    50d6:	d8 01       	movw	r26, r16
    50d8:	13 96       	adiw	r26, 0x03	; 3
    50da:	fc 92       	st	X, r15
    50dc:	ee 92       	st	-X, r14
    50de:	12 97       	sbiw	r26, 0x02	; 2
    50e0:	17 96       	adiw	r26, 0x07	; 7
    50e2:	9c 92       	st	X, r9
    50e4:	8e 92       	st	-X, r8
    50e6:	16 97       	sbiw	r26, 0x06	; 6
    50e8:	ff b6       	in	r15, 0x3f	; 63
    50ea:	f8 94       	cli
    50ec:	ed 91       	ld	r30, X+
    50ee:	fc 91       	ld	r31, X
    50f0:	11 97       	sbiw	r26, 0x01	; 1
    50f2:	36 97       	sbiw	r30, 0x06	; 6
    50f4:	80 81       	ld	r24, Z
    50f6:	82 60       	ori	r24, 0x02	; 2
    50f8:	80 83       	st	Z, r24
    50fa:	8d 90       	ld	r8, X+
    50fc:	9c 90       	ld	r9, X
    50fe:	c3 01       	movw	r24, r6
    5100:	b2 01       	movw	r22, r4
    5102:	0e 94 ef 33 	call	0x67de	; 0x67de <__floatunsisf>
    5106:	20 e0       	ldi	r18, 0x00	; 0
    5108:	30 e0       	ldi	r19, 0x00	; 0
    510a:	40 e0       	ldi	r20, 0x00	; 0
    510c:	51 e4       	ldi	r21, 0x41	; 65
    510e:	0e 94 7d 34 	call	0x68fa	; 0x68fa <__mulsf3>
    5112:	9b 01       	movw	r18, r22
    5114:	ac 01       	movw	r20, r24
    5116:	60 e0       	ldi	r22, 0x00	; 0
    5118:	74 e2       	ldi	r23, 0x24	; 36
    511a:	84 e7       	ldi	r24, 0x74	; 116
    511c:	9b e4       	ldi	r25, 0x4B	; 75
    511e:	0e 94 56 33 	call	0x66ac	; 0x66ac <__divsf3>
    5122:	20 e0       	ldi	r18, 0x00	; 0
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	40 e8       	ldi	r20, 0x80	; 128
    5128:	5f e3       	ldi	r21, 0x3F	; 63
    512a:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__subsf3>
    512e:	0e 94 c3 33 	call	0x6786	; 0x6786 <__fixunssfsi>
    5132:	f4 01       	movw	r30, r8
    5134:	32 97       	sbiw	r30, 0x02	; 2
    5136:	60 83       	st	Z, r22
    5138:	d8 01       	movw	r26, r16
    513a:	ed 91       	ld	r30, X+
    513c:	fc 91       	ld	r31, X
    513e:	11 97       	sbiw	r26, 0x01	; 1
    5140:	35 97       	sbiw	r30, 0x05	; 5
    5142:	88 e9       	ldi	r24, 0x98	; 152
    5144:	80 83       	st	Z, r24
    5146:	ed 91       	ld	r30, X+
    5148:	fc 91       	ld	r31, X
    514a:	34 97       	sbiw	r30, 0x04	; 4
    514c:	86 e0       	ldi	r24, 0x06	; 6
    514e:	80 83       	st	Z, r24
    5150:	ff be       	out	0x3f, r15	; 63
    5152:	c8 01       	movw	r24, r16
    5154:	df 91       	pop	r29
    5156:	cf 91       	pop	r28
    5158:	1f 91       	pop	r17
    515a:	0f 91       	pop	r16
    515c:	ff 90       	pop	r15
    515e:	ef 90       	pop	r14
    5160:	cf 90       	pop	r12
    5162:	af 90       	pop	r10
    5164:	9f 90       	pop	r9
    5166:	8f 90       	pop	r8
    5168:	7f 90       	pop	r7
    516a:	6f 90       	pop	r6
    516c:	5f 90       	pop	r5
    516e:	4f 90       	pop	r4
    5170:	3f 90       	pop	r3
    5172:	2f 90       	pop	r2
    5174:	08 95       	ret

00005176 <serial_sendByte>:
    5176:	cf 93       	push	r28
    5178:	df 93       	push	r29
    517a:	dc 01       	movw	r26, r24
    517c:	89 2b       	or	r24, r25
    517e:	01 f1       	breq	.+64     	; 0x51c0 <serial_sendByte+0x4a>
    5180:	12 96       	adiw	r26, 0x02	; 2
    5182:	ed 91       	ld	r30, X+
    5184:	fc 91       	ld	r31, X
    5186:	13 97       	sbiw	r26, 0x03	; 3
    5188:	93 81       	ldd	r25, Z+3	; 0x03
    518a:	82 81       	ldd	r24, Z+2	; 0x02
    518c:	25 81       	ldd	r18, Z+5	; 0x05
    518e:	98 1b       	sub	r25, r24
    5190:	92 23       	and	r25, r18
    5192:	84 81       	ldd	r24, Z+4	; 0x04
    5194:	98 17       	cp	r25, r24
    5196:	b1 f0       	breq	.+44     	; 0x51c4 <serial_sendByte+0x4e>
    5198:	83 81       	ldd	r24, Z+3	; 0x03
    519a:	26 95       	lsr	r18
    519c:	28 23       	and	r18, r24
    519e:	c0 81       	ld	r28, Z
    51a0:	d1 81       	ldd	r29, Z+1	; 0x01
    51a2:	c2 0f       	add	r28, r18
    51a4:	d1 1d       	adc	r29, r1
    51a6:	68 83       	st	Y, r22
    51a8:	8f 5f       	subi	r24, 0xFF	; 255
    51aa:	95 81       	ldd	r25, Z+5	; 0x05
    51ac:	89 23       	and	r24, r25
    51ae:	83 83       	std	Z+3, r24	; 0x03
    51b0:	ed 91       	ld	r30, X+
    51b2:	fc 91       	ld	r31, X
    51b4:	35 97       	sbiw	r30, 0x05	; 5
    51b6:	80 81       	ld	r24, Z
    51b8:	80 62       	ori	r24, 0x20	; 32
    51ba:	80 83       	st	Z, r24
    51bc:	80 e0       	ldi	r24, 0x00	; 0
    51be:	03 c0       	rjmp	.+6      	; 0x51c6 <serial_sendByte+0x50>
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	01 c0       	rjmp	.+2      	; 0x51c6 <serial_sendByte+0x50>
    51c4:	82 e0       	ldi	r24, 0x02	; 2
    51c6:	df 91       	pop	r29
    51c8:	cf 91       	pop	r28
    51ca:	08 95       	ret

000051cc <serial_sendBytes>:
    51cc:	ef 92       	push	r14
    51ce:	ff 92       	push	r15
    51d0:	0f 93       	push	r16
    51d2:	1f 93       	push	r17
    51d4:	cf 93       	push	r28
    51d6:	df 93       	push	r29
    51d8:	7c 01       	movw	r14, r24
    51da:	00 97       	sbiw	r24, 0x00	; 0
    51dc:	09 f4       	brne	.+2      	; 0x51e0 <serial_sendBytes+0x14>
    51de:	41 c0       	rjmp	.+130    	; 0x5262 <serial_sendBytes+0x96>
    51e0:	dc 01       	movw	r26, r24
    51e2:	12 96       	adiw	r26, 0x02	; 2
    51e4:	ed 91       	ld	r30, X+
    51e6:	fc 91       	ld	r31, X
    51e8:	13 97       	sbiw	r26, 0x03	; 3
    51ea:	93 81       	ldd	r25, Z+3	; 0x03
    51ec:	82 81       	ldd	r24, Z+2	; 0x02
    51ee:	98 1b       	sub	r25, r24
    51f0:	85 81       	ldd	r24, Z+5	; 0x05
    51f2:	98 23       	and	r25, r24
    51f4:	84 81       	ldd	r24, Z+4	; 0x04
    51f6:	89 1b       	sub	r24, r25
    51f8:	86 17       	cp	r24, r22
    51fa:	a8 f1       	brcs	.+106    	; 0x5266 <serial_sendBytes+0x9a>
    51fc:	66 23       	and	r22, r22
    51fe:	41 f1       	breq	.+80     	; 0x5250 <serial_sendBytes+0x84>
    5200:	84 2f       	mov	r24, r20
    5202:	95 2f       	mov	r25, r21
    5204:	dc 01       	movw	r26, r24
    5206:	61 50       	subi	r22, 0x01	; 1
    5208:	46 2f       	mov	r20, r22
    520a:	50 e0       	ldi	r21, 0x00	; 0
    520c:	4f 5f       	subi	r20, 0xFF	; 255
    520e:	5f 4f       	sbci	r21, 0xFF	; 255
    5210:	48 0f       	add	r20, r24
    5212:	59 1f       	adc	r21, r25
    5214:	e7 01       	movw	r28, r14
    5216:	ea 81       	ldd	r30, Y+2	; 0x02
    5218:	fb 81       	ldd	r31, Y+3	; 0x03
    521a:	93 81       	ldd	r25, Z+3	; 0x03
    521c:	82 81       	ldd	r24, Z+2	; 0x02
    521e:	25 81       	ldd	r18, Z+5	; 0x05
    5220:	98 1b       	sub	r25, r24
    5222:	92 23       	and	r25, r18
    5224:	84 81       	ldd	r24, Z+4	; 0x04
    5226:	98 17       	cp	r25, r24
    5228:	79 f0       	breq	.+30     	; 0x5248 <serial_sendBytes+0x7c>
    522a:	8c 91       	ld	r24, X
    522c:	93 81       	ldd	r25, Z+3	; 0x03
    522e:	26 95       	lsr	r18
    5230:	29 23       	and	r18, r25
    5232:	60 81       	ld	r22, Z
    5234:	71 81       	ldd	r23, Z+1	; 0x01
    5236:	8b 01       	movw	r16, r22
    5238:	02 0f       	add	r16, r18
    523a:	11 1d       	adc	r17, r1
    523c:	e8 01       	movw	r28, r16
    523e:	88 83       	st	Y, r24
    5240:	9f 5f       	subi	r25, 0xFF	; 255
    5242:	85 81       	ldd	r24, Z+5	; 0x05
    5244:	98 23       	and	r25, r24
    5246:	93 83       	std	Z+3, r25	; 0x03
    5248:	11 96       	adiw	r26, 0x01	; 1
    524a:	a4 17       	cp	r26, r20
    524c:	b5 07       	cpc	r27, r21
    524e:	11 f7       	brne	.-60     	; 0x5214 <serial_sendBytes+0x48>
    5250:	d7 01       	movw	r26, r14
    5252:	ed 91       	ld	r30, X+
    5254:	fc 91       	ld	r31, X
    5256:	35 97       	sbiw	r30, 0x05	; 5
    5258:	80 81       	ld	r24, Z
    525a:	80 62       	ori	r24, 0x20	; 32
    525c:	80 83       	st	Z, r24
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	03 c0       	rjmp	.+6      	; 0x5268 <serial_sendBytes+0x9c>
    5262:	81 e0       	ldi	r24, 0x01	; 1
    5264:	01 c0       	rjmp	.+2      	; 0x5268 <serial_sendBytes+0x9c>
    5266:	82 e0       	ldi	r24, 0x02	; 2
    5268:	df 91       	pop	r29
    526a:	cf 91       	pop	r28
    526c:	1f 91       	pop	r17
    526e:	0f 91       	pop	r16
    5270:	ff 90       	pop	r15
    5272:	ef 90       	pop	r14
    5274:	08 95       	ret

00005276 <serial_getByte>:
    5276:	00 97       	sbiw	r24, 0x00	; 0
    5278:	d1 f0       	breq	.+52     	; 0x52ae <serial_getByte+0x38>
    527a:	dc 01       	movw	r26, r24
    527c:	14 96       	adiw	r26, 0x04	; 4
    527e:	ed 91       	ld	r30, X+
    5280:	fc 91       	ld	r31, X
    5282:	15 97       	sbiw	r26, 0x05	; 5
    5284:	93 81       	ldd	r25, Z+3	; 0x03
    5286:	82 81       	ldd	r24, Z+2	; 0x02
    5288:	98 17       	cp	r25, r24
    528a:	99 f0       	breq	.+38     	; 0x52b2 <serial_getByte+0x3c>
    528c:	92 81       	ldd	r25, Z+2	; 0x02
    528e:	85 81       	ldd	r24, Z+5	; 0x05
    5290:	86 95       	lsr	r24
    5292:	89 23       	and	r24, r25
    5294:	a0 81       	ld	r26, Z
    5296:	b1 81       	ldd	r27, Z+1	; 0x01
    5298:	a8 0f       	add	r26, r24
    529a:	b1 1d       	adc	r27, r1
    529c:	8c 91       	ld	r24, X
    529e:	db 01       	movw	r26, r22
    52a0:	8c 93       	st	X, r24
    52a2:	9f 5f       	subi	r25, 0xFF	; 255
    52a4:	85 81       	ldd	r24, Z+5	; 0x05
    52a6:	98 23       	and	r25, r24
    52a8:	92 83       	std	Z+2, r25	; 0x02
    52aa:	80 e0       	ldi	r24, 0x00	; 0
    52ac:	08 95       	ret
    52ae:	81 e0       	ldi	r24, 0x01	; 1
    52b0:	08 95       	ret
    52b2:	83 e0       	ldi	r24, 0x03	; 3
    52b4:	08 95       	ret

000052b6 <__vector_25>:
    52b6:	1f 92       	push	r1
    52b8:	0f 92       	push	r0
    52ba:	0f b6       	in	r0, 0x3f	; 63
    52bc:	0f 92       	push	r0
    52be:	11 24       	eor	r1, r1
    52c0:	0b b6       	in	r0, 0x3b	; 59
    52c2:	0f 92       	push	r0
    52c4:	2f 93       	push	r18
    52c6:	3f 93       	push	r19
    52c8:	4f 93       	push	r20
    52ca:	5f 93       	push	r21
    52cc:	6f 93       	push	r22
    52ce:	7f 93       	push	r23
    52d0:	8f 93       	push	r24
    52d2:	9f 93       	push	r25
    52d4:	af 93       	push	r26
    52d6:	bf 93       	push	r27
    52d8:	cf 93       	push	r28
    52da:	df 93       	push	r29
    52dc:	ef 93       	push	r30
    52de:	ff 93       	push	r31
    52e0:	a0 91 11 19 	lds	r26, 0x1911	; 0x801911 <_ser_handle>
    52e4:	b0 91 12 19 	lds	r27, 0x1912	; 0x801912 <_ser_handle+0x1>
    52e8:	10 97       	sbiw	r26, 0x00	; 0
    52ea:	11 f1       	breq	.+68     	; 0x5330 <__vector_25+0x7a>
    52ec:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    52f0:	14 96       	adiw	r26, 0x04	; 4
    52f2:	ed 91       	ld	r30, X+
    52f4:	fc 91       	ld	r31, X
    52f6:	15 97       	sbiw	r26, 0x05	; 5
    52f8:	93 81       	ldd	r25, Z+3	; 0x03
    52fa:	82 81       	ldd	r24, Z+2	; 0x02
    52fc:	25 81       	ldd	r18, Z+5	; 0x05
    52fe:	98 1b       	sub	r25, r24
    5300:	92 23       	and	r25, r18
    5302:	84 81       	ldd	r24, Z+4	; 0x04
    5304:	98 17       	cp	r25, r24
    5306:	61 f0       	breq	.+24     	; 0x5320 <__vector_25+0x6a>
    5308:	83 81       	ldd	r24, Z+3	; 0x03
    530a:	26 95       	lsr	r18
    530c:	28 23       	and	r18, r24
    530e:	c0 81       	ld	r28, Z
    5310:	d1 81       	ldd	r29, Z+1	; 0x01
    5312:	c2 0f       	add	r28, r18
    5314:	d1 1d       	adc	r29, r1
    5316:	68 83       	st	Y, r22
    5318:	8f 5f       	subi	r24, 0xFF	; 255
    531a:	95 81       	ldd	r25, Z+5	; 0x05
    531c:	89 23       	and	r24, r25
    531e:	83 83       	std	Z+3, r24	; 0x03
    5320:	16 96       	adiw	r26, 0x06	; 6
    5322:	ed 91       	ld	r30, X+
    5324:	fc 91       	ld	r31, X
    5326:	17 97       	sbiw	r26, 0x07	; 7
    5328:	30 97       	sbiw	r30, 0x00	; 0
    532a:	11 f0       	breq	.+4      	; 0x5330 <__vector_25+0x7a>
    532c:	cd 01       	movw	r24, r26
    532e:	19 95       	eicall
    5330:	ff 91       	pop	r31
    5332:	ef 91       	pop	r30
    5334:	df 91       	pop	r29
    5336:	cf 91       	pop	r28
    5338:	bf 91       	pop	r27
    533a:	af 91       	pop	r26
    533c:	9f 91       	pop	r25
    533e:	8f 91       	pop	r24
    5340:	7f 91       	pop	r23
    5342:	6f 91       	pop	r22
    5344:	5f 91       	pop	r21
    5346:	4f 91       	pop	r20
    5348:	3f 91       	pop	r19
    534a:	2f 91       	pop	r18
    534c:	0f 90       	pop	r0
    534e:	0b be       	out	0x3b, r0	; 59
    5350:	0f 90       	pop	r0
    5352:	0f be       	out	0x3f, r0	; 63
    5354:	0f 90       	pop	r0
    5356:	1f 90       	pop	r1
    5358:	18 95       	reti

0000535a <__vector_26>:
    535a:	1f 92       	push	r1
    535c:	0f 92       	push	r0
    535e:	0f b6       	in	r0, 0x3f	; 63
    5360:	0f 92       	push	r0
    5362:	11 24       	eor	r1, r1
    5364:	0b b6       	in	r0, 0x3b	; 59
    5366:	0f 92       	push	r0
    5368:	2f 93       	push	r18
    536a:	8f 93       	push	r24
    536c:	9f 93       	push	r25
    536e:	af 93       	push	r26
    5370:	bf 93       	push	r27
    5372:	ef 93       	push	r30
    5374:	ff 93       	push	r31
    5376:	e0 91 11 19 	lds	r30, 0x1911	; 0x801911 <_ser_handle>
    537a:	f0 91 12 19 	lds	r31, 0x1912	; 0x801912 <_ser_handle+0x1>
    537e:	30 97       	sbiw	r30, 0x00	; 0
    5380:	b9 f0       	breq	.+46     	; 0x53b0 <__vector_26+0x56>
    5382:	02 80       	ldd	r0, Z+2	; 0x02
    5384:	f3 81       	ldd	r31, Z+3	; 0x03
    5386:	e0 2d       	mov	r30, r0
    5388:	93 81       	ldd	r25, Z+3	; 0x03
    538a:	82 81       	ldd	r24, Z+2	; 0x02
    538c:	98 17       	cp	r25, r24
    538e:	b1 f0       	breq	.+44     	; 0x53bc <__vector_26+0x62>
    5390:	92 81       	ldd	r25, Z+2	; 0x02
    5392:	85 81       	ldd	r24, Z+5	; 0x05
    5394:	28 2f       	mov	r18, r24
    5396:	26 95       	lsr	r18
    5398:	29 23       	and	r18, r25
    539a:	a0 81       	ld	r26, Z
    539c:	b1 81       	ldd	r27, Z+1	; 0x01
    539e:	a2 0f       	add	r26, r18
    53a0:	b1 1d       	adc	r27, r1
    53a2:	2c 91       	ld	r18, X
    53a4:	9f 5f       	subi	r25, 0xFF	; 255
    53a6:	89 23       	and	r24, r25
    53a8:	82 83       	std	Z+2, r24	; 0x02
    53aa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    53ae:	0b c0       	rjmp	.+22     	; 0x53c6 <__vector_26+0x6c>
    53b0:	e1 ec       	ldi	r30, 0xC1	; 193
    53b2:	f0 e0       	ldi	r31, 0x00	; 0
    53b4:	80 81       	ld	r24, Z
    53b6:	8f 7d       	andi	r24, 0xDF	; 223
    53b8:	80 83       	st	Z, r24
    53ba:	05 c0       	rjmp	.+10     	; 0x53c6 <__vector_26+0x6c>
    53bc:	e1 ec       	ldi	r30, 0xC1	; 193
    53be:	f0 e0       	ldi	r31, 0x00	; 0
    53c0:	80 81       	ld	r24, Z
    53c2:	8f 7d       	andi	r24, 0xDF	; 223
    53c4:	80 83       	st	Z, r24
    53c6:	ff 91       	pop	r31
    53c8:	ef 91       	pop	r30
    53ca:	bf 91       	pop	r27
    53cc:	af 91       	pop	r26
    53ce:	9f 91       	pop	r25
    53d0:	8f 91       	pop	r24
    53d2:	2f 91       	pop	r18
    53d4:	0f 90       	pop	r0
    53d6:	0b be       	out	0x3b, r0	; 59
    53d8:	0f 90       	pop	r0
    53da:	0f be       	out	0x3f, r0	; 63
    53dc:	0f 90       	pop	r0
    53de:	1f 90       	pop	r1
    53e0:	18 95       	reti

000053e2 <__vector_36>:
    53e2:	1f 92       	push	r1
    53e4:	0f 92       	push	r0
    53e6:	0f b6       	in	r0, 0x3f	; 63
    53e8:	0f 92       	push	r0
    53ea:	11 24       	eor	r1, r1
    53ec:	0b b6       	in	r0, 0x3b	; 59
    53ee:	0f 92       	push	r0
    53f0:	2f 93       	push	r18
    53f2:	3f 93       	push	r19
    53f4:	4f 93       	push	r20
    53f6:	5f 93       	push	r21
    53f8:	6f 93       	push	r22
    53fa:	7f 93       	push	r23
    53fc:	8f 93       	push	r24
    53fe:	9f 93       	push	r25
    5400:	af 93       	push	r26
    5402:	bf 93       	push	r27
    5404:	cf 93       	push	r28
    5406:	df 93       	push	r29
    5408:	ef 93       	push	r30
    540a:	ff 93       	push	r31
    540c:	a0 91 13 19 	lds	r26, 0x1913	; 0x801913 <_ser_handle+0x2>
    5410:	b0 91 14 19 	lds	r27, 0x1914	; 0x801914 <_ser_handle+0x3>
    5414:	10 97       	sbiw	r26, 0x00	; 0
    5416:	11 f1       	breq	.+68     	; 0x545c <__vector_36+0x7a>
    5418:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    541c:	14 96       	adiw	r26, 0x04	; 4
    541e:	ed 91       	ld	r30, X+
    5420:	fc 91       	ld	r31, X
    5422:	15 97       	sbiw	r26, 0x05	; 5
    5424:	93 81       	ldd	r25, Z+3	; 0x03
    5426:	82 81       	ldd	r24, Z+2	; 0x02
    5428:	25 81       	ldd	r18, Z+5	; 0x05
    542a:	98 1b       	sub	r25, r24
    542c:	92 23       	and	r25, r18
    542e:	84 81       	ldd	r24, Z+4	; 0x04
    5430:	98 17       	cp	r25, r24
    5432:	61 f0       	breq	.+24     	; 0x544c <__vector_36+0x6a>
    5434:	83 81       	ldd	r24, Z+3	; 0x03
    5436:	26 95       	lsr	r18
    5438:	28 23       	and	r18, r24
    543a:	c0 81       	ld	r28, Z
    543c:	d1 81       	ldd	r29, Z+1	; 0x01
    543e:	c2 0f       	add	r28, r18
    5440:	d1 1d       	adc	r29, r1
    5442:	68 83       	st	Y, r22
    5444:	8f 5f       	subi	r24, 0xFF	; 255
    5446:	95 81       	ldd	r25, Z+5	; 0x05
    5448:	89 23       	and	r24, r25
    544a:	83 83       	std	Z+3, r24	; 0x03
    544c:	16 96       	adiw	r26, 0x06	; 6
    544e:	ed 91       	ld	r30, X+
    5450:	fc 91       	ld	r31, X
    5452:	17 97       	sbiw	r26, 0x07	; 7
    5454:	30 97       	sbiw	r30, 0x00	; 0
    5456:	11 f0       	breq	.+4      	; 0x545c <__vector_36+0x7a>
    5458:	cd 01       	movw	r24, r26
    545a:	19 95       	eicall
    545c:	ff 91       	pop	r31
    545e:	ef 91       	pop	r30
    5460:	df 91       	pop	r29
    5462:	cf 91       	pop	r28
    5464:	bf 91       	pop	r27
    5466:	af 91       	pop	r26
    5468:	9f 91       	pop	r25
    546a:	8f 91       	pop	r24
    546c:	7f 91       	pop	r23
    546e:	6f 91       	pop	r22
    5470:	5f 91       	pop	r21
    5472:	4f 91       	pop	r20
    5474:	3f 91       	pop	r19
    5476:	2f 91       	pop	r18
    5478:	0f 90       	pop	r0
    547a:	0b be       	out	0x3b, r0	; 59
    547c:	0f 90       	pop	r0
    547e:	0f be       	out	0x3f, r0	; 63
    5480:	0f 90       	pop	r0
    5482:	1f 90       	pop	r1
    5484:	18 95       	reti

00005486 <__vector_37>:
    5486:	1f 92       	push	r1
    5488:	0f 92       	push	r0
    548a:	0f b6       	in	r0, 0x3f	; 63
    548c:	0f 92       	push	r0
    548e:	11 24       	eor	r1, r1
    5490:	0b b6       	in	r0, 0x3b	; 59
    5492:	0f 92       	push	r0
    5494:	2f 93       	push	r18
    5496:	8f 93       	push	r24
    5498:	9f 93       	push	r25
    549a:	af 93       	push	r26
    549c:	bf 93       	push	r27
    549e:	ef 93       	push	r30
    54a0:	ff 93       	push	r31
    54a2:	e0 91 13 19 	lds	r30, 0x1913	; 0x801913 <_ser_handle+0x2>
    54a6:	f0 91 14 19 	lds	r31, 0x1914	; 0x801914 <_ser_handle+0x3>
    54aa:	30 97       	sbiw	r30, 0x00	; 0
    54ac:	b9 f0       	breq	.+46     	; 0x54dc <__vector_37+0x56>
    54ae:	02 80       	ldd	r0, Z+2	; 0x02
    54b0:	f3 81       	ldd	r31, Z+3	; 0x03
    54b2:	e0 2d       	mov	r30, r0
    54b4:	93 81       	ldd	r25, Z+3	; 0x03
    54b6:	82 81       	ldd	r24, Z+2	; 0x02
    54b8:	98 17       	cp	r25, r24
    54ba:	b1 f0       	breq	.+44     	; 0x54e8 <__vector_37+0x62>
    54bc:	92 81       	ldd	r25, Z+2	; 0x02
    54be:	85 81       	ldd	r24, Z+5	; 0x05
    54c0:	28 2f       	mov	r18, r24
    54c2:	26 95       	lsr	r18
    54c4:	29 23       	and	r18, r25
    54c6:	a0 81       	ld	r26, Z
    54c8:	b1 81       	ldd	r27, Z+1	; 0x01
    54ca:	a2 0f       	add	r26, r18
    54cc:	b1 1d       	adc	r27, r1
    54ce:	2c 91       	ld	r18, X
    54d0:	9f 5f       	subi	r25, 0xFF	; 255
    54d2:	89 23       	and	r24, r25
    54d4:	82 83       	std	Z+2, r24	; 0x02
    54d6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    54da:	0b c0       	rjmp	.+22     	; 0x54f2 <__vector_37+0x6c>
    54dc:	e9 ec       	ldi	r30, 0xC9	; 201
    54de:	f0 e0       	ldi	r31, 0x00	; 0
    54e0:	80 81       	ld	r24, Z
    54e2:	8f 7d       	andi	r24, 0xDF	; 223
    54e4:	80 83       	st	Z, r24
    54e6:	05 c0       	rjmp	.+10     	; 0x54f2 <__vector_37+0x6c>
    54e8:	e9 ec       	ldi	r30, 0xC9	; 201
    54ea:	f0 e0       	ldi	r31, 0x00	; 0
    54ec:	80 81       	ld	r24, Z
    54ee:	8f 7d       	andi	r24, 0xDF	; 223
    54f0:	80 83       	st	Z, r24
    54f2:	ff 91       	pop	r31
    54f4:	ef 91       	pop	r30
    54f6:	bf 91       	pop	r27
    54f8:	af 91       	pop	r26
    54fa:	9f 91       	pop	r25
    54fc:	8f 91       	pop	r24
    54fe:	2f 91       	pop	r18
    5500:	0f 90       	pop	r0
    5502:	0b be       	out	0x3b, r0	; 59
    5504:	0f 90       	pop	r0
    5506:	0f be       	out	0x3f, r0	; 63
    5508:	0f 90       	pop	r0
    550a:	1f 90       	pop	r1
    550c:	18 95       	reti

0000550e <__vector_51>:
    550e:	1f 92       	push	r1
    5510:	0f 92       	push	r0
    5512:	0f b6       	in	r0, 0x3f	; 63
    5514:	0f 92       	push	r0
    5516:	11 24       	eor	r1, r1
    5518:	0b b6       	in	r0, 0x3b	; 59
    551a:	0f 92       	push	r0
    551c:	2f 93       	push	r18
    551e:	3f 93       	push	r19
    5520:	4f 93       	push	r20
    5522:	5f 93       	push	r21
    5524:	6f 93       	push	r22
    5526:	7f 93       	push	r23
    5528:	8f 93       	push	r24
    552a:	9f 93       	push	r25
    552c:	af 93       	push	r26
    552e:	bf 93       	push	r27
    5530:	cf 93       	push	r28
    5532:	df 93       	push	r29
    5534:	ef 93       	push	r30
    5536:	ff 93       	push	r31
    5538:	a0 91 15 19 	lds	r26, 0x1915	; 0x801915 <_ser_handle+0x4>
    553c:	b0 91 16 19 	lds	r27, 0x1916	; 0x801916 <_ser_handle+0x5>
    5540:	10 97       	sbiw	r26, 0x00	; 0
    5542:	11 f1       	breq	.+68     	; 0x5588 <__vector_51+0x7a>
    5544:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5548:	14 96       	adiw	r26, 0x04	; 4
    554a:	ed 91       	ld	r30, X+
    554c:	fc 91       	ld	r31, X
    554e:	15 97       	sbiw	r26, 0x05	; 5
    5550:	93 81       	ldd	r25, Z+3	; 0x03
    5552:	82 81       	ldd	r24, Z+2	; 0x02
    5554:	25 81       	ldd	r18, Z+5	; 0x05
    5556:	98 1b       	sub	r25, r24
    5558:	92 23       	and	r25, r18
    555a:	84 81       	ldd	r24, Z+4	; 0x04
    555c:	98 17       	cp	r25, r24
    555e:	61 f0       	breq	.+24     	; 0x5578 <__vector_51+0x6a>
    5560:	83 81       	ldd	r24, Z+3	; 0x03
    5562:	26 95       	lsr	r18
    5564:	28 23       	and	r18, r24
    5566:	c0 81       	ld	r28, Z
    5568:	d1 81       	ldd	r29, Z+1	; 0x01
    556a:	c2 0f       	add	r28, r18
    556c:	d1 1d       	adc	r29, r1
    556e:	68 83       	st	Y, r22
    5570:	8f 5f       	subi	r24, 0xFF	; 255
    5572:	95 81       	ldd	r25, Z+5	; 0x05
    5574:	89 23       	and	r24, r25
    5576:	83 83       	std	Z+3, r24	; 0x03
    5578:	16 96       	adiw	r26, 0x06	; 6
    557a:	ed 91       	ld	r30, X+
    557c:	fc 91       	ld	r31, X
    557e:	17 97       	sbiw	r26, 0x07	; 7
    5580:	30 97       	sbiw	r30, 0x00	; 0
    5582:	11 f0       	breq	.+4      	; 0x5588 <__vector_51+0x7a>
    5584:	cd 01       	movw	r24, r26
    5586:	19 95       	eicall
    5588:	ff 91       	pop	r31
    558a:	ef 91       	pop	r30
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	bf 91       	pop	r27
    5592:	af 91       	pop	r26
    5594:	9f 91       	pop	r25
    5596:	8f 91       	pop	r24
    5598:	7f 91       	pop	r23
    559a:	6f 91       	pop	r22
    559c:	5f 91       	pop	r21
    559e:	4f 91       	pop	r20
    55a0:	3f 91       	pop	r19
    55a2:	2f 91       	pop	r18
    55a4:	0f 90       	pop	r0
    55a6:	0b be       	out	0x3b, r0	; 59
    55a8:	0f 90       	pop	r0
    55aa:	0f be       	out	0x3f, r0	; 63
    55ac:	0f 90       	pop	r0
    55ae:	1f 90       	pop	r1
    55b0:	18 95       	reti

000055b2 <__vector_52>:
    55b2:	1f 92       	push	r1
    55b4:	0f 92       	push	r0
    55b6:	0f b6       	in	r0, 0x3f	; 63
    55b8:	0f 92       	push	r0
    55ba:	11 24       	eor	r1, r1
    55bc:	0b b6       	in	r0, 0x3b	; 59
    55be:	0f 92       	push	r0
    55c0:	2f 93       	push	r18
    55c2:	8f 93       	push	r24
    55c4:	9f 93       	push	r25
    55c6:	af 93       	push	r26
    55c8:	bf 93       	push	r27
    55ca:	ef 93       	push	r30
    55cc:	ff 93       	push	r31
    55ce:	e0 91 15 19 	lds	r30, 0x1915	; 0x801915 <_ser_handle+0x4>
    55d2:	f0 91 16 19 	lds	r31, 0x1916	; 0x801916 <_ser_handle+0x5>
    55d6:	30 97       	sbiw	r30, 0x00	; 0
    55d8:	b9 f0       	breq	.+46     	; 0x5608 <__vector_52+0x56>
    55da:	02 80       	ldd	r0, Z+2	; 0x02
    55dc:	f3 81       	ldd	r31, Z+3	; 0x03
    55de:	e0 2d       	mov	r30, r0
    55e0:	93 81       	ldd	r25, Z+3	; 0x03
    55e2:	82 81       	ldd	r24, Z+2	; 0x02
    55e4:	98 17       	cp	r25, r24
    55e6:	b1 f0       	breq	.+44     	; 0x5614 <__vector_52+0x62>
    55e8:	92 81       	ldd	r25, Z+2	; 0x02
    55ea:	85 81       	ldd	r24, Z+5	; 0x05
    55ec:	28 2f       	mov	r18, r24
    55ee:	26 95       	lsr	r18
    55f0:	29 23       	and	r18, r25
    55f2:	a0 81       	ld	r26, Z
    55f4:	b1 81       	ldd	r27, Z+1	; 0x01
    55f6:	a2 0f       	add	r26, r18
    55f8:	b1 1d       	adc	r27, r1
    55fa:	2c 91       	ld	r18, X
    55fc:	9f 5f       	subi	r25, 0xFF	; 255
    55fe:	89 23       	and	r24, r25
    5600:	82 83       	std	Z+2, r24	; 0x02
    5602:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5606:	0b c0       	rjmp	.+22     	; 0x561e <__vector_52+0x6c>
    5608:	e1 ed       	ldi	r30, 0xD1	; 209
    560a:	f0 e0       	ldi	r31, 0x00	; 0
    560c:	80 81       	ld	r24, Z
    560e:	8f 7d       	andi	r24, 0xDF	; 223
    5610:	80 83       	st	Z, r24
    5612:	05 c0       	rjmp	.+10     	; 0x561e <__vector_52+0x6c>
    5614:	e1 ed       	ldi	r30, 0xD1	; 209
    5616:	f0 e0       	ldi	r31, 0x00	; 0
    5618:	80 81       	ld	r24, Z
    561a:	8f 7d       	andi	r24, 0xDF	; 223
    561c:	80 83       	st	Z, r24
    561e:	ff 91       	pop	r31
    5620:	ef 91       	pop	r30
    5622:	bf 91       	pop	r27
    5624:	af 91       	pop	r26
    5626:	9f 91       	pop	r25
    5628:	8f 91       	pop	r24
    562a:	2f 91       	pop	r18
    562c:	0f 90       	pop	r0
    562e:	0b be       	out	0x3b, r0	; 59
    5630:	0f 90       	pop	r0
    5632:	0f be       	out	0x3f, r0	; 63
    5634:	0f 90       	pop	r0
    5636:	1f 90       	pop	r1
    5638:	18 95       	reti

0000563a <__vector_54>:
    563a:	1f 92       	push	r1
    563c:	0f 92       	push	r0
    563e:	0f b6       	in	r0, 0x3f	; 63
    5640:	0f 92       	push	r0
    5642:	11 24       	eor	r1, r1
    5644:	0b b6       	in	r0, 0x3b	; 59
    5646:	0f 92       	push	r0
    5648:	2f 93       	push	r18
    564a:	3f 93       	push	r19
    564c:	4f 93       	push	r20
    564e:	5f 93       	push	r21
    5650:	6f 93       	push	r22
    5652:	7f 93       	push	r23
    5654:	8f 93       	push	r24
    5656:	9f 93       	push	r25
    5658:	af 93       	push	r26
    565a:	bf 93       	push	r27
    565c:	cf 93       	push	r28
    565e:	df 93       	push	r29
    5660:	ef 93       	push	r30
    5662:	ff 93       	push	r31
    5664:	a0 91 17 19 	lds	r26, 0x1917	; 0x801917 <_ser_handle+0x6>
    5668:	b0 91 18 19 	lds	r27, 0x1918	; 0x801918 <_ser_handle+0x7>
    566c:	10 97       	sbiw	r26, 0x00	; 0
    566e:	11 f1       	breq	.+68     	; 0x56b4 <__vector_54+0x7a>
    5670:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5674:	14 96       	adiw	r26, 0x04	; 4
    5676:	ed 91       	ld	r30, X+
    5678:	fc 91       	ld	r31, X
    567a:	15 97       	sbiw	r26, 0x05	; 5
    567c:	93 81       	ldd	r25, Z+3	; 0x03
    567e:	82 81       	ldd	r24, Z+2	; 0x02
    5680:	25 81       	ldd	r18, Z+5	; 0x05
    5682:	98 1b       	sub	r25, r24
    5684:	92 23       	and	r25, r18
    5686:	84 81       	ldd	r24, Z+4	; 0x04
    5688:	98 17       	cp	r25, r24
    568a:	61 f0       	breq	.+24     	; 0x56a4 <__vector_54+0x6a>
    568c:	83 81       	ldd	r24, Z+3	; 0x03
    568e:	26 95       	lsr	r18
    5690:	28 23       	and	r18, r24
    5692:	c0 81       	ld	r28, Z
    5694:	d1 81       	ldd	r29, Z+1	; 0x01
    5696:	c2 0f       	add	r28, r18
    5698:	d1 1d       	adc	r29, r1
    569a:	68 83       	st	Y, r22
    569c:	8f 5f       	subi	r24, 0xFF	; 255
    569e:	95 81       	ldd	r25, Z+5	; 0x05
    56a0:	89 23       	and	r24, r25
    56a2:	83 83       	std	Z+3, r24	; 0x03
    56a4:	16 96       	adiw	r26, 0x06	; 6
    56a6:	ed 91       	ld	r30, X+
    56a8:	fc 91       	ld	r31, X
    56aa:	17 97       	sbiw	r26, 0x07	; 7
    56ac:	30 97       	sbiw	r30, 0x00	; 0
    56ae:	11 f0       	breq	.+4      	; 0x56b4 <__vector_54+0x7a>
    56b0:	cd 01       	movw	r24, r26
    56b2:	19 95       	eicall
    56b4:	ff 91       	pop	r31
    56b6:	ef 91       	pop	r30
    56b8:	df 91       	pop	r29
    56ba:	cf 91       	pop	r28
    56bc:	bf 91       	pop	r27
    56be:	af 91       	pop	r26
    56c0:	9f 91       	pop	r25
    56c2:	8f 91       	pop	r24
    56c4:	7f 91       	pop	r23
    56c6:	6f 91       	pop	r22
    56c8:	5f 91       	pop	r21
    56ca:	4f 91       	pop	r20
    56cc:	3f 91       	pop	r19
    56ce:	2f 91       	pop	r18
    56d0:	0f 90       	pop	r0
    56d2:	0b be       	out	0x3b, r0	; 59
    56d4:	0f 90       	pop	r0
    56d6:	0f be       	out	0x3f, r0	; 63
    56d8:	0f 90       	pop	r0
    56da:	1f 90       	pop	r1
    56dc:	18 95       	reti

000056de <__vector_55>:
    56de:	1f 92       	push	r1
    56e0:	0f 92       	push	r0
    56e2:	0f b6       	in	r0, 0x3f	; 63
    56e4:	0f 92       	push	r0
    56e6:	11 24       	eor	r1, r1
    56e8:	0b b6       	in	r0, 0x3b	; 59
    56ea:	0f 92       	push	r0
    56ec:	2f 93       	push	r18
    56ee:	8f 93       	push	r24
    56f0:	9f 93       	push	r25
    56f2:	af 93       	push	r26
    56f4:	bf 93       	push	r27
    56f6:	ef 93       	push	r30
    56f8:	ff 93       	push	r31
    56fa:	e0 91 17 19 	lds	r30, 0x1917	; 0x801917 <_ser_handle+0x6>
    56fe:	f0 91 18 19 	lds	r31, 0x1918	; 0x801918 <_ser_handle+0x7>
    5702:	30 97       	sbiw	r30, 0x00	; 0
    5704:	b9 f0       	breq	.+46     	; 0x5734 <__vector_55+0x56>
    5706:	02 80       	ldd	r0, Z+2	; 0x02
    5708:	f3 81       	ldd	r31, Z+3	; 0x03
    570a:	e0 2d       	mov	r30, r0
    570c:	93 81       	ldd	r25, Z+3	; 0x03
    570e:	82 81       	ldd	r24, Z+2	; 0x02
    5710:	98 17       	cp	r25, r24
    5712:	b1 f0       	breq	.+44     	; 0x5740 <__vector_55+0x62>
    5714:	92 81       	ldd	r25, Z+2	; 0x02
    5716:	85 81       	ldd	r24, Z+5	; 0x05
    5718:	28 2f       	mov	r18, r24
    571a:	26 95       	lsr	r18
    571c:	29 23       	and	r18, r25
    571e:	a0 81       	ld	r26, Z
    5720:	b1 81       	ldd	r27, Z+1	; 0x01
    5722:	a2 0f       	add	r26, r18
    5724:	b1 1d       	adc	r27, r1
    5726:	2c 91       	ld	r18, X
    5728:	9f 5f       	subi	r25, 0xFF	; 255
    572a:	89 23       	and	r24, r25
    572c:	82 83       	std	Z+2, r24	; 0x02
    572e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5732:	0b c0       	rjmp	.+22     	; 0x574a <__vector_55+0x6c>
    5734:	e1 e3       	ldi	r30, 0x31	; 49
    5736:	f1 e0       	ldi	r31, 0x01	; 1
    5738:	80 81       	ld	r24, Z
    573a:	8f 7d       	andi	r24, 0xDF	; 223
    573c:	80 83       	st	Z, r24
    573e:	05 c0       	rjmp	.+10     	; 0x574a <__vector_55+0x6c>
    5740:	e1 e3       	ldi	r30, 0x31	; 49
    5742:	f1 e0       	ldi	r31, 0x01	; 1
    5744:	80 81       	ld	r24, Z
    5746:	8f 7d       	andi	r24, 0xDF	; 223
    5748:	80 83       	st	Z, r24
    574a:	ff 91       	pop	r31
    574c:	ef 91       	pop	r30
    574e:	bf 91       	pop	r27
    5750:	af 91       	pop	r26
    5752:	9f 91       	pop	r25
    5754:	8f 91       	pop	r24
    5756:	2f 91       	pop	r18
    5758:	0f 90       	pop	r0
    575a:	0b be       	out	0x3b, r0	; 59
    575c:	0f 90       	pop	r0
    575e:	0f be       	out	0x3f, r0	; 63
    5760:	0f 90       	pop	r0
    5762:	1f 90       	pop	r1
    5764:	18 95       	reti

00005766 <usart_getchar>:
    5766:	cf 93       	push	r28
    5768:	df 93       	push	r29
    576a:	1f 92       	push	r1
    576c:	cd b7       	in	r28, 0x3d	; 61
    576e:	de b7       	in	r29, 0x3e	; 62
    5770:	be 01       	movw	r22, r28
    5772:	6f 5f       	subi	r22, 0xFF	; 255
    5774:	7f 4f       	sbci	r23, 0xFF	; 255
    5776:	80 91 19 19 	lds	r24, 0x1919	; 0x801919 <_com_serial_instance>
    577a:	90 91 1a 19 	lds	r25, 0x191A	; 0x80191a <_com_serial_instance+0x1>
    577e:	7b dd       	rcall	.-1290   	; 0x5276 <serial_getByte>
    5780:	81 11       	cpse	r24, r1
    5782:	f6 cf       	rjmp	.-20     	; 0x5770 <usart_getchar+0xa>
    5784:	89 81       	ldd	r24, Y+1	; 0x01
    5786:	90 e0       	ldi	r25, 0x00	; 0
    5788:	0f 90       	pop	r0
    578a:	df 91       	pop	r29
    578c:	cf 91       	pop	r28
    578e:	08 95       	ret

00005790 <usart_putchar>:
    5790:	68 2f       	mov	r22, r24
    5792:	80 91 19 19 	lds	r24, 0x1919	; 0x801919 <_com_serial_instance>
    5796:	90 91 1a 19 	lds	r25, 0x191A	; 0x80191a <_com_serial_instance+0x1>
    579a:	ed dc       	rcall	.-1574   	; 0x5176 <serial_sendByte>
    579c:	80 e0       	ldi	r24, 0x00	; 0
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	08 95       	ret

000057a2 <stdio_initialise>:
    57a2:	8f 92       	push	r8
    57a4:	9f 92       	push	r9
    57a6:	af 92       	push	r10
    57a8:	cf 92       	push	r12
    57aa:	ef 92       	push	r14
    57ac:	0f 93       	push	r16
    57ae:	81 2c       	mov	r8, r1
    57b0:	91 2c       	mov	r9, r1
    57b2:	68 94       	set
    57b4:	aa 24       	eor	r10, r10
    57b6:	a7 f8       	bld	r10, 7
    57b8:	68 94       	set
    57ba:	cc 24       	eor	r12, r12
    57bc:	c7 f8       	bld	r12, 7
    57be:	e1 2c       	mov	r14, r1
    57c0:	00 e0       	ldi	r16, 0x00	; 0
    57c2:	23 e0       	ldi	r18, 0x03	; 3
    57c4:	40 e0       	ldi	r20, 0x00	; 0
    57c6:	51 ee       	ldi	r21, 0xE1	; 225
    57c8:	60 e0       	ldi	r22, 0x00	; 0
    57ca:	70 e0       	ldi	r23, 0x00	; 0
    57cc:	2e dc       	rcall	.-1956   	; 0x502a <serial_create>
    57ce:	90 93 1a 19 	sts	0x191A, r25	; 0x80191a <_com_serial_instance+0x1>
    57d2:	80 93 19 19 	sts	0x1919, r24	; 0x801919 <_com_serial_instance>
    57d6:	e1 e5       	ldi	r30, 0x51	; 81
    57d8:	f9 e1       	ldi	r31, 0x19	; 25
    57da:	83 e1       	ldi	r24, 0x13	; 19
    57dc:	92 e0       	ldi	r25, 0x02	; 2
    57de:	91 83       	std	Z+1, r25	; 0x01
    57e0:	80 83       	st	Z, r24
    57e2:	93 83       	std	Z+3, r25	; 0x03
    57e4:	82 83       	std	Z+2, r24	; 0x02
    57e6:	0f 91       	pop	r16
    57e8:	ef 90       	pop	r14
    57ea:	cf 90       	pop	r12
    57ec:	af 90       	pop	r10
    57ee:	9f 90       	pop	r9
    57f0:	8f 90       	pop	r8
    57f2:	08 95       	ret

000057f4 <_turn_off>:
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	fc 01       	movw	r30, r24
    57f8:	ee 0f       	add	r30, r30
    57fa:	ff 1f       	adc	r31, r31
    57fc:	e8 0f       	add	r30, r24
    57fe:	f9 1f       	adc	r31, r25
    5800:	ee 0f       	add	r30, r30
    5802:	ff 1f       	adc	r31, r31
    5804:	e5 5e       	subi	r30, 0xE5	; 229
    5806:	f6 4e       	sbci	r31, 0xE6	; 230
    5808:	23 81       	ldd	r18, Z+3	; 0x03
    580a:	21 11       	cpse	r18, r1
    580c:	1f c0       	rjmp	.+62     	; 0x584c <_turn_off+0x58>
    580e:	9c 01       	movw	r18, r24
    5810:	22 0f       	add	r18, r18
    5812:	33 1f       	adc	r19, r19
    5814:	f9 01       	movw	r30, r18
    5816:	e8 0f       	add	r30, r24
    5818:	f9 1f       	adc	r31, r25
    581a:	ee 0f       	add	r30, r30
    581c:	ff 1f       	adc	r31, r31
    581e:	e5 5e       	subi	r30, 0xE5	; 229
    5820:	f6 4e       	sbci	r31, 0xE6	; 230
    5822:	a0 81       	ld	r26, Z
    5824:	b1 81       	ldd	r27, Z+1	; 0x01
    5826:	4c 91       	ld	r20, X
    5828:	f9 01       	movw	r30, r18
    582a:	e8 0f       	add	r30, r24
    582c:	f9 1f       	adc	r31, r25
    582e:	ee 0f       	add	r30, r30
    5830:	ff 1f       	adc	r31, r31
    5832:	e5 5e       	subi	r30, 0xE5	; 229
    5834:	f6 4e       	sbci	r31, 0xE6	; 230
    5836:	81 e0       	ldi	r24, 0x01	; 1
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	02 80       	ldd	r0, Z+2	; 0x02
    583c:	02 c0       	rjmp	.+4      	; 0x5842 <_turn_off+0x4e>
    583e:	88 0f       	add	r24, r24
    5840:	99 1f       	adc	r25, r25
    5842:	0a 94       	dec	r0
    5844:	e2 f7       	brpl	.-8      	; 0x583e <_turn_off+0x4a>
    5846:	84 2b       	or	r24, r20
    5848:	8c 93       	st	X, r24
    584a:	08 95       	ret
    584c:	fc 01       	movw	r30, r24
    584e:	ee 0f       	add	r30, r30
    5850:	ff 1f       	adc	r31, r31
    5852:	df 01       	movw	r26, r30
    5854:	a8 0f       	add	r26, r24
    5856:	b9 1f       	adc	r27, r25
    5858:	aa 0f       	add	r26, r26
    585a:	bb 1f       	adc	r27, r27
    585c:	a5 5e       	subi	r26, 0xE5	; 229
    585e:	b6 4e       	sbci	r27, 0xE6	; 230
    5860:	0d 90       	ld	r0, X+
    5862:	bc 91       	ld	r27, X
    5864:	a0 2d       	mov	r26, r0
    5866:	2c 91       	ld	r18, X
    5868:	e8 0f       	add	r30, r24
    586a:	f9 1f       	adc	r31, r25
    586c:	ee 0f       	add	r30, r30
    586e:	ff 1f       	adc	r31, r31
    5870:	e5 5e       	subi	r30, 0xE5	; 229
    5872:	f6 4e       	sbci	r31, 0xE6	; 230
    5874:	81 e0       	ldi	r24, 0x01	; 1
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	02 80       	ldd	r0, Z+2	; 0x02
    587a:	02 c0       	rjmp	.+4      	; 0x5880 <_turn_off+0x8c>
    587c:	88 0f       	add	r24, r24
    587e:	99 1f       	adc	r25, r25
    5880:	0a 94       	dec	r0
    5882:	e2 f7       	brpl	.-8      	; 0x587c <_turn_off+0x88>
    5884:	80 95       	com	r24
    5886:	82 23       	and	r24, r18
    5888:	8c 93       	st	X, r24
    588a:	08 95       	ret

0000588c <_turn_on>:
    588c:	90 e0       	ldi	r25, 0x00	; 0
    588e:	fc 01       	movw	r30, r24
    5890:	ee 0f       	add	r30, r30
    5892:	ff 1f       	adc	r31, r31
    5894:	e8 0f       	add	r30, r24
    5896:	f9 1f       	adc	r31, r25
    5898:	ee 0f       	add	r30, r30
    589a:	ff 1f       	adc	r31, r31
    589c:	e5 5e       	subi	r30, 0xE5	; 229
    589e:	f6 4e       	sbci	r31, 0xE6	; 230
    58a0:	23 81       	ldd	r18, Z+3	; 0x03
    58a2:	21 11       	cpse	r18, r1
    58a4:	20 c0       	rjmp	.+64     	; 0x58e6 <_turn_on+0x5a>
    58a6:	9c 01       	movw	r18, r24
    58a8:	22 0f       	add	r18, r18
    58aa:	33 1f       	adc	r19, r19
    58ac:	f9 01       	movw	r30, r18
    58ae:	e8 0f       	add	r30, r24
    58b0:	f9 1f       	adc	r31, r25
    58b2:	ee 0f       	add	r30, r30
    58b4:	ff 1f       	adc	r31, r31
    58b6:	e5 5e       	subi	r30, 0xE5	; 229
    58b8:	f6 4e       	sbci	r31, 0xE6	; 230
    58ba:	a0 81       	ld	r26, Z
    58bc:	b1 81       	ldd	r27, Z+1	; 0x01
    58be:	4c 91       	ld	r20, X
    58c0:	f9 01       	movw	r30, r18
    58c2:	e8 0f       	add	r30, r24
    58c4:	f9 1f       	adc	r31, r25
    58c6:	ee 0f       	add	r30, r30
    58c8:	ff 1f       	adc	r31, r31
    58ca:	e5 5e       	subi	r30, 0xE5	; 229
    58cc:	f6 4e       	sbci	r31, 0xE6	; 230
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	02 80       	ldd	r0, Z+2	; 0x02
    58d4:	02 c0       	rjmp	.+4      	; 0x58da <_turn_on+0x4e>
    58d6:	88 0f       	add	r24, r24
    58d8:	99 1f       	adc	r25, r25
    58da:	0a 94       	dec	r0
    58dc:	e2 f7       	brpl	.-8      	; 0x58d6 <_turn_on+0x4a>
    58de:	80 95       	com	r24
    58e0:	84 23       	and	r24, r20
    58e2:	8c 93       	st	X, r24
    58e4:	08 95       	ret
    58e6:	fc 01       	movw	r30, r24
    58e8:	ee 0f       	add	r30, r30
    58ea:	ff 1f       	adc	r31, r31
    58ec:	df 01       	movw	r26, r30
    58ee:	a8 0f       	add	r26, r24
    58f0:	b9 1f       	adc	r27, r25
    58f2:	aa 0f       	add	r26, r26
    58f4:	bb 1f       	adc	r27, r27
    58f6:	a5 5e       	subi	r26, 0xE5	; 229
    58f8:	b6 4e       	sbci	r27, 0xE6	; 230
    58fa:	0d 90       	ld	r0, X+
    58fc:	bc 91       	ld	r27, X
    58fe:	a0 2d       	mov	r26, r0
    5900:	2c 91       	ld	r18, X
    5902:	e8 0f       	add	r30, r24
    5904:	f9 1f       	adc	r31, r25
    5906:	ee 0f       	add	r30, r30
    5908:	ff 1f       	adc	r31, r31
    590a:	e5 5e       	subi	r30, 0xE5	; 229
    590c:	f6 4e       	sbci	r31, 0xE6	; 230
    590e:	81 e0       	ldi	r24, 0x01	; 1
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	02 80       	ldd	r0, Z+2	; 0x02
    5914:	02 c0       	rjmp	.+4      	; 0x591a <_turn_on+0x8e>
    5916:	88 0f       	add	r24, r24
    5918:	99 1f       	adc	r25, r25
    591a:	0a 94       	dec	r0
    591c:	e2 f7       	brpl	.-8      	; 0x5916 <_turn_on+0x8a>
    591e:	82 2b       	or	r24, r18
    5920:	8c 93       	st	X, r24
    5922:	08 95       	ret

00005924 <_hal_led_task>:
    5924:	cc 24       	eor	r12, r12
    5926:	c3 94       	inc	r12
    5928:	d1 2c       	mov	r13, r1
    592a:	68 94       	set
    592c:	bb 24       	eor	r11, r11
    592e:	b2 f8       	bld	r11, 2
    5930:	cb e1       	ldi	r28, 0x1B	; 27
    5932:	d9 e1       	ldi	r29, 0x19	; 25
    5934:	10 e0       	ldi	r17, 0x00	; 0
    5936:	8c 81       	ldd	r24, Y+4	; 0x04
    5938:	81 30       	cpi	r24, 0x01	; 1
    593a:	81 f0       	breq	.+32     	; 0x595c <_hal_led_task+0x38>
    593c:	18 f1       	brcs	.+70     	; 0x5984 <_hal_led_task+0x60>
    593e:	82 30       	cpi	r24, 0x02	; 2
    5940:	61 f5       	brne	.+88     	; 0x599a <_hal_led_task+0x76>
    5942:	e8 81       	ld	r30, Y
    5944:	f9 81       	ldd	r31, Y+1	; 0x01
    5946:	20 81       	ld	r18, Z
    5948:	c6 01       	movw	r24, r12
    594a:	0a 80       	ldd	r0, Y+2	; 0x02
    594c:	02 c0       	rjmp	.+4      	; 0x5952 <_hal_led_task+0x2e>
    594e:	88 0f       	add	r24, r24
    5950:	99 1f       	adc	r25, r25
    5952:	0a 94       	dec	r0
    5954:	e2 f7       	brpl	.-8      	; 0x594e <_hal_led_task+0x2a>
    5956:	82 27       	eor	r24, r18
    5958:	80 83       	st	Z, r24
    595a:	1f c0       	rjmp	.+62     	; 0x599a <_hal_led_task+0x76>
    595c:	8d 81       	ldd	r24, Y+5	; 0x05
    595e:	8f 5f       	subi	r24, 0xFF	; 255
    5960:	86 30       	cpi	r24, 0x06	; 6
    5962:	10 f4       	brcc	.+4      	; 0x5968 <_hal_led_task+0x44>
    5964:	8d 83       	std	Y+5, r24	; 0x05
    5966:	19 c0       	rjmp	.+50     	; 0x599a <_hal_led_task+0x76>
    5968:	1d 82       	std	Y+5, r1	; 0x05
    596a:	e8 81       	ld	r30, Y
    596c:	f9 81       	ldd	r31, Y+1	; 0x01
    596e:	20 81       	ld	r18, Z
    5970:	c6 01       	movw	r24, r12
    5972:	0a 80       	ldd	r0, Y+2	; 0x02
    5974:	02 c0       	rjmp	.+4      	; 0x597a <_hal_led_task+0x56>
    5976:	88 0f       	add	r24, r24
    5978:	99 1f       	adc	r25, r25
    597a:	0a 94       	dec	r0
    597c:	e2 f7       	brpl	.-8      	; 0x5976 <_hal_led_task+0x52>
    597e:	82 27       	eor	r24, r18
    5980:	80 83       	st	Z, r24
    5982:	0b c0       	rjmp	.+22     	; 0x599a <_hal_led_task+0x76>
    5984:	0d 81       	ldd	r16, Y+5	; 0x05
    5986:	00 23       	and	r16, r16
    5988:	29 f0       	breq	.+10     	; 0x5994 <_hal_led_task+0x70>
    598a:	81 2f       	mov	r24, r17
    598c:	7f df       	rcall	.-258    	; 0x588c <_turn_on>
    598e:	01 50       	subi	r16, 0x01	; 1
    5990:	0d 83       	std	Y+5, r16	; 0x05
    5992:	03 c0       	rjmp	.+6      	; 0x599a <_hal_led_task+0x76>
    5994:	bc 82       	std	Y+4, r11	; 0x04
    5996:	81 2f       	mov	r24, r17
    5998:	2d df       	rcall	.-422    	; 0x57f4 <_turn_off>
    599a:	1f 5f       	subi	r17, 0xFF	; 255
    599c:	26 96       	adiw	r28, 0x06	; 6
    599e:	14 30       	cpi	r17, 0x04	; 4
    59a0:	51 f6       	brne	.-108    	; 0x5936 <_hal_led_task+0x12>
    59a2:	6c e0       	ldi	r22, 0x0C	; 12
    59a4:	70 e0       	ldi	r23, 0x00	; 0
    59a6:	80 e0       	ldi	r24, 0x00	; 0
    59a8:	90 e0       	ldi	r25, 0x00	; 0
    59aa:	0e 94 a1 14 	call	0x2942	; 0x2942 <vTaskDelay>
    59ae:	c0 cf       	rjmp	.-128    	; 0x5930 <_hal_led_task+0xc>

000059b0 <status_leds_initialise>:
    59b0:	ef 92       	push	r14
    59b2:	ff 92       	push	r15
    59b4:	0f 93       	push	r16
    59b6:	1f 93       	push	r17
    59b8:	cf 93       	push	r28
    59ba:	df 93       	push	r29
    59bc:	08 2f       	mov	r16, r24
    59be:	80 e4       	ldi	r24, 0x40	; 64
    59c0:	87 b9       	out	0x07, r24	; 7
    59c2:	cb e1       	ldi	r28, 0x1B	; 27
    59c4:	d9 e1       	ldi	r29, 0x19	; 25
    59c6:	0f 2e       	mov	r0, r31
    59c8:	f8 e2       	ldi	r31, 0x28	; 40
    59ca:	ef 2e       	mov	r14, r31
    59cc:	f1 2c       	mov	r15, r1
    59ce:	f0 2d       	mov	r31, r0
    59d0:	f9 82       	std	Y+1, r15	; 0x01
    59d2:	e8 82       	st	Y, r14
    59d4:	86 e0       	ldi	r24, 0x06	; 6
    59d6:	8a 83       	std	Y+2, r24	; 0x02
    59d8:	1b 82       	std	Y+3, r1	; 0x03
    59da:	14 e0       	ldi	r17, 0x04	; 4
    59dc:	1c 83       	std	Y+4, r17	; 0x04
    59de:	80 e0       	ldi	r24, 0x00	; 0
    59e0:	09 df       	rcall	.-494    	; 0x57f4 <_turn_off>
    59e2:	80 e8       	ldi	r24, 0x80	; 128
    59e4:	87 b9       	out	0x07, r24	; 7
    59e6:	ff 82       	std	Y+7, r15	; 0x07
    59e8:	ee 82       	std	Y+6, r14	; 0x06
    59ea:	87 e0       	ldi	r24, 0x07	; 7
    59ec:	88 87       	std	Y+8, r24	; 0x08
    59ee:	19 86       	std	Y+9, r1	; 0x09
    59f0:	1a 87       	std	Y+10, r17	; 0x0a
    59f2:	81 e0       	ldi	r24, 0x01	; 1
    59f4:	ff de       	rcall	.-514    	; 0x57f4 <_turn_off>
    59f6:	80 e2       	ldi	r24, 0x20	; 32
    59f8:	83 bb       	out	0x13, r24	; 19
    59fa:	84 e3       	ldi	r24, 0x34	; 52
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	9d 87       	std	Y+13, r25	; 0x0d
    5a00:	8c 87       	std	Y+12, r24	; 0x0c
    5a02:	85 e0       	ldi	r24, 0x05	; 5
    5a04:	8e 87       	std	Y+14, r24	; 0x0e
    5a06:	1f 86       	std	Y+15, r1	; 0x0f
    5a08:	18 8b       	std	Y+16, r17	; 0x10
    5a0a:	82 e0       	ldi	r24, 0x02	; 2
    5a0c:	f3 de       	rcall	.-538    	; 0x57f4 <_turn_off>
    5a0e:	80 e1       	ldi	r24, 0x10	; 16
    5a10:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    5a14:	82 e0       	ldi	r24, 0x02	; 2
    5a16:	91 e0       	ldi	r25, 0x01	; 1
    5a18:	9b 8b       	std	Y+19, r25	; 0x13
    5a1a:	8a 8b       	std	Y+18, r24	; 0x12
    5a1c:	1c 8b       	std	Y+20, r17	; 0x14
    5a1e:	1d 8a       	std	Y+21, r1	; 0x15
    5a20:	1e 8b       	std	Y+22, r17	; 0x16
    5a22:	83 e0       	ldi	r24, 0x03	; 3
    5a24:	e7 de       	rcall	.-562    	; 0x57f4 <_turn_off>
    5a26:	e1 2c       	mov	r14, r1
    5a28:	f1 2c       	mov	r15, r1
    5a2a:	20 e0       	ldi	r18, 0x00	; 0
    5a2c:	30 e0       	ldi	r19, 0x00	; 0
    5a2e:	40 ec       	ldi	r20, 0xC0	; 192
    5a30:	50 e0       	ldi	r21, 0x00	; 0
    5a32:	6b e2       	ldi	r22, 0x2B	; 43
    5a34:	79 e0       	ldi	r23, 0x09	; 9
    5a36:	82 e9       	ldi	r24, 0x92	; 146
    5a38:	9c e2       	ldi	r25, 0x2C	; 44
    5a3a:	0e 94 9c 11 	call	0x2338	; 0x2338 <xTaskCreate>
    5a3e:	df 91       	pop	r29
    5a40:	cf 91       	pop	r28
    5a42:	1f 91       	pop	r17
    5a44:	0f 91       	pop	r16
    5a46:	ff 90       	pop	r15
    5a48:	ef 90       	pop	r14
    5a4a:	08 95       	ret

00005a4c <status_leds_slowBlink>:
    5a4c:	cf 93       	push	r28
    5a4e:	df 93       	push	r29
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	fc 01       	movw	r30, r24
    5a54:	ee 0f       	add	r30, r30
    5a56:	ff 1f       	adc	r31, r31
    5a58:	df 01       	movw	r26, r30
    5a5a:	a8 0f       	add	r26, r24
    5a5c:	b9 1f       	adc	r27, r25
    5a5e:	aa 0f       	add	r26, r26
    5a60:	bb 1f       	adc	r27, r27
    5a62:	a5 5e       	subi	r26, 0xE5	; 229
    5a64:	b6 4e       	sbci	r27, 0xE6	; 230
    5a66:	cd 91       	ld	r28, X+
    5a68:	dc 91       	ld	r29, X
    5a6a:	11 97       	sbiw	r26, 0x01	; 1
    5a6c:	48 81       	ld	r20, Y
    5a6e:	21 e0       	ldi	r18, 0x01	; 1
    5a70:	30 e0       	ldi	r19, 0x00	; 0
    5a72:	12 96       	adiw	r26, 0x02	; 2
    5a74:	0c 90       	ld	r0, X
    5a76:	12 97       	sbiw	r26, 0x02	; 2
    5a78:	02 c0       	rjmp	.+4      	; 0x5a7e <status_leds_slowBlink+0x32>
    5a7a:	22 0f       	add	r18, r18
    5a7c:	33 1f       	adc	r19, r19
    5a7e:	0a 94       	dec	r0
    5a80:	e2 f7       	brpl	.-8      	; 0x5a7a <status_leds_slowBlink+0x2e>
    5a82:	24 27       	eor	r18, r20
    5a84:	28 83       	st	Y, r18
    5a86:	fd 01       	movw	r30, r26
    5a88:	81 e0       	ldi	r24, 0x01	; 1
    5a8a:	84 83       	std	Z+4, r24	; 0x04
    5a8c:	df 91       	pop	r29
    5a8e:	cf 91       	pop	r28
    5a90:	08 95       	ret

00005a92 <status_leds_fastBlink>:
    5a92:	cf 93       	push	r28
    5a94:	df 93       	push	r29
    5a96:	90 e0       	ldi	r25, 0x00	; 0
    5a98:	fc 01       	movw	r30, r24
    5a9a:	ee 0f       	add	r30, r30
    5a9c:	ff 1f       	adc	r31, r31
    5a9e:	df 01       	movw	r26, r30
    5aa0:	a8 0f       	add	r26, r24
    5aa2:	b9 1f       	adc	r27, r25
    5aa4:	aa 0f       	add	r26, r26
    5aa6:	bb 1f       	adc	r27, r27
    5aa8:	a5 5e       	subi	r26, 0xE5	; 229
    5aaa:	b6 4e       	sbci	r27, 0xE6	; 230
    5aac:	cd 91       	ld	r28, X+
    5aae:	dc 91       	ld	r29, X
    5ab0:	11 97       	sbiw	r26, 0x01	; 1
    5ab2:	48 81       	ld	r20, Y
    5ab4:	21 e0       	ldi	r18, 0x01	; 1
    5ab6:	30 e0       	ldi	r19, 0x00	; 0
    5ab8:	12 96       	adiw	r26, 0x02	; 2
    5aba:	0c 90       	ld	r0, X
    5abc:	12 97       	sbiw	r26, 0x02	; 2
    5abe:	02 c0       	rjmp	.+4      	; 0x5ac4 <status_leds_fastBlink+0x32>
    5ac0:	22 0f       	add	r18, r18
    5ac2:	33 1f       	adc	r19, r19
    5ac4:	0a 94       	dec	r0
    5ac6:	e2 f7       	brpl	.-8      	; 0x5ac0 <status_leds_fastBlink+0x2e>
    5ac8:	24 27       	eor	r18, r20
    5aca:	28 83       	st	Y, r18
    5acc:	fd 01       	movw	r30, r26
    5ace:	82 e0       	ldi	r24, 0x02	; 2
    5ad0:	84 83       	std	Z+4, r24	; 0x04
    5ad2:	df 91       	pop	r29
    5ad4:	cf 91       	pop	r28
    5ad6:	08 95       	ret

00005ad8 <status_leds_ledOn>:
    5ad8:	28 2f       	mov	r18, r24
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	f9 01       	movw	r30, r18
    5ade:	ee 0f       	add	r30, r30
    5ae0:	ff 1f       	adc	r31, r31
    5ae2:	e2 0f       	add	r30, r18
    5ae4:	f3 1f       	adc	r31, r19
    5ae6:	ee 0f       	add	r30, r30
    5ae8:	ff 1f       	adc	r31, r31
    5aea:	e5 5e       	subi	r30, 0xE5	; 229
    5aec:	f6 4e       	sbci	r31, 0xE6	; 230
    5aee:	93 e0       	ldi	r25, 0x03	; 3
    5af0:	94 83       	std	Z+4, r25	; 0x04
    5af2:	cc ce       	rjmp	.-616    	; 0x588c <_turn_on>
    5af4:	08 95       	ret

00005af6 <status_leds_ledOff>:
    5af6:	28 2f       	mov	r18, r24
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	f9 01       	movw	r30, r18
    5afc:	ee 0f       	add	r30, r30
    5afe:	ff 1f       	adc	r31, r31
    5b00:	e2 0f       	add	r30, r18
    5b02:	f3 1f       	adc	r31, r19
    5b04:	ee 0f       	add	r30, r30
    5b06:	ff 1f       	adc	r31, r31
    5b08:	e5 5e       	subi	r30, 0xE5	; 229
    5b0a:	f6 4e       	sbci	r31, 0xE6	; 230
    5b0c:	94 e0       	ldi	r25, 0x04	; 4
    5b0e:	94 83       	std	Z+4, r25	; 0x04
    5b10:	71 ce       	rjmp	.-798    	; 0x57f4 <_turn_off>
    5b12:	08 95       	ret

00005b14 <status_leds_longPuls>:
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	fc 01       	movw	r30, r24
    5b18:	ee 0f       	add	r30, r30
    5b1a:	ff 1f       	adc	r31, r31
    5b1c:	df 01       	movw	r26, r30
    5b1e:	a8 0f       	add	r26, r24
    5b20:	b9 1f       	adc	r27, r25
    5b22:	aa 0f       	add	r26, r26
    5b24:	bb 1f       	adc	r27, r27
    5b26:	a5 5e       	subi	r26, 0xE5	; 229
    5b28:	b6 4e       	sbci	r27, 0xE6	; 230
    5b2a:	26 e0       	ldi	r18, 0x06	; 6
    5b2c:	15 96       	adiw	r26, 0x05	; 5
    5b2e:	2c 93       	st	X, r18
    5b30:	15 97       	sbiw	r26, 0x05	; 5
    5b32:	fd 01       	movw	r30, r26
    5b34:	14 82       	std	Z+4, r1	; 0x04
    5b36:	08 95       	ret

00005b38 <status_leds_shortPuls>:
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	fc 01       	movw	r30, r24
    5b3c:	ee 0f       	add	r30, r30
    5b3e:	ff 1f       	adc	r31, r31
    5b40:	df 01       	movw	r26, r30
    5b42:	a8 0f       	add	r26, r24
    5b44:	b9 1f       	adc	r27, r25
    5b46:	aa 0f       	add	r26, r26
    5b48:	bb 1f       	adc	r27, r27
    5b4a:	a5 5e       	subi	r26, 0xE5	; 229
    5b4c:	b6 4e       	sbci	r27, 0xE6	; 230
    5b4e:	15 96       	adiw	r26, 0x05	; 5
    5b50:	1c 92       	st	X, r1
    5b52:	15 97       	sbiw	r26, 0x05	; 5
    5b54:	fd 01       	movw	r30, r26
    5b56:	14 82       	std	Z+4, r1	; 0x04
    5b58:	08 95       	ret

00005b5a <_initTwiInterface>:
    5b5a:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <_twiIsInitiated>
    5b5e:	81 11       	cpse	r24, r1
    5b60:	0c c0       	rjmp	.+24     	; 0x5b7a <_initTwiInterface+0x20>
    5b62:	8c e0       	ldi	r24, 0x0C	; 12
    5b64:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5b68:	8f ef       	ldi	r24, 0xFF	; 255
    5b6a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5b6e:	84 e0       	ldi	r24, 0x04	; 4
    5b70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b74:	81 e0       	ldi	r24, 0x01	; 1
    5b76:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <_twiIsInitiated>
    5b7a:	08 95       	ret

00005b7c <twiCreate>:
    5b7c:	af 92       	push	r10
    5b7e:	bf 92       	push	r11
    5b80:	cf 92       	push	r12
    5b82:	df 92       	push	r13
    5b84:	ef 92       	push	r14
    5b86:	ff 92       	push	r15
    5b88:	0f 93       	push	r16
    5b8a:	1f 93       	push	r17
    5b8c:	cf 93       	push	r28
    5b8e:	df 93       	push	r29
    5b90:	a8 2e       	mov	r10, r24
    5b92:	b6 2e       	mov	r11, r22
    5b94:	69 01       	movw	r12, r18
    5b96:	7a 01       	movw	r14, r20
    5b98:	84 e0       	ldi	r24, 0x04	; 4
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	71 d7       	rcall	.+3810   	; 0x6a80 <malloc>
    5b9e:	ec 01       	movw	r28, r24
    5ba0:	89 2b       	or	r24, r25
    5ba2:	61 f1       	breq	.+88     	; 0x5bfc <twiCreate+0x80>
    5ba4:	a8 82       	st	Y, r10
    5ba6:	81 e0       	ldi	r24, 0x01	; 1
    5ba8:	b8 12       	cpse	r11, r24
    5baa:	12 c0       	rjmp	.+36     	; 0x5bd0 <twiCreate+0x54>
    5bac:	c7 01       	movw	r24, r14
    5bae:	b6 01       	movw	r22, r12
    5bb0:	20 ea       	ldi	r18, 0xA0	; 160
    5bb2:	36 e8       	ldi	r19, 0x86	; 134
    5bb4:	41 e0       	ldi	r20, 0x01	; 1
    5bb6:	50 e0       	ldi	r21, 0x00	; 0
    5bb8:	16 d7       	rcall	.+3628   	; 0x69e6 <__udivmodsi4>
    5bba:	da 01       	movw	r26, r20
    5bbc:	c9 01       	movw	r24, r18
    5bbe:	40 97       	sbiw	r24, 0x10	; 16
    5bc0:	a1 09       	sbc	r26, r1
    5bc2:	b1 09       	sbc	r27, r1
    5bc4:	b6 95       	lsr	r27
    5bc6:	a7 95       	ror	r26
    5bc8:	97 95       	ror	r25
    5bca:	87 95       	ror	r24
    5bcc:	89 83       	std	Y+1, r24	; 0x01
    5bce:	11 c0       	rjmp	.+34     	; 0x5bf2 <twiCreate+0x76>
    5bd0:	c7 01       	movw	r24, r14
    5bd2:	b6 01       	movw	r22, r12
    5bd4:	20 e8       	ldi	r18, 0x80	; 128
    5bd6:	3a e1       	ldi	r19, 0x1A	; 26
    5bd8:	46 e0       	ldi	r20, 0x06	; 6
    5bda:	50 e0       	ldi	r21, 0x00	; 0
    5bdc:	04 d7       	rcall	.+3592   	; 0x69e6 <__udivmodsi4>
    5bde:	da 01       	movw	r26, r20
    5be0:	c9 01       	movw	r24, r18
    5be2:	40 97       	sbiw	r24, 0x10	; 16
    5be4:	a1 09       	sbc	r26, r1
    5be6:	b1 09       	sbc	r27, r1
    5be8:	b6 95       	lsr	r27
    5bea:	a7 95       	ror	r26
    5bec:	97 95       	ror	r25
    5bee:	87 95       	ror	r24
    5bf0:	89 83       	std	Y+1, r24	; 0x01
    5bf2:	1b 83       	std	Y+3, r17	; 0x03
    5bf4:	0a 83       	std	Y+2, r16	; 0x02
    5bf6:	8c 2f       	mov	r24, r28
    5bf8:	9d 2f       	mov	r25, r29
    5bfa:	02 c0       	rjmp	.+4      	; 0x5c00 <twiCreate+0x84>
    5bfc:	80 e0       	ldi	r24, 0x00	; 0
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	df 91       	pop	r29
    5c02:	cf 91       	pop	r28
    5c04:	1f 91       	pop	r17
    5c06:	0f 91       	pop	r16
    5c08:	ff 90       	pop	r15
    5c0a:	ef 90       	pop	r14
    5c0c:	df 90       	pop	r13
    5c0e:	cf 90       	pop	r12
    5c10:	bf 90       	pop	r11
    5c12:	af 90       	pop	r10
    5c14:	08 95       	ret

00005c16 <twiIsBusy>:
    5c16:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c1a:	81 70       	andi	r24, 0x01	; 1
    5c1c:	08 95       	ret

00005c1e <twiTransmit>:
    5c1e:	ff 92       	push	r15
    5c20:	0f 93       	push	r16
    5c22:	1f 93       	push	r17
    5c24:	cf 93       	push	r28
    5c26:	df 93       	push	r29
    5c28:	00 97       	sbiw	r24, 0x00	; 0
    5c2a:	d1 f1       	breq	.+116    	; 0x5ca0 <twiTransmit+0x82>
    5c2c:	4a 30       	cpi	r20, 0x0A	; 10
    5c2e:	d0 f5       	brcc	.+116    	; 0x5ca4 <twiTransmit+0x86>
    5c30:	f4 2e       	mov	r15, r20
    5c32:	8b 01       	movw	r16, r22
    5c34:	ec 01       	movw	r28, r24
    5c36:	ef df       	rcall	.-34     	; 0x5c16 <twiIsBusy>
    5c38:	81 11       	cpse	r24, r1
    5c3a:	36 c0       	rjmp	.+108    	; 0x5ca8 <twiTransmit+0x8a>
    5c3c:	80 91 34 19 	lds	r24, 0x1934	; 0x801934 <_twiCurrentHandler>
    5c40:	90 91 35 19 	lds	r25, 0x1935	; 0x801935 <_twiCurrentHandler+0x1>
    5c44:	c8 17       	cp	r28, r24
    5c46:	d9 07       	cpc	r29, r25
    5c48:	41 f0       	breq	.+16     	; 0x5c5a <twiTransmit+0x3c>
    5c4a:	87 df       	rcall	.-242    	; 0x5b5a <_initTwiInterface>
    5c4c:	89 81       	ldd	r24, Y+1	; 0x01
    5c4e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5c52:	d0 93 35 19 	sts	0x1935, r29	; 0x801935 <_twiCurrentHandler+0x1>
    5c56:	c0 93 34 19 	sts	0x1934, r28	; 0x801934 <_twiCurrentHandler>
    5c5a:	81 e0       	ldi	r24, 0x01	; 1
    5c5c:	8f 0d       	add	r24, r15
    5c5e:	80 93 36 19 	sts	0x1936, r24	; 0x801936 <_twiMessageLen>
    5c62:	88 81       	ld	r24, Y
    5c64:	88 0f       	add	r24, r24
    5c66:	80 93 37 19 	sts	0x1937, r24	; 0x801937 <_twiMessageBuffer>
    5c6a:	ff 20       	and	r15, r15
    5c6c:	89 f0       	breq	.+34     	; 0x5c90 <twiTransmit+0x72>
    5c6e:	f8 01       	movw	r30, r16
    5c70:	a8 e3       	ldi	r26, 0x38	; 56
    5c72:	b9 e1       	ldi	r27, 0x19	; 25
    5c74:	4f ef       	ldi	r20, 0xFF	; 255
    5c76:	4f 0d       	add	r20, r15
    5c78:	64 2f       	mov	r22, r20
    5c7a:	70 e0       	ldi	r23, 0x00	; 0
    5c7c:	cb 01       	movw	r24, r22
    5c7e:	01 96       	adiw	r24, 0x01	; 1
    5c80:	b8 01       	movw	r22, r16
    5c82:	68 0f       	add	r22, r24
    5c84:	79 1f       	adc	r23, r25
    5c86:	81 91       	ld	r24, Z+
    5c88:	8d 93       	st	X+, r24
    5c8a:	e6 17       	cp	r30, r22
    5c8c:	f7 07       	cpc	r31, r23
    5c8e:	d9 f7       	brne	.-10     	; 0x5c86 <twiTransmit+0x68>
    5c90:	88 ef       	ldi	r24, 0xF8	; 248
    5c92:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5c96:	85 ea       	ldi	r24, 0xA5	; 165
    5c98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c9c:	84 e0       	ldi	r24, 0x04	; 4
    5c9e:	05 c0       	rjmp	.+10     	; 0x5caa <twiTransmit+0x8c>
    5ca0:	86 e0       	ldi	r24, 0x06	; 6
    5ca2:	03 c0       	rjmp	.+6      	; 0x5caa <twiTransmit+0x8c>
    5ca4:	87 e0       	ldi	r24, 0x07	; 7
    5ca6:	01 c0       	rjmp	.+2      	; 0x5caa <twiTransmit+0x8c>
    5ca8:	82 e0       	ldi	r24, 0x02	; 2
    5caa:	df 91       	pop	r29
    5cac:	cf 91       	pop	r28
    5cae:	1f 91       	pop	r17
    5cb0:	0f 91       	pop	r16
    5cb2:	ff 90       	pop	r15
    5cb4:	08 95       	ret

00005cb6 <twiReceive>:
    5cb6:	1f 93       	push	r17
    5cb8:	cf 93       	push	r28
    5cba:	df 93       	push	r29
    5cbc:	00 97       	sbiw	r24, 0x00	; 0
    5cbe:	29 f1       	breq	.+74     	; 0x5d0a <twiReceive+0x54>
    5cc0:	6b 30       	cpi	r22, 0x0B	; 11
    5cc2:	28 f5       	brcc	.+74     	; 0x5d0e <twiReceive+0x58>
    5cc4:	16 2f       	mov	r17, r22
    5cc6:	ec 01       	movw	r28, r24
    5cc8:	a6 df       	rcall	.-180    	; 0x5c16 <twiIsBusy>
    5cca:	81 11       	cpse	r24, r1
    5ccc:	22 c0       	rjmp	.+68     	; 0x5d12 <twiReceive+0x5c>
    5cce:	80 91 34 19 	lds	r24, 0x1934	; 0x801934 <_twiCurrentHandler>
    5cd2:	90 91 35 19 	lds	r25, 0x1935	; 0x801935 <_twiCurrentHandler+0x1>
    5cd6:	c8 17       	cp	r28, r24
    5cd8:	d9 07       	cpc	r29, r25
    5cda:	41 f0       	breq	.+16     	; 0x5cec <twiReceive+0x36>
    5cdc:	3e df       	rcall	.-388    	; 0x5b5a <_initTwiInterface>
    5cde:	89 81       	ldd	r24, Y+1	; 0x01
    5ce0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5ce4:	d0 93 35 19 	sts	0x1935, r29	; 0x801935 <_twiCurrentHandler+0x1>
    5ce8:	c0 93 34 19 	sts	0x1934, r28	; 0x801934 <_twiCurrentHandler>
    5cec:	10 93 36 19 	sts	0x1936, r17	; 0x801936 <_twiMessageLen>
    5cf0:	88 81       	ld	r24, Y
    5cf2:	88 0f       	add	r24, r24
    5cf4:	81 60       	ori	r24, 0x01	; 1
    5cf6:	80 93 37 19 	sts	0x1937, r24	; 0x801937 <_twiMessageBuffer>
    5cfa:	88 ef       	ldi	r24, 0xF8	; 248
    5cfc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5d00:	85 ea       	ldi	r24, 0xA5	; 165
    5d02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d06:	85 e0       	ldi	r24, 0x05	; 5
    5d08:	05 c0       	rjmp	.+10     	; 0x5d14 <twiReceive+0x5e>
    5d0a:	86 e0       	ldi	r24, 0x06	; 6
    5d0c:	03 c0       	rjmp	.+6      	; 0x5d14 <twiReceive+0x5e>
    5d0e:	87 e0       	ldi	r24, 0x07	; 7
    5d10:	01 c0       	rjmp	.+2      	; 0x5d14 <twiReceive+0x5e>
    5d12:	82 e0       	ldi	r24, 0x02	; 2
    5d14:	df 91       	pop	r29
    5d16:	cf 91       	pop	r28
    5d18:	1f 91       	pop	r17
    5d1a:	08 95       	ret

00005d1c <__vector_39>:
    5d1c:	1f 92       	push	r1
    5d1e:	0f 92       	push	r0
    5d20:	0f b6       	in	r0, 0x3f	; 63
    5d22:	0f 92       	push	r0
    5d24:	11 24       	eor	r1, r1
    5d26:	0b b6       	in	r0, 0x3b	; 59
    5d28:	0f 92       	push	r0
    5d2a:	2f 93       	push	r18
    5d2c:	3f 93       	push	r19
    5d2e:	4f 93       	push	r20
    5d30:	5f 93       	push	r21
    5d32:	6f 93       	push	r22
    5d34:	7f 93       	push	r23
    5d36:	8f 93       	push	r24
    5d38:	9f 93       	push	r25
    5d3a:	af 93       	push	r26
    5d3c:	bf 93       	push	r27
    5d3e:	ef 93       	push	r30
    5d40:	ff 93       	push	r31
    5d42:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5d46:	8e 2f       	mov	r24, r30
    5d48:	90 e0       	ldi	r25, 0x00	; 0
    5d4a:	fc 01       	movw	r30, r24
    5d4c:	38 97       	sbiw	r30, 0x08	; 8
    5d4e:	e1 35       	cpi	r30, 0x51	; 81
    5d50:	f1 05       	cpc	r31, r1
    5d52:	08 f0       	brcs	.+2      	; 0x5d56 <__vector_39+0x3a>
    5d54:	75 c0       	rjmp	.+234    	; 0x5e40 <__vector_39+0x124>
    5d56:	88 27       	eor	r24, r24
    5d58:	e4 58       	subi	r30, 0x84	; 132
    5d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d5e:	65 c6       	rjmp	.+3274   	; 0x6a2a <__tablejump2__>
    5d60:	10 92 33 19 	sts	0x1933, r1	; 0x801933 <_index.1885>
    5d64:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <_index.1885>
    5d68:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiMessageLen>
    5d6c:	e8 17       	cp	r30, r24
    5d6e:	70 f4       	brcc	.+28     	; 0x5d8c <__vector_39+0x70>
    5d70:	81 e0       	ldi	r24, 0x01	; 1
    5d72:	8e 0f       	add	r24, r30
    5d74:	80 93 33 19 	sts	0x1933, r24	; 0x801933 <_index.1885>
    5d78:	f0 e0       	ldi	r31, 0x00	; 0
    5d7a:	e9 5c       	subi	r30, 0xC9	; 201
    5d7c:	f6 4e       	sbci	r31, 0xE6	; 230
    5d7e:	80 81       	ld	r24, Z
    5d80:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d84:	85 e8       	ldi	r24, 0x85	; 133
    5d86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d8a:	72 c0       	rjmp	.+228    	; 0x5e70 <__vector_39+0x154>
    5d8c:	84 e9       	ldi	r24, 0x94	; 148
    5d8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d92:	80 91 34 19 	lds	r24, 0x1934	; 0x801934 <_twiCurrentHandler>
    5d96:	90 91 35 19 	lds	r25, 0x1935	; 0x801935 <_twiCurrentHandler+0x1>
    5d9a:	dc 01       	movw	r26, r24
    5d9c:	12 96       	adiw	r26, 0x02	; 2
    5d9e:	ed 91       	ld	r30, X+
    5da0:	fc 91       	ld	r31, X
    5da2:	13 97       	sbiw	r26, 0x03	; 3
    5da4:	30 97       	sbiw	r30, 0x00	; 0
    5da6:	09 f4       	brne	.+2      	; 0x5daa <__vector_39+0x8e>
    5da8:	63 c0       	rjmp	.+198    	; 0x5e70 <__vector_39+0x154>
    5daa:	20 e0       	ldi	r18, 0x00	; 0
    5dac:	40 e0       	ldi	r20, 0x00	; 0
    5dae:	50 e0       	ldi	r21, 0x00	; 0
    5db0:	64 e0       	ldi	r22, 0x04	; 4
    5db2:	19 95       	eicall
    5db4:	5d c0       	rjmp	.+186    	; 0x5e70 <__vector_39+0x154>
    5db6:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <_index.1885>
    5dba:	81 e0       	ldi	r24, 0x01	; 1
    5dbc:	8e 0f       	add	r24, r30
    5dbe:	80 93 33 19 	sts	0x1933, r24	; 0x801933 <_index.1885>
    5dc2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5dc6:	f0 e0       	ldi	r31, 0x00	; 0
    5dc8:	e9 5c       	subi	r30, 0xC9	; 201
    5dca:	f6 4e       	sbci	r31, 0xE6	; 230
    5dcc:	80 83       	st	Z, r24
    5dce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5dd2:	80 34       	cpi	r24, 0x40	; 64
    5dd4:	11 f4       	brne	.+4      	; 0x5dda <__vector_39+0xbe>
    5dd6:	10 92 33 19 	sts	0x1933, r1	; 0x801933 <_index.1885>
    5dda:	20 91 33 19 	lds	r18, 0x1933	; 0x801933 <_index.1885>
    5dde:	30 e0       	ldi	r19, 0x00	; 0
    5de0:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiMessageLen>
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	01 97       	sbiw	r24, 0x01	; 1
    5de8:	28 17       	cp	r18, r24
    5dea:	39 07       	cpc	r19, r25
    5dec:	24 f4       	brge	.+8      	; 0x5df6 <__vector_39+0xda>
    5dee:	85 ec       	ldi	r24, 0xC5	; 197
    5df0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5df4:	3d c0       	rjmp	.+122    	; 0x5e70 <__vector_39+0x154>
    5df6:	85 e8       	ldi	r24, 0x85	; 133
    5df8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dfc:	39 c0       	rjmp	.+114    	; 0x5e70 <__vector_39+0x154>
    5dfe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5e02:	e0 91 33 19 	lds	r30, 0x1933	; 0x801933 <_index.1885>
    5e06:	f0 e0       	ldi	r31, 0x00	; 0
    5e08:	e9 5c       	subi	r30, 0xC9	; 201
    5e0a:	f6 4e       	sbci	r31, 0xE6	; 230
    5e0c:	80 83       	st	Z, r24
    5e0e:	84 e9       	ldi	r24, 0x94	; 148
    5e10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e14:	80 91 34 19 	lds	r24, 0x1934	; 0x801934 <_twiCurrentHandler>
    5e18:	90 91 35 19 	lds	r25, 0x1935	; 0x801935 <_twiCurrentHandler+0x1>
    5e1c:	dc 01       	movw	r26, r24
    5e1e:	12 96       	adiw	r26, 0x02	; 2
    5e20:	ed 91       	ld	r30, X+
    5e22:	fc 91       	ld	r31, X
    5e24:	13 97       	sbiw	r26, 0x03	; 3
    5e26:	30 97       	sbiw	r30, 0x00	; 0
    5e28:	19 f1       	breq	.+70     	; 0x5e70 <__vector_39+0x154>
    5e2a:	20 91 36 19 	lds	r18, 0x1936	; 0x801936 <_twiMessageLen>
    5e2e:	47 e3       	ldi	r20, 0x37	; 55
    5e30:	59 e1       	ldi	r21, 0x19	; 25
    5e32:	65 e0       	ldi	r22, 0x05	; 5
    5e34:	19 95       	eicall
    5e36:	1c c0       	rjmp	.+56     	; 0x5e70 <__vector_39+0x154>
    5e38:	85 ea       	ldi	r24, 0xA5	; 165
    5e3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e3e:	18 c0       	rjmp	.+48     	; 0x5e70 <__vector_39+0x154>
    5e40:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5e44:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5e48:	84 e0       	ldi	r24, 0x04	; 4
    5e4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e4e:	80 91 34 19 	lds	r24, 0x1934	; 0x801934 <_twiCurrentHandler>
    5e52:	90 91 35 19 	lds	r25, 0x1935	; 0x801935 <_twiCurrentHandler+0x1>
    5e56:	dc 01       	movw	r26, r24
    5e58:	12 96       	adiw	r26, 0x02	; 2
    5e5a:	ed 91       	ld	r30, X+
    5e5c:	fc 91       	ld	r31, X
    5e5e:	13 97       	sbiw	r26, 0x03	; 3
    5e60:	30 97       	sbiw	r30, 0x00	; 0
    5e62:	31 f0       	breq	.+12     	; 0x5e70 <__vector_39+0x154>
    5e64:	20 e0       	ldi	r18, 0x00	; 0
    5e66:	40 e0       	ldi	r20, 0x00	; 0
    5e68:	50 e0       	ldi	r21, 0x00	; 0
    5e6a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5e6e:	19 95       	eicall
    5e70:	ff 91       	pop	r31
    5e72:	ef 91       	pop	r30
    5e74:	bf 91       	pop	r27
    5e76:	af 91       	pop	r26
    5e78:	9f 91       	pop	r25
    5e7a:	8f 91       	pop	r24
    5e7c:	7f 91       	pop	r23
    5e7e:	6f 91       	pop	r22
    5e80:	5f 91       	pop	r21
    5e82:	4f 91       	pop	r20
    5e84:	3f 91       	pop	r19
    5e86:	2f 91       	pop	r18
    5e88:	0f 90       	pop	r0
    5e8a:	0b be       	out	0x3b, r0	; 59
    5e8c:	0f 90       	pop	r0
    5e8e:	0f be       	out	0x3f, r0	; 63
    5e90:	0f 90       	pop	r0
    5e92:	1f 90       	pop	r1
    5e94:	18 95       	reti

00005e96 <fifo_init>:
    5e96:	fc 01       	movw	r30, r24
    5e98:	41 11       	cpse	r20, r1
    5e9a:	01 c0       	rjmp	.+2      	; 0x5e9e <fifo_init+0x8>
    5e9c:	12 d7       	rcall	.+3620   	; 0x6cc2 <abort>
    5e9e:	84 2f       	mov	r24, r20
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	9c 01       	movw	r18, r24
    5ea4:	21 50       	subi	r18, 0x01	; 1
    5ea6:	31 09       	sbc	r19, r1
    5ea8:	82 23       	and	r24, r18
    5eaa:	93 23       	and	r25, r19
    5eac:	89 2b       	or	r24, r25
    5eae:	09 f0       	breq	.+2      	; 0x5eb2 <fifo_init+0x1c>
    5eb0:	08 d7       	rcall	.+3600   	; 0x6cc2 <abort>
    5eb2:	41 38       	cpi	r20, 0x81	; 129
    5eb4:	08 f0       	brcs	.+2      	; 0x5eb8 <fifo_init+0x22>
    5eb6:	05 d7       	rcall	.+3594   	; 0x6cc2 <abort>
    5eb8:	12 82       	std	Z+2, r1	; 0x02
    5eba:	13 82       	std	Z+3, r1	; 0x03
    5ebc:	44 83       	std	Z+4, r20	; 0x04
    5ebe:	44 0f       	add	r20, r20
    5ec0:	41 50       	subi	r20, 0x01	; 1
    5ec2:	45 83       	std	Z+5, r20	; 0x05
    5ec4:	71 83       	std	Z+1, r23	; 0x01
    5ec6:	60 83       	st	Z, r22
    5ec8:	80 e0       	ldi	r24, 0x00	; 0
    5eca:	90 e0       	ldi	r25, 0x00	; 0
    5ecc:	08 95       	ret

00005ece <vfprintf>:
    5ece:	2f 92       	push	r2
    5ed0:	3f 92       	push	r3
    5ed2:	4f 92       	push	r4
    5ed4:	5f 92       	push	r5
    5ed6:	6f 92       	push	r6
    5ed8:	7f 92       	push	r7
    5eda:	8f 92       	push	r8
    5edc:	9f 92       	push	r9
    5ede:	af 92       	push	r10
    5ee0:	bf 92       	push	r11
    5ee2:	cf 92       	push	r12
    5ee4:	df 92       	push	r13
    5ee6:	ef 92       	push	r14
    5ee8:	ff 92       	push	r15
    5eea:	0f 93       	push	r16
    5eec:	1f 93       	push	r17
    5eee:	cf 93       	push	r28
    5ef0:	df 93       	push	r29
    5ef2:	cd b7       	in	r28, 0x3d	; 61
    5ef4:	de b7       	in	r29, 0x3e	; 62
    5ef6:	60 97       	sbiw	r28, 0x10	; 16
    5ef8:	0f b6       	in	r0, 0x3f	; 63
    5efa:	f8 94       	cli
    5efc:	de bf       	out	0x3e, r29	; 62
    5efe:	0f be       	out	0x3f, r0	; 63
    5f00:	cd bf       	out	0x3d, r28	; 61
    5f02:	7c 01       	movw	r14, r24
    5f04:	1b 01       	movw	r2, r22
    5f06:	6a 01       	movw	r12, r20
    5f08:	fc 01       	movw	r30, r24
    5f0a:	17 82       	std	Z+7, r1	; 0x07
    5f0c:	16 82       	std	Z+6, r1	; 0x06
    5f0e:	83 81       	ldd	r24, Z+3	; 0x03
    5f10:	81 ff       	sbrs	r24, 1
    5f12:	2b c3       	rjmp	.+1622   	; 0x656a <vfprintf+0x69c>
    5f14:	9e 01       	movw	r18, r28
    5f16:	2f 5f       	subi	r18, 0xFF	; 255
    5f18:	3f 4f       	sbci	r19, 0xFF	; 255
    5f1a:	39 01       	movw	r6, r18
    5f1c:	f7 01       	movw	r30, r14
    5f1e:	93 81       	ldd	r25, Z+3	; 0x03
    5f20:	f1 01       	movw	r30, r2
    5f22:	93 fd       	sbrc	r25, 3
    5f24:	85 91       	lpm	r24, Z+
    5f26:	93 ff       	sbrs	r25, 3
    5f28:	81 91       	ld	r24, Z+
    5f2a:	1f 01       	movw	r2, r30
    5f2c:	88 23       	and	r24, r24
    5f2e:	09 f4       	brne	.+2      	; 0x5f32 <vfprintf+0x64>
    5f30:	18 c3       	rjmp	.+1584   	; 0x6562 <vfprintf+0x694>
    5f32:	85 32       	cpi	r24, 0x25	; 37
    5f34:	39 f4       	brne	.+14     	; 0x5f44 <vfprintf+0x76>
    5f36:	93 fd       	sbrc	r25, 3
    5f38:	85 91       	lpm	r24, Z+
    5f3a:	93 ff       	sbrs	r25, 3
    5f3c:	81 91       	ld	r24, Z+
    5f3e:	1f 01       	movw	r2, r30
    5f40:	85 32       	cpi	r24, 0x25	; 37
    5f42:	39 f4       	brne	.+14     	; 0x5f52 <vfprintf+0x84>
    5f44:	b7 01       	movw	r22, r14
    5f46:	90 e0       	ldi	r25, 0x00	; 0
    5f48:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <fputc>
    5f4c:	56 01       	movw	r10, r12
    5f4e:	65 01       	movw	r12, r10
    5f50:	e5 cf       	rjmp	.-54     	; 0x5f1c <vfprintf+0x4e>
    5f52:	10 e0       	ldi	r17, 0x00	; 0
    5f54:	51 2c       	mov	r5, r1
    5f56:	91 2c       	mov	r9, r1
    5f58:	ff e1       	ldi	r31, 0x1F	; 31
    5f5a:	f9 15       	cp	r31, r9
    5f5c:	d8 f0       	brcs	.+54     	; 0x5f94 <vfprintf+0xc6>
    5f5e:	8b 32       	cpi	r24, 0x2B	; 43
    5f60:	79 f0       	breq	.+30     	; 0x5f80 <vfprintf+0xb2>
    5f62:	38 f4       	brcc	.+14     	; 0x5f72 <vfprintf+0xa4>
    5f64:	80 32       	cpi	r24, 0x20	; 32
    5f66:	79 f0       	breq	.+30     	; 0x5f86 <vfprintf+0xb8>
    5f68:	83 32       	cpi	r24, 0x23	; 35
    5f6a:	a1 f4       	brne	.+40     	; 0x5f94 <vfprintf+0xc6>
    5f6c:	f9 2d       	mov	r31, r9
    5f6e:	f0 61       	ori	r31, 0x10	; 16
    5f70:	2e c0       	rjmp	.+92     	; 0x5fce <vfprintf+0x100>
    5f72:	8d 32       	cpi	r24, 0x2D	; 45
    5f74:	61 f0       	breq	.+24     	; 0x5f8e <vfprintf+0xc0>
    5f76:	80 33       	cpi	r24, 0x30	; 48
    5f78:	69 f4       	brne	.+26     	; 0x5f94 <vfprintf+0xc6>
    5f7a:	29 2d       	mov	r18, r9
    5f7c:	21 60       	ori	r18, 0x01	; 1
    5f7e:	2d c0       	rjmp	.+90     	; 0x5fda <vfprintf+0x10c>
    5f80:	39 2d       	mov	r19, r9
    5f82:	32 60       	ori	r19, 0x02	; 2
    5f84:	93 2e       	mov	r9, r19
    5f86:	89 2d       	mov	r24, r9
    5f88:	84 60       	ori	r24, 0x04	; 4
    5f8a:	98 2e       	mov	r9, r24
    5f8c:	2a c0       	rjmp	.+84     	; 0x5fe2 <vfprintf+0x114>
    5f8e:	e9 2d       	mov	r30, r9
    5f90:	e8 60       	ori	r30, 0x08	; 8
    5f92:	15 c0       	rjmp	.+42     	; 0x5fbe <vfprintf+0xf0>
    5f94:	97 fc       	sbrc	r9, 7
    5f96:	2d c0       	rjmp	.+90     	; 0x5ff2 <vfprintf+0x124>
    5f98:	20 ed       	ldi	r18, 0xD0	; 208
    5f9a:	28 0f       	add	r18, r24
    5f9c:	2a 30       	cpi	r18, 0x0A	; 10
    5f9e:	88 f4       	brcc	.+34     	; 0x5fc2 <vfprintf+0xf4>
    5fa0:	96 fe       	sbrs	r9, 6
    5fa2:	06 c0       	rjmp	.+12     	; 0x5fb0 <vfprintf+0xe2>
    5fa4:	3a e0       	ldi	r19, 0x0A	; 10
    5fa6:	13 9f       	mul	r17, r19
    5fa8:	20 0d       	add	r18, r0
    5faa:	11 24       	eor	r1, r1
    5fac:	12 2f       	mov	r17, r18
    5fae:	19 c0       	rjmp	.+50     	; 0x5fe2 <vfprintf+0x114>
    5fb0:	8a e0       	ldi	r24, 0x0A	; 10
    5fb2:	58 9e       	mul	r5, r24
    5fb4:	20 0d       	add	r18, r0
    5fb6:	11 24       	eor	r1, r1
    5fb8:	52 2e       	mov	r5, r18
    5fba:	e9 2d       	mov	r30, r9
    5fbc:	e0 62       	ori	r30, 0x20	; 32
    5fbe:	9e 2e       	mov	r9, r30
    5fc0:	10 c0       	rjmp	.+32     	; 0x5fe2 <vfprintf+0x114>
    5fc2:	8e 32       	cpi	r24, 0x2E	; 46
    5fc4:	31 f4       	brne	.+12     	; 0x5fd2 <vfprintf+0x104>
    5fc6:	96 fc       	sbrc	r9, 6
    5fc8:	cc c2       	rjmp	.+1432   	; 0x6562 <vfprintf+0x694>
    5fca:	f9 2d       	mov	r31, r9
    5fcc:	f0 64       	ori	r31, 0x40	; 64
    5fce:	9f 2e       	mov	r9, r31
    5fd0:	08 c0       	rjmp	.+16     	; 0x5fe2 <vfprintf+0x114>
    5fd2:	8c 36       	cpi	r24, 0x6C	; 108
    5fd4:	21 f4       	brne	.+8      	; 0x5fde <vfprintf+0x110>
    5fd6:	29 2d       	mov	r18, r9
    5fd8:	20 68       	ori	r18, 0x80	; 128
    5fda:	92 2e       	mov	r9, r18
    5fdc:	02 c0       	rjmp	.+4      	; 0x5fe2 <vfprintf+0x114>
    5fde:	88 36       	cpi	r24, 0x68	; 104
    5fe0:	41 f4       	brne	.+16     	; 0x5ff2 <vfprintf+0x124>
    5fe2:	f1 01       	movw	r30, r2
    5fe4:	93 fd       	sbrc	r25, 3
    5fe6:	85 91       	lpm	r24, Z+
    5fe8:	93 ff       	sbrs	r25, 3
    5fea:	81 91       	ld	r24, Z+
    5fec:	1f 01       	movw	r2, r30
    5fee:	81 11       	cpse	r24, r1
    5ff0:	b3 cf       	rjmp	.-154    	; 0x5f58 <vfprintf+0x8a>
    5ff2:	9b eb       	ldi	r25, 0xBB	; 187
    5ff4:	98 0f       	add	r25, r24
    5ff6:	93 30       	cpi	r25, 0x03	; 3
    5ff8:	20 f4       	brcc	.+8      	; 0x6002 <vfprintf+0x134>
    5ffa:	99 2d       	mov	r25, r9
    5ffc:	90 61       	ori	r25, 0x10	; 16
    5ffe:	80 5e       	subi	r24, 0xE0	; 224
    6000:	07 c0       	rjmp	.+14     	; 0x6010 <vfprintf+0x142>
    6002:	9b e9       	ldi	r25, 0x9B	; 155
    6004:	98 0f       	add	r25, r24
    6006:	93 30       	cpi	r25, 0x03	; 3
    6008:	08 f0       	brcs	.+2      	; 0x600c <vfprintf+0x13e>
    600a:	59 c1       	rjmp	.+690    	; 0x62be <vfprintf+0x3f0>
    600c:	99 2d       	mov	r25, r9
    600e:	9f 7e       	andi	r25, 0xEF	; 239
    6010:	96 ff       	sbrs	r25, 6
    6012:	16 e0       	ldi	r17, 0x06	; 6
    6014:	9f 73       	andi	r25, 0x3F	; 63
    6016:	99 2e       	mov	r9, r25
    6018:	85 36       	cpi	r24, 0x65	; 101
    601a:	19 f4       	brne	.+6      	; 0x6022 <vfprintf+0x154>
    601c:	90 64       	ori	r25, 0x40	; 64
    601e:	99 2e       	mov	r9, r25
    6020:	08 c0       	rjmp	.+16     	; 0x6032 <vfprintf+0x164>
    6022:	86 36       	cpi	r24, 0x66	; 102
    6024:	21 f4       	brne	.+8      	; 0x602e <vfprintf+0x160>
    6026:	39 2f       	mov	r19, r25
    6028:	30 68       	ori	r19, 0x80	; 128
    602a:	93 2e       	mov	r9, r19
    602c:	02 c0       	rjmp	.+4      	; 0x6032 <vfprintf+0x164>
    602e:	11 11       	cpse	r17, r1
    6030:	11 50       	subi	r17, 0x01	; 1
    6032:	97 fe       	sbrs	r9, 7
    6034:	07 c0       	rjmp	.+14     	; 0x6044 <vfprintf+0x176>
    6036:	1c 33       	cpi	r17, 0x3C	; 60
    6038:	50 f4       	brcc	.+20     	; 0x604e <vfprintf+0x180>
    603a:	44 24       	eor	r4, r4
    603c:	43 94       	inc	r4
    603e:	41 0e       	add	r4, r17
    6040:	27 e0       	ldi	r18, 0x07	; 7
    6042:	0b c0       	rjmp	.+22     	; 0x605a <vfprintf+0x18c>
    6044:	18 30       	cpi	r17, 0x08	; 8
    6046:	38 f0       	brcs	.+14     	; 0x6056 <vfprintf+0x188>
    6048:	27 e0       	ldi	r18, 0x07	; 7
    604a:	17 e0       	ldi	r17, 0x07	; 7
    604c:	05 c0       	rjmp	.+10     	; 0x6058 <vfprintf+0x18a>
    604e:	27 e0       	ldi	r18, 0x07	; 7
    6050:	9c e3       	ldi	r25, 0x3C	; 60
    6052:	49 2e       	mov	r4, r25
    6054:	02 c0       	rjmp	.+4      	; 0x605a <vfprintf+0x18c>
    6056:	21 2f       	mov	r18, r17
    6058:	41 2c       	mov	r4, r1
    605a:	56 01       	movw	r10, r12
    605c:	84 e0       	ldi	r24, 0x04	; 4
    605e:	a8 0e       	add	r10, r24
    6060:	b1 1c       	adc	r11, r1
    6062:	f6 01       	movw	r30, r12
    6064:	60 81       	ld	r22, Z
    6066:	71 81       	ldd	r23, Z+1	; 0x01
    6068:	82 81       	ldd	r24, Z+2	; 0x02
    606a:	93 81       	ldd	r25, Z+3	; 0x03
    606c:	04 2d       	mov	r16, r4
    606e:	a3 01       	movw	r20, r6
    6070:	2c d6       	rcall	.+3160   	; 0x6cca <__ftoa_engine>
    6072:	6c 01       	movw	r12, r24
    6074:	f9 81       	ldd	r31, Y+1	; 0x01
    6076:	fc 87       	std	Y+12, r31	; 0x0c
    6078:	f0 ff       	sbrs	r31, 0
    607a:	02 c0       	rjmp	.+4      	; 0x6080 <vfprintf+0x1b2>
    607c:	f3 ff       	sbrs	r31, 3
    607e:	06 c0       	rjmp	.+12     	; 0x608c <vfprintf+0x1be>
    6080:	91 fc       	sbrc	r9, 1
    6082:	06 c0       	rjmp	.+12     	; 0x6090 <vfprintf+0x1c2>
    6084:	92 fe       	sbrs	r9, 2
    6086:	06 c0       	rjmp	.+12     	; 0x6094 <vfprintf+0x1c6>
    6088:	00 e2       	ldi	r16, 0x20	; 32
    608a:	05 c0       	rjmp	.+10     	; 0x6096 <vfprintf+0x1c8>
    608c:	0d e2       	ldi	r16, 0x2D	; 45
    608e:	03 c0       	rjmp	.+6      	; 0x6096 <vfprintf+0x1c8>
    6090:	0b e2       	ldi	r16, 0x2B	; 43
    6092:	01 c0       	rjmp	.+2      	; 0x6096 <vfprintf+0x1c8>
    6094:	00 e0       	ldi	r16, 0x00	; 0
    6096:	8c 85       	ldd	r24, Y+12	; 0x0c
    6098:	8c 70       	andi	r24, 0x0C	; 12
    609a:	19 f0       	breq	.+6      	; 0x60a2 <vfprintf+0x1d4>
    609c:	01 11       	cpse	r16, r1
    609e:	43 c2       	rjmp	.+1158   	; 0x6526 <vfprintf+0x658>
    60a0:	80 c2       	rjmp	.+1280   	; 0x65a2 <vfprintf+0x6d4>
    60a2:	97 fe       	sbrs	r9, 7
    60a4:	10 c0       	rjmp	.+32     	; 0x60c6 <vfprintf+0x1f8>
    60a6:	4c 0c       	add	r4, r12
    60a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    60aa:	f4 ff       	sbrs	r31, 4
    60ac:	04 c0       	rjmp	.+8      	; 0x60b6 <vfprintf+0x1e8>
    60ae:	8a 81       	ldd	r24, Y+2	; 0x02
    60b0:	81 33       	cpi	r24, 0x31	; 49
    60b2:	09 f4       	brne	.+2      	; 0x60b6 <vfprintf+0x1e8>
    60b4:	4a 94       	dec	r4
    60b6:	14 14       	cp	r1, r4
    60b8:	74 f5       	brge	.+92     	; 0x6116 <vfprintf+0x248>
    60ba:	28 e0       	ldi	r18, 0x08	; 8
    60bc:	24 15       	cp	r18, r4
    60be:	78 f5       	brcc	.+94     	; 0x611e <vfprintf+0x250>
    60c0:	88 e0       	ldi	r24, 0x08	; 8
    60c2:	48 2e       	mov	r4, r24
    60c4:	2c c0       	rjmp	.+88     	; 0x611e <vfprintf+0x250>
    60c6:	96 fc       	sbrc	r9, 6
    60c8:	2a c0       	rjmp	.+84     	; 0x611e <vfprintf+0x250>
    60ca:	81 2f       	mov	r24, r17
    60cc:	90 e0       	ldi	r25, 0x00	; 0
    60ce:	8c 15       	cp	r24, r12
    60d0:	9d 05       	cpc	r25, r13
    60d2:	9c f0       	brlt	.+38     	; 0x60fa <vfprintf+0x22c>
    60d4:	3c ef       	ldi	r19, 0xFC	; 252
    60d6:	c3 16       	cp	r12, r19
    60d8:	3f ef       	ldi	r19, 0xFF	; 255
    60da:	d3 06       	cpc	r13, r19
    60dc:	74 f0       	brlt	.+28     	; 0x60fa <vfprintf+0x22c>
    60de:	89 2d       	mov	r24, r9
    60e0:	80 68       	ori	r24, 0x80	; 128
    60e2:	98 2e       	mov	r9, r24
    60e4:	0a c0       	rjmp	.+20     	; 0x60fa <vfprintf+0x22c>
    60e6:	e2 e0       	ldi	r30, 0x02	; 2
    60e8:	f0 e0       	ldi	r31, 0x00	; 0
    60ea:	ec 0f       	add	r30, r28
    60ec:	fd 1f       	adc	r31, r29
    60ee:	e1 0f       	add	r30, r17
    60f0:	f1 1d       	adc	r31, r1
    60f2:	80 81       	ld	r24, Z
    60f4:	80 33       	cpi	r24, 0x30	; 48
    60f6:	19 f4       	brne	.+6      	; 0x60fe <vfprintf+0x230>
    60f8:	11 50       	subi	r17, 0x01	; 1
    60fa:	11 11       	cpse	r17, r1
    60fc:	f4 cf       	rjmp	.-24     	; 0x60e6 <vfprintf+0x218>
    60fe:	97 fe       	sbrs	r9, 7
    6100:	0e c0       	rjmp	.+28     	; 0x611e <vfprintf+0x250>
    6102:	44 24       	eor	r4, r4
    6104:	43 94       	inc	r4
    6106:	41 0e       	add	r4, r17
    6108:	81 2f       	mov	r24, r17
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	c8 16       	cp	r12, r24
    610e:	d9 06       	cpc	r13, r25
    6110:	2c f4       	brge	.+10     	; 0x611c <vfprintf+0x24e>
    6112:	1c 19       	sub	r17, r12
    6114:	04 c0       	rjmp	.+8      	; 0x611e <vfprintf+0x250>
    6116:	44 24       	eor	r4, r4
    6118:	43 94       	inc	r4
    611a:	01 c0       	rjmp	.+2      	; 0x611e <vfprintf+0x250>
    611c:	10 e0       	ldi	r17, 0x00	; 0
    611e:	97 fe       	sbrs	r9, 7
    6120:	06 c0       	rjmp	.+12     	; 0x612e <vfprintf+0x260>
    6122:	1c 14       	cp	r1, r12
    6124:	1d 04       	cpc	r1, r13
    6126:	34 f4       	brge	.+12     	; 0x6134 <vfprintf+0x266>
    6128:	c6 01       	movw	r24, r12
    612a:	01 96       	adiw	r24, 0x01	; 1
    612c:	05 c0       	rjmp	.+10     	; 0x6138 <vfprintf+0x26a>
    612e:	85 e0       	ldi	r24, 0x05	; 5
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	02 c0       	rjmp	.+4      	; 0x6138 <vfprintf+0x26a>
    6134:	81 e0       	ldi	r24, 0x01	; 1
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	01 11       	cpse	r16, r1
    613a:	01 96       	adiw	r24, 0x01	; 1
    613c:	11 23       	and	r17, r17
    613e:	31 f0       	breq	.+12     	; 0x614c <vfprintf+0x27e>
    6140:	21 2f       	mov	r18, r17
    6142:	30 e0       	ldi	r19, 0x00	; 0
    6144:	2f 5f       	subi	r18, 0xFF	; 255
    6146:	3f 4f       	sbci	r19, 0xFF	; 255
    6148:	82 0f       	add	r24, r18
    614a:	93 1f       	adc	r25, r19
    614c:	25 2d       	mov	r18, r5
    614e:	30 e0       	ldi	r19, 0x00	; 0
    6150:	82 17       	cp	r24, r18
    6152:	93 07       	cpc	r25, r19
    6154:	14 f4       	brge	.+4      	; 0x615a <vfprintf+0x28c>
    6156:	58 1a       	sub	r5, r24
    6158:	01 c0       	rjmp	.+2      	; 0x615c <vfprintf+0x28e>
    615a:	51 2c       	mov	r5, r1
    615c:	89 2d       	mov	r24, r9
    615e:	89 70       	andi	r24, 0x09	; 9
    6160:	41 f4       	brne	.+16     	; 0x6172 <vfprintf+0x2a4>
    6162:	55 20       	and	r5, r5
    6164:	31 f0       	breq	.+12     	; 0x6172 <vfprintf+0x2a4>
    6166:	b7 01       	movw	r22, r14
    6168:	80 e2       	ldi	r24, 0x20	; 32
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	fb d6       	rcall	.+3574   	; 0x6f64 <fputc>
    616e:	5a 94       	dec	r5
    6170:	f8 cf       	rjmp	.-16     	; 0x6162 <vfprintf+0x294>
    6172:	00 23       	and	r16, r16
    6174:	21 f0       	breq	.+8      	; 0x617e <vfprintf+0x2b0>
    6176:	b7 01       	movw	r22, r14
    6178:	80 2f       	mov	r24, r16
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	f3 d6       	rcall	.+3558   	; 0x6f64 <fputc>
    617e:	93 fc       	sbrc	r9, 3
    6180:	08 c0       	rjmp	.+16     	; 0x6192 <vfprintf+0x2c4>
    6182:	55 20       	and	r5, r5
    6184:	31 f0       	breq	.+12     	; 0x6192 <vfprintf+0x2c4>
    6186:	b7 01       	movw	r22, r14
    6188:	80 e3       	ldi	r24, 0x30	; 48
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	eb d6       	rcall	.+3542   	; 0x6f64 <fputc>
    618e:	5a 94       	dec	r5
    6190:	f8 cf       	rjmp	.-16     	; 0x6182 <vfprintf+0x2b4>
    6192:	97 fe       	sbrs	r9, 7
    6194:	4a c0       	rjmp	.+148    	; 0x622a <vfprintf+0x35c>
    6196:	46 01       	movw	r8, r12
    6198:	d7 fe       	sbrs	r13, 7
    619a:	02 c0       	rjmp	.+4      	; 0x61a0 <vfprintf+0x2d2>
    619c:	81 2c       	mov	r8, r1
    619e:	91 2c       	mov	r9, r1
    61a0:	c6 01       	movw	r24, r12
    61a2:	88 19       	sub	r24, r8
    61a4:	99 09       	sbc	r25, r9
    61a6:	f3 01       	movw	r30, r6
    61a8:	e8 0f       	add	r30, r24
    61aa:	f9 1f       	adc	r31, r25
    61ac:	fe 87       	std	Y+14, r31	; 0x0e
    61ae:	ed 87       	std	Y+13, r30	; 0x0d
    61b0:	96 01       	movw	r18, r12
    61b2:	24 19       	sub	r18, r4
    61b4:	31 09       	sbc	r19, r1
    61b6:	38 8b       	std	Y+16, r19	; 0x10
    61b8:	2f 87       	std	Y+15, r18	; 0x0f
    61ba:	01 2f       	mov	r16, r17
    61bc:	10 e0       	ldi	r17, 0x00	; 0
    61be:	11 95       	neg	r17
    61c0:	01 95       	neg	r16
    61c2:	11 09       	sbc	r17, r1
    61c4:	3f ef       	ldi	r19, 0xFF	; 255
    61c6:	83 16       	cp	r8, r19
    61c8:	93 06       	cpc	r9, r19
    61ca:	21 f4       	brne	.+8      	; 0x61d4 <vfprintf+0x306>
    61cc:	b7 01       	movw	r22, r14
    61ce:	8e e2       	ldi	r24, 0x2E	; 46
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	c8 d6       	rcall	.+3472   	; 0x6f64 <fputc>
    61d4:	c8 14       	cp	r12, r8
    61d6:	d9 04       	cpc	r13, r9
    61d8:	4c f0       	brlt	.+18     	; 0x61ec <vfprintf+0x31e>
    61da:	8f 85       	ldd	r24, Y+15	; 0x0f
    61dc:	98 89       	ldd	r25, Y+16	; 0x10
    61de:	88 15       	cp	r24, r8
    61e0:	99 05       	cpc	r25, r9
    61e2:	24 f4       	brge	.+8      	; 0x61ec <vfprintf+0x31e>
    61e4:	ed 85       	ldd	r30, Y+13	; 0x0d
    61e6:	fe 85       	ldd	r31, Y+14	; 0x0e
    61e8:	81 81       	ldd	r24, Z+1	; 0x01
    61ea:	01 c0       	rjmp	.+2      	; 0x61ee <vfprintf+0x320>
    61ec:	80 e3       	ldi	r24, 0x30	; 48
    61ee:	f1 e0       	ldi	r31, 0x01	; 1
    61f0:	8f 1a       	sub	r8, r31
    61f2:	91 08       	sbc	r9, r1
    61f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    61f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    61f8:	2f 5f       	subi	r18, 0xFF	; 255
    61fa:	3f 4f       	sbci	r19, 0xFF	; 255
    61fc:	3e 87       	std	Y+14, r19	; 0x0e
    61fe:	2d 87       	std	Y+13, r18	; 0x0d
    6200:	80 16       	cp	r8, r16
    6202:	91 06       	cpc	r9, r17
    6204:	24 f0       	brlt	.+8      	; 0x620e <vfprintf+0x340>
    6206:	b7 01       	movw	r22, r14
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	ac d6       	rcall	.+3416   	; 0x6f64 <fputc>
    620c:	db cf       	rjmp	.-74     	; 0x61c4 <vfprintf+0x2f6>
    620e:	c8 14       	cp	r12, r8
    6210:	d9 04       	cpc	r13, r9
    6212:	41 f4       	brne	.+16     	; 0x6224 <vfprintf+0x356>
    6214:	9a 81       	ldd	r25, Y+2	; 0x02
    6216:	96 33       	cpi	r25, 0x36	; 54
    6218:	20 f4       	brcc	.+8      	; 0x6222 <vfprintf+0x354>
    621a:	95 33       	cpi	r25, 0x35	; 53
    621c:	19 f4       	brne	.+6      	; 0x6224 <vfprintf+0x356>
    621e:	3c 85       	ldd	r19, Y+12	; 0x0c
    6220:	34 ff       	sbrs	r19, 4
    6222:	81 e3       	ldi	r24, 0x31	; 49
    6224:	b7 01       	movw	r22, r14
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	48 c0       	rjmp	.+144    	; 0x62ba <vfprintf+0x3ec>
    622a:	8a 81       	ldd	r24, Y+2	; 0x02
    622c:	81 33       	cpi	r24, 0x31	; 49
    622e:	19 f0       	breq	.+6      	; 0x6236 <vfprintf+0x368>
    6230:	9c 85       	ldd	r25, Y+12	; 0x0c
    6232:	9f 7e       	andi	r25, 0xEF	; 239
    6234:	9c 87       	std	Y+12, r25	; 0x0c
    6236:	b7 01       	movw	r22, r14
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	94 d6       	rcall	.+3368   	; 0x6f64 <fputc>
    623c:	11 11       	cpse	r17, r1
    623e:	05 c0       	rjmp	.+10     	; 0x624a <vfprintf+0x37c>
    6240:	94 fc       	sbrc	r9, 4
    6242:	16 c0       	rjmp	.+44     	; 0x6270 <vfprintf+0x3a2>
    6244:	85 e6       	ldi	r24, 0x65	; 101
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	15 c0       	rjmp	.+42     	; 0x6274 <vfprintf+0x3a6>
    624a:	b7 01       	movw	r22, r14
    624c:	8e e2       	ldi	r24, 0x2E	; 46
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	89 d6       	rcall	.+3346   	; 0x6f64 <fputc>
    6252:	1e 5f       	subi	r17, 0xFE	; 254
    6254:	82 e0       	ldi	r24, 0x02	; 2
    6256:	01 e0       	ldi	r16, 0x01	; 1
    6258:	08 0f       	add	r16, r24
    625a:	f3 01       	movw	r30, r6
    625c:	e8 0f       	add	r30, r24
    625e:	f1 1d       	adc	r31, r1
    6260:	80 81       	ld	r24, Z
    6262:	b7 01       	movw	r22, r14
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	7e d6       	rcall	.+3324   	; 0x6f64 <fputc>
    6268:	80 2f       	mov	r24, r16
    626a:	01 13       	cpse	r16, r17
    626c:	f4 cf       	rjmp	.-24     	; 0x6256 <vfprintf+0x388>
    626e:	e8 cf       	rjmp	.-48     	; 0x6240 <vfprintf+0x372>
    6270:	85 e4       	ldi	r24, 0x45	; 69
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	b7 01       	movw	r22, r14
    6276:	76 d6       	rcall	.+3308   	; 0x6f64 <fputc>
    6278:	d7 fc       	sbrc	r13, 7
    627a:	06 c0       	rjmp	.+12     	; 0x6288 <vfprintf+0x3ba>
    627c:	c1 14       	cp	r12, r1
    627e:	d1 04       	cpc	r13, r1
    6280:	41 f4       	brne	.+16     	; 0x6292 <vfprintf+0x3c4>
    6282:	ec 85       	ldd	r30, Y+12	; 0x0c
    6284:	e4 ff       	sbrs	r30, 4
    6286:	05 c0       	rjmp	.+10     	; 0x6292 <vfprintf+0x3c4>
    6288:	d1 94       	neg	r13
    628a:	c1 94       	neg	r12
    628c:	d1 08       	sbc	r13, r1
    628e:	8d e2       	ldi	r24, 0x2D	; 45
    6290:	01 c0       	rjmp	.+2      	; 0x6294 <vfprintf+0x3c6>
    6292:	8b e2       	ldi	r24, 0x2B	; 43
    6294:	b7 01       	movw	r22, r14
    6296:	90 e0       	ldi	r25, 0x00	; 0
    6298:	65 d6       	rcall	.+3274   	; 0x6f64 <fputc>
    629a:	80 e3       	ldi	r24, 0x30	; 48
    629c:	2a e0       	ldi	r18, 0x0A	; 10
    629e:	c2 16       	cp	r12, r18
    62a0:	d1 04       	cpc	r13, r1
    62a2:	2c f0       	brlt	.+10     	; 0x62ae <vfprintf+0x3e0>
    62a4:	8f 5f       	subi	r24, 0xFF	; 255
    62a6:	fa e0       	ldi	r31, 0x0A	; 10
    62a8:	cf 1a       	sub	r12, r31
    62aa:	d1 08       	sbc	r13, r1
    62ac:	f7 cf       	rjmp	.-18     	; 0x629c <vfprintf+0x3ce>
    62ae:	b7 01       	movw	r22, r14
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	58 d6       	rcall	.+3248   	; 0x6f64 <fputc>
    62b4:	b7 01       	movw	r22, r14
    62b6:	c6 01       	movw	r24, r12
    62b8:	c0 96       	adiw	r24, 0x30	; 48
    62ba:	54 d6       	rcall	.+3240   	; 0x6f64 <fputc>
    62bc:	49 c1       	rjmp	.+658    	; 0x6550 <vfprintf+0x682>
    62be:	83 36       	cpi	r24, 0x63	; 99
    62c0:	31 f0       	breq	.+12     	; 0x62ce <vfprintf+0x400>
    62c2:	83 37       	cpi	r24, 0x73	; 115
    62c4:	79 f0       	breq	.+30     	; 0x62e4 <vfprintf+0x416>
    62c6:	83 35       	cpi	r24, 0x53	; 83
    62c8:	09 f0       	breq	.+2      	; 0x62cc <vfprintf+0x3fe>
    62ca:	52 c0       	rjmp	.+164    	; 0x6370 <vfprintf+0x4a2>
    62cc:	1f c0       	rjmp	.+62     	; 0x630c <vfprintf+0x43e>
    62ce:	56 01       	movw	r10, r12
    62d0:	32 e0       	ldi	r19, 0x02	; 2
    62d2:	a3 0e       	add	r10, r19
    62d4:	b1 1c       	adc	r11, r1
    62d6:	f6 01       	movw	r30, r12
    62d8:	80 81       	ld	r24, Z
    62da:	89 83       	std	Y+1, r24	; 0x01
    62dc:	01 e0       	ldi	r16, 0x01	; 1
    62de:	10 e0       	ldi	r17, 0x00	; 0
    62e0:	63 01       	movw	r12, r6
    62e2:	11 c0       	rjmp	.+34     	; 0x6306 <vfprintf+0x438>
    62e4:	56 01       	movw	r10, r12
    62e6:	f2 e0       	ldi	r31, 0x02	; 2
    62e8:	af 0e       	add	r10, r31
    62ea:	b1 1c       	adc	r11, r1
    62ec:	f6 01       	movw	r30, r12
    62ee:	c0 80       	ld	r12, Z
    62f0:	d1 80       	ldd	r13, Z+1	; 0x01
    62f2:	96 fe       	sbrs	r9, 6
    62f4:	03 c0       	rjmp	.+6      	; 0x62fc <vfprintf+0x42e>
    62f6:	61 2f       	mov	r22, r17
    62f8:	70 e0       	ldi	r23, 0x00	; 0
    62fa:	02 c0       	rjmp	.+4      	; 0x6300 <vfprintf+0x432>
    62fc:	6f ef       	ldi	r22, 0xFF	; 255
    62fe:	7f ef       	ldi	r23, 0xFF	; 255
    6300:	c6 01       	movw	r24, r12
    6302:	25 d6       	rcall	.+3146   	; 0x6f4e <strnlen>
    6304:	8c 01       	movw	r16, r24
    6306:	f9 2d       	mov	r31, r9
    6308:	ff 77       	andi	r31, 0x7F	; 127
    630a:	13 c0       	rjmp	.+38     	; 0x6332 <vfprintf+0x464>
    630c:	56 01       	movw	r10, r12
    630e:	22 e0       	ldi	r18, 0x02	; 2
    6310:	a2 0e       	add	r10, r18
    6312:	b1 1c       	adc	r11, r1
    6314:	f6 01       	movw	r30, r12
    6316:	c0 80       	ld	r12, Z
    6318:	d1 80       	ldd	r13, Z+1	; 0x01
    631a:	96 fe       	sbrs	r9, 6
    631c:	03 c0       	rjmp	.+6      	; 0x6324 <vfprintf+0x456>
    631e:	61 2f       	mov	r22, r17
    6320:	70 e0       	ldi	r23, 0x00	; 0
    6322:	02 c0       	rjmp	.+4      	; 0x6328 <vfprintf+0x45a>
    6324:	6f ef       	ldi	r22, 0xFF	; 255
    6326:	7f ef       	ldi	r23, 0xFF	; 255
    6328:	c6 01       	movw	r24, r12
    632a:	a7 d5       	rcall	.+2894   	; 0x6e7a <strnlen_P>
    632c:	8c 01       	movw	r16, r24
    632e:	f9 2d       	mov	r31, r9
    6330:	f0 68       	ori	r31, 0x80	; 128
    6332:	9f 2e       	mov	r9, r31
    6334:	f3 fd       	sbrc	r31, 3
    6336:	18 c0       	rjmp	.+48     	; 0x6368 <vfprintf+0x49a>
    6338:	85 2d       	mov	r24, r5
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	08 17       	cp	r16, r24
    633e:	19 07       	cpc	r17, r25
    6340:	98 f4       	brcc	.+38     	; 0x6368 <vfprintf+0x49a>
    6342:	b7 01       	movw	r22, r14
    6344:	80 e2       	ldi	r24, 0x20	; 32
    6346:	90 e0       	ldi	r25, 0x00	; 0
    6348:	0d d6       	rcall	.+3098   	; 0x6f64 <fputc>
    634a:	5a 94       	dec	r5
    634c:	f5 cf       	rjmp	.-22     	; 0x6338 <vfprintf+0x46a>
    634e:	f6 01       	movw	r30, r12
    6350:	97 fc       	sbrc	r9, 7
    6352:	85 91       	lpm	r24, Z+
    6354:	97 fe       	sbrs	r9, 7
    6356:	81 91       	ld	r24, Z+
    6358:	6f 01       	movw	r12, r30
    635a:	b7 01       	movw	r22, r14
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	02 d6       	rcall	.+3076   	; 0x6f64 <fputc>
    6360:	51 10       	cpse	r5, r1
    6362:	5a 94       	dec	r5
    6364:	01 50       	subi	r16, 0x01	; 1
    6366:	11 09       	sbc	r17, r1
    6368:	01 15       	cp	r16, r1
    636a:	11 05       	cpc	r17, r1
    636c:	81 f7       	brne	.-32     	; 0x634e <vfprintf+0x480>
    636e:	f0 c0       	rjmp	.+480    	; 0x6550 <vfprintf+0x682>
    6370:	84 36       	cpi	r24, 0x64	; 100
    6372:	11 f0       	breq	.+4      	; 0x6378 <vfprintf+0x4aa>
    6374:	89 36       	cpi	r24, 0x69	; 105
    6376:	59 f5       	brne	.+86     	; 0x63ce <vfprintf+0x500>
    6378:	56 01       	movw	r10, r12
    637a:	97 fe       	sbrs	r9, 7
    637c:	09 c0       	rjmp	.+18     	; 0x6390 <vfprintf+0x4c2>
    637e:	24 e0       	ldi	r18, 0x04	; 4
    6380:	a2 0e       	add	r10, r18
    6382:	b1 1c       	adc	r11, r1
    6384:	f6 01       	movw	r30, r12
    6386:	60 81       	ld	r22, Z
    6388:	71 81       	ldd	r23, Z+1	; 0x01
    638a:	82 81       	ldd	r24, Z+2	; 0x02
    638c:	93 81       	ldd	r25, Z+3	; 0x03
    638e:	0a c0       	rjmp	.+20     	; 0x63a4 <vfprintf+0x4d6>
    6390:	f2 e0       	ldi	r31, 0x02	; 2
    6392:	af 0e       	add	r10, r31
    6394:	b1 1c       	adc	r11, r1
    6396:	f6 01       	movw	r30, r12
    6398:	60 81       	ld	r22, Z
    639a:	71 81       	ldd	r23, Z+1	; 0x01
    639c:	07 2e       	mov	r0, r23
    639e:	00 0c       	add	r0, r0
    63a0:	88 0b       	sbc	r24, r24
    63a2:	99 0b       	sbc	r25, r25
    63a4:	f9 2d       	mov	r31, r9
    63a6:	ff 76       	andi	r31, 0x6F	; 111
    63a8:	9f 2e       	mov	r9, r31
    63aa:	97 ff       	sbrs	r25, 7
    63ac:	09 c0       	rjmp	.+18     	; 0x63c0 <vfprintf+0x4f2>
    63ae:	90 95       	com	r25
    63b0:	80 95       	com	r24
    63b2:	70 95       	com	r23
    63b4:	61 95       	neg	r22
    63b6:	7f 4f       	sbci	r23, 0xFF	; 255
    63b8:	8f 4f       	sbci	r24, 0xFF	; 255
    63ba:	9f 4f       	sbci	r25, 0xFF	; 255
    63bc:	f0 68       	ori	r31, 0x80	; 128
    63be:	9f 2e       	mov	r9, r31
    63c0:	2a e0       	ldi	r18, 0x0A	; 10
    63c2:	30 e0       	ldi	r19, 0x00	; 0
    63c4:	a3 01       	movw	r20, r6
    63c6:	7d d6       	rcall	.+3322   	; 0x70c2 <__ultoa_invert>
    63c8:	c8 2e       	mov	r12, r24
    63ca:	c6 18       	sub	r12, r6
    63cc:	3e c0       	rjmp	.+124    	; 0x644a <vfprintf+0x57c>
    63ce:	09 2d       	mov	r16, r9
    63d0:	85 37       	cpi	r24, 0x75	; 117
    63d2:	21 f4       	brne	.+8      	; 0x63dc <vfprintf+0x50e>
    63d4:	0f 7e       	andi	r16, 0xEF	; 239
    63d6:	2a e0       	ldi	r18, 0x0A	; 10
    63d8:	30 e0       	ldi	r19, 0x00	; 0
    63da:	1d c0       	rjmp	.+58     	; 0x6416 <vfprintf+0x548>
    63dc:	09 7f       	andi	r16, 0xF9	; 249
    63de:	8f 36       	cpi	r24, 0x6F	; 111
    63e0:	91 f0       	breq	.+36     	; 0x6406 <vfprintf+0x538>
    63e2:	18 f4       	brcc	.+6      	; 0x63ea <vfprintf+0x51c>
    63e4:	88 35       	cpi	r24, 0x58	; 88
    63e6:	59 f0       	breq	.+22     	; 0x63fe <vfprintf+0x530>
    63e8:	bc c0       	rjmp	.+376    	; 0x6562 <vfprintf+0x694>
    63ea:	80 37       	cpi	r24, 0x70	; 112
    63ec:	19 f0       	breq	.+6      	; 0x63f4 <vfprintf+0x526>
    63ee:	88 37       	cpi	r24, 0x78	; 120
    63f0:	11 f0       	breq	.+4      	; 0x63f6 <vfprintf+0x528>
    63f2:	b7 c0       	rjmp	.+366    	; 0x6562 <vfprintf+0x694>
    63f4:	00 61       	ori	r16, 0x10	; 16
    63f6:	04 ff       	sbrs	r16, 4
    63f8:	09 c0       	rjmp	.+18     	; 0x640c <vfprintf+0x53e>
    63fa:	04 60       	ori	r16, 0x04	; 4
    63fc:	07 c0       	rjmp	.+14     	; 0x640c <vfprintf+0x53e>
    63fe:	94 fe       	sbrs	r9, 4
    6400:	08 c0       	rjmp	.+16     	; 0x6412 <vfprintf+0x544>
    6402:	06 60       	ori	r16, 0x06	; 6
    6404:	06 c0       	rjmp	.+12     	; 0x6412 <vfprintf+0x544>
    6406:	28 e0       	ldi	r18, 0x08	; 8
    6408:	30 e0       	ldi	r19, 0x00	; 0
    640a:	05 c0       	rjmp	.+10     	; 0x6416 <vfprintf+0x548>
    640c:	20 e1       	ldi	r18, 0x10	; 16
    640e:	30 e0       	ldi	r19, 0x00	; 0
    6410:	02 c0       	rjmp	.+4      	; 0x6416 <vfprintf+0x548>
    6412:	20 e1       	ldi	r18, 0x10	; 16
    6414:	32 e0       	ldi	r19, 0x02	; 2
    6416:	56 01       	movw	r10, r12
    6418:	07 ff       	sbrs	r16, 7
    641a:	09 c0       	rjmp	.+18     	; 0x642e <vfprintf+0x560>
    641c:	84 e0       	ldi	r24, 0x04	; 4
    641e:	a8 0e       	add	r10, r24
    6420:	b1 1c       	adc	r11, r1
    6422:	f6 01       	movw	r30, r12
    6424:	60 81       	ld	r22, Z
    6426:	71 81       	ldd	r23, Z+1	; 0x01
    6428:	82 81       	ldd	r24, Z+2	; 0x02
    642a:	93 81       	ldd	r25, Z+3	; 0x03
    642c:	08 c0       	rjmp	.+16     	; 0x643e <vfprintf+0x570>
    642e:	f2 e0       	ldi	r31, 0x02	; 2
    6430:	af 0e       	add	r10, r31
    6432:	b1 1c       	adc	r11, r1
    6434:	f6 01       	movw	r30, r12
    6436:	60 81       	ld	r22, Z
    6438:	71 81       	ldd	r23, Z+1	; 0x01
    643a:	80 e0       	ldi	r24, 0x00	; 0
    643c:	90 e0       	ldi	r25, 0x00	; 0
    643e:	a3 01       	movw	r20, r6
    6440:	40 d6       	rcall	.+3200   	; 0x70c2 <__ultoa_invert>
    6442:	c8 2e       	mov	r12, r24
    6444:	c6 18       	sub	r12, r6
    6446:	0f 77       	andi	r16, 0x7F	; 127
    6448:	90 2e       	mov	r9, r16
    644a:	96 fe       	sbrs	r9, 6
    644c:	0b c0       	rjmp	.+22     	; 0x6464 <vfprintf+0x596>
    644e:	09 2d       	mov	r16, r9
    6450:	0e 7f       	andi	r16, 0xFE	; 254
    6452:	c1 16       	cp	r12, r17
    6454:	50 f4       	brcc	.+20     	; 0x646a <vfprintf+0x59c>
    6456:	94 fe       	sbrs	r9, 4
    6458:	0a c0       	rjmp	.+20     	; 0x646e <vfprintf+0x5a0>
    645a:	92 fc       	sbrc	r9, 2
    645c:	08 c0       	rjmp	.+16     	; 0x646e <vfprintf+0x5a0>
    645e:	09 2d       	mov	r16, r9
    6460:	0e 7e       	andi	r16, 0xEE	; 238
    6462:	05 c0       	rjmp	.+10     	; 0x646e <vfprintf+0x5a0>
    6464:	dc 2c       	mov	r13, r12
    6466:	09 2d       	mov	r16, r9
    6468:	03 c0       	rjmp	.+6      	; 0x6470 <vfprintf+0x5a2>
    646a:	dc 2c       	mov	r13, r12
    646c:	01 c0       	rjmp	.+2      	; 0x6470 <vfprintf+0x5a2>
    646e:	d1 2e       	mov	r13, r17
    6470:	04 ff       	sbrs	r16, 4
    6472:	0d c0       	rjmp	.+26     	; 0x648e <vfprintf+0x5c0>
    6474:	fe 01       	movw	r30, r28
    6476:	ec 0d       	add	r30, r12
    6478:	f1 1d       	adc	r31, r1
    647a:	80 81       	ld	r24, Z
    647c:	80 33       	cpi	r24, 0x30	; 48
    647e:	11 f4       	brne	.+4      	; 0x6484 <vfprintf+0x5b6>
    6480:	09 7e       	andi	r16, 0xE9	; 233
    6482:	09 c0       	rjmp	.+18     	; 0x6496 <vfprintf+0x5c8>
    6484:	02 ff       	sbrs	r16, 2
    6486:	06 c0       	rjmp	.+12     	; 0x6494 <vfprintf+0x5c6>
    6488:	d3 94       	inc	r13
    648a:	d3 94       	inc	r13
    648c:	04 c0       	rjmp	.+8      	; 0x6496 <vfprintf+0x5c8>
    648e:	80 2f       	mov	r24, r16
    6490:	86 78       	andi	r24, 0x86	; 134
    6492:	09 f0       	breq	.+2      	; 0x6496 <vfprintf+0x5c8>
    6494:	d3 94       	inc	r13
    6496:	03 fd       	sbrc	r16, 3
    6498:	10 c0       	rjmp	.+32     	; 0x64ba <vfprintf+0x5ec>
    649a:	00 ff       	sbrs	r16, 0
    649c:	06 c0       	rjmp	.+12     	; 0x64aa <vfprintf+0x5dc>
    649e:	1c 2d       	mov	r17, r12
    64a0:	d5 14       	cp	r13, r5
    64a2:	78 f4       	brcc	.+30     	; 0x64c2 <vfprintf+0x5f4>
    64a4:	15 0d       	add	r17, r5
    64a6:	1d 19       	sub	r17, r13
    64a8:	0c c0       	rjmp	.+24     	; 0x64c2 <vfprintf+0x5f4>
    64aa:	d5 14       	cp	r13, r5
    64ac:	50 f4       	brcc	.+20     	; 0x64c2 <vfprintf+0x5f4>
    64ae:	b7 01       	movw	r22, r14
    64b0:	80 e2       	ldi	r24, 0x20	; 32
    64b2:	90 e0       	ldi	r25, 0x00	; 0
    64b4:	57 d5       	rcall	.+2734   	; 0x6f64 <fputc>
    64b6:	d3 94       	inc	r13
    64b8:	f8 cf       	rjmp	.-16     	; 0x64aa <vfprintf+0x5dc>
    64ba:	d5 14       	cp	r13, r5
    64bc:	10 f4       	brcc	.+4      	; 0x64c2 <vfprintf+0x5f4>
    64be:	5d 18       	sub	r5, r13
    64c0:	01 c0       	rjmp	.+2      	; 0x64c4 <vfprintf+0x5f6>
    64c2:	51 2c       	mov	r5, r1
    64c4:	04 ff       	sbrs	r16, 4
    64c6:	0f c0       	rjmp	.+30     	; 0x64e6 <vfprintf+0x618>
    64c8:	b7 01       	movw	r22, r14
    64ca:	80 e3       	ldi	r24, 0x30	; 48
    64cc:	90 e0       	ldi	r25, 0x00	; 0
    64ce:	4a d5       	rcall	.+2708   	; 0x6f64 <fputc>
    64d0:	02 ff       	sbrs	r16, 2
    64d2:	16 c0       	rjmp	.+44     	; 0x6500 <vfprintf+0x632>
    64d4:	01 fd       	sbrc	r16, 1
    64d6:	03 c0       	rjmp	.+6      	; 0x64de <vfprintf+0x610>
    64d8:	88 e7       	ldi	r24, 0x78	; 120
    64da:	90 e0       	ldi	r25, 0x00	; 0
    64dc:	02 c0       	rjmp	.+4      	; 0x64e2 <vfprintf+0x614>
    64de:	88 e5       	ldi	r24, 0x58	; 88
    64e0:	90 e0       	ldi	r25, 0x00	; 0
    64e2:	b7 01       	movw	r22, r14
    64e4:	0c c0       	rjmp	.+24     	; 0x64fe <vfprintf+0x630>
    64e6:	80 2f       	mov	r24, r16
    64e8:	86 78       	andi	r24, 0x86	; 134
    64ea:	51 f0       	breq	.+20     	; 0x6500 <vfprintf+0x632>
    64ec:	01 ff       	sbrs	r16, 1
    64ee:	02 c0       	rjmp	.+4      	; 0x64f4 <vfprintf+0x626>
    64f0:	8b e2       	ldi	r24, 0x2B	; 43
    64f2:	01 c0       	rjmp	.+2      	; 0x64f6 <vfprintf+0x628>
    64f4:	80 e2       	ldi	r24, 0x20	; 32
    64f6:	07 fd       	sbrc	r16, 7
    64f8:	8d e2       	ldi	r24, 0x2D	; 45
    64fa:	b7 01       	movw	r22, r14
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	32 d5       	rcall	.+2660   	; 0x6f64 <fputc>
    6500:	c1 16       	cp	r12, r17
    6502:	30 f4       	brcc	.+12     	; 0x6510 <vfprintf+0x642>
    6504:	b7 01       	movw	r22, r14
    6506:	80 e3       	ldi	r24, 0x30	; 48
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	2c d5       	rcall	.+2648   	; 0x6f64 <fputc>
    650c:	11 50       	subi	r17, 0x01	; 1
    650e:	f8 cf       	rjmp	.-16     	; 0x6500 <vfprintf+0x632>
    6510:	ca 94       	dec	r12
    6512:	f3 01       	movw	r30, r6
    6514:	ec 0d       	add	r30, r12
    6516:	f1 1d       	adc	r31, r1
    6518:	80 81       	ld	r24, Z
    651a:	b7 01       	movw	r22, r14
    651c:	90 e0       	ldi	r25, 0x00	; 0
    651e:	22 d5       	rcall	.+2628   	; 0x6f64 <fputc>
    6520:	c1 10       	cpse	r12, r1
    6522:	f6 cf       	rjmp	.-20     	; 0x6510 <vfprintf+0x642>
    6524:	15 c0       	rjmp	.+42     	; 0x6550 <vfprintf+0x682>
    6526:	f4 e0       	ldi	r31, 0x04	; 4
    6528:	f5 15       	cp	r31, r5
    652a:	50 f5       	brcc	.+84     	; 0x6580 <vfprintf+0x6b2>
    652c:	84 e0       	ldi	r24, 0x04	; 4
    652e:	58 1a       	sub	r5, r24
    6530:	93 fe       	sbrs	r9, 3
    6532:	1e c0       	rjmp	.+60     	; 0x6570 <vfprintf+0x6a2>
    6534:	01 11       	cpse	r16, r1
    6536:	25 c0       	rjmp	.+74     	; 0x6582 <vfprintf+0x6b4>
    6538:	2c 85       	ldd	r18, Y+12	; 0x0c
    653a:	23 ff       	sbrs	r18, 3
    653c:	27 c0       	rjmp	.+78     	; 0x658c <vfprintf+0x6be>
    653e:	0a e9       	ldi	r16, 0x9A	; 154
    6540:	11 e0       	ldi	r17, 0x01	; 1
    6542:	39 2d       	mov	r19, r9
    6544:	30 71       	andi	r19, 0x10	; 16
    6546:	93 2e       	mov	r9, r19
    6548:	f8 01       	movw	r30, r16
    654a:	84 91       	lpm	r24, Z
    654c:	81 11       	cpse	r24, r1
    654e:	21 c0       	rjmp	.+66     	; 0x6592 <vfprintf+0x6c4>
    6550:	55 20       	and	r5, r5
    6552:	09 f4       	brne	.+2      	; 0x6556 <vfprintf+0x688>
    6554:	fc cc       	rjmp	.-1544   	; 0x5f4e <vfprintf+0x80>
    6556:	b7 01       	movw	r22, r14
    6558:	80 e2       	ldi	r24, 0x20	; 32
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	03 d5       	rcall	.+2566   	; 0x6f64 <fputc>
    655e:	5a 94       	dec	r5
    6560:	f7 cf       	rjmp	.-18     	; 0x6550 <vfprintf+0x682>
    6562:	f7 01       	movw	r30, r14
    6564:	86 81       	ldd	r24, Z+6	; 0x06
    6566:	97 81       	ldd	r25, Z+7	; 0x07
    6568:	23 c0       	rjmp	.+70     	; 0x65b0 <vfprintf+0x6e2>
    656a:	8f ef       	ldi	r24, 0xFF	; 255
    656c:	9f ef       	ldi	r25, 0xFF	; 255
    656e:	20 c0       	rjmp	.+64     	; 0x65b0 <vfprintf+0x6e2>
    6570:	b7 01       	movw	r22, r14
    6572:	80 e2       	ldi	r24, 0x20	; 32
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	f6 d4       	rcall	.+2540   	; 0x6f64 <fputc>
    6578:	5a 94       	dec	r5
    657a:	51 10       	cpse	r5, r1
    657c:	f9 cf       	rjmp	.-14     	; 0x6570 <vfprintf+0x6a2>
    657e:	da cf       	rjmp	.-76     	; 0x6534 <vfprintf+0x666>
    6580:	51 2c       	mov	r5, r1
    6582:	b7 01       	movw	r22, r14
    6584:	80 2f       	mov	r24, r16
    6586:	90 e0       	ldi	r25, 0x00	; 0
    6588:	ed d4       	rcall	.+2522   	; 0x6f64 <fputc>
    658a:	d6 cf       	rjmp	.-84     	; 0x6538 <vfprintf+0x66a>
    658c:	0e e9       	ldi	r16, 0x9E	; 158
    658e:	11 e0       	ldi	r17, 0x01	; 1
    6590:	d8 cf       	rjmp	.-80     	; 0x6542 <vfprintf+0x674>
    6592:	91 10       	cpse	r9, r1
    6594:	80 52       	subi	r24, 0x20	; 32
    6596:	b7 01       	movw	r22, r14
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	e4 d4       	rcall	.+2504   	; 0x6f64 <fputc>
    659c:	0f 5f       	subi	r16, 0xFF	; 255
    659e:	1f 4f       	sbci	r17, 0xFF	; 255
    65a0:	d3 cf       	rjmp	.-90     	; 0x6548 <vfprintf+0x67a>
    65a2:	23 e0       	ldi	r18, 0x03	; 3
    65a4:	25 15       	cp	r18, r5
    65a6:	10 f4       	brcc	.+4      	; 0x65ac <vfprintf+0x6de>
    65a8:	83 e0       	ldi	r24, 0x03	; 3
    65aa:	c1 cf       	rjmp	.-126    	; 0x652e <vfprintf+0x660>
    65ac:	51 2c       	mov	r5, r1
    65ae:	c4 cf       	rjmp	.-120    	; 0x6538 <vfprintf+0x66a>
    65b0:	60 96       	adiw	r28, 0x10	; 16
    65b2:	0f b6       	in	r0, 0x3f	; 63
    65b4:	f8 94       	cli
    65b6:	de bf       	out	0x3e, r29	; 62
    65b8:	0f be       	out	0x3f, r0	; 63
    65ba:	cd bf       	out	0x3d, r28	; 61
    65bc:	df 91       	pop	r29
    65be:	cf 91       	pop	r28
    65c0:	1f 91       	pop	r17
    65c2:	0f 91       	pop	r16
    65c4:	ff 90       	pop	r15
    65c6:	ef 90       	pop	r14
    65c8:	df 90       	pop	r13
    65ca:	cf 90       	pop	r12
    65cc:	bf 90       	pop	r11
    65ce:	af 90       	pop	r10
    65d0:	9f 90       	pop	r9
    65d2:	8f 90       	pop	r8
    65d4:	7f 90       	pop	r7
    65d6:	6f 90       	pop	r6
    65d8:	5f 90       	pop	r5
    65da:	4f 90       	pop	r4
    65dc:	3f 90       	pop	r3
    65de:	2f 90       	pop	r2
    65e0:	08 95       	ret

000065e2 <__subsf3>:
    65e2:	50 58       	subi	r21, 0x80	; 128

000065e4 <__addsf3>:
    65e4:	bb 27       	eor	r27, r27
    65e6:	aa 27       	eor	r26, r26
    65e8:	0e d0       	rcall	.+28     	; 0x6606 <__addsf3x>
    65ea:	4d c1       	rjmp	.+666    	; 0x6886 <__fp_round>
    65ec:	3e d1       	rcall	.+636    	; 0x686a <__fp_pscA>
    65ee:	30 f0       	brcs	.+12     	; 0x65fc <__addsf3+0x18>
    65f0:	43 d1       	rcall	.+646    	; 0x6878 <__fp_pscB>
    65f2:	20 f0       	brcs	.+8      	; 0x65fc <__addsf3+0x18>
    65f4:	31 f4       	brne	.+12     	; 0x6602 <__addsf3+0x1e>
    65f6:	9f 3f       	cpi	r25, 0xFF	; 255
    65f8:	11 f4       	brne	.+4      	; 0x65fe <__addsf3+0x1a>
    65fa:	1e f4       	brtc	.+6      	; 0x6602 <__addsf3+0x1e>
    65fc:	33 c1       	rjmp	.+614    	; 0x6864 <__fp_nan>
    65fe:	0e f4       	brtc	.+2      	; 0x6602 <__addsf3+0x1e>
    6600:	e0 95       	com	r30
    6602:	e7 fb       	bst	r30, 7
    6604:	29 c1       	rjmp	.+594    	; 0x6858 <__fp_inf>

00006606 <__addsf3x>:
    6606:	e9 2f       	mov	r30, r25
    6608:	4f d1       	rcall	.+670    	; 0x68a8 <__fp_split3>
    660a:	80 f3       	brcs	.-32     	; 0x65ec <__addsf3+0x8>
    660c:	ba 17       	cp	r27, r26
    660e:	62 07       	cpc	r22, r18
    6610:	73 07       	cpc	r23, r19
    6612:	84 07       	cpc	r24, r20
    6614:	95 07       	cpc	r25, r21
    6616:	18 f0       	brcs	.+6      	; 0x661e <__addsf3x+0x18>
    6618:	71 f4       	brne	.+28     	; 0x6636 <__addsf3x+0x30>
    661a:	9e f5       	brtc	.+102    	; 0x6682 <__addsf3x+0x7c>
    661c:	67 c1       	rjmp	.+718    	; 0x68ec <__fp_zero>
    661e:	0e f4       	brtc	.+2      	; 0x6622 <__addsf3x+0x1c>
    6620:	e0 95       	com	r30
    6622:	0b 2e       	mov	r0, r27
    6624:	ba 2f       	mov	r27, r26
    6626:	a0 2d       	mov	r26, r0
    6628:	0b 01       	movw	r0, r22
    662a:	b9 01       	movw	r22, r18
    662c:	90 01       	movw	r18, r0
    662e:	0c 01       	movw	r0, r24
    6630:	ca 01       	movw	r24, r20
    6632:	a0 01       	movw	r20, r0
    6634:	11 24       	eor	r1, r1
    6636:	ff 27       	eor	r31, r31
    6638:	59 1b       	sub	r21, r25
    663a:	99 f0       	breq	.+38     	; 0x6662 <__addsf3x+0x5c>
    663c:	59 3f       	cpi	r21, 0xF9	; 249
    663e:	50 f4       	brcc	.+20     	; 0x6654 <__addsf3x+0x4e>
    6640:	50 3e       	cpi	r21, 0xE0	; 224
    6642:	68 f1       	brcs	.+90     	; 0x669e <__addsf3x+0x98>
    6644:	1a 16       	cp	r1, r26
    6646:	f0 40       	sbci	r31, 0x00	; 0
    6648:	a2 2f       	mov	r26, r18
    664a:	23 2f       	mov	r18, r19
    664c:	34 2f       	mov	r19, r20
    664e:	44 27       	eor	r20, r20
    6650:	58 5f       	subi	r21, 0xF8	; 248
    6652:	f3 cf       	rjmp	.-26     	; 0x663a <__addsf3x+0x34>
    6654:	46 95       	lsr	r20
    6656:	37 95       	ror	r19
    6658:	27 95       	ror	r18
    665a:	a7 95       	ror	r26
    665c:	f0 40       	sbci	r31, 0x00	; 0
    665e:	53 95       	inc	r21
    6660:	c9 f7       	brne	.-14     	; 0x6654 <__addsf3x+0x4e>
    6662:	7e f4       	brtc	.+30     	; 0x6682 <__addsf3x+0x7c>
    6664:	1f 16       	cp	r1, r31
    6666:	ba 0b       	sbc	r27, r26
    6668:	62 0b       	sbc	r22, r18
    666a:	73 0b       	sbc	r23, r19
    666c:	84 0b       	sbc	r24, r20
    666e:	ba f0       	brmi	.+46     	; 0x669e <__addsf3x+0x98>
    6670:	91 50       	subi	r25, 0x01	; 1
    6672:	a1 f0       	breq	.+40     	; 0x669c <__addsf3x+0x96>
    6674:	ff 0f       	add	r31, r31
    6676:	bb 1f       	adc	r27, r27
    6678:	66 1f       	adc	r22, r22
    667a:	77 1f       	adc	r23, r23
    667c:	88 1f       	adc	r24, r24
    667e:	c2 f7       	brpl	.-16     	; 0x6670 <__addsf3x+0x6a>
    6680:	0e c0       	rjmp	.+28     	; 0x669e <__addsf3x+0x98>
    6682:	ba 0f       	add	r27, r26
    6684:	62 1f       	adc	r22, r18
    6686:	73 1f       	adc	r23, r19
    6688:	84 1f       	adc	r24, r20
    668a:	48 f4       	brcc	.+18     	; 0x669e <__addsf3x+0x98>
    668c:	87 95       	ror	r24
    668e:	77 95       	ror	r23
    6690:	67 95       	ror	r22
    6692:	b7 95       	ror	r27
    6694:	f7 95       	ror	r31
    6696:	9e 3f       	cpi	r25, 0xFE	; 254
    6698:	08 f0       	brcs	.+2      	; 0x669c <__addsf3x+0x96>
    669a:	b3 cf       	rjmp	.-154    	; 0x6602 <__addsf3+0x1e>
    669c:	93 95       	inc	r25
    669e:	88 0f       	add	r24, r24
    66a0:	08 f0       	brcs	.+2      	; 0x66a4 <__addsf3x+0x9e>
    66a2:	99 27       	eor	r25, r25
    66a4:	ee 0f       	add	r30, r30
    66a6:	97 95       	ror	r25
    66a8:	87 95       	ror	r24
    66aa:	08 95       	ret

000066ac <__divsf3>:
    66ac:	0c d0       	rcall	.+24     	; 0x66c6 <__divsf3x>
    66ae:	eb c0       	rjmp	.+470    	; 0x6886 <__fp_round>
    66b0:	e3 d0       	rcall	.+454    	; 0x6878 <__fp_pscB>
    66b2:	40 f0       	brcs	.+16     	; 0x66c4 <__divsf3+0x18>
    66b4:	da d0       	rcall	.+436    	; 0x686a <__fp_pscA>
    66b6:	30 f0       	brcs	.+12     	; 0x66c4 <__divsf3+0x18>
    66b8:	21 f4       	brne	.+8      	; 0x66c2 <__divsf3+0x16>
    66ba:	5f 3f       	cpi	r21, 0xFF	; 255
    66bc:	19 f0       	breq	.+6      	; 0x66c4 <__divsf3+0x18>
    66be:	cc c0       	rjmp	.+408    	; 0x6858 <__fp_inf>
    66c0:	51 11       	cpse	r21, r1
    66c2:	15 c1       	rjmp	.+554    	; 0x68ee <__fp_szero>
    66c4:	cf c0       	rjmp	.+414    	; 0x6864 <__fp_nan>

000066c6 <__divsf3x>:
    66c6:	f0 d0       	rcall	.+480    	; 0x68a8 <__fp_split3>
    66c8:	98 f3       	brcs	.-26     	; 0x66b0 <__divsf3+0x4>

000066ca <__divsf3_pse>:
    66ca:	99 23       	and	r25, r25
    66cc:	c9 f3       	breq	.-14     	; 0x66c0 <__divsf3+0x14>
    66ce:	55 23       	and	r21, r21
    66d0:	b1 f3       	breq	.-20     	; 0x66be <__divsf3+0x12>
    66d2:	95 1b       	sub	r25, r21
    66d4:	55 0b       	sbc	r21, r21
    66d6:	bb 27       	eor	r27, r27
    66d8:	aa 27       	eor	r26, r26
    66da:	62 17       	cp	r22, r18
    66dc:	73 07       	cpc	r23, r19
    66de:	84 07       	cpc	r24, r20
    66e0:	38 f0       	brcs	.+14     	; 0x66f0 <__divsf3_pse+0x26>
    66e2:	9f 5f       	subi	r25, 0xFF	; 255
    66e4:	5f 4f       	sbci	r21, 0xFF	; 255
    66e6:	22 0f       	add	r18, r18
    66e8:	33 1f       	adc	r19, r19
    66ea:	44 1f       	adc	r20, r20
    66ec:	aa 1f       	adc	r26, r26
    66ee:	a9 f3       	breq	.-22     	; 0x66da <__divsf3_pse+0x10>
    66f0:	33 d0       	rcall	.+102    	; 0x6758 <__divsf3_pse+0x8e>
    66f2:	0e 2e       	mov	r0, r30
    66f4:	3a f0       	brmi	.+14     	; 0x6704 <__divsf3_pse+0x3a>
    66f6:	e0 e8       	ldi	r30, 0x80	; 128
    66f8:	30 d0       	rcall	.+96     	; 0x675a <__divsf3_pse+0x90>
    66fa:	91 50       	subi	r25, 0x01	; 1
    66fc:	50 40       	sbci	r21, 0x00	; 0
    66fe:	e6 95       	lsr	r30
    6700:	00 1c       	adc	r0, r0
    6702:	ca f7       	brpl	.-14     	; 0x66f6 <__divsf3_pse+0x2c>
    6704:	29 d0       	rcall	.+82     	; 0x6758 <__divsf3_pse+0x8e>
    6706:	fe 2f       	mov	r31, r30
    6708:	27 d0       	rcall	.+78     	; 0x6758 <__divsf3_pse+0x8e>
    670a:	66 0f       	add	r22, r22
    670c:	77 1f       	adc	r23, r23
    670e:	88 1f       	adc	r24, r24
    6710:	bb 1f       	adc	r27, r27
    6712:	26 17       	cp	r18, r22
    6714:	37 07       	cpc	r19, r23
    6716:	48 07       	cpc	r20, r24
    6718:	ab 07       	cpc	r26, r27
    671a:	b0 e8       	ldi	r27, 0x80	; 128
    671c:	09 f0       	breq	.+2      	; 0x6720 <__divsf3_pse+0x56>
    671e:	bb 0b       	sbc	r27, r27
    6720:	80 2d       	mov	r24, r0
    6722:	bf 01       	movw	r22, r30
    6724:	ff 27       	eor	r31, r31
    6726:	93 58       	subi	r25, 0x83	; 131
    6728:	5f 4f       	sbci	r21, 0xFF	; 255
    672a:	2a f0       	brmi	.+10     	; 0x6736 <__divsf3_pse+0x6c>
    672c:	9e 3f       	cpi	r25, 0xFE	; 254
    672e:	51 05       	cpc	r21, r1
    6730:	68 f0       	brcs	.+26     	; 0x674c <__divsf3_pse+0x82>
    6732:	92 c0       	rjmp	.+292    	; 0x6858 <__fp_inf>
    6734:	dc c0       	rjmp	.+440    	; 0x68ee <__fp_szero>
    6736:	5f 3f       	cpi	r21, 0xFF	; 255
    6738:	ec f3       	brlt	.-6      	; 0x6734 <__divsf3_pse+0x6a>
    673a:	98 3e       	cpi	r25, 0xE8	; 232
    673c:	dc f3       	brlt	.-10     	; 0x6734 <__divsf3_pse+0x6a>
    673e:	86 95       	lsr	r24
    6740:	77 95       	ror	r23
    6742:	67 95       	ror	r22
    6744:	b7 95       	ror	r27
    6746:	f7 95       	ror	r31
    6748:	9f 5f       	subi	r25, 0xFF	; 255
    674a:	c9 f7       	brne	.-14     	; 0x673e <__divsf3_pse+0x74>
    674c:	88 0f       	add	r24, r24
    674e:	91 1d       	adc	r25, r1
    6750:	96 95       	lsr	r25
    6752:	87 95       	ror	r24
    6754:	97 f9       	bld	r25, 7
    6756:	08 95       	ret
    6758:	e1 e0       	ldi	r30, 0x01	; 1
    675a:	66 0f       	add	r22, r22
    675c:	77 1f       	adc	r23, r23
    675e:	88 1f       	adc	r24, r24
    6760:	bb 1f       	adc	r27, r27
    6762:	62 17       	cp	r22, r18
    6764:	73 07       	cpc	r23, r19
    6766:	84 07       	cpc	r24, r20
    6768:	ba 07       	cpc	r27, r26
    676a:	20 f0       	brcs	.+8      	; 0x6774 <__divsf3_pse+0xaa>
    676c:	62 1b       	sub	r22, r18
    676e:	73 0b       	sbc	r23, r19
    6770:	84 0b       	sbc	r24, r20
    6772:	ba 0b       	sbc	r27, r26
    6774:	ee 1f       	adc	r30, r30
    6776:	88 f7       	brcc	.-30     	; 0x675a <__divsf3_pse+0x90>
    6778:	e0 95       	com	r30
    677a:	08 95       	ret

0000677c <__fixsfsi>:
    677c:	04 d0       	rcall	.+8      	; 0x6786 <__fixunssfsi>
    677e:	68 94       	set
    6780:	b1 11       	cpse	r27, r1
    6782:	b5 c0       	rjmp	.+362    	; 0x68ee <__fp_szero>
    6784:	08 95       	ret

00006786 <__fixunssfsi>:
    6786:	98 d0       	rcall	.+304    	; 0x68b8 <__fp_splitA>
    6788:	88 f0       	brcs	.+34     	; 0x67ac <__fixunssfsi+0x26>
    678a:	9f 57       	subi	r25, 0x7F	; 127
    678c:	90 f0       	brcs	.+36     	; 0x67b2 <__fixunssfsi+0x2c>
    678e:	b9 2f       	mov	r27, r25
    6790:	99 27       	eor	r25, r25
    6792:	b7 51       	subi	r27, 0x17	; 23
    6794:	a0 f0       	brcs	.+40     	; 0x67be <__fixunssfsi+0x38>
    6796:	d1 f0       	breq	.+52     	; 0x67cc <__fixunssfsi+0x46>
    6798:	66 0f       	add	r22, r22
    679a:	77 1f       	adc	r23, r23
    679c:	88 1f       	adc	r24, r24
    679e:	99 1f       	adc	r25, r25
    67a0:	1a f0       	brmi	.+6      	; 0x67a8 <__fixunssfsi+0x22>
    67a2:	ba 95       	dec	r27
    67a4:	c9 f7       	brne	.-14     	; 0x6798 <__fixunssfsi+0x12>
    67a6:	12 c0       	rjmp	.+36     	; 0x67cc <__fixunssfsi+0x46>
    67a8:	b1 30       	cpi	r27, 0x01	; 1
    67aa:	81 f0       	breq	.+32     	; 0x67cc <__fixunssfsi+0x46>
    67ac:	9f d0       	rcall	.+318    	; 0x68ec <__fp_zero>
    67ae:	b1 e0       	ldi	r27, 0x01	; 1
    67b0:	08 95       	ret
    67b2:	9c c0       	rjmp	.+312    	; 0x68ec <__fp_zero>
    67b4:	67 2f       	mov	r22, r23
    67b6:	78 2f       	mov	r23, r24
    67b8:	88 27       	eor	r24, r24
    67ba:	b8 5f       	subi	r27, 0xF8	; 248
    67bc:	39 f0       	breq	.+14     	; 0x67cc <__fixunssfsi+0x46>
    67be:	b9 3f       	cpi	r27, 0xF9	; 249
    67c0:	cc f3       	brlt	.-14     	; 0x67b4 <__fixunssfsi+0x2e>
    67c2:	86 95       	lsr	r24
    67c4:	77 95       	ror	r23
    67c6:	67 95       	ror	r22
    67c8:	b3 95       	inc	r27
    67ca:	d9 f7       	brne	.-10     	; 0x67c2 <__fixunssfsi+0x3c>
    67cc:	3e f4       	brtc	.+14     	; 0x67dc <__fixunssfsi+0x56>
    67ce:	90 95       	com	r25
    67d0:	80 95       	com	r24
    67d2:	70 95       	com	r23
    67d4:	61 95       	neg	r22
    67d6:	7f 4f       	sbci	r23, 0xFF	; 255
    67d8:	8f 4f       	sbci	r24, 0xFF	; 255
    67da:	9f 4f       	sbci	r25, 0xFF	; 255
    67dc:	08 95       	ret

000067de <__floatunsisf>:
    67de:	e8 94       	clt
    67e0:	09 c0       	rjmp	.+18     	; 0x67f4 <__floatsisf+0x12>

000067e2 <__floatsisf>:
    67e2:	97 fb       	bst	r25, 7
    67e4:	3e f4       	brtc	.+14     	; 0x67f4 <__floatsisf+0x12>
    67e6:	90 95       	com	r25
    67e8:	80 95       	com	r24
    67ea:	70 95       	com	r23
    67ec:	61 95       	neg	r22
    67ee:	7f 4f       	sbci	r23, 0xFF	; 255
    67f0:	8f 4f       	sbci	r24, 0xFF	; 255
    67f2:	9f 4f       	sbci	r25, 0xFF	; 255
    67f4:	99 23       	and	r25, r25
    67f6:	a9 f0       	breq	.+42     	; 0x6822 <__floatsisf+0x40>
    67f8:	f9 2f       	mov	r31, r25
    67fa:	96 e9       	ldi	r25, 0x96	; 150
    67fc:	bb 27       	eor	r27, r27
    67fe:	93 95       	inc	r25
    6800:	f6 95       	lsr	r31
    6802:	87 95       	ror	r24
    6804:	77 95       	ror	r23
    6806:	67 95       	ror	r22
    6808:	b7 95       	ror	r27
    680a:	f1 11       	cpse	r31, r1
    680c:	f8 cf       	rjmp	.-16     	; 0x67fe <__floatsisf+0x1c>
    680e:	fa f4       	brpl	.+62     	; 0x684e <__floatsisf+0x6c>
    6810:	bb 0f       	add	r27, r27
    6812:	11 f4       	brne	.+4      	; 0x6818 <__floatsisf+0x36>
    6814:	60 ff       	sbrs	r22, 0
    6816:	1b c0       	rjmp	.+54     	; 0x684e <__floatsisf+0x6c>
    6818:	6f 5f       	subi	r22, 0xFF	; 255
    681a:	7f 4f       	sbci	r23, 0xFF	; 255
    681c:	8f 4f       	sbci	r24, 0xFF	; 255
    681e:	9f 4f       	sbci	r25, 0xFF	; 255
    6820:	16 c0       	rjmp	.+44     	; 0x684e <__floatsisf+0x6c>
    6822:	88 23       	and	r24, r24
    6824:	11 f0       	breq	.+4      	; 0x682a <__floatsisf+0x48>
    6826:	96 e9       	ldi	r25, 0x96	; 150
    6828:	11 c0       	rjmp	.+34     	; 0x684c <__floatsisf+0x6a>
    682a:	77 23       	and	r23, r23
    682c:	21 f0       	breq	.+8      	; 0x6836 <__floatsisf+0x54>
    682e:	9e e8       	ldi	r25, 0x8E	; 142
    6830:	87 2f       	mov	r24, r23
    6832:	76 2f       	mov	r23, r22
    6834:	05 c0       	rjmp	.+10     	; 0x6840 <__floatsisf+0x5e>
    6836:	66 23       	and	r22, r22
    6838:	71 f0       	breq	.+28     	; 0x6856 <__floatsisf+0x74>
    683a:	96 e8       	ldi	r25, 0x86	; 134
    683c:	86 2f       	mov	r24, r22
    683e:	70 e0       	ldi	r23, 0x00	; 0
    6840:	60 e0       	ldi	r22, 0x00	; 0
    6842:	2a f0       	brmi	.+10     	; 0x684e <__floatsisf+0x6c>
    6844:	9a 95       	dec	r25
    6846:	66 0f       	add	r22, r22
    6848:	77 1f       	adc	r23, r23
    684a:	88 1f       	adc	r24, r24
    684c:	da f7       	brpl	.-10     	; 0x6844 <__floatsisf+0x62>
    684e:	88 0f       	add	r24, r24
    6850:	96 95       	lsr	r25
    6852:	87 95       	ror	r24
    6854:	97 f9       	bld	r25, 7
    6856:	08 95       	ret

00006858 <__fp_inf>:
    6858:	97 f9       	bld	r25, 7
    685a:	9f 67       	ori	r25, 0x7F	; 127
    685c:	80 e8       	ldi	r24, 0x80	; 128
    685e:	70 e0       	ldi	r23, 0x00	; 0
    6860:	60 e0       	ldi	r22, 0x00	; 0
    6862:	08 95       	ret

00006864 <__fp_nan>:
    6864:	9f ef       	ldi	r25, 0xFF	; 255
    6866:	80 ec       	ldi	r24, 0xC0	; 192
    6868:	08 95       	ret

0000686a <__fp_pscA>:
    686a:	00 24       	eor	r0, r0
    686c:	0a 94       	dec	r0
    686e:	16 16       	cp	r1, r22
    6870:	17 06       	cpc	r1, r23
    6872:	18 06       	cpc	r1, r24
    6874:	09 06       	cpc	r0, r25
    6876:	08 95       	ret

00006878 <__fp_pscB>:
    6878:	00 24       	eor	r0, r0
    687a:	0a 94       	dec	r0
    687c:	12 16       	cp	r1, r18
    687e:	13 06       	cpc	r1, r19
    6880:	14 06       	cpc	r1, r20
    6882:	05 06       	cpc	r0, r21
    6884:	08 95       	ret

00006886 <__fp_round>:
    6886:	09 2e       	mov	r0, r25
    6888:	03 94       	inc	r0
    688a:	00 0c       	add	r0, r0
    688c:	11 f4       	brne	.+4      	; 0x6892 <__fp_round+0xc>
    688e:	88 23       	and	r24, r24
    6890:	52 f0       	brmi	.+20     	; 0x68a6 <__fp_round+0x20>
    6892:	bb 0f       	add	r27, r27
    6894:	40 f4       	brcc	.+16     	; 0x68a6 <__fp_round+0x20>
    6896:	bf 2b       	or	r27, r31
    6898:	11 f4       	brne	.+4      	; 0x689e <__fp_round+0x18>
    689a:	60 ff       	sbrs	r22, 0
    689c:	04 c0       	rjmp	.+8      	; 0x68a6 <__fp_round+0x20>
    689e:	6f 5f       	subi	r22, 0xFF	; 255
    68a0:	7f 4f       	sbci	r23, 0xFF	; 255
    68a2:	8f 4f       	sbci	r24, 0xFF	; 255
    68a4:	9f 4f       	sbci	r25, 0xFF	; 255
    68a6:	08 95       	ret

000068a8 <__fp_split3>:
    68a8:	57 fd       	sbrc	r21, 7
    68aa:	90 58       	subi	r25, 0x80	; 128
    68ac:	44 0f       	add	r20, r20
    68ae:	55 1f       	adc	r21, r21
    68b0:	59 f0       	breq	.+22     	; 0x68c8 <__fp_splitA+0x10>
    68b2:	5f 3f       	cpi	r21, 0xFF	; 255
    68b4:	71 f0       	breq	.+28     	; 0x68d2 <__fp_splitA+0x1a>
    68b6:	47 95       	ror	r20

000068b8 <__fp_splitA>:
    68b8:	88 0f       	add	r24, r24
    68ba:	97 fb       	bst	r25, 7
    68bc:	99 1f       	adc	r25, r25
    68be:	61 f0       	breq	.+24     	; 0x68d8 <__fp_splitA+0x20>
    68c0:	9f 3f       	cpi	r25, 0xFF	; 255
    68c2:	79 f0       	breq	.+30     	; 0x68e2 <__fp_splitA+0x2a>
    68c4:	87 95       	ror	r24
    68c6:	08 95       	ret
    68c8:	12 16       	cp	r1, r18
    68ca:	13 06       	cpc	r1, r19
    68cc:	14 06       	cpc	r1, r20
    68ce:	55 1f       	adc	r21, r21
    68d0:	f2 cf       	rjmp	.-28     	; 0x68b6 <__fp_split3+0xe>
    68d2:	46 95       	lsr	r20
    68d4:	f1 df       	rcall	.-30     	; 0x68b8 <__fp_splitA>
    68d6:	08 c0       	rjmp	.+16     	; 0x68e8 <__fp_splitA+0x30>
    68d8:	16 16       	cp	r1, r22
    68da:	17 06       	cpc	r1, r23
    68dc:	18 06       	cpc	r1, r24
    68de:	99 1f       	adc	r25, r25
    68e0:	f1 cf       	rjmp	.-30     	; 0x68c4 <__fp_splitA+0xc>
    68e2:	86 95       	lsr	r24
    68e4:	71 05       	cpc	r23, r1
    68e6:	61 05       	cpc	r22, r1
    68e8:	08 94       	sec
    68ea:	08 95       	ret

000068ec <__fp_zero>:
    68ec:	e8 94       	clt

000068ee <__fp_szero>:
    68ee:	bb 27       	eor	r27, r27
    68f0:	66 27       	eor	r22, r22
    68f2:	77 27       	eor	r23, r23
    68f4:	cb 01       	movw	r24, r22
    68f6:	97 f9       	bld	r25, 7
    68f8:	08 95       	ret

000068fa <__mulsf3>:
    68fa:	0b d0       	rcall	.+22     	; 0x6912 <__mulsf3x>
    68fc:	c4 cf       	rjmp	.-120    	; 0x6886 <__fp_round>
    68fe:	b5 df       	rcall	.-150    	; 0x686a <__fp_pscA>
    6900:	28 f0       	brcs	.+10     	; 0x690c <__mulsf3+0x12>
    6902:	ba df       	rcall	.-140    	; 0x6878 <__fp_pscB>
    6904:	18 f0       	brcs	.+6      	; 0x690c <__mulsf3+0x12>
    6906:	95 23       	and	r25, r21
    6908:	09 f0       	breq	.+2      	; 0x690c <__mulsf3+0x12>
    690a:	a6 cf       	rjmp	.-180    	; 0x6858 <__fp_inf>
    690c:	ab cf       	rjmp	.-170    	; 0x6864 <__fp_nan>
    690e:	11 24       	eor	r1, r1
    6910:	ee cf       	rjmp	.-36     	; 0x68ee <__fp_szero>

00006912 <__mulsf3x>:
    6912:	ca df       	rcall	.-108    	; 0x68a8 <__fp_split3>
    6914:	a0 f3       	brcs	.-24     	; 0x68fe <__mulsf3+0x4>

00006916 <__mulsf3_pse>:
    6916:	95 9f       	mul	r25, r21
    6918:	d1 f3       	breq	.-12     	; 0x690e <__mulsf3+0x14>
    691a:	95 0f       	add	r25, r21
    691c:	50 e0       	ldi	r21, 0x00	; 0
    691e:	55 1f       	adc	r21, r21
    6920:	62 9f       	mul	r22, r18
    6922:	f0 01       	movw	r30, r0
    6924:	72 9f       	mul	r23, r18
    6926:	bb 27       	eor	r27, r27
    6928:	f0 0d       	add	r31, r0
    692a:	b1 1d       	adc	r27, r1
    692c:	63 9f       	mul	r22, r19
    692e:	aa 27       	eor	r26, r26
    6930:	f0 0d       	add	r31, r0
    6932:	b1 1d       	adc	r27, r1
    6934:	aa 1f       	adc	r26, r26
    6936:	64 9f       	mul	r22, r20
    6938:	66 27       	eor	r22, r22
    693a:	b0 0d       	add	r27, r0
    693c:	a1 1d       	adc	r26, r1
    693e:	66 1f       	adc	r22, r22
    6940:	82 9f       	mul	r24, r18
    6942:	22 27       	eor	r18, r18
    6944:	b0 0d       	add	r27, r0
    6946:	a1 1d       	adc	r26, r1
    6948:	62 1f       	adc	r22, r18
    694a:	73 9f       	mul	r23, r19
    694c:	b0 0d       	add	r27, r0
    694e:	a1 1d       	adc	r26, r1
    6950:	62 1f       	adc	r22, r18
    6952:	83 9f       	mul	r24, r19
    6954:	a0 0d       	add	r26, r0
    6956:	61 1d       	adc	r22, r1
    6958:	22 1f       	adc	r18, r18
    695a:	74 9f       	mul	r23, r20
    695c:	33 27       	eor	r19, r19
    695e:	a0 0d       	add	r26, r0
    6960:	61 1d       	adc	r22, r1
    6962:	23 1f       	adc	r18, r19
    6964:	84 9f       	mul	r24, r20
    6966:	60 0d       	add	r22, r0
    6968:	21 1d       	adc	r18, r1
    696a:	82 2f       	mov	r24, r18
    696c:	76 2f       	mov	r23, r22
    696e:	6a 2f       	mov	r22, r26
    6970:	11 24       	eor	r1, r1
    6972:	9f 57       	subi	r25, 0x7F	; 127
    6974:	50 40       	sbci	r21, 0x00	; 0
    6976:	8a f0       	brmi	.+34     	; 0x699a <__mulsf3_pse+0x84>
    6978:	e1 f0       	breq	.+56     	; 0x69b2 <__mulsf3_pse+0x9c>
    697a:	88 23       	and	r24, r24
    697c:	4a f0       	brmi	.+18     	; 0x6990 <__mulsf3_pse+0x7a>
    697e:	ee 0f       	add	r30, r30
    6980:	ff 1f       	adc	r31, r31
    6982:	bb 1f       	adc	r27, r27
    6984:	66 1f       	adc	r22, r22
    6986:	77 1f       	adc	r23, r23
    6988:	88 1f       	adc	r24, r24
    698a:	91 50       	subi	r25, 0x01	; 1
    698c:	50 40       	sbci	r21, 0x00	; 0
    698e:	a9 f7       	brne	.-22     	; 0x697a <__mulsf3_pse+0x64>
    6990:	9e 3f       	cpi	r25, 0xFE	; 254
    6992:	51 05       	cpc	r21, r1
    6994:	70 f0       	brcs	.+28     	; 0x69b2 <__mulsf3_pse+0x9c>
    6996:	60 cf       	rjmp	.-320    	; 0x6858 <__fp_inf>
    6998:	aa cf       	rjmp	.-172    	; 0x68ee <__fp_szero>
    699a:	5f 3f       	cpi	r21, 0xFF	; 255
    699c:	ec f3       	brlt	.-6      	; 0x6998 <__mulsf3_pse+0x82>
    699e:	98 3e       	cpi	r25, 0xE8	; 232
    69a0:	dc f3       	brlt	.-10     	; 0x6998 <__mulsf3_pse+0x82>
    69a2:	86 95       	lsr	r24
    69a4:	77 95       	ror	r23
    69a6:	67 95       	ror	r22
    69a8:	b7 95       	ror	r27
    69aa:	f7 95       	ror	r31
    69ac:	e7 95       	ror	r30
    69ae:	9f 5f       	subi	r25, 0xFF	; 255
    69b0:	c1 f7       	brne	.-16     	; 0x69a2 <__mulsf3_pse+0x8c>
    69b2:	fe 2b       	or	r31, r30
    69b4:	88 0f       	add	r24, r24
    69b6:	91 1d       	adc	r25, r1
    69b8:	96 95       	lsr	r25
    69ba:	87 95       	ror	r24
    69bc:	97 f9       	bld	r25, 7
    69be:	08 95       	ret

000069c0 <__divmodhi4>:
    69c0:	97 fb       	bst	r25, 7
    69c2:	07 2e       	mov	r0, r23
    69c4:	16 f4       	brtc	.+4      	; 0x69ca <__divmodhi4+0xa>
    69c6:	00 94       	com	r0
    69c8:	06 d0       	rcall	.+12     	; 0x69d6 <__divmodhi4_neg1>
    69ca:	77 fd       	sbrc	r23, 7
    69cc:	08 d0       	rcall	.+16     	; 0x69de <__divmodhi4_neg2>
    69ce:	44 d0       	rcall	.+136    	; 0x6a58 <__udivmodhi4>
    69d0:	07 fc       	sbrc	r0, 7
    69d2:	05 d0       	rcall	.+10     	; 0x69de <__divmodhi4_neg2>
    69d4:	3e f4       	brtc	.+14     	; 0x69e4 <__divmodhi4_exit>

000069d6 <__divmodhi4_neg1>:
    69d6:	90 95       	com	r25
    69d8:	81 95       	neg	r24
    69da:	9f 4f       	sbci	r25, 0xFF	; 255
    69dc:	08 95       	ret

000069de <__divmodhi4_neg2>:
    69de:	70 95       	com	r23
    69e0:	61 95       	neg	r22
    69e2:	7f 4f       	sbci	r23, 0xFF	; 255

000069e4 <__divmodhi4_exit>:
    69e4:	08 95       	ret

000069e6 <__udivmodsi4>:
    69e6:	a1 e2       	ldi	r26, 0x21	; 33
    69e8:	1a 2e       	mov	r1, r26
    69ea:	aa 1b       	sub	r26, r26
    69ec:	bb 1b       	sub	r27, r27
    69ee:	fd 01       	movw	r30, r26
    69f0:	0d c0       	rjmp	.+26     	; 0x6a0c <__udivmodsi4_ep>

000069f2 <__udivmodsi4_loop>:
    69f2:	aa 1f       	adc	r26, r26
    69f4:	bb 1f       	adc	r27, r27
    69f6:	ee 1f       	adc	r30, r30
    69f8:	ff 1f       	adc	r31, r31
    69fa:	a2 17       	cp	r26, r18
    69fc:	b3 07       	cpc	r27, r19
    69fe:	e4 07       	cpc	r30, r20
    6a00:	f5 07       	cpc	r31, r21
    6a02:	20 f0       	brcs	.+8      	; 0x6a0c <__udivmodsi4_ep>
    6a04:	a2 1b       	sub	r26, r18
    6a06:	b3 0b       	sbc	r27, r19
    6a08:	e4 0b       	sbc	r30, r20
    6a0a:	f5 0b       	sbc	r31, r21

00006a0c <__udivmodsi4_ep>:
    6a0c:	66 1f       	adc	r22, r22
    6a0e:	77 1f       	adc	r23, r23
    6a10:	88 1f       	adc	r24, r24
    6a12:	99 1f       	adc	r25, r25
    6a14:	1a 94       	dec	r1
    6a16:	69 f7       	brne	.-38     	; 0x69f2 <__udivmodsi4_loop>
    6a18:	60 95       	com	r22
    6a1a:	70 95       	com	r23
    6a1c:	80 95       	com	r24
    6a1e:	90 95       	com	r25
    6a20:	9b 01       	movw	r18, r22
    6a22:	ac 01       	movw	r20, r24
    6a24:	bd 01       	movw	r22, r26
    6a26:	cf 01       	movw	r24, r30
    6a28:	08 95       	ret

00006a2a <__tablejump2__>:
    6a2a:	ee 0f       	add	r30, r30
    6a2c:	ff 1f       	adc	r31, r31
    6a2e:	88 1f       	adc	r24, r24
    6a30:	8b bf       	out	0x3b, r24	; 59
    6a32:	07 90       	elpm	r0, Z+
    6a34:	f6 91       	elpm	r31, Z
    6a36:	e0 2d       	mov	r30, r0
    6a38:	19 94       	eijmp

00006a3a <__umulhisi3>:
    6a3a:	a2 9f       	mul	r26, r18
    6a3c:	b0 01       	movw	r22, r0
    6a3e:	b3 9f       	mul	r27, r19
    6a40:	c0 01       	movw	r24, r0
    6a42:	a3 9f       	mul	r26, r19
    6a44:	70 0d       	add	r23, r0
    6a46:	81 1d       	adc	r24, r1
    6a48:	11 24       	eor	r1, r1
    6a4a:	91 1d       	adc	r25, r1
    6a4c:	b2 9f       	mul	r27, r18
    6a4e:	70 0d       	add	r23, r0
    6a50:	81 1d       	adc	r24, r1
    6a52:	11 24       	eor	r1, r1
    6a54:	91 1d       	adc	r25, r1
    6a56:	08 95       	ret

00006a58 <__udivmodhi4>:
    6a58:	aa 1b       	sub	r26, r26
    6a5a:	bb 1b       	sub	r27, r27
    6a5c:	51 e1       	ldi	r21, 0x11	; 17
    6a5e:	07 c0       	rjmp	.+14     	; 0x6a6e <__udivmodhi4_ep>

00006a60 <__udivmodhi4_loop>:
    6a60:	aa 1f       	adc	r26, r26
    6a62:	bb 1f       	adc	r27, r27
    6a64:	a6 17       	cp	r26, r22
    6a66:	b7 07       	cpc	r27, r23
    6a68:	10 f0       	brcs	.+4      	; 0x6a6e <__udivmodhi4_ep>
    6a6a:	a6 1b       	sub	r26, r22
    6a6c:	b7 0b       	sbc	r27, r23

00006a6e <__udivmodhi4_ep>:
    6a6e:	88 1f       	adc	r24, r24
    6a70:	99 1f       	adc	r25, r25
    6a72:	5a 95       	dec	r21
    6a74:	a9 f7       	brne	.-22     	; 0x6a60 <__udivmodhi4_loop>
    6a76:	80 95       	com	r24
    6a78:	90 95       	com	r25
    6a7a:	bc 01       	movw	r22, r24
    6a7c:	cd 01       	movw	r24, r26
    6a7e:	08 95       	ret

00006a80 <malloc>:
    6a80:	0f 93       	push	r16
    6a82:	1f 93       	push	r17
    6a84:	cf 93       	push	r28
    6a86:	df 93       	push	r29
    6a88:	82 30       	cpi	r24, 0x02	; 2
    6a8a:	91 05       	cpc	r25, r1
    6a8c:	10 f4       	brcc	.+4      	; 0x6a92 <malloc+0x12>
    6a8e:	82 e0       	ldi	r24, 0x02	; 2
    6a90:	90 e0       	ldi	r25, 0x00	; 0
    6a92:	e0 91 4f 19 	lds	r30, 0x194F	; 0x80194f <__flp>
    6a96:	f0 91 50 19 	lds	r31, 0x1950	; 0x801950 <__flp+0x1>
    6a9a:	20 e0       	ldi	r18, 0x00	; 0
    6a9c:	30 e0       	ldi	r19, 0x00	; 0
    6a9e:	a0 e0       	ldi	r26, 0x00	; 0
    6aa0:	b0 e0       	ldi	r27, 0x00	; 0
    6aa2:	30 97       	sbiw	r30, 0x00	; 0
    6aa4:	19 f1       	breq	.+70     	; 0x6aec <malloc+0x6c>
    6aa6:	40 81       	ld	r20, Z
    6aa8:	51 81       	ldd	r21, Z+1	; 0x01
    6aaa:	02 81       	ldd	r16, Z+2	; 0x02
    6aac:	13 81       	ldd	r17, Z+3	; 0x03
    6aae:	48 17       	cp	r20, r24
    6ab0:	59 07       	cpc	r21, r25
    6ab2:	c8 f0       	brcs	.+50     	; 0x6ae6 <malloc+0x66>
    6ab4:	84 17       	cp	r24, r20
    6ab6:	95 07       	cpc	r25, r21
    6ab8:	69 f4       	brne	.+26     	; 0x6ad4 <malloc+0x54>
    6aba:	10 97       	sbiw	r26, 0x00	; 0
    6abc:	31 f0       	breq	.+12     	; 0x6aca <malloc+0x4a>
    6abe:	12 96       	adiw	r26, 0x02	; 2
    6ac0:	0c 93       	st	X, r16
    6ac2:	12 97       	sbiw	r26, 0x02	; 2
    6ac4:	13 96       	adiw	r26, 0x03	; 3
    6ac6:	1c 93       	st	X, r17
    6ac8:	27 c0       	rjmp	.+78     	; 0x6b18 <malloc+0x98>
    6aca:	00 93 4f 19 	sts	0x194F, r16	; 0x80194f <__flp>
    6ace:	10 93 50 19 	sts	0x1950, r17	; 0x801950 <__flp+0x1>
    6ad2:	22 c0       	rjmp	.+68     	; 0x6b18 <malloc+0x98>
    6ad4:	21 15       	cp	r18, r1
    6ad6:	31 05       	cpc	r19, r1
    6ad8:	19 f0       	breq	.+6      	; 0x6ae0 <malloc+0x60>
    6ada:	42 17       	cp	r20, r18
    6adc:	53 07       	cpc	r21, r19
    6ade:	18 f4       	brcc	.+6      	; 0x6ae6 <malloc+0x66>
    6ae0:	9a 01       	movw	r18, r20
    6ae2:	bd 01       	movw	r22, r26
    6ae4:	ef 01       	movw	r28, r30
    6ae6:	df 01       	movw	r26, r30
    6ae8:	f8 01       	movw	r30, r16
    6aea:	db cf       	rjmp	.-74     	; 0x6aa2 <malloc+0x22>
    6aec:	21 15       	cp	r18, r1
    6aee:	31 05       	cpc	r19, r1
    6af0:	f9 f0       	breq	.+62     	; 0x6b30 <malloc+0xb0>
    6af2:	28 1b       	sub	r18, r24
    6af4:	39 0b       	sbc	r19, r25
    6af6:	24 30       	cpi	r18, 0x04	; 4
    6af8:	31 05       	cpc	r19, r1
    6afa:	80 f4       	brcc	.+32     	; 0x6b1c <malloc+0x9c>
    6afc:	8a 81       	ldd	r24, Y+2	; 0x02
    6afe:	9b 81       	ldd	r25, Y+3	; 0x03
    6b00:	61 15       	cp	r22, r1
    6b02:	71 05       	cpc	r23, r1
    6b04:	21 f0       	breq	.+8      	; 0x6b0e <malloc+0x8e>
    6b06:	fb 01       	movw	r30, r22
    6b08:	93 83       	std	Z+3, r25	; 0x03
    6b0a:	82 83       	std	Z+2, r24	; 0x02
    6b0c:	04 c0       	rjmp	.+8      	; 0x6b16 <malloc+0x96>
    6b0e:	90 93 50 19 	sts	0x1950, r25	; 0x801950 <__flp+0x1>
    6b12:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <__flp>
    6b16:	fe 01       	movw	r30, r28
    6b18:	32 96       	adiw	r30, 0x02	; 2
    6b1a:	44 c0       	rjmp	.+136    	; 0x6ba4 <malloc+0x124>
    6b1c:	fe 01       	movw	r30, r28
    6b1e:	e2 0f       	add	r30, r18
    6b20:	f3 1f       	adc	r31, r19
    6b22:	81 93       	st	Z+, r24
    6b24:	91 93       	st	Z+, r25
    6b26:	22 50       	subi	r18, 0x02	; 2
    6b28:	31 09       	sbc	r19, r1
    6b2a:	39 83       	std	Y+1, r19	; 0x01
    6b2c:	28 83       	st	Y, r18
    6b2e:	3a c0       	rjmp	.+116    	; 0x6ba4 <malloc+0x124>
    6b30:	20 91 4d 19 	lds	r18, 0x194D	; 0x80194d <__brkval>
    6b34:	30 91 4e 19 	lds	r19, 0x194E	; 0x80194e <__brkval+0x1>
    6b38:	23 2b       	or	r18, r19
    6b3a:	41 f4       	brne	.+16     	; 0x6b4c <malloc+0xcc>
    6b3c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6b40:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6b44:	30 93 4e 19 	sts	0x194E, r19	; 0x80194e <__brkval+0x1>
    6b48:	20 93 4d 19 	sts	0x194D, r18	; 0x80194d <__brkval>
    6b4c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6b50:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6b54:	21 15       	cp	r18, r1
    6b56:	31 05       	cpc	r19, r1
    6b58:	41 f4       	brne	.+16     	; 0x6b6a <malloc+0xea>
    6b5a:	2d b7       	in	r18, 0x3d	; 61
    6b5c:	3e b7       	in	r19, 0x3e	; 62
    6b5e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6b62:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6b66:	24 1b       	sub	r18, r20
    6b68:	35 0b       	sbc	r19, r21
    6b6a:	e0 91 4d 19 	lds	r30, 0x194D	; 0x80194d <__brkval>
    6b6e:	f0 91 4e 19 	lds	r31, 0x194E	; 0x80194e <__brkval+0x1>
    6b72:	e2 17       	cp	r30, r18
    6b74:	f3 07       	cpc	r31, r19
    6b76:	a0 f4       	brcc	.+40     	; 0x6ba0 <malloc+0x120>
    6b78:	2e 1b       	sub	r18, r30
    6b7a:	3f 0b       	sbc	r19, r31
    6b7c:	28 17       	cp	r18, r24
    6b7e:	39 07       	cpc	r19, r25
    6b80:	78 f0       	brcs	.+30     	; 0x6ba0 <malloc+0x120>
    6b82:	ac 01       	movw	r20, r24
    6b84:	4e 5f       	subi	r20, 0xFE	; 254
    6b86:	5f 4f       	sbci	r21, 0xFF	; 255
    6b88:	24 17       	cp	r18, r20
    6b8a:	35 07       	cpc	r19, r21
    6b8c:	48 f0       	brcs	.+18     	; 0x6ba0 <malloc+0x120>
    6b8e:	4e 0f       	add	r20, r30
    6b90:	5f 1f       	adc	r21, r31
    6b92:	50 93 4e 19 	sts	0x194E, r21	; 0x80194e <__brkval+0x1>
    6b96:	40 93 4d 19 	sts	0x194D, r20	; 0x80194d <__brkval>
    6b9a:	81 93       	st	Z+, r24
    6b9c:	91 93       	st	Z+, r25
    6b9e:	02 c0       	rjmp	.+4      	; 0x6ba4 <malloc+0x124>
    6ba0:	e0 e0       	ldi	r30, 0x00	; 0
    6ba2:	f0 e0       	ldi	r31, 0x00	; 0
    6ba4:	cf 01       	movw	r24, r30
    6ba6:	df 91       	pop	r29
    6ba8:	cf 91       	pop	r28
    6baa:	1f 91       	pop	r17
    6bac:	0f 91       	pop	r16
    6bae:	08 95       	ret

00006bb0 <free>:
    6bb0:	cf 93       	push	r28
    6bb2:	df 93       	push	r29
    6bb4:	00 97       	sbiw	r24, 0x00	; 0
    6bb6:	09 f4       	brne	.+2      	; 0x6bba <free+0xa>
    6bb8:	81 c0       	rjmp	.+258    	; 0x6cbc <free+0x10c>
    6bba:	fc 01       	movw	r30, r24
    6bbc:	32 97       	sbiw	r30, 0x02	; 2
    6bbe:	13 82       	std	Z+3, r1	; 0x03
    6bc0:	12 82       	std	Z+2, r1	; 0x02
    6bc2:	a0 91 4f 19 	lds	r26, 0x194F	; 0x80194f <__flp>
    6bc6:	b0 91 50 19 	lds	r27, 0x1950	; 0x801950 <__flp+0x1>
    6bca:	10 97       	sbiw	r26, 0x00	; 0
    6bcc:	81 f4       	brne	.+32     	; 0x6bee <free+0x3e>
    6bce:	20 81       	ld	r18, Z
    6bd0:	31 81       	ldd	r19, Z+1	; 0x01
    6bd2:	82 0f       	add	r24, r18
    6bd4:	93 1f       	adc	r25, r19
    6bd6:	20 91 4d 19 	lds	r18, 0x194D	; 0x80194d <__brkval>
    6bda:	30 91 4e 19 	lds	r19, 0x194E	; 0x80194e <__brkval+0x1>
    6bde:	28 17       	cp	r18, r24
    6be0:	39 07       	cpc	r19, r25
    6be2:	51 f5       	brne	.+84     	; 0x6c38 <free+0x88>
    6be4:	f0 93 4e 19 	sts	0x194E, r31	; 0x80194e <__brkval+0x1>
    6be8:	e0 93 4d 19 	sts	0x194D, r30	; 0x80194d <__brkval>
    6bec:	67 c0       	rjmp	.+206    	; 0x6cbc <free+0x10c>
    6bee:	ed 01       	movw	r28, r26
    6bf0:	20 e0       	ldi	r18, 0x00	; 0
    6bf2:	30 e0       	ldi	r19, 0x00	; 0
    6bf4:	ce 17       	cp	r28, r30
    6bf6:	df 07       	cpc	r29, r31
    6bf8:	40 f4       	brcc	.+16     	; 0x6c0a <free+0x5a>
    6bfa:	4a 81       	ldd	r20, Y+2	; 0x02
    6bfc:	5b 81       	ldd	r21, Y+3	; 0x03
    6bfe:	9e 01       	movw	r18, r28
    6c00:	41 15       	cp	r20, r1
    6c02:	51 05       	cpc	r21, r1
    6c04:	f1 f0       	breq	.+60     	; 0x6c42 <free+0x92>
    6c06:	ea 01       	movw	r28, r20
    6c08:	f5 cf       	rjmp	.-22     	; 0x6bf4 <free+0x44>
    6c0a:	d3 83       	std	Z+3, r29	; 0x03
    6c0c:	c2 83       	std	Z+2, r28	; 0x02
    6c0e:	40 81       	ld	r20, Z
    6c10:	51 81       	ldd	r21, Z+1	; 0x01
    6c12:	84 0f       	add	r24, r20
    6c14:	95 1f       	adc	r25, r21
    6c16:	c8 17       	cp	r28, r24
    6c18:	d9 07       	cpc	r29, r25
    6c1a:	59 f4       	brne	.+22     	; 0x6c32 <free+0x82>
    6c1c:	88 81       	ld	r24, Y
    6c1e:	99 81       	ldd	r25, Y+1	; 0x01
    6c20:	84 0f       	add	r24, r20
    6c22:	95 1f       	adc	r25, r21
    6c24:	02 96       	adiw	r24, 0x02	; 2
    6c26:	91 83       	std	Z+1, r25	; 0x01
    6c28:	80 83       	st	Z, r24
    6c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    6c2e:	93 83       	std	Z+3, r25	; 0x03
    6c30:	82 83       	std	Z+2, r24	; 0x02
    6c32:	21 15       	cp	r18, r1
    6c34:	31 05       	cpc	r19, r1
    6c36:	29 f4       	brne	.+10     	; 0x6c42 <free+0x92>
    6c38:	f0 93 50 19 	sts	0x1950, r31	; 0x801950 <__flp+0x1>
    6c3c:	e0 93 4f 19 	sts	0x194F, r30	; 0x80194f <__flp>
    6c40:	3d c0       	rjmp	.+122    	; 0x6cbc <free+0x10c>
    6c42:	e9 01       	movw	r28, r18
    6c44:	fb 83       	std	Y+3, r31	; 0x03
    6c46:	ea 83       	std	Y+2, r30	; 0x02
    6c48:	49 91       	ld	r20, Y+
    6c4a:	59 91       	ld	r21, Y+
    6c4c:	c4 0f       	add	r28, r20
    6c4e:	d5 1f       	adc	r29, r21
    6c50:	ec 17       	cp	r30, r28
    6c52:	fd 07       	cpc	r31, r29
    6c54:	61 f4       	brne	.+24     	; 0x6c6e <free+0xbe>
    6c56:	80 81       	ld	r24, Z
    6c58:	91 81       	ldd	r25, Z+1	; 0x01
    6c5a:	84 0f       	add	r24, r20
    6c5c:	95 1f       	adc	r25, r21
    6c5e:	02 96       	adiw	r24, 0x02	; 2
    6c60:	e9 01       	movw	r28, r18
    6c62:	99 83       	std	Y+1, r25	; 0x01
    6c64:	88 83       	st	Y, r24
    6c66:	82 81       	ldd	r24, Z+2	; 0x02
    6c68:	93 81       	ldd	r25, Z+3	; 0x03
    6c6a:	9b 83       	std	Y+3, r25	; 0x03
    6c6c:	8a 83       	std	Y+2, r24	; 0x02
    6c6e:	e0 e0       	ldi	r30, 0x00	; 0
    6c70:	f0 e0       	ldi	r31, 0x00	; 0
    6c72:	12 96       	adiw	r26, 0x02	; 2
    6c74:	8d 91       	ld	r24, X+
    6c76:	9c 91       	ld	r25, X
    6c78:	13 97       	sbiw	r26, 0x03	; 3
    6c7a:	00 97       	sbiw	r24, 0x00	; 0
    6c7c:	19 f0       	breq	.+6      	; 0x6c84 <free+0xd4>
    6c7e:	fd 01       	movw	r30, r26
    6c80:	dc 01       	movw	r26, r24
    6c82:	f7 cf       	rjmp	.-18     	; 0x6c72 <free+0xc2>
    6c84:	8d 91       	ld	r24, X+
    6c86:	9c 91       	ld	r25, X
    6c88:	11 97       	sbiw	r26, 0x01	; 1
    6c8a:	9d 01       	movw	r18, r26
    6c8c:	2e 5f       	subi	r18, 0xFE	; 254
    6c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c90:	82 0f       	add	r24, r18
    6c92:	93 1f       	adc	r25, r19
    6c94:	20 91 4d 19 	lds	r18, 0x194D	; 0x80194d <__brkval>
    6c98:	30 91 4e 19 	lds	r19, 0x194E	; 0x80194e <__brkval+0x1>
    6c9c:	28 17       	cp	r18, r24
    6c9e:	39 07       	cpc	r19, r25
    6ca0:	69 f4       	brne	.+26     	; 0x6cbc <free+0x10c>
    6ca2:	30 97       	sbiw	r30, 0x00	; 0
    6ca4:	29 f4       	brne	.+10     	; 0x6cb0 <free+0x100>
    6ca6:	10 92 50 19 	sts	0x1950, r1	; 0x801950 <__flp+0x1>
    6caa:	10 92 4f 19 	sts	0x194F, r1	; 0x80194f <__flp>
    6cae:	02 c0       	rjmp	.+4      	; 0x6cb4 <free+0x104>
    6cb0:	13 82       	std	Z+3, r1	; 0x03
    6cb2:	12 82       	std	Z+2, r1	; 0x02
    6cb4:	b0 93 4e 19 	sts	0x194E, r27	; 0x80194e <__brkval+0x1>
    6cb8:	a0 93 4d 19 	sts	0x194D, r26	; 0x80194d <__brkval>
    6cbc:	df 91       	pop	r29
    6cbe:	cf 91       	pop	r28
    6cc0:	08 95       	ret

00006cc2 <abort>:
    6cc2:	81 e0       	ldi	r24, 0x01	; 1
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	f8 94       	cli
    6cc8:	5a c2       	rjmp	.+1204   	; 0x717e <_exit>

00006cca <__ftoa_engine>:
    6cca:	28 30       	cpi	r18, 0x08	; 8
    6ccc:	08 f0       	brcs	.+2      	; 0x6cd0 <__ftoa_engine+0x6>
    6cce:	27 e0       	ldi	r18, 0x07	; 7
    6cd0:	33 27       	eor	r19, r19
    6cd2:	da 01       	movw	r26, r20
    6cd4:	99 0f       	add	r25, r25
    6cd6:	31 1d       	adc	r19, r1
    6cd8:	87 fd       	sbrc	r24, 7
    6cda:	91 60       	ori	r25, 0x01	; 1
    6cdc:	00 96       	adiw	r24, 0x00	; 0
    6cde:	61 05       	cpc	r22, r1
    6ce0:	71 05       	cpc	r23, r1
    6ce2:	39 f4       	brne	.+14     	; 0x6cf2 <__ftoa_engine+0x28>
    6ce4:	32 60       	ori	r19, 0x02	; 2
    6ce6:	2e 5f       	subi	r18, 0xFE	; 254
    6ce8:	3d 93       	st	X+, r19
    6cea:	30 e3       	ldi	r19, 0x30	; 48
    6cec:	2a 95       	dec	r18
    6cee:	e1 f7       	brne	.-8      	; 0x6ce8 <__ftoa_engine+0x1e>
    6cf0:	08 95       	ret
    6cf2:	9f 3f       	cpi	r25, 0xFF	; 255
    6cf4:	30 f0       	brcs	.+12     	; 0x6d02 <__ftoa_engine+0x38>
    6cf6:	80 38       	cpi	r24, 0x80	; 128
    6cf8:	71 05       	cpc	r23, r1
    6cfa:	61 05       	cpc	r22, r1
    6cfc:	09 f0       	breq	.+2      	; 0x6d00 <__ftoa_engine+0x36>
    6cfe:	3c 5f       	subi	r19, 0xFC	; 252
    6d00:	3c 5f       	subi	r19, 0xFC	; 252
    6d02:	3d 93       	st	X+, r19
    6d04:	91 30       	cpi	r25, 0x01	; 1
    6d06:	08 f0       	brcs	.+2      	; 0x6d0a <__ftoa_engine+0x40>
    6d08:	80 68       	ori	r24, 0x80	; 128
    6d0a:	91 1d       	adc	r25, r1
    6d0c:	df 93       	push	r29
    6d0e:	cf 93       	push	r28
    6d10:	1f 93       	push	r17
    6d12:	0f 93       	push	r16
    6d14:	ff 92       	push	r15
    6d16:	ef 92       	push	r14
    6d18:	19 2f       	mov	r17, r25
    6d1a:	98 7f       	andi	r25, 0xF8	; 248
    6d1c:	96 95       	lsr	r25
    6d1e:	e9 2f       	mov	r30, r25
    6d20:	96 95       	lsr	r25
    6d22:	96 95       	lsr	r25
    6d24:	e9 0f       	add	r30, r25
    6d26:	ff 27       	eor	r31, r31
    6d28:	e4 50       	subi	r30, 0x04	; 4
    6d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    6d2c:	99 27       	eor	r25, r25
    6d2e:	33 27       	eor	r19, r19
    6d30:	ee 24       	eor	r14, r14
    6d32:	ff 24       	eor	r15, r15
    6d34:	a7 01       	movw	r20, r14
    6d36:	e7 01       	movw	r28, r14
    6d38:	05 90       	lpm	r0, Z+
    6d3a:	08 94       	sec
    6d3c:	07 94       	ror	r0
    6d3e:	28 f4       	brcc	.+10     	; 0x6d4a <__ftoa_engine+0x80>
    6d40:	36 0f       	add	r19, r22
    6d42:	e7 1e       	adc	r14, r23
    6d44:	f8 1e       	adc	r15, r24
    6d46:	49 1f       	adc	r20, r25
    6d48:	51 1d       	adc	r21, r1
    6d4a:	66 0f       	add	r22, r22
    6d4c:	77 1f       	adc	r23, r23
    6d4e:	88 1f       	adc	r24, r24
    6d50:	99 1f       	adc	r25, r25
    6d52:	06 94       	lsr	r0
    6d54:	a1 f7       	brne	.-24     	; 0x6d3e <__ftoa_engine+0x74>
    6d56:	05 90       	lpm	r0, Z+
    6d58:	07 94       	ror	r0
    6d5a:	28 f4       	brcc	.+10     	; 0x6d66 <__ftoa_engine+0x9c>
    6d5c:	e7 0e       	add	r14, r23
    6d5e:	f8 1e       	adc	r15, r24
    6d60:	49 1f       	adc	r20, r25
    6d62:	56 1f       	adc	r21, r22
    6d64:	c1 1d       	adc	r28, r1
    6d66:	77 0f       	add	r23, r23
    6d68:	88 1f       	adc	r24, r24
    6d6a:	99 1f       	adc	r25, r25
    6d6c:	66 1f       	adc	r22, r22
    6d6e:	06 94       	lsr	r0
    6d70:	a1 f7       	brne	.-24     	; 0x6d5a <__ftoa_engine+0x90>
    6d72:	05 90       	lpm	r0, Z+
    6d74:	07 94       	ror	r0
    6d76:	28 f4       	brcc	.+10     	; 0x6d82 <__ftoa_engine+0xb8>
    6d78:	f8 0e       	add	r15, r24
    6d7a:	49 1f       	adc	r20, r25
    6d7c:	56 1f       	adc	r21, r22
    6d7e:	c7 1f       	adc	r28, r23
    6d80:	d1 1d       	adc	r29, r1
    6d82:	88 0f       	add	r24, r24
    6d84:	99 1f       	adc	r25, r25
    6d86:	66 1f       	adc	r22, r22
    6d88:	77 1f       	adc	r23, r23
    6d8a:	06 94       	lsr	r0
    6d8c:	a1 f7       	brne	.-24     	; 0x6d76 <__ftoa_engine+0xac>
    6d8e:	05 90       	lpm	r0, Z+
    6d90:	07 94       	ror	r0
    6d92:	20 f4       	brcc	.+8      	; 0x6d9c <__ftoa_engine+0xd2>
    6d94:	49 0f       	add	r20, r25
    6d96:	56 1f       	adc	r21, r22
    6d98:	c7 1f       	adc	r28, r23
    6d9a:	d8 1f       	adc	r29, r24
    6d9c:	99 0f       	add	r25, r25
    6d9e:	66 1f       	adc	r22, r22
    6da0:	77 1f       	adc	r23, r23
    6da2:	88 1f       	adc	r24, r24
    6da4:	06 94       	lsr	r0
    6da6:	a9 f7       	brne	.-22     	; 0x6d92 <__ftoa_engine+0xc8>
    6da8:	84 91       	lpm	r24, Z
    6daa:	10 95       	com	r17
    6dac:	17 70       	andi	r17, 0x07	; 7
    6dae:	41 f0       	breq	.+16     	; 0x6dc0 <__ftoa_engine+0xf6>
    6db0:	d6 95       	lsr	r29
    6db2:	c7 95       	ror	r28
    6db4:	57 95       	ror	r21
    6db6:	47 95       	ror	r20
    6db8:	f7 94       	ror	r15
    6dba:	e7 94       	ror	r14
    6dbc:	1a 95       	dec	r17
    6dbe:	c1 f7       	brne	.-16     	; 0x6db0 <__ftoa_engine+0xe6>
    6dc0:	e2 ea       	ldi	r30, 0xA2	; 162
    6dc2:	f1 e0       	ldi	r31, 0x01	; 1
    6dc4:	68 94       	set
    6dc6:	15 90       	lpm	r1, Z+
    6dc8:	15 91       	lpm	r17, Z+
    6dca:	35 91       	lpm	r19, Z+
    6dcc:	65 91       	lpm	r22, Z+
    6dce:	95 91       	lpm	r25, Z+
    6dd0:	05 90       	lpm	r0, Z+
    6dd2:	7f e2       	ldi	r23, 0x2F	; 47
    6dd4:	73 95       	inc	r23
    6dd6:	e1 18       	sub	r14, r1
    6dd8:	f1 0a       	sbc	r15, r17
    6dda:	43 0b       	sbc	r20, r19
    6ddc:	56 0b       	sbc	r21, r22
    6dde:	c9 0b       	sbc	r28, r25
    6de0:	d0 09       	sbc	r29, r0
    6de2:	c0 f7       	brcc	.-16     	; 0x6dd4 <__ftoa_engine+0x10a>
    6de4:	e1 0c       	add	r14, r1
    6de6:	f1 1e       	adc	r15, r17
    6de8:	43 1f       	adc	r20, r19
    6dea:	56 1f       	adc	r21, r22
    6dec:	c9 1f       	adc	r28, r25
    6dee:	d0 1d       	adc	r29, r0
    6df0:	7e f4       	brtc	.+30     	; 0x6e10 <__ftoa_engine+0x146>
    6df2:	70 33       	cpi	r23, 0x30	; 48
    6df4:	11 f4       	brne	.+4      	; 0x6dfa <__ftoa_engine+0x130>
    6df6:	8a 95       	dec	r24
    6df8:	e6 cf       	rjmp	.-52     	; 0x6dc6 <__ftoa_engine+0xfc>
    6dfa:	e8 94       	clt
    6dfc:	01 50       	subi	r16, 0x01	; 1
    6dfe:	30 f0       	brcs	.+12     	; 0x6e0c <__ftoa_engine+0x142>
    6e00:	08 0f       	add	r16, r24
    6e02:	0a f4       	brpl	.+2      	; 0x6e06 <__ftoa_engine+0x13c>
    6e04:	00 27       	eor	r16, r16
    6e06:	02 17       	cp	r16, r18
    6e08:	08 f4       	brcc	.+2      	; 0x6e0c <__ftoa_engine+0x142>
    6e0a:	20 2f       	mov	r18, r16
    6e0c:	23 95       	inc	r18
    6e0e:	02 2f       	mov	r16, r18
    6e10:	7a 33       	cpi	r23, 0x3A	; 58
    6e12:	28 f0       	brcs	.+10     	; 0x6e1e <__ftoa_engine+0x154>
    6e14:	79 e3       	ldi	r23, 0x39	; 57
    6e16:	7d 93       	st	X+, r23
    6e18:	2a 95       	dec	r18
    6e1a:	e9 f7       	brne	.-6      	; 0x6e16 <__ftoa_engine+0x14c>
    6e1c:	10 c0       	rjmp	.+32     	; 0x6e3e <__ftoa_engine+0x174>
    6e1e:	7d 93       	st	X+, r23
    6e20:	2a 95       	dec	r18
    6e22:	89 f6       	brne	.-94     	; 0x6dc6 <__ftoa_engine+0xfc>
    6e24:	06 94       	lsr	r0
    6e26:	97 95       	ror	r25
    6e28:	67 95       	ror	r22
    6e2a:	37 95       	ror	r19
    6e2c:	17 95       	ror	r17
    6e2e:	17 94       	ror	r1
    6e30:	e1 18       	sub	r14, r1
    6e32:	f1 0a       	sbc	r15, r17
    6e34:	43 0b       	sbc	r20, r19
    6e36:	56 0b       	sbc	r21, r22
    6e38:	c9 0b       	sbc	r28, r25
    6e3a:	d0 09       	sbc	r29, r0
    6e3c:	98 f0       	brcs	.+38     	; 0x6e64 <__ftoa_engine+0x19a>
    6e3e:	23 95       	inc	r18
    6e40:	7e 91       	ld	r23, -X
    6e42:	73 95       	inc	r23
    6e44:	7a 33       	cpi	r23, 0x3A	; 58
    6e46:	08 f0       	brcs	.+2      	; 0x6e4a <__ftoa_engine+0x180>
    6e48:	70 e3       	ldi	r23, 0x30	; 48
    6e4a:	7c 93       	st	X, r23
    6e4c:	20 13       	cpse	r18, r16
    6e4e:	b8 f7       	brcc	.-18     	; 0x6e3e <__ftoa_engine+0x174>
    6e50:	7e 91       	ld	r23, -X
    6e52:	70 61       	ori	r23, 0x10	; 16
    6e54:	7d 93       	st	X+, r23
    6e56:	30 f0       	brcs	.+12     	; 0x6e64 <__ftoa_engine+0x19a>
    6e58:	83 95       	inc	r24
    6e5a:	71 e3       	ldi	r23, 0x31	; 49
    6e5c:	7d 93       	st	X+, r23
    6e5e:	70 e3       	ldi	r23, 0x30	; 48
    6e60:	2a 95       	dec	r18
    6e62:	e1 f7       	brne	.-8      	; 0x6e5c <__ftoa_engine+0x192>
    6e64:	11 24       	eor	r1, r1
    6e66:	ef 90       	pop	r14
    6e68:	ff 90       	pop	r15
    6e6a:	0f 91       	pop	r16
    6e6c:	1f 91       	pop	r17
    6e6e:	cf 91       	pop	r28
    6e70:	df 91       	pop	r29
    6e72:	99 27       	eor	r25, r25
    6e74:	87 fd       	sbrc	r24, 7
    6e76:	90 95       	com	r25
    6e78:	08 95       	ret

00006e7a <strnlen_P>:
    6e7a:	fc 01       	movw	r30, r24
    6e7c:	05 90       	lpm	r0, Z+
    6e7e:	61 50       	subi	r22, 0x01	; 1
    6e80:	70 40       	sbci	r23, 0x00	; 0
    6e82:	01 10       	cpse	r0, r1
    6e84:	d8 f7       	brcc	.-10     	; 0x6e7c <strnlen_P+0x2>
    6e86:	80 95       	com	r24
    6e88:	90 95       	com	r25
    6e8a:	8e 0f       	add	r24, r30
    6e8c:	9f 1f       	adc	r25, r31
    6e8e:	08 95       	ret

00006e90 <memcpy>:
    6e90:	fb 01       	movw	r30, r22
    6e92:	dc 01       	movw	r26, r24
    6e94:	02 c0       	rjmp	.+4      	; 0x6e9a <memcpy+0xa>
    6e96:	01 90       	ld	r0, Z+
    6e98:	0d 92       	st	X+, r0
    6e9a:	41 50       	subi	r20, 0x01	; 1
    6e9c:	50 40       	sbci	r21, 0x00	; 0
    6e9e:	d8 f7       	brcc	.-10     	; 0x6e96 <memcpy+0x6>
    6ea0:	08 95       	ret

00006ea2 <memset>:
    6ea2:	dc 01       	movw	r26, r24
    6ea4:	01 c0       	rjmp	.+2      	; 0x6ea8 <memset+0x6>
    6ea6:	6d 93       	st	X+, r22
    6ea8:	41 50       	subi	r20, 0x01	; 1
    6eaa:	50 40       	sbci	r21, 0x00	; 0
    6eac:	e0 f7       	brcc	.-8      	; 0x6ea6 <memset+0x4>
    6eae:	08 95       	ret

00006eb0 <strcasestr>:
    6eb0:	fb 01       	movw	r30, r22
    6eb2:	51 91       	ld	r21, Z+
    6eb4:	55 23       	and	r21, r21
    6eb6:	b1 f0       	breq	.+44     	; 0x6ee4 <strcasestr+0x34>
    6eb8:	bf 01       	movw	r22, r30
    6eba:	dc 01       	movw	r26, r24
    6ebc:	05 2e       	mov	r0, r21
    6ebe:	4d 91       	ld	r20, X+
    6ec0:	44 23       	and	r20, r20
    6ec2:	69 f0       	breq	.+26     	; 0x6ede <strcasestr+0x2e>
    6ec4:	10 d0       	rcall	.+32     	; 0x6ee6 <strcasestr+0x36>
    6ec6:	d9 f7       	brne	.-10     	; 0x6ebe <strcasestr+0xe>
    6ec8:	cd 01       	movw	r24, r26
    6eca:	01 90       	ld	r0, Z+
    6ecc:	00 20       	and	r0, r0
    6ece:	49 f0       	breq	.+18     	; 0x6ee2 <strcasestr+0x32>
    6ed0:	4d 91       	ld	r20, X+
    6ed2:	41 11       	cpse	r20, r1
    6ed4:	08 d0       	rcall	.+16     	; 0x6ee6 <strcasestr+0x36>
    6ed6:	c9 f3       	breq	.-14     	; 0x6eca <strcasestr+0x1a>
    6ed8:	fb 01       	movw	r30, r22
    6eda:	41 11       	cpse	r20, r1
    6edc:	ee cf       	rjmp	.-36     	; 0x6eba <strcasestr+0xa>
    6ede:	81 e0       	ldi	r24, 0x01	; 1
    6ee0:	90 e0       	ldi	r25, 0x00	; 0
    6ee2:	01 97       	sbiw	r24, 0x01	; 1
    6ee4:	08 95       	ret
    6ee6:	40 25       	eor	r20, r0
    6ee8:	39 f0       	breq	.+14     	; 0x6ef8 <strcasestr+0x48>
    6eea:	40 32       	cpi	r20, 0x20	; 32
    6eec:	29 f4       	brne	.+10     	; 0x6ef8 <strcasestr+0x48>
    6eee:	40 29       	or	r20, r0
    6ef0:	4b 57       	subi	r20, 0x7B	; 123
    6ef2:	46 5e       	subi	r20, 0xE6	; 230
    6ef4:	08 f0       	brcs	.+2      	; 0x6ef8 <strcasestr+0x48>
    6ef6:	18 94       	sez
    6ef8:	08 95       	ret

00006efa <strcat>:
    6efa:	fb 01       	movw	r30, r22
    6efc:	dc 01       	movw	r26, r24
    6efe:	0d 90       	ld	r0, X+
    6f00:	00 20       	and	r0, r0
    6f02:	e9 f7       	brne	.-6      	; 0x6efe <strcat+0x4>
    6f04:	11 97       	sbiw	r26, 0x01	; 1
    6f06:	01 90       	ld	r0, Z+
    6f08:	0d 92       	st	X+, r0
    6f0a:	00 20       	and	r0, r0
    6f0c:	e1 f7       	brne	.-8      	; 0x6f06 <strcat+0xc>
    6f0e:	08 95       	ret

00006f10 <strcpy>:
    6f10:	fb 01       	movw	r30, r22
    6f12:	dc 01       	movw	r26, r24
    6f14:	01 90       	ld	r0, Z+
    6f16:	0d 92       	st	X+, r0
    6f18:	00 20       	and	r0, r0
    6f1a:	e1 f7       	brne	.-8      	; 0x6f14 <strcpy+0x4>
    6f1c:	08 95       	ret

00006f1e <strncasecmp>:
    6f1e:	fb 01       	movw	r30, r22
    6f20:	dc 01       	movw	r26, r24
    6f22:	41 50       	subi	r20, 0x01	; 1
    6f24:	50 40       	sbci	r21, 0x00	; 0
    6f26:	88 f0       	brcs	.+34     	; 0x6f4a <strncasecmp+0x2c>
    6f28:	8d 91       	ld	r24, X+
    6f2a:	81 34       	cpi	r24, 0x41	; 65
    6f2c:	1c f0       	brlt	.+6      	; 0x6f34 <strncasecmp+0x16>
    6f2e:	8b 35       	cpi	r24, 0x5B	; 91
    6f30:	0c f4       	brge	.+2      	; 0x6f34 <strncasecmp+0x16>
    6f32:	80 5e       	subi	r24, 0xE0	; 224
    6f34:	61 91       	ld	r22, Z+
    6f36:	61 34       	cpi	r22, 0x41	; 65
    6f38:	1c f0       	brlt	.+6      	; 0x6f40 <strncasecmp+0x22>
    6f3a:	6b 35       	cpi	r22, 0x5B	; 91
    6f3c:	0c f4       	brge	.+2      	; 0x6f40 <strncasecmp+0x22>
    6f3e:	60 5e       	subi	r22, 0xE0	; 224
    6f40:	86 1b       	sub	r24, r22
    6f42:	61 11       	cpse	r22, r1
    6f44:	71 f3       	breq	.-36     	; 0x6f22 <strncasecmp+0x4>
    6f46:	99 0b       	sbc	r25, r25
    6f48:	08 95       	ret
    6f4a:	88 1b       	sub	r24, r24
    6f4c:	fc cf       	rjmp	.-8      	; 0x6f46 <strncasecmp+0x28>

00006f4e <strnlen>:
    6f4e:	fc 01       	movw	r30, r24
    6f50:	61 50       	subi	r22, 0x01	; 1
    6f52:	70 40       	sbci	r23, 0x00	; 0
    6f54:	01 90       	ld	r0, Z+
    6f56:	01 10       	cpse	r0, r1
    6f58:	d8 f7       	brcc	.-10     	; 0x6f50 <strnlen+0x2>
    6f5a:	80 95       	com	r24
    6f5c:	90 95       	com	r25
    6f5e:	8e 0f       	add	r24, r30
    6f60:	9f 1f       	adc	r25, r31
    6f62:	08 95       	ret

00006f64 <fputc>:
    6f64:	0f 93       	push	r16
    6f66:	1f 93       	push	r17
    6f68:	cf 93       	push	r28
    6f6a:	df 93       	push	r29
    6f6c:	fb 01       	movw	r30, r22
    6f6e:	23 81       	ldd	r18, Z+3	; 0x03
    6f70:	21 fd       	sbrc	r18, 1
    6f72:	03 c0       	rjmp	.+6      	; 0x6f7a <fputc+0x16>
    6f74:	8f ef       	ldi	r24, 0xFF	; 255
    6f76:	9f ef       	ldi	r25, 0xFF	; 255
    6f78:	2c c0       	rjmp	.+88     	; 0x6fd2 <fputc+0x6e>
    6f7a:	22 ff       	sbrs	r18, 2
    6f7c:	16 c0       	rjmp	.+44     	; 0x6faa <fputc+0x46>
    6f7e:	46 81       	ldd	r20, Z+6	; 0x06
    6f80:	57 81       	ldd	r21, Z+7	; 0x07
    6f82:	24 81       	ldd	r18, Z+4	; 0x04
    6f84:	35 81       	ldd	r19, Z+5	; 0x05
    6f86:	42 17       	cp	r20, r18
    6f88:	53 07       	cpc	r21, r19
    6f8a:	44 f4       	brge	.+16     	; 0x6f9c <fputc+0x38>
    6f8c:	a0 81       	ld	r26, Z
    6f8e:	b1 81       	ldd	r27, Z+1	; 0x01
    6f90:	9d 01       	movw	r18, r26
    6f92:	2f 5f       	subi	r18, 0xFF	; 255
    6f94:	3f 4f       	sbci	r19, 0xFF	; 255
    6f96:	31 83       	std	Z+1, r19	; 0x01
    6f98:	20 83       	st	Z, r18
    6f9a:	8c 93       	st	X, r24
    6f9c:	26 81       	ldd	r18, Z+6	; 0x06
    6f9e:	37 81       	ldd	r19, Z+7	; 0x07
    6fa0:	2f 5f       	subi	r18, 0xFF	; 255
    6fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    6fa4:	37 83       	std	Z+7, r19	; 0x07
    6fa6:	26 83       	std	Z+6, r18	; 0x06
    6fa8:	14 c0       	rjmp	.+40     	; 0x6fd2 <fputc+0x6e>
    6faa:	8b 01       	movw	r16, r22
    6fac:	ec 01       	movw	r28, r24
    6fae:	fb 01       	movw	r30, r22
    6fb0:	00 84       	ldd	r0, Z+8	; 0x08
    6fb2:	f1 85       	ldd	r31, Z+9	; 0x09
    6fb4:	e0 2d       	mov	r30, r0
    6fb6:	19 95       	eicall
    6fb8:	89 2b       	or	r24, r25
    6fba:	e1 f6       	brne	.-72     	; 0x6f74 <fputc+0x10>
    6fbc:	d8 01       	movw	r26, r16
    6fbe:	16 96       	adiw	r26, 0x06	; 6
    6fc0:	8d 91       	ld	r24, X+
    6fc2:	9c 91       	ld	r25, X
    6fc4:	17 97       	sbiw	r26, 0x07	; 7
    6fc6:	01 96       	adiw	r24, 0x01	; 1
    6fc8:	17 96       	adiw	r26, 0x07	; 7
    6fca:	9c 93       	st	X, r25
    6fcc:	8e 93       	st	-X, r24
    6fce:	16 97       	sbiw	r26, 0x06	; 6
    6fd0:	ce 01       	movw	r24, r28
    6fd2:	df 91       	pop	r29
    6fd4:	cf 91       	pop	r28
    6fd6:	1f 91       	pop	r17
    6fd8:	0f 91       	pop	r16
    6fda:	08 95       	ret

00006fdc <printf>:
    6fdc:	cf 93       	push	r28
    6fde:	df 93       	push	r29
    6fe0:	cd b7       	in	r28, 0x3d	; 61
    6fe2:	de b7       	in	r29, 0x3e	; 62
    6fe4:	ae 01       	movw	r20, r28
    6fe6:	4a 5f       	subi	r20, 0xFA	; 250
    6fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    6fea:	fa 01       	movw	r30, r20
    6fec:	61 91       	ld	r22, Z+
    6fee:	71 91       	ld	r23, Z+
    6ff0:	af 01       	movw	r20, r30
    6ff2:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <__iob+0x2>
    6ff6:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <__iob+0x3>
    6ffa:	0e 94 67 2f 	call	0x5ece	; 0x5ece <vfprintf>
    6ffe:	df 91       	pop	r29
    7000:	cf 91       	pop	r28
    7002:	08 95       	ret

00007004 <puts>:
    7004:	0f 93       	push	r16
    7006:	1f 93       	push	r17
    7008:	cf 93       	push	r28
    700a:	df 93       	push	r29
    700c:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <__iob+0x2>
    7010:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <__iob+0x3>
    7014:	23 81       	ldd	r18, Z+3	; 0x03
    7016:	21 ff       	sbrs	r18, 1
    7018:	1b c0       	rjmp	.+54     	; 0x7050 <puts+0x4c>
    701a:	8c 01       	movw	r16, r24
    701c:	d0 e0       	ldi	r29, 0x00	; 0
    701e:	c0 e0       	ldi	r28, 0x00	; 0
    7020:	f8 01       	movw	r30, r16
    7022:	81 91       	ld	r24, Z+
    7024:	8f 01       	movw	r16, r30
    7026:	60 91 53 19 	lds	r22, 0x1953	; 0x801953 <__iob+0x2>
    702a:	70 91 54 19 	lds	r23, 0x1954	; 0x801954 <__iob+0x3>
    702e:	db 01       	movw	r26, r22
    7030:	18 96       	adiw	r26, 0x08	; 8
    7032:	ed 91       	ld	r30, X+
    7034:	fc 91       	ld	r31, X
    7036:	19 97       	sbiw	r26, 0x09	; 9
    7038:	88 23       	and	r24, r24
    703a:	31 f0       	breq	.+12     	; 0x7048 <puts+0x44>
    703c:	19 95       	eicall
    703e:	89 2b       	or	r24, r25
    7040:	79 f3       	breq	.-34     	; 0x7020 <puts+0x1c>
    7042:	df ef       	ldi	r29, 0xFF	; 255
    7044:	cf ef       	ldi	r28, 0xFF	; 255
    7046:	ec cf       	rjmp	.-40     	; 0x7020 <puts+0x1c>
    7048:	8a e0       	ldi	r24, 0x0A	; 10
    704a:	19 95       	eicall
    704c:	89 2b       	or	r24, r25
    704e:	19 f0       	breq	.+6      	; 0x7056 <puts+0x52>
    7050:	8f ef       	ldi	r24, 0xFF	; 255
    7052:	9f ef       	ldi	r25, 0xFF	; 255
    7054:	02 c0       	rjmp	.+4      	; 0x705a <puts+0x56>
    7056:	8d 2f       	mov	r24, r29
    7058:	9c 2f       	mov	r25, r28
    705a:	df 91       	pop	r29
    705c:	cf 91       	pop	r28
    705e:	1f 91       	pop	r17
    7060:	0f 91       	pop	r16
    7062:	08 95       	ret

00007064 <sprintf>:
    7064:	0f 93       	push	r16
    7066:	1f 93       	push	r17
    7068:	cf 93       	push	r28
    706a:	df 93       	push	r29
    706c:	cd b7       	in	r28, 0x3d	; 61
    706e:	de b7       	in	r29, 0x3e	; 62
    7070:	2e 97       	sbiw	r28, 0x0e	; 14
    7072:	0f b6       	in	r0, 0x3f	; 63
    7074:	f8 94       	cli
    7076:	de bf       	out	0x3e, r29	; 62
    7078:	0f be       	out	0x3f, r0	; 63
    707a:	cd bf       	out	0x3d, r28	; 61
    707c:	0e 89       	ldd	r16, Y+22	; 0x16
    707e:	1f 89       	ldd	r17, Y+23	; 0x17
    7080:	86 e0       	ldi	r24, 0x06	; 6
    7082:	8c 83       	std	Y+4, r24	; 0x04
    7084:	1a 83       	std	Y+2, r17	; 0x02
    7086:	09 83       	std	Y+1, r16	; 0x01
    7088:	8f ef       	ldi	r24, 0xFF	; 255
    708a:	9f e7       	ldi	r25, 0x7F	; 127
    708c:	9e 83       	std	Y+6, r25	; 0x06
    708e:	8d 83       	std	Y+5, r24	; 0x05
    7090:	ae 01       	movw	r20, r28
    7092:	46 5e       	subi	r20, 0xE6	; 230
    7094:	5f 4f       	sbci	r21, 0xFF	; 255
    7096:	68 8d       	ldd	r22, Y+24	; 0x18
    7098:	79 8d       	ldd	r23, Y+25	; 0x19
    709a:	ce 01       	movw	r24, r28
    709c:	01 96       	adiw	r24, 0x01	; 1
    709e:	0e 94 67 2f 	call	0x5ece	; 0x5ece <vfprintf>
    70a2:	ef 81       	ldd	r30, Y+7	; 0x07
    70a4:	f8 85       	ldd	r31, Y+8	; 0x08
    70a6:	e0 0f       	add	r30, r16
    70a8:	f1 1f       	adc	r31, r17
    70aa:	10 82       	st	Z, r1
    70ac:	2e 96       	adiw	r28, 0x0e	; 14
    70ae:	0f b6       	in	r0, 0x3f	; 63
    70b0:	f8 94       	cli
    70b2:	de bf       	out	0x3e, r29	; 62
    70b4:	0f be       	out	0x3f, r0	; 63
    70b6:	cd bf       	out	0x3d, r28	; 61
    70b8:	df 91       	pop	r29
    70ba:	cf 91       	pop	r28
    70bc:	1f 91       	pop	r17
    70be:	0f 91       	pop	r16
    70c0:	08 95       	ret

000070c2 <__ultoa_invert>:
    70c2:	fa 01       	movw	r30, r20
    70c4:	aa 27       	eor	r26, r26
    70c6:	28 30       	cpi	r18, 0x08	; 8
    70c8:	51 f1       	breq	.+84     	; 0x711e <__ultoa_invert+0x5c>
    70ca:	20 31       	cpi	r18, 0x10	; 16
    70cc:	81 f1       	breq	.+96     	; 0x712e <__ultoa_invert+0x6c>
    70ce:	e8 94       	clt
    70d0:	6f 93       	push	r22
    70d2:	6e 7f       	andi	r22, 0xFE	; 254
    70d4:	6e 5f       	subi	r22, 0xFE	; 254
    70d6:	7f 4f       	sbci	r23, 0xFF	; 255
    70d8:	8f 4f       	sbci	r24, 0xFF	; 255
    70da:	9f 4f       	sbci	r25, 0xFF	; 255
    70dc:	af 4f       	sbci	r26, 0xFF	; 255
    70de:	b1 e0       	ldi	r27, 0x01	; 1
    70e0:	3e d0       	rcall	.+124    	; 0x715e <__ultoa_invert+0x9c>
    70e2:	b4 e0       	ldi	r27, 0x04	; 4
    70e4:	3c d0       	rcall	.+120    	; 0x715e <__ultoa_invert+0x9c>
    70e6:	67 0f       	add	r22, r23
    70e8:	78 1f       	adc	r23, r24
    70ea:	89 1f       	adc	r24, r25
    70ec:	9a 1f       	adc	r25, r26
    70ee:	a1 1d       	adc	r26, r1
    70f0:	68 0f       	add	r22, r24
    70f2:	79 1f       	adc	r23, r25
    70f4:	8a 1f       	adc	r24, r26
    70f6:	91 1d       	adc	r25, r1
    70f8:	a1 1d       	adc	r26, r1
    70fa:	6a 0f       	add	r22, r26
    70fc:	71 1d       	adc	r23, r1
    70fe:	81 1d       	adc	r24, r1
    7100:	91 1d       	adc	r25, r1
    7102:	a1 1d       	adc	r26, r1
    7104:	20 d0       	rcall	.+64     	; 0x7146 <__ultoa_invert+0x84>
    7106:	09 f4       	brne	.+2      	; 0x710a <__ultoa_invert+0x48>
    7108:	68 94       	set
    710a:	3f 91       	pop	r19
    710c:	2a e0       	ldi	r18, 0x0A	; 10
    710e:	26 9f       	mul	r18, r22
    7110:	11 24       	eor	r1, r1
    7112:	30 19       	sub	r19, r0
    7114:	30 5d       	subi	r19, 0xD0	; 208
    7116:	31 93       	st	Z+, r19
    7118:	de f6       	brtc	.-74     	; 0x70d0 <__ultoa_invert+0xe>
    711a:	cf 01       	movw	r24, r30
    711c:	08 95       	ret
    711e:	46 2f       	mov	r20, r22
    7120:	47 70       	andi	r20, 0x07	; 7
    7122:	40 5d       	subi	r20, 0xD0	; 208
    7124:	41 93       	st	Z+, r20
    7126:	b3 e0       	ldi	r27, 0x03	; 3
    7128:	0f d0       	rcall	.+30     	; 0x7148 <__ultoa_invert+0x86>
    712a:	c9 f7       	brne	.-14     	; 0x711e <__ultoa_invert+0x5c>
    712c:	f6 cf       	rjmp	.-20     	; 0x711a <__ultoa_invert+0x58>
    712e:	46 2f       	mov	r20, r22
    7130:	4f 70       	andi	r20, 0x0F	; 15
    7132:	40 5d       	subi	r20, 0xD0	; 208
    7134:	4a 33       	cpi	r20, 0x3A	; 58
    7136:	18 f0       	brcs	.+6      	; 0x713e <__ultoa_invert+0x7c>
    7138:	49 5d       	subi	r20, 0xD9	; 217
    713a:	31 fd       	sbrc	r19, 1
    713c:	40 52       	subi	r20, 0x20	; 32
    713e:	41 93       	st	Z+, r20
    7140:	02 d0       	rcall	.+4      	; 0x7146 <__ultoa_invert+0x84>
    7142:	a9 f7       	brne	.-22     	; 0x712e <__ultoa_invert+0x6c>
    7144:	ea cf       	rjmp	.-44     	; 0x711a <__ultoa_invert+0x58>
    7146:	b4 e0       	ldi	r27, 0x04	; 4
    7148:	a6 95       	lsr	r26
    714a:	97 95       	ror	r25
    714c:	87 95       	ror	r24
    714e:	77 95       	ror	r23
    7150:	67 95       	ror	r22
    7152:	ba 95       	dec	r27
    7154:	c9 f7       	brne	.-14     	; 0x7148 <__ultoa_invert+0x86>
    7156:	00 97       	sbiw	r24, 0x00	; 0
    7158:	61 05       	cpc	r22, r1
    715a:	71 05       	cpc	r23, r1
    715c:	08 95       	ret
    715e:	9b 01       	movw	r18, r22
    7160:	ac 01       	movw	r20, r24
    7162:	0a 2e       	mov	r0, r26
    7164:	06 94       	lsr	r0
    7166:	57 95       	ror	r21
    7168:	47 95       	ror	r20
    716a:	37 95       	ror	r19
    716c:	27 95       	ror	r18
    716e:	ba 95       	dec	r27
    7170:	c9 f7       	brne	.-14     	; 0x7164 <__ultoa_invert+0xa2>
    7172:	62 0f       	add	r22, r18
    7174:	73 1f       	adc	r23, r19
    7176:	84 1f       	adc	r24, r20
    7178:	95 1f       	adc	r25, r21
    717a:	a0 1d       	adc	r26, r0
    717c:	08 95       	ret

0000717e <_exit>:
    717e:	f8 94       	cli

00007180 <__stop_program>:
    7180:	ff cf       	rjmp	.-2      	; 0x7180 <__stop_program>
