
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000b02  00800200  00009bd2  00009c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000101c  00800d02  00800d02  0000a768  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000a768  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a7c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c38  00000000  00000000  0000a804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b21a  00000000  00000000  0000b43c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003396  00000000  00000000  00016656  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000793e  00000000  00000000  000199ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c9c  00000000  00000000  0002132c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000045b2  00000000  00000000  00023fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000076a2  00000000  00000000  0002857a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a88  00000000  00000000  0002fc1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	83 c1       	rjmp	.+774    	; 0x308 <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	90 c1       	rjmp	.+800    	; 0x34a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8e c1       	rjmp	.+796    	; 0x34a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_12>
      34:	8a c1       	rjmp	.+788    	; 0x34a <__bad_interrupt>
      36:	00 00       	nop
      38:	88 c1       	rjmp	.+784    	; 0x34a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	86 c1       	rjmp	.+780    	; 0x34a <__bad_interrupt>
      3e:	00 00       	nop
      40:	84 c1       	rjmp	.+776    	; 0x34a <__bad_interrupt>
      42:	00 00       	nop
      44:	82 c1       	rjmp	.+772    	; 0x34a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c1       	rjmp	.+768    	; 0x34a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c1       	rjmp	.+764    	; 0x34a <__bad_interrupt>
      4e:	00 00       	nop
      50:	7c c1       	rjmp	.+760    	; 0x34a <__bad_interrupt>
      52:	00 00       	nop
      54:	7a c1       	rjmp	.+756    	; 0x34a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c1       	rjmp	.+752    	; 0x34a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c1       	rjmp	.+748    	; 0x34a <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 53 3f 	jmp	0x7ea6	; 0x7ea6 <__vector_25>
      68:	0c 94 a5 3f 	jmp	0x7f4a	; 0x7f4a <__vector_26>
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e9 3f 	jmp	0x7fd2	; 0x7fd2 <__vector_36>
      94:	0c 94 3b 40 	jmp	0x8076	; 0x8076 <__vector_37>
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 86 44 	jmp	0x890c	; 0x890c <__vector_39>
      a0:	54 c1       	rjmp	.+680    	; 0x34a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	52 c1       	rjmp	.+676    	; 0x34a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	50 c1       	rjmp	.+672    	; 0x34a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	48 c1       	rjmp	.+656    	; 0x34a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	46 c1       	rjmp	.+652    	; 0x34a <__bad_interrupt>
      be:	00 00       	nop
      c0:	44 c1       	rjmp	.+648    	; 0x34a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	42 c1       	rjmp	.+644    	; 0x34a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	40 c1       	rjmp	.+640    	; 0x34a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 7f 40 	jmp	0x80fe	; 0x80fe <__vector_51>
      d0:	0c 94 d1 40 	jmp	0x81a2	; 0x81a2 <__vector_52>
      d4:	3a c1       	rjmp	.+628    	; 0x34a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 15 41 	jmp	0x822a	; 0x822a <__vector_54>
      dc:	0c 94 67 41 	jmp	0x82ce	; 0x82ce <__vector_55>
      e0:	34 c1       	rjmp	.+616    	; 0x34a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	89 2e       	mov	r8, r25
      e6:	89 2e       	mov	r8, r25
      e8:	89 2e       	mov	r8, r25
      ea:	e8 2e       	mov	r14, r24
      ec:	f3 2e       	mov	r15, r19
      ee:	2a 2f       	mov	r18, r26
      f0:	89 2e       	mov	r8, r25
      f2:	89 2e       	mov	r8, r25
      f4:	e8 2e       	mov	r14, r24
      f6:	f3 2e       	mov	r15, r19
      f8:	a8 44       	sbci	r26, 0x48	; 72
      fa:	18 45       	sbci	r17, 0x58	; 88
      fc:	18 45       	sbci	r17, 0x58	; 88
      fe:	18 45       	sbci	r17, 0x58	; 88
     100:	18 45       	sbci	r17, 0x58	; 88
     102:	18 45       	sbci	r17, 0x58	; 88
     104:	18 45       	sbci	r17, 0x58	; 88
     106:	18 45       	sbci	r17, 0x58	; 88
     108:	a8 44       	sbci	r26, 0x48	; 72
     10a:	18 45       	sbci	r17, 0x58	; 88
     10c:	18 45       	sbci	r17, 0x58	; 88
     10e:	18 45       	sbci	r17, 0x58	; 88
     110:	18 45       	sbci	r17, 0x58	; 88
     112:	18 45       	sbci	r17, 0x58	; 88
     114:	18 45       	sbci	r17, 0x58	; 88
     116:	18 45       	sbci	r17, 0x58	; 88
     118:	aa 44       	sbci	r26, 0x4A	; 74
     11a:	18 45       	sbci	r17, 0x58	; 88
     11c:	18 45       	sbci	r17, 0x58	; 88
     11e:	18 45       	sbci	r17, 0x58	; 88
     120:	18 45       	sbci	r17, 0x58	; 88
     122:	18 45       	sbci	r17, 0x58	; 88
     124:	18 45       	sbci	r17, 0x58	; 88
     126:	18 45       	sbci	r17, 0x58	; 88
     128:	18 45       	sbci	r17, 0x58	; 88
     12a:	18 45       	sbci	r17, 0x58	; 88
     12c:	18 45       	sbci	r17, 0x58	; 88
     12e:	18 45       	sbci	r17, 0x58	; 88
     130:	18 45       	sbci	r17, 0x58	; 88
     132:	18 45       	sbci	r17, 0x58	; 88
     134:	18 45       	sbci	r17, 0x58	; 88
     136:	18 45       	sbci	r17, 0x58	; 88
     138:	aa 44       	sbci	r26, 0x4A	; 74
     13a:	18 45       	sbci	r17, 0x58	; 88
     13c:	18 45       	sbci	r17, 0x58	; 88
     13e:	18 45       	sbci	r17, 0x58	; 88
     140:	18 45       	sbci	r17, 0x58	; 88
     142:	18 45       	sbci	r17, 0x58	; 88
     144:	18 45       	sbci	r17, 0x58	; 88
     146:	18 45       	sbci	r17, 0x58	; 88
     148:	18 45       	sbci	r17, 0x58	; 88
     14a:	18 45       	sbci	r17, 0x58	; 88
     14c:	18 45       	sbci	r17, 0x58	; 88
     14e:	18 45       	sbci	r17, 0x58	; 88
     150:	18 45       	sbci	r17, 0x58	; 88
     152:	18 45       	sbci	r17, 0x58	; 88
     154:	18 45       	sbci	r17, 0x58	; 88
     156:	18 45       	sbci	r17, 0x58	; 88
     158:	14 45       	sbci	r17, 0x54	; 84
     15a:	18 45       	sbci	r17, 0x58	; 88
     15c:	18 45       	sbci	r17, 0x58	; 88
     15e:	18 45       	sbci	r17, 0x58	; 88
     160:	18 45       	sbci	r17, 0x58	; 88
     162:	18 45       	sbci	r17, 0x58	; 88
     164:	18 45       	sbci	r17, 0x58	; 88
     166:	18 45       	sbci	r17, 0x58	; 88
     168:	df 44       	sbci	r29, 0x4F	; 79
     16a:	18 45       	sbci	r17, 0x58	; 88
     16c:	18 45       	sbci	r17, 0x58	; 88
     16e:	18 45       	sbci	r17, 0x58	; 88
     170:	18 45       	sbci	r17, 0x58	; 88
     172:	18 45       	sbci	r17, 0x58	; 88
     174:	18 45       	sbci	r17, 0x58	; 88
     176:	18 45       	sbci	r17, 0x58	; 88
     178:	18 45       	sbci	r17, 0x58	; 88
     17a:	18 45       	sbci	r17, 0x58	; 88
     17c:	18 45       	sbci	r17, 0x58	; 88
     17e:	18 45       	sbci	r17, 0x58	; 88
     180:	18 45       	sbci	r17, 0x58	; 88
     182:	18 45       	sbci	r17, 0x58	; 88
     184:	18 45       	sbci	r17, 0x58	; 88
     186:	18 45       	sbci	r17, 0x58	; 88
     188:	d3 44       	sbci	r29, 0x43	; 67
     18a:	18 45       	sbci	r17, 0x58	; 88
     18c:	18 45       	sbci	r17, 0x58	; 88
     18e:	18 45       	sbci	r17, 0x58	; 88
     190:	18 45       	sbci	r17, 0x58	; 88
     192:	18 45       	sbci	r17, 0x58	; 88
     194:	18 45       	sbci	r17, 0x58	; 88
     196:	18 45       	sbci	r17, 0x58	; 88
     198:	f7 44       	sbci	r31, 0x47	; 71

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
        }
        taskEXIT_CRITICAL();

        return ulReturn;
    }
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	1f 92       	push	r1
     2a2:	1f 92       	push	r1
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	9a 83       	std	Y+2, r25	; 0x02
     2aa:	89 83       	std	Y+1, r24	; 0x01
     2ac:	0e 94 85 23 	call	0x470a	; 0x470a <prvCheckTasksWaitingTermination>
     2b0:	80 91 da 1a 	lds	r24, 0x1ADA	; 0x801ada <pxReadyTasksLists>
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	10 f0       	brcs	.+4      	; 0x2bc <prvIdleTask+0x20>
     2b8:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
     2bc:	0e 94 57 30 	call	0x60ae	; 0x60ae <vApplicationIdleHook>
     2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <prvIdleTask+0x10>

000002c2 <prvTimerTask>:
    {
        Timer_t * pxTimer = xTimer;

        configASSERT( xTimer );
        return pxTimer->pcTimerName;
    }
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	27 97       	sbiw	r28, 0x07	; 7
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	9f 83       	std	Y+7, r25	; 0x07
     2d8:	8e 83       	std	Y+6, r24	; 0x06
     2da:	ce 01       	movw	r24, r28
     2dc:	05 96       	adiw	r24, 0x05	; 5
     2de:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <prvGetNextExpireTime>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	89 83       	std	Y+1, r24	; 0x01
     2e8:	9a 83       	std	Y+2, r25	; 0x02
     2ea:	ab 83       	std	Y+3, r26	; 0x03
     2ec:	bc 83       	std	Y+4, r27	; 0x04
     2ee:	2d 81       	ldd	r18, Y+5	; 0x05
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	9a 81       	ldd	r25, Y+2	; 0x02
     2f4:	ab 81       	ldd	r26, Y+3	; 0x03
     2f6:	bc 81       	ldd	r27, Y+4	; 0x04
     2f8:	42 2f       	mov	r20, r18
     2fa:	bc 01       	movw	r22, r24
     2fc:	cd 01       	movw	r24, r26
     2fe:	0e 94 9c 2c 	call	0x5938	; 0x5938 <prvProcessTimerOrBlockTask>
     302:	0e 94 42 2e 	call	0x5c84	; 0x5c84 <prvProcessReceivedCommands>
     306:	e9 cf       	rjmp	.-46     	; 0x2da <prvTimerTask+0x18>

00000308 <__ctors_end>:
     308:	11 24       	eor	r1, r1
     30a:	1f be       	out	0x3f, r1	; 63
     30c:	cf ef       	ldi	r28, 0xFF	; 255
     30e:	d1 e2       	ldi	r29, 0x21	; 33
     310:	de bf       	out	0x3e, r29	; 62
     312:	cd bf       	out	0x3d, r28	; 61
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	0c bf       	out	0x3c, r16	; 60

00000318 <__do_copy_data>:
     318:	1d e0       	ldi	r17, 0x0D	; 13
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b2 e0       	ldi	r27, 0x02	; 2
     31e:	e2 ed       	ldi	r30, 0xD2	; 210
     320:	fb e9       	ldi	r31, 0x9B	; 155
     322:	00 e0       	ldi	r16, 0x00	; 0
     324:	0b bf       	out	0x3b, r16	; 59
     326:	02 c0       	rjmp	.+4      	; 0x32c <__do_copy_data+0x14>
     328:	07 90       	elpm	r0, Z+
     32a:	0d 92       	st	X+, r0
     32c:	a2 30       	cpi	r26, 0x02	; 2
     32e:	b1 07       	cpc	r27, r17
     330:	d9 f7       	brne	.-10     	; 0x328 <__do_copy_data+0x10>

00000332 <__do_clear_bss>:
     332:	2d e1       	ldi	r18, 0x1D	; 29
     334:	a2 e0       	ldi	r26, 0x02	; 2
     336:	bd e0       	ldi	r27, 0x0D	; 13
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	ae 31       	cpi	r26, 0x1E	; 30
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e 94 e4 36 	call	0x6dc8	; 0x6dc8 <main>
     346:	0c 94 e7 4d 	jmp	0x9bce	; 0x9bce <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <application_create>:

void application_task(void *pvParameters);
void application_createTask(UBaseType_t priority);

void application_create(UBaseType_t priority)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	1f 92       	push	r1
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	89 83       	std	Y+1, r24	; 0x01
	application_createTask(priority);
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	05 d0       	rcall	.+10     	; 0x366 <application_createTask>
}
     35c:	00 00       	nop
     35e:	0f 90       	pop	r0
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <application_createTask>:

void application_createTask(UBaseType_t priority){
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	1f 92       	push	r1
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
     378:	e1 2c       	mov	r14, r1
     37a:	f1 2c       	mov	r15, r1
     37c:	09 81       	ldd	r16, Y+1	; 0x01
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	40 ec       	ldi	r20, 0xC0	; 192
     384:	50 e0       	ldi	r21, 0x00	; 0
     386:	63 e2       	ldi	r22, 0x23	; 35
     388:	72 e0       	ldi	r23, 0x02	; 2
     38a:	81 ed       	ldi	r24, 0xD1	; 209
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskCreate>
	,  "MainApplication"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     392:	00 00       	nop
     394:	0f 90       	pop	r0
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	08 95       	ret

000003a2 <application_task>:

// Main task For application to get result when every measurement is done
void application_task(void *pvParameters) {
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	a5 97       	sbiw	r28, 0x25	; 37
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	9d a3       	std	Y+37, r25	; 0x25
     3c4:	8c a3       	std	Y+36, r24	; 0x24
	
	uint8_t xBytesSent = 0;
     3c6:	19 82       	std	Y+1, r1	; 0x01
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
     3c8:	88 ea       	ldi	r24, 0xA8	; 168
     3ca:	98 e4       	ldi	r25, 0x48	; 72
     3cc:	a0 e0       	ldi	r26, 0x00	; 0
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	8a 83       	std	Y+2, r24	; 0x02
     3d2:	9b 83       	std	Y+3, r25	; 0x03
     3d4:	ac 83       	std	Y+4, r26	; 0x04
     3d6:	bd 83       	std	Y+5, r27	; 0x05
	xLastWakeTime = xTaskGetTickCount();
     3d8:	0e 94 c0 1b 	call	0x3780	; 0x3780 <xTaskGetTickCount>
     3dc:	dc 01       	movw	r26, r24
     3de:	cb 01       	movw	r24, r22
     3e0:	8a 87       	std	Y+10, r24	; 0x0a
     3e2:	9b 87       	std	Y+11, r25	; 0x0b
     3e4:	ac 87       	std	Y+12, r26	; 0x0c
     3e6:	bd 87       	std	Y+13, r27	; 0x0d
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	9b 81       	ldd	r25, Y+3	; 0x03
     3ec:	ac 81       	ldd	r26, Y+4	; 0x04
     3ee:	bd 81       	ldd	r27, Y+5	; 0x05
     3f0:	9e 01       	movw	r18, r28
     3f2:	26 5f       	subi	r18, 0xF6	; 246
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	ac 01       	movw	r20, r24
     3f8:	bd 01       	movw	r22, r26
     3fa:	c9 01       	movw	r24, r18
     3fc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     400:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <measureEventGroup>
     404:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <measureEventGroup+0x1>
     408:	45 e0       	ldi	r20, 0x05	; 5
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	17 d3       	rcall	.+1582   	; 0xa40 <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     412:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <dataReadyEventGroup>
     416:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <dataReadyEventGroup+0x1>
     41a:	cc 24       	eor	r12, r12
     41c:	ca 94       	dec	r12
     41e:	dc 2c       	mov	r13, r12
     420:	76 01       	movw	r14, r12
     422:	01 e0       	ldi	r16, 0x01	; 1
     424:	21 e0       	ldi	r18, 0x01	; 1
     426:	4a e0       	ldi	r20, 0x0A	; 10
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	d1 d1       	rcall	.+930    	; 0x7d2 <xEventGroupWaitBits>
     430:	dc 01       	movw	r26, r24
     432:	cb 01       	movw	r24, r22
     434:	8e 83       	std	Y+6, r24	; 0x06
     436:	9f 83       	std	Y+7, r25	; 0x07
     438:	a8 87       	std	Y+8, r26	; 0x08
     43a:	b9 87       	std	Y+9, r27	; 0x09
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     43c:	8e 81       	ldd	r24, Y+6	; 0x06
     43e:	9f 81       	ldd	r25, Y+7	; 0x07
     440:	a8 85       	ldd	r26, Y+8	; 0x08
     442:	b9 85       	ldd	r27, Y+9	; 0x09
     444:	8a 70       	andi	r24, 0x0A	; 10
     446:	99 27       	eor	r25, r25
     448:	aa 27       	eor	r26, r26
     44a:	bb 27       	eor	r27, r27
     44c:	89 2b       	or	r24, r25
     44e:	8a 2b       	or	r24, r26
     450:	8b 2b       	or	r24, r27
     452:	51 f2       	breq	.-108    	; 0x3e8 <application_task+0x46>
		{
			packageHandler_setTemperaturePercent(tempHumSensor_getTemp());
     454:	0e 94 12 33 	call	0x6624	; 0x6624 <tempHumSensor_getTemp>
     458:	0e 94 80 31 	call	0x6300	; 0x6300 <packageHandler_setTemperaturePercent>
			packageHandler_setHumidityPercent(tempHumSensor_getHum());
     45c:	0e 94 1d 33 	call	0x663a	; 0x663a <tempHumSensor_getHum>
     460:	0e 94 94 31 	call	0x6328	; 0x6328 <packageHandler_setHumidityPercent>
			packageHandler_setCO2ppm(co2Sensor_getPPM());
     464:	0e 94 20 32 	call	0x6440	; 0x6440 <co2Sensor_getPPM>
     468:	0e 94 a8 31 	call	0x6350	; 0x6350 <packageHandler_setCO2ppm>
			lora_driver_payload_t payload = packageHandler_getLoraPackage(2);
     46c:	ce 01       	movw	r24, r28
     46e:	0e 96       	adiw	r24, 0x0e	; 14
     470:	62 e0       	ldi	r22, 0x02	; 2
     472:	0e 94 bc 31 	call	0x6378	; 0x6378 <packageHandler_getLoraPackage>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     476:	80 91 10 1d 	lds	r24, 0x1D10	; 0x801d10 <uplinkMessageBufferHandle>
     47a:	90 91 11 1d 	lds	r25, 0x1D11	; 0x801d11 <uplinkMessageBufferHandle+0x1>
     47e:	be 01       	movw	r22, r28
     480:	62 5f       	subi	r22, 0xF2	; 242
     482:	7f 4f       	sbci	r23, 0xFF	; 255
     484:	0f ef       	ldi	r16, 0xFF	; 255
     486:	1f ef       	ldi	r17, 0xFF	; 255
     488:	98 01       	movw	r18, r16
     48a:	46 e1       	ldi	r20, 0x16	; 22
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <xStreamBufferSend>
     492:	89 83       	std	Y+1, r24	; 0x01
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	86 31       	cpi	r24, 0x16	; 22
     498:	29 f0       	breq	.+10     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
				printf("application.c ---> Timed out.\n");
     49a:	83 e3       	ldi	r24, 0x33	; 51
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <puts>
     4a2:	a2 cf       	rjmp	.-188    	; 0x3e8 <application_task+0x46>
				// 			printf("Bytes sent: %d\n", xBytesSent);
				// 			printf("Temp sent: %d\n", tem);
				// 			printf("Humidity sent: %d\n", hum);
				// 			printf("Size of payload: %d\n", sizeof(payload));
				//			receivePayload();
				printf("application.c ---> Bytes put in buffer: %d\n", xBytesSent);
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	88 2f       	mov	r24, r24
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	29 2f       	mov	r18, r25
     4ac:	2f 93       	push	r18
     4ae:	8f 93       	push	r24
     4b0:	81 e5       	ldi	r24, 0x51	; 81
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	89 2f       	mov	r24, r25
     4b6:	8f 93       	push	r24
     4b8:	81 e5       	ldi	r24, 0x51	; 81
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	8f 93       	push	r24
     4be:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
				
			}
		}
	}
     4ca:	8e cf       	rjmp	.-228    	; 0x3e8 <application_task+0x46>

000004cc <configuration_getMaxTemperature>:
static int16_t max_temperature = 0;
static int16_t min_temperature = 0;
static uint16_t max_humidity = 0;
static uint16_t min_humidity = 0;

int16_t configuration_getMaxTemperature(){
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
	return max_temperature;
     4d4:	80 91 02 0d 	lds	r24, 0x0D02	; 0x800d02 <__data_end>
     4d8:	90 91 03 0d 	lds	r25, 0x0D03	; 0x800d03 <__data_end+0x1>
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <configuration_getMaxHumidity>:

uint16_t configuration_getMaxHumidity(){
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
	return max_humidity;
     4ea:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <max_humidity>
     4ee:	90 91 05 0d 	lds	r25, 0x0D05	; 0x800d05 <max_humidity+0x1>
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <downlinkHandler_create>:
static lora_driver_payload_t _downlink_payload;
void downlinkHandler_createTask(UBaseType_t priority);
void downlinkHandler_task(void *pvParameters);

void downlinkHandler_create(UBaseType_t priority)
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	89 83       	std	Y+1, r24	; 0x01
	downlinkHandler_createTask(priority);
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	05 d0       	rcall	.+10     	; 0x512 <downlinkHandler_createTask>
}
     508:	00 00       	nop
     50a:	0f 90       	pop	r0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <downlinkHandler_createTask>:

void downlinkHandler_createTask(UBaseType_t priority){
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	1f 92       	push	r1
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
     524:	e1 2c       	mov	r14, r1
     526:	f1 2c       	mov	r15, r1
     528:	09 81       	ldd	r16, Y+1	; 0x01
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	48 e8       	ldi	r20, 0x88	; 136
     530:	51 e0       	ldi	r21, 0x01	; 1
     532:	6d e7       	ldi	r22, 0x7D	; 125
     534:	72 e0       	ldi	r23, 0x02	; 2
     536:	87 ea       	ldi	r24, 0xA7	; 167
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskCreate>
	,  "LRHandDownlink"
	,  configMINIMAL_STACK_SIZE+200
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     53e:	00 00       	nop
     540:	0f 90       	pop	r0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	08 95       	ret

0000054e <downlinkHandler_task>:

void downlinkHandler_task(void *pvParameters){
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	00 d0       	rcall	.+0      	; 0x558 <downlinkHandler_task+0xa>
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	9b 83       	std	Y+3, r25	; 0x03
     55e:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t xReceivedBytes = 0;
     560:	19 82       	std	Y+1, r1	; 0x01
	
	for(;;){
		
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle,
     562:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <downlinkMessageBufferHandle>
     566:	90 91 13 1d 	lds	r25, 0x1D13	; 0x801d13 <downlinkMessageBufferHandle+0x1>
     56a:	0f ef       	ldi	r16, 0xFF	; 255
     56c:	1f ef       	ldi	r17, 0xFF	; 255
     56e:	98 01       	movw	r18, r16
     570:	46 e1       	ldi	r20, 0x16	; 22
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	66 e0       	ldi	r22, 0x06	; 6
     576:	7d e0       	ldi	r23, 0x0D	; 13
     578:	0e 94 db 13 	call	0x27b6	; 0x27b6 <xStreamBufferReceive>
     57c:	89 83       	std	Y+1, r24	; 0x01
		&_downlink_payload,
		sizeof(lora_driver_payload_t),
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	88 23       	and	r24, r24
     582:	79 f3       	breq	.-34     	; 0x562 <downlinkHandler_task+0x14>
			printf("downlinkHandler ---> DOWN LINK: from port: %d with %d bytes received.\n", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     584:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <_downlink_payload+0x1>
     588:	28 2f       	mov	r18, r24
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	80 91 06 0d 	lds	r24, 0x0D06	; 0x800d06 <_downlink_payload>
     590:	88 2f       	mov	r24, r24
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	43 2f       	mov	r20, r19
     596:	4f 93       	push	r20
     598:	2f 93       	push	r18
     59a:	29 2f       	mov	r18, r25
     59c:	2f 93       	push	r18
     59e:	8f 93       	push	r24
     5a0:	8c e8       	ldi	r24, 0x8C	; 140
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	89 2f       	mov	r24, r25
     5a6:	8f 93       	push	r24
     5a8:	8c e8       	ldi	r24, 0x8C	; 140
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	8f 93       	push	r24
     5ae:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
// 				else{
// 					printf("downlinkHandler ---> ERROR: DownlinkHandler Couldn't obtain semaphore.\n");
// 				}
//			}
		}
	}
     5be:	d1 cf       	rjmp	.-94     	; 0x562 <downlinkHandler_task+0x14>

000005c0 <servoController_create>:
*/

#include "servoController.h"
#include <rc_servo.h>

void servoController_create(){
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
	rc_servo_initialise();
     5c8:	0e 94 f3 3d 	call	0x7be6	; 0x7be6 <rc_servo_initialise>
}
     5cc:	00 00       	nop
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <servoController_setPosition>:

void servoController_setPosition(uint8_t servoNo, int8_t percent){
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	1f 92       	push	r1
     5da:	1f 92       	push	r1
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	6a 83       	std	Y+2, r22	; 0x02
	rc_servo_setPosition(servoNo, percent);
     5e4:	6a 81       	ldd	r22, Y+2	; 0x02
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	0e 94 db 3d 	call	0x7bb6	; 0x7bb6 <rc_servo_setPosition>
     5ec:	00 00       	nop
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <windowController_create>:

void windowController_task(void *pvParameters);
void windowController_createTask(UBaseType_t priority);

void windowController_create(UBaseType_t priority)
{
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	1f 92       	push	r1
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	89 83       	std	Y+1, r24	; 0x01
	windowController_createTask(priority);
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	0f d0       	rcall	.+30     	; 0x626 <windowController_createTask>
	DDRA = 0xFF;
     608:	81 e2       	ldi	r24, 0x21	; 33
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	2f ef       	ldi	r18, 0xFF	; 255
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
	PORTA = 0xFF;
     612:	82 e2       	ldi	r24, 0x22	; 34
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	2f ef       	ldi	r18, 0xFF	; 255
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
}
     61c:	00 00       	nop
     61e:	0f 90       	pop	r0
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <windowController_createTask>:

void windowController_createTask(UBaseType_t priority){
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	1f 92       	push	r1
     632:	cd b7       	in	r28, 0x3d	; 61
     634:	de b7       	in	r29, 0x3e	; 62
     636:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
     638:	e1 2c       	mov	r14, r1
     63a:	f1 2c       	mov	r15, r1
     63c:	09 81       	ldd	r16, Y+1	; 0x01
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 ec       	ldi	r20, 0xC0	; 192
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	63 ed       	ldi	r22, 0xD3	; 211
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	81 e3       	ldi	r24, 0x31	; 49
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskCreate>
	,  "windowController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     652:	00 00       	nop
     654:	0f 90       	pop	r0
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	08 95       	ret

00000662 <windowController_task>:

void windowController_task(void *pvParameters) {
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	62 97       	sbiw	r28, 0x12	; 18
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	9a 8b       	std	Y+18, r25	; 0x12
     678:	89 8b       	std	Y+17, r24	; 0x11
	
	int16_t currentTemperature = 0;
     67a:	1a 82       	std	Y+2, r1	; 0x02
     67c:	19 82       	std	Y+1, r1	; 0x01
	uint16_t currentHumidity = 0;
     67e:	1c 82       	std	Y+4, r1	; 0x04
     680:	1b 82       	std	Y+3, r1	; 0x03
	int16_t thresholdTemperature = 0;
     682:	1e 82       	std	Y+6, r1	; 0x06
     684:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t thresholdHumidity = 0;
     686:	18 86       	std	Y+8, r1	; 0x08
     688:	1f 82       	std	Y+7, r1	; 0x07
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(5000);
     68a:	86 e3       	ldi	r24, 0x36	; 54
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	89 87       	std	Y+9, r24	; 0x09
     694:	9a 87       	std	Y+10, r25	; 0x0a
     696:	ab 87       	std	Y+11, r26	; 0x0b
     698:	bc 87       	std	Y+12, r27	; 0x0c
	xLastWakeTime = xTaskGetTickCount();
     69a:	0e 94 c0 1b 	call	0x3780	; 0x3780 <xTaskGetTickCount>
     69e:	dc 01       	movw	r26, r24
     6a0:	cb 01       	movw	r24, r22
     6a2:	8d 87       	std	Y+13, r24	; 0x0d
     6a4:	9e 87       	std	Y+14, r25	; 0x0e
     6a6:	af 87       	std	Y+15, r26	; 0x0f
     6a8:	b8 8b       	std	Y+16, r27	; 0x10
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     6aa:	89 85       	ldd	r24, Y+9	; 0x09
     6ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ae:	ab 85       	ldd	r26, Y+11	; 0x0b
     6b0:	bc 85       	ldd	r27, Y+12	; 0x0c
     6b2:	9e 01       	movw	r18, r28
     6b4:	23 5f       	subi	r18, 0xF3	; 243
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
     6b8:	ac 01       	movw	r20, r24
     6ba:	bd 01       	movw	r22, r26
     6bc:	c9 01       	movw	r24, r18
     6be:	0e 94 f5 18 	call	0x31ea	; 0x31ea <xTaskDelayUntil>
		thresholdTemperature = configuration_getMaxTemperature();
     6c2:	04 df       	rcall	.-504    	; 0x4cc <configuration_getMaxTemperature>
     6c4:	9e 83       	std	Y+6, r25	; 0x06
     6c6:	8d 83       	std	Y+5, r24	; 0x05
		thresholdHumidity = configuration_getMaxHumidity();
     6c8:	0c df       	rcall	.-488    	; 0x4e2 <configuration_getMaxHumidity>
     6ca:	98 87       	std	Y+8, r25	; 0x08
     6cc:	8f 83       	std	Y+7, r24	; 0x07
     6ce:	0e 94 49 33 	call	0x6692	; 0x6692 <tempHumSensor_measure>
		
		tempHumSensor_measure();
     6d2:	0e 94 12 33 	call	0x6624	; 0x6624 <tempHumSensor_getTemp>
		currentTemperature = tempHumSensor_getTemp();
     6d6:	9a 83       	std	Y+2, r25	; 0x02
     6d8:	89 83       	std	Y+1, r24	; 0x01
     6da:	0e 94 1d 33 	call	0x663a	; 0x663a <tempHumSensor_getHum>
		currentHumidity = tempHumSensor_getHum();
     6de:	9c 83       	std	Y+4, r25	; 0x04
     6e0:	8b 83       	std	Y+3, r24	; 0x03
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
		
		printf("windowController.c ---> Checked temp: %d threshold: %d \n", currentTemperature/10, thresholdTemperature);
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	2a e0       	ldi	r18, 0x0A	; 10
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	b9 01       	movw	r22, r18
     6ec:	0e 94 09 4a 	call	0x9412	; 0x9412 <__divmodhi4>
     6f0:	cb 01       	movw	r24, r22
     6f2:	2e 81       	ldd	r18, Y+6	; 0x06
     6f4:	2f 93       	push	r18
     6f6:	2d 81       	ldd	r18, Y+5	; 0x05
     6f8:	2f 93       	push	r18
     6fa:	29 2f       	mov	r18, r25
     6fc:	2f 93       	push	r18
     6fe:	8f 93       	push	r24
     700:	84 ee       	ldi	r24, 0xE4	; 228
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	89 2f       	mov	r24, r25
     706:	8f 93       	push	r24
     708:	84 ee       	ldi	r24, 0xE4	; 228
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	8f 93       	push	r24
     70e:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
		printf("windowController.c ---> Checked hum: %d threshold: %d \n", currentHumidity/10, thresholdHumidity);
     720:	9c 81       	ldd	r25, Y+4	; 0x04
     722:	9c 01       	movw	r18, r24
     724:	ad ec       	ldi	r26, 0xCD	; 205
     726:	bc ec       	ldi	r27, 0xCC	; 204
     728:	0e 94 46 4a 	call	0x948c	; 0x948c <__umulhisi3>
     72c:	96 95       	lsr	r25
     72e:	87 95       	ror	r24
     730:	96 95       	lsr	r25
     732:	87 95       	ror	r24
     734:	96 95       	lsr	r25
     736:	87 95       	ror	r24
     738:	28 85       	ldd	r18, Y+8	; 0x08
     73a:	2f 93       	push	r18
     73c:	2f 81       	ldd	r18, Y+7	; 0x07
     73e:	2f 93       	push	r18
     740:	29 2f       	mov	r18, r25
     742:	2f 93       	push	r18
     744:	8f 93       	push	r24
     746:	8d e1       	ldi	r24, 0x1D	; 29
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	89 2f       	mov	r24, r25
     74c:	8f 93       	push	r24
     74e:	8d e1       	ldi	r24, 0x1D	; 29
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	8f 93       	push	r24
     754:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	89 81       	ldd	r24, Y+1	; 0x01
	if(currentTemperature/10 > thresholdTemperature){
     766:	9a 81       	ldd	r25, Y+2	; 0x02
     768:	2a e0       	ldi	r18, 0x0A	; 10
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	b9 01       	movw	r22, r18
     76e:	0e 94 09 4a 	call	0x9412	; 0x9412 <__divmodhi4>
     772:	cb 01       	movw	r24, r22
     774:	9c 01       	movw	r18, r24
     776:	8d 81       	ldd	r24, Y+5	; 0x05
     778:	9e 81       	ldd	r25, Y+6	; 0x06
     77a:	82 17       	cp	r24, r18
     77c:	93 07       	cpc	r25, r19
     77e:	24 f4       	brge	.+8      	; 0x788 <windowController_task+0x126>
     780:	64 e6       	ldi	r22, 0x64	; 100
		// 			PORTA = 0x00;
		servoController_setPosition(0, 100);
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	27 df       	rcall	.-434    	; 0x5d4 <servoController_setPosition>
     786:	91 cf       	rjmp	.-222    	; 0x6aa <windowController_task+0x48>
     788:	6c e9       	ldi	r22, 0x9C	; 156
	}
	else{
		// 			PORTA = 0xFF;
		servoController_setPosition(0, -100);
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	23 df       	rcall	.-442    	; 0x5d4 <servoController_setPosition>
     78e:	8d cf       	rjmp	.-230    	; 0x6aa <windowController_task+0x48>

00000790 <xEventGroupCreate>:
     790:	cf 93       	push	r28
	}
	}
     792:	df 93       	push	r29
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
     794:	1f 92       	push	r1
     796:	1f 92       	push	r1
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	8f e0       	ldi	r24, 0x0F	; 15
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	aa d2       	rcall	.+1364   	; 0xcf6 <pvPortMalloc>
     7a2:	9a 83       	std	Y+2, r25	; 0x02
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	9a 81       	ldd	r25, Y+2	; 0x02
     7aa:	89 2b       	or	r24, r25
     7ac:	59 f0       	breq	.+22     	; 0x7c4 <xEventGroupCreate+0x34>
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	9a 81       	ldd	r25, Y+2	; 0x02
     7b2:	fc 01       	movw	r30, r24
     7b4:	10 82       	st	Z, r1
     7b6:	11 82       	std	Z+1, r1	; 0x01
     7b8:	12 82       	std	Z+2, r1	; 0x02
     7ba:	13 82       	std	Z+3, r1	; 0x03
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	04 96       	adiw	r24, 0x04	; 4
     7c2:	52 d5       	rcall	.+2724   	; 0x1268 <vListInitialise>
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <xEventGroupWaitBits>:
     7d2:	cf 92       	push	r12
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	6d 97       	sbiw	r28, 0x1d	; 29
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	9b 8b       	std	Y+19, r25	; 0x13
     7f4:	8a 8b       	std	Y+18, r24	; 0x12
     7f6:	4c 8b       	std	Y+20, r20	; 0x14
     7f8:	5d 8b       	std	Y+21, r21	; 0x15
     7fa:	6e 8b       	std	Y+22, r22	; 0x16
     7fc:	7f 8b       	std	Y+23, r23	; 0x17
     7fe:	28 8f       	std	Y+24, r18	; 0x18
     800:	09 8f       	std	Y+25, r16	; 0x19
     802:	ca 8e       	std	Y+26, r12	; 0x1a
     804:	db 8e       	std	Y+27, r13	; 0x1b
     806:	ec 8e       	std	Y+28, r14	; 0x1c
     808:	fd 8e       	std	Y+29, r15	; 0x1d
     80a:	8a 89       	ldd	r24, Y+18	; 0x12
     80c:	9b 89       	ldd	r25, Y+19	; 0x13
     80e:	9a 87       	std	Y+10, r25	; 0x0a
     810:	89 87       	std	Y+9, r24	; 0x09
     812:	1d 82       	std	Y+5, r1	; 0x05
     814:	1e 82       	std	Y+6, r1	; 0x06
     816:	1f 82       	std	Y+7, r1	; 0x07
     818:	18 86       	std	Y+8, r1	; 0x08
     81a:	1b 86       	std	Y+11, r1	; 0x0b
     81c:	0e 94 24 1a 	call	0x3448	; 0x3448 <vTaskSuspendAll>
     820:	89 85       	ldd	r24, Y+9	; 0x09
     822:	9a 85       	ldd	r25, Y+10	; 0x0a
     824:	fc 01       	movw	r30, r24
     826:	80 81       	ld	r24, Z
     828:	91 81       	ldd	r25, Z+1	; 0x01
     82a:	a2 81       	ldd	r26, Z+2	; 0x02
     82c:	b3 81       	ldd	r27, Z+3	; 0x03
     82e:	8c 87       	std	Y+12, r24	; 0x0c
     830:	9d 87       	std	Y+13, r25	; 0x0d
     832:	ae 87       	std	Y+14, r26	; 0x0e
     834:	bf 87       	std	Y+15, r27	; 0x0f
     836:	2c 89       	ldd	r18, Y+20	; 0x14
     838:	3d 89       	ldd	r19, Y+21	; 0x15
     83a:	4e 89       	ldd	r20, Y+22	; 0x16
     83c:	5f 89       	ldd	r21, Y+23	; 0x17
     83e:	8c 85       	ldd	r24, Y+12	; 0x0c
     840:	9d 85       	ldd	r25, Y+13	; 0x0d
     842:	ae 85       	ldd	r26, Y+14	; 0x0e
     844:	bf 85       	ldd	r27, Y+15	; 0x0f
     846:	09 8d       	ldd	r16, Y+25	; 0x19
     848:	bc 01       	movw	r22, r24
     84a:	cd 01       	movw	r24, r26
     84c:	07 d2       	rcall	.+1038   	; 0xc5c <prvTestWaitCondition>
     84e:	88 8b       	std	Y+16, r24	; 0x10
     850:	88 89       	ldd	r24, Y+16	; 0x10
     852:	88 23       	and	r24, r24
     854:	59 f1       	breq	.+86     	; 0x8ac <xEventGroupWaitBits+0xda>
     856:	8c 85       	ldd	r24, Y+12	; 0x0c
     858:	9d 85       	ldd	r25, Y+13	; 0x0d
     85a:	ae 85       	ldd	r26, Y+14	; 0x0e
     85c:	bf 85       	ldd	r27, Y+15	; 0x0f
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	9a 83       	std	Y+2, r25	; 0x02
     862:	ab 83       	std	Y+3, r26	; 0x03
     864:	bc 83       	std	Y+4, r27	; 0x04
     866:	1a 8e       	std	Y+26, r1	; 0x1a
     868:	1b 8e       	std	Y+27, r1	; 0x1b
     86a:	1c 8e       	std	Y+28, r1	; 0x1c
     86c:	1d 8e       	std	Y+29, r1	; 0x1d
     86e:	88 8d       	ldd	r24, Y+24	; 0x18
     870:	88 23       	and	r24, r24
     872:	09 f4       	brne	.+2      	; 0x876 <xEventGroupWaitBits+0xa4>
     874:	65 c0       	rjmp	.+202    	; 0x940 <xEventGroupWaitBits+0x16e>
     876:	89 85       	ldd	r24, Y+9	; 0x09
     878:	9a 85       	ldd	r25, Y+10	; 0x0a
     87a:	fc 01       	movw	r30, r24
     87c:	20 81       	ld	r18, Z
     87e:	31 81       	ldd	r19, Z+1	; 0x01
     880:	42 81       	ldd	r20, Z+2	; 0x02
     882:	53 81       	ldd	r21, Z+3	; 0x03
     884:	8c 89       	ldd	r24, Y+20	; 0x14
     886:	9d 89       	ldd	r25, Y+21	; 0x15
     888:	ae 89       	ldd	r26, Y+22	; 0x16
     88a:	bf 89       	ldd	r27, Y+23	; 0x17
     88c:	80 95       	com	r24
     88e:	90 95       	com	r25
     890:	a0 95       	com	r26
     892:	b0 95       	com	r27
     894:	82 23       	and	r24, r18
     896:	93 23       	and	r25, r19
     898:	a4 23       	and	r26, r20
     89a:	b5 23       	and	r27, r21
     89c:	29 85       	ldd	r18, Y+9	; 0x09
     89e:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a0:	f9 01       	movw	r30, r18
     8a2:	80 83       	st	Z, r24
     8a4:	91 83       	std	Z+1, r25	; 0x01
     8a6:	a2 83       	std	Z+2, r26	; 0x02
     8a8:	b3 83       	std	Z+3, r27	; 0x03
     8aa:	4a c0       	rjmp	.+148    	; 0x940 <xEventGroupWaitBits+0x16e>
     8ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8b0:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8b2:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8b4:	89 2b       	or	r24, r25
     8b6:	8a 2b       	or	r24, r26
     8b8:	8b 2b       	or	r24, r27
     8ba:	59 f4       	brne	.+22     	; 0x8d2 <xEventGroupWaitBits+0x100>
     8bc:	8c 85       	ldd	r24, Y+12	; 0x0c
     8be:	9d 85       	ldd	r25, Y+13	; 0x0d
     8c0:	ae 85       	ldd	r26, Y+14	; 0x0e
     8c2:	bf 85       	ldd	r27, Y+15	; 0x0f
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	9a 83       	std	Y+2, r25	; 0x02
     8c8:	ab 83       	std	Y+3, r26	; 0x03
     8ca:	bc 83       	std	Y+4, r27	; 0x04
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	8b 87       	std	Y+11, r24	; 0x0b
     8d0:	37 c0       	rjmp	.+110    	; 0x940 <xEventGroupWaitBits+0x16e>
     8d2:	88 8d       	ldd	r24, Y+24	; 0x18
     8d4:	88 23       	and	r24, r24
     8d6:	49 f0       	breq	.+18     	; 0x8ea <xEventGroupWaitBits+0x118>
     8d8:	8d 81       	ldd	r24, Y+5	; 0x05
     8da:	9e 81       	ldd	r25, Y+6	; 0x06
     8dc:	af 81       	ldd	r26, Y+7	; 0x07
     8de:	b8 85       	ldd	r27, Y+8	; 0x08
     8e0:	b1 60       	ori	r27, 0x01	; 1
     8e2:	8d 83       	std	Y+5, r24	; 0x05
     8e4:	9e 83       	std	Y+6, r25	; 0x06
     8e6:	af 83       	std	Y+7, r26	; 0x07
     8e8:	b8 87       	std	Y+8, r27	; 0x08
     8ea:	89 8d       	ldd	r24, Y+25	; 0x19
     8ec:	88 23       	and	r24, r24
     8ee:	49 f0       	breq	.+18     	; 0x902 <xEventGroupWaitBits+0x130>
     8f0:	8d 81       	ldd	r24, Y+5	; 0x05
     8f2:	9e 81       	ldd	r25, Y+6	; 0x06
     8f4:	af 81       	ldd	r26, Y+7	; 0x07
     8f6:	b8 85       	ldd	r27, Y+8	; 0x08
     8f8:	b4 60       	ori	r27, 0x04	; 4
     8fa:	8d 83       	std	Y+5, r24	; 0x05
     8fc:	9e 83       	std	Y+6, r25	; 0x06
     8fe:	af 83       	std	Y+7, r26	; 0x07
     900:	b8 87       	std	Y+8, r27	; 0x08
     902:	2c 89       	ldd	r18, Y+20	; 0x14
     904:	3d 89       	ldd	r19, Y+21	; 0x15
     906:	4e 89       	ldd	r20, Y+22	; 0x16
     908:	5f 89       	ldd	r21, Y+23	; 0x17
     90a:	8d 81       	ldd	r24, Y+5	; 0x05
     90c:	9e 81       	ldd	r25, Y+6	; 0x06
     90e:	af 81       	ldd	r26, Y+7	; 0x07
     910:	b8 85       	ldd	r27, Y+8	; 0x08
     912:	82 2b       	or	r24, r18
     914:	93 2b       	or	r25, r19
     916:	a4 2b       	or	r26, r20
     918:	b5 2b       	or	r27, r21
     91a:	29 85       	ldd	r18, Y+9	; 0x09
     91c:	3a 85       	ldd	r19, Y+10	; 0x0a
     91e:	f9 01       	movw	r30, r18
     920:	34 96       	adiw	r30, 0x04	; 4
     922:	2a 8d       	ldd	r18, Y+26	; 0x1a
     924:	3b 8d       	ldd	r19, Y+27	; 0x1b
     926:	4c 8d       	ldd	r20, Y+28	; 0x1c
     928:	5d 8d       	ldd	r21, Y+29	; 0x1d
     92a:	89 01       	movw	r16, r18
     92c:	9a 01       	movw	r18, r20
     92e:	ac 01       	movw	r20, r24
     930:	bd 01       	movw	r22, r26
     932:	cf 01       	movw	r24, r30
     934:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vTaskPlaceOnUnorderedEventList>
     938:	19 82       	std	Y+1, r1	; 0x01
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	1b 82       	std	Y+3, r1	; 0x03
     93e:	1c 82       	std	Y+4, r1	; 0x04
     940:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
     944:	89 8b       	std	Y+17, r24	; 0x11
     946:	8a 8d       	ldd	r24, Y+26	; 0x1a
     948:	9b 8d       	ldd	r25, Y+27	; 0x1b
     94a:	ac 8d       	ldd	r26, Y+28	; 0x1c
     94c:	bd 8d       	ldd	r27, Y+29	; 0x1d
     94e:	89 2b       	or	r24, r25
     950:	8a 2b       	or	r24, r26
     952:	8b 2b       	or	r24, r27
     954:	09 f4       	brne	.+2      	; 0x958 <xEventGroupWaitBits+0x186>
     956:	5f c0       	rjmp	.+190    	; 0xa16 <xEventGroupWaitBits+0x244>
     958:	89 89       	ldd	r24, Y+17	; 0x11
     95a:	88 23       	and	r24, r24
     95c:	09 f4       	brne	.+2      	; 0x960 <xEventGroupWaitBits+0x18e>
     95e:	75 d6       	rcall	.+3306   	; 0x164a <vPortYield>
     960:	0e 94 12 25 	call	0x4a24	; 0x4a24 <uxTaskResetEventItemValue>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	9a 83       	std	Y+2, r25	; 0x02
     96c:	ab 83       	std	Y+3, r26	; 0x03
     96e:	bc 83       	std	Y+4, r27	; 0x04
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	ab 81       	ldd	r26, Y+3	; 0x03
     976:	bc 81       	ldd	r27, Y+4	; 0x04
     978:	88 27       	eor	r24, r24
     97a:	99 27       	eor	r25, r25
     97c:	aa 27       	eor	r26, r26
     97e:	b2 70       	andi	r27, 0x02	; 2
     980:	89 2b       	or	r24, r25
     982:	8a 2b       	or	r24, r26
     984:	8b 2b       	or	r24, r27
     986:	09 f0       	breq	.+2      	; 0x98a <xEventGroupWaitBits+0x1b8>
     988:	3d c0       	rjmp	.+122    	; 0xa04 <xEventGroupWaitBits+0x232>
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	0f 92       	push	r0
     990:	89 85       	ldd	r24, Y+9	; 0x09
     992:	9a 85       	ldd	r25, Y+10	; 0x0a
     994:	fc 01       	movw	r30, r24
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	a2 81       	ldd	r26, Z+2	; 0x02
     99c:	b3 81       	ldd	r27, Z+3	; 0x03
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	9a 83       	std	Y+2, r25	; 0x02
     9a2:	ab 83       	std	Y+3, r26	; 0x03
     9a4:	bc 83       	std	Y+4, r27	; 0x04
     9a6:	2c 89       	ldd	r18, Y+20	; 0x14
     9a8:	3d 89       	ldd	r19, Y+21	; 0x15
     9aa:	4e 89       	ldd	r20, Y+22	; 0x16
     9ac:	5f 89       	ldd	r21, Y+23	; 0x17
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	9a 81       	ldd	r25, Y+2	; 0x02
     9b2:	ab 81       	ldd	r26, Y+3	; 0x03
     9b4:	bc 81       	ldd	r27, Y+4	; 0x04
     9b6:	09 8d       	ldd	r16, Y+25	; 0x19
     9b8:	bc 01       	movw	r22, r24
     9ba:	cd 01       	movw	r24, r26
     9bc:	4f d1       	rcall	.+670    	; 0xc5c <prvTestWaitCondition>
     9be:	88 23       	and	r24, r24
     9c0:	e9 f0       	breq	.+58     	; 0x9fc <xEventGroupWaitBits+0x22a>
     9c2:	88 8d       	ldd	r24, Y+24	; 0x18
     9c4:	88 23       	and	r24, r24
     9c6:	d1 f0       	breq	.+52     	; 0x9fc <xEventGroupWaitBits+0x22a>
     9c8:	89 85       	ldd	r24, Y+9	; 0x09
     9ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     9cc:	fc 01       	movw	r30, r24
     9ce:	20 81       	ld	r18, Z
     9d0:	31 81       	ldd	r19, Z+1	; 0x01
     9d2:	42 81       	ldd	r20, Z+2	; 0x02
     9d4:	53 81       	ldd	r21, Z+3	; 0x03
     9d6:	8c 89       	ldd	r24, Y+20	; 0x14
     9d8:	9d 89       	ldd	r25, Y+21	; 0x15
     9da:	ae 89       	ldd	r26, Y+22	; 0x16
     9dc:	bf 89       	ldd	r27, Y+23	; 0x17
     9de:	80 95       	com	r24
     9e0:	90 95       	com	r25
     9e2:	a0 95       	com	r26
     9e4:	b0 95       	com	r27
     9e6:	82 23       	and	r24, r18
     9e8:	93 23       	and	r25, r19
     9ea:	a4 23       	and	r26, r20
     9ec:	b5 23       	and	r27, r21
     9ee:	29 85       	ldd	r18, Y+9	; 0x09
     9f0:	3a 85       	ldd	r19, Y+10	; 0x0a
     9f2:	f9 01       	movw	r30, r18
     9f4:	80 83       	st	Z, r24
     9f6:	91 83       	std	Z+1, r25	; 0x01
     9f8:	a2 83       	std	Z+2, r26	; 0x02
     9fa:	b3 83       	std	Z+3, r27	; 0x03
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	8b 87       	std	Y+11, r24	; 0x0b
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	ab 81       	ldd	r26, Y+3	; 0x03
     a0a:	bc 81       	ldd	r27, Y+4	; 0x04
     a0c:	bb 27       	eor	r27, r27
     a0e:	89 83       	std	Y+1, r24	; 0x01
     a10:	9a 83       	std	Y+2, r25	; 0x02
     a12:	ab 83       	std	Y+3, r26	; 0x03
     a14:	bc 83       	std	Y+4, r27	; 0x04
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	ab 81       	ldd	r26, Y+3	; 0x03
     a1c:	bc 81       	ldd	r27, Y+4	; 0x04
     a1e:	bc 01       	movw	r22, r24
     a20:	cd 01       	movw	r24, r26
     a22:	6d 96       	adiw	r28, 0x1d	; 29
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	cf 90       	pop	r12
     a3e:	08 95       	ret

00000a40 <xEventGroupSetBits>:
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	6d 97       	sbiw	r28, 0x1d	; 29
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	99 8f       	std	Y+25, r25	; 0x19
     a56:	88 8f       	std	Y+24, r24	; 0x18
     a58:	4a 8f       	std	Y+26, r20	; 0x1a
     a5a:	5b 8f       	std	Y+27, r21	; 0x1b
     a5c:	6c 8f       	std	Y+28, r22	; 0x1c
     a5e:	7d 8f       	std	Y+29, r23	; 0x1d
     a60:	1b 82       	std	Y+3, r1	; 0x03
     a62:	1c 82       	std	Y+4, r1	; 0x04
     a64:	1d 82       	std	Y+5, r1	; 0x05
     a66:	1e 82       	std	Y+6, r1	; 0x06
     a68:	88 8d       	ldd	r24, Y+24	; 0x18
     a6a:	99 8d       	ldd	r25, Y+25	; 0x19
     a6c:	99 87       	std	Y+9, r25	; 0x09
     a6e:	88 87       	std	Y+8, r24	; 0x08
     a70:	1f 82       	std	Y+7, r1	; 0x07
     a72:	88 85       	ldd	r24, Y+8	; 0x08
     a74:	99 85       	ldd	r25, Y+9	; 0x09
     a76:	04 96       	adiw	r24, 0x04	; 4
     a78:	9b 87       	std	Y+11, r25	; 0x0b
     a7a:	8a 87       	std	Y+10, r24	; 0x0a
     a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a7e:	9b 85       	ldd	r25, Y+11	; 0x0b
     a80:	03 96       	adiw	r24, 0x03	; 3
     a82:	9d 87       	std	Y+13, r25	; 0x0d
     a84:	8c 87       	std	Y+12, r24	; 0x0c
     a86:	0e 94 24 1a 	call	0x3448	; 0x3448 <vTaskSuspendAll>
     a8a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a8c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a8e:	fc 01       	movw	r30, r24
     a90:	87 81       	ldd	r24, Z+7	; 0x07
     a92:	90 85       	ldd	r25, Z+8	; 0x08
     a94:	9a 83       	std	Y+2, r25	; 0x02
     a96:	89 83       	std	Y+1, r24	; 0x01
     a98:	88 85       	ldd	r24, Y+8	; 0x08
     a9a:	99 85       	ldd	r25, Y+9	; 0x09
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 81       	ld	r18, Z
     aa0:	31 81       	ldd	r19, Z+1	; 0x01
     aa2:	42 81       	ldd	r20, Z+2	; 0x02
     aa4:	53 81       	ldd	r21, Z+3	; 0x03
     aa6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aa8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     aaa:	ac 8d       	ldd	r26, Y+28	; 0x1c
     aac:	bd 8d       	ldd	r27, Y+29	; 0x1d
     aae:	82 2b       	or	r24, r18
     ab0:	93 2b       	or	r25, r19
     ab2:	a4 2b       	or	r26, r20
     ab4:	b5 2b       	or	r27, r21
     ab6:	28 85       	ldd	r18, Y+8	; 0x08
     ab8:	39 85       	ldd	r19, Y+9	; 0x09
     aba:	f9 01       	movw	r30, r18
     abc:	80 83       	st	Z, r24
     abe:	91 83       	std	Z+1, r25	; 0x01
     ac0:	a2 83       	std	Z+2, r26	; 0x02
     ac2:	b3 83       	std	Z+3, r27	; 0x03
     ac4:	95 c0       	rjmp	.+298    	; 0xbf0 <xEventGroupSetBits+0x1b0>
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	9a 81       	ldd	r25, Y+2	; 0x02
     aca:	fc 01       	movw	r30, r24
     acc:	84 81       	ldd	r24, Z+4	; 0x04
     ace:	95 81       	ldd	r25, Z+5	; 0x05
     ad0:	9f 87       	std	Y+15, r25	; 0x0f
     ad2:	8e 87       	std	Y+14, r24	; 0x0e
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	fc 01       	movw	r30, r24
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	a2 81       	ldd	r26, Z+2	; 0x02
     ae0:	b3 81       	ldd	r27, Z+3	; 0x03
     ae2:	88 8b       	std	Y+16, r24	; 0x10
     ae4:	99 8b       	std	Y+17, r25	; 0x11
     ae6:	aa 8b       	std	Y+18, r26	; 0x12
     ae8:	bb 8b       	std	Y+19, r27	; 0x13
     aea:	1f 82       	std	Y+7, r1	; 0x07
     aec:	88 89       	ldd	r24, Y+16	; 0x10
     aee:	99 89       	ldd	r25, Y+17	; 0x11
     af0:	aa 89       	ldd	r26, Y+18	; 0x12
     af2:	bb 89       	ldd	r27, Y+19	; 0x13
     af4:	88 27       	eor	r24, r24
     af6:	99 27       	eor	r25, r25
     af8:	aa 27       	eor	r26, r26
     afa:	8c 8b       	std	Y+20, r24	; 0x14
     afc:	9d 8b       	std	Y+21, r25	; 0x15
     afe:	ae 8b       	std	Y+22, r26	; 0x16
     b00:	bf 8b       	std	Y+23, r27	; 0x17
     b02:	88 89       	ldd	r24, Y+16	; 0x10
     b04:	99 89       	ldd	r25, Y+17	; 0x11
     b06:	aa 89       	ldd	r26, Y+18	; 0x12
     b08:	bb 89       	ldd	r27, Y+19	; 0x13
     b0a:	bb 27       	eor	r27, r27
     b0c:	88 8b       	std	Y+16, r24	; 0x10
     b0e:	99 8b       	std	Y+17, r25	; 0x11
     b10:	aa 8b       	std	Y+18, r26	; 0x12
     b12:	bb 8b       	std	Y+19, r27	; 0x13
     b14:	8c 89       	ldd	r24, Y+20	; 0x14
     b16:	9d 89       	ldd	r25, Y+21	; 0x15
     b18:	ae 89       	ldd	r26, Y+22	; 0x16
     b1a:	bf 89       	ldd	r27, Y+23	; 0x17
     b1c:	88 27       	eor	r24, r24
     b1e:	99 27       	eor	r25, r25
     b20:	aa 27       	eor	r26, r26
     b22:	b4 70       	andi	r27, 0x04	; 4
     b24:	89 2b       	or	r24, r25
     b26:	8a 2b       	or	r24, r26
     b28:	8b 2b       	or	r24, r27
     b2a:	b1 f4       	brne	.+44     	; 0xb58 <xEventGroupSetBits+0x118>
     b2c:	88 85       	ldd	r24, Y+8	; 0x08
     b2e:	99 85       	ldd	r25, Y+9	; 0x09
     b30:	fc 01       	movw	r30, r24
     b32:	20 81       	ld	r18, Z
     b34:	31 81       	ldd	r19, Z+1	; 0x01
     b36:	42 81       	ldd	r20, Z+2	; 0x02
     b38:	53 81       	ldd	r21, Z+3	; 0x03
     b3a:	88 89       	ldd	r24, Y+16	; 0x10
     b3c:	99 89       	ldd	r25, Y+17	; 0x11
     b3e:	aa 89       	ldd	r26, Y+18	; 0x12
     b40:	bb 89       	ldd	r27, Y+19	; 0x13
     b42:	82 23       	and	r24, r18
     b44:	93 23       	and	r25, r19
     b46:	a4 23       	and	r26, r20
     b48:	b5 23       	and	r27, r21
     b4a:	89 2b       	or	r24, r25
     b4c:	8a 2b       	or	r24, r26
     b4e:	8b 2b       	or	r24, r27
     b50:	e9 f0       	breq	.+58     	; 0xb8c <xEventGroupSetBits+0x14c>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	8f 83       	std	Y+7, r24	; 0x07
     b56:	1a c0       	rjmp	.+52     	; 0xb8c <xEventGroupSetBits+0x14c>
     b58:	88 85       	ldd	r24, Y+8	; 0x08
     b5a:	99 85       	ldd	r25, Y+9	; 0x09
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 81       	ld	r18, Z
     b60:	31 81       	ldd	r19, Z+1	; 0x01
     b62:	42 81       	ldd	r20, Z+2	; 0x02
     b64:	53 81       	ldd	r21, Z+3	; 0x03
     b66:	88 89       	ldd	r24, Y+16	; 0x10
     b68:	99 89       	ldd	r25, Y+17	; 0x11
     b6a:	aa 89       	ldd	r26, Y+18	; 0x12
     b6c:	bb 89       	ldd	r27, Y+19	; 0x13
     b6e:	28 23       	and	r18, r24
     b70:	39 23       	and	r19, r25
     b72:	4a 23       	and	r20, r26
     b74:	5b 23       	and	r21, r27
     b76:	88 89       	ldd	r24, Y+16	; 0x10
     b78:	99 89       	ldd	r25, Y+17	; 0x11
     b7a:	aa 89       	ldd	r26, Y+18	; 0x12
     b7c:	bb 89       	ldd	r27, Y+19	; 0x13
     b7e:	28 17       	cp	r18, r24
     b80:	39 07       	cpc	r19, r25
     b82:	4a 07       	cpc	r20, r26
     b84:	5b 07       	cpc	r21, r27
     b86:	11 f4       	brne	.+4      	; 0xb8c <xEventGroupSetBits+0x14c>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	8f 83       	std	Y+7, r24	; 0x07
     b8c:	8f 81       	ldd	r24, Y+7	; 0x07
     b8e:	88 23       	and	r24, r24
     b90:	59 f1       	breq	.+86     	; 0xbe8 <xEventGroupSetBits+0x1a8>
     b92:	8c 89       	ldd	r24, Y+20	; 0x14
     b94:	9d 89       	ldd	r25, Y+21	; 0x15
     b96:	ae 89       	ldd	r26, Y+22	; 0x16
     b98:	bf 89       	ldd	r27, Y+23	; 0x17
     b9a:	88 27       	eor	r24, r24
     b9c:	99 27       	eor	r25, r25
     b9e:	aa 27       	eor	r26, r26
     ba0:	b1 70       	andi	r27, 0x01	; 1
     ba2:	89 2b       	or	r24, r25
     ba4:	8a 2b       	or	r24, r26
     ba6:	8b 2b       	or	r24, r27
     ba8:	81 f0       	breq	.+32     	; 0xbca <xEventGroupSetBits+0x18a>
     baa:	2b 81       	ldd	r18, Y+3	; 0x03
     bac:	3c 81       	ldd	r19, Y+4	; 0x04
     bae:	4d 81       	ldd	r20, Y+5	; 0x05
     bb0:	5e 81       	ldd	r21, Y+6	; 0x06
     bb2:	88 89       	ldd	r24, Y+16	; 0x10
     bb4:	99 89       	ldd	r25, Y+17	; 0x11
     bb6:	aa 89       	ldd	r26, Y+18	; 0x12
     bb8:	bb 89       	ldd	r27, Y+19	; 0x13
     bba:	82 2b       	or	r24, r18
     bbc:	93 2b       	or	r25, r19
     bbe:	a4 2b       	or	r26, r20
     bc0:	b5 2b       	or	r27, r21
     bc2:	8b 83       	std	Y+3, r24	; 0x03
     bc4:	9c 83       	std	Y+4, r25	; 0x04
     bc6:	ad 83       	std	Y+5, r26	; 0x05
     bc8:	be 83       	std	Y+6, r27	; 0x06
     bca:	88 85       	ldd	r24, Y+8	; 0x08
     bcc:	99 85       	ldd	r25, Y+9	; 0x09
     bce:	fc 01       	movw	r30, r24
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	a2 81       	ldd	r26, Z+2	; 0x02
     bd6:	b3 81       	ldd	r27, Z+3	; 0x03
     bd8:	b2 60       	ori	r27, 0x02	; 2
     bda:	29 81       	ldd	r18, Y+1	; 0x01
     bdc:	3a 81       	ldd	r19, Y+2	; 0x02
     bde:	ac 01       	movw	r20, r24
     be0:	bd 01       	movw	r22, r26
     be2:	c9 01       	movw	r24, r18
     be4:	0e 94 02 21 	call	0x4204	; 0x4204 <vTaskRemoveFromUnorderedEventList>
     be8:	8e 85       	ldd	r24, Y+14	; 0x0e
     bea:	9f 85       	ldd	r25, Y+15	; 0x0f
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	29 81       	ldd	r18, Y+1	; 0x01
     bf2:	3a 81       	ldd	r19, Y+2	; 0x02
     bf4:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf6:	9d 85       	ldd	r25, Y+13	; 0x0d
     bf8:	28 17       	cp	r18, r24
     bfa:	39 07       	cpc	r19, r25
     bfc:	09 f0       	breq	.+2      	; 0xc00 <xEventGroupSetBits+0x1c0>
     bfe:	63 cf       	rjmp	.-314    	; 0xac6 <xEventGroupSetBits+0x86>
     c00:	88 85       	ldd	r24, Y+8	; 0x08
     c02:	99 85       	ldd	r25, Y+9	; 0x09
     c04:	fc 01       	movw	r30, r24
     c06:	20 81       	ld	r18, Z
     c08:	31 81       	ldd	r19, Z+1	; 0x01
     c0a:	42 81       	ldd	r20, Z+2	; 0x02
     c0c:	53 81       	ldd	r21, Z+3	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	ad 81       	ldd	r26, Y+5	; 0x05
     c14:	be 81       	ldd	r27, Y+6	; 0x06
     c16:	80 95       	com	r24
     c18:	90 95       	com	r25
     c1a:	a0 95       	com	r26
     c1c:	b0 95       	com	r27
     c1e:	82 23       	and	r24, r18
     c20:	93 23       	and	r25, r19
     c22:	a4 23       	and	r26, r20
     c24:	b5 23       	and	r27, r21
     c26:	28 85       	ldd	r18, Y+8	; 0x08
     c28:	39 85       	ldd	r19, Y+9	; 0x09
     c2a:	f9 01       	movw	r30, r18
     c2c:	80 83       	st	Z, r24
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	a2 83       	std	Z+2, r26	; 0x02
     c32:	b3 83       	std	Z+3, r27	; 0x03
     c34:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
     c38:	88 85       	ldd	r24, Y+8	; 0x08
     c3a:	99 85       	ldd	r25, Y+9	; 0x09
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	a2 81       	ldd	r26, Z+2	; 0x02
     c44:	b3 81       	ldd	r27, Z+3	; 0x03
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	6d 96       	adiw	r28, 0x1d	; 29
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
     c5c:	0f 93       	push	r16
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	2a 97       	sbiw	r28, 0x0a	; 10
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	6a 83       	std	Y+2, r22	; 0x02
     c74:	7b 83       	std	Y+3, r23	; 0x03
     c76:	8c 83       	std	Y+4, r24	; 0x04
     c78:	9d 83       	std	Y+5, r25	; 0x05
     c7a:	2e 83       	std	Y+6, r18	; 0x06
     c7c:	3f 83       	std	Y+7, r19	; 0x07
     c7e:	48 87       	std	Y+8, r20	; 0x08
     c80:	59 87       	std	Y+9, r21	; 0x09
     c82:	0a 87       	std	Y+10, r16	; 0x0a
    BaseType_t xWaitConditionMet = pdFALSE;
     c84:	19 82       	std	Y+1, r1	; 0x01

    if( xWaitForAllBits == pdFALSE )
     c86:	8a 85       	ldd	r24, Y+10	; 0x0a
     c88:	88 23       	and	r24, r24
     c8a:	99 f4       	brne	.+38     	; 0xcb2 <prvTestWaitCondition+0x56>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     c8c:	2a 81       	ldd	r18, Y+2	; 0x02
     c8e:	3b 81       	ldd	r19, Y+3	; 0x03
     c90:	4c 81       	ldd	r20, Y+4	; 0x04
     c92:	5d 81       	ldd	r21, Y+5	; 0x05
     c94:	8e 81       	ldd	r24, Y+6	; 0x06
     c96:	9f 81       	ldd	r25, Y+7	; 0x07
     c98:	a8 85       	ldd	r26, Y+8	; 0x08
     c9a:	b9 85       	ldd	r27, Y+9	; 0x09
     c9c:	82 23       	and	r24, r18
     c9e:	93 23       	and	r25, r19
     ca0:	a4 23       	and	r26, r20
     ca2:	b5 23       	and	r27, r21
     ca4:	89 2b       	or	r24, r25
     ca6:	8a 2b       	or	r24, r26
     ca8:	8b 2b       	or	r24, r27
     caa:	d1 f0       	breq	.+52     	; 0xce0 <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	17 c0       	rjmp	.+46     	; 0xce0 <prvTestWaitCondition+0x84>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     cb2:	2a 81       	ldd	r18, Y+2	; 0x02
     cb4:	3b 81       	ldd	r19, Y+3	; 0x03
     cb6:	4c 81       	ldd	r20, Y+4	; 0x04
     cb8:	5d 81       	ldd	r21, Y+5	; 0x05
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	a8 85       	ldd	r26, Y+8	; 0x08
     cc0:	b9 85       	ldd	r27, Y+9	; 0x09
     cc2:	28 23       	and	r18, r24
     cc4:	39 23       	and	r19, r25
     cc6:	4a 23       	and	r20, r26
     cc8:	5b 23       	and	r21, r27
     cca:	8e 81       	ldd	r24, Y+6	; 0x06
     ccc:	9f 81       	ldd	r25, Y+7	; 0x07
     cce:	a8 85       	ldd	r26, Y+8	; 0x08
     cd0:	b9 85       	ldd	r27, Y+9	; 0x09
     cd2:	28 17       	cp	r18, r24
     cd4:	39 07       	cpc	r19, r25
     cd6:	4a 07       	cpc	r20, r26
     cd8:	5b 07       	cpc	r21, r27
     cda:	11 f4       	brne	.+4      	; 0xce0 <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	89 83       	std	Y+1, r24	; 0x01
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce2:	2a 96       	adiw	r28, 0x0a	; 10
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	0f 91       	pop	r16
     cf4:	08 95       	ret

00000cf6 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* This just exists to keep the linker quiet. */
}
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	2a 97       	sbiw	r28, 0x0a	; 10
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	9a 87       	std	Y+10, r25	; 0x0a
     d0c:	89 87       	std	Y+9, r24	; 0x09
     d0e:	1e 82       	std	Y+6, r1	; 0x06
     d10:	1d 82       	std	Y+5, r1	; 0x05
     d12:	0e 94 24 1a 	call	0x3448	; 0x3448 <vTaskSuspendAll>
     d16:	80 91 cc 1a 	lds	r24, 0x1ACC	; 0x801acc <pxEnd>
     d1a:	90 91 cd 1a 	lds	r25, 0x1ACD	; 0x801acd <pxEnd+0x1>
     d1e:	89 2b       	or	r24, r25
     d20:	09 f4       	brne	.+2      	; 0xd24 <pvPortMalloc+0x2e>
     d22:	6e d1       	rcall	.+732    	; 0x1000 <prvHeapInit>
     d24:	20 91 d6 1a 	lds	r18, 0x1AD6	; 0x801ad6 <xBlockAllocatedBit>
     d28:	30 91 d7 1a 	lds	r19, 0x1AD7	; 0x801ad7 <xBlockAllocatedBit+0x1>
     d2c:	89 85       	ldd	r24, Y+9	; 0x09
     d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d30:	82 23       	and	r24, r18
     d32:	93 23       	and	r25, r19
     d34:	89 2b       	or	r24, r25
     d36:	09 f0       	breq	.+2      	; 0xd3a <pvPortMalloc+0x44>
     d38:	e1 c0       	rjmp	.+450    	; 0xefc <pvPortMalloc+0x206>
     d3a:	89 85       	ldd	r24, Y+9	; 0x09
     d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3e:	89 2b       	or	r24, r25
     d40:	a1 f0       	breq	.+40     	; 0xd6a <pvPortMalloc+0x74>
     d42:	24 e0       	ldi	r18, 0x04	; 4
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	89 85       	ldd	r24, Y+9	; 0x09
     d48:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4a:	28 0f       	add	r18, r24
     d4c:	39 1f       	adc	r19, r25
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	82 17       	cp	r24, r18
     d54:	93 07       	cpc	r25, r19
     d56:	48 f4       	brcc	.+18     	; 0xd6a <pvPortMalloc+0x74>
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	29 85       	ldd	r18, Y+9	; 0x09
     d5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d60:	82 0f       	add	r24, r18
     d62:	93 1f       	adc	r25, r19
     d64:	9a 87       	std	Y+10, r25	; 0x0a
     d66:	89 87       	std	Y+9, r24	; 0x09
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <pvPortMalloc+0x78>
     d6a:	1a 86       	std	Y+10, r1	; 0x0a
     d6c:	19 86       	std	Y+9, r1	; 0x09
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	89 2b       	or	r24, r25
     d74:	09 f4       	brne	.+2      	; 0xd78 <pvPortMalloc+0x82>
     d76:	c2 c0       	rjmp	.+388    	; 0xefc <pvPortMalloc+0x206>
     d78:	80 91 ce 1a 	lds	r24, 0x1ACE	; 0x801ace <xFreeBytesRemaining>
     d7c:	90 91 cf 1a 	lds	r25, 0x1ACF	; 0x801acf <xFreeBytesRemaining+0x1>
     d80:	29 85       	ldd	r18, Y+9	; 0x09
     d82:	3a 85       	ldd	r19, Y+10	; 0x0a
     d84:	82 17       	cp	r24, r18
     d86:	93 07       	cpc	r25, r19
     d88:	08 f4       	brcc	.+2      	; 0xd8c <pvPortMalloc+0x96>
     d8a:	b8 c0       	rjmp	.+368    	; 0xefc <pvPortMalloc+0x206>
     d8c:	88 ec       	ldi	r24, 0xC8	; 200
     d8e:	9a e1       	ldi	r25, 0x1A	; 26
     d90:	9c 83       	std	Y+4, r25	; 0x04
     d92:	8b 83       	std	Y+3, r24	; 0x03
     d94:	80 91 c8 1a 	lds	r24, 0x1AC8	; 0x801ac8 <xStart>
     d98:	90 91 c9 1a 	lds	r25, 0x1AC9	; 0x801ac9 <xStart+0x1>
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	0b c0       	rjmp	.+22     	; 0xdb8 <pvPortMalloc+0xc2>
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	9c 83       	std	Y+4, r25	; 0x04
     da8:	8b 83       	std	Y+3, r24	; 0x03
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	fc 01       	movw	r30, r24
     db0:	80 81       	ld	r24, Z
     db2:	91 81       	ldd	r25, Z+1	; 0x01
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	fc 01       	movw	r30, r24
     dbe:	22 81       	ldd	r18, Z+2	; 0x02
     dc0:	33 81       	ldd	r19, Z+3	; 0x03
     dc2:	89 85       	ldd	r24, Y+9	; 0x09
     dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc6:	28 17       	cp	r18, r24
     dc8:	39 07       	cpc	r19, r25
     dca:	38 f4       	brcc	.+14     	; 0xdda <pvPortMalloc+0xe4>
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	89 2b       	or	r24, r25
     dd8:	21 f7       	brne	.-56     	; 0xda2 <pvPortMalloc+0xac>
     dda:	80 91 cc 1a 	lds	r24, 0x1ACC	; 0x801acc <pxEnd>
     dde:	90 91 cd 1a 	lds	r25, 0x1ACD	; 0x801acd <pxEnd+0x1>
     de2:	29 81       	ldd	r18, Y+1	; 0x01
     de4:	3a 81       	ldd	r19, Y+2	; 0x02
     de6:	28 17       	cp	r18, r24
     de8:	39 07       	cpc	r19, r25
     dea:	09 f4       	brne	.+2      	; 0xdee <pvPortMalloc+0xf8>
     dec:	87 c0       	rjmp	.+270    	; 0xefc <pvPortMalloc+0x206>
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	fc 01       	movw	r30, r24
     df4:	20 81       	ld	r18, Z
     df6:	31 81       	ldd	r19, Z+1	; 0x01
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	82 0f       	add	r24, r18
     dfe:	93 1f       	adc	r25, r19
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	fc 01       	movw	r30, r24
     e0a:	20 81       	ld	r18, Z
     e0c:	31 81       	ldd	r19, Z+1	; 0x01
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	9c 81       	ldd	r25, Y+4	; 0x04
     e12:	fc 01       	movw	r30, r24
     e14:	31 83       	std	Z+1, r19	; 0x01
     e16:	20 83       	st	Z, r18
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	fc 01       	movw	r30, r24
     e1e:	22 81       	ldd	r18, Z+2	; 0x02
     e20:	33 81       	ldd	r19, Z+3	; 0x03
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	28 1b       	sub	r18, r24
     e28:	39 0b       	sbc	r19, r25
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	82 17       	cp	r24, r18
     e34:	93 07       	cpc	r25, r19
     e36:	00 f5       	brcc	.+64     	; 0xe78 <pvPortMalloc+0x182>
     e38:	29 81       	ldd	r18, Y+1	; 0x01
     e3a:	3a 81       	ldd	r19, Y+2	; 0x02
     e3c:	89 85       	ldd	r24, Y+9	; 0x09
     e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e40:	82 0f       	add	r24, r18
     e42:	93 1f       	adc	r25, r19
     e44:	98 87       	std	Y+8, r25	; 0x08
     e46:	8f 83       	std	Y+7, r24	; 0x07
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	fc 01       	movw	r30, r24
     e4e:	22 81       	ldd	r18, Z+2	; 0x02
     e50:	33 81       	ldd	r19, Z+3	; 0x03
     e52:	89 85       	ldd	r24, Y+9	; 0x09
     e54:	9a 85       	ldd	r25, Y+10	; 0x0a
     e56:	28 1b       	sub	r18, r24
     e58:	39 0b       	sbc	r19, r25
     e5a:	8f 81       	ldd	r24, Y+7	; 0x07
     e5c:	98 85       	ldd	r25, Y+8	; 0x08
     e5e:	fc 01       	movw	r30, r24
     e60:	33 83       	std	Z+3, r19	; 0x03
     e62:	22 83       	std	Z+2, r18	; 0x02
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	29 85       	ldd	r18, Y+9	; 0x09
     e6a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e6c:	fc 01       	movw	r30, r24
     e6e:	33 83       	std	Z+3, r19	; 0x03
     e70:	22 83       	std	Z+2, r18	; 0x02
     e72:	8f 81       	ldd	r24, Y+7	; 0x07
     e74:	98 85       	ldd	r25, Y+8	; 0x08
     e76:	44 d1       	rcall	.+648    	; 0x1100 <prvInsertBlockIntoFreeList>
     e78:	20 91 ce 1a 	lds	r18, 0x1ACE	; 0x801ace <xFreeBytesRemaining>
     e7c:	30 91 cf 1a 	lds	r19, 0x1ACF	; 0x801acf <xFreeBytesRemaining+0x1>
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	fc 01       	movw	r30, r24
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	a9 01       	movw	r20, r18
     e8c:	48 1b       	sub	r20, r24
     e8e:	59 0b       	sbc	r21, r25
     e90:	ca 01       	movw	r24, r20
     e92:	90 93 cf 1a 	sts	0x1ACF, r25	; 0x801acf <xFreeBytesRemaining+0x1>
     e96:	80 93 ce 1a 	sts	0x1ACE, r24	; 0x801ace <xFreeBytesRemaining>
     e9a:	20 91 ce 1a 	lds	r18, 0x1ACE	; 0x801ace <xFreeBytesRemaining>
     e9e:	30 91 cf 1a 	lds	r19, 0x1ACF	; 0x801acf <xFreeBytesRemaining+0x1>
     ea2:	80 91 d0 1a 	lds	r24, 0x1AD0	; 0x801ad0 <xMinimumEverFreeBytesRemaining>
     ea6:	90 91 d1 1a 	lds	r25, 0x1AD1	; 0x801ad1 <xMinimumEverFreeBytesRemaining+0x1>
     eaa:	28 17       	cp	r18, r24
     eac:	39 07       	cpc	r19, r25
     eae:	40 f4       	brcc	.+16     	; 0xec0 <pvPortMalloc+0x1ca>
     eb0:	80 91 ce 1a 	lds	r24, 0x1ACE	; 0x801ace <xFreeBytesRemaining>
     eb4:	90 91 cf 1a 	lds	r25, 0x1ACF	; 0x801acf <xFreeBytesRemaining+0x1>
     eb8:	90 93 d1 1a 	sts	0x1AD1, r25	; 0x801ad1 <xMinimumEverFreeBytesRemaining+0x1>
     ebc:	80 93 d0 1a 	sts	0x1AD0, r24	; 0x801ad0 <xMinimumEverFreeBytesRemaining>
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	fc 01       	movw	r30, r24
     ec6:	22 81       	ldd	r18, Z+2	; 0x02
     ec8:	33 81       	ldd	r19, Z+3	; 0x03
     eca:	80 91 d6 1a 	lds	r24, 0x1AD6	; 0x801ad6 <xBlockAllocatedBit>
     ece:	90 91 d7 1a 	lds	r25, 0x1AD7	; 0x801ad7 <xBlockAllocatedBit+0x1>
     ed2:	28 2b       	or	r18, r24
     ed4:	39 2b       	or	r19, r25
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	fc 01       	movw	r30, r24
     edc:	33 83       	std	Z+3, r19	; 0x03
     ede:	22 83       	std	Z+2, r18	; 0x02
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	fc 01       	movw	r30, r24
     ee6:	11 82       	std	Z+1, r1	; 0x01
     ee8:	10 82       	st	Z, r1
     eea:	80 91 d2 1a 	lds	r24, 0x1AD2	; 0x801ad2 <xNumberOfSuccessfulAllocations>
     eee:	90 91 d3 1a 	lds	r25, 0x1AD3	; 0x801ad3 <xNumberOfSuccessfulAllocations+0x1>
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	90 93 d3 1a 	sts	0x1AD3, r25	; 0x801ad3 <xNumberOfSuccessfulAllocations+0x1>
     ef8:	80 93 d2 1a 	sts	0x1AD2, r24	; 0x801ad2 <xNumberOfSuccessfulAllocations>
     efc:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	89 2b       	or	r24, r25
     f06:	11 f4       	brne	.+4      	; 0xf0c <pvPortMalloc+0x216>
     f08:	0e 94 8a 30 	call	0x6114	; 0x6114 <vApplicationMallocFailedHook>
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	2a 96       	adiw	r28, 0x0a	; 10
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	08 95       	ret

00000f22 <vPortFree>:
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	00 d0       	rcall	.+0      	; 0xf28 <vPortFree+0x6>
     f28:	00 d0       	rcall	.+0      	; 0xf2a <vPortFree+0x8>
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	89 2b       	or	r24, r25
     f40:	09 f4       	brne	.+2      	; 0xf44 <vPortFree+0x22>
     f42:	54 c0       	rjmp	.+168    	; 0xfec <vPortFree+0xca>
     f44:	84 e0       	ldi	r24, 0x04	; 4
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	91 95       	neg	r25
     f4a:	81 95       	neg	r24
     f4c:	91 09       	sbc	r25, r1
     f4e:	29 81       	ldd	r18, Y+1	; 0x01
     f50:	3a 81       	ldd	r19, Y+2	; 0x02
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	9c 83       	std	Y+4, r25	; 0x04
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	fc 01       	movw	r30, r24
     f68:	22 81       	ldd	r18, Z+2	; 0x02
     f6a:	33 81       	ldd	r19, Z+3	; 0x03
     f6c:	80 91 d6 1a 	lds	r24, 0x1AD6	; 0x801ad6 <xBlockAllocatedBit>
     f70:	90 91 d7 1a 	lds	r25, 0x1AD7	; 0x801ad7 <xBlockAllocatedBit+0x1>
     f74:	82 23       	and	r24, r18
     f76:	93 23       	and	r25, r19
     f78:	89 2b       	or	r24, r25
     f7a:	c1 f1       	breq	.+112    	; 0xfec <vPortFree+0xca>
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	fc 01       	movw	r30, r24
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	89 2b       	or	r24, r25
     f88:	89 f5       	brne	.+98     	; 0xfec <vPortFree+0xca>
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	fc 01       	movw	r30, r24
     f90:	22 81       	ldd	r18, Z+2	; 0x02
     f92:	33 81       	ldd	r19, Z+3	; 0x03
     f94:	80 91 d6 1a 	lds	r24, 0x1AD6	; 0x801ad6 <xBlockAllocatedBit>
     f98:	90 91 d7 1a 	lds	r25, 0x1AD7	; 0x801ad7 <xBlockAllocatedBit+0x1>
     f9c:	80 95       	com	r24
     f9e:	90 95       	com	r25
     fa0:	28 23       	and	r18, r24
     fa2:	39 23       	and	r19, r25
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	9c 81       	ldd	r25, Y+4	; 0x04
     fa8:	fc 01       	movw	r30, r24
     faa:	33 83       	std	Z+3, r19	; 0x03
     fac:	22 83       	std	Z+2, r18	; 0x02
     fae:	0e 94 24 1a 	call	0x3448	; 0x3448 <vTaskSuspendAll>
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	fc 01       	movw	r30, r24
     fb8:	22 81       	ldd	r18, Z+2	; 0x02
     fba:	33 81       	ldd	r19, Z+3	; 0x03
     fbc:	80 91 ce 1a 	lds	r24, 0x1ACE	; 0x801ace <xFreeBytesRemaining>
     fc0:	90 91 cf 1a 	lds	r25, 0x1ACF	; 0x801acf <xFreeBytesRemaining+0x1>
     fc4:	82 0f       	add	r24, r18
     fc6:	93 1f       	adc	r25, r19
     fc8:	90 93 cf 1a 	sts	0x1ACF, r25	; 0x801acf <xFreeBytesRemaining+0x1>
     fcc:	80 93 ce 1a 	sts	0x1ACE, r24	; 0x801ace <xFreeBytesRemaining>
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	95 d0       	rcall	.+298    	; 0x1100 <prvInsertBlockIntoFreeList>
     fd6:	80 91 d4 1a 	lds	r24, 0x1AD4	; 0x801ad4 <xNumberOfSuccessfulFrees>
     fda:	90 91 d5 1a 	lds	r25, 0x1AD5	; 0x801ad5 <xNumberOfSuccessfulFrees+0x1>
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	90 93 d5 1a 	sts	0x1AD5, r25	; 0x801ad5 <xNumberOfSuccessfulFrees+0x1>
     fe4:	80 93 d4 1a 	sts	0x1AD4, r24	; 0x801ad4 <xNumberOfSuccessfulFrees>
     fe8:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
     fec:	00 00       	nop
     fee:	26 96       	adiw	r28, 0x06	; 6
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	28 97       	sbiw	r28, 0x08	; 8
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    1014:	8c ea       	ldi	r24, 0xAC	; 172
    1016:	9d e0       	ldi	r25, 0x0D	; 13
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
    101c:	8c e1       	ldi	r24, 0x1C	; 28
    101e:	9d e0       	ldi	r25, 0x0D	; 13
    1020:	9c 83       	std	Y+4, r25	; 0x04
    1022:	8b 83       	std	Y+3, r24	; 0x03
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	90 93 c9 1a 	sts	0x1AC9, r25	; 0x801ac9 <xStart+0x1>
    1034:	80 93 c8 1a 	sts	0x1AC8, r24	; 0x801ac8 <xStart>
    xStart.xBlockSize = ( size_t ) 0;
    1038:	10 92 cb 1a 	sts	0x1ACB, r1	; 0x801acb <xStart+0x3>
    103c:	10 92 ca 1a 	sts	0x1ACA, r1	; 0x801aca <xStart+0x2>

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    1040:	2d 81       	ldd	r18, Y+5	; 0x05
    1042:	3e 81       	ldd	r19, Y+6	; 0x06
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	9c 83       	std	Y+4, r25	; 0x04
    104e:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress -= xHeapStructSize;
    1050:	84 e0       	ldi	r24, 0x04	; 4
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	2b 81       	ldd	r18, Y+3	; 0x03
    1056:	3c 81       	ldd	r19, Y+4	; 0x04
    1058:	a9 01       	movw	r20, r18
    105a:	48 1b       	sub	r20, r24
    105c:	59 0b       	sbc	r21, r25
    105e:	ca 01       	movw	r24, r20
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	90 93 cd 1a 	sts	0x1ACD, r25	; 0x801acd <pxEnd+0x1>
    106c:	80 93 cc 1a 	sts	0x1ACC, r24	; 0x801acc <pxEnd>
    pxEnd->xBlockSize = 0;
    1070:	80 91 cc 1a 	lds	r24, 0x1ACC	; 0x801acc <pxEnd>
    1074:	90 91 cd 1a 	lds	r25, 0x1ACD	; 0x801acd <pxEnd+0x1>
    1078:	fc 01       	movw	r30, r24
    107a:	13 82       	std	Z+3, r1	; 0x03
    107c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    107e:	80 91 cc 1a 	lds	r24, 0x1ACC	; 0x801acc <pxEnd>
    1082:	90 91 cd 1a 	lds	r25, 0x1ACD	; 0x801acd <pxEnd+0x1>
    1086:	fc 01       	movw	r30, r24
    1088:	11 82       	std	Z+1, r1	; 0x01
    108a:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	98 87       	std	Y+8, r25	; 0x08
    1092:	8f 83       	std	Y+7, r24	; 0x07
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1094:	8f 81       	ldd	r24, Y+7	; 0x07
    1096:	98 85       	ldd	r25, Y+8	; 0x08
    1098:	2b 81       	ldd	r18, Y+3	; 0x03
    109a:	3c 81       	ldd	r19, Y+4	; 0x04
    109c:	28 1b       	sub	r18, r24
    109e:	39 0b       	sbc	r19, r25
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	98 85       	ldd	r25, Y+8	; 0x08
    10a4:	fc 01       	movw	r30, r24
    10a6:	33 83       	std	Z+3, r19	; 0x03
    10a8:	22 83       	std	Z+2, r18	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    10aa:	20 91 cc 1a 	lds	r18, 0x1ACC	; 0x801acc <pxEnd>
    10ae:	30 91 cd 1a 	lds	r19, 0x1ACD	; 0x801acd <pxEnd+0x1>
    10b2:	8f 81       	ldd	r24, Y+7	; 0x07
    10b4:	98 85       	ldd	r25, Y+8	; 0x08
    10b6:	fc 01       	movw	r30, r24
    10b8:	31 83       	std	Z+1, r19	; 0x01
    10ba:	20 83       	st	Z, r18

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	98 85       	ldd	r25, Y+8	; 0x08
    10c0:	fc 01       	movw	r30, r24
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	90 93 d1 1a 	sts	0x1AD1, r25	; 0x801ad1 <xMinimumEverFreeBytesRemaining+0x1>
    10ca:	80 93 d0 1a 	sts	0x1AD0, r24	; 0x801ad0 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10ce:	8f 81       	ldd	r24, Y+7	; 0x07
    10d0:	98 85       	ldd	r25, Y+8	; 0x08
    10d2:	fc 01       	movw	r30, r24
    10d4:	82 81       	ldd	r24, Z+2	; 0x02
    10d6:	93 81       	ldd	r25, Z+3	; 0x03
    10d8:	90 93 cf 1a 	sts	0x1ACF, r25	; 0x801acf <xFreeBytesRemaining+0x1>
    10dc:	80 93 ce 1a 	sts	0x1ACE, r24	; 0x801ace <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e8       	ldi	r25, 0x80	; 128
    10e4:	90 93 d7 1a 	sts	0x1AD7, r25	; 0x801ad7 <xBlockAllocatedBit+0x1>
    10e8:	80 93 d6 1a 	sts	0x1AD6, r24	; 0x801ad6 <xBlockAllocatedBit>
}
    10ec:	00 00       	nop
    10ee:	28 96       	adiw	r28, 0x08	; 8
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	00 d0       	rcall	.+0      	; 0x1106 <prvInsertBlockIntoFreeList+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <prvInsertBlockIntoFreeList+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1110:	88 ec       	ldi	r24, 0xC8	; 200
    1112:	9a e1       	ldi	r25, 0x1A	; 26
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	07 c0       	rjmp	.+14     	; 0x1128 <prvInsertBlockIntoFreeList+0x28>
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	fc 01       	movw	r30, r24
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	fc 01       	movw	r30, r24
    112e:	20 81       	ld	r18, Z
    1130:	31 81       	ldd	r19, Z+1	; 0x01
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	9e 81       	ldd	r25, Y+6	; 0x06
    1136:	28 17       	cp	r18, r24
    1138:	39 07       	cpc	r19, r25
    113a:	78 f3       	brcs	.-34     	; 0x111a <prvInsertBlockIntoFreeList+0x1a>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	9a 81       	ldd	r25, Y+2	; 0x02
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	fc 01       	movw	r30, r24
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	2b 81       	ldd	r18, Y+3	; 0x03
    1150:	3c 81       	ldd	r19, Y+4	; 0x04
    1152:	28 0f       	add	r18, r24
    1154:	39 1f       	adc	r19, r25
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	28 17       	cp	r18, r24
    115c:	39 07       	cpc	r19, r25
    115e:	a9 f4       	brne	.+42     	; 0x118a <prvInsertBlockIntoFreeList+0x8a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	fc 01       	movw	r30, r24
    1166:	22 81       	ldd	r18, Z+2	; 0x02
    1168:	33 81       	ldd	r19, Z+3	; 0x03
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	fc 01       	movw	r30, r24
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	93 81       	ldd	r25, Z+3	; 0x03
    1174:	28 0f       	add	r18, r24
    1176:	39 1f       	adc	r19, r25
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	fc 01       	movw	r30, r24
    117e:	33 83       	std	Z+3, r19	; 0x03
    1180:	22 83       	std	Z+2, r18	; 0x02
        pxBlockToInsert = pxIterator;
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	9e 83       	std	Y+6, r25	; 0x06
    1188:	8d 83       	std	Y+5, r24	; 0x05
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	fc 01       	movw	r30, r24
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	93 81       	ldd	r25, Z+3	; 0x03
    119c:	2b 81       	ldd	r18, Y+3	; 0x03
    119e:	3c 81       	ldd	r19, Y+4	; 0x04
    11a0:	28 0f       	add	r18, r24
    11a2:	39 1f       	adc	r19, r25
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	fc 01       	movw	r30, r24
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	28 17       	cp	r18, r24
    11b0:	39 07       	cpc	r19, r25
    11b2:	c1 f5       	brne	.+112    	; 0x1224 <prvInsertBlockIntoFreeList+0x124>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 81       	ld	r18, Z
    11bc:	31 81       	ldd	r19, Z+1	; 0x01
    11be:	80 91 cc 1a 	lds	r24, 0x1ACC	; 0x801acc <pxEnd>
    11c2:	90 91 cd 1a 	lds	r25, 0x1ACD	; 0x801acd <pxEnd+0x1>
    11c6:	28 17       	cp	r18, r24
    11c8:	39 07       	cpc	r19, r25
    11ca:	11 f1       	breq	.+68     	; 0x1210 <prvInsertBlockIntoFreeList+0x110>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	fc 01       	movw	r30, r24
    11d2:	22 81       	ldd	r18, Z+2	; 0x02
    11d4:	33 81       	ldd	r19, Z+3	; 0x03
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	fc 01       	movw	r30, r24
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	fc 01       	movw	r30, r24
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	28 0f       	add	r18, r24
    11e8:	39 1f       	adc	r19, r25
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	9e 81       	ldd	r25, Y+6	; 0x06
    11ee:	fc 01       	movw	r30, r24
    11f0:	33 83       	std	Z+3, r19	; 0x03
    11f2:	22 83       	std	Z+2, r18	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	fc 01       	movw	r30, r24
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	fc 01       	movw	r30, r24
    1200:	20 81       	ld	r18, Z
    1202:	31 81       	ldd	r19, Z+1	; 0x01
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	fc 01       	movw	r30, r24
    120a:	31 83       	std	Z+1, r19	; 0x01
    120c:	20 83       	st	Z, r18
    120e:	14 c0       	rjmp	.+40     	; 0x1238 <prvInsertBlockIntoFreeList+0x138>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1210:	20 91 cc 1a 	lds	r18, 0x1ACC	; 0x801acc <pxEnd>
    1214:	30 91 cd 1a 	lds	r19, 0x1ACD	; 0x801acd <pxEnd+0x1>
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	fc 01       	movw	r30, r24
    121e:	31 83       	std	Z+1, r19	; 0x01
    1220:	20 83       	st	Z, r18
    1222:	0a c0       	rjmp	.+20     	; 0x1238 <prvInsertBlockIntoFreeList+0x138>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	fc 01       	movw	r30, r24
    122a:	20 81       	ld	r18, Z
    122c:	31 81       	ldd	r19, Z+1	; 0x01
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	fc 01       	movw	r30, r24
    1234:	31 83       	std	Z+1, r19	; 0x01
    1236:	20 83       	st	Z, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    1238:	29 81       	ldd	r18, Y+1	; 0x01
    123a:	3a 81       	ldd	r19, Y+2	; 0x02
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	9e 81       	ldd	r25, Y+6	; 0x06
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	39 f0       	breq	.+14     	; 0x1254 <prvInsertBlockIntoFreeList+0x154>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	2d 81       	ldd	r18, Y+5	; 0x05
    124c:	3e 81       	ldd	r19, Y+6	; 0x06
    124e:	fc 01       	movw	r30, r24
    1250:	31 83       	std	Z+1, r19	; 0x01
    1252:	20 83       	st	Z, r18
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1254:	00 00       	nop
    1256:	26 96       	adiw	r28, 0x06	; 6
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	1f 92       	push	r1
    126e:	1f 92       	push	r1
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	9c 01       	movw	r18, r24
    127e:	2d 5f       	subi	r18, 0xFD	; 253
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	fc 01       	movw	r30, r24
    1288:	32 83       	std	Z+2, r19	; 0x02
    128a:	21 83       	std	Z+1, r18	; 0x01
    128c:	29 81       	ldd	r18, Y+1	; 0x01
    128e:	3a 81       	ldd	r19, Y+2	; 0x02
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	9f ef       	ldi	r25, 0xFF	; 255
    1294:	dc 01       	movw	r26, r24
    1296:	f9 01       	movw	r30, r18
    1298:	83 83       	std	Z+3, r24	; 0x03
    129a:	94 83       	std	Z+4, r25	; 0x04
    129c:	a5 83       	std	Z+5, r26	; 0x05
    129e:	b6 83       	std	Z+6, r27	; 0x06
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	9c 01       	movw	r18, r24
    12a6:	2d 5f       	subi	r18, 0xFD	; 253
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	fc 01       	movw	r30, r24
    12b0:	30 87       	std	Z+8, r19	; 0x08
    12b2:	27 83       	std	Z+7, r18	; 0x07
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	9c 01       	movw	r18, r24
    12ba:	2d 5f       	subi	r18, 0xFD	; 253
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	fc 01       	movw	r30, r24
    12c4:	32 87       	std	Z+10, r19	; 0x0a
    12c6:	21 87       	std	Z+9, r18	; 0x09
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	fc 01       	movw	r30, r24
    12ce:	10 82       	st	Z, r1
    12d0:	00 00       	nop
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <vListInitialiseItem>:
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	1f 92       	push	r1
    12e2:	1f 92       	push	r1
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	fc 01       	movw	r30, r24
    12f2:	13 86       	std	Z+11, r1	; 0x0b
    12f4:	12 86       	std	Z+10, r1	; 0x0a
    12f6:	00 00       	nop
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	2a 97       	sbiw	r28, 0x0a	; 10
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	98 87       	std	Y+8, r25	; 0x08
    1318:	8f 83       	std	Y+7, r24	; 0x07
    131a:	7a 87       	std	Y+10, r23	; 0x0a
    131c:	69 87       	std	Y+9, r22	; 0x09
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	fc 01       	movw	r30, r24
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	a2 81       	ldd	r26, Z+2	; 0x02
    132a:	b3 81       	ldd	r27, Z+3	; 0x03
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	9c 83       	std	Y+4, r25	; 0x04
    1330:	ad 83       	std	Y+5, r26	; 0x05
    1332:	be 83       	std	Y+6, r27	; 0x06
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	ad 81       	ldd	r26, Y+5	; 0x05
    133a:	be 81       	ldd	r27, Y+6	; 0x06
    133c:	8f 3f       	cpi	r24, 0xFF	; 255
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	af 4f       	sbci	r26, 0xFF	; 255
    1342:	bf 4f       	sbci	r27, 0xFF	; 255
    1344:	41 f4       	brne	.+16     	; 0x1356 <vListInsert+0x54>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1346:	8f 81       	ldd	r24, Y+7	; 0x07
    1348:	98 85       	ldd	r25, Y+8	; 0x08
    134a:	fc 01       	movw	r30, r24
    134c:	81 85       	ldd	r24, Z+9	; 0x09
    134e:	92 85       	ldd	r25, Z+10	; 0x0a
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	20 c0       	rjmp	.+64     	; 0x1396 <vListInsert+0x94>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1356:	8f 81       	ldd	r24, Y+7	; 0x07
    1358:	98 85       	ldd	r25, Y+8	; 0x08
    135a:	03 96       	adiw	r24, 0x03	; 3
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <vListInsert+0x6e>
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	fc 01       	movw	r30, r24
    1368:	84 81       	ldd	r24, Z+4	; 0x04
    136a:	95 81       	ldd	r25, Z+5	; 0x05
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	fc 01       	movw	r30, r24
    1376:	84 81       	ldd	r24, Z+4	; 0x04
    1378:	95 81       	ldd	r25, Z+5	; 0x05
    137a:	fc 01       	movw	r30, r24
    137c:	20 81       	ld	r18, Z
    137e:	31 81       	ldd	r19, Z+1	; 0x01
    1380:	42 81       	ldd	r20, Z+2	; 0x02
    1382:	53 81       	ldd	r21, Z+3	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	ad 81       	ldd	r26, Y+5	; 0x05
    138a:	be 81       	ldd	r27, Y+6	; 0x06
    138c:	82 17       	cp	r24, r18
    138e:	93 07       	cpc	r25, r19
    1390:	a4 07       	cpc	r26, r20
    1392:	b5 07       	cpc	r27, r21
    1394:	30 f7       	brcc	.-52     	; 0x1362 <vListInsert+0x60>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	9a 81       	ldd	r25, Y+2	; 0x02
    139a:	fc 01       	movw	r30, r24
    139c:	24 81       	ldd	r18, Z+4	; 0x04
    139e:	35 81       	ldd	r19, Z+5	; 0x05
    13a0:	89 85       	ldd	r24, Y+9	; 0x09
    13a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a4:	fc 01       	movw	r30, r24
    13a6:	35 83       	std	Z+5, r19	; 0x05
    13a8:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	fc 01       	movw	r30, r24
    13b0:	84 81       	ldd	r24, Z+4	; 0x04
    13b2:	95 81       	ldd	r25, Z+5	; 0x05
    13b4:	29 85       	ldd	r18, Y+9	; 0x09
    13b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b8:	fc 01       	movw	r30, r24
    13ba:	37 83       	std	Z+7, r19	; 0x07
    13bc:	26 83       	std	Z+6, r18	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	29 81       	ldd	r18, Y+1	; 0x01
    13c4:	3a 81       	ldd	r19, Y+2	; 0x02
    13c6:	fc 01       	movw	r30, r24
    13c8:	37 83       	std	Z+7, r19	; 0x07
    13ca:	26 83       	std	Z+6, r18	; 0x06
    pxIterator->pxNext = pxNewListItem;
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	9a 81       	ldd	r25, Y+2	; 0x02
    13d0:	29 85       	ldd	r18, Y+9	; 0x09
    13d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    13d4:	fc 01       	movw	r30, r24
    13d6:	35 83       	std	Z+5, r19	; 0x05
    13d8:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	2f 81       	ldd	r18, Y+7	; 0x07
    13e0:	38 85       	ldd	r19, Y+8	; 0x08
    13e2:	fc 01       	movw	r30, r24
    13e4:	33 87       	std	Z+11, r19	; 0x0b
    13e6:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    13e8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ea:	98 85       	ldd	r25, Y+8	; 0x08
    13ec:	fc 01       	movw	r30, r24
    13ee:	80 81       	ld	r24, Z
    13f0:	21 e0       	ldi	r18, 0x01	; 1
    13f2:	28 0f       	add	r18, r24
    13f4:	8f 81       	ldd	r24, Y+7	; 0x07
    13f6:	98 85       	ldd	r25, Y+8	; 0x08
    13f8:	fc 01       	movw	r30, r24
    13fa:	20 83       	st	Z, r18
}
    13fc:	00 00       	nop
    13fe:	2a 96       	adiw	r28, 0x0a	; 10
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	00 d0       	rcall	.+0      	; 0x1416 <uxListRemove+0x6>
    1416:	1f 92       	push	r1
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	9c 83       	std	Y+4, r25	; 0x04
    141e:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	fc 01       	movw	r30, r24
    1426:	82 85       	ldd	r24, Z+10	; 0x0a
    1428:	93 85       	ldd	r25, Z+11	; 0x0b
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	fc 01       	movw	r30, r24
    1434:	84 81       	ldd	r24, Z+4	; 0x04
    1436:	95 81       	ldd	r25, Z+5	; 0x05
    1438:	2b 81       	ldd	r18, Y+3	; 0x03
    143a:	3c 81       	ldd	r19, Y+4	; 0x04
    143c:	f9 01       	movw	r30, r18
    143e:	26 81       	ldd	r18, Z+6	; 0x06
    1440:	37 81       	ldd	r19, Z+7	; 0x07
    1442:	fc 01       	movw	r30, r24
    1444:	37 83       	std	Z+7, r19	; 0x07
    1446:	26 83       	std	Z+6, r18	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	fc 01       	movw	r30, r24
    144e:	86 81       	ldd	r24, Z+6	; 0x06
    1450:	97 81       	ldd	r25, Z+7	; 0x07
    1452:	2b 81       	ldd	r18, Y+3	; 0x03
    1454:	3c 81       	ldd	r19, Y+4	; 0x04
    1456:	f9 01       	movw	r30, r18
    1458:	24 81       	ldd	r18, Z+4	; 0x04
    145a:	35 81       	ldd	r19, Z+5	; 0x05
    145c:	fc 01       	movw	r30, r24
    145e:	35 83       	std	Z+5, r19	; 0x05
    1460:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	fc 01       	movw	r30, r24
    1468:	21 81       	ldd	r18, Z+1	; 0x01
    146a:	32 81       	ldd	r19, Z+2	; 0x02
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	28 17       	cp	r18, r24
    1472:	39 07       	cpc	r19, r25
    1474:	51 f4       	brne	.+20     	; 0x148a <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	fc 01       	movw	r30, r24
    147c:	26 81       	ldd	r18, Z+6	; 0x06
    147e:	37 81       	ldd	r19, Z+7	; 0x07
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	fc 01       	movw	r30, r24
    1486:	32 83       	std	Z+2, r19	; 0x02
    1488:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	fc 01       	movw	r30, r24
    1490:	13 86       	std	Z+11, r1	; 0x0b
    1492:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	fc 01       	movw	r30, r24
    149a:	80 81       	ld	r24, Z
    149c:	2f ef       	ldi	r18, 0xFF	; 255
    149e:	28 0f       	add	r18, r24
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	9a 81       	ldd	r25, Y+2	; 0x02
    14ac:	fc 01       	movw	r30, r24
    14ae:	80 81       	ld	r24, Z
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <pxPortInitialiseStack>:
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
}
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	28 97       	sbiw	r28, 0x08	; 8
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	9c 83       	std	Y+4, r25	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    14d6:	7e 83       	std	Y+6, r23	; 0x06
    14d8:	6d 83       	std	Y+5, r22	; 0x05
    14da:	58 87       	std	Y+8, r21	; 0x08
    14dc:	4f 83       	std	Y+7, r20	; 0x07
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	29 81       	ldd	r18, Y+1	; 0x01
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	9c 83       	std	Y+4, r25	; 0x04
    14f8:	8b 83       	std	Y+3, r24	; 0x03
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	89 2f       	mov	r24, r25
    1500:	99 27       	eor	r25, r25
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	29 81       	ldd	r18, Y+1	; 0x01
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	fc 01       	movw	r30, r24
    150e:	20 83       	st	Z, r18
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	fc 01       	movw	r30, r24
    1520:	10 82       	st	Z, r1
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	9c 83       	std	Y+4, r25	; 0x04
    152a:	8b 83       	std	Y+3, r24	; 0x03
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	fc 01       	movw	r30, r24
    1532:	10 82       	st	Z, r1
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	20 e8       	ldi	r18, 0x80	; 128
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	fc 01       	movw	r30, r24
    1558:	10 82       	st	Z, r1
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9c 83       	std	Y+4, r25	; 0x04
    1562:	8b 83       	std	Y+3, r24	; 0x03
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	fc 01       	movw	r30, r24
    156a:	10 82       	st	Z, r1
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	8b 83       	std	Y+3, r24	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	fc 01       	movw	r30, r24
    157c:	10 82       	st	Z, r1
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	47 97       	sbiw	r24, 0x17	; 23
    1584:	9c 83       	std	Y+4, r25	; 0x04
    1586:	8b 83       	std	Y+3, r24	; 0x03
    1588:	8f 81       	ldd	r24, Y+7	; 0x07
    158a:	98 85       	ldd	r25, Y+8	; 0x08
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	29 81       	ldd	r18, Y+1	; 0x01
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	fc 01       	movw	r30, r24
    1598:	20 83       	st	Z, r18
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	9c 83       	std	Y+4, r25	; 0x04
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	89 2f       	mov	r24, r25
    15aa:	99 27       	eor	r25, r25
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	29 81       	ldd	r18, Y+1	; 0x01
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	fc 01       	movw	r30, r24
    15b8:	20 83       	st	Z, r18
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	07 97       	sbiw	r24, 0x07	; 7
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	28 96       	adiw	r28, 0x08	; 8
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <xPortStartScheduler>:
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	ff d0       	rcall	.+510    	; 0x17e2 <prvSetupTimerInterrupt>
    15e4:	a0 91 d8 1a 	lds	r26, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    15e8:	b0 91 d9 1a 	lds	r27, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    15ec:	cd 91       	ld	r28, X+
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	dd 91       	ld	r29, X+
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	ff 91       	pop	r31
    15f6:	ef 91       	pop	r30
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	bf 91       	pop	r27
    15fe:	af 91       	pop	r26
    1600:	9f 91       	pop	r25
    1602:	8f 91       	pop	r24
    1604:	7f 91       	pop	r23
    1606:	6f 91       	pop	r22
    1608:	5f 91       	pop	r21
    160a:	4f 91       	pop	r20
    160c:	3f 91       	pop	r19
    160e:	2f 91       	pop	r18
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	bf 90       	pop	r11
    161e:	af 90       	pop	r10
    1620:	9f 90       	pop	r9
    1622:	8f 90       	pop	r8
    1624:	7f 90       	pop	r7
    1626:	6f 90       	pop	r6
    1628:	5f 90       	pop	r5
    162a:	4f 90       	pop	r4
    162c:	3f 90       	pop	r3
    162e:	2f 90       	pop	r2
    1630:	1f 90       	pop	r1
    1632:	0f 90       	pop	r0
    1634:	0c be       	out	0x3c, r0	; 60
    1636:	0f 90       	pop	r0
    1638:	0b be       	out	0x3b, r0	; 59
    163a:	0f 90       	pop	r0
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	0f 90       	pop	r0
    1640:	08 95       	ret
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <vPortYield>:
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	0f 92       	push	r0
    1652:	0b b6       	in	r0, 0x3b	; 59
    1654:	0f 92       	push	r0
    1656:	0c b6       	in	r0, 0x3c	; 60
    1658:	0f 92       	push	r0
    165a:	1f 92       	push	r1
    165c:	11 24       	eor	r1, r1
    165e:	2f 92       	push	r2
    1660:	3f 92       	push	r3
    1662:	4f 92       	push	r4
    1664:	5f 92       	push	r5
    1666:	6f 92       	push	r6
    1668:	7f 92       	push	r7
    166a:	8f 92       	push	r8
    166c:	9f 92       	push	r9
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	2f 93       	push	r18
    1680:	3f 93       	push	r19
    1682:	4f 93       	push	r20
    1684:	5f 93       	push	r21
    1686:	6f 93       	push	r22
    1688:	7f 93       	push	r23
    168a:	8f 93       	push	r24
    168c:	9f 93       	push	r25
    168e:	af 93       	push	r26
    1690:	bf 93       	push	r27
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
    169a:	a0 91 d8 1a 	lds	r26, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    169e:	b0 91 d9 1a 	lds	r27, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    16a2:	0d b6       	in	r0, 0x3d	; 61
    16a4:	0d 92       	st	X+, r0
    16a6:	0e b6       	in	r0, 0x3e	; 62
    16a8:	0d 92       	st	X+, r0
    16aa:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <vTaskSwitchContext>
    16ae:	a0 91 d8 1a 	lds	r26, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    16b2:	b0 91 d9 1a 	lds	r27, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    16b6:	cd 91       	ld	r28, X+
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	dd 91       	ld	r29, X+
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	7f 90       	pop	r7
    16f0:	6f 90       	pop	r6
    16f2:	5f 90       	pop	r5
    16f4:	4f 90       	pop	r4
    16f6:	3f 90       	pop	r3
    16f8:	2f 90       	pop	r2
    16fa:	1f 90       	pop	r1
    16fc:	0f 90       	pop	r0
    16fe:	0c be       	out	0x3c, r0	; 60
    1700:	0f 90       	pop	r0
    1702:	0b be       	out	0x3b, r0	; 59
    1704:	0f 90       	pop	r0
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	0f 90       	pop	r0
    170a:	08 95       	ret
	...

0000170e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	0f 92       	push	r0
    1716:	0b b6       	in	r0, 0x3b	; 59
    1718:	0f 92       	push	r0
    171a:	0c b6       	in	r0, 0x3c	; 60
    171c:	0f 92       	push	r0
    171e:	1f 92       	push	r1
    1720:	11 24       	eor	r1, r1
    1722:	2f 92       	push	r2
    1724:	3f 92       	push	r3
    1726:	4f 92       	push	r4
    1728:	5f 92       	push	r5
    172a:	6f 92       	push	r6
    172c:	7f 92       	push	r7
    172e:	8f 92       	push	r8
    1730:	9f 92       	push	r9
    1732:	af 92       	push	r10
    1734:	bf 92       	push	r11
    1736:	cf 92       	push	r12
    1738:	df 92       	push	r13
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	2f 93       	push	r18
    1744:	3f 93       	push	r19
    1746:	4f 93       	push	r20
    1748:	5f 93       	push	r21
    174a:	6f 93       	push	r22
    174c:	7f 93       	push	r23
    174e:	8f 93       	push	r24
    1750:	9f 93       	push	r25
    1752:	af 93       	push	r26
    1754:	bf 93       	push	r27
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	ef 93       	push	r30
    175c:	ff 93       	push	r31
    175e:	a0 91 d8 1a 	lds	r26, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    1762:	b0 91 d9 1a 	lds	r27, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    1766:	0d b6       	in	r0, 0x3d	; 61
    1768:	0d 92       	st	X+, r0
    176a:	0e b6       	in	r0, 0x3e	; 62
    176c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    176e:	83 e5       	ldi	r24, 0x53	; 83
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	fc 01       	movw	r30, r24
    1774:	10 82       	st	Z, r1
    if( xTaskIncrementTick() != pdFALSE )
    1776:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <xTaskIncrementTick>
    177a:	88 23       	and	r24, r24
    177c:	11 f0       	breq	.+4      	; 0x1782 <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
    177e:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1782:	a0 91 d8 1a 	lds	r26, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    1786:	b0 91 d9 1a 	lds	r27, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    178a:	cd 91       	ld	r28, X+
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	dd 91       	ld	r29, X+
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	bf 91       	pop	r27
    179c:	af 91       	pop	r26
    179e:	9f 91       	pop	r25
    17a0:	8f 91       	pop	r24
    17a2:	7f 91       	pop	r23
    17a4:	6f 91       	pop	r22
    17a6:	5f 91       	pop	r21
    17a8:	4f 91       	pop	r20
    17aa:	3f 91       	pop	r19
    17ac:	2f 91       	pop	r18
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	bf 90       	pop	r11
    17bc:	af 90       	pop	r10
    17be:	9f 90       	pop	r9
    17c0:	8f 90       	pop	r8
    17c2:	7f 90       	pop	r7
    17c4:	6f 90       	pop	r6
    17c6:	5f 90       	pop	r5
    17c8:	4f 90       	pop	r4
    17ca:	3f 90       	pop	r3
    17cc:	2f 90       	pop	r2
    17ce:	1f 90       	pop	r1
    17d0:	0f 90       	pop	r0
    17d2:	0c be       	out	0x3c, r0	; 60
    17d4:	0f 90       	pop	r0
    17d6:	0b be       	out	0x3b, r0	; 59
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    17de:	08 95       	ret
	...

000017e2 <prvSetupTimerInterrupt>:

/*
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    /* reset watchdog */
    wdt_reset();
    17ea:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	88 70       	andi	r24, 0x08	; 8
    17f2:	99 27       	eor	r25, r25
    17f4:	89 2b       	or	r24, r25
    17f6:	11 f0       	breq	.+4      	; 0x17fc <prvSetupTimerInterrupt+0x1a>
    17f8:	80 ee       	ldi	r24, 0xE0	; 224
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <prvSetupTimerInterrupt+0x1c>
    17fc:	80 ec       	ldi	r24, 0xC0	; 192
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	97 70       	andi	r25, 0x07	; 7
    1802:	89 2b       	or	r24, r25
    1804:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    1806:	88 e1       	ldi	r24, 0x18	; 24
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	a8 95       	wdr
    180e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    /* reset watchdog */
    wdt_reset();

    /* set up WDT Interrupt (rather than the WDT Reset). */
    wdt_interrupt_enable( portUSE_WDTO );
}
    1818:	00 00       	nop
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1820:	76 df       	rcall	.-276    	; 0x170e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1822:	18 95       	reti
	...

00001826 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	00 d0       	rcall	.+0      	; 0x182c <xQueueGenericReset+0x6>
    182c:	1f 92       	push	r1
    182e:	1f 92       	push	r1
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	8b 83       	std	Y+3, r24	; 0x03
    1838:	6d 83       	std	Y+5, r22	; 0x05
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	0f 92       	push	r0
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	fc 01       	movw	r30, r24
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	29 81       	ldd	r18, Y+1	; 0x01
    1854:	3a 81       	ldd	r19, Y+2	; 0x02
    1856:	f9 01       	movw	r30, r18
    1858:	27 8d       	ldd	r18, Z+31	; 0x1f
    185a:	42 2f       	mov	r20, r18
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	29 81       	ldd	r18, Y+1	; 0x01
    1860:	3a 81       	ldd	r19, Y+2	; 0x02
    1862:	f9 01       	movw	r30, r18
    1864:	20 a1       	ldd	r18, Z+32	; 0x20
    1866:	22 2f       	mov	r18, r18
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	42 9f       	mul	r20, r18
    186c:	b0 01       	movw	r22, r0
    186e:	43 9f       	mul	r20, r19
    1870:	70 0d       	add	r23, r0
    1872:	52 9f       	mul	r21, r18
    1874:	70 0d       	add	r23, r0
    1876:	11 24       	eor	r1, r1
    1878:	9b 01       	movw	r18, r22
    187a:	28 0f       	add	r18, r24
    187c:	39 1f       	adc	r19, r25
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	fc 01       	movw	r30, r24
    1884:	35 83       	std	Z+5, r19	; 0x05
    1886:	24 83       	std	Z+4, r18	; 0x04
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	fc 01       	movw	r30, r24
    188e:	16 8e       	std	Z+30, r1	; 0x1e
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	fc 01       	movw	r30, r24
    1896:	20 81       	ld	r18, Z
    1898:	31 81       	ldd	r19, Z+1	; 0x01
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	fc 01       	movw	r30, r24
    18a0:	33 83       	std	Z+3, r19	; 0x03
    18a2:	22 83       	std	Z+2, r18	; 0x02
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	fc 01       	movw	r30, r24
    18aa:	20 81       	ld	r18, Z
    18ac:	31 81       	ldd	r19, Z+1	; 0x01
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	fc 01       	movw	r30, r24
    18b4:	87 8d       	ldd	r24, Z+31	; 0x1f
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	bc 01       	movw	r22, r24
    18bc:	61 50       	subi	r22, 0x01	; 1
    18be:	71 09       	sbc	r23, r1
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	fc 01       	movw	r30, r24
    18c6:	80 a1       	ldd	r24, Z+32	; 0x20
    18c8:	48 2f       	mov	r20, r24
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	64 9f       	mul	r22, r20
    18ce:	c0 01       	movw	r24, r0
    18d0:	65 9f       	mul	r22, r21
    18d2:	90 0d       	add	r25, r0
    18d4:	74 9f       	mul	r23, r20
    18d6:	90 0d       	add	r25, r0
    18d8:	11 24       	eor	r1, r1
    18da:	28 0f       	add	r18, r24
    18dc:	39 1f       	adc	r19, r25
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	fc 01       	movw	r30, r24
    18e4:	37 83       	std	Z+7, r19	; 0x07
    18e6:	26 83       	std	Z+6, r18	; 0x06
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	9a 81       	ldd	r25, Y+2	; 0x02
    18ec:	2f ef       	ldi	r18, 0xFF	; 255
    18ee:	fc 01       	movw	r30, r24
    18f0:	21 a3       	std	Z+33, r18	; 0x21
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	2f ef       	ldi	r18, 0xFF	; 255
    18f8:	fc 01       	movw	r30, r24
    18fa:	22 a3       	std	Z+34, r18	; 0x22
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
    18fe:	88 23       	and	r24, r24
    1900:	79 f4       	brne	.+30     	; 0x1920 <xQueueGenericReset+0xfa>
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	fc 01       	movw	r30, r24
    1908:	80 85       	ldd	r24, Z+8	; 0x08
    190a:	88 23       	and	r24, r24
    190c:	89 f0       	breq	.+34     	; 0x1930 <xQueueGenericReset+0x10a>
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	08 96       	adiw	r24, 0x08	; 8
    1914:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xTaskRemoveFromEventList>
    1918:	88 23       	and	r24, r24
    191a:	51 f0       	breq	.+20     	; 0x1930 <xQueueGenericReset+0x10a>
    191c:	96 de       	rcall	.-724    	; 0x164a <vPortYield>
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <xQueueGenericReset+0x10a>
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	9a 81       	ldd	r25, Y+2	; 0x02
    1924:	08 96       	adiw	r24, 0x08	; 8
    1926:	a0 dc       	rcall	.-1728   	; 0x1268 <vListInitialise>
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	43 96       	adiw	r24, 0x13	; 19
    192e:	9c dc       	rcall	.-1736   	; 0x1268 <vListInitialise>
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <xQueueGenericCreate>:
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	29 97       	sbiw	r28, 0x09	; 9
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	8f 83       	std	Y+7, r24	; 0x07
    1960:	68 87       	std	Y+8, r22	; 0x08
    1962:	49 87       	std	Y+9, r20	; 0x09
    1964:	8f 81       	ldd	r24, Y+7	; 0x07
    1966:	48 2f       	mov	r20, r24
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	88 85       	ldd	r24, Y+8	; 0x08
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	42 9f       	mul	r20, r18
    1972:	c0 01       	movw	r24, r0
    1974:	43 9f       	mul	r20, r19
    1976:	90 0d       	add	r25, r0
    1978:	52 9f       	mul	r21, r18
    197a:	90 0d       	add	r25, r0
    197c:	11 24       	eor	r1, r1
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	9a 81       	ldd	r25, Y+2	; 0x02
    1986:	83 96       	adiw	r24, 0x23	; 35
    1988:	b6 d9       	rcall	.-3220   	; 0xcf6 <pvPortMalloc>
    198a:	9c 83       	std	Y+4, r25	; 0x04
    198c:	8b 83       	std	Y+3, r24	; 0x03
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	89 2b       	or	r24, r25
    1994:	99 f0       	breq	.+38     	; 0x19bc <xQueueGenericCreate+0x76>
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	83 96       	adiw	r24, 0x23	; 35
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	2b 81       	ldd	r18, Y+3	; 0x03
    19aa:	3c 81       	ldd	r19, Y+4	; 0x04
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	89 01       	movw	r16, r18
    19b2:	29 85       	ldd	r18, Y+9	; 0x09
    19b4:	ac 01       	movw	r20, r24
    19b6:	68 85       	ldd	r22, Y+8	; 0x08
    19b8:	8f 81       	ldd	r24, Y+7	; 0x07
    19ba:	0d d0       	rcall	.+26     	; 0x19d6 <prvInitialiseNewQueue>
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	29 96       	adiw	r28, 0x09	; 9
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	08 95       	ret

000019d6 <prvInitialiseNewQueue>:
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	27 97       	sbiw	r28, 0x07	; 7
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	6a 83       	std	Y+2, r22	; 0x02
    19f2:	5c 83       	std	Y+4, r21	; 0x04
    19f4:	4b 83       	std	Y+3, r20	; 0x03
    19f6:	2d 83       	std	Y+5, r18	; 0x05
    19f8:	1f 83       	std	Y+7, r17	; 0x07
    19fa:	0e 83       	std	Y+6, r16	; 0x06
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	88 23       	and	r24, r24
    1a00:	41 f4       	brne	.+16     	; 0x1a12 <prvInitialiseNewQueue+0x3c>
    1a02:	8e 81       	ldd	r24, Y+6	; 0x06
    1a04:	9f 81       	ldd	r25, Y+7	; 0x07
    1a06:	2e 81       	ldd	r18, Y+6	; 0x06
    1a08:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	31 83       	std	Z+1, r19	; 0x01
    1a0e:	20 83       	st	Z, r18
    1a10:	07 c0       	rjmp	.+14     	; 0x1a20 <prvInitialiseNewQueue+0x4a>
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	9f 81       	ldd	r25, Y+7	; 0x07
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	31 83       	std	Z+1, r19	; 0x01
    1a1e:	20 83       	st	Z, r18
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	9f 81       	ldd	r25, Y+7	; 0x07
    1a24:	29 81       	ldd	r18, Y+1	; 0x01
    1a26:	fc 01       	movw	r30, r24
    1a28:	27 8f       	std	Z+31, r18	; 0x1f
    1a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a30:	fc 01       	movw	r30, r24
    1a32:	20 a3       	std	Z+32, r18	; 0x20
    1a34:	8e 81       	ldd	r24, Y+6	; 0x06
    1a36:	9f 81       	ldd	r25, Y+7	; 0x07
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	f5 de       	rcall	.-534    	; 0x1826 <xQueueGenericReset>
    1a3c:	00 00       	nop
    1a3e:	27 96       	adiw	r28, 0x07	; 7
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <xQueueGenericSend>:
    1a54:	0f 93       	push	r16
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	62 97       	sbiw	r28, 0x12	; 18
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	9b 87       	std	Y+11, r25	; 0x0b
    1a6c:	8a 87       	std	Y+10, r24	; 0x0a
    1a6e:	7d 87       	std	Y+13, r23	; 0x0d
    1a70:	6c 87       	std	Y+12, r22	; 0x0c
    1a72:	2e 87       	std	Y+14, r18	; 0x0e
    1a74:	3f 87       	std	Y+15, r19	; 0x0f
    1a76:	48 8b       	std	Y+16, r20	; 0x10
    1a78:	59 8b       	std	Y+17, r21	; 0x11
    1a7a:	0a 8b       	std	Y+18, r16	; 0x12
    1a7c:	19 82       	std	Y+1, r1	; 0x01
    1a7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a82:	9b 83       	std	Y+3, r25	; 0x03
    1a84:	8a 83       	std	Y+2, r24	; 0x02
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	0f 92       	push	r0
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a90:	fc 01       	movw	r30, r24
    1a92:	26 8d       	ldd	r18, Z+30	; 0x1e
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	9b 81       	ldd	r25, Y+3	; 0x03
    1a98:	fc 01       	movw	r30, r24
    1a9a:	87 8d       	ldd	r24, Z+31	; 0x1f
    1a9c:	28 17       	cp	r18, r24
    1a9e:	18 f0       	brcs	.+6      	; 0x1aa6 <xQueueGenericSend+0x52>
    1aa0:	8a 89       	ldd	r24, Y+18	; 0x12
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	f9 f4       	brne	.+62     	; 0x1ae4 <xQueueGenericSend+0x90>
    1aa6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aa8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	9b 81       	ldd	r25, Y+3	; 0x03
    1aae:	4a 89       	ldd	r20, Y+18	; 0x12
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	9d d1       	rcall	.+826    	; 0x1dee <prvCopyDataToQueue>
    1ab4:	8c 83       	std	Y+4, r24	; 0x04
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	fc 01       	movw	r30, r24
    1abc:	83 89       	ldd	r24, Z+19	; 0x13
    1abe:	88 23       	and	r24, r24
    1ac0:	49 f0       	breq	.+18     	; 0x1ad4 <xQueueGenericSend+0x80>
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	43 96       	adiw	r24, 0x13	; 19
    1ac8:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xTaskRemoveFromEventList>
    1acc:	88 23       	and	r24, r24
    1ace:	31 f0       	breq	.+12     	; 0x1adc <xQueueGenericSend+0x88>
    1ad0:	bc dd       	rcall	.-1160   	; 0x164a <vPortYield>
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <xQueueGenericSend+0x88>
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	88 23       	and	r24, r24
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <xQueueGenericSend+0x88>
    1ada:	b7 dd       	rcall	.-1170   	; 0x164a <vPortYield>
    1adc:	0f 90       	pop	r0
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	64 c0       	rjmp	.+200    	; 0x1bac <xQueueGenericSend+0x158>
    1ae4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ae8:	a8 89       	ldd	r26, Y+16	; 0x10
    1aea:	b9 89       	ldd	r27, Y+17	; 0x11
    1aec:	89 2b       	or	r24, r25
    1aee:	8a 2b       	or	r24, r26
    1af0:	8b 2b       	or	r24, r27
    1af2:	21 f4       	brne	.+8      	; 0x1afc <xQueueGenericSend+0xa8>
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	58 c0       	rjmp	.+176    	; 0x1bac <xQueueGenericSend+0x158>
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	88 23       	and	r24, r24
    1b00:	31 f4       	brne	.+12     	; 0x1b0e <xQueueGenericSend+0xba>
    1b02:	ce 01       	movw	r24, r28
    1b04:	05 96       	adiw	r24, 0x05	; 5
    1b06:	0e 94 68 22 	call	0x44d0	; 0x44d0 <vTaskInternalSetTimeOutState>
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	0f 90       	pop	r0
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	0e 94 24 1a 	call	0x3448	; 0x3448 <vTaskSuspendAll>
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	0f 92       	push	r0
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b20:	fc 01       	movw	r30, r24
    1b22:	81 a1       	ldd	r24, Z+33	; 0x21
    1b24:	8f 3f       	cpi	r24, 0xFF	; 255
    1b26:	21 f4       	brne	.+8      	; 0x1b30 <xQueueGenericSend+0xdc>
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	11 a2       	std	Z+33, r1	; 0x21
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	9b 81       	ldd	r25, Y+3	; 0x03
    1b34:	fc 01       	movw	r30, r24
    1b36:	82 a1       	ldd	r24, Z+34	; 0x22
    1b38:	8f 3f       	cpi	r24, 0xFF	; 255
    1b3a:	21 f4       	brne	.+8      	; 0x1b44 <xQueueGenericSend+0xf0>
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b40:	fc 01       	movw	r30, r24
    1b42:	12 a2       	std	Z+34, r1	; 0x22
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	9e 01       	movw	r18, r28
    1b4a:	22 5f       	subi	r18, 0xF2	; 242
    1b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4e:	ce 01       	movw	r24, r28
    1b50:	05 96       	adiw	r24, 0x05	; 5
    1b52:	b9 01       	movw	r22, r18
    1b54:	0e 94 8b 22 	call	0x4516	; 0x4516 <xTaskCheckForTimeOut>
    1b58:	88 23       	and	r24, r24
    1b5a:	11 f5       	brne	.+68     	; 0x1ba0 <xQueueGenericSend+0x14c>
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b60:	e2 d2       	rcall	.+1476   	; 0x2126 <prvIsQueueFull>
    1b62:	88 23       	and	r24, r24
    1b64:	b9 f0       	breq	.+46     	; 0x1b94 <xQueueGenericSend+0x140>
    1b66:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b68:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b6a:	a8 89       	ldd	r26, Y+16	; 0x10
    1b6c:	b9 89       	ldd	r27, Y+17	; 0x11
    1b6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1b70:	3b 81       	ldd	r19, Y+3	; 0x03
    1b72:	28 5f       	subi	r18, 0xF8	; 248
    1b74:	3f 4f       	sbci	r19, 0xFF	; 255
    1b76:	ac 01       	movw	r20, r24
    1b78:	bd 01       	movw	r22, r26
    1b7a:	c9 01       	movw	r24, r18
    1b7c:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <vTaskPlaceOnEventList>
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	55 d2       	rcall	.+1194   	; 0x2030 <prvUnlockQueue>
    1b86:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
    1b8a:	88 23       	and	r24, r24
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <xQueueGenericSend+0x13c>
    1b8e:	7b cf       	rjmp	.-266    	; 0x1a86 <xQueueGenericSend+0x32>
    1b90:	5c dd       	rcall	.-1352   	; 0x164a <vPortYield>
    1b92:	79 cf       	rjmp	.-270    	; 0x1a86 <xQueueGenericSend+0x32>
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	9b 81       	ldd	r25, Y+3	; 0x03
    1b98:	4b d2       	rcall	.+1174   	; 0x2030 <prvUnlockQueue>
    1b9a:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
    1b9e:	73 cf       	rjmp	.-282    	; 0x1a86 <xQueueGenericSend+0x32>
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba4:	45 d2       	rcall	.+1162   	; 0x2030 <prvUnlockQueue>
    1ba6:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	62 96       	adiw	r28, 0x12	; 18
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	0f 91       	pop	r16
    1bbe:	08 95       	ret

00001bc0 <xQueueGenericSendFromISR>:
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	2d 97       	sbiw	r28, 0x0d	; 13
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	98 87       	std	Y+8, r25	; 0x08
    1bd6:	8f 83       	std	Y+7, r24	; 0x07
    1bd8:	7a 87       	std	Y+10, r23	; 0x0a
    1bda:	69 87       	std	Y+9, r22	; 0x09
    1bdc:	5c 87       	std	Y+12, r21	; 0x0c
    1bde:	4b 87       	std	Y+11, r20	; 0x0b
    1be0:	2d 87       	std	Y+13, r18	; 0x0d
    1be2:	8f 81       	ldd	r24, Y+7	; 0x07
    1be4:	98 85       	ldd	r25, Y+8	; 0x08
    1be6:	9b 83       	std	Y+3, r25	; 0x03
    1be8:	8a 83       	std	Y+2, r24	; 0x02
    1bea:	1c 82       	std	Y+4, r1	; 0x04
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	26 8d       	ldd	r18, Z+30	; 0x1e
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	87 8d       	ldd	r24, Z+31	; 0x1f
    1bfc:	28 17       	cp	r18, r24
    1bfe:	18 f0       	brcs	.+6      	; 0x1c06 <xQueueGenericSendFromISR+0x46>
    1c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	a9 f5       	brne	.+106    	; 0x1c70 <xQueueGenericSendFromISR+0xb0>
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	82 a1       	ldd	r24, Z+34	; 0x22
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	9b 81       	ldd	r25, Y+3	; 0x03
    1c14:	fc 01       	movw	r30, r24
    1c16:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c18:	8e 83       	std	Y+6, r24	; 0x06
    1c1a:	29 85       	ldd	r18, Y+9	; 0x09
    1c1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	4d 85       	ldd	r20, Y+13	; 0x0d
    1c24:	b9 01       	movw	r22, r18
    1c26:	e3 d0       	rcall	.+454    	; 0x1dee <prvCopyDataToQueue>
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c2c:	b9 f4       	brne	.+46     	; 0x1c5c <xQueueGenericSendFromISR+0x9c>
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	9b 81       	ldd	r25, Y+3	; 0x03
    1c32:	fc 01       	movw	r30, r24
    1c34:	83 89       	ldd	r24, Z+19	; 0x13
    1c36:	88 23       	and	r24, r24
    1c38:	c1 f0       	breq	.+48     	; 0x1c6a <xQueueGenericSendFromISR+0xaa>
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3e:	43 96       	adiw	r24, 0x13	; 19
    1c40:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xTaskRemoveFromEventList>
    1c44:	88 23       	and	r24, r24
    1c46:	89 f0       	breq	.+34     	; 0x1c6a <xQueueGenericSendFromISR+0xaa>
    1c48:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c4c:	89 2b       	or	r24, r25
    1c4e:	69 f0       	breq	.+26     	; 0x1c6a <xQueueGenericSendFromISR+0xaa>
    1c50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c52:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c54:	21 e0       	ldi	r18, 0x01	; 1
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
    1c5a:	07 c0       	rjmp	.+14     	; 0x1c6a <xQueueGenericSendFromISR+0xaa>
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	28 2f       	mov	r18, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	9b 81       	ldd	r25, Y+3	; 0x03
    1c66:	fc 01       	movw	r30, r24
    1c68:	22 a3       	std	Z+34, r18	; 0x22
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <xQueueGenericSendFromISR+0xb2>
    1c70:	19 82       	std	Y+1, r1	; 0x01
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	2d 96       	adiw	r28, 0x0d	; 13
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <xQueueReceive>:
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	61 97       	sbiw	r28, 0x11	; 17
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	9b 87       	std	Y+11, r25	; 0x0b
    1c9c:	8a 87       	std	Y+10, r24	; 0x0a
    1c9e:	7d 87       	std	Y+13, r23	; 0x0d
    1ca0:	6c 87       	std	Y+12, r22	; 0x0c
    1ca2:	2e 87       	std	Y+14, r18	; 0x0e
    1ca4:	3f 87       	std	Y+15, r19	; 0x0f
    1ca6:	48 8b       	std	Y+16, r20	; 0x10
    1ca8:	59 8b       	std	Y+17, r21	; 0x11
    1caa:	19 82       	std	Y+1, r1	; 0x01
    1cac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cb0:	9b 83       	std	Y+3, r25	; 0x03
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	0f 92       	push	r0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cc2:	8c 83       	std	Y+4, r24	; 0x04
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	88 23       	and	r24, r24
    1cc8:	f9 f0       	breq	.+62     	; 0x1d08 <xQueueReceive+0x82>
    1cca:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ccc:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd2:	b9 01       	movw	r22, r18
    1cd4:	5c d1       	rcall	.+696    	; 0x1f8e <prvCopyDataFromQueue>
    1cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd8:	2f ef       	ldi	r18, 0xFF	; 255
    1cda:	28 0f       	add	r18, r24
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	26 8f       	std	Z+30, r18	; 0x1e
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce8:	fc 01       	movw	r30, r24
    1cea:	80 85       	ldd	r24, Z+8	; 0x08
    1cec:	88 23       	and	r24, r24
    1cee:	41 f0       	breq	.+16     	; 0x1d00 <xQueueReceive+0x7a>
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf4:	08 96       	adiw	r24, 0x08	; 8
    1cf6:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xTaskRemoveFromEventList>
    1cfa:	88 23       	and	r24, r24
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <xQueueReceive+0x7a>
    1cfe:	a5 dc       	rcall	.-1718   	; 0x164a <vPortYield>
    1d00:	0f 90       	pop	r0
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	6a c0       	rjmp	.+212    	; 0x1ddc <xQueueReceive+0x156>
    1d08:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d0c:	a8 89       	ldd	r26, Y+16	; 0x10
    1d0e:	b9 89       	ldd	r27, Y+17	; 0x11
    1d10:	89 2b       	or	r24, r25
    1d12:	8a 2b       	or	r24, r26
    1d14:	8b 2b       	or	r24, r27
    1d16:	21 f4       	brne	.+8      	; 0x1d20 <xQueueReceive+0x9a>
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	5e c0       	rjmp	.+188    	; 0x1ddc <xQueueReceive+0x156>
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	88 23       	and	r24, r24
    1d24:	31 f4       	brne	.+12     	; 0x1d32 <xQueueReceive+0xac>
    1d26:	ce 01       	movw	r24, r28
    1d28:	05 96       	adiw	r24, 0x05	; 5
    1d2a:	0e 94 68 22 	call	0x44d0	; 0x44d0 <vTaskInternalSetTimeOutState>
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	0f 90       	pop	r0
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	0e 94 24 1a 	call	0x3448	; 0x3448 <vTaskSuspendAll>
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	0f 92       	push	r0
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	9b 81       	ldd	r25, Y+3	; 0x03
    1d44:	fc 01       	movw	r30, r24
    1d46:	81 a1       	ldd	r24, Z+33	; 0x21
    1d48:	8f 3f       	cpi	r24, 0xFF	; 255
    1d4a:	21 f4       	brne	.+8      	; 0x1d54 <xQueueReceive+0xce>
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d50:	fc 01       	movw	r30, r24
    1d52:	11 a2       	std	Z+33, r1	; 0x21
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	fc 01       	movw	r30, r24
    1d5a:	82 a1       	ldd	r24, Z+34	; 0x22
    1d5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d5e:	21 f4       	brne	.+8      	; 0x1d68 <xQueueReceive+0xe2>
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	9b 81       	ldd	r25, Y+3	; 0x03
    1d64:	fc 01       	movw	r30, r24
    1d66:	12 a2       	std	Z+34, r1	; 0x22
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	9e 01       	movw	r18, r28
    1d6e:	22 5f       	subi	r18, 0xF2	; 242
    1d70:	3f 4f       	sbci	r19, 0xFF	; 255
    1d72:	ce 01       	movw	r24, r28
    1d74:	05 96       	adiw	r24, 0x05	; 5
    1d76:	b9 01       	movw	r22, r18
    1d78:	0e 94 8b 22 	call	0x4516	; 0x4516 <xTaskCheckForTimeOut>
    1d7c:	88 23       	and	r24, r24
    1d7e:	11 f5       	brne	.+68     	; 0x1dc4 <xQueueReceive+0x13e>
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	b3 d1       	rcall	.+870    	; 0x20ec <prvIsQueueEmpty>
    1d86:	88 23       	and	r24, r24
    1d88:	b9 f0       	breq	.+46     	; 0x1db8 <xQueueReceive+0x132>
    1d8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d8e:	a8 89       	ldd	r26, Y+16	; 0x10
    1d90:	b9 89       	ldd	r27, Y+17	; 0x11
    1d92:	2a 81       	ldd	r18, Y+2	; 0x02
    1d94:	3b 81       	ldd	r19, Y+3	; 0x03
    1d96:	2d 5e       	subi	r18, 0xED	; 237
    1d98:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9a:	ac 01       	movw	r20, r24
    1d9c:	bd 01       	movw	r22, r26
    1d9e:	c9 01       	movw	r24, r18
    1da0:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <vTaskPlaceOnEventList>
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	43 d1       	rcall	.+646    	; 0x2030 <prvUnlockQueue>
    1daa:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
    1dae:	88 23       	and	r24, r24
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <xQueueReceive+0x12e>
    1db2:	80 cf       	rjmp	.-256    	; 0x1cb4 <xQueueReceive+0x2e>
    1db4:	4a dc       	rcall	.-1900   	; 0x164a <vPortYield>
    1db6:	7e cf       	rjmp	.-260    	; 0x1cb4 <xQueueReceive+0x2e>
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	39 d1       	rcall	.+626    	; 0x2030 <prvUnlockQueue>
    1dbe:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
    1dc2:	78 cf       	rjmp	.-272    	; 0x1cb4 <xQueueReceive+0x2e>
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	33 d1       	rcall	.+614    	; 0x2030 <prvUnlockQueue>
    1dca:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	8c d1       	rcall	.+792    	; 0x20ec <prvIsQueueEmpty>
    1dd4:	88 23       	and	r24, r24
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <xQueueReceive+0x154>
    1dd8:	6d cf       	rjmp	.-294    	; 0x1cb4 <xQueueReceive+0x2e>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	61 96       	adiw	r28, 0x11	; 17
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	08 95       	ret

00001dee <prvCopyDataToQueue>:
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	27 97       	sbiw	r28, 0x07	; 7
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    1e06:	7e 83       	std	Y+6, r23	; 0x06
    1e08:	6d 83       	std	Y+5, r22	; 0x05
    1e0a:	4f 83       	std	Y+7, r20	; 0x07
    1e0c:	19 82       	std	Y+1, r1	; 0x01
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	fc 01       	movw	r30, r24
    1e14:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e16:	8a 83       	std	Y+2, r24	; 0x02
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	80 a1       	ldd	r24, Z+32	; 0x20
    1e20:	88 23       	and	r24, r24
    1e22:	b1 f4       	brne	.+44     	; 0x1e50 <prvCopyDataToQueue+0x62>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	fc 01       	movw	r30, r24
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	89 2b       	or	r24, r25
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <prvCopyDataToQueue+0x46>
    1e32:	9c c0       	rjmp	.+312    	; 0x1f6c <prvCopyDataToQueue+0x17e>
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	fc 01       	movw	r30, r24
    1e3a:	84 81       	ldd	r24, Z+4	; 0x04
    1e3c:	95 81       	ldd	r25, Z+5	; 0x05
    1e3e:	0e 94 2b 24 	call	0x4856	; 0x4856 <xTaskPriorityDisinherit>
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	fc 01       	movw	r30, r24
    1e4a:	15 82       	std	Z+5, r1	; 0x05
    1e4c:	14 82       	std	Z+4, r1	; 0x04
    1e4e:	8e c0       	rjmp	.+284    	; 0x1f6c <prvCopyDataToQueue+0x17e>
    1e50:	8f 81       	ldd	r24, Y+7	; 0x07
    1e52:	88 23       	and	r24, r24
    1e54:	d9 f5       	brne	.+118    	; 0x1ecc <prvCopyDataToQueue+0xde>
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	80 a1       	ldd	r24, Z+32	; 0x20
    1e5e:	48 2f       	mov	r20, r24
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	fc 01       	movw	r30, r24
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e70:	b9 01       	movw	r22, r18
    1e72:	0e 94 71 4c 	call	0x98e2	; 0x98e2 <memcpy>
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	22 81       	ldd	r18, Z+2	; 0x02
    1e7e:	33 81       	ldd	r19, Z+3	; 0x03
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	9c 81       	ldd	r25, Y+4	; 0x04
    1e84:	fc 01       	movw	r30, r24
    1e86:	80 a1       	ldd	r24, Z+32	; 0x20
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	28 0f       	add	r18, r24
    1e8e:	39 1f       	adc	r19, r25
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	fc 01       	movw	r30, r24
    1e96:	33 83       	std	Z+3, r19	; 0x03
    1e98:	22 83       	std	Z+2, r18	; 0x02
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	22 81       	ldd	r18, Z+2	; 0x02
    1ea2:	33 81       	ldd	r19, Z+3	; 0x03
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	84 81       	ldd	r24, Z+4	; 0x04
    1eac:	95 81       	ldd	r25, Z+5	; 0x05
    1eae:	28 17       	cp	r18, r24
    1eb0:	39 07       	cpc	r19, r25
    1eb2:	08 f4       	brcc	.+2      	; 0x1eb6 <prvCopyDataToQueue+0xc8>
    1eb4:	5b c0       	rjmp	.+182    	; 0x1f6c <prvCopyDataToQueue+0x17e>
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	fc 01       	movw	r30, r24
    1ebc:	20 81       	ld	r18, Z
    1ebe:	31 81       	ldd	r19, Z+1	; 0x01
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	33 83       	std	Z+3, r19	; 0x03
    1ec8:	22 83       	std	Z+2, r18	; 0x02
    1eca:	50 c0       	rjmp	.+160    	; 0x1f6c <prvCopyDataToQueue+0x17e>
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	80 a1       	ldd	r24, Z+32	; 0x20
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	fc 01       	movw	r30, r24
    1ede:	86 81       	ldd	r24, Z+6	; 0x06
    1ee0:	97 81       	ldd	r25, Z+7	; 0x07
    1ee2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ee4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ee6:	b9 01       	movw	r22, r18
    1ee8:	0e 94 71 4c 	call	0x98e2	; 0x98e2 <memcpy>
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	26 81       	ldd	r18, Z+6	; 0x06
    1ef4:	37 81       	ldd	r19, Z+7	; 0x07
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	fc 01       	movw	r30, r24
    1efc:	80 a1       	ldd	r24, Z+32	; 0x20
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	91 95       	neg	r25
    1f04:	81 95       	neg	r24
    1f06:	91 09       	sbc	r25, r1
    1f08:	28 0f       	add	r18, r24
    1f0a:	39 1f       	adc	r19, r25
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	fc 01       	movw	r30, r24
    1f12:	37 83       	std	Z+7, r19	; 0x07
    1f14:	26 83       	std	Z+6, r18	; 0x06
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	26 81       	ldd	r18, Z+6	; 0x06
    1f1e:	37 81       	ldd	r19, Z+7	; 0x07
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	fc 01       	movw	r30, r24
    1f26:	80 81       	ld	r24, Z
    1f28:	91 81       	ldd	r25, Z+1	; 0x01
    1f2a:	28 17       	cp	r18, r24
    1f2c:	39 07       	cpc	r19, r25
    1f2e:	a8 f4       	brcc	.+42     	; 0x1f5a <prvCopyDataToQueue+0x16c>
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	fc 01       	movw	r30, r24
    1f36:	24 81       	ldd	r18, Z+4	; 0x04
    1f38:	35 81       	ldd	r19, Z+5	; 0x05
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	fc 01       	movw	r30, r24
    1f40:	80 a1       	ldd	r24, Z+32	; 0x20
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	91 95       	neg	r25
    1f48:	81 95       	neg	r24
    1f4a:	91 09       	sbc	r25, r1
    1f4c:	28 0f       	add	r18, r24
    1f4e:	39 1f       	adc	r19, r25
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	fc 01       	movw	r30, r24
    1f56:	37 83       	std	Z+7, r19	; 0x07
    1f58:	26 83       	std	Z+6, r18	; 0x06
    1f5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	31 f4       	brne	.+12     	; 0x1f6c <prvCopyDataToQueue+0x17e>
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	88 23       	and	r24, r24
    1f64:	19 f0       	breq	.+6      	; 0x1f6c <prvCopyDataToQueue+0x17e>
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	81 50       	subi	r24, 0x01	; 1
    1f6a:	8a 83       	std	Y+2, r24	; 0x02
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	28 0f       	add	r18, r24
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	fc 01       	movw	r30, r24
    1f78:	26 8f       	std	Z+30, r18	; 0x1e
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	27 96       	adiw	r28, 0x07	; 7
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <prvCopyDataFromQueue>:
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <prvCopyDataFromQueue+0x6>
    1f94:	1f 92       	push	r1
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	7c 83       	std	Y+4, r23	; 0x04
    1fa0:	6b 83       	std	Y+3, r22	; 0x03
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	80 a1       	ldd	r24, Z+32	; 0x20
    1faa:	88 23       	and	r24, r24
    1fac:	c9 f1       	breq	.+114    	; 0x2020 <__DATA_REGION_LENGTH__+0x20>
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	26 81       	ldd	r18, Z+6	; 0x06
    1fb6:	37 81       	ldd	r19, Z+7	; 0x07
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	80 a1       	ldd	r24, Z+32	; 0x20
    1fc0:	88 2f       	mov	r24, r24
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	28 0f       	add	r18, r24
    1fc6:	39 1f       	adc	r19, r25
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	fc 01       	movw	r30, r24
    1fce:	37 83       	std	Z+7, r19	; 0x07
    1fd0:	26 83       	std	Z+6, r18	; 0x06
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	26 81       	ldd	r18, Z+6	; 0x06
    1fda:	37 81       	ldd	r19, Z+7	; 0x07
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	84 81       	ldd	r24, Z+4	; 0x04
    1fe4:	95 81       	ldd	r25, Z+5	; 0x05
    1fe6:	28 17       	cp	r18, r24
    1fe8:	39 07       	cpc	r19, r25
    1fea:	50 f0       	brcs	.+20     	; 0x2000 <__DATA_REGION_LENGTH__>
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	20 81       	ld	r18, Z
    1ff4:	31 81       	ldd	r19, Z+1	; 0x01
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	37 83       	std	Z+7, r19	; 0x07
    1ffe:	26 83       	std	Z+6, r18	; 0x06
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	fc 01       	movw	r30, r24
    2006:	80 a1       	ldd	r24, Z+32	; 0x20
    2008:	48 2f       	mov	r20, r24
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	fc 01       	movw	r30, r24
    2012:	26 81       	ldd	r18, Z+6	; 0x06
    2014:	37 81       	ldd	r19, Z+7	; 0x07
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	b9 01       	movw	r22, r18
    201c:	0e 94 71 4c 	call	0x98e2	; 0x98e2 <memcpy>
    2020:	00 00       	nop
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	08 95       	ret

00002030 <prvUnlockQueue>:
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	00 d0       	rcall	.+0      	; 0x2036 <prvUnlockQueue+0x6>
    2036:	1f 92       	push	r1
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	9c 83       	std	Y+4, r25	; 0x04
    203e:	8b 83       	std	Y+3, r24	; 0x03
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	0f 92       	push	r0
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	fc 01       	movw	r30, r24
    204c:	82 a1       	ldd	r24, Z+34	; 0x22
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	12 c0       	rjmp	.+36     	; 0x2076 <prvUnlockQueue+0x46>
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	fc 01       	movw	r30, r24
    2058:	83 89       	ldd	r24, Z+19	; 0x13
    205a:	88 23       	and	r24, r24
    205c:	81 f0       	breq	.+32     	; 0x207e <prvUnlockQueue+0x4e>
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	43 96       	adiw	r24, 0x13	; 19
    2064:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xTaskRemoveFromEventList>
    2068:	88 23       	and	r24, r24
    206a:	11 f0       	breq	.+4      	; 0x2070 <prvUnlockQueue+0x40>
    206c:	0e 94 3b 23 	call	0x4676	; 0x4676 <vTaskMissedYield>
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	81 50       	subi	r24, 0x01	; 1
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	18 16       	cp	r1, r24
    207a:	5c f3       	brlt	.-42     	; 0x2052 <prvUnlockQueue+0x22>
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <prvUnlockQueue+0x50>
    207e:	00 00       	nop
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	2f ef       	ldi	r18, 0xFF	; 255
    2086:	fc 01       	movw	r30, r24
    2088:	22 a3       	std	Z+34, r18	; 0x22
    208a:	0f 90       	pop	r0
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	0f 92       	push	r0
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	9c 81       	ldd	r25, Y+4	; 0x04
    2098:	fc 01       	movw	r30, r24
    209a:	81 a1       	ldd	r24, Z+33	; 0x21
    209c:	8a 83       	std	Y+2, r24	; 0x02
    209e:	12 c0       	rjmp	.+36     	; 0x20c4 <prvUnlockQueue+0x94>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	fc 01       	movw	r30, r24
    20a6:	80 85       	ldd	r24, Z+8	; 0x08
    20a8:	88 23       	and	r24, r24
    20aa:	81 f0       	breq	.+32     	; 0x20cc <prvUnlockQueue+0x9c>
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	08 96       	adiw	r24, 0x08	; 8
    20b2:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <xTaskRemoveFromEventList>
    20b6:	88 23       	and	r24, r24
    20b8:	11 f0       	breq	.+4      	; 0x20be <prvUnlockQueue+0x8e>
    20ba:	0e 94 3b 23 	call	0x4676	; 0x4676 <vTaskMissedYield>
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	81 50       	subi	r24, 0x01	; 1
    20c2:	8a 83       	std	Y+2, r24	; 0x02
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	18 16       	cp	r1, r24
    20c8:	5c f3       	brlt	.-42     	; 0x20a0 <prvUnlockQueue+0x70>
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <prvUnlockQueue+0x9e>
    20cc:	00 00       	nop
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	2f ef       	ldi	r18, 0xFF	; 255
    20d4:	fc 01       	movw	r30, r24
    20d6:	21 a3       	std	Z+33, r18	; 0x21
    20d8:	0f 90       	pop	r0
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	00 00       	nop
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	08 95       	ret

000020ec <prvIsQueueEmpty>:
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <prvIsQueueEmpty+0x6>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	9b 83       	std	Y+3, r25	; 0x03
    20f8:	8a 83       	std	Y+2, r24	; 0x02
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	0f 92       	push	r0
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	9b 81       	ldd	r25, Y+3	; 0x03
    2104:	fc 01       	movw	r30, r24
    2106:	86 8d       	ldd	r24, Z+30	; 0x1e
    2108:	88 23       	and	r24, r24
    210a:	19 f4       	brne	.+6      	; 0x2112 <prvIsQueueEmpty+0x26>
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <prvIsQueueEmpty+0x28>
    2112:	19 82       	std	Y+1, r1	; 0x01
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	08 95       	ret

00002126 <prvIsQueueFull>:
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	00 d0       	rcall	.+0      	; 0x212c <prvIsQueueFull+0x6>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	9b 83       	std	Y+3, r25	; 0x03
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	0f 92       	push	r0
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	9b 81       	ldd	r25, Y+3	; 0x03
    213e:	fc 01       	movw	r30, r24
    2140:	26 8d       	ldd	r18, Z+30	; 0x1e
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	9b 81       	ldd	r25, Y+3	; 0x03
    2146:	fc 01       	movw	r30, r24
    2148:	87 8d       	ldd	r24, Z+31	; 0x1f
    214a:	28 17       	cp	r18, r24
    214c:	19 f4       	brne	.+6      	; 0x2154 <prvIsQueueFull+0x2e>
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <prvIsQueueFull+0x30>
    2154:	19 82       	std	Y+1, r1	; 0x01
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	08 95       	ret

00002168 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	29 97       	sbiw	r28, 0x09	; 9
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	9c 83       	std	Y+4, r25	; 0x04
    217e:	8b 83       	std	Y+3, r24	; 0x03
    2180:	4d 83       	std	Y+5, r20	; 0x05
    2182:	5e 83       	std	Y+6, r21	; 0x06
    2184:	6f 83       	std	Y+7, r22	; 0x07
    2186:	78 87       	std	Y+8, r23	; 0x08
    2188:	29 87       	std	Y+9, r18	; 0x09
        Queue_t * const pxQueue = xQueue;
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	0f 92       	push	r0
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	fc 01       	movw	r30, r24
    219e:	81 a1       	ldd	r24, Z+33	; 0x21
    21a0:	8f 3f       	cpi	r24, 0xFF	; 255
    21a2:	21 f4       	brne	.+8      	; 0x21ac <vQueueWaitForMessageRestricted+0x44>
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	fc 01       	movw	r30, r24
    21aa:	11 a2       	std	Z+33, r1	; 0x21
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	fc 01       	movw	r30, r24
    21b2:	82 a1       	ldd	r24, Z+34	; 0x22
    21b4:	8f 3f       	cpi	r24, 0xFF	; 255
    21b6:	21 f4       	brne	.+8      	; 0x21c0 <vQueueWaitForMessageRestricted+0x58>
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	fc 01       	movw	r30, r24
    21be:	12 a2       	std	Z+34, r1	; 0x22
    21c0:	0f 90       	pop	r0
    21c2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	fc 01       	movw	r30, r24
    21ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    21cc:	88 23       	and	r24, r24
    21ce:	71 f4       	brne	.+28     	; 0x21ec <vQueueWaitForMessageRestricted+0x84>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	9a 81       	ldd	r25, Y+2	; 0x02
    21d4:	fc 01       	movw	r30, r24
    21d6:	73 96       	adiw	r30, 0x13	; 19
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	af 81       	ldd	r26, Y+7	; 0x07
    21de:	b8 85       	ldd	r27, Y+8	; 0x08
    21e0:	29 85       	ldd	r18, Y+9	; 0x09
    21e2:	ac 01       	movw	r20, r24
    21e4:	bd 01       	movw	r22, r26
    21e6:	cf 01       	movw	r24, r30
    21e8:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	1f df       	rcall	.-450    	; 0x2030 <prvUnlockQueue>
    }
    21f2:	00 00       	nop
    21f4:	29 96       	adiw	r28, 0x09	; 9
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    2206:	0f 93       	push	r16
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	28 97       	sbiw	r28, 0x08	; 8
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	9d 83       	std	Y+5, r25	; 0x05
    221e:	8c 83       	std	Y+4, r24	; 0x04
    2220:	7f 83       	std	Y+7, r23	; 0x07
    2222:	6e 83       	std	Y+6, r22	; 0x06
    2224:	48 87       	std	Y+8, r20	; 0x08
    2226:	88 85       	ldd	r24, Y+8	; 0x08
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	19 f4       	brne	.+6      	; 0x2232 <xStreamBufferGenericCreate+0x2c>
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	8b 83       	std	Y+3, r24	; 0x03
    2230:	01 c0       	rjmp	.+2      	; 0x2234 <xStreamBufferGenericCreate+0x2e>
    2232:	1b 82       	std	Y+3, r1	; 0x03
    2234:	8e 81       	ldd	r24, Y+6	; 0x06
    2236:	9f 81       	ldd	r25, Y+7	; 0x07
    2238:	89 2b       	or	r24, r25
    223a:	21 f4       	brne	.+8      	; 0x2244 <xStreamBufferGenericCreate+0x3e>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9f 83       	std	Y+7, r25	; 0x07
    2242:	8e 83       	std	Y+6, r24	; 0x06
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	9d 81       	ldd	r25, Y+5	; 0x05
    2248:	9c 01       	movw	r18, r24
    224a:	20 5f       	subi	r18, 0xF0	; 240
    224c:	3f 4f       	sbci	r19, 0xFF	; 255
    224e:	8c 81       	ldd	r24, Y+4	; 0x04
    2250:	9d 81       	ldd	r25, Y+5	; 0x05
    2252:	82 17       	cp	r24, r18
    2254:	93 07       	cpc	r25, r19
    2256:	68 f4       	brcc	.+26     	; 0x2272 <xStreamBufferGenericCreate+0x6c>
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	9d 83       	std	Y+5, r25	; 0x05
    2260:	8c 83       	std	Y+4, r24	; 0x04
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	9d 81       	ldd	r25, Y+5	; 0x05
    2266:	0f 96       	adiw	r24, 0x0f	; 15
    2268:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <pvPortMalloc>
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <xStreamBufferGenericCreate+0x70>
    2272:	1a 82       	std	Y+2, r1	; 0x02
    2274:	19 82       	std	Y+1, r1	; 0x01
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	89 2b       	or	r24, r25
    227c:	69 f0       	breq	.+26     	; 0x2298 <xStreamBufferGenericCreate+0x92>
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	bc 01       	movw	r22, r24
    2284:	61 5f       	subi	r22, 0xF1	; 241
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	2e 81       	ldd	r18, Y+6	; 0x06
    228a:	3f 81       	ldd	r19, Y+7	; 0x07
    228c:	4c 81       	ldd	r20, Y+4	; 0x04
    228e:	5d 81       	ldd	r21, Y+5	; 0x05
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	0b 81       	ldd	r16, Y+3	; 0x03
    2296:	38 d5       	rcall	.+2672   	; 0x2d08 <prvInitialiseNewStreamBuffer>
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	28 96       	adiw	r28, 0x08	; 8
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	0f 91       	pop	r16
    22ae:	08 95       	ret

000022b0 <xStreamBufferReset>:
    22b0:	0f 93       	push	r16
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <xStreamBufferReset+0x8>
    22b8:	1f 92       	push	r1
    22ba:	1f 92       	push	r1
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	9d 83       	std	Y+5, r25	; 0x05
    22c2:	8c 83       	std	Y+4, r24	; 0x04
    22c4:	8c 81       	ldd	r24, Y+4	; 0x04
    22c6:	9d 81       	ldd	r25, Y+5	; 0x05
    22c8:	9b 83       	std	Y+3, r25	; 0x03
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	19 82       	std	Y+1, r1	; 0x01
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	0f 92       	push	r0
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	9b 81       	ldd	r25, Y+3	; 0x03
    22d8:	dc 01       	movw	r26, r24
    22da:	18 96       	adiw	r26, 0x08	; 8
    22dc:	8d 91       	ld	r24, X+
    22de:	9c 91       	ld	r25, X
    22e0:	19 97       	sbiw	r26, 0x09	; 9
    22e2:	89 2b       	or	r24, r25
    22e4:	39 f5       	brne	.+78     	; 0x2334 <xStreamBufferReset+0x84>
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ea:	fc 01       	movw	r30, r24
    22ec:	82 85       	ldd	r24, Z+10	; 0x0a
    22ee:	93 85       	ldd	r25, Z+11	; 0x0b
    22f0:	89 2b       	or	r24, r25
    22f2:	01 f5       	brne	.+64     	; 0x2334 <xStreamBufferReset+0x84>
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	9b 81       	ldd	r25, Y+3	; 0x03
    22f8:	dc 01       	movw	r26, r24
    22fa:	1e 96       	adiw	r26, 0x0e	; 14
    22fc:	ec 91       	ld	r30, X
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	dc 01       	movw	r26, r24
    2304:	16 96       	adiw	r26, 0x06	; 6
    2306:	2d 91       	ld	r18, X+
    2308:	3c 91       	ld	r19, X
    230a:	17 97       	sbiw	r26, 0x07	; 7
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	9b 81       	ldd	r25, Y+3	; 0x03
    2310:	dc 01       	movw	r26, r24
    2312:	14 96       	adiw	r26, 0x04	; 4
    2314:	4d 91       	ld	r20, X+
    2316:	5c 91       	ld	r21, X
    2318:	15 97       	sbiw	r26, 0x05	; 5
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	dc 01       	movw	r26, r24
    2320:	1c 96       	adiw	r26, 0x0c	; 12
    2322:	6d 91       	ld	r22, X+
    2324:	7c 91       	ld	r23, X
    2326:	1d 97       	sbiw	r26, 0x0d	; 13
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	0e 2f       	mov	r16, r30
    232e:	ec d4       	rcall	.+2520   	; 0x2d08 <prvInitialiseNewStreamBuffer>
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	0f 90       	pop	r0
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	0f 91       	pop	r16
    234a:	08 95       	ret

0000234c <xStreamBufferSpacesAvailable>:
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	00 d0       	rcall	.+0      	; 0x2352 <xStreamBufferSpacesAvailable+0x6>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <xStreamBufferSpacesAvailable+0x8>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	8b 83       	std	Y+3, r24	; 0x03
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	fc 01       	movw	r30, r24
    236a:	24 81       	ldd	r18, Z+4	; 0x04
    236c:	35 81       	ldd	r19, Z+5	; 0x05
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	fc 01       	movw	r30, r24
    2374:	80 81       	ld	r24, Z
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	82 0f       	add	r24, r18
    237a:	93 1f       	adc	r25, r19
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	fc 01       	movw	r30, r24
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	29 81       	ldd	r18, Y+1	; 0x01
    238c:	3a 81       	ldd	r19, Y+2	; 0x02
    238e:	a9 01       	movw	r20, r18
    2390:	48 1b       	sub	r20, r24
    2392:	59 0b       	sbc	r21, r25
    2394:	ca 01       	movw	r24, r20
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	fc 01       	movw	r30, r24
    23aa:	24 81       	ldd	r18, Z+4	; 0x04
    23ac:	35 81       	ldd	r19, Z+5	; 0x05
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	82 17       	cp	r24, r18
    23b4:	93 07       	cpc	r25, r19
    23b6:	68 f0       	brcs	.+26     	; 0x23d2 <xStreamBufferSpacesAvailable+0x86>
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	fc 01       	movw	r30, r24
    23be:	84 81       	ldd	r24, Z+4	; 0x04
    23c0:	95 81       	ldd	r25, Z+5	; 0x05
    23c2:	29 81       	ldd	r18, Y+1	; 0x01
    23c4:	3a 81       	ldd	r19, Y+2	; 0x02
    23c6:	a9 01       	movw	r20, r18
    23c8:	48 1b       	sub	r20, r24
    23ca:	59 0b       	sbc	r21, r25
    23cc:	ca 01       	movw	r24, r20
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	26 96       	adiw	r28, 0x06	; 6
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	08 95       	ret

000023e8 <xStreamBufferSend>:
    23e8:	af 92       	push	r10
    23ea:	bf 92       	push	r11
    23ec:	cf 92       	push	r12
    23ee:	df 92       	push	r13
    23f0:	ef 92       	push	r14
    23f2:	ff 92       	push	r15
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	69 97       	sbiw	r28, 0x19	; 25
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	99 8b       	std	Y+17, r25	; 0x11
    240e:	88 8b       	std	Y+16, r24	; 0x10
    2410:	7b 8b       	std	Y+19, r23	; 0x13
    2412:	6a 8b       	std	Y+18, r22	; 0x12
    2414:	5d 8b       	std	Y+21, r21	; 0x15
    2416:	4c 8b       	std	Y+20, r20	; 0x14
    2418:	0e 8b       	std	Y+22, r16	; 0x16
    241a:	1f 8b       	std	Y+23, r17	; 0x17
    241c:	28 8f       	std	Y+24, r18	; 0x18
    241e:	39 8f       	std	Y+25, r19	; 0x19
    2420:	88 89       	ldd	r24, Y+16	; 0x10
    2422:	99 89       	ldd	r25, Y+17	; 0x11
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	1a 82       	std	Y+2, r1	; 0x02
    242a:	19 82       	std	Y+1, r1	; 0x01
    242c:	8c 89       	ldd	r24, Y+20	; 0x14
    242e:	9d 89       	ldd	r25, Y+21	; 0x15
    2430:	9c 83       	std	Y+4, r25	; 0x04
    2432:	8b 83       	std	Y+3, r24	; 0x03
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	fc 01       	movw	r30, r24
    243a:	84 81       	ldd	r24, Z+4	; 0x04
    243c:	95 81       	ldd	r25, Z+5	; 0x05
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	98 87       	std	Y+8, r25	; 0x08
    2442:	8f 83       	std	Y+7, r24	; 0x07
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    2448:	fc 01       	movw	r30, r24
    244a:	86 85       	ldd	r24, Z+14	; 0x0e
    244c:	88 2f       	mov	r24, r24
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	81 70       	andi	r24, 0x01	; 1
    2452:	99 27       	eor	r25, r25
    2454:	89 2b       	or	r24, r25
    2456:	89 f0       	breq	.+34     	; 0x247a <xStreamBufferSend+0x92>
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	02 96       	adiw	r24, 0x02	; 2
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	8b 83       	std	Y+3, r24	; 0x03
    2462:	2b 81       	ldd	r18, Y+3	; 0x03
    2464:	3c 81       	ldd	r19, Y+4	; 0x04
    2466:	8f 81       	ldd	r24, Y+7	; 0x07
    2468:	98 85       	ldd	r25, Y+8	; 0x08
    246a:	82 17       	cp	r24, r18
    246c:	93 07       	cpc	r25, r19
    246e:	80 f4       	brcc	.+32     	; 0x2490 <xStreamBufferSend+0xa8>
    2470:	1e 8a       	std	Y+22, r1	; 0x16
    2472:	1f 8a       	std	Y+23, r1	; 0x17
    2474:	18 8e       	std	Y+24, r1	; 0x18
    2476:	19 8e       	std	Y+25, r1	; 0x19
    2478:	0b c0       	rjmp	.+22     	; 0x2490 <xStreamBufferSend+0xa8>
    247a:	2b 81       	ldd	r18, Y+3	; 0x03
    247c:	3c 81       	ldd	r19, Y+4	; 0x04
    247e:	8f 81       	ldd	r24, Y+7	; 0x07
    2480:	98 85       	ldd	r25, Y+8	; 0x08
    2482:	82 17       	cp	r24, r18
    2484:	93 07       	cpc	r25, r19
    2486:	20 f4       	brcc	.+8      	; 0x2490 <xStreamBufferSend+0xa8>
    2488:	8f 81       	ldd	r24, Y+7	; 0x07
    248a:	98 85       	ldd	r25, Y+8	; 0x08
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
    2490:	8e 89       	ldd	r24, Y+22	; 0x16
    2492:	9f 89       	ldd	r25, Y+23	; 0x17
    2494:	a8 8d       	ldd	r26, Y+24	; 0x18
    2496:	b9 8d       	ldd	r27, Y+25	; 0x19
    2498:	89 2b       	or	r24, r25
    249a:	8a 2b       	or	r24, r26
    249c:	8b 2b       	or	r24, r27
    249e:	09 f4       	brne	.+2      	; 0x24a2 <xStreamBufferSend+0xba>
    24a0:	47 c0       	rjmp	.+142    	; 0x2530 <xStreamBufferSend+0x148>
    24a2:	ce 01       	movw	r24, r28
    24a4:	0b 96       	adiw	r24, 0x0b	; 11
    24a6:	0e 94 40 22 	call	0x4480	; 0x4480 <vTaskSetTimeOutState>
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	0f 92       	push	r0
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	4b df       	rcall	.-362    	; 0x234c <xStreamBufferSpacesAvailable>
    24b6:	9a 83       	std	Y+2, r25	; 0x02
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	29 81       	ldd	r18, Y+1	; 0x01
    24bc:	3a 81       	ldd	r19, Y+2	; 0x02
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	9c 81       	ldd	r25, Y+4	; 0x04
    24c2:	28 17       	cp	r18, r24
    24c4:	39 07       	cpc	r19, r25
    24c6:	70 f4       	brcc	.+28     	; 0x24e4 <xStreamBufferSend+0xfc>
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 4d 2a 	call	0x549a	; 0x549a <xTaskGenericNotifyStateClear>
    24d2:	0e 94 ff 23 	call	0x47fe	; 0x47fe <xTaskGetCurrentTaskHandle>
    24d6:	9c 01       	movw	r18, r24
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	fc 01       	movw	r30, r24
    24de:	33 87       	std	Z+11, r19	; 0x0b
    24e0:	22 87       	std	Z+10, r18	; 0x0a
    24e2:	03 c0       	rjmp	.+6      	; 0x24ea <xStreamBufferSend+0x102>
    24e4:	0f 90       	pop	r0
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	23 c0       	rjmp	.+70     	; 0x2530 <xStreamBufferSend+0x148>
    24ea:	0f 90       	pop	r0
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	8e 89       	ldd	r24, Y+22	; 0x16
    24f0:	9f 89       	ldd	r25, Y+23	; 0x17
    24f2:	a8 8d       	ldd	r26, Y+24	; 0x18
    24f4:	b9 8d       	ldd	r27, Y+25	; 0x19
    24f6:	5c 01       	movw	r10, r24
    24f8:	6d 01       	movw	r12, r26
    24fa:	e1 2c       	mov	r14, r1
    24fc:	f1 2c       	mov	r15, r1
    24fe:	00 e0       	ldi	r16, 0x00	; 0
    2500:	10 e0       	ldi	r17, 0x00	; 0
    2502:	98 01       	movw	r18, r16
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	ba 01       	movw	r22, r20
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <xTaskGenericNotifyWait>
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	fc 01       	movw	r30, r24
    2516:	13 86       	std	Z+11, r1	; 0x0b
    2518:	12 86       	std	Z+10, r1	; 0x0a
    251a:	9e 01       	movw	r18, r28
    251c:	2a 5e       	subi	r18, 0xEA	; 234
    251e:	3f 4f       	sbci	r19, 0xFF	; 255
    2520:	ce 01       	movw	r24, r28
    2522:	0b 96       	adiw	r24, 0x0b	; 11
    2524:	b9 01       	movw	r22, r18
    2526:	0e 94 8b 22 	call	0x4516	; 0x4516 <xTaskCheckForTimeOut>
    252a:	88 23       	and	r24, r24
    252c:	09 f4       	brne	.+2      	; 0x2530 <xStreamBufferSend+0x148>
    252e:	bd cf       	rjmp	.-134    	; 0x24aa <xStreamBufferSend+0xc2>
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	9a 81       	ldd	r25, Y+2	; 0x02
    2534:	89 2b       	or	r24, r25
    2536:	29 f4       	brne	.+10     	; 0x2542 <xStreamBufferSend+0x15a>
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	07 df       	rcall	.-498    	; 0x234c <xStreamBufferSpacesAvailable>
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	eb 81       	ldd	r30, Y+3	; 0x03
    2544:	fc 81       	ldd	r31, Y+4	; 0x04
    2546:	29 81       	ldd	r18, Y+1	; 0x01
    2548:	3a 81       	ldd	r19, Y+2	; 0x02
    254a:	4c 89       	ldd	r20, Y+20	; 0x14
    254c:	5d 89       	ldd	r21, Y+21	; 0x15
    254e:	6a 89       	ldd	r22, Y+18	; 0x12
    2550:	7b 89       	ldd	r23, Y+19	; 0x13
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	8f 01       	movw	r16, r30
    2558:	c2 d0       	rcall	.+388    	; 0x26de <prvWriteMessageToBuffer>
    255a:	9a 87       	std	Y+10, r25	; 0x0a
    255c:	89 87       	std	Y+9, r24	; 0x09
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	89 2b       	or	r24, r25
    2564:	41 f1       	breq	.+80     	; 0x25b6 <xStreamBufferSend+0x1ce>
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	8b d3       	rcall	.+1814   	; 0x2c82 <prvBytesInBuffer>
    256c:	9c 01       	movw	r18, r24
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	fc 01       	movw	r30, r24
    2574:	86 81       	ldd	r24, Z+6	; 0x06
    2576:	97 81       	ldd	r25, Z+7	; 0x07
    2578:	28 17       	cp	r18, r24
    257a:	39 07       	cpc	r19, r25
    257c:	e0 f0       	brcs	.+56     	; 0x25b6 <xStreamBufferSend+0x1ce>
    257e:	64 d7       	rcall	.+3784   	; 0x3448 <vTaskSuspendAll>
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	fc 01       	movw	r30, r24
    2586:	80 85       	ldd	r24, Z+8	; 0x08
    2588:	91 85       	ldd	r25, Z+9	; 0x09
    258a:	89 2b       	or	r24, r25
    258c:	99 f0       	breq	.+38     	; 0x25b4 <xStreamBufferSend+0x1cc>
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	fc 01       	movw	r30, r24
    2594:	80 85       	ldd	r24, Z+8	; 0x08
    2596:	91 85       	ldd	r25, Z+9	; 0x09
    2598:	e1 2c       	mov	r14, r1
    259a:	f1 2c       	mov	r15, r1
    259c:	00 e0       	ldi	r16, 0x00	; 0
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	a9 01       	movw	r20, r18
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <xTaskGenericNotify>
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	fc 01       	movw	r30, r24
    25b0:	11 86       	std	Z+9, r1	; 0x09
    25b2:	10 86       	std	Z+8, r1	; 0x08
    25b4:	56 d7       	rcall	.+3756   	; 0x3462 <xTaskResumeAll>
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	69 96       	adiw	r28, 0x19	; 25
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	08 95       	ret

000025dc <xStreamBufferSendFromISR>:
    25dc:	cf 92       	push	r12
    25de:	df 92       	push	r13
    25e0:	ef 92       	push	r14
    25e2:	ff 92       	push	r15
    25e4:	0f 93       	push	r16
    25e6:	1f 93       	push	r17
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	61 97       	sbiw	r28, 0x11	; 17
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	9b 87       	std	Y+11, r25	; 0x0b
    25fe:	8a 87       	std	Y+10, r24	; 0x0a
    2600:	7d 87       	std	Y+13, r23	; 0x0d
    2602:	6c 87       	std	Y+12, r22	; 0x0c
    2604:	5f 87       	std	Y+15, r21	; 0x0f
    2606:	4e 87       	std	Y+14, r20	; 0x0e
    2608:	39 8b       	std	Y+17, r19	; 0x11
    260a:	28 8b       	std	Y+16, r18	; 0x10
    260c:	8a 85       	ldd	r24, Y+10	; 0x0a
    260e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	8e 85       	ldd	r24, Y+14	; 0x0e
    2616:	9f 85       	ldd	r25, Y+15	; 0x0f
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	fc 01       	movw	r30, r24
    2622:	86 85       	ldd	r24, Z+14	; 0x0e
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	81 70       	andi	r24, 0x01	; 1
    262a:	99 27       	eor	r25, r25
    262c:	89 2b       	or	r24, r25
    262e:	29 f0       	breq	.+10     	; 0x263a <xStreamBufferSendFromISR+0x5e>
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	02 96       	adiw	r24, 0x02	; 2
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	86 de       	rcall	.-756    	; 0x234c <xStreamBufferSpacesAvailable>
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	e9 81       	ldd	r30, Y+1	; 0x01
    2646:	fa 81       	ldd	r31, Y+2	; 0x02
    2648:	2d 81       	ldd	r18, Y+5	; 0x05
    264a:	3e 81       	ldd	r19, Y+6	; 0x06
    264c:	4e 85       	ldd	r20, Y+14	; 0x0e
    264e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2650:	6c 85       	ldd	r22, Y+12	; 0x0c
    2652:	7d 85       	ldd	r23, Y+13	; 0x0d
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	9c 81       	ldd	r25, Y+4	; 0x04
    2658:	8f 01       	movw	r16, r30
    265a:	41 d0       	rcall	.+130    	; 0x26de <prvWriteMessageToBuffer>
    265c:	98 87       	std	Y+8, r25	; 0x08
    265e:	8f 83       	std	Y+7, r24	; 0x07
    2660:	8f 81       	ldd	r24, Y+7	; 0x07
    2662:	98 85       	ldd	r25, Y+8	; 0x08
    2664:	89 2b       	or	r24, r25
    2666:	51 f1       	breq	.+84     	; 0x26bc <xStreamBufferSendFromISR+0xe0>
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	0a d3       	rcall	.+1556   	; 0x2c82 <prvBytesInBuffer>
    266e:	9c 01       	movw	r18, r24
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	fc 01       	movw	r30, r24
    2676:	86 81       	ldd	r24, Z+6	; 0x06
    2678:	97 81       	ldd	r25, Z+7	; 0x07
    267a:	28 17       	cp	r18, r24
    267c:	39 07       	cpc	r19, r25
    267e:	f0 f0       	brcs	.+60     	; 0x26bc <xStreamBufferSendFromISR+0xe0>
    2680:	19 86       	std	Y+9, r1	; 0x09
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	fc 01       	movw	r30, r24
    2688:	80 85       	ldd	r24, Z+8	; 0x08
    268a:	91 85       	ldd	r25, Z+9	; 0x09
    268c:	89 2b       	or	r24, r25
    268e:	b1 f0       	breq	.+44     	; 0x26bc <xStreamBufferSendFromISR+0xe0>
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	fc 01       	movw	r30, r24
    2696:	80 85       	ldd	r24, Z+8	; 0x08
    2698:	91 85       	ldd	r25, Z+9	; 0x09
    269a:	28 89       	ldd	r18, Y+16	; 0x10
    269c:	39 89       	ldd	r19, Y+17	; 0x11
    269e:	69 01       	movw	r12, r18
    26a0:	e1 2c       	mov	r14, r1
    26a2:	f1 2c       	mov	r15, r1
    26a4:	00 e0       	ldi	r16, 0x00	; 0
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	a9 01       	movw	r20, r18
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 31 28 	call	0x5062	; 0x5062 <xTaskGenericNotifyFromISR>
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	fc 01       	movw	r30, r24
    26b8:	11 86       	std	Z+9, r1	; 0x09
    26ba:	10 86       	std	Z+8, r1	; 0x08
    26bc:	8f 81       	ldd	r24, Y+7	; 0x07
    26be:	98 85       	ldd	r25, Y+8	; 0x08
    26c0:	61 96       	adiw	r28, 0x11	; 17
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	ff 90       	pop	r15
    26d6:	ef 90       	pop	r14
    26d8:	df 90       	pop	r13
    26da:	cf 90       	pop	r12
    26dc:	08 95       	ret

000026de <prvWriteMessageToBuffer>:
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	61 97       	sbiw	r28, 0x11	; 17
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	99 87       	std	Y+9, r25	; 0x09
    26f8:	88 87       	std	Y+8, r24	; 0x08
    26fa:	7b 87       	std	Y+11, r23	; 0x0b
    26fc:	6a 87       	std	Y+10, r22	; 0x0a
    26fe:	5d 87       	std	Y+13, r21	; 0x0d
    2700:	4c 87       	std	Y+12, r20	; 0x0c
    2702:	3f 87       	std	Y+15, r19	; 0x0f
    2704:	2e 87       	std	Y+14, r18	; 0x0e
    2706:	19 8b       	std	Y+17, r17	; 0x11
    2708:	08 8b       	std	Y+16, r16	; 0x10
    270a:	8e 85       	ldd	r24, Y+14	; 0x0e
    270c:	9f 85       	ldd	r25, Y+15	; 0x0f
    270e:	89 2b       	or	r24, r25
    2710:	11 f4       	brne	.+4      	; 0x2716 <prvWriteMessageToBuffer+0x38>
    2712:	19 82       	std	Y+1, r1	; 0x01
    2714:	33 c0       	rjmp	.+102    	; 0x277c <prvWriteMessageToBuffer+0x9e>
    2716:	88 85       	ldd	r24, Y+8	; 0x08
    2718:	99 85       	ldd	r25, Y+9	; 0x09
    271a:	fc 01       	movw	r30, r24
    271c:	86 85       	ldd	r24, Z+14	; 0x0e
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	81 70       	andi	r24, 0x01	; 1
    2724:	99 27       	eor	r25, r25
    2726:	89 2b       	or	r24, r25
    2728:	a9 f4       	brne	.+42     	; 0x2754 <prvWriteMessageToBuffer+0x76>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2730:	9d 85       	ldd	r25, Y+13	; 0x0d
    2732:	9d 83       	std	Y+5, r25	; 0x05
    2734:	8c 83       	std	Y+4, r24	; 0x04
    2736:	8e 85       	ldd	r24, Y+14	; 0x0e
    2738:	9f 85       	ldd	r25, Y+15	; 0x0f
    273a:	9f 83       	std	Y+7, r25	; 0x07
    273c:	8e 83       	std	Y+6, r24	; 0x06
    273e:	2c 81       	ldd	r18, Y+4	; 0x04
    2740:	3d 81       	ldd	r19, Y+5	; 0x05
    2742:	8e 81       	ldd	r24, Y+6	; 0x06
    2744:	9f 81       	ldd	r25, Y+7	; 0x07
    2746:	28 17       	cp	r18, r24
    2748:	39 07       	cpc	r19, r25
    274a:	08 f4       	brcc	.+2      	; 0x274e <prvWriteMessageToBuffer+0x70>
    274c:	c9 01       	movw	r24, r18
    274e:	9d 87       	std	Y+13, r25	; 0x0d
    2750:	8c 87       	std	Y+12, r24	; 0x0c
    2752:	14 c0       	rjmp	.+40     	; 0x277c <prvWriteMessageToBuffer+0x9e>
    2754:	2e 85       	ldd	r18, Y+14	; 0x0e
    2756:	3f 85       	ldd	r19, Y+15	; 0x0f
    2758:	88 89       	ldd	r24, Y+16	; 0x10
    275a:	99 89       	ldd	r25, Y+17	; 0x11
    275c:	28 17       	cp	r18, r24
    275e:	39 07       	cpc	r19, r25
    2760:	60 f0       	brcs	.+24     	; 0x277a <prvWriteMessageToBuffer+0x9c>
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	89 83       	std	Y+1, r24	; 0x01
    2766:	9e 01       	movw	r18, r28
    2768:	24 5f       	subi	r18, 0xF4	; 244
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	88 85       	ldd	r24, Y+8	; 0x08
    276e:	99 85       	ldd	r25, Y+9	; 0x09
    2770:	42 e0       	ldi	r20, 0x02	; 2
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	b9 01       	movw	r22, r18
    2776:	4f d1       	rcall	.+670    	; 0x2a16 <prvWriteBytesToBuffer>
    2778:	01 c0       	rjmp	.+2      	; 0x277c <prvWriteMessageToBuffer+0x9e>
    277a:	19 82       	std	Y+1, r1	; 0x01
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	88 23       	and	r24, r24
    2780:	59 f0       	breq	.+22     	; 0x2798 <prvWriteMessageToBuffer+0xba>
    2782:	4c 85       	ldd	r20, Y+12	; 0x0c
    2784:	5d 85       	ldd	r21, Y+13	; 0x0d
    2786:	2a 85       	ldd	r18, Y+10	; 0x0a
    2788:	3b 85       	ldd	r19, Y+11	; 0x0b
    278a:	88 85       	ldd	r24, Y+8	; 0x08
    278c:	99 85       	ldd	r25, Y+9	; 0x09
    278e:	b9 01       	movw	r22, r18
    2790:	42 d1       	rcall	.+644    	; 0x2a16 <prvWriteBytesToBuffer>
    2792:	9b 83       	std	Y+3, r25	; 0x03
    2794:	8a 83       	std	Y+2, r24	; 0x02
    2796:	02 c0       	rjmp	.+4      	; 0x279c <prvWriteMessageToBuffer+0xbe>
    2798:	1b 82       	std	Y+3, r1	; 0x03
    279a:	1a 82       	std	Y+2, r1	; 0x02
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	9b 81       	ldd	r25, Y+3	; 0x03
    27a0:	61 96       	adiw	r28, 0x11	; 17
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	08 95       	ret

000027b6 <xStreamBufferReceive>:
    27b6:	af 92       	push	r10
    27b8:	bf 92       	push	r11
    27ba:	cf 92       	push	r12
    27bc:	df 92       	push	r13
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	62 97       	sbiw	r28, 0x12	; 18
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	9a 87       	std	Y+10, r25	; 0x0a
    27dc:	89 87       	std	Y+9, r24	; 0x09
    27de:	7c 87       	std	Y+12, r23	; 0x0c
    27e0:	6b 87       	std	Y+11, r22	; 0x0b
    27e2:	5e 87       	std	Y+14, r21	; 0x0e
    27e4:	4d 87       	std	Y+13, r20	; 0x0d
    27e6:	0f 87       	std	Y+15, r16	; 0x0f
    27e8:	18 8b       	std	Y+16, r17	; 0x10
    27ea:	29 8b       	std	Y+17, r18	; 0x11
    27ec:	3a 8b       	std	Y+18, r19	; 0x12
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	98 87       	std	Y+8, r25	; 0x08
    27f4:	8f 83       	std	Y+7, r24	; 0x07
    27f6:	1a 82       	std	Y+2, r1	; 0x02
    27f8:	19 82       	std	Y+1, r1	; 0x01
    27fa:	8f 81       	ldd	r24, Y+7	; 0x07
    27fc:	98 85       	ldd	r25, Y+8	; 0x08
    27fe:	fc 01       	movw	r30, r24
    2800:	86 85       	ldd	r24, Z+14	; 0x0e
    2802:	88 2f       	mov	r24, r24
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	81 70       	andi	r24, 0x01	; 1
    2808:	99 27       	eor	r25, r25
    280a:	89 2b       	or	r24, r25
    280c:	29 f0       	breq	.+10     	; 0x2818 <xStreamBufferReceive+0x62>
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	02 c0       	rjmp	.+4      	; 0x281c <xStreamBufferReceive+0x66>
    2818:	1e 82       	std	Y+6, r1	; 0x06
    281a:	1d 82       	std	Y+5, r1	; 0x05
    281c:	8f 85       	ldd	r24, Y+15	; 0x0f
    281e:	98 89       	ldd	r25, Y+16	; 0x10
    2820:	a9 89       	ldd	r26, Y+17	; 0x11
    2822:	ba 89       	ldd	r27, Y+18	; 0x12
    2824:	89 2b       	or	r24, r25
    2826:	8a 2b       	or	r24, r26
    2828:	8b 2b       	or	r24, r27
    282a:	09 f4       	brne	.+2      	; 0x282e <xStreamBufferReceive+0x78>
    282c:	41 c0       	rjmp	.+130    	; 0x28b0 <xStreamBufferReceive+0xfa>
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	0f 92       	push	r0
    2834:	8f 81       	ldd	r24, Y+7	; 0x07
    2836:	98 85       	ldd	r25, Y+8	; 0x08
    2838:	24 d2       	rcall	.+1096   	; 0x2c82 <prvBytesInBuffer>
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
    283e:	2b 81       	ldd	r18, Y+3	; 0x03
    2840:	3c 81       	ldd	r19, Y+4	; 0x04
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	82 17       	cp	r24, r18
    2848:	93 07       	cpc	r25, r19
    284a:	68 f0       	brcs	.+26     	; 0x2866 <xStreamBufferReceive+0xb0>
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 4d 2a 	call	0x549a	; 0x549a <xTaskGenericNotifyStateClear>
    2856:	0e 94 ff 23 	call	0x47fe	; 0x47fe <xTaskGetCurrentTaskHandle>
    285a:	9c 01       	movw	r18, r24
    285c:	8f 81       	ldd	r24, Y+7	; 0x07
    285e:	98 85       	ldd	r25, Y+8	; 0x08
    2860:	fc 01       	movw	r30, r24
    2862:	31 87       	std	Z+9, r19	; 0x09
    2864:	20 87       	std	Z+8, r18	; 0x08
    2866:	0f 90       	pop	r0
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	2b 81       	ldd	r18, Y+3	; 0x03
    286c:	3c 81       	ldd	r19, Y+4	; 0x04
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	82 17       	cp	r24, r18
    2874:	93 07       	cpc	r25, r19
    2876:	08 f1       	brcs	.+66     	; 0x28ba <xStreamBufferReceive+0x104>
    2878:	8f 85       	ldd	r24, Y+15	; 0x0f
    287a:	98 89       	ldd	r25, Y+16	; 0x10
    287c:	a9 89       	ldd	r26, Y+17	; 0x11
    287e:	ba 89       	ldd	r27, Y+18	; 0x12
    2880:	5c 01       	movw	r10, r24
    2882:	6d 01       	movw	r12, r26
    2884:	e1 2c       	mov	r14, r1
    2886:	f1 2c       	mov	r15, r1
    2888:	00 e0       	ldi	r16, 0x00	; 0
    288a:	10 e0       	ldi	r17, 0x00	; 0
    288c:	98 01       	movw	r18, r16
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	ba 01       	movw	r22, r20
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <xTaskGenericNotifyWait>
    289a:	8f 81       	ldd	r24, Y+7	; 0x07
    289c:	98 85       	ldd	r25, Y+8	; 0x08
    289e:	fc 01       	movw	r30, r24
    28a0:	11 86       	std	Z+9, r1	; 0x09
    28a2:	10 86       	std	Z+8, r1	; 0x08
    28a4:	8f 81       	ldd	r24, Y+7	; 0x07
    28a6:	98 85       	ldd	r25, Y+8	; 0x08
    28a8:	ec d1       	rcall	.+984    	; 0x2c82 <prvBytesInBuffer>
    28aa:	9c 83       	std	Y+4, r25	; 0x04
    28ac:	8b 83       	std	Y+3, r24	; 0x03
    28ae:	05 c0       	rjmp	.+10     	; 0x28ba <xStreamBufferReceive+0x104>
    28b0:	8f 81       	ldd	r24, Y+7	; 0x07
    28b2:	98 85       	ldd	r25, Y+8	; 0x08
    28b4:	e6 d1       	rcall	.+972    	; 0x2c82 <prvBytesInBuffer>
    28b6:	9c 83       	std	Y+4, r25	; 0x04
    28b8:	8b 83       	std	Y+3, r24	; 0x03
    28ba:	2b 81       	ldd	r18, Y+3	; 0x03
    28bc:	3c 81       	ldd	r19, Y+4	; 0x04
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	82 17       	cp	r24, r18
    28c4:	93 07       	cpc	r25, r19
    28c6:	70 f5       	brcc	.+92     	; 0x2924 <xStreamBufferReceive+0x16e>
    28c8:	ed 81       	ldd	r30, Y+5	; 0x05
    28ca:	fe 81       	ldd	r31, Y+6	; 0x06
    28cc:	2b 81       	ldd	r18, Y+3	; 0x03
    28ce:	3c 81       	ldd	r19, Y+4	; 0x04
    28d0:	4d 85       	ldd	r20, Y+13	; 0x0d
    28d2:	5e 85       	ldd	r21, Y+14	; 0x0e
    28d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d8:	8f 81       	ldd	r24, Y+7	; 0x07
    28da:	98 85       	ldd	r25, Y+8	; 0x08
    28dc:	8f 01       	movw	r16, r30
    28de:	35 d0       	rcall	.+106    	; 0x294a <prvReadMessageFromBuffer>
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	89 2b       	or	r24, r25
    28ea:	e1 f0       	breq	.+56     	; 0x2924 <xStreamBufferReceive+0x16e>
    28ec:	ad d5       	rcall	.+2906   	; 0x3448 <vTaskSuspendAll>
    28ee:	8f 81       	ldd	r24, Y+7	; 0x07
    28f0:	98 85       	ldd	r25, Y+8	; 0x08
    28f2:	fc 01       	movw	r30, r24
    28f4:	82 85       	ldd	r24, Z+10	; 0x0a
    28f6:	93 85       	ldd	r25, Z+11	; 0x0b
    28f8:	89 2b       	or	r24, r25
    28fa:	99 f0       	breq	.+38     	; 0x2922 <xStreamBufferReceive+0x16c>
    28fc:	8f 81       	ldd	r24, Y+7	; 0x07
    28fe:	98 85       	ldd	r25, Y+8	; 0x08
    2900:	fc 01       	movw	r30, r24
    2902:	82 85       	ldd	r24, Z+10	; 0x0a
    2904:	93 85       	ldd	r25, Z+11	; 0x0b
    2906:	e1 2c       	mov	r14, r1
    2908:	f1 2c       	mov	r15, r1
    290a:	00 e0       	ldi	r16, 0x00	; 0
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	a9 01       	movw	r20, r18
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <xTaskGenericNotify>
    2918:	8f 81       	ldd	r24, Y+7	; 0x07
    291a:	98 85       	ldd	r25, Y+8	; 0x08
    291c:	fc 01       	movw	r30, r24
    291e:	13 86       	std	Z+11, r1	; 0x0b
    2920:	12 86       	std	Z+10, r1	; 0x0a
    2922:	9f d5       	rcall	.+2878   	; 0x3462 <xTaskResumeAll>
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	9a 81       	ldd	r25, Y+2	; 0x02
    2928:	62 96       	adiw	r28, 0x12	; 18
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	ff 90       	pop	r15
    293e:	ef 90       	pop	r14
    2940:	df 90       	pop	r13
    2942:	cf 90       	pop	r12
    2944:	bf 90       	pop	r11
    2946:	af 90       	pop	r10
    2948:	08 95       	ret

0000294a <prvReadMessageFromBuffer>:
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	62 97       	sbiw	r28, 0x12	; 18
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	9a 87       	std	Y+10, r25	; 0x0a
    2964:	89 87       	std	Y+9, r24	; 0x09
    2966:	7c 87       	std	Y+12, r23	; 0x0c
    2968:	6b 87       	std	Y+11, r22	; 0x0b
    296a:	5e 87       	std	Y+14, r21	; 0x0e
    296c:	4d 87       	std	Y+13, r20	; 0x0d
    296e:	38 8b       	std	Y+16, r19	; 0x10
    2970:	2f 87       	std	Y+15, r18	; 0x0f
    2972:	1a 8b       	std	Y+18, r17	; 0x12
    2974:	09 8b       	std	Y+17, r16	; 0x11
    2976:	89 89       	ldd	r24, Y+17	; 0x11
    2978:	9a 89       	ldd	r25, Y+18	; 0x12
    297a:	89 2b       	or	r24, r25
    297c:	81 f1       	breq	.+96     	; 0x29de <prvReadMessageFromBuffer+0x94>
    297e:	89 85       	ldd	r24, Y+9	; 0x09
    2980:	9a 85       	ldd	r25, Y+10	; 0x0a
    2982:	fc 01       	movw	r30, r24
    2984:	80 81       	ld	r24, Z
    2986:	91 81       	ldd	r25, Z+1	; 0x01
    2988:	9c 83       	std	Y+4, r25	; 0x04
    298a:	8b 83       	std	Y+3, r24	; 0x03
    298c:	2f 85       	ldd	r18, Y+15	; 0x0f
    298e:	38 89       	ldd	r19, Y+16	; 0x10
    2990:	49 89       	ldd	r20, Y+17	; 0x11
    2992:	5a 89       	ldd	r21, Y+18	; 0x12
    2994:	be 01       	movw	r22, r28
    2996:	69 5f       	subi	r22, 0xF9	; 249
    2998:	7f 4f       	sbci	r23, 0xFF	; 255
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	ca d0       	rcall	.+404    	; 0x2b34 <prvReadBytesFromBuffer>
    29a0:	8f 81       	ldd	r24, Y+7	; 0x07
    29a2:	98 85       	ldd	r25, Y+8	; 0x08
    29a4:	9a 83       	std	Y+2, r25	; 0x02
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    29aa:	38 89       	ldd	r19, Y+16	; 0x10
    29ac:	89 89       	ldd	r24, Y+17	; 0x11
    29ae:	9a 89       	ldd	r25, Y+18	; 0x12
    29b0:	a9 01       	movw	r20, r18
    29b2:	48 1b       	sub	r20, r24
    29b4:	59 0b       	sbc	r21, r25
    29b6:	ca 01       	movw	r24, r20
    29b8:	98 8b       	std	Y+16, r25	; 0x10
    29ba:	8f 87       	std	Y+15, r24	; 0x0f
    29bc:	29 81       	ldd	r18, Y+1	; 0x01
    29be:	3a 81       	ldd	r19, Y+2	; 0x02
    29c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c4:	82 17       	cp	r24, r18
    29c6:	93 07       	cpc	r25, r19
    29c8:	70 f4       	brcc	.+28     	; 0x29e6 <prvReadMessageFromBuffer+0x9c>
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	2b 81       	ldd	r18, Y+3	; 0x03
    29d0:	3c 81       	ldd	r19, Y+4	; 0x04
    29d2:	fc 01       	movw	r30, r24
    29d4:	31 83       	std	Z+1, r19	; 0x01
    29d6:	20 83       	st	Z, r18
    29d8:	1a 82       	std	Y+2, r1	; 0x02
    29da:	19 82       	std	Y+1, r1	; 0x01
    29dc:	04 c0       	rjmp	.+8      	; 0x29e6 <prvReadMessageFromBuffer+0x9c>
    29de:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e2:	9a 83       	std	Y+2, r25	; 0x02
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	2f 85       	ldd	r18, Y+15	; 0x0f
    29e8:	38 89       	ldd	r19, Y+16	; 0x10
    29ea:	49 81       	ldd	r20, Y+1	; 0x01
    29ec:	5a 81       	ldd	r21, Y+2	; 0x02
    29ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	9e d0       	rcall	.+316    	; 0x2b34 <prvReadBytesFromBuffer>
    29f8:	9e 83       	std	Y+6, r25	; 0x06
    29fa:	8d 83       	std	Y+5, r24	; 0x05
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2a00:	62 96       	adiw	r28, 0x12	; 18
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	08 95       	ret

00002a16 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	2e 97       	sbiw	r28, 0x0e	; 14
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	9a 87       	std	Y+10, r25	; 0x0a
    2a2c:	89 87       	std	Y+9, r24	; 0x09
    2a2e:	7c 87       	std	Y+12, r23	; 0x0c
    2a30:	6b 87       	std	Y+11, r22	; 0x0b
    2a32:	5e 87       	std	Y+14, r21	; 0x0e
    2a34:	4d 87       	std	Y+13, r20	; 0x0d
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	82 81       	ldd	r24, Z+2	; 0x02
    2a3e:	93 81       	ldd	r25, Z+3	; 0x03
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    2a44:	89 85       	ldd	r24, Y+9	; 0x09
    2a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a48:	fc 01       	movw	r30, r24
    2a4a:	24 81       	ldd	r18, Z+4	; 0x04
    2a4c:	35 81       	ldd	r19, Z+5	; 0x05
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	a9 01       	movw	r20, r18
    2a54:	48 1b       	sub	r20, r24
    2a56:	59 0b       	sbc	r21, r25
    2a58:	ca 01       	movw	r24, r20
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    2a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a62:	9e 83       	std	Y+6, r25	; 0x06
    2a64:	8d 83       	std	Y+5, r24	; 0x05
    2a66:	2b 81       	ldd	r18, Y+3	; 0x03
    2a68:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	28 17       	cp	r18, r24
    2a70:	39 07       	cpc	r19, r25
    2a72:	08 f4       	brcc	.+2      	; 0x2a76 <prvWriteBytesToBuffer+0x60>
    2a74:	c9 01       	movw	r24, r18
    2a76:	98 87       	std	Y+8, r25	; 0x08
    2a78:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2a7a:	89 85       	ldd	r24, Y+9	; 0x09
    2a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7e:	fc 01       	movw	r30, r24
    2a80:	24 85       	ldd	r18, Z+12	; 0x0c
    2a82:	35 85       	ldd	r19, Z+13	; 0x0d
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
    2a88:	82 0f       	add	r24, r18
    2a8a:	93 1f       	adc	r25, r19
    2a8c:	4f 81       	ldd	r20, Y+7	; 0x07
    2a8e:	58 85       	ldd	r21, Y+8	; 0x08
    2a90:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a92:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a94:	b9 01       	movw	r22, r18
    2a96:	0e 94 71 4c 	call	0x98e2	; 0x98e2 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    2a9a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a9c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa0:	98 85       	ldd	r25, Y+8	; 0x08
    2aa2:	82 17       	cp	r24, r18
    2aa4:	93 07       	cpc	r25, r19
    2aa6:	a8 f4       	brcc	.+42     	; 0x2ad2 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2aa8:	2d 85       	ldd	r18, Y+13	; 0x0d
    2aaa:	3e 85       	ldd	r19, Y+14	; 0x0e
    2aac:	8f 81       	ldd	r24, Y+7	; 0x07
    2aae:	98 85       	ldd	r25, Y+8	; 0x08
    2ab0:	a9 01       	movw	r20, r18
    2ab2:	48 1b       	sub	r20, r24
    2ab4:	59 0b       	sbc	r21, r25
    2ab6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ab8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aba:	8f 81       	ldd	r24, Y+7	; 0x07
    2abc:	98 85       	ldd	r25, Y+8	; 0x08
    2abe:	28 0f       	add	r18, r24
    2ac0:	39 1f       	adc	r19, r25
    2ac2:	89 85       	ldd	r24, Y+9	; 0x09
    2ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	84 85       	ldd	r24, Z+12	; 0x0c
    2aca:	95 85       	ldd	r25, Z+13	; 0x0d
    2acc:	b9 01       	movw	r22, r18
    2ace:	0e 94 71 4c 	call	0x98e2	; 0x98e2 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    2ad2:	29 81       	ldd	r18, Y+1	; 0x01
    2ad4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ada:	82 0f       	add	r24, r18
    2adc:	93 1f       	adc	r25, r19
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01

    if( xNextHead >= pxStreamBuffer->xLength )
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	24 81       	ldd	r18, Z+4	; 0x04
    2aea:	35 81       	ldd	r19, Z+5	; 0x05
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	9a 81       	ldd	r25, Y+2	; 0x02
    2af0:	82 17       	cp	r24, r18
    2af2:	93 07       	cpc	r25, r19
    2af4:	68 f0       	brcs	.+26     	; 0x2b10 <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	fc 01       	movw	r30, r24
    2afc:	84 81       	ldd	r24, Z+4	; 0x04
    2afe:	95 81       	ldd	r25, Z+5	; 0x05
    2b00:	29 81       	ldd	r18, Y+1	; 0x01
    2b02:	3a 81       	ldd	r19, Y+2	; 0x02
    2b04:	a9 01       	movw	r20, r18
    2b06:	48 1b       	sub	r20, r24
    2b08:	59 0b       	sbc	r21, r25
    2b0a:	ca 01       	movw	r24, r20
    2b0c:	9a 83       	std	Y+2, r25	; 0x02
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	29 81       	ldd	r18, Y+1	; 0x01
    2b16:	3a 81       	ldd	r19, Y+2	; 0x02
    2b18:	fc 01       	movw	r30, r24
    2b1a:	33 83       	std	Z+3, r19	; 0x03
    2b1c:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    2b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b20:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2b22:	2e 96       	adiw	r28, 0x0e	; 14
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	08 95       	ret

00002b34 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	66 97       	sbiw	r28, 0x16	; 22
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	98 8b       	std	Y+16, r25	; 0x10
    2b4a:	8f 87       	std	Y+15, r24	; 0x0f
    2b4c:	7a 8b       	std	Y+18, r23	; 0x12
    2b4e:	69 8b       	std	Y+17, r22	; 0x11
    2b50:	5c 8b       	std	Y+20, r21	; 0x14
    2b52:	4b 8b       	std	Y+19, r20	; 0x13
    2b54:	3e 8b       	std	Y+22, r19	; 0x16
    2b56:	2d 8b       	std	Y+21, r18	; 0x15
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    2b58:	8d 89       	ldd	r24, Y+21	; 0x15
    2b5a:	9e 89       	ldd	r25, Y+22	; 0x16
    2b5c:	9c 83       	std	Y+4, r25	; 0x04
    2b5e:	8b 83       	std	Y+3, r24	; 0x03
    2b60:	8b 89       	ldd	r24, Y+19	; 0x13
    2b62:	9c 89       	ldd	r25, Y+20	; 0x14
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	2b 81       	ldd	r18, Y+3	; 0x03
    2b6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	28 17       	cp	r18, r24
    2b72:	39 07       	cpc	r19, r25
    2b74:	08 f4       	brcc	.+2      	; 0x2b78 <prvReadBytesFromBuffer+0x44>
    2b76:	c9 01       	movw	r24, r18
    2b78:	98 87       	std	Y+8, r25	; 0x08
    2b7a:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    2b7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b7e:	98 85       	ldd	r25, Y+8	; 0x08
    2b80:	89 2b       	or	r24, r25
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <prvReadBytesFromBuffer+0x52>
    2b84:	73 c0       	rjmp	.+230    	; 0x2c6c <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    2b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b88:	98 89       	ldd	r25, Y+16	; 0x10
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	80 81       	ld	r24, Z
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	9a 83       	std	Y+2, r25	; 0x02
    2b92:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    2b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b96:	98 89       	ldd	r25, Y+16	; 0x10
    2b98:	fc 01       	movw	r30, r24
    2b9a:	24 81       	ldd	r18, Z+4	; 0x04
    2b9c:	35 81       	ldd	r19, Z+5	; 0x05
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba2:	a9 01       	movw	r20, r18
    2ba4:	48 1b       	sub	r20, r24
    2ba6:	59 0b       	sbc	r21, r25
    2ba8:	ca 01       	movw	r24, r20
    2baa:	9a 87       	std	Y+10, r25	; 0x0a
    2bac:	89 87       	std	Y+9, r24	; 0x09
    2bae:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb0:	98 85       	ldd	r25, Y+8	; 0x08
    2bb2:	9c 87       	std	Y+12, r25	; 0x0c
    2bb4:	8b 87       	std	Y+11, r24	; 0x0b
    2bb6:	29 85       	ldd	r18, Y+9	; 0x09
    2bb8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2bba:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bbe:	28 17       	cp	r18, r24
    2bc0:	39 07       	cpc	r19, r25
    2bc2:	08 f4       	brcc	.+2      	; 0x2bc6 <prvReadBytesFromBuffer+0x92>
    2bc4:	c9 01       	movw	r24, r18
    2bc6:	9e 87       	std	Y+14, r25	; 0x0e
    2bc8:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2bca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bcc:	98 89       	ldd	r25, Y+16	; 0x10
    2bce:	fc 01       	movw	r30, r24
    2bd0:	24 85       	ldd	r18, Z+12	; 0x0c
    2bd2:	35 85       	ldd	r19, Z+13	; 0x0d
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	28 0f       	add	r18, r24
    2bda:	39 1f       	adc	r19, r25
    2bdc:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bde:	5e 85       	ldd	r21, Y+14	; 0x0e
    2be0:	89 89       	ldd	r24, Y+17	; 0x11
    2be2:	9a 89       	ldd	r25, Y+18	; 0x12
    2be4:	b9 01       	movw	r22, r18
    2be6:	0e 94 71 4c 	call	0x98e2	; 0x98e2 <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
    2bea:	2f 81       	ldd	r18, Y+7	; 0x07
    2bec:	38 85       	ldd	r19, Y+8	; 0x08
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	82 17       	cp	r24, r18
    2bf4:	93 07       	cpc	r25, r19
    2bf6:	a0 f4       	brcc	.+40     	; 0x2c20 <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2bf8:	2f 81       	ldd	r18, Y+7	; 0x07
    2bfa:	38 85       	ldd	r19, Y+8	; 0x08
    2bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c00:	a9 01       	movw	r20, r18
    2c02:	48 1b       	sub	r20, r24
    2c04:	59 0b       	sbc	r21, r25
    2c06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c08:	98 89       	ldd	r25, Y+16	; 0x10
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	64 85       	ldd	r22, Z+12	; 0x0c
    2c0e:	75 85       	ldd	r23, Z+13	; 0x0d
    2c10:	29 89       	ldd	r18, Y+17	; 0x11
    2c12:	3a 89       	ldd	r19, Y+18	; 0x12
    2c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c18:	82 0f       	add	r24, r18
    2c1a:	93 1f       	adc	r25, r19
    2c1c:	0e 94 71 4c 	call	0x98e2	; 0x98e2 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
    2c20:	29 81       	ldd	r18, Y+1	; 0x01
    2c22:	3a 81       	ldd	r19, Y+2	; 0x02
    2c24:	8f 81       	ldd	r24, Y+7	; 0x07
    2c26:	98 85       	ldd	r25, Y+8	; 0x08
    2c28:	82 0f       	add	r24, r18
    2c2a:	93 1f       	adc	r25, r19
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    2c30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c32:	98 89       	ldd	r25, Y+16	; 0x10
    2c34:	fc 01       	movw	r30, r24
    2c36:	24 81       	ldd	r18, Z+4	; 0x04
    2c38:	35 81       	ldd	r19, Z+5	; 0x05
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	82 17       	cp	r24, r18
    2c40:	93 07       	cpc	r25, r19
    2c42:	68 f0       	brcs	.+26     	; 0x2c5e <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    2c44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c46:	98 89       	ldd	r25, Y+16	; 0x10
    2c48:	fc 01       	movw	r30, r24
    2c4a:	84 81       	ldd	r24, Z+4	; 0x04
    2c4c:	95 81       	ldd	r25, Z+5	; 0x05
    2c4e:	29 81       	ldd	r18, Y+1	; 0x01
    2c50:	3a 81       	ldd	r19, Y+2	; 0x02
    2c52:	a9 01       	movw	r20, r18
    2c54:	48 1b       	sub	r20, r24
    2c56:	59 0b       	sbc	r21, r25
    2c58:	ca 01       	movw	r24, r20
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    2c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c60:	98 89       	ldd	r25, Y+16	; 0x10
    2c62:	29 81       	ldd	r18, Y+1	; 0x01
    2c64:	3a 81       	ldd	r19, Y+2	; 0x02
    2c66:	fc 01       	movw	r30, r24
    2c68:	31 83       	std	Z+1, r19	; 0x01
    2c6a:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c6e:	98 85       	ldd	r25, Y+8	; 0x08
}
    2c70:	66 96       	adiw	r28, 0x16	; 22
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	08 95       	ret

00002c82 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <prvBytesInBuffer+0x6>
    2c88:	1f 92       	push	r1
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	fc 01       	movw	r30, r24
    2c98:	24 81       	ldd	r18, Z+4	; 0x04
    2c9a:	35 81       	ldd	r19, Z+5	; 0x05
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	93 81       	ldd	r25, Z+3	; 0x03
    2ca6:	82 0f       	add	r24, r18
    2ca8:	93 1f       	adc	r25, r19
    2caa:	9a 83       	std	Y+2, r25	; 0x02
    2cac:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	29 81       	ldd	r18, Y+1	; 0x01
    2cba:	3a 81       	ldd	r19, Y+2	; 0x02
    2cbc:	a9 01       	movw	r20, r18
    2cbe:	48 1b       	sub	r20, r24
    2cc0:	59 0b       	sbc	r21, r25
    2cc2:	ca 01       	movw	r24, r20
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	89 83       	std	Y+1, r24	; 0x01

    if( xCount >= pxStreamBuffer->xLength )
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ccc:	fc 01       	movw	r30, r24
    2cce:	24 81       	ldd	r18, Z+4	; 0x04
    2cd0:	35 81       	ldd	r19, Z+5	; 0x05
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	82 17       	cp	r24, r18
    2cd8:	93 07       	cpc	r25, r19
    2cda:	68 f0       	brcs	.+26     	; 0x2cf6 <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	84 81       	ldd	r24, Z+4	; 0x04
    2ce4:	95 81       	ldd	r25, Z+5	; 0x05
    2ce6:	29 81       	ldd	r18, Y+1	; 0x01
    2ce8:	3a 81       	ldd	r19, Y+2	; 0x02
    2cea:	a9 01       	movw	r20, r18
    2cec:	48 1b       	sub	r20, r24
    2cee:	59 0b       	sbc	r21, r25
    2cf0:	ca 01       	movw	r24, r20
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	08 95       	ret

00002d08 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    2d08:	0f 93       	push	r16
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	29 97       	sbiw	r28, 0x09	; 9
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	7c 83       	std	Y+4, r23	; 0x04
    2d24:	6b 83       	std	Y+3, r22	; 0x03
    2d26:	5e 83       	std	Y+6, r21	; 0x06
    2d28:	4d 83       	std	Y+5, r20	; 0x05
    2d2a:	38 87       	std	Y+8, r19	; 0x08
    2d2c:	2f 83       	std	Y+7, r18	; 0x07
    2d2e:	09 87       	std	Y+9, r16	; 0x09
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	4f e0       	ldi	r20, 0x0F	; 15
    2d36:	50 e0       	ldi	r21, 0x00	; 0
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	0e 94 7a 4c 	call	0x98f4	; 0x98f4 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	9a 81       	ldd	r25, Y+2	; 0x02
    2d44:	2b 81       	ldd	r18, Y+3	; 0x03
    2d46:	3c 81       	ldd	r19, Y+4	; 0x04
    2d48:	fc 01       	movw	r30, r24
    2d4a:	35 87       	std	Z+13, r19	; 0x0d
    2d4c:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	2d 81       	ldd	r18, Y+5	; 0x05
    2d54:	3e 81       	ldd	r19, Y+6	; 0x06
    2d56:	fc 01       	movw	r30, r24
    2d58:	35 83       	std	Z+5, r19	; 0x05
    2d5a:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d60:	2f 81       	ldd	r18, Y+7	; 0x07
    2d62:	38 85       	ldd	r19, Y+8	; 0x08
    2d64:	fc 01       	movw	r30, r24
    2d66:	37 83       	std	Z+7, r19	; 0x07
    2d68:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	29 85       	ldd	r18, Y+9	; 0x09
    2d70:	fc 01       	movw	r30, r24
    2d72:	26 87       	std	Z+14, r18	; 0x0e
}
    2d74:	00 00       	nop
    2d76:	29 96       	adiw	r28, 0x09	; 9
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	0f 91       	pop	r16
    2d88:	08 95       	ret

00002d8a <xTaskCreate>:
    2d8a:	af 92       	push	r10
    2d8c:	bf 92       	push	r11
    2d8e:	cf 92       	push	r12
    2d90:	df 92       	push	r13
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	60 97       	sbiw	r28, 0x10	; 16
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	9f 83       	std	Y+7, r25	; 0x07
    2dae:	8e 83       	std	Y+6, r24	; 0x06
    2db0:	79 87       	std	Y+9, r23	; 0x09
    2db2:	68 87       	std	Y+8, r22	; 0x08
    2db4:	5b 87       	std	Y+11, r21	; 0x0b
    2db6:	4a 87       	std	Y+10, r20	; 0x0a
    2db8:	3d 87       	std	Y+13, r19	; 0x0d
    2dba:	2c 87       	std	Y+12, r18	; 0x0c
    2dbc:	0e 87       	std	Y+14, r16	; 0x0e
    2dbe:	f8 8a       	std	Y+16, r15	; 0x10
    2dc0:	ef 86       	std	Y+15, r14	; 0x0f
    2dc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dc6:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <pvPortMalloc>
    2dca:	9d 83       	std	Y+5, r25	; 0x05
    2dcc:	8c 83       	std	Y+4, r24	; 0x04
    2dce:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd2:	89 2b       	or	r24, r25
    2dd4:	b9 f0       	breq	.+46     	; 0x2e04 <xTaskCreate+0x7a>
    2dd6:	84 e3       	ldi	r24, 0x34	; 52
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <pvPortMalloc>
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	89 2b       	or	r24, r25
    2de8:	41 f0       	breq	.+16     	; 0x2dfa <xTaskCreate+0x70>
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
    2dee:	2c 81       	ldd	r18, Y+4	; 0x04
    2df0:	3d 81       	ldd	r19, Y+5	; 0x05
    2df2:	fc 01       	movw	r30, r24
    2df4:	34 8f       	std	Z+28, r19	; 0x1c
    2df6:	23 8f       	std	Z+27, r18	; 0x1b
    2df8:	07 c0       	rjmp	.+14     	; 0x2e08 <xTaskCreate+0x7e>
    2dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dfe:	0e 94 91 07 	call	0xf22	; 0xf22 <vPortFree>
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <xTaskCreate+0x7e>
    2e04:	1a 82       	std	Y+2, r1	; 0x02
    2e06:	19 82       	std	Y+1, r1	; 0x01
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	89 2b       	or	r24, r25
    2e0e:	c1 f0       	breq	.+48     	; 0x2e40 <xTaskCreate+0xb6>
    2e10:	a9 81       	ldd	r26, Y+1	; 0x01
    2e12:	ba 81       	ldd	r27, Y+2	; 0x02
    2e14:	ef 85       	ldd	r30, Y+15	; 0x0f
    2e16:	f8 89       	ldd	r31, Y+16	; 0x10
    2e18:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e1a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e1c:	4a 85       	ldd	r20, Y+10	; 0x0a
    2e1e:	5b 85       	ldd	r21, Y+11	; 0x0b
    2e20:	68 85       	ldd	r22, Y+8	; 0x08
    2e22:	79 85       	ldd	r23, Y+9	; 0x09
    2e24:	8e 81       	ldd	r24, Y+6	; 0x06
    2e26:	9f 81       	ldd	r25, Y+7	; 0x07
    2e28:	a1 2c       	mov	r10, r1
    2e2a:	b1 2c       	mov	r11, r1
    2e2c:	6d 01       	movw	r12, r26
    2e2e:	7f 01       	movw	r14, r30
    2e30:	0e 85       	ldd	r16, Y+14	; 0x0e
    2e32:	19 d0       	rcall	.+50     	; 0x2e66 <prvInitialiseNewTask>
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	9a 81       	ldd	r25, Y+2	; 0x02
    2e38:	05 d1       	rcall	.+522    	; 0x3044 <prvAddNewTaskToReadyList>
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <xTaskCreate+0xba>
    2e40:	8f ef       	ldi	r24, 0xFF	; 255
    2e42:	8b 83       	std	Y+3, r24	; 0x03
    2e44:	8b 81       	ldd	r24, Y+3	; 0x03
    2e46:	60 96       	adiw	r28, 0x10	; 16
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	0f 91       	pop	r16
    2e58:	ff 90       	pop	r15
    2e5a:	ef 90       	pop	r14
    2e5c:	df 90       	pop	r13
    2e5e:	cf 90       	pop	r12
    2e60:	bf 90       	pop	r11
    2e62:	af 90       	pop	r10
    2e64:	08 95       	ret

00002e66 <prvInitialiseNewTask>:
    2e66:	af 92       	push	r10
    2e68:	bf 92       	push	r11
    2e6a:	cf 92       	push	r12
    2e6c:	df 92       	push	r13
    2e6e:	ef 92       	push	r14
    2e70:	ff 92       	push	r15
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	62 97       	sbiw	r28, 0x12	; 18
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	9d 83       	std	Y+5, r25	; 0x05
    2e8c:	8c 83       	std	Y+4, r24	; 0x04
    2e8e:	7f 83       	std	Y+7, r23	; 0x07
    2e90:	6e 83       	std	Y+6, r22	; 0x06
    2e92:	59 87       	std	Y+9, r21	; 0x09
    2e94:	48 87       	std	Y+8, r20	; 0x08
    2e96:	3b 87       	std	Y+11, r19	; 0x0b
    2e98:	2a 87       	std	Y+10, r18	; 0x0a
    2e9a:	0c 87       	std	Y+12, r16	; 0x0c
    2e9c:	fe 86       	std	Y+14, r15	; 0x0e
    2e9e:	ed 86       	std	Y+13, r14	; 0x0d
    2ea0:	d8 8a       	std	Y+16, r13	; 0x10
    2ea2:	cf 86       	std	Y+15, r12	; 0x0f
    2ea4:	ba 8a       	std	Y+18, r11	; 0x12
    2ea6:	a9 8a       	std	Y+17, r10	; 0x11
    2ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eaa:	98 89       	ldd	r25, Y+16	; 0x10
    2eac:	fc 01       	movw	r30, r24
    2eae:	83 8d       	ldd	r24, Z+27	; 0x1b
    2eb0:	94 8d       	ldd	r25, Z+28	; 0x1c
    2eb2:	28 85       	ldd	r18, Y+8	; 0x08
    2eb4:	39 85       	ldd	r19, Y+9	; 0x09
    2eb6:	a9 01       	movw	r20, r18
    2eb8:	65 ea       	ldi	r22, 0xA5	; 165
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	0e 94 7a 4c 	call	0x98f4	; 0x98f4 <memset>
    2ec0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ec2:	98 89       	ldd	r25, Y+16	; 0x10
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	23 8d       	ldd	r18, Z+27	; 0x1b
    2ec8:	34 8d       	ldd	r19, Z+28	; 0x1c
    2eca:	88 85       	ldd	r24, Y+8	; 0x08
    2ecc:	99 85       	ldd	r25, Y+9	; 0x09
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	82 0f       	add	r24, r18
    2ed2:	93 1f       	adc	r25, r19
    2ed4:	9b 83       	std	Y+3, r25	; 0x03
    2ed6:	8a 83       	std	Y+2, r24	; 0x02
    2ed8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eda:	9f 81       	ldd	r25, Y+7	; 0x07
    2edc:	89 2b       	or	r24, r25
    2ede:	69 f1       	breq	.+90     	; 0x2f3a <prvInitialiseNewTask+0xd4>
    2ee0:	19 82       	std	Y+1, r1	; 0x01
    2ee2:	21 c0       	rjmp	.+66     	; 0x2f26 <prvInitialiseNewTask+0xc0>
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	29 81       	ldd	r18, Y+1	; 0x01
    2eec:	22 2f       	mov	r18, r18
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4e 81       	ldd	r20, Y+6	; 0x06
    2ef2:	5f 81       	ldd	r21, Y+7	; 0x07
    2ef4:	24 0f       	add	r18, r20
    2ef6:	35 1f       	adc	r19, r21
    2ef8:	f9 01       	movw	r30, r18
    2efa:	40 81       	ld	r20, Z
    2efc:	2f 85       	ldd	r18, Y+15	; 0x0f
    2efe:	38 89       	ldd	r19, Y+16	; 0x10
    2f00:	82 0f       	add	r24, r18
    2f02:	93 1f       	adc	r25, r19
    2f04:	4d 96       	adiw	r24, 0x1d	; 29
    2f06:	fc 01       	movw	r30, r24
    2f08:	40 83       	st	Z, r20
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	88 2f       	mov	r24, r24
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	2e 81       	ldd	r18, Y+6	; 0x06
    2f12:	3f 81       	ldd	r19, Y+7	; 0x07
    2f14:	82 0f       	add	r24, r18
    2f16:	93 1f       	adc	r25, r19
    2f18:	fc 01       	movw	r30, r24
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 23       	and	r24, r24
    2f1e:	39 f0       	breq	.+14     	; 0x2f2e <prvInitialiseNewTask+0xc8>
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	8f 5f       	subi	r24, 0xFF	; 255
    2f24:	89 83       	std	Y+1, r24	; 0x01
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	80 31       	cpi	r24, 0x10	; 16
    2f2a:	e0 f2       	brcs	.-72     	; 0x2ee4 <prvInitialiseNewTask+0x7e>
    2f2c:	01 c0       	rjmp	.+2      	; 0x2f30 <prvInitialiseNewTask+0xca>
    2f2e:	00 00       	nop
    2f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f32:	98 89       	ldd	r25, Y+16	; 0x10
    2f34:	fc 01       	movw	r30, r24
    2f36:	14 a6       	std	Z+44, r1	; 0x2c
    2f38:	04 c0       	rjmp	.+8      	; 0x2f42 <prvInitialiseNewTask+0xdc>
    2f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f3c:	98 89       	ldd	r25, Y+16	; 0x10
    2f3e:	fc 01       	movw	r30, r24
    2f40:	15 8e       	std	Z+29, r1	; 0x1d
    2f42:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f44:	8a 30       	cpi	r24, 0x0A	; 10
    2f46:	10 f0       	brcs	.+4      	; 0x2f4c <prvInitialiseNewTask+0xe6>
    2f48:	89 e0       	ldi	r24, 0x09	; 9
    2f4a:	8c 87       	std	Y+12, r24	; 0x0c
    2f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4e:	98 89       	ldd	r25, Y+16	; 0x10
    2f50:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f52:	fc 01       	movw	r30, r24
    2f54:	22 8f       	std	Z+26, r18	; 0x1a
    2f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f58:	98 89       	ldd	r25, Y+16	; 0x10
    2f5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	25 a7       	std	Z+45, r18	; 0x2d
    2f60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f62:	98 89       	ldd	r25, Y+16	; 0x10
    2f64:	fc 01       	movw	r30, r24
    2f66:	16 a6       	std	Z+46, r1	; 0x2e
    2f68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f6a:	98 89       	ldd	r25, Y+16	; 0x10
    2f6c:	02 96       	adiw	r24, 0x02	; 2
    2f6e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vListInitialiseItem>
    2f72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f74:	98 89       	ldd	r25, Y+16	; 0x10
    2f76:	0e 96       	adiw	r24, 0x0e	; 14
    2f78:	0e 94 6e 09 	call	0x12dc	; 0x12dc <vListInitialiseItem>
    2f7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f7e:	98 89       	ldd	r25, Y+16	; 0x10
    2f80:	2f 85       	ldd	r18, Y+15	; 0x0f
    2f82:	38 89       	ldd	r19, Y+16	; 0x10
    2f84:	fc 01       	movw	r30, r24
    2f86:	33 87       	std	Z+11, r19	; 0x0b
    2f88:	22 87       	std	Z+10, r18	; 0x0a
    2f8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f8c:	88 2f       	mov	r24, r24
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	a0 e0       	ldi	r26, 0x00	; 0
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	2a e0       	ldi	r18, 0x0A	; 10
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e0       	ldi	r20, 0x00	; 0
    2f9a:	50 e0       	ldi	r21, 0x00	; 0
    2f9c:	79 01       	movw	r14, r18
    2f9e:	8a 01       	movw	r16, r20
    2fa0:	e8 1a       	sub	r14, r24
    2fa2:	f9 0a       	sbc	r15, r25
    2fa4:	0a 0b       	sbc	r16, r26
    2fa6:	1b 0b       	sbc	r17, r27
    2fa8:	d8 01       	movw	r26, r16
    2faa:	c7 01       	movw	r24, r14
    2fac:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fae:	38 89       	ldd	r19, Y+16	; 0x10
    2fb0:	f9 01       	movw	r30, r18
    2fb2:	86 87       	std	Z+14, r24	; 0x0e
    2fb4:	97 87       	std	Z+15, r25	; 0x0f
    2fb6:	a0 8b       	std	Z+16, r26	; 0x10
    2fb8:	b1 8b       	std	Z+17, r27	; 0x11
    2fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fbc:	98 89       	ldd	r25, Y+16	; 0x10
    2fbe:	2f 85       	ldd	r18, Y+15	; 0x0f
    2fc0:	38 89       	ldd	r19, Y+16	; 0x10
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	37 8b       	std	Z+23, r19	; 0x17
    2fc6:	26 8b       	std	Z+22, r18	; 0x16
    2fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fca:	98 89       	ldd	r25, Y+16	; 0x10
    2fcc:	8f 96       	adiw	r24, 0x2f	; 47
    2fce:	44 e0       	ldi	r20, 0x04	; 4
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	60 e0       	ldi	r22, 0x00	; 0
    2fd4:	70 e0       	ldi	r23, 0x00	; 0
    2fd6:	0e 94 7a 4c 	call	0x98f4	; 0x98f4 <memset>
    2fda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fdc:	98 89       	ldd	r25, Y+16	; 0x10
    2fde:	c3 96       	adiw	r24, 0x33	; 51
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	50 e0       	ldi	r21, 0x00	; 0
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	70 e0       	ldi	r23, 0x00	; 0
    2fe8:	0e 94 7a 4c 	call	0x98f4	; 0x98f4 <memset>
    2fec:	4a 85       	ldd	r20, Y+10	; 0x0a
    2fee:	5b 85       	ldd	r21, Y+11	; 0x0b
    2ff0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ff2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff8:	b9 01       	movw	r22, r18
    2ffa:	0e 94 5f 0a 	call	0x14be	; 0x14be <pxPortInitialiseStack>
    2ffe:	9c 01       	movw	r18, r24
    3000:	8f 85       	ldd	r24, Y+15	; 0x0f
    3002:	98 89       	ldd	r25, Y+16	; 0x10
    3004:	fc 01       	movw	r30, r24
    3006:	31 83       	std	Z+1, r19	; 0x01
    3008:	20 83       	st	Z, r18
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	89 2b       	or	r24, r25
    3010:	39 f0       	breq	.+14     	; 0x3020 <prvInitialiseNewTask+0x1ba>
    3012:	8d 85       	ldd	r24, Y+13	; 0x0d
    3014:	9e 85       	ldd	r25, Y+14	; 0x0e
    3016:	2f 85       	ldd	r18, Y+15	; 0x0f
    3018:	38 89       	ldd	r19, Y+16	; 0x10
    301a:	fc 01       	movw	r30, r24
    301c:	31 83       	std	Z+1, r19	; 0x01
    301e:	20 83       	st	Z, r18
    3020:	00 00       	nop
    3022:	62 96       	adiw	r28, 0x12	; 18
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	1f 91       	pop	r17
    3034:	0f 91       	pop	r16
    3036:	ff 90       	pop	r15
    3038:	ef 90       	pop	r14
    303a:	df 90       	pop	r13
    303c:	cf 90       	pop	r12
    303e:	bf 90       	pop	r11
    3040:	af 90       	pop	r10
    3042:	08 95       	ret

00003044 <prvAddNewTaskToReadyList>:
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	00 d0       	rcall	.+0      	; 0x304a <prvAddNewTaskToReadyList+0x6>
    304a:	1f 92       	push	r1
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	9c 83       	std	Y+4, r25	; 0x04
    3052:	8b 83       	std	Y+3, r24	; 0x03
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	0f 92       	push	r0
    305a:	80 91 84 1b 	lds	r24, 0x1B84	; 0x801b84 <uxCurrentNumberOfTasks>
    305e:	8f 5f       	subi	r24, 0xFF	; 255
    3060:	80 93 84 1b 	sts	0x1B84, r24	; 0x801b84 <uxCurrentNumberOfTasks>
    3064:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3068:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    306c:	89 2b       	or	r24, r25
    306e:	69 f4       	brne	.+26     	; 0x308a <prvAddNewTaskToReadyList+0x46>
    3070:	8b 81       	ldd	r24, Y+3	; 0x03
    3072:	9c 81       	ldd	r25, Y+4	; 0x04
    3074:	90 93 d9 1a 	sts	0x1AD9, r25	; 0x801ad9 <pxCurrentTCB+0x1>
    3078:	80 93 d8 1a 	sts	0x1AD8, r24	; 0x801ad8 <pxCurrentTCB>
    307c:	80 91 84 1b 	lds	r24, 0x1B84	; 0x801b84 <uxCurrentNumberOfTasks>
    3080:	81 30       	cpi	r24, 0x01	; 1
    3082:	c9 f4       	brne	.+50     	; 0x30b6 <prvAddNewTaskToReadyList+0x72>
    3084:	0e 94 46 23 	call	0x468c	; 0x468c <prvInitialiseTaskLists>
    3088:	16 c0       	rjmp	.+44     	; 0x30b6 <prvAddNewTaskToReadyList+0x72>
    308a:	80 91 8a 1b 	lds	r24, 0x1B8A	; 0x801b8a <xSchedulerRunning>
    308e:	88 23       	and	r24, r24
    3090:	91 f4       	brne	.+36     	; 0x30b6 <prvAddNewTaskToReadyList+0x72>
    3092:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3096:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    309a:	fc 01       	movw	r30, r24
    309c:	22 8d       	ldd	r18, Z+26	; 0x1a
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	9c 81       	ldd	r25, Y+4	; 0x04
    30a2:	fc 01       	movw	r30, r24
    30a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    30a6:	82 17       	cp	r24, r18
    30a8:	30 f0       	brcs	.+12     	; 0x30b6 <prvAddNewTaskToReadyList+0x72>
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	90 93 d9 1a 	sts	0x1AD9, r25	; 0x801ad9 <pxCurrentTCB+0x1>
    30b2:	80 93 d8 1a 	sts	0x1AD8, r24	; 0x801ad8 <pxCurrentTCB>
    30b6:	80 91 91 1b 	lds	r24, 0x1B91	; 0x801b91 <uxTaskNumber>
    30ba:	8f 5f       	subi	r24, 0xFF	; 255
    30bc:	80 93 91 1b 	sts	0x1B91, r24	; 0x801b91 <uxTaskNumber>
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	fc 01       	movw	r30, r24
    30c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    30c8:	80 91 89 1b 	lds	r24, 0x1B89	; 0x801b89 <uxTopReadyPriority>
    30cc:	89 17       	cp	r24, r25
    30ce:	30 f4       	brcc	.+12     	; 0x30dc <prvAddNewTaskToReadyList+0x98>
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	fc 01       	movw	r30, r24
    30d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    30d8:	80 93 89 1b 	sts	0x1B89, r24	; 0x801b89 <uxTopReadyPriority>
    30dc:	8b 81       	ldd	r24, Y+3	; 0x03
    30de:	9c 81       	ldd	r25, Y+4	; 0x04
    30e0:	fc 01       	movw	r30, r24
    30e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4b e0       	ldi	r20, 0x0B	; 11
    30ea:	42 9f       	mul	r20, r18
    30ec:	c0 01       	movw	r24, r0
    30ee:	43 9f       	mul	r20, r19
    30f0:	90 0d       	add	r25, r0
    30f2:	11 24       	eor	r1, r1
    30f4:	85 52       	subi	r24, 0x25	; 37
    30f6:	95 4e       	sbci	r25, 0xE5	; 229
    30f8:	fc 01       	movw	r30, r24
    30fa:	80 81       	ld	r24, Z
    30fc:	91 81       	ldd	r25, Z+1	; 0x01
    30fe:	9a 83       	std	Y+2, r25	; 0x02
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	8b 81       	ldd	r24, Y+3	; 0x03
    3104:	9c 81       	ldd	r25, Y+4	; 0x04
    3106:	29 81       	ldd	r18, Y+1	; 0x01
    3108:	3a 81       	ldd	r19, Y+2	; 0x02
    310a:	fc 01       	movw	r30, r24
    310c:	37 83       	std	Z+7, r19	; 0x07
    310e:	26 83       	std	Z+6, r18	; 0x06
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	fc 01       	movw	r30, r24
    3116:	26 81       	ldd	r18, Z+6	; 0x06
    3118:	37 81       	ldd	r19, Z+7	; 0x07
    311a:	8b 81       	ldd	r24, Y+3	; 0x03
    311c:	9c 81       	ldd	r25, Y+4	; 0x04
    311e:	fc 01       	movw	r30, r24
    3120:	31 87       	std	Z+9, r19	; 0x09
    3122:	20 87       	std	Z+8, r18	; 0x08
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
    3128:	fc 01       	movw	r30, r24
    312a:	86 81       	ldd	r24, Z+6	; 0x06
    312c:	97 81       	ldd	r25, Z+7	; 0x07
    312e:	2b 81       	ldd	r18, Y+3	; 0x03
    3130:	3c 81       	ldd	r19, Y+4	; 0x04
    3132:	2e 5f       	subi	r18, 0xFE	; 254
    3134:	3f 4f       	sbci	r19, 0xFF	; 255
    3136:	fc 01       	movw	r30, r24
    3138:	35 83       	std	Z+5, r19	; 0x05
    313a:	24 83       	std	Z+4, r18	; 0x04
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	9c 01       	movw	r18, r24
    3142:	2e 5f       	subi	r18, 0xFE	; 254
    3144:	3f 4f       	sbci	r19, 0xFF	; 255
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	9a 81       	ldd	r25, Y+2	; 0x02
    314a:	fc 01       	movw	r30, r24
    314c:	37 83       	std	Z+7, r19	; 0x07
    314e:	26 83       	std	Z+6, r18	; 0x06
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	fc 01       	movw	r30, r24
    3156:	82 8d       	ldd	r24, Z+26	; 0x1a
    3158:	28 2f       	mov	r18, r24
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4b e0       	ldi	r20, 0x0B	; 11
    315e:	42 9f       	mul	r20, r18
    3160:	c0 01       	movw	r24, r0
    3162:	43 9f       	mul	r20, r19
    3164:	90 0d       	add	r25, r0
    3166:	11 24       	eor	r1, r1
    3168:	9c 01       	movw	r18, r24
    316a:	26 52       	subi	r18, 0x26	; 38
    316c:	35 4e       	sbci	r19, 0xE5	; 229
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	9c 81       	ldd	r25, Y+4	; 0x04
    3172:	fc 01       	movw	r30, r24
    3174:	35 87       	std	Z+13, r19	; 0x0d
    3176:	24 87       	std	Z+12, r18	; 0x0c
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	9c 81       	ldd	r25, Y+4	; 0x04
    317c:	fc 01       	movw	r30, r24
    317e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3180:	88 2f       	mov	r24, r24
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	4b e0       	ldi	r20, 0x0B	; 11
    3186:	48 9f       	mul	r20, r24
    3188:	90 01       	movw	r18, r0
    318a:	49 9f       	mul	r20, r25
    318c:	30 0d       	add	r19, r0
    318e:	11 24       	eor	r1, r1
    3190:	26 52       	subi	r18, 0x26	; 38
    3192:	35 4e       	sbci	r19, 0xE5	; 229
    3194:	f9 01       	movw	r30, r18
    3196:	20 81       	ld	r18, Z
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	42 0f       	add	r20, r18
    319c:	5b e0       	ldi	r21, 0x0B	; 11
    319e:	58 9f       	mul	r21, r24
    31a0:	90 01       	movw	r18, r0
    31a2:	59 9f       	mul	r21, r25
    31a4:	30 0d       	add	r19, r0
    31a6:	11 24       	eor	r1, r1
    31a8:	c9 01       	movw	r24, r18
    31aa:	86 52       	subi	r24, 0x26	; 38
    31ac:	95 4e       	sbci	r25, 0xE5	; 229
    31ae:	fc 01       	movw	r30, r24
    31b0:	40 83       	st	Z, r20
    31b2:	0f 90       	pop	r0
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	80 91 8a 1b 	lds	r24, 0x1B8A	; 0x801b8a <xSchedulerRunning>
    31ba:	88 23       	and	r24, r24
    31bc:	71 f0       	breq	.+28     	; 0x31da <prvAddNewTaskToReadyList+0x196>
    31be:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    31c2:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    31c6:	fc 01       	movw	r30, r24
    31c8:	22 8d       	ldd	r18, Z+26	; 0x1a
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	9c 81       	ldd	r25, Y+4	; 0x04
    31ce:	fc 01       	movw	r30, r24
    31d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    31d2:	28 17       	cp	r18, r24
    31d4:	10 f4       	brcc	.+4      	; 0x31da <prvAddNewTaskToReadyList+0x196>
    31d6:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
    31da:	00 00       	nop
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	08 95       	ret

000031ea <xTaskDelayUntil>:
    31ea:	ef 92       	push	r14
    31ec:	ff 92       	push	r15
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	60 97       	sbiw	r28, 0x10	; 16
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	9c 87       	std	Y+12, r25	; 0x0c
    3208:	8b 87       	std	Y+11, r24	; 0x0b
    320a:	4d 87       	std	Y+13, r20	; 0x0d
    320c:	5e 87       	std	Y+14, r21	; 0x0e
    320e:	6f 87       	std	Y+15, r22	; 0x0f
    3210:	78 8b       	std	Y+16, r23	; 0x10
    3212:	19 82       	std	Y+1, r1	; 0x01
    3214:	19 d1       	rcall	.+562    	; 0x3448 <vTaskSuspendAll>
    3216:	80 91 85 1b 	lds	r24, 0x1B85	; 0x801b85 <xTickCount>
    321a:	90 91 86 1b 	lds	r25, 0x1B86	; 0x801b86 <xTickCount+0x1>
    321e:	a0 91 87 1b 	lds	r26, 0x1B87	; 0x801b87 <xTickCount+0x2>
    3222:	b0 91 88 1b 	lds	r27, 0x1B88	; 0x801b88 <xTickCount+0x3>
    3226:	8a 83       	std	Y+2, r24	; 0x02
    3228:	9b 83       	std	Y+3, r25	; 0x03
    322a:	ac 83       	std	Y+4, r26	; 0x04
    322c:	bd 83       	std	Y+5, r27	; 0x05
    322e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3230:	9c 85       	ldd	r25, Y+12	; 0x0c
    3232:	fc 01       	movw	r30, r24
    3234:	20 81       	ld	r18, Z
    3236:	31 81       	ldd	r19, Z+1	; 0x01
    3238:	42 81       	ldd	r20, Z+2	; 0x02
    323a:	53 81       	ldd	r21, Z+3	; 0x03
    323c:	8d 85       	ldd	r24, Y+13	; 0x0d
    323e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3240:	af 85       	ldd	r26, Y+15	; 0x0f
    3242:	b8 89       	ldd	r27, Y+16	; 0x10
    3244:	82 0f       	add	r24, r18
    3246:	93 1f       	adc	r25, r19
    3248:	a4 1f       	adc	r26, r20
    324a:	b5 1f       	adc	r27, r21
    324c:	8e 83       	std	Y+6, r24	; 0x06
    324e:	9f 83       	std	Y+7, r25	; 0x07
    3250:	a8 87       	std	Y+8, r26	; 0x08
    3252:	b9 87       	std	Y+9, r27	; 0x09
    3254:	8b 85       	ldd	r24, Y+11	; 0x0b
    3256:	9c 85       	ldd	r25, Y+12	; 0x0c
    3258:	fc 01       	movw	r30, r24
    325a:	20 81       	ld	r18, Z
    325c:	31 81       	ldd	r19, Z+1	; 0x01
    325e:	42 81       	ldd	r20, Z+2	; 0x02
    3260:	53 81       	ldd	r21, Z+3	; 0x03
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	9b 81       	ldd	r25, Y+3	; 0x03
    3266:	ac 81       	ldd	r26, Y+4	; 0x04
    3268:	bd 81       	ldd	r27, Y+5	; 0x05
    326a:	82 17       	cp	r24, r18
    326c:	93 07       	cpc	r25, r19
    326e:	a4 07       	cpc	r26, r20
    3270:	b5 07       	cpc	r27, r21
    3272:	00 f5       	brcc	.+64     	; 0x32b4 <xTaskDelayUntil+0xca>
    3274:	8b 85       	ldd	r24, Y+11	; 0x0b
    3276:	9c 85       	ldd	r25, Y+12	; 0x0c
    3278:	fc 01       	movw	r30, r24
    327a:	20 81       	ld	r18, Z
    327c:	31 81       	ldd	r19, Z+1	; 0x01
    327e:	42 81       	ldd	r20, Z+2	; 0x02
    3280:	53 81       	ldd	r21, Z+3	; 0x03
    3282:	8e 81       	ldd	r24, Y+6	; 0x06
    3284:	9f 81       	ldd	r25, Y+7	; 0x07
    3286:	a8 85       	ldd	r26, Y+8	; 0x08
    3288:	b9 85       	ldd	r27, Y+9	; 0x09
    328a:	82 17       	cp	r24, r18
    328c:	93 07       	cpc	r25, r19
    328e:	a4 07       	cpc	r26, r20
    3290:	b5 07       	cpc	r27, r21
    3292:	78 f5       	brcc	.+94     	; 0x32f2 <xTaskDelayUntil+0x108>
    3294:	2e 81       	ldd	r18, Y+6	; 0x06
    3296:	3f 81       	ldd	r19, Y+7	; 0x07
    3298:	48 85       	ldd	r20, Y+8	; 0x08
    329a:	59 85       	ldd	r21, Y+9	; 0x09
    329c:	8a 81       	ldd	r24, Y+2	; 0x02
    329e:	9b 81       	ldd	r25, Y+3	; 0x03
    32a0:	ac 81       	ldd	r26, Y+4	; 0x04
    32a2:	bd 81       	ldd	r27, Y+5	; 0x05
    32a4:	82 17       	cp	r24, r18
    32a6:	93 07       	cpc	r25, r19
    32a8:	a4 07       	cpc	r26, r20
    32aa:	b5 07       	cpc	r27, r21
    32ac:	10 f5       	brcc	.+68     	; 0x32f2 <xTaskDelayUntil+0x108>
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	1f c0       	rjmp	.+62     	; 0x32f2 <xTaskDelayUntil+0x108>
    32b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    32b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    32b8:	fc 01       	movw	r30, r24
    32ba:	20 81       	ld	r18, Z
    32bc:	31 81       	ldd	r19, Z+1	; 0x01
    32be:	42 81       	ldd	r20, Z+2	; 0x02
    32c0:	53 81       	ldd	r21, Z+3	; 0x03
    32c2:	8e 81       	ldd	r24, Y+6	; 0x06
    32c4:	9f 81       	ldd	r25, Y+7	; 0x07
    32c6:	a8 85       	ldd	r26, Y+8	; 0x08
    32c8:	b9 85       	ldd	r27, Y+9	; 0x09
    32ca:	82 17       	cp	r24, r18
    32cc:	93 07       	cpc	r25, r19
    32ce:	a4 07       	cpc	r26, r20
    32d0:	b5 07       	cpc	r27, r21
    32d2:	68 f0       	brcs	.+26     	; 0x32ee <xTaskDelayUntil+0x104>
    32d4:	2e 81       	ldd	r18, Y+6	; 0x06
    32d6:	3f 81       	ldd	r19, Y+7	; 0x07
    32d8:	48 85       	ldd	r20, Y+8	; 0x08
    32da:	59 85       	ldd	r21, Y+9	; 0x09
    32dc:	8a 81       	ldd	r24, Y+2	; 0x02
    32de:	9b 81       	ldd	r25, Y+3	; 0x03
    32e0:	ac 81       	ldd	r26, Y+4	; 0x04
    32e2:	bd 81       	ldd	r27, Y+5	; 0x05
    32e4:	82 17       	cp	r24, r18
    32e6:	93 07       	cpc	r25, r19
    32e8:	a4 07       	cpc	r26, r20
    32ea:	b5 07       	cpc	r27, r21
    32ec:	10 f4       	brcc	.+4      	; 0x32f2 <xTaskDelayUntil+0x108>
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    32f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    32f6:	8e 81       	ldd	r24, Y+6	; 0x06
    32f8:	9f 81       	ldd	r25, Y+7	; 0x07
    32fa:	a8 85       	ldd	r26, Y+8	; 0x08
    32fc:	b9 85       	ldd	r27, Y+9	; 0x09
    32fe:	f9 01       	movw	r30, r18
    3300:	80 83       	st	Z, r24
    3302:	91 83       	std	Z+1, r25	; 0x01
    3304:	a2 83       	std	Z+2, r26	; 0x02
    3306:	b3 83       	std	Z+3, r27	; 0x03
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	88 23       	and	r24, r24
    330c:	a9 f0       	breq	.+42     	; 0x3338 <xTaskDelayUntil+0x14e>
    330e:	2e 81       	ldd	r18, Y+6	; 0x06
    3310:	3f 81       	ldd	r19, Y+7	; 0x07
    3312:	48 85       	ldd	r20, Y+8	; 0x08
    3314:	59 85       	ldd	r21, Y+9	; 0x09
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	9b 81       	ldd	r25, Y+3	; 0x03
    331a:	ac 81       	ldd	r26, Y+4	; 0x04
    331c:	bd 81       	ldd	r27, Y+5	; 0x05
    331e:	79 01       	movw	r14, r18
    3320:	8a 01       	movw	r16, r20
    3322:	e8 1a       	sub	r14, r24
    3324:	f9 0a       	sbc	r15, r25
    3326:	0a 0b       	sbc	r16, r26
    3328:	1b 0b       	sbc	r17, r27
    332a:	d8 01       	movw	r26, r16
    332c:	c7 01       	movw	r24, r14
    332e:	40 e0       	ldi	r20, 0x00	; 0
    3330:	bc 01       	movw	r22, r24
    3332:	cd 01       	movw	r24, r26
    3334:	0e 94 8c 2a 	call	0x5518	; 0x5518 <prvAddCurrentTaskToDelayedList>
    3338:	94 d0       	rcall	.+296    	; 0x3462 <xTaskResumeAll>
    333a:	8a 87       	std	Y+10, r24	; 0x0a
    333c:	8a 85       	ldd	r24, Y+10	; 0x0a
    333e:	88 23       	and	r24, r24
    3340:	11 f4       	brne	.+4      	; 0x3346 <xTaskDelayUntil+0x15c>
    3342:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
    3346:	89 81       	ldd	r24, Y+1	; 0x01
    3348:	60 96       	adiw	r28, 0x10	; 16
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	ef 90       	pop	r14
    3360:	08 95       	ret

00003362 <vTaskDelay>:
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	00 d0       	rcall	.+0      	; 0x3368 <vTaskDelay+0x6>
    3368:	1f 92       	push	r1
    336a:	1f 92       	push	r1
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	6a 83       	std	Y+2, r22	; 0x02
    3372:	7b 83       	std	Y+3, r23	; 0x03
    3374:	8c 83       	std	Y+4, r24	; 0x04
    3376:	9d 83       	std	Y+5, r25	; 0x05
    3378:	19 82       	std	Y+1, r1	; 0x01
    337a:	8a 81       	ldd	r24, Y+2	; 0x02
    337c:	9b 81       	ldd	r25, Y+3	; 0x03
    337e:	ac 81       	ldd	r26, Y+4	; 0x04
    3380:	bd 81       	ldd	r27, Y+5	; 0x05
    3382:	89 2b       	or	r24, r25
    3384:	8a 2b       	or	r24, r26
    3386:	8b 2b       	or	r24, r27
    3388:	61 f0       	breq	.+24     	; 0x33a2 <vTaskDelay+0x40>
    338a:	5e d0       	rcall	.+188    	; 0x3448 <vTaskSuspendAll>
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	ac 81       	ldd	r26, Y+4	; 0x04
    3392:	bd 81       	ldd	r27, Y+5	; 0x05
    3394:	40 e0       	ldi	r20, 0x00	; 0
    3396:	bc 01       	movw	r22, r24
    3398:	cd 01       	movw	r24, r26
    339a:	0e 94 8c 2a 	call	0x5518	; 0x5518 <prvAddCurrentTaskToDelayedList>
    339e:	61 d0       	rcall	.+194    	; 0x3462 <xTaskResumeAll>
    33a0:	89 83       	std	Y+1, r24	; 0x01
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	88 23       	and	r24, r24
    33a6:	11 f4       	brne	.+4      	; 0x33ac <vTaskDelay+0x4a>
    33a8:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
    33ac:	00 00       	nop
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	df 91       	pop	r29
    33ba:	cf 91       	pop	r28
    33bc:	08 95       	ret

000033be <vTaskStartScheduler>:
    33be:	ef 92       	push	r14
    33c0:	ff 92       	push	r15
    33c2:	0f 93       	push	r16
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
    33c8:	1f 92       	push	r1
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	0f 2e       	mov	r0, r31
    33d0:	f6 e9       	ldi	r31, 0x96	; 150
    33d2:	ef 2e       	mov	r14, r31
    33d4:	fb e1       	ldi	r31, 0x1B	; 27
    33d6:	ff 2e       	mov	r15, r31
    33d8:	f0 2d       	mov	r31, r0
    33da:	00 e0       	ldi	r16, 0x00	; 0
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 ec       	ldi	r20, 0xC0	; 192
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	65 e5       	ldi	r22, 0x55	; 85
    33e6:	73 e0       	ldi	r23, 0x03	; 3
    33e8:	8e e4       	ldi	r24, 0x4E	; 78
    33ea:	91 e0       	ldi	r25, 0x01	; 1
    33ec:	ce dc       	rcall	.-1636   	; 0x2d8a <xTaskCreate>
    33ee:	89 83       	std	Y+1, r24	; 0x01
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	81 30       	cpi	r24, 0x01	; 1
    33f4:	19 f4       	brne	.+6      	; 0x33fc <vTaskStartScheduler+0x3e>
    33f6:	0e 94 6f 2b 	call	0x56de	; 0x56de <xTimerCreateTimerTask>
    33fa:	89 83       	std	Y+1, r24	; 0x01
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
    33fe:	81 30       	cpi	r24, 0x01	; 1
    3400:	c9 f4       	brne	.+50     	; 0x3434 <vTaskStartScheduler+0x76>
    3402:	f8 94       	cli
    3404:	8f ef       	ldi	r24, 0xFF	; 255
    3406:	9f ef       	ldi	r25, 0xFF	; 255
    3408:	dc 01       	movw	r26, r24
    340a:	80 93 92 1b 	sts	0x1B92, r24	; 0x801b92 <xNextTaskUnblockTime>
    340e:	90 93 93 1b 	sts	0x1B93, r25	; 0x801b93 <xNextTaskUnblockTime+0x1>
    3412:	a0 93 94 1b 	sts	0x1B94, r26	; 0x801b94 <xNextTaskUnblockTime+0x2>
    3416:	b0 93 95 1b 	sts	0x1B95, r27	; 0x801b95 <xNextTaskUnblockTime+0x3>
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	80 93 8a 1b 	sts	0x1B8A, r24	; 0x801b8a <xSchedulerRunning>
    3420:	10 92 85 1b 	sts	0x1B85, r1	; 0x801b85 <xTickCount>
    3424:	10 92 86 1b 	sts	0x1B86, r1	; 0x801b86 <xTickCount+0x1>
    3428:	10 92 87 1b 	sts	0x1B87, r1	; 0x801b87 <xTickCount+0x2>
    342c:	10 92 88 1b 	sts	0x1B88, r1	; 0x801b88 <xTickCount+0x3>
    3430:	0e 94 ed 0a 	call	0x15da	; 0x15da <xPortStartScheduler>
    3434:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    3438:	00 00       	nop
    343a:	0f 90       	pop	r0
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	0f 91       	pop	r16
    3442:	ff 90       	pop	r15
    3444:	ef 90       	pop	r14
    3446:	08 95       	ret

00003448 <vTaskSuspendAll>:
    3448:	cf 93       	push	r28
    344a:	df 93       	push	r29
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	80 91 98 1b 	lds	r24, 0x1B98	; 0x801b98 <uxSchedulerSuspended>
    3454:	8f 5f       	subi	r24, 0xFF	; 255
    3456:	80 93 98 1b 	sts	0x1B98, r24	; 0x801b98 <uxSchedulerSuspended>
    345a:	00 00       	nop
    345c:	df 91       	pop	r29
    345e:	cf 91       	pop	r28
    3460:	08 95       	ret

00003462 <xTaskResumeAll>:
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	2d 97       	sbiw	r28, 0x0d	; 13
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	1a 82       	std	Y+2, r1	; 0x02
    3478:	19 82       	std	Y+1, r1	; 0x01
    347a:	1b 82       	std	Y+3, r1	; 0x03
    347c:	0f b6       	in	r0, 0x3f	; 63
    347e:	f8 94       	cli
    3480:	0f 92       	push	r0
    3482:	80 91 98 1b 	lds	r24, 0x1B98	; 0x801b98 <uxSchedulerSuspended>
    3486:	81 50       	subi	r24, 0x01	; 1
    3488:	80 93 98 1b 	sts	0x1B98, r24	; 0x801b98 <uxSchedulerSuspended>
    348c:	80 91 98 1b 	lds	r24, 0x1B98	; 0x801b98 <uxSchedulerSuspended>
    3490:	88 23       	and	r24, r24
    3492:	09 f0       	breq	.+2      	; 0x3496 <xTaskResumeAll+0x34>
    3494:	69 c1       	rjmp	.+722    	; 0x3768 <xTaskResumeAll+0x306>
    3496:	80 91 84 1b 	lds	r24, 0x1B84	; 0x801b84 <uxCurrentNumberOfTasks>
    349a:	88 23       	and	r24, r24
    349c:	09 f4       	brne	.+2      	; 0x34a0 <xTaskResumeAll+0x3e>
    349e:	64 c1       	rjmp	.+712    	; 0x3768 <xTaskResumeAll+0x306>
    34a0:	1b c1       	rjmp	.+566    	; 0x36d8 <xTaskResumeAll+0x276>
    34a2:	80 91 69 1b 	lds	r24, 0x1B69	; 0x801b69 <xPendingReadyList+0x7>
    34a6:	90 91 6a 1b 	lds	r25, 0x1B6A	; 0x801b6a <xPendingReadyList+0x8>
    34aa:	fc 01       	movw	r30, r24
    34ac:	80 85       	ldd	r24, Z+8	; 0x08
    34ae:	91 85       	ldd	r25, Z+9	; 0x09
    34b0:	9a 83       	std	Y+2, r25	; 0x02
    34b2:	89 83       	std	Y+1, r24	; 0x01
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	9a 81       	ldd	r25, Y+2	; 0x02
    34b8:	fc 01       	movw	r30, r24
    34ba:	80 8d       	ldd	r24, Z+24	; 0x18
    34bc:	91 8d       	ldd	r25, Z+25	; 0x19
    34be:	99 87       	std	Y+9, r25	; 0x09
    34c0:	88 87       	std	Y+8, r24	; 0x08
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	9a 81       	ldd	r25, Y+2	; 0x02
    34c6:	fc 01       	movw	r30, r24
    34c8:	82 89       	ldd	r24, Z+18	; 0x12
    34ca:	93 89       	ldd	r25, Z+19	; 0x13
    34cc:	29 81       	ldd	r18, Y+1	; 0x01
    34ce:	3a 81       	ldd	r19, Y+2	; 0x02
    34d0:	f9 01       	movw	r30, r18
    34d2:	24 89       	ldd	r18, Z+20	; 0x14
    34d4:	35 89       	ldd	r19, Z+21	; 0x15
    34d6:	fc 01       	movw	r30, r24
    34d8:	37 83       	std	Z+7, r19	; 0x07
    34da:	26 83       	std	Z+6, r18	; 0x06
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	9a 81       	ldd	r25, Y+2	; 0x02
    34e0:	fc 01       	movw	r30, r24
    34e2:	84 89       	ldd	r24, Z+20	; 0x14
    34e4:	95 89       	ldd	r25, Z+21	; 0x15
    34e6:	29 81       	ldd	r18, Y+1	; 0x01
    34e8:	3a 81       	ldd	r19, Y+2	; 0x02
    34ea:	f9 01       	movw	r30, r18
    34ec:	22 89       	ldd	r18, Z+18	; 0x12
    34ee:	33 89       	ldd	r19, Z+19	; 0x13
    34f0:	fc 01       	movw	r30, r24
    34f2:	35 83       	std	Z+5, r19	; 0x05
    34f4:	24 83       	std	Z+4, r18	; 0x04
    34f6:	88 85       	ldd	r24, Y+8	; 0x08
    34f8:	99 85       	ldd	r25, Y+9	; 0x09
    34fa:	fc 01       	movw	r30, r24
    34fc:	21 81       	ldd	r18, Z+1	; 0x01
    34fe:	32 81       	ldd	r19, Z+2	; 0x02
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	9a 81       	ldd	r25, Y+2	; 0x02
    3504:	0e 96       	adiw	r24, 0x0e	; 14
    3506:	28 17       	cp	r18, r24
    3508:	39 07       	cpc	r19, r25
    350a:	51 f4       	brne	.+20     	; 0x3520 <xTaskResumeAll+0xbe>
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	9a 81       	ldd	r25, Y+2	; 0x02
    3510:	fc 01       	movw	r30, r24
    3512:	24 89       	ldd	r18, Z+20	; 0x14
    3514:	35 89       	ldd	r19, Z+21	; 0x15
    3516:	88 85       	ldd	r24, Y+8	; 0x08
    3518:	99 85       	ldd	r25, Y+9	; 0x09
    351a:	fc 01       	movw	r30, r24
    351c:	32 83       	std	Z+2, r19	; 0x02
    351e:	21 83       	std	Z+1, r18	; 0x01
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	9a 81       	ldd	r25, Y+2	; 0x02
    3524:	fc 01       	movw	r30, r24
    3526:	11 8e       	std	Z+25, r1	; 0x19
    3528:	10 8e       	std	Z+24, r1	; 0x18
    352a:	88 85       	ldd	r24, Y+8	; 0x08
    352c:	99 85       	ldd	r25, Y+9	; 0x09
    352e:	fc 01       	movw	r30, r24
    3530:	80 81       	ld	r24, Z
    3532:	2f ef       	ldi	r18, 0xFF	; 255
    3534:	28 0f       	add	r18, r24
    3536:	88 85       	ldd	r24, Y+8	; 0x08
    3538:	99 85       	ldd	r25, Y+9	; 0x09
    353a:	fc 01       	movw	r30, r24
    353c:	20 83       	st	Z, r18
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	9a 81       	ldd	r25, Y+2	; 0x02
    3542:	fc 01       	movw	r30, r24
    3544:	84 85       	ldd	r24, Z+12	; 0x0c
    3546:	95 85       	ldd	r25, Z+13	; 0x0d
    3548:	9b 87       	std	Y+11, r25	; 0x0b
    354a:	8a 87       	std	Y+10, r24	; 0x0a
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	9a 81       	ldd	r25, Y+2	; 0x02
    3550:	fc 01       	movw	r30, r24
    3552:	86 81       	ldd	r24, Z+6	; 0x06
    3554:	97 81       	ldd	r25, Z+7	; 0x07
    3556:	29 81       	ldd	r18, Y+1	; 0x01
    3558:	3a 81       	ldd	r19, Y+2	; 0x02
    355a:	f9 01       	movw	r30, r18
    355c:	20 85       	ldd	r18, Z+8	; 0x08
    355e:	31 85       	ldd	r19, Z+9	; 0x09
    3560:	fc 01       	movw	r30, r24
    3562:	37 83       	std	Z+7, r19	; 0x07
    3564:	26 83       	std	Z+6, r18	; 0x06
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	fc 01       	movw	r30, r24
    356c:	80 85       	ldd	r24, Z+8	; 0x08
    356e:	91 85       	ldd	r25, Z+9	; 0x09
    3570:	29 81       	ldd	r18, Y+1	; 0x01
    3572:	3a 81       	ldd	r19, Y+2	; 0x02
    3574:	f9 01       	movw	r30, r18
    3576:	26 81       	ldd	r18, Z+6	; 0x06
    3578:	37 81       	ldd	r19, Z+7	; 0x07
    357a:	fc 01       	movw	r30, r24
    357c:	35 83       	std	Z+5, r19	; 0x05
    357e:	24 83       	std	Z+4, r18	; 0x04
    3580:	8a 85       	ldd	r24, Y+10	; 0x0a
    3582:	9b 85       	ldd	r25, Y+11	; 0x0b
    3584:	fc 01       	movw	r30, r24
    3586:	21 81       	ldd	r18, Z+1	; 0x01
    3588:	32 81       	ldd	r19, Z+2	; 0x02
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	02 96       	adiw	r24, 0x02	; 2
    3590:	28 17       	cp	r18, r24
    3592:	39 07       	cpc	r19, r25
    3594:	51 f4       	brne	.+20     	; 0x35aa <xTaskResumeAll+0x148>
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	fc 01       	movw	r30, r24
    359c:	20 85       	ldd	r18, Z+8	; 0x08
    359e:	31 85       	ldd	r19, Z+9	; 0x09
    35a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    35a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    35a4:	fc 01       	movw	r30, r24
    35a6:	32 83       	std	Z+2, r19	; 0x02
    35a8:	21 83       	std	Z+1, r18	; 0x01
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	9a 81       	ldd	r25, Y+2	; 0x02
    35ae:	fc 01       	movw	r30, r24
    35b0:	15 86       	std	Z+13, r1	; 0x0d
    35b2:	14 86       	std	Z+12, r1	; 0x0c
    35b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    35b8:	fc 01       	movw	r30, r24
    35ba:	80 81       	ld	r24, Z
    35bc:	2f ef       	ldi	r18, 0xFF	; 255
    35be:	28 0f       	add	r18, r24
    35c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    35c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    35c4:	fc 01       	movw	r30, r24
    35c6:	20 83       	st	Z, r18
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	9a 81       	ldd	r25, Y+2	; 0x02
    35cc:	fc 01       	movw	r30, r24
    35ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    35d0:	80 91 89 1b 	lds	r24, 0x1B89	; 0x801b89 <uxTopReadyPriority>
    35d4:	89 17       	cp	r24, r25
    35d6:	30 f4       	brcc	.+12     	; 0x35e4 <xTaskResumeAll+0x182>
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	9a 81       	ldd	r25, Y+2	; 0x02
    35dc:	fc 01       	movw	r30, r24
    35de:	82 8d       	ldd	r24, Z+26	; 0x1a
    35e0:	80 93 89 1b 	sts	0x1B89, r24	; 0x801b89 <uxTopReadyPriority>
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	9a 81       	ldd	r25, Y+2	; 0x02
    35e8:	fc 01       	movw	r30, r24
    35ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ec:	28 2f       	mov	r18, r24
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	4b e0       	ldi	r20, 0x0B	; 11
    35f2:	42 9f       	mul	r20, r18
    35f4:	c0 01       	movw	r24, r0
    35f6:	43 9f       	mul	r20, r19
    35f8:	90 0d       	add	r25, r0
    35fa:	11 24       	eor	r1, r1
    35fc:	85 52       	subi	r24, 0x25	; 37
    35fe:	95 4e       	sbci	r25, 0xE5	; 229
    3600:	fc 01       	movw	r30, r24
    3602:	80 81       	ld	r24, Z
    3604:	91 81       	ldd	r25, Z+1	; 0x01
    3606:	9d 87       	std	Y+13, r25	; 0x0d
    3608:	8c 87       	std	Y+12, r24	; 0x0c
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	9a 81       	ldd	r25, Y+2	; 0x02
    360e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3610:	3d 85       	ldd	r19, Y+13	; 0x0d
    3612:	fc 01       	movw	r30, r24
    3614:	37 83       	std	Z+7, r19	; 0x07
    3616:	26 83       	std	Z+6, r18	; 0x06
    3618:	8c 85       	ldd	r24, Y+12	; 0x0c
    361a:	9d 85       	ldd	r25, Y+13	; 0x0d
    361c:	fc 01       	movw	r30, r24
    361e:	26 81       	ldd	r18, Z+6	; 0x06
    3620:	37 81       	ldd	r19, Z+7	; 0x07
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	9a 81       	ldd	r25, Y+2	; 0x02
    3626:	fc 01       	movw	r30, r24
    3628:	31 87       	std	Z+9, r19	; 0x09
    362a:	20 87       	std	Z+8, r18	; 0x08
    362c:	8c 85       	ldd	r24, Y+12	; 0x0c
    362e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3630:	fc 01       	movw	r30, r24
    3632:	86 81       	ldd	r24, Z+6	; 0x06
    3634:	97 81       	ldd	r25, Z+7	; 0x07
    3636:	29 81       	ldd	r18, Y+1	; 0x01
    3638:	3a 81       	ldd	r19, Y+2	; 0x02
    363a:	2e 5f       	subi	r18, 0xFE	; 254
    363c:	3f 4f       	sbci	r19, 0xFF	; 255
    363e:	fc 01       	movw	r30, r24
    3640:	35 83       	std	Z+5, r19	; 0x05
    3642:	24 83       	std	Z+4, r18	; 0x04
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	9a 81       	ldd	r25, Y+2	; 0x02
    3648:	9c 01       	movw	r18, r24
    364a:	2e 5f       	subi	r18, 0xFE	; 254
    364c:	3f 4f       	sbci	r19, 0xFF	; 255
    364e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3650:	9d 85       	ldd	r25, Y+13	; 0x0d
    3652:	fc 01       	movw	r30, r24
    3654:	37 83       	std	Z+7, r19	; 0x07
    3656:	26 83       	std	Z+6, r18	; 0x06
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	9a 81       	ldd	r25, Y+2	; 0x02
    365c:	fc 01       	movw	r30, r24
    365e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3660:	28 2f       	mov	r18, r24
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	4b e0       	ldi	r20, 0x0B	; 11
    3666:	42 9f       	mul	r20, r18
    3668:	c0 01       	movw	r24, r0
    366a:	43 9f       	mul	r20, r19
    366c:	90 0d       	add	r25, r0
    366e:	11 24       	eor	r1, r1
    3670:	9c 01       	movw	r18, r24
    3672:	26 52       	subi	r18, 0x26	; 38
    3674:	35 4e       	sbci	r19, 0xE5	; 229
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	9a 81       	ldd	r25, Y+2	; 0x02
    367a:	fc 01       	movw	r30, r24
    367c:	35 87       	std	Z+13, r19	; 0x0d
    367e:	24 87       	std	Z+12, r18	; 0x0c
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	9a 81       	ldd	r25, Y+2	; 0x02
    3684:	fc 01       	movw	r30, r24
    3686:	82 8d       	ldd	r24, Z+26	; 0x1a
    3688:	88 2f       	mov	r24, r24
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	4b e0       	ldi	r20, 0x0B	; 11
    368e:	48 9f       	mul	r20, r24
    3690:	90 01       	movw	r18, r0
    3692:	49 9f       	mul	r20, r25
    3694:	30 0d       	add	r19, r0
    3696:	11 24       	eor	r1, r1
    3698:	26 52       	subi	r18, 0x26	; 38
    369a:	35 4e       	sbci	r19, 0xE5	; 229
    369c:	f9 01       	movw	r30, r18
    369e:	20 81       	ld	r18, Z
    36a0:	41 e0       	ldi	r20, 0x01	; 1
    36a2:	42 0f       	add	r20, r18
    36a4:	5b e0       	ldi	r21, 0x0B	; 11
    36a6:	58 9f       	mul	r21, r24
    36a8:	90 01       	movw	r18, r0
    36aa:	59 9f       	mul	r21, r25
    36ac:	30 0d       	add	r19, r0
    36ae:	11 24       	eor	r1, r1
    36b0:	c9 01       	movw	r24, r18
    36b2:	86 52       	subi	r24, 0x26	; 38
    36b4:	95 4e       	sbci	r25, 0xE5	; 229
    36b6:	fc 01       	movw	r30, r24
    36b8:	40 83       	st	Z, r20
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	9a 81       	ldd	r25, Y+2	; 0x02
    36be:	fc 01       	movw	r30, r24
    36c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    36c2:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    36c6:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    36ca:	fc 01       	movw	r30, r24
    36cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    36ce:	28 17       	cp	r18, r24
    36d0:	18 f0       	brcs	.+6      	; 0x36d8 <xTaskResumeAll+0x276>
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	80 93 8f 1b 	sts	0x1B8F, r24	; 0x801b8f <xYieldPending>
    36d8:	80 91 62 1b 	lds	r24, 0x1B62	; 0x801b62 <xPendingReadyList>
    36dc:	88 23       	and	r24, r24
    36de:	09 f0       	breq	.+2      	; 0x36e2 <xTaskResumeAll+0x280>
    36e0:	e0 ce       	rjmp	.-576    	; 0x34a2 <xTaskResumeAll+0x40>
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	9a 81       	ldd	r25, Y+2	; 0x02
    36e6:	89 2b       	or	r24, r25
    36e8:	11 f0       	breq	.+4      	; 0x36ee <xTaskResumeAll+0x28c>
    36ea:	0e 94 cf 23 	call	0x479e	; 0x479e <prvResetNextTaskUnblockTime>
    36ee:	80 91 8b 1b 	lds	r24, 0x1B8B	; 0x801b8b <xPendedTicks>
    36f2:	90 91 8c 1b 	lds	r25, 0x1B8C	; 0x801b8c <xPendedTicks+0x1>
    36f6:	a0 91 8d 1b 	lds	r26, 0x1B8D	; 0x801b8d <xPendedTicks+0x2>
    36fa:	b0 91 8e 1b 	lds	r27, 0x1B8E	; 0x801b8e <xPendedTicks+0x3>
    36fe:	8c 83       	std	Y+4, r24	; 0x04
    3700:	9d 83       	std	Y+5, r25	; 0x05
    3702:	ae 83       	std	Y+6, r26	; 0x06
    3704:	bf 83       	std	Y+7, r27	; 0x07
    3706:	8c 81       	ldd	r24, Y+4	; 0x04
    3708:	9d 81       	ldd	r25, Y+5	; 0x05
    370a:	ae 81       	ldd	r26, Y+6	; 0x06
    370c:	bf 81       	ldd	r27, Y+7	; 0x07
    370e:	89 2b       	or	r24, r25
    3710:	8a 2b       	or	r24, r26
    3712:	8b 2b       	or	r24, r27
    3714:	09 f1       	breq	.+66     	; 0x3758 <xTaskResumeAll+0x2f6>
    3716:	58 d0       	rcall	.+176    	; 0x37c8 <xTaskIncrementTick>
    3718:	88 23       	and	r24, r24
    371a:	19 f0       	breq	.+6      	; 0x3722 <xTaskResumeAll+0x2c0>
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	80 93 8f 1b 	sts	0x1B8F, r24	; 0x801b8f <xYieldPending>
    3722:	8c 81       	ldd	r24, Y+4	; 0x04
    3724:	9d 81       	ldd	r25, Y+5	; 0x05
    3726:	ae 81       	ldd	r26, Y+6	; 0x06
    3728:	bf 81       	ldd	r27, Y+7	; 0x07
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	a1 09       	sbc	r26, r1
    372e:	b1 09       	sbc	r27, r1
    3730:	8c 83       	std	Y+4, r24	; 0x04
    3732:	9d 83       	std	Y+5, r25	; 0x05
    3734:	ae 83       	std	Y+6, r26	; 0x06
    3736:	bf 83       	std	Y+7, r27	; 0x07
    3738:	8c 81       	ldd	r24, Y+4	; 0x04
    373a:	9d 81       	ldd	r25, Y+5	; 0x05
    373c:	ae 81       	ldd	r26, Y+6	; 0x06
    373e:	bf 81       	ldd	r27, Y+7	; 0x07
    3740:	89 2b       	or	r24, r25
    3742:	8a 2b       	or	r24, r26
    3744:	8b 2b       	or	r24, r27
    3746:	39 f7       	brne	.-50     	; 0x3716 <xTaskResumeAll+0x2b4>
    3748:	10 92 8b 1b 	sts	0x1B8B, r1	; 0x801b8b <xPendedTicks>
    374c:	10 92 8c 1b 	sts	0x1B8C, r1	; 0x801b8c <xPendedTicks+0x1>
    3750:	10 92 8d 1b 	sts	0x1B8D, r1	; 0x801b8d <xPendedTicks+0x2>
    3754:	10 92 8e 1b 	sts	0x1B8E, r1	; 0x801b8e <xPendedTicks+0x3>
    3758:	80 91 8f 1b 	lds	r24, 0x1B8F	; 0x801b8f <xYieldPending>
    375c:	88 23       	and	r24, r24
    375e:	21 f0       	breq	.+8      	; 0x3768 <xTaskResumeAll+0x306>
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	8b 83       	std	Y+3, r24	; 0x03
    3764:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
    3768:	0f 90       	pop	r0
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	8b 81       	ldd	r24, Y+3	; 0x03
    376e:	2d 96       	adiw	r28, 0x0d	; 13
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	08 95       	ret

00003780 <xTaskGetTickCount>:
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	00 d0       	rcall	.+0      	; 0x3786 <xTaskGetTickCount+0x6>
    3786:	1f 92       	push	r1
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	0f 92       	push	r0
    3792:	80 91 85 1b 	lds	r24, 0x1B85	; 0x801b85 <xTickCount>
    3796:	90 91 86 1b 	lds	r25, 0x1B86	; 0x801b86 <xTickCount+0x1>
    379a:	a0 91 87 1b 	lds	r26, 0x1B87	; 0x801b87 <xTickCount+0x2>
    379e:	b0 91 88 1b 	lds	r27, 0x1B88	; 0x801b88 <xTickCount+0x3>
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	9a 83       	std	Y+2, r25	; 0x02
    37a6:	ab 83       	std	Y+3, r26	; 0x03
    37a8:	bc 83       	std	Y+4, r27	; 0x04
    37aa:	0f 90       	pop	r0
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	9a 81       	ldd	r25, Y+2	; 0x02
    37b2:	ab 81       	ldd	r26, Y+3	; 0x03
    37b4:	bc 81       	ldd	r27, Y+4	; 0x04
    37b6:	bc 01       	movw	r22, r24
    37b8:	cd 01       	movw	r24, r26
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	df 91       	pop	r29
    37c4:	cf 91       	pop	r28
    37c6:	08 95       	ret

000037c8 <xTaskIncrementTick>:
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	63 97       	sbiw	r28, 0x13	; 19
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	de bf       	out	0x3e, r29	; 62
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	19 82       	std	Y+1, r1	; 0x01
    37de:	80 91 98 1b 	lds	r24, 0x1B98	; 0x801b98 <uxSchedulerSuspended>
    37e2:	88 23       	and	r24, r24
    37e4:	09 f0       	breq	.+2      	; 0x37e8 <xTaskIncrementTick+0x20>
    37e6:	cc c1       	rjmp	.+920    	; 0x3b80 <xTaskIncrementTick+0x3b8>
    37e8:	80 91 85 1b 	lds	r24, 0x1B85	; 0x801b85 <xTickCount>
    37ec:	90 91 86 1b 	lds	r25, 0x1B86	; 0x801b86 <xTickCount+0x1>
    37f0:	a0 91 87 1b 	lds	r26, 0x1B87	; 0x801b87 <xTickCount+0x2>
    37f4:	b0 91 88 1b 	lds	r27, 0x1B88	; 0x801b88 <xTickCount+0x3>
    37f8:	01 96       	adiw	r24, 0x01	; 1
    37fa:	a1 1d       	adc	r26, r1
    37fc:	b1 1d       	adc	r27, r1
    37fe:	8a 83       	std	Y+2, r24	; 0x02
    3800:	9b 83       	std	Y+3, r25	; 0x03
    3802:	ac 83       	std	Y+4, r26	; 0x04
    3804:	bd 83       	std	Y+5, r27	; 0x05
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	9b 81       	ldd	r25, Y+3	; 0x03
    380a:	ac 81       	ldd	r26, Y+4	; 0x04
    380c:	bd 81       	ldd	r27, Y+5	; 0x05
    380e:	80 93 85 1b 	sts	0x1B85, r24	; 0x801b85 <xTickCount>
    3812:	90 93 86 1b 	sts	0x1B86, r25	; 0x801b86 <xTickCount+0x1>
    3816:	a0 93 87 1b 	sts	0x1B87, r26	; 0x801b87 <xTickCount+0x2>
    381a:	b0 93 88 1b 	sts	0x1B88, r27	; 0x801b88 <xTickCount+0x3>
    381e:	8a 81       	ldd	r24, Y+2	; 0x02
    3820:	9b 81       	ldd	r25, Y+3	; 0x03
    3822:	ac 81       	ldd	r26, Y+4	; 0x04
    3824:	bd 81       	ldd	r27, Y+5	; 0x05
    3826:	89 2b       	or	r24, r25
    3828:	8a 2b       	or	r24, r26
    382a:	8b 2b       	or	r24, r27
    382c:	d1 f4       	brne	.+52     	; 0x3862 <xTaskIncrementTick+0x9a>
    382e:	80 91 5e 1b 	lds	r24, 0x1B5E	; 0x801b5e <pxDelayedTaskList>
    3832:	90 91 5f 1b 	lds	r25, 0x1B5F	; 0x801b5f <pxDelayedTaskList+0x1>
    3836:	9f 83       	std	Y+7, r25	; 0x07
    3838:	8e 83       	std	Y+6, r24	; 0x06
    383a:	80 91 60 1b 	lds	r24, 0x1B60	; 0x801b60 <pxOverflowDelayedTaskList>
    383e:	90 91 61 1b 	lds	r25, 0x1B61	; 0x801b61 <pxOverflowDelayedTaskList+0x1>
    3842:	90 93 5f 1b 	sts	0x1B5F, r25	; 0x801b5f <pxDelayedTaskList+0x1>
    3846:	80 93 5e 1b 	sts	0x1B5E, r24	; 0x801b5e <pxDelayedTaskList>
    384a:	8e 81       	ldd	r24, Y+6	; 0x06
    384c:	9f 81       	ldd	r25, Y+7	; 0x07
    384e:	90 93 61 1b 	sts	0x1B61, r25	; 0x801b61 <pxOverflowDelayedTaskList+0x1>
    3852:	80 93 60 1b 	sts	0x1B60, r24	; 0x801b60 <pxOverflowDelayedTaskList>
    3856:	80 91 90 1b 	lds	r24, 0x1B90	; 0x801b90 <xNumOfOverflows>
    385a:	8f 5f       	subi	r24, 0xFF	; 255
    385c:	80 93 90 1b 	sts	0x1B90, r24	; 0x801b90 <xNumOfOverflows>
    3860:	9e d7       	rcall	.+3900   	; 0x479e <prvResetNextTaskUnblockTime>
    3862:	80 91 92 1b 	lds	r24, 0x1B92	; 0x801b92 <xNextTaskUnblockTime>
    3866:	90 91 93 1b 	lds	r25, 0x1B93	; 0x801b93 <xNextTaskUnblockTime+0x1>
    386a:	a0 91 94 1b 	lds	r26, 0x1B94	; 0x801b94 <xNextTaskUnblockTime+0x2>
    386e:	b0 91 95 1b 	lds	r27, 0x1B95	; 0x801b95 <xNextTaskUnblockTime+0x3>
    3872:	2a 81       	ldd	r18, Y+2	; 0x02
    3874:	3b 81       	ldd	r19, Y+3	; 0x03
    3876:	4c 81       	ldd	r20, Y+4	; 0x04
    3878:	5d 81       	ldd	r21, Y+5	; 0x05
    387a:	28 17       	cp	r18, r24
    387c:	39 07       	cpc	r19, r25
    387e:	4a 07       	cpc	r20, r26
    3880:	5b 07       	cpc	r21, r27
    3882:	08 f4       	brcc	.+2      	; 0x3886 <xTaskIncrementTick+0xbe>
    3884:	60 c1       	rjmp	.+704    	; 0x3b46 <xTaskIncrementTick+0x37e>
    3886:	80 91 5e 1b 	lds	r24, 0x1B5E	; 0x801b5e <pxDelayedTaskList>
    388a:	90 91 5f 1b 	lds	r25, 0x1B5F	; 0x801b5f <pxDelayedTaskList+0x1>
    388e:	fc 01       	movw	r30, r24
    3890:	80 81       	ld	r24, Z
    3892:	88 23       	and	r24, r24
    3894:	61 f4       	brne	.+24     	; 0x38ae <xTaskIncrementTick+0xe6>
    3896:	8f ef       	ldi	r24, 0xFF	; 255
    3898:	9f ef       	ldi	r25, 0xFF	; 255
    389a:	dc 01       	movw	r26, r24
    389c:	80 93 92 1b 	sts	0x1B92, r24	; 0x801b92 <xNextTaskUnblockTime>
    38a0:	90 93 93 1b 	sts	0x1B93, r25	; 0x801b93 <xNextTaskUnblockTime+0x1>
    38a4:	a0 93 94 1b 	sts	0x1B94, r26	; 0x801b94 <xNextTaskUnblockTime+0x2>
    38a8:	b0 93 95 1b 	sts	0x1B95, r27	; 0x801b95 <xNextTaskUnblockTime+0x3>
    38ac:	4c c1       	rjmp	.+664    	; 0x3b46 <xTaskIncrementTick+0x37e>
    38ae:	80 91 5e 1b 	lds	r24, 0x1B5E	; 0x801b5e <pxDelayedTaskList>
    38b2:	90 91 5f 1b 	lds	r25, 0x1B5F	; 0x801b5f <pxDelayedTaskList+0x1>
    38b6:	fc 01       	movw	r30, r24
    38b8:	87 81       	ldd	r24, Z+7	; 0x07
    38ba:	90 85       	ldd	r25, Z+8	; 0x08
    38bc:	fc 01       	movw	r30, r24
    38be:	80 85       	ldd	r24, Z+8	; 0x08
    38c0:	91 85       	ldd	r25, Z+9	; 0x09
    38c2:	99 87       	std	Y+9, r25	; 0x09
    38c4:	88 87       	std	Y+8, r24	; 0x08
    38c6:	88 85       	ldd	r24, Y+8	; 0x08
    38c8:	99 85       	ldd	r25, Y+9	; 0x09
    38ca:	fc 01       	movw	r30, r24
    38cc:	82 81       	ldd	r24, Z+2	; 0x02
    38ce:	93 81       	ldd	r25, Z+3	; 0x03
    38d0:	a4 81       	ldd	r26, Z+4	; 0x04
    38d2:	b5 81       	ldd	r27, Z+5	; 0x05
    38d4:	8a 87       	std	Y+10, r24	; 0x0a
    38d6:	9b 87       	std	Y+11, r25	; 0x0b
    38d8:	ac 87       	std	Y+12, r26	; 0x0c
    38da:	bd 87       	std	Y+13, r27	; 0x0d
    38dc:	2a 81       	ldd	r18, Y+2	; 0x02
    38de:	3b 81       	ldd	r19, Y+3	; 0x03
    38e0:	4c 81       	ldd	r20, Y+4	; 0x04
    38e2:	5d 81       	ldd	r21, Y+5	; 0x05
    38e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    38e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    38e8:	ac 85       	ldd	r26, Y+12	; 0x0c
    38ea:	bd 85       	ldd	r27, Y+13	; 0x0d
    38ec:	28 17       	cp	r18, r24
    38ee:	39 07       	cpc	r19, r25
    38f0:	4a 07       	cpc	r20, r26
    38f2:	5b 07       	cpc	r21, r27
    38f4:	68 f4       	brcc	.+26     	; 0x3910 <xTaskIncrementTick+0x148>
    38f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    38f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    38fa:	ac 85       	ldd	r26, Y+12	; 0x0c
    38fc:	bd 85       	ldd	r27, Y+13	; 0x0d
    38fe:	80 93 92 1b 	sts	0x1B92, r24	; 0x801b92 <xNextTaskUnblockTime>
    3902:	90 93 93 1b 	sts	0x1B93, r25	; 0x801b93 <xNextTaskUnblockTime+0x1>
    3906:	a0 93 94 1b 	sts	0x1B94, r26	; 0x801b94 <xNextTaskUnblockTime+0x2>
    390a:	b0 93 95 1b 	sts	0x1B95, r27	; 0x801b95 <xNextTaskUnblockTime+0x3>
    390e:	1b c1       	rjmp	.+566    	; 0x3b46 <xTaskIncrementTick+0x37e>
    3910:	88 85       	ldd	r24, Y+8	; 0x08
    3912:	99 85       	ldd	r25, Y+9	; 0x09
    3914:	fc 01       	movw	r30, r24
    3916:	84 85       	ldd	r24, Z+12	; 0x0c
    3918:	95 85       	ldd	r25, Z+13	; 0x0d
    391a:	9f 87       	std	Y+15, r25	; 0x0f
    391c:	8e 87       	std	Y+14, r24	; 0x0e
    391e:	88 85       	ldd	r24, Y+8	; 0x08
    3920:	99 85       	ldd	r25, Y+9	; 0x09
    3922:	fc 01       	movw	r30, r24
    3924:	86 81       	ldd	r24, Z+6	; 0x06
    3926:	97 81       	ldd	r25, Z+7	; 0x07
    3928:	28 85       	ldd	r18, Y+8	; 0x08
    392a:	39 85       	ldd	r19, Y+9	; 0x09
    392c:	f9 01       	movw	r30, r18
    392e:	20 85       	ldd	r18, Z+8	; 0x08
    3930:	31 85       	ldd	r19, Z+9	; 0x09
    3932:	fc 01       	movw	r30, r24
    3934:	37 83       	std	Z+7, r19	; 0x07
    3936:	26 83       	std	Z+6, r18	; 0x06
    3938:	88 85       	ldd	r24, Y+8	; 0x08
    393a:	99 85       	ldd	r25, Y+9	; 0x09
    393c:	fc 01       	movw	r30, r24
    393e:	80 85       	ldd	r24, Z+8	; 0x08
    3940:	91 85       	ldd	r25, Z+9	; 0x09
    3942:	28 85       	ldd	r18, Y+8	; 0x08
    3944:	39 85       	ldd	r19, Y+9	; 0x09
    3946:	f9 01       	movw	r30, r18
    3948:	26 81       	ldd	r18, Z+6	; 0x06
    394a:	37 81       	ldd	r19, Z+7	; 0x07
    394c:	fc 01       	movw	r30, r24
    394e:	35 83       	std	Z+5, r19	; 0x05
    3950:	24 83       	std	Z+4, r18	; 0x04
    3952:	8e 85       	ldd	r24, Y+14	; 0x0e
    3954:	9f 85       	ldd	r25, Y+15	; 0x0f
    3956:	fc 01       	movw	r30, r24
    3958:	21 81       	ldd	r18, Z+1	; 0x01
    395a:	32 81       	ldd	r19, Z+2	; 0x02
    395c:	88 85       	ldd	r24, Y+8	; 0x08
    395e:	99 85       	ldd	r25, Y+9	; 0x09
    3960:	02 96       	adiw	r24, 0x02	; 2
    3962:	28 17       	cp	r18, r24
    3964:	39 07       	cpc	r19, r25
    3966:	51 f4       	brne	.+20     	; 0x397c <xTaskIncrementTick+0x1b4>
    3968:	88 85       	ldd	r24, Y+8	; 0x08
    396a:	99 85       	ldd	r25, Y+9	; 0x09
    396c:	fc 01       	movw	r30, r24
    396e:	20 85       	ldd	r18, Z+8	; 0x08
    3970:	31 85       	ldd	r19, Z+9	; 0x09
    3972:	8e 85       	ldd	r24, Y+14	; 0x0e
    3974:	9f 85       	ldd	r25, Y+15	; 0x0f
    3976:	fc 01       	movw	r30, r24
    3978:	32 83       	std	Z+2, r19	; 0x02
    397a:	21 83       	std	Z+1, r18	; 0x01
    397c:	88 85       	ldd	r24, Y+8	; 0x08
    397e:	99 85       	ldd	r25, Y+9	; 0x09
    3980:	fc 01       	movw	r30, r24
    3982:	15 86       	std	Z+13, r1	; 0x0d
    3984:	14 86       	std	Z+12, r1	; 0x0c
    3986:	8e 85       	ldd	r24, Y+14	; 0x0e
    3988:	9f 85       	ldd	r25, Y+15	; 0x0f
    398a:	fc 01       	movw	r30, r24
    398c:	80 81       	ld	r24, Z
    398e:	2f ef       	ldi	r18, 0xFF	; 255
    3990:	28 0f       	add	r18, r24
    3992:	8e 85       	ldd	r24, Y+14	; 0x0e
    3994:	9f 85       	ldd	r25, Y+15	; 0x0f
    3996:	fc 01       	movw	r30, r24
    3998:	20 83       	st	Z, r18
    399a:	88 85       	ldd	r24, Y+8	; 0x08
    399c:	99 85       	ldd	r25, Y+9	; 0x09
    399e:	fc 01       	movw	r30, r24
    39a0:	80 8d       	ldd	r24, Z+24	; 0x18
    39a2:	91 8d       	ldd	r25, Z+25	; 0x19
    39a4:	89 2b       	or	r24, r25
    39a6:	09 f4       	brne	.+2      	; 0x39aa <xTaskIncrementTick+0x1e2>
    39a8:	45 c0       	rjmp	.+138    	; 0x3a34 <xTaskIncrementTick+0x26c>
    39aa:	88 85       	ldd	r24, Y+8	; 0x08
    39ac:	99 85       	ldd	r25, Y+9	; 0x09
    39ae:	fc 01       	movw	r30, r24
    39b0:	80 8d       	ldd	r24, Z+24	; 0x18
    39b2:	91 8d       	ldd	r25, Z+25	; 0x19
    39b4:	99 8b       	std	Y+17, r25	; 0x11
    39b6:	88 8b       	std	Y+16, r24	; 0x10
    39b8:	88 85       	ldd	r24, Y+8	; 0x08
    39ba:	99 85       	ldd	r25, Y+9	; 0x09
    39bc:	fc 01       	movw	r30, r24
    39be:	82 89       	ldd	r24, Z+18	; 0x12
    39c0:	93 89       	ldd	r25, Z+19	; 0x13
    39c2:	28 85       	ldd	r18, Y+8	; 0x08
    39c4:	39 85       	ldd	r19, Y+9	; 0x09
    39c6:	f9 01       	movw	r30, r18
    39c8:	24 89       	ldd	r18, Z+20	; 0x14
    39ca:	35 89       	ldd	r19, Z+21	; 0x15
    39cc:	fc 01       	movw	r30, r24
    39ce:	37 83       	std	Z+7, r19	; 0x07
    39d0:	26 83       	std	Z+6, r18	; 0x06
    39d2:	88 85       	ldd	r24, Y+8	; 0x08
    39d4:	99 85       	ldd	r25, Y+9	; 0x09
    39d6:	fc 01       	movw	r30, r24
    39d8:	84 89       	ldd	r24, Z+20	; 0x14
    39da:	95 89       	ldd	r25, Z+21	; 0x15
    39dc:	28 85       	ldd	r18, Y+8	; 0x08
    39de:	39 85       	ldd	r19, Y+9	; 0x09
    39e0:	f9 01       	movw	r30, r18
    39e2:	22 89       	ldd	r18, Z+18	; 0x12
    39e4:	33 89       	ldd	r19, Z+19	; 0x13
    39e6:	fc 01       	movw	r30, r24
    39e8:	35 83       	std	Z+5, r19	; 0x05
    39ea:	24 83       	std	Z+4, r18	; 0x04
    39ec:	88 89       	ldd	r24, Y+16	; 0x10
    39ee:	99 89       	ldd	r25, Y+17	; 0x11
    39f0:	fc 01       	movw	r30, r24
    39f2:	21 81       	ldd	r18, Z+1	; 0x01
    39f4:	32 81       	ldd	r19, Z+2	; 0x02
    39f6:	88 85       	ldd	r24, Y+8	; 0x08
    39f8:	99 85       	ldd	r25, Y+9	; 0x09
    39fa:	0e 96       	adiw	r24, 0x0e	; 14
    39fc:	28 17       	cp	r18, r24
    39fe:	39 07       	cpc	r19, r25
    3a00:	51 f4       	brne	.+20     	; 0x3a16 <xTaskIncrementTick+0x24e>
    3a02:	88 85       	ldd	r24, Y+8	; 0x08
    3a04:	99 85       	ldd	r25, Y+9	; 0x09
    3a06:	fc 01       	movw	r30, r24
    3a08:	24 89       	ldd	r18, Z+20	; 0x14
    3a0a:	35 89       	ldd	r19, Z+21	; 0x15
    3a0c:	88 89       	ldd	r24, Y+16	; 0x10
    3a0e:	99 89       	ldd	r25, Y+17	; 0x11
    3a10:	fc 01       	movw	r30, r24
    3a12:	32 83       	std	Z+2, r19	; 0x02
    3a14:	21 83       	std	Z+1, r18	; 0x01
    3a16:	88 85       	ldd	r24, Y+8	; 0x08
    3a18:	99 85       	ldd	r25, Y+9	; 0x09
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	11 8e       	std	Z+25, r1	; 0x19
    3a1e:	10 8e       	std	Z+24, r1	; 0x18
    3a20:	88 89       	ldd	r24, Y+16	; 0x10
    3a22:	99 89       	ldd	r25, Y+17	; 0x11
    3a24:	fc 01       	movw	r30, r24
    3a26:	80 81       	ld	r24, Z
    3a28:	2f ef       	ldi	r18, 0xFF	; 255
    3a2a:	28 0f       	add	r18, r24
    3a2c:	88 89       	ldd	r24, Y+16	; 0x10
    3a2e:	99 89       	ldd	r25, Y+17	; 0x11
    3a30:	fc 01       	movw	r30, r24
    3a32:	20 83       	st	Z, r18
    3a34:	88 85       	ldd	r24, Y+8	; 0x08
    3a36:	99 85       	ldd	r25, Y+9	; 0x09
    3a38:	fc 01       	movw	r30, r24
    3a3a:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a3c:	80 91 89 1b 	lds	r24, 0x1B89	; 0x801b89 <uxTopReadyPriority>
    3a40:	89 17       	cp	r24, r25
    3a42:	30 f4       	brcc	.+12     	; 0x3a50 <xTaskIncrementTick+0x288>
    3a44:	88 85       	ldd	r24, Y+8	; 0x08
    3a46:	99 85       	ldd	r25, Y+9	; 0x09
    3a48:	fc 01       	movw	r30, r24
    3a4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a4c:	80 93 89 1b 	sts	0x1B89, r24	; 0x801b89 <uxTopReadyPriority>
    3a50:	88 85       	ldd	r24, Y+8	; 0x08
    3a52:	99 85       	ldd	r25, Y+9	; 0x09
    3a54:	fc 01       	movw	r30, r24
    3a56:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a58:	28 2f       	mov	r18, r24
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	4b e0       	ldi	r20, 0x0B	; 11
    3a5e:	42 9f       	mul	r20, r18
    3a60:	c0 01       	movw	r24, r0
    3a62:	43 9f       	mul	r20, r19
    3a64:	90 0d       	add	r25, r0
    3a66:	11 24       	eor	r1, r1
    3a68:	85 52       	subi	r24, 0x25	; 37
    3a6a:	95 4e       	sbci	r25, 0xE5	; 229
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	80 81       	ld	r24, Z
    3a70:	91 81       	ldd	r25, Z+1	; 0x01
    3a72:	9b 8b       	std	Y+19, r25	; 0x13
    3a74:	8a 8b       	std	Y+18, r24	; 0x12
    3a76:	88 85       	ldd	r24, Y+8	; 0x08
    3a78:	99 85       	ldd	r25, Y+9	; 0x09
    3a7a:	2a 89       	ldd	r18, Y+18	; 0x12
    3a7c:	3b 89       	ldd	r19, Y+19	; 0x13
    3a7e:	fc 01       	movw	r30, r24
    3a80:	37 83       	std	Z+7, r19	; 0x07
    3a82:	26 83       	std	Z+6, r18	; 0x06
    3a84:	8a 89       	ldd	r24, Y+18	; 0x12
    3a86:	9b 89       	ldd	r25, Y+19	; 0x13
    3a88:	fc 01       	movw	r30, r24
    3a8a:	26 81       	ldd	r18, Z+6	; 0x06
    3a8c:	37 81       	ldd	r19, Z+7	; 0x07
    3a8e:	88 85       	ldd	r24, Y+8	; 0x08
    3a90:	99 85       	ldd	r25, Y+9	; 0x09
    3a92:	fc 01       	movw	r30, r24
    3a94:	31 87       	std	Z+9, r19	; 0x09
    3a96:	20 87       	std	Z+8, r18	; 0x08
    3a98:	8a 89       	ldd	r24, Y+18	; 0x12
    3a9a:	9b 89       	ldd	r25, Y+19	; 0x13
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	86 81       	ldd	r24, Z+6	; 0x06
    3aa0:	97 81       	ldd	r25, Z+7	; 0x07
    3aa2:	28 85       	ldd	r18, Y+8	; 0x08
    3aa4:	39 85       	ldd	r19, Y+9	; 0x09
    3aa6:	2e 5f       	subi	r18, 0xFE	; 254
    3aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aaa:	fc 01       	movw	r30, r24
    3aac:	35 83       	std	Z+5, r19	; 0x05
    3aae:	24 83       	std	Z+4, r18	; 0x04
    3ab0:	88 85       	ldd	r24, Y+8	; 0x08
    3ab2:	99 85       	ldd	r25, Y+9	; 0x09
    3ab4:	9c 01       	movw	r18, r24
    3ab6:	2e 5f       	subi	r18, 0xFE	; 254
    3ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aba:	8a 89       	ldd	r24, Y+18	; 0x12
    3abc:	9b 89       	ldd	r25, Y+19	; 0x13
    3abe:	fc 01       	movw	r30, r24
    3ac0:	37 83       	std	Z+7, r19	; 0x07
    3ac2:	26 83       	std	Z+6, r18	; 0x06
    3ac4:	88 85       	ldd	r24, Y+8	; 0x08
    3ac6:	99 85       	ldd	r25, Y+9	; 0x09
    3ac8:	fc 01       	movw	r30, r24
    3aca:	82 8d       	ldd	r24, Z+26	; 0x1a
    3acc:	28 2f       	mov	r18, r24
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	4b e0       	ldi	r20, 0x0B	; 11
    3ad2:	42 9f       	mul	r20, r18
    3ad4:	c0 01       	movw	r24, r0
    3ad6:	43 9f       	mul	r20, r19
    3ad8:	90 0d       	add	r25, r0
    3ada:	11 24       	eor	r1, r1
    3adc:	9c 01       	movw	r18, r24
    3ade:	26 52       	subi	r18, 0x26	; 38
    3ae0:	35 4e       	sbci	r19, 0xE5	; 229
    3ae2:	88 85       	ldd	r24, Y+8	; 0x08
    3ae4:	99 85       	ldd	r25, Y+9	; 0x09
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	35 87       	std	Z+13, r19	; 0x0d
    3aea:	24 87       	std	Z+12, r18	; 0x0c
    3aec:	88 85       	ldd	r24, Y+8	; 0x08
    3aee:	99 85       	ldd	r25, Y+9	; 0x09
    3af0:	fc 01       	movw	r30, r24
    3af2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3af4:	88 2f       	mov	r24, r24
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	4b e0       	ldi	r20, 0x0B	; 11
    3afa:	48 9f       	mul	r20, r24
    3afc:	90 01       	movw	r18, r0
    3afe:	49 9f       	mul	r20, r25
    3b00:	30 0d       	add	r19, r0
    3b02:	11 24       	eor	r1, r1
    3b04:	26 52       	subi	r18, 0x26	; 38
    3b06:	35 4e       	sbci	r19, 0xE5	; 229
    3b08:	f9 01       	movw	r30, r18
    3b0a:	20 81       	ld	r18, Z
    3b0c:	41 e0       	ldi	r20, 0x01	; 1
    3b0e:	42 0f       	add	r20, r18
    3b10:	5b e0       	ldi	r21, 0x0B	; 11
    3b12:	58 9f       	mul	r21, r24
    3b14:	90 01       	movw	r18, r0
    3b16:	59 9f       	mul	r21, r25
    3b18:	30 0d       	add	r19, r0
    3b1a:	11 24       	eor	r1, r1
    3b1c:	c9 01       	movw	r24, r18
    3b1e:	86 52       	subi	r24, 0x26	; 38
    3b20:	95 4e       	sbci	r25, 0xE5	; 229
    3b22:	fc 01       	movw	r30, r24
    3b24:	40 83       	st	Z, r20
    3b26:	88 85       	ldd	r24, Y+8	; 0x08
    3b28:	99 85       	ldd	r25, Y+9	; 0x09
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	22 8d       	ldd	r18, Z+26	; 0x1a
    3b2e:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3b32:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3b36:	fc 01       	movw	r30, r24
    3b38:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b3a:	28 17       	cp	r18, r24
    3b3c:	08 f4       	brcc	.+2      	; 0x3b40 <xTaskIncrementTick+0x378>
    3b3e:	a3 ce       	rjmp	.-698    	; 0x3886 <xTaskIncrementTick+0xbe>
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	89 83       	std	Y+1, r24	; 0x01
    3b44:	a0 ce       	rjmp	.-704    	; 0x3886 <xTaskIncrementTick+0xbe>
    3b46:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3b4a:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3b4e:	fc 01       	movw	r30, r24
    3b50:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b52:	28 2f       	mov	r18, r24
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	4b e0       	ldi	r20, 0x0B	; 11
    3b58:	42 9f       	mul	r20, r18
    3b5a:	c0 01       	movw	r24, r0
    3b5c:	43 9f       	mul	r20, r19
    3b5e:	90 0d       	add	r25, r0
    3b60:	11 24       	eor	r1, r1
    3b62:	86 52       	subi	r24, 0x26	; 38
    3b64:	95 4e       	sbci	r25, 0xE5	; 229
    3b66:	fc 01       	movw	r30, r24
    3b68:	80 81       	ld	r24, Z
    3b6a:	82 30       	cpi	r24, 0x02	; 2
    3b6c:	10 f0       	brcs	.+4      	; 0x3b72 <xTaskIncrementTick+0x3aa>
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	89 83       	std	Y+1, r24	; 0x01
    3b72:	80 91 8f 1b 	lds	r24, 0x1B8F	; 0x801b8f <xYieldPending>
    3b76:	88 23       	and	r24, r24
    3b78:	b1 f0       	breq	.+44     	; 0x3ba6 <xTaskIncrementTick+0x3de>
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	89 83       	std	Y+1, r24	; 0x01
    3b7e:	13 c0       	rjmp	.+38     	; 0x3ba6 <xTaskIncrementTick+0x3de>
    3b80:	80 91 8b 1b 	lds	r24, 0x1B8B	; 0x801b8b <xPendedTicks>
    3b84:	90 91 8c 1b 	lds	r25, 0x1B8C	; 0x801b8c <xPendedTicks+0x1>
    3b88:	a0 91 8d 1b 	lds	r26, 0x1B8D	; 0x801b8d <xPendedTicks+0x2>
    3b8c:	b0 91 8e 1b 	lds	r27, 0x1B8E	; 0x801b8e <xPendedTicks+0x3>
    3b90:	01 96       	adiw	r24, 0x01	; 1
    3b92:	a1 1d       	adc	r26, r1
    3b94:	b1 1d       	adc	r27, r1
    3b96:	80 93 8b 1b 	sts	0x1B8B, r24	; 0x801b8b <xPendedTicks>
    3b9a:	90 93 8c 1b 	sts	0x1B8C, r25	; 0x801b8c <xPendedTicks+0x1>
    3b9e:	a0 93 8d 1b 	sts	0x1B8D, r26	; 0x801b8d <xPendedTicks+0x2>
    3ba2:	b0 93 8e 1b 	sts	0x1B8E, r27	; 0x801b8e <xPendedTicks+0x3>
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	63 96       	adiw	r28, 0x13	; 19
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	08 95       	ret

00003bba <vTaskSwitchContext>:
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	00 d0       	rcall	.+0      	; 0x3bc0 <vTaskSwitchContext+0x6>
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	80 91 98 1b 	lds	r24, 0x1B98	; 0x801b98 <uxSchedulerSuspended>
    3bc8:	88 23       	and	r24, r24
    3bca:	21 f0       	breq	.+8      	; 0x3bd4 <vTaskSwitchContext+0x1a>
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	80 93 8f 1b 	sts	0x1B8F, r24	; 0x801b8f <xYieldPending>
    3bd2:	78 c0       	rjmp	.+240    	; 0x3cc4 <vTaskSwitchContext+0x10a>
    3bd4:	10 92 8f 1b 	sts	0x1B8F, r1	; 0x801b8f <xYieldPending>
    3bd8:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3bdc:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3be0:	fc 01       	movw	r30, r24
    3be2:	20 81       	ld	r18, Z
    3be4:	31 81       	ldd	r19, Z+1	; 0x01
    3be6:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3bea:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3bee:	fc 01       	movw	r30, r24
    3bf0:	83 8d       	ldd	r24, Z+27	; 0x1b
    3bf2:	94 8d       	ldd	r25, Z+28	; 0x1c
    3bf4:	82 17       	cp	r24, r18
    3bf6:	93 07       	cpc	r25, r19
    3bf8:	70 f0       	brcs	.+28     	; 0x3c16 <vTaskSwitchContext+0x5c>
    3bfa:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3bfe:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3c02:	9c 01       	movw	r18, r24
    3c04:	23 5e       	subi	r18, 0xE3	; 227
    3c06:	3f 4f       	sbci	r19, 0xFF	; 255
    3c08:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3c0c:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3c10:	b9 01       	movw	r22, r18
    3c12:	0e 94 03 31 	call	0x6206	; 0x6206 <vApplicationStackOverflowHook>
    3c16:	80 91 89 1b 	lds	r24, 0x1B89	; 0x801b89 <uxTopReadyPriority>
    3c1a:	89 83       	std	Y+1, r24	; 0x01
    3c1c:	03 c0       	rjmp	.+6      	; 0x3c24 <vTaskSwitchContext+0x6a>
    3c1e:	89 81       	ldd	r24, Y+1	; 0x01
    3c20:	81 50       	subi	r24, 0x01	; 1
    3c22:	89 83       	std	Y+1, r24	; 0x01
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	28 2f       	mov	r18, r24
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	4b e0       	ldi	r20, 0x0B	; 11
    3c2c:	42 9f       	mul	r20, r18
    3c2e:	c0 01       	movw	r24, r0
    3c30:	43 9f       	mul	r20, r19
    3c32:	90 0d       	add	r25, r0
    3c34:	11 24       	eor	r1, r1
    3c36:	86 52       	subi	r24, 0x26	; 38
    3c38:	95 4e       	sbci	r25, 0xE5	; 229
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	80 81       	ld	r24, Z
    3c3e:	88 23       	and	r24, r24
    3c40:	71 f3       	breq	.-36     	; 0x3c1e <vTaskSwitchContext+0x64>
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	28 2f       	mov	r18, r24
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4b e0       	ldi	r20, 0x0B	; 11
    3c4a:	42 9f       	mul	r20, r18
    3c4c:	c0 01       	movw	r24, r0
    3c4e:	43 9f       	mul	r20, r19
    3c50:	90 0d       	add	r25, r0
    3c52:	11 24       	eor	r1, r1
    3c54:	86 52       	subi	r24, 0x26	; 38
    3c56:	95 4e       	sbci	r25, 0xE5	; 229
    3c58:	9b 83       	std	Y+3, r25	; 0x03
    3c5a:	8a 83       	std	Y+2, r24	; 0x02
    3c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c60:	fc 01       	movw	r30, r24
    3c62:	81 81       	ldd	r24, Z+1	; 0x01
    3c64:	92 81       	ldd	r25, Z+2	; 0x02
    3c66:	fc 01       	movw	r30, r24
    3c68:	24 81       	ldd	r18, Z+4	; 0x04
    3c6a:	35 81       	ldd	r19, Z+5	; 0x05
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c70:	fc 01       	movw	r30, r24
    3c72:	32 83       	std	Z+2, r19	; 0x02
    3c74:	21 83       	std	Z+1, r18	; 0x01
    3c76:	8a 81       	ldd	r24, Y+2	; 0x02
    3c78:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7a:	fc 01       	movw	r30, r24
    3c7c:	21 81       	ldd	r18, Z+1	; 0x01
    3c7e:	32 81       	ldd	r19, Z+2	; 0x02
    3c80:	8a 81       	ldd	r24, Y+2	; 0x02
    3c82:	9b 81       	ldd	r25, Y+3	; 0x03
    3c84:	03 96       	adiw	r24, 0x03	; 3
    3c86:	28 17       	cp	r18, r24
    3c88:	39 07       	cpc	r19, r25
    3c8a:	69 f4       	brne	.+26     	; 0x3ca6 <vTaskSwitchContext+0xec>
    3c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c90:	fc 01       	movw	r30, r24
    3c92:	81 81       	ldd	r24, Z+1	; 0x01
    3c94:	92 81       	ldd	r25, Z+2	; 0x02
    3c96:	fc 01       	movw	r30, r24
    3c98:	24 81       	ldd	r18, Z+4	; 0x04
    3c9a:	35 81       	ldd	r19, Z+5	; 0x05
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	32 83       	std	Z+2, r19	; 0x02
    3ca4:	21 83       	std	Z+1, r18	; 0x01
    3ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    3caa:	fc 01       	movw	r30, r24
    3cac:	81 81       	ldd	r24, Z+1	; 0x01
    3cae:	92 81       	ldd	r25, Z+2	; 0x02
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	80 85       	ldd	r24, Z+8	; 0x08
    3cb4:	91 85       	ldd	r25, Z+9	; 0x09
    3cb6:	90 93 d9 1a 	sts	0x1AD9, r25	; 0x801ad9 <pxCurrentTCB+0x1>
    3cba:	80 93 d8 1a 	sts	0x1AD8, r24	; 0x801ad8 <pxCurrentTCB>
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	80 93 89 1b 	sts	0x1B89, r24	; 0x801b89 <uxTopReadyPriority>
    3cc4:	00 00       	nop
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	df 91       	pop	r29
    3cce:	cf 91       	pop	r28
    3cd0:	08 95       	ret

00003cd2 <vTaskPlaceOnEventList>:
    3cd2:	cf 93       	push	r28
    3cd4:	df 93       	push	r29
    3cd6:	00 d0       	rcall	.+0      	; 0x3cd8 <vTaskPlaceOnEventList+0x6>
    3cd8:	00 d0       	rcall	.+0      	; 0x3cda <vTaskPlaceOnEventList+0x8>
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	9a 83       	std	Y+2, r25	; 0x02
    3ce0:	89 83       	std	Y+1, r24	; 0x01
    3ce2:	4b 83       	std	Y+3, r20	; 0x03
    3ce4:	5c 83       	std	Y+4, r21	; 0x04
    3ce6:	6d 83       	std	Y+5, r22	; 0x05
    3ce8:	7e 83       	std	Y+6, r23	; 0x06
    3cea:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3cee:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3cf2:	9c 01       	movw	r18, r24
    3cf4:	22 5f       	subi	r18, 0xF2	; 242
    3cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfc:	b9 01       	movw	r22, r18
    3cfe:	0e 94 81 09 	call	0x1302	; 0x1302 <vListInsert>
    3d02:	8b 81       	ldd	r24, Y+3	; 0x03
    3d04:	9c 81       	ldd	r25, Y+4	; 0x04
    3d06:	ad 81       	ldd	r26, Y+5	; 0x05
    3d08:	be 81       	ldd	r27, Y+6	; 0x06
    3d0a:	41 e0       	ldi	r20, 0x01	; 1
    3d0c:	bc 01       	movw	r22, r24
    3d0e:	cd 01       	movw	r24, r26
    3d10:	0e 94 8c 2a 	call	0x5518	; 0x5518 <prvAddCurrentTaskToDelayedList>
    3d14:	00 00       	nop
    3d16:	26 96       	adiw	r28, 0x06	; 6
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	0f be       	out	0x3f, r0	; 63
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	df 91       	pop	r29
    3d24:	cf 91       	pop	r28
    3d26:	08 95       	ret

00003d28 <vTaskPlaceOnUnorderedEventList>:
    3d28:	0f 93       	push	r16
    3d2a:	1f 93       	push	r17
    3d2c:	cf 93       	push	r28
    3d2e:	df 93       	push	r29
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
    3d34:	2c 97       	sbiw	r28, 0x0c	; 12
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	f8 94       	cli
    3d3a:	de bf       	out	0x3e, r29	; 62
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	cd bf       	out	0x3d, r28	; 61
    3d40:	9c 83       	std	Y+4, r25	; 0x04
    3d42:	8b 83       	std	Y+3, r24	; 0x03
    3d44:	4d 83       	std	Y+5, r20	; 0x05
    3d46:	5e 83       	std	Y+6, r21	; 0x06
    3d48:	6f 83       	std	Y+7, r22	; 0x07
    3d4a:	78 87       	std	Y+8, r23	; 0x08
    3d4c:	09 87       	std	Y+9, r16	; 0x09
    3d4e:	1a 87       	std	Y+10, r17	; 0x0a
    3d50:	2b 87       	std	Y+11, r18	; 0x0b
    3d52:	3c 87       	std	Y+12, r19	; 0x0c
    3d54:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3d58:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d60:	af 81       	ldd	r26, Y+7	; 0x07
    3d62:	b8 85       	ldd	r27, Y+8	; 0x08
    3d64:	b0 68       	ori	r27, 0x80	; 128
    3d66:	f9 01       	movw	r30, r18
    3d68:	86 87       	std	Z+14, r24	; 0x0e
    3d6a:	97 87       	std	Z+15, r25	; 0x0f
    3d6c:	a0 8b       	std	Z+16, r26	; 0x10
    3d6e:	b1 8b       	std	Z+17, r27	; 0x11
    3d70:	8b 81       	ldd	r24, Y+3	; 0x03
    3d72:	9c 81       	ldd	r25, Y+4	; 0x04
    3d74:	fc 01       	movw	r30, r24
    3d76:	81 81       	ldd	r24, Z+1	; 0x01
    3d78:	92 81       	ldd	r25, Z+2	; 0x02
    3d7a:	9a 83       	std	Y+2, r25	; 0x02
    3d7c:	89 83       	std	Y+1, r24	; 0x01
    3d7e:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3d82:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3d86:	29 81       	ldd	r18, Y+1	; 0x01
    3d88:	3a 81       	ldd	r19, Y+2	; 0x02
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	33 8b       	std	Z+19, r19	; 0x13
    3d8e:	22 8b       	std	Z+18, r18	; 0x12
    3d90:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3d94:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3d98:	29 81       	ldd	r18, Y+1	; 0x01
    3d9a:	3a 81       	ldd	r19, Y+2	; 0x02
    3d9c:	f9 01       	movw	r30, r18
    3d9e:	26 81       	ldd	r18, Z+6	; 0x06
    3da0:	37 81       	ldd	r19, Z+7	; 0x07
    3da2:	fc 01       	movw	r30, r24
    3da4:	35 8b       	std	Z+21, r19	; 0x15
    3da6:	24 8b       	std	Z+20, r18	; 0x14
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dac:	fc 01       	movw	r30, r24
    3dae:	86 81       	ldd	r24, Z+6	; 0x06
    3db0:	97 81       	ldd	r25, Z+7	; 0x07
    3db2:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3db6:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3dba:	22 5f       	subi	r18, 0xF2	; 242
    3dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	35 83       	std	Z+5, r19	; 0x05
    3dc2:	24 83       	std	Z+4, r18	; 0x04
    3dc4:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3dc8:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3dcc:	9c 01       	movw	r18, r24
    3dce:	22 5f       	subi	r18, 0xF2	; 242
    3dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd6:	fc 01       	movw	r30, r24
    3dd8:	37 83       	std	Z+7, r19	; 0x07
    3dda:	26 83       	std	Z+6, r18	; 0x06
    3ddc:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3de0:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3de4:	2b 81       	ldd	r18, Y+3	; 0x03
    3de6:	3c 81       	ldd	r19, Y+4	; 0x04
    3de8:	fc 01       	movw	r30, r24
    3dea:	31 8f       	std	Z+25, r19	; 0x19
    3dec:	20 8f       	std	Z+24, r18	; 0x18
    3dee:	8b 81       	ldd	r24, Y+3	; 0x03
    3df0:	9c 81       	ldd	r25, Y+4	; 0x04
    3df2:	fc 01       	movw	r30, r24
    3df4:	80 81       	ld	r24, Z
    3df6:	21 e0       	ldi	r18, 0x01	; 1
    3df8:	28 0f       	add	r18, r24
    3dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfe:	fc 01       	movw	r30, r24
    3e00:	20 83       	st	Z, r18
    3e02:	89 85       	ldd	r24, Y+9	; 0x09
    3e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e06:	ab 85       	ldd	r26, Y+11	; 0x0b
    3e08:	bc 85       	ldd	r27, Y+12	; 0x0c
    3e0a:	41 e0       	ldi	r20, 0x01	; 1
    3e0c:	bc 01       	movw	r22, r24
    3e0e:	cd 01       	movw	r24, r26
    3e10:	0e 94 8c 2a 	call	0x5518	; 0x5518 <prvAddCurrentTaskToDelayedList>
    3e14:	00 00       	nop
    3e16:	2c 96       	adiw	r28, 0x0c	; 12
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	de bf       	out	0x3e, r29	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	df 91       	pop	r29
    3e24:	cf 91       	pop	r28
    3e26:	1f 91       	pop	r17
    3e28:	0f 91       	pop	r16
    3e2a:	08 95       	ret

00003e2c <vTaskPlaceOnEventListRestricted>:
    3e2c:	cf 93       	push	r28
    3e2e:	df 93       	push	r29
    3e30:	cd b7       	in	r28, 0x3d	; 61
    3e32:	de b7       	in	r29, 0x3e	; 62
    3e34:	29 97       	sbiw	r28, 0x09	; 9
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	f8 94       	cli
    3e3a:	de bf       	out	0x3e, r29	; 62
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	cd bf       	out	0x3d, r28	; 61
    3e40:	9c 83       	std	Y+4, r25	; 0x04
    3e42:	8b 83       	std	Y+3, r24	; 0x03
    3e44:	4d 83       	std	Y+5, r20	; 0x05
    3e46:	5e 83       	std	Y+6, r21	; 0x06
    3e48:	6f 83       	std	Y+7, r22	; 0x07
    3e4a:	78 87       	std	Y+8, r23	; 0x08
    3e4c:	29 87       	std	Y+9, r18	; 0x09
    3e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e50:	9c 81       	ldd	r25, Y+4	; 0x04
    3e52:	fc 01       	movw	r30, r24
    3e54:	81 81       	ldd	r24, Z+1	; 0x01
    3e56:	92 81       	ldd	r25, Z+2	; 0x02
    3e58:	9a 83       	std	Y+2, r25	; 0x02
    3e5a:	89 83       	std	Y+1, r24	; 0x01
    3e5c:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3e60:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3e64:	29 81       	ldd	r18, Y+1	; 0x01
    3e66:	3a 81       	ldd	r19, Y+2	; 0x02
    3e68:	fc 01       	movw	r30, r24
    3e6a:	33 8b       	std	Z+19, r19	; 0x13
    3e6c:	22 8b       	std	Z+18, r18	; 0x12
    3e6e:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3e72:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3e76:	29 81       	ldd	r18, Y+1	; 0x01
    3e78:	3a 81       	ldd	r19, Y+2	; 0x02
    3e7a:	f9 01       	movw	r30, r18
    3e7c:	26 81       	ldd	r18, Z+6	; 0x06
    3e7e:	37 81       	ldd	r19, Z+7	; 0x07
    3e80:	fc 01       	movw	r30, r24
    3e82:	35 8b       	std	Z+21, r19	; 0x15
    3e84:	24 8b       	std	Z+20, r18	; 0x14
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	9a 81       	ldd	r25, Y+2	; 0x02
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	86 81       	ldd	r24, Z+6	; 0x06
    3e8e:	97 81       	ldd	r25, Z+7	; 0x07
    3e90:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3e94:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3e98:	22 5f       	subi	r18, 0xF2	; 242
    3e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	35 83       	std	Z+5, r19	; 0x05
    3ea0:	24 83       	std	Z+4, r18	; 0x04
    3ea2:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3ea6:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3eaa:	9c 01       	movw	r18, r24
    3eac:	22 5f       	subi	r18, 0xF2	; 242
    3eae:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb0:	89 81       	ldd	r24, Y+1	; 0x01
    3eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	37 83       	std	Z+7, r19	; 0x07
    3eb8:	26 83       	std	Z+6, r18	; 0x06
    3eba:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    3ebe:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    3ec2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	31 8f       	std	Z+25, r19	; 0x19
    3eca:	20 8f       	std	Z+24, r18	; 0x18
    3ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ece:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	80 81       	ld	r24, Z
    3ed4:	21 e0       	ldi	r18, 0x01	; 1
    3ed6:	28 0f       	add	r18, r24
    3ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eda:	9c 81       	ldd	r25, Y+4	; 0x04
    3edc:	fc 01       	movw	r30, r24
    3ede:	20 83       	st	Z, r18
    3ee0:	89 85       	ldd	r24, Y+9	; 0x09
    3ee2:	88 23       	and	r24, r24
    3ee4:	39 f0       	breq	.+14     	; 0x3ef4 <vTaskPlaceOnEventListRestricted+0xc8>
    3ee6:	8f ef       	ldi	r24, 0xFF	; 255
    3ee8:	9f ef       	ldi	r25, 0xFF	; 255
    3eea:	dc 01       	movw	r26, r24
    3eec:	8d 83       	std	Y+5, r24	; 0x05
    3eee:	9e 83       	std	Y+6, r25	; 0x06
    3ef0:	af 83       	std	Y+7, r26	; 0x07
    3ef2:	b8 87       	std	Y+8, r27	; 0x08
    3ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef8:	af 81       	ldd	r26, Y+7	; 0x07
    3efa:	b8 85       	ldd	r27, Y+8	; 0x08
    3efc:	49 85       	ldd	r20, Y+9	; 0x09
    3efe:	bc 01       	movw	r22, r24
    3f00:	cd 01       	movw	r24, r26
    3f02:	0e 94 8c 2a 	call	0x5518	; 0x5518 <prvAddCurrentTaskToDelayedList>
    3f06:	00 00       	nop
    3f08:	29 96       	adiw	r28, 0x09	; 9
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	df 91       	pop	r29
    3f16:	cf 91       	pop	r28
    3f18:	08 95       	ret

00003f1a <xTaskRemoveFromEventList>:
    3f1a:	cf 93       	push	r28
    3f1c:	df 93       	push	r29
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
    3f22:	2d 97       	sbiw	r28, 0x0d	; 13
    3f24:	0f b6       	in	r0, 0x3f	; 63
    3f26:	f8 94       	cli
    3f28:	de bf       	out	0x3e, r29	; 62
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	cd bf       	out	0x3d, r28	; 61
    3f2e:	9d 87       	std	Y+13, r25	; 0x0d
    3f30:	8c 87       	std	Y+12, r24	; 0x0c
    3f32:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f34:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f36:	fc 01       	movw	r30, r24
    3f38:	87 81       	ldd	r24, Z+7	; 0x07
    3f3a:	90 85       	ldd	r25, Z+8	; 0x08
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	80 85       	ldd	r24, Z+8	; 0x08
    3f40:	91 85       	ldd	r25, Z+9	; 0x09
    3f42:	9b 83       	std	Y+3, r25	; 0x03
    3f44:	8a 83       	std	Y+2, r24	; 0x02
    3f46:	8a 81       	ldd	r24, Y+2	; 0x02
    3f48:	9b 81       	ldd	r25, Y+3	; 0x03
    3f4a:	fc 01       	movw	r30, r24
    3f4c:	80 8d       	ldd	r24, Z+24	; 0x18
    3f4e:	91 8d       	ldd	r25, Z+25	; 0x19
    3f50:	9d 83       	std	Y+5, r25	; 0x05
    3f52:	8c 83       	std	Y+4, r24	; 0x04
    3f54:	8a 81       	ldd	r24, Y+2	; 0x02
    3f56:	9b 81       	ldd	r25, Y+3	; 0x03
    3f58:	fc 01       	movw	r30, r24
    3f5a:	82 89       	ldd	r24, Z+18	; 0x12
    3f5c:	93 89       	ldd	r25, Z+19	; 0x13
    3f5e:	2a 81       	ldd	r18, Y+2	; 0x02
    3f60:	3b 81       	ldd	r19, Y+3	; 0x03
    3f62:	f9 01       	movw	r30, r18
    3f64:	24 89       	ldd	r18, Z+20	; 0x14
    3f66:	35 89       	ldd	r19, Z+21	; 0x15
    3f68:	fc 01       	movw	r30, r24
    3f6a:	37 83       	std	Z+7, r19	; 0x07
    3f6c:	26 83       	std	Z+6, r18	; 0x06
    3f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f70:	9b 81       	ldd	r25, Y+3	; 0x03
    3f72:	fc 01       	movw	r30, r24
    3f74:	84 89       	ldd	r24, Z+20	; 0x14
    3f76:	95 89       	ldd	r25, Z+21	; 0x15
    3f78:	2a 81       	ldd	r18, Y+2	; 0x02
    3f7a:	3b 81       	ldd	r19, Y+3	; 0x03
    3f7c:	f9 01       	movw	r30, r18
    3f7e:	22 89       	ldd	r18, Z+18	; 0x12
    3f80:	33 89       	ldd	r19, Z+19	; 0x13
    3f82:	fc 01       	movw	r30, r24
    3f84:	35 83       	std	Z+5, r19	; 0x05
    3f86:	24 83       	std	Z+4, r18	; 0x04
    3f88:	8c 81       	ldd	r24, Y+4	; 0x04
    3f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	21 81       	ldd	r18, Z+1	; 0x01
    3f90:	32 81       	ldd	r19, Z+2	; 0x02
    3f92:	8a 81       	ldd	r24, Y+2	; 0x02
    3f94:	9b 81       	ldd	r25, Y+3	; 0x03
    3f96:	0e 96       	adiw	r24, 0x0e	; 14
    3f98:	28 17       	cp	r18, r24
    3f9a:	39 07       	cpc	r19, r25
    3f9c:	51 f4       	brne	.+20     	; 0x3fb2 <xTaskRemoveFromEventList+0x98>
    3f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	24 89       	ldd	r18, Z+20	; 0x14
    3fa6:	35 89       	ldd	r19, Z+21	; 0x15
    3fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    3faa:	9d 81       	ldd	r25, Y+5	; 0x05
    3fac:	fc 01       	movw	r30, r24
    3fae:	32 83       	std	Z+2, r19	; 0x02
    3fb0:	21 83       	std	Z+1, r18	; 0x01
    3fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	11 8e       	std	Z+25, r1	; 0x19
    3fba:	10 8e       	std	Z+24, r1	; 0x18
    3fbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3fbe:	9d 81       	ldd	r25, Y+5	; 0x05
    3fc0:	fc 01       	movw	r30, r24
    3fc2:	80 81       	ld	r24, Z
    3fc4:	2f ef       	ldi	r18, 0xFF	; 255
    3fc6:	28 0f       	add	r18, r24
    3fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3fca:	9d 81       	ldd	r25, Y+5	; 0x05
    3fcc:	fc 01       	movw	r30, r24
    3fce:	20 83       	st	Z, r18
    3fd0:	80 91 98 1b 	lds	r24, 0x1B98	; 0x801b98 <uxSchedulerSuspended>
    3fd4:	88 23       	and	r24, r24
    3fd6:	09 f0       	breq	.+2      	; 0x3fda <xTaskRemoveFromEventList+0xc0>
    3fd8:	bf c0       	rjmp	.+382    	; 0x4158 <xTaskRemoveFromEventList+0x23e>
    3fda:	8a 81       	ldd	r24, Y+2	; 0x02
    3fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3fde:	fc 01       	movw	r30, r24
    3fe0:	84 85       	ldd	r24, Z+12	; 0x0c
    3fe2:	95 85       	ldd	r25, Z+13	; 0x0d
    3fe4:	9f 83       	std	Y+7, r25	; 0x07
    3fe6:	8e 83       	std	Y+6, r24	; 0x06
    3fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fea:	9b 81       	ldd	r25, Y+3	; 0x03
    3fec:	fc 01       	movw	r30, r24
    3fee:	86 81       	ldd	r24, Z+6	; 0x06
    3ff0:	97 81       	ldd	r25, Z+7	; 0x07
    3ff2:	2a 81       	ldd	r18, Y+2	; 0x02
    3ff4:	3b 81       	ldd	r19, Y+3	; 0x03
    3ff6:	f9 01       	movw	r30, r18
    3ff8:	20 85       	ldd	r18, Z+8	; 0x08
    3ffa:	31 85       	ldd	r19, Z+9	; 0x09
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	37 83       	std	Z+7, r19	; 0x07
    4000:	26 83       	std	Z+6, r18	; 0x06
    4002:	8a 81       	ldd	r24, Y+2	; 0x02
    4004:	9b 81       	ldd	r25, Y+3	; 0x03
    4006:	fc 01       	movw	r30, r24
    4008:	80 85       	ldd	r24, Z+8	; 0x08
    400a:	91 85       	ldd	r25, Z+9	; 0x09
    400c:	2a 81       	ldd	r18, Y+2	; 0x02
    400e:	3b 81       	ldd	r19, Y+3	; 0x03
    4010:	f9 01       	movw	r30, r18
    4012:	26 81       	ldd	r18, Z+6	; 0x06
    4014:	37 81       	ldd	r19, Z+7	; 0x07
    4016:	fc 01       	movw	r30, r24
    4018:	35 83       	std	Z+5, r19	; 0x05
    401a:	24 83       	std	Z+4, r18	; 0x04
    401c:	8e 81       	ldd	r24, Y+6	; 0x06
    401e:	9f 81       	ldd	r25, Y+7	; 0x07
    4020:	fc 01       	movw	r30, r24
    4022:	21 81       	ldd	r18, Z+1	; 0x01
    4024:	32 81       	ldd	r19, Z+2	; 0x02
    4026:	8a 81       	ldd	r24, Y+2	; 0x02
    4028:	9b 81       	ldd	r25, Y+3	; 0x03
    402a:	02 96       	adiw	r24, 0x02	; 2
    402c:	28 17       	cp	r18, r24
    402e:	39 07       	cpc	r19, r25
    4030:	51 f4       	brne	.+20     	; 0x4046 <xTaskRemoveFromEventList+0x12c>
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
    4034:	9b 81       	ldd	r25, Y+3	; 0x03
    4036:	fc 01       	movw	r30, r24
    4038:	20 85       	ldd	r18, Z+8	; 0x08
    403a:	31 85       	ldd	r19, Z+9	; 0x09
    403c:	8e 81       	ldd	r24, Y+6	; 0x06
    403e:	9f 81       	ldd	r25, Y+7	; 0x07
    4040:	fc 01       	movw	r30, r24
    4042:	32 83       	std	Z+2, r19	; 0x02
    4044:	21 83       	std	Z+1, r18	; 0x01
    4046:	8a 81       	ldd	r24, Y+2	; 0x02
    4048:	9b 81       	ldd	r25, Y+3	; 0x03
    404a:	fc 01       	movw	r30, r24
    404c:	15 86       	std	Z+13, r1	; 0x0d
    404e:	14 86       	std	Z+12, r1	; 0x0c
    4050:	8e 81       	ldd	r24, Y+6	; 0x06
    4052:	9f 81       	ldd	r25, Y+7	; 0x07
    4054:	fc 01       	movw	r30, r24
    4056:	80 81       	ld	r24, Z
    4058:	2f ef       	ldi	r18, 0xFF	; 255
    405a:	28 0f       	add	r18, r24
    405c:	8e 81       	ldd	r24, Y+6	; 0x06
    405e:	9f 81       	ldd	r25, Y+7	; 0x07
    4060:	fc 01       	movw	r30, r24
    4062:	20 83       	st	Z, r18
    4064:	8a 81       	ldd	r24, Y+2	; 0x02
    4066:	9b 81       	ldd	r25, Y+3	; 0x03
    4068:	fc 01       	movw	r30, r24
    406a:	92 8d       	ldd	r25, Z+26	; 0x1a
    406c:	80 91 89 1b 	lds	r24, 0x1B89	; 0x801b89 <uxTopReadyPriority>
    4070:	89 17       	cp	r24, r25
    4072:	30 f4       	brcc	.+12     	; 0x4080 <xTaskRemoveFromEventList+0x166>
    4074:	8a 81       	ldd	r24, Y+2	; 0x02
    4076:	9b 81       	ldd	r25, Y+3	; 0x03
    4078:	fc 01       	movw	r30, r24
    407a:	82 8d       	ldd	r24, Z+26	; 0x1a
    407c:	80 93 89 1b 	sts	0x1B89, r24	; 0x801b89 <uxTopReadyPriority>
    4080:	8a 81       	ldd	r24, Y+2	; 0x02
    4082:	9b 81       	ldd	r25, Y+3	; 0x03
    4084:	fc 01       	movw	r30, r24
    4086:	82 8d       	ldd	r24, Z+26	; 0x1a
    4088:	28 2f       	mov	r18, r24
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	4b e0       	ldi	r20, 0x0B	; 11
    408e:	42 9f       	mul	r20, r18
    4090:	c0 01       	movw	r24, r0
    4092:	43 9f       	mul	r20, r19
    4094:	90 0d       	add	r25, r0
    4096:	11 24       	eor	r1, r1
    4098:	85 52       	subi	r24, 0x25	; 37
    409a:	95 4e       	sbci	r25, 0xE5	; 229
    409c:	fc 01       	movw	r30, r24
    409e:	80 81       	ld	r24, Z
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	99 87       	std	Y+9, r25	; 0x09
    40a4:	88 87       	std	Y+8, r24	; 0x08
    40a6:	8a 81       	ldd	r24, Y+2	; 0x02
    40a8:	9b 81       	ldd	r25, Y+3	; 0x03
    40aa:	28 85       	ldd	r18, Y+8	; 0x08
    40ac:	39 85       	ldd	r19, Y+9	; 0x09
    40ae:	fc 01       	movw	r30, r24
    40b0:	37 83       	std	Z+7, r19	; 0x07
    40b2:	26 83       	std	Z+6, r18	; 0x06
    40b4:	88 85       	ldd	r24, Y+8	; 0x08
    40b6:	99 85       	ldd	r25, Y+9	; 0x09
    40b8:	fc 01       	movw	r30, r24
    40ba:	26 81       	ldd	r18, Z+6	; 0x06
    40bc:	37 81       	ldd	r19, Z+7	; 0x07
    40be:	8a 81       	ldd	r24, Y+2	; 0x02
    40c0:	9b 81       	ldd	r25, Y+3	; 0x03
    40c2:	fc 01       	movw	r30, r24
    40c4:	31 87       	std	Z+9, r19	; 0x09
    40c6:	20 87       	std	Z+8, r18	; 0x08
    40c8:	88 85       	ldd	r24, Y+8	; 0x08
    40ca:	99 85       	ldd	r25, Y+9	; 0x09
    40cc:	fc 01       	movw	r30, r24
    40ce:	86 81       	ldd	r24, Z+6	; 0x06
    40d0:	97 81       	ldd	r25, Z+7	; 0x07
    40d2:	2a 81       	ldd	r18, Y+2	; 0x02
    40d4:	3b 81       	ldd	r19, Y+3	; 0x03
    40d6:	2e 5f       	subi	r18, 0xFE	; 254
    40d8:	3f 4f       	sbci	r19, 0xFF	; 255
    40da:	fc 01       	movw	r30, r24
    40dc:	35 83       	std	Z+5, r19	; 0x05
    40de:	24 83       	std	Z+4, r18	; 0x04
    40e0:	8a 81       	ldd	r24, Y+2	; 0x02
    40e2:	9b 81       	ldd	r25, Y+3	; 0x03
    40e4:	9c 01       	movw	r18, r24
    40e6:	2e 5f       	subi	r18, 0xFE	; 254
    40e8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ea:	88 85       	ldd	r24, Y+8	; 0x08
    40ec:	99 85       	ldd	r25, Y+9	; 0x09
    40ee:	fc 01       	movw	r30, r24
    40f0:	37 83       	std	Z+7, r19	; 0x07
    40f2:	26 83       	std	Z+6, r18	; 0x06
    40f4:	8a 81       	ldd	r24, Y+2	; 0x02
    40f6:	9b 81       	ldd	r25, Y+3	; 0x03
    40f8:	fc 01       	movw	r30, r24
    40fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    40fc:	28 2f       	mov	r18, r24
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	4b e0       	ldi	r20, 0x0B	; 11
    4102:	42 9f       	mul	r20, r18
    4104:	c0 01       	movw	r24, r0
    4106:	43 9f       	mul	r20, r19
    4108:	90 0d       	add	r25, r0
    410a:	11 24       	eor	r1, r1
    410c:	9c 01       	movw	r18, r24
    410e:	26 52       	subi	r18, 0x26	; 38
    4110:	35 4e       	sbci	r19, 0xE5	; 229
    4112:	8a 81       	ldd	r24, Y+2	; 0x02
    4114:	9b 81       	ldd	r25, Y+3	; 0x03
    4116:	fc 01       	movw	r30, r24
    4118:	35 87       	std	Z+13, r19	; 0x0d
    411a:	24 87       	std	Z+12, r18	; 0x0c
    411c:	8a 81       	ldd	r24, Y+2	; 0x02
    411e:	9b 81       	ldd	r25, Y+3	; 0x03
    4120:	fc 01       	movw	r30, r24
    4122:	82 8d       	ldd	r24, Z+26	; 0x1a
    4124:	88 2f       	mov	r24, r24
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	4b e0       	ldi	r20, 0x0B	; 11
    412a:	48 9f       	mul	r20, r24
    412c:	90 01       	movw	r18, r0
    412e:	49 9f       	mul	r20, r25
    4130:	30 0d       	add	r19, r0
    4132:	11 24       	eor	r1, r1
    4134:	26 52       	subi	r18, 0x26	; 38
    4136:	35 4e       	sbci	r19, 0xE5	; 229
    4138:	f9 01       	movw	r30, r18
    413a:	20 81       	ld	r18, Z
    413c:	41 e0       	ldi	r20, 0x01	; 1
    413e:	42 0f       	add	r20, r18
    4140:	5b e0       	ldi	r21, 0x0B	; 11
    4142:	58 9f       	mul	r21, r24
    4144:	90 01       	movw	r18, r0
    4146:	59 9f       	mul	r21, r25
    4148:	30 0d       	add	r19, r0
    414a:	11 24       	eor	r1, r1
    414c:	c9 01       	movw	r24, r18
    414e:	86 52       	subi	r24, 0x26	; 38
    4150:	95 4e       	sbci	r25, 0xE5	; 229
    4152:	fc 01       	movw	r30, r24
    4154:	40 83       	st	Z, r20
    4156:	39 c0       	rjmp	.+114    	; 0x41ca <xTaskRemoveFromEventList+0x2b0>
    4158:	80 91 63 1b 	lds	r24, 0x1B63	; 0x801b63 <xPendingReadyList+0x1>
    415c:	90 91 64 1b 	lds	r25, 0x1B64	; 0x801b64 <xPendingReadyList+0x2>
    4160:	9b 87       	std	Y+11, r25	; 0x0b
    4162:	8a 87       	std	Y+10, r24	; 0x0a
    4164:	8a 81       	ldd	r24, Y+2	; 0x02
    4166:	9b 81       	ldd	r25, Y+3	; 0x03
    4168:	2a 85       	ldd	r18, Y+10	; 0x0a
    416a:	3b 85       	ldd	r19, Y+11	; 0x0b
    416c:	fc 01       	movw	r30, r24
    416e:	33 8b       	std	Z+19, r19	; 0x13
    4170:	22 8b       	std	Z+18, r18	; 0x12
    4172:	8a 85       	ldd	r24, Y+10	; 0x0a
    4174:	9b 85       	ldd	r25, Y+11	; 0x0b
    4176:	fc 01       	movw	r30, r24
    4178:	26 81       	ldd	r18, Z+6	; 0x06
    417a:	37 81       	ldd	r19, Z+7	; 0x07
    417c:	8a 81       	ldd	r24, Y+2	; 0x02
    417e:	9b 81       	ldd	r25, Y+3	; 0x03
    4180:	fc 01       	movw	r30, r24
    4182:	35 8b       	std	Z+21, r19	; 0x15
    4184:	24 8b       	std	Z+20, r18	; 0x14
    4186:	8a 85       	ldd	r24, Y+10	; 0x0a
    4188:	9b 85       	ldd	r25, Y+11	; 0x0b
    418a:	fc 01       	movw	r30, r24
    418c:	86 81       	ldd	r24, Z+6	; 0x06
    418e:	97 81       	ldd	r25, Z+7	; 0x07
    4190:	2a 81       	ldd	r18, Y+2	; 0x02
    4192:	3b 81       	ldd	r19, Y+3	; 0x03
    4194:	22 5f       	subi	r18, 0xF2	; 242
    4196:	3f 4f       	sbci	r19, 0xFF	; 255
    4198:	fc 01       	movw	r30, r24
    419a:	35 83       	std	Z+5, r19	; 0x05
    419c:	24 83       	std	Z+4, r18	; 0x04
    419e:	8a 81       	ldd	r24, Y+2	; 0x02
    41a0:	9b 81       	ldd	r25, Y+3	; 0x03
    41a2:	9c 01       	movw	r18, r24
    41a4:	22 5f       	subi	r18, 0xF2	; 242
    41a6:	3f 4f       	sbci	r19, 0xFF	; 255
    41a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    41aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    41ac:	fc 01       	movw	r30, r24
    41ae:	37 83       	std	Z+7, r19	; 0x07
    41b0:	26 83       	std	Z+6, r18	; 0x06
    41b2:	8a 81       	ldd	r24, Y+2	; 0x02
    41b4:	9b 81       	ldd	r25, Y+3	; 0x03
    41b6:	22 e6       	ldi	r18, 0x62	; 98
    41b8:	3b e1       	ldi	r19, 0x1B	; 27
    41ba:	fc 01       	movw	r30, r24
    41bc:	31 8f       	std	Z+25, r19	; 0x19
    41be:	20 8f       	std	Z+24, r18	; 0x18
    41c0:	80 91 62 1b 	lds	r24, 0x1B62	; 0x801b62 <xPendingReadyList>
    41c4:	8f 5f       	subi	r24, 0xFF	; 255
    41c6:	80 93 62 1b 	sts	0x1B62, r24	; 0x801b62 <xPendingReadyList>
    41ca:	8a 81       	ldd	r24, Y+2	; 0x02
    41cc:	9b 81       	ldd	r25, Y+3	; 0x03
    41ce:	fc 01       	movw	r30, r24
    41d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    41d2:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    41d6:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    41da:	fc 01       	movw	r30, r24
    41dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    41de:	82 17       	cp	r24, r18
    41e0:	30 f4       	brcc	.+12     	; 0x41ee <xTaskRemoveFromEventList+0x2d4>
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	89 83       	std	Y+1, r24	; 0x01
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	80 93 8f 1b 	sts	0x1B8F, r24	; 0x801b8f <xYieldPending>
    41ec:	01 c0       	rjmp	.+2      	; 0x41f0 <xTaskRemoveFromEventList+0x2d6>
    41ee:	19 82       	std	Y+1, r1	; 0x01
    41f0:	89 81       	ldd	r24, Y+1	; 0x01
    41f2:	2d 96       	adiw	r28, 0x0d	; 13
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	f8 94       	cli
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	df 91       	pop	r29
    4200:	cf 91       	pop	r28
    4202:	08 95       	ret

00004204 <vTaskRemoveFromUnorderedEventList>:
    4204:	cf 93       	push	r28
    4206:	df 93       	push	r29
    4208:	cd b7       	in	r28, 0x3d	; 61
    420a:	de b7       	in	r29, 0x3e	; 62
    420c:	2e 97       	sbiw	r28, 0x0e	; 14
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	f8 94       	cli
    4212:	de bf       	out	0x3e, r29	; 62
    4214:	0f be       	out	0x3f, r0	; 63
    4216:	cd bf       	out	0x3d, r28	; 61
    4218:	9a 87       	std	Y+10, r25	; 0x0a
    421a:	89 87       	std	Y+9, r24	; 0x09
    421c:	4b 87       	std	Y+11, r20	; 0x0b
    421e:	5c 87       	std	Y+12, r21	; 0x0c
    4220:	6d 87       	std	Y+13, r22	; 0x0d
    4222:	7e 87       	std	Y+14, r23	; 0x0e
    4224:	8b 85       	ldd	r24, Y+11	; 0x0b
    4226:	9c 85       	ldd	r25, Y+12	; 0x0c
    4228:	ad 85       	ldd	r26, Y+13	; 0x0d
    422a:	be 85       	ldd	r27, Y+14	; 0x0e
    422c:	b0 68       	ori	r27, 0x80	; 128
    422e:	29 85       	ldd	r18, Y+9	; 0x09
    4230:	3a 85       	ldd	r19, Y+10	; 0x0a
    4232:	f9 01       	movw	r30, r18
    4234:	80 83       	st	Z, r24
    4236:	91 83       	std	Z+1, r25	; 0x01
    4238:	a2 83       	std	Z+2, r26	; 0x02
    423a:	b3 83       	std	Z+3, r27	; 0x03
    423c:	89 85       	ldd	r24, Y+9	; 0x09
    423e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4240:	fc 01       	movw	r30, r24
    4242:	80 85       	ldd	r24, Z+8	; 0x08
    4244:	91 85       	ldd	r25, Z+9	; 0x09
    4246:	9a 83       	std	Y+2, r25	; 0x02
    4248:	89 83       	std	Y+1, r24	; 0x01
    424a:	89 85       	ldd	r24, Y+9	; 0x09
    424c:	9a 85       	ldd	r25, Y+10	; 0x0a
    424e:	fc 01       	movw	r30, r24
    4250:	82 85       	ldd	r24, Z+10	; 0x0a
    4252:	93 85       	ldd	r25, Z+11	; 0x0b
    4254:	9c 83       	std	Y+4, r25	; 0x04
    4256:	8b 83       	std	Y+3, r24	; 0x03
    4258:	89 85       	ldd	r24, Y+9	; 0x09
    425a:	9a 85       	ldd	r25, Y+10	; 0x0a
    425c:	fc 01       	movw	r30, r24
    425e:	84 81       	ldd	r24, Z+4	; 0x04
    4260:	95 81       	ldd	r25, Z+5	; 0x05
    4262:	29 85       	ldd	r18, Y+9	; 0x09
    4264:	3a 85       	ldd	r19, Y+10	; 0x0a
    4266:	f9 01       	movw	r30, r18
    4268:	26 81       	ldd	r18, Z+6	; 0x06
    426a:	37 81       	ldd	r19, Z+7	; 0x07
    426c:	fc 01       	movw	r30, r24
    426e:	37 83       	std	Z+7, r19	; 0x07
    4270:	26 83       	std	Z+6, r18	; 0x06
    4272:	89 85       	ldd	r24, Y+9	; 0x09
    4274:	9a 85       	ldd	r25, Y+10	; 0x0a
    4276:	fc 01       	movw	r30, r24
    4278:	86 81       	ldd	r24, Z+6	; 0x06
    427a:	97 81       	ldd	r25, Z+7	; 0x07
    427c:	29 85       	ldd	r18, Y+9	; 0x09
    427e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4280:	f9 01       	movw	r30, r18
    4282:	24 81       	ldd	r18, Z+4	; 0x04
    4284:	35 81       	ldd	r19, Z+5	; 0x05
    4286:	fc 01       	movw	r30, r24
    4288:	35 83       	std	Z+5, r19	; 0x05
    428a:	24 83       	std	Z+4, r18	; 0x04
    428c:	8b 81       	ldd	r24, Y+3	; 0x03
    428e:	9c 81       	ldd	r25, Y+4	; 0x04
    4290:	fc 01       	movw	r30, r24
    4292:	21 81       	ldd	r18, Z+1	; 0x01
    4294:	32 81       	ldd	r19, Z+2	; 0x02
    4296:	89 85       	ldd	r24, Y+9	; 0x09
    4298:	9a 85       	ldd	r25, Y+10	; 0x0a
    429a:	28 17       	cp	r18, r24
    429c:	39 07       	cpc	r19, r25
    429e:	51 f4       	brne	.+20     	; 0x42b4 <vTaskRemoveFromUnorderedEventList+0xb0>
    42a0:	89 85       	ldd	r24, Y+9	; 0x09
    42a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a4:	fc 01       	movw	r30, r24
    42a6:	26 81       	ldd	r18, Z+6	; 0x06
    42a8:	37 81       	ldd	r19, Z+7	; 0x07
    42aa:	8b 81       	ldd	r24, Y+3	; 0x03
    42ac:	9c 81       	ldd	r25, Y+4	; 0x04
    42ae:	fc 01       	movw	r30, r24
    42b0:	32 83       	std	Z+2, r19	; 0x02
    42b2:	21 83       	std	Z+1, r18	; 0x01
    42b4:	89 85       	ldd	r24, Y+9	; 0x09
    42b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    42b8:	fc 01       	movw	r30, r24
    42ba:	13 86       	std	Z+11, r1	; 0x0b
    42bc:	12 86       	std	Z+10, r1	; 0x0a
    42be:	8b 81       	ldd	r24, Y+3	; 0x03
    42c0:	9c 81       	ldd	r25, Y+4	; 0x04
    42c2:	fc 01       	movw	r30, r24
    42c4:	80 81       	ld	r24, Z
    42c6:	2f ef       	ldi	r18, 0xFF	; 255
    42c8:	28 0f       	add	r18, r24
    42ca:	8b 81       	ldd	r24, Y+3	; 0x03
    42cc:	9c 81       	ldd	r25, Y+4	; 0x04
    42ce:	fc 01       	movw	r30, r24
    42d0:	20 83       	st	Z, r18
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	9a 81       	ldd	r25, Y+2	; 0x02
    42d6:	fc 01       	movw	r30, r24
    42d8:	84 85       	ldd	r24, Z+12	; 0x0c
    42da:	95 85       	ldd	r25, Z+13	; 0x0d
    42dc:	9e 83       	std	Y+6, r25	; 0x06
    42de:	8d 83       	std	Y+5, r24	; 0x05
    42e0:	89 81       	ldd	r24, Y+1	; 0x01
    42e2:	9a 81       	ldd	r25, Y+2	; 0x02
    42e4:	fc 01       	movw	r30, r24
    42e6:	86 81       	ldd	r24, Z+6	; 0x06
    42e8:	97 81       	ldd	r25, Z+7	; 0x07
    42ea:	29 81       	ldd	r18, Y+1	; 0x01
    42ec:	3a 81       	ldd	r19, Y+2	; 0x02
    42ee:	f9 01       	movw	r30, r18
    42f0:	20 85       	ldd	r18, Z+8	; 0x08
    42f2:	31 85       	ldd	r19, Z+9	; 0x09
    42f4:	fc 01       	movw	r30, r24
    42f6:	37 83       	std	Z+7, r19	; 0x07
    42f8:	26 83       	std	Z+6, r18	; 0x06
    42fa:	89 81       	ldd	r24, Y+1	; 0x01
    42fc:	9a 81       	ldd	r25, Y+2	; 0x02
    42fe:	fc 01       	movw	r30, r24
    4300:	80 85       	ldd	r24, Z+8	; 0x08
    4302:	91 85       	ldd	r25, Z+9	; 0x09
    4304:	29 81       	ldd	r18, Y+1	; 0x01
    4306:	3a 81       	ldd	r19, Y+2	; 0x02
    4308:	f9 01       	movw	r30, r18
    430a:	26 81       	ldd	r18, Z+6	; 0x06
    430c:	37 81       	ldd	r19, Z+7	; 0x07
    430e:	fc 01       	movw	r30, r24
    4310:	35 83       	std	Z+5, r19	; 0x05
    4312:	24 83       	std	Z+4, r18	; 0x04
    4314:	8d 81       	ldd	r24, Y+5	; 0x05
    4316:	9e 81       	ldd	r25, Y+6	; 0x06
    4318:	fc 01       	movw	r30, r24
    431a:	21 81       	ldd	r18, Z+1	; 0x01
    431c:	32 81       	ldd	r19, Z+2	; 0x02
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	9a 81       	ldd	r25, Y+2	; 0x02
    4322:	02 96       	adiw	r24, 0x02	; 2
    4324:	28 17       	cp	r18, r24
    4326:	39 07       	cpc	r19, r25
    4328:	51 f4       	brne	.+20     	; 0x433e <vTaskRemoveFromUnorderedEventList+0x13a>
    432a:	89 81       	ldd	r24, Y+1	; 0x01
    432c:	9a 81       	ldd	r25, Y+2	; 0x02
    432e:	fc 01       	movw	r30, r24
    4330:	20 85       	ldd	r18, Z+8	; 0x08
    4332:	31 85       	ldd	r19, Z+9	; 0x09
    4334:	8d 81       	ldd	r24, Y+5	; 0x05
    4336:	9e 81       	ldd	r25, Y+6	; 0x06
    4338:	fc 01       	movw	r30, r24
    433a:	32 83       	std	Z+2, r19	; 0x02
    433c:	21 83       	std	Z+1, r18	; 0x01
    433e:	89 81       	ldd	r24, Y+1	; 0x01
    4340:	9a 81       	ldd	r25, Y+2	; 0x02
    4342:	fc 01       	movw	r30, r24
    4344:	15 86       	std	Z+13, r1	; 0x0d
    4346:	14 86       	std	Z+12, r1	; 0x0c
    4348:	8d 81       	ldd	r24, Y+5	; 0x05
    434a:	9e 81       	ldd	r25, Y+6	; 0x06
    434c:	fc 01       	movw	r30, r24
    434e:	80 81       	ld	r24, Z
    4350:	2f ef       	ldi	r18, 0xFF	; 255
    4352:	28 0f       	add	r18, r24
    4354:	8d 81       	ldd	r24, Y+5	; 0x05
    4356:	9e 81       	ldd	r25, Y+6	; 0x06
    4358:	fc 01       	movw	r30, r24
    435a:	20 83       	st	Z, r18
    435c:	89 81       	ldd	r24, Y+1	; 0x01
    435e:	9a 81       	ldd	r25, Y+2	; 0x02
    4360:	fc 01       	movw	r30, r24
    4362:	92 8d       	ldd	r25, Z+26	; 0x1a
    4364:	80 91 89 1b 	lds	r24, 0x1B89	; 0x801b89 <uxTopReadyPriority>
    4368:	89 17       	cp	r24, r25
    436a:	30 f4       	brcc	.+12     	; 0x4378 <vTaskRemoveFromUnorderedEventList+0x174>
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	9a 81       	ldd	r25, Y+2	; 0x02
    4370:	fc 01       	movw	r30, r24
    4372:	82 8d       	ldd	r24, Z+26	; 0x1a
    4374:	80 93 89 1b 	sts	0x1B89, r24	; 0x801b89 <uxTopReadyPriority>
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	9a 81       	ldd	r25, Y+2	; 0x02
    437c:	fc 01       	movw	r30, r24
    437e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4380:	28 2f       	mov	r18, r24
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	4b e0       	ldi	r20, 0x0B	; 11
    4386:	42 9f       	mul	r20, r18
    4388:	c0 01       	movw	r24, r0
    438a:	43 9f       	mul	r20, r19
    438c:	90 0d       	add	r25, r0
    438e:	11 24       	eor	r1, r1
    4390:	85 52       	subi	r24, 0x25	; 37
    4392:	95 4e       	sbci	r25, 0xE5	; 229
    4394:	fc 01       	movw	r30, r24
    4396:	80 81       	ld	r24, Z
    4398:	91 81       	ldd	r25, Z+1	; 0x01
    439a:	98 87       	std	Y+8, r25	; 0x08
    439c:	8f 83       	std	Y+7, r24	; 0x07
    439e:	89 81       	ldd	r24, Y+1	; 0x01
    43a0:	9a 81       	ldd	r25, Y+2	; 0x02
    43a2:	2f 81       	ldd	r18, Y+7	; 0x07
    43a4:	38 85       	ldd	r19, Y+8	; 0x08
    43a6:	fc 01       	movw	r30, r24
    43a8:	37 83       	std	Z+7, r19	; 0x07
    43aa:	26 83       	std	Z+6, r18	; 0x06
    43ac:	8f 81       	ldd	r24, Y+7	; 0x07
    43ae:	98 85       	ldd	r25, Y+8	; 0x08
    43b0:	fc 01       	movw	r30, r24
    43b2:	26 81       	ldd	r18, Z+6	; 0x06
    43b4:	37 81       	ldd	r19, Z+7	; 0x07
    43b6:	89 81       	ldd	r24, Y+1	; 0x01
    43b8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ba:	fc 01       	movw	r30, r24
    43bc:	31 87       	std	Z+9, r19	; 0x09
    43be:	20 87       	std	Z+8, r18	; 0x08
    43c0:	8f 81       	ldd	r24, Y+7	; 0x07
    43c2:	98 85       	ldd	r25, Y+8	; 0x08
    43c4:	fc 01       	movw	r30, r24
    43c6:	86 81       	ldd	r24, Z+6	; 0x06
    43c8:	97 81       	ldd	r25, Z+7	; 0x07
    43ca:	29 81       	ldd	r18, Y+1	; 0x01
    43cc:	3a 81       	ldd	r19, Y+2	; 0x02
    43ce:	2e 5f       	subi	r18, 0xFE	; 254
    43d0:	3f 4f       	sbci	r19, 0xFF	; 255
    43d2:	fc 01       	movw	r30, r24
    43d4:	35 83       	std	Z+5, r19	; 0x05
    43d6:	24 83       	std	Z+4, r18	; 0x04
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	9a 81       	ldd	r25, Y+2	; 0x02
    43dc:	9c 01       	movw	r18, r24
    43de:	2e 5f       	subi	r18, 0xFE	; 254
    43e0:	3f 4f       	sbci	r19, 0xFF	; 255
    43e2:	8f 81       	ldd	r24, Y+7	; 0x07
    43e4:	98 85       	ldd	r25, Y+8	; 0x08
    43e6:	fc 01       	movw	r30, r24
    43e8:	37 83       	std	Z+7, r19	; 0x07
    43ea:	26 83       	std	Z+6, r18	; 0x06
    43ec:	89 81       	ldd	r24, Y+1	; 0x01
    43ee:	9a 81       	ldd	r25, Y+2	; 0x02
    43f0:	fc 01       	movw	r30, r24
    43f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    43f4:	28 2f       	mov	r18, r24
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	4b e0       	ldi	r20, 0x0B	; 11
    43fa:	42 9f       	mul	r20, r18
    43fc:	c0 01       	movw	r24, r0
    43fe:	43 9f       	mul	r20, r19
    4400:	90 0d       	add	r25, r0
    4402:	11 24       	eor	r1, r1
    4404:	9c 01       	movw	r18, r24
    4406:	26 52       	subi	r18, 0x26	; 38
    4408:	35 4e       	sbci	r19, 0xE5	; 229
    440a:	89 81       	ldd	r24, Y+1	; 0x01
    440c:	9a 81       	ldd	r25, Y+2	; 0x02
    440e:	fc 01       	movw	r30, r24
    4410:	35 87       	std	Z+13, r19	; 0x0d
    4412:	24 87       	std	Z+12, r18	; 0x0c
    4414:	89 81       	ldd	r24, Y+1	; 0x01
    4416:	9a 81       	ldd	r25, Y+2	; 0x02
    4418:	fc 01       	movw	r30, r24
    441a:	82 8d       	ldd	r24, Z+26	; 0x1a
    441c:	88 2f       	mov	r24, r24
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	4b e0       	ldi	r20, 0x0B	; 11
    4422:	48 9f       	mul	r20, r24
    4424:	90 01       	movw	r18, r0
    4426:	49 9f       	mul	r20, r25
    4428:	30 0d       	add	r19, r0
    442a:	11 24       	eor	r1, r1
    442c:	26 52       	subi	r18, 0x26	; 38
    442e:	35 4e       	sbci	r19, 0xE5	; 229
    4430:	f9 01       	movw	r30, r18
    4432:	20 81       	ld	r18, Z
    4434:	41 e0       	ldi	r20, 0x01	; 1
    4436:	42 0f       	add	r20, r18
    4438:	5b e0       	ldi	r21, 0x0B	; 11
    443a:	58 9f       	mul	r21, r24
    443c:	90 01       	movw	r18, r0
    443e:	59 9f       	mul	r21, r25
    4440:	30 0d       	add	r19, r0
    4442:	11 24       	eor	r1, r1
    4444:	c9 01       	movw	r24, r18
    4446:	86 52       	subi	r24, 0x26	; 38
    4448:	95 4e       	sbci	r25, 0xE5	; 229
    444a:	fc 01       	movw	r30, r24
    444c:	40 83       	st	Z, r20
    444e:	89 81       	ldd	r24, Y+1	; 0x01
    4450:	9a 81       	ldd	r25, Y+2	; 0x02
    4452:	fc 01       	movw	r30, r24
    4454:	22 8d       	ldd	r18, Z+26	; 0x1a
    4456:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    445a:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    445e:	fc 01       	movw	r30, r24
    4460:	82 8d       	ldd	r24, Z+26	; 0x1a
    4462:	82 17       	cp	r24, r18
    4464:	18 f4       	brcc	.+6      	; 0x446c <vTaskRemoveFromUnorderedEventList+0x268>
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	80 93 8f 1b 	sts	0x1B8F, r24	; 0x801b8f <xYieldPending>
    446c:	00 00       	nop
    446e:	2e 96       	adiw	r28, 0x0e	; 14
    4470:	0f b6       	in	r0, 0x3f	; 63
    4472:	f8 94       	cli
    4474:	de bf       	out	0x3e, r29	; 62
    4476:	0f be       	out	0x3f, r0	; 63
    4478:	cd bf       	out	0x3d, r28	; 61
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	08 95       	ret

00004480 <vTaskSetTimeOutState>:
    4480:	cf 93       	push	r28
    4482:	df 93       	push	r29
    4484:	1f 92       	push	r1
    4486:	1f 92       	push	r1
    4488:	cd b7       	in	r28, 0x3d	; 61
    448a:	de b7       	in	r29, 0x3e	; 62
    448c:	9a 83       	std	Y+2, r25	; 0x02
    448e:	89 83       	std	Y+1, r24	; 0x01
    4490:	0f b6       	in	r0, 0x3f	; 63
    4492:	f8 94       	cli
    4494:	0f 92       	push	r0
    4496:	20 91 90 1b 	lds	r18, 0x1B90	; 0x801b90 <xNumOfOverflows>
    449a:	89 81       	ldd	r24, Y+1	; 0x01
    449c:	9a 81       	ldd	r25, Y+2	; 0x02
    449e:	fc 01       	movw	r30, r24
    44a0:	20 83       	st	Z, r18
    44a2:	80 91 85 1b 	lds	r24, 0x1B85	; 0x801b85 <xTickCount>
    44a6:	90 91 86 1b 	lds	r25, 0x1B86	; 0x801b86 <xTickCount+0x1>
    44aa:	a0 91 87 1b 	lds	r26, 0x1B87	; 0x801b87 <xTickCount+0x2>
    44ae:	b0 91 88 1b 	lds	r27, 0x1B88	; 0x801b88 <xTickCount+0x3>
    44b2:	29 81       	ldd	r18, Y+1	; 0x01
    44b4:	3a 81       	ldd	r19, Y+2	; 0x02
    44b6:	f9 01       	movw	r30, r18
    44b8:	81 83       	std	Z+1, r24	; 0x01
    44ba:	92 83       	std	Z+2, r25	; 0x02
    44bc:	a3 83       	std	Z+3, r26	; 0x03
    44be:	b4 83       	std	Z+4, r27	; 0x04
    44c0:	0f 90       	pop	r0
    44c2:	0f be       	out	0x3f, r0	; 63
    44c4:	00 00       	nop
    44c6:	0f 90       	pop	r0
    44c8:	0f 90       	pop	r0
    44ca:	df 91       	pop	r29
    44cc:	cf 91       	pop	r28
    44ce:	08 95       	ret

000044d0 <vTaskInternalSetTimeOutState>:
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	1f 92       	push	r1
    44d6:	1f 92       	push	r1
    44d8:	cd b7       	in	r28, 0x3d	; 61
    44da:	de b7       	in	r29, 0x3e	; 62
    44dc:	9a 83       	std	Y+2, r25	; 0x02
    44de:	89 83       	std	Y+1, r24	; 0x01
    44e0:	20 91 90 1b 	lds	r18, 0x1B90	; 0x801b90 <xNumOfOverflows>
    44e4:	89 81       	ldd	r24, Y+1	; 0x01
    44e6:	9a 81       	ldd	r25, Y+2	; 0x02
    44e8:	fc 01       	movw	r30, r24
    44ea:	20 83       	st	Z, r18
    44ec:	80 91 85 1b 	lds	r24, 0x1B85	; 0x801b85 <xTickCount>
    44f0:	90 91 86 1b 	lds	r25, 0x1B86	; 0x801b86 <xTickCount+0x1>
    44f4:	a0 91 87 1b 	lds	r26, 0x1B87	; 0x801b87 <xTickCount+0x2>
    44f8:	b0 91 88 1b 	lds	r27, 0x1B88	; 0x801b88 <xTickCount+0x3>
    44fc:	29 81       	ldd	r18, Y+1	; 0x01
    44fe:	3a 81       	ldd	r19, Y+2	; 0x02
    4500:	f9 01       	movw	r30, r18
    4502:	81 83       	std	Z+1, r24	; 0x01
    4504:	92 83       	std	Z+2, r25	; 0x02
    4506:	a3 83       	std	Z+3, r26	; 0x03
    4508:	b4 83       	std	Z+4, r27	; 0x04
    450a:	00 00       	nop
    450c:	0f 90       	pop	r0
    450e:	0f 90       	pop	r0
    4510:	df 91       	pop	r29
    4512:	cf 91       	pop	r28
    4514:	08 95       	ret

00004516 <xTaskCheckForTimeOut>:
    4516:	ef 92       	push	r14
    4518:	ff 92       	push	r15
    451a:	0f 93       	push	r16
    451c:	1f 93       	push	r17
    451e:	cf 93       	push	r28
    4520:	df 93       	push	r29
    4522:	cd b7       	in	r28, 0x3d	; 61
    4524:	de b7       	in	r29, 0x3e	; 62
    4526:	2d 97       	sbiw	r28, 0x0d	; 13
    4528:	0f b6       	in	r0, 0x3f	; 63
    452a:	f8 94       	cli
    452c:	de bf       	out	0x3e, r29	; 62
    452e:	0f be       	out	0x3f, r0	; 63
    4530:	cd bf       	out	0x3d, r28	; 61
    4532:	9b 87       	std	Y+11, r25	; 0x0b
    4534:	8a 87       	std	Y+10, r24	; 0x0a
    4536:	7d 87       	std	Y+13, r23	; 0x0d
    4538:	6c 87       	std	Y+12, r22	; 0x0c
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	f8 94       	cli
    453e:	0f 92       	push	r0
    4540:	80 91 85 1b 	lds	r24, 0x1B85	; 0x801b85 <xTickCount>
    4544:	90 91 86 1b 	lds	r25, 0x1B86	; 0x801b86 <xTickCount+0x1>
    4548:	a0 91 87 1b 	lds	r26, 0x1B87	; 0x801b87 <xTickCount+0x2>
    454c:	b0 91 88 1b 	lds	r27, 0x1B88	; 0x801b88 <xTickCount+0x3>
    4550:	8a 83       	std	Y+2, r24	; 0x02
    4552:	9b 83       	std	Y+3, r25	; 0x03
    4554:	ac 83       	std	Y+4, r26	; 0x04
    4556:	bd 83       	std	Y+5, r27	; 0x05
    4558:	8a 85       	ldd	r24, Y+10	; 0x0a
    455a:	9b 85       	ldd	r25, Y+11	; 0x0b
    455c:	fc 01       	movw	r30, r24
    455e:	81 81       	ldd	r24, Z+1	; 0x01
    4560:	92 81       	ldd	r25, Z+2	; 0x02
    4562:	a3 81       	ldd	r26, Z+3	; 0x03
    4564:	b4 81       	ldd	r27, Z+4	; 0x04
    4566:	2a 81       	ldd	r18, Y+2	; 0x02
    4568:	3b 81       	ldd	r19, Y+3	; 0x03
    456a:	4c 81       	ldd	r20, Y+4	; 0x04
    456c:	5d 81       	ldd	r21, Y+5	; 0x05
    456e:	79 01       	movw	r14, r18
    4570:	8a 01       	movw	r16, r20
    4572:	e8 1a       	sub	r14, r24
    4574:	f9 0a       	sbc	r15, r25
    4576:	0a 0b       	sbc	r16, r26
    4578:	1b 0b       	sbc	r17, r27
    457a:	d8 01       	movw	r26, r16
    457c:	c7 01       	movw	r24, r14
    457e:	8e 83       	std	Y+6, r24	; 0x06
    4580:	9f 83       	std	Y+7, r25	; 0x07
    4582:	a8 87       	std	Y+8, r26	; 0x08
    4584:	b9 87       	std	Y+9, r27	; 0x09
    4586:	8c 85       	ldd	r24, Y+12	; 0x0c
    4588:	9d 85       	ldd	r25, Y+13	; 0x0d
    458a:	fc 01       	movw	r30, r24
    458c:	80 81       	ld	r24, Z
    458e:	91 81       	ldd	r25, Z+1	; 0x01
    4590:	a2 81       	ldd	r26, Z+2	; 0x02
    4592:	b3 81       	ldd	r27, Z+3	; 0x03
    4594:	8f 3f       	cpi	r24, 0xFF	; 255
    4596:	9f 4f       	sbci	r25, 0xFF	; 255
    4598:	af 4f       	sbci	r26, 0xFF	; 255
    459a:	bf 4f       	sbci	r27, 0xFF	; 255
    459c:	11 f4       	brne	.+4      	; 0x45a2 <xTaskCheckForTimeOut+0x8c>
    459e:	19 82       	std	Y+1, r1	; 0x01
    45a0:	5a c0       	rjmp	.+180    	; 0x4656 <xTaskCheckForTimeOut+0x140>
    45a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    45a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    45a6:	fc 01       	movw	r30, r24
    45a8:	90 81       	ld	r25, Z
    45aa:	80 91 90 1b 	lds	r24, 0x1B90	; 0x801b90 <xNumOfOverflows>
    45ae:	98 17       	cp	r25, r24
    45b0:	d1 f0       	breq	.+52     	; 0x45e6 <xTaskCheckForTimeOut+0xd0>
    45b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    45b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    45b6:	fc 01       	movw	r30, r24
    45b8:	21 81       	ldd	r18, Z+1	; 0x01
    45ba:	32 81       	ldd	r19, Z+2	; 0x02
    45bc:	43 81       	ldd	r20, Z+3	; 0x03
    45be:	54 81       	ldd	r21, Z+4	; 0x04
    45c0:	8a 81       	ldd	r24, Y+2	; 0x02
    45c2:	9b 81       	ldd	r25, Y+3	; 0x03
    45c4:	ac 81       	ldd	r26, Y+4	; 0x04
    45c6:	bd 81       	ldd	r27, Y+5	; 0x05
    45c8:	82 17       	cp	r24, r18
    45ca:	93 07       	cpc	r25, r19
    45cc:	a4 07       	cpc	r26, r20
    45ce:	b5 07       	cpc	r27, r21
    45d0:	50 f0       	brcs	.+20     	; 0x45e6 <xTaskCheckForTimeOut+0xd0>
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	89 83       	std	Y+1, r24	; 0x01
    45d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    45d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    45da:	fc 01       	movw	r30, r24
    45dc:	10 82       	st	Z, r1
    45de:	11 82       	std	Z+1, r1	; 0x01
    45e0:	12 82       	std	Z+2, r1	; 0x02
    45e2:	13 82       	std	Z+3, r1	; 0x03
    45e4:	38 c0       	rjmp	.+112    	; 0x4656 <xTaskCheckForTimeOut+0x140>
    45e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    45e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    45ea:	fc 01       	movw	r30, r24
    45ec:	20 81       	ld	r18, Z
    45ee:	31 81       	ldd	r19, Z+1	; 0x01
    45f0:	42 81       	ldd	r20, Z+2	; 0x02
    45f2:	53 81       	ldd	r21, Z+3	; 0x03
    45f4:	8e 81       	ldd	r24, Y+6	; 0x06
    45f6:	9f 81       	ldd	r25, Y+7	; 0x07
    45f8:	a8 85       	ldd	r26, Y+8	; 0x08
    45fa:	b9 85       	ldd	r27, Y+9	; 0x09
    45fc:	82 17       	cp	r24, r18
    45fe:	93 07       	cpc	r25, r19
    4600:	a4 07       	cpc	r26, r20
    4602:	b5 07       	cpc	r27, r21
    4604:	f8 f4       	brcc	.+62     	; 0x4644 <xTaskCheckForTimeOut+0x12e>
    4606:	8c 85       	ldd	r24, Y+12	; 0x0c
    4608:	9d 85       	ldd	r25, Y+13	; 0x0d
    460a:	fc 01       	movw	r30, r24
    460c:	20 81       	ld	r18, Z
    460e:	31 81       	ldd	r19, Z+1	; 0x01
    4610:	42 81       	ldd	r20, Z+2	; 0x02
    4612:	53 81       	ldd	r21, Z+3	; 0x03
    4614:	8e 81       	ldd	r24, Y+6	; 0x06
    4616:	9f 81       	ldd	r25, Y+7	; 0x07
    4618:	a8 85       	ldd	r26, Y+8	; 0x08
    461a:	b9 85       	ldd	r27, Y+9	; 0x09
    461c:	79 01       	movw	r14, r18
    461e:	8a 01       	movw	r16, r20
    4620:	e8 1a       	sub	r14, r24
    4622:	f9 0a       	sbc	r15, r25
    4624:	0a 0b       	sbc	r16, r26
    4626:	1b 0b       	sbc	r17, r27
    4628:	d8 01       	movw	r26, r16
    462a:	c7 01       	movw	r24, r14
    462c:	2c 85       	ldd	r18, Y+12	; 0x0c
    462e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4630:	f9 01       	movw	r30, r18
    4632:	80 83       	st	Z, r24
    4634:	91 83       	std	Z+1, r25	; 0x01
    4636:	a2 83       	std	Z+2, r26	; 0x02
    4638:	b3 83       	std	Z+3, r27	; 0x03
    463a:	8a 85       	ldd	r24, Y+10	; 0x0a
    463c:	9b 85       	ldd	r25, Y+11	; 0x0b
    463e:	48 df       	rcall	.-368    	; 0x44d0 <vTaskInternalSetTimeOutState>
    4640:	19 82       	std	Y+1, r1	; 0x01
    4642:	09 c0       	rjmp	.+18     	; 0x4656 <xTaskCheckForTimeOut+0x140>
    4644:	8c 85       	ldd	r24, Y+12	; 0x0c
    4646:	9d 85       	ldd	r25, Y+13	; 0x0d
    4648:	fc 01       	movw	r30, r24
    464a:	10 82       	st	Z, r1
    464c:	11 82       	std	Z+1, r1	; 0x01
    464e:	12 82       	std	Z+2, r1	; 0x02
    4650:	13 82       	std	Z+3, r1	; 0x03
    4652:	81 e0       	ldi	r24, 0x01	; 1
    4654:	89 83       	std	Y+1, r24	; 0x01
    4656:	0f 90       	pop	r0
    4658:	0f be       	out	0x3f, r0	; 63
    465a:	89 81       	ldd	r24, Y+1	; 0x01
    465c:	2d 96       	adiw	r28, 0x0d	; 13
    465e:	0f b6       	in	r0, 0x3f	; 63
    4660:	f8 94       	cli
    4662:	de bf       	out	0x3e, r29	; 62
    4664:	0f be       	out	0x3f, r0	; 63
    4666:	cd bf       	out	0x3d, r28	; 61
    4668:	df 91       	pop	r29
    466a:	cf 91       	pop	r28
    466c:	1f 91       	pop	r17
    466e:	0f 91       	pop	r16
    4670:	ff 90       	pop	r15
    4672:	ef 90       	pop	r14
    4674:	08 95       	ret

00004676 <vTaskMissedYield>:
    4676:	cf 93       	push	r28
    4678:	df 93       	push	r29
    467a:	cd b7       	in	r28, 0x3d	; 61
    467c:	de b7       	in	r29, 0x3e	; 62
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	80 93 8f 1b 	sts	0x1B8F, r24	; 0x801b8f <xYieldPending>
    4684:	00 00       	nop
    4686:	df 91       	pop	r29
    4688:	cf 91       	pop	r28
    468a:	08 95       	ret

0000468c <prvInitialiseTaskLists>:
    468c:	cf 93       	push	r28
    468e:	df 93       	push	r29
    4690:	1f 92       	push	r1
    4692:	cd b7       	in	r28, 0x3d	; 61
    4694:	de b7       	in	r29, 0x3e	; 62
    4696:	19 82       	std	Y+1, r1	; 0x01
    4698:	10 c0       	rjmp	.+32     	; 0x46ba <prvInitialiseTaskLists+0x2e>
    469a:	89 81       	ldd	r24, Y+1	; 0x01
    469c:	28 2f       	mov	r18, r24
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	4b e0       	ldi	r20, 0x0B	; 11
    46a2:	42 9f       	mul	r20, r18
    46a4:	c0 01       	movw	r24, r0
    46a6:	43 9f       	mul	r20, r19
    46a8:	90 0d       	add	r25, r0
    46aa:	11 24       	eor	r1, r1
    46ac:	86 52       	subi	r24, 0x26	; 38
    46ae:	95 4e       	sbci	r25, 0xE5	; 229
    46b0:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialise>
    46b4:	89 81       	ldd	r24, Y+1	; 0x01
    46b6:	8f 5f       	subi	r24, 0xFF	; 255
    46b8:	89 83       	std	Y+1, r24	; 0x01
    46ba:	89 81       	ldd	r24, Y+1	; 0x01
    46bc:	8a 30       	cpi	r24, 0x0A	; 10
    46be:	68 f3       	brcs	.-38     	; 0x469a <prvInitialiseTaskLists+0xe>
    46c0:	88 e4       	ldi	r24, 0x48	; 72
    46c2:	9b e1       	ldi	r25, 0x1B	; 27
    46c4:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialise>
    46c8:	83 e5       	ldi	r24, 0x53	; 83
    46ca:	9b e1       	ldi	r25, 0x1B	; 27
    46cc:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialise>
    46d0:	82 e6       	ldi	r24, 0x62	; 98
    46d2:	9b e1       	ldi	r25, 0x1B	; 27
    46d4:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialise>
    46d8:	8d e6       	ldi	r24, 0x6D	; 109
    46da:	9b e1       	ldi	r25, 0x1B	; 27
    46dc:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialise>
    46e0:	89 e7       	ldi	r24, 0x79	; 121
    46e2:	9b e1       	ldi	r25, 0x1B	; 27
    46e4:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialise>
    46e8:	88 e4       	ldi	r24, 0x48	; 72
    46ea:	9b e1       	ldi	r25, 0x1B	; 27
    46ec:	90 93 5f 1b 	sts	0x1B5F, r25	; 0x801b5f <pxDelayedTaskList+0x1>
    46f0:	80 93 5e 1b 	sts	0x1B5E, r24	; 0x801b5e <pxDelayedTaskList>
    46f4:	83 e5       	ldi	r24, 0x53	; 83
    46f6:	9b e1       	ldi	r25, 0x1B	; 27
    46f8:	90 93 61 1b 	sts	0x1B61, r25	; 0x801b61 <pxOverflowDelayedTaskList+0x1>
    46fc:	80 93 60 1b 	sts	0x1B60, r24	; 0x801b60 <pxOverflowDelayedTaskList>
    4700:	00 00       	nop
    4702:	0f 90       	pop	r0
    4704:	df 91       	pop	r29
    4706:	cf 91       	pop	r28
    4708:	08 95       	ret

0000470a <prvCheckTasksWaitingTermination>:
    470a:	cf 93       	push	r28
    470c:	df 93       	push	r29
    470e:	1f 92       	push	r1
    4710:	1f 92       	push	r1
    4712:	cd b7       	in	r28, 0x3d	; 61
    4714:	de b7       	in	r29, 0x3e	; 62
    4716:	20 c0       	rjmp	.+64     	; 0x4758 <prvCheckTasksWaitingTermination+0x4e>
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	f8 94       	cli
    471c:	0f 92       	push	r0
    471e:	80 91 74 1b 	lds	r24, 0x1B74	; 0x801b74 <xTasksWaitingTermination+0x7>
    4722:	90 91 75 1b 	lds	r25, 0x1B75	; 0x801b75 <xTasksWaitingTermination+0x8>
    4726:	fc 01       	movw	r30, r24
    4728:	80 85       	ldd	r24, Z+8	; 0x08
    472a:	91 85       	ldd	r25, Z+9	; 0x09
    472c:	9a 83       	std	Y+2, r25	; 0x02
    472e:	89 83       	std	Y+1, r24	; 0x01
    4730:	89 81       	ldd	r24, Y+1	; 0x01
    4732:	9a 81       	ldd	r25, Y+2	; 0x02
    4734:	02 96       	adiw	r24, 0x02	; 2
    4736:	0e 94 08 0a 	call	0x1410	; 0x1410 <uxListRemove>
    473a:	80 91 84 1b 	lds	r24, 0x1B84	; 0x801b84 <uxCurrentNumberOfTasks>
    473e:	81 50       	subi	r24, 0x01	; 1
    4740:	80 93 84 1b 	sts	0x1B84, r24	; 0x801b84 <uxCurrentNumberOfTasks>
    4744:	80 91 78 1b 	lds	r24, 0x1B78	; 0x801b78 <uxDeletedTasksWaitingCleanUp>
    4748:	81 50       	subi	r24, 0x01	; 1
    474a:	80 93 78 1b 	sts	0x1B78, r24	; 0x801b78 <uxDeletedTasksWaitingCleanUp>
    474e:	0f 90       	pop	r0
    4750:	0f be       	out	0x3f, r0	; 63
    4752:	89 81       	ldd	r24, Y+1	; 0x01
    4754:	9a 81       	ldd	r25, Y+2	; 0x02
    4756:	0a d0       	rcall	.+20     	; 0x476c <prvDeleteTCB>
    4758:	80 91 78 1b 	lds	r24, 0x1B78	; 0x801b78 <uxDeletedTasksWaitingCleanUp>
    475c:	88 23       	and	r24, r24
    475e:	e1 f6       	brne	.-72     	; 0x4718 <prvCheckTasksWaitingTermination+0xe>
    4760:	00 00       	nop
    4762:	0f 90       	pop	r0
    4764:	0f 90       	pop	r0
    4766:	df 91       	pop	r29
    4768:	cf 91       	pop	r28
    476a:	08 95       	ret

0000476c <prvDeleteTCB>:
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
    4770:	1f 92       	push	r1
    4772:	1f 92       	push	r1
    4774:	cd b7       	in	r28, 0x3d	; 61
    4776:	de b7       	in	r29, 0x3e	; 62
    4778:	9a 83       	std	Y+2, r25	; 0x02
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	9a 81       	ldd	r25, Y+2	; 0x02
    4780:	fc 01       	movw	r30, r24
    4782:	83 8d       	ldd	r24, Z+27	; 0x1b
    4784:	94 8d       	ldd	r25, Z+28	; 0x1c
    4786:	0e 94 91 07 	call	0xf22	; 0xf22 <vPortFree>
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	9a 81       	ldd	r25, Y+2	; 0x02
    478e:	0e 94 91 07 	call	0xf22	; 0xf22 <vPortFree>
    4792:	00 00       	nop
    4794:	0f 90       	pop	r0
    4796:	0f 90       	pop	r0
    4798:	df 91       	pop	r29
    479a:	cf 91       	pop	r28
    479c:	08 95       	ret

0000479e <prvResetNextTaskUnblockTime>:
    479e:	cf 93       	push	r28
    47a0:	df 93       	push	r29
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	80 91 5e 1b 	lds	r24, 0x1B5E	; 0x801b5e <pxDelayedTaskList>
    47aa:	90 91 5f 1b 	lds	r25, 0x1B5F	; 0x801b5f <pxDelayedTaskList+0x1>
    47ae:	fc 01       	movw	r30, r24
    47b0:	80 81       	ld	r24, Z
    47b2:	88 23       	and	r24, r24
    47b4:	61 f4       	brne	.+24     	; 0x47ce <prvResetNextTaskUnblockTime+0x30>
    47b6:	8f ef       	ldi	r24, 0xFF	; 255
    47b8:	9f ef       	ldi	r25, 0xFF	; 255
    47ba:	dc 01       	movw	r26, r24
    47bc:	80 93 92 1b 	sts	0x1B92, r24	; 0x801b92 <xNextTaskUnblockTime>
    47c0:	90 93 93 1b 	sts	0x1B93, r25	; 0x801b93 <xNextTaskUnblockTime+0x1>
    47c4:	a0 93 94 1b 	sts	0x1B94, r26	; 0x801b94 <xNextTaskUnblockTime+0x2>
    47c8:	b0 93 95 1b 	sts	0x1B95, r27	; 0x801b95 <xNextTaskUnblockTime+0x3>
    47cc:	14 c0       	rjmp	.+40     	; 0x47f6 <prvResetNextTaskUnblockTime+0x58>
    47ce:	80 91 5e 1b 	lds	r24, 0x1B5E	; 0x801b5e <pxDelayedTaskList>
    47d2:	90 91 5f 1b 	lds	r25, 0x1B5F	; 0x801b5f <pxDelayedTaskList+0x1>
    47d6:	fc 01       	movw	r30, r24
    47d8:	87 81       	ldd	r24, Z+7	; 0x07
    47da:	90 85       	ldd	r25, Z+8	; 0x08
    47dc:	fc 01       	movw	r30, r24
    47de:	80 81       	ld	r24, Z
    47e0:	91 81       	ldd	r25, Z+1	; 0x01
    47e2:	a2 81       	ldd	r26, Z+2	; 0x02
    47e4:	b3 81       	ldd	r27, Z+3	; 0x03
    47e6:	80 93 92 1b 	sts	0x1B92, r24	; 0x801b92 <xNextTaskUnblockTime>
    47ea:	90 93 93 1b 	sts	0x1B93, r25	; 0x801b93 <xNextTaskUnblockTime+0x1>
    47ee:	a0 93 94 1b 	sts	0x1B94, r26	; 0x801b94 <xNextTaskUnblockTime+0x2>
    47f2:	b0 93 95 1b 	sts	0x1B95, r27	; 0x801b95 <xNextTaskUnblockTime+0x3>
    47f6:	00 00       	nop
    47f8:	df 91       	pop	r29
    47fa:	cf 91       	pop	r28
    47fc:	08 95       	ret

000047fe <xTaskGetCurrentTaskHandle>:
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	1f 92       	push	r1
    4804:	1f 92       	push	r1
    4806:	cd b7       	in	r28, 0x3d	; 61
    4808:	de b7       	in	r29, 0x3e	; 62
    480a:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    480e:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4812:	9a 83       	std	Y+2, r25	; 0x02
    4814:	89 83       	std	Y+1, r24	; 0x01
    4816:	89 81       	ldd	r24, Y+1	; 0x01
    4818:	9a 81       	ldd	r25, Y+2	; 0x02
    481a:	0f 90       	pop	r0
    481c:	0f 90       	pop	r0
    481e:	df 91       	pop	r29
    4820:	cf 91       	pop	r28
    4822:	08 95       	ret

00004824 <xTaskGetSchedulerState>:
    4824:	cf 93       	push	r28
    4826:	df 93       	push	r29
    4828:	1f 92       	push	r1
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	80 91 8a 1b 	lds	r24, 0x1B8A	; 0x801b8a <xSchedulerRunning>
    4832:	88 23       	and	r24, r24
    4834:	19 f4       	brne	.+6      	; 0x483c <xTaskGetSchedulerState+0x18>
    4836:	81 e0       	ldi	r24, 0x01	; 1
    4838:	89 83       	std	Y+1, r24	; 0x01
    483a:	08 c0       	rjmp	.+16     	; 0x484c <xTaskGetSchedulerState+0x28>
    483c:	80 91 98 1b 	lds	r24, 0x1B98	; 0x801b98 <uxSchedulerSuspended>
    4840:	88 23       	and	r24, r24
    4842:	19 f4       	brne	.+6      	; 0x484a <xTaskGetSchedulerState+0x26>
    4844:	82 e0       	ldi	r24, 0x02	; 2
    4846:	89 83       	std	Y+1, r24	; 0x01
    4848:	01 c0       	rjmp	.+2      	; 0x484c <xTaskGetSchedulerState+0x28>
    484a:	19 82       	std	Y+1, r1	; 0x01
    484c:	89 81       	ldd	r24, Y+1	; 0x01
    484e:	0f 90       	pop	r0
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	08 95       	ret

00004856 <xTaskPriorityDisinherit>:
    4856:	ef 92       	push	r14
    4858:	ff 92       	push	r15
    485a:	0f 93       	push	r16
    485c:	1f 93       	push	r17
    485e:	cf 93       	push	r28
    4860:	df 93       	push	r29
    4862:	cd b7       	in	r28, 0x3d	; 61
    4864:	de b7       	in	r29, 0x3e	; 62
    4866:	27 97       	sbiw	r28, 0x07	; 7
    4868:	0f b6       	in	r0, 0x3f	; 63
    486a:	f8 94       	cli
    486c:	de bf       	out	0x3e, r29	; 62
    486e:	0f be       	out	0x3f, r0	; 63
    4870:	cd bf       	out	0x3d, r28	; 61
    4872:	9f 83       	std	Y+7, r25	; 0x07
    4874:	8e 83       	std	Y+6, r24	; 0x06
    4876:	8e 81       	ldd	r24, Y+6	; 0x06
    4878:	9f 81       	ldd	r25, Y+7	; 0x07
    487a:	9b 83       	std	Y+3, r25	; 0x03
    487c:	8a 83       	std	Y+2, r24	; 0x02
    487e:	19 82       	std	Y+1, r1	; 0x01
    4880:	8e 81       	ldd	r24, Y+6	; 0x06
    4882:	9f 81       	ldd	r25, Y+7	; 0x07
    4884:	89 2b       	or	r24, r25
    4886:	09 f4       	brne	.+2      	; 0x488a <xTaskPriorityDisinherit+0x34>
    4888:	bf c0       	rjmp	.+382    	; 0x4a08 <xTaskPriorityDisinherit+0x1b2>
    488a:	8a 81       	ldd	r24, Y+2	; 0x02
    488c:	9b 81       	ldd	r25, Y+3	; 0x03
    488e:	fc 01       	movw	r30, r24
    4890:	86 a5       	ldd	r24, Z+46	; 0x2e
    4892:	2f ef       	ldi	r18, 0xFF	; 255
    4894:	28 0f       	add	r18, r24
    4896:	8a 81       	ldd	r24, Y+2	; 0x02
    4898:	9b 81       	ldd	r25, Y+3	; 0x03
    489a:	fc 01       	movw	r30, r24
    489c:	26 a7       	std	Z+46, r18	; 0x2e
    489e:	8a 81       	ldd	r24, Y+2	; 0x02
    48a0:	9b 81       	ldd	r25, Y+3	; 0x03
    48a2:	fc 01       	movw	r30, r24
    48a4:	22 8d       	ldd	r18, Z+26	; 0x1a
    48a6:	8a 81       	ldd	r24, Y+2	; 0x02
    48a8:	9b 81       	ldd	r25, Y+3	; 0x03
    48aa:	fc 01       	movw	r30, r24
    48ac:	85 a5       	ldd	r24, Z+45	; 0x2d
    48ae:	28 17       	cp	r18, r24
    48b0:	09 f4       	brne	.+2      	; 0x48b4 <xTaskPriorityDisinherit+0x5e>
    48b2:	aa c0       	rjmp	.+340    	; 0x4a08 <xTaskPriorityDisinherit+0x1b2>
    48b4:	8a 81       	ldd	r24, Y+2	; 0x02
    48b6:	9b 81       	ldd	r25, Y+3	; 0x03
    48b8:	fc 01       	movw	r30, r24
    48ba:	86 a5       	ldd	r24, Z+46	; 0x2e
    48bc:	88 23       	and	r24, r24
    48be:	09 f0       	breq	.+2      	; 0x48c2 <xTaskPriorityDisinherit+0x6c>
    48c0:	a3 c0       	rjmp	.+326    	; 0x4a08 <xTaskPriorityDisinherit+0x1b2>
    48c2:	8a 81       	ldd	r24, Y+2	; 0x02
    48c4:	9b 81       	ldd	r25, Y+3	; 0x03
    48c6:	02 96       	adiw	r24, 0x02	; 2
    48c8:	0e 94 08 0a 	call	0x1410	; 0x1410 <uxListRemove>
    48cc:	8a 81       	ldd	r24, Y+2	; 0x02
    48ce:	9b 81       	ldd	r25, Y+3	; 0x03
    48d0:	fc 01       	movw	r30, r24
    48d2:	25 a5       	ldd	r18, Z+45	; 0x2d
    48d4:	8a 81       	ldd	r24, Y+2	; 0x02
    48d6:	9b 81       	ldd	r25, Y+3	; 0x03
    48d8:	fc 01       	movw	r30, r24
    48da:	22 8f       	std	Z+26, r18	; 0x1a
    48dc:	8a 81       	ldd	r24, Y+2	; 0x02
    48de:	9b 81       	ldd	r25, Y+3	; 0x03
    48e0:	fc 01       	movw	r30, r24
    48e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    48e4:	88 2f       	mov	r24, r24
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	a0 e0       	ldi	r26, 0x00	; 0
    48ea:	b0 e0       	ldi	r27, 0x00	; 0
    48ec:	2a e0       	ldi	r18, 0x0A	; 10
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	40 e0       	ldi	r20, 0x00	; 0
    48f2:	50 e0       	ldi	r21, 0x00	; 0
    48f4:	79 01       	movw	r14, r18
    48f6:	8a 01       	movw	r16, r20
    48f8:	e8 1a       	sub	r14, r24
    48fa:	f9 0a       	sbc	r15, r25
    48fc:	0a 0b       	sbc	r16, r26
    48fe:	1b 0b       	sbc	r17, r27
    4900:	d8 01       	movw	r26, r16
    4902:	c7 01       	movw	r24, r14
    4904:	2a 81       	ldd	r18, Y+2	; 0x02
    4906:	3b 81       	ldd	r19, Y+3	; 0x03
    4908:	f9 01       	movw	r30, r18
    490a:	86 87       	std	Z+14, r24	; 0x0e
    490c:	97 87       	std	Z+15, r25	; 0x0f
    490e:	a0 8b       	std	Z+16, r26	; 0x10
    4910:	b1 8b       	std	Z+17, r27	; 0x11
    4912:	8a 81       	ldd	r24, Y+2	; 0x02
    4914:	9b 81       	ldd	r25, Y+3	; 0x03
    4916:	fc 01       	movw	r30, r24
    4918:	92 8d       	ldd	r25, Z+26	; 0x1a
    491a:	80 91 89 1b 	lds	r24, 0x1B89	; 0x801b89 <uxTopReadyPriority>
    491e:	89 17       	cp	r24, r25
    4920:	30 f4       	brcc	.+12     	; 0x492e <xTaskPriorityDisinherit+0xd8>
    4922:	8a 81       	ldd	r24, Y+2	; 0x02
    4924:	9b 81       	ldd	r25, Y+3	; 0x03
    4926:	fc 01       	movw	r30, r24
    4928:	82 8d       	ldd	r24, Z+26	; 0x1a
    492a:	80 93 89 1b 	sts	0x1B89, r24	; 0x801b89 <uxTopReadyPriority>
    492e:	8a 81       	ldd	r24, Y+2	; 0x02
    4930:	9b 81       	ldd	r25, Y+3	; 0x03
    4932:	fc 01       	movw	r30, r24
    4934:	82 8d       	ldd	r24, Z+26	; 0x1a
    4936:	28 2f       	mov	r18, r24
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	4b e0       	ldi	r20, 0x0B	; 11
    493c:	42 9f       	mul	r20, r18
    493e:	c0 01       	movw	r24, r0
    4940:	43 9f       	mul	r20, r19
    4942:	90 0d       	add	r25, r0
    4944:	11 24       	eor	r1, r1
    4946:	85 52       	subi	r24, 0x25	; 37
    4948:	95 4e       	sbci	r25, 0xE5	; 229
    494a:	fc 01       	movw	r30, r24
    494c:	80 81       	ld	r24, Z
    494e:	91 81       	ldd	r25, Z+1	; 0x01
    4950:	9d 83       	std	Y+5, r25	; 0x05
    4952:	8c 83       	std	Y+4, r24	; 0x04
    4954:	8a 81       	ldd	r24, Y+2	; 0x02
    4956:	9b 81       	ldd	r25, Y+3	; 0x03
    4958:	2c 81       	ldd	r18, Y+4	; 0x04
    495a:	3d 81       	ldd	r19, Y+5	; 0x05
    495c:	fc 01       	movw	r30, r24
    495e:	37 83       	std	Z+7, r19	; 0x07
    4960:	26 83       	std	Z+6, r18	; 0x06
    4962:	8c 81       	ldd	r24, Y+4	; 0x04
    4964:	9d 81       	ldd	r25, Y+5	; 0x05
    4966:	fc 01       	movw	r30, r24
    4968:	26 81       	ldd	r18, Z+6	; 0x06
    496a:	37 81       	ldd	r19, Z+7	; 0x07
    496c:	8a 81       	ldd	r24, Y+2	; 0x02
    496e:	9b 81       	ldd	r25, Y+3	; 0x03
    4970:	fc 01       	movw	r30, r24
    4972:	31 87       	std	Z+9, r19	; 0x09
    4974:	20 87       	std	Z+8, r18	; 0x08
    4976:	8c 81       	ldd	r24, Y+4	; 0x04
    4978:	9d 81       	ldd	r25, Y+5	; 0x05
    497a:	fc 01       	movw	r30, r24
    497c:	86 81       	ldd	r24, Z+6	; 0x06
    497e:	97 81       	ldd	r25, Z+7	; 0x07
    4980:	2a 81       	ldd	r18, Y+2	; 0x02
    4982:	3b 81       	ldd	r19, Y+3	; 0x03
    4984:	2e 5f       	subi	r18, 0xFE	; 254
    4986:	3f 4f       	sbci	r19, 0xFF	; 255
    4988:	fc 01       	movw	r30, r24
    498a:	35 83       	std	Z+5, r19	; 0x05
    498c:	24 83       	std	Z+4, r18	; 0x04
    498e:	8a 81       	ldd	r24, Y+2	; 0x02
    4990:	9b 81       	ldd	r25, Y+3	; 0x03
    4992:	9c 01       	movw	r18, r24
    4994:	2e 5f       	subi	r18, 0xFE	; 254
    4996:	3f 4f       	sbci	r19, 0xFF	; 255
    4998:	8c 81       	ldd	r24, Y+4	; 0x04
    499a:	9d 81       	ldd	r25, Y+5	; 0x05
    499c:	fc 01       	movw	r30, r24
    499e:	37 83       	std	Z+7, r19	; 0x07
    49a0:	26 83       	std	Z+6, r18	; 0x06
    49a2:	8a 81       	ldd	r24, Y+2	; 0x02
    49a4:	9b 81       	ldd	r25, Y+3	; 0x03
    49a6:	fc 01       	movw	r30, r24
    49a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    49aa:	28 2f       	mov	r18, r24
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	4b e0       	ldi	r20, 0x0B	; 11
    49b0:	42 9f       	mul	r20, r18
    49b2:	c0 01       	movw	r24, r0
    49b4:	43 9f       	mul	r20, r19
    49b6:	90 0d       	add	r25, r0
    49b8:	11 24       	eor	r1, r1
    49ba:	9c 01       	movw	r18, r24
    49bc:	26 52       	subi	r18, 0x26	; 38
    49be:	35 4e       	sbci	r19, 0xE5	; 229
    49c0:	8a 81       	ldd	r24, Y+2	; 0x02
    49c2:	9b 81       	ldd	r25, Y+3	; 0x03
    49c4:	fc 01       	movw	r30, r24
    49c6:	35 87       	std	Z+13, r19	; 0x0d
    49c8:	24 87       	std	Z+12, r18	; 0x0c
    49ca:	8a 81       	ldd	r24, Y+2	; 0x02
    49cc:	9b 81       	ldd	r25, Y+3	; 0x03
    49ce:	fc 01       	movw	r30, r24
    49d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    49d2:	88 2f       	mov	r24, r24
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	4b e0       	ldi	r20, 0x0B	; 11
    49d8:	48 9f       	mul	r20, r24
    49da:	90 01       	movw	r18, r0
    49dc:	49 9f       	mul	r20, r25
    49de:	30 0d       	add	r19, r0
    49e0:	11 24       	eor	r1, r1
    49e2:	26 52       	subi	r18, 0x26	; 38
    49e4:	35 4e       	sbci	r19, 0xE5	; 229
    49e6:	f9 01       	movw	r30, r18
    49e8:	20 81       	ld	r18, Z
    49ea:	41 e0       	ldi	r20, 0x01	; 1
    49ec:	42 0f       	add	r20, r18
    49ee:	5b e0       	ldi	r21, 0x0B	; 11
    49f0:	58 9f       	mul	r21, r24
    49f2:	90 01       	movw	r18, r0
    49f4:	59 9f       	mul	r21, r25
    49f6:	30 0d       	add	r19, r0
    49f8:	11 24       	eor	r1, r1
    49fa:	c9 01       	movw	r24, r18
    49fc:	86 52       	subi	r24, 0x26	; 38
    49fe:	95 4e       	sbci	r25, 0xE5	; 229
    4a00:	fc 01       	movw	r30, r24
    4a02:	40 83       	st	Z, r20
    4a04:	81 e0       	ldi	r24, 0x01	; 1
    4a06:	89 83       	std	Y+1, r24	; 0x01
    4a08:	89 81       	ldd	r24, Y+1	; 0x01
    4a0a:	27 96       	adiw	r28, 0x07	; 7
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	f8 94       	cli
    4a10:	de bf       	out	0x3e, r29	; 62
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	cd bf       	out	0x3d, r28	; 61
    4a16:	df 91       	pop	r29
    4a18:	cf 91       	pop	r28
    4a1a:	1f 91       	pop	r17
    4a1c:	0f 91       	pop	r16
    4a1e:	ff 90       	pop	r15
    4a20:	ef 90       	pop	r14
    4a22:	08 95       	ret

00004a24 <uxTaskResetEventItemValue>:
    4a24:	ef 92       	push	r14
    4a26:	ff 92       	push	r15
    4a28:	0f 93       	push	r16
    4a2a:	1f 93       	push	r17
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
    4a30:	00 d0       	rcall	.+0      	; 0x4a32 <uxTaskResetEventItemValue+0xe>
    4a32:	1f 92       	push	r1
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
    4a38:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4a3c:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4a40:	fc 01       	movw	r30, r24
    4a42:	86 85       	ldd	r24, Z+14	; 0x0e
    4a44:	97 85       	ldd	r25, Z+15	; 0x0f
    4a46:	a0 89       	ldd	r26, Z+16	; 0x10
    4a48:	b1 89       	ldd	r27, Z+17	; 0x11
    4a4a:	89 83       	std	Y+1, r24	; 0x01
    4a4c:	9a 83       	std	Y+2, r25	; 0x02
    4a4e:	ab 83       	std	Y+3, r26	; 0x03
    4a50:	bc 83       	std	Y+4, r27	; 0x04
    4a52:	60 91 d8 1a 	lds	r22, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4a56:	70 91 d9 1a 	lds	r23, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4a5a:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4a5e:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4a62:	fc 01       	movw	r30, r24
    4a64:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a66:	88 2f       	mov	r24, r24
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	a0 e0       	ldi	r26, 0x00	; 0
    4a6c:	b0 e0       	ldi	r27, 0x00	; 0
    4a6e:	2a e0       	ldi	r18, 0x0A	; 10
    4a70:	30 e0       	ldi	r19, 0x00	; 0
    4a72:	40 e0       	ldi	r20, 0x00	; 0
    4a74:	50 e0       	ldi	r21, 0x00	; 0
    4a76:	79 01       	movw	r14, r18
    4a78:	8a 01       	movw	r16, r20
    4a7a:	e8 1a       	sub	r14, r24
    4a7c:	f9 0a       	sbc	r15, r25
    4a7e:	0a 0b       	sbc	r16, r26
    4a80:	1b 0b       	sbc	r17, r27
    4a82:	d8 01       	movw	r26, r16
    4a84:	c7 01       	movw	r24, r14
    4a86:	fb 01       	movw	r30, r22
    4a88:	86 87       	std	Z+14, r24	; 0x0e
    4a8a:	97 87       	std	Z+15, r25	; 0x0f
    4a8c:	a0 8b       	std	Z+16, r26	; 0x10
    4a8e:	b1 8b       	std	Z+17, r27	; 0x11
    4a90:	89 81       	ldd	r24, Y+1	; 0x01
    4a92:	9a 81       	ldd	r25, Y+2	; 0x02
    4a94:	ab 81       	ldd	r26, Y+3	; 0x03
    4a96:	bc 81       	ldd	r27, Y+4	; 0x04
    4a98:	bc 01       	movw	r22, r24
    4a9a:	cd 01       	movw	r24, r26
    4a9c:	0f 90       	pop	r0
    4a9e:	0f 90       	pop	r0
    4aa0:	0f 90       	pop	r0
    4aa2:	0f 90       	pop	r0
    4aa4:	df 91       	pop	r29
    4aa6:	cf 91       	pop	r28
    4aa8:	1f 91       	pop	r17
    4aaa:	0f 91       	pop	r16
    4aac:	ff 90       	pop	r15
    4aae:	ef 90       	pop	r14
    4ab0:	08 95       	ret

00004ab2 <xTaskGenericNotifyWait>:
    4ab2:	af 92       	push	r10
    4ab4:	bf 92       	push	r11
    4ab6:	cf 92       	push	r12
    4ab8:	df 92       	push	r13
    4aba:	ef 92       	push	r14
    4abc:	ff 92       	push	r15
    4abe:	0f 93       	push	r16
    4ac0:	1f 93       	push	r17
    4ac2:	cf 93       	push	r28
    4ac4:	df 93       	push	r29
    4ac6:	cd b7       	in	r28, 0x3d	; 61
    4ac8:	de b7       	in	r29, 0x3e	; 62
    4aca:	60 97       	sbiw	r28, 0x10	; 16
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	8a 83       	std	Y+2, r24	; 0x02
    4ad8:	4b 83       	std	Y+3, r20	; 0x03
    4ada:	5c 83       	std	Y+4, r21	; 0x04
    4adc:	6d 83       	std	Y+5, r22	; 0x05
    4ade:	7e 83       	std	Y+6, r23	; 0x06
    4ae0:	0f 83       	std	Y+7, r16	; 0x07
    4ae2:	18 87       	std	Y+8, r17	; 0x08
    4ae4:	29 87       	std	Y+9, r18	; 0x09
    4ae6:	3a 87       	std	Y+10, r19	; 0x0a
    4ae8:	fc 86       	std	Y+12, r15	; 0x0c
    4aea:	eb 86       	std	Y+11, r14	; 0x0b
    4aec:	ad 86       	std	Y+13, r10	; 0x0d
    4aee:	be 86       	std	Y+14, r11	; 0x0e
    4af0:	cf 86       	std	Y+15, r12	; 0x0f
    4af2:	d8 8a       	std	Y+16, r13	; 0x10
    4af4:	0f b6       	in	r0, 0x3f	; 63
    4af6:	f8 94       	cli
    4af8:	0f 92       	push	r0
    4afa:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4afe:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4b02:	8a 81       	ldd	r24, Y+2	; 0x02
    4b04:	88 2f       	mov	r24, r24
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	82 0f       	add	r24, r18
    4b0a:	93 1f       	adc	r25, r19
    4b0c:	c3 96       	adiw	r24, 0x33	; 51
    4b0e:	dc 01       	movw	r26, r24
    4b10:	8c 91       	ld	r24, X
    4b12:	82 30       	cpi	r24, 0x02	; 2
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <xTaskGenericNotifyWait+0x66>
    4b16:	4f c0       	rjmp	.+158    	; 0x4bb6 <xTaskGenericNotifyWait+0x104>
    4b18:	60 91 d8 1a 	lds	r22, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4b1c:	70 91 d9 1a 	lds	r23, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4b20:	8a 81       	ldd	r24, Y+2	; 0x02
    4b22:	e8 2f       	mov	r30, r24
    4b24:	f0 e0       	ldi	r31, 0x00	; 0
    4b26:	8a 81       	ldd	r24, Y+2	; 0x02
    4b28:	88 2f       	mov	r24, r24
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	88 0f       	add	r24, r24
    4b2e:	99 1f       	adc	r25, r25
    4b30:	88 0f       	add	r24, r24
    4b32:	99 1f       	adc	r25, r25
    4b34:	86 0f       	add	r24, r22
    4b36:	97 1f       	adc	r25, r23
    4b38:	8f 96       	adiw	r24, 0x2f	; 47
    4b3a:	dc 01       	movw	r26, r24
    4b3c:	2d 91       	ld	r18, X+
    4b3e:	3d 91       	ld	r19, X+
    4b40:	4d 91       	ld	r20, X+
    4b42:	5c 91       	ld	r21, X
    4b44:	8b 81       	ldd	r24, Y+3	; 0x03
    4b46:	9c 81       	ldd	r25, Y+4	; 0x04
    4b48:	ad 81       	ldd	r26, Y+5	; 0x05
    4b4a:	be 81       	ldd	r27, Y+6	; 0x06
    4b4c:	80 95       	com	r24
    4b4e:	90 95       	com	r25
    4b50:	a0 95       	com	r26
    4b52:	b0 95       	com	r27
    4b54:	82 23       	and	r24, r18
    4b56:	93 23       	and	r25, r19
    4b58:	a4 23       	and	r26, r20
    4b5a:	b5 23       	and	r27, r21
    4b5c:	9f 01       	movw	r18, r30
    4b5e:	22 0f       	add	r18, r18
    4b60:	33 1f       	adc	r19, r19
    4b62:	22 0f       	add	r18, r18
    4b64:	33 1f       	adc	r19, r19
    4b66:	26 0f       	add	r18, r22
    4b68:	37 1f       	adc	r19, r23
    4b6a:	21 5d       	subi	r18, 0xD1	; 209
    4b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6e:	f9 01       	movw	r30, r18
    4b70:	80 83       	st	Z, r24
    4b72:	91 83       	std	Z+1, r25	; 0x01
    4b74:	a2 83       	std	Z+2, r26	; 0x02
    4b76:	b3 83       	std	Z+3, r27	; 0x03
    4b78:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4b7c:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4b80:	8a 81       	ldd	r24, Y+2	; 0x02
    4b82:	88 2f       	mov	r24, r24
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	82 0f       	add	r24, r18
    4b88:	93 1f       	adc	r25, r19
    4b8a:	c3 96       	adiw	r24, 0x33	; 51
    4b8c:	21 e0       	ldi	r18, 0x01	; 1
    4b8e:	dc 01       	movw	r26, r24
    4b90:	2c 93       	st	X, r18
    4b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b96:	af 85       	ldd	r26, Y+15	; 0x0f
    4b98:	b8 89       	ldd	r27, Y+16	; 0x10
    4b9a:	89 2b       	or	r24, r25
    4b9c:	8a 2b       	or	r24, r26
    4b9e:	8b 2b       	or	r24, r27
    4ba0:	51 f0       	breq	.+20     	; 0x4bb6 <xTaskGenericNotifyWait+0x104>
    4ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ba6:	af 85       	ldd	r26, Y+15	; 0x0f
    4ba8:	b8 89       	ldd	r27, Y+16	; 0x10
    4baa:	41 e0       	ldi	r20, 0x01	; 1
    4bac:	bc 01       	movw	r22, r24
    4bae:	cd 01       	movw	r24, r26
    4bb0:	b3 d4       	rcall	.+2406   	; 0x5518 <prvAddCurrentTaskToDelayedList>
    4bb2:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
    4bb6:	0f 90       	pop	r0
    4bb8:	0f be       	out	0x3f, r0	; 63
    4bba:	0f b6       	in	r0, 0x3f	; 63
    4bbc:	f8 94       	cli
    4bbe:	0f 92       	push	r0
    4bc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bc4:	89 2b       	or	r24, r25
    4bc6:	d1 f0       	breq	.+52     	; 0x4bfc <xTaskGenericNotifyWait+0x14a>
    4bc8:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4bcc:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd2:	88 2f       	mov	r24, r24
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	88 0f       	add	r24, r24
    4bd8:	99 1f       	adc	r25, r25
    4bda:	88 0f       	add	r24, r24
    4bdc:	99 1f       	adc	r25, r25
    4bde:	82 0f       	add	r24, r18
    4be0:	93 1f       	adc	r25, r19
    4be2:	8f 96       	adiw	r24, 0x2f	; 47
    4be4:	fc 01       	movw	r30, r24
    4be6:	80 81       	ld	r24, Z
    4be8:	91 81       	ldd	r25, Z+1	; 0x01
    4bea:	a2 81       	ldd	r26, Z+2	; 0x02
    4bec:	b3 81       	ldd	r27, Z+3	; 0x03
    4bee:	2b 85       	ldd	r18, Y+11	; 0x0b
    4bf0:	3c 85       	ldd	r19, Y+12	; 0x0c
    4bf2:	f9 01       	movw	r30, r18
    4bf4:	80 83       	st	Z, r24
    4bf6:	91 83       	std	Z+1, r25	; 0x01
    4bf8:	a2 83       	std	Z+2, r26	; 0x02
    4bfa:	b3 83       	std	Z+3, r27	; 0x03
    4bfc:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4c00:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4c04:	8a 81       	ldd	r24, Y+2	; 0x02
    4c06:	88 2f       	mov	r24, r24
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	82 0f       	add	r24, r18
    4c0c:	93 1f       	adc	r25, r19
    4c0e:	c3 96       	adiw	r24, 0x33	; 51
    4c10:	dc 01       	movw	r26, r24
    4c12:	8c 91       	ld	r24, X
    4c14:	82 30       	cpi	r24, 0x02	; 2
    4c16:	11 f0       	breq	.+4      	; 0x4c1c <xTaskGenericNotifyWait+0x16a>
    4c18:	19 82       	std	Y+1, r1	; 0x01
    4c1a:	32 c0       	rjmp	.+100    	; 0x4c80 <xTaskGenericNotifyWait+0x1ce>
    4c1c:	60 91 d8 1a 	lds	r22, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4c20:	70 91 d9 1a 	lds	r23, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4c24:	8a 81       	ldd	r24, Y+2	; 0x02
    4c26:	e8 2f       	mov	r30, r24
    4c28:	f0 e0       	ldi	r31, 0x00	; 0
    4c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2c:	88 2f       	mov	r24, r24
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	88 0f       	add	r24, r24
    4c32:	99 1f       	adc	r25, r25
    4c34:	88 0f       	add	r24, r24
    4c36:	99 1f       	adc	r25, r25
    4c38:	86 0f       	add	r24, r22
    4c3a:	97 1f       	adc	r25, r23
    4c3c:	8f 96       	adiw	r24, 0x2f	; 47
    4c3e:	dc 01       	movw	r26, r24
    4c40:	2d 91       	ld	r18, X+
    4c42:	3d 91       	ld	r19, X+
    4c44:	4d 91       	ld	r20, X+
    4c46:	5c 91       	ld	r21, X
    4c48:	8f 81       	ldd	r24, Y+7	; 0x07
    4c4a:	98 85       	ldd	r25, Y+8	; 0x08
    4c4c:	a9 85       	ldd	r26, Y+9	; 0x09
    4c4e:	ba 85       	ldd	r27, Y+10	; 0x0a
    4c50:	80 95       	com	r24
    4c52:	90 95       	com	r25
    4c54:	a0 95       	com	r26
    4c56:	b0 95       	com	r27
    4c58:	82 23       	and	r24, r18
    4c5a:	93 23       	and	r25, r19
    4c5c:	a4 23       	and	r26, r20
    4c5e:	b5 23       	and	r27, r21
    4c60:	9f 01       	movw	r18, r30
    4c62:	22 0f       	add	r18, r18
    4c64:	33 1f       	adc	r19, r19
    4c66:	22 0f       	add	r18, r18
    4c68:	33 1f       	adc	r19, r19
    4c6a:	26 0f       	add	r18, r22
    4c6c:	37 1f       	adc	r19, r23
    4c6e:	21 5d       	subi	r18, 0xD1	; 209
    4c70:	3f 4f       	sbci	r19, 0xFF	; 255
    4c72:	f9 01       	movw	r30, r18
    4c74:	80 83       	st	Z, r24
    4c76:	91 83       	std	Z+1, r25	; 0x01
    4c78:	a2 83       	std	Z+2, r26	; 0x02
    4c7a:	b3 83       	std	Z+3, r27	; 0x03
    4c7c:	81 e0       	ldi	r24, 0x01	; 1
    4c7e:	89 83       	std	Y+1, r24	; 0x01
    4c80:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    4c84:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    4c88:	8a 81       	ldd	r24, Y+2	; 0x02
    4c8a:	88 2f       	mov	r24, r24
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	82 0f       	add	r24, r18
    4c90:	93 1f       	adc	r25, r19
    4c92:	c3 96       	adiw	r24, 0x33	; 51
    4c94:	dc 01       	movw	r26, r24
    4c96:	1c 92       	st	X, r1
    4c98:	0f 90       	pop	r0
    4c9a:	0f be       	out	0x3f, r0	; 63
    4c9c:	89 81       	ldd	r24, Y+1	; 0x01
    4c9e:	60 96       	adiw	r28, 0x10	; 16
    4ca0:	0f b6       	in	r0, 0x3f	; 63
    4ca2:	f8 94       	cli
    4ca4:	de bf       	out	0x3e, r29	; 62
    4ca6:	0f be       	out	0x3f, r0	; 63
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	df 91       	pop	r29
    4cac:	cf 91       	pop	r28
    4cae:	1f 91       	pop	r17
    4cb0:	0f 91       	pop	r16
    4cb2:	ff 90       	pop	r15
    4cb4:	ef 90       	pop	r14
    4cb6:	df 90       	pop	r13
    4cb8:	cf 90       	pop	r12
    4cba:	bf 90       	pop	r11
    4cbc:	af 90       	pop	r10
    4cbe:	08 95       	ret

00004cc0 <xTaskGenericNotify>:
    4cc0:	ef 92       	push	r14
    4cc2:	ff 92       	push	r15
    4cc4:	0f 93       	push	r16
    4cc6:	cf 93       	push	r28
    4cc8:	df 93       	push	r29
    4cca:	cd b7       	in	r28, 0x3d	; 61
    4ccc:	de b7       	in	r29, 0x3e	; 62
    4cce:	62 97       	sbiw	r28, 0x12	; 18
    4cd0:	0f b6       	in	r0, 0x3f	; 63
    4cd2:	f8 94       	cli
    4cd4:	de bf       	out	0x3e, r29	; 62
    4cd6:	0f be       	out	0x3f, r0	; 63
    4cd8:	cd bf       	out	0x3d, r28	; 61
    4cda:	9a 87       	std	Y+10, r25	; 0x0a
    4cdc:	89 87       	std	Y+9, r24	; 0x09
    4cde:	6b 87       	std	Y+11, r22	; 0x0b
    4ce0:	2c 87       	std	Y+12, r18	; 0x0c
    4ce2:	3d 87       	std	Y+13, r19	; 0x0d
    4ce4:	4e 87       	std	Y+14, r20	; 0x0e
    4ce6:	5f 87       	std	Y+15, r21	; 0x0f
    4ce8:	08 8b       	std	Y+16, r16	; 0x10
    4cea:	fa 8a       	std	Y+18, r15	; 0x12
    4cec:	e9 8a       	std	Y+17, r14	; 0x11
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	89 83       	std	Y+1, r24	; 0x01
    4cf2:	89 85       	ldd	r24, Y+9	; 0x09
    4cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf6:	9b 83       	std	Y+3, r25	; 0x03
    4cf8:	8a 83       	std	Y+2, r24	; 0x02
    4cfa:	0f b6       	in	r0, 0x3f	; 63
    4cfc:	f8 94       	cli
    4cfe:	0f 92       	push	r0
    4d00:	89 89       	ldd	r24, Y+17	; 0x11
    4d02:	9a 89       	ldd	r25, Y+18	; 0x12
    4d04:	89 2b       	or	r24, r25
    4d06:	c1 f0       	breq	.+48     	; 0x4d38 <xTaskGenericNotify+0x78>
    4d08:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d0a:	88 2f       	mov	r24, r24
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	2a 81       	ldd	r18, Y+2	; 0x02
    4d10:	3b 81       	ldd	r19, Y+3	; 0x03
    4d12:	88 0f       	add	r24, r24
    4d14:	99 1f       	adc	r25, r25
    4d16:	88 0f       	add	r24, r24
    4d18:	99 1f       	adc	r25, r25
    4d1a:	82 0f       	add	r24, r18
    4d1c:	93 1f       	adc	r25, r19
    4d1e:	8f 96       	adiw	r24, 0x2f	; 47
    4d20:	fc 01       	movw	r30, r24
    4d22:	80 81       	ld	r24, Z
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	a2 81       	ldd	r26, Z+2	; 0x02
    4d28:	b3 81       	ldd	r27, Z+3	; 0x03
    4d2a:	29 89       	ldd	r18, Y+17	; 0x11
    4d2c:	3a 89       	ldd	r19, Y+18	; 0x12
    4d2e:	f9 01       	movw	r30, r18
    4d30:	80 83       	st	Z, r24
    4d32:	91 83       	std	Z+1, r25	; 0x01
    4d34:	a2 83       	std	Z+2, r26	; 0x02
    4d36:	b3 83       	std	Z+3, r27	; 0x03
    4d38:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d3a:	88 2f       	mov	r24, r24
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	2a 81       	ldd	r18, Y+2	; 0x02
    4d40:	3b 81       	ldd	r19, Y+3	; 0x03
    4d42:	82 0f       	add	r24, r18
    4d44:	93 1f       	adc	r25, r19
    4d46:	c3 96       	adiw	r24, 0x33	; 51
    4d48:	fc 01       	movw	r30, r24
    4d4a:	80 81       	ld	r24, Z
    4d4c:	8c 83       	std	Y+4, r24	; 0x04
    4d4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d50:	88 2f       	mov	r24, r24
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	2a 81       	ldd	r18, Y+2	; 0x02
    4d56:	3b 81       	ldd	r19, Y+3	; 0x03
    4d58:	82 0f       	add	r24, r18
    4d5a:	93 1f       	adc	r25, r19
    4d5c:	c3 96       	adiw	r24, 0x33	; 51
    4d5e:	22 e0       	ldi	r18, 0x02	; 2
    4d60:	fc 01       	movw	r30, r24
    4d62:	20 83       	st	Z, r18
    4d64:	88 89       	ldd	r24, Y+16	; 0x10
    4d66:	88 2f       	mov	r24, r24
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	82 30       	cpi	r24, 0x02	; 2
    4d6c:	91 05       	cpc	r25, r1
    4d6e:	09 f4       	brne	.+2      	; 0x4d72 <xTaskGenericNotify+0xb2>
    4d70:	3e c0       	rjmp	.+124    	; 0x4dee <xTaskGenericNotify+0x12e>
    4d72:	83 30       	cpi	r24, 0x03	; 3
    4d74:	91 05       	cpc	r25, r1
    4d76:	34 f4       	brge	.+12     	; 0x4d84 <xTaskGenericNotify+0xc4>
    4d78:	00 97       	sbiw	r24, 0x00	; 0
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <xTaskGenericNotify+0xbe>
    4d7c:	92 c0       	rjmp	.+292    	; 0x4ea2 <xTaskGenericNotify+0x1e2>
    4d7e:	01 97       	sbiw	r24, 0x01	; 1
    4d80:	49 f0       	breq	.+18     	; 0x4d94 <xTaskGenericNotify+0xd4>
    4d82:	90 c0       	rjmp	.+288    	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4d84:	83 30       	cpi	r24, 0x03	; 3
    4d86:	91 05       	cpc	r25, r1
    4d88:	09 f4       	brne	.+2      	; 0x4d8c <xTaskGenericNotify+0xcc>
    4d8a:	56 c0       	rjmp	.+172    	; 0x4e38 <xTaskGenericNotify+0x178>
    4d8c:	04 97       	sbiw	r24, 0x04	; 4
    4d8e:	09 f4       	brne	.+2      	; 0x4d92 <xTaskGenericNotify+0xd2>
    4d90:	6b c0       	rjmp	.+214    	; 0x4e68 <xTaskGenericNotify+0x1a8>
    4d92:	88 c0       	rjmp	.+272    	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4d94:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d96:	68 2f       	mov	r22, r24
    4d98:	70 e0       	ldi	r23, 0x00	; 0
    4d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d9c:	88 2f       	mov	r24, r24
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	2a 81       	ldd	r18, Y+2	; 0x02
    4da2:	3b 81       	ldd	r19, Y+3	; 0x03
    4da4:	88 0f       	add	r24, r24
    4da6:	99 1f       	adc	r25, r25
    4da8:	88 0f       	add	r24, r24
    4daa:	99 1f       	adc	r25, r25
    4dac:	82 0f       	add	r24, r18
    4dae:	93 1f       	adc	r25, r19
    4db0:	8f 96       	adiw	r24, 0x2f	; 47
    4db2:	fc 01       	movw	r30, r24
    4db4:	20 81       	ld	r18, Z
    4db6:	31 81       	ldd	r19, Z+1	; 0x01
    4db8:	42 81       	ldd	r20, Z+2	; 0x02
    4dba:	53 81       	ldd	r21, Z+3	; 0x03
    4dbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4dbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    4dc0:	ae 85       	ldd	r26, Y+14	; 0x0e
    4dc2:	bf 85       	ldd	r27, Y+15	; 0x0f
    4dc4:	82 2b       	or	r24, r18
    4dc6:	93 2b       	or	r25, r19
    4dc8:	a4 2b       	or	r26, r20
    4dca:	b5 2b       	or	r27, r21
    4dcc:	4a 81       	ldd	r20, Y+2	; 0x02
    4dce:	5b 81       	ldd	r21, Y+3	; 0x03
    4dd0:	9b 01       	movw	r18, r22
    4dd2:	22 0f       	add	r18, r18
    4dd4:	33 1f       	adc	r19, r19
    4dd6:	22 0f       	add	r18, r18
    4dd8:	33 1f       	adc	r19, r19
    4dda:	24 0f       	add	r18, r20
    4ddc:	35 1f       	adc	r19, r21
    4dde:	21 5d       	subi	r18, 0xD1	; 209
    4de0:	3f 4f       	sbci	r19, 0xFF	; 255
    4de2:	f9 01       	movw	r30, r18
    4de4:	80 83       	st	Z, r24
    4de6:	91 83       	std	Z+1, r25	; 0x01
    4de8:	a2 83       	std	Z+2, r26	; 0x02
    4dea:	b3 83       	std	Z+3, r27	; 0x03
    4dec:	5b c0       	rjmp	.+182    	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4dee:	8b 85       	ldd	r24, Y+11	; 0x0b
    4df0:	28 2f       	mov	r18, r24
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	4a 81       	ldd	r20, Y+2	; 0x02
    4df6:	5b 81       	ldd	r21, Y+3	; 0x03
    4df8:	c9 01       	movw	r24, r18
    4dfa:	88 0f       	add	r24, r24
    4dfc:	99 1f       	adc	r25, r25
    4dfe:	88 0f       	add	r24, r24
    4e00:	99 1f       	adc	r25, r25
    4e02:	84 0f       	add	r24, r20
    4e04:	95 1f       	adc	r25, r21
    4e06:	8f 96       	adiw	r24, 0x2f	; 47
    4e08:	fc 01       	movw	r30, r24
    4e0a:	80 81       	ld	r24, Z
    4e0c:	91 81       	ldd	r25, Z+1	; 0x01
    4e0e:	a2 81       	ldd	r26, Z+2	; 0x02
    4e10:	b3 81       	ldd	r27, Z+3	; 0x03
    4e12:	01 96       	adiw	r24, 0x01	; 1
    4e14:	a1 1d       	adc	r26, r1
    4e16:	b1 1d       	adc	r27, r1
    4e18:	4a 81       	ldd	r20, Y+2	; 0x02
    4e1a:	5b 81       	ldd	r21, Y+3	; 0x03
    4e1c:	22 0f       	add	r18, r18
    4e1e:	33 1f       	adc	r19, r19
    4e20:	22 0f       	add	r18, r18
    4e22:	33 1f       	adc	r19, r19
    4e24:	24 0f       	add	r18, r20
    4e26:	35 1f       	adc	r19, r21
    4e28:	21 5d       	subi	r18, 0xD1	; 209
    4e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e2c:	f9 01       	movw	r30, r18
    4e2e:	80 83       	st	Z, r24
    4e30:	91 83       	std	Z+1, r25	; 0x01
    4e32:	a2 83       	std	Z+2, r26	; 0x02
    4e34:	b3 83       	std	Z+3, r27	; 0x03
    4e36:	36 c0       	rjmp	.+108    	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4e38:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e3a:	88 2f       	mov	r24, r24
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    4e40:	3b 81       	ldd	r19, Y+3	; 0x03
    4e42:	88 0f       	add	r24, r24
    4e44:	99 1f       	adc	r25, r25
    4e46:	88 0f       	add	r24, r24
    4e48:	99 1f       	adc	r25, r25
    4e4a:	82 0f       	add	r24, r18
    4e4c:	93 1f       	adc	r25, r19
    4e4e:	9c 01       	movw	r18, r24
    4e50:	21 5d       	subi	r18, 0xD1	; 209
    4e52:	3f 4f       	sbci	r19, 0xFF	; 255
    4e54:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e56:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e58:	ae 85       	ldd	r26, Y+14	; 0x0e
    4e5a:	bf 85       	ldd	r27, Y+15	; 0x0f
    4e5c:	f9 01       	movw	r30, r18
    4e5e:	80 83       	st	Z, r24
    4e60:	91 83       	std	Z+1, r25	; 0x01
    4e62:	a2 83       	std	Z+2, r26	; 0x02
    4e64:	b3 83       	std	Z+3, r27	; 0x03
    4e66:	1e c0       	rjmp	.+60     	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4e68:	8c 81       	ldd	r24, Y+4	; 0x04
    4e6a:	82 30       	cpi	r24, 0x02	; 2
    4e6c:	c1 f0       	breq	.+48     	; 0x4e9e <xTaskGenericNotify+0x1de>
    4e6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e70:	88 2f       	mov	r24, r24
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	2a 81       	ldd	r18, Y+2	; 0x02
    4e76:	3b 81       	ldd	r19, Y+3	; 0x03
    4e78:	88 0f       	add	r24, r24
    4e7a:	99 1f       	adc	r25, r25
    4e7c:	88 0f       	add	r24, r24
    4e7e:	99 1f       	adc	r25, r25
    4e80:	82 0f       	add	r24, r18
    4e82:	93 1f       	adc	r25, r19
    4e84:	9c 01       	movw	r18, r24
    4e86:	21 5d       	subi	r18, 0xD1	; 209
    4e88:	3f 4f       	sbci	r19, 0xFF	; 255
    4e8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e8e:	ae 85       	ldd	r26, Y+14	; 0x0e
    4e90:	bf 85       	ldd	r27, Y+15	; 0x0f
    4e92:	f9 01       	movw	r30, r18
    4e94:	80 83       	st	Z, r24
    4e96:	91 83       	std	Z+1, r25	; 0x01
    4e98:	a2 83       	std	Z+2, r26	; 0x02
    4e9a:	b3 83       	std	Z+3, r27	; 0x03
    4e9c:	03 c0       	rjmp	.+6      	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4e9e:	19 82       	std	Y+1, r1	; 0x01
    4ea0:	01 c0       	rjmp	.+2      	; 0x4ea4 <xTaskGenericNotify+0x1e4>
    4ea2:	00 00       	nop
    4ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ea6:	81 30       	cpi	r24, 0x01	; 1
    4ea8:	09 f0       	breq	.+2      	; 0x4eac <xTaskGenericNotify+0x1ec>
    4eaa:	cc c0       	rjmp	.+408    	; 0x5044 <xTaskGenericNotify+0x384>
    4eac:	8a 81       	ldd	r24, Y+2	; 0x02
    4eae:	9b 81       	ldd	r25, Y+3	; 0x03
    4eb0:	fc 01       	movw	r30, r24
    4eb2:	84 85       	ldd	r24, Z+12	; 0x0c
    4eb4:	95 85       	ldd	r25, Z+13	; 0x0d
    4eb6:	9e 83       	std	Y+6, r25	; 0x06
    4eb8:	8d 83       	std	Y+5, r24	; 0x05
    4eba:	8a 81       	ldd	r24, Y+2	; 0x02
    4ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ebe:	fc 01       	movw	r30, r24
    4ec0:	86 81       	ldd	r24, Z+6	; 0x06
    4ec2:	97 81       	ldd	r25, Z+7	; 0x07
    4ec4:	2a 81       	ldd	r18, Y+2	; 0x02
    4ec6:	3b 81       	ldd	r19, Y+3	; 0x03
    4ec8:	f9 01       	movw	r30, r18
    4eca:	20 85       	ldd	r18, Z+8	; 0x08
    4ecc:	31 85       	ldd	r19, Z+9	; 0x09
    4ece:	fc 01       	movw	r30, r24
    4ed0:	37 83       	std	Z+7, r19	; 0x07
    4ed2:	26 83       	std	Z+6, r18	; 0x06
    4ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ed8:	fc 01       	movw	r30, r24
    4eda:	80 85       	ldd	r24, Z+8	; 0x08
    4edc:	91 85       	ldd	r25, Z+9	; 0x09
    4ede:	2a 81       	ldd	r18, Y+2	; 0x02
    4ee0:	3b 81       	ldd	r19, Y+3	; 0x03
    4ee2:	f9 01       	movw	r30, r18
    4ee4:	26 81       	ldd	r18, Z+6	; 0x06
    4ee6:	37 81       	ldd	r19, Z+7	; 0x07
    4ee8:	fc 01       	movw	r30, r24
    4eea:	35 83       	std	Z+5, r19	; 0x05
    4eec:	24 83       	std	Z+4, r18	; 0x04
    4eee:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef2:	fc 01       	movw	r30, r24
    4ef4:	21 81       	ldd	r18, Z+1	; 0x01
    4ef6:	32 81       	ldd	r19, Z+2	; 0x02
    4ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    4efa:	9b 81       	ldd	r25, Y+3	; 0x03
    4efc:	02 96       	adiw	r24, 0x02	; 2
    4efe:	28 17       	cp	r18, r24
    4f00:	39 07       	cpc	r19, r25
    4f02:	51 f4       	brne	.+20     	; 0x4f18 <xTaskGenericNotify+0x258>
    4f04:	8a 81       	ldd	r24, Y+2	; 0x02
    4f06:	9b 81       	ldd	r25, Y+3	; 0x03
    4f08:	fc 01       	movw	r30, r24
    4f0a:	20 85       	ldd	r18, Z+8	; 0x08
    4f0c:	31 85       	ldd	r19, Z+9	; 0x09
    4f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f10:	9e 81       	ldd	r25, Y+6	; 0x06
    4f12:	fc 01       	movw	r30, r24
    4f14:	32 83       	std	Z+2, r19	; 0x02
    4f16:	21 83       	std	Z+1, r18	; 0x01
    4f18:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	15 86       	std	Z+13, r1	; 0x0d
    4f20:	14 86       	std	Z+12, r1	; 0x0c
    4f22:	8d 81       	ldd	r24, Y+5	; 0x05
    4f24:	9e 81       	ldd	r25, Y+6	; 0x06
    4f26:	fc 01       	movw	r30, r24
    4f28:	80 81       	ld	r24, Z
    4f2a:	2f ef       	ldi	r18, 0xFF	; 255
    4f2c:	28 0f       	add	r18, r24
    4f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f30:	9e 81       	ldd	r25, Y+6	; 0x06
    4f32:	fc 01       	movw	r30, r24
    4f34:	20 83       	st	Z, r18
    4f36:	8a 81       	ldd	r24, Y+2	; 0x02
    4f38:	9b 81       	ldd	r25, Y+3	; 0x03
    4f3a:	fc 01       	movw	r30, r24
    4f3c:	92 8d       	ldd	r25, Z+26	; 0x1a
    4f3e:	80 91 89 1b 	lds	r24, 0x1B89	; 0x801b89 <uxTopReadyPriority>
    4f42:	89 17       	cp	r24, r25
    4f44:	30 f4       	brcc	.+12     	; 0x4f52 <xTaskGenericNotify+0x292>
    4f46:	8a 81       	ldd	r24, Y+2	; 0x02
    4f48:	9b 81       	ldd	r25, Y+3	; 0x03
    4f4a:	fc 01       	movw	r30, r24
    4f4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4f4e:	80 93 89 1b 	sts	0x1B89, r24	; 0x801b89 <uxTopReadyPriority>
    4f52:	8a 81       	ldd	r24, Y+2	; 0x02
    4f54:	9b 81       	ldd	r25, Y+3	; 0x03
    4f56:	fc 01       	movw	r30, r24
    4f58:	82 8d       	ldd	r24, Z+26	; 0x1a
    4f5a:	28 2f       	mov	r18, r24
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
    4f5e:	4b e0       	ldi	r20, 0x0B	; 11
    4f60:	42 9f       	mul	r20, r18
    4f62:	c0 01       	movw	r24, r0
    4f64:	43 9f       	mul	r20, r19
    4f66:	90 0d       	add	r25, r0
    4f68:	11 24       	eor	r1, r1
    4f6a:	85 52       	subi	r24, 0x25	; 37
    4f6c:	95 4e       	sbci	r25, 0xE5	; 229
    4f6e:	fc 01       	movw	r30, r24
    4f70:	80 81       	ld	r24, Z
    4f72:	91 81       	ldd	r25, Z+1	; 0x01
    4f74:	98 87       	std	Y+8, r25	; 0x08
    4f76:	8f 83       	std	Y+7, r24	; 0x07
    4f78:	8a 81       	ldd	r24, Y+2	; 0x02
    4f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f7c:	2f 81       	ldd	r18, Y+7	; 0x07
    4f7e:	38 85       	ldd	r19, Y+8	; 0x08
    4f80:	fc 01       	movw	r30, r24
    4f82:	37 83       	std	Z+7, r19	; 0x07
    4f84:	26 83       	std	Z+6, r18	; 0x06
    4f86:	8f 81       	ldd	r24, Y+7	; 0x07
    4f88:	98 85       	ldd	r25, Y+8	; 0x08
    4f8a:	fc 01       	movw	r30, r24
    4f8c:	26 81       	ldd	r18, Z+6	; 0x06
    4f8e:	37 81       	ldd	r19, Z+7	; 0x07
    4f90:	8a 81       	ldd	r24, Y+2	; 0x02
    4f92:	9b 81       	ldd	r25, Y+3	; 0x03
    4f94:	fc 01       	movw	r30, r24
    4f96:	31 87       	std	Z+9, r19	; 0x09
    4f98:	20 87       	std	Z+8, r18	; 0x08
    4f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    4f9c:	98 85       	ldd	r25, Y+8	; 0x08
    4f9e:	fc 01       	movw	r30, r24
    4fa0:	86 81       	ldd	r24, Z+6	; 0x06
    4fa2:	97 81       	ldd	r25, Z+7	; 0x07
    4fa4:	2a 81       	ldd	r18, Y+2	; 0x02
    4fa6:	3b 81       	ldd	r19, Y+3	; 0x03
    4fa8:	2e 5f       	subi	r18, 0xFE	; 254
    4faa:	3f 4f       	sbci	r19, 0xFF	; 255
    4fac:	fc 01       	movw	r30, r24
    4fae:	35 83       	std	Z+5, r19	; 0x05
    4fb0:	24 83       	std	Z+4, r18	; 0x04
    4fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    4fb6:	9c 01       	movw	r18, r24
    4fb8:	2e 5f       	subi	r18, 0xFE	; 254
    4fba:	3f 4f       	sbci	r19, 0xFF	; 255
    4fbc:	8f 81       	ldd	r24, Y+7	; 0x07
    4fbe:	98 85       	ldd	r25, Y+8	; 0x08
    4fc0:	fc 01       	movw	r30, r24
    4fc2:	37 83       	std	Z+7, r19	; 0x07
    4fc4:	26 83       	std	Z+6, r18	; 0x06
    4fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    4fca:	fc 01       	movw	r30, r24
    4fcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fce:	28 2f       	mov	r18, r24
    4fd0:	30 e0       	ldi	r19, 0x00	; 0
    4fd2:	4b e0       	ldi	r20, 0x0B	; 11
    4fd4:	42 9f       	mul	r20, r18
    4fd6:	c0 01       	movw	r24, r0
    4fd8:	43 9f       	mul	r20, r19
    4fda:	90 0d       	add	r25, r0
    4fdc:	11 24       	eor	r1, r1
    4fde:	9c 01       	movw	r18, r24
    4fe0:	26 52       	subi	r18, 0x26	; 38
    4fe2:	35 4e       	sbci	r19, 0xE5	; 229
    4fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    4fe8:	fc 01       	movw	r30, r24
    4fea:	35 87       	std	Z+13, r19	; 0x0d
    4fec:	24 87       	std	Z+12, r18	; 0x0c
    4fee:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ff2:	fc 01       	movw	r30, r24
    4ff4:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ff6:	88 2f       	mov	r24, r24
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	4b e0       	ldi	r20, 0x0B	; 11
    4ffc:	48 9f       	mul	r20, r24
    4ffe:	90 01       	movw	r18, r0
    5000:	49 9f       	mul	r20, r25
    5002:	30 0d       	add	r19, r0
    5004:	11 24       	eor	r1, r1
    5006:	26 52       	subi	r18, 0x26	; 38
    5008:	35 4e       	sbci	r19, 0xE5	; 229
    500a:	f9 01       	movw	r30, r18
    500c:	20 81       	ld	r18, Z
    500e:	41 e0       	ldi	r20, 0x01	; 1
    5010:	42 0f       	add	r20, r18
    5012:	5b e0       	ldi	r21, 0x0B	; 11
    5014:	58 9f       	mul	r21, r24
    5016:	90 01       	movw	r18, r0
    5018:	59 9f       	mul	r21, r25
    501a:	30 0d       	add	r19, r0
    501c:	11 24       	eor	r1, r1
    501e:	c9 01       	movw	r24, r18
    5020:	86 52       	subi	r24, 0x26	; 38
    5022:	95 4e       	sbci	r25, 0xE5	; 229
    5024:	fc 01       	movw	r30, r24
    5026:	40 83       	st	Z, r20
    5028:	8a 81       	ldd	r24, Y+2	; 0x02
    502a:	9b 81       	ldd	r25, Y+3	; 0x03
    502c:	fc 01       	movw	r30, r24
    502e:	22 8d       	ldd	r18, Z+26	; 0x1a
    5030:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    5034:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    5038:	fc 01       	movw	r30, r24
    503a:	82 8d       	ldd	r24, Z+26	; 0x1a
    503c:	82 17       	cp	r24, r18
    503e:	10 f4       	brcc	.+4      	; 0x5044 <xTaskGenericNotify+0x384>
    5040:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
    5044:	0f 90       	pop	r0
    5046:	0f be       	out	0x3f, r0	; 63
    5048:	89 81       	ldd	r24, Y+1	; 0x01
    504a:	62 96       	adiw	r28, 0x12	; 18
    504c:	0f b6       	in	r0, 0x3f	; 63
    504e:	f8 94       	cli
    5050:	de bf       	out	0x3e, r29	; 62
    5052:	0f be       	out	0x3f, r0	; 63
    5054:	cd bf       	out	0x3d, r28	; 61
    5056:	df 91       	pop	r29
    5058:	cf 91       	pop	r28
    505a:	0f 91       	pop	r16
    505c:	ff 90       	pop	r15
    505e:	ef 90       	pop	r14
    5060:	08 95       	ret

00005062 <xTaskGenericNotifyFromISR>:
    5062:	cf 92       	push	r12
    5064:	df 92       	push	r13
    5066:	ef 92       	push	r14
    5068:	ff 92       	push	r15
    506a:	0f 93       	push	r16
    506c:	cf 93       	push	r28
    506e:	df 93       	push	r29
    5070:	cd b7       	in	r28, 0x3d	; 61
    5072:	de b7       	in	r29, 0x3e	; 62
    5074:	67 97       	sbiw	r28, 0x17	; 23
    5076:	0f b6       	in	r0, 0x3f	; 63
    5078:	f8 94       	cli
    507a:	de bf       	out	0x3e, r29	; 62
    507c:	0f be       	out	0x3f, r0	; 63
    507e:	cd bf       	out	0x3d, r28	; 61
    5080:	9d 87       	std	Y+13, r25	; 0x0d
    5082:	8c 87       	std	Y+12, r24	; 0x0c
    5084:	6e 87       	std	Y+14, r22	; 0x0e
    5086:	2f 87       	std	Y+15, r18	; 0x0f
    5088:	38 8b       	std	Y+16, r19	; 0x10
    508a:	49 8b       	std	Y+17, r20	; 0x11
    508c:	5a 8b       	std	Y+18, r21	; 0x12
    508e:	0b 8b       	std	Y+19, r16	; 0x13
    5090:	fd 8a       	std	Y+21, r15	; 0x15
    5092:	ec 8a       	std	Y+20, r14	; 0x14
    5094:	df 8a       	std	Y+23, r13	; 0x17
    5096:	ce 8a       	std	Y+22, r12	; 0x16
    5098:	81 e0       	ldi	r24, 0x01	; 1
    509a:	89 83       	std	Y+1, r24	; 0x01
    509c:	8c 85       	ldd	r24, Y+12	; 0x0c
    509e:	9d 85       	ldd	r25, Y+13	; 0x0d
    50a0:	9b 83       	std	Y+3, r25	; 0x03
    50a2:	8a 83       	std	Y+2, r24	; 0x02
    50a4:	1c 82       	std	Y+4, r1	; 0x04
    50a6:	8c 89       	ldd	r24, Y+20	; 0x14
    50a8:	9d 89       	ldd	r25, Y+21	; 0x15
    50aa:	89 2b       	or	r24, r25
    50ac:	c1 f0       	breq	.+48     	; 0x50de <xTaskGenericNotifyFromISR+0x7c>
    50ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    50b0:	88 2f       	mov	r24, r24
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	2a 81       	ldd	r18, Y+2	; 0x02
    50b6:	3b 81       	ldd	r19, Y+3	; 0x03
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	88 0f       	add	r24, r24
    50be:	99 1f       	adc	r25, r25
    50c0:	82 0f       	add	r24, r18
    50c2:	93 1f       	adc	r25, r19
    50c4:	8f 96       	adiw	r24, 0x2f	; 47
    50c6:	fc 01       	movw	r30, r24
    50c8:	80 81       	ld	r24, Z
    50ca:	91 81       	ldd	r25, Z+1	; 0x01
    50cc:	a2 81       	ldd	r26, Z+2	; 0x02
    50ce:	b3 81       	ldd	r27, Z+3	; 0x03
    50d0:	2c 89       	ldd	r18, Y+20	; 0x14
    50d2:	3d 89       	ldd	r19, Y+21	; 0x15
    50d4:	f9 01       	movw	r30, r18
    50d6:	80 83       	st	Z, r24
    50d8:	91 83       	std	Z+1, r25	; 0x01
    50da:	a2 83       	std	Z+2, r26	; 0x02
    50dc:	b3 83       	std	Z+3, r27	; 0x03
    50de:	8e 85       	ldd	r24, Y+14	; 0x0e
    50e0:	88 2f       	mov	r24, r24
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	2a 81       	ldd	r18, Y+2	; 0x02
    50e6:	3b 81       	ldd	r19, Y+3	; 0x03
    50e8:	82 0f       	add	r24, r18
    50ea:	93 1f       	adc	r25, r19
    50ec:	c3 96       	adiw	r24, 0x33	; 51
    50ee:	fc 01       	movw	r30, r24
    50f0:	80 81       	ld	r24, Z
    50f2:	8d 83       	std	Y+5, r24	; 0x05
    50f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    50f6:	88 2f       	mov	r24, r24
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	2a 81       	ldd	r18, Y+2	; 0x02
    50fc:	3b 81       	ldd	r19, Y+3	; 0x03
    50fe:	82 0f       	add	r24, r18
    5100:	93 1f       	adc	r25, r19
    5102:	c3 96       	adiw	r24, 0x33	; 51
    5104:	22 e0       	ldi	r18, 0x02	; 2
    5106:	fc 01       	movw	r30, r24
    5108:	20 83       	st	Z, r18
    510a:	8b 89       	ldd	r24, Y+19	; 0x13
    510c:	88 2f       	mov	r24, r24
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	82 30       	cpi	r24, 0x02	; 2
    5112:	91 05       	cpc	r25, r1
    5114:	09 f4       	brne	.+2      	; 0x5118 <xTaskGenericNotifyFromISR+0xb6>
    5116:	3e c0       	rjmp	.+124    	; 0x5194 <xTaskGenericNotifyFromISR+0x132>
    5118:	83 30       	cpi	r24, 0x03	; 3
    511a:	91 05       	cpc	r25, r1
    511c:	34 f4       	brge	.+12     	; 0x512a <xTaskGenericNotifyFromISR+0xc8>
    511e:	00 97       	sbiw	r24, 0x00	; 0
    5120:	09 f4       	brne	.+2      	; 0x5124 <xTaskGenericNotifyFromISR+0xc2>
    5122:	92 c0       	rjmp	.+292    	; 0x5248 <xTaskGenericNotifyFromISR+0x1e6>
    5124:	01 97       	sbiw	r24, 0x01	; 1
    5126:	49 f0       	breq	.+18     	; 0x513a <xTaskGenericNotifyFromISR+0xd8>
    5128:	90 c0       	rjmp	.+288    	; 0x524a <xTaskGenericNotifyFromISR+0x1e8>
    512a:	83 30       	cpi	r24, 0x03	; 3
    512c:	91 05       	cpc	r25, r1
    512e:	09 f4       	brne	.+2      	; 0x5132 <xTaskGenericNotifyFromISR+0xd0>
    5130:	56 c0       	rjmp	.+172    	; 0x51de <xTaskGenericNotifyFromISR+0x17c>
    5132:	04 97       	sbiw	r24, 0x04	; 4
    5134:	09 f4       	brne	.+2      	; 0x5138 <xTaskGenericNotifyFromISR+0xd6>
    5136:	6b c0       	rjmp	.+214    	; 0x520e <xTaskGenericNotifyFromISR+0x1ac>
    5138:	88 c0       	rjmp	.+272    	; 0x524a <xTaskGenericNotifyFromISR+0x1e8>
    513a:	8e 85       	ldd	r24, Y+14	; 0x0e
    513c:	68 2f       	mov	r22, r24
    513e:	70 e0       	ldi	r23, 0x00	; 0
    5140:	8e 85       	ldd	r24, Y+14	; 0x0e
    5142:	88 2f       	mov	r24, r24
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	2a 81       	ldd	r18, Y+2	; 0x02
    5148:	3b 81       	ldd	r19, Y+3	; 0x03
    514a:	88 0f       	add	r24, r24
    514c:	99 1f       	adc	r25, r25
    514e:	88 0f       	add	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	82 0f       	add	r24, r18
    5154:	93 1f       	adc	r25, r19
    5156:	8f 96       	adiw	r24, 0x2f	; 47
    5158:	fc 01       	movw	r30, r24
    515a:	20 81       	ld	r18, Z
    515c:	31 81       	ldd	r19, Z+1	; 0x01
    515e:	42 81       	ldd	r20, Z+2	; 0x02
    5160:	53 81       	ldd	r21, Z+3	; 0x03
    5162:	8f 85       	ldd	r24, Y+15	; 0x0f
    5164:	98 89       	ldd	r25, Y+16	; 0x10
    5166:	a9 89       	ldd	r26, Y+17	; 0x11
    5168:	ba 89       	ldd	r27, Y+18	; 0x12
    516a:	82 2b       	or	r24, r18
    516c:	93 2b       	or	r25, r19
    516e:	a4 2b       	or	r26, r20
    5170:	b5 2b       	or	r27, r21
    5172:	4a 81       	ldd	r20, Y+2	; 0x02
    5174:	5b 81       	ldd	r21, Y+3	; 0x03
    5176:	9b 01       	movw	r18, r22
    5178:	22 0f       	add	r18, r18
    517a:	33 1f       	adc	r19, r19
    517c:	22 0f       	add	r18, r18
    517e:	33 1f       	adc	r19, r19
    5180:	24 0f       	add	r18, r20
    5182:	35 1f       	adc	r19, r21
    5184:	21 5d       	subi	r18, 0xD1	; 209
    5186:	3f 4f       	sbci	r19, 0xFF	; 255
    5188:	f9 01       	movw	r30, r18
    518a:	80 83       	st	Z, r24
    518c:	91 83       	std	Z+1, r25	; 0x01
    518e:	a2 83       	std	Z+2, r26	; 0x02
    5190:	b3 83       	std	Z+3, r27	; 0x03
    5192:	5b c0       	rjmp	.+182    	; 0x524a <xTaskGenericNotifyFromISR+0x1e8>
    5194:	8e 85       	ldd	r24, Y+14	; 0x0e
    5196:	28 2f       	mov	r18, r24
    5198:	30 e0       	ldi	r19, 0x00	; 0
    519a:	4a 81       	ldd	r20, Y+2	; 0x02
    519c:	5b 81       	ldd	r21, Y+3	; 0x03
    519e:	c9 01       	movw	r24, r18
    51a0:	88 0f       	add	r24, r24
    51a2:	99 1f       	adc	r25, r25
    51a4:	88 0f       	add	r24, r24
    51a6:	99 1f       	adc	r25, r25
    51a8:	84 0f       	add	r24, r20
    51aa:	95 1f       	adc	r25, r21
    51ac:	8f 96       	adiw	r24, 0x2f	; 47
    51ae:	fc 01       	movw	r30, r24
    51b0:	80 81       	ld	r24, Z
    51b2:	91 81       	ldd	r25, Z+1	; 0x01
    51b4:	a2 81       	ldd	r26, Z+2	; 0x02
    51b6:	b3 81       	ldd	r27, Z+3	; 0x03
    51b8:	01 96       	adiw	r24, 0x01	; 1
    51ba:	a1 1d       	adc	r26, r1
    51bc:	b1 1d       	adc	r27, r1
    51be:	4a 81       	ldd	r20, Y+2	; 0x02
    51c0:	5b 81       	ldd	r21, Y+3	; 0x03
    51c2:	22 0f       	add	r18, r18
    51c4:	33 1f       	adc	r19, r19
    51c6:	22 0f       	add	r18, r18
    51c8:	33 1f       	adc	r19, r19
    51ca:	24 0f       	add	r18, r20
    51cc:	35 1f       	adc	r19, r21
    51ce:	21 5d       	subi	r18, 0xD1	; 209
    51d0:	3f 4f       	sbci	r19, 0xFF	; 255
    51d2:	f9 01       	movw	r30, r18
    51d4:	80 83       	st	Z, r24
    51d6:	91 83       	std	Z+1, r25	; 0x01
    51d8:	a2 83       	std	Z+2, r26	; 0x02
    51da:	b3 83       	std	Z+3, r27	; 0x03
    51dc:	36 c0       	rjmp	.+108    	; 0x524a <xTaskGenericNotifyFromISR+0x1e8>
    51de:	8e 85       	ldd	r24, Y+14	; 0x0e
    51e0:	88 2f       	mov	r24, r24
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	2a 81       	ldd	r18, Y+2	; 0x02
    51e6:	3b 81       	ldd	r19, Y+3	; 0x03
    51e8:	88 0f       	add	r24, r24
    51ea:	99 1f       	adc	r25, r25
    51ec:	88 0f       	add	r24, r24
    51ee:	99 1f       	adc	r25, r25
    51f0:	82 0f       	add	r24, r18
    51f2:	93 1f       	adc	r25, r19
    51f4:	9c 01       	movw	r18, r24
    51f6:	21 5d       	subi	r18, 0xD1	; 209
    51f8:	3f 4f       	sbci	r19, 0xFF	; 255
    51fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    51fc:	98 89       	ldd	r25, Y+16	; 0x10
    51fe:	a9 89       	ldd	r26, Y+17	; 0x11
    5200:	ba 89       	ldd	r27, Y+18	; 0x12
    5202:	f9 01       	movw	r30, r18
    5204:	80 83       	st	Z, r24
    5206:	91 83       	std	Z+1, r25	; 0x01
    5208:	a2 83       	std	Z+2, r26	; 0x02
    520a:	b3 83       	std	Z+3, r27	; 0x03
    520c:	1e c0       	rjmp	.+60     	; 0x524a <xTaskGenericNotifyFromISR+0x1e8>
    520e:	8d 81       	ldd	r24, Y+5	; 0x05
    5210:	82 30       	cpi	r24, 0x02	; 2
    5212:	c1 f0       	breq	.+48     	; 0x5244 <xTaskGenericNotifyFromISR+0x1e2>
    5214:	8e 85       	ldd	r24, Y+14	; 0x0e
    5216:	88 2f       	mov	r24, r24
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	2a 81       	ldd	r18, Y+2	; 0x02
    521c:	3b 81       	ldd	r19, Y+3	; 0x03
    521e:	88 0f       	add	r24, r24
    5220:	99 1f       	adc	r25, r25
    5222:	88 0f       	add	r24, r24
    5224:	99 1f       	adc	r25, r25
    5226:	82 0f       	add	r24, r18
    5228:	93 1f       	adc	r25, r19
    522a:	9c 01       	movw	r18, r24
    522c:	21 5d       	subi	r18, 0xD1	; 209
    522e:	3f 4f       	sbci	r19, 0xFF	; 255
    5230:	8f 85       	ldd	r24, Y+15	; 0x0f
    5232:	98 89       	ldd	r25, Y+16	; 0x10
    5234:	a9 89       	ldd	r26, Y+17	; 0x11
    5236:	ba 89       	ldd	r27, Y+18	; 0x12
    5238:	f9 01       	movw	r30, r18
    523a:	80 83       	st	Z, r24
    523c:	91 83       	std	Z+1, r25	; 0x01
    523e:	a2 83       	std	Z+2, r26	; 0x02
    5240:	b3 83       	std	Z+3, r27	; 0x03
    5242:	03 c0       	rjmp	.+6      	; 0x524a <xTaskGenericNotifyFromISR+0x1e8>
    5244:	19 82       	std	Y+1, r1	; 0x01
    5246:	01 c0       	rjmp	.+2      	; 0x524a <xTaskGenericNotifyFromISR+0x1e8>
    5248:	00 00       	nop
    524a:	8d 81       	ldd	r24, Y+5	; 0x05
    524c:	81 30       	cpi	r24, 0x01	; 1
    524e:	09 f0       	breq	.+2      	; 0x5252 <xTaskGenericNotifyFromISR+0x1f0>
    5250:	15 c1       	rjmp	.+554    	; 0x547c <xTaskGenericNotifyFromISR+0x41a>
    5252:	80 91 98 1b 	lds	r24, 0x1B98	; 0x801b98 <uxSchedulerSuspended>
    5256:	88 23       	and	r24, r24
    5258:	09 f0       	breq	.+2      	; 0x525c <xTaskGenericNotifyFromISR+0x1fa>
    525a:	bf c0       	rjmp	.+382    	; 0x53da <xTaskGenericNotifyFromISR+0x378>
    525c:	8a 81       	ldd	r24, Y+2	; 0x02
    525e:	9b 81       	ldd	r25, Y+3	; 0x03
    5260:	fc 01       	movw	r30, r24
    5262:	84 85       	ldd	r24, Z+12	; 0x0c
    5264:	95 85       	ldd	r25, Z+13	; 0x0d
    5266:	9f 83       	std	Y+7, r25	; 0x07
    5268:	8e 83       	std	Y+6, r24	; 0x06
    526a:	8a 81       	ldd	r24, Y+2	; 0x02
    526c:	9b 81       	ldd	r25, Y+3	; 0x03
    526e:	fc 01       	movw	r30, r24
    5270:	86 81       	ldd	r24, Z+6	; 0x06
    5272:	97 81       	ldd	r25, Z+7	; 0x07
    5274:	2a 81       	ldd	r18, Y+2	; 0x02
    5276:	3b 81       	ldd	r19, Y+3	; 0x03
    5278:	f9 01       	movw	r30, r18
    527a:	20 85       	ldd	r18, Z+8	; 0x08
    527c:	31 85       	ldd	r19, Z+9	; 0x09
    527e:	fc 01       	movw	r30, r24
    5280:	37 83       	std	Z+7, r19	; 0x07
    5282:	26 83       	std	Z+6, r18	; 0x06
    5284:	8a 81       	ldd	r24, Y+2	; 0x02
    5286:	9b 81       	ldd	r25, Y+3	; 0x03
    5288:	fc 01       	movw	r30, r24
    528a:	80 85       	ldd	r24, Z+8	; 0x08
    528c:	91 85       	ldd	r25, Z+9	; 0x09
    528e:	2a 81       	ldd	r18, Y+2	; 0x02
    5290:	3b 81       	ldd	r19, Y+3	; 0x03
    5292:	f9 01       	movw	r30, r18
    5294:	26 81       	ldd	r18, Z+6	; 0x06
    5296:	37 81       	ldd	r19, Z+7	; 0x07
    5298:	fc 01       	movw	r30, r24
    529a:	35 83       	std	Z+5, r19	; 0x05
    529c:	24 83       	std	Z+4, r18	; 0x04
    529e:	8e 81       	ldd	r24, Y+6	; 0x06
    52a0:	9f 81       	ldd	r25, Y+7	; 0x07
    52a2:	fc 01       	movw	r30, r24
    52a4:	21 81       	ldd	r18, Z+1	; 0x01
    52a6:	32 81       	ldd	r19, Z+2	; 0x02
    52a8:	8a 81       	ldd	r24, Y+2	; 0x02
    52aa:	9b 81       	ldd	r25, Y+3	; 0x03
    52ac:	02 96       	adiw	r24, 0x02	; 2
    52ae:	28 17       	cp	r18, r24
    52b0:	39 07       	cpc	r19, r25
    52b2:	51 f4       	brne	.+20     	; 0x52c8 <xTaskGenericNotifyFromISR+0x266>
    52b4:	8a 81       	ldd	r24, Y+2	; 0x02
    52b6:	9b 81       	ldd	r25, Y+3	; 0x03
    52b8:	fc 01       	movw	r30, r24
    52ba:	20 85       	ldd	r18, Z+8	; 0x08
    52bc:	31 85       	ldd	r19, Z+9	; 0x09
    52be:	8e 81       	ldd	r24, Y+6	; 0x06
    52c0:	9f 81       	ldd	r25, Y+7	; 0x07
    52c2:	fc 01       	movw	r30, r24
    52c4:	32 83       	std	Z+2, r19	; 0x02
    52c6:	21 83       	std	Z+1, r18	; 0x01
    52c8:	8a 81       	ldd	r24, Y+2	; 0x02
    52ca:	9b 81       	ldd	r25, Y+3	; 0x03
    52cc:	fc 01       	movw	r30, r24
    52ce:	15 86       	std	Z+13, r1	; 0x0d
    52d0:	14 86       	std	Z+12, r1	; 0x0c
    52d2:	8e 81       	ldd	r24, Y+6	; 0x06
    52d4:	9f 81       	ldd	r25, Y+7	; 0x07
    52d6:	fc 01       	movw	r30, r24
    52d8:	80 81       	ld	r24, Z
    52da:	2f ef       	ldi	r18, 0xFF	; 255
    52dc:	28 0f       	add	r18, r24
    52de:	8e 81       	ldd	r24, Y+6	; 0x06
    52e0:	9f 81       	ldd	r25, Y+7	; 0x07
    52e2:	fc 01       	movw	r30, r24
    52e4:	20 83       	st	Z, r18
    52e6:	8a 81       	ldd	r24, Y+2	; 0x02
    52e8:	9b 81       	ldd	r25, Y+3	; 0x03
    52ea:	fc 01       	movw	r30, r24
    52ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    52ee:	80 91 89 1b 	lds	r24, 0x1B89	; 0x801b89 <uxTopReadyPriority>
    52f2:	89 17       	cp	r24, r25
    52f4:	30 f4       	brcc	.+12     	; 0x5302 <xTaskGenericNotifyFromISR+0x2a0>
    52f6:	8a 81       	ldd	r24, Y+2	; 0x02
    52f8:	9b 81       	ldd	r25, Y+3	; 0x03
    52fa:	fc 01       	movw	r30, r24
    52fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    52fe:	80 93 89 1b 	sts	0x1B89, r24	; 0x801b89 <uxTopReadyPriority>
    5302:	8a 81       	ldd	r24, Y+2	; 0x02
    5304:	9b 81       	ldd	r25, Y+3	; 0x03
    5306:	fc 01       	movw	r30, r24
    5308:	82 8d       	ldd	r24, Z+26	; 0x1a
    530a:	28 2f       	mov	r18, r24
    530c:	30 e0       	ldi	r19, 0x00	; 0
    530e:	4b e0       	ldi	r20, 0x0B	; 11
    5310:	42 9f       	mul	r20, r18
    5312:	c0 01       	movw	r24, r0
    5314:	43 9f       	mul	r20, r19
    5316:	90 0d       	add	r25, r0
    5318:	11 24       	eor	r1, r1
    531a:	85 52       	subi	r24, 0x25	; 37
    531c:	95 4e       	sbci	r25, 0xE5	; 229
    531e:	fc 01       	movw	r30, r24
    5320:	80 81       	ld	r24, Z
    5322:	91 81       	ldd	r25, Z+1	; 0x01
    5324:	99 87       	std	Y+9, r25	; 0x09
    5326:	88 87       	std	Y+8, r24	; 0x08
    5328:	8a 81       	ldd	r24, Y+2	; 0x02
    532a:	9b 81       	ldd	r25, Y+3	; 0x03
    532c:	28 85       	ldd	r18, Y+8	; 0x08
    532e:	39 85       	ldd	r19, Y+9	; 0x09
    5330:	fc 01       	movw	r30, r24
    5332:	37 83       	std	Z+7, r19	; 0x07
    5334:	26 83       	std	Z+6, r18	; 0x06
    5336:	88 85       	ldd	r24, Y+8	; 0x08
    5338:	99 85       	ldd	r25, Y+9	; 0x09
    533a:	fc 01       	movw	r30, r24
    533c:	26 81       	ldd	r18, Z+6	; 0x06
    533e:	37 81       	ldd	r19, Z+7	; 0x07
    5340:	8a 81       	ldd	r24, Y+2	; 0x02
    5342:	9b 81       	ldd	r25, Y+3	; 0x03
    5344:	fc 01       	movw	r30, r24
    5346:	31 87       	std	Z+9, r19	; 0x09
    5348:	20 87       	std	Z+8, r18	; 0x08
    534a:	88 85       	ldd	r24, Y+8	; 0x08
    534c:	99 85       	ldd	r25, Y+9	; 0x09
    534e:	fc 01       	movw	r30, r24
    5350:	86 81       	ldd	r24, Z+6	; 0x06
    5352:	97 81       	ldd	r25, Z+7	; 0x07
    5354:	2a 81       	ldd	r18, Y+2	; 0x02
    5356:	3b 81       	ldd	r19, Y+3	; 0x03
    5358:	2e 5f       	subi	r18, 0xFE	; 254
    535a:	3f 4f       	sbci	r19, 0xFF	; 255
    535c:	fc 01       	movw	r30, r24
    535e:	35 83       	std	Z+5, r19	; 0x05
    5360:	24 83       	std	Z+4, r18	; 0x04
    5362:	8a 81       	ldd	r24, Y+2	; 0x02
    5364:	9b 81       	ldd	r25, Y+3	; 0x03
    5366:	9c 01       	movw	r18, r24
    5368:	2e 5f       	subi	r18, 0xFE	; 254
    536a:	3f 4f       	sbci	r19, 0xFF	; 255
    536c:	88 85       	ldd	r24, Y+8	; 0x08
    536e:	99 85       	ldd	r25, Y+9	; 0x09
    5370:	fc 01       	movw	r30, r24
    5372:	37 83       	std	Z+7, r19	; 0x07
    5374:	26 83       	std	Z+6, r18	; 0x06
    5376:	8a 81       	ldd	r24, Y+2	; 0x02
    5378:	9b 81       	ldd	r25, Y+3	; 0x03
    537a:	fc 01       	movw	r30, r24
    537c:	82 8d       	ldd	r24, Z+26	; 0x1a
    537e:	28 2f       	mov	r18, r24
    5380:	30 e0       	ldi	r19, 0x00	; 0
    5382:	4b e0       	ldi	r20, 0x0B	; 11
    5384:	42 9f       	mul	r20, r18
    5386:	c0 01       	movw	r24, r0
    5388:	43 9f       	mul	r20, r19
    538a:	90 0d       	add	r25, r0
    538c:	11 24       	eor	r1, r1
    538e:	9c 01       	movw	r18, r24
    5390:	26 52       	subi	r18, 0x26	; 38
    5392:	35 4e       	sbci	r19, 0xE5	; 229
    5394:	8a 81       	ldd	r24, Y+2	; 0x02
    5396:	9b 81       	ldd	r25, Y+3	; 0x03
    5398:	fc 01       	movw	r30, r24
    539a:	35 87       	std	Z+13, r19	; 0x0d
    539c:	24 87       	std	Z+12, r18	; 0x0c
    539e:	8a 81       	ldd	r24, Y+2	; 0x02
    53a0:	9b 81       	ldd	r25, Y+3	; 0x03
    53a2:	fc 01       	movw	r30, r24
    53a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    53a6:	88 2f       	mov	r24, r24
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	4b e0       	ldi	r20, 0x0B	; 11
    53ac:	48 9f       	mul	r20, r24
    53ae:	90 01       	movw	r18, r0
    53b0:	49 9f       	mul	r20, r25
    53b2:	30 0d       	add	r19, r0
    53b4:	11 24       	eor	r1, r1
    53b6:	26 52       	subi	r18, 0x26	; 38
    53b8:	35 4e       	sbci	r19, 0xE5	; 229
    53ba:	f9 01       	movw	r30, r18
    53bc:	20 81       	ld	r18, Z
    53be:	41 e0       	ldi	r20, 0x01	; 1
    53c0:	42 0f       	add	r20, r18
    53c2:	5b e0       	ldi	r21, 0x0B	; 11
    53c4:	58 9f       	mul	r21, r24
    53c6:	90 01       	movw	r18, r0
    53c8:	59 9f       	mul	r21, r25
    53ca:	30 0d       	add	r19, r0
    53cc:	11 24       	eor	r1, r1
    53ce:	c9 01       	movw	r24, r18
    53d0:	86 52       	subi	r24, 0x26	; 38
    53d2:	95 4e       	sbci	r25, 0xE5	; 229
    53d4:	fc 01       	movw	r30, r24
    53d6:	40 83       	st	Z, r20
    53d8:	39 c0       	rjmp	.+114    	; 0x544c <xTaskGenericNotifyFromISR+0x3ea>
    53da:	80 91 63 1b 	lds	r24, 0x1B63	; 0x801b63 <xPendingReadyList+0x1>
    53de:	90 91 64 1b 	lds	r25, 0x1B64	; 0x801b64 <xPendingReadyList+0x2>
    53e2:	9b 87       	std	Y+11, r25	; 0x0b
    53e4:	8a 87       	std	Y+10, r24	; 0x0a
    53e6:	8a 81       	ldd	r24, Y+2	; 0x02
    53e8:	9b 81       	ldd	r25, Y+3	; 0x03
    53ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    53ec:	3b 85       	ldd	r19, Y+11	; 0x0b
    53ee:	fc 01       	movw	r30, r24
    53f0:	33 8b       	std	Z+19, r19	; 0x13
    53f2:	22 8b       	std	Z+18, r18	; 0x12
    53f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    53f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    53f8:	fc 01       	movw	r30, r24
    53fa:	26 81       	ldd	r18, Z+6	; 0x06
    53fc:	37 81       	ldd	r19, Z+7	; 0x07
    53fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5400:	9b 81       	ldd	r25, Y+3	; 0x03
    5402:	fc 01       	movw	r30, r24
    5404:	35 8b       	std	Z+21, r19	; 0x15
    5406:	24 8b       	std	Z+20, r18	; 0x14
    5408:	8a 85       	ldd	r24, Y+10	; 0x0a
    540a:	9b 85       	ldd	r25, Y+11	; 0x0b
    540c:	fc 01       	movw	r30, r24
    540e:	86 81       	ldd	r24, Z+6	; 0x06
    5410:	97 81       	ldd	r25, Z+7	; 0x07
    5412:	2a 81       	ldd	r18, Y+2	; 0x02
    5414:	3b 81       	ldd	r19, Y+3	; 0x03
    5416:	22 5f       	subi	r18, 0xF2	; 242
    5418:	3f 4f       	sbci	r19, 0xFF	; 255
    541a:	fc 01       	movw	r30, r24
    541c:	35 83       	std	Z+5, r19	; 0x05
    541e:	24 83       	std	Z+4, r18	; 0x04
    5420:	8a 81       	ldd	r24, Y+2	; 0x02
    5422:	9b 81       	ldd	r25, Y+3	; 0x03
    5424:	9c 01       	movw	r18, r24
    5426:	22 5f       	subi	r18, 0xF2	; 242
    5428:	3f 4f       	sbci	r19, 0xFF	; 255
    542a:	8a 85       	ldd	r24, Y+10	; 0x0a
    542c:	9b 85       	ldd	r25, Y+11	; 0x0b
    542e:	fc 01       	movw	r30, r24
    5430:	37 83       	std	Z+7, r19	; 0x07
    5432:	26 83       	std	Z+6, r18	; 0x06
    5434:	8a 81       	ldd	r24, Y+2	; 0x02
    5436:	9b 81       	ldd	r25, Y+3	; 0x03
    5438:	22 e6       	ldi	r18, 0x62	; 98
    543a:	3b e1       	ldi	r19, 0x1B	; 27
    543c:	fc 01       	movw	r30, r24
    543e:	31 8f       	std	Z+25, r19	; 0x19
    5440:	20 8f       	std	Z+24, r18	; 0x18
    5442:	80 91 62 1b 	lds	r24, 0x1B62	; 0x801b62 <xPendingReadyList>
    5446:	8f 5f       	subi	r24, 0xFF	; 255
    5448:	80 93 62 1b 	sts	0x1B62, r24	; 0x801b62 <xPendingReadyList>
    544c:	8a 81       	ldd	r24, Y+2	; 0x02
    544e:	9b 81       	ldd	r25, Y+3	; 0x03
    5450:	fc 01       	movw	r30, r24
    5452:	22 8d       	ldd	r18, Z+26	; 0x1a
    5454:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    5458:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    545c:	fc 01       	movw	r30, r24
    545e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5460:	82 17       	cp	r24, r18
    5462:	60 f4       	brcc	.+24     	; 0x547c <xTaskGenericNotifyFromISR+0x41a>
    5464:	8e 89       	ldd	r24, Y+22	; 0x16
    5466:	9f 89       	ldd	r25, Y+23	; 0x17
    5468:	89 2b       	or	r24, r25
    546a:	29 f0       	breq	.+10     	; 0x5476 <xTaskGenericNotifyFromISR+0x414>
    546c:	8e 89       	ldd	r24, Y+22	; 0x16
    546e:	9f 89       	ldd	r25, Y+23	; 0x17
    5470:	21 e0       	ldi	r18, 0x01	; 1
    5472:	fc 01       	movw	r30, r24
    5474:	20 83       	st	Z, r18
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	80 93 8f 1b 	sts	0x1B8F, r24	; 0x801b8f <xYieldPending>
    547c:	89 81       	ldd	r24, Y+1	; 0x01
    547e:	67 96       	adiw	r28, 0x17	; 23
    5480:	0f b6       	in	r0, 0x3f	; 63
    5482:	f8 94       	cli
    5484:	de bf       	out	0x3e, r29	; 62
    5486:	0f be       	out	0x3f, r0	; 63
    5488:	cd bf       	out	0x3d, r28	; 61
    548a:	df 91       	pop	r29
    548c:	cf 91       	pop	r28
    548e:	0f 91       	pop	r16
    5490:	ff 90       	pop	r15
    5492:	ef 90       	pop	r14
    5494:	df 90       	pop	r13
    5496:	cf 90       	pop	r12
    5498:	08 95       	ret

0000549a <xTaskGenericNotifyStateClear>:
    549a:	cf 93       	push	r28
    549c:	df 93       	push	r29
    549e:	00 d0       	rcall	.+0      	; 0x54a0 <xTaskGenericNotifyStateClear+0x6>
    54a0:	00 d0       	rcall	.+0      	; 0x54a2 <xTaskGenericNotifyStateClear+0x8>
    54a2:	cd b7       	in	r28, 0x3d	; 61
    54a4:	de b7       	in	r29, 0x3e	; 62
    54a6:	9d 83       	std	Y+5, r25	; 0x05
    54a8:	8c 83       	std	Y+4, r24	; 0x04
    54aa:	6e 83       	std	Y+6, r22	; 0x06
    54ac:	8c 81       	ldd	r24, Y+4	; 0x04
    54ae:	9d 81       	ldd	r25, Y+5	; 0x05
    54b0:	89 2b       	or	r24, r25
    54b2:	29 f4       	brne	.+10     	; 0x54be <xTaskGenericNotifyStateClear+0x24>
    54b4:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    54b8:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    54bc:	02 c0       	rjmp	.+4      	; 0x54c2 <xTaskGenericNotifyStateClear+0x28>
    54be:	8c 81       	ldd	r24, Y+4	; 0x04
    54c0:	9d 81       	ldd	r25, Y+5	; 0x05
    54c2:	9b 83       	std	Y+3, r25	; 0x03
    54c4:	8a 83       	std	Y+2, r24	; 0x02
    54c6:	0f b6       	in	r0, 0x3f	; 63
    54c8:	f8 94       	cli
    54ca:	0f 92       	push	r0
    54cc:	8e 81       	ldd	r24, Y+6	; 0x06
    54ce:	88 2f       	mov	r24, r24
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	2a 81       	ldd	r18, Y+2	; 0x02
    54d4:	3b 81       	ldd	r19, Y+3	; 0x03
    54d6:	82 0f       	add	r24, r18
    54d8:	93 1f       	adc	r25, r19
    54da:	c3 96       	adiw	r24, 0x33	; 51
    54dc:	fc 01       	movw	r30, r24
    54de:	80 81       	ld	r24, Z
    54e0:	82 30       	cpi	r24, 0x02	; 2
    54e2:	69 f4       	brne	.+26     	; 0x54fe <xTaskGenericNotifyStateClear+0x64>
    54e4:	8e 81       	ldd	r24, Y+6	; 0x06
    54e6:	88 2f       	mov	r24, r24
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	2a 81       	ldd	r18, Y+2	; 0x02
    54ec:	3b 81       	ldd	r19, Y+3	; 0x03
    54ee:	82 0f       	add	r24, r18
    54f0:	93 1f       	adc	r25, r19
    54f2:	c3 96       	adiw	r24, 0x33	; 51
    54f4:	fc 01       	movw	r30, r24
    54f6:	10 82       	st	Z, r1
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	89 83       	std	Y+1, r24	; 0x01
    54fc:	01 c0       	rjmp	.+2      	; 0x5500 <xTaskGenericNotifyStateClear+0x66>
    54fe:	19 82       	std	Y+1, r1	; 0x01
    5500:	0f 90       	pop	r0
    5502:	0f be       	out	0x3f, r0	; 63
    5504:	89 81       	ldd	r24, Y+1	; 0x01
    5506:	26 96       	adiw	r28, 0x06	; 6
    5508:	0f b6       	in	r0, 0x3f	; 63
    550a:	f8 94       	cli
    550c:	de bf       	out	0x3e, r29	; 62
    550e:	0f be       	out	0x3f, r0	; 63
    5510:	cd bf       	out	0x3d, r28	; 61
    5512:	df 91       	pop	r29
    5514:	cf 91       	pop	r28
    5516:	08 95       	ret

00005518 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    5518:	cf 93       	push	r28
    551a:	df 93       	push	r29
    551c:	cd b7       	in	r28, 0x3d	; 61
    551e:	de b7       	in	r29, 0x3e	; 62
    5520:	2f 97       	sbiw	r28, 0x0f	; 15
    5522:	0f b6       	in	r0, 0x3f	; 63
    5524:	f8 94       	cli
    5526:	de bf       	out	0x3e, r29	; 62
    5528:	0f be       	out	0x3f, r0	; 63
    552a:	cd bf       	out	0x3d, r28	; 61
    552c:	6b 87       	std	Y+11, r22	; 0x0b
    552e:	7c 87       	std	Y+12, r23	; 0x0c
    5530:	8d 87       	std	Y+13, r24	; 0x0d
    5532:	9e 87       	std	Y+14, r25	; 0x0e
    5534:	4f 87       	std	Y+15, r20	; 0x0f
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    5536:	80 91 85 1b 	lds	r24, 0x1B85	; 0x801b85 <xTickCount>
    553a:	90 91 86 1b 	lds	r25, 0x1B86	; 0x801b86 <xTickCount+0x1>
    553e:	a0 91 87 1b 	lds	r26, 0x1B87	; 0x801b87 <xTickCount+0x2>
    5542:	b0 91 88 1b 	lds	r27, 0x1B88	; 0x801b88 <xTickCount+0x3>
    5546:	89 83       	std	Y+1, r24	; 0x01
    5548:	9a 83       	std	Y+2, r25	; 0x02
    554a:	ab 83       	std	Y+3, r26	; 0x03
    554c:	bc 83       	std	Y+4, r27	; 0x04
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    554e:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    5552:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    5556:	02 96       	adiw	r24, 0x02	; 2
    5558:	0e 94 08 0a 	call	0x1410	; 0x1410 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    555c:	8b 85       	ldd	r24, Y+11	; 0x0b
    555e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5560:	ad 85       	ldd	r26, Y+13	; 0x0d
    5562:	be 85       	ldd	r27, Y+14	; 0x0e
    5564:	8f 3f       	cpi	r24, 0xFF	; 255
    5566:	9f 4f       	sbci	r25, 0xFF	; 255
    5568:	af 4f       	sbci	r26, 0xFF	; 255
    556a:	bf 4f       	sbci	r27, 0xFF	; 255
    556c:	09 f0       	breq	.+2      	; 0x5570 <prvAddCurrentTaskToDelayedList+0x58>
    556e:	49 c0       	rjmp	.+146    	; 0x5602 <prvAddCurrentTaskToDelayedList+0xea>
    5570:	8f 85       	ldd	r24, Y+15	; 0x0f
    5572:	88 23       	and	r24, r24
    5574:	09 f4       	brne	.+2      	; 0x5578 <prvAddCurrentTaskToDelayedList+0x60>
    5576:	45 c0       	rjmp	.+138    	; 0x5602 <prvAddCurrentTaskToDelayedList+0xea>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5578:	80 91 7a 1b 	lds	r24, 0x1B7A	; 0x801b7a <xSuspendedTaskList+0x1>
    557c:	90 91 7b 1b 	lds	r25, 0x1B7B	; 0x801b7b <xSuspendedTaskList+0x2>
    5580:	9e 83       	std	Y+6, r25	; 0x06
    5582:	8d 83       	std	Y+5, r24	; 0x05
    5584:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    5588:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    558c:	2d 81       	ldd	r18, Y+5	; 0x05
    558e:	3e 81       	ldd	r19, Y+6	; 0x06
    5590:	fc 01       	movw	r30, r24
    5592:	37 83       	std	Z+7, r19	; 0x07
    5594:	26 83       	std	Z+6, r18	; 0x06
    5596:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    559a:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    559e:	2d 81       	ldd	r18, Y+5	; 0x05
    55a0:	3e 81       	ldd	r19, Y+6	; 0x06
    55a2:	f9 01       	movw	r30, r18
    55a4:	26 81       	ldd	r18, Z+6	; 0x06
    55a6:	37 81       	ldd	r19, Z+7	; 0x07
    55a8:	fc 01       	movw	r30, r24
    55aa:	31 87       	std	Z+9, r19	; 0x09
    55ac:	20 87       	std	Z+8, r18	; 0x08
    55ae:	8d 81       	ldd	r24, Y+5	; 0x05
    55b0:	9e 81       	ldd	r25, Y+6	; 0x06
    55b2:	fc 01       	movw	r30, r24
    55b4:	86 81       	ldd	r24, Z+6	; 0x06
    55b6:	97 81       	ldd	r25, Z+7	; 0x07
    55b8:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    55bc:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    55c0:	2e 5f       	subi	r18, 0xFE	; 254
    55c2:	3f 4f       	sbci	r19, 0xFF	; 255
    55c4:	fc 01       	movw	r30, r24
    55c6:	35 83       	std	Z+5, r19	; 0x05
    55c8:	24 83       	std	Z+4, r18	; 0x04
    55ca:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    55ce:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    55d2:	9c 01       	movw	r18, r24
    55d4:	2e 5f       	subi	r18, 0xFE	; 254
    55d6:	3f 4f       	sbci	r19, 0xFF	; 255
    55d8:	8d 81       	ldd	r24, Y+5	; 0x05
    55da:	9e 81       	ldd	r25, Y+6	; 0x06
    55dc:	fc 01       	movw	r30, r24
    55de:	37 83       	std	Z+7, r19	; 0x07
    55e0:	26 83       	std	Z+6, r18	; 0x06
    55e2:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    55e6:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    55ea:	29 e7       	ldi	r18, 0x79	; 121
    55ec:	3b e1       	ldi	r19, 0x1B	; 27
    55ee:	fc 01       	movw	r30, r24
    55f0:	35 87       	std	Z+13, r19	; 0x0d
    55f2:	24 87       	std	Z+12, r18	; 0x0c
    55f4:	80 91 79 1b 	lds	r24, 0x1B79	; 0x801b79 <xSuspendedTaskList>
    55f8:	8f 5f       	subi	r24, 0xFF	; 255
    55fa:	80 93 79 1b 	sts	0x1B79, r24	; 0x801b79 <xSuspendedTaskList>
    55fe:	00 00       	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    5600:	64 c0       	rjmp	.+200    	; 0x56ca <prvAddCurrentTaskToDelayedList+0x1b2>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
    5602:	29 81       	ldd	r18, Y+1	; 0x01
    5604:	3a 81       	ldd	r19, Y+2	; 0x02
    5606:	4b 81       	ldd	r20, Y+3	; 0x03
    5608:	5c 81       	ldd	r21, Y+4	; 0x04
    560a:	8b 85       	ldd	r24, Y+11	; 0x0b
    560c:	9c 85       	ldd	r25, Y+12	; 0x0c
    560e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5610:	be 85       	ldd	r27, Y+14	; 0x0e
    5612:	82 0f       	add	r24, r18
    5614:	93 1f       	adc	r25, r19
    5616:	a4 1f       	adc	r26, r20
    5618:	b5 1f       	adc	r27, r21
    561a:	8f 83       	std	Y+7, r24	; 0x07
    561c:	98 87       	std	Y+8, r25	; 0x08
    561e:	a9 87       	std	Y+9, r26	; 0x09
    5620:	ba 87       	std	Y+10, r27	; 0x0a

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5622:	20 91 d8 1a 	lds	r18, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    5626:	30 91 d9 1a 	lds	r19, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    562a:	8f 81       	ldd	r24, Y+7	; 0x07
    562c:	98 85       	ldd	r25, Y+8	; 0x08
    562e:	a9 85       	ldd	r26, Y+9	; 0x09
    5630:	ba 85       	ldd	r27, Y+10	; 0x0a
    5632:	f9 01       	movw	r30, r18
    5634:	82 83       	std	Z+2, r24	; 0x02
    5636:	93 83       	std	Z+3, r25	; 0x03
    5638:	a4 83       	std	Z+4, r26	; 0x04
    563a:	b5 83       	std	Z+5, r27	; 0x05

                if( xTimeToWake < xConstTickCount )
    563c:	2f 81       	ldd	r18, Y+7	; 0x07
    563e:	38 85       	ldd	r19, Y+8	; 0x08
    5640:	49 85       	ldd	r20, Y+9	; 0x09
    5642:	5a 85       	ldd	r21, Y+10	; 0x0a
    5644:	89 81       	ldd	r24, Y+1	; 0x01
    5646:	9a 81       	ldd	r25, Y+2	; 0x02
    5648:	ab 81       	ldd	r26, Y+3	; 0x03
    564a:	bc 81       	ldd	r27, Y+4	; 0x04
    564c:	28 17       	cp	r18, r24
    564e:	39 07       	cpc	r19, r25
    5650:	4a 07       	cpc	r20, r26
    5652:	5b 07       	cpc	r21, r27
    5654:	78 f4       	brcc	.+30     	; 0x5674 <prvAddCurrentTaskToDelayedList+0x15c>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5656:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    565a:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    565e:	9c 01       	movw	r18, r24
    5660:	2e 5f       	subi	r18, 0xFE	; 254
    5662:	3f 4f       	sbci	r19, 0xFF	; 255
    5664:	80 91 60 1b 	lds	r24, 0x1B60	; 0x801b60 <pxOverflowDelayedTaskList>
    5668:	90 91 61 1b 	lds	r25, 0x1B61	; 0x801b61 <pxOverflowDelayedTaskList+0x1>
    566c:	b9 01       	movw	r22, r18
    566e:	0e 94 81 09 	call	0x1302	; 0x1302 <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    5672:	2b c0       	rjmp	.+86     	; 0x56ca <prvAddCurrentTaskToDelayedList+0x1b2>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5674:	80 91 d8 1a 	lds	r24, 0x1AD8	; 0x801ad8 <pxCurrentTCB>
    5678:	90 91 d9 1a 	lds	r25, 0x1AD9	; 0x801ad9 <pxCurrentTCB+0x1>
    567c:	9c 01       	movw	r18, r24
    567e:	2e 5f       	subi	r18, 0xFE	; 254
    5680:	3f 4f       	sbci	r19, 0xFF	; 255
    5682:	80 91 5e 1b 	lds	r24, 0x1B5E	; 0x801b5e <pxDelayedTaskList>
    5686:	90 91 5f 1b 	lds	r25, 0x1B5F	; 0x801b5f <pxDelayedTaskList+0x1>
    568a:	b9 01       	movw	r22, r18
    568c:	0e 94 81 09 	call	0x1302	; 0x1302 <vListInsert>

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
    5690:	80 91 92 1b 	lds	r24, 0x1B92	; 0x801b92 <xNextTaskUnblockTime>
    5694:	90 91 93 1b 	lds	r25, 0x1B93	; 0x801b93 <xNextTaskUnblockTime+0x1>
    5698:	a0 91 94 1b 	lds	r26, 0x1B94	; 0x801b94 <xNextTaskUnblockTime+0x2>
    569c:	b0 91 95 1b 	lds	r27, 0x1B95	; 0x801b95 <xNextTaskUnblockTime+0x3>
    56a0:	2f 81       	ldd	r18, Y+7	; 0x07
    56a2:	38 85       	ldd	r19, Y+8	; 0x08
    56a4:	49 85       	ldd	r20, Y+9	; 0x09
    56a6:	5a 85       	ldd	r21, Y+10	; 0x0a
    56a8:	28 17       	cp	r18, r24
    56aa:	39 07       	cpc	r19, r25
    56ac:	4a 07       	cpc	r20, r26
    56ae:	5b 07       	cpc	r21, r27
    56b0:	60 f4       	brcc	.+24     	; 0x56ca <prvAddCurrentTaskToDelayedList+0x1b2>
                    {
                        xNextTaskUnblockTime = xTimeToWake;
    56b2:	8f 81       	ldd	r24, Y+7	; 0x07
    56b4:	98 85       	ldd	r25, Y+8	; 0x08
    56b6:	a9 85       	ldd	r26, Y+9	; 0x09
    56b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    56ba:	80 93 92 1b 	sts	0x1B92, r24	; 0x801b92 <xNextTaskUnblockTime>
    56be:	90 93 93 1b 	sts	0x1B93, r25	; 0x801b93 <xNextTaskUnblockTime+0x1>
    56c2:	a0 93 94 1b 	sts	0x1B94, r26	; 0x801b94 <xNextTaskUnblockTime+0x2>
    56c6:	b0 93 95 1b 	sts	0x1B95, r27	; 0x801b95 <xNextTaskUnblockTime+0x3>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    56ca:	00 00       	nop
    56cc:	2f 96       	adiw	r28, 0x0f	; 15
    56ce:	0f b6       	in	r0, 0x3f	; 63
    56d0:	f8 94       	cli
    56d2:	de bf       	out	0x3e, r29	; 62
    56d4:	0f be       	out	0x3f, r0	; 63
    56d6:	cd bf       	out	0x3d, r28	; 61
    56d8:	df 91       	pop	r29
    56da:	cf 91       	pop	r28
    56dc:	08 95       	ret

000056de <xTimerCreateTimerTask>:
    56de:	ef 92       	push	r14
    56e0:	ff 92       	push	r15
    56e2:	0f 93       	push	r16
    56e4:	cf 93       	push	r28
    56e6:	df 93       	push	r29
    56e8:	1f 92       	push	r1
    56ea:	cd b7       	in	r28, 0x3d	; 61
    56ec:	de b7       	in	r29, 0x3e	; 62
    56ee:	19 82       	std	Y+1, r1	; 0x01
    56f0:	ae d4       	rcall	.+2396   	; 0x604e <prvCheckForValidListAndQueue>
    56f2:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <xTimerQueue>
    56f6:	90 91 b4 1b 	lds	r25, 0x1BB4	; 0x801bb4 <xTimerQueue+0x1>
    56fa:	89 2b       	or	r24, r25
    56fc:	91 f0       	breq	.+36     	; 0x5722 <xTimerCreateTimerTask+0x44>
    56fe:	0f 2e       	mov	r0, r31
    5700:	f5 eb       	ldi	r31, 0xB5	; 181
    5702:	ef 2e       	mov	r14, r31
    5704:	fb e1       	ldi	r31, 0x1B	; 27
    5706:	ff 2e       	mov	r15, r31
    5708:	f0 2d       	mov	r31, r0
    570a:	03 e0       	ldi	r16, 0x03	; 3
    570c:	20 e0       	ldi	r18, 0x00	; 0
    570e:	30 e0       	ldi	r19, 0x00	; 0
    5710:	40 ec       	ldi	r20, 0xC0	; 192
    5712:	50 e0       	ldi	r21, 0x00	; 0
    5714:	6a e5       	ldi	r22, 0x5A	; 90
    5716:	73 e0       	ldi	r23, 0x03	; 3
    5718:	81 e6       	ldi	r24, 0x61	; 97
    571a:	91 e0       	ldi	r25, 0x01	; 1
    571c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskCreate>
    5720:	89 83       	std	Y+1, r24	; 0x01
    5722:	89 81       	ldd	r24, Y+1	; 0x01
    5724:	0f 90       	pop	r0
    5726:	df 91       	pop	r29
    5728:	cf 91       	pop	r28
    572a:	0f 91       	pop	r16
    572c:	ff 90       	pop	r15
    572e:	ef 90       	pop	r14
    5730:	08 95       	ret

00005732 <xTimerGenericCommand>:
    5732:	cf 92       	push	r12
    5734:	df 92       	push	r13
    5736:	ef 92       	push	r14
    5738:	ff 92       	push	r15
    573a:	0f 93       	push	r16
    573c:	1f 93       	push	r17
    573e:	cf 93       	push	r28
    5740:	df 93       	push	r29
    5742:	cd b7       	in	r28, 0x3d	; 61
    5744:	de b7       	in	r29, 0x3e	; 62
    5746:	65 97       	sbiw	r28, 0x15	; 21
    5748:	0f b6       	in	r0, 0x3f	; 63
    574a:	f8 94       	cli
    574c:	de bf       	out	0x3e, r29	; 62
    574e:	0f be       	out	0x3f, r0	; 63
    5750:	cd bf       	out	0x3d, r28	; 61
    5752:	9a 87       	std	Y+10, r25	; 0x0a
    5754:	89 87       	std	Y+9, r24	; 0x09
    5756:	6b 87       	std	Y+11, r22	; 0x0b
    5758:	2c 87       	std	Y+12, r18	; 0x0c
    575a:	3d 87       	std	Y+13, r19	; 0x0d
    575c:	4e 87       	std	Y+14, r20	; 0x0e
    575e:	5f 87       	std	Y+15, r21	; 0x0f
    5760:	19 8b       	std	Y+17, r17	; 0x11
    5762:	08 8b       	std	Y+16, r16	; 0x10
    5764:	ca 8a       	std	Y+18, r12	; 0x12
    5766:	db 8a       	std	Y+19, r13	; 0x13
    5768:	ec 8a       	std	Y+20, r14	; 0x14
    576a:	fd 8a       	std	Y+21, r15	; 0x15
    576c:	19 82       	std	Y+1, r1	; 0x01
    576e:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <xTimerQueue>
    5772:	90 91 b4 1b 	lds	r25, 0x1BB4	; 0x801bb4 <xTimerQueue+0x1>
    5776:	89 2b       	or	r24, r25
    5778:	09 f4       	brne	.+2      	; 0x577c <xTimerGenericCommand+0x4a>
    577a:	43 c0       	rjmp	.+134    	; 0x5802 <xTimerGenericCommand+0xd0>
    577c:	8b 85       	ldd	r24, Y+11	; 0x0b
    577e:	8a 83       	std	Y+2, r24	; 0x02
    5780:	8c 85       	ldd	r24, Y+12	; 0x0c
    5782:	9d 85       	ldd	r25, Y+13	; 0x0d
    5784:	ae 85       	ldd	r26, Y+14	; 0x0e
    5786:	bf 85       	ldd	r27, Y+15	; 0x0f
    5788:	8b 83       	std	Y+3, r24	; 0x03
    578a:	9c 83       	std	Y+4, r25	; 0x04
    578c:	ad 83       	std	Y+5, r26	; 0x05
    578e:	be 83       	std	Y+6, r27	; 0x06
    5790:	89 85       	ldd	r24, Y+9	; 0x09
    5792:	9a 85       	ldd	r25, Y+10	; 0x0a
    5794:	98 87       	std	Y+8, r25	; 0x08
    5796:	8f 83       	std	Y+7, r24	; 0x07
    5798:	8b 85       	ldd	r24, Y+11	; 0x0b
    579a:	86 30       	cpi	r24, 0x06	; 6
    579c:	2c f5       	brge	.+74     	; 0x57e8 <xTimerGenericCommand+0xb6>
    579e:	42 d8       	rcall	.-3964   	; 0x4824 <xTaskGetSchedulerState>
    57a0:	82 30       	cpi	r24, 0x02	; 2
    57a2:	99 f4       	brne	.+38     	; 0x57ca <xTimerGenericCommand+0x98>
    57a4:	e0 91 b3 1b 	lds	r30, 0x1BB3	; 0x801bb3 <xTimerQueue>
    57a8:	f0 91 b4 1b 	lds	r31, 0x1BB4	; 0x801bb4 <xTimerQueue+0x1>
    57ac:	8a 89       	ldd	r24, Y+18	; 0x12
    57ae:	9b 89       	ldd	r25, Y+19	; 0x13
    57b0:	ac 89       	ldd	r26, Y+20	; 0x14
    57b2:	bd 89       	ldd	r27, Y+21	; 0x15
    57b4:	be 01       	movw	r22, r28
    57b6:	6e 5f       	subi	r22, 0xFE	; 254
    57b8:	7f 4f       	sbci	r23, 0xFF	; 255
    57ba:	00 e0       	ldi	r16, 0x00	; 0
    57bc:	9c 01       	movw	r18, r24
    57be:	ad 01       	movw	r20, r26
    57c0:	cf 01       	movw	r24, r30
    57c2:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <xQueueGenericSend>
    57c6:	89 83       	std	Y+1, r24	; 0x01
    57c8:	1c c0       	rjmp	.+56     	; 0x5802 <xTimerGenericCommand+0xd0>
    57ca:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <xTimerQueue>
    57ce:	90 91 b4 1b 	lds	r25, 0x1BB4	; 0x801bb4 <xTimerQueue+0x1>
    57d2:	be 01       	movw	r22, r28
    57d4:	6e 5f       	subi	r22, 0xFE	; 254
    57d6:	7f 4f       	sbci	r23, 0xFF	; 255
    57d8:	00 e0       	ldi	r16, 0x00	; 0
    57da:	20 e0       	ldi	r18, 0x00	; 0
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	a9 01       	movw	r20, r18
    57e0:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <xQueueGenericSend>
    57e4:	89 83       	std	Y+1, r24	; 0x01
    57e6:	0d c0       	rjmp	.+26     	; 0x5802 <xTimerGenericCommand+0xd0>
    57e8:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <xTimerQueue>
    57ec:	90 91 b4 1b 	lds	r25, 0x1BB4	; 0x801bb4 <xTimerQueue+0x1>
    57f0:	48 89       	ldd	r20, Y+16	; 0x10
    57f2:	59 89       	ldd	r21, Y+17	; 0x11
    57f4:	be 01       	movw	r22, r28
    57f6:	6e 5f       	subi	r22, 0xFE	; 254
    57f8:	7f 4f       	sbci	r23, 0xFF	; 255
    57fa:	20 e0       	ldi	r18, 0x00	; 0
    57fc:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <xQueueGenericSendFromISR>
    5800:	89 83       	std	Y+1, r24	; 0x01
    5802:	89 81       	ldd	r24, Y+1	; 0x01
    5804:	65 96       	adiw	r28, 0x15	; 21
    5806:	0f b6       	in	r0, 0x3f	; 63
    5808:	f8 94       	cli
    580a:	de bf       	out	0x3e, r29	; 62
    580c:	0f be       	out	0x3f, r0	; 63
    580e:	cd bf       	out	0x3d, r28	; 61
    5810:	df 91       	pop	r29
    5812:	cf 91       	pop	r28
    5814:	1f 91       	pop	r17
    5816:	0f 91       	pop	r16
    5818:	ff 90       	pop	r15
    581a:	ef 90       	pop	r14
    581c:	df 90       	pop	r13
    581e:	cf 90       	pop	r12
    5820:	08 95       	ret

00005822 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    5822:	cf 92       	push	r12
    5824:	df 92       	push	r13
    5826:	ef 92       	push	r14
    5828:	ff 92       	push	r15
    582a:	0f 93       	push	r16
    582c:	1f 93       	push	r17
    582e:	cf 93       	push	r28
    5830:	df 93       	push	r29
    5832:	cd b7       	in	r28, 0x3d	; 61
    5834:	de b7       	in	r29, 0x3e	; 62
    5836:	2b 97       	sbiw	r28, 0x0b	; 11
    5838:	0f b6       	in	r0, 0x3f	; 63
    583a:	f8 94       	cli
    583c:	de bf       	out	0x3e, r29	; 62
    583e:	0f be       	out	0x3f, r0	; 63
    5840:	cd bf       	out	0x3d, r28	; 61
    5842:	6c 83       	std	Y+4, r22	; 0x04
    5844:	7d 83       	std	Y+5, r23	; 0x05
    5846:	8e 83       	std	Y+6, r24	; 0x06
    5848:	9f 83       	std	Y+7, r25	; 0x07
    584a:	28 87       	std	Y+8, r18	; 0x08
    584c:	39 87       	std	Y+9, r19	; 0x09
    584e:	4a 87       	std	Y+10, r20	; 0x0a
    5850:	5b 87       	std	Y+11, r21	; 0x0b
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5852:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <pxCurrentTimerList>
    5856:	90 91 b0 1b 	lds	r25, 0x1BB0	; 0x801bb0 <pxCurrentTimerList+0x1>
    585a:	fc 01       	movw	r30, r24
    585c:	87 81       	ldd	r24, Z+7	; 0x07
    585e:	90 85       	ldd	r25, Z+8	; 0x08
    5860:	fc 01       	movw	r30, r24
    5862:	80 85       	ldd	r24, Z+8	; 0x08
    5864:	91 85       	ldd	r25, Z+9	; 0x09
    5866:	9a 83       	std	Y+2, r25	; 0x02
    5868:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    586a:	89 81       	ldd	r24, Y+1	; 0x01
    586c:	9a 81       	ldd	r25, Y+2	; 0x02
    586e:	02 96       	adiw	r24, 0x02	; 2
    5870:	0e 94 08 0a 	call	0x1410	; 0x1410 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5874:	89 81       	ldd	r24, Y+1	; 0x01
    5876:	9a 81       	ldd	r25, Y+2	; 0x02
    5878:	fc 01       	movw	r30, r24
    587a:	86 89       	ldd	r24, Z+22	; 0x16
    587c:	88 2f       	mov	r24, r24
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	84 70       	andi	r24, 0x04	; 4
    5882:	99 27       	eor	r25, r25
    5884:	89 2b       	or	r24, r25
    5886:	a9 f1       	breq	.+106    	; 0x58f2 <prvProcessExpiredTimer+0xd0>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    5888:	89 81       	ldd	r24, Y+1	; 0x01
    588a:	9a 81       	ldd	r25, Y+2	; 0x02
    588c:	fc 01       	movw	r30, r24
    588e:	26 85       	ldd	r18, Z+14	; 0x0e
    5890:	37 85       	ldd	r19, Z+15	; 0x0f
    5892:	40 89       	ldd	r20, Z+16	; 0x10
    5894:	51 89       	ldd	r21, Z+17	; 0x11
    5896:	8c 81       	ldd	r24, Y+4	; 0x04
    5898:	9d 81       	ldd	r25, Y+5	; 0x05
    589a:	ae 81       	ldd	r26, Y+6	; 0x06
    589c:	bf 81       	ldd	r27, Y+7	; 0x07
    589e:	82 0f       	add	r24, r18
    58a0:	93 1f       	adc	r25, r19
    58a2:	a4 1f       	adc	r26, r20
    58a4:	b5 1f       	adc	r27, r21
    58a6:	ec 80       	ldd	r14, Y+4	; 0x04
    58a8:	fd 80       	ldd	r15, Y+5	; 0x05
    58aa:	0e 81       	ldd	r16, Y+6	; 0x06
    58ac:	1f 81       	ldd	r17, Y+7	; 0x07
    58ae:	28 85       	ldd	r18, Y+8	; 0x08
    58b0:	39 85       	ldd	r19, Y+9	; 0x09
    58b2:	4a 85       	ldd	r20, Y+10	; 0x0a
    58b4:	5b 85       	ldd	r21, Y+11	; 0x0b
    58b6:	e9 81       	ldd	r30, Y+1	; 0x01
    58b8:	fa 81       	ldd	r31, Y+2	; 0x02
    58ba:	67 01       	movw	r12, r14
    58bc:	78 01       	movw	r14, r16
    58be:	89 01       	movw	r16, r18
    58c0:	9a 01       	movw	r18, r20
    58c2:	ac 01       	movw	r20, r24
    58c4:	bd 01       	movw	r22, r26
    58c6:	cf 01       	movw	r24, r30
    58c8:	3e d1       	rcall	.+636    	; 0x5b46 <prvInsertTimerInActiveList>
    58ca:	88 23       	and	r24, r24
    58cc:	e1 f0       	breq	.+56     	; 0x5906 <prvProcessExpiredTimer+0xe4>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    58ce:	8c 81       	ldd	r24, Y+4	; 0x04
    58d0:	9d 81       	ldd	r25, Y+5	; 0x05
    58d2:	ae 81       	ldd	r26, Y+6	; 0x06
    58d4:	bf 81       	ldd	r27, Y+7	; 0x07
    58d6:	e9 81       	ldd	r30, Y+1	; 0x01
    58d8:	fa 81       	ldd	r31, Y+2	; 0x02
    58da:	c1 2c       	mov	r12, r1
    58dc:	d1 2c       	mov	r13, r1
    58de:	76 01       	movw	r14, r12
    58e0:	00 e0       	ldi	r16, 0x00	; 0
    58e2:	10 e0       	ldi	r17, 0x00	; 0
    58e4:	9c 01       	movw	r18, r24
    58e6:	ad 01       	movw	r20, r26
    58e8:	60 e0       	ldi	r22, 0x00	; 0
    58ea:	cf 01       	movw	r24, r30
    58ec:	22 df       	rcall	.-444    	; 0x5732 <xTimerGenericCommand>
    58ee:	8b 83       	std	Y+3, r24	; 0x03
    58f0:	0a c0       	rjmp	.+20     	; 0x5906 <prvProcessExpiredTimer+0xe4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    58f2:	89 81       	ldd	r24, Y+1	; 0x01
    58f4:	9a 81       	ldd	r25, Y+2	; 0x02
    58f6:	fc 01       	movw	r30, r24
    58f8:	86 89       	ldd	r24, Z+22	; 0x16
    58fa:	28 2f       	mov	r18, r24
    58fc:	2e 7f       	andi	r18, 0xFE	; 254
    58fe:	89 81       	ldd	r24, Y+1	; 0x01
    5900:	9a 81       	ldd	r25, Y+2	; 0x02
    5902:	fc 01       	movw	r30, r24
    5904:	26 8b       	std	Z+22, r18	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5906:	89 81       	ldd	r24, Y+1	; 0x01
    5908:	9a 81       	ldd	r25, Y+2	; 0x02
    590a:	fc 01       	movw	r30, r24
    590c:	24 89       	ldd	r18, Z+20	; 0x14
    590e:	35 89       	ldd	r19, Z+21	; 0x15
    5910:	89 81       	ldd	r24, Y+1	; 0x01
    5912:	9a 81       	ldd	r25, Y+2	; 0x02
    5914:	f9 01       	movw	r30, r18
    5916:	19 95       	eicall
    }
    5918:	00 00       	nop
    591a:	2b 96       	adiw	r28, 0x0b	; 11
    591c:	0f b6       	in	r0, 0x3f	; 63
    591e:	f8 94       	cli
    5920:	de bf       	out	0x3e, r29	; 62
    5922:	0f be       	out	0x3f, r0	; 63
    5924:	cd bf       	out	0x3d, r28	; 61
    5926:	df 91       	pop	r29
    5928:	cf 91       	pop	r28
    592a:	1f 91       	pop	r17
    592c:	0f 91       	pop	r16
    592e:	ff 90       	pop	r15
    5930:	ef 90       	pop	r14
    5932:	df 90       	pop	r13
    5934:	cf 90       	pop	r12
    5936:	08 95       	ret

00005938 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    5938:	ef 92       	push	r14
    593a:	ff 92       	push	r15
    593c:	0f 93       	push	r16
    593e:	1f 93       	push	r17
    5940:	cf 93       	push	r28
    5942:	df 93       	push	r29
    5944:	cd b7       	in	r28, 0x3d	; 61
    5946:	de b7       	in	r29, 0x3e	; 62
    5948:	2a 97       	sbiw	r28, 0x0a	; 10
    594a:	0f b6       	in	r0, 0x3f	; 63
    594c:	f8 94       	cli
    594e:	de bf       	out	0x3e, r29	; 62
    5950:	0f be       	out	0x3f, r0	; 63
    5952:	cd bf       	out	0x3d, r28	; 61
    5954:	6e 83       	std	Y+6, r22	; 0x06
    5956:	7f 83       	std	Y+7, r23	; 0x07
    5958:	88 87       	std	Y+8, r24	; 0x08
    595a:	99 87       	std	Y+9, r25	; 0x09
    595c:	4a 87       	std	Y+10, r20	; 0x0a
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    595e:	0e 94 24 1a 	call	0x3448	; 0x3448 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5962:	ce 01       	movw	r24, r28
    5964:	05 96       	adiw	r24, 0x05	; 5
    5966:	a8 d0       	rcall	.+336    	; 0x5ab8 <prvSampleTimeNow>
    5968:	dc 01       	movw	r26, r24
    596a:	cb 01       	movw	r24, r22
    596c:	89 83       	std	Y+1, r24	; 0x01
    596e:	9a 83       	std	Y+2, r25	; 0x02
    5970:	ab 83       	std	Y+3, r26	; 0x03
    5972:	bc 83       	std	Y+4, r27	; 0x04

            if( xTimerListsWereSwitched == pdFALSE )
    5974:	8d 81       	ldd	r24, Y+5	; 0x05
    5976:	88 23       	and	r24, r24
    5978:	09 f0       	breq	.+2      	; 0x597c <prvProcessTimerOrBlockTask+0x44>
    597a:	4d c0       	rjmp	.+154    	; 0x5a16 <prvProcessTimerOrBlockTask+0xde>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    597c:	8a 85       	ldd	r24, Y+10	; 0x0a
    597e:	88 23       	and	r24, r24
    5980:	d9 f4       	brne	.+54     	; 0x59b8 <prvProcessTimerOrBlockTask+0x80>
    5982:	2e 81       	ldd	r18, Y+6	; 0x06
    5984:	3f 81       	ldd	r19, Y+7	; 0x07
    5986:	48 85       	ldd	r20, Y+8	; 0x08
    5988:	59 85       	ldd	r21, Y+9	; 0x09
    598a:	89 81       	ldd	r24, Y+1	; 0x01
    598c:	9a 81       	ldd	r25, Y+2	; 0x02
    598e:	ab 81       	ldd	r26, Y+3	; 0x03
    5990:	bc 81       	ldd	r27, Y+4	; 0x04
    5992:	82 17       	cp	r24, r18
    5994:	93 07       	cpc	r25, r19
    5996:	a4 07       	cpc	r26, r20
    5998:	b5 07       	cpc	r27, r21
    599a:	70 f0       	brcs	.+28     	; 0x59b8 <prvProcessTimerOrBlockTask+0x80>
                {
                    ( void ) xTaskResumeAll();
    599c:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    59a0:	29 81       	ldd	r18, Y+1	; 0x01
    59a2:	3a 81       	ldd	r19, Y+2	; 0x02
    59a4:	4b 81       	ldd	r20, Y+3	; 0x03
    59a6:	5c 81       	ldd	r21, Y+4	; 0x04
    59a8:	8e 81       	ldd	r24, Y+6	; 0x06
    59aa:	9f 81       	ldd	r25, Y+7	; 0x07
    59ac:	a8 85       	ldd	r26, Y+8	; 0x08
    59ae:	b9 85       	ldd	r27, Y+9	; 0x09
    59b0:	bc 01       	movw	r22, r24
    59b2:	cd 01       	movw	r24, r26
    59b4:	36 df       	rcall	.-404    	; 0x5822 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    59b6:	31 c0       	rjmp	.+98     	; 0x5a1a <prvProcessTimerOrBlockTask+0xe2>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    59b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    59ba:	88 23       	and	r24, r24
    59bc:	59 f0       	breq	.+22     	; 0x59d4 <prvProcessTimerOrBlockTask+0x9c>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    59be:	80 91 b1 1b 	lds	r24, 0x1BB1	; 0x801bb1 <pxOverflowTimerList>
    59c2:	90 91 b2 1b 	lds	r25, 0x1BB2	; 0x801bb2 <pxOverflowTimerList+0x1>
    59c6:	fc 01       	movw	r30, r24
    59c8:	90 81       	ld	r25, Z
    59ca:	81 e0       	ldi	r24, 0x01	; 1
    59cc:	99 23       	and	r25, r25
    59ce:	09 f0       	breq	.+2      	; 0x59d2 <prvProcessTimerOrBlockTask+0x9a>
    59d0:	80 e0       	ldi	r24, 0x00	; 0
    59d2:	8a 87       	std	Y+10, r24	; 0x0a
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    59d4:	2e 81       	ldd	r18, Y+6	; 0x06
    59d6:	3f 81       	ldd	r19, Y+7	; 0x07
    59d8:	48 85       	ldd	r20, Y+8	; 0x08
    59da:	59 85       	ldd	r21, Y+9	; 0x09
    59dc:	89 81       	ldd	r24, Y+1	; 0x01
    59de:	9a 81       	ldd	r25, Y+2	; 0x02
    59e0:	ab 81       	ldd	r26, Y+3	; 0x03
    59e2:	bc 81       	ldd	r27, Y+4	; 0x04
    59e4:	79 01       	movw	r14, r18
    59e6:	8a 01       	movw	r16, r20
    59e8:	e8 1a       	sub	r14, r24
    59ea:	f9 0a       	sbc	r15, r25
    59ec:	0a 0b       	sbc	r16, r26
    59ee:	1b 0b       	sbc	r17, r27
    59f0:	d8 01       	movw	r26, r16
    59f2:	c7 01       	movw	r24, r14
    59f4:	e0 91 b3 1b 	lds	r30, 0x1BB3	; 0x801bb3 <xTimerQueue>
    59f8:	f0 91 b4 1b 	lds	r31, 0x1BB4	; 0x801bb4 <xTimerQueue+0x1>
    59fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    59fe:	ac 01       	movw	r20, r24
    5a00:	bd 01       	movw	r22, r26
    5a02:	cf 01       	movw	r24, r30
    5a04:	0e 94 b4 10 	call	0x2168	; 0x2168 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    5a08:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
    5a0c:	88 23       	and	r24, r24
    5a0e:	29 f4       	brne	.+10     	; 0x5a1a <prvProcessTimerOrBlockTask+0xe2>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    5a10:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    5a14:	02 c0       	rjmp	.+4      	; 0x5a1a <prvProcessTimerOrBlockTask+0xe2>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    5a16:	0e 94 31 1a 	call	0x3462	; 0x3462 <xTaskResumeAll>
            }
        }
    }
    5a1a:	00 00       	nop
    5a1c:	2a 96       	adiw	r28, 0x0a	; 10
    5a1e:	0f b6       	in	r0, 0x3f	; 63
    5a20:	f8 94       	cli
    5a22:	de bf       	out	0x3e, r29	; 62
    5a24:	0f be       	out	0x3f, r0	; 63
    5a26:	cd bf       	out	0x3d, r28	; 61
    5a28:	df 91       	pop	r29
    5a2a:	cf 91       	pop	r28
    5a2c:	1f 91       	pop	r17
    5a2e:	0f 91       	pop	r16
    5a30:	ff 90       	pop	r15
    5a32:	ef 90       	pop	r14
    5a34:	08 95       	ret

00005a36 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    5a36:	cf 93       	push	r28
    5a38:	df 93       	push	r29
    5a3a:	00 d0       	rcall	.+0      	; 0x5a3c <prvGetNextExpireTime+0x6>
    5a3c:	00 d0       	rcall	.+0      	; 0x5a3e <prvGetNextExpireTime+0x8>
    5a3e:	cd b7       	in	r28, 0x3d	; 61
    5a40:	de b7       	in	r29, 0x3e	; 62
    5a42:	9e 83       	std	Y+6, r25	; 0x06
    5a44:	8d 83       	std	Y+5, r24	; 0x05
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5a46:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <pxCurrentTimerList>
    5a4a:	90 91 b0 1b 	lds	r25, 0x1BB0	; 0x801bb0 <pxCurrentTimerList+0x1>
    5a4e:	fc 01       	movw	r30, r24
    5a50:	90 81       	ld	r25, Z
    5a52:	81 e0       	ldi	r24, 0x01	; 1
    5a54:	99 23       	and	r25, r25
    5a56:	09 f0       	breq	.+2      	; 0x5a5a <prvGetNextExpireTime+0x24>
    5a58:	80 e0       	ldi	r24, 0x00	; 0
    5a5a:	28 2f       	mov	r18, r24
    5a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a60:	fc 01       	movw	r30, r24
    5a62:	20 83       	st	Z, r18

        if( *pxListWasEmpty == pdFALSE )
    5a64:	8d 81       	ldd	r24, Y+5	; 0x05
    5a66:	9e 81       	ldd	r25, Y+6	; 0x06
    5a68:	fc 01       	movw	r30, r24
    5a6a:	80 81       	ld	r24, Z
    5a6c:	88 23       	and	r24, r24
    5a6e:	89 f4       	brne	.+34     	; 0x5a92 <prvGetNextExpireTime+0x5c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5a70:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <pxCurrentTimerList>
    5a74:	90 91 b0 1b 	lds	r25, 0x1BB0	; 0x801bb0 <pxCurrentTimerList+0x1>
    5a78:	fc 01       	movw	r30, r24
    5a7a:	87 81       	ldd	r24, Z+7	; 0x07
    5a7c:	90 85       	ldd	r25, Z+8	; 0x08
    5a7e:	fc 01       	movw	r30, r24
    5a80:	80 81       	ld	r24, Z
    5a82:	91 81       	ldd	r25, Z+1	; 0x01
    5a84:	a2 81       	ldd	r26, Z+2	; 0x02
    5a86:	b3 81       	ldd	r27, Z+3	; 0x03
    5a88:	89 83       	std	Y+1, r24	; 0x01
    5a8a:	9a 83       	std	Y+2, r25	; 0x02
    5a8c:	ab 83       	std	Y+3, r26	; 0x03
    5a8e:	bc 83       	std	Y+4, r27	; 0x04
    5a90:	04 c0       	rjmp	.+8      	; 0x5a9a <prvGetNextExpireTime+0x64>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    5a92:	19 82       	std	Y+1, r1	; 0x01
    5a94:	1a 82       	std	Y+2, r1	; 0x02
    5a96:	1b 82       	std	Y+3, r1	; 0x03
    5a98:	1c 82       	std	Y+4, r1	; 0x04
        }

        return xNextExpireTime;
    5a9a:	89 81       	ldd	r24, Y+1	; 0x01
    5a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a9e:	ab 81       	ldd	r26, Y+3	; 0x03
    5aa0:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    5aa2:	bc 01       	movw	r22, r24
    5aa4:	cd 01       	movw	r24, r26
    5aa6:	26 96       	adiw	r28, 0x06	; 6
    5aa8:	0f b6       	in	r0, 0x3f	; 63
    5aaa:	f8 94       	cli
    5aac:	de bf       	out	0x3e, r29	; 62
    5aae:	0f be       	out	0x3f, r0	; 63
    5ab0:	cd bf       	out	0x3d, r28	; 61
    5ab2:	df 91       	pop	r29
    5ab4:	cf 91       	pop	r28
    5ab6:	08 95       	ret

00005ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    5ab8:	cf 93       	push	r28
    5aba:	df 93       	push	r29
    5abc:	00 d0       	rcall	.+0      	; 0x5abe <prvSampleTimeNow+0x6>
    5abe:	00 d0       	rcall	.+0      	; 0x5ac0 <prvSampleTimeNow+0x8>
    5ac0:	cd b7       	in	r28, 0x3d	; 61
    5ac2:	de b7       	in	r29, 0x3e	; 62
    5ac4:	9e 83       	std	Y+6, r25	; 0x06
    5ac6:	8d 83       	std	Y+5, r24	; 0x05
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    5ac8:	0e 94 c0 1b 	call	0x3780	; 0x3780 <xTaskGetTickCount>
    5acc:	dc 01       	movw	r26, r24
    5ace:	cb 01       	movw	r24, r22
    5ad0:	89 83       	std	Y+1, r24	; 0x01
    5ad2:	9a 83       	std	Y+2, r25	; 0x02
    5ad4:	ab 83       	std	Y+3, r26	; 0x03
    5ad6:	bc 83       	std	Y+4, r27	; 0x04

        if( xTimeNow < xLastTime )
    5ad8:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <xLastTime.2436>
    5adc:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <xLastTime.2436+0x1>
    5ae0:	a0 91 b9 1b 	lds	r26, 0x1BB9	; 0x801bb9 <xLastTime.2436+0x2>
    5ae4:	b0 91 ba 1b 	lds	r27, 0x1BBA	; 0x801bba <xLastTime.2436+0x3>
    5ae8:	29 81       	ldd	r18, Y+1	; 0x01
    5aea:	3a 81       	ldd	r19, Y+2	; 0x02
    5aec:	4b 81       	ldd	r20, Y+3	; 0x03
    5aee:	5c 81       	ldd	r21, Y+4	; 0x04
    5af0:	28 17       	cp	r18, r24
    5af2:	39 07       	cpc	r19, r25
    5af4:	4a 07       	cpc	r20, r26
    5af6:	5b 07       	cpc	r21, r27
    5af8:	38 f4       	brcc	.+14     	; 0x5b08 <prvSampleTimeNow+0x50>
        {
            prvSwitchTimerLists();
    5afa:	e6 d1       	rcall	.+972    	; 0x5ec8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    5afc:	8d 81       	ldd	r24, Y+5	; 0x05
    5afe:	9e 81       	ldd	r25, Y+6	; 0x06
    5b00:	21 e0       	ldi	r18, 0x01	; 1
    5b02:	fc 01       	movw	r30, r24
    5b04:	20 83       	st	Z, r18
    5b06:	04 c0       	rjmp	.+8      	; 0x5b10 <prvSampleTimeNow+0x58>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    5b08:	8d 81       	ldd	r24, Y+5	; 0x05
    5b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b0c:	fc 01       	movw	r30, r24
    5b0e:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    5b10:	89 81       	ldd	r24, Y+1	; 0x01
    5b12:	9a 81       	ldd	r25, Y+2	; 0x02
    5b14:	ab 81       	ldd	r26, Y+3	; 0x03
    5b16:	bc 81       	ldd	r27, Y+4	; 0x04
    5b18:	80 93 b7 1b 	sts	0x1BB7, r24	; 0x801bb7 <xLastTime.2436>
    5b1c:	90 93 b8 1b 	sts	0x1BB8, r25	; 0x801bb8 <xLastTime.2436+0x1>
    5b20:	a0 93 b9 1b 	sts	0x1BB9, r26	; 0x801bb9 <xLastTime.2436+0x2>
    5b24:	b0 93 ba 1b 	sts	0x1BBA, r27	; 0x801bba <xLastTime.2436+0x3>

        return xTimeNow;
    5b28:	89 81       	ldd	r24, Y+1	; 0x01
    5b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b2c:	ab 81       	ldd	r26, Y+3	; 0x03
    5b2e:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    5b30:	bc 01       	movw	r22, r24
    5b32:	cd 01       	movw	r24, r26
    5b34:	26 96       	adiw	r28, 0x06	; 6
    5b36:	0f b6       	in	r0, 0x3f	; 63
    5b38:	f8 94       	cli
    5b3a:	de bf       	out	0x3e, r29	; 62
    5b3c:	0f be       	out	0x3f, r0	; 63
    5b3e:	cd bf       	out	0x3d, r28	; 61
    5b40:	df 91       	pop	r29
    5b42:	cf 91       	pop	r28
    5b44:	08 95       	ret

00005b46 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    5b46:	cf 92       	push	r12
    5b48:	df 92       	push	r13
    5b4a:	ef 92       	push	r14
    5b4c:	ff 92       	push	r15
    5b4e:	0f 93       	push	r16
    5b50:	1f 93       	push	r17
    5b52:	cf 93       	push	r28
    5b54:	df 93       	push	r29
    5b56:	cd b7       	in	r28, 0x3d	; 61
    5b58:	de b7       	in	r29, 0x3e	; 62
    5b5a:	2f 97       	sbiw	r28, 0x0f	; 15
    5b5c:	0f b6       	in	r0, 0x3f	; 63
    5b5e:	f8 94       	cli
    5b60:	de bf       	out	0x3e, r29	; 62
    5b62:	0f be       	out	0x3f, r0	; 63
    5b64:	cd bf       	out	0x3d, r28	; 61
    5b66:	9b 83       	std	Y+3, r25	; 0x03
    5b68:	8a 83       	std	Y+2, r24	; 0x02
    5b6a:	4c 83       	std	Y+4, r20	; 0x04
    5b6c:	5d 83       	std	Y+5, r21	; 0x05
    5b6e:	6e 83       	std	Y+6, r22	; 0x06
    5b70:	7f 83       	std	Y+7, r23	; 0x07
    5b72:	08 87       	std	Y+8, r16	; 0x08
    5b74:	19 87       	std	Y+9, r17	; 0x09
    5b76:	2a 87       	std	Y+10, r18	; 0x0a
    5b78:	3b 87       	std	Y+11, r19	; 0x0b
    5b7a:	cc 86       	std	Y+12, r12	; 0x0c
    5b7c:	dd 86       	std	Y+13, r13	; 0x0d
    5b7e:	ee 86       	std	Y+14, r14	; 0x0e
    5b80:	ff 86       	std	Y+15, r15	; 0x0f
        BaseType_t xProcessTimerNow = pdFALSE;
    5b82:	19 82       	std	Y+1, r1	; 0x01

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5b84:	2a 81       	ldd	r18, Y+2	; 0x02
    5b86:	3b 81       	ldd	r19, Y+3	; 0x03
    5b88:	8c 81       	ldd	r24, Y+4	; 0x04
    5b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    5b8c:	ae 81       	ldd	r26, Y+6	; 0x06
    5b8e:	bf 81       	ldd	r27, Y+7	; 0x07
    5b90:	f9 01       	movw	r30, r18
    5b92:	82 83       	std	Z+2, r24	; 0x02
    5b94:	93 83       	std	Z+3, r25	; 0x03
    5b96:	a4 83       	std	Z+4, r26	; 0x04
    5b98:	b5 83       	std	Z+5, r27	; 0x05
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b9e:	2a 81       	ldd	r18, Y+2	; 0x02
    5ba0:	3b 81       	ldd	r19, Y+3	; 0x03
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	33 87       	std	Z+11, r19	; 0x0b
    5ba6:	22 87       	std	Z+10, r18	; 0x0a

        if( xNextExpiryTime <= xTimeNow )
    5ba8:	2c 81       	ldd	r18, Y+4	; 0x04
    5baa:	3d 81       	ldd	r19, Y+5	; 0x05
    5bac:	4e 81       	ldd	r20, Y+6	; 0x06
    5bae:	5f 81       	ldd	r21, Y+7	; 0x07
    5bb0:	88 85       	ldd	r24, Y+8	; 0x08
    5bb2:	99 85       	ldd	r25, Y+9	; 0x09
    5bb4:	aa 85       	ldd	r26, Y+10	; 0x0a
    5bb6:	bb 85       	ldd	r27, Y+11	; 0x0b
    5bb8:	82 17       	cp	r24, r18
    5bba:	93 07       	cpc	r25, r19
    5bbc:	a4 07       	cpc	r26, r20
    5bbe:	b5 07       	cpc	r27, r21
    5bc0:	40 f1       	brcs	.+80     	; 0x5c12 <prvInsertTimerInActiveList+0xcc>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5bc2:	28 85       	ldd	r18, Y+8	; 0x08
    5bc4:	39 85       	ldd	r19, Y+9	; 0x09
    5bc6:	4a 85       	ldd	r20, Y+10	; 0x0a
    5bc8:	5b 85       	ldd	r21, Y+11	; 0x0b
    5bca:	8c 85       	ldd	r24, Y+12	; 0x0c
    5bcc:	9d 85       	ldd	r25, Y+13	; 0x0d
    5bce:	ae 85       	ldd	r26, Y+14	; 0x0e
    5bd0:	bf 85       	ldd	r27, Y+15	; 0x0f
    5bd2:	28 1b       	sub	r18, r24
    5bd4:	39 0b       	sbc	r19, r25
    5bd6:	4a 0b       	sbc	r20, r26
    5bd8:	5b 0b       	sbc	r21, r27
    5bda:	8a 81       	ldd	r24, Y+2	; 0x02
    5bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    5bde:	fc 01       	movw	r30, r24
    5be0:	86 85       	ldd	r24, Z+14	; 0x0e
    5be2:	97 85       	ldd	r25, Z+15	; 0x0f
    5be4:	a0 89       	ldd	r26, Z+16	; 0x10
    5be6:	b1 89       	ldd	r27, Z+17	; 0x11
    5be8:	28 17       	cp	r18, r24
    5bea:	39 07       	cpc	r19, r25
    5bec:	4a 07       	cpc	r20, r26
    5bee:	5b 07       	cpc	r21, r27
    5bf0:	18 f0       	brcs	.+6      	; 0x5bf8 <prvInsertTimerInActiveList+0xb2>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    5bf2:	81 e0       	ldi	r24, 0x01	; 1
    5bf4:	89 83       	std	Y+1, r24	; 0x01
    5bf6:	36 c0       	rjmp	.+108    	; 0x5c64 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    5bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    5bfc:	9c 01       	movw	r18, r24
    5bfe:	2e 5f       	subi	r18, 0xFE	; 254
    5c00:	3f 4f       	sbci	r19, 0xFF	; 255
    5c02:	80 91 b1 1b 	lds	r24, 0x1BB1	; 0x801bb1 <pxOverflowTimerList>
    5c06:	90 91 b2 1b 	lds	r25, 0x1BB2	; 0x801bb2 <pxOverflowTimerList+0x1>
    5c0a:	b9 01       	movw	r22, r18
    5c0c:	0e 94 81 09 	call	0x1302	; 0x1302 <vListInsert>
    5c10:	29 c0       	rjmp	.+82     	; 0x5c64 <prvInsertTimerInActiveList+0x11e>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5c12:	28 85       	ldd	r18, Y+8	; 0x08
    5c14:	39 85       	ldd	r19, Y+9	; 0x09
    5c16:	4a 85       	ldd	r20, Y+10	; 0x0a
    5c18:	5b 85       	ldd	r21, Y+11	; 0x0b
    5c1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    5c1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    5c1e:	ae 85       	ldd	r26, Y+14	; 0x0e
    5c20:	bf 85       	ldd	r27, Y+15	; 0x0f
    5c22:	28 17       	cp	r18, r24
    5c24:	39 07       	cpc	r19, r25
    5c26:	4a 07       	cpc	r20, r26
    5c28:	5b 07       	cpc	r21, r27
    5c2a:	80 f4       	brcc	.+32     	; 0x5c4c <prvInsertTimerInActiveList+0x106>
    5c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    5c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    5c30:	4e 81       	ldd	r20, Y+6	; 0x06
    5c32:	5f 81       	ldd	r21, Y+7	; 0x07
    5c34:	8c 85       	ldd	r24, Y+12	; 0x0c
    5c36:	9d 85       	ldd	r25, Y+13	; 0x0d
    5c38:	ae 85       	ldd	r26, Y+14	; 0x0e
    5c3a:	bf 85       	ldd	r27, Y+15	; 0x0f
    5c3c:	28 17       	cp	r18, r24
    5c3e:	39 07       	cpc	r19, r25
    5c40:	4a 07       	cpc	r20, r26
    5c42:	5b 07       	cpc	r21, r27
    5c44:	18 f0       	brcs	.+6      	; 0x5c4c <prvInsertTimerInActiveList+0x106>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    5c46:	81 e0       	ldi	r24, 0x01	; 1
    5c48:	89 83       	std	Y+1, r24	; 0x01
    5c4a:	0c c0       	rjmp	.+24     	; 0x5c64 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    5c50:	9c 01       	movw	r18, r24
    5c52:	2e 5f       	subi	r18, 0xFE	; 254
    5c54:	3f 4f       	sbci	r19, 0xFF	; 255
    5c56:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <pxCurrentTimerList>
    5c5a:	90 91 b0 1b 	lds	r25, 0x1BB0	; 0x801bb0 <pxCurrentTimerList+0x1>
    5c5e:	b9 01       	movw	r22, r18
    5c60:	0e 94 81 09 	call	0x1302	; 0x1302 <vListInsert>
            }
        }

        return xProcessTimerNow;
    5c64:	89 81       	ldd	r24, Y+1	; 0x01
    }
    5c66:	2f 96       	adiw	r28, 0x0f	; 15
    5c68:	0f b6       	in	r0, 0x3f	; 63
    5c6a:	f8 94       	cli
    5c6c:	de bf       	out	0x3e, r29	; 62
    5c6e:	0f be       	out	0x3f, r0	; 63
    5c70:	cd bf       	out	0x3d, r28	; 61
    5c72:	df 91       	pop	r29
    5c74:	cf 91       	pop	r28
    5c76:	1f 91       	pop	r17
    5c78:	0f 91       	pop	r16
    5c7a:	ff 90       	pop	r15
    5c7c:	ef 90       	pop	r14
    5c7e:	df 90       	pop	r13
    5c80:	cf 90       	pop	r12
    5c82:	08 95       	ret

00005c84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    5c84:	cf 92       	push	r12
    5c86:	df 92       	push	r13
    5c88:	ef 92       	push	r14
    5c8a:	ff 92       	push	r15
    5c8c:	0f 93       	push	r16
    5c8e:	1f 93       	push	r17
    5c90:	cf 93       	push	r28
    5c92:	df 93       	push	r29
    5c94:	cd b7       	in	r28, 0x3d	; 61
    5c96:	de b7       	in	r29, 0x3e	; 62
    5c98:	2f 97       	sbiw	r28, 0x0f	; 15
    5c9a:	0f b6       	in	r0, 0x3f	; 63
    5c9c:	f8 94       	cli
    5c9e:	de bf       	out	0x3e, r29	; 62
    5ca0:	0f be       	out	0x3f, r0	; 63
    5ca2:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    5ca4:	f2 c0       	rjmp	.+484    	; 0x5e8a <prvProcessReceivedCommands+0x206>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    5ca6:	88 85       	ldd	r24, Y+8	; 0x08
    5ca8:	88 23       	and	r24, r24
    5caa:	0c f4       	brge	.+2      	; 0x5cae <prvProcessReceivedCommands+0x2a>
    5cac:	ee c0       	rjmp	.+476    	; 0x5e8a <prvProcessReceivedCommands+0x206>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    5cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cb2:	9a 83       	std	Y+2, r25	; 0x02
    5cb4:	89 83       	std	Y+1, r24	; 0x01

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    5cb6:	89 81       	ldd	r24, Y+1	; 0x01
    5cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cba:	fc 01       	movw	r30, r24
    5cbc:	84 85       	ldd	r24, Z+12	; 0x0c
    5cbe:	95 85       	ldd	r25, Z+13	; 0x0d
    5cc0:	89 2b       	or	r24, r25
    5cc2:	29 f0       	breq	.+10     	; 0x5cce <prvProcessReceivedCommands+0x4a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5cc4:	89 81       	ldd	r24, Y+1	; 0x01
    5cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    5cc8:	02 96       	adiw	r24, 0x02	; 2
    5cca:	0e 94 08 0a 	call	0x1410	; 0x1410 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5cce:	ce 01       	movw	r24, r28
    5cd0:	0f 96       	adiw	r24, 0x0f	; 15
    5cd2:	f2 de       	rcall	.-540    	; 0x5ab8 <prvSampleTimeNow>
    5cd4:	dc 01       	movw	r26, r24
    5cd6:	cb 01       	movw	r24, r22
    5cd8:	8b 83       	std	Y+3, r24	; 0x03
    5cda:	9c 83       	std	Y+4, r25	; 0x04
    5cdc:	ad 83       	std	Y+5, r26	; 0x05
    5cde:	be 83       	std	Y+6, r27	; 0x06

                switch( xMessage.xMessageID )
    5ce0:	88 85       	ldd	r24, Y+8	; 0x08
    5ce2:	08 2e       	mov	r0, r24
    5ce4:	00 0c       	add	r0, r0
    5ce6:	99 0b       	sbc	r25, r25
    5ce8:	09 2e       	mov	r0, r25
    5cea:	00 0c       	add	r0, r0
    5cec:	aa 0b       	sbc	r26, r26
    5cee:	bb 0b       	sbc	r27, r27
    5cf0:	40 e0       	ldi	r20, 0x00	; 0
    5cf2:	50 e0       	ldi	r21, 0x00	; 0
    5cf4:	29 e0       	ldi	r18, 0x09	; 9
    5cf6:	30 e0       	ldi	r19, 0x00	; 0
    5cf8:	84 1b       	sub	r24, r20
    5cfa:	95 0b       	sbc	r25, r21
    5cfc:	28 17       	cp	r18, r24
    5cfe:	39 07       	cpc	r19, r25
    5d00:	08 f4       	brcc	.+2      	; 0x5d04 <prvProcessReceivedCommands+0x80>
    5d02:	c2 c0       	rjmp	.+388    	; 0x5e88 <prvProcessReceivedCommands+0x204>
    5d04:	fc 01       	movw	r30, r24
    5d06:	88 27       	eor	r24, r24
    5d08:	ee 58       	subi	r30, 0x8E	; 142
    5d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d0e:	0c 94 3e 4a 	jmp	0x947c	; 0x947c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    5d12:	89 81       	ldd	r24, Y+1	; 0x01
    5d14:	9a 81       	ldd	r25, Y+2	; 0x02
    5d16:	fc 01       	movw	r30, r24
    5d18:	86 89       	ldd	r24, Z+22	; 0x16
    5d1a:	28 2f       	mov	r18, r24
    5d1c:	21 60       	ori	r18, 0x01	; 1
    5d1e:	89 81       	ldd	r24, Y+1	; 0x01
    5d20:	9a 81       	ldd	r25, Y+2	; 0x02
    5d22:	fc 01       	movw	r30, r24
    5d24:	26 8b       	std	Z+22, r18	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    5d26:	e9 84       	ldd	r14, Y+9	; 0x09
    5d28:	fa 84       	ldd	r15, Y+10	; 0x0a
    5d2a:	0b 85       	ldd	r16, Y+11	; 0x0b
    5d2c:	1c 85       	ldd	r17, Y+12	; 0x0c
    5d2e:	29 85       	ldd	r18, Y+9	; 0x09
    5d30:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d32:	4b 85       	ldd	r20, Y+11	; 0x0b
    5d34:	5c 85       	ldd	r21, Y+12	; 0x0c
    5d36:	89 81       	ldd	r24, Y+1	; 0x01
    5d38:	9a 81       	ldd	r25, Y+2	; 0x02
    5d3a:	fc 01       	movw	r30, r24
    5d3c:	86 85       	ldd	r24, Z+14	; 0x0e
    5d3e:	97 85       	ldd	r25, Z+15	; 0x0f
    5d40:	a0 89       	ldd	r26, Z+16	; 0x10
    5d42:	b1 89       	ldd	r27, Z+17	; 0x11
    5d44:	82 0f       	add	r24, r18
    5d46:	93 1f       	adc	r25, r19
    5d48:	a4 1f       	adc	r26, r20
    5d4a:	b5 1f       	adc	r27, r21
    5d4c:	2b 81       	ldd	r18, Y+3	; 0x03
    5d4e:	3c 81       	ldd	r19, Y+4	; 0x04
    5d50:	4d 81       	ldd	r20, Y+5	; 0x05
    5d52:	5e 81       	ldd	r21, Y+6	; 0x06
    5d54:	e9 81       	ldd	r30, Y+1	; 0x01
    5d56:	fa 81       	ldd	r31, Y+2	; 0x02
    5d58:	67 01       	movw	r12, r14
    5d5a:	78 01       	movw	r14, r16
    5d5c:	89 01       	movw	r16, r18
    5d5e:	9a 01       	movw	r18, r20
    5d60:	ac 01       	movw	r20, r24
    5d62:	bd 01       	movw	r22, r26
    5d64:	cf 01       	movw	r24, r30
    5d66:	ef de       	rcall	.-546    	; 0x5b46 <prvInsertTimerInActiveList>
    5d68:	88 23       	and	r24, r24
    5d6a:	09 f4       	brne	.+2      	; 0x5d6e <prvProcessReceivedCommands+0xea>
    5d6c:	8e c0       	rjmp	.+284    	; 0x5e8a <prvProcessReceivedCommands+0x206>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5d6e:	89 81       	ldd	r24, Y+1	; 0x01
    5d70:	9a 81       	ldd	r25, Y+2	; 0x02
    5d72:	fc 01       	movw	r30, r24
    5d74:	24 89       	ldd	r18, Z+20	; 0x14
    5d76:	35 89       	ldd	r19, Z+21	; 0x15
    5d78:	89 81       	ldd	r24, Y+1	; 0x01
    5d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    5d7c:	f9 01       	movw	r30, r18
    5d7e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5d80:	89 81       	ldd	r24, Y+1	; 0x01
    5d82:	9a 81       	ldd	r25, Y+2	; 0x02
    5d84:	fc 01       	movw	r30, r24
    5d86:	86 89       	ldd	r24, Z+22	; 0x16
    5d88:	88 2f       	mov	r24, r24
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	84 70       	andi	r24, 0x04	; 4
    5d8e:	99 27       	eor	r25, r25
    5d90:	89 2b       	or	r24, r25
    5d92:	09 f4       	brne	.+2      	; 0x5d96 <prvProcessReceivedCommands+0x112>
    5d94:	7a c0       	rjmp	.+244    	; 0x5e8a <prvProcessReceivedCommands+0x206>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    5d96:	29 85       	ldd	r18, Y+9	; 0x09
    5d98:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d9a:	4b 85       	ldd	r20, Y+11	; 0x0b
    5d9c:	5c 85       	ldd	r21, Y+12	; 0x0c
    5d9e:	89 81       	ldd	r24, Y+1	; 0x01
    5da0:	9a 81       	ldd	r25, Y+2	; 0x02
    5da2:	fc 01       	movw	r30, r24
    5da4:	86 85       	ldd	r24, Z+14	; 0x0e
    5da6:	97 85       	ldd	r25, Z+15	; 0x0f
    5da8:	a0 89       	ldd	r26, Z+16	; 0x10
    5daa:	b1 89       	ldd	r27, Z+17	; 0x11
    5dac:	82 0f       	add	r24, r18
    5dae:	93 1f       	adc	r25, r19
    5db0:	a4 1f       	adc	r26, r20
    5db2:	b5 1f       	adc	r27, r21
    5db4:	e9 81       	ldd	r30, Y+1	; 0x01
    5db6:	fa 81       	ldd	r31, Y+2	; 0x02
    5db8:	c1 2c       	mov	r12, r1
    5dba:	d1 2c       	mov	r13, r1
    5dbc:	76 01       	movw	r14, r12
    5dbe:	00 e0       	ldi	r16, 0x00	; 0
    5dc0:	10 e0       	ldi	r17, 0x00	; 0
    5dc2:	9c 01       	movw	r18, r24
    5dc4:	ad 01       	movw	r20, r26
    5dc6:	60 e0       	ldi	r22, 0x00	; 0
    5dc8:	cf 01       	movw	r24, r30
    5dca:	b3 dc       	rcall	.-1690   	; 0x5732 <xTimerGenericCommand>
    5dcc:	8f 83       	std	Y+7, r24	; 0x07
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
    5dce:	5d c0       	rjmp	.+186    	; 0x5e8a <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    5dd0:	89 81       	ldd	r24, Y+1	; 0x01
    5dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    5dd4:	fc 01       	movw	r30, r24
    5dd6:	86 89       	ldd	r24, Z+22	; 0x16
    5dd8:	28 2f       	mov	r18, r24
    5dda:	2e 7f       	andi	r18, 0xFE	; 254
    5ddc:	89 81       	ldd	r24, Y+1	; 0x01
    5dde:	9a 81       	ldd	r25, Y+2	; 0x02
    5de0:	fc 01       	movw	r30, r24
    5de2:	26 8b       	std	Z+22, r18	; 0x16
                        break;
    5de4:	52 c0       	rjmp	.+164    	; 0x5e8a <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    5de6:	89 81       	ldd	r24, Y+1	; 0x01
    5de8:	9a 81       	ldd	r25, Y+2	; 0x02
    5dea:	fc 01       	movw	r30, r24
    5dec:	86 89       	ldd	r24, Z+22	; 0x16
    5dee:	28 2f       	mov	r18, r24
    5df0:	21 60       	ori	r18, 0x01	; 1
    5df2:	89 81       	ldd	r24, Y+1	; 0x01
    5df4:	9a 81       	ldd	r25, Y+2	; 0x02
    5df6:	fc 01       	movw	r30, r24
    5df8:	26 8b       	std	Z+22, r18	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    5dfa:	89 85       	ldd	r24, Y+9	; 0x09
    5dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dfe:	ab 85       	ldd	r26, Y+11	; 0x0b
    5e00:	bc 85       	ldd	r27, Y+12	; 0x0c
    5e02:	29 81       	ldd	r18, Y+1	; 0x01
    5e04:	3a 81       	ldd	r19, Y+2	; 0x02
    5e06:	f9 01       	movw	r30, r18
    5e08:	86 87       	std	Z+14, r24	; 0x0e
    5e0a:	97 87       	std	Z+15, r25	; 0x0f
    5e0c:	a0 8b       	std	Z+16, r26	; 0x10
    5e0e:	b1 8b       	std	Z+17, r27	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    5e10:	89 81       	ldd	r24, Y+1	; 0x01
    5e12:	9a 81       	ldd	r25, Y+2	; 0x02
    5e14:	fc 01       	movw	r30, r24
    5e16:	26 85       	ldd	r18, Z+14	; 0x0e
    5e18:	37 85       	ldd	r19, Z+15	; 0x0f
    5e1a:	40 89       	ldd	r20, Z+16	; 0x10
    5e1c:	51 89       	ldd	r21, Z+17	; 0x11
    5e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    5e20:	9c 81       	ldd	r25, Y+4	; 0x04
    5e22:	ad 81       	ldd	r26, Y+5	; 0x05
    5e24:	be 81       	ldd	r27, Y+6	; 0x06
    5e26:	82 0f       	add	r24, r18
    5e28:	93 1f       	adc	r25, r19
    5e2a:	a4 1f       	adc	r26, r20
    5e2c:	b5 1f       	adc	r27, r21
    5e2e:	eb 80       	ldd	r14, Y+3	; 0x03
    5e30:	fc 80       	ldd	r15, Y+4	; 0x04
    5e32:	0d 81       	ldd	r16, Y+5	; 0x05
    5e34:	1e 81       	ldd	r17, Y+6	; 0x06
    5e36:	2b 81       	ldd	r18, Y+3	; 0x03
    5e38:	3c 81       	ldd	r19, Y+4	; 0x04
    5e3a:	4d 81       	ldd	r20, Y+5	; 0x05
    5e3c:	5e 81       	ldd	r21, Y+6	; 0x06
    5e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    5e40:	fa 81       	ldd	r31, Y+2	; 0x02
    5e42:	67 01       	movw	r12, r14
    5e44:	78 01       	movw	r14, r16
    5e46:	89 01       	movw	r16, r18
    5e48:	9a 01       	movw	r18, r20
    5e4a:	ac 01       	movw	r20, r24
    5e4c:	bd 01       	movw	r22, r26
    5e4e:	cf 01       	movw	r24, r30
    5e50:	7a de       	rcall	.-780    	; 0x5b46 <prvInsertTimerInActiveList>
                        break;
    5e52:	1b c0       	rjmp	.+54     	; 0x5e8a <prvProcessReceivedCommands+0x206>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    5e54:	89 81       	ldd	r24, Y+1	; 0x01
    5e56:	9a 81       	ldd	r25, Y+2	; 0x02
    5e58:	fc 01       	movw	r30, r24
    5e5a:	86 89       	ldd	r24, Z+22	; 0x16
    5e5c:	88 2f       	mov	r24, r24
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	82 70       	andi	r24, 0x02	; 2
    5e62:	99 27       	eor	r25, r25
    5e64:	89 2b       	or	r24, r25
    5e66:	29 f4       	brne	.+10     	; 0x5e72 <prvProcessReceivedCommands+0x1ee>
                                {
                                    vPortFree( pxTimer );
    5e68:	89 81       	ldd	r24, Y+1	; 0x01
    5e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e6c:	0e 94 91 07 	call	0xf22	; 0xf22 <vPortFree>
    5e70:	0c c0       	rjmp	.+24     	; 0x5e8a <prvProcessReceivedCommands+0x206>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    5e72:	89 81       	ldd	r24, Y+1	; 0x01
    5e74:	9a 81       	ldd	r25, Y+2	; 0x02
    5e76:	fc 01       	movw	r30, r24
    5e78:	86 89       	ldd	r24, Z+22	; 0x16
    5e7a:	28 2f       	mov	r18, r24
    5e7c:	2e 7f       	andi	r18, 0xFE	; 254
    5e7e:	89 81       	ldd	r24, Y+1	; 0x01
    5e80:	9a 81       	ldd	r25, Y+2	; 0x02
    5e82:	fc 01       	movw	r30, r24
    5e84:	26 8b       	std	Z+22, r18	; 0x16
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
    5e86:	01 c0       	rjmp	.+2      	; 0x5e8a <prvProcessReceivedCommands+0x206>

                    default:
                        /* Don't expect to get here. */
                        break;
    5e88:	00 00       	nop
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    5e8a:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <xTimerQueue>
    5e8e:	90 91 b4 1b 	lds	r25, 0x1BB4	; 0x801bb4 <xTimerQueue+0x1>
    5e92:	be 01       	movw	r22, r28
    5e94:	68 5f       	subi	r22, 0xF8	; 248
    5e96:	7f 4f       	sbci	r23, 0xFF	; 255
    5e98:	20 e0       	ldi	r18, 0x00	; 0
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	a9 01       	movw	r20, r18
    5e9e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <xQueueReceive>
    5ea2:	88 23       	and	r24, r24
    5ea4:	09 f0       	breq	.+2      	; 0x5ea8 <prvProcessReceivedCommands+0x224>
    5ea6:	ff ce       	rjmp	.-514    	; 0x5ca6 <prvProcessReceivedCommands+0x22>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    5ea8:	00 00       	nop
    5eaa:	2f 96       	adiw	r28, 0x0f	; 15
    5eac:	0f b6       	in	r0, 0x3f	; 63
    5eae:	f8 94       	cli
    5eb0:	de bf       	out	0x3e, r29	; 62
    5eb2:	0f be       	out	0x3f, r0	; 63
    5eb4:	cd bf       	out	0x3d, r28	; 61
    5eb6:	df 91       	pop	r29
    5eb8:	cf 91       	pop	r28
    5eba:	1f 91       	pop	r17
    5ebc:	0f 91       	pop	r16
    5ebe:	ff 90       	pop	r15
    5ec0:	ef 90       	pop	r14
    5ec2:	df 90       	pop	r13
    5ec4:	cf 90       	pop	r12
    5ec6:	08 95       	ret

00005ec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    5ec8:	cf 92       	push	r12
    5eca:	df 92       	push	r13
    5ecc:	ef 92       	push	r14
    5ece:	ff 92       	push	r15
    5ed0:	0f 93       	push	r16
    5ed2:	1f 93       	push	r17
    5ed4:	cf 93       	push	r28
    5ed6:	df 93       	push	r29
    5ed8:	cd b7       	in	r28, 0x3d	; 61
    5eda:	de b7       	in	r29, 0x3e	; 62
    5edc:	2d 97       	sbiw	r28, 0x0d	; 13
    5ede:	0f b6       	in	r0, 0x3f	; 63
    5ee0:	f8 94       	cli
    5ee2:	de bf       	out	0x3e, r29	; 62
    5ee4:	0f be       	out	0x3f, r0	; 63
    5ee6:	cd bf       	out	0x3d, r28	; 61

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5ee8:	85 c0       	rjmp	.+266    	; 0x5ff4 <prvSwitchTimerLists+0x12c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5eea:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <pxCurrentTimerList>
    5eee:	90 91 b0 1b 	lds	r25, 0x1BB0	; 0x801bb0 <pxCurrentTimerList+0x1>
    5ef2:	fc 01       	movw	r30, r24
    5ef4:	87 81       	ldd	r24, Z+7	; 0x07
    5ef6:	90 85       	ldd	r25, Z+8	; 0x08
    5ef8:	fc 01       	movw	r30, r24
    5efa:	80 81       	ld	r24, Z
    5efc:	91 81       	ldd	r25, Z+1	; 0x01
    5efe:	a2 81       	ldd	r26, Z+2	; 0x02
    5f00:	b3 81       	ldd	r27, Z+3	; 0x03
    5f02:	89 83       	std	Y+1, r24	; 0x01
    5f04:	9a 83       	std	Y+2, r25	; 0x02
    5f06:	ab 83       	std	Y+3, r26	; 0x03
    5f08:	bc 83       	std	Y+4, r27	; 0x04

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5f0a:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <pxCurrentTimerList>
    5f0e:	90 91 b0 1b 	lds	r25, 0x1BB0	; 0x801bb0 <pxCurrentTimerList+0x1>
    5f12:	fc 01       	movw	r30, r24
    5f14:	87 81       	ldd	r24, Z+7	; 0x07
    5f16:	90 85       	ldd	r25, Z+8	; 0x08
    5f18:	fc 01       	movw	r30, r24
    5f1a:	80 85       	ldd	r24, Z+8	; 0x08
    5f1c:	91 85       	ldd	r25, Z+9	; 0x09
    5f1e:	9e 83       	std	Y+6, r25	; 0x06
    5f20:	8d 83       	std	Y+5, r24	; 0x05
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5f22:	8d 81       	ldd	r24, Y+5	; 0x05
    5f24:	9e 81       	ldd	r25, Y+6	; 0x06
    5f26:	02 96       	adiw	r24, 0x02	; 2
    5f28:	0e 94 08 0a 	call	0x1410	; 0x1410 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f30:	fc 01       	movw	r30, r24
    5f32:	24 89       	ldd	r18, Z+20	; 0x14
    5f34:	35 89       	ldd	r19, Z+21	; 0x15
    5f36:	8d 81       	ldd	r24, Y+5	; 0x05
    5f38:	9e 81       	ldd	r25, Y+6	; 0x06
    5f3a:	f9 01       	movw	r30, r18
    5f3c:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f40:	9e 81       	ldd	r25, Y+6	; 0x06
    5f42:	fc 01       	movw	r30, r24
    5f44:	86 89       	ldd	r24, Z+22	; 0x16
    5f46:	88 2f       	mov	r24, r24
    5f48:	90 e0       	ldi	r25, 0x00	; 0
    5f4a:	84 70       	andi	r24, 0x04	; 4
    5f4c:	99 27       	eor	r25, r25
    5f4e:	89 2b       	or	r24, r25
    5f50:	09 f4       	brne	.+2      	; 0x5f54 <prvSwitchTimerLists+0x8c>
    5f52:	50 c0       	rjmp	.+160    	; 0x5ff4 <prvSwitchTimerLists+0x12c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    5f54:	8d 81       	ldd	r24, Y+5	; 0x05
    5f56:	9e 81       	ldd	r25, Y+6	; 0x06
    5f58:	fc 01       	movw	r30, r24
    5f5a:	26 85       	ldd	r18, Z+14	; 0x0e
    5f5c:	37 85       	ldd	r19, Z+15	; 0x0f
    5f5e:	40 89       	ldd	r20, Z+16	; 0x10
    5f60:	51 89       	ldd	r21, Z+17	; 0x11
    5f62:	89 81       	ldd	r24, Y+1	; 0x01
    5f64:	9a 81       	ldd	r25, Y+2	; 0x02
    5f66:	ab 81       	ldd	r26, Y+3	; 0x03
    5f68:	bc 81       	ldd	r27, Y+4	; 0x04
    5f6a:	82 0f       	add	r24, r18
    5f6c:	93 1f       	adc	r25, r19
    5f6e:	a4 1f       	adc	r26, r20
    5f70:	b5 1f       	adc	r27, r21
    5f72:	8f 83       	std	Y+7, r24	; 0x07
    5f74:	98 87       	std	Y+8, r25	; 0x08
    5f76:	a9 87       	std	Y+9, r26	; 0x09
    5f78:	ba 87       	std	Y+10, r27	; 0x0a

                if( xReloadTime > xNextExpireTime )
    5f7a:	2f 81       	ldd	r18, Y+7	; 0x07
    5f7c:	38 85       	ldd	r19, Y+8	; 0x08
    5f7e:	49 85       	ldd	r20, Y+9	; 0x09
    5f80:	5a 85       	ldd	r21, Y+10	; 0x0a
    5f82:	89 81       	ldd	r24, Y+1	; 0x01
    5f84:	9a 81       	ldd	r25, Y+2	; 0x02
    5f86:	ab 81       	ldd	r26, Y+3	; 0x03
    5f88:	bc 81       	ldd	r27, Y+4	; 0x04
    5f8a:	82 17       	cp	r24, r18
    5f8c:	93 07       	cpc	r25, r19
    5f8e:	a4 07       	cpc	r26, r20
    5f90:	b5 07       	cpc	r27, r21
    5f92:	f8 f4       	brcc	.+62     	; 0x5fd2 <prvSwitchTimerLists+0x10a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    5f94:	2d 81       	ldd	r18, Y+5	; 0x05
    5f96:	3e 81       	ldd	r19, Y+6	; 0x06
    5f98:	8f 81       	ldd	r24, Y+7	; 0x07
    5f9a:	98 85       	ldd	r25, Y+8	; 0x08
    5f9c:	a9 85       	ldd	r26, Y+9	; 0x09
    5f9e:	ba 85       	ldd	r27, Y+10	; 0x0a
    5fa0:	f9 01       	movw	r30, r18
    5fa2:	82 83       	std	Z+2, r24	; 0x02
    5fa4:	93 83       	std	Z+3, r25	; 0x03
    5fa6:	a4 83       	std	Z+4, r26	; 0x04
    5fa8:	b5 83       	std	Z+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5faa:	8d 81       	ldd	r24, Y+5	; 0x05
    5fac:	9e 81       	ldd	r25, Y+6	; 0x06
    5fae:	2d 81       	ldd	r18, Y+5	; 0x05
    5fb0:	3e 81       	ldd	r19, Y+6	; 0x06
    5fb2:	fc 01       	movw	r30, r24
    5fb4:	33 87       	std	Z+11, r19	; 0x0b
    5fb6:	22 87       	std	Z+10, r18	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    5fba:	9e 81       	ldd	r25, Y+6	; 0x06
    5fbc:	9c 01       	movw	r18, r24
    5fbe:	2e 5f       	subi	r18, 0xFE	; 254
    5fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc2:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <pxCurrentTimerList>
    5fc6:	90 91 b0 1b 	lds	r25, 0x1BB0	; 0x801bb0 <pxCurrentTimerList+0x1>
    5fca:	b9 01       	movw	r22, r18
    5fcc:	0e 94 81 09 	call	0x1302	; 0x1302 <vListInsert>
    5fd0:	11 c0       	rjmp	.+34     	; 0x5ff4 <prvSwitchTimerLists+0x12c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5fd2:	89 81       	ldd	r24, Y+1	; 0x01
    5fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fd6:	ab 81       	ldd	r26, Y+3	; 0x03
    5fd8:	bc 81       	ldd	r27, Y+4	; 0x04
    5fda:	ed 81       	ldd	r30, Y+5	; 0x05
    5fdc:	fe 81       	ldd	r31, Y+6	; 0x06
    5fde:	c1 2c       	mov	r12, r1
    5fe0:	d1 2c       	mov	r13, r1
    5fe2:	76 01       	movw	r14, r12
    5fe4:	00 e0       	ldi	r16, 0x00	; 0
    5fe6:	10 e0       	ldi	r17, 0x00	; 0
    5fe8:	9c 01       	movw	r18, r24
    5fea:	ad 01       	movw	r20, r26
    5fec:	60 e0       	ldi	r22, 0x00	; 0
    5fee:	cf 01       	movw	r24, r30
    5ff0:	a0 db       	rcall	.-2240   	; 0x5732 <xTimerGenericCommand>
    5ff2:	8b 87       	std	Y+11, r24	; 0x0b

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5ff4:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <pxCurrentTimerList>
    5ff8:	90 91 b0 1b 	lds	r25, 0x1BB0	; 0x801bb0 <pxCurrentTimerList+0x1>
    5ffc:	fc 01       	movw	r30, r24
    5ffe:	80 81       	ld	r24, Z
    6000:	88 23       	and	r24, r24
    6002:	09 f0       	breq	.+2      	; 0x6006 <prvSwitchTimerLists+0x13e>
    6004:	72 cf       	rjmp	.-284    	; 0x5eea <prvSwitchTimerLists+0x22>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
    6006:	80 91 af 1b 	lds	r24, 0x1BAF	; 0x801baf <pxCurrentTimerList>
    600a:	90 91 b0 1b 	lds	r25, 0x1BB0	; 0x801bb0 <pxCurrentTimerList+0x1>
    600e:	9d 87       	std	Y+13, r25	; 0x0d
    6010:	8c 87       	std	Y+12, r24	; 0x0c
        pxCurrentTimerList = pxOverflowTimerList;
    6012:	80 91 b1 1b 	lds	r24, 0x1BB1	; 0x801bb1 <pxOverflowTimerList>
    6016:	90 91 b2 1b 	lds	r25, 0x1BB2	; 0x801bb2 <pxOverflowTimerList+0x1>
    601a:	90 93 b0 1b 	sts	0x1BB0, r25	; 0x801bb0 <pxCurrentTimerList+0x1>
    601e:	80 93 af 1b 	sts	0x1BAF, r24	; 0x801baf <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    6022:	8c 85       	ldd	r24, Y+12	; 0x0c
    6024:	9d 85       	ldd	r25, Y+13	; 0x0d
    6026:	90 93 b2 1b 	sts	0x1BB2, r25	; 0x801bb2 <pxOverflowTimerList+0x1>
    602a:	80 93 b1 1b 	sts	0x1BB1, r24	; 0x801bb1 <pxOverflowTimerList>
    }
    602e:	00 00       	nop
    6030:	2d 96       	adiw	r28, 0x0d	; 13
    6032:	0f b6       	in	r0, 0x3f	; 63
    6034:	f8 94       	cli
    6036:	de bf       	out	0x3e, r29	; 62
    6038:	0f be       	out	0x3f, r0	; 63
    603a:	cd bf       	out	0x3d, r28	; 61
    603c:	df 91       	pop	r29
    603e:	cf 91       	pop	r28
    6040:	1f 91       	pop	r17
    6042:	0f 91       	pop	r16
    6044:	ff 90       	pop	r15
    6046:	ef 90       	pop	r14
    6048:	df 90       	pop	r13
    604a:	cf 90       	pop	r12
    604c:	08 95       	ret

0000604e <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    604e:	cf 93       	push	r28
    6050:	df 93       	push	r29
    6052:	cd b7       	in	r28, 0x3d	; 61
    6054:	de b7       	in	r29, 0x3e	; 62
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    6056:	0f b6       	in	r0, 0x3f	; 63
    6058:	f8 94       	cli
    605a:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    605c:	80 91 b3 1b 	lds	r24, 0x1BB3	; 0x801bb3 <xTimerQueue>
    6060:	90 91 b4 1b 	lds	r25, 0x1BB4	; 0x801bb4 <xTimerQueue+0x1>
    6064:	89 2b       	or	r24, r25
    6066:	e9 f4       	brne	.+58     	; 0x60a2 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
    6068:	89 e9       	ldi	r24, 0x99	; 153
    606a:	9b e1       	ldi	r25, 0x1B	; 27
    606c:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    6070:	84 ea       	ldi	r24, 0xA4	; 164
    6072:	9b e1       	ldi	r25, 0x1B	; 27
    6074:	0e 94 34 09 	call	0x1268	; 0x1268 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    6078:	89 e9       	ldi	r24, 0x99	; 153
    607a:	9b e1       	ldi	r25, 0x1B	; 27
    607c:	90 93 b0 1b 	sts	0x1BB0, r25	; 0x801bb0 <pxCurrentTimerList+0x1>
    6080:	80 93 af 1b 	sts	0x1BAF, r24	; 0x801baf <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    6084:	84 ea       	ldi	r24, 0xA4	; 164
    6086:	9b e1       	ldi	r25, 0x1B	; 27
    6088:	90 93 b2 1b 	sts	0x1BB2, r25	; 0x801bb2 <pxOverflowTimerList+0x1>
    608c:	80 93 b1 1b 	sts	0x1BB1, r24	; 0x801bb1 <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    6090:	40 e0       	ldi	r20, 0x00	; 0
    6092:	67 e0       	ldi	r22, 0x07	; 7
    6094:	8a e0       	ldi	r24, 0x0A	; 10
    6096:	0e 94 a3 0c 	call	0x1946	; 0x1946 <xQueueGenericCreate>
    609a:	90 93 b4 1b 	sts	0x1BB4, r25	; 0x801bb4 <xTimerQueue+0x1>
    609e:	80 93 b3 1b 	sts	0x1BB3, r24	; 0x801bb3 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    60a2:	0f 90       	pop	r0
    60a4:	0f be       	out	0x3f, r0	; 63
    }
    60a6:	00 00       	nop
    60a8:	df 91       	pop	r29
    60aa:	cf 91       	pop	r28
    60ac:	08 95       	ret

000060ae <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    60ae:	cf 93       	push	r28
    60b0:	df 93       	push	r29
    60b2:	cd b7       	in	r28, 0x3d	; 61
    60b4:	de b7       	in	r29, 0x3e	; 62
}
    60b6:	00 00       	nop
    60b8:	df 91       	pop	r29
    60ba:	cf 91       	pop	r28
    60bc:	08 95       	ret

000060be <prvSetMainLedOn>:

/**
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
    60be:	cf 93       	push	r28
    60c0:	df 93       	push	r29
    60c2:	cd b7       	in	r28, 0x3d	; 61
    60c4:	de b7       	in	r29, 0x3e	; 62
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    60c6:	84 e2       	ldi	r24, 0x24	; 36
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	24 e2       	ldi	r18, 0x24	; 36
    60cc:	30 e0       	ldi	r19, 0x00	; 0
    60ce:	f9 01       	movw	r30, r18
    60d0:	20 81       	ld	r18, Z
    60d2:	20 68       	ori	r18, 0x80	; 128
    60d4:	fc 01       	movw	r30, r24
    60d6:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    60d8:	85 e2       	ldi	r24, 0x25	; 37
    60da:	90 e0       	ldi	r25, 0x00	; 0
    60dc:	25 e2       	ldi	r18, 0x25	; 37
    60de:	30 e0       	ldi	r19, 0x00	; 0
    60e0:	f9 01       	movw	r30, r18
    60e2:	20 81       	ld	r18, Z
    60e4:	20 68       	ori	r18, 0x80	; 128
    60e6:	fc 01       	movw	r30, r24
    60e8:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

}
    60ea:	00 00       	nop
    60ec:	df 91       	pop	r29
    60ee:	cf 91       	pop	r28
    60f0:	08 95       	ret

000060f2 <prvBlinkMainLed>:

/**
 * Private function to blink board led to use it in application hooks
 */
void prvBlinkMainLed( void ) 
{
    60f2:	cf 93       	push	r28
    60f4:	df 93       	push	r29
    60f6:	cd b7       	in	r28, 0x3d	; 61
    60f8:	de b7       	in	r29, 0x3e	; 62

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    60fa:	83 e2       	ldi	r24, 0x23	; 35
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	23 e2       	ldi	r18, 0x23	; 35
    6100:	30 e0       	ldi	r19, 0x00	; 0
    6102:	f9 01       	movw	r30, r18
    6104:	20 81       	ld	r18, Z
    6106:	20 68       	ori	r18, 0x80	; 128
    6108:	fc 01       	movw	r30, r24
    610a:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle.

#endif

}
    610c:	00 00       	nop
    610e:	df 91       	pop	r29
    6110:	cf 91       	pop	r28
    6112:	08 95       	ret

00006114 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    6114:	cf 93       	push	r28
    6116:	df 93       	push	r29
    6118:	cd b7       	in	r28, 0x3d	; 61
    611a:	de b7       	in	r29, 0x3e	; 62
    611c:	2e 97       	sbiw	r28, 0x0e	; 14
    611e:	0f b6       	in	r0, 0x3f	; 63
    6120:	f8 94       	cli
    6122:	de bf       	out	0x3e, r29	; 62
    6124:	0f be       	out	0x3f, r0	; 63
    6126:	cd bf       	out	0x3d, r28	; 61
    prvSetMainLedOn(); // Main LED on.
    6128:	ca df       	rcall	.-108    	; 0x60be <prvSetMainLedOn>
    612a:	80 e0       	ldi	r24, 0x00	; 0
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	a8 e4       	ldi	r26, 0x48	; 72
    6130:	b2 e4       	ldi	r27, 0x42	; 66
    6132:	89 83       	std	Y+1, r24	; 0x01
    6134:	9a 83       	std	Y+2, r25	; 0x02
    6136:	ab 83       	std	Y+3, r26	; 0x03
    6138:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    613a:	20 e0       	ldi	r18, 0x00	; 0
    613c:	30 e0       	ldi	r19, 0x00	; 0
    613e:	4a e7       	ldi	r20, 0x7A	; 122
    6140:	55 e4       	ldi	r21, 0x45	; 69
    6142:	69 81       	ldd	r22, Y+1	; 0x01
    6144:	7a 81       	ldd	r23, Y+2	; 0x02
    6146:	8b 81       	ldd	r24, Y+3	; 0x03
    6148:	9c 81       	ldd	r25, Y+4	; 0x04
    614a:	cb d6       	rcall	.+3478   	; 0x6ee2 <__mulsf3>
    614c:	dc 01       	movw	r26, r24
    614e:	cb 01       	movw	r24, r22
    6150:	8d 83       	std	Y+5, r24	; 0x05
    6152:	9e 83       	std	Y+6, r25	; 0x06
    6154:	af 83       	std	Y+7, r26	; 0x07
    6156:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6158:	20 e0       	ldi	r18, 0x00	; 0
    615a:	30 e0       	ldi	r19, 0x00	; 0
    615c:	40 e8       	ldi	r20, 0x80	; 128
    615e:	5f e3       	ldi	r21, 0x3F	; 63
    6160:	6d 81       	ldd	r22, Y+5	; 0x05
    6162:	7e 81       	ldd	r23, Y+6	; 0x06
    6164:	8f 81       	ldd	r24, Y+7	; 0x07
    6166:	98 85       	ldd	r25, Y+8	; 0x08
    6168:	3b d6       	rcall	.+3190   	; 0x6de0 <__cmpsf2>
    616a:	88 23       	and	r24, r24
    616c:	2c f4       	brge	.+10     	; 0x6178 <vApplicationMallocFailedHook+0x64>
		__ticks = 1;
    616e:	81 e0       	ldi	r24, 0x01	; 1
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	9a 87       	std	Y+10, r25	; 0x0a
    6174:	89 87       	std	Y+9, r24	; 0x09
    6176:	3b c0       	rjmp	.+118    	; 0x61ee <vApplicationMallocFailedHook+0xda>
	else if (__tmp > 65535)
    6178:	20 e0       	ldi	r18, 0x00	; 0
    617a:	3f ef       	ldi	r19, 0xFF	; 255
    617c:	4f e7       	ldi	r20, 0x7F	; 127
    617e:	57 e4       	ldi	r21, 0x47	; 71
    6180:	6d 81       	ldd	r22, Y+5	; 0x05
    6182:	7e 81       	ldd	r23, Y+6	; 0x06
    6184:	8f 81       	ldd	r24, Y+7	; 0x07
    6186:	98 85       	ldd	r25, Y+8	; 0x08
    6188:	a8 d6       	rcall	.+3408   	; 0x6eda <__gesf2>
    618a:	18 16       	cp	r1, r24
    618c:	3c f5       	brge	.+78     	; 0x61dc <vApplicationMallocFailedHook+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    618e:	20 e0       	ldi	r18, 0x00	; 0
    6190:	30 e0       	ldi	r19, 0x00	; 0
    6192:	40 e2       	ldi	r20, 0x20	; 32
    6194:	51 e4       	ldi	r21, 0x41	; 65
    6196:	69 81       	ldd	r22, Y+1	; 0x01
    6198:	7a 81       	ldd	r23, Y+2	; 0x02
    619a:	8b 81       	ldd	r24, Y+3	; 0x03
    619c:	9c 81       	ldd	r25, Y+4	; 0x04
    619e:	a1 d6       	rcall	.+3394   	; 0x6ee2 <__mulsf3>
    61a0:	dc 01       	movw	r26, r24
    61a2:	cb 01       	movw	r24, r22
    61a4:	bc 01       	movw	r22, r24
    61a6:	cd 01       	movw	r24, r26
    61a8:	1f d6       	rcall	.+3134   	; 0x6de8 <__fixunssfsi>
    61aa:	dc 01       	movw	r26, r24
    61ac:	cb 01       	movw	r24, r22
    61ae:	9a 87       	std	Y+10, r25	; 0x0a
    61b0:	89 87       	std	Y+9, r24	; 0x09
    61b2:	0f c0       	rjmp	.+30     	; 0x61d2 <vApplicationMallocFailedHook+0xbe>
    61b4:	80 e9       	ldi	r24, 0x90	; 144
    61b6:	91 e0       	ldi	r25, 0x01	; 1
    61b8:	9c 87       	std	Y+12, r25	; 0x0c
    61ba:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    61bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    61be:	9c 85       	ldd	r25, Y+12	; 0x0c
    61c0:	01 97       	sbiw	r24, 0x01	; 1
    61c2:	f1 f7       	brne	.-4      	; 0x61c0 <vApplicationMallocFailedHook+0xac>
    61c4:	9c 87       	std	Y+12, r25	; 0x0c
    61c6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61c8:	89 85       	ldd	r24, Y+9	; 0x09
    61ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    61cc:	01 97       	sbiw	r24, 0x01	; 1
    61ce:	9a 87       	std	Y+10, r25	; 0x0a
    61d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61d2:	89 85       	ldd	r24, Y+9	; 0x09
    61d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    61d6:	89 2b       	or	r24, r25
    61d8:	69 f7       	brne	.-38     	; 0x61b4 <vApplicationMallocFailedHook+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61da:	13 c0       	rjmp	.+38     	; 0x6202 <vApplicationMallocFailedHook+0xee>
    61dc:	6d 81       	ldd	r22, Y+5	; 0x05
    61de:	7e 81       	ldd	r23, Y+6	; 0x06
    61e0:	8f 81       	ldd	r24, Y+7	; 0x07
    61e2:	98 85       	ldd	r25, Y+8	; 0x08
    61e4:	01 d6       	rcall	.+3074   	; 0x6de8 <__fixunssfsi>
    61e6:	dc 01       	movw	r26, r24
    61e8:	cb 01       	movw	r24, r22
    61ea:	9a 87       	std	Y+10, r25	; 0x0a
    61ec:	89 87       	std	Y+9, r24	; 0x09
    61ee:	89 85       	ldd	r24, Y+9	; 0x09
    61f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    61f2:	9e 87       	std	Y+14, r25	; 0x0e
    61f4:	8d 87       	std	Y+13, r24	; 0x0d
    61f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    61f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    61fa:	01 97       	sbiw	r24, 0x01	; 1
    61fc:	f1 f7       	brne	.-4      	; 0x61fa <vApplicationMallocFailedHook+0xe6>
    61fe:	9e 87       	std	Y+14, r25	; 0x0e
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    6200:	8d 87       	std	Y+13, r24	; 0x0d
    6202:	77 df       	rcall	.-274    	; 0x60f2 <prvBlinkMainLed>
    }
    6204:	92 cf       	rjmp	.-220    	; 0x612a <vApplicationMallocFailedHook+0x16>

00006206 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    char * pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{
    6206:	cf 93       	push	r28
    6208:	df 93       	push	r29
    620a:	cd b7       	in	r28, 0x3d	; 61
    620c:	de b7       	in	r29, 0x3e	; 62
    620e:	62 97       	sbiw	r28, 0x12	; 18
    6210:	0f b6       	in	r0, 0x3f	; 63
    6212:	f8 94       	cli
    6214:	de bf       	out	0x3e, r29	; 62
    6216:	0f be       	out	0x3f, r0	; 63
    6218:	cd bf       	out	0x3d, r28	; 61
    621a:	98 8b       	std	Y+16, r25	; 0x10
    621c:	8f 87       	std	Y+15, r24	; 0x0f
    621e:	7a 8b       	std	Y+18, r23	; 0x12
    6220:	69 8b       	std	Y+17, r22	; 0x11

    prvSetMainLedOn(); // Main LED on.
    6222:	4d df       	rcall	.-358    	; 0x60be <prvSetMainLedOn>
    6224:	80 e0       	ldi	r24, 0x00	; 0
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	aa ef       	ldi	r26, 0xFA	; 250
    622a:	b4 e4       	ldi	r27, 0x44	; 68
    622c:	89 83       	std	Y+1, r24	; 0x01
    622e:	9a 83       	std	Y+2, r25	; 0x02
    6230:	ab 83       	std	Y+3, r26	; 0x03
    6232:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6234:	20 e0       	ldi	r18, 0x00	; 0
    6236:	30 e0       	ldi	r19, 0x00	; 0
    6238:	4a e7       	ldi	r20, 0x7A	; 122
    623a:	55 e4       	ldi	r21, 0x45	; 69
    623c:	69 81       	ldd	r22, Y+1	; 0x01
    623e:	7a 81       	ldd	r23, Y+2	; 0x02
    6240:	8b 81       	ldd	r24, Y+3	; 0x03
    6242:	9c 81       	ldd	r25, Y+4	; 0x04
    6244:	4e d6       	rcall	.+3228   	; 0x6ee2 <__mulsf3>
    6246:	dc 01       	movw	r26, r24
    6248:	cb 01       	movw	r24, r22
    624a:	8d 83       	std	Y+5, r24	; 0x05
    624c:	9e 83       	std	Y+6, r25	; 0x06
    624e:	af 83       	std	Y+7, r26	; 0x07
    6250:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6252:	20 e0       	ldi	r18, 0x00	; 0
    6254:	30 e0       	ldi	r19, 0x00	; 0
    6256:	40 e8       	ldi	r20, 0x80	; 128
    6258:	5f e3       	ldi	r21, 0x3F	; 63
    625a:	6d 81       	ldd	r22, Y+5	; 0x05
    625c:	7e 81       	ldd	r23, Y+6	; 0x06
    625e:	8f 81       	ldd	r24, Y+7	; 0x07
    6260:	98 85       	ldd	r25, Y+8	; 0x08
    6262:	be d5       	rcall	.+2940   	; 0x6de0 <__cmpsf2>
    6264:	88 23       	and	r24, r24
    6266:	2c f4       	brge	.+10     	; 0x6272 <vApplicationStackOverflowHook+0x6c>
		__ticks = 1;
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	90 e0       	ldi	r25, 0x00	; 0
    626c:	9a 87       	std	Y+10, r25	; 0x0a
    626e:	89 87       	std	Y+9, r24	; 0x09
    6270:	3b c0       	rjmp	.+118    	; 0x62e8 <vApplicationStackOverflowHook+0xe2>
	else if (__tmp > 65535)
    6272:	20 e0       	ldi	r18, 0x00	; 0
    6274:	3f ef       	ldi	r19, 0xFF	; 255
    6276:	4f e7       	ldi	r20, 0x7F	; 127
    6278:	57 e4       	ldi	r21, 0x47	; 71
    627a:	6d 81       	ldd	r22, Y+5	; 0x05
    627c:	7e 81       	ldd	r23, Y+6	; 0x06
    627e:	8f 81       	ldd	r24, Y+7	; 0x07
    6280:	98 85       	ldd	r25, Y+8	; 0x08
    6282:	2b d6       	rcall	.+3158   	; 0x6eda <__gesf2>
    6284:	18 16       	cp	r1, r24
    6286:	3c f5       	brge	.+78     	; 0x62d6 <vApplicationStackOverflowHook+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6288:	20 e0       	ldi	r18, 0x00	; 0
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	40 e2       	ldi	r20, 0x20	; 32
    628e:	51 e4       	ldi	r21, 0x41	; 65
    6290:	69 81       	ldd	r22, Y+1	; 0x01
    6292:	7a 81       	ldd	r23, Y+2	; 0x02
    6294:	8b 81       	ldd	r24, Y+3	; 0x03
    6296:	9c 81       	ldd	r25, Y+4	; 0x04
    6298:	24 d6       	rcall	.+3144   	; 0x6ee2 <__mulsf3>
    629a:	dc 01       	movw	r26, r24
    629c:	cb 01       	movw	r24, r22
    629e:	bc 01       	movw	r22, r24
    62a0:	cd 01       	movw	r24, r26
    62a2:	a2 d5       	rcall	.+2884   	; 0x6de8 <__fixunssfsi>
    62a4:	dc 01       	movw	r26, r24
    62a6:	cb 01       	movw	r24, r22
    62a8:	9a 87       	std	Y+10, r25	; 0x0a
    62aa:	89 87       	std	Y+9, r24	; 0x09
    62ac:	0f c0       	rjmp	.+30     	; 0x62cc <vApplicationStackOverflowHook+0xc6>
    62ae:	80 e9       	ldi	r24, 0x90	; 144
    62b0:	91 e0       	ldi	r25, 0x01	; 1
    62b2:	9c 87       	std	Y+12, r25	; 0x0c
    62b4:	8b 87       	std	Y+11, r24	; 0x0b
    62b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    62b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    62ba:	01 97       	sbiw	r24, 0x01	; 1
    62bc:	f1 f7       	brne	.-4      	; 0x62ba <vApplicationStackOverflowHook+0xb4>
    62be:	9c 87       	std	Y+12, r25	; 0x0c
    62c0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62c2:	89 85       	ldd	r24, Y+9	; 0x09
    62c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    62c6:	01 97       	sbiw	r24, 0x01	; 1
    62c8:	9a 87       	std	Y+10, r25	; 0x0a
    62ca:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62cc:	89 85       	ldd	r24, Y+9	; 0x09
    62ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    62d0:	89 2b       	or	r24, r25
    62d2:	69 f7       	brne	.-38     	; 0x62ae <vApplicationStackOverflowHook+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62d4:	13 c0       	rjmp	.+38     	; 0x62fc <vApplicationStackOverflowHook+0xf6>
    62d6:	6d 81       	ldd	r22, Y+5	; 0x05
    62d8:	7e 81       	ldd	r23, Y+6	; 0x06
    62da:	8f 81       	ldd	r24, Y+7	; 0x07
    62dc:	98 85       	ldd	r25, Y+8	; 0x08
    62de:	84 d5       	rcall	.+2824   	; 0x6de8 <__fixunssfsi>
    62e0:	dc 01       	movw	r26, r24
    62e2:	cb 01       	movw	r24, r22
    62e4:	9a 87       	std	Y+10, r25	; 0x0a
    62e6:	89 87       	std	Y+9, r24	; 0x09
    62e8:	89 85       	ldd	r24, Y+9	; 0x09
    62ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ec:	9e 87       	std	Y+14, r25	; 0x0e
    62ee:	8d 87       	std	Y+13, r24	; 0x0d
    62f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    62f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    62f4:	01 97       	sbiw	r24, 0x01	; 1
    62f6:	f1 f7       	brne	.-4      	; 0x62f4 <vApplicationStackOverflowHook+0xee>
    62f8:	9e 87       	std	Y+14, r25	; 0x0e

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    62fa:	8d 87       	std	Y+13, r24	; 0x0d
    62fc:	fa de       	rcall	.-524    	; 0x60f2 <prvBlinkMainLed>
    }
    62fe:	92 cf       	rjmp	.-220    	; 0x6224 <vApplicationStackOverflowHook+0x1e>

00006300 <packageHandler_setTemperaturePercent>:
static int16_t temperaturePercent;
static uint16_t humidityPercent;
static uint16_t CO2_PPM;
static uint8_t status = 0x10;

void packageHandler_setTemperaturePercent(int16_t temperature){
    6300:	cf 93       	push	r28
    6302:	df 93       	push	r29
    6304:	1f 92       	push	r1
    6306:	1f 92       	push	r1
    6308:	cd b7       	in	r28, 0x3d	; 61
    630a:	de b7       	in	r29, 0x3e	; 62
    630c:	9a 83       	std	Y+2, r25	; 0x02
    630e:	89 83       	std	Y+1, r24	; 0x01
	temperaturePercent = temperature;
    6310:	89 81       	ldd	r24, Y+1	; 0x01
    6312:	9a 81       	ldd	r25, Y+2	; 0x02
    6314:	90 93 bc 1b 	sts	0x1BBC, r25	; 0x801bbc <temperaturePercent+0x1>
    6318:	80 93 bb 1b 	sts	0x1BBB, r24	; 0x801bbb <temperaturePercent>
}
    631c:	00 00       	nop
    631e:	0f 90       	pop	r0
    6320:	0f 90       	pop	r0
    6322:	df 91       	pop	r29
    6324:	cf 91       	pop	r28
    6326:	08 95       	ret

00006328 <packageHandler_setHumidityPercent>:

void packageHandler_setHumidityPercent(uint16_t humidity){
    6328:	cf 93       	push	r28
    632a:	df 93       	push	r29
    632c:	1f 92       	push	r1
    632e:	1f 92       	push	r1
    6330:	cd b7       	in	r28, 0x3d	; 61
    6332:	de b7       	in	r29, 0x3e	; 62
    6334:	9a 83       	std	Y+2, r25	; 0x02
    6336:	89 83       	std	Y+1, r24	; 0x01
	humidityPercent = humidity;
    6338:	89 81       	ldd	r24, Y+1	; 0x01
    633a:	9a 81       	ldd	r25, Y+2	; 0x02
    633c:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <humidityPercent+0x1>
    6340:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <humidityPercent>
}
    6344:	00 00       	nop
    6346:	0f 90       	pop	r0
    6348:	0f 90       	pop	r0
    634a:	df 91       	pop	r29
    634c:	cf 91       	pop	r28
    634e:	08 95       	ret

00006350 <packageHandler_setCO2ppm>:

void packageHandler_setCO2ppm(uint16_t co2ppm){
    6350:	cf 93       	push	r28
    6352:	df 93       	push	r29
    6354:	1f 92       	push	r1
    6356:	1f 92       	push	r1
    6358:	cd b7       	in	r28, 0x3d	; 61
    635a:	de b7       	in	r29, 0x3e	; 62
    635c:	9a 83       	std	Y+2, r25	; 0x02
    635e:	89 83       	std	Y+1, r24	; 0x01
	CO2_PPM = co2ppm;
    6360:	89 81       	ldd	r24, Y+1	; 0x01
    6362:	9a 81       	ldd	r25, Y+2	; 0x02
    6364:	90 93 c0 1b 	sts	0x1BC0, r25	; 0x801bc0 <CO2_PPM+0x1>
    6368:	80 93 bf 1b 	sts	0x1BBF, r24	; 0x801bbf <CO2_PPM>
}
    636c:	00 00       	nop
    636e:	0f 90       	pop	r0
    6370:	0f 90       	pop	r0
    6372:	df 91       	pop	r29
    6374:	cf 91       	pop	r28
    6376:	08 95       	ret

00006378 <packageHandler_getLoraPackage>:

lora_driver_payload_t packageHandler_getLoraPackage(uint8_t port){
    6378:	cf 93       	push	r28
    637a:	df 93       	push	r29
    637c:	cd b7       	in	r28, 0x3d	; 61
    637e:	de b7       	in	r29, 0x3e	; 62
    6380:	69 97       	sbiw	r28, 0x19	; 25
    6382:	0f b6       	in	r0, 0x3f	; 63
    6384:	f8 94       	cli
    6386:	de bf       	out	0x3e, r29	; 62
    6388:	0f be       	out	0x3f, r0	; 63
    638a:	cd bf       	out	0x3d, r28	; 61
    638c:	98 8f       	std	Y+24, r25	; 0x18
    638e:	8f 8b       	std	Y+23, r24	; 0x17
    6390:	69 8f       	std	Y+25, r22	; 0x19
	lora_driver_payload_t payload;
	payload.portNo = port;
    6392:	89 8d       	ldd	r24, Y+25	; 0x19
    6394:	89 83       	std	Y+1, r24	; 0x01
	payload.len = PAYLOAD_SIZE;
    6396:	87 e0       	ldi	r24, 0x07	; 7
    6398:	8a 83       	std	Y+2, r24	; 0x02
	payload.bytes[0] = temperaturePercent >> 8;
    639a:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <temperaturePercent>
    639e:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <temperaturePercent+0x1>
    63a2:	89 2f       	mov	r24, r25
    63a4:	99 0f       	add	r25, r25
    63a6:	99 0b       	sbc	r25, r25
    63a8:	8b 83       	std	Y+3, r24	; 0x03
	payload.bytes[1] = temperaturePercent;
    63aa:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <temperaturePercent>
    63ae:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <temperaturePercent+0x1>
    63b2:	8c 83       	std	Y+4, r24	; 0x04
	payload.bytes[2] = humidityPercent >> 8;
    63b4:	80 91 bd 1b 	lds	r24, 0x1BBD	; 0x801bbd <humidityPercent>
    63b8:	90 91 be 1b 	lds	r25, 0x1BBE	; 0x801bbe <humidityPercent+0x1>
    63bc:	89 2f       	mov	r24, r25
    63be:	99 27       	eor	r25, r25
    63c0:	8d 83       	std	Y+5, r24	; 0x05
	payload.bytes[3] = humidityPercent;
    63c2:	80 91 bd 1b 	lds	r24, 0x1BBD	; 0x801bbd <humidityPercent>
    63c6:	90 91 be 1b 	lds	r25, 0x1BBE	; 0x801bbe <humidityPercent+0x1>
    63ca:	8e 83       	std	Y+6, r24	; 0x06
	payload.bytes[4] = CO2_PPM >> 8;
    63cc:	80 91 bf 1b 	lds	r24, 0x1BBF	; 0x801bbf <CO2_PPM>
    63d0:	90 91 c0 1b 	lds	r25, 0x1BC0	; 0x801bc0 <CO2_PPM+0x1>
    63d4:	89 2f       	mov	r24, r25
    63d6:	99 27       	eor	r25, r25
    63d8:	8f 83       	std	Y+7, r24	; 0x07
	payload.bytes[5] = CO2_PPM;
    63da:	80 91 bf 1b 	lds	r24, 0x1BBF	; 0x801bbf <CO2_PPM>
    63de:	90 91 c0 1b 	lds	r25, 0x1BC0	; 0x801bc0 <CO2_PPM+0x1>
    63e2:	88 87       	std	Y+8, r24	; 0x08
	payload.bytes[6] = status;
    63e4:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <status>
    63e8:	89 87       	std	Y+9, r24	; 0x09
	
	return payload;
    63ea:	8f 89       	ldd	r24, Y+23	; 0x17
    63ec:	98 8d       	ldd	r25, Y+24	; 0x18
    63ee:	46 e1       	ldi	r20, 0x16	; 22
    63f0:	9e 01       	movw	r18, r28
    63f2:	2f 5f       	subi	r18, 0xFF	; 255
    63f4:	3f 4f       	sbci	r19, 0xFF	; 255
    63f6:	f9 01       	movw	r30, r18
    63f8:	dc 01       	movw	r26, r24
    63fa:	01 90       	ld	r0, Z+
    63fc:	0d 92       	st	X+, r0
    63fe:	4a 95       	dec	r20
    6400:	e1 f7       	brne	.-8      	; 0x63fa <packageHandler_getLoraPackage+0x82>
    6402:	8f 89       	ldd	r24, Y+23	; 0x17
    6404:	98 8d       	ldd	r25, Y+24	; 0x18
    6406:	69 96       	adiw	r28, 0x19	; 25
    6408:	0f b6       	in	r0, 0x3f	; 63
    640a:	f8 94       	cli
    640c:	de bf       	out	0x3e, r29	; 62
    640e:	0f be       	out	0x3f, r0	; 63
    6410:	cd bf       	out	0x3d, r28	; 61
    6412:	df 91       	pop	r29
    6414:	cf 91       	pop	r28
    6416:	08 95       	ret

00006418 <co2Sensor_create>:
uint16_t lastCO2ppm = 0;


//Initializes the CO2 sensor driver, creates the CO2 task and sets up the callback.
// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3.
void co2Sensor_create(UBaseType_t priority) {
    6418:	cf 93       	push	r28
    641a:	df 93       	push	r29
    641c:	1f 92       	push	r1
    641e:	cd b7       	in	r28, 0x3d	; 61
    6420:	de b7       	in	r29, 0x3e	; 62
    6422:	89 83       	std	Y+1, r24	; 0x01
	mh_z19_initialise(ser_USART3);
    6424:	83 e0       	ldi	r24, 0x03	; 3
    6426:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
    642a:	8b e2       	ldi	r24, 0x2B	; 43
    642c:	92 e3       	ldi	r25, 0x32	; 50
    642e:	0e 94 96 3d 	call	0x7b2c	; 0x7b2c <mh_z19_injectCallBack>
	co2Sensor_createTask(priority);
    6432:	89 81       	ldd	r24, Y+1	; 0x01
    6434:	50 d0       	rcall	.+160    	; 0x64d6 <co2Sensor_createTask>
}
    6436:	00 00       	nop
    6438:	0f 90       	pop	r0
    643a:	df 91       	pop	r29
    643c:	cf 91       	pop	r28
    643e:	08 95       	ret

00006440 <co2Sensor_getPPM>:

//Getter for lastCO2ppm.
uint16_t co2Sensor_getPPM() {
    6440:	cf 93       	push	r28
    6442:	df 93       	push	r29
    6444:	cd b7       	in	r28, 0x3d	; 61
    6446:	de b7       	in	r29, 0x3e	; 62
	return lastCO2ppm;
    6448:	80 91 c1 1b 	lds	r24, 0x1BC1	; 0x801bc1 <lastCO2ppm>
    644c:	90 91 c2 1b 	lds	r25, 0x1BC2	; 0x801bc2 <lastCO2ppm+0x1>
}
    6450:	df 91       	pop	r29
    6452:	cf 91       	pop	r28
    6454:	08 95       	ret

00006456 <myCo2CallBack>:

//Sets lastCO2ppm when the callback is called
void myCo2CallBack(uint16_t ppm_parameter)
{
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	1f 92       	push	r1
    645c:	1f 92       	push	r1
    645e:	cd b7       	in	r28, 0x3d	; 61
    6460:	de b7       	in	r29, 0x3e	; 62
    6462:	9a 83       	std	Y+2, r25	; 0x02
    6464:	89 83       	std	Y+1, r24	; 0x01
	lastCO2ppm = ppm_parameter;
    6466:	89 81       	ldd	r24, Y+1	; 0x01
    6468:	9a 81       	ldd	r25, Y+2	; 0x02
    646a:	90 93 c2 1b 	sts	0x1BC2, r25	; 0x801bc2 <lastCO2ppm+0x1>
    646e:	80 93 c1 1b 	sts	0x1BC1, r24	; 0x801bc1 <lastCO2ppm>
}
    6472:	00 00       	nop
    6474:	0f 90       	pop	r0
    6476:	0f 90       	pop	r0
    6478:	df 91       	pop	r29
    647a:	cf 91       	pop	r28
    647c:	08 95       	ret

0000647e <co2Sensor_measure>:

//Measures the CO2.
void co2Sensor_measure() {
    647e:	cf 93       	push	r28
    6480:	df 93       	push	r29
    6482:	1f 92       	push	r1
    6484:	cd b7       	in	r28, 0x3d	; 61
    6486:	de b7       	in	r29, 0x3e	; 62
	mh_z19_returnCode_t measure_rc = mh_z19_takeMeassuring();
    6488:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <mh_z19_takeMeassuring>
    648c:	89 83       	std	Y+1, r24	; 0x01
	if (measure_rc != MHZ19_OK)
    648e:	89 81       	ldd	r24, Y+1	; 0x01
    6490:	88 23       	and	r24, r24
    6492:	71 f0       	breq	.+28     	; 0x64b0 <co2Sensor_measure+0x32>
	{
		printf("co2Sensor.c ---> ERROR: CO2 Sensor could not measure, ");
    6494:	82 e6       	ldi	r24, 0x62	; 98
    6496:	93 e0       	ldi	r25, 0x03	; 3
    6498:	89 2f       	mov	r24, r25
    649a:	8f 93       	push	r24
    649c:	82 e6       	ldi	r24, 0x62	; 98
    649e:	93 e0       	ldi	r25, 0x03	; 3
    64a0:	8f 93       	push	r24
    64a2:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    64a6:	0f 90       	pop	r0
    64a8:	0f 90       	pop	r0
		co2Sensor_printReturnCode(measure_rc);
    64aa:	89 81       	ldd	r24, Y+1	; 0x01
    64ac:	6d d0       	rcall	.+218    	; 0x6588 <co2Sensor_printReturnCode>
    64ae:	04 c0       	rjmp	.+8      	; 0x64b8 <co2Sensor_measure+0x3a>
	}
	else
	{
		printf("co2Sensor.c ---> Initialized, CO2 Sensor.\n");
    64b0:	89 e9       	ldi	r24, 0x99	; 153
    64b2:	93 e0       	ldi	r25, 0x03	; 3
    64b4:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <puts>
	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    64b8:	81 ec       	ldi	r24, 0xC1	; 193
    64ba:	9b e1       	ldi	r25, 0x1B	; 27
    64bc:	0e 94 ca 3d 	call	0x7b94	; 0x7b94 <mh_z19_getCo2Ppm>
    64c0:	88 2f       	mov	r24, r24
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	90 93 c2 1b 	sts	0x1BC2, r25	; 0x801bc2 <lastCO2ppm+0x1>
    64c8:	80 93 c1 1b 	sts	0x1BC1, r24	; 0x801bc1 <lastCO2ppm>
}
    64cc:	00 00       	nop
    64ce:	0f 90       	pop	r0
    64d0:	df 91       	pop	r29
    64d2:	cf 91       	pop	r28
    64d4:	08 95       	ret

000064d6 <co2Sensor_createTask>:

//Creates the CO2 task.
void co2Sensor_createTask(UBaseType_t priority){
    64d6:	ef 92       	push	r14
    64d8:	ff 92       	push	r15
    64da:	0f 93       	push	r16
    64dc:	cf 93       	push	r28
    64de:	df 93       	push	r29
    64e0:	1f 92       	push	r1
    64e2:	cd b7       	in	r28, 0x3d	; 61
    64e4:	de b7       	in	r29, 0x3e	; 62
    64e6:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
    64e8:	e1 2c       	mov	r14, r1
    64ea:	f1 2c       	mov	r15, r1
    64ec:	09 81       	ldd	r16, Y+1	; 0x01
    64ee:	20 e0       	ldi	r18, 0x00	; 0
    64f0:	30 e0       	ldi	r19, 0x00	; 0
    64f2:	40 ec       	ldi	r20, 0xC0	; 192
    64f4:	50 e0       	ldi	r21, 0x00	; 0
    64f6:	63 ec       	ldi	r22, 0xC3	; 195
    64f8:	73 e0       	ldi	r23, 0x03	; 3
    64fa:	89 e8       	ldi	r24, 0x89	; 137
    64fc:	92 e3       	ldi	r25, 0x32	; 50
    64fe:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskCreate>
	"MeasuringCO2_Task",
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
}
    6502:	00 00       	nop
    6504:	0f 90       	pop	r0
    6506:	df 91       	pop	r29
    6508:	cf 91       	pop	r28
    650a:	0f 91       	pop	r16
    650c:	ff 90       	pop	r15
    650e:	ef 90       	pop	r14
    6510:	08 95       	ret

00006512 <co2Sensor_task>:

//The CO2 sensor task.
void co2Sensor_task(void *pvParameters){
    6512:	cf 92       	push	r12
    6514:	df 92       	push	r13
    6516:	ef 92       	push	r14
    6518:	ff 92       	push	r15
    651a:	0f 93       	push	r16
    651c:	cf 93       	push	r28
    651e:	df 93       	push	r29
    6520:	00 d0       	rcall	.+0      	; 0x6522 <co2Sensor_task+0x10>
    6522:	00 d0       	rcall	.+0      	; 0x6524 <co2Sensor_task+0x12>
    6524:	cd b7       	in	r28, 0x3d	; 61
    6526:	de b7       	in	r29, 0x3e	; 62
    6528:	9e 83       	std	Y+6, r25	; 0x06
    652a:	8d 83       	std	Y+5, r24	; 0x05
	while(1)
	{
		//Usage of Event group Wait fun until co2 measure bit is set to 1
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    652c:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <measureEventGroup>
    6530:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <measureEventGroup+0x1>
    6534:	cc 24       	eor	r12, r12
    6536:	ca 94       	dec	r12
    6538:	dc 2c       	mov	r13, r12
    653a:	76 01       	movw	r14, r12
    653c:	01 e0       	ldi	r16, 0x01	; 1
    653e:	21 e0       	ldi	r18, 0x01	; 1
    6540:	41 e0       	ldi	r20, 0x01	; 1
    6542:	50 e0       	ldi	r21, 0x00	; 0
    6544:	60 e0       	ldi	r22, 0x00	; 0
    6546:	70 e0       	ldi	r23, 0x00	; 0
    6548:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <xEventGroupWaitBits>
    654c:	dc 01       	movw	r26, r24
    654e:	cb 01       	movw	r24, r22
    6550:	89 83       	std	Y+1, r24	; 0x01
    6552:	9a 83       	std	Y+2, r25	; 0x02
    6554:	ab 83       	std	Y+3, r26	; 0x03
    6556:	bc 83       	std	Y+4, r27	; 0x04
		
		if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    6558:	89 81       	ldd	r24, Y+1	; 0x01
    655a:	9a 81       	ldd	r25, Y+2	; 0x02
    655c:	ab 81       	ldd	r26, Y+3	; 0x03
    655e:	bc 81       	ldd	r27, Y+4	; 0x04
    6560:	81 70       	andi	r24, 0x01	; 1
    6562:	99 27       	eor	r25, r25
    6564:	aa 27       	eor	r26, r26
    6566:	bb 27       	eor	r27, r27
    6568:	89 2b       	or	r24, r25
    656a:	8a 2b       	or	r24, r26
    656c:	8b 2b       	or	r24, r27
    656e:	f1 f2       	breq	.-68     	; 0x652c <co2Sensor_task+0x1a>
		{
			//printf("Measure bit and event bit was successfully checked ");
			co2Sensor_measure();
    6570:	86 df       	rcall	.-244    	; 0x647e <co2Sensor_measure>
			//printf("Measurement successful , now time to set ready bit of c02 ");
			xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    6572:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <dataReadyEventGroup>
    6576:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <dataReadyEventGroup+0x1>
    657a:	42 e0       	ldi	r20, 0x02	; 2
    657c:	50 e0       	ldi	r21, 0x00	; 0
    657e:	60 e0       	ldi	r22, 0x00	; 0
    6580:	70 e0       	ldi	r23, 0x00	; 0
    6582:	0e 94 20 05 	call	0xa40	; 0xa40 <xEventGroupSetBits>
			//vTaskDelay(pdMS_TO_TICKS(100));
		}}
    6586:	d2 cf       	rjmp	.-92     	; 0x652c <co2Sensor_task+0x1a>

00006588 <co2Sensor_printReturnCode>:
	}

	//Prints a formatted return code.
	void co2Sensor_printReturnCode(mh_z19_returnCode_t rc)
	{
    6588:	cf 93       	push	r28
    658a:	df 93       	push	r29
    658c:	00 d0       	rcall	.+0      	; 0x658e <co2Sensor_printReturnCode+0x6>
    658e:	cd b7       	in	r28, 0x3d	; 61
    6590:	de b7       	in	r29, 0x3e	; 62
    6592:	8b 83       	std	Y+3, r24	; 0x03
		char* returnCodeString;
		switch(rc){
    6594:	8b 81       	ldd	r24, Y+3	; 0x03
    6596:	88 2f       	mov	r24, r24
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	81 30       	cpi	r24, 0x01	; 1
    659c:	91 05       	cpc	r25, r1
    659e:	81 f0       	breq	.+32     	; 0x65c0 <co2Sensor_printReturnCode+0x38>
    65a0:	82 30       	cpi	r24, 0x02	; 2
    65a2:	91 05       	cpc	r25, r1
    65a4:	1c f4       	brge	.+6      	; 0x65ac <co2Sensor_printReturnCode+0x24>
    65a6:	89 2b       	or	r24, r25
    65a8:	39 f0       	breq	.+14     	; 0x65b8 <co2Sensor_printReturnCode+0x30>
    65aa:	16 c0       	rjmp	.+44     	; 0x65d8 <co2Sensor_printReturnCode+0x50>
    65ac:	82 30       	cpi	r24, 0x02	; 2
    65ae:	91 05       	cpc	r25, r1
    65b0:	59 f0       	breq	.+22     	; 0x65c8 <co2Sensor_printReturnCode+0x40>
    65b2:	03 97       	sbiw	r24, 0x03	; 3
    65b4:	69 f0       	breq	.+26     	; 0x65d0 <co2Sensor_printReturnCode+0x48>
    65b6:	10 c0       	rjmp	.+32     	; 0x65d8 <co2Sensor_printReturnCode+0x50>
			case MHZ19_OK: returnCodeString = "MHZ19_OK - Everything went well";
    65b8:	85 ed       	ldi	r24, 0xD5	; 213
    65ba:	93 e0       	ldi	r25, 0x03	; 3
    65bc:	9a 83       	std	Y+2, r25	; 0x02
    65be:	89 83       	std	Y+1, r24	; 0x01
			case MHZ19_NO_MEASSURING_AVAILABLE: returnCodeString = "MHZ19_NO_MEASSURING_AVAILABLE - No results are received from the sensor";
    65c0:	85 ef       	ldi	r24, 0xF5	; 245
    65c2:	93 e0       	ldi	r25, 0x03	; 3
    65c4:	9a 83       	std	Y+2, r25	; 0x02
    65c6:	89 83       	std	Y+1, r24	; 0x01
			case MHZ19_NO_SERIAL: returnCodeString = "MHZ19_NO_SERIAL - No serial driver is specified";
    65c8:	8d e3       	ldi	r24, 0x3D	; 61
    65ca:	94 e0       	ldi	r25, 0x04	; 4
    65cc:	9a 83       	std	Y+2, r25	; 0x02
    65ce:	89 83       	std	Y+1, r24	; 0x01
			case MHZ19_PPM_MUST_BE_GT_999: returnCodeString = "MHZ19_PPM_MUST_BE_GT_999 - Span calibration is only allowed from ppm >= 1000";
    65d0:	8d e6       	ldi	r24, 0x6D	; 109
    65d2:	94 e0       	ldi	r25, 0x04	; 4
    65d4:	9a 83       	std	Y+2, r25	; 0x02
    65d6:	89 83       	std	Y+1, r24	; 0x01
		}
		printf("RETURNCODE: %s \n", returnCodeString);
    65d8:	8a 81       	ldd	r24, Y+2	; 0x02
    65da:	8f 93       	push	r24
    65dc:	89 81       	ldd	r24, Y+1	; 0x01
    65de:	8f 93       	push	r24
    65e0:	8a eb       	ldi	r24, 0xBA	; 186
    65e2:	94 e0       	ldi	r25, 0x04	; 4
    65e4:	89 2f       	mov	r24, r25
    65e6:	8f 93       	push	r24
    65e8:	8a eb       	ldi	r24, 0xBA	; 186
    65ea:	94 e0       	ldi	r25, 0x04	; 4
    65ec:	8f 93       	push	r24
    65ee:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    65f2:	0f 90       	pop	r0
    65f4:	0f 90       	pop	r0
    65f6:	0f 90       	pop	r0
    65f8:	0f 90       	pop	r0
	}
    65fa:	00 00       	nop
    65fc:	0f 90       	pop	r0
    65fe:	0f 90       	pop	r0
    6600:	0f 90       	pop	r0
    6602:	df 91       	pop	r29
    6604:	cf 91       	pop	r28
    6606:	08 95       	ret

00006608 <tempHumSensor_create>:
void tempHumSensor_initialise();
void tempHumSensor_printReturnCode(hih8120_driverReturnCode_t rc);

//Initializes the temperature and humidity sensor driver and creates the temperature and humidity task.
void tempHumSensor_create(UBaseType_t priority)
{
    6608:	cf 93       	push	r28
    660a:	df 93       	push	r29
    660c:	1f 92       	push	r1
    660e:	cd b7       	in	r28, 0x3d	; 61
    6610:	de b7       	in	r29, 0x3e	; 62
    6612:	89 83       	std	Y+1, r24	; 0x01
	tempHumSensor_initialise();
    6614:	1d d0       	rcall	.+58     	; 0x6650 <tempHumSensor_initialise>
	tempHumSensor_createTask(priority);
    6616:	89 81       	ldd	r24, Y+1	; 0x01
    6618:	b0 d0       	rcall	.+352    	; 0x677a <tempHumSensor_createTask>
}
    661a:	00 00       	nop
    661c:	0f 90       	pop	r0
    661e:	df 91       	pop	r29
    6620:	cf 91       	pop	r28
    6622:	08 95       	ret

00006624 <tempHumSensor_getTemp>:
//Getter for temperature.
int16_t tempHumSensor_getTemp(){
    6624:	cf 93       	push	r28
    6626:	df 93       	push	r29
    6628:	cd b7       	in	r28, 0x3d	; 61
    662a:	de b7       	in	r29, 0x3e	; 62
	return temperature;
    662c:	80 91 c5 1b 	lds	r24, 0x1BC5	; 0x801bc5 <temperature>
    6630:	90 91 c6 1b 	lds	r25, 0x1BC6	; 0x801bc6 <temperature+0x1>
}
    6634:	df 91       	pop	r29
    6636:	cf 91       	pop	r28
    6638:	08 95       	ret

0000663a <tempHumSensor_getHum>:
//Getter for humidity.
uint16_t tempHumSensor_getHum(){
    663a:	cf 93       	push	r28
    663c:	df 93       	push	r29
    663e:	cd b7       	in	r28, 0x3d	; 61
    6640:	de b7       	in	r29, 0x3e	; 62
	return humidity;
    6642:	80 91 c3 1b 	lds	r24, 0x1BC3	; 0x801bc3 <humidity>
    6646:	90 91 c4 1b 	lds	r25, 0x1BC4	; 0x801bc4 <humidity+0x1>
}
    664a:	df 91       	pop	r29
    664c:	cf 91       	pop	r28
    664e:	08 95       	ret

00006650 <tempHumSensor_initialise>:

//Initializes the temperature and humidity sensor driver and prints the return code.
void tempHumSensor_initialise()
{
    6650:	cf 93       	push	r28
    6652:	df 93       	push	r29
    6654:	1f 92       	push	r1
    6656:	cd b7       	in	r28, 0x3d	; 61
    6658:	de b7       	in	r29, 0x3e	; 62
	hih8120_driverReturnCode_t rc = hih8120_initialise();
    665a:	fb d4       	rcall	.+2550   	; 0x7052 <hih8120_initialise>
    665c:	89 83       	std	Y+1, r24	; 0x01
	
	if (rc != HIH8120_OK)
    665e:	89 81       	ldd	r24, Y+1	; 0x01
    6660:	88 23       	and	r24, r24
    6662:	71 f0       	breq	.+28     	; 0x6680 <tempHumSensor_initialise+0x30>
	{
		printf("temHumSenor.c ---> ERROR: Initializing temperature & Humidity Sensor, ");
    6664:	8b ec       	ldi	r24, 0xCB	; 203
    6666:	94 e0       	ldi	r25, 0x04	; 4
    6668:	89 2f       	mov	r24, r25
    666a:	8f 93       	push	r24
    666c:	8b ec       	ldi	r24, 0xCB	; 203
    666e:	94 e0       	ldi	r25, 0x04	; 4
    6670:	8f 93       	push	r24
    6672:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6676:	0f 90       	pop	r0
    6678:	0f 90       	pop	r0
		tempHumSensor_printReturnCode(rc);
    667a:	89 81       	ldd	r24, Y+1	; 0x01
    667c:	d7 d0       	rcall	.+430    	; 0x682c <tempHumSensor_printReturnCode>
	}
	else
	{
		printf("temHumSenor.c ---> Initialized, Temperature & Humidity Sensor.\n");
	}
}
    667e:	04 c0       	rjmp	.+8      	; 0x6688 <tempHumSensor_initialise+0x38>
		printf("temHumSenor.c ---> ERROR: Initializing temperature & Humidity Sensor, ");
		tempHumSensor_printReturnCode(rc);
	}
	else
	{
		printf("temHumSenor.c ---> Initialized, Temperature & Humidity Sensor.\n");
    6680:	82 e1       	ldi	r24, 0x12	; 18
    6682:	95 e0       	ldi	r25, 0x05	; 5
    6684:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <puts>
	}
}
    6688:	00 00       	nop
    668a:	0f 90       	pop	r0
    668c:	df 91       	pop	r29
    668e:	cf 91       	pop	r28
    6690:	08 95       	ret

00006692 <tempHumSensor_measure>:


//Measures the temperature and humidity.
void tempHumSensor_measure(){
    6692:	cf 93       	push	r28
    6694:	df 93       	push	r29
    6696:	1f 92       	push	r1
    6698:	1f 92       	push	r1
    669a:	cd b7       	in	r28, 0x3d	; 61
    669c:	de b7       	in	r29, 0x3e	; 62
	//waking up the sensor and getting return code.
	hih8120_driverReturnCode_t wakeup_rc = hih8120_wakeup();
    669e:	f4 d4       	rcall	.+2536   	; 0x7088 <hih8120_wakeup>
    66a0:	89 83       	std	Y+1, r24	; 0x01
	
	//checking return code and printing result.
	if (wakeup_rc != HIH8120_OK)
    66a2:	89 81       	ldd	r24, Y+1	; 0x01
    66a4:	88 23       	and	r24, r24
    66a6:	71 f0       	breq	.+28     	; 0x66c4 <tempHumSensor_measure+0x32>
	{
		printf("temHumSenor.c ---> ERROR: Waking temperature & Humidity Sensor up, ");
    66a8:	81 e5       	ldi	r24, 0x51	; 81
    66aa:	95 e0       	ldi	r25, 0x05	; 5
    66ac:	89 2f       	mov	r24, r25
    66ae:	8f 93       	push	r24
    66b0:	81 e5       	ldi	r24, 0x51	; 81
    66b2:	95 e0       	ldi	r25, 0x05	; 5
    66b4:	8f 93       	push	r24
    66b6:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    66ba:	0f 90       	pop	r0
    66bc:	0f 90       	pop	r0
		tempHumSensor_printReturnCode(wakeup_rc);
    66be:	89 81       	ldd	r24, Y+1	; 0x01
    66c0:	b5 d0       	rcall	.+362    	; 0x682c <tempHumSensor_printReturnCode>
    66c2:	04 c0       	rjmp	.+8      	; 0x66cc <tempHumSensor_measure+0x3a>
	}
	else
	{
		printf("temHumSenor.c ---> Woke Temperature & Humidity Sensor up.\n");
    66c4:	85 e9       	ldi	r24, 0x95	; 149
    66c6:	95 e0       	ldi	r25, 0x05	; 5
    66c8:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <puts>
	}
	
	//note: After the hih8120_wakeup() call the sensor will need minimum 50 ms to be ready!
	vTaskDelay(pdMS_TO_TICKS(100));
    66cc:	66 e0       	ldi	r22, 0x06	; 6
    66ce:	70 e0       	ldi	r23, 0x00	; 0
    66d0:	80 e0       	ldi	r24, 0x00	; 0
    66d2:	90 e0       	ldi	r25, 0x00	; 0
    66d4:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskDelay>
	
	//waking up the sensor and getting return code.
	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
    66d8:	ec d4       	rcall	.+2520   	; 0x70b2 <hih8120_measure>
    66da:	8a 83       	std	Y+2, r24	; 0x02
	
	//checking return code and printing result.
	if (measure_rc != HIH8120_OK)
    66dc:	8a 81       	ldd	r24, Y+2	; 0x02
    66de:	88 23       	and	r24, r24
    66e0:	71 f0       	breq	.+28     	; 0x66fe <tempHumSensor_measure+0x6c>
	{
		printf("temHumSenor.c ---> ERROR: Temperature & Humidity Sensor could not measure, ");
    66e2:	8f ec       	ldi	r24, 0xCF	; 207
    66e4:	95 e0       	ldi	r25, 0x05	; 5
    66e6:	89 2f       	mov	r24, r25
    66e8:	8f 93       	push	r24
    66ea:	8f ec       	ldi	r24, 0xCF	; 207
    66ec:	95 e0       	ldi	r25, 0x05	; 5
    66ee:	8f 93       	push	r24
    66f0:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    66f4:	0f 90       	pop	r0
		tempHumSensor_printReturnCode(measure_rc);
    66f6:	0f 90       	pop	r0
    66f8:	8a 81       	ldd	r24, Y+2	; 0x02
    66fa:	98 d0       	rcall	.+304    	; 0x682c <tempHumSensor_printReturnCode>
    66fc:	04 c0       	rjmp	.+8      	; 0x6706 <tempHumSensor_measure+0x74>
	}
	else
	{
		printf("temHumSenor.c ---> Temperature & Humidity Sensor done measuring.\n");
    66fe:	8b e1       	ldi	r24, 0x1B	; 27
    6700:	96 e0       	ldi	r25, 0x06	; 6
    6702:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <puts>
	}
	
	//note: After the hih8120_measure() call the two wire inteface (TWI) will need minimum 1 ms to fetch the results from the sensor!
	vTaskDelay(pdMS_TO_TICKS(50));
    6706:	63 e0       	ldi	r22, 0x03	; 3
    6708:	70 e0       	ldi	r23, 0x00	; 0
    670a:	80 e0       	ldi	r24, 0x00	; 0
    670c:	90 e0       	ldi	r25, 0x00	; 0
    670e:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskDelay>
	
	//Checking if sensor is ready to return measurements.
	if (hih8120_isReady())
    6712:	b7 d4       	rcall	.+2414   	; 0x7082 <hih8120_isReady>
    6714:	88 23       	and	r24, r24
    6716:	59 f1       	breq	.+86     	; 0x676e <tempHumSensor_measure+0xdc>
	{
		printf("temHumSenor.c ---> HIH8120 is Ready.");
    6718:	8c e5       	ldi	r24, 0x5C	; 92
    671a:	96 e0       	ldi	r25, 0x06	; 6
    671c:	89 2f       	mov	r24, r25
    671e:	8f 93       	push	r24
    6720:	8c e5       	ldi	r24, 0x5C	; 92
    6722:	96 e0       	ldi	r25, 0x06	; 6
    6724:	8f 93       	push	r24
    6726:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    672a:	0f 90       	pop	r0
		humidity = hih8120_getHumidityPercent_x10();
    672c:	0f 90       	pop	r0
    672e:	e6 d4       	rcall	.+2508   	; 0x70fc <hih8120_getHumidityPercent_x10>
    6730:	90 93 c4 1b 	sts	0x1BC4, r25	; 0x801bc4 <humidity+0x1>
    6734:	80 93 c3 1b 	sts	0x1BC3, r24	; 0x801bc3 <humidity>
		printf("temHumSenor.c ---> Humidity Set.");
    6738:	81 e8       	ldi	r24, 0x81	; 129
    673a:	96 e0       	ldi	r25, 0x06	; 6
    673c:	89 2f       	mov	r24, r25
    673e:	8f 93       	push	r24
    6740:	81 e8       	ldi	r24, 0x81	; 129
    6742:	96 e0       	ldi	r25, 0x06	; 6
    6744:	8f 93       	push	r24
    6746:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    674a:	0f 90       	pop	r0
		temperature = hih8120_getTemperature_x10();
    674c:	0f 90       	pop	r0
    674e:	f9 d4       	rcall	.+2546   	; 0x7142 <hih8120_getTemperature_x10>
    6750:	90 93 c6 1b 	sts	0x1BC6, r25	; 0x801bc6 <temperature+0x1>
    6754:	80 93 c5 1b 	sts	0x1BC5, r24	; 0x801bc5 <temperature>
		printf("temHumSenor.c ---> Temperature Set.");
    6758:	82 ea       	ldi	r24, 0xA2	; 162
    675a:	96 e0       	ldi	r25, 0x06	; 6
    675c:	89 2f       	mov	r24, r25
    675e:	8f 93       	push	r24
    6760:	82 ea       	ldi	r24, 0xA2	; 162
    6762:	96 e0       	ldi	r25, 0x06	; 6
    6764:	8f 93       	push	r24
    6766:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    676a:	0f 90       	pop	r0
    676c:	0f 90       	pop	r0
	}
}
    676e:	00 00       	nop
    6770:	0f 90       	pop	r0
    6772:	0f 90       	pop	r0
    6774:	df 91       	pop	r29
    6776:	cf 91       	pop	r28
    6778:	08 95       	ret

0000677a <tempHumSensor_createTask>:

// Creates the temperature and humidity task.
void tempHumSensor_createTask(UBaseType_t priority){
    677a:	ef 92       	push	r14
    677c:	ff 92       	push	r15
    677e:	0f 93       	push	r16
    6780:	cf 93       	push	r28
    6782:	df 93       	push	r29
    6784:	1f 92       	push	r1
    6786:	cd b7       	in	r28, 0x3d	; 61
    6788:	de b7       	in	r29, 0x3e	; 62
    678a:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
    678c:	e1 2c       	mov	r14, r1
    678e:	f1 2c       	mov	r15, r1
    6790:	09 81       	ldd	r16, Y+1	; 0x01
    6792:	20 e0       	ldi	r18, 0x00	; 0
    6794:	30 e0       	ldi	r19, 0x00	; 0
    6796:	40 ec       	ldi	r20, 0xC0	; 192
    6798:	50 e0       	ldi	r21, 0x00	; 0
    679a:	66 ec       	ldi	r22, 0xC6	; 198
    679c:	76 e0       	ldi	r23, 0x06	; 6
    679e:	8b ed       	ldi	r24, 0xDB	; 219
    67a0:	93 e3       	ldi	r25, 0x33	; 51
    67a2:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskCreate>
	"TempHumTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
}
    67a6:	00 00       	nop
    67a8:	0f 90       	pop	r0
    67aa:	df 91       	pop	r29
    67ac:	cf 91       	pop	r28
    67ae:	0f 91       	pop	r16
    67b0:	ff 90       	pop	r15
    67b2:	ef 90       	pop	r14
    67b4:	08 95       	ret

000067b6 <tempHumSensor_task>:

//The temperature and humidity task.
void tempHumSensor_task(void *pvParameters){
    67b6:	cf 92       	push	r12
    67b8:	df 92       	push	r13
    67ba:	ef 92       	push	r14
    67bc:	ff 92       	push	r15
    67be:	0f 93       	push	r16
    67c0:	cf 93       	push	r28
    67c2:	df 93       	push	r29
    67c4:	00 d0       	rcall	.+0      	; 0x67c6 <tempHumSensor_task+0x10>
    67c6:	00 d0       	rcall	.+0      	; 0x67c8 <tempHumSensor_task+0x12>
    67c8:	cd b7       	in	r28, 0x3d	; 61
    67ca:	de b7       	in	r29, 0x3e	; 62
    67cc:	9e 83       	std	Y+6, r25	; 0x06
    67ce:	8d 83       	std	Y+5, r24	; 0x05
	while (1)
	{
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    67d0:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <measureEventGroup>
    67d4:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <measureEventGroup+0x1>
    67d8:	cc 24       	eor	r12, r12
    67da:	ca 94       	dec	r12
    67dc:	dc 2c       	mov	r13, r12
    67de:	76 01       	movw	r14, r12
    67e0:	01 e0       	ldi	r16, 0x01	; 1
    67e2:	21 e0       	ldi	r18, 0x01	; 1
    67e4:	44 e0       	ldi	r20, 0x04	; 4
    67e6:	50 e0       	ldi	r21, 0x00	; 0
    67e8:	60 e0       	ldi	r22, 0x00	; 0
    67ea:	70 e0       	ldi	r23, 0x00	; 0
    67ec:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <xEventGroupWaitBits>
    67f0:	dc 01       	movw	r26, r24
    67f2:	cb 01       	movw	r24, r22
    67f4:	89 83       	std	Y+1, r24	; 0x01
    67f6:	9a 83       	std	Y+2, r25	; 0x02
    67f8:	ab 83       	std	Y+3, r26	; 0x03
    67fa:	bc 83       	std	Y+4, r27	; 0x04
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    67fc:	89 81       	ldd	r24, Y+1	; 0x01
    67fe:	9a 81       	ldd	r25, Y+2	; 0x02
    6800:	ab 81       	ldd	r26, Y+3	; 0x03
    6802:	bc 81       	ldd	r27, Y+4	; 0x04
    6804:	84 70       	andi	r24, 0x04	; 4
    6806:	99 27       	eor	r25, r25
    6808:	aa 27       	eor	r26, r26
    680a:	bb 27       	eor	r27, r27
    680c:	89 2b       	or	r24, r25
    680e:	8a 2b       	or	r24, r26
    6810:	8b 2b       	or	r24, r27
    6812:	f1 f2       	breq	.-68     	; 0x67d0 <tempHumSensor_task+0x1a>
		{
			tempHumSensor_measure();
    6814:	3e df       	rcall	.-388    	; 0x6692 <tempHumSensor_measure>
			//After everything is done just setting 1 to ready bit so its now unblocked
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    6816:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <dataReadyEventGroup>
    681a:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <dataReadyEventGroup+0x1>
    681e:	48 e0       	ldi	r20, 0x08	; 8
    6820:	50 e0       	ldi	r21, 0x00	; 0
    6822:	60 e0       	ldi	r22, 0x00	; 0
    6824:	70 e0       	ldi	r23, 0x00	; 0
    6826:	0e 94 20 05 	call	0xa40	; 0xa40 <xEventGroupSetBits>
			//vTaskDelay(pdMS_TO_TICKS(51));
		}}
    682a:	d2 cf       	rjmp	.-92     	; 0x67d0 <tempHumSensor_task+0x1a>

0000682c <tempHumSensor_printReturnCode>:
	}


	//Prints a formatted return code.
	void tempHumSensor_printReturnCode(hih8120_driverReturnCode_t rc)
	{
    682c:	cf 93       	push	r28
    682e:	df 93       	push	r29
    6830:	00 d0       	rcall	.+0      	; 0x6832 <tempHumSensor_printReturnCode+0x6>
    6832:	cd b7       	in	r28, 0x3d	; 61
    6834:	de b7       	in	r29, 0x3e	; 62
    6836:	8b 83       	std	Y+3, r24	; 0x03
		char* returnCodeString;
		switch(rc){
    6838:	8b 81       	ldd	r24, Y+3	; 0x03
    683a:	88 2f       	mov	r24, r24
    683c:	90 e0       	ldi	r25, 0x00	; 0
    683e:	81 30       	cpi	r24, 0x01	; 1
    6840:	91 05       	cpc	r25, r1
    6842:	81 f0       	breq	.+32     	; 0x6864 <tempHumSensor_printReturnCode+0x38>
    6844:	82 30       	cpi	r24, 0x02	; 2
    6846:	91 05       	cpc	r25, r1
    6848:	1c f4       	brge	.+6      	; 0x6850 <tempHumSensor_printReturnCode+0x24>
    684a:	89 2b       	or	r24, r25
    684c:	39 f0       	breq	.+14     	; 0x685c <tempHumSensor_printReturnCode+0x30>
    684e:	16 c0       	rjmp	.+44     	; 0x687c <tempHumSensor_printReturnCode+0x50>
    6850:	82 30       	cpi	r24, 0x02	; 2
    6852:	91 05       	cpc	r25, r1
    6854:	59 f0       	breq	.+22     	; 0x686c <tempHumSensor_printReturnCode+0x40>
    6856:	03 97       	sbiw	r24, 0x03	; 3
    6858:	69 f0       	breq	.+26     	; 0x6874 <tempHumSensor_printReturnCode+0x48>
    685a:	10 c0       	rjmp	.+32     	; 0x687c <tempHumSensor_printReturnCode+0x50>
			case HIH8120_OK: returnCodeString = "HIH8120_OK - Everything went well ";
    685c:	82 ed       	ldi	r24, 0xD2	; 210
    685e:	96 e0       	ldi	r25, 0x06	; 6
    6860:	9a 83       	std	Y+2, r25	; 0x02
    6862:	89 83       	std	Y+1, r24	; 0x01
			case HIH8120_OUT_OF_HEAP: returnCodeString = "HIH8120_OUT_OF_HEAP - Not enough heap to initialize the driver";
    6864:	85 ef       	ldi	r24, 0xF5	; 245
    6866:	96 e0       	ldi	r25, 0x06	; 6
    6868:	9a 83       	std	Y+2, r25	; 0x02
    686a:	89 83       	std	Y+1, r24	; 0x01
			case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED - Driver must be initialize before use";
    686c:	84 e3       	ldi	r24, 0x34	; 52
    686e:	97 e0       	ldi	r25, 0x07	; 7
    6870:	9a 83       	std	Y+2, r25	; 0x02
    6872:	89 83       	std	Y+1, r24	; 0x01
			case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY - The two wire/I2C interface is busy";
    6874:	8a e7       	ldi	r24, 0x7A	; 122
    6876:	97 e0       	ldi	r25, 0x07	; 7
    6878:	9a 83       	std	Y+2, r25	; 0x02
    687a:	89 83       	std	Y+1, r24	; 0x01
		}
		printf("RETURNCODE: %s \n", returnCodeString);
    687c:	8a 81       	ldd	r24, Y+2	; 0x02
    687e:	8f 93       	push	r24
    6880:	89 81       	ldd	r24, Y+1	; 0x01
    6882:	8f 93       	push	r24
    6884:	80 eb       	ldi	r24, 0xB0	; 176
    6886:	97 e0       	ldi	r25, 0x07	; 7
    6888:	89 2f       	mov	r24, r25
    688a:	8f 93       	push	r24
    688c:	80 eb       	ldi	r24, 0xB0	; 176
    688e:	97 e0       	ldi	r25, 0x07	; 7
    6890:	8f 93       	push	r24
    6892:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6896:	0f 90       	pop	r0
    6898:	0f 90       	pop	r0
    689a:	0f 90       	pop	r0
    689c:	0f 90       	pop	r0
    689e:	00 00       	nop
    68a0:	0f 90       	pop	r0
    68a2:	0f 90       	pop	r0
    68a4:	0f 90       	pop	r0
    68a6:	df 91       	pop	r29
    68a8:	cf 91       	pop	r28
    68aa:	08 95       	ret

000068ac <initialize_event_groups>:
MessageBufferHandle_t uplinkMessageBufferHandle;
MessageBufferHandle_t downlinkMessageBufferHandle;
// SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
    68ac:	cf 93       	push	r28
    68ae:	df 93       	push	r29
    68b0:	cd b7       	in	r28, 0x3d	; 61
    68b2:	de b7       	in	r29, 0x3e	; 62
	dataReadyEventGroup = xEventGroupCreate();
    68b4:	0e 94 c8 03 	call	0x790	; 0x790 <xEventGroupCreate>
    68b8:	90 93 0d 1d 	sts	0x1D0D, r25	; 0x801d0d <dataReadyEventGroup+0x1>
    68bc:	80 93 0c 1d 	sts	0x1D0C, r24	; 0x801d0c <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    68c0:	0e 94 c8 03 	call	0x790	; 0x790 <xEventGroupCreate>
    68c4:	90 93 0f 1d 	sts	0x1D0F, r25	; 0x801d0f <measureEventGroup+0x1>
    68c8:	80 93 0e 1d 	sts	0x1D0E, r24	; 0x801d0e <measureEventGroup>
}
    68cc:	00 00       	nop
    68ce:	df 91       	pop	r29
    68d0:	cf 91       	pop	r28
    68d2:	08 95       	ret

000068d4 <initialize_message_buffers>:

void initialize_message_buffers(){
    68d4:	cf 93       	push	r28
    68d6:	df 93       	push	r29
    68d8:	cd b7       	in	r28, 0x3d	; 61
    68da:	de b7       	in	r29, 0x3e	; 62
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    68dc:	41 e0       	ldi	r20, 0x01	; 1
    68de:	60 e0       	ldi	r22, 0x00	; 0
    68e0:	70 e0       	ldi	r23, 0x00	; 0
    68e2:	8c e2       	ldi	r24, 0x2C	; 44
    68e4:	90 e0       	ldi	r25, 0x00	; 0
    68e6:	0e 94 03 11 	call	0x2206	; 0x2206 <xStreamBufferGenericCreate>
    68ea:	90 93 11 1d 	sts	0x1D11, r25	; 0x801d11 <uplinkMessageBufferHandle+0x1>
    68ee:	80 93 10 1d 	sts	0x1D10, r24	; 0x801d10 <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    68f2:	80 91 10 1d 	lds	r24, 0x1D10	; 0x801d10 <uplinkMessageBufferHandle>
    68f6:	90 91 11 1d 	lds	r25, 0x1D11	; 0x801d11 <uplinkMessageBufferHandle+0x1>
    68fa:	89 2b       	or	r24, r25
    68fc:	21 f4       	brne	.+8      	; 0x6906 <initialize_message_buffers+0x32>
		printf("initialize.c ---> Failed to create uplink message buffer.\n");
    68fe:	81 ec       	ldi	r24, 0xC1	; 193
    6900:	97 e0       	ldi	r25, 0x07	; 7
    6902:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    6906:	41 e0       	ldi	r20, 0x01	; 1
    6908:	60 e0       	ldi	r22, 0x00	; 0
    690a:	70 e0       	ldi	r23, 0x00	; 0
    690c:	8c e2       	ldi	r24, 0x2C	; 44
    690e:	90 e0       	ldi	r25, 0x00	; 0
    6910:	0e 94 03 11 	call	0x2206	; 0x2206 <xStreamBufferGenericCreate>
    6914:	90 93 13 1d 	sts	0x1D13, r25	; 0x801d13 <downlinkMessageBufferHandle+0x1>
    6918:	80 93 12 1d 	sts	0x1D12, r24	; 0x801d12 <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    691c:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <downlinkMessageBufferHandle>
    6920:	90 91 13 1d 	lds	r25, 0x1D13	; 0x801d13 <downlinkMessageBufferHandle+0x1>
    6924:	89 2b       	or	r24, r25
    6926:	21 f4       	brne	.+8      	; 0x6930 <initialize_message_buffers+0x5c>
		printf("initialize.c ---> Failed to create downlink message buffer.\n");
    6928:	8b ef       	ldi	r24, 0xFB	; 251
    692a:	97 e0       	ldi	r25, 0x07	; 7
    692c:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <puts>
	}
}
    6930:	00 00       	nop
    6932:	df 91       	pop	r29
    6934:	cf 91       	pop	r28
    6936:	08 95       	ret

00006938 <uplinkHandler_create>:

void uplinkHandler_task( void *pvParameters);
void uplinkHandler_createTask(UBaseType_t priority);

void uplinkHandler_create(UBaseType_t priority)
{
    6938:	cf 93       	push	r28
    693a:	df 93       	push	r29
    693c:	1f 92       	push	r1
    693e:	cd b7       	in	r28, 0x3d	; 61
    6940:	de b7       	in	r29, 0x3e	; 62
    6942:	89 83       	std	Y+1, r24	; 0x01
	uplinkHandler_createTask(priority);
    6944:	89 81       	ldd	r24, Y+1	; 0x01
    6946:	05 d0       	rcall	.+10     	; 0x6952 <uplinkHandler_createTask>
}
    6948:	00 00       	nop
    694a:	0f 90       	pop	r0
    694c:	df 91       	pop	r29
    694e:	cf 91       	pop	r28
    6950:	08 95       	ret

00006952 <uplinkHandler_createTask>:

void uplinkHandler_createTask(UBaseType_t priority){
    6952:	ef 92       	push	r14
    6954:	ff 92       	push	r15
    6956:	0f 93       	push	r16
    6958:	cf 93       	push	r28
    695a:	df 93       	push	r29
    695c:	1f 92       	push	r1
    695e:	cd b7       	in	r28, 0x3d	; 61
    6960:	de b7       	in	r29, 0x3e	; 62
    6962:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
    6964:	e1 2c       	mov	r14, r1
    6966:	f1 2c       	mov	r15, r1
    6968:	09 81       	ldd	r16, Y+1	; 0x01
    696a:	20 e0       	ldi	r18, 0x00	; 0
    696c:	30 e0       	ldi	r19, 0x00	; 0
    696e:	48 e8       	ldi	r20, 0x88	; 136
    6970:	51 e0       	ldi	r21, 0x01	; 1
    6972:	67 e3       	ldi	r22, 0x37	; 55
    6974:	78 e0       	ldi	r23, 0x08	; 8
    6976:	8e ee       	ldi	r24, 0xEE	; 238
    6978:	95 e3       	ldi	r25, 0x35	; 53
    697a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskCreate>
	,  "LRHandUplink"
	,  configMINIMAL_STACK_SIZE+200
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
    697e:	00 00       	nop
    6980:	0f 90       	pop	r0
    6982:	df 91       	pop	r29
    6984:	cf 91       	pop	r28
    6986:	0f 91       	pop	r16
    6988:	ff 90       	pop	r15
    698a:	ef 90       	pop	r14
    698c:	08 95       	ret

0000698e <_lora_setup>:

static void _lora_setup(void)
{
    698e:	cf 93       	push	r28
    6990:	df 93       	push	r29
    6992:	cd b7       	in	r28, 0x3d	; 61
    6994:	de b7       	in	r29, 0x3e	; 62
    6996:	66 97       	sbiw	r28, 0x16	; 22
    6998:	0f b6       	in	r0, 0x3f	; 63
    699a:	f8 94       	cli
    699c:	de bf       	out	0x3e, r29	; 62
    699e:	0f be       	out	0x3f, r0	; 63
    69a0:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    69a2:	81 e0       	ldi	r24, 0x01	; 1
    69a4:	0e 94 1e 43 	call	0x863c	; 0x863c <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    69a8:	43 d5       	rcall	.+2694   	; 0x7430 <lora_driver_rn2483FactoryReset>
    69aa:	bf d7       	rcall	.+3966   	; 0x792a <lora_driver_mapReturnCodeToText>
    69ac:	29 2f       	mov	r18, r25
    69ae:	2f 93       	push	r18
    69b0:	8f 93       	push	r24
    69b2:	84 e4       	ldi	r24, 0x44	; 68
    69b4:	98 e0       	ldi	r25, 0x08	; 8
    69b6:	89 2f       	mov	r24, r25
    69b8:	8f 93       	push	r24
    69ba:	84 e4       	ldi	r24, 0x44	; 68
    69bc:	98 e0       	ldi	r25, 0x08	; 8
    69be:	8f 93       	push	r24
    69c0:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    69c4:	0f 90       	pop	r0
    69c6:	0f 90       	pop	r0
    69c8:	0f 90       	pop	r0
    69ca:	0f 90       	pop	r0
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    69cc:	af d6       	rcall	.+3422   	; 0x772c <lora_driver_configureToEu868>
    69ce:	ad d7       	rcall	.+3930   	; 0x792a <lora_driver_mapReturnCodeToText>
    69d0:	29 2f       	mov	r18, r25
    69d2:	2f 93       	push	r18
    69d4:	8f 93       	push	r24
    69d6:	87 e5       	ldi	r24, 0x57	; 87
    69d8:	98 e0       	ldi	r25, 0x08	; 8
    69da:	89 2f       	mov	r24, r25
    69dc:	8f 93       	push	r24
    69de:	87 e5       	ldi	r24, 0x57	; 87
    69e0:	98 e0       	ldi	r25, 0x08	; 8
    69e2:	8f 93       	push	r24
    69e4:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    69e8:	0f 90       	pop	r0
    69ea:	0f 90       	pop	r0
    69ec:	0f 90       	pop	r0
    69ee:	0f 90       	pop	r0
    69f0:	ce 01       	movw	r24, r28
    69f2:	03 96       	adiw	r24, 0x03	; 3

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    69f4:	2f d5       	rcall	.+2654   	; 0x7454 <lora_driver_getRn2483Hweui>
    69f6:	8a 83       	std	Y+2, r24	; 0x02
    69f8:	8a 81       	ldd	r24, Y+2	; 0x02
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    69fa:	97 d7       	rcall	.+3886   	; 0x792a <lora_driver_mapReturnCodeToText>
    69fc:	9c 01       	movw	r18, r24
    69fe:	ce 01       	movw	r24, r28
    6a00:	03 96       	adiw	r24, 0x03	; 3
    6a02:	49 2f       	mov	r20, r25
    6a04:	4f 93       	push	r20
    6a06:	8f 93       	push	r24
    6a08:	83 2f       	mov	r24, r19
    6a0a:	8f 93       	push	r24
    6a0c:	82 2f       	mov	r24, r18
    6a0e:	8f 93       	push	r24
    6a10:	80 e7       	ldi	r24, 0x70	; 112
    6a12:	98 e0       	ldi	r25, 0x08	; 8
    6a14:	89 2f       	mov	r24, r25
    6a16:	8f 93       	push	r24
    6a18:	80 e7       	ldi	r24, 0x70	; 112
    6a1a:	98 e0       	ldi	r25, 0x08	; 8
    6a1c:	8f 93       	push	r24
    6a1e:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6a22:	0f 90       	pop	r0
    6a24:	0f 90       	pop	r0
    6a26:	0f 90       	pop	r0
    6a28:	0f 90       	pop	r0
    6a2a:	0f 90       	pop	r0
    6a2c:	0f 90       	pop	r0
    6a2e:	ce 01       	movw	r24, r28

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    6a30:	03 96       	adiw	r24, 0x03	; 3
    6a32:	2c d5       	rcall	.+2648   	; 0x748c <lora_driver_setDeviceIdentifier>
    6a34:	7a d7       	rcall	.+3828   	; 0x792a <lora_driver_mapReturnCodeToText>
    6a36:	29 2f       	mov	r18, r25
    6a38:	2f 93       	push	r18
    6a3a:	8f 93       	push	r24
    6a3c:	ce 01       	movw	r24, r28
    6a3e:	03 96       	adiw	r24, 0x03	; 3
    6a40:	29 2f       	mov	r18, r25
    6a42:	2f 93       	push	r18
    6a44:	8f 93       	push	r24
    6a46:	84 e8       	ldi	r24, 0x84	; 132
    6a48:	98 e0       	ldi	r25, 0x08	; 8
    6a4a:	89 2f       	mov	r24, r25
    6a4c:	8f 93       	push	r24
    6a4e:	84 e8       	ldi	r24, 0x84	; 132
    6a50:	98 e0       	ldi	r25, 0x08	; 8
    6a52:	8f 93       	push	r24
    6a54:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6a58:	0f 90       	pop	r0
    6a5a:	0f 90       	pop	r0
    6a5c:	0f 90       	pop	r0
    6a5e:	0f 90       	pop	r0
    6a60:	0f 90       	pop	r0
    6a62:	0f 90       	pop	r0
    6a64:	ce 01       	movw	r24, r28
    6a66:	03 96       	adiw	r24, 0x03	; 3
    6a68:	ac 01       	movw	r20, r24

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    6a6a:	69 e9       	ldi	r22, 0x99	; 153
    6a6c:	78 e0       	ldi	r23, 0x08	; 8
    6a6e:	8a eb       	ldi	r24, 0xBA	; 186
    6a70:	98 e0       	ldi	r25, 0x08	; 8
    6a72:	3a d7       	rcall	.+3700   	; 0x78e8 <lora_driver_setOtaaIdentity>
    6a74:	5a d7       	rcall	.+3764   	; 0x792a <lora_driver_mapReturnCodeToText>
    6a76:	29 2f       	mov	r18, r25
    6a78:	2f 93       	push	r18
    6a7a:	8f 93       	push	r24
    6a7c:	ce 01       	movw	r24, r28
    6a7e:	03 96       	adiw	r24, 0x03	; 3
    6a80:	29 2f       	mov	r18, r25
    6a82:	2f 93       	push	r18
    6a84:	8f 93       	push	r24
    6a86:	89 e9       	ldi	r24, 0x99	; 153
    6a88:	98 e0       	ldi	r25, 0x08	; 8
    6a8a:	89 2f       	mov	r24, r25
    6a8c:	8f 93       	push	r24
    6a8e:	89 e9       	ldi	r24, 0x99	; 153
    6a90:	98 e0       	ldi	r25, 0x08	; 8
    6a92:	8f 93       	push	r24
    6a94:	8a eb       	ldi	r24, 0xBA	; 186
    6a96:	98 e0       	ldi	r25, 0x08	; 8
    6a98:	89 2f       	mov	r24, r25
    6a9a:	8f 93       	push	r24
    6a9c:	8a eb       	ldi	r24, 0xBA	; 186
    6a9e:	98 e0       	ldi	r25, 0x08	; 8
    6aa0:	8f 93       	push	r24
    6aa2:	8b ec       	ldi	r24, 0xCB	; 203
    6aa4:	98 e0       	ldi	r25, 0x08	; 8
    6aa6:	89 2f       	mov	r24, r25
    6aa8:	8f 93       	push	r24
    6aaa:	8b ec       	ldi	r24, 0xCB	; 203
    6aac:	98 e0       	ldi	r25, 0x08	; 8
    6aae:	8f 93       	push	r24
    6ab0:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6ab4:	8d b7       	in	r24, 0x3d	; 61
    6ab6:	9e b7       	in	r25, 0x3e	; 62
    6ab8:	0a 96       	adiw	r24, 0x0a	; 10
    6aba:	0f b6       	in	r0, 0x3f	; 63
    6abc:	f8 94       	cli
    6abe:	de bf       	out	0x3e, r29	; 62
    6ac0:	0f be       	out	0x3f, r0	; 63
    6ac2:	cd bf       	out	0x3d, r28	; 61
    6ac4:	16 d5       	rcall	.+2604   	; 0x74f2 <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    6ac6:	31 d7       	rcall	.+3682   	; 0x792a <lora_driver_mapReturnCodeToText>
    6ac8:	29 2f       	mov	r18, r25
    6aca:	2f 93       	push	r18
    6acc:	8f 93       	push	r24
    6ace:	81 e0       	ldi	r24, 0x01	; 1
    6ad0:	99 e0       	ldi	r25, 0x09	; 9
    6ad2:	89 2f       	mov	r24, r25
    6ad4:	8f 93       	push	r24
    6ad6:	81 e0       	ldi	r24, 0x01	; 1
    6ad8:	99 e0       	ldi	r25, 0x09	; 9
    6ada:	8f 93       	push	r24
    6adc:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6ae0:	0f 90       	pop	r0
    6ae2:	0f 90       	pop	r0
    6ae4:	0f 90       	pop	r0
    6ae6:	0f 90       	pop	r0
    6ae8:	81 e0       	ldi	r24, 0x01	; 1

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    6aea:	fd d5       	rcall	.+3066   	; 0x76e6 <lora_driver_setAdaptiveDataRate>
    6aec:	1e d7       	rcall	.+3644   	; 0x792a <lora_driver_mapReturnCodeToText>
    6aee:	29 2f       	mov	r18, r25
    6af0:	2f 93       	push	r18
    6af2:	8f 93       	push	r24
    6af4:	80 e1       	ldi	r24, 0x10	; 16
    6af6:	99 e0       	ldi	r25, 0x09	; 9
    6af8:	89 2f       	mov	r24, r25
    6afa:	8f 93       	push	r24
    6afc:	80 e1       	ldi	r24, 0x10	; 16
    6afe:	99 e0       	ldi	r25, 0x09	; 9
    6b00:	8f 93       	push	r24
    6b02:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6b06:	0f 90       	pop	r0
    6b08:	0f 90       	pop	r0
    6b0a:	0f 90       	pop	r0
    6b0c:	0f 90       	pop	r0
    6b0e:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    6b10:	91 e0       	ldi	r25, 0x01	; 1
    6b12:	f4 d5       	rcall	.+3048   	; 0x76fc <lora_driver_setReceiveDelay>
    6b14:	0a d7       	rcall	.+3604   	; 0x792a <lora_driver_mapReturnCodeToText>
    6b16:	29 2f       	mov	r18, r25
    6b18:	2f 93       	push	r18
    6b1a:	8f 93       	push	r24
    6b1c:	81 e0       	ldi	r24, 0x01	; 1
    6b1e:	8f 93       	push	r24
    6b20:	84 ef       	ldi	r24, 0xF4	; 244
    6b22:	8f 93       	push	r24
    6b24:	81 e3       	ldi	r24, 0x31	; 49
    6b26:	99 e0       	ldi	r25, 0x09	; 9
    6b28:	89 2f       	mov	r24, r25
    6b2a:	8f 93       	push	r24
    6b2c:	81 e3       	ldi	r24, 0x31	; 49
    6b2e:	99 e0       	ldi	r25, 0x09	; 9
    6b30:	8f 93       	push	r24
    6b32:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6b36:	0f 90       	pop	r0
    6b38:	0f 90       	pop	r0
    6b3a:	0f 90       	pop	r0
    6b3c:	0f 90       	pop	r0
    6b3e:	0f 90       	pop	r0
    6b40:	0f 90       	pop	r0
    6b42:	8a e0       	ldi	r24, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    6b44:	89 83       	std	Y+1, r24	; 0x01
    6b46:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    6b48:	da d4       	rcall	.+2484   	; 0x74fe <lora_driver_join>
    6b4a:	8a 83       	std	Y+2, r24	; 0x02
    6b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b4e:	ed d6       	rcall	.+3546   	; 0x792a <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    6b50:	9c 01       	movw	r18, r24
    6b52:	89 81       	ldd	r24, Y+1	; 0x01
    6b54:	88 2f       	mov	r24, r24
    6b56:	90 e0       	ldi	r25, 0x00	; 0
    6b58:	43 2f       	mov	r20, r19
    6b5a:	4f 93       	push	r20
    6b5c:	2f 93       	push	r18
    6b5e:	29 2f       	mov	r18, r25
    6b60:	2f 93       	push	r18
    6b62:	8f 93       	push	r24
    6b64:	81 e5       	ldi	r24, 0x51	; 81
    6b66:	99 e0       	ldi	r25, 0x09	; 9
    6b68:	89 2f       	mov	r24, r25
    6b6a:	8f 93       	push	r24
    6b6c:	81 e5       	ldi	r24, 0x51	; 81
    6b6e:	99 e0       	ldi	r25, 0x09	; 9
    6b70:	8f 93       	push	r24
    6b72:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6b76:	0f 90       	pop	r0
    6b78:	0f 90       	pop	r0
    6b7a:	0f 90       	pop	r0
    6b7c:	0f 90       	pop	r0
    6b7e:	0f 90       	pop	r0
    6b80:	0f 90       	pop	r0
    6b82:	8a 81       	ldd	r24, Y+2	; 0x02
    6b84:	88 30       	cpi	r24, 0x08	; 8
    6b86:	81 f0       	breq	.+32     	; 0x6ba8 <_lora_setup+0x21a>

		if ( rc != LORA_ACCEPTED)
    6b88:	80 e0       	ldi	r24, 0x00	; 0
    6b8a:	0e 94 82 43 	call	0x8704	; 0x8704 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    6b8e:	66 e3       	ldi	r22, 0x36	; 54
    6b90:	71 e0       	ldi	r23, 0x01	; 1
    6b92:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    6b94:	90 e0       	ldi	r25, 0x00	; 0
    6b96:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskDelay>
    6b9a:	89 81       	ldd	r24, Y+1	; 0x01
    6b9c:	81 50       	subi	r24, 0x01	; 1
    6b9e:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    6ba0:	89 81       	ldd	r24, Y+1	; 0x01
    6ba2:	88 23       	and	r24, r24
    6ba4:	81 f6       	brne	.-96     	; 0x6b46 <_lora_setup+0x1b8>
    6ba6:	01 c0       	rjmp	.+2      	; 0x6baa <_lora_setup+0x21c>
    6ba8:	00 00       	nop
    6baa:	8a 81       	ldd	r24, Y+2	; 0x02
    6bac:	88 30       	cpi	r24, 0x08	; 8
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
		}
		else
		{
			break;
    6bae:	21 f4       	brne	.+8      	; 0x6bb8 <_lora_setup+0x22a>
		}
	} while (--maxJoinTriesLeft);

	if (rc == LORA_ACCEPTED)
    6bb0:	81 e0       	ldi	r24, 0x01	; 1
    6bb2:	0e 94 64 43 	call	0x86c8	; 0x86c8 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    6bb6:	09 c0       	rjmp	.+18     	; 0x6bca <_lora_setup+0x23c>
    6bb8:	81 e0       	ldi	r24, 0x01	; 1
    6bba:	0e 94 73 43 	call	0x86e6	; 0x86e6 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    6bbe:	80 e0       	ldi	r24, 0x00	; 0
    6bc0:	0e 94 41 43 	call	0x8682	; 0x8682 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    6bc4:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
    6bc8:	fd cf       	rjmp	.-6      	; 0x6bc4 <_lora_setup+0x236>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    6bca:	66 96       	adiw	r28, 0x16	; 22
    6bcc:	0f b6       	in	r0, 0x3f	; 63
		}
    6bce:	f8 94       	cli
	}
}
    6bd0:	de bf       	out	0x3e, r29	; 62
    6bd2:	0f be       	out	0x3f, r0	; 63
    6bd4:	cd bf       	out	0x3d, r28	; 61
    6bd6:	df 91       	pop	r29
    6bd8:	cf 91       	pop	r28
    6bda:	08 95       	ret

00006bdc <uplinkHandler_task>:
    6bdc:	0f 93       	push	r16
    6bde:	1f 93       	push	r17
    6be0:	cf 93       	push	r28

void uplinkHandler_task( void *pvParameters )
{
    6be2:	df 93       	push	r29
    6be4:	cd b7       	in	r28, 0x3d	; 61
    6be6:	de b7       	in	r29, 0x3e	; 62
    6be8:	2a 97       	sbiw	r28, 0x0a	; 10
    6bea:	0f b6       	in	r0, 0x3f	; 63
    6bec:	f8 94       	cli
    6bee:	de bf       	out	0x3e, r29	; 62
    6bf0:	0f be       	out	0x3f, r0	; 63
    6bf2:	cd bf       	out	0x3d, r28	; 61
    6bf4:	9a 87       	std	Y+10, r25	; 0x0a
    6bf6:	89 87       	std	Y+9, r24	; 0x09
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    6bf8:	81 e0       	ldi	r24, 0x01	; 1
    6bfa:	0c d4       	rcall	.+2072   	; 0x7414 <lora_driver_resetRn2483>
	vTaskDelay(2);
    6bfc:	62 e0       	ldi	r22, 0x02	; 2
    6bfe:	70 e0       	ldi	r23, 0x00	; 0
    6c00:	80 e0       	ldi	r24, 0x00	; 0
    6c02:	90 e0       	ldi	r25, 0x00	; 0
    6c04:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskDelay>
	lora_driver_resetRn2483(0);
    6c08:	80 e0       	ldi	r24, 0x00	; 0
    6c0a:	04 d4       	rcall	.+2056   	; 0x7414 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    6c0c:	66 e9       	ldi	r22, 0x96	; 150
    6c0e:	70 e0       	ldi	r23, 0x00	; 0
    6c10:	80 e0       	ldi	r24, 0x00	; 0
    6c12:	90 e0       	ldi	r25, 0x00	; 0
    6c14:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    6c18:	b6 d3       	rcall	.+1900   	; 0x7386 <lora_driver_flushBuffers>

	_lora_setup();
    6c1a:	b9 de       	rcall	.-654    	; 0x698e <_lora_setup>
    6c1c:	1a 82       	std	Y+2, r1	; 0x02
	
	for(;;)
	{

		int16_t tem = 0;
    6c1e:	19 82       	std	Y+1, r1	; 0x01
    6c20:	1c 82       	std	Y+4, r1	; 0x04
		uint16_t hum = 0;
    6c22:	1b 82       	std	Y+3, r1	; 0x03
    6c24:	1e 82       	std	Y+6, r1	; 0x06
		uint16_t co2 = 0;
    6c26:	1d 82       	std	Y+5, r1	; 0x05
    6c28:	1f 82       	std	Y+7, r1	; 0x07
		uint8_t status = 0;
    6c2a:	18 86       	std	Y+8, r1	; 0x08
		uint8_t xReceivedBytes = 0;
    6c2c:	80 91 10 1d 	lds	r24, 0x1D10	; 0x801d10 <uplinkMessageBufferHandle>
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    6c30:	90 91 11 1d 	lds	r25, 0x1D11	; 0x801d11 <uplinkMessageBufferHandle+0x1>
    6c34:	0f ef       	ldi	r16, 0xFF	; 255
    6c36:	1f ef       	ldi	r17, 0xFF	; 255
    6c38:	98 01       	movw	r18, r16
    6c3a:	46 e1       	ldi	r20, 0x16	; 22
    6c3c:	50 e0       	ldi	r21, 0x00	; 0
    6c3e:	67 ec       	ldi	r22, 0xC7	; 199
    6c40:	7b e1       	ldi	r23, 0x1B	; 27
    6c42:	0e 94 db 13 	call	0x27b6	; 0x27b6 <xStreamBufferReceive>
    6c46:	88 87       	std	Y+8, r24	; 0x08
    6c48:	88 85       	ldd	r24, Y+8	; 0x08
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    6c4a:	88 23       	and	r24, r24
    6c4c:	39 f3       	breq	.-50     	; 0x6c1c <uplinkHandler_task+0x40>
    6c4e:	80 91 c9 1b 	lds	r24, 0x1BC9	; 0x801bc9 <_uplink_payload+0x2>
			// 				printf("Number of bytes read from the message buffer: %d\n", xReceivedBytes);
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    6c52:	88 2f       	mov	r24, r24
    6c54:	90 e0       	ldi	r25, 0x00	; 0
    6c56:	38 2f       	mov	r19, r24
    6c58:	22 27       	eor	r18, r18
    6c5a:	80 91 ca 1b 	lds	r24, 0x1BCA	; 0x801bca <_uplink_payload+0x3>
    6c5e:	88 2f       	mov	r24, r24
    6c60:	90 e0       	ldi	r25, 0x00	; 0
    6c62:	82 2b       	or	r24, r18
    6c64:	93 2b       	or	r25, r19
    6c66:	9a 83       	std	Y+2, r25	; 0x02
    6c68:	89 83       	std	Y+1, r24	; 0x01
    6c6a:	80 91 cb 1b 	lds	r24, 0x1BCB	; 0x801bcb <_uplink_payload+0x4>
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    6c6e:	88 2f       	mov	r24, r24
    6c70:	90 e0       	ldi	r25, 0x00	; 0
    6c72:	38 2f       	mov	r19, r24
    6c74:	22 27       	eor	r18, r18
    6c76:	80 91 cc 1b 	lds	r24, 0x1BCC	; 0x801bcc <_uplink_payload+0x5>
    6c7a:	88 2f       	mov	r24, r24
    6c7c:	90 e0       	ldi	r25, 0x00	; 0
    6c7e:	82 2b       	or	r24, r18
    6c80:	93 2b       	or	r25, r19
    6c82:	9c 83       	std	Y+4, r25	; 0x04
    6c84:	8b 83       	std	Y+3, r24	; 0x03
    6c86:	80 91 cd 1b 	lds	r24, 0x1BCD	; 0x801bcd <_uplink_payload+0x6>
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    6c8a:	88 2f       	mov	r24, r24
    6c8c:	90 e0       	ldi	r25, 0x00	; 0
    6c8e:	38 2f       	mov	r19, r24
    6c90:	22 27       	eor	r18, r18
    6c92:	80 91 ce 1b 	lds	r24, 0x1BCE	; 0x801bce <_uplink_payload+0x7>
    6c96:	88 2f       	mov	r24, r24
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	82 2b       	or	r24, r18
    6c9c:	93 2b       	or	r25, r19
    6c9e:	9e 83       	std	Y+6, r25	; 0x06
    6ca0:	8d 83       	std	Y+5, r24	; 0x05
    6ca2:	80 91 cf 1b 	lds	r24, 0x1BCF	; 0x801bcf <_uplink_payload+0x8>
			status = _uplink_payload.bytes[6];
    6ca6:	8f 83       	std	Y+7, r24	; 0x07
    6ca8:	8a 81       	ldd	r24, Y+2	; 0x02
			
			printf("Temperature sent: %d\n", tem);
    6caa:	8f 93       	push	r24
    6cac:	89 81       	ldd	r24, Y+1	; 0x01
    6cae:	8f 93       	push	r24
    6cb0:	81 e7       	ldi	r24, 0x71	; 113
    6cb2:	99 e0       	ldi	r25, 0x09	; 9
    6cb4:	89 2f       	mov	r24, r25
    6cb6:	8f 93       	push	r24
    6cb8:	81 e7       	ldi	r24, 0x71	; 113
    6cba:	99 e0       	ldi	r25, 0x09	; 9
    6cbc:	8f 93       	push	r24
    6cbe:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6cc2:	0f 90       	pop	r0
    6cc4:	0f 90       	pop	r0
    6cc6:	0f 90       	pop	r0
    6cc8:	0f 90       	pop	r0
    6cca:	8c 81       	ldd	r24, Y+4	; 0x04
			printf("Humidity sent: %d\n", hum);
    6ccc:	8f 93       	push	r24
    6cce:	8b 81       	ldd	r24, Y+3	; 0x03
    6cd0:	8f 93       	push	r24
    6cd2:	87 e8       	ldi	r24, 0x87	; 135
    6cd4:	99 e0       	ldi	r25, 0x09	; 9
    6cd6:	89 2f       	mov	r24, r25
    6cd8:	8f 93       	push	r24
    6cda:	87 e8       	ldi	r24, 0x87	; 135
    6cdc:	99 e0       	ldi	r25, 0x09	; 9
    6cde:	8f 93       	push	r24
    6ce0:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6ce4:	0f 90       	pop	r0
    6ce6:	0f 90       	pop	r0
    6ce8:	0f 90       	pop	r0
    6cea:	0f 90       	pop	r0
    6cec:	8e 81       	ldd	r24, Y+6	; 0x06
			printf("CO2 sent: %d\n", co2);
    6cee:	8f 93       	push	r24
    6cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    6cf2:	8f 93       	push	r24
    6cf4:	8a e9       	ldi	r24, 0x9A	; 154
    6cf6:	99 e0       	ldi	r25, 0x09	; 9
    6cf8:	89 2f       	mov	r24, r25
    6cfa:	8f 93       	push	r24
    6cfc:	8a e9       	ldi	r24, 0x9A	; 154
    6cfe:	99 e0       	ldi	r25, 0x09	; 9
    6d00:	8f 93       	push	r24
    6d02:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6d06:	0f 90       	pop	r0
    6d08:	0f 90       	pop	r0
    6d0a:	0f 90       	pop	r0
    6d0c:	0f 90       	pop	r0
    6d0e:	8f 81       	ldd	r24, Y+7	; 0x07
			printf("Status sent: %d\n", status);
    6d10:	88 2f       	mov	r24, r24
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	29 2f       	mov	r18, r25
    6d16:	2f 93       	push	r18
    6d18:	8f 93       	push	r24
    6d1a:	88 ea       	ldi	r24, 0xA8	; 168
    6d1c:	99 e0       	ldi	r25, 0x09	; 9
    6d1e:	89 2f       	mov	r24, r25
    6d20:	8f 93       	push	r24
    6d22:	88 ea       	ldi	r24, 0xA8	; 168
    6d24:	99 e0       	ldi	r25, 0x09	; 9
    6d26:	8f 93       	push	r24
    6d28:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6d2c:	0f 90       	pop	r0
    6d2e:	0f 90       	pop	r0
    6d30:	0f 90       	pop	r0
    6d32:	0f 90       	pop	r0
    6d34:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    6d36:	0e 94 94 43 	call	0x8728	; 0x8728 <status_leds_shortPuls>
			//WHAT THE HELL DOES THE FALSE DO
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    6d3a:	67 ec       	ldi	r22, 0xC7	; 199
    6d3c:	7b e1       	ldi	r23, 0x1B	; 27
    6d3e:	80 e0       	ldi	r24, 0x00	; 0
    6d40:	07 d4       	rcall	.+2062   	; 0x7550 <lora_driver_sendUploadMessage>
    6d42:	f3 d5       	rcall	.+3046   	; 0x792a <lora_driver_mapReturnCodeToText>
    6d44:	29 2f       	mov	r18, r25
    6d46:	2f 93       	push	r18
    6d48:	8f 93       	push	r24
    6d4a:	89 eb       	ldi	r24, 0xB9	; 185
    6d4c:	99 e0       	ldi	r25, 0x09	; 9
    6d4e:	89 2f       	mov	r24, r25
    6d50:	8f 93       	push	r24
    6d52:	89 eb       	ldi	r24, 0xB9	; 185
    6d54:	99 e0       	ldi	r25, 0x09	; 9
    6d56:	8f 93       	push	r24
    6d58:	0e 94 17 4d 	call	0x9a2e	; 0x9a2e <printf>
    6d5c:	0f 90       	pop	r0
    6d5e:	0f 90       	pop	r0
    6d60:	0f 90       	pop	r0
    6d62:	0f 90       	pop	r0
    6d64:	5b cf       	rjmp	.-330    	; 0x6c1c <uplinkHandler_task+0x40>

00006d66 <main_create>:
#include "Sensors/tempHumSensor.h"
#include "uplinkHandler.h"
#include "downlinkHandler.h"


void main_create(){
    6d66:	cf 93       	push	r28
    6d68:	df 93       	push	r29
    6d6a:	cd b7       	in	r28, 0x3d	; 61
    6d6c:	de b7       	in	r29, 0x3e	; 62
	uplinkHandler_create(4);
    6d6e:	84 e0       	ldi	r24, 0x04	; 4
    6d70:	e3 dd       	rcall	.-1082   	; 0x6938 <uplinkHandler_create>
	downlinkHandler_create(4);
    6d72:	84 e0       	ldi	r24, 0x04	; 4
    6d74:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <downlinkHandler_create>
	application_create(3);
    6d78:	83 e0       	ldi	r24, 0x03	; 3
    6d7a:	0e 94 a6 01 	call	0x34c	; 0x34c <application_create>
	co2Sensor_create(1);
    6d7e:	81 e0       	ldi	r24, 0x01	; 1
    6d80:	4b db       	rcall	.-2410   	; 0x6418 <co2Sensor_create>
	tempHumSensor_create(1);
    6d82:	81 e0       	ldi	r24, 0x01	; 1
    6d84:	41 dc       	rcall	.-1918   	; 0x6608 <tempHumSensor_create>
    6d86:	82 e0       	ldi	r24, 0x02	; 2
	windowController_create(2);
    6d88:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <windowController_create>
    6d8c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <servoController_create>
	servoController_create();
    6d90:	00 00       	nop
}
    6d92:	df 91       	pop	r29
    6d94:	cf 91       	pop	r28
    6d96:	08 95       	ret

00006d98 <initializeSystem>:
    6d98:	cf 93       	push	r28
void initializeSystem()
{
    6d9a:	df 93       	push	r29
    6d9c:	cd b7       	in	r28, 0x3d	; 61
    6d9e:	de b7       	in	r29, 0x3e	; 62
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    6da0:	80 e0       	ldi	r24, 0x00	; 0
    6da2:	0e 94 c9 41 	call	0x8392	; 0x8392 <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    6da6:	85 e0       	ldi	r24, 0x05	; 5
    6da8:	0e 94 d0 42 	call	0x85a0	; 0x85a0 <status_leds_initialise>

	initialize_event_groups();
    6dac:	7f dd       	rcall	.-1282   	; 0x68ac <initialize_event_groups>
	initialize_message_buffers();
    6dae:	92 dd       	rcall	.-1244   	; 0x68d4 <initialize_message_buffers>
    6db0:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <downlinkMessageBufferHandle>
// 	initialize_semaphore();
	
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    6db4:	90 91 13 1d 	lds	r25, 0x1D13	; 0x801d13 <downlinkMessageBufferHandle+0x1>
    6db8:	bc 01       	movw	r22, r24
    6dba:	81 e0       	ldi	r24, 0x01	; 1
    6dbc:	eb d2       	rcall	.+1494   	; 0x7394 <lora_driver_initialise>
	main_create();
    6dbe:	d3 df       	rcall	.-90     	; 0x6d66 <main_create>
    6dc0:	00 00       	nop
	
}
    6dc2:	df 91       	pop	r29
    6dc4:	cf 91       	pop	r28
    6dc6:	08 95       	ret

00006dc8 <main>:
    6dc8:	cf 93       	push	r28

/*-----------------------------------------------------------*/
int main(void)
{
    6dca:	df 93       	push	r29
    6dcc:	cd b7       	in	r28, 0x3d	; 61
    6dce:	de b7       	in	r29, 0x3e	; 62
	initializeSystem(); // Must be done as the very first thing!!
    6dd0:	e3 df       	rcall	.-58     	; 0x6d98 <initializeSystem>
	printf("Program Started!!\n");
    6dd2:	8e ec       	ldi	r24, 0xCE	; 206
    6dd4:	99 e0       	ldi	r25, 0x09	; 9
    6dd6:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    6dda:	0e 94 df 19 	call	0x33be	; 0x33be <vTaskStartScheduler>

	/* Replace with your application code */
	while (1)
	{
	}
    6dde:	ff cf       	rjmp	.-2      	; 0x6dde <main+0x16>

00006de0 <__cmpsf2>:
    6de0:	2f d0       	rcall	.+94     	; 0x6e40 <__fp_cmp>
    6de2:	08 f4       	brcc	.+2      	; 0x6de6 <__cmpsf2+0x6>
    6de4:	81 e0       	ldi	r24, 0x01	; 1
    6de6:	08 95       	ret

00006de8 <__fixunssfsi>:
    6de8:	57 d0       	rcall	.+174    	; 0x6e98 <__fp_splitA>
    6dea:	88 f0       	brcs	.+34     	; 0x6e0e <__fixunssfsi+0x26>
    6dec:	9f 57       	subi	r25, 0x7F	; 127
    6dee:	90 f0       	brcs	.+36     	; 0x6e14 <__fixunssfsi+0x2c>
    6df0:	b9 2f       	mov	r27, r25
    6df2:	99 27       	eor	r25, r25
    6df4:	b7 51       	subi	r27, 0x17	; 23
    6df6:	a0 f0       	brcs	.+40     	; 0x6e20 <__fixunssfsi+0x38>
    6df8:	d1 f0       	breq	.+52     	; 0x6e2e <__fixunssfsi+0x46>
    6dfa:	66 0f       	add	r22, r22
    6dfc:	77 1f       	adc	r23, r23
    6dfe:	88 1f       	adc	r24, r24
    6e00:	99 1f       	adc	r25, r25
    6e02:	1a f0       	brmi	.+6      	; 0x6e0a <__fixunssfsi+0x22>
    6e04:	ba 95       	dec	r27
    6e06:	c9 f7       	brne	.-14     	; 0x6dfa <__fixunssfsi+0x12>
    6e08:	12 c0       	rjmp	.+36     	; 0x6e2e <__fixunssfsi+0x46>
    6e0a:	b1 30       	cpi	r27, 0x01	; 1
    6e0c:	81 f0       	breq	.+32     	; 0x6e2e <__fixunssfsi+0x46>
    6e0e:	5e d0       	rcall	.+188    	; 0x6ecc <__fp_zero>
    6e10:	b1 e0       	ldi	r27, 0x01	; 1
    6e12:	08 95       	ret
    6e14:	5b c0       	rjmp	.+182    	; 0x6ecc <__fp_zero>
    6e16:	67 2f       	mov	r22, r23
    6e18:	78 2f       	mov	r23, r24
    6e1a:	88 27       	eor	r24, r24
    6e1c:	b8 5f       	subi	r27, 0xF8	; 248
    6e1e:	39 f0       	breq	.+14     	; 0x6e2e <__fixunssfsi+0x46>
    6e20:	b9 3f       	cpi	r27, 0xF9	; 249
    6e22:	cc f3       	brlt	.-14     	; 0x6e16 <__fixunssfsi+0x2e>
    6e24:	86 95       	lsr	r24
    6e26:	77 95       	ror	r23
    6e28:	67 95       	ror	r22
    6e2a:	b3 95       	inc	r27
    6e2c:	d9 f7       	brne	.-10     	; 0x6e24 <__fixunssfsi+0x3c>
    6e2e:	3e f4       	brtc	.+14     	; 0x6e3e <__fixunssfsi+0x56>
    6e30:	90 95       	com	r25
    6e32:	80 95       	com	r24
    6e34:	70 95       	com	r23
    6e36:	61 95       	neg	r22
    6e38:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3a:	8f 4f       	sbci	r24, 0xFF	; 255
    6e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e3e:	08 95       	ret

00006e40 <__fp_cmp>:
    6e40:	99 0f       	add	r25, r25
    6e42:	00 08       	sbc	r0, r0
    6e44:	55 0f       	add	r21, r21
    6e46:	aa 0b       	sbc	r26, r26
    6e48:	e0 e8       	ldi	r30, 0x80	; 128
    6e4a:	fe ef       	ldi	r31, 0xFE	; 254
    6e4c:	16 16       	cp	r1, r22
    6e4e:	17 06       	cpc	r1, r23
    6e50:	e8 07       	cpc	r30, r24
    6e52:	f9 07       	cpc	r31, r25
    6e54:	c0 f0       	brcs	.+48     	; 0x6e86 <__fp_cmp+0x46>
    6e56:	12 16       	cp	r1, r18
    6e58:	13 06       	cpc	r1, r19
    6e5a:	e4 07       	cpc	r30, r20
    6e5c:	f5 07       	cpc	r31, r21
    6e5e:	98 f0       	brcs	.+38     	; 0x6e86 <__fp_cmp+0x46>
    6e60:	62 1b       	sub	r22, r18
    6e62:	73 0b       	sbc	r23, r19
    6e64:	84 0b       	sbc	r24, r20
    6e66:	95 0b       	sbc	r25, r21
    6e68:	39 f4       	brne	.+14     	; 0x6e78 <__fp_cmp+0x38>
    6e6a:	0a 26       	eor	r0, r26
    6e6c:	61 f0       	breq	.+24     	; 0x6e86 <__fp_cmp+0x46>
    6e6e:	23 2b       	or	r18, r19
    6e70:	24 2b       	or	r18, r20
    6e72:	25 2b       	or	r18, r21
    6e74:	21 f4       	brne	.+8      	; 0x6e7e <__fp_cmp+0x3e>
    6e76:	08 95       	ret
    6e78:	0a 26       	eor	r0, r26
    6e7a:	09 f4       	brne	.+2      	; 0x6e7e <__fp_cmp+0x3e>
    6e7c:	a1 40       	sbci	r26, 0x01	; 1
    6e7e:	a6 95       	lsr	r26
    6e80:	8f ef       	ldi	r24, 0xFF	; 255
    6e82:	81 1d       	adc	r24, r1
    6e84:	81 1d       	adc	r24, r1
    6e86:	08 95       	ret

00006e88 <__fp_split3>:
    6e88:	57 fd       	sbrc	r21, 7
    6e8a:	90 58       	subi	r25, 0x80	; 128
    6e8c:	44 0f       	add	r20, r20
    6e8e:	55 1f       	adc	r21, r21
    6e90:	59 f0       	breq	.+22     	; 0x6ea8 <__fp_splitA+0x10>
    6e92:	5f 3f       	cpi	r21, 0xFF	; 255
    6e94:	71 f0       	breq	.+28     	; 0x6eb2 <__fp_splitA+0x1a>
    6e96:	47 95       	ror	r20

00006e98 <__fp_splitA>:
    6e98:	88 0f       	add	r24, r24
    6e9a:	97 fb       	bst	r25, 7
    6e9c:	99 1f       	adc	r25, r25
    6e9e:	61 f0       	breq	.+24     	; 0x6eb8 <__fp_splitA+0x20>
    6ea0:	9f 3f       	cpi	r25, 0xFF	; 255
    6ea2:	79 f0       	breq	.+30     	; 0x6ec2 <__fp_splitA+0x2a>
    6ea4:	87 95       	ror	r24
    6ea6:	08 95       	ret
    6ea8:	12 16       	cp	r1, r18
    6eaa:	13 06       	cpc	r1, r19
    6eac:	14 06       	cpc	r1, r20
    6eae:	55 1f       	adc	r21, r21
    6eb0:	f2 cf       	rjmp	.-28     	; 0x6e96 <__fp_split3+0xe>
    6eb2:	46 95       	lsr	r20
    6eb4:	f1 df       	rcall	.-30     	; 0x6e98 <__fp_splitA>
    6eb6:	08 c0       	rjmp	.+16     	; 0x6ec8 <__fp_splitA+0x30>
    6eb8:	16 16       	cp	r1, r22
    6eba:	17 06       	cpc	r1, r23
    6ebc:	18 06       	cpc	r1, r24
    6ebe:	99 1f       	adc	r25, r25
    6ec0:	f1 cf       	rjmp	.-30     	; 0x6ea4 <__fp_splitA+0xc>
    6ec2:	86 95       	lsr	r24
    6ec4:	71 05       	cpc	r23, r1
    6ec6:	61 05       	cpc	r22, r1
    6ec8:	08 94       	sec
    6eca:	08 95       	ret

00006ecc <__fp_zero>:
    6ecc:	e8 94       	clt

00006ece <__fp_szero>:
    6ece:	bb 27       	eor	r27, r27
    6ed0:	66 27       	eor	r22, r22
    6ed2:	77 27       	eor	r23, r23
    6ed4:	cb 01       	movw	r24, r22
    6ed6:	97 f9       	bld	r25, 7
    6ed8:	08 95       	ret

00006eda <__gesf2>:
    6eda:	b2 df       	rcall	.-156    	; 0x6e40 <__fp_cmp>
    6edc:	08 f4       	brcc	.+2      	; 0x6ee0 <__gesf2+0x6>
    6ede:	8f ef       	ldi	r24, 0xFF	; 255
    6ee0:	08 95       	ret

00006ee2 <__mulsf3>:
    6ee2:	0b d0       	rcall	.+22     	; 0x6efa <__mulsf3x>
    6ee4:	78 c0       	rjmp	.+240    	; 0x6fd6 <__fp_round>
    6ee6:	69 d0       	rcall	.+210    	; 0x6fba <__fp_pscA>
    6ee8:	28 f0       	brcs	.+10     	; 0x6ef4 <__mulsf3+0x12>
    6eea:	6e d0       	rcall	.+220    	; 0x6fc8 <__fp_pscB>
    6eec:	18 f0       	brcs	.+6      	; 0x6ef4 <__mulsf3+0x12>
    6eee:	95 23       	and	r25, r21
    6ef0:	09 f0       	breq	.+2      	; 0x6ef4 <__mulsf3+0x12>
    6ef2:	5a c0       	rjmp	.+180    	; 0x6fa8 <__fp_inf>
    6ef4:	5f c0       	rjmp	.+190    	; 0x6fb4 <__fp_nan>
    6ef6:	11 24       	eor	r1, r1
    6ef8:	ea cf       	rjmp	.-44     	; 0x6ece <__fp_szero>

00006efa <__mulsf3x>:
    6efa:	c6 df       	rcall	.-116    	; 0x6e88 <__fp_split3>
    6efc:	a0 f3       	brcs	.-24     	; 0x6ee6 <__mulsf3+0x4>

00006efe <__mulsf3_pse>:
    6efe:	95 9f       	mul	r25, r21
    6f00:	d1 f3       	breq	.-12     	; 0x6ef6 <__mulsf3+0x14>
    6f02:	95 0f       	add	r25, r21
    6f04:	50 e0       	ldi	r21, 0x00	; 0
    6f06:	55 1f       	adc	r21, r21
    6f08:	62 9f       	mul	r22, r18
    6f0a:	f0 01       	movw	r30, r0
    6f0c:	72 9f       	mul	r23, r18
    6f0e:	bb 27       	eor	r27, r27
    6f10:	f0 0d       	add	r31, r0
    6f12:	b1 1d       	adc	r27, r1
    6f14:	63 9f       	mul	r22, r19
    6f16:	aa 27       	eor	r26, r26
    6f18:	f0 0d       	add	r31, r0
    6f1a:	b1 1d       	adc	r27, r1
    6f1c:	aa 1f       	adc	r26, r26
    6f1e:	64 9f       	mul	r22, r20
    6f20:	66 27       	eor	r22, r22
    6f22:	b0 0d       	add	r27, r0
    6f24:	a1 1d       	adc	r26, r1
    6f26:	66 1f       	adc	r22, r22
    6f28:	82 9f       	mul	r24, r18
    6f2a:	22 27       	eor	r18, r18
    6f2c:	b0 0d       	add	r27, r0
    6f2e:	a1 1d       	adc	r26, r1
    6f30:	62 1f       	adc	r22, r18
    6f32:	73 9f       	mul	r23, r19
    6f34:	b0 0d       	add	r27, r0
    6f36:	a1 1d       	adc	r26, r1
    6f38:	62 1f       	adc	r22, r18
    6f3a:	83 9f       	mul	r24, r19
    6f3c:	a0 0d       	add	r26, r0
    6f3e:	61 1d       	adc	r22, r1
    6f40:	22 1f       	adc	r18, r18
    6f42:	74 9f       	mul	r23, r20
    6f44:	33 27       	eor	r19, r19
    6f46:	a0 0d       	add	r26, r0
    6f48:	61 1d       	adc	r22, r1
    6f4a:	23 1f       	adc	r18, r19
    6f4c:	84 9f       	mul	r24, r20
    6f4e:	60 0d       	add	r22, r0
    6f50:	21 1d       	adc	r18, r1
    6f52:	82 2f       	mov	r24, r18
    6f54:	76 2f       	mov	r23, r22
    6f56:	6a 2f       	mov	r22, r26
    6f58:	11 24       	eor	r1, r1
    6f5a:	9f 57       	subi	r25, 0x7F	; 127
    6f5c:	50 40       	sbci	r21, 0x00	; 0
    6f5e:	8a f0       	brmi	.+34     	; 0x6f82 <__mulsf3_pse+0x84>
    6f60:	e1 f0       	breq	.+56     	; 0x6f9a <__mulsf3_pse+0x9c>
    6f62:	88 23       	and	r24, r24
    6f64:	4a f0       	brmi	.+18     	; 0x6f78 <__mulsf3_pse+0x7a>
    6f66:	ee 0f       	add	r30, r30
    6f68:	ff 1f       	adc	r31, r31
    6f6a:	bb 1f       	adc	r27, r27
    6f6c:	66 1f       	adc	r22, r22
    6f6e:	77 1f       	adc	r23, r23
    6f70:	88 1f       	adc	r24, r24
    6f72:	91 50       	subi	r25, 0x01	; 1
    6f74:	50 40       	sbci	r21, 0x00	; 0
    6f76:	a9 f7       	brne	.-22     	; 0x6f62 <__mulsf3_pse+0x64>
    6f78:	9e 3f       	cpi	r25, 0xFE	; 254
    6f7a:	51 05       	cpc	r21, r1
    6f7c:	70 f0       	brcs	.+28     	; 0x6f9a <__mulsf3_pse+0x9c>
    6f7e:	14 c0       	rjmp	.+40     	; 0x6fa8 <__fp_inf>
    6f80:	a6 cf       	rjmp	.-180    	; 0x6ece <__fp_szero>
    6f82:	5f 3f       	cpi	r21, 0xFF	; 255
    6f84:	ec f3       	brlt	.-6      	; 0x6f80 <__mulsf3_pse+0x82>
    6f86:	98 3e       	cpi	r25, 0xE8	; 232
    6f88:	dc f3       	brlt	.-10     	; 0x6f80 <__mulsf3_pse+0x82>
    6f8a:	86 95       	lsr	r24
    6f8c:	77 95       	ror	r23
    6f8e:	67 95       	ror	r22
    6f90:	b7 95       	ror	r27
    6f92:	f7 95       	ror	r31
    6f94:	e7 95       	ror	r30
    6f96:	9f 5f       	subi	r25, 0xFF	; 255
    6f98:	c1 f7       	brne	.-16     	; 0x6f8a <__mulsf3_pse+0x8c>
    6f9a:	fe 2b       	or	r31, r30
    6f9c:	88 0f       	add	r24, r24
    6f9e:	91 1d       	adc	r25, r1
    6fa0:	96 95       	lsr	r25
    6fa2:	87 95       	ror	r24
    6fa4:	97 f9       	bld	r25, 7
    6fa6:	08 95       	ret

00006fa8 <__fp_inf>:
    6fa8:	97 f9       	bld	r25, 7
    6faa:	9f 67       	ori	r25, 0x7F	; 127
    6fac:	80 e8       	ldi	r24, 0x80	; 128
    6fae:	70 e0       	ldi	r23, 0x00	; 0
    6fb0:	60 e0       	ldi	r22, 0x00	; 0
    6fb2:	08 95       	ret

00006fb4 <__fp_nan>:
    6fb4:	9f ef       	ldi	r25, 0xFF	; 255
    6fb6:	80 ec       	ldi	r24, 0xC0	; 192
    6fb8:	08 95       	ret

00006fba <__fp_pscA>:
    6fba:	00 24       	eor	r0, r0
    6fbc:	0a 94       	dec	r0
    6fbe:	16 16       	cp	r1, r22
    6fc0:	17 06       	cpc	r1, r23
    6fc2:	18 06       	cpc	r1, r24
    6fc4:	09 06       	cpc	r0, r25
    6fc6:	08 95       	ret

00006fc8 <__fp_pscB>:
    6fc8:	00 24       	eor	r0, r0
    6fca:	0a 94       	dec	r0
    6fcc:	12 16       	cp	r1, r18
    6fce:	13 06       	cpc	r1, r19
    6fd0:	14 06       	cpc	r1, r20
    6fd2:	05 06       	cpc	r0, r21
    6fd4:	08 95       	ret

00006fd6 <__fp_round>:
    6fd6:	09 2e       	mov	r0, r25
    6fd8:	03 94       	inc	r0
    6fda:	00 0c       	add	r0, r0
    6fdc:	11 f4       	brne	.+4      	; 0x6fe2 <__fp_round+0xc>
    6fde:	88 23       	and	r24, r24
    6fe0:	52 f0       	brmi	.+20     	; 0x6ff6 <__fp_round+0x20>
    6fe2:	bb 0f       	add	r27, r27
    6fe4:	40 f4       	brcc	.+16     	; 0x6ff6 <__fp_round+0x20>
    6fe6:	bf 2b       	or	r27, r31
    6fe8:	11 f4       	brne	.+4      	; 0x6fee <__fp_round+0x18>
    6fea:	60 ff       	sbrs	r22, 0
    6fec:	04 c0       	rjmp	.+8      	; 0x6ff6 <__fp_round+0x20>
    6fee:	6f 5f       	subi	r22, 0xFF	; 255
    6ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ff2:	8f 4f       	sbci	r24, 0xFF	; 255
    6ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ff6:	08 95       	ret

00006ff8 <_hihTwiCallback>:
    6ff8:	65 30       	cpi	r22, 0x05	; 5
    6ffa:	f1 f4       	brne	.+60     	; 0x7038 <_hihTwiCallback+0x40>
    6ffc:	fa 01       	movw	r30, r20
    6ffe:	80 81       	ld	r24, Z
    7000:	8f 73       	andi	r24, 0x3F	; 63
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	98 2f       	mov	r25, r24
    7006:	88 27       	eor	r24, r24
    7008:	21 81       	ldd	r18, Z+1	; 0x01
    700a:	82 2b       	or	r24, r18
    700c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    7010:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    7014:	82 81       	ldd	r24, Z+2	; 0x02
    7016:	f0 e4       	ldi	r31, 0x40	; 64
    7018:	8f 9f       	mul	r24, r31
    701a:	c0 01       	movw	r24, r0
    701c:	11 24       	eor	r1, r1
    701e:	fa 01       	movw	r30, r20
    7020:	23 81       	ldd	r18, Z+3	; 0x03
    7022:	26 95       	lsr	r18
    7024:	26 95       	lsr	r18
    7026:	82 2b       	or	r24, r18
    7028:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    702c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    7030:	81 e0       	ldi	r24, 0x01	; 1
    7032:	80 93 dd 1b 	sts	0x1BDD, r24	; 0x801bdd <_measuringIsReady>
    7036:	08 95       	ret
    7038:	64 30       	cpi	r22, 0x04	; 4
    703a:	51 f0       	breq	.+20     	; 0x7050 <_hihTwiCallback+0x58>
    703c:	80 e0       	ldi	r24, 0x00	; 0
    703e:	90 e4       	ldi	r25, 0x40	; 64
    7040:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_temp+0x1>
    7044:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_temp>
    7048:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <_hum+0x1>
    704c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_hum>
    7050:	08 95       	ret

00007052 <hih8120_initialise>:
    7052:	0f 93       	push	r16
    7054:	1f 93       	push	r17
    7056:	0c ef       	ldi	r16, 0xFC	; 252
    7058:	17 e3       	ldi	r17, 0x37	; 55
    705a:	20 e0       	ldi	r18, 0x00	; 0
    705c:	34 e2       	ldi	r19, 0x24	; 36
    705e:	44 ef       	ldi	r20, 0xF4	; 244
    7060:	50 e0       	ldi	r21, 0x00	; 0
    7062:	60 e0       	ldi	r22, 0x00	; 0
    7064:	87 e2       	ldi	r24, 0x27	; 39
    7066:	0e 94 b6 43 	call	0x876c	; 0x876c <twiCreate>
    706a:	90 93 df 1b 	sts	0x1BDF, r25	; 0x801bdf <_hih8120Handler+0x1>
    706e:	80 93 de 1b 	sts	0x1BDE, r24	; 0x801bde <_hih8120Handler>
    7072:	21 e0       	ldi	r18, 0x01	; 1
    7074:	89 2b       	or	r24, r25
    7076:	09 f0       	breq	.+2      	; 0x707a <hih8120_initialise+0x28>
    7078:	20 e0       	ldi	r18, 0x00	; 0
    707a:	82 2f       	mov	r24, r18
    707c:	1f 91       	pop	r17
    707e:	0f 91       	pop	r16
    7080:	08 95       	ret

00007082 <hih8120_isReady>:
    7082:	80 91 dd 1b 	lds	r24, 0x1BDD	; 0x801bdd <_measuringIsReady>
    7086:	08 95       	ret

00007088 <hih8120_wakeup>:
    7088:	80 91 de 1b 	lds	r24, 0x1BDE	; 0x801bde <_hih8120Handler>
    708c:	90 91 df 1b 	lds	r25, 0x1BDF	; 0x801bdf <_hih8120Handler+0x1>
    7090:	00 97       	sbiw	r24, 0x00	; 0
    7092:	59 f0       	breq	.+22     	; 0x70aa <hih8120_wakeup+0x22>
    7094:	40 e0       	ldi	r20, 0x00	; 0
    7096:	60 e0       	ldi	r22, 0x00	; 0
    7098:	70 e0       	ldi	r23, 0x00	; 0
    709a:	0e 94 07 44 	call	0x880e	; 0x880e <twiTransmit>
    709e:	84 30       	cpi	r24, 0x04	; 4
    70a0:	31 f4       	brne	.+12     	; 0x70ae <hih8120_wakeup+0x26>
    70a2:	10 92 dd 1b 	sts	0x1BDD, r1	; 0x801bdd <_measuringIsReady>
    70a6:	80 e0       	ldi	r24, 0x00	; 0
    70a8:	08 95       	ret
    70aa:	82 e0       	ldi	r24, 0x02	; 2
    70ac:	08 95       	ret
    70ae:	83 e0       	ldi	r24, 0x03	; 3
    70b0:	08 95       	ret

000070b2 <hih8120_measure>:
    70b2:	80 91 de 1b 	lds	r24, 0x1BDE	; 0x801bde <_hih8120Handler>
    70b6:	90 91 df 1b 	lds	r25, 0x1BDF	; 0x801bdf <_hih8120Handler+0x1>
    70ba:	00 97       	sbiw	r24, 0x00	; 0
    70bc:	39 f0       	breq	.+14     	; 0x70cc <hih8120_measure+0x1a>
    70be:	64 e0       	ldi	r22, 0x04	; 4
    70c0:	0e 94 53 44 	call	0x88a6	; 0x88a6 <twiReceive>
    70c4:	85 30       	cpi	r24, 0x05	; 5
    70c6:	21 f0       	breq	.+8      	; 0x70d0 <hih8120_measure+0x1e>
    70c8:	83 e0       	ldi	r24, 0x03	; 3
    70ca:	08 95       	ret
    70cc:	82 e0       	ldi	r24, 0x02	; 2
    70ce:	08 95       	ret
    70d0:	80 e0       	ldi	r24, 0x00	; 0
    70d2:	08 95       	ret

000070d4 <hih8120_getHumidity>:
    70d4:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <_hum>
    70d8:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <_hum+0x1>
    70dc:	80 e0       	ldi	r24, 0x00	; 0
    70de:	90 e0       	ldi	r25, 0x00	; 0
    70e0:	0e 94 cc 49 	call	0x9398	; 0x9398 <__floatunsisf>
    70e4:	20 e0       	ldi	r18, 0x00	; 0
    70e6:	30 e0       	ldi	r19, 0x00	; 0
    70e8:	48 ec       	ldi	r20, 0xC8	; 200
    70ea:	52 e4       	ldi	r21, 0x42	; 66
    70ec:	fa de       	rcall	.-524    	; 0x6ee2 <__mulsf3>
    70ee:	20 e0       	ldi	r18, 0x00	; 0
    70f0:	38 ef       	ldi	r19, 0xF8	; 248
    70f2:	4f e7       	ldi	r20, 0x7F	; 127
    70f4:	56 e4       	ldi	r21, 0x46	; 70
    70f6:	0c 94 54 49 	jmp	0x92a8	; 0x92a8 <__divsf3>
    70fa:	08 95       	ret

000070fc <hih8120_getHumidityPercent_x10>:
    70fc:	eb df       	rcall	.-42     	; 0x70d4 <hih8120_getHumidity>
    70fe:	20 e0       	ldi	r18, 0x00	; 0
    7100:	30 e0       	ldi	r19, 0x00	; 0
    7102:	40 e2       	ldi	r20, 0x20	; 32
    7104:	51 e4       	ldi	r21, 0x41	; 65
    7106:	ed de       	rcall	.-550    	; 0x6ee2 <__mulsf3>
    7108:	6f de       	rcall	.-802    	; 0x6de8 <__fixunssfsi>
    710a:	cb 01       	movw	r24, r22
    710c:	08 95       	ret

0000710e <hih8120_getTemperature>:
    710e:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_temp>
    7112:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_temp+0x1>
    7116:	80 e0       	ldi	r24, 0x00	; 0
    7118:	90 e0       	ldi	r25, 0x00	; 0
    711a:	0e 94 cc 49 	call	0x9398	; 0x9398 <__floatunsisf>
    711e:	20 e0       	ldi	r18, 0x00	; 0
    7120:	30 e0       	ldi	r19, 0x00	; 0
    7122:	45 e2       	ldi	r20, 0x25	; 37
    7124:	53 e4       	ldi	r21, 0x43	; 67
    7126:	dd de       	rcall	.-582    	; 0x6ee2 <__mulsf3>
    7128:	20 e0       	ldi	r18, 0x00	; 0
    712a:	38 ef       	ldi	r19, 0xF8	; 248
    712c:	4f e7       	ldi	r20, 0x7F	; 127
    712e:	56 e4       	ldi	r21, 0x46	; 70
    7130:	0e 94 54 49 	call	0x92a8	; 0x92a8 <__divsf3>
    7134:	20 e0       	ldi	r18, 0x00	; 0
    7136:	30 e0       	ldi	r19, 0x00	; 0
    7138:	40 e2       	ldi	r20, 0x20	; 32
    713a:	52 e4       	ldi	r21, 0x42	; 66
    713c:	0c 94 e8 48 	jmp	0x91d0	; 0x91d0 <__subsf3>
    7140:	08 95       	ret

00007142 <hih8120_getTemperature_x10>:
    7142:	e5 df       	rcall	.-54     	; 0x710e <hih8120_getTemperature>
    7144:	20 e0       	ldi	r18, 0x00	; 0
    7146:	30 e0       	ldi	r19, 0x00	; 0
    7148:	40 e2       	ldi	r20, 0x20	; 32
    714a:	51 e4       	ldi	r21, 0x41	; 65
    714c:	ca de       	rcall	.-620    	; 0x6ee2 <__mulsf3>
    714e:	0e 94 c5 49 	call	0x938a	; 0x938a <__fixsfsi>
    7152:	cb 01       	movw	r24, r22
    7154:	08 95       	ret

00007156 <_serialCallBack>:
    7156:	0f 93       	push	r16
    7158:	1f 93       	push	r17
    715a:	cf 93       	push	r28
    715c:	df 93       	push	r29
    715e:	1f 92       	push	r1
    7160:	1f 92       	push	r1
    7162:	cd b7       	in	r28, 0x3d	; 61
    7164:	de b7       	in	r29, 0x3e	; 62
    7166:	8c 01       	movw	r16, r24
    7168:	19 82       	std	Y+1, r1	; 0x01
    716a:	2d c0       	rjmp	.+90     	; 0x71c6 <_serialCallBack+0x70>
    716c:	e0 91 17 1c 	lds	r30, 0x1C17	; 0x801c17 <rec_buf_inp.2878>
    7170:	ec 32       	cpi	r30, 0x2C	; 44
    7172:	50 f4       	brcc	.+20     	; 0x7188 <_serialCallBack+0x32>
    7174:	81 e0       	ldi	r24, 0x01	; 1
    7176:	8e 0f       	add	r24, r30
    7178:	80 93 17 1c 	sts	0x1C17, r24	; 0x801c17 <rec_buf_inp.2878>
    717c:	f0 e0       	ldi	r31, 0x00	; 0
    717e:	e7 5b       	subi	r30, 0xB7	; 183
    7180:	f3 4e       	sbci	r31, 0xE3	; 227
    7182:	8a 81       	ldd	r24, Y+2	; 0x02
    7184:	80 83       	st	Z, r24
    7186:	02 c0       	rjmp	.+4      	; 0x718c <_serialCallBack+0x36>
    7188:	10 92 17 1c 	sts	0x1C17, r1	; 0x801c17 <rec_buf_inp.2878>
    718c:	8a 81       	ldd	r24, Y+2	; 0x02
    718e:	8a 30       	cpi	r24, 0x0A	; 10
    7190:	d1 f4       	brne	.+52     	; 0x71c6 <_serialCallBack+0x70>
    7192:	40 91 17 1c 	lds	r20, 0x1C17	; 0x801c17 <rec_buf_inp.2878>
    7196:	50 e0       	ldi	r21, 0x00	; 0
    7198:	fa 01       	movw	r30, r20
    719a:	e9 5b       	subi	r30, 0xB9	; 185
    719c:	f3 4e       	sbci	r31, 0xE3	; 227
    719e:	10 82       	st	Z, r1
    71a0:	41 50       	subi	r20, 0x01	; 1
    71a2:	51 09       	sbc	r21, r1
    71a4:	9e 01       	movw	r18, r28
    71a6:	2f 5f       	subi	r18, 0xFF	; 255
    71a8:	3f 4f       	sbci	r19, 0xFF	; 255
    71aa:	69 e4       	ldi	r22, 0x49	; 73
    71ac:	7c e1       	ldi	r23, 0x1C	; 28
    71ae:	80 91 1a 1c 	lds	r24, 0x1C1A	; 0x801c1a <_serialReplyBufferHandle>
    71b2:	90 91 1b 1c 	lds	r25, 0x1C1B	; 0x801c1b <_serialReplyBufferHandle+0x1>
    71b6:	0e 94 ee 12 	call	0x25dc	; 0x25dc <xStreamBufferSendFromISR>
    71ba:	89 81       	ldd	r24, Y+1	; 0x01
    71bc:	81 11       	cpse	r24, r1
    71be:	0e 94 25 0b 	call	0x164a	; 0x164a <vPortYield>
    71c2:	10 92 17 1c 	sts	0x1C17, r1	; 0x801c17 <rec_buf_inp.2878>
    71c6:	be 01       	movw	r22, r28
    71c8:	6e 5f       	subi	r22, 0xFE	; 254
    71ca:	7f 4f       	sbci	r23, 0xFF	; 255
    71cc:	c8 01       	movw	r24, r16
    71ce:	4b d6       	rcall	.+3222   	; 0x7e66 <serial_getByte>
    71d0:	88 23       	and	r24, r24
    71d2:	61 f2       	breq	.-104    	; 0x716c <_serialCallBack+0x16>
    71d4:	0f 90       	pop	r0
    71d6:	0f 90       	pop	r0
    71d8:	df 91       	pop	r29
    71da:	cf 91       	pop	r28
    71dc:	1f 91       	pop	r17
    71de:	0f 91       	pop	r16
    71e0:	08 95       	ret

000071e2 <_uploadMessage>:
    71e2:	0f 93       	push	r16
    71e4:	1f 93       	push	r17
    71e6:	cf 93       	push	r28
    71e8:	df 93       	push	r29
    71ea:	8c 01       	movw	r16, r24
    71ec:	eb 01       	movw	r28, r22
    71ee:	80 91 1a 1c 	lds	r24, 0x1C1A	; 0x801c1a <_serialReplyBufferHandle>
    71f2:	90 91 1b 1c 	lds	r25, 0x1C1B	; 0x801c1b <_serialReplyBufferHandle+0x1>
    71f6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <xStreamBufferReset>
    71fa:	b8 01       	movw	r22, r16
    71fc:	80 ee       	ldi	r24, 0xE0	; 224
    71fe:	9b e1       	ldi	r25, 0x1B	; 27
    7200:	0e 94 b1 4c 	call	0x9962	; 0x9962 <strcpy>
    7204:	20 97       	sbiw	r28, 0x00	; 0
    7206:	79 f0       	breq	.+30     	; 0x7226 <_uploadMessage+0x44>
    7208:	e0 ee       	ldi	r30, 0xE0	; 224
    720a:	fb e1       	ldi	r31, 0x1B	; 27
    720c:	01 90       	ld	r0, Z+
    720e:	00 20       	and	r0, r0
    7210:	e9 f7       	brne	.-6      	; 0x720c <_uploadMessage+0x2a>
    7212:	31 97       	sbiw	r30, 0x01	; 1
    7214:	80 e2       	ldi	r24, 0x20	; 32
    7216:	90 e0       	ldi	r25, 0x00	; 0
    7218:	91 83       	std	Z+1, r25	; 0x01
    721a:	80 83       	st	Z, r24
    721c:	be 01       	movw	r22, r28
    721e:	80 ee       	ldi	r24, 0xE0	; 224
    7220:	9b e1       	ldi	r25, 0x1B	; 27
    7222:	0e 94 a6 4c 	call	0x994c	; 0x994c <strcat>
    7226:	e0 ee       	ldi	r30, 0xE0	; 224
    7228:	fb e1       	ldi	r31, 0x1B	; 27
    722a:	df 01       	movw	r26, r30
    722c:	0d 90       	ld	r0, X+
    722e:	00 20       	and	r0, r0
    7230:	e9 f7       	brne	.-6      	; 0x722c <_uploadMessage+0x4a>
    7232:	11 97       	sbiw	r26, 0x01	; 1
    7234:	8d e0       	ldi	r24, 0x0D	; 13
    7236:	9a e0       	ldi	r25, 0x0A	; 10
    7238:	11 96       	adiw	r26, 0x01	; 1
    723a:	9c 93       	st	X, r25
    723c:	8e 93       	st	-X, r24
    723e:	12 96       	adiw	r26, 0x02	; 2
    7240:	1c 92       	st	X, r1
    7242:	01 90       	ld	r0, Z+
    7244:	00 20       	and	r0, r0
    7246:	e9 f7       	brne	.-6      	; 0x7242 <_uploadMessage+0x60>
    7248:	31 97       	sbiw	r30, 0x01	; 1
    724a:	e0 5e       	subi	r30, 0xE0	; 224
    724c:	fb 41       	sbci	r31, 0x1B	; 27
    724e:	ae 2f       	mov	r26, r30
    7250:	80 ee       	ldi	r24, 0xE0	; 224
    7252:	9b e1       	ldi	r25, 0x1B	; 27
    7254:	ac 01       	movw	r20, r24
    7256:	6a 2f       	mov	r22, r26
    7258:	80 91 1c 1c 	lds	r24, 0x1C1C	; 0x801c1c <_rn2483_serial>
    725c:	90 91 1d 1c 	lds	r25, 0x1C1D	; 0x801c1d <_rn2483_serial+0x1>
    7260:	ad d5       	rcall	.+2906   	; 0x7dbc <serial_sendBytes>
    7262:	81 11       	cpse	r24, r1
    7264:	11 c0       	rjmp	.+34     	; 0x7288 <_uploadMessage+0xa6>
    7266:	08 e2       	ldi	r16, 0x28	; 40
    7268:	15 e0       	ldi	r17, 0x05	; 5
    726a:	20 e0       	ldi	r18, 0x00	; 0
    726c:	30 e0       	ldi	r19, 0x00	; 0
    726e:	4d e2       	ldi	r20, 0x2D	; 45
    7270:	50 e0       	ldi	r21, 0x00	; 0
    7272:	63 ea       	ldi	r22, 0xA3	; 163
    7274:	7c e1       	ldi	r23, 0x1C	; 28
    7276:	80 91 1a 1c 	lds	r24, 0x1C1A	; 0x801c1a <_serialReplyBufferHandle>
    727a:	90 91 1b 1c 	lds	r25, 0x1C1B	; 0x801c1b <_serialReplyBufferHandle+0x1>
    727e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <xStreamBufferReceive>
    7282:	83 ea       	ldi	r24, 0xA3	; 163
    7284:	9c e1       	ldi	r25, 0x1C	; 28
    7286:	02 c0       	rjmp	.+4      	; 0x728c <_uploadMessage+0xaa>
    7288:	80 e0       	ldi	r24, 0x00	; 0
    728a:	90 e0       	ldi	r25, 0x00	; 0
    728c:	df 91       	pop	r29
    728e:	cf 91       	pop	r28
    7290:	1f 91       	pop	r17
    7292:	0f 91       	pop	r16
    7294:	08 95       	ret

00007296 <_reply2ReturnCode>:
    7296:	2f 92       	push	r2
    7298:	3f 92       	push	r3
    729a:	4f 92       	push	r4
    729c:	5f 92       	push	r5
    729e:	6f 92       	push	r6
    72a0:	7f 92       	push	r7
    72a2:	8f 92       	push	r8
    72a4:	9f 92       	push	r9
    72a6:	af 92       	push	r10
    72a8:	bf 92       	push	r11
    72aa:	cf 92       	push	r12
    72ac:	df 92       	push	r13
    72ae:	ef 92       	push	r14
    72b0:	ff 92       	push	r15
    72b2:	0f 93       	push	r16
    72b4:	1f 93       	push	r17
    72b6:	cf 93       	push	r28
    72b8:	df 93       	push	r29
    72ba:	5c 01       	movw	r10, r24
    72bc:	fc 01       	movw	r30, r24
    72be:	01 90       	ld	r0, Z+
    72c0:	00 20       	and	r0, r0
    72c2:	e9 f7       	brne	.-6      	; 0x72be <_reply2ReturnCode+0x28>
    72c4:	31 97       	sbiw	r30, 0x01	; 1
    72c6:	6f 01       	movw	r12, r30
    72c8:	c8 1a       	sub	r12, r24
    72ca:	d9 0a       	sbc	r13, r25
    72cc:	5c 2c       	mov	r5, r12
    72ce:	0f 2e       	mov	r0, r31
    72d0:	f6 ec       	ldi	r31, 0xC6	; 198
    72d2:	8f 2e       	mov	r8, r31
    72d4:	fc e0       	ldi	r31, 0x0C	; 12
    72d6:	9f 2e       	mov	r9, r31
    72d8:	f0 2d       	mov	r31, r0
    72da:	e1 2c       	mov	r14, r1
    72dc:	f1 2c       	mov	r15, r1
    72de:	4c 2c       	mov	r4, r12
    72e0:	37 01       	movw	r6, r14
    72e2:	f4 01       	movw	r30, r8
    72e4:	01 81       	ldd	r16, Z+1	; 0x01
    72e6:	12 81       	ldd	r17, Z+2	; 0x02
    72e8:	e8 01       	movw	r28, r16
    72ea:	09 90       	ld	r0, Y+
    72ec:	00 20       	and	r0, r0
    72ee:	e9 f7       	brne	.-6      	; 0x72ea <_reply2ReturnCode+0x54>
    72f0:	21 97       	sbiw	r28, 0x01	; 1
    72f2:	c0 1b       	sub	r28, r16
    72f4:	d1 0b       	sbc	r29, r17
    72f6:	3c 2e       	mov	r3, r28
    72f8:	f9 e0       	ldi	r31, 0x09	; 9
    72fa:	cf 16       	cp	r12, r31
    72fc:	d1 04       	cpc	r13, r1
    72fe:	58 f0       	brcs	.+22     	; 0x7316 <_reply2ReturnCode+0x80>
    7300:	f4 01       	movw	r30, r8
    7302:	20 80       	ld	r2, Z
    7304:	fe e0       	ldi	r31, 0x0E	; 14
    7306:	2f 12       	cpse	r2, r31
    7308:	06 c0       	rjmp	.+12     	; 0x7316 <_reply2ReturnCode+0x80>
    730a:	b8 01       	movw	r22, r16
    730c:	c5 01       	movw	r24, r10
    730e:	0e 94 81 4c 	call	0x9902	; 0x9902 <strcasestr>
    7312:	89 2b       	or	r24, r25
    7314:	09 f5       	brne	.+66     	; 0x7358 <_reply2ReturnCode+0xc2>
    7316:	44 2d       	mov	r20, r4
    7318:	35 14       	cp	r3, r5
    731a:	08 f4       	brcc	.+2      	; 0x731e <_reply2ReturnCode+0x88>
    731c:	4c 2f       	mov	r20, r28
    731e:	50 e0       	ldi	r21, 0x00	; 0
    7320:	b8 01       	movw	r22, r16
    7322:	c5 01       	movw	r24, r10
    7324:	0e 94 b8 4c 	call	0x9970	; 0x9970 <strncasecmp>
    7328:	89 2b       	or	r24, r25
    732a:	49 f4       	brne	.+18     	; 0x733e <_reply2ReturnCode+0xa8>
    732c:	f3 01       	movw	r30, r6
    732e:	ee 0f       	add	r30, r30
    7330:	ff 1f       	adc	r31, r31
    7332:	e6 0d       	add	r30, r6
    7334:	f7 1d       	adc	r31, r7
    7336:	ea 53       	subi	r30, 0x3A	; 58
    7338:	f3 4f       	sbci	r31, 0xF3	; 243
    733a:	20 80       	ld	r2, Z
    733c:	0d c0       	rjmp	.+26     	; 0x7358 <_reply2ReturnCode+0xc2>
    733e:	8f ef       	ldi	r24, 0xFF	; 255
    7340:	e8 1a       	sub	r14, r24
    7342:	f8 0a       	sbc	r15, r24
    7344:	e3 e0       	ldi	r30, 0x03	; 3
    7346:	8e 0e       	add	r8, r30
    7348:	91 1c       	adc	r9, r1
    734a:	f1 e1       	ldi	r31, 0x11	; 17
    734c:	ef 16       	cp	r14, r31
    734e:	f1 04       	cpc	r15, r1
    7350:	39 f6       	brne	.-114    	; 0x72e0 <_reply2ReturnCode+0x4a>
    7352:	68 94       	set
    7354:	22 24       	eor	r2, r2
    7356:	24 f8       	bld	r2, 4
    7358:	82 2d       	mov	r24, r2
    735a:	df 91       	pop	r29
    735c:	cf 91       	pop	r28
    735e:	1f 91       	pop	r17
    7360:	0f 91       	pop	r16
    7362:	ff 90       	pop	r15
    7364:	ef 90       	pop	r14
    7366:	df 90       	pop	r13
    7368:	cf 90       	pop	r12
    736a:	bf 90       	pop	r11
    736c:	af 90       	pop	r10
    736e:	9f 90       	pop	r9
    7370:	8f 90       	pop	r8
    7372:	7f 90       	pop	r7
    7374:	6f 90       	pop	r6
    7376:	5f 90       	pop	r5
    7378:	4f 90       	pop	r4
    737a:	3f 90       	pop	r3
    737c:	2f 90       	pop	r2
    737e:	08 95       	ret

00007380 <_uploadMessageRc>:
    7380:	30 df       	rcall	.-416    	; 0x71e2 <_uploadMessage>
    7382:	89 cf       	rjmp	.-238    	; 0x7296 <_reply2ReturnCode>
    7384:	08 95       	ret

00007386 <lora_driver_flushBuffers>:
    7386:	80 91 1a 1c 	lds	r24, 0x1C1A	; 0x801c1a <_serialReplyBufferHandle>
    738a:	90 91 1b 1c 	lds	r25, 0x1C1B	; 0x801c1b <_serialReplyBufferHandle+0x1>
    738e:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <xStreamBufferReset>
    7392:	08 95       	ret

00007394 <lora_driver_initialise>:
    7394:	8f 92       	push	r8
    7396:	9f 92       	push	r9
    7398:	af 92       	push	r10
    739a:	cf 92       	push	r12
    739c:	ef 92       	push	r14
    739e:	0f 93       	push	r16
    73a0:	1f 93       	push	r17
    73a2:	cf 93       	push	r28
    73a4:	c8 2f       	mov	r28, r24
    73a6:	8b 01       	movw	r16, r22
    73a8:	41 e0       	ldi	r20, 0x01	; 1
    73aa:	60 e0       	ldi	r22, 0x00	; 0
    73ac:	70 e0       	ldi	r23, 0x00	; 0
    73ae:	88 ec       	ldi	r24, 0xC8	; 200
    73b0:	90 e0       	ldi	r25, 0x00	; 0
    73b2:	0e 94 03 11 	call	0x2206	; 0x2206 <xStreamBufferGenericCreate>
    73b6:	90 93 1b 1c 	sts	0x1C1B, r25	; 0x801c1b <_serialReplyBufferHandle+0x1>
    73ba:	80 93 1a 1c 	sts	0x1C1A, r24	; 0x801c1a <_serialReplyBufferHandle>
    73be:	10 93 19 1c 	sts	0x1C19, r17	; 0x801c19 <_downlinkMessageBuffer+0x1>
    73c2:	00 93 18 1c 	sts	0x1C18, r16	; 0x801c18 <_downlinkMessageBuffer>
    73c6:	0f 2e       	mov	r0, r31
    73c8:	fb ea       	ldi	r31, 0xAB	; 171
    73ca:	8f 2e       	mov	r8, r31
    73cc:	f8 e3       	ldi	r31, 0x38	; 56
    73ce:	9f 2e       	mov	r9, r31
    73d0:	f0 2d       	mov	r31, r0
    73d2:	68 94       	set
    73d4:	aa 24       	eor	r10, r10
    73d6:	a6 f8       	bld	r10, 6
    73d8:	68 94       	set
    73da:	cc 24       	eor	r12, r12
    73dc:	c6 f8       	bld	r12, 6
    73de:	e1 2c       	mov	r14, r1
    73e0:	00 e0       	ldi	r16, 0x00	; 0
    73e2:	23 e0       	ldi	r18, 0x03	; 3
    73e4:	40 e0       	ldi	r20, 0x00	; 0
    73e6:	51 ee       	ldi	r21, 0xE1	; 225
    73e8:	60 e0       	ldi	r22, 0x00	; 0
    73ea:	70 e0       	ldi	r23, 0x00	; 0
    73ec:	8c 2f       	mov	r24, r28
    73ee:	17 d4       	rcall	.+2094   	; 0x7c1e <serial_create>
    73f0:	90 93 1d 1c 	sts	0x1C1D, r25	; 0x801c1d <_rn2483_serial+0x1>
    73f4:	80 93 1c 1c 	sts	0x1C1C, r24	; 0x801c1c <_rn2483_serial>
    73f8:	e7 e0       	ldi	r30, 0x07	; 7
    73fa:	f1 e0       	ldi	r31, 0x01	; 1
    73fc:	80 81       	ld	r24, Z
    73fe:	80 61       	ori	r24, 0x10	; 16
    7400:	80 83       	st	Z, r24
    7402:	cf 91       	pop	r28
    7404:	1f 91       	pop	r17
    7406:	0f 91       	pop	r16
    7408:	ef 90       	pop	r14
    740a:	cf 90       	pop	r12
    740c:	af 90       	pop	r10
    740e:	9f 90       	pop	r9
    7410:	8f 90       	pop	r8
    7412:	08 95       	ret

00007414 <lora_driver_resetRn2483>:
    7414:	88 23       	and	r24, r24
    7416:	31 f0       	breq	.+12     	; 0x7424 <lora_driver_resetRn2483+0x10>
    7418:	e8 e0       	ldi	r30, 0x08	; 8
    741a:	f1 e0       	ldi	r31, 0x01	; 1
    741c:	80 81       	ld	r24, Z
    741e:	8f 7e       	andi	r24, 0xEF	; 239
    7420:	80 83       	st	Z, r24
    7422:	08 95       	ret
    7424:	e8 e0       	ldi	r30, 0x08	; 8
    7426:	f1 e0       	ldi	r31, 0x01	; 1
    7428:	80 81       	ld	r24, Z
    742a:	80 61       	ori	r24, 0x10	; 16
    742c:	80 83       	st	Z, r24
    742e:	08 95       	ret

00007430 <lora_driver_rn2483FactoryReset>:
    7430:	60 e0       	ldi	r22, 0x00	; 0
    7432:	70 e0       	ldi	r23, 0x00	; 0
    7434:	8c e4       	ldi	r24, 0x4C	; 76
    7436:	9a e0       	ldi	r25, 0x0A	; 10
    7438:	d4 de       	rcall	.-600    	; 0x71e2 <_uploadMessage>
    743a:	e3 ea       	ldi	r30, 0xA3	; 163
    743c:	fc e1       	ldi	r31, 0x1C	; 28
    743e:	01 90       	ld	r0, Z+
    7440:	00 20       	and	r0, r0
    7442:	e9 f7       	brne	.-6      	; 0x743e <lora_driver_rn2483FactoryReset+0xe>
    7444:	31 97       	sbiw	r30, 0x01	; 1
    7446:	e3 5a       	subi	r30, 0xA3	; 163
    7448:	fc 41       	sbci	r31, 0x1C	; 28
    744a:	81 e0       	ldi	r24, 0x01	; 1
    744c:	75 97       	sbiw	r30, 0x15	; 21
    744e:	08 f0       	brcs	.+2      	; 0x7452 <lora_driver_rn2483FactoryReset+0x22>
    7450:	80 e0       	ldi	r24, 0x00	; 0
    7452:	08 95       	ret

00007454 <lora_driver_getRn2483Hweui>:
    7454:	cf 93       	push	r28
    7456:	df 93       	push	r29
    7458:	ec 01       	movw	r28, r24
    745a:	60 e0       	ldi	r22, 0x00	; 0
    745c:	70 e0       	ldi	r23, 0x00	; 0
    745e:	8d e5       	ldi	r24, 0x5D	; 93
    7460:	9a e0       	ldi	r25, 0x0A	; 10
    7462:	bf de       	rcall	.-642    	; 0x71e2 <_uploadMessage>
    7464:	e3 ea       	ldi	r30, 0xA3	; 163
    7466:	fc e1       	ldi	r31, 0x1C	; 28
    7468:	01 90       	ld	r0, Z+
    746a:	00 20       	and	r0, r0
    746c:	e9 f7       	brne	.-6      	; 0x7468 <lora_driver_getRn2483Hweui+0x14>
    746e:	e4 5b       	subi	r30, 0xB4	; 180
    7470:	fc 41       	sbci	r31, 0x1C	; 28
    7472:	39 f4       	brne	.+14     	; 0x7482 <lora_driver_getRn2483Hweui+0x2e>
    7474:	63 ea       	ldi	r22, 0xA3	; 163
    7476:	7c e1       	ldi	r23, 0x1C	; 28
    7478:	ce 01       	movw	r24, r28
    747a:	0e 94 b1 4c 	call	0x9962	; 0x9962 <strcpy>
    747e:	80 e0       	ldi	r24, 0x00	; 0
    7480:	02 c0       	rjmp	.+4      	; 0x7486 <lora_driver_getRn2483Hweui+0x32>
    7482:	18 82       	st	Y, r1
    7484:	81 e0       	ldi	r24, 0x01	; 1
    7486:	df 91       	pop	r29
    7488:	cf 91       	pop	r28
    748a:	08 95       	ret

0000748c <lora_driver_setDeviceIdentifier>:
    748c:	fc 01       	movw	r30, r24
    748e:	01 90       	ld	r0, Z+
    7490:	00 20       	and	r0, r0
    7492:	e9 f7       	brne	.-6      	; 0x748e <lora_driver_setDeviceIdentifier+0x2>
    7494:	9f 01       	movw	r18, r30
    7496:	21 51       	subi	r18, 0x11	; 17
    7498:	31 09       	sbc	r19, r1
    749a:	28 17       	cp	r18, r24
    749c:	39 07       	cpc	r19, r25
    749e:	29 f4       	brne	.+10     	; 0x74aa <lora_driver_setDeviceIdentifier+0x1e>
    74a0:	bc 01       	movw	r22, r24
    74a2:	8b e8       	ldi	r24, 0x8B	; 139
    74a4:	9a e0       	ldi	r25, 0x0A	; 10
    74a6:	6c cf       	rjmp	.-296    	; 0x7380 <_uploadMessageRc>
    74a8:	08 95       	ret
    74aa:	89 e0       	ldi	r24, 0x09	; 9
    74ac:	08 95       	ret

000074ae <lora_driver_setApplicationIdentifier>:
    74ae:	fc 01       	movw	r30, r24
    74b0:	01 90       	ld	r0, Z+
    74b2:	00 20       	and	r0, r0
    74b4:	e9 f7       	brne	.-6      	; 0x74b0 <lora_driver_setApplicationIdentifier+0x2>
    74b6:	9f 01       	movw	r18, r30
    74b8:	21 51       	subi	r18, 0x11	; 17
    74ba:	31 09       	sbc	r19, r1
    74bc:	28 17       	cp	r18, r24
    74be:	39 07       	cpc	r19, r25
    74c0:	29 f4       	brne	.+10     	; 0x74cc <lora_driver_setApplicationIdentifier+0x1e>
    74c2:	bc 01       	movw	r22, r24
    74c4:	8a e9       	ldi	r24, 0x9A	; 154
    74c6:	9a e0       	ldi	r25, 0x0A	; 10
    74c8:	5b cf       	rjmp	.-330    	; 0x7380 <_uploadMessageRc>
    74ca:	08 95       	ret
    74cc:	89 e0       	ldi	r24, 0x09	; 9
    74ce:	08 95       	ret

000074d0 <lora_driver_setApplicationKey>:
    74d0:	fc 01       	movw	r30, r24
    74d2:	01 90       	ld	r0, Z+
    74d4:	00 20       	and	r0, r0
    74d6:	e9 f7       	brne	.-6      	; 0x74d2 <lora_driver_setApplicationKey+0x2>
    74d8:	9f 01       	movw	r18, r30
    74da:	21 52       	subi	r18, 0x21	; 33
    74dc:	31 09       	sbc	r19, r1
    74de:	28 17       	cp	r18, r24
    74e0:	39 07       	cpc	r19, r25
    74e2:	29 f4       	brne	.+10     	; 0x74ee <lora_driver_setApplicationKey+0x1e>
    74e4:	bc 01       	movw	r22, r24
    74e6:	89 ea       	ldi	r24, 0xA9	; 169
    74e8:	9a e0       	ldi	r25, 0x0A	; 10
    74ea:	4a cf       	rjmp	.-364    	; 0x7380 <_uploadMessageRc>
    74ec:	08 95       	ret
    74ee:	89 e0       	ldi	r24, 0x09	; 9
    74f0:	08 95       	ret

000074f2 <lora_driver_saveMac>:
    74f2:	60 e0       	ldi	r22, 0x00	; 0
    74f4:	70 e0       	ldi	r23, 0x00	; 0
    74f6:	88 ee       	ldi	r24, 0xE8	; 232
    74f8:	9a e0       	ldi	r25, 0x0A	; 10
    74fa:	42 cf       	rjmp	.-380    	; 0x7380 <_uploadMessageRc>
    74fc:	08 95       	ret

000074fe <lora_driver_join>:
    74fe:	0f 93       	push	r16
    7500:	1f 93       	push	r17
    7502:	e8 2f       	mov	r30, r24
    7504:	f0 e0       	ldi	r31, 0x00	; 0
    7506:	ee 0f       	add	r30, r30
    7508:	ff 1f       	adc	r31, r31
    750a:	ee 53       	subi	r30, 0x3E	; 62
    750c:	f3 4f       	sbci	r31, 0xF3	; 243
    750e:	60 81       	ld	r22, Z
    7510:	71 81       	ldd	r23, Z+1	; 0x01
    7512:	81 ef       	ldi	r24, 0xF1	; 241
    7514:	9a e0       	ldi	r25, 0x0A	; 10
    7516:	34 df       	rcall	.-408    	; 0x7380 <_uploadMessageRc>
    7518:	81 11       	cpse	r24, r1
    751a:	14 c0       	rjmp	.+40     	; 0x7544 <lora_driver_join+0x46>
    751c:	08 e2       	ldi	r16, 0x28	; 40
    751e:	15 e0       	ldi	r17, 0x05	; 5
    7520:	20 e0       	ldi	r18, 0x00	; 0
    7522:	30 e0       	ldi	r19, 0x00	; 0
    7524:	4d e2       	ldi	r20, 0x2D	; 45
    7526:	50 e0       	ldi	r21, 0x00	; 0
    7528:	63 ea       	ldi	r22, 0xA3	; 163
    752a:	7c e1       	ldi	r23, 0x1C	; 28
    752c:	80 91 1a 1c 	lds	r24, 0x1C1A	; 0x801c1a <_serialReplyBufferHandle>
    7530:	90 91 1b 1c 	lds	r25, 0x1C1B	; 0x801c1b <_serialReplyBufferHandle+0x1>
    7534:	0e 94 db 13 	call	0x27b6	; 0x27b6 <xStreamBufferReceive>
    7538:	88 23       	and	r24, r24
    753a:	21 f0       	breq	.+8      	; 0x7544 <lora_driver_join+0x46>
    753c:	83 ea       	ldi	r24, 0xA3	; 163
    753e:	9c e1       	ldi	r25, 0x1C	; 28
    7540:	aa de       	rcall	.-684    	; 0x7296 <_reply2ReturnCode>
    7542:	03 c0       	rjmp	.+6      	; 0x754a <lora_driver_join+0x4c>
    7544:	83 ea       	ldi	r24, 0xA3	; 163
    7546:	9c e1       	ldi	r25, 0x1C	; 28
    7548:	a6 de       	rcall	.-692    	; 0x7296 <_reply2ReturnCode>
    754a:	1f 91       	pop	r17
    754c:	0f 91       	pop	r16
    754e:	08 95       	ret

00007550 <lora_driver_sendUploadMessage>:
    7550:	0f 93       	push	r16
    7552:	1f 93       	push	r17
    7554:	cf 93       	push	r28
    7556:	df 93       	push	r29
    7558:	1f 92       	push	r1
    755a:	cd b7       	in	r28, 0x3d	; 61
    755c:	de b7       	in	r29, 0x3e	; 62
    755e:	db 01       	movw	r26, r22
    7560:	11 96       	adiw	r26, 0x01	; 1
    7562:	9c 91       	ld	r25, X
    7564:	11 97       	sbiw	r26, 0x01	; 1
    7566:	95 31       	cpi	r25, 0x15	; 21
    7568:	08 f0       	brcs	.+2      	; 0x756c <lora_driver_sendUploadMessage+0x1c>
    756a:	b4 c0       	rjmp	.+360    	; 0x76d4 <lora_driver_sendUploadMessage+0x184>
    756c:	99 23       	and	r25, r25
    756e:	81 f1       	breq	.+96     	; 0x75d0 <lora_driver_sendUploadMessage+0x80>
    7570:	60 e0       	ldi	r22, 0x00	; 0
    7572:	70 e0       	ldi	r23, 0x00	; 0
    7574:	27 2f       	mov	r18, r23
    7576:	30 e0       	ldi	r19, 0x00	; 0
    7578:	46 2f       	mov	r20, r22
    757a:	50 e0       	ldi	r21, 0x00	; 0
    757c:	fd 01       	movw	r30, r26
    757e:	e4 0f       	add	r30, r20
    7580:	f5 1f       	adc	r31, r21
    7582:	92 81       	ldd	r25, Z+2	; 0x02
    7584:	92 95       	swap	r25
    7586:	9f 70       	andi	r25, 0x0F	; 15
    7588:	9a 30       	cpi	r25, 0x0A	; 10
    758a:	10 f0       	brcs	.+4      	; 0x7590 <lora_driver_sendUploadMessage+0x40>
    758c:	99 5c       	subi	r25, 0xC9	; 201
    758e:	01 c0       	rjmp	.+2      	; 0x7592 <lora_driver_sendUploadMessage+0x42>
    7590:	90 5d       	subi	r25, 0xD0	; 208
    7592:	f9 01       	movw	r30, r18
    7594:	ec 5c       	subi	r30, 0xCC	; 204
    7596:	f3 4e       	sbci	r31, 0xE3	; 227
    7598:	90 83       	st	Z, r25
    759a:	2f 5f       	subi	r18, 0xFF	; 255
    759c:	3f 4f       	sbci	r19, 0xFF	; 255
    759e:	fd 01       	movw	r30, r26
    75a0:	e4 0f       	add	r30, r20
    75a2:	f5 1f       	adc	r31, r21
    75a4:	92 81       	ldd	r25, Z+2	; 0x02
    75a6:	9f 70       	andi	r25, 0x0F	; 15
    75a8:	49 2f       	mov	r20, r25
    75aa:	50 e0       	ldi	r21, 0x00	; 0
    75ac:	4a 30       	cpi	r20, 0x0A	; 10
    75ae:	51 05       	cpc	r21, r1
    75b0:	14 f0       	brlt	.+4      	; 0x75b6 <lora_driver_sendUploadMessage+0x66>
    75b2:	99 5c       	subi	r25, 0xC9	; 201
    75b4:	01 c0       	rjmp	.+2      	; 0x75b8 <lora_driver_sendUploadMessage+0x68>
    75b6:	90 5d       	subi	r25, 0xD0	; 208
    75b8:	f9 01       	movw	r30, r18
    75ba:	ec 5c       	subi	r30, 0xCC	; 204
    75bc:	f3 4e       	sbci	r31, 0xE3	; 227
    75be:	90 83       	st	Z, r25
    75c0:	7e 5f       	subi	r23, 0xFE	; 254
    75c2:	6f 5f       	subi	r22, 0xFF	; 255
    75c4:	11 96       	adiw	r26, 0x01	; 1
    75c6:	9c 91       	ld	r25, X
    75c8:	11 97       	sbiw	r26, 0x01	; 1
    75ca:	69 17       	cp	r22, r25
    75cc:	98 f2       	brcs	.-90     	; 0x7574 <lora_driver_sendUploadMessage+0x24>
    75ce:	01 c0       	rjmp	.+2      	; 0x75d2 <lora_driver_sendUploadMessage+0x82>
    75d0:	70 e0       	ldi	r23, 0x00	; 0
    75d2:	e7 2f       	mov	r30, r23
    75d4:	f0 e0       	ldi	r31, 0x00	; 0
    75d6:	ec 5c       	subi	r30, 0xCC	; 204
    75d8:	f3 4e       	sbci	r31, 0xE3	; 227
    75da:	10 82       	st	Z, r1
    75dc:	4c 91       	ld	r20, X
    75de:	81 11       	cpse	r24, r1
    75e0:	03 c0       	rjmp	.+6      	; 0x75e8 <lora_driver_sendUploadMessage+0x98>
    75e2:	8a ef       	ldi	r24, 0xFA	; 250
    75e4:	9a e0       	ldi	r25, 0x0A	; 10
    75e6:	02 c0       	rjmp	.+4      	; 0x75ec <lora_driver_sendUploadMessage+0x9c>
    75e8:	8c ef       	ldi	r24, 0xFC	; 252
    75ea:	9a e0       	ldi	r25, 0x0A	; 10
    75ec:	24 e3       	ldi	r18, 0x34	; 52
    75ee:	3c e1       	ldi	r19, 0x1C	; 28
    75f0:	3f 93       	push	r19
    75f2:	2f 93       	push	r18
    75f4:	1f 92       	push	r1
    75f6:	4f 93       	push	r20
    75f8:	9f 93       	push	r25
    75fa:	8f 93       	push	r24
    75fc:	80 e0       	ldi	r24, 0x00	; 0
    75fe:	9b e0       	ldi	r25, 0x0B	; 11
    7600:	9f 93       	push	r25
    7602:	8f 93       	push	r24
    7604:	86 e7       	ldi	r24, 0x76	; 118
    7606:	9c e1       	ldi	r25, 0x1C	; 28
    7608:	9f 93       	push	r25
    760a:	8f 93       	push	r24
    760c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <sprintf>
    7610:	60 e0       	ldi	r22, 0x00	; 0
    7612:	70 e0       	ldi	r23, 0x00	; 0
    7614:	86 e7       	ldi	r24, 0x76	; 118
    7616:	9c e1       	ldi	r25, 0x1C	; 28
    7618:	b3 de       	rcall	.-666    	; 0x7380 <_uploadMessageRc>
    761a:	0f b6       	in	r0, 0x3f	; 63
    761c:	f8 94       	cli
    761e:	de bf       	out	0x3e, r29	; 62
    7620:	0f be       	out	0x3f, r0	; 63
    7622:	cd bf       	out	0x3d, r28	; 61
    7624:	81 11       	cpse	r24, r1
    7626:	59 c0       	rjmp	.+178    	; 0x76da <lora_driver_sendUploadMessage+0x18a>
    7628:	08 e2       	ldi	r16, 0x28	; 40
    762a:	15 e0       	ldi	r17, 0x05	; 5
    762c:	20 e0       	ldi	r18, 0x00	; 0
    762e:	30 e0       	ldi	r19, 0x00	; 0
    7630:	4d e2       	ldi	r20, 0x2D	; 45
    7632:	50 e0       	ldi	r21, 0x00	; 0
    7634:	63 ea       	ldi	r22, 0xA3	; 163
    7636:	7c e1       	ldi	r23, 0x1C	; 28
    7638:	80 91 1a 1c 	lds	r24, 0x1C1A	; 0x801c1a <_serialReplyBufferHandle>
    763c:	90 91 1b 1c 	lds	r25, 0x1C1B	; 0x801c1b <_serialReplyBufferHandle+0x1>
    7640:	0e 94 db 13 	call	0x27b6	; 0x27b6 <xStreamBufferReceive>
    7644:	88 23       	and	r24, r24
    7646:	09 f4       	brne	.+2      	; 0x764a <lora_driver_sendUploadMessage+0xfa>
    7648:	47 c0       	rjmp	.+142    	; 0x76d8 <lora_driver_sendUploadMessage+0x188>
    764a:	83 ea       	ldi	r24, 0xA3	; 163
    764c:	9c e1       	ldi	r25, 0x1C	; 28
    764e:	23 de       	rcall	.-954    	; 0x7296 <_reply2ReturnCode>
    7650:	8e 30       	cpi	r24, 0x0E	; 14
    7652:	09 f0       	breq	.+2      	; 0x7656 <lora_driver_sendUploadMessage+0x106>
    7654:	42 c0       	rjmp	.+132    	; 0x76da <lora_driver_sendUploadMessage+0x18a>
    7656:	87 e0       	ldi	r24, 0x07	; 7
    7658:	89 83       	std	Y+1, r24	; 0x01
    765a:	80 91 18 1c 	lds	r24, 0x1C18	; 0x801c18 <_downlinkMessageBuffer>
    765e:	90 91 19 1c 	lds	r25, 0x1C19	; 0x801c19 <_downlinkMessageBuffer+0x1>
    7662:	89 2b       	or	r24, r25
    7664:	a9 f1       	breq	.+106    	; 0x76d0 <lora_driver_sendUploadMessage+0x180>
    7666:	be 01       	movw	r22, r28
    7668:	6f 5f       	subi	r22, 0xFF	; 255
    766a:	7f 4f       	sbci	r23, 0xFF	; 255
    766c:	83 ea       	ldi	r24, 0xA3	; 163
    766e:	9c e1       	ldi	r25, 0x1C	; 28
    7670:	68 d1       	rcall	.+720    	; 0x7942 <decode_port_no>
    7672:	80 93 1e 1c 	sts	0x1C1E, r24	; 0x801c1e <_downlinkPayload>
    7676:	e9 81       	ldd	r30, Y+1	; 0x01
    7678:	f0 e0       	ldi	r31, 0x00	; 0
    767a:	ed 55       	subi	r30, 0x5D	; 93
    767c:	f3 4e       	sbci	r31, 0xE3	; 227
    767e:	df 01       	movw	r26, r30
    7680:	0d 90       	ld	r0, X+
    7682:	00 20       	and	r0, r0
    7684:	e9 f7       	brne	.-6      	; 0x7680 <lora_driver_sendUploadMessage+0x130>
    7686:	11 97       	sbiw	r26, 0x01	; 1
    7688:	ae 1b       	sub	r26, r30
    768a:	bf 0b       	sbc	r27, r31
    768c:	aa 23       	and	r26, r26
    768e:	91 f0       	breq	.+36     	; 0x76b4 <lora_driver_sendUploadMessage+0x164>
    7690:	bb 27       	eor	r27, r27
    7692:	cd 01       	movw	r24, r26
    7694:	01 97       	sbiw	r24, 0x01	; 1
    7696:	9c 01       	movw	r18, r24
    7698:	12 f4       	brpl	.+4      	; 0x769e <lora_driver_sendUploadMessage+0x14e>
    769a:	2f 5f       	subi	r18, 0xFF	; 255
    769c:	3f 4f       	sbci	r19, 0xFF	; 255
    769e:	35 95       	asr	r19
    76a0:	27 95       	ror	r18
    76a2:	20 93 1f 1c 	sts	0x1C1F, r18	; 0x801c1f <_downlinkPayload+0x1>
    76a6:	af 01       	movw	r20, r30
    76a8:	4f 5f       	subi	r20, 0xFF	; 255
    76aa:	5f 4f       	sbci	r21, 0xFF	; 255
    76ac:	64 e1       	ldi	r22, 0x14	; 20
    76ae:	80 e2       	ldi	r24, 0x20	; 32
    76b0:	9c e1       	ldi	r25, 0x1C	; 28
    76b2:	73 d1       	rcall	.+742    	; 0x799a <decode_hexadecimal_string_bytes>
    76b4:	01 e0       	ldi	r16, 0x01	; 1
    76b6:	10 e0       	ldi	r17, 0x00	; 0
    76b8:	20 e0       	ldi	r18, 0x00	; 0
    76ba:	30 e0       	ldi	r19, 0x00	; 0
    76bc:	46 e1       	ldi	r20, 0x16	; 22
    76be:	50 e0       	ldi	r21, 0x00	; 0
    76c0:	6e e1       	ldi	r22, 0x1E	; 30
    76c2:	7c e1       	ldi	r23, 0x1C	; 28
    76c4:	80 91 18 1c 	lds	r24, 0x1C18	; 0x801c18 <_downlinkMessageBuffer>
    76c8:	90 91 19 1c 	lds	r25, 0x1C19	; 0x801c19 <_downlinkMessageBuffer+0x1>
    76cc:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <xStreamBufferSend>
    76d0:	8e e0       	ldi	r24, 0x0E	; 14
    76d2:	03 c0       	rjmp	.+6      	; 0x76da <lora_driver_sendUploadMessage+0x18a>
    76d4:	84 e1       	ldi	r24, 0x14	; 20
    76d6:	01 c0       	rjmp	.+2      	; 0x76da <lora_driver_sendUploadMessage+0x18a>
    76d8:	80 e0       	ldi	r24, 0x00	; 0
    76da:	0f 90       	pop	r0
    76dc:	df 91       	pop	r29
    76de:	cf 91       	pop	r28
    76e0:	1f 91       	pop	r17
    76e2:	0f 91       	pop	r16
    76e4:	08 95       	ret

000076e6 <lora_driver_setAdaptiveDataRate>:
    76e6:	81 30       	cpi	r24, 0x01	; 1
    76e8:	19 f0       	breq	.+6      	; 0x76f0 <lora_driver_setAdaptiveDataRate+0xa>
    76ea:	60 e1       	ldi	r22, 0x10	; 16
    76ec:	7b e0       	ldi	r23, 0x0B	; 11
    76ee:	02 c0       	rjmp	.+4      	; 0x76f4 <lora_driver_setAdaptiveDataRate+0xe>
    76f0:	69 ee       	ldi	r22, 0xE9	; 233
    76f2:	7b e0       	ldi	r23, 0x0B	; 11
    76f4:	84 e1       	ldi	r24, 0x14	; 20
    76f6:	9b e0       	ldi	r25, 0x0B	; 11
    76f8:	43 ce       	rjmp	.-890    	; 0x7380 <_uploadMessageRc>
    76fa:	08 95       	ret

000076fc <lora_driver_setReceiveDelay>:
    76fc:	9f 93       	push	r25
    76fe:	8f 93       	push	r24
    7700:	85 e4       	ldi	r24, 0x45	; 69
    7702:	9b e0       	ldi	r25, 0x0B	; 11
    7704:	9f 93       	push	r25
    7706:	8f 93       	push	r24
    7708:	86 e7       	ldi	r24, 0x76	; 118
    770a:	9c e1       	ldi	r25, 0x1C	; 28
    770c:	9f 93       	push	r25
    770e:	8f 93       	push	r24
    7710:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <sprintf>
    7714:	60 e0       	ldi	r22, 0x00	; 0
    7716:	70 e0       	ldi	r23, 0x00	; 0
    7718:	86 e7       	ldi	r24, 0x76	; 118
    771a:	9c e1       	ldi	r25, 0x1C	; 28
    771c:	31 de       	rcall	.-926    	; 0x7380 <_uploadMessageRc>
    771e:	0f 90       	pop	r0
    7720:	0f 90       	pop	r0
    7722:	0f 90       	pop	r0
    7724:	0f 90       	pop	r0
    7726:	0f 90       	pop	r0
    7728:	0f 90       	pop	r0
    772a:	08 95       	ret

0000772c <lora_driver_configureToEu868>:
    772c:	2f 92       	push	r2
    772e:	3f 92       	push	r3
    7730:	4f 92       	push	r4
    7732:	5f 92       	push	r5
    7734:	6f 92       	push	r6
    7736:	7f 92       	push	r7
    7738:	8f 92       	push	r8
    773a:	9f 92       	push	r9
    773c:	af 92       	push	r10
    773e:	bf 92       	push	r11
    7740:	cf 92       	push	r12
    7742:	df 92       	push	r13
    7744:	ef 92       	push	r14
    7746:	ff 92       	push	r15
    7748:	0f 93       	push	r16
    774a:	1f 93       	push	r17
    774c:	cf 93       	push	r28
    774e:	df 93       	push	r29
    7750:	cd b7       	in	r28, 0x3d	; 61
    7752:	de b7       	in	r29, 0x3e	; 62
    7754:	a0 97       	sbiw	r28, 0x20	; 32
    7756:	0f b6       	in	r0, 0x3f	; 63
    7758:	f8 94       	cli
    775a:	de bf       	out	0x3e, r29	; 62
    775c:	0f be       	out	0x3f, r0	; 63
    775e:	cd bf       	out	0x3d, r28	; 61
    7760:	62 e7       	ldi	r22, 0x72	; 114
    7762:	7b e0       	ldi	r23, 0x0B	; 11
    7764:	8e e7       	ldi	r24, 0x7E	; 126
    7766:	9b e0       	ldi	r25, 0x0B	; 11
    7768:	3c dd       	rcall	.-1416   	; 0x71e2 <_uploadMessage>
    776a:	95 dd       	rcall	.-1238   	; 0x7296 <_reply2ReturnCode>
    776c:	81 11       	cpse	r24, r1
    776e:	a3 c0       	rjmp	.+326    	; 0x78b6 <lora_driver_configureToEu868+0x18a>
    7770:	80 e2       	ldi	r24, 0x20	; 32
    7772:	e0 ee       	ldi	r30, 0xE0	; 224
    7774:	f9 e0       	ldi	r31, 0x09	; 9
    7776:	de 01       	movw	r26, r28
    7778:	11 96       	adiw	r26, 0x01	; 1
    777a:	01 90       	ld	r0, Z+
    777c:	0d 92       	st	X+, r0
    777e:	8a 95       	dec	r24
    7780:	e1 f7       	brne	.-8      	; 0x777a <lora_driver_configureToEu868+0x4e>
    7782:	9e 01       	movw	r18, r28
    7784:	2f 5f       	subi	r18, 0xFF	; 255
    7786:	3f 4f       	sbci	r19, 0xFF	; 255
    7788:	69 01       	movw	r12, r18
    778a:	e1 2c       	mov	r14, r1
    778c:	f1 2c       	mov	r15, r1
    778e:	0f 2e       	mov	r0, r31
    7790:	fa e8       	ldi	r31, 0x8A	; 138
    7792:	af 2e       	mov	r10, r31
    7794:	fb e0       	ldi	r31, 0x0B	; 11
    7796:	bf 2e       	mov	r11, r31
    7798:	f0 2d       	mov	r31, r0
    779a:	06 e7       	ldi	r16, 0x76	; 118
    779c:	1c e1       	ldi	r17, 0x1C	; 28
    779e:	0f 2e       	mov	r0, r31
    77a0:	f3 ea       	ldi	r31, 0xA3	; 163
    77a2:	4f 2e       	mov	r4, r31
    77a4:	fb e0       	ldi	r31, 0x0B	; 11
    77a6:	5f 2e       	mov	r5, r31
    77a8:	f0 2d       	mov	r31, r0
    77aa:	0f 2e       	mov	r0, r31
    77ac:	fa eb       	ldi	r31, 0xBA	; 186
    77ae:	8f 2e       	mov	r8, r31
    77b0:	fb e0       	ldi	r31, 0x0B	; 11
    77b2:	9f 2e       	mov	r9, r31
    77b4:	f0 2d       	mov	r31, r0
    77b6:	0f 2e       	mov	r0, r31
    77b8:	f4 ed       	ldi	r31, 0xD4	; 212
    77ba:	6f 2e       	mov	r6, r31
    77bc:	fb e0       	ldi	r31, 0x0B	; 11
    77be:	7f 2e       	mov	r7, r31
    77c0:	f0 2d       	mov	r31, r0
    77c2:	3e 2c       	mov	r3, r14
    77c4:	2f 2c       	mov	r2, r15
    77c6:	ff 92       	push	r15
    77c8:	ef 92       	push	r14
    77ca:	bf 92       	push	r11
    77cc:	af 92       	push	r10
    77ce:	1f 93       	push	r17
    77d0:	0f 93       	push	r16
    77d2:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <sprintf>
    77d6:	60 e0       	ldi	r22, 0x00	; 0
    77d8:	70 e0       	ldi	r23, 0x00	; 0
    77da:	c8 01       	movw	r24, r16
    77dc:	02 dd       	rcall	.-1532   	; 0x71e2 <_uploadMessage>
    77de:	5b dd       	rcall	.-1354   	; 0x7296 <_reply2ReturnCode>
    77e0:	0f 90       	pop	r0
    77e2:	0f 90       	pop	r0
    77e4:	0f 90       	pop	r0
    77e6:	0f 90       	pop	r0
    77e8:	0f 90       	pop	r0
    77ea:	0f 90       	pop	r0
    77ec:	81 11       	cpse	r24, r1
    77ee:	63 c0       	rjmp	.+198    	; 0x78b6 <lora_driver_configureToEu868+0x18a>
    77f0:	32 e0       	ldi	r19, 0x02	; 2
    77f2:	3e 15       	cp	r19, r14
    77f4:	e8 f4       	brcc	.+58     	; 0x7830 <lora_driver_configureToEu868+0x104>
    77f6:	f6 01       	movw	r30, r12
    77f8:	83 81       	ldd	r24, Z+3	; 0x03
    77fa:	8f 93       	push	r24
    77fc:	82 81       	ldd	r24, Z+2	; 0x02
    77fe:	8f 93       	push	r24
    7800:	81 81       	ldd	r24, Z+1	; 0x01
    7802:	8f 93       	push	r24
    7804:	80 81       	ld	r24, Z
    7806:	8f 93       	push	r24
    7808:	ff 92       	push	r15
    780a:	ef 92       	push	r14
    780c:	5f 92       	push	r5
    780e:	4f 92       	push	r4
    7810:	1f 93       	push	r17
    7812:	0f 93       	push	r16
    7814:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <sprintf>
    7818:	60 e0       	ldi	r22, 0x00	; 0
    781a:	70 e0       	ldi	r23, 0x00	; 0
    781c:	c8 01       	movw	r24, r16
    781e:	e1 dc       	rcall	.-1598   	; 0x71e2 <_uploadMessage>
    7820:	3a dd       	rcall	.-1420   	; 0x7296 <_reply2ReturnCode>
    7822:	0f b6       	in	r0, 0x3f	; 63
    7824:	f8 94       	cli
    7826:	de bf       	out	0x3e, r29	; 62
    7828:	0f be       	out	0x3f, r0	; 63
    782a:	cd bf       	out	0x3d, r28	; 61
    782c:	81 11       	cpse	r24, r1
    782e:	43 c0       	rjmp	.+134    	; 0x78b6 <lora_driver_configureToEu868+0x18a>
    7830:	2f 92       	push	r2
    7832:	3f 92       	push	r3
    7834:	9f 92       	push	r9
    7836:	8f 92       	push	r8
    7838:	1f 93       	push	r17
    783a:	0f 93       	push	r16
    783c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <sprintf>
    7840:	60 e0       	ldi	r22, 0x00	; 0
    7842:	70 e0       	ldi	r23, 0x00	; 0
    7844:	c8 01       	movw	r24, r16
    7846:	cd dc       	rcall	.-1638   	; 0x71e2 <_uploadMessage>
    7848:	26 dd       	rcall	.-1460   	; 0x7296 <_reply2ReturnCode>
    784a:	0f 90       	pop	r0
    784c:	0f 90       	pop	r0
    784e:	0f 90       	pop	r0
    7850:	0f 90       	pop	r0
    7852:	0f 90       	pop	r0
    7854:	0f 90       	pop	r0
    7856:	81 11       	cpse	r24, r1
    7858:	2e c0       	rjmp	.+92     	; 0x78b6 <lora_driver_configureToEu868+0x18a>
    785a:	2f 92       	push	r2
    785c:	3f 92       	push	r3
    785e:	7f 92       	push	r7
    7860:	6f 92       	push	r6
    7862:	1f 93       	push	r17
    7864:	0f 93       	push	r16
    7866:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <sprintf>
    786a:	60 e0       	ldi	r22, 0x00	; 0
    786c:	70 e0       	ldi	r23, 0x00	; 0
    786e:	c8 01       	movw	r24, r16
    7870:	b8 dc       	rcall	.-1680   	; 0x71e2 <_uploadMessage>
    7872:	11 dd       	rcall	.-1502   	; 0x7296 <_reply2ReturnCode>
    7874:	0f 90       	pop	r0
    7876:	0f 90       	pop	r0
    7878:	0f 90       	pop	r0
    787a:	0f 90       	pop	r0
    787c:	0f 90       	pop	r0
    787e:	0f 90       	pop	r0
    7880:	81 11       	cpse	r24, r1
    7882:	19 c0       	rjmp	.+50     	; 0x78b6 <lora_driver_configureToEu868+0x18a>
    7884:	3f ef       	ldi	r19, 0xFF	; 255
    7886:	e3 1a       	sub	r14, r19
    7888:	f3 0a       	sbc	r15, r19
    788a:	84 e0       	ldi	r24, 0x04	; 4
    788c:	c8 0e       	add	r12, r24
    788e:	d1 1c       	adc	r13, r1
    7890:	98 e0       	ldi	r25, 0x08	; 8
    7892:	e9 16       	cp	r14, r25
    7894:	f1 04       	cpc	r15, r1
    7896:	09 f0       	breq	.+2      	; 0x789a <lora_driver_configureToEu868+0x16e>
    7898:	94 cf       	rjmp	.-216    	; 0x77c2 <lora_driver_configureToEu868+0x96>
    789a:	60 e0       	ldi	r22, 0x00	; 0
    789c:	70 e0       	ldi	r23, 0x00	; 0
    789e:	8c ee       	ldi	r24, 0xEC	; 236
    78a0:	9b e0       	ldi	r25, 0x0B	; 11
    78a2:	9f dc       	rcall	.-1730   	; 0x71e2 <_uploadMessage>
    78a4:	f8 dc       	rcall	.-1552   	; 0x7296 <_reply2ReturnCode>
    78a6:	81 11       	cpse	r24, r1
    78a8:	06 c0       	rjmp	.+12     	; 0x78b6 <lora_driver_configureToEu868+0x18a>
    78aa:	60 e0       	ldi	r22, 0x00	; 0
    78ac:	70 e0       	ldi	r23, 0x00	; 0
    78ae:	8d ef       	ldi	r24, 0xFD	; 253
    78b0:	9b e0       	ldi	r25, 0x0B	; 11
    78b2:	97 dc       	rcall	.-1746   	; 0x71e2 <_uploadMessage>
    78b4:	f0 dc       	rcall	.-1568   	; 0x7296 <_reply2ReturnCode>
    78b6:	a0 96       	adiw	r28, 0x20	; 32
    78b8:	0f b6       	in	r0, 0x3f	; 63
    78ba:	f8 94       	cli
    78bc:	de bf       	out	0x3e, r29	; 62
    78be:	0f be       	out	0x3f, r0	; 63
    78c0:	cd bf       	out	0x3d, r28	; 61
    78c2:	df 91       	pop	r29
    78c4:	cf 91       	pop	r28
    78c6:	1f 91       	pop	r17
    78c8:	0f 91       	pop	r16
    78ca:	ff 90       	pop	r15
    78cc:	ef 90       	pop	r14
    78ce:	df 90       	pop	r13
    78d0:	cf 90       	pop	r12
    78d2:	bf 90       	pop	r11
    78d4:	af 90       	pop	r10
    78d6:	9f 90       	pop	r9
    78d8:	8f 90       	pop	r8
    78da:	7f 90       	pop	r7
    78dc:	6f 90       	pop	r6
    78de:	5f 90       	pop	r5
    78e0:	4f 90       	pop	r4
    78e2:	3f 90       	pop	r3
    78e4:	2f 90       	pop	r2
    78e6:	08 95       	ret

000078e8 <lora_driver_setOtaaIdentity>:
    78e8:	ef 92       	push	r14
    78ea:	ff 92       	push	r15
    78ec:	0f 93       	push	r16
    78ee:	1f 93       	push	r17
    78f0:	cf 93       	push	r28
    78f2:	df 93       	push	r29
    78f4:	ec 01       	movw	r28, r24
    78f6:	8b 01       	movw	r16, r22
    78f8:	7a 01       	movw	r14, r20
    78fa:	81 e0       	ldi	r24, 0x01	; 1
    78fc:	f4 de       	rcall	.-536    	; 0x76e6 <lora_driver_setAdaptiveDataRate>
    78fe:	81 11       	cpse	r24, r1
    7900:	0d c0       	rjmp	.+26     	; 0x791c <lora_driver_setOtaaIdentity+0x34>
    7902:	ce 01       	movw	r24, r28
    7904:	d4 dd       	rcall	.-1112   	; 0x74ae <lora_driver_setApplicationIdentifier>
    7906:	81 11       	cpse	r24, r1
    7908:	09 c0       	rjmp	.+18     	; 0x791c <lora_driver_setOtaaIdentity+0x34>
    790a:	c8 01       	movw	r24, r16
    790c:	e1 dd       	rcall	.-1086   	; 0x74d0 <lora_driver_setApplicationKey>
    790e:	81 11       	cpse	r24, r1
    7910:	05 c0       	rjmp	.+10     	; 0x791c <lora_driver_setOtaaIdentity+0x34>
    7912:	c7 01       	movw	r24, r14
    7914:	bb dd       	rcall	.-1162   	; 0x748c <lora_driver_setDeviceIdentifier>
    7916:	81 11       	cpse	r24, r1
    7918:	01 c0       	rjmp	.+2      	; 0x791c <lora_driver_setOtaaIdentity+0x34>
    791a:	eb dd       	rcall	.-1066   	; 0x74f2 <lora_driver_saveMac>
    791c:	df 91       	pop	r29
    791e:	cf 91       	pop	r28
    7920:	1f 91       	pop	r17
    7922:	0f 91       	pop	r16
    7924:	ff 90       	pop	r15
    7926:	ef 90       	pop	r14
    7928:	08 95       	ret

0000792a <lora_driver_mapReturnCodeToText>:
    792a:	90 e0       	ldi	r25, 0x00	; 0
    792c:	fc 01       	movw	r30, r24
    792e:	ee 0f       	add	r30, r30
    7930:	ff 1f       	adc	r31, r31
    7932:	8e 0f       	add	r24, r30
    7934:	9f 1f       	adc	r25, r31
    7936:	fc 01       	movw	r30, r24
    7938:	ea 53       	subi	r30, 0x3A	; 58
    793a:	f3 4f       	sbci	r31, 0xF3	; 243
    793c:	81 81       	ldd	r24, Z+1	; 0x01
    793e:	92 81       	ldd	r25, Z+2	; 0x02
    7940:	08 95       	ret

00007942 <decode_port_no>:
    7942:	dc 01       	movw	r26, r24
    7944:	00 97       	sbiw	r24, 0x00	; 0
    7946:	29 f1       	breq	.+74     	; 0x7992 <decode_port_no+0x50>
    7948:	fb 01       	movw	r30, r22
    794a:	20 81       	ld	r18, Z
    794c:	fc 01       	movw	r30, r24
    794e:	01 90       	ld	r0, Z+
    7950:	00 20       	and	r0, r0
    7952:	e9 f7       	brne	.-6      	; 0x794e <decode_port_no+0xc>
    7954:	31 97       	sbiw	r30, 0x01	; 1
    7956:	e8 1b       	sub	r30, r24
    7958:	f9 0b       	sbc	r31, r25
    795a:	82 2f       	mov	r24, r18
    795c:	90 e0       	ldi	r25, 0x00	; 0
    795e:	e8 17       	cp	r30, r24
    7960:	f9 07       	cpc	r31, r25
    7962:	c8 f0       	brcs	.+50     	; 0x7996 <decode_port_no+0x54>
    7964:	80 e0       	ldi	r24, 0x00	; 0
    7966:	08 c0       	rjmp	.+16     	; 0x7978 <decode_port_no+0x36>
    7968:	88 0f       	add	r24, r24
    796a:	38 2f       	mov	r19, r24
    796c:	33 0f       	add	r19, r19
    796e:	33 0f       	add	r19, r19
    7970:	83 0f       	add	r24, r19
    7972:	80 53       	subi	r24, 0x30	; 48
    7974:	89 0f       	add	r24, r25
    7976:	2f 5f       	subi	r18, 0xFF	; 255
    7978:	fd 01       	movw	r30, r26
    797a:	e2 0f       	add	r30, r18
    797c:	f1 1d       	adc	r31, r1
    797e:	90 81       	ld	r25, Z
    7980:	30 ed       	ldi	r19, 0xD0	; 208
    7982:	39 0f       	add	r19, r25
    7984:	3a 30       	cpi	r19, 0x0A	; 10
    7986:	10 f4       	brcc	.+4      	; 0x798c <decode_port_no+0x4a>
    7988:	91 11       	cpse	r25, r1
    798a:	ee cf       	rjmp	.-36     	; 0x7968 <decode_port_no+0x26>
    798c:	fb 01       	movw	r30, r22
    798e:	20 83       	st	Z, r18
    7990:	08 95       	ret
    7992:	80 e0       	ldi	r24, 0x00	; 0
    7994:	08 95       	ret
    7996:	80 e0       	ldi	r24, 0x00	; 0
    7998:	08 95       	ret

0000799a <decode_hexadecimal_string_bytes>:
    799a:	0f 93       	push	r16
    799c:	1f 93       	push	r17
    799e:	cf 93       	push	r28
    79a0:	df 93       	push	r29
    79a2:	dc 01       	movw	r26, r24
    79a4:	ea 01       	movw	r28, r20
    79a6:	20 97       	sbiw	r28, 0x00	; 0
    79a8:	e1 f1       	breq	.+120    	; 0x7a22 <decode_hexadecimal_string_bytes+0x88>
    79aa:	fa 01       	movw	r30, r20
    79ac:	01 90       	ld	r0, Z+
    79ae:	00 20       	and	r0, r0
    79b0:	e9 f7       	brne	.-6      	; 0x79ac <decode_hexadecimal_string_bytes+0x12>
    79b2:	31 97       	sbiw	r30, 0x01	; 1
    79b4:	e4 1b       	sub	r30, r20
    79b6:	f5 0b       	sbc	r31, r21
    79b8:	32 97       	sbiw	r30, 0x02	; 2
    79ba:	10 f5       	brcc	.+68     	; 0x7a00 <decode_hexadecimal_string_bytes+0x66>
    79bc:	32 c0       	rjmp	.+100    	; 0x7a22 <decode_hexadecimal_string_bytes+0x88>
    79be:	8d 01       	movw	r16, r26
    79c0:	04 0f       	add	r16, r20
    79c2:	15 1f       	adc	r17, r21
    79c4:	30 e0       	ldi	r19, 0x00	; 0
    79c6:	ae 01       	movw	r20, r28
    79c8:	42 0f       	add	r20, r18
    79ca:	53 1f       	adc	r21, r19
    79cc:	fa 01       	movw	r30, r20
    79ce:	90 81       	ld	r25, Z
    79d0:	91 34       	cpi	r25, 0x41	; 65
    79d2:	28 f0       	brcs	.+10     	; 0x79de <decode_hexadecimal_string_bytes+0x44>
    79d4:	97 53       	subi	r25, 0x37	; 55
    79d6:	59 2f       	mov	r21, r25
    79d8:	52 95       	swap	r21
    79da:	50 7f       	andi	r21, 0xF0	; 240
    79dc:	03 c0       	rjmp	.+6      	; 0x79e4 <decode_hexadecimal_string_bytes+0x4a>
    79de:	59 2f       	mov	r21, r25
    79e0:	52 95       	swap	r21
    79e2:	50 7f       	andi	r21, 0xF0	; 240
    79e4:	2c 0f       	add	r18, r28
    79e6:	3d 1f       	adc	r19, r29
    79e8:	f9 01       	movw	r30, r18
    79ea:	91 81       	ldd	r25, Z+1	; 0x01
    79ec:	91 34       	cpi	r25, 0x41	; 65
    79ee:	10 f0       	brcs	.+4      	; 0x79f4 <decode_hexadecimal_string_bytes+0x5a>
    79f0:	97 53       	subi	r25, 0x37	; 55
    79f2:	01 c0       	rjmp	.+2      	; 0x79f6 <decode_hexadecimal_string_bytes+0x5c>
    79f4:	90 53       	subi	r25, 0x30	; 48
    79f6:	95 0f       	add	r25, r21
    79f8:	f8 01       	movw	r30, r16
    79fa:	90 83       	st	Z, r25
    79fc:	8f 5f       	subi	r24, 0xFF	; 255
    79fe:	01 c0       	rjmp	.+2      	; 0x7a02 <decode_hexadecimal_string_bytes+0x68>
    7a00:	80 e0       	ldi	r24, 0x00	; 0
    7a02:	28 2f       	mov	r18, r24
    7a04:	22 0f       	add	r18, r18
    7a06:	48 2f       	mov	r20, r24
    7a08:	50 e0       	ldi	r21, 0x00	; 0
    7a0a:	fe 01       	movw	r30, r28
    7a0c:	01 90       	ld	r0, Z+
    7a0e:	00 20       	and	r0, r0
    7a10:	e9 f7       	brne	.-6      	; 0x7a0c <decode_hexadecimal_string_bytes+0x72>
    7a12:	31 97       	sbiw	r30, 0x01	; 1
    7a14:	ec 1b       	sub	r30, r28
    7a16:	fd 0b       	sbc	r31, r29
    7a18:	4e 17       	cp	r20, r30
    7a1a:	5f 07       	cpc	r21, r31
    7a1c:	10 f4       	brcc	.+4      	; 0x7a22 <decode_hexadecimal_string_bytes+0x88>
    7a1e:	86 13       	cpse	r24, r22
    7a20:	ce cf       	rjmp	.-100    	; 0x79be <decode_hexadecimal_string_bytes+0x24>
    7a22:	df 91       	pop	r29
    7a24:	cf 91       	pop	r28
    7a26:	1f 91       	pop	r17
    7a28:	0f 91       	pop	r16
    7a2a:	08 95       	ret

00007a2c <_serialCallBack>:
    7a2c:	80 91 d3 1c 	lds	r24, 0x1CD3	; 0x801cd3 <crc_sum.1945>
    7a30:	86 0f       	add	r24, r22
    7a32:	80 93 d3 1c 	sts	0x1CD3, r24	; 0x801cd3 <crc_sum.1945>
    7a36:	90 91 d6 1c 	lds	r25, 0x1CD6	; 0x801cd6 <_mh_state>
    7a3a:	91 30       	cpi	r25, 0x01	; 1
    7a3c:	79 f0       	breq	.+30     	; 0x7a5c <_serialCallBack+0x30>
    7a3e:	28 f0       	brcs	.+10     	; 0x7a4a <_serialCallBack+0x1e>
    7a40:	92 30       	cpi	r25, 0x02	; 2
    7a42:	a9 f0       	breq	.+42     	; 0x7a6e <_serialCallBack+0x42>
    7a44:	93 30       	cpi	r25, 0x03	; 3
    7a46:	19 f1       	breq	.+70     	; 0x7a8e <_serialCallBack+0x62>
    7a48:	08 95       	ret
    7a4a:	6f 3f       	cpi	r22, 0xFF	; 255
    7a4c:	09 f0       	breq	.+2      	; 0x7a50 <_serialCallBack+0x24>
    7a4e:	48 c0       	rjmp	.+144    	; 0x7ae0 <_serialCallBack+0xb4>
    7a50:	10 92 d3 1c 	sts	0x1CD3, r1	; 0x801cd3 <crc_sum.1945>
    7a54:	81 e0       	ldi	r24, 0x01	; 1
    7a56:	80 93 d6 1c 	sts	0x1CD6, r24	; 0x801cd6 <_mh_state>
    7a5a:	08 95       	ret
    7a5c:	66 38       	cpi	r22, 0x86	; 134
    7a5e:	09 f0       	breq	.+2      	; 0x7a62 <_serialCallBack+0x36>
    7a60:	3f c0       	rjmp	.+126    	; 0x7ae0 <_serialCallBack+0xb4>
    7a62:	10 92 d2 1c 	sts	0x1CD2, r1	; 0x801cd2 <inDex.1943>
    7a66:	82 e0       	ldi	r24, 0x02	; 2
    7a68:	80 93 d6 1c 	sts	0x1CD6, r24	; 0x801cd6 <_mh_state>
    7a6c:	08 95       	ret
    7a6e:	e0 91 d2 1c 	lds	r30, 0x1CD2	; 0x801cd2 <inDex.1943>
    7a72:	81 e0       	ldi	r24, 0x01	; 1
    7a74:	8e 0f       	add	r24, r30
    7a76:	80 93 d2 1c 	sts	0x1CD2, r24	; 0x801cd2 <inDex.1943>
    7a7a:	f0 e0       	ldi	r31, 0x00	; 0
    7a7c:	e0 53       	subi	r30, 0x30	; 48
    7a7e:	f3 4e       	sbci	r31, 0xE3	; 227
    7a80:	60 83       	st	Z, r22
    7a82:	82 30       	cpi	r24, 0x02	; 2
    7a84:	69 f5       	brne	.+90     	; 0x7ae0 <_serialCallBack+0xb4>
    7a86:	83 e0       	ldi	r24, 0x03	; 3
    7a88:	80 93 d6 1c 	sts	0x1CD6, r24	; 0x801cd6 <_mh_state>
    7a8c:	08 95       	ret
    7a8e:	90 91 d2 1c 	lds	r25, 0x1CD2	; 0x801cd2 <inDex.1943>
    7a92:	21 e0       	ldi	r18, 0x01	; 1
    7a94:	29 0f       	add	r18, r25
    7a96:	20 93 d2 1c 	sts	0x1CD2, r18	; 0x801cd2 <inDex.1943>
    7a9a:	96 30       	cpi	r25, 0x06	; 6
    7a9c:	09 f5       	brne	.+66     	; 0x7ae0 <_serialCallBack+0xb4>
    7a9e:	81 11       	cpse	r24, r1
    7aa0:	0e c0       	rjmp	.+28     	; 0x7abe <_serialCallBack+0x92>
    7aa2:	e0 ed       	ldi	r30, 0xD0	; 208
    7aa4:	fc e1       	ldi	r31, 0x1C	; 28
    7aa6:	80 81       	ld	r24, Z
    7aa8:	90 e0       	ldi	r25, 0x00	; 0
    7aaa:	98 2f       	mov	r25, r24
    7aac:	88 27       	eor	r24, r24
    7aae:	21 81       	ldd	r18, Z+1	; 0x01
    7ab0:	82 0f       	add	r24, r18
    7ab2:	91 1d       	adc	r25, r1
    7ab4:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <_ppm+0x1>
    7ab8:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <_ppm>
    7abc:	04 c0       	rjmp	.+8      	; 0x7ac6 <_serialCallBack+0x9a>
    7abe:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <_ppm+0x1>
    7ac2:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <_ppm>
    7ac6:	10 92 d6 1c 	sts	0x1CD6, r1	; 0x801cd6 <_mh_state>
    7aca:	e0 91 d4 1c 	lds	r30, 0x1CD4	; 0x801cd4 <_appCallBack>
    7ace:	f0 91 d5 1c 	lds	r31, 0x1CD5	; 0x801cd5 <_appCallBack+0x1>
    7ad2:	30 97       	sbiw	r30, 0x00	; 0
    7ad4:	29 f0       	breq	.+10     	; 0x7ae0 <_serialCallBack+0xb4>
    7ad6:	80 91 d7 1c 	lds	r24, 0x1CD7	; 0x801cd7 <_ppm>
    7ada:	90 91 d8 1c 	lds	r25, 0x1CD8	; 0x801cd8 <_ppm+0x1>
    7ade:	19 95       	eicall
    7ae0:	08 95       	ret

00007ae2 <mh_z19_initialise>:
    7ae2:	8f 92       	push	r8
    7ae4:	9f 92       	push	r9
    7ae6:	af 92       	push	r10
    7ae8:	cf 92       	push	r12
    7aea:	ef 92       	push	r14
    7aec:	0f 93       	push	r16
    7aee:	0f 2e       	mov	r0, r31
    7af0:	f6 e1       	ldi	r31, 0x16	; 22
    7af2:	8f 2e       	mov	r8, r31
    7af4:	fd e3       	ldi	r31, 0x3D	; 61
    7af6:	9f 2e       	mov	r9, r31
    7af8:	f0 2d       	mov	r31, r0
    7afa:	68 94       	set
    7afc:	aa 24       	eor	r10, r10
    7afe:	a4 f8       	bld	r10, 4
    7b00:	68 94       	set
    7b02:	cc 24       	eor	r12, r12
    7b04:	c4 f8       	bld	r12, 4
    7b06:	e1 2c       	mov	r14, r1
    7b08:	00 e0       	ldi	r16, 0x00	; 0
    7b0a:	23 e0       	ldi	r18, 0x03	; 3
    7b0c:	40 e8       	ldi	r20, 0x80	; 128
    7b0e:	55 e2       	ldi	r21, 0x25	; 37
    7b10:	60 e0       	ldi	r22, 0x00	; 0
    7b12:	70 e0       	ldi	r23, 0x00	; 0
    7b14:	84 d0       	rcall	.+264    	; 0x7c1e <serial_create>
    7b16:	90 93 da 1c 	sts	0x1CDA, r25	; 0x801cda <_serial+0x1>
    7b1a:	80 93 d9 1c 	sts	0x1CD9, r24	; 0x801cd9 <_serial>
    7b1e:	0f 91       	pop	r16
    7b20:	ef 90       	pop	r14
    7b22:	cf 90       	pop	r12
    7b24:	af 90       	pop	r10
    7b26:	9f 90       	pop	r9
    7b28:	8f 90       	pop	r8
    7b2a:	08 95       	ret

00007b2c <mh_z19_injectCallBack>:
    7b2c:	90 93 d5 1c 	sts	0x1CD5, r25	; 0x801cd5 <_appCallBack+0x1>
    7b30:	80 93 d4 1c 	sts	0x1CD4, r24	; 0x801cd4 <_appCallBack>
    7b34:	08 95       	ret

00007b36 <mh_z19_takeMeassuring>:
    7b36:	cf 93       	push	r28
    7b38:	df 93       	push	r29
    7b3a:	cd b7       	in	r28, 0x3d	; 61
    7b3c:	de b7       	in	r29, 0x3e	; 62
    7b3e:	29 97       	sbiw	r28, 0x09	; 9
    7b40:	0f b6       	in	r0, 0x3f	; 63
    7b42:	f8 94       	cli
    7b44:	de bf       	out	0x3e, r29	; 62
    7b46:	0f be       	out	0x3f, r0	; 63
    7b48:	cd bf       	out	0x3d, r28	; 61
    7b4a:	89 e0       	ldi	r24, 0x09	; 9
    7b4c:	e0 e0       	ldi	r30, 0x00	; 0
    7b4e:	fa e0       	ldi	r31, 0x0A	; 10
    7b50:	9e 01       	movw	r18, r28
    7b52:	2f 5f       	subi	r18, 0xFF	; 255
    7b54:	3f 4f       	sbci	r19, 0xFF	; 255
    7b56:	d9 01       	movw	r26, r18
    7b58:	01 90       	ld	r0, Z+
    7b5a:	0d 92       	st	X+, r0
    7b5c:	8a 95       	dec	r24
    7b5e:	e1 f7       	brne	.-8      	; 0x7b58 <mh_z19_takeMeassuring+0x22>
    7b60:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <_ppm+0x1>
    7b64:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <_ppm>
    7b68:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <_serial>
    7b6c:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <_serial+0x1>
    7b70:	00 97       	sbiw	r24, 0x00	; 0
    7b72:	31 f0       	breq	.+12     	; 0x7b80 <mh_z19_takeMeassuring+0x4a>
    7b74:	42 2f       	mov	r20, r18
    7b76:	53 2f       	mov	r21, r19
    7b78:	69 e0       	ldi	r22, 0x09	; 9
    7b7a:	20 d1       	rcall	.+576    	; 0x7dbc <serial_sendBytes>
    7b7c:	80 e0       	ldi	r24, 0x00	; 0
    7b7e:	01 c0       	rjmp	.+2      	; 0x7b82 <mh_z19_takeMeassuring+0x4c>
    7b80:	82 e0       	ldi	r24, 0x02	; 2
    7b82:	29 96       	adiw	r28, 0x09	; 9
    7b84:	0f b6       	in	r0, 0x3f	; 63
    7b86:	f8 94       	cli
    7b88:	de bf       	out	0x3e, r29	; 62
    7b8a:	0f be       	out	0x3f, r0	; 63
    7b8c:	cd bf       	out	0x3d, r28	; 61
    7b8e:	df 91       	pop	r29
    7b90:	cf 91       	pop	r28
    7b92:	08 95       	ret

00007b94 <mh_z19_getCo2Ppm>:
    7b94:	20 91 d7 1c 	lds	r18, 0x1CD7	; 0x801cd7 <_ppm>
    7b98:	30 91 d8 1c 	lds	r19, 0x1CD8	; 0x801cd8 <_ppm+0x1>
    7b9c:	21 15       	cp	r18, r1
    7b9e:	31 05       	cpc	r19, r1
    7ba0:	29 f4       	brne	.+10     	; 0x7bac <mh_z19_getCo2Ppm+0x18>
    7ba2:	fc 01       	movw	r30, r24
    7ba4:	11 82       	std	Z+1, r1	; 0x01
    7ba6:	10 82       	st	Z, r1
    7ba8:	81 e0       	ldi	r24, 0x01	; 1
    7baa:	08 95       	ret
    7bac:	fc 01       	movw	r30, r24
    7bae:	31 83       	std	Z+1, r19	; 0x01
    7bb0:	20 83       	st	Z, r18
    7bb2:	80 e0       	ldi	r24, 0x00	; 0
    7bb4:	08 95       	ret

00007bb6 <rc_servo_setPosition>:
    7bb6:	65 36       	cpi	r22, 0x65	; 101
    7bb8:	0c f0       	brlt	.+2      	; 0x7bbc <rc_servo_setPosition+0x6>
    7bba:	64 e6       	ldi	r22, 0x64	; 100
    7bbc:	6c 39       	cpi	r22, 0x9C	; 156
    7bbe:	0c f4       	brge	.+2      	; 0x7bc2 <rc_servo_setPosition+0xc>
    7bc0:	6c e9       	ldi	r22, 0x9C	; 156
    7bc2:	96 ef       	ldi	r25, 0xF6	; 246
    7bc4:	69 02       	muls	r22, r25
    7bc6:	b0 01       	movw	r22, r0
    7bc8:	11 24       	eor	r1, r1
    7bca:	68 54       	subi	r22, 0x48	; 72
    7bcc:	74 4f       	sbci	r23, 0xF4	; 244
    7bce:	81 11       	cpse	r24, r1
    7bd0:	05 c0       	rjmp	.+10     	; 0x7bdc <rc_servo_setPosition+0x26>
    7bd2:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    7bd6:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    7bda:	08 95       	ret
    7bdc:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    7be0:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    7be4:	08 95       	ret

00007be6 <rc_servo_initialise>:
    7be6:	ea e0       	ldi	r30, 0x0A	; 10
    7be8:	f1 e0       	ldi	r31, 0x01	; 1
    7bea:	80 81       	ld	r24, Z
    7bec:	88 61       	ori	r24, 0x18	; 24
    7bee:	80 83       	st	Z, r24
    7bf0:	8f e3       	ldi	r24, 0x3F	; 63
    7bf2:	9c e9       	ldi	r25, 0x9C	; 156
    7bf4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    7bf8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    7bfc:	60 e0       	ldi	r22, 0x00	; 0
    7bfe:	80 e0       	ldi	r24, 0x00	; 0
    7c00:	da df       	rcall	.-76     	; 0x7bb6 <rc_servo_setPosition>
    7c02:	60 e0       	ldi	r22, 0x00	; 0
    7c04:	81 e0       	ldi	r24, 0x01	; 1
    7c06:	d7 df       	rcall	.-82     	; 0x7bb6 <rc_servo_setPosition>
    7c08:	e0 e2       	ldi	r30, 0x20	; 32
    7c0a:	f1 e0       	ldi	r31, 0x01	; 1
    7c0c:	80 81       	ld	r24, Z
    7c0e:	82 6a       	ori	r24, 0xA2	; 162
    7c10:	80 83       	st	Z, r24
    7c12:	e1 e2       	ldi	r30, 0x21	; 33
    7c14:	f1 e0       	ldi	r31, 0x01	; 1
    7c16:	80 81       	ld	r24, Z
    7c18:	8a 61       	ori	r24, 0x1A	; 26
    7c1a:	80 83       	st	Z, r24
    7c1c:	08 95       	ret

00007c1e <serial_create>:
    7c1e:	2f 92       	push	r2
    7c20:	3f 92       	push	r3
    7c22:	4f 92       	push	r4
    7c24:	5f 92       	push	r5
    7c26:	6f 92       	push	r6
    7c28:	7f 92       	push	r7
    7c2a:	8f 92       	push	r8
    7c2c:	9f 92       	push	r9
    7c2e:	af 92       	push	r10
    7c30:	cf 92       	push	r12
    7c32:	ef 92       	push	r14
    7c34:	ff 92       	push	r15
    7c36:	0f 93       	push	r16
    7c38:	1f 93       	push	r17
    7c3a:	cf 93       	push	r28
    7c3c:	df 93       	push	r29
    7c3e:	cd b7       	in	r28, 0x3d	; 61
    7c40:	de b7       	in	r29, 0x3e	; 62
    7c42:	f8 2e       	mov	r15, r24
    7c44:	2a 01       	movw	r4, r20
    7c46:	3b 01       	movw	r6, r22
    7c48:	88 e0       	ldi	r24, 0x08	; 8
    7c4a:	90 e0       	ldi	r25, 0x00	; 0
    7c4c:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <malloc>
    7c50:	8c 01       	movw	r16, r24
    7c52:	8f 2d       	mov	r24, r15
    7c54:	90 e0       	ldi	r25, 0x00	; 0
    7c56:	fc 01       	movw	r30, r24
    7c58:	ee 0f       	add	r30, r30
    7c5a:	ff 1f       	adc	r31, r31
    7c5c:	e5 52       	subi	r30, 0x25	; 37
    7c5e:	f3 4e       	sbci	r31, 0xE3	; 227
    7c60:	11 83       	std	Z+1, r17	; 0x01
    7c62:	00 83       	st	Z, r16
    7c64:	01 15       	cp	r16, r1
    7c66:	11 05       	cpc	r17, r1
    7c68:	09 f4       	brne	.+2      	; 0x7c6c <serial_create+0x4e>
    7c6a:	6b c0       	rjmp	.+214    	; 0x7d42 <serial_create+0x124>
    7c6c:	88 0f       	add	r24, r24
    7c6e:	99 1f       	adc	r25, r25
    7c70:	fc 01       	movw	r30, r24
    7c72:	e4 5f       	subi	r30, 0xF4	; 244
    7c74:	fd 4f       	sbci	r31, 0xFD	; 253
    7c76:	80 81       	ld	r24, Z
    7c78:	91 81       	ldd	r25, Z+1	; 0x01
    7c7a:	d8 01       	movw	r26, r16
    7c7c:	8d 93       	st	X+, r24
    7c7e:	9c 93       	st	X, r25
    7c80:	8c 2d       	mov	r24, r12
    7c82:	90 e0       	ldi	r25, 0x00	; 0
    7c84:	88 0f       	add	r24, r24
    7c86:	99 1f       	adc	r25, r25
    7c88:	88 0f       	add	r24, r24
    7c8a:	99 1f       	adc	r25, r25
    7c8c:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <malloc>
    7c90:	1c 01       	movw	r2, r24
    7c92:	86 e0       	ldi	r24, 0x06	; 6
    7c94:	90 e0       	ldi	r25, 0x00	; 0
    7c96:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <malloc>
    7c9a:	7c 01       	movw	r14, r24
    7c9c:	4c 2d       	mov	r20, r12
    7c9e:	b1 01       	movw	r22, r2
    7ca0:	f2 d6       	rcall	.+3556   	; 0x8a86 <fifo_init>
    7ca2:	f8 01       	movw	r30, r16
    7ca4:	f5 82       	std	Z+5, r15	; 0x05
    7ca6:	e4 82       	std	Z+4, r14	; 0x04
    7ca8:	8a 2d       	mov	r24, r10
    7caa:	90 e0       	ldi	r25, 0x00	; 0
    7cac:	88 0f       	add	r24, r24
    7cae:	99 1f       	adc	r25, r25
    7cb0:	88 0f       	add	r24, r24
    7cb2:	99 1f       	adc	r25, r25
    7cb4:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <malloc>
    7cb8:	1c 01       	movw	r2, r24
    7cba:	86 e0       	ldi	r24, 0x06	; 6
    7cbc:	90 e0       	ldi	r25, 0x00	; 0
    7cbe:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <malloc>
    7cc2:	7c 01       	movw	r14, r24
    7cc4:	4a 2d       	mov	r20, r10
    7cc6:	b1 01       	movw	r22, r2
    7cc8:	de d6       	rcall	.+3516   	; 0x8a86 <fifo_init>
    7cca:	d8 01       	movw	r26, r16
    7ccc:	13 96       	adiw	r26, 0x03	; 3
    7cce:	fc 92       	st	X, r15
    7cd0:	ee 92       	st	-X, r14
    7cd2:	12 97       	sbiw	r26, 0x02	; 2
    7cd4:	17 96       	adiw	r26, 0x07	; 7
    7cd6:	9c 92       	st	X, r9
    7cd8:	8e 92       	st	-X, r8
    7cda:	16 97       	sbiw	r26, 0x06	; 6
    7cdc:	ff b6       	in	r15, 0x3f	; 63
    7cde:	f8 94       	cli
    7ce0:	ed 91       	ld	r30, X+
    7ce2:	fc 91       	ld	r31, X
    7ce4:	11 97       	sbiw	r26, 0x01	; 1
    7ce6:	36 97       	sbiw	r30, 0x06	; 6
    7ce8:	80 81       	ld	r24, Z
    7cea:	82 60       	ori	r24, 0x02	; 2
    7cec:	80 83       	st	Z, r24
    7cee:	8d 90       	ld	r8, X+
    7cf0:	9c 90       	ld	r9, X
    7cf2:	c3 01       	movw	r24, r6
    7cf4:	b2 01       	movw	r22, r4
    7cf6:	0e 94 cc 49 	call	0x9398	; 0x9398 <__floatunsisf>
    7cfa:	20 e0       	ldi	r18, 0x00	; 0
    7cfc:	30 e0       	ldi	r19, 0x00	; 0
    7cfe:	40 e0       	ldi	r20, 0x00	; 0
    7d00:	51 e4       	ldi	r21, 0x41	; 65
    7d02:	ef d8       	rcall	.-3618   	; 0x6ee2 <__mulsf3>
    7d04:	9b 01       	movw	r18, r22
    7d06:	ac 01       	movw	r20, r24
    7d08:	60 e0       	ldi	r22, 0x00	; 0
    7d0a:	74 e2       	ldi	r23, 0x24	; 36
    7d0c:	84 e7       	ldi	r24, 0x74	; 116
    7d0e:	9b e4       	ldi	r25, 0x4B	; 75
    7d10:	0e 94 54 49 	call	0x92a8	; 0x92a8 <__divsf3>
    7d14:	20 e0       	ldi	r18, 0x00	; 0
    7d16:	30 e0       	ldi	r19, 0x00	; 0
    7d18:	40 e8       	ldi	r20, 0x80	; 128
    7d1a:	5f e3       	ldi	r21, 0x3F	; 63
    7d1c:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <__subsf3>
    7d20:	63 d8       	rcall	.-3898   	; 0x6de8 <__fixunssfsi>
    7d22:	f4 01       	movw	r30, r8
    7d24:	32 97       	sbiw	r30, 0x02	; 2
    7d26:	60 83       	st	Z, r22
    7d28:	d8 01       	movw	r26, r16
    7d2a:	ed 91       	ld	r30, X+
    7d2c:	fc 91       	ld	r31, X
    7d2e:	11 97       	sbiw	r26, 0x01	; 1
    7d30:	35 97       	sbiw	r30, 0x05	; 5
    7d32:	88 e9       	ldi	r24, 0x98	; 152
    7d34:	80 83       	st	Z, r24
    7d36:	ed 91       	ld	r30, X+
    7d38:	fc 91       	ld	r31, X
    7d3a:	34 97       	sbiw	r30, 0x04	; 4
    7d3c:	86 e0       	ldi	r24, 0x06	; 6
    7d3e:	80 83       	st	Z, r24
    7d40:	ff be       	out	0x3f, r15	; 63
    7d42:	c8 01       	movw	r24, r16
    7d44:	df 91       	pop	r29
    7d46:	cf 91       	pop	r28
    7d48:	1f 91       	pop	r17
    7d4a:	0f 91       	pop	r16
    7d4c:	ff 90       	pop	r15
    7d4e:	ef 90       	pop	r14
    7d50:	cf 90       	pop	r12
    7d52:	af 90       	pop	r10
    7d54:	9f 90       	pop	r9
    7d56:	8f 90       	pop	r8
    7d58:	7f 90       	pop	r7
    7d5a:	6f 90       	pop	r6
    7d5c:	5f 90       	pop	r5
    7d5e:	4f 90       	pop	r4
    7d60:	3f 90       	pop	r3
    7d62:	2f 90       	pop	r2
    7d64:	08 95       	ret

00007d66 <serial_sendByte>:
    7d66:	cf 93       	push	r28
    7d68:	df 93       	push	r29
    7d6a:	dc 01       	movw	r26, r24
    7d6c:	89 2b       	or	r24, r25
    7d6e:	01 f1       	breq	.+64     	; 0x7db0 <serial_sendByte+0x4a>
    7d70:	12 96       	adiw	r26, 0x02	; 2
    7d72:	ed 91       	ld	r30, X+
    7d74:	fc 91       	ld	r31, X
    7d76:	13 97       	sbiw	r26, 0x03	; 3
    7d78:	93 81       	ldd	r25, Z+3	; 0x03
    7d7a:	82 81       	ldd	r24, Z+2	; 0x02
    7d7c:	25 81       	ldd	r18, Z+5	; 0x05
    7d7e:	98 1b       	sub	r25, r24
    7d80:	92 23       	and	r25, r18
    7d82:	84 81       	ldd	r24, Z+4	; 0x04
    7d84:	98 17       	cp	r25, r24
    7d86:	b1 f0       	breq	.+44     	; 0x7db4 <serial_sendByte+0x4e>
    7d88:	83 81       	ldd	r24, Z+3	; 0x03
    7d8a:	26 95       	lsr	r18
    7d8c:	28 23       	and	r18, r24
    7d8e:	c0 81       	ld	r28, Z
    7d90:	d1 81       	ldd	r29, Z+1	; 0x01
    7d92:	c2 0f       	add	r28, r18
    7d94:	d1 1d       	adc	r29, r1
    7d96:	68 83       	st	Y, r22
    7d98:	8f 5f       	subi	r24, 0xFF	; 255
    7d9a:	95 81       	ldd	r25, Z+5	; 0x05
    7d9c:	89 23       	and	r24, r25
    7d9e:	83 83       	std	Z+3, r24	; 0x03
    7da0:	ed 91       	ld	r30, X+
    7da2:	fc 91       	ld	r31, X
    7da4:	35 97       	sbiw	r30, 0x05	; 5
    7da6:	80 81       	ld	r24, Z
    7da8:	80 62       	ori	r24, 0x20	; 32
    7daa:	80 83       	st	Z, r24
    7dac:	80 e0       	ldi	r24, 0x00	; 0
    7dae:	03 c0       	rjmp	.+6      	; 0x7db6 <serial_sendByte+0x50>
    7db0:	81 e0       	ldi	r24, 0x01	; 1
    7db2:	01 c0       	rjmp	.+2      	; 0x7db6 <serial_sendByte+0x50>
    7db4:	82 e0       	ldi	r24, 0x02	; 2
    7db6:	df 91       	pop	r29
    7db8:	cf 91       	pop	r28
    7dba:	08 95       	ret

00007dbc <serial_sendBytes>:
    7dbc:	ef 92       	push	r14
    7dbe:	ff 92       	push	r15
    7dc0:	0f 93       	push	r16
    7dc2:	1f 93       	push	r17
    7dc4:	cf 93       	push	r28
    7dc6:	df 93       	push	r29
    7dc8:	7c 01       	movw	r14, r24
    7dca:	00 97       	sbiw	r24, 0x00	; 0
    7dcc:	09 f4       	brne	.+2      	; 0x7dd0 <serial_sendBytes+0x14>
    7dce:	41 c0       	rjmp	.+130    	; 0x7e52 <serial_sendBytes+0x96>
    7dd0:	dc 01       	movw	r26, r24
    7dd2:	12 96       	adiw	r26, 0x02	; 2
    7dd4:	ed 91       	ld	r30, X+
    7dd6:	fc 91       	ld	r31, X
    7dd8:	13 97       	sbiw	r26, 0x03	; 3
    7dda:	93 81       	ldd	r25, Z+3	; 0x03
    7ddc:	82 81       	ldd	r24, Z+2	; 0x02
    7dde:	98 1b       	sub	r25, r24
    7de0:	85 81       	ldd	r24, Z+5	; 0x05
    7de2:	98 23       	and	r25, r24
    7de4:	84 81       	ldd	r24, Z+4	; 0x04
    7de6:	89 1b       	sub	r24, r25
    7de8:	86 17       	cp	r24, r22
    7dea:	a8 f1       	brcs	.+106    	; 0x7e56 <serial_sendBytes+0x9a>
    7dec:	66 23       	and	r22, r22
    7dee:	41 f1       	breq	.+80     	; 0x7e40 <serial_sendBytes+0x84>
    7df0:	84 2f       	mov	r24, r20
    7df2:	95 2f       	mov	r25, r21
    7df4:	dc 01       	movw	r26, r24
    7df6:	61 50       	subi	r22, 0x01	; 1
    7df8:	46 2f       	mov	r20, r22
    7dfa:	50 e0       	ldi	r21, 0x00	; 0
    7dfc:	4f 5f       	subi	r20, 0xFF	; 255
    7dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    7e00:	48 0f       	add	r20, r24
    7e02:	59 1f       	adc	r21, r25
    7e04:	e7 01       	movw	r28, r14
    7e06:	ea 81       	ldd	r30, Y+2	; 0x02
    7e08:	fb 81       	ldd	r31, Y+3	; 0x03
    7e0a:	93 81       	ldd	r25, Z+3	; 0x03
    7e0c:	82 81       	ldd	r24, Z+2	; 0x02
    7e0e:	25 81       	ldd	r18, Z+5	; 0x05
    7e10:	98 1b       	sub	r25, r24
    7e12:	92 23       	and	r25, r18
    7e14:	84 81       	ldd	r24, Z+4	; 0x04
    7e16:	98 17       	cp	r25, r24
    7e18:	79 f0       	breq	.+30     	; 0x7e38 <serial_sendBytes+0x7c>
    7e1a:	8c 91       	ld	r24, X
    7e1c:	93 81       	ldd	r25, Z+3	; 0x03
    7e1e:	26 95       	lsr	r18
    7e20:	29 23       	and	r18, r25
    7e22:	60 81       	ld	r22, Z
    7e24:	71 81       	ldd	r23, Z+1	; 0x01
    7e26:	8b 01       	movw	r16, r22
    7e28:	02 0f       	add	r16, r18
    7e2a:	11 1d       	adc	r17, r1
    7e2c:	e8 01       	movw	r28, r16
    7e2e:	88 83       	st	Y, r24
    7e30:	9f 5f       	subi	r25, 0xFF	; 255
    7e32:	85 81       	ldd	r24, Z+5	; 0x05
    7e34:	98 23       	and	r25, r24
    7e36:	93 83       	std	Z+3, r25	; 0x03
    7e38:	11 96       	adiw	r26, 0x01	; 1
    7e3a:	a4 17       	cp	r26, r20
    7e3c:	b5 07       	cpc	r27, r21
    7e3e:	11 f7       	brne	.-60     	; 0x7e04 <serial_sendBytes+0x48>
    7e40:	d7 01       	movw	r26, r14
    7e42:	ed 91       	ld	r30, X+
    7e44:	fc 91       	ld	r31, X
    7e46:	35 97       	sbiw	r30, 0x05	; 5
    7e48:	80 81       	ld	r24, Z
    7e4a:	80 62       	ori	r24, 0x20	; 32
    7e4c:	80 83       	st	Z, r24
    7e4e:	80 e0       	ldi	r24, 0x00	; 0
    7e50:	03 c0       	rjmp	.+6      	; 0x7e58 <serial_sendBytes+0x9c>
    7e52:	81 e0       	ldi	r24, 0x01	; 1
    7e54:	01 c0       	rjmp	.+2      	; 0x7e58 <serial_sendBytes+0x9c>
    7e56:	82 e0       	ldi	r24, 0x02	; 2
    7e58:	df 91       	pop	r29
    7e5a:	cf 91       	pop	r28
    7e5c:	1f 91       	pop	r17
    7e5e:	0f 91       	pop	r16
    7e60:	ff 90       	pop	r15
    7e62:	ef 90       	pop	r14
    7e64:	08 95       	ret

00007e66 <serial_getByte>:
    7e66:	00 97       	sbiw	r24, 0x00	; 0
    7e68:	d1 f0       	breq	.+52     	; 0x7e9e <serial_getByte+0x38>
    7e6a:	dc 01       	movw	r26, r24
    7e6c:	14 96       	adiw	r26, 0x04	; 4
    7e6e:	ed 91       	ld	r30, X+
    7e70:	fc 91       	ld	r31, X
    7e72:	15 97       	sbiw	r26, 0x05	; 5
    7e74:	93 81       	ldd	r25, Z+3	; 0x03
    7e76:	82 81       	ldd	r24, Z+2	; 0x02
    7e78:	98 17       	cp	r25, r24
    7e7a:	99 f0       	breq	.+38     	; 0x7ea2 <serial_getByte+0x3c>
    7e7c:	92 81       	ldd	r25, Z+2	; 0x02
    7e7e:	85 81       	ldd	r24, Z+5	; 0x05
    7e80:	86 95       	lsr	r24
    7e82:	89 23       	and	r24, r25
    7e84:	a0 81       	ld	r26, Z
    7e86:	b1 81       	ldd	r27, Z+1	; 0x01
    7e88:	a8 0f       	add	r26, r24
    7e8a:	b1 1d       	adc	r27, r1
    7e8c:	8c 91       	ld	r24, X
    7e8e:	db 01       	movw	r26, r22
    7e90:	8c 93       	st	X, r24
    7e92:	9f 5f       	subi	r25, 0xFF	; 255
    7e94:	85 81       	ldd	r24, Z+5	; 0x05
    7e96:	98 23       	and	r25, r24
    7e98:	92 83       	std	Z+2, r25	; 0x02
    7e9a:	80 e0       	ldi	r24, 0x00	; 0
    7e9c:	08 95       	ret
    7e9e:	81 e0       	ldi	r24, 0x01	; 1
    7ea0:	08 95       	ret
    7ea2:	83 e0       	ldi	r24, 0x03	; 3
    7ea4:	08 95       	ret

00007ea6 <__vector_25>:
    7ea6:	1f 92       	push	r1
    7ea8:	0f 92       	push	r0
    7eaa:	0f b6       	in	r0, 0x3f	; 63
    7eac:	0f 92       	push	r0
    7eae:	11 24       	eor	r1, r1
    7eb0:	0b b6       	in	r0, 0x3b	; 59
    7eb2:	0f 92       	push	r0
    7eb4:	2f 93       	push	r18
    7eb6:	3f 93       	push	r19
    7eb8:	4f 93       	push	r20
    7eba:	5f 93       	push	r21
    7ebc:	6f 93       	push	r22
    7ebe:	7f 93       	push	r23
    7ec0:	8f 93       	push	r24
    7ec2:	9f 93       	push	r25
    7ec4:	af 93       	push	r26
    7ec6:	bf 93       	push	r27
    7ec8:	cf 93       	push	r28
    7eca:	df 93       	push	r29
    7ecc:	ef 93       	push	r30
    7ece:	ff 93       	push	r31
    7ed0:	a0 91 db 1c 	lds	r26, 0x1CDB	; 0x801cdb <_ser_handle>
    7ed4:	b0 91 dc 1c 	lds	r27, 0x1CDC	; 0x801cdc <_ser_handle+0x1>
    7ed8:	10 97       	sbiw	r26, 0x00	; 0
    7eda:	11 f1       	breq	.+68     	; 0x7f20 <__vector_25+0x7a>
    7edc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    7ee0:	14 96       	adiw	r26, 0x04	; 4
    7ee2:	ed 91       	ld	r30, X+
    7ee4:	fc 91       	ld	r31, X
    7ee6:	15 97       	sbiw	r26, 0x05	; 5
    7ee8:	93 81       	ldd	r25, Z+3	; 0x03
    7eea:	82 81       	ldd	r24, Z+2	; 0x02
    7eec:	25 81       	ldd	r18, Z+5	; 0x05
    7eee:	98 1b       	sub	r25, r24
    7ef0:	92 23       	and	r25, r18
    7ef2:	84 81       	ldd	r24, Z+4	; 0x04
    7ef4:	98 17       	cp	r25, r24
    7ef6:	61 f0       	breq	.+24     	; 0x7f10 <__vector_25+0x6a>
    7ef8:	83 81       	ldd	r24, Z+3	; 0x03
    7efa:	26 95       	lsr	r18
    7efc:	28 23       	and	r18, r24
    7efe:	c0 81       	ld	r28, Z
    7f00:	d1 81       	ldd	r29, Z+1	; 0x01
    7f02:	c2 0f       	add	r28, r18
    7f04:	d1 1d       	adc	r29, r1
    7f06:	68 83       	st	Y, r22
    7f08:	8f 5f       	subi	r24, 0xFF	; 255
    7f0a:	95 81       	ldd	r25, Z+5	; 0x05
    7f0c:	89 23       	and	r24, r25
    7f0e:	83 83       	std	Z+3, r24	; 0x03
    7f10:	16 96       	adiw	r26, 0x06	; 6
    7f12:	ed 91       	ld	r30, X+
    7f14:	fc 91       	ld	r31, X
    7f16:	17 97       	sbiw	r26, 0x07	; 7
    7f18:	30 97       	sbiw	r30, 0x00	; 0
    7f1a:	11 f0       	breq	.+4      	; 0x7f20 <__vector_25+0x7a>
    7f1c:	cd 01       	movw	r24, r26
    7f1e:	19 95       	eicall
    7f20:	ff 91       	pop	r31
    7f22:	ef 91       	pop	r30
    7f24:	df 91       	pop	r29
    7f26:	cf 91       	pop	r28
    7f28:	bf 91       	pop	r27
    7f2a:	af 91       	pop	r26
    7f2c:	9f 91       	pop	r25
    7f2e:	8f 91       	pop	r24
    7f30:	7f 91       	pop	r23
    7f32:	6f 91       	pop	r22
    7f34:	5f 91       	pop	r21
    7f36:	4f 91       	pop	r20
    7f38:	3f 91       	pop	r19
    7f3a:	2f 91       	pop	r18
    7f3c:	0f 90       	pop	r0
    7f3e:	0b be       	out	0x3b, r0	; 59
    7f40:	0f 90       	pop	r0
    7f42:	0f be       	out	0x3f, r0	; 63
    7f44:	0f 90       	pop	r0
    7f46:	1f 90       	pop	r1
    7f48:	18 95       	reti

00007f4a <__vector_26>:
    7f4a:	1f 92       	push	r1
    7f4c:	0f 92       	push	r0
    7f4e:	0f b6       	in	r0, 0x3f	; 63
    7f50:	0f 92       	push	r0
    7f52:	11 24       	eor	r1, r1
    7f54:	0b b6       	in	r0, 0x3b	; 59
    7f56:	0f 92       	push	r0
    7f58:	2f 93       	push	r18
    7f5a:	8f 93       	push	r24
    7f5c:	9f 93       	push	r25
    7f5e:	af 93       	push	r26
    7f60:	bf 93       	push	r27
    7f62:	ef 93       	push	r30
    7f64:	ff 93       	push	r31
    7f66:	e0 91 db 1c 	lds	r30, 0x1CDB	; 0x801cdb <_ser_handle>
    7f6a:	f0 91 dc 1c 	lds	r31, 0x1CDC	; 0x801cdc <_ser_handle+0x1>
    7f6e:	30 97       	sbiw	r30, 0x00	; 0
    7f70:	b9 f0       	breq	.+46     	; 0x7fa0 <__vector_26+0x56>
    7f72:	02 80       	ldd	r0, Z+2	; 0x02
    7f74:	f3 81       	ldd	r31, Z+3	; 0x03
    7f76:	e0 2d       	mov	r30, r0
    7f78:	93 81       	ldd	r25, Z+3	; 0x03
    7f7a:	82 81       	ldd	r24, Z+2	; 0x02
    7f7c:	98 17       	cp	r25, r24
    7f7e:	b1 f0       	breq	.+44     	; 0x7fac <__vector_26+0x62>
    7f80:	92 81       	ldd	r25, Z+2	; 0x02
    7f82:	85 81       	ldd	r24, Z+5	; 0x05
    7f84:	28 2f       	mov	r18, r24
    7f86:	26 95       	lsr	r18
    7f88:	29 23       	and	r18, r25
    7f8a:	a0 81       	ld	r26, Z
    7f8c:	b1 81       	ldd	r27, Z+1	; 0x01
    7f8e:	a2 0f       	add	r26, r18
    7f90:	b1 1d       	adc	r27, r1
    7f92:	2c 91       	ld	r18, X
    7f94:	9f 5f       	subi	r25, 0xFF	; 255
    7f96:	89 23       	and	r24, r25
    7f98:	82 83       	std	Z+2, r24	; 0x02
    7f9a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    7f9e:	0b c0       	rjmp	.+22     	; 0x7fb6 <__vector_26+0x6c>
    7fa0:	e1 ec       	ldi	r30, 0xC1	; 193
    7fa2:	f0 e0       	ldi	r31, 0x00	; 0
    7fa4:	80 81       	ld	r24, Z
    7fa6:	8f 7d       	andi	r24, 0xDF	; 223
    7fa8:	80 83       	st	Z, r24
    7faa:	05 c0       	rjmp	.+10     	; 0x7fb6 <__vector_26+0x6c>
    7fac:	e1 ec       	ldi	r30, 0xC1	; 193
    7fae:	f0 e0       	ldi	r31, 0x00	; 0
    7fb0:	80 81       	ld	r24, Z
    7fb2:	8f 7d       	andi	r24, 0xDF	; 223
    7fb4:	80 83       	st	Z, r24
    7fb6:	ff 91       	pop	r31
    7fb8:	ef 91       	pop	r30
    7fba:	bf 91       	pop	r27
    7fbc:	af 91       	pop	r26
    7fbe:	9f 91       	pop	r25
    7fc0:	8f 91       	pop	r24
    7fc2:	2f 91       	pop	r18
    7fc4:	0f 90       	pop	r0
    7fc6:	0b be       	out	0x3b, r0	; 59
    7fc8:	0f 90       	pop	r0
    7fca:	0f be       	out	0x3f, r0	; 63
    7fcc:	0f 90       	pop	r0
    7fce:	1f 90       	pop	r1
    7fd0:	18 95       	reti

00007fd2 <__vector_36>:
    7fd2:	1f 92       	push	r1
    7fd4:	0f 92       	push	r0
    7fd6:	0f b6       	in	r0, 0x3f	; 63
    7fd8:	0f 92       	push	r0
    7fda:	11 24       	eor	r1, r1
    7fdc:	0b b6       	in	r0, 0x3b	; 59
    7fde:	0f 92       	push	r0
    7fe0:	2f 93       	push	r18
    7fe2:	3f 93       	push	r19
    7fe4:	4f 93       	push	r20
    7fe6:	5f 93       	push	r21
    7fe8:	6f 93       	push	r22
    7fea:	7f 93       	push	r23
    7fec:	8f 93       	push	r24
    7fee:	9f 93       	push	r25
    7ff0:	af 93       	push	r26
    7ff2:	bf 93       	push	r27
    7ff4:	cf 93       	push	r28
    7ff6:	df 93       	push	r29
    7ff8:	ef 93       	push	r30
    7ffa:	ff 93       	push	r31
    7ffc:	a0 91 dd 1c 	lds	r26, 0x1CDD	; 0x801cdd <_ser_handle+0x2>
    8000:	b0 91 de 1c 	lds	r27, 0x1CDE	; 0x801cde <_ser_handle+0x3>
    8004:	10 97       	sbiw	r26, 0x00	; 0
    8006:	11 f1       	breq	.+68     	; 0x804c <__vector_36+0x7a>
    8008:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    800c:	14 96       	adiw	r26, 0x04	; 4
    800e:	ed 91       	ld	r30, X+
    8010:	fc 91       	ld	r31, X
    8012:	15 97       	sbiw	r26, 0x05	; 5
    8014:	93 81       	ldd	r25, Z+3	; 0x03
    8016:	82 81       	ldd	r24, Z+2	; 0x02
    8018:	25 81       	ldd	r18, Z+5	; 0x05
    801a:	98 1b       	sub	r25, r24
    801c:	92 23       	and	r25, r18
    801e:	84 81       	ldd	r24, Z+4	; 0x04
    8020:	98 17       	cp	r25, r24
    8022:	61 f0       	breq	.+24     	; 0x803c <__vector_36+0x6a>
    8024:	83 81       	ldd	r24, Z+3	; 0x03
    8026:	26 95       	lsr	r18
    8028:	28 23       	and	r18, r24
    802a:	c0 81       	ld	r28, Z
    802c:	d1 81       	ldd	r29, Z+1	; 0x01
    802e:	c2 0f       	add	r28, r18
    8030:	d1 1d       	adc	r29, r1
    8032:	68 83       	st	Y, r22
    8034:	8f 5f       	subi	r24, 0xFF	; 255
    8036:	95 81       	ldd	r25, Z+5	; 0x05
    8038:	89 23       	and	r24, r25
    803a:	83 83       	std	Z+3, r24	; 0x03
    803c:	16 96       	adiw	r26, 0x06	; 6
    803e:	ed 91       	ld	r30, X+
    8040:	fc 91       	ld	r31, X
    8042:	17 97       	sbiw	r26, 0x07	; 7
    8044:	30 97       	sbiw	r30, 0x00	; 0
    8046:	11 f0       	breq	.+4      	; 0x804c <__vector_36+0x7a>
    8048:	cd 01       	movw	r24, r26
    804a:	19 95       	eicall
    804c:	ff 91       	pop	r31
    804e:	ef 91       	pop	r30
    8050:	df 91       	pop	r29
    8052:	cf 91       	pop	r28
    8054:	bf 91       	pop	r27
    8056:	af 91       	pop	r26
    8058:	9f 91       	pop	r25
    805a:	8f 91       	pop	r24
    805c:	7f 91       	pop	r23
    805e:	6f 91       	pop	r22
    8060:	5f 91       	pop	r21
    8062:	4f 91       	pop	r20
    8064:	3f 91       	pop	r19
    8066:	2f 91       	pop	r18
    8068:	0f 90       	pop	r0
    806a:	0b be       	out	0x3b, r0	; 59
    806c:	0f 90       	pop	r0
    806e:	0f be       	out	0x3f, r0	; 63
    8070:	0f 90       	pop	r0
    8072:	1f 90       	pop	r1
    8074:	18 95       	reti

00008076 <__vector_37>:
    8076:	1f 92       	push	r1
    8078:	0f 92       	push	r0
    807a:	0f b6       	in	r0, 0x3f	; 63
    807c:	0f 92       	push	r0
    807e:	11 24       	eor	r1, r1
    8080:	0b b6       	in	r0, 0x3b	; 59
    8082:	0f 92       	push	r0
    8084:	2f 93       	push	r18
    8086:	8f 93       	push	r24
    8088:	9f 93       	push	r25
    808a:	af 93       	push	r26
    808c:	bf 93       	push	r27
    808e:	ef 93       	push	r30
    8090:	ff 93       	push	r31
    8092:	e0 91 dd 1c 	lds	r30, 0x1CDD	; 0x801cdd <_ser_handle+0x2>
    8096:	f0 91 de 1c 	lds	r31, 0x1CDE	; 0x801cde <_ser_handle+0x3>
    809a:	30 97       	sbiw	r30, 0x00	; 0
    809c:	b9 f0       	breq	.+46     	; 0x80cc <__vector_37+0x56>
    809e:	02 80       	ldd	r0, Z+2	; 0x02
    80a0:	f3 81       	ldd	r31, Z+3	; 0x03
    80a2:	e0 2d       	mov	r30, r0
    80a4:	93 81       	ldd	r25, Z+3	; 0x03
    80a6:	82 81       	ldd	r24, Z+2	; 0x02
    80a8:	98 17       	cp	r25, r24
    80aa:	b1 f0       	breq	.+44     	; 0x80d8 <__vector_37+0x62>
    80ac:	92 81       	ldd	r25, Z+2	; 0x02
    80ae:	85 81       	ldd	r24, Z+5	; 0x05
    80b0:	28 2f       	mov	r18, r24
    80b2:	26 95       	lsr	r18
    80b4:	29 23       	and	r18, r25
    80b6:	a0 81       	ld	r26, Z
    80b8:	b1 81       	ldd	r27, Z+1	; 0x01
    80ba:	a2 0f       	add	r26, r18
    80bc:	b1 1d       	adc	r27, r1
    80be:	2c 91       	ld	r18, X
    80c0:	9f 5f       	subi	r25, 0xFF	; 255
    80c2:	89 23       	and	r24, r25
    80c4:	82 83       	std	Z+2, r24	; 0x02
    80c6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    80ca:	0b c0       	rjmp	.+22     	; 0x80e2 <__vector_37+0x6c>
    80cc:	e9 ec       	ldi	r30, 0xC9	; 201
    80ce:	f0 e0       	ldi	r31, 0x00	; 0
    80d0:	80 81       	ld	r24, Z
    80d2:	8f 7d       	andi	r24, 0xDF	; 223
    80d4:	80 83       	st	Z, r24
    80d6:	05 c0       	rjmp	.+10     	; 0x80e2 <__vector_37+0x6c>
    80d8:	e9 ec       	ldi	r30, 0xC9	; 201
    80da:	f0 e0       	ldi	r31, 0x00	; 0
    80dc:	80 81       	ld	r24, Z
    80de:	8f 7d       	andi	r24, 0xDF	; 223
    80e0:	80 83       	st	Z, r24
    80e2:	ff 91       	pop	r31
    80e4:	ef 91       	pop	r30
    80e6:	bf 91       	pop	r27
    80e8:	af 91       	pop	r26
    80ea:	9f 91       	pop	r25
    80ec:	8f 91       	pop	r24
    80ee:	2f 91       	pop	r18
    80f0:	0f 90       	pop	r0
    80f2:	0b be       	out	0x3b, r0	; 59
    80f4:	0f 90       	pop	r0
    80f6:	0f be       	out	0x3f, r0	; 63
    80f8:	0f 90       	pop	r0
    80fa:	1f 90       	pop	r1
    80fc:	18 95       	reti

000080fe <__vector_51>:
    80fe:	1f 92       	push	r1
    8100:	0f 92       	push	r0
    8102:	0f b6       	in	r0, 0x3f	; 63
    8104:	0f 92       	push	r0
    8106:	11 24       	eor	r1, r1
    8108:	0b b6       	in	r0, 0x3b	; 59
    810a:	0f 92       	push	r0
    810c:	2f 93       	push	r18
    810e:	3f 93       	push	r19
    8110:	4f 93       	push	r20
    8112:	5f 93       	push	r21
    8114:	6f 93       	push	r22
    8116:	7f 93       	push	r23
    8118:	8f 93       	push	r24
    811a:	9f 93       	push	r25
    811c:	af 93       	push	r26
    811e:	bf 93       	push	r27
    8120:	cf 93       	push	r28
    8122:	df 93       	push	r29
    8124:	ef 93       	push	r30
    8126:	ff 93       	push	r31
    8128:	a0 91 df 1c 	lds	r26, 0x1CDF	; 0x801cdf <_ser_handle+0x4>
    812c:	b0 91 e0 1c 	lds	r27, 0x1CE0	; 0x801ce0 <_ser_handle+0x5>
    8130:	10 97       	sbiw	r26, 0x00	; 0
    8132:	11 f1       	breq	.+68     	; 0x8178 <__vector_51+0x7a>
    8134:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    8138:	14 96       	adiw	r26, 0x04	; 4
    813a:	ed 91       	ld	r30, X+
    813c:	fc 91       	ld	r31, X
    813e:	15 97       	sbiw	r26, 0x05	; 5
    8140:	93 81       	ldd	r25, Z+3	; 0x03
    8142:	82 81       	ldd	r24, Z+2	; 0x02
    8144:	25 81       	ldd	r18, Z+5	; 0x05
    8146:	98 1b       	sub	r25, r24
    8148:	92 23       	and	r25, r18
    814a:	84 81       	ldd	r24, Z+4	; 0x04
    814c:	98 17       	cp	r25, r24
    814e:	61 f0       	breq	.+24     	; 0x8168 <__vector_51+0x6a>
    8150:	83 81       	ldd	r24, Z+3	; 0x03
    8152:	26 95       	lsr	r18
    8154:	28 23       	and	r18, r24
    8156:	c0 81       	ld	r28, Z
    8158:	d1 81       	ldd	r29, Z+1	; 0x01
    815a:	c2 0f       	add	r28, r18
    815c:	d1 1d       	adc	r29, r1
    815e:	68 83       	st	Y, r22
    8160:	8f 5f       	subi	r24, 0xFF	; 255
    8162:	95 81       	ldd	r25, Z+5	; 0x05
    8164:	89 23       	and	r24, r25
    8166:	83 83       	std	Z+3, r24	; 0x03
    8168:	16 96       	adiw	r26, 0x06	; 6
    816a:	ed 91       	ld	r30, X+
    816c:	fc 91       	ld	r31, X
    816e:	17 97       	sbiw	r26, 0x07	; 7
    8170:	30 97       	sbiw	r30, 0x00	; 0
    8172:	11 f0       	breq	.+4      	; 0x8178 <__vector_51+0x7a>
    8174:	cd 01       	movw	r24, r26
    8176:	19 95       	eicall
    8178:	ff 91       	pop	r31
    817a:	ef 91       	pop	r30
    817c:	df 91       	pop	r29
    817e:	cf 91       	pop	r28
    8180:	bf 91       	pop	r27
    8182:	af 91       	pop	r26
    8184:	9f 91       	pop	r25
    8186:	8f 91       	pop	r24
    8188:	7f 91       	pop	r23
    818a:	6f 91       	pop	r22
    818c:	5f 91       	pop	r21
    818e:	4f 91       	pop	r20
    8190:	3f 91       	pop	r19
    8192:	2f 91       	pop	r18
    8194:	0f 90       	pop	r0
    8196:	0b be       	out	0x3b, r0	; 59
    8198:	0f 90       	pop	r0
    819a:	0f be       	out	0x3f, r0	; 63
    819c:	0f 90       	pop	r0
    819e:	1f 90       	pop	r1
    81a0:	18 95       	reti

000081a2 <__vector_52>:
    81a2:	1f 92       	push	r1
    81a4:	0f 92       	push	r0
    81a6:	0f b6       	in	r0, 0x3f	; 63
    81a8:	0f 92       	push	r0
    81aa:	11 24       	eor	r1, r1
    81ac:	0b b6       	in	r0, 0x3b	; 59
    81ae:	0f 92       	push	r0
    81b0:	2f 93       	push	r18
    81b2:	8f 93       	push	r24
    81b4:	9f 93       	push	r25
    81b6:	af 93       	push	r26
    81b8:	bf 93       	push	r27
    81ba:	ef 93       	push	r30
    81bc:	ff 93       	push	r31
    81be:	e0 91 df 1c 	lds	r30, 0x1CDF	; 0x801cdf <_ser_handle+0x4>
    81c2:	f0 91 e0 1c 	lds	r31, 0x1CE0	; 0x801ce0 <_ser_handle+0x5>
    81c6:	30 97       	sbiw	r30, 0x00	; 0
    81c8:	b9 f0       	breq	.+46     	; 0x81f8 <__vector_52+0x56>
    81ca:	02 80       	ldd	r0, Z+2	; 0x02
    81cc:	f3 81       	ldd	r31, Z+3	; 0x03
    81ce:	e0 2d       	mov	r30, r0
    81d0:	93 81       	ldd	r25, Z+3	; 0x03
    81d2:	82 81       	ldd	r24, Z+2	; 0x02
    81d4:	98 17       	cp	r25, r24
    81d6:	b1 f0       	breq	.+44     	; 0x8204 <__vector_52+0x62>
    81d8:	92 81       	ldd	r25, Z+2	; 0x02
    81da:	85 81       	ldd	r24, Z+5	; 0x05
    81dc:	28 2f       	mov	r18, r24
    81de:	26 95       	lsr	r18
    81e0:	29 23       	and	r18, r25
    81e2:	a0 81       	ld	r26, Z
    81e4:	b1 81       	ldd	r27, Z+1	; 0x01
    81e6:	a2 0f       	add	r26, r18
    81e8:	b1 1d       	adc	r27, r1
    81ea:	2c 91       	ld	r18, X
    81ec:	9f 5f       	subi	r25, 0xFF	; 255
    81ee:	89 23       	and	r24, r25
    81f0:	82 83       	std	Z+2, r24	; 0x02
    81f2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    81f6:	0b c0       	rjmp	.+22     	; 0x820e <__vector_52+0x6c>
    81f8:	e1 ed       	ldi	r30, 0xD1	; 209
    81fa:	f0 e0       	ldi	r31, 0x00	; 0
    81fc:	80 81       	ld	r24, Z
    81fe:	8f 7d       	andi	r24, 0xDF	; 223
    8200:	80 83       	st	Z, r24
    8202:	05 c0       	rjmp	.+10     	; 0x820e <__vector_52+0x6c>
    8204:	e1 ed       	ldi	r30, 0xD1	; 209
    8206:	f0 e0       	ldi	r31, 0x00	; 0
    8208:	80 81       	ld	r24, Z
    820a:	8f 7d       	andi	r24, 0xDF	; 223
    820c:	80 83       	st	Z, r24
    820e:	ff 91       	pop	r31
    8210:	ef 91       	pop	r30
    8212:	bf 91       	pop	r27
    8214:	af 91       	pop	r26
    8216:	9f 91       	pop	r25
    8218:	8f 91       	pop	r24
    821a:	2f 91       	pop	r18
    821c:	0f 90       	pop	r0
    821e:	0b be       	out	0x3b, r0	; 59
    8220:	0f 90       	pop	r0
    8222:	0f be       	out	0x3f, r0	; 63
    8224:	0f 90       	pop	r0
    8226:	1f 90       	pop	r1
    8228:	18 95       	reti

0000822a <__vector_54>:
    822a:	1f 92       	push	r1
    822c:	0f 92       	push	r0
    822e:	0f b6       	in	r0, 0x3f	; 63
    8230:	0f 92       	push	r0
    8232:	11 24       	eor	r1, r1
    8234:	0b b6       	in	r0, 0x3b	; 59
    8236:	0f 92       	push	r0
    8238:	2f 93       	push	r18
    823a:	3f 93       	push	r19
    823c:	4f 93       	push	r20
    823e:	5f 93       	push	r21
    8240:	6f 93       	push	r22
    8242:	7f 93       	push	r23
    8244:	8f 93       	push	r24
    8246:	9f 93       	push	r25
    8248:	af 93       	push	r26
    824a:	bf 93       	push	r27
    824c:	cf 93       	push	r28
    824e:	df 93       	push	r29
    8250:	ef 93       	push	r30
    8252:	ff 93       	push	r31
    8254:	a0 91 e1 1c 	lds	r26, 0x1CE1	; 0x801ce1 <_ser_handle+0x6>
    8258:	b0 91 e2 1c 	lds	r27, 0x1CE2	; 0x801ce2 <_ser_handle+0x7>
    825c:	10 97       	sbiw	r26, 0x00	; 0
    825e:	11 f1       	breq	.+68     	; 0x82a4 <__vector_54+0x7a>
    8260:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    8264:	14 96       	adiw	r26, 0x04	; 4
    8266:	ed 91       	ld	r30, X+
    8268:	fc 91       	ld	r31, X
    826a:	15 97       	sbiw	r26, 0x05	; 5
    826c:	93 81       	ldd	r25, Z+3	; 0x03
    826e:	82 81       	ldd	r24, Z+2	; 0x02
    8270:	25 81       	ldd	r18, Z+5	; 0x05
    8272:	98 1b       	sub	r25, r24
    8274:	92 23       	and	r25, r18
    8276:	84 81       	ldd	r24, Z+4	; 0x04
    8278:	98 17       	cp	r25, r24
    827a:	61 f0       	breq	.+24     	; 0x8294 <__vector_54+0x6a>
    827c:	83 81       	ldd	r24, Z+3	; 0x03
    827e:	26 95       	lsr	r18
    8280:	28 23       	and	r18, r24
    8282:	c0 81       	ld	r28, Z
    8284:	d1 81       	ldd	r29, Z+1	; 0x01
    8286:	c2 0f       	add	r28, r18
    8288:	d1 1d       	adc	r29, r1
    828a:	68 83       	st	Y, r22
    828c:	8f 5f       	subi	r24, 0xFF	; 255
    828e:	95 81       	ldd	r25, Z+5	; 0x05
    8290:	89 23       	and	r24, r25
    8292:	83 83       	std	Z+3, r24	; 0x03
    8294:	16 96       	adiw	r26, 0x06	; 6
    8296:	ed 91       	ld	r30, X+
    8298:	fc 91       	ld	r31, X
    829a:	17 97       	sbiw	r26, 0x07	; 7
    829c:	30 97       	sbiw	r30, 0x00	; 0
    829e:	11 f0       	breq	.+4      	; 0x82a4 <__vector_54+0x7a>
    82a0:	cd 01       	movw	r24, r26
    82a2:	19 95       	eicall
    82a4:	ff 91       	pop	r31
    82a6:	ef 91       	pop	r30
    82a8:	df 91       	pop	r29
    82aa:	cf 91       	pop	r28
    82ac:	bf 91       	pop	r27
    82ae:	af 91       	pop	r26
    82b0:	9f 91       	pop	r25
    82b2:	8f 91       	pop	r24
    82b4:	7f 91       	pop	r23
    82b6:	6f 91       	pop	r22
    82b8:	5f 91       	pop	r21
    82ba:	4f 91       	pop	r20
    82bc:	3f 91       	pop	r19
    82be:	2f 91       	pop	r18
    82c0:	0f 90       	pop	r0
    82c2:	0b be       	out	0x3b, r0	; 59
    82c4:	0f 90       	pop	r0
    82c6:	0f be       	out	0x3f, r0	; 63
    82c8:	0f 90       	pop	r0
    82ca:	1f 90       	pop	r1
    82cc:	18 95       	reti

000082ce <__vector_55>:
    82ce:	1f 92       	push	r1
    82d0:	0f 92       	push	r0
    82d2:	0f b6       	in	r0, 0x3f	; 63
    82d4:	0f 92       	push	r0
    82d6:	11 24       	eor	r1, r1
    82d8:	0b b6       	in	r0, 0x3b	; 59
    82da:	0f 92       	push	r0
    82dc:	2f 93       	push	r18
    82de:	8f 93       	push	r24
    82e0:	9f 93       	push	r25
    82e2:	af 93       	push	r26
    82e4:	bf 93       	push	r27
    82e6:	ef 93       	push	r30
    82e8:	ff 93       	push	r31
    82ea:	e0 91 e1 1c 	lds	r30, 0x1CE1	; 0x801ce1 <_ser_handle+0x6>
    82ee:	f0 91 e2 1c 	lds	r31, 0x1CE2	; 0x801ce2 <_ser_handle+0x7>
    82f2:	30 97       	sbiw	r30, 0x00	; 0
    82f4:	b9 f0       	breq	.+46     	; 0x8324 <__vector_55+0x56>
    82f6:	02 80       	ldd	r0, Z+2	; 0x02
    82f8:	f3 81       	ldd	r31, Z+3	; 0x03
    82fa:	e0 2d       	mov	r30, r0
    82fc:	93 81       	ldd	r25, Z+3	; 0x03
    82fe:	82 81       	ldd	r24, Z+2	; 0x02
    8300:	98 17       	cp	r25, r24
    8302:	b1 f0       	breq	.+44     	; 0x8330 <__vector_55+0x62>
    8304:	92 81       	ldd	r25, Z+2	; 0x02
    8306:	85 81       	ldd	r24, Z+5	; 0x05
    8308:	28 2f       	mov	r18, r24
    830a:	26 95       	lsr	r18
    830c:	29 23       	and	r18, r25
    830e:	a0 81       	ld	r26, Z
    8310:	b1 81       	ldd	r27, Z+1	; 0x01
    8312:	a2 0f       	add	r26, r18
    8314:	b1 1d       	adc	r27, r1
    8316:	2c 91       	ld	r18, X
    8318:	9f 5f       	subi	r25, 0xFF	; 255
    831a:	89 23       	and	r24, r25
    831c:	82 83       	std	Z+2, r24	; 0x02
    831e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    8322:	0b c0       	rjmp	.+22     	; 0x833a <__vector_55+0x6c>
    8324:	e1 e3       	ldi	r30, 0x31	; 49
    8326:	f1 e0       	ldi	r31, 0x01	; 1
    8328:	80 81       	ld	r24, Z
    832a:	8f 7d       	andi	r24, 0xDF	; 223
    832c:	80 83       	st	Z, r24
    832e:	05 c0       	rjmp	.+10     	; 0x833a <__vector_55+0x6c>
    8330:	e1 e3       	ldi	r30, 0x31	; 49
    8332:	f1 e0       	ldi	r31, 0x01	; 1
    8334:	80 81       	ld	r24, Z
    8336:	8f 7d       	andi	r24, 0xDF	; 223
    8338:	80 83       	st	Z, r24
    833a:	ff 91       	pop	r31
    833c:	ef 91       	pop	r30
    833e:	bf 91       	pop	r27
    8340:	af 91       	pop	r26
    8342:	9f 91       	pop	r25
    8344:	8f 91       	pop	r24
    8346:	2f 91       	pop	r18
    8348:	0f 90       	pop	r0
    834a:	0b be       	out	0x3b, r0	; 59
    834c:	0f 90       	pop	r0
    834e:	0f be       	out	0x3f, r0	; 63
    8350:	0f 90       	pop	r0
    8352:	1f 90       	pop	r1
    8354:	18 95       	reti

00008356 <usart_getchar>:
    8356:	cf 93       	push	r28
    8358:	df 93       	push	r29
    835a:	1f 92       	push	r1
    835c:	cd b7       	in	r28, 0x3d	; 61
    835e:	de b7       	in	r29, 0x3e	; 62
    8360:	be 01       	movw	r22, r28
    8362:	6f 5f       	subi	r22, 0xFF	; 255
    8364:	7f 4f       	sbci	r23, 0xFF	; 255
    8366:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <_com_serial_instance>
    836a:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <_com_serial_instance+0x1>
    836e:	7b dd       	rcall	.-1290   	; 0x7e66 <serial_getByte>
    8370:	81 11       	cpse	r24, r1
    8372:	f6 cf       	rjmp	.-20     	; 0x8360 <usart_getchar+0xa>
    8374:	89 81       	ldd	r24, Y+1	; 0x01
    8376:	90 e0       	ldi	r25, 0x00	; 0
    8378:	0f 90       	pop	r0
    837a:	df 91       	pop	r29
    837c:	cf 91       	pop	r28
    837e:	08 95       	ret

00008380 <usart_putchar>:
    8380:	68 2f       	mov	r22, r24
    8382:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <_com_serial_instance>
    8386:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <_com_serial_instance+0x1>
    838a:	ed dc       	rcall	.-1574   	; 0x7d66 <serial_sendByte>
    838c:	80 e0       	ldi	r24, 0x00	; 0
    838e:	90 e0       	ldi	r25, 0x00	; 0
    8390:	08 95       	ret

00008392 <stdio_initialise>:
    8392:	8f 92       	push	r8
    8394:	9f 92       	push	r9
    8396:	af 92       	push	r10
    8398:	cf 92       	push	r12
    839a:	ef 92       	push	r14
    839c:	0f 93       	push	r16
    839e:	81 2c       	mov	r8, r1
    83a0:	91 2c       	mov	r9, r1
    83a2:	68 94       	set
    83a4:	aa 24       	eor	r10, r10
    83a6:	a7 f8       	bld	r10, 7
    83a8:	68 94       	set
    83aa:	cc 24       	eor	r12, r12
    83ac:	c7 f8       	bld	r12, 7
    83ae:	e1 2c       	mov	r14, r1
    83b0:	00 e0       	ldi	r16, 0x00	; 0
    83b2:	23 e0       	ldi	r18, 0x03	; 3
    83b4:	40 e0       	ldi	r20, 0x00	; 0
    83b6:	51 ee       	ldi	r21, 0xE1	; 225
    83b8:	60 e0       	ldi	r22, 0x00	; 0
    83ba:	70 e0       	ldi	r23, 0x00	; 0
    83bc:	30 dc       	rcall	.-1952   	; 0x7c1e <serial_create>
    83be:	90 93 e4 1c 	sts	0x1CE4, r25	; 0x801ce4 <_com_serial_instance+0x1>
    83c2:	80 93 e3 1c 	sts	0x1CE3, r24	; 0x801ce3 <_com_serial_instance>
    83c6:	e8 e1       	ldi	r30, 0x18	; 24
    83c8:	fd e1       	ldi	r31, 0x1D	; 29
    83ca:	84 e1       	ldi	r24, 0x14	; 20
    83cc:	92 e0       	ldi	r25, 0x02	; 2
    83ce:	91 83       	std	Z+1, r25	; 0x01
    83d0:	80 83       	st	Z, r24
    83d2:	93 83       	std	Z+3, r25	; 0x03
    83d4:	82 83       	std	Z+2, r24	; 0x02
    83d6:	0f 91       	pop	r16
    83d8:	ef 90       	pop	r14
    83da:	cf 90       	pop	r12
    83dc:	af 90       	pop	r10
    83de:	9f 90       	pop	r9
    83e0:	8f 90       	pop	r8
    83e2:	08 95       	ret

000083e4 <_turn_off>:
    83e4:	90 e0       	ldi	r25, 0x00	; 0
    83e6:	fc 01       	movw	r30, r24
    83e8:	ee 0f       	add	r30, r30
    83ea:	ff 1f       	adc	r31, r31
    83ec:	e8 0f       	add	r30, r24
    83ee:	f9 1f       	adc	r31, r25
    83f0:	ee 0f       	add	r30, r30
    83f2:	ff 1f       	adc	r31, r31
    83f4:	eb 51       	subi	r30, 0x1B	; 27
    83f6:	f3 4e       	sbci	r31, 0xE3	; 227
    83f8:	23 81       	ldd	r18, Z+3	; 0x03
    83fa:	21 11       	cpse	r18, r1
    83fc:	1f c0       	rjmp	.+62     	; 0x843c <_turn_off+0x58>
    83fe:	9c 01       	movw	r18, r24
    8400:	22 0f       	add	r18, r18
    8402:	33 1f       	adc	r19, r19
    8404:	f9 01       	movw	r30, r18
    8406:	e8 0f       	add	r30, r24
    8408:	f9 1f       	adc	r31, r25
    840a:	ee 0f       	add	r30, r30
    840c:	ff 1f       	adc	r31, r31
    840e:	eb 51       	subi	r30, 0x1B	; 27
    8410:	f3 4e       	sbci	r31, 0xE3	; 227
    8412:	a0 81       	ld	r26, Z
    8414:	b1 81       	ldd	r27, Z+1	; 0x01
    8416:	4c 91       	ld	r20, X
    8418:	f9 01       	movw	r30, r18
    841a:	e8 0f       	add	r30, r24
    841c:	f9 1f       	adc	r31, r25
    841e:	ee 0f       	add	r30, r30
    8420:	ff 1f       	adc	r31, r31
    8422:	eb 51       	subi	r30, 0x1B	; 27
    8424:	f3 4e       	sbci	r31, 0xE3	; 227
    8426:	81 e0       	ldi	r24, 0x01	; 1
    8428:	90 e0       	ldi	r25, 0x00	; 0
    842a:	02 80       	ldd	r0, Z+2	; 0x02
    842c:	02 c0       	rjmp	.+4      	; 0x8432 <_turn_off+0x4e>
    842e:	88 0f       	add	r24, r24
    8430:	99 1f       	adc	r25, r25
    8432:	0a 94       	dec	r0
    8434:	e2 f7       	brpl	.-8      	; 0x842e <_turn_off+0x4a>
    8436:	84 2b       	or	r24, r20
    8438:	8c 93       	st	X, r24
    843a:	08 95       	ret
    843c:	fc 01       	movw	r30, r24
    843e:	ee 0f       	add	r30, r30
    8440:	ff 1f       	adc	r31, r31
    8442:	df 01       	movw	r26, r30
    8444:	a8 0f       	add	r26, r24
    8446:	b9 1f       	adc	r27, r25
    8448:	aa 0f       	add	r26, r26
    844a:	bb 1f       	adc	r27, r27
    844c:	ab 51       	subi	r26, 0x1B	; 27
    844e:	b3 4e       	sbci	r27, 0xE3	; 227
    8450:	0d 90       	ld	r0, X+
    8452:	bc 91       	ld	r27, X
    8454:	a0 2d       	mov	r26, r0
    8456:	2c 91       	ld	r18, X
    8458:	e8 0f       	add	r30, r24
    845a:	f9 1f       	adc	r31, r25
    845c:	ee 0f       	add	r30, r30
    845e:	ff 1f       	adc	r31, r31
    8460:	eb 51       	subi	r30, 0x1B	; 27
    8462:	f3 4e       	sbci	r31, 0xE3	; 227
    8464:	81 e0       	ldi	r24, 0x01	; 1
    8466:	90 e0       	ldi	r25, 0x00	; 0
    8468:	02 80       	ldd	r0, Z+2	; 0x02
    846a:	02 c0       	rjmp	.+4      	; 0x8470 <_turn_off+0x8c>
    846c:	88 0f       	add	r24, r24
    846e:	99 1f       	adc	r25, r25
    8470:	0a 94       	dec	r0
    8472:	e2 f7       	brpl	.-8      	; 0x846c <_turn_off+0x88>
    8474:	80 95       	com	r24
    8476:	82 23       	and	r24, r18
    8478:	8c 93       	st	X, r24
    847a:	08 95       	ret

0000847c <_turn_on>:
    847c:	90 e0       	ldi	r25, 0x00	; 0
    847e:	fc 01       	movw	r30, r24
    8480:	ee 0f       	add	r30, r30
    8482:	ff 1f       	adc	r31, r31
    8484:	e8 0f       	add	r30, r24
    8486:	f9 1f       	adc	r31, r25
    8488:	ee 0f       	add	r30, r30
    848a:	ff 1f       	adc	r31, r31
    848c:	eb 51       	subi	r30, 0x1B	; 27
    848e:	f3 4e       	sbci	r31, 0xE3	; 227
    8490:	23 81       	ldd	r18, Z+3	; 0x03
    8492:	21 11       	cpse	r18, r1
    8494:	20 c0       	rjmp	.+64     	; 0x84d6 <_turn_on+0x5a>
    8496:	9c 01       	movw	r18, r24
    8498:	22 0f       	add	r18, r18
    849a:	33 1f       	adc	r19, r19
    849c:	f9 01       	movw	r30, r18
    849e:	e8 0f       	add	r30, r24
    84a0:	f9 1f       	adc	r31, r25
    84a2:	ee 0f       	add	r30, r30
    84a4:	ff 1f       	adc	r31, r31
    84a6:	eb 51       	subi	r30, 0x1B	; 27
    84a8:	f3 4e       	sbci	r31, 0xE3	; 227
    84aa:	a0 81       	ld	r26, Z
    84ac:	b1 81       	ldd	r27, Z+1	; 0x01
    84ae:	4c 91       	ld	r20, X
    84b0:	f9 01       	movw	r30, r18
    84b2:	e8 0f       	add	r30, r24
    84b4:	f9 1f       	adc	r31, r25
    84b6:	ee 0f       	add	r30, r30
    84b8:	ff 1f       	adc	r31, r31
    84ba:	eb 51       	subi	r30, 0x1B	; 27
    84bc:	f3 4e       	sbci	r31, 0xE3	; 227
    84be:	81 e0       	ldi	r24, 0x01	; 1
    84c0:	90 e0       	ldi	r25, 0x00	; 0
    84c2:	02 80       	ldd	r0, Z+2	; 0x02
    84c4:	02 c0       	rjmp	.+4      	; 0x84ca <_turn_on+0x4e>
    84c6:	88 0f       	add	r24, r24
    84c8:	99 1f       	adc	r25, r25
    84ca:	0a 94       	dec	r0
    84cc:	e2 f7       	brpl	.-8      	; 0x84c6 <_turn_on+0x4a>
    84ce:	80 95       	com	r24
    84d0:	84 23       	and	r24, r20
    84d2:	8c 93       	st	X, r24
    84d4:	08 95       	ret
    84d6:	fc 01       	movw	r30, r24
    84d8:	ee 0f       	add	r30, r30
    84da:	ff 1f       	adc	r31, r31
    84dc:	df 01       	movw	r26, r30
    84de:	a8 0f       	add	r26, r24
    84e0:	b9 1f       	adc	r27, r25
    84e2:	aa 0f       	add	r26, r26
    84e4:	bb 1f       	adc	r27, r27
    84e6:	ab 51       	subi	r26, 0x1B	; 27
    84e8:	b3 4e       	sbci	r27, 0xE3	; 227
    84ea:	0d 90       	ld	r0, X+
    84ec:	bc 91       	ld	r27, X
    84ee:	a0 2d       	mov	r26, r0
    84f0:	2c 91       	ld	r18, X
    84f2:	e8 0f       	add	r30, r24
    84f4:	f9 1f       	adc	r31, r25
    84f6:	ee 0f       	add	r30, r30
    84f8:	ff 1f       	adc	r31, r31
    84fa:	eb 51       	subi	r30, 0x1B	; 27
    84fc:	f3 4e       	sbci	r31, 0xE3	; 227
    84fe:	81 e0       	ldi	r24, 0x01	; 1
    8500:	90 e0       	ldi	r25, 0x00	; 0
    8502:	02 80       	ldd	r0, Z+2	; 0x02
    8504:	02 c0       	rjmp	.+4      	; 0x850a <_turn_on+0x8e>
    8506:	88 0f       	add	r24, r24
    8508:	99 1f       	adc	r25, r25
    850a:	0a 94       	dec	r0
    850c:	e2 f7       	brpl	.-8      	; 0x8506 <_turn_on+0x8a>
    850e:	82 2b       	or	r24, r18
    8510:	8c 93       	st	X, r24
    8512:	08 95       	ret

00008514 <_hal_led_task>:
    8514:	cc 24       	eor	r12, r12
    8516:	c3 94       	inc	r12
    8518:	d1 2c       	mov	r13, r1
    851a:	68 94       	set
    851c:	bb 24       	eor	r11, r11
    851e:	b2 f8       	bld	r11, 2
    8520:	c5 ee       	ldi	r28, 0xE5	; 229
    8522:	dc e1       	ldi	r29, 0x1C	; 28
    8524:	10 e0       	ldi	r17, 0x00	; 0
    8526:	8c 81       	ldd	r24, Y+4	; 0x04
    8528:	81 30       	cpi	r24, 0x01	; 1
    852a:	81 f0       	breq	.+32     	; 0x854c <_hal_led_task+0x38>
    852c:	18 f1       	brcs	.+70     	; 0x8574 <_hal_led_task+0x60>
    852e:	82 30       	cpi	r24, 0x02	; 2
    8530:	61 f5       	brne	.+88     	; 0x858a <_hal_led_task+0x76>
    8532:	e8 81       	ld	r30, Y
    8534:	f9 81       	ldd	r31, Y+1	; 0x01
    8536:	20 81       	ld	r18, Z
    8538:	c6 01       	movw	r24, r12
    853a:	0a 80       	ldd	r0, Y+2	; 0x02
    853c:	02 c0       	rjmp	.+4      	; 0x8542 <_hal_led_task+0x2e>
    853e:	88 0f       	add	r24, r24
    8540:	99 1f       	adc	r25, r25
    8542:	0a 94       	dec	r0
    8544:	e2 f7       	brpl	.-8      	; 0x853e <_hal_led_task+0x2a>
    8546:	82 27       	eor	r24, r18
    8548:	80 83       	st	Z, r24
    854a:	1f c0       	rjmp	.+62     	; 0x858a <_hal_led_task+0x76>
    854c:	8d 81       	ldd	r24, Y+5	; 0x05
    854e:	8f 5f       	subi	r24, 0xFF	; 255
    8550:	86 30       	cpi	r24, 0x06	; 6
    8552:	10 f4       	brcc	.+4      	; 0x8558 <_hal_led_task+0x44>
    8554:	8d 83       	std	Y+5, r24	; 0x05
    8556:	19 c0       	rjmp	.+50     	; 0x858a <_hal_led_task+0x76>
    8558:	1d 82       	std	Y+5, r1	; 0x05
    855a:	e8 81       	ld	r30, Y
    855c:	f9 81       	ldd	r31, Y+1	; 0x01
    855e:	20 81       	ld	r18, Z
    8560:	c6 01       	movw	r24, r12
    8562:	0a 80       	ldd	r0, Y+2	; 0x02
    8564:	02 c0       	rjmp	.+4      	; 0x856a <_hal_led_task+0x56>
    8566:	88 0f       	add	r24, r24
    8568:	99 1f       	adc	r25, r25
    856a:	0a 94       	dec	r0
    856c:	e2 f7       	brpl	.-8      	; 0x8566 <_hal_led_task+0x52>
    856e:	82 27       	eor	r24, r18
    8570:	80 83       	st	Z, r24
    8572:	0b c0       	rjmp	.+22     	; 0x858a <_hal_led_task+0x76>
    8574:	0d 81       	ldd	r16, Y+5	; 0x05
    8576:	00 23       	and	r16, r16
    8578:	29 f0       	breq	.+10     	; 0x8584 <_hal_led_task+0x70>
    857a:	81 2f       	mov	r24, r17
    857c:	7f df       	rcall	.-258    	; 0x847c <_turn_on>
    857e:	01 50       	subi	r16, 0x01	; 1
    8580:	0d 83       	std	Y+5, r16	; 0x05
    8582:	03 c0       	rjmp	.+6      	; 0x858a <_hal_led_task+0x76>
    8584:	bc 82       	std	Y+4, r11	; 0x04
    8586:	81 2f       	mov	r24, r17
    8588:	2d df       	rcall	.-422    	; 0x83e4 <_turn_off>
    858a:	1f 5f       	subi	r17, 0xFF	; 255
    858c:	26 96       	adiw	r28, 0x06	; 6
    858e:	14 30       	cpi	r17, 0x04	; 4
    8590:	51 f6       	brne	.-108    	; 0x8526 <_hal_led_task+0x12>
    8592:	6c e0       	ldi	r22, 0x0C	; 12
    8594:	70 e0       	ldi	r23, 0x00	; 0
    8596:	80 e0       	ldi	r24, 0x00	; 0
    8598:	90 e0       	ldi	r25, 0x00	; 0
    859a:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskDelay>
    859e:	c0 cf       	rjmp	.-128    	; 0x8520 <_hal_led_task+0xc>

000085a0 <status_leds_initialise>:
    85a0:	ef 92       	push	r14
    85a2:	ff 92       	push	r15
    85a4:	0f 93       	push	r16
    85a6:	1f 93       	push	r17
    85a8:	cf 93       	push	r28
    85aa:	df 93       	push	r29
    85ac:	08 2f       	mov	r16, r24
    85ae:	80 e4       	ldi	r24, 0x40	; 64
    85b0:	87 b9       	out	0x07, r24	; 7
    85b2:	c5 ee       	ldi	r28, 0xE5	; 229
    85b4:	dc e1       	ldi	r29, 0x1C	; 28
    85b6:	0f 2e       	mov	r0, r31
    85b8:	f8 e2       	ldi	r31, 0x28	; 40
    85ba:	ef 2e       	mov	r14, r31
    85bc:	f1 2c       	mov	r15, r1
    85be:	f0 2d       	mov	r31, r0
    85c0:	f9 82       	std	Y+1, r15	; 0x01
    85c2:	e8 82       	st	Y, r14
    85c4:	86 e0       	ldi	r24, 0x06	; 6
    85c6:	8a 83       	std	Y+2, r24	; 0x02
    85c8:	1b 82       	std	Y+3, r1	; 0x03
    85ca:	14 e0       	ldi	r17, 0x04	; 4
    85cc:	1c 83       	std	Y+4, r17	; 0x04
    85ce:	80 e0       	ldi	r24, 0x00	; 0
    85d0:	09 df       	rcall	.-494    	; 0x83e4 <_turn_off>
    85d2:	80 e8       	ldi	r24, 0x80	; 128
    85d4:	87 b9       	out	0x07, r24	; 7
    85d6:	ff 82       	std	Y+7, r15	; 0x07
    85d8:	ee 82       	std	Y+6, r14	; 0x06
    85da:	87 e0       	ldi	r24, 0x07	; 7
    85dc:	88 87       	std	Y+8, r24	; 0x08
    85de:	19 86       	std	Y+9, r1	; 0x09
    85e0:	1a 87       	std	Y+10, r17	; 0x0a
    85e2:	81 e0       	ldi	r24, 0x01	; 1
    85e4:	ff de       	rcall	.-514    	; 0x83e4 <_turn_off>
    85e6:	80 e2       	ldi	r24, 0x20	; 32
    85e8:	83 bb       	out	0x13, r24	; 19
    85ea:	84 e3       	ldi	r24, 0x34	; 52
    85ec:	90 e0       	ldi	r25, 0x00	; 0
    85ee:	9d 87       	std	Y+13, r25	; 0x0d
    85f0:	8c 87       	std	Y+12, r24	; 0x0c
    85f2:	85 e0       	ldi	r24, 0x05	; 5
    85f4:	8e 87       	std	Y+14, r24	; 0x0e
    85f6:	1f 86       	std	Y+15, r1	; 0x0f
    85f8:	18 8b       	std	Y+16, r17	; 0x10
    85fa:	82 e0       	ldi	r24, 0x02	; 2
    85fc:	f3 de       	rcall	.-538    	; 0x83e4 <_turn_off>
    85fe:	80 e1       	ldi	r24, 0x10	; 16
    8600:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    8604:	82 e0       	ldi	r24, 0x02	; 2
    8606:	91 e0       	ldi	r25, 0x01	; 1
    8608:	9b 8b       	std	Y+19, r25	; 0x13
    860a:	8a 8b       	std	Y+18, r24	; 0x12
    860c:	1c 8b       	std	Y+20, r17	; 0x14
    860e:	1d 8a       	std	Y+21, r1	; 0x15
    8610:	1e 8b       	std	Y+22, r17	; 0x16
    8612:	83 e0       	ldi	r24, 0x03	; 3
    8614:	e7 de       	rcall	.-562    	; 0x83e4 <_turn_off>
    8616:	e1 2c       	mov	r14, r1
    8618:	f1 2c       	mov	r15, r1
    861a:	20 e0       	ldi	r18, 0x00	; 0
    861c:	30 e0       	ldi	r19, 0x00	; 0
    861e:	40 ec       	ldi	r20, 0xC0	; 192
    8620:	50 e0       	ldi	r21, 0x00	; 0
    8622:	69 ef       	ldi	r22, 0xF9	; 249
    8624:	7c e0       	ldi	r23, 0x0C	; 12
    8626:	8a e8       	ldi	r24, 0x8A	; 138
    8628:	92 e4       	ldi	r25, 0x42	; 66
    862a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <xTaskCreate>
    862e:	df 91       	pop	r29
    8630:	cf 91       	pop	r28
    8632:	1f 91       	pop	r17
    8634:	0f 91       	pop	r16
    8636:	ff 90       	pop	r15
    8638:	ef 90       	pop	r14
    863a:	08 95       	ret

0000863c <status_leds_slowBlink>:
    863c:	cf 93       	push	r28
    863e:	df 93       	push	r29
    8640:	90 e0       	ldi	r25, 0x00	; 0
    8642:	fc 01       	movw	r30, r24
    8644:	ee 0f       	add	r30, r30
    8646:	ff 1f       	adc	r31, r31
    8648:	df 01       	movw	r26, r30
    864a:	a8 0f       	add	r26, r24
    864c:	b9 1f       	adc	r27, r25
    864e:	aa 0f       	add	r26, r26
    8650:	bb 1f       	adc	r27, r27
    8652:	ab 51       	subi	r26, 0x1B	; 27
    8654:	b3 4e       	sbci	r27, 0xE3	; 227
    8656:	cd 91       	ld	r28, X+
    8658:	dc 91       	ld	r29, X
    865a:	11 97       	sbiw	r26, 0x01	; 1
    865c:	48 81       	ld	r20, Y
    865e:	21 e0       	ldi	r18, 0x01	; 1
    8660:	30 e0       	ldi	r19, 0x00	; 0
    8662:	12 96       	adiw	r26, 0x02	; 2
    8664:	0c 90       	ld	r0, X
    8666:	12 97       	sbiw	r26, 0x02	; 2
    8668:	02 c0       	rjmp	.+4      	; 0x866e <status_leds_slowBlink+0x32>
    866a:	22 0f       	add	r18, r18
    866c:	33 1f       	adc	r19, r19
    866e:	0a 94       	dec	r0
    8670:	e2 f7       	brpl	.-8      	; 0x866a <status_leds_slowBlink+0x2e>
    8672:	24 27       	eor	r18, r20
    8674:	28 83       	st	Y, r18
    8676:	fd 01       	movw	r30, r26
    8678:	81 e0       	ldi	r24, 0x01	; 1
    867a:	84 83       	std	Z+4, r24	; 0x04
    867c:	df 91       	pop	r29
    867e:	cf 91       	pop	r28
    8680:	08 95       	ret

00008682 <status_leds_fastBlink>:
    8682:	cf 93       	push	r28
    8684:	df 93       	push	r29
    8686:	90 e0       	ldi	r25, 0x00	; 0
    8688:	fc 01       	movw	r30, r24
    868a:	ee 0f       	add	r30, r30
    868c:	ff 1f       	adc	r31, r31
    868e:	df 01       	movw	r26, r30
    8690:	a8 0f       	add	r26, r24
    8692:	b9 1f       	adc	r27, r25
    8694:	aa 0f       	add	r26, r26
    8696:	bb 1f       	adc	r27, r27
    8698:	ab 51       	subi	r26, 0x1B	; 27
    869a:	b3 4e       	sbci	r27, 0xE3	; 227
    869c:	cd 91       	ld	r28, X+
    869e:	dc 91       	ld	r29, X
    86a0:	11 97       	sbiw	r26, 0x01	; 1
    86a2:	48 81       	ld	r20, Y
    86a4:	21 e0       	ldi	r18, 0x01	; 1
    86a6:	30 e0       	ldi	r19, 0x00	; 0
    86a8:	12 96       	adiw	r26, 0x02	; 2
    86aa:	0c 90       	ld	r0, X
    86ac:	12 97       	sbiw	r26, 0x02	; 2
    86ae:	02 c0       	rjmp	.+4      	; 0x86b4 <status_leds_fastBlink+0x32>
    86b0:	22 0f       	add	r18, r18
    86b2:	33 1f       	adc	r19, r19
    86b4:	0a 94       	dec	r0
    86b6:	e2 f7       	brpl	.-8      	; 0x86b0 <status_leds_fastBlink+0x2e>
    86b8:	24 27       	eor	r18, r20
    86ba:	28 83       	st	Y, r18
    86bc:	fd 01       	movw	r30, r26
    86be:	82 e0       	ldi	r24, 0x02	; 2
    86c0:	84 83       	std	Z+4, r24	; 0x04
    86c2:	df 91       	pop	r29
    86c4:	cf 91       	pop	r28
    86c6:	08 95       	ret

000086c8 <status_leds_ledOn>:
    86c8:	28 2f       	mov	r18, r24
    86ca:	30 e0       	ldi	r19, 0x00	; 0
    86cc:	f9 01       	movw	r30, r18
    86ce:	ee 0f       	add	r30, r30
    86d0:	ff 1f       	adc	r31, r31
    86d2:	e2 0f       	add	r30, r18
    86d4:	f3 1f       	adc	r31, r19
    86d6:	ee 0f       	add	r30, r30
    86d8:	ff 1f       	adc	r31, r31
    86da:	eb 51       	subi	r30, 0x1B	; 27
    86dc:	f3 4e       	sbci	r31, 0xE3	; 227
    86de:	93 e0       	ldi	r25, 0x03	; 3
    86e0:	94 83       	std	Z+4, r25	; 0x04
    86e2:	cc ce       	rjmp	.-616    	; 0x847c <_turn_on>
    86e4:	08 95       	ret

000086e6 <status_leds_ledOff>:
    86e6:	28 2f       	mov	r18, r24
    86e8:	30 e0       	ldi	r19, 0x00	; 0
    86ea:	f9 01       	movw	r30, r18
    86ec:	ee 0f       	add	r30, r30
    86ee:	ff 1f       	adc	r31, r31
    86f0:	e2 0f       	add	r30, r18
    86f2:	f3 1f       	adc	r31, r19
    86f4:	ee 0f       	add	r30, r30
    86f6:	ff 1f       	adc	r31, r31
    86f8:	eb 51       	subi	r30, 0x1B	; 27
    86fa:	f3 4e       	sbci	r31, 0xE3	; 227
    86fc:	94 e0       	ldi	r25, 0x04	; 4
    86fe:	94 83       	std	Z+4, r25	; 0x04
    8700:	71 ce       	rjmp	.-798    	; 0x83e4 <_turn_off>
    8702:	08 95       	ret

00008704 <status_leds_longPuls>:
    8704:	90 e0       	ldi	r25, 0x00	; 0
    8706:	fc 01       	movw	r30, r24
    8708:	ee 0f       	add	r30, r30
    870a:	ff 1f       	adc	r31, r31
    870c:	df 01       	movw	r26, r30
    870e:	a8 0f       	add	r26, r24
    8710:	b9 1f       	adc	r27, r25
    8712:	aa 0f       	add	r26, r26
    8714:	bb 1f       	adc	r27, r27
    8716:	ab 51       	subi	r26, 0x1B	; 27
    8718:	b3 4e       	sbci	r27, 0xE3	; 227
    871a:	26 e0       	ldi	r18, 0x06	; 6
    871c:	15 96       	adiw	r26, 0x05	; 5
    871e:	2c 93       	st	X, r18
    8720:	15 97       	sbiw	r26, 0x05	; 5
    8722:	fd 01       	movw	r30, r26
    8724:	14 82       	std	Z+4, r1	; 0x04
    8726:	08 95       	ret

00008728 <status_leds_shortPuls>:
    8728:	90 e0       	ldi	r25, 0x00	; 0
    872a:	fc 01       	movw	r30, r24
    872c:	ee 0f       	add	r30, r30
    872e:	ff 1f       	adc	r31, r31
    8730:	df 01       	movw	r26, r30
    8732:	a8 0f       	add	r26, r24
    8734:	b9 1f       	adc	r27, r25
    8736:	aa 0f       	add	r26, r26
    8738:	bb 1f       	adc	r27, r27
    873a:	ab 51       	subi	r26, 0x1B	; 27
    873c:	b3 4e       	sbci	r27, 0xE3	; 227
    873e:	15 96       	adiw	r26, 0x05	; 5
    8740:	1c 92       	st	X, r1
    8742:	15 97       	sbiw	r26, 0x05	; 5
    8744:	fd 01       	movw	r30, r26
    8746:	14 82       	std	Z+4, r1	; 0x04
    8748:	08 95       	ret

0000874a <_initTwiInterface>:
    874a:	80 91 0b 1d 	lds	r24, 0x1D0B	; 0x801d0b <_twiIsInitiated>
    874e:	81 11       	cpse	r24, r1
    8750:	0c c0       	rjmp	.+24     	; 0x876a <_initTwiInterface+0x20>
    8752:	8c e0       	ldi	r24, 0x0C	; 12
    8754:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    8758:	8f ef       	ldi	r24, 0xFF	; 255
    875a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    875e:	84 e0       	ldi	r24, 0x04	; 4
    8760:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    8764:	81 e0       	ldi	r24, 0x01	; 1
    8766:	80 93 0b 1d 	sts	0x1D0B, r24	; 0x801d0b <_twiIsInitiated>
    876a:	08 95       	ret

0000876c <twiCreate>:
    876c:	af 92       	push	r10
    876e:	bf 92       	push	r11
    8770:	cf 92       	push	r12
    8772:	df 92       	push	r13
    8774:	ef 92       	push	r14
    8776:	ff 92       	push	r15
    8778:	0f 93       	push	r16
    877a:	1f 93       	push	r17
    877c:	cf 93       	push	r28
    877e:	df 93       	push	r29
    8780:	a8 2e       	mov	r10, r24
    8782:	b6 2e       	mov	r11, r22
    8784:	69 01       	movw	r12, r18
    8786:	7a 01       	movw	r14, r20
    8788:	84 e0       	ldi	r24, 0x04	; 4
    878a:	90 e0       	ldi	r25, 0x00	; 0
    878c:	a2 d6       	rcall	.+3396   	; 0x94d2 <malloc>
    878e:	ec 01       	movw	r28, r24
    8790:	89 2b       	or	r24, r25
    8792:	61 f1       	breq	.+88     	; 0x87ec <twiCreate+0x80>
    8794:	a8 82       	st	Y, r10
    8796:	81 e0       	ldi	r24, 0x01	; 1
    8798:	b8 12       	cpse	r11, r24
    879a:	12 c0       	rjmp	.+36     	; 0x87c0 <twiCreate+0x54>
    879c:	c7 01       	movw	r24, r14
    879e:	b6 01       	movw	r22, r12
    87a0:	20 ea       	ldi	r18, 0xA0	; 160
    87a2:	36 e8       	ldi	r19, 0x86	; 134
    87a4:	41 e0       	ldi	r20, 0x01	; 1
    87a6:	50 e0       	ldi	r21, 0x00	; 0
    87a8:	47 d6       	rcall	.+3214   	; 0x9438 <__udivmodsi4>
    87aa:	da 01       	movw	r26, r20
    87ac:	c9 01       	movw	r24, r18
    87ae:	40 97       	sbiw	r24, 0x10	; 16
    87b0:	a1 09       	sbc	r26, r1
    87b2:	b1 09       	sbc	r27, r1
    87b4:	b6 95       	lsr	r27
    87b6:	a7 95       	ror	r26
    87b8:	97 95       	ror	r25
    87ba:	87 95       	ror	r24
    87bc:	89 83       	std	Y+1, r24	; 0x01
    87be:	11 c0       	rjmp	.+34     	; 0x87e2 <twiCreate+0x76>
    87c0:	c7 01       	movw	r24, r14
    87c2:	b6 01       	movw	r22, r12
    87c4:	20 e8       	ldi	r18, 0x80	; 128
    87c6:	3a e1       	ldi	r19, 0x1A	; 26
    87c8:	46 e0       	ldi	r20, 0x06	; 6
    87ca:	50 e0       	ldi	r21, 0x00	; 0
    87cc:	35 d6       	rcall	.+3178   	; 0x9438 <__udivmodsi4>
    87ce:	da 01       	movw	r26, r20
    87d0:	c9 01       	movw	r24, r18
    87d2:	40 97       	sbiw	r24, 0x10	; 16
    87d4:	a1 09       	sbc	r26, r1
    87d6:	b1 09       	sbc	r27, r1
    87d8:	b6 95       	lsr	r27
    87da:	a7 95       	ror	r26
    87dc:	97 95       	ror	r25
    87de:	87 95       	ror	r24
    87e0:	89 83       	std	Y+1, r24	; 0x01
    87e2:	1b 83       	std	Y+3, r17	; 0x03
    87e4:	0a 83       	std	Y+2, r16	; 0x02
    87e6:	8c 2f       	mov	r24, r28
    87e8:	9d 2f       	mov	r25, r29
    87ea:	02 c0       	rjmp	.+4      	; 0x87f0 <twiCreate+0x84>
    87ec:	80 e0       	ldi	r24, 0x00	; 0
    87ee:	90 e0       	ldi	r25, 0x00	; 0
    87f0:	df 91       	pop	r29
    87f2:	cf 91       	pop	r28
    87f4:	1f 91       	pop	r17
    87f6:	0f 91       	pop	r16
    87f8:	ff 90       	pop	r15
    87fa:	ef 90       	pop	r14
    87fc:	df 90       	pop	r13
    87fe:	cf 90       	pop	r12
    8800:	bf 90       	pop	r11
    8802:	af 90       	pop	r10
    8804:	08 95       	ret

00008806 <twiIsBusy>:
    8806:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    880a:	81 70       	andi	r24, 0x01	; 1
    880c:	08 95       	ret

0000880e <twiTransmit>:
    880e:	ff 92       	push	r15
    8810:	0f 93       	push	r16
    8812:	1f 93       	push	r17
    8814:	cf 93       	push	r28
    8816:	df 93       	push	r29
    8818:	00 97       	sbiw	r24, 0x00	; 0
    881a:	d1 f1       	breq	.+116    	; 0x8890 <twiTransmit+0x82>
    881c:	4a 30       	cpi	r20, 0x0A	; 10
    881e:	d0 f5       	brcc	.+116    	; 0x8894 <twiTransmit+0x86>
    8820:	f4 2e       	mov	r15, r20
    8822:	8b 01       	movw	r16, r22
    8824:	ec 01       	movw	r28, r24
    8826:	ef df       	rcall	.-34     	; 0x8806 <twiIsBusy>
    8828:	81 11       	cpse	r24, r1
    882a:	36 c0       	rjmp	.+108    	; 0x8898 <twiTransmit+0x8a>
    882c:	80 91 fe 1c 	lds	r24, 0x1CFE	; 0x801cfe <_twiCurrentHandler>
    8830:	90 91 ff 1c 	lds	r25, 0x1CFF	; 0x801cff <_twiCurrentHandler+0x1>
    8834:	c8 17       	cp	r28, r24
    8836:	d9 07       	cpc	r29, r25
    8838:	41 f0       	breq	.+16     	; 0x884a <twiTransmit+0x3c>
    883a:	87 df       	rcall	.-242    	; 0x874a <_initTwiInterface>
    883c:	89 81       	ldd	r24, Y+1	; 0x01
    883e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    8842:	d0 93 ff 1c 	sts	0x1CFF, r29	; 0x801cff <_twiCurrentHandler+0x1>
    8846:	c0 93 fe 1c 	sts	0x1CFE, r28	; 0x801cfe <_twiCurrentHandler>
    884a:	81 e0       	ldi	r24, 0x01	; 1
    884c:	8f 0d       	add	r24, r15
    884e:	80 93 00 1d 	sts	0x1D00, r24	; 0x801d00 <_twiMessageLen>
    8852:	88 81       	ld	r24, Y
    8854:	88 0f       	add	r24, r24
    8856:	80 93 01 1d 	sts	0x1D01, r24	; 0x801d01 <_twiMessageBuffer>
    885a:	ff 20       	and	r15, r15
    885c:	89 f0       	breq	.+34     	; 0x8880 <twiTransmit+0x72>
    885e:	f8 01       	movw	r30, r16
    8860:	a2 e0       	ldi	r26, 0x02	; 2
    8862:	bd e1       	ldi	r27, 0x1D	; 29
    8864:	4f ef       	ldi	r20, 0xFF	; 255
    8866:	4f 0d       	add	r20, r15
    8868:	64 2f       	mov	r22, r20
    886a:	70 e0       	ldi	r23, 0x00	; 0
    886c:	cb 01       	movw	r24, r22
    886e:	01 96       	adiw	r24, 0x01	; 1
    8870:	b8 01       	movw	r22, r16
    8872:	68 0f       	add	r22, r24
    8874:	79 1f       	adc	r23, r25
    8876:	81 91       	ld	r24, Z+
    8878:	8d 93       	st	X+, r24
    887a:	e6 17       	cp	r30, r22
    887c:	f7 07       	cpc	r31, r23
    887e:	d9 f7       	brne	.-10     	; 0x8876 <twiTransmit+0x68>
    8880:	88 ef       	ldi	r24, 0xF8	; 248
    8882:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    8886:	85 ea       	ldi	r24, 0xA5	; 165
    8888:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    888c:	84 e0       	ldi	r24, 0x04	; 4
    888e:	05 c0       	rjmp	.+10     	; 0x889a <twiTransmit+0x8c>
    8890:	86 e0       	ldi	r24, 0x06	; 6
    8892:	03 c0       	rjmp	.+6      	; 0x889a <twiTransmit+0x8c>
    8894:	87 e0       	ldi	r24, 0x07	; 7
    8896:	01 c0       	rjmp	.+2      	; 0x889a <twiTransmit+0x8c>
    8898:	82 e0       	ldi	r24, 0x02	; 2
    889a:	df 91       	pop	r29
    889c:	cf 91       	pop	r28
    889e:	1f 91       	pop	r17
    88a0:	0f 91       	pop	r16
    88a2:	ff 90       	pop	r15
    88a4:	08 95       	ret

000088a6 <twiReceive>:
    88a6:	1f 93       	push	r17
    88a8:	cf 93       	push	r28
    88aa:	df 93       	push	r29
    88ac:	00 97       	sbiw	r24, 0x00	; 0
    88ae:	29 f1       	breq	.+74     	; 0x88fa <twiReceive+0x54>
    88b0:	6b 30       	cpi	r22, 0x0B	; 11
    88b2:	28 f5       	brcc	.+74     	; 0x88fe <twiReceive+0x58>
    88b4:	16 2f       	mov	r17, r22
    88b6:	ec 01       	movw	r28, r24
    88b8:	a6 df       	rcall	.-180    	; 0x8806 <twiIsBusy>
    88ba:	81 11       	cpse	r24, r1
    88bc:	22 c0       	rjmp	.+68     	; 0x8902 <twiReceive+0x5c>
    88be:	80 91 fe 1c 	lds	r24, 0x1CFE	; 0x801cfe <_twiCurrentHandler>
    88c2:	90 91 ff 1c 	lds	r25, 0x1CFF	; 0x801cff <_twiCurrentHandler+0x1>
    88c6:	c8 17       	cp	r28, r24
    88c8:	d9 07       	cpc	r29, r25
    88ca:	41 f0       	breq	.+16     	; 0x88dc <twiReceive+0x36>
    88cc:	3e df       	rcall	.-388    	; 0x874a <_initTwiInterface>
    88ce:	89 81       	ldd	r24, Y+1	; 0x01
    88d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    88d4:	d0 93 ff 1c 	sts	0x1CFF, r29	; 0x801cff <_twiCurrentHandler+0x1>
    88d8:	c0 93 fe 1c 	sts	0x1CFE, r28	; 0x801cfe <_twiCurrentHandler>
    88dc:	10 93 00 1d 	sts	0x1D00, r17	; 0x801d00 <_twiMessageLen>
    88e0:	88 81       	ld	r24, Y
    88e2:	88 0f       	add	r24, r24
    88e4:	81 60       	ori	r24, 0x01	; 1
    88e6:	80 93 01 1d 	sts	0x1D01, r24	; 0x801d01 <_twiMessageBuffer>
    88ea:	88 ef       	ldi	r24, 0xF8	; 248
    88ec:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    88f0:	85 ea       	ldi	r24, 0xA5	; 165
    88f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    88f6:	85 e0       	ldi	r24, 0x05	; 5
    88f8:	05 c0       	rjmp	.+10     	; 0x8904 <twiReceive+0x5e>
    88fa:	86 e0       	ldi	r24, 0x06	; 6
    88fc:	03 c0       	rjmp	.+6      	; 0x8904 <twiReceive+0x5e>
    88fe:	87 e0       	ldi	r24, 0x07	; 7
    8900:	01 c0       	rjmp	.+2      	; 0x8904 <twiReceive+0x5e>
    8902:	82 e0       	ldi	r24, 0x02	; 2
    8904:	df 91       	pop	r29
    8906:	cf 91       	pop	r28
    8908:	1f 91       	pop	r17
    890a:	08 95       	ret

0000890c <__vector_39>:
    890c:	1f 92       	push	r1
    890e:	0f 92       	push	r0
    8910:	0f b6       	in	r0, 0x3f	; 63
    8912:	0f 92       	push	r0
    8914:	11 24       	eor	r1, r1
    8916:	0b b6       	in	r0, 0x3b	; 59
    8918:	0f 92       	push	r0
    891a:	2f 93       	push	r18
    891c:	3f 93       	push	r19
    891e:	4f 93       	push	r20
    8920:	5f 93       	push	r21
    8922:	6f 93       	push	r22
    8924:	7f 93       	push	r23
    8926:	8f 93       	push	r24
    8928:	9f 93       	push	r25
    892a:	af 93       	push	r26
    892c:	bf 93       	push	r27
    892e:	ef 93       	push	r30
    8930:	ff 93       	push	r31
    8932:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    8936:	8e 2f       	mov	r24, r30
    8938:	90 e0       	ldi	r25, 0x00	; 0
    893a:	fc 01       	movw	r30, r24
    893c:	38 97       	sbiw	r30, 0x08	; 8
    893e:	e1 35       	cpi	r30, 0x51	; 81
    8940:	f1 05       	cpc	r31, r1
    8942:	08 f0       	brcs	.+2      	; 0x8946 <__vector_39+0x3a>
    8944:	75 c0       	rjmp	.+234    	; 0x8a30 <__vector_39+0x124>
    8946:	88 27       	eor	r24, r24
    8948:	e4 58       	subi	r30, 0x84	; 132
    894a:	ff 4f       	sbci	r31, 0xFF	; 255
    894c:	8f 4f       	sbci	r24, 0xFF	; 255
    894e:	96 c5       	rjmp	.+2860   	; 0x947c <__tablejump2__>
    8950:	10 92 fd 1c 	sts	0x1CFD, r1	; 0x801cfd <_index.1885>
    8954:	e0 91 fd 1c 	lds	r30, 0x1CFD	; 0x801cfd <_index.1885>
    8958:	80 91 00 1d 	lds	r24, 0x1D00	; 0x801d00 <_twiMessageLen>
    895c:	e8 17       	cp	r30, r24
    895e:	70 f4       	brcc	.+28     	; 0x897c <__vector_39+0x70>
    8960:	81 e0       	ldi	r24, 0x01	; 1
    8962:	8e 0f       	add	r24, r30
    8964:	80 93 fd 1c 	sts	0x1CFD, r24	; 0x801cfd <_index.1885>
    8968:	f0 e0       	ldi	r31, 0x00	; 0
    896a:	ef 5f       	subi	r30, 0xFF	; 255
    896c:	f2 4e       	sbci	r31, 0xE2	; 226
    896e:	80 81       	ld	r24, Z
    8970:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    8974:	85 e8       	ldi	r24, 0x85	; 133
    8976:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    897a:	72 c0       	rjmp	.+228    	; 0x8a60 <__vector_39+0x154>
    897c:	84 e9       	ldi	r24, 0x94	; 148
    897e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    8982:	80 91 fe 1c 	lds	r24, 0x1CFE	; 0x801cfe <_twiCurrentHandler>
    8986:	90 91 ff 1c 	lds	r25, 0x1CFF	; 0x801cff <_twiCurrentHandler+0x1>
    898a:	dc 01       	movw	r26, r24
    898c:	12 96       	adiw	r26, 0x02	; 2
    898e:	ed 91       	ld	r30, X+
    8990:	fc 91       	ld	r31, X
    8992:	13 97       	sbiw	r26, 0x03	; 3
    8994:	30 97       	sbiw	r30, 0x00	; 0
    8996:	09 f4       	brne	.+2      	; 0x899a <__vector_39+0x8e>
    8998:	63 c0       	rjmp	.+198    	; 0x8a60 <__vector_39+0x154>
    899a:	20 e0       	ldi	r18, 0x00	; 0
    899c:	40 e0       	ldi	r20, 0x00	; 0
    899e:	50 e0       	ldi	r21, 0x00	; 0
    89a0:	64 e0       	ldi	r22, 0x04	; 4
    89a2:	19 95       	eicall
    89a4:	5d c0       	rjmp	.+186    	; 0x8a60 <__vector_39+0x154>
    89a6:	e0 91 fd 1c 	lds	r30, 0x1CFD	; 0x801cfd <_index.1885>
    89aa:	81 e0       	ldi	r24, 0x01	; 1
    89ac:	8e 0f       	add	r24, r30
    89ae:	80 93 fd 1c 	sts	0x1CFD, r24	; 0x801cfd <_index.1885>
    89b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    89b6:	f0 e0       	ldi	r31, 0x00	; 0
    89b8:	ef 5f       	subi	r30, 0xFF	; 255
    89ba:	f2 4e       	sbci	r31, 0xE2	; 226
    89bc:	80 83       	st	Z, r24
    89be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    89c2:	80 34       	cpi	r24, 0x40	; 64
    89c4:	11 f4       	brne	.+4      	; 0x89ca <__vector_39+0xbe>
    89c6:	10 92 fd 1c 	sts	0x1CFD, r1	; 0x801cfd <_index.1885>
    89ca:	20 91 fd 1c 	lds	r18, 0x1CFD	; 0x801cfd <_index.1885>
    89ce:	30 e0       	ldi	r19, 0x00	; 0
    89d0:	80 91 00 1d 	lds	r24, 0x1D00	; 0x801d00 <_twiMessageLen>
    89d4:	90 e0       	ldi	r25, 0x00	; 0
    89d6:	01 97       	sbiw	r24, 0x01	; 1
    89d8:	28 17       	cp	r18, r24
    89da:	39 07       	cpc	r19, r25
    89dc:	24 f4       	brge	.+8      	; 0x89e6 <__vector_39+0xda>
    89de:	85 ec       	ldi	r24, 0xC5	; 197
    89e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    89e4:	3d c0       	rjmp	.+122    	; 0x8a60 <__vector_39+0x154>
    89e6:	85 e8       	ldi	r24, 0x85	; 133
    89e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    89ec:	39 c0       	rjmp	.+114    	; 0x8a60 <__vector_39+0x154>
    89ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    89f2:	e0 91 fd 1c 	lds	r30, 0x1CFD	; 0x801cfd <_index.1885>
    89f6:	f0 e0       	ldi	r31, 0x00	; 0
    89f8:	ef 5f       	subi	r30, 0xFF	; 255
    89fa:	f2 4e       	sbci	r31, 0xE2	; 226
    89fc:	80 83       	st	Z, r24
    89fe:	84 e9       	ldi	r24, 0x94	; 148
    8a00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    8a04:	80 91 fe 1c 	lds	r24, 0x1CFE	; 0x801cfe <_twiCurrentHandler>
    8a08:	90 91 ff 1c 	lds	r25, 0x1CFF	; 0x801cff <_twiCurrentHandler+0x1>
    8a0c:	dc 01       	movw	r26, r24
    8a0e:	12 96       	adiw	r26, 0x02	; 2
    8a10:	ed 91       	ld	r30, X+
    8a12:	fc 91       	ld	r31, X
    8a14:	13 97       	sbiw	r26, 0x03	; 3
    8a16:	30 97       	sbiw	r30, 0x00	; 0
    8a18:	19 f1       	breq	.+70     	; 0x8a60 <__vector_39+0x154>
    8a1a:	20 91 00 1d 	lds	r18, 0x1D00	; 0x801d00 <_twiMessageLen>
    8a1e:	41 e0       	ldi	r20, 0x01	; 1
    8a20:	5d e1       	ldi	r21, 0x1D	; 29
    8a22:	65 e0       	ldi	r22, 0x05	; 5
    8a24:	19 95       	eicall
    8a26:	1c c0       	rjmp	.+56     	; 0x8a60 <__vector_39+0x154>
    8a28:	85 ea       	ldi	r24, 0xA5	; 165
    8a2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    8a2e:	18 c0       	rjmp	.+48     	; 0x8a60 <__vector_39+0x154>
    8a30:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    8a34:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_twiCurrentState>
    8a38:	84 e0       	ldi	r24, 0x04	; 4
    8a3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    8a3e:	80 91 fe 1c 	lds	r24, 0x1CFE	; 0x801cfe <_twiCurrentHandler>
    8a42:	90 91 ff 1c 	lds	r25, 0x1CFF	; 0x801cff <_twiCurrentHandler+0x1>
    8a46:	dc 01       	movw	r26, r24
    8a48:	12 96       	adiw	r26, 0x02	; 2
    8a4a:	ed 91       	ld	r30, X+
    8a4c:	fc 91       	ld	r31, X
    8a4e:	13 97       	sbiw	r26, 0x03	; 3
    8a50:	30 97       	sbiw	r30, 0x00	; 0
    8a52:	31 f0       	breq	.+12     	; 0x8a60 <__vector_39+0x154>
    8a54:	20 e0       	ldi	r18, 0x00	; 0
    8a56:	40 e0       	ldi	r20, 0x00	; 0
    8a58:	50 e0       	ldi	r21, 0x00	; 0
    8a5a:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <_twiCurrentState>
    8a5e:	19 95       	eicall
    8a60:	ff 91       	pop	r31
    8a62:	ef 91       	pop	r30
    8a64:	bf 91       	pop	r27
    8a66:	af 91       	pop	r26
    8a68:	9f 91       	pop	r25
    8a6a:	8f 91       	pop	r24
    8a6c:	7f 91       	pop	r23
    8a6e:	6f 91       	pop	r22
    8a70:	5f 91       	pop	r21
    8a72:	4f 91       	pop	r20
    8a74:	3f 91       	pop	r19
    8a76:	2f 91       	pop	r18
    8a78:	0f 90       	pop	r0
    8a7a:	0b be       	out	0x3b, r0	; 59
    8a7c:	0f 90       	pop	r0
    8a7e:	0f be       	out	0x3f, r0	; 63
    8a80:	0f 90       	pop	r0
    8a82:	1f 90       	pop	r1
    8a84:	18 95       	reti

00008a86 <fifo_init>:
    8a86:	fc 01       	movw	r30, r24
    8a88:	41 11       	cpse	r20, r1
    8a8a:	01 c0       	rjmp	.+2      	; 0x8a8e <fifo_init+0x8>
    8a8c:	43 d6       	rcall	.+3206   	; 0x9714 <abort>
    8a8e:	84 2f       	mov	r24, r20
    8a90:	90 e0       	ldi	r25, 0x00	; 0
    8a92:	9c 01       	movw	r18, r24
    8a94:	21 50       	subi	r18, 0x01	; 1
    8a96:	31 09       	sbc	r19, r1
    8a98:	82 23       	and	r24, r18
    8a9a:	93 23       	and	r25, r19
    8a9c:	89 2b       	or	r24, r25
    8a9e:	09 f0       	breq	.+2      	; 0x8aa2 <fifo_init+0x1c>
    8aa0:	39 d6       	rcall	.+3186   	; 0x9714 <abort>
    8aa2:	41 38       	cpi	r20, 0x81	; 129
    8aa4:	08 f0       	brcs	.+2      	; 0x8aa8 <fifo_init+0x22>
    8aa6:	36 d6       	rcall	.+3180   	; 0x9714 <abort>
    8aa8:	12 82       	std	Z+2, r1	; 0x02
    8aaa:	13 82       	std	Z+3, r1	; 0x03
    8aac:	44 83       	std	Z+4, r20	; 0x04
    8aae:	44 0f       	add	r20, r20
    8ab0:	41 50       	subi	r20, 0x01	; 1
    8ab2:	45 83       	std	Z+5, r20	; 0x05
    8ab4:	71 83       	std	Z+1, r23	; 0x01
    8ab6:	60 83       	st	Z, r22
    8ab8:	80 e0       	ldi	r24, 0x00	; 0
    8aba:	90 e0       	ldi	r25, 0x00	; 0
    8abc:	08 95       	ret

00008abe <vfprintf>:
    8abe:	2f 92       	push	r2
    8ac0:	3f 92       	push	r3
    8ac2:	4f 92       	push	r4
    8ac4:	5f 92       	push	r5
    8ac6:	6f 92       	push	r6
    8ac8:	7f 92       	push	r7
    8aca:	8f 92       	push	r8
    8acc:	9f 92       	push	r9
    8ace:	af 92       	push	r10
    8ad0:	bf 92       	push	r11
    8ad2:	cf 92       	push	r12
    8ad4:	df 92       	push	r13
    8ad6:	ef 92       	push	r14
    8ad8:	ff 92       	push	r15
    8ada:	0f 93       	push	r16
    8adc:	1f 93       	push	r17
    8ade:	cf 93       	push	r28
    8ae0:	df 93       	push	r29
    8ae2:	cd b7       	in	r28, 0x3d	; 61
    8ae4:	de b7       	in	r29, 0x3e	; 62
    8ae6:	60 97       	sbiw	r28, 0x10	; 16
    8ae8:	0f b6       	in	r0, 0x3f	; 63
    8aea:	f8 94       	cli
    8aec:	de bf       	out	0x3e, r29	; 62
    8aee:	0f be       	out	0x3f, r0	; 63
    8af0:	cd bf       	out	0x3d, r28	; 61
    8af2:	7c 01       	movw	r14, r24
    8af4:	1b 01       	movw	r2, r22
    8af6:	6a 01       	movw	r12, r20
    8af8:	fc 01       	movw	r30, r24
    8afa:	17 82       	std	Z+7, r1	; 0x07
    8afc:	16 82       	std	Z+6, r1	; 0x06
    8afe:	83 81       	ldd	r24, Z+3	; 0x03
    8b00:	81 ff       	sbrs	r24, 1
    8b02:	2a c3       	rjmp	.+1620   	; 0x9158 <vfprintf+0x69a>
    8b04:	9e 01       	movw	r18, r28
    8b06:	2f 5f       	subi	r18, 0xFF	; 255
    8b08:	3f 4f       	sbci	r19, 0xFF	; 255
    8b0a:	39 01       	movw	r6, r18
    8b0c:	f7 01       	movw	r30, r14
    8b0e:	93 81       	ldd	r25, Z+3	; 0x03
    8b10:	f1 01       	movw	r30, r2
    8b12:	93 fd       	sbrc	r25, 3
    8b14:	85 91       	lpm	r24, Z+
    8b16:	93 ff       	sbrs	r25, 3
    8b18:	81 91       	ld	r24, Z+
    8b1a:	1f 01       	movw	r2, r30
    8b1c:	88 23       	and	r24, r24
    8b1e:	09 f4       	brne	.+2      	; 0x8b22 <vfprintf+0x64>
    8b20:	17 c3       	rjmp	.+1582   	; 0x9150 <vfprintf+0x692>
    8b22:	85 32       	cpi	r24, 0x25	; 37
    8b24:	39 f4       	brne	.+14     	; 0x8b34 <vfprintf+0x76>
    8b26:	93 fd       	sbrc	r25, 3
    8b28:	85 91       	lpm	r24, Z+
    8b2a:	93 ff       	sbrs	r25, 3
    8b2c:	81 91       	ld	r24, Z+
    8b2e:	1f 01       	movw	r2, r30
    8b30:	85 32       	cpi	r24, 0x25	; 37
    8b32:	31 f4       	brne	.+12     	; 0x8b40 <vfprintf+0x82>
    8b34:	b7 01       	movw	r22, r14
    8b36:	90 e0       	ldi	r25, 0x00	; 0
    8b38:	3e d7       	rcall	.+3708   	; 0x99b6 <fputc>
    8b3a:	56 01       	movw	r10, r12
    8b3c:	65 01       	movw	r12, r10
    8b3e:	e6 cf       	rjmp	.-52     	; 0x8b0c <vfprintf+0x4e>
    8b40:	10 e0       	ldi	r17, 0x00	; 0
    8b42:	51 2c       	mov	r5, r1
    8b44:	91 2c       	mov	r9, r1
    8b46:	ff e1       	ldi	r31, 0x1F	; 31
    8b48:	f9 15       	cp	r31, r9
    8b4a:	d8 f0       	brcs	.+54     	; 0x8b82 <vfprintf+0xc4>
    8b4c:	8b 32       	cpi	r24, 0x2B	; 43
    8b4e:	79 f0       	breq	.+30     	; 0x8b6e <vfprintf+0xb0>
    8b50:	38 f4       	brcc	.+14     	; 0x8b60 <vfprintf+0xa2>
    8b52:	80 32       	cpi	r24, 0x20	; 32
    8b54:	79 f0       	breq	.+30     	; 0x8b74 <vfprintf+0xb6>
    8b56:	83 32       	cpi	r24, 0x23	; 35
    8b58:	a1 f4       	brne	.+40     	; 0x8b82 <vfprintf+0xc4>
    8b5a:	f9 2d       	mov	r31, r9
    8b5c:	f0 61       	ori	r31, 0x10	; 16
    8b5e:	2e c0       	rjmp	.+92     	; 0x8bbc <vfprintf+0xfe>
    8b60:	8d 32       	cpi	r24, 0x2D	; 45
    8b62:	61 f0       	breq	.+24     	; 0x8b7c <vfprintf+0xbe>
    8b64:	80 33       	cpi	r24, 0x30	; 48
    8b66:	69 f4       	brne	.+26     	; 0x8b82 <vfprintf+0xc4>
    8b68:	29 2d       	mov	r18, r9
    8b6a:	21 60       	ori	r18, 0x01	; 1
    8b6c:	2d c0       	rjmp	.+90     	; 0x8bc8 <vfprintf+0x10a>
    8b6e:	39 2d       	mov	r19, r9
    8b70:	32 60       	ori	r19, 0x02	; 2
    8b72:	93 2e       	mov	r9, r19
    8b74:	89 2d       	mov	r24, r9
    8b76:	84 60       	ori	r24, 0x04	; 4
    8b78:	98 2e       	mov	r9, r24
    8b7a:	2a c0       	rjmp	.+84     	; 0x8bd0 <vfprintf+0x112>
    8b7c:	e9 2d       	mov	r30, r9
    8b7e:	e8 60       	ori	r30, 0x08	; 8
    8b80:	15 c0       	rjmp	.+42     	; 0x8bac <vfprintf+0xee>
    8b82:	97 fc       	sbrc	r9, 7
    8b84:	2d c0       	rjmp	.+90     	; 0x8be0 <vfprintf+0x122>
    8b86:	20 ed       	ldi	r18, 0xD0	; 208
    8b88:	28 0f       	add	r18, r24
    8b8a:	2a 30       	cpi	r18, 0x0A	; 10
    8b8c:	88 f4       	brcc	.+34     	; 0x8bb0 <vfprintf+0xf2>
    8b8e:	96 fe       	sbrs	r9, 6
    8b90:	06 c0       	rjmp	.+12     	; 0x8b9e <vfprintf+0xe0>
    8b92:	3a e0       	ldi	r19, 0x0A	; 10
    8b94:	13 9f       	mul	r17, r19
    8b96:	20 0d       	add	r18, r0
    8b98:	11 24       	eor	r1, r1
    8b9a:	12 2f       	mov	r17, r18
    8b9c:	19 c0       	rjmp	.+50     	; 0x8bd0 <vfprintf+0x112>
    8b9e:	8a e0       	ldi	r24, 0x0A	; 10
    8ba0:	58 9e       	mul	r5, r24
    8ba2:	20 0d       	add	r18, r0
    8ba4:	11 24       	eor	r1, r1
    8ba6:	52 2e       	mov	r5, r18
    8ba8:	e9 2d       	mov	r30, r9
    8baa:	e0 62       	ori	r30, 0x20	; 32
    8bac:	9e 2e       	mov	r9, r30
    8bae:	10 c0       	rjmp	.+32     	; 0x8bd0 <vfprintf+0x112>
    8bb0:	8e 32       	cpi	r24, 0x2E	; 46
    8bb2:	31 f4       	brne	.+12     	; 0x8bc0 <vfprintf+0x102>
    8bb4:	96 fc       	sbrc	r9, 6
    8bb6:	cc c2       	rjmp	.+1432   	; 0x9150 <vfprintf+0x692>
    8bb8:	f9 2d       	mov	r31, r9
    8bba:	f0 64       	ori	r31, 0x40	; 64
    8bbc:	9f 2e       	mov	r9, r31
    8bbe:	08 c0       	rjmp	.+16     	; 0x8bd0 <vfprintf+0x112>
    8bc0:	8c 36       	cpi	r24, 0x6C	; 108
    8bc2:	21 f4       	brne	.+8      	; 0x8bcc <vfprintf+0x10e>
    8bc4:	29 2d       	mov	r18, r9
    8bc6:	20 68       	ori	r18, 0x80	; 128
    8bc8:	92 2e       	mov	r9, r18
    8bca:	02 c0       	rjmp	.+4      	; 0x8bd0 <vfprintf+0x112>
    8bcc:	88 36       	cpi	r24, 0x68	; 104
    8bce:	41 f4       	brne	.+16     	; 0x8be0 <vfprintf+0x122>
    8bd0:	f1 01       	movw	r30, r2
    8bd2:	93 fd       	sbrc	r25, 3
    8bd4:	85 91       	lpm	r24, Z+
    8bd6:	93 ff       	sbrs	r25, 3
    8bd8:	81 91       	ld	r24, Z+
    8bda:	1f 01       	movw	r2, r30
    8bdc:	81 11       	cpse	r24, r1
    8bde:	b3 cf       	rjmp	.-154    	; 0x8b46 <vfprintf+0x88>
    8be0:	9b eb       	ldi	r25, 0xBB	; 187
    8be2:	98 0f       	add	r25, r24
    8be4:	93 30       	cpi	r25, 0x03	; 3
    8be6:	20 f4       	brcc	.+8      	; 0x8bf0 <vfprintf+0x132>
    8be8:	99 2d       	mov	r25, r9
    8bea:	90 61       	ori	r25, 0x10	; 16
    8bec:	80 5e       	subi	r24, 0xE0	; 224
    8bee:	07 c0       	rjmp	.+14     	; 0x8bfe <vfprintf+0x140>
    8bf0:	9b e9       	ldi	r25, 0x9B	; 155
    8bf2:	98 0f       	add	r25, r24
    8bf4:	93 30       	cpi	r25, 0x03	; 3
    8bf6:	08 f0       	brcs	.+2      	; 0x8bfa <vfprintf+0x13c>
    8bf8:	59 c1       	rjmp	.+690    	; 0x8eac <vfprintf+0x3ee>
    8bfa:	99 2d       	mov	r25, r9
    8bfc:	9f 7e       	andi	r25, 0xEF	; 239
    8bfe:	96 ff       	sbrs	r25, 6
    8c00:	16 e0       	ldi	r17, 0x06	; 6
    8c02:	9f 73       	andi	r25, 0x3F	; 63
    8c04:	99 2e       	mov	r9, r25
    8c06:	85 36       	cpi	r24, 0x65	; 101
    8c08:	19 f4       	brne	.+6      	; 0x8c10 <vfprintf+0x152>
    8c0a:	90 64       	ori	r25, 0x40	; 64
    8c0c:	99 2e       	mov	r9, r25
    8c0e:	08 c0       	rjmp	.+16     	; 0x8c20 <vfprintf+0x162>
    8c10:	86 36       	cpi	r24, 0x66	; 102
    8c12:	21 f4       	brne	.+8      	; 0x8c1c <vfprintf+0x15e>
    8c14:	39 2f       	mov	r19, r25
    8c16:	30 68       	ori	r19, 0x80	; 128
    8c18:	93 2e       	mov	r9, r19
    8c1a:	02 c0       	rjmp	.+4      	; 0x8c20 <vfprintf+0x162>
    8c1c:	11 11       	cpse	r17, r1
    8c1e:	11 50       	subi	r17, 0x01	; 1
    8c20:	97 fe       	sbrs	r9, 7
    8c22:	07 c0       	rjmp	.+14     	; 0x8c32 <vfprintf+0x174>
    8c24:	1c 33       	cpi	r17, 0x3C	; 60
    8c26:	50 f4       	brcc	.+20     	; 0x8c3c <vfprintf+0x17e>
    8c28:	44 24       	eor	r4, r4
    8c2a:	43 94       	inc	r4
    8c2c:	41 0e       	add	r4, r17
    8c2e:	27 e0       	ldi	r18, 0x07	; 7
    8c30:	0b c0       	rjmp	.+22     	; 0x8c48 <vfprintf+0x18a>
    8c32:	18 30       	cpi	r17, 0x08	; 8
    8c34:	38 f0       	brcs	.+14     	; 0x8c44 <vfprintf+0x186>
    8c36:	27 e0       	ldi	r18, 0x07	; 7
    8c38:	17 e0       	ldi	r17, 0x07	; 7
    8c3a:	05 c0       	rjmp	.+10     	; 0x8c46 <vfprintf+0x188>
    8c3c:	27 e0       	ldi	r18, 0x07	; 7
    8c3e:	9c e3       	ldi	r25, 0x3C	; 60
    8c40:	49 2e       	mov	r4, r25
    8c42:	02 c0       	rjmp	.+4      	; 0x8c48 <vfprintf+0x18a>
    8c44:	21 2f       	mov	r18, r17
    8c46:	41 2c       	mov	r4, r1
    8c48:	56 01       	movw	r10, r12
    8c4a:	84 e0       	ldi	r24, 0x04	; 4
    8c4c:	a8 0e       	add	r10, r24
    8c4e:	b1 1c       	adc	r11, r1
    8c50:	f6 01       	movw	r30, r12
    8c52:	60 81       	ld	r22, Z
    8c54:	71 81       	ldd	r23, Z+1	; 0x01
    8c56:	82 81       	ldd	r24, Z+2	; 0x02
    8c58:	93 81       	ldd	r25, Z+3	; 0x03
    8c5a:	04 2d       	mov	r16, r4
    8c5c:	a3 01       	movw	r20, r6
    8c5e:	5e d5       	rcall	.+2748   	; 0x971c <__ftoa_engine>
    8c60:	6c 01       	movw	r12, r24
    8c62:	f9 81       	ldd	r31, Y+1	; 0x01
    8c64:	fc 87       	std	Y+12, r31	; 0x0c
    8c66:	f0 ff       	sbrs	r31, 0
    8c68:	02 c0       	rjmp	.+4      	; 0x8c6e <vfprintf+0x1b0>
    8c6a:	f3 ff       	sbrs	r31, 3
    8c6c:	06 c0       	rjmp	.+12     	; 0x8c7a <vfprintf+0x1bc>
    8c6e:	91 fc       	sbrc	r9, 1
    8c70:	06 c0       	rjmp	.+12     	; 0x8c7e <vfprintf+0x1c0>
    8c72:	92 fe       	sbrs	r9, 2
    8c74:	06 c0       	rjmp	.+12     	; 0x8c82 <vfprintf+0x1c4>
    8c76:	00 e2       	ldi	r16, 0x20	; 32
    8c78:	05 c0       	rjmp	.+10     	; 0x8c84 <vfprintf+0x1c6>
    8c7a:	0d e2       	ldi	r16, 0x2D	; 45
    8c7c:	03 c0       	rjmp	.+6      	; 0x8c84 <vfprintf+0x1c6>
    8c7e:	0b e2       	ldi	r16, 0x2B	; 43
    8c80:	01 c0       	rjmp	.+2      	; 0x8c84 <vfprintf+0x1c6>
    8c82:	00 e0       	ldi	r16, 0x00	; 0
    8c84:	8c 85       	ldd	r24, Y+12	; 0x0c
    8c86:	8c 70       	andi	r24, 0x0C	; 12
    8c88:	19 f0       	breq	.+6      	; 0x8c90 <vfprintf+0x1d2>
    8c8a:	01 11       	cpse	r16, r1
    8c8c:	43 c2       	rjmp	.+1158   	; 0x9114 <vfprintf+0x656>
    8c8e:	80 c2       	rjmp	.+1280   	; 0x9190 <vfprintf+0x6d2>
    8c90:	97 fe       	sbrs	r9, 7
    8c92:	10 c0       	rjmp	.+32     	; 0x8cb4 <vfprintf+0x1f6>
    8c94:	4c 0c       	add	r4, r12
    8c96:	fc 85       	ldd	r31, Y+12	; 0x0c
    8c98:	f4 ff       	sbrs	r31, 4
    8c9a:	04 c0       	rjmp	.+8      	; 0x8ca4 <vfprintf+0x1e6>
    8c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    8c9e:	81 33       	cpi	r24, 0x31	; 49
    8ca0:	09 f4       	brne	.+2      	; 0x8ca4 <vfprintf+0x1e6>
    8ca2:	4a 94       	dec	r4
    8ca4:	14 14       	cp	r1, r4
    8ca6:	74 f5       	brge	.+92     	; 0x8d04 <vfprintf+0x246>
    8ca8:	28 e0       	ldi	r18, 0x08	; 8
    8caa:	24 15       	cp	r18, r4
    8cac:	78 f5       	brcc	.+94     	; 0x8d0c <vfprintf+0x24e>
    8cae:	88 e0       	ldi	r24, 0x08	; 8
    8cb0:	48 2e       	mov	r4, r24
    8cb2:	2c c0       	rjmp	.+88     	; 0x8d0c <vfprintf+0x24e>
    8cb4:	96 fc       	sbrc	r9, 6
    8cb6:	2a c0       	rjmp	.+84     	; 0x8d0c <vfprintf+0x24e>
    8cb8:	81 2f       	mov	r24, r17
    8cba:	90 e0       	ldi	r25, 0x00	; 0
    8cbc:	8c 15       	cp	r24, r12
    8cbe:	9d 05       	cpc	r25, r13
    8cc0:	9c f0       	brlt	.+38     	; 0x8ce8 <vfprintf+0x22a>
    8cc2:	3c ef       	ldi	r19, 0xFC	; 252
    8cc4:	c3 16       	cp	r12, r19
    8cc6:	3f ef       	ldi	r19, 0xFF	; 255
    8cc8:	d3 06       	cpc	r13, r19
    8cca:	74 f0       	brlt	.+28     	; 0x8ce8 <vfprintf+0x22a>
    8ccc:	89 2d       	mov	r24, r9
    8cce:	80 68       	ori	r24, 0x80	; 128
    8cd0:	98 2e       	mov	r9, r24
    8cd2:	0a c0       	rjmp	.+20     	; 0x8ce8 <vfprintf+0x22a>
    8cd4:	e2 e0       	ldi	r30, 0x02	; 2
    8cd6:	f0 e0       	ldi	r31, 0x00	; 0
    8cd8:	ec 0f       	add	r30, r28
    8cda:	fd 1f       	adc	r31, r29
    8cdc:	e1 0f       	add	r30, r17
    8cde:	f1 1d       	adc	r31, r1
    8ce0:	80 81       	ld	r24, Z
    8ce2:	80 33       	cpi	r24, 0x30	; 48
    8ce4:	19 f4       	brne	.+6      	; 0x8cec <vfprintf+0x22e>
    8ce6:	11 50       	subi	r17, 0x01	; 1
    8ce8:	11 11       	cpse	r17, r1
    8cea:	f4 cf       	rjmp	.-24     	; 0x8cd4 <vfprintf+0x216>
    8cec:	97 fe       	sbrs	r9, 7
    8cee:	0e c0       	rjmp	.+28     	; 0x8d0c <vfprintf+0x24e>
    8cf0:	44 24       	eor	r4, r4
    8cf2:	43 94       	inc	r4
    8cf4:	41 0e       	add	r4, r17
    8cf6:	81 2f       	mov	r24, r17
    8cf8:	90 e0       	ldi	r25, 0x00	; 0
    8cfa:	c8 16       	cp	r12, r24
    8cfc:	d9 06       	cpc	r13, r25
    8cfe:	2c f4       	brge	.+10     	; 0x8d0a <vfprintf+0x24c>
    8d00:	1c 19       	sub	r17, r12
    8d02:	04 c0       	rjmp	.+8      	; 0x8d0c <vfprintf+0x24e>
    8d04:	44 24       	eor	r4, r4
    8d06:	43 94       	inc	r4
    8d08:	01 c0       	rjmp	.+2      	; 0x8d0c <vfprintf+0x24e>
    8d0a:	10 e0       	ldi	r17, 0x00	; 0
    8d0c:	97 fe       	sbrs	r9, 7
    8d0e:	06 c0       	rjmp	.+12     	; 0x8d1c <vfprintf+0x25e>
    8d10:	1c 14       	cp	r1, r12
    8d12:	1d 04       	cpc	r1, r13
    8d14:	34 f4       	brge	.+12     	; 0x8d22 <vfprintf+0x264>
    8d16:	c6 01       	movw	r24, r12
    8d18:	01 96       	adiw	r24, 0x01	; 1
    8d1a:	05 c0       	rjmp	.+10     	; 0x8d26 <vfprintf+0x268>
    8d1c:	85 e0       	ldi	r24, 0x05	; 5
    8d1e:	90 e0       	ldi	r25, 0x00	; 0
    8d20:	02 c0       	rjmp	.+4      	; 0x8d26 <vfprintf+0x268>
    8d22:	81 e0       	ldi	r24, 0x01	; 1
    8d24:	90 e0       	ldi	r25, 0x00	; 0
    8d26:	01 11       	cpse	r16, r1
    8d28:	01 96       	adiw	r24, 0x01	; 1
    8d2a:	11 23       	and	r17, r17
    8d2c:	31 f0       	breq	.+12     	; 0x8d3a <vfprintf+0x27c>
    8d2e:	21 2f       	mov	r18, r17
    8d30:	30 e0       	ldi	r19, 0x00	; 0
    8d32:	2f 5f       	subi	r18, 0xFF	; 255
    8d34:	3f 4f       	sbci	r19, 0xFF	; 255
    8d36:	82 0f       	add	r24, r18
    8d38:	93 1f       	adc	r25, r19
    8d3a:	25 2d       	mov	r18, r5
    8d3c:	30 e0       	ldi	r19, 0x00	; 0
    8d3e:	82 17       	cp	r24, r18
    8d40:	93 07       	cpc	r25, r19
    8d42:	14 f4       	brge	.+4      	; 0x8d48 <vfprintf+0x28a>
    8d44:	58 1a       	sub	r5, r24
    8d46:	01 c0       	rjmp	.+2      	; 0x8d4a <vfprintf+0x28c>
    8d48:	51 2c       	mov	r5, r1
    8d4a:	89 2d       	mov	r24, r9
    8d4c:	89 70       	andi	r24, 0x09	; 9
    8d4e:	41 f4       	brne	.+16     	; 0x8d60 <vfprintf+0x2a2>
    8d50:	55 20       	and	r5, r5
    8d52:	31 f0       	breq	.+12     	; 0x8d60 <vfprintf+0x2a2>
    8d54:	b7 01       	movw	r22, r14
    8d56:	80 e2       	ldi	r24, 0x20	; 32
    8d58:	90 e0       	ldi	r25, 0x00	; 0
    8d5a:	2d d6       	rcall	.+3162   	; 0x99b6 <fputc>
    8d5c:	5a 94       	dec	r5
    8d5e:	f8 cf       	rjmp	.-16     	; 0x8d50 <vfprintf+0x292>
    8d60:	00 23       	and	r16, r16
    8d62:	21 f0       	breq	.+8      	; 0x8d6c <vfprintf+0x2ae>
    8d64:	b7 01       	movw	r22, r14
    8d66:	80 2f       	mov	r24, r16
    8d68:	90 e0       	ldi	r25, 0x00	; 0
    8d6a:	25 d6       	rcall	.+3146   	; 0x99b6 <fputc>
    8d6c:	93 fc       	sbrc	r9, 3
    8d6e:	08 c0       	rjmp	.+16     	; 0x8d80 <vfprintf+0x2c2>
    8d70:	55 20       	and	r5, r5
    8d72:	31 f0       	breq	.+12     	; 0x8d80 <vfprintf+0x2c2>
    8d74:	b7 01       	movw	r22, r14
    8d76:	80 e3       	ldi	r24, 0x30	; 48
    8d78:	90 e0       	ldi	r25, 0x00	; 0
    8d7a:	1d d6       	rcall	.+3130   	; 0x99b6 <fputc>
    8d7c:	5a 94       	dec	r5
    8d7e:	f8 cf       	rjmp	.-16     	; 0x8d70 <vfprintf+0x2b2>
    8d80:	97 fe       	sbrs	r9, 7
    8d82:	4a c0       	rjmp	.+148    	; 0x8e18 <vfprintf+0x35a>
    8d84:	46 01       	movw	r8, r12
    8d86:	d7 fe       	sbrs	r13, 7
    8d88:	02 c0       	rjmp	.+4      	; 0x8d8e <vfprintf+0x2d0>
    8d8a:	81 2c       	mov	r8, r1
    8d8c:	91 2c       	mov	r9, r1
    8d8e:	c6 01       	movw	r24, r12
    8d90:	88 19       	sub	r24, r8
    8d92:	99 09       	sbc	r25, r9
    8d94:	f3 01       	movw	r30, r6
    8d96:	e8 0f       	add	r30, r24
    8d98:	f9 1f       	adc	r31, r25
    8d9a:	fe 87       	std	Y+14, r31	; 0x0e
    8d9c:	ed 87       	std	Y+13, r30	; 0x0d
    8d9e:	96 01       	movw	r18, r12
    8da0:	24 19       	sub	r18, r4
    8da2:	31 09       	sbc	r19, r1
    8da4:	38 8b       	std	Y+16, r19	; 0x10
    8da6:	2f 87       	std	Y+15, r18	; 0x0f
    8da8:	01 2f       	mov	r16, r17
    8daa:	10 e0       	ldi	r17, 0x00	; 0
    8dac:	11 95       	neg	r17
    8dae:	01 95       	neg	r16
    8db0:	11 09       	sbc	r17, r1
    8db2:	3f ef       	ldi	r19, 0xFF	; 255
    8db4:	83 16       	cp	r8, r19
    8db6:	93 06       	cpc	r9, r19
    8db8:	21 f4       	brne	.+8      	; 0x8dc2 <vfprintf+0x304>
    8dba:	b7 01       	movw	r22, r14
    8dbc:	8e e2       	ldi	r24, 0x2E	; 46
    8dbe:	90 e0       	ldi	r25, 0x00	; 0
    8dc0:	fa d5       	rcall	.+3060   	; 0x99b6 <fputc>
    8dc2:	c8 14       	cp	r12, r8
    8dc4:	d9 04       	cpc	r13, r9
    8dc6:	4c f0       	brlt	.+18     	; 0x8dda <vfprintf+0x31c>
    8dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    8dca:	98 89       	ldd	r25, Y+16	; 0x10
    8dcc:	88 15       	cp	r24, r8
    8dce:	99 05       	cpc	r25, r9
    8dd0:	24 f4       	brge	.+8      	; 0x8dda <vfprintf+0x31c>
    8dd2:	ed 85       	ldd	r30, Y+13	; 0x0d
    8dd4:	fe 85       	ldd	r31, Y+14	; 0x0e
    8dd6:	81 81       	ldd	r24, Z+1	; 0x01
    8dd8:	01 c0       	rjmp	.+2      	; 0x8ddc <vfprintf+0x31e>
    8dda:	80 e3       	ldi	r24, 0x30	; 48
    8ddc:	f1 e0       	ldi	r31, 0x01	; 1
    8dde:	8f 1a       	sub	r8, r31
    8de0:	91 08       	sbc	r9, r1
    8de2:	2d 85       	ldd	r18, Y+13	; 0x0d
    8de4:	3e 85       	ldd	r19, Y+14	; 0x0e
    8de6:	2f 5f       	subi	r18, 0xFF	; 255
    8de8:	3f 4f       	sbci	r19, 0xFF	; 255
    8dea:	3e 87       	std	Y+14, r19	; 0x0e
    8dec:	2d 87       	std	Y+13, r18	; 0x0d
    8dee:	80 16       	cp	r8, r16
    8df0:	91 06       	cpc	r9, r17
    8df2:	24 f0       	brlt	.+8      	; 0x8dfc <vfprintf+0x33e>
    8df4:	b7 01       	movw	r22, r14
    8df6:	90 e0       	ldi	r25, 0x00	; 0
    8df8:	de d5       	rcall	.+3004   	; 0x99b6 <fputc>
    8dfa:	db cf       	rjmp	.-74     	; 0x8db2 <vfprintf+0x2f4>
    8dfc:	c8 14       	cp	r12, r8
    8dfe:	d9 04       	cpc	r13, r9
    8e00:	41 f4       	brne	.+16     	; 0x8e12 <vfprintf+0x354>
    8e02:	9a 81       	ldd	r25, Y+2	; 0x02
    8e04:	96 33       	cpi	r25, 0x36	; 54
    8e06:	20 f4       	brcc	.+8      	; 0x8e10 <vfprintf+0x352>
    8e08:	95 33       	cpi	r25, 0x35	; 53
    8e0a:	19 f4       	brne	.+6      	; 0x8e12 <vfprintf+0x354>
    8e0c:	3c 85       	ldd	r19, Y+12	; 0x0c
    8e0e:	34 ff       	sbrs	r19, 4
    8e10:	81 e3       	ldi	r24, 0x31	; 49
    8e12:	b7 01       	movw	r22, r14
    8e14:	90 e0       	ldi	r25, 0x00	; 0
    8e16:	48 c0       	rjmp	.+144    	; 0x8ea8 <vfprintf+0x3ea>
    8e18:	8a 81       	ldd	r24, Y+2	; 0x02
    8e1a:	81 33       	cpi	r24, 0x31	; 49
    8e1c:	19 f0       	breq	.+6      	; 0x8e24 <vfprintf+0x366>
    8e1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8e20:	9f 7e       	andi	r25, 0xEF	; 239
    8e22:	9c 87       	std	Y+12, r25	; 0x0c
    8e24:	b7 01       	movw	r22, r14
    8e26:	90 e0       	ldi	r25, 0x00	; 0
    8e28:	c6 d5       	rcall	.+2956   	; 0x99b6 <fputc>
    8e2a:	11 11       	cpse	r17, r1
    8e2c:	05 c0       	rjmp	.+10     	; 0x8e38 <vfprintf+0x37a>
    8e2e:	94 fc       	sbrc	r9, 4
    8e30:	16 c0       	rjmp	.+44     	; 0x8e5e <vfprintf+0x3a0>
    8e32:	85 e6       	ldi	r24, 0x65	; 101
    8e34:	90 e0       	ldi	r25, 0x00	; 0
    8e36:	15 c0       	rjmp	.+42     	; 0x8e62 <vfprintf+0x3a4>
    8e38:	b7 01       	movw	r22, r14
    8e3a:	8e e2       	ldi	r24, 0x2E	; 46
    8e3c:	90 e0       	ldi	r25, 0x00	; 0
    8e3e:	bb d5       	rcall	.+2934   	; 0x99b6 <fputc>
    8e40:	1e 5f       	subi	r17, 0xFE	; 254
    8e42:	82 e0       	ldi	r24, 0x02	; 2
    8e44:	01 e0       	ldi	r16, 0x01	; 1
    8e46:	08 0f       	add	r16, r24
    8e48:	f3 01       	movw	r30, r6
    8e4a:	e8 0f       	add	r30, r24
    8e4c:	f1 1d       	adc	r31, r1
    8e4e:	80 81       	ld	r24, Z
    8e50:	b7 01       	movw	r22, r14
    8e52:	90 e0       	ldi	r25, 0x00	; 0
    8e54:	b0 d5       	rcall	.+2912   	; 0x99b6 <fputc>
    8e56:	80 2f       	mov	r24, r16
    8e58:	01 13       	cpse	r16, r17
    8e5a:	f4 cf       	rjmp	.-24     	; 0x8e44 <vfprintf+0x386>
    8e5c:	e8 cf       	rjmp	.-48     	; 0x8e2e <vfprintf+0x370>
    8e5e:	85 e4       	ldi	r24, 0x45	; 69
    8e60:	90 e0       	ldi	r25, 0x00	; 0
    8e62:	b7 01       	movw	r22, r14
    8e64:	a8 d5       	rcall	.+2896   	; 0x99b6 <fputc>
    8e66:	d7 fc       	sbrc	r13, 7
    8e68:	06 c0       	rjmp	.+12     	; 0x8e76 <vfprintf+0x3b8>
    8e6a:	c1 14       	cp	r12, r1
    8e6c:	d1 04       	cpc	r13, r1
    8e6e:	41 f4       	brne	.+16     	; 0x8e80 <vfprintf+0x3c2>
    8e70:	ec 85       	ldd	r30, Y+12	; 0x0c
    8e72:	e4 ff       	sbrs	r30, 4
    8e74:	05 c0       	rjmp	.+10     	; 0x8e80 <vfprintf+0x3c2>
    8e76:	d1 94       	neg	r13
    8e78:	c1 94       	neg	r12
    8e7a:	d1 08       	sbc	r13, r1
    8e7c:	8d e2       	ldi	r24, 0x2D	; 45
    8e7e:	01 c0       	rjmp	.+2      	; 0x8e82 <vfprintf+0x3c4>
    8e80:	8b e2       	ldi	r24, 0x2B	; 43
    8e82:	b7 01       	movw	r22, r14
    8e84:	90 e0       	ldi	r25, 0x00	; 0
    8e86:	97 d5       	rcall	.+2862   	; 0x99b6 <fputc>
    8e88:	80 e3       	ldi	r24, 0x30	; 48
    8e8a:	2a e0       	ldi	r18, 0x0A	; 10
    8e8c:	c2 16       	cp	r12, r18
    8e8e:	d1 04       	cpc	r13, r1
    8e90:	2c f0       	brlt	.+10     	; 0x8e9c <vfprintf+0x3de>
    8e92:	8f 5f       	subi	r24, 0xFF	; 255
    8e94:	fa e0       	ldi	r31, 0x0A	; 10
    8e96:	cf 1a       	sub	r12, r31
    8e98:	d1 08       	sbc	r13, r1
    8e9a:	f7 cf       	rjmp	.-18     	; 0x8e8a <vfprintf+0x3cc>
    8e9c:	b7 01       	movw	r22, r14
    8e9e:	90 e0       	ldi	r25, 0x00	; 0
    8ea0:	8a d5       	rcall	.+2836   	; 0x99b6 <fputc>
    8ea2:	b7 01       	movw	r22, r14
    8ea4:	c6 01       	movw	r24, r12
    8ea6:	c0 96       	adiw	r24, 0x30	; 48
    8ea8:	86 d5       	rcall	.+2828   	; 0x99b6 <fputc>
    8eaa:	49 c1       	rjmp	.+658    	; 0x913e <vfprintf+0x680>
    8eac:	83 36       	cpi	r24, 0x63	; 99
    8eae:	31 f0       	breq	.+12     	; 0x8ebc <vfprintf+0x3fe>
    8eb0:	83 37       	cpi	r24, 0x73	; 115
    8eb2:	79 f0       	breq	.+30     	; 0x8ed2 <vfprintf+0x414>
    8eb4:	83 35       	cpi	r24, 0x53	; 83
    8eb6:	09 f0       	breq	.+2      	; 0x8eba <vfprintf+0x3fc>
    8eb8:	52 c0       	rjmp	.+164    	; 0x8f5e <vfprintf+0x4a0>
    8eba:	1f c0       	rjmp	.+62     	; 0x8efa <vfprintf+0x43c>
    8ebc:	56 01       	movw	r10, r12
    8ebe:	32 e0       	ldi	r19, 0x02	; 2
    8ec0:	a3 0e       	add	r10, r19
    8ec2:	b1 1c       	adc	r11, r1
    8ec4:	f6 01       	movw	r30, r12
    8ec6:	80 81       	ld	r24, Z
    8ec8:	89 83       	std	Y+1, r24	; 0x01
    8eca:	01 e0       	ldi	r16, 0x01	; 1
    8ecc:	10 e0       	ldi	r17, 0x00	; 0
    8ece:	63 01       	movw	r12, r6
    8ed0:	11 c0       	rjmp	.+34     	; 0x8ef4 <vfprintf+0x436>
    8ed2:	56 01       	movw	r10, r12
    8ed4:	f2 e0       	ldi	r31, 0x02	; 2
    8ed6:	af 0e       	add	r10, r31
    8ed8:	b1 1c       	adc	r11, r1
    8eda:	f6 01       	movw	r30, r12
    8edc:	c0 80       	ld	r12, Z
    8ede:	d1 80       	ldd	r13, Z+1	; 0x01
    8ee0:	96 fe       	sbrs	r9, 6
    8ee2:	03 c0       	rjmp	.+6      	; 0x8eea <vfprintf+0x42c>
    8ee4:	61 2f       	mov	r22, r17
    8ee6:	70 e0       	ldi	r23, 0x00	; 0
    8ee8:	02 c0       	rjmp	.+4      	; 0x8eee <vfprintf+0x430>
    8eea:	6f ef       	ldi	r22, 0xFF	; 255
    8eec:	7f ef       	ldi	r23, 0xFF	; 255
    8eee:	c6 01       	movw	r24, r12
    8ef0:	57 d5       	rcall	.+2734   	; 0x99a0 <strnlen>
    8ef2:	8c 01       	movw	r16, r24
    8ef4:	f9 2d       	mov	r31, r9
    8ef6:	ff 77       	andi	r31, 0x7F	; 127
    8ef8:	13 c0       	rjmp	.+38     	; 0x8f20 <vfprintf+0x462>
    8efa:	56 01       	movw	r10, r12
    8efc:	22 e0       	ldi	r18, 0x02	; 2
    8efe:	a2 0e       	add	r10, r18
    8f00:	b1 1c       	adc	r11, r1
    8f02:	f6 01       	movw	r30, r12
    8f04:	c0 80       	ld	r12, Z
    8f06:	d1 80       	ldd	r13, Z+1	; 0x01
    8f08:	96 fe       	sbrs	r9, 6
    8f0a:	03 c0       	rjmp	.+6      	; 0x8f12 <vfprintf+0x454>
    8f0c:	61 2f       	mov	r22, r17
    8f0e:	70 e0       	ldi	r23, 0x00	; 0
    8f10:	02 c0       	rjmp	.+4      	; 0x8f16 <vfprintf+0x458>
    8f12:	6f ef       	ldi	r22, 0xFF	; 255
    8f14:	7f ef       	ldi	r23, 0xFF	; 255
    8f16:	c6 01       	movw	r24, r12
    8f18:	d9 d4       	rcall	.+2482   	; 0x98cc <strnlen_P>
    8f1a:	8c 01       	movw	r16, r24
    8f1c:	f9 2d       	mov	r31, r9
    8f1e:	f0 68       	ori	r31, 0x80	; 128
    8f20:	9f 2e       	mov	r9, r31
    8f22:	f3 fd       	sbrc	r31, 3
    8f24:	18 c0       	rjmp	.+48     	; 0x8f56 <vfprintf+0x498>
    8f26:	85 2d       	mov	r24, r5
    8f28:	90 e0       	ldi	r25, 0x00	; 0
    8f2a:	08 17       	cp	r16, r24
    8f2c:	19 07       	cpc	r17, r25
    8f2e:	98 f4       	brcc	.+38     	; 0x8f56 <vfprintf+0x498>
    8f30:	b7 01       	movw	r22, r14
    8f32:	80 e2       	ldi	r24, 0x20	; 32
    8f34:	90 e0       	ldi	r25, 0x00	; 0
    8f36:	3f d5       	rcall	.+2686   	; 0x99b6 <fputc>
    8f38:	5a 94       	dec	r5
    8f3a:	f5 cf       	rjmp	.-22     	; 0x8f26 <vfprintf+0x468>
    8f3c:	f6 01       	movw	r30, r12
    8f3e:	97 fc       	sbrc	r9, 7
    8f40:	85 91       	lpm	r24, Z+
    8f42:	97 fe       	sbrs	r9, 7
    8f44:	81 91       	ld	r24, Z+
    8f46:	6f 01       	movw	r12, r30
    8f48:	b7 01       	movw	r22, r14
    8f4a:	90 e0       	ldi	r25, 0x00	; 0
    8f4c:	34 d5       	rcall	.+2664   	; 0x99b6 <fputc>
    8f4e:	51 10       	cpse	r5, r1
    8f50:	5a 94       	dec	r5
    8f52:	01 50       	subi	r16, 0x01	; 1
    8f54:	11 09       	sbc	r17, r1
    8f56:	01 15       	cp	r16, r1
    8f58:	11 05       	cpc	r17, r1
    8f5a:	81 f7       	brne	.-32     	; 0x8f3c <vfprintf+0x47e>
    8f5c:	f0 c0       	rjmp	.+480    	; 0x913e <vfprintf+0x680>
    8f5e:	84 36       	cpi	r24, 0x64	; 100
    8f60:	11 f0       	breq	.+4      	; 0x8f66 <vfprintf+0x4a8>
    8f62:	89 36       	cpi	r24, 0x69	; 105
    8f64:	59 f5       	brne	.+86     	; 0x8fbc <vfprintf+0x4fe>
    8f66:	56 01       	movw	r10, r12
    8f68:	97 fe       	sbrs	r9, 7
    8f6a:	09 c0       	rjmp	.+18     	; 0x8f7e <vfprintf+0x4c0>
    8f6c:	24 e0       	ldi	r18, 0x04	; 4
    8f6e:	a2 0e       	add	r10, r18
    8f70:	b1 1c       	adc	r11, r1
    8f72:	f6 01       	movw	r30, r12
    8f74:	60 81       	ld	r22, Z
    8f76:	71 81       	ldd	r23, Z+1	; 0x01
    8f78:	82 81       	ldd	r24, Z+2	; 0x02
    8f7a:	93 81       	ldd	r25, Z+3	; 0x03
    8f7c:	0a c0       	rjmp	.+20     	; 0x8f92 <vfprintf+0x4d4>
    8f7e:	f2 e0       	ldi	r31, 0x02	; 2
    8f80:	af 0e       	add	r10, r31
    8f82:	b1 1c       	adc	r11, r1
    8f84:	f6 01       	movw	r30, r12
    8f86:	60 81       	ld	r22, Z
    8f88:	71 81       	ldd	r23, Z+1	; 0x01
    8f8a:	07 2e       	mov	r0, r23
    8f8c:	00 0c       	add	r0, r0
    8f8e:	88 0b       	sbc	r24, r24
    8f90:	99 0b       	sbc	r25, r25
    8f92:	f9 2d       	mov	r31, r9
    8f94:	ff 76       	andi	r31, 0x6F	; 111
    8f96:	9f 2e       	mov	r9, r31
    8f98:	97 ff       	sbrs	r25, 7
    8f9a:	09 c0       	rjmp	.+18     	; 0x8fae <vfprintf+0x4f0>
    8f9c:	90 95       	com	r25
    8f9e:	80 95       	com	r24
    8fa0:	70 95       	com	r23
    8fa2:	61 95       	neg	r22
    8fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    8fa6:	8f 4f       	sbci	r24, 0xFF	; 255
    8fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    8faa:	f0 68       	ori	r31, 0x80	; 128
    8fac:	9f 2e       	mov	r9, r31
    8fae:	2a e0       	ldi	r18, 0x0A	; 10
    8fb0:	30 e0       	ldi	r19, 0x00	; 0
    8fb2:	a3 01       	movw	r20, r6
    8fb4:	ae d5       	rcall	.+2908   	; 0x9b12 <__ultoa_invert>
    8fb6:	c8 2e       	mov	r12, r24
    8fb8:	c6 18       	sub	r12, r6
    8fba:	3e c0       	rjmp	.+124    	; 0x9038 <vfprintf+0x57a>
    8fbc:	09 2d       	mov	r16, r9
    8fbe:	85 37       	cpi	r24, 0x75	; 117
    8fc0:	21 f4       	brne	.+8      	; 0x8fca <vfprintf+0x50c>
    8fc2:	0f 7e       	andi	r16, 0xEF	; 239
    8fc4:	2a e0       	ldi	r18, 0x0A	; 10
    8fc6:	30 e0       	ldi	r19, 0x00	; 0
    8fc8:	1d c0       	rjmp	.+58     	; 0x9004 <vfprintf+0x546>
    8fca:	09 7f       	andi	r16, 0xF9	; 249
    8fcc:	8f 36       	cpi	r24, 0x6F	; 111
    8fce:	91 f0       	breq	.+36     	; 0x8ff4 <vfprintf+0x536>
    8fd0:	18 f4       	brcc	.+6      	; 0x8fd8 <vfprintf+0x51a>
    8fd2:	88 35       	cpi	r24, 0x58	; 88
    8fd4:	59 f0       	breq	.+22     	; 0x8fec <vfprintf+0x52e>
    8fd6:	bc c0       	rjmp	.+376    	; 0x9150 <vfprintf+0x692>
    8fd8:	80 37       	cpi	r24, 0x70	; 112
    8fda:	19 f0       	breq	.+6      	; 0x8fe2 <vfprintf+0x524>
    8fdc:	88 37       	cpi	r24, 0x78	; 120
    8fde:	11 f0       	breq	.+4      	; 0x8fe4 <vfprintf+0x526>
    8fe0:	b7 c0       	rjmp	.+366    	; 0x9150 <vfprintf+0x692>
    8fe2:	00 61       	ori	r16, 0x10	; 16
    8fe4:	04 ff       	sbrs	r16, 4
    8fe6:	09 c0       	rjmp	.+18     	; 0x8ffa <vfprintf+0x53c>
    8fe8:	04 60       	ori	r16, 0x04	; 4
    8fea:	07 c0       	rjmp	.+14     	; 0x8ffa <vfprintf+0x53c>
    8fec:	94 fe       	sbrs	r9, 4
    8fee:	08 c0       	rjmp	.+16     	; 0x9000 <vfprintf+0x542>
    8ff0:	06 60       	ori	r16, 0x06	; 6
    8ff2:	06 c0       	rjmp	.+12     	; 0x9000 <vfprintf+0x542>
    8ff4:	28 e0       	ldi	r18, 0x08	; 8
    8ff6:	30 e0       	ldi	r19, 0x00	; 0
    8ff8:	05 c0       	rjmp	.+10     	; 0x9004 <vfprintf+0x546>
    8ffa:	20 e1       	ldi	r18, 0x10	; 16
    8ffc:	30 e0       	ldi	r19, 0x00	; 0
    8ffe:	02 c0       	rjmp	.+4      	; 0x9004 <vfprintf+0x546>
    9000:	20 e1       	ldi	r18, 0x10	; 16
    9002:	32 e0       	ldi	r19, 0x02	; 2
    9004:	56 01       	movw	r10, r12
    9006:	07 ff       	sbrs	r16, 7
    9008:	09 c0       	rjmp	.+18     	; 0x901c <vfprintf+0x55e>
    900a:	84 e0       	ldi	r24, 0x04	; 4
    900c:	a8 0e       	add	r10, r24
    900e:	b1 1c       	adc	r11, r1
    9010:	f6 01       	movw	r30, r12
    9012:	60 81       	ld	r22, Z
    9014:	71 81       	ldd	r23, Z+1	; 0x01
    9016:	82 81       	ldd	r24, Z+2	; 0x02
    9018:	93 81       	ldd	r25, Z+3	; 0x03
    901a:	08 c0       	rjmp	.+16     	; 0x902c <vfprintf+0x56e>
    901c:	f2 e0       	ldi	r31, 0x02	; 2
    901e:	af 0e       	add	r10, r31
    9020:	b1 1c       	adc	r11, r1
    9022:	f6 01       	movw	r30, r12
    9024:	60 81       	ld	r22, Z
    9026:	71 81       	ldd	r23, Z+1	; 0x01
    9028:	80 e0       	ldi	r24, 0x00	; 0
    902a:	90 e0       	ldi	r25, 0x00	; 0
    902c:	a3 01       	movw	r20, r6
    902e:	71 d5       	rcall	.+2786   	; 0x9b12 <__ultoa_invert>
    9030:	c8 2e       	mov	r12, r24
    9032:	c6 18       	sub	r12, r6
    9034:	0f 77       	andi	r16, 0x7F	; 127
    9036:	90 2e       	mov	r9, r16
    9038:	96 fe       	sbrs	r9, 6
    903a:	0b c0       	rjmp	.+22     	; 0x9052 <vfprintf+0x594>
    903c:	09 2d       	mov	r16, r9
    903e:	0e 7f       	andi	r16, 0xFE	; 254
    9040:	c1 16       	cp	r12, r17
    9042:	50 f4       	brcc	.+20     	; 0x9058 <vfprintf+0x59a>
    9044:	94 fe       	sbrs	r9, 4
    9046:	0a c0       	rjmp	.+20     	; 0x905c <vfprintf+0x59e>
    9048:	92 fc       	sbrc	r9, 2
    904a:	08 c0       	rjmp	.+16     	; 0x905c <vfprintf+0x59e>
    904c:	09 2d       	mov	r16, r9
    904e:	0e 7e       	andi	r16, 0xEE	; 238
    9050:	05 c0       	rjmp	.+10     	; 0x905c <vfprintf+0x59e>
    9052:	dc 2c       	mov	r13, r12
    9054:	09 2d       	mov	r16, r9
    9056:	03 c0       	rjmp	.+6      	; 0x905e <vfprintf+0x5a0>
    9058:	dc 2c       	mov	r13, r12
    905a:	01 c0       	rjmp	.+2      	; 0x905e <vfprintf+0x5a0>
    905c:	d1 2e       	mov	r13, r17
    905e:	04 ff       	sbrs	r16, 4
    9060:	0d c0       	rjmp	.+26     	; 0x907c <vfprintf+0x5be>
    9062:	fe 01       	movw	r30, r28
    9064:	ec 0d       	add	r30, r12
    9066:	f1 1d       	adc	r31, r1
    9068:	80 81       	ld	r24, Z
    906a:	80 33       	cpi	r24, 0x30	; 48
    906c:	11 f4       	brne	.+4      	; 0x9072 <vfprintf+0x5b4>
    906e:	09 7e       	andi	r16, 0xE9	; 233
    9070:	09 c0       	rjmp	.+18     	; 0x9084 <vfprintf+0x5c6>
    9072:	02 ff       	sbrs	r16, 2
    9074:	06 c0       	rjmp	.+12     	; 0x9082 <vfprintf+0x5c4>
    9076:	d3 94       	inc	r13
    9078:	d3 94       	inc	r13
    907a:	04 c0       	rjmp	.+8      	; 0x9084 <vfprintf+0x5c6>
    907c:	80 2f       	mov	r24, r16
    907e:	86 78       	andi	r24, 0x86	; 134
    9080:	09 f0       	breq	.+2      	; 0x9084 <vfprintf+0x5c6>
    9082:	d3 94       	inc	r13
    9084:	03 fd       	sbrc	r16, 3
    9086:	10 c0       	rjmp	.+32     	; 0x90a8 <vfprintf+0x5ea>
    9088:	00 ff       	sbrs	r16, 0
    908a:	06 c0       	rjmp	.+12     	; 0x9098 <vfprintf+0x5da>
    908c:	1c 2d       	mov	r17, r12
    908e:	d5 14       	cp	r13, r5
    9090:	78 f4       	brcc	.+30     	; 0x90b0 <vfprintf+0x5f2>
    9092:	15 0d       	add	r17, r5
    9094:	1d 19       	sub	r17, r13
    9096:	0c c0       	rjmp	.+24     	; 0x90b0 <vfprintf+0x5f2>
    9098:	d5 14       	cp	r13, r5
    909a:	50 f4       	brcc	.+20     	; 0x90b0 <vfprintf+0x5f2>
    909c:	b7 01       	movw	r22, r14
    909e:	80 e2       	ldi	r24, 0x20	; 32
    90a0:	90 e0       	ldi	r25, 0x00	; 0
    90a2:	89 d4       	rcall	.+2322   	; 0x99b6 <fputc>
    90a4:	d3 94       	inc	r13
    90a6:	f8 cf       	rjmp	.-16     	; 0x9098 <vfprintf+0x5da>
    90a8:	d5 14       	cp	r13, r5
    90aa:	10 f4       	brcc	.+4      	; 0x90b0 <vfprintf+0x5f2>
    90ac:	5d 18       	sub	r5, r13
    90ae:	01 c0       	rjmp	.+2      	; 0x90b2 <vfprintf+0x5f4>
    90b0:	51 2c       	mov	r5, r1
    90b2:	04 ff       	sbrs	r16, 4
    90b4:	0f c0       	rjmp	.+30     	; 0x90d4 <vfprintf+0x616>
    90b6:	b7 01       	movw	r22, r14
    90b8:	80 e3       	ldi	r24, 0x30	; 48
    90ba:	90 e0       	ldi	r25, 0x00	; 0
    90bc:	7c d4       	rcall	.+2296   	; 0x99b6 <fputc>
    90be:	02 ff       	sbrs	r16, 2
    90c0:	16 c0       	rjmp	.+44     	; 0x90ee <vfprintf+0x630>
    90c2:	01 fd       	sbrc	r16, 1
    90c4:	03 c0       	rjmp	.+6      	; 0x90cc <vfprintf+0x60e>
    90c6:	88 e7       	ldi	r24, 0x78	; 120
    90c8:	90 e0       	ldi	r25, 0x00	; 0
    90ca:	02 c0       	rjmp	.+4      	; 0x90d0 <vfprintf+0x612>
    90cc:	88 e5       	ldi	r24, 0x58	; 88
    90ce:	90 e0       	ldi	r25, 0x00	; 0
    90d0:	b7 01       	movw	r22, r14
    90d2:	0c c0       	rjmp	.+24     	; 0x90ec <vfprintf+0x62e>
    90d4:	80 2f       	mov	r24, r16
    90d6:	86 78       	andi	r24, 0x86	; 134
    90d8:	51 f0       	breq	.+20     	; 0x90ee <vfprintf+0x630>
    90da:	01 ff       	sbrs	r16, 1
    90dc:	02 c0       	rjmp	.+4      	; 0x90e2 <vfprintf+0x624>
    90de:	8b e2       	ldi	r24, 0x2B	; 43
    90e0:	01 c0       	rjmp	.+2      	; 0x90e4 <vfprintf+0x626>
    90e2:	80 e2       	ldi	r24, 0x20	; 32
    90e4:	07 fd       	sbrc	r16, 7
    90e6:	8d e2       	ldi	r24, 0x2D	; 45
    90e8:	b7 01       	movw	r22, r14
    90ea:	90 e0       	ldi	r25, 0x00	; 0
    90ec:	64 d4       	rcall	.+2248   	; 0x99b6 <fputc>
    90ee:	c1 16       	cp	r12, r17
    90f0:	30 f4       	brcc	.+12     	; 0x90fe <vfprintf+0x640>
    90f2:	b7 01       	movw	r22, r14
    90f4:	80 e3       	ldi	r24, 0x30	; 48
    90f6:	90 e0       	ldi	r25, 0x00	; 0
    90f8:	5e d4       	rcall	.+2236   	; 0x99b6 <fputc>
    90fa:	11 50       	subi	r17, 0x01	; 1
    90fc:	f8 cf       	rjmp	.-16     	; 0x90ee <vfprintf+0x630>
    90fe:	ca 94       	dec	r12
    9100:	f3 01       	movw	r30, r6
    9102:	ec 0d       	add	r30, r12
    9104:	f1 1d       	adc	r31, r1
    9106:	80 81       	ld	r24, Z
    9108:	b7 01       	movw	r22, r14
    910a:	90 e0       	ldi	r25, 0x00	; 0
    910c:	54 d4       	rcall	.+2216   	; 0x99b6 <fputc>
    910e:	c1 10       	cpse	r12, r1
    9110:	f6 cf       	rjmp	.-20     	; 0x90fe <vfprintf+0x640>
    9112:	15 c0       	rjmp	.+42     	; 0x913e <vfprintf+0x680>
    9114:	f4 e0       	ldi	r31, 0x04	; 4
    9116:	f5 15       	cp	r31, r5
    9118:	50 f5       	brcc	.+84     	; 0x916e <vfprintf+0x6b0>
    911a:	84 e0       	ldi	r24, 0x04	; 4
    911c:	58 1a       	sub	r5, r24
    911e:	93 fe       	sbrs	r9, 3
    9120:	1e c0       	rjmp	.+60     	; 0x915e <vfprintf+0x6a0>
    9122:	01 11       	cpse	r16, r1
    9124:	25 c0       	rjmp	.+74     	; 0x9170 <vfprintf+0x6b2>
    9126:	2c 85       	ldd	r18, Y+12	; 0x0c
    9128:	23 ff       	sbrs	r18, 3
    912a:	27 c0       	rjmp	.+78     	; 0x917a <vfprintf+0x6bc>
    912c:	0a e9       	ldi	r16, 0x9A	; 154
    912e:	11 e0       	ldi	r17, 0x01	; 1
    9130:	39 2d       	mov	r19, r9
    9132:	30 71       	andi	r19, 0x10	; 16
    9134:	93 2e       	mov	r9, r19
    9136:	f8 01       	movw	r30, r16
    9138:	84 91       	lpm	r24, Z
    913a:	81 11       	cpse	r24, r1
    913c:	21 c0       	rjmp	.+66     	; 0x9180 <vfprintf+0x6c2>
    913e:	55 20       	and	r5, r5
    9140:	09 f4       	brne	.+2      	; 0x9144 <vfprintf+0x686>
    9142:	fc cc       	rjmp	.-1544   	; 0x8b3c <vfprintf+0x7e>
    9144:	b7 01       	movw	r22, r14
    9146:	80 e2       	ldi	r24, 0x20	; 32
    9148:	90 e0       	ldi	r25, 0x00	; 0
    914a:	35 d4       	rcall	.+2154   	; 0x99b6 <fputc>
    914c:	5a 94       	dec	r5
    914e:	f7 cf       	rjmp	.-18     	; 0x913e <vfprintf+0x680>
    9150:	f7 01       	movw	r30, r14
    9152:	86 81       	ldd	r24, Z+6	; 0x06
    9154:	97 81       	ldd	r25, Z+7	; 0x07
    9156:	23 c0       	rjmp	.+70     	; 0x919e <vfprintf+0x6e0>
    9158:	8f ef       	ldi	r24, 0xFF	; 255
    915a:	9f ef       	ldi	r25, 0xFF	; 255
    915c:	20 c0       	rjmp	.+64     	; 0x919e <vfprintf+0x6e0>
    915e:	b7 01       	movw	r22, r14
    9160:	80 e2       	ldi	r24, 0x20	; 32
    9162:	90 e0       	ldi	r25, 0x00	; 0
    9164:	28 d4       	rcall	.+2128   	; 0x99b6 <fputc>
    9166:	5a 94       	dec	r5
    9168:	51 10       	cpse	r5, r1
    916a:	f9 cf       	rjmp	.-14     	; 0x915e <vfprintf+0x6a0>
    916c:	da cf       	rjmp	.-76     	; 0x9122 <vfprintf+0x664>
    916e:	51 2c       	mov	r5, r1
    9170:	b7 01       	movw	r22, r14
    9172:	80 2f       	mov	r24, r16
    9174:	90 e0       	ldi	r25, 0x00	; 0
    9176:	1f d4       	rcall	.+2110   	; 0x99b6 <fputc>
    9178:	d6 cf       	rjmp	.-84     	; 0x9126 <vfprintf+0x668>
    917a:	0e e9       	ldi	r16, 0x9E	; 158
    917c:	11 e0       	ldi	r17, 0x01	; 1
    917e:	d8 cf       	rjmp	.-80     	; 0x9130 <vfprintf+0x672>
    9180:	91 10       	cpse	r9, r1
    9182:	80 52       	subi	r24, 0x20	; 32
    9184:	b7 01       	movw	r22, r14
    9186:	90 e0       	ldi	r25, 0x00	; 0
    9188:	16 d4       	rcall	.+2092   	; 0x99b6 <fputc>
    918a:	0f 5f       	subi	r16, 0xFF	; 255
    918c:	1f 4f       	sbci	r17, 0xFF	; 255
    918e:	d3 cf       	rjmp	.-90     	; 0x9136 <vfprintf+0x678>
    9190:	23 e0       	ldi	r18, 0x03	; 3
    9192:	25 15       	cp	r18, r5
    9194:	10 f4       	brcc	.+4      	; 0x919a <vfprintf+0x6dc>
    9196:	83 e0       	ldi	r24, 0x03	; 3
    9198:	c1 cf       	rjmp	.-126    	; 0x911c <vfprintf+0x65e>
    919a:	51 2c       	mov	r5, r1
    919c:	c4 cf       	rjmp	.-120    	; 0x9126 <vfprintf+0x668>
    919e:	60 96       	adiw	r28, 0x10	; 16
    91a0:	0f b6       	in	r0, 0x3f	; 63
    91a2:	f8 94       	cli
    91a4:	de bf       	out	0x3e, r29	; 62
    91a6:	0f be       	out	0x3f, r0	; 63
    91a8:	cd bf       	out	0x3d, r28	; 61
    91aa:	df 91       	pop	r29
    91ac:	cf 91       	pop	r28
    91ae:	1f 91       	pop	r17
    91b0:	0f 91       	pop	r16
    91b2:	ff 90       	pop	r15
    91b4:	ef 90       	pop	r14
    91b6:	df 90       	pop	r13
    91b8:	cf 90       	pop	r12
    91ba:	bf 90       	pop	r11
    91bc:	af 90       	pop	r10
    91be:	9f 90       	pop	r9
    91c0:	8f 90       	pop	r8
    91c2:	7f 90       	pop	r7
    91c4:	6f 90       	pop	r6
    91c6:	5f 90       	pop	r5
    91c8:	4f 90       	pop	r4
    91ca:	3f 90       	pop	r3
    91cc:	2f 90       	pop	r2
    91ce:	08 95       	ret

000091d0 <__subsf3>:
    91d0:	50 58       	subi	r21, 0x80	; 128

000091d2 <__addsf3>:
    91d2:	bb 27       	eor	r27, r27
    91d4:	aa 27       	eor	r26, r26
    91d6:	13 d0       	rcall	.+38     	; 0x91fe <__addsf3x>
    91d8:	0c 94 eb 37 	jmp	0x6fd6	; 0x6fd6 <__fp_round>
    91dc:	0e 94 dd 37 	call	0x6fba	; 0x6fba <__fp_pscA>
    91e0:	38 f0       	brcs	.+14     	; 0x91f0 <__addsf3+0x1e>
    91e2:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__fp_pscB>
    91e6:	20 f0       	brcs	.+8      	; 0x91f0 <__addsf3+0x1e>
    91e8:	39 f4       	brne	.+14     	; 0x91f8 <__addsf3+0x26>
    91ea:	9f 3f       	cpi	r25, 0xFF	; 255
    91ec:	19 f4       	brne	.+6      	; 0x91f4 <__addsf3+0x22>
    91ee:	26 f4       	brtc	.+8      	; 0x91f8 <__addsf3+0x26>
    91f0:	0c 94 da 37 	jmp	0x6fb4	; 0x6fb4 <__fp_nan>
    91f4:	0e f4       	brtc	.+2      	; 0x91f8 <__addsf3+0x26>
    91f6:	e0 95       	com	r30
    91f8:	e7 fb       	bst	r30, 7
    91fa:	0c 94 d4 37 	jmp	0x6fa8	; 0x6fa8 <__fp_inf>

000091fe <__addsf3x>:
    91fe:	e9 2f       	mov	r30, r25
    9200:	0e 94 44 37 	call	0x6e88	; 0x6e88 <__fp_split3>
    9204:	58 f3       	brcs	.-42     	; 0x91dc <__addsf3+0xa>
    9206:	ba 17       	cp	r27, r26
    9208:	62 07       	cpc	r22, r18
    920a:	73 07       	cpc	r23, r19
    920c:	84 07       	cpc	r24, r20
    920e:	95 07       	cpc	r25, r21
    9210:	20 f0       	brcs	.+8      	; 0x921a <__addsf3x+0x1c>
    9212:	79 f4       	brne	.+30     	; 0x9232 <__addsf3x+0x34>
    9214:	a6 f5       	brtc	.+104    	; 0x927e <__addsf3x+0x80>
    9216:	0c 94 66 37 	jmp	0x6ecc	; 0x6ecc <__fp_zero>
    921a:	0e f4       	brtc	.+2      	; 0x921e <__addsf3x+0x20>
    921c:	e0 95       	com	r30
    921e:	0b 2e       	mov	r0, r27
    9220:	ba 2f       	mov	r27, r26
    9222:	a0 2d       	mov	r26, r0
    9224:	0b 01       	movw	r0, r22
    9226:	b9 01       	movw	r22, r18
    9228:	90 01       	movw	r18, r0
    922a:	0c 01       	movw	r0, r24
    922c:	ca 01       	movw	r24, r20
    922e:	a0 01       	movw	r20, r0
    9230:	11 24       	eor	r1, r1
    9232:	ff 27       	eor	r31, r31
    9234:	59 1b       	sub	r21, r25
    9236:	99 f0       	breq	.+38     	; 0x925e <__addsf3x+0x60>
    9238:	59 3f       	cpi	r21, 0xF9	; 249
    923a:	50 f4       	brcc	.+20     	; 0x9250 <__addsf3x+0x52>
    923c:	50 3e       	cpi	r21, 0xE0	; 224
    923e:	68 f1       	brcs	.+90     	; 0x929a <__addsf3x+0x9c>
    9240:	1a 16       	cp	r1, r26
    9242:	f0 40       	sbci	r31, 0x00	; 0
    9244:	a2 2f       	mov	r26, r18
    9246:	23 2f       	mov	r18, r19
    9248:	34 2f       	mov	r19, r20
    924a:	44 27       	eor	r20, r20
    924c:	58 5f       	subi	r21, 0xF8	; 248
    924e:	f3 cf       	rjmp	.-26     	; 0x9236 <__addsf3x+0x38>
    9250:	46 95       	lsr	r20
    9252:	37 95       	ror	r19
    9254:	27 95       	ror	r18
    9256:	a7 95       	ror	r26
    9258:	f0 40       	sbci	r31, 0x00	; 0
    925a:	53 95       	inc	r21
    925c:	c9 f7       	brne	.-14     	; 0x9250 <__addsf3x+0x52>
    925e:	7e f4       	brtc	.+30     	; 0x927e <__addsf3x+0x80>
    9260:	1f 16       	cp	r1, r31
    9262:	ba 0b       	sbc	r27, r26
    9264:	62 0b       	sbc	r22, r18
    9266:	73 0b       	sbc	r23, r19
    9268:	84 0b       	sbc	r24, r20
    926a:	ba f0       	brmi	.+46     	; 0x929a <__addsf3x+0x9c>
    926c:	91 50       	subi	r25, 0x01	; 1
    926e:	a1 f0       	breq	.+40     	; 0x9298 <__addsf3x+0x9a>
    9270:	ff 0f       	add	r31, r31
    9272:	bb 1f       	adc	r27, r27
    9274:	66 1f       	adc	r22, r22
    9276:	77 1f       	adc	r23, r23
    9278:	88 1f       	adc	r24, r24
    927a:	c2 f7       	brpl	.-16     	; 0x926c <__addsf3x+0x6e>
    927c:	0e c0       	rjmp	.+28     	; 0x929a <__addsf3x+0x9c>
    927e:	ba 0f       	add	r27, r26
    9280:	62 1f       	adc	r22, r18
    9282:	73 1f       	adc	r23, r19
    9284:	84 1f       	adc	r24, r20
    9286:	48 f4       	brcc	.+18     	; 0x929a <__addsf3x+0x9c>
    9288:	87 95       	ror	r24
    928a:	77 95       	ror	r23
    928c:	67 95       	ror	r22
    928e:	b7 95       	ror	r27
    9290:	f7 95       	ror	r31
    9292:	9e 3f       	cpi	r25, 0xFE	; 254
    9294:	08 f0       	brcs	.+2      	; 0x9298 <__addsf3x+0x9a>
    9296:	b0 cf       	rjmp	.-160    	; 0x91f8 <__addsf3+0x26>
    9298:	93 95       	inc	r25
    929a:	88 0f       	add	r24, r24
    929c:	08 f0       	brcs	.+2      	; 0x92a0 <__addsf3x+0xa2>
    929e:	99 27       	eor	r25, r25
    92a0:	ee 0f       	add	r30, r30
    92a2:	97 95       	ror	r25
    92a4:	87 95       	ror	r24
    92a6:	08 95       	ret

000092a8 <__divsf3>:
    92a8:	12 d0       	rcall	.+36     	; 0x92ce <__divsf3x>
    92aa:	0c 94 eb 37 	jmp	0x6fd6	; 0x6fd6 <__fp_round>
    92ae:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__fp_pscB>
    92b2:	58 f0       	brcs	.+22     	; 0x92ca <__divsf3+0x22>
    92b4:	0e 94 dd 37 	call	0x6fba	; 0x6fba <__fp_pscA>
    92b8:	40 f0       	brcs	.+16     	; 0x92ca <__divsf3+0x22>
    92ba:	29 f4       	brne	.+10     	; 0x92c6 <__divsf3+0x1e>
    92bc:	5f 3f       	cpi	r21, 0xFF	; 255
    92be:	29 f0       	breq	.+10     	; 0x92ca <__divsf3+0x22>
    92c0:	0c 94 d4 37 	jmp	0x6fa8	; 0x6fa8 <__fp_inf>
    92c4:	51 11       	cpse	r21, r1
    92c6:	0c 94 67 37 	jmp	0x6ece	; 0x6ece <__fp_szero>
    92ca:	0c 94 da 37 	jmp	0x6fb4	; 0x6fb4 <__fp_nan>

000092ce <__divsf3x>:
    92ce:	0e 94 44 37 	call	0x6e88	; 0x6e88 <__fp_split3>
    92d2:	68 f3       	brcs	.-38     	; 0x92ae <__divsf3+0x6>

000092d4 <__divsf3_pse>:
    92d4:	99 23       	and	r25, r25
    92d6:	b1 f3       	breq	.-20     	; 0x92c4 <__divsf3+0x1c>
    92d8:	55 23       	and	r21, r21
    92da:	91 f3       	breq	.-28     	; 0x92c0 <__divsf3+0x18>
    92dc:	95 1b       	sub	r25, r21
    92de:	55 0b       	sbc	r21, r21
    92e0:	bb 27       	eor	r27, r27
    92e2:	aa 27       	eor	r26, r26
    92e4:	62 17       	cp	r22, r18
    92e6:	73 07       	cpc	r23, r19
    92e8:	84 07       	cpc	r24, r20
    92ea:	38 f0       	brcs	.+14     	; 0x92fa <__divsf3_pse+0x26>
    92ec:	9f 5f       	subi	r25, 0xFF	; 255
    92ee:	5f 4f       	sbci	r21, 0xFF	; 255
    92f0:	22 0f       	add	r18, r18
    92f2:	33 1f       	adc	r19, r19
    92f4:	44 1f       	adc	r20, r20
    92f6:	aa 1f       	adc	r26, r26
    92f8:	a9 f3       	breq	.-22     	; 0x92e4 <__divsf3_pse+0x10>
    92fa:	35 d0       	rcall	.+106    	; 0x9366 <__divsf3_pse+0x92>
    92fc:	0e 2e       	mov	r0, r30
    92fe:	3a f0       	brmi	.+14     	; 0x930e <__divsf3_pse+0x3a>
    9300:	e0 e8       	ldi	r30, 0x80	; 128
    9302:	32 d0       	rcall	.+100    	; 0x9368 <__divsf3_pse+0x94>
    9304:	91 50       	subi	r25, 0x01	; 1
    9306:	50 40       	sbci	r21, 0x00	; 0
    9308:	e6 95       	lsr	r30
    930a:	00 1c       	adc	r0, r0
    930c:	ca f7       	brpl	.-14     	; 0x9300 <__divsf3_pse+0x2c>
    930e:	2b d0       	rcall	.+86     	; 0x9366 <__divsf3_pse+0x92>
    9310:	fe 2f       	mov	r31, r30
    9312:	29 d0       	rcall	.+82     	; 0x9366 <__divsf3_pse+0x92>
    9314:	66 0f       	add	r22, r22
    9316:	77 1f       	adc	r23, r23
    9318:	88 1f       	adc	r24, r24
    931a:	bb 1f       	adc	r27, r27
    931c:	26 17       	cp	r18, r22
    931e:	37 07       	cpc	r19, r23
    9320:	48 07       	cpc	r20, r24
    9322:	ab 07       	cpc	r26, r27
    9324:	b0 e8       	ldi	r27, 0x80	; 128
    9326:	09 f0       	breq	.+2      	; 0x932a <__divsf3_pse+0x56>
    9328:	bb 0b       	sbc	r27, r27
    932a:	80 2d       	mov	r24, r0
    932c:	bf 01       	movw	r22, r30
    932e:	ff 27       	eor	r31, r31
    9330:	93 58       	subi	r25, 0x83	; 131
    9332:	5f 4f       	sbci	r21, 0xFF	; 255
    9334:	3a f0       	brmi	.+14     	; 0x9344 <__divsf3_pse+0x70>
    9336:	9e 3f       	cpi	r25, 0xFE	; 254
    9338:	51 05       	cpc	r21, r1
    933a:	78 f0       	brcs	.+30     	; 0x935a <__divsf3_pse+0x86>
    933c:	0c 94 d4 37 	jmp	0x6fa8	; 0x6fa8 <__fp_inf>
    9340:	0c 94 67 37 	jmp	0x6ece	; 0x6ece <__fp_szero>
    9344:	5f 3f       	cpi	r21, 0xFF	; 255
    9346:	e4 f3       	brlt	.-8      	; 0x9340 <__divsf3_pse+0x6c>
    9348:	98 3e       	cpi	r25, 0xE8	; 232
    934a:	d4 f3       	brlt	.-12     	; 0x9340 <__divsf3_pse+0x6c>
    934c:	86 95       	lsr	r24
    934e:	77 95       	ror	r23
    9350:	67 95       	ror	r22
    9352:	b7 95       	ror	r27
    9354:	f7 95       	ror	r31
    9356:	9f 5f       	subi	r25, 0xFF	; 255
    9358:	c9 f7       	brne	.-14     	; 0x934c <__divsf3_pse+0x78>
    935a:	88 0f       	add	r24, r24
    935c:	91 1d       	adc	r25, r1
    935e:	96 95       	lsr	r25
    9360:	87 95       	ror	r24
    9362:	97 f9       	bld	r25, 7
    9364:	08 95       	ret
    9366:	e1 e0       	ldi	r30, 0x01	; 1
    9368:	66 0f       	add	r22, r22
    936a:	77 1f       	adc	r23, r23
    936c:	88 1f       	adc	r24, r24
    936e:	bb 1f       	adc	r27, r27
    9370:	62 17       	cp	r22, r18
    9372:	73 07       	cpc	r23, r19
    9374:	84 07       	cpc	r24, r20
    9376:	ba 07       	cpc	r27, r26
    9378:	20 f0       	brcs	.+8      	; 0x9382 <__divsf3_pse+0xae>
    937a:	62 1b       	sub	r22, r18
    937c:	73 0b       	sbc	r23, r19
    937e:	84 0b       	sbc	r24, r20
    9380:	ba 0b       	sbc	r27, r26
    9382:	ee 1f       	adc	r30, r30
    9384:	88 f7       	brcc	.-30     	; 0x9368 <__divsf3_pse+0x94>
    9386:	e0 95       	com	r30
    9388:	08 95       	ret

0000938a <__fixsfsi>:
    938a:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <__fixunssfsi>
    938e:	68 94       	set
    9390:	b1 11       	cpse	r27, r1
    9392:	0c 94 67 37 	jmp	0x6ece	; 0x6ece <__fp_szero>
    9396:	08 95       	ret

00009398 <__floatunsisf>:
    9398:	e8 94       	clt
    939a:	09 c0       	rjmp	.+18     	; 0x93ae <__floatsisf+0x12>

0000939c <__floatsisf>:
    939c:	97 fb       	bst	r25, 7
    939e:	3e f4       	brtc	.+14     	; 0x93ae <__floatsisf+0x12>
    93a0:	90 95       	com	r25
    93a2:	80 95       	com	r24
    93a4:	70 95       	com	r23
    93a6:	61 95       	neg	r22
    93a8:	7f 4f       	sbci	r23, 0xFF	; 255
    93aa:	8f 4f       	sbci	r24, 0xFF	; 255
    93ac:	9f 4f       	sbci	r25, 0xFF	; 255
    93ae:	99 23       	and	r25, r25
    93b0:	a9 f0       	breq	.+42     	; 0x93dc <__floatsisf+0x40>
    93b2:	f9 2f       	mov	r31, r25
    93b4:	96 e9       	ldi	r25, 0x96	; 150
    93b6:	bb 27       	eor	r27, r27
    93b8:	93 95       	inc	r25
    93ba:	f6 95       	lsr	r31
    93bc:	87 95       	ror	r24
    93be:	77 95       	ror	r23
    93c0:	67 95       	ror	r22
    93c2:	b7 95       	ror	r27
    93c4:	f1 11       	cpse	r31, r1
    93c6:	f8 cf       	rjmp	.-16     	; 0x93b8 <__floatsisf+0x1c>
    93c8:	fa f4       	brpl	.+62     	; 0x9408 <__floatsisf+0x6c>
    93ca:	bb 0f       	add	r27, r27
    93cc:	11 f4       	brne	.+4      	; 0x93d2 <__floatsisf+0x36>
    93ce:	60 ff       	sbrs	r22, 0
    93d0:	1b c0       	rjmp	.+54     	; 0x9408 <__floatsisf+0x6c>
    93d2:	6f 5f       	subi	r22, 0xFF	; 255
    93d4:	7f 4f       	sbci	r23, 0xFF	; 255
    93d6:	8f 4f       	sbci	r24, 0xFF	; 255
    93d8:	9f 4f       	sbci	r25, 0xFF	; 255
    93da:	16 c0       	rjmp	.+44     	; 0x9408 <__floatsisf+0x6c>
    93dc:	88 23       	and	r24, r24
    93de:	11 f0       	breq	.+4      	; 0x93e4 <__floatsisf+0x48>
    93e0:	96 e9       	ldi	r25, 0x96	; 150
    93e2:	11 c0       	rjmp	.+34     	; 0x9406 <__floatsisf+0x6a>
    93e4:	77 23       	and	r23, r23
    93e6:	21 f0       	breq	.+8      	; 0x93f0 <__floatsisf+0x54>
    93e8:	9e e8       	ldi	r25, 0x8E	; 142
    93ea:	87 2f       	mov	r24, r23
    93ec:	76 2f       	mov	r23, r22
    93ee:	05 c0       	rjmp	.+10     	; 0x93fa <__floatsisf+0x5e>
    93f0:	66 23       	and	r22, r22
    93f2:	71 f0       	breq	.+28     	; 0x9410 <__floatsisf+0x74>
    93f4:	96 e8       	ldi	r25, 0x86	; 134
    93f6:	86 2f       	mov	r24, r22
    93f8:	70 e0       	ldi	r23, 0x00	; 0
    93fa:	60 e0       	ldi	r22, 0x00	; 0
    93fc:	2a f0       	brmi	.+10     	; 0x9408 <__floatsisf+0x6c>
    93fe:	9a 95       	dec	r25
    9400:	66 0f       	add	r22, r22
    9402:	77 1f       	adc	r23, r23
    9404:	88 1f       	adc	r24, r24
    9406:	da f7       	brpl	.-10     	; 0x93fe <__floatsisf+0x62>
    9408:	88 0f       	add	r24, r24
    940a:	96 95       	lsr	r25
    940c:	87 95       	ror	r24
    940e:	97 f9       	bld	r25, 7
    9410:	08 95       	ret

00009412 <__divmodhi4>:
    9412:	97 fb       	bst	r25, 7
    9414:	07 2e       	mov	r0, r23
    9416:	16 f4       	brtc	.+4      	; 0x941c <__divmodhi4+0xa>
    9418:	00 94       	com	r0
    941a:	06 d0       	rcall	.+12     	; 0x9428 <__divmodhi4_neg1>
    941c:	77 fd       	sbrc	r23, 7
    941e:	08 d0       	rcall	.+16     	; 0x9430 <__divmodhi4_neg2>
    9420:	44 d0       	rcall	.+136    	; 0x94aa <__udivmodhi4>
    9422:	07 fc       	sbrc	r0, 7
    9424:	05 d0       	rcall	.+10     	; 0x9430 <__divmodhi4_neg2>
    9426:	3e f4       	brtc	.+14     	; 0x9436 <__divmodhi4_exit>

00009428 <__divmodhi4_neg1>:
    9428:	90 95       	com	r25
    942a:	81 95       	neg	r24
    942c:	9f 4f       	sbci	r25, 0xFF	; 255
    942e:	08 95       	ret

00009430 <__divmodhi4_neg2>:
    9430:	70 95       	com	r23
    9432:	61 95       	neg	r22
    9434:	7f 4f       	sbci	r23, 0xFF	; 255

00009436 <__divmodhi4_exit>:
    9436:	08 95       	ret

00009438 <__udivmodsi4>:
    9438:	a1 e2       	ldi	r26, 0x21	; 33
    943a:	1a 2e       	mov	r1, r26
    943c:	aa 1b       	sub	r26, r26
    943e:	bb 1b       	sub	r27, r27
    9440:	fd 01       	movw	r30, r26
    9442:	0d c0       	rjmp	.+26     	; 0x945e <__udivmodsi4_ep>

00009444 <__udivmodsi4_loop>:
    9444:	aa 1f       	adc	r26, r26
    9446:	bb 1f       	adc	r27, r27
    9448:	ee 1f       	adc	r30, r30
    944a:	ff 1f       	adc	r31, r31
    944c:	a2 17       	cp	r26, r18
    944e:	b3 07       	cpc	r27, r19
    9450:	e4 07       	cpc	r30, r20
    9452:	f5 07       	cpc	r31, r21
    9454:	20 f0       	brcs	.+8      	; 0x945e <__udivmodsi4_ep>
    9456:	a2 1b       	sub	r26, r18
    9458:	b3 0b       	sbc	r27, r19
    945a:	e4 0b       	sbc	r30, r20
    945c:	f5 0b       	sbc	r31, r21

0000945e <__udivmodsi4_ep>:
    945e:	66 1f       	adc	r22, r22
    9460:	77 1f       	adc	r23, r23
    9462:	88 1f       	adc	r24, r24
    9464:	99 1f       	adc	r25, r25
    9466:	1a 94       	dec	r1
    9468:	69 f7       	brne	.-38     	; 0x9444 <__udivmodsi4_loop>
    946a:	60 95       	com	r22
    946c:	70 95       	com	r23
    946e:	80 95       	com	r24
    9470:	90 95       	com	r25
    9472:	9b 01       	movw	r18, r22
    9474:	ac 01       	movw	r20, r24
    9476:	bd 01       	movw	r22, r26
    9478:	cf 01       	movw	r24, r30
    947a:	08 95       	ret

0000947c <__tablejump2__>:
    947c:	ee 0f       	add	r30, r30
    947e:	ff 1f       	adc	r31, r31
    9480:	88 1f       	adc	r24, r24
    9482:	8b bf       	out	0x3b, r24	; 59
    9484:	07 90       	elpm	r0, Z+
    9486:	f6 91       	elpm	r31, Z
    9488:	e0 2d       	mov	r30, r0
    948a:	19 94       	eijmp

0000948c <__umulhisi3>:
    948c:	a2 9f       	mul	r26, r18
    948e:	b0 01       	movw	r22, r0
    9490:	b3 9f       	mul	r27, r19
    9492:	c0 01       	movw	r24, r0
    9494:	a3 9f       	mul	r26, r19
    9496:	70 0d       	add	r23, r0
    9498:	81 1d       	adc	r24, r1
    949a:	11 24       	eor	r1, r1
    949c:	91 1d       	adc	r25, r1
    949e:	b2 9f       	mul	r27, r18
    94a0:	70 0d       	add	r23, r0
    94a2:	81 1d       	adc	r24, r1
    94a4:	11 24       	eor	r1, r1
    94a6:	91 1d       	adc	r25, r1
    94a8:	08 95       	ret

000094aa <__udivmodhi4>:
    94aa:	aa 1b       	sub	r26, r26
    94ac:	bb 1b       	sub	r27, r27
    94ae:	51 e1       	ldi	r21, 0x11	; 17
    94b0:	07 c0       	rjmp	.+14     	; 0x94c0 <__udivmodhi4_ep>

000094b2 <__udivmodhi4_loop>:
    94b2:	aa 1f       	adc	r26, r26
    94b4:	bb 1f       	adc	r27, r27
    94b6:	a6 17       	cp	r26, r22
    94b8:	b7 07       	cpc	r27, r23
    94ba:	10 f0       	brcs	.+4      	; 0x94c0 <__udivmodhi4_ep>
    94bc:	a6 1b       	sub	r26, r22
    94be:	b7 0b       	sbc	r27, r23

000094c0 <__udivmodhi4_ep>:
    94c0:	88 1f       	adc	r24, r24
    94c2:	99 1f       	adc	r25, r25
    94c4:	5a 95       	dec	r21
    94c6:	a9 f7       	brne	.-22     	; 0x94b2 <__udivmodhi4_loop>
    94c8:	80 95       	com	r24
    94ca:	90 95       	com	r25
    94cc:	bc 01       	movw	r22, r24
    94ce:	cd 01       	movw	r24, r26
    94d0:	08 95       	ret

000094d2 <malloc>:
    94d2:	0f 93       	push	r16
    94d4:	1f 93       	push	r17
    94d6:	cf 93       	push	r28
    94d8:	df 93       	push	r29
    94da:	82 30       	cpi	r24, 0x02	; 2
    94dc:	91 05       	cpc	r25, r1
    94de:	10 f4       	brcc	.+4      	; 0x94e4 <malloc+0x12>
    94e0:	82 e0       	ldi	r24, 0x02	; 2
    94e2:	90 e0       	ldi	r25, 0x00	; 0
    94e4:	e0 91 16 1d 	lds	r30, 0x1D16	; 0x801d16 <__flp>
    94e8:	f0 91 17 1d 	lds	r31, 0x1D17	; 0x801d17 <__flp+0x1>
    94ec:	20 e0       	ldi	r18, 0x00	; 0
    94ee:	30 e0       	ldi	r19, 0x00	; 0
    94f0:	a0 e0       	ldi	r26, 0x00	; 0
    94f2:	b0 e0       	ldi	r27, 0x00	; 0
    94f4:	30 97       	sbiw	r30, 0x00	; 0
    94f6:	19 f1       	breq	.+70     	; 0x953e <malloc+0x6c>
    94f8:	40 81       	ld	r20, Z
    94fa:	51 81       	ldd	r21, Z+1	; 0x01
    94fc:	02 81       	ldd	r16, Z+2	; 0x02
    94fe:	13 81       	ldd	r17, Z+3	; 0x03
    9500:	48 17       	cp	r20, r24
    9502:	59 07       	cpc	r21, r25
    9504:	c8 f0       	brcs	.+50     	; 0x9538 <malloc+0x66>
    9506:	84 17       	cp	r24, r20
    9508:	95 07       	cpc	r25, r21
    950a:	69 f4       	brne	.+26     	; 0x9526 <malloc+0x54>
    950c:	10 97       	sbiw	r26, 0x00	; 0
    950e:	31 f0       	breq	.+12     	; 0x951c <malloc+0x4a>
    9510:	12 96       	adiw	r26, 0x02	; 2
    9512:	0c 93       	st	X, r16
    9514:	12 97       	sbiw	r26, 0x02	; 2
    9516:	13 96       	adiw	r26, 0x03	; 3
    9518:	1c 93       	st	X, r17
    951a:	27 c0       	rjmp	.+78     	; 0x956a <malloc+0x98>
    951c:	00 93 16 1d 	sts	0x1D16, r16	; 0x801d16 <__flp>
    9520:	10 93 17 1d 	sts	0x1D17, r17	; 0x801d17 <__flp+0x1>
    9524:	22 c0       	rjmp	.+68     	; 0x956a <malloc+0x98>
    9526:	21 15       	cp	r18, r1
    9528:	31 05       	cpc	r19, r1
    952a:	19 f0       	breq	.+6      	; 0x9532 <malloc+0x60>
    952c:	42 17       	cp	r20, r18
    952e:	53 07       	cpc	r21, r19
    9530:	18 f4       	brcc	.+6      	; 0x9538 <malloc+0x66>
    9532:	9a 01       	movw	r18, r20
    9534:	bd 01       	movw	r22, r26
    9536:	ef 01       	movw	r28, r30
    9538:	df 01       	movw	r26, r30
    953a:	f8 01       	movw	r30, r16
    953c:	db cf       	rjmp	.-74     	; 0x94f4 <malloc+0x22>
    953e:	21 15       	cp	r18, r1
    9540:	31 05       	cpc	r19, r1
    9542:	f9 f0       	breq	.+62     	; 0x9582 <malloc+0xb0>
    9544:	28 1b       	sub	r18, r24
    9546:	39 0b       	sbc	r19, r25
    9548:	24 30       	cpi	r18, 0x04	; 4
    954a:	31 05       	cpc	r19, r1
    954c:	80 f4       	brcc	.+32     	; 0x956e <malloc+0x9c>
    954e:	8a 81       	ldd	r24, Y+2	; 0x02
    9550:	9b 81       	ldd	r25, Y+3	; 0x03
    9552:	61 15       	cp	r22, r1
    9554:	71 05       	cpc	r23, r1
    9556:	21 f0       	breq	.+8      	; 0x9560 <malloc+0x8e>
    9558:	fb 01       	movw	r30, r22
    955a:	93 83       	std	Z+3, r25	; 0x03
    955c:	82 83       	std	Z+2, r24	; 0x02
    955e:	04 c0       	rjmp	.+8      	; 0x9568 <malloc+0x96>
    9560:	90 93 17 1d 	sts	0x1D17, r25	; 0x801d17 <__flp+0x1>
    9564:	80 93 16 1d 	sts	0x1D16, r24	; 0x801d16 <__flp>
    9568:	fe 01       	movw	r30, r28
    956a:	32 96       	adiw	r30, 0x02	; 2
    956c:	44 c0       	rjmp	.+136    	; 0x95f6 <malloc+0x124>
    956e:	fe 01       	movw	r30, r28
    9570:	e2 0f       	add	r30, r18
    9572:	f3 1f       	adc	r31, r19
    9574:	81 93       	st	Z+, r24
    9576:	91 93       	st	Z+, r25
    9578:	22 50       	subi	r18, 0x02	; 2
    957a:	31 09       	sbc	r19, r1
    957c:	39 83       	std	Y+1, r19	; 0x01
    957e:	28 83       	st	Y, r18
    9580:	3a c0       	rjmp	.+116    	; 0x95f6 <malloc+0x124>
    9582:	20 91 14 1d 	lds	r18, 0x1D14	; 0x801d14 <__brkval>
    9586:	30 91 15 1d 	lds	r19, 0x1D15	; 0x801d15 <__brkval+0x1>
    958a:	23 2b       	or	r18, r19
    958c:	41 f4       	brne	.+16     	; 0x959e <malloc+0xcc>
    958e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    9592:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    9596:	30 93 15 1d 	sts	0x1D15, r19	; 0x801d15 <__brkval+0x1>
    959a:	20 93 14 1d 	sts	0x1D14, r18	; 0x801d14 <__brkval>
    959e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    95a2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    95a6:	21 15       	cp	r18, r1
    95a8:	31 05       	cpc	r19, r1
    95aa:	41 f4       	brne	.+16     	; 0x95bc <malloc+0xea>
    95ac:	2d b7       	in	r18, 0x3d	; 61
    95ae:	3e b7       	in	r19, 0x3e	; 62
    95b0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    95b4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    95b8:	24 1b       	sub	r18, r20
    95ba:	35 0b       	sbc	r19, r21
    95bc:	e0 91 14 1d 	lds	r30, 0x1D14	; 0x801d14 <__brkval>
    95c0:	f0 91 15 1d 	lds	r31, 0x1D15	; 0x801d15 <__brkval+0x1>
    95c4:	e2 17       	cp	r30, r18
    95c6:	f3 07       	cpc	r31, r19
    95c8:	a0 f4       	brcc	.+40     	; 0x95f2 <malloc+0x120>
    95ca:	2e 1b       	sub	r18, r30
    95cc:	3f 0b       	sbc	r19, r31
    95ce:	28 17       	cp	r18, r24
    95d0:	39 07       	cpc	r19, r25
    95d2:	78 f0       	brcs	.+30     	; 0x95f2 <malloc+0x120>
    95d4:	ac 01       	movw	r20, r24
    95d6:	4e 5f       	subi	r20, 0xFE	; 254
    95d8:	5f 4f       	sbci	r21, 0xFF	; 255
    95da:	24 17       	cp	r18, r20
    95dc:	35 07       	cpc	r19, r21
    95de:	48 f0       	brcs	.+18     	; 0x95f2 <malloc+0x120>
    95e0:	4e 0f       	add	r20, r30
    95e2:	5f 1f       	adc	r21, r31
    95e4:	50 93 15 1d 	sts	0x1D15, r21	; 0x801d15 <__brkval+0x1>
    95e8:	40 93 14 1d 	sts	0x1D14, r20	; 0x801d14 <__brkval>
    95ec:	81 93       	st	Z+, r24
    95ee:	91 93       	st	Z+, r25
    95f0:	02 c0       	rjmp	.+4      	; 0x95f6 <malloc+0x124>
    95f2:	e0 e0       	ldi	r30, 0x00	; 0
    95f4:	f0 e0       	ldi	r31, 0x00	; 0
    95f6:	cf 01       	movw	r24, r30
    95f8:	df 91       	pop	r29
    95fa:	cf 91       	pop	r28
    95fc:	1f 91       	pop	r17
    95fe:	0f 91       	pop	r16
    9600:	08 95       	ret

00009602 <free>:
    9602:	cf 93       	push	r28
    9604:	df 93       	push	r29
    9606:	00 97       	sbiw	r24, 0x00	; 0
    9608:	09 f4       	brne	.+2      	; 0x960c <free+0xa>
    960a:	81 c0       	rjmp	.+258    	; 0x970e <free+0x10c>
    960c:	fc 01       	movw	r30, r24
    960e:	32 97       	sbiw	r30, 0x02	; 2
    9610:	13 82       	std	Z+3, r1	; 0x03
    9612:	12 82       	std	Z+2, r1	; 0x02
    9614:	a0 91 16 1d 	lds	r26, 0x1D16	; 0x801d16 <__flp>
    9618:	b0 91 17 1d 	lds	r27, 0x1D17	; 0x801d17 <__flp+0x1>
    961c:	10 97       	sbiw	r26, 0x00	; 0
    961e:	81 f4       	brne	.+32     	; 0x9640 <free+0x3e>
    9620:	20 81       	ld	r18, Z
    9622:	31 81       	ldd	r19, Z+1	; 0x01
    9624:	82 0f       	add	r24, r18
    9626:	93 1f       	adc	r25, r19
    9628:	20 91 14 1d 	lds	r18, 0x1D14	; 0x801d14 <__brkval>
    962c:	30 91 15 1d 	lds	r19, 0x1D15	; 0x801d15 <__brkval+0x1>
    9630:	28 17       	cp	r18, r24
    9632:	39 07       	cpc	r19, r25
    9634:	51 f5       	brne	.+84     	; 0x968a <free+0x88>
    9636:	f0 93 15 1d 	sts	0x1D15, r31	; 0x801d15 <__brkval+0x1>
    963a:	e0 93 14 1d 	sts	0x1D14, r30	; 0x801d14 <__brkval>
    963e:	67 c0       	rjmp	.+206    	; 0x970e <free+0x10c>
    9640:	ed 01       	movw	r28, r26
    9642:	20 e0       	ldi	r18, 0x00	; 0
    9644:	30 e0       	ldi	r19, 0x00	; 0
    9646:	ce 17       	cp	r28, r30
    9648:	df 07       	cpc	r29, r31
    964a:	40 f4       	brcc	.+16     	; 0x965c <free+0x5a>
    964c:	4a 81       	ldd	r20, Y+2	; 0x02
    964e:	5b 81       	ldd	r21, Y+3	; 0x03
    9650:	9e 01       	movw	r18, r28
    9652:	41 15       	cp	r20, r1
    9654:	51 05       	cpc	r21, r1
    9656:	f1 f0       	breq	.+60     	; 0x9694 <free+0x92>
    9658:	ea 01       	movw	r28, r20
    965a:	f5 cf       	rjmp	.-22     	; 0x9646 <free+0x44>
    965c:	d3 83       	std	Z+3, r29	; 0x03
    965e:	c2 83       	std	Z+2, r28	; 0x02
    9660:	40 81       	ld	r20, Z
    9662:	51 81       	ldd	r21, Z+1	; 0x01
    9664:	84 0f       	add	r24, r20
    9666:	95 1f       	adc	r25, r21
    9668:	c8 17       	cp	r28, r24
    966a:	d9 07       	cpc	r29, r25
    966c:	59 f4       	brne	.+22     	; 0x9684 <free+0x82>
    966e:	88 81       	ld	r24, Y
    9670:	99 81       	ldd	r25, Y+1	; 0x01
    9672:	84 0f       	add	r24, r20
    9674:	95 1f       	adc	r25, r21
    9676:	02 96       	adiw	r24, 0x02	; 2
    9678:	91 83       	std	Z+1, r25	; 0x01
    967a:	80 83       	st	Z, r24
    967c:	8a 81       	ldd	r24, Y+2	; 0x02
    967e:	9b 81       	ldd	r25, Y+3	; 0x03
    9680:	93 83       	std	Z+3, r25	; 0x03
    9682:	82 83       	std	Z+2, r24	; 0x02
    9684:	21 15       	cp	r18, r1
    9686:	31 05       	cpc	r19, r1
    9688:	29 f4       	brne	.+10     	; 0x9694 <free+0x92>
    968a:	f0 93 17 1d 	sts	0x1D17, r31	; 0x801d17 <__flp+0x1>
    968e:	e0 93 16 1d 	sts	0x1D16, r30	; 0x801d16 <__flp>
    9692:	3d c0       	rjmp	.+122    	; 0x970e <free+0x10c>
    9694:	e9 01       	movw	r28, r18
    9696:	fb 83       	std	Y+3, r31	; 0x03
    9698:	ea 83       	std	Y+2, r30	; 0x02
    969a:	49 91       	ld	r20, Y+
    969c:	59 91       	ld	r21, Y+
    969e:	c4 0f       	add	r28, r20
    96a0:	d5 1f       	adc	r29, r21
    96a2:	ec 17       	cp	r30, r28
    96a4:	fd 07       	cpc	r31, r29
    96a6:	61 f4       	brne	.+24     	; 0x96c0 <free+0xbe>
    96a8:	80 81       	ld	r24, Z
    96aa:	91 81       	ldd	r25, Z+1	; 0x01
    96ac:	84 0f       	add	r24, r20
    96ae:	95 1f       	adc	r25, r21
    96b0:	02 96       	adiw	r24, 0x02	; 2
    96b2:	e9 01       	movw	r28, r18
    96b4:	99 83       	std	Y+1, r25	; 0x01
    96b6:	88 83       	st	Y, r24
    96b8:	82 81       	ldd	r24, Z+2	; 0x02
    96ba:	93 81       	ldd	r25, Z+3	; 0x03
    96bc:	9b 83       	std	Y+3, r25	; 0x03
    96be:	8a 83       	std	Y+2, r24	; 0x02
    96c0:	e0 e0       	ldi	r30, 0x00	; 0
    96c2:	f0 e0       	ldi	r31, 0x00	; 0
    96c4:	12 96       	adiw	r26, 0x02	; 2
    96c6:	8d 91       	ld	r24, X+
    96c8:	9c 91       	ld	r25, X
    96ca:	13 97       	sbiw	r26, 0x03	; 3
    96cc:	00 97       	sbiw	r24, 0x00	; 0
    96ce:	19 f0       	breq	.+6      	; 0x96d6 <free+0xd4>
    96d0:	fd 01       	movw	r30, r26
    96d2:	dc 01       	movw	r26, r24
    96d4:	f7 cf       	rjmp	.-18     	; 0x96c4 <free+0xc2>
    96d6:	8d 91       	ld	r24, X+
    96d8:	9c 91       	ld	r25, X
    96da:	11 97       	sbiw	r26, 0x01	; 1
    96dc:	9d 01       	movw	r18, r26
    96de:	2e 5f       	subi	r18, 0xFE	; 254
    96e0:	3f 4f       	sbci	r19, 0xFF	; 255
    96e2:	82 0f       	add	r24, r18
    96e4:	93 1f       	adc	r25, r19
    96e6:	20 91 14 1d 	lds	r18, 0x1D14	; 0x801d14 <__brkval>
    96ea:	30 91 15 1d 	lds	r19, 0x1D15	; 0x801d15 <__brkval+0x1>
    96ee:	28 17       	cp	r18, r24
    96f0:	39 07       	cpc	r19, r25
    96f2:	69 f4       	brne	.+26     	; 0x970e <free+0x10c>
    96f4:	30 97       	sbiw	r30, 0x00	; 0
    96f6:	29 f4       	brne	.+10     	; 0x9702 <free+0x100>
    96f8:	10 92 17 1d 	sts	0x1D17, r1	; 0x801d17 <__flp+0x1>
    96fc:	10 92 16 1d 	sts	0x1D16, r1	; 0x801d16 <__flp>
    9700:	02 c0       	rjmp	.+4      	; 0x9706 <free+0x104>
    9702:	13 82       	std	Z+3, r1	; 0x03
    9704:	12 82       	std	Z+2, r1	; 0x02
    9706:	b0 93 15 1d 	sts	0x1D15, r27	; 0x801d15 <__brkval+0x1>
    970a:	a0 93 14 1d 	sts	0x1D14, r26	; 0x801d14 <__brkval>
    970e:	df 91       	pop	r29
    9710:	cf 91       	pop	r28
    9712:	08 95       	ret

00009714 <abort>:
    9714:	81 e0       	ldi	r24, 0x01	; 1
    9716:	90 e0       	ldi	r25, 0x00	; 0
    9718:	f8 94       	cli
    971a:	59 c2       	rjmp	.+1202   	; 0x9bce <_exit>

0000971c <__ftoa_engine>:
    971c:	28 30       	cpi	r18, 0x08	; 8
    971e:	08 f0       	brcs	.+2      	; 0x9722 <__ftoa_engine+0x6>
    9720:	27 e0       	ldi	r18, 0x07	; 7
    9722:	33 27       	eor	r19, r19
    9724:	da 01       	movw	r26, r20
    9726:	99 0f       	add	r25, r25
    9728:	31 1d       	adc	r19, r1
    972a:	87 fd       	sbrc	r24, 7
    972c:	91 60       	ori	r25, 0x01	; 1
    972e:	00 96       	adiw	r24, 0x00	; 0
    9730:	61 05       	cpc	r22, r1
    9732:	71 05       	cpc	r23, r1
    9734:	39 f4       	brne	.+14     	; 0x9744 <__ftoa_engine+0x28>
    9736:	32 60       	ori	r19, 0x02	; 2
    9738:	2e 5f       	subi	r18, 0xFE	; 254
    973a:	3d 93       	st	X+, r19
    973c:	30 e3       	ldi	r19, 0x30	; 48
    973e:	2a 95       	dec	r18
    9740:	e1 f7       	brne	.-8      	; 0x973a <__ftoa_engine+0x1e>
    9742:	08 95       	ret
    9744:	9f 3f       	cpi	r25, 0xFF	; 255
    9746:	30 f0       	brcs	.+12     	; 0x9754 <__ftoa_engine+0x38>
    9748:	80 38       	cpi	r24, 0x80	; 128
    974a:	71 05       	cpc	r23, r1
    974c:	61 05       	cpc	r22, r1
    974e:	09 f0       	breq	.+2      	; 0x9752 <__ftoa_engine+0x36>
    9750:	3c 5f       	subi	r19, 0xFC	; 252
    9752:	3c 5f       	subi	r19, 0xFC	; 252
    9754:	3d 93       	st	X+, r19
    9756:	91 30       	cpi	r25, 0x01	; 1
    9758:	08 f0       	brcs	.+2      	; 0x975c <__ftoa_engine+0x40>
    975a:	80 68       	ori	r24, 0x80	; 128
    975c:	91 1d       	adc	r25, r1
    975e:	df 93       	push	r29
    9760:	cf 93       	push	r28
    9762:	1f 93       	push	r17
    9764:	0f 93       	push	r16
    9766:	ff 92       	push	r15
    9768:	ef 92       	push	r14
    976a:	19 2f       	mov	r17, r25
    976c:	98 7f       	andi	r25, 0xF8	; 248
    976e:	96 95       	lsr	r25
    9770:	e9 2f       	mov	r30, r25
    9772:	96 95       	lsr	r25
    9774:	96 95       	lsr	r25
    9776:	e9 0f       	add	r30, r25
    9778:	ff 27       	eor	r31, r31
    977a:	e4 50       	subi	r30, 0x04	; 4
    977c:	fe 4f       	sbci	r31, 0xFE	; 254
    977e:	99 27       	eor	r25, r25
    9780:	33 27       	eor	r19, r19
    9782:	ee 24       	eor	r14, r14
    9784:	ff 24       	eor	r15, r15
    9786:	a7 01       	movw	r20, r14
    9788:	e7 01       	movw	r28, r14
    978a:	05 90       	lpm	r0, Z+
    978c:	08 94       	sec
    978e:	07 94       	ror	r0
    9790:	28 f4       	brcc	.+10     	; 0x979c <__ftoa_engine+0x80>
    9792:	36 0f       	add	r19, r22
    9794:	e7 1e       	adc	r14, r23
    9796:	f8 1e       	adc	r15, r24
    9798:	49 1f       	adc	r20, r25
    979a:	51 1d       	adc	r21, r1
    979c:	66 0f       	add	r22, r22
    979e:	77 1f       	adc	r23, r23
    97a0:	88 1f       	adc	r24, r24
    97a2:	99 1f       	adc	r25, r25
    97a4:	06 94       	lsr	r0
    97a6:	a1 f7       	brne	.-24     	; 0x9790 <__ftoa_engine+0x74>
    97a8:	05 90       	lpm	r0, Z+
    97aa:	07 94       	ror	r0
    97ac:	28 f4       	brcc	.+10     	; 0x97b8 <__ftoa_engine+0x9c>
    97ae:	e7 0e       	add	r14, r23
    97b0:	f8 1e       	adc	r15, r24
    97b2:	49 1f       	adc	r20, r25
    97b4:	56 1f       	adc	r21, r22
    97b6:	c1 1d       	adc	r28, r1
    97b8:	77 0f       	add	r23, r23
    97ba:	88 1f       	adc	r24, r24
    97bc:	99 1f       	adc	r25, r25
    97be:	66 1f       	adc	r22, r22
    97c0:	06 94       	lsr	r0
    97c2:	a1 f7       	brne	.-24     	; 0x97ac <__ftoa_engine+0x90>
    97c4:	05 90       	lpm	r0, Z+
    97c6:	07 94       	ror	r0
    97c8:	28 f4       	brcc	.+10     	; 0x97d4 <__ftoa_engine+0xb8>
    97ca:	f8 0e       	add	r15, r24
    97cc:	49 1f       	adc	r20, r25
    97ce:	56 1f       	adc	r21, r22
    97d0:	c7 1f       	adc	r28, r23
    97d2:	d1 1d       	adc	r29, r1
    97d4:	88 0f       	add	r24, r24
    97d6:	99 1f       	adc	r25, r25
    97d8:	66 1f       	adc	r22, r22
    97da:	77 1f       	adc	r23, r23
    97dc:	06 94       	lsr	r0
    97de:	a1 f7       	brne	.-24     	; 0x97c8 <__ftoa_engine+0xac>
    97e0:	05 90       	lpm	r0, Z+
    97e2:	07 94       	ror	r0
    97e4:	20 f4       	brcc	.+8      	; 0x97ee <__ftoa_engine+0xd2>
    97e6:	49 0f       	add	r20, r25
    97e8:	56 1f       	adc	r21, r22
    97ea:	c7 1f       	adc	r28, r23
    97ec:	d8 1f       	adc	r29, r24
    97ee:	99 0f       	add	r25, r25
    97f0:	66 1f       	adc	r22, r22
    97f2:	77 1f       	adc	r23, r23
    97f4:	88 1f       	adc	r24, r24
    97f6:	06 94       	lsr	r0
    97f8:	a9 f7       	brne	.-22     	; 0x97e4 <__ftoa_engine+0xc8>
    97fa:	84 91       	lpm	r24, Z
    97fc:	10 95       	com	r17
    97fe:	17 70       	andi	r17, 0x07	; 7
    9800:	41 f0       	breq	.+16     	; 0x9812 <__ftoa_engine+0xf6>
    9802:	d6 95       	lsr	r29
    9804:	c7 95       	ror	r28
    9806:	57 95       	ror	r21
    9808:	47 95       	ror	r20
    980a:	f7 94       	ror	r15
    980c:	e7 94       	ror	r14
    980e:	1a 95       	dec	r17
    9810:	c1 f7       	brne	.-16     	; 0x9802 <__ftoa_engine+0xe6>
    9812:	e2 ea       	ldi	r30, 0xA2	; 162
    9814:	f1 e0       	ldi	r31, 0x01	; 1
    9816:	68 94       	set
    9818:	15 90       	lpm	r1, Z+
    981a:	15 91       	lpm	r17, Z+
    981c:	35 91       	lpm	r19, Z+
    981e:	65 91       	lpm	r22, Z+
    9820:	95 91       	lpm	r25, Z+
    9822:	05 90       	lpm	r0, Z+
    9824:	7f e2       	ldi	r23, 0x2F	; 47
    9826:	73 95       	inc	r23
    9828:	e1 18       	sub	r14, r1
    982a:	f1 0a       	sbc	r15, r17
    982c:	43 0b       	sbc	r20, r19
    982e:	56 0b       	sbc	r21, r22
    9830:	c9 0b       	sbc	r28, r25
    9832:	d0 09       	sbc	r29, r0
    9834:	c0 f7       	brcc	.-16     	; 0x9826 <__ftoa_engine+0x10a>
    9836:	e1 0c       	add	r14, r1
    9838:	f1 1e       	adc	r15, r17
    983a:	43 1f       	adc	r20, r19
    983c:	56 1f       	adc	r21, r22
    983e:	c9 1f       	adc	r28, r25
    9840:	d0 1d       	adc	r29, r0
    9842:	7e f4       	brtc	.+30     	; 0x9862 <__ftoa_engine+0x146>
    9844:	70 33       	cpi	r23, 0x30	; 48
    9846:	11 f4       	brne	.+4      	; 0x984c <__ftoa_engine+0x130>
    9848:	8a 95       	dec	r24
    984a:	e6 cf       	rjmp	.-52     	; 0x9818 <__ftoa_engine+0xfc>
    984c:	e8 94       	clt
    984e:	01 50       	subi	r16, 0x01	; 1
    9850:	30 f0       	brcs	.+12     	; 0x985e <__ftoa_engine+0x142>
    9852:	08 0f       	add	r16, r24
    9854:	0a f4       	brpl	.+2      	; 0x9858 <__ftoa_engine+0x13c>
    9856:	00 27       	eor	r16, r16
    9858:	02 17       	cp	r16, r18
    985a:	08 f4       	brcc	.+2      	; 0x985e <__ftoa_engine+0x142>
    985c:	20 2f       	mov	r18, r16
    985e:	23 95       	inc	r18
    9860:	02 2f       	mov	r16, r18
    9862:	7a 33       	cpi	r23, 0x3A	; 58
    9864:	28 f0       	brcs	.+10     	; 0x9870 <__ftoa_engine+0x154>
    9866:	79 e3       	ldi	r23, 0x39	; 57
    9868:	7d 93       	st	X+, r23
    986a:	2a 95       	dec	r18
    986c:	e9 f7       	brne	.-6      	; 0x9868 <__ftoa_engine+0x14c>
    986e:	10 c0       	rjmp	.+32     	; 0x9890 <__ftoa_engine+0x174>
    9870:	7d 93       	st	X+, r23
    9872:	2a 95       	dec	r18
    9874:	89 f6       	brne	.-94     	; 0x9818 <__ftoa_engine+0xfc>
    9876:	06 94       	lsr	r0
    9878:	97 95       	ror	r25
    987a:	67 95       	ror	r22
    987c:	37 95       	ror	r19
    987e:	17 95       	ror	r17
    9880:	17 94       	ror	r1
    9882:	e1 18       	sub	r14, r1
    9884:	f1 0a       	sbc	r15, r17
    9886:	43 0b       	sbc	r20, r19
    9888:	56 0b       	sbc	r21, r22
    988a:	c9 0b       	sbc	r28, r25
    988c:	d0 09       	sbc	r29, r0
    988e:	98 f0       	brcs	.+38     	; 0x98b6 <__ftoa_engine+0x19a>
    9890:	23 95       	inc	r18
    9892:	7e 91       	ld	r23, -X
    9894:	73 95       	inc	r23
    9896:	7a 33       	cpi	r23, 0x3A	; 58
    9898:	08 f0       	brcs	.+2      	; 0x989c <__ftoa_engine+0x180>
    989a:	70 e3       	ldi	r23, 0x30	; 48
    989c:	7c 93       	st	X, r23
    989e:	20 13       	cpse	r18, r16
    98a0:	b8 f7       	brcc	.-18     	; 0x9890 <__ftoa_engine+0x174>
    98a2:	7e 91       	ld	r23, -X
    98a4:	70 61       	ori	r23, 0x10	; 16
    98a6:	7d 93       	st	X+, r23
    98a8:	30 f0       	brcs	.+12     	; 0x98b6 <__ftoa_engine+0x19a>
    98aa:	83 95       	inc	r24
    98ac:	71 e3       	ldi	r23, 0x31	; 49
    98ae:	7d 93       	st	X+, r23
    98b0:	70 e3       	ldi	r23, 0x30	; 48
    98b2:	2a 95       	dec	r18
    98b4:	e1 f7       	brne	.-8      	; 0x98ae <__ftoa_engine+0x192>
    98b6:	11 24       	eor	r1, r1
    98b8:	ef 90       	pop	r14
    98ba:	ff 90       	pop	r15
    98bc:	0f 91       	pop	r16
    98be:	1f 91       	pop	r17
    98c0:	cf 91       	pop	r28
    98c2:	df 91       	pop	r29
    98c4:	99 27       	eor	r25, r25
    98c6:	87 fd       	sbrc	r24, 7
    98c8:	90 95       	com	r25
    98ca:	08 95       	ret

000098cc <strnlen_P>:
    98cc:	fc 01       	movw	r30, r24
    98ce:	05 90       	lpm	r0, Z+
    98d0:	61 50       	subi	r22, 0x01	; 1
    98d2:	70 40       	sbci	r23, 0x00	; 0
    98d4:	01 10       	cpse	r0, r1
    98d6:	d8 f7       	brcc	.-10     	; 0x98ce <strnlen_P+0x2>
    98d8:	80 95       	com	r24
    98da:	90 95       	com	r25
    98dc:	8e 0f       	add	r24, r30
    98de:	9f 1f       	adc	r25, r31
    98e0:	08 95       	ret

000098e2 <memcpy>:
    98e2:	fb 01       	movw	r30, r22
    98e4:	dc 01       	movw	r26, r24
    98e6:	02 c0       	rjmp	.+4      	; 0x98ec <memcpy+0xa>
    98e8:	01 90       	ld	r0, Z+
    98ea:	0d 92       	st	X+, r0
    98ec:	41 50       	subi	r20, 0x01	; 1
    98ee:	50 40       	sbci	r21, 0x00	; 0
    98f0:	d8 f7       	brcc	.-10     	; 0x98e8 <memcpy+0x6>
    98f2:	08 95       	ret

000098f4 <memset>:
    98f4:	dc 01       	movw	r26, r24
    98f6:	01 c0       	rjmp	.+2      	; 0x98fa <memset+0x6>
    98f8:	6d 93       	st	X+, r22
    98fa:	41 50       	subi	r20, 0x01	; 1
    98fc:	50 40       	sbci	r21, 0x00	; 0
    98fe:	e0 f7       	brcc	.-8      	; 0x98f8 <memset+0x4>
    9900:	08 95       	ret

00009902 <strcasestr>:
    9902:	fb 01       	movw	r30, r22
    9904:	51 91       	ld	r21, Z+
    9906:	55 23       	and	r21, r21
    9908:	b1 f0       	breq	.+44     	; 0x9936 <strcasestr+0x34>
    990a:	bf 01       	movw	r22, r30
    990c:	dc 01       	movw	r26, r24
    990e:	05 2e       	mov	r0, r21
    9910:	4d 91       	ld	r20, X+
    9912:	44 23       	and	r20, r20
    9914:	69 f0       	breq	.+26     	; 0x9930 <strcasestr+0x2e>
    9916:	10 d0       	rcall	.+32     	; 0x9938 <strcasestr+0x36>
    9918:	d9 f7       	brne	.-10     	; 0x9910 <strcasestr+0xe>
    991a:	cd 01       	movw	r24, r26
    991c:	01 90       	ld	r0, Z+
    991e:	00 20       	and	r0, r0
    9920:	49 f0       	breq	.+18     	; 0x9934 <strcasestr+0x32>
    9922:	4d 91       	ld	r20, X+
    9924:	41 11       	cpse	r20, r1
    9926:	08 d0       	rcall	.+16     	; 0x9938 <strcasestr+0x36>
    9928:	c9 f3       	breq	.-14     	; 0x991c <strcasestr+0x1a>
    992a:	fb 01       	movw	r30, r22
    992c:	41 11       	cpse	r20, r1
    992e:	ee cf       	rjmp	.-36     	; 0x990c <strcasestr+0xa>
    9930:	81 e0       	ldi	r24, 0x01	; 1
    9932:	90 e0       	ldi	r25, 0x00	; 0
    9934:	01 97       	sbiw	r24, 0x01	; 1
    9936:	08 95       	ret
    9938:	40 25       	eor	r20, r0
    993a:	39 f0       	breq	.+14     	; 0x994a <strcasestr+0x48>
    993c:	40 32       	cpi	r20, 0x20	; 32
    993e:	29 f4       	brne	.+10     	; 0x994a <strcasestr+0x48>
    9940:	40 29       	or	r20, r0
    9942:	4b 57       	subi	r20, 0x7B	; 123
    9944:	46 5e       	subi	r20, 0xE6	; 230
    9946:	08 f0       	brcs	.+2      	; 0x994a <strcasestr+0x48>
    9948:	18 94       	sez
    994a:	08 95       	ret

0000994c <strcat>:
    994c:	fb 01       	movw	r30, r22
    994e:	dc 01       	movw	r26, r24
    9950:	0d 90       	ld	r0, X+
    9952:	00 20       	and	r0, r0
    9954:	e9 f7       	brne	.-6      	; 0x9950 <strcat+0x4>
    9956:	11 97       	sbiw	r26, 0x01	; 1
    9958:	01 90       	ld	r0, Z+
    995a:	0d 92       	st	X+, r0
    995c:	00 20       	and	r0, r0
    995e:	e1 f7       	brne	.-8      	; 0x9958 <strcat+0xc>
    9960:	08 95       	ret

00009962 <strcpy>:
    9962:	fb 01       	movw	r30, r22
    9964:	dc 01       	movw	r26, r24
    9966:	01 90       	ld	r0, Z+
    9968:	0d 92       	st	X+, r0
    996a:	00 20       	and	r0, r0
    996c:	e1 f7       	brne	.-8      	; 0x9966 <strcpy+0x4>
    996e:	08 95       	ret

00009970 <strncasecmp>:
    9970:	fb 01       	movw	r30, r22
    9972:	dc 01       	movw	r26, r24
    9974:	41 50       	subi	r20, 0x01	; 1
    9976:	50 40       	sbci	r21, 0x00	; 0
    9978:	88 f0       	brcs	.+34     	; 0x999c <strncasecmp+0x2c>
    997a:	8d 91       	ld	r24, X+
    997c:	81 34       	cpi	r24, 0x41	; 65
    997e:	1c f0       	brlt	.+6      	; 0x9986 <strncasecmp+0x16>
    9980:	8b 35       	cpi	r24, 0x5B	; 91
    9982:	0c f4       	brge	.+2      	; 0x9986 <strncasecmp+0x16>
    9984:	80 5e       	subi	r24, 0xE0	; 224
    9986:	61 91       	ld	r22, Z+
    9988:	61 34       	cpi	r22, 0x41	; 65
    998a:	1c f0       	brlt	.+6      	; 0x9992 <strncasecmp+0x22>
    998c:	6b 35       	cpi	r22, 0x5B	; 91
    998e:	0c f4       	brge	.+2      	; 0x9992 <strncasecmp+0x22>
    9990:	60 5e       	subi	r22, 0xE0	; 224
    9992:	86 1b       	sub	r24, r22
    9994:	61 11       	cpse	r22, r1
    9996:	71 f3       	breq	.-36     	; 0x9974 <strncasecmp+0x4>
    9998:	99 0b       	sbc	r25, r25
    999a:	08 95       	ret
    999c:	88 1b       	sub	r24, r24
    999e:	fc cf       	rjmp	.-8      	; 0x9998 <strncasecmp+0x28>

000099a0 <strnlen>:
    99a0:	fc 01       	movw	r30, r24
    99a2:	61 50       	subi	r22, 0x01	; 1
    99a4:	70 40       	sbci	r23, 0x00	; 0
    99a6:	01 90       	ld	r0, Z+
    99a8:	01 10       	cpse	r0, r1
    99aa:	d8 f7       	brcc	.-10     	; 0x99a2 <strnlen+0x2>
    99ac:	80 95       	com	r24
    99ae:	90 95       	com	r25
    99b0:	8e 0f       	add	r24, r30
    99b2:	9f 1f       	adc	r25, r31
    99b4:	08 95       	ret

000099b6 <fputc>:
    99b6:	0f 93       	push	r16
    99b8:	1f 93       	push	r17
    99ba:	cf 93       	push	r28
    99bc:	df 93       	push	r29
    99be:	fb 01       	movw	r30, r22
    99c0:	23 81       	ldd	r18, Z+3	; 0x03
    99c2:	21 fd       	sbrc	r18, 1
    99c4:	03 c0       	rjmp	.+6      	; 0x99cc <fputc+0x16>
    99c6:	8f ef       	ldi	r24, 0xFF	; 255
    99c8:	9f ef       	ldi	r25, 0xFF	; 255
    99ca:	2c c0       	rjmp	.+88     	; 0x9a24 <fputc+0x6e>
    99cc:	22 ff       	sbrs	r18, 2
    99ce:	16 c0       	rjmp	.+44     	; 0x99fc <fputc+0x46>
    99d0:	46 81       	ldd	r20, Z+6	; 0x06
    99d2:	57 81       	ldd	r21, Z+7	; 0x07
    99d4:	24 81       	ldd	r18, Z+4	; 0x04
    99d6:	35 81       	ldd	r19, Z+5	; 0x05
    99d8:	42 17       	cp	r20, r18
    99da:	53 07       	cpc	r21, r19
    99dc:	44 f4       	brge	.+16     	; 0x99ee <fputc+0x38>
    99de:	a0 81       	ld	r26, Z
    99e0:	b1 81       	ldd	r27, Z+1	; 0x01
    99e2:	9d 01       	movw	r18, r26
    99e4:	2f 5f       	subi	r18, 0xFF	; 255
    99e6:	3f 4f       	sbci	r19, 0xFF	; 255
    99e8:	31 83       	std	Z+1, r19	; 0x01
    99ea:	20 83       	st	Z, r18
    99ec:	8c 93       	st	X, r24
    99ee:	26 81       	ldd	r18, Z+6	; 0x06
    99f0:	37 81       	ldd	r19, Z+7	; 0x07
    99f2:	2f 5f       	subi	r18, 0xFF	; 255
    99f4:	3f 4f       	sbci	r19, 0xFF	; 255
    99f6:	37 83       	std	Z+7, r19	; 0x07
    99f8:	26 83       	std	Z+6, r18	; 0x06
    99fa:	14 c0       	rjmp	.+40     	; 0x9a24 <fputc+0x6e>
    99fc:	8b 01       	movw	r16, r22
    99fe:	ec 01       	movw	r28, r24
    9a00:	fb 01       	movw	r30, r22
    9a02:	00 84       	ldd	r0, Z+8	; 0x08
    9a04:	f1 85       	ldd	r31, Z+9	; 0x09
    9a06:	e0 2d       	mov	r30, r0
    9a08:	19 95       	eicall
    9a0a:	89 2b       	or	r24, r25
    9a0c:	e1 f6       	brne	.-72     	; 0x99c6 <fputc+0x10>
    9a0e:	d8 01       	movw	r26, r16
    9a10:	16 96       	adiw	r26, 0x06	; 6
    9a12:	8d 91       	ld	r24, X+
    9a14:	9c 91       	ld	r25, X
    9a16:	17 97       	sbiw	r26, 0x07	; 7
    9a18:	01 96       	adiw	r24, 0x01	; 1
    9a1a:	17 96       	adiw	r26, 0x07	; 7
    9a1c:	9c 93       	st	X, r25
    9a1e:	8e 93       	st	-X, r24
    9a20:	16 97       	sbiw	r26, 0x06	; 6
    9a22:	ce 01       	movw	r24, r28
    9a24:	df 91       	pop	r29
    9a26:	cf 91       	pop	r28
    9a28:	1f 91       	pop	r17
    9a2a:	0f 91       	pop	r16
    9a2c:	08 95       	ret

00009a2e <printf>:
    9a2e:	cf 93       	push	r28
    9a30:	df 93       	push	r29
    9a32:	cd b7       	in	r28, 0x3d	; 61
    9a34:	de b7       	in	r29, 0x3e	; 62
    9a36:	ae 01       	movw	r20, r28
    9a38:	4a 5f       	subi	r20, 0xFA	; 250
    9a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    9a3c:	fa 01       	movw	r30, r20
    9a3e:	61 91       	ld	r22, Z+
    9a40:	71 91       	ld	r23, Z+
    9a42:	af 01       	movw	r20, r30
    9a44:	80 91 1a 1d 	lds	r24, 0x1D1A	; 0x801d1a <__iob+0x2>
    9a48:	90 91 1b 1d 	lds	r25, 0x1D1B	; 0x801d1b <__iob+0x3>
    9a4c:	38 d8       	rcall	.-3984   	; 0x8abe <vfprintf>
    9a4e:	df 91       	pop	r29
    9a50:	cf 91       	pop	r28
    9a52:	08 95       	ret

00009a54 <puts>:
    9a54:	0f 93       	push	r16
    9a56:	1f 93       	push	r17
    9a58:	cf 93       	push	r28
    9a5a:	df 93       	push	r29
    9a5c:	e0 91 1a 1d 	lds	r30, 0x1D1A	; 0x801d1a <__iob+0x2>
    9a60:	f0 91 1b 1d 	lds	r31, 0x1D1B	; 0x801d1b <__iob+0x3>
    9a64:	23 81       	ldd	r18, Z+3	; 0x03
    9a66:	21 ff       	sbrs	r18, 1
    9a68:	1b c0       	rjmp	.+54     	; 0x9aa0 <puts+0x4c>
    9a6a:	8c 01       	movw	r16, r24
    9a6c:	d0 e0       	ldi	r29, 0x00	; 0
    9a6e:	c0 e0       	ldi	r28, 0x00	; 0
    9a70:	f8 01       	movw	r30, r16
    9a72:	81 91       	ld	r24, Z+
    9a74:	8f 01       	movw	r16, r30
    9a76:	60 91 1a 1d 	lds	r22, 0x1D1A	; 0x801d1a <__iob+0x2>
    9a7a:	70 91 1b 1d 	lds	r23, 0x1D1B	; 0x801d1b <__iob+0x3>
    9a7e:	db 01       	movw	r26, r22
    9a80:	18 96       	adiw	r26, 0x08	; 8
    9a82:	ed 91       	ld	r30, X+
    9a84:	fc 91       	ld	r31, X
    9a86:	19 97       	sbiw	r26, 0x09	; 9
    9a88:	88 23       	and	r24, r24
    9a8a:	31 f0       	breq	.+12     	; 0x9a98 <puts+0x44>
    9a8c:	19 95       	eicall
    9a8e:	89 2b       	or	r24, r25
    9a90:	79 f3       	breq	.-34     	; 0x9a70 <puts+0x1c>
    9a92:	df ef       	ldi	r29, 0xFF	; 255
    9a94:	cf ef       	ldi	r28, 0xFF	; 255
    9a96:	ec cf       	rjmp	.-40     	; 0x9a70 <puts+0x1c>
    9a98:	8a e0       	ldi	r24, 0x0A	; 10
    9a9a:	19 95       	eicall
    9a9c:	89 2b       	or	r24, r25
    9a9e:	19 f0       	breq	.+6      	; 0x9aa6 <puts+0x52>
    9aa0:	8f ef       	ldi	r24, 0xFF	; 255
    9aa2:	9f ef       	ldi	r25, 0xFF	; 255
    9aa4:	02 c0       	rjmp	.+4      	; 0x9aaa <puts+0x56>
    9aa6:	8d 2f       	mov	r24, r29
    9aa8:	9c 2f       	mov	r25, r28
    9aaa:	df 91       	pop	r29
    9aac:	cf 91       	pop	r28
    9aae:	1f 91       	pop	r17
    9ab0:	0f 91       	pop	r16
    9ab2:	08 95       	ret

00009ab4 <sprintf>:
    9ab4:	0f 93       	push	r16
    9ab6:	1f 93       	push	r17
    9ab8:	cf 93       	push	r28
    9aba:	df 93       	push	r29
    9abc:	cd b7       	in	r28, 0x3d	; 61
    9abe:	de b7       	in	r29, 0x3e	; 62
    9ac0:	2e 97       	sbiw	r28, 0x0e	; 14
    9ac2:	0f b6       	in	r0, 0x3f	; 63
    9ac4:	f8 94       	cli
    9ac6:	de bf       	out	0x3e, r29	; 62
    9ac8:	0f be       	out	0x3f, r0	; 63
    9aca:	cd bf       	out	0x3d, r28	; 61
    9acc:	0e 89       	ldd	r16, Y+22	; 0x16
    9ace:	1f 89       	ldd	r17, Y+23	; 0x17
    9ad0:	86 e0       	ldi	r24, 0x06	; 6
    9ad2:	8c 83       	std	Y+4, r24	; 0x04
    9ad4:	1a 83       	std	Y+2, r17	; 0x02
    9ad6:	09 83       	std	Y+1, r16	; 0x01
    9ad8:	8f ef       	ldi	r24, 0xFF	; 255
    9ada:	9f e7       	ldi	r25, 0x7F	; 127
    9adc:	9e 83       	std	Y+6, r25	; 0x06
    9ade:	8d 83       	std	Y+5, r24	; 0x05
    9ae0:	ae 01       	movw	r20, r28
    9ae2:	46 5e       	subi	r20, 0xE6	; 230
    9ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    9ae6:	68 8d       	ldd	r22, Y+24	; 0x18
    9ae8:	79 8d       	ldd	r23, Y+25	; 0x19
    9aea:	ce 01       	movw	r24, r28
    9aec:	01 96       	adiw	r24, 0x01	; 1
    9aee:	0e 94 5f 45 	call	0x8abe	; 0x8abe <vfprintf>
    9af2:	ef 81       	ldd	r30, Y+7	; 0x07
    9af4:	f8 85       	ldd	r31, Y+8	; 0x08
    9af6:	e0 0f       	add	r30, r16
    9af8:	f1 1f       	adc	r31, r17
    9afa:	10 82       	st	Z, r1
    9afc:	2e 96       	adiw	r28, 0x0e	; 14
    9afe:	0f b6       	in	r0, 0x3f	; 63
    9b00:	f8 94       	cli
    9b02:	de bf       	out	0x3e, r29	; 62
    9b04:	0f be       	out	0x3f, r0	; 63
    9b06:	cd bf       	out	0x3d, r28	; 61
    9b08:	df 91       	pop	r29
    9b0a:	cf 91       	pop	r28
    9b0c:	1f 91       	pop	r17
    9b0e:	0f 91       	pop	r16
    9b10:	08 95       	ret

00009b12 <__ultoa_invert>:
    9b12:	fa 01       	movw	r30, r20
    9b14:	aa 27       	eor	r26, r26
    9b16:	28 30       	cpi	r18, 0x08	; 8
    9b18:	51 f1       	breq	.+84     	; 0x9b6e <__ultoa_invert+0x5c>
    9b1a:	20 31       	cpi	r18, 0x10	; 16
    9b1c:	81 f1       	breq	.+96     	; 0x9b7e <__ultoa_invert+0x6c>
    9b1e:	e8 94       	clt
    9b20:	6f 93       	push	r22
    9b22:	6e 7f       	andi	r22, 0xFE	; 254
    9b24:	6e 5f       	subi	r22, 0xFE	; 254
    9b26:	7f 4f       	sbci	r23, 0xFF	; 255
    9b28:	8f 4f       	sbci	r24, 0xFF	; 255
    9b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    9b2c:	af 4f       	sbci	r26, 0xFF	; 255
    9b2e:	b1 e0       	ldi	r27, 0x01	; 1
    9b30:	3e d0       	rcall	.+124    	; 0x9bae <__ultoa_invert+0x9c>
    9b32:	b4 e0       	ldi	r27, 0x04	; 4
    9b34:	3c d0       	rcall	.+120    	; 0x9bae <__ultoa_invert+0x9c>
    9b36:	67 0f       	add	r22, r23
    9b38:	78 1f       	adc	r23, r24
    9b3a:	89 1f       	adc	r24, r25
    9b3c:	9a 1f       	adc	r25, r26
    9b3e:	a1 1d       	adc	r26, r1
    9b40:	68 0f       	add	r22, r24
    9b42:	79 1f       	adc	r23, r25
    9b44:	8a 1f       	adc	r24, r26
    9b46:	91 1d       	adc	r25, r1
    9b48:	a1 1d       	adc	r26, r1
    9b4a:	6a 0f       	add	r22, r26
    9b4c:	71 1d       	adc	r23, r1
    9b4e:	81 1d       	adc	r24, r1
    9b50:	91 1d       	adc	r25, r1
    9b52:	a1 1d       	adc	r26, r1
    9b54:	20 d0       	rcall	.+64     	; 0x9b96 <__ultoa_invert+0x84>
    9b56:	09 f4       	brne	.+2      	; 0x9b5a <__ultoa_invert+0x48>
    9b58:	68 94       	set
    9b5a:	3f 91       	pop	r19
    9b5c:	2a e0       	ldi	r18, 0x0A	; 10
    9b5e:	26 9f       	mul	r18, r22
    9b60:	11 24       	eor	r1, r1
    9b62:	30 19       	sub	r19, r0
    9b64:	30 5d       	subi	r19, 0xD0	; 208
    9b66:	31 93       	st	Z+, r19
    9b68:	de f6       	brtc	.-74     	; 0x9b20 <__ultoa_invert+0xe>
    9b6a:	cf 01       	movw	r24, r30
    9b6c:	08 95       	ret
    9b6e:	46 2f       	mov	r20, r22
    9b70:	47 70       	andi	r20, 0x07	; 7
    9b72:	40 5d       	subi	r20, 0xD0	; 208
    9b74:	41 93       	st	Z+, r20
    9b76:	b3 e0       	ldi	r27, 0x03	; 3
    9b78:	0f d0       	rcall	.+30     	; 0x9b98 <__ultoa_invert+0x86>
    9b7a:	c9 f7       	brne	.-14     	; 0x9b6e <__ultoa_invert+0x5c>
    9b7c:	f6 cf       	rjmp	.-20     	; 0x9b6a <__ultoa_invert+0x58>
    9b7e:	46 2f       	mov	r20, r22
    9b80:	4f 70       	andi	r20, 0x0F	; 15
    9b82:	40 5d       	subi	r20, 0xD0	; 208
    9b84:	4a 33       	cpi	r20, 0x3A	; 58
    9b86:	18 f0       	brcs	.+6      	; 0x9b8e <__ultoa_invert+0x7c>
    9b88:	49 5d       	subi	r20, 0xD9	; 217
    9b8a:	31 fd       	sbrc	r19, 1
    9b8c:	40 52       	subi	r20, 0x20	; 32
    9b8e:	41 93       	st	Z+, r20
    9b90:	02 d0       	rcall	.+4      	; 0x9b96 <__ultoa_invert+0x84>
    9b92:	a9 f7       	brne	.-22     	; 0x9b7e <__ultoa_invert+0x6c>
    9b94:	ea cf       	rjmp	.-44     	; 0x9b6a <__ultoa_invert+0x58>
    9b96:	b4 e0       	ldi	r27, 0x04	; 4
    9b98:	a6 95       	lsr	r26
    9b9a:	97 95       	ror	r25
    9b9c:	87 95       	ror	r24
    9b9e:	77 95       	ror	r23
    9ba0:	67 95       	ror	r22
    9ba2:	ba 95       	dec	r27
    9ba4:	c9 f7       	brne	.-14     	; 0x9b98 <__ultoa_invert+0x86>
    9ba6:	00 97       	sbiw	r24, 0x00	; 0
    9ba8:	61 05       	cpc	r22, r1
    9baa:	71 05       	cpc	r23, r1
    9bac:	08 95       	ret
    9bae:	9b 01       	movw	r18, r22
    9bb0:	ac 01       	movw	r20, r24
    9bb2:	0a 2e       	mov	r0, r26
    9bb4:	06 94       	lsr	r0
    9bb6:	57 95       	ror	r21
    9bb8:	47 95       	ror	r20
    9bba:	37 95       	ror	r19
    9bbc:	27 95       	ror	r18
    9bbe:	ba 95       	dec	r27
    9bc0:	c9 f7       	brne	.-14     	; 0x9bb4 <__ultoa_invert+0xa2>
    9bc2:	62 0f       	add	r22, r18
    9bc4:	73 1f       	adc	r23, r19
    9bc6:	84 1f       	adc	r24, r20
    9bc8:	95 1f       	adc	r25, r21
    9bca:	a0 1d       	adc	r26, r0
    9bcc:	08 95       	ret

00009bce <_exit>:
    9bce:	f8 94       	cli

00009bd0 <__stop_program>:
    9bd0:	ff cf       	rjmp	.-2      	; 0x9bd0 <__stop_program>
