
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000073e  00800200  00007038  000070cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007038  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001023  0080093e  0080093e  0000780a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000780a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c50  00000000  00000000  000078a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e912  00000000  00000000  000084f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d4a  00000000  00000000  00016e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000752b  00000000  00000000  0001ab54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002994  00000000  00000000  00022080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000460c  00000000  00000000  00024a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c6b9  00000000  00000000  00029020  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b40  00000000  00000000  000356d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__vector_12>
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b6 28 	jmp	0x516c	; 0x516c <__vector_25>
      68:	0c 94 08 29 	jmp	0x5210	; 0x5210 <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4c 29 	jmp	0x5298	; 0x5298 <__vector_36>
      94:	0c 94 9e 29 	jmp	0x533c	; 0x533c <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e9 2d 	jmp	0x5bd2	; 0x5bd2 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 e2 29 	jmp	0x53c4	; 0x53c4 <__vector_51>
      d0:	0c 94 34 2a 	jmp	0x5468	; 0x5468 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 78 2a 	jmp	0x54f0	; 0x54f0 <__vector_54>
      dc:	0c 94 ca 2a 	jmp	0x5594	; 0x5594 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 1d       	adc	r31, r5
      e6:	f5 1d       	adc	r31, r5
      e8:	f5 1d       	adc	r31, r5
      ea:	2c 1e       	adc	r2, r28
      ec:	34 1e       	adc	r3, r20
      ee:	49 1e       	adc	r4, r25
      f0:	f5 1d       	adc	r31, r5
      f2:	f5 1d       	adc	r31, r5
      f4:	2c 1e       	adc	r2, r28
      f6:	34 1e       	adc	r3, r20
      f8:	0b 2e       	mov	r0, r27
      fa:	7b 2e       	mov	r7, r27
      fc:	7b 2e       	mov	r7, r27
      fe:	7b 2e       	mov	r7, r27
     100:	7b 2e       	mov	r7, r27
     102:	7b 2e       	mov	r7, r27
     104:	7b 2e       	mov	r7, r27
     106:	7b 2e       	mov	r7, r27
     108:	0b 2e       	mov	r0, r27
     10a:	7b 2e       	mov	r7, r27
     10c:	7b 2e       	mov	r7, r27
     10e:	7b 2e       	mov	r7, r27
     110:	7b 2e       	mov	r7, r27
     112:	7b 2e       	mov	r7, r27
     114:	7b 2e       	mov	r7, r27
     116:	7b 2e       	mov	r7, r27
     118:	0d 2e       	mov	r0, r29
     11a:	7b 2e       	mov	r7, r27
     11c:	7b 2e       	mov	r7, r27
     11e:	7b 2e       	mov	r7, r27
     120:	7b 2e       	mov	r7, r27
     122:	7b 2e       	mov	r7, r27
     124:	7b 2e       	mov	r7, r27
     126:	7b 2e       	mov	r7, r27
     128:	7b 2e       	mov	r7, r27
     12a:	7b 2e       	mov	r7, r27
     12c:	7b 2e       	mov	r7, r27
     12e:	7b 2e       	mov	r7, r27
     130:	7b 2e       	mov	r7, r27
     132:	7b 2e       	mov	r7, r27
     134:	7b 2e       	mov	r7, r27
     136:	7b 2e       	mov	r7, r27
     138:	0d 2e       	mov	r0, r29
     13a:	7b 2e       	mov	r7, r27
     13c:	7b 2e       	mov	r7, r27
     13e:	7b 2e       	mov	r7, r27
     140:	7b 2e       	mov	r7, r27
     142:	7b 2e       	mov	r7, r27
     144:	7b 2e       	mov	r7, r27
     146:	7b 2e       	mov	r7, r27
     148:	7b 2e       	mov	r7, r27
     14a:	7b 2e       	mov	r7, r27
     14c:	7b 2e       	mov	r7, r27
     14e:	7b 2e       	mov	r7, r27
     150:	7b 2e       	mov	r7, r27
     152:	7b 2e       	mov	r7, r27
     154:	7b 2e       	mov	r7, r27
     156:	7b 2e       	mov	r7, r27
     158:	77 2e       	mov	r7, r23
     15a:	7b 2e       	mov	r7, r27
     15c:	7b 2e       	mov	r7, r27
     15e:	7b 2e       	mov	r7, r27
     160:	7b 2e       	mov	r7, r27
     162:	7b 2e       	mov	r7, r27
     164:	7b 2e       	mov	r7, r27
     166:	7b 2e       	mov	r7, r27
     168:	42 2e       	mov	r4, r18
     16a:	7b 2e       	mov	r7, r27
     16c:	7b 2e       	mov	r7, r27
     16e:	7b 2e       	mov	r7, r27
     170:	7b 2e       	mov	r7, r27
     172:	7b 2e       	mov	r7, r27
     174:	7b 2e       	mov	r7, r27
     176:	7b 2e       	mov	r7, r27
     178:	7b 2e       	mov	r7, r27
     17a:	7b 2e       	mov	r7, r27
     17c:	7b 2e       	mov	r7, r27
     17e:	7b 2e       	mov	r7, r27
     180:	7b 2e       	mov	r7, r27
     182:	7b 2e       	mov	r7, r27
     184:	7b 2e       	mov	r7, r27
     186:	7b 2e       	mov	r7, r27
     188:	36 2e       	mov	r3, r22
     18a:	7b 2e       	mov	r7, r27
     18c:	7b 2e       	mov	r7, r27
     18e:	7b 2e       	mov	r7, r27
     190:	7b 2e       	mov	r7, r27
     192:	7b 2e       	mov	r7, r27
     194:	7b 2e       	mov	r7, r27
     196:	7b 2e       	mov	r7, r27
     198:	5a 2e       	mov	r5, r26

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 36 10 	call	0x206c	; 0x206c <prvCheckTasksWaitingTermination>
     2a0:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	00 d6       	rcall	.+3072   	; 0xeaa <vPortYield>
     2aa:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 67 1d 	call	0x3ace	; 0x3ace <prvProcessTimerOrBlockTask>
     2c8:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	19 e0       	ldi	r17, 0x09	; 9
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e8 e3       	ldi	r30, 0x38	; 56
     2e6:	f0 e7       	ldi	r31, 0x70	; 112
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	ae 33       	cpi	r26, 0x3E	; 62
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	29 e1       	ldi	r18, 0x19	; 25
     2fa:	ae e3       	ldi	r26, 0x3E	; 62
     2fc:	b9 e0       	ldi	r27, 0x09	; 9
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a1 36       	cpi	r26, 0x61	; 97
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 53 21 	call	0x42a6	; 0x42a6 <main>
     30c:	0c 94 1a 38 	jmp	0x7034	; 0x7034 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 87 11 	call	0x230e	; 0x230e <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 9d 13 	call	0x273a	; 0x273a <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 51 19 	lds	r24, 0x1951	; 0x801951 <measureEventGroup>
     34e:	90 91 52 19 	lds	r25, 0x1952	; 0x801952 <measureEventGroup+0x1>
     352:	f6 d2       	rcall	.+1516   	; 0x940 <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <dataReadyEventGroup>
     36c:	90 91 50 19 	lds	r25, 0x1950	; 0x801950 <dataReadyEventGroup+0x1>
     370:	47 d2       	rcall	.+1166   	; 0x800 <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TempHumSensor_getTemp>
     38a:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <TempHumSensor_getHum>
     392:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <CO2_getPPM>
     39a:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <set_CO2_ppm>
			
			if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     39e:	4a e0       	ldi	r20, 0x0A	; 10
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     3aa:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     3ae:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <xQueueSemaphoreTake>
     3b2:	81 30       	cpi	r24, 0x01	; 1
				set_status(get_system_status());
     3b4:	71 f4       	brne	.+28     	; 0x3d2 <main_application_task+0xc0>
     3b6:	57 d0       	rcall	.+174    	; 0x466 <get_system_status>
     3b8:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <set_status>
				xSemaphoreGive(configSemaphore);
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     3cc:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     3d0:	84 d7       	rcall	.+3848   	; 0x12da <xQueueGenericSend>
			}
			
			lora_driver_payload_t payload = get_lora_package(2);
     3d2:	62 e0       	ldi	r22, 0x02	; 2
     3d4:	ce 01       	movw	r24, r28
     3d6:	05 96       	adiw	r24, 0x05	; 5
     3d8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3dc:	0f ef       	ldi	r16, 0xFF	; 255
     3de:	1f ef       	ldi	r17, 0xFF	; 255
     3e0:	98 01       	movw	r18, r16
     3e2:	46 e1       	ldi	r20, 0x16	; 22
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	be 01       	movw	r22, r28
     3e8:	6b 5f       	subi	r22, 0xFB	; 251
     3ea:	7f 4f       	sbci	r23, 0xFF	; 255
     3ec:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <uplinkMessageBufferHandle>
     3f0:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <uplinkMessageBufferHandle+0x1>
     3f4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     3f8:	86 31       	cpi	r24, 0x16	; 22
     3fa:	29 f0       	breq	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				printf("Timed out.\n");
     3fc:	8f e6       	ldi	r24, 0x6F	; 111
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	0e 94 5d 37 	call	0x6eba	; 0x6eba <puts>
     404:	96 cf       	rjmp	.-212    	; 0x332 <main_application_task+0x20>
				// 			printf("Bytes sent: %d\n", xBytesSent);
				// 			printf("Temp sent: %d\n", tem);
				// 			printf("Humidity sent: %d\n", hum);
				// 			printf("Size of payload: %d\n", sizeof(payload));
				//			receivePayload();
				printf("Bytes put in buffer: %d\n", xBytesSent);
     406:	99 27       	eor	r25, r25
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	8a e7       	ldi	r24, 0x7A	; 122
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	9f 93       	push	r25
     412:	8f 93       	push	r24
     414:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	88 cf       	rjmp	.-240    	; 0x332 <main_application_task+0x20>

00000422 <create_main_application_task>:



void main_application_task(void *pvParameters);

void create_main_application_task(UBaseType_t priority){
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
		
	xTaskCreate(
     428:	e1 2c       	mov	r14, r1
     42a:	f1 2c       	mov	r15, r1
     42c:	08 2f       	mov	r16, r24
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	40 ec       	ldi	r20, 0xC0	; 192
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	63 e9       	ldi	r22, 0x93	; 147
     438:	72 e0       	ldi	r23, 0x02	; 2
     43a:	89 e8       	ldi	r24, 0x89	; 137
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + priority 
	,  NULL );
	
}
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	08 95       	ret

0000044a <set_system_status>:

void set_max_co2(uint16_t maxCO2){
	max_co2 = maxCO2;
}

void set_min_co2(uint16_t minCO2){
     44a:	87 3f       	cpi	r24, 0xF7	; 247
     44c:	30 f0       	brcs	.+12     	; 0x45a <set_system_status+0x10>
     44e:	90 91 3e 09 	lds	r25, 0x093E	; 0x80093e <__data_end>
     452:	89 23       	and	r24, r25
     454:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <__data_end>
     458:	08 95       	ret
     45a:	90 91 3e 09 	lds	r25, 0x093E	; 0x80093e <__data_end>
     45e:	89 2b       	or	r24, r25
     460:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <__data_end>
     464:	08 95       	ret

00000466 <get_system_status>:
     466:	80 91 3e 09 	lds	r24, 0x093E	; 0x80093e <__data_end>
     46a:	08 95       	ret

0000046c <get_max_temperature>:
     46c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <max_temperature>
     470:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <max_temperature+0x1>
     474:	08 95       	ret

00000476 <set_max_temperature>:
     476:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <max_temperature+0x1>
     47a:	80 93 43 09 	sts	0x0943, r24	; 0x800943 <max_temperature>
     47e:	08 95       	ret

00000480 <set_max_humidity>:
     480:	90 93 42 09 	sts	0x0942, r25	; 0x800942 <max_humidity+0x1>
     484:	80 93 41 09 	sts	0x0941, r24	; 0x800941 <max_humidity>
     488:	08 95       	ret

0000048a <set_max_co2>:
     48a:	90 93 40 09 	sts	0x0940, r25	; 0x800940 <max_co2+0x1>
     48e:	80 93 3f 09 	sts	0x093F, r24	; 0x80093f <max_co2>
     492:	08 95       	ret

00000494 <setConfiguration>:
static uint16_t max_co2 = 0;
static uint16_t min_co2 = 0;
static uint8_t system_status = 0;


void setConfiguration(lora_driver_payload_t payload){
     494:	6f 92       	push	r6
     496:	7f 92       	push	r7
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	uint16_t newMaxHum = 0;
	uint16_t newMinHum = 0;
	uint16_t newMaxCO2 = 0;
	uint16_t newMinCO2 = 0;
	
	newMaxTemp = (payload.bytes[0] << 8 | payload.bytes[1]);
     4b4:	cc 88       	ldd	r12, Y+20	; 0x14
     4b6:	d1 2c       	mov	r13, r1
     4b8:	dc 2c       	mov	r13, r12
     4ba:	cc 24       	eor	r12, r12
     4bc:	8d 89       	ldd	r24, Y+21	; 0x15
     4be:	c8 2a       	or	r12, r24
	newMinTemp = (payload.bytes[2] << 8 | payload.bytes[3]);
     4c0:	6e 88       	ldd	r6, Y+22	; 0x16
     4c2:	71 2c       	mov	r7, r1
     4c4:	76 2c       	mov	r7, r6
     4c6:	66 24       	eor	r6, r6
     4c8:	8f 89       	ldd	r24, Y+23	; 0x17
     4ca:	68 2a       	or	r6, r24
	newMaxHum = (payload.bytes[4] << 8 | payload.bytes[5]);
     4cc:	08 8d       	ldd	r16, Y+24	; 0x18
     4ce:	10 e0       	ldi	r17, 0x00	; 0
     4d0:	10 2f       	mov	r17, r16
     4d2:	00 27       	eor	r16, r16
     4d4:	89 8d       	ldd	r24, Y+25	; 0x19
     4d6:	08 2b       	or	r16, r24
	newMinHum = (payload.bytes[6] << 8 | payload.bytes[7]);
     4d8:	aa 8c       	ldd	r10, Y+26	; 0x1a
     4da:	b1 2c       	mov	r11, r1
     4dc:	ba 2c       	mov	r11, r10
     4de:	aa 24       	eor	r10, r10
     4e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4e2:	a8 2a       	or	r10, r24
	newMaxCO2 = (payload.bytes[8] << 8 | payload.bytes[9]);
     4e4:	ec 8c       	ldd	r14, Y+28	; 0x1c
     4e6:	f1 2c       	mov	r15, r1
     4e8:	fe 2c       	mov	r15, r14
     4ea:	ee 24       	eor	r14, r14
     4ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4ee:	e8 2a       	or	r14, r24
	newMinCO2 =(payload.bytes[10] << 8 | payload.bytes[11]);
     4f0:	8e 8c       	ldd	r8, Y+30	; 0x1e
     4f2:	91 2c       	mov	r9, r1
     4f4:	98 2c       	mov	r9, r8
     4f6:	88 24       	eor	r8, r8
     4f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4fa:	88 2a       	or	r8, r24
	
	set_max_temperature(newMaxTemp/10);
     4fc:	c6 01       	movw	r24, r12
     4fe:	6a e0       	ldi	r22, 0x0A	; 10
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	0e 94 3b 34 	call	0x6876	; 0x6876 <__divmodhi4>
     506:	cb 01       	movw	r24, r22
     508:	b6 df       	rcall	.-148    	; 0x476 <set_max_temperature>
	set_min_temperature(newMinTemp/10);
	set_max_humidity(newMaxHum/10);
     50a:	20 2f       	mov	r18, r16
     50c:	31 2f       	mov	r19, r17
     50e:	ad ec       	ldi	r26, 0xCD	; 205
     510:	bc ec       	ldi	r27, 0xCC	; 204
     512:	0e 94 78 34 	call	0x68f0	; 0x68f0 <__umulhisi3>
     516:	96 95       	lsr	r25
     518:	87 95       	ror	r24
     51a:	96 95       	lsr	r25
     51c:	87 95       	ror	r24
     51e:	96 95       	lsr	r25
     520:	87 95       	ror	r24
     522:	ae df       	rcall	.-164    	; 0x480 <set_max_humidity>
	set_min_humidity(newMinHum/10);
	set_max_co2(newMaxCO2);
     524:	8e 2d       	mov	r24, r14
     526:	9f 2d       	mov	r25, r15
     528:	b0 df       	rcall	.-160    	; 0x48a <set_max_co2>
	set_min_co2(newMinCO2);
	
	printf("CONF, mxtmp: %d, mntmp: %d, mxhum: %d, mnhum: %d, mxco2: %d, mnco2: %d\n", 
     52a:	9f 92       	push	r9
     52c:	8f 92       	push	r8
     52e:	ff 92       	push	r15
     530:	ef 92       	push	r14
     532:	bf 92       	push	r11
     534:	af 92       	push	r10
     536:	1f 93       	push	r17
     538:	0f 93       	push	r16
     53a:	7f 92       	push	r7
     53c:	6f 92       	push	r6
     53e:	df 92       	push	r13
     540:	cf 92       	push	r12
     542:	83 ea       	ldi	r24, 0xA3	; 163
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
					    newMaxTemp, newMinTemp, newMaxHum, newMinHum, newMaxCO2, newMinCO2);
}
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	df 90       	pop	r13
     566:	cf 90       	pop	r12
     568:	bf 90       	pop	r11
     56a:	af 90       	pop	r10
     56c:	9f 90       	pop	r9
     56e:	8f 90       	pop	r8
     570:	7f 90       	pop	r7
     572:	6f 90       	pop	r6
     574:	08 95       	ret

00000576 <lora_downlink_handler_task>:
	uint8_t xReceivedBytes = 0;
	
	for(;;){
		
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle, 
     576:	0f ef       	ldi	r16, 0xFF	; 255
     578:	1f ef       	ldi	r17, 0xFF	; 255
     57a:	98 01       	movw	r18, r16
     57c:	46 e1       	ldi	r20, 0x16	; 22
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	65 e4       	ldi	r22, 0x45	; 69
     582:	79 e0       	ldi	r23, 0x09	; 9
     584:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <downlinkMessageBufferHandle>
     588:	90 91 56 19 	lds	r25, 0x1956	; 0x801956 <downlinkMessageBufferHandle+0x1>
     58c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <xStreamBufferReceive>
		&_downlink_payload, 
		sizeof(lora_driver_payload_t), 
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     590:	88 23       	and	r24, r24
     592:	89 f3       	breq	.-30     	; 0x576 <lora_downlink_handler_task>
			printf("DOWN LINK: from port: %d with %d bytes received!\n", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     594:	e5 e4       	ldi	r30, 0x45	; 69
     596:	f9 e0       	ldi	r31, 0x09	; 9
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	80 81       	ld	r24, Z
     59c:	1f 92       	push	r1
     59e:	9f 93       	push	r25
     5a0:	1f 92       	push	r1
     5a2:	8f 93       	push	r24
     5a4:	8b ee       	ldi	r24, 0xEB	; 235
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
			
			if(configSemaphore != NULL){
     5b0:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     5b4:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	00 97       	sbiw	r24, 0x00	; 0
     5c6:	b9 f2       	breq	.-82     	; 0x576 <lora_downlink_handler_task>
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     5c8:	4a e0       	ldi	r20, 0x0A	; 10
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	fe d7       	rcall	.+4092   	; 0x15ce <xQueueSemaphoreTake>
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	39 f5       	brne	.+78     	; 0x624 <lora_downlink_handler_task+0xae>
					setConfiguration(_downlink_payload);
     5d6:	8d b7       	in	r24, 0x3d	; 61
     5d8:	9e b7       	in	r25, 0x3e	; 62
     5da:	46 97       	sbiw	r24, 0x16	; 22
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	9e bf       	out	0x3e, r25	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	8d bf       	out	0x3d, r24	; 61
     5e6:	ad b7       	in	r26, 0x3d	; 61
     5e8:	be b7       	in	r27, 0x3e	; 62
     5ea:	11 96       	adiw	r26, 0x01	; 1
     5ec:	86 e1       	ldi	r24, 0x16	; 22
     5ee:	e5 e4       	ldi	r30, 0x45	; 69
     5f0:	f9 e0       	ldi	r31, 0x09	; 9
     5f2:	01 90       	ld	r0, Z+
     5f4:	0d 92       	st	X+, r0
     5f6:	8a 95       	dec	r24
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <lora_downlink_handler_task+0x7c>
     5fa:	4c df       	rcall	.-360    	; 0x494 <setConfiguration>
					xSemaphoreGive(configSemaphore);
     5fc:	00 e0       	ldi	r16, 0x00	; 0
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	a9 01       	movw	r20, r18
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     60c:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     610:	64 d6       	rcall	.+3272   	; 0x12da <xQueueGenericSend>
     612:	8d b7       	in	r24, 0x3d	; 61
     614:	9e b7       	in	r25, 0x3e	; 62
     616:	46 96       	adiw	r24, 0x16	; 22
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	9e bf       	out	0x3e, r25	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	8d bf       	out	0x3d, r24	; 61
     622:	a9 cf       	rjmp	.-174    	; 0x576 <lora_downlink_handler_task>
				}
				else{
					printf("Couldn't obtain semaphore.\n");
     624:	8d e1       	ldi	r24, 0x1D	; 29
     626:	93 e0       	ldi	r25, 0x03	; 3
     628:	0e 94 5d 37 	call	0x6eba	; 0x6eba <puts>
     62c:	a4 cf       	rjmp	.-184    	; 0x576 <lora_downlink_handler_task>

0000062e <create_lora_downlink_handler_task>:

void lora_downlink_handler_task(void *pvParameters);

static lora_driver_payload_t _downlink_payload;

void create_lora_downlink_handler_task(UBaseType_t priority){
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
		xTaskCreate(
     634:	e1 2c       	mov	r14, r1
     636:	f1 2c       	mov	r15, r1
     638:	08 2f       	mov	r16, r24
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	48 e8       	ldi	r20, 0x88	; 136
     640:	51 e0       	ldi	r21, 0x01	; 1
     642:	68 e3       	ldi	r22, 0x38	; 56
     644:	73 e0       	ldi	r23, 0x03	; 3
     646:	8b eb       	ldi	r24, 0xBB	; 187
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
		,  "LRHandDownlink"
		,  configMINIMAL_STACK_SIZE+200
		,  NULL
		,  tskIDLE_PRIORITY + priority
		,  NULL );
}
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	08 95       	ret

00000656 <fan_controller_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void fan_controller_task(void *pvParameters) {
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	00 d0       	rcall	.+0      	; 0x65c <fan_controller_task+0x6>
     65c:	1f 92       	push	r1
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(120000); 
	xLastWakeTime = xTaskGetTickCount();
     662:	0e 94 87 11 	call	0x230e	; 0x230e <xTaskGetTickCount>
     666:	69 83       	std	Y+1, r22	; 0x01
     668:	7a 83       	std	Y+2, r23	; 0x02
     66a:	8b 83       	std	Y+3, r24	; 0x03
     66c:	9c 83       	std	Y+4, r25	; 0x04
}

void fan_controller_task(void *pvParameters) {
	
	int16_t currentTemperature = 0;
	int16_t thresholdTemperature = 0;
     66e:	e1 2c       	mov	r14, r1
     670:	f1 2c       	mov	r15, r1
	const TickType_t xFrequency = pdMS_TO_TICKS(120000); 
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     672:	40 e1       	ldi	r20, 0x10	; 16
     674:	5d e1       	ldi	r21, 0x1D	; 29
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	0e 94 9d 13 	call	0x273a	; 0x273a <xTaskDelayUntil>
		

		if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     682:	4a e0       	ldi	r20, 0x0A	; 10
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     68e:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     692:	9d d7       	rcall	.+3898   	; 0x15ce <xQueueSemaphoreTake>
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	69 f4       	brne	.+26     	; 0x6b2 <fan_controller_task+0x5c>
			thresholdTemperature = get_max_temperature();
     698:	e9 de       	rcall	.-558    	; 0x46c <get_max_temperature>
     69a:	7c 01       	movw	r14, r24
     69c:	00 e0       	ldi	r16, 0x00	; 0
			xSemaphoreGive(configSemaphore);
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	a9 01       	movw	r20, r18
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     6ac:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     6b0:	14 d6       	rcall	.+3112   	; 0x12da <xQueueGenericSend>
     6b2:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <measure_Temp_Hum>
			}
			
		measure_Temp_Hum();
     6b6:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TempHumSensor_getTemp>
		currentTemperature = TempHumSensor_getTemp();
     6ba:	6a e0       	ldi	r22, 0x0A	; 10
		
		printf("Current temp: %d\n", currentTemperature/10);
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	0e 94 3b 34 	call	0x6876	; 0x6876 <__divmodhi4>
     6c2:	8b 01       	movw	r16, r22
     6c4:	1f 93       	push	r17
     6c6:	6f 93       	push	r22
     6c8:	87 e4       	ldi	r24, 0x47	; 71
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
     6d4:	ff 92       	push	r15
		printf("Threshold temp: %d\n", thresholdTemperature);
     6d6:	ef 92       	push	r14
     6d8:	89 e5       	ldi	r24, 0x59	; 89
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	9f 93       	push	r25
     6de:	8f 93       	push	r24
     6e0:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
     6e4:	0f b6       	in	r0, 0x3f	; 63
		if(currentTemperature/10 > thresholdTemperature){
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	e0 16       	cp	r14, r16
     6f0:	f1 06       	cpc	r15, r17
     6f2:	ec f4       	brge	.+58     	; 0x72e <fan_controller_task+0xd8>
     6f4:	64 e6       	ldi	r22, 0x64	; 100
			servo_set_position(0, 100);
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <servo_set_position>
     6fc:	4a e0       	ldi	r20, 0x0A	; 10
			if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     708:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     70c:	60 d7       	rcall	.+3776   	; 0x15ce <xQueueSemaphoreTake>
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	09 f0       	breq	.+2      	; 0x714 <fan_controller_task+0xbe>
     712:	af cf       	rjmp	.-162    	; 0x672 <fan_controller_task+0x1c>
				set_system_status(TEMPERATURE_ACTION_ON);
     714:	9a de       	rcall	.-716    	; 0x44a <set_system_status>
     716:	00 e0       	ldi	r16, 0x00	; 0
				xSemaphoreGive(configSemaphore);
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	a9 01       	movw	r20, r18
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     726:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     72a:	d7 d5       	rcall	.+2990   	; 0x12da <xQueueGenericSend>
     72c:	a2 cf       	rjmp	.-188    	; 0x672 <fan_controller_task+0x1c>
     72e:	6c e9       	ldi	r22, 0x9C	; 156
			}
		}
		else{
			servo_set_position(0, -100);
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <servo_set_position>
     736:	4a e0       	ldi	r20, 0x0A	; 10
			if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     742:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     746:	43 d7       	rcall	.+3718   	; 0x15ce <xQueueSemaphoreTake>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	09 f0       	breq	.+2      	; 0x74e <fan_controller_task+0xf8>
     74c:	92 cf       	rjmp	.-220    	; 0x672 <fan_controller_task+0x1c>
				set_system_status(TEMPERATURE_ACTION_OFF);
     74e:	8e ef       	ldi	r24, 0xFE	; 254
     750:	7c de       	rcall	.-776    	; 0x44a <set_system_status>
     752:	00 e0       	ldi	r16, 0x00	; 0
				xSemaphoreGive(configSemaphore);
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	a9 01       	movw	r20, r18
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <configSemaphore>
     762:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <configSemaphore+0x1>
     766:	b9 d5       	rcall	.+2930   	; 0x12da <xQueueGenericSend>
     768:	84 cf       	rjmp	.-248    	; 0x672 <fan_controller_task+0x1c>

0000076a <create_fan_controller_task>:
     76a:	ef 92       	push	r14



void fan_controller_task(void *pvParameters);

void create_fan_controller_task(UBaseType_t priority){
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
	
	DDRA = 0xFF;
     770:	9f ef       	ldi	r25, 0xFF	; 255
     772:	91 b9       	out	0x01, r25	; 1
	PORTA = 0xFF;
     774:	92 b9       	out	0x02, r25	; 2
	
	xTaskCreate(
     776:	e1 2c       	mov	r14, r1
     778:	f1 2c       	mov	r15, r1
     77a:	08 2f       	mov	r16, r24
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 ec       	ldi	r20, 0xC0	; 192
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	6d e6       	ldi	r22, 0x6D	; 109
     786:	73 e0       	ldi	r23, 0x03	; 3
     788:	8b e2       	ldi	r24, 0x2B	; 43
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
	,  "FanController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	08 95       	ret

00000798 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     798:	0f 93       	push	r16
     79a:	01 11       	cpse	r16, r1
     79c:	0c c0       	rjmp	.+24     	; 0x7b6 <prvTestWaitCondition+0x1e>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	82 23       	and	r24, r18
     7a4:	93 23       	and	r25, r19
     7a6:	a4 23       	and	r26, r20
     7a8:	b5 23       	and	r27, r21
     7aa:	89 2b       	or	r24, r25
     7ac:	8a 2b       	or	r24, r26
     7ae:	8b 2b       	or	r24, r27
     7b0:	79 f4       	brne	.+30     	; 0x7d0 <prvTestWaitCondition+0x38>
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	10 c0       	rjmp	.+32     	; 0x7d6 <prvTestWaitCondition+0x3e>
     7b6:	dc 01       	movw	r26, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	82 23       	and	r24, r18
     7bc:	93 23       	and	r25, r19
     7be:	a4 23       	and	r26, r20
     7c0:	b5 23       	and	r27, r21
     7c2:	28 17       	cp	r18, r24
     7c4:	39 07       	cpc	r19, r25
     7c6:	4a 07       	cpc	r20, r26
     7c8:	5b 07       	cpc	r21, r27
     7ca:	21 f0       	breq	.+8      	; 0x7d4 <prvTestWaitCondition+0x3c>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <prvTestWaitCondition+0x3e>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <prvTestWaitCondition+0x3e>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <xEventGroupCreate>:
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	8f e0       	ldi	r24, 0x0F	; 15
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	af d1       	rcall	.+862    	; 0xb42 <pvPortMalloc>
     7e4:	ec 01       	movw	r28, r24
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	39 f0       	breq	.+14     	; 0x7f8 <xEventGroupCreate+0x1e>
     7ea:	fc 01       	movw	r30, r24
     7ec:	11 92       	st	Z+, r1
     7ee:	11 92       	st	Z+, r1
     7f0:	11 92       	st	Z+, r1
     7f2:	11 92       	st	Z+, r1
     7f4:	cf 01       	movw	r24, r30
     7f6:	8b d2       	rcall	.+1302   	; 0xd0e <vListInitialise>
     7f8:	ce 01       	movw	r24, r28
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <xEventGroupWaitBits>:
     800:	2f 92       	push	r2
     802:	3f 92       	push	r3
     804:	4f 92       	push	r4
     806:	5f 92       	push	r5
     808:	6f 92       	push	r6
     80a:	7f 92       	push	r7
     80c:	8f 92       	push	r8
     80e:	9f 92       	push	r9
     810:	af 92       	push	r10
     812:	bf 92       	push	r11
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	ec 01       	movw	r28, r24
     826:	4a 01       	movw	r8, r20
     828:	5b 01       	movw	r10, r22
     82a:	62 2e       	mov	r6, r18
     82c:	70 2e       	mov	r7, r16
     82e:	0e 94 81 11 	call	0x2302	; 0x2302 <vTaskSuspendAll>
     832:	28 80       	ld	r2, Y
     834:	39 80       	ldd	r3, Y+1	; 0x01
     836:	4a 80       	ldd	r4, Y+2	; 0x02
     838:	5b 80       	ldd	r5, Y+3	; 0x03
     83a:	a5 01       	movw	r20, r10
     83c:	94 01       	movw	r18, r8
     83e:	c2 01       	movw	r24, r4
     840:	b1 01       	movw	r22, r2
     842:	aa df       	rcall	.-172    	; 0x798 <prvTestWaitCondition>
     844:	88 23       	and	r24, r24
     846:	a1 f0       	breq	.+40     	; 0x870 <xEventGroupWaitBits+0x70>
     848:	66 20       	and	r6, r6
     84a:	89 f1       	breq	.+98     	; 0x8ae <xEventGroupWaitBits+0xae>
     84c:	d5 01       	movw	r26, r10
     84e:	c4 01       	movw	r24, r8
     850:	80 95       	com	r24
     852:	90 95       	com	r25
     854:	a0 95       	com	r26
     856:	b0 95       	com	r27
     858:	82 21       	and	r24, r2
     85a:	93 21       	and	r25, r3
     85c:	a4 21       	and	r26, r4
     85e:	b5 21       	and	r27, r5
     860:	88 83       	st	Y, r24
     862:	99 83       	std	Y+1, r25	; 0x01
     864:	aa 83       	std	Y+2, r26	; 0x02
     866:	bb 83       	std	Y+3, r27	; 0x03
     868:	c1 2c       	mov	r12, r1
     86a:	d1 2c       	mov	r13, r1
     86c:	76 01       	movw	r14, r12
     86e:	22 c0       	rjmp	.+68     	; 0x8b4 <xEventGroupWaitBits+0xb4>
     870:	c1 14       	cp	r12, r1
     872:	d1 04       	cpc	r13, r1
     874:	e1 04       	cpc	r14, r1
     876:	f1 04       	cpc	r15, r1
     878:	e9 f0       	breq	.+58     	; 0x8b4 <xEventGroupWaitBits+0xb4>
     87a:	61 10       	cpse	r6, r1
     87c:	04 c0       	rjmp	.+8      	; 0x886 <xEventGroupWaitBits+0x86>
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	ba 01       	movw	r22, r20
     884:	04 c0       	rjmp	.+8      	; 0x88e <xEventGroupWaitBits+0x8e>
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	71 e0       	ldi	r23, 0x01	; 1
     88e:	71 10       	cpse	r7, r1
     890:	74 60       	ori	r23, 0x04	; 4
     892:	48 29       	or	r20, r8
     894:	59 29       	or	r21, r9
     896:	6a 29       	or	r22, r10
     898:	7b 29       	or	r23, r11
     89a:	97 01       	movw	r18, r14
     89c:	86 01       	movw	r16, r12
     89e:	ce 01       	movw	r24, r28
     8a0:	04 96       	adiw	r24, 0x04	; 4
     8a2:	0e 94 99 14 	call	0x2932	; 0x2932 <vTaskPlaceOnUnorderedEventList>
     8a6:	21 2c       	mov	r2, r1
     8a8:	31 2c       	mov	r3, r1
     8aa:	21 01       	movw	r4, r2
     8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <xEventGroupWaitBits+0xb4>
     8ae:	c1 2c       	mov	r12, r1
     8b0:	d1 2c       	mov	r13, r1
     8b2:	76 01       	movw	r14, r12
     8b4:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>
     8b8:	cd 28       	or	r12, r13
     8ba:	ce 28       	or	r12, r14
     8bc:	cf 28       	or	r12, r15
     8be:	59 f1       	breq	.+86     	; 0x916 <xEventGroupWaitBits+0x116>
     8c0:	81 11       	cpse	r24, r1
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <xEventGroupWaitBits+0xc6>
     8c4:	f2 d2       	rcall	.+1508   	; 0xeaa <vPortYield>
     8c6:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <uxTaskResetEventItemValue>
     8ca:	6b 01       	movw	r12, r22
     8cc:	7c 01       	movw	r14, r24
     8ce:	91 fd       	sbrc	r25, 1
     8d0:	1f c0       	rjmp	.+62     	; 0x910 <xEventGroupWaitBits+0x110>
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	0f 92       	push	r0
     8d8:	c8 80       	ld	r12, Y
     8da:	d9 80       	ldd	r13, Y+1	; 0x01
     8dc:	ea 80       	ldd	r14, Y+2	; 0x02
     8de:	fb 80       	ldd	r15, Y+3	; 0x03
     8e0:	07 2d       	mov	r16, r7
     8e2:	a5 01       	movw	r20, r10
     8e4:	94 01       	movw	r18, r8
     8e6:	c7 01       	movw	r24, r14
     8e8:	b6 01       	movw	r22, r12
     8ea:	56 df       	rcall	.-340    	; 0x798 <prvTestWaitCondition>
     8ec:	88 23       	and	r24, r24
     8ee:	71 f0       	breq	.+28     	; 0x90c <xEventGroupWaitBits+0x10c>
     8f0:	66 20       	and	r6, r6
     8f2:	61 f0       	breq	.+24     	; 0x90c <xEventGroupWaitBits+0x10c>
     8f4:	80 94       	com	r8
     8f6:	90 94       	com	r9
     8f8:	a0 94       	com	r10
     8fa:	b0 94       	com	r11
     8fc:	8c 20       	and	r8, r12
     8fe:	9d 20       	and	r9, r13
     900:	ae 20       	and	r10, r14
     902:	bf 20       	and	r11, r15
     904:	88 82       	st	Y, r8
     906:	99 82       	std	Y+1, r9	; 0x01
     908:	aa 82       	std	Y+2, r10	; 0x02
     90a:	bb 82       	std	Y+3, r11	; 0x03
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	16 01       	movw	r2, r12
     912:	27 01       	movw	r4, r14
     914:	55 24       	eor	r5, r5
     916:	c2 01       	movw	r24, r4
     918:	b1 01       	movw	r22, r2
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	bf 90       	pop	r11
     92c:	af 90       	pop	r10
     92e:	9f 90       	pop	r9
     930:	8f 90       	pop	r8
     932:	7f 90       	pop	r7
     934:	6f 90       	pop	r6
     936:	5f 90       	pop	r5
     938:	4f 90       	pop	r4
     93a:	3f 90       	pop	r3
     93c:	2f 90       	pop	r2
     93e:	08 95       	ret

00000940 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     940:	4f 92       	push	r4
     942:	5f 92       	push	r5
     944:	6f 92       	push	r6
     946:	7f 92       	push	r7
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
     95e:	6a 01       	movw	r12, r20
     960:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     962:	8c 01       	movw	r16, r24
     964:	09 5f       	subi	r16, 0xF9	; 249
     966:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     968:	0e 94 81 11 	call	0x2302	; 0x2302 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     96c:	eb 85       	ldd	r30, Y+11	; 0x0b
     96e:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     970:	88 81       	ld	r24, Y
     972:	99 81       	ldd	r25, Y+1	; 0x01
     974:	aa 81       	ldd	r26, Y+2	; 0x02
     976:	bb 81       	ldd	r27, Y+3	; 0x03
     978:	c8 2a       	or	r12, r24
     97a:	d9 2a       	or	r13, r25
     97c:	ea 2a       	or	r14, r26
     97e:	fb 2a       	or	r15, r27
     980:	c8 82       	st	Y, r12
     982:	d9 82       	std	Y+1, r13	; 0x01
     984:	ea 82       	std	Y+2, r14	; 0x02
     986:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     988:	c1 2c       	mov	r12, r1
     98a:	d1 2c       	mov	r13, r1
     98c:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     98e:	3d c0       	rjmp	.+122    	; 0xa0a <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     990:	a4 80       	ldd	r10, Z+4	; 0x04
     992:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     994:	80 81       	ld	r24, Z
     996:	91 81       	ldd	r25, Z+1	; 0x01
     998:	a2 81       	ldd	r26, Z+2	; 0x02
     99a:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     99c:	ac 01       	movw	r20, r24
     99e:	bd 01       	movw	r22, r26
     9a0:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     9a2:	b2 fd       	sbrc	r27, 2
     9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     9a6:	48 80       	ld	r4, Y
     9a8:	59 80       	ldd	r5, Y+1	; 0x01
     9aa:	6a 80       	ldd	r6, Y+2	; 0x02
     9ac:	7b 80       	ldd	r7, Y+3	; 0x03
     9ae:	44 22       	and	r4, r20
     9b0:	55 22       	and	r5, r21
     9b2:	66 22       	and	r6, r22
     9b4:	77 22       	and	r7, r23
     9b6:	45 28       	or	r4, r5
     9b8:	46 28       	or	r4, r6
     9ba:	47 28       	or	r4, r7
     9bc:	89 f4       	brne	.+34     	; 0x9e0 <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	12 c0       	rjmp	.+36     	; 0x9e6 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     9c2:	48 80       	ld	r4, Y
     9c4:	59 80       	ldd	r5, Y+1	; 0x01
     9c6:	6a 80       	ldd	r6, Y+2	; 0x02
     9c8:	7b 80       	ldd	r7, Y+3	; 0x03
     9ca:	44 22       	and	r4, r20
     9cc:	55 22       	and	r5, r21
     9ce:	66 22       	and	r6, r22
     9d0:	77 22       	and	r7, r23
     9d2:	44 15       	cp	r20, r4
     9d4:	55 05       	cpc	r21, r5
     9d6:	66 05       	cpc	r22, r6
     9d8:	77 05       	cpc	r23, r7
     9da:	21 f0       	breq	.+8      	; 0x9e4 <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     9e4:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     9e6:	22 23       	and	r18, r18
     9e8:	71 f0       	breq	.+28     	; 0xa06 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     9ea:	b0 ff       	sbrs	r27, 0
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     9ee:	c4 2a       	or	r12, r20
     9f0:	d5 2a       	or	r13, r21
     9f2:	e6 2a       	or	r14, r22
     9f4:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     9f6:	48 81       	ld	r20, Y
     9f8:	59 81       	ldd	r21, Y+1	; 0x01
     9fa:	6a 81       	ldd	r22, Y+2	; 0x02
     9fc:	7b 81       	ldd	r23, Y+3	; 0x03
     9fe:	72 60       	ori	r23, 0x02	; 2
     a00:	cf 01       	movw	r24, r30
     a02:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     a06:	ea 2d       	mov	r30, r10
     a08:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     a0a:	e0 17       	cp	r30, r16
     a0c:	f1 07       	cpc	r31, r17
     a0e:	09 f0       	breq	.+2      	; 0xa12 <xEventGroupSetBits+0xd2>
     a10:	bf cf       	rjmp	.-130    	; 0x990 <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     a12:	c0 94       	com	r12
     a14:	d0 94       	com	r13
     a16:	e0 94       	com	r14
     a18:	f0 94       	com	r15
     a1a:	88 81       	ld	r24, Y
     a1c:	99 81       	ldd	r25, Y+1	; 0x01
     a1e:	aa 81       	ldd	r26, Y+2	; 0x02
     a20:	bb 81       	ldd	r27, Y+3	; 0x03
     a22:	c8 22       	and	r12, r24
     a24:	d9 22       	and	r13, r25
     a26:	ea 22       	and	r14, r26
     a28:	fb 22       	and	r15, r27
     a2a:	c8 82       	st	Y, r12
     a2c:	d9 82       	std	Y+1, r13	; 0x01
     a2e:	ea 82       	std	Y+2, r14	; 0x02
     a30:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     a32:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     a36:	68 81       	ld	r22, Y
     a38:	79 81       	ldd	r23, Y+1	; 0x01
     a3a:	8a 81       	ldd	r24, Y+2	; 0x02
     a3c:	9b 81       	ldd	r25, Y+3	; 0x03
}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	bf 90       	pop	r11
     a50:	af 90       	pop	r10
     a52:	7f 90       	pop	r7
     a54:	6f 90       	pop	r6
     a56:	5f 90       	pop	r5
     a58:	4f 90       	pop	r4
     a5a:	08 95       	ret

00000a5c <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     a5c:	e7 e6       	ldi	r30, 0x67	; 103
     a5e:	f9 e0       	ldi	r31, 0x09	; 9
     a60:	ab e6       	ldi	r26, 0x6B	; 107
     a62:	b9 e0       	ldi	r27, 0x09	; 9
     a64:	b1 83       	std	Z+1, r27	; 0x01
     a66:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     a68:	13 82       	std	Z+3, r1	; 0x03
     a6a:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     a6c:	e3 e1       	ldi	r30, 0x13	; 19
     a6e:	f7 e1       	ldi	r31, 0x17	; 23
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     a70:	f0 93 66 09 	sts	0x0966, r31	; 0x800966 <pxEnd+0x1>
     a74:	e0 93 65 09 	sts	0x0965, r30	; 0x800965 <pxEnd>
    pxEnd->xBlockSize = 0;
     a78:	13 82       	std	Z+3, r1	; 0x03
     a7a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     a7c:	11 82       	std	Z+1, r1	; 0x01
     a7e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     a80:	88 ea       	ldi	r24, 0xA8	; 168
     a82:	9d e0       	ldi	r25, 0x0D	; 13
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	9c 93       	st	X, r25
     a88:	8e 93       	st	-X, r24
     a8a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     a8c:	ed 93       	st	X+, r30
     a8e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a90:	90 93 62 09 	sts	0x0962, r25	; 0x800962 <xMinimumEverFreeBytesRemaining+0x1>
     a94:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     a98:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <xFreeBytesRemaining+0x1>
     a9c:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e8       	ldi	r25, 0x80	; 128
     aa4:	90 93 5c 09 	sts	0x095C, r25	; 0x80095c <xBlockAllocatedBit+0x1>
     aa8:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <xBlockAllocatedBit>
     aac:	08 95       	ret

00000aae <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     ab4:	a7 e6       	ldi	r26, 0x67	; 103
     ab6:	b9 e0       	ldi	r27, 0x09	; 9
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <prvInsertBlockIntoFreeList+0xe>
     aba:	df 01       	movw	r26, r30
     abc:	ed 91       	ld	r30, X+
     abe:	fc 91       	ld	r31, X
     ac0:	11 97       	sbiw	r26, 0x01	; 1
     ac2:	ec 17       	cp	r30, r28
     ac4:	fd 07       	cpc	r31, r29
     ac6:	c8 f3       	brcs	.-14     	; 0xaba <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     ac8:	12 96       	adiw	r26, 0x02	; 2
     aca:	8d 91       	ld	r24, X+
     acc:	9c 91       	ld	r25, X
     ace:	13 97       	sbiw	r26, 0x03	; 3
     ad0:	9d 01       	movw	r18, r26
     ad2:	28 0f       	add	r18, r24
     ad4:	39 1f       	adc	r19, r25
     ad6:	c2 17       	cp	r28, r18
     ad8:	d3 07       	cpc	r29, r19
     ada:	49 f4       	brne	.+18     	; 0xaee <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     adc:	2a 81       	ldd	r18, Y+2	; 0x02
     ade:	3b 81       	ldd	r19, Y+3	; 0x03
     ae0:	82 0f       	add	r24, r18
     ae2:	93 1f       	adc	r25, r19
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     aec:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     aee:	8a 81       	ldd	r24, Y+2	; 0x02
     af0:	9b 81       	ldd	r25, Y+3	; 0x03
     af2:	9e 01       	movw	r18, r28
     af4:	28 0f       	add	r18, r24
     af6:	39 1f       	adc	r19, r25
     af8:	e2 17       	cp	r30, r18
     afa:	f3 07       	cpc	r31, r19
     afc:	c1 f4       	brne	.+48     	; 0xb2e <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     afe:	20 91 65 09 	lds	r18, 0x0965	; 0x800965 <pxEnd>
     b02:	30 91 66 09 	lds	r19, 0x0966	; 0x800966 <pxEnd+0x1>
     b06:	e2 17       	cp	r30, r18
     b08:	f3 07       	cpc	r31, r19
     b0a:	71 f0       	breq	.+28     	; 0xb28 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     b0c:	22 81       	ldd	r18, Z+2	; 0x02
     b0e:	33 81       	ldd	r19, Z+3	; 0x03
     b10:	82 0f       	add	r24, r18
     b12:	93 1f       	adc	r25, r19
     b14:	9b 83       	std	Y+3, r25	; 0x03
     b16:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     b18:	ed 91       	ld	r30, X+
     b1a:	fc 91       	ld	r31, X
     b1c:	11 97       	sbiw	r26, 0x01	; 1
     b1e:	80 81       	ld	r24, Z
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	99 83       	std	Y+1, r25	; 0x01
     b24:	88 83       	st	Y, r24
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     b28:	39 83       	std	Y+1, r19	; 0x01
     b2a:	28 83       	st	Y, r18
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     b2e:	f9 83       	std	Y+1, r31	; 0x01
     b30:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     b32:	ca 17       	cp	r28, r26
     b34:	db 07       	cpc	r29, r27
     b36:	11 f0       	breq	.+4      	; 0xb3c <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     b38:	cd 93       	st	X+, r28
     b3a:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     b50:	0e 94 81 11 	call	0x2302	; 0x2302 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     b54:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <pxEnd>
     b58:	90 91 66 09 	lds	r25, 0x0966	; 0x800966 <pxEnd+0x1>
     b5c:	89 2b       	or	r24, r25
     b5e:	09 f4       	brne	.+2      	; 0xb62 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     b60:	7d df       	rcall	.-262    	; 0xa5c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     b62:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <xBlockAllocatedBit>
     b66:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <xBlockAllocatedBit+0x1>
     b6a:	80 23       	and	r24, r16
     b6c:	91 23       	and	r25, r17
     b6e:	89 2b       	or	r24, r25
     b70:	09 f0       	breq	.+2      	; 0xb74 <pvPortMalloc+0x32>
     b72:	76 c0       	rjmp	.+236    	; 0xc60 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     b74:	01 15       	cp	r16, r1
     b76:	11 05       	cpc	r17, r1
     b78:	49 f0       	breq	.+18     	; 0xb8c <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     b7a:	c8 01       	movw	r24, r16
     b7c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     b7e:	08 17       	cp	r16, r24
     b80:	19 07       	cpc	r17, r25
     b82:	18 f0       	brcs	.+6      	; 0xb8a <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     b84:	00 e0       	ldi	r16, 0x00	; 0
     b86:	10 e0       	ldi	r17, 0x00	; 0
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     b8a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     b8c:	01 15       	cp	r16, r1
     b8e:	11 05       	cpc	r17, r1
     b90:	09 f4       	brne	.+2      	; 0xb94 <pvPortMalloc+0x52>
     b92:	69 c0       	rjmp	.+210    	; 0xc66 <pvPortMalloc+0x124>
     b94:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <xFreeBytesRemaining>
     b98:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <xFreeBytesRemaining+0x1>
     b9c:	80 17       	cp	r24, r16
     b9e:	91 07       	cpc	r25, r17
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <pvPortMalloc+0x62>
     ba2:	64 c0       	rjmp	.+200    	; 0xc6c <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     ba4:	c0 91 67 09 	lds	r28, 0x0967	; 0x800967 <xStart>
     ba8:	d0 91 68 09 	lds	r29, 0x0968	; 0x800968 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     bac:	e7 e6       	ldi	r30, 0x67	; 103
     bae:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     bb2:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     bb4:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	9b 81       	ldd	r25, Y+3	; 0x03
     bba:	80 17       	cp	r24, r16
     bbc:	91 07       	cpc	r25, r17
     bbe:	20 f4       	brcc	.+8      	; 0xbc8 <pvPortMalloc+0x86>
     bc0:	88 81       	ld	r24, Y
     bc2:	99 81       	ldd	r25, Y+1	; 0x01
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	a9 f7       	brne	.-22     	; 0xbb2 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     bc8:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <pxEnd>
     bcc:	90 91 66 09 	lds	r25, 0x0966	; 0x800966 <pxEnd+0x1>
     bd0:	c8 17       	cp	r28, r24
     bd2:	d9 07       	cpc	r29, r25
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <pvPortMalloc+0x96>
     bd6:	4d c0       	rjmp	.+154    	; 0xc72 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     bd8:	e0 80       	ld	r14, Z
     bda:	f1 80       	ldd	r15, Z+1	; 0x01
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	e8 0e       	add	r14, r24
     be0:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     be2:	88 81       	ld	r24, Y
     be4:	99 81       	ldd	r25, Y+1	; 0x01
     be6:	91 83       	std	Z+1, r25	; 0x01
     be8:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     bea:	2a 81       	ldd	r18, Y+2	; 0x02
     bec:	3b 81       	ldd	r19, Y+3	; 0x03
     bee:	20 1b       	sub	r18, r16
     bf0:	31 0b       	sbc	r19, r17
     bf2:	29 30       	cpi	r18, 0x09	; 9
     bf4:	31 05       	cpc	r19, r1
     bf6:	48 f0       	brcs	.+18     	; 0xc0a <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     bf8:	ce 01       	movw	r24, r28
     bfa:	80 0f       	add	r24, r16
     bfc:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     bfe:	fc 01       	movw	r30, r24
     c00:	33 83       	std	Z+3, r19	; 0x03
     c02:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     c04:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     c06:	0a 83       	std	Y+2, r16	; 0x02
     c08:	52 df       	rcall	.-348    	; 0xaae <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     c0a:	2a 81       	ldd	r18, Y+2	; 0x02
     c0c:	3b 81       	ldd	r19, Y+3	; 0x03
     c0e:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <xFreeBytesRemaining>
     c12:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <xFreeBytesRemaining+0x1>
     c16:	82 1b       	sub	r24, r18
     c18:	93 0b       	sbc	r25, r19
     c1a:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <xFreeBytesRemaining+0x1>
     c1e:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     c22:	40 91 61 09 	lds	r20, 0x0961	; 0x800961 <xMinimumEverFreeBytesRemaining>
     c26:	50 91 62 09 	lds	r21, 0x0962	; 0x800962 <xMinimumEverFreeBytesRemaining+0x1>
     c2a:	84 17       	cp	r24, r20
     c2c:	95 07       	cpc	r25, r21
     c2e:	20 f4       	brcc	.+8      	; 0xc38 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     c30:	90 93 62 09 	sts	0x0962, r25	; 0x800962 <xMinimumEverFreeBytesRemaining+0x1>
     c34:	80 93 61 09 	sts	0x0961, r24	; 0x800961 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     c38:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <xBlockAllocatedBit>
     c3c:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <xBlockAllocatedBit+0x1>
     c40:	28 2b       	or	r18, r24
     c42:	39 2b       	or	r19, r25
     c44:	3b 83       	std	Y+3, r19	; 0x03
     c46:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     c48:	19 82       	std	Y+1, r1	; 0x01
     c4a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     c4c:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <xNumberOfSuccessfulAllocations>
     c50:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <xNumberOfSuccessfulAllocations+0x1>
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	90 93 60 09 	sts	0x0960, r25	; 0x800960 <xNumberOfSuccessfulAllocations+0x1>
     c5a:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <xNumberOfSuccessfulAllocations>
     c5e:	0b c0       	rjmp	.+22     	; 0xc76 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     c60:	e1 2c       	mov	r14, r1
     c62:	f1 2c       	mov	r15, r1
     c64:	08 c0       	rjmp	.+16     	; 0xc76 <pvPortMalloc+0x134>
     c66:	e1 2c       	mov	r14, r1
     c68:	f1 2c       	mov	r15, r1
     c6a:	05 c0       	rjmp	.+10     	; 0xc76 <pvPortMalloc+0x134>
     c6c:	e1 2c       	mov	r14, r1
     c6e:	f1 2c       	mov	r15, r1
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <pvPortMalloc+0x134>
     c72:	e1 2c       	mov	r14, r1
     c74:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     c76:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     c7a:	e1 14       	cp	r14, r1
     c7c:	f1 04       	cpc	r15, r1
     c7e:	11 f4       	brne	.+4      	; 0xc84 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     c80:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     c84:	c7 01       	movw	r24, r14
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	08 95       	ret

00000c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	91 f1       	breq	.+100    	; 0xd04 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     ca0:	ec 01       	movw	r28, r24
     ca2:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     ca4:	4a 81       	ldd	r20, Y+2	; 0x02
     ca6:	5b 81       	ldd	r21, Y+3	; 0x03
     ca8:	20 91 5b 09 	lds	r18, 0x095B	; 0x80095b <xBlockAllocatedBit>
     cac:	30 91 5c 09 	lds	r19, 0x095C	; 0x80095c <xBlockAllocatedBit+0x1>
     cb0:	ba 01       	movw	r22, r20
     cb2:	62 23       	and	r22, r18
     cb4:	73 23       	and	r23, r19
     cb6:	67 2b       	or	r22, r23
     cb8:	29 f1       	breq	.+74     	; 0xd04 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     cba:	68 81       	ld	r22, Y
     cbc:	79 81       	ldd	r23, Y+1	; 0x01
     cbe:	67 2b       	or	r22, r23
     cc0:	09 f5       	brne	.+66     	; 0xd04 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     cc2:	20 95       	com	r18
     cc4:	30 95       	com	r19
     cc6:	24 23       	and	r18, r20
     cc8:	35 23       	and	r19, r21
     cca:	3b 83       	std	Y+3, r19	; 0x03
     ccc:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     cce:	0e 94 81 11 	call	0x2302	; 0x2302 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	20 91 63 09 	lds	r18, 0x0963	; 0x800963 <xFreeBytesRemaining>
     cda:	30 91 64 09 	lds	r19, 0x0964	; 0x800964 <xFreeBytesRemaining+0x1>
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	90 93 64 09 	sts	0x0964, r25	; 0x800964 <xFreeBytesRemaining+0x1>
     ce6:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     cea:	ce 01       	movw	r24, r28
     cec:	e0 de       	rcall	.-576    	; 0xaae <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     cee:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <xNumberOfSuccessfulFrees>
     cf2:	90 91 5e 09 	lds	r25, 0x095E	; 0x80095e <xNumberOfSuccessfulFrees+0x1>
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	90 93 5e 09 	sts	0x095E, r25	; 0x80095e <xNumberOfSuccessfulFrees+0x1>
     cfc:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     d00:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     d0e:	fc 01       	movw	r30, r24
     d10:	03 96       	adiw	r24, 0x03	; 3
     d12:	92 83       	std	Z+2, r25	; 0x02
     d14:	81 83       	std	Z+1, r24	; 0x01
     d16:	4f ef       	ldi	r20, 0xFF	; 255
     d18:	5f ef       	ldi	r21, 0xFF	; 255
     d1a:	ba 01       	movw	r22, r20
     d1c:	43 83       	std	Z+3, r20	; 0x03
     d1e:	54 83       	std	Z+4, r21	; 0x04
     d20:	65 83       	std	Z+5, r22	; 0x05
     d22:	76 83       	std	Z+6, r23	; 0x06
     d24:	90 87       	std	Z+8, r25	; 0x08
     d26:	87 83       	std	Z+7, r24	; 0x07
     d28:	92 87       	std	Z+10, r25	; 0x0a
     d2a:	81 87       	std	Z+9, r24	; 0x09
     d2c:	10 82       	st	Z, r1
     d2e:	08 95       	ret

00000d30 <vListInitialiseItem>:
     d30:	fc 01       	movw	r30, r24
     d32:	13 86       	std	Z+11, r1	; 0x0b
     d34:	12 86       	std	Z+10, r1	; 0x0a
     d36:	08 95       	ret

00000d38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d42:	08 81       	ld	r16, Y
     d44:	19 81       	ldd	r17, Y+1	; 0x01
     d46:	2a 81       	ldd	r18, Y+2	; 0x02
     d48:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     d4a:	0f 3f       	cpi	r16, 0xFF	; 255
     d4c:	4f ef       	ldi	r20, 0xFF	; 255
     d4e:	14 07       	cpc	r17, r20
     d50:	24 07       	cpc	r18, r20
     d52:	34 07       	cpc	r19, r20
     d54:	21 f4       	brne	.+8      	; 0xd5e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     d56:	fc 01       	movw	r30, r24
     d58:	a1 85       	ldd	r26, Z+9	; 0x09
     d5a:	b2 85       	ldd	r27, Z+10	; 0x0a
     d5c:	11 c0       	rjmp	.+34     	; 0xd80 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     d5e:	dc 01       	movw	r26, r24
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <vListInsert+0x2e>
     d64:	df 01       	movw	r26, r30
     d66:	14 96       	adiw	r26, 0x04	; 4
     d68:	ed 91       	ld	r30, X+
     d6a:	fc 91       	ld	r31, X
     d6c:	15 97       	sbiw	r26, 0x05	; 5
     d6e:	40 81       	ld	r20, Z
     d70:	51 81       	ldd	r21, Z+1	; 0x01
     d72:	62 81       	ldd	r22, Z+2	; 0x02
     d74:	73 81       	ldd	r23, Z+3	; 0x03
     d76:	04 17       	cp	r16, r20
     d78:	15 07       	cpc	r17, r21
     d7a:	26 07       	cpc	r18, r22
     d7c:	37 07       	cpc	r19, r23
     d7e:	90 f7       	brcc	.-28     	; 0xd64 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     d80:	14 96       	adiw	r26, 0x04	; 4
     d82:	ed 91       	ld	r30, X+
     d84:	fc 91       	ld	r31, X
     d86:	15 97       	sbiw	r26, 0x05	; 5
     d88:	fd 83       	std	Y+5, r31	; 0x05
     d8a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d8c:	d7 83       	std	Z+7, r29	; 0x07
     d8e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     d90:	bf 83       	std	Y+7, r27	; 0x07
     d92:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     d94:	15 96       	adiw	r26, 0x05	; 5
     d96:	dc 93       	st	X, r29
     d98:	ce 93       	st	-X, r28
     d9a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     d9c:	9b 87       	std	Y+11, r25	; 0x0b
     d9e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     da0:	fc 01       	movw	r30, r24
     da2:	20 81       	ld	r18, Z
     da4:	2f 5f       	subi	r18, 0xFF	; 255
     da6:	20 83       	st	Z, r18
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     db8:	a2 85       	ldd	r26, Z+10	; 0x0a
     dba:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     dbc:	c4 81       	ldd	r28, Z+4	; 0x04
     dbe:	d5 81       	ldd	r29, Z+5	; 0x05
     dc0:	86 81       	ldd	r24, Z+6	; 0x06
     dc2:	97 81       	ldd	r25, Z+7	; 0x07
     dc4:	9f 83       	std	Y+7, r25	; 0x07
     dc6:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     dc8:	c6 81       	ldd	r28, Z+6	; 0x06
     dca:	d7 81       	ldd	r29, Z+7	; 0x07
     dcc:	84 81       	ldd	r24, Z+4	; 0x04
     dce:	95 81       	ldd	r25, Z+5	; 0x05
     dd0:	9d 83       	std	Y+5, r25	; 0x05
     dd2:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     dd4:	11 96       	adiw	r26, 0x01	; 1
     dd6:	8d 91       	ld	r24, X+
     dd8:	9c 91       	ld	r25, X
     dda:	12 97       	sbiw	r26, 0x02	; 2
     ddc:	e8 17       	cp	r30, r24
     dde:	f9 07       	cpc	r31, r25
     de0:	31 f4       	brne	.+12     	; 0xdee <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     de2:	86 81       	ldd	r24, Z+6	; 0x06
     de4:	97 81       	ldd	r25, Z+7	; 0x07
     de6:	12 96       	adiw	r26, 0x02	; 2
     de8:	9c 93       	st	X, r25
     dea:	8e 93       	st	-X, r24
     dec:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     dee:	13 86       	std	Z+11, r1	; 0x0b
     df0:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     df2:	8c 91       	ld	r24, X
     df4:	81 50       	subi	r24, 0x01	; 1
     df6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     df8:	8c 91       	ld	r24, X
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     e00:	a8 95       	wdr
     e02:	90 ec       	ldi	r25, 0xC0	; 192
     e04:	88 e1       	ldi	r24, 0x18	; 24
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	a8 95       	wdr
     e0c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     e16:	08 95       	ret

00000e18 <pxPortInitialiseStack>:
     e18:	fc 01       	movw	r30, r24
     e1a:	60 83       	st	Z, r22
     e1c:	31 97       	sbiw	r30, 0x01	; 1
     e1e:	70 83       	st	Z, r23
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	10 82       	st	Z, r1
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	10 82       	st	Z, r1
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	20 e8       	ldi	r18, 0x80	; 128
     e2c:	20 83       	st	Z, r18
     e2e:	31 97       	sbiw	r30, 0x01	; 1
     e30:	10 82       	st	Z, r1
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	10 82       	st	Z, r1
     e36:	31 97       	sbiw	r30, 0x01	; 1
     e38:	10 82       	st	Z, r1
     e3a:	77 97       	sbiw	r30, 0x17	; 23
     e3c:	40 83       	st	Z, r20
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	50 83       	st	Z, r21
     e42:	86 97       	sbiw	r24, 0x26	; 38
     e44:	08 95       	ret

00000e46 <xPortStartScheduler>:
     e46:	dc df       	rcall	.-72     	; 0xe00 <prvSetupTimerInterrupt>
     e48:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
     e4c:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
     e50:	cd 91       	ld	r28, X+
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	dd 91       	ld	r29, X+
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	bf 90       	pop	r11
     e82:	af 90       	pop	r10
     e84:	9f 90       	pop	r9
     e86:	8f 90       	pop	r8
     e88:	7f 90       	pop	r7
     e8a:	6f 90       	pop	r6
     e8c:	5f 90       	pop	r5
     e8e:	4f 90       	pop	r4
     e90:	3f 90       	pop	r3
     e92:	2f 90       	pop	r2
     e94:	1f 90       	pop	r1
     e96:	0f 90       	pop	r0
     e98:	0c be       	out	0x3c, r0	; 60
     e9a:	0f 90       	pop	r0
     e9c:	0b be       	out	0x3b, r0	; 59
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	08 95       	ret
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	08 95       	ret

00000eaa <vPortYield>:
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	0f 92       	push	r0
     eb2:	0b b6       	in	r0, 0x3b	; 59
     eb4:	0f 92       	push	r0
     eb6:	0c b6       	in	r0, 0x3c	; 60
     eb8:	0f 92       	push	r0
     eba:	1f 92       	push	r1
     ebc:	11 24       	eor	r1, r1
     ebe:	2f 92       	push	r2
     ec0:	3f 92       	push	r3
     ec2:	4f 92       	push	r4
     ec4:	5f 92       	push	r5
     ec6:	6f 92       	push	r6
     ec8:	7f 92       	push	r7
     eca:	8f 92       	push	r8
     ecc:	9f 92       	push	r9
     ece:	af 92       	push	r10
     ed0:	bf 92       	push	r11
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
     efa:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
     efe:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
     f02:	0d b6       	in	r0, 0x3d	; 61
     f04:	0d 92       	st	X+, r0
     f06:	0e b6       	in	r0, 0x3e	; 62
     f08:	0d 92       	st	X+, r0
     f0a:	0e 94 1d 14 	call	0x283a	; 0x283a <vTaskSwitchContext>
     f0e:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
     f12:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
     f16:	cd 91       	ld	r28, X+
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	dd 91       	ld	r29, X+
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	bf 91       	pop	r27
     f28:	af 91       	pop	r26
     f2a:	9f 91       	pop	r25
     f2c:	8f 91       	pop	r24
     f2e:	7f 91       	pop	r23
     f30:	6f 91       	pop	r22
     f32:	5f 91       	pop	r21
     f34:	4f 91       	pop	r20
     f36:	3f 91       	pop	r19
     f38:	2f 91       	pop	r18
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	9f 90       	pop	r9
     f4c:	8f 90       	pop	r8
     f4e:	7f 90       	pop	r7
     f50:	6f 90       	pop	r6
     f52:	5f 90       	pop	r5
     f54:	4f 90       	pop	r4
     f56:	3f 90       	pop	r3
     f58:	2f 90       	pop	r2
     f5a:	1f 90       	pop	r1
     f5c:	0f 90       	pop	r0
     f5e:	0c be       	out	0x3c, r0	; 60
     f60:	0f 90       	pop	r0
     f62:	0b be       	out	0x3b, r0	; 59
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	08 95       	ret

00000f6c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	0f 92       	push	r0
     f74:	0b b6       	in	r0, 0x3b	; 59
     f76:	0f 92       	push	r0
     f78:	0c b6       	in	r0, 0x3c	; 60
     f7a:	0f 92       	push	r0
     f7c:	1f 92       	push	r1
     f7e:	11 24       	eor	r1, r1
     f80:	2f 92       	push	r2
     f82:	3f 92       	push	r3
     f84:	4f 92       	push	r4
     f86:	5f 92       	push	r5
     f88:	6f 92       	push	r6
     f8a:	7f 92       	push	r7
     f8c:	8f 92       	push	r8
     f8e:	9f 92       	push	r9
     f90:	af 92       	push	r10
     f92:	bf 92       	push	r11
     f94:	cf 92       	push	r12
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
     fc0:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
     fc4:	0d b6       	in	r0, 0x3d	; 61
     fc6:	0d 92       	st	X+, r0
     fc8:	0e b6       	in	r0, 0x3e	; 62
     fca:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     fcc:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     fce:	0e 94 95 11 	call	0x232a	; 0x232a <xTaskIncrementTick>
     fd2:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     fd4:	0e 94 1d 14 	call	0x283a	; 0x283a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     fd8:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
     fdc:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
     fe0:	cd 91       	ld	r28, X+
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	dd 91       	ld	r29, X+
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	df 90       	pop	r13
    100e:	cf 90       	pop	r12
    1010:	bf 90       	pop	r11
    1012:	af 90       	pop	r10
    1014:	9f 90       	pop	r9
    1016:	8f 90       	pop	r8
    1018:	7f 90       	pop	r7
    101a:	6f 90       	pop	r6
    101c:	5f 90       	pop	r5
    101e:	4f 90       	pop	r4
    1020:	3f 90       	pop	r3
    1022:	2f 90       	pop	r2
    1024:	1f 90       	pop	r1
    1026:	0f 90       	pop	r0
    1028:	0c be       	out	0x3c, r0	; 60
    102a:	0f 90       	pop	r0
    102c:	0b be       	out	0x3b, r0	; 59
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1034:	08 95       	ret

00001036 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1036:	9a df       	rcall	.-204    	; 0xf6c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1038:	18 95       	reti

0000103a <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    103a:	dc 01       	movw	r26, r24
    103c:	53 96       	adiw	r26, 0x13	; 19
    103e:	2c 91       	ld	r18, X
    1040:	53 97       	sbiw	r26, 0x13	; 19
    1042:	22 23       	and	r18, r18
    1044:	41 f0       	breq	.+16     	; 0x1056 <prvGetDisinheritPriorityAfterTimeout+0x1c>
    1046:	5a 96       	adiw	r26, 0x1a	; 26
    1048:	ed 91       	ld	r30, X+
    104a:	fc 91       	ld	r31, X
    104c:	5b 97       	sbiw	r26, 0x1b	; 27
    104e:	90 81       	ld	r25, Z
    1050:	8a e0       	ldi	r24, 0x0A	; 10
    1052:	89 1b       	sub	r24, r25
    1054:	08 95       	ret
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	08 95       	ret

0000105a <prvIsQueueEmpty>:
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	0f 92       	push	r0
    1060:	fc 01       	movw	r30, r24
    1062:	86 8d       	ldd	r24, Z+30	; 0x1e
    1064:	81 11       	cpse	r24, r1
    1066:	02 c0       	rjmp	.+4      	; 0x106c <prvIsQueueEmpty+0x12>
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	01 c0       	rjmp	.+2      	; 0x106e <prvIsQueueEmpty+0x14>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	0f 90       	pop	r0
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	08 95       	ret

00001074 <prvIsQueueFull>:
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	0f 92       	push	r0
    107a:	fc 01       	movw	r30, r24
    107c:	26 8d       	ldd	r18, Z+30	; 0x1e
    107e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1080:	28 13       	cpse	r18, r24
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <prvIsQueueFull+0x14>
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	01 c0       	rjmp	.+2      	; 0x108a <prvIsQueueFull+0x16>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	08 95       	ret

00001090 <prvCopyDataToQueue>:
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	ec 01       	movw	r28, r24
    109a:	04 2f       	mov	r16, r20
    109c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    109e:	48 a1       	ldd	r20, Y+32	; 0x20
    10a0:	41 11       	cpse	r20, r1
    10a2:	0c c0       	rjmp	.+24     	; 0x10bc <prvCopyDataToQueue+0x2c>
    10a4:	88 81       	ld	r24, Y
    10a6:	99 81       	ldd	r25, Y+1	; 0x01
    10a8:	89 2b       	or	r24, r25
    10aa:	09 f0       	breq	.+2      	; 0x10ae <prvCopyDataToQueue+0x1e>
    10ac:	42 c0       	rjmp	.+132    	; 0x1132 <prvCopyDataToQueue+0xa2>
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	0e 94 99 17 	call	0x2f32	; 0x2f32 <xTaskPriorityDisinherit>
    10b6:	1d 82       	std	Y+5, r1	; 0x05
    10b8:	1c 82       	std	Y+4, r1	; 0x04
    10ba:	42 c0       	rjmp	.+132    	; 0x1140 <prvCopyDataToQueue+0xb0>
    10bc:	01 11       	cpse	r16, r1
    10be:	17 c0       	rjmp	.+46     	; 0x10ee <prvCopyDataToQueue+0x5e>
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <memcpy>
    10ca:	28 a1       	ldd	r18, Y+32	; 0x20
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	9b 81       	ldd	r25, Y+3	; 0x03
    10d0:	82 0f       	add	r24, r18
    10d2:	91 1d       	adc	r25, r1
    10d4:	9b 83       	std	Y+3, r25	; 0x03
    10d6:	8a 83       	std	Y+2, r24	; 0x02
    10d8:	2c 81       	ldd	r18, Y+4	; 0x04
    10da:	3d 81       	ldd	r19, Y+5	; 0x05
    10dc:	82 17       	cp	r24, r18
    10de:	93 07       	cpc	r25, r19
    10e0:	50 f1       	brcs	.+84     	; 0x1136 <prvCopyDataToQueue+0xa6>
    10e2:	88 81       	ld	r24, Y
    10e4:	99 81       	ldd	r25, Y+1	; 0x01
    10e6:	9b 83       	std	Y+3, r25	; 0x03
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	29 c0       	rjmp	.+82     	; 0x1140 <prvCopyDataToQueue+0xb0>
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	8e 81       	ldd	r24, Y+6	; 0x06
    10f2:	9f 81       	ldd	r25, Y+7	; 0x07
    10f4:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <memcpy>
    10f8:	88 a1       	ldd	r24, Y+32	; 0x20
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	91 95       	neg	r25
    10fe:	81 95       	neg	r24
    1100:	91 09       	sbc	r25, r1
    1102:	2e 81       	ldd	r18, Y+6	; 0x06
    1104:	3f 81       	ldd	r19, Y+7	; 0x07
    1106:	28 0f       	add	r18, r24
    1108:	39 1f       	adc	r19, r25
    110a:	3f 83       	std	Y+7, r19	; 0x07
    110c:	2e 83       	std	Y+6, r18	; 0x06
    110e:	48 81       	ld	r20, Y
    1110:	59 81       	ldd	r21, Y+1	; 0x01
    1112:	24 17       	cp	r18, r20
    1114:	35 07       	cpc	r19, r21
    1116:	30 f4       	brcc	.+12     	; 0x1124 <prvCopyDataToQueue+0x94>
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	3d 81       	ldd	r19, Y+5	; 0x05
    111c:	82 0f       	add	r24, r18
    111e:	93 1f       	adc	r25, r19
    1120:	9f 83       	std	Y+7, r25	; 0x07
    1122:	8e 83       	std	Y+6, r24	; 0x06
    1124:	02 30       	cpi	r16, 0x02	; 2
    1126:	49 f4       	brne	.+18     	; 0x113a <prvCopyDataToQueue+0xaa>
    1128:	11 23       	and	r17, r17
    112a:	49 f0       	breq	.+18     	; 0x113e <prvCopyDataToQueue+0xae>
    112c:	11 50       	subi	r17, 0x01	; 1
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <prvCopyDataToQueue+0xb0>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <prvCopyDataToQueue+0xb0>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <prvCopyDataToQueue+0xb0>
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <prvCopyDataToQueue+0xb0>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	1f 5f       	subi	r17, 0xFF	; 255
    1142:	1e 8f       	std	Y+30, r17	; 0x1e
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <prvCopyDataFromQueue>:
    114e:	fc 01       	movw	r30, r24
    1150:	40 a1       	ldd	r20, Z+32	; 0x20
    1152:	44 23       	and	r20, r20
    1154:	a9 f0       	breq	.+42     	; 0x1180 <prvCopyDataFromQueue+0x32>
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	26 81       	ldd	r18, Z+6	; 0x06
    115a:	37 81       	ldd	r19, Z+7	; 0x07
    115c:	24 0f       	add	r18, r20
    115e:	35 1f       	adc	r19, r21
    1160:	37 83       	std	Z+7, r19	; 0x07
    1162:	26 83       	std	Z+6, r18	; 0x06
    1164:	84 81       	ldd	r24, Z+4	; 0x04
    1166:	95 81       	ldd	r25, Z+5	; 0x05
    1168:	28 17       	cp	r18, r24
    116a:	39 07       	cpc	r19, r25
    116c:	20 f0       	brcs	.+8      	; 0x1176 <prvCopyDataFromQueue+0x28>
    116e:	80 81       	ld	r24, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    1172:	97 83       	std	Z+7, r25	; 0x07
    1174:	86 83       	std	Z+6, r24	; 0x06
    1176:	cb 01       	movw	r24, r22
    1178:	66 81       	ldd	r22, Z+6	; 0x06
    117a:	77 81       	ldd	r23, Z+7	; 0x07
    117c:	0c 94 a3 36 	jmp	0x6d46	; 0x6d46 <memcpy>
    1180:	08 95       	ret

00001182 <prvUnlockQueue>:
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ec 01       	movw	r28, r24
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	0f 92       	push	r0
    1190:	1a a1       	ldd	r17, Y+34	; 0x22
    1192:	0b c0       	rjmp	.+22     	; 0x11aa <prvUnlockQueue+0x28>
    1194:	8b 89       	ldd	r24, Y+19	; 0x13
    1196:	88 23       	and	r24, r24
    1198:	51 f0       	breq	.+20     	; 0x11ae <prvUnlockQueue+0x2c>
    119a:	ce 01       	movw	r24, r28
    119c:	43 96       	adiw	r24, 0x13	; 19
    119e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <xTaskRemoveFromEventList>
    11a2:	81 11       	cpse	r24, r1
    11a4:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <vTaskMissedYield>
    11a8:	11 50       	subi	r17, 0x01	; 1
    11aa:	11 16       	cp	r1, r17
    11ac:	9c f3       	brlt	.-26     	; 0x1194 <prvUnlockQueue+0x12>
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	8a a3       	std	Y+34, r24	; 0x22
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	0f 92       	push	r0
    11bc:	19 a1       	ldd	r17, Y+33	; 0x21
    11be:	0b c0       	rjmp	.+22     	; 0x11d6 <prvUnlockQueue+0x54>
    11c0:	88 85       	ldd	r24, Y+8	; 0x08
    11c2:	88 23       	and	r24, r24
    11c4:	51 f0       	breq	.+20     	; 0x11da <prvUnlockQueue+0x58>
    11c6:	ce 01       	movw	r24, r28
    11c8:	08 96       	adiw	r24, 0x08	; 8
    11ca:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <xTaskRemoveFromEventList>
    11ce:	81 11       	cpse	r24, r1
    11d0:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <vTaskMissedYield>
    11d4:	11 50       	subi	r17, 0x01	; 1
    11d6:	11 16       	cp	r1, r17
    11d8:	9c f3       	brlt	.-26     	; 0x11c0 <prvUnlockQueue+0x3e>
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	89 a3       	std	Y+33, r24	; 0x21
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	08 95       	ret

000011ea <xQueueGenericReset>:
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ec 01       	movw	r28, r24
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	0f 92       	push	r0
    11f6:	e8 81       	ld	r30, Y
    11f8:	f9 81       	ldd	r31, Y+1	; 0x01
    11fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11fc:	28 a1       	ldd	r18, Y+32	; 0x20
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	82 9f       	mul	r24, r18
    1204:	a0 01       	movw	r20, r0
    1206:	83 9f       	mul	r24, r19
    1208:	50 0d       	add	r21, r0
    120a:	92 9f       	mul	r25, r18
    120c:	50 0d       	add	r21, r0
    120e:	11 24       	eor	r1, r1
    1210:	4e 0f       	add	r20, r30
    1212:	5f 1f       	adc	r21, r31
    1214:	5d 83       	std	Y+5, r21	; 0x05
    1216:	4c 83       	std	Y+4, r20	; 0x04
    1218:	1e 8e       	std	Y+30, r1	; 0x1e
    121a:	fb 83       	std	Y+3, r31	; 0x03
    121c:	ea 83       	std	Y+2, r30	; 0x02
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	28 9f       	mul	r18, r24
    1222:	a0 01       	movw	r20, r0
    1224:	29 9f       	mul	r18, r25
    1226:	50 0d       	add	r21, r0
    1228:	38 9f       	mul	r19, r24
    122a:	50 0d       	add	r21, r0
    122c:	11 24       	eor	r1, r1
    122e:	cf 01       	movw	r24, r30
    1230:	84 0f       	add	r24, r20
    1232:	95 1f       	adc	r25, r21
    1234:	9f 83       	std	Y+7, r25	; 0x07
    1236:	8e 83       	std	Y+6, r24	; 0x06
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	89 a3       	std	Y+33, r24	; 0x21
    123c:	8a a3       	std	Y+34, r24	; 0x22
    123e:	61 11       	cpse	r22, r1
    1240:	0b c0       	rjmp	.+22     	; 0x1258 <xQueueGenericReset+0x6e>
    1242:	88 85       	ldd	r24, Y+8	; 0x08
    1244:	88 23       	and	r24, r24
    1246:	71 f0       	breq	.+28     	; 0x1264 <xQueueGenericReset+0x7a>
    1248:	ce 01       	movw	r24, r28
    124a:	08 96       	adiw	r24, 0x08	; 8
    124c:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <xTaskRemoveFromEventList>
    1250:	88 23       	and	r24, r24
    1252:	41 f0       	breq	.+16     	; 0x1264 <xQueueGenericReset+0x7a>
    1254:	2a de       	rcall	.-940    	; 0xeaa <vPortYield>
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <xQueueGenericReset+0x7a>
    1258:	ce 01       	movw	r24, r28
    125a:	08 96       	adiw	r24, 0x08	; 8
    125c:	58 dd       	rcall	.-1360   	; 0xd0e <vListInitialise>
    125e:	ce 01       	movw	r24, r28
    1260:	43 96       	adiw	r24, 0x13	; 19
    1262:	55 dd       	rcall	.-1366   	; 0xd0e <vListInitialise>
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <prvInitialiseNewQueue>:
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	f8 01       	movw	r30, r16
    1276:	61 11       	cpse	r22, r1
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <prvInitialiseNewQueue+0x10>
    127a:	11 83       	std	Z+1, r17	; 0x01
    127c:	00 83       	st	Z, r16
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <prvInitialiseNewQueue+0x14>
    1280:	51 83       	std	Z+1, r21	; 0x01
    1282:	40 83       	st	Z, r20
    1284:	87 8f       	std	Z+31, r24	; 0x1f
    1286:	60 a3       	std	Z+32, r22	; 0x20
    1288:	61 e0       	ldi	r22, 0x01	; 1
    128a:	cf 01       	movw	r24, r30
    128c:	ae df       	rcall	.-164    	; 0x11ea <xQueueGenericReset>
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	08 95       	ret

00001294 <xQueueGenericCreate>:
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	f8 2e       	mov	r15, r24
    12a4:	e6 2e       	mov	r14, r22
    12a6:	d4 2e       	mov	r13, r20
    12a8:	86 9f       	mul	r24, r22
    12aa:	c0 01       	movw	r24, r0
    12ac:	11 24       	eor	r1, r1
    12ae:	83 96       	adiw	r24, 0x23	; 35
    12b0:	48 dc       	rcall	.-1904   	; 0xb42 <pvPortMalloc>
    12b2:	ec 01       	movw	r28, r24
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	41 f0       	breq	.+16     	; 0x12c8 <xQueueGenericCreate+0x34>
    12b8:	8c 01       	movw	r16, r24
    12ba:	2d 2d       	mov	r18, r13
    12bc:	ac 01       	movw	r20, r24
    12be:	4d 5d       	subi	r20, 0xDD	; 221
    12c0:	5f 4f       	sbci	r21, 0xFF	; 255
    12c2:	6e 2d       	mov	r22, r14
    12c4:	8f 2d       	mov	r24, r15
    12c6:	d4 df       	rcall	.-88     	; 0x1270 <prvInitialiseNewQueue>
    12c8:	ce 01       	movw	r24, r28
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	08 95       	ret

000012da <xQueueGenericSend>:
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	29 97       	sbiw	r28, 0x09	; 9
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	7c 01       	movw	r14, r24
    12fc:	6b 01       	movw	r12, r22
    12fe:	2e 83       	std	Y+6, r18	; 0x06
    1300:	3f 83       	std	Y+7, r19	; 0x07
    1302:	48 87       	std	Y+8, r20	; 0x08
    1304:	59 87       	std	Y+9, r21	; 0x09
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	0f 92       	push	r0
    130e:	f7 01       	movw	r30, r14
    1310:	96 8d       	ldd	r25, Z+30	; 0x1e
    1312:	87 8d       	ldd	r24, Z+31	; 0x1f
    1314:	98 17       	cp	r25, r24
    1316:	10 f0       	brcs	.+4      	; 0x131c <xQueueGenericSend+0x42>
    1318:	02 30       	cpi	r16, 0x02	; 2
    131a:	b1 f4       	brne	.+44     	; 0x1348 <xQueueGenericSend+0x6e>
    131c:	40 2f       	mov	r20, r16
    131e:	b6 01       	movw	r22, r12
    1320:	c7 01       	movw	r24, r14
    1322:	b6 de       	rcall	.-660    	; 0x1090 <prvCopyDataToQueue>
    1324:	f7 01       	movw	r30, r14
    1326:	93 89       	ldd	r25, Z+19	; 0x13
    1328:	99 23       	and	r25, r25
    132a:	41 f0       	breq	.+16     	; 0x133c <xQueueGenericSend+0x62>
    132c:	c7 01       	movw	r24, r14
    132e:	43 96       	adiw	r24, 0x13	; 19
    1330:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <xTaskRemoveFromEventList>
    1334:	88 23       	and	r24, r24
    1336:	21 f0       	breq	.+8      	; 0x1340 <xQueueGenericSend+0x66>
    1338:	b8 dd       	rcall	.-1168   	; 0xeaa <vPortYield>
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <xQueueGenericSend+0x66>
    133c:	81 11       	cpse	r24, r1
    133e:	b5 dd       	rcall	.-1174   	; 0xeaa <vPortYield>
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	4c c0       	rjmp	.+152    	; 0x13e0 <xQueueGenericSend+0x106>
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	a8 85       	ldd	r26, Y+8	; 0x08
    134e:	b9 85       	ldd	r27, Y+9	; 0x09
    1350:	89 2b       	or	r24, r25
    1352:	8a 2b       	or	r24, r26
    1354:	8b 2b       	or	r24, r27
    1356:	21 f4       	brne	.+8      	; 0x1360 <xQueueGenericSend+0x86>
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	40 c0       	rjmp	.+128    	; 0x13e0 <xQueueGenericSend+0x106>
    1360:	11 11       	cpse	r17, r1
    1362:	05 c0       	rjmp	.+10     	; 0x136e <xQueueGenericSend+0x94>
    1364:	ce 01       	movw	r24, r28
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	0e 94 84 16 	call	0x2d08	; 0x2d08 <vTaskInternalSetTimeOutState>
    136c:	11 e0       	ldi	r17, 0x01	; 1
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	c7 d7       	rcall	.+3982   	; 0x2302 <vTaskSuspendAll>
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	0f 92       	push	r0
    137a:	f7 01       	movw	r30, r14
    137c:	81 a1       	ldd	r24, Z+33	; 0x21
    137e:	8f 3f       	cpi	r24, 0xFF	; 255
    1380:	09 f4       	brne	.+2      	; 0x1384 <xQueueGenericSend+0xaa>
    1382:	11 a2       	std	Z+33, r1	; 0x21
    1384:	f7 01       	movw	r30, r14
    1386:	82 a1       	ldd	r24, Z+34	; 0x22
    1388:	8f 3f       	cpi	r24, 0xFF	; 255
    138a:	09 f4       	brne	.+2      	; 0x138e <xQueueGenericSend+0xb4>
    138c:	12 a2       	std	Z+34, r1	; 0x22
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	be 01       	movw	r22, r28
    1394:	6a 5f       	subi	r22, 0xFA	; 250
    1396:	7f 4f       	sbci	r23, 0xFF	; 255
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <xTaskCheckForTimeOut>
    13a0:	81 11       	cpse	r24, r1
    13a2:	19 c0       	rjmp	.+50     	; 0x13d6 <xQueueGenericSend+0xfc>
    13a4:	c7 01       	movw	r24, r14
    13a6:	66 de       	rcall	.-820    	; 0x1074 <prvIsQueueFull>
    13a8:	88 23       	and	r24, r24
    13aa:	81 f0       	breq	.+32     	; 0x13cc <xQueueGenericSend+0xf2>
    13ac:	4e 81       	ldd	r20, Y+6	; 0x06
    13ae:	5f 81       	ldd	r21, Y+7	; 0x07
    13b0:	68 85       	ldd	r22, Y+8	; 0x08
    13b2:	79 85       	ldd	r23, Y+9	; 0x09
    13b4:	c7 01       	movw	r24, r14
    13b6:	08 96       	adiw	r24, 0x08	; 8
    13b8:	0e 94 82 14 	call	0x2904	; 0x2904 <vTaskPlaceOnEventList>
    13bc:	c7 01       	movw	r24, r14
    13be:	e1 de       	rcall	.-574    	; 0x1182 <prvUnlockQueue>
    13c0:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>
    13c4:	81 11       	cpse	r24, r1
    13c6:	a0 cf       	rjmp	.-192    	; 0x1308 <xQueueGenericSend+0x2e>
    13c8:	70 dd       	rcall	.-1312   	; 0xeaa <vPortYield>
    13ca:	9e cf       	rjmp	.-196    	; 0x1308 <xQueueGenericSend+0x2e>
    13cc:	c7 01       	movw	r24, r14
    13ce:	d9 de       	rcall	.-590    	; 0x1182 <prvUnlockQueue>
    13d0:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>
    13d4:	99 cf       	rjmp	.-206    	; 0x1308 <xQueueGenericSend+0x2e>
    13d6:	c7 01       	movw	r24, r14
    13d8:	d4 de       	rcall	.-600    	; 0x1182 <prvUnlockQueue>
    13da:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	29 96       	adiw	r28, 0x09	; 9
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	08 95       	ret

000013fe <prvInitialiseMutex>:
    13fe:	0f 93       	push	r16
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	69 f0       	breq	.+26     	; 0x141e <prvInitialiseMutex+0x20>
    1404:	fc 01       	movw	r30, r24
    1406:	15 82       	std	Z+5, r1	; 0x05
    1408:	14 82       	std	Z+4, r1	; 0x04
    140a:	11 82       	std	Z+1, r1	; 0x01
    140c:	10 82       	st	Z, r1
    140e:	16 82       	std	Z+6, r1	; 0x06
    1410:	00 e0       	ldi	r16, 0x00	; 0
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	5e df       	rcall	.-324    	; 0x12da <xQueueGenericSend>
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <xQueueCreateMutex>:
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	48 2f       	mov	r20, r24
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	33 df       	rcall	.-410    	; 0x1294 <xQueueGenericCreate>
    142e:	ec 01       	movw	r28, r24
    1430:	e6 df       	rcall	.-52     	; 0x13fe <prvInitialiseMutex>
    1432:	ce 01       	movw	r24, r28
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <xQueueGenericSendFromISR>:
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	8a 01       	movw	r16, r20
    1448:	fc 01       	movw	r30, r24
    144a:	56 8d       	ldd	r21, Z+30	; 0x1e
    144c:	37 8d       	ldd	r19, Z+31	; 0x1f
    144e:	53 17       	cp	r21, r19
    1450:	10 f0       	brcs	.+4      	; 0x1456 <xQueueGenericSendFromISR+0x1c>
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	f9 f4       	brne	.+62     	; 0x1494 <xQueueGenericSendFromISR+0x5a>
    1456:	42 2f       	mov	r20, r18
    1458:	78 01       	movw	r14, r16
    145a:	ec 01       	movw	r28, r24
    145c:	1a a1       	ldd	r17, Y+34	; 0x22
    145e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1460:	ce 01       	movw	r24, r28
    1462:	16 de       	rcall	.-980    	; 0x1090 <prvCopyDataToQueue>
    1464:	1f 3f       	cpi	r17, 0xFF	; 255
    1466:	81 f4       	brne	.+32     	; 0x1488 <xQueueGenericSendFromISR+0x4e>
    1468:	8b 89       	ldd	r24, Y+19	; 0x13
    146a:	88 23       	and	r24, r24
    146c:	a9 f0       	breq	.+42     	; 0x1498 <xQueueGenericSendFromISR+0x5e>
    146e:	ce 01       	movw	r24, r28
    1470:	43 96       	adiw	r24, 0x13	; 19
    1472:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <xTaskRemoveFromEventList>
    1476:	88 23       	and	r24, r24
    1478:	89 f0       	breq	.+34     	; 0x149c <xQueueGenericSendFromISR+0x62>
    147a:	e1 14       	cp	r14, r1
    147c:	f1 04       	cpc	r15, r1
    147e:	81 f0       	breq	.+32     	; 0x14a0 <xQueueGenericSendFromISR+0x66>
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	f7 01       	movw	r30, r14
    1484:	80 83       	st	Z, r24
    1486:	0d c0       	rjmp	.+26     	; 0x14a2 <xQueueGenericSendFromISR+0x68>
    1488:	ff 24       	eor	r15, r15
    148a:	f3 94       	inc	r15
    148c:	f1 0e       	add	r15, r17
    148e:	fa a2       	std	Y+34, r15	; 0x22
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <xQueueGenericSendFromISR+0x68>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	05 c0       	rjmp	.+10     	; 0x14a2 <xQueueGenericSendFromISR+0x68>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	03 c0       	rjmp	.+6      	; 0x14a2 <xQueueGenericSendFromISR+0x68>
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <xQueueGenericSendFromISR+0x68>
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	08 95       	ret

000014b0 <xQueueReceive>:
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	29 97       	sbiw	r28, 0x09	; 9
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	8c 01       	movw	r16, r24
    14d2:	6b 01       	movw	r12, r22
    14d4:	2e 83       	std	Y+6, r18	; 0x06
    14d6:	3f 83       	std	Y+7, r19	; 0x07
    14d8:	48 87       	std	Y+8, r20	; 0x08
    14da:	59 87       	std	Y+9, r21	; 0x09
    14dc:	e1 2c       	mov	r14, r1
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	0f 92       	push	r0
    14e4:	f8 01       	movw	r30, r16
    14e6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    14e8:	ff 20       	and	r15, r15
    14ea:	99 f0       	breq	.+38     	; 0x1512 <xQueueReceive+0x62>
    14ec:	b6 01       	movw	r22, r12
    14ee:	c8 01       	movw	r24, r16
    14f0:	2e de       	rcall	.-932    	; 0x114e <prvCopyDataFromQueue>
    14f2:	fa 94       	dec	r15
    14f4:	f8 01       	movw	r30, r16
    14f6:	f6 8e       	std	Z+30, r15	; 0x1e
    14f8:	80 85       	ldd	r24, Z+8	; 0x08
    14fa:	88 23       	and	r24, r24
    14fc:	31 f0       	breq	.+12     	; 0x150a <xQueueReceive+0x5a>
    14fe:	c8 01       	movw	r24, r16
    1500:	08 96       	adiw	r24, 0x08	; 8
    1502:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <xTaskRemoveFromEventList>
    1506:	81 11       	cpse	r24, r1
    1508:	d0 dc       	rcall	.-1632   	; 0xeaa <vPortYield>
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	4f c0       	rjmp	.+158    	; 0x15b0 <xQueueReceive+0x100>
    1512:	8e 81       	ldd	r24, Y+6	; 0x06
    1514:	9f 81       	ldd	r25, Y+7	; 0x07
    1516:	a8 85       	ldd	r26, Y+8	; 0x08
    1518:	b9 85       	ldd	r27, Y+9	; 0x09
    151a:	89 2b       	or	r24, r25
    151c:	8a 2b       	or	r24, r26
    151e:	8b 2b       	or	r24, r27
    1520:	21 f4       	brne	.+8      	; 0x152a <xQueueReceive+0x7a>
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	43 c0       	rjmp	.+134    	; 0x15b0 <xQueueReceive+0x100>
    152a:	e1 10       	cpse	r14, r1
    152c:	06 c0       	rjmp	.+12     	; 0x153a <xQueueReceive+0x8a>
    152e:	ce 01       	movw	r24, r28
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	0e 94 84 16 	call	0x2d08	; 0x2d08 <vTaskInternalSetTimeOutState>
    1536:	ee 24       	eor	r14, r14
    1538:	e3 94       	inc	r14
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	e1 d6       	rcall	.+3522   	; 0x2302 <vTaskSuspendAll>
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	0f 92       	push	r0
    1546:	f8 01       	movw	r30, r16
    1548:	81 a1       	ldd	r24, Z+33	; 0x21
    154a:	8f 3f       	cpi	r24, 0xFF	; 255
    154c:	09 f4       	brne	.+2      	; 0x1550 <xQueueReceive+0xa0>
    154e:	11 a2       	std	Z+33, r1	; 0x21
    1550:	f8 01       	movw	r30, r16
    1552:	82 a1       	ldd	r24, Z+34	; 0x22
    1554:	8f 3f       	cpi	r24, 0xFF	; 255
    1556:	09 f4       	brne	.+2      	; 0x155a <xQueueReceive+0xaa>
    1558:	12 a2       	std	Z+34, r1	; 0x22
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	be 01       	movw	r22, r28
    1560:	6a 5f       	subi	r22, 0xFA	; 250
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	ce 01       	movw	r24, r28
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <xTaskCheckForTimeOut>
    156c:	81 11       	cpse	r24, r1
    156e:	17 c0       	rjmp	.+46     	; 0x159e <xQueueReceive+0xee>
    1570:	c8 01       	movw	r24, r16
    1572:	73 dd       	rcall	.-1306   	; 0x105a <prvIsQueueEmpty>
    1574:	88 23       	and	r24, r24
    1576:	79 f0       	breq	.+30     	; 0x1596 <xQueueReceive+0xe6>
    1578:	4e 81       	ldd	r20, Y+6	; 0x06
    157a:	5f 81       	ldd	r21, Y+7	; 0x07
    157c:	68 85       	ldd	r22, Y+8	; 0x08
    157e:	79 85       	ldd	r23, Y+9	; 0x09
    1580:	c8 01       	movw	r24, r16
    1582:	43 96       	adiw	r24, 0x13	; 19
    1584:	0e 94 82 14 	call	0x2904	; 0x2904 <vTaskPlaceOnEventList>
    1588:	c8 01       	movw	r24, r16
    158a:	fb dd       	rcall	.-1034   	; 0x1182 <prvUnlockQueue>
    158c:	fa d7       	rcall	.+4084   	; 0x2582 <xTaskResumeAll>
    158e:	81 11       	cpse	r24, r1
    1590:	a6 cf       	rjmp	.-180    	; 0x14de <xQueueReceive+0x2e>
    1592:	8b dc       	rcall	.-1770   	; 0xeaa <vPortYield>
    1594:	a4 cf       	rjmp	.-184    	; 0x14de <xQueueReceive+0x2e>
    1596:	c8 01       	movw	r24, r16
    1598:	f4 dd       	rcall	.-1048   	; 0x1182 <prvUnlockQueue>
    159a:	f3 d7       	rcall	.+4070   	; 0x2582 <xTaskResumeAll>
    159c:	a0 cf       	rjmp	.-192    	; 0x14de <xQueueReceive+0x2e>
    159e:	c8 01       	movw	r24, r16
    15a0:	f0 dd       	rcall	.-1056   	; 0x1182 <prvUnlockQueue>
    15a2:	ef d7       	rcall	.+4062   	; 0x2582 <xTaskResumeAll>
    15a4:	c8 01       	movw	r24, r16
    15a6:	59 dd       	rcall	.-1358   	; 0x105a <prvIsQueueEmpty>
    15a8:	88 23       	and	r24, r24
    15aa:	09 f4       	brne	.+2      	; 0x15ae <xQueueReceive+0xfe>
    15ac:	98 cf       	rjmp	.-208    	; 0x14de <xQueueReceive+0x2e>
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	29 96       	adiw	r28, 0x09	; 9
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	df 90       	pop	r13
    15ca:	cf 90       	pop	r12
    15cc:	08 95       	ret

000015ce <xQueueSemaphoreTake>:
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	29 97       	sbiw	r28, 0x09	; 9
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	8c 01       	movw	r16, r24
    15ec:	4e 83       	std	Y+6, r20	; 0x06
    15ee:	5f 83       	std	Y+7, r21	; 0x07
    15f0:	68 87       	std	Y+8, r22	; 0x08
    15f2:	79 87       	std	Y+9, r23	; 0x09
    15f4:	e1 2c       	mov	r14, r1
    15f6:	f1 2c       	mov	r15, r1
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	0f 92       	push	r0
    15fe:	f8 01       	movw	r30, r16
    1600:	86 8d       	ldd	r24, Z+30	; 0x1e
    1602:	88 23       	and	r24, r24
    1604:	c9 f0       	breq	.+50     	; 0x1638 <xQueueSemaphoreTake+0x6a>
    1606:	81 50       	subi	r24, 0x01	; 1
    1608:	86 8f       	std	Z+30, r24	; 0x1e
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	89 2b       	or	r24, r25
    1610:	29 f4       	brne	.+10     	; 0x161c <xQueueSemaphoreTake+0x4e>
    1612:	0e 94 85 18 	call	0x310a	; 0x310a <pvTaskIncrementMutexHeldCount>
    1616:	f8 01       	movw	r30, r16
    1618:	95 83       	std	Z+5, r25	; 0x05
    161a:	84 83       	std	Z+4, r24	; 0x04
    161c:	f8 01       	movw	r30, r16
    161e:	80 85       	ldd	r24, Z+8	; 0x08
    1620:	88 23       	and	r24, r24
    1622:	31 f0       	breq	.+12     	; 0x1630 <xQueueSemaphoreTake+0x62>
    1624:	c8 01       	movw	r24, r16
    1626:	08 96       	adiw	r24, 0x08	; 8
    1628:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <xTaskRemoveFromEventList>
    162c:	81 11       	cpse	r24, r1
    162e:	3d dc       	rcall	.-1926   	; 0xeaa <vPortYield>
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	6f c0       	rjmp	.+222    	; 0x1716 <xQueueSemaphoreTake+0x148>
    1638:	8e 81       	ldd	r24, Y+6	; 0x06
    163a:	9f 81       	ldd	r25, Y+7	; 0x07
    163c:	a8 85       	ldd	r26, Y+8	; 0x08
    163e:	b9 85       	ldd	r27, Y+9	; 0x09
    1640:	89 2b       	or	r24, r25
    1642:	8a 2b       	or	r24, r26
    1644:	8b 2b       	or	r24, r27
    1646:	21 f4       	brne	.+8      	; 0x1650 <xQueueSemaphoreTake+0x82>
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	63 c0       	rjmp	.+198    	; 0x1716 <xQueueSemaphoreTake+0x148>
    1650:	f1 10       	cpse	r15, r1
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <xQueueSemaphoreTake+0x92>
    1654:	ce 01       	movw	r24, r28
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	0e 94 84 16 	call	0x2d08	; 0x2d08 <vTaskInternalSetTimeOutState>
    165c:	ff 24       	eor	r15, r15
    165e:	f3 94       	inc	r15
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	4e d6       	rcall	.+3228   	; 0x2302 <vTaskSuspendAll>
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	0f 92       	push	r0
    166c:	f8 01       	movw	r30, r16
    166e:	81 a1       	ldd	r24, Z+33	; 0x21
    1670:	8f 3f       	cpi	r24, 0xFF	; 255
    1672:	09 f4       	brne	.+2      	; 0x1676 <xQueueSemaphoreTake+0xa8>
    1674:	11 a2       	std	Z+33, r1	; 0x21
    1676:	f8 01       	movw	r30, r16
    1678:	82 a1       	ldd	r24, Z+34	; 0x22
    167a:	8f 3f       	cpi	r24, 0xFF	; 255
    167c:	09 f4       	brne	.+2      	; 0x1680 <xQueueSemaphoreTake+0xb2>
    167e:	12 a2       	std	Z+34, r1	; 0x22
    1680:	0f 90       	pop	r0
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	be 01       	movw	r22, r28
    1686:	6a 5f       	subi	r22, 0xFA	; 250
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	ce 01       	movw	r24, r28
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <xTaskCheckForTimeOut>
    1692:	81 11       	cpse	r24, r1
    1694:	26 c0       	rjmp	.+76     	; 0x16e2 <xQueueSemaphoreTake+0x114>
    1696:	c8 01       	movw	r24, r16
    1698:	e0 dc       	rcall	.-1600   	; 0x105a <prvIsQueueEmpty>
    169a:	88 23       	and	r24, r24
    169c:	f1 f0       	breq	.+60     	; 0x16da <xQueueSemaphoreTake+0x10c>
    169e:	f8 01       	movw	r30, r16
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	89 2b       	or	r24, r25
    16a6:	51 f4       	brne	.+20     	; 0x16bc <xQueueSemaphoreTake+0xee>
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	0f 92       	push	r0
    16ae:	84 81       	ldd	r24, Z+4	; 0x04
    16b0:	95 81       	ldd	r25, Z+5	; 0x05
    16b2:	0e 94 12 17 	call	0x2e24	; 0x2e24 <xTaskPriorityInherit>
    16b6:	e8 2e       	mov	r14, r24
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	4e 81       	ldd	r20, Y+6	; 0x06
    16be:	5f 81       	ldd	r21, Y+7	; 0x07
    16c0:	68 85       	ldd	r22, Y+8	; 0x08
    16c2:	79 85       	ldd	r23, Y+9	; 0x09
    16c4:	c8 01       	movw	r24, r16
    16c6:	43 96       	adiw	r24, 0x13	; 19
    16c8:	0e 94 82 14 	call	0x2904	; 0x2904 <vTaskPlaceOnEventList>
    16cc:	c8 01       	movw	r24, r16
    16ce:	59 dd       	rcall	.-1358   	; 0x1182 <prvUnlockQueue>
    16d0:	58 d7       	rcall	.+3760   	; 0x2582 <xTaskResumeAll>
    16d2:	81 11       	cpse	r24, r1
    16d4:	91 cf       	rjmp	.-222    	; 0x15f8 <xQueueSemaphoreTake+0x2a>
    16d6:	e9 db       	rcall	.-2094   	; 0xeaa <vPortYield>
    16d8:	8f cf       	rjmp	.-226    	; 0x15f8 <xQueueSemaphoreTake+0x2a>
    16da:	c8 01       	movw	r24, r16
    16dc:	52 dd       	rcall	.-1372   	; 0x1182 <prvUnlockQueue>
    16de:	51 d7       	rcall	.+3746   	; 0x2582 <xTaskResumeAll>
    16e0:	8b cf       	rjmp	.-234    	; 0x15f8 <xQueueSemaphoreTake+0x2a>
    16e2:	c8 01       	movw	r24, r16
    16e4:	4e dd       	rcall	.-1380   	; 0x1182 <prvUnlockQueue>
    16e6:	4d d7       	rcall	.+3738   	; 0x2582 <xTaskResumeAll>
    16e8:	c8 01       	movw	r24, r16
    16ea:	b7 dc       	rcall	.-1682   	; 0x105a <prvIsQueueEmpty>
    16ec:	88 23       	and	r24, r24
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <xQueueSemaphoreTake+0x124>
    16f0:	83 cf       	rjmp	.-250    	; 0x15f8 <xQueueSemaphoreTake+0x2a>
    16f2:	ee 20       	and	r14, r14
    16f4:	79 f0       	breq	.+30     	; 0x1714 <xQueueSemaphoreTake+0x146>
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	0f 92       	push	r0
    16fc:	c8 01       	movw	r24, r16
    16fe:	9d dc       	rcall	.-1734   	; 0x103a <prvGetDisinheritPriorityAfterTimeout>
    1700:	68 2f       	mov	r22, r24
    1702:	f8 01       	movw	r30, r16
    1704:	84 81       	ldd	r24, Z+4	; 0x04
    1706:	95 81       	ldd	r25, Z+5	; 0x05
    1708:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <vTaskPriorityDisinheritAfterTimeout>
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <xQueueSemaphoreTake+0x148>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	29 96       	adiw	r28, 0x09	; 9
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	08 95       	ret

00001730 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	0f 92       	push	r0
    173c:	89 a1       	ldd	r24, Y+33	; 0x21
    173e:	8f 3f       	cpi	r24, 0xFF	; 255
    1740:	09 f4       	brne	.+2      	; 0x1744 <vQueueWaitForMessageRestricted+0x14>
    1742:	19 a2       	std	Y+33, r1	; 0x21
    1744:	8a a1       	ldd	r24, Y+34	; 0x22
    1746:	8f 3f       	cpi	r24, 0xFF	; 255
    1748:	09 f4       	brne	.+2      	; 0x174c <vQueueWaitForMessageRestricted+0x1c>
    174a:	1a a2       	std	Y+34, r1	; 0x22
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1750:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1752:	81 11       	cpse	r24, r1
    1754:	04 c0       	rjmp	.+8      	; 0x175e <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1756:	ce 01       	movw	r24, r28
    1758:	43 96       	adiw	r24, 0x13	; 19
    175a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    175e:	ce 01       	movw	r24, r28
    1760:	10 dd       	rcall	.-1504   	; 0x1182 <prvUnlockQueue>
    }
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	08 95       	ret

00001768 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    1768:	fc 01       	movw	r30, r24
    176a:	44 81       	ldd	r20, Z+4	; 0x04
    176c:	55 81       	ldd	r21, Z+5	; 0x05
    176e:	22 81       	ldd	r18, Z+2	; 0x02
    1770:	33 81       	ldd	r19, Z+3	; 0x03
    1772:	24 0f       	add	r18, r20
    1774:	35 1f       	adc	r19, r21
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	b9 01       	movw	r22, r18
    177c:	68 1b       	sub	r22, r24
    177e:	79 0b       	sbc	r23, r25
    1780:	cb 01       	movw	r24, r22
    1782:	64 17       	cp	r22, r20
    1784:	75 07       	cpc	r23, r21
    1786:	10 f0       	brcs	.+4      	; 0x178c <prvBytesInBuffer+0x24>
    1788:	84 1b       	sub	r24, r20
    178a:	95 0b       	sbc	r25, r21
    178c:	08 95       	ret

0000178e <prvInitialiseNewStreamBuffer>:
    178e:	0f 93       	push	r16
    1790:	fc 01       	movw	r30, r24
    1792:	8f e0       	ldi	r24, 0x0F	; 15
    1794:	df 01       	movw	r26, r30
    1796:	1d 92       	st	X+, r1
    1798:	8a 95       	dec	r24
    179a:	e9 f7       	brne	.-6      	; 0x1796 <prvInitialiseNewStreamBuffer+0x8>
    179c:	75 87       	std	Z+13, r23	; 0x0d
    179e:	64 87       	std	Z+12, r22	; 0x0c
    17a0:	55 83       	std	Z+5, r21	; 0x05
    17a2:	44 83       	std	Z+4, r20	; 0x04
    17a4:	37 83       	std	Z+7, r19	; 0x07
    17a6:	26 83       	std	Z+6, r18	; 0x06
    17a8:	06 87       	std	Z+14, r16	; 0x0e
    17aa:	0f 91       	pop	r16
    17ac:	08 95       	ret

000017ae <prvWriteBytesToBuffer>:
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	6c 01       	movw	r12, r24
    17c4:	5b 01       	movw	r10, r22
    17c6:	7a 01       	movw	r14, r20
    17c8:	fc 01       	movw	r30, r24
    17ca:	c2 81       	ldd	r28, Z+2	; 0x02
    17cc:	d3 81       	ldd	r29, Z+3	; 0x03
    17ce:	04 81       	ldd	r16, Z+4	; 0x04
    17d0:	15 81       	ldd	r17, Z+5	; 0x05
    17d2:	0c 1b       	sub	r16, r28
    17d4:	1d 0b       	sbc	r17, r29
    17d6:	40 17       	cp	r20, r16
    17d8:	51 07       	cpc	r21, r17
    17da:	08 f4       	brcc	.+2      	; 0x17de <prvWriteBytesToBuffer+0x30>
    17dc:	8a 01       	movw	r16, r20
    17de:	f6 01       	movw	r30, r12
    17e0:	84 85       	ldd	r24, Z+12	; 0x0c
    17e2:	95 85       	ldd	r25, Z+13	; 0x0d
    17e4:	a8 01       	movw	r20, r16
    17e6:	b5 01       	movw	r22, r10
    17e8:	8c 0f       	add	r24, r28
    17ea:	9d 1f       	adc	r25, r29
    17ec:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <memcpy>
    17f0:	0e 15       	cp	r16, r14
    17f2:	1f 05       	cpc	r17, r15
    17f4:	58 f4       	brcc	.+22     	; 0x180c <prvWriteBytesToBuffer+0x5e>
    17f6:	a7 01       	movw	r20, r14
    17f8:	40 1b       	sub	r20, r16
    17fa:	51 0b       	sbc	r21, r17
    17fc:	b5 01       	movw	r22, r10
    17fe:	60 0f       	add	r22, r16
    1800:	71 1f       	adc	r23, r17
    1802:	f6 01       	movw	r30, r12
    1804:	84 85       	ldd	r24, Z+12	; 0x0c
    1806:	95 85       	ldd	r25, Z+13	; 0x0d
    1808:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <memcpy>
    180c:	ce 01       	movw	r24, r28
    180e:	8e 0d       	add	r24, r14
    1810:	9f 1d       	adc	r25, r15
    1812:	f6 01       	movw	r30, r12
    1814:	24 81       	ldd	r18, Z+4	; 0x04
    1816:	35 81       	ldd	r19, Z+5	; 0x05
    1818:	82 17       	cp	r24, r18
    181a:	93 07       	cpc	r25, r19
    181c:	10 f0       	brcs	.+4      	; 0x1822 <prvWriteBytesToBuffer+0x74>
    181e:	82 1b       	sub	r24, r18
    1820:	93 0b       	sbc	r25, r19
    1822:	f6 01       	movw	r30, r12
    1824:	93 83       	std	Z+3, r25	; 0x03
    1826:	82 83       	std	Z+2, r24	; 0x02
    1828:	c7 01       	movw	r24, r14
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	af 90       	pop	r10
    183e:	08 95       	ret

00001840 <prvWriteMessageToBuffer>:
    1840:	cf 92       	push	r12
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	1f 92       	push	r1
    1852:	1f 92       	push	r1
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	7c 01       	movw	r14, r24
    185a:	6b 01       	movw	r12, r22
    185c:	5a 83       	std	Y+2, r21	; 0x02
    185e:	49 83       	std	Y+1, r20	; 0x01
    1860:	21 15       	cp	r18, r1
    1862:	31 05       	cpc	r19, r1
    1864:	c1 f0       	breq	.+48     	; 0x1896 <prvWriteMessageToBuffer+0x56>
    1866:	fc 01       	movw	r30, r24
    1868:	86 85       	ldd	r24, Z+14	; 0x0e
    186a:	80 fd       	sbrc	r24, 0
    186c:	08 c0       	rjmp	.+16     	; 0x187e <prvWriteMessageToBuffer+0x3e>
    186e:	42 17       	cp	r20, r18
    1870:	53 07       	cpc	r21, r19
    1872:	08 f4       	brcc	.+2      	; 0x1876 <prvWriteMessageToBuffer+0x36>
    1874:	9a 01       	movw	r18, r20
    1876:	3a 83       	std	Y+2, r19	; 0x02
    1878:	29 83       	std	Y+1, r18	; 0x01
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	0f c0       	rjmp	.+30     	; 0x189c <prvWriteMessageToBuffer+0x5c>
    187e:	20 17       	cp	r18, r16
    1880:	31 07       	cpc	r19, r17
    1882:	58 f0       	brcs	.+22     	; 0x189a <prvWriteMessageToBuffer+0x5a>
    1884:	42 e0       	ldi	r20, 0x02	; 2
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	be 01       	movw	r22, r28
    188a:	6f 5f       	subi	r22, 0xFF	; 255
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	c7 01       	movw	r24, r14
    1890:	8e df       	rcall	.-228    	; 0x17ae <prvWriteBytesToBuffer>
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	03 c0       	rjmp	.+6      	; 0x189c <prvWriteMessageToBuffer+0x5c>
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	01 c0       	rjmp	.+2      	; 0x189c <prvWriteMessageToBuffer+0x5c>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	88 23       	and	r24, r24
    189e:	31 f0       	breq	.+12     	; 0x18ac <prvWriteMessageToBuffer+0x6c>
    18a0:	49 81       	ldd	r20, Y+1	; 0x01
    18a2:	5a 81       	ldd	r21, Y+2	; 0x02
    18a4:	b6 01       	movw	r22, r12
    18a6:	c7 01       	movw	r24, r14
    18a8:	82 df       	rcall	.-252    	; 0x17ae <prvWriteBytesToBuffer>
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <prvWriteMessageToBuffer+0x70>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	08 95       	ret

000018c6 <prvReadBytesFromBuffer>:
    18c6:	af 92       	push	r10
    18c8:	bf 92       	push	r11
    18ca:	cf 92       	push	r12
    18cc:	df 92       	push	r13
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	7c 01       	movw	r14, r24
    18dc:	5b 01       	movw	r10, r22
    18de:	e9 01       	movw	r28, r18
    18e0:	42 17       	cp	r20, r18
    18e2:	53 07       	cpc	r21, r19
    18e4:	08 f4       	brcc	.+2      	; 0x18e8 <prvReadBytesFromBuffer+0x22>
    18e6:	ea 01       	movw	r28, r20
    18e8:	20 97       	sbiw	r28, 0x00	; 0
    18ea:	81 f1       	breq	.+96     	; 0x194c <prvReadBytesFromBuffer+0x86>
    18ec:	f7 01       	movw	r30, r14
    18ee:	00 81       	ld	r16, Z
    18f0:	11 81       	ldd	r17, Z+1	; 0x01
    18f2:	84 81       	ldd	r24, Z+4	; 0x04
    18f4:	95 81       	ldd	r25, Z+5	; 0x05
    18f6:	80 1b       	sub	r24, r16
    18f8:	91 0b       	sbc	r25, r17
    18fa:	6e 01       	movw	r12, r28
    18fc:	8c 17       	cp	r24, r28
    18fe:	9d 07       	cpc	r25, r29
    1900:	08 f4       	brcc	.+2      	; 0x1904 <prvReadBytesFromBuffer+0x3e>
    1902:	6c 01       	movw	r12, r24
    1904:	f7 01       	movw	r30, r14
    1906:	64 85       	ldd	r22, Z+12	; 0x0c
    1908:	75 85       	ldd	r23, Z+13	; 0x0d
    190a:	60 0f       	add	r22, r16
    190c:	71 1f       	adc	r23, r17
    190e:	a6 01       	movw	r20, r12
    1910:	c5 01       	movw	r24, r10
    1912:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <memcpy>
    1916:	cc 16       	cp	r12, r28
    1918:	dd 06       	cpc	r13, r29
    191a:	58 f4       	brcc	.+22     	; 0x1932 <prvReadBytesFromBuffer+0x6c>
    191c:	ae 01       	movw	r20, r28
    191e:	4c 19       	sub	r20, r12
    1920:	5d 09       	sbc	r21, r13
    1922:	f7 01       	movw	r30, r14
    1924:	64 85       	ldd	r22, Z+12	; 0x0c
    1926:	75 85       	ldd	r23, Z+13	; 0x0d
    1928:	c5 01       	movw	r24, r10
    192a:	8c 0d       	add	r24, r12
    192c:	9d 1d       	adc	r25, r13
    192e:	0e 94 a3 36 	call	0x6d46	; 0x6d46 <memcpy>
    1932:	0c 0f       	add	r16, r28
    1934:	1d 1f       	adc	r17, r29
    1936:	f7 01       	movw	r30, r14
    1938:	84 81       	ldd	r24, Z+4	; 0x04
    193a:	95 81       	ldd	r25, Z+5	; 0x05
    193c:	08 17       	cp	r16, r24
    193e:	19 07       	cpc	r17, r25
    1940:	10 f0       	brcs	.+4      	; 0x1946 <prvReadBytesFromBuffer+0x80>
    1942:	08 1b       	sub	r16, r24
    1944:	19 0b       	sbc	r17, r25
    1946:	f7 01       	movw	r30, r14
    1948:	11 83       	std	Z+1, r17	; 0x01
    194a:	00 83       	st	Z, r16
    194c:	ce 01       	movw	r24, r28
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	08 95       	ret

00001964 <prvReadMessageFromBuffer>:
    1964:	6f 92       	push	r6
    1966:	7f 92       	push	r7
    1968:	8f 92       	push	r8
    196a:	9f 92       	push	r9
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	1f 92       	push	r1
    1982:	1f 92       	push	r1
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	6c 01       	movw	r12, r24
    198a:	4b 01       	movw	r8, r22
    198c:	5a 01       	movw	r10, r20
    198e:	79 01       	movw	r14, r18
    1990:	01 15       	cp	r16, r1
    1992:	11 05       	cpc	r17, r1
    1994:	b1 f0       	breq	.+44     	; 0x19c2 <prvReadMessageFromBuffer+0x5e>
    1996:	fc 01       	movw	r30, r24
    1998:	60 80       	ld	r6, Z
    199a:	71 80       	ldd	r7, Z+1	; 0x01
    199c:	a8 01       	movw	r20, r16
    199e:	be 01       	movw	r22, r28
    19a0:	6f 5f       	subi	r22, 0xFF	; 255
    19a2:	7f 4f       	sbci	r23, 0xFF	; 255
    19a4:	90 df       	rcall	.-224    	; 0x18c6 <prvReadBytesFromBuffer>
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	e0 1a       	sub	r14, r16
    19ac:	f1 0a       	sbc	r15, r17
    19ae:	a8 16       	cp	r10, r24
    19b0:	b9 06       	cpc	r11, r25
    19b2:	30 f4       	brcc	.+12     	; 0x19c0 <prvReadMessageFromBuffer+0x5c>
    19b4:	f6 01       	movw	r30, r12
    19b6:	71 82       	std	Z+1, r7	; 0x01
    19b8:	60 82       	st	Z, r6
    19ba:	a1 2c       	mov	r10, r1
    19bc:	b1 2c       	mov	r11, r1
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <prvReadMessageFromBuffer+0x5e>
    19c0:	5c 01       	movw	r10, r24
    19c2:	97 01       	movw	r18, r14
    19c4:	a5 01       	movw	r20, r10
    19c6:	b4 01       	movw	r22, r8
    19c8:	c6 01       	movw	r24, r12
    19ca:	7d df       	rcall	.-262    	; 0x18c6 <prvReadBytesFromBuffer>
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	cf 90       	pop	r12
    19e0:	bf 90       	pop	r11
    19e2:	af 90       	pop	r10
    19e4:	9f 90       	pop	r9
    19e6:	8f 90       	pop	r8
    19e8:	7f 90       	pop	r7
    19ea:	6f 90       	pop	r6
    19ec:	08 95       	ret

000019ee <xStreamBufferGenericCreate>:
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	ec 01       	movw	r28, r24
    19fe:	6b 01       	movw	r12, r22
    1a00:	41 30       	cpi	r20, 0x01	; 1
    1a02:	11 f4       	brne	.+4      	; 0x1a08 <xStreamBufferGenericCreate+0x1a>
    1a04:	01 e0       	ldi	r16, 0x01	; 1
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <xStreamBufferGenericCreate+0x1c>
    1a08:	00 e0       	ldi	r16, 0x00	; 0
    1a0a:	c1 14       	cp	r12, r1
    1a0c:	d1 04       	cpc	r13, r1
    1a0e:	19 f4       	brne	.+6      	; 0x1a16 <xStreamBufferGenericCreate+0x28>
    1a10:	cc 24       	eor	r12, r12
    1a12:	c3 94       	inc	r12
    1a14:	d1 2c       	mov	r13, r1
    1a16:	ce 01       	movw	r24, r28
    1a18:	40 96       	adiw	r24, 0x10	; 16
    1a1a:	c8 17       	cp	r28, r24
    1a1c:	d9 07       	cpc	r29, r25
    1a1e:	20 f4       	brcc	.+8      	; 0x1a28 <xStreamBufferGenericCreate+0x3a>
    1a20:	21 96       	adiw	r28, 0x01	; 1
    1a22:	8f d8       	rcall	.-3810   	; 0xb42 <pvPortMalloc>
    1a24:	7c 01       	movw	r14, r24
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <xStreamBufferGenericCreate+0x3e>
    1a28:	e1 2c       	mov	r14, r1
    1a2a:	f1 2c       	mov	r15, r1
    1a2c:	e1 14       	cp	r14, r1
    1a2e:	f1 04       	cpc	r15, r1
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <xStreamBufferGenericCreate+0x52>
    1a32:	96 01       	movw	r18, r12
    1a34:	ae 01       	movw	r20, r28
    1a36:	b7 01       	movw	r22, r14
    1a38:	61 5f       	subi	r22, 0xF1	; 241
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	c7 01       	movw	r24, r14
    1a3e:	a7 de       	rcall	.-690    	; 0x178e <prvInitialiseNewStreamBuffer>
    1a40:	c7 01       	movw	r24, r14
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	08 95       	ret

00001a52 <xStreamBufferReset>:
    1a52:	0f 93       	push	r16
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	0f 92       	push	r0
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	20 85       	ldd	r18, Z+8	; 0x08
    1a5e:	31 85       	ldd	r19, Z+9	; 0x09
    1a60:	23 2b       	or	r18, r19
    1a62:	71 f4       	brne	.+28     	; 0x1a80 <xStreamBufferReset+0x2e>
    1a64:	22 85       	ldd	r18, Z+10	; 0x0a
    1a66:	33 85       	ldd	r19, Z+11	; 0x0b
    1a68:	23 2b       	or	r18, r19
    1a6a:	61 f4       	brne	.+24     	; 0x1a84 <xStreamBufferReset+0x32>
    1a6c:	26 81       	ldd	r18, Z+6	; 0x06
    1a6e:	37 81       	ldd	r19, Z+7	; 0x07
    1a70:	44 81       	ldd	r20, Z+4	; 0x04
    1a72:	55 81       	ldd	r21, Z+5	; 0x05
    1a74:	64 85       	ldd	r22, Z+12	; 0x0c
    1a76:	75 85       	ldd	r23, Z+13	; 0x0d
    1a78:	06 85       	ldd	r16, Z+14	; 0x0e
    1a7a:	89 de       	rcall	.-750    	; 0x178e <prvInitialiseNewStreamBuffer>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <xStreamBufferReset+0x34>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <xStreamBufferReset+0x34>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	0f 90       	pop	r0
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	0f 91       	pop	r16
    1a8c:	08 95       	ret

00001a8e <xStreamBufferSpacesAvailable>:
    1a8e:	fc 01       	movw	r30, r24
    1a90:	24 81       	ldd	r18, Z+4	; 0x04
    1a92:	35 81       	ldd	r19, Z+5	; 0x05
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	82 0f       	add	r24, r18
    1a9a:	93 1f       	adc	r25, r19
    1a9c:	42 81       	ldd	r20, Z+2	; 0x02
    1a9e:	53 81       	ldd	r21, Z+3	; 0x03
    1aa0:	84 1b       	sub	r24, r20
    1aa2:	95 0b       	sbc	r25, r21
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	82 17       	cp	r24, r18
    1aa8:	93 07       	cpc	r25, r19
    1aaa:	10 f0       	brcs	.+4      	; 0x1ab0 <xStreamBufferSpacesAvailable+0x22>
    1aac:	82 1b       	sub	r24, r18
    1aae:	93 0b       	sbc	r25, r19
    1ab0:	08 95       	ret

00001ab2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1ab2:	2f 92       	push	r2
    1ab4:	3f 92       	push	r3
    1ab6:	4f 92       	push	r4
    1ab8:	5f 92       	push	r5
    1aba:	6f 92       	push	r6
    1abc:	7f 92       	push	r7
    1abe:	8f 92       	push	r8
    1ac0:	9f 92       	push	r9
    1ac2:	af 92       	push	r10
    1ac4:	bf 92       	push	r11
    1ac6:	cf 92       	push	r12
    1ac8:	df 92       	push	r13
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	2b 97       	sbiw	r28, 0x0b	; 11
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	4c 01       	movw	r8, r24
    1ae8:	7b 87       	std	Y+11, r23	; 0x0b
    1aea:	6a 87       	std	Y+10, r22	; 0x0a
    1aec:	1a 01       	movw	r2, r20
    1aee:	0e 83       	std	Y+6, r16	; 0x06
    1af0:	1f 83       	std	Y+7, r17	; 0x07
    1af2:	28 87       	std	Y+8, r18	; 0x08
    1af4:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1af6:	fc 01       	movw	r30, r24
    1af8:	84 81       	ldd	r24, Z+4	; 0x04
    1afa:	95 81       	ldd	r25, Z+5	; 0x05
    1afc:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1afe:	26 85       	ldd	r18, Z+14	; 0x0e
    1b00:	20 ff       	sbrs	r18, 0
    1b02:	0c c0       	rjmp	.+24     	; 0x1b1c <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b04:	2a 01       	movw	r4, r20
    1b06:	f2 e0       	ldi	r31, 0x02	; 2
    1b08:	4f 0e       	add	r4, r31
    1b0a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1b0c:	84 15       	cp	r24, r4
    1b0e:	95 05       	cpc	r25, r5
    1b10:	58 f4       	brcc	.+22     	; 0x1b28 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1b12:	1e 82       	std	Y+6, r1	; 0x06
    1b14:	1f 82       	std	Y+7, r1	; 0x07
    1b16:	18 86       	std	Y+8, r1	; 0x08
    1b18:	19 86       	std	Y+9, r1	; 0x09
    1b1a:	06 c0       	rjmp	.+12     	; 0x1b28 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1b1c:	84 17       	cp	r24, r20
    1b1e:	95 07       	cpc	r25, r21
    1b20:	10 f0       	brcs	.+4      	; 0x1b26 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1b22:	2a 01       	movw	r4, r20
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1b26:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1b28:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2c:	a8 85       	ldd	r26, Y+8	; 0x08
    1b2e:	b9 85       	ldd	r27, Y+9	; 0x09
    1b30:	89 2b       	or	r24, r25
    1b32:	8a 2b       	or	r24, r26
    1b34:	8b 2b       	or	r24, r27
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <xStreamBufferSend+0x88>
    1b38:	38 c0       	rjmp	.+112    	; 0x1baa <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1b48:	c4 01       	movw	r24, r8
    1b4a:	a1 df       	rcall	.-190    	; 0x1a8e <xStreamBufferSpacesAvailable>
    1b4c:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1b4e:	84 15       	cp	r24, r4
    1b50:	95 05       	cpc	r25, r5
    1b52:	40 f5       	brcc	.+80     	; 0x1ba4 <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1b5e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <xTaskGetCurrentTaskHandle>
    1b62:	f4 01       	movw	r30, r8
    1b64:	93 87       	std	Z+11, r25	; 0x0b
    1b66:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1b6c:	ae 80       	ldd	r10, Y+6	; 0x06
    1b6e:	bf 80       	ldd	r11, Y+7	; 0x07
    1b70:	c8 84       	ldd	r12, Y+8	; 0x08
    1b72:	d9 84       	ldd	r13, Y+9	; 0x09
    1b74:	e1 2c       	mov	r14, r1
    1b76:	f1 2c       	mov	r15, r1
    1b78:	00 e0       	ldi	r16, 0x00	; 0
    1b7a:	10 e0       	ldi	r17, 0x00	; 0
    1b7c:	98 01       	movw	r18, r16
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	ba 01       	movw	r22, r20
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	0e 94 97 18 	call	0x312e	; 0x312e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1b8a:	f4 01       	movw	r30, r8
    1b8c:	13 86       	std	Z+11, r1	; 0x0b
    1b8e:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1b90:	be 01       	movw	r22, r28
    1b92:	6a 5f       	subi	r22, 0xFA	; 250
    1b94:	7f 4f       	sbci	r23, 0xFF	; 255
    1b96:	ce 01       	movw	r24, r28
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <xTaskCheckForTimeOut>
    1b9e:	88 23       	and	r24, r24
    1ba0:	81 f2       	breq	.-96     	; 0x1b42 <xStreamBufferSend+0x90>
    1ba2:	05 c0       	rjmp	.+10     	; 0x1bae <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1ba4:	0f 90       	pop	r0
    1ba6:	0f be       	out	0x3f, r0	; 63
                    break;
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1baa:	61 2c       	mov	r6, r1
    1bac:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1bae:	61 14       	cp	r6, r1
    1bb0:	71 04       	cpc	r7, r1
    1bb2:	19 f4       	brne	.+6      	; 0x1bba <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1bb4:	c4 01       	movw	r24, r8
    1bb6:	6b df       	rcall	.-298    	; 0x1a8e <xStreamBufferSpacesAvailable>
    1bb8:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1bba:	82 01       	movw	r16, r4
    1bbc:	93 01       	movw	r18, r6
    1bbe:	a1 01       	movw	r20, r2
    1bc0:	6a 85       	ldd	r22, Y+10	; 0x0a
    1bc2:	7b 85       	ldd	r23, Y+11	; 0x0b
    1bc4:	c4 01       	movw	r24, r8
    1bc6:	3c de       	rcall	.-904    	; 0x1840 <prvWriteMessageToBuffer>
    1bc8:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1bca:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1bcc:	e9 f0       	breq	.+58     	; 0x1c08 <xStreamBufferSend+0x156>
    1bce:	c4 01       	movw	r24, r8
    1bd0:	cb dd       	rcall	.-1130   	; 0x1768 <prvBytesInBuffer>
    1bd2:	f4 01       	movw	r30, r8
    1bd4:	26 81       	ldd	r18, Z+6	; 0x06
    1bd6:	37 81       	ldd	r19, Z+7	; 0x07
    1bd8:	82 17       	cp	r24, r18
    1bda:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1bdc:	a8 f0       	brcs	.+42     	; 0x1c08 <xStreamBufferSend+0x156>
    1bde:	91 d3       	rcall	.+1826   	; 0x2302 <vTaskSuspendAll>
    1be0:	f4 01       	movw	r30, r8
    1be2:	80 85       	ldd	r24, Z+8	; 0x08
    1be4:	91 85       	ldd	r25, Z+9	; 0x09
    1be6:	89 2b       	or	r24, r25
    1be8:	71 f0       	breq	.+28     	; 0x1c06 <xStreamBufferSend+0x154>
    1bea:	80 85       	ldd	r24, Z+8	; 0x08
    1bec:	91 85       	ldd	r25, Z+9	; 0x09
    1bee:	e1 2c       	mov	r14, r1
    1bf0:	f1 2c       	mov	r15, r1
    1bf2:	00 e0       	ldi	r16, 0x00	; 0
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	a9 01       	movw	r20, r18
    1bfa:	60 e0       	ldi	r22, 0x00	; 0
    1bfc:	0e 94 3f 19 	call	0x327e	; 0x327e <xTaskGenericNotify>
    1c00:	f4 01       	movw	r30, r8
    1c02:	11 86       	std	Z+9, r1	; 0x09
    1c04:	10 86       	std	Z+8, r1	; 0x08
    1c06:	bd d4       	rcall	.+2426   	; 0x2582 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1c08:	c6 01       	movw	r24, r12
    1c0a:	2b 96       	adiw	r28, 0x0b	; 11
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	ff 90       	pop	r15
    1c20:	ef 90       	pop	r14
    1c22:	df 90       	pop	r13
    1c24:	cf 90       	pop	r12
    1c26:	bf 90       	pop	r11
    1c28:	af 90       	pop	r10
    1c2a:	9f 90       	pop	r9
    1c2c:	8f 90       	pop	r8
    1c2e:	7f 90       	pop	r7
    1c30:	6f 90       	pop	r6
    1c32:	5f 90       	pop	r5
    1c34:	4f 90       	pop	r4
    1c36:	3f 90       	pop	r3
    1c38:	2f 90       	pop	r2
    1c3a:	08 95       	ret

00001c3c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1c3c:	af 92       	push	r10
    1c3e:	bf 92       	push	r11
    1c40:	cf 92       	push	r12
    1c42:	df 92       	push	r13
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	ec 01       	movw	r28, r24
    1c52:	7b 01       	movw	r14, r22
    1c54:	5a 01       	movw	r10, r20
    1c56:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1c58:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c5a:	80 ff       	sbrs	r24, 0
    1c5c:	04 c0       	rjmp	.+8      	; 0x1c66 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1c5e:	8a 01       	movw	r16, r20
    1c60:	0e 5f       	subi	r16, 0xFE	; 254
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1c66:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1c68:	ce 01       	movw	r24, r28
    1c6a:	11 df       	rcall	.-478    	; 0x1a8e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1c6c:	9c 01       	movw	r18, r24
    1c6e:	a5 01       	movw	r20, r10
    1c70:	b7 01       	movw	r22, r14
    1c72:	ce 01       	movw	r24, r28
    1c74:	e5 dd       	rcall	.-1078   	; 0x1840 <prvWriteMessageToBuffer>
    1c76:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1c78:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1c7a:	c1 f0       	breq	.+48     	; 0x1cac <xStreamBufferSendFromISR+0x70>
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	74 dd       	rcall	.-1304   	; 0x1768 <prvBytesInBuffer>
    1c80:	2e 81       	ldd	r18, Y+6	; 0x06
    1c82:	3f 81       	ldd	r19, Y+7	; 0x07
    1c84:	82 17       	cp	r24, r18
    1c86:	93 07       	cpc	r25, r19
    1c88:	88 f0       	brcs	.+34     	; 0x1cac <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1c8a:	88 85       	ldd	r24, Y+8	; 0x08
    1c8c:	99 85       	ldd	r25, Y+9	; 0x09
    1c8e:	89 2b       	or	r24, r25
    1c90:	69 f0       	breq	.+26     	; 0x1cac <xStreamBufferSendFromISR+0x70>
    1c92:	88 85       	ldd	r24, Y+8	; 0x08
    1c94:	99 85       	ldd	r25, Y+9	; 0x09
    1c96:	e1 2c       	mov	r14, r1
    1c98:	f1 2c       	mov	r15, r1
    1c9a:	00 e0       	ldi	r16, 0x00	; 0
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	a9 01       	movw	r20, r18
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	0e 94 36 1a 	call	0x346c	; 0x346c <xTaskGenericNotifyFromISR>
    1ca8:	19 86       	std	Y+9, r1	; 0x09
    1caa:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1cac:	c5 01       	movw	r24, r10
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	bf 90       	pop	r11
    1cc0:	af 90       	pop	r10
    1cc2:	08 95       	ret

00001cc4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1cc4:	4f 92       	push	r4
    1cc6:	5f 92       	push	r5
    1cc8:	6f 92       	push	r6
    1cca:	7f 92       	push	r7
    1ccc:	8f 92       	push	r8
    1cce:	9f 92       	push	r9
    1cd0:	af 92       	push	r10
    1cd2:	bf 92       	push	r11
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	ec 01       	movw	r28, r24
    1ce6:	2b 01       	movw	r4, r22
    1ce8:	3a 01       	movw	r6, r20
    1cea:	58 01       	movw	r10, r16
    1cec:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1cee:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cf0:	80 ff       	sbrs	r24, 0
    1cf2:	05 c0       	rjmp	.+10     	; 0x1cfe <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1cf4:	68 94       	set
    1cf6:	88 24       	eor	r8, r8
    1cf8:	81 f8       	bld	r8, 1
    1cfa:	91 2c       	mov	r9, r1
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1cfe:	81 2c       	mov	r8, r1
    1d00:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1d02:	a1 14       	cp	r10, r1
    1d04:	b1 04       	cpc	r11, r1
    1d06:	c1 04       	cpc	r12, r1
    1d08:	d1 04       	cpc	r13, r1
    1d0a:	41 f1       	breq	.+80     	; 0x1d5c <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1d12:	ce 01       	movw	r24, r28
    1d14:	29 dd       	rcall	.-1454   	; 0x1768 <prvBytesInBuffer>
    1d16:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1d18:	88 16       	cp	r8, r24
    1d1a:	99 06       	cpc	r9, r25
    1d1c:	48 f0       	brcs	.+18     	; 0x1d30 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1d28:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <xTaskGetCurrentTaskHandle>
    1d2c:	99 87       	std	Y+9, r25	; 0x09
    1d2e:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1d34:	8e 14       	cp	r8, r14
    1d36:	9f 04       	cpc	r9, r15
    1d38:	a0 f0       	brcs	.+40     	; 0x1d62 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1d3a:	e1 2c       	mov	r14, r1
    1d3c:	f1 2c       	mov	r15, r1
    1d3e:	00 e0       	ldi	r16, 0x00	; 0
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	98 01       	movw	r18, r16
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	ba 01       	movw	r22, r20
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	0e 94 97 18 	call	0x312e	; 0x312e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1d50:	19 86       	std	Y+9, r1	; 0x09
    1d52:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1d54:	ce 01       	movw	r24, r28
    1d56:	08 dd       	rcall	.-1520   	; 0x1768 <prvBytesInBuffer>
    1d58:	7c 01       	movw	r14, r24
    1d5a:	03 c0       	rjmp	.+6      	; 0x1d62 <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	04 dd       	rcall	.-1528   	; 0x1768 <prvBytesInBuffer>
    1d60:	7c 01       	movw	r14, r24
    1d62:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1d64:	9f 04       	cpc	r9, r15
    1d66:	e8 f4       	brcc	.+58     	; 0x1da2 <xStreamBufferReceive+0xde>
    1d68:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1d6a:	97 01       	movw	r18, r14
    1d6c:	a3 01       	movw	r20, r6
    1d6e:	b2 01       	movw	r22, r4
    1d70:	ce 01       	movw	r24, r28
    1d72:	f8 dd       	rcall	.-1040   	; 0x1964 <prvReadMessageFromBuffer>
    1d74:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1d76:	89 2b       	or	r24, r25
    1d78:	b1 f0       	breq	.+44     	; 0x1da6 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1d7a:	c3 d2       	rcall	.+1414   	; 0x2302 <vTaskSuspendAll>
    1d7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d80:	89 2b       	or	r24, r25
    1d82:	69 f0       	breq	.+26     	; 0x1d9e <xStreamBufferReceive+0xda>
    1d84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d88:	e1 2c       	mov	r14, r1
    1d8a:	f1 2c       	mov	r15, r1
    1d8c:	00 e0       	ldi	r16, 0x00	; 0
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	a9 01       	movw	r20, r18
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	0e 94 3f 19 	call	0x327e	; 0x327e <xTaskGenericNotify>
    1d9a:	1b 86       	std	Y+11, r1	; 0x0b
    1d9c:	1a 86       	std	Y+10, r1	; 0x0a
    1d9e:	f1 d3       	rcall	.+2018   	; 0x2582 <xTaskResumeAll>
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <xStreamBufferReceive+0xe2>
    1da2:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1da4:	d1 2c       	mov	r13, r1
    1da6:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	bf 90       	pop	r11
    1dba:	af 90       	pop	r10
    1dbc:	9f 90       	pop	r9
    1dbe:	8f 90       	pop	r8
    1dc0:	7f 90       	pop	r7
    1dc2:	6f 90       	pop	r6
    1dc4:	5f 90       	pop	r5
    1dc6:	4f 90       	pop	r4
    1dc8:	08 95       	ret

00001dca <prvResetNextTaskUnblockTime>:
    1dca:	e0 91 50 17 	lds	r30, 0x1750	; 0x801750 <pxDelayedTaskList>
    1dce:	f0 91 51 17 	lds	r31, 0x1751	; 0x801751 <pxDelayedTaskList+0x1>
    1dd2:	80 81       	ld	r24, Z
    1dd4:	81 11       	cpse	r24, r1
    1dd6:	0c c0       	rjmp	.+24     	; 0x1df0 <prvResetNextTaskUnblockTime+0x26>
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	9f ef       	ldi	r25, 0xFF	; 255
    1ddc:	dc 01       	movw	r26, r24
    1dde:	80 93 1a 17 	sts	0x171A, r24	; 0x80171a <xNextTaskUnblockTime>
    1de2:	90 93 1b 17 	sts	0x171B, r25	; 0x80171b <xNextTaskUnblockTime+0x1>
    1de6:	a0 93 1c 17 	sts	0x171C, r26	; 0x80171c <xNextTaskUnblockTime+0x2>
    1dea:	b0 93 1d 17 	sts	0x171D, r27	; 0x80171d <xNextTaskUnblockTime+0x3>
    1dee:	08 95       	ret
    1df0:	e0 91 50 17 	lds	r30, 0x1750	; 0x801750 <pxDelayedTaskList>
    1df4:	f0 91 51 17 	lds	r31, 0x1751	; 0x801751 <pxDelayedTaskList+0x1>
    1df8:	07 80       	ldd	r0, Z+7	; 0x07
    1dfa:	f0 85       	ldd	r31, Z+8	; 0x08
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	a2 81       	ldd	r26, Z+2	; 0x02
    1e04:	b3 81       	ldd	r27, Z+3	; 0x03
    1e06:	80 93 1a 17 	sts	0x171A, r24	; 0x80171a <xNextTaskUnblockTime>
    1e0a:	90 93 1b 17 	sts	0x171B, r25	; 0x80171b <xNextTaskUnblockTime+0x1>
    1e0e:	a0 93 1c 17 	sts	0x171C, r26	; 0x80171c <xNextTaskUnblockTime+0x2>
    1e12:	b0 93 1d 17 	sts	0x171D, r27	; 0x80171d <xNextTaskUnblockTime+0x3>
    1e16:	08 95       	ret

00001e18 <prvDeleteTCB>:
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	ec 01       	movw	r28, r24
    1e1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e22:	0e 94 4a 06 	call	0xc94	; 0xc94 <vPortFree>
    1e26:	ce 01       	movw	r24, r28
    1e28:	0e 94 4a 06 	call	0xc94	; 0xc94 <vPortFree>
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	08 95       	ret

00001e32 <prvInitialiseNewTask>:
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	2c 01       	movw	r4, r24
    1e52:	5b 01       	movw	r10, r22
    1e54:	4a 01       	movw	r8, r20
    1e56:	39 01       	movw	r6, r18
    1e58:	e6 01       	movw	r28, r12
    1e5a:	65 ea       	ldi	r22, 0xA5	; 165
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e62:	0e 94 ac 36 	call	0x6d58	; 0x6d58 <memset>
    1e66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e6a:	21 e0       	ldi	r18, 0x01	; 1
    1e6c:	82 1a       	sub	r8, r18
    1e6e:	91 08       	sbc	r9, r1
    1e70:	88 0e       	add	r8, r24
    1e72:	99 1e       	adc	r9, r25
    1e74:	a1 14       	cp	r10, r1
    1e76:	b1 04       	cpc	r11, r1
    1e78:	89 f4       	brne	.+34     	; 0x1e9c <prvInitialiseNewTask+0x6a>
    1e7a:	15 c0       	rjmp	.+42     	; 0x1ea6 <prvInitialiseNewTask+0x74>
    1e7c:	82 2f       	mov	r24, r18
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	f5 01       	movw	r30, r10
    1e82:	e8 0f       	add	r30, r24
    1e84:	f9 1f       	adc	r31, r25
    1e86:	30 81       	ld	r19, Z
    1e88:	de 01       	movw	r26, r28
    1e8a:	a8 0f       	add	r26, r24
    1e8c:	b9 1f       	adc	r27, r25
    1e8e:	5d 96       	adiw	r26, 0x1d	; 29
    1e90:	3c 93       	st	X, r19
    1e92:	80 81       	ld	r24, Z
    1e94:	88 23       	and	r24, r24
    1e96:	29 f0       	breq	.+10     	; 0x1ea2 <prvInitialiseNewTask+0x70>
    1e98:	2f 5f       	subi	r18, 0xFF	; 255
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <prvInitialiseNewTask+0x6c>
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	20 31       	cpi	r18, 0x10	; 16
    1ea0:	68 f3       	brcs	.-38     	; 0x1e7c <prvInitialiseNewTask+0x4a>
    1ea2:	1c a6       	std	Y+44, r1	; 0x2c
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <prvInitialiseNewTask+0x76>
    1ea6:	1d 8e       	std	Y+29, r1	; 0x1d
    1ea8:	0a 30       	cpi	r16, 0x0A	; 10
    1eaa:	08 f0       	brcs	.+2      	; 0x1eae <prvInitialiseNewTask+0x7c>
    1eac:	09 e0       	ldi	r16, 0x09	; 9
    1eae:	0a 8f       	std	Y+26, r16	; 0x1a
    1eb0:	0d a7       	std	Y+45, r16	; 0x2d
    1eb2:	1e a6       	std	Y+46, r1	; 0x2e
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	02 96       	adiw	r24, 0x02	; 2
    1eb8:	0e 94 98 06 	call	0xd30	; 0xd30 <vListInitialiseItem>
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	0e 96       	adiw	r24, 0x0e	; 14
    1ec0:	0e 94 98 06 	call	0xd30	; 0xd30 <vListInitialiseItem>
    1ec4:	db 87       	std	Y+11, r29	; 0x0b
    1ec6:	ca 87       	std	Y+10, r28	; 0x0a
    1ec8:	8a e0       	ldi	r24, 0x0A	; 10
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a0 e0       	ldi	r26, 0x00	; 0
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	80 1b       	sub	r24, r16
    1ed2:	91 09       	sbc	r25, r1
    1ed4:	a1 09       	sbc	r26, r1
    1ed6:	b1 09       	sbc	r27, r1
    1ed8:	8e 87       	std	Y+14, r24	; 0x0e
    1eda:	9f 87       	std	Y+15, r25	; 0x0f
    1edc:	a8 8b       	std	Y+16, r26	; 0x10
    1ede:	b9 8b       	std	Y+17, r27	; 0x11
    1ee0:	df 8b       	std	Y+23, r29	; 0x17
    1ee2:	ce 8b       	std	Y+22, r28	; 0x16
    1ee4:	84 e0       	ldi	r24, 0x04	; 4
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	bf 96       	adiw	r30, 0x2f	; 47
    1eea:	df 01       	movw	r26, r30
    1eec:	1d 92       	st	X+, r1
    1eee:	8a 95       	dec	r24
    1ef0:	e9 f7       	brne	.-6      	; 0x1eec <prvInitialiseNewTask+0xba>
    1ef2:	1b aa       	std	Y+51, r1	; 0x33
    1ef4:	a3 01       	movw	r20, r6
    1ef6:	b2 01       	movw	r22, r4
    1ef8:	c4 01       	movw	r24, r8
    1efa:	0e 94 0c 07 	call	0xe18	; 0xe18 <pxPortInitialiseStack>
    1efe:	99 83       	std	Y+1, r25	; 0x01
    1f00:	88 83       	st	Y, r24
    1f02:	e1 14       	cp	r14, r1
    1f04:	f1 04       	cpc	r15, r1
    1f06:	19 f0       	breq	.+6      	; 0x1f0e <prvInitialiseNewTask+0xdc>
    1f08:	f7 01       	movw	r30, r14
    1f0a:	d1 83       	std	Z+1, r29	; 0x01
    1f0c:	c0 83       	st	Z, r28
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
    1f24:	7f 90       	pop	r7
    1f26:	6f 90       	pop	r6
    1f28:	5f 90       	pop	r5
    1f2a:	4f 90       	pop	r4
    1f2c:	08 95       	ret

00001f2e <prvInitialiseTaskLists>:
    1f2e:	cf 93       	push	r28
    1f30:	c0 e0       	ldi	r28, 0x00	; 0
    1f32:	09 c0       	rjmp	.+18     	; 0x1f46 <prvInitialiseTaskLists+0x18>
    1f34:	2b e0       	ldi	r18, 0x0B	; 11
    1f36:	c2 9f       	mul	r28, r18
    1f38:	c0 01       	movw	r24, r0
    1f3a:	11 24       	eor	r1, r1
    1f3c:	88 59       	subi	r24, 0x98	; 152
    1f3e:	98 4e       	sbci	r25, 0xE8	; 232
    1f40:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    1f44:	cf 5f       	subi	r28, 0xFF	; 255
    1f46:	ca 30       	cpi	r28, 0x0A	; 10
    1f48:	a8 f3       	brcs	.-22     	; 0x1f34 <prvInitialiseTaskLists+0x6>
    1f4a:	8d e5       	ldi	r24, 0x5D	; 93
    1f4c:	97 e1       	ldi	r25, 0x17	; 23
    1f4e:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    1f52:	82 e5       	ldi	r24, 0x52	; 82
    1f54:	97 e1       	ldi	r25, 0x17	; 23
    1f56:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    1f5a:	83 e4       	ldi	r24, 0x43	; 67
    1f5c:	97 e1       	ldi	r25, 0x17	; 23
    1f5e:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    1f62:	88 e3       	ldi	r24, 0x38	; 56
    1f64:	97 e1       	ldi	r25, 0x17	; 23
    1f66:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    1f6a:	8c e2       	ldi	r24, 0x2C	; 44
    1f6c:	97 e1       	ldi	r25, 0x17	; 23
    1f6e:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    1f72:	8d e5       	ldi	r24, 0x5D	; 93
    1f74:	97 e1       	ldi	r25, 0x17	; 23
    1f76:	90 93 51 17 	sts	0x1751, r25	; 0x801751 <pxDelayedTaskList+0x1>
    1f7a:	80 93 50 17 	sts	0x1750, r24	; 0x801750 <pxDelayedTaskList>
    1f7e:	82 e5       	ldi	r24, 0x52	; 82
    1f80:	97 e1       	ldi	r25, 0x17	; 23
    1f82:	90 93 4f 17 	sts	0x174F, r25	; 0x80174f <pxOverflowDelayedTaskList+0x1>
    1f86:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <pxOverflowDelayedTaskList>
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <prvAddNewTaskToReadyList>:
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	0f 92       	push	r0
    1f9a:	80 91 2b 17 	lds	r24, 0x172B	; 0x80172b <uxCurrentNumberOfTasks>
    1f9e:	8f 5f       	subi	r24, 0xFF	; 255
    1fa0:	80 93 2b 17 	sts	0x172B, r24	; 0x80172b <uxCurrentNumberOfTasks>
    1fa4:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    1fa8:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    1fac:	89 2b       	or	r24, r25
    1fae:	51 f4       	brne	.+20     	; 0x1fc4 <prvAddNewTaskToReadyList+0x36>
    1fb0:	d0 93 d7 17 	sts	0x17D7, r29	; 0x8017d7 <pxCurrentTCB+0x1>
    1fb4:	c0 93 d6 17 	sts	0x17D6, r28	; 0x8017d6 <pxCurrentTCB>
    1fb8:	80 91 2b 17 	lds	r24, 0x172B	; 0x80172b <uxCurrentNumberOfTasks>
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	91 f4       	brne	.+36     	; 0x1fe4 <prvAddNewTaskToReadyList+0x56>
    1fc0:	b6 df       	rcall	.-148    	; 0x1f2e <prvInitialiseTaskLists>
    1fc2:	10 c0       	rjmp	.+32     	; 0x1fe4 <prvAddNewTaskToReadyList+0x56>
    1fc4:	80 91 25 17 	lds	r24, 0x1725	; 0x801725 <xSchedulerRunning>
    1fc8:	81 11       	cpse	r24, r1
    1fca:	0c c0       	rjmp	.+24     	; 0x1fe4 <prvAddNewTaskToReadyList+0x56>
    1fcc:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    1fd0:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    1fd4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fd8:	89 17       	cp	r24, r25
    1fda:	20 f0       	brcs	.+8      	; 0x1fe4 <prvAddNewTaskToReadyList+0x56>
    1fdc:	d0 93 d7 17 	sts	0x17D7, r29	; 0x8017d7 <pxCurrentTCB+0x1>
    1fe0:	c0 93 d6 17 	sts	0x17D6, r28	; 0x8017d6 <pxCurrentTCB>
    1fe4:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <uxTaskNumber>
    1fe8:	8f 5f       	subi	r24, 0xFF	; 255
    1fea:	80 93 1e 17 	sts	0x171E, r24	; 0x80171e <uxTaskNumber>
    1fee:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ff0:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <uxTopReadyPriority>
    1ff4:	8e 17       	cp	r24, r30
    1ff6:	10 f4       	brcc	.+4      	; 0x1ffc <prvAddNewTaskToReadyList+0x6e>
    1ff8:	e0 93 26 17 	sts	0x1726, r30	; 0x801726 <uxTopReadyPriority>
    1ffc:	8b e0       	ldi	r24, 0x0B	; 11
    1ffe:	8e 9f       	mul	r24, r30
    2000:	f0 01       	movw	r30, r0
    2002:	11 24       	eor	r1, r1
    2004:	e8 59       	subi	r30, 0x98	; 152
    2006:	f8 4e       	sbci	r31, 0xE8	; 232
    2008:	01 80       	ldd	r0, Z+1	; 0x01
    200a:	f2 81       	ldd	r31, Z+2	; 0x02
    200c:	e0 2d       	mov	r30, r0
    200e:	ff 83       	std	Y+7, r31	; 0x07
    2010:	ee 83       	std	Y+6, r30	; 0x06
    2012:	26 81       	ldd	r18, Z+6	; 0x06
    2014:	37 81       	ldd	r19, Z+7	; 0x07
    2016:	39 87       	std	Y+9, r19	; 0x09
    2018:	28 87       	std	Y+8, r18	; 0x08
    201a:	a6 81       	ldd	r26, Z+6	; 0x06
    201c:	b7 81       	ldd	r27, Z+7	; 0x07
    201e:	9e 01       	movw	r18, r28
    2020:	2e 5f       	subi	r18, 0xFE	; 254
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	15 96       	adiw	r26, 0x05	; 5
    2026:	3c 93       	st	X, r19
    2028:	2e 93       	st	-X, r18
    202a:	14 97       	sbiw	r26, 0x04	; 4
    202c:	37 83       	std	Z+7, r19	; 0x07
    202e:	26 83       	std	Z+6, r18	; 0x06
    2030:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2032:	8e 9f       	mul	r24, r30
    2034:	f0 01       	movw	r30, r0
    2036:	11 24       	eor	r1, r1
    2038:	e8 59       	subi	r30, 0x98	; 152
    203a:	f8 4e       	sbci	r31, 0xE8	; 232
    203c:	fd 87       	std	Y+13, r31	; 0x0d
    203e:	ec 87       	std	Y+12, r30	; 0x0c
    2040:	80 81       	ld	r24, Z
    2042:	8f 5f       	subi	r24, 0xFF	; 255
    2044:	80 83       	st	Z, r24
    2046:	0f 90       	pop	r0
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	80 91 25 17 	lds	r24, 0x1725	; 0x801725 <xSchedulerRunning>
    204e:	88 23       	and	r24, r24
    2050:	51 f0       	breq	.+20     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2052:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2056:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    205a:	92 8d       	ldd	r25, Z+26	; 0x1a
    205c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    205e:	98 17       	cp	r25, r24
    2060:	10 f4       	brcc	.+4      	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2062:	0e 94 55 07 	call	0xeaa	; 0xeaa <vPortYield>
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <prvCheckTasksWaitingTermination>:
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	1b c0       	rjmp	.+54     	; 0x20a8 <prvCheckTasksWaitingTermination+0x3c>
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	0f 92       	push	r0
    2078:	e0 91 3f 17 	lds	r30, 0x173F	; 0x80173f <xTasksWaitingTermination+0x7>
    207c:	f0 91 40 17 	lds	r31, 0x1740	; 0x801740 <xTasksWaitingTermination+0x8>
    2080:	c0 85       	ldd	r28, Z+8	; 0x08
    2082:	d1 85       	ldd	r29, Z+9	; 0x09
    2084:	ce 01       	movw	r24, r28
    2086:	02 96       	adiw	r24, 0x02	; 2
    2088:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uxListRemove>
    208c:	80 91 2b 17 	lds	r24, 0x172B	; 0x80172b <uxCurrentNumberOfTasks>
    2090:	81 50       	subi	r24, 0x01	; 1
    2092:	80 93 2b 17 	sts	0x172B, r24	; 0x80172b <uxCurrentNumberOfTasks>
    2096:	80 91 37 17 	lds	r24, 0x1737	; 0x801737 <uxDeletedTasksWaitingCleanUp>
    209a:	81 50       	subi	r24, 0x01	; 1
    209c:	80 93 37 17 	sts	0x1737, r24	; 0x801737 <uxDeletedTasksWaitingCleanUp>
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	ce 01       	movw	r24, r28
    20a6:	b8 de       	rcall	.-656    	; 0x1e18 <prvDeleteTCB>
    20a8:	80 91 37 17 	lds	r24, 0x1737	; 0x801737 <uxDeletedTasksWaitingCleanUp>
    20ac:	81 11       	cpse	r24, r1
    20ae:	e1 cf       	rjmp	.-62     	; 0x2072 <prvCheckTasksWaitingTermination+0x6>
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	08 95       	ret

000020b6 <prvAddCurrentTaskToDelayedList>:
    20b6:	8f 92       	push	r8
    20b8:	9f 92       	push	r9
    20ba:	af 92       	push	r10
    20bc:	bf 92       	push	r11
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	6b 01       	movw	r12, r22
    20cc:	7c 01       	movw	r14, r24
    20ce:	c4 2f       	mov	r28, r20
    20d0:	80 90 27 17 	lds	r8, 0x1727	; 0x801727 <xTickCount>
    20d4:	90 90 28 17 	lds	r9, 0x1728	; 0x801728 <xTickCount+0x1>
    20d8:	a0 90 29 17 	lds	r10, 0x1729	; 0x801729 <xTickCount+0x2>
    20dc:	b0 90 2a 17 	lds	r11, 0x172A	; 0x80172a <xTickCount+0x3>
    20e0:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    20e4:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    20e8:	02 96       	adiw	r24, 0x02	; 2
    20ea:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uxListRemove>
    20ee:	8f ef       	ldi	r24, 0xFF	; 255
    20f0:	c8 16       	cp	r12, r24
    20f2:	d8 06       	cpc	r13, r24
    20f4:	e8 06       	cpc	r14, r24
    20f6:	f8 06       	cpc	r15, r24
    20f8:	b1 f5       	brne	.+108    	; 0x2166 <prvAddCurrentTaskToDelayedList+0xb0>
    20fa:	cc 23       	and	r28, r28
    20fc:	a1 f1       	breq	.+104    	; 0x2166 <prvAddCurrentTaskToDelayedList+0xb0>
    20fe:	ec e2       	ldi	r30, 0x2C	; 44
    2100:	f7 e1       	ldi	r31, 0x17	; 23
    2102:	a1 81       	ldd	r26, Z+1	; 0x01
    2104:	b2 81       	ldd	r27, Z+2	; 0x02
    2106:	c0 91 d6 17 	lds	r28, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    210a:	d0 91 d7 17 	lds	r29, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    210e:	bf 83       	std	Y+7, r27	; 0x07
    2110:	ae 83       	std	Y+6, r26	; 0x06
    2112:	c0 91 d6 17 	lds	r28, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2116:	d0 91 d7 17 	lds	r29, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    211a:	16 96       	adiw	r26, 0x06	; 6
    211c:	8d 91       	ld	r24, X+
    211e:	9c 91       	ld	r25, X
    2120:	17 97       	sbiw	r26, 0x07	; 7
    2122:	99 87       	std	Y+9, r25	; 0x09
    2124:	88 87       	std	Y+8, r24	; 0x08
    2126:	16 96       	adiw	r26, 0x06	; 6
    2128:	cd 91       	ld	r28, X+
    212a:	dc 91       	ld	r29, X
    212c:	17 97       	sbiw	r26, 0x07	; 7
    212e:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2132:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2136:	02 96       	adiw	r24, 0x02	; 2
    2138:	9d 83       	std	Y+5, r25	; 0x05
    213a:	8c 83       	std	Y+4, r24	; 0x04
    213c:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2140:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2144:	02 96       	adiw	r24, 0x02	; 2
    2146:	17 96       	adiw	r26, 0x07	; 7
    2148:	9c 93       	st	X, r25
    214a:	8e 93       	st	-X, r24
    214c:	16 97       	sbiw	r26, 0x06	; 6
    214e:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2152:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2156:	1d 96       	adiw	r26, 0x0d	; 13
    2158:	fc 93       	st	X, r31
    215a:	ee 93       	st	-X, r30
    215c:	1c 97       	sbiw	r26, 0x0c	; 12
    215e:	80 81       	ld	r24, Z
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	80 83       	st	Z, r24
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <prvAddCurrentTaskToDelayedList+0x12e>
    2166:	c8 0c       	add	r12, r8
    2168:	d9 1c       	adc	r13, r9
    216a:	ea 1c       	adc	r14, r10
    216c:	fb 1c       	adc	r15, r11
    216e:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2172:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2176:	c2 82       	std	Z+2, r12	; 0x02
    2178:	d3 82       	std	Z+3, r13	; 0x03
    217a:	e4 82       	std	Z+4, r14	; 0x04
    217c:	f5 82       	std	Z+5, r15	; 0x05
    217e:	c8 14       	cp	r12, r8
    2180:	d9 04       	cpc	r13, r9
    2182:	ea 04       	cpc	r14, r10
    2184:	fb 04       	cpc	r15, r11
    2186:	68 f4       	brcc	.+26     	; 0x21a2 <prvAddCurrentTaskToDelayedList+0xec>
    2188:	60 91 d6 17 	lds	r22, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    218c:	70 91 d7 17 	lds	r23, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2190:	80 91 4e 17 	lds	r24, 0x174E	; 0x80174e <pxOverflowDelayedTaskList>
    2194:	90 91 4f 17 	lds	r25, 0x174F	; 0x80174f <pxOverflowDelayedTaskList+0x1>
    2198:	6e 5f       	subi	r22, 0xFE	; 254
    219a:	7f 4f       	sbci	r23, 0xFF	; 255
    219c:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInsert>
    21a0:	21 c0       	rjmp	.+66     	; 0x21e4 <prvAddCurrentTaskToDelayedList+0x12e>
    21a2:	60 91 d6 17 	lds	r22, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    21a6:	70 91 d7 17 	lds	r23, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    21aa:	80 91 50 17 	lds	r24, 0x1750	; 0x801750 <pxDelayedTaskList>
    21ae:	90 91 51 17 	lds	r25, 0x1751	; 0x801751 <pxDelayedTaskList+0x1>
    21b2:	6e 5f       	subi	r22, 0xFE	; 254
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInsert>
    21ba:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <xNextTaskUnblockTime>
    21be:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <xNextTaskUnblockTime+0x1>
    21c2:	a0 91 1c 17 	lds	r26, 0x171C	; 0x80171c <xNextTaskUnblockTime+0x2>
    21c6:	b0 91 1d 17 	lds	r27, 0x171D	; 0x80171d <xNextTaskUnblockTime+0x3>
    21ca:	c8 16       	cp	r12, r24
    21cc:	d9 06       	cpc	r13, r25
    21ce:	ea 06       	cpc	r14, r26
    21d0:	fb 06       	cpc	r15, r27
    21d2:	40 f4       	brcc	.+16     	; 0x21e4 <prvAddCurrentTaskToDelayedList+0x12e>
    21d4:	c0 92 1a 17 	sts	0x171A, r12	; 0x80171a <xNextTaskUnblockTime>
    21d8:	d0 92 1b 17 	sts	0x171B, r13	; 0x80171b <xNextTaskUnblockTime+0x1>
    21dc:	e0 92 1c 17 	sts	0x171C, r14	; 0x80171c <xNextTaskUnblockTime+0x2>
    21e0:	f0 92 1d 17 	sts	0x171D, r15	; 0x80171d <xNextTaskUnblockTime+0x3>
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	df 90       	pop	r13
    21ee:	cf 90       	pop	r12
    21f0:	bf 90       	pop	r11
    21f2:	af 90       	pop	r10
    21f4:	9f 90       	pop	r9
    21f6:	8f 90       	pop	r8
    21f8:	08 95       	ret

000021fa <xTaskCreate>:
    21fa:	2f 92       	push	r2
    21fc:	3f 92       	push	r3
    21fe:	4f 92       	push	r4
    2200:	5f 92       	push	r5
    2202:	6f 92       	push	r6
    2204:	7f 92       	push	r7
    2206:	8f 92       	push	r8
    2208:	9f 92       	push	r9
    220a:	af 92       	push	r10
    220c:	bf 92       	push	r11
    220e:	cf 92       	push	r12
    2210:	df 92       	push	r13
    2212:	ef 92       	push	r14
    2214:	ff 92       	push	r15
    2216:	0f 93       	push	r16
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	3c 01       	movw	r6, r24
    221e:	1b 01       	movw	r2, r22
    2220:	4a 01       	movw	r8, r20
    2222:	29 01       	movw	r4, r18
    2224:	ca 01       	movw	r24, r20
    2226:	0e 94 a1 05 	call	0xb42	; 0xb42 <pvPortMalloc>
    222a:	6c 01       	movw	r12, r24
    222c:	89 2b       	or	r24, r25
    222e:	71 f0       	breq	.+28     	; 0x224c <__stack+0x4d>
    2230:	84 e3       	ldi	r24, 0x34	; 52
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 a1 05 	call	0xb42	; 0xb42 <pvPortMalloc>
    2238:	ec 01       	movw	r28, r24
    223a:	89 2b       	or	r24, r25
    223c:	19 f0       	breq	.+6      	; 0x2244 <__stack+0x45>
    223e:	dc 8e       	std	Y+28, r13	; 0x1c
    2240:	cb 8e       	std	Y+27, r12	; 0x1b
    2242:	06 c0       	rjmp	.+12     	; 0x2250 <__stack+0x51>
    2244:	c6 01       	movw	r24, r12
    2246:	0e 94 4a 06 	call	0xc94	; 0xc94 <vPortFree>
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <__stack+0x51>
    224c:	c0 e0       	ldi	r28, 0x00	; 0
    224e:	d0 e0       	ldi	r29, 0x00	; 0
    2250:	20 97       	sbiw	r28, 0x00	; 0
    2252:	61 f0       	breq	.+24     	; 0x226c <__stack+0x6d>
    2254:	a1 2c       	mov	r10, r1
    2256:	b1 2c       	mov	r11, r1
    2258:	6e 01       	movw	r12, r28
    225a:	92 01       	movw	r18, r4
    225c:	a4 01       	movw	r20, r8
    225e:	b1 01       	movw	r22, r2
    2260:	c3 01       	movw	r24, r6
    2262:	e7 dd       	rcall	.-1074   	; 0x1e32 <prvInitialiseNewTask>
    2264:	ce 01       	movw	r24, r28
    2266:	93 de       	rcall	.-730    	; 0x1f8e <prvAddNewTaskToReadyList>
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	01 c0       	rjmp	.+2      	; 0x226e <__stack+0x6f>
    226c:	8f ef       	ldi	r24, 0xFF	; 255
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	0f 91       	pop	r16
    2274:	ff 90       	pop	r15
    2276:	ef 90       	pop	r14
    2278:	df 90       	pop	r13
    227a:	cf 90       	pop	r12
    227c:	bf 90       	pop	r11
    227e:	af 90       	pop	r10
    2280:	9f 90       	pop	r9
    2282:	8f 90       	pop	r8
    2284:	7f 90       	pop	r7
    2286:	6f 90       	pop	r6
    2288:	5f 90       	pop	r5
    228a:	4f 90       	pop	r4
    228c:	3f 90       	pop	r3
    228e:	2f 90       	pop	r2
    2290:	08 95       	ret

00002292 <vTaskStartScheduler>:
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	0f 2e       	mov	r0, r31
    229a:	f8 e1       	ldi	r31, 0x18	; 24
    229c:	ef 2e       	mov	r14, r31
    229e:	f7 e1       	ldi	r31, 0x17	; 23
    22a0:	ff 2e       	mov	r15, r31
    22a2:	f0 2d       	mov	r31, r0
    22a4:	00 e0       	ldi	r16, 0x00	; 0
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 ec       	ldi	r20, 0xC0	; 192
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	6b e7       	ldi	r22, 0x7B	; 123
    22b0:	73 e0       	ldi	r23, 0x03	; 3
    22b2:	8e e4       	ldi	r24, 0x4E	; 78
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	a1 df       	rcall	.-190    	; 0x21fa <xTaskCreate>
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	11 f4       	brne	.+4      	; 0x22c0 <vTaskStartScheduler+0x2e>
    22bc:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <xTimerCreateTimerTask>
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	c9 f4       	brne	.+50     	; 0x22f6 <vTaskStartScheduler+0x64>
    22c4:	f8 94       	cli
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
    22c8:	9f ef       	ldi	r25, 0xFF	; 255
    22ca:	dc 01       	movw	r26, r24
    22cc:	80 93 1a 17 	sts	0x171A, r24	; 0x80171a <xNextTaskUnblockTime>
    22d0:	90 93 1b 17 	sts	0x171B, r25	; 0x80171b <xNextTaskUnblockTime+0x1>
    22d4:	a0 93 1c 17 	sts	0x171C, r26	; 0x80171c <xNextTaskUnblockTime+0x2>
    22d8:	b0 93 1d 17 	sts	0x171D, r27	; 0x80171d <xNextTaskUnblockTime+0x3>
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	80 93 25 17 	sts	0x1725, r24	; 0x801725 <xSchedulerRunning>
    22e2:	10 92 27 17 	sts	0x1727, r1	; 0x801727 <xTickCount>
    22e6:	10 92 28 17 	sts	0x1728, r1	; 0x801728 <xTickCount+0x1>
    22ea:	10 92 29 17 	sts	0x1729, r1	; 0x801729 <xTickCount+0x2>
    22ee:	10 92 2a 17 	sts	0x172A, r1	; 0x80172a <xTickCount+0x3>
    22f2:	0e 94 23 07 	call	0xe46	; 0xe46 <xPortStartScheduler>
    22f6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    22fa:	0f 91       	pop	r16
    22fc:	ff 90       	pop	r15
    22fe:	ef 90       	pop	r14
    2300:	08 95       	ret

00002302 <vTaskSuspendAll>:
    2302:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <uxSchedulerSuspended>
    2306:	8f 5f       	subi	r24, 0xFF	; 255
    2308:	80 93 17 17 	sts	0x1717, r24	; 0x801717 <uxSchedulerSuspended>
    230c:	08 95       	ret

0000230e <xTaskGetTickCount>:
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	0f 92       	push	r0
    2314:	60 91 27 17 	lds	r22, 0x1727	; 0x801727 <xTickCount>
    2318:	70 91 28 17 	lds	r23, 0x1728	; 0x801728 <xTickCount+0x1>
    231c:	80 91 29 17 	lds	r24, 0x1729	; 0x801729 <xTickCount+0x2>
    2320:	90 91 2a 17 	lds	r25, 0x172A	; 0x80172a <xTickCount+0x3>
    2324:	0f 90       	pop	r0
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	08 95       	ret

0000232a <xTaskIncrementTick>:
    232a:	cf 92       	push	r12
    232c:	df 92       	push	r13
    232e:	ef 92       	push	r14
    2330:	ff 92       	push	r15
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <uxSchedulerSuspended>
    233a:	81 11       	cpse	r24, r1
    233c:	05 c1       	rjmp	.+522    	; 0x2548 <xTaskIncrementTick+0x21e>
    233e:	c0 90 27 17 	lds	r12, 0x1727	; 0x801727 <xTickCount>
    2342:	d0 90 28 17 	lds	r13, 0x1728	; 0x801728 <xTickCount+0x1>
    2346:	e0 90 29 17 	lds	r14, 0x1729	; 0x801729 <xTickCount+0x2>
    234a:	f0 90 2a 17 	lds	r15, 0x172A	; 0x80172a <xTickCount+0x3>
    234e:	8f ef       	ldi	r24, 0xFF	; 255
    2350:	c8 1a       	sub	r12, r24
    2352:	d8 0a       	sbc	r13, r24
    2354:	e8 0a       	sbc	r14, r24
    2356:	f8 0a       	sbc	r15, r24
    2358:	c0 92 27 17 	sts	0x1727, r12	; 0x801727 <xTickCount>
    235c:	d0 92 28 17 	sts	0x1728, r13	; 0x801728 <xTickCount+0x1>
    2360:	e0 92 29 17 	sts	0x1729, r14	; 0x801729 <xTickCount+0x2>
    2364:	f0 92 2a 17 	sts	0x172A, r15	; 0x80172a <xTickCount+0x3>
    2368:	c1 14       	cp	r12, r1
    236a:	d1 04       	cpc	r13, r1
    236c:	e1 04       	cpc	r14, r1
    236e:	f1 04       	cpc	r15, r1
    2370:	b1 f4       	brne	.+44     	; 0x239e <xTaskIncrementTick+0x74>
    2372:	80 91 50 17 	lds	r24, 0x1750	; 0x801750 <pxDelayedTaskList>
    2376:	90 91 51 17 	lds	r25, 0x1751	; 0x801751 <pxDelayedTaskList+0x1>
    237a:	20 91 4e 17 	lds	r18, 0x174E	; 0x80174e <pxOverflowDelayedTaskList>
    237e:	30 91 4f 17 	lds	r19, 0x174F	; 0x80174f <pxOverflowDelayedTaskList+0x1>
    2382:	30 93 51 17 	sts	0x1751, r19	; 0x801751 <pxDelayedTaskList+0x1>
    2386:	20 93 50 17 	sts	0x1750, r18	; 0x801750 <pxDelayedTaskList>
    238a:	90 93 4f 17 	sts	0x174F, r25	; 0x80174f <pxOverflowDelayedTaskList+0x1>
    238e:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <pxOverflowDelayedTaskList>
    2392:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <xNumOfOverflows>
    2396:	8f 5f       	subi	r24, 0xFF	; 255
    2398:	80 93 1f 17 	sts	0x171F, r24	; 0x80171f <xNumOfOverflows>
    239c:	16 dd       	rcall	.-1492   	; 0x1dca <prvResetNextTaskUnblockTime>
    239e:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <xNextTaskUnblockTime>
    23a2:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <xNextTaskUnblockTime+0x1>
    23a6:	a0 91 1c 17 	lds	r26, 0x171C	; 0x80171c <xNextTaskUnblockTime+0x2>
    23aa:	b0 91 1d 17 	lds	r27, 0x171D	; 0x80171d <xNextTaskUnblockTime+0x3>
    23ae:	c8 16       	cp	r12, r24
    23b0:	d9 06       	cpc	r13, r25
    23b2:	ea 06       	cpc	r14, r26
    23b4:	fb 06       	cpc	r15, r27
    23b6:	20 f4       	brcc	.+8      	; 0x23c0 <xTaskIncrementTick+0x96>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	b2 c0       	rjmp	.+356    	; 0x2520 <xTaskIncrementTick+0x1f6>
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	01 c0       	rjmp	.+2      	; 0x23c2 <xTaskIncrementTick+0x98>
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	e0 91 50 17 	lds	r30, 0x1750	; 0x801750 <pxDelayedTaskList>
    23c6:	f0 91 51 17 	lds	r31, 0x1751	; 0x801751 <pxDelayedTaskList+0x1>
    23ca:	90 81       	ld	r25, Z
    23cc:	91 11       	cpse	r25, r1
    23ce:	0c c0       	rjmp	.+24     	; 0x23e8 <xTaskIncrementTick+0xbe>
    23d0:	4f ef       	ldi	r20, 0xFF	; 255
    23d2:	5f ef       	ldi	r21, 0xFF	; 255
    23d4:	ba 01       	movw	r22, r20
    23d6:	40 93 1a 17 	sts	0x171A, r20	; 0x80171a <xNextTaskUnblockTime>
    23da:	50 93 1b 17 	sts	0x171B, r21	; 0x80171b <xNextTaskUnblockTime+0x1>
    23de:	60 93 1c 17 	sts	0x171C, r22	; 0x80171c <xNextTaskUnblockTime+0x2>
    23e2:	70 93 1d 17 	sts	0x171D, r23	; 0x80171d <xNextTaskUnblockTime+0x3>
    23e6:	9c c0       	rjmp	.+312    	; 0x2520 <xTaskIncrementTick+0x1f6>
    23e8:	e0 91 50 17 	lds	r30, 0x1750	; 0x801750 <pxDelayedTaskList>
    23ec:	f0 91 51 17 	lds	r31, 0x1751	; 0x801751 <pxDelayedTaskList+0x1>
    23f0:	07 80       	ldd	r0, Z+7	; 0x07
    23f2:	f0 85       	ldd	r31, Z+8	; 0x08
    23f4:	e0 2d       	mov	r30, r0
    23f6:	00 84       	ldd	r0, Z+8	; 0x08
    23f8:	f1 85       	ldd	r31, Z+9	; 0x09
    23fa:	e0 2d       	mov	r30, r0
    23fc:	42 81       	ldd	r20, Z+2	; 0x02
    23fe:	53 81       	ldd	r21, Z+3	; 0x03
    2400:	64 81       	ldd	r22, Z+4	; 0x04
    2402:	75 81       	ldd	r23, Z+5	; 0x05
    2404:	c4 16       	cp	r12, r20
    2406:	d5 06       	cpc	r13, r21
    2408:	e6 06       	cpc	r14, r22
    240a:	f7 06       	cpc	r15, r23
    240c:	48 f4       	brcc	.+18     	; 0x2420 <xTaskIncrementTick+0xf6>
    240e:	40 93 1a 17 	sts	0x171A, r20	; 0x80171a <xNextTaskUnblockTime>
    2412:	50 93 1b 17 	sts	0x171B, r21	; 0x80171b <xNextTaskUnblockTime+0x1>
    2416:	60 93 1c 17 	sts	0x171C, r22	; 0x80171c <xNextTaskUnblockTime+0x2>
    241a:	70 93 1d 17 	sts	0x171D, r23	; 0x80171d <xNextTaskUnblockTime+0x3>
    241e:	80 c0       	rjmp	.+256    	; 0x2520 <xTaskIncrementTick+0x1f6>
    2420:	a4 85       	ldd	r26, Z+12	; 0x0c
    2422:	b5 85       	ldd	r27, Z+13	; 0x0d
    2424:	c6 81       	ldd	r28, Z+6	; 0x06
    2426:	d7 81       	ldd	r29, Z+7	; 0x07
    2428:	20 85       	ldd	r18, Z+8	; 0x08
    242a:	31 85       	ldd	r19, Z+9	; 0x09
    242c:	3f 83       	std	Y+7, r19	; 0x07
    242e:	2e 83       	std	Y+6, r18	; 0x06
    2430:	c0 85       	ldd	r28, Z+8	; 0x08
    2432:	d1 85       	ldd	r29, Z+9	; 0x09
    2434:	26 81       	ldd	r18, Z+6	; 0x06
    2436:	37 81       	ldd	r19, Z+7	; 0x07
    2438:	3d 83       	std	Y+5, r19	; 0x05
    243a:	2c 83       	std	Y+4, r18	; 0x04
    243c:	11 96       	adiw	r26, 0x01	; 1
    243e:	4d 91       	ld	r20, X+
    2440:	5c 91       	ld	r21, X
    2442:	12 97       	sbiw	r26, 0x02	; 2
    2444:	9f 01       	movw	r18, r30
    2446:	2e 5f       	subi	r18, 0xFE	; 254
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	42 17       	cp	r20, r18
    244c:	53 07       	cpc	r21, r19
    244e:	31 f4       	brne	.+12     	; 0x245c <xTaskIncrementTick+0x132>
    2450:	40 85       	ldd	r20, Z+8	; 0x08
    2452:	51 85       	ldd	r21, Z+9	; 0x09
    2454:	12 96       	adiw	r26, 0x02	; 2
    2456:	5c 93       	st	X, r21
    2458:	4e 93       	st	-X, r20
    245a:	11 97       	sbiw	r26, 0x01	; 1
    245c:	15 86       	std	Z+13, r1	; 0x0d
    245e:	14 86       	std	Z+12, r1	; 0x0c
    2460:	9c 91       	ld	r25, X
    2462:	91 50       	subi	r25, 0x01	; 1
    2464:	9c 93       	st	X, r25
    2466:	a0 8d       	ldd	r26, Z+24	; 0x18
    2468:	b1 8d       	ldd	r27, Z+25	; 0x19
    246a:	10 97       	sbiw	r26, 0x00	; 0
    246c:	09 f1       	breq	.+66     	; 0x24b0 <xTaskIncrementTick+0x186>
    246e:	c2 89       	ldd	r28, Z+18	; 0x12
    2470:	d3 89       	ldd	r29, Z+19	; 0x13
    2472:	44 89       	ldd	r20, Z+20	; 0x14
    2474:	55 89       	ldd	r21, Z+21	; 0x15
    2476:	5f 83       	std	Y+7, r21	; 0x07
    2478:	4e 83       	std	Y+6, r20	; 0x06
    247a:	c4 89       	ldd	r28, Z+20	; 0x14
    247c:	d5 89       	ldd	r29, Z+21	; 0x15
    247e:	42 89       	ldd	r20, Z+18	; 0x12
    2480:	53 89       	ldd	r21, Z+19	; 0x13
    2482:	5d 83       	std	Y+5, r21	; 0x05
    2484:	4c 83       	std	Y+4, r20	; 0x04
    2486:	11 96       	adiw	r26, 0x01	; 1
    2488:	6d 91       	ld	r22, X+
    248a:	7c 91       	ld	r23, X
    248c:	12 97       	sbiw	r26, 0x02	; 2
    248e:	af 01       	movw	r20, r30
    2490:	42 5f       	subi	r20, 0xF2	; 242
    2492:	5f 4f       	sbci	r21, 0xFF	; 255
    2494:	64 17       	cp	r22, r20
    2496:	75 07       	cpc	r23, r21
    2498:	31 f4       	brne	.+12     	; 0x24a6 <xTaskIncrementTick+0x17c>
    249a:	44 89       	ldd	r20, Z+20	; 0x14
    249c:	55 89       	ldd	r21, Z+21	; 0x15
    249e:	12 96       	adiw	r26, 0x02	; 2
    24a0:	5c 93       	st	X, r21
    24a2:	4e 93       	st	-X, r20
    24a4:	11 97       	sbiw	r26, 0x01	; 1
    24a6:	11 8e       	std	Z+25, r1	; 0x19
    24a8:	10 8e       	std	Z+24, r1	; 0x18
    24aa:	9c 91       	ld	r25, X
    24ac:	91 50       	subi	r25, 0x01	; 1
    24ae:	9c 93       	st	X, r25
    24b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24b2:	90 91 26 17 	lds	r25, 0x1726	; 0x801726 <uxTopReadyPriority>
    24b6:	9a 17       	cp	r25, r26
    24b8:	10 f4       	brcc	.+4      	; 0x24be <xTaskIncrementTick+0x194>
    24ba:	a0 93 26 17 	sts	0x1726, r26	; 0x801726 <uxTopReadyPriority>
    24be:	9b e0       	ldi	r25, 0x0B	; 11
    24c0:	9a 9f       	mul	r25, r26
    24c2:	d0 01       	movw	r26, r0
    24c4:	11 24       	eor	r1, r1
    24c6:	a8 59       	subi	r26, 0x98	; 152
    24c8:	b8 4e       	sbci	r27, 0xE8	; 232
    24ca:	11 96       	adiw	r26, 0x01	; 1
    24cc:	0d 90       	ld	r0, X+
    24ce:	bc 91       	ld	r27, X
    24d0:	a0 2d       	mov	r26, r0
    24d2:	b7 83       	std	Z+7, r27	; 0x07
    24d4:	a6 83       	std	Z+6, r26	; 0x06
    24d6:	16 96       	adiw	r26, 0x06	; 6
    24d8:	4d 91       	ld	r20, X+
    24da:	5c 91       	ld	r21, X
    24dc:	17 97       	sbiw	r26, 0x07	; 7
    24de:	51 87       	std	Z+9, r21	; 0x09
    24e0:	40 87       	std	Z+8, r20	; 0x08
    24e2:	16 96       	adiw	r26, 0x06	; 6
    24e4:	cd 91       	ld	r28, X+
    24e6:	dc 91       	ld	r29, X
    24e8:	17 97       	sbiw	r26, 0x07	; 7
    24ea:	3d 83       	std	Y+5, r19	; 0x05
    24ec:	2c 83       	std	Y+4, r18	; 0x04
    24ee:	17 96       	adiw	r26, 0x07	; 7
    24f0:	3c 93       	st	X, r19
    24f2:	2e 93       	st	-X, r18
    24f4:	16 97       	sbiw	r26, 0x06	; 6
    24f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24f8:	9a 9f       	mul	r25, r26
    24fa:	d0 01       	movw	r26, r0
    24fc:	11 24       	eor	r1, r1
    24fe:	a8 59       	subi	r26, 0x98	; 152
    2500:	b8 4e       	sbci	r27, 0xE8	; 232
    2502:	b5 87       	std	Z+13, r27	; 0x0d
    2504:	a4 87       	std	Z+12, r26	; 0x0c
    2506:	9c 91       	ld	r25, X
    2508:	9f 5f       	subi	r25, 0xFF	; 255
    250a:	9c 93       	st	X, r25
    250c:	22 8d       	ldd	r18, Z+26	; 0x1a
    250e:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2512:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2516:	92 8d       	ldd	r25, Z+26	; 0x1a
    2518:	29 17       	cp	r18, r25
    251a:	08 f0       	brcs	.+2      	; 0x251e <xTaskIncrementTick+0x1f4>
    251c:	4f cf       	rjmp	.-354    	; 0x23bc <xTaskIncrementTick+0x92>
    251e:	51 cf       	rjmp	.-350    	; 0x23c2 <xTaskIncrementTick+0x98>
    2520:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2524:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2528:	e2 8d       	ldd	r30, Z+26	; 0x1a
    252a:	9b e0       	ldi	r25, 0x0B	; 11
    252c:	e9 9f       	mul	r30, r25
    252e:	f0 01       	movw	r30, r0
    2530:	11 24       	eor	r1, r1
    2532:	e8 59       	subi	r30, 0x98	; 152
    2534:	f8 4e       	sbci	r31, 0xE8	; 232
    2536:	90 81       	ld	r25, Z
    2538:	92 30       	cpi	r25, 0x02	; 2
    253a:	08 f0       	brcs	.+2      	; 0x253e <xTaskIncrementTick+0x214>
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 91 20 17 	lds	r25, 0x1720	; 0x801720 <xYieldPending>
    2542:	91 11       	cpse	r25, r1
    2544:	16 c0       	rjmp	.+44     	; 0x2572 <xTaskIncrementTick+0x248>
    2546:	16 c0       	rjmp	.+44     	; 0x2574 <xTaskIncrementTick+0x24a>
    2548:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <xPendedTicks>
    254c:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <xPendedTicks+0x1>
    2550:	a0 91 23 17 	lds	r26, 0x1723	; 0x801723 <xPendedTicks+0x2>
    2554:	b0 91 24 17 	lds	r27, 0x1724	; 0x801724 <xPendedTicks+0x3>
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	a1 1d       	adc	r26, r1
    255c:	b1 1d       	adc	r27, r1
    255e:	80 93 21 17 	sts	0x1721, r24	; 0x801721 <xPendedTicks>
    2562:	90 93 22 17 	sts	0x1722, r25	; 0x801722 <xPendedTicks+0x1>
    2566:	a0 93 23 17 	sts	0x1723, r26	; 0x801723 <xPendedTicks+0x2>
    256a:	b0 93 24 17 	sts	0x1724, r27	; 0x801724 <xPendedTicks+0x3>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <xTaskIncrementTick+0x24a>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	ff 90       	pop	r15
    257a:	ef 90       	pop	r14
    257c:	df 90       	pop	r13
    257e:	cf 90       	pop	r12
    2580:	08 95       	ret

00002582 <xTaskResumeAll>:
    2582:	cf 92       	push	r12
    2584:	df 92       	push	r13
    2586:	ef 92       	push	r14
    2588:	ff 92       	push	r15
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	0f 92       	push	r0
    2594:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <uxSchedulerSuspended>
    2598:	81 50       	subi	r24, 0x01	; 1
    259a:	80 93 17 17 	sts	0x1717, r24	; 0x801717 <uxSchedulerSuspended>
    259e:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <uxSchedulerSuspended>
    25a2:	81 11       	cpse	r24, r1
    25a4:	be c0       	rjmp	.+380    	; 0x2722 <xTaskResumeAll+0x1a0>
    25a6:	80 91 2b 17 	lds	r24, 0x172B	; 0x80172b <uxCurrentNumberOfTasks>
    25aa:	81 11       	cpse	r24, r1
    25ac:	88 c0       	rjmp	.+272    	; 0x26be <xTaskResumeAll+0x13c>
    25ae:	bc c0       	rjmp	.+376    	; 0x2728 <xTaskResumeAll+0x1a6>
    25b0:	e0 91 4a 17 	lds	r30, 0x174A	; 0x80174a <xPendingReadyList+0x7>
    25b4:	f0 91 4b 17 	lds	r31, 0x174B	; 0x80174b <xPendingReadyList+0x8>
    25b8:	00 84       	ldd	r0, Z+8	; 0x08
    25ba:	f1 85       	ldd	r31, Z+9	; 0x09
    25bc:	e0 2d       	mov	r30, r0
    25be:	a0 8d       	ldd	r26, Z+24	; 0x18
    25c0:	b1 8d       	ldd	r27, Z+25	; 0x19
    25c2:	c2 89       	ldd	r28, Z+18	; 0x12
    25c4:	d3 89       	ldd	r29, Z+19	; 0x13
    25c6:	84 89       	ldd	r24, Z+20	; 0x14
    25c8:	95 89       	ldd	r25, Z+21	; 0x15
    25ca:	9f 83       	std	Y+7, r25	; 0x07
    25cc:	8e 83       	std	Y+6, r24	; 0x06
    25ce:	c4 89       	ldd	r28, Z+20	; 0x14
    25d0:	d5 89       	ldd	r29, Z+21	; 0x15
    25d2:	82 89       	ldd	r24, Z+18	; 0x12
    25d4:	93 89       	ldd	r25, Z+19	; 0x13
    25d6:	9d 83       	std	Y+5, r25	; 0x05
    25d8:	8c 83       	std	Y+4, r24	; 0x04
    25da:	11 96       	adiw	r26, 0x01	; 1
    25dc:	2d 91       	ld	r18, X+
    25de:	3c 91       	ld	r19, X
    25e0:	12 97       	sbiw	r26, 0x02	; 2
    25e2:	cf 01       	movw	r24, r30
    25e4:	0e 96       	adiw	r24, 0x0e	; 14
    25e6:	28 17       	cp	r18, r24
    25e8:	39 07       	cpc	r19, r25
    25ea:	31 f4       	brne	.+12     	; 0x25f8 <xTaskResumeAll+0x76>
    25ec:	84 89       	ldd	r24, Z+20	; 0x14
    25ee:	95 89       	ldd	r25, Z+21	; 0x15
    25f0:	12 96       	adiw	r26, 0x02	; 2
    25f2:	9c 93       	st	X, r25
    25f4:	8e 93       	st	-X, r24
    25f6:	11 97       	sbiw	r26, 0x01	; 1
    25f8:	11 8e       	std	Z+25, r1	; 0x19
    25fa:	10 8e       	std	Z+24, r1	; 0x18
    25fc:	8c 91       	ld	r24, X
    25fe:	81 50       	subi	r24, 0x01	; 1
    2600:	8c 93       	st	X, r24
    2602:	a4 85       	ldd	r26, Z+12	; 0x0c
    2604:	b5 85       	ldd	r27, Z+13	; 0x0d
    2606:	c6 81       	ldd	r28, Z+6	; 0x06
    2608:	d7 81       	ldd	r29, Z+7	; 0x07
    260a:	80 85       	ldd	r24, Z+8	; 0x08
    260c:	91 85       	ldd	r25, Z+9	; 0x09
    260e:	9f 83       	std	Y+7, r25	; 0x07
    2610:	8e 83       	std	Y+6, r24	; 0x06
    2612:	c0 85       	ldd	r28, Z+8	; 0x08
    2614:	d1 85       	ldd	r29, Z+9	; 0x09
    2616:	86 81       	ldd	r24, Z+6	; 0x06
    2618:	97 81       	ldd	r25, Z+7	; 0x07
    261a:	9d 83       	std	Y+5, r25	; 0x05
    261c:	8c 83       	std	Y+4, r24	; 0x04
    261e:	11 96       	adiw	r26, 0x01	; 1
    2620:	8d 91       	ld	r24, X+
    2622:	9c 91       	ld	r25, X
    2624:	12 97       	sbiw	r26, 0x02	; 2
    2626:	9f 01       	movw	r18, r30
    2628:	2e 5f       	subi	r18, 0xFE	; 254
    262a:	3f 4f       	sbci	r19, 0xFF	; 255
    262c:	82 17       	cp	r24, r18
    262e:	93 07       	cpc	r25, r19
    2630:	31 f4       	brne	.+12     	; 0x263e <xTaskResumeAll+0xbc>
    2632:	80 85       	ldd	r24, Z+8	; 0x08
    2634:	91 85       	ldd	r25, Z+9	; 0x09
    2636:	12 96       	adiw	r26, 0x02	; 2
    2638:	9c 93       	st	X, r25
    263a:	8e 93       	st	-X, r24
    263c:	11 97       	sbiw	r26, 0x01	; 1
    263e:	15 86       	std	Z+13, r1	; 0x0d
    2640:	14 86       	std	Z+12, r1	; 0x0c
    2642:	8c 91       	ld	r24, X
    2644:	81 50       	subi	r24, 0x01	; 1
    2646:	8c 93       	st	X, r24
    2648:	a2 8d       	ldd	r26, Z+26	; 0x1a
    264a:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <uxTopReadyPriority>
    264e:	8a 17       	cp	r24, r26
    2650:	10 f4       	brcc	.+4      	; 0x2656 <xTaskResumeAll+0xd4>
    2652:	a0 93 26 17 	sts	0x1726, r26	; 0x801726 <uxTopReadyPriority>
    2656:	8b e0       	ldi	r24, 0x0B	; 11
    2658:	8a 9f       	mul	r24, r26
    265a:	d0 01       	movw	r26, r0
    265c:	11 24       	eor	r1, r1
    265e:	a8 59       	subi	r26, 0x98	; 152
    2660:	b8 4e       	sbci	r27, 0xE8	; 232
    2662:	11 96       	adiw	r26, 0x01	; 1
    2664:	0d 90       	ld	r0, X+
    2666:	bc 91       	ld	r27, X
    2668:	a0 2d       	mov	r26, r0
    266a:	b7 83       	std	Z+7, r27	; 0x07
    266c:	a6 83       	std	Z+6, r26	; 0x06
    266e:	16 96       	adiw	r26, 0x06	; 6
    2670:	4d 91       	ld	r20, X+
    2672:	5c 91       	ld	r21, X
    2674:	17 97       	sbiw	r26, 0x07	; 7
    2676:	51 87       	std	Z+9, r21	; 0x09
    2678:	40 87       	std	Z+8, r20	; 0x08
    267a:	16 96       	adiw	r26, 0x06	; 6
    267c:	cd 91       	ld	r28, X+
    267e:	dc 91       	ld	r29, X
    2680:	17 97       	sbiw	r26, 0x07	; 7
    2682:	3d 83       	std	Y+5, r19	; 0x05
    2684:	2c 83       	std	Y+4, r18	; 0x04
    2686:	17 96       	adiw	r26, 0x07	; 7
    2688:	3c 93       	st	X, r19
    268a:	2e 93       	st	-X, r18
    268c:	16 97       	sbiw	r26, 0x06	; 6
    268e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2690:	8a 9f       	mul	r24, r26
    2692:	d0 01       	movw	r26, r0
    2694:	11 24       	eor	r1, r1
    2696:	a8 59       	subi	r26, 0x98	; 152
    2698:	b8 4e       	sbci	r27, 0xE8	; 232
    269a:	b5 87       	std	Z+13, r27	; 0x0d
    269c:	a4 87       	std	Z+12, r26	; 0x0c
    269e:	8c 91       	ld	r24, X
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	8c 93       	st	X, r24
    26a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    26a6:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    26aa:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    26ae:	5a 96       	adiw	r26, 0x1a	; 26
    26b0:	8c 91       	ld	r24, X
    26b2:	98 17       	cp	r25, r24
    26b4:	30 f0       	brcs	.+12     	; 0x26c2 <xTaskResumeAll+0x140>
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <xYieldPending>
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <xTaskResumeAll+0x140>
    26be:	e0 e0       	ldi	r30, 0x00	; 0
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 91 43 17 	lds	r24, 0x1743	; 0x801743 <xPendingReadyList>
    26c6:	81 11       	cpse	r24, r1
    26c8:	73 cf       	rjmp	.-282    	; 0x25b0 <xTaskResumeAll+0x2e>
    26ca:	ef 2b       	or	r30, r31
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <xTaskResumeAll+0x14e>
    26ce:	7d db       	rcall	.-2310   	; 0x1dca <prvResetNextTaskUnblockTime>
    26d0:	c0 90 21 17 	lds	r12, 0x1721	; 0x801721 <xPendedTicks>
    26d4:	d0 90 22 17 	lds	r13, 0x1722	; 0x801722 <xPendedTicks+0x1>
    26d8:	e0 90 23 17 	lds	r14, 0x1723	; 0x801723 <xPendedTicks+0x2>
    26dc:	f0 90 24 17 	lds	r15, 0x1724	; 0x801724 <xPendedTicks+0x3>
    26e0:	c1 14       	cp	r12, r1
    26e2:	d1 04       	cpc	r13, r1
    26e4:	e1 04       	cpc	r14, r1
    26e6:	f1 04       	cpc	r15, r1
    26e8:	a1 f0       	breq	.+40     	; 0x2712 <xTaskResumeAll+0x190>
    26ea:	1f de       	rcall	.-962    	; 0x232a <xTaskIncrementTick>
    26ec:	88 23       	and	r24, r24
    26ee:	19 f0       	breq	.+6      	; 0x26f6 <xTaskResumeAll+0x174>
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <xYieldPending>
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	c8 1a       	sub	r12, r24
    26fa:	d1 08       	sbc	r13, r1
    26fc:	e1 08       	sbc	r14, r1
    26fe:	f1 08       	sbc	r15, r1
    2700:	a1 f7       	brne	.-24     	; 0x26ea <xTaskResumeAll+0x168>
    2702:	10 92 21 17 	sts	0x1721, r1	; 0x801721 <xPendedTicks>
    2706:	10 92 22 17 	sts	0x1722, r1	; 0x801722 <xPendedTicks+0x1>
    270a:	10 92 23 17 	sts	0x1723, r1	; 0x801723 <xPendedTicks+0x2>
    270e:	10 92 24 17 	sts	0x1724, r1	; 0x801724 <xPendedTicks+0x3>
    2712:	80 91 20 17 	lds	r24, 0x1720	; 0x801720 <xYieldPending>
    2716:	88 23       	and	r24, r24
    2718:	31 f0       	breq	.+12     	; 0x2726 <xTaskResumeAll+0x1a4>
    271a:	0e 94 55 07 	call	0xeaa	; 0xeaa <vPortYield>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	03 c0       	rjmp	.+6      	; 0x2728 <xTaskResumeAll+0x1a6>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	01 c0       	rjmp	.+2      	; 0x2728 <xTaskResumeAll+0x1a6>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	0f 90       	pop	r0
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	ff 90       	pop	r15
    2732:	ef 90       	pop	r14
    2734:	df 90       	pop	r13
    2736:	cf 90       	pop	r12
    2738:	08 95       	ret

0000273a <xTaskDelayUntil>:
    273a:	8f 92       	push	r8
    273c:	9f 92       	push	r9
    273e:	af 92       	push	r10
    2740:	bf 92       	push	r11
    2742:	cf 92       	push	r12
    2744:	df 92       	push	r13
    2746:	ef 92       	push	r14
    2748:	ff 92       	push	r15
    274a:	1f 93       	push	r17
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	ec 01       	movw	r28, r24
    2752:	6a 01       	movw	r12, r20
    2754:	7b 01       	movw	r14, r22
    2756:	d5 dd       	rcall	.-1110   	; 0x2302 <vTaskSuspendAll>
    2758:	80 90 27 17 	lds	r8, 0x1727	; 0x801727 <xTickCount>
    275c:	90 90 28 17 	lds	r9, 0x1728	; 0x801728 <xTickCount+0x1>
    2760:	a0 90 29 17 	lds	r10, 0x1729	; 0x801729 <xTickCount+0x2>
    2764:	b0 90 2a 17 	lds	r11, 0x172A	; 0x80172a <xTickCount+0x3>
    2768:	88 81       	ld	r24, Y
    276a:	99 81       	ldd	r25, Y+1	; 0x01
    276c:	aa 81       	ldd	r26, Y+2	; 0x02
    276e:	bb 81       	ldd	r27, Y+3	; 0x03
    2770:	ac 01       	movw	r20, r24
    2772:	bd 01       	movw	r22, r26
    2774:	4c 0d       	add	r20, r12
    2776:	5d 1d       	adc	r21, r13
    2778:	6e 1d       	adc	r22, r14
    277a:	7f 1d       	adc	r23, r15
    277c:	88 16       	cp	r8, r24
    277e:	99 06       	cpc	r9, r25
    2780:	aa 06       	cpc	r10, r26
    2782:	bb 06       	cpc	r11, r27
    2784:	60 f4       	brcc	.+24     	; 0x279e <xTaskDelayUntil+0x64>
    2786:	48 17       	cp	r20, r24
    2788:	59 07       	cpc	r21, r25
    278a:	6a 07       	cpc	r22, r26
    278c:	7b 07       	cpc	r23, r27
    278e:	98 f4       	brcc	.+38     	; 0x27b6 <xTaskDelayUntil+0x7c>
    2790:	84 16       	cp	r8, r20
    2792:	95 06       	cpc	r9, r21
    2794:	a6 06       	cpc	r10, r22
    2796:	b7 06       	cpc	r11, r23
    2798:	80 f0       	brcs	.+32     	; 0x27ba <xTaskDelayUntil+0x80>
    279a:	10 e0       	ldi	r17, 0x00	; 0
    279c:	13 c0       	rjmp	.+38     	; 0x27c4 <xTaskDelayUntil+0x8a>
    279e:	48 17       	cp	r20, r24
    27a0:	59 07       	cpc	r21, r25
    27a2:	6a 07       	cpc	r22, r26
    27a4:	7b 07       	cpc	r23, r27
    27a6:	58 f0       	brcs	.+22     	; 0x27be <xTaskDelayUntil+0x84>
    27a8:	84 16       	cp	r8, r20
    27aa:	95 06       	cpc	r9, r21
    27ac:	a6 06       	cpc	r10, r22
    27ae:	b7 06       	cpc	r11, r23
    27b0:	40 f0       	brcs	.+16     	; 0x27c2 <xTaskDelayUntil+0x88>
    27b2:	10 e0       	ldi	r17, 0x00	; 0
    27b4:	07 c0       	rjmp	.+14     	; 0x27c4 <xTaskDelayUntil+0x8a>
    27b6:	10 e0       	ldi	r17, 0x00	; 0
    27b8:	05 c0       	rjmp	.+10     	; 0x27c4 <xTaskDelayUntil+0x8a>
    27ba:	11 e0       	ldi	r17, 0x01	; 1
    27bc:	03 c0       	rjmp	.+6      	; 0x27c4 <xTaskDelayUntil+0x8a>
    27be:	11 e0       	ldi	r17, 0x01	; 1
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <xTaskDelayUntil+0x8a>
    27c2:	11 e0       	ldi	r17, 0x01	; 1
    27c4:	48 83       	st	Y, r20
    27c6:	59 83       	std	Y+1, r21	; 0x01
    27c8:	6a 83       	std	Y+2, r22	; 0x02
    27ca:	7b 83       	std	Y+3, r23	; 0x03
    27cc:	11 23       	and	r17, r17
    27ce:	41 f0       	breq	.+16     	; 0x27e0 <xTaskDelayUntil+0xa6>
    27d0:	cb 01       	movw	r24, r22
    27d2:	ba 01       	movw	r22, r20
    27d4:	68 19       	sub	r22, r8
    27d6:	79 09       	sbc	r23, r9
    27d8:	8a 09       	sbc	r24, r10
    27da:	9b 09       	sbc	r25, r11
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	6b dc       	rcall	.-1834   	; 0x20b6 <prvAddCurrentTaskToDelayedList>
    27e0:	d0 de       	rcall	.-608    	; 0x2582 <xTaskResumeAll>
    27e2:	81 11       	cpse	r24, r1
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <xTaskDelayUntil+0xb0>
    27e6:	0e 94 55 07 	call	0xeaa	; 0xeaa <vPortYield>
    27ea:	81 2f       	mov	r24, r17
    27ec:	df 91       	pop	r29
    27ee:	cf 91       	pop	r28
    27f0:	1f 91       	pop	r17
    27f2:	ff 90       	pop	r15
    27f4:	ef 90       	pop	r14
    27f6:	df 90       	pop	r13
    27f8:	cf 90       	pop	r12
    27fa:	bf 90       	pop	r11
    27fc:	af 90       	pop	r10
    27fe:	9f 90       	pop	r9
    2800:	8f 90       	pop	r8
    2802:	08 95       	ret

00002804 <vTaskDelay>:
    2804:	cf 92       	push	r12
    2806:	df 92       	push	r13
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	6b 01       	movw	r12, r22
    280e:	7c 01       	movw	r14, r24
    2810:	67 2b       	or	r22, r23
    2812:	68 2b       	or	r22, r24
    2814:	69 2b       	or	r22, r25
    2816:	39 f0       	breq	.+14     	; 0x2826 <vTaskDelay+0x22>
    2818:	74 dd       	rcall	.-1304   	; 0x2302 <vTaskSuspendAll>
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	c7 01       	movw	r24, r14
    281e:	b6 01       	movw	r22, r12
    2820:	4a dc       	rcall	.-1900   	; 0x20b6 <prvAddCurrentTaskToDelayedList>
    2822:	af de       	rcall	.-674    	; 0x2582 <xTaskResumeAll>
    2824:	01 c0       	rjmp	.+2      	; 0x2828 <vTaskDelay+0x24>
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	81 11       	cpse	r24, r1
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <vTaskDelay+0x2c>
    282c:	0e 94 55 07 	call	0xeaa	; 0xeaa <vPortYield>
    2830:	ff 90       	pop	r15
    2832:	ef 90       	pop	r14
    2834:	df 90       	pop	r13
    2836:	cf 90       	pop	r12
    2838:	08 95       	ret

0000283a <vTaskSwitchContext>:
    283a:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <uxSchedulerSuspended>
    283e:	88 23       	and	r24, r24
    2840:	21 f0       	breq	.+8      	; 0x284a <vTaskSwitchContext+0x10>
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <xYieldPending>
    2848:	08 95       	ret
    284a:	10 92 20 17 	sts	0x1720, r1	; 0x801720 <xYieldPending>
    284e:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2852:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2856:	20 81       	ld	r18, Z
    2858:	31 81       	ldd	r19, Z+1	; 0x01
    285a:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    285e:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2862:	83 8d       	ldd	r24, Z+27	; 0x1b
    2864:	94 8d       	ldd	r25, Z+28	; 0x1c
    2866:	82 17       	cp	r24, r18
    2868:	93 07       	cpc	r25, r19
    286a:	60 f0       	brcs	.+24     	; 0x2884 <vTaskSwitchContext+0x4a>
    286c:	60 91 d6 17 	lds	r22, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2870:	70 91 d7 17 	lds	r23, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2874:	63 5e       	subi	r22, 0xE3	; 227
    2876:	7f 4f       	sbci	r23, 0xFF	; 255
    2878:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    287c:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2880:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <vApplicationStackOverflowHook>
    2884:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <uxTopReadyPriority>
    2888:	01 c0       	rjmp	.+2      	; 0x288c <vTaskSwitchContext+0x52>
    288a:	81 50       	subi	r24, 0x01	; 1
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	9b e0       	ldi	r25, 0x0B	; 11
    2892:	92 9f       	mul	r25, r18
    2894:	f0 01       	movw	r30, r0
    2896:	93 9f       	mul	r25, r19
    2898:	f0 0d       	add	r31, r0
    289a:	11 24       	eor	r1, r1
    289c:	e8 59       	subi	r30, 0x98	; 152
    289e:	f8 4e       	sbci	r31, 0xE8	; 232
    28a0:	90 81       	ld	r25, Z
    28a2:	99 23       	and	r25, r25
    28a4:	91 f3       	breq	.-28     	; 0x288a <vTaskSwitchContext+0x50>
    28a6:	9b e0       	ldi	r25, 0x0B	; 11
    28a8:	92 9f       	mul	r25, r18
    28aa:	a0 01       	movw	r20, r0
    28ac:	93 9f       	mul	r25, r19
    28ae:	50 0d       	add	r21, r0
    28b0:	11 24       	eor	r1, r1
    28b2:	df 01       	movw	r26, r30
    28b4:	01 80       	ldd	r0, Z+1	; 0x01
    28b6:	f2 81       	ldd	r31, Z+2	; 0x02
    28b8:	e0 2d       	mov	r30, r0
    28ba:	04 80       	ldd	r0, Z+4	; 0x04
    28bc:	f5 81       	ldd	r31, Z+5	; 0x05
    28be:	e0 2d       	mov	r30, r0
    28c0:	12 96       	adiw	r26, 0x02	; 2
    28c2:	fc 93       	st	X, r31
    28c4:	ee 93       	st	-X, r30
    28c6:	11 97       	sbiw	r26, 0x01	; 1
    28c8:	45 59       	subi	r20, 0x95	; 149
    28ca:	58 4e       	sbci	r21, 0xE8	; 232
    28cc:	e4 17       	cp	r30, r20
    28ce:	f5 07       	cpc	r31, r21
    28d0:	29 f4       	brne	.+10     	; 0x28dc <vTaskSwitchContext+0xa2>
    28d2:	44 81       	ldd	r20, Z+4	; 0x04
    28d4:	55 81       	ldd	r21, Z+5	; 0x05
    28d6:	fd 01       	movw	r30, r26
    28d8:	52 83       	std	Z+2, r21	; 0x02
    28da:	41 83       	std	Z+1, r20	; 0x01
    28dc:	9b e0       	ldi	r25, 0x0B	; 11
    28de:	92 9f       	mul	r25, r18
    28e0:	f0 01       	movw	r30, r0
    28e2:	93 9f       	mul	r25, r19
    28e4:	f0 0d       	add	r31, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	e8 59       	subi	r30, 0x98	; 152
    28ea:	f8 4e       	sbci	r31, 0xE8	; 232
    28ec:	01 80       	ldd	r0, Z+1	; 0x01
    28ee:	f2 81       	ldd	r31, Z+2	; 0x02
    28f0:	e0 2d       	mov	r30, r0
    28f2:	20 85       	ldd	r18, Z+8	; 0x08
    28f4:	31 85       	ldd	r19, Z+9	; 0x09
    28f6:	30 93 d7 17 	sts	0x17D7, r19	; 0x8017d7 <pxCurrentTCB+0x1>
    28fa:	20 93 d6 17 	sts	0x17D6, r18	; 0x8017d6 <pxCurrentTCB>
    28fe:	80 93 26 17 	sts	0x1726, r24	; 0x801726 <uxTopReadyPriority>
    2902:	08 95       	ret

00002904 <vTaskPlaceOnEventList>:
    2904:	cf 92       	push	r12
    2906:	df 92       	push	r13
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	6a 01       	movw	r12, r20
    290e:	7b 01       	movw	r14, r22
    2910:	60 91 d6 17 	lds	r22, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2914:	70 91 d7 17 	lds	r23, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2918:	62 5f       	subi	r22, 0xF2	; 242
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInsert>
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	c7 01       	movw	r24, r14
    2924:	b6 01       	movw	r22, r12
    2926:	c7 db       	rcall	.-2162   	; 0x20b6 <prvAddCurrentTaskToDelayedList>
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	cf 90       	pop	r12
    2930:	08 95       	ret

00002932 <vTaskPlaceOnUnorderedEventList>:
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	fc 01       	movw	r30, r24
    293c:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2940:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2944:	70 68       	ori	r23, 0x80	; 128
    2946:	1e 96       	adiw	r26, 0x0e	; 14
    2948:	4d 93       	st	X+, r20
    294a:	5d 93       	st	X+, r21
    294c:	6d 93       	st	X+, r22
    294e:	7c 93       	st	X, r23
    2950:	51 97       	sbiw	r26, 0x11	; 17
    2952:	a1 81       	ldd	r26, Z+1	; 0x01
    2954:	b2 81       	ldd	r27, Z+2	; 0x02
    2956:	c0 91 d6 17 	lds	r28, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    295a:	d0 91 d7 17 	lds	r29, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    295e:	bb 8b       	std	Y+19, r27	; 0x13
    2960:	aa 8b       	std	Y+18, r26	; 0x12
    2962:	c0 91 d6 17 	lds	r28, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2966:	d0 91 d7 17 	lds	r29, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    296a:	16 96       	adiw	r26, 0x06	; 6
    296c:	8d 91       	ld	r24, X+
    296e:	9c 91       	ld	r25, X
    2970:	17 97       	sbiw	r26, 0x07	; 7
    2972:	9d 8b       	std	Y+21, r25	; 0x15
    2974:	8c 8b       	std	Y+20, r24	; 0x14
    2976:	16 96       	adiw	r26, 0x06	; 6
    2978:	cd 91       	ld	r28, X+
    297a:	dc 91       	ld	r29, X
    297c:	17 97       	sbiw	r26, 0x07	; 7
    297e:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2982:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2986:	0e 96       	adiw	r24, 0x0e	; 14
    2988:	9d 83       	std	Y+5, r25	; 0x05
    298a:	8c 83       	std	Y+4, r24	; 0x04
    298c:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2990:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2994:	0e 96       	adiw	r24, 0x0e	; 14
    2996:	17 96       	adiw	r26, 0x07	; 7
    2998:	9c 93       	st	X, r25
    299a:	8e 93       	st	-X, r24
    299c:	16 97       	sbiw	r26, 0x06	; 6
    299e:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    29a2:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    29a6:	59 96       	adiw	r26, 0x19	; 25
    29a8:	fc 93       	st	X, r31
    29aa:	ee 93       	st	-X, r30
    29ac:	58 97       	sbiw	r26, 0x18	; 24
    29ae:	80 81       	ld	r24, Z
    29b0:	8f 5f       	subi	r24, 0xFF	; 255
    29b2:	80 83       	st	Z, r24
    29b4:	41 e0       	ldi	r20, 0x01	; 1
    29b6:	c9 01       	movw	r24, r18
    29b8:	b8 01       	movw	r22, r16
    29ba:	7d db       	rcall	.-2310   	; 0x20b6 <prvAddCurrentTaskToDelayedList>
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	08 95       	ret

000029c6 <vTaskPlaceOnEventListRestricted>:
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	fc 01       	movw	r30, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	ba 01       	movw	r22, r20
    29d0:	a1 81       	ldd	r26, Z+1	; 0x01
    29d2:	b2 81       	ldd	r27, Z+2	; 0x02
    29d4:	c0 91 d6 17 	lds	r28, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    29d8:	d0 91 d7 17 	lds	r29, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    29dc:	bb 8b       	std	Y+19, r27	; 0x13
    29de:	aa 8b       	std	Y+18, r26	; 0x12
    29e0:	c0 91 d6 17 	lds	r28, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    29e4:	d0 91 d7 17 	lds	r29, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    29e8:	16 96       	adiw	r26, 0x06	; 6
    29ea:	4d 91       	ld	r20, X+
    29ec:	5c 91       	ld	r21, X
    29ee:	17 97       	sbiw	r26, 0x07	; 7
    29f0:	5d 8b       	std	Y+21, r21	; 0x15
    29f2:	4c 8b       	std	Y+20, r20	; 0x14
    29f4:	16 96       	adiw	r26, 0x06	; 6
    29f6:	cd 91       	ld	r28, X+
    29f8:	dc 91       	ld	r29, X
    29fa:	17 97       	sbiw	r26, 0x07	; 7
    29fc:	40 91 d6 17 	lds	r20, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2a00:	50 91 d7 17 	lds	r21, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2a04:	42 5f       	subi	r20, 0xF2	; 242
    2a06:	5f 4f       	sbci	r21, 0xFF	; 255
    2a08:	5d 83       	std	Y+5, r21	; 0x05
    2a0a:	4c 83       	std	Y+4, r20	; 0x04
    2a0c:	40 91 d6 17 	lds	r20, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2a10:	50 91 d7 17 	lds	r21, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2a14:	42 5f       	subi	r20, 0xF2	; 242
    2a16:	5f 4f       	sbci	r21, 0xFF	; 255
    2a18:	17 96       	adiw	r26, 0x07	; 7
    2a1a:	5c 93       	st	X, r21
    2a1c:	4e 93       	st	-X, r20
    2a1e:	16 97       	sbiw	r26, 0x06	; 6
    2a20:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2a24:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2a28:	59 96       	adiw	r26, 0x19	; 25
    2a2a:	fc 93       	st	X, r31
    2a2c:	ee 93       	st	-X, r30
    2a2e:	58 97       	sbiw	r26, 0x18	; 24
    2a30:	30 81       	ld	r19, Z
    2a32:	3f 5f       	subi	r19, 0xFF	; 255
    2a34:	30 83       	st	Z, r19
    2a36:	22 23       	and	r18, r18
    2a38:	19 f0       	breq	.+6      	; 0x2a40 <vTaskPlaceOnEventListRestricted+0x7a>
    2a3a:	6f ef       	ldi	r22, 0xFF	; 255
    2a3c:	7f ef       	ldi	r23, 0xFF	; 255
    2a3e:	cb 01       	movw	r24, r22
    2a40:	42 2f       	mov	r20, r18
    2a42:	39 db       	rcall	.-2446   	; 0x20b6 <prvAddCurrentTaskToDelayedList>
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	08 95       	ret

00002a4a <xTaskRemoveFromEventList>:
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	dc 01       	movw	r26, r24
    2a50:	17 96       	adiw	r26, 0x07	; 7
    2a52:	ed 91       	ld	r30, X+
    2a54:	fc 91       	ld	r31, X
    2a56:	18 97       	sbiw	r26, 0x08	; 8
    2a58:	00 84       	ldd	r0, Z+8	; 0x08
    2a5a:	f1 85       	ldd	r31, Z+9	; 0x09
    2a5c:	e0 2d       	mov	r30, r0
    2a5e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2a60:	b1 8d       	ldd	r27, Z+25	; 0x19
    2a62:	c2 89       	ldd	r28, Z+18	; 0x12
    2a64:	d3 89       	ldd	r29, Z+19	; 0x13
    2a66:	84 89       	ldd	r24, Z+20	; 0x14
    2a68:	95 89       	ldd	r25, Z+21	; 0x15
    2a6a:	9f 83       	std	Y+7, r25	; 0x07
    2a6c:	8e 83       	std	Y+6, r24	; 0x06
    2a6e:	c4 89       	ldd	r28, Z+20	; 0x14
    2a70:	d5 89       	ldd	r29, Z+21	; 0x15
    2a72:	82 89       	ldd	r24, Z+18	; 0x12
    2a74:	93 89       	ldd	r25, Z+19	; 0x13
    2a76:	9d 83       	std	Y+5, r25	; 0x05
    2a78:	8c 83       	std	Y+4, r24	; 0x04
    2a7a:	11 96       	adiw	r26, 0x01	; 1
    2a7c:	8d 91       	ld	r24, X+
    2a7e:	9c 91       	ld	r25, X
    2a80:	12 97       	sbiw	r26, 0x02	; 2
    2a82:	9f 01       	movw	r18, r30
    2a84:	22 5f       	subi	r18, 0xF2	; 242
    2a86:	3f 4f       	sbci	r19, 0xFF	; 255
    2a88:	82 17       	cp	r24, r18
    2a8a:	93 07       	cpc	r25, r19
    2a8c:	31 f4       	brne	.+12     	; 0x2a9a <xTaskRemoveFromEventList+0x50>
    2a8e:	84 89       	ldd	r24, Z+20	; 0x14
    2a90:	95 89       	ldd	r25, Z+21	; 0x15
    2a92:	12 96       	adiw	r26, 0x02	; 2
    2a94:	9c 93       	st	X, r25
    2a96:	8e 93       	st	-X, r24
    2a98:	11 97       	sbiw	r26, 0x01	; 1
    2a9a:	11 8e       	std	Z+25, r1	; 0x19
    2a9c:	10 8e       	std	Z+24, r1	; 0x18
    2a9e:	8c 91       	ld	r24, X
    2aa0:	81 50       	subi	r24, 0x01	; 1
    2aa2:	8c 93       	st	X, r24
    2aa4:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <uxSchedulerSuspended>
    2aa8:	81 11       	cpse	r24, r1
    2aaa:	52 c0       	rjmp	.+164    	; 0x2b50 <xTaskRemoveFromEventList+0x106>
    2aac:	a4 85       	ldd	r26, Z+12	; 0x0c
    2aae:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ab0:	c6 81       	ldd	r28, Z+6	; 0x06
    2ab2:	d7 81       	ldd	r29, Z+7	; 0x07
    2ab4:	80 85       	ldd	r24, Z+8	; 0x08
    2ab6:	91 85       	ldd	r25, Z+9	; 0x09
    2ab8:	9f 83       	std	Y+7, r25	; 0x07
    2aba:	8e 83       	std	Y+6, r24	; 0x06
    2abc:	c0 85       	ldd	r28, Z+8	; 0x08
    2abe:	d1 85       	ldd	r29, Z+9	; 0x09
    2ac0:	86 81       	ldd	r24, Z+6	; 0x06
    2ac2:	97 81       	ldd	r25, Z+7	; 0x07
    2ac4:	9d 83       	std	Y+5, r25	; 0x05
    2ac6:	8c 83       	std	Y+4, r24	; 0x04
    2ac8:	11 96       	adiw	r26, 0x01	; 1
    2aca:	8d 91       	ld	r24, X+
    2acc:	9c 91       	ld	r25, X
    2ace:	12 97       	sbiw	r26, 0x02	; 2
    2ad0:	9f 01       	movw	r18, r30
    2ad2:	2e 5f       	subi	r18, 0xFE	; 254
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	82 17       	cp	r24, r18
    2ad8:	93 07       	cpc	r25, r19
    2ada:	31 f4       	brne	.+12     	; 0x2ae8 <xTaskRemoveFromEventList+0x9e>
    2adc:	80 85       	ldd	r24, Z+8	; 0x08
    2ade:	91 85       	ldd	r25, Z+9	; 0x09
    2ae0:	12 96       	adiw	r26, 0x02	; 2
    2ae2:	9c 93       	st	X, r25
    2ae4:	8e 93       	st	-X, r24
    2ae6:	11 97       	sbiw	r26, 0x01	; 1
    2ae8:	15 86       	std	Z+13, r1	; 0x0d
    2aea:	14 86       	std	Z+12, r1	; 0x0c
    2aec:	8c 91       	ld	r24, X
    2aee:	81 50       	subi	r24, 0x01	; 1
    2af0:	8c 93       	st	X, r24
    2af2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2af4:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <uxTopReadyPriority>
    2af8:	8a 17       	cp	r24, r26
    2afa:	10 f4       	brcc	.+4      	; 0x2b00 <xTaskRemoveFromEventList+0xb6>
    2afc:	a0 93 26 17 	sts	0x1726, r26	; 0x801726 <uxTopReadyPriority>
    2b00:	8b e0       	ldi	r24, 0x0B	; 11
    2b02:	8a 9f       	mul	r24, r26
    2b04:	d0 01       	movw	r26, r0
    2b06:	11 24       	eor	r1, r1
    2b08:	a8 59       	subi	r26, 0x98	; 152
    2b0a:	b8 4e       	sbci	r27, 0xE8	; 232
    2b0c:	11 96       	adiw	r26, 0x01	; 1
    2b0e:	0d 90       	ld	r0, X+
    2b10:	bc 91       	ld	r27, X
    2b12:	a0 2d       	mov	r26, r0
    2b14:	b7 83       	std	Z+7, r27	; 0x07
    2b16:	a6 83       	std	Z+6, r26	; 0x06
    2b18:	16 96       	adiw	r26, 0x06	; 6
    2b1a:	4d 91       	ld	r20, X+
    2b1c:	5c 91       	ld	r21, X
    2b1e:	17 97       	sbiw	r26, 0x07	; 7
    2b20:	51 87       	std	Z+9, r21	; 0x09
    2b22:	40 87       	std	Z+8, r20	; 0x08
    2b24:	16 96       	adiw	r26, 0x06	; 6
    2b26:	cd 91       	ld	r28, X+
    2b28:	dc 91       	ld	r29, X
    2b2a:	17 97       	sbiw	r26, 0x07	; 7
    2b2c:	3d 83       	std	Y+5, r19	; 0x05
    2b2e:	2c 83       	std	Y+4, r18	; 0x04
    2b30:	17 96       	adiw	r26, 0x07	; 7
    2b32:	3c 93       	st	X, r19
    2b34:	2e 93       	st	-X, r18
    2b36:	16 97       	sbiw	r26, 0x06	; 6
    2b38:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b3a:	8a 9f       	mul	r24, r26
    2b3c:	d0 01       	movw	r26, r0
    2b3e:	11 24       	eor	r1, r1
    2b40:	a8 59       	subi	r26, 0x98	; 152
    2b42:	b8 4e       	sbci	r27, 0xE8	; 232
    2b44:	b5 87       	std	Z+13, r27	; 0x0d
    2b46:	a4 87       	std	Z+12, r26	; 0x0c
    2b48:	8c 91       	ld	r24, X
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	8c 93       	st	X, r24
    2b4e:	1c c0       	rjmp	.+56     	; 0x2b88 <xTaskRemoveFromEventList+0x13e>
    2b50:	43 e4       	ldi	r20, 0x43	; 67
    2b52:	57 e1       	ldi	r21, 0x17	; 23
    2b54:	da 01       	movw	r26, r20
    2b56:	11 96       	adiw	r26, 0x01	; 1
    2b58:	cd 91       	ld	r28, X+
    2b5a:	dc 91       	ld	r29, X
    2b5c:	12 97       	sbiw	r26, 0x02	; 2
    2b5e:	d3 8b       	std	Z+19, r29	; 0x13
    2b60:	c2 8b       	std	Z+18, r28	; 0x12
    2b62:	8e 81       	ldd	r24, Y+6	; 0x06
    2b64:	9f 81       	ldd	r25, Y+7	; 0x07
    2b66:	95 8b       	std	Z+21, r25	; 0x15
    2b68:	84 8b       	std	Z+20, r24	; 0x14
    2b6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6e:	dc 01       	movw	r26, r24
    2b70:	15 96       	adiw	r26, 0x05	; 5
    2b72:	3c 93       	st	X, r19
    2b74:	2e 93       	st	-X, r18
    2b76:	14 97       	sbiw	r26, 0x04	; 4
    2b78:	3f 83       	std	Y+7, r19	; 0x07
    2b7a:	2e 83       	std	Y+6, r18	; 0x06
    2b7c:	51 8f       	std	Z+25, r21	; 0x19
    2b7e:	40 8f       	std	Z+24, r20	; 0x18
    2b80:	da 01       	movw	r26, r20
    2b82:	8c 91       	ld	r24, X
    2b84:	8f 5f       	subi	r24, 0xFF	; 255
    2b86:	8c 93       	st	X, r24
    2b88:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b8a:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2b8e:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2b92:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b94:	89 17       	cp	r24, r25
    2b96:	20 f4       	brcc	.+8      	; 0x2ba0 <xTaskRemoveFromEventList+0x156>
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <xYieldPending>
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <xTaskRemoveFromEventList+0x158>
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	08 95       	ret

00002ba8 <vTaskRemoveFromUnorderedEventList>:
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    2bac:	dc 01       	movw	r26, r24
    2bae:	70 68       	ori	r23, 0x80	; 128
    2bb0:	4d 93       	st	X+, r20
    2bb2:	5d 93       	st	X+, r21
    2bb4:	6d 93       	st	X+, r22
    2bb6:	7c 93       	st	X, r23
    2bb8:	13 97       	sbiw	r26, 0x03	; 3
    2bba:	18 96       	adiw	r26, 0x08	; 8
    2bbc:	ed 91       	ld	r30, X+
    2bbe:	fc 91       	ld	r31, X
    2bc0:	19 97       	sbiw	r26, 0x09	; 9
    2bc2:	1a 96       	adiw	r26, 0x0a	; 10
    2bc4:	4d 91       	ld	r20, X+
    2bc6:	5c 91       	ld	r21, X
    2bc8:	1b 97       	sbiw	r26, 0x0b	; 11
    2bca:	14 96       	adiw	r26, 0x04	; 4
    2bcc:	8d 91       	ld	r24, X+
    2bce:	9c 91       	ld	r25, X
    2bd0:	15 97       	sbiw	r26, 0x05	; 5
    2bd2:	16 96       	adiw	r26, 0x06	; 6
    2bd4:	2d 91       	ld	r18, X+
    2bd6:	3c 91       	ld	r19, X
    2bd8:	17 97       	sbiw	r26, 0x07	; 7
    2bda:	ec 01       	movw	r28, r24
    2bdc:	3f 83       	std	Y+7, r19	; 0x07
    2bde:	2e 83       	std	Y+6, r18	; 0x06
    2be0:	16 96       	adiw	r26, 0x06	; 6
    2be2:	8d 91       	ld	r24, X+
    2be4:	9c 91       	ld	r25, X
    2be6:	17 97       	sbiw	r26, 0x07	; 7
    2be8:	14 96       	adiw	r26, 0x04	; 4
    2bea:	2d 91       	ld	r18, X+
    2bec:	3c 91       	ld	r19, X
    2bee:	15 97       	sbiw	r26, 0x05	; 5
    2bf0:	ec 01       	movw	r28, r24
    2bf2:	3d 83       	std	Y+5, r19	; 0x05
    2bf4:	2c 83       	std	Y+4, r18	; 0x04
    2bf6:	ea 01       	movw	r28, r20
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfc:	a8 17       	cp	r26, r24
    2bfe:	b9 07       	cpc	r27, r25
    2c00:	31 f4       	brne	.+12     	; 0x2c0e <vTaskRemoveFromUnorderedEventList+0x66>
    2c02:	16 96       	adiw	r26, 0x06	; 6
    2c04:	8d 91       	ld	r24, X+
    2c06:	9c 91       	ld	r25, X
    2c08:	17 97       	sbiw	r26, 0x07	; 7
    2c0a:	9a 83       	std	Y+2, r25	; 0x02
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    2c0e:	1b 96       	adiw	r26, 0x0b	; 11
    2c10:	1c 92       	st	X, r1
    2c12:	1e 92       	st	-X, r1
    2c14:	1a 97       	sbiw	r26, 0x0a	; 10
    2c16:	da 01       	movw	r26, r20
    2c18:	8c 91       	ld	r24, X
    2c1a:	81 50       	subi	r24, 0x01	; 1
    2c1c:	8c 93       	st	X, r24
    2c1e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c20:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c22:	c6 81       	ldd	r28, Z+6	; 0x06
    2c24:	d7 81       	ldd	r29, Z+7	; 0x07
    2c26:	80 85       	ldd	r24, Z+8	; 0x08
    2c28:	91 85       	ldd	r25, Z+9	; 0x09
    2c2a:	9f 83       	std	Y+7, r25	; 0x07
    2c2c:	8e 83       	std	Y+6, r24	; 0x06
    2c2e:	c0 85       	ldd	r28, Z+8	; 0x08
    2c30:	d1 85       	ldd	r29, Z+9	; 0x09
    2c32:	86 81       	ldd	r24, Z+6	; 0x06
    2c34:	97 81       	ldd	r25, Z+7	; 0x07
    2c36:	9d 83       	std	Y+5, r25	; 0x05
    2c38:	8c 83       	std	Y+4, r24	; 0x04
    2c3a:	11 96       	adiw	r26, 0x01	; 1
    2c3c:	8d 91       	ld	r24, X+
    2c3e:	9c 91       	ld	r25, X
    2c40:	12 97       	sbiw	r26, 0x02	; 2
    2c42:	9f 01       	movw	r18, r30
    2c44:	2e 5f       	subi	r18, 0xFE	; 254
    2c46:	3f 4f       	sbci	r19, 0xFF	; 255
    2c48:	82 17       	cp	r24, r18
    2c4a:	93 07       	cpc	r25, r19
    2c4c:	31 f4       	brne	.+12     	; 0x2c5a <vTaskRemoveFromUnorderedEventList+0xb2>
    2c4e:	80 85       	ldd	r24, Z+8	; 0x08
    2c50:	91 85       	ldd	r25, Z+9	; 0x09
    2c52:	12 96       	adiw	r26, 0x02	; 2
    2c54:	9c 93       	st	X, r25
    2c56:	8e 93       	st	-X, r24
    2c58:	11 97       	sbiw	r26, 0x01	; 1
    2c5a:	15 86       	std	Z+13, r1	; 0x0d
    2c5c:	14 86       	std	Z+12, r1	; 0x0c
    2c5e:	8c 91       	ld	r24, X
    2c60:	81 50       	subi	r24, 0x01	; 1
    2c62:	8c 93       	st	X, r24
    2c64:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c66:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <uxTopReadyPriority>
    2c6a:	8a 17       	cp	r24, r26
    2c6c:	10 f4       	brcc	.+4      	; 0x2c72 <vTaskRemoveFromUnorderedEventList+0xca>
    2c6e:	a0 93 26 17 	sts	0x1726, r26	; 0x801726 <uxTopReadyPriority>
    2c72:	8b e0       	ldi	r24, 0x0B	; 11
    2c74:	8a 9f       	mul	r24, r26
    2c76:	d0 01       	movw	r26, r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	a8 59       	subi	r26, 0x98	; 152
    2c7c:	b8 4e       	sbci	r27, 0xE8	; 232
    2c7e:	11 96       	adiw	r26, 0x01	; 1
    2c80:	0d 90       	ld	r0, X+
    2c82:	bc 91       	ld	r27, X
    2c84:	a0 2d       	mov	r26, r0
    2c86:	b7 83       	std	Z+7, r27	; 0x07
    2c88:	a6 83       	std	Z+6, r26	; 0x06
    2c8a:	16 96       	adiw	r26, 0x06	; 6
    2c8c:	4d 91       	ld	r20, X+
    2c8e:	5c 91       	ld	r21, X
    2c90:	17 97       	sbiw	r26, 0x07	; 7
    2c92:	51 87       	std	Z+9, r21	; 0x09
    2c94:	40 87       	std	Z+8, r20	; 0x08
    2c96:	16 96       	adiw	r26, 0x06	; 6
    2c98:	cd 91       	ld	r28, X+
    2c9a:	dc 91       	ld	r29, X
    2c9c:	17 97       	sbiw	r26, 0x07	; 7
    2c9e:	3d 83       	std	Y+5, r19	; 0x05
    2ca0:	2c 83       	std	Y+4, r18	; 0x04
    2ca2:	17 96       	adiw	r26, 0x07	; 7
    2ca4:	3c 93       	st	X, r19
    2ca6:	2e 93       	st	-X, r18
    2ca8:	16 97       	sbiw	r26, 0x06	; 6
    2caa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2cac:	8a 9f       	mul	r24, r26
    2cae:	d0 01       	movw	r26, r0
    2cb0:	11 24       	eor	r1, r1
    2cb2:	a8 59       	subi	r26, 0x98	; 152
    2cb4:	b8 4e       	sbci	r27, 0xE8	; 232
    2cb6:	b5 87       	std	Z+13, r27	; 0x0d
    2cb8:	a4 87       	std	Z+12, r26	; 0x0c
    2cba:	8c 91       	ld	r24, X
    2cbc:	8f 5f       	subi	r24, 0xFF	; 255
    2cbe:	8c 93       	st	X, r24
    2cc0:	92 8d       	ldd	r25, Z+26	; 0x1a
    2cc2:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2cc6:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2cca:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ccc:	89 17       	cp	r24, r25
    2cce:	18 f4       	brcc	.+6      	; 0x2cd6 <vTaskRemoveFromUnorderedEventList+0x12e>
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <xYieldPending>
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	08 95       	ret

00002cdc <vTaskSetTimeOutState>:
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	0f 92       	push	r0
    2ce2:	20 91 1f 17 	lds	r18, 0x171F	; 0x80171f <xNumOfOverflows>
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	20 83       	st	Z, r18
    2cea:	40 91 27 17 	lds	r20, 0x1727	; 0x801727 <xTickCount>
    2cee:	50 91 28 17 	lds	r21, 0x1728	; 0x801728 <xTickCount+0x1>
    2cf2:	60 91 29 17 	lds	r22, 0x1729	; 0x801729 <xTickCount+0x2>
    2cf6:	70 91 2a 17 	lds	r23, 0x172A	; 0x80172a <xTickCount+0x3>
    2cfa:	41 83       	std	Z+1, r20	; 0x01
    2cfc:	52 83       	std	Z+2, r21	; 0x02
    2cfe:	63 83       	std	Z+3, r22	; 0x03
    2d00:	74 83       	std	Z+4, r23	; 0x04
    2d02:	0f 90       	pop	r0
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	08 95       	ret

00002d08 <vTaskInternalSetTimeOutState>:
    2d08:	20 91 1f 17 	lds	r18, 0x171F	; 0x80171f <xNumOfOverflows>
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	20 83       	st	Z, r18
    2d10:	40 91 27 17 	lds	r20, 0x1727	; 0x801727 <xTickCount>
    2d14:	50 91 28 17 	lds	r21, 0x1728	; 0x801728 <xTickCount+0x1>
    2d18:	60 91 29 17 	lds	r22, 0x1729	; 0x801729 <xTickCount+0x2>
    2d1c:	70 91 2a 17 	lds	r23, 0x172A	; 0x80172a <xTickCount+0x3>
    2d20:	41 83       	std	Z+1, r20	; 0x01
    2d22:	52 83       	std	Z+2, r21	; 0x02
    2d24:	63 83       	std	Z+3, r22	; 0x03
    2d26:	74 83       	std	Z+4, r23	; 0x04
    2d28:	08 95       	ret

00002d2a <xTaskCheckForTimeOut>:
    2d2a:	8f 92       	push	r8
    2d2c:	9f 92       	push	r9
    2d2e:	af 92       	push	r10
    2d30:	bf 92       	push	r11
    2d32:	cf 92       	push	r12
    2d34:	df 92       	push	r13
    2d36:	ef 92       	push	r14
    2d38:	ff 92       	push	r15
    2d3a:	0f 93       	push	r16
    2d3c:	1f 93       	push	r17
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	fb 01       	movw	r30, r22
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	0f 92       	push	r0
    2d4a:	c0 90 27 17 	lds	r12, 0x1727	; 0x801727 <xTickCount>
    2d4e:	d0 90 28 17 	lds	r13, 0x1728	; 0x801728 <xTickCount+0x1>
    2d52:	e0 90 29 17 	lds	r14, 0x1729	; 0x801729 <xTickCount+0x2>
    2d56:	f0 90 2a 17 	lds	r15, 0x172A	; 0x80172a <xTickCount+0x3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	11 96       	adiw	r26, 0x01	; 1
    2d5e:	0d 91       	ld	r16, X+
    2d60:	1d 91       	ld	r17, X+
    2d62:	2d 91       	ld	r18, X+
    2d64:	3c 91       	ld	r19, X
    2d66:	14 97       	sbiw	r26, 0x04	; 4
    2d68:	46 01       	movw	r8, r12
    2d6a:	57 01       	movw	r10, r14
    2d6c:	80 1a       	sub	r8, r16
    2d6e:	91 0a       	sbc	r9, r17
    2d70:	a2 0a       	sbc	r10, r18
    2d72:	b3 0a       	sbc	r11, r19
    2d74:	40 81       	ld	r20, Z
    2d76:	51 81       	ldd	r21, Z+1	; 0x01
    2d78:	62 81       	ldd	r22, Z+2	; 0x02
    2d7a:	73 81       	ldd	r23, Z+3	; 0x03
    2d7c:	4f 3f       	cpi	r20, 0xFF	; 255
    2d7e:	bf ef       	ldi	r27, 0xFF	; 255
    2d80:	5b 07       	cpc	r21, r27
    2d82:	6b 07       	cpc	r22, r27
    2d84:	7b 07       	cpc	r23, r27
    2d86:	39 f1       	breq	.+78     	; 0x2dd6 <xTaskCheckForTimeOut+0xac>
    2d88:	ec 01       	movw	r28, r24
    2d8a:	b8 81       	ld	r27, Y
    2d8c:	a0 91 1f 17 	lds	r26, 0x171F	; 0x80171f <xNumOfOverflows>
    2d90:	ba 17       	cp	r27, r26
    2d92:	59 f0       	breq	.+22     	; 0x2daa <xTaskCheckForTimeOut+0x80>
    2d94:	c0 16       	cp	r12, r16
    2d96:	d1 06       	cpc	r13, r17
    2d98:	e2 06       	cpc	r14, r18
    2d9a:	f3 06       	cpc	r15, r19
    2d9c:	30 f0       	brcs	.+12     	; 0x2daa <xTaskCheckForTimeOut+0x80>
    2d9e:	10 82       	st	Z, r1
    2da0:	11 82       	std	Z+1, r1	; 0x01
    2da2:	12 82       	std	Z+2, r1	; 0x02
    2da4:	13 82       	std	Z+3, r1	; 0x03
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	17 c0       	rjmp	.+46     	; 0x2dd8 <xTaskCheckForTimeOut+0xae>
    2daa:	84 16       	cp	r8, r20
    2dac:	95 06       	cpc	r9, r21
    2dae:	a6 06       	cpc	r10, r22
    2db0:	b7 06       	cpc	r11, r23
    2db2:	58 f4       	brcc	.+22     	; 0x2dca <xTaskCheckForTimeOut+0xa0>
    2db4:	48 19       	sub	r20, r8
    2db6:	59 09       	sbc	r21, r9
    2db8:	6a 09       	sbc	r22, r10
    2dba:	7b 09       	sbc	r23, r11
    2dbc:	40 83       	st	Z, r20
    2dbe:	51 83       	std	Z+1, r21	; 0x01
    2dc0:	62 83       	std	Z+2, r22	; 0x02
    2dc2:	73 83       	std	Z+3, r23	; 0x03
    2dc4:	a1 df       	rcall	.-190    	; 0x2d08 <vTaskInternalSetTimeOutState>
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	07 c0       	rjmp	.+14     	; 0x2dd8 <xTaskCheckForTimeOut+0xae>
    2dca:	10 82       	st	Z, r1
    2dcc:	11 82       	std	Z+1, r1	; 0x01
    2dce:	12 82       	std	Z+2, r1	; 0x02
    2dd0:	13 82       	std	Z+3, r1	; 0x03
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	01 c0       	rjmp	.+2      	; 0x2dd8 <xTaskCheckForTimeOut+0xae>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	0f 90       	pop	r0
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16
    2de4:	ff 90       	pop	r15
    2de6:	ef 90       	pop	r14
    2de8:	df 90       	pop	r13
    2dea:	cf 90       	pop	r12
    2dec:	bf 90       	pop	r11
    2dee:	af 90       	pop	r10
    2df0:	9f 90       	pop	r9
    2df2:	8f 90       	pop	r8
    2df4:	08 95       	ret

00002df6 <vTaskMissedYield>:
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <xYieldPending>
    2dfc:	08 95       	ret

00002dfe <xTaskGetCurrentTaskHandle>:
    2dfe:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2e02:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2e06:	08 95       	ret

00002e08 <xTaskGetSchedulerState>:
    2e08:	80 91 25 17 	lds	r24, 0x1725	; 0x801725 <xSchedulerRunning>
    2e0c:	88 23       	and	r24, r24
    2e0e:	31 f0       	breq	.+12     	; 0x2e1c <xTaskGetSchedulerState+0x14>
    2e10:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <uxSchedulerSuspended>
    2e14:	81 11       	cpse	r24, r1
    2e16:	04 c0       	rjmp	.+8      	; 0x2e20 <xTaskGetSchedulerState+0x18>
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	08 95       	ret
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	08 95       	ret
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	08 95       	ret

00002e24 <xTaskPriorityInherit>:
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	89 2b       	or	r24, r25
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <xTaskPriorityInherit+0x10>
    2e32:	77 c0       	rjmp	.+238    	; 0x2f22 <xTaskPriorityInherit+0xfe>
    2e34:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e36:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2e3a:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2e3e:	5a 96       	adiw	r26, 0x1a	; 26
    2e40:	9c 91       	ld	r25, X
    2e42:	89 17       	cp	r24, r25
    2e44:	08 f0       	brcs	.+2      	; 0x2e48 <xTaskPriorityInherit+0x24>
    2e46:	63 c0       	rjmp	.+198    	; 0x2f0e <xTaskPriorityInherit+0xea>
    2e48:	46 85       	ldd	r20, Z+14	; 0x0e
    2e4a:	57 85       	ldd	r21, Z+15	; 0x0f
    2e4c:	60 89       	ldd	r22, Z+16	; 0x10
    2e4e:	71 89       	ldd	r23, Z+17	; 0x11
    2e50:	77 23       	and	r23, r23
    2e52:	94 f0       	brlt	.+36     	; 0x2e78 <xTaskPriorityInherit+0x54>
    2e54:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2e58:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2e5c:	5a 96       	adiw	r26, 0x1a	; 26
    2e5e:	9c 91       	ld	r25, X
    2e60:	4a e0       	ldi	r20, 0x0A	; 10
    2e62:	50 e0       	ldi	r21, 0x00	; 0
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	49 1b       	sub	r20, r25
    2e6a:	51 09       	sbc	r21, r1
    2e6c:	61 09       	sbc	r22, r1
    2e6e:	71 09       	sbc	r23, r1
    2e70:	46 87       	std	Z+14, r20	; 0x0e
    2e72:	57 87       	std	Z+15, r21	; 0x0f
    2e74:	60 8b       	std	Z+16, r22	; 0x10
    2e76:	71 8b       	std	Z+17, r23	; 0x11
    2e78:	24 85       	ldd	r18, Z+12	; 0x0c
    2e7a:	35 85       	ldd	r19, Z+13	; 0x0d
    2e7c:	4b e0       	ldi	r20, 0x0B	; 11
    2e7e:	84 9f       	mul	r24, r20
    2e80:	c0 01       	movw	r24, r0
    2e82:	11 24       	eor	r1, r1
    2e84:	88 59       	subi	r24, 0x98	; 152
    2e86:	98 4e       	sbci	r25, 0xE8	; 232
    2e88:	28 17       	cp	r18, r24
    2e8a:	39 07       	cpc	r19, r25
    2e8c:	b9 f5       	brne	.+110    	; 0x2efc <xTaskPriorityInherit+0xd8>
    2e8e:	ef 01       	movw	r28, r30
    2e90:	8f 01       	movw	r16, r30
    2e92:	0e 5f       	subi	r16, 0xFE	; 254
    2e94:	1f 4f       	sbci	r17, 0xFF	; 255
    2e96:	c8 01       	movw	r24, r16
    2e98:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uxListRemove>
    2e9c:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2ea0:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2ea4:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2ea6:	ea 8f       	std	Y+26, r30	; 0x1a
    2ea8:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <uxTopReadyPriority>
    2eac:	8e 17       	cp	r24, r30
    2eae:	10 f4       	brcc	.+4      	; 0x2eb4 <xTaskPriorityInherit+0x90>
    2eb0:	e0 93 26 17 	sts	0x1726, r30	; 0x801726 <uxTopReadyPriority>
    2eb4:	8b e0       	ldi	r24, 0x0B	; 11
    2eb6:	8e 9f       	mul	r24, r30
    2eb8:	f0 01       	movw	r30, r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	e8 59       	subi	r30, 0x98	; 152
    2ebe:	f8 4e       	sbci	r31, 0xE8	; 232
    2ec0:	01 80       	ldd	r0, Z+1	; 0x01
    2ec2:	f2 81       	ldd	r31, Z+2	; 0x02
    2ec4:	e0 2d       	mov	r30, r0
    2ec6:	ff 83       	std	Y+7, r31	; 0x07
    2ec8:	ee 83       	std	Y+6, r30	; 0x06
    2eca:	26 81       	ldd	r18, Z+6	; 0x06
    2ecc:	37 81       	ldd	r19, Z+7	; 0x07
    2ece:	39 87       	std	Y+9, r19	; 0x09
    2ed0:	28 87       	std	Y+8, r18	; 0x08
    2ed2:	a6 81       	ldd	r26, Z+6	; 0x06
    2ed4:	b7 81       	ldd	r27, Z+7	; 0x07
    2ed6:	15 96       	adiw	r26, 0x05	; 5
    2ed8:	1c 93       	st	X, r17
    2eda:	0e 93       	st	-X, r16
    2edc:	14 97       	sbiw	r26, 0x04	; 4
    2ede:	17 83       	std	Z+7, r17	; 0x07
    2ee0:	06 83       	std	Z+6, r16	; 0x06
    2ee2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ee4:	8e 9f       	mul	r24, r30
    2ee6:	f0 01       	movw	r30, r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	e8 59       	subi	r30, 0x98	; 152
    2eec:	f8 4e       	sbci	r31, 0xE8	; 232
    2eee:	fd 87       	std	Y+13, r31	; 0x0d
    2ef0:	ec 87       	std	Y+12, r30	; 0x0c
    2ef2:	80 81       	ld	r24, Z
    2ef4:	8f 5f       	subi	r24, 0xFF	; 255
    2ef6:	80 83       	st	Z, r24
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	16 c0       	rjmp	.+44     	; 0x2f28 <xTaskPriorityInherit+0x104>
    2efc:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2f00:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2f04:	5a 96       	adiw	r26, 0x1a	; 26
    2f06:	8c 91       	ld	r24, X
    2f08:	82 8f       	std	Z+26, r24	; 0x1a
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	0d c0       	rjmp	.+26     	; 0x2f28 <xTaskPriorityInherit+0x104>
    2f0e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2f10:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    2f14:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    2f18:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f1a:	98 17       	cp	r25, r24
    2f1c:	20 f0       	brcs	.+8      	; 0x2f26 <xTaskPriorityInherit+0x102>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <xTaskPriorityInherit+0x104>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	01 c0       	rjmp	.+2      	; 0x2f28 <xTaskPriorityInherit+0x104>
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	08 95       	ret

00002f32 <xTaskPriorityDisinherit>:
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	89 2b       	or	r24, r25
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <xTaskPriorityDisinherit+0x10>
    2f40:	49 c0       	rjmp	.+146    	; 0x2fd4 <xTaskPriorityDisinherit+0xa2>
    2f42:	86 a5       	ldd	r24, Z+46	; 0x2e
    2f44:	81 50       	subi	r24, 0x01	; 1
    2f46:	86 a7       	std	Z+46, r24	; 0x2e
    2f48:	22 8d       	ldd	r18, Z+26	; 0x1a
    2f4a:	95 a5       	ldd	r25, Z+45	; 0x2d
    2f4c:	29 17       	cp	r18, r25
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <xTaskPriorityDisinherit+0x20>
    2f50:	43 c0       	rjmp	.+134    	; 0x2fd8 <xTaskPriorityDisinherit+0xa6>
    2f52:	81 11       	cpse	r24, r1
    2f54:	43 c0       	rjmp	.+134    	; 0x2fdc <xTaskPriorityDisinherit+0xaa>
    2f56:	ef 01       	movw	r28, r30
    2f58:	8f 01       	movw	r16, r30
    2f5a:	0e 5f       	subi	r16, 0xFE	; 254
    2f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5e:	c8 01       	movw	r24, r16
    2f60:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uxListRemove>
    2f64:	ed a5       	ldd	r30, Y+45	; 0x2d
    2f66:	ea 8f       	std	Y+26, r30	; 0x1a
    2f68:	8a e0       	ldi	r24, 0x0A	; 10
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	a0 e0       	ldi	r26, 0x00	; 0
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	8e 1b       	sub	r24, r30
    2f72:	91 09       	sbc	r25, r1
    2f74:	a1 09       	sbc	r26, r1
    2f76:	b1 09       	sbc	r27, r1
    2f78:	8e 87       	std	Y+14, r24	; 0x0e
    2f7a:	9f 87       	std	Y+15, r25	; 0x0f
    2f7c:	a8 8b       	std	Y+16, r26	; 0x10
    2f7e:	b9 8b       	std	Y+17, r27	; 0x11
    2f80:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <uxTopReadyPriority>
    2f84:	8e 17       	cp	r24, r30
    2f86:	10 f4       	brcc	.+4      	; 0x2f8c <xTaskPriorityDisinherit+0x5a>
    2f88:	e0 93 26 17 	sts	0x1726, r30	; 0x801726 <uxTopReadyPriority>
    2f8c:	8b e0       	ldi	r24, 0x0B	; 11
    2f8e:	8e 9f       	mul	r24, r30
    2f90:	f0 01       	movw	r30, r0
    2f92:	11 24       	eor	r1, r1
    2f94:	e8 59       	subi	r30, 0x98	; 152
    2f96:	f8 4e       	sbci	r31, 0xE8	; 232
    2f98:	01 80       	ldd	r0, Z+1	; 0x01
    2f9a:	f2 81       	ldd	r31, Z+2	; 0x02
    2f9c:	e0 2d       	mov	r30, r0
    2f9e:	ff 83       	std	Y+7, r31	; 0x07
    2fa0:	ee 83       	std	Y+6, r30	; 0x06
    2fa2:	26 81       	ldd	r18, Z+6	; 0x06
    2fa4:	37 81       	ldd	r19, Z+7	; 0x07
    2fa6:	39 87       	std	Y+9, r19	; 0x09
    2fa8:	28 87       	std	Y+8, r18	; 0x08
    2faa:	a6 81       	ldd	r26, Z+6	; 0x06
    2fac:	b7 81       	ldd	r27, Z+7	; 0x07
    2fae:	15 96       	adiw	r26, 0x05	; 5
    2fb0:	1c 93       	st	X, r17
    2fb2:	0e 93       	st	-X, r16
    2fb4:	14 97       	sbiw	r26, 0x04	; 4
    2fb6:	17 83       	std	Z+7, r17	; 0x07
    2fb8:	06 83       	std	Z+6, r16	; 0x06
    2fba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2fbc:	8e 9f       	mul	r24, r30
    2fbe:	f0 01       	movw	r30, r0
    2fc0:	11 24       	eor	r1, r1
    2fc2:	e8 59       	subi	r30, 0x98	; 152
    2fc4:	f8 4e       	sbci	r31, 0xE8	; 232
    2fc6:	fd 87       	std	Y+13, r31	; 0x0d
    2fc8:	ec 87       	std	Y+12, r30	; 0x0c
    2fca:	80 81       	ld	r24, Z
    2fcc:	8f 5f       	subi	r24, 0xFF	; 255
    2fce:	80 83       	st	Z, r24
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	05 c0       	rjmp	.+10     	; 0x2fde <xTaskPriorityDisinherit+0xac>
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	03 c0       	rjmp	.+6      	; 0x2fde <xTaskPriorityDisinherit+0xac>
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <xTaskPriorityDisinherit+0xac>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	08 95       	ret

00002fe8 <vTaskPriorityDisinheritAfterTimeout>:
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	89 2b       	or	r24, r25
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2ff6:	5a c0       	rjmp	.+180    	; 0x30ac <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ff8:	85 a5       	ldd	r24, Z+45	; 0x2d
    2ffa:	86 17       	cp	r24, r22
    2ffc:	08 f4       	brcc	.+2      	; 0x3000 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2ffe:	86 2f       	mov	r24, r22
    3000:	92 8d       	ldd	r25, Z+26	; 0x1a
    3002:	89 17       	cp	r24, r25
    3004:	09 f4       	brne	.+2      	; 0x3008 <vTaskPriorityDisinheritAfterTimeout+0x20>
    3006:	52 c0       	rjmp	.+164    	; 0x30ac <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3008:	26 a5       	ldd	r18, Z+46	; 0x2e
    300a:	21 30       	cpi	r18, 0x01	; 1
    300c:	09 f0       	breq	.+2      	; 0x3010 <vTaskPriorityDisinheritAfterTimeout+0x28>
    300e:	4e c0       	rjmp	.+156    	; 0x30ac <vTaskPriorityDisinheritAfterTimeout+0xc4>
    3010:	82 8f       	std	Z+26, r24	; 0x1a
    3012:	46 85       	ldd	r20, Z+14	; 0x0e
    3014:	57 85       	ldd	r21, Z+15	; 0x0f
    3016:	60 89       	ldd	r22, Z+16	; 0x10
    3018:	71 89       	ldd	r23, Z+17	; 0x11
    301a:	77 23       	and	r23, r23
    301c:	64 f0       	brlt	.+24     	; 0x3036 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    301e:	4a e0       	ldi	r20, 0x0A	; 10
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	70 e0       	ldi	r23, 0x00	; 0
    3026:	48 1b       	sub	r20, r24
    3028:	51 09       	sbc	r21, r1
    302a:	61 09       	sbc	r22, r1
    302c:	71 09       	sbc	r23, r1
    302e:	46 87       	std	Z+14, r20	; 0x0e
    3030:	57 87       	std	Z+15, r21	; 0x0f
    3032:	60 8b       	std	Z+16, r22	; 0x10
    3034:	71 8b       	std	Z+17, r23	; 0x11
    3036:	24 85       	ldd	r18, Z+12	; 0x0c
    3038:	35 85       	ldd	r19, Z+13	; 0x0d
    303a:	4b e0       	ldi	r20, 0x0B	; 11
    303c:	94 9f       	mul	r25, r20
    303e:	c0 01       	movw	r24, r0
    3040:	11 24       	eor	r1, r1
    3042:	88 59       	subi	r24, 0x98	; 152
    3044:	98 4e       	sbci	r25, 0xE8	; 232
    3046:	28 17       	cp	r18, r24
    3048:	39 07       	cpc	r19, r25
    304a:	81 f5       	brne	.+96     	; 0x30ac <vTaskPriorityDisinheritAfterTimeout+0xc4>
    304c:	ef 01       	movw	r28, r30
    304e:	8f 01       	movw	r16, r30
    3050:	0e 5f       	subi	r16, 0xFE	; 254
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	c8 01       	movw	r24, r16
    3056:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uxListRemove>
    305a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    305c:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <uxTopReadyPriority>
    3060:	8e 17       	cp	r24, r30
    3062:	10 f4       	brcc	.+4      	; 0x3068 <vTaskPriorityDisinheritAfterTimeout+0x80>
    3064:	e0 93 26 17 	sts	0x1726, r30	; 0x801726 <uxTopReadyPriority>
    3068:	8b e0       	ldi	r24, 0x0B	; 11
    306a:	8e 9f       	mul	r24, r30
    306c:	f0 01       	movw	r30, r0
    306e:	11 24       	eor	r1, r1
    3070:	e8 59       	subi	r30, 0x98	; 152
    3072:	f8 4e       	sbci	r31, 0xE8	; 232
    3074:	01 80       	ldd	r0, Z+1	; 0x01
    3076:	f2 81       	ldd	r31, Z+2	; 0x02
    3078:	e0 2d       	mov	r30, r0
    307a:	ff 83       	std	Y+7, r31	; 0x07
    307c:	ee 83       	std	Y+6, r30	; 0x06
    307e:	26 81       	ldd	r18, Z+6	; 0x06
    3080:	37 81       	ldd	r19, Z+7	; 0x07
    3082:	39 87       	std	Y+9, r19	; 0x09
    3084:	28 87       	std	Y+8, r18	; 0x08
    3086:	a6 81       	ldd	r26, Z+6	; 0x06
    3088:	b7 81       	ldd	r27, Z+7	; 0x07
    308a:	15 96       	adiw	r26, 0x05	; 5
    308c:	1c 93       	st	X, r17
    308e:	0e 93       	st	-X, r16
    3090:	14 97       	sbiw	r26, 0x04	; 4
    3092:	17 83       	std	Z+7, r17	; 0x07
    3094:	06 83       	std	Z+6, r16	; 0x06
    3096:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3098:	8e 9f       	mul	r24, r30
    309a:	f0 01       	movw	r30, r0
    309c:	11 24       	eor	r1, r1
    309e:	e8 59       	subi	r30, 0x98	; 152
    30a0:	f8 4e       	sbci	r31, 0xE8	; 232
    30a2:	fd 87       	std	Y+13, r31	; 0x0d
    30a4:	ec 87       	std	Y+12, r30	; 0x0c
    30a6:	80 81       	ld	r24, Z
    30a8:	8f 5f       	subi	r24, 0xFF	; 255
    30aa:	80 83       	st	Z, r24
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	08 95       	ret

000030b6 <uxTaskResetEventItemValue>:
    30b6:	cf 92       	push	r12
    30b8:	df 92       	push	r13
    30ba:	ef 92       	push	r14
    30bc:	ff 92       	push	r15
    30be:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    30c2:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    30c6:	66 85       	ldd	r22, Z+14	; 0x0e
    30c8:	77 85       	ldd	r23, Z+15	; 0x0f
    30ca:	80 89       	ldd	r24, Z+16	; 0x10
    30cc:	91 89       	ldd	r25, Z+17	; 0x11
    30ce:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    30d2:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    30d6:	a0 91 d6 17 	lds	r26, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    30da:	b0 91 d7 17 	lds	r27, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    30de:	5a 96       	adiw	r26, 0x1a	; 26
    30e0:	2c 91       	ld	r18, X
    30e2:	0f 2e       	mov	r0, r31
    30e4:	fa e0       	ldi	r31, 0x0A	; 10
    30e6:	cf 2e       	mov	r12, r31
    30e8:	d1 2c       	mov	r13, r1
    30ea:	e1 2c       	mov	r14, r1
    30ec:	f1 2c       	mov	r15, r1
    30ee:	f0 2d       	mov	r31, r0
    30f0:	c2 1a       	sub	r12, r18
    30f2:	d1 08       	sbc	r13, r1
    30f4:	e1 08       	sbc	r14, r1
    30f6:	f1 08       	sbc	r15, r1
    30f8:	c6 86       	std	Z+14, r12	; 0x0e
    30fa:	d7 86       	std	Z+15, r13	; 0x0f
    30fc:	e0 8a       	std	Z+16, r14	; 0x10
    30fe:	f1 8a       	std	Z+17, r15	; 0x11
    3100:	ff 90       	pop	r15
    3102:	ef 90       	pop	r14
    3104:	df 90       	pop	r13
    3106:	cf 90       	pop	r12
    3108:	08 95       	ret

0000310a <pvTaskIncrementMutexHeldCount>:
    310a:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    310e:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    3112:	89 2b       	or	r24, r25
    3114:	39 f0       	breq	.+14     	; 0x3124 <pvTaskIncrementMutexHeldCount+0x1a>
    3116:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    311a:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    311e:	86 a5       	ldd	r24, Z+46	; 0x2e
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	86 a7       	std	Z+46, r24	; 0x2e
    3124:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    3128:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    312c:	08 95       	ret

0000312e <xTaskGenericNotifyWait>:
    312e:	4f 92       	push	r4
    3130:	5f 92       	push	r5
    3132:	6f 92       	push	r6
    3134:	7f 92       	push	r7
    3136:	af 92       	push	r10
    3138:	bf 92       	push	r11
    313a:	cf 92       	push	r12
    313c:	df 92       	push	r13
    313e:	ef 92       	push	r14
    3140:	ff 92       	push	r15
    3142:	0f 93       	push	r16
    3144:	1f 93       	push	r17
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
    314a:	28 01       	movw	r4, r16
    314c:	39 01       	movw	r6, r18
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	0f 92       	push	r0
    3154:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    3158:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    315c:	c8 2f       	mov	r28, r24
    315e:	d0 e0       	ldi	r29, 0x00	; 0
    3160:	ec 0f       	add	r30, r28
    3162:	fd 1f       	adc	r31, r29
    3164:	83 a9       	ldd	r24, Z+51	; 0x33
    3166:	82 30       	cpi	r24, 0x02	; 2
    3168:	79 f1       	breq	.+94     	; 0x31c8 <xTaskGenericNotifyWait+0x9a>
    316a:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    316e:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    3172:	ce 01       	movw	r24, r28
    3174:	88 0f       	add	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	e8 0f       	add	r30, r24
    317e:	f9 1f       	adc	r31, r25
    3180:	87 a5       	ldd	r24, Z+47	; 0x2f
    3182:	90 a9       	ldd	r25, Z+48	; 0x30
    3184:	a1 a9       	ldd	r26, Z+49	; 0x31
    3186:	b2 a9       	ldd	r27, Z+50	; 0x32
    3188:	40 95       	com	r20
    318a:	50 95       	com	r21
    318c:	60 95       	com	r22
    318e:	70 95       	com	r23
    3190:	48 23       	and	r20, r24
    3192:	59 23       	and	r21, r25
    3194:	6a 23       	and	r22, r26
    3196:	7b 23       	and	r23, r27
    3198:	47 a7       	std	Z+47, r20	; 0x2f
    319a:	50 ab       	std	Z+48, r21	; 0x30
    319c:	61 ab       	std	Z+49, r22	; 0x31
    319e:	72 ab       	std	Z+50, r23	; 0x32
    31a0:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    31a4:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    31a8:	ec 0f       	add	r30, r28
    31aa:	fd 1f       	adc	r31, r29
    31ac:	81 e0       	ldi	r24, 0x01	; 1
    31ae:	83 ab       	std	Z+51, r24	; 0x33
    31b0:	a1 14       	cp	r10, r1
    31b2:	b1 04       	cpc	r11, r1
    31b4:	c1 04       	cpc	r12, r1
    31b6:	d1 04       	cpc	r13, r1
    31b8:	39 f0       	breq	.+14     	; 0x31c8 <xTaskGenericNotifyWait+0x9a>
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	c6 01       	movw	r24, r12
    31be:	b5 01       	movw	r22, r10
    31c0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <prvAddCurrentTaskToDelayedList>
    31c4:	0e 94 55 07 	call	0xeaa	; 0xeaa <vPortYield>
    31c8:	0f 90       	pop	r0
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	0f 92       	push	r0
    31d2:	e1 14       	cp	r14, r1
    31d4:	f1 04       	cpc	r15, r1
    31d6:	a1 f0       	breq	.+40     	; 0x3200 <xTaskGenericNotifyWait+0xd2>
    31d8:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    31dc:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    31e0:	ce 01       	movw	r24, r28
    31e2:	88 0f       	add	r24, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	88 0f       	add	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	e8 0f       	add	r30, r24
    31ec:	f9 1f       	adc	r31, r25
    31ee:	87 a5       	ldd	r24, Z+47	; 0x2f
    31f0:	90 a9       	ldd	r25, Z+48	; 0x30
    31f2:	a1 a9       	ldd	r26, Z+49	; 0x31
    31f4:	b2 a9       	ldd	r27, Z+50	; 0x32
    31f6:	f7 01       	movw	r30, r14
    31f8:	80 83       	st	Z, r24
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	a2 83       	std	Z+2, r26	; 0x02
    31fe:	b3 83       	std	Z+3, r27	; 0x03
    3200:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    3204:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    3208:	ec 0f       	add	r30, r28
    320a:	fd 1f       	adc	r31, r29
    320c:	83 a9       	ldd	r24, Z+51	; 0x33
    320e:	82 30       	cpi	r24, 0x02	; 2
    3210:	e9 f4       	brne	.+58     	; 0x324c <xTaskGenericNotifyWait+0x11e>
    3212:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    3216:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    321a:	ce 01       	movw	r24, r28
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	88 0f       	add	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	e8 0f       	add	r30, r24
    3226:	f9 1f       	adc	r31, r25
    3228:	87 a5       	ldd	r24, Z+47	; 0x2f
    322a:	90 a9       	ldd	r25, Z+48	; 0x30
    322c:	a1 a9       	ldd	r26, Z+49	; 0x31
    322e:	b2 a9       	ldd	r27, Z+50	; 0x32
    3230:	40 94       	com	r4
    3232:	50 94       	com	r5
    3234:	60 94       	com	r6
    3236:	70 94       	com	r7
    3238:	48 22       	and	r4, r24
    323a:	59 22       	and	r5, r25
    323c:	6a 22       	and	r6, r26
    323e:	7b 22       	and	r7, r27
    3240:	47 a6       	std	Z+47, r4	; 0x2f
    3242:	50 aa       	std	Z+48, r5	; 0x30
    3244:	61 aa       	std	Z+49, r6	; 0x31
    3246:	72 aa       	std	Z+50, r7	; 0x32
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	01 c0       	rjmp	.+2      	; 0x324e <xTaskGenericNotifyWait+0x120>
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	20 91 d6 17 	lds	r18, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    3252:	30 91 d7 17 	lds	r19, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    3256:	c2 0f       	add	r28, r18
    3258:	d3 1f       	adc	r29, r19
    325a:	1b aa       	std	Y+51, r1	; 0x33
    325c:	0f 90       	pop	r0
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	ef 90       	pop	r14
    326c:	df 90       	pop	r13
    326e:	cf 90       	pop	r12
    3270:	bf 90       	pop	r11
    3272:	af 90       	pop	r10
    3274:	7f 90       	pop	r7
    3276:	6f 90       	pop	r6
    3278:	5f 90       	pop	r5
    327a:	4f 90       	pop	r4
    327c:	08 95       	ret

0000327e <xTaskGenericNotify>:
    327e:	8f 92       	push	r8
    3280:	9f 92       	push	r9
    3282:	af 92       	push	r10
    3284:	bf 92       	push	r11
    3286:	ef 92       	push	r14
    3288:	ff 92       	push	r15
    328a:	0f 93       	push	r16
    328c:	cf 93       	push	r28
    328e:	df 93       	push	r29
    3290:	dc 01       	movw	r26, r24
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	0f 92       	push	r0
    3298:	e1 14       	cp	r14, r1
    329a:	f1 04       	cpc	r15, r1
    329c:	89 f0       	breq	.+34     	; 0x32c0 <xTaskGenericNotify+0x42>
    329e:	e6 2f       	mov	r30, r22
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	ee 0f       	add	r30, r30
    32a4:	ff 1f       	adc	r31, r31
    32a6:	ee 0f       	add	r30, r30
    32a8:	ff 1f       	adc	r31, r31
    32aa:	e8 0f       	add	r30, r24
    32ac:	f9 1f       	adc	r31, r25
    32ae:	87 a4       	ldd	r8, Z+47	; 0x2f
    32b0:	90 a8       	ldd	r9, Z+48	; 0x30
    32b2:	a1 a8       	ldd	r10, Z+49	; 0x31
    32b4:	b2 a8       	ldd	r11, Z+50	; 0x32
    32b6:	f7 01       	movw	r30, r14
    32b8:	80 82       	st	Z, r8
    32ba:	91 82       	std	Z+1, r9	; 0x01
    32bc:	a2 82       	std	Z+2, r10	; 0x02
    32be:	b3 82       	std	Z+3, r11	; 0x03
    32c0:	70 e0       	ldi	r23, 0x00	; 0
    32c2:	fd 01       	movw	r30, r26
    32c4:	e6 0f       	add	r30, r22
    32c6:	f7 1f       	adc	r31, r23
    32c8:	83 a9       	ldd	r24, Z+51	; 0x33
    32ca:	92 e0       	ldi	r25, 0x02	; 2
    32cc:	93 ab       	std	Z+51, r25	; 0x33
    32ce:	02 30       	cpi	r16, 0x02	; 2
    32d0:	01 f1       	breq	.+64     	; 0x3312 <xTaskGenericNotify+0x94>
    32d2:	18 f4       	brcc	.+6      	; 0x32da <xTaskGenericNotify+0x5c>
    32d4:	01 30       	cpi	r16, 0x01	; 1
    32d6:	31 f0       	breq	.+12     	; 0x32e4 <xTaskGenericNotify+0x66>
    32d8:	4d c0       	rjmp	.+154    	; 0x3374 <xTaskGenericNotify+0xf6>
    32da:	03 30       	cpi	r16, 0x03	; 3
    32dc:	79 f1       	breq	.+94     	; 0x333c <xTaskGenericNotify+0xbe>
    32de:	04 30       	cpi	r16, 0x04	; 4
    32e0:	d1 f1       	breq	.+116    	; 0x3356 <xTaskGenericNotify+0xd8>
    32e2:	48 c0       	rjmp	.+144    	; 0x3374 <xTaskGenericNotify+0xf6>
    32e4:	66 0f       	add	r22, r22
    32e6:	77 1f       	adc	r23, r23
    32e8:	66 0f       	add	r22, r22
    32ea:	77 1f       	adc	r23, r23
    32ec:	fd 01       	movw	r30, r26
    32ee:	e6 0f       	add	r30, r22
    32f0:	f7 1f       	adc	r31, r23
    32f2:	87 a4       	ldd	r8, Z+47	; 0x2f
    32f4:	90 a8       	ldd	r9, Z+48	; 0x30
    32f6:	a1 a8       	ldd	r10, Z+49	; 0x31
    32f8:	b2 a8       	ldd	r11, Z+50	; 0x32
    32fa:	ba 01       	movw	r22, r20
    32fc:	a9 01       	movw	r20, r18
    32fe:	48 29       	or	r20, r8
    3300:	59 29       	or	r21, r9
    3302:	6a 29       	or	r22, r10
    3304:	7b 29       	or	r23, r11
    3306:	47 a7       	std	Z+47, r20	; 0x2f
    3308:	50 ab       	std	Z+48, r21	; 0x30
    330a:	61 ab       	std	Z+49, r22	; 0x31
    330c:	72 ab       	std	Z+50, r23	; 0x32
    330e:	01 e0       	ldi	r16, 0x01	; 1
    3310:	34 c0       	rjmp	.+104    	; 0x337a <xTaskGenericNotify+0xfc>
    3312:	66 0f       	add	r22, r22
    3314:	77 1f       	adc	r23, r23
    3316:	66 0f       	add	r22, r22
    3318:	77 1f       	adc	r23, r23
    331a:	fd 01       	movw	r30, r26
    331c:	e6 0f       	add	r30, r22
    331e:	f7 1f       	adc	r31, r23
    3320:	47 a5       	ldd	r20, Z+47	; 0x2f
    3322:	50 a9       	ldd	r21, Z+48	; 0x30
    3324:	61 a9       	ldd	r22, Z+49	; 0x31
    3326:	72 a9       	ldd	r23, Z+50	; 0x32
    3328:	4f 5f       	subi	r20, 0xFF	; 255
    332a:	5f 4f       	sbci	r21, 0xFF	; 255
    332c:	6f 4f       	sbci	r22, 0xFF	; 255
    332e:	7f 4f       	sbci	r23, 0xFF	; 255
    3330:	47 a7       	std	Z+47, r20	; 0x2f
    3332:	50 ab       	std	Z+48, r21	; 0x30
    3334:	61 ab       	std	Z+49, r22	; 0x31
    3336:	72 ab       	std	Z+50, r23	; 0x32
    3338:	01 e0       	ldi	r16, 0x01	; 1
    333a:	1f c0       	rjmp	.+62     	; 0x337a <xTaskGenericNotify+0xfc>
    333c:	66 0f       	add	r22, r22
    333e:	77 1f       	adc	r23, r23
    3340:	66 0f       	add	r22, r22
    3342:	77 1f       	adc	r23, r23
    3344:	fd 01       	movw	r30, r26
    3346:	e6 0f       	add	r30, r22
    3348:	f7 1f       	adc	r31, r23
    334a:	27 a7       	std	Z+47, r18	; 0x2f
    334c:	30 ab       	std	Z+48, r19	; 0x30
    334e:	41 ab       	std	Z+49, r20	; 0x31
    3350:	52 ab       	std	Z+50, r21	; 0x32
    3352:	01 e0       	ldi	r16, 0x01	; 1
    3354:	12 c0       	rjmp	.+36     	; 0x337a <xTaskGenericNotify+0xfc>
    3356:	82 30       	cpi	r24, 0x02	; 2
    3358:	79 f0       	breq	.+30     	; 0x3378 <xTaskGenericNotify+0xfa>
    335a:	66 0f       	add	r22, r22
    335c:	77 1f       	adc	r23, r23
    335e:	66 0f       	add	r22, r22
    3360:	77 1f       	adc	r23, r23
    3362:	fd 01       	movw	r30, r26
    3364:	e6 0f       	add	r30, r22
    3366:	f7 1f       	adc	r31, r23
    3368:	27 a7       	std	Z+47, r18	; 0x2f
    336a:	30 ab       	std	Z+48, r19	; 0x30
    336c:	41 ab       	std	Z+49, r20	; 0x31
    336e:	52 ab       	std	Z+50, r21	; 0x32
    3370:	01 e0       	ldi	r16, 0x01	; 1
    3372:	03 c0       	rjmp	.+6      	; 0x337a <xTaskGenericNotify+0xfc>
    3374:	01 e0       	ldi	r16, 0x01	; 1
    3376:	01 c0       	rjmp	.+2      	; 0x337a <xTaskGenericNotify+0xfc>
    3378:	00 e0       	ldi	r16, 0x00	; 0
    337a:	81 30       	cpi	r24, 0x01	; 1
    337c:	09 f0       	breq	.+2      	; 0x3380 <xTaskGenericNotify+0x102>
    337e:	69 c0       	rjmp	.+210    	; 0x3452 <xTaskGenericNotify+0x1d4>
    3380:	1c 96       	adiw	r26, 0x0c	; 12
    3382:	ed 91       	ld	r30, X+
    3384:	fc 91       	ld	r31, X
    3386:	1d 97       	sbiw	r26, 0x0d	; 13
    3388:	16 96       	adiw	r26, 0x06	; 6
    338a:	cd 91       	ld	r28, X+
    338c:	dc 91       	ld	r29, X
    338e:	17 97       	sbiw	r26, 0x07	; 7
    3390:	18 96       	adiw	r26, 0x08	; 8
    3392:	8d 91       	ld	r24, X+
    3394:	9c 91       	ld	r25, X
    3396:	19 97       	sbiw	r26, 0x09	; 9
    3398:	9f 83       	std	Y+7, r25	; 0x07
    339a:	8e 83       	std	Y+6, r24	; 0x06
    339c:	18 96       	adiw	r26, 0x08	; 8
    339e:	cd 91       	ld	r28, X+
    33a0:	dc 91       	ld	r29, X
    33a2:	19 97       	sbiw	r26, 0x09	; 9
    33a4:	16 96       	adiw	r26, 0x06	; 6
    33a6:	8d 91       	ld	r24, X+
    33a8:	9c 91       	ld	r25, X
    33aa:	17 97       	sbiw	r26, 0x07	; 7
    33ac:	9d 83       	std	Y+5, r25	; 0x05
    33ae:	8c 83       	std	Y+4, r24	; 0x04
    33b0:	81 81       	ldd	r24, Z+1	; 0x01
    33b2:	92 81       	ldd	r25, Z+2	; 0x02
    33b4:	9d 01       	movw	r18, r26
    33b6:	2e 5f       	subi	r18, 0xFE	; 254
    33b8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ba:	82 17       	cp	r24, r18
    33bc:	93 07       	cpc	r25, r19
    33be:	31 f4       	brne	.+12     	; 0x33cc <xTaskGenericNotify+0x14e>
    33c0:	18 96       	adiw	r26, 0x08	; 8
    33c2:	8d 91       	ld	r24, X+
    33c4:	9c 91       	ld	r25, X
    33c6:	19 97       	sbiw	r26, 0x09	; 9
    33c8:	92 83       	std	Z+2, r25	; 0x02
    33ca:	81 83       	std	Z+1, r24	; 0x01
    33cc:	1d 96       	adiw	r26, 0x0d	; 13
    33ce:	1c 92       	st	X, r1
    33d0:	1e 92       	st	-X, r1
    33d2:	1c 97       	sbiw	r26, 0x0c	; 12
    33d4:	80 81       	ld	r24, Z
    33d6:	81 50       	subi	r24, 0x01	; 1
    33d8:	80 83       	st	Z, r24
    33da:	5a 96       	adiw	r26, 0x1a	; 26
    33dc:	ec 91       	ld	r30, X
    33de:	5a 97       	sbiw	r26, 0x1a	; 26
    33e0:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <uxTopReadyPriority>
    33e4:	8e 17       	cp	r24, r30
    33e6:	10 f4       	brcc	.+4      	; 0x33ec <xTaskGenericNotify+0x16e>
    33e8:	e0 93 26 17 	sts	0x1726, r30	; 0x801726 <uxTopReadyPriority>
    33ec:	8b e0       	ldi	r24, 0x0B	; 11
    33ee:	8e 9f       	mul	r24, r30
    33f0:	f0 01       	movw	r30, r0
    33f2:	11 24       	eor	r1, r1
    33f4:	e8 59       	subi	r30, 0x98	; 152
    33f6:	f8 4e       	sbci	r31, 0xE8	; 232
    33f8:	01 80       	ldd	r0, Z+1	; 0x01
    33fa:	f2 81       	ldd	r31, Z+2	; 0x02
    33fc:	e0 2d       	mov	r30, r0
    33fe:	17 96       	adiw	r26, 0x07	; 7
    3400:	fc 93       	st	X, r31
    3402:	ee 93       	st	-X, r30
    3404:	16 97       	sbiw	r26, 0x06	; 6
    3406:	46 81       	ldd	r20, Z+6	; 0x06
    3408:	57 81       	ldd	r21, Z+7	; 0x07
    340a:	19 96       	adiw	r26, 0x09	; 9
    340c:	5c 93       	st	X, r21
    340e:	4e 93       	st	-X, r20
    3410:	18 97       	sbiw	r26, 0x08	; 8
    3412:	c6 81       	ldd	r28, Z+6	; 0x06
    3414:	d7 81       	ldd	r29, Z+7	; 0x07
    3416:	3d 83       	std	Y+5, r19	; 0x05
    3418:	2c 83       	std	Y+4, r18	; 0x04
    341a:	37 83       	std	Z+7, r19	; 0x07
    341c:	26 83       	std	Z+6, r18	; 0x06
    341e:	5a 96       	adiw	r26, 0x1a	; 26
    3420:	ec 91       	ld	r30, X
    3422:	5a 97       	sbiw	r26, 0x1a	; 26
    3424:	8e 9f       	mul	r24, r30
    3426:	f0 01       	movw	r30, r0
    3428:	11 24       	eor	r1, r1
    342a:	e8 59       	subi	r30, 0x98	; 152
    342c:	f8 4e       	sbci	r31, 0xE8	; 232
    342e:	1d 96       	adiw	r26, 0x0d	; 13
    3430:	fc 93       	st	X, r31
    3432:	ee 93       	st	-X, r30
    3434:	1c 97       	sbiw	r26, 0x0c	; 12
    3436:	80 81       	ld	r24, Z
    3438:	8f 5f       	subi	r24, 0xFF	; 255
    343a:	80 83       	st	Z, r24
    343c:	5a 96       	adiw	r26, 0x1a	; 26
    343e:	9c 91       	ld	r25, X
    3440:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    3444:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    3448:	82 8d       	ldd	r24, Z+26	; 0x1a
    344a:	89 17       	cp	r24, r25
    344c:	10 f4       	brcc	.+4      	; 0x3452 <xTaskGenericNotify+0x1d4>
    344e:	0e 94 55 07 	call	0xeaa	; 0xeaa <vPortYield>
    3452:	0f 90       	pop	r0
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	80 2f       	mov	r24, r16
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	0f 91       	pop	r16
    345e:	ff 90       	pop	r15
    3460:	ef 90       	pop	r14
    3462:	bf 90       	pop	r11
    3464:	af 90       	pop	r10
    3466:	9f 90       	pop	r9
    3468:	8f 90       	pop	r8
    346a:	08 95       	ret

0000346c <xTaskGenericNotifyFromISR>:
    346c:	8f 92       	push	r8
    346e:	9f 92       	push	r9
    3470:	af 92       	push	r10
    3472:	bf 92       	push	r11
    3474:	cf 92       	push	r12
    3476:	df 92       	push	r13
    3478:	ef 92       	push	r14
    347a:	ff 92       	push	r15
    347c:	0f 93       	push	r16
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	dc 01       	movw	r26, r24
    3484:	e1 14       	cp	r14, r1
    3486:	f1 04       	cpc	r15, r1
    3488:	89 f0       	breq	.+34     	; 0x34ac <xTaskGenericNotifyFromISR+0x40>
    348a:	e6 2f       	mov	r30, r22
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	ee 0f       	add	r30, r30
    3490:	ff 1f       	adc	r31, r31
    3492:	ee 0f       	add	r30, r30
    3494:	ff 1f       	adc	r31, r31
    3496:	e8 0f       	add	r30, r24
    3498:	f9 1f       	adc	r31, r25
    349a:	87 a4       	ldd	r8, Z+47	; 0x2f
    349c:	90 a8       	ldd	r9, Z+48	; 0x30
    349e:	a1 a8       	ldd	r10, Z+49	; 0x31
    34a0:	b2 a8       	ldd	r11, Z+50	; 0x32
    34a2:	f7 01       	movw	r30, r14
    34a4:	80 82       	st	Z, r8
    34a6:	91 82       	std	Z+1, r9	; 0x01
    34a8:	a2 82       	std	Z+2, r10	; 0x02
    34aa:	b3 82       	std	Z+3, r11	; 0x03
    34ac:	70 e0       	ldi	r23, 0x00	; 0
    34ae:	fd 01       	movw	r30, r26
    34b0:	e6 0f       	add	r30, r22
    34b2:	f7 1f       	adc	r31, r23
    34b4:	93 a9       	ldd	r25, Z+51	; 0x33
    34b6:	82 e0       	ldi	r24, 0x02	; 2
    34b8:	83 ab       	std	Z+51, r24	; 0x33
    34ba:	02 30       	cpi	r16, 0x02	; 2
    34bc:	01 f1       	breq	.+64     	; 0x34fe <xTaskGenericNotifyFromISR+0x92>
    34be:	18 f4       	brcc	.+6      	; 0x34c6 <xTaskGenericNotifyFromISR+0x5a>
    34c0:	01 30       	cpi	r16, 0x01	; 1
    34c2:	31 f0       	breq	.+12     	; 0x34d0 <xTaskGenericNotifyFromISR+0x64>
    34c4:	4d c0       	rjmp	.+154    	; 0x3560 <xTaskGenericNotifyFromISR+0xf4>
    34c6:	03 30       	cpi	r16, 0x03	; 3
    34c8:	79 f1       	breq	.+94     	; 0x3528 <xTaskGenericNotifyFromISR+0xbc>
    34ca:	04 30       	cpi	r16, 0x04	; 4
    34cc:	d1 f1       	breq	.+116    	; 0x3542 <xTaskGenericNotifyFromISR+0xd6>
    34ce:	48 c0       	rjmp	.+144    	; 0x3560 <xTaskGenericNotifyFromISR+0xf4>
    34d0:	66 0f       	add	r22, r22
    34d2:	77 1f       	adc	r23, r23
    34d4:	66 0f       	add	r22, r22
    34d6:	77 1f       	adc	r23, r23
    34d8:	fd 01       	movw	r30, r26
    34da:	e6 0f       	add	r30, r22
    34dc:	f7 1f       	adc	r31, r23
    34de:	87 a4       	ldd	r8, Z+47	; 0x2f
    34e0:	90 a8       	ldd	r9, Z+48	; 0x30
    34e2:	a1 a8       	ldd	r10, Z+49	; 0x31
    34e4:	b2 a8       	ldd	r11, Z+50	; 0x32
    34e6:	ba 01       	movw	r22, r20
    34e8:	a9 01       	movw	r20, r18
    34ea:	48 29       	or	r20, r8
    34ec:	59 29       	or	r21, r9
    34ee:	6a 29       	or	r22, r10
    34f0:	7b 29       	or	r23, r11
    34f2:	47 a7       	std	Z+47, r20	; 0x2f
    34f4:	50 ab       	std	Z+48, r21	; 0x30
    34f6:	61 ab       	std	Z+49, r22	; 0x31
    34f8:	72 ab       	std	Z+50, r23	; 0x32
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	34 c0       	rjmp	.+104    	; 0x3566 <xTaskGenericNotifyFromISR+0xfa>
    34fe:	66 0f       	add	r22, r22
    3500:	77 1f       	adc	r23, r23
    3502:	66 0f       	add	r22, r22
    3504:	77 1f       	adc	r23, r23
    3506:	fd 01       	movw	r30, r26
    3508:	e6 0f       	add	r30, r22
    350a:	f7 1f       	adc	r31, r23
    350c:	47 a5       	ldd	r20, Z+47	; 0x2f
    350e:	50 a9       	ldd	r21, Z+48	; 0x30
    3510:	61 a9       	ldd	r22, Z+49	; 0x31
    3512:	72 a9       	ldd	r23, Z+50	; 0x32
    3514:	4f 5f       	subi	r20, 0xFF	; 255
    3516:	5f 4f       	sbci	r21, 0xFF	; 255
    3518:	6f 4f       	sbci	r22, 0xFF	; 255
    351a:	7f 4f       	sbci	r23, 0xFF	; 255
    351c:	47 a7       	std	Z+47, r20	; 0x2f
    351e:	50 ab       	std	Z+48, r21	; 0x30
    3520:	61 ab       	std	Z+49, r22	; 0x31
    3522:	72 ab       	std	Z+50, r23	; 0x32
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	1f c0       	rjmp	.+62     	; 0x3566 <xTaskGenericNotifyFromISR+0xfa>
    3528:	66 0f       	add	r22, r22
    352a:	77 1f       	adc	r23, r23
    352c:	66 0f       	add	r22, r22
    352e:	77 1f       	adc	r23, r23
    3530:	fd 01       	movw	r30, r26
    3532:	e6 0f       	add	r30, r22
    3534:	f7 1f       	adc	r31, r23
    3536:	27 a7       	std	Z+47, r18	; 0x2f
    3538:	30 ab       	std	Z+48, r19	; 0x30
    353a:	41 ab       	std	Z+49, r20	; 0x31
    353c:	52 ab       	std	Z+50, r21	; 0x32
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	12 c0       	rjmp	.+36     	; 0x3566 <xTaskGenericNotifyFromISR+0xfa>
    3542:	92 30       	cpi	r25, 0x02	; 2
    3544:	79 f0       	breq	.+30     	; 0x3564 <xTaskGenericNotifyFromISR+0xf8>
    3546:	66 0f       	add	r22, r22
    3548:	77 1f       	adc	r23, r23
    354a:	66 0f       	add	r22, r22
    354c:	77 1f       	adc	r23, r23
    354e:	fd 01       	movw	r30, r26
    3550:	e6 0f       	add	r30, r22
    3552:	f7 1f       	adc	r31, r23
    3554:	27 a7       	std	Z+47, r18	; 0x2f
    3556:	30 ab       	std	Z+48, r19	; 0x30
    3558:	41 ab       	std	Z+49, r20	; 0x31
    355a:	52 ab       	std	Z+50, r21	; 0x32
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	03 c0       	rjmp	.+6      	; 0x3566 <xTaskGenericNotifyFromISR+0xfa>
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	01 c0       	rjmp	.+2      	; 0x3566 <xTaskGenericNotifyFromISR+0xfa>
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	91 30       	cpi	r25, 0x01	; 1
    3568:	09 f0       	breq	.+2      	; 0x356c <xTaskGenericNotifyFromISR+0x100>
    356a:	96 c0       	rjmp	.+300    	; 0x3698 <xTaskGenericNotifyFromISR+0x22c>
    356c:	90 91 17 17 	lds	r25, 0x1717	; 0x801717 <uxSchedulerSuspended>
    3570:	91 11       	cpse	r25, r1
    3572:	5f c0       	rjmp	.+190    	; 0x3632 <xTaskGenericNotifyFromISR+0x1c6>
    3574:	1c 96       	adiw	r26, 0x0c	; 12
    3576:	ed 91       	ld	r30, X+
    3578:	fc 91       	ld	r31, X
    357a:	1d 97       	sbiw	r26, 0x0d	; 13
    357c:	16 96       	adiw	r26, 0x06	; 6
    357e:	cd 91       	ld	r28, X+
    3580:	dc 91       	ld	r29, X
    3582:	17 97       	sbiw	r26, 0x07	; 7
    3584:	18 96       	adiw	r26, 0x08	; 8
    3586:	2d 91       	ld	r18, X+
    3588:	3c 91       	ld	r19, X
    358a:	19 97       	sbiw	r26, 0x09	; 9
    358c:	3f 83       	std	Y+7, r19	; 0x07
    358e:	2e 83       	std	Y+6, r18	; 0x06
    3590:	18 96       	adiw	r26, 0x08	; 8
    3592:	cd 91       	ld	r28, X+
    3594:	dc 91       	ld	r29, X
    3596:	19 97       	sbiw	r26, 0x09	; 9
    3598:	16 96       	adiw	r26, 0x06	; 6
    359a:	2d 91       	ld	r18, X+
    359c:	3c 91       	ld	r19, X
    359e:	17 97       	sbiw	r26, 0x07	; 7
    35a0:	3d 83       	std	Y+5, r19	; 0x05
    35a2:	2c 83       	std	Y+4, r18	; 0x04
    35a4:	41 81       	ldd	r20, Z+1	; 0x01
    35a6:	52 81       	ldd	r21, Z+2	; 0x02
    35a8:	9d 01       	movw	r18, r26
    35aa:	2e 5f       	subi	r18, 0xFE	; 254
    35ac:	3f 4f       	sbci	r19, 0xFF	; 255
    35ae:	42 17       	cp	r20, r18
    35b0:	53 07       	cpc	r21, r19
    35b2:	31 f4       	brne	.+12     	; 0x35c0 <xTaskGenericNotifyFromISR+0x154>
    35b4:	18 96       	adiw	r26, 0x08	; 8
    35b6:	4d 91       	ld	r20, X+
    35b8:	5c 91       	ld	r21, X
    35ba:	19 97       	sbiw	r26, 0x09	; 9
    35bc:	52 83       	std	Z+2, r21	; 0x02
    35be:	41 83       	std	Z+1, r20	; 0x01
    35c0:	1d 96       	adiw	r26, 0x0d	; 13
    35c2:	1c 92       	st	X, r1
    35c4:	1e 92       	st	-X, r1
    35c6:	1c 97       	sbiw	r26, 0x0c	; 12
    35c8:	90 81       	ld	r25, Z
    35ca:	91 50       	subi	r25, 0x01	; 1
    35cc:	90 83       	st	Z, r25
    35ce:	5a 96       	adiw	r26, 0x1a	; 26
    35d0:	ec 91       	ld	r30, X
    35d2:	5a 97       	sbiw	r26, 0x1a	; 26
    35d4:	90 91 26 17 	lds	r25, 0x1726	; 0x801726 <uxTopReadyPriority>
    35d8:	9e 17       	cp	r25, r30
    35da:	10 f4       	brcc	.+4      	; 0x35e0 <xTaskGenericNotifyFromISR+0x174>
    35dc:	e0 93 26 17 	sts	0x1726, r30	; 0x801726 <uxTopReadyPriority>
    35e0:	9b e0       	ldi	r25, 0x0B	; 11
    35e2:	9e 9f       	mul	r25, r30
    35e4:	f0 01       	movw	r30, r0
    35e6:	11 24       	eor	r1, r1
    35e8:	e8 59       	subi	r30, 0x98	; 152
    35ea:	f8 4e       	sbci	r31, 0xE8	; 232
    35ec:	01 80       	ldd	r0, Z+1	; 0x01
    35ee:	f2 81       	ldd	r31, Z+2	; 0x02
    35f0:	e0 2d       	mov	r30, r0
    35f2:	17 96       	adiw	r26, 0x07	; 7
    35f4:	fc 93       	st	X, r31
    35f6:	ee 93       	st	-X, r30
    35f8:	16 97       	sbiw	r26, 0x06	; 6
    35fa:	46 81       	ldd	r20, Z+6	; 0x06
    35fc:	57 81       	ldd	r21, Z+7	; 0x07
    35fe:	19 96       	adiw	r26, 0x09	; 9
    3600:	5c 93       	st	X, r21
    3602:	4e 93       	st	-X, r20
    3604:	18 97       	sbiw	r26, 0x08	; 8
    3606:	c6 81       	ldd	r28, Z+6	; 0x06
    3608:	d7 81       	ldd	r29, Z+7	; 0x07
    360a:	3d 83       	std	Y+5, r19	; 0x05
    360c:	2c 83       	std	Y+4, r18	; 0x04
    360e:	37 83       	std	Z+7, r19	; 0x07
    3610:	26 83       	std	Z+6, r18	; 0x06
    3612:	5a 96       	adiw	r26, 0x1a	; 26
    3614:	ec 91       	ld	r30, X
    3616:	5a 97       	sbiw	r26, 0x1a	; 26
    3618:	9e 9f       	mul	r25, r30
    361a:	f0 01       	movw	r30, r0
    361c:	11 24       	eor	r1, r1
    361e:	e8 59       	subi	r30, 0x98	; 152
    3620:	f8 4e       	sbci	r31, 0xE8	; 232
    3622:	1d 96       	adiw	r26, 0x0d	; 13
    3624:	fc 93       	st	X, r31
    3626:	ee 93       	st	-X, r30
    3628:	1c 97       	sbiw	r26, 0x0c	; 12
    362a:	90 81       	ld	r25, Z
    362c:	9f 5f       	subi	r25, 0xFF	; 255
    362e:	90 83       	st	Z, r25
    3630:	21 c0       	rjmp	.+66     	; 0x3674 <xTaskGenericNotifyFromISR+0x208>
    3632:	63 e4       	ldi	r22, 0x43	; 67
    3634:	77 e1       	ldi	r23, 0x17	; 23
    3636:	fb 01       	movw	r30, r22
    3638:	c1 81       	ldd	r28, Z+1	; 0x01
    363a:	d2 81       	ldd	r29, Z+2	; 0x02
    363c:	53 96       	adiw	r26, 0x13	; 19
    363e:	dc 93       	st	X, r29
    3640:	ce 93       	st	-X, r28
    3642:	52 97       	sbiw	r26, 0x12	; 18
    3644:	2e 81       	ldd	r18, Y+6	; 0x06
    3646:	3f 81       	ldd	r19, Y+7	; 0x07
    3648:	55 96       	adiw	r26, 0x15	; 21
    364a:	3c 93       	st	X, r19
    364c:	2e 93       	st	-X, r18
    364e:	54 97       	sbiw	r26, 0x14	; 20
    3650:	4e 81       	ldd	r20, Y+6	; 0x06
    3652:	5f 81       	ldd	r21, Y+7	; 0x07
    3654:	9d 01       	movw	r18, r26
    3656:	22 5f       	subi	r18, 0xF2	; 242
    3658:	3f 4f       	sbci	r19, 0xFF	; 255
    365a:	fa 01       	movw	r30, r20
    365c:	35 83       	std	Z+5, r19	; 0x05
    365e:	24 83       	std	Z+4, r18	; 0x04
    3660:	3f 83       	std	Y+7, r19	; 0x07
    3662:	2e 83       	std	Y+6, r18	; 0x06
    3664:	59 96       	adiw	r26, 0x19	; 25
    3666:	7c 93       	st	X, r23
    3668:	6e 93       	st	-X, r22
    366a:	58 97       	sbiw	r26, 0x18	; 24
    366c:	fb 01       	movw	r30, r22
    366e:	90 81       	ld	r25, Z
    3670:	9f 5f       	subi	r25, 0xFF	; 255
    3672:	90 83       	st	Z, r25
    3674:	5a 96       	adiw	r26, 0x1a	; 26
    3676:	2c 91       	ld	r18, X
    3678:	e0 91 d6 17 	lds	r30, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    367c:	f0 91 d7 17 	lds	r31, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>
    3680:	92 8d       	ldd	r25, Z+26	; 0x1a
    3682:	92 17       	cp	r25, r18
    3684:	48 f4       	brcc	.+18     	; 0x3698 <xTaskGenericNotifyFromISR+0x22c>
    3686:	c1 14       	cp	r12, r1
    3688:	d1 04       	cpc	r13, r1
    368a:	19 f0       	breq	.+6      	; 0x3692 <xTaskGenericNotifyFromISR+0x226>
    368c:	91 e0       	ldi	r25, 0x01	; 1
    368e:	f6 01       	movw	r30, r12
    3690:	90 83       	st	Z, r25
    3692:	91 e0       	ldi	r25, 0x01	; 1
    3694:	90 93 20 17 	sts	0x1720, r25	; 0x801720 <xYieldPending>
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	0f 91       	pop	r16
    369e:	ff 90       	pop	r15
    36a0:	ef 90       	pop	r14
    36a2:	df 90       	pop	r13
    36a4:	cf 90       	pop	r12
    36a6:	bf 90       	pop	r11
    36a8:	af 90       	pop	r10
    36aa:	9f 90       	pop	r9
    36ac:	8f 90       	pop	r8
    36ae:	08 95       	ret

000036b0 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	21 f4       	brne	.+8      	; 0x36bc <xTaskGenericNotifyStateClear+0xc>
    36b4:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <pxCurrentTCB>
    36b8:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	fc 01       	movw	r30, r24
    36c6:	e6 0f       	add	r30, r22
    36c8:	f7 1f       	adc	r31, r23
    36ca:	23 a9       	ldd	r18, Z+51	; 0x33
    36cc:	22 30       	cpi	r18, 0x02	; 2
    36ce:	31 f4       	brne	.+12     	; 0x36dc <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    36d0:	fc 01       	movw	r30, r24
    36d2:	e6 0f       	add	r30, r22
    36d4:	f7 1f       	adc	r31, r23
    36d6:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	01 c0       	rjmp	.+2      	; 0x36de <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    36dc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    36de:	0f 90       	pop	r0
    36e0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    36e2:	08 95       	ret

000036e4 <prvGetNextExpireTime>:
    36e4:	dc 01       	movw	r26, r24
    36e6:	e0 91 e2 17 	lds	r30, 0x17E2	; 0x8017e2 <pxCurrentTimerList>
    36ea:	f0 91 e3 17 	lds	r31, 0x17E3	; 0x8017e3 <pxCurrentTimerList+0x1>
    36ee:	80 81       	ld	r24, Z
    36f0:	91 e0       	ldi	r25, 0x01	; 1
    36f2:	81 11       	cpse	r24, r1
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	9c 93       	st	X, r25
    36f8:	91 11       	cpse	r25, r1
    36fa:	08 c0       	rjmp	.+16     	; 0x370c <prvGetNextExpireTime+0x28>
    36fc:	07 80       	ldd	r0, Z+7	; 0x07
    36fe:	f0 85       	ldd	r31, Z+8	; 0x08
    3700:	e0 2d       	mov	r30, r0
    3702:	60 81       	ld	r22, Z
    3704:	71 81       	ldd	r23, Z+1	; 0x01
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	08 95       	ret
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	70 e0       	ldi	r23, 0x00	; 0
    3710:	cb 01       	movw	r24, r22
    3712:	08 95       	ret

00003714 <prvInsertTimerInActiveList>:
    3714:	cf 92       	push	r12
    3716:	df 92       	push	r13
    3718:	ef 92       	push	r14
    371a:	ff 92       	push	r15
    371c:	0f 93       	push	r16
    371e:	1f 93       	push	r17
    3720:	fc 01       	movw	r30, r24
    3722:	42 83       	std	Z+2, r20	; 0x02
    3724:	53 83       	std	Z+3, r21	; 0x03
    3726:	64 83       	std	Z+4, r22	; 0x04
    3728:	75 83       	std	Z+5, r23	; 0x05
    372a:	93 87       	std	Z+11, r25	; 0x0b
    372c:	82 87       	std	Z+10, r24	; 0x0a
    372e:	04 17       	cp	r16, r20
    3730:	15 07       	cpc	r17, r21
    3732:	26 07       	cpc	r18, r22
    3734:	37 07       	cpc	r19, r23
    3736:	c0 f0       	brcs	.+48     	; 0x3768 <prvInsertTimerInActiveList+0x54>
    3738:	0c 19       	sub	r16, r12
    373a:	1d 09       	sbc	r17, r13
    373c:	2e 09       	sbc	r18, r14
    373e:	3f 09       	sbc	r19, r15
    3740:	86 85       	ldd	r24, Z+14	; 0x0e
    3742:	97 85       	ldd	r25, Z+15	; 0x0f
    3744:	a0 89       	ldd	r26, Z+16	; 0x10
    3746:	b1 89       	ldd	r27, Z+17	; 0x11
    3748:	08 17       	cp	r16, r24
    374a:	19 07       	cpc	r17, r25
    374c:	2a 07       	cpc	r18, r26
    374e:	3b 07       	cpc	r19, r27
    3750:	00 f5       	brcc	.+64     	; 0x3792 <prvInsertTimerInActiveList+0x7e>
    3752:	bf 01       	movw	r22, r30
    3754:	6e 5f       	subi	r22, 0xFE	; 254
    3756:	7f 4f       	sbci	r23, 0xFF	; 255
    3758:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <pxOverflowTimerList>
    375c:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <pxOverflowTimerList+0x1>
    3760:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInsert>
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	18 c0       	rjmp	.+48     	; 0x3798 <prvInsertTimerInActiveList+0x84>
    3768:	0c 15       	cp	r16, r12
    376a:	1d 05       	cpc	r17, r13
    376c:	2e 05       	cpc	r18, r14
    376e:	3f 05       	cpc	r19, r15
    3770:	28 f4       	brcc	.+10     	; 0x377c <prvInsertTimerInActiveList+0x68>
    3772:	4c 15       	cp	r20, r12
    3774:	5d 05       	cpc	r21, r13
    3776:	6e 05       	cpc	r22, r14
    3778:	7f 05       	cpc	r23, r15
    377a:	68 f4       	brcc	.+26     	; 0x3796 <prvInsertTimerInActiveList+0x82>
    377c:	bf 01       	movw	r22, r30
    377e:	6e 5f       	subi	r22, 0xFE	; 254
    3780:	7f 4f       	sbci	r23, 0xFF	; 255
    3782:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <pxCurrentTimerList>
    3786:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <pxCurrentTimerList+0x1>
    378a:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInsert>
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	03 c0       	rjmp	.+6      	; 0x3798 <prvInsertTimerInActiveList+0x84>
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	01 c0       	rjmp	.+2      	; 0x3798 <prvInsertTimerInActiveList+0x84>
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	1f 91       	pop	r17
    379a:	0f 91       	pop	r16
    379c:	ff 90       	pop	r15
    379e:	ef 90       	pop	r14
    37a0:	df 90       	pop	r13
    37a2:	cf 90       	pop	r12
    37a4:	08 95       	ret

000037a6 <prvCheckForValidListAndQueue>:
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	0f 92       	push	r0
    37ac:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <xTimerQueue>
    37b0:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <xTimerQueue+0x1>
    37b4:	89 2b       	or	r24, r25
    37b6:	e9 f4       	brne	.+58     	; 0x37f2 <prvCheckForValidListAndQueue+0x4c>
    37b8:	8f ee       	ldi	r24, 0xEF	; 239
    37ba:	97 e1       	ldi	r25, 0x17	; 23
    37bc:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    37c0:	84 ee       	ldi	r24, 0xE4	; 228
    37c2:	97 e1       	ldi	r25, 0x17	; 23
    37c4:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    37c8:	8f ee       	ldi	r24, 0xEF	; 239
    37ca:	97 e1       	ldi	r25, 0x17	; 23
    37cc:	90 93 e3 17 	sts	0x17E3, r25	; 0x8017e3 <pxCurrentTimerList+0x1>
    37d0:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <pxCurrentTimerList>
    37d4:	84 ee       	ldi	r24, 0xE4	; 228
    37d6:	97 e1       	ldi	r25, 0x17	; 23
    37d8:	90 93 e1 17 	sts	0x17E1, r25	; 0x8017e1 <pxOverflowTimerList+0x1>
    37dc:	80 93 e0 17 	sts	0x17E0, r24	; 0x8017e0 <pxOverflowTimerList>
    37e0:	40 e0       	ldi	r20, 0x00	; 0
    37e2:	67 e0       	ldi	r22, 0x07	; 7
    37e4:	8a e0       	ldi	r24, 0x0A	; 10
    37e6:	0e 94 4a 09 	call	0x1294	; 0x1294 <xQueueGenericCreate>
    37ea:	90 93 df 17 	sts	0x17DF, r25	; 0x8017df <xTimerQueue+0x1>
    37ee:	80 93 de 17 	sts	0x17DE, r24	; 0x8017de <xTimerQueue>
    37f2:	0f 90       	pop	r0
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	08 95       	ret

000037f8 <xTimerCreateTimerTask>:
    37f8:	ef 92       	push	r14
    37fa:	ff 92       	push	r15
    37fc:	0f 93       	push	r16
    37fe:	d3 df       	rcall	.-90     	; 0x37a6 <prvCheckForValidListAndQueue>
    3800:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <xTimerQueue>
    3804:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <xTimerQueue+0x1>
    3808:	89 2b       	or	r24, r25
    380a:	91 f0       	breq	.+36     	; 0x3830 <xTimerCreateTimerTask+0x38>
    380c:	0f 2e       	mov	r0, r31
    380e:	fc ed       	ldi	r31, 0xDC	; 220
    3810:	ef 2e       	mov	r14, r31
    3812:	f7 e1       	ldi	r31, 0x17	; 23
    3814:	ff 2e       	mov	r15, r31
    3816:	f0 2d       	mov	r31, r0
    3818:	03 e0       	ldi	r16, 0x03	; 3
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	40 ec       	ldi	r20, 0xC0	; 192
    3820:	50 e0       	ldi	r21, 0x00	; 0
    3822:	60 e8       	ldi	r22, 0x80	; 128
    3824:	73 e0       	ldi	r23, 0x03	; 3
    3826:	88 e5       	ldi	r24, 0x58	; 88
    3828:	91 e0       	ldi	r25, 0x01	; 1
    382a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
    382e:	01 c0       	rjmp	.+2      	; 0x3832 <xTimerCreateTimerTask+0x3a>
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	0f 91       	pop	r16
    3834:	ff 90       	pop	r15
    3836:	ef 90       	pop	r14
    3838:	08 95       	ret

0000383a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    383a:	8f 92       	push	r8
    383c:	9f 92       	push	r9
    383e:	af 92       	push	r10
    3840:	bf 92       	push	r11
    3842:	cf 92       	push	r12
    3844:	df 92       	push	r13
    3846:	ef 92       	push	r14
    3848:	ff 92       	push	r15
    384a:	0f 93       	push	r16
    384c:	1f 93       	push	r17
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	27 97       	sbiw	r28, 0x07	; 7
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    3862:	e0 91 de 17 	lds	r30, 0x17DE	; 0x8017de <xTimerQueue>
    3866:	f0 91 df 17 	lds	r31, 0x17DF	; 0x8017df <xTimerQueue+0x1>
    386a:	30 97       	sbiw	r30, 0x00	; 0
    386c:	81 f1       	breq	.+96     	; 0x38ce <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    386e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3870:	2a 83       	std	Y+2, r18	; 0x02
    3872:	3b 83       	std	Y+3, r19	; 0x03
    3874:	4c 83       	std	Y+4, r20	; 0x04
    3876:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3878:	9f 83       	std	Y+7, r25	; 0x07
    387a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    387c:	66 30       	cpi	r22, 0x06	; 6
    387e:	f4 f4       	brge	.+60     	; 0x38bc <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3880:	c3 da       	rcall	.-2682   	; 0x2e08 <xTaskGetSchedulerState>
    3882:	82 30       	cpi	r24, 0x02	; 2
    3884:	69 f4       	brne	.+26     	; 0x38a0 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3886:	00 e0       	ldi	r16, 0x00	; 0
    3888:	a7 01       	movw	r20, r14
    388a:	96 01       	movw	r18, r12
    388c:	be 01       	movw	r22, r28
    388e:	6f 5f       	subi	r22, 0xFF	; 255
    3890:	7f 4f       	sbci	r23, 0xFF	; 255
    3892:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <xTimerQueue>
    3896:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <xTimerQueue+0x1>
    389a:	0e 94 6d 09 	call	0x12da	; 0x12da <xQueueGenericSend>
    389e:	18 c0       	rjmp	.+48     	; 0x38d0 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    38a0:	00 e0       	ldi	r16, 0x00	; 0
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	a9 01       	movw	r20, r18
    38a8:	be 01       	movw	r22, r28
    38aa:	6f 5f       	subi	r22, 0xFF	; 255
    38ac:	7f 4f       	sbci	r23, 0xFF	; 255
    38ae:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <xTimerQueue>
    38b2:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <xTimerQueue+0x1>
    38b6:	0e 94 6d 09 	call	0x12da	; 0x12da <xQueueGenericSend>
    38ba:	0a c0       	rjmp	.+20     	; 0x38d0 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	a8 01       	movw	r20, r16
    38c0:	be 01       	movw	r22, r28
    38c2:	6f 5f       	subi	r22, 0xFF	; 255
    38c4:	7f 4f       	sbci	r23, 0xFF	; 255
    38c6:	cf 01       	movw	r24, r30
    38c8:	0e 94 1d 0a 	call	0x143a	; 0x143a <xQueueGenericSendFromISR>
    38cc:	01 c0       	rjmp	.+2      	; 0x38d0 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    38ce:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    38d0:	27 96       	adiw	r28, 0x07	; 7
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	1f 91       	pop	r17
    38e2:	0f 91       	pop	r16
    38e4:	ff 90       	pop	r15
    38e6:	ef 90       	pop	r14
    38e8:	df 90       	pop	r13
    38ea:	cf 90       	pop	r12
    38ec:	bf 90       	pop	r11
    38ee:	af 90       	pop	r10
    38f0:	9f 90       	pop	r9
    38f2:	8f 90       	pop	r8
    38f4:	08 95       	ret

000038f6 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    38f6:	8f 92       	push	r8
    38f8:	9f 92       	push	r9
    38fa:	af 92       	push	r10
    38fc:	bf 92       	push	r11
    38fe:	cf 92       	push	r12
    3900:	df 92       	push	r13
    3902:	ef 92       	push	r14
    3904:	ff 92       	push	r15
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    390e:	3b c0       	rjmp	.+118    	; 0x3986 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3910:	07 80       	ldd	r0, Z+7	; 0x07
    3912:	f0 85       	ldd	r31, Z+8	; 0x08
    3914:	e0 2d       	mov	r30, r0
    3916:	80 80       	ld	r8, Z
    3918:	91 80       	ldd	r9, Z+1	; 0x01
    391a:	a2 80       	ldd	r10, Z+2	; 0x02
    391c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    391e:	c0 85       	ldd	r28, Z+8	; 0x08
    3920:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3922:	8e 01       	movw	r16, r28
    3924:	0e 5f       	subi	r16, 0xFE	; 254
    3926:	1f 4f       	sbci	r17, 0xFF	; 255
    3928:	c8 01       	movw	r24, r16
    392a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    392e:	ec 89       	ldd	r30, Y+20	; 0x14
    3930:	fd 89       	ldd	r31, Y+21	; 0x15
    3932:	ce 01       	movw	r24, r28
    3934:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3936:	8e 89       	ldd	r24, Y+22	; 0x16
    3938:	82 ff       	sbrs	r24, 2
    393a:	25 c0       	rjmp	.+74     	; 0x3986 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    393c:	8e 85       	ldd	r24, Y+14	; 0x0e
    393e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3940:	a8 89       	ldd	r26, Y+16	; 0x10
    3942:	b9 89       	ldd	r27, Y+17	; 0x11
    3944:	88 0d       	add	r24, r8
    3946:	99 1d       	adc	r25, r9
    3948:	aa 1d       	adc	r26, r10
    394a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    394c:	88 16       	cp	r8, r24
    394e:	99 06       	cpc	r9, r25
    3950:	aa 06       	cpc	r10, r26
    3952:	bb 06       	cpc	r11, r27
    3954:	70 f4       	brcc	.+28     	; 0x3972 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3956:	8a 83       	std	Y+2, r24	; 0x02
    3958:	9b 83       	std	Y+3, r25	; 0x03
    395a:	ac 83       	std	Y+4, r26	; 0x04
    395c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    395e:	db 87       	std	Y+11, r29	; 0x0b
    3960:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3962:	b8 01       	movw	r22, r16
    3964:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <pxCurrentTimerList>
    3968:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <pxCurrentTimerList+0x1>
    396c:	0e 94 9c 06 	call	0xd38	; 0xd38 <vListInsert>
    3970:	0a c0       	rjmp	.+20     	; 0x3986 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3972:	c1 2c       	mov	r12, r1
    3974:	d1 2c       	mov	r13, r1
    3976:	76 01       	movw	r14, r12
    3978:	00 e0       	ldi	r16, 0x00	; 0
    397a:	10 e0       	ldi	r17, 0x00	; 0
    397c:	a5 01       	movw	r20, r10
    397e:	94 01       	movw	r18, r8
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	ce 01       	movw	r24, r28
    3984:	5a df       	rcall	.-332    	; 0x383a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3986:	e0 91 e2 17 	lds	r30, 0x17E2	; 0x8017e2 <pxCurrentTimerList>
    398a:	f0 91 e3 17 	lds	r31, 0x17E3	; 0x8017e3 <pxCurrentTimerList+0x1>
    398e:	80 81       	ld	r24, Z
    3990:	81 11       	cpse	r24, r1
    3992:	be cf       	rjmp	.-132    	; 0x3910 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3994:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <pxOverflowTimerList>
    3998:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <pxOverflowTimerList+0x1>
    399c:	90 93 e3 17 	sts	0x17E3, r25	; 0x8017e3 <pxCurrentTimerList+0x1>
    39a0:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    39a4:	f0 93 e1 17 	sts	0x17E1, r31	; 0x8017e1 <pxOverflowTimerList+0x1>
    39a8:	e0 93 e0 17 	sts	0x17E0, r30	; 0x8017e0 <pxOverflowTimerList>
    }
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	df 90       	pop	r13
    39ba:	cf 90       	pop	r12
    39bc:	bf 90       	pop	r11
    39be:	af 90       	pop	r10
    39c0:	9f 90       	pop	r9
    39c2:	8f 90       	pop	r8
    39c4:	08 95       	ret

000039c6 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    39c6:	cf 92       	push	r12
    39c8:	df 92       	push	r13
    39ca:	ef 92       	push	r14
    39cc:	ff 92       	push	r15
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    39d4:	0e 94 87 11 	call	0x230e	; 0x230e <xTaskGetTickCount>
    39d8:	6b 01       	movw	r12, r22
    39da:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    39dc:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <xLastTime.2436>
    39e0:	90 91 d9 17 	lds	r25, 0x17D9	; 0x8017d9 <xLastTime.2436+0x1>
    39e4:	a0 91 da 17 	lds	r26, 0x17DA	; 0x8017da <xLastTime.2436+0x2>
    39e8:	b0 91 db 17 	lds	r27, 0x17DB	; 0x8017db <xLastTime.2436+0x3>
    39ec:	c8 16       	cp	r12, r24
    39ee:	d9 06       	cpc	r13, r25
    39f0:	ea 06       	cpc	r14, r26
    39f2:	fb 06       	cpc	r15, r27
    39f4:	20 f4       	brcc	.+8      	; 0x39fe <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    39f6:	7f df       	rcall	.-258    	; 0x38f6 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	88 83       	st	Y, r24
    39fc:	01 c0       	rjmp	.+2      	; 0x3a00 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    39fe:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3a00:	c0 92 d8 17 	sts	0x17D8, r12	; 0x8017d8 <xLastTime.2436>
    3a04:	d0 92 d9 17 	sts	0x17D9, r13	; 0x8017d9 <xLastTime.2436+0x1>
    3a08:	e0 92 da 17 	sts	0x17DA, r14	; 0x8017da <xLastTime.2436+0x2>
    3a0c:	f0 92 db 17 	sts	0x17DB, r15	; 0x8017db <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3a10:	c7 01       	movw	r24, r14
    3a12:	b6 01       	movw	r22, r12
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	ff 90       	pop	r15
    3a1a:	ef 90       	pop	r14
    3a1c:	df 90       	pop	r13
    3a1e:	cf 90       	pop	r12
    3a20:	08 95       	ret

00003a22 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3a22:	4f 92       	push	r4
    3a24:	5f 92       	push	r5
    3a26:	6f 92       	push	r6
    3a28:	7f 92       	push	r7
    3a2a:	8f 92       	push	r8
    3a2c:	9f 92       	push	r9
    3a2e:	af 92       	push	r10
    3a30:	bf 92       	push	r11
    3a32:	cf 92       	push	r12
    3a34:	df 92       	push	r13
    3a36:	ef 92       	push	r14
    3a38:	ff 92       	push	r15
    3a3a:	0f 93       	push	r16
    3a3c:	1f 93       	push	r17
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
    3a42:	4b 01       	movw	r8, r22
    3a44:	5c 01       	movw	r10, r24
    3a46:	29 01       	movw	r4, r18
    3a48:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3a4a:	e0 91 e2 17 	lds	r30, 0x17E2	; 0x8017e2 <pxCurrentTimerList>
    3a4e:	f0 91 e3 17 	lds	r31, 0x17E3	; 0x8017e3 <pxCurrentTimerList+0x1>
    3a52:	07 80       	ldd	r0, Z+7	; 0x07
    3a54:	f0 85       	ldd	r31, Z+8	; 0x08
    3a56:	e0 2d       	mov	r30, r0
    3a58:	c0 85       	ldd	r28, Z+8	; 0x08
    3a5a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a5c:	ce 01       	movw	r24, r28
    3a5e:	02 96       	adiw	r24, 0x02	; 2
    3a60:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3a64:	8e 89       	ldd	r24, Y+22	; 0x16
    3a66:	82 ff       	sbrs	r24, 2
    3a68:	1b c0       	rjmp	.+54     	; 0x3aa0 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3a6a:	4e 85       	ldd	r20, Y+14	; 0x0e
    3a6c:	5f 85       	ldd	r21, Y+15	; 0x0f
    3a6e:	68 89       	ldd	r22, Y+16	; 0x10
    3a70:	79 89       	ldd	r23, Y+17	; 0x11
    3a72:	48 0d       	add	r20, r8
    3a74:	59 1d       	adc	r21, r9
    3a76:	6a 1d       	adc	r22, r10
    3a78:	7b 1d       	adc	r23, r11
    3a7a:	75 01       	movw	r14, r10
    3a7c:	64 01       	movw	r12, r8
    3a7e:	93 01       	movw	r18, r6
    3a80:	82 01       	movw	r16, r4
    3a82:	ce 01       	movw	r24, r28
    3a84:	47 de       	rcall	.-882    	; 0x3714 <prvInsertTimerInActiveList>
    3a86:	88 23       	and	r24, r24
    3a88:	69 f0       	breq	.+26     	; 0x3aa4 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3a8a:	c1 2c       	mov	r12, r1
    3a8c:	d1 2c       	mov	r13, r1
    3a8e:	76 01       	movw	r14, r12
    3a90:	00 e0       	ldi	r16, 0x00	; 0
    3a92:	10 e0       	ldi	r17, 0x00	; 0
    3a94:	a5 01       	movw	r20, r10
    3a96:	94 01       	movw	r18, r8
    3a98:	60 e0       	ldi	r22, 0x00	; 0
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	ce de       	rcall	.-612    	; 0x383a <xTimerGenericCommand>
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3aa0:	8e 7f       	andi	r24, 0xFE	; 254
    3aa2:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3aa4:	ec 89       	ldd	r30, Y+20	; 0x14
    3aa6:	fd 89       	ldd	r31, Y+21	; 0x15
    3aa8:	ce 01       	movw	r24, r28
    3aaa:	19 95       	eicall
    }
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	df 90       	pop	r13
    3aba:	cf 90       	pop	r12
    3abc:	bf 90       	pop	r11
    3abe:	af 90       	pop	r10
    3ac0:	9f 90       	pop	r9
    3ac2:	8f 90       	pop	r8
    3ac4:	7f 90       	pop	r7
    3ac6:	6f 90       	pop	r6
    3ac8:	5f 90       	pop	r5
    3aca:	4f 90       	pop	r4
    3acc:	08 95       	ret

00003ace <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3ace:	8f 92       	push	r8
    3ad0:	9f 92       	push	r9
    3ad2:	af 92       	push	r10
    3ad4:	bf 92       	push	r11
    3ad6:	cf 92       	push	r12
    3ad8:	df 92       	push	r13
    3ada:	ef 92       	push	r14
    3adc:	ff 92       	push	r15
    3ade:	1f 93       	push	r17
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	1f 92       	push	r1
    3ae6:	cd b7       	in	r28, 0x3d	; 61
    3ae8:	de b7       	in	r29, 0x3e	; 62
    3aea:	6b 01       	movw	r12, r22
    3aec:	7c 01       	movw	r14, r24
    3aee:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3af0:	0e 94 81 11 	call	0x2302	; 0x2302 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3af4:	ce 01       	movw	r24, r28
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	66 df       	rcall	.-308    	; 0x39c6 <prvSampleTimeNow>
    3afa:	4b 01       	movw	r8, r22
    3afc:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	81 11       	cpse	r24, r1
    3b02:	2d c0       	rjmp	.+90     	; 0x3b5e <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3b04:	11 11       	cpse	r17, r1
    3b06:	0d c0       	rjmp	.+26     	; 0x3b22 <prvProcessTimerOrBlockTask+0x54>
    3b08:	8c 14       	cp	r8, r12
    3b0a:	9d 04       	cpc	r9, r13
    3b0c:	ae 04       	cpc	r10, r14
    3b0e:	bf 04       	cpc	r11, r15
    3b10:	40 f0       	brcs	.+16     	; 0x3b22 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3b12:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3b16:	a5 01       	movw	r20, r10
    3b18:	94 01       	movw	r18, r8
    3b1a:	c7 01       	movw	r24, r14
    3b1c:	b6 01       	movw	r22, r12
    3b1e:	81 df       	rcall	.-254    	; 0x3a22 <prvProcessExpiredTimer>
    3b20:	20 c0       	rjmp	.+64     	; 0x3b62 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3b22:	11 23       	and	r17, r17
    3b24:	41 f0       	breq	.+16     	; 0x3b36 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3b26:	e0 91 e0 17 	lds	r30, 0x17E0	; 0x8017e0 <pxOverflowTimerList>
    3b2a:	f0 91 e1 17 	lds	r31, 0x17E1	; 0x8017e1 <pxOverflowTimerList+0x1>
    3b2e:	80 81       	ld	r24, Z
    3b30:	11 e0       	ldi	r17, 0x01	; 1
    3b32:	81 11       	cpse	r24, r1
    3b34:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3b36:	b7 01       	movw	r22, r14
    3b38:	a6 01       	movw	r20, r12
    3b3a:	48 19       	sub	r20, r8
    3b3c:	59 09       	sbc	r21, r9
    3b3e:	6a 09       	sbc	r22, r10
    3b40:	7b 09       	sbc	r23, r11
    3b42:	21 2f       	mov	r18, r17
    3b44:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <xTimerQueue>
    3b48:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <xTimerQueue+0x1>
    3b4c:	0e 94 98 0b 	call	0x1730	; 0x1730 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3b50:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>
    3b54:	81 11       	cpse	r24, r1
    3b56:	05 c0       	rjmp	.+10     	; 0x3b62 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    3b58:	0e 94 55 07 	call	0xeaa	; 0xeaa <vPortYield>
    3b5c:	02 c0       	rjmp	.+4      	; 0x3b62 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    3b5e:	0e 94 c1 12 	call	0x2582	; 0x2582 <xTaskResumeAll>
            }
        }
    }
    3b62:	0f 90       	pop	r0
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	ff 90       	pop	r15
    3b6c:	ef 90       	pop	r14
    3b6e:	df 90       	pop	r13
    3b70:	cf 90       	pop	r12
    3b72:	bf 90       	pop	r11
    3b74:	af 90       	pop	r10
    3b76:	9f 90       	pop	r9
    3b78:	8f 90       	pop	r8
    3b7a:	08 95       	ret

00003b7c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3b7c:	af 92       	push	r10
    3b7e:	bf 92       	push	r11
    3b80:	cf 92       	push	r12
    3b82:	df 92       	push	r13
    3b84:	ef 92       	push	r14
    3b86:	ff 92       	push	r15
    3b88:	0f 93       	push	r16
    3b8a:	1f 93       	push	r17
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
    3b94:	28 97       	sbiw	r28, 0x08	; 8
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	f8 94       	cli
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	0f be       	out	0x3f, r0	; 63
    3b9e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3ba0:	82 c0       	rjmp	.+260    	; 0x3ca6 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	88 23       	and	r24, r24
    3ba6:	0c f4       	brge	.+2      	; 0x3baa <prvProcessReceivedCommands+0x2e>
    3ba8:	7e c0       	rjmp	.+252    	; 0x3ca6 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3baa:	ae 80       	ldd	r10, Y+6	; 0x06
    3bac:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3bae:	d5 01       	movw	r26, r10
    3bb0:	1c 96       	adiw	r26, 0x0c	; 12
    3bb2:	8d 91       	ld	r24, X+
    3bb4:	9c 91       	ld	r25, X
    3bb6:	1d 97       	sbiw	r26, 0x0d	; 13
    3bb8:	89 2b       	or	r24, r25
    3bba:	21 f0       	breq	.+8      	; 0x3bc4 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bbc:	c5 01       	movw	r24, r10
    3bbe:	02 96       	adiw	r24, 0x02	; 2
    3bc0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3bc4:	ce 01       	movw	r24, r28
    3bc6:	08 96       	adiw	r24, 0x08	; 8
    3bc8:	fe de       	rcall	.-516    	; 0x39c6 <prvSampleTimeNow>
    3bca:	8b 01       	movw	r16, r22
    3bcc:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3bce:	e9 81       	ldd	r30, Y+1	; 0x01
    3bd0:	0e 2e       	mov	r0, r30
    3bd2:	00 0c       	add	r0, r0
    3bd4:	ff 0b       	sbc	r31, r31
    3bd6:	ea 30       	cpi	r30, 0x0A	; 10
    3bd8:	f1 05       	cpc	r31, r1
    3bda:	08 f0       	brcs	.+2      	; 0x3bde <prvProcessReceivedCommands+0x62>
    3bdc:	64 c0       	rjmp	.+200    	; 0x3ca6 <prvProcessReceivedCommands+0x12a>
    3bde:	88 27       	eor	r24, r24
    3be0:	ee 58       	subi	r30, 0x8E	; 142
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	8f 4f       	sbci	r24, 0xFF	; 255
    3be6:	0c 94 70 34 	jmp	0x68e0	; 0x68e0 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3bea:	f5 01       	movw	r30, r10
    3bec:	86 89       	ldd	r24, Z+22	; 0x16
    3bee:	81 60       	ori	r24, 0x01	; 1
    3bf0:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3bf2:	ca 80       	ldd	r12, Y+2	; 0x02
    3bf4:	db 80       	ldd	r13, Y+3	; 0x03
    3bf6:	ec 80       	ldd	r14, Y+4	; 0x04
    3bf8:	fd 80       	ldd	r15, Y+5	; 0x05
    3bfa:	46 85       	ldd	r20, Z+14	; 0x0e
    3bfc:	57 85       	ldd	r21, Z+15	; 0x0f
    3bfe:	60 89       	ldd	r22, Z+16	; 0x10
    3c00:	71 89       	ldd	r23, Z+17	; 0x11
    3c02:	4c 0d       	add	r20, r12
    3c04:	5d 1d       	adc	r21, r13
    3c06:	6e 1d       	adc	r22, r14
    3c08:	7f 1d       	adc	r23, r15
    3c0a:	c5 01       	movw	r24, r10
    3c0c:	83 dd       	rcall	.-1274   	; 0x3714 <prvInsertTimerInActiveList>
    3c0e:	88 23       	and	r24, r24
    3c10:	09 f4       	brne	.+2      	; 0x3c14 <prvProcessReceivedCommands+0x98>
    3c12:	49 c0       	rjmp	.+146    	; 0x3ca6 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c14:	d5 01       	movw	r26, r10
    3c16:	54 96       	adiw	r26, 0x14	; 20
    3c18:	ed 91       	ld	r30, X+
    3c1a:	fc 91       	ld	r31, X
    3c1c:	55 97       	sbiw	r26, 0x15	; 21
    3c1e:	c5 01       	movw	r24, r10
    3c20:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c22:	f5 01       	movw	r30, r10
    3c24:	86 89       	ldd	r24, Z+22	; 0x16
    3c26:	82 ff       	sbrs	r24, 2
    3c28:	3e c0       	rjmp	.+124    	; 0x3ca6 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3c2a:	4a 81       	ldd	r20, Y+2	; 0x02
    3c2c:	5b 81       	ldd	r21, Y+3	; 0x03
    3c2e:	6c 81       	ldd	r22, Y+4	; 0x04
    3c30:	7d 81       	ldd	r23, Y+5	; 0x05
    3c32:	86 85       	ldd	r24, Z+14	; 0x0e
    3c34:	97 85       	ldd	r25, Z+15	; 0x0f
    3c36:	a0 89       	ldd	r26, Z+16	; 0x10
    3c38:	b1 89       	ldd	r27, Z+17	; 0x11
    3c3a:	9a 01       	movw	r18, r20
    3c3c:	ab 01       	movw	r20, r22
    3c3e:	28 0f       	add	r18, r24
    3c40:	39 1f       	adc	r19, r25
    3c42:	4a 1f       	adc	r20, r26
    3c44:	5b 1f       	adc	r21, r27
    3c46:	c1 2c       	mov	r12, r1
    3c48:	d1 2c       	mov	r13, r1
    3c4a:	76 01       	movw	r14, r12
    3c4c:	00 e0       	ldi	r16, 0x00	; 0
    3c4e:	10 e0       	ldi	r17, 0x00	; 0
    3c50:	60 e0       	ldi	r22, 0x00	; 0
    3c52:	c5 01       	movw	r24, r10
    3c54:	f2 dd       	rcall	.-1052   	; 0x383a <xTimerGenericCommand>
    3c56:	27 c0       	rjmp	.+78     	; 0x3ca6 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3c58:	d5 01       	movw	r26, r10
    3c5a:	56 96       	adiw	r26, 0x16	; 22
    3c5c:	8c 91       	ld	r24, X
    3c5e:	56 97       	sbiw	r26, 0x16	; 22
    3c60:	8e 7f       	andi	r24, 0xFE	; 254
    3c62:	56 96       	adiw	r26, 0x16	; 22
    3c64:	8c 93       	st	X, r24
                        break;
    3c66:	1f c0       	rjmp	.+62     	; 0x3ca6 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3c68:	f5 01       	movw	r30, r10
    3c6a:	86 89       	ldd	r24, Z+22	; 0x16
    3c6c:	81 60       	ori	r24, 0x01	; 1
    3c6e:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3c70:	4a 81       	ldd	r20, Y+2	; 0x02
    3c72:	5b 81       	ldd	r21, Y+3	; 0x03
    3c74:	6c 81       	ldd	r22, Y+4	; 0x04
    3c76:	7d 81       	ldd	r23, Y+5	; 0x05
    3c78:	46 87       	std	Z+14, r20	; 0x0e
    3c7a:	57 87       	std	Z+15, r21	; 0x0f
    3c7c:	60 8b       	std	Z+16, r22	; 0x10
    3c7e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3c80:	40 0f       	add	r20, r16
    3c82:	51 1f       	adc	r21, r17
    3c84:	62 1f       	adc	r22, r18
    3c86:	73 1f       	adc	r23, r19
    3c88:	68 01       	movw	r12, r16
    3c8a:	79 01       	movw	r14, r18
    3c8c:	c5 01       	movw	r24, r10
    3c8e:	42 dd       	rcall	.-1404   	; 0x3714 <prvInsertTimerInActiveList>
                        break;
    3c90:	0a c0       	rjmp	.+20     	; 0x3ca6 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3c92:	f5 01       	movw	r30, r10
    3c94:	86 89       	ldd	r24, Z+22	; 0x16
    3c96:	81 fd       	sbrc	r24, 1
    3c98:	04 c0       	rjmp	.+8      	; 0x3ca2 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3c9a:	c5 01       	movw	r24, r10
    3c9c:	0e 94 4a 06 	call	0xc94	; 0xc94 <vPortFree>
    3ca0:	02 c0       	rjmp	.+4      	; 0x3ca6 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3ca2:	8e 7f       	andi	r24, 0xFE	; 254
    3ca4:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	a9 01       	movw	r20, r18
    3cac:	be 01       	movw	r22, r28
    3cae:	6f 5f       	subi	r22, 0xFF	; 255
    3cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb2:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <xTimerQueue>
    3cb6:	90 91 df 17 	lds	r25, 0x17DF	; 0x8017df <xTimerQueue+0x1>
    3cba:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <xQueueReceive>
    3cbe:	81 11       	cpse	r24, r1
    3cc0:	70 cf       	rjmp	.-288    	; 0x3ba2 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3cc2:	28 96       	adiw	r28, 0x08	; 8
    3cc4:	0f b6       	in	r0, 0x3f	; 63
    3cc6:	f8 94       	cli
    3cc8:	de bf       	out	0x3e, r29	; 62
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	cd bf       	out	0x3d, r28	; 61
    3cce:	df 91       	pop	r29
    3cd0:	cf 91       	pop	r28
    3cd2:	1f 91       	pop	r17
    3cd4:	0f 91       	pop	r16
    3cd6:	ff 90       	pop	r15
    3cd8:	ef 90       	pop	r14
    3cda:	df 90       	pop	r13
    3cdc:	cf 90       	pop	r12
    3cde:	bf 90       	pop	r11
    3ce0:	af 90       	pop	r10
    3ce2:	08 95       	ret

00003ce4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3ce4:	08 95       	ret

00003ce6 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3ce6:	84 b1       	in	r24, 0x04	; 4
    3ce8:	80 68       	ori	r24, 0x80	; 128
    3cea:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3cec:	85 b1       	in	r24, 0x05	; 5
    3cee:	80 68       	ori	r24, 0x80	; 128
    3cf0:	85 b9       	out	0x05, r24	; 5
    3cf2:	08 95       	ret

00003cf4 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3cf4:	83 b1       	in	r24, 0x03	; 3
    3cf6:	80 68       	ori	r24, 0x80	; 128
    3cf8:	83 b9       	out	0x03, r24	; 3
    3cfa:	08 95       	ret

00003cfc <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3cfc:	f4 df       	rcall	.-24     	; 0x3ce6 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cfe:	2f ef       	ldi	r18, 0xFF	; 255
    3d00:	80 e7       	ldi	r24, 0x70	; 112
    3d02:	92 e0       	ldi	r25, 0x02	; 2
    3d04:	21 50       	subi	r18, 0x01	; 1
    3d06:	80 40       	sbci	r24, 0x00	; 0
    3d08:	90 40       	sbci	r25, 0x00	; 0
    3d0a:	e1 f7       	brne	.-8      	; 0x3d04 <vApplicationMallocFailedHook+0x8>
    3d0c:	00 c0       	rjmp	.+0      	; 0x3d0e <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3d0e:	00 00       	nop
    3d10:	f1 df       	rcall	.-30     	; 0x3cf4 <prvBlinkMainLed>
    3d12:	f5 cf       	rjmp	.-22     	; 0x3cfe <vApplicationMallocFailedHook+0x2>

00003d14 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3d14:	e8 df       	rcall	.-48     	; 0x3ce6 <prvSetMainLedOn>
    3d16:	2f ef       	ldi	r18, 0xFF	; 255
    3d18:	87 ea       	ldi	r24, 0xA7	; 167
    3d1a:	91 e6       	ldi	r25, 0x61	; 97
    3d1c:	21 50       	subi	r18, 0x01	; 1
    3d1e:	80 40       	sbci	r24, 0x00	; 0
    3d20:	90 40       	sbci	r25, 0x00	; 0
    3d22:	e1 f7       	brne	.-8      	; 0x3d1c <vApplicationStackOverflowHook+0x8>
    3d24:	00 c0       	rjmp	.+0      	; 0x3d26 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3d26:	00 00       	nop
    3d28:	e5 df       	rcall	.-54     	; 0x3cf4 <prvBlinkMainLed>
    3d2a:	f5 cf       	rjmp	.-22     	; 0x3d16 <vApplicationStackOverflowHook+0x2>

00003d2c <set_temperature_percent>:
static uint16_t humidityPercent = 0;
static uint16_t CO2_PPM = 0;
static uint8_t status = 0;

void set_temperature_percent(int16_t temperature){
	temperaturePercent = temperature;
    3d2c:	90 93 00 18 	sts	0x1800, r25	; 0x801800 <temperaturePercent+0x1>
    3d30:	80 93 ff 17 	sts	0x17FF, r24	; 0x8017ff <temperaturePercent>
    3d34:	08 95       	ret

00003d36 <set_humidity_percent>:
}

void set_humidity_percent(uint16_t humidity){
	humidityPercent = humidity;
    3d36:	90 93 fe 17 	sts	0x17FE, r25	; 0x8017fe <humidityPercent+0x1>
    3d3a:	80 93 fd 17 	sts	0x17FD, r24	; 0x8017fd <humidityPercent>
    3d3e:	08 95       	ret

00003d40 <set_CO2_ppm>:
}

void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    3d40:	90 93 fc 17 	sts	0x17FC, r25	; 0x8017fc <CO2_PPM+0x1>
    3d44:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <CO2_PPM>
    3d48:	08 95       	ret

00003d4a <set_status>:
}

void set_status(uint8_t stat){
	status = stat;
    3d4a:	80 93 fa 17 	sts	0x17FA, r24	; 0x8017fa <status>
    3d4e:	08 95       	ret

00003d50 <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    3d50:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    3d52:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    3d54:	87 e0       	ldi	r24, 0x07	; 7
    3d56:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3d58:	80 91 ff 17 	lds	r24, 0x17FF	; 0x8017ff <temperaturePercent>
    3d5c:	90 91 00 18 	lds	r25, 0x1800	; 0x801800 <temperaturePercent+0x1>
    3d60:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    3d62:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3d64:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <humidityPercent>
    3d68:	90 91 fe 17 	lds	r25, 0x17FE	; 0x8017fe <humidityPercent+0x1>
    3d6c:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    3d6e:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    3d70:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <CO2_PPM>
    3d74:	90 91 fc 17 	lds	r25, 0x17FC	; 0x8017fc <CO2_PPM+0x1>
    3d78:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    3d7a:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    3d7c:	80 91 fa 17 	lds	r24, 0x17FA	; 0x8017fa <status>
    3d80:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    3d82:	cf 01       	movw	r24, r30
    3d84:	08 95       	ret

00003d86 <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    3d86:	90 93 02 18 	sts	0x1802, r25	; 0x801802 <lastCO2ppm+0x1>
    3d8a:	80 93 01 18 	sts	0x1801, r24	; 0x801801 <lastCO2ppm>
    3d8e:	08 95       	ret

00003d90 <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    3d90:	83 e0       	ldi	r24, 0x03	; 3
    3d92:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    3d96:	83 ec       	ldi	r24, 0xC3	; 195
    3d98:	9e e1       	ldi	r25, 0x1E	; 30
    3d9a:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <mh_z19_injectCallBack>
    3d9e:	08 95       	ret

00003da0 <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    3da0:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <mh_z19_takeMeassuring>
    3da4:	80 93 4c 19 	sts	0x194C, r24	; 0x80194c <rc>
	if (rc != MHZ19_OK)
    3da8:	88 23       	and	r24, r24
    3daa:	41 f0       	breq	.+16     	; 0x3dbc <CO2_measure+0x1c>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
    3dac:	88 e8       	ldi	r24, 0x88	; 136
    3dae:	93 e0       	ldi	r25, 0x03	; 3
    3db0:	9f 93       	push	r25
    3db2:	8f 93       	push	r24
    3db4:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	98 e1       	ldi	r25, 0x18	; 24
    3dc0:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <mh_z19_getCo2Ppm>
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	90 93 02 18 	sts	0x1802, r25	; 0x801802 <lastCO2ppm+0x1>
    3dca:	80 93 01 18 	sts	0x1801, r24	; 0x801801 <lastCO2ppm>
    3dce:	08 95       	ret

00003dd0 <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3dd0:	cc 24       	eor	r12, r12
    3dd2:	ca 94       	dec	r12
    3dd4:	dc 2c       	mov	r13, r12
    3dd6:	76 01       	movw	r14, r12
    3dd8:	01 e0       	ldi	r16, 0x01	; 1
    3dda:	21 e0       	ldi	r18, 0x01	; 1
    3ddc:	41 e0       	ldi	r20, 0x01	; 1
    3dde:	50 e0       	ldi	r21, 0x00	; 0
    3de0:	60 e0       	ldi	r22, 0x00	; 0
    3de2:	70 e0       	ldi	r23, 0x00	; 0
    3de4:	80 91 51 19 	lds	r24, 0x1951	; 0x801951 <measureEventGroup>
    3de8:	90 91 52 19 	lds	r25, 0x1952	; 0x801952 <measureEventGroup+0x1>
    3dec:	0e 94 00 04 	call	0x800	; 0x800 <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3df0:	60 ff       	sbrs	r22, 0
    3df2:	ee cf       	rjmp	.-36     	; 0x3dd0 <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    3df4:	d5 df       	rcall	.-86     	; 0x3da0 <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    3df6:	42 e0       	ldi	r20, 0x02	; 2
    3df8:	50 e0       	ldi	r21, 0x00	; 0
    3dfa:	60 e0       	ldi	r22, 0x00	; 0
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <dataReadyEventGroup>
    3e02:	90 91 50 19 	lds	r25, 0x1950	; 0x801950 <dataReadyEventGroup+0x1>
    3e06:	0e 94 a0 04 	call	0x940	; 0x940 <xEventGroupSetBits>
    3e0a:	e2 cf       	rjmp	.-60     	; 0x3dd0 <MeasureCo2Task>

00003e0c <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    3e0c:	80 91 01 18 	lds	r24, 0x1801	; 0x801801 <lastCO2ppm>
    3e10:	90 91 02 18 	lds	r25, 0x1802	; 0x801802 <lastCO2ppm+0x1>
    3e14:	08 95       	ret

00003e16 <create_CO2_sensor_task>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void create_CO2_sensor_task(UBaseType_t priority){
    3e16:	ef 92       	push	r14
    3e18:	ff 92       	push	r15
    3e1a:	0f 93       	push	r16
    3e1c:	08 2f       	mov	r16, r24
	
	//Initializing 
		CO2_createSensor();
    3e1e:	b8 df       	rcall	.-144    	; 0x3d90 <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    3e20:	e1 2c       	mov	r14, r1
    3e22:	f1 2c       	mov	r15, r1
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 ec       	ldi	r20, 0xC0	; 192
    3e2a:	50 e0       	ldi	r21, 0x00	; 0
    3e2c:	68 eb       	ldi	r22, 0xB8	; 184
    3e2e:	73 e0       	ldi	r23, 0x03	; 3
    3e30:	88 ee       	ldi	r24, 0xE8	; 232
    3e32:	9e e1       	ldi	r25, 0x1E	; 30
    3e34:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY + priority,
		NULL);
}
    3e38:	0f 91       	pop	r16
    3e3a:	ff 90       	pop	r15
    3e3c:	ef 90       	pop	r14
    3e3e:	08 95       	ret

00003e40 <initialise_TempHumSensor>:
void Temp_Hum_Main_Task(void *pvParameters);
void tempHumSensor_printReturnCode(hih8120_driverReturnCode_t rc);

void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    3e40:	67 d2       	rcall	.+1230   	; 0x4310 <hih8120_initialise>
    3e42:	88 23       	and	r24, r24
    3e44:	41 f0       	breq	.+16     	; 0x3e56 <initialise_TempHumSensor+0x16>
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{
		printf("Something went wrong while initialising tempHum sensor");
    3e46:	8a ec       	ldi	r24, 0xCA	; 202
    3e48:	93 e0       	ldi	r25, 0x03	; 3
    3e4a:	9f 93       	push	r25
    3e4c:	8f 93       	push	r24
    3e4e:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	08 95       	ret

00003e58 <create_TempHum_sensor_task>:
	}
}


void create_TempHum_sensor_task(UBaseType_t priority){
    3e58:	ef 92       	push	r14
    3e5a:	ff 92       	push	r15
    3e5c:	0f 93       	push	r16
    3e5e:	08 2f       	mov	r16, r24
	initialise_TempHumSensor();
    3e60:	ef df       	rcall	.-34     	; 0x3e40 <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    3e62:	e1 2c       	mov	r14, r1
    3e64:	f1 2c       	mov	r15, r1
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	40 ec       	ldi	r20, 0xC0	; 192
    3e6c:	50 e0       	ldi	r21, 0x00	; 0
    3e6e:	61 e0       	ldi	r22, 0x01	; 1
    3e70:	74 e0       	ldi	r23, 0x04	; 4
    3e72:	81 e7       	ldi	r24, 0x71	; 113
    3e74:	9f e1       	ldi	r25, 0x1F	; 31
    3e76:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
	
}
    3e7a:	0f 91       	pop	r16
    3e7c:	ff 90       	pop	r15
    3e7e:	ef 90       	pop	r14
    3e80:	08 95       	ret

00003e82 <tempHumSensor_printReturnCode>:
		case HIH8120_OK: returnCodeString = "HIH8120_OK";
		case HIH8120_OUT_OF_HEAP: returnCodeString = "HIH8120_OUT_OF_HEAP";
		case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED";
		case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY";
	}
	printf("RETURNCODE: %s \n", returnCodeString);
    3e82:	8d e0       	ldi	r24, 0x0D	; 13
    3e84:	94 e0       	ldi	r25, 0x04	; 4
    3e86:	9f 93       	push	r25
    3e88:	8f 93       	push	r24
    3e8a:	8e e1       	ldi	r24, 0x1E	; 30
    3e8c:	94 e0       	ldi	r25, 0x04	; 4
    3e8e:	9f 93       	push	r25
    3e90:	8f 93       	push	r24
    3e92:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
}
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	08 95       	ret

00003ea0 <measure_Temp_Hum>:
	
}

void measure_Temp_Hum(){
	
	if ( HIH8120_OK != hih8120_wakeup() )
    3ea0:	4f d2       	rcall	.+1182   	; 0x4340 <hih8120_wakeup>
    3ea2:	88 23       	and	r24, r24
    3ea4:	21 f0       	breq	.+8      	; 0x3eae <measure_Temp_Hum+0xe>
	{
		printf("Could not wake up temp hum sensor \n");
    3ea6:	8f e2       	ldi	r24, 0x2F	; 47
    3ea8:	94 e0       	ldi	r25, 0x04	; 4
    3eaa:	0e 94 5d 37 	call	0x6eba	; 0x6eba <puts>
		// Something went wrong
		// Investigate the return code further
	}

	vTaskDelay(pdMS_TO_TICKS(60));
    3eae:	63 e0       	ldi	r22, 0x03	; 3
    3eb0:	70 e0       	ldi	r23, 0x00	; 0
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0e 94 02 14 	call	0x2804	; 0x2804 <vTaskDelay>
	
	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
	if (measure_rc != HIH8120_OK)
    3eba:	57 d2       	rcall	.+1198   	; 0x436a <hih8120_measure>
	{
		tempHumSensor_printReturnCode(measure_rc);
    3ebc:	81 11       	cpse	r24, r1
    3ebe:	e1 df       	rcall	.-62     	; 0x3e82 <tempHumSensor_printReturnCode>
	}
	vTaskDelay(pdMS_TO_TICKS(50));
    3ec0:	63 e0       	ldi	r22, 0x03	; 3
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	0e 94 02 14 	call	0x2804	; 0x2804 <vTaskDelay>
	
	humidity = hih8120_getHumidityPercent_x10();
    3ecc:	74 d2       	rcall	.+1256   	; 0x43b6 <hih8120_getHumidityPercent_x10>
    3ece:	90 93 06 18 	sts	0x1806, r25	; 0x801806 <humidity+0x1>
    3ed2:	80 93 05 18 	sts	0x1805, r24	; 0x801805 <humidity>
	temperature = hih8120_getTemperature_x10();	
    3ed6:	95 d2       	rcall	.+1322   	; 0x4402 <hih8120_getTemperature_x10>
    3ed8:	90 93 04 18 	sts	0x1804, r25	; 0x801804 <temperature+0x1>
    3edc:	80 93 03 18 	sts	0x1803, r24	; 0x801803 <temperature>
    3ee0:	08 95       	ret

00003ee2 <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(void *pvParameters){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3ee2:	cc 24       	eor	r12, r12
    3ee4:	ca 94       	dec	r12
    3ee6:	dc 2c       	mov	r13, r12
    3ee8:	76 01       	movw	r14, r12
    3eea:	01 e0       	ldi	r16, 0x01	; 1
    3eec:	21 e0       	ldi	r18, 0x01	; 1
    3eee:	44 e0       	ldi	r20, 0x04	; 4
    3ef0:	50 e0       	ldi	r21, 0x00	; 0
    3ef2:	60 e0       	ldi	r22, 0x00	; 0
    3ef4:	70 e0       	ldi	r23, 0x00	; 0
    3ef6:	80 91 51 19 	lds	r24, 0x1951	; 0x801951 <measureEventGroup>
    3efa:	90 91 52 19 	lds	r25, 0x1952	; 0x801952 <measureEventGroup+0x1>
    3efe:	0e 94 00 04 	call	0x800	; 0x800 <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    3f02:	62 ff       	sbrs	r22, 2
    3f04:	ee cf       	rjmp	.-36     	; 0x3ee2 <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();			
    3f06:	cc df       	rcall	.-104    	; 0x3ea0 <measure_Temp_Hum>
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    3f08:	48 e0       	ldi	r20, 0x08	; 8
    3f0a:	50 e0       	ldi	r21, 0x00	; 0
    3f0c:	60 e0       	ldi	r22, 0x00	; 0
    3f0e:	70 e0       	ldi	r23, 0x00	; 0
    3f10:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <dataReadyEventGroup>
    3f14:	90 91 50 19 	lds	r25, 0x1950	; 0x801950 <dataReadyEventGroup+0x1>
    3f18:	0e 94 a0 04 	call	0x940	; 0x940 <xEventGroupSetBits>
    3f1c:	e2 cf       	rjmp	.-60     	; 0x3ee2 <Temp_Hum_Main_Task>

00003f1e <TempHumSensor_getTemp>:
	printf("RETURNCODE: %s \n", returnCodeString);
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    3f1e:	80 91 03 18 	lds	r24, 0x1803	; 0x801803 <temperature>
    3f22:	90 91 04 18 	lds	r25, 0x1804	; 0x801804 <temperature+0x1>
    3f26:	08 95       	ret

00003f28 <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    3f28:	80 91 05 18 	lds	r24, 0x1805	; 0x801805 <humidity>
    3f2c:	90 91 06 18 	lds	r25, 0x1806	; 0x801806 <humidity+0x1>
    3f30:	08 95       	ret

00003f32 <initialize_event_groups>:
MessageBufferHandle_t downlinkMessageBufferHandle;
SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    3f32:	0e 94 ed 03 	call	0x7da	; 0x7da <xEventGroupCreate>
    3f36:	90 93 50 19 	sts	0x1950, r25	; 0x801950 <dataReadyEventGroup+0x1>
    3f3a:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    3f3e:	0e 94 ed 03 	call	0x7da	; 0x7da <xEventGroupCreate>
    3f42:	90 93 52 19 	sts	0x1952, r25	; 0x801952 <measureEventGroup+0x1>
    3f46:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <measureEventGroup>
    3f4a:	08 95       	ret

00003f4c <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3f4c:	41 e0       	ldi	r20, 0x01	; 1
    3f4e:	60 e0       	ldi	r22, 0x00	; 0
    3f50:	70 e0       	ldi	r23, 0x00	; 0
    3f52:	8c e2       	ldi	r24, 0x2C	; 44
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <xStreamBufferGenericCreate>
    3f5a:	90 93 54 19 	sts	0x1954, r25	; 0x801954 <uplinkMessageBufferHandle+0x1>
    3f5e:	80 93 53 19 	sts	0x1953, r24	; 0x801953 <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    3f62:	89 2b       	or	r24, r25
    3f64:	21 f4       	brne	.+8      	; 0x3f6e <initialize_message_buffers+0x22>
		printf("Failed to create uplink message buffer.\n");
    3f66:	82 e5       	ldi	r24, 0x52	; 82
    3f68:	94 e0       	ldi	r25, 0x04	; 4
    3f6a:	0e 94 5d 37 	call	0x6eba	; 0x6eba <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3f6e:	41 e0       	ldi	r20, 0x01	; 1
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	70 e0       	ldi	r23, 0x00	; 0
    3f74:	8c e2       	ldi	r24, 0x2C	; 44
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <xStreamBufferGenericCreate>
    3f7c:	90 93 56 19 	sts	0x1956, r25	; 0x801956 <downlinkMessageBufferHandle+0x1>
    3f80:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    3f84:	89 2b       	or	r24, r25
    3f86:	21 f4       	brne	.+8      	; 0x3f90 <initialize_message_buffers+0x44>
		printf("Failed to create downlink message buffer.\n");
    3f88:	8a e7       	ldi	r24, 0x7A	; 122
    3f8a:	94 e0       	ldi	r25, 0x04	; 4
    3f8c:	0c 94 5d 37 	jmp	0x6eba	; 0x6eba <puts>
    3f90:	08 95       	ret

00003f92 <initialize_semaphore>:
	}
}

 void initialize_semaphore(){
    3f92:	0f 93       	push	r16
 	configSemaphore = xSemaphoreCreateMutex();
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	0e 94 11 0a 	call	0x1422	; 0x1422 <xQueueCreateMutex>
    3f9a:	90 93 4e 19 	sts	0x194E, r25	; 0x80194e <configSemaphore+0x1>
    3f9e:	80 93 4d 19 	sts	0x194D, r24	; 0x80194d <configSemaphore>
	 if(configSemaphore != NULL){
    3fa2:	00 97       	sbiw	r24, 0x00	; 0
    3fa4:	49 f0       	breq	.+18     	; 0x3fb8 <initialize_semaphore+0x26>
		 xSemaphoreGive(configSemaphore);
    3fa6:	00 e0       	ldi	r16, 0x00	; 0
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	a9 01       	movw	r20, r18
    3fae:	60 e0       	ldi	r22, 0x00	; 0
    3fb0:	70 e0       	ldi	r23, 0x00	; 0
    3fb2:	0e 94 6d 09 	call	0x12da	; 0x12da <xQueueGenericSend>
    3fb6:	08 c0       	rjmp	.+16     	; 0x3fc8 <initialize_semaphore+0x36>
	 }
	 else{
		 printf("Failed to create config semaphore");
    3fb8:	84 ea       	ldi	r24, 0xA4	; 164
    3fba:	94 e0       	ldi	r25, 0x04	; 4
    3fbc:	9f 93       	push	r25
    3fbe:	8f 93       	push	r24
    3fc0:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    3fc4:	0f 90       	pop	r0
    3fc6:	0f 90       	pop	r0
	 }
 }
    3fc8:	0f 91       	pop	r16
    3fca:	08 95       	ret

00003fcc <initialise_rc_servo>:
 */ 

#include "ServoController.h"

void initialise_rc_servo(){
	rc_servo_initialise();
    3fcc:	6d c7       	rjmp	.+3802   	; 0x4ea8 <rc_servo_initialise>
    3fce:	08 95       	ret

00003fd0 <servo_set_position>:
}
void servo_set_position(uint8_t servoNo, int8_t percent){
	rc_servo_setPosition(servoNo, percent);
    3fd0:	53 c7       	rjmp	.+3750   	; 0x4e78 <rc_servo_setPosition>
    3fd2:	08 95       	ret

00003fd4 <_lora_setup>:
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}

static void _lora_setup(void)
{
    3fd4:	0f 93       	push	r16
    3fd6:	1f 93       	push	r17
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	cd b7       	in	r28, 0x3d	; 61
    3fde:	de b7       	in	r29, 0x3e	; 62
    3fe0:	64 97       	sbiw	r28, 0x14	; 20
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	f8 94       	cli
    3fe6:	de bf       	out	0x3e, r29	; 62
    3fe8:	0f be       	out	0x3f, r0	; 63
    3fea:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	0e 94 81 2c 	call	0x5902	; 0x5902 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3ff2:	7f d3       	rcall	.+1790   	; 0x46f2 <lora_driver_rn2483FactoryReset>
    3ff4:	fb d5       	rcall	.+3062   	; 0x4bec <lora_driver_mapReturnCodeToText>
    3ff6:	9f 93       	push	r25
    3ff8:	8f 93       	push	r24
    3ffa:	86 ec       	ldi	r24, 0xC6	; 198
    3ffc:	94 e0       	ldi	r25, 0x04	; 4
    3ffe:	9f 93       	push	r25
    4000:	8f 93       	push	r24
    4002:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    4006:	f3 d4       	rcall	.+2534   	; 0x49ee <lora_driver_configureToEu868>
    4008:	f1 d5       	rcall	.+3042   	; 0x4bec <lora_driver_mapReturnCodeToText>
    400a:	9f 93       	push	r25
    400c:	8f 93       	push	r24
    400e:	89 ed       	ldi	r24, 0xD9	; 217
    4010:	94 e0       	ldi	r25, 0x04	; 4
    4012:	9f 93       	push	r25
    4014:	8f 93       	push	r24
    4016:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    401a:	8e 01       	movw	r16, r28
    401c:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    401e:	1f 4f       	sbci	r17, 0xFF	; 255
    4020:	c8 01       	movw	r24, r16
    4022:	79 d3       	rcall	.+1778   	; 0x4716 <lora_driver_getRn2483Hweui>
    4024:	e3 d5       	rcall	.+3014   	; 0x4bec <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    4026:	1f 93       	push	r17
    4028:	0f 93       	push	r16
    402a:	9f 93       	push	r25
    402c:	8f 93       	push	r24
    402e:	82 ef       	ldi	r24, 0xF2	; 242
    4030:	94 e0       	ldi	r25, 0x04	; 4
    4032:	9f 93       	push	r25
    4034:	8f 93       	push	r24
    4036:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    403a:	c8 01       	movw	r24, r16
    403c:	88 d3       	rcall	.+1808   	; 0x474e <lora_driver_setDeviceIdentifier>
    403e:	d6 d5       	rcall	.+2988   	; 0x4bec <lora_driver_mapReturnCodeToText>
    4040:	9f 93       	push	r25
    4042:	8f 93       	push	r24
    4044:	1f 93       	push	r17
    4046:	0f 93       	push	r16
    4048:	86 e0       	ldi	r24, 0x06	; 6
    404a:	95 e0       	ldi	r25, 0x05	; 5
    404c:	9f 93       	push	r25
    404e:	8f 93       	push	r24
    4050:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    4054:	a8 01       	movw	r20, r16
    4056:	6b e1       	ldi	r22, 0x1B	; 27
    4058:	75 e0       	ldi	r23, 0x05	; 5
    405a:	8c e3       	ldi	r24, 0x3C	; 60
    405c:	95 e0       	ldi	r25, 0x05	; 5
    405e:	a5 d5       	rcall	.+2890   	; 0x4baa <lora_driver_setOtaaIdentity>
    4060:	c5 d5       	rcall	.+2954   	; 0x4bec <lora_driver_mapReturnCodeToText>
    4062:	9f 93       	push	r25
    4064:	8f 93       	push	r24
    4066:	1f 93       	push	r17
    4068:	0f 93       	push	r16
    406a:	8b e1       	ldi	r24, 0x1B	; 27
    406c:	95 e0       	ldi	r25, 0x05	; 5
    406e:	9f 93       	push	r25
    4070:	8f 93       	push	r24
    4072:	8c e3       	ldi	r24, 0x3C	; 60
    4074:	95 e0       	ldi	r25, 0x05	; 5
    4076:	9f 93       	push	r25
    4078:	8f 93       	push	r24
    407a:	8d e4       	ldi	r24, 0x4D	; 77
    407c:	95 e0       	ldi	r25, 0x05	; 5
    407e:	9f 93       	push	r25
    4080:	8f 93       	push	r24
    4082:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    4086:	96 d3       	rcall	.+1836   	; 0x47b4 <lora_driver_saveMac>
    4088:	b1 d5       	rcall	.+2914   	; 0x4bec <lora_driver_mapReturnCodeToText>
    408a:	9f 93       	push	r25
    408c:	8f 93       	push	r24
    408e:	83 e8       	ldi	r24, 0x83	; 131
    4090:	95 e0       	ldi	r25, 0x05	; 5
    4092:	9f 93       	push	r25
    4094:	8f 93       	push	r24
    4096:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	80 d4       	rcall	.+2304   	; 0x49a8 <lora_driver_setAdaptiveDataRate>
    40a8:	a1 d5       	rcall	.+2882   	; 0x4bec <lora_driver_mapReturnCodeToText>
    40aa:	9f 93       	push	r25
    40ac:	8f 93       	push	r24
    40ae:	82 e9       	ldi	r24, 0x92	; 146
    40b0:	95 e0       	ldi	r25, 0x05	; 5
    40b2:	9f 93       	push	r25
    40b4:	8f 93       	push	r24
    40b6:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    40ba:	84 ef       	ldi	r24, 0xF4	; 244
    40bc:	91 e0       	ldi	r25, 0x01	; 1
    40be:	7f d4       	rcall	.+2302   	; 0x49be <lora_driver_setReceiveDelay>
    40c0:	95 d5       	rcall	.+2858   	; 0x4bec <lora_driver_mapReturnCodeToText>
    40c2:	9f 93       	push	r25
    40c4:	8f 93       	push	r24
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	8f 93       	push	r24
    40ca:	84 ef       	ldi	r24, 0xF4	; 244
    40cc:	8f 93       	push	r24
    40ce:	83 eb       	ldi	r24, 0xB3	; 179
    40d0:	95 e0       	ldi	r25, 0x05	; 5
    40d2:	9f 93       	push	r25
    40d4:	8f 93       	push	r24
    40d6:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    40da:	0f b6       	in	r0, 0x3f	; 63
    40dc:	f8 94       	cli
    40de:	de bf       	out	0x3e, r29	; 62
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    40e4:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	6b d3       	rcall	.+1750   	; 0x47c0 <lora_driver_join>
    40ea:	08 2f       	mov	r16, r24
    40ec:	7f d5       	rcall	.+2814   	; 0x4bec <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    40ee:	9f 93       	push	r25
    40f0:	8f 93       	push	r24
    40f2:	1f 92       	push	r1
    40f4:	1f 93       	push	r17
    40f6:	83 ed       	ldi	r24, 0xD3	; 211
    40f8:	95 e0       	ldi	r25, 0x05	; 5
    40fa:	9f 93       	push	r25
    40fc:	8f 93       	push	r24
    40fe:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	08 30       	cpi	r16, 0x08	; 8
    4110:	59 f0       	breq	.+22     	; 0x4128 <_lora_setup+0x154>
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    4118:	66 e3       	ldi	r22, 0x36	; 54
    411a:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	0e 94 02 14 	call	0x2804	; 0x2804 <vTaskDelay>
    4124:	11 50       	subi	r17, 0x01	; 1
    4126:	f9 f6       	brne	.-66     	; 0x40e6 <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    4128:	08 30       	cpi	r16, 0x08	; 8
    412a:	21 f4       	brne	.+8      	; 0x4134 <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	0e 94 c7 2c 	call	0x598e	; 0x598e <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    4132:	09 c0       	rjmp	.+18     	; 0x4146 <_lora_setup+0x172>
    4134:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    4136:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	0e 94 a4 2c 	call	0x5948	; 0x5948 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    4140:	0e 94 55 07 	call	0xeaa	; 0xeaa <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4144:	fd cf       	rjmp	.-6      	; 0x4140 <_lora_setup+0x16c>
    4146:	64 96       	adiw	r28, 0x14	; 20
    4148:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    414a:	f8 94       	cli
    414c:	de bf       	out	0x3e, r29	; 62
    414e:	0f be       	out	0x3f, r0	; 63
    4150:	cd bf       	out	0x3d, r28	; 61
    4152:	df 91       	pop	r29
    4154:	cf 91       	pop	r28
    4156:	1f 91       	pop	r17
    4158:	0f 91       	pop	r16
    415a:	08 95       	ret

0000415c <lora_uplink_handler_task>:
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	bb d2       	rcall	.+1398   	; 0x46d6 <lora_driver_resetRn2483>

void lora_uplink_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    4160:	62 e0       	ldi	r22, 0x02	; 2
    4162:	70 e0       	ldi	r23, 0x00	; 0
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	0e 94 02 14 	call	0x2804	; 0x2804 <vTaskDelay>
	lora_driver_resetRn2483(0);
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	b3 d2       	rcall	.+1382   	; 0x46d6 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    4170:	66 e9       	ldi	r22, 0x96	; 150
    4172:	70 e0       	ldi	r23, 0x00	; 0
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0e 94 02 14 	call	0x2804	; 0x2804 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    417c:	65 d2       	rcall	.+1226   	; 0x4648 <lora_driver_flushBuffers>

	_lora_setup();
    417e:	2a df       	rcall	.-428    	; 0x3fd4 <_lora_setup>
    4180:	0f ef       	ldi	r16, 0xFF	; 255
		uint16_t hum = 0;
		uint16_t co2 = 0;
		uint8_t status = 0;
		uint8_t xReceivedBytes = 0;
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    4182:	1f ef       	ldi	r17, 0xFF	; 255
    4184:	98 01       	movw	r18, r16
    4186:	46 e1       	ldi	r20, 0x16	; 22
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	67 e0       	ldi	r22, 0x07	; 7
    418c:	78 e1       	ldi	r23, 0x18	; 24
    418e:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <uplinkMessageBufferHandle>
    4192:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <uplinkMessageBufferHandle+0x1>
    4196:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <xStreamBufferReceive>
    419a:	88 23       	and	r24, r24
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    419c:	89 f3       	breq	.-30     	; 0x4180 <lora_uplink_handler_task+0x24>
    419e:	e7 e0       	ldi	r30, 0x07	; 7
			// 				printf("Number of bytes read from the message buffer: %d\n", xReceivedBytes);
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    41a0:	f8 e1       	ldi	r31, 0x18	; 24
    41a2:	82 81       	ldd	r24, Z+2	; 0x02
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	98 2f       	mov	r25, r24
    41a8:	88 27       	eor	r24, r24
    41aa:	23 81       	ldd	r18, Z+3	; 0x03
    41ac:	82 2b       	or	r24, r18
    41ae:	04 81       	ldd	r16, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    41b0:	10 e0       	ldi	r17, 0x00	; 0
    41b2:	10 2f       	mov	r17, r16
    41b4:	00 27       	eor	r16, r16
    41b6:	25 81       	ldd	r18, Z+5	; 0x05
    41b8:	02 2b       	or	r16, r18
    41ba:	c6 81       	ldd	r28, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    41bc:	d0 e0       	ldi	r29, 0x00	; 0
    41be:	dc 2f       	mov	r29, r28
    41c0:	cc 27       	eor	r28, r28
    41c2:	27 81       	ldd	r18, Z+7	; 0x07
    41c4:	c2 2b       	or	r28, r18
    41c6:	f0 84       	ldd	r15, Z+8	; 0x08
			status = _uplink_payload.bytes[6];
    41c8:	9f 93       	push	r25
			
			printf("Temperature sent: %d\n", tem);
    41ca:	8f 93       	push	r24
    41cc:	83 ef       	ldi	r24, 0xF3	; 243
    41ce:	95 e0       	ldi	r25, 0x05	; 5
    41d0:	9f 93       	push	r25
    41d2:	8f 93       	push	r24
    41d4:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    41d8:	1f 93       	push	r17
			printf("Humidity sent: %d\n", hum);
    41da:	0f 93       	push	r16
    41dc:	89 e0       	ldi	r24, 0x09	; 9
    41de:	96 e0       	ldi	r25, 0x06	; 6
    41e0:	9f 93       	push	r25
    41e2:	8f 93       	push	r24
    41e4:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    41e8:	df 93       	push	r29
			printf("CO2 sent: %d\n", co2);
    41ea:	cf 93       	push	r28
    41ec:	8c e1       	ldi	r24, 0x1C	; 28
    41ee:	96 e0       	ldi	r25, 0x06	; 6
    41f0:	9f 93       	push	r25
    41f2:	8f 93       	push	r24
    41f4:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    41f8:	1f 92       	push	r1
			printf("Status sent: %d\n", status);
    41fa:	ff 92       	push	r15
    41fc:	8a e2       	ldi	r24, 0x2A	; 42
    41fe:	96 e0       	ldi	r25, 0x06	; 6
    4200:	9f 93       	push	r25
    4202:	8f 93       	push	r24
    4204:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    4208:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    420a:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <status_leds_shortPuls>
			//WHAT THE HELL DOES THE FALSE DO 
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    420e:	67 e0       	ldi	r22, 0x07	; 7
    4210:	78 e1       	ldi	r23, 0x18	; 24
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	fe d2       	rcall	.+1532   	; 0x4812 <lora_driver_sendUploadMessage>
    4216:	ea d4       	rcall	.+2516   	; 0x4bec <lora_driver_mapReturnCodeToText>
    4218:	9f 93       	push	r25
    421a:	8f 93       	push	r24
    421c:	8b e3       	ldi	r24, 0x3B	; 59
    421e:	96 e0       	ldi	r25, 0x06	; 6
    4220:	9f 93       	push	r25
    4222:	8f 93       	push	r24
    4224:	0e 94 49 37 	call	0x6e92	; 0x6e92 <printf>
    4228:	8d b7       	in	r24, 0x3d	; 61
    422a:	9e b7       	in	r25, 0x3e	; 62
    422c:	44 96       	adiw	r24, 0x14	; 20
    422e:	0f b6       	in	r0, 0x3f	; 63
    4230:	f8 94       	cli
    4232:	9e bf       	out	0x3e, r25	; 62
    4234:	0f be       	out	0x3f, r0	; 63
    4236:	8d bf       	out	0x3d, r24	; 61
    4238:	a3 cf       	rjmp	.-186    	; 0x4180 <lora_uplink_handler_task+0x24>

0000423a <create_lora_uplink_handler_task>:
    423a:	ef 92       	push	r14

void lora_uplink_handler_task(void *pvParameters);

static lora_driver_payload_t _uplink_payload;

void create_lora_uplink_handler_task(UBaseType_t priority){
    423c:	ff 92       	push	r15
    423e:	0f 93       	push	r16
	xTaskCreate(
    4240:	e1 2c       	mov	r14, r1
    4242:	f1 2c       	mov	r15, r1
    4244:	08 2f       	mov	r16, r24
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	48 e8       	ldi	r20, 0x88	; 136
    424c:	51 e0       	ldi	r21, 0x01	; 1
    424e:	60 e5       	ldi	r22, 0x50	; 80
    4250:	76 e0       	ldi	r23, 0x06	; 6
    4252:	8e ea       	ldi	r24, 0xAE	; 174
    4254:	90 e2       	ldi	r25, 0x20	; 32
    4256:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
	,  "LRHandUplink"  
	,  configMINIMAL_STACK_SIZE+200  
	,  NULL
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}
    425a:	0f 91       	pop	r16
    425c:	ff 90       	pop	r15
    425e:	ef 90       	pop	r14
    4260:	08 95       	ret

00004262 <create_all_tasks>:
#include "DownlinkHandler.h"
#include "ServoController.h"


void create_all_tasks(){
	create_lora_uplink_handler_task(4);
    4262:	84 e0       	ldi	r24, 0x04	; 4
    4264:	ea df       	rcall	.-44     	; 0x423a <create_lora_uplink_handler_task>
	create_lora_downlink_handler_task(4);
    4266:	84 e0       	ldi	r24, 0x04	; 4
    4268:	0e 94 17 03 	call	0x62e	; 0x62e <create_lora_downlink_handler_task>
	create_main_application_task(3);
    426c:	83 e0       	ldi	r24, 0x03	; 3
    426e:	0e 94 11 02 	call	0x422	; 0x422 <create_main_application_task>
	create_CO2_sensor_task(1);
    4272:	81 e0       	ldi	r24, 0x01	; 1
    4274:	d0 dd       	rcall	.-1120   	; 0x3e16 <create_CO2_sensor_task>
	create_TempHum_sensor_task(1);
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	ef dd       	rcall	.-1058   	; 0x3e58 <create_TempHum_sensor_task>
    427a:	82 e0       	ldi	r24, 0x02	; 2
	create_fan_controller_task(2);
    427c:	0c 94 b5 03 	jmp	0x76a	; 0x76a <create_fan_controller_task>
    4280:	08 95       	ret

00004282 <initializeSystem>:
    4282:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    4284:	0e 94 2c 2b 	call	0x5658	; 0x5658 <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    4288:	85 e0       	ldi	r24, 0x05	; 5
    428a:	0e 94 33 2c 	call	0x5866	; 0x5866 <status_leds_initialise>

	initialize_event_groups();
    428e:	51 de       	rcall	.-862    	; 0x3f32 <initialize_event_groups>
	initialize_message_buffers();
    4290:	5d de       	rcall	.-838    	; 0x3f4c <initialize_message_buffers>
	initialize_semaphore();
    4292:	7f de       	rcall	.-770    	; 0x3f92 <initialize_semaphore>
    4294:	9b de       	rcall	.-714    	; 0x3fcc <initialise_rc_servo>
	initialise_rc_servo();
    4296:	60 91 55 19 	lds	r22, 0x1955	; 0x801955 <downlinkMessageBufferHandle>
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    429a:	70 91 56 19 	lds	r23, 0x1956	; 0x801956 <downlinkMessageBufferHandle+0x1>
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	da d1       	rcall	.+948    	; 0x4656 <lora_driver_initialise>
    42a2:	df cf       	rjmp	.-66     	; 0x4262 <create_all_tasks>
	create_all_tasks();
    42a4:	08 95       	ret

000042a6 <main>:
    42a6:	ed df       	rcall	.-38     	; 0x4282 <initializeSystem>
    42a8:	8d e5       	ldi	r24, 0x5D	; 93

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    42aa:	96 e0       	ldi	r25, 0x06	; 6
    42ac:	0e 94 5d 37 	call	0x6eba	; 0x6eba <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    42b0:	0e 94 49 11 	call	0x2292	; 0x2292 <vTaskStartScheduler>
    42b4:	ff cf       	rjmp	.-2      	; 0x42b4 <main+0xe>

000042b6 <_hihTwiCallback>:
    42b6:	65 30       	cpi	r22, 0x05	; 5
    42b8:	f1 f4       	brne	.+60     	; 0x42f6 <_hihTwiCallback+0x40>
    42ba:	fa 01       	movw	r30, r20
    42bc:	80 81       	ld	r24, Z
    42be:	8f 73       	andi	r24, 0x3F	; 63
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	98 2f       	mov	r25, r24
    42c4:	88 27       	eor	r24, r24
    42c6:	21 81       	ldd	r18, Z+1	; 0x01
    42c8:	82 2b       	or	r24, r18
    42ca:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    42ce:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    42d2:	82 81       	ldd	r24, Z+2	; 0x02
    42d4:	f0 e4       	ldi	r31, 0x40	; 64
    42d6:	8f 9f       	mul	r24, r31
    42d8:	c0 01       	movw	r24, r0
    42da:	11 24       	eor	r1, r1
    42dc:	fa 01       	movw	r30, r20
    42de:	23 81       	ldd	r18, Z+3	; 0x03
    42e0:	26 95       	lsr	r18
    42e2:	26 95       	lsr	r18
    42e4:	82 2b       	or	r24, r18
    42e6:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    42ea:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	80 93 1d 18 	sts	0x181D, r24	; 0x80181d <_measuringIsReady>
    42f4:	08 95       	ret
    42f6:	64 30       	cpi	r22, 0x04	; 4
    42f8:	51 f0       	breq	.+20     	; 0x430e <_hihTwiCallback+0x58>
    42fa:	80 e0       	ldi	r24, 0x00	; 0
    42fc:	90 e4       	ldi	r25, 0x40	; 64
    42fe:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4302:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4306:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    430a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    430e:	08 95       	ret

00004310 <hih8120_initialise>:
    4310:	0f 93       	push	r16
    4312:	1f 93       	push	r17
    4314:	0b e5       	ldi	r16, 0x5B	; 91
    4316:	11 e2       	ldi	r17, 0x21	; 33
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	34 e2       	ldi	r19, 0x24	; 36
    431c:	44 ef       	ldi	r20, 0xF4	; 244
    431e:	50 e0       	ldi	r21, 0x00	; 0
    4320:	60 e0       	ldi	r22, 0x00	; 0
    4322:	87 e2       	ldi	r24, 0x27	; 39
    4324:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <twiCreate>
    4328:	90 93 1f 18 	sts	0x181F, r25	; 0x80181f <_hih8120Handler+0x1>
    432c:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <_hih8120Handler>
    4330:	21 e0       	ldi	r18, 0x01	; 1
    4332:	89 2b       	or	r24, r25
    4334:	09 f0       	breq	.+2      	; 0x4338 <hih8120_initialise+0x28>
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	82 2f       	mov	r24, r18
    433a:	1f 91       	pop	r17
    433c:	0f 91       	pop	r16
    433e:	08 95       	ret

00004340 <hih8120_wakeup>:
    4340:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <_hih8120Handler>
    4344:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <_hih8120Handler+0x1>
    4348:	00 97       	sbiw	r24, 0x00	; 0
    434a:	59 f0       	breq	.+22     	; 0x4362 <hih8120_wakeup+0x22>
    434c:	40 e0       	ldi	r20, 0x00	; 0
    434e:	60 e0       	ldi	r22, 0x00	; 0
    4350:	70 e0       	ldi	r23, 0x00	; 0
    4352:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <twiTransmit>
    4356:	84 30       	cpi	r24, 0x04	; 4
    4358:	31 f4       	brne	.+12     	; 0x4366 <hih8120_wakeup+0x26>
    435a:	10 92 1d 18 	sts	0x181D, r1	; 0x80181d <_measuringIsReady>
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	08 95       	ret
    4362:	82 e0       	ldi	r24, 0x02	; 2
    4364:	08 95       	ret
    4366:	83 e0       	ldi	r24, 0x03	; 3
    4368:	08 95       	ret

0000436a <hih8120_measure>:
    436a:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <_hih8120Handler>
    436e:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <_hih8120Handler+0x1>
    4372:	00 97       	sbiw	r24, 0x00	; 0
    4374:	39 f0       	breq	.+14     	; 0x4384 <hih8120_measure+0x1a>
    4376:	64 e0       	ldi	r22, 0x04	; 4
    4378:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <twiReceive>
    437c:	85 30       	cpi	r24, 0x05	; 5
    437e:	21 f0       	breq	.+8      	; 0x4388 <hih8120_measure+0x1e>
    4380:	83 e0       	ldi	r24, 0x03	; 3
    4382:	08 95       	ret
    4384:	82 e0       	ldi	r24, 0x02	; 2
    4386:	08 95       	ret
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	08 95       	ret

0000438c <hih8120_getHumidity>:
    438c:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4390:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	0e 94 4a 33 	call	0x6694	; 0x6694 <__floatunsisf>
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	48 ec       	ldi	r20, 0xC8	; 200
    43a2:	52 e4       	ldi	r21, 0x42	; 66
    43a4:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    43a8:	20 e0       	ldi	r18, 0x00	; 0
    43aa:	38 ef       	ldi	r19, 0xF8	; 248
    43ac:	4f e7       	ldi	r20, 0x7F	; 127
    43ae:	56 e4       	ldi	r21, 0x46	; 70
    43b0:	0c 94 b1 32 	jmp	0x6562	; 0x6562 <__divsf3>
    43b4:	08 95       	ret

000043b6 <hih8120_getHumidityPercent_x10>:
    43b6:	ea df       	rcall	.-44     	; 0x438c <hih8120_getHumidity>
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	40 e2       	ldi	r20, 0x20	; 32
    43be:	51 e4       	ldi	r21, 0x41	; 65
    43c0:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    43c4:	0e 94 1e 33 	call	0x663c	; 0x663c <__fixunssfsi>
    43c8:	cb 01       	movw	r24, r22
    43ca:	08 95       	ret

000043cc <hih8120_getTemperature>:
    43cc:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    43d0:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    43d4:	80 e0       	ldi	r24, 0x00	; 0
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	0e 94 4a 33 	call	0x6694	; 0x6694 <__floatunsisf>
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	45 e2       	ldi	r20, 0x25	; 37
    43e2:	53 e4       	ldi	r21, 0x43	; 67
    43e4:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	38 ef       	ldi	r19, 0xF8	; 248
    43ec:	4f e7       	ldi	r20, 0x7F	; 127
    43ee:	56 e4       	ldi	r21, 0x46	; 70
    43f0:	0e 94 b1 32 	call	0x6562	; 0x6562 <__divsf3>
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	40 e2       	ldi	r20, 0x20	; 32
    43fa:	52 e4       	ldi	r21, 0x42	; 66
    43fc:	0c 94 4c 32 	jmp	0x6498	; 0x6498 <__subsf3>
    4400:	08 95       	ret

00004402 <hih8120_getTemperature_x10>:
    4402:	e4 df       	rcall	.-56     	; 0x43cc <hih8120_getTemperature>
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	40 e2       	ldi	r20, 0x20	; 32
    440a:	51 e4       	ldi	r21, 0x41	; 65
    440c:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    4410:	0e 94 19 33 	call	0x6632	; 0x6632 <__fixsfsi>
    4414:	cb 01       	movw	r24, r22
    4416:	08 95       	ret

00004418 <_serialCallBack>:
    4418:	0f 93       	push	r16
    441a:	1f 93       	push	r17
    441c:	cf 93       	push	r28
    441e:	df 93       	push	r29
    4420:	1f 92       	push	r1
    4422:	1f 92       	push	r1
    4424:	cd b7       	in	r28, 0x3d	; 61
    4426:	de b7       	in	r29, 0x3e	; 62
    4428:	8c 01       	movw	r16, r24
    442a:	19 82       	std	Y+1, r1	; 0x01
    442c:	2d c0       	rjmp	.+90     	; 0x4488 <_serialCallBack+0x70>
    442e:	e0 91 57 18 	lds	r30, 0x1857	; 0x801857 <rec_buf_inp.2878>
    4432:	ec 32       	cpi	r30, 0x2C	; 44
    4434:	50 f4       	brcc	.+20     	; 0x444a <_serialCallBack+0x32>
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	8e 0f       	add	r24, r30
    443a:	80 93 57 18 	sts	0x1857, r24	; 0x801857 <rec_buf_inp.2878>
    443e:	f0 e0       	ldi	r31, 0x00	; 0
    4440:	e7 57       	subi	r30, 0x77	; 119
    4442:	f7 4e       	sbci	r31, 0xE7	; 231
    4444:	8a 81       	ldd	r24, Y+2	; 0x02
    4446:	80 83       	st	Z, r24
    4448:	02 c0       	rjmp	.+4      	; 0x444e <_serialCallBack+0x36>
    444a:	10 92 57 18 	sts	0x1857, r1	; 0x801857 <rec_buf_inp.2878>
    444e:	8a 81       	ldd	r24, Y+2	; 0x02
    4450:	8a 30       	cpi	r24, 0x0A	; 10
    4452:	d1 f4       	brne	.+52     	; 0x4488 <_serialCallBack+0x70>
    4454:	40 91 57 18 	lds	r20, 0x1857	; 0x801857 <rec_buf_inp.2878>
    4458:	50 e0       	ldi	r21, 0x00	; 0
    445a:	fa 01       	movw	r30, r20
    445c:	e9 57       	subi	r30, 0x79	; 121
    445e:	f7 4e       	sbci	r31, 0xE7	; 231
    4460:	10 82       	st	Z, r1
    4462:	41 50       	subi	r20, 0x01	; 1
    4464:	51 09       	sbc	r21, r1
    4466:	9e 01       	movw	r18, r28
    4468:	2f 5f       	subi	r18, 0xFF	; 255
    446a:	3f 4f       	sbci	r19, 0xFF	; 255
    446c:	69 e8       	ldi	r22, 0x89	; 137
    446e:	78 e1       	ldi	r23, 0x18	; 24
    4470:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <_serialReplyBufferHandle>
    4474:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <_serialReplyBufferHandle+0x1>
    4478:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <xStreamBufferSendFromISR>
    447c:	89 81       	ldd	r24, Y+1	; 0x01
    447e:	81 11       	cpse	r24, r1
    4480:	0e 94 55 07 	call	0xeaa	; 0xeaa <vPortYield>
    4484:	10 92 57 18 	sts	0x1857, r1	; 0x801857 <rec_buf_inp.2878>
    4488:	be 01       	movw	r22, r28
    448a:	6e 5f       	subi	r22, 0xFE	; 254
    448c:	7f 4f       	sbci	r23, 0xFF	; 255
    448e:	c8 01       	movw	r24, r16
    4490:	4d d6       	rcall	.+3226   	; 0x512c <serial_getByte>
    4492:	88 23       	and	r24, r24
    4494:	61 f2       	breq	.-104    	; 0x442e <_serialCallBack+0x16>
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	df 91       	pop	r29
    449c:	cf 91       	pop	r28
    449e:	1f 91       	pop	r17
    44a0:	0f 91       	pop	r16
    44a2:	08 95       	ret

000044a4 <_uploadMessage>:
    44a4:	0f 93       	push	r16
    44a6:	1f 93       	push	r17
    44a8:	cf 93       	push	r28
    44aa:	df 93       	push	r29
    44ac:	8c 01       	movw	r16, r24
    44ae:	eb 01       	movw	r28, r22
    44b0:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <_serialReplyBufferHandle>
    44b4:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <_serialReplyBufferHandle+0x1>
    44b8:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <xStreamBufferReset>
    44bc:	b8 01       	movw	r22, r16
    44be:	80 e2       	ldi	r24, 0x20	; 32
    44c0:	98 e1       	ldi	r25, 0x18	; 24
    44c2:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <strcpy>
    44c6:	20 97       	sbiw	r28, 0x00	; 0
    44c8:	79 f0       	breq	.+30     	; 0x44e8 <_uploadMessage+0x44>
    44ca:	e0 e2       	ldi	r30, 0x20	; 32
    44cc:	f8 e1       	ldi	r31, 0x18	; 24
    44ce:	01 90       	ld	r0, Z+
    44d0:	00 20       	and	r0, r0
    44d2:	e9 f7       	brne	.-6      	; 0x44ce <_uploadMessage+0x2a>
    44d4:	31 97       	sbiw	r30, 0x01	; 1
    44d6:	80 e2       	ldi	r24, 0x20	; 32
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	91 83       	std	Z+1, r25	; 0x01
    44dc:	80 83       	st	Z, r24
    44de:	be 01       	movw	r22, r28
    44e0:	80 e2       	ldi	r24, 0x20	; 32
    44e2:	98 e1       	ldi	r25, 0x18	; 24
    44e4:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <strcat>
    44e8:	e0 e2       	ldi	r30, 0x20	; 32
    44ea:	f8 e1       	ldi	r31, 0x18	; 24
    44ec:	df 01       	movw	r26, r30
    44ee:	0d 90       	ld	r0, X+
    44f0:	00 20       	and	r0, r0
    44f2:	e9 f7       	brne	.-6      	; 0x44ee <_uploadMessage+0x4a>
    44f4:	11 97       	sbiw	r26, 0x01	; 1
    44f6:	8d e0       	ldi	r24, 0x0D	; 13
    44f8:	9a e0       	ldi	r25, 0x0A	; 10
    44fa:	11 96       	adiw	r26, 0x01	; 1
    44fc:	9c 93       	st	X, r25
    44fe:	8e 93       	st	-X, r24
    4500:	12 96       	adiw	r26, 0x02	; 2
    4502:	1c 92       	st	X, r1
    4504:	01 90       	ld	r0, Z+
    4506:	00 20       	and	r0, r0
    4508:	e9 f7       	brne	.-6      	; 0x4504 <_uploadMessage+0x60>
    450a:	31 97       	sbiw	r30, 0x01	; 1
    450c:	e0 52       	subi	r30, 0x20	; 32
    450e:	f8 41       	sbci	r31, 0x18	; 24
    4510:	ae 2f       	mov	r26, r30
    4512:	80 e2       	ldi	r24, 0x20	; 32
    4514:	98 e1       	ldi	r25, 0x18	; 24
    4516:	ac 01       	movw	r20, r24
    4518:	6a 2f       	mov	r22, r26
    451a:	80 91 5c 18 	lds	r24, 0x185C	; 0x80185c <_rn2483_serial>
    451e:	90 91 5d 18 	lds	r25, 0x185D	; 0x80185d <_rn2483_serial+0x1>
    4522:	af d5       	rcall	.+2910   	; 0x5082 <serial_sendBytes>
    4524:	81 11       	cpse	r24, r1
    4526:	11 c0       	rjmp	.+34     	; 0x454a <_uploadMessage+0xa6>
    4528:	08 e2       	ldi	r16, 0x28	; 40
    452a:	15 e0       	ldi	r17, 0x05	; 5
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	4d e2       	ldi	r20, 0x2D	; 45
    4532:	50 e0       	ldi	r21, 0x00	; 0
    4534:	63 ee       	ldi	r22, 0xE3	; 227
    4536:	78 e1       	ldi	r23, 0x18	; 24
    4538:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <_serialReplyBufferHandle>
    453c:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <_serialReplyBufferHandle+0x1>
    4540:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <xStreamBufferReceive>
    4544:	83 ee       	ldi	r24, 0xE3	; 227
    4546:	98 e1       	ldi	r25, 0x18	; 24
    4548:	02 c0       	rjmp	.+4      	; 0x454e <_uploadMessage+0xaa>
    454a:	80 e0       	ldi	r24, 0x00	; 0
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	df 91       	pop	r29
    4550:	cf 91       	pop	r28
    4552:	1f 91       	pop	r17
    4554:	0f 91       	pop	r16
    4556:	08 95       	ret

00004558 <_reply2ReturnCode>:
    4558:	2f 92       	push	r2
    455a:	3f 92       	push	r3
    455c:	4f 92       	push	r4
    455e:	5f 92       	push	r5
    4560:	6f 92       	push	r6
    4562:	7f 92       	push	r7
    4564:	8f 92       	push	r8
    4566:	9f 92       	push	r9
    4568:	af 92       	push	r10
    456a:	bf 92       	push	r11
    456c:	cf 92       	push	r12
    456e:	df 92       	push	r13
    4570:	ef 92       	push	r14
    4572:	ff 92       	push	r15
    4574:	0f 93       	push	r16
    4576:	1f 93       	push	r17
    4578:	cf 93       	push	r28
    457a:	df 93       	push	r29
    457c:	5c 01       	movw	r10, r24
    457e:	fc 01       	movw	r30, r24
    4580:	01 90       	ld	r0, Z+
    4582:	00 20       	and	r0, r0
    4584:	e9 f7       	brne	.-6      	; 0x4580 <_reply2ReturnCode+0x28>
    4586:	31 97       	sbiw	r30, 0x01	; 1
    4588:	6f 01       	movw	r12, r30
    458a:	c8 1a       	sub	r12, r24
    458c:	d9 0a       	sbc	r13, r25
    458e:	5c 2c       	mov	r5, r12
    4590:	0f 2e       	mov	r0, r31
    4592:	f3 e0       	ldi	r31, 0x03	; 3
    4594:	8f 2e       	mov	r8, r31
    4596:	f9 e0       	ldi	r31, 0x09	; 9
    4598:	9f 2e       	mov	r9, r31
    459a:	f0 2d       	mov	r31, r0
    459c:	e1 2c       	mov	r14, r1
    459e:	f1 2c       	mov	r15, r1
    45a0:	4c 2c       	mov	r4, r12
    45a2:	37 01       	movw	r6, r14
    45a4:	f4 01       	movw	r30, r8
    45a6:	01 81       	ldd	r16, Z+1	; 0x01
    45a8:	12 81       	ldd	r17, Z+2	; 0x02
    45aa:	e8 01       	movw	r28, r16
    45ac:	09 90       	ld	r0, Y+
    45ae:	00 20       	and	r0, r0
    45b0:	e9 f7       	brne	.-6      	; 0x45ac <_reply2ReturnCode+0x54>
    45b2:	21 97       	sbiw	r28, 0x01	; 1
    45b4:	c0 1b       	sub	r28, r16
    45b6:	d1 0b       	sbc	r29, r17
    45b8:	3c 2e       	mov	r3, r28
    45ba:	f9 e0       	ldi	r31, 0x09	; 9
    45bc:	cf 16       	cp	r12, r31
    45be:	d1 04       	cpc	r13, r1
    45c0:	58 f0       	brcs	.+22     	; 0x45d8 <_reply2ReturnCode+0x80>
    45c2:	f4 01       	movw	r30, r8
    45c4:	20 80       	ld	r2, Z
    45c6:	fe e0       	ldi	r31, 0x0E	; 14
    45c8:	2f 12       	cpse	r2, r31
    45ca:	06 c0       	rjmp	.+12     	; 0x45d8 <_reply2ReturnCode+0x80>
    45cc:	b8 01       	movw	r22, r16
    45ce:	c5 01       	movw	r24, r10
    45d0:	0e 94 b3 36 	call	0x6d66	; 0x6d66 <strcasestr>
    45d4:	89 2b       	or	r24, r25
    45d6:	09 f5       	brne	.+66     	; 0x461a <_reply2ReturnCode+0xc2>
    45d8:	44 2d       	mov	r20, r4
    45da:	35 14       	cp	r3, r5
    45dc:	08 f4       	brcc	.+2      	; 0x45e0 <_reply2ReturnCode+0x88>
    45de:	4c 2f       	mov	r20, r28
    45e0:	50 e0       	ldi	r21, 0x00	; 0
    45e2:	b8 01       	movw	r22, r16
    45e4:	c5 01       	movw	r24, r10
    45e6:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <strncasecmp>
    45ea:	89 2b       	or	r24, r25
    45ec:	49 f4       	brne	.+18     	; 0x4600 <_reply2ReturnCode+0xa8>
    45ee:	f3 01       	movw	r30, r6
    45f0:	ee 0f       	add	r30, r30
    45f2:	ff 1f       	adc	r31, r31
    45f4:	e6 0d       	add	r30, r6
    45f6:	f7 1d       	adc	r31, r7
    45f8:	ed 5f       	subi	r30, 0xFD	; 253
    45fa:	f6 4f       	sbci	r31, 0xF6	; 246
    45fc:	20 80       	ld	r2, Z
    45fe:	0d c0       	rjmp	.+26     	; 0x461a <_reply2ReturnCode+0xc2>
    4600:	8f ef       	ldi	r24, 0xFF	; 255
    4602:	e8 1a       	sub	r14, r24
    4604:	f8 0a       	sbc	r15, r24
    4606:	e3 e0       	ldi	r30, 0x03	; 3
    4608:	8e 0e       	add	r8, r30
    460a:	91 1c       	adc	r9, r1
    460c:	f1 e1       	ldi	r31, 0x11	; 17
    460e:	ef 16       	cp	r14, r31
    4610:	f1 04       	cpc	r15, r1
    4612:	39 f6       	brne	.-114    	; 0x45a2 <_reply2ReturnCode+0x4a>
    4614:	68 94       	set
    4616:	22 24       	eor	r2, r2
    4618:	24 f8       	bld	r2, 4
    461a:	82 2d       	mov	r24, r2
    461c:	df 91       	pop	r29
    461e:	cf 91       	pop	r28
    4620:	1f 91       	pop	r17
    4622:	0f 91       	pop	r16
    4624:	ff 90       	pop	r15
    4626:	ef 90       	pop	r14
    4628:	df 90       	pop	r13
    462a:	cf 90       	pop	r12
    462c:	bf 90       	pop	r11
    462e:	af 90       	pop	r10
    4630:	9f 90       	pop	r9
    4632:	8f 90       	pop	r8
    4634:	7f 90       	pop	r7
    4636:	6f 90       	pop	r6
    4638:	5f 90       	pop	r5
    463a:	4f 90       	pop	r4
    463c:	3f 90       	pop	r3
    463e:	2f 90       	pop	r2
    4640:	08 95       	ret

00004642 <_uploadMessageRc>:
    4642:	30 df       	rcall	.-416    	; 0x44a4 <_uploadMessage>
    4644:	89 cf       	rjmp	.-238    	; 0x4558 <_reply2ReturnCode>
    4646:	08 95       	ret

00004648 <lora_driver_flushBuffers>:
    4648:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <_serialReplyBufferHandle>
    464c:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <_serialReplyBufferHandle+0x1>
    4650:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <xStreamBufferReset>
    4654:	08 95       	ret

00004656 <lora_driver_initialise>:
    4656:	8f 92       	push	r8
    4658:	9f 92       	push	r9
    465a:	af 92       	push	r10
    465c:	cf 92       	push	r12
    465e:	ef 92       	push	r14
    4660:	0f 93       	push	r16
    4662:	1f 93       	push	r17
    4664:	cf 93       	push	r28
    4666:	c8 2f       	mov	r28, r24
    4668:	8b 01       	movw	r16, r22
    466a:	41 e0       	ldi	r20, 0x01	; 1
    466c:	60 e0       	ldi	r22, 0x00	; 0
    466e:	70 e0       	ldi	r23, 0x00	; 0
    4670:	88 ec       	ldi	r24, 0xC8	; 200
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <xStreamBufferGenericCreate>
    4678:	90 93 5b 18 	sts	0x185B, r25	; 0x80185b <_serialReplyBufferHandle+0x1>
    467c:	80 93 5a 18 	sts	0x185A, r24	; 0x80185a <_serialReplyBufferHandle>
    4680:	10 93 59 18 	sts	0x1859, r17	; 0x801859 <_downlinkMessageBuffer+0x1>
    4684:	00 93 58 18 	sts	0x1858, r16	; 0x801858 <_downlinkMessageBuffer>
    4688:	0f 2e       	mov	r0, r31
    468a:	fc e0       	ldi	r31, 0x0C	; 12
    468c:	8f 2e       	mov	r8, r31
    468e:	f2 e2       	ldi	r31, 0x22	; 34
    4690:	9f 2e       	mov	r9, r31
    4692:	f0 2d       	mov	r31, r0
    4694:	68 94       	set
    4696:	aa 24       	eor	r10, r10
    4698:	a6 f8       	bld	r10, 6
    469a:	68 94       	set
    469c:	cc 24       	eor	r12, r12
    469e:	c6 f8       	bld	r12, 6
    46a0:	e1 2c       	mov	r14, r1
    46a2:	00 e0       	ldi	r16, 0x00	; 0
    46a4:	23 e0       	ldi	r18, 0x03	; 3
    46a6:	40 e0       	ldi	r20, 0x00	; 0
    46a8:	51 ee       	ldi	r21, 0xE1	; 225
    46aa:	60 e0       	ldi	r22, 0x00	; 0
    46ac:	70 e0       	ldi	r23, 0x00	; 0
    46ae:	8c 2f       	mov	r24, r28
    46b0:	17 d4       	rcall	.+2094   	; 0x4ee0 <serial_create>
    46b2:	90 93 5d 18 	sts	0x185D, r25	; 0x80185d <_rn2483_serial+0x1>
    46b6:	80 93 5c 18 	sts	0x185C, r24	; 0x80185c <_rn2483_serial>
    46ba:	e7 e0       	ldi	r30, 0x07	; 7
    46bc:	f1 e0       	ldi	r31, 0x01	; 1
    46be:	80 81       	ld	r24, Z
    46c0:	80 61       	ori	r24, 0x10	; 16
    46c2:	80 83       	st	Z, r24
    46c4:	cf 91       	pop	r28
    46c6:	1f 91       	pop	r17
    46c8:	0f 91       	pop	r16
    46ca:	ef 90       	pop	r14
    46cc:	cf 90       	pop	r12
    46ce:	af 90       	pop	r10
    46d0:	9f 90       	pop	r9
    46d2:	8f 90       	pop	r8
    46d4:	08 95       	ret

000046d6 <lora_driver_resetRn2483>:
    46d6:	88 23       	and	r24, r24
    46d8:	31 f0       	breq	.+12     	; 0x46e6 <lora_driver_resetRn2483+0x10>
    46da:	e8 e0       	ldi	r30, 0x08	; 8
    46dc:	f1 e0       	ldi	r31, 0x01	; 1
    46de:	80 81       	ld	r24, Z
    46e0:	8f 7e       	andi	r24, 0xEF	; 239
    46e2:	80 83       	st	Z, r24
    46e4:	08 95       	ret
    46e6:	e8 e0       	ldi	r30, 0x08	; 8
    46e8:	f1 e0       	ldi	r31, 0x01	; 1
    46ea:	80 81       	ld	r24, Z
    46ec:	80 61       	ori	r24, 0x10	; 16
    46ee:	80 83       	st	Z, r24
    46f0:	08 95       	ret

000046f2 <lora_driver_rn2483FactoryReset>:
    46f2:	60 e0       	ldi	r22, 0x00	; 0
    46f4:	70 e0       	ldi	r23, 0x00	; 0
    46f6:	8e e8       	ldi	r24, 0x8E	; 142
    46f8:	96 e0       	ldi	r25, 0x06	; 6
    46fa:	d4 de       	rcall	.-600    	; 0x44a4 <_uploadMessage>
    46fc:	e3 ee       	ldi	r30, 0xE3	; 227
    46fe:	f8 e1       	ldi	r31, 0x18	; 24
    4700:	01 90       	ld	r0, Z+
    4702:	00 20       	and	r0, r0
    4704:	e9 f7       	brne	.-6      	; 0x4700 <lora_driver_rn2483FactoryReset+0xe>
    4706:	31 97       	sbiw	r30, 0x01	; 1
    4708:	e3 5e       	subi	r30, 0xE3	; 227
    470a:	f8 41       	sbci	r31, 0x18	; 24
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	75 97       	sbiw	r30, 0x15	; 21
    4710:	08 f0       	brcs	.+2      	; 0x4714 <lora_driver_rn2483FactoryReset+0x22>
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	08 95       	ret

00004716 <lora_driver_getRn2483Hweui>:
    4716:	cf 93       	push	r28
    4718:	df 93       	push	r29
    471a:	ec 01       	movw	r28, r24
    471c:	60 e0       	ldi	r22, 0x00	; 0
    471e:	70 e0       	ldi	r23, 0x00	; 0
    4720:	8f e9       	ldi	r24, 0x9F	; 159
    4722:	96 e0       	ldi	r25, 0x06	; 6
    4724:	bf de       	rcall	.-642    	; 0x44a4 <_uploadMessage>
    4726:	e3 ee       	ldi	r30, 0xE3	; 227
    4728:	f8 e1       	ldi	r31, 0x18	; 24
    472a:	01 90       	ld	r0, Z+
    472c:	00 20       	and	r0, r0
    472e:	e9 f7       	brne	.-6      	; 0x472a <lora_driver_getRn2483Hweui+0x14>
    4730:	e4 5f       	subi	r30, 0xF4	; 244
    4732:	f8 41       	sbci	r31, 0x18	; 24
    4734:	39 f4       	brne	.+14     	; 0x4744 <lora_driver_getRn2483Hweui+0x2e>
    4736:	63 ee       	ldi	r22, 0xE3	; 227
    4738:	78 e1       	ldi	r23, 0x18	; 24
    473a:	ce 01       	movw	r24, r28
    473c:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <strcpy>
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	02 c0       	rjmp	.+4      	; 0x4748 <lora_driver_getRn2483Hweui+0x32>
    4744:	18 82       	st	Y, r1
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	df 91       	pop	r29
    474a:	cf 91       	pop	r28
    474c:	08 95       	ret

0000474e <lora_driver_setDeviceIdentifier>:
    474e:	fc 01       	movw	r30, r24
    4750:	01 90       	ld	r0, Z+
    4752:	00 20       	and	r0, r0
    4754:	e9 f7       	brne	.-6      	; 0x4750 <lora_driver_setDeviceIdentifier+0x2>
    4756:	9f 01       	movw	r18, r30
    4758:	21 51       	subi	r18, 0x11	; 17
    475a:	31 09       	sbc	r19, r1
    475c:	28 17       	cp	r18, r24
    475e:	39 07       	cpc	r19, r25
    4760:	29 f4       	brne	.+10     	; 0x476c <lora_driver_setDeviceIdentifier+0x1e>
    4762:	bc 01       	movw	r22, r24
    4764:	8d ec       	ldi	r24, 0xCD	; 205
    4766:	96 e0       	ldi	r25, 0x06	; 6
    4768:	6c cf       	rjmp	.-296    	; 0x4642 <_uploadMessageRc>
    476a:	08 95       	ret
    476c:	89 e0       	ldi	r24, 0x09	; 9
    476e:	08 95       	ret

00004770 <lora_driver_setApplicationIdentifier>:
    4770:	fc 01       	movw	r30, r24
    4772:	01 90       	ld	r0, Z+
    4774:	00 20       	and	r0, r0
    4776:	e9 f7       	brne	.-6      	; 0x4772 <lora_driver_setApplicationIdentifier+0x2>
    4778:	9f 01       	movw	r18, r30
    477a:	21 51       	subi	r18, 0x11	; 17
    477c:	31 09       	sbc	r19, r1
    477e:	28 17       	cp	r18, r24
    4780:	39 07       	cpc	r19, r25
    4782:	29 f4       	brne	.+10     	; 0x478e <lora_driver_setApplicationIdentifier+0x1e>
    4784:	bc 01       	movw	r22, r24
    4786:	8c ed       	ldi	r24, 0xDC	; 220
    4788:	96 e0       	ldi	r25, 0x06	; 6
    478a:	5b cf       	rjmp	.-330    	; 0x4642 <_uploadMessageRc>
    478c:	08 95       	ret
    478e:	89 e0       	ldi	r24, 0x09	; 9
    4790:	08 95       	ret

00004792 <lora_driver_setApplicationKey>:
    4792:	fc 01       	movw	r30, r24
    4794:	01 90       	ld	r0, Z+
    4796:	00 20       	and	r0, r0
    4798:	e9 f7       	brne	.-6      	; 0x4794 <lora_driver_setApplicationKey+0x2>
    479a:	9f 01       	movw	r18, r30
    479c:	21 52       	subi	r18, 0x21	; 33
    479e:	31 09       	sbc	r19, r1
    47a0:	28 17       	cp	r18, r24
    47a2:	39 07       	cpc	r19, r25
    47a4:	29 f4       	brne	.+10     	; 0x47b0 <lora_driver_setApplicationKey+0x1e>
    47a6:	bc 01       	movw	r22, r24
    47a8:	8b ee       	ldi	r24, 0xEB	; 235
    47aa:	96 e0       	ldi	r25, 0x06	; 6
    47ac:	4a cf       	rjmp	.-364    	; 0x4642 <_uploadMessageRc>
    47ae:	08 95       	ret
    47b0:	89 e0       	ldi	r24, 0x09	; 9
    47b2:	08 95       	ret

000047b4 <lora_driver_saveMac>:
    47b4:	60 e0       	ldi	r22, 0x00	; 0
    47b6:	70 e0       	ldi	r23, 0x00	; 0
    47b8:	8a e2       	ldi	r24, 0x2A	; 42
    47ba:	97 e0       	ldi	r25, 0x07	; 7
    47bc:	42 cf       	rjmp	.-380    	; 0x4642 <_uploadMessageRc>
    47be:	08 95       	ret

000047c0 <lora_driver_join>:
    47c0:	0f 93       	push	r16
    47c2:	1f 93       	push	r17
    47c4:	e8 2f       	mov	r30, r24
    47c6:	f0 e0       	ldi	r31, 0x00	; 0
    47c8:	ee 0f       	add	r30, r30
    47ca:	ff 1f       	adc	r31, r31
    47cc:	e1 50       	subi	r30, 0x01	; 1
    47ce:	f7 4f       	sbci	r31, 0xF7	; 247
    47d0:	60 81       	ld	r22, Z
    47d2:	71 81       	ldd	r23, Z+1	; 0x01
    47d4:	83 e3       	ldi	r24, 0x33	; 51
    47d6:	97 e0       	ldi	r25, 0x07	; 7
    47d8:	34 df       	rcall	.-408    	; 0x4642 <_uploadMessageRc>
    47da:	81 11       	cpse	r24, r1
    47dc:	14 c0       	rjmp	.+40     	; 0x4806 <lora_driver_join+0x46>
    47de:	08 e2       	ldi	r16, 0x28	; 40
    47e0:	15 e0       	ldi	r17, 0x05	; 5
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	4d e2       	ldi	r20, 0x2D	; 45
    47e8:	50 e0       	ldi	r21, 0x00	; 0
    47ea:	63 ee       	ldi	r22, 0xE3	; 227
    47ec:	78 e1       	ldi	r23, 0x18	; 24
    47ee:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <_serialReplyBufferHandle>
    47f2:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <_serialReplyBufferHandle+0x1>
    47f6:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <xStreamBufferReceive>
    47fa:	88 23       	and	r24, r24
    47fc:	21 f0       	breq	.+8      	; 0x4806 <lora_driver_join+0x46>
    47fe:	83 ee       	ldi	r24, 0xE3	; 227
    4800:	98 e1       	ldi	r25, 0x18	; 24
    4802:	aa de       	rcall	.-684    	; 0x4558 <_reply2ReturnCode>
    4804:	03 c0       	rjmp	.+6      	; 0x480c <lora_driver_join+0x4c>
    4806:	83 ee       	ldi	r24, 0xE3	; 227
    4808:	98 e1       	ldi	r25, 0x18	; 24
    480a:	a6 de       	rcall	.-692    	; 0x4558 <_reply2ReturnCode>
    480c:	1f 91       	pop	r17
    480e:	0f 91       	pop	r16
    4810:	08 95       	ret

00004812 <lora_driver_sendUploadMessage>:
    4812:	0f 93       	push	r16
    4814:	1f 93       	push	r17
    4816:	cf 93       	push	r28
    4818:	df 93       	push	r29
    481a:	1f 92       	push	r1
    481c:	cd b7       	in	r28, 0x3d	; 61
    481e:	de b7       	in	r29, 0x3e	; 62
    4820:	db 01       	movw	r26, r22
    4822:	11 96       	adiw	r26, 0x01	; 1
    4824:	9c 91       	ld	r25, X
    4826:	11 97       	sbiw	r26, 0x01	; 1
    4828:	95 31       	cpi	r25, 0x15	; 21
    482a:	08 f0       	brcs	.+2      	; 0x482e <lora_driver_sendUploadMessage+0x1c>
    482c:	b4 c0       	rjmp	.+360    	; 0x4996 <lora_driver_sendUploadMessage+0x184>
    482e:	99 23       	and	r25, r25
    4830:	81 f1       	breq	.+96     	; 0x4892 <lora_driver_sendUploadMessage+0x80>
    4832:	60 e0       	ldi	r22, 0x00	; 0
    4834:	70 e0       	ldi	r23, 0x00	; 0
    4836:	27 2f       	mov	r18, r23
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	46 2f       	mov	r20, r22
    483c:	50 e0       	ldi	r21, 0x00	; 0
    483e:	fd 01       	movw	r30, r26
    4840:	e4 0f       	add	r30, r20
    4842:	f5 1f       	adc	r31, r21
    4844:	92 81       	ldd	r25, Z+2	; 0x02
    4846:	92 95       	swap	r25
    4848:	9f 70       	andi	r25, 0x0F	; 15
    484a:	9a 30       	cpi	r25, 0x0A	; 10
    484c:	10 f0       	brcs	.+4      	; 0x4852 <lora_driver_sendUploadMessage+0x40>
    484e:	99 5c       	subi	r25, 0xC9	; 201
    4850:	01 c0       	rjmp	.+2      	; 0x4854 <lora_driver_sendUploadMessage+0x42>
    4852:	90 5d       	subi	r25, 0xD0	; 208
    4854:	f9 01       	movw	r30, r18
    4856:	ec 58       	subi	r30, 0x8C	; 140
    4858:	f7 4e       	sbci	r31, 0xE7	; 231
    485a:	90 83       	st	Z, r25
    485c:	2f 5f       	subi	r18, 0xFF	; 255
    485e:	3f 4f       	sbci	r19, 0xFF	; 255
    4860:	fd 01       	movw	r30, r26
    4862:	e4 0f       	add	r30, r20
    4864:	f5 1f       	adc	r31, r21
    4866:	92 81       	ldd	r25, Z+2	; 0x02
    4868:	9f 70       	andi	r25, 0x0F	; 15
    486a:	49 2f       	mov	r20, r25
    486c:	50 e0       	ldi	r21, 0x00	; 0
    486e:	4a 30       	cpi	r20, 0x0A	; 10
    4870:	51 05       	cpc	r21, r1
    4872:	14 f0       	brlt	.+4      	; 0x4878 <lora_driver_sendUploadMessage+0x66>
    4874:	99 5c       	subi	r25, 0xC9	; 201
    4876:	01 c0       	rjmp	.+2      	; 0x487a <lora_driver_sendUploadMessage+0x68>
    4878:	90 5d       	subi	r25, 0xD0	; 208
    487a:	f9 01       	movw	r30, r18
    487c:	ec 58       	subi	r30, 0x8C	; 140
    487e:	f7 4e       	sbci	r31, 0xE7	; 231
    4880:	90 83       	st	Z, r25
    4882:	7e 5f       	subi	r23, 0xFE	; 254
    4884:	6f 5f       	subi	r22, 0xFF	; 255
    4886:	11 96       	adiw	r26, 0x01	; 1
    4888:	9c 91       	ld	r25, X
    488a:	11 97       	sbiw	r26, 0x01	; 1
    488c:	69 17       	cp	r22, r25
    488e:	98 f2       	brcs	.-90     	; 0x4836 <lora_driver_sendUploadMessage+0x24>
    4890:	01 c0       	rjmp	.+2      	; 0x4894 <lora_driver_sendUploadMessage+0x82>
    4892:	70 e0       	ldi	r23, 0x00	; 0
    4894:	e7 2f       	mov	r30, r23
    4896:	f0 e0       	ldi	r31, 0x00	; 0
    4898:	ec 58       	subi	r30, 0x8C	; 140
    489a:	f7 4e       	sbci	r31, 0xE7	; 231
    489c:	10 82       	st	Z, r1
    489e:	4c 91       	ld	r20, X
    48a0:	81 11       	cpse	r24, r1
    48a2:	03 c0       	rjmp	.+6      	; 0x48aa <lora_driver_sendUploadMessage+0x98>
    48a4:	8c e3       	ldi	r24, 0x3C	; 60
    48a6:	97 e0       	ldi	r25, 0x07	; 7
    48a8:	02 c0       	rjmp	.+4      	; 0x48ae <lora_driver_sendUploadMessage+0x9c>
    48aa:	8e e3       	ldi	r24, 0x3E	; 62
    48ac:	97 e0       	ldi	r25, 0x07	; 7
    48ae:	24 e7       	ldi	r18, 0x74	; 116
    48b0:	38 e1       	ldi	r19, 0x18	; 24
    48b2:	3f 93       	push	r19
    48b4:	2f 93       	push	r18
    48b6:	1f 92       	push	r1
    48b8:	4f 93       	push	r20
    48ba:	9f 93       	push	r25
    48bc:	8f 93       	push	r24
    48be:	82 e4       	ldi	r24, 0x42	; 66
    48c0:	97 e0       	ldi	r25, 0x07	; 7
    48c2:	9f 93       	push	r25
    48c4:	8f 93       	push	r24
    48c6:	86 eb       	ldi	r24, 0xB6	; 182
    48c8:	98 e1       	ldi	r25, 0x18	; 24
    48ca:	9f 93       	push	r25
    48cc:	8f 93       	push	r24
    48ce:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <sprintf>
    48d2:	60 e0       	ldi	r22, 0x00	; 0
    48d4:	70 e0       	ldi	r23, 0x00	; 0
    48d6:	86 eb       	ldi	r24, 0xB6	; 182
    48d8:	98 e1       	ldi	r25, 0x18	; 24
    48da:	b3 de       	rcall	.-666    	; 0x4642 <_uploadMessageRc>
    48dc:	0f b6       	in	r0, 0x3f	; 63
    48de:	f8 94       	cli
    48e0:	de bf       	out	0x3e, r29	; 62
    48e2:	0f be       	out	0x3f, r0	; 63
    48e4:	cd bf       	out	0x3d, r28	; 61
    48e6:	81 11       	cpse	r24, r1
    48e8:	59 c0       	rjmp	.+178    	; 0x499c <lora_driver_sendUploadMessage+0x18a>
    48ea:	08 e2       	ldi	r16, 0x28	; 40
    48ec:	15 e0       	ldi	r17, 0x05	; 5
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	4d e2       	ldi	r20, 0x2D	; 45
    48f4:	50 e0       	ldi	r21, 0x00	; 0
    48f6:	63 ee       	ldi	r22, 0xE3	; 227
    48f8:	78 e1       	ldi	r23, 0x18	; 24
    48fa:	80 91 5a 18 	lds	r24, 0x185A	; 0x80185a <_serialReplyBufferHandle>
    48fe:	90 91 5b 18 	lds	r25, 0x185B	; 0x80185b <_serialReplyBufferHandle+0x1>
    4902:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <xStreamBufferReceive>
    4906:	88 23       	and	r24, r24
    4908:	09 f4       	brne	.+2      	; 0x490c <lora_driver_sendUploadMessage+0xfa>
    490a:	47 c0       	rjmp	.+142    	; 0x499a <lora_driver_sendUploadMessage+0x188>
    490c:	83 ee       	ldi	r24, 0xE3	; 227
    490e:	98 e1       	ldi	r25, 0x18	; 24
    4910:	23 de       	rcall	.-954    	; 0x4558 <_reply2ReturnCode>
    4912:	8e 30       	cpi	r24, 0x0E	; 14
    4914:	09 f0       	breq	.+2      	; 0x4918 <lora_driver_sendUploadMessage+0x106>
    4916:	42 c0       	rjmp	.+132    	; 0x499c <lora_driver_sendUploadMessage+0x18a>
    4918:	87 e0       	ldi	r24, 0x07	; 7
    491a:	89 83       	std	Y+1, r24	; 0x01
    491c:	80 91 58 18 	lds	r24, 0x1858	; 0x801858 <_downlinkMessageBuffer>
    4920:	90 91 59 18 	lds	r25, 0x1859	; 0x801859 <_downlinkMessageBuffer+0x1>
    4924:	89 2b       	or	r24, r25
    4926:	a9 f1       	breq	.+106    	; 0x4992 <lora_driver_sendUploadMessage+0x180>
    4928:	be 01       	movw	r22, r28
    492a:	6f 5f       	subi	r22, 0xFF	; 255
    492c:	7f 4f       	sbci	r23, 0xFF	; 255
    492e:	83 ee       	ldi	r24, 0xE3	; 227
    4930:	98 e1       	ldi	r25, 0x18	; 24
    4932:	68 d1       	rcall	.+720    	; 0x4c04 <decode_port_no>
    4934:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <_downlinkPayload>
    4938:	e9 81       	ldd	r30, Y+1	; 0x01
    493a:	f0 e0       	ldi	r31, 0x00	; 0
    493c:	ed 51       	subi	r30, 0x1D	; 29
    493e:	f7 4e       	sbci	r31, 0xE7	; 231
    4940:	df 01       	movw	r26, r30
    4942:	0d 90       	ld	r0, X+
    4944:	00 20       	and	r0, r0
    4946:	e9 f7       	brne	.-6      	; 0x4942 <lora_driver_sendUploadMessage+0x130>
    4948:	11 97       	sbiw	r26, 0x01	; 1
    494a:	ae 1b       	sub	r26, r30
    494c:	bf 0b       	sbc	r27, r31
    494e:	aa 23       	and	r26, r26
    4950:	91 f0       	breq	.+36     	; 0x4976 <lora_driver_sendUploadMessage+0x164>
    4952:	bb 27       	eor	r27, r27
    4954:	cd 01       	movw	r24, r26
    4956:	01 97       	sbiw	r24, 0x01	; 1
    4958:	9c 01       	movw	r18, r24
    495a:	12 f4       	brpl	.+4      	; 0x4960 <lora_driver_sendUploadMessage+0x14e>
    495c:	2f 5f       	subi	r18, 0xFF	; 255
    495e:	3f 4f       	sbci	r19, 0xFF	; 255
    4960:	35 95       	asr	r19
    4962:	27 95       	ror	r18
    4964:	20 93 5f 18 	sts	0x185F, r18	; 0x80185f <_downlinkPayload+0x1>
    4968:	af 01       	movw	r20, r30
    496a:	4f 5f       	subi	r20, 0xFF	; 255
    496c:	5f 4f       	sbci	r21, 0xFF	; 255
    496e:	64 e1       	ldi	r22, 0x14	; 20
    4970:	80 e6       	ldi	r24, 0x60	; 96
    4972:	98 e1       	ldi	r25, 0x18	; 24
    4974:	73 d1       	rcall	.+742    	; 0x4c5c <decode_hexadecimal_string_bytes>
    4976:	01 e0       	ldi	r16, 0x01	; 1
    4978:	10 e0       	ldi	r17, 0x00	; 0
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	46 e1       	ldi	r20, 0x16	; 22
    4980:	50 e0       	ldi	r21, 0x00	; 0
    4982:	6e e5       	ldi	r22, 0x5E	; 94
    4984:	78 e1       	ldi	r23, 0x18	; 24
    4986:	80 91 58 18 	lds	r24, 0x1858	; 0x801858 <_downlinkMessageBuffer>
    498a:	90 91 59 18 	lds	r25, 0x1859	; 0x801859 <_downlinkMessageBuffer+0x1>
    498e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <xStreamBufferSend>
    4992:	8e e0       	ldi	r24, 0x0E	; 14
    4994:	03 c0       	rjmp	.+6      	; 0x499c <lora_driver_sendUploadMessage+0x18a>
    4996:	84 e1       	ldi	r24, 0x14	; 20
    4998:	01 c0       	rjmp	.+2      	; 0x499c <lora_driver_sendUploadMessage+0x18a>
    499a:	80 e0       	ldi	r24, 0x00	; 0
    499c:	0f 90       	pop	r0
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	1f 91       	pop	r17
    49a4:	0f 91       	pop	r16
    49a6:	08 95       	ret

000049a8 <lora_driver_setAdaptiveDataRate>:
    49a8:	81 30       	cpi	r24, 0x01	; 1
    49aa:	19 f0       	breq	.+6      	; 0x49b2 <lora_driver_setAdaptiveDataRate+0xa>
    49ac:	62 e5       	ldi	r22, 0x52	; 82
    49ae:	77 e0       	ldi	r23, 0x07	; 7
    49b0:	02 c0       	rjmp	.+4      	; 0x49b6 <lora_driver_setAdaptiveDataRate+0xe>
    49b2:	6b e2       	ldi	r22, 0x2B	; 43
    49b4:	78 e0       	ldi	r23, 0x08	; 8
    49b6:	86 e5       	ldi	r24, 0x56	; 86
    49b8:	97 e0       	ldi	r25, 0x07	; 7
    49ba:	43 ce       	rjmp	.-890    	; 0x4642 <_uploadMessageRc>
    49bc:	08 95       	ret

000049be <lora_driver_setReceiveDelay>:
    49be:	9f 93       	push	r25
    49c0:	8f 93       	push	r24
    49c2:	87 e8       	ldi	r24, 0x87	; 135
    49c4:	97 e0       	ldi	r25, 0x07	; 7
    49c6:	9f 93       	push	r25
    49c8:	8f 93       	push	r24
    49ca:	86 eb       	ldi	r24, 0xB6	; 182
    49cc:	98 e1       	ldi	r25, 0x18	; 24
    49ce:	9f 93       	push	r25
    49d0:	8f 93       	push	r24
    49d2:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <sprintf>
    49d6:	60 e0       	ldi	r22, 0x00	; 0
    49d8:	70 e0       	ldi	r23, 0x00	; 0
    49da:	86 eb       	ldi	r24, 0xB6	; 182
    49dc:	98 e1       	ldi	r25, 0x18	; 24
    49de:	31 de       	rcall	.-926    	; 0x4642 <_uploadMessageRc>
    49e0:	0f 90       	pop	r0
    49e2:	0f 90       	pop	r0
    49e4:	0f 90       	pop	r0
    49e6:	0f 90       	pop	r0
    49e8:	0f 90       	pop	r0
    49ea:	0f 90       	pop	r0
    49ec:	08 95       	ret

000049ee <lora_driver_configureToEu868>:
    49ee:	2f 92       	push	r2
    49f0:	3f 92       	push	r3
    49f2:	4f 92       	push	r4
    49f4:	5f 92       	push	r5
    49f6:	6f 92       	push	r6
    49f8:	7f 92       	push	r7
    49fa:	8f 92       	push	r8
    49fc:	9f 92       	push	r9
    49fe:	af 92       	push	r10
    4a00:	bf 92       	push	r11
    4a02:	cf 92       	push	r12
    4a04:	df 92       	push	r13
    4a06:	ef 92       	push	r14
    4a08:	ff 92       	push	r15
    4a0a:	0f 93       	push	r16
    4a0c:	1f 93       	push	r17
    4a0e:	cf 93       	push	r28
    4a10:	df 93       	push	r29
    4a12:	cd b7       	in	r28, 0x3d	; 61
    4a14:	de b7       	in	r29, 0x3e	; 62
    4a16:	a0 97       	sbiw	r28, 0x20	; 32
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	f8 94       	cli
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	0f be       	out	0x3f, r0	; 63
    4a20:	cd bf       	out	0x3d, r28	; 61
    4a22:	64 eb       	ldi	r22, 0xB4	; 180
    4a24:	77 e0       	ldi	r23, 0x07	; 7
    4a26:	80 ec       	ldi	r24, 0xC0	; 192
    4a28:	97 e0       	ldi	r25, 0x07	; 7
    4a2a:	3c dd       	rcall	.-1416   	; 0x44a4 <_uploadMessage>
    4a2c:	95 dd       	rcall	.-1238   	; 0x4558 <_reply2ReturnCode>
    4a2e:	81 11       	cpse	r24, r1
    4a30:	a3 c0       	rjmp	.+326    	; 0x4b78 <lora_driver_configureToEu868+0x18a>
    4a32:	80 e2       	ldi	r24, 0x20	; 32
    4a34:	e2 e2       	ldi	r30, 0x22	; 34
    4a36:	f2 e0       	ldi	r31, 0x02	; 2
    4a38:	de 01       	movw	r26, r28
    4a3a:	11 96       	adiw	r26, 0x01	; 1
    4a3c:	01 90       	ld	r0, Z+
    4a3e:	0d 92       	st	X+, r0
    4a40:	8a 95       	dec	r24
    4a42:	e1 f7       	brne	.-8      	; 0x4a3c <lora_driver_configureToEu868+0x4e>
    4a44:	9e 01       	movw	r18, r28
    4a46:	2f 5f       	subi	r18, 0xFF	; 255
    4a48:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4a:	69 01       	movw	r12, r18
    4a4c:	e1 2c       	mov	r14, r1
    4a4e:	f1 2c       	mov	r15, r1
    4a50:	0f 2e       	mov	r0, r31
    4a52:	fc ec       	ldi	r31, 0xCC	; 204
    4a54:	af 2e       	mov	r10, r31
    4a56:	f7 e0       	ldi	r31, 0x07	; 7
    4a58:	bf 2e       	mov	r11, r31
    4a5a:	f0 2d       	mov	r31, r0
    4a5c:	06 eb       	ldi	r16, 0xB6	; 182
    4a5e:	18 e1       	ldi	r17, 0x18	; 24
    4a60:	0f 2e       	mov	r0, r31
    4a62:	f5 ee       	ldi	r31, 0xE5	; 229
    4a64:	4f 2e       	mov	r4, r31
    4a66:	f7 e0       	ldi	r31, 0x07	; 7
    4a68:	5f 2e       	mov	r5, r31
    4a6a:	f0 2d       	mov	r31, r0
    4a6c:	0f 2e       	mov	r0, r31
    4a6e:	fc ef       	ldi	r31, 0xFC	; 252
    4a70:	8f 2e       	mov	r8, r31
    4a72:	f7 e0       	ldi	r31, 0x07	; 7
    4a74:	9f 2e       	mov	r9, r31
    4a76:	f0 2d       	mov	r31, r0
    4a78:	0f 2e       	mov	r0, r31
    4a7a:	f6 e1       	ldi	r31, 0x16	; 22
    4a7c:	6f 2e       	mov	r6, r31
    4a7e:	f8 e0       	ldi	r31, 0x08	; 8
    4a80:	7f 2e       	mov	r7, r31
    4a82:	f0 2d       	mov	r31, r0
    4a84:	3e 2c       	mov	r3, r14
    4a86:	2f 2c       	mov	r2, r15
    4a88:	ff 92       	push	r15
    4a8a:	ef 92       	push	r14
    4a8c:	bf 92       	push	r11
    4a8e:	af 92       	push	r10
    4a90:	1f 93       	push	r17
    4a92:	0f 93       	push	r16
    4a94:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <sprintf>
    4a98:	60 e0       	ldi	r22, 0x00	; 0
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	c8 01       	movw	r24, r16
    4a9e:	02 dd       	rcall	.-1532   	; 0x44a4 <_uploadMessage>
    4aa0:	5b dd       	rcall	.-1354   	; 0x4558 <_reply2ReturnCode>
    4aa2:	0f 90       	pop	r0
    4aa4:	0f 90       	pop	r0
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	0f 90       	pop	r0
    4aac:	0f 90       	pop	r0
    4aae:	81 11       	cpse	r24, r1
    4ab0:	63 c0       	rjmp	.+198    	; 0x4b78 <lora_driver_configureToEu868+0x18a>
    4ab2:	32 e0       	ldi	r19, 0x02	; 2
    4ab4:	3e 15       	cp	r19, r14
    4ab6:	e8 f4       	brcc	.+58     	; 0x4af2 <lora_driver_configureToEu868+0x104>
    4ab8:	f6 01       	movw	r30, r12
    4aba:	83 81       	ldd	r24, Z+3	; 0x03
    4abc:	8f 93       	push	r24
    4abe:	82 81       	ldd	r24, Z+2	; 0x02
    4ac0:	8f 93       	push	r24
    4ac2:	81 81       	ldd	r24, Z+1	; 0x01
    4ac4:	8f 93       	push	r24
    4ac6:	80 81       	ld	r24, Z
    4ac8:	8f 93       	push	r24
    4aca:	ff 92       	push	r15
    4acc:	ef 92       	push	r14
    4ace:	5f 92       	push	r5
    4ad0:	4f 92       	push	r4
    4ad2:	1f 93       	push	r17
    4ad4:	0f 93       	push	r16
    4ad6:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <sprintf>
    4ada:	60 e0       	ldi	r22, 0x00	; 0
    4adc:	70 e0       	ldi	r23, 0x00	; 0
    4ade:	c8 01       	movw	r24, r16
    4ae0:	e1 dc       	rcall	.-1598   	; 0x44a4 <_uploadMessage>
    4ae2:	3a dd       	rcall	.-1420   	; 0x4558 <_reply2ReturnCode>
    4ae4:	0f b6       	in	r0, 0x3f	; 63
    4ae6:	f8 94       	cli
    4ae8:	de bf       	out	0x3e, r29	; 62
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	cd bf       	out	0x3d, r28	; 61
    4aee:	81 11       	cpse	r24, r1
    4af0:	43 c0       	rjmp	.+134    	; 0x4b78 <lora_driver_configureToEu868+0x18a>
    4af2:	2f 92       	push	r2
    4af4:	3f 92       	push	r3
    4af6:	9f 92       	push	r9
    4af8:	8f 92       	push	r8
    4afa:	1f 93       	push	r17
    4afc:	0f 93       	push	r16
    4afe:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <sprintf>
    4b02:	60 e0       	ldi	r22, 0x00	; 0
    4b04:	70 e0       	ldi	r23, 0x00	; 0
    4b06:	c8 01       	movw	r24, r16
    4b08:	cd dc       	rcall	.-1638   	; 0x44a4 <_uploadMessage>
    4b0a:	26 dd       	rcall	.-1460   	; 0x4558 <_reply2ReturnCode>
    4b0c:	0f 90       	pop	r0
    4b0e:	0f 90       	pop	r0
    4b10:	0f 90       	pop	r0
    4b12:	0f 90       	pop	r0
    4b14:	0f 90       	pop	r0
    4b16:	0f 90       	pop	r0
    4b18:	81 11       	cpse	r24, r1
    4b1a:	2e c0       	rjmp	.+92     	; 0x4b78 <lora_driver_configureToEu868+0x18a>
    4b1c:	2f 92       	push	r2
    4b1e:	3f 92       	push	r3
    4b20:	7f 92       	push	r7
    4b22:	6f 92       	push	r6
    4b24:	1f 93       	push	r17
    4b26:	0f 93       	push	r16
    4b28:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <sprintf>
    4b2c:	60 e0       	ldi	r22, 0x00	; 0
    4b2e:	70 e0       	ldi	r23, 0x00	; 0
    4b30:	c8 01       	movw	r24, r16
    4b32:	b8 dc       	rcall	.-1680   	; 0x44a4 <_uploadMessage>
    4b34:	11 dd       	rcall	.-1502   	; 0x4558 <_reply2ReturnCode>
    4b36:	0f 90       	pop	r0
    4b38:	0f 90       	pop	r0
    4b3a:	0f 90       	pop	r0
    4b3c:	0f 90       	pop	r0
    4b3e:	0f 90       	pop	r0
    4b40:	0f 90       	pop	r0
    4b42:	81 11       	cpse	r24, r1
    4b44:	19 c0       	rjmp	.+50     	; 0x4b78 <lora_driver_configureToEu868+0x18a>
    4b46:	3f ef       	ldi	r19, 0xFF	; 255
    4b48:	e3 1a       	sub	r14, r19
    4b4a:	f3 0a       	sbc	r15, r19
    4b4c:	84 e0       	ldi	r24, 0x04	; 4
    4b4e:	c8 0e       	add	r12, r24
    4b50:	d1 1c       	adc	r13, r1
    4b52:	98 e0       	ldi	r25, 0x08	; 8
    4b54:	e9 16       	cp	r14, r25
    4b56:	f1 04       	cpc	r15, r1
    4b58:	09 f0       	breq	.+2      	; 0x4b5c <lora_driver_configureToEu868+0x16e>
    4b5a:	94 cf       	rjmp	.-216    	; 0x4a84 <lora_driver_configureToEu868+0x96>
    4b5c:	60 e0       	ldi	r22, 0x00	; 0
    4b5e:	70 e0       	ldi	r23, 0x00	; 0
    4b60:	8e e2       	ldi	r24, 0x2E	; 46
    4b62:	98 e0       	ldi	r25, 0x08	; 8
    4b64:	9f dc       	rcall	.-1730   	; 0x44a4 <_uploadMessage>
    4b66:	f8 dc       	rcall	.-1552   	; 0x4558 <_reply2ReturnCode>
    4b68:	81 11       	cpse	r24, r1
    4b6a:	06 c0       	rjmp	.+12     	; 0x4b78 <lora_driver_configureToEu868+0x18a>
    4b6c:	60 e0       	ldi	r22, 0x00	; 0
    4b6e:	70 e0       	ldi	r23, 0x00	; 0
    4b70:	8f e3       	ldi	r24, 0x3F	; 63
    4b72:	98 e0       	ldi	r25, 0x08	; 8
    4b74:	97 dc       	rcall	.-1746   	; 0x44a4 <_uploadMessage>
    4b76:	f0 dc       	rcall	.-1568   	; 0x4558 <_reply2ReturnCode>
    4b78:	a0 96       	adiw	r28, 0x20	; 32
    4b7a:	0f b6       	in	r0, 0x3f	; 63
    4b7c:	f8 94       	cli
    4b7e:	de bf       	out	0x3e, r29	; 62
    4b80:	0f be       	out	0x3f, r0	; 63
    4b82:	cd bf       	out	0x3d, r28	; 61
    4b84:	df 91       	pop	r29
    4b86:	cf 91       	pop	r28
    4b88:	1f 91       	pop	r17
    4b8a:	0f 91       	pop	r16
    4b8c:	ff 90       	pop	r15
    4b8e:	ef 90       	pop	r14
    4b90:	df 90       	pop	r13
    4b92:	cf 90       	pop	r12
    4b94:	bf 90       	pop	r11
    4b96:	af 90       	pop	r10
    4b98:	9f 90       	pop	r9
    4b9a:	8f 90       	pop	r8
    4b9c:	7f 90       	pop	r7
    4b9e:	6f 90       	pop	r6
    4ba0:	5f 90       	pop	r5
    4ba2:	4f 90       	pop	r4
    4ba4:	3f 90       	pop	r3
    4ba6:	2f 90       	pop	r2
    4ba8:	08 95       	ret

00004baa <lora_driver_setOtaaIdentity>:
    4baa:	ef 92       	push	r14
    4bac:	ff 92       	push	r15
    4bae:	0f 93       	push	r16
    4bb0:	1f 93       	push	r17
    4bb2:	cf 93       	push	r28
    4bb4:	df 93       	push	r29
    4bb6:	ec 01       	movw	r28, r24
    4bb8:	8b 01       	movw	r16, r22
    4bba:	7a 01       	movw	r14, r20
    4bbc:	81 e0       	ldi	r24, 0x01	; 1
    4bbe:	f4 de       	rcall	.-536    	; 0x49a8 <lora_driver_setAdaptiveDataRate>
    4bc0:	81 11       	cpse	r24, r1
    4bc2:	0d c0       	rjmp	.+26     	; 0x4bde <lora_driver_setOtaaIdentity+0x34>
    4bc4:	ce 01       	movw	r24, r28
    4bc6:	d4 dd       	rcall	.-1112   	; 0x4770 <lora_driver_setApplicationIdentifier>
    4bc8:	81 11       	cpse	r24, r1
    4bca:	09 c0       	rjmp	.+18     	; 0x4bde <lora_driver_setOtaaIdentity+0x34>
    4bcc:	c8 01       	movw	r24, r16
    4bce:	e1 dd       	rcall	.-1086   	; 0x4792 <lora_driver_setApplicationKey>
    4bd0:	81 11       	cpse	r24, r1
    4bd2:	05 c0       	rjmp	.+10     	; 0x4bde <lora_driver_setOtaaIdentity+0x34>
    4bd4:	c7 01       	movw	r24, r14
    4bd6:	bb dd       	rcall	.-1162   	; 0x474e <lora_driver_setDeviceIdentifier>
    4bd8:	81 11       	cpse	r24, r1
    4bda:	01 c0       	rjmp	.+2      	; 0x4bde <lora_driver_setOtaaIdentity+0x34>
    4bdc:	eb dd       	rcall	.-1066   	; 0x47b4 <lora_driver_saveMac>
    4bde:	df 91       	pop	r29
    4be0:	cf 91       	pop	r28
    4be2:	1f 91       	pop	r17
    4be4:	0f 91       	pop	r16
    4be6:	ff 90       	pop	r15
    4be8:	ef 90       	pop	r14
    4bea:	08 95       	ret

00004bec <lora_driver_mapReturnCodeToText>:
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	fc 01       	movw	r30, r24
    4bf0:	ee 0f       	add	r30, r30
    4bf2:	ff 1f       	adc	r31, r31
    4bf4:	8e 0f       	add	r24, r30
    4bf6:	9f 1f       	adc	r25, r31
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	ed 5f       	subi	r30, 0xFD	; 253
    4bfc:	f6 4f       	sbci	r31, 0xF6	; 246
    4bfe:	81 81       	ldd	r24, Z+1	; 0x01
    4c00:	92 81       	ldd	r25, Z+2	; 0x02
    4c02:	08 95       	ret

00004c04 <decode_port_no>:
    4c04:	dc 01       	movw	r26, r24
    4c06:	00 97       	sbiw	r24, 0x00	; 0
    4c08:	29 f1       	breq	.+74     	; 0x4c54 <decode_port_no+0x50>
    4c0a:	fb 01       	movw	r30, r22
    4c0c:	20 81       	ld	r18, Z
    4c0e:	fc 01       	movw	r30, r24
    4c10:	01 90       	ld	r0, Z+
    4c12:	00 20       	and	r0, r0
    4c14:	e9 f7       	brne	.-6      	; 0x4c10 <decode_port_no+0xc>
    4c16:	31 97       	sbiw	r30, 0x01	; 1
    4c18:	e8 1b       	sub	r30, r24
    4c1a:	f9 0b       	sbc	r31, r25
    4c1c:	82 2f       	mov	r24, r18
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	e8 17       	cp	r30, r24
    4c22:	f9 07       	cpc	r31, r25
    4c24:	c8 f0       	brcs	.+50     	; 0x4c58 <decode_port_no+0x54>
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	08 c0       	rjmp	.+16     	; 0x4c3a <decode_port_no+0x36>
    4c2a:	88 0f       	add	r24, r24
    4c2c:	38 2f       	mov	r19, r24
    4c2e:	33 0f       	add	r19, r19
    4c30:	33 0f       	add	r19, r19
    4c32:	83 0f       	add	r24, r19
    4c34:	80 53       	subi	r24, 0x30	; 48
    4c36:	89 0f       	add	r24, r25
    4c38:	2f 5f       	subi	r18, 0xFF	; 255
    4c3a:	fd 01       	movw	r30, r26
    4c3c:	e2 0f       	add	r30, r18
    4c3e:	f1 1d       	adc	r31, r1
    4c40:	90 81       	ld	r25, Z
    4c42:	30 ed       	ldi	r19, 0xD0	; 208
    4c44:	39 0f       	add	r19, r25
    4c46:	3a 30       	cpi	r19, 0x0A	; 10
    4c48:	10 f4       	brcc	.+4      	; 0x4c4e <decode_port_no+0x4a>
    4c4a:	91 11       	cpse	r25, r1
    4c4c:	ee cf       	rjmp	.-36     	; 0x4c2a <decode_port_no+0x26>
    4c4e:	fb 01       	movw	r30, r22
    4c50:	20 83       	st	Z, r18
    4c52:	08 95       	ret
    4c54:	80 e0       	ldi	r24, 0x00	; 0
    4c56:	08 95       	ret
    4c58:	80 e0       	ldi	r24, 0x00	; 0
    4c5a:	08 95       	ret

00004c5c <decode_hexadecimal_string_bytes>:
    4c5c:	0f 93       	push	r16
    4c5e:	1f 93       	push	r17
    4c60:	cf 93       	push	r28
    4c62:	df 93       	push	r29
    4c64:	dc 01       	movw	r26, r24
    4c66:	ea 01       	movw	r28, r20
    4c68:	20 97       	sbiw	r28, 0x00	; 0
    4c6a:	e1 f1       	breq	.+120    	; 0x4ce4 <decode_hexadecimal_string_bytes+0x88>
    4c6c:	fa 01       	movw	r30, r20
    4c6e:	01 90       	ld	r0, Z+
    4c70:	00 20       	and	r0, r0
    4c72:	e9 f7       	brne	.-6      	; 0x4c6e <decode_hexadecimal_string_bytes+0x12>
    4c74:	31 97       	sbiw	r30, 0x01	; 1
    4c76:	e4 1b       	sub	r30, r20
    4c78:	f5 0b       	sbc	r31, r21
    4c7a:	32 97       	sbiw	r30, 0x02	; 2
    4c7c:	10 f5       	brcc	.+68     	; 0x4cc2 <decode_hexadecimal_string_bytes+0x66>
    4c7e:	32 c0       	rjmp	.+100    	; 0x4ce4 <decode_hexadecimal_string_bytes+0x88>
    4c80:	8d 01       	movw	r16, r26
    4c82:	04 0f       	add	r16, r20
    4c84:	15 1f       	adc	r17, r21
    4c86:	30 e0       	ldi	r19, 0x00	; 0
    4c88:	ae 01       	movw	r20, r28
    4c8a:	42 0f       	add	r20, r18
    4c8c:	53 1f       	adc	r21, r19
    4c8e:	fa 01       	movw	r30, r20
    4c90:	90 81       	ld	r25, Z
    4c92:	91 34       	cpi	r25, 0x41	; 65
    4c94:	28 f0       	brcs	.+10     	; 0x4ca0 <decode_hexadecimal_string_bytes+0x44>
    4c96:	97 53       	subi	r25, 0x37	; 55
    4c98:	59 2f       	mov	r21, r25
    4c9a:	52 95       	swap	r21
    4c9c:	50 7f       	andi	r21, 0xF0	; 240
    4c9e:	03 c0       	rjmp	.+6      	; 0x4ca6 <decode_hexadecimal_string_bytes+0x4a>
    4ca0:	59 2f       	mov	r21, r25
    4ca2:	52 95       	swap	r21
    4ca4:	50 7f       	andi	r21, 0xF0	; 240
    4ca6:	2c 0f       	add	r18, r28
    4ca8:	3d 1f       	adc	r19, r29
    4caa:	f9 01       	movw	r30, r18
    4cac:	91 81       	ldd	r25, Z+1	; 0x01
    4cae:	91 34       	cpi	r25, 0x41	; 65
    4cb0:	10 f0       	brcs	.+4      	; 0x4cb6 <decode_hexadecimal_string_bytes+0x5a>
    4cb2:	97 53       	subi	r25, 0x37	; 55
    4cb4:	01 c0       	rjmp	.+2      	; 0x4cb8 <decode_hexadecimal_string_bytes+0x5c>
    4cb6:	90 53       	subi	r25, 0x30	; 48
    4cb8:	95 0f       	add	r25, r21
    4cba:	f8 01       	movw	r30, r16
    4cbc:	90 83       	st	Z, r25
    4cbe:	8f 5f       	subi	r24, 0xFF	; 255
    4cc0:	01 c0       	rjmp	.+2      	; 0x4cc4 <decode_hexadecimal_string_bytes+0x68>
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	28 2f       	mov	r18, r24
    4cc6:	22 0f       	add	r18, r18
    4cc8:	48 2f       	mov	r20, r24
    4cca:	50 e0       	ldi	r21, 0x00	; 0
    4ccc:	fe 01       	movw	r30, r28
    4cce:	01 90       	ld	r0, Z+
    4cd0:	00 20       	and	r0, r0
    4cd2:	e9 f7       	brne	.-6      	; 0x4cce <decode_hexadecimal_string_bytes+0x72>
    4cd4:	31 97       	sbiw	r30, 0x01	; 1
    4cd6:	ec 1b       	sub	r30, r28
    4cd8:	fd 0b       	sbc	r31, r29
    4cda:	4e 17       	cp	r20, r30
    4cdc:	5f 07       	cpc	r21, r31
    4cde:	10 f4       	brcc	.+4      	; 0x4ce4 <decode_hexadecimal_string_bytes+0x88>
    4ce0:	86 13       	cpse	r24, r22
    4ce2:	ce cf       	rjmp	.-100    	; 0x4c80 <decode_hexadecimal_string_bytes+0x24>
    4ce4:	df 91       	pop	r29
    4ce6:	cf 91       	pop	r28
    4ce8:	1f 91       	pop	r17
    4cea:	0f 91       	pop	r16
    4cec:	08 95       	ret

00004cee <_serialCallBack>:
    4cee:	80 91 13 19 	lds	r24, 0x1913	; 0x801913 <crc_sum.1945>
    4cf2:	86 0f       	add	r24, r22
    4cf4:	80 93 13 19 	sts	0x1913, r24	; 0x801913 <crc_sum.1945>
    4cf8:	90 91 16 19 	lds	r25, 0x1916	; 0x801916 <_mh_state>
    4cfc:	91 30       	cpi	r25, 0x01	; 1
    4cfe:	79 f0       	breq	.+30     	; 0x4d1e <_serialCallBack+0x30>
    4d00:	28 f0       	brcs	.+10     	; 0x4d0c <_serialCallBack+0x1e>
    4d02:	92 30       	cpi	r25, 0x02	; 2
    4d04:	a9 f0       	breq	.+42     	; 0x4d30 <_serialCallBack+0x42>
    4d06:	93 30       	cpi	r25, 0x03	; 3
    4d08:	19 f1       	breq	.+70     	; 0x4d50 <_serialCallBack+0x62>
    4d0a:	08 95       	ret
    4d0c:	6f 3f       	cpi	r22, 0xFF	; 255
    4d0e:	09 f0       	breq	.+2      	; 0x4d12 <_serialCallBack+0x24>
    4d10:	48 c0       	rjmp	.+144    	; 0x4da2 <_serialCallBack+0xb4>
    4d12:	10 92 13 19 	sts	0x1913, r1	; 0x801913 <crc_sum.1945>
    4d16:	81 e0       	ldi	r24, 0x01	; 1
    4d18:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <_mh_state>
    4d1c:	08 95       	ret
    4d1e:	66 38       	cpi	r22, 0x86	; 134
    4d20:	09 f0       	breq	.+2      	; 0x4d24 <_serialCallBack+0x36>
    4d22:	3f c0       	rjmp	.+126    	; 0x4da2 <_serialCallBack+0xb4>
    4d24:	10 92 12 19 	sts	0x1912, r1	; 0x801912 <inDex.1943>
    4d28:	82 e0       	ldi	r24, 0x02	; 2
    4d2a:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <_mh_state>
    4d2e:	08 95       	ret
    4d30:	e0 91 12 19 	lds	r30, 0x1912	; 0x801912 <inDex.1943>
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	8e 0f       	add	r24, r30
    4d38:	80 93 12 19 	sts	0x1912, r24	; 0x801912 <inDex.1943>
    4d3c:	f0 e0       	ldi	r31, 0x00	; 0
    4d3e:	e0 5f       	subi	r30, 0xF0	; 240
    4d40:	f6 4e       	sbci	r31, 0xE6	; 230
    4d42:	60 83       	st	Z, r22
    4d44:	82 30       	cpi	r24, 0x02	; 2
    4d46:	69 f5       	brne	.+90     	; 0x4da2 <_serialCallBack+0xb4>
    4d48:	83 e0       	ldi	r24, 0x03	; 3
    4d4a:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <_mh_state>
    4d4e:	08 95       	ret
    4d50:	90 91 12 19 	lds	r25, 0x1912	; 0x801912 <inDex.1943>
    4d54:	21 e0       	ldi	r18, 0x01	; 1
    4d56:	29 0f       	add	r18, r25
    4d58:	20 93 12 19 	sts	0x1912, r18	; 0x801912 <inDex.1943>
    4d5c:	96 30       	cpi	r25, 0x06	; 6
    4d5e:	09 f5       	brne	.+66     	; 0x4da2 <_serialCallBack+0xb4>
    4d60:	81 11       	cpse	r24, r1
    4d62:	0e c0       	rjmp	.+28     	; 0x4d80 <_serialCallBack+0x92>
    4d64:	e0 e1       	ldi	r30, 0x10	; 16
    4d66:	f9 e1       	ldi	r31, 0x19	; 25
    4d68:	80 81       	ld	r24, Z
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	98 2f       	mov	r25, r24
    4d6e:	88 27       	eor	r24, r24
    4d70:	21 81       	ldd	r18, Z+1	; 0x01
    4d72:	82 0f       	add	r24, r18
    4d74:	91 1d       	adc	r25, r1
    4d76:	90 93 18 19 	sts	0x1918, r25	; 0x801918 <_ppm+0x1>
    4d7a:	80 93 17 19 	sts	0x1917, r24	; 0x801917 <_ppm>
    4d7e:	04 c0       	rjmp	.+8      	; 0x4d88 <_serialCallBack+0x9a>
    4d80:	10 92 18 19 	sts	0x1918, r1	; 0x801918 <_ppm+0x1>
    4d84:	10 92 17 19 	sts	0x1917, r1	; 0x801917 <_ppm>
    4d88:	10 92 16 19 	sts	0x1916, r1	; 0x801916 <_mh_state>
    4d8c:	e0 91 14 19 	lds	r30, 0x1914	; 0x801914 <_appCallBack>
    4d90:	f0 91 15 19 	lds	r31, 0x1915	; 0x801915 <_appCallBack+0x1>
    4d94:	30 97       	sbiw	r30, 0x00	; 0
    4d96:	29 f0       	breq	.+10     	; 0x4da2 <_serialCallBack+0xb4>
    4d98:	80 91 17 19 	lds	r24, 0x1917	; 0x801917 <_ppm>
    4d9c:	90 91 18 19 	lds	r25, 0x1918	; 0x801918 <_ppm+0x1>
    4da0:	19 95       	eicall
    4da2:	08 95       	ret

00004da4 <mh_z19_initialise>:
    4da4:	8f 92       	push	r8
    4da6:	9f 92       	push	r9
    4da8:	af 92       	push	r10
    4daa:	cf 92       	push	r12
    4dac:	ef 92       	push	r14
    4dae:	0f 93       	push	r16
    4db0:	0f 2e       	mov	r0, r31
    4db2:	f7 e7       	ldi	r31, 0x77	; 119
    4db4:	8f 2e       	mov	r8, r31
    4db6:	f6 e2       	ldi	r31, 0x26	; 38
    4db8:	9f 2e       	mov	r9, r31
    4dba:	f0 2d       	mov	r31, r0
    4dbc:	68 94       	set
    4dbe:	aa 24       	eor	r10, r10
    4dc0:	a4 f8       	bld	r10, 4
    4dc2:	68 94       	set
    4dc4:	cc 24       	eor	r12, r12
    4dc6:	c4 f8       	bld	r12, 4
    4dc8:	e1 2c       	mov	r14, r1
    4dca:	00 e0       	ldi	r16, 0x00	; 0
    4dcc:	23 e0       	ldi	r18, 0x03	; 3
    4dce:	40 e8       	ldi	r20, 0x80	; 128
    4dd0:	55 e2       	ldi	r21, 0x25	; 37
    4dd2:	60 e0       	ldi	r22, 0x00	; 0
    4dd4:	70 e0       	ldi	r23, 0x00	; 0
    4dd6:	84 d0       	rcall	.+264    	; 0x4ee0 <serial_create>
    4dd8:	90 93 1a 19 	sts	0x191A, r25	; 0x80191a <_serial+0x1>
    4ddc:	80 93 19 19 	sts	0x1919, r24	; 0x801919 <_serial>
    4de0:	0f 91       	pop	r16
    4de2:	ef 90       	pop	r14
    4de4:	cf 90       	pop	r12
    4de6:	af 90       	pop	r10
    4de8:	9f 90       	pop	r9
    4dea:	8f 90       	pop	r8
    4dec:	08 95       	ret

00004dee <mh_z19_injectCallBack>:
    4dee:	90 93 15 19 	sts	0x1915, r25	; 0x801915 <_appCallBack+0x1>
    4df2:	80 93 14 19 	sts	0x1914, r24	; 0x801914 <_appCallBack>
    4df6:	08 95       	ret

00004df8 <mh_z19_takeMeassuring>:
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
    4dfc:	cd b7       	in	r28, 0x3d	; 61
    4dfe:	de b7       	in	r29, 0x3e	; 62
    4e00:	29 97       	sbiw	r28, 0x09	; 9
    4e02:	0f b6       	in	r0, 0x3f	; 63
    4e04:	f8 94       	cli
    4e06:	de bf       	out	0x3e, r29	; 62
    4e08:	0f be       	out	0x3f, r0	; 63
    4e0a:	cd bf       	out	0x3d, r28	; 61
    4e0c:	89 e0       	ldi	r24, 0x09	; 9
    4e0e:	e2 e4       	ldi	r30, 0x42	; 66
    4e10:	f2 e0       	ldi	r31, 0x02	; 2
    4e12:	9e 01       	movw	r18, r28
    4e14:	2f 5f       	subi	r18, 0xFF	; 255
    4e16:	3f 4f       	sbci	r19, 0xFF	; 255
    4e18:	d9 01       	movw	r26, r18
    4e1a:	01 90       	ld	r0, Z+
    4e1c:	0d 92       	st	X+, r0
    4e1e:	8a 95       	dec	r24
    4e20:	e1 f7       	brne	.-8      	; 0x4e1a <mh_z19_takeMeassuring+0x22>
    4e22:	10 92 18 19 	sts	0x1918, r1	; 0x801918 <_ppm+0x1>
    4e26:	10 92 17 19 	sts	0x1917, r1	; 0x801917 <_ppm>
    4e2a:	80 91 19 19 	lds	r24, 0x1919	; 0x801919 <_serial>
    4e2e:	90 91 1a 19 	lds	r25, 0x191A	; 0x80191a <_serial+0x1>
    4e32:	00 97       	sbiw	r24, 0x00	; 0
    4e34:	31 f0       	breq	.+12     	; 0x4e42 <mh_z19_takeMeassuring+0x4a>
    4e36:	42 2f       	mov	r20, r18
    4e38:	53 2f       	mov	r21, r19
    4e3a:	69 e0       	ldi	r22, 0x09	; 9
    4e3c:	22 d1       	rcall	.+580    	; 0x5082 <serial_sendBytes>
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	01 c0       	rjmp	.+2      	; 0x4e44 <mh_z19_takeMeassuring+0x4c>
    4e42:	82 e0       	ldi	r24, 0x02	; 2
    4e44:	29 96       	adiw	r28, 0x09	; 9
    4e46:	0f b6       	in	r0, 0x3f	; 63
    4e48:	f8 94       	cli
    4e4a:	de bf       	out	0x3e, r29	; 62
    4e4c:	0f be       	out	0x3f, r0	; 63
    4e4e:	cd bf       	out	0x3d, r28	; 61
    4e50:	df 91       	pop	r29
    4e52:	cf 91       	pop	r28
    4e54:	08 95       	ret

00004e56 <mh_z19_getCo2Ppm>:
    4e56:	20 91 17 19 	lds	r18, 0x1917	; 0x801917 <_ppm>
    4e5a:	30 91 18 19 	lds	r19, 0x1918	; 0x801918 <_ppm+0x1>
    4e5e:	21 15       	cp	r18, r1
    4e60:	31 05       	cpc	r19, r1
    4e62:	29 f4       	brne	.+10     	; 0x4e6e <mh_z19_getCo2Ppm+0x18>
    4e64:	fc 01       	movw	r30, r24
    4e66:	11 82       	std	Z+1, r1	; 0x01
    4e68:	10 82       	st	Z, r1
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	08 95       	ret
    4e6e:	fc 01       	movw	r30, r24
    4e70:	31 83       	std	Z+1, r19	; 0x01
    4e72:	20 83       	st	Z, r18
    4e74:	80 e0       	ldi	r24, 0x00	; 0
    4e76:	08 95       	ret

00004e78 <rc_servo_setPosition>:
    4e78:	65 36       	cpi	r22, 0x65	; 101
    4e7a:	0c f0       	brlt	.+2      	; 0x4e7e <rc_servo_setPosition+0x6>
    4e7c:	64 e6       	ldi	r22, 0x64	; 100
    4e7e:	6c 39       	cpi	r22, 0x9C	; 156
    4e80:	0c f4       	brge	.+2      	; 0x4e84 <rc_servo_setPosition+0xc>
    4e82:	6c e9       	ldi	r22, 0x9C	; 156
    4e84:	96 ef       	ldi	r25, 0xF6	; 246
    4e86:	69 02       	muls	r22, r25
    4e88:	b0 01       	movw	r22, r0
    4e8a:	11 24       	eor	r1, r1
    4e8c:	68 54       	subi	r22, 0x48	; 72
    4e8e:	74 4f       	sbci	r23, 0xF4	; 244
    4e90:	81 11       	cpse	r24, r1
    4e92:	05 c0       	rjmp	.+10     	; 0x4e9e <rc_servo_setPosition+0x26>
    4e94:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4e98:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4e9c:	08 95       	ret
    4e9e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4ea2:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4ea6:	08 95       	ret

00004ea8 <rc_servo_initialise>:
    4ea8:	ea e0       	ldi	r30, 0x0A	; 10
    4eaa:	f1 e0       	ldi	r31, 0x01	; 1
    4eac:	80 81       	ld	r24, Z
    4eae:	88 61       	ori	r24, 0x18	; 24
    4eb0:	80 83       	st	Z, r24
    4eb2:	8f e3       	ldi	r24, 0x3F	; 63
    4eb4:	9c e9       	ldi	r25, 0x9C	; 156
    4eb6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4eba:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4ebe:	60 e0       	ldi	r22, 0x00	; 0
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	da df       	rcall	.-76     	; 0x4e78 <rc_servo_setPosition>
    4ec4:	60 e0       	ldi	r22, 0x00	; 0
    4ec6:	81 e0       	ldi	r24, 0x01	; 1
    4ec8:	d7 df       	rcall	.-82     	; 0x4e78 <rc_servo_setPosition>
    4eca:	e0 e2       	ldi	r30, 0x20	; 32
    4ecc:	f1 e0       	ldi	r31, 0x01	; 1
    4ece:	80 81       	ld	r24, Z
    4ed0:	82 6a       	ori	r24, 0xA2	; 162
    4ed2:	80 83       	st	Z, r24
    4ed4:	e1 e2       	ldi	r30, 0x21	; 33
    4ed6:	f1 e0       	ldi	r31, 0x01	; 1
    4ed8:	80 81       	ld	r24, Z
    4eda:	8a 61       	ori	r24, 0x1A	; 26
    4edc:	80 83       	st	Z, r24
    4ede:	08 95       	ret

00004ee0 <serial_create>:
    4ee0:	2f 92       	push	r2
    4ee2:	3f 92       	push	r3
    4ee4:	4f 92       	push	r4
    4ee6:	5f 92       	push	r5
    4ee8:	6f 92       	push	r6
    4eea:	7f 92       	push	r7
    4eec:	8f 92       	push	r8
    4eee:	9f 92       	push	r9
    4ef0:	af 92       	push	r10
    4ef2:	cf 92       	push	r12
    4ef4:	ef 92       	push	r14
    4ef6:	ff 92       	push	r15
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
    4f00:	cd b7       	in	r28, 0x3d	; 61
    4f02:	de b7       	in	r29, 0x3e	; 62
    4f04:	f8 2e       	mov	r15, r24
    4f06:	2a 01       	movw	r4, r20
    4f08:	3b 01       	movw	r6, r22
    4f0a:	88 e0       	ldi	r24, 0x08	; 8
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	0e 94 9b 34 	call	0x6936	; 0x6936 <malloc>
    4f12:	8c 01       	movw	r16, r24
    4f14:	8f 2d       	mov	r24, r15
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	fc 01       	movw	r30, r24
    4f1a:	ee 0f       	add	r30, r30
    4f1c:	ff 1f       	adc	r31, r31
    4f1e:	e5 5e       	subi	r30, 0xE5	; 229
    4f20:	f6 4e       	sbci	r31, 0xE6	; 230
    4f22:	11 83       	std	Z+1, r17	; 0x01
    4f24:	00 83       	st	Z, r16
    4f26:	01 15       	cp	r16, r1
    4f28:	11 05       	cpc	r17, r1
    4f2a:	09 f4       	brne	.+2      	; 0x4f2e <serial_create+0x4e>
    4f2c:	6d c0       	rjmp	.+218    	; 0x5008 <serial_create+0x128>
    4f2e:	88 0f       	add	r24, r24
    4f30:	99 1f       	adc	r25, r25
    4f32:	fc 01       	movw	r30, r24
    4f34:	e5 5f       	subi	r30, 0xF5	; 245
    4f36:	fd 4f       	sbci	r31, 0xFD	; 253
    4f38:	80 81       	ld	r24, Z
    4f3a:	91 81       	ldd	r25, Z+1	; 0x01
    4f3c:	d8 01       	movw	r26, r16
    4f3e:	8d 93       	st	X+, r24
    4f40:	9c 93       	st	X, r25
    4f42:	8c 2d       	mov	r24, r12
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	88 0f       	add	r24, r24
    4f48:	99 1f       	adc	r25, r25
    4f4a:	88 0f       	add	r24, r24
    4f4c:	99 1f       	adc	r25, r25
    4f4e:	0e 94 9b 34 	call	0x6936	; 0x6936 <malloc>
    4f52:	1c 01       	movw	r2, r24
    4f54:	86 e0       	ldi	r24, 0x06	; 6
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	0e 94 9b 34 	call	0x6936	; 0x6936 <malloc>
    4f5c:	7c 01       	movw	r14, r24
    4f5e:	4c 2d       	mov	r20, r12
    4f60:	b1 01       	movw	r22, r2
    4f62:	f4 d6       	rcall	.+3560   	; 0x5d4c <fifo_init>
    4f64:	f8 01       	movw	r30, r16
    4f66:	f5 82       	std	Z+5, r15	; 0x05
    4f68:	e4 82       	std	Z+4, r14	; 0x04
    4f6a:	8a 2d       	mov	r24, r10
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	88 0f       	add	r24, r24
    4f70:	99 1f       	adc	r25, r25
    4f72:	88 0f       	add	r24, r24
    4f74:	99 1f       	adc	r25, r25
    4f76:	0e 94 9b 34 	call	0x6936	; 0x6936 <malloc>
    4f7a:	1c 01       	movw	r2, r24
    4f7c:	86 e0       	ldi	r24, 0x06	; 6
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	0e 94 9b 34 	call	0x6936	; 0x6936 <malloc>
    4f84:	7c 01       	movw	r14, r24
    4f86:	4a 2d       	mov	r20, r10
    4f88:	b1 01       	movw	r22, r2
    4f8a:	e0 d6       	rcall	.+3520   	; 0x5d4c <fifo_init>
    4f8c:	d8 01       	movw	r26, r16
    4f8e:	13 96       	adiw	r26, 0x03	; 3
    4f90:	fc 92       	st	X, r15
    4f92:	ee 92       	st	-X, r14
    4f94:	12 97       	sbiw	r26, 0x02	; 2
    4f96:	17 96       	adiw	r26, 0x07	; 7
    4f98:	9c 92       	st	X, r9
    4f9a:	8e 92       	st	-X, r8
    4f9c:	16 97       	sbiw	r26, 0x06	; 6
    4f9e:	ff b6       	in	r15, 0x3f	; 63
    4fa0:	f8 94       	cli
    4fa2:	ed 91       	ld	r30, X+
    4fa4:	fc 91       	ld	r31, X
    4fa6:	11 97       	sbiw	r26, 0x01	; 1
    4fa8:	36 97       	sbiw	r30, 0x06	; 6
    4faa:	80 81       	ld	r24, Z
    4fac:	82 60       	ori	r24, 0x02	; 2
    4fae:	80 83       	st	Z, r24
    4fb0:	8d 90       	ld	r8, X+
    4fb2:	9c 90       	ld	r9, X
    4fb4:	c3 01       	movw	r24, r6
    4fb6:	b2 01       	movw	r22, r4
    4fb8:	0e 94 4a 33 	call	0x6694	; 0x6694 <__floatunsisf>
    4fbc:	20 e0       	ldi	r18, 0x00	; 0
    4fbe:	30 e0       	ldi	r19, 0x00	; 0
    4fc0:	40 e0       	ldi	r20, 0x00	; 0
    4fc2:	51 e4       	ldi	r21, 0x41	; 65
    4fc4:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <__mulsf3>
    4fc8:	9b 01       	movw	r18, r22
    4fca:	ac 01       	movw	r20, r24
    4fcc:	60 e0       	ldi	r22, 0x00	; 0
    4fce:	74 e2       	ldi	r23, 0x24	; 36
    4fd0:	84 e7       	ldi	r24, 0x74	; 116
    4fd2:	9b e4       	ldi	r25, 0x4B	; 75
    4fd4:	0e 94 b1 32 	call	0x6562	; 0x6562 <__divsf3>
    4fd8:	20 e0       	ldi	r18, 0x00	; 0
    4fda:	30 e0       	ldi	r19, 0x00	; 0
    4fdc:	40 e8       	ldi	r20, 0x80	; 128
    4fde:	5f e3       	ldi	r21, 0x3F	; 63
    4fe0:	0e 94 4c 32 	call	0x6498	; 0x6498 <__subsf3>
    4fe4:	0e 94 1e 33 	call	0x663c	; 0x663c <__fixunssfsi>
    4fe8:	f4 01       	movw	r30, r8
    4fea:	32 97       	sbiw	r30, 0x02	; 2
    4fec:	60 83       	st	Z, r22
    4fee:	d8 01       	movw	r26, r16
    4ff0:	ed 91       	ld	r30, X+
    4ff2:	fc 91       	ld	r31, X
    4ff4:	11 97       	sbiw	r26, 0x01	; 1
    4ff6:	35 97       	sbiw	r30, 0x05	; 5
    4ff8:	88 e9       	ldi	r24, 0x98	; 152
    4ffa:	80 83       	st	Z, r24
    4ffc:	ed 91       	ld	r30, X+
    4ffe:	fc 91       	ld	r31, X
    5000:	34 97       	sbiw	r30, 0x04	; 4
    5002:	86 e0       	ldi	r24, 0x06	; 6
    5004:	80 83       	st	Z, r24
    5006:	ff be       	out	0x3f, r15	; 63
    5008:	c8 01       	movw	r24, r16
    500a:	df 91       	pop	r29
    500c:	cf 91       	pop	r28
    500e:	1f 91       	pop	r17
    5010:	0f 91       	pop	r16
    5012:	ff 90       	pop	r15
    5014:	ef 90       	pop	r14
    5016:	cf 90       	pop	r12
    5018:	af 90       	pop	r10
    501a:	9f 90       	pop	r9
    501c:	8f 90       	pop	r8
    501e:	7f 90       	pop	r7
    5020:	6f 90       	pop	r6
    5022:	5f 90       	pop	r5
    5024:	4f 90       	pop	r4
    5026:	3f 90       	pop	r3
    5028:	2f 90       	pop	r2
    502a:	08 95       	ret

0000502c <serial_sendByte>:
    502c:	cf 93       	push	r28
    502e:	df 93       	push	r29
    5030:	dc 01       	movw	r26, r24
    5032:	89 2b       	or	r24, r25
    5034:	01 f1       	breq	.+64     	; 0x5076 <serial_sendByte+0x4a>
    5036:	12 96       	adiw	r26, 0x02	; 2
    5038:	ed 91       	ld	r30, X+
    503a:	fc 91       	ld	r31, X
    503c:	13 97       	sbiw	r26, 0x03	; 3
    503e:	93 81       	ldd	r25, Z+3	; 0x03
    5040:	82 81       	ldd	r24, Z+2	; 0x02
    5042:	25 81       	ldd	r18, Z+5	; 0x05
    5044:	98 1b       	sub	r25, r24
    5046:	92 23       	and	r25, r18
    5048:	84 81       	ldd	r24, Z+4	; 0x04
    504a:	98 17       	cp	r25, r24
    504c:	b1 f0       	breq	.+44     	; 0x507a <serial_sendByte+0x4e>
    504e:	83 81       	ldd	r24, Z+3	; 0x03
    5050:	26 95       	lsr	r18
    5052:	28 23       	and	r18, r24
    5054:	c0 81       	ld	r28, Z
    5056:	d1 81       	ldd	r29, Z+1	; 0x01
    5058:	c2 0f       	add	r28, r18
    505a:	d1 1d       	adc	r29, r1
    505c:	68 83       	st	Y, r22
    505e:	8f 5f       	subi	r24, 0xFF	; 255
    5060:	95 81       	ldd	r25, Z+5	; 0x05
    5062:	89 23       	and	r24, r25
    5064:	83 83       	std	Z+3, r24	; 0x03
    5066:	ed 91       	ld	r30, X+
    5068:	fc 91       	ld	r31, X
    506a:	35 97       	sbiw	r30, 0x05	; 5
    506c:	80 81       	ld	r24, Z
    506e:	80 62       	ori	r24, 0x20	; 32
    5070:	80 83       	st	Z, r24
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	03 c0       	rjmp	.+6      	; 0x507c <serial_sendByte+0x50>
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	01 c0       	rjmp	.+2      	; 0x507c <serial_sendByte+0x50>
    507a:	82 e0       	ldi	r24, 0x02	; 2
    507c:	df 91       	pop	r29
    507e:	cf 91       	pop	r28
    5080:	08 95       	ret

00005082 <serial_sendBytes>:
    5082:	ef 92       	push	r14
    5084:	ff 92       	push	r15
    5086:	0f 93       	push	r16
    5088:	1f 93       	push	r17
    508a:	cf 93       	push	r28
    508c:	df 93       	push	r29
    508e:	7c 01       	movw	r14, r24
    5090:	00 97       	sbiw	r24, 0x00	; 0
    5092:	09 f4       	brne	.+2      	; 0x5096 <serial_sendBytes+0x14>
    5094:	41 c0       	rjmp	.+130    	; 0x5118 <serial_sendBytes+0x96>
    5096:	dc 01       	movw	r26, r24
    5098:	12 96       	adiw	r26, 0x02	; 2
    509a:	ed 91       	ld	r30, X+
    509c:	fc 91       	ld	r31, X
    509e:	13 97       	sbiw	r26, 0x03	; 3
    50a0:	93 81       	ldd	r25, Z+3	; 0x03
    50a2:	82 81       	ldd	r24, Z+2	; 0x02
    50a4:	98 1b       	sub	r25, r24
    50a6:	85 81       	ldd	r24, Z+5	; 0x05
    50a8:	98 23       	and	r25, r24
    50aa:	84 81       	ldd	r24, Z+4	; 0x04
    50ac:	89 1b       	sub	r24, r25
    50ae:	86 17       	cp	r24, r22
    50b0:	a8 f1       	brcs	.+106    	; 0x511c <serial_sendBytes+0x9a>
    50b2:	66 23       	and	r22, r22
    50b4:	41 f1       	breq	.+80     	; 0x5106 <serial_sendBytes+0x84>
    50b6:	84 2f       	mov	r24, r20
    50b8:	95 2f       	mov	r25, r21
    50ba:	dc 01       	movw	r26, r24
    50bc:	61 50       	subi	r22, 0x01	; 1
    50be:	46 2f       	mov	r20, r22
    50c0:	50 e0       	ldi	r21, 0x00	; 0
    50c2:	4f 5f       	subi	r20, 0xFF	; 255
    50c4:	5f 4f       	sbci	r21, 0xFF	; 255
    50c6:	48 0f       	add	r20, r24
    50c8:	59 1f       	adc	r21, r25
    50ca:	e7 01       	movw	r28, r14
    50cc:	ea 81       	ldd	r30, Y+2	; 0x02
    50ce:	fb 81       	ldd	r31, Y+3	; 0x03
    50d0:	93 81       	ldd	r25, Z+3	; 0x03
    50d2:	82 81       	ldd	r24, Z+2	; 0x02
    50d4:	25 81       	ldd	r18, Z+5	; 0x05
    50d6:	98 1b       	sub	r25, r24
    50d8:	92 23       	and	r25, r18
    50da:	84 81       	ldd	r24, Z+4	; 0x04
    50dc:	98 17       	cp	r25, r24
    50de:	79 f0       	breq	.+30     	; 0x50fe <serial_sendBytes+0x7c>
    50e0:	8c 91       	ld	r24, X
    50e2:	93 81       	ldd	r25, Z+3	; 0x03
    50e4:	26 95       	lsr	r18
    50e6:	29 23       	and	r18, r25
    50e8:	60 81       	ld	r22, Z
    50ea:	71 81       	ldd	r23, Z+1	; 0x01
    50ec:	8b 01       	movw	r16, r22
    50ee:	02 0f       	add	r16, r18
    50f0:	11 1d       	adc	r17, r1
    50f2:	e8 01       	movw	r28, r16
    50f4:	88 83       	st	Y, r24
    50f6:	9f 5f       	subi	r25, 0xFF	; 255
    50f8:	85 81       	ldd	r24, Z+5	; 0x05
    50fa:	98 23       	and	r25, r24
    50fc:	93 83       	std	Z+3, r25	; 0x03
    50fe:	11 96       	adiw	r26, 0x01	; 1
    5100:	a4 17       	cp	r26, r20
    5102:	b5 07       	cpc	r27, r21
    5104:	11 f7       	brne	.-60     	; 0x50ca <serial_sendBytes+0x48>
    5106:	d7 01       	movw	r26, r14
    5108:	ed 91       	ld	r30, X+
    510a:	fc 91       	ld	r31, X
    510c:	35 97       	sbiw	r30, 0x05	; 5
    510e:	80 81       	ld	r24, Z
    5110:	80 62       	ori	r24, 0x20	; 32
    5112:	80 83       	st	Z, r24
    5114:	80 e0       	ldi	r24, 0x00	; 0
    5116:	03 c0       	rjmp	.+6      	; 0x511e <serial_sendBytes+0x9c>
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	01 c0       	rjmp	.+2      	; 0x511e <serial_sendBytes+0x9c>
    511c:	82 e0       	ldi	r24, 0x02	; 2
    511e:	df 91       	pop	r29
    5120:	cf 91       	pop	r28
    5122:	1f 91       	pop	r17
    5124:	0f 91       	pop	r16
    5126:	ff 90       	pop	r15
    5128:	ef 90       	pop	r14
    512a:	08 95       	ret

0000512c <serial_getByte>:
    512c:	00 97       	sbiw	r24, 0x00	; 0
    512e:	d1 f0       	breq	.+52     	; 0x5164 <serial_getByte+0x38>
    5130:	dc 01       	movw	r26, r24
    5132:	14 96       	adiw	r26, 0x04	; 4
    5134:	ed 91       	ld	r30, X+
    5136:	fc 91       	ld	r31, X
    5138:	15 97       	sbiw	r26, 0x05	; 5
    513a:	93 81       	ldd	r25, Z+3	; 0x03
    513c:	82 81       	ldd	r24, Z+2	; 0x02
    513e:	98 17       	cp	r25, r24
    5140:	99 f0       	breq	.+38     	; 0x5168 <serial_getByte+0x3c>
    5142:	92 81       	ldd	r25, Z+2	; 0x02
    5144:	85 81       	ldd	r24, Z+5	; 0x05
    5146:	86 95       	lsr	r24
    5148:	89 23       	and	r24, r25
    514a:	a0 81       	ld	r26, Z
    514c:	b1 81       	ldd	r27, Z+1	; 0x01
    514e:	a8 0f       	add	r26, r24
    5150:	b1 1d       	adc	r27, r1
    5152:	8c 91       	ld	r24, X
    5154:	db 01       	movw	r26, r22
    5156:	8c 93       	st	X, r24
    5158:	9f 5f       	subi	r25, 0xFF	; 255
    515a:	85 81       	ldd	r24, Z+5	; 0x05
    515c:	98 23       	and	r25, r24
    515e:	92 83       	std	Z+2, r25	; 0x02
    5160:	80 e0       	ldi	r24, 0x00	; 0
    5162:	08 95       	ret
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	08 95       	ret
    5168:	83 e0       	ldi	r24, 0x03	; 3
    516a:	08 95       	ret

0000516c <__vector_25>:
    516c:	1f 92       	push	r1
    516e:	0f 92       	push	r0
    5170:	0f b6       	in	r0, 0x3f	; 63
    5172:	0f 92       	push	r0
    5174:	11 24       	eor	r1, r1
    5176:	0b b6       	in	r0, 0x3b	; 59
    5178:	0f 92       	push	r0
    517a:	2f 93       	push	r18
    517c:	3f 93       	push	r19
    517e:	4f 93       	push	r20
    5180:	5f 93       	push	r21
    5182:	6f 93       	push	r22
    5184:	7f 93       	push	r23
    5186:	8f 93       	push	r24
    5188:	9f 93       	push	r25
    518a:	af 93       	push	r26
    518c:	bf 93       	push	r27
    518e:	cf 93       	push	r28
    5190:	df 93       	push	r29
    5192:	ef 93       	push	r30
    5194:	ff 93       	push	r31
    5196:	a0 91 1b 19 	lds	r26, 0x191B	; 0x80191b <_ser_handle>
    519a:	b0 91 1c 19 	lds	r27, 0x191C	; 0x80191c <_ser_handle+0x1>
    519e:	10 97       	sbiw	r26, 0x00	; 0
    51a0:	11 f1       	breq	.+68     	; 0x51e6 <__vector_25+0x7a>
    51a2:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    51a6:	14 96       	adiw	r26, 0x04	; 4
    51a8:	ed 91       	ld	r30, X+
    51aa:	fc 91       	ld	r31, X
    51ac:	15 97       	sbiw	r26, 0x05	; 5
    51ae:	93 81       	ldd	r25, Z+3	; 0x03
    51b0:	82 81       	ldd	r24, Z+2	; 0x02
    51b2:	25 81       	ldd	r18, Z+5	; 0x05
    51b4:	98 1b       	sub	r25, r24
    51b6:	92 23       	and	r25, r18
    51b8:	84 81       	ldd	r24, Z+4	; 0x04
    51ba:	98 17       	cp	r25, r24
    51bc:	61 f0       	breq	.+24     	; 0x51d6 <__vector_25+0x6a>
    51be:	83 81       	ldd	r24, Z+3	; 0x03
    51c0:	26 95       	lsr	r18
    51c2:	28 23       	and	r18, r24
    51c4:	c0 81       	ld	r28, Z
    51c6:	d1 81       	ldd	r29, Z+1	; 0x01
    51c8:	c2 0f       	add	r28, r18
    51ca:	d1 1d       	adc	r29, r1
    51cc:	68 83       	st	Y, r22
    51ce:	8f 5f       	subi	r24, 0xFF	; 255
    51d0:	95 81       	ldd	r25, Z+5	; 0x05
    51d2:	89 23       	and	r24, r25
    51d4:	83 83       	std	Z+3, r24	; 0x03
    51d6:	16 96       	adiw	r26, 0x06	; 6
    51d8:	ed 91       	ld	r30, X+
    51da:	fc 91       	ld	r31, X
    51dc:	17 97       	sbiw	r26, 0x07	; 7
    51de:	30 97       	sbiw	r30, 0x00	; 0
    51e0:	11 f0       	breq	.+4      	; 0x51e6 <__vector_25+0x7a>
    51e2:	cd 01       	movw	r24, r26
    51e4:	19 95       	eicall
    51e6:	ff 91       	pop	r31
    51e8:	ef 91       	pop	r30
    51ea:	df 91       	pop	r29
    51ec:	cf 91       	pop	r28
    51ee:	bf 91       	pop	r27
    51f0:	af 91       	pop	r26
    51f2:	9f 91       	pop	r25
    51f4:	8f 91       	pop	r24
    51f6:	7f 91       	pop	r23
    51f8:	6f 91       	pop	r22
    51fa:	5f 91       	pop	r21
    51fc:	4f 91       	pop	r20
    51fe:	3f 91       	pop	r19
    5200:	2f 91       	pop	r18
    5202:	0f 90       	pop	r0
    5204:	0b be       	out	0x3b, r0	; 59
    5206:	0f 90       	pop	r0
    5208:	0f be       	out	0x3f, r0	; 63
    520a:	0f 90       	pop	r0
    520c:	1f 90       	pop	r1
    520e:	18 95       	reti

00005210 <__vector_26>:
    5210:	1f 92       	push	r1
    5212:	0f 92       	push	r0
    5214:	0f b6       	in	r0, 0x3f	; 63
    5216:	0f 92       	push	r0
    5218:	11 24       	eor	r1, r1
    521a:	0b b6       	in	r0, 0x3b	; 59
    521c:	0f 92       	push	r0
    521e:	2f 93       	push	r18
    5220:	8f 93       	push	r24
    5222:	9f 93       	push	r25
    5224:	af 93       	push	r26
    5226:	bf 93       	push	r27
    5228:	ef 93       	push	r30
    522a:	ff 93       	push	r31
    522c:	e0 91 1b 19 	lds	r30, 0x191B	; 0x80191b <_ser_handle>
    5230:	f0 91 1c 19 	lds	r31, 0x191C	; 0x80191c <_ser_handle+0x1>
    5234:	30 97       	sbiw	r30, 0x00	; 0
    5236:	b9 f0       	breq	.+46     	; 0x5266 <__vector_26+0x56>
    5238:	02 80       	ldd	r0, Z+2	; 0x02
    523a:	f3 81       	ldd	r31, Z+3	; 0x03
    523c:	e0 2d       	mov	r30, r0
    523e:	93 81       	ldd	r25, Z+3	; 0x03
    5240:	82 81       	ldd	r24, Z+2	; 0x02
    5242:	98 17       	cp	r25, r24
    5244:	b1 f0       	breq	.+44     	; 0x5272 <__vector_26+0x62>
    5246:	92 81       	ldd	r25, Z+2	; 0x02
    5248:	85 81       	ldd	r24, Z+5	; 0x05
    524a:	28 2f       	mov	r18, r24
    524c:	26 95       	lsr	r18
    524e:	29 23       	and	r18, r25
    5250:	a0 81       	ld	r26, Z
    5252:	b1 81       	ldd	r27, Z+1	; 0x01
    5254:	a2 0f       	add	r26, r18
    5256:	b1 1d       	adc	r27, r1
    5258:	2c 91       	ld	r18, X
    525a:	9f 5f       	subi	r25, 0xFF	; 255
    525c:	89 23       	and	r24, r25
    525e:	82 83       	std	Z+2, r24	; 0x02
    5260:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5264:	0b c0       	rjmp	.+22     	; 0x527c <__vector_26+0x6c>
    5266:	e1 ec       	ldi	r30, 0xC1	; 193
    5268:	f0 e0       	ldi	r31, 0x00	; 0
    526a:	80 81       	ld	r24, Z
    526c:	8f 7d       	andi	r24, 0xDF	; 223
    526e:	80 83       	st	Z, r24
    5270:	05 c0       	rjmp	.+10     	; 0x527c <__vector_26+0x6c>
    5272:	e1 ec       	ldi	r30, 0xC1	; 193
    5274:	f0 e0       	ldi	r31, 0x00	; 0
    5276:	80 81       	ld	r24, Z
    5278:	8f 7d       	andi	r24, 0xDF	; 223
    527a:	80 83       	st	Z, r24
    527c:	ff 91       	pop	r31
    527e:	ef 91       	pop	r30
    5280:	bf 91       	pop	r27
    5282:	af 91       	pop	r26
    5284:	9f 91       	pop	r25
    5286:	8f 91       	pop	r24
    5288:	2f 91       	pop	r18
    528a:	0f 90       	pop	r0
    528c:	0b be       	out	0x3b, r0	; 59
    528e:	0f 90       	pop	r0
    5290:	0f be       	out	0x3f, r0	; 63
    5292:	0f 90       	pop	r0
    5294:	1f 90       	pop	r1
    5296:	18 95       	reti

00005298 <__vector_36>:
    5298:	1f 92       	push	r1
    529a:	0f 92       	push	r0
    529c:	0f b6       	in	r0, 0x3f	; 63
    529e:	0f 92       	push	r0
    52a0:	11 24       	eor	r1, r1
    52a2:	0b b6       	in	r0, 0x3b	; 59
    52a4:	0f 92       	push	r0
    52a6:	2f 93       	push	r18
    52a8:	3f 93       	push	r19
    52aa:	4f 93       	push	r20
    52ac:	5f 93       	push	r21
    52ae:	6f 93       	push	r22
    52b0:	7f 93       	push	r23
    52b2:	8f 93       	push	r24
    52b4:	9f 93       	push	r25
    52b6:	af 93       	push	r26
    52b8:	bf 93       	push	r27
    52ba:	cf 93       	push	r28
    52bc:	df 93       	push	r29
    52be:	ef 93       	push	r30
    52c0:	ff 93       	push	r31
    52c2:	a0 91 1d 19 	lds	r26, 0x191D	; 0x80191d <_ser_handle+0x2>
    52c6:	b0 91 1e 19 	lds	r27, 0x191E	; 0x80191e <_ser_handle+0x3>
    52ca:	10 97       	sbiw	r26, 0x00	; 0
    52cc:	11 f1       	breq	.+68     	; 0x5312 <__vector_36+0x7a>
    52ce:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    52d2:	14 96       	adiw	r26, 0x04	; 4
    52d4:	ed 91       	ld	r30, X+
    52d6:	fc 91       	ld	r31, X
    52d8:	15 97       	sbiw	r26, 0x05	; 5
    52da:	93 81       	ldd	r25, Z+3	; 0x03
    52dc:	82 81       	ldd	r24, Z+2	; 0x02
    52de:	25 81       	ldd	r18, Z+5	; 0x05
    52e0:	98 1b       	sub	r25, r24
    52e2:	92 23       	and	r25, r18
    52e4:	84 81       	ldd	r24, Z+4	; 0x04
    52e6:	98 17       	cp	r25, r24
    52e8:	61 f0       	breq	.+24     	; 0x5302 <__vector_36+0x6a>
    52ea:	83 81       	ldd	r24, Z+3	; 0x03
    52ec:	26 95       	lsr	r18
    52ee:	28 23       	and	r18, r24
    52f0:	c0 81       	ld	r28, Z
    52f2:	d1 81       	ldd	r29, Z+1	; 0x01
    52f4:	c2 0f       	add	r28, r18
    52f6:	d1 1d       	adc	r29, r1
    52f8:	68 83       	st	Y, r22
    52fa:	8f 5f       	subi	r24, 0xFF	; 255
    52fc:	95 81       	ldd	r25, Z+5	; 0x05
    52fe:	89 23       	and	r24, r25
    5300:	83 83       	std	Z+3, r24	; 0x03
    5302:	16 96       	adiw	r26, 0x06	; 6
    5304:	ed 91       	ld	r30, X+
    5306:	fc 91       	ld	r31, X
    5308:	17 97       	sbiw	r26, 0x07	; 7
    530a:	30 97       	sbiw	r30, 0x00	; 0
    530c:	11 f0       	breq	.+4      	; 0x5312 <__vector_36+0x7a>
    530e:	cd 01       	movw	r24, r26
    5310:	19 95       	eicall
    5312:	ff 91       	pop	r31
    5314:	ef 91       	pop	r30
    5316:	df 91       	pop	r29
    5318:	cf 91       	pop	r28
    531a:	bf 91       	pop	r27
    531c:	af 91       	pop	r26
    531e:	9f 91       	pop	r25
    5320:	8f 91       	pop	r24
    5322:	7f 91       	pop	r23
    5324:	6f 91       	pop	r22
    5326:	5f 91       	pop	r21
    5328:	4f 91       	pop	r20
    532a:	3f 91       	pop	r19
    532c:	2f 91       	pop	r18
    532e:	0f 90       	pop	r0
    5330:	0b be       	out	0x3b, r0	; 59
    5332:	0f 90       	pop	r0
    5334:	0f be       	out	0x3f, r0	; 63
    5336:	0f 90       	pop	r0
    5338:	1f 90       	pop	r1
    533a:	18 95       	reti

0000533c <__vector_37>:
    533c:	1f 92       	push	r1
    533e:	0f 92       	push	r0
    5340:	0f b6       	in	r0, 0x3f	; 63
    5342:	0f 92       	push	r0
    5344:	11 24       	eor	r1, r1
    5346:	0b b6       	in	r0, 0x3b	; 59
    5348:	0f 92       	push	r0
    534a:	2f 93       	push	r18
    534c:	8f 93       	push	r24
    534e:	9f 93       	push	r25
    5350:	af 93       	push	r26
    5352:	bf 93       	push	r27
    5354:	ef 93       	push	r30
    5356:	ff 93       	push	r31
    5358:	e0 91 1d 19 	lds	r30, 0x191D	; 0x80191d <_ser_handle+0x2>
    535c:	f0 91 1e 19 	lds	r31, 0x191E	; 0x80191e <_ser_handle+0x3>
    5360:	30 97       	sbiw	r30, 0x00	; 0
    5362:	b9 f0       	breq	.+46     	; 0x5392 <__vector_37+0x56>
    5364:	02 80       	ldd	r0, Z+2	; 0x02
    5366:	f3 81       	ldd	r31, Z+3	; 0x03
    5368:	e0 2d       	mov	r30, r0
    536a:	93 81       	ldd	r25, Z+3	; 0x03
    536c:	82 81       	ldd	r24, Z+2	; 0x02
    536e:	98 17       	cp	r25, r24
    5370:	b1 f0       	breq	.+44     	; 0x539e <__vector_37+0x62>
    5372:	92 81       	ldd	r25, Z+2	; 0x02
    5374:	85 81       	ldd	r24, Z+5	; 0x05
    5376:	28 2f       	mov	r18, r24
    5378:	26 95       	lsr	r18
    537a:	29 23       	and	r18, r25
    537c:	a0 81       	ld	r26, Z
    537e:	b1 81       	ldd	r27, Z+1	; 0x01
    5380:	a2 0f       	add	r26, r18
    5382:	b1 1d       	adc	r27, r1
    5384:	2c 91       	ld	r18, X
    5386:	9f 5f       	subi	r25, 0xFF	; 255
    5388:	89 23       	and	r24, r25
    538a:	82 83       	std	Z+2, r24	; 0x02
    538c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5390:	0b c0       	rjmp	.+22     	; 0x53a8 <__vector_37+0x6c>
    5392:	e9 ec       	ldi	r30, 0xC9	; 201
    5394:	f0 e0       	ldi	r31, 0x00	; 0
    5396:	80 81       	ld	r24, Z
    5398:	8f 7d       	andi	r24, 0xDF	; 223
    539a:	80 83       	st	Z, r24
    539c:	05 c0       	rjmp	.+10     	; 0x53a8 <__vector_37+0x6c>
    539e:	e9 ec       	ldi	r30, 0xC9	; 201
    53a0:	f0 e0       	ldi	r31, 0x00	; 0
    53a2:	80 81       	ld	r24, Z
    53a4:	8f 7d       	andi	r24, 0xDF	; 223
    53a6:	80 83       	st	Z, r24
    53a8:	ff 91       	pop	r31
    53aa:	ef 91       	pop	r30
    53ac:	bf 91       	pop	r27
    53ae:	af 91       	pop	r26
    53b0:	9f 91       	pop	r25
    53b2:	8f 91       	pop	r24
    53b4:	2f 91       	pop	r18
    53b6:	0f 90       	pop	r0
    53b8:	0b be       	out	0x3b, r0	; 59
    53ba:	0f 90       	pop	r0
    53bc:	0f be       	out	0x3f, r0	; 63
    53be:	0f 90       	pop	r0
    53c0:	1f 90       	pop	r1
    53c2:	18 95       	reti

000053c4 <__vector_51>:
    53c4:	1f 92       	push	r1
    53c6:	0f 92       	push	r0
    53c8:	0f b6       	in	r0, 0x3f	; 63
    53ca:	0f 92       	push	r0
    53cc:	11 24       	eor	r1, r1
    53ce:	0b b6       	in	r0, 0x3b	; 59
    53d0:	0f 92       	push	r0
    53d2:	2f 93       	push	r18
    53d4:	3f 93       	push	r19
    53d6:	4f 93       	push	r20
    53d8:	5f 93       	push	r21
    53da:	6f 93       	push	r22
    53dc:	7f 93       	push	r23
    53de:	8f 93       	push	r24
    53e0:	9f 93       	push	r25
    53e2:	af 93       	push	r26
    53e4:	bf 93       	push	r27
    53e6:	cf 93       	push	r28
    53e8:	df 93       	push	r29
    53ea:	ef 93       	push	r30
    53ec:	ff 93       	push	r31
    53ee:	a0 91 1f 19 	lds	r26, 0x191F	; 0x80191f <_ser_handle+0x4>
    53f2:	b0 91 20 19 	lds	r27, 0x1920	; 0x801920 <_ser_handle+0x5>
    53f6:	10 97       	sbiw	r26, 0x00	; 0
    53f8:	11 f1       	breq	.+68     	; 0x543e <__vector_51+0x7a>
    53fa:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    53fe:	14 96       	adiw	r26, 0x04	; 4
    5400:	ed 91       	ld	r30, X+
    5402:	fc 91       	ld	r31, X
    5404:	15 97       	sbiw	r26, 0x05	; 5
    5406:	93 81       	ldd	r25, Z+3	; 0x03
    5408:	82 81       	ldd	r24, Z+2	; 0x02
    540a:	25 81       	ldd	r18, Z+5	; 0x05
    540c:	98 1b       	sub	r25, r24
    540e:	92 23       	and	r25, r18
    5410:	84 81       	ldd	r24, Z+4	; 0x04
    5412:	98 17       	cp	r25, r24
    5414:	61 f0       	breq	.+24     	; 0x542e <__vector_51+0x6a>
    5416:	83 81       	ldd	r24, Z+3	; 0x03
    5418:	26 95       	lsr	r18
    541a:	28 23       	and	r18, r24
    541c:	c0 81       	ld	r28, Z
    541e:	d1 81       	ldd	r29, Z+1	; 0x01
    5420:	c2 0f       	add	r28, r18
    5422:	d1 1d       	adc	r29, r1
    5424:	68 83       	st	Y, r22
    5426:	8f 5f       	subi	r24, 0xFF	; 255
    5428:	95 81       	ldd	r25, Z+5	; 0x05
    542a:	89 23       	and	r24, r25
    542c:	83 83       	std	Z+3, r24	; 0x03
    542e:	16 96       	adiw	r26, 0x06	; 6
    5430:	ed 91       	ld	r30, X+
    5432:	fc 91       	ld	r31, X
    5434:	17 97       	sbiw	r26, 0x07	; 7
    5436:	30 97       	sbiw	r30, 0x00	; 0
    5438:	11 f0       	breq	.+4      	; 0x543e <__vector_51+0x7a>
    543a:	cd 01       	movw	r24, r26
    543c:	19 95       	eicall
    543e:	ff 91       	pop	r31
    5440:	ef 91       	pop	r30
    5442:	df 91       	pop	r29
    5444:	cf 91       	pop	r28
    5446:	bf 91       	pop	r27
    5448:	af 91       	pop	r26
    544a:	9f 91       	pop	r25
    544c:	8f 91       	pop	r24
    544e:	7f 91       	pop	r23
    5450:	6f 91       	pop	r22
    5452:	5f 91       	pop	r21
    5454:	4f 91       	pop	r20
    5456:	3f 91       	pop	r19
    5458:	2f 91       	pop	r18
    545a:	0f 90       	pop	r0
    545c:	0b be       	out	0x3b, r0	; 59
    545e:	0f 90       	pop	r0
    5460:	0f be       	out	0x3f, r0	; 63
    5462:	0f 90       	pop	r0
    5464:	1f 90       	pop	r1
    5466:	18 95       	reti

00005468 <__vector_52>:
    5468:	1f 92       	push	r1
    546a:	0f 92       	push	r0
    546c:	0f b6       	in	r0, 0x3f	; 63
    546e:	0f 92       	push	r0
    5470:	11 24       	eor	r1, r1
    5472:	0b b6       	in	r0, 0x3b	; 59
    5474:	0f 92       	push	r0
    5476:	2f 93       	push	r18
    5478:	8f 93       	push	r24
    547a:	9f 93       	push	r25
    547c:	af 93       	push	r26
    547e:	bf 93       	push	r27
    5480:	ef 93       	push	r30
    5482:	ff 93       	push	r31
    5484:	e0 91 1f 19 	lds	r30, 0x191F	; 0x80191f <_ser_handle+0x4>
    5488:	f0 91 20 19 	lds	r31, 0x1920	; 0x801920 <_ser_handle+0x5>
    548c:	30 97       	sbiw	r30, 0x00	; 0
    548e:	b9 f0       	breq	.+46     	; 0x54be <__vector_52+0x56>
    5490:	02 80       	ldd	r0, Z+2	; 0x02
    5492:	f3 81       	ldd	r31, Z+3	; 0x03
    5494:	e0 2d       	mov	r30, r0
    5496:	93 81       	ldd	r25, Z+3	; 0x03
    5498:	82 81       	ldd	r24, Z+2	; 0x02
    549a:	98 17       	cp	r25, r24
    549c:	b1 f0       	breq	.+44     	; 0x54ca <__vector_52+0x62>
    549e:	92 81       	ldd	r25, Z+2	; 0x02
    54a0:	85 81       	ldd	r24, Z+5	; 0x05
    54a2:	28 2f       	mov	r18, r24
    54a4:	26 95       	lsr	r18
    54a6:	29 23       	and	r18, r25
    54a8:	a0 81       	ld	r26, Z
    54aa:	b1 81       	ldd	r27, Z+1	; 0x01
    54ac:	a2 0f       	add	r26, r18
    54ae:	b1 1d       	adc	r27, r1
    54b0:	2c 91       	ld	r18, X
    54b2:	9f 5f       	subi	r25, 0xFF	; 255
    54b4:	89 23       	and	r24, r25
    54b6:	82 83       	std	Z+2, r24	; 0x02
    54b8:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    54bc:	0b c0       	rjmp	.+22     	; 0x54d4 <__vector_52+0x6c>
    54be:	e1 ed       	ldi	r30, 0xD1	; 209
    54c0:	f0 e0       	ldi	r31, 0x00	; 0
    54c2:	80 81       	ld	r24, Z
    54c4:	8f 7d       	andi	r24, 0xDF	; 223
    54c6:	80 83       	st	Z, r24
    54c8:	05 c0       	rjmp	.+10     	; 0x54d4 <__vector_52+0x6c>
    54ca:	e1 ed       	ldi	r30, 0xD1	; 209
    54cc:	f0 e0       	ldi	r31, 0x00	; 0
    54ce:	80 81       	ld	r24, Z
    54d0:	8f 7d       	andi	r24, 0xDF	; 223
    54d2:	80 83       	st	Z, r24
    54d4:	ff 91       	pop	r31
    54d6:	ef 91       	pop	r30
    54d8:	bf 91       	pop	r27
    54da:	af 91       	pop	r26
    54dc:	9f 91       	pop	r25
    54de:	8f 91       	pop	r24
    54e0:	2f 91       	pop	r18
    54e2:	0f 90       	pop	r0
    54e4:	0b be       	out	0x3b, r0	; 59
    54e6:	0f 90       	pop	r0
    54e8:	0f be       	out	0x3f, r0	; 63
    54ea:	0f 90       	pop	r0
    54ec:	1f 90       	pop	r1
    54ee:	18 95       	reti

000054f0 <__vector_54>:
    54f0:	1f 92       	push	r1
    54f2:	0f 92       	push	r0
    54f4:	0f b6       	in	r0, 0x3f	; 63
    54f6:	0f 92       	push	r0
    54f8:	11 24       	eor	r1, r1
    54fa:	0b b6       	in	r0, 0x3b	; 59
    54fc:	0f 92       	push	r0
    54fe:	2f 93       	push	r18
    5500:	3f 93       	push	r19
    5502:	4f 93       	push	r20
    5504:	5f 93       	push	r21
    5506:	6f 93       	push	r22
    5508:	7f 93       	push	r23
    550a:	8f 93       	push	r24
    550c:	9f 93       	push	r25
    550e:	af 93       	push	r26
    5510:	bf 93       	push	r27
    5512:	cf 93       	push	r28
    5514:	df 93       	push	r29
    5516:	ef 93       	push	r30
    5518:	ff 93       	push	r31
    551a:	a0 91 21 19 	lds	r26, 0x1921	; 0x801921 <_ser_handle+0x6>
    551e:	b0 91 22 19 	lds	r27, 0x1922	; 0x801922 <_ser_handle+0x7>
    5522:	10 97       	sbiw	r26, 0x00	; 0
    5524:	11 f1       	breq	.+68     	; 0x556a <__vector_54+0x7a>
    5526:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    552a:	14 96       	adiw	r26, 0x04	; 4
    552c:	ed 91       	ld	r30, X+
    552e:	fc 91       	ld	r31, X
    5530:	15 97       	sbiw	r26, 0x05	; 5
    5532:	93 81       	ldd	r25, Z+3	; 0x03
    5534:	82 81       	ldd	r24, Z+2	; 0x02
    5536:	25 81       	ldd	r18, Z+5	; 0x05
    5538:	98 1b       	sub	r25, r24
    553a:	92 23       	and	r25, r18
    553c:	84 81       	ldd	r24, Z+4	; 0x04
    553e:	98 17       	cp	r25, r24
    5540:	61 f0       	breq	.+24     	; 0x555a <__vector_54+0x6a>
    5542:	83 81       	ldd	r24, Z+3	; 0x03
    5544:	26 95       	lsr	r18
    5546:	28 23       	and	r18, r24
    5548:	c0 81       	ld	r28, Z
    554a:	d1 81       	ldd	r29, Z+1	; 0x01
    554c:	c2 0f       	add	r28, r18
    554e:	d1 1d       	adc	r29, r1
    5550:	68 83       	st	Y, r22
    5552:	8f 5f       	subi	r24, 0xFF	; 255
    5554:	95 81       	ldd	r25, Z+5	; 0x05
    5556:	89 23       	and	r24, r25
    5558:	83 83       	std	Z+3, r24	; 0x03
    555a:	16 96       	adiw	r26, 0x06	; 6
    555c:	ed 91       	ld	r30, X+
    555e:	fc 91       	ld	r31, X
    5560:	17 97       	sbiw	r26, 0x07	; 7
    5562:	30 97       	sbiw	r30, 0x00	; 0
    5564:	11 f0       	breq	.+4      	; 0x556a <__vector_54+0x7a>
    5566:	cd 01       	movw	r24, r26
    5568:	19 95       	eicall
    556a:	ff 91       	pop	r31
    556c:	ef 91       	pop	r30
    556e:	df 91       	pop	r29
    5570:	cf 91       	pop	r28
    5572:	bf 91       	pop	r27
    5574:	af 91       	pop	r26
    5576:	9f 91       	pop	r25
    5578:	8f 91       	pop	r24
    557a:	7f 91       	pop	r23
    557c:	6f 91       	pop	r22
    557e:	5f 91       	pop	r21
    5580:	4f 91       	pop	r20
    5582:	3f 91       	pop	r19
    5584:	2f 91       	pop	r18
    5586:	0f 90       	pop	r0
    5588:	0b be       	out	0x3b, r0	; 59
    558a:	0f 90       	pop	r0
    558c:	0f be       	out	0x3f, r0	; 63
    558e:	0f 90       	pop	r0
    5590:	1f 90       	pop	r1
    5592:	18 95       	reti

00005594 <__vector_55>:
    5594:	1f 92       	push	r1
    5596:	0f 92       	push	r0
    5598:	0f b6       	in	r0, 0x3f	; 63
    559a:	0f 92       	push	r0
    559c:	11 24       	eor	r1, r1
    559e:	0b b6       	in	r0, 0x3b	; 59
    55a0:	0f 92       	push	r0
    55a2:	2f 93       	push	r18
    55a4:	8f 93       	push	r24
    55a6:	9f 93       	push	r25
    55a8:	af 93       	push	r26
    55aa:	bf 93       	push	r27
    55ac:	ef 93       	push	r30
    55ae:	ff 93       	push	r31
    55b0:	e0 91 21 19 	lds	r30, 0x1921	; 0x801921 <_ser_handle+0x6>
    55b4:	f0 91 22 19 	lds	r31, 0x1922	; 0x801922 <_ser_handle+0x7>
    55b8:	30 97       	sbiw	r30, 0x00	; 0
    55ba:	b9 f0       	breq	.+46     	; 0x55ea <__vector_55+0x56>
    55bc:	02 80       	ldd	r0, Z+2	; 0x02
    55be:	f3 81       	ldd	r31, Z+3	; 0x03
    55c0:	e0 2d       	mov	r30, r0
    55c2:	93 81       	ldd	r25, Z+3	; 0x03
    55c4:	82 81       	ldd	r24, Z+2	; 0x02
    55c6:	98 17       	cp	r25, r24
    55c8:	b1 f0       	breq	.+44     	; 0x55f6 <__vector_55+0x62>
    55ca:	92 81       	ldd	r25, Z+2	; 0x02
    55cc:	85 81       	ldd	r24, Z+5	; 0x05
    55ce:	28 2f       	mov	r18, r24
    55d0:	26 95       	lsr	r18
    55d2:	29 23       	and	r18, r25
    55d4:	a0 81       	ld	r26, Z
    55d6:	b1 81       	ldd	r27, Z+1	; 0x01
    55d8:	a2 0f       	add	r26, r18
    55da:	b1 1d       	adc	r27, r1
    55dc:	2c 91       	ld	r18, X
    55de:	9f 5f       	subi	r25, 0xFF	; 255
    55e0:	89 23       	and	r24, r25
    55e2:	82 83       	std	Z+2, r24	; 0x02
    55e4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    55e8:	0b c0       	rjmp	.+22     	; 0x5600 <__vector_55+0x6c>
    55ea:	e1 e3       	ldi	r30, 0x31	; 49
    55ec:	f1 e0       	ldi	r31, 0x01	; 1
    55ee:	80 81       	ld	r24, Z
    55f0:	8f 7d       	andi	r24, 0xDF	; 223
    55f2:	80 83       	st	Z, r24
    55f4:	05 c0       	rjmp	.+10     	; 0x5600 <__vector_55+0x6c>
    55f6:	e1 e3       	ldi	r30, 0x31	; 49
    55f8:	f1 e0       	ldi	r31, 0x01	; 1
    55fa:	80 81       	ld	r24, Z
    55fc:	8f 7d       	andi	r24, 0xDF	; 223
    55fe:	80 83       	st	Z, r24
    5600:	ff 91       	pop	r31
    5602:	ef 91       	pop	r30
    5604:	bf 91       	pop	r27
    5606:	af 91       	pop	r26
    5608:	9f 91       	pop	r25
    560a:	8f 91       	pop	r24
    560c:	2f 91       	pop	r18
    560e:	0f 90       	pop	r0
    5610:	0b be       	out	0x3b, r0	; 59
    5612:	0f 90       	pop	r0
    5614:	0f be       	out	0x3f, r0	; 63
    5616:	0f 90       	pop	r0
    5618:	1f 90       	pop	r1
    561a:	18 95       	reti

0000561c <usart_getchar>:
    561c:	cf 93       	push	r28
    561e:	df 93       	push	r29
    5620:	1f 92       	push	r1
    5622:	cd b7       	in	r28, 0x3d	; 61
    5624:	de b7       	in	r29, 0x3e	; 62
    5626:	be 01       	movw	r22, r28
    5628:	6f 5f       	subi	r22, 0xFF	; 255
    562a:	7f 4f       	sbci	r23, 0xFF	; 255
    562c:	80 91 23 19 	lds	r24, 0x1923	; 0x801923 <_com_serial_instance>
    5630:	90 91 24 19 	lds	r25, 0x1924	; 0x801924 <_com_serial_instance+0x1>
    5634:	7b dd       	rcall	.-1290   	; 0x512c <serial_getByte>
    5636:	81 11       	cpse	r24, r1
    5638:	f6 cf       	rjmp	.-20     	; 0x5626 <usart_getchar+0xa>
    563a:	89 81       	ldd	r24, Y+1	; 0x01
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	0f 90       	pop	r0
    5640:	df 91       	pop	r29
    5642:	cf 91       	pop	r28
    5644:	08 95       	ret

00005646 <usart_putchar>:
    5646:	68 2f       	mov	r22, r24
    5648:	80 91 23 19 	lds	r24, 0x1923	; 0x801923 <_com_serial_instance>
    564c:	90 91 24 19 	lds	r25, 0x1924	; 0x801924 <_com_serial_instance+0x1>
    5650:	ed dc       	rcall	.-1574   	; 0x502c <serial_sendByte>
    5652:	80 e0       	ldi	r24, 0x00	; 0
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	08 95       	ret

00005658 <stdio_initialise>:
    5658:	8f 92       	push	r8
    565a:	9f 92       	push	r9
    565c:	af 92       	push	r10
    565e:	cf 92       	push	r12
    5660:	ef 92       	push	r14
    5662:	0f 93       	push	r16
    5664:	81 2c       	mov	r8, r1
    5666:	91 2c       	mov	r9, r1
    5668:	68 94       	set
    566a:	aa 24       	eor	r10, r10
    566c:	a7 f8       	bld	r10, 7
    566e:	68 94       	set
    5670:	cc 24       	eor	r12, r12
    5672:	c7 f8       	bld	r12, 7
    5674:	e1 2c       	mov	r14, r1
    5676:	00 e0       	ldi	r16, 0x00	; 0
    5678:	23 e0       	ldi	r18, 0x03	; 3
    567a:	40 e0       	ldi	r20, 0x00	; 0
    567c:	51 ee       	ldi	r21, 0xE1	; 225
    567e:	60 e0       	ldi	r22, 0x00	; 0
    5680:	70 e0       	ldi	r23, 0x00	; 0
    5682:	2e dc       	rcall	.-1956   	; 0x4ee0 <serial_create>
    5684:	90 93 24 19 	sts	0x1924, r25	; 0x801924 <_com_serial_instance+0x1>
    5688:	80 93 23 19 	sts	0x1923, r24	; 0x801923 <_com_serial_instance>
    568c:	eb e5       	ldi	r30, 0x5B	; 91
    568e:	f9 e1       	ldi	r31, 0x19	; 25
    5690:	83 e1       	ldi	r24, 0x13	; 19
    5692:	92 e0       	ldi	r25, 0x02	; 2
    5694:	91 83       	std	Z+1, r25	; 0x01
    5696:	80 83       	st	Z, r24
    5698:	93 83       	std	Z+3, r25	; 0x03
    569a:	82 83       	std	Z+2, r24	; 0x02
    569c:	0f 91       	pop	r16
    569e:	ef 90       	pop	r14
    56a0:	cf 90       	pop	r12
    56a2:	af 90       	pop	r10
    56a4:	9f 90       	pop	r9
    56a6:	8f 90       	pop	r8
    56a8:	08 95       	ret

000056aa <_turn_off>:
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	fc 01       	movw	r30, r24
    56ae:	ee 0f       	add	r30, r30
    56b0:	ff 1f       	adc	r31, r31
    56b2:	e8 0f       	add	r30, r24
    56b4:	f9 1f       	adc	r31, r25
    56b6:	ee 0f       	add	r30, r30
    56b8:	ff 1f       	adc	r31, r31
    56ba:	eb 5d       	subi	r30, 0xDB	; 219
    56bc:	f6 4e       	sbci	r31, 0xE6	; 230
    56be:	23 81       	ldd	r18, Z+3	; 0x03
    56c0:	21 11       	cpse	r18, r1
    56c2:	1f c0       	rjmp	.+62     	; 0x5702 <_turn_off+0x58>
    56c4:	9c 01       	movw	r18, r24
    56c6:	22 0f       	add	r18, r18
    56c8:	33 1f       	adc	r19, r19
    56ca:	f9 01       	movw	r30, r18
    56cc:	e8 0f       	add	r30, r24
    56ce:	f9 1f       	adc	r31, r25
    56d0:	ee 0f       	add	r30, r30
    56d2:	ff 1f       	adc	r31, r31
    56d4:	eb 5d       	subi	r30, 0xDB	; 219
    56d6:	f6 4e       	sbci	r31, 0xE6	; 230
    56d8:	a0 81       	ld	r26, Z
    56da:	b1 81       	ldd	r27, Z+1	; 0x01
    56dc:	4c 91       	ld	r20, X
    56de:	f9 01       	movw	r30, r18
    56e0:	e8 0f       	add	r30, r24
    56e2:	f9 1f       	adc	r31, r25
    56e4:	ee 0f       	add	r30, r30
    56e6:	ff 1f       	adc	r31, r31
    56e8:	eb 5d       	subi	r30, 0xDB	; 219
    56ea:	f6 4e       	sbci	r31, 0xE6	; 230
    56ec:	81 e0       	ldi	r24, 0x01	; 1
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	02 80       	ldd	r0, Z+2	; 0x02
    56f2:	02 c0       	rjmp	.+4      	; 0x56f8 <_turn_off+0x4e>
    56f4:	88 0f       	add	r24, r24
    56f6:	99 1f       	adc	r25, r25
    56f8:	0a 94       	dec	r0
    56fa:	e2 f7       	brpl	.-8      	; 0x56f4 <_turn_off+0x4a>
    56fc:	84 2b       	or	r24, r20
    56fe:	8c 93       	st	X, r24
    5700:	08 95       	ret
    5702:	fc 01       	movw	r30, r24
    5704:	ee 0f       	add	r30, r30
    5706:	ff 1f       	adc	r31, r31
    5708:	df 01       	movw	r26, r30
    570a:	a8 0f       	add	r26, r24
    570c:	b9 1f       	adc	r27, r25
    570e:	aa 0f       	add	r26, r26
    5710:	bb 1f       	adc	r27, r27
    5712:	ab 5d       	subi	r26, 0xDB	; 219
    5714:	b6 4e       	sbci	r27, 0xE6	; 230
    5716:	0d 90       	ld	r0, X+
    5718:	bc 91       	ld	r27, X
    571a:	a0 2d       	mov	r26, r0
    571c:	2c 91       	ld	r18, X
    571e:	e8 0f       	add	r30, r24
    5720:	f9 1f       	adc	r31, r25
    5722:	ee 0f       	add	r30, r30
    5724:	ff 1f       	adc	r31, r31
    5726:	eb 5d       	subi	r30, 0xDB	; 219
    5728:	f6 4e       	sbci	r31, 0xE6	; 230
    572a:	81 e0       	ldi	r24, 0x01	; 1
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	02 80       	ldd	r0, Z+2	; 0x02
    5730:	02 c0       	rjmp	.+4      	; 0x5736 <_turn_off+0x8c>
    5732:	88 0f       	add	r24, r24
    5734:	99 1f       	adc	r25, r25
    5736:	0a 94       	dec	r0
    5738:	e2 f7       	brpl	.-8      	; 0x5732 <_turn_off+0x88>
    573a:	80 95       	com	r24
    573c:	82 23       	and	r24, r18
    573e:	8c 93       	st	X, r24
    5740:	08 95       	ret

00005742 <_turn_on>:
    5742:	90 e0       	ldi	r25, 0x00	; 0
    5744:	fc 01       	movw	r30, r24
    5746:	ee 0f       	add	r30, r30
    5748:	ff 1f       	adc	r31, r31
    574a:	e8 0f       	add	r30, r24
    574c:	f9 1f       	adc	r31, r25
    574e:	ee 0f       	add	r30, r30
    5750:	ff 1f       	adc	r31, r31
    5752:	eb 5d       	subi	r30, 0xDB	; 219
    5754:	f6 4e       	sbci	r31, 0xE6	; 230
    5756:	23 81       	ldd	r18, Z+3	; 0x03
    5758:	21 11       	cpse	r18, r1
    575a:	20 c0       	rjmp	.+64     	; 0x579c <_turn_on+0x5a>
    575c:	9c 01       	movw	r18, r24
    575e:	22 0f       	add	r18, r18
    5760:	33 1f       	adc	r19, r19
    5762:	f9 01       	movw	r30, r18
    5764:	e8 0f       	add	r30, r24
    5766:	f9 1f       	adc	r31, r25
    5768:	ee 0f       	add	r30, r30
    576a:	ff 1f       	adc	r31, r31
    576c:	eb 5d       	subi	r30, 0xDB	; 219
    576e:	f6 4e       	sbci	r31, 0xE6	; 230
    5770:	a0 81       	ld	r26, Z
    5772:	b1 81       	ldd	r27, Z+1	; 0x01
    5774:	4c 91       	ld	r20, X
    5776:	f9 01       	movw	r30, r18
    5778:	e8 0f       	add	r30, r24
    577a:	f9 1f       	adc	r31, r25
    577c:	ee 0f       	add	r30, r30
    577e:	ff 1f       	adc	r31, r31
    5780:	eb 5d       	subi	r30, 0xDB	; 219
    5782:	f6 4e       	sbci	r31, 0xE6	; 230
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	90 e0       	ldi	r25, 0x00	; 0
    5788:	02 80       	ldd	r0, Z+2	; 0x02
    578a:	02 c0       	rjmp	.+4      	; 0x5790 <_turn_on+0x4e>
    578c:	88 0f       	add	r24, r24
    578e:	99 1f       	adc	r25, r25
    5790:	0a 94       	dec	r0
    5792:	e2 f7       	brpl	.-8      	; 0x578c <_turn_on+0x4a>
    5794:	80 95       	com	r24
    5796:	84 23       	and	r24, r20
    5798:	8c 93       	st	X, r24
    579a:	08 95       	ret
    579c:	fc 01       	movw	r30, r24
    579e:	ee 0f       	add	r30, r30
    57a0:	ff 1f       	adc	r31, r31
    57a2:	df 01       	movw	r26, r30
    57a4:	a8 0f       	add	r26, r24
    57a6:	b9 1f       	adc	r27, r25
    57a8:	aa 0f       	add	r26, r26
    57aa:	bb 1f       	adc	r27, r27
    57ac:	ab 5d       	subi	r26, 0xDB	; 219
    57ae:	b6 4e       	sbci	r27, 0xE6	; 230
    57b0:	0d 90       	ld	r0, X+
    57b2:	bc 91       	ld	r27, X
    57b4:	a0 2d       	mov	r26, r0
    57b6:	2c 91       	ld	r18, X
    57b8:	e8 0f       	add	r30, r24
    57ba:	f9 1f       	adc	r31, r25
    57bc:	ee 0f       	add	r30, r30
    57be:	ff 1f       	adc	r31, r31
    57c0:	eb 5d       	subi	r30, 0xDB	; 219
    57c2:	f6 4e       	sbci	r31, 0xE6	; 230
    57c4:	81 e0       	ldi	r24, 0x01	; 1
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	02 80       	ldd	r0, Z+2	; 0x02
    57ca:	02 c0       	rjmp	.+4      	; 0x57d0 <_turn_on+0x8e>
    57cc:	88 0f       	add	r24, r24
    57ce:	99 1f       	adc	r25, r25
    57d0:	0a 94       	dec	r0
    57d2:	e2 f7       	brpl	.-8      	; 0x57cc <_turn_on+0x8a>
    57d4:	82 2b       	or	r24, r18
    57d6:	8c 93       	st	X, r24
    57d8:	08 95       	ret

000057da <_hal_led_task>:
    57da:	cc 24       	eor	r12, r12
    57dc:	c3 94       	inc	r12
    57de:	d1 2c       	mov	r13, r1
    57e0:	68 94       	set
    57e2:	bb 24       	eor	r11, r11
    57e4:	b2 f8       	bld	r11, 2
    57e6:	c5 e2       	ldi	r28, 0x25	; 37
    57e8:	d9 e1       	ldi	r29, 0x19	; 25
    57ea:	10 e0       	ldi	r17, 0x00	; 0
    57ec:	8c 81       	ldd	r24, Y+4	; 0x04
    57ee:	81 30       	cpi	r24, 0x01	; 1
    57f0:	81 f0       	breq	.+32     	; 0x5812 <_hal_led_task+0x38>
    57f2:	18 f1       	brcs	.+70     	; 0x583a <_hal_led_task+0x60>
    57f4:	82 30       	cpi	r24, 0x02	; 2
    57f6:	61 f5       	brne	.+88     	; 0x5850 <_hal_led_task+0x76>
    57f8:	e8 81       	ld	r30, Y
    57fa:	f9 81       	ldd	r31, Y+1	; 0x01
    57fc:	20 81       	ld	r18, Z
    57fe:	c6 01       	movw	r24, r12
    5800:	0a 80       	ldd	r0, Y+2	; 0x02
    5802:	02 c0       	rjmp	.+4      	; 0x5808 <_hal_led_task+0x2e>
    5804:	88 0f       	add	r24, r24
    5806:	99 1f       	adc	r25, r25
    5808:	0a 94       	dec	r0
    580a:	e2 f7       	brpl	.-8      	; 0x5804 <_hal_led_task+0x2a>
    580c:	82 27       	eor	r24, r18
    580e:	80 83       	st	Z, r24
    5810:	1f c0       	rjmp	.+62     	; 0x5850 <_hal_led_task+0x76>
    5812:	8d 81       	ldd	r24, Y+5	; 0x05
    5814:	8f 5f       	subi	r24, 0xFF	; 255
    5816:	86 30       	cpi	r24, 0x06	; 6
    5818:	10 f4       	brcc	.+4      	; 0x581e <_hal_led_task+0x44>
    581a:	8d 83       	std	Y+5, r24	; 0x05
    581c:	19 c0       	rjmp	.+50     	; 0x5850 <_hal_led_task+0x76>
    581e:	1d 82       	std	Y+5, r1	; 0x05
    5820:	e8 81       	ld	r30, Y
    5822:	f9 81       	ldd	r31, Y+1	; 0x01
    5824:	20 81       	ld	r18, Z
    5826:	c6 01       	movw	r24, r12
    5828:	0a 80       	ldd	r0, Y+2	; 0x02
    582a:	02 c0       	rjmp	.+4      	; 0x5830 <_hal_led_task+0x56>
    582c:	88 0f       	add	r24, r24
    582e:	99 1f       	adc	r25, r25
    5830:	0a 94       	dec	r0
    5832:	e2 f7       	brpl	.-8      	; 0x582c <_hal_led_task+0x52>
    5834:	82 27       	eor	r24, r18
    5836:	80 83       	st	Z, r24
    5838:	0b c0       	rjmp	.+22     	; 0x5850 <_hal_led_task+0x76>
    583a:	0d 81       	ldd	r16, Y+5	; 0x05
    583c:	00 23       	and	r16, r16
    583e:	29 f0       	breq	.+10     	; 0x584a <_hal_led_task+0x70>
    5840:	81 2f       	mov	r24, r17
    5842:	7f df       	rcall	.-258    	; 0x5742 <_turn_on>
    5844:	01 50       	subi	r16, 0x01	; 1
    5846:	0d 83       	std	Y+5, r16	; 0x05
    5848:	03 c0       	rjmp	.+6      	; 0x5850 <_hal_led_task+0x76>
    584a:	bc 82       	std	Y+4, r11	; 0x04
    584c:	81 2f       	mov	r24, r17
    584e:	2d df       	rcall	.-422    	; 0x56aa <_turn_off>
    5850:	1f 5f       	subi	r17, 0xFF	; 255
    5852:	26 96       	adiw	r28, 0x06	; 6
    5854:	14 30       	cpi	r17, 0x04	; 4
    5856:	51 f6       	brne	.-108    	; 0x57ec <_hal_led_task+0x12>
    5858:	6c e0       	ldi	r22, 0x0C	; 12
    585a:	70 e0       	ldi	r23, 0x00	; 0
    585c:	80 e0       	ldi	r24, 0x00	; 0
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	0e 94 02 14 	call	0x2804	; 0x2804 <vTaskDelay>
    5864:	c0 cf       	rjmp	.-128    	; 0x57e6 <_hal_led_task+0xc>

00005866 <status_leds_initialise>:
    5866:	ef 92       	push	r14
    5868:	ff 92       	push	r15
    586a:	0f 93       	push	r16
    586c:	1f 93       	push	r17
    586e:	cf 93       	push	r28
    5870:	df 93       	push	r29
    5872:	08 2f       	mov	r16, r24
    5874:	80 e4       	ldi	r24, 0x40	; 64
    5876:	87 b9       	out	0x07, r24	; 7
    5878:	c5 e2       	ldi	r28, 0x25	; 37
    587a:	d9 e1       	ldi	r29, 0x19	; 25
    587c:	0f 2e       	mov	r0, r31
    587e:	f8 e2       	ldi	r31, 0x28	; 40
    5880:	ef 2e       	mov	r14, r31
    5882:	f1 2c       	mov	r15, r1
    5884:	f0 2d       	mov	r31, r0
    5886:	f9 82       	std	Y+1, r15	; 0x01
    5888:	e8 82       	st	Y, r14
    588a:	86 e0       	ldi	r24, 0x06	; 6
    588c:	8a 83       	std	Y+2, r24	; 0x02
    588e:	1b 82       	std	Y+3, r1	; 0x03
    5890:	14 e0       	ldi	r17, 0x04	; 4
    5892:	1c 83       	std	Y+4, r17	; 0x04
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	09 df       	rcall	.-494    	; 0x56aa <_turn_off>
    5898:	80 e8       	ldi	r24, 0x80	; 128
    589a:	87 b9       	out	0x07, r24	; 7
    589c:	ff 82       	std	Y+7, r15	; 0x07
    589e:	ee 82       	std	Y+6, r14	; 0x06
    58a0:	87 e0       	ldi	r24, 0x07	; 7
    58a2:	88 87       	std	Y+8, r24	; 0x08
    58a4:	19 86       	std	Y+9, r1	; 0x09
    58a6:	1a 87       	std	Y+10, r17	; 0x0a
    58a8:	81 e0       	ldi	r24, 0x01	; 1
    58aa:	ff de       	rcall	.-514    	; 0x56aa <_turn_off>
    58ac:	80 e2       	ldi	r24, 0x20	; 32
    58ae:	83 bb       	out	0x13, r24	; 19
    58b0:	84 e3       	ldi	r24, 0x34	; 52
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	9d 87       	std	Y+13, r25	; 0x0d
    58b6:	8c 87       	std	Y+12, r24	; 0x0c
    58b8:	85 e0       	ldi	r24, 0x05	; 5
    58ba:	8e 87       	std	Y+14, r24	; 0x0e
    58bc:	1f 86       	std	Y+15, r1	; 0x0f
    58be:	18 8b       	std	Y+16, r17	; 0x10
    58c0:	82 e0       	ldi	r24, 0x02	; 2
    58c2:	f3 de       	rcall	.-538    	; 0x56aa <_turn_off>
    58c4:	80 e1       	ldi	r24, 0x10	; 16
    58c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    58ca:	82 e0       	ldi	r24, 0x02	; 2
    58cc:	91 e0       	ldi	r25, 0x01	; 1
    58ce:	9b 8b       	std	Y+19, r25	; 0x13
    58d0:	8a 8b       	std	Y+18, r24	; 0x12
    58d2:	1c 8b       	std	Y+20, r17	; 0x14
    58d4:	1d 8a       	std	Y+21, r1	; 0x15
    58d6:	1e 8b       	std	Y+22, r17	; 0x16
    58d8:	83 e0       	ldi	r24, 0x03	; 3
    58da:	e7 de       	rcall	.-562    	; 0x56aa <_turn_off>
    58dc:	e1 2c       	mov	r14, r1
    58de:	f1 2c       	mov	r15, r1
    58e0:	20 e0       	ldi	r18, 0x00	; 0
    58e2:	30 e0       	ldi	r19, 0x00	; 0
    58e4:	40 ec       	ldi	r20, 0xC0	; 192
    58e6:	50 e0       	ldi	r21, 0x00	; 0
    58e8:	66 e3       	ldi	r22, 0x36	; 54
    58ea:	79 e0       	ldi	r23, 0x09	; 9
    58ec:	8d ee       	ldi	r24, 0xED	; 237
    58ee:	9b e2       	ldi	r25, 0x2B	; 43
    58f0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
    58f4:	df 91       	pop	r29
    58f6:	cf 91       	pop	r28
    58f8:	1f 91       	pop	r17
    58fa:	0f 91       	pop	r16
    58fc:	ff 90       	pop	r15
    58fe:	ef 90       	pop	r14
    5900:	08 95       	ret

00005902 <status_leds_slowBlink>:
    5902:	cf 93       	push	r28
    5904:	df 93       	push	r29
    5906:	90 e0       	ldi	r25, 0x00	; 0
    5908:	fc 01       	movw	r30, r24
    590a:	ee 0f       	add	r30, r30
    590c:	ff 1f       	adc	r31, r31
    590e:	df 01       	movw	r26, r30
    5910:	a8 0f       	add	r26, r24
    5912:	b9 1f       	adc	r27, r25
    5914:	aa 0f       	add	r26, r26
    5916:	bb 1f       	adc	r27, r27
    5918:	ab 5d       	subi	r26, 0xDB	; 219
    591a:	b6 4e       	sbci	r27, 0xE6	; 230
    591c:	cd 91       	ld	r28, X+
    591e:	dc 91       	ld	r29, X
    5920:	11 97       	sbiw	r26, 0x01	; 1
    5922:	48 81       	ld	r20, Y
    5924:	21 e0       	ldi	r18, 0x01	; 1
    5926:	30 e0       	ldi	r19, 0x00	; 0
    5928:	12 96       	adiw	r26, 0x02	; 2
    592a:	0c 90       	ld	r0, X
    592c:	12 97       	sbiw	r26, 0x02	; 2
    592e:	02 c0       	rjmp	.+4      	; 0x5934 <status_leds_slowBlink+0x32>
    5930:	22 0f       	add	r18, r18
    5932:	33 1f       	adc	r19, r19
    5934:	0a 94       	dec	r0
    5936:	e2 f7       	brpl	.-8      	; 0x5930 <status_leds_slowBlink+0x2e>
    5938:	24 27       	eor	r18, r20
    593a:	28 83       	st	Y, r18
    593c:	fd 01       	movw	r30, r26
    593e:	81 e0       	ldi	r24, 0x01	; 1
    5940:	84 83       	std	Z+4, r24	; 0x04
    5942:	df 91       	pop	r29
    5944:	cf 91       	pop	r28
    5946:	08 95       	ret

00005948 <status_leds_fastBlink>:
    5948:	cf 93       	push	r28
    594a:	df 93       	push	r29
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	fc 01       	movw	r30, r24
    5950:	ee 0f       	add	r30, r30
    5952:	ff 1f       	adc	r31, r31
    5954:	df 01       	movw	r26, r30
    5956:	a8 0f       	add	r26, r24
    5958:	b9 1f       	adc	r27, r25
    595a:	aa 0f       	add	r26, r26
    595c:	bb 1f       	adc	r27, r27
    595e:	ab 5d       	subi	r26, 0xDB	; 219
    5960:	b6 4e       	sbci	r27, 0xE6	; 230
    5962:	cd 91       	ld	r28, X+
    5964:	dc 91       	ld	r29, X
    5966:	11 97       	sbiw	r26, 0x01	; 1
    5968:	48 81       	ld	r20, Y
    596a:	21 e0       	ldi	r18, 0x01	; 1
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	12 96       	adiw	r26, 0x02	; 2
    5970:	0c 90       	ld	r0, X
    5972:	12 97       	sbiw	r26, 0x02	; 2
    5974:	02 c0       	rjmp	.+4      	; 0x597a <status_leds_fastBlink+0x32>
    5976:	22 0f       	add	r18, r18
    5978:	33 1f       	adc	r19, r19
    597a:	0a 94       	dec	r0
    597c:	e2 f7       	brpl	.-8      	; 0x5976 <status_leds_fastBlink+0x2e>
    597e:	24 27       	eor	r18, r20
    5980:	28 83       	st	Y, r18
    5982:	fd 01       	movw	r30, r26
    5984:	82 e0       	ldi	r24, 0x02	; 2
    5986:	84 83       	std	Z+4, r24	; 0x04
    5988:	df 91       	pop	r29
    598a:	cf 91       	pop	r28
    598c:	08 95       	ret

0000598e <status_leds_ledOn>:
    598e:	28 2f       	mov	r18, r24
    5990:	30 e0       	ldi	r19, 0x00	; 0
    5992:	f9 01       	movw	r30, r18
    5994:	ee 0f       	add	r30, r30
    5996:	ff 1f       	adc	r31, r31
    5998:	e2 0f       	add	r30, r18
    599a:	f3 1f       	adc	r31, r19
    599c:	ee 0f       	add	r30, r30
    599e:	ff 1f       	adc	r31, r31
    59a0:	eb 5d       	subi	r30, 0xDB	; 219
    59a2:	f6 4e       	sbci	r31, 0xE6	; 230
    59a4:	93 e0       	ldi	r25, 0x03	; 3
    59a6:	94 83       	std	Z+4, r25	; 0x04
    59a8:	cc ce       	rjmp	.-616    	; 0x5742 <_turn_on>
    59aa:	08 95       	ret

000059ac <status_leds_ledOff>:
    59ac:	28 2f       	mov	r18, r24
    59ae:	30 e0       	ldi	r19, 0x00	; 0
    59b0:	f9 01       	movw	r30, r18
    59b2:	ee 0f       	add	r30, r30
    59b4:	ff 1f       	adc	r31, r31
    59b6:	e2 0f       	add	r30, r18
    59b8:	f3 1f       	adc	r31, r19
    59ba:	ee 0f       	add	r30, r30
    59bc:	ff 1f       	adc	r31, r31
    59be:	eb 5d       	subi	r30, 0xDB	; 219
    59c0:	f6 4e       	sbci	r31, 0xE6	; 230
    59c2:	94 e0       	ldi	r25, 0x04	; 4
    59c4:	94 83       	std	Z+4, r25	; 0x04
    59c6:	71 ce       	rjmp	.-798    	; 0x56aa <_turn_off>
    59c8:	08 95       	ret

000059ca <status_leds_longPuls>:
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	fc 01       	movw	r30, r24
    59ce:	ee 0f       	add	r30, r30
    59d0:	ff 1f       	adc	r31, r31
    59d2:	df 01       	movw	r26, r30
    59d4:	a8 0f       	add	r26, r24
    59d6:	b9 1f       	adc	r27, r25
    59d8:	aa 0f       	add	r26, r26
    59da:	bb 1f       	adc	r27, r27
    59dc:	ab 5d       	subi	r26, 0xDB	; 219
    59de:	b6 4e       	sbci	r27, 0xE6	; 230
    59e0:	26 e0       	ldi	r18, 0x06	; 6
    59e2:	15 96       	adiw	r26, 0x05	; 5
    59e4:	2c 93       	st	X, r18
    59e6:	15 97       	sbiw	r26, 0x05	; 5
    59e8:	fd 01       	movw	r30, r26
    59ea:	14 82       	std	Z+4, r1	; 0x04
    59ec:	08 95       	ret

000059ee <status_leds_shortPuls>:
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	fc 01       	movw	r30, r24
    59f2:	ee 0f       	add	r30, r30
    59f4:	ff 1f       	adc	r31, r31
    59f6:	df 01       	movw	r26, r30
    59f8:	a8 0f       	add	r26, r24
    59fa:	b9 1f       	adc	r27, r25
    59fc:	aa 0f       	add	r26, r26
    59fe:	bb 1f       	adc	r27, r27
    5a00:	ab 5d       	subi	r26, 0xDB	; 219
    5a02:	b6 4e       	sbci	r27, 0xE6	; 230
    5a04:	15 96       	adiw	r26, 0x05	; 5
    5a06:	1c 92       	st	X, r1
    5a08:	15 97       	sbiw	r26, 0x05	; 5
    5a0a:	fd 01       	movw	r30, r26
    5a0c:	14 82       	std	Z+4, r1	; 0x04
    5a0e:	08 95       	ret

00005a10 <_initTwiInterface>:
    5a10:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <_twiIsInitiated>
    5a14:	81 11       	cpse	r24, r1
    5a16:	0c c0       	rjmp	.+24     	; 0x5a30 <_initTwiInterface+0x20>
    5a18:	8c e0       	ldi	r24, 0x0C	; 12
    5a1a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5a1e:	8f ef       	ldi	r24, 0xFF	; 255
    5a20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5a24:	84 e0       	ldi	r24, 0x04	; 4
    5a26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a2a:	81 e0       	ldi	r24, 0x01	; 1
    5a2c:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <_twiIsInitiated>
    5a30:	08 95       	ret

00005a32 <twiCreate>:
    5a32:	af 92       	push	r10
    5a34:	bf 92       	push	r11
    5a36:	cf 92       	push	r12
    5a38:	df 92       	push	r13
    5a3a:	ef 92       	push	r14
    5a3c:	ff 92       	push	r15
    5a3e:	0f 93       	push	r16
    5a40:	1f 93       	push	r17
    5a42:	cf 93       	push	r28
    5a44:	df 93       	push	r29
    5a46:	a8 2e       	mov	r10, r24
    5a48:	b6 2e       	mov	r11, r22
    5a4a:	69 01       	movw	r12, r18
    5a4c:	7a 01       	movw	r14, r20
    5a4e:	84 e0       	ldi	r24, 0x04	; 4
    5a50:	90 e0       	ldi	r25, 0x00	; 0
    5a52:	71 d7       	rcall	.+3810   	; 0x6936 <malloc>
    5a54:	ec 01       	movw	r28, r24
    5a56:	89 2b       	or	r24, r25
    5a58:	61 f1       	breq	.+88     	; 0x5ab2 <twiCreate+0x80>
    5a5a:	a8 82       	st	Y, r10
    5a5c:	81 e0       	ldi	r24, 0x01	; 1
    5a5e:	b8 12       	cpse	r11, r24
    5a60:	12 c0       	rjmp	.+36     	; 0x5a86 <twiCreate+0x54>
    5a62:	c7 01       	movw	r24, r14
    5a64:	b6 01       	movw	r22, r12
    5a66:	20 ea       	ldi	r18, 0xA0	; 160
    5a68:	36 e8       	ldi	r19, 0x86	; 134
    5a6a:	41 e0       	ldi	r20, 0x01	; 1
    5a6c:	50 e0       	ldi	r21, 0x00	; 0
    5a6e:	16 d7       	rcall	.+3628   	; 0x689c <__udivmodsi4>
    5a70:	da 01       	movw	r26, r20
    5a72:	c9 01       	movw	r24, r18
    5a74:	40 97       	sbiw	r24, 0x10	; 16
    5a76:	a1 09       	sbc	r26, r1
    5a78:	b1 09       	sbc	r27, r1
    5a7a:	b6 95       	lsr	r27
    5a7c:	a7 95       	ror	r26
    5a7e:	97 95       	ror	r25
    5a80:	87 95       	ror	r24
    5a82:	89 83       	std	Y+1, r24	; 0x01
    5a84:	11 c0       	rjmp	.+34     	; 0x5aa8 <twiCreate+0x76>
    5a86:	c7 01       	movw	r24, r14
    5a88:	b6 01       	movw	r22, r12
    5a8a:	20 e8       	ldi	r18, 0x80	; 128
    5a8c:	3a e1       	ldi	r19, 0x1A	; 26
    5a8e:	46 e0       	ldi	r20, 0x06	; 6
    5a90:	50 e0       	ldi	r21, 0x00	; 0
    5a92:	04 d7       	rcall	.+3592   	; 0x689c <__udivmodsi4>
    5a94:	da 01       	movw	r26, r20
    5a96:	c9 01       	movw	r24, r18
    5a98:	40 97       	sbiw	r24, 0x10	; 16
    5a9a:	a1 09       	sbc	r26, r1
    5a9c:	b1 09       	sbc	r27, r1
    5a9e:	b6 95       	lsr	r27
    5aa0:	a7 95       	ror	r26
    5aa2:	97 95       	ror	r25
    5aa4:	87 95       	ror	r24
    5aa6:	89 83       	std	Y+1, r24	; 0x01
    5aa8:	1b 83       	std	Y+3, r17	; 0x03
    5aaa:	0a 83       	std	Y+2, r16	; 0x02
    5aac:	8c 2f       	mov	r24, r28
    5aae:	9d 2f       	mov	r25, r29
    5ab0:	02 c0       	rjmp	.+4      	; 0x5ab6 <twiCreate+0x84>
    5ab2:	80 e0       	ldi	r24, 0x00	; 0
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	df 91       	pop	r29
    5ab8:	cf 91       	pop	r28
    5aba:	1f 91       	pop	r17
    5abc:	0f 91       	pop	r16
    5abe:	ff 90       	pop	r15
    5ac0:	ef 90       	pop	r14
    5ac2:	df 90       	pop	r13
    5ac4:	cf 90       	pop	r12
    5ac6:	bf 90       	pop	r11
    5ac8:	af 90       	pop	r10
    5aca:	08 95       	ret

00005acc <twiIsBusy>:
    5acc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ad0:	81 70       	andi	r24, 0x01	; 1
    5ad2:	08 95       	ret

00005ad4 <twiTransmit>:
    5ad4:	ff 92       	push	r15
    5ad6:	0f 93       	push	r16
    5ad8:	1f 93       	push	r17
    5ada:	cf 93       	push	r28
    5adc:	df 93       	push	r29
    5ade:	00 97       	sbiw	r24, 0x00	; 0
    5ae0:	d1 f1       	breq	.+116    	; 0x5b56 <twiTransmit+0x82>
    5ae2:	4a 30       	cpi	r20, 0x0A	; 10
    5ae4:	d0 f5       	brcc	.+116    	; 0x5b5a <twiTransmit+0x86>
    5ae6:	f4 2e       	mov	r15, r20
    5ae8:	8b 01       	movw	r16, r22
    5aea:	ec 01       	movw	r28, r24
    5aec:	ef df       	rcall	.-34     	; 0x5acc <twiIsBusy>
    5aee:	81 11       	cpse	r24, r1
    5af0:	36 c0       	rjmp	.+108    	; 0x5b5e <twiTransmit+0x8a>
    5af2:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <_twiCurrentHandler>
    5af6:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <_twiCurrentHandler+0x1>
    5afa:	c8 17       	cp	r28, r24
    5afc:	d9 07       	cpc	r29, r25
    5afe:	41 f0       	breq	.+16     	; 0x5b10 <twiTransmit+0x3c>
    5b00:	87 df       	rcall	.-242    	; 0x5a10 <_initTwiInterface>
    5b02:	89 81       	ldd	r24, Y+1	; 0x01
    5b04:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5b08:	d0 93 3f 19 	sts	0x193F, r29	; 0x80193f <_twiCurrentHandler+0x1>
    5b0c:	c0 93 3e 19 	sts	0x193E, r28	; 0x80193e <_twiCurrentHandler>
    5b10:	81 e0       	ldi	r24, 0x01	; 1
    5b12:	8f 0d       	add	r24, r15
    5b14:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <_twiMessageLen>
    5b18:	88 81       	ld	r24, Y
    5b1a:	88 0f       	add	r24, r24
    5b1c:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <_twiMessageBuffer>
    5b20:	ff 20       	and	r15, r15
    5b22:	89 f0       	breq	.+34     	; 0x5b46 <twiTransmit+0x72>
    5b24:	f8 01       	movw	r30, r16
    5b26:	a2 e4       	ldi	r26, 0x42	; 66
    5b28:	b9 e1       	ldi	r27, 0x19	; 25
    5b2a:	4f ef       	ldi	r20, 0xFF	; 255
    5b2c:	4f 0d       	add	r20, r15
    5b2e:	64 2f       	mov	r22, r20
    5b30:	70 e0       	ldi	r23, 0x00	; 0
    5b32:	cb 01       	movw	r24, r22
    5b34:	01 96       	adiw	r24, 0x01	; 1
    5b36:	b8 01       	movw	r22, r16
    5b38:	68 0f       	add	r22, r24
    5b3a:	79 1f       	adc	r23, r25
    5b3c:	81 91       	ld	r24, Z+
    5b3e:	8d 93       	st	X+, r24
    5b40:	e6 17       	cp	r30, r22
    5b42:	f7 07       	cpc	r31, r23
    5b44:	d9 f7       	brne	.-10     	; 0x5b3c <twiTransmit+0x68>
    5b46:	88 ef       	ldi	r24, 0xF8	; 248
    5b48:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b4c:	85 ea       	ldi	r24, 0xA5	; 165
    5b4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b52:	84 e0       	ldi	r24, 0x04	; 4
    5b54:	05 c0       	rjmp	.+10     	; 0x5b60 <twiTransmit+0x8c>
    5b56:	86 e0       	ldi	r24, 0x06	; 6
    5b58:	03 c0       	rjmp	.+6      	; 0x5b60 <twiTransmit+0x8c>
    5b5a:	87 e0       	ldi	r24, 0x07	; 7
    5b5c:	01 c0       	rjmp	.+2      	; 0x5b60 <twiTransmit+0x8c>
    5b5e:	82 e0       	ldi	r24, 0x02	; 2
    5b60:	df 91       	pop	r29
    5b62:	cf 91       	pop	r28
    5b64:	1f 91       	pop	r17
    5b66:	0f 91       	pop	r16
    5b68:	ff 90       	pop	r15
    5b6a:	08 95       	ret

00005b6c <twiReceive>:
    5b6c:	1f 93       	push	r17
    5b6e:	cf 93       	push	r28
    5b70:	df 93       	push	r29
    5b72:	00 97       	sbiw	r24, 0x00	; 0
    5b74:	29 f1       	breq	.+74     	; 0x5bc0 <twiReceive+0x54>
    5b76:	6b 30       	cpi	r22, 0x0B	; 11
    5b78:	28 f5       	brcc	.+74     	; 0x5bc4 <twiReceive+0x58>
    5b7a:	16 2f       	mov	r17, r22
    5b7c:	ec 01       	movw	r28, r24
    5b7e:	a6 df       	rcall	.-180    	; 0x5acc <twiIsBusy>
    5b80:	81 11       	cpse	r24, r1
    5b82:	22 c0       	rjmp	.+68     	; 0x5bc8 <twiReceive+0x5c>
    5b84:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <_twiCurrentHandler>
    5b88:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <_twiCurrentHandler+0x1>
    5b8c:	c8 17       	cp	r28, r24
    5b8e:	d9 07       	cpc	r29, r25
    5b90:	41 f0       	breq	.+16     	; 0x5ba2 <twiReceive+0x36>
    5b92:	3e df       	rcall	.-388    	; 0x5a10 <_initTwiInterface>
    5b94:	89 81       	ldd	r24, Y+1	; 0x01
    5b96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5b9a:	d0 93 3f 19 	sts	0x193F, r29	; 0x80193f <_twiCurrentHandler+0x1>
    5b9e:	c0 93 3e 19 	sts	0x193E, r28	; 0x80193e <_twiCurrentHandler>
    5ba2:	10 93 40 19 	sts	0x1940, r17	; 0x801940 <_twiMessageLen>
    5ba6:	88 81       	ld	r24, Y
    5ba8:	88 0f       	add	r24, r24
    5baa:	81 60       	ori	r24, 0x01	; 1
    5bac:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <_twiMessageBuffer>
    5bb0:	88 ef       	ldi	r24, 0xF8	; 248
    5bb2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5bb6:	85 ea       	ldi	r24, 0xA5	; 165
    5bb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5bbc:	85 e0       	ldi	r24, 0x05	; 5
    5bbe:	05 c0       	rjmp	.+10     	; 0x5bca <twiReceive+0x5e>
    5bc0:	86 e0       	ldi	r24, 0x06	; 6
    5bc2:	03 c0       	rjmp	.+6      	; 0x5bca <twiReceive+0x5e>
    5bc4:	87 e0       	ldi	r24, 0x07	; 7
    5bc6:	01 c0       	rjmp	.+2      	; 0x5bca <twiReceive+0x5e>
    5bc8:	82 e0       	ldi	r24, 0x02	; 2
    5bca:	df 91       	pop	r29
    5bcc:	cf 91       	pop	r28
    5bce:	1f 91       	pop	r17
    5bd0:	08 95       	ret

00005bd2 <__vector_39>:
    5bd2:	1f 92       	push	r1
    5bd4:	0f 92       	push	r0
    5bd6:	0f b6       	in	r0, 0x3f	; 63
    5bd8:	0f 92       	push	r0
    5bda:	11 24       	eor	r1, r1
    5bdc:	0b b6       	in	r0, 0x3b	; 59
    5bde:	0f 92       	push	r0
    5be0:	2f 93       	push	r18
    5be2:	3f 93       	push	r19
    5be4:	4f 93       	push	r20
    5be6:	5f 93       	push	r21
    5be8:	6f 93       	push	r22
    5bea:	7f 93       	push	r23
    5bec:	8f 93       	push	r24
    5bee:	9f 93       	push	r25
    5bf0:	af 93       	push	r26
    5bf2:	bf 93       	push	r27
    5bf4:	ef 93       	push	r30
    5bf6:	ff 93       	push	r31
    5bf8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5bfc:	8e 2f       	mov	r24, r30
    5bfe:	90 e0       	ldi	r25, 0x00	; 0
    5c00:	fc 01       	movw	r30, r24
    5c02:	38 97       	sbiw	r30, 0x08	; 8
    5c04:	e1 35       	cpi	r30, 0x51	; 81
    5c06:	f1 05       	cpc	r31, r1
    5c08:	08 f0       	brcs	.+2      	; 0x5c0c <__vector_39+0x3a>
    5c0a:	75 c0       	rjmp	.+234    	; 0x5cf6 <__vector_39+0x124>
    5c0c:	88 27       	eor	r24, r24
    5c0e:	e4 58       	subi	r30, 0x84	; 132
    5c10:	ff 4f       	sbci	r31, 0xFF	; 255
    5c12:	8f 4f       	sbci	r24, 0xFF	; 255
    5c14:	65 c6       	rjmp	.+3274   	; 0x68e0 <__tablejump2__>
    5c16:	10 92 3d 19 	sts	0x193D, r1	; 0x80193d <_index.1885>
    5c1a:	e0 91 3d 19 	lds	r30, 0x193D	; 0x80193d <_index.1885>
    5c1e:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <_twiMessageLen>
    5c22:	e8 17       	cp	r30, r24
    5c24:	70 f4       	brcc	.+28     	; 0x5c42 <__vector_39+0x70>
    5c26:	81 e0       	ldi	r24, 0x01	; 1
    5c28:	8e 0f       	add	r24, r30
    5c2a:	80 93 3d 19 	sts	0x193D, r24	; 0x80193d <_index.1885>
    5c2e:	f0 e0       	ldi	r31, 0x00	; 0
    5c30:	ef 5b       	subi	r30, 0xBF	; 191
    5c32:	f6 4e       	sbci	r31, 0xE6	; 230
    5c34:	80 81       	ld	r24, Z
    5c36:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5c3a:	85 e8       	ldi	r24, 0x85	; 133
    5c3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c40:	72 c0       	rjmp	.+228    	; 0x5d26 <__vector_39+0x154>
    5c42:	84 e9       	ldi	r24, 0x94	; 148
    5c44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c48:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <_twiCurrentHandler>
    5c4c:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <_twiCurrentHandler+0x1>
    5c50:	dc 01       	movw	r26, r24
    5c52:	12 96       	adiw	r26, 0x02	; 2
    5c54:	ed 91       	ld	r30, X+
    5c56:	fc 91       	ld	r31, X
    5c58:	13 97       	sbiw	r26, 0x03	; 3
    5c5a:	30 97       	sbiw	r30, 0x00	; 0
    5c5c:	09 f4       	brne	.+2      	; 0x5c60 <__vector_39+0x8e>
    5c5e:	63 c0       	rjmp	.+198    	; 0x5d26 <__vector_39+0x154>
    5c60:	20 e0       	ldi	r18, 0x00	; 0
    5c62:	40 e0       	ldi	r20, 0x00	; 0
    5c64:	50 e0       	ldi	r21, 0x00	; 0
    5c66:	64 e0       	ldi	r22, 0x04	; 4
    5c68:	19 95       	eicall
    5c6a:	5d c0       	rjmp	.+186    	; 0x5d26 <__vector_39+0x154>
    5c6c:	e0 91 3d 19 	lds	r30, 0x193D	; 0x80193d <_index.1885>
    5c70:	81 e0       	ldi	r24, 0x01	; 1
    5c72:	8e 0f       	add	r24, r30
    5c74:	80 93 3d 19 	sts	0x193D, r24	; 0x80193d <_index.1885>
    5c78:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5c7c:	f0 e0       	ldi	r31, 0x00	; 0
    5c7e:	ef 5b       	subi	r30, 0xBF	; 191
    5c80:	f6 4e       	sbci	r31, 0xE6	; 230
    5c82:	80 83       	st	Z, r24
    5c84:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5c88:	80 34       	cpi	r24, 0x40	; 64
    5c8a:	11 f4       	brne	.+4      	; 0x5c90 <__vector_39+0xbe>
    5c8c:	10 92 3d 19 	sts	0x193D, r1	; 0x80193d <_index.1885>
    5c90:	20 91 3d 19 	lds	r18, 0x193D	; 0x80193d <_index.1885>
    5c94:	30 e0       	ldi	r19, 0x00	; 0
    5c96:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <_twiMessageLen>
    5c9a:	90 e0       	ldi	r25, 0x00	; 0
    5c9c:	01 97       	sbiw	r24, 0x01	; 1
    5c9e:	28 17       	cp	r18, r24
    5ca0:	39 07       	cpc	r19, r25
    5ca2:	24 f4       	brge	.+8      	; 0x5cac <__vector_39+0xda>
    5ca4:	85 ec       	ldi	r24, 0xC5	; 197
    5ca6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5caa:	3d c0       	rjmp	.+122    	; 0x5d26 <__vector_39+0x154>
    5cac:	85 e8       	ldi	r24, 0x85	; 133
    5cae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5cb2:	39 c0       	rjmp	.+114    	; 0x5d26 <__vector_39+0x154>
    5cb4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5cb8:	e0 91 3d 19 	lds	r30, 0x193D	; 0x80193d <_index.1885>
    5cbc:	f0 e0       	ldi	r31, 0x00	; 0
    5cbe:	ef 5b       	subi	r30, 0xBF	; 191
    5cc0:	f6 4e       	sbci	r31, 0xE6	; 230
    5cc2:	80 83       	st	Z, r24
    5cc4:	84 e9       	ldi	r24, 0x94	; 148
    5cc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5cca:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <_twiCurrentHandler>
    5cce:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <_twiCurrentHandler+0x1>
    5cd2:	dc 01       	movw	r26, r24
    5cd4:	12 96       	adiw	r26, 0x02	; 2
    5cd6:	ed 91       	ld	r30, X+
    5cd8:	fc 91       	ld	r31, X
    5cda:	13 97       	sbiw	r26, 0x03	; 3
    5cdc:	30 97       	sbiw	r30, 0x00	; 0
    5cde:	19 f1       	breq	.+70     	; 0x5d26 <__vector_39+0x154>
    5ce0:	20 91 40 19 	lds	r18, 0x1940	; 0x801940 <_twiMessageLen>
    5ce4:	41 e4       	ldi	r20, 0x41	; 65
    5ce6:	59 e1       	ldi	r21, 0x19	; 25
    5ce8:	65 e0       	ldi	r22, 0x05	; 5
    5cea:	19 95       	eicall
    5cec:	1c c0       	rjmp	.+56     	; 0x5d26 <__vector_39+0x154>
    5cee:	85 ea       	ldi	r24, 0xA5	; 165
    5cf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5cf4:	18 c0       	rjmp	.+48     	; 0x5d26 <__vector_39+0x154>
    5cf6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5cfa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5cfe:	84 e0       	ldi	r24, 0x04	; 4
    5d00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d04:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <_twiCurrentHandler>
    5d08:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <_twiCurrentHandler+0x1>
    5d0c:	dc 01       	movw	r26, r24
    5d0e:	12 96       	adiw	r26, 0x02	; 2
    5d10:	ed 91       	ld	r30, X+
    5d12:	fc 91       	ld	r31, X
    5d14:	13 97       	sbiw	r26, 0x03	; 3
    5d16:	30 97       	sbiw	r30, 0x00	; 0
    5d18:	31 f0       	breq	.+12     	; 0x5d26 <__vector_39+0x154>
    5d1a:	20 e0       	ldi	r18, 0x00	; 0
    5d1c:	40 e0       	ldi	r20, 0x00	; 0
    5d1e:	50 e0       	ldi	r21, 0x00	; 0
    5d20:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5d24:	19 95       	eicall
    5d26:	ff 91       	pop	r31
    5d28:	ef 91       	pop	r30
    5d2a:	bf 91       	pop	r27
    5d2c:	af 91       	pop	r26
    5d2e:	9f 91       	pop	r25
    5d30:	8f 91       	pop	r24
    5d32:	7f 91       	pop	r23
    5d34:	6f 91       	pop	r22
    5d36:	5f 91       	pop	r21
    5d38:	4f 91       	pop	r20
    5d3a:	3f 91       	pop	r19
    5d3c:	2f 91       	pop	r18
    5d3e:	0f 90       	pop	r0
    5d40:	0b be       	out	0x3b, r0	; 59
    5d42:	0f 90       	pop	r0
    5d44:	0f be       	out	0x3f, r0	; 63
    5d46:	0f 90       	pop	r0
    5d48:	1f 90       	pop	r1
    5d4a:	18 95       	reti

00005d4c <fifo_init>:
    5d4c:	fc 01       	movw	r30, r24
    5d4e:	41 11       	cpse	r20, r1
    5d50:	01 c0       	rjmp	.+2      	; 0x5d54 <fifo_init+0x8>
    5d52:	12 d7       	rcall	.+3620   	; 0x6b78 <abort>
    5d54:	84 2f       	mov	r24, r20
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	9c 01       	movw	r18, r24
    5d5a:	21 50       	subi	r18, 0x01	; 1
    5d5c:	31 09       	sbc	r19, r1
    5d5e:	82 23       	and	r24, r18
    5d60:	93 23       	and	r25, r19
    5d62:	89 2b       	or	r24, r25
    5d64:	09 f0       	breq	.+2      	; 0x5d68 <fifo_init+0x1c>
    5d66:	08 d7       	rcall	.+3600   	; 0x6b78 <abort>
    5d68:	41 38       	cpi	r20, 0x81	; 129
    5d6a:	08 f0       	brcs	.+2      	; 0x5d6e <fifo_init+0x22>
    5d6c:	05 d7       	rcall	.+3594   	; 0x6b78 <abort>
    5d6e:	12 82       	std	Z+2, r1	; 0x02
    5d70:	13 82       	std	Z+3, r1	; 0x03
    5d72:	44 83       	std	Z+4, r20	; 0x04
    5d74:	44 0f       	add	r20, r20
    5d76:	41 50       	subi	r20, 0x01	; 1
    5d78:	45 83       	std	Z+5, r20	; 0x05
    5d7a:	71 83       	std	Z+1, r23	; 0x01
    5d7c:	60 83       	st	Z, r22
    5d7e:	80 e0       	ldi	r24, 0x00	; 0
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	08 95       	ret

00005d84 <vfprintf>:
    5d84:	2f 92       	push	r2
    5d86:	3f 92       	push	r3
    5d88:	4f 92       	push	r4
    5d8a:	5f 92       	push	r5
    5d8c:	6f 92       	push	r6
    5d8e:	7f 92       	push	r7
    5d90:	8f 92       	push	r8
    5d92:	9f 92       	push	r9
    5d94:	af 92       	push	r10
    5d96:	bf 92       	push	r11
    5d98:	cf 92       	push	r12
    5d9a:	df 92       	push	r13
    5d9c:	ef 92       	push	r14
    5d9e:	ff 92       	push	r15
    5da0:	0f 93       	push	r16
    5da2:	1f 93       	push	r17
    5da4:	cf 93       	push	r28
    5da6:	df 93       	push	r29
    5da8:	cd b7       	in	r28, 0x3d	; 61
    5daa:	de b7       	in	r29, 0x3e	; 62
    5dac:	60 97       	sbiw	r28, 0x10	; 16
    5dae:	0f b6       	in	r0, 0x3f	; 63
    5db0:	f8 94       	cli
    5db2:	de bf       	out	0x3e, r29	; 62
    5db4:	0f be       	out	0x3f, r0	; 63
    5db6:	cd bf       	out	0x3d, r28	; 61
    5db8:	7c 01       	movw	r14, r24
    5dba:	1b 01       	movw	r2, r22
    5dbc:	6a 01       	movw	r12, r20
    5dbe:	fc 01       	movw	r30, r24
    5dc0:	17 82       	std	Z+7, r1	; 0x07
    5dc2:	16 82       	std	Z+6, r1	; 0x06
    5dc4:	83 81       	ldd	r24, Z+3	; 0x03
    5dc6:	81 ff       	sbrs	r24, 1
    5dc8:	2b c3       	rjmp	.+1622   	; 0x6420 <vfprintf+0x69c>
    5dca:	9e 01       	movw	r18, r28
    5dcc:	2f 5f       	subi	r18, 0xFF	; 255
    5dce:	3f 4f       	sbci	r19, 0xFF	; 255
    5dd0:	39 01       	movw	r6, r18
    5dd2:	f7 01       	movw	r30, r14
    5dd4:	93 81       	ldd	r25, Z+3	; 0x03
    5dd6:	f1 01       	movw	r30, r2
    5dd8:	93 fd       	sbrc	r25, 3
    5dda:	85 91       	lpm	r24, Z+
    5ddc:	93 ff       	sbrs	r25, 3
    5dde:	81 91       	ld	r24, Z+
    5de0:	1f 01       	movw	r2, r30
    5de2:	88 23       	and	r24, r24
    5de4:	09 f4       	brne	.+2      	; 0x5de8 <vfprintf+0x64>
    5de6:	18 c3       	rjmp	.+1584   	; 0x6418 <vfprintf+0x694>
    5de8:	85 32       	cpi	r24, 0x25	; 37
    5dea:	39 f4       	brne	.+14     	; 0x5dfa <vfprintf+0x76>
    5dec:	93 fd       	sbrc	r25, 3
    5dee:	85 91       	lpm	r24, Z+
    5df0:	93 ff       	sbrs	r25, 3
    5df2:	81 91       	ld	r24, Z+
    5df4:	1f 01       	movw	r2, r30
    5df6:	85 32       	cpi	r24, 0x25	; 37
    5df8:	39 f4       	brne	.+14     	; 0x5e08 <vfprintf+0x84>
    5dfa:	b7 01       	movw	r22, r14
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <fputc>
    5e02:	56 01       	movw	r10, r12
    5e04:	65 01       	movw	r12, r10
    5e06:	e5 cf       	rjmp	.-54     	; 0x5dd2 <vfprintf+0x4e>
    5e08:	10 e0       	ldi	r17, 0x00	; 0
    5e0a:	51 2c       	mov	r5, r1
    5e0c:	91 2c       	mov	r9, r1
    5e0e:	ff e1       	ldi	r31, 0x1F	; 31
    5e10:	f9 15       	cp	r31, r9
    5e12:	d8 f0       	brcs	.+54     	; 0x5e4a <vfprintf+0xc6>
    5e14:	8b 32       	cpi	r24, 0x2B	; 43
    5e16:	79 f0       	breq	.+30     	; 0x5e36 <vfprintf+0xb2>
    5e18:	38 f4       	brcc	.+14     	; 0x5e28 <vfprintf+0xa4>
    5e1a:	80 32       	cpi	r24, 0x20	; 32
    5e1c:	79 f0       	breq	.+30     	; 0x5e3c <vfprintf+0xb8>
    5e1e:	83 32       	cpi	r24, 0x23	; 35
    5e20:	a1 f4       	brne	.+40     	; 0x5e4a <vfprintf+0xc6>
    5e22:	f9 2d       	mov	r31, r9
    5e24:	f0 61       	ori	r31, 0x10	; 16
    5e26:	2e c0       	rjmp	.+92     	; 0x5e84 <vfprintf+0x100>
    5e28:	8d 32       	cpi	r24, 0x2D	; 45
    5e2a:	61 f0       	breq	.+24     	; 0x5e44 <vfprintf+0xc0>
    5e2c:	80 33       	cpi	r24, 0x30	; 48
    5e2e:	69 f4       	brne	.+26     	; 0x5e4a <vfprintf+0xc6>
    5e30:	29 2d       	mov	r18, r9
    5e32:	21 60       	ori	r18, 0x01	; 1
    5e34:	2d c0       	rjmp	.+90     	; 0x5e90 <vfprintf+0x10c>
    5e36:	39 2d       	mov	r19, r9
    5e38:	32 60       	ori	r19, 0x02	; 2
    5e3a:	93 2e       	mov	r9, r19
    5e3c:	89 2d       	mov	r24, r9
    5e3e:	84 60       	ori	r24, 0x04	; 4
    5e40:	98 2e       	mov	r9, r24
    5e42:	2a c0       	rjmp	.+84     	; 0x5e98 <vfprintf+0x114>
    5e44:	e9 2d       	mov	r30, r9
    5e46:	e8 60       	ori	r30, 0x08	; 8
    5e48:	15 c0       	rjmp	.+42     	; 0x5e74 <vfprintf+0xf0>
    5e4a:	97 fc       	sbrc	r9, 7
    5e4c:	2d c0       	rjmp	.+90     	; 0x5ea8 <vfprintf+0x124>
    5e4e:	20 ed       	ldi	r18, 0xD0	; 208
    5e50:	28 0f       	add	r18, r24
    5e52:	2a 30       	cpi	r18, 0x0A	; 10
    5e54:	88 f4       	brcc	.+34     	; 0x5e78 <vfprintf+0xf4>
    5e56:	96 fe       	sbrs	r9, 6
    5e58:	06 c0       	rjmp	.+12     	; 0x5e66 <vfprintf+0xe2>
    5e5a:	3a e0       	ldi	r19, 0x0A	; 10
    5e5c:	13 9f       	mul	r17, r19
    5e5e:	20 0d       	add	r18, r0
    5e60:	11 24       	eor	r1, r1
    5e62:	12 2f       	mov	r17, r18
    5e64:	19 c0       	rjmp	.+50     	; 0x5e98 <vfprintf+0x114>
    5e66:	8a e0       	ldi	r24, 0x0A	; 10
    5e68:	58 9e       	mul	r5, r24
    5e6a:	20 0d       	add	r18, r0
    5e6c:	11 24       	eor	r1, r1
    5e6e:	52 2e       	mov	r5, r18
    5e70:	e9 2d       	mov	r30, r9
    5e72:	e0 62       	ori	r30, 0x20	; 32
    5e74:	9e 2e       	mov	r9, r30
    5e76:	10 c0       	rjmp	.+32     	; 0x5e98 <vfprintf+0x114>
    5e78:	8e 32       	cpi	r24, 0x2E	; 46
    5e7a:	31 f4       	brne	.+12     	; 0x5e88 <vfprintf+0x104>
    5e7c:	96 fc       	sbrc	r9, 6
    5e7e:	cc c2       	rjmp	.+1432   	; 0x6418 <vfprintf+0x694>
    5e80:	f9 2d       	mov	r31, r9
    5e82:	f0 64       	ori	r31, 0x40	; 64
    5e84:	9f 2e       	mov	r9, r31
    5e86:	08 c0       	rjmp	.+16     	; 0x5e98 <vfprintf+0x114>
    5e88:	8c 36       	cpi	r24, 0x6C	; 108
    5e8a:	21 f4       	brne	.+8      	; 0x5e94 <vfprintf+0x110>
    5e8c:	29 2d       	mov	r18, r9
    5e8e:	20 68       	ori	r18, 0x80	; 128
    5e90:	92 2e       	mov	r9, r18
    5e92:	02 c0       	rjmp	.+4      	; 0x5e98 <vfprintf+0x114>
    5e94:	88 36       	cpi	r24, 0x68	; 104
    5e96:	41 f4       	brne	.+16     	; 0x5ea8 <vfprintf+0x124>
    5e98:	f1 01       	movw	r30, r2
    5e9a:	93 fd       	sbrc	r25, 3
    5e9c:	85 91       	lpm	r24, Z+
    5e9e:	93 ff       	sbrs	r25, 3
    5ea0:	81 91       	ld	r24, Z+
    5ea2:	1f 01       	movw	r2, r30
    5ea4:	81 11       	cpse	r24, r1
    5ea6:	b3 cf       	rjmp	.-154    	; 0x5e0e <vfprintf+0x8a>
    5ea8:	9b eb       	ldi	r25, 0xBB	; 187
    5eaa:	98 0f       	add	r25, r24
    5eac:	93 30       	cpi	r25, 0x03	; 3
    5eae:	20 f4       	brcc	.+8      	; 0x5eb8 <vfprintf+0x134>
    5eb0:	99 2d       	mov	r25, r9
    5eb2:	90 61       	ori	r25, 0x10	; 16
    5eb4:	80 5e       	subi	r24, 0xE0	; 224
    5eb6:	07 c0       	rjmp	.+14     	; 0x5ec6 <vfprintf+0x142>
    5eb8:	9b e9       	ldi	r25, 0x9B	; 155
    5eba:	98 0f       	add	r25, r24
    5ebc:	93 30       	cpi	r25, 0x03	; 3
    5ebe:	08 f0       	brcs	.+2      	; 0x5ec2 <vfprintf+0x13e>
    5ec0:	59 c1       	rjmp	.+690    	; 0x6174 <vfprintf+0x3f0>
    5ec2:	99 2d       	mov	r25, r9
    5ec4:	9f 7e       	andi	r25, 0xEF	; 239
    5ec6:	96 ff       	sbrs	r25, 6
    5ec8:	16 e0       	ldi	r17, 0x06	; 6
    5eca:	9f 73       	andi	r25, 0x3F	; 63
    5ecc:	99 2e       	mov	r9, r25
    5ece:	85 36       	cpi	r24, 0x65	; 101
    5ed0:	19 f4       	brne	.+6      	; 0x5ed8 <vfprintf+0x154>
    5ed2:	90 64       	ori	r25, 0x40	; 64
    5ed4:	99 2e       	mov	r9, r25
    5ed6:	08 c0       	rjmp	.+16     	; 0x5ee8 <vfprintf+0x164>
    5ed8:	86 36       	cpi	r24, 0x66	; 102
    5eda:	21 f4       	brne	.+8      	; 0x5ee4 <vfprintf+0x160>
    5edc:	39 2f       	mov	r19, r25
    5ede:	30 68       	ori	r19, 0x80	; 128
    5ee0:	93 2e       	mov	r9, r19
    5ee2:	02 c0       	rjmp	.+4      	; 0x5ee8 <vfprintf+0x164>
    5ee4:	11 11       	cpse	r17, r1
    5ee6:	11 50       	subi	r17, 0x01	; 1
    5ee8:	97 fe       	sbrs	r9, 7
    5eea:	07 c0       	rjmp	.+14     	; 0x5efa <vfprintf+0x176>
    5eec:	1c 33       	cpi	r17, 0x3C	; 60
    5eee:	50 f4       	brcc	.+20     	; 0x5f04 <vfprintf+0x180>
    5ef0:	44 24       	eor	r4, r4
    5ef2:	43 94       	inc	r4
    5ef4:	41 0e       	add	r4, r17
    5ef6:	27 e0       	ldi	r18, 0x07	; 7
    5ef8:	0b c0       	rjmp	.+22     	; 0x5f10 <vfprintf+0x18c>
    5efa:	18 30       	cpi	r17, 0x08	; 8
    5efc:	38 f0       	brcs	.+14     	; 0x5f0c <vfprintf+0x188>
    5efe:	27 e0       	ldi	r18, 0x07	; 7
    5f00:	17 e0       	ldi	r17, 0x07	; 7
    5f02:	05 c0       	rjmp	.+10     	; 0x5f0e <vfprintf+0x18a>
    5f04:	27 e0       	ldi	r18, 0x07	; 7
    5f06:	9c e3       	ldi	r25, 0x3C	; 60
    5f08:	49 2e       	mov	r4, r25
    5f0a:	02 c0       	rjmp	.+4      	; 0x5f10 <vfprintf+0x18c>
    5f0c:	21 2f       	mov	r18, r17
    5f0e:	41 2c       	mov	r4, r1
    5f10:	56 01       	movw	r10, r12
    5f12:	84 e0       	ldi	r24, 0x04	; 4
    5f14:	a8 0e       	add	r10, r24
    5f16:	b1 1c       	adc	r11, r1
    5f18:	f6 01       	movw	r30, r12
    5f1a:	60 81       	ld	r22, Z
    5f1c:	71 81       	ldd	r23, Z+1	; 0x01
    5f1e:	82 81       	ldd	r24, Z+2	; 0x02
    5f20:	93 81       	ldd	r25, Z+3	; 0x03
    5f22:	04 2d       	mov	r16, r4
    5f24:	a3 01       	movw	r20, r6
    5f26:	2c d6       	rcall	.+3160   	; 0x6b80 <__ftoa_engine>
    5f28:	6c 01       	movw	r12, r24
    5f2a:	f9 81       	ldd	r31, Y+1	; 0x01
    5f2c:	fc 87       	std	Y+12, r31	; 0x0c
    5f2e:	f0 ff       	sbrs	r31, 0
    5f30:	02 c0       	rjmp	.+4      	; 0x5f36 <vfprintf+0x1b2>
    5f32:	f3 ff       	sbrs	r31, 3
    5f34:	06 c0       	rjmp	.+12     	; 0x5f42 <vfprintf+0x1be>
    5f36:	91 fc       	sbrc	r9, 1
    5f38:	06 c0       	rjmp	.+12     	; 0x5f46 <vfprintf+0x1c2>
    5f3a:	92 fe       	sbrs	r9, 2
    5f3c:	06 c0       	rjmp	.+12     	; 0x5f4a <vfprintf+0x1c6>
    5f3e:	00 e2       	ldi	r16, 0x20	; 32
    5f40:	05 c0       	rjmp	.+10     	; 0x5f4c <vfprintf+0x1c8>
    5f42:	0d e2       	ldi	r16, 0x2D	; 45
    5f44:	03 c0       	rjmp	.+6      	; 0x5f4c <vfprintf+0x1c8>
    5f46:	0b e2       	ldi	r16, 0x2B	; 43
    5f48:	01 c0       	rjmp	.+2      	; 0x5f4c <vfprintf+0x1c8>
    5f4a:	00 e0       	ldi	r16, 0x00	; 0
    5f4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f4e:	8c 70       	andi	r24, 0x0C	; 12
    5f50:	19 f0       	breq	.+6      	; 0x5f58 <vfprintf+0x1d4>
    5f52:	01 11       	cpse	r16, r1
    5f54:	43 c2       	rjmp	.+1158   	; 0x63dc <vfprintf+0x658>
    5f56:	80 c2       	rjmp	.+1280   	; 0x6458 <vfprintf+0x6d4>
    5f58:	97 fe       	sbrs	r9, 7
    5f5a:	10 c0       	rjmp	.+32     	; 0x5f7c <vfprintf+0x1f8>
    5f5c:	4c 0c       	add	r4, r12
    5f5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5f60:	f4 ff       	sbrs	r31, 4
    5f62:	04 c0       	rjmp	.+8      	; 0x5f6c <vfprintf+0x1e8>
    5f64:	8a 81       	ldd	r24, Y+2	; 0x02
    5f66:	81 33       	cpi	r24, 0x31	; 49
    5f68:	09 f4       	brne	.+2      	; 0x5f6c <vfprintf+0x1e8>
    5f6a:	4a 94       	dec	r4
    5f6c:	14 14       	cp	r1, r4
    5f6e:	74 f5       	brge	.+92     	; 0x5fcc <vfprintf+0x248>
    5f70:	28 e0       	ldi	r18, 0x08	; 8
    5f72:	24 15       	cp	r18, r4
    5f74:	78 f5       	brcc	.+94     	; 0x5fd4 <vfprintf+0x250>
    5f76:	88 e0       	ldi	r24, 0x08	; 8
    5f78:	48 2e       	mov	r4, r24
    5f7a:	2c c0       	rjmp	.+88     	; 0x5fd4 <vfprintf+0x250>
    5f7c:	96 fc       	sbrc	r9, 6
    5f7e:	2a c0       	rjmp	.+84     	; 0x5fd4 <vfprintf+0x250>
    5f80:	81 2f       	mov	r24, r17
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	8c 15       	cp	r24, r12
    5f86:	9d 05       	cpc	r25, r13
    5f88:	9c f0       	brlt	.+38     	; 0x5fb0 <vfprintf+0x22c>
    5f8a:	3c ef       	ldi	r19, 0xFC	; 252
    5f8c:	c3 16       	cp	r12, r19
    5f8e:	3f ef       	ldi	r19, 0xFF	; 255
    5f90:	d3 06       	cpc	r13, r19
    5f92:	74 f0       	brlt	.+28     	; 0x5fb0 <vfprintf+0x22c>
    5f94:	89 2d       	mov	r24, r9
    5f96:	80 68       	ori	r24, 0x80	; 128
    5f98:	98 2e       	mov	r9, r24
    5f9a:	0a c0       	rjmp	.+20     	; 0x5fb0 <vfprintf+0x22c>
    5f9c:	e2 e0       	ldi	r30, 0x02	; 2
    5f9e:	f0 e0       	ldi	r31, 0x00	; 0
    5fa0:	ec 0f       	add	r30, r28
    5fa2:	fd 1f       	adc	r31, r29
    5fa4:	e1 0f       	add	r30, r17
    5fa6:	f1 1d       	adc	r31, r1
    5fa8:	80 81       	ld	r24, Z
    5faa:	80 33       	cpi	r24, 0x30	; 48
    5fac:	19 f4       	brne	.+6      	; 0x5fb4 <vfprintf+0x230>
    5fae:	11 50       	subi	r17, 0x01	; 1
    5fb0:	11 11       	cpse	r17, r1
    5fb2:	f4 cf       	rjmp	.-24     	; 0x5f9c <vfprintf+0x218>
    5fb4:	97 fe       	sbrs	r9, 7
    5fb6:	0e c0       	rjmp	.+28     	; 0x5fd4 <vfprintf+0x250>
    5fb8:	44 24       	eor	r4, r4
    5fba:	43 94       	inc	r4
    5fbc:	41 0e       	add	r4, r17
    5fbe:	81 2f       	mov	r24, r17
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	c8 16       	cp	r12, r24
    5fc4:	d9 06       	cpc	r13, r25
    5fc6:	2c f4       	brge	.+10     	; 0x5fd2 <vfprintf+0x24e>
    5fc8:	1c 19       	sub	r17, r12
    5fca:	04 c0       	rjmp	.+8      	; 0x5fd4 <vfprintf+0x250>
    5fcc:	44 24       	eor	r4, r4
    5fce:	43 94       	inc	r4
    5fd0:	01 c0       	rjmp	.+2      	; 0x5fd4 <vfprintf+0x250>
    5fd2:	10 e0       	ldi	r17, 0x00	; 0
    5fd4:	97 fe       	sbrs	r9, 7
    5fd6:	06 c0       	rjmp	.+12     	; 0x5fe4 <vfprintf+0x260>
    5fd8:	1c 14       	cp	r1, r12
    5fda:	1d 04       	cpc	r1, r13
    5fdc:	34 f4       	brge	.+12     	; 0x5fea <vfprintf+0x266>
    5fde:	c6 01       	movw	r24, r12
    5fe0:	01 96       	adiw	r24, 0x01	; 1
    5fe2:	05 c0       	rjmp	.+10     	; 0x5fee <vfprintf+0x26a>
    5fe4:	85 e0       	ldi	r24, 0x05	; 5
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	02 c0       	rjmp	.+4      	; 0x5fee <vfprintf+0x26a>
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	01 11       	cpse	r16, r1
    5ff0:	01 96       	adiw	r24, 0x01	; 1
    5ff2:	11 23       	and	r17, r17
    5ff4:	31 f0       	breq	.+12     	; 0x6002 <vfprintf+0x27e>
    5ff6:	21 2f       	mov	r18, r17
    5ff8:	30 e0       	ldi	r19, 0x00	; 0
    5ffa:	2f 5f       	subi	r18, 0xFF	; 255
    5ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ffe:	82 0f       	add	r24, r18
    6000:	93 1f       	adc	r25, r19
    6002:	25 2d       	mov	r18, r5
    6004:	30 e0       	ldi	r19, 0x00	; 0
    6006:	82 17       	cp	r24, r18
    6008:	93 07       	cpc	r25, r19
    600a:	14 f4       	brge	.+4      	; 0x6010 <vfprintf+0x28c>
    600c:	58 1a       	sub	r5, r24
    600e:	01 c0       	rjmp	.+2      	; 0x6012 <vfprintf+0x28e>
    6010:	51 2c       	mov	r5, r1
    6012:	89 2d       	mov	r24, r9
    6014:	89 70       	andi	r24, 0x09	; 9
    6016:	41 f4       	brne	.+16     	; 0x6028 <vfprintf+0x2a4>
    6018:	55 20       	and	r5, r5
    601a:	31 f0       	breq	.+12     	; 0x6028 <vfprintf+0x2a4>
    601c:	b7 01       	movw	r22, r14
    601e:	80 e2       	ldi	r24, 0x20	; 32
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	fb d6       	rcall	.+3574   	; 0x6e1a <fputc>
    6024:	5a 94       	dec	r5
    6026:	f8 cf       	rjmp	.-16     	; 0x6018 <vfprintf+0x294>
    6028:	00 23       	and	r16, r16
    602a:	21 f0       	breq	.+8      	; 0x6034 <vfprintf+0x2b0>
    602c:	b7 01       	movw	r22, r14
    602e:	80 2f       	mov	r24, r16
    6030:	90 e0       	ldi	r25, 0x00	; 0
    6032:	f3 d6       	rcall	.+3558   	; 0x6e1a <fputc>
    6034:	93 fc       	sbrc	r9, 3
    6036:	08 c0       	rjmp	.+16     	; 0x6048 <vfprintf+0x2c4>
    6038:	55 20       	and	r5, r5
    603a:	31 f0       	breq	.+12     	; 0x6048 <vfprintf+0x2c4>
    603c:	b7 01       	movw	r22, r14
    603e:	80 e3       	ldi	r24, 0x30	; 48
    6040:	90 e0       	ldi	r25, 0x00	; 0
    6042:	eb d6       	rcall	.+3542   	; 0x6e1a <fputc>
    6044:	5a 94       	dec	r5
    6046:	f8 cf       	rjmp	.-16     	; 0x6038 <vfprintf+0x2b4>
    6048:	97 fe       	sbrs	r9, 7
    604a:	4a c0       	rjmp	.+148    	; 0x60e0 <vfprintf+0x35c>
    604c:	46 01       	movw	r8, r12
    604e:	d7 fe       	sbrs	r13, 7
    6050:	02 c0       	rjmp	.+4      	; 0x6056 <vfprintf+0x2d2>
    6052:	81 2c       	mov	r8, r1
    6054:	91 2c       	mov	r9, r1
    6056:	c6 01       	movw	r24, r12
    6058:	88 19       	sub	r24, r8
    605a:	99 09       	sbc	r25, r9
    605c:	f3 01       	movw	r30, r6
    605e:	e8 0f       	add	r30, r24
    6060:	f9 1f       	adc	r31, r25
    6062:	fe 87       	std	Y+14, r31	; 0x0e
    6064:	ed 87       	std	Y+13, r30	; 0x0d
    6066:	96 01       	movw	r18, r12
    6068:	24 19       	sub	r18, r4
    606a:	31 09       	sbc	r19, r1
    606c:	38 8b       	std	Y+16, r19	; 0x10
    606e:	2f 87       	std	Y+15, r18	; 0x0f
    6070:	01 2f       	mov	r16, r17
    6072:	10 e0       	ldi	r17, 0x00	; 0
    6074:	11 95       	neg	r17
    6076:	01 95       	neg	r16
    6078:	11 09       	sbc	r17, r1
    607a:	3f ef       	ldi	r19, 0xFF	; 255
    607c:	83 16       	cp	r8, r19
    607e:	93 06       	cpc	r9, r19
    6080:	21 f4       	brne	.+8      	; 0x608a <vfprintf+0x306>
    6082:	b7 01       	movw	r22, r14
    6084:	8e e2       	ldi	r24, 0x2E	; 46
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	c8 d6       	rcall	.+3472   	; 0x6e1a <fputc>
    608a:	c8 14       	cp	r12, r8
    608c:	d9 04       	cpc	r13, r9
    608e:	4c f0       	brlt	.+18     	; 0x60a2 <vfprintf+0x31e>
    6090:	8f 85       	ldd	r24, Y+15	; 0x0f
    6092:	98 89       	ldd	r25, Y+16	; 0x10
    6094:	88 15       	cp	r24, r8
    6096:	99 05       	cpc	r25, r9
    6098:	24 f4       	brge	.+8      	; 0x60a2 <vfprintf+0x31e>
    609a:	ed 85       	ldd	r30, Y+13	; 0x0d
    609c:	fe 85       	ldd	r31, Y+14	; 0x0e
    609e:	81 81       	ldd	r24, Z+1	; 0x01
    60a0:	01 c0       	rjmp	.+2      	; 0x60a4 <vfprintf+0x320>
    60a2:	80 e3       	ldi	r24, 0x30	; 48
    60a4:	f1 e0       	ldi	r31, 0x01	; 1
    60a6:	8f 1a       	sub	r8, r31
    60a8:	91 08       	sbc	r9, r1
    60aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    60ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    60ae:	2f 5f       	subi	r18, 0xFF	; 255
    60b0:	3f 4f       	sbci	r19, 0xFF	; 255
    60b2:	3e 87       	std	Y+14, r19	; 0x0e
    60b4:	2d 87       	std	Y+13, r18	; 0x0d
    60b6:	80 16       	cp	r8, r16
    60b8:	91 06       	cpc	r9, r17
    60ba:	24 f0       	brlt	.+8      	; 0x60c4 <vfprintf+0x340>
    60bc:	b7 01       	movw	r22, r14
    60be:	90 e0       	ldi	r25, 0x00	; 0
    60c0:	ac d6       	rcall	.+3416   	; 0x6e1a <fputc>
    60c2:	db cf       	rjmp	.-74     	; 0x607a <vfprintf+0x2f6>
    60c4:	c8 14       	cp	r12, r8
    60c6:	d9 04       	cpc	r13, r9
    60c8:	41 f4       	brne	.+16     	; 0x60da <vfprintf+0x356>
    60ca:	9a 81       	ldd	r25, Y+2	; 0x02
    60cc:	96 33       	cpi	r25, 0x36	; 54
    60ce:	20 f4       	brcc	.+8      	; 0x60d8 <vfprintf+0x354>
    60d0:	95 33       	cpi	r25, 0x35	; 53
    60d2:	19 f4       	brne	.+6      	; 0x60da <vfprintf+0x356>
    60d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    60d6:	34 ff       	sbrs	r19, 4
    60d8:	81 e3       	ldi	r24, 0x31	; 49
    60da:	b7 01       	movw	r22, r14
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	48 c0       	rjmp	.+144    	; 0x6170 <vfprintf+0x3ec>
    60e0:	8a 81       	ldd	r24, Y+2	; 0x02
    60e2:	81 33       	cpi	r24, 0x31	; 49
    60e4:	19 f0       	breq	.+6      	; 0x60ec <vfprintf+0x368>
    60e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    60e8:	9f 7e       	andi	r25, 0xEF	; 239
    60ea:	9c 87       	std	Y+12, r25	; 0x0c
    60ec:	b7 01       	movw	r22, r14
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	94 d6       	rcall	.+3368   	; 0x6e1a <fputc>
    60f2:	11 11       	cpse	r17, r1
    60f4:	05 c0       	rjmp	.+10     	; 0x6100 <vfprintf+0x37c>
    60f6:	94 fc       	sbrc	r9, 4
    60f8:	16 c0       	rjmp	.+44     	; 0x6126 <vfprintf+0x3a2>
    60fa:	85 e6       	ldi	r24, 0x65	; 101
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	15 c0       	rjmp	.+42     	; 0x612a <vfprintf+0x3a6>
    6100:	b7 01       	movw	r22, r14
    6102:	8e e2       	ldi	r24, 0x2E	; 46
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	89 d6       	rcall	.+3346   	; 0x6e1a <fputc>
    6108:	1e 5f       	subi	r17, 0xFE	; 254
    610a:	82 e0       	ldi	r24, 0x02	; 2
    610c:	01 e0       	ldi	r16, 0x01	; 1
    610e:	08 0f       	add	r16, r24
    6110:	f3 01       	movw	r30, r6
    6112:	e8 0f       	add	r30, r24
    6114:	f1 1d       	adc	r31, r1
    6116:	80 81       	ld	r24, Z
    6118:	b7 01       	movw	r22, r14
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	7e d6       	rcall	.+3324   	; 0x6e1a <fputc>
    611e:	80 2f       	mov	r24, r16
    6120:	01 13       	cpse	r16, r17
    6122:	f4 cf       	rjmp	.-24     	; 0x610c <vfprintf+0x388>
    6124:	e8 cf       	rjmp	.-48     	; 0x60f6 <vfprintf+0x372>
    6126:	85 e4       	ldi	r24, 0x45	; 69
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	b7 01       	movw	r22, r14
    612c:	76 d6       	rcall	.+3308   	; 0x6e1a <fputc>
    612e:	d7 fc       	sbrc	r13, 7
    6130:	06 c0       	rjmp	.+12     	; 0x613e <vfprintf+0x3ba>
    6132:	c1 14       	cp	r12, r1
    6134:	d1 04       	cpc	r13, r1
    6136:	41 f4       	brne	.+16     	; 0x6148 <vfprintf+0x3c4>
    6138:	ec 85       	ldd	r30, Y+12	; 0x0c
    613a:	e4 ff       	sbrs	r30, 4
    613c:	05 c0       	rjmp	.+10     	; 0x6148 <vfprintf+0x3c4>
    613e:	d1 94       	neg	r13
    6140:	c1 94       	neg	r12
    6142:	d1 08       	sbc	r13, r1
    6144:	8d e2       	ldi	r24, 0x2D	; 45
    6146:	01 c0       	rjmp	.+2      	; 0x614a <vfprintf+0x3c6>
    6148:	8b e2       	ldi	r24, 0x2B	; 43
    614a:	b7 01       	movw	r22, r14
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	65 d6       	rcall	.+3274   	; 0x6e1a <fputc>
    6150:	80 e3       	ldi	r24, 0x30	; 48
    6152:	2a e0       	ldi	r18, 0x0A	; 10
    6154:	c2 16       	cp	r12, r18
    6156:	d1 04       	cpc	r13, r1
    6158:	2c f0       	brlt	.+10     	; 0x6164 <vfprintf+0x3e0>
    615a:	8f 5f       	subi	r24, 0xFF	; 255
    615c:	fa e0       	ldi	r31, 0x0A	; 10
    615e:	cf 1a       	sub	r12, r31
    6160:	d1 08       	sbc	r13, r1
    6162:	f7 cf       	rjmp	.-18     	; 0x6152 <vfprintf+0x3ce>
    6164:	b7 01       	movw	r22, r14
    6166:	90 e0       	ldi	r25, 0x00	; 0
    6168:	58 d6       	rcall	.+3248   	; 0x6e1a <fputc>
    616a:	b7 01       	movw	r22, r14
    616c:	c6 01       	movw	r24, r12
    616e:	c0 96       	adiw	r24, 0x30	; 48
    6170:	54 d6       	rcall	.+3240   	; 0x6e1a <fputc>
    6172:	49 c1       	rjmp	.+658    	; 0x6406 <vfprintf+0x682>
    6174:	83 36       	cpi	r24, 0x63	; 99
    6176:	31 f0       	breq	.+12     	; 0x6184 <vfprintf+0x400>
    6178:	83 37       	cpi	r24, 0x73	; 115
    617a:	79 f0       	breq	.+30     	; 0x619a <vfprintf+0x416>
    617c:	83 35       	cpi	r24, 0x53	; 83
    617e:	09 f0       	breq	.+2      	; 0x6182 <vfprintf+0x3fe>
    6180:	52 c0       	rjmp	.+164    	; 0x6226 <vfprintf+0x4a2>
    6182:	1f c0       	rjmp	.+62     	; 0x61c2 <vfprintf+0x43e>
    6184:	56 01       	movw	r10, r12
    6186:	32 e0       	ldi	r19, 0x02	; 2
    6188:	a3 0e       	add	r10, r19
    618a:	b1 1c       	adc	r11, r1
    618c:	f6 01       	movw	r30, r12
    618e:	80 81       	ld	r24, Z
    6190:	89 83       	std	Y+1, r24	; 0x01
    6192:	01 e0       	ldi	r16, 0x01	; 1
    6194:	10 e0       	ldi	r17, 0x00	; 0
    6196:	63 01       	movw	r12, r6
    6198:	11 c0       	rjmp	.+34     	; 0x61bc <vfprintf+0x438>
    619a:	56 01       	movw	r10, r12
    619c:	f2 e0       	ldi	r31, 0x02	; 2
    619e:	af 0e       	add	r10, r31
    61a0:	b1 1c       	adc	r11, r1
    61a2:	f6 01       	movw	r30, r12
    61a4:	c0 80       	ld	r12, Z
    61a6:	d1 80       	ldd	r13, Z+1	; 0x01
    61a8:	96 fe       	sbrs	r9, 6
    61aa:	03 c0       	rjmp	.+6      	; 0x61b2 <vfprintf+0x42e>
    61ac:	61 2f       	mov	r22, r17
    61ae:	70 e0       	ldi	r23, 0x00	; 0
    61b0:	02 c0       	rjmp	.+4      	; 0x61b6 <vfprintf+0x432>
    61b2:	6f ef       	ldi	r22, 0xFF	; 255
    61b4:	7f ef       	ldi	r23, 0xFF	; 255
    61b6:	c6 01       	movw	r24, r12
    61b8:	25 d6       	rcall	.+3146   	; 0x6e04 <strnlen>
    61ba:	8c 01       	movw	r16, r24
    61bc:	f9 2d       	mov	r31, r9
    61be:	ff 77       	andi	r31, 0x7F	; 127
    61c0:	13 c0       	rjmp	.+38     	; 0x61e8 <vfprintf+0x464>
    61c2:	56 01       	movw	r10, r12
    61c4:	22 e0       	ldi	r18, 0x02	; 2
    61c6:	a2 0e       	add	r10, r18
    61c8:	b1 1c       	adc	r11, r1
    61ca:	f6 01       	movw	r30, r12
    61cc:	c0 80       	ld	r12, Z
    61ce:	d1 80       	ldd	r13, Z+1	; 0x01
    61d0:	96 fe       	sbrs	r9, 6
    61d2:	03 c0       	rjmp	.+6      	; 0x61da <vfprintf+0x456>
    61d4:	61 2f       	mov	r22, r17
    61d6:	70 e0       	ldi	r23, 0x00	; 0
    61d8:	02 c0       	rjmp	.+4      	; 0x61de <vfprintf+0x45a>
    61da:	6f ef       	ldi	r22, 0xFF	; 255
    61dc:	7f ef       	ldi	r23, 0xFF	; 255
    61de:	c6 01       	movw	r24, r12
    61e0:	a7 d5       	rcall	.+2894   	; 0x6d30 <strnlen_P>
    61e2:	8c 01       	movw	r16, r24
    61e4:	f9 2d       	mov	r31, r9
    61e6:	f0 68       	ori	r31, 0x80	; 128
    61e8:	9f 2e       	mov	r9, r31
    61ea:	f3 fd       	sbrc	r31, 3
    61ec:	18 c0       	rjmp	.+48     	; 0x621e <vfprintf+0x49a>
    61ee:	85 2d       	mov	r24, r5
    61f0:	90 e0       	ldi	r25, 0x00	; 0
    61f2:	08 17       	cp	r16, r24
    61f4:	19 07       	cpc	r17, r25
    61f6:	98 f4       	brcc	.+38     	; 0x621e <vfprintf+0x49a>
    61f8:	b7 01       	movw	r22, r14
    61fa:	80 e2       	ldi	r24, 0x20	; 32
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	0d d6       	rcall	.+3098   	; 0x6e1a <fputc>
    6200:	5a 94       	dec	r5
    6202:	f5 cf       	rjmp	.-22     	; 0x61ee <vfprintf+0x46a>
    6204:	f6 01       	movw	r30, r12
    6206:	97 fc       	sbrc	r9, 7
    6208:	85 91       	lpm	r24, Z+
    620a:	97 fe       	sbrs	r9, 7
    620c:	81 91       	ld	r24, Z+
    620e:	6f 01       	movw	r12, r30
    6210:	b7 01       	movw	r22, r14
    6212:	90 e0       	ldi	r25, 0x00	; 0
    6214:	02 d6       	rcall	.+3076   	; 0x6e1a <fputc>
    6216:	51 10       	cpse	r5, r1
    6218:	5a 94       	dec	r5
    621a:	01 50       	subi	r16, 0x01	; 1
    621c:	11 09       	sbc	r17, r1
    621e:	01 15       	cp	r16, r1
    6220:	11 05       	cpc	r17, r1
    6222:	81 f7       	brne	.-32     	; 0x6204 <vfprintf+0x480>
    6224:	f0 c0       	rjmp	.+480    	; 0x6406 <vfprintf+0x682>
    6226:	84 36       	cpi	r24, 0x64	; 100
    6228:	11 f0       	breq	.+4      	; 0x622e <vfprintf+0x4aa>
    622a:	89 36       	cpi	r24, 0x69	; 105
    622c:	59 f5       	brne	.+86     	; 0x6284 <vfprintf+0x500>
    622e:	56 01       	movw	r10, r12
    6230:	97 fe       	sbrs	r9, 7
    6232:	09 c0       	rjmp	.+18     	; 0x6246 <vfprintf+0x4c2>
    6234:	24 e0       	ldi	r18, 0x04	; 4
    6236:	a2 0e       	add	r10, r18
    6238:	b1 1c       	adc	r11, r1
    623a:	f6 01       	movw	r30, r12
    623c:	60 81       	ld	r22, Z
    623e:	71 81       	ldd	r23, Z+1	; 0x01
    6240:	82 81       	ldd	r24, Z+2	; 0x02
    6242:	93 81       	ldd	r25, Z+3	; 0x03
    6244:	0a c0       	rjmp	.+20     	; 0x625a <vfprintf+0x4d6>
    6246:	f2 e0       	ldi	r31, 0x02	; 2
    6248:	af 0e       	add	r10, r31
    624a:	b1 1c       	adc	r11, r1
    624c:	f6 01       	movw	r30, r12
    624e:	60 81       	ld	r22, Z
    6250:	71 81       	ldd	r23, Z+1	; 0x01
    6252:	07 2e       	mov	r0, r23
    6254:	00 0c       	add	r0, r0
    6256:	88 0b       	sbc	r24, r24
    6258:	99 0b       	sbc	r25, r25
    625a:	f9 2d       	mov	r31, r9
    625c:	ff 76       	andi	r31, 0x6F	; 111
    625e:	9f 2e       	mov	r9, r31
    6260:	97 ff       	sbrs	r25, 7
    6262:	09 c0       	rjmp	.+18     	; 0x6276 <vfprintf+0x4f2>
    6264:	90 95       	com	r25
    6266:	80 95       	com	r24
    6268:	70 95       	com	r23
    626a:	61 95       	neg	r22
    626c:	7f 4f       	sbci	r23, 0xFF	; 255
    626e:	8f 4f       	sbci	r24, 0xFF	; 255
    6270:	9f 4f       	sbci	r25, 0xFF	; 255
    6272:	f0 68       	ori	r31, 0x80	; 128
    6274:	9f 2e       	mov	r9, r31
    6276:	2a e0       	ldi	r18, 0x0A	; 10
    6278:	30 e0       	ldi	r19, 0x00	; 0
    627a:	a3 01       	movw	r20, r6
    627c:	7d d6       	rcall	.+3322   	; 0x6f78 <__ultoa_invert>
    627e:	c8 2e       	mov	r12, r24
    6280:	c6 18       	sub	r12, r6
    6282:	3e c0       	rjmp	.+124    	; 0x6300 <vfprintf+0x57c>
    6284:	09 2d       	mov	r16, r9
    6286:	85 37       	cpi	r24, 0x75	; 117
    6288:	21 f4       	brne	.+8      	; 0x6292 <vfprintf+0x50e>
    628a:	0f 7e       	andi	r16, 0xEF	; 239
    628c:	2a e0       	ldi	r18, 0x0A	; 10
    628e:	30 e0       	ldi	r19, 0x00	; 0
    6290:	1d c0       	rjmp	.+58     	; 0x62cc <vfprintf+0x548>
    6292:	09 7f       	andi	r16, 0xF9	; 249
    6294:	8f 36       	cpi	r24, 0x6F	; 111
    6296:	91 f0       	breq	.+36     	; 0x62bc <vfprintf+0x538>
    6298:	18 f4       	brcc	.+6      	; 0x62a0 <vfprintf+0x51c>
    629a:	88 35       	cpi	r24, 0x58	; 88
    629c:	59 f0       	breq	.+22     	; 0x62b4 <vfprintf+0x530>
    629e:	bc c0       	rjmp	.+376    	; 0x6418 <vfprintf+0x694>
    62a0:	80 37       	cpi	r24, 0x70	; 112
    62a2:	19 f0       	breq	.+6      	; 0x62aa <vfprintf+0x526>
    62a4:	88 37       	cpi	r24, 0x78	; 120
    62a6:	11 f0       	breq	.+4      	; 0x62ac <vfprintf+0x528>
    62a8:	b7 c0       	rjmp	.+366    	; 0x6418 <vfprintf+0x694>
    62aa:	00 61       	ori	r16, 0x10	; 16
    62ac:	04 ff       	sbrs	r16, 4
    62ae:	09 c0       	rjmp	.+18     	; 0x62c2 <vfprintf+0x53e>
    62b0:	04 60       	ori	r16, 0x04	; 4
    62b2:	07 c0       	rjmp	.+14     	; 0x62c2 <vfprintf+0x53e>
    62b4:	94 fe       	sbrs	r9, 4
    62b6:	08 c0       	rjmp	.+16     	; 0x62c8 <vfprintf+0x544>
    62b8:	06 60       	ori	r16, 0x06	; 6
    62ba:	06 c0       	rjmp	.+12     	; 0x62c8 <vfprintf+0x544>
    62bc:	28 e0       	ldi	r18, 0x08	; 8
    62be:	30 e0       	ldi	r19, 0x00	; 0
    62c0:	05 c0       	rjmp	.+10     	; 0x62cc <vfprintf+0x548>
    62c2:	20 e1       	ldi	r18, 0x10	; 16
    62c4:	30 e0       	ldi	r19, 0x00	; 0
    62c6:	02 c0       	rjmp	.+4      	; 0x62cc <vfprintf+0x548>
    62c8:	20 e1       	ldi	r18, 0x10	; 16
    62ca:	32 e0       	ldi	r19, 0x02	; 2
    62cc:	56 01       	movw	r10, r12
    62ce:	07 ff       	sbrs	r16, 7
    62d0:	09 c0       	rjmp	.+18     	; 0x62e4 <vfprintf+0x560>
    62d2:	84 e0       	ldi	r24, 0x04	; 4
    62d4:	a8 0e       	add	r10, r24
    62d6:	b1 1c       	adc	r11, r1
    62d8:	f6 01       	movw	r30, r12
    62da:	60 81       	ld	r22, Z
    62dc:	71 81       	ldd	r23, Z+1	; 0x01
    62de:	82 81       	ldd	r24, Z+2	; 0x02
    62e0:	93 81       	ldd	r25, Z+3	; 0x03
    62e2:	08 c0       	rjmp	.+16     	; 0x62f4 <vfprintf+0x570>
    62e4:	f2 e0       	ldi	r31, 0x02	; 2
    62e6:	af 0e       	add	r10, r31
    62e8:	b1 1c       	adc	r11, r1
    62ea:	f6 01       	movw	r30, r12
    62ec:	60 81       	ld	r22, Z
    62ee:	71 81       	ldd	r23, Z+1	; 0x01
    62f0:	80 e0       	ldi	r24, 0x00	; 0
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	a3 01       	movw	r20, r6
    62f6:	40 d6       	rcall	.+3200   	; 0x6f78 <__ultoa_invert>
    62f8:	c8 2e       	mov	r12, r24
    62fa:	c6 18       	sub	r12, r6
    62fc:	0f 77       	andi	r16, 0x7F	; 127
    62fe:	90 2e       	mov	r9, r16
    6300:	96 fe       	sbrs	r9, 6
    6302:	0b c0       	rjmp	.+22     	; 0x631a <vfprintf+0x596>
    6304:	09 2d       	mov	r16, r9
    6306:	0e 7f       	andi	r16, 0xFE	; 254
    6308:	c1 16       	cp	r12, r17
    630a:	50 f4       	brcc	.+20     	; 0x6320 <vfprintf+0x59c>
    630c:	94 fe       	sbrs	r9, 4
    630e:	0a c0       	rjmp	.+20     	; 0x6324 <vfprintf+0x5a0>
    6310:	92 fc       	sbrc	r9, 2
    6312:	08 c0       	rjmp	.+16     	; 0x6324 <vfprintf+0x5a0>
    6314:	09 2d       	mov	r16, r9
    6316:	0e 7e       	andi	r16, 0xEE	; 238
    6318:	05 c0       	rjmp	.+10     	; 0x6324 <vfprintf+0x5a0>
    631a:	dc 2c       	mov	r13, r12
    631c:	09 2d       	mov	r16, r9
    631e:	03 c0       	rjmp	.+6      	; 0x6326 <vfprintf+0x5a2>
    6320:	dc 2c       	mov	r13, r12
    6322:	01 c0       	rjmp	.+2      	; 0x6326 <vfprintf+0x5a2>
    6324:	d1 2e       	mov	r13, r17
    6326:	04 ff       	sbrs	r16, 4
    6328:	0d c0       	rjmp	.+26     	; 0x6344 <vfprintf+0x5c0>
    632a:	fe 01       	movw	r30, r28
    632c:	ec 0d       	add	r30, r12
    632e:	f1 1d       	adc	r31, r1
    6330:	80 81       	ld	r24, Z
    6332:	80 33       	cpi	r24, 0x30	; 48
    6334:	11 f4       	brne	.+4      	; 0x633a <vfprintf+0x5b6>
    6336:	09 7e       	andi	r16, 0xE9	; 233
    6338:	09 c0       	rjmp	.+18     	; 0x634c <vfprintf+0x5c8>
    633a:	02 ff       	sbrs	r16, 2
    633c:	06 c0       	rjmp	.+12     	; 0x634a <vfprintf+0x5c6>
    633e:	d3 94       	inc	r13
    6340:	d3 94       	inc	r13
    6342:	04 c0       	rjmp	.+8      	; 0x634c <vfprintf+0x5c8>
    6344:	80 2f       	mov	r24, r16
    6346:	86 78       	andi	r24, 0x86	; 134
    6348:	09 f0       	breq	.+2      	; 0x634c <vfprintf+0x5c8>
    634a:	d3 94       	inc	r13
    634c:	03 fd       	sbrc	r16, 3
    634e:	10 c0       	rjmp	.+32     	; 0x6370 <vfprintf+0x5ec>
    6350:	00 ff       	sbrs	r16, 0
    6352:	06 c0       	rjmp	.+12     	; 0x6360 <vfprintf+0x5dc>
    6354:	1c 2d       	mov	r17, r12
    6356:	d5 14       	cp	r13, r5
    6358:	78 f4       	brcc	.+30     	; 0x6378 <vfprintf+0x5f4>
    635a:	15 0d       	add	r17, r5
    635c:	1d 19       	sub	r17, r13
    635e:	0c c0       	rjmp	.+24     	; 0x6378 <vfprintf+0x5f4>
    6360:	d5 14       	cp	r13, r5
    6362:	50 f4       	brcc	.+20     	; 0x6378 <vfprintf+0x5f4>
    6364:	b7 01       	movw	r22, r14
    6366:	80 e2       	ldi	r24, 0x20	; 32
    6368:	90 e0       	ldi	r25, 0x00	; 0
    636a:	57 d5       	rcall	.+2734   	; 0x6e1a <fputc>
    636c:	d3 94       	inc	r13
    636e:	f8 cf       	rjmp	.-16     	; 0x6360 <vfprintf+0x5dc>
    6370:	d5 14       	cp	r13, r5
    6372:	10 f4       	brcc	.+4      	; 0x6378 <vfprintf+0x5f4>
    6374:	5d 18       	sub	r5, r13
    6376:	01 c0       	rjmp	.+2      	; 0x637a <vfprintf+0x5f6>
    6378:	51 2c       	mov	r5, r1
    637a:	04 ff       	sbrs	r16, 4
    637c:	0f c0       	rjmp	.+30     	; 0x639c <vfprintf+0x618>
    637e:	b7 01       	movw	r22, r14
    6380:	80 e3       	ldi	r24, 0x30	; 48
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	4a d5       	rcall	.+2708   	; 0x6e1a <fputc>
    6386:	02 ff       	sbrs	r16, 2
    6388:	16 c0       	rjmp	.+44     	; 0x63b6 <vfprintf+0x632>
    638a:	01 fd       	sbrc	r16, 1
    638c:	03 c0       	rjmp	.+6      	; 0x6394 <vfprintf+0x610>
    638e:	88 e7       	ldi	r24, 0x78	; 120
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	02 c0       	rjmp	.+4      	; 0x6398 <vfprintf+0x614>
    6394:	88 e5       	ldi	r24, 0x58	; 88
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	b7 01       	movw	r22, r14
    639a:	0c c0       	rjmp	.+24     	; 0x63b4 <vfprintf+0x630>
    639c:	80 2f       	mov	r24, r16
    639e:	86 78       	andi	r24, 0x86	; 134
    63a0:	51 f0       	breq	.+20     	; 0x63b6 <vfprintf+0x632>
    63a2:	01 ff       	sbrs	r16, 1
    63a4:	02 c0       	rjmp	.+4      	; 0x63aa <vfprintf+0x626>
    63a6:	8b e2       	ldi	r24, 0x2B	; 43
    63a8:	01 c0       	rjmp	.+2      	; 0x63ac <vfprintf+0x628>
    63aa:	80 e2       	ldi	r24, 0x20	; 32
    63ac:	07 fd       	sbrc	r16, 7
    63ae:	8d e2       	ldi	r24, 0x2D	; 45
    63b0:	b7 01       	movw	r22, r14
    63b2:	90 e0       	ldi	r25, 0x00	; 0
    63b4:	32 d5       	rcall	.+2660   	; 0x6e1a <fputc>
    63b6:	c1 16       	cp	r12, r17
    63b8:	30 f4       	brcc	.+12     	; 0x63c6 <vfprintf+0x642>
    63ba:	b7 01       	movw	r22, r14
    63bc:	80 e3       	ldi	r24, 0x30	; 48
    63be:	90 e0       	ldi	r25, 0x00	; 0
    63c0:	2c d5       	rcall	.+2648   	; 0x6e1a <fputc>
    63c2:	11 50       	subi	r17, 0x01	; 1
    63c4:	f8 cf       	rjmp	.-16     	; 0x63b6 <vfprintf+0x632>
    63c6:	ca 94       	dec	r12
    63c8:	f3 01       	movw	r30, r6
    63ca:	ec 0d       	add	r30, r12
    63cc:	f1 1d       	adc	r31, r1
    63ce:	80 81       	ld	r24, Z
    63d0:	b7 01       	movw	r22, r14
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	22 d5       	rcall	.+2628   	; 0x6e1a <fputc>
    63d6:	c1 10       	cpse	r12, r1
    63d8:	f6 cf       	rjmp	.-20     	; 0x63c6 <vfprintf+0x642>
    63da:	15 c0       	rjmp	.+42     	; 0x6406 <vfprintf+0x682>
    63dc:	f4 e0       	ldi	r31, 0x04	; 4
    63de:	f5 15       	cp	r31, r5
    63e0:	50 f5       	brcc	.+84     	; 0x6436 <vfprintf+0x6b2>
    63e2:	84 e0       	ldi	r24, 0x04	; 4
    63e4:	58 1a       	sub	r5, r24
    63e6:	93 fe       	sbrs	r9, 3
    63e8:	1e c0       	rjmp	.+60     	; 0x6426 <vfprintf+0x6a2>
    63ea:	01 11       	cpse	r16, r1
    63ec:	25 c0       	rjmp	.+74     	; 0x6438 <vfprintf+0x6b4>
    63ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    63f0:	23 ff       	sbrs	r18, 3
    63f2:	27 c0       	rjmp	.+78     	; 0x6442 <vfprintf+0x6be>
    63f4:	0a e9       	ldi	r16, 0x9A	; 154
    63f6:	11 e0       	ldi	r17, 0x01	; 1
    63f8:	39 2d       	mov	r19, r9
    63fa:	30 71       	andi	r19, 0x10	; 16
    63fc:	93 2e       	mov	r9, r19
    63fe:	f8 01       	movw	r30, r16
    6400:	84 91       	lpm	r24, Z
    6402:	81 11       	cpse	r24, r1
    6404:	21 c0       	rjmp	.+66     	; 0x6448 <vfprintf+0x6c4>
    6406:	55 20       	and	r5, r5
    6408:	09 f4       	brne	.+2      	; 0x640c <vfprintf+0x688>
    640a:	fc cc       	rjmp	.-1544   	; 0x5e04 <vfprintf+0x80>
    640c:	b7 01       	movw	r22, r14
    640e:	80 e2       	ldi	r24, 0x20	; 32
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	03 d5       	rcall	.+2566   	; 0x6e1a <fputc>
    6414:	5a 94       	dec	r5
    6416:	f7 cf       	rjmp	.-18     	; 0x6406 <vfprintf+0x682>
    6418:	f7 01       	movw	r30, r14
    641a:	86 81       	ldd	r24, Z+6	; 0x06
    641c:	97 81       	ldd	r25, Z+7	; 0x07
    641e:	23 c0       	rjmp	.+70     	; 0x6466 <vfprintf+0x6e2>
    6420:	8f ef       	ldi	r24, 0xFF	; 255
    6422:	9f ef       	ldi	r25, 0xFF	; 255
    6424:	20 c0       	rjmp	.+64     	; 0x6466 <vfprintf+0x6e2>
    6426:	b7 01       	movw	r22, r14
    6428:	80 e2       	ldi	r24, 0x20	; 32
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	f6 d4       	rcall	.+2540   	; 0x6e1a <fputc>
    642e:	5a 94       	dec	r5
    6430:	51 10       	cpse	r5, r1
    6432:	f9 cf       	rjmp	.-14     	; 0x6426 <vfprintf+0x6a2>
    6434:	da cf       	rjmp	.-76     	; 0x63ea <vfprintf+0x666>
    6436:	51 2c       	mov	r5, r1
    6438:	b7 01       	movw	r22, r14
    643a:	80 2f       	mov	r24, r16
    643c:	90 e0       	ldi	r25, 0x00	; 0
    643e:	ed d4       	rcall	.+2522   	; 0x6e1a <fputc>
    6440:	d6 cf       	rjmp	.-84     	; 0x63ee <vfprintf+0x66a>
    6442:	0e e9       	ldi	r16, 0x9E	; 158
    6444:	11 e0       	ldi	r17, 0x01	; 1
    6446:	d8 cf       	rjmp	.-80     	; 0x63f8 <vfprintf+0x674>
    6448:	91 10       	cpse	r9, r1
    644a:	80 52       	subi	r24, 0x20	; 32
    644c:	b7 01       	movw	r22, r14
    644e:	90 e0       	ldi	r25, 0x00	; 0
    6450:	e4 d4       	rcall	.+2504   	; 0x6e1a <fputc>
    6452:	0f 5f       	subi	r16, 0xFF	; 255
    6454:	1f 4f       	sbci	r17, 0xFF	; 255
    6456:	d3 cf       	rjmp	.-90     	; 0x63fe <vfprintf+0x67a>
    6458:	23 e0       	ldi	r18, 0x03	; 3
    645a:	25 15       	cp	r18, r5
    645c:	10 f4       	brcc	.+4      	; 0x6462 <vfprintf+0x6de>
    645e:	83 e0       	ldi	r24, 0x03	; 3
    6460:	c1 cf       	rjmp	.-126    	; 0x63e4 <vfprintf+0x660>
    6462:	51 2c       	mov	r5, r1
    6464:	c4 cf       	rjmp	.-120    	; 0x63ee <vfprintf+0x66a>
    6466:	60 96       	adiw	r28, 0x10	; 16
    6468:	0f b6       	in	r0, 0x3f	; 63
    646a:	f8 94       	cli
    646c:	de bf       	out	0x3e, r29	; 62
    646e:	0f be       	out	0x3f, r0	; 63
    6470:	cd bf       	out	0x3d, r28	; 61
    6472:	df 91       	pop	r29
    6474:	cf 91       	pop	r28
    6476:	1f 91       	pop	r17
    6478:	0f 91       	pop	r16
    647a:	ff 90       	pop	r15
    647c:	ef 90       	pop	r14
    647e:	df 90       	pop	r13
    6480:	cf 90       	pop	r12
    6482:	bf 90       	pop	r11
    6484:	af 90       	pop	r10
    6486:	9f 90       	pop	r9
    6488:	8f 90       	pop	r8
    648a:	7f 90       	pop	r7
    648c:	6f 90       	pop	r6
    648e:	5f 90       	pop	r5
    6490:	4f 90       	pop	r4
    6492:	3f 90       	pop	r3
    6494:	2f 90       	pop	r2
    6496:	08 95       	ret

00006498 <__subsf3>:
    6498:	50 58       	subi	r21, 0x80	; 128

0000649a <__addsf3>:
    649a:	bb 27       	eor	r27, r27
    649c:	aa 27       	eor	r26, r26
    649e:	0e d0       	rcall	.+28     	; 0x64bc <__addsf3x>
    64a0:	4d c1       	rjmp	.+666    	; 0x673c <__fp_round>
    64a2:	3e d1       	rcall	.+636    	; 0x6720 <__fp_pscA>
    64a4:	30 f0       	brcs	.+12     	; 0x64b2 <__addsf3+0x18>
    64a6:	43 d1       	rcall	.+646    	; 0x672e <__fp_pscB>
    64a8:	20 f0       	brcs	.+8      	; 0x64b2 <__addsf3+0x18>
    64aa:	31 f4       	brne	.+12     	; 0x64b8 <__addsf3+0x1e>
    64ac:	9f 3f       	cpi	r25, 0xFF	; 255
    64ae:	11 f4       	brne	.+4      	; 0x64b4 <__addsf3+0x1a>
    64b0:	1e f4       	brtc	.+6      	; 0x64b8 <__addsf3+0x1e>
    64b2:	33 c1       	rjmp	.+614    	; 0x671a <__fp_nan>
    64b4:	0e f4       	brtc	.+2      	; 0x64b8 <__addsf3+0x1e>
    64b6:	e0 95       	com	r30
    64b8:	e7 fb       	bst	r30, 7
    64ba:	29 c1       	rjmp	.+594    	; 0x670e <__fp_inf>

000064bc <__addsf3x>:
    64bc:	e9 2f       	mov	r30, r25
    64be:	4f d1       	rcall	.+670    	; 0x675e <__fp_split3>
    64c0:	80 f3       	brcs	.-32     	; 0x64a2 <__addsf3+0x8>
    64c2:	ba 17       	cp	r27, r26
    64c4:	62 07       	cpc	r22, r18
    64c6:	73 07       	cpc	r23, r19
    64c8:	84 07       	cpc	r24, r20
    64ca:	95 07       	cpc	r25, r21
    64cc:	18 f0       	brcs	.+6      	; 0x64d4 <__addsf3x+0x18>
    64ce:	71 f4       	brne	.+28     	; 0x64ec <__addsf3x+0x30>
    64d0:	9e f5       	brtc	.+102    	; 0x6538 <__addsf3x+0x7c>
    64d2:	67 c1       	rjmp	.+718    	; 0x67a2 <__fp_zero>
    64d4:	0e f4       	brtc	.+2      	; 0x64d8 <__addsf3x+0x1c>
    64d6:	e0 95       	com	r30
    64d8:	0b 2e       	mov	r0, r27
    64da:	ba 2f       	mov	r27, r26
    64dc:	a0 2d       	mov	r26, r0
    64de:	0b 01       	movw	r0, r22
    64e0:	b9 01       	movw	r22, r18
    64e2:	90 01       	movw	r18, r0
    64e4:	0c 01       	movw	r0, r24
    64e6:	ca 01       	movw	r24, r20
    64e8:	a0 01       	movw	r20, r0
    64ea:	11 24       	eor	r1, r1
    64ec:	ff 27       	eor	r31, r31
    64ee:	59 1b       	sub	r21, r25
    64f0:	99 f0       	breq	.+38     	; 0x6518 <__addsf3x+0x5c>
    64f2:	59 3f       	cpi	r21, 0xF9	; 249
    64f4:	50 f4       	brcc	.+20     	; 0x650a <__addsf3x+0x4e>
    64f6:	50 3e       	cpi	r21, 0xE0	; 224
    64f8:	68 f1       	brcs	.+90     	; 0x6554 <__addsf3x+0x98>
    64fa:	1a 16       	cp	r1, r26
    64fc:	f0 40       	sbci	r31, 0x00	; 0
    64fe:	a2 2f       	mov	r26, r18
    6500:	23 2f       	mov	r18, r19
    6502:	34 2f       	mov	r19, r20
    6504:	44 27       	eor	r20, r20
    6506:	58 5f       	subi	r21, 0xF8	; 248
    6508:	f3 cf       	rjmp	.-26     	; 0x64f0 <__addsf3x+0x34>
    650a:	46 95       	lsr	r20
    650c:	37 95       	ror	r19
    650e:	27 95       	ror	r18
    6510:	a7 95       	ror	r26
    6512:	f0 40       	sbci	r31, 0x00	; 0
    6514:	53 95       	inc	r21
    6516:	c9 f7       	brne	.-14     	; 0x650a <__addsf3x+0x4e>
    6518:	7e f4       	brtc	.+30     	; 0x6538 <__addsf3x+0x7c>
    651a:	1f 16       	cp	r1, r31
    651c:	ba 0b       	sbc	r27, r26
    651e:	62 0b       	sbc	r22, r18
    6520:	73 0b       	sbc	r23, r19
    6522:	84 0b       	sbc	r24, r20
    6524:	ba f0       	brmi	.+46     	; 0x6554 <__addsf3x+0x98>
    6526:	91 50       	subi	r25, 0x01	; 1
    6528:	a1 f0       	breq	.+40     	; 0x6552 <__addsf3x+0x96>
    652a:	ff 0f       	add	r31, r31
    652c:	bb 1f       	adc	r27, r27
    652e:	66 1f       	adc	r22, r22
    6530:	77 1f       	adc	r23, r23
    6532:	88 1f       	adc	r24, r24
    6534:	c2 f7       	brpl	.-16     	; 0x6526 <__addsf3x+0x6a>
    6536:	0e c0       	rjmp	.+28     	; 0x6554 <__addsf3x+0x98>
    6538:	ba 0f       	add	r27, r26
    653a:	62 1f       	adc	r22, r18
    653c:	73 1f       	adc	r23, r19
    653e:	84 1f       	adc	r24, r20
    6540:	48 f4       	brcc	.+18     	; 0x6554 <__addsf3x+0x98>
    6542:	87 95       	ror	r24
    6544:	77 95       	ror	r23
    6546:	67 95       	ror	r22
    6548:	b7 95       	ror	r27
    654a:	f7 95       	ror	r31
    654c:	9e 3f       	cpi	r25, 0xFE	; 254
    654e:	08 f0       	brcs	.+2      	; 0x6552 <__addsf3x+0x96>
    6550:	b3 cf       	rjmp	.-154    	; 0x64b8 <__addsf3+0x1e>
    6552:	93 95       	inc	r25
    6554:	88 0f       	add	r24, r24
    6556:	08 f0       	brcs	.+2      	; 0x655a <__addsf3x+0x9e>
    6558:	99 27       	eor	r25, r25
    655a:	ee 0f       	add	r30, r30
    655c:	97 95       	ror	r25
    655e:	87 95       	ror	r24
    6560:	08 95       	ret

00006562 <__divsf3>:
    6562:	0c d0       	rcall	.+24     	; 0x657c <__divsf3x>
    6564:	eb c0       	rjmp	.+470    	; 0x673c <__fp_round>
    6566:	e3 d0       	rcall	.+454    	; 0x672e <__fp_pscB>
    6568:	40 f0       	brcs	.+16     	; 0x657a <__divsf3+0x18>
    656a:	da d0       	rcall	.+436    	; 0x6720 <__fp_pscA>
    656c:	30 f0       	brcs	.+12     	; 0x657a <__divsf3+0x18>
    656e:	21 f4       	brne	.+8      	; 0x6578 <__divsf3+0x16>
    6570:	5f 3f       	cpi	r21, 0xFF	; 255
    6572:	19 f0       	breq	.+6      	; 0x657a <__divsf3+0x18>
    6574:	cc c0       	rjmp	.+408    	; 0x670e <__fp_inf>
    6576:	51 11       	cpse	r21, r1
    6578:	15 c1       	rjmp	.+554    	; 0x67a4 <__fp_szero>
    657a:	cf c0       	rjmp	.+414    	; 0x671a <__fp_nan>

0000657c <__divsf3x>:
    657c:	f0 d0       	rcall	.+480    	; 0x675e <__fp_split3>
    657e:	98 f3       	brcs	.-26     	; 0x6566 <__divsf3+0x4>

00006580 <__divsf3_pse>:
    6580:	99 23       	and	r25, r25
    6582:	c9 f3       	breq	.-14     	; 0x6576 <__divsf3+0x14>
    6584:	55 23       	and	r21, r21
    6586:	b1 f3       	breq	.-20     	; 0x6574 <__divsf3+0x12>
    6588:	95 1b       	sub	r25, r21
    658a:	55 0b       	sbc	r21, r21
    658c:	bb 27       	eor	r27, r27
    658e:	aa 27       	eor	r26, r26
    6590:	62 17       	cp	r22, r18
    6592:	73 07       	cpc	r23, r19
    6594:	84 07       	cpc	r24, r20
    6596:	38 f0       	brcs	.+14     	; 0x65a6 <__divsf3_pse+0x26>
    6598:	9f 5f       	subi	r25, 0xFF	; 255
    659a:	5f 4f       	sbci	r21, 0xFF	; 255
    659c:	22 0f       	add	r18, r18
    659e:	33 1f       	adc	r19, r19
    65a0:	44 1f       	adc	r20, r20
    65a2:	aa 1f       	adc	r26, r26
    65a4:	a9 f3       	breq	.-22     	; 0x6590 <__divsf3_pse+0x10>
    65a6:	33 d0       	rcall	.+102    	; 0x660e <__divsf3_pse+0x8e>
    65a8:	0e 2e       	mov	r0, r30
    65aa:	3a f0       	brmi	.+14     	; 0x65ba <__divsf3_pse+0x3a>
    65ac:	e0 e8       	ldi	r30, 0x80	; 128
    65ae:	30 d0       	rcall	.+96     	; 0x6610 <__divsf3_pse+0x90>
    65b0:	91 50       	subi	r25, 0x01	; 1
    65b2:	50 40       	sbci	r21, 0x00	; 0
    65b4:	e6 95       	lsr	r30
    65b6:	00 1c       	adc	r0, r0
    65b8:	ca f7       	brpl	.-14     	; 0x65ac <__divsf3_pse+0x2c>
    65ba:	29 d0       	rcall	.+82     	; 0x660e <__divsf3_pse+0x8e>
    65bc:	fe 2f       	mov	r31, r30
    65be:	27 d0       	rcall	.+78     	; 0x660e <__divsf3_pse+0x8e>
    65c0:	66 0f       	add	r22, r22
    65c2:	77 1f       	adc	r23, r23
    65c4:	88 1f       	adc	r24, r24
    65c6:	bb 1f       	adc	r27, r27
    65c8:	26 17       	cp	r18, r22
    65ca:	37 07       	cpc	r19, r23
    65cc:	48 07       	cpc	r20, r24
    65ce:	ab 07       	cpc	r26, r27
    65d0:	b0 e8       	ldi	r27, 0x80	; 128
    65d2:	09 f0       	breq	.+2      	; 0x65d6 <__divsf3_pse+0x56>
    65d4:	bb 0b       	sbc	r27, r27
    65d6:	80 2d       	mov	r24, r0
    65d8:	bf 01       	movw	r22, r30
    65da:	ff 27       	eor	r31, r31
    65dc:	93 58       	subi	r25, 0x83	; 131
    65de:	5f 4f       	sbci	r21, 0xFF	; 255
    65e0:	2a f0       	brmi	.+10     	; 0x65ec <__divsf3_pse+0x6c>
    65e2:	9e 3f       	cpi	r25, 0xFE	; 254
    65e4:	51 05       	cpc	r21, r1
    65e6:	68 f0       	brcs	.+26     	; 0x6602 <__divsf3_pse+0x82>
    65e8:	92 c0       	rjmp	.+292    	; 0x670e <__fp_inf>
    65ea:	dc c0       	rjmp	.+440    	; 0x67a4 <__fp_szero>
    65ec:	5f 3f       	cpi	r21, 0xFF	; 255
    65ee:	ec f3       	brlt	.-6      	; 0x65ea <__divsf3_pse+0x6a>
    65f0:	98 3e       	cpi	r25, 0xE8	; 232
    65f2:	dc f3       	brlt	.-10     	; 0x65ea <__divsf3_pse+0x6a>
    65f4:	86 95       	lsr	r24
    65f6:	77 95       	ror	r23
    65f8:	67 95       	ror	r22
    65fa:	b7 95       	ror	r27
    65fc:	f7 95       	ror	r31
    65fe:	9f 5f       	subi	r25, 0xFF	; 255
    6600:	c9 f7       	brne	.-14     	; 0x65f4 <__divsf3_pse+0x74>
    6602:	88 0f       	add	r24, r24
    6604:	91 1d       	adc	r25, r1
    6606:	96 95       	lsr	r25
    6608:	87 95       	ror	r24
    660a:	97 f9       	bld	r25, 7
    660c:	08 95       	ret
    660e:	e1 e0       	ldi	r30, 0x01	; 1
    6610:	66 0f       	add	r22, r22
    6612:	77 1f       	adc	r23, r23
    6614:	88 1f       	adc	r24, r24
    6616:	bb 1f       	adc	r27, r27
    6618:	62 17       	cp	r22, r18
    661a:	73 07       	cpc	r23, r19
    661c:	84 07       	cpc	r24, r20
    661e:	ba 07       	cpc	r27, r26
    6620:	20 f0       	brcs	.+8      	; 0x662a <__divsf3_pse+0xaa>
    6622:	62 1b       	sub	r22, r18
    6624:	73 0b       	sbc	r23, r19
    6626:	84 0b       	sbc	r24, r20
    6628:	ba 0b       	sbc	r27, r26
    662a:	ee 1f       	adc	r30, r30
    662c:	88 f7       	brcc	.-30     	; 0x6610 <__divsf3_pse+0x90>
    662e:	e0 95       	com	r30
    6630:	08 95       	ret

00006632 <__fixsfsi>:
    6632:	04 d0       	rcall	.+8      	; 0x663c <__fixunssfsi>
    6634:	68 94       	set
    6636:	b1 11       	cpse	r27, r1
    6638:	b5 c0       	rjmp	.+362    	; 0x67a4 <__fp_szero>
    663a:	08 95       	ret

0000663c <__fixunssfsi>:
    663c:	98 d0       	rcall	.+304    	; 0x676e <__fp_splitA>
    663e:	88 f0       	brcs	.+34     	; 0x6662 <__fixunssfsi+0x26>
    6640:	9f 57       	subi	r25, 0x7F	; 127
    6642:	90 f0       	brcs	.+36     	; 0x6668 <__fixunssfsi+0x2c>
    6644:	b9 2f       	mov	r27, r25
    6646:	99 27       	eor	r25, r25
    6648:	b7 51       	subi	r27, 0x17	; 23
    664a:	a0 f0       	brcs	.+40     	; 0x6674 <__fixunssfsi+0x38>
    664c:	d1 f0       	breq	.+52     	; 0x6682 <__fixunssfsi+0x46>
    664e:	66 0f       	add	r22, r22
    6650:	77 1f       	adc	r23, r23
    6652:	88 1f       	adc	r24, r24
    6654:	99 1f       	adc	r25, r25
    6656:	1a f0       	brmi	.+6      	; 0x665e <__fixunssfsi+0x22>
    6658:	ba 95       	dec	r27
    665a:	c9 f7       	brne	.-14     	; 0x664e <__fixunssfsi+0x12>
    665c:	12 c0       	rjmp	.+36     	; 0x6682 <__fixunssfsi+0x46>
    665e:	b1 30       	cpi	r27, 0x01	; 1
    6660:	81 f0       	breq	.+32     	; 0x6682 <__fixunssfsi+0x46>
    6662:	9f d0       	rcall	.+318    	; 0x67a2 <__fp_zero>
    6664:	b1 e0       	ldi	r27, 0x01	; 1
    6666:	08 95       	ret
    6668:	9c c0       	rjmp	.+312    	; 0x67a2 <__fp_zero>
    666a:	67 2f       	mov	r22, r23
    666c:	78 2f       	mov	r23, r24
    666e:	88 27       	eor	r24, r24
    6670:	b8 5f       	subi	r27, 0xF8	; 248
    6672:	39 f0       	breq	.+14     	; 0x6682 <__fixunssfsi+0x46>
    6674:	b9 3f       	cpi	r27, 0xF9	; 249
    6676:	cc f3       	brlt	.-14     	; 0x666a <__fixunssfsi+0x2e>
    6678:	86 95       	lsr	r24
    667a:	77 95       	ror	r23
    667c:	67 95       	ror	r22
    667e:	b3 95       	inc	r27
    6680:	d9 f7       	brne	.-10     	; 0x6678 <__fixunssfsi+0x3c>
    6682:	3e f4       	brtc	.+14     	; 0x6692 <__fixunssfsi+0x56>
    6684:	90 95       	com	r25
    6686:	80 95       	com	r24
    6688:	70 95       	com	r23
    668a:	61 95       	neg	r22
    668c:	7f 4f       	sbci	r23, 0xFF	; 255
    668e:	8f 4f       	sbci	r24, 0xFF	; 255
    6690:	9f 4f       	sbci	r25, 0xFF	; 255
    6692:	08 95       	ret

00006694 <__floatunsisf>:
    6694:	e8 94       	clt
    6696:	09 c0       	rjmp	.+18     	; 0x66aa <__floatsisf+0x12>

00006698 <__floatsisf>:
    6698:	97 fb       	bst	r25, 7
    669a:	3e f4       	brtc	.+14     	; 0x66aa <__floatsisf+0x12>
    669c:	90 95       	com	r25
    669e:	80 95       	com	r24
    66a0:	70 95       	com	r23
    66a2:	61 95       	neg	r22
    66a4:	7f 4f       	sbci	r23, 0xFF	; 255
    66a6:	8f 4f       	sbci	r24, 0xFF	; 255
    66a8:	9f 4f       	sbci	r25, 0xFF	; 255
    66aa:	99 23       	and	r25, r25
    66ac:	a9 f0       	breq	.+42     	; 0x66d8 <__floatsisf+0x40>
    66ae:	f9 2f       	mov	r31, r25
    66b0:	96 e9       	ldi	r25, 0x96	; 150
    66b2:	bb 27       	eor	r27, r27
    66b4:	93 95       	inc	r25
    66b6:	f6 95       	lsr	r31
    66b8:	87 95       	ror	r24
    66ba:	77 95       	ror	r23
    66bc:	67 95       	ror	r22
    66be:	b7 95       	ror	r27
    66c0:	f1 11       	cpse	r31, r1
    66c2:	f8 cf       	rjmp	.-16     	; 0x66b4 <__floatsisf+0x1c>
    66c4:	fa f4       	brpl	.+62     	; 0x6704 <__floatsisf+0x6c>
    66c6:	bb 0f       	add	r27, r27
    66c8:	11 f4       	brne	.+4      	; 0x66ce <__floatsisf+0x36>
    66ca:	60 ff       	sbrs	r22, 0
    66cc:	1b c0       	rjmp	.+54     	; 0x6704 <__floatsisf+0x6c>
    66ce:	6f 5f       	subi	r22, 0xFF	; 255
    66d0:	7f 4f       	sbci	r23, 0xFF	; 255
    66d2:	8f 4f       	sbci	r24, 0xFF	; 255
    66d4:	9f 4f       	sbci	r25, 0xFF	; 255
    66d6:	16 c0       	rjmp	.+44     	; 0x6704 <__floatsisf+0x6c>
    66d8:	88 23       	and	r24, r24
    66da:	11 f0       	breq	.+4      	; 0x66e0 <__floatsisf+0x48>
    66dc:	96 e9       	ldi	r25, 0x96	; 150
    66de:	11 c0       	rjmp	.+34     	; 0x6702 <__floatsisf+0x6a>
    66e0:	77 23       	and	r23, r23
    66e2:	21 f0       	breq	.+8      	; 0x66ec <__floatsisf+0x54>
    66e4:	9e e8       	ldi	r25, 0x8E	; 142
    66e6:	87 2f       	mov	r24, r23
    66e8:	76 2f       	mov	r23, r22
    66ea:	05 c0       	rjmp	.+10     	; 0x66f6 <__floatsisf+0x5e>
    66ec:	66 23       	and	r22, r22
    66ee:	71 f0       	breq	.+28     	; 0x670c <__floatsisf+0x74>
    66f0:	96 e8       	ldi	r25, 0x86	; 134
    66f2:	86 2f       	mov	r24, r22
    66f4:	70 e0       	ldi	r23, 0x00	; 0
    66f6:	60 e0       	ldi	r22, 0x00	; 0
    66f8:	2a f0       	brmi	.+10     	; 0x6704 <__floatsisf+0x6c>
    66fa:	9a 95       	dec	r25
    66fc:	66 0f       	add	r22, r22
    66fe:	77 1f       	adc	r23, r23
    6700:	88 1f       	adc	r24, r24
    6702:	da f7       	brpl	.-10     	; 0x66fa <__floatsisf+0x62>
    6704:	88 0f       	add	r24, r24
    6706:	96 95       	lsr	r25
    6708:	87 95       	ror	r24
    670a:	97 f9       	bld	r25, 7
    670c:	08 95       	ret

0000670e <__fp_inf>:
    670e:	97 f9       	bld	r25, 7
    6710:	9f 67       	ori	r25, 0x7F	; 127
    6712:	80 e8       	ldi	r24, 0x80	; 128
    6714:	70 e0       	ldi	r23, 0x00	; 0
    6716:	60 e0       	ldi	r22, 0x00	; 0
    6718:	08 95       	ret

0000671a <__fp_nan>:
    671a:	9f ef       	ldi	r25, 0xFF	; 255
    671c:	80 ec       	ldi	r24, 0xC0	; 192
    671e:	08 95       	ret

00006720 <__fp_pscA>:
    6720:	00 24       	eor	r0, r0
    6722:	0a 94       	dec	r0
    6724:	16 16       	cp	r1, r22
    6726:	17 06       	cpc	r1, r23
    6728:	18 06       	cpc	r1, r24
    672a:	09 06       	cpc	r0, r25
    672c:	08 95       	ret

0000672e <__fp_pscB>:
    672e:	00 24       	eor	r0, r0
    6730:	0a 94       	dec	r0
    6732:	12 16       	cp	r1, r18
    6734:	13 06       	cpc	r1, r19
    6736:	14 06       	cpc	r1, r20
    6738:	05 06       	cpc	r0, r21
    673a:	08 95       	ret

0000673c <__fp_round>:
    673c:	09 2e       	mov	r0, r25
    673e:	03 94       	inc	r0
    6740:	00 0c       	add	r0, r0
    6742:	11 f4       	brne	.+4      	; 0x6748 <__fp_round+0xc>
    6744:	88 23       	and	r24, r24
    6746:	52 f0       	brmi	.+20     	; 0x675c <__fp_round+0x20>
    6748:	bb 0f       	add	r27, r27
    674a:	40 f4       	brcc	.+16     	; 0x675c <__fp_round+0x20>
    674c:	bf 2b       	or	r27, r31
    674e:	11 f4       	brne	.+4      	; 0x6754 <__fp_round+0x18>
    6750:	60 ff       	sbrs	r22, 0
    6752:	04 c0       	rjmp	.+8      	; 0x675c <__fp_round+0x20>
    6754:	6f 5f       	subi	r22, 0xFF	; 255
    6756:	7f 4f       	sbci	r23, 0xFF	; 255
    6758:	8f 4f       	sbci	r24, 0xFF	; 255
    675a:	9f 4f       	sbci	r25, 0xFF	; 255
    675c:	08 95       	ret

0000675e <__fp_split3>:
    675e:	57 fd       	sbrc	r21, 7
    6760:	90 58       	subi	r25, 0x80	; 128
    6762:	44 0f       	add	r20, r20
    6764:	55 1f       	adc	r21, r21
    6766:	59 f0       	breq	.+22     	; 0x677e <__fp_splitA+0x10>
    6768:	5f 3f       	cpi	r21, 0xFF	; 255
    676a:	71 f0       	breq	.+28     	; 0x6788 <__fp_splitA+0x1a>
    676c:	47 95       	ror	r20

0000676e <__fp_splitA>:
    676e:	88 0f       	add	r24, r24
    6770:	97 fb       	bst	r25, 7
    6772:	99 1f       	adc	r25, r25
    6774:	61 f0       	breq	.+24     	; 0x678e <__fp_splitA+0x20>
    6776:	9f 3f       	cpi	r25, 0xFF	; 255
    6778:	79 f0       	breq	.+30     	; 0x6798 <__fp_splitA+0x2a>
    677a:	87 95       	ror	r24
    677c:	08 95       	ret
    677e:	12 16       	cp	r1, r18
    6780:	13 06       	cpc	r1, r19
    6782:	14 06       	cpc	r1, r20
    6784:	55 1f       	adc	r21, r21
    6786:	f2 cf       	rjmp	.-28     	; 0x676c <__fp_split3+0xe>
    6788:	46 95       	lsr	r20
    678a:	f1 df       	rcall	.-30     	; 0x676e <__fp_splitA>
    678c:	08 c0       	rjmp	.+16     	; 0x679e <__fp_splitA+0x30>
    678e:	16 16       	cp	r1, r22
    6790:	17 06       	cpc	r1, r23
    6792:	18 06       	cpc	r1, r24
    6794:	99 1f       	adc	r25, r25
    6796:	f1 cf       	rjmp	.-30     	; 0x677a <__fp_splitA+0xc>
    6798:	86 95       	lsr	r24
    679a:	71 05       	cpc	r23, r1
    679c:	61 05       	cpc	r22, r1
    679e:	08 94       	sec
    67a0:	08 95       	ret

000067a2 <__fp_zero>:
    67a2:	e8 94       	clt

000067a4 <__fp_szero>:
    67a4:	bb 27       	eor	r27, r27
    67a6:	66 27       	eor	r22, r22
    67a8:	77 27       	eor	r23, r23
    67aa:	cb 01       	movw	r24, r22
    67ac:	97 f9       	bld	r25, 7
    67ae:	08 95       	ret

000067b0 <__mulsf3>:
    67b0:	0b d0       	rcall	.+22     	; 0x67c8 <__mulsf3x>
    67b2:	c4 cf       	rjmp	.-120    	; 0x673c <__fp_round>
    67b4:	b5 df       	rcall	.-150    	; 0x6720 <__fp_pscA>
    67b6:	28 f0       	brcs	.+10     	; 0x67c2 <__mulsf3+0x12>
    67b8:	ba df       	rcall	.-140    	; 0x672e <__fp_pscB>
    67ba:	18 f0       	brcs	.+6      	; 0x67c2 <__mulsf3+0x12>
    67bc:	95 23       	and	r25, r21
    67be:	09 f0       	breq	.+2      	; 0x67c2 <__mulsf3+0x12>
    67c0:	a6 cf       	rjmp	.-180    	; 0x670e <__fp_inf>
    67c2:	ab cf       	rjmp	.-170    	; 0x671a <__fp_nan>
    67c4:	11 24       	eor	r1, r1
    67c6:	ee cf       	rjmp	.-36     	; 0x67a4 <__fp_szero>

000067c8 <__mulsf3x>:
    67c8:	ca df       	rcall	.-108    	; 0x675e <__fp_split3>
    67ca:	a0 f3       	brcs	.-24     	; 0x67b4 <__mulsf3+0x4>

000067cc <__mulsf3_pse>:
    67cc:	95 9f       	mul	r25, r21
    67ce:	d1 f3       	breq	.-12     	; 0x67c4 <__mulsf3+0x14>
    67d0:	95 0f       	add	r25, r21
    67d2:	50 e0       	ldi	r21, 0x00	; 0
    67d4:	55 1f       	adc	r21, r21
    67d6:	62 9f       	mul	r22, r18
    67d8:	f0 01       	movw	r30, r0
    67da:	72 9f       	mul	r23, r18
    67dc:	bb 27       	eor	r27, r27
    67de:	f0 0d       	add	r31, r0
    67e0:	b1 1d       	adc	r27, r1
    67e2:	63 9f       	mul	r22, r19
    67e4:	aa 27       	eor	r26, r26
    67e6:	f0 0d       	add	r31, r0
    67e8:	b1 1d       	adc	r27, r1
    67ea:	aa 1f       	adc	r26, r26
    67ec:	64 9f       	mul	r22, r20
    67ee:	66 27       	eor	r22, r22
    67f0:	b0 0d       	add	r27, r0
    67f2:	a1 1d       	adc	r26, r1
    67f4:	66 1f       	adc	r22, r22
    67f6:	82 9f       	mul	r24, r18
    67f8:	22 27       	eor	r18, r18
    67fa:	b0 0d       	add	r27, r0
    67fc:	a1 1d       	adc	r26, r1
    67fe:	62 1f       	adc	r22, r18
    6800:	73 9f       	mul	r23, r19
    6802:	b0 0d       	add	r27, r0
    6804:	a1 1d       	adc	r26, r1
    6806:	62 1f       	adc	r22, r18
    6808:	83 9f       	mul	r24, r19
    680a:	a0 0d       	add	r26, r0
    680c:	61 1d       	adc	r22, r1
    680e:	22 1f       	adc	r18, r18
    6810:	74 9f       	mul	r23, r20
    6812:	33 27       	eor	r19, r19
    6814:	a0 0d       	add	r26, r0
    6816:	61 1d       	adc	r22, r1
    6818:	23 1f       	adc	r18, r19
    681a:	84 9f       	mul	r24, r20
    681c:	60 0d       	add	r22, r0
    681e:	21 1d       	adc	r18, r1
    6820:	82 2f       	mov	r24, r18
    6822:	76 2f       	mov	r23, r22
    6824:	6a 2f       	mov	r22, r26
    6826:	11 24       	eor	r1, r1
    6828:	9f 57       	subi	r25, 0x7F	; 127
    682a:	50 40       	sbci	r21, 0x00	; 0
    682c:	8a f0       	brmi	.+34     	; 0x6850 <__mulsf3_pse+0x84>
    682e:	e1 f0       	breq	.+56     	; 0x6868 <__mulsf3_pse+0x9c>
    6830:	88 23       	and	r24, r24
    6832:	4a f0       	brmi	.+18     	; 0x6846 <__mulsf3_pse+0x7a>
    6834:	ee 0f       	add	r30, r30
    6836:	ff 1f       	adc	r31, r31
    6838:	bb 1f       	adc	r27, r27
    683a:	66 1f       	adc	r22, r22
    683c:	77 1f       	adc	r23, r23
    683e:	88 1f       	adc	r24, r24
    6840:	91 50       	subi	r25, 0x01	; 1
    6842:	50 40       	sbci	r21, 0x00	; 0
    6844:	a9 f7       	brne	.-22     	; 0x6830 <__mulsf3_pse+0x64>
    6846:	9e 3f       	cpi	r25, 0xFE	; 254
    6848:	51 05       	cpc	r21, r1
    684a:	70 f0       	brcs	.+28     	; 0x6868 <__mulsf3_pse+0x9c>
    684c:	60 cf       	rjmp	.-320    	; 0x670e <__fp_inf>
    684e:	aa cf       	rjmp	.-172    	; 0x67a4 <__fp_szero>
    6850:	5f 3f       	cpi	r21, 0xFF	; 255
    6852:	ec f3       	brlt	.-6      	; 0x684e <__mulsf3_pse+0x82>
    6854:	98 3e       	cpi	r25, 0xE8	; 232
    6856:	dc f3       	brlt	.-10     	; 0x684e <__mulsf3_pse+0x82>
    6858:	86 95       	lsr	r24
    685a:	77 95       	ror	r23
    685c:	67 95       	ror	r22
    685e:	b7 95       	ror	r27
    6860:	f7 95       	ror	r31
    6862:	e7 95       	ror	r30
    6864:	9f 5f       	subi	r25, 0xFF	; 255
    6866:	c1 f7       	brne	.-16     	; 0x6858 <__mulsf3_pse+0x8c>
    6868:	fe 2b       	or	r31, r30
    686a:	88 0f       	add	r24, r24
    686c:	91 1d       	adc	r25, r1
    686e:	96 95       	lsr	r25
    6870:	87 95       	ror	r24
    6872:	97 f9       	bld	r25, 7
    6874:	08 95       	ret

00006876 <__divmodhi4>:
    6876:	97 fb       	bst	r25, 7
    6878:	07 2e       	mov	r0, r23
    687a:	16 f4       	brtc	.+4      	; 0x6880 <__divmodhi4+0xa>
    687c:	00 94       	com	r0
    687e:	06 d0       	rcall	.+12     	; 0x688c <__divmodhi4_neg1>
    6880:	77 fd       	sbrc	r23, 7
    6882:	08 d0       	rcall	.+16     	; 0x6894 <__divmodhi4_neg2>
    6884:	44 d0       	rcall	.+136    	; 0x690e <__udivmodhi4>
    6886:	07 fc       	sbrc	r0, 7
    6888:	05 d0       	rcall	.+10     	; 0x6894 <__divmodhi4_neg2>
    688a:	3e f4       	brtc	.+14     	; 0x689a <__divmodhi4_exit>

0000688c <__divmodhi4_neg1>:
    688c:	90 95       	com	r25
    688e:	81 95       	neg	r24
    6890:	9f 4f       	sbci	r25, 0xFF	; 255
    6892:	08 95       	ret

00006894 <__divmodhi4_neg2>:
    6894:	70 95       	com	r23
    6896:	61 95       	neg	r22
    6898:	7f 4f       	sbci	r23, 0xFF	; 255

0000689a <__divmodhi4_exit>:
    689a:	08 95       	ret

0000689c <__udivmodsi4>:
    689c:	a1 e2       	ldi	r26, 0x21	; 33
    689e:	1a 2e       	mov	r1, r26
    68a0:	aa 1b       	sub	r26, r26
    68a2:	bb 1b       	sub	r27, r27
    68a4:	fd 01       	movw	r30, r26
    68a6:	0d c0       	rjmp	.+26     	; 0x68c2 <__udivmodsi4_ep>

000068a8 <__udivmodsi4_loop>:
    68a8:	aa 1f       	adc	r26, r26
    68aa:	bb 1f       	adc	r27, r27
    68ac:	ee 1f       	adc	r30, r30
    68ae:	ff 1f       	adc	r31, r31
    68b0:	a2 17       	cp	r26, r18
    68b2:	b3 07       	cpc	r27, r19
    68b4:	e4 07       	cpc	r30, r20
    68b6:	f5 07       	cpc	r31, r21
    68b8:	20 f0       	brcs	.+8      	; 0x68c2 <__udivmodsi4_ep>
    68ba:	a2 1b       	sub	r26, r18
    68bc:	b3 0b       	sbc	r27, r19
    68be:	e4 0b       	sbc	r30, r20
    68c0:	f5 0b       	sbc	r31, r21

000068c2 <__udivmodsi4_ep>:
    68c2:	66 1f       	adc	r22, r22
    68c4:	77 1f       	adc	r23, r23
    68c6:	88 1f       	adc	r24, r24
    68c8:	99 1f       	adc	r25, r25
    68ca:	1a 94       	dec	r1
    68cc:	69 f7       	brne	.-38     	; 0x68a8 <__udivmodsi4_loop>
    68ce:	60 95       	com	r22
    68d0:	70 95       	com	r23
    68d2:	80 95       	com	r24
    68d4:	90 95       	com	r25
    68d6:	9b 01       	movw	r18, r22
    68d8:	ac 01       	movw	r20, r24
    68da:	bd 01       	movw	r22, r26
    68dc:	cf 01       	movw	r24, r30
    68de:	08 95       	ret

000068e0 <__tablejump2__>:
    68e0:	ee 0f       	add	r30, r30
    68e2:	ff 1f       	adc	r31, r31
    68e4:	88 1f       	adc	r24, r24
    68e6:	8b bf       	out	0x3b, r24	; 59
    68e8:	07 90       	elpm	r0, Z+
    68ea:	f6 91       	elpm	r31, Z
    68ec:	e0 2d       	mov	r30, r0
    68ee:	19 94       	eijmp

000068f0 <__umulhisi3>:
    68f0:	a2 9f       	mul	r26, r18
    68f2:	b0 01       	movw	r22, r0
    68f4:	b3 9f       	mul	r27, r19
    68f6:	c0 01       	movw	r24, r0
    68f8:	a3 9f       	mul	r26, r19
    68fa:	70 0d       	add	r23, r0
    68fc:	81 1d       	adc	r24, r1
    68fe:	11 24       	eor	r1, r1
    6900:	91 1d       	adc	r25, r1
    6902:	b2 9f       	mul	r27, r18
    6904:	70 0d       	add	r23, r0
    6906:	81 1d       	adc	r24, r1
    6908:	11 24       	eor	r1, r1
    690a:	91 1d       	adc	r25, r1
    690c:	08 95       	ret

0000690e <__udivmodhi4>:
    690e:	aa 1b       	sub	r26, r26
    6910:	bb 1b       	sub	r27, r27
    6912:	51 e1       	ldi	r21, 0x11	; 17
    6914:	07 c0       	rjmp	.+14     	; 0x6924 <__udivmodhi4_ep>

00006916 <__udivmodhi4_loop>:
    6916:	aa 1f       	adc	r26, r26
    6918:	bb 1f       	adc	r27, r27
    691a:	a6 17       	cp	r26, r22
    691c:	b7 07       	cpc	r27, r23
    691e:	10 f0       	brcs	.+4      	; 0x6924 <__udivmodhi4_ep>
    6920:	a6 1b       	sub	r26, r22
    6922:	b7 0b       	sbc	r27, r23

00006924 <__udivmodhi4_ep>:
    6924:	88 1f       	adc	r24, r24
    6926:	99 1f       	adc	r25, r25
    6928:	5a 95       	dec	r21
    692a:	a9 f7       	brne	.-22     	; 0x6916 <__udivmodhi4_loop>
    692c:	80 95       	com	r24
    692e:	90 95       	com	r25
    6930:	bc 01       	movw	r22, r24
    6932:	cd 01       	movw	r24, r26
    6934:	08 95       	ret

00006936 <malloc>:
    6936:	0f 93       	push	r16
    6938:	1f 93       	push	r17
    693a:	cf 93       	push	r28
    693c:	df 93       	push	r29
    693e:	82 30       	cpi	r24, 0x02	; 2
    6940:	91 05       	cpc	r25, r1
    6942:	10 f4       	brcc	.+4      	; 0x6948 <malloc+0x12>
    6944:	82 e0       	ldi	r24, 0x02	; 2
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <__flp>
    694c:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <__flp+0x1>
    6950:	20 e0       	ldi	r18, 0x00	; 0
    6952:	30 e0       	ldi	r19, 0x00	; 0
    6954:	a0 e0       	ldi	r26, 0x00	; 0
    6956:	b0 e0       	ldi	r27, 0x00	; 0
    6958:	30 97       	sbiw	r30, 0x00	; 0
    695a:	19 f1       	breq	.+70     	; 0x69a2 <malloc+0x6c>
    695c:	40 81       	ld	r20, Z
    695e:	51 81       	ldd	r21, Z+1	; 0x01
    6960:	02 81       	ldd	r16, Z+2	; 0x02
    6962:	13 81       	ldd	r17, Z+3	; 0x03
    6964:	48 17       	cp	r20, r24
    6966:	59 07       	cpc	r21, r25
    6968:	c8 f0       	brcs	.+50     	; 0x699c <malloc+0x66>
    696a:	84 17       	cp	r24, r20
    696c:	95 07       	cpc	r25, r21
    696e:	69 f4       	brne	.+26     	; 0x698a <malloc+0x54>
    6970:	10 97       	sbiw	r26, 0x00	; 0
    6972:	31 f0       	breq	.+12     	; 0x6980 <malloc+0x4a>
    6974:	12 96       	adiw	r26, 0x02	; 2
    6976:	0c 93       	st	X, r16
    6978:	12 97       	sbiw	r26, 0x02	; 2
    697a:	13 96       	adiw	r26, 0x03	; 3
    697c:	1c 93       	st	X, r17
    697e:	27 c0       	rjmp	.+78     	; 0x69ce <malloc+0x98>
    6980:	00 93 59 19 	sts	0x1959, r16	; 0x801959 <__flp>
    6984:	10 93 5a 19 	sts	0x195A, r17	; 0x80195a <__flp+0x1>
    6988:	22 c0       	rjmp	.+68     	; 0x69ce <malloc+0x98>
    698a:	21 15       	cp	r18, r1
    698c:	31 05       	cpc	r19, r1
    698e:	19 f0       	breq	.+6      	; 0x6996 <malloc+0x60>
    6990:	42 17       	cp	r20, r18
    6992:	53 07       	cpc	r21, r19
    6994:	18 f4       	brcc	.+6      	; 0x699c <malloc+0x66>
    6996:	9a 01       	movw	r18, r20
    6998:	bd 01       	movw	r22, r26
    699a:	ef 01       	movw	r28, r30
    699c:	df 01       	movw	r26, r30
    699e:	f8 01       	movw	r30, r16
    69a0:	db cf       	rjmp	.-74     	; 0x6958 <malloc+0x22>
    69a2:	21 15       	cp	r18, r1
    69a4:	31 05       	cpc	r19, r1
    69a6:	f9 f0       	breq	.+62     	; 0x69e6 <malloc+0xb0>
    69a8:	28 1b       	sub	r18, r24
    69aa:	39 0b       	sbc	r19, r25
    69ac:	24 30       	cpi	r18, 0x04	; 4
    69ae:	31 05       	cpc	r19, r1
    69b0:	80 f4       	brcc	.+32     	; 0x69d2 <malloc+0x9c>
    69b2:	8a 81       	ldd	r24, Y+2	; 0x02
    69b4:	9b 81       	ldd	r25, Y+3	; 0x03
    69b6:	61 15       	cp	r22, r1
    69b8:	71 05       	cpc	r23, r1
    69ba:	21 f0       	breq	.+8      	; 0x69c4 <malloc+0x8e>
    69bc:	fb 01       	movw	r30, r22
    69be:	93 83       	std	Z+3, r25	; 0x03
    69c0:	82 83       	std	Z+2, r24	; 0x02
    69c2:	04 c0       	rjmp	.+8      	; 0x69cc <malloc+0x96>
    69c4:	90 93 5a 19 	sts	0x195A, r25	; 0x80195a <__flp+0x1>
    69c8:	80 93 59 19 	sts	0x1959, r24	; 0x801959 <__flp>
    69cc:	fe 01       	movw	r30, r28
    69ce:	32 96       	adiw	r30, 0x02	; 2
    69d0:	44 c0       	rjmp	.+136    	; 0x6a5a <malloc+0x124>
    69d2:	fe 01       	movw	r30, r28
    69d4:	e2 0f       	add	r30, r18
    69d6:	f3 1f       	adc	r31, r19
    69d8:	81 93       	st	Z+, r24
    69da:	91 93       	st	Z+, r25
    69dc:	22 50       	subi	r18, 0x02	; 2
    69de:	31 09       	sbc	r19, r1
    69e0:	39 83       	std	Y+1, r19	; 0x01
    69e2:	28 83       	st	Y, r18
    69e4:	3a c0       	rjmp	.+116    	; 0x6a5a <malloc+0x124>
    69e6:	20 91 57 19 	lds	r18, 0x1957	; 0x801957 <__brkval>
    69ea:	30 91 58 19 	lds	r19, 0x1958	; 0x801958 <__brkval+0x1>
    69ee:	23 2b       	or	r18, r19
    69f0:	41 f4       	brne	.+16     	; 0x6a02 <malloc+0xcc>
    69f2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    69f6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    69fa:	30 93 58 19 	sts	0x1958, r19	; 0x801958 <__brkval+0x1>
    69fe:	20 93 57 19 	sts	0x1957, r18	; 0x801957 <__brkval>
    6a02:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    6a06:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    6a0a:	21 15       	cp	r18, r1
    6a0c:	31 05       	cpc	r19, r1
    6a0e:	41 f4       	brne	.+16     	; 0x6a20 <malloc+0xea>
    6a10:	2d b7       	in	r18, 0x3d	; 61
    6a12:	3e b7       	in	r19, 0x3e	; 62
    6a14:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6a18:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6a1c:	24 1b       	sub	r18, r20
    6a1e:	35 0b       	sbc	r19, r21
    6a20:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <__brkval>
    6a24:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <__brkval+0x1>
    6a28:	e2 17       	cp	r30, r18
    6a2a:	f3 07       	cpc	r31, r19
    6a2c:	a0 f4       	brcc	.+40     	; 0x6a56 <malloc+0x120>
    6a2e:	2e 1b       	sub	r18, r30
    6a30:	3f 0b       	sbc	r19, r31
    6a32:	28 17       	cp	r18, r24
    6a34:	39 07       	cpc	r19, r25
    6a36:	78 f0       	brcs	.+30     	; 0x6a56 <malloc+0x120>
    6a38:	ac 01       	movw	r20, r24
    6a3a:	4e 5f       	subi	r20, 0xFE	; 254
    6a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    6a3e:	24 17       	cp	r18, r20
    6a40:	35 07       	cpc	r19, r21
    6a42:	48 f0       	brcs	.+18     	; 0x6a56 <malloc+0x120>
    6a44:	4e 0f       	add	r20, r30
    6a46:	5f 1f       	adc	r21, r31
    6a48:	50 93 58 19 	sts	0x1958, r21	; 0x801958 <__brkval+0x1>
    6a4c:	40 93 57 19 	sts	0x1957, r20	; 0x801957 <__brkval>
    6a50:	81 93       	st	Z+, r24
    6a52:	91 93       	st	Z+, r25
    6a54:	02 c0       	rjmp	.+4      	; 0x6a5a <malloc+0x124>
    6a56:	e0 e0       	ldi	r30, 0x00	; 0
    6a58:	f0 e0       	ldi	r31, 0x00	; 0
    6a5a:	cf 01       	movw	r24, r30
    6a5c:	df 91       	pop	r29
    6a5e:	cf 91       	pop	r28
    6a60:	1f 91       	pop	r17
    6a62:	0f 91       	pop	r16
    6a64:	08 95       	ret

00006a66 <free>:
    6a66:	cf 93       	push	r28
    6a68:	df 93       	push	r29
    6a6a:	00 97       	sbiw	r24, 0x00	; 0
    6a6c:	09 f4       	brne	.+2      	; 0x6a70 <free+0xa>
    6a6e:	81 c0       	rjmp	.+258    	; 0x6b72 <free+0x10c>
    6a70:	fc 01       	movw	r30, r24
    6a72:	32 97       	sbiw	r30, 0x02	; 2
    6a74:	13 82       	std	Z+3, r1	; 0x03
    6a76:	12 82       	std	Z+2, r1	; 0x02
    6a78:	a0 91 59 19 	lds	r26, 0x1959	; 0x801959 <__flp>
    6a7c:	b0 91 5a 19 	lds	r27, 0x195A	; 0x80195a <__flp+0x1>
    6a80:	10 97       	sbiw	r26, 0x00	; 0
    6a82:	81 f4       	brne	.+32     	; 0x6aa4 <free+0x3e>
    6a84:	20 81       	ld	r18, Z
    6a86:	31 81       	ldd	r19, Z+1	; 0x01
    6a88:	82 0f       	add	r24, r18
    6a8a:	93 1f       	adc	r25, r19
    6a8c:	20 91 57 19 	lds	r18, 0x1957	; 0x801957 <__brkval>
    6a90:	30 91 58 19 	lds	r19, 0x1958	; 0x801958 <__brkval+0x1>
    6a94:	28 17       	cp	r18, r24
    6a96:	39 07       	cpc	r19, r25
    6a98:	51 f5       	brne	.+84     	; 0x6aee <free+0x88>
    6a9a:	f0 93 58 19 	sts	0x1958, r31	; 0x801958 <__brkval+0x1>
    6a9e:	e0 93 57 19 	sts	0x1957, r30	; 0x801957 <__brkval>
    6aa2:	67 c0       	rjmp	.+206    	; 0x6b72 <free+0x10c>
    6aa4:	ed 01       	movw	r28, r26
    6aa6:	20 e0       	ldi	r18, 0x00	; 0
    6aa8:	30 e0       	ldi	r19, 0x00	; 0
    6aaa:	ce 17       	cp	r28, r30
    6aac:	df 07       	cpc	r29, r31
    6aae:	40 f4       	brcc	.+16     	; 0x6ac0 <free+0x5a>
    6ab0:	4a 81       	ldd	r20, Y+2	; 0x02
    6ab2:	5b 81       	ldd	r21, Y+3	; 0x03
    6ab4:	9e 01       	movw	r18, r28
    6ab6:	41 15       	cp	r20, r1
    6ab8:	51 05       	cpc	r21, r1
    6aba:	f1 f0       	breq	.+60     	; 0x6af8 <free+0x92>
    6abc:	ea 01       	movw	r28, r20
    6abe:	f5 cf       	rjmp	.-22     	; 0x6aaa <free+0x44>
    6ac0:	d3 83       	std	Z+3, r29	; 0x03
    6ac2:	c2 83       	std	Z+2, r28	; 0x02
    6ac4:	40 81       	ld	r20, Z
    6ac6:	51 81       	ldd	r21, Z+1	; 0x01
    6ac8:	84 0f       	add	r24, r20
    6aca:	95 1f       	adc	r25, r21
    6acc:	c8 17       	cp	r28, r24
    6ace:	d9 07       	cpc	r29, r25
    6ad0:	59 f4       	brne	.+22     	; 0x6ae8 <free+0x82>
    6ad2:	88 81       	ld	r24, Y
    6ad4:	99 81       	ldd	r25, Y+1	; 0x01
    6ad6:	84 0f       	add	r24, r20
    6ad8:	95 1f       	adc	r25, r21
    6ada:	02 96       	adiw	r24, 0x02	; 2
    6adc:	91 83       	std	Z+1, r25	; 0x01
    6ade:	80 83       	st	Z, r24
    6ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ae4:	93 83       	std	Z+3, r25	; 0x03
    6ae6:	82 83       	std	Z+2, r24	; 0x02
    6ae8:	21 15       	cp	r18, r1
    6aea:	31 05       	cpc	r19, r1
    6aec:	29 f4       	brne	.+10     	; 0x6af8 <free+0x92>
    6aee:	f0 93 5a 19 	sts	0x195A, r31	; 0x80195a <__flp+0x1>
    6af2:	e0 93 59 19 	sts	0x1959, r30	; 0x801959 <__flp>
    6af6:	3d c0       	rjmp	.+122    	; 0x6b72 <free+0x10c>
    6af8:	e9 01       	movw	r28, r18
    6afa:	fb 83       	std	Y+3, r31	; 0x03
    6afc:	ea 83       	std	Y+2, r30	; 0x02
    6afe:	49 91       	ld	r20, Y+
    6b00:	59 91       	ld	r21, Y+
    6b02:	c4 0f       	add	r28, r20
    6b04:	d5 1f       	adc	r29, r21
    6b06:	ec 17       	cp	r30, r28
    6b08:	fd 07       	cpc	r31, r29
    6b0a:	61 f4       	brne	.+24     	; 0x6b24 <free+0xbe>
    6b0c:	80 81       	ld	r24, Z
    6b0e:	91 81       	ldd	r25, Z+1	; 0x01
    6b10:	84 0f       	add	r24, r20
    6b12:	95 1f       	adc	r25, r21
    6b14:	02 96       	adiw	r24, 0x02	; 2
    6b16:	e9 01       	movw	r28, r18
    6b18:	99 83       	std	Y+1, r25	; 0x01
    6b1a:	88 83       	st	Y, r24
    6b1c:	82 81       	ldd	r24, Z+2	; 0x02
    6b1e:	93 81       	ldd	r25, Z+3	; 0x03
    6b20:	9b 83       	std	Y+3, r25	; 0x03
    6b22:	8a 83       	std	Y+2, r24	; 0x02
    6b24:	e0 e0       	ldi	r30, 0x00	; 0
    6b26:	f0 e0       	ldi	r31, 0x00	; 0
    6b28:	12 96       	adiw	r26, 0x02	; 2
    6b2a:	8d 91       	ld	r24, X+
    6b2c:	9c 91       	ld	r25, X
    6b2e:	13 97       	sbiw	r26, 0x03	; 3
    6b30:	00 97       	sbiw	r24, 0x00	; 0
    6b32:	19 f0       	breq	.+6      	; 0x6b3a <free+0xd4>
    6b34:	fd 01       	movw	r30, r26
    6b36:	dc 01       	movw	r26, r24
    6b38:	f7 cf       	rjmp	.-18     	; 0x6b28 <free+0xc2>
    6b3a:	8d 91       	ld	r24, X+
    6b3c:	9c 91       	ld	r25, X
    6b3e:	11 97       	sbiw	r26, 0x01	; 1
    6b40:	9d 01       	movw	r18, r26
    6b42:	2e 5f       	subi	r18, 0xFE	; 254
    6b44:	3f 4f       	sbci	r19, 0xFF	; 255
    6b46:	82 0f       	add	r24, r18
    6b48:	93 1f       	adc	r25, r19
    6b4a:	20 91 57 19 	lds	r18, 0x1957	; 0x801957 <__brkval>
    6b4e:	30 91 58 19 	lds	r19, 0x1958	; 0x801958 <__brkval+0x1>
    6b52:	28 17       	cp	r18, r24
    6b54:	39 07       	cpc	r19, r25
    6b56:	69 f4       	brne	.+26     	; 0x6b72 <free+0x10c>
    6b58:	30 97       	sbiw	r30, 0x00	; 0
    6b5a:	29 f4       	brne	.+10     	; 0x6b66 <free+0x100>
    6b5c:	10 92 5a 19 	sts	0x195A, r1	; 0x80195a <__flp+0x1>
    6b60:	10 92 59 19 	sts	0x1959, r1	; 0x801959 <__flp>
    6b64:	02 c0       	rjmp	.+4      	; 0x6b6a <free+0x104>
    6b66:	13 82       	std	Z+3, r1	; 0x03
    6b68:	12 82       	std	Z+2, r1	; 0x02
    6b6a:	b0 93 58 19 	sts	0x1958, r27	; 0x801958 <__brkval+0x1>
    6b6e:	a0 93 57 19 	sts	0x1957, r26	; 0x801957 <__brkval>
    6b72:	df 91       	pop	r29
    6b74:	cf 91       	pop	r28
    6b76:	08 95       	ret

00006b78 <abort>:
    6b78:	81 e0       	ldi	r24, 0x01	; 1
    6b7a:	90 e0       	ldi	r25, 0x00	; 0
    6b7c:	f8 94       	cli
    6b7e:	5a c2       	rjmp	.+1204   	; 0x7034 <_exit>

00006b80 <__ftoa_engine>:
    6b80:	28 30       	cpi	r18, 0x08	; 8
    6b82:	08 f0       	brcs	.+2      	; 0x6b86 <__ftoa_engine+0x6>
    6b84:	27 e0       	ldi	r18, 0x07	; 7
    6b86:	33 27       	eor	r19, r19
    6b88:	da 01       	movw	r26, r20
    6b8a:	99 0f       	add	r25, r25
    6b8c:	31 1d       	adc	r19, r1
    6b8e:	87 fd       	sbrc	r24, 7
    6b90:	91 60       	ori	r25, 0x01	; 1
    6b92:	00 96       	adiw	r24, 0x00	; 0
    6b94:	61 05       	cpc	r22, r1
    6b96:	71 05       	cpc	r23, r1
    6b98:	39 f4       	brne	.+14     	; 0x6ba8 <__ftoa_engine+0x28>
    6b9a:	32 60       	ori	r19, 0x02	; 2
    6b9c:	2e 5f       	subi	r18, 0xFE	; 254
    6b9e:	3d 93       	st	X+, r19
    6ba0:	30 e3       	ldi	r19, 0x30	; 48
    6ba2:	2a 95       	dec	r18
    6ba4:	e1 f7       	brne	.-8      	; 0x6b9e <__ftoa_engine+0x1e>
    6ba6:	08 95       	ret
    6ba8:	9f 3f       	cpi	r25, 0xFF	; 255
    6baa:	30 f0       	brcs	.+12     	; 0x6bb8 <__ftoa_engine+0x38>
    6bac:	80 38       	cpi	r24, 0x80	; 128
    6bae:	71 05       	cpc	r23, r1
    6bb0:	61 05       	cpc	r22, r1
    6bb2:	09 f0       	breq	.+2      	; 0x6bb6 <__ftoa_engine+0x36>
    6bb4:	3c 5f       	subi	r19, 0xFC	; 252
    6bb6:	3c 5f       	subi	r19, 0xFC	; 252
    6bb8:	3d 93       	st	X+, r19
    6bba:	91 30       	cpi	r25, 0x01	; 1
    6bbc:	08 f0       	brcs	.+2      	; 0x6bc0 <__ftoa_engine+0x40>
    6bbe:	80 68       	ori	r24, 0x80	; 128
    6bc0:	91 1d       	adc	r25, r1
    6bc2:	df 93       	push	r29
    6bc4:	cf 93       	push	r28
    6bc6:	1f 93       	push	r17
    6bc8:	0f 93       	push	r16
    6bca:	ff 92       	push	r15
    6bcc:	ef 92       	push	r14
    6bce:	19 2f       	mov	r17, r25
    6bd0:	98 7f       	andi	r25, 0xF8	; 248
    6bd2:	96 95       	lsr	r25
    6bd4:	e9 2f       	mov	r30, r25
    6bd6:	96 95       	lsr	r25
    6bd8:	96 95       	lsr	r25
    6bda:	e9 0f       	add	r30, r25
    6bdc:	ff 27       	eor	r31, r31
    6bde:	e4 50       	subi	r30, 0x04	; 4
    6be0:	fe 4f       	sbci	r31, 0xFE	; 254
    6be2:	99 27       	eor	r25, r25
    6be4:	33 27       	eor	r19, r19
    6be6:	ee 24       	eor	r14, r14
    6be8:	ff 24       	eor	r15, r15
    6bea:	a7 01       	movw	r20, r14
    6bec:	e7 01       	movw	r28, r14
    6bee:	05 90       	lpm	r0, Z+
    6bf0:	08 94       	sec
    6bf2:	07 94       	ror	r0
    6bf4:	28 f4       	brcc	.+10     	; 0x6c00 <__ftoa_engine+0x80>
    6bf6:	36 0f       	add	r19, r22
    6bf8:	e7 1e       	adc	r14, r23
    6bfa:	f8 1e       	adc	r15, r24
    6bfc:	49 1f       	adc	r20, r25
    6bfe:	51 1d       	adc	r21, r1
    6c00:	66 0f       	add	r22, r22
    6c02:	77 1f       	adc	r23, r23
    6c04:	88 1f       	adc	r24, r24
    6c06:	99 1f       	adc	r25, r25
    6c08:	06 94       	lsr	r0
    6c0a:	a1 f7       	brne	.-24     	; 0x6bf4 <__ftoa_engine+0x74>
    6c0c:	05 90       	lpm	r0, Z+
    6c0e:	07 94       	ror	r0
    6c10:	28 f4       	brcc	.+10     	; 0x6c1c <__ftoa_engine+0x9c>
    6c12:	e7 0e       	add	r14, r23
    6c14:	f8 1e       	adc	r15, r24
    6c16:	49 1f       	adc	r20, r25
    6c18:	56 1f       	adc	r21, r22
    6c1a:	c1 1d       	adc	r28, r1
    6c1c:	77 0f       	add	r23, r23
    6c1e:	88 1f       	adc	r24, r24
    6c20:	99 1f       	adc	r25, r25
    6c22:	66 1f       	adc	r22, r22
    6c24:	06 94       	lsr	r0
    6c26:	a1 f7       	brne	.-24     	; 0x6c10 <__ftoa_engine+0x90>
    6c28:	05 90       	lpm	r0, Z+
    6c2a:	07 94       	ror	r0
    6c2c:	28 f4       	brcc	.+10     	; 0x6c38 <__ftoa_engine+0xb8>
    6c2e:	f8 0e       	add	r15, r24
    6c30:	49 1f       	adc	r20, r25
    6c32:	56 1f       	adc	r21, r22
    6c34:	c7 1f       	adc	r28, r23
    6c36:	d1 1d       	adc	r29, r1
    6c38:	88 0f       	add	r24, r24
    6c3a:	99 1f       	adc	r25, r25
    6c3c:	66 1f       	adc	r22, r22
    6c3e:	77 1f       	adc	r23, r23
    6c40:	06 94       	lsr	r0
    6c42:	a1 f7       	brne	.-24     	; 0x6c2c <__ftoa_engine+0xac>
    6c44:	05 90       	lpm	r0, Z+
    6c46:	07 94       	ror	r0
    6c48:	20 f4       	brcc	.+8      	; 0x6c52 <__ftoa_engine+0xd2>
    6c4a:	49 0f       	add	r20, r25
    6c4c:	56 1f       	adc	r21, r22
    6c4e:	c7 1f       	adc	r28, r23
    6c50:	d8 1f       	adc	r29, r24
    6c52:	99 0f       	add	r25, r25
    6c54:	66 1f       	adc	r22, r22
    6c56:	77 1f       	adc	r23, r23
    6c58:	88 1f       	adc	r24, r24
    6c5a:	06 94       	lsr	r0
    6c5c:	a9 f7       	brne	.-22     	; 0x6c48 <__ftoa_engine+0xc8>
    6c5e:	84 91       	lpm	r24, Z
    6c60:	10 95       	com	r17
    6c62:	17 70       	andi	r17, 0x07	; 7
    6c64:	41 f0       	breq	.+16     	; 0x6c76 <__ftoa_engine+0xf6>
    6c66:	d6 95       	lsr	r29
    6c68:	c7 95       	ror	r28
    6c6a:	57 95       	ror	r21
    6c6c:	47 95       	ror	r20
    6c6e:	f7 94       	ror	r15
    6c70:	e7 94       	ror	r14
    6c72:	1a 95       	dec	r17
    6c74:	c1 f7       	brne	.-16     	; 0x6c66 <__ftoa_engine+0xe6>
    6c76:	e2 ea       	ldi	r30, 0xA2	; 162
    6c78:	f1 e0       	ldi	r31, 0x01	; 1
    6c7a:	68 94       	set
    6c7c:	15 90       	lpm	r1, Z+
    6c7e:	15 91       	lpm	r17, Z+
    6c80:	35 91       	lpm	r19, Z+
    6c82:	65 91       	lpm	r22, Z+
    6c84:	95 91       	lpm	r25, Z+
    6c86:	05 90       	lpm	r0, Z+
    6c88:	7f e2       	ldi	r23, 0x2F	; 47
    6c8a:	73 95       	inc	r23
    6c8c:	e1 18       	sub	r14, r1
    6c8e:	f1 0a       	sbc	r15, r17
    6c90:	43 0b       	sbc	r20, r19
    6c92:	56 0b       	sbc	r21, r22
    6c94:	c9 0b       	sbc	r28, r25
    6c96:	d0 09       	sbc	r29, r0
    6c98:	c0 f7       	brcc	.-16     	; 0x6c8a <__ftoa_engine+0x10a>
    6c9a:	e1 0c       	add	r14, r1
    6c9c:	f1 1e       	adc	r15, r17
    6c9e:	43 1f       	adc	r20, r19
    6ca0:	56 1f       	adc	r21, r22
    6ca2:	c9 1f       	adc	r28, r25
    6ca4:	d0 1d       	adc	r29, r0
    6ca6:	7e f4       	brtc	.+30     	; 0x6cc6 <__ftoa_engine+0x146>
    6ca8:	70 33       	cpi	r23, 0x30	; 48
    6caa:	11 f4       	brne	.+4      	; 0x6cb0 <__ftoa_engine+0x130>
    6cac:	8a 95       	dec	r24
    6cae:	e6 cf       	rjmp	.-52     	; 0x6c7c <__ftoa_engine+0xfc>
    6cb0:	e8 94       	clt
    6cb2:	01 50       	subi	r16, 0x01	; 1
    6cb4:	30 f0       	brcs	.+12     	; 0x6cc2 <__ftoa_engine+0x142>
    6cb6:	08 0f       	add	r16, r24
    6cb8:	0a f4       	brpl	.+2      	; 0x6cbc <__ftoa_engine+0x13c>
    6cba:	00 27       	eor	r16, r16
    6cbc:	02 17       	cp	r16, r18
    6cbe:	08 f4       	brcc	.+2      	; 0x6cc2 <__ftoa_engine+0x142>
    6cc0:	20 2f       	mov	r18, r16
    6cc2:	23 95       	inc	r18
    6cc4:	02 2f       	mov	r16, r18
    6cc6:	7a 33       	cpi	r23, 0x3A	; 58
    6cc8:	28 f0       	brcs	.+10     	; 0x6cd4 <__ftoa_engine+0x154>
    6cca:	79 e3       	ldi	r23, 0x39	; 57
    6ccc:	7d 93       	st	X+, r23
    6cce:	2a 95       	dec	r18
    6cd0:	e9 f7       	brne	.-6      	; 0x6ccc <__ftoa_engine+0x14c>
    6cd2:	10 c0       	rjmp	.+32     	; 0x6cf4 <__ftoa_engine+0x174>
    6cd4:	7d 93       	st	X+, r23
    6cd6:	2a 95       	dec	r18
    6cd8:	89 f6       	brne	.-94     	; 0x6c7c <__ftoa_engine+0xfc>
    6cda:	06 94       	lsr	r0
    6cdc:	97 95       	ror	r25
    6cde:	67 95       	ror	r22
    6ce0:	37 95       	ror	r19
    6ce2:	17 95       	ror	r17
    6ce4:	17 94       	ror	r1
    6ce6:	e1 18       	sub	r14, r1
    6ce8:	f1 0a       	sbc	r15, r17
    6cea:	43 0b       	sbc	r20, r19
    6cec:	56 0b       	sbc	r21, r22
    6cee:	c9 0b       	sbc	r28, r25
    6cf0:	d0 09       	sbc	r29, r0
    6cf2:	98 f0       	brcs	.+38     	; 0x6d1a <__ftoa_engine+0x19a>
    6cf4:	23 95       	inc	r18
    6cf6:	7e 91       	ld	r23, -X
    6cf8:	73 95       	inc	r23
    6cfa:	7a 33       	cpi	r23, 0x3A	; 58
    6cfc:	08 f0       	brcs	.+2      	; 0x6d00 <__ftoa_engine+0x180>
    6cfe:	70 e3       	ldi	r23, 0x30	; 48
    6d00:	7c 93       	st	X, r23
    6d02:	20 13       	cpse	r18, r16
    6d04:	b8 f7       	brcc	.-18     	; 0x6cf4 <__ftoa_engine+0x174>
    6d06:	7e 91       	ld	r23, -X
    6d08:	70 61       	ori	r23, 0x10	; 16
    6d0a:	7d 93       	st	X+, r23
    6d0c:	30 f0       	brcs	.+12     	; 0x6d1a <__ftoa_engine+0x19a>
    6d0e:	83 95       	inc	r24
    6d10:	71 e3       	ldi	r23, 0x31	; 49
    6d12:	7d 93       	st	X+, r23
    6d14:	70 e3       	ldi	r23, 0x30	; 48
    6d16:	2a 95       	dec	r18
    6d18:	e1 f7       	brne	.-8      	; 0x6d12 <__ftoa_engine+0x192>
    6d1a:	11 24       	eor	r1, r1
    6d1c:	ef 90       	pop	r14
    6d1e:	ff 90       	pop	r15
    6d20:	0f 91       	pop	r16
    6d22:	1f 91       	pop	r17
    6d24:	cf 91       	pop	r28
    6d26:	df 91       	pop	r29
    6d28:	99 27       	eor	r25, r25
    6d2a:	87 fd       	sbrc	r24, 7
    6d2c:	90 95       	com	r25
    6d2e:	08 95       	ret

00006d30 <strnlen_P>:
    6d30:	fc 01       	movw	r30, r24
    6d32:	05 90       	lpm	r0, Z+
    6d34:	61 50       	subi	r22, 0x01	; 1
    6d36:	70 40       	sbci	r23, 0x00	; 0
    6d38:	01 10       	cpse	r0, r1
    6d3a:	d8 f7       	brcc	.-10     	; 0x6d32 <strnlen_P+0x2>
    6d3c:	80 95       	com	r24
    6d3e:	90 95       	com	r25
    6d40:	8e 0f       	add	r24, r30
    6d42:	9f 1f       	adc	r25, r31
    6d44:	08 95       	ret

00006d46 <memcpy>:
    6d46:	fb 01       	movw	r30, r22
    6d48:	dc 01       	movw	r26, r24
    6d4a:	02 c0       	rjmp	.+4      	; 0x6d50 <memcpy+0xa>
    6d4c:	01 90       	ld	r0, Z+
    6d4e:	0d 92       	st	X+, r0
    6d50:	41 50       	subi	r20, 0x01	; 1
    6d52:	50 40       	sbci	r21, 0x00	; 0
    6d54:	d8 f7       	brcc	.-10     	; 0x6d4c <memcpy+0x6>
    6d56:	08 95       	ret

00006d58 <memset>:
    6d58:	dc 01       	movw	r26, r24
    6d5a:	01 c0       	rjmp	.+2      	; 0x6d5e <memset+0x6>
    6d5c:	6d 93       	st	X+, r22
    6d5e:	41 50       	subi	r20, 0x01	; 1
    6d60:	50 40       	sbci	r21, 0x00	; 0
    6d62:	e0 f7       	brcc	.-8      	; 0x6d5c <memset+0x4>
    6d64:	08 95       	ret

00006d66 <strcasestr>:
    6d66:	fb 01       	movw	r30, r22
    6d68:	51 91       	ld	r21, Z+
    6d6a:	55 23       	and	r21, r21
    6d6c:	b1 f0       	breq	.+44     	; 0x6d9a <strcasestr+0x34>
    6d6e:	bf 01       	movw	r22, r30
    6d70:	dc 01       	movw	r26, r24
    6d72:	05 2e       	mov	r0, r21
    6d74:	4d 91       	ld	r20, X+
    6d76:	44 23       	and	r20, r20
    6d78:	69 f0       	breq	.+26     	; 0x6d94 <strcasestr+0x2e>
    6d7a:	10 d0       	rcall	.+32     	; 0x6d9c <strcasestr+0x36>
    6d7c:	d9 f7       	brne	.-10     	; 0x6d74 <strcasestr+0xe>
    6d7e:	cd 01       	movw	r24, r26
    6d80:	01 90       	ld	r0, Z+
    6d82:	00 20       	and	r0, r0
    6d84:	49 f0       	breq	.+18     	; 0x6d98 <strcasestr+0x32>
    6d86:	4d 91       	ld	r20, X+
    6d88:	41 11       	cpse	r20, r1
    6d8a:	08 d0       	rcall	.+16     	; 0x6d9c <strcasestr+0x36>
    6d8c:	c9 f3       	breq	.-14     	; 0x6d80 <strcasestr+0x1a>
    6d8e:	fb 01       	movw	r30, r22
    6d90:	41 11       	cpse	r20, r1
    6d92:	ee cf       	rjmp	.-36     	; 0x6d70 <strcasestr+0xa>
    6d94:	81 e0       	ldi	r24, 0x01	; 1
    6d96:	90 e0       	ldi	r25, 0x00	; 0
    6d98:	01 97       	sbiw	r24, 0x01	; 1
    6d9a:	08 95       	ret
    6d9c:	40 25       	eor	r20, r0
    6d9e:	39 f0       	breq	.+14     	; 0x6dae <strcasestr+0x48>
    6da0:	40 32       	cpi	r20, 0x20	; 32
    6da2:	29 f4       	brne	.+10     	; 0x6dae <strcasestr+0x48>
    6da4:	40 29       	or	r20, r0
    6da6:	4b 57       	subi	r20, 0x7B	; 123
    6da8:	46 5e       	subi	r20, 0xE6	; 230
    6daa:	08 f0       	brcs	.+2      	; 0x6dae <strcasestr+0x48>
    6dac:	18 94       	sez
    6dae:	08 95       	ret

00006db0 <strcat>:
    6db0:	fb 01       	movw	r30, r22
    6db2:	dc 01       	movw	r26, r24
    6db4:	0d 90       	ld	r0, X+
    6db6:	00 20       	and	r0, r0
    6db8:	e9 f7       	brne	.-6      	; 0x6db4 <strcat+0x4>
    6dba:	11 97       	sbiw	r26, 0x01	; 1
    6dbc:	01 90       	ld	r0, Z+
    6dbe:	0d 92       	st	X+, r0
    6dc0:	00 20       	and	r0, r0
    6dc2:	e1 f7       	brne	.-8      	; 0x6dbc <strcat+0xc>
    6dc4:	08 95       	ret

00006dc6 <strcpy>:
    6dc6:	fb 01       	movw	r30, r22
    6dc8:	dc 01       	movw	r26, r24
    6dca:	01 90       	ld	r0, Z+
    6dcc:	0d 92       	st	X+, r0
    6dce:	00 20       	and	r0, r0
    6dd0:	e1 f7       	brne	.-8      	; 0x6dca <strcpy+0x4>
    6dd2:	08 95       	ret

00006dd4 <strncasecmp>:
    6dd4:	fb 01       	movw	r30, r22
    6dd6:	dc 01       	movw	r26, r24
    6dd8:	41 50       	subi	r20, 0x01	; 1
    6dda:	50 40       	sbci	r21, 0x00	; 0
    6ddc:	88 f0       	brcs	.+34     	; 0x6e00 <strncasecmp+0x2c>
    6dde:	8d 91       	ld	r24, X+
    6de0:	81 34       	cpi	r24, 0x41	; 65
    6de2:	1c f0       	brlt	.+6      	; 0x6dea <strncasecmp+0x16>
    6de4:	8b 35       	cpi	r24, 0x5B	; 91
    6de6:	0c f4       	brge	.+2      	; 0x6dea <strncasecmp+0x16>
    6de8:	80 5e       	subi	r24, 0xE0	; 224
    6dea:	61 91       	ld	r22, Z+
    6dec:	61 34       	cpi	r22, 0x41	; 65
    6dee:	1c f0       	brlt	.+6      	; 0x6df6 <strncasecmp+0x22>
    6df0:	6b 35       	cpi	r22, 0x5B	; 91
    6df2:	0c f4       	brge	.+2      	; 0x6df6 <strncasecmp+0x22>
    6df4:	60 5e       	subi	r22, 0xE0	; 224
    6df6:	86 1b       	sub	r24, r22
    6df8:	61 11       	cpse	r22, r1
    6dfa:	71 f3       	breq	.-36     	; 0x6dd8 <strncasecmp+0x4>
    6dfc:	99 0b       	sbc	r25, r25
    6dfe:	08 95       	ret
    6e00:	88 1b       	sub	r24, r24
    6e02:	fc cf       	rjmp	.-8      	; 0x6dfc <strncasecmp+0x28>

00006e04 <strnlen>:
    6e04:	fc 01       	movw	r30, r24
    6e06:	61 50       	subi	r22, 0x01	; 1
    6e08:	70 40       	sbci	r23, 0x00	; 0
    6e0a:	01 90       	ld	r0, Z+
    6e0c:	01 10       	cpse	r0, r1
    6e0e:	d8 f7       	brcc	.-10     	; 0x6e06 <strnlen+0x2>
    6e10:	80 95       	com	r24
    6e12:	90 95       	com	r25
    6e14:	8e 0f       	add	r24, r30
    6e16:	9f 1f       	adc	r25, r31
    6e18:	08 95       	ret

00006e1a <fputc>:
    6e1a:	0f 93       	push	r16
    6e1c:	1f 93       	push	r17
    6e1e:	cf 93       	push	r28
    6e20:	df 93       	push	r29
    6e22:	fb 01       	movw	r30, r22
    6e24:	23 81       	ldd	r18, Z+3	; 0x03
    6e26:	21 fd       	sbrc	r18, 1
    6e28:	03 c0       	rjmp	.+6      	; 0x6e30 <fputc+0x16>
    6e2a:	8f ef       	ldi	r24, 0xFF	; 255
    6e2c:	9f ef       	ldi	r25, 0xFF	; 255
    6e2e:	2c c0       	rjmp	.+88     	; 0x6e88 <fputc+0x6e>
    6e30:	22 ff       	sbrs	r18, 2
    6e32:	16 c0       	rjmp	.+44     	; 0x6e60 <fputc+0x46>
    6e34:	46 81       	ldd	r20, Z+6	; 0x06
    6e36:	57 81       	ldd	r21, Z+7	; 0x07
    6e38:	24 81       	ldd	r18, Z+4	; 0x04
    6e3a:	35 81       	ldd	r19, Z+5	; 0x05
    6e3c:	42 17       	cp	r20, r18
    6e3e:	53 07       	cpc	r21, r19
    6e40:	44 f4       	brge	.+16     	; 0x6e52 <fputc+0x38>
    6e42:	a0 81       	ld	r26, Z
    6e44:	b1 81       	ldd	r27, Z+1	; 0x01
    6e46:	9d 01       	movw	r18, r26
    6e48:	2f 5f       	subi	r18, 0xFF	; 255
    6e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e4c:	31 83       	std	Z+1, r19	; 0x01
    6e4e:	20 83       	st	Z, r18
    6e50:	8c 93       	st	X, r24
    6e52:	26 81       	ldd	r18, Z+6	; 0x06
    6e54:	37 81       	ldd	r19, Z+7	; 0x07
    6e56:	2f 5f       	subi	r18, 0xFF	; 255
    6e58:	3f 4f       	sbci	r19, 0xFF	; 255
    6e5a:	37 83       	std	Z+7, r19	; 0x07
    6e5c:	26 83       	std	Z+6, r18	; 0x06
    6e5e:	14 c0       	rjmp	.+40     	; 0x6e88 <fputc+0x6e>
    6e60:	8b 01       	movw	r16, r22
    6e62:	ec 01       	movw	r28, r24
    6e64:	fb 01       	movw	r30, r22
    6e66:	00 84       	ldd	r0, Z+8	; 0x08
    6e68:	f1 85       	ldd	r31, Z+9	; 0x09
    6e6a:	e0 2d       	mov	r30, r0
    6e6c:	19 95       	eicall
    6e6e:	89 2b       	or	r24, r25
    6e70:	e1 f6       	brne	.-72     	; 0x6e2a <fputc+0x10>
    6e72:	d8 01       	movw	r26, r16
    6e74:	16 96       	adiw	r26, 0x06	; 6
    6e76:	8d 91       	ld	r24, X+
    6e78:	9c 91       	ld	r25, X
    6e7a:	17 97       	sbiw	r26, 0x07	; 7
    6e7c:	01 96       	adiw	r24, 0x01	; 1
    6e7e:	17 96       	adiw	r26, 0x07	; 7
    6e80:	9c 93       	st	X, r25
    6e82:	8e 93       	st	-X, r24
    6e84:	16 97       	sbiw	r26, 0x06	; 6
    6e86:	ce 01       	movw	r24, r28
    6e88:	df 91       	pop	r29
    6e8a:	cf 91       	pop	r28
    6e8c:	1f 91       	pop	r17
    6e8e:	0f 91       	pop	r16
    6e90:	08 95       	ret

00006e92 <printf>:
    6e92:	cf 93       	push	r28
    6e94:	df 93       	push	r29
    6e96:	cd b7       	in	r28, 0x3d	; 61
    6e98:	de b7       	in	r29, 0x3e	; 62
    6e9a:	ae 01       	movw	r20, r28
    6e9c:	4a 5f       	subi	r20, 0xFA	; 250
    6e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    6ea0:	fa 01       	movw	r30, r20
    6ea2:	61 91       	ld	r22, Z+
    6ea4:	71 91       	ld	r23, Z+
    6ea6:	af 01       	movw	r20, r30
    6ea8:	80 91 5d 19 	lds	r24, 0x195D	; 0x80195d <__iob+0x2>
    6eac:	90 91 5e 19 	lds	r25, 0x195E	; 0x80195e <__iob+0x3>
    6eb0:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <vfprintf>
    6eb4:	df 91       	pop	r29
    6eb6:	cf 91       	pop	r28
    6eb8:	08 95       	ret

00006eba <puts>:
    6eba:	0f 93       	push	r16
    6ebc:	1f 93       	push	r17
    6ebe:	cf 93       	push	r28
    6ec0:	df 93       	push	r29
    6ec2:	e0 91 5d 19 	lds	r30, 0x195D	; 0x80195d <__iob+0x2>
    6ec6:	f0 91 5e 19 	lds	r31, 0x195E	; 0x80195e <__iob+0x3>
    6eca:	23 81       	ldd	r18, Z+3	; 0x03
    6ecc:	21 ff       	sbrs	r18, 1
    6ece:	1b c0       	rjmp	.+54     	; 0x6f06 <puts+0x4c>
    6ed0:	8c 01       	movw	r16, r24
    6ed2:	d0 e0       	ldi	r29, 0x00	; 0
    6ed4:	c0 e0       	ldi	r28, 0x00	; 0
    6ed6:	f8 01       	movw	r30, r16
    6ed8:	81 91       	ld	r24, Z+
    6eda:	8f 01       	movw	r16, r30
    6edc:	60 91 5d 19 	lds	r22, 0x195D	; 0x80195d <__iob+0x2>
    6ee0:	70 91 5e 19 	lds	r23, 0x195E	; 0x80195e <__iob+0x3>
    6ee4:	db 01       	movw	r26, r22
    6ee6:	18 96       	adiw	r26, 0x08	; 8
    6ee8:	ed 91       	ld	r30, X+
    6eea:	fc 91       	ld	r31, X
    6eec:	19 97       	sbiw	r26, 0x09	; 9
    6eee:	88 23       	and	r24, r24
    6ef0:	31 f0       	breq	.+12     	; 0x6efe <puts+0x44>
    6ef2:	19 95       	eicall
    6ef4:	89 2b       	or	r24, r25
    6ef6:	79 f3       	breq	.-34     	; 0x6ed6 <puts+0x1c>
    6ef8:	df ef       	ldi	r29, 0xFF	; 255
    6efa:	cf ef       	ldi	r28, 0xFF	; 255
    6efc:	ec cf       	rjmp	.-40     	; 0x6ed6 <puts+0x1c>
    6efe:	8a e0       	ldi	r24, 0x0A	; 10
    6f00:	19 95       	eicall
    6f02:	89 2b       	or	r24, r25
    6f04:	19 f0       	breq	.+6      	; 0x6f0c <puts+0x52>
    6f06:	8f ef       	ldi	r24, 0xFF	; 255
    6f08:	9f ef       	ldi	r25, 0xFF	; 255
    6f0a:	02 c0       	rjmp	.+4      	; 0x6f10 <puts+0x56>
    6f0c:	8d 2f       	mov	r24, r29
    6f0e:	9c 2f       	mov	r25, r28
    6f10:	df 91       	pop	r29
    6f12:	cf 91       	pop	r28
    6f14:	1f 91       	pop	r17
    6f16:	0f 91       	pop	r16
    6f18:	08 95       	ret

00006f1a <sprintf>:
    6f1a:	0f 93       	push	r16
    6f1c:	1f 93       	push	r17
    6f1e:	cf 93       	push	r28
    6f20:	df 93       	push	r29
    6f22:	cd b7       	in	r28, 0x3d	; 61
    6f24:	de b7       	in	r29, 0x3e	; 62
    6f26:	2e 97       	sbiw	r28, 0x0e	; 14
    6f28:	0f b6       	in	r0, 0x3f	; 63
    6f2a:	f8 94       	cli
    6f2c:	de bf       	out	0x3e, r29	; 62
    6f2e:	0f be       	out	0x3f, r0	; 63
    6f30:	cd bf       	out	0x3d, r28	; 61
    6f32:	0e 89       	ldd	r16, Y+22	; 0x16
    6f34:	1f 89       	ldd	r17, Y+23	; 0x17
    6f36:	86 e0       	ldi	r24, 0x06	; 6
    6f38:	8c 83       	std	Y+4, r24	; 0x04
    6f3a:	1a 83       	std	Y+2, r17	; 0x02
    6f3c:	09 83       	std	Y+1, r16	; 0x01
    6f3e:	8f ef       	ldi	r24, 0xFF	; 255
    6f40:	9f e7       	ldi	r25, 0x7F	; 127
    6f42:	9e 83       	std	Y+6, r25	; 0x06
    6f44:	8d 83       	std	Y+5, r24	; 0x05
    6f46:	ae 01       	movw	r20, r28
    6f48:	46 5e       	subi	r20, 0xE6	; 230
    6f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    6f4c:	68 8d       	ldd	r22, Y+24	; 0x18
    6f4e:	79 8d       	ldd	r23, Y+25	; 0x19
    6f50:	ce 01       	movw	r24, r28
    6f52:	01 96       	adiw	r24, 0x01	; 1
    6f54:	0e 94 c2 2e 	call	0x5d84	; 0x5d84 <vfprintf>
    6f58:	ef 81       	ldd	r30, Y+7	; 0x07
    6f5a:	f8 85       	ldd	r31, Y+8	; 0x08
    6f5c:	e0 0f       	add	r30, r16
    6f5e:	f1 1f       	adc	r31, r17
    6f60:	10 82       	st	Z, r1
    6f62:	2e 96       	adiw	r28, 0x0e	; 14
    6f64:	0f b6       	in	r0, 0x3f	; 63
    6f66:	f8 94       	cli
    6f68:	de bf       	out	0x3e, r29	; 62
    6f6a:	0f be       	out	0x3f, r0	; 63
    6f6c:	cd bf       	out	0x3d, r28	; 61
    6f6e:	df 91       	pop	r29
    6f70:	cf 91       	pop	r28
    6f72:	1f 91       	pop	r17
    6f74:	0f 91       	pop	r16
    6f76:	08 95       	ret

00006f78 <__ultoa_invert>:
    6f78:	fa 01       	movw	r30, r20
    6f7a:	aa 27       	eor	r26, r26
    6f7c:	28 30       	cpi	r18, 0x08	; 8
    6f7e:	51 f1       	breq	.+84     	; 0x6fd4 <__ultoa_invert+0x5c>
    6f80:	20 31       	cpi	r18, 0x10	; 16
    6f82:	81 f1       	breq	.+96     	; 0x6fe4 <__ultoa_invert+0x6c>
    6f84:	e8 94       	clt
    6f86:	6f 93       	push	r22
    6f88:	6e 7f       	andi	r22, 0xFE	; 254
    6f8a:	6e 5f       	subi	r22, 0xFE	; 254
    6f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    6f90:	9f 4f       	sbci	r25, 0xFF	; 255
    6f92:	af 4f       	sbci	r26, 0xFF	; 255
    6f94:	b1 e0       	ldi	r27, 0x01	; 1
    6f96:	3e d0       	rcall	.+124    	; 0x7014 <__ultoa_invert+0x9c>
    6f98:	b4 e0       	ldi	r27, 0x04	; 4
    6f9a:	3c d0       	rcall	.+120    	; 0x7014 <__ultoa_invert+0x9c>
    6f9c:	67 0f       	add	r22, r23
    6f9e:	78 1f       	adc	r23, r24
    6fa0:	89 1f       	adc	r24, r25
    6fa2:	9a 1f       	adc	r25, r26
    6fa4:	a1 1d       	adc	r26, r1
    6fa6:	68 0f       	add	r22, r24
    6fa8:	79 1f       	adc	r23, r25
    6faa:	8a 1f       	adc	r24, r26
    6fac:	91 1d       	adc	r25, r1
    6fae:	a1 1d       	adc	r26, r1
    6fb0:	6a 0f       	add	r22, r26
    6fb2:	71 1d       	adc	r23, r1
    6fb4:	81 1d       	adc	r24, r1
    6fb6:	91 1d       	adc	r25, r1
    6fb8:	a1 1d       	adc	r26, r1
    6fba:	20 d0       	rcall	.+64     	; 0x6ffc <__ultoa_invert+0x84>
    6fbc:	09 f4       	brne	.+2      	; 0x6fc0 <__ultoa_invert+0x48>
    6fbe:	68 94       	set
    6fc0:	3f 91       	pop	r19
    6fc2:	2a e0       	ldi	r18, 0x0A	; 10
    6fc4:	26 9f       	mul	r18, r22
    6fc6:	11 24       	eor	r1, r1
    6fc8:	30 19       	sub	r19, r0
    6fca:	30 5d       	subi	r19, 0xD0	; 208
    6fcc:	31 93       	st	Z+, r19
    6fce:	de f6       	brtc	.-74     	; 0x6f86 <__ultoa_invert+0xe>
    6fd0:	cf 01       	movw	r24, r30
    6fd2:	08 95       	ret
    6fd4:	46 2f       	mov	r20, r22
    6fd6:	47 70       	andi	r20, 0x07	; 7
    6fd8:	40 5d       	subi	r20, 0xD0	; 208
    6fda:	41 93       	st	Z+, r20
    6fdc:	b3 e0       	ldi	r27, 0x03	; 3
    6fde:	0f d0       	rcall	.+30     	; 0x6ffe <__ultoa_invert+0x86>
    6fe0:	c9 f7       	brne	.-14     	; 0x6fd4 <__ultoa_invert+0x5c>
    6fe2:	f6 cf       	rjmp	.-20     	; 0x6fd0 <__ultoa_invert+0x58>
    6fe4:	46 2f       	mov	r20, r22
    6fe6:	4f 70       	andi	r20, 0x0F	; 15
    6fe8:	40 5d       	subi	r20, 0xD0	; 208
    6fea:	4a 33       	cpi	r20, 0x3A	; 58
    6fec:	18 f0       	brcs	.+6      	; 0x6ff4 <__ultoa_invert+0x7c>
    6fee:	49 5d       	subi	r20, 0xD9	; 217
    6ff0:	31 fd       	sbrc	r19, 1
    6ff2:	40 52       	subi	r20, 0x20	; 32
    6ff4:	41 93       	st	Z+, r20
    6ff6:	02 d0       	rcall	.+4      	; 0x6ffc <__ultoa_invert+0x84>
    6ff8:	a9 f7       	brne	.-22     	; 0x6fe4 <__ultoa_invert+0x6c>
    6ffa:	ea cf       	rjmp	.-44     	; 0x6fd0 <__ultoa_invert+0x58>
    6ffc:	b4 e0       	ldi	r27, 0x04	; 4
    6ffe:	a6 95       	lsr	r26
    7000:	97 95       	ror	r25
    7002:	87 95       	ror	r24
    7004:	77 95       	ror	r23
    7006:	67 95       	ror	r22
    7008:	ba 95       	dec	r27
    700a:	c9 f7       	brne	.-14     	; 0x6ffe <__ultoa_invert+0x86>
    700c:	00 97       	sbiw	r24, 0x00	; 0
    700e:	61 05       	cpc	r22, r1
    7010:	71 05       	cpc	r23, r1
    7012:	08 95       	ret
    7014:	9b 01       	movw	r18, r22
    7016:	ac 01       	movw	r20, r24
    7018:	0a 2e       	mov	r0, r26
    701a:	06 94       	lsr	r0
    701c:	57 95       	ror	r21
    701e:	47 95       	ror	r20
    7020:	37 95       	ror	r19
    7022:	27 95       	ror	r18
    7024:	ba 95       	dec	r27
    7026:	c9 f7       	brne	.-14     	; 0x701a <__ultoa_invert+0xa2>
    7028:	62 0f       	add	r22, r18
    702a:	73 1f       	adc	r23, r19
    702c:	84 1f       	adc	r24, r20
    702e:	95 1f       	adc	r25, r21
    7030:	a0 1d       	adc	r26, r0
    7032:	08 95       	ret

00007034 <_exit>:
    7034:	f8 94       	cli

00007036 <__stop_program>:
    7036:	ff cf       	rjmp	.-2      	; 0x7036 <__stop_program>
