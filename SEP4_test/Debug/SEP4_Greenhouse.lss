
SEP4_Greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000073a  00800200  00006e26  00006eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000101f  0080093a  0080093a  000075f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000075f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007650  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bb8  00000000  00000000  00007690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e265  00000000  00000000  00008248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bab  00000000  00000000  000164ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007171  00000000  00000000  0001a058  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002874  00000000  00000000  000211cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004444  00000000  00000000  00023a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c50e  00000000  00000000  00027e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac8  00000000  00000000  00034392  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	66 c1       	rjmp	.+716    	; 0x2ce <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__bad_interrupt>
       6:	00 00       	nop
       8:	83 c1       	rjmp	.+774    	; 0x310 <__bad_interrupt>
       a:	00 00       	nop
       c:	81 c1       	rjmp	.+770    	; 0x310 <__bad_interrupt>
       e:	00 00       	nop
      10:	7f c1       	rjmp	.+766    	; 0x310 <__bad_interrupt>
      12:	00 00       	nop
      14:	7d c1       	rjmp	.+762    	; 0x310 <__bad_interrupt>
      16:	00 00       	nop
      18:	7b c1       	rjmp	.+758    	; 0x310 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	79 c1       	rjmp	.+754    	; 0x310 <__bad_interrupt>
      1e:	00 00       	nop
      20:	77 c1       	rjmp	.+750    	; 0x310 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c1       	rjmp	.+746    	; 0x310 <__bad_interrupt>
      26:	00 00       	nop
      28:	73 c1       	rjmp	.+742    	; 0x310 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	71 c1       	rjmp	.+738    	; 0x310 <__bad_interrupt>
      2e:	00 00       	nop
      30:	47 c7       	rjmp	.+3726   	; 0xec0 <__vector_12>
      32:	00 00       	nop
      34:	6d c1       	rjmp	.+730    	; 0x310 <__bad_interrupt>
      36:	00 00       	nop
      38:	6b c1       	rjmp	.+726    	; 0x310 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	69 c1       	rjmp	.+722    	; 0x310 <__bad_interrupt>
      3e:	00 00       	nop
      40:	67 c1       	rjmp	.+718    	; 0x310 <__bad_interrupt>
      42:	00 00       	nop
      44:	65 c1       	rjmp	.+714    	; 0x310 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c1       	rjmp	.+710    	; 0x310 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	61 c1       	rjmp	.+706    	; 0x310 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5f c1       	rjmp	.+702    	; 0x310 <__bad_interrupt>
      52:	00 00       	nop
      54:	5d c1       	rjmp	.+698    	; 0x310 <__bad_interrupt>
      56:	00 00       	nop
      58:	5b c1       	rjmp	.+694    	; 0x310 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	59 c1       	rjmp	.+690    	; 0x310 <__bad_interrupt>
      5e:	00 00       	nop
      60:	57 c1       	rjmp	.+686    	; 0x310 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 bd 27 	jmp	0x4f7a	; 0x4f7a <__vector_25>
      68:	0c 94 0f 28 	jmp	0x501e	; 0x501e <__vector_26>
      6c:	51 c1       	rjmp	.+674    	; 0x310 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4f c1       	rjmp	.+670    	; 0x310 <__bad_interrupt>
      72:	00 00       	nop
      74:	4d c1       	rjmp	.+666    	; 0x310 <__bad_interrupt>
      76:	00 00       	nop
      78:	4b c1       	rjmp	.+662    	; 0x310 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	49 c1       	rjmp	.+658    	; 0x310 <__bad_interrupt>
      7e:	00 00       	nop
      80:	47 c1       	rjmp	.+654    	; 0x310 <__bad_interrupt>
      82:	00 00       	nop
      84:	45 c1       	rjmp	.+650    	; 0x310 <__bad_interrupt>
      86:	00 00       	nop
      88:	43 c1       	rjmp	.+646    	; 0x310 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	41 c1       	rjmp	.+642    	; 0x310 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__vector_36>
      94:	0c 94 a5 28 	jmp	0x514a	; 0x514a <__vector_37>
      98:	3b c1       	rjmp	.+630    	; 0x310 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <__vector_39>
      a0:	37 c1       	rjmp	.+622    	; 0x310 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	35 c1       	rjmp	.+618    	; 0x310 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c1       	rjmp	.+614    	; 0x310 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	31 c1       	rjmp	.+610    	; 0x310 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2f c1       	rjmp	.+606    	; 0x310 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2d c1       	rjmp	.+602    	; 0x310 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2b c1       	rjmp	.+598    	; 0x310 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	29 c1       	rjmp	.+594    	; 0x310 <__bad_interrupt>
      be:	00 00       	nop
      c0:	27 c1       	rjmp	.+590    	; 0x310 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	25 c1       	rjmp	.+586    	; 0x310 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	23 c1       	rjmp	.+582    	; 0x310 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__vector_51>
      d0:	0c 94 3b 29 	jmp	0x5276	; 0x5276 <__vector_52>
      d4:	1d c1       	rjmp	.+570    	; 0x310 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 7f 29 	jmp	0x52fe	; 0x52fe <__vector_54>
      dc:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__vector_55>
      e0:	17 c1       	rjmp	.+558    	; 0x310 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3a 1d       	adc	r19, r10
      e6:	3a 1d       	adc	r19, r10
      e8:	3a 1d       	adc	r19, r10
      ea:	71 1d       	adc	r23, r1
      ec:	79 1d       	adc	r23, r9
      ee:	8e 1d       	adc	r24, r14
      f0:	3a 1d       	adc	r19, r10
      f2:	3a 1d       	adc	r19, r10
      f4:	71 1d       	adc	r23, r1
      f6:	79 1d       	adc	r23, r9
      f8:	12 2d       	mov	r17, r2
      fa:	82 2d       	mov	r24, r2
      fc:	82 2d       	mov	r24, r2
      fe:	82 2d       	mov	r24, r2
     100:	82 2d       	mov	r24, r2
     102:	82 2d       	mov	r24, r2
     104:	82 2d       	mov	r24, r2
     106:	82 2d       	mov	r24, r2
     108:	12 2d       	mov	r17, r2
     10a:	82 2d       	mov	r24, r2
     10c:	82 2d       	mov	r24, r2
     10e:	82 2d       	mov	r24, r2
     110:	82 2d       	mov	r24, r2
     112:	82 2d       	mov	r24, r2
     114:	82 2d       	mov	r24, r2
     116:	82 2d       	mov	r24, r2
     118:	14 2d       	mov	r17, r4
     11a:	82 2d       	mov	r24, r2
     11c:	82 2d       	mov	r24, r2
     11e:	82 2d       	mov	r24, r2
     120:	82 2d       	mov	r24, r2
     122:	82 2d       	mov	r24, r2
     124:	82 2d       	mov	r24, r2
     126:	82 2d       	mov	r24, r2
     128:	82 2d       	mov	r24, r2
     12a:	82 2d       	mov	r24, r2
     12c:	82 2d       	mov	r24, r2
     12e:	82 2d       	mov	r24, r2
     130:	82 2d       	mov	r24, r2
     132:	82 2d       	mov	r24, r2
     134:	82 2d       	mov	r24, r2
     136:	82 2d       	mov	r24, r2
     138:	14 2d       	mov	r17, r4
     13a:	82 2d       	mov	r24, r2
     13c:	82 2d       	mov	r24, r2
     13e:	82 2d       	mov	r24, r2
     140:	82 2d       	mov	r24, r2
     142:	82 2d       	mov	r24, r2
     144:	82 2d       	mov	r24, r2
     146:	82 2d       	mov	r24, r2
     148:	82 2d       	mov	r24, r2
     14a:	82 2d       	mov	r24, r2
     14c:	82 2d       	mov	r24, r2
     14e:	82 2d       	mov	r24, r2
     150:	82 2d       	mov	r24, r2
     152:	82 2d       	mov	r24, r2
     154:	82 2d       	mov	r24, r2
     156:	82 2d       	mov	r24, r2
     158:	7e 2d       	mov	r23, r14
     15a:	82 2d       	mov	r24, r2
     15c:	82 2d       	mov	r24, r2
     15e:	82 2d       	mov	r24, r2
     160:	82 2d       	mov	r24, r2
     162:	82 2d       	mov	r24, r2
     164:	82 2d       	mov	r24, r2
     166:	82 2d       	mov	r24, r2
     168:	49 2d       	mov	r20, r9
     16a:	82 2d       	mov	r24, r2
     16c:	82 2d       	mov	r24, r2
     16e:	82 2d       	mov	r24, r2
     170:	82 2d       	mov	r24, r2
     172:	82 2d       	mov	r24, r2
     174:	82 2d       	mov	r24, r2
     176:	82 2d       	mov	r24, r2
     178:	82 2d       	mov	r24, r2
     17a:	82 2d       	mov	r24, r2
     17c:	82 2d       	mov	r24, r2
     17e:	82 2d       	mov	r24, r2
     180:	82 2d       	mov	r24, r2
     182:	82 2d       	mov	r24, r2
     184:	82 2d       	mov	r24, r2
     186:	82 2d       	mov	r24, r2
     188:	3d 2d       	mov	r19, r13
     18a:	82 2d       	mov	r24, r2
     18c:	82 2d       	mov	r24, r2
     18e:	82 2d       	mov	r24, r2
     190:	82 2d       	mov	r24, r2
     192:	82 2d       	mov	r24, r2
     194:	82 2d       	mov	r24, r2
     196:	82 2d       	mov	r24, r2
     198:	61 2d       	mov	r22, r1

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <prvCheckTasksWaitingTermination>
     2a0:	80 91 61 17 	lds	r24, 0x1761	; 0x801761 <pxReadyTasksLists>
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	08 f0       	brcs	.+2      	; 0x2aa <prvIdleTask+0xe>
     2a8:	45 d5       	rcall	.+2698   	; 0xd34 <vPortYield>
     2aa:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <vApplicationIdleHook>
     2ae:	f6 cf       	rjmp	.-20     	; 0x29c <prvIdleTask>

000002b0 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 b7 1a 	call	0x356e	; 0x356e <prvGetNextExpireTime>
     2c2:	49 81       	ldd	r20, Y+1	; 0x01
     2c4:	0e 94 ac 1c 	call	0x3958	; 0x3958 <prvProcessTimerOrBlockTask>
     2c8:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <prvProcessReceivedCommands>
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <prvTimerTask+0xa>

000002ce <__ctors_end>:
     2ce:	11 24       	eor	r1, r1
     2d0:	1f be       	out	0x3f, r1	; 63
     2d2:	cf ef       	ldi	r28, 0xFF	; 255
     2d4:	d1 e2       	ldi	r29, 0x21	; 33
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	00 e0       	ldi	r16, 0x00	; 0
     2dc:	0c bf       	out	0x3c, r16	; 60

000002de <__do_copy_data>:
     2de:	19 e0       	ldi	r17, 0x09	; 9
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b2 e0       	ldi	r27, 0x02	; 2
     2e4:	e6 e2       	ldi	r30, 0x26	; 38
     2e6:	fe e6       	ldi	r31, 0x6E	; 110
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	aa 33       	cpi	r26, 0x3A	; 58
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	29 e1       	ldi	r18, 0x19	; 25
     2fa:	aa e3       	ldi	r26, 0x3A	; 58
     2fc:	b9 e0       	ldi	r27, 0x09	; 9
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	a9 35       	cpi	r26, 0x59	; 89
     304:	b2 07       	cpc	r27, r18
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0e 94 8e 20 	call	0x411c	; 0x411c <main>
     30c:	0c 94 11 37 	jmp	0x6e22	; 0x6e22 <_exit>

00000310 <__bad_interrupt>:
     310:	77 ce       	rjmp	.-786    	; 0x0 <__vectors>

00000312 <main_application_task>:
}


// Main task For application to get result when every measurnment is done

void main_application_task(void *pvParameters) {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	6a 97       	sbiw	r28, 0x1a	; 26
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t xBytesSent = 0;
	//5 minute timer
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
     326:	0e 94 cc 10 	call	0x2198	; 0x2198 <xTaskGetTickCount>
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	7a 83       	std	Y+2, r23	; 0x02
     32e:	8b 83       	std	Y+3, r24	; 0x03
     330:	9c 83       	std	Y+4, r25	; 0x04
	
	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     332:	48 ea       	ldi	r20, 0xA8	; 168
     334:	58 e4       	ldi	r21, 0x48	; 72
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <xTaskDelayUntil>
		
		//First trying to measure everything
		xEventGroupSetBits(measureEventGroup, ALL_MEASURE_BITS);
     342:	45 e0       	ldi	r20, 0x05	; 5
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <measureEventGroup>
     34e:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <measureEventGroup+0x1>
     352:	3b d2       	rcall	.+1142   	; 0x7ca <xEventGroupSetBits>
		
		//printf("Measuring from sensor is done now ready bit are done ");
		
		EventBits_t uxBits = xEventGroupWaitBits(dataReadyEventGroup,ALL_READY_BITS,pdTRUE,pdTRUE,portMAX_DELAY);
     354:	cc 24       	eor	r12, r12
     356:	ca 94       	dec	r12
     358:	dc 2c       	mov	r13, r12
     35a:	76 01       	movw	r14, r12
     35c:	01 e0       	ldi	r16, 0x01	; 1
     35e:	21 e0       	ldi	r18, 0x01	; 1
     360:	4a e0       	ldi	r20, 0x0A	; 10
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <dataReadyEventGroup>
     36c:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <dataReadyEventGroup+0x1>
     370:	8c d1       	rcall	.+792    	; 0x68a <xEventGroupWaitBits>
		
		//If everything is done now we need to set the measurement and it's done
		
		if (uxBits&(ALL_READY_BITS))
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	8a 70       	andi	r24, 0x0A	; 10
     378:	99 27       	eor	r25, r25
     37a:	aa 27       	eor	r26, r26
     37c:	bb 27       	eor	r27, r27
     37e:	89 2b       	or	r24, r25
     380:	8a 2b       	or	r24, r26
     382:	8b 2b       	or	r24, r27
     384:	b1 f2       	breq	.-84     	; 0x332 <main_application_task+0x20>
		{
			set_temperature_percent(TempHumSensor_getTemp());
     386:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <TempHumSensor_getTemp>
     38a:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <set_temperature_percent>
			set_humidity_percent(TempHumSensor_getHum());
     38e:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <TempHumSensor_getHum>
     392:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <set_humidity_percent>
			set_CO2_ppm(CO2_getPPM());
     396:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <CO2_getPPM>
     39a:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <set_CO2_ppm>
			lora_driver_payload_t payload = get_lora_package(2);
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	ce 01       	movw	r24, r28
     3a2:	05 96       	adiw	r24, 0x05	; 5
     3a4:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <get_lora_package>
			
			xBytesSent = xMessageBufferSend(uplinkMessageBufferHandle,
     3a8:	0f ef       	ldi	r16, 0xFF	; 255
     3aa:	1f ef       	ldi	r17, 0xFF	; 255
     3ac:	98 01       	movw	r18, r16
     3ae:	46 e1       	ldi	r20, 0x16	; 22
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	be 01       	movw	r22, r28
     3b4:	6b 5f       	subi	r22, 0xFB	; 251
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uplinkMessageBufferHandle>
     3bc:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <uplinkMessageBufferHandle+0x1>
     3c0:	0e 94 9e 0c 	call	0x193c	; 0x193c <xStreamBufferSend>
			&payload,
			sizeof(payload),
			portMAX_DELAY);
			if(xBytesSent != sizeof(payload)){
     3c4:	86 31       	cpi	r24, 0x16	; 22
     3c6:	29 f0       	breq	.+10     	; 0x3d2 <main_application_task+0xc0>
				printf("Timed out.\n");
     3c8:	8f e6       	ldi	r24, 0x6F	; 111
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <puts>
     3d0:	b0 cf       	rjmp	.-160    	; 0x332 <main_application_task+0x20>
				// 			printf("Bytes sent: %d\n", xBytesSent);
				// 			printf("Temp sent: %d\n", tem);
				// 			printf("Humidity sent: %d\n", hum);
				// 			printf("Size of payload: %d\n", sizeof(payload));
				//			receivePayload();
				printf("Bytes put in buffer: %d\n", xBytesSent);
     3d2:	99 27       	eor	r25, r25
     3d4:	9f 93       	push	r25
     3d6:	8f 93       	push	r24
     3d8:	8a e7       	ldi	r24, 0x7A	; 122
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	a2 cf       	rjmp	.-188    	; 0x332 <main_application_task+0x20>

000003ee <create_main_application_task>:



void main_application_task(void *pvParameters);

void create_main_application_task(UBaseType_t priority){
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
		
	xTaskCreate(
     3f4:	e1 2c       	mov	r14, r1
     3f6:	f1 2c       	mov	r15, r1
     3f8:	08 2f       	mov	r16, r24
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 ec       	ldi	r20, 0xC0	; 192
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	63 e9       	ldi	r22, 0x93	; 147
     404:	72 e0       	ldi	r23, 0x02	; 2
     406:	89 e8       	ldi	r24, 0x89	; 137
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 42 10 	call	0x2084	; 0x2084 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  
	,  NULL
	,  tskIDLE_PRIORITY + priority 
	,  NULL );
	
}
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	08 95       	ret

00000416 <get_max_temperature>:
	return max_temperature;
}

uint16_t get_max_humidity(){
	return max_humidity;
}
     416:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <max_temperature>
     41a:	90 91 3d 09 	lds	r25, 0x093D	; 0x80093d <max_temperature+0x1>
     41e:	08 95       	ret

00000420 <set_max_temperature>:

void set_max_temperature(int16_t maxTemp){
	max_temperature = maxTemp;
     420:	90 93 3d 09 	sts	0x093D, r25	; 0x80093d <max_temperature+0x1>
     424:	80 93 3c 09 	sts	0x093C, r24	; 0x80093c <max_temperature>
     428:	08 95       	ret

0000042a <set_max_humidity>:
}
void set_max_humidity(uint16_t maxHum){
	max_humidity = maxHum;
     42a:	90 93 3b 09 	sts	0x093B, r25	; 0x80093b <__data_end+0x1>
     42e:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <__data_end>
     432:	08 95       	ret

00000434 <setConfiguration>:
}


void setConfiguration(lora_driver_payload_t payload){
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
	int16_t newMaxTemp = 0;
	uint16_t newMaxHum = 0;
	newMaxTemp = (payload.bytes[0] << 8 | payload.bytes[1]);
     444:	ec 84       	ldd	r14, Y+12	; 0x0c
     446:	f1 2c       	mov	r15, r1
     448:	fe 2c       	mov	r15, r14
     44a:	ee 24       	eor	r14, r14
     44c:	8d 85       	ldd	r24, Y+13	; 0x0d
     44e:	e8 2a       	or	r14, r24
	newMaxHum = (payload.bytes[2] << 8 | payload.bytes[3]);
     450:	0e 85       	ldd	r16, Y+14	; 0x0e
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	10 2f       	mov	r17, r16
     456:	00 27       	eor	r16, r16
     458:	8f 85       	ldd	r24, Y+15	; 0x0f
     45a:	08 2b       	or	r16, r24
	set_max_temperature(newMaxTemp);
     45c:	c7 01       	movw	r24, r14
     45e:	e0 df       	rcall	.-64     	; 0x420 <set_max_temperature>
	set_max_humidity(newMaxHum);
     460:	80 2f       	mov	r24, r16
     462:	91 2f       	mov	r25, r17
     464:	e2 df       	rcall	.-60     	; 0x42a <set_max_humidity>
	printf("New config, max temp: %d, max hum: %d\n", newMaxTemp, newMaxHum);
     466:	1f 93       	push	r17
     468:	0f 93       	push	r16
     46a:	ff 92       	push	r15
     46c:	ef 92       	push	r14
     46e:	83 ea       	ldi	r24, 0xA3	; 163
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	08 95       	ret

00000494 <lora_downlink_handler_task>:
	uint8_t xReceivedBytes = 0;
	
	for(;;){
		
		
		xReceivedBytes =  xMessageBufferReceive(downlinkMessageBufferHandle, 
     494:	0f ef       	ldi	r16, 0xFF	; 255
     496:	1f ef       	ldi	r17, 0xFF	; 255
     498:	98 01       	movw	r18, r16
     49a:	46 e1       	ldi	r20, 0x16	; 22
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	6e e3       	ldi	r22, 0x3E	; 62
     4a0:	79 e0       	ldi	r23, 0x09	; 9
     4a2:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <downlinkMessageBufferHandle>
     4a6:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <downlinkMessageBufferHandle+0x1>
     4aa:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <xStreamBufferReceive>
		&_downlink_payload, 
		sizeof(lora_driver_payload_t), 
		portMAX_DELAY);
		
		if(xReceivedBytes > 0){
     4ae:	88 23       	and	r24, r24
     4b0:	89 f3       	breq	.-30     	; 0x494 <lora_downlink_handler_task>
			printf("DOWN LINK: from port: %d with %d bytes received!", _downlink_payload.portNo, _downlink_payload.len); // Just for Debug
     4b2:	ee e3       	ldi	r30, 0x3E	; 62
     4b4:	f9 e0       	ldi	r31, 0x09	; 9
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	80 81       	ld	r24, Z
     4ba:	1f 92       	push	r1
     4bc:	9f 93       	push	r25
     4be:	1f 92       	push	r1
     4c0:	8f 93       	push	r24
     4c2:	8a ec       	ldi	r24, 0xCA	; 202
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	9f 93       	push	r25
     4c8:	8f 93       	push	r24
     4ca:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
			
			if(configSemaphore != NULL){
     4ce:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <configSemaphore>
     4d2:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <configSemaphore+0x1>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	b9 f2       	breq	.-82     	; 0x494 <lora_downlink_handler_task>
				if(xSemaphoreTake(configSemaphore, (TickType_t) 10 ) == pdTRUE){
     4e6:	4a e0       	ldi	r20, 0x0A	; 10
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	b4 d7       	rcall	.+3944   	; 0x1458 <xQueueSemaphoreTake>
     4f0:	81 30       	cpi	r24, 0x01	; 1
     4f2:	39 f5       	brne	.+78     	; 0x542 <lora_downlink_handler_task+0xae>
					setConfiguration(_downlink_payload);
     4f4:	8d b7       	in	r24, 0x3d	; 61
     4f6:	9e b7       	in	r25, 0x3e	; 62
     4f8:	46 97       	sbiw	r24, 0x16	; 22
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	9e bf       	out	0x3e, r25	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	8d bf       	out	0x3d, r24	; 61
     504:	ad b7       	in	r26, 0x3d	; 61
     506:	be b7       	in	r27, 0x3e	; 62
     508:	11 96       	adiw	r26, 0x01	; 1
     50a:	86 e1       	ldi	r24, 0x16	; 22
     50c:	ee e3       	ldi	r30, 0x3E	; 62
     50e:	f9 e0       	ldi	r31, 0x09	; 9
     510:	01 90       	ld	r0, Z+
     512:	0d 92       	st	X+, r0
     514:	8a 95       	dec	r24
     516:	e1 f7       	brne	.-8      	; 0x510 <lora_downlink_handler_task+0x7c>
     518:	8d df       	rcall	.-230    	; 0x434 <setConfiguration>
					xSemaphoreGive(configSemaphore);
     51a:	00 e0       	ldi	r16, 0x00	; 0
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	a9 01       	movw	r20, r18
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <configSemaphore>
     52a:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <configSemaphore+0x1>
     52e:	1a d6       	rcall	.+3124   	; 0x1164 <xQueueGenericSend>
     530:	8d b7       	in	r24, 0x3d	; 61
     532:	9e b7       	in	r25, 0x3e	; 62
     534:	46 96       	adiw	r24, 0x16	; 22
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	9e bf       	out	0x3e, r25	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	8d bf       	out	0x3d, r24	; 61
     540:	a9 cf       	rjmp	.-174    	; 0x494 <lora_downlink_handler_task>
				}
				else{
					printf("Couldn't obtain semaphore.\n");
     542:	8b ef       	ldi	r24, 0xFB	; 251
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <puts>
     54a:	a4 cf       	rjmp	.-184    	; 0x494 <lora_downlink_handler_task>

0000054c <create_lora_downlink_handler_task>:

void lora_downlink_handler_task(void *pvParameters);

static lora_driver_payload_t _downlink_payload;

void create_lora_downlink_handler_task(UBaseType_t priority){
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
		xTaskCreate(
     552:	e1 2c       	mov	r14, r1
     554:	f1 2c       	mov	r15, r1
     556:	08 2f       	mov	r16, r24
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	48 e8       	ldi	r20, 0x88	; 136
     55e:	51 e0       	ldi	r21, 0x01	; 1
     560:	66 e1       	ldi	r22, 0x16	; 22
     562:	73 e0       	ldi	r23, 0x03	; 3
     564:	8a e4       	ldi	r24, 0x4A	; 74
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	0e 94 42 10 	call	0x2084	; 0x2084 <xTaskCreate>
		,  "LRHandDownlink"
		,  configMINIMAL_STACK_SIZE+200
		,  NULL
		,  tskIDLE_PRIORITY + priority
		,  NULL );
}
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	08 95       	ret

00000574 <fan_controller_task>:
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}

void fan_controller_task(void *pvParameters) {
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	00 d0       	rcall	.+0      	; 0x57a <fan_controller_task+0x6>
     57a:	1f 92       	push	r1
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
	int16_t thresholdTemperature = 0;
	uint16_t thresholdHumidity = 0;
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(120000); 
	xLastWakeTime = xTaskGetTickCount();
     580:	0e 94 cc 10 	call	0x2198	; 0x2198 <xTaskGetTickCount>
     584:	69 83       	std	Y+1, r22	; 0x01
     586:	7a 83       	std	Y+2, r23	; 0x02
     588:	8b 83       	std	Y+3, r24	; 0x03
     58a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
     58c:	40 e1       	ldi	r20, 0x10	; 16
     58e:	5d e1       	ldi	r21, 0x1D	; 29
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	ce 01       	movw	r24, r28
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <xTaskDelayUntil>
		thresholdTemperature = get_max_temperature();
     59c:	3c df       	rcall	.-392    	; 0x416 <get_max_temperature>
     59e:	7c 01       	movw	r14, r24
		
		measure_Temp_Hum();
     5a0:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <measure_Temp_Hum>
		currentTemperature = TempHumSensor_getTemp();
     5a4:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <TempHumSensor_getTemp>
     5a8:	8c 01       	movw	r16, r24
		currentHumidity = TempHumSensor_getHum();
     5aa:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <TempHumSensor_getHum>
		
		printf("Current temp: %d\n", currentTemperature/10);
     5ae:	c8 01       	movw	r24, r16
     5b0:	6a e0       	ldi	r22, 0x0A	; 10
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	0e 94 41 33 	call	0x6682	; 0x6682 <__divmodhi4>
     5b8:	8b 01       	movw	r16, r22
     5ba:	1f 93       	push	r17
     5bc:	6f 93       	push	r22
     5be:	85 e2       	ldi	r24, 0x25	; 37
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
		printf("Threshold temp: %d\n", thresholdTemperature);
     5ca:	ff 92       	push	r15
     5cc:	ef 92       	push	r14
     5ce:	87 e3       	ldi	r24, 0x37	; 55
     5d0:	93 e0       	ldi	r25, 0x03	; 3
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
		if(currentTemperature/10 > thresholdTemperature){
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	e0 16       	cp	r14, r16
     5e6:	f1 06       	cpc	r15, r17
     5e8:	14 f4       	brge	.+4      	; 0x5ee <fan_controller_task+0x7a>
			PORTA = 0x00;
     5ea:	12 b8       	out	0x02, r1	; 2
     5ec:	cf cf       	rjmp	.-98     	; 0x58c <fan_controller_task+0x18>
		}
		else{
			PORTA = 0xFF;
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	82 b9       	out	0x02, r24	; 2
     5f2:	cc cf       	rjmp	.-104    	; 0x58c <fan_controller_task+0x18>

000005f4 <create_fan_controller_task>:

#include "FanController.h"

void fan_controller_task(void *pvParameters);

void create_fan_controller_task(UBaseType_t priority){
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
	
	DDRA = 0xFF;
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
     5fc:	91 b9       	out	0x01, r25	; 1
	PORTA = 0xFF;
     5fe:	92 b9       	out	0x02, r25	; 2
	
	xTaskCreate(
     600:	e1 2c       	mov	r14, r1
     602:	f1 2c       	mov	r15, r1
     604:	08 2f       	mov	r16, r24
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 ec       	ldi	r20, 0xC0	; 192
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	6b e4       	ldi	r22, 0x4B	; 75
     610:	73 e0       	ldi	r23, 0x03	; 3
     612:	8a eb       	ldi	r24, 0xBA	; 186
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	0e 94 42 10 	call	0x2084	; 0x2084 <xTaskCreate>
	,  "FanController"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  tskIDLE_PRIORITY + priority
	,  NULL );
}
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	08 95       	ret

00000622 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     622:	0f 93       	push	r16
     624:	01 11       	cpse	r16, r1
     626:	0c c0       	rjmp	.+24     	; 0x640 <prvTestWaitCondition+0x1e>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	82 23       	and	r24, r18
     62e:	93 23       	and	r25, r19
     630:	a4 23       	and	r26, r20
     632:	b5 23       	and	r27, r21
     634:	89 2b       	or	r24, r25
     636:	8a 2b       	or	r24, r26
     638:	8b 2b       	or	r24, r27
     63a:	79 f4       	brne	.+30     	; 0x65a <prvTestWaitCondition+0x38>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	10 c0       	rjmp	.+32     	; 0x660 <prvTestWaitCondition+0x3e>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	82 23       	and	r24, r18
     646:	93 23       	and	r25, r19
     648:	a4 23       	and	r26, r20
     64a:	b5 23       	and	r27, r21
     64c:	28 17       	cp	r18, r24
     64e:	39 07       	cpc	r19, r25
     650:	4a 07       	cpc	r20, r26
     652:	5b 07       	cpc	r21, r27
     654:	21 f0       	breq	.+8      	; 0x65e <prvTestWaitCondition+0x3c>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	03 c0       	rjmp	.+6      	; 0x660 <prvTestWaitCondition+0x3e>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	01 c0       	rjmp	.+2      	; 0x660 <prvTestWaitCondition+0x3e>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0f 91       	pop	r16
     662:	08 95       	ret

00000664 <xEventGroupCreate>:
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	8f e0       	ldi	r24, 0x0F	; 15
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	af d1       	rcall	.+862    	; 0x9cc <pvPortMalloc>
     66e:	ec 01       	movw	r28, r24
     670:	00 97       	sbiw	r24, 0x00	; 0
     672:	39 f0       	breq	.+14     	; 0x682 <xEventGroupCreate+0x1e>
     674:	fc 01       	movw	r30, r24
     676:	11 92       	st	Z+, r1
     678:	11 92       	st	Z+, r1
     67a:	11 92       	st	Z+, r1
     67c:	11 92       	st	Z+, r1
     67e:	cf 01       	movw	r24, r30
     680:	8b d2       	rcall	.+1302   	; 0xb98 <vListInitialise>
     682:	ce 01       	movw	r24, r28
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <xEventGroupWaitBits>:
     68a:	2f 92       	push	r2
     68c:	3f 92       	push	r3
     68e:	4f 92       	push	r4
     690:	5f 92       	push	r5
     692:	6f 92       	push	r6
     694:	7f 92       	push	r7
     696:	8f 92       	push	r8
     698:	9f 92       	push	r9
     69a:	af 92       	push	r10
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
     6b0:	4a 01       	movw	r8, r20
     6b2:	5b 01       	movw	r10, r22
     6b4:	62 2e       	mov	r6, r18
     6b6:	70 2e       	mov	r7, r16
     6b8:	0e 94 c6 10 	call	0x218c	; 0x218c <vTaskSuspendAll>
     6bc:	28 80       	ld	r2, Y
     6be:	39 80       	ldd	r3, Y+1	; 0x01
     6c0:	4a 80       	ldd	r4, Y+2	; 0x02
     6c2:	5b 80       	ldd	r5, Y+3	; 0x03
     6c4:	a5 01       	movw	r20, r10
     6c6:	94 01       	movw	r18, r8
     6c8:	c2 01       	movw	r24, r4
     6ca:	b1 01       	movw	r22, r2
     6cc:	aa df       	rcall	.-172    	; 0x622 <prvTestWaitCondition>
     6ce:	88 23       	and	r24, r24
     6d0:	a1 f0       	breq	.+40     	; 0x6fa <xEventGroupWaitBits+0x70>
     6d2:	66 20       	and	r6, r6
     6d4:	89 f1       	breq	.+98     	; 0x738 <xEventGroupWaitBits+0xae>
     6d6:	d5 01       	movw	r26, r10
     6d8:	c4 01       	movw	r24, r8
     6da:	80 95       	com	r24
     6dc:	90 95       	com	r25
     6de:	a0 95       	com	r26
     6e0:	b0 95       	com	r27
     6e2:	82 21       	and	r24, r2
     6e4:	93 21       	and	r25, r3
     6e6:	a4 21       	and	r26, r4
     6e8:	b5 21       	and	r27, r5
     6ea:	88 83       	st	Y, r24
     6ec:	99 83       	std	Y+1, r25	; 0x01
     6ee:	aa 83       	std	Y+2, r26	; 0x02
     6f0:	bb 83       	std	Y+3, r27	; 0x03
     6f2:	c1 2c       	mov	r12, r1
     6f4:	d1 2c       	mov	r13, r1
     6f6:	76 01       	movw	r14, r12
     6f8:	22 c0       	rjmp	.+68     	; 0x73e <xEventGroupWaitBits+0xb4>
     6fa:	c1 14       	cp	r12, r1
     6fc:	d1 04       	cpc	r13, r1
     6fe:	e1 04       	cpc	r14, r1
     700:	f1 04       	cpc	r15, r1
     702:	e9 f0       	breq	.+58     	; 0x73e <xEventGroupWaitBits+0xb4>
     704:	61 10       	cpse	r6, r1
     706:	04 c0       	rjmp	.+8      	; 0x710 <xEventGroupWaitBits+0x86>
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	ba 01       	movw	r22, r20
     70e:	04 c0       	rjmp	.+8      	; 0x718 <xEventGroupWaitBits+0x8e>
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	71 e0       	ldi	r23, 0x01	; 1
     718:	71 10       	cpse	r7, r1
     71a:	74 60       	ori	r23, 0x04	; 4
     71c:	48 29       	or	r20, r8
     71e:	59 29       	or	r21, r9
     720:	6a 29       	or	r22, r10
     722:	7b 29       	or	r23, r11
     724:	97 01       	movw	r18, r14
     726:	86 01       	movw	r16, r12
     728:	ce 01       	movw	r24, r28
     72a:	04 96       	adiw	r24, 0x04	; 4
     72c:	0e 94 de 13 	call	0x27bc	; 0x27bc <vTaskPlaceOnUnorderedEventList>
     730:	21 2c       	mov	r2, r1
     732:	31 2c       	mov	r3, r1
     734:	21 01       	movw	r4, r2
     736:	03 c0       	rjmp	.+6      	; 0x73e <xEventGroupWaitBits+0xb4>
     738:	c1 2c       	mov	r12, r1
     73a:	d1 2c       	mov	r13, r1
     73c:	76 01       	movw	r14, r12
     73e:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>
     742:	cd 28       	or	r12, r13
     744:	ce 28       	or	r12, r14
     746:	cf 28       	or	r12, r15
     748:	59 f1       	breq	.+86     	; 0x7a0 <xEventGroupWaitBits+0x116>
     74a:	81 11       	cpse	r24, r1
     74c:	01 c0       	rjmp	.+2      	; 0x750 <xEventGroupWaitBits+0xc6>
     74e:	f2 d2       	rcall	.+1508   	; 0xd34 <vPortYield>
     750:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <uxTaskResetEventItemValue>
     754:	6b 01       	movw	r12, r22
     756:	7c 01       	movw	r14, r24
     758:	91 fd       	sbrc	r25, 1
     75a:	1f c0       	rjmp	.+62     	; 0x79a <xEventGroupWaitBits+0x110>
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	0f 92       	push	r0
     762:	c8 80       	ld	r12, Y
     764:	d9 80       	ldd	r13, Y+1	; 0x01
     766:	ea 80       	ldd	r14, Y+2	; 0x02
     768:	fb 80       	ldd	r15, Y+3	; 0x03
     76a:	07 2d       	mov	r16, r7
     76c:	a5 01       	movw	r20, r10
     76e:	94 01       	movw	r18, r8
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	56 df       	rcall	.-340    	; 0x622 <prvTestWaitCondition>
     776:	88 23       	and	r24, r24
     778:	71 f0       	breq	.+28     	; 0x796 <xEventGroupWaitBits+0x10c>
     77a:	66 20       	and	r6, r6
     77c:	61 f0       	breq	.+24     	; 0x796 <xEventGroupWaitBits+0x10c>
     77e:	80 94       	com	r8
     780:	90 94       	com	r9
     782:	a0 94       	com	r10
     784:	b0 94       	com	r11
     786:	8c 20       	and	r8, r12
     788:	9d 20       	and	r9, r13
     78a:	ae 20       	and	r10, r14
     78c:	bf 20       	and	r11, r15
     78e:	88 82       	st	Y, r8
     790:	99 82       	std	Y+1, r9	; 0x01
     792:	aa 82       	std	Y+2, r10	; 0x02
     794:	bb 82       	std	Y+3, r11	; 0x03
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	16 01       	movw	r2, r12
     79c:	27 01       	movw	r4, r14
     79e:	55 24       	eor	r5, r5
     7a0:	c2 01       	movw	r24, r4
     7a2:	b1 01       	movw	r22, r2
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	bf 90       	pop	r11
     7b6:	af 90       	pop	r10
     7b8:	9f 90       	pop	r9
     7ba:	8f 90       	pop	r8
     7bc:	7f 90       	pop	r7
     7be:	6f 90       	pop	r6
     7c0:	5f 90       	pop	r5
     7c2:	4f 90       	pop	r4
     7c4:	3f 90       	pop	r3
     7c6:	2f 90       	pop	r2
     7c8:	08 95       	ret

000007ca <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     7ca:	4f 92       	push	r4
     7cc:	5f 92       	push	r5
     7ce:	6f 92       	push	r6
     7d0:	7f 92       	push	r7
     7d2:	af 92       	push	r10
     7d4:	bf 92       	push	r11
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ec 01       	movw	r28, r24
     7e8:	6a 01       	movw	r12, r20
     7ea:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7ec:	8c 01       	movw	r16, r24
     7ee:	09 5f       	subi	r16, 0xF9	; 249
     7f0:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     7f2:	0e 94 c6 10 	call	0x218c	; 0x218c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     7f6:	eb 85       	ldd	r30, Y+11	; 0x0b
     7f8:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     7fa:	88 81       	ld	r24, Y
     7fc:	99 81       	ldd	r25, Y+1	; 0x01
     7fe:	aa 81       	ldd	r26, Y+2	; 0x02
     800:	bb 81       	ldd	r27, Y+3	; 0x03
     802:	c8 2a       	or	r12, r24
     804:	d9 2a       	or	r13, r25
     806:	ea 2a       	or	r14, r26
     808:	fb 2a       	or	r15, r27
     80a:	c8 82       	st	Y, r12
     80c:	d9 82       	std	Y+1, r13	; 0x01
     80e:	ea 82       	std	Y+2, r14	; 0x02
     810:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     812:	c1 2c       	mov	r12, r1
     814:	d1 2c       	mov	r13, r1
     816:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     818:	3d c0       	rjmp	.+122    	; 0x894 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     81a:	a4 80       	ldd	r10, Z+4	; 0x04
     81c:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     81e:	80 81       	ld	r24, Z
     820:	91 81       	ldd	r25, Z+1	; 0x01
     822:	a2 81       	ldd	r26, Z+2	; 0x02
     824:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     826:	ac 01       	movw	r20, r24
     828:	bd 01       	movw	r22, r26
     82a:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     82c:	b2 fd       	sbrc	r27, 2
     82e:	0e c0       	rjmp	.+28     	; 0x84c <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     830:	48 80       	ld	r4, Y
     832:	59 80       	ldd	r5, Y+1	; 0x01
     834:	6a 80       	ldd	r6, Y+2	; 0x02
     836:	7b 80       	ldd	r7, Y+3	; 0x03
     838:	44 22       	and	r4, r20
     83a:	55 22       	and	r5, r21
     83c:	66 22       	and	r6, r22
     83e:	77 22       	and	r7, r23
     840:	45 28       	or	r4, r5
     842:	46 28       	or	r4, r6
     844:	47 28       	or	r4, r7
     846:	89 f4       	brne	.+34     	; 0x86a <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	12 c0       	rjmp	.+36     	; 0x870 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     84c:	48 80       	ld	r4, Y
     84e:	59 80       	ldd	r5, Y+1	; 0x01
     850:	6a 80       	ldd	r6, Y+2	; 0x02
     852:	7b 80       	ldd	r7, Y+3	; 0x03
     854:	44 22       	and	r4, r20
     856:	55 22       	and	r5, r21
     858:	66 22       	and	r6, r22
     85a:	77 22       	and	r7, r23
     85c:	44 15       	cp	r20, r4
     85e:	55 05       	cpc	r21, r5
     860:	66 05       	cpc	r22, r6
     862:	77 05       	cpc	r23, r7
     864:	21 f0       	breq	.+8      	; 0x86e <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	03 c0       	rjmp	.+6      	; 0x870 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	01 c0       	rjmp	.+2      	; 0x870 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     86e:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     870:	22 23       	and	r18, r18
     872:	71 f0       	breq	.+28     	; 0x890 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     874:	b0 ff       	sbrs	r27, 0
     876:	04 c0       	rjmp	.+8      	; 0x880 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     878:	c4 2a       	or	r12, r20
     87a:	d5 2a       	or	r13, r21
     87c:	e6 2a       	or	r14, r22
     87e:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     880:	48 81       	ld	r20, Y
     882:	59 81       	ldd	r21, Y+1	; 0x01
     884:	6a 81       	ldd	r22, Y+2	; 0x02
     886:	7b 81       	ldd	r23, Y+3	; 0x03
     888:	72 60       	ori	r23, 0x02	; 2
     88a:	cf 01       	movw	r24, r30
     88c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     890:	ea 2d       	mov	r30, r10
     892:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     894:	e0 17       	cp	r30, r16
     896:	f1 07       	cpc	r31, r17
     898:	09 f0       	breq	.+2      	; 0x89c <xEventGroupSetBits+0xd2>
     89a:	bf cf       	rjmp	.-130    	; 0x81a <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     89c:	c0 94       	com	r12
     89e:	d0 94       	com	r13
     8a0:	e0 94       	com	r14
     8a2:	f0 94       	com	r15
     8a4:	88 81       	ld	r24, Y
     8a6:	99 81       	ldd	r25, Y+1	; 0x01
     8a8:	aa 81       	ldd	r26, Y+2	; 0x02
     8aa:	bb 81       	ldd	r27, Y+3	; 0x03
     8ac:	c8 22       	and	r12, r24
     8ae:	d9 22       	and	r13, r25
     8b0:	ea 22       	and	r14, r26
     8b2:	fb 22       	and	r15, r27
     8b4:	c8 82       	st	Y, r12
     8b6:	d9 82       	std	Y+1, r13	; 0x01
     8b8:	ea 82       	std	Y+2, r14	; 0x02
     8ba:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     8bc:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     8c0:	68 81       	ld	r22, Y
     8c2:	79 81       	ldd	r23, Y+1	; 0x01
     8c4:	8a 81       	ldd	r24, Y+2	; 0x02
     8c6:	9b 81       	ldd	r25, Y+3	; 0x03
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	bf 90       	pop	r11
     8da:	af 90       	pop	r10
     8dc:	7f 90       	pop	r7
     8de:	6f 90       	pop	r6
     8e0:	5f 90       	pop	r5
     8e2:	4f 90       	pop	r4
     8e4:	08 95       	ret

000008e6 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8e6:	e0 e6       	ldi	r30, 0x60	; 96
     8e8:	f9 e0       	ldi	r31, 0x09	; 9
     8ea:	a4 e6       	ldi	r26, 0x64	; 100
     8ec:	b9 e0       	ldi	r27, 0x09	; 9
     8ee:	b1 83       	std	Z+1, r27	; 0x01
     8f0:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     8f2:	13 82       	std	Z+3, r1	; 0x03
     8f4:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     8f6:	ec e0       	ldi	r30, 0x0C	; 12
     8f8:	f7 e1       	ldi	r31, 0x17	; 23
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     8fa:	f0 93 5f 09 	sts	0x095F, r31	; 0x80095f <pxEnd+0x1>
     8fe:	e0 93 5e 09 	sts	0x095E, r30	; 0x80095e <pxEnd>
    pxEnd->xBlockSize = 0;
     902:	13 82       	std	Z+3, r1	; 0x03
     904:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     906:	11 82       	std	Z+1, r1	; 0x01
     908:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     90a:	88 ea       	ldi	r24, 0xA8	; 168
     90c:	9d e0       	ldi	r25, 0x0D	; 13
     90e:	13 96       	adiw	r26, 0x03	; 3
     910:	9c 93       	st	X, r25
     912:	8e 93       	st	-X, r24
     914:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     916:	ed 93       	st	X+, r30
     918:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     91a:	90 93 5b 09 	sts	0x095B, r25	; 0x80095b <xMinimumEverFreeBytesRemaining+0x1>
     91e:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     922:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <xFreeBytesRemaining+0x1>
     926:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e8       	ldi	r25, 0x80	; 128
     92e:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <xBlockAllocatedBit+0x1>
     932:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <xBlockAllocatedBit>
     936:	08 95       	ret

00000938 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     93e:	a0 e6       	ldi	r26, 0x60	; 96
     940:	b9 e0       	ldi	r27, 0x09	; 9
     942:	01 c0       	rjmp	.+2      	; 0x946 <prvInsertBlockIntoFreeList+0xe>
     944:	df 01       	movw	r26, r30
     946:	ed 91       	ld	r30, X+
     948:	fc 91       	ld	r31, X
     94a:	11 97       	sbiw	r26, 0x01	; 1
     94c:	ec 17       	cp	r30, r28
     94e:	fd 07       	cpc	r31, r29
     950:	c8 f3       	brcs	.-14     	; 0x944 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     952:	12 96       	adiw	r26, 0x02	; 2
     954:	8d 91       	ld	r24, X+
     956:	9c 91       	ld	r25, X
     958:	13 97       	sbiw	r26, 0x03	; 3
     95a:	9d 01       	movw	r18, r26
     95c:	28 0f       	add	r18, r24
     95e:	39 1f       	adc	r19, r25
     960:	c2 17       	cp	r28, r18
     962:	d3 07       	cpc	r29, r19
     964:	49 f4       	brne	.+18     	; 0x978 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     966:	2a 81       	ldd	r18, Y+2	; 0x02
     968:	3b 81       	ldd	r19, Y+3	; 0x03
     96a:	82 0f       	add	r24, r18
     96c:	93 1f       	adc	r25, r19
     96e:	13 96       	adiw	r26, 0x03	; 3
     970:	9c 93       	st	X, r25
     972:	8e 93       	st	-X, r24
     974:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     976:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	9b 81       	ldd	r25, Y+3	; 0x03
     97c:	9e 01       	movw	r18, r28
     97e:	28 0f       	add	r18, r24
     980:	39 1f       	adc	r19, r25
     982:	e2 17       	cp	r30, r18
     984:	f3 07       	cpc	r31, r19
     986:	c1 f4       	brne	.+48     	; 0x9b8 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     988:	20 91 5e 09 	lds	r18, 0x095E	; 0x80095e <pxEnd>
     98c:	30 91 5f 09 	lds	r19, 0x095F	; 0x80095f <pxEnd+0x1>
     990:	e2 17       	cp	r30, r18
     992:	f3 07       	cpc	r31, r19
     994:	71 f0       	breq	.+28     	; 0x9b2 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     996:	22 81       	ldd	r18, Z+2	; 0x02
     998:	33 81       	ldd	r19, Z+3	; 0x03
     99a:	82 0f       	add	r24, r18
     99c:	93 1f       	adc	r25, r19
     99e:	9b 83       	std	Y+3, r25	; 0x03
     9a0:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     9a2:	ed 91       	ld	r30, X+
     9a4:	fc 91       	ld	r31, X
     9a6:	11 97       	sbiw	r26, 0x01	; 1
     9a8:	80 81       	ld	r24, Z
     9aa:	91 81       	ldd	r25, Z+1	; 0x01
     9ac:	99 83       	std	Y+1, r25	; 0x01
     9ae:	88 83       	st	Y, r24
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     9b2:	39 83       	std	Y+1, r19	; 0x01
     9b4:	28 83       	st	Y, r18
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     9b8:	f9 83       	std	Y+1, r31	; 0x01
     9ba:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     9bc:	ca 17       	cp	r28, r26
     9be:	db 07       	cpc	r29, r27
     9c0:	11 f0       	breq	.+4      	; 0x9c6 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     9c2:	cd 93       	st	X+, r28
     9c4:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     9da:	0e 94 c6 10 	call	0x218c	; 0x218c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     9de:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <pxEnd>
     9e2:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <pxEnd+0x1>
     9e6:	89 2b       	or	r24, r25
     9e8:	09 f4       	brne	.+2      	; 0x9ec <pvPortMalloc+0x20>
        {
            prvHeapInit();
     9ea:	7d df       	rcall	.-262    	; 0x8e6 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     9ec:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <xBlockAllocatedBit>
     9f0:	90 91 55 09 	lds	r25, 0x0955	; 0x800955 <xBlockAllocatedBit+0x1>
     9f4:	80 23       	and	r24, r16
     9f6:	91 23       	and	r25, r17
     9f8:	89 2b       	or	r24, r25
     9fa:	09 f0       	breq	.+2      	; 0x9fe <pvPortMalloc+0x32>
     9fc:	76 c0       	rjmp	.+236    	; 0xaea <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     9fe:	01 15       	cp	r16, r1
     a00:	11 05       	cpc	r17, r1
     a02:	49 f0       	breq	.+18     	; 0xa16 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     a04:	c8 01       	movw	r24, r16
     a06:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     a08:	08 17       	cp	r16, r24
     a0a:	19 07       	cpc	r17, r25
     a0c:	18 f0       	brcs	.+6      	; 0xa14 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     a0e:	00 e0       	ldi	r16, 0x00	; 0
     a10:	10 e0       	ldi	r17, 0x00	; 0
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     a14:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     a16:	01 15       	cp	r16, r1
     a18:	11 05       	cpc	r17, r1
     a1a:	09 f4       	brne	.+2      	; 0xa1e <pvPortMalloc+0x52>
     a1c:	69 c0       	rjmp	.+210    	; 0xaf0 <pvPortMalloc+0x124>
     a1e:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <xFreeBytesRemaining>
     a22:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <xFreeBytesRemaining+0x1>
     a26:	80 17       	cp	r24, r16
     a28:	91 07       	cpc	r25, r17
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <pvPortMalloc+0x62>
     a2c:	64 c0       	rjmp	.+200    	; 0xaf6 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     a2e:	c0 91 60 09 	lds	r28, 0x0960	; 0x800960 <xStart>
     a32:	d0 91 61 09 	lds	r29, 0x0961	; 0x800961 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     a36:	e0 e6       	ldi	r30, 0x60	; 96
     a38:	f9 e0       	ldi	r31, 0x09	; 9
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     a3c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     a3e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	9b 81       	ldd	r25, Y+3	; 0x03
     a44:	80 17       	cp	r24, r16
     a46:	91 07       	cpc	r25, r17
     a48:	20 f4       	brcc	.+8      	; 0xa52 <pvPortMalloc+0x86>
     a4a:	88 81       	ld	r24, Y
     a4c:	99 81       	ldd	r25, Y+1	; 0x01
     a4e:	00 97       	sbiw	r24, 0x00	; 0
     a50:	a9 f7       	brne	.-22     	; 0xa3c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     a52:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <pxEnd>
     a56:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <pxEnd+0x1>
     a5a:	c8 17       	cp	r28, r24
     a5c:	d9 07       	cpc	r29, r25
     a5e:	09 f4       	brne	.+2      	; 0xa62 <pvPortMalloc+0x96>
     a60:	4d c0       	rjmp	.+154    	; 0xafc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     a62:	e0 80       	ld	r14, Z
     a64:	f1 80       	ldd	r15, Z+1	; 0x01
     a66:	84 e0       	ldi	r24, 0x04	; 4
     a68:	e8 0e       	add	r14, r24
     a6a:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     a6c:	88 81       	ld	r24, Y
     a6e:	99 81       	ldd	r25, Y+1	; 0x01
     a70:	91 83       	std	Z+1, r25	; 0x01
     a72:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     a74:	2a 81       	ldd	r18, Y+2	; 0x02
     a76:	3b 81       	ldd	r19, Y+3	; 0x03
     a78:	20 1b       	sub	r18, r16
     a7a:	31 0b       	sbc	r19, r17
     a7c:	29 30       	cpi	r18, 0x09	; 9
     a7e:	31 05       	cpc	r19, r1
     a80:	48 f0       	brcs	.+18     	; 0xa94 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     a82:	ce 01       	movw	r24, r28
     a84:	80 0f       	add	r24, r16
     a86:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     a88:	fc 01       	movw	r30, r24
     a8a:	33 83       	std	Z+3, r19	; 0x03
     a8c:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     a8e:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     a90:	0a 83       	std	Y+2, r16	; 0x02
     a92:	52 df       	rcall	.-348    	; 0x938 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     a94:	2a 81       	ldd	r18, Y+2	; 0x02
     a96:	3b 81       	ldd	r19, Y+3	; 0x03
     a98:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <xFreeBytesRemaining>
     a9c:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <xFreeBytesRemaining+0x1>
     aa0:	82 1b       	sub	r24, r18
     aa2:	93 0b       	sbc	r25, r19
     aa4:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <xFreeBytesRemaining+0x1>
     aa8:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     aac:	40 91 5a 09 	lds	r20, 0x095A	; 0x80095a <xMinimumEverFreeBytesRemaining>
     ab0:	50 91 5b 09 	lds	r21, 0x095B	; 0x80095b <xMinimumEverFreeBytesRemaining+0x1>
     ab4:	84 17       	cp	r24, r20
     ab6:	95 07       	cpc	r25, r21
     ab8:	20 f4       	brcc	.+8      	; 0xac2 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     aba:	90 93 5b 09 	sts	0x095B, r25	; 0x80095b <xMinimumEverFreeBytesRemaining+0x1>
     abe:	80 93 5a 09 	sts	0x095A, r24	; 0x80095a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     ac2:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <xBlockAllocatedBit>
     ac6:	90 91 55 09 	lds	r25, 0x0955	; 0x800955 <xBlockAllocatedBit+0x1>
     aca:	28 2b       	or	r18, r24
     acc:	39 2b       	or	r19, r25
     ace:	3b 83       	std	Y+3, r19	; 0x03
     ad0:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     ad2:	19 82       	std	Y+1, r1	; 0x01
     ad4:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     ad6:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <xNumberOfSuccessfulAllocations>
     ada:	90 91 59 09 	lds	r25, 0x0959	; 0x800959 <xNumberOfSuccessfulAllocations+0x1>
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	90 93 59 09 	sts	0x0959, r25	; 0x800959 <xNumberOfSuccessfulAllocations+0x1>
     ae4:	80 93 58 09 	sts	0x0958, r24	; 0x800958 <xNumberOfSuccessfulAllocations>
     ae8:	0b c0       	rjmp	.+22     	; 0xb00 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     aea:	e1 2c       	mov	r14, r1
     aec:	f1 2c       	mov	r15, r1
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <pvPortMalloc+0x134>
     af0:	e1 2c       	mov	r14, r1
     af2:	f1 2c       	mov	r15, r1
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <pvPortMalloc+0x134>
     af6:	e1 2c       	mov	r14, r1
     af8:	f1 2c       	mov	r15, r1
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <pvPortMalloc+0x134>
     afc:	e1 2c       	mov	r14, r1
     afe:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b00:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     b04:	e1 14       	cp	r14, r1
     b06:	f1 04       	cpc	r15, r1
     b08:	11 f4       	brne	.+4      	; 0xb0e <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     b0a:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     b0e:	c7 01       	movw	r24, r14
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	08 95       	ret

00000b1e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	91 f1       	breq	.+100    	; 0xb8e <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     b2a:	ec 01       	movw	r28, r24
     b2c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     b2e:	4a 81       	ldd	r20, Y+2	; 0x02
     b30:	5b 81       	ldd	r21, Y+3	; 0x03
     b32:	20 91 54 09 	lds	r18, 0x0954	; 0x800954 <xBlockAllocatedBit>
     b36:	30 91 55 09 	lds	r19, 0x0955	; 0x800955 <xBlockAllocatedBit+0x1>
     b3a:	ba 01       	movw	r22, r20
     b3c:	62 23       	and	r22, r18
     b3e:	73 23       	and	r23, r19
     b40:	67 2b       	or	r22, r23
     b42:	29 f1       	breq	.+74     	; 0xb8e <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     b44:	68 81       	ld	r22, Y
     b46:	79 81       	ldd	r23, Y+1	; 0x01
     b48:	67 2b       	or	r22, r23
     b4a:	09 f5       	brne	.+66     	; 0xb8e <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     b4c:	20 95       	com	r18
     b4e:	30 95       	com	r19
     b50:	24 23       	and	r18, r20
     b52:	35 23       	and	r19, r21
     b54:	3b 83       	std	Y+3, r19	; 0x03
     b56:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     b58:	0e 94 c6 10 	call	0x218c	; 0x218c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	9b 81       	ldd	r25, Y+3	; 0x03
     b60:	20 91 5c 09 	lds	r18, 0x095C	; 0x80095c <xFreeBytesRemaining>
     b64:	30 91 5d 09 	lds	r19, 0x095D	; 0x80095d <xFreeBytesRemaining+0x1>
     b68:	82 0f       	add	r24, r18
     b6a:	93 1f       	adc	r25, r19
     b6c:	90 93 5d 09 	sts	0x095D, r25	; 0x80095d <xFreeBytesRemaining+0x1>
     b70:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     b74:	ce 01       	movw	r24, r28
     b76:	e0 de       	rcall	.-576    	; 0x938 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     b78:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <xNumberOfSuccessfulFrees>
     b7c:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <xNumberOfSuccessfulFrees+0x1>
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	90 93 57 09 	sts	0x0957, r25	; 0x800957 <xNumberOfSuccessfulFrees+0x1>
     b86:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     b8a:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	08 95       	ret

00000b98 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     b98:	fc 01       	movw	r30, r24
     b9a:	03 96       	adiw	r24, 0x03	; 3
     b9c:	92 83       	std	Z+2, r25	; 0x02
     b9e:	81 83       	std	Z+1, r24	; 0x01
     ba0:	4f ef       	ldi	r20, 0xFF	; 255
     ba2:	5f ef       	ldi	r21, 0xFF	; 255
     ba4:	ba 01       	movw	r22, r20
     ba6:	43 83       	std	Z+3, r20	; 0x03
     ba8:	54 83       	std	Z+4, r21	; 0x04
     baa:	65 83       	std	Z+5, r22	; 0x05
     bac:	76 83       	std	Z+6, r23	; 0x06
     bae:	90 87       	std	Z+8, r25	; 0x08
     bb0:	87 83       	std	Z+7, r24	; 0x07
     bb2:	92 87       	std	Z+10, r25	; 0x0a
     bb4:	81 87       	std	Z+9, r24	; 0x09
     bb6:	10 82       	st	Z, r1
     bb8:	08 95       	ret

00000bba <vListInitialiseItem>:
     bba:	fc 01       	movw	r30, r24
     bbc:	13 86       	std	Z+11, r1	; 0x0b
     bbe:	12 86       	std	Z+10, r1	; 0x0a
     bc0:	08 95       	ret

00000bc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bcc:	08 81       	ld	r16, Y
     bce:	19 81       	ldd	r17, Y+1	; 0x01
     bd0:	2a 81       	ldd	r18, Y+2	; 0x02
     bd2:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bd4:	0f 3f       	cpi	r16, 0xFF	; 255
     bd6:	4f ef       	ldi	r20, 0xFF	; 255
     bd8:	14 07       	cpc	r17, r20
     bda:	24 07       	cpc	r18, r20
     bdc:	34 07       	cpc	r19, r20
     bde:	21 f4       	brne	.+8      	; 0xbe8 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     be0:	fc 01       	movw	r30, r24
     be2:	a1 85       	ldd	r26, Z+9	; 0x09
     be4:	b2 85       	ldd	r27, Z+10	; 0x0a
     be6:	11 c0       	rjmp	.+34     	; 0xc0a <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     be8:	dc 01       	movw	r26, r24
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <vListInsert+0x2e>
     bee:	df 01       	movw	r26, r30
     bf0:	14 96       	adiw	r26, 0x04	; 4
     bf2:	ed 91       	ld	r30, X+
     bf4:	fc 91       	ld	r31, X
     bf6:	15 97       	sbiw	r26, 0x05	; 5
     bf8:	40 81       	ld	r20, Z
     bfa:	51 81       	ldd	r21, Z+1	; 0x01
     bfc:	62 81       	ldd	r22, Z+2	; 0x02
     bfe:	73 81       	ldd	r23, Z+3	; 0x03
     c00:	04 17       	cp	r16, r20
     c02:	15 07       	cpc	r17, r21
     c04:	26 07       	cpc	r18, r22
     c06:	37 07       	cpc	r19, r23
     c08:	90 f7       	brcc	.-28     	; 0xbee <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c0a:	14 96       	adiw	r26, 0x04	; 4
     c0c:	ed 91       	ld	r30, X+
     c0e:	fc 91       	ld	r31, X
     c10:	15 97       	sbiw	r26, 0x05	; 5
     c12:	fd 83       	std	Y+5, r31	; 0x05
     c14:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c16:	d7 83       	std	Z+7, r29	; 0x07
     c18:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c1a:	bf 83       	std	Y+7, r27	; 0x07
     c1c:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c1e:	15 96       	adiw	r26, 0x05	; 5
     c20:	dc 93       	st	X, r29
     c22:	ce 93       	st	-X, r28
     c24:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     c26:	9b 87       	std	Y+11, r25	; 0x0b
     c28:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 81       	ld	r18, Z
     c2e:	2f 5f       	subi	r18, 0xFF	; 255
     c30:	20 83       	st	Z, r18
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     c42:	a2 85       	ldd	r26, Z+10	; 0x0a
     c44:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c46:	c4 81       	ldd	r28, Z+4	; 0x04
     c48:	d5 81       	ldd	r29, Z+5	; 0x05
     c4a:	86 81       	ldd	r24, Z+6	; 0x06
     c4c:	97 81       	ldd	r25, Z+7	; 0x07
     c4e:	9f 83       	std	Y+7, r25	; 0x07
     c50:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c52:	c6 81       	ldd	r28, Z+6	; 0x06
     c54:	d7 81       	ldd	r29, Z+7	; 0x07
     c56:	84 81       	ldd	r24, Z+4	; 0x04
     c58:	95 81       	ldd	r25, Z+5	; 0x05
     c5a:	9d 83       	std	Y+5, r25	; 0x05
     c5c:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c5e:	11 96       	adiw	r26, 0x01	; 1
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	12 97       	sbiw	r26, 0x02	; 2
     c66:	e8 17       	cp	r30, r24
     c68:	f9 07       	cpc	r31, r25
     c6a:	31 f4       	brne	.+12     	; 0xc78 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c6c:	86 81       	ldd	r24, Z+6	; 0x06
     c6e:	97 81       	ldd	r25, Z+7	; 0x07
     c70:	12 96       	adiw	r26, 0x02	; 2
     c72:	9c 93       	st	X, r25
     c74:	8e 93       	st	-X, r24
     c76:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c78:	13 86       	std	Z+11, r1	; 0x0b
     c7a:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     c7c:	8c 91       	ld	r24, X
     c7e:	81 50       	subi	r24, 0x01	; 1
     c80:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c82:	8c 91       	ld	r24, X
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     c8a:	a8 95       	wdr
     c8c:	90 ec       	ldi	r25, 0xC0	; 192
     c8e:	88 e1       	ldi	r24, 0x18	; 24
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	a8 95       	wdr
     c96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     ca0:	08 95       	ret

00000ca2 <pxPortInitialiseStack>:
     ca2:	fc 01       	movw	r30, r24
     ca4:	60 83       	st	Z, r22
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	70 83       	st	Z, r23
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	10 82       	st	Z, r1
     cae:	31 97       	sbiw	r30, 0x01	; 1
     cb0:	10 82       	st	Z, r1
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	20 e8       	ldi	r18, 0x80	; 128
     cb6:	20 83       	st	Z, r18
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	10 82       	st	Z, r1
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	10 82       	st	Z, r1
     cc0:	31 97       	sbiw	r30, 0x01	; 1
     cc2:	10 82       	st	Z, r1
     cc4:	77 97       	sbiw	r30, 0x17	; 23
     cc6:	40 83       	st	Z, r20
     cc8:	31 97       	sbiw	r30, 0x01	; 1
     cca:	50 83       	st	Z, r21
     ccc:	86 97       	sbiw	r24, 0x26	; 38
     cce:	08 95       	ret

00000cd0 <xPortStartScheduler>:
     cd0:	dc df       	rcall	.-72     	; 0xc8a <prvSetupTimerInterrupt>
     cd2:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     cd6:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     cda:	cd 91       	ld	r28, X+
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	dd 91       	ld	r29, X+
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	bf 91       	pop	r27
     cec:	af 91       	pop	r26
     cee:	9f 91       	pop	r25
     cf0:	8f 91       	pop	r24
     cf2:	7f 91       	pop	r23
     cf4:	6f 91       	pop	r22
     cf6:	5f 91       	pop	r21
     cf8:	4f 91       	pop	r20
     cfa:	3f 91       	pop	r19
     cfc:	2f 91       	pop	r18
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	bf 90       	pop	r11
     d0c:	af 90       	pop	r10
     d0e:	9f 90       	pop	r9
     d10:	8f 90       	pop	r8
     d12:	7f 90       	pop	r7
     d14:	6f 90       	pop	r6
     d16:	5f 90       	pop	r5
     d18:	4f 90       	pop	r4
     d1a:	3f 90       	pop	r3
     d1c:	2f 90       	pop	r2
     d1e:	1f 90       	pop	r1
     d20:	0f 90       	pop	r0
     d22:	0c be       	out	0x3c, r0	; 60
     d24:	0f 90       	pop	r0
     d26:	0b be       	out	0x3b, r0	; 59
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	08 95       	ret
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	08 95       	ret

00000d34 <vPortYield>:
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	0f 92       	push	r0
     d3c:	0b b6       	in	r0, 0x3b	; 59
     d3e:	0f 92       	push	r0
     d40:	0c b6       	in	r0, 0x3c	; 60
     d42:	0f 92       	push	r0
     d44:	1f 92       	push	r1
     d46:	11 24       	eor	r1, r1
     d48:	2f 92       	push	r2
     d4a:	3f 92       	push	r3
     d4c:	4f 92       	push	r4
     d4e:	5f 92       	push	r5
     d50:	6f 92       	push	r6
     d52:	7f 92       	push	r7
     d54:	8f 92       	push	r8
     d56:	9f 92       	push	r9
     d58:	af 92       	push	r10
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	2f 93       	push	r18
     d6a:	3f 93       	push	r19
     d6c:	4f 93       	push	r20
     d6e:	5f 93       	push	r21
     d70:	6f 93       	push	r22
     d72:	7f 93       	push	r23
     d74:	8f 93       	push	r24
     d76:	9f 93       	push	r25
     d78:	af 93       	push	r26
     d7a:	bf 93       	push	r27
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
     d84:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     d88:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     d8c:	0d b6       	in	r0, 0x3d	; 61
     d8e:	0d 92       	st	X+, r0
     d90:	0e b6       	in	r0, 0x3e	; 62
     d92:	0d 92       	st	X+, r0
     d94:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskSwitchContext>
     d98:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     d9c:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     da0:	cd 91       	ld	r28, X+
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	dd 91       	ld	r29, X+
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	ff 91       	pop	r31
     daa:	ef 91       	pop	r30
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	9f 90       	pop	r9
     dd6:	8f 90       	pop	r8
     dd8:	7f 90       	pop	r7
     dda:	6f 90       	pop	r6
     ddc:	5f 90       	pop	r5
     dde:	4f 90       	pop	r4
     de0:	3f 90       	pop	r3
     de2:	2f 90       	pop	r2
     de4:	1f 90       	pop	r1
     de6:	0f 90       	pop	r0
     de8:	0c be       	out	0x3c, r0	; 60
     dea:	0f 90       	pop	r0
     dec:	0b be       	out	0x3b, r0	; 59
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	08 95       	ret

00000df6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	0f 92       	push	r0
     dfe:	0b b6       	in	r0, 0x3b	; 59
     e00:	0f 92       	push	r0
     e02:	0c b6       	in	r0, 0x3c	; 60
     e04:	0f 92       	push	r0
     e06:	1f 92       	push	r1
     e08:	11 24       	eor	r1, r1
     e0a:	2f 92       	push	r2
     e0c:	3f 92       	push	r3
     e0e:	4f 92       	push	r4
     e10:	5f 92       	push	r5
     e12:	6f 92       	push	r6
     e14:	7f 92       	push	r7
     e16:	8f 92       	push	r8
     e18:	9f 92       	push	r9
     e1a:	af 92       	push	r10
     e1c:	bf 92       	push	r11
     e1e:	cf 92       	push	r12
     e20:	df 92       	push	r13
     e22:	ef 92       	push	r14
     e24:	ff 92       	push	r15
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	6f 93       	push	r22
     e34:	7f 93       	push	r23
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
     e46:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     e4a:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     e4e:	0d b6       	in	r0, 0x3d	; 61
     e50:	0d 92       	st	X+, r0
     e52:	0e b6       	in	r0, 0x3e	; 62
     e54:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     e56:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     e58:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskIncrementTick>
     e5c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e5e:	0e 94 62 13 	call	0x26c4	; 0x26c4 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     e62:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
     e66:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
     e6a:	cd 91       	ld	r28, X+
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	dd 91       	ld	r29, X+
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	7f 90       	pop	r7
     ea4:	6f 90       	pop	r6
     ea6:	5f 90       	pop	r5
     ea8:	4f 90       	pop	r4
     eaa:	3f 90       	pop	r3
     eac:	2f 90       	pop	r2
     eae:	1f 90       	pop	r1
     eb0:	0f 90       	pop	r0
     eb2:	0c be       	out	0x3c, r0	; 60
     eb4:	0f 90       	pop	r0
     eb6:	0b be       	out	0x3b, r0	; 59
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ebe:	08 95       	ret

00000ec0 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     ec0:	9a df       	rcall	.-204    	; 0xdf6 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ec2:	18 95       	reti

00000ec4 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ec4:	dc 01       	movw	r26, r24
     ec6:	53 96       	adiw	r26, 0x13	; 19
     ec8:	2c 91       	ld	r18, X
     eca:	53 97       	sbiw	r26, 0x13	; 19
     ecc:	22 23       	and	r18, r18
     ece:	41 f0       	breq	.+16     	; 0xee0 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     ed0:	5a 96       	adiw	r26, 0x1a	; 26
     ed2:	ed 91       	ld	r30, X+
     ed4:	fc 91       	ld	r31, X
     ed6:	5b 97       	sbiw	r26, 0x1b	; 27
     ed8:	90 81       	ld	r25, Z
     eda:	8a e0       	ldi	r24, 0x0A	; 10
     edc:	89 1b       	sub	r24, r25
     ede:	08 95       	ret
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	08 95       	ret

00000ee4 <prvIsQueueEmpty>:
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	0f 92       	push	r0
     eea:	fc 01       	movw	r30, r24
     eec:	86 8d       	ldd	r24, Z+30	; 0x1e
     eee:	81 11       	cpse	r24, r1
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <prvIsQueueEmpty+0x12>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <prvIsQueueEmpty+0x14>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	08 95       	ret

00000efe <prvIsQueueFull>:
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	0f 92       	push	r0
     f04:	fc 01       	movw	r30, r24
     f06:	26 8d       	ldd	r18, Z+30	; 0x1e
     f08:	87 8d       	ldd	r24, Z+31	; 0x1f
     f0a:	28 13       	cpse	r18, r24
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <prvIsQueueFull+0x14>
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <prvIsQueueFull+0x16>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	08 95       	ret

00000f1a <prvCopyDataToQueue>:
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
     f24:	04 2f       	mov	r16, r20
     f26:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f28:	48 a1       	ldd	r20, Y+32	; 0x20
     f2a:	41 11       	cpse	r20, r1
     f2c:	0c c0       	rjmp	.+24     	; 0xf46 <prvCopyDataToQueue+0x2c>
     f2e:	88 81       	ld	r24, Y
     f30:	99 81       	ldd	r25, Y+1	; 0x01
     f32:	89 2b       	or	r24, r25
     f34:	09 f0       	breq	.+2      	; 0xf38 <prvCopyDataToQueue+0x1e>
     f36:	42 c0       	rjmp	.+132    	; 0xfbc <prvCopyDataToQueue+0xa2>
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	9d 81       	ldd	r25, Y+5	; 0x05
     f3c:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <xTaskPriorityDisinherit>
     f40:	1d 82       	std	Y+5, r1	; 0x05
     f42:	1c 82       	std	Y+4, r1	; 0x04
     f44:	42 c0       	rjmp	.+132    	; 0xfca <prvCopyDataToQueue+0xb0>
     f46:	01 11       	cpse	r16, r1
     f48:	17 c0       	rjmp	.+46     	; 0xf78 <prvCopyDataToQueue+0x5e>
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
     f54:	28 a1       	ldd	r18, Y+32	; 0x20
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	9b 81       	ldd	r25, Y+3	; 0x03
     f5a:	82 0f       	add	r24, r18
     f5c:	91 1d       	adc	r25, r1
     f5e:	9b 83       	std	Y+3, r25	; 0x03
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	2c 81       	ldd	r18, Y+4	; 0x04
     f64:	3d 81       	ldd	r19, Y+5	; 0x05
     f66:	82 17       	cp	r24, r18
     f68:	93 07       	cpc	r25, r19
     f6a:	50 f1       	brcs	.+84     	; 0xfc0 <prvCopyDataToQueue+0xa6>
     f6c:	88 81       	ld	r24, Y
     f6e:	99 81       	ldd	r25, Y+1	; 0x01
     f70:	9b 83       	std	Y+3, r25	; 0x03
     f72:	8a 83       	std	Y+2, r24	; 0x02
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	29 c0       	rjmp	.+82     	; 0xfca <prvCopyDataToQueue+0xb0>
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	8e 81       	ldd	r24, Y+6	; 0x06
     f7c:	9f 81       	ldd	r25, Y+7	; 0x07
     f7e:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
     f82:	88 a1       	ldd	r24, Y+32	; 0x20
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	91 95       	neg	r25
     f88:	81 95       	neg	r24
     f8a:	91 09       	sbc	r25, r1
     f8c:	2e 81       	ldd	r18, Y+6	; 0x06
     f8e:	3f 81       	ldd	r19, Y+7	; 0x07
     f90:	28 0f       	add	r18, r24
     f92:	39 1f       	adc	r19, r25
     f94:	3f 83       	std	Y+7, r19	; 0x07
     f96:	2e 83       	std	Y+6, r18	; 0x06
     f98:	48 81       	ld	r20, Y
     f9a:	59 81       	ldd	r21, Y+1	; 0x01
     f9c:	24 17       	cp	r18, r20
     f9e:	35 07       	cpc	r19, r21
     fa0:	30 f4       	brcc	.+12     	; 0xfae <prvCopyDataToQueue+0x94>
     fa2:	2c 81       	ldd	r18, Y+4	; 0x04
     fa4:	3d 81       	ldd	r19, Y+5	; 0x05
     fa6:	82 0f       	add	r24, r18
     fa8:	93 1f       	adc	r25, r19
     faa:	9f 83       	std	Y+7, r25	; 0x07
     fac:	8e 83       	std	Y+6, r24	; 0x06
     fae:	02 30       	cpi	r16, 0x02	; 2
     fb0:	49 f4       	brne	.+18     	; 0xfc4 <prvCopyDataToQueue+0xaa>
     fb2:	11 23       	and	r17, r17
     fb4:	49 f0       	breq	.+18     	; 0xfc8 <prvCopyDataToQueue+0xae>
     fb6:	11 50       	subi	r17, 0x01	; 1
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	07 c0       	rjmp	.+14     	; 0xfca <prvCopyDataToQueue+0xb0>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	05 c0       	rjmp	.+10     	; 0xfca <prvCopyDataToQueue+0xb0>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <prvCopyDataToQueue+0xb0>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <prvCopyDataToQueue+0xb0>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	1f 5f       	subi	r17, 0xFF	; 255
     fcc:	1e 8f       	std	Y+30, r17	; 0x1e
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	08 95       	ret

00000fd8 <prvCopyDataFromQueue>:
     fd8:	fc 01       	movw	r30, r24
     fda:	40 a1       	ldd	r20, Z+32	; 0x20
     fdc:	44 23       	and	r20, r20
     fde:	a9 f0       	breq	.+42     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	26 81       	ldd	r18, Z+6	; 0x06
     fe4:	37 81       	ldd	r19, Z+7	; 0x07
     fe6:	24 0f       	add	r18, r20
     fe8:	35 1f       	adc	r19, r21
     fea:	37 83       	std	Z+7, r19	; 0x07
     fec:	26 83       	std	Z+6, r18	; 0x06
     fee:	84 81       	ldd	r24, Z+4	; 0x04
     ff0:	95 81       	ldd	r25, Z+5	; 0x05
     ff2:	28 17       	cp	r18, r24
     ff4:	39 07       	cpc	r19, r25
     ff6:	20 f0       	brcs	.+8      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	97 83       	std	Z+7, r25	; 0x07
     ffe:	86 83       	std	Z+6, r24	; 0x06
    1000:	cb 01       	movw	r24, r22
    1002:	66 81       	ldd	r22, Z+6	; 0x06
    1004:	77 81       	ldd	r23, Z+7	; 0x07
    1006:	0c 94 9a 35 	jmp	0x6b34	; 0x6b34 <memcpy>
    100a:	08 95       	ret

0000100c <prvUnlockQueue>:
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	ec 01       	movw	r28, r24
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	0f 92       	push	r0
    101a:	1a a1       	ldd	r17, Y+34	; 0x22
    101c:	0b c0       	rjmp	.+22     	; 0x1034 <prvUnlockQueue+0x28>
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	88 23       	and	r24, r24
    1022:	51 f0       	breq	.+20     	; 0x1038 <prvUnlockQueue+0x2c>
    1024:	ce 01       	movw	r24, r28
    1026:	43 96       	adiw	r24, 0x13	; 19
    1028:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <xTaskRemoveFromEventList>
    102c:	81 11       	cpse	r24, r1
    102e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vTaskMissedYield>
    1032:	11 50       	subi	r17, 0x01	; 1
    1034:	11 16       	cp	r1, r17
    1036:	9c f3       	brlt	.-26     	; 0x101e <prvUnlockQueue+0x12>
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	8a a3       	std	Y+34, r24	; 0x22
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	0f 92       	push	r0
    1046:	19 a1       	ldd	r17, Y+33	; 0x21
    1048:	0b c0       	rjmp	.+22     	; 0x1060 <prvUnlockQueue+0x54>
    104a:	88 85       	ldd	r24, Y+8	; 0x08
    104c:	88 23       	and	r24, r24
    104e:	51 f0       	breq	.+20     	; 0x1064 <prvUnlockQueue+0x58>
    1050:	ce 01       	movw	r24, r28
    1052:	08 96       	adiw	r24, 0x08	; 8
    1054:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <xTaskRemoveFromEventList>
    1058:	81 11       	cpse	r24, r1
    105a:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vTaskMissedYield>
    105e:	11 50       	subi	r17, 0x01	; 1
    1060:	11 16       	cp	r1, r17
    1062:	9c f3       	brlt	.-26     	; 0x104a <prvUnlockQueue+0x3e>
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	89 a3       	std	Y+33, r24	; 0x21
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	08 95       	ret

00001074 <xQueueGenericReset>:
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	ec 01       	movw	r28, r24
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	0f 92       	push	r0
    1080:	e8 81       	ld	r30, Y
    1082:	f9 81       	ldd	r31, Y+1	; 0x01
    1084:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1086:	28 a1       	ldd	r18, Y+32	; 0x20
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	82 9f       	mul	r24, r18
    108e:	a0 01       	movw	r20, r0
    1090:	83 9f       	mul	r24, r19
    1092:	50 0d       	add	r21, r0
    1094:	92 9f       	mul	r25, r18
    1096:	50 0d       	add	r21, r0
    1098:	11 24       	eor	r1, r1
    109a:	4e 0f       	add	r20, r30
    109c:	5f 1f       	adc	r21, r31
    109e:	5d 83       	std	Y+5, r21	; 0x05
    10a0:	4c 83       	std	Y+4, r20	; 0x04
    10a2:	1e 8e       	std	Y+30, r1	; 0x1e
    10a4:	fb 83       	std	Y+3, r31	; 0x03
    10a6:	ea 83       	std	Y+2, r30	; 0x02
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	28 9f       	mul	r18, r24
    10ac:	a0 01       	movw	r20, r0
    10ae:	29 9f       	mul	r18, r25
    10b0:	50 0d       	add	r21, r0
    10b2:	38 9f       	mul	r19, r24
    10b4:	50 0d       	add	r21, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	cf 01       	movw	r24, r30
    10ba:	84 0f       	add	r24, r20
    10bc:	95 1f       	adc	r25, r21
    10be:	9f 83       	std	Y+7, r25	; 0x07
    10c0:	8e 83       	std	Y+6, r24	; 0x06
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	89 a3       	std	Y+33, r24	; 0x21
    10c6:	8a a3       	std	Y+34, r24	; 0x22
    10c8:	61 11       	cpse	r22, r1
    10ca:	0b c0       	rjmp	.+22     	; 0x10e2 <xQueueGenericReset+0x6e>
    10cc:	88 85       	ldd	r24, Y+8	; 0x08
    10ce:	88 23       	and	r24, r24
    10d0:	71 f0       	breq	.+28     	; 0x10ee <xQueueGenericReset+0x7a>
    10d2:	ce 01       	movw	r24, r28
    10d4:	08 96       	adiw	r24, 0x08	; 8
    10d6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <xTaskRemoveFromEventList>
    10da:	88 23       	and	r24, r24
    10dc:	41 f0       	breq	.+16     	; 0x10ee <xQueueGenericReset+0x7a>
    10de:	2a de       	rcall	.-940    	; 0xd34 <vPortYield>
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <xQueueGenericReset+0x7a>
    10e2:	ce 01       	movw	r24, r28
    10e4:	08 96       	adiw	r24, 0x08	; 8
    10e6:	58 dd       	rcall	.-1360   	; 0xb98 <vListInitialise>
    10e8:	ce 01       	movw	r24, r28
    10ea:	43 96       	adiw	r24, 0x13	; 19
    10ec:	55 dd       	rcall	.-1366   	; 0xb98 <vListInitialise>
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <prvInitialiseNewQueue>:
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	f8 01       	movw	r30, r16
    1100:	61 11       	cpse	r22, r1
    1102:	03 c0       	rjmp	.+6      	; 0x110a <prvInitialiseNewQueue+0x10>
    1104:	11 83       	std	Z+1, r17	; 0x01
    1106:	00 83       	st	Z, r16
    1108:	02 c0       	rjmp	.+4      	; 0x110e <prvInitialiseNewQueue+0x14>
    110a:	51 83       	std	Z+1, r21	; 0x01
    110c:	40 83       	st	Z, r20
    110e:	87 8f       	std	Z+31, r24	; 0x1f
    1110:	60 a3       	std	Z+32, r22	; 0x20
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	cf 01       	movw	r24, r30
    1116:	ae df       	rcall	.-164    	; 0x1074 <xQueueGenericReset>
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <xQueueGenericCreate>:
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	f8 2e       	mov	r15, r24
    112e:	e6 2e       	mov	r14, r22
    1130:	d4 2e       	mov	r13, r20
    1132:	86 9f       	mul	r24, r22
    1134:	c0 01       	movw	r24, r0
    1136:	11 24       	eor	r1, r1
    1138:	83 96       	adiw	r24, 0x23	; 35
    113a:	48 dc       	rcall	.-1904   	; 0x9cc <pvPortMalloc>
    113c:	ec 01       	movw	r28, r24
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	41 f0       	breq	.+16     	; 0x1152 <xQueueGenericCreate+0x34>
    1142:	8c 01       	movw	r16, r24
    1144:	2d 2d       	mov	r18, r13
    1146:	ac 01       	movw	r20, r24
    1148:	4d 5d       	subi	r20, 0xDD	; 221
    114a:	5f 4f       	sbci	r21, 0xFF	; 255
    114c:	6e 2d       	mov	r22, r14
    114e:	8f 2d       	mov	r24, r15
    1150:	d4 df       	rcall	.-88     	; 0x10fa <prvInitialiseNewQueue>
    1152:	ce 01       	movw	r24, r28
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	08 95       	ret

00001164 <xQueueGenericSend>:
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	29 97       	sbiw	r28, 0x09	; 9
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	7c 01       	movw	r14, r24
    1186:	6b 01       	movw	r12, r22
    1188:	2e 83       	std	Y+6, r18	; 0x06
    118a:	3f 83       	std	Y+7, r19	; 0x07
    118c:	48 87       	std	Y+8, r20	; 0x08
    118e:	59 87       	std	Y+9, r21	; 0x09
    1190:	10 e0       	ldi	r17, 0x00	; 0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	0f 92       	push	r0
    1198:	f7 01       	movw	r30, r14
    119a:	96 8d       	ldd	r25, Z+30	; 0x1e
    119c:	87 8d       	ldd	r24, Z+31	; 0x1f
    119e:	98 17       	cp	r25, r24
    11a0:	10 f0       	brcs	.+4      	; 0x11a6 <xQueueGenericSend+0x42>
    11a2:	02 30       	cpi	r16, 0x02	; 2
    11a4:	b1 f4       	brne	.+44     	; 0x11d2 <xQueueGenericSend+0x6e>
    11a6:	40 2f       	mov	r20, r16
    11a8:	b6 01       	movw	r22, r12
    11aa:	c7 01       	movw	r24, r14
    11ac:	b6 de       	rcall	.-660    	; 0xf1a <prvCopyDataToQueue>
    11ae:	f7 01       	movw	r30, r14
    11b0:	93 89       	ldd	r25, Z+19	; 0x13
    11b2:	99 23       	and	r25, r25
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <xQueueGenericSend+0x62>
    11b6:	c7 01       	movw	r24, r14
    11b8:	43 96       	adiw	r24, 0x13	; 19
    11ba:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <xTaskRemoveFromEventList>
    11be:	88 23       	and	r24, r24
    11c0:	21 f0       	breq	.+8      	; 0x11ca <xQueueGenericSend+0x66>
    11c2:	b8 dd       	rcall	.-1168   	; 0xd34 <vPortYield>
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <xQueueGenericSend+0x66>
    11c6:	81 11       	cpse	r24, r1
    11c8:	b5 dd       	rcall	.-1174   	; 0xd34 <vPortYield>
    11ca:	0f 90       	pop	r0
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	4c c0       	rjmp	.+152    	; 0x126a <xQueueGenericSend+0x106>
    11d2:	8e 81       	ldd	r24, Y+6	; 0x06
    11d4:	9f 81       	ldd	r25, Y+7	; 0x07
    11d6:	a8 85       	ldd	r26, Y+8	; 0x08
    11d8:	b9 85       	ldd	r27, Y+9	; 0x09
    11da:	89 2b       	or	r24, r25
    11dc:	8a 2b       	or	r24, r26
    11de:	8b 2b       	or	r24, r27
    11e0:	21 f4       	brne	.+8      	; 0x11ea <xQueueGenericSend+0x86>
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	40 c0       	rjmp	.+128    	; 0x126a <xQueueGenericSend+0x106>
    11ea:	11 11       	cpse	r17, r1
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <xQueueGenericSend+0x94>
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <vTaskInternalSetTimeOutState>
    11f6:	11 e0       	ldi	r17, 0x01	; 1
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	c7 d7       	rcall	.+3982   	; 0x218c <vTaskSuspendAll>
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	0f 92       	push	r0
    1204:	f7 01       	movw	r30, r14
    1206:	81 a1       	ldd	r24, Z+33	; 0x21
    1208:	8f 3f       	cpi	r24, 0xFF	; 255
    120a:	09 f4       	brne	.+2      	; 0x120e <xQueueGenericSend+0xaa>
    120c:	11 a2       	std	Z+33, r1	; 0x21
    120e:	f7 01       	movw	r30, r14
    1210:	82 a1       	ldd	r24, Z+34	; 0x22
    1212:	8f 3f       	cpi	r24, 0xFF	; 255
    1214:	09 f4       	brne	.+2      	; 0x1218 <xQueueGenericSend+0xb4>
    1216:	12 a2       	std	Z+34, r1	; 0x22
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	be 01       	movw	r22, r28
    121e:	6a 5f       	subi	r22, 0xFA	; 250
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	ce 01       	movw	r24, r28
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <xTaskCheckForTimeOut>
    122a:	81 11       	cpse	r24, r1
    122c:	19 c0       	rjmp	.+50     	; 0x1260 <xQueueGenericSend+0xfc>
    122e:	c7 01       	movw	r24, r14
    1230:	66 de       	rcall	.-820    	; 0xefe <prvIsQueueFull>
    1232:	88 23       	and	r24, r24
    1234:	81 f0       	breq	.+32     	; 0x1256 <xQueueGenericSend+0xf2>
    1236:	4e 81       	ldd	r20, Y+6	; 0x06
    1238:	5f 81       	ldd	r21, Y+7	; 0x07
    123a:	68 85       	ldd	r22, Y+8	; 0x08
    123c:	79 85       	ldd	r23, Y+9	; 0x09
    123e:	c7 01       	movw	r24, r14
    1240:	08 96       	adiw	r24, 0x08	; 8
    1242:	0e 94 c7 13 	call	0x278e	; 0x278e <vTaskPlaceOnEventList>
    1246:	c7 01       	movw	r24, r14
    1248:	e1 de       	rcall	.-574    	; 0x100c <prvUnlockQueue>
    124a:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>
    124e:	81 11       	cpse	r24, r1
    1250:	a0 cf       	rjmp	.-192    	; 0x1192 <xQueueGenericSend+0x2e>
    1252:	70 dd       	rcall	.-1312   	; 0xd34 <vPortYield>
    1254:	9e cf       	rjmp	.-196    	; 0x1192 <xQueueGenericSend+0x2e>
    1256:	c7 01       	movw	r24, r14
    1258:	d9 de       	rcall	.-590    	; 0x100c <prvUnlockQueue>
    125a:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>
    125e:	99 cf       	rjmp	.-206    	; 0x1192 <xQueueGenericSend+0x2e>
    1260:	c7 01       	movw	r24, r14
    1262:	d4 de       	rcall	.-600    	; 0x100c <prvUnlockQueue>
    1264:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	29 96       	adiw	r28, 0x09	; 9
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	08 95       	ret

00001288 <prvInitialiseMutex>:
    1288:	0f 93       	push	r16
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	69 f0       	breq	.+26     	; 0x12a8 <prvInitialiseMutex+0x20>
    128e:	fc 01       	movw	r30, r24
    1290:	15 82       	std	Z+5, r1	; 0x05
    1292:	14 82       	std	Z+4, r1	; 0x04
    1294:	11 82       	std	Z+1, r1	; 0x01
    1296:	10 82       	st	Z, r1
    1298:	16 82       	std	Z+6, r1	; 0x06
    129a:	00 e0       	ldi	r16, 0x00	; 0
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	a9 01       	movw	r20, r18
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	5e df       	rcall	.-324    	; 0x1164 <xQueueGenericSend>
    12a8:	0f 91       	pop	r16
    12aa:	08 95       	ret

000012ac <xQueueCreateMutex>:
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	48 2f       	mov	r20, r24
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	33 df       	rcall	.-410    	; 0x111e <xQueueGenericCreate>
    12b8:	ec 01       	movw	r28, r24
    12ba:	e6 df       	rcall	.-52     	; 0x1288 <prvInitialiseMutex>
    12bc:	ce 01       	movw	r24, r28
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <xQueueGenericSendFromISR>:
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	8a 01       	movw	r16, r20
    12d2:	fc 01       	movw	r30, r24
    12d4:	56 8d       	ldd	r21, Z+30	; 0x1e
    12d6:	37 8d       	ldd	r19, Z+31	; 0x1f
    12d8:	53 17       	cp	r21, r19
    12da:	10 f0       	brcs	.+4      	; 0x12e0 <xQueueGenericSendFromISR+0x1c>
    12dc:	22 30       	cpi	r18, 0x02	; 2
    12de:	f9 f4       	brne	.+62     	; 0x131e <xQueueGenericSendFromISR+0x5a>
    12e0:	42 2f       	mov	r20, r18
    12e2:	78 01       	movw	r14, r16
    12e4:	ec 01       	movw	r28, r24
    12e6:	1a a1       	ldd	r17, Y+34	; 0x22
    12e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12ea:	ce 01       	movw	r24, r28
    12ec:	16 de       	rcall	.-980    	; 0xf1a <prvCopyDataToQueue>
    12ee:	1f 3f       	cpi	r17, 0xFF	; 255
    12f0:	81 f4       	brne	.+32     	; 0x1312 <xQueueGenericSendFromISR+0x4e>
    12f2:	8b 89       	ldd	r24, Y+19	; 0x13
    12f4:	88 23       	and	r24, r24
    12f6:	a9 f0       	breq	.+42     	; 0x1322 <xQueueGenericSendFromISR+0x5e>
    12f8:	ce 01       	movw	r24, r28
    12fa:	43 96       	adiw	r24, 0x13	; 19
    12fc:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <xTaskRemoveFromEventList>
    1300:	88 23       	and	r24, r24
    1302:	89 f0       	breq	.+34     	; 0x1326 <xQueueGenericSendFromISR+0x62>
    1304:	e1 14       	cp	r14, r1
    1306:	f1 04       	cpc	r15, r1
    1308:	81 f0       	breq	.+32     	; 0x132a <xQueueGenericSendFromISR+0x66>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	f7 01       	movw	r30, r14
    130e:	80 83       	st	Z, r24
    1310:	0d c0       	rjmp	.+26     	; 0x132c <xQueueGenericSendFromISR+0x68>
    1312:	ff 24       	eor	r15, r15
    1314:	f3 94       	inc	r15
    1316:	f1 0e       	add	r15, r17
    1318:	fa a2       	std	Y+34, r15	; 0x22
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	07 c0       	rjmp	.+14     	; 0x132c <xQueueGenericSendFromISR+0x68>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	05 c0       	rjmp	.+10     	; 0x132c <xQueueGenericSendFromISR+0x68>
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	03 c0       	rjmp	.+6      	; 0x132c <xQueueGenericSendFromISR+0x68>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	01 c0       	rjmp	.+2      	; 0x132c <xQueueGenericSendFromISR+0x68>
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	08 95       	ret

0000133a <xQueueReceive>:
    133a:	cf 92       	push	r12
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	29 97       	sbiw	r28, 0x09	; 9
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	8c 01       	movw	r16, r24
    135c:	6b 01       	movw	r12, r22
    135e:	2e 83       	std	Y+6, r18	; 0x06
    1360:	3f 83       	std	Y+7, r19	; 0x07
    1362:	48 87       	std	Y+8, r20	; 0x08
    1364:	59 87       	std	Y+9, r21	; 0x09
    1366:	e1 2c       	mov	r14, r1
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	0f 92       	push	r0
    136e:	f8 01       	movw	r30, r16
    1370:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1372:	ff 20       	and	r15, r15
    1374:	99 f0       	breq	.+38     	; 0x139c <xQueueReceive+0x62>
    1376:	b6 01       	movw	r22, r12
    1378:	c8 01       	movw	r24, r16
    137a:	2e de       	rcall	.-932    	; 0xfd8 <prvCopyDataFromQueue>
    137c:	fa 94       	dec	r15
    137e:	f8 01       	movw	r30, r16
    1380:	f6 8e       	std	Z+30, r15	; 0x1e
    1382:	80 85       	ldd	r24, Z+8	; 0x08
    1384:	88 23       	and	r24, r24
    1386:	31 f0       	breq	.+12     	; 0x1394 <xQueueReceive+0x5a>
    1388:	c8 01       	movw	r24, r16
    138a:	08 96       	adiw	r24, 0x08	; 8
    138c:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <xTaskRemoveFromEventList>
    1390:	81 11       	cpse	r24, r1
    1392:	d0 dc       	rcall	.-1632   	; 0xd34 <vPortYield>
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	4f c0       	rjmp	.+158    	; 0x143a <xQueueReceive+0x100>
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	a8 85       	ldd	r26, Y+8	; 0x08
    13a2:	b9 85       	ldd	r27, Y+9	; 0x09
    13a4:	89 2b       	or	r24, r25
    13a6:	8a 2b       	or	r24, r26
    13a8:	8b 2b       	or	r24, r27
    13aa:	21 f4       	brne	.+8      	; 0x13b4 <xQueueReceive+0x7a>
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	43 c0       	rjmp	.+134    	; 0x143a <xQueueReceive+0x100>
    13b4:	e1 10       	cpse	r14, r1
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <xQueueReceive+0x8a>
    13b8:	ce 01       	movw	r24, r28
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <vTaskInternalSetTimeOutState>
    13c0:	ee 24       	eor	r14, r14
    13c2:	e3 94       	inc	r14
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	e1 d6       	rcall	.+3522   	; 0x218c <vTaskSuspendAll>
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	0f 92       	push	r0
    13d0:	f8 01       	movw	r30, r16
    13d2:	81 a1       	ldd	r24, Z+33	; 0x21
    13d4:	8f 3f       	cpi	r24, 0xFF	; 255
    13d6:	09 f4       	brne	.+2      	; 0x13da <xQueueReceive+0xa0>
    13d8:	11 a2       	std	Z+33, r1	; 0x21
    13da:	f8 01       	movw	r30, r16
    13dc:	82 a1       	ldd	r24, Z+34	; 0x22
    13de:	8f 3f       	cpi	r24, 0xFF	; 255
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <xQueueReceive+0xaa>
    13e2:	12 a2       	std	Z+34, r1	; 0x22
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	be 01       	movw	r22, r28
    13ea:	6a 5f       	subi	r22, 0xFA	; 250
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	ce 01       	movw	r24, r28
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <xTaskCheckForTimeOut>
    13f6:	81 11       	cpse	r24, r1
    13f8:	17 c0       	rjmp	.+46     	; 0x1428 <xQueueReceive+0xee>
    13fa:	c8 01       	movw	r24, r16
    13fc:	73 dd       	rcall	.-1306   	; 0xee4 <prvIsQueueEmpty>
    13fe:	88 23       	and	r24, r24
    1400:	79 f0       	breq	.+30     	; 0x1420 <xQueueReceive+0xe6>
    1402:	4e 81       	ldd	r20, Y+6	; 0x06
    1404:	5f 81       	ldd	r21, Y+7	; 0x07
    1406:	68 85       	ldd	r22, Y+8	; 0x08
    1408:	79 85       	ldd	r23, Y+9	; 0x09
    140a:	c8 01       	movw	r24, r16
    140c:	43 96       	adiw	r24, 0x13	; 19
    140e:	0e 94 c7 13 	call	0x278e	; 0x278e <vTaskPlaceOnEventList>
    1412:	c8 01       	movw	r24, r16
    1414:	fb dd       	rcall	.-1034   	; 0x100c <prvUnlockQueue>
    1416:	fa d7       	rcall	.+4084   	; 0x240c <xTaskResumeAll>
    1418:	81 11       	cpse	r24, r1
    141a:	a6 cf       	rjmp	.-180    	; 0x1368 <xQueueReceive+0x2e>
    141c:	8b dc       	rcall	.-1770   	; 0xd34 <vPortYield>
    141e:	a4 cf       	rjmp	.-184    	; 0x1368 <xQueueReceive+0x2e>
    1420:	c8 01       	movw	r24, r16
    1422:	f4 dd       	rcall	.-1048   	; 0x100c <prvUnlockQueue>
    1424:	f3 d7       	rcall	.+4070   	; 0x240c <xTaskResumeAll>
    1426:	a0 cf       	rjmp	.-192    	; 0x1368 <xQueueReceive+0x2e>
    1428:	c8 01       	movw	r24, r16
    142a:	f0 dd       	rcall	.-1056   	; 0x100c <prvUnlockQueue>
    142c:	ef d7       	rcall	.+4062   	; 0x240c <xTaskResumeAll>
    142e:	c8 01       	movw	r24, r16
    1430:	59 dd       	rcall	.-1358   	; 0xee4 <prvIsQueueEmpty>
    1432:	88 23       	and	r24, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <xQueueReceive+0xfe>
    1436:	98 cf       	rjmp	.-208    	; 0x1368 <xQueueReceive+0x2e>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	29 96       	adiw	r28, 0x09	; 9
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	08 95       	ret

00001458 <xQueueSemaphoreTake>:
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	29 97       	sbiw	r28, 0x09	; 9
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	8c 01       	movw	r16, r24
    1476:	4e 83       	std	Y+6, r20	; 0x06
    1478:	5f 83       	std	Y+7, r21	; 0x07
    147a:	68 87       	std	Y+8, r22	; 0x08
    147c:	79 87       	std	Y+9, r23	; 0x09
    147e:	e1 2c       	mov	r14, r1
    1480:	f1 2c       	mov	r15, r1
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	0f 92       	push	r0
    1488:	f8 01       	movw	r30, r16
    148a:	86 8d       	ldd	r24, Z+30	; 0x1e
    148c:	88 23       	and	r24, r24
    148e:	c9 f0       	breq	.+50     	; 0x14c2 <xQueueSemaphoreTake+0x6a>
    1490:	81 50       	subi	r24, 0x01	; 1
    1492:	86 8f       	std	Z+30, r24	; 0x1e
    1494:	80 81       	ld	r24, Z
    1496:	91 81       	ldd	r25, Z+1	; 0x01
    1498:	89 2b       	or	r24, r25
    149a:	29 f4       	brne	.+10     	; 0x14a6 <xQueueSemaphoreTake+0x4e>
    149c:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <pvTaskIncrementMutexHeldCount>
    14a0:	f8 01       	movw	r30, r16
    14a2:	95 83       	std	Z+5, r25	; 0x05
    14a4:	84 83       	std	Z+4, r24	; 0x04
    14a6:	f8 01       	movw	r30, r16
    14a8:	80 85       	ldd	r24, Z+8	; 0x08
    14aa:	88 23       	and	r24, r24
    14ac:	31 f0       	breq	.+12     	; 0x14ba <xQueueSemaphoreTake+0x62>
    14ae:	c8 01       	movw	r24, r16
    14b0:	08 96       	adiw	r24, 0x08	; 8
    14b2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <xTaskRemoveFromEventList>
    14b6:	81 11       	cpse	r24, r1
    14b8:	3d dc       	rcall	.-1926   	; 0xd34 <vPortYield>
    14ba:	0f 90       	pop	r0
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	6f c0       	rjmp	.+222    	; 0x15a0 <xQueueSemaphoreTake+0x148>
    14c2:	8e 81       	ldd	r24, Y+6	; 0x06
    14c4:	9f 81       	ldd	r25, Y+7	; 0x07
    14c6:	a8 85       	ldd	r26, Y+8	; 0x08
    14c8:	b9 85       	ldd	r27, Y+9	; 0x09
    14ca:	89 2b       	or	r24, r25
    14cc:	8a 2b       	or	r24, r26
    14ce:	8b 2b       	or	r24, r27
    14d0:	21 f4       	brne	.+8      	; 0x14da <xQueueSemaphoreTake+0x82>
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	63 c0       	rjmp	.+198    	; 0x15a0 <xQueueSemaphoreTake+0x148>
    14da:	f1 10       	cpse	r15, r1
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <xQueueSemaphoreTake+0x92>
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <vTaskInternalSetTimeOutState>
    14e6:	ff 24       	eor	r15, r15
    14e8:	f3 94       	inc	r15
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	4e d6       	rcall	.+3228   	; 0x218c <vTaskSuspendAll>
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	0f 92       	push	r0
    14f6:	f8 01       	movw	r30, r16
    14f8:	81 a1       	ldd	r24, Z+33	; 0x21
    14fa:	8f 3f       	cpi	r24, 0xFF	; 255
    14fc:	09 f4       	brne	.+2      	; 0x1500 <xQueueSemaphoreTake+0xa8>
    14fe:	11 a2       	std	Z+33, r1	; 0x21
    1500:	f8 01       	movw	r30, r16
    1502:	82 a1       	ldd	r24, Z+34	; 0x22
    1504:	8f 3f       	cpi	r24, 0xFF	; 255
    1506:	09 f4       	brne	.+2      	; 0x150a <xQueueSemaphoreTake+0xb2>
    1508:	12 a2       	std	Z+34, r1	; 0x22
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	be 01       	movw	r22, r28
    1510:	6a 5f       	subi	r22, 0xFA	; 250
    1512:	7f 4f       	sbci	r23, 0xFF	; 255
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <xTaskCheckForTimeOut>
    151c:	81 11       	cpse	r24, r1
    151e:	26 c0       	rjmp	.+76     	; 0x156c <xQueueSemaphoreTake+0x114>
    1520:	c8 01       	movw	r24, r16
    1522:	e0 dc       	rcall	.-1600   	; 0xee4 <prvIsQueueEmpty>
    1524:	88 23       	and	r24, r24
    1526:	f1 f0       	breq	.+60     	; 0x1564 <xQueueSemaphoreTake+0x10c>
    1528:	f8 01       	movw	r30, r16
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	89 2b       	or	r24, r25
    1530:	51 f4       	brne	.+20     	; 0x1546 <xQueueSemaphoreTake+0xee>
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	0f 92       	push	r0
    1538:	84 81       	ldd	r24, Z+4	; 0x04
    153a:	95 81       	ldd	r25, Z+5	; 0x05
    153c:	0e 94 57 16 	call	0x2cae	; 0x2cae <xTaskPriorityInherit>
    1540:	e8 2e       	mov	r14, r24
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	4e 81       	ldd	r20, Y+6	; 0x06
    1548:	5f 81       	ldd	r21, Y+7	; 0x07
    154a:	68 85       	ldd	r22, Y+8	; 0x08
    154c:	79 85       	ldd	r23, Y+9	; 0x09
    154e:	c8 01       	movw	r24, r16
    1550:	43 96       	adiw	r24, 0x13	; 19
    1552:	0e 94 c7 13 	call	0x278e	; 0x278e <vTaskPlaceOnEventList>
    1556:	c8 01       	movw	r24, r16
    1558:	59 dd       	rcall	.-1358   	; 0x100c <prvUnlockQueue>
    155a:	58 d7       	rcall	.+3760   	; 0x240c <xTaskResumeAll>
    155c:	81 11       	cpse	r24, r1
    155e:	91 cf       	rjmp	.-222    	; 0x1482 <xQueueSemaphoreTake+0x2a>
    1560:	e9 db       	rcall	.-2094   	; 0xd34 <vPortYield>
    1562:	8f cf       	rjmp	.-226    	; 0x1482 <xQueueSemaphoreTake+0x2a>
    1564:	c8 01       	movw	r24, r16
    1566:	52 dd       	rcall	.-1372   	; 0x100c <prvUnlockQueue>
    1568:	51 d7       	rcall	.+3746   	; 0x240c <xTaskResumeAll>
    156a:	8b cf       	rjmp	.-234    	; 0x1482 <xQueueSemaphoreTake+0x2a>
    156c:	c8 01       	movw	r24, r16
    156e:	4e dd       	rcall	.-1380   	; 0x100c <prvUnlockQueue>
    1570:	4d d7       	rcall	.+3738   	; 0x240c <xTaskResumeAll>
    1572:	c8 01       	movw	r24, r16
    1574:	b7 dc       	rcall	.-1682   	; 0xee4 <prvIsQueueEmpty>
    1576:	88 23       	and	r24, r24
    1578:	09 f4       	brne	.+2      	; 0x157c <xQueueSemaphoreTake+0x124>
    157a:	83 cf       	rjmp	.-250    	; 0x1482 <xQueueSemaphoreTake+0x2a>
    157c:	ee 20       	and	r14, r14
    157e:	79 f0       	breq	.+30     	; 0x159e <xQueueSemaphoreTake+0x146>
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	0f 92       	push	r0
    1586:	c8 01       	movw	r24, r16
    1588:	9d dc       	rcall	.-1734   	; 0xec4 <prvGetDisinheritPriorityAfterTimeout>
    158a:	68 2f       	mov	r22, r24
    158c:	f8 01       	movw	r30, r16
    158e:	84 81       	ldd	r24, Z+4	; 0x04
    1590:	95 81       	ldd	r25, Z+5	; 0x05
    1592:	0e 94 39 17 	call	0x2e72	; 0x2e72 <vTaskPriorityDisinheritAfterTimeout>
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <xQueueSemaphoreTake+0x148>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	29 96       	adiw	r28, 0x09	; 9
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	ef 90       	pop	r14
    15b8:	08 95       	ret

000015ba <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	0f 92       	push	r0
    15c6:	89 a1       	ldd	r24, Y+33	; 0x21
    15c8:	8f 3f       	cpi	r24, 0xFF	; 255
    15ca:	09 f4       	brne	.+2      	; 0x15ce <vQueueWaitForMessageRestricted+0x14>
    15cc:	19 a2       	std	Y+33, r1	; 0x21
    15ce:	8a a1       	ldd	r24, Y+34	; 0x22
    15d0:	8f 3f       	cpi	r24, 0xFF	; 255
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <vQueueWaitForMessageRestricted+0x1c>
    15d4:	1a a2       	std	Y+34, r1	; 0x22
    15d6:	0f 90       	pop	r0
    15d8:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    15da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15dc:	81 11       	cpse	r24, r1
    15de:	04 c0       	rjmp	.+8      	; 0x15e8 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    15e0:	ce 01       	movw	r24, r28
    15e2:	43 96       	adiw	r24, 0x13	; 19
    15e4:	0e 94 28 14 	call	0x2850	; 0x2850 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    15e8:	ce 01       	movw	r24, r28
    15ea:	10 dd       	rcall	.-1504   	; 0x100c <prvUnlockQueue>
    }
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    15f2:	fc 01       	movw	r30, r24
    15f4:	44 81       	ldd	r20, Z+4	; 0x04
    15f6:	55 81       	ldd	r21, Z+5	; 0x05
    15f8:	22 81       	ldd	r18, Z+2	; 0x02
    15fa:	33 81       	ldd	r19, Z+3	; 0x03
    15fc:	24 0f       	add	r18, r20
    15fe:	35 1f       	adc	r19, r21
    1600:	80 81       	ld	r24, Z
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	b9 01       	movw	r22, r18
    1606:	68 1b       	sub	r22, r24
    1608:	79 0b       	sbc	r23, r25
    160a:	cb 01       	movw	r24, r22
    160c:	64 17       	cp	r22, r20
    160e:	75 07       	cpc	r23, r21
    1610:	10 f0       	brcs	.+4      	; 0x1616 <prvBytesInBuffer+0x24>
    1612:	84 1b       	sub	r24, r20
    1614:	95 0b       	sbc	r25, r21
    1616:	08 95       	ret

00001618 <prvInitialiseNewStreamBuffer>:
    1618:	0f 93       	push	r16
    161a:	fc 01       	movw	r30, r24
    161c:	8f e0       	ldi	r24, 0x0F	; 15
    161e:	df 01       	movw	r26, r30
    1620:	1d 92       	st	X+, r1
    1622:	8a 95       	dec	r24
    1624:	e9 f7       	brne	.-6      	; 0x1620 <prvInitialiseNewStreamBuffer+0x8>
    1626:	75 87       	std	Z+13, r23	; 0x0d
    1628:	64 87       	std	Z+12, r22	; 0x0c
    162a:	55 83       	std	Z+5, r21	; 0x05
    162c:	44 83       	std	Z+4, r20	; 0x04
    162e:	37 83       	std	Z+7, r19	; 0x07
    1630:	26 83       	std	Z+6, r18	; 0x06
    1632:	06 87       	std	Z+14, r16	; 0x0e
    1634:	0f 91       	pop	r16
    1636:	08 95       	ret

00001638 <prvWriteBytesToBuffer>:
    1638:	af 92       	push	r10
    163a:	bf 92       	push	r11
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	6c 01       	movw	r12, r24
    164e:	5b 01       	movw	r10, r22
    1650:	7a 01       	movw	r14, r20
    1652:	fc 01       	movw	r30, r24
    1654:	c2 81       	ldd	r28, Z+2	; 0x02
    1656:	d3 81       	ldd	r29, Z+3	; 0x03
    1658:	04 81       	ldd	r16, Z+4	; 0x04
    165a:	15 81       	ldd	r17, Z+5	; 0x05
    165c:	0c 1b       	sub	r16, r28
    165e:	1d 0b       	sbc	r17, r29
    1660:	40 17       	cp	r20, r16
    1662:	51 07       	cpc	r21, r17
    1664:	08 f4       	brcc	.+2      	; 0x1668 <prvWriteBytesToBuffer+0x30>
    1666:	8a 01       	movw	r16, r20
    1668:	f6 01       	movw	r30, r12
    166a:	84 85       	ldd	r24, Z+12	; 0x0c
    166c:	95 85       	ldd	r25, Z+13	; 0x0d
    166e:	a8 01       	movw	r20, r16
    1670:	b5 01       	movw	r22, r10
    1672:	8c 0f       	add	r24, r28
    1674:	9d 1f       	adc	r25, r29
    1676:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
    167a:	0e 15       	cp	r16, r14
    167c:	1f 05       	cpc	r17, r15
    167e:	58 f4       	brcc	.+22     	; 0x1696 <prvWriteBytesToBuffer+0x5e>
    1680:	a7 01       	movw	r20, r14
    1682:	40 1b       	sub	r20, r16
    1684:	51 0b       	sbc	r21, r17
    1686:	b5 01       	movw	r22, r10
    1688:	60 0f       	add	r22, r16
    168a:	71 1f       	adc	r23, r17
    168c:	f6 01       	movw	r30, r12
    168e:	84 85       	ldd	r24, Z+12	; 0x0c
    1690:	95 85       	ldd	r25, Z+13	; 0x0d
    1692:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
    1696:	ce 01       	movw	r24, r28
    1698:	8e 0d       	add	r24, r14
    169a:	9f 1d       	adc	r25, r15
    169c:	f6 01       	movw	r30, r12
    169e:	24 81       	ldd	r18, Z+4	; 0x04
    16a0:	35 81       	ldd	r19, Z+5	; 0x05
    16a2:	82 17       	cp	r24, r18
    16a4:	93 07       	cpc	r25, r19
    16a6:	10 f0       	brcs	.+4      	; 0x16ac <prvWriteBytesToBuffer+0x74>
    16a8:	82 1b       	sub	r24, r18
    16aa:	93 0b       	sbc	r25, r19
    16ac:	f6 01       	movw	r30, r12
    16ae:	93 83       	std	Z+3, r25	; 0x03
    16b0:	82 83       	std	Z+2, r24	; 0x02
    16b2:	c7 01       	movw	r24, r14
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	df 90       	pop	r13
    16c2:	cf 90       	pop	r12
    16c4:	bf 90       	pop	r11
    16c6:	af 90       	pop	r10
    16c8:	08 95       	ret

000016ca <prvWriteMessageToBuffer>:
    16ca:	cf 92       	push	r12
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	1f 92       	push	r1
    16dc:	1f 92       	push	r1
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	7c 01       	movw	r14, r24
    16e4:	6b 01       	movw	r12, r22
    16e6:	5a 83       	std	Y+2, r21	; 0x02
    16e8:	49 83       	std	Y+1, r20	; 0x01
    16ea:	21 15       	cp	r18, r1
    16ec:	31 05       	cpc	r19, r1
    16ee:	c1 f0       	breq	.+48     	; 0x1720 <prvWriteMessageToBuffer+0x56>
    16f0:	fc 01       	movw	r30, r24
    16f2:	86 85       	ldd	r24, Z+14	; 0x0e
    16f4:	80 fd       	sbrc	r24, 0
    16f6:	08 c0       	rjmp	.+16     	; 0x1708 <prvWriteMessageToBuffer+0x3e>
    16f8:	42 17       	cp	r20, r18
    16fa:	53 07       	cpc	r21, r19
    16fc:	08 f4       	brcc	.+2      	; 0x1700 <prvWriteMessageToBuffer+0x36>
    16fe:	9a 01       	movw	r18, r20
    1700:	3a 83       	std	Y+2, r19	; 0x02
    1702:	29 83       	std	Y+1, r18	; 0x01
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <prvWriteMessageToBuffer+0x5c>
    1708:	20 17       	cp	r18, r16
    170a:	31 07       	cpc	r19, r17
    170c:	58 f0       	brcs	.+22     	; 0x1724 <prvWriteMessageToBuffer+0x5a>
    170e:	42 e0       	ldi	r20, 0x02	; 2
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	be 01       	movw	r22, r28
    1714:	6f 5f       	subi	r22, 0xFF	; 255
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	c7 01       	movw	r24, r14
    171a:	8e df       	rcall	.-228    	; 0x1638 <prvWriteBytesToBuffer>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <prvWriteMessageToBuffer+0x5c>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <prvWriteMessageToBuffer+0x5c>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	88 23       	and	r24, r24
    1728:	31 f0       	breq	.+12     	; 0x1736 <prvWriteMessageToBuffer+0x6c>
    172a:	49 81       	ldd	r20, Y+1	; 0x01
    172c:	5a 81       	ldd	r21, Y+2	; 0x02
    172e:	b6 01       	movw	r22, r12
    1730:	c7 01       	movw	r24, r14
    1732:	82 df       	rcall	.-252    	; 0x1638 <prvWriteBytesToBuffer>
    1734:	02 c0       	rjmp	.+4      	; 0x173a <prvWriteMessageToBuffer+0x70>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	df 90       	pop	r13
    174c:	cf 90       	pop	r12
    174e:	08 95       	ret

00001750 <prvReadBytesFromBuffer>:
    1750:	af 92       	push	r10
    1752:	bf 92       	push	r11
    1754:	cf 92       	push	r12
    1756:	df 92       	push	r13
    1758:	ef 92       	push	r14
    175a:	ff 92       	push	r15
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	7c 01       	movw	r14, r24
    1766:	5b 01       	movw	r10, r22
    1768:	e9 01       	movw	r28, r18
    176a:	42 17       	cp	r20, r18
    176c:	53 07       	cpc	r21, r19
    176e:	08 f4       	brcc	.+2      	; 0x1772 <prvReadBytesFromBuffer+0x22>
    1770:	ea 01       	movw	r28, r20
    1772:	20 97       	sbiw	r28, 0x00	; 0
    1774:	81 f1       	breq	.+96     	; 0x17d6 <prvReadBytesFromBuffer+0x86>
    1776:	f7 01       	movw	r30, r14
    1778:	00 81       	ld	r16, Z
    177a:	11 81       	ldd	r17, Z+1	; 0x01
    177c:	84 81       	ldd	r24, Z+4	; 0x04
    177e:	95 81       	ldd	r25, Z+5	; 0x05
    1780:	80 1b       	sub	r24, r16
    1782:	91 0b       	sbc	r25, r17
    1784:	6e 01       	movw	r12, r28
    1786:	8c 17       	cp	r24, r28
    1788:	9d 07       	cpc	r25, r29
    178a:	08 f4       	brcc	.+2      	; 0x178e <prvReadBytesFromBuffer+0x3e>
    178c:	6c 01       	movw	r12, r24
    178e:	f7 01       	movw	r30, r14
    1790:	64 85       	ldd	r22, Z+12	; 0x0c
    1792:	75 85       	ldd	r23, Z+13	; 0x0d
    1794:	60 0f       	add	r22, r16
    1796:	71 1f       	adc	r23, r17
    1798:	a6 01       	movw	r20, r12
    179a:	c5 01       	movw	r24, r10
    179c:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
    17a0:	cc 16       	cp	r12, r28
    17a2:	dd 06       	cpc	r13, r29
    17a4:	58 f4       	brcc	.+22     	; 0x17bc <prvReadBytesFromBuffer+0x6c>
    17a6:	ae 01       	movw	r20, r28
    17a8:	4c 19       	sub	r20, r12
    17aa:	5d 09       	sbc	r21, r13
    17ac:	f7 01       	movw	r30, r14
    17ae:	64 85       	ldd	r22, Z+12	; 0x0c
    17b0:	75 85       	ldd	r23, Z+13	; 0x0d
    17b2:	c5 01       	movw	r24, r10
    17b4:	8c 0d       	add	r24, r12
    17b6:	9d 1d       	adc	r25, r13
    17b8:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <memcpy>
    17bc:	0c 0f       	add	r16, r28
    17be:	1d 1f       	adc	r17, r29
    17c0:	f7 01       	movw	r30, r14
    17c2:	84 81       	ldd	r24, Z+4	; 0x04
    17c4:	95 81       	ldd	r25, Z+5	; 0x05
    17c6:	08 17       	cp	r16, r24
    17c8:	19 07       	cpc	r17, r25
    17ca:	10 f0       	brcs	.+4      	; 0x17d0 <prvReadBytesFromBuffer+0x80>
    17cc:	08 1b       	sub	r16, r24
    17ce:	19 0b       	sbc	r17, r25
    17d0:	f7 01       	movw	r30, r14
    17d2:	11 83       	std	Z+1, r17	; 0x01
    17d4:	00 83       	st	Z, r16
    17d6:	ce 01       	movw	r24, r28
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	08 95       	ret

000017ee <prvReadMessageFromBuffer>:
    17ee:	6f 92       	push	r6
    17f0:	7f 92       	push	r7
    17f2:	8f 92       	push	r8
    17f4:	9f 92       	push	r9
    17f6:	af 92       	push	r10
    17f8:	bf 92       	push	r11
    17fa:	cf 92       	push	r12
    17fc:	df 92       	push	r13
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	1f 92       	push	r1
    180c:	1f 92       	push	r1
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	6c 01       	movw	r12, r24
    1814:	4b 01       	movw	r8, r22
    1816:	5a 01       	movw	r10, r20
    1818:	79 01       	movw	r14, r18
    181a:	01 15       	cp	r16, r1
    181c:	11 05       	cpc	r17, r1
    181e:	b1 f0       	breq	.+44     	; 0x184c <prvReadMessageFromBuffer+0x5e>
    1820:	fc 01       	movw	r30, r24
    1822:	60 80       	ld	r6, Z
    1824:	71 80       	ldd	r7, Z+1	; 0x01
    1826:	a8 01       	movw	r20, r16
    1828:	be 01       	movw	r22, r28
    182a:	6f 5f       	subi	r22, 0xFF	; 255
    182c:	7f 4f       	sbci	r23, 0xFF	; 255
    182e:	90 df       	rcall	.-224    	; 0x1750 <prvReadBytesFromBuffer>
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	e0 1a       	sub	r14, r16
    1836:	f1 0a       	sbc	r15, r17
    1838:	a8 16       	cp	r10, r24
    183a:	b9 06       	cpc	r11, r25
    183c:	30 f4       	brcc	.+12     	; 0x184a <prvReadMessageFromBuffer+0x5c>
    183e:	f6 01       	movw	r30, r12
    1840:	71 82       	std	Z+1, r7	; 0x01
    1842:	60 82       	st	Z, r6
    1844:	a1 2c       	mov	r10, r1
    1846:	b1 2c       	mov	r11, r1
    1848:	01 c0       	rjmp	.+2      	; 0x184c <prvReadMessageFromBuffer+0x5e>
    184a:	5c 01       	movw	r10, r24
    184c:	97 01       	movw	r18, r14
    184e:	a5 01       	movw	r20, r10
    1850:	b4 01       	movw	r22, r8
    1852:	c6 01       	movw	r24, r12
    1854:	7d df       	rcall	.-262    	; 0x1750 <prvReadBytesFromBuffer>
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	df 90       	pop	r13
    1868:	cf 90       	pop	r12
    186a:	bf 90       	pop	r11
    186c:	af 90       	pop	r10
    186e:	9f 90       	pop	r9
    1870:	8f 90       	pop	r8
    1872:	7f 90       	pop	r7
    1874:	6f 90       	pop	r6
    1876:	08 95       	ret

00001878 <xStreamBufferGenericCreate>:
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
    1888:	6b 01       	movw	r12, r22
    188a:	41 30       	cpi	r20, 0x01	; 1
    188c:	11 f4       	brne	.+4      	; 0x1892 <xStreamBufferGenericCreate+0x1a>
    188e:	01 e0       	ldi	r16, 0x01	; 1
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <xStreamBufferGenericCreate+0x1c>
    1892:	00 e0       	ldi	r16, 0x00	; 0
    1894:	c1 14       	cp	r12, r1
    1896:	d1 04       	cpc	r13, r1
    1898:	19 f4       	brne	.+6      	; 0x18a0 <xStreamBufferGenericCreate+0x28>
    189a:	cc 24       	eor	r12, r12
    189c:	c3 94       	inc	r12
    189e:	d1 2c       	mov	r13, r1
    18a0:	ce 01       	movw	r24, r28
    18a2:	40 96       	adiw	r24, 0x10	; 16
    18a4:	c8 17       	cp	r28, r24
    18a6:	d9 07       	cpc	r29, r25
    18a8:	20 f4       	brcc	.+8      	; 0x18b2 <xStreamBufferGenericCreate+0x3a>
    18aa:	21 96       	adiw	r28, 0x01	; 1
    18ac:	8f d8       	rcall	.-3810   	; 0x9cc <pvPortMalloc>
    18ae:	7c 01       	movw	r14, r24
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <xStreamBufferGenericCreate+0x3e>
    18b2:	e1 2c       	mov	r14, r1
    18b4:	f1 2c       	mov	r15, r1
    18b6:	e1 14       	cp	r14, r1
    18b8:	f1 04       	cpc	r15, r1
    18ba:	39 f0       	breq	.+14     	; 0x18ca <xStreamBufferGenericCreate+0x52>
    18bc:	96 01       	movw	r18, r12
    18be:	ae 01       	movw	r20, r28
    18c0:	b7 01       	movw	r22, r14
    18c2:	61 5f       	subi	r22, 0xF1	; 241
    18c4:	7f 4f       	sbci	r23, 0xFF	; 255
    18c6:	c7 01       	movw	r24, r14
    18c8:	a7 de       	rcall	.-690    	; 0x1618 <prvInitialiseNewStreamBuffer>
    18ca:	c7 01       	movw	r24, r14
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	08 95       	ret

000018dc <xStreamBufferReset>:
    18dc:	0f 93       	push	r16
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	0f 92       	push	r0
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 85       	ldd	r18, Z+8	; 0x08
    18e8:	31 85       	ldd	r19, Z+9	; 0x09
    18ea:	23 2b       	or	r18, r19
    18ec:	71 f4       	brne	.+28     	; 0x190a <xStreamBufferReset+0x2e>
    18ee:	22 85       	ldd	r18, Z+10	; 0x0a
    18f0:	33 85       	ldd	r19, Z+11	; 0x0b
    18f2:	23 2b       	or	r18, r19
    18f4:	61 f4       	brne	.+24     	; 0x190e <xStreamBufferReset+0x32>
    18f6:	26 81       	ldd	r18, Z+6	; 0x06
    18f8:	37 81       	ldd	r19, Z+7	; 0x07
    18fa:	44 81       	ldd	r20, Z+4	; 0x04
    18fc:	55 81       	ldd	r21, Z+5	; 0x05
    18fe:	64 85       	ldd	r22, Z+12	; 0x0c
    1900:	75 85       	ldd	r23, Z+13	; 0x0d
    1902:	06 85       	ldd	r16, Z+14	; 0x0e
    1904:	89 de       	rcall	.-750    	; 0x1618 <prvInitialiseNewStreamBuffer>
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <xStreamBufferReset+0x34>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <xStreamBufferReset+0x34>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 91       	pop	r16
    1916:	08 95       	ret

00001918 <xStreamBufferSpacesAvailable>:
    1918:	fc 01       	movw	r30, r24
    191a:	24 81       	ldd	r18, Z+4	; 0x04
    191c:	35 81       	ldd	r19, Z+5	; 0x05
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	42 81       	ldd	r20, Z+2	; 0x02
    1928:	53 81       	ldd	r21, Z+3	; 0x03
    192a:	84 1b       	sub	r24, r20
    192c:	95 0b       	sbc	r25, r21
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	82 17       	cp	r24, r18
    1932:	93 07       	cpc	r25, r19
    1934:	10 f0       	brcs	.+4      	; 0x193a <xStreamBufferSpacesAvailable+0x22>
    1936:	82 1b       	sub	r24, r18
    1938:	93 0b       	sbc	r25, r19
    193a:	08 95       	ret

0000193c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    193c:	2f 92       	push	r2
    193e:	3f 92       	push	r3
    1940:	4f 92       	push	r4
    1942:	5f 92       	push	r5
    1944:	6f 92       	push	r6
    1946:	7f 92       	push	r7
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	2b 97       	sbiw	r28, 0x0b	; 11
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	4c 01       	movw	r8, r24
    1972:	7b 87       	std	Y+11, r23	; 0x0b
    1974:	6a 87       	std	Y+10, r22	; 0x0a
    1976:	1a 01       	movw	r2, r20
    1978:	0e 83       	std	Y+6, r16	; 0x06
    197a:	1f 83       	std	Y+7, r17	; 0x07
    197c:	28 87       	std	Y+8, r18	; 0x08
    197e:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1980:	fc 01       	movw	r30, r24
    1982:	84 81       	ldd	r24, Z+4	; 0x04
    1984:	95 81       	ldd	r25, Z+5	; 0x05
    1986:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1988:	26 85       	ldd	r18, Z+14	; 0x0e
    198a:	20 ff       	sbrs	r18, 0
    198c:	0c c0       	rjmp	.+24     	; 0x19a6 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    198e:	2a 01       	movw	r4, r20
    1990:	f2 e0       	ldi	r31, 0x02	; 2
    1992:	4f 0e       	add	r4, r31
    1994:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1996:	84 15       	cp	r24, r4
    1998:	95 05       	cpc	r25, r5
    199a:	58 f4       	brcc	.+22     	; 0x19b2 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    199c:	1e 82       	std	Y+6, r1	; 0x06
    199e:	1f 82       	std	Y+7, r1	; 0x07
    19a0:	18 86       	std	Y+8, r1	; 0x08
    19a2:	19 86       	std	Y+9, r1	; 0x09
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    19a6:	84 17       	cp	r24, r20
    19a8:	95 07       	cpc	r25, r21
    19aa:	10 f0       	brcs	.+4      	; 0x19b0 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    19ac:	2a 01       	movw	r4, r20
    19ae:	01 c0       	rjmp	.+2      	; 0x19b2 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    19b0:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    19b2:	8e 81       	ldd	r24, Y+6	; 0x06
    19b4:	9f 81       	ldd	r25, Y+7	; 0x07
    19b6:	a8 85       	ldd	r26, Y+8	; 0x08
    19b8:	b9 85       	ldd	r27, Y+9	; 0x09
    19ba:	89 2b       	or	r24, r25
    19bc:	8a 2b       	or	r24, r26
    19be:	8b 2b       	or	r24, r27
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <xStreamBufferSend+0x88>
    19c2:	38 c0       	rjmp	.+112    	; 0x1a34 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    19c4:	ce 01       	movw	r24, r28
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    19d2:	c4 01       	movw	r24, r8
    19d4:	a1 df       	rcall	.-190    	; 0x1918 <xStreamBufferSpacesAvailable>
    19d6:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    19d8:	84 15       	cp	r24, r4
    19da:	95 05       	cpc	r25, r5
    19dc:	40 f5       	brcc	.+80     	; 0x1a2e <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 9d 1a 	call	0x353a	; 0x353a <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    19e8:	0e 94 44 16 	call	0x2c88	; 0x2c88 <xTaskGetCurrentTaskHandle>
    19ec:	f4 01       	movw	r30, r8
    19ee:	93 87       	std	Z+11, r25	; 0x0b
    19f0:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    19f6:	ae 80       	ldd	r10, Y+6	; 0x06
    19f8:	bf 80       	ldd	r11, Y+7	; 0x07
    19fa:	c8 84       	ldd	r12, Y+8	; 0x08
    19fc:	d9 84       	ldd	r13, Y+9	; 0x09
    19fe:	e1 2c       	mov	r14, r1
    1a00:	f1 2c       	mov	r15, r1
    1a02:	00 e0       	ldi	r16, 0x00	; 0
    1a04:	10 e0       	ldi	r17, 0x00	; 0
    1a06:	98 01       	movw	r18, r16
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	ba 01       	movw	r22, r20
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1a14:	f4 01       	movw	r30, r8
    1a16:	13 86       	std	Z+11, r1	; 0x0b
    1a18:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1a1a:	be 01       	movw	r22, r28
    1a1c:	6a 5f       	subi	r22, 0xFA	; 250
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	ce 01       	movw	r24, r28
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <xTaskCheckForTimeOut>
    1a28:	88 23       	and	r24, r24
    1a2a:	81 f2       	breq	.-96     	; 0x19cc <xStreamBufferSend+0x90>
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
                    break;
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1a34:	61 2c       	mov	r6, r1
    1a36:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1a38:	61 14       	cp	r6, r1
    1a3a:	71 04       	cpc	r7, r1
    1a3c:	19 f4       	brne	.+6      	; 0x1a44 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1a3e:	c4 01       	movw	r24, r8
    1a40:	6b df       	rcall	.-298    	; 0x1918 <xStreamBufferSpacesAvailable>
    1a42:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1a44:	82 01       	movw	r16, r4
    1a46:	93 01       	movw	r18, r6
    1a48:	a1 01       	movw	r20, r2
    1a4a:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a4c:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a4e:	c4 01       	movw	r24, r8
    1a50:	3c de       	rcall	.-904    	; 0x16ca <prvWriteMessageToBuffer>
    1a52:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1a54:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1a56:	e9 f0       	breq	.+58     	; 0x1a92 <xStreamBufferSend+0x156>
    1a58:	c4 01       	movw	r24, r8
    1a5a:	cb dd       	rcall	.-1130   	; 0x15f2 <prvBytesInBuffer>
    1a5c:	f4 01       	movw	r30, r8
    1a5e:	26 81       	ldd	r18, Z+6	; 0x06
    1a60:	37 81       	ldd	r19, Z+7	; 0x07
    1a62:	82 17       	cp	r24, r18
    1a64:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1a66:	a8 f0       	brcs	.+42     	; 0x1a92 <xStreamBufferSend+0x156>
    1a68:	91 d3       	rcall	.+1826   	; 0x218c <vTaskSuspendAll>
    1a6a:	f4 01       	movw	r30, r8
    1a6c:	80 85       	ldd	r24, Z+8	; 0x08
    1a6e:	91 85       	ldd	r25, Z+9	; 0x09
    1a70:	89 2b       	or	r24, r25
    1a72:	71 f0       	breq	.+28     	; 0x1a90 <xStreamBufferSend+0x154>
    1a74:	80 85       	ldd	r24, Z+8	; 0x08
    1a76:	91 85       	ldd	r25, Z+9	; 0x09
    1a78:	e1 2c       	mov	r14, r1
    1a7a:	f1 2c       	mov	r15, r1
    1a7c:	00 e0       	ldi	r16, 0x00	; 0
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	a9 01       	movw	r20, r18
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskGenericNotify>
    1a8a:	f4 01       	movw	r30, r8
    1a8c:	11 86       	std	Z+9, r1	; 0x09
    1a8e:	10 86       	std	Z+8, r1	; 0x08
    1a90:	bd d4       	rcall	.+2426   	; 0x240c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1a92:	c6 01       	movw	r24, r12
    1a94:	2b 96       	adiw	r28, 0x0b	; 11
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	bf 90       	pop	r11
    1ab2:	af 90       	pop	r10
    1ab4:	9f 90       	pop	r9
    1ab6:	8f 90       	pop	r8
    1ab8:	7f 90       	pop	r7
    1aba:	6f 90       	pop	r6
    1abc:	5f 90       	pop	r5
    1abe:	4f 90       	pop	r4
    1ac0:	3f 90       	pop	r3
    1ac2:	2f 90       	pop	r2
    1ac4:	08 95       	ret

00001ac6 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1ac6:	af 92       	push	r10
    1ac8:	bf 92       	push	r11
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	ec 01       	movw	r28, r24
    1adc:	7b 01       	movw	r14, r22
    1ade:	5a 01       	movw	r10, r20
    1ae0:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1ae2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae4:	80 ff       	sbrs	r24, 0
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1ae8:	8a 01       	movw	r16, r20
    1aea:	0e 5f       	subi	r16, 0xFE	; 254
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1af0:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1af2:	ce 01       	movw	r24, r28
    1af4:	11 df       	rcall	.-478    	; 0x1918 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1af6:	9c 01       	movw	r18, r24
    1af8:	a5 01       	movw	r20, r10
    1afa:	b7 01       	movw	r22, r14
    1afc:	ce 01       	movw	r24, r28
    1afe:	e5 dd       	rcall	.-1078   	; 0x16ca <prvWriteMessageToBuffer>
    1b00:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1b02:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1b04:	c1 f0       	breq	.+48     	; 0x1b36 <xStreamBufferSendFromISR+0x70>
    1b06:	ce 01       	movw	r24, r28
    1b08:	74 dd       	rcall	.-1304   	; 0x15f2 <prvBytesInBuffer>
    1b0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b0e:	82 17       	cp	r24, r18
    1b10:	93 07       	cpc	r25, r19
    1b12:	88 f0       	brcs	.+34     	; 0x1b36 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1b14:	88 85       	ldd	r24, Y+8	; 0x08
    1b16:	99 85       	ldd	r25, Y+9	; 0x09
    1b18:	89 2b       	or	r24, r25
    1b1a:	69 f0       	breq	.+26     	; 0x1b36 <xStreamBufferSendFromISR+0x70>
    1b1c:	88 85       	ldd	r24, Y+8	; 0x08
    1b1e:	99 85       	ldd	r25, Y+9	; 0x09
    1b20:	e1 2c       	mov	r14, r1
    1b22:	f1 2c       	mov	r15, r1
    1b24:	00 e0       	ldi	r16, 0x00	; 0
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	a9 01       	movw	r20, r18
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <xTaskGenericNotifyFromISR>
    1b32:	19 86       	std	Y+9, r1	; 0x09
    1b34:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1b36:	c5 01       	movw	r24, r10
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	df 90       	pop	r13
    1b46:	cf 90       	pop	r12
    1b48:	bf 90       	pop	r11
    1b4a:	af 90       	pop	r10
    1b4c:	08 95       	ret

00001b4e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1b4e:	4f 92       	push	r4
    1b50:	5f 92       	push	r5
    1b52:	6f 92       	push	r6
    1b54:	7f 92       	push	r7
    1b56:	8f 92       	push	r8
    1b58:	9f 92       	push	r9
    1b5a:	af 92       	push	r10
    1b5c:	bf 92       	push	r11
    1b5e:	cf 92       	push	r12
    1b60:	df 92       	push	r13
    1b62:	ef 92       	push	r14
    1b64:	ff 92       	push	r15
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	ec 01       	movw	r28, r24
    1b70:	2b 01       	movw	r4, r22
    1b72:	3a 01       	movw	r6, r20
    1b74:	58 01       	movw	r10, r16
    1b76:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1b78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b7a:	80 ff       	sbrs	r24, 0
    1b7c:	05 c0       	rjmp	.+10     	; 0x1b88 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1b7e:	68 94       	set
    1b80:	88 24       	eor	r8, r8
    1b82:	81 f8       	bld	r8, 1
    1b84:	91 2c       	mov	r9, r1
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1b88:	81 2c       	mov	r8, r1
    1b8a:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1b8c:	a1 14       	cp	r10, r1
    1b8e:	b1 04       	cpc	r11, r1
    1b90:	c1 04       	cpc	r12, r1
    1b92:	d1 04       	cpc	r13, r1
    1b94:	41 f1       	breq	.+80     	; 0x1be6 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	29 dd       	rcall	.-1454   	; 0x15f2 <prvBytesInBuffer>
    1ba0:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1ba2:	88 16       	cp	r8, r24
    1ba4:	99 06       	cpc	r9, r25
    1ba6:	48 f0       	brcs	.+18     	; 0x1bba <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 9d 1a 	call	0x353a	; 0x353a <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1bb2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <xTaskGetCurrentTaskHandle>
    1bb6:	99 87       	std	Y+9, r25	; 0x09
    1bb8:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1bba:	0f 90       	pop	r0
    1bbc:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1bbe:	8e 14       	cp	r8, r14
    1bc0:	9f 04       	cpc	r9, r15
    1bc2:	a0 f0       	brcs	.+40     	; 0x1bec <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1bc4:	e1 2c       	mov	r14, r1
    1bc6:	f1 2c       	mov	r15, r1
    1bc8:	00 e0       	ldi	r16, 0x00	; 0
    1bca:	10 e0       	ldi	r17, 0x00	; 0
    1bcc:	98 01       	movw	r18, r16
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	ba 01       	movw	r22, r20
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1bda:	19 86       	std	Y+9, r1	; 0x09
    1bdc:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1bde:	ce 01       	movw	r24, r28
    1be0:	08 dd       	rcall	.-1520   	; 0x15f2 <prvBytesInBuffer>
    1be2:	7c 01       	movw	r14, r24
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1be6:	ce 01       	movw	r24, r28
    1be8:	04 dd       	rcall	.-1528   	; 0x15f2 <prvBytesInBuffer>
    1bea:	7c 01       	movw	r14, r24
    1bec:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1bee:	9f 04       	cpc	r9, r15
    1bf0:	e8 f4       	brcc	.+58     	; 0x1c2c <xStreamBufferReceive+0xde>
    1bf2:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1bf4:	97 01       	movw	r18, r14
    1bf6:	a3 01       	movw	r20, r6
    1bf8:	b2 01       	movw	r22, r4
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	f8 dd       	rcall	.-1040   	; 0x17ee <prvReadMessageFromBuffer>
    1bfe:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1c00:	89 2b       	or	r24, r25
    1c02:	b1 f0       	breq	.+44     	; 0x1c30 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1c04:	c3 d2       	rcall	.+1414   	; 0x218c <vTaskSuspendAll>
    1c06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c0a:	89 2b       	or	r24, r25
    1c0c:	69 f0       	breq	.+26     	; 0x1c28 <xStreamBufferReceive+0xda>
    1c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c12:	e1 2c       	mov	r14, r1
    1c14:	f1 2c       	mov	r15, r1
    1c16:	00 e0       	ldi	r16, 0x00	; 0
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	a9 01       	movw	r20, r18
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	0e 94 84 18 	call	0x3108	; 0x3108 <xTaskGenericNotify>
    1c24:	1b 86       	std	Y+11, r1	; 0x0b
    1c26:	1a 86       	std	Y+10, r1	; 0x0a
    1c28:	f1 d3       	rcall	.+2018   	; 0x240c <xTaskResumeAll>
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <xStreamBufferReceive+0xe2>
    1c2c:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1c2e:	d1 2c       	mov	r13, r1
    1c30:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	9f 90       	pop	r9
    1c48:	8f 90       	pop	r8
    1c4a:	7f 90       	pop	r7
    1c4c:	6f 90       	pop	r6
    1c4e:	5f 90       	pop	r5
    1c50:	4f 90       	pop	r4
    1c52:	08 95       	ret

00001c54 <prvResetNextTaskUnblockTime>:
    1c54:	e0 91 49 17 	lds	r30, 0x1749	; 0x801749 <pxDelayedTaskList>
    1c58:	f0 91 4a 17 	lds	r31, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    1c5c:	80 81       	ld	r24, Z
    1c5e:	81 11       	cpse	r24, r1
    1c60:	0c c0       	rjmp	.+24     	; 0x1c7a <prvResetNextTaskUnblockTime+0x26>
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	9f ef       	ldi	r25, 0xFF	; 255
    1c66:	dc 01       	movw	r26, r24
    1c68:	80 93 13 17 	sts	0x1713, r24	; 0x801713 <xNextTaskUnblockTime>
    1c6c:	90 93 14 17 	sts	0x1714, r25	; 0x801714 <xNextTaskUnblockTime+0x1>
    1c70:	a0 93 15 17 	sts	0x1715, r26	; 0x801715 <xNextTaskUnblockTime+0x2>
    1c74:	b0 93 16 17 	sts	0x1716, r27	; 0x801716 <xNextTaskUnblockTime+0x3>
    1c78:	08 95       	ret
    1c7a:	e0 91 49 17 	lds	r30, 0x1749	; 0x801749 <pxDelayedTaskList>
    1c7e:	f0 91 4a 17 	lds	r31, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    1c82:	07 80       	ldd	r0, Z+7	; 0x07
    1c84:	f0 85       	ldd	r31, Z+8	; 0x08
    1c86:	e0 2d       	mov	r30, r0
    1c88:	80 81       	ld	r24, Z
    1c8a:	91 81       	ldd	r25, Z+1	; 0x01
    1c8c:	a2 81       	ldd	r26, Z+2	; 0x02
    1c8e:	b3 81       	ldd	r27, Z+3	; 0x03
    1c90:	80 93 13 17 	sts	0x1713, r24	; 0x801713 <xNextTaskUnblockTime>
    1c94:	90 93 14 17 	sts	0x1714, r25	; 0x801714 <xNextTaskUnblockTime+0x1>
    1c98:	a0 93 15 17 	sts	0x1715, r26	; 0x801715 <xNextTaskUnblockTime+0x2>
    1c9c:	b0 93 16 17 	sts	0x1716, r27	; 0x801716 <xNextTaskUnblockTime+0x3>
    1ca0:	08 95       	ret

00001ca2 <prvDeleteTCB>:
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	ec 01       	movw	r28, r24
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortFree>
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortFree>
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	08 95       	ret

00001cbc <prvInitialiseNewTask>:
    1cbc:	4f 92       	push	r4
    1cbe:	5f 92       	push	r5
    1cc0:	6f 92       	push	r6
    1cc2:	7f 92       	push	r7
    1cc4:	8f 92       	push	r8
    1cc6:	9f 92       	push	r9
    1cc8:	af 92       	push	r10
    1cca:	bf 92       	push	r11
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	0f 93       	push	r16
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	2c 01       	movw	r4, r24
    1cdc:	5b 01       	movw	r10, r22
    1cde:	4a 01       	movw	r8, r20
    1ce0:	39 01       	movw	r6, r18
    1ce2:	e6 01       	movw	r28, r12
    1ce4:	65 ea       	ldi	r22, 0xA5	; 165
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cec:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <memset>
    1cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	82 1a       	sub	r8, r18
    1cf8:	91 08       	sbc	r9, r1
    1cfa:	88 0e       	add	r8, r24
    1cfc:	99 1e       	adc	r9, r25
    1cfe:	a1 14       	cp	r10, r1
    1d00:	b1 04       	cpc	r11, r1
    1d02:	89 f4       	brne	.+34     	; 0x1d26 <prvInitialiseNewTask+0x6a>
    1d04:	15 c0       	rjmp	.+42     	; 0x1d30 <prvInitialiseNewTask+0x74>
    1d06:	82 2f       	mov	r24, r18
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	f5 01       	movw	r30, r10
    1d0c:	e8 0f       	add	r30, r24
    1d0e:	f9 1f       	adc	r31, r25
    1d10:	30 81       	ld	r19, Z
    1d12:	de 01       	movw	r26, r28
    1d14:	a8 0f       	add	r26, r24
    1d16:	b9 1f       	adc	r27, r25
    1d18:	5d 96       	adiw	r26, 0x1d	; 29
    1d1a:	3c 93       	st	X, r19
    1d1c:	80 81       	ld	r24, Z
    1d1e:	88 23       	and	r24, r24
    1d20:	29 f0       	breq	.+10     	; 0x1d2c <prvInitialiseNewTask+0x70>
    1d22:	2f 5f       	subi	r18, 0xFF	; 255
    1d24:	01 c0       	rjmp	.+2      	; 0x1d28 <prvInitialiseNewTask+0x6c>
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	20 31       	cpi	r18, 0x10	; 16
    1d2a:	68 f3       	brcs	.-38     	; 0x1d06 <prvInitialiseNewTask+0x4a>
    1d2c:	1c a6       	std	Y+44, r1	; 0x2c
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <prvInitialiseNewTask+0x76>
    1d30:	1d 8e       	std	Y+29, r1	; 0x1d
    1d32:	0a 30       	cpi	r16, 0x0A	; 10
    1d34:	08 f0       	brcs	.+2      	; 0x1d38 <prvInitialiseNewTask+0x7c>
    1d36:	09 e0       	ldi	r16, 0x09	; 9
    1d38:	0a 8f       	std	Y+26, r16	; 0x1a
    1d3a:	0d a7       	std	Y+45, r16	; 0x2d
    1d3c:	1e a6       	std	Y+46, r1	; 0x2e
    1d3e:	ce 01       	movw	r24, r28
    1d40:	02 96       	adiw	r24, 0x02	; 2
    1d42:	0e 94 dd 05 	call	0xbba	; 0xbba <vListInitialiseItem>
    1d46:	ce 01       	movw	r24, r28
    1d48:	0e 96       	adiw	r24, 0x0e	; 14
    1d4a:	0e 94 dd 05 	call	0xbba	; 0xbba <vListInitialiseItem>
    1d4e:	db 87       	std	Y+11, r29	; 0x0b
    1d50:	ca 87       	std	Y+10, r28	; 0x0a
    1d52:	8a e0       	ldi	r24, 0x0A	; 10
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a0 e0       	ldi	r26, 0x00	; 0
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	80 1b       	sub	r24, r16
    1d5c:	91 09       	sbc	r25, r1
    1d5e:	a1 09       	sbc	r26, r1
    1d60:	b1 09       	sbc	r27, r1
    1d62:	8e 87       	std	Y+14, r24	; 0x0e
    1d64:	9f 87       	std	Y+15, r25	; 0x0f
    1d66:	a8 8b       	std	Y+16, r26	; 0x10
    1d68:	b9 8b       	std	Y+17, r27	; 0x11
    1d6a:	df 8b       	std	Y+23, r29	; 0x17
    1d6c:	ce 8b       	std	Y+22, r28	; 0x16
    1d6e:	84 e0       	ldi	r24, 0x04	; 4
    1d70:	fe 01       	movw	r30, r28
    1d72:	bf 96       	adiw	r30, 0x2f	; 47
    1d74:	df 01       	movw	r26, r30
    1d76:	1d 92       	st	X+, r1
    1d78:	8a 95       	dec	r24
    1d7a:	e9 f7       	brne	.-6      	; 0x1d76 <prvInitialiseNewTask+0xba>
    1d7c:	1b aa       	std	Y+51, r1	; 0x33
    1d7e:	a3 01       	movw	r20, r6
    1d80:	b2 01       	movw	r22, r4
    1d82:	c4 01       	movw	r24, r8
    1d84:	0e 94 51 06 	call	0xca2	; 0xca2 <pxPortInitialiseStack>
    1d88:	99 83       	std	Y+1, r25	; 0x01
    1d8a:	88 83       	st	Y, r24
    1d8c:	e1 14       	cp	r14, r1
    1d8e:	f1 04       	cpc	r15, r1
    1d90:	19 f0       	breq	.+6      	; 0x1d98 <prvInitialiseNewTask+0xdc>
    1d92:	f7 01       	movw	r30, r14
    1d94:	d1 83       	std	Z+1, r29	; 0x01
    1d96:	c0 83       	st	Z, r28
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	0f 91       	pop	r16
    1d9e:	ff 90       	pop	r15
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	cf 90       	pop	r12
    1da6:	bf 90       	pop	r11
    1da8:	af 90       	pop	r10
    1daa:	9f 90       	pop	r9
    1dac:	8f 90       	pop	r8
    1dae:	7f 90       	pop	r7
    1db0:	6f 90       	pop	r6
    1db2:	5f 90       	pop	r5
    1db4:	4f 90       	pop	r4
    1db6:	08 95       	ret

00001db8 <prvInitialiseTaskLists>:
    1db8:	cf 93       	push	r28
    1dba:	c0 e0       	ldi	r28, 0x00	; 0
    1dbc:	09 c0       	rjmp	.+18     	; 0x1dd0 <prvInitialiseTaskLists+0x18>
    1dbe:	2b e0       	ldi	r18, 0x0B	; 11
    1dc0:	c2 9f       	mul	r28, r18
    1dc2:	c0 01       	movw	r24, r0
    1dc4:	11 24       	eor	r1, r1
    1dc6:	8f 59       	subi	r24, 0x9F	; 159
    1dc8:	98 4e       	sbci	r25, 0xE8	; 232
    1dca:	0e 94 cc 05 	call	0xb98	; 0xb98 <vListInitialise>
    1dce:	cf 5f       	subi	r28, 0xFF	; 255
    1dd0:	ca 30       	cpi	r28, 0x0A	; 10
    1dd2:	a8 f3       	brcs	.-22     	; 0x1dbe <prvInitialiseTaskLists+0x6>
    1dd4:	86 e5       	ldi	r24, 0x56	; 86
    1dd6:	97 e1       	ldi	r25, 0x17	; 23
    1dd8:	0e 94 cc 05 	call	0xb98	; 0xb98 <vListInitialise>
    1ddc:	8b e4       	ldi	r24, 0x4B	; 75
    1dde:	97 e1       	ldi	r25, 0x17	; 23
    1de0:	0e 94 cc 05 	call	0xb98	; 0xb98 <vListInitialise>
    1de4:	8c e3       	ldi	r24, 0x3C	; 60
    1de6:	97 e1       	ldi	r25, 0x17	; 23
    1de8:	0e 94 cc 05 	call	0xb98	; 0xb98 <vListInitialise>
    1dec:	81 e3       	ldi	r24, 0x31	; 49
    1dee:	97 e1       	ldi	r25, 0x17	; 23
    1df0:	0e 94 cc 05 	call	0xb98	; 0xb98 <vListInitialise>
    1df4:	85 e2       	ldi	r24, 0x25	; 37
    1df6:	97 e1       	ldi	r25, 0x17	; 23
    1df8:	0e 94 cc 05 	call	0xb98	; 0xb98 <vListInitialise>
    1dfc:	86 e5       	ldi	r24, 0x56	; 86
    1dfe:	97 e1       	ldi	r25, 0x17	; 23
    1e00:	90 93 4a 17 	sts	0x174A, r25	; 0x80174a <pxDelayedTaskList+0x1>
    1e04:	80 93 49 17 	sts	0x1749, r24	; 0x801749 <pxDelayedTaskList>
    1e08:	8b e4       	ldi	r24, 0x4B	; 75
    1e0a:	97 e1       	ldi	r25, 0x17	; 23
    1e0c:	90 93 48 17 	sts	0x1748, r25	; 0x801748 <pxOverflowDelayedTaskList+0x1>
    1e10:	80 93 47 17 	sts	0x1747, r24	; 0x801747 <pxOverflowDelayedTaskList>
    1e14:	cf 91       	pop	r28
    1e16:	08 95       	ret

00001e18 <prvAddNewTaskToReadyList>:
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	ec 01       	movw	r28, r24
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	0f 92       	push	r0
    1e24:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <uxCurrentNumberOfTasks>
    1e28:	8f 5f       	subi	r24, 0xFF	; 255
    1e2a:	80 93 24 17 	sts	0x1724, r24	; 0x801724 <uxCurrentNumberOfTasks>
    1e2e:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1e32:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1e36:	89 2b       	or	r24, r25
    1e38:	51 f4       	brne	.+20     	; 0x1e4e <prvAddNewTaskToReadyList+0x36>
    1e3a:	d0 93 d0 17 	sts	0x17D0, r29	; 0x8017d0 <pxCurrentTCB+0x1>
    1e3e:	c0 93 cf 17 	sts	0x17CF, r28	; 0x8017cf <pxCurrentTCB>
    1e42:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <uxCurrentNumberOfTasks>
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 f4       	brne	.+36     	; 0x1e6e <prvAddNewTaskToReadyList+0x56>
    1e4a:	b6 df       	rcall	.-148    	; 0x1db8 <prvInitialiseTaskLists>
    1e4c:	10 c0       	rjmp	.+32     	; 0x1e6e <prvAddNewTaskToReadyList+0x56>
    1e4e:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <xSchedulerRunning>
    1e52:	81 11       	cpse	r24, r1
    1e54:	0c c0       	rjmp	.+24     	; 0x1e6e <prvAddNewTaskToReadyList+0x56>
    1e56:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1e5a:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1e5e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e62:	89 17       	cp	r24, r25
    1e64:	20 f0       	brcs	.+8      	; 0x1e6e <prvAddNewTaskToReadyList+0x56>
    1e66:	d0 93 d0 17 	sts	0x17D0, r29	; 0x8017d0 <pxCurrentTCB+0x1>
    1e6a:	c0 93 cf 17 	sts	0x17CF, r28	; 0x8017cf <pxCurrentTCB>
    1e6e:	80 91 17 17 	lds	r24, 0x1717	; 0x801717 <uxTaskNumber>
    1e72:	8f 5f       	subi	r24, 0xFF	; 255
    1e74:	80 93 17 17 	sts	0x1717, r24	; 0x801717 <uxTaskNumber>
    1e78:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e7a:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    1e7e:	8e 17       	cp	r24, r30
    1e80:	10 f4       	brcc	.+4      	; 0x1e86 <prvAddNewTaskToReadyList+0x6e>
    1e82:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    1e86:	8b e0       	ldi	r24, 0x0B	; 11
    1e88:	8e 9f       	mul	r24, r30
    1e8a:	f0 01       	movw	r30, r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	ef 59       	subi	r30, 0x9F	; 159
    1e90:	f8 4e       	sbci	r31, 0xE8	; 232
    1e92:	01 80       	ldd	r0, Z+1	; 0x01
    1e94:	f2 81       	ldd	r31, Z+2	; 0x02
    1e96:	e0 2d       	mov	r30, r0
    1e98:	ff 83       	std	Y+7, r31	; 0x07
    1e9a:	ee 83       	std	Y+6, r30	; 0x06
    1e9c:	26 81       	ldd	r18, Z+6	; 0x06
    1e9e:	37 81       	ldd	r19, Z+7	; 0x07
    1ea0:	39 87       	std	Y+9, r19	; 0x09
    1ea2:	28 87       	std	Y+8, r18	; 0x08
    1ea4:	a6 81       	ldd	r26, Z+6	; 0x06
    1ea6:	b7 81       	ldd	r27, Z+7	; 0x07
    1ea8:	9e 01       	movw	r18, r28
    1eaa:	2e 5f       	subi	r18, 0xFE	; 254
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	15 96       	adiw	r26, 0x05	; 5
    1eb0:	3c 93       	st	X, r19
    1eb2:	2e 93       	st	-X, r18
    1eb4:	14 97       	sbiw	r26, 0x04	; 4
    1eb6:	37 83       	std	Z+7, r19	; 0x07
    1eb8:	26 83       	std	Z+6, r18	; 0x06
    1eba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ebc:	8e 9f       	mul	r24, r30
    1ebe:	f0 01       	movw	r30, r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	ef 59       	subi	r30, 0x9F	; 159
    1ec4:	f8 4e       	sbci	r31, 0xE8	; 232
    1ec6:	fd 87       	std	Y+13, r31	; 0x0d
    1ec8:	ec 87       	std	Y+12, r30	; 0x0c
    1eca:	80 81       	ld	r24, Z
    1ecc:	8f 5f       	subi	r24, 0xFF	; 255
    1ece:	80 83       	st	Z, r24
    1ed0:	0f 90       	pop	r0
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <xSchedulerRunning>
    1ed8:	88 23       	and	r24, r24
    1eda:	51 f0       	breq	.+20     	; 0x1ef0 <prvAddNewTaskToReadyList+0xd8>
    1edc:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1ee0:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1ee4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ee6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ee8:	98 17       	cp	r25, r24
    1eea:	10 f4       	brcc	.+4      	; 0x1ef0 <prvAddNewTaskToReadyList+0xd8>
    1eec:	0e 94 9a 06 	call	0xd34	; 0xd34 <vPortYield>
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret

00001ef6 <prvCheckTasksWaitingTermination>:
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	1b c0       	rjmp	.+54     	; 0x1f32 <prvCheckTasksWaitingTermination+0x3c>
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	0f 92       	push	r0
    1f02:	e0 91 38 17 	lds	r30, 0x1738	; 0x801738 <xTasksWaitingTermination+0x7>
    1f06:	f0 91 39 17 	lds	r31, 0x1739	; 0x801739 <xTasksWaitingTermination+0x8>
    1f0a:	c0 85       	ldd	r28, Z+8	; 0x08
    1f0c:	d1 85       	ldd	r29, Z+9	; 0x09
    1f0e:	ce 01       	movw	r24, r28
    1f10:	02 96       	adiw	r24, 0x02	; 2
    1f12:	0e 94 1e 06 	call	0xc3c	; 0xc3c <uxListRemove>
    1f16:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <uxCurrentNumberOfTasks>
    1f1a:	81 50       	subi	r24, 0x01	; 1
    1f1c:	80 93 24 17 	sts	0x1724, r24	; 0x801724 <uxCurrentNumberOfTasks>
    1f20:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <uxDeletedTasksWaitingCleanUp>
    1f24:	81 50       	subi	r24, 0x01	; 1
    1f26:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <uxDeletedTasksWaitingCleanUp>
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	ce 01       	movw	r24, r28
    1f30:	b8 de       	rcall	.-656    	; 0x1ca2 <prvDeleteTCB>
    1f32:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <uxDeletedTasksWaitingCleanUp>
    1f36:	81 11       	cpse	r24, r1
    1f38:	e1 cf       	rjmp	.-62     	; 0x1efc <prvCheckTasksWaitingTermination+0x6>
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	08 95       	ret

00001f40 <prvAddCurrentTaskToDelayedList>:
    1f40:	8f 92       	push	r8
    1f42:	9f 92       	push	r9
    1f44:	af 92       	push	r10
    1f46:	bf 92       	push	r11
    1f48:	cf 92       	push	r12
    1f4a:	df 92       	push	r13
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	6b 01       	movw	r12, r22
    1f56:	7c 01       	movw	r14, r24
    1f58:	c4 2f       	mov	r28, r20
    1f5a:	80 90 20 17 	lds	r8, 0x1720	; 0x801720 <xTickCount>
    1f5e:	90 90 21 17 	lds	r9, 0x1721	; 0x801721 <xTickCount+0x1>
    1f62:	a0 90 22 17 	lds	r10, 0x1722	; 0x801722 <xTickCount+0x2>
    1f66:	b0 90 23 17 	lds	r11, 0x1723	; 0x801723 <xTickCount+0x3>
    1f6a:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1f6e:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1f72:	02 96       	adiw	r24, 0x02	; 2
    1f74:	0e 94 1e 06 	call	0xc3c	; 0xc3c <uxListRemove>
    1f78:	8f ef       	ldi	r24, 0xFF	; 255
    1f7a:	c8 16       	cp	r12, r24
    1f7c:	d8 06       	cpc	r13, r24
    1f7e:	e8 06       	cpc	r14, r24
    1f80:	f8 06       	cpc	r15, r24
    1f82:	b1 f5       	brne	.+108    	; 0x1ff0 <prvAddCurrentTaskToDelayedList+0xb0>
    1f84:	cc 23       	and	r28, r28
    1f86:	a1 f1       	breq	.+104    	; 0x1ff0 <prvAddCurrentTaskToDelayedList+0xb0>
    1f88:	e5 e2       	ldi	r30, 0x25	; 37
    1f8a:	f7 e1       	ldi	r31, 0x17	; 23
    1f8c:	a1 81       	ldd	r26, Z+1	; 0x01
    1f8e:	b2 81       	ldd	r27, Z+2	; 0x02
    1f90:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1f94:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1f98:	bf 83       	std	Y+7, r27	; 0x07
    1f9a:	ae 83       	std	Y+6, r26	; 0x06
    1f9c:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1fa0:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1fa4:	16 96       	adiw	r26, 0x06	; 6
    1fa6:	8d 91       	ld	r24, X+
    1fa8:	9c 91       	ld	r25, X
    1faa:	17 97       	sbiw	r26, 0x07	; 7
    1fac:	99 87       	std	Y+9, r25	; 0x09
    1fae:	88 87       	std	Y+8, r24	; 0x08
    1fb0:	16 96       	adiw	r26, 0x06	; 6
    1fb2:	cd 91       	ld	r28, X+
    1fb4:	dc 91       	ld	r29, X
    1fb6:	17 97       	sbiw	r26, 0x07	; 7
    1fb8:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1fbc:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1fc0:	02 96       	adiw	r24, 0x02	; 2
    1fc2:	9d 83       	std	Y+5, r25	; 0x05
    1fc4:	8c 83       	std	Y+4, r24	; 0x04
    1fc6:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1fca:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1fce:	02 96       	adiw	r24, 0x02	; 2
    1fd0:	17 96       	adiw	r26, 0x07	; 7
    1fd2:	9c 93       	st	X, r25
    1fd4:	8e 93       	st	-X, r24
    1fd6:	16 97       	sbiw	r26, 0x06	; 6
    1fd8:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1fdc:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    1fe0:	1d 96       	adiw	r26, 0x0d	; 13
    1fe2:	fc 93       	st	X, r31
    1fe4:	ee 93       	st	-X, r30
    1fe6:	1c 97       	sbiw	r26, 0x0c	; 12
    1fe8:	80 81       	ld	r24, Z
    1fea:	8f 5f       	subi	r24, 0xFF	; 255
    1fec:	80 83       	st	Z, r24
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    1ff0:	c8 0c       	add	r12, r8
    1ff2:	d9 1c       	adc	r13, r9
    1ff4:	ea 1c       	adc	r14, r10
    1ff6:	fb 1c       	adc	r15, r11
    1ff8:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    1ffc:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2000:	c2 82       	std	Z+2, r12	; 0x02
    2002:	d3 82       	std	Z+3, r13	; 0x03
    2004:	e4 82       	std	Z+4, r14	; 0x04
    2006:	f5 82       	std	Z+5, r15	; 0x05
    2008:	c8 14       	cp	r12, r8
    200a:	d9 04       	cpc	r13, r9
    200c:	ea 04       	cpc	r14, r10
    200e:	fb 04       	cpc	r15, r11
    2010:	68 f4       	brcc	.+26     	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
    2012:	60 91 cf 17 	lds	r22, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2016:	70 91 d0 17 	lds	r23, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    201a:	80 91 47 17 	lds	r24, 0x1747	; 0x801747 <pxOverflowDelayedTaskList>
    201e:	90 91 48 17 	lds	r25, 0x1748	; 0x801748 <pxOverflowDelayedTaskList+0x1>
    2022:	6e 5f       	subi	r22, 0xFE	; 254
    2024:	7f 4f       	sbci	r23, 0xFF	; 255
    2026:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vListInsert>
    202a:	21 c0       	rjmp	.+66     	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    202c:	60 91 cf 17 	lds	r22, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2030:	70 91 d0 17 	lds	r23, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2034:	80 91 49 17 	lds	r24, 0x1749	; 0x801749 <pxDelayedTaskList>
    2038:	90 91 4a 17 	lds	r25, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    203c:	6e 5f       	subi	r22, 0xFE	; 254
    203e:	7f 4f       	sbci	r23, 0xFF	; 255
    2040:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vListInsert>
    2044:	80 91 13 17 	lds	r24, 0x1713	; 0x801713 <xNextTaskUnblockTime>
    2048:	90 91 14 17 	lds	r25, 0x1714	; 0x801714 <xNextTaskUnblockTime+0x1>
    204c:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <xNextTaskUnblockTime+0x2>
    2050:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <xNextTaskUnblockTime+0x3>
    2054:	c8 16       	cp	r12, r24
    2056:	d9 06       	cpc	r13, r25
    2058:	ea 06       	cpc	r14, r26
    205a:	fb 06       	cpc	r15, r27
    205c:	40 f4       	brcc	.+16     	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    205e:	c0 92 13 17 	sts	0x1713, r12	; 0x801713 <xNextTaskUnblockTime>
    2062:	d0 92 14 17 	sts	0x1714, r13	; 0x801714 <xNextTaskUnblockTime+0x1>
    2066:	e0 92 15 17 	sts	0x1715, r14	; 0x801715 <xNextTaskUnblockTime+0x2>
    206a:	f0 92 16 17 	sts	0x1716, r15	; 0x801716 <xNextTaskUnblockTime+0x3>
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	bf 90       	pop	r11
    207c:	af 90       	pop	r10
    207e:	9f 90       	pop	r9
    2080:	8f 90       	pop	r8
    2082:	08 95       	ret

00002084 <xTaskCreate>:
    2084:	2f 92       	push	r2
    2086:	3f 92       	push	r3
    2088:	4f 92       	push	r4
    208a:	5f 92       	push	r5
    208c:	6f 92       	push	r6
    208e:	7f 92       	push	r7
    2090:	8f 92       	push	r8
    2092:	9f 92       	push	r9
    2094:	af 92       	push	r10
    2096:	bf 92       	push	r11
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	0f 93       	push	r16
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	3c 01       	movw	r6, r24
    20a8:	1b 01       	movw	r2, r22
    20aa:	4a 01       	movw	r8, r20
    20ac:	29 01       	movw	r4, r18
    20ae:	ca 01       	movw	r24, r20
    20b0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <pvPortMalloc>
    20b4:	6c 01       	movw	r12, r24
    20b6:	89 2b       	or	r24, r25
    20b8:	71 f0       	breq	.+28     	; 0x20d6 <xTaskCreate+0x52>
    20ba:	84 e3       	ldi	r24, 0x34	; 52
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 e6 04 	call	0x9cc	; 0x9cc <pvPortMalloc>
    20c2:	ec 01       	movw	r28, r24
    20c4:	89 2b       	or	r24, r25
    20c6:	19 f0       	breq	.+6      	; 0x20ce <xTaskCreate+0x4a>
    20c8:	dc 8e       	std	Y+28, r13	; 0x1c
    20ca:	cb 8e       	std	Y+27, r12	; 0x1b
    20cc:	06 c0       	rjmp	.+12     	; 0x20da <xTaskCreate+0x56>
    20ce:	c6 01       	movw	r24, r12
    20d0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortFree>
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <xTaskCreate+0x56>
    20d6:	c0 e0       	ldi	r28, 0x00	; 0
    20d8:	d0 e0       	ldi	r29, 0x00	; 0
    20da:	20 97       	sbiw	r28, 0x00	; 0
    20dc:	61 f0       	breq	.+24     	; 0x20f6 <xTaskCreate+0x72>
    20de:	a1 2c       	mov	r10, r1
    20e0:	b1 2c       	mov	r11, r1
    20e2:	6e 01       	movw	r12, r28
    20e4:	92 01       	movw	r18, r4
    20e6:	a4 01       	movw	r20, r8
    20e8:	b1 01       	movw	r22, r2
    20ea:	c3 01       	movw	r24, r6
    20ec:	e7 dd       	rcall	.-1074   	; 0x1cbc <prvInitialiseNewTask>
    20ee:	ce 01       	movw	r24, r28
    20f0:	93 de       	rcall	.-730    	; 0x1e18 <prvAddNewTaskToReadyList>
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	01 c0       	rjmp	.+2      	; 0x20f8 <xTaskCreate+0x74>
    20f6:	8f ef       	ldi	r24, 0xFF	; 255
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	bf 90       	pop	r11
    2108:	af 90       	pop	r10
    210a:	9f 90       	pop	r9
    210c:	8f 90       	pop	r8
    210e:	7f 90       	pop	r7
    2110:	6f 90       	pop	r6
    2112:	5f 90       	pop	r5
    2114:	4f 90       	pop	r4
    2116:	3f 90       	pop	r3
    2118:	2f 90       	pop	r2
    211a:	08 95       	ret

0000211c <vTaskStartScheduler>:
    211c:	ef 92       	push	r14
    211e:	ff 92       	push	r15
    2120:	0f 93       	push	r16
    2122:	0f 2e       	mov	r0, r31
    2124:	f1 e1       	ldi	r31, 0x11	; 17
    2126:	ef 2e       	mov	r14, r31
    2128:	f7 e1       	ldi	r31, 0x17	; 23
    212a:	ff 2e       	mov	r15, r31
    212c:	f0 2d       	mov	r31, r0
    212e:	00 e0       	ldi	r16, 0x00	; 0
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 ec       	ldi	r20, 0xC0	; 192
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	69 e5       	ldi	r22, 0x59	; 89
    213a:	73 e0       	ldi	r23, 0x03	; 3
    213c:	8e e4       	ldi	r24, 0x4E	; 78
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	a1 df       	rcall	.-190    	; 0x2084 <xTaskCreate>
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	11 f4       	brne	.+4      	; 0x214a <vTaskStartScheduler+0x2e>
    2146:	0e 94 41 1b 	call	0x3682	; 0x3682 <xTimerCreateTimerTask>
    214a:	81 30       	cpi	r24, 0x01	; 1
    214c:	c9 f4       	brne	.+50     	; 0x2180 <vTaskStartScheduler+0x64>
    214e:	f8 94       	cli
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	9f ef       	ldi	r25, 0xFF	; 255
    2154:	dc 01       	movw	r26, r24
    2156:	80 93 13 17 	sts	0x1713, r24	; 0x801713 <xNextTaskUnblockTime>
    215a:	90 93 14 17 	sts	0x1714, r25	; 0x801714 <xNextTaskUnblockTime+0x1>
    215e:	a0 93 15 17 	sts	0x1715, r26	; 0x801715 <xNextTaskUnblockTime+0x2>
    2162:	b0 93 16 17 	sts	0x1716, r27	; 0x801716 <xNextTaskUnblockTime+0x3>
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	80 93 1e 17 	sts	0x171E, r24	; 0x80171e <xSchedulerRunning>
    216c:	10 92 20 17 	sts	0x1720, r1	; 0x801720 <xTickCount>
    2170:	10 92 21 17 	sts	0x1721, r1	; 0x801721 <xTickCount+0x1>
    2174:	10 92 22 17 	sts	0x1722, r1	; 0x801722 <xTickCount+0x2>
    2178:	10 92 23 17 	sts	0x1723, r1	; 0x801723 <xTickCount+0x3>
    217c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <xPortStartScheduler>
    2180:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	08 95       	ret

0000218c <vTaskSuspendAll>:
    218c:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    2190:	8f 5f       	subi	r24, 0xFF	; 255
    2192:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxSchedulerSuspended>
    2196:	08 95       	ret

00002198 <xTaskGetTickCount>:
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	0f 92       	push	r0
    219e:	60 91 20 17 	lds	r22, 0x1720	; 0x801720 <xTickCount>
    21a2:	70 91 21 17 	lds	r23, 0x1721	; 0x801721 <xTickCount+0x1>
    21a6:	80 91 22 17 	lds	r24, 0x1722	; 0x801722 <xTickCount+0x2>
    21aa:	90 91 23 17 	lds	r25, 0x1723	; 0x801723 <xTickCount+0x3>
    21ae:	0f 90       	pop	r0
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	08 95       	ret

000021b4 <xTaskIncrementTick>:
    21b4:	cf 92       	push	r12
    21b6:	df 92       	push	r13
    21b8:	ef 92       	push	r14
    21ba:	ff 92       	push	r15
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    21c4:	81 11       	cpse	r24, r1
    21c6:	05 c1       	rjmp	.+522    	; 0x23d2 <__stack+0x1d3>
    21c8:	c0 90 20 17 	lds	r12, 0x1720	; 0x801720 <xTickCount>
    21cc:	d0 90 21 17 	lds	r13, 0x1721	; 0x801721 <xTickCount+0x1>
    21d0:	e0 90 22 17 	lds	r14, 0x1722	; 0x801722 <xTickCount+0x2>
    21d4:	f0 90 23 17 	lds	r15, 0x1723	; 0x801723 <xTickCount+0x3>
    21d8:	8f ef       	ldi	r24, 0xFF	; 255
    21da:	c8 1a       	sub	r12, r24
    21dc:	d8 0a       	sbc	r13, r24
    21de:	e8 0a       	sbc	r14, r24
    21e0:	f8 0a       	sbc	r15, r24
    21e2:	c0 92 20 17 	sts	0x1720, r12	; 0x801720 <xTickCount>
    21e6:	d0 92 21 17 	sts	0x1721, r13	; 0x801721 <xTickCount+0x1>
    21ea:	e0 92 22 17 	sts	0x1722, r14	; 0x801722 <xTickCount+0x2>
    21ee:	f0 92 23 17 	sts	0x1723, r15	; 0x801723 <xTickCount+0x3>
    21f2:	c1 14       	cp	r12, r1
    21f4:	d1 04       	cpc	r13, r1
    21f6:	e1 04       	cpc	r14, r1
    21f8:	f1 04       	cpc	r15, r1
    21fa:	b1 f4       	brne	.+44     	; 0x2228 <__stack+0x29>
    21fc:	80 91 49 17 	lds	r24, 0x1749	; 0x801749 <pxDelayedTaskList>
    2200:	90 91 4a 17 	lds	r25, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    2204:	20 91 47 17 	lds	r18, 0x1747	; 0x801747 <pxOverflowDelayedTaskList>
    2208:	30 91 48 17 	lds	r19, 0x1748	; 0x801748 <pxOverflowDelayedTaskList+0x1>
    220c:	30 93 4a 17 	sts	0x174A, r19	; 0x80174a <pxDelayedTaskList+0x1>
    2210:	20 93 49 17 	sts	0x1749, r18	; 0x801749 <pxDelayedTaskList>
    2214:	90 93 48 17 	sts	0x1748, r25	; 0x801748 <pxOverflowDelayedTaskList+0x1>
    2218:	80 93 47 17 	sts	0x1747, r24	; 0x801747 <pxOverflowDelayedTaskList>
    221c:	80 91 18 17 	lds	r24, 0x1718	; 0x801718 <xNumOfOverflows>
    2220:	8f 5f       	subi	r24, 0xFF	; 255
    2222:	80 93 18 17 	sts	0x1718, r24	; 0x801718 <xNumOfOverflows>
    2226:	16 dd       	rcall	.-1492   	; 0x1c54 <prvResetNextTaskUnblockTime>
    2228:	80 91 13 17 	lds	r24, 0x1713	; 0x801713 <xNextTaskUnblockTime>
    222c:	90 91 14 17 	lds	r25, 0x1714	; 0x801714 <xNextTaskUnblockTime+0x1>
    2230:	a0 91 15 17 	lds	r26, 0x1715	; 0x801715 <xNextTaskUnblockTime+0x2>
    2234:	b0 91 16 17 	lds	r27, 0x1716	; 0x801716 <xNextTaskUnblockTime+0x3>
    2238:	c8 16       	cp	r12, r24
    223a:	d9 06       	cpc	r13, r25
    223c:	ea 06       	cpc	r14, r26
    223e:	fb 06       	cpc	r15, r27
    2240:	20 f4       	brcc	.+8      	; 0x224a <__stack+0x4b>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	b2 c0       	rjmp	.+356    	; 0x23aa <__stack+0x1ab>
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	01 c0       	rjmp	.+2      	; 0x224c <__stack+0x4d>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	e0 91 49 17 	lds	r30, 0x1749	; 0x801749 <pxDelayedTaskList>
    2250:	f0 91 4a 17 	lds	r31, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    2254:	90 81       	ld	r25, Z
    2256:	91 11       	cpse	r25, r1
    2258:	0c c0       	rjmp	.+24     	; 0x2272 <__stack+0x73>
    225a:	4f ef       	ldi	r20, 0xFF	; 255
    225c:	5f ef       	ldi	r21, 0xFF	; 255
    225e:	ba 01       	movw	r22, r20
    2260:	40 93 13 17 	sts	0x1713, r20	; 0x801713 <xNextTaskUnblockTime>
    2264:	50 93 14 17 	sts	0x1714, r21	; 0x801714 <xNextTaskUnblockTime+0x1>
    2268:	60 93 15 17 	sts	0x1715, r22	; 0x801715 <xNextTaskUnblockTime+0x2>
    226c:	70 93 16 17 	sts	0x1716, r23	; 0x801716 <xNextTaskUnblockTime+0x3>
    2270:	9c c0       	rjmp	.+312    	; 0x23aa <__stack+0x1ab>
    2272:	e0 91 49 17 	lds	r30, 0x1749	; 0x801749 <pxDelayedTaskList>
    2276:	f0 91 4a 17 	lds	r31, 0x174A	; 0x80174a <pxDelayedTaskList+0x1>
    227a:	07 80       	ldd	r0, Z+7	; 0x07
    227c:	f0 85       	ldd	r31, Z+8	; 0x08
    227e:	e0 2d       	mov	r30, r0
    2280:	00 84       	ldd	r0, Z+8	; 0x08
    2282:	f1 85       	ldd	r31, Z+9	; 0x09
    2284:	e0 2d       	mov	r30, r0
    2286:	42 81       	ldd	r20, Z+2	; 0x02
    2288:	53 81       	ldd	r21, Z+3	; 0x03
    228a:	64 81       	ldd	r22, Z+4	; 0x04
    228c:	75 81       	ldd	r23, Z+5	; 0x05
    228e:	c4 16       	cp	r12, r20
    2290:	d5 06       	cpc	r13, r21
    2292:	e6 06       	cpc	r14, r22
    2294:	f7 06       	cpc	r15, r23
    2296:	48 f4       	brcc	.+18     	; 0x22aa <__stack+0xab>
    2298:	40 93 13 17 	sts	0x1713, r20	; 0x801713 <xNextTaskUnblockTime>
    229c:	50 93 14 17 	sts	0x1714, r21	; 0x801714 <xNextTaskUnblockTime+0x1>
    22a0:	60 93 15 17 	sts	0x1715, r22	; 0x801715 <xNextTaskUnblockTime+0x2>
    22a4:	70 93 16 17 	sts	0x1716, r23	; 0x801716 <xNextTaskUnblockTime+0x3>
    22a8:	80 c0       	rjmp	.+256    	; 0x23aa <__stack+0x1ab>
    22aa:	a4 85       	ldd	r26, Z+12	; 0x0c
    22ac:	b5 85       	ldd	r27, Z+13	; 0x0d
    22ae:	c6 81       	ldd	r28, Z+6	; 0x06
    22b0:	d7 81       	ldd	r29, Z+7	; 0x07
    22b2:	20 85       	ldd	r18, Z+8	; 0x08
    22b4:	31 85       	ldd	r19, Z+9	; 0x09
    22b6:	3f 83       	std	Y+7, r19	; 0x07
    22b8:	2e 83       	std	Y+6, r18	; 0x06
    22ba:	c0 85       	ldd	r28, Z+8	; 0x08
    22bc:	d1 85       	ldd	r29, Z+9	; 0x09
    22be:	26 81       	ldd	r18, Z+6	; 0x06
    22c0:	37 81       	ldd	r19, Z+7	; 0x07
    22c2:	3d 83       	std	Y+5, r19	; 0x05
    22c4:	2c 83       	std	Y+4, r18	; 0x04
    22c6:	11 96       	adiw	r26, 0x01	; 1
    22c8:	4d 91       	ld	r20, X+
    22ca:	5c 91       	ld	r21, X
    22cc:	12 97       	sbiw	r26, 0x02	; 2
    22ce:	9f 01       	movw	r18, r30
    22d0:	2e 5f       	subi	r18, 0xFE	; 254
    22d2:	3f 4f       	sbci	r19, 0xFF	; 255
    22d4:	42 17       	cp	r20, r18
    22d6:	53 07       	cpc	r21, r19
    22d8:	31 f4       	brne	.+12     	; 0x22e6 <__stack+0xe7>
    22da:	40 85       	ldd	r20, Z+8	; 0x08
    22dc:	51 85       	ldd	r21, Z+9	; 0x09
    22de:	12 96       	adiw	r26, 0x02	; 2
    22e0:	5c 93       	st	X, r21
    22e2:	4e 93       	st	-X, r20
    22e4:	11 97       	sbiw	r26, 0x01	; 1
    22e6:	15 86       	std	Z+13, r1	; 0x0d
    22e8:	14 86       	std	Z+12, r1	; 0x0c
    22ea:	9c 91       	ld	r25, X
    22ec:	91 50       	subi	r25, 0x01	; 1
    22ee:	9c 93       	st	X, r25
    22f0:	a0 8d       	ldd	r26, Z+24	; 0x18
    22f2:	b1 8d       	ldd	r27, Z+25	; 0x19
    22f4:	10 97       	sbiw	r26, 0x00	; 0
    22f6:	09 f1       	breq	.+66     	; 0x233a <__stack+0x13b>
    22f8:	c2 89       	ldd	r28, Z+18	; 0x12
    22fa:	d3 89       	ldd	r29, Z+19	; 0x13
    22fc:	44 89       	ldd	r20, Z+20	; 0x14
    22fe:	55 89       	ldd	r21, Z+21	; 0x15
    2300:	5f 83       	std	Y+7, r21	; 0x07
    2302:	4e 83       	std	Y+6, r20	; 0x06
    2304:	c4 89       	ldd	r28, Z+20	; 0x14
    2306:	d5 89       	ldd	r29, Z+21	; 0x15
    2308:	42 89       	ldd	r20, Z+18	; 0x12
    230a:	53 89       	ldd	r21, Z+19	; 0x13
    230c:	5d 83       	std	Y+5, r21	; 0x05
    230e:	4c 83       	std	Y+4, r20	; 0x04
    2310:	11 96       	adiw	r26, 0x01	; 1
    2312:	6d 91       	ld	r22, X+
    2314:	7c 91       	ld	r23, X
    2316:	12 97       	sbiw	r26, 0x02	; 2
    2318:	af 01       	movw	r20, r30
    231a:	42 5f       	subi	r20, 0xF2	; 242
    231c:	5f 4f       	sbci	r21, 0xFF	; 255
    231e:	64 17       	cp	r22, r20
    2320:	75 07       	cpc	r23, r21
    2322:	31 f4       	brne	.+12     	; 0x2330 <__stack+0x131>
    2324:	44 89       	ldd	r20, Z+20	; 0x14
    2326:	55 89       	ldd	r21, Z+21	; 0x15
    2328:	12 96       	adiw	r26, 0x02	; 2
    232a:	5c 93       	st	X, r21
    232c:	4e 93       	st	-X, r20
    232e:	11 97       	sbiw	r26, 0x01	; 1
    2330:	11 8e       	std	Z+25, r1	; 0x19
    2332:	10 8e       	std	Z+24, r1	; 0x18
    2334:	9c 91       	ld	r25, X
    2336:	91 50       	subi	r25, 0x01	; 1
    2338:	9c 93       	st	X, r25
    233a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    233c:	90 91 1f 17 	lds	r25, 0x171F	; 0x80171f <uxTopReadyPriority>
    2340:	9a 17       	cp	r25, r26
    2342:	10 f4       	brcc	.+4      	; 0x2348 <__stack+0x149>
    2344:	a0 93 1f 17 	sts	0x171F, r26	; 0x80171f <uxTopReadyPriority>
    2348:	9b e0       	ldi	r25, 0x0B	; 11
    234a:	9a 9f       	mul	r25, r26
    234c:	d0 01       	movw	r26, r0
    234e:	11 24       	eor	r1, r1
    2350:	af 59       	subi	r26, 0x9F	; 159
    2352:	b8 4e       	sbci	r27, 0xE8	; 232
    2354:	11 96       	adiw	r26, 0x01	; 1
    2356:	0d 90       	ld	r0, X+
    2358:	bc 91       	ld	r27, X
    235a:	a0 2d       	mov	r26, r0
    235c:	b7 83       	std	Z+7, r27	; 0x07
    235e:	a6 83       	std	Z+6, r26	; 0x06
    2360:	16 96       	adiw	r26, 0x06	; 6
    2362:	4d 91       	ld	r20, X+
    2364:	5c 91       	ld	r21, X
    2366:	17 97       	sbiw	r26, 0x07	; 7
    2368:	51 87       	std	Z+9, r21	; 0x09
    236a:	40 87       	std	Z+8, r20	; 0x08
    236c:	16 96       	adiw	r26, 0x06	; 6
    236e:	cd 91       	ld	r28, X+
    2370:	dc 91       	ld	r29, X
    2372:	17 97       	sbiw	r26, 0x07	; 7
    2374:	3d 83       	std	Y+5, r19	; 0x05
    2376:	2c 83       	std	Y+4, r18	; 0x04
    2378:	17 96       	adiw	r26, 0x07	; 7
    237a:	3c 93       	st	X, r19
    237c:	2e 93       	st	-X, r18
    237e:	16 97       	sbiw	r26, 0x06	; 6
    2380:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2382:	9a 9f       	mul	r25, r26
    2384:	d0 01       	movw	r26, r0
    2386:	11 24       	eor	r1, r1
    2388:	af 59       	subi	r26, 0x9F	; 159
    238a:	b8 4e       	sbci	r27, 0xE8	; 232
    238c:	b5 87       	std	Z+13, r27	; 0x0d
    238e:	a4 87       	std	Z+12, r26	; 0x0c
    2390:	9c 91       	ld	r25, X
    2392:	9f 5f       	subi	r25, 0xFF	; 255
    2394:	9c 93       	st	X, r25
    2396:	22 8d       	ldd	r18, Z+26	; 0x1a
    2398:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    239c:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    23a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    23a2:	29 17       	cp	r18, r25
    23a4:	08 f0       	brcs	.+2      	; 0x23a8 <__stack+0x1a9>
    23a6:	4f cf       	rjmp	.-354    	; 0x2246 <__stack+0x47>
    23a8:	51 cf       	rjmp	.-350    	; 0x224c <__stack+0x4d>
    23aa:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    23ae:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    23b2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    23b4:	9b e0       	ldi	r25, 0x0B	; 11
    23b6:	e9 9f       	mul	r30, r25
    23b8:	f0 01       	movw	r30, r0
    23ba:	11 24       	eor	r1, r1
    23bc:	ef 59       	subi	r30, 0x9F	; 159
    23be:	f8 4e       	sbci	r31, 0xE8	; 232
    23c0:	90 81       	ld	r25, Z
    23c2:	92 30       	cpi	r25, 0x02	; 2
    23c4:	08 f0       	brcs	.+2      	; 0x23c8 <__stack+0x1c9>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 91 19 17 	lds	r25, 0x1719	; 0x801719 <xYieldPending>
    23cc:	91 11       	cpse	r25, r1
    23ce:	16 c0       	rjmp	.+44     	; 0x23fc <__stack+0x1fd>
    23d0:	16 c0       	rjmp	.+44     	; 0x23fe <__stack+0x1ff>
    23d2:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <xPendedTicks>
    23d6:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <xPendedTicks+0x1>
    23da:	a0 91 1c 17 	lds	r26, 0x171C	; 0x80171c <xPendedTicks+0x2>
    23de:	b0 91 1d 17 	lds	r27, 0x171D	; 0x80171d <xPendedTicks+0x3>
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	a1 1d       	adc	r26, r1
    23e6:	b1 1d       	adc	r27, r1
    23e8:	80 93 1a 17 	sts	0x171A, r24	; 0x80171a <xPendedTicks>
    23ec:	90 93 1b 17 	sts	0x171B, r25	; 0x80171b <xPendedTicks+0x1>
    23f0:	a0 93 1c 17 	sts	0x171C, r26	; 0x80171c <xPendedTicks+0x2>
    23f4:	b0 93 1d 17 	sts	0x171D, r27	; 0x80171d <xPendedTicks+0x3>
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <__stack+0x1ff>
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	ff 90       	pop	r15
    2404:	ef 90       	pop	r14
    2406:	df 90       	pop	r13
    2408:	cf 90       	pop	r12
    240a:	08 95       	ret

0000240c <xTaskResumeAll>:
    240c:	cf 92       	push	r12
    240e:	df 92       	push	r13
    2410:	ef 92       	push	r14
    2412:	ff 92       	push	r15
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	0f 92       	push	r0
    241e:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    2422:	81 50       	subi	r24, 0x01	; 1
    2424:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <uxSchedulerSuspended>
    2428:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    242c:	81 11       	cpse	r24, r1
    242e:	be c0       	rjmp	.+380    	; 0x25ac <xTaskResumeAll+0x1a0>
    2430:	80 91 24 17 	lds	r24, 0x1724	; 0x801724 <uxCurrentNumberOfTasks>
    2434:	81 11       	cpse	r24, r1
    2436:	88 c0       	rjmp	.+272    	; 0x2548 <xTaskResumeAll+0x13c>
    2438:	bc c0       	rjmp	.+376    	; 0x25b2 <xTaskResumeAll+0x1a6>
    243a:	e0 91 43 17 	lds	r30, 0x1743	; 0x801743 <xPendingReadyList+0x7>
    243e:	f0 91 44 17 	lds	r31, 0x1744	; 0x801744 <xPendingReadyList+0x8>
    2442:	00 84       	ldd	r0, Z+8	; 0x08
    2444:	f1 85       	ldd	r31, Z+9	; 0x09
    2446:	e0 2d       	mov	r30, r0
    2448:	a0 8d       	ldd	r26, Z+24	; 0x18
    244a:	b1 8d       	ldd	r27, Z+25	; 0x19
    244c:	c2 89       	ldd	r28, Z+18	; 0x12
    244e:	d3 89       	ldd	r29, Z+19	; 0x13
    2450:	84 89       	ldd	r24, Z+20	; 0x14
    2452:	95 89       	ldd	r25, Z+21	; 0x15
    2454:	9f 83       	std	Y+7, r25	; 0x07
    2456:	8e 83       	std	Y+6, r24	; 0x06
    2458:	c4 89       	ldd	r28, Z+20	; 0x14
    245a:	d5 89       	ldd	r29, Z+21	; 0x15
    245c:	82 89       	ldd	r24, Z+18	; 0x12
    245e:	93 89       	ldd	r25, Z+19	; 0x13
    2460:	9d 83       	std	Y+5, r25	; 0x05
    2462:	8c 83       	std	Y+4, r24	; 0x04
    2464:	11 96       	adiw	r26, 0x01	; 1
    2466:	2d 91       	ld	r18, X+
    2468:	3c 91       	ld	r19, X
    246a:	12 97       	sbiw	r26, 0x02	; 2
    246c:	cf 01       	movw	r24, r30
    246e:	0e 96       	adiw	r24, 0x0e	; 14
    2470:	28 17       	cp	r18, r24
    2472:	39 07       	cpc	r19, r25
    2474:	31 f4       	brne	.+12     	; 0x2482 <xTaskResumeAll+0x76>
    2476:	84 89       	ldd	r24, Z+20	; 0x14
    2478:	95 89       	ldd	r25, Z+21	; 0x15
    247a:	12 96       	adiw	r26, 0x02	; 2
    247c:	9c 93       	st	X, r25
    247e:	8e 93       	st	-X, r24
    2480:	11 97       	sbiw	r26, 0x01	; 1
    2482:	11 8e       	std	Z+25, r1	; 0x19
    2484:	10 8e       	std	Z+24, r1	; 0x18
    2486:	8c 91       	ld	r24, X
    2488:	81 50       	subi	r24, 0x01	; 1
    248a:	8c 93       	st	X, r24
    248c:	a4 85       	ldd	r26, Z+12	; 0x0c
    248e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2490:	c6 81       	ldd	r28, Z+6	; 0x06
    2492:	d7 81       	ldd	r29, Z+7	; 0x07
    2494:	80 85       	ldd	r24, Z+8	; 0x08
    2496:	91 85       	ldd	r25, Z+9	; 0x09
    2498:	9f 83       	std	Y+7, r25	; 0x07
    249a:	8e 83       	std	Y+6, r24	; 0x06
    249c:	c0 85       	ldd	r28, Z+8	; 0x08
    249e:	d1 85       	ldd	r29, Z+9	; 0x09
    24a0:	86 81       	ldd	r24, Z+6	; 0x06
    24a2:	97 81       	ldd	r25, Z+7	; 0x07
    24a4:	9d 83       	std	Y+5, r25	; 0x05
    24a6:	8c 83       	std	Y+4, r24	; 0x04
    24a8:	11 96       	adiw	r26, 0x01	; 1
    24aa:	8d 91       	ld	r24, X+
    24ac:	9c 91       	ld	r25, X
    24ae:	12 97       	sbiw	r26, 0x02	; 2
    24b0:	9f 01       	movw	r18, r30
    24b2:	2e 5f       	subi	r18, 0xFE	; 254
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    24b6:	82 17       	cp	r24, r18
    24b8:	93 07       	cpc	r25, r19
    24ba:	31 f4       	brne	.+12     	; 0x24c8 <xTaskResumeAll+0xbc>
    24bc:	80 85       	ldd	r24, Z+8	; 0x08
    24be:	91 85       	ldd	r25, Z+9	; 0x09
    24c0:	12 96       	adiw	r26, 0x02	; 2
    24c2:	9c 93       	st	X, r25
    24c4:	8e 93       	st	-X, r24
    24c6:	11 97       	sbiw	r26, 0x01	; 1
    24c8:	15 86       	std	Z+13, r1	; 0x0d
    24ca:	14 86       	std	Z+12, r1	; 0x0c
    24cc:	8c 91       	ld	r24, X
    24ce:	81 50       	subi	r24, 0x01	; 1
    24d0:	8c 93       	st	X, r24
    24d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24d4:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    24d8:	8a 17       	cp	r24, r26
    24da:	10 f4       	brcc	.+4      	; 0x24e0 <xTaskResumeAll+0xd4>
    24dc:	a0 93 1f 17 	sts	0x171F, r26	; 0x80171f <uxTopReadyPriority>
    24e0:	8b e0       	ldi	r24, 0x0B	; 11
    24e2:	8a 9f       	mul	r24, r26
    24e4:	d0 01       	movw	r26, r0
    24e6:	11 24       	eor	r1, r1
    24e8:	af 59       	subi	r26, 0x9F	; 159
    24ea:	b8 4e       	sbci	r27, 0xE8	; 232
    24ec:	11 96       	adiw	r26, 0x01	; 1
    24ee:	0d 90       	ld	r0, X+
    24f0:	bc 91       	ld	r27, X
    24f2:	a0 2d       	mov	r26, r0
    24f4:	b7 83       	std	Z+7, r27	; 0x07
    24f6:	a6 83       	std	Z+6, r26	; 0x06
    24f8:	16 96       	adiw	r26, 0x06	; 6
    24fa:	4d 91       	ld	r20, X+
    24fc:	5c 91       	ld	r21, X
    24fe:	17 97       	sbiw	r26, 0x07	; 7
    2500:	51 87       	std	Z+9, r21	; 0x09
    2502:	40 87       	std	Z+8, r20	; 0x08
    2504:	16 96       	adiw	r26, 0x06	; 6
    2506:	cd 91       	ld	r28, X+
    2508:	dc 91       	ld	r29, X
    250a:	17 97       	sbiw	r26, 0x07	; 7
    250c:	3d 83       	std	Y+5, r19	; 0x05
    250e:	2c 83       	std	Y+4, r18	; 0x04
    2510:	17 96       	adiw	r26, 0x07	; 7
    2512:	3c 93       	st	X, r19
    2514:	2e 93       	st	-X, r18
    2516:	16 97       	sbiw	r26, 0x06	; 6
    2518:	a2 8d       	ldd	r26, Z+26	; 0x1a
    251a:	8a 9f       	mul	r24, r26
    251c:	d0 01       	movw	r26, r0
    251e:	11 24       	eor	r1, r1
    2520:	af 59       	subi	r26, 0x9F	; 159
    2522:	b8 4e       	sbci	r27, 0xE8	; 232
    2524:	b5 87       	std	Z+13, r27	; 0x0d
    2526:	a4 87       	std	Z+12, r26	; 0x0c
    2528:	8c 91       	ld	r24, X
    252a:	8f 5f       	subi	r24, 0xFF	; 255
    252c:	8c 93       	st	X, r24
    252e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2530:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2534:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2538:	5a 96       	adiw	r26, 0x1a	; 26
    253a:	8c 91       	ld	r24, X
    253c:	98 17       	cp	r25, r24
    253e:	30 f0       	brcs	.+12     	; 0x254c <xTaskResumeAll+0x140>
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    2546:	02 c0       	rjmp	.+4      	; 0x254c <xTaskResumeAll+0x140>
    2548:	e0 e0       	ldi	r30, 0x00	; 0
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <xPendingReadyList>
    2550:	81 11       	cpse	r24, r1
    2552:	73 cf       	rjmp	.-282    	; 0x243a <xTaskResumeAll+0x2e>
    2554:	ef 2b       	or	r30, r31
    2556:	09 f0       	breq	.+2      	; 0x255a <xTaskResumeAll+0x14e>
    2558:	7d db       	rcall	.-2310   	; 0x1c54 <prvResetNextTaskUnblockTime>
    255a:	c0 90 1a 17 	lds	r12, 0x171A	; 0x80171a <xPendedTicks>
    255e:	d0 90 1b 17 	lds	r13, 0x171B	; 0x80171b <xPendedTicks+0x1>
    2562:	e0 90 1c 17 	lds	r14, 0x171C	; 0x80171c <xPendedTicks+0x2>
    2566:	f0 90 1d 17 	lds	r15, 0x171D	; 0x80171d <xPendedTicks+0x3>
    256a:	c1 14       	cp	r12, r1
    256c:	d1 04       	cpc	r13, r1
    256e:	e1 04       	cpc	r14, r1
    2570:	f1 04       	cpc	r15, r1
    2572:	a1 f0       	breq	.+40     	; 0x259c <xTaskResumeAll+0x190>
    2574:	1f de       	rcall	.-962    	; 0x21b4 <xTaskIncrementTick>
    2576:	88 23       	and	r24, r24
    2578:	19 f0       	breq	.+6      	; 0x2580 <xTaskResumeAll+0x174>
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	c8 1a       	sub	r12, r24
    2584:	d1 08       	sbc	r13, r1
    2586:	e1 08       	sbc	r14, r1
    2588:	f1 08       	sbc	r15, r1
    258a:	a1 f7       	brne	.-24     	; 0x2574 <xTaskResumeAll+0x168>
    258c:	10 92 1a 17 	sts	0x171A, r1	; 0x80171a <xPendedTicks>
    2590:	10 92 1b 17 	sts	0x171B, r1	; 0x80171b <xPendedTicks+0x1>
    2594:	10 92 1c 17 	sts	0x171C, r1	; 0x80171c <xPendedTicks+0x2>
    2598:	10 92 1d 17 	sts	0x171D, r1	; 0x80171d <xPendedTicks+0x3>
    259c:	80 91 19 17 	lds	r24, 0x1719	; 0x801719 <xYieldPending>
    25a0:	88 23       	and	r24, r24
    25a2:	31 f0       	breq	.+12     	; 0x25b0 <xTaskResumeAll+0x1a4>
    25a4:	0e 94 9a 06 	call	0xd34	; 0xd34 <vPortYield>
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	03 c0       	rjmp	.+6      	; 0x25b2 <xTaskResumeAll+0x1a6>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	01 c0       	rjmp	.+2      	; 0x25b2 <xTaskResumeAll+0x1a6>
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	0f 90       	pop	r0
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	df 90       	pop	r13
    25c0:	cf 90       	pop	r12
    25c2:	08 95       	ret

000025c4 <xTaskDelayUntil>:
    25c4:	8f 92       	push	r8
    25c6:	9f 92       	push	r9
    25c8:	af 92       	push	r10
    25ca:	bf 92       	push	r11
    25cc:	cf 92       	push	r12
    25ce:	df 92       	push	r13
    25d0:	ef 92       	push	r14
    25d2:	ff 92       	push	r15
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	ec 01       	movw	r28, r24
    25dc:	6a 01       	movw	r12, r20
    25de:	7b 01       	movw	r14, r22
    25e0:	d5 dd       	rcall	.-1110   	; 0x218c <vTaskSuspendAll>
    25e2:	80 90 20 17 	lds	r8, 0x1720	; 0x801720 <xTickCount>
    25e6:	90 90 21 17 	lds	r9, 0x1721	; 0x801721 <xTickCount+0x1>
    25ea:	a0 90 22 17 	lds	r10, 0x1722	; 0x801722 <xTickCount+0x2>
    25ee:	b0 90 23 17 	lds	r11, 0x1723	; 0x801723 <xTickCount+0x3>
    25f2:	88 81       	ld	r24, Y
    25f4:	99 81       	ldd	r25, Y+1	; 0x01
    25f6:	aa 81       	ldd	r26, Y+2	; 0x02
    25f8:	bb 81       	ldd	r27, Y+3	; 0x03
    25fa:	ac 01       	movw	r20, r24
    25fc:	bd 01       	movw	r22, r26
    25fe:	4c 0d       	add	r20, r12
    2600:	5d 1d       	adc	r21, r13
    2602:	6e 1d       	adc	r22, r14
    2604:	7f 1d       	adc	r23, r15
    2606:	88 16       	cp	r8, r24
    2608:	99 06       	cpc	r9, r25
    260a:	aa 06       	cpc	r10, r26
    260c:	bb 06       	cpc	r11, r27
    260e:	60 f4       	brcc	.+24     	; 0x2628 <xTaskDelayUntil+0x64>
    2610:	48 17       	cp	r20, r24
    2612:	59 07       	cpc	r21, r25
    2614:	6a 07       	cpc	r22, r26
    2616:	7b 07       	cpc	r23, r27
    2618:	98 f4       	brcc	.+38     	; 0x2640 <xTaskDelayUntil+0x7c>
    261a:	84 16       	cp	r8, r20
    261c:	95 06       	cpc	r9, r21
    261e:	a6 06       	cpc	r10, r22
    2620:	b7 06       	cpc	r11, r23
    2622:	80 f0       	brcs	.+32     	; 0x2644 <xTaskDelayUntil+0x80>
    2624:	10 e0       	ldi	r17, 0x00	; 0
    2626:	13 c0       	rjmp	.+38     	; 0x264e <xTaskDelayUntil+0x8a>
    2628:	48 17       	cp	r20, r24
    262a:	59 07       	cpc	r21, r25
    262c:	6a 07       	cpc	r22, r26
    262e:	7b 07       	cpc	r23, r27
    2630:	58 f0       	brcs	.+22     	; 0x2648 <xTaskDelayUntil+0x84>
    2632:	84 16       	cp	r8, r20
    2634:	95 06       	cpc	r9, r21
    2636:	a6 06       	cpc	r10, r22
    2638:	b7 06       	cpc	r11, r23
    263a:	40 f0       	brcs	.+16     	; 0x264c <xTaskDelayUntil+0x88>
    263c:	10 e0       	ldi	r17, 0x00	; 0
    263e:	07 c0       	rjmp	.+14     	; 0x264e <xTaskDelayUntil+0x8a>
    2640:	10 e0       	ldi	r17, 0x00	; 0
    2642:	05 c0       	rjmp	.+10     	; 0x264e <xTaskDelayUntil+0x8a>
    2644:	11 e0       	ldi	r17, 0x01	; 1
    2646:	03 c0       	rjmp	.+6      	; 0x264e <xTaskDelayUntil+0x8a>
    2648:	11 e0       	ldi	r17, 0x01	; 1
    264a:	01 c0       	rjmp	.+2      	; 0x264e <xTaskDelayUntil+0x8a>
    264c:	11 e0       	ldi	r17, 0x01	; 1
    264e:	48 83       	st	Y, r20
    2650:	59 83       	std	Y+1, r21	; 0x01
    2652:	6a 83       	std	Y+2, r22	; 0x02
    2654:	7b 83       	std	Y+3, r23	; 0x03
    2656:	11 23       	and	r17, r17
    2658:	41 f0       	breq	.+16     	; 0x266a <xTaskDelayUntil+0xa6>
    265a:	cb 01       	movw	r24, r22
    265c:	ba 01       	movw	r22, r20
    265e:	68 19       	sub	r22, r8
    2660:	79 09       	sbc	r23, r9
    2662:	8a 09       	sbc	r24, r10
    2664:	9b 09       	sbc	r25, r11
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	6b dc       	rcall	.-1834   	; 0x1f40 <prvAddCurrentTaskToDelayedList>
    266a:	d0 de       	rcall	.-608    	; 0x240c <xTaskResumeAll>
    266c:	81 11       	cpse	r24, r1
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <xTaskDelayUntil+0xb0>
    2670:	0e 94 9a 06 	call	0xd34	; 0xd34 <vPortYield>
    2674:	81 2f       	mov	r24, r17
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	1f 91       	pop	r17
    267c:	ff 90       	pop	r15
    267e:	ef 90       	pop	r14
    2680:	df 90       	pop	r13
    2682:	cf 90       	pop	r12
    2684:	bf 90       	pop	r11
    2686:	af 90       	pop	r10
    2688:	9f 90       	pop	r9
    268a:	8f 90       	pop	r8
    268c:	08 95       	ret

0000268e <vTaskDelay>:
    268e:	cf 92       	push	r12
    2690:	df 92       	push	r13
    2692:	ef 92       	push	r14
    2694:	ff 92       	push	r15
    2696:	6b 01       	movw	r12, r22
    2698:	7c 01       	movw	r14, r24
    269a:	67 2b       	or	r22, r23
    269c:	68 2b       	or	r22, r24
    269e:	69 2b       	or	r22, r25
    26a0:	39 f0       	breq	.+14     	; 0x26b0 <vTaskDelay+0x22>
    26a2:	74 dd       	rcall	.-1304   	; 0x218c <vTaskSuspendAll>
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	c7 01       	movw	r24, r14
    26a8:	b6 01       	movw	r22, r12
    26aa:	4a dc       	rcall	.-1900   	; 0x1f40 <prvAddCurrentTaskToDelayedList>
    26ac:	af de       	rcall	.-674    	; 0x240c <xTaskResumeAll>
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <vTaskDelay+0x24>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	81 11       	cpse	r24, r1
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <vTaskDelay+0x2c>
    26b6:	0e 94 9a 06 	call	0xd34	; 0xd34 <vPortYield>
    26ba:	ff 90       	pop	r15
    26bc:	ef 90       	pop	r14
    26be:	df 90       	pop	r13
    26c0:	cf 90       	pop	r12
    26c2:	08 95       	ret

000026c4 <vTaskSwitchContext>:
    26c4:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    26c8:	88 23       	and	r24, r24
    26ca:	21 f0       	breq	.+8      	; 0x26d4 <vTaskSwitchContext+0x10>
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    26d2:	08 95       	ret
    26d4:	10 92 19 17 	sts	0x1719, r1	; 0x801719 <xYieldPending>
    26d8:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    26dc:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    26e0:	20 81       	ld	r18, Z
    26e2:	31 81       	ldd	r19, Z+1	; 0x01
    26e4:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    26e8:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    26ec:	83 8d       	ldd	r24, Z+27	; 0x1b
    26ee:	94 8d       	ldd	r25, Z+28	; 0x1c
    26f0:	82 17       	cp	r24, r18
    26f2:	93 07       	cpc	r25, r19
    26f4:	60 f0       	brcs	.+24     	; 0x270e <vTaskSwitchContext+0x4a>
    26f6:	60 91 cf 17 	lds	r22, 0x17CF	; 0x8017cf <pxCurrentTCB>
    26fa:	70 91 d0 17 	lds	r23, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    26fe:	63 5e       	subi	r22, 0xE3	; 227
    2700:	7f 4f       	sbci	r23, 0xFF	; 255
    2702:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2706:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    270a:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <vApplicationStackOverflowHook>
    270e:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <vTaskSwitchContext+0x52>
    2714:	81 50       	subi	r24, 0x01	; 1
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	9b e0       	ldi	r25, 0x0B	; 11
    271c:	92 9f       	mul	r25, r18
    271e:	f0 01       	movw	r30, r0
    2720:	93 9f       	mul	r25, r19
    2722:	f0 0d       	add	r31, r0
    2724:	11 24       	eor	r1, r1
    2726:	ef 59       	subi	r30, 0x9F	; 159
    2728:	f8 4e       	sbci	r31, 0xE8	; 232
    272a:	90 81       	ld	r25, Z
    272c:	99 23       	and	r25, r25
    272e:	91 f3       	breq	.-28     	; 0x2714 <vTaskSwitchContext+0x50>
    2730:	9b e0       	ldi	r25, 0x0B	; 11
    2732:	92 9f       	mul	r25, r18
    2734:	a0 01       	movw	r20, r0
    2736:	93 9f       	mul	r25, r19
    2738:	50 0d       	add	r21, r0
    273a:	11 24       	eor	r1, r1
    273c:	df 01       	movw	r26, r30
    273e:	01 80       	ldd	r0, Z+1	; 0x01
    2740:	f2 81       	ldd	r31, Z+2	; 0x02
    2742:	e0 2d       	mov	r30, r0
    2744:	04 80       	ldd	r0, Z+4	; 0x04
    2746:	f5 81       	ldd	r31, Z+5	; 0x05
    2748:	e0 2d       	mov	r30, r0
    274a:	12 96       	adiw	r26, 0x02	; 2
    274c:	fc 93       	st	X, r31
    274e:	ee 93       	st	-X, r30
    2750:	11 97       	sbiw	r26, 0x01	; 1
    2752:	4c 59       	subi	r20, 0x9C	; 156
    2754:	58 4e       	sbci	r21, 0xE8	; 232
    2756:	e4 17       	cp	r30, r20
    2758:	f5 07       	cpc	r31, r21
    275a:	29 f4       	brne	.+10     	; 0x2766 <vTaskSwitchContext+0xa2>
    275c:	44 81       	ldd	r20, Z+4	; 0x04
    275e:	55 81       	ldd	r21, Z+5	; 0x05
    2760:	fd 01       	movw	r30, r26
    2762:	52 83       	std	Z+2, r21	; 0x02
    2764:	41 83       	std	Z+1, r20	; 0x01
    2766:	9b e0       	ldi	r25, 0x0B	; 11
    2768:	92 9f       	mul	r25, r18
    276a:	f0 01       	movw	r30, r0
    276c:	93 9f       	mul	r25, r19
    276e:	f0 0d       	add	r31, r0
    2770:	11 24       	eor	r1, r1
    2772:	ef 59       	subi	r30, 0x9F	; 159
    2774:	f8 4e       	sbci	r31, 0xE8	; 232
    2776:	01 80       	ldd	r0, Z+1	; 0x01
    2778:	f2 81       	ldd	r31, Z+2	; 0x02
    277a:	e0 2d       	mov	r30, r0
    277c:	20 85       	ldd	r18, Z+8	; 0x08
    277e:	31 85       	ldd	r19, Z+9	; 0x09
    2780:	30 93 d0 17 	sts	0x17D0, r19	; 0x8017d0 <pxCurrentTCB+0x1>
    2784:	20 93 cf 17 	sts	0x17CF, r18	; 0x8017cf <pxCurrentTCB>
    2788:	80 93 1f 17 	sts	0x171F, r24	; 0x80171f <uxTopReadyPriority>
    278c:	08 95       	ret

0000278e <vTaskPlaceOnEventList>:
    278e:	cf 92       	push	r12
    2790:	df 92       	push	r13
    2792:	ef 92       	push	r14
    2794:	ff 92       	push	r15
    2796:	6a 01       	movw	r12, r20
    2798:	7b 01       	movw	r14, r22
    279a:	60 91 cf 17 	lds	r22, 0x17CF	; 0x8017cf <pxCurrentTCB>
    279e:	70 91 d0 17 	lds	r23, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    27a2:	62 5f       	subi	r22, 0xF2	; 242
    27a4:	7f 4f       	sbci	r23, 0xFF	; 255
    27a6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vListInsert>
    27aa:	41 e0       	ldi	r20, 0x01	; 1
    27ac:	c7 01       	movw	r24, r14
    27ae:	b6 01       	movw	r22, r12
    27b0:	c7 db       	rcall	.-2162   	; 0x1f40 <prvAddCurrentTaskToDelayedList>
    27b2:	ff 90       	pop	r15
    27b4:	ef 90       	pop	r14
    27b6:	df 90       	pop	r13
    27b8:	cf 90       	pop	r12
    27ba:	08 95       	ret

000027bc <vTaskPlaceOnUnorderedEventList>:
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
    27c4:	fc 01       	movw	r30, r24
    27c6:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    27ca:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    27ce:	70 68       	ori	r23, 0x80	; 128
    27d0:	1e 96       	adiw	r26, 0x0e	; 14
    27d2:	4d 93       	st	X+, r20
    27d4:	5d 93       	st	X+, r21
    27d6:	6d 93       	st	X+, r22
    27d8:	7c 93       	st	X, r23
    27da:	51 97       	sbiw	r26, 0x11	; 17
    27dc:	a1 81       	ldd	r26, Z+1	; 0x01
    27de:	b2 81       	ldd	r27, Z+2	; 0x02
    27e0:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    27e4:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    27e8:	bb 8b       	std	Y+19, r27	; 0x13
    27ea:	aa 8b       	std	Y+18, r26	; 0x12
    27ec:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    27f0:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    27f4:	16 96       	adiw	r26, 0x06	; 6
    27f6:	8d 91       	ld	r24, X+
    27f8:	9c 91       	ld	r25, X
    27fa:	17 97       	sbiw	r26, 0x07	; 7
    27fc:	9d 8b       	std	Y+21, r25	; 0x15
    27fe:	8c 8b       	std	Y+20, r24	; 0x14
    2800:	16 96       	adiw	r26, 0x06	; 6
    2802:	cd 91       	ld	r28, X+
    2804:	dc 91       	ld	r29, X
    2806:	17 97       	sbiw	r26, 0x07	; 7
    2808:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    280c:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2810:	0e 96       	adiw	r24, 0x0e	; 14
    2812:	9d 83       	std	Y+5, r25	; 0x05
    2814:	8c 83       	std	Y+4, r24	; 0x04
    2816:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    281a:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    281e:	0e 96       	adiw	r24, 0x0e	; 14
    2820:	17 96       	adiw	r26, 0x07	; 7
    2822:	9c 93       	st	X, r25
    2824:	8e 93       	st	-X, r24
    2826:	16 97       	sbiw	r26, 0x06	; 6
    2828:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    282c:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2830:	59 96       	adiw	r26, 0x19	; 25
    2832:	fc 93       	st	X, r31
    2834:	ee 93       	st	-X, r30
    2836:	58 97       	sbiw	r26, 0x18	; 24
    2838:	80 81       	ld	r24, Z
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	80 83       	st	Z, r24
    283e:	41 e0       	ldi	r20, 0x01	; 1
    2840:	c9 01       	movw	r24, r18
    2842:	b8 01       	movw	r22, r16
    2844:	7d db       	rcall	.-2310   	; 0x1f40 <prvAddCurrentTaskToDelayedList>
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	08 95       	ret

00002850 <vTaskPlaceOnEventListRestricted>:
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	fc 01       	movw	r30, r24
    2856:	cb 01       	movw	r24, r22
    2858:	ba 01       	movw	r22, r20
    285a:	a1 81       	ldd	r26, Z+1	; 0x01
    285c:	b2 81       	ldd	r27, Z+2	; 0x02
    285e:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2862:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2866:	bb 8b       	std	Y+19, r27	; 0x13
    2868:	aa 8b       	std	Y+18, r26	; 0x12
    286a:	c0 91 cf 17 	lds	r28, 0x17CF	; 0x8017cf <pxCurrentTCB>
    286e:	d0 91 d0 17 	lds	r29, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2872:	16 96       	adiw	r26, 0x06	; 6
    2874:	4d 91       	ld	r20, X+
    2876:	5c 91       	ld	r21, X
    2878:	17 97       	sbiw	r26, 0x07	; 7
    287a:	5d 8b       	std	Y+21, r21	; 0x15
    287c:	4c 8b       	std	Y+20, r20	; 0x14
    287e:	16 96       	adiw	r26, 0x06	; 6
    2880:	cd 91       	ld	r28, X+
    2882:	dc 91       	ld	r29, X
    2884:	17 97       	sbiw	r26, 0x07	; 7
    2886:	40 91 cf 17 	lds	r20, 0x17CF	; 0x8017cf <pxCurrentTCB>
    288a:	50 91 d0 17 	lds	r21, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    288e:	42 5f       	subi	r20, 0xF2	; 242
    2890:	5f 4f       	sbci	r21, 0xFF	; 255
    2892:	5d 83       	std	Y+5, r21	; 0x05
    2894:	4c 83       	std	Y+4, r20	; 0x04
    2896:	40 91 cf 17 	lds	r20, 0x17CF	; 0x8017cf <pxCurrentTCB>
    289a:	50 91 d0 17 	lds	r21, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    289e:	42 5f       	subi	r20, 0xF2	; 242
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	17 96       	adiw	r26, 0x07	; 7
    28a4:	5c 93       	st	X, r21
    28a6:	4e 93       	st	-X, r20
    28a8:	16 97       	sbiw	r26, 0x06	; 6
    28aa:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    28ae:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    28b2:	59 96       	adiw	r26, 0x19	; 25
    28b4:	fc 93       	st	X, r31
    28b6:	ee 93       	st	-X, r30
    28b8:	58 97       	sbiw	r26, 0x18	; 24
    28ba:	30 81       	ld	r19, Z
    28bc:	3f 5f       	subi	r19, 0xFF	; 255
    28be:	30 83       	st	Z, r19
    28c0:	22 23       	and	r18, r18
    28c2:	19 f0       	breq	.+6      	; 0x28ca <vTaskPlaceOnEventListRestricted+0x7a>
    28c4:	6f ef       	ldi	r22, 0xFF	; 255
    28c6:	7f ef       	ldi	r23, 0xFF	; 255
    28c8:	cb 01       	movw	r24, r22
    28ca:	42 2f       	mov	r20, r18
    28cc:	39 db       	rcall	.-2446   	; 0x1f40 <prvAddCurrentTaskToDelayedList>
    28ce:	df 91       	pop	r29
    28d0:	cf 91       	pop	r28
    28d2:	08 95       	ret

000028d4 <xTaskRemoveFromEventList>:
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	dc 01       	movw	r26, r24
    28da:	17 96       	adiw	r26, 0x07	; 7
    28dc:	ed 91       	ld	r30, X+
    28de:	fc 91       	ld	r31, X
    28e0:	18 97       	sbiw	r26, 0x08	; 8
    28e2:	00 84       	ldd	r0, Z+8	; 0x08
    28e4:	f1 85       	ldd	r31, Z+9	; 0x09
    28e6:	e0 2d       	mov	r30, r0
    28e8:	a0 8d       	ldd	r26, Z+24	; 0x18
    28ea:	b1 8d       	ldd	r27, Z+25	; 0x19
    28ec:	c2 89       	ldd	r28, Z+18	; 0x12
    28ee:	d3 89       	ldd	r29, Z+19	; 0x13
    28f0:	84 89       	ldd	r24, Z+20	; 0x14
    28f2:	95 89       	ldd	r25, Z+21	; 0x15
    28f4:	9f 83       	std	Y+7, r25	; 0x07
    28f6:	8e 83       	std	Y+6, r24	; 0x06
    28f8:	c4 89       	ldd	r28, Z+20	; 0x14
    28fa:	d5 89       	ldd	r29, Z+21	; 0x15
    28fc:	82 89       	ldd	r24, Z+18	; 0x12
    28fe:	93 89       	ldd	r25, Z+19	; 0x13
    2900:	9d 83       	std	Y+5, r25	; 0x05
    2902:	8c 83       	std	Y+4, r24	; 0x04
    2904:	11 96       	adiw	r26, 0x01	; 1
    2906:	8d 91       	ld	r24, X+
    2908:	9c 91       	ld	r25, X
    290a:	12 97       	sbiw	r26, 0x02	; 2
    290c:	9f 01       	movw	r18, r30
    290e:	22 5f       	subi	r18, 0xF2	; 242
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	82 17       	cp	r24, r18
    2914:	93 07       	cpc	r25, r19
    2916:	31 f4       	brne	.+12     	; 0x2924 <xTaskRemoveFromEventList+0x50>
    2918:	84 89       	ldd	r24, Z+20	; 0x14
    291a:	95 89       	ldd	r25, Z+21	; 0x15
    291c:	12 96       	adiw	r26, 0x02	; 2
    291e:	9c 93       	st	X, r25
    2920:	8e 93       	st	-X, r24
    2922:	11 97       	sbiw	r26, 0x01	; 1
    2924:	11 8e       	std	Z+25, r1	; 0x19
    2926:	10 8e       	std	Z+24, r1	; 0x18
    2928:	8c 91       	ld	r24, X
    292a:	81 50       	subi	r24, 0x01	; 1
    292c:	8c 93       	st	X, r24
    292e:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    2932:	81 11       	cpse	r24, r1
    2934:	52 c0       	rjmp	.+164    	; 0x29da <xTaskRemoveFromEventList+0x106>
    2936:	a4 85       	ldd	r26, Z+12	; 0x0c
    2938:	b5 85       	ldd	r27, Z+13	; 0x0d
    293a:	c6 81       	ldd	r28, Z+6	; 0x06
    293c:	d7 81       	ldd	r29, Z+7	; 0x07
    293e:	80 85       	ldd	r24, Z+8	; 0x08
    2940:	91 85       	ldd	r25, Z+9	; 0x09
    2942:	9f 83       	std	Y+7, r25	; 0x07
    2944:	8e 83       	std	Y+6, r24	; 0x06
    2946:	c0 85       	ldd	r28, Z+8	; 0x08
    2948:	d1 85       	ldd	r29, Z+9	; 0x09
    294a:	86 81       	ldd	r24, Z+6	; 0x06
    294c:	97 81       	ldd	r25, Z+7	; 0x07
    294e:	9d 83       	std	Y+5, r25	; 0x05
    2950:	8c 83       	std	Y+4, r24	; 0x04
    2952:	11 96       	adiw	r26, 0x01	; 1
    2954:	8d 91       	ld	r24, X+
    2956:	9c 91       	ld	r25, X
    2958:	12 97       	sbiw	r26, 0x02	; 2
    295a:	9f 01       	movw	r18, r30
    295c:	2e 5f       	subi	r18, 0xFE	; 254
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	82 17       	cp	r24, r18
    2962:	93 07       	cpc	r25, r19
    2964:	31 f4       	brne	.+12     	; 0x2972 <xTaskRemoveFromEventList+0x9e>
    2966:	80 85       	ldd	r24, Z+8	; 0x08
    2968:	91 85       	ldd	r25, Z+9	; 0x09
    296a:	12 96       	adiw	r26, 0x02	; 2
    296c:	9c 93       	st	X, r25
    296e:	8e 93       	st	-X, r24
    2970:	11 97       	sbiw	r26, 0x01	; 1
    2972:	15 86       	std	Z+13, r1	; 0x0d
    2974:	14 86       	std	Z+12, r1	; 0x0c
    2976:	8c 91       	ld	r24, X
    2978:	81 50       	subi	r24, 0x01	; 1
    297a:	8c 93       	st	X, r24
    297c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    297e:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2982:	8a 17       	cp	r24, r26
    2984:	10 f4       	brcc	.+4      	; 0x298a <xTaskRemoveFromEventList+0xb6>
    2986:	a0 93 1f 17 	sts	0x171F, r26	; 0x80171f <uxTopReadyPriority>
    298a:	8b e0       	ldi	r24, 0x0B	; 11
    298c:	8a 9f       	mul	r24, r26
    298e:	d0 01       	movw	r26, r0
    2990:	11 24       	eor	r1, r1
    2992:	af 59       	subi	r26, 0x9F	; 159
    2994:	b8 4e       	sbci	r27, 0xE8	; 232
    2996:	11 96       	adiw	r26, 0x01	; 1
    2998:	0d 90       	ld	r0, X+
    299a:	bc 91       	ld	r27, X
    299c:	a0 2d       	mov	r26, r0
    299e:	b7 83       	std	Z+7, r27	; 0x07
    29a0:	a6 83       	std	Z+6, r26	; 0x06
    29a2:	16 96       	adiw	r26, 0x06	; 6
    29a4:	4d 91       	ld	r20, X+
    29a6:	5c 91       	ld	r21, X
    29a8:	17 97       	sbiw	r26, 0x07	; 7
    29aa:	51 87       	std	Z+9, r21	; 0x09
    29ac:	40 87       	std	Z+8, r20	; 0x08
    29ae:	16 96       	adiw	r26, 0x06	; 6
    29b0:	cd 91       	ld	r28, X+
    29b2:	dc 91       	ld	r29, X
    29b4:	17 97       	sbiw	r26, 0x07	; 7
    29b6:	3d 83       	std	Y+5, r19	; 0x05
    29b8:	2c 83       	std	Y+4, r18	; 0x04
    29ba:	17 96       	adiw	r26, 0x07	; 7
    29bc:	3c 93       	st	X, r19
    29be:	2e 93       	st	-X, r18
    29c0:	16 97       	sbiw	r26, 0x06	; 6
    29c2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    29c4:	8a 9f       	mul	r24, r26
    29c6:	d0 01       	movw	r26, r0
    29c8:	11 24       	eor	r1, r1
    29ca:	af 59       	subi	r26, 0x9F	; 159
    29cc:	b8 4e       	sbci	r27, 0xE8	; 232
    29ce:	b5 87       	std	Z+13, r27	; 0x0d
    29d0:	a4 87       	std	Z+12, r26	; 0x0c
    29d2:	8c 91       	ld	r24, X
    29d4:	8f 5f       	subi	r24, 0xFF	; 255
    29d6:	8c 93       	st	X, r24
    29d8:	1c c0       	rjmp	.+56     	; 0x2a12 <xTaskRemoveFromEventList+0x13e>
    29da:	4c e3       	ldi	r20, 0x3C	; 60
    29dc:	57 e1       	ldi	r21, 0x17	; 23
    29de:	da 01       	movw	r26, r20
    29e0:	11 96       	adiw	r26, 0x01	; 1
    29e2:	cd 91       	ld	r28, X+
    29e4:	dc 91       	ld	r29, X
    29e6:	12 97       	sbiw	r26, 0x02	; 2
    29e8:	d3 8b       	std	Z+19, r29	; 0x13
    29ea:	c2 8b       	std	Z+18, r28	; 0x12
    29ec:	8e 81       	ldd	r24, Y+6	; 0x06
    29ee:	9f 81       	ldd	r25, Y+7	; 0x07
    29f0:	95 8b       	std	Z+21, r25	; 0x15
    29f2:	84 8b       	std	Z+20, r24	; 0x14
    29f4:	8e 81       	ldd	r24, Y+6	; 0x06
    29f6:	9f 81       	ldd	r25, Y+7	; 0x07
    29f8:	dc 01       	movw	r26, r24
    29fa:	15 96       	adiw	r26, 0x05	; 5
    29fc:	3c 93       	st	X, r19
    29fe:	2e 93       	st	-X, r18
    2a00:	14 97       	sbiw	r26, 0x04	; 4
    2a02:	3f 83       	std	Y+7, r19	; 0x07
    2a04:	2e 83       	std	Y+6, r18	; 0x06
    2a06:	51 8f       	std	Z+25, r21	; 0x19
    2a08:	40 8f       	std	Z+24, r20	; 0x18
    2a0a:	da 01       	movw	r26, r20
    2a0c:	8c 91       	ld	r24, X
    2a0e:	8f 5f       	subi	r24, 0xFF	; 255
    2a10:	8c 93       	st	X, r24
    2a12:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a14:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2a18:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2a1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a1e:	89 17       	cp	r24, r25
    2a20:	20 f4       	brcc	.+8      	; 0x2a2a <xTaskRemoveFromEventList+0x156>
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    2a28:	01 c0       	rjmp	.+2      	; 0x2a2c <xTaskRemoveFromEventList+0x158>
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	08 95       	ret

00002a32 <vTaskRemoveFromUnorderedEventList>:
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	dc 01       	movw	r26, r24
    2a38:	70 68       	ori	r23, 0x80	; 128
    2a3a:	4d 93       	st	X+, r20
    2a3c:	5d 93       	st	X+, r21
    2a3e:	6d 93       	st	X+, r22
    2a40:	7c 93       	st	X, r23
    2a42:	13 97       	sbiw	r26, 0x03	; 3
    2a44:	18 96       	adiw	r26, 0x08	; 8
    2a46:	ed 91       	ld	r30, X+
    2a48:	fc 91       	ld	r31, X
    2a4a:	19 97       	sbiw	r26, 0x09	; 9
    2a4c:	1a 96       	adiw	r26, 0x0a	; 10
    2a4e:	4d 91       	ld	r20, X+
    2a50:	5c 91       	ld	r21, X
    2a52:	1b 97       	sbiw	r26, 0x0b	; 11
    2a54:	14 96       	adiw	r26, 0x04	; 4
    2a56:	8d 91       	ld	r24, X+
    2a58:	9c 91       	ld	r25, X
    2a5a:	15 97       	sbiw	r26, 0x05	; 5
    2a5c:	16 96       	adiw	r26, 0x06	; 6
    2a5e:	2d 91       	ld	r18, X+
    2a60:	3c 91       	ld	r19, X
    2a62:	17 97       	sbiw	r26, 0x07	; 7
    2a64:	ec 01       	movw	r28, r24
    2a66:	3f 83       	std	Y+7, r19	; 0x07
    2a68:	2e 83       	std	Y+6, r18	; 0x06
    2a6a:	16 96       	adiw	r26, 0x06	; 6
    2a6c:	8d 91       	ld	r24, X+
    2a6e:	9c 91       	ld	r25, X
    2a70:	17 97       	sbiw	r26, 0x07	; 7
    2a72:	14 96       	adiw	r26, 0x04	; 4
    2a74:	2d 91       	ld	r18, X+
    2a76:	3c 91       	ld	r19, X
    2a78:	15 97       	sbiw	r26, 0x05	; 5
    2a7a:	ec 01       	movw	r28, r24
    2a7c:	3d 83       	std	Y+5, r19	; 0x05
    2a7e:	2c 83       	std	Y+4, r18	; 0x04
    2a80:	ea 01       	movw	r28, r20
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	a8 17       	cp	r26, r24
    2a88:	b9 07       	cpc	r27, r25
    2a8a:	31 f4       	brne	.+12     	; 0x2a98 <vTaskRemoveFromUnorderedEventList+0x66>
    2a8c:	16 96       	adiw	r26, 0x06	; 6
    2a8e:	8d 91       	ld	r24, X+
    2a90:	9c 91       	ld	r25, X
    2a92:	17 97       	sbiw	r26, 0x07	; 7
    2a94:	9a 83       	std	Y+2, r25	; 0x02
    2a96:	89 83       	std	Y+1, r24	; 0x01
    2a98:	1b 96       	adiw	r26, 0x0b	; 11
    2a9a:	1c 92       	st	X, r1
    2a9c:	1e 92       	st	-X, r1
    2a9e:	1a 97       	sbiw	r26, 0x0a	; 10
    2aa0:	da 01       	movw	r26, r20
    2aa2:	8c 91       	ld	r24, X
    2aa4:	81 50       	subi	r24, 0x01	; 1
    2aa6:	8c 93       	st	X, r24
    2aa8:	a4 85       	ldd	r26, Z+12	; 0x0c
    2aaa:	b5 85       	ldd	r27, Z+13	; 0x0d
    2aac:	c6 81       	ldd	r28, Z+6	; 0x06
    2aae:	d7 81       	ldd	r29, Z+7	; 0x07
    2ab0:	80 85       	ldd	r24, Z+8	; 0x08
    2ab2:	91 85       	ldd	r25, Z+9	; 0x09
    2ab4:	9f 83       	std	Y+7, r25	; 0x07
    2ab6:	8e 83       	std	Y+6, r24	; 0x06
    2ab8:	c0 85       	ldd	r28, Z+8	; 0x08
    2aba:	d1 85       	ldd	r29, Z+9	; 0x09
    2abc:	86 81       	ldd	r24, Z+6	; 0x06
    2abe:	97 81       	ldd	r25, Z+7	; 0x07
    2ac0:	9d 83       	std	Y+5, r25	; 0x05
    2ac2:	8c 83       	std	Y+4, r24	; 0x04
    2ac4:	11 96       	adiw	r26, 0x01	; 1
    2ac6:	8d 91       	ld	r24, X+
    2ac8:	9c 91       	ld	r25, X
    2aca:	12 97       	sbiw	r26, 0x02	; 2
    2acc:	9f 01       	movw	r18, r30
    2ace:	2e 5f       	subi	r18, 0xFE	; 254
    2ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad2:	82 17       	cp	r24, r18
    2ad4:	93 07       	cpc	r25, r19
    2ad6:	31 f4       	brne	.+12     	; 0x2ae4 <vTaskRemoveFromUnorderedEventList+0xb2>
    2ad8:	80 85       	ldd	r24, Z+8	; 0x08
    2ada:	91 85       	ldd	r25, Z+9	; 0x09
    2adc:	12 96       	adiw	r26, 0x02	; 2
    2ade:	9c 93       	st	X, r25
    2ae0:	8e 93       	st	-X, r24
    2ae2:	11 97       	sbiw	r26, 0x01	; 1
    2ae4:	15 86       	std	Z+13, r1	; 0x0d
    2ae6:	14 86       	std	Z+12, r1	; 0x0c
    2ae8:	8c 91       	ld	r24, X
    2aea:	81 50       	subi	r24, 0x01	; 1
    2aec:	8c 93       	st	X, r24
    2aee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2af0:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2af4:	8a 17       	cp	r24, r26
    2af6:	10 f4       	brcc	.+4      	; 0x2afc <vTaskRemoveFromUnorderedEventList+0xca>
    2af8:	a0 93 1f 17 	sts	0x171F, r26	; 0x80171f <uxTopReadyPriority>
    2afc:	8b e0       	ldi	r24, 0x0B	; 11
    2afe:	8a 9f       	mul	r24, r26
    2b00:	d0 01       	movw	r26, r0
    2b02:	11 24       	eor	r1, r1
    2b04:	af 59       	subi	r26, 0x9F	; 159
    2b06:	b8 4e       	sbci	r27, 0xE8	; 232
    2b08:	11 96       	adiw	r26, 0x01	; 1
    2b0a:	0d 90       	ld	r0, X+
    2b0c:	bc 91       	ld	r27, X
    2b0e:	a0 2d       	mov	r26, r0
    2b10:	b7 83       	std	Z+7, r27	; 0x07
    2b12:	a6 83       	std	Z+6, r26	; 0x06
    2b14:	16 96       	adiw	r26, 0x06	; 6
    2b16:	4d 91       	ld	r20, X+
    2b18:	5c 91       	ld	r21, X
    2b1a:	17 97       	sbiw	r26, 0x07	; 7
    2b1c:	51 87       	std	Z+9, r21	; 0x09
    2b1e:	40 87       	std	Z+8, r20	; 0x08
    2b20:	16 96       	adiw	r26, 0x06	; 6
    2b22:	cd 91       	ld	r28, X+
    2b24:	dc 91       	ld	r29, X
    2b26:	17 97       	sbiw	r26, 0x07	; 7
    2b28:	3d 83       	std	Y+5, r19	; 0x05
    2b2a:	2c 83       	std	Y+4, r18	; 0x04
    2b2c:	17 96       	adiw	r26, 0x07	; 7
    2b2e:	3c 93       	st	X, r19
    2b30:	2e 93       	st	-X, r18
    2b32:	16 97       	sbiw	r26, 0x06	; 6
    2b34:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b36:	8a 9f       	mul	r24, r26
    2b38:	d0 01       	movw	r26, r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	af 59       	subi	r26, 0x9F	; 159
    2b3e:	b8 4e       	sbci	r27, 0xE8	; 232
    2b40:	b5 87       	std	Z+13, r27	; 0x0d
    2b42:	a4 87       	std	Z+12, r26	; 0x0c
    2b44:	8c 91       	ld	r24, X
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	8c 93       	st	X, r24
    2b4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b4c:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2b50:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2b54:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b56:	89 17       	cp	r24, r25
    2b58:	18 f4       	brcc	.+6      	; 0x2b60 <vTaskRemoveFromUnorderedEventList+0x12e>
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    2b60:	df 91       	pop	r29
    2b62:	cf 91       	pop	r28
    2b64:	08 95       	ret

00002b66 <vTaskSetTimeOutState>:
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	0f 92       	push	r0
    2b6c:	20 91 18 17 	lds	r18, 0x1718	; 0x801718 <xNumOfOverflows>
    2b70:	fc 01       	movw	r30, r24
    2b72:	20 83       	st	Z, r18
    2b74:	40 91 20 17 	lds	r20, 0x1720	; 0x801720 <xTickCount>
    2b78:	50 91 21 17 	lds	r21, 0x1721	; 0x801721 <xTickCount+0x1>
    2b7c:	60 91 22 17 	lds	r22, 0x1722	; 0x801722 <xTickCount+0x2>
    2b80:	70 91 23 17 	lds	r23, 0x1723	; 0x801723 <xTickCount+0x3>
    2b84:	41 83       	std	Z+1, r20	; 0x01
    2b86:	52 83       	std	Z+2, r21	; 0x02
    2b88:	63 83       	std	Z+3, r22	; 0x03
    2b8a:	74 83       	std	Z+4, r23	; 0x04
    2b8c:	0f 90       	pop	r0
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	08 95       	ret

00002b92 <vTaskInternalSetTimeOutState>:
    2b92:	20 91 18 17 	lds	r18, 0x1718	; 0x801718 <xNumOfOverflows>
    2b96:	fc 01       	movw	r30, r24
    2b98:	20 83       	st	Z, r18
    2b9a:	40 91 20 17 	lds	r20, 0x1720	; 0x801720 <xTickCount>
    2b9e:	50 91 21 17 	lds	r21, 0x1721	; 0x801721 <xTickCount+0x1>
    2ba2:	60 91 22 17 	lds	r22, 0x1722	; 0x801722 <xTickCount+0x2>
    2ba6:	70 91 23 17 	lds	r23, 0x1723	; 0x801723 <xTickCount+0x3>
    2baa:	41 83       	std	Z+1, r20	; 0x01
    2bac:	52 83       	std	Z+2, r21	; 0x02
    2bae:	63 83       	std	Z+3, r22	; 0x03
    2bb0:	74 83       	std	Z+4, r23	; 0x04
    2bb2:	08 95       	ret

00002bb4 <xTaskCheckForTimeOut>:
    2bb4:	8f 92       	push	r8
    2bb6:	9f 92       	push	r9
    2bb8:	af 92       	push	r10
    2bba:	bf 92       	push	r11
    2bbc:	cf 92       	push	r12
    2bbe:	df 92       	push	r13
    2bc0:	ef 92       	push	r14
    2bc2:	ff 92       	push	r15
    2bc4:	0f 93       	push	r16
    2bc6:	1f 93       	push	r17
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	fb 01       	movw	r30, r22
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	0f 92       	push	r0
    2bd4:	c0 90 20 17 	lds	r12, 0x1720	; 0x801720 <xTickCount>
    2bd8:	d0 90 21 17 	lds	r13, 0x1721	; 0x801721 <xTickCount+0x1>
    2bdc:	e0 90 22 17 	lds	r14, 0x1722	; 0x801722 <xTickCount+0x2>
    2be0:	f0 90 23 17 	lds	r15, 0x1723	; 0x801723 <xTickCount+0x3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	11 96       	adiw	r26, 0x01	; 1
    2be8:	0d 91       	ld	r16, X+
    2bea:	1d 91       	ld	r17, X+
    2bec:	2d 91       	ld	r18, X+
    2bee:	3c 91       	ld	r19, X
    2bf0:	14 97       	sbiw	r26, 0x04	; 4
    2bf2:	46 01       	movw	r8, r12
    2bf4:	57 01       	movw	r10, r14
    2bf6:	80 1a       	sub	r8, r16
    2bf8:	91 0a       	sbc	r9, r17
    2bfa:	a2 0a       	sbc	r10, r18
    2bfc:	b3 0a       	sbc	r11, r19
    2bfe:	40 81       	ld	r20, Z
    2c00:	51 81       	ldd	r21, Z+1	; 0x01
    2c02:	62 81       	ldd	r22, Z+2	; 0x02
    2c04:	73 81       	ldd	r23, Z+3	; 0x03
    2c06:	4f 3f       	cpi	r20, 0xFF	; 255
    2c08:	bf ef       	ldi	r27, 0xFF	; 255
    2c0a:	5b 07       	cpc	r21, r27
    2c0c:	6b 07       	cpc	r22, r27
    2c0e:	7b 07       	cpc	r23, r27
    2c10:	39 f1       	breq	.+78     	; 0x2c60 <xTaskCheckForTimeOut+0xac>
    2c12:	ec 01       	movw	r28, r24
    2c14:	b8 81       	ld	r27, Y
    2c16:	a0 91 18 17 	lds	r26, 0x1718	; 0x801718 <xNumOfOverflows>
    2c1a:	ba 17       	cp	r27, r26
    2c1c:	59 f0       	breq	.+22     	; 0x2c34 <xTaskCheckForTimeOut+0x80>
    2c1e:	c0 16       	cp	r12, r16
    2c20:	d1 06       	cpc	r13, r17
    2c22:	e2 06       	cpc	r14, r18
    2c24:	f3 06       	cpc	r15, r19
    2c26:	30 f0       	brcs	.+12     	; 0x2c34 <xTaskCheckForTimeOut+0x80>
    2c28:	10 82       	st	Z, r1
    2c2a:	11 82       	std	Z+1, r1	; 0x01
    2c2c:	12 82       	std	Z+2, r1	; 0x02
    2c2e:	13 82       	std	Z+3, r1	; 0x03
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	17 c0       	rjmp	.+46     	; 0x2c62 <xTaskCheckForTimeOut+0xae>
    2c34:	84 16       	cp	r8, r20
    2c36:	95 06       	cpc	r9, r21
    2c38:	a6 06       	cpc	r10, r22
    2c3a:	b7 06       	cpc	r11, r23
    2c3c:	58 f4       	brcc	.+22     	; 0x2c54 <xTaskCheckForTimeOut+0xa0>
    2c3e:	48 19       	sub	r20, r8
    2c40:	59 09       	sbc	r21, r9
    2c42:	6a 09       	sbc	r22, r10
    2c44:	7b 09       	sbc	r23, r11
    2c46:	40 83       	st	Z, r20
    2c48:	51 83       	std	Z+1, r21	; 0x01
    2c4a:	62 83       	std	Z+2, r22	; 0x02
    2c4c:	73 83       	std	Z+3, r23	; 0x03
    2c4e:	a1 df       	rcall	.-190    	; 0x2b92 <vTaskInternalSetTimeOutState>
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	07 c0       	rjmp	.+14     	; 0x2c62 <xTaskCheckForTimeOut+0xae>
    2c54:	10 82       	st	Z, r1
    2c56:	11 82       	std	Z+1, r1	; 0x01
    2c58:	12 82       	std	Z+2, r1	; 0x02
    2c5a:	13 82       	std	Z+3, r1	; 0x03
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <xTaskCheckForTimeOut+0xae>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	0f 90       	pop	r0
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	bf 90       	pop	r11
    2c78:	af 90       	pop	r10
    2c7a:	9f 90       	pop	r9
    2c7c:	8f 90       	pop	r8
    2c7e:	08 95       	ret

00002c80 <vTaskMissedYield>:
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	80 93 19 17 	sts	0x1719, r24	; 0x801719 <xYieldPending>
    2c86:	08 95       	ret

00002c88 <xTaskGetCurrentTaskHandle>:
    2c88:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2c8c:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2c90:	08 95       	ret

00002c92 <xTaskGetSchedulerState>:
    2c92:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <xSchedulerRunning>
    2c96:	88 23       	and	r24, r24
    2c98:	31 f0       	breq	.+12     	; 0x2ca6 <xTaskGetSchedulerState+0x14>
    2c9a:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <uxSchedulerSuspended>
    2c9e:	81 11       	cpse	r24, r1
    2ca0:	04 c0       	rjmp	.+8      	; 0x2caa <xTaskGetSchedulerState+0x18>
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	08 95       	ret
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	08 95       	ret
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	08 95       	ret

00002cae <xTaskPriorityInherit>:
    2cae:	0f 93       	push	r16
    2cb0:	1f 93       	push	r17
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	89 2b       	or	r24, r25
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <xTaskPriorityInherit+0x10>
    2cbc:	77 c0       	rjmp	.+238    	; 0x2dac <xTaskPriorityInherit+0xfe>
    2cbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cc0:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2cc4:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2cc8:	5a 96       	adiw	r26, 0x1a	; 26
    2cca:	9c 91       	ld	r25, X
    2ccc:	89 17       	cp	r24, r25
    2cce:	08 f0       	brcs	.+2      	; 0x2cd2 <xTaskPriorityInherit+0x24>
    2cd0:	63 c0       	rjmp	.+198    	; 0x2d98 <xTaskPriorityInherit+0xea>
    2cd2:	46 85       	ldd	r20, Z+14	; 0x0e
    2cd4:	57 85       	ldd	r21, Z+15	; 0x0f
    2cd6:	60 89       	ldd	r22, Z+16	; 0x10
    2cd8:	71 89       	ldd	r23, Z+17	; 0x11
    2cda:	77 23       	and	r23, r23
    2cdc:	94 f0       	brlt	.+36     	; 0x2d02 <xTaskPriorityInherit+0x54>
    2cde:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2ce2:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2ce6:	5a 96       	adiw	r26, 0x1a	; 26
    2ce8:	9c 91       	ld	r25, X
    2cea:	4a e0       	ldi	r20, 0x0A	; 10
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	60 e0       	ldi	r22, 0x00	; 0
    2cf0:	70 e0       	ldi	r23, 0x00	; 0
    2cf2:	49 1b       	sub	r20, r25
    2cf4:	51 09       	sbc	r21, r1
    2cf6:	61 09       	sbc	r22, r1
    2cf8:	71 09       	sbc	r23, r1
    2cfa:	46 87       	std	Z+14, r20	; 0x0e
    2cfc:	57 87       	std	Z+15, r21	; 0x0f
    2cfe:	60 8b       	std	Z+16, r22	; 0x10
    2d00:	71 8b       	std	Z+17, r23	; 0x11
    2d02:	24 85       	ldd	r18, Z+12	; 0x0c
    2d04:	35 85       	ldd	r19, Z+13	; 0x0d
    2d06:	4b e0       	ldi	r20, 0x0B	; 11
    2d08:	84 9f       	mul	r24, r20
    2d0a:	c0 01       	movw	r24, r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	8f 59       	subi	r24, 0x9F	; 159
    2d10:	98 4e       	sbci	r25, 0xE8	; 232
    2d12:	28 17       	cp	r18, r24
    2d14:	39 07       	cpc	r19, r25
    2d16:	b9 f5       	brne	.+110    	; 0x2d86 <xTaskPriorityInherit+0xd8>
    2d18:	ef 01       	movw	r28, r30
    2d1a:	8f 01       	movw	r16, r30
    2d1c:	0e 5f       	subi	r16, 0xFE	; 254
    2d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d20:	c8 01       	movw	r24, r16
    2d22:	0e 94 1e 06 	call	0xc3c	; 0xc3c <uxListRemove>
    2d26:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2d2a:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2d2e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2d30:	ea 8f       	std	Y+26, r30	; 0x1a
    2d32:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2d36:	8e 17       	cp	r24, r30
    2d38:	10 f4       	brcc	.+4      	; 0x2d3e <xTaskPriorityInherit+0x90>
    2d3a:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    2d3e:	8b e0       	ldi	r24, 0x0B	; 11
    2d40:	8e 9f       	mul	r24, r30
    2d42:	f0 01       	movw	r30, r0
    2d44:	11 24       	eor	r1, r1
    2d46:	ef 59       	subi	r30, 0x9F	; 159
    2d48:	f8 4e       	sbci	r31, 0xE8	; 232
    2d4a:	01 80       	ldd	r0, Z+1	; 0x01
    2d4c:	f2 81       	ldd	r31, Z+2	; 0x02
    2d4e:	e0 2d       	mov	r30, r0
    2d50:	ff 83       	std	Y+7, r31	; 0x07
    2d52:	ee 83       	std	Y+6, r30	; 0x06
    2d54:	26 81       	ldd	r18, Z+6	; 0x06
    2d56:	37 81       	ldd	r19, Z+7	; 0x07
    2d58:	39 87       	std	Y+9, r19	; 0x09
    2d5a:	28 87       	std	Y+8, r18	; 0x08
    2d5c:	a6 81       	ldd	r26, Z+6	; 0x06
    2d5e:	b7 81       	ldd	r27, Z+7	; 0x07
    2d60:	15 96       	adiw	r26, 0x05	; 5
    2d62:	1c 93       	st	X, r17
    2d64:	0e 93       	st	-X, r16
    2d66:	14 97       	sbiw	r26, 0x04	; 4
    2d68:	17 83       	std	Z+7, r17	; 0x07
    2d6a:	06 83       	std	Z+6, r16	; 0x06
    2d6c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d6e:	8e 9f       	mul	r24, r30
    2d70:	f0 01       	movw	r30, r0
    2d72:	11 24       	eor	r1, r1
    2d74:	ef 59       	subi	r30, 0x9F	; 159
    2d76:	f8 4e       	sbci	r31, 0xE8	; 232
    2d78:	fd 87       	std	Y+13, r31	; 0x0d
    2d7a:	ec 87       	std	Y+12, r30	; 0x0c
    2d7c:	80 81       	ld	r24, Z
    2d7e:	8f 5f       	subi	r24, 0xFF	; 255
    2d80:	80 83       	st	Z, r24
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	16 c0       	rjmp	.+44     	; 0x2db2 <xTaskPriorityInherit+0x104>
    2d86:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2d8a:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2d8e:	5a 96       	adiw	r26, 0x1a	; 26
    2d90:	8c 91       	ld	r24, X
    2d92:	82 8f       	std	Z+26, r24	; 0x1a
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	0d c0       	rjmp	.+26     	; 0x2db2 <xTaskPriorityInherit+0x104>
    2d98:	95 a5       	ldd	r25, Z+45	; 0x2d
    2d9a:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2d9e:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2da2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2da4:	98 17       	cp	r25, r24
    2da6:	20 f0       	brcs	.+8      	; 0x2db0 <xTaskPriorityInherit+0x102>
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	03 c0       	rjmp	.+6      	; 0x2db2 <xTaskPriorityInherit+0x104>
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	01 c0       	rjmp	.+2      	; 0x2db2 <xTaskPriorityInherit+0x104>
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	08 95       	ret

00002dbc <xTaskPriorityDisinherit>:
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	89 2b       	or	r24, r25
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <xTaskPriorityDisinherit+0x10>
    2dca:	49 c0       	rjmp	.+146    	; 0x2e5e <xTaskPriorityDisinherit+0xa2>
    2dcc:	86 a5       	ldd	r24, Z+46	; 0x2e
    2dce:	81 50       	subi	r24, 0x01	; 1
    2dd0:	86 a7       	std	Z+46, r24	; 0x2e
    2dd2:	22 8d       	ldd	r18, Z+26	; 0x1a
    2dd4:	95 a5       	ldd	r25, Z+45	; 0x2d
    2dd6:	29 17       	cp	r18, r25
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <xTaskPriorityDisinherit+0x20>
    2dda:	43 c0       	rjmp	.+134    	; 0x2e62 <xTaskPriorityDisinherit+0xa6>
    2ddc:	81 11       	cpse	r24, r1
    2dde:	43 c0       	rjmp	.+134    	; 0x2e66 <xTaskPriorityDisinherit+0xaa>
    2de0:	ef 01       	movw	r28, r30
    2de2:	8f 01       	movw	r16, r30
    2de4:	0e 5f       	subi	r16, 0xFE	; 254
    2de6:	1f 4f       	sbci	r17, 0xFF	; 255
    2de8:	c8 01       	movw	r24, r16
    2dea:	0e 94 1e 06 	call	0xc3c	; 0xc3c <uxListRemove>
    2dee:	ed a5       	ldd	r30, Y+45	; 0x2d
    2df0:	ea 8f       	std	Y+26, r30	; 0x1a
    2df2:	8a e0       	ldi	r24, 0x0A	; 10
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	a0 e0       	ldi	r26, 0x00	; 0
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	8e 1b       	sub	r24, r30
    2dfc:	91 09       	sbc	r25, r1
    2dfe:	a1 09       	sbc	r26, r1
    2e00:	b1 09       	sbc	r27, r1
    2e02:	8e 87       	std	Y+14, r24	; 0x0e
    2e04:	9f 87       	std	Y+15, r25	; 0x0f
    2e06:	a8 8b       	std	Y+16, r26	; 0x10
    2e08:	b9 8b       	std	Y+17, r27	; 0x11
    2e0a:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2e0e:	8e 17       	cp	r24, r30
    2e10:	10 f4       	brcc	.+4      	; 0x2e16 <xTaskPriorityDisinherit+0x5a>
    2e12:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    2e16:	8b e0       	ldi	r24, 0x0B	; 11
    2e18:	8e 9f       	mul	r24, r30
    2e1a:	f0 01       	movw	r30, r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	ef 59       	subi	r30, 0x9F	; 159
    2e20:	f8 4e       	sbci	r31, 0xE8	; 232
    2e22:	01 80       	ldd	r0, Z+1	; 0x01
    2e24:	f2 81       	ldd	r31, Z+2	; 0x02
    2e26:	e0 2d       	mov	r30, r0
    2e28:	ff 83       	std	Y+7, r31	; 0x07
    2e2a:	ee 83       	std	Y+6, r30	; 0x06
    2e2c:	26 81       	ldd	r18, Z+6	; 0x06
    2e2e:	37 81       	ldd	r19, Z+7	; 0x07
    2e30:	39 87       	std	Y+9, r19	; 0x09
    2e32:	28 87       	std	Y+8, r18	; 0x08
    2e34:	a6 81       	ldd	r26, Z+6	; 0x06
    2e36:	b7 81       	ldd	r27, Z+7	; 0x07
    2e38:	15 96       	adiw	r26, 0x05	; 5
    2e3a:	1c 93       	st	X, r17
    2e3c:	0e 93       	st	-X, r16
    2e3e:	14 97       	sbiw	r26, 0x04	; 4
    2e40:	17 83       	std	Z+7, r17	; 0x07
    2e42:	06 83       	std	Z+6, r16	; 0x06
    2e44:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2e46:	8e 9f       	mul	r24, r30
    2e48:	f0 01       	movw	r30, r0
    2e4a:	11 24       	eor	r1, r1
    2e4c:	ef 59       	subi	r30, 0x9F	; 159
    2e4e:	f8 4e       	sbci	r31, 0xE8	; 232
    2e50:	fd 87       	std	Y+13, r31	; 0x0d
    2e52:	ec 87       	std	Y+12, r30	; 0x0c
    2e54:	80 81       	ld	r24, Z
    2e56:	8f 5f       	subi	r24, 0xFF	; 255
    2e58:	80 83       	st	Z, r24
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	05 c0       	rjmp	.+10     	; 0x2e68 <xTaskPriorityDisinherit+0xac>
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	03 c0       	rjmp	.+6      	; 0x2e68 <xTaskPriorityDisinherit+0xac>
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <xTaskPriorityDisinherit+0xac>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	08 95       	ret

00002e72 <vTaskPriorityDisinheritAfterTimeout>:
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	89 2b       	or	r24, r25
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2e80:	5a c0       	rjmp	.+180    	; 0x2f36 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2e82:	85 a5       	ldd	r24, Z+45	; 0x2d
    2e84:	86 17       	cp	r24, r22
    2e86:	08 f4       	brcc	.+2      	; 0x2e8a <vTaskPriorityDisinheritAfterTimeout+0x18>
    2e88:	86 2f       	mov	r24, r22
    2e8a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e8c:	89 17       	cp	r24, r25
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2e90:	52 c0       	rjmp	.+164    	; 0x2f36 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2e92:	26 a5       	ldd	r18, Z+46	; 0x2e
    2e94:	21 30       	cpi	r18, 0x01	; 1
    2e96:	09 f0       	breq	.+2      	; 0x2e9a <vTaskPriorityDisinheritAfterTimeout+0x28>
    2e98:	4e c0       	rjmp	.+156    	; 0x2f36 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2e9a:	82 8f       	std	Z+26, r24	; 0x1a
    2e9c:	46 85       	ldd	r20, Z+14	; 0x0e
    2e9e:	57 85       	ldd	r21, Z+15	; 0x0f
    2ea0:	60 89       	ldd	r22, Z+16	; 0x10
    2ea2:	71 89       	ldd	r23, Z+17	; 0x11
    2ea4:	77 23       	and	r23, r23
    2ea6:	64 f0       	brlt	.+24     	; 0x2ec0 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2ea8:	4a e0       	ldi	r20, 0x0A	; 10
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	60 e0       	ldi	r22, 0x00	; 0
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	48 1b       	sub	r20, r24
    2eb2:	51 09       	sbc	r21, r1
    2eb4:	61 09       	sbc	r22, r1
    2eb6:	71 09       	sbc	r23, r1
    2eb8:	46 87       	std	Z+14, r20	; 0x0e
    2eba:	57 87       	std	Z+15, r21	; 0x0f
    2ebc:	60 8b       	std	Z+16, r22	; 0x10
    2ebe:	71 8b       	std	Z+17, r23	; 0x11
    2ec0:	24 85       	ldd	r18, Z+12	; 0x0c
    2ec2:	35 85       	ldd	r19, Z+13	; 0x0d
    2ec4:	4b e0       	ldi	r20, 0x0B	; 11
    2ec6:	94 9f       	mul	r25, r20
    2ec8:	c0 01       	movw	r24, r0
    2eca:	11 24       	eor	r1, r1
    2ecc:	8f 59       	subi	r24, 0x9F	; 159
    2ece:	98 4e       	sbci	r25, 0xE8	; 232
    2ed0:	28 17       	cp	r18, r24
    2ed2:	39 07       	cpc	r19, r25
    2ed4:	81 f5       	brne	.+96     	; 0x2f36 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ed6:	ef 01       	movw	r28, r30
    2ed8:	8f 01       	movw	r16, r30
    2eda:	0e 5f       	subi	r16, 0xFE	; 254
    2edc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ede:	c8 01       	movw	r24, r16
    2ee0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <uxListRemove>
    2ee4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ee6:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    2eea:	8e 17       	cp	r24, r30
    2eec:	10 f4       	brcc	.+4      	; 0x2ef2 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2eee:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    2ef2:	8b e0       	ldi	r24, 0x0B	; 11
    2ef4:	8e 9f       	mul	r24, r30
    2ef6:	f0 01       	movw	r30, r0
    2ef8:	11 24       	eor	r1, r1
    2efa:	ef 59       	subi	r30, 0x9F	; 159
    2efc:	f8 4e       	sbci	r31, 0xE8	; 232
    2efe:	01 80       	ldd	r0, Z+1	; 0x01
    2f00:	f2 81       	ldd	r31, Z+2	; 0x02
    2f02:	e0 2d       	mov	r30, r0
    2f04:	ff 83       	std	Y+7, r31	; 0x07
    2f06:	ee 83       	std	Y+6, r30	; 0x06
    2f08:	26 81       	ldd	r18, Z+6	; 0x06
    2f0a:	37 81       	ldd	r19, Z+7	; 0x07
    2f0c:	39 87       	std	Y+9, r19	; 0x09
    2f0e:	28 87       	std	Y+8, r18	; 0x08
    2f10:	a6 81       	ldd	r26, Z+6	; 0x06
    2f12:	b7 81       	ldd	r27, Z+7	; 0x07
    2f14:	15 96       	adiw	r26, 0x05	; 5
    2f16:	1c 93       	st	X, r17
    2f18:	0e 93       	st	-X, r16
    2f1a:	14 97       	sbiw	r26, 0x04	; 4
    2f1c:	17 83       	std	Z+7, r17	; 0x07
    2f1e:	06 83       	std	Z+6, r16	; 0x06
    2f20:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f22:	8e 9f       	mul	r24, r30
    2f24:	f0 01       	movw	r30, r0
    2f26:	11 24       	eor	r1, r1
    2f28:	ef 59       	subi	r30, 0x9F	; 159
    2f2a:	f8 4e       	sbci	r31, 0xE8	; 232
    2f2c:	fd 87       	std	Y+13, r31	; 0x0d
    2f2e:	ec 87       	std	Y+12, r30	; 0x0c
    2f30:	80 81       	ld	r24, Z
    2f32:	8f 5f       	subi	r24, 0xFF	; 255
    2f34:	80 83       	st	Z, r24
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	08 95       	ret

00002f40 <uxTaskResetEventItemValue>:
    2f40:	cf 92       	push	r12
    2f42:	df 92       	push	r13
    2f44:	ef 92       	push	r14
    2f46:	ff 92       	push	r15
    2f48:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2f4c:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2f50:	66 85       	ldd	r22, Z+14	; 0x0e
    2f52:	77 85       	ldd	r23, Z+15	; 0x0f
    2f54:	80 89       	ldd	r24, Z+16	; 0x10
    2f56:	91 89       	ldd	r25, Z+17	; 0x11
    2f58:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2f5c:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2f60:	a0 91 cf 17 	lds	r26, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2f64:	b0 91 d0 17 	lds	r27, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2f68:	5a 96       	adiw	r26, 0x1a	; 26
    2f6a:	2c 91       	ld	r18, X
    2f6c:	0f 2e       	mov	r0, r31
    2f6e:	fa e0       	ldi	r31, 0x0A	; 10
    2f70:	cf 2e       	mov	r12, r31
    2f72:	d1 2c       	mov	r13, r1
    2f74:	e1 2c       	mov	r14, r1
    2f76:	f1 2c       	mov	r15, r1
    2f78:	f0 2d       	mov	r31, r0
    2f7a:	c2 1a       	sub	r12, r18
    2f7c:	d1 08       	sbc	r13, r1
    2f7e:	e1 08       	sbc	r14, r1
    2f80:	f1 08       	sbc	r15, r1
    2f82:	c6 86       	std	Z+14, r12	; 0x0e
    2f84:	d7 86       	std	Z+15, r13	; 0x0f
    2f86:	e0 8a       	std	Z+16, r14	; 0x10
    2f88:	f1 8a       	std	Z+17, r15	; 0x11
    2f8a:	ff 90       	pop	r15
    2f8c:	ef 90       	pop	r14
    2f8e:	df 90       	pop	r13
    2f90:	cf 90       	pop	r12
    2f92:	08 95       	ret

00002f94 <pvTaskIncrementMutexHeldCount>:
    2f94:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2f98:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2f9c:	89 2b       	or	r24, r25
    2f9e:	39 f0       	breq	.+14     	; 0x2fae <pvTaskIncrementMutexHeldCount+0x1a>
    2fa0:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2fa4:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2fa8:	86 a5       	ldd	r24, Z+46	; 0x2e
    2faa:	8f 5f       	subi	r24, 0xFF	; 255
    2fac:	86 a7       	std	Z+46, r24	; 0x2e
    2fae:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2fb2:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2fb6:	08 95       	ret

00002fb8 <xTaskGenericNotifyWait>:
    2fb8:	4f 92       	push	r4
    2fba:	5f 92       	push	r5
    2fbc:	6f 92       	push	r6
    2fbe:	7f 92       	push	r7
    2fc0:	af 92       	push	r10
    2fc2:	bf 92       	push	r11
    2fc4:	cf 92       	push	r12
    2fc6:	df 92       	push	r13
    2fc8:	ef 92       	push	r14
    2fca:	ff 92       	push	r15
    2fcc:	0f 93       	push	r16
    2fce:	1f 93       	push	r17
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	28 01       	movw	r4, r16
    2fd6:	39 01       	movw	r6, r18
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	0f 92       	push	r0
    2fde:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2fe2:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2fe6:	c8 2f       	mov	r28, r24
    2fe8:	d0 e0       	ldi	r29, 0x00	; 0
    2fea:	ec 0f       	add	r30, r28
    2fec:	fd 1f       	adc	r31, r29
    2fee:	83 a9       	ldd	r24, Z+51	; 0x33
    2ff0:	82 30       	cpi	r24, 0x02	; 2
    2ff2:	79 f1       	breq	.+94     	; 0x3052 <xTaskGenericNotifyWait+0x9a>
    2ff4:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    2ff8:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	e8 0f       	add	r30, r24
    3008:	f9 1f       	adc	r31, r25
    300a:	87 a5       	ldd	r24, Z+47	; 0x2f
    300c:	90 a9       	ldd	r25, Z+48	; 0x30
    300e:	a1 a9       	ldd	r26, Z+49	; 0x31
    3010:	b2 a9       	ldd	r27, Z+50	; 0x32
    3012:	40 95       	com	r20
    3014:	50 95       	com	r21
    3016:	60 95       	com	r22
    3018:	70 95       	com	r23
    301a:	48 23       	and	r20, r24
    301c:	59 23       	and	r21, r25
    301e:	6a 23       	and	r22, r26
    3020:	7b 23       	and	r23, r27
    3022:	47 a7       	std	Z+47, r20	; 0x2f
    3024:	50 ab       	std	Z+48, r21	; 0x30
    3026:	61 ab       	std	Z+49, r22	; 0x31
    3028:	72 ab       	std	Z+50, r23	; 0x32
    302a:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    302e:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    3032:	ec 0f       	add	r30, r28
    3034:	fd 1f       	adc	r31, r29
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	83 ab       	std	Z+51, r24	; 0x33
    303a:	a1 14       	cp	r10, r1
    303c:	b1 04       	cpc	r11, r1
    303e:	c1 04       	cpc	r12, r1
    3040:	d1 04       	cpc	r13, r1
    3042:	39 f0       	breq	.+14     	; 0x3052 <xTaskGenericNotifyWait+0x9a>
    3044:	41 e0       	ldi	r20, 0x01	; 1
    3046:	c6 01       	movw	r24, r12
    3048:	b5 01       	movw	r22, r10
    304a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <prvAddCurrentTaskToDelayedList>
    304e:	0e 94 9a 06 	call	0xd34	; 0xd34 <vPortYield>
    3052:	0f 90       	pop	r0
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	0f 92       	push	r0
    305c:	e1 14       	cp	r14, r1
    305e:	f1 04       	cpc	r15, r1
    3060:	a1 f0       	breq	.+40     	; 0x308a <xTaskGenericNotifyWait+0xd2>
    3062:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    3066:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    306a:	ce 01       	movw	r24, r28
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	e8 0f       	add	r30, r24
    3076:	f9 1f       	adc	r31, r25
    3078:	87 a5       	ldd	r24, Z+47	; 0x2f
    307a:	90 a9       	ldd	r25, Z+48	; 0x30
    307c:	a1 a9       	ldd	r26, Z+49	; 0x31
    307e:	b2 a9       	ldd	r27, Z+50	; 0x32
    3080:	f7 01       	movw	r30, r14
    3082:	80 83       	st	Z, r24
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	a2 83       	std	Z+2, r26	; 0x02
    3088:	b3 83       	std	Z+3, r27	; 0x03
    308a:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    308e:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    3092:	ec 0f       	add	r30, r28
    3094:	fd 1f       	adc	r31, r29
    3096:	83 a9       	ldd	r24, Z+51	; 0x33
    3098:	82 30       	cpi	r24, 0x02	; 2
    309a:	e9 f4       	brne	.+58     	; 0x30d6 <xTaskGenericNotifyWait+0x11e>
    309c:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    30a0:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    30a4:	ce 01       	movw	r24, r28
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	88 0f       	add	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	e8 0f       	add	r30, r24
    30b0:	f9 1f       	adc	r31, r25
    30b2:	87 a5       	ldd	r24, Z+47	; 0x2f
    30b4:	90 a9       	ldd	r25, Z+48	; 0x30
    30b6:	a1 a9       	ldd	r26, Z+49	; 0x31
    30b8:	b2 a9       	ldd	r27, Z+50	; 0x32
    30ba:	40 94       	com	r4
    30bc:	50 94       	com	r5
    30be:	60 94       	com	r6
    30c0:	70 94       	com	r7
    30c2:	48 22       	and	r4, r24
    30c4:	59 22       	and	r5, r25
    30c6:	6a 22       	and	r6, r26
    30c8:	7b 22       	and	r7, r27
    30ca:	47 a6       	std	Z+47, r4	; 0x2f
    30cc:	50 aa       	std	Z+48, r5	; 0x30
    30ce:	61 aa       	std	Z+49, r6	; 0x31
    30d0:	72 aa       	std	Z+50, r7	; 0x32
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <xTaskGenericNotifyWait+0x120>
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	20 91 cf 17 	lds	r18, 0x17CF	; 0x8017cf <pxCurrentTCB>
    30dc:	30 91 d0 17 	lds	r19, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    30e0:	c2 0f       	add	r28, r18
    30e2:	d3 1f       	adc	r29, r19
    30e4:	1b aa       	std	Y+51, r1	; 0x33
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	1f 91       	pop	r17
    30f0:	0f 91       	pop	r16
    30f2:	ff 90       	pop	r15
    30f4:	ef 90       	pop	r14
    30f6:	df 90       	pop	r13
    30f8:	cf 90       	pop	r12
    30fa:	bf 90       	pop	r11
    30fc:	af 90       	pop	r10
    30fe:	7f 90       	pop	r7
    3100:	6f 90       	pop	r6
    3102:	5f 90       	pop	r5
    3104:	4f 90       	pop	r4
    3106:	08 95       	ret

00003108 <xTaskGenericNotify>:
    3108:	8f 92       	push	r8
    310a:	9f 92       	push	r9
    310c:	af 92       	push	r10
    310e:	bf 92       	push	r11
    3110:	ef 92       	push	r14
    3112:	ff 92       	push	r15
    3114:	0f 93       	push	r16
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	dc 01       	movw	r26, r24
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	0f 92       	push	r0
    3122:	e1 14       	cp	r14, r1
    3124:	f1 04       	cpc	r15, r1
    3126:	89 f0       	breq	.+34     	; 0x314a <xTaskGenericNotify+0x42>
    3128:	e6 2f       	mov	r30, r22
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	ee 0f       	add	r30, r30
    312e:	ff 1f       	adc	r31, r31
    3130:	ee 0f       	add	r30, r30
    3132:	ff 1f       	adc	r31, r31
    3134:	e8 0f       	add	r30, r24
    3136:	f9 1f       	adc	r31, r25
    3138:	87 a4       	ldd	r8, Z+47	; 0x2f
    313a:	90 a8       	ldd	r9, Z+48	; 0x30
    313c:	a1 a8       	ldd	r10, Z+49	; 0x31
    313e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3140:	f7 01       	movw	r30, r14
    3142:	80 82       	st	Z, r8
    3144:	91 82       	std	Z+1, r9	; 0x01
    3146:	a2 82       	std	Z+2, r10	; 0x02
    3148:	b3 82       	std	Z+3, r11	; 0x03
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	fd 01       	movw	r30, r26
    314e:	e6 0f       	add	r30, r22
    3150:	f7 1f       	adc	r31, r23
    3152:	83 a9       	ldd	r24, Z+51	; 0x33
    3154:	92 e0       	ldi	r25, 0x02	; 2
    3156:	93 ab       	std	Z+51, r25	; 0x33
    3158:	02 30       	cpi	r16, 0x02	; 2
    315a:	01 f1       	breq	.+64     	; 0x319c <xTaskGenericNotify+0x94>
    315c:	18 f4       	brcc	.+6      	; 0x3164 <xTaskGenericNotify+0x5c>
    315e:	01 30       	cpi	r16, 0x01	; 1
    3160:	31 f0       	breq	.+12     	; 0x316e <xTaskGenericNotify+0x66>
    3162:	4d c0       	rjmp	.+154    	; 0x31fe <xTaskGenericNotify+0xf6>
    3164:	03 30       	cpi	r16, 0x03	; 3
    3166:	79 f1       	breq	.+94     	; 0x31c6 <xTaskGenericNotify+0xbe>
    3168:	04 30       	cpi	r16, 0x04	; 4
    316a:	d1 f1       	breq	.+116    	; 0x31e0 <xTaskGenericNotify+0xd8>
    316c:	48 c0       	rjmp	.+144    	; 0x31fe <xTaskGenericNotify+0xf6>
    316e:	66 0f       	add	r22, r22
    3170:	77 1f       	adc	r23, r23
    3172:	66 0f       	add	r22, r22
    3174:	77 1f       	adc	r23, r23
    3176:	fd 01       	movw	r30, r26
    3178:	e6 0f       	add	r30, r22
    317a:	f7 1f       	adc	r31, r23
    317c:	87 a4       	ldd	r8, Z+47	; 0x2f
    317e:	90 a8       	ldd	r9, Z+48	; 0x30
    3180:	a1 a8       	ldd	r10, Z+49	; 0x31
    3182:	b2 a8       	ldd	r11, Z+50	; 0x32
    3184:	ba 01       	movw	r22, r20
    3186:	a9 01       	movw	r20, r18
    3188:	48 29       	or	r20, r8
    318a:	59 29       	or	r21, r9
    318c:	6a 29       	or	r22, r10
    318e:	7b 29       	or	r23, r11
    3190:	47 a7       	std	Z+47, r20	; 0x2f
    3192:	50 ab       	std	Z+48, r21	; 0x30
    3194:	61 ab       	std	Z+49, r22	; 0x31
    3196:	72 ab       	std	Z+50, r23	; 0x32
    3198:	01 e0       	ldi	r16, 0x01	; 1
    319a:	34 c0       	rjmp	.+104    	; 0x3204 <xTaskGenericNotify+0xfc>
    319c:	66 0f       	add	r22, r22
    319e:	77 1f       	adc	r23, r23
    31a0:	66 0f       	add	r22, r22
    31a2:	77 1f       	adc	r23, r23
    31a4:	fd 01       	movw	r30, r26
    31a6:	e6 0f       	add	r30, r22
    31a8:	f7 1f       	adc	r31, r23
    31aa:	47 a5       	ldd	r20, Z+47	; 0x2f
    31ac:	50 a9       	ldd	r21, Z+48	; 0x30
    31ae:	61 a9       	ldd	r22, Z+49	; 0x31
    31b0:	72 a9       	ldd	r23, Z+50	; 0x32
    31b2:	4f 5f       	subi	r20, 0xFF	; 255
    31b4:	5f 4f       	sbci	r21, 0xFF	; 255
    31b6:	6f 4f       	sbci	r22, 0xFF	; 255
    31b8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ba:	47 a7       	std	Z+47, r20	; 0x2f
    31bc:	50 ab       	std	Z+48, r21	; 0x30
    31be:	61 ab       	std	Z+49, r22	; 0x31
    31c0:	72 ab       	std	Z+50, r23	; 0x32
    31c2:	01 e0       	ldi	r16, 0x01	; 1
    31c4:	1f c0       	rjmp	.+62     	; 0x3204 <xTaskGenericNotify+0xfc>
    31c6:	66 0f       	add	r22, r22
    31c8:	77 1f       	adc	r23, r23
    31ca:	66 0f       	add	r22, r22
    31cc:	77 1f       	adc	r23, r23
    31ce:	fd 01       	movw	r30, r26
    31d0:	e6 0f       	add	r30, r22
    31d2:	f7 1f       	adc	r31, r23
    31d4:	27 a7       	std	Z+47, r18	; 0x2f
    31d6:	30 ab       	std	Z+48, r19	; 0x30
    31d8:	41 ab       	std	Z+49, r20	; 0x31
    31da:	52 ab       	std	Z+50, r21	; 0x32
    31dc:	01 e0       	ldi	r16, 0x01	; 1
    31de:	12 c0       	rjmp	.+36     	; 0x3204 <xTaskGenericNotify+0xfc>
    31e0:	82 30       	cpi	r24, 0x02	; 2
    31e2:	79 f0       	breq	.+30     	; 0x3202 <xTaskGenericNotify+0xfa>
    31e4:	66 0f       	add	r22, r22
    31e6:	77 1f       	adc	r23, r23
    31e8:	66 0f       	add	r22, r22
    31ea:	77 1f       	adc	r23, r23
    31ec:	fd 01       	movw	r30, r26
    31ee:	e6 0f       	add	r30, r22
    31f0:	f7 1f       	adc	r31, r23
    31f2:	27 a7       	std	Z+47, r18	; 0x2f
    31f4:	30 ab       	std	Z+48, r19	; 0x30
    31f6:	41 ab       	std	Z+49, r20	; 0x31
    31f8:	52 ab       	std	Z+50, r21	; 0x32
    31fa:	01 e0       	ldi	r16, 0x01	; 1
    31fc:	03 c0       	rjmp	.+6      	; 0x3204 <xTaskGenericNotify+0xfc>
    31fe:	01 e0       	ldi	r16, 0x01	; 1
    3200:	01 c0       	rjmp	.+2      	; 0x3204 <xTaskGenericNotify+0xfc>
    3202:	00 e0       	ldi	r16, 0x00	; 0
    3204:	81 30       	cpi	r24, 0x01	; 1
    3206:	09 f0       	breq	.+2      	; 0x320a <xTaskGenericNotify+0x102>
    3208:	69 c0       	rjmp	.+210    	; 0x32dc <xTaskGenericNotify+0x1d4>
    320a:	1c 96       	adiw	r26, 0x0c	; 12
    320c:	ed 91       	ld	r30, X+
    320e:	fc 91       	ld	r31, X
    3210:	1d 97       	sbiw	r26, 0x0d	; 13
    3212:	16 96       	adiw	r26, 0x06	; 6
    3214:	cd 91       	ld	r28, X+
    3216:	dc 91       	ld	r29, X
    3218:	17 97       	sbiw	r26, 0x07	; 7
    321a:	18 96       	adiw	r26, 0x08	; 8
    321c:	8d 91       	ld	r24, X+
    321e:	9c 91       	ld	r25, X
    3220:	19 97       	sbiw	r26, 0x09	; 9
    3222:	9f 83       	std	Y+7, r25	; 0x07
    3224:	8e 83       	std	Y+6, r24	; 0x06
    3226:	18 96       	adiw	r26, 0x08	; 8
    3228:	cd 91       	ld	r28, X+
    322a:	dc 91       	ld	r29, X
    322c:	19 97       	sbiw	r26, 0x09	; 9
    322e:	16 96       	adiw	r26, 0x06	; 6
    3230:	8d 91       	ld	r24, X+
    3232:	9c 91       	ld	r25, X
    3234:	17 97       	sbiw	r26, 0x07	; 7
    3236:	9d 83       	std	Y+5, r25	; 0x05
    3238:	8c 83       	std	Y+4, r24	; 0x04
    323a:	81 81       	ldd	r24, Z+1	; 0x01
    323c:	92 81       	ldd	r25, Z+2	; 0x02
    323e:	9d 01       	movw	r18, r26
    3240:	2e 5f       	subi	r18, 0xFE	; 254
    3242:	3f 4f       	sbci	r19, 0xFF	; 255
    3244:	82 17       	cp	r24, r18
    3246:	93 07       	cpc	r25, r19
    3248:	31 f4       	brne	.+12     	; 0x3256 <xTaskGenericNotify+0x14e>
    324a:	18 96       	adiw	r26, 0x08	; 8
    324c:	8d 91       	ld	r24, X+
    324e:	9c 91       	ld	r25, X
    3250:	19 97       	sbiw	r26, 0x09	; 9
    3252:	92 83       	std	Z+2, r25	; 0x02
    3254:	81 83       	std	Z+1, r24	; 0x01
    3256:	1d 96       	adiw	r26, 0x0d	; 13
    3258:	1c 92       	st	X, r1
    325a:	1e 92       	st	-X, r1
    325c:	1c 97       	sbiw	r26, 0x0c	; 12
    325e:	80 81       	ld	r24, Z
    3260:	81 50       	subi	r24, 0x01	; 1
    3262:	80 83       	st	Z, r24
    3264:	5a 96       	adiw	r26, 0x1a	; 26
    3266:	ec 91       	ld	r30, X
    3268:	5a 97       	sbiw	r26, 0x1a	; 26
    326a:	80 91 1f 17 	lds	r24, 0x171F	; 0x80171f <uxTopReadyPriority>
    326e:	8e 17       	cp	r24, r30
    3270:	10 f4       	brcc	.+4      	; 0x3276 <xTaskGenericNotify+0x16e>
    3272:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    3276:	8b e0       	ldi	r24, 0x0B	; 11
    3278:	8e 9f       	mul	r24, r30
    327a:	f0 01       	movw	r30, r0
    327c:	11 24       	eor	r1, r1
    327e:	ef 59       	subi	r30, 0x9F	; 159
    3280:	f8 4e       	sbci	r31, 0xE8	; 232
    3282:	01 80       	ldd	r0, Z+1	; 0x01
    3284:	f2 81       	ldd	r31, Z+2	; 0x02
    3286:	e0 2d       	mov	r30, r0
    3288:	17 96       	adiw	r26, 0x07	; 7
    328a:	fc 93       	st	X, r31
    328c:	ee 93       	st	-X, r30
    328e:	16 97       	sbiw	r26, 0x06	; 6
    3290:	46 81       	ldd	r20, Z+6	; 0x06
    3292:	57 81       	ldd	r21, Z+7	; 0x07
    3294:	19 96       	adiw	r26, 0x09	; 9
    3296:	5c 93       	st	X, r21
    3298:	4e 93       	st	-X, r20
    329a:	18 97       	sbiw	r26, 0x08	; 8
    329c:	c6 81       	ldd	r28, Z+6	; 0x06
    329e:	d7 81       	ldd	r29, Z+7	; 0x07
    32a0:	3d 83       	std	Y+5, r19	; 0x05
    32a2:	2c 83       	std	Y+4, r18	; 0x04
    32a4:	37 83       	std	Z+7, r19	; 0x07
    32a6:	26 83       	std	Z+6, r18	; 0x06
    32a8:	5a 96       	adiw	r26, 0x1a	; 26
    32aa:	ec 91       	ld	r30, X
    32ac:	5a 97       	sbiw	r26, 0x1a	; 26
    32ae:	8e 9f       	mul	r24, r30
    32b0:	f0 01       	movw	r30, r0
    32b2:	11 24       	eor	r1, r1
    32b4:	ef 59       	subi	r30, 0x9F	; 159
    32b6:	f8 4e       	sbci	r31, 0xE8	; 232
    32b8:	1d 96       	adiw	r26, 0x0d	; 13
    32ba:	fc 93       	st	X, r31
    32bc:	ee 93       	st	-X, r30
    32be:	1c 97       	sbiw	r26, 0x0c	; 12
    32c0:	80 81       	ld	r24, Z
    32c2:	8f 5f       	subi	r24, 0xFF	; 255
    32c4:	80 83       	st	Z, r24
    32c6:	5a 96       	adiw	r26, 0x1a	; 26
    32c8:	9c 91       	ld	r25, X
    32ca:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    32ce:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    32d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    32d4:	89 17       	cp	r24, r25
    32d6:	10 f4       	brcc	.+4      	; 0x32dc <xTaskGenericNotify+0x1d4>
    32d8:	0e 94 9a 06 	call	0xd34	; 0xd34 <vPortYield>
    32dc:	0f 90       	pop	r0
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	80 2f       	mov	r24, r16
    32e2:	df 91       	pop	r29
    32e4:	cf 91       	pop	r28
    32e6:	0f 91       	pop	r16
    32e8:	ff 90       	pop	r15
    32ea:	ef 90       	pop	r14
    32ec:	bf 90       	pop	r11
    32ee:	af 90       	pop	r10
    32f0:	9f 90       	pop	r9
    32f2:	8f 90       	pop	r8
    32f4:	08 95       	ret

000032f6 <xTaskGenericNotifyFromISR>:
    32f6:	8f 92       	push	r8
    32f8:	9f 92       	push	r9
    32fa:	af 92       	push	r10
    32fc:	bf 92       	push	r11
    32fe:	cf 92       	push	r12
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    330c:	dc 01       	movw	r26, r24
    330e:	e1 14       	cp	r14, r1
    3310:	f1 04       	cpc	r15, r1
    3312:	89 f0       	breq	.+34     	; 0x3336 <xTaskGenericNotifyFromISR+0x40>
    3314:	e6 2f       	mov	r30, r22
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	ee 0f       	add	r30, r30
    331a:	ff 1f       	adc	r31, r31
    331c:	ee 0f       	add	r30, r30
    331e:	ff 1f       	adc	r31, r31
    3320:	e8 0f       	add	r30, r24
    3322:	f9 1f       	adc	r31, r25
    3324:	87 a4       	ldd	r8, Z+47	; 0x2f
    3326:	90 a8       	ldd	r9, Z+48	; 0x30
    3328:	a1 a8       	ldd	r10, Z+49	; 0x31
    332a:	b2 a8       	ldd	r11, Z+50	; 0x32
    332c:	f7 01       	movw	r30, r14
    332e:	80 82       	st	Z, r8
    3330:	91 82       	std	Z+1, r9	; 0x01
    3332:	a2 82       	std	Z+2, r10	; 0x02
    3334:	b3 82       	std	Z+3, r11	; 0x03
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	fd 01       	movw	r30, r26
    333a:	e6 0f       	add	r30, r22
    333c:	f7 1f       	adc	r31, r23
    333e:	93 a9       	ldd	r25, Z+51	; 0x33
    3340:	82 e0       	ldi	r24, 0x02	; 2
    3342:	83 ab       	std	Z+51, r24	; 0x33
    3344:	02 30       	cpi	r16, 0x02	; 2
    3346:	01 f1       	breq	.+64     	; 0x3388 <xTaskGenericNotifyFromISR+0x92>
    3348:	18 f4       	brcc	.+6      	; 0x3350 <xTaskGenericNotifyFromISR+0x5a>
    334a:	01 30       	cpi	r16, 0x01	; 1
    334c:	31 f0       	breq	.+12     	; 0x335a <xTaskGenericNotifyFromISR+0x64>
    334e:	4d c0       	rjmp	.+154    	; 0x33ea <xTaskGenericNotifyFromISR+0xf4>
    3350:	03 30       	cpi	r16, 0x03	; 3
    3352:	79 f1       	breq	.+94     	; 0x33b2 <xTaskGenericNotifyFromISR+0xbc>
    3354:	04 30       	cpi	r16, 0x04	; 4
    3356:	d1 f1       	breq	.+116    	; 0x33cc <xTaskGenericNotifyFromISR+0xd6>
    3358:	48 c0       	rjmp	.+144    	; 0x33ea <xTaskGenericNotifyFromISR+0xf4>
    335a:	66 0f       	add	r22, r22
    335c:	77 1f       	adc	r23, r23
    335e:	66 0f       	add	r22, r22
    3360:	77 1f       	adc	r23, r23
    3362:	fd 01       	movw	r30, r26
    3364:	e6 0f       	add	r30, r22
    3366:	f7 1f       	adc	r31, r23
    3368:	87 a4       	ldd	r8, Z+47	; 0x2f
    336a:	90 a8       	ldd	r9, Z+48	; 0x30
    336c:	a1 a8       	ldd	r10, Z+49	; 0x31
    336e:	b2 a8       	ldd	r11, Z+50	; 0x32
    3370:	ba 01       	movw	r22, r20
    3372:	a9 01       	movw	r20, r18
    3374:	48 29       	or	r20, r8
    3376:	59 29       	or	r21, r9
    3378:	6a 29       	or	r22, r10
    337a:	7b 29       	or	r23, r11
    337c:	47 a7       	std	Z+47, r20	; 0x2f
    337e:	50 ab       	std	Z+48, r21	; 0x30
    3380:	61 ab       	std	Z+49, r22	; 0x31
    3382:	72 ab       	std	Z+50, r23	; 0x32
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	34 c0       	rjmp	.+104    	; 0x33f0 <xTaskGenericNotifyFromISR+0xfa>
    3388:	66 0f       	add	r22, r22
    338a:	77 1f       	adc	r23, r23
    338c:	66 0f       	add	r22, r22
    338e:	77 1f       	adc	r23, r23
    3390:	fd 01       	movw	r30, r26
    3392:	e6 0f       	add	r30, r22
    3394:	f7 1f       	adc	r31, r23
    3396:	47 a5       	ldd	r20, Z+47	; 0x2f
    3398:	50 a9       	ldd	r21, Z+48	; 0x30
    339a:	61 a9       	ldd	r22, Z+49	; 0x31
    339c:	72 a9       	ldd	r23, Z+50	; 0x32
    339e:	4f 5f       	subi	r20, 0xFF	; 255
    33a0:	5f 4f       	sbci	r21, 0xFF	; 255
    33a2:	6f 4f       	sbci	r22, 0xFF	; 255
    33a4:	7f 4f       	sbci	r23, 0xFF	; 255
    33a6:	47 a7       	std	Z+47, r20	; 0x2f
    33a8:	50 ab       	std	Z+48, r21	; 0x30
    33aa:	61 ab       	std	Z+49, r22	; 0x31
    33ac:	72 ab       	std	Z+50, r23	; 0x32
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	1f c0       	rjmp	.+62     	; 0x33f0 <xTaskGenericNotifyFromISR+0xfa>
    33b2:	66 0f       	add	r22, r22
    33b4:	77 1f       	adc	r23, r23
    33b6:	66 0f       	add	r22, r22
    33b8:	77 1f       	adc	r23, r23
    33ba:	fd 01       	movw	r30, r26
    33bc:	e6 0f       	add	r30, r22
    33be:	f7 1f       	adc	r31, r23
    33c0:	27 a7       	std	Z+47, r18	; 0x2f
    33c2:	30 ab       	std	Z+48, r19	; 0x30
    33c4:	41 ab       	std	Z+49, r20	; 0x31
    33c6:	52 ab       	std	Z+50, r21	; 0x32
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	12 c0       	rjmp	.+36     	; 0x33f0 <xTaskGenericNotifyFromISR+0xfa>
    33cc:	92 30       	cpi	r25, 0x02	; 2
    33ce:	79 f0       	breq	.+30     	; 0x33ee <xTaskGenericNotifyFromISR+0xf8>
    33d0:	66 0f       	add	r22, r22
    33d2:	77 1f       	adc	r23, r23
    33d4:	66 0f       	add	r22, r22
    33d6:	77 1f       	adc	r23, r23
    33d8:	fd 01       	movw	r30, r26
    33da:	e6 0f       	add	r30, r22
    33dc:	f7 1f       	adc	r31, r23
    33de:	27 a7       	std	Z+47, r18	; 0x2f
    33e0:	30 ab       	std	Z+48, r19	; 0x30
    33e2:	41 ab       	std	Z+49, r20	; 0x31
    33e4:	52 ab       	std	Z+50, r21	; 0x32
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	03 c0       	rjmp	.+6      	; 0x33f0 <xTaskGenericNotifyFromISR+0xfa>
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	01 c0       	rjmp	.+2      	; 0x33f0 <xTaskGenericNotifyFromISR+0xfa>
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	91 30       	cpi	r25, 0x01	; 1
    33f2:	09 f0       	breq	.+2      	; 0x33f6 <xTaskGenericNotifyFromISR+0x100>
    33f4:	96 c0       	rjmp	.+300    	; 0x3522 <xTaskGenericNotifyFromISR+0x22c>
    33f6:	90 91 10 17 	lds	r25, 0x1710	; 0x801710 <uxSchedulerSuspended>
    33fa:	91 11       	cpse	r25, r1
    33fc:	5f c0       	rjmp	.+190    	; 0x34bc <xTaskGenericNotifyFromISR+0x1c6>
    33fe:	1c 96       	adiw	r26, 0x0c	; 12
    3400:	ed 91       	ld	r30, X+
    3402:	fc 91       	ld	r31, X
    3404:	1d 97       	sbiw	r26, 0x0d	; 13
    3406:	16 96       	adiw	r26, 0x06	; 6
    3408:	cd 91       	ld	r28, X+
    340a:	dc 91       	ld	r29, X
    340c:	17 97       	sbiw	r26, 0x07	; 7
    340e:	18 96       	adiw	r26, 0x08	; 8
    3410:	2d 91       	ld	r18, X+
    3412:	3c 91       	ld	r19, X
    3414:	19 97       	sbiw	r26, 0x09	; 9
    3416:	3f 83       	std	Y+7, r19	; 0x07
    3418:	2e 83       	std	Y+6, r18	; 0x06
    341a:	18 96       	adiw	r26, 0x08	; 8
    341c:	cd 91       	ld	r28, X+
    341e:	dc 91       	ld	r29, X
    3420:	19 97       	sbiw	r26, 0x09	; 9
    3422:	16 96       	adiw	r26, 0x06	; 6
    3424:	2d 91       	ld	r18, X+
    3426:	3c 91       	ld	r19, X
    3428:	17 97       	sbiw	r26, 0x07	; 7
    342a:	3d 83       	std	Y+5, r19	; 0x05
    342c:	2c 83       	std	Y+4, r18	; 0x04
    342e:	41 81       	ldd	r20, Z+1	; 0x01
    3430:	52 81       	ldd	r21, Z+2	; 0x02
    3432:	9d 01       	movw	r18, r26
    3434:	2e 5f       	subi	r18, 0xFE	; 254
    3436:	3f 4f       	sbci	r19, 0xFF	; 255
    3438:	42 17       	cp	r20, r18
    343a:	53 07       	cpc	r21, r19
    343c:	31 f4       	brne	.+12     	; 0x344a <xTaskGenericNotifyFromISR+0x154>
    343e:	18 96       	adiw	r26, 0x08	; 8
    3440:	4d 91       	ld	r20, X+
    3442:	5c 91       	ld	r21, X
    3444:	19 97       	sbiw	r26, 0x09	; 9
    3446:	52 83       	std	Z+2, r21	; 0x02
    3448:	41 83       	std	Z+1, r20	; 0x01
    344a:	1d 96       	adiw	r26, 0x0d	; 13
    344c:	1c 92       	st	X, r1
    344e:	1e 92       	st	-X, r1
    3450:	1c 97       	sbiw	r26, 0x0c	; 12
    3452:	90 81       	ld	r25, Z
    3454:	91 50       	subi	r25, 0x01	; 1
    3456:	90 83       	st	Z, r25
    3458:	5a 96       	adiw	r26, 0x1a	; 26
    345a:	ec 91       	ld	r30, X
    345c:	5a 97       	sbiw	r26, 0x1a	; 26
    345e:	90 91 1f 17 	lds	r25, 0x171F	; 0x80171f <uxTopReadyPriority>
    3462:	9e 17       	cp	r25, r30
    3464:	10 f4       	brcc	.+4      	; 0x346a <xTaskGenericNotifyFromISR+0x174>
    3466:	e0 93 1f 17 	sts	0x171F, r30	; 0x80171f <uxTopReadyPriority>
    346a:	9b e0       	ldi	r25, 0x0B	; 11
    346c:	9e 9f       	mul	r25, r30
    346e:	f0 01       	movw	r30, r0
    3470:	11 24       	eor	r1, r1
    3472:	ef 59       	subi	r30, 0x9F	; 159
    3474:	f8 4e       	sbci	r31, 0xE8	; 232
    3476:	01 80       	ldd	r0, Z+1	; 0x01
    3478:	f2 81       	ldd	r31, Z+2	; 0x02
    347a:	e0 2d       	mov	r30, r0
    347c:	17 96       	adiw	r26, 0x07	; 7
    347e:	fc 93       	st	X, r31
    3480:	ee 93       	st	-X, r30
    3482:	16 97       	sbiw	r26, 0x06	; 6
    3484:	46 81       	ldd	r20, Z+6	; 0x06
    3486:	57 81       	ldd	r21, Z+7	; 0x07
    3488:	19 96       	adiw	r26, 0x09	; 9
    348a:	5c 93       	st	X, r21
    348c:	4e 93       	st	-X, r20
    348e:	18 97       	sbiw	r26, 0x08	; 8
    3490:	c6 81       	ldd	r28, Z+6	; 0x06
    3492:	d7 81       	ldd	r29, Z+7	; 0x07
    3494:	3d 83       	std	Y+5, r19	; 0x05
    3496:	2c 83       	std	Y+4, r18	; 0x04
    3498:	37 83       	std	Z+7, r19	; 0x07
    349a:	26 83       	std	Z+6, r18	; 0x06
    349c:	5a 96       	adiw	r26, 0x1a	; 26
    349e:	ec 91       	ld	r30, X
    34a0:	5a 97       	sbiw	r26, 0x1a	; 26
    34a2:	9e 9f       	mul	r25, r30
    34a4:	f0 01       	movw	r30, r0
    34a6:	11 24       	eor	r1, r1
    34a8:	ef 59       	subi	r30, 0x9F	; 159
    34aa:	f8 4e       	sbci	r31, 0xE8	; 232
    34ac:	1d 96       	adiw	r26, 0x0d	; 13
    34ae:	fc 93       	st	X, r31
    34b0:	ee 93       	st	-X, r30
    34b2:	1c 97       	sbiw	r26, 0x0c	; 12
    34b4:	90 81       	ld	r25, Z
    34b6:	9f 5f       	subi	r25, 0xFF	; 255
    34b8:	90 83       	st	Z, r25
    34ba:	21 c0       	rjmp	.+66     	; 0x34fe <xTaskGenericNotifyFromISR+0x208>
    34bc:	6c e3       	ldi	r22, 0x3C	; 60
    34be:	77 e1       	ldi	r23, 0x17	; 23
    34c0:	fb 01       	movw	r30, r22
    34c2:	c1 81       	ldd	r28, Z+1	; 0x01
    34c4:	d2 81       	ldd	r29, Z+2	; 0x02
    34c6:	53 96       	adiw	r26, 0x13	; 19
    34c8:	dc 93       	st	X, r29
    34ca:	ce 93       	st	-X, r28
    34cc:	52 97       	sbiw	r26, 0x12	; 18
    34ce:	2e 81       	ldd	r18, Y+6	; 0x06
    34d0:	3f 81       	ldd	r19, Y+7	; 0x07
    34d2:	55 96       	adiw	r26, 0x15	; 21
    34d4:	3c 93       	st	X, r19
    34d6:	2e 93       	st	-X, r18
    34d8:	54 97       	sbiw	r26, 0x14	; 20
    34da:	4e 81       	ldd	r20, Y+6	; 0x06
    34dc:	5f 81       	ldd	r21, Y+7	; 0x07
    34de:	9d 01       	movw	r18, r26
    34e0:	22 5f       	subi	r18, 0xF2	; 242
    34e2:	3f 4f       	sbci	r19, 0xFF	; 255
    34e4:	fa 01       	movw	r30, r20
    34e6:	35 83       	std	Z+5, r19	; 0x05
    34e8:	24 83       	std	Z+4, r18	; 0x04
    34ea:	3f 83       	std	Y+7, r19	; 0x07
    34ec:	2e 83       	std	Y+6, r18	; 0x06
    34ee:	59 96       	adiw	r26, 0x19	; 25
    34f0:	7c 93       	st	X, r23
    34f2:	6e 93       	st	-X, r22
    34f4:	58 97       	sbiw	r26, 0x18	; 24
    34f6:	fb 01       	movw	r30, r22
    34f8:	90 81       	ld	r25, Z
    34fa:	9f 5f       	subi	r25, 0xFF	; 255
    34fc:	90 83       	st	Z, r25
    34fe:	5a 96       	adiw	r26, 0x1a	; 26
    3500:	2c 91       	ld	r18, X
    3502:	e0 91 cf 17 	lds	r30, 0x17CF	; 0x8017cf <pxCurrentTCB>
    3506:	f0 91 d0 17 	lds	r31, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>
    350a:	92 8d       	ldd	r25, Z+26	; 0x1a
    350c:	92 17       	cp	r25, r18
    350e:	48 f4       	brcc	.+18     	; 0x3522 <xTaskGenericNotifyFromISR+0x22c>
    3510:	c1 14       	cp	r12, r1
    3512:	d1 04       	cpc	r13, r1
    3514:	19 f0       	breq	.+6      	; 0x351c <xTaskGenericNotifyFromISR+0x226>
    3516:	91 e0       	ldi	r25, 0x01	; 1
    3518:	f6 01       	movw	r30, r12
    351a:	90 83       	st	Z, r25
    351c:	91 e0       	ldi	r25, 0x01	; 1
    351e:	90 93 19 17 	sts	0x1719, r25	; 0x801719 <xYieldPending>
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	0f 91       	pop	r16
    3528:	ff 90       	pop	r15
    352a:	ef 90       	pop	r14
    352c:	df 90       	pop	r13
    352e:	cf 90       	pop	r12
    3530:	bf 90       	pop	r11
    3532:	af 90       	pop	r10
    3534:	9f 90       	pop	r9
    3536:	8f 90       	pop	r8
    3538:	08 95       	ret

0000353a <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	21 f4       	brne	.+8      	; 0x3546 <xTaskGenericNotifyStateClear+0xc>
    353e:	80 91 cf 17 	lds	r24, 0x17CF	; 0x8017cf <pxCurrentTCB>
    3542:	90 91 d0 17 	lds	r25, 0x17D0	; 0x8017d0 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    354c:	70 e0       	ldi	r23, 0x00	; 0
    354e:	fc 01       	movw	r30, r24
    3550:	e6 0f       	add	r30, r22
    3552:	f7 1f       	adc	r31, r23
    3554:	23 a9       	ldd	r18, Z+51	; 0x33
    3556:	22 30       	cpi	r18, 0x02	; 2
    3558:	31 f4       	brne	.+12     	; 0x3566 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    355a:	fc 01       	movw	r30, r24
    355c:	e6 0f       	add	r30, r22
    355e:	f7 1f       	adc	r31, r23
    3560:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	01 c0       	rjmp	.+2      	; 0x3568 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3566:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3568:	0f 90       	pop	r0
    356a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    356c:	08 95       	ret

0000356e <prvGetNextExpireTime>:
    356e:	dc 01       	movw	r26, r24
    3570:	e0 91 db 17 	lds	r30, 0x17DB	; 0x8017db <pxCurrentTimerList>
    3574:	f0 91 dc 17 	lds	r31, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    3578:	80 81       	ld	r24, Z
    357a:	91 e0       	ldi	r25, 0x01	; 1
    357c:	81 11       	cpse	r24, r1
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	9c 93       	st	X, r25
    3582:	91 11       	cpse	r25, r1
    3584:	08 c0       	rjmp	.+16     	; 0x3596 <prvGetNextExpireTime+0x28>
    3586:	07 80       	ldd	r0, Z+7	; 0x07
    3588:	f0 85       	ldd	r31, Z+8	; 0x08
    358a:	e0 2d       	mov	r30, r0
    358c:	60 81       	ld	r22, Z
    358e:	71 81       	ldd	r23, Z+1	; 0x01
    3590:	82 81       	ldd	r24, Z+2	; 0x02
    3592:	93 81       	ldd	r25, Z+3	; 0x03
    3594:	08 95       	ret
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	cb 01       	movw	r24, r22
    359c:	08 95       	ret

0000359e <prvInsertTimerInActiveList>:
    359e:	cf 92       	push	r12
    35a0:	df 92       	push	r13
    35a2:	ef 92       	push	r14
    35a4:	ff 92       	push	r15
    35a6:	0f 93       	push	r16
    35a8:	1f 93       	push	r17
    35aa:	fc 01       	movw	r30, r24
    35ac:	42 83       	std	Z+2, r20	; 0x02
    35ae:	53 83       	std	Z+3, r21	; 0x03
    35b0:	64 83       	std	Z+4, r22	; 0x04
    35b2:	75 83       	std	Z+5, r23	; 0x05
    35b4:	93 87       	std	Z+11, r25	; 0x0b
    35b6:	82 87       	std	Z+10, r24	; 0x0a
    35b8:	04 17       	cp	r16, r20
    35ba:	15 07       	cpc	r17, r21
    35bc:	26 07       	cpc	r18, r22
    35be:	37 07       	cpc	r19, r23
    35c0:	c0 f0       	brcs	.+48     	; 0x35f2 <prvInsertTimerInActiveList+0x54>
    35c2:	0c 19       	sub	r16, r12
    35c4:	1d 09       	sbc	r17, r13
    35c6:	2e 09       	sbc	r18, r14
    35c8:	3f 09       	sbc	r19, r15
    35ca:	86 85       	ldd	r24, Z+14	; 0x0e
    35cc:	97 85       	ldd	r25, Z+15	; 0x0f
    35ce:	a0 89       	ldd	r26, Z+16	; 0x10
    35d0:	b1 89       	ldd	r27, Z+17	; 0x11
    35d2:	08 17       	cp	r16, r24
    35d4:	19 07       	cpc	r17, r25
    35d6:	2a 07       	cpc	r18, r26
    35d8:	3b 07       	cpc	r19, r27
    35da:	00 f5       	brcc	.+64     	; 0x361c <prvInsertTimerInActiveList+0x7e>
    35dc:	bf 01       	movw	r22, r30
    35de:	6e 5f       	subi	r22, 0xFE	; 254
    35e0:	7f 4f       	sbci	r23, 0xFF	; 255
    35e2:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <pxOverflowTimerList>
    35e6:	90 91 da 17 	lds	r25, 0x17DA	; 0x8017da <pxOverflowTimerList+0x1>
    35ea:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vListInsert>
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	18 c0       	rjmp	.+48     	; 0x3622 <prvInsertTimerInActiveList+0x84>
    35f2:	0c 15       	cp	r16, r12
    35f4:	1d 05       	cpc	r17, r13
    35f6:	2e 05       	cpc	r18, r14
    35f8:	3f 05       	cpc	r19, r15
    35fa:	28 f4       	brcc	.+10     	; 0x3606 <prvInsertTimerInActiveList+0x68>
    35fc:	4c 15       	cp	r20, r12
    35fe:	5d 05       	cpc	r21, r13
    3600:	6e 05       	cpc	r22, r14
    3602:	7f 05       	cpc	r23, r15
    3604:	68 f4       	brcc	.+26     	; 0x3620 <prvInsertTimerInActiveList+0x82>
    3606:	bf 01       	movw	r22, r30
    3608:	6e 5f       	subi	r22, 0xFE	; 254
    360a:	7f 4f       	sbci	r23, 0xFF	; 255
    360c:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <pxCurrentTimerList>
    3610:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    3614:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vListInsert>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	03 c0       	rjmp	.+6      	; 0x3622 <prvInsertTimerInActiveList+0x84>
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	01 c0       	rjmp	.+2      	; 0x3622 <prvInsertTimerInActiveList+0x84>
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	1f 91       	pop	r17
    3624:	0f 91       	pop	r16
    3626:	ff 90       	pop	r15
    3628:	ef 90       	pop	r14
    362a:	df 90       	pop	r13
    362c:	cf 90       	pop	r12
    362e:	08 95       	ret

00003630 <prvCheckForValidListAndQueue>:
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	0f 92       	push	r0
    3636:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    363a:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    363e:	89 2b       	or	r24, r25
    3640:	e9 f4       	brne	.+58     	; 0x367c <prvCheckForValidListAndQueue+0x4c>
    3642:	88 ee       	ldi	r24, 0xE8	; 232
    3644:	97 e1       	ldi	r25, 0x17	; 23
    3646:	0e 94 cc 05 	call	0xb98	; 0xb98 <vListInitialise>
    364a:	8d ed       	ldi	r24, 0xDD	; 221
    364c:	97 e1       	ldi	r25, 0x17	; 23
    364e:	0e 94 cc 05 	call	0xb98	; 0xb98 <vListInitialise>
    3652:	88 ee       	ldi	r24, 0xE8	; 232
    3654:	97 e1       	ldi	r25, 0x17	; 23
    3656:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <pxCurrentTimerList+0x1>
    365a:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <pxCurrentTimerList>
    365e:	8d ed       	ldi	r24, 0xDD	; 221
    3660:	97 e1       	ldi	r25, 0x17	; 23
    3662:	90 93 da 17 	sts	0x17DA, r25	; 0x8017da <pxOverflowTimerList+0x1>
    3666:	80 93 d9 17 	sts	0x17D9, r24	; 0x8017d9 <pxOverflowTimerList>
    366a:	40 e0       	ldi	r20, 0x00	; 0
    366c:	67 e0       	ldi	r22, 0x07	; 7
    366e:	8a e0       	ldi	r24, 0x0A	; 10
    3670:	0e 94 8f 08 	call	0x111e	; 0x111e <xQueueGenericCreate>
    3674:	90 93 d8 17 	sts	0x17D8, r25	; 0x8017d8 <xTimerQueue+0x1>
    3678:	80 93 d7 17 	sts	0x17D7, r24	; 0x8017d7 <xTimerQueue>
    367c:	0f 90       	pop	r0
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	08 95       	ret

00003682 <xTimerCreateTimerTask>:
    3682:	ef 92       	push	r14
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	d3 df       	rcall	.-90     	; 0x3630 <prvCheckForValidListAndQueue>
    368a:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    368e:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    3692:	89 2b       	or	r24, r25
    3694:	91 f0       	breq	.+36     	; 0x36ba <xTimerCreateTimerTask+0x38>
    3696:	0f 2e       	mov	r0, r31
    3698:	f5 ed       	ldi	r31, 0xD5	; 213
    369a:	ef 2e       	mov	r14, r31
    369c:	f7 e1       	ldi	r31, 0x17	; 23
    369e:	ff 2e       	mov	r15, r31
    36a0:	f0 2d       	mov	r31, r0
    36a2:	03 e0       	ldi	r16, 0x03	; 3
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	40 ec       	ldi	r20, 0xC0	; 192
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	6e e5       	ldi	r22, 0x5E	; 94
    36ae:	73 e0       	ldi	r23, 0x03	; 3
    36b0:	88 e5       	ldi	r24, 0x58	; 88
    36b2:	91 e0       	ldi	r25, 0x01	; 1
    36b4:	0e 94 42 10 	call	0x2084	; 0x2084 <xTaskCreate>
    36b8:	01 c0       	rjmp	.+2      	; 0x36bc <xTimerCreateTimerTask+0x3a>
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	0f 91       	pop	r16
    36be:	ff 90       	pop	r15
    36c0:	ef 90       	pop	r14
    36c2:	08 95       	ret

000036c4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    36c4:	8f 92       	push	r8
    36c6:	9f 92       	push	r9
    36c8:	af 92       	push	r10
    36ca:	bf 92       	push	r11
    36cc:	cf 92       	push	r12
    36ce:	df 92       	push	r13
    36d0:	ef 92       	push	r14
    36d2:	ff 92       	push	r15
    36d4:	0f 93       	push	r16
    36d6:	1f 93       	push	r17
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
    36e0:	27 97       	sbiw	r28, 0x07	; 7
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    36ec:	e0 91 d7 17 	lds	r30, 0x17D7	; 0x8017d7 <xTimerQueue>
    36f0:	f0 91 d8 17 	lds	r31, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    36f4:	30 97       	sbiw	r30, 0x00	; 0
    36f6:	81 f1       	breq	.+96     	; 0x3758 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    36f8:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    36fa:	2a 83       	std	Y+2, r18	; 0x02
    36fc:	3b 83       	std	Y+3, r19	; 0x03
    36fe:	4c 83       	std	Y+4, r20	; 0x04
    3700:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    3702:	9f 83       	std	Y+7, r25	; 0x07
    3704:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3706:	66 30       	cpi	r22, 0x06	; 6
    3708:	f4 f4       	brge	.+60     	; 0x3746 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    370a:	c3 da       	rcall	.-2682   	; 0x2c92 <xTaskGetSchedulerState>
    370c:	82 30       	cpi	r24, 0x02	; 2
    370e:	69 f4       	brne	.+26     	; 0x372a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3710:	00 e0       	ldi	r16, 0x00	; 0
    3712:	a7 01       	movw	r20, r14
    3714:	96 01       	movw	r18, r12
    3716:	be 01       	movw	r22, r28
    3718:	6f 5f       	subi	r22, 0xFF	; 255
    371a:	7f 4f       	sbci	r23, 0xFF	; 255
    371c:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    3720:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    3724:	0e 94 b2 08 	call	0x1164	; 0x1164 <xQueueGenericSend>
    3728:	18 c0       	rjmp	.+48     	; 0x375a <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    372a:	00 e0       	ldi	r16, 0x00	; 0
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	a9 01       	movw	r20, r18
    3732:	be 01       	movw	r22, r28
    3734:	6f 5f       	subi	r22, 0xFF	; 255
    3736:	7f 4f       	sbci	r23, 0xFF	; 255
    3738:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    373c:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    3740:	0e 94 b2 08 	call	0x1164	; 0x1164 <xQueueGenericSend>
    3744:	0a c0       	rjmp	.+20     	; 0x375a <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	a8 01       	movw	r20, r16
    374a:	be 01       	movw	r22, r28
    374c:	6f 5f       	subi	r22, 0xFF	; 255
    374e:	7f 4f       	sbci	r23, 0xFF	; 255
    3750:	cf 01       	movw	r24, r30
    3752:	0e 94 62 09 	call	0x12c4	; 0x12c4 <xQueueGenericSendFromISR>
    3756:	01 c0       	rjmp	.+2      	; 0x375a <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3758:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    375a:	27 96       	adiw	r28, 0x07	; 7
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	df 91       	pop	r29
    3768:	cf 91       	pop	r28
    376a:	1f 91       	pop	r17
    376c:	0f 91       	pop	r16
    376e:	ff 90       	pop	r15
    3770:	ef 90       	pop	r14
    3772:	df 90       	pop	r13
    3774:	cf 90       	pop	r12
    3776:	bf 90       	pop	r11
    3778:	af 90       	pop	r10
    377a:	9f 90       	pop	r9
    377c:	8f 90       	pop	r8
    377e:	08 95       	ret

00003780 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    3780:	8f 92       	push	r8
    3782:	9f 92       	push	r9
    3784:	af 92       	push	r10
    3786:	bf 92       	push	r11
    3788:	cf 92       	push	r12
    378a:	df 92       	push	r13
    378c:	ef 92       	push	r14
    378e:	ff 92       	push	r15
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3798:	3b c0       	rjmp	.+118    	; 0x3810 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    379a:	07 80       	ldd	r0, Z+7	; 0x07
    379c:	f0 85       	ldd	r31, Z+8	; 0x08
    379e:	e0 2d       	mov	r30, r0
    37a0:	80 80       	ld	r8, Z
    37a2:	91 80       	ldd	r9, Z+1	; 0x01
    37a4:	a2 80       	ldd	r10, Z+2	; 0x02
    37a6:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37a8:	c0 85       	ldd	r28, Z+8	; 0x08
    37aa:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37ac:	8e 01       	movw	r16, r28
    37ae:	0e 5f       	subi	r16, 0xFE	; 254
    37b0:	1f 4f       	sbci	r17, 0xFF	; 255
    37b2:	c8 01       	movw	r24, r16
    37b4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37b8:	ec 89       	ldd	r30, Y+20	; 0x14
    37ba:	fd 89       	ldd	r31, Y+21	; 0x15
    37bc:	ce 01       	movw	r24, r28
    37be:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    37c0:	8e 89       	ldd	r24, Y+22	; 0x16
    37c2:	82 ff       	sbrs	r24, 2
    37c4:	25 c0       	rjmp	.+74     	; 0x3810 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    37c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    37c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    37ca:	a8 89       	ldd	r26, Y+16	; 0x10
    37cc:	b9 89       	ldd	r27, Y+17	; 0x11
    37ce:	88 0d       	add	r24, r8
    37d0:	99 1d       	adc	r25, r9
    37d2:	aa 1d       	adc	r26, r10
    37d4:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    37d6:	88 16       	cp	r8, r24
    37d8:	99 06       	cpc	r9, r25
    37da:	aa 06       	cpc	r10, r26
    37dc:	bb 06       	cpc	r11, r27
    37de:	70 f4       	brcc	.+28     	; 0x37fc <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    37e0:	8a 83       	std	Y+2, r24	; 0x02
    37e2:	9b 83       	std	Y+3, r25	; 0x03
    37e4:	ac 83       	std	Y+4, r26	; 0x04
    37e6:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    37e8:	db 87       	std	Y+11, r29	; 0x0b
    37ea:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    37ec:	b8 01       	movw	r22, r16
    37ee:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <pxCurrentTimerList>
    37f2:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    37f6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vListInsert>
    37fa:	0a c0       	rjmp	.+20     	; 0x3810 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    37fc:	c1 2c       	mov	r12, r1
    37fe:	d1 2c       	mov	r13, r1
    3800:	76 01       	movw	r14, r12
    3802:	00 e0       	ldi	r16, 0x00	; 0
    3804:	10 e0       	ldi	r17, 0x00	; 0
    3806:	a5 01       	movw	r20, r10
    3808:	94 01       	movw	r18, r8
    380a:	60 e0       	ldi	r22, 0x00	; 0
    380c:	ce 01       	movw	r24, r28
    380e:	5a df       	rcall	.-332    	; 0x36c4 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3810:	e0 91 db 17 	lds	r30, 0x17DB	; 0x8017db <pxCurrentTimerList>
    3814:	f0 91 dc 17 	lds	r31, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    3818:	80 81       	ld	r24, Z
    381a:	81 11       	cpse	r24, r1
    381c:	be cf       	rjmp	.-132    	; 0x379a <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    381e:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <pxOverflowTimerList>
    3822:	90 91 da 17 	lds	r25, 0x17DA	; 0x8017da <pxOverflowTimerList+0x1>
    3826:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <pxCurrentTimerList+0x1>
    382a:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    382e:	f0 93 da 17 	sts	0x17DA, r31	; 0x8017da <pxOverflowTimerList+0x1>
    3832:	e0 93 d9 17 	sts	0x17D9, r30	; 0x8017d9 <pxOverflowTimerList>
    }
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	ff 90       	pop	r15
    3840:	ef 90       	pop	r14
    3842:	df 90       	pop	r13
    3844:	cf 90       	pop	r12
    3846:	bf 90       	pop	r11
    3848:	af 90       	pop	r10
    384a:	9f 90       	pop	r9
    384c:	8f 90       	pop	r8
    384e:	08 95       	ret

00003850 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3850:	cf 92       	push	r12
    3852:	df 92       	push	r13
    3854:	ef 92       	push	r14
    3856:	ff 92       	push	r15
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
    385c:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    385e:	0e 94 cc 10 	call	0x2198	; 0x2198 <xTaskGetTickCount>
    3862:	6b 01       	movw	r12, r22
    3864:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3866:	80 91 d1 17 	lds	r24, 0x17D1	; 0x8017d1 <xLastTime.2436>
    386a:	90 91 d2 17 	lds	r25, 0x17D2	; 0x8017d2 <xLastTime.2436+0x1>
    386e:	a0 91 d3 17 	lds	r26, 0x17D3	; 0x8017d3 <xLastTime.2436+0x2>
    3872:	b0 91 d4 17 	lds	r27, 0x17D4	; 0x8017d4 <xLastTime.2436+0x3>
    3876:	c8 16       	cp	r12, r24
    3878:	d9 06       	cpc	r13, r25
    387a:	ea 06       	cpc	r14, r26
    387c:	fb 06       	cpc	r15, r27
    387e:	20 f4       	brcc	.+8      	; 0x3888 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    3880:	7f df       	rcall	.-258    	; 0x3780 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	88 83       	st	Y, r24
    3886:	01 c0       	rjmp	.+2      	; 0x388a <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3888:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    388a:	c0 92 d1 17 	sts	0x17D1, r12	; 0x8017d1 <xLastTime.2436>
    388e:	d0 92 d2 17 	sts	0x17D2, r13	; 0x8017d2 <xLastTime.2436+0x1>
    3892:	e0 92 d3 17 	sts	0x17D3, r14	; 0x8017d3 <xLastTime.2436+0x2>
    3896:	f0 92 d4 17 	sts	0x17D4, r15	; 0x8017d4 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    389a:	c7 01       	movw	r24, r14
    389c:	b6 01       	movw	r22, r12
    389e:	df 91       	pop	r29
    38a0:	cf 91       	pop	r28
    38a2:	ff 90       	pop	r15
    38a4:	ef 90       	pop	r14
    38a6:	df 90       	pop	r13
    38a8:	cf 90       	pop	r12
    38aa:	08 95       	ret

000038ac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    38ac:	4f 92       	push	r4
    38ae:	5f 92       	push	r5
    38b0:	6f 92       	push	r6
    38b2:	7f 92       	push	r7
    38b4:	8f 92       	push	r8
    38b6:	9f 92       	push	r9
    38b8:	af 92       	push	r10
    38ba:	bf 92       	push	r11
    38bc:	cf 92       	push	r12
    38be:	df 92       	push	r13
    38c0:	ef 92       	push	r14
    38c2:	ff 92       	push	r15
    38c4:	0f 93       	push	r16
    38c6:	1f 93       	push	r17
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	4b 01       	movw	r8, r22
    38ce:	5c 01       	movw	r10, r24
    38d0:	29 01       	movw	r4, r18
    38d2:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    38d4:	e0 91 db 17 	lds	r30, 0x17DB	; 0x8017db <pxCurrentTimerList>
    38d8:	f0 91 dc 17 	lds	r31, 0x17DC	; 0x8017dc <pxCurrentTimerList+0x1>
    38dc:	07 80       	ldd	r0, Z+7	; 0x07
    38de:	f0 85       	ldd	r31, Z+8	; 0x08
    38e0:	e0 2d       	mov	r30, r0
    38e2:	c0 85       	ldd	r28, Z+8	; 0x08
    38e4:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    38e6:	ce 01       	movw	r24, r28
    38e8:	02 96       	adiw	r24, 0x02	; 2
    38ea:	0e 94 1e 06 	call	0xc3c	; 0xc3c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    38ee:	8e 89       	ldd	r24, Y+22	; 0x16
    38f0:	82 ff       	sbrs	r24, 2
    38f2:	1b c0       	rjmp	.+54     	; 0x392a <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    38f4:	4e 85       	ldd	r20, Y+14	; 0x0e
    38f6:	5f 85       	ldd	r21, Y+15	; 0x0f
    38f8:	68 89       	ldd	r22, Y+16	; 0x10
    38fa:	79 89       	ldd	r23, Y+17	; 0x11
    38fc:	48 0d       	add	r20, r8
    38fe:	59 1d       	adc	r21, r9
    3900:	6a 1d       	adc	r22, r10
    3902:	7b 1d       	adc	r23, r11
    3904:	75 01       	movw	r14, r10
    3906:	64 01       	movw	r12, r8
    3908:	93 01       	movw	r18, r6
    390a:	82 01       	movw	r16, r4
    390c:	ce 01       	movw	r24, r28
    390e:	47 de       	rcall	.-882    	; 0x359e <prvInsertTimerInActiveList>
    3910:	88 23       	and	r24, r24
    3912:	69 f0       	breq	.+26     	; 0x392e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3914:	c1 2c       	mov	r12, r1
    3916:	d1 2c       	mov	r13, r1
    3918:	76 01       	movw	r14, r12
    391a:	00 e0       	ldi	r16, 0x00	; 0
    391c:	10 e0       	ldi	r17, 0x00	; 0
    391e:	a5 01       	movw	r20, r10
    3920:	94 01       	movw	r18, r8
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	ce 01       	movw	r24, r28
    3926:	ce de       	rcall	.-612    	; 0x36c4 <xTimerGenericCommand>
    3928:	02 c0       	rjmp	.+4      	; 0x392e <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    392a:	8e 7f       	andi	r24, 0xFE	; 254
    392c:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    392e:	ec 89       	ldd	r30, Y+20	; 0x14
    3930:	fd 89       	ldd	r31, Y+21	; 0x15
    3932:	ce 01       	movw	r24, r28
    3934:	19 95       	eicall
    }
    3936:	df 91       	pop	r29
    3938:	cf 91       	pop	r28
    393a:	1f 91       	pop	r17
    393c:	0f 91       	pop	r16
    393e:	ff 90       	pop	r15
    3940:	ef 90       	pop	r14
    3942:	df 90       	pop	r13
    3944:	cf 90       	pop	r12
    3946:	bf 90       	pop	r11
    3948:	af 90       	pop	r10
    394a:	9f 90       	pop	r9
    394c:	8f 90       	pop	r8
    394e:	7f 90       	pop	r7
    3950:	6f 90       	pop	r6
    3952:	5f 90       	pop	r5
    3954:	4f 90       	pop	r4
    3956:	08 95       	ret

00003958 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3958:	8f 92       	push	r8
    395a:	9f 92       	push	r9
    395c:	af 92       	push	r10
    395e:	bf 92       	push	r11
    3960:	cf 92       	push	r12
    3962:	df 92       	push	r13
    3964:	ef 92       	push	r14
    3966:	ff 92       	push	r15
    3968:	1f 93       	push	r17
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	1f 92       	push	r1
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
    3974:	6b 01       	movw	r12, r22
    3976:	7c 01       	movw	r14, r24
    3978:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    397a:	0e 94 c6 10 	call	0x218c	; 0x218c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    397e:	ce 01       	movw	r24, r28
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	66 df       	rcall	.-308    	; 0x3850 <prvSampleTimeNow>
    3984:	4b 01       	movw	r8, r22
    3986:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3988:	89 81       	ldd	r24, Y+1	; 0x01
    398a:	81 11       	cpse	r24, r1
    398c:	2d c0       	rjmp	.+90     	; 0x39e8 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    398e:	11 11       	cpse	r17, r1
    3990:	0d c0       	rjmp	.+26     	; 0x39ac <prvProcessTimerOrBlockTask+0x54>
    3992:	8c 14       	cp	r8, r12
    3994:	9d 04       	cpc	r9, r13
    3996:	ae 04       	cpc	r10, r14
    3998:	bf 04       	cpc	r11, r15
    399a:	40 f0       	brcs	.+16     	; 0x39ac <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    399c:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    39a0:	a5 01       	movw	r20, r10
    39a2:	94 01       	movw	r18, r8
    39a4:	c7 01       	movw	r24, r14
    39a6:	b6 01       	movw	r22, r12
    39a8:	81 df       	rcall	.-254    	; 0x38ac <prvProcessExpiredTimer>
    39aa:	20 c0       	rjmp	.+64     	; 0x39ec <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    39ac:	11 23       	and	r17, r17
    39ae:	41 f0       	breq	.+16     	; 0x39c0 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    39b0:	e0 91 d9 17 	lds	r30, 0x17D9	; 0x8017d9 <pxOverflowTimerList>
    39b4:	f0 91 da 17 	lds	r31, 0x17DA	; 0x8017da <pxOverflowTimerList+0x1>
    39b8:	80 81       	ld	r24, Z
    39ba:	11 e0       	ldi	r17, 0x01	; 1
    39bc:	81 11       	cpse	r24, r1
    39be:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    39c0:	b7 01       	movw	r22, r14
    39c2:	a6 01       	movw	r20, r12
    39c4:	48 19       	sub	r20, r8
    39c6:	59 09       	sbc	r21, r9
    39c8:	6a 09       	sbc	r22, r10
    39ca:	7b 09       	sbc	r23, r11
    39cc:	21 2f       	mov	r18, r17
    39ce:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    39d2:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    39d6:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    39da:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>
    39de:	81 11       	cpse	r24, r1
    39e0:	05 c0       	rjmp	.+10     	; 0x39ec <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    39e2:	0e 94 9a 06 	call	0xd34	; 0xd34 <vPortYield>
    39e6:	02 c0       	rjmp	.+4      	; 0x39ec <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    39e8:	0e 94 06 12 	call	0x240c	; 0x240c <xTaskResumeAll>
            }
        }
    }
    39ec:	0f 90       	pop	r0
    39ee:	df 91       	pop	r29
    39f0:	cf 91       	pop	r28
    39f2:	1f 91       	pop	r17
    39f4:	ff 90       	pop	r15
    39f6:	ef 90       	pop	r14
    39f8:	df 90       	pop	r13
    39fa:	cf 90       	pop	r12
    39fc:	bf 90       	pop	r11
    39fe:	af 90       	pop	r10
    3a00:	9f 90       	pop	r9
    3a02:	8f 90       	pop	r8
    3a04:	08 95       	ret

00003a06 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    3a06:	af 92       	push	r10
    3a08:	bf 92       	push	r11
    3a0a:	cf 92       	push	r12
    3a0c:	df 92       	push	r13
    3a0e:	ef 92       	push	r14
    3a10:	ff 92       	push	r15
    3a12:	0f 93       	push	r16
    3a14:	1f 93       	push	r17
    3a16:	cf 93       	push	r28
    3a18:	df 93       	push	r29
    3a1a:	cd b7       	in	r28, 0x3d	; 61
    3a1c:	de b7       	in	r29, 0x3e	; 62
    3a1e:	28 97       	sbiw	r28, 0x08	; 8
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3a2a:	82 c0       	rjmp	.+260    	; 0x3b30 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	88 23       	and	r24, r24
    3a30:	0c f4       	brge	.+2      	; 0x3a34 <prvProcessReceivedCommands+0x2e>
    3a32:	7e c0       	rjmp	.+252    	; 0x3b30 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3a34:	ae 80       	ldd	r10, Y+6	; 0x06
    3a36:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3a38:	d5 01       	movw	r26, r10
    3a3a:	1c 96       	adiw	r26, 0x0c	; 12
    3a3c:	8d 91       	ld	r24, X+
    3a3e:	9c 91       	ld	r25, X
    3a40:	1d 97       	sbiw	r26, 0x0d	; 13
    3a42:	89 2b       	or	r24, r25
    3a44:	21 f0       	breq	.+8      	; 0x3a4e <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a46:	c5 01       	movw	r24, r10
    3a48:	02 96       	adiw	r24, 0x02	; 2
    3a4a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a4e:	ce 01       	movw	r24, r28
    3a50:	08 96       	adiw	r24, 0x08	; 8
    3a52:	fe de       	rcall	.-516    	; 0x3850 <prvSampleTimeNow>
    3a54:	8b 01       	movw	r16, r22
    3a56:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3a58:	e9 81       	ldd	r30, Y+1	; 0x01
    3a5a:	0e 2e       	mov	r0, r30
    3a5c:	00 0c       	add	r0, r0
    3a5e:	ff 0b       	sbc	r31, r31
    3a60:	ea 30       	cpi	r30, 0x0A	; 10
    3a62:	f1 05       	cpc	r31, r1
    3a64:	08 f0       	brcs	.+2      	; 0x3a68 <prvProcessReceivedCommands+0x62>
    3a66:	64 c0       	rjmp	.+200    	; 0x3b30 <prvProcessReceivedCommands+0x12a>
    3a68:	88 27       	eor	r24, r24
    3a6a:	ee 58       	subi	r30, 0x8E	; 142
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a70:	0c 94 76 33 	jmp	0x66ec	; 0x66ec <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3a74:	f5 01       	movw	r30, r10
    3a76:	86 89       	ldd	r24, Z+22	; 0x16
    3a78:	81 60       	ori	r24, 0x01	; 1
    3a7a:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3a7c:	ca 80       	ldd	r12, Y+2	; 0x02
    3a7e:	db 80       	ldd	r13, Y+3	; 0x03
    3a80:	ec 80       	ldd	r14, Y+4	; 0x04
    3a82:	fd 80       	ldd	r15, Y+5	; 0x05
    3a84:	46 85       	ldd	r20, Z+14	; 0x0e
    3a86:	57 85       	ldd	r21, Z+15	; 0x0f
    3a88:	60 89       	ldd	r22, Z+16	; 0x10
    3a8a:	71 89       	ldd	r23, Z+17	; 0x11
    3a8c:	4c 0d       	add	r20, r12
    3a8e:	5d 1d       	adc	r21, r13
    3a90:	6e 1d       	adc	r22, r14
    3a92:	7f 1d       	adc	r23, r15
    3a94:	c5 01       	movw	r24, r10
    3a96:	83 dd       	rcall	.-1274   	; 0x359e <prvInsertTimerInActiveList>
    3a98:	88 23       	and	r24, r24
    3a9a:	09 f4       	brne	.+2      	; 0x3a9e <prvProcessReceivedCommands+0x98>
    3a9c:	49 c0       	rjmp	.+146    	; 0x3b30 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a9e:	d5 01       	movw	r26, r10
    3aa0:	54 96       	adiw	r26, 0x14	; 20
    3aa2:	ed 91       	ld	r30, X+
    3aa4:	fc 91       	ld	r31, X
    3aa6:	55 97       	sbiw	r26, 0x15	; 21
    3aa8:	c5 01       	movw	r24, r10
    3aaa:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3aac:	f5 01       	movw	r30, r10
    3aae:	86 89       	ldd	r24, Z+22	; 0x16
    3ab0:	82 ff       	sbrs	r24, 2
    3ab2:	3e c0       	rjmp	.+124    	; 0x3b30 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3ab4:	4a 81       	ldd	r20, Y+2	; 0x02
    3ab6:	5b 81       	ldd	r21, Y+3	; 0x03
    3ab8:	6c 81       	ldd	r22, Y+4	; 0x04
    3aba:	7d 81       	ldd	r23, Y+5	; 0x05
    3abc:	86 85       	ldd	r24, Z+14	; 0x0e
    3abe:	97 85       	ldd	r25, Z+15	; 0x0f
    3ac0:	a0 89       	ldd	r26, Z+16	; 0x10
    3ac2:	b1 89       	ldd	r27, Z+17	; 0x11
    3ac4:	9a 01       	movw	r18, r20
    3ac6:	ab 01       	movw	r20, r22
    3ac8:	28 0f       	add	r18, r24
    3aca:	39 1f       	adc	r19, r25
    3acc:	4a 1f       	adc	r20, r26
    3ace:	5b 1f       	adc	r21, r27
    3ad0:	c1 2c       	mov	r12, r1
    3ad2:	d1 2c       	mov	r13, r1
    3ad4:	76 01       	movw	r14, r12
    3ad6:	00 e0       	ldi	r16, 0x00	; 0
    3ad8:	10 e0       	ldi	r17, 0x00	; 0
    3ada:	60 e0       	ldi	r22, 0x00	; 0
    3adc:	c5 01       	movw	r24, r10
    3ade:	f2 dd       	rcall	.-1052   	; 0x36c4 <xTimerGenericCommand>
    3ae0:	27 c0       	rjmp	.+78     	; 0x3b30 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3ae2:	d5 01       	movw	r26, r10
    3ae4:	56 96       	adiw	r26, 0x16	; 22
    3ae6:	8c 91       	ld	r24, X
    3ae8:	56 97       	sbiw	r26, 0x16	; 22
    3aea:	8e 7f       	andi	r24, 0xFE	; 254
    3aec:	56 96       	adiw	r26, 0x16	; 22
    3aee:	8c 93       	st	X, r24
                        break;
    3af0:	1f c0       	rjmp	.+62     	; 0x3b30 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3af2:	f5 01       	movw	r30, r10
    3af4:	86 89       	ldd	r24, Z+22	; 0x16
    3af6:	81 60       	ori	r24, 0x01	; 1
    3af8:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3afa:	4a 81       	ldd	r20, Y+2	; 0x02
    3afc:	5b 81       	ldd	r21, Y+3	; 0x03
    3afe:	6c 81       	ldd	r22, Y+4	; 0x04
    3b00:	7d 81       	ldd	r23, Y+5	; 0x05
    3b02:	46 87       	std	Z+14, r20	; 0x0e
    3b04:	57 87       	std	Z+15, r21	; 0x0f
    3b06:	60 8b       	std	Z+16, r22	; 0x10
    3b08:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3b0a:	40 0f       	add	r20, r16
    3b0c:	51 1f       	adc	r21, r17
    3b0e:	62 1f       	adc	r22, r18
    3b10:	73 1f       	adc	r23, r19
    3b12:	68 01       	movw	r12, r16
    3b14:	79 01       	movw	r14, r18
    3b16:	c5 01       	movw	r24, r10
    3b18:	42 dd       	rcall	.-1404   	; 0x359e <prvInsertTimerInActiveList>
                        break;
    3b1a:	0a c0       	rjmp	.+20     	; 0x3b30 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3b1c:	f5 01       	movw	r30, r10
    3b1e:	86 89       	ldd	r24, Z+22	; 0x16
    3b20:	81 fd       	sbrc	r24, 1
    3b22:	04 c0       	rjmp	.+8      	; 0x3b2c <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3b24:	c5 01       	movw	r24, r10
    3b26:	0e 94 8f 05 	call	0xb1e	; 0xb1e <vPortFree>
    3b2a:	02 c0       	rjmp	.+4      	; 0x3b30 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b2c:	8e 7f       	andi	r24, 0xFE	; 254
    3b2e:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	a9 01       	movw	r20, r18
    3b36:	be 01       	movw	r22, r28
    3b38:	6f 5f       	subi	r22, 0xFF	; 255
    3b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3c:	80 91 d7 17 	lds	r24, 0x17D7	; 0x8017d7 <xTimerQueue>
    3b40:	90 91 d8 17 	lds	r25, 0x17D8	; 0x8017d8 <xTimerQueue+0x1>
    3b44:	0e 94 9d 09 	call	0x133a	; 0x133a <xQueueReceive>
    3b48:	81 11       	cpse	r24, r1
    3b4a:	70 cf       	rjmp	.-288    	; 0x3a2c <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3b4c:	28 96       	adiw	r28, 0x08	; 8
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	de bf       	out	0x3e, r29	; 62
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	df 91       	pop	r29
    3b5a:	cf 91       	pop	r28
    3b5c:	1f 91       	pop	r17
    3b5e:	0f 91       	pop	r16
    3b60:	ff 90       	pop	r15
    3b62:	ef 90       	pop	r14
    3b64:	df 90       	pop	r13
    3b66:	cf 90       	pop	r12
    3b68:	bf 90       	pop	r11
    3b6a:	af 90       	pop	r10
    3b6c:	08 95       	ret

00003b6e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3b6e:	08 95       	ret

00003b70 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3b70:	84 b1       	in	r24, 0x04	; 4
    3b72:	80 68       	ori	r24, 0x80	; 128
    3b74:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3b76:	85 b1       	in	r24, 0x05	; 5
    3b78:	80 68       	ori	r24, 0x80	; 128
    3b7a:	85 b9       	out	0x05, r24	; 5
    3b7c:	08 95       	ret

00003b7e <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3b7e:	83 b1       	in	r24, 0x03	; 3
    3b80:	80 68       	ori	r24, 0x80	; 128
    3b82:	83 b9       	out	0x03, r24	; 3
    3b84:	08 95       	ret

00003b86 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3b86:	f4 df       	rcall	.-24     	; 0x3b70 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b88:	2f ef       	ldi	r18, 0xFF	; 255
    3b8a:	80 e7       	ldi	r24, 0x70	; 112
    3b8c:	92 e0       	ldi	r25, 0x02	; 2
    3b8e:	21 50       	subi	r18, 0x01	; 1
    3b90:	80 40       	sbci	r24, 0x00	; 0
    3b92:	90 40       	sbci	r25, 0x00	; 0
    3b94:	e1 f7       	brne	.-8      	; 0x3b8e <vApplicationMallocFailedHook+0x8>
    3b96:	00 c0       	rjmp	.+0      	; 0x3b98 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3b98:	00 00       	nop
    3b9a:	f1 df       	rcall	.-30     	; 0x3b7e <prvBlinkMainLed>
    3b9c:	f5 cf       	rjmp	.-22     	; 0x3b88 <vApplicationMallocFailedHook+0x2>

00003b9e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    3b9e:	e8 df       	rcall	.-48     	; 0x3b70 <prvSetMainLedOn>
    3ba0:	2f ef       	ldi	r18, 0xFF	; 255
    3ba2:	87 ea       	ldi	r24, 0xA7	; 167
    3ba4:	91 e6       	ldi	r25, 0x61	; 97
    3ba6:	21 50       	subi	r18, 0x01	; 1
    3ba8:	80 40       	sbci	r24, 0x00	; 0
    3baa:	90 40       	sbci	r25, 0x00	; 0
    3bac:	e1 f7       	brne	.-8      	; 0x3ba6 <vApplicationStackOverflowHook+0x8>
    3bae:	00 c0       	rjmp	.+0      	; 0x3bb0 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    3bb0:	00 00       	nop
    3bb2:	e5 df       	rcall	.-54     	; 0x3b7e <prvBlinkMainLed>
    3bb4:	f5 cf       	rjmp	.-22     	; 0x3ba0 <vApplicationStackOverflowHook+0x2>

00003bb6 <set_temperature_percent>:
static uint16_t humidityPercent;
static uint16_t CO2_PPM;
static uint8_t status = 0x10;

void set_temperature_percent(int16_t temperature){
	temperaturePercent = temperature;
    3bb6:	90 93 f8 17 	sts	0x17F8, r25	; 0x8017f8 <temperaturePercent+0x1>
    3bba:	80 93 f7 17 	sts	0x17F7, r24	; 0x8017f7 <temperaturePercent>
    3bbe:	08 95       	ret

00003bc0 <set_humidity_percent>:
}

void set_humidity_percent(uint16_t humidity){
	humidityPercent = humidity;
    3bc0:	90 93 f6 17 	sts	0x17F6, r25	; 0x8017f6 <humidityPercent+0x1>
    3bc4:	80 93 f5 17 	sts	0x17F5, r24	; 0x8017f5 <humidityPercent>
    3bc8:	08 95       	ret

00003bca <set_CO2_ppm>:
}

void set_CO2_ppm(uint16_t co2ppm){
	CO2_PPM = co2ppm;
    3bca:	90 93 f4 17 	sts	0x17F4, r25	; 0x8017f4 <CO2_PPM+0x1>
    3bce:	80 93 f3 17 	sts	0x17F3, r24	; 0x8017f3 <CO2_PPM>
    3bd2:	08 95       	ret

00003bd4 <get_lora_package>:
}

lora_driver_payload_t get_lora_package(uint8_t port){
    3bd4:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	payload.portNo = port;
    3bd6:	60 83       	st	Z, r22
	payload.len = PAYLOAD_SIZE;
    3bd8:	87 e0       	ldi	r24, 0x07	; 7
    3bda:	81 83       	std	Z+1, r24	; 0x01
	payload.bytes[0] = temperaturePercent >> 8;
    3bdc:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <temperaturePercent>
    3be0:	90 91 f8 17 	lds	r25, 0x17F8	; 0x8017f8 <temperaturePercent+0x1>
    3be4:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = temperaturePercent;
    3be6:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = humidityPercent >> 8;
    3be8:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <humidityPercent>
    3bec:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <humidityPercent+0x1>
    3bf0:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = humidityPercent;
    3bf2:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = CO2_PPM >> 8;
    3bf4:	80 91 f3 17 	lds	r24, 0x17F3	; 0x8017f3 <CO2_PPM>
    3bf8:	90 91 f4 17 	lds	r25, 0x17F4	; 0x8017f4 <CO2_PPM+0x1>
    3bfc:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = CO2_PPM;
    3bfe:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = status;
    3c00:	80 e1       	ldi	r24, 0x10	; 16
    3c02:	80 87       	std	Z+8, r24	; 0x08
	
	return payload;
    3c04:	cf 01       	movw	r24, r30
    3c06:	08 95       	ret

00003c08 <myCo2CallBack>:


void myCo2CallBack(uint16_t ppm_parameter)
{
	// Here you can use the CO2 ppm value
	lastCO2ppm = ppm_parameter;
    3c08:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <lastCO2ppm+0x1>
    3c0c:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <lastCO2ppm>
    3c10:	08 95       	ret

00003c12 <CO2_createSensor>:
	//Note
	//If FreeRTOS is used then the initialise function Initialise the driver must be called before
	//	vTaskStartScheduler()
	//is called.

	mh_z19_initialise(ser_USART3);
    3c12:	83 e0       	ldi	r24, 0x03	; 3
    3c14:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <mh_z19_initialise>

	//If it is wanted to inject a call-back function, then it must be done like this
	mh_z19_injectCallBack(myCo2CallBack);
    3c18:	84 e0       	ldi	r24, 0x04	; 4
    3c1a:	9e e1       	ldi	r25, 0x1E	; 30
    3c1c:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <mh_z19_injectCallBack>
    3c20:	08 95       	ret

00003c22 <CO2_measure>:
}

void CO2_measure() {
	//Driver must be initialized before

	rc = mh_z19_takeMeassuring();
    3c22:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <mh_z19_takeMeassuring>
    3c26:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <rc>
	if (rc != MHZ19_OK)
    3c2a:	88 23       	and	r24, r24
    3c2c:	41 f0       	breq	.+16     	; 0x3c3e <CO2_measure+0x1c>
	{
		// Something went wrong
		printf("  SOmething went wrong while measuring CO2!!!  ");
    3c2e:	86 e6       	ldi	r24, 0x66	; 102
    3c30:	93 e0       	ldi	r25, 0x03	; 3
    3c32:	9f 93       	push	r25
    3c34:	8f 93       	push	r24
    3c36:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0

	}
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
    3c3e:	89 ef       	ldi	r24, 0xF9	; 249
    3c40:	97 e1       	ldi	r25, 0x17	; 23
    3c42:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <mh_z19_getCo2Ppm>
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <lastCO2ppm+0x1>
    3c4c:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <lastCO2ppm>
    3c50:	08 95       	ret

00003c52 <MeasureCo2Task>:
	while(1){
		
		
		//Usage of Event group Wait fun until co2 measure bit is set to 1 
		
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,CO2_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3c52:	cc 24       	eor	r12, r12
    3c54:	ca 94       	dec	r12
    3c56:	dc 2c       	mov	r13, r12
    3c58:	76 01       	movw	r14, r12
    3c5a:	01 e0       	ldi	r16, 0x01	; 1
    3c5c:	21 e0       	ldi	r18, 0x01	; 1
    3c5e:	41 e0       	ldi	r20, 0x01	; 1
    3c60:	50 e0       	ldi	r21, 0x00	; 0
    3c62:	60 e0       	ldi	r22, 0x00	; 0
    3c64:	70 e0       	ldi	r23, 0x00	; 0
    3c66:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <measureEventGroup>
    3c6a:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <measureEventGroup+0x1>
    3c6e:	0e 94 45 03 	call	0x68a	; 0x68a <xEventGroupWaitBits>
		
			if ((uxBits & (CO2_MEASURE_BIT)) == CO2_MEASURE_BIT)
    3c72:	60 ff       	sbrs	r22, 0
    3c74:	ee cf       	rjmp	.-36     	; 0x3c52 <MeasureCo2Task>
			{
				//printf("Measure bit and event bit was successfully checked ");
				
				CO2_measure();
    3c76:	d5 df       	rcall	.-86     	; 0x3c22 <CO2_measure>
				
				//printf("Measurement successful , now time to set ready bit of c02 ");
				
				xEventGroupSetBits(dataReadyEventGroup,CO2_READY_BIT);
    3c78:	42 e0       	ldi	r20, 0x02	; 2
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	60 e0       	ldi	r22, 0x00	; 0
    3c7e:	70 e0       	ldi	r23, 0x00	; 0
    3c80:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <dataReadyEventGroup>
    3c84:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <dataReadyEventGroup+0x1>
    3c88:	0e 94 e5 03 	call	0x7ca	; 0x7ca <xEventGroupSetBits>
    3c8c:	e2 cf       	rjmp	.-60     	; 0x3c52 <MeasureCo2Task>

00003c8e <CO2_getPPM>:
	lastCO2ppm = mh_z19_getCo2Ppm(&lastCO2ppm);
}

uint16_t CO2_getPPM() {
	return lastCO2ppm;
}
    3c8e:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <lastCO2ppm>
    3c92:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <lastCO2ppm+0x1>
    3c96:	08 95       	ret

00003c98 <create_CO2_sensor_task>:



//To start the task and get measurement , calling it from Application and need to initialize c02 before starting task
void create_CO2_sensor_task(UBaseType_t priority){
    3c98:	ef 92       	push	r14
    3c9a:	ff 92       	push	r15
    3c9c:	0f 93       	push	r16
    3c9e:	08 2f       	mov	r16, r24
	
	//Initializing 
		CO2_createSensor();
    3ca0:	b8 df       	rcall	.-144    	; 0x3c12 <CO2_createSensor>
	
	//Starting task
		xTaskCreate(
    3ca2:	e1 2c       	mov	r14, r1
    3ca4:	f1 2c       	mov	r15, r1
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 ec       	ldi	r20, 0xC0	; 192
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	66 e9       	ldi	r22, 0x96	; 150
    3cb0:	73 e0       	ldi	r23, 0x03	; 3
    3cb2:	89 e2       	ldi	r24, 0x29	; 41
    3cb4:	9e e1       	ldi	r25, 0x1E	; 30
    3cb6:	0e 94 42 10 	call	0x2084	; 0x2084 <xTaskCreate>
		"MeasuringCO2_Task",
		configMINIMAL_STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY + priority,
		NULL);
}
    3cba:	0f 91       	pop	r16
    3cbc:	ff 90       	pop	r15
    3cbe:	ef 90       	pop	r14
    3cc0:	08 95       	ret

00003cc2 <initialise_TempHumSensor>:
void Temp_Hum_Main_Task(void *pvParameters);


void initialise_TempHumSensor()
{
	if ( HIH8120_OK == hih8120_initialise() )
    3cc2:	61 d2       	rcall	.+1218   	; 0x4186 <hih8120_initialise>
    3cc4:	88 23       	and	r24, r24
    3cc6:	41 f0       	breq	.+16     	; 0x3cd8 <initialise_TempHumSensor+0x16>
		// Always check what hih8120_initialise() returns
		
	}
	else 
	{
		printf("Something went wrong while initialising tempHum sensor");
    3cc8:	88 ea       	ldi	r24, 0xA8	; 168
    3cca:	93 e0       	ldi	r25, 0x03	; 3
    3ccc:	9f 93       	push	r25
    3cce:	8f 93       	push	r24
    3cd0:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	08 95       	ret

00003cda <create_TempHum_sensor_task>:
	}
}


void create_TempHum_sensor_task(UBaseType_t priority){
    3cda:	ef 92       	push	r14
    3cdc:	ff 92       	push	r15
    3cde:	0f 93       	push	r16
    3ce0:	08 2f       	mov	r16, r24
	initialise_TempHumSensor();
    3ce2:	ef df       	rcall	.-34     	; 0x3cc2 <initialise_TempHumSensor>
	
	xTaskCreate(Temp_Hum_Main_Task,
    3ce4:	e1 2c       	mov	r14, r1
    3ce6:	f1 2c       	mov	r15, r1
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 ec       	ldi	r20, 0xC0	; 192
    3cee:	50 e0       	ldi	r21, 0x00	; 0
    3cf0:	6f ed       	ldi	r22, 0xDF	; 223
    3cf2:	73 e0       	ldi	r23, 0x03	; 3
    3cf4:	81 eb       	ldi	r24, 0xB1	; 177
    3cf6:	9e e1       	ldi	r25, 0x1E	; 30
    3cf8:	0e 94 42 10 	call	0x2084	; 0x2084 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	tskIDLE_PRIORITY + priority,
	NULL);
	
}
    3cfc:	0f 91       	pop	r16
    3cfe:	ff 90       	pop	r15
    3d00:	ef 90       	pop	r14
    3d02:	08 95       	ret

00003d04 <measure_Temp_Hum>:

void measure_Temp_Hum(){
	
	if ( HIH8120_OK != hih8120_wakeup() )
    3d04:	58 d2       	rcall	.+1200   	; 0x41b6 <hih8120_wakeup>
    3d06:	88 23       	and	r24, r24
    3d08:	21 f0       	breq	.+8      	; 0x3d12 <measure_Temp_Hum+0xe>
	{
		printf("Could not wake up temp hum sensor \n");
    3d0a:	8b ee       	ldi	r24, 0xEB	; 235
    3d0c:	93 e0       	ldi	r25, 0x03	; 3
    3d0e:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <puts>
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(60));
    3d12:	63 e0       	ldi	r22, 0x03	; 3
    3d14:	70 e0       	ldi	r23, 0x00	; 0
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	0e 94 47 13 	call	0x268e	; 0x268e <vTaskDelay>
	int16_t returnCode = hih8120_measure();
    3d1e:	60 d2       	rcall	.+1216   	; 0x41e0 <hih8120_measure>
		case HIH8120_OUT_OF_HEAP: returnCodeString = "HIH8120_OUT_OF_HEAP";								/**< Not enough heap to initialise the driver */
		case HIH8120_DRIVER_NOT_INITIALISED: returnCodeString = "HIH8120_DRIVER_NOT_INITIALISED";		/**< Driver must be initialise before use */
		case HIH8120_TWI_BUSY: returnCodeString = "HIH8120_TWI_BUSY";									/**< The two wire/I2C interface is busy */
	}
	
	if ( returnCode != HIH8120_OK  )
    3d20:	88 23       	and	r24, r24
    3d22:	71 f0       	breq	.+28     	; 0x3d40 <measure_Temp_Hum+0x3c>
	{
		printf("Could not measure temp hum sensor, code: %s \n", returnCodeString);
    3d24:	8e e0       	ldi	r24, 0x0E	; 14
    3d26:	94 e0       	ldi	r25, 0x04	; 4
    3d28:	9f 93       	push	r25
    3d2a:	8f 93       	push	r24
    3d2c:	8f e1       	ldi	r24, 0x1F	; 31
    3d2e:	94 e0       	ldi	r25, 0x04	; 4
    3d30:	9f 93       	push	r25
    3d32:	8f 93       	push	r24
    3d34:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    3d38:	0f 90       	pop	r0
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	0f 90       	pop	r0
		// Something went wrong
		// Investigate the return code further
	}
	vTaskDelay(pdMS_TO_TICKS(50));
    3d40:	63 e0       	ldi	r22, 0x03	; 3
    3d42:	70 e0       	ldi	r23, 0x00	; 0
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	0e 94 47 13 	call	0x268e	; 0x268e <vTaskDelay>
	humidity = hih8120_getHumidityPercent_x10();
    3d4c:	6f d2       	rcall	.+1246   	; 0x422c <hih8120_getHumidityPercent_x10>
    3d4e:	90 93 fe 17 	sts	0x17FE, r25	; 0x8017fe <humidity+0x1>
    3d52:	80 93 fd 17 	sts	0x17FD, r24	; 0x8017fd <humidity>
	temperature = hih8120_getTemperature_x10();
    3d56:	90 d2       	rcall	.+1312   	; 0x4278 <hih8120_getTemperature_x10>
    3d58:	90 93 fc 17 	sts	0x17FC, r25	; 0x8017fc <temperature+0x1>
    3d5c:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <temperature>
    3d60:	08 95       	ret

00003d62 <Temp_Hum_Main_Task>:


void Temp_Hum_Main_Task(void *pvParameters){
	
	while(1){
		EventBits_t uxBits = xEventGroupWaitBits(measureEventGroup,TEMP_HUM_MEASURE_BIT,pdTRUE,pdTRUE,portMAX_DELAY);
    3d62:	cc 24       	eor	r12, r12
    3d64:	ca 94       	dec	r12
    3d66:	dc 2c       	mov	r13, r12
    3d68:	76 01       	movw	r14, r12
    3d6a:	01 e0       	ldi	r16, 0x01	; 1
    3d6c:	21 e0       	ldi	r18, 0x01	; 1
    3d6e:	44 e0       	ldi	r20, 0x04	; 4
    3d70:	50 e0       	ldi	r21, 0x00	; 0
    3d72:	60 e0       	ldi	r22, 0x00	; 0
    3d74:	70 e0       	ldi	r23, 0x00	; 0
    3d76:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <measureEventGroup>
    3d7a:	90 91 4a 19 	lds	r25, 0x194A	; 0x80194a <measureEventGroup+0x1>
    3d7e:	0e 94 45 03 	call	0x68a	; 0x68a <xEventGroupWaitBits>
		
		if (uxBits &(TEMP_HUM_MEASURE_BIT))
    3d82:	62 ff       	sbrs	r22, 2
    3d84:	ee cf       	rjmp	.-36     	; 0x3d62 <Temp_Hum_Main_Task>
		{
			measure_Temp_Hum();			
    3d86:	be df       	rcall	.-132    	; 0x3d04 <measure_Temp_Hum>
			//After everything is done just setting 1 to ready bit so its now unblocked 
			xEventGroupSetBits(dataReadyEventGroup,TEMP_HUM_READY_BIT);
    3d88:	48 e0       	ldi	r20, 0x08	; 8
    3d8a:	50 e0       	ldi	r21, 0x00	; 0
    3d8c:	60 e0       	ldi	r22, 0x00	; 0
    3d8e:	70 e0       	ldi	r23, 0x00	; 0
    3d90:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <dataReadyEventGroup>
    3d94:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <dataReadyEventGroup+0x1>
    3d98:	0e 94 e5 03 	call	0x7ca	; 0x7ca <xEventGroupSetBits>
    3d9c:	e2 cf       	rjmp	.-60     	; 0x3d62 <Temp_Hum_Main_Task>

00003d9e <TempHumSensor_getTemp>:
	temperature = hih8120_getTemperature_x10();
}
	
int16_t TempHumSensor_getTemp(){
	return temperature;
}
    3d9e:	80 91 fb 17 	lds	r24, 0x17FB	; 0x8017fb <temperature>
    3da2:	90 91 fc 17 	lds	r25, 0x17FC	; 0x8017fc <temperature+0x1>
    3da6:	08 95       	ret

00003da8 <TempHumSensor_getHum>:
	
uint16_t TempHumSensor_getHum(){
	return humidity;
}
    3da8:	80 91 fd 17 	lds	r24, 0x17FD	; 0x8017fd <humidity>
    3dac:	90 91 fe 17 	lds	r25, 0x17FE	; 0x8017fe <humidity+0x1>
    3db0:	08 95       	ret

00003db2 <initialize_event_groups>:
MessageBufferHandle_t downlinkMessageBufferHandle;
SemaphoreHandle_t configSemaphore;


void initialize_event_groups(){
	dataReadyEventGroup = xEventGroupCreate();
    3db2:	0e 94 32 03 	call	0x664	; 0x664 <xEventGroupCreate>
    3db6:	90 93 48 19 	sts	0x1948, r25	; 0x801948 <dataReadyEventGroup+0x1>
    3dba:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <dataReadyEventGroup>
	measureEventGroup = xEventGroupCreate();
    3dbe:	0e 94 32 03 	call	0x664	; 0x664 <xEventGroupCreate>
    3dc2:	90 93 4a 19 	sts	0x194A, r25	; 0x80194a <measureEventGroup+0x1>
    3dc6:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <measureEventGroup>
    3dca:	08 95       	ret

00003dcc <initialize_message_buffers>:
}

void initialize_message_buffers(){
	uplinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3dcc:	41 e0       	ldi	r20, 0x01	; 1
    3dce:	60 e0       	ldi	r22, 0x00	; 0
    3dd0:	70 e0       	ldi	r23, 0x00	; 0
    3dd2:	8c e2       	ldi	r24, 0x2C	; 44
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <xStreamBufferGenericCreate>
    3dda:	90 93 4c 19 	sts	0x194C, r25	; 0x80194c <uplinkMessageBufferHandle+0x1>
    3dde:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <uplinkMessageBufferHandle>
	if(uplinkMessageBufferHandle == NULL){
    3de2:	89 2b       	or	r24, r25
    3de4:	21 f4       	brne	.+8      	; 0x3dee <initialize_message_buffers+0x22>
		printf("Failed to create uplink message buffer.\n");
    3de6:	8d e4       	ldi	r24, 0x4D	; 77
    3de8:	94 e0       	ldi	r25, 0x04	; 4
    3dea:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <puts>
	}
	downlinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t)*2);
    3dee:	41 e0       	ldi	r20, 0x01	; 1
    3df0:	60 e0       	ldi	r22, 0x00	; 0
    3df2:	70 e0       	ldi	r23, 0x00	; 0
    3df4:	8c e2       	ldi	r24, 0x2C	; 44
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	0e 94 3c 0c 	call	0x1878	; 0x1878 <xStreamBufferGenericCreate>
    3dfc:	90 93 4e 19 	sts	0x194E, r25	; 0x80194e <downlinkMessageBufferHandle+0x1>
    3e00:	80 93 4d 19 	sts	0x194D, r24	; 0x80194d <downlinkMessageBufferHandle>
	if(downlinkMessageBufferHandle == NULL){
    3e04:	89 2b       	or	r24, r25
    3e06:	21 f4       	brne	.+8      	; 0x3e10 <initialize_message_buffers+0x44>
		printf("Failed to create downlink message buffer.\n");
    3e08:	85 e7       	ldi	r24, 0x75	; 117
    3e0a:	94 e0       	ldi	r25, 0x04	; 4
    3e0c:	0c 94 54 36 	jmp	0x6ca8	; 0x6ca8 <puts>
    3e10:	08 95       	ret

00003e12 <initialize_semaphore>:
	}
}

 void initialize_semaphore(){
    3e12:	0f 93       	push	r16
 	configSemaphore = xSemaphoreCreateMutex();
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	0e 94 56 09 	call	0x12ac	; 0x12ac <xQueueCreateMutex>
    3e1a:	90 93 46 19 	sts	0x1946, r25	; 0x801946 <configSemaphore+0x1>
    3e1e:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <configSemaphore>
	 if(configSemaphore != NULL){
    3e22:	00 97       	sbiw	r24, 0x00	; 0
    3e24:	49 f0       	breq	.+18     	; 0x3e38 <initialize_semaphore+0x26>
		 xSemaphoreGive(configSemaphore);
    3e26:	00 e0       	ldi	r16, 0x00	; 0
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	a9 01       	movw	r20, r18
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	70 e0       	ldi	r23, 0x00	; 0
    3e32:	0e 94 b2 08 	call	0x1164	; 0x1164 <xQueueGenericSend>
    3e36:	08 c0       	rjmp	.+16     	; 0x3e48 <initialize_semaphore+0x36>
	 }
	 else{
		 printf("Failed to create config semaphore");
    3e38:	8f e9       	ldi	r24, 0x9F	; 159
    3e3a:	94 e0       	ldi	r25, 0x04	; 4
    3e3c:	9f 93       	push	r25
    3e3e:	8f 93       	push	r24
    3e40:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    3e44:	0f 90       	pop	r0
    3e46:	0f 90       	pop	r0
	 }
 }
    3e48:	0f 91       	pop	r16
    3e4a:	08 95       	ret

00003e4c <_lora_setup>:
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}

static void _lora_setup(void)
{
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	cd b7       	in	r28, 0x3d	; 61
    3e56:	de b7       	in	r29, 0x3e	; 62
    3e58:	64 97       	sbiw	r28, 0x14	; 20
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	0e 94 88 2b 	call	0x5710	; 0x5710 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3e6a:	7e d3       	rcall	.+1788   	; 0x4568 <lora_driver_rn2483FactoryReset>
    3e6c:	fa d5       	rcall	.+3060   	; 0x4a62 <lora_driver_mapReturnCodeToText>
    3e6e:	9f 93       	push	r25
    3e70:	8f 93       	push	r24
    3e72:	81 ec       	ldi	r24, 0xC1	; 193
    3e74:	94 e0       	ldi	r25, 0x04	; 4
    3e76:	9f 93       	push	r25
    3e78:	8f 93       	push	r24
    3e7a:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3e7e:	f2 d4       	rcall	.+2532   	; 0x4864 <lora_driver_configureToEu868>
    3e80:	f0 d5       	rcall	.+3040   	; 0x4a62 <lora_driver_mapReturnCodeToText>
    3e82:	9f 93       	push	r25
    3e84:	8f 93       	push	r24
    3e86:	84 ed       	ldi	r24, 0xD4	; 212
    3e88:	94 e0       	ldi	r25, 0x04	; 4
    3e8a:	9f 93       	push	r25
    3e8c:	8f 93       	push	r24
    3e8e:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    3e92:	8e 01       	movw	r16, r28
    3e94:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3e96:	1f 4f       	sbci	r17, 0xFF	; 255
    3e98:	c8 01       	movw	r24, r16
    3e9a:	78 d3       	rcall	.+1776   	; 0x458c <lora_driver_getRn2483Hweui>
    3e9c:	e2 d5       	rcall	.+3012   	; 0x4a62 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3e9e:	1f 93       	push	r17
    3ea0:	0f 93       	push	r16
    3ea2:	9f 93       	push	r25
    3ea4:	8f 93       	push	r24
    3ea6:	8d ee       	ldi	r24, 0xED	; 237
    3ea8:	94 e0       	ldi	r25, 0x04	; 4
    3eaa:	9f 93       	push	r25
    3eac:	8f 93       	push	r24
    3eae:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3eb2:	c8 01       	movw	r24, r16
    3eb4:	87 d3       	rcall	.+1806   	; 0x45c4 <lora_driver_setDeviceIdentifier>
    3eb6:	d5 d5       	rcall	.+2986   	; 0x4a62 <lora_driver_mapReturnCodeToText>
    3eb8:	9f 93       	push	r25
    3eba:	8f 93       	push	r24
    3ebc:	1f 93       	push	r17
    3ebe:	0f 93       	push	r16
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	95 e0       	ldi	r25, 0x05	; 5
    3ec4:	9f 93       	push	r25
    3ec6:	8f 93       	push	r24
    3ec8:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3ecc:	a8 01       	movw	r20, r16
    3ece:	66 e1       	ldi	r22, 0x16	; 22
    3ed0:	75 e0       	ldi	r23, 0x05	; 5
    3ed2:	87 e3       	ldi	r24, 0x37	; 55
    3ed4:	95 e0       	ldi	r25, 0x05	; 5
    3ed6:	a4 d5       	rcall	.+2888   	; 0x4a20 <lora_driver_setOtaaIdentity>
    3ed8:	c4 d5       	rcall	.+2952   	; 0x4a62 <lora_driver_mapReturnCodeToText>
    3eda:	9f 93       	push	r25
    3edc:	8f 93       	push	r24
    3ede:	1f 93       	push	r17
    3ee0:	0f 93       	push	r16
    3ee2:	86 e1       	ldi	r24, 0x16	; 22
    3ee4:	95 e0       	ldi	r25, 0x05	; 5
    3ee6:	9f 93       	push	r25
    3ee8:	8f 93       	push	r24
    3eea:	87 e3       	ldi	r24, 0x37	; 55
    3eec:	95 e0       	ldi	r25, 0x05	; 5
    3eee:	9f 93       	push	r25
    3ef0:	8f 93       	push	r24
    3ef2:	88 e4       	ldi	r24, 0x48	; 72
    3ef4:	95 e0       	ldi	r25, 0x05	; 5
    3ef6:	9f 93       	push	r25
    3ef8:	8f 93       	push	r24
    3efa:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3efe:	95 d3       	rcall	.+1834   	; 0x462a <lora_driver_saveMac>
    3f00:	b0 d5       	rcall	.+2912   	; 0x4a62 <lora_driver_mapReturnCodeToText>
    3f02:	9f 93       	push	r25
    3f04:	8f 93       	push	r24
    3f06:	8e e7       	ldi	r24, 0x7E	; 126
    3f08:	95 e0       	ldi	r25, 0x05	; 5
    3f0a:	9f 93       	push	r25
    3f0c:	8f 93       	push	r24
    3f0e:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3f12:	0f b6       	in	r0, 0x3f	; 63
    3f14:	f8 94       	cli
    3f16:	de bf       	out	0x3e, r29	; 62
    3f18:	0f be       	out	0x3f, r0	; 63
    3f1a:	cd bf       	out	0x3d, r28	; 61
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	7f d4       	rcall	.+2302   	; 0x481e <lora_driver_setAdaptiveDataRate>
    3f20:	a0 d5       	rcall	.+2880   	; 0x4a62 <lora_driver_mapReturnCodeToText>
    3f22:	9f 93       	push	r25
    3f24:	8f 93       	push	r24
    3f26:	8d e8       	ldi	r24, 0x8D	; 141
    3f28:	95 e0       	ldi	r25, 0x05	; 5
    3f2a:	9f 93       	push	r25
    3f2c:	8f 93       	push	r24
    3f2e:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3f32:	84 ef       	ldi	r24, 0xF4	; 244
    3f34:	91 e0       	ldi	r25, 0x01	; 1
    3f36:	7e d4       	rcall	.+2300   	; 0x4834 <lora_driver_setReceiveDelay>
    3f38:	94 d5       	rcall	.+2856   	; 0x4a62 <lora_driver_mapReturnCodeToText>
    3f3a:	9f 93       	push	r25
    3f3c:	8f 93       	push	r24
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	8f 93       	push	r24
    3f42:	84 ef       	ldi	r24, 0xF4	; 244
    3f44:	8f 93       	push	r24
    3f46:	8e ea       	ldi	r24, 0xAE	; 174
    3f48:	95 e0       	ldi	r25, 0x05	; 5
    3f4a:	9f 93       	push	r25
    3f4c:	8f 93       	push	r24
    3f4e:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	f8 94       	cli
    3f56:	de bf       	out	0x3e, r29	; 62
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3f5c:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	6a d3       	rcall	.+1748   	; 0x4636 <lora_driver_join>
    3f62:	08 2f       	mov	r16, r24
    3f64:	7e d5       	rcall	.+2812   	; 0x4a62 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3f66:	9f 93       	push	r25
    3f68:	8f 93       	push	r24
    3f6a:	1f 92       	push	r1
    3f6c:	1f 93       	push	r17
    3f6e:	8e ec       	ldi	r24, 0xCE	; 206
    3f70:	95 e0       	ldi	r25, 0x05	; 5
    3f72:	9f 93       	push	r25
    3f74:	8f 93       	push	r24
    3f76:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3f7e:	0f 90       	pop	r0
    3f80:	0f 90       	pop	r0
    3f82:	0f 90       	pop	r0
    3f84:	0f 90       	pop	r0
    3f86:	08 30       	cpi	r16, 0x08	; 8
    3f88:	59 f0       	breq	.+22     	; 0x3fa0 <_lora_setup+0x154>
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
    3f8c:	0e 94 ec 2b 	call	0x57d8	; 0x57d8 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3f90:	66 e3       	ldi	r22, 0x36	; 54
    3f92:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 47 13 	call	0x268e	; 0x268e <vTaskDelay>
    3f9c:	11 50       	subi	r17, 0x01	; 1
    3f9e:	f9 f6       	brne	.-66     	; 0x3f5e <_lora_setup+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3fa0:	08 30       	cpi	r16, 0x08	; 8
    3fa2:	21 f4       	brne	.+8      	; 0x3fac <_lora_setup+0x160>

	if (rc == LORA_ACCEPTED)
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	0e 94 ce 2b 	call	0x579c	; 0x579c <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3faa:	09 c0       	rjmp	.+18     	; 0x3fbe <_lora_setup+0x172>
    3fac:	81 e0       	ldi	r24, 0x01	; 1
		while (1)
		{
			taskYIELD();
		}
	}
}
    3fae:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	0e 94 ab 2b 	call	0x5756	; 0x5756 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3fb8:	0e 94 9a 06 	call	0xd34	; 0xd34 <vPortYield>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3fbc:	fd cf       	rjmp	.-6      	; 0x3fb8 <_lora_setup+0x16c>
    3fbe:	64 96       	adiw	r28, 0x14	; 20
    3fc0:	0f b6       	in	r0, 0x3f	; 63
		}
	}
}
    3fc2:	f8 94       	cli
    3fc4:	de bf       	out	0x3e, r29	; 62
    3fc6:	0f be       	out	0x3f, r0	; 63
    3fc8:	cd bf       	out	0x3d, r28	; 61
    3fca:	df 91       	pop	r29
    3fcc:	cf 91       	pop	r28
    3fce:	1f 91       	pop	r17
    3fd0:	0f 91       	pop	r16
    3fd2:	08 95       	ret

00003fd4 <lora_uplink_handler_task>:
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	ba d2       	rcall	.+1396   	; 0x454c <lora_driver_resetRn2483>

void lora_uplink_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    3fd8:	62 e0       	ldi	r22, 0x02	; 2
    3fda:	70 e0       	ldi	r23, 0x00	; 0
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 47 13 	call	0x268e	; 0x268e <vTaskDelay>
	lora_driver_resetRn2483(0);
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	b2 d2       	rcall	.+1380   	; 0x454c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    3fe8:	66 e9       	ldi	r22, 0x96	; 150
    3fea:	70 e0       	ldi	r23, 0x00	; 0
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	0e 94 47 13 	call	0x268e	; 0x268e <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3ff4:	64 d2       	rcall	.+1224   	; 0x44be <lora_driver_flushBuffers>

	_lora_setup();
    3ff6:	2a df       	rcall	.-428    	; 0x3e4c <_lora_setup>
    3ff8:	0f ef       	ldi	r16, 0xFF	; 255
		uint16_t hum = 0;
		uint16_t co2 = 0;
		uint8_t status = 0;
		uint8_t xReceivedBytes = 0;
		
		xReceivedBytes = xMessageBufferReceive (uplinkMessageBufferHandle,
    3ffa:	1f ef       	ldi	r17, 0xFF	; 255
    3ffc:	98 01       	movw	r18, r16
    3ffe:	46 e1       	ldi	r20, 0x16	; 22
    4000:	50 e0       	ldi	r21, 0x00	; 0
    4002:	6f ef       	ldi	r22, 0xFF	; 255
    4004:	77 e1       	ldi	r23, 0x17	; 23
    4006:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <uplinkMessageBufferHandle>
    400a:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <uplinkMessageBufferHandle+0x1>
    400e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <xStreamBufferReceive>
    4012:	88 23       	and	r24, r24
		&_uplink_payload,
		sizeof(_uplink_payload),
		portMAX_DELAY);

		if(xReceivedBytes > 0){
    4014:	89 f3       	breq	.-30     	; 0x3ff8 <lora_uplink_handler_task+0x24>
    4016:	ef ef       	ldi	r30, 0xFF	; 255
			// 				printf("Number of bytes read from the message buffer: %d\n", xReceivedBytes);
			tem = (_uplink_payload.bytes[0] << 8) | (_uplink_payload.bytes[1]);
    4018:	f7 e1       	ldi	r31, 0x17	; 23
    401a:	82 81       	ldd	r24, Z+2	; 0x02
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	98 2f       	mov	r25, r24
    4020:	88 27       	eor	r24, r24
    4022:	23 81       	ldd	r18, Z+3	; 0x03
    4024:	82 2b       	or	r24, r18
    4026:	04 81       	ldd	r16, Z+4	; 0x04
			hum = (_uplink_payload.bytes[2] << 8) | (_uplink_payload.bytes[3]);
    4028:	10 e0       	ldi	r17, 0x00	; 0
    402a:	10 2f       	mov	r17, r16
    402c:	00 27       	eor	r16, r16
    402e:	25 81       	ldd	r18, Z+5	; 0x05
    4030:	02 2b       	or	r16, r18
    4032:	c6 81       	ldd	r28, Z+6	; 0x06
			co2 = (_uplink_payload.bytes[4] << 8) | (_uplink_payload.bytes[5]);
    4034:	d0 e0       	ldi	r29, 0x00	; 0
    4036:	dc 2f       	mov	r29, r28
    4038:	cc 27       	eor	r28, r28
    403a:	27 81       	ldd	r18, Z+7	; 0x07
    403c:	c2 2b       	or	r28, r18
    403e:	f0 84       	ldd	r15, Z+8	; 0x08
			status = _uplink_payload.bytes[6];
    4040:	9f 93       	push	r25
			
			printf("Temperature sent: %d\n", tem);
    4042:	8f 93       	push	r24
    4044:	8e ee       	ldi	r24, 0xEE	; 238
    4046:	95 e0       	ldi	r25, 0x05	; 5
    4048:	9f 93       	push	r25
    404a:	8f 93       	push	r24
    404c:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    4050:	1f 93       	push	r17
			printf("Humidity sent: %d\n", hum);
    4052:	0f 93       	push	r16
    4054:	84 e0       	ldi	r24, 0x04	; 4
    4056:	96 e0       	ldi	r25, 0x06	; 6
    4058:	9f 93       	push	r25
    405a:	8f 93       	push	r24
    405c:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    4060:	df 93       	push	r29
			printf("CO2 sent: %d\n", co2);
    4062:	cf 93       	push	r28
    4064:	87 e1       	ldi	r24, 0x17	; 23
    4066:	96 e0       	ldi	r25, 0x06	; 6
    4068:	9f 93       	push	r25
    406a:	8f 93       	push	r24
    406c:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    4070:	1f 92       	push	r1
			printf("Status sent: %d\n", status);
    4072:	ff 92       	push	r15
    4074:	85 e2       	ldi	r24, 0x25	; 37
    4076:	96 e0       	ldi	r25, 0x06	; 6
    4078:	9f 93       	push	r25
    407a:	8f 93       	push	r24
    407c:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    4080:	83 e0       	ldi	r24, 0x03	; 3
			
			status_leds_shortPuls(led_ST4);  // OPTIONAL
    4082:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <status_leds_shortPuls>
			//WHAT THE HELL DOES THE FALSE DO 
			printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    4086:	6f ef       	ldi	r22, 0xFF	; 255
    4088:	77 e1       	ldi	r23, 0x17	; 23
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	fd d2       	rcall	.+1530   	; 0x4688 <lora_driver_sendUploadMessage>
    408e:	e9 d4       	rcall	.+2514   	; 0x4a62 <lora_driver_mapReturnCodeToText>
    4090:	9f 93       	push	r25
    4092:	8f 93       	push	r24
    4094:	86 e3       	ldi	r24, 0x36	; 54
    4096:	96 e0       	ldi	r25, 0x06	; 6
    4098:	9f 93       	push	r25
    409a:	8f 93       	push	r24
    409c:	0e 94 40 36 	call	0x6c80	; 0x6c80 <printf>
    40a0:	8d b7       	in	r24, 0x3d	; 61
    40a2:	9e b7       	in	r25, 0x3e	; 62
    40a4:	44 96       	adiw	r24, 0x14	; 20
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	f8 94       	cli
    40aa:	9e bf       	out	0x3e, r25	; 62
    40ac:	0f be       	out	0x3f, r0	; 63
    40ae:	8d bf       	out	0x3d, r24	; 61
    40b0:	a3 cf       	rjmp	.-186    	; 0x3ff8 <lora_uplink_handler_task+0x24>

000040b2 <create_lora_uplink_handler_task>:
    40b2:	ef 92       	push	r14

void lora_uplink_handler_task(void *pvParameters);

static lora_driver_payload_t _uplink_payload;

void create_lora_uplink_handler_task(UBaseType_t priority){
    40b4:	ff 92       	push	r15
    40b6:	0f 93       	push	r16
	xTaskCreate(
    40b8:	e1 2c       	mov	r14, r1
    40ba:	f1 2c       	mov	r15, r1
    40bc:	08 2f       	mov	r16, r24
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	48 e8       	ldi	r20, 0x88	; 136
    40c4:	51 e0       	ldi	r21, 0x01	; 1
    40c6:	6b e4       	ldi	r22, 0x4B	; 75
    40c8:	76 e0       	ldi	r23, 0x06	; 6
    40ca:	8a ee       	ldi	r24, 0xEA	; 234
    40cc:	9f e1       	ldi	r25, 0x1F	; 31
    40ce:	0e 94 42 10 	call	0x2084	; 0x2084 <xTaskCreate>
	,  "LRHandUplink"  
	,  configMINIMAL_STACK_SIZE+200  
	,  NULL
	,  tskIDLE_PRIORITY + priority  
	,  NULL );
}
    40d2:	0f 91       	pop	r16
    40d4:	ff 90       	pop	r15
    40d6:	ef 90       	pop	r14
    40d8:	08 95       	ret

000040da <create_all_tasks>:
#include "UplinkHandler.h"
#include "DownlinkHandler.h"


void create_all_tasks(){
	create_lora_uplink_handler_task(4);
    40da:	84 e0       	ldi	r24, 0x04	; 4
    40dc:	ea df       	rcall	.-44     	; 0x40b2 <create_lora_uplink_handler_task>
	create_lora_downlink_handler_task(4);
    40de:	84 e0       	ldi	r24, 0x04	; 4
    40e0:	0e 94 a6 02 	call	0x54c	; 0x54c <create_lora_downlink_handler_task>
	create_main_application_task(3);
    40e4:	83 e0       	ldi	r24, 0x03	; 3
    40e6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <create_main_application_task>
	create_CO2_sensor_task(1);
    40ea:	81 e0       	ldi	r24, 0x01	; 1
    40ec:	d5 dd       	rcall	.-1110   	; 0x3c98 <create_CO2_sensor_task>
	create_TempHum_sensor_task(1);
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	f4 dd       	rcall	.-1048   	; 0x3cda <create_TempHum_sensor_task>
    40f2:	82 e0       	ldi	r24, 0x02	; 2
	create_fan_controller_task(2);
    40f4:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <create_fan_controller_task>
    40f8:	08 95       	ret

000040fa <initializeSystem>:
    40fa:	80 e0       	ldi	r24, 0x00	; 0
}
void initializeSystem()
{	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    40fc:	0e 94 33 2a 	call	0x5466	; 0x5466 <stdio_initialise>
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    4100:	85 e0       	ldi	r24, 0x05	; 5
    4102:	0e 94 3a 2b 	call	0x5674	; 0x5674 <status_leds_initialise>

	initialize_event_groups();
    4106:	55 de       	rcall	.-854    	; 0x3db2 <initialize_event_groups>
	initialize_message_buffers();
    4108:	61 de       	rcall	.-830    	; 0x3dcc <initialize_message_buffers>
	initialize_semaphore();
    410a:	83 de       	rcall	.-762    	; 0x3e12 <initialize_semaphore>
    410c:	60 91 4d 19 	lds	r22, 0x194D	; 0x80194d <downlinkMessageBufferHandle>
	// Initialise the LoRaWAN driver with down-link buffer
	lora_driver_initialise(ser_USART1, downlinkMessageBufferHandle);
    4110:	70 91 4e 19 	lds	r23, 0x194E	; 0x80194e <downlinkMessageBufferHandle+0x1>
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	da d1       	rcall	.+948    	; 0x44cc <lora_driver_initialise>
	create_all_tasks();
    4118:	e0 cf       	rjmp	.-64     	; 0x40da <create_all_tasks>
    411a:	08 95       	ret

0000411c <main>:
    411c:	ee df       	rcall	.-36     	; 0x40fa <initializeSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initializeSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    411e:	88 e5       	ldi	r24, 0x58	; 88
    4120:	96 e0       	ldi	r25, 0x06	; 6
    4122:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    4126:	0e 94 8e 10 	call	0x211c	; 0x211c <vTaskStartScheduler>
    412a:	ff cf       	rjmp	.-2      	; 0x412a <main+0xe>

0000412c <_hihTwiCallback>:
    412c:	65 30       	cpi	r22, 0x05	; 5
    412e:	f1 f4       	brne	.+60     	; 0x416c <_hihTwiCallback+0x40>
    4130:	fa 01       	movw	r30, r20
    4132:	80 81       	ld	r24, Z
    4134:	8f 73       	andi	r24, 0x3F	; 63
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	98 2f       	mov	r25, r24
    413a:	88 27       	eor	r24, r24
    413c:	21 81       	ldd	r18, Z+1	; 0x01
    413e:	82 2b       	or	r24, r18
    4140:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4144:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4148:	82 81       	ldd	r24, Z+2	; 0x02
    414a:	f0 e4       	ldi	r31, 0x40	; 64
    414c:	8f 9f       	mul	r24, r31
    414e:	c0 01       	movw	r24, r0
    4150:	11 24       	eor	r1, r1
    4152:	fa 01       	movw	r30, r20
    4154:	23 81       	ldd	r18, Z+3	; 0x03
    4156:	26 95       	lsr	r18
    4158:	26 95       	lsr	r18
    415a:	82 2b       	or	r24, r18
    415c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4160:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <_measuringIsReady>
    416a:	08 95       	ret
    416c:	64 30       	cpi	r22, 0x04	; 4
    416e:	51 f0       	breq	.+20     	; 0x4184 <_hihTwiCallback+0x58>
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e4       	ldi	r25, 0x40	; 64
    4174:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4178:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    417c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4180:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4184:	08 95       	ret

00004186 <hih8120_initialise>:
    4186:	0f 93       	push	r16
    4188:	1f 93       	push	r17
    418a:	06 e9       	ldi	r16, 0x96	; 150
    418c:	10 e2       	ldi	r17, 0x20	; 32
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	34 e2       	ldi	r19, 0x24	; 36
    4192:	44 ef       	ldi	r20, 0xF4	; 244
    4194:	50 e0       	ldi	r21, 0x00	; 0
    4196:	60 e0       	ldi	r22, 0x00	; 0
    4198:	87 e2       	ldi	r24, 0x27	; 39
    419a:	0e 94 20 2c 	call	0x5840	; 0x5840 <twiCreate>
    419e:	90 93 17 18 	sts	0x1817, r25	; 0x801817 <_hih8120Handler+0x1>
    41a2:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <_hih8120Handler>
    41a6:	21 e0       	ldi	r18, 0x01	; 1
    41a8:	89 2b       	or	r24, r25
    41aa:	09 f0       	breq	.+2      	; 0x41ae <hih8120_initialise+0x28>
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	82 2f       	mov	r24, r18
    41b0:	1f 91       	pop	r17
    41b2:	0f 91       	pop	r16
    41b4:	08 95       	ret

000041b6 <hih8120_wakeup>:
    41b6:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <_hih8120Handler>
    41ba:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <_hih8120Handler+0x1>
    41be:	00 97       	sbiw	r24, 0x00	; 0
    41c0:	59 f0       	breq	.+22     	; 0x41d8 <hih8120_wakeup+0x22>
    41c2:	40 e0       	ldi	r20, 0x00	; 0
    41c4:	60 e0       	ldi	r22, 0x00	; 0
    41c6:	70 e0       	ldi	r23, 0x00	; 0
    41c8:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <twiTransmit>
    41cc:	84 30       	cpi	r24, 0x04	; 4
    41ce:	31 f4       	brne	.+12     	; 0x41dc <hih8120_wakeup+0x26>
    41d0:	10 92 15 18 	sts	0x1815, r1	; 0x801815 <_measuringIsReady>
    41d4:	80 e0       	ldi	r24, 0x00	; 0
    41d6:	08 95       	ret
    41d8:	82 e0       	ldi	r24, 0x02	; 2
    41da:	08 95       	ret
    41dc:	83 e0       	ldi	r24, 0x03	; 3
    41de:	08 95       	ret

000041e0 <hih8120_measure>:
    41e0:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <_hih8120Handler>
    41e4:	90 91 17 18 	lds	r25, 0x1817	; 0x801817 <_hih8120Handler+0x1>
    41e8:	00 97       	sbiw	r24, 0x00	; 0
    41ea:	39 f0       	breq	.+14     	; 0x41fa <hih8120_measure+0x1a>
    41ec:	64 e0       	ldi	r22, 0x04	; 4
    41ee:	0e 94 bd 2c 	call	0x597a	; 0x597a <twiReceive>
    41f2:	85 30       	cpi	r24, 0x05	; 5
    41f4:	21 f0       	breq	.+8      	; 0x41fe <hih8120_measure+0x1e>
    41f6:	83 e0       	ldi	r24, 0x03	; 3
    41f8:	08 95       	ret
    41fa:	82 e0       	ldi	r24, 0x02	; 2
    41fc:	08 95       	ret
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	08 95       	ret

00004202 <hih8120_getHumidity>:
    4202:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4206:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	0e 94 50 32 	call	0x64a0	; 0x64a0 <__floatunsisf>
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	48 ec       	ldi	r20, 0xC8	; 200
    4218:	52 e4       	ldi	r21, 0x42	; 66
    421a:	0e 94 de 32 	call	0x65bc	; 0x65bc <__mulsf3>
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	38 ef       	ldi	r19, 0xF8	; 248
    4222:	4f e7       	ldi	r20, 0x7F	; 127
    4224:	56 e4       	ldi	r21, 0x46	; 70
    4226:	0c 94 b7 31 	jmp	0x636e	; 0x636e <__divsf3>
    422a:	08 95       	ret

0000422c <hih8120_getHumidityPercent_x10>:
    422c:	ea df       	rcall	.-44     	; 0x4202 <hih8120_getHumidity>
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	40 e2       	ldi	r20, 0x20	; 32
    4234:	51 e4       	ldi	r21, 0x41	; 65
    4236:	0e 94 de 32 	call	0x65bc	; 0x65bc <__mulsf3>
    423a:	0e 94 24 32 	call	0x6448	; 0x6448 <__fixunssfsi>
    423e:	cb 01       	movw	r24, r22
    4240:	08 95       	ret

00004242 <hih8120_getTemperature>:
    4242:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4246:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    424a:	80 e0       	ldi	r24, 0x00	; 0
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	0e 94 50 32 	call	0x64a0	; 0x64a0 <__floatunsisf>
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	45 e2       	ldi	r20, 0x25	; 37
    4258:	53 e4       	ldi	r21, 0x43	; 67
    425a:	0e 94 de 32 	call	0x65bc	; 0x65bc <__mulsf3>
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	38 ef       	ldi	r19, 0xF8	; 248
    4262:	4f e7       	ldi	r20, 0x7F	; 127
    4264:	56 e4       	ldi	r21, 0x46	; 70
    4266:	0e 94 b7 31 	call	0x636e	; 0x636e <__divsf3>
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	40 e2       	ldi	r20, 0x20	; 32
    4270:	52 e4       	ldi	r21, 0x42	; 66
    4272:	0c 94 52 31 	jmp	0x62a4	; 0x62a4 <__subsf3>
    4276:	08 95       	ret

00004278 <hih8120_getTemperature_x10>:
    4278:	e4 df       	rcall	.-56     	; 0x4242 <hih8120_getTemperature>
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e2       	ldi	r20, 0x20	; 32
    4280:	51 e4       	ldi	r21, 0x41	; 65
    4282:	0e 94 de 32 	call	0x65bc	; 0x65bc <__mulsf3>
    4286:	0e 94 1f 32 	call	0x643e	; 0x643e <__fixsfsi>
    428a:	cb 01       	movw	r24, r22
    428c:	08 95       	ret

0000428e <_serialCallBack>:
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	1f 92       	push	r1
    4298:	1f 92       	push	r1
    429a:	cd b7       	in	r28, 0x3d	; 61
    429c:	de b7       	in	r29, 0x3e	; 62
    429e:	8c 01       	movw	r16, r24
    42a0:	19 82       	std	Y+1, r1	; 0x01
    42a2:	2d c0       	rjmp	.+90     	; 0x42fe <_serialCallBack+0x70>
    42a4:	e0 91 4f 18 	lds	r30, 0x184F	; 0x80184f <rec_buf_inp.2878>
    42a8:	ec 32       	cpi	r30, 0x2C	; 44
    42aa:	50 f4       	brcc	.+20     	; 0x42c0 <_serialCallBack+0x32>
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	8e 0f       	add	r24, r30
    42b0:	80 93 4f 18 	sts	0x184F, r24	; 0x80184f <rec_buf_inp.2878>
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	ef 57       	subi	r30, 0x7F	; 127
    42b8:	f7 4e       	sbci	r31, 0xE7	; 231
    42ba:	8a 81       	ldd	r24, Y+2	; 0x02
    42bc:	80 83       	st	Z, r24
    42be:	02 c0       	rjmp	.+4      	; 0x42c4 <_serialCallBack+0x36>
    42c0:	10 92 4f 18 	sts	0x184F, r1	; 0x80184f <rec_buf_inp.2878>
    42c4:	8a 81       	ldd	r24, Y+2	; 0x02
    42c6:	8a 30       	cpi	r24, 0x0A	; 10
    42c8:	d1 f4       	brne	.+52     	; 0x42fe <_serialCallBack+0x70>
    42ca:	40 91 4f 18 	lds	r20, 0x184F	; 0x80184f <rec_buf_inp.2878>
    42ce:	50 e0       	ldi	r21, 0x00	; 0
    42d0:	fa 01       	movw	r30, r20
    42d2:	e1 58       	subi	r30, 0x81	; 129
    42d4:	f7 4e       	sbci	r31, 0xE7	; 231
    42d6:	10 82       	st	Z, r1
    42d8:	41 50       	subi	r20, 0x01	; 1
    42da:	51 09       	sbc	r21, r1
    42dc:	9e 01       	movw	r18, r28
    42de:	2f 5f       	subi	r18, 0xFF	; 255
    42e0:	3f 4f       	sbci	r19, 0xFF	; 255
    42e2:	61 e8       	ldi	r22, 0x81	; 129
    42e4:	78 e1       	ldi	r23, 0x18	; 24
    42e6:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    42ea:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    42ee:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <xStreamBufferSendFromISR>
    42f2:	89 81       	ldd	r24, Y+1	; 0x01
    42f4:	81 11       	cpse	r24, r1
    42f6:	0e 94 9a 06 	call	0xd34	; 0xd34 <vPortYield>
    42fa:	10 92 4f 18 	sts	0x184F, r1	; 0x80184f <rec_buf_inp.2878>
    42fe:	be 01       	movw	r22, r28
    4300:	6e 5f       	subi	r22, 0xFE	; 254
    4302:	7f 4f       	sbci	r23, 0xFF	; 255
    4304:	c8 01       	movw	r24, r16
    4306:	19 d6       	rcall	.+3122   	; 0x4f3a <serial_getByte>
    4308:	88 23       	and	r24, r24
    430a:	61 f2       	breq	.-104    	; 0x42a4 <_serialCallBack+0x16>
    430c:	0f 90       	pop	r0
    430e:	0f 90       	pop	r0
    4310:	df 91       	pop	r29
    4312:	cf 91       	pop	r28
    4314:	1f 91       	pop	r17
    4316:	0f 91       	pop	r16
    4318:	08 95       	ret

0000431a <_uploadMessage>:
    431a:	0f 93       	push	r16
    431c:	1f 93       	push	r17
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	8c 01       	movw	r16, r24
    4324:	eb 01       	movw	r28, r22
    4326:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    432a:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    432e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <xStreamBufferReset>
    4332:	b8 01       	movw	r22, r16
    4334:	88 e1       	ldi	r24, 0x18	; 24
    4336:	98 e1       	ldi	r25, 0x18	; 24
    4338:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <strcpy>
    433c:	20 97       	sbiw	r28, 0x00	; 0
    433e:	79 f0       	breq	.+30     	; 0x435e <_uploadMessage+0x44>
    4340:	e8 e1       	ldi	r30, 0x18	; 24
    4342:	f8 e1       	ldi	r31, 0x18	; 24
    4344:	01 90       	ld	r0, Z+
    4346:	00 20       	and	r0, r0
    4348:	e9 f7       	brne	.-6      	; 0x4344 <_uploadMessage+0x2a>
    434a:	31 97       	sbiw	r30, 0x01	; 1
    434c:	80 e2       	ldi	r24, 0x20	; 32
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	91 83       	std	Z+1, r25	; 0x01
    4352:	80 83       	st	Z, r24
    4354:	be 01       	movw	r22, r28
    4356:	88 e1       	ldi	r24, 0x18	; 24
    4358:	98 e1       	ldi	r25, 0x18	; 24
    435a:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <strcat>
    435e:	e8 e1       	ldi	r30, 0x18	; 24
    4360:	f8 e1       	ldi	r31, 0x18	; 24
    4362:	df 01       	movw	r26, r30
    4364:	0d 90       	ld	r0, X+
    4366:	00 20       	and	r0, r0
    4368:	e9 f7       	brne	.-6      	; 0x4364 <_uploadMessage+0x4a>
    436a:	11 97       	sbiw	r26, 0x01	; 1
    436c:	8d e0       	ldi	r24, 0x0D	; 13
    436e:	9a e0       	ldi	r25, 0x0A	; 10
    4370:	11 96       	adiw	r26, 0x01	; 1
    4372:	9c 93       	st	X, r25
    4374:	8e 93       	st	-X, r24
    4376:	12 96       	adiw	r26, 0x02	; 2
    4378:	1c 92       	st	X, r1
    437a:	01 90       	ld	r0, Z+
    437c:	00 20       	and	r0, r0
    437e:	e9 f7       	brne	.-6      	; 0x437a <_uploadMessage+0x60>
    4380:	31 97       	sbiw	r30, 0x01	; 1
    4382:	e8 51       	subi	r30, 0x18	; 24
    4384:	f8 41       	sbci	r31, 0x18	; 24
    4386:	ae 2f       	mov	r26, r30
    4388:	88 e1       	ldi	r24, 0x18	; 24
    438a:	98 e1       	ldi	r25, 0x18	; 24
    438c:	ac 01       	movw	r20, r24
    438e:	6a 2f       	mov	r22, r26
    4390:	80 91 54 18 	lds	r24, 0x1854	; 0x801854 <_rn2483_serial>
    4394:	90 91 55 18 	lds	r25, 0x1855	; 0x801855 <_rn2483_serial+0x1>
    4398:	7b d5       	rcall	.+2806   	; 0x4e90 <serial_sendBytes>
    439a:	81 11       	cpse	r24, r1
    439c:	11 c0       	rjmp	.+34     	; 0x43c0 <_uploadMessage+0xa6>
    439e:	08 e2       	ldi	r16, 0x28	; 40
    43a0:	15 e0       	ldi	r17, 0x05	; 5
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	4d e2       	ldi	r20, 0x2D	; 45
    43a8:	50 e0       	ldi	r21, 0x00	; 0
    43aa:	6b ed       	ldi	r22, 0xDB	; 219
    43ac:	78 e1       	ldi	r23, 0x18	; 24
    43ae:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    43b2:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    43b6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <xStreamBufferReceive>
    43ba:	8b ed       	ldi	r24, 0xDB	; 219
    43bc:	98 e1       	ldi	r25, 0x18	; 24
    43be:	02 c0       	rjmp	.+4      	; 0x43c4 <_uploadMessage+0xaa>
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	df 91       	pop	r29
    43c6:	cf 91       	pop	r28
    43c8:	1f 91       	pop	r17
    43ca:	0f 91       	pop	r16
    43cc:	08 95       	ret

000043ce <_reply2ReturnCode>:
    43ce:	2f 92       	push	r2
    43d0:	3f 92       	push	r3
    43d2:	4f 92       	push	r4
    43d4:	5f 92       	push	r5
    43d6:	6f 92       	push	r6
    43d8:	7f 92       	push	r7
    43da:	8f 92       	push	r8
    43dc:	9f 92       	push	r9
    43de:	af 92       	push	r10
    43e0:	bf 92       	push	r11
    43e2:	cf 92       	push	r12
    43e4:	df 92       	push	r13
    43e6:	ef 92       	push	r14
    43e8:	ff 92       	push	r15
    43ea:	0f 93       	push	r16
    43ec:	1f 93       	push	r17
    43ee:	cf 93       	push	r28
    43f0:	df 93       	push	r29
    43f2:	5c 01       	movw	r10, r24
    43f4:	fc 01       	movw	r30, r24
    43f6:	01 90       	ld	r0, Z+
    43f8:	00 20       	and	r0, r0
    43fa:	e9 f7       	brne	.-6      	; 0x43f6 <_reply2ReturnCode+0x28>
    43fc:	31 97       	sbiw	r30, 0x01	; 1
    43fe:	6f 01       	movw	r12, r30
    4400:	c8 1a       	sub	r12, r24
    4402:	d9 0a       	sbc	r13, r25
    4404:	5c 2c       	mov	r5, r12
    4406:	0f 2e       	mov	r0, r31
    4408:	fe ef       	ldi	r31, 0xFE	; 254
    440a:	8f 2e       	mov	r8, r31
    440c:	f8 e0       	ldi	r31, 0x08	; 8
    440e:	9f 2e       	mov	r9, r31
    4410:	f0 2d       	mov	r31, r0
    4412:	e1 2c       	mov	r14, r1
    4414:	f1 2c       	mov	r15, r1
    4416:	4c 2c       	mov	r4, r12
    4418:	37 01       	movw	r6, r14
    441a:	f4 01       	movw	r30, r8
    441c:	01 81       	ldd	r16, Z+1	; 0x01
    441e:	12 81       	ldd	r17, Z+2	; 0x02
    4420:	e8 01       	movw	r28, r16
    4422:	09 90       	ld	r0, Y+
    4424:	00 20       	and	r0, r0
    4426:	e9 f7       	brne	.-6      	; 0x4422 <_reply2ReturnCode+0x54>
    4428:	21 97       	sbiw	r28, 0x01	; 1
    442a:	c0 1b       	sub	r28, r16
    442c:	d1 0b       	sbc	r29, r17
    442e:	3c 2e       	mov	r3, r28
    4430:	f9 e0       	ldi	r31, 0x09	; 9
    4432:	cf 16       	cp	r12, r31
    4434:	d1 04       	cpc	r13, r1
    4436:	58 f0       	brcs	.+22     	; 0x444e <_reply2ReturnCode+0x80>
    4438:	f4 01       	movw	r30, r8
    443a:	20 80       	ld	r2, Z
    443c:	fe e0       	ldi	r31, 0x0E	; 14
    443e:	2f 12       	cpse	r2, r31
    4440:	06 c0       	rjmp	.+12     	; 0x444e <_reply2ReturnCode+0x80>
    4442:	b8 01       	movw	r22, r16
    4444:	c5 01       	movw	r24, r10
    4446:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <strcasestr>
    444a:	89 2b       	or	r24, r25
    444c:	09 f5       	brne	.+66     	; 0x4490 <_reply2ReturnCode+0xc2>
    444e:	44 2d       	mov	r20, r4
    4450:	35 14       	cp	r3, r5
    4452:	08 f4       	brcc	.+2      	; 0x4456 <_reply2ReturnCode+0x88>
    4454:	4c 2f       	mov	r20, r28
    4456:	50 e0       	ldi	r21, 0x00	; 0
    4458:	b8 01       	movw	r22, r16
    445a:	c5 01       	movw	r24, r10
    445c:	0e 94 e1 35 	call	0x6bc2	; 0x6bc2 <strncasecmp>
    4460:	89 2b       	or	r24, r25
    4462:	49 f4       	brne	.+18     	; 0x4476 <_reply2ReturnCode+0xa8>
    4464:	f3 01       	movw	r30, r6
    4466:	ee 0f       	add	r30, r30
    4468:	ff 1f       	adc	r31, r31
    446a:	e6 0d       	add	r30, r6
    446c:	f7 1d       	adc	r31, r7
    446e:	e2 50       	subi	r30, 0x02	; 2
    4470:	f7 4f       	sbci	r31, 0xF7	; 247
    4472:	20 80       	ld	r2, Z
    4474:	0d c0       	rjmp	.+26     	; 0x4490 <_reply2ReturnCode+0xc2>
    4476:	8f ef       	ldi	r24, 0xFF	; 255
    4478:	e8 1a       	sub	r14, r24
    447a:	f8 0a       	sbc	r15, r24
    447c:	e3 e0       	ldi	r30, 0x03	; 3
    447e:	8e 0e       	add	r8, r30
    4480:	91 1c       	adc	r9, r1
    4482:	f1 e1       	ldi	r31, 0x11	; 17
    4484:	ef 16       	cp	r14, r31
    4486:	f1 04       	cpc	r15, r1
    4488:	39 f6       	brne	.-114    	; 0x4418 <_reply2ReturnCode+0x4a>
    448a:	68 94       	set
    448c:	22 24       	eor	r2, r2
    448e:	24 f8       	bld	r2, 4
    4490:	82 2d       	mov	r24, r2
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	1f 91       	pop	r17
    4498:	0f 91       	pop	r16
    449a:	ff 90       	pop	r15
    449c:	ef 90       	pop	r14
    449e:	df 90       	pop	r13
    44a0:	cf 90       	pop	r12
    44a2:	bf 90       	pop	r11
    44a4:	af 90       	pop	r10
    44a6:	9f 90       	pop	r9
    44a8:	8f 90       	pop	r8
    44aa:	7f 90       	pop	r7
    44ac:	6f 90       	pop	r6
    44ae:	5f 90       	pop	r5
    44b0:	4f 90       	pop	r4
    44b2:	3f 90       	pop	r3
    44b4:	2f 90       	pop	r2
    44b6:	08 95       	ret

000044b8 <_uploadMessageRc>:
    44b8:	30 df       	rcall	.-416    	; 0x431a <_uploadMessage>
    44ba:	89 cf       	rjmp	.-238    	; 0x43ce <_reply2ReturnCode>
    44bc:	08 95       	ret

000044be <lora_driver_flushBuffers>:
    44be:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    44c2:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    44c6:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <xStreamBufferReset>
    44ca:	08 95       	ret

000044cc <lora_driver_initialise>:
    44cc:	8f 92       	push	r8
    44ce:	9f 92       	push	r9
    44d0:	af 92       	push	r10
    44d2:	cf 92       	push	r12
    44d4:	ef 92       	push	r14
    44d6:	0f 93       	push	r16
    44d8:	1f 93       	push	r17
    44da:	cf 93       	push	r28
    44dc:	c8 2f       	mov	r28, r24
    44de:	8b 01       	movw	r16, r22
    44e0:	41 e0       	ldi	r20, 0x01	; 1
    44e2:	60 e0       	ldi	r22, 0x00	; 0
    44e4:	70 e0       	ldi	r23, 0x00	; 0
    44e6:	88 ec       	ldi	r24, 0xC8	; 200
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	0e 94 3c 0c 	call	0x1878	; 0x1878 <xStreamBufferGenericCreate>
    44ee:	90 93 53 18 	sts	0x1853, r25	; 0x801853 <_serialReplyBufferHandle+0x1>
    44f2:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <_serialReplyBufferHandle>
    44f6:	10 93 51 18 	sts	0x1851, r17	; 0x801851 <_downlinkMessageBuffer+0x1>
    44fa:	00 93 50 18 	sts	0x1850, r16	; 0x801850 <_downlinkMessageBuffer>
    44fe:	0f 2e       	mov	r0, r31
    4500:	f7 e4       	ldi	r31, 0x47	; 71
    4502:	8f 2e       	mov	r8, r31
    4504:	f1 e2       	ldi	r31, 0x21	; 33
    4506:	9f 2e       	mov	r9, r31
    4508:	f0 2d       	mov	r31, r0
    450a:	68 94       	set
    450c:	aa 24       	eor	r10, r10
    450e:	a6 f8       	bld	r10, 6
    4510:	68 94       	set
    4512:	cc 24       	eor	r12, r12
    4514:	c6 f8       	bld	r12, 6
    4516:	e1 2c       	mov	r14, r1
    4518:	00 e0       	ldi	r16, 0x00	; 0
    451a:	23 e0       	ldi	r18, 0x03	; 3
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	51 ee       	ldi	r21, 0xE1	; 225
    4520:	60 e0       	ldi	r22, 0x00	; 0
    4522:	70 e0       	ldi	r23, 0x00	; 0
    4524:	8c 2f       	mov	r24, r28
    4526:	e3 d3       	rcall	.+1990   	; 0x4cee <serial_create>
    4528:	90 93 55 18 	sts	0x1855, r25	; 0x801855 <_rn2483_serial+0x1>
    452c:	80 93 54 18 	sts	0x1854, r24	; 0x801854 <_rn2483_serial>
    4530:	e7 e0       	ldi	r30, 0x07	; 7
    4532:	f1 e0       	ldi	r31, 0x01	; 1
    4534:	80 81       	ld	r24, Z
    4536:	80 61       	ori	r24, 0x10	; 16
    4538:	80 83       	st	Z, r24
    453a:	cf 91       	pop	r28
    453c:	1f 91       	pop	r17
    453e:	0f 91       	pop	r16
    4540:	ef 90       	pop	r14
    4542:	cf 90       	pop	r12
    4544:	af 90       	pop	r10
    4546:	9f 90       	pop	r9
    4548:	8f 90       	pop	r8
    454a:	08 95       	ret

0000454c <lora_driver_resetRn2483>:
    454c:	88 23       	and	r24, r24
    454e:	31 f0       	breq	.+12     	; 0x455c <lora_driver_resetRn2483+0x10>
    4550:	e8 e0       	ldi	r30, 0x08	; 8
    4552:	f1 e0       	ldi	r31, 0x01	; 1
    4554:	80 81       	ld	r24, Z
    4556:	8f 7e       	andi	r24, 0xEF	; 239
    4558:	80 83       	st	Z, r24
    455a:	08 95       	ret
    455c:	e8 e0       	ldi	r30, 0x08	; 8
    455e:	f1 e0       	ldi	r31, 0x01	; 1
    4560:	80 81       	ld	r24, Z
    4562:	80 61       	ori	r24, 0x10	; 16
    4564:	80 83       	st	Z, r24
    4566:	08 95       	ret

00004568 <lora_driver_rn2483FactoryReset>:
    4568:	60 e0       	ldi	r22, 0x00	; 0
    456a:	70 e0       	ldi	r23, 0x00	; 0
    456c:	89 e8       	ldi	r24, 0x89	; 137
    456e:	96 e0       	ldi	r25, 0x06	; 6
    4570:	d4 de       	rcall	.-600    	; 0x431a <_uploadMessage>
    4572:	eb ed       	ldi	r30, 0xDB	; 219
    4574:	f8 e1       	ldi	r31, 0x18	; 24
    4576:	01 90       	ld	r0, Z+
    4578:	00 20       	and	r0, r0
    457a:	e9 f7       	brne	.-6      	; 0x4576 <lora_driver_rn2483FactoryReset+0xe>
    457c:	31 97       	sbiw	r30, 0x01	; 1
    457e:	eb 5d       	subi	r30, 0xDB	; 219
    4580:	f8 41       	sbci	r31, 0x18	; 24
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	75 97       	sbiw	r30, 0x15	; 21
    4586:	08 f0       	brcs	.+2      	; 0x458a <lora_driver_rn2483FactoryReset+0x22>
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	08 95       	ret

0000458c <lora_driver_getRn2483Hweui>:
    458c:	cf 93       	push	r28
    458e:	df 93       	push	r29
    4590:	ec 01       	movw	r28, r24
    4592:	60 e0       	ldi	r22, 0x00	; 0
    4594:	70 e0       	ldi	r23, 0x00	; 0
    4596:	8a e9       	ldi	r24, 0x9A	; 154
    4598:	96 e0       	ldi	r25, 0x06	; 6
    459a:	bf de       	rcall	.-642    	; 0x431a <_uploadMessage>
    459c:	eb ed       	ldi	r30, 0xDB	; 219
    459e:	f8 e1       	ldi	r31, 0x18	; 24
    45a0:	01 90       	ld	r0, Z+
    45a2:	00 20       	and	r0, r0
    45a4:	e9 f7       	brne	.-6      	; 0x45a0 <lora_driver_getRn2483Hweui+0x14>
    45a6:	ec 5e       	subi	r30, 0xEC	; 236
    45a8:	f8 41       	sbci	r31, 0x18	; 24
    45aa:	39 f4       	brne	.+14     	; 0x45ba <lora_driver_getRn2483Hweui+0x2e>
    45ac:	6b ed       	ldi	r22, 0xDB	; 219
    45ae:	78 e1       	ldi	r23, 0x18	; 24
    45b0:	ce 01       	movw	r24, r28
    45b2:	0e 94 da 35 	call	0x6bb4	; 0x6bb4 <strcpy>
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	02 c0       	rjmp	.+4      	; 0x45be <lora_driver_getRn2483Hweui+0x32>
    45ba:	18 82       	st	Y, r1
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	df 91       	pop	r29
    45c0:	cf 91       	pop	r28
    45c2:	08 95       	ret

000045c4 <lora_driver_setDeviceIdentifier>:
    45c4:	fc 01       	movw	r30, r24
    45c6:	01 90       	ld	r0, Z+
    45c8:	00 20       	and	r0, r0
    45ca:	e9 f7       	brne	.-6      	; 0x45c6 <lora_driver_setDeviceIdentifier+0x2>
    45cc:	9f 01       	movw	r18, r30
    45ce:	21 51       	subi	r18, 0x11	; 17
    45d0:	31 09       	sbc	r19, r1
    45d2:	28 17       	cp	r18, r24
    45d4:	39 07       	cpc	r19, r25
    45d6:	29 f4       	brne	.+10     	; 0x45e2 <lora_driver_setDeviceIdentifier+0x1e>
    45d8:	bc 01       	movw	r22, r24
    45da:	88 ec       	ldi	r24, 0xC8	; 200
    45dc:	96 e0       	ldi	r25, 0x06	; 6
    45de:	6c cf       	rjmp	.-296    	; 0x44b8 <_uploadMessageRc>
    45e0:	08 95       	ret
    45e2:	89 e0       	ldi	r24, 0x09	; 9
    45e4:	08 95       	ret

000045e6 <lora_driver_setApplicationIdentifier>:
    45e6:	fc 01       	movw	r30, r24
    45e8:	01 90       	ld	r0, Z+
    45ea:	00 20       	and	r0, r0
    45ec:	e9 f7       	brne	.-6      	; 0x45e8 <lora_driver_setApplicationIdentifier+0x2>
    45ee:	9f 01       	movw	r18, r30
    45f0:	21 51       	subi	r18, 0x11	; 17
    45f2:	31 09       	sbc	r19, r1
    45f4:	28 17       	cp	r18, r24
    45f6:	39 07       	cpc	r19, r25
    45f8:	29 f4       	brne	.+10     	; 0x4604 <lora_driver_setApplicationIdentifier+0x1e>
    45fa:	bc 01       	movw	r22, r24
    45fc:	87 ed       	ldi	r24, 0xD7	; 215
    45fe:	96 e0       	ldi	r25, 0x06	; 6
    4600:	5b cf       	rjmp	.-330    	; 0x44b8 <_uploadMessageRc>
    4602:	08 95       	ret
    4604:	89 e0       	ldi	r24, 0x09	; 9
    4606:	08 95       	ret

00004608 <lora_driver_setApplicationKey>:
    4608:	fc 01       	movw	r30, r24
    460a:	01 90       	ld	r0, Z+
    460c:	00 20       	and	r0, r0
    460e:	e9 f7       	brne	.-6      	; 0x460a <lora_driver_setApplicationKey+0x2>
    4610:	9f 01       	movw	r18, r30
    4612:	21 52       	subi	r18, 0x21	; 33
    4614:	31 09       	sbc	r19, r1
    4616:	28 17       	cp	r18, r24
    4618:	39 07       	cpc	r19, r25
    461a:	29 f4       	brne	.+10     	; 0x4626 <lora_driver_setApplicationKey+0x1e>
    461c:	bc 01       	movw	r22, r24
    461e:	86 ee       	ldi	r24, 0xE6	; 230
    4620:	96 e0       	ldi	r25, 0x06	; 6
    4622:	4a cf       	rjmp	.-364    	; 0x44b8 <_uploadMessageRc>
    4624:	08 95       	ret
    4626:	89 e0       	ldi	r24, 0x09	; 9
    4628:	08 95       	ret

0000462a <lora_driver_saveMac>:
    462a:	60 e0       	ldi	r22, 0x00	; 0
    462c:	70 e0       	ldi	r23, 0x00	; 0
    462e:	85 e2       	ldi	r24, 0x25	; 37
    4630:	97 e0       	ldi	r25, 0x07	; 7
    4632:	42 cf       	rjmp	.-380    	; 0x44b8 <_uploadMessageRc>
    4634:	08 95       	ret

00004636 <lora_driver_join>:
    4636:	0f 93       	push	r16
    4638:	1f 93       	push	r17
    463a:	e8 2f       	mov	r30, r24
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	ee 0f       	add	r30, r30
    4640:	ff 1f       	adc	r31, r31
    4642:	e6 50       	subi	r30, 0x06	; 6
    4644:	f7 4f       	sbci	r31, 0xF7	; 247
    4646:	60 81       	ld	r22, Z
    4648:	71 81       	ldd	r23, Z+1	; 0x01
    464a:	8e e2       	ldi	r24, 0x2E	; 46
    464c:	97 e0       	ldi	r25, 0x07	; 7
    464e:	34 df       	rcall	.-408    	; 0x44b8 <_uploadMessageRc>
    4650:	81 11       	cpse	r24, r1
    4652:	14 c0       	rjmp	.+40     	; 0x467c <lora_driver_join+0x46>
    4654:	08 e2       	ldi	r16, 0x28	; 40
    4656:	15 e0       	ldi	r17, 0x05	; 5
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	4d e2       	ldi	r20, 0x2D	; 45
    465e:	50 e0       	ldi	r21, 0x00	; 0
    4660:	6b ed       	ldi	r22, 0xDB	; 219
    4662:	78 e1       	ldi	r23, 0x18	; 24
    4664:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    4668:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    466c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <xStreamBufferReceive>
    4670:	88 23       	and	r24, r24
    4672:	21 f0       	breq	.+8      	; 0x467c <lora_driver_join+0x46>
    4674:	8b ed       	ldi	r24, 0xDB	; 219
    4676:	98 e1       	ldi	r25, 0x18	; 24
    4678:	aa de       	rcall	.-684    	; 0x43ce <_reply2ReturnCode>
    467a:	03 c0       	rjmp	.+6      	; 0x4682 <lora_driver_join+0x4c>
    467c:	8b ed       	ldi	r24, 0xDB	; 219
    467e:	98 e1       	ldi	r25, 0x18	; 24
    4680:	a6 de       	rcall	.-692    	; 0x43ce <_reply2ReturnCode>
    4682:	1f 91       	pop	r17
    4684:	0f 91       	pop	r16
    4686:	08 95       	ret

00004688 <lora_driver_sendUploadMessage>:
    4688:	0f 93       	push	r16
    468a:	1f 93       	push	r17
    468c:	cf 93       	push	r28
    468e:	df 93       	push	r29
    4690:	1f 92       	push	r1
    4692:	cd b7       	in	r28, 0x3d	; 61
    4694:	de b7       	in	r29, 0x3e	; 62
    4696:	db 01       	movw	r26, r22
    4698:	11 96       	adiw	r26, 0x01	; 1
    469a:	9c 91       	ld	r25, X
    469c:	11 97       	sbiw	r26, 0x01	; 1
    469e:	95 31       	cpi	r25, 0x15	; 21
    46a0:	08 f0       	brcs	.+2      	; 0x46a4 <lora_driver_sendUploadMessage+0x1c>
    46a2:	b4 c0       	rjmp	.+360    	; 0x480c <lora_driver_sendUploadMessage+0x184>
    46a4:	99 23       	and	r25, r25
    46a6:	81 f1       	breq	.+96     	; 0x4708 <lora_driver_sendUploadMessage+0x80>
    46a8:	60 e0       	ldi	r22, 0x00	; 0
    46aa:	70 e0       	ldi	r23, 0x00	; 0
    46ac:	27 2f       	mov	r18, r23
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	46 2f       	mov	r20, r22
    46b2:	50 e0       	ldi	r21, 0x00	; 0
    46b4:	fd 01       	movw	r30, r26
    46b6:	e4 0f       	add	r30, r20
    46b8:	f5 1f       	adc	r31, r21
    46ba:	92 81       	ldd	r25, Z+2	; 0x02
    46bc:	92 95       	swap	r25
    46be:	9f 70       	andi	r25, 0x0F	; 15
    46c0:	9a 30       	cpi	r25, 0x0A	; 10
    46c2:	10 f0       	brcs	.+4      	; 0x46c8 <lora_driver_sendUploadMessage+0x40>
    46c4:	99 5c       	subi	r25, 0xC9	; 201
    46c6:	01 c0       	rjmp	.+2      	; 0x46ca <lora_driver_sendUploadMessage+0x42>
    46c8:	90 5d       	subi	r25, 0xD0	; 208
    46ca:	f9 01       	movw	r30, r18
    46cc:	e4 59       	subi	r30, 0x94	; 148
    46ce:	f7 4e       	sbci	r31, 0xE7	; 231
    46d0:	90 83       	st	Z, r25
    46d2:	2f 5f       	subi	r18, 0xFF	; 255
    46d4:	3f 4f       	sbci	r19, 0xFF	; 255
    46d6:	fd 01       	movw	r30, r26
    46d8:	e4 0f       	add	r30, r20
    46da:	f5 1f       	adc	r31, r21
    46dc:	92 81       	ldd	r25, Z+2	; 0x02
    46de:	9f 70       	andi	r25, 0x0F	; 15
    46e0:	49 2f       	mov	r20, r25
    46e2:	50 e0       	ldi	r21, 0x00	; 0
    46e4:	4a 30       	cpi	r20, 0x0A	; 10
    46e6:	51 05       	cpc	r21, r1
    46e8:	14 f0       	brlt	.+4      	; 0x46ee <lora_driver_sendUploadMessage+0x66>
    46ea:	99 5c       	subi	r25, 0xC9	; 201
    46ec:	01 c0       	rjmp	.+2      	; 0x46f0 <lora_driver_sendUploadMessage+0x68>
    46ee:	90 5d       	subi	r25, 0xD0	; 208
    46f0:	f9 01       	movw	r30, r18
    46f2:	e4 59       	subi	r30, 0x94	; 148
    46f4:	f7 4e       	sbci	r31, 0xE7	; 231
    46f6:	90 83       	st	Z, r25
    46f8:	7e 5f       	subi	r23, 0xFE	; 254
    46fa:	6f 5f       	subi	r22, 0xFF	; 255
    46fc:	11 96       	adiw	r26, 0x01	; 1
    46fe:	9c 91       	ld	r25, X
    4700:	11 97       	sbiw	r26, 0x01	; 1
    4702:	69 17       	cp	r22, r25
    4704:	98 f2       	brcs	.-90     	; 0x46ac <lora_driver_sendUploadMessage+0x24>
    4706:	01 c0       	rjmp	.+2      	; 0x470a <lora_driver_sendUploadMessage+0x82>
    4708:	70 e0       	ldi	r23, 0x00	; 0
    470a:	e7 2f       	mov	r30, r23
    470c:	f0 e0       	ldi	r31, 0x00	; 0
    470e:	e4 59       	subi	r30, 0x94	; 148
    4710:	f7 4e       	sbci	r31, 0xE7	; 231
    4712:	10 82       	st	Z, r1
    4714:	4c 91       	ld	r20, X
    4716:	81 11       	cpse	r24, r1
    4718:	03 c0       	rjmp	.+6      	; 0x4720 <lora_driver_sendUploadMessage+0x98>
    471a:	87 e3       	ldi	r24, 0x37	; 55
    471c:	97 e0       	ldi	r25, 0x07	; 7
    471e:	02 c0       	rjmp	.+4      	; 0x4724 <lora_driver_sendUploadMessage+0x9c>
    4720:	89 e3       	ldi	r24, 0x39	; 57
    4722:	97 e0       	ldi	r25, 0x07	; 7
    4724:	2c e6       	ldi	r18, 0x6C	; 108
    4726:	38 e1       	ldi	r19, 0x18	; 24
    4728:	3f 93       	push	r19
    472a:	2f 93       	push	r18
    472c:	1f 92       	push	r1
    472e:	4f 93       	push	r20
    4730:	9f 93       	push	r25
    4732:	8f 93       	push	r24
    4734:	8d e3       	ldi	r24, 0x3D	; 61
    4736:	97 e0       	ldi	r25, 0x07	; 7
    4738:	9f 93       	push	r25
    473a:	8f 93       	push	r24
    473c:	8e ea       	ldi	r24, 0xAE	; 174
    473e:	98 e1       	ldi	r25, 0x18	; 24
    4740:	9f 93       	push	r25
    4742:	8f 93       	push	r24
    4744:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
    4748:	60 e0       	ldi	r22, 0x00	; 0
    474a:	70 e0       	ldi	r23, 0x00	; 0
    474c:	8e ea       	ldi	r24, 0xAE	; 174
    474e:	98 e1       	ldi	r25, 0x18	; 24
    4750:	b3 de       	rcall	.-666    	; 0x44b8 <_uploadMessageRc>
    4752:	0f b6       	in	r0, 0x3f	; 63
    4754:	f8 94       	cli
    4756:	de bf       	out	0x3e, r29	; 62
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	cd bf       	out	0x3d, r28	; 61
    475c:	81 11       	cpse	r24, r1
    475e:	59 c0       	rjmp	.+178    	; 0x4812 <lora_driver_sendUploadMessage+0x18a>
    4760:	08 e2       	ldi	r16, 0x28	; 40
    4762:	15 e0       	ldi	r17, 0x05	; 5
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	4d e2       	ldi	r20, 0x2D	; 45
    476a:	50 e0       	ldi	r21, 0x00	; 0
    476c:	6b ed       	ldi	r22, 0xDB	; 219
    476e:	78 e1       	ldi	r23, 0x18	; 24
    4770:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_serialReplyBufferHandle>
    4774:	90 91 53 18 	lds	r25, 0x1853	; 0x801853 <_serialReplyBufferHandle+0x1>
    4778:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <xStreamBufferReceive>
    477c:	88 23       	and	r24, r24
    477e:	09 f4       	brne	.+2      	; 0x4782 <lora_driver_sendUploadMessage+0xfa>
    4780:	47 c0       	rjmp	.+142    	; 0x4810 <lora_driver_sendUploadMessage+0x188>
    4782:	8b ed       	ldi	r24, 0xDB	; 219
    4784:	98 e1       	ldi	r25, 0x18	; 24
    4786:	23 de       	rcall	.-954    	; 0x43ce <_reply2ReturnCode>
    4788:	8e 30       	cpi	r24, 0x0E	; 14
    478a:	09 f0       	breq	.+2      	; 0x478e <lora_driver_sendUploadMessage+0x106>
    478c:	42 c0       	rjmp	.+132    	; 0x4812 <lora_driver_sendUploadMessage+0x18a>
    478e:	87 e0       	ldi	r24, 0x07	; 7
    4790:	89 83       	std	Y+1, r24	; 0x01
    4792:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_downlinkMessageBuffer>
    4796:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_downlinkMessageBuffer+0x1>
    479a:	89 2b       	or	r24, r25
    479c:	a9 f1       	breq	.+106    	; 0x4808 <lora_driver_sendUploadMessage+0x180>
    479e:	be 01       	movw	r22, r28
    47a0:	6f 5f       	subi	r22, 0xFF	; 255
    47a2:	7f 4f       	sbci	r23, 0xFF	; 255
    47a4:	8b ed       	ldi	r24, 0xDB	; 219
    47a6:	98 e1       	ldi	r25, 0x18	; 24
    47a8:	68 d1       	rcall	.+720    	; 0x4a7a <decode_port_no>
    47aa:	80 93 56 18 	sts	0x1856, r24	; 0x801856 <_downlinkPayload>
    47ae:	e9 81       	ldd	r30, Y+1	; 0x01
    47b0:	f0 e0       	ldi	r31, 0x00	; 0
    47b2:	e5 52       	subi	r30, 0x25	; 37
    47b4:	f7 4e       	sbci	r31, 0xE7	; 231
    47b6:	df 01       	movw	r26, r30
    47b8:	0d 90       	ld	r0, X+
    47ba:	00 20       	and	r0, r0
    47bc:	e9 f7       	brne	.-6      	; 0x47b8 <lora_driver_sendUploadMessage+0x130>
    47be:	11 97       	sbiw	r26, 0x01	; 1
    47c0:	ae 1b       	sub	r26, r30
    47c2:	bf 0b       	sbc	r27, r31
    47c4:	aa 23       	and	r26, r26
    47c6:	91 f0       	breq	.+36     	; 0x47ec <lora_driver_sendUploadMessage+0x164>
    47c8:	bb 27       	eor	r27, r27
    47ca:	cd 01       	movw	r24, r26
    47cc:	01 97       	sbiw	r24, 0x01	; 1
    47ce:	9c 01       	movw	r18, r24
    47d0:	12 f4       	brpl	.+4      	; 0x47d6 <lora_driver_sendUploadMessage+0x14e>
    47d2:	2f 5f       	subi	r18, 0xFF	; 255
    47d4:	3f 4f       	sbci	r19, 0xFF	; 255
    47d6:	35 95       	asr	r19
    47d8:	27 95       	ror	r18
    47da:	20 93 57 18 	sts	0x1857, r18	; 0x801857 <_downlinkPayload+0x1>
    47de:	af 01       	movw	r20, r30
    47e0:	4f 5f       	subi	r20, 0xFF	; 255
    47e2:	5f 4f       	sbci	r21, 0xFF	; 255
    47e4:	64 e1       	ldi	r22, 0x14	; 20
    47e6:	88 e5       	ldi	r24, 0x58	; 88
    47e8:	98 e1       	ldi	r25, 0x18	; 24
    47ea:	73 d1       	rcall	.+742    	; 0x4ad2 <decode_hexadecimal_string_bytes>
    47ec:	01 e0       	ldi	r16, 0x01	; 1
    47ee:	10 e0       	ldi	r17, 0x00	; 0
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	46 e1       	ldi	r20, 0x16	; 22
    47f6:	50 e0       	ldi	r21, 0x00	; 0
    47f8:	66 e5       	ldi	r22, 0x56	; 86
    47fa:	78 e1       	ldi	r23, 0x18	; 24
    47fc:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_downlinkMessageBuffer>
    4800:	90 91 51 18 	lds	r25, 0x1851	; 0x801851 <_downlinkMessageBuffer+0x1>
    4804:	0e 94 9e 0c 	call	0x193c	; 0x193c <xStreamBufferSend>
    4808:	8e e0       	ldi	r24, 0x0E	; 14
    480a:	03 c0       	rjmp	.+6      	; 0x4812 <lora_driver_sendUploadMessage+0x18a>
    480c:	84 e1       	ldi	r24, 0x14	; 20
    480e:	01 c0       	rjmp	.+2      	; 0x4812 <lora_driver_sendUploadMessage+0x18a>
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	0f 90       	pop	r0
    4814:	df 91       	pop	r29
    4816:	cf 91       	pop	r28
    4818:	1f 91       	pop	r17
    481a:	0f 91       	pop	r16
    481c:	08 95       	ret

0000481e <lora_driver_setAdaptiveDataRate>:
    481e:	81 30       	cpi	r24, 0x01	; 1
    4820:	19 f0       	breq	.+6      	; 0x4828 <lora_driver_setAdaptiveDataRate+0xa>
    4822:	6d e4       	ldi	r22, 0x4D	; 77
    4824:	77 e0       	ldi	r23, 0x07	; 7
    4826:	02 c0       	rjmp	.+4      	; 0x482c <lora_driver_setAdaptiveDataRate+0xe>
    4828:	66 e2       	ldi	r22, 0x26	; 38
    482a:	78 e0       	ldi	r23, 0x08	; 8
    482c:	81 e5       	ldi	r24, 0x51	; 81
    482e:	97 e0       	ldi	r25, 0x07	; 7
    4830:	43 ce       	rjmp	.-890    	; 0x44b8 <_uploadMessageRc>
    4832:	08 95       	ret

00004834 <lora_driver_setReceiveDelay>:
    4834:	9f 93       	push	r25
    4836:	8f 93       	push	r24
    4838:	82 e8       	ldi	r24, 0x82	; 130
    483a:	97 e0       	ldi	r25, 0x07	; 7
    483c:	9f 93       	push	r25
    483e:	8f 93       	push	r24
    4840:	8e ea       	ldi	r24, 0xAE	; 174
    4842:	98 e1       	ldi	r25, 0x18	; 24
    4844:	9f 93       	push	r25
    4846:	8f 93       	push	r24
    4848:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
    484c:	60 e0       	ldi	r22, 0x00	; 0
    484e:	70 e0       	ldi	r23, 0x00	; 0
    4850:	8e ea       	ldi	r24, 0xAE	; 174
    4852:	98 e1       	ldi	r25, 0x18	; 24
    4854:	31 de       	rcall	.-926    	; 0x44b8 <_uploadMessageRc>
    4856:	0f 90       	pop	r0
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	0f 90       	pop	r0
    4862:	08 95       	ret

00004864 <lora_driver_configureToEu868>:
    4864:	2f 92       	push	r2
    4866:	3f 92       	push	r3
    4868:	4f 92       	push	r4
    486a:	5f 92       	push	r5
    486c:	6f 92       	push	r6
    486e:	7f 92       	push	r7
    4870:	8f 92       	push	r8
    4872:	9f 92       	push	r9
    4874:	af 92       	push	r10
    4876:	bf 92       	push	r11
    4878:	cf 92       	push	r12
    487a:	df 92       	push	r13
    487c:	ef 92       	push	r14
    487e:	ff 92       	push	r15
    4880:	0f 93       	push	r16
    4882:	1f 93       	push	r17
    4884:	cf 93       	push	r28
    4886:	df 93       	push	r29
    4888:	cd b7       	in	r28, 0x3d	; 61
    488a:	de b7       	in	r29, 0x3e	; 62
    488c:	a0 97       	sbiw	r28, 0x20	; 32
    488e:	0f b6       	in	r0, 0x3f	; 63
    4890:	f8 94       	cli
    4892:	de bf       	out	0x3e, r29	; 62
    4894:	0f be       	out	0x3f, r0	; 63
    4896:	cd bf       	out	0x3d, r28	; 61
    4898:	6f ea       	ldi	r22, 0xAF	; 175
    489a:	77 e0       	ldi	r23, 0x07	; 7
    489c:	8b eb       	ldi	r24, 0xBB	; 187
    489e:	97 e0       	ldi	r25, 0x07	; 7
    48a0:	3c dd       	rcall	.-1416   	; 0x431a <_uploadMessage>
    48a2:	95 dd       	rcall	.-1238   	; 0x43ce <_reply2ReturnCode>
    48a4:	81 11       	cpse	r24, r1
    48a6:	a3 c0       	rjmp	.+326    	; 0x49ee <lora_driver_configureToEu868+0x18a>
    48a8:	80 e2       	ldi	r24, 0x20	; 32
    48aa:	e2 e2       	ldi	r30, 0x22	; 34
    48ac:	f2 e0       	ldi	r31, 0x02	; 2
    48ae:	de 01       	movw	r26, r28
    48b0:	11 96       	adiw	r26, 0x01	; 1
    48b2:	01 90       	ld	r0, Z+
    48b4:	0d 92       	st	X+, r0
    48b6:	8a 95       	dec	r24
    48b8:	e1 f7       	brne	.-8      	; 0x48b2 <lora_driver_configureToEu868+0x4e>
    48ba:	9e 01       	movw	r18, r28
    48bc:	2f 5f       	subi	r18, 0xFF	; 255
    48be:	3f 4f       	sbci	r19, 0xFF	; 255
    48c0:	69 01       	movw	r12, r18
    48c2:	e1 2c       	mov	r14, r1
    48c4:	f1 2c       	mov	r15, r1
    48c6:	0f 2e       	mov	r0, r31
    48c8:	f7 ec       	ldi	r31, 0xC7	; 199
    48ca:	af 2e       	mov	r10, r31
    48cc:	f7 e0       	ldi	r31, 0x07	; 7
    48ce:	bf 2e       	mov	r11, r31
    48d0:	f0 2d       	mov	r31, r0
    48d2:	0e ea       	ldi	r16, 0xAE	; 174
    48d4:	18 e1       	ldi	r17, 0x18	; 24
    48d6:	0f 2e       	mov	r0, r31
    48d8:	f0 ee       	ldi	r31, 0xE0	; 224
    48da:	4f 2e       	mov	r4, r31
    48dc:	f7 e0       	ldi	r31, 0x07	; 7
    48de:	5f 2e       	mov	r5, r31
    48e0:	f0 2d       	mov	r31, r0
    48e2:	0f 2e       	mov	r0, r31
    48e4:	f7 ef       	ldi	r31, 0xF7	; 247
    48e6:	8f 2e       	mov	r8, r31
    48e8:	f7 e0       	ldi	r31, 0x07	; 7
    48ea:	9f 2e       	mov	r9, r31
    48ec:	f0 2d       	mov	r31, r0
    48ee:	0f 2e       	mov	r0, r31
    48f0:	f1 e1       	ldi	r31, 0x11	; 17
    48f2:	6f 2e       	mov	r6, r31
    48f4:	f8 e0       	ldi	r31, 0x08	; 8
    48f6:	7f 2e       	mov	r7, r31
    48f8:	f0 2d       	mov	r31, r0
    48fa:	3e 2c       	mov	r3, r14
    48fc:	2f 2c       	mov	r2, r15
    48fe:	ff 92       	push	r15
    4900:	ef 92       	push	r14
    4902:	bf 92       	push	r11
    4904:	af 92       	push	r10
    4906:	1f 93       	push	r17
    4908:	0f 93       	push	r16
    490a:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
    490e:	60 e0       	ldi	r22, 0x00	; 0
    4910:	70 e0       	ldi	r23, 0x00	; 0
    4912:	c8 01       	movw	r24, r16
    4914:	02 dd       	rcall	.-1532   	; 0x431a <_uploadMessage>
    4916:	5b dd       	rcall	.-1354   	; 0x43ce <_reply2ReturnCode>
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	0f 90       	pop	r0
    491e:	0f 90       	pop	r0
    4920:	0f 90       	pop	r0
    4922:	0f 90       	pop	r0
    4924:	81 11       	cpse	r24, r1
    4926:	63 c0       	rjmp	.+198    	; 0x49ee <lora_driver_configureToEu868+0x18a>
    4928:	32 e0       	ldi	r19, 0x02	; 2
    492a:	3e 15       	cp	r19, r14
    492c:	e8 f4       	brcc	.+58     	; 0x4968 <lora_driver_configureToEu868+0x104>
    492e:	f6 01       	movw	r30, r12
    4930:	83 81       	ldd	r24, Z+3	; 0x03
    4932:	8f 93       	push	r24
    4934:	82 81       	ldd	r24, Z+2	; 0x02
    4936:	8f 93       	push	r24
    4938:	81 81       	ldd	r24, Z+1	; 0x01
    493a:	8f 93       	push	r24
    493c:	80 81       	ld	r24, Z
    493e:	8f 93       	push	r24
    4940:	ff 92       	push	r15
    4942:	ef 92       	push	r14
    4944:	5f 92       	push	r5
    4946:	4f 92       	push	r4
    4948:	1f 93       	push	r17
    494a:	0f 93       	push	r16
    494c:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
    4950:	60 e0       	ldi	r22, 0x00	; 0
    4952:	70 e0       	ldi	r23, 0x00	; 0
    4954:	c8 01       	movw	r24, r16
    4956:	e1 dc       	rcall	.-1598   	; 0x431a <_uploadMessage>
    4958:	3a dd       	rcall	.-1420   	; 0x43ce <_reply2ReturnCode>
    495a:	0f b6       	in	r0, 0x3f	; 63
    495c:	f8 94       	cli
    495e:	de bf       	out	0x3e, r29	; 62
    4960:	0f be       	out	0x3f, r0	; 63
    4962:	cd bf       	out	0x3d, r28	; 61
    4964:	81 11       	cpse	r24, r1
    4966:	43 c0       	rjmp	.+134    	; 0x49ee <lora_driver_configureToEu868+0x18a>
    4968:	2f 92       	push	r2
    496a:	3f 92       	push	r3
    496c:	9f 92       	push	r9
    496e:	8f 92       	push	r8
    4970:	1f 93       	push	r17
    4972:	0f 93       	push	r16
    4974:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
    4978:	60 e0       	ldi	r22, 0x00	; 0
    497a:	70 e0       	ldi	r23, 0x00	; 0
    497c:	c8 01       	movw	r24, r16
    497e:	cd dc       	rcall	.-1638   	; 0x431a <_uploadMessage>
    4980:	26 dd       	rcall	.-1460   	; 0x43ce <_reply2ReturnCode>
    4982:	0f 90       	pop	r0
    4984:	0f 90       	pop	r0
    4986:	0f 90       	pop	r0
    4988:	0f 90       	pop	r0
    498a:	0f 90       	pop	r0
    498c:	0f 90       	pop	r0
    498e:	81 11       	cpse	r24, r1
    4990:	2e c0       	rjmp	.+92     	; 0x49ee <lora_driver_configureToEu868+0x18a>
    4992:	2f 92       	push	r2
    4994:	3f 92       	push	r3
    4996:	7f 92       	push	r7
    4998:	6f 92       	push	r6
    499a:	1f 93       	push	r17
    499c:	0f 93       	push	r16
    499e:	0e 94 84 36 	call	0x6d08	; 0x6d08 <sprintf>
    49a2:	60 e0       	ldi	r22, 0x00	; 0
    49a4:	70 e0       	ldi	r23, 0x00	; 0
    49a6:	c8 01       	movw	r24, r16
    49a8:	b8 dc       	rcall	.-1680   	; 0x431a <_uploadMessage>
    49aa:	11 dd       	rcall	.-1502   	; 0x43ce <_reply2ReturnCode>
    49ac:	0f 90       	pop	r0
    49ae:	0f 90       	pop	r0
    49b0:	0f 90       	pop	r0
    49b2:	0f 90       	pop	r0
    49b4:	0f 90       	pop	r0
    49b6:	0f 90       	pop	r0
    49b8:	81 11       	cpse	r24, r1
    49ba:	19 c0       	rjmp	.+50     	; 0x49ee <lora_driver_configureToEu868+0x18a>
    49bc:	3f ef       	ldi	r19, 0xFF	; 255
    49be:	e3 1a       	sub	r14, r19
    49c0:	f3 0a       	sbc	r15, r19
    49c2:	84 e0       	ldi	r24, 0x04	; 4
    49c4:	c8 0e       	add	r12, r24
    49c6:	d1 1c       	adc	r13, r1
    49c8:	98 e0       	ldi	r25, 0x08	; 8
    49ca:	e9 16       	cp	r14, r25
    49cc:	f1 04       	cpc	r15, r1
    49ce:	09 f0       	breq	.+2      	; 0x49d2 <lora_driver_configureToEu868+0x16e>
    49d0:	94 cf       	rjmp	.-216    	; 0x48fa <lora_driver_configureToEu868+0x96>
    49d2:	60 e0       	ldi	r22, 0x00	; 0
    49d4:	70 e0       	ldi	r23, 0x00	; 0
    49d6:	89 e2       	ldi	r24, 0x29	; 41
    49d8:	98 e0       	ldi	r25, 0x08	; 8
    49da:	9f dc       	rcall	.-1730   	; 0x431a <_uploadMessage>
    49dc:	f8 dc       	rcall	.-1552   	; 0x43ce <_reply2ReturnCode>
    49de:	81 11       	cpse	r24, r1
    49e0:	06 c0       	rjmp	.+12     	; 0x49ee <lora_driver_configureToEu868+0x18a>
    49e2:	60 e0       	ldi	r22, 0x00	; 0
    49e4:	70 e0       	ldi	r23, 0x00	; 0
    49e6:	8a e3       	ldi	r24, 0x3A	; 58
    49e8:	98 e0       	ldi	r25, 0x08	; 8
    49ea:	97 dc       	rcall	.-1746   	; 0x431a <_uploadMessage>
    49ec:	f0 dc       	rcall	.-1568   	; 0x43ce <_reply2ReturnCode>
    49ee:	a0 96       	adiw	r28, 0x20	; 32
    49f0:	0f b6       	in	r0, 0x3f	; 63
    49f2:	f8 94       	cli
    49f4:	de bf       	out	0x3e, r29	; 62
    49f6:	0f be       	out	0x3f, r0	; 63
    49f8:	cd bf       	out	0x3d, r28	; 61
    49fa:	df 91       	pop	r29
    49fc:	cf 91       	pop	r28
    49fe:	1f 91       	pop	r17
    4a00:	0f 91       	pop	r16
    4a02:	ff 90       	pop	r15
    4a04:	ef 90       	pop	r14
    4a06:	df 90       	pop	r13
    4a08:	cf 90       	pop	r12
    4a0a:	bf 90       	pop	r11
    4a0c:	af 90       	pop	r10
    4a0e:	9f 90       	pop	r9
    4a10:	8f 90       	pop	r8
    4a12:	7f 90       	pop	r7
    4a14:	6f 90       	pop	r6
    4a16:	5f 90       	pop	r5
    4a18:	4f 90       	pop	r4
    4a1a:	3f 90       	pop	r3
    4a1c:	2f 90       	pop	r2
    4a1e:	08 95       	ret

00004a20 <lora_driver_setOtaaIdentity>:
    4a20:	ef 92       	push	r14
    4a22:	ff 92       	push	r15
    4a24:	0f 93       	push	r16
    4a26:	1f 93       	push	r17
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	ec 01       	movw	r28, r24
    4a2e:	8b 01       	movw	r16, r22
    4a30:	7a 01       	movw	r14, r20
    4a32:	81 e0       	ldi	r24, 0x01	; 1
    4a34:	f4 de       	rcall	.-536    	; 0x481e <lora_driver_setAdaptiveDataRate>
    4a36:	81 11       	cpse	r24, r1
    4a38:	0d c0       	rjmp	.+26     	; 0x4a54 <lora_driver_setOtaaIdentity+0x34>
    4a3a:	ce 01       	movw	r24, r28
    4a3c:	d4 dd       	rcall	.-1112   	; 0x45e6 <lora_driver_setApplicationIdentifier>
    4a3e:	81 11       	cpse	r24, r1
    4a40:	09 c0       	rjmp	.+18     	; 0x4a54 <lora_driver_setOtaaIdentity+0x34>
    4a42:	c8 01       	movw	r24, r16
    4a44:	e1 dd       	rcall	.-1086   	; 0x4608 <lora_driver_setApplicationKey>
    4a46:	81 11       	cpse	r24, r1
    4a48:	05 c0       	rjmp	.+10     	; 0x4a54 <lora_driver_setOtaaIdentity+0x34>
    4a4a:	c7 01       	movw	r24, r14
    4a4c:	bb dd       	rcall	.-1162   	; 0x45c4 <lora_driver_setDeviceIdentifier>
    4a4e:	81 11       	cpse	r24, r1
    4a50:	01 c0       	rjmp	.+2      	; 0x4a54 <lora_driver_setOtaaIdentity+0x34>
    4a52:	eb dd       	rcall	.-1066   	; 0x462a <lora_driver_saveMac>
    4a54:	df 91       	pop	r29
    4a56:	cf 91       	pop	r28
    4a58:	1f 91       	pop	r17
    4a5a:	0f 91       	pop	r16
    4a5c:	ff 90       	pop	r15
    4a5e:	ef 90       	pop	r14
    4a60:	08 95       	ret

00004a62 <lora_driver_mapReturnCodeToText>:
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	fc 01       	movw	r30, r24
    4a66:	ee 0f       	add	r30, r30
    4a68:	ff 1f       	adc	r31, r31
    4a6a:	8e 0f       	add	r24, r30
    4a6c:	9f 1f       	adc	r25, r31
    4a6e:	fc 01       	movw	r30, r24
    4a70:	e2 50       	subi	r30, 0x02	; 2
    4a72:	f7 4f       	sbci	r31, 0xF7	; 247
    4a74:	81 81       	ldd	r24, Z+1	; 0x01
    4a76:	92 81       	ldd	r25, Z+2	; 0x02
    4a78:	08 95       	ret

00004a7a <decode_port_no>:
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	00 97       	sbiw	r24, 0x00	; 0
    4a7e:	29 f1       	breq	.+74     	; 0x4aca <decode_port_no+0x50>
    4a80:	fb 01       	movw	r30, r22
    4a82:	20 81       	ld	r18, Z
    4a84:	fc 01       	movw	r30, r24
    4a86:	01 90       	ld	r0, Z+
    4a88:	00 20       	and	r0, r0
    4a8a:	e9 f7       	brne	.-6      	; 0x4a86 <decode_port_no+0xc>
    4a8c:	31 97       	sbiw	r30, 0x01	; 1
    4a8e:	e8 1b       	sub	r30, r24
    4a90:	f9 0b       	sbc	r31, r25
    4a92:	82 2f       	mov	r24, r18
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	e8 17       	cp	r30, r24
    4a98:	f9 07       	cpc	r31, r25
    4a9a:	c8 f0       	brcs	.+50     	; 0x4ace <decode_port_no+0x54>
    4a9c:	80 e0       	ldi	r24, 0x00	; 0
    4a9e:	08 c0       	rjmp	.+16     	; 0x4ab0 <decode_port_no+0x36>
    4aa0:	88 0f       	add	r24, r24
    4aa2:	38 2f       	mov	r19, r24
    4aa4:	33 0f       	add	r19, r19
    4aa6:	33 0f       	add	r19, r19
    4aa8:	83 0f       	add	r24, r19
    4aaa:	80 53       	subi	r24, 0x30	; 48
    4aac:	89 0f       	add	r24, r25
    4aae:	2f 5f       	subi	r18, 0xFF	; 255
    4ab0:	fd 01       	movw	r30, r26
    4ab2:	e2 0f       	add	r30, r18
    4ab4:	f1 1d       	adc	r31, r1
    4ab6:	90 81       	ld	r25, Z
    4ab8:	30 ed       	ldi	r19, 0xD0	; 208
    4aba:	39 0f       	add	r19, r25
    4abc:	3a 30       	cpi	r19, 0x0A	; 10
    4abe:	10 f4       	brcc	.+4      	; 0x4ac4 <decode_port_no+0x4a>
    4ac0:	91 11       	cpse	r25, r1
    4ac2:	ee cf       	rjmp	.-36     	; 0x4aa0 <decode_port_no+0x26>
    4ac4:	fb 01       	movw	r30, r22
    4ac6:	20 83       	st	Z, r18
    4ac8:	08 95       	ret
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	08 95       	ret
    4ace:	80 e0       	ldi	r24, 0x00	; 0
    4ad0:	08 95       	ret

00004ad2 <decode_hexadecimal_string_bytes>:
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
    4ada:	dc 01       	movw	r26, r24
    4adc:	ea 01       	movw	r28, r20
    4ade:	20 97       	sbiw	r28, 0x00	; 0
    4ae0:	e1 f1       	breq	.+120    	; 0x4b5a <decode_hexadecimal_string_bytes+0x88>
    4ae2:	fa 01       	movw	r30, r20
    4ae4:	01 90       	ld	r0, Z+
    4ae6:	00 20       	and	r0, r0
    4ae8:	e9 f7       	brne	.-6      	; 0x4ae4 <decode_hexadecimal_string_bytes+0x12>
    4aea:	31 97       	sbiw	r30, 0x01	; 1
    4aec:	e4 1b       	sub	r30, r20
    4aee:	f5 0b       	sbc	r31, r21
    4af0:	32 97       	sbiw	r30, 0x02	; 2
    4af2:	10 f5       	brcc	.+68     	; 0x4b38 <decode_hexadecimal_string_bytes+0x66>
    4af4:	32 c0       	rjmp	.+100    	; 0x4b5a <decode_hexadecimal_string_bytes+0x88>
    4af6:	8d 01       	movw	r16, r26
    4af8:	04 0f       	add	r16, r20
    4afa:	15 1f       	adc	r17, r21
    4afc:	30 e0       	ldi	r19, 0x00	; 0
    4afe:	ae 01       	movw	r20, r28
    4b00:	42 0f       	add	r20, r18
    4b02:	53 1f       	adc	r21, r19
    4b04:	fa 01       	movw	r30, r20
    4b06:	90 81       	ld	r25, Z
    4b08:	91 34       	cpi	r25, 0x41	; 65
    4b0a:	28 f0       	brcs	.+10     	; 0x4b16 <decode_hexadecimal_string_bytes+0x44>
    4b0c:	97 53       	subi	r25, 0x37	; 55
    4b0e:	59 2f       	mov	r21, r25
    4b10:	52 95       	swap	r21
    4b12:	50 7f       	andi	r21, 0xF0	; 240
    4b14:	03 c0       	rjmp	.+6      	; 0x4b1c <decode_hexadecimal_string_bytes+0x4a>
    4b16:	59 2f       	mov	r21, r25
    4b18:	52 95       	swap	r21
    4b1a:	50 7f       	andi	r21, 0xF0	; 240
    4b1c:	2c 0f       	add	r18, r28
    4b1e:	3d 1f       	adc	r19, r29
    4b20:	f9 01       	movw	r30, r18
    4b22:	91 81       	ldd	r25, Z+1	; 0x01
    4b24:	91 34       	cpi	r25, 0x41	; 65
    4b26:	10 f0       	brcs	.+4      	; 0x4b2c <decode_hexadecimal_string_bytes+0x5a>
    4b28:	97 53       	subi	r25, 0x37	; 55
    4b2a:	01 c0       	rjmp	.+2      	; 0x4b2e <decode_hexadecimal_string_bytes+0x5c>
    4b2c:	90 53       	subi	r25, 0x30	; 48
    4b2e:	95 0f       	add	r25, r21
    4b30:	f8 01       	movw	r30, r16
    4b32:	90 83       	st	Z, r25
    4b34:	8f 5f       	subi	r24, 0xFF	; 255
    4b36:	01 c0       	rjmp	.+2      	; 0x4b3a <decode_hexadecimal_string_bytes+0x68>
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	28 2f       	mov	r18, r24
    4b3c:	22 0f       	add	r18, r18
    4b3e:	48 2f       	mov	r20, r24
    4b40:	50 e0       	ldi	r21, 0x00	; 0
    4b42:	fe 01       	movw	r30, r28
    4b44:	01 90       	ld	r0, Z+
    4b46:	00 20       	and	r0, r0
    4b48:	e9 f7       	brne	.-6      	; 0x4b44 <decode_hexadecimal_string_bytes+0x72>
    4b4a:	31 97       	sbiw	r30, 0x01	; 1
    4b4c:	ec 1b       	sub	r30, r28
    4b4e:	fd 0b       	sbc	r31, r29
    4b50:	4e 17       	cp	r20, r30
    4b52:	5f 07       	cpc	r21, r31
    4b54:	10 f4       	brcc	.+4      	; 0x4b5a <decode_hexadecimal_string_bytes+0x88>
    4b56:	86 13       	cpse	r24, r22
    4b58:	ce cf       	rjmp	.-100    	; 0x4af6 <decode_hexadecimal_string_bytes+0x24>
    4b5a:	df 91       	pop	r29
    4b5c:	cf 91       	pop	r28
    4b5e:	1f 91       	pop	r17
    4b60:	0f 91       	pop	r16
    4b62:	08 95       	ret

00004b64 <_serialCallBack>:
    4b64:	80 91 0b 19 	lds	r24, 0x190B	; 0x80190b <crc_sum.1945>
    4b68:	86 0f       	add	r24, r22
    4b6a:	80 93 0b 19 	sts	0x190B, r24	; 0x80190b <crc_sum.1945>
    4b6e:	90 91 0e 19 	lds	r25, 0x190E	; 0x80190e <_mh_state>
    4b72:	91 30       	cpi	r25, 0x01	; 1
    4b74:	79 f0       	breq	.+30     	; 0x4b94 <_serialCallBack+0x30>
    4b76:	28 f0       	brcs	.+10     	; 0x4b82 <_serialCallBack+0x1e>
    4b78:	92 30       	cpi	r25, 0x02	; 2
    4b7a:	a9 f0       	breq	.+42     	; 0x4ba6 <_serialCallBack+0x42>
    4b7c:	93 30       	cpi	r25, 0x03	; 3
    4b7e:	19 f1       	breq	.+70     	; 0x4bc6 <_serialCallBack+0x62>
    4b80:	08 95       	ret
    4b82:	6f 3f       	cpi	r22, 0xFF	; 255
    4b84:	09 f0       	breq	.+2      	; 0x4b88 <_serialCallBack+0x24>
    4b86:	48 c0       	rjmp	.+144    	; 0x4c18 <_serialCallBack+0xb4>
    4b88:	10 92 0b 19 	sts	0x190B, r1	; 0x80190b <crc_sum.1945>
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	80 93 0e 19 	sts	0x190E, r24	; 0x80190e <_mh_state>
    4b92:	08 95       	ret
    4b94:	66 38       	cpi	r22, 0x86	; 134
    4b96:	09 f0       	breq	.+2      	; 0x4b9a <_serialCallBack+0x36>
    4b98:	3f c0       	rjmp	.+126    	; 0x4c18 <_serialCallBack+0xb4>
    4b9a:	10 92 0a 19 	sts	0x190A, r1	; 0x80190a <inDex.1943>
    4b9e:	82 e0       	ldi	r24, 0x02	; 2
    4ba0:	80 93 0e 19 	sts	0x190E, r24	; 0x80190e <_mh_state>
    4ba4:	08 95       	ret
    4ba6:	e0 91 0a 19 	lds	r30, 0x190A	; 0x80190a <inDex.1943>
    4baa:	81 e0       	ldi	r24, 0x01	; 1
    4bac:	8e 0f       	add	r24, r30
    4bae:	80 93 0a 19 	sts	0x190A, r24	; 0x80190a <inDex.1943>
    4bb2:	f0 e0       	ldi	r31, 0x00	; 0
    4bb4:	e8 5f       	subi	r30, 0xF8	; 248
    4bb6:	f6 4e       	sbci	r31, 0xE6	; 230
    4bb8:	60 83       	st	Z, r22
    4bba:	82 30       	cpi	r24, 0x02	; 2
    4bbc:	69 f5       	brne	.+90     	; 0x4c18 <_serialCallBack+0xb4>
    4bbe:	83 e0       	ldi	r24, 0x03	; 3
    4bc0:	80 93 0e 19 	sts	0x190E, r24	; 0x80190e <_mh_state>
    4bc4:	08 95       	ret
    4bc6:	90 91 0a 19 	lds	r25, 0x190A	; 0x80190a <inDex.1943>
    4bca:	21 e0       	ldi	r18, 0x01	; 1
    4bcc:	29 0f       	add	r18, r25
    4bce:	20 93 0a 19 	sts	0x190A, r18	; 0x80190a <inDex.1943>
    4bd2:	96 30       	cpi	r25, 0x06	; 6
    4bd4:	09 f5       	brne	.+66     	; 0x4c18 <_serialCallBack+0xb4>
    4bd6:	81 11       	cpse	r24, r1
    4bd8:	0e c0       	rjmp	.+28     	; 0x4bf6 <_serialCallBack+0x92>
    4bda:	e8 e0       	ldi	r30, 0x08	; 8
    4bdc:	f9 e1       	ldi	r31, 0x19	; 25
    4bde:	80 81       	ld	r24, Z
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	98 2f       	mov	r25, r24
    4be4:	88 27       	eor	r24, r24
    4be6:	21 81       	ldd	r18, Z+1	; 0x01
    4be8:	82 0f       	add	r24, r18
    4bea:	91 1d       	adc	r25, r1
    4bec:	90 93 10 19 	sts	0x1910, r25	; 0x801910 <_ppm+0x1>
    4bf0:	80 93 0f 19 	sts	0x190F, r24	; 0x80190f <_ppm>
    4bf4:	04 c0       	rjmp	.+8      	; 0x4bfe <_serialCallBack+0x9a>
    4bf6:	10 92 10 19 	sts	0x1910, r1	; 0x801910 <_ppm+0x1>
    4bfa:	10 92 0f 19 	sts	0x190F, r1	; 0x80190f <_ppm>
    4bfe:	10 92 0e 19 	sts	0x190E, r1	; 0x80190e <_mh_state>
    4c02:	e0 91 0c 19 	lds	r30, 0x190C	; 0x80190c <_appCallBack>
    4c06:	f0 91 0d 19 	lds	r31, 0x190D	; 0x80190d <_appCallBack+0x1>
    4c0a:	30 97       	sbiw	r30, 0x00	; 0
    4c0c:	29 f0       	breq	.+10     	; 0x4c18 <_serialCallBack+0xb4>
    4c0e:	80 91 0f 19 	lds	r24, 0x190F	; 0x80190f <_ppm>
    4c12:	90 91 10 19 	lds	r25, 0x1910	; 0x801910 <_ppm+0x1>
    4c16:	19 95       	eicall
    4c18:	08 95       	ret

00004c1a <mh_z19_initialise>:
    4c1a:	8f 92       	push	r8
    4c1c:	9f 92       	push	r9
    4c1e:	af 92       	push	r10
    4c20:	cf 92       	push	r12
    4c22:	ef 92       	push	r14
    4c24:	0f 93       	push	r16
    4c26:	0f 2e       	mov	r0, r31
    4c28:	f2 eb       	ldi	r31, 0xB2	; 178
    4c2a:	8f 2e       	mov	r8, r31
    4c2c:	f5 e2       	ldi	r31, 0x25	; 37
    4c2e:	9f 2e       	mov	r9, r31
    4c30:	f0 2d       	mov	r31, r0
    4c32:	68 94       	set
    4c34:	aa 24       	eor	r10, r10
    4c36:	a4 f8       	bld	r10, 4
    4c38:	68 94       	set
    4c3a:	cc 24       	eor	r12, r12
    4c3c:	c4 f8       	bld	r12, 4
    4c3e:	e1 2c       	mov	r14, r1
    4c40:	00 e0       	ldi	r16, 0x00	; 0
    4c42:	23 e0       	ldi	r18, 0x03	; 3
    4c44:	40 e8       	ldi	r20, 0x80	; 128
    4c46:	55 e2       	ldi	r21, 0x25	; 37
    4c48:	60 e0       	ldi	r22, 0x00	; 0
    4c4a:	70 e0       	ldi	r23, 0x00	; 0
    4c4c:	50 d0       	rcall	.+160    	; 0x4cee <serial_create>
    4c4e:	90 93 12 19 	sts	0x1912, r25	; 0x801912 <_serial+0x1>
    4c52:	80 93 11 19 	sts	0x1911, r24	; 0x801911 <_serial>
    4c56:	0f 91       	pop	r16
    4c58:	ef 90       	pop	r14
    4c5a:	cf 90       	pop	r12
    4c5c:	af 90       	pop	r10
    4c5e:	9f 90       	pop	r9
    4c60:	8f 90       	pop	r8
    4c62:	08 95       	ret

00004c64 <mh_z19_injectCallBack>:
    4c64:	90 93 0d 19 	sts	0x190D, r25	; 0x80190d <_appCallBack+0x1>
    4c68:	80 93 0c 19 	sts	0x190C, r24	; 0x80190c <_appCallBack>
    4c6c:	08 95       	ret

00004c6e <mh_z19_takeMeassuring>:
    4c6e:	cf 93       	push	r28
    4c70:	df 93       	push	r29
    4c72:	cd b7       	in	r28, 0x3d	; 61
    4c74:	de b7       	in	r29, 0x3e	; 62
    4c76:	29 97       	sbiw	r28, 0x09	; 9
    4c78:	0f b6       	in	r0, 0x3f	; 63
    4c7a:	f8 94       	cli
    4c7c:	de bf       	out	0x3e, r29	; 62
    4c7e:	0f be       	out	0x3f, r0	; 63
    4c80:	cd bf       	out	0x3d, r28	; 61
    4c82:	89 e0       	ldi	r24, 0x09	; 9
    4c84:	e2 e4       	ldi	r30, 0x42	; 66
    4c86:	f2 e0       	ldi	r31, 0x02	; 2
    4c88:	9e 01       	movw	r18, r28
    4c8a:	2f 5f       	subi	r18, 0xFF	; 255
    4c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c8e:	d9 01       	movw	r26, r18
    4c90:	01 90       	ld	r0, Z+
    4c92:	0d 92       	st	X+, r0
    4c94:	8a 95       	dec	r24
    4c96:	e1 f7       	brne	.-8      	; 0x4c90 <mh_z19_takeMeassuring+0x22>
    4c98:	10 92 10 19 	sts	0x1910, r1	; 0x801910 <_ppm+0x1>
    4c9c:	10 92 0f 19 	sts	0x190F, r1	; 0x80190f <_ppm>
    4ca0:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <_serial>
    4ca4:	90 91 12 19 	lds	r25, 0x1912	; 0x801912 <_serial+0x1>
    4ca8:	00 97       	sbiw	r24, 0x00	; 0
    4caa:	31 f0       	breq	.+12     	; 0x4cb8 <mh_z19_takeMeassuring+0x4a>
    4cac:	42 2f       	mov	r20, r18
    4cae:	53 2f       	mov	r21, r19
    4cb0:	69 e0       	ldi	r22, 0x09	; 9
    4cb2:	ee d0       	rcall	.+476    	; 0x4e90 <serial_sendBytes>
    4cb4:	80 e0       	ldi	r24, 0x00	; 0
    4cb6:	01 c0       	rjmp	.+2      	; 0x4cba <mh_z19_takeMeassuring+0x4c>
    4cb8:	82 e0       	ldi	r24, 0x02	; 2
    4cba:	29 96       	adiw	r28, 0x09	; 9
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	f8 94       	cli
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	0f be       	out	0x3f, r0	; 63
    4cc4:	cd bf       	out	0x3d, r28	; 61
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	08 95       	ret

00004ccc <mh_z19_getCo2Ppm>:
    4ccc:	20 91 0f 19 	lds	r18, 0x190F	; 0x80190f <_ppm>
    4cd0:	30 91 10 19 	lds	r19, 0x1910	; 0x801910 <_ppm+0x1>
    4cd4:	21 15       	cp	r18, r1
    4cd6:	31 05       	cpc	r19, r1
    4cd8:	29 f4       	brne	.+10     	; 0x4ce4 <mh_z19_getCo2Ppm+0x18>
    4cda:	fc 01       	movw	r30, r24
    4cdc:	11 82       	std	Z+1, r1	; 0x01
    4cde:	10 82       	st	Z, r1
    4ce0:	81 e0       	ldi	r24, 0x01	; 1
    4ce2:	08 95       	ret
    4ce4:	fc 01       	movw	r30, r24
    4ce6:	31 83       	std	Z+1, r19	; 0x01
    4ce8:	20 83       	st	Z, r18
    4cea:	80 e0       	ldi	r24, 0x00	; 0
    4cec:	08 95       	ret

00004cee <serial_create>:
    4cee:	2f 92       	push	r2
    4cf0:	3f 92       	push	r3
    4cf2:	4f 92       	push	r4
    4cf4:	5f 92       	push	r5
    4cf6:	6f 92       	push	r6
    4cf8:	7f 92       	push	r7
    4cfa:	8f 92       	push	r8
    4cfc:	9f 92       	push	r9
    4cfe:	af 92       	push	r10
    4d00:	cf 92       	push	r12
    4d02:	ef 92       	push	r14
    4d04:	ff 92       	push	r15
    4d06:	0f 93       	push	r16
    4d08:	1f 93       	push	r17
    4d0a:	cf 93       	push	r28
    4d0c:	df 93       	push	r29
    4d0e:	cd b7       	in	r28, 0x3d	; 61
    4d10:	de b7       	in	r29, 0x3e	; 62
    4d12:	f8 2e       	mov	r15, r24
    4d14:	2a 01       	movw	r4, r20
    4d16:	3b 01       	movw	r6, r22
    4d18:	88 e0       	ldi	r24, 0x08	; 8
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	0e 94 92 33 	call	0x6724	; 0x6724 <malloc>
    4d20:	8c 01       	movw	r16, r24
    4d22:	8f 2d       	mov	r24, r15
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	fc 01       	movw	r30, r24
    4d28:	ee 0f       	add	r30, r30
    4d2a:	ff 1f       	adc	r31, r31
    4d2c:	ed 5e       	subi	r30, 0xED	; 237
    4d2e:	f6 4e       	sbci	r31, 0xE6	; 230
    4d30:	11 83       	std	Z+1, r17	; 0x01
    4d32:	00 83       	st	Z, r16
    4d34:	01 15       	cp	r16, r1
    4d36:	11 05       	cpc	r17, r1
    4d38:	09 f4       	brne	.+2      	; 0x4d3c <serial_create+0x4e>
    4d3a:	6d c0       	rjmp	.+218    	; 0x4e16 <serial_create+0x128>
    4d3c:	88 0f       	add	r24, r24
    4d3e:	99 1f       	adc	r25, r25
    4d40:	fc 01       	movw	r30, r24
    4d42:	e5 5f       	subi	r30, 0xF5	; 245
    4d44:	fd 4f       	sbci	r31, 0xFD	; 253
    4d46:	80 81       	ld	r24, Z
    4d48:	91 81       	ldd	r25, Z+1	; 0x01
    4d4a:	d8 01       	movw	r26, r16
    4d4c:	8d 93       	st	X+, r24
    4d4e:	9c 93       	st	X, r25
    4d50:	8c 2d       	mov	r24, r12
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	88 0f       	add	r24, r24
    4d56:	99 1f       	adc	r25, r25
    4d58:	88 0f       	add	r24, r24
    4d5a:	99 1f       	adc	r25, r25
    4d5c:	0e 94 92 33 	call	0x6724	; 0x6724 <malloc>
    4d60:	1c 01       	movw	r2, r24
    4d62:	86 e0       	ldi	r24, 0x06	; 6
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	0e 94 92 33 	call	0x6724	; 0x6724 <malloc>
    4d6a:	7c 01       	movw	r14, r24
    4d6c:	4c 2d       	mov	r20, r12
    4d6e:	b1 01       	movw	r22, r2
    4d70:	f4 d6       	rcall	.+3560   	; 0x5b5a <fifo_init>
    4d72:	f8 01       	movw	r30, r16
    4d74:	f5 82       	std	Z+5, r15	; 0x05
    4d76:	e4 82       	std	Z+4, r14	; 0x04
    4d78:	8a 2d       	mov	r24, r10
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	88 0f       	add	r24, r24
    4d7e:	99 1f       	adc	r25, r25
    4d80:	88 0f       	add	r24, r24
    4d82:	99 1f       	adc	r25, r25
    4d84:	0e 94 92 33 	call	0x6724	; 0x6724 <malloc>
    4d88:	1c 01       	movw	r2, r24
    4d8a:	86 e0       	ldi	r24, 0x06	; 6
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	0e 94 92 33 	call	0x6724	; 0x6724 <malloc>
    4d92:	7c 01       	movw	r14, r24
    4d94:	4a 2d       	mov	r20, r10
    4d96:	b1 01       	movw	r22, r2
    4d98:	e0 d6       	rcall	.+3520   	; 0x5b5a <fifo_init>
    4d9a:	d8 01       	movw	r26, r16
    4d9c:	13 96       	adiw	r26, 0x03	; 3
    4d9e:	fc 92       	st	X, r15
    4da0:	ee 92       	st	-X, r14
    4da2:	12 97       	sbiw	r26, 0x02	; 2
    4da4:	17 96       	adiw	r26, 0x07	; 7
    4da6:	9c 92       	st	X, r9
    4da8:	8e 92       	st	-X, r8
    4daa:	16 97       	sbiw	r26, 0x06	; 6
    4dac:	ff b6       	in	r15, 0x3f	; 63
    4dae:	f8 94       	cli
    4db0:	ed 91       	ld	r30, X+
    4db2:	fc 91       	ld	r31, X
    4db4:	11 97       	sbiw	r26, 0x01	; 1
    4db6:	36 97       	sbiw	r30, 0x06	; 6
    4db8:	80 81       	ld	r24, Z
    4dba:	82 60       	ori	r24, 0x02	; 2
    4dbc:	80 83       	st	Z, r24
    4dbe:	8d 90       	ld	r8, X+
    4dc0:	9c 90       	ld	r9, X
    4dc2:	c3 01       	movw	r24, r6
    4dc4:	b2 01       	movw	r22, r4
    4dc6:	0e 94 50 32 	call	0x64a0	; 0x64a0 <__floatunsisf>
    4dca:	20 e0       	ldi	r18, 0x00	; 0
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	40 e0       	ldi	r20, 0x00	; 0
    4dd0:	51 e4       	ldi	r21, 0x41	; 65
    4dd2:	0e 94 de 32 	call	0x65bc	; 0x65bc <__mulsf3>
    4dd6:	9b 01       	movw	r18, r22
    4dd8:	ac 01       	movw	r20, r24
    4dda:	60 e0       	ldi	r22, 0x00	; 0
    4ddc:	74 e2       	ldi	r23, 0x24	; 36
    4dde:	84 e7       	ldi	r24, 0x74	; 116
    4de0:	9b e4       	ldi	r25, 0x4B	; 75
    4de2:	0e 94 b7 31 	call	0x636e	; 0x636e <__divsf3>
    4de6:	20 e0       	ldi	r18, 0x00	; 0
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	40 e8       	ldi	r20, 0x80	; 128
    4dec:	5f e3       	ldi	r21, 0x3F	; 63
    4dee:	0e 94 52 31 	call	0x62a4	; 0x62a4 <__subsf3>
    4df2:	0e 94 24 32 	call	0x6448	; 0x6448 <__fixunssfsi>
    4df6:	f4 01       	movw	r30, r8
    4df8:	32 97       	sbiw	r30, 0x02	; 2
    4dfa:	60 83       	st	Z, r22
    4dfc:	d8 01       	movw	r26, r16
    4dfe:	ed 91       	ld	r30, X+
    4e00:	fc 91       	ld	r31, X
    4e02:	11 97       	sbiw	r26, 0x01	; 1
    4e04:	35 97       	sbiw	r30, 0x05	; 5
    4e06:	88 e9       	ldi	r24, 0x98	; 152
    4e08:	80 83       	st	Z, r24
    4e0a:	ed 91       	ld	r30, X+
    4e0c:	fc 91       	ld	r31, X
    4e0e:	34 97       	sbiw	r30, 0x04	; 4
    4e10:	86 e0       	ldi	r24, 0x06	; 6
    4e12:	80 83       	st	Z, r24
    4e14:	ff be       	out	0x3f, r15	; 63
    4e16:	c8 01       	movw	r24, r16
    4e18:	df 91       	pop	r29
    4e1a:	cf 91       	pop	r28
    4e1c:	1f 91       	pop	r17
    4e1e:	0f 91       	pop	r16
    4e20:	ff 90       	pop	r15
    4e22:	ef 90       	pop	r14
    4e24:	cf 90       	pop	r12
    4e26:	af 90       	pop	r10
    4e28:	9f 90       	pop	r9
    4e2a:	8f 90       	pop	r8
    4e2c:	7f 90       	pop	r7
    4e2e:	6f 90       	pop	r6
    4e30:	5f 90       	pop	r5
    4e32:	4f 90       	pop	r4
    4e34:	3f 90       	pop	r3
    4e36:	2f 90       	pop	r2
    4e38:	08 95       	ret

00004e3a <serial_sendByte>:
    4e3a:	cf 93       	push	r28
    4e3c:	df 93       	push	r29
    4e3e:	dc 01       	movw	r26, r24
    4e40:	89 2b       	or	r24, r25
    4e42:	01 f1       	breq	.+64     	; 0x4e84 <serial_sendByte+0x4a>
    4e44:	12 96       	adiw	r26, 0x02	; 2
    4e46:	ed 91       	ld	r30, X+
    4e48:	fc 91       	ld	r31, X
    4e4a:	13 97       	sbiw	r26, 0x03	; 3
    4e4c:	93 81       	ldd	r25, Z+3	; 0x03
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	25 81       	ldd	r18, Z+5	; 0x05
    4e52:	98 1b       	sub	r25, r24
    4e54:	92 23       	and	r25, r18
    4e56:	84 81       	ldd	r24, Z+4	; 0x04
    4e58:	98 17       	cp	r25, r24
    4e5a:	b1 f0       	breq	.+44     	; 0x4e88 <serial_sendByte+0x4e>
    4e5c:	83 81       	ldd	r24, Z+3	; 0x03
    4e5e:	26 95       	lsr	r18
    4e60:	28 23       	and	r18, r24
    4e62:	c0 81       	ld	r28, Z
    4e64:	d1 81       	ldd	r29, Z+1	; 0x01
    4e66:	c2 0f       	add	r28, r18
    4e68:	d1 1d       	adc	r29, r1
    4e6a:	68 83       	st	Y, r22
    4e6c:	8f 5f       	subi	r24, 0xFF	; 255
    4e6e:	95 81       	ldd	r25, Z+5	; 0x05
    4e70:	89 23       	and	r24, r25
    4e72:	83 83       	std	Z+3, r24	; 0x03
    4e74:	ed 91       	ld	r30, X+
    4e76:	fc 91       	ld	r31, X
    4e78:	35 97       	sbiw	r30, 0x05	; 5
    4e7a:	80 81       	ld	r24, Z
    4e7c:	80 62       	ori	r24, 0x20	; 32
    4e7e:	80 83       	st	Z, r24
    4e80:	80 e0       	ldi	r24, 0x00	; 0
    4e82:	03 c0       	rjmp	.+6      	; 0x4e8a <serial_sendByte+0x50>
    4e84:	81 e0       	ldi	r24, 0x01	; 1
    4e86:	01 c0       	rjmp	.+2      	; 0x4e8a <serial_sendByte+0x50>
    4e88:	82 e0       	ldi	r24, 0x02	; 2
    4e8a:	df 91       	pop	r29
    4e8c:	cf 91       	pop	r28
    4e8e:	08 95       	ret

00004e90 <serial_sendBytes>:
    4e90:	ef 92       	push	r14
    4e92:	ff 92       	push	r15
    4e94:	0f 93       	push	r16
    4e96:	1f 93       	push	r17
    4e98:	cf 93       	push	r28
    4e9a:	df 93       	push	r29
    4e9c:	7c 01       	movw	r14, r24
    4e9e:	00 97       	sbiw	r24, 0x00	; 0
    4ea0:	09 f4       	brne	.+2      	; 0x4ea4 <serial_sendBytes+0x14>
    4ea2:	41 c0       	rjmp	.+130    	; 0x4f26 <serial_sendBytes+0x96>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	12 96       	adiw	r26, 0x02	; 2
    4ea8:	ed 91       	ld	r30, X+
    4eaa:	fc 91       	ld	r31, X
    4eac:	13 97       	sbiw	r26, 0x03	; 3
    4eae:	93 81       	ldd	r25, Z+3	; 0x03
    4eb0:	82 81       	ldd	r24, Z+2	; 0x02
    4eb2:	98 1b       	sub	r25, r24
    4eb4:	85 81       	ldd	r24, Z+5	; 0x05
    4eb6:	98 23       	and	r25, r24
    4eb8:	84 81       	ldd	r24, Z+4	; 0x04
    4eba:	89 1b       	sub	r24, r25
    4ebc:	86 17       	cp	r24, r22
    4ebe:	a8 f1       	brcs	.+106    	; 0x4f2a <serial_sendBytes+0x9a>
    4ec0:	66 23       	and	r22, r22
    4ec2:	41 f1       	breq	.+80     	; 0x4f14 <serial_sendBytes+0x84>
    4ec4:	84 2f       	mov	r24, r20
    4ec6:	95 2f       	mov	r25, r21
    4ec8:	dc 01       	movw	r26, r24
    4eca:	61 50       	subi	r22, 0x01	; 1
    4ecc:	46 2f       	mov	r20, r22
    4ece:	50 e0       	ldi	r21, 0x00	; 0
    4ed0:	4f 5f       	subi	r20, 0xFF	; 255
    4ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ed4:	48 0f       	add	r20, r24
    4ed6:	59 1f       	adc	r21, r25
    4ed8:	e7 01       	movw	r28, r14
    4eda:	ea 81       	ldd	r30, Y+2	; 0x02
    4edc:	fb 81       	ldd	r31, Y+3	; 0x03
    4ede:	93 81       	ldd	r25, Z+3	; 0x03
    4ee0:	82 81       	ldd	r24, Z+2	; 0x02
    4ee2:	25 81       	ldd	r18, Z+5	; 0x05
    4ee4:	98 1b       	sub	r25, r24
    4ee6:	92 23       	and	r25, r18
    4ee8:	84 81       	ldd	r24, Z+4	; 0x04
    4eea:	98 17       	cp	r25, r24
    4eec:	79 f0       	breq	.+30     	; 0x4f0c <serial_sendBytes+0x7c>
    4eee:	8c 91       	ld	r24, X
    4ef0:	93 81       	ldd	r25, Z+3	; 0x03
    4ef2:	26 95       	lsr	r18
    4ef4:	29 23       	and	r18, r25
    4ef6:	60 81       	ld	r22, Z
    4ef8:	71 81       	ldd	r23, Z+1	; 0x01
    4efa:	8b 01       	movw	r16, r22
    4efc:	02 0f       	add	r16, r18
    4efe:	11 1d       	adc	r17, r1
    4f00:	e8 01       	movw	r28, r16
    4f02:	88 83       	st	Y, r24
    4f04:	9f 5f       	subi	r25, 0xFF	; 255
    4f06:	85 81       	ldd	r24, Z+5	; 0x05
    4f08:	98 23       	and	r25, r24
    4f0a:	93 83       	std	Z+3, r25	; 0x03
    4f0c:	11 96       	adiw	r26, 0x01	; 1
    4f0e:	a4 17       	cp	r26, r20
    4f10:	b5 07       	cpc	r27, r21
    4f12:	11 f7       	brne	.-60     	; 0x4ed8 <serial_sendBytes+0x48>
    4f14:	d7 01       	movw	r26, r14
    4f16:	ed 91       	ld	r30, X+
    4f18:	fc 91       	ld	r31, X
    4f1a:	35 97       	sbiw	r30, 0x05	; 5
    4f1c:	80 81       	ld	r24, Z
    4f1e:	80 62       	ori	r24, 0x20	; 32
    4f20:	80 83       	st	Z, r24
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	03 c0       	rjmp	.+6      	; 0x4f2c <serial_sendBytes+0x9c>
    4f26:	81 e0       	ldi	r24, 0x01	; 1
    4f28:	01 c0       	rjmp	.+2      	; 0x4f2c <serial_sendBytes+0x9c>
    4f2a:	82 e0       	ldi	r24, 0x02	; 2
    4f2c:	df 91       	pop	r29
    4f2e:	cf 91       	pop	r28
    4f30:	1f 91       	pop	r17
    4f32:	0f 91       	pop	r16
    4f34:	ff 90       	pop	r15
    4f36:	ef 90       	pop	r14
    4f38:	08 95       	ret

00004f3a <serial_getByte>:
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	d1 f0       	breq	.+52     	; 0x4f72 <serial_getByte+0x38>
    4f3e:	dc 01       	movw	r26, r24
    4f40:	14 96       	adiw	r26, 0x04	; 4
    4f42:	ed 91       	ld	r30, X+
    4f44:	fc 91       	ld	r31, X
    4f46:	15 97       	sbiw	r26, 0x05	; 5
    4f48:	93 81       	ldd	r25, Z+3	; 0x03
    4f4a:	82 81       	ldd	r24, Z+2	; 0x02
    4f4c:	98 17       	cp	r25, r24
    4f4e:	99 f0       	breq	.+38     	; 0x4f76 <serial_getByte+0x3c>
    4f50:	92 81       	ldd	r25, Z+2	; 0x02
    4f52:	85 81       	ldd	r24, Z+5	; 0x05
    4f54:	86 95       	lsr	r24
    4f56:	89 23       	and	r24, r25
    4f58:	a0 81       	ld	r26, Z
    4f5a:	b1 81       	ldd	r27, Z+1	; 0x01
    4f5c:	a8 0f       	add	r26, r24
    4f5e:	b1 1d       	adc	r27, r1
    4f60:	8c 91       	ld	r24, X
    4f62:	db 01       	movw	r26, r22
    4f64:	8c 93       	st	X, r24
    4f66:	9f 5f       	subi	r25, 0xFF	; 255
    4f68:	85 81       	ldd	r24, Z+5	; 0x05
    4f6a:	98 23       	and	r25, r24
    4f6c:	92 83       	std	Z+2, r25	; 0x02
    4f6e:	80 e0       	ldi	r24, 0x00	; 0
    4f70:	08 95       	ret
    4f72:	81 e0       	ldi	r24, 0x01	; 1
    4f74:	08 95       	ret
    4f76:	83 e0       	ldi	r24, 0x03	; 3
    4f78:	08 95       	ret

00004f7a <__vector_25>:
    4f7a:	1f 92       	push	r1
    4f7c:	0f 92       	push	r0
    4f7e:	0f b6       	in	r0, 0x3f	; 63
    4f80:	0f 92       	push	r0
    4f82:	11 24       	eor	r1, r1
    4f84:	0b b6       	in	r0, 0x3b	; 59
    4f86:	0f 92       	push	r0
    4f88:	2f 93       	push	r18
    4f8a:	3f 93       	push	r19
    4f8c:	4f 93       	push	r20
    4f8e:	5f 93       	push	r21
    4f90:	6f 93       	push	r22
    4f92:	7f 93       	push	r23
    4f94:	8f 93       	push	r24
    4f96:	9f 93       	push	r25
    4f98:	af 93       	push	r26
    4f9a:	bf 93       	push	r27
    4f9c:	cf 93       	push	r28
    4f9e:	df 93       	push	r29
    4fa0:	ef 93       	push	r30
    4fa2:	ff 93       	push	r31
    4fa4:	a0 91 13 19 	lds	r26, 0x1913	; 0x801913 <_ser_handle>
    4fa8:	b0 91 14 19 	lds	r27, 0x1914	; 0x801914 <_ser_handle+0x1>
    4fac:	10 97       	sbiw	r26, 0x00	; 0
    4fae:	11 f1       	breq	.+68     	; 0x4ff4 <__vector_25+0x7a>
    4fb0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4fb4:	14 96       	adiw	r26, 0x04	; 4
    4fb6:	ed 91       	ld	r30, X+
    4fb8:	fc 91       	ld	r31, X
    4fba:	15 97       	sbiw	r26, 0x05	; 5
    4fbc:	93 81       	ldd	r25, Z+3	; 0x03
    4fbe:	82 81       	ldd	r24, Z+2	; 0x02
    4fc0:	25 81       	ldd	r18, Z+5	; 0x05
    4fc2:	98 1b       	sub	r25, r24
    4fc4:	92 23       	and	r25, r18
    4fc6:	84 81       	ldd	r24, Z+4	; 0x04
    4fc8:	98 17       	cp	r25, r24
    4fca:	61 f0       	breq	.+24     	; 0x4fe4 <__vector_25+0x6a>
    4fcc:	83 81       	ldd	r24, Z+3	; 0x03
    4fce:	26 95       	lsr	r18
    4fd0:	28 23       	and	r18, r24
    4fd2:	c0 81       	ld	r28, Z
    4fd4:	d1 81       	ldd	r29, Z+1	; 0x01
    4fd6:	c2 0f       	add	r28, r18
    4fd8:	d1 1d       	adc	r29, r1
    4fda:	68 83       	st	Y, r22
    4fdc:	8f 5f       	subi	r24, 0xFF	; 255
    4fde:	95 81       	ldd	r25, Z+5	; 0x05
    4fe0:	89 23       	and	r24, r25
    4fe2:	83 83       	std	Z+3, r24	; 0x03
    4fe4:	16 96       	adiw	r26, 0x06	; 6
    4fe6:	ed 91       	ld	r30, X+
    4fe8:	fc 91       	ld	r31, X
    4fea:	17 97       	sbiw	r26, 0x07	; 7
    4fec:	30 97       	sbiw	r30, 0x00	; 0
    4fee:	11 f0       	breq	.+4      	; 0x4ff4 <__vector_25+0x7a>
    4ff0:	cd 01       	movw	r24, r26
    4ff2:	19 95       	eicall
    4ff4:	ff 91       	pop	r31
    4ff6:	ef 91       	pop	r30
    4ff8:	df 91       	pop	r29
    4ffa:	cf 91       	pop	r28
    4ffc:	bf 91       	pop	r27
    4ffe:	af 91       	pop	r26
    5000:	9f 91       	pop	r25
    5002:	8f 91       	pop	r24
    5004:	7f 91       	pop	r23
    5006:	6f 91       	pop	r22
    5008:	5f 91       	pop	r21
    500a:	4f 91       	pop	r20
    500c:	3f 91       	pop	r19
    500e:	2f 91       	pop	r18
    5010:	0f 90       	pop	r0
    5012:	0b be       	out	0x3b, r0	; 59
    5014:	0f 90       	pop	r0
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	0f 90       	pop	r0
    501a:	1f 90       	pop	r1
    501c:	18 95       	reti

0000501e <__vector_26>:
    501e:	1f 92       	push	r1
    5020:	0f 92       	push	r0
    5022:	0f b6       	in	r0, 0x3f	; 63
    5024:	0f 92       	push	r0
    5026:	11 24       	eor	r1, r1
    5028:	0b b6       	in	r0, 0x3b	; 59
    502a:	0f 92       	push	r0
    502c:	2f 93       	push	r18
    502e:	8f 93       	push	r24
    5030:	9f 93       	push	r25
    5032:	af 93       	push	r26
    5034:	bf 93       	push	r27
    5036:	ef 93       	push	r30
    5038:	ff 93       	push	r31
    503a:	e0 91 13 19 	lds	r30, 0x1913	; 0x801913 <_ser_handle>
    503e:	f0 91 14 19 	lds	r31, 0x1914	; 0x801914 <_ser_handle+0x1>
    5042:	30 97       	sbiw	r30, 0x00	; 0
    5044:	b9 f0       	breq	.+46     	; 0x5074 <__vector_26+0x56>
    5046:	02 80       	ldd	r0, Z+2	; 0x02
    5048:	f3 81       	ldd	r31, Z+3	; 0x03
    504a:	e0 2d       	mov	r30, r0
    504c:	93 81       	ldd	r25, Z+3	; 0x03
    504e:	82 81       	ldd	r24, Z+2	; 0x02
    5050:	98 17       	cp	r25, r24
    5052:	b1 f0       	breq	.+44     	; 0x5080 <__vector_26+0x62>
    5054:	92 81       	ldd	r25, Z+2	; 0x02
    5056:	85 81       	ldd	r24, Z+5	; 0x05
    5058:	28 2f       	mov	r18, r24
    505a:	26 95       	lsr	r18
    505c:	29 23       	and	r18, r25
    505e:	a0 81       	ld	r26, Z
    5060:	b1 81       	ldd	r27, Z+1	; 0x01
    5062:	a2 0f       	add	r26, r18
    5064:	b1 1d       	adc	r27, r1
    5066:	2c 91       	ld	r18, X
    5068:	9f 5f       	subi	r25, 0xFF	; 255
    506a:	89 23       	and	r24, r25
    506c:	82 83       	std	Z+2, r24	; 0x02
    506e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5072:	0b c0       	rjmp	.+22     	; 0x508a <__vector_26+0x6c>
    5074:	e1 ec       	ldi	r30, 0xC1	; 193
    5076:	f0 e0       	ldi	r31, 0x00	; 0
    5078:	80 81       	ld	r24, Z
    507a:	8f 7d       	andi	r24, 0xDF	; 223
    507c:	80 83       	st	Z, r24
    507e:	05 c0       	rjmp	.+10     	; 0x508a <__vector_26+0x6c>
    5080:	e1 ec       	ldi	r30, 0xC1	; 193
    5082:	f0 e0       	ldi	r31, 0x00	; 0
    5084:	80 81       	ld	r24, Z
    5086:	8f 7d       	andi	r24, 0xDF	; 223
    5088:	80 83       	st	Z, r24
    508a:	ff 91       	pop	r31
    508c:	ef 91       	pop	r30
    508e:	bf 91       	pop	r27
    5090:	af 91       	pop	r26
    5092:	9f 91       	pop	r25
    5094:	8f 91       	pop	r24
    5096:	2f 91       	pop	r18
    5098:	0f 90       	pop	r0
    509a:	0b be       	out	0x3b, r0	; 59
    509c:	0f 90       	pop	r0
    509e:	0f be       	out	0x3f, r0	; 63
    50a0:	0f 90       	pop	r0
    50a2:	1f 90       	pop	r1
    50a4:	18 95       	reti

000050a6 <__vector_36>:
    50a6:	1f 92       	push	r1
    50a8:	0f 92       	push	r0
    50aa:	0f b6       	in	r0, 0x3f	; 63
    50ac:	0f 92       	push	r0
    50ae:	11 24       	eor	r1, r1
    50b0:	0b b6       	in	r0, 0x3b	; 59
    50b2:	0f 92       	push	r0
    50b4:	2f 93       	push	r18
    50b6:	3f 93       	push	r19
    50b8:	4f 93       	push	r20
    50ba:	5f 93       	push	r21
    50bc:	6f 93       	push	r22
    50be:	7f 93       	push	r23
    50c0:	8f 93       	push	r24
    50c2:	9f 93       	push	r25
    50c4:	af 93       	push	r26
    50c6:	bf 93       	push	r27
    50c8:	cf 93       	push	r28
    50ca:	df 93       	push	r29
    50cc:	ef 93       	push	r30
    50ce:	ff 93       	push	r31
    50d0:	a0 91 15 19 	lds	r26, 0x1915	; 0x801915 <_ser_handle+0x2>
    50d4:	b0 91 16 19 	lds	r27, 0x1916	; 0x801916 <_ser_handle+0x3>
    50d8:	10 97       	sbiw	r26, 0x00	; 0
    50da:	11 f1       	breq	.+68     	; 0x5120 <__vector_36+0x7a>
    50dc:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    50e0:	14 96       	adiw	r26, 0x04	; 4
    50e2:	ed 91       	ld	r30, X+
    50e4:	fc 91       	ld	r31, X
    50e6:	15 97       	sbiw	r26, 0x05	; 5
    50e8:	93 81       	ldd	r25, Z+3	; 0x03
    50ea:	82 81       	ldd	r24, Z+2	; 0x02
    50ec:	25 81       	ldd	r18, Z+5	; 0x05
    50ee:	98 1b       	sub	r25, r24
    50f0:	92 23       	and	r25, r18
    50f2:	84 81       	ldd	r24, Z+4	; 0x04
    50f4:	98 17       	cp	r25, r24
    50f6:	61 f0       	breq	.+24     	; 0x5110 <__vector_36+0x6a>
    50f8:	83 81       	ldd	r24, Z+3	; 0x03
    50fa:	26 95       	lsr	r18
    50fc:	28 23       	and	r18, r24
    50fe:	c0 81       	ld	r28, Z
    5100:	d1 81       	ldd	r29, Z+1	; 0x01
    5102:	c2 0f       	add	r28, r18
    5104:	d1 1d       	adc	r29, r1
    5106:	68 83       	st	Y, r22
    5108:	8f 5f       	subi	r24, 0xFF	; 255
    510a:	95 81       	ldd	r25, Z+5	; 0x05
    510c:	89 23       	and	r24, r25
    510e:	83 83       	std	Z+3, r24	; 0x03
    5110:	16 96       	adiw	r26, 0x06	; 6
    5112:	ed 91       	ld	r30, X+
    5114:	fc 91       	ld	r31, X
    5116:	17 97       	sbiw	r26, 0x07	; 7
    5118:	30 97       	sbiw	r30, 0x00	; 0
    511a:	11 f0       	breq	.+4      	; 0x5120 <__vector_36+0x7a>
    511c:	cd 01       	movw	r24, r26
    511e:	19 95       	eicall
    5120:	ff 91       	pop	r31
    5122:	ef 91       	pop	r30
    5124:	df 91       	pop	r29
    5126:	cf 91       	pop	r28
    5128:	bf 91       	pop	r27
    512a:	af 91       	pop	r26
    512c:	9f 91       	pop	r25
    512e:	8f 91       	pop	r24
    5130:	7f 91       	pop	r23
    5132:	6f 91       	pop	r22
    5134:	5f 91       	pop	r21
    5136:	4f 91       	pop	r20
    5138:	3f 91       	pop	r19
    513a:	2f 91       	pop	r18
    513c:	0f 90       	pop	r0
    513e:	0b be       	out	0x3b, r0	; 59
    5140:	0f 90       	pop	r0
    5142:	0f be       	out	0x3f, r0	; 63
    5144:	0f 90       	pop	r0
    5146:	1f 90       	pop	r1
    5148:	18 95       	reti

0000514a <__vector_37>:
    514a:	1f 92       	push	r1
    514c:	0f 92       	push	r0
    514e:	0f b6       	in	r0, 0x3f	; 63
    5150:	0f 92       	push	r0
    5152:	11 24       	eor	r1, r1
    5154:	0b b6       	in	r0, 0x3b	; 59
    5156:	0f 92       	push	r0
    5158:	2f 93       	push	r18
    515a:	8f 93       	push	r24
    515c:	9f 93       	push	r25
    515e:	af 93       	push	r26
    5160:	bf 93       	push	r27
    5162:	ef 93       	push	r30
    5164:	ff 93       	push	r31
    5166:	e0 91 15 19 	lds	r30, 0x1915	; 0x801915 <_ser_handle+0x2>
    516a:	f0 91 16 19 	lds	r31, 0x1916	; 0x801916 <_ser_handle+0x3>
    516e:	30 97       	sbiw	r30, 0x00	; 0
    5170:	b9 f0       	breq	.+46     	; 0x51a0 <__vector_37+0x56>
    5172:	02 80       	ldd	r0, Z+2	; 0x02
    5174:	f3 81       	ldd	r31, Z+3	; 0x03
    5176:	e0 2d       	mov	r30, r0
    5178:	93 81       	ldd	r25, Z+3	; 0x03
    517a:	82 81       	ldd	r24, Z+2	; 0x02
    517c:	98 17       	cp	r25, r24
    517e:	b1 f0       	breq	.+44     	; 0x51ac <__vector_37+0x62>
    5180:	92 81       	ldd	r25, Z+2	; 0x02
    5182:	85 81       	ldd	r24, Z+5	; 0x05
    5184:	28 2f       	mov	r18, r24
    5186:	26 95       	lsr	r18
    5188:	29 23       	and	r18, r25
    518a:	a0 81       	ld	r26, Z
    518c:	b1 81       	ldd	r27, Z+1	; 0x01
    518e:	a2 0f       	add	r26, r18
    5190:	b1 1d       	adc	r27, r1
    5192:	2c 91       	ld	r18, X
    5194:	9f 5f       	subi	r25, 0xFF	; 255
    5196:	89 23       	and	r24, r25
    5198:	82 83       	std	Z+2, r24	; 0x02
    519a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    519e:	0b c0       	rjmp	.+22     	; 0x51b6 <__vector_37+0x6c>
    51a0:	e9 ec       	ldi	r30, 0xC9	; 201
    51a2:	f0 e0       	ldi	r31, 0x00	; 0
    51a4:	80 81       	ld	r24, Z
    51a6:	8f 7d       	andi	r24, 0xDF	; 223
    51a8:	80 83       	st	Z, r24
    51aa:	05 c0       	rjmp	.+10     	; 0x51b6 <__vector_37+0x6c>
    51ac:	e9 ec       	ldi	r30, 0xC9	; 201
    51ae:	f0 e0       	ldi	r31, 0x00	; 0
    51b0:	80 81       	ld	r24, Z
    51b2:	8f 7d       	andi	r24, 0xDF	; 223
    51b4:	80 83       	st	Z, r24
    51b6:	ff 91       	pop	r31
    51b8:	ef 91       	pop	r30
    51ba:	bf 91       	pop	r27
    51bc:	af 91       	pop	r26
    51be:	9f 91       	pop	r25
    51c0:	8f 91       	pop	r24
    51c2:	2f 91       	pop	r18
    51c4:	0f 90       	pop	r0
    51c6:	0b be       	out	0x3b, r0	; 59
    51c8:	0f 90       	pop	r0
    51ca:	0f be       	out	0x3f, r0	; 63
    51cc:	0f 90       	pop	r0
    51ce:	1f 90       	pop	r1
    51d0:	18 95       	reti

000051d2 <__vector_51>:
    51d2:	1f 92       	push	r1
    51d4:	0f 92       	push	r0
    51d6:	0f b6       	in	r0, 0x3f	; 63
    51d8:	0f 92       	push	r0
    51da:	11 24       	eor	r1, r1
    51dc:	0b b6       	in	r0, 0x3b	; 59
    51de:	0f 92       	push	r0
    51e0:	2f 93       	push	r18
    51e2:	3f 93       	push	r19
    51e4:	4f 93       	push	r20
    51e6:	5f 93       	push	r21
    51e8:	6f 93       	push	r22
    51ea:	7f 93       	push	r23
    51ec:	8f 93       	push	r24
    51ee:	9f 93       	push	r25
    51f0:	af 93       	push	r26
    51f2:	bf 93       	push	r27
    51f4:	cf 93       	push	r28
    51f6:	df 93       	push	r29
    51f8:	ef 93       	push	r30
    51fa:	ff 93       	push	r31
    51fc:	a0 91 17 19 	lds	r26, 0x1917	; 0x801917 <_ser_handle+0x4>
    5200:	b0 91 18 19 	lds	r27, 0x1918	; 0x801918 <_ser_handle+0x5>
    5204:	10 97       	sbiw	r26, 0x00	; 0
    5206:	11 f1       	breq	.+68     	; 0x524c <__vector_51+0x7a>
    5208:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    520c:	14 96       	adiw	r26, 0x04	; 4
    520e:	ed 91       	ld	r30, X+
    5210:	fc 91       	ld	r31, X
    5212:	15 97       	sbiw	r26, 0x05	; 5
    5214:	93 81       	ldd	r25, Z+3	; 0x03
    5216:	82 81       	ldd	r24, Z+2	; 0x02
    5218:	25 81       	ldd	r18, Z+5	; 0x05
    521a:	98 1b       	sub	r25, r24
    521c:	92 23       	and	r25, r18
    521e:	84 81       	ldd	r24, Z+4	; 0x04
    5220:	98 17       	cp	r25, r24
    5222:	61 f0       	breq	.+24     	; 0x523c <__vector_51+0x6a>
    5224:	83 81       	ldd	r24, Z+3	; 0x03
    5226:	26 95       	lsr	r18
    5228:	28 23       	and	r18, r24
    522a:	c0 81       	ld	r28, Z
    522c:	d1 81       	ldd	r29, Z+1	; 0x01
    522e:	c2 0f       	add	r28, r18
    5230:	d1 1d       	adc	r29, r1
    5232:	68 83       	st	Y, r22
    5234:	8f 5f       	subi	r24, 0xFF	; 255
    5236:	95 81       	ldd	r25, Z+5	; 0x05
    5238:	89 23       	and	r24, r25
    523a:	83 83       	std	Z+3, r24	; 0x03
    523c:	16 96       	adiw	r26, 0x06	; 6
    523e:	ed 91       	ld	r30, X+
    5240:	fc 91       	ld	r31, X
    5242:	17 97       	sbiw	r26, 0x07	; 7
    5244:	30 97       	sbiw	r30, 0x00	; 0
    5246:	11 f0       	breq	.+4      	; 0x524c <__vector_51+0x7a>
    5248:	cd 01       	movw	r24, r26
    524a:	19 95       	eicall
    524c:	ff 91       	pop	r31
    524e:	ef 91       	pop	r30
    5250:	df 91       	pop	r29
    5252:	cf 91       	pop	r28
    5254:	bf 91       	pop	r27
    5256:	af 91       	pop	r26
    5258:	9f 91       	pop	r25
    525a:	8f 91       	pop	r24
    525c:	7f 91       	pop	r23
    525e:	6f 91       	pop	r22
    5260:	5f 91       	pop	r21
    5262:	4f 91       	pop	r20
    5264:	3f 91       	pop	r19
    5266:	2f 91       	pop	r18
    5268:	0f 90       	pop	r0
    526a:	0b be       	out	0x3b, r0	; 59
    526c:	0f 90       	pop	r0
    526e:	0f be       	out	0x3f, r0	; 63
    5270:	0f 90       	pop	r0
    5272:	1f 90       	pop	r1
    5274:	18 95       	reti

00005276 <__vector_52>:
    5276:	1f 92       	push	r1
    5278:	0f 92       	push	r0
    527a:	0f b6       	in	r0, 0x3f	; 63
    527c:	0f 92       	push	r0
    527e:	11 24       	eor	r1, r1
    5280:	0b b6       	in	r0, 0x3b	; 59
    5282:	0f 92       	push	r0
    5284:	2f 93       	push	r18
    5286:	8f 93       	push	r24
    5288:	9f 93       	push	r25
    528a:	af 93       	push	r26
    528c:	bf 93       	push	r27
    528e:	ef 93       	push	r30
    5290:	ff 93       	push	r31
    5292:	e0 91 17 19 	lds	r30, 0x1917	; 0x801917 <_ser_handle+0x4>
    5296:	f0 91 18 19 	lds	r31, 0x1918	; 0x801918 <_ser_handle+0x5>
    529a:	30 97       	sbiw	r30, 0x00	; 0
    529c:	b9 f0       	breq	.+46     	; 0x52cc <__vector_52+0x56>
    529e:	02 80       	ldd	r0, Z+2	; 0x02
    52a0:	f3 81       	ldd	r31, Z+3	; 0x03
    52a2:	e0 2d       	mov	r30, r0
    52a4:	93 81       	ldd	r25, Z+3	; 0x03
    52a6:	82 81       	ldd	r24, Z+2	; 0x02
    52a8:	98 17       	cp	r25, r24
    52aa:	b1 f0       	breq	.+44     	; 0x52d8 <__vector_52+0x62>
    52ac:	92 81       	ldd	r25, Z+2	; 0x02
    52ae:	85 81       	ldd	r24, Z+5	; 0x05
    52b0:	28 2f       	mov	r18, r24
    52b2:	26 95       	lsr	r18
    52b4:	29 23       	and	r18, r25
    52b6:	a0 81       	ld	r26, Z
    52b8:	b1 81       	ldd	r27, Z+1	; 0x01
    52ba:	a2 0f       	add	r26, r18
    52bc:	b1 1d       	adc	r27, r1
    52be:	2c 91       	ld	r18, X
    52c0:	9f 5f       	subi	r25, 0xFF	; 255
    52c2:	89 23       	and	r24, r25
    52c4:	82 83       	std	Z+2, r24	; 0x02
    52c6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    52ca:	0b c0       	rjmp	.+22     	; 0x52e2 <__vector_52+0x6c>
    52cc:	e1 ed       	ldi	r30, 0xD1	; 209
    52ce:	f0 e0       	ldi	r31, 0x00	; 0
    52d0:	80 81       	ld	r24, Z
    52d2:	8f 7d       	andi	r24, 0xDF	; 223
    52d4:	80 83       	st	Z, r24
    52d6:	05 c0       	rjmp	.+10     	; 0x52e2 <__vector_52+0x6c>
    52d8:	e1 ed       	ldi	r30, 0xD1	; 209
    52da:	f0 e0       	ldi	r31, 0x00	; 0
    52dc:	80 81       	ld	r24, Z
    52de:	8f 7d       	andi	r24, 0xDF	; 223
    52e0:	80 83       	st	Z, r24
    52e2:	ff 91       	pop	r31
    52e4:	ef 91       	pop	r30
    52e6:	bf 91       	pop	r27
    52e8:	af 91       	pop	r26
    52ea:	9f 91       	pop	r25
    52ec:	8f 91       	pop	r24
    52ee:	2f 91       	pop	r18
    52f0:	0f 90       	pop	r0
    52f2:	0b be       	out	0x3b, r0	; 59
    52f4:	0f 90       	pop	r0
    52f6:	0f be       	out	0x3f, r0	; 63
    52f8:	0f 90       	pop	r0
    52fa:	1f 90       	pop	r1
    52fc:	18 95       	reti

000052fe <__vector_54>:
    52fe:	1f 92       	push	r1
    5300:	0f 92       	push	r0
    5302:	0f b6       	in	r0, 0x3f	; 63
    5304:	0f 92       	push	r0
    5306:	11 24       	eor	r1, r1
    5308:	0b b6       	in	r0, 0x3b	; 59
    530a:	0f 92       	push	r0
    530c:	2f 93       	push	r18
    530e:	3f 93       	push	r19
    5310:	4f 93       	push	r20
    5312:	5f 93       	push	r21
    5314:	6f 93       	push	r22
    5316:	7f 93       	push	r23
    5318:	8f 93       	push	r24
    531a:	9f 93       	push	r25
    531c:	af 93       	push	r26
    531e:	bf 93       	push	r27
    5320:	cf 93       	push	r28
    5322:	df 93       	push	r29
    5324:	ef 93       	push	r30
    5326:	ff 93       	push	r31
    5328:	a0 91 19 19 	lds	r26, 0x1919	; 0x801919 <_ser_handle+0x6>
    532c:	b0 91 1a 19 	lds	r27, 0x191A	; 0x80191a <_ser_handle+0x7>
    5330:	10 97       	sbiw	r26, 0x00	; 0
    5332:	11 f1       	breq	.+68     	; 0x5378 <__vector_54+0x7a>
    5334:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5338:	14 96       	adiw	r26, 0x04	; 4
    533a:	ed 91       	ld	r30, X+
    533c:	fc 91       	ld	r31, X
    533e:	15 97       	sbiw	r26, 0x05	; 5
    5340:	93 81       	ldd	r25, Z+3	; 0x03
    5342:	82 81       	ldd	r24, Z+2	; 0x02
    5344:	25 81       	ldd	r18, Z+5	; 0x05
    5346:	98 1b       	sub	r25, r24
    5348:	92 23       	and	r25, r18
    534a:	84 81       	ldd	r24, Z+4	; 0x04
    534c:	98 17       	cp	r25, r24
    534e:	61 f0       	breq	.+24     	; 0x5368 <__vector_54+0x6a>
    5350:	83 81       	ldd	r24, Z+3	; 0x03
    5352:	26 95       	lsr	r18
    5354:	28 23       	and	r18, r24
    5356:	c0 81       	ld	r28, Z
    5358:	d1 81       	ldd	r29, Z+1	; 0x01
    535a:	c2 0f       	add	r28, r18
    535c:	d1 1d       	adc	r29, r1
    535e:	68 83       	st	Y, r22
    5360:	8f 5f       	subi	r24, 0xFF	; 255
    5362:	95 81       	ldd	r25, Z+5	; 0x05
    5364:	89 23       	and	r24, r25
    5366:	83 83       	std	Z+3, r24	; 0x03
    5368:	16 96       	adiw	r26, 0x06	; 6
    536a:	ed 91       	ld	r30, X+
    536c:	fc 91       	ld	r31, X
    536e:	17 97       	sbiw	r26, 0x07	; 7
    5370:	30 97       	sbiw	r30, 0x00	; 0
    5372:	11 f0       	breq	.+4      	; 0x5378 <__vector_54+0x7a>
    5374:	cd 01       	movw	r24, r26
    5376:	19 95       	eicall
    5378:	ff 91       	pop	r31
    537a:	ef 91       	pop	r30
    537c:	df 91       	pop	r29
    537e:	cf 91       	pop	r28
    5380:	bf 91       	pop	r27
    5382:	af 91       	pop	r26
    5384:	9f 91       	pop	r25
    5386:	8f 91       	pop	r24
    5388:	7f 91       	pop	r23
    538a:	6f 91       	pop	r22
    538c:	5f 91       	pop	r21
    538e:	4f 91       	pop	r20
    5390:	3f 91       	pop	r19
    5392:	2f 91       	pop	r18
    5394:	0f 90       	pop	r0
    5396:	0b be       	out	0x3b, r0	; 59
    5398:	0f 90       	pop	r0
    539a:	0f be       	out	0x3f, r0	; 63
    539c:	0f 90       	pop	r0
    539e:	1f 90       	pop	r1
    53a0:	18 95       	reti

000053a2 <__vector_55>:
    53a2:	1f 92       	push	r1
    53a4:	0f 92       	push	r0
    53a6:	0f b6       	in	r0, 0x3f	; 63
    53a8:	0f 92       	push	r0
    53aa:	11 24       	eor	r1, r1
    53ac:	0b b6       	in	r0, 0x3b	; 59
    53ae:	0f 92       	push	r0
    53b0:	2f 93       	push	r18
    53b2:	8f 93       	push	r24
    53b4:	9f 93       	push	r25
    53b6:	af 93       	push	r26
    53b8:	bf 93       	push	r27
    53ba:	ef 93       	push	r30
    53bc:	ff 93       	push	r31
    53be:	e0 91 19 19 	lds	r30, 0x1919	; 0x801919 <_ser_handle+0x6>
    53c2:	f0 91 1a 19 	lds	r31, 0x191A	; 0x80191a <_ser_handle+0x7>
    53c6:	30 97       	sbiw	r30, 0x00	; 0
    53c8:	b9 f0       	breq	.+46     	; 0x53f8 <__vector_55+0x56>
    53ca:	02 80       	ldd	r0, Z+2	; 0x02
    53cc:	f3 81       	ldd	r31, Z+3	; 0x03
    53ce:	e0 2d       	mov	r30, r0
    53d0:	93 81       	ldd	r25, Z+3	; 0x03
    53d2:	82 81       	ldd	r24, Z+2	; 0x02
    53d4:	98 17       	cp	r25, r24
    53d6:	b1 f0       	breq	.+44     	; 0x5404 <__vector_55+0x62>
    53d8:	92 81       	ldd	r25, Z+2	; 0x02
    53da:	85 81       	ldd	r24, Z+5	; 0x05
    53dc:	28 2f       	mov	r18, r24
    53de:	26 95       	lsr	r18
    53e0:	29 23       	and	r18, r25
    53e2:	a0 81       	ld	r26, Z
    53e4:	b1 81       	ldd	r27, Z+1	; 0x01
    53e6:	a2 0f       	add	r26, r18
    53e8:	b1 1d       	adc	r27, r1
    53ea:	2c 91       	ld	r18, X
    53ec:	9f 5f       	subi	r25, 0xFF	; 255
    53ee:	89 23       	and	r24, r25
    53f0:	82 83       	std	Z+2, r24	; 0x02
    53f2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    53f6:	0b c0       	rjmp	.+22     	; 0x540e <__vector_55+0x6c>
    53f8:	e1 e3       	ldi	r30, 0x31	; 49
    53fa:	f1 e0       	ldi	r31, 0x01	; 1
    53fc:	80 81       	ld	r24, Z
    53fe:	8f 7d       	andi	r24, 0xDF	; 223
    5400:	80 83       	st	Z, r24
    5402:	05 c0       	rjmp	.+10     	; 0x540e <__vector_55+0x6c>
    5404:	e1 e3       	ldi	r30, 0x31	; 49
    5406:	f1 e0       	ldi	r31, 0x01	; 1
    5408:	80 81       	ld	r24, Z
    540a:	8f 7d       	andi	r24, 0xDF	; 223
    540c:	80 83       	st	Z, r24
    540e:	ff 91       	pop	r31
    5410:	ef 91       	pop	r30
    5412:	bf 91       	pop	r27
    5414:	af 91       	pop	r26
    5416:	9f 91       	pop	r25
    5418:	8f 91       	pop	r24
    541a:	2f 91       	pop	r18
    541c:	0f 90       	pop	r0
    541e:	0b be       	out	0x3b, r0	; 59
    5420:	0f 90       	pop	r0
    5422:	0f be       	out	0x3f, r0	; 63
    5424:	0f 90       	pop	r0
    5426:	1f 90       	pop	r1
    5428:	18 95       	reti

0000542a <usart_getchar>:
    542a:	cf 93       	push	r28
    542c:	df 93       	push	r29
    542e:	1f 92       	push	r1
    5430:	cd b7       	in	r28, 0x3d	; 61
    5432:	de b7       	in	r29, 0x3e	; 62
    5434:	be 01       	movw	r22, r28
    5436:	6f 5f       	subi	r22, 0xFF	; 255
    5438:	7f 4f       	sbci	r23, 0xFF	; 255
    543a:	80 91 1b 19 	lds	r24, 0x191B	; 0x80191b <_com_serial_instance>
    543e:	90 91 1c 19 	lds	r25, 0x191C	; 0x80191c <_com_serial_instance+0x1>
    5442:	7b dd       	rcall	.-1290   	; 0x4f3a <serial_getByte>
    5444:	81 11       	cpse	r24, r1
    5446:	f6 cf       	rjmp	.-20     	; 0x5434 <usart_getchar+0xa>
    5448:	89 81       	ldd	r24, Y+1	; 0x01
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	0f 90       	pop	r0
    544e:	df 91       	pop	r29
    5450:	cf 91       	pop	r28
    5452:	08 95       	ret

00005454 <usart_putchar>:
    5454:	68 2f       	mov	r22, r24
    5456:	80 91 1b 19 	lds	r24, 0x191B	; 0x80191b <_com_serial_instance>
    545a:	90 91 1c 19 	lds	r25, 0x191C	; 0x80191c <_com_serial_instance+0x1>
    545e:	ed dc       	rcall	.-1574   	; 0x4e3a <serial_sendByte>
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	08 95       	ret

00005466 <stdio_initialise>:
    5466:	8f 92       	push	r8
    5468:	9f 92       	push	r9
    546a:	af 92       	push	r10
    546c:	cf 92       	push	r12
    546e:	ef 92       	push	r14
    5470:	0f 93       	push	r16
    5472:	81 2c       	mov	r8, r1
    5474:	91 2c       	mov	r9, r1
    5476:	68 94       	set
    5478:	aa 24       	eor	r10, r10
    547a:	a7 f8       	bld	r10, 7
    547c:	68 94       	set
    547e:	cc 24       	eor	r12, r12
    5480:	c7 f8       	bld	r12, 7
    5482:	e1 2c       	mov	r14, r1
    5484:	00 e0       	ldi	r16, 0x00	; 0
    5486:	23 e0       	ldi	r18, 0x03	; 3
    5488:	40 e0       	ldi	r20, 0x00	; 0
    548a:	51 ee       	ldi	r21, 0xE1	; 225
    548c:	60 e0       	ldi	r22, 0x00	; 0
    548e:	70 e0       	ldi	r23, 0x00	; 0
    5490:	2e dc       	rcall	.-1956   	; 0x4cee <serial_create>
    5492:	90 93 1c 19 	sts	0x191C, r25	; 0x80191c <_com_serial_instance+0x1>
    5496:	80 93 1b 19 	sts	0x191B, r24	; 0x80191b <_com_serial_instance>
    549a:	e3 e5       	ldi	r30, 0x53	; 83
    549c:	f9 e1       	ldi	r31, 0x19	; 25
    549e:	83 e1       	ldi	r24, 0x13	; 19
    54a0:	92 e0       	ldi	r25, 0x02	; 2
    54a2:	91 83       	std	Z+1, r25	; 0x01
    54a4:	80 83       	st	Z, r24
    54a6:	93 83       	std	Z+3, r25	; 0x03
    54a8:	82 83       	std	Z+2, r24	; 0x02
    54aa:	0f 91       	pop	r16
    54ac:	ef 90       	pop	r14
    54ae:	cf 90       	pop	r12
    54b0:	af 90       	pop	r10
    54b2:	9f 90       	pop	r9
    54b4:	8f 90       	pop	r8
    54b6:	08 95       	ret

000054b8 <_turn_off>:
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	fc 01       	movw	r30, r24
    54bc:	ee 0f       	add	r30, r30
    54be:	ff 1f       	adc	r31, r31
    54c0:	e8 0f       	add	r30, r24
    54c2:	f9 1f       	adc	r31, r25
    54c4:	ee 0f       	add	r30, r30
    54c6:	ff 1f       	adc	r31, r31
    54c8:	e3 5e       	subi	r30, 0xE3	; 227
    54ca:	f6 4e       	sbci	r31, 0xE6	; 230
    54cc:	23 81       	ldd	r18, Z+3	; 0x03
    54ce:	21 11       	cpse	r18, r1
    54d0:	1f c0       	rjmp	.+62     	; 0x5510 <_turn_off+0x58>
    54d2:	9c 01       	movw	r18, r24
    54d4:	22 0f       	add	r18, r18
    54d6:	33 1f       	adc	r19, r19
    54d8:	f9 01       	movw	r30, r18
    54da:	e8 0f       	add	r30, r24
    54dc:	f9 1f       	adc	r31, r25
    54de:	ee 0f       	add	r30, r30
    54e0:	ff 1f       	adc	r31, r31
    54e2:	e3 5e       	subi	r30, 0xE3	; 227
    54e4:	f6 4e       	sbci	r31, 0xE6	; 230
    54e6:	a0 81       	ld	r26, Z
    54e8:	b1 81       	ldd	r27, Z+1	; 0x01
    54ea:	4c 91       	ld	r20, X
    54ec:	f9 01       	movw	r30, r18
    54ee:	e8 0f       	add	r30, r24
    54f0:	f9 1f       	adc	r31, r25
    54f2:	ee 0f       	add	r30, r30
    54f4:	ff 1f       	adc	r31, r31
    54f6:	e3 5e       	subi	r30, 0xE3	; 227
    54f8:	f6 4e       	sbci	r31, 0xE6	; 230
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	02 80       	ldd	r0, Z+2	; 0x02
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <_turn_off+0x4e>
    5502:	88 0f       	add	r24, r24
    5504:	99 1f       	adc	r25, r25
    5506:	0a 94       	dec	r0
    5508:	e2 f7       	brpl	.-8      	; 0x5502 <_turn_off+0x4a>
    550a:	84 2b       	or	r24, r20
    550c:	8c 93       	st	X, r24
    550e:	08 95       	ret
    5510:	fc 01       	movw	r30, r24
    5512:	ee 0f       	add	r30, r30
    5514:	ff 1f       	adc	r31, r31
    5516:	df 01       	movw	r26, r30
    5518:	a8 0f       	add	r26, r24
    551a:	b9 1f       	adc	r27, r25
    551c:	aa 0f       	add	r26, r26
    551e:	bb 1f       	adc	r27, r27
    5520:	a3 5e       	subi	r26, 0xE3	; 227
    5522:	b6 4e       	sbci	r27, 0xE6	; 230
    5524:	0d 90       	ld	r0, X+
    5526:	bc 91       	ld	r27, X
    5528:	a0 2d       	mov	r26, r0
    552a:	2c 91       	ld	r18, X
    552c:	e8 0f       	add	r30, r24
    552e:	f9 1f       	adc	r31, r25
    5530:	ee 0f       	add	r30, r30
    5532:	ff 1f       	adc	r31, r31
    5534:	e3 5e       	subi	r30, 0xE3	; 227
    5536:	f6 4e       	sbci	r31, 0xE6	; 230
    5538:	81 e0       	ldi	r24, 0x01	; 1
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	02 80       	ldd	r0, Z+2	; 0x02
    553e:	02 c0       	rjmp	.+4      	; 0x5544 <_turn_off+0x8c>
    5540:	88 0f       	add	r24, r24
    5542:	99 1f       	adc	r25, r25
    5544:	0a 94       	dec	r0
    5546:	e2 f7       	brpl	.-8      	; 0x5540 <_turn_off+0x88>
    5548:	80 95       	com	r24
    554a:	82 23       	and	r24, r18
    554c:	8c 93       	st	X, r24
    554e:	08 95       	ret

00005550 <_turn_on>:
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	fc 01       	movw	r30, r24
    5554:	ee 0f       	add	r30, r30
    5556:	ff 1f       	adc	r31, r31
    5558:	e8 0f       	add	r30, r24
    555a:	f9 1f       	adc	r31, r25
    555c:	ee 0f       	add	r30, r30
    555e:	ff 1f       	adc	r31, r31
    5560:	e3 5e       	subi	r30, 0xE3	; 227
    5562:	f6 4e       	sbci	r31, 0xE6	; 230
    5564:	23 81       	ldd	r18, Z+3	; 0x03
    5566:	21 11       	cpse	r18, r1
    5568:	20 c0       	rjmp	.+64     	; 0x55aa <_turn_on+0x5a>
    556a:	9c 01       	movw	r18, r24
    556c:	22 0f       	add	r18, r18
    556e:	33 1f       	adc	r19, r19
    5570:	f9 01       	movw	r30, r18
    5572:	e8 0f       	add	r30, r24
    5574:	f9 1f       	adc	r31, r25
    5576:	ee 0f       	add	r30, r30
    5578:	ff 1f       	adc	r31, r31
    557a:	e3 5e       	subi	r30, 0xE3	; 227
    557c:	f6 4e       	sbci	r31, 0xE6	; 230
    557e:	a0 81       	ld	r26, Z
    5580:	b1 81       	ldd	r27, Z+1	; 0x01
    5582:	4c 91       	ld	r20, X
    5584:	f9 01       	movw	r30, r18
    5586:	e8 0f       	add	r30, r24
    5588:	f9 1f       	adc	r31, r25
    558a:	ee 0f       	add	r30, r30
    558c:	ff 1f       	adc	r31, r31
    558e:	e3 5e       	subi	r30, 0xE3	; 227
    5590:	f6 4e       	sbci	r31, 0xE6	; 230
    5592:	81 e0       	ldi	r24, 0x01	; 1
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	02 80       	ldd	r0, Z+2	; 0x02
    5598:	02 c0       	rjmp	.+4      	; 0x559e <_turn_on+0x4e>
    559a:	88 0f       	add	r24, r24
    559c:	99 1f       	adc	r25, r25
    559e:	0a 94       	dec	r0
    55a0:	e2 f7       	brpl	.-8      	; 0x559a <_turn_on+0x4a>
    55a2:	80 95       	com	r24
    55a4:	84 23       	and	r24, r20
    55a6:	8c 93       	st	X, r24
    55a8:	08 95       	ret
    55aa:	fc 01       	movw	r30, r24
    55ac:	ee 0f       	add	r30, r30
    55ae:	ff 1f       	adc	r31, r31
    55b0:	df 01       	movw	r26, r30
    55b2:	a8 0f       	add	r26, r24
    55b4:	b9 1f       	adc	r27, r25
    55b6:	aa 0f       	add	r26, r26
    55b8:	bb 1f       	adc	r27, r27
    55ba:	a3 5e       	subi	r26, 0xE3	; 227
    55bc:	b6 4e       	sbci	r27, 0xE6	; 230
    55be:	0d 90       	ld	r0, X+
    55c0:	bc 91       	ld	r27, X
    55c2:	a0 2d       	mov	r26, r0
    55c4:	2c 91       	ld	r18, X
    55c6:	e8 0f       	add	r30, r24
    55c8:	f9 1f       	adc	r31, r25
    55ca:	ee 0f       	add	r30, r30
    55cc:	ff 1f       	adc	r31, r31
    55ce:	e3 5e       	subi	r30, 0xE3	; 227
    55d0:	f6 4e       	sbci	r31, 0xE6	; 230
    55d2:	81 e0       	ldi	r24, 0x01	; 1
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	02 80       	ldd	r0, Z+2	; 0x02
    55d8:	02 c0       	rjmp	.+4      	; 0x55de <_turn_on+0x8e>
    55da:	88 0f       	add	r24, r24
    55dc:	99 1f       	adc	r25, r25
    55de:	0a 94       	dec	r0
    55e0:	e2 f7       	brpl	.-8      	; 0x55da <_turn_on+0x8a>
    55e2:	82 2b       	or	r24, r18
    55e4:	8c 93       	st	X, r24
    55e6:	08 95       	ret

000055e8 <_hal_led_task>:
    55e8:	cc 24       	eor	r12, r12
    55ea:	c3 94       	inc	r12
    55ec:	d1 2c       	mov	r13, r1
    55ee:	68 94       	set
    55f0:	bb 24       	eor	r11, r11
    55f2:	b2 f8       	bld	r11, 2
    55f4:	cd e1       	ldi	r28, 0x1D	; 29
    55f6:	d9 e1       	ldi	r29, 0x19	; 25
    55f8:	10 e0       	ldi	r17, 0x00	; 0
    55fa:	8c 81       	ldd	r24, Y+4	; 0x04
    55fc:	81 30       	cpi	r24, 0x01	; 1
    55fe:	81 f0       	breq	.+32     	; 0x5620 <_hal_led_task+0x38>
    5600:	18 f1       	brcs	.+70     	; 0x5648 <_hal_led_task+0x60>
    5602:	82 30       	cpi	r24, 0x02	; 2
    5604:	61 f5       	brne	.+88     	; 0x565e <_hal_led_task+0x76>
    5606:	e8 81       	ld	r30, Y
    5608:	f9 81       	ldd	r31, Y+1	; 0x01
    560a:	20 81       	ld	r18, Z
    560c:	c6 01       	movw	r24, r12
    560e:	0a 80       	ldd	r0, Y+2	; 0x02
    5610:	02 c0       	rjmp	.+4      	; 0x5616 <_hal_led_task+0x2e>
    5612:	88 0f       	add	r24, r24
    5614:	99 1f       	adc	r25, r25
    5616:	0a 94       	dec	r0
    5618:	e2 f7       	brpl	.-8      	; 0x5612 <_hal_led_task+0x2a>
    561a:	82 27       	eor	r24, r18
    561c:	80 83       	st	Z, r24
    561e:	1f c0       	rjmp	.+62     	; 0x565e <_hal_led_task+0x76>
    5620:	8d 81       	ldd	r24, Y+5	; 0x05
    5622:	8f 5f       	subi	r24, 0xFF	; 255
    5624:	86 30       	cpi	r24, 0x06	; 6
    5626:	10 f4       	brcc	.+4      	; 0x562c <_hal_led_task+0x44>
    5628:	8d 83       	std	Y+5, r24	; 0x05
    562a:	19 c0       	rjmp	.+50     	; 0x565e <_hal_led_task+0x76>
    562c:	1d 82       	std	Y+5, r1	; 0x05
    562e:	e8 81       	ld	r30, Y
    5630:	f9 81       	ldd	r31, Y+1	; 0x01
    5632:	20 81       	ld	r18, Z
    5634:	c6 01       	movw	r24, r12
    5636:	0a 80       	ldd	r0, Y+2	; 0x02
    5638:	02 c0       	rjmp	.+4      	; 0x563e <_hal_led_task+0x56>
    563a:	88 0f       	add	r24, r24
    563c:	99 1f       	adc	r25, r25
    563e:	0a 94       	dec	r0
    5640:	e2 f7       	brpl	.-8      	; 0x563a <_hal_led_task+0x52>
    5642:	82 27       	eor	r24, r18
    5644:	80 83       	st	Z, r24
    5646:	0b c0       	rjmp	.+22     	; 0x565e <_hal_led_task+0x76>
    5648:	0d 81       	ldd	r16, Y+5	; 0x05
    564a:	00 23       	and	r16, r16
    564c:	29 f0       	breq	.+10     	; 0x5658 <_hal_led_task+0x70>
    564e:	81 2f       	mov	r24, r17
    5650:	7f df       	rcall	.-258    	; 0x5550 <_turn_on>
    5652:	01 50       	subi	r16, 0x01	; 1
    5654:	0d 83       	std	Y+5, r16	; 0x05
    5656:	03 c0       	rjmp	.+6      	; 0x565e <_hal_led_task+0x76>
    5658:	bc 82       	std	Y+4, r11	; 0x04
    565a:	81 2f       	mov	r24, r17
    565c:	2d df       	rcall	.-422    	; 0x54b8 <_turn_off>
    565e:	1f 5f       	subi	r17, 0xFF	; 255
    5660:	26 96       	adiw	r28, 0x06	; 6
    5662:	14 30       	cpi	r17, 0x04	; 4
    5664:	51 f6       	brne	.-108    	; 0x55fa <_hal_led_task+0x12>
    5666:	6c e0       	ldi	r22, 0x0C	; 12
    5668:	70 e0       	ldi	r23, 0x00	; 0
    566a:	80 e0       	ldi	r24, 0x00	; 0
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	0e 94 47 13 	call	0x268e	; 0x268e <vTaskDelay>
    5672:	c0 cf       	rjmp	.-128    	; 0x55f4 <_hal_led_task+0xc>

00005674 <status_leds_initialise>:
    5674:	ef 92       	push	r14
    5676:	ff 92       	push	r15
    5678:	0f 93       	push	r16
    567a:	1f 93       	push	r17
    567c:	cf 93       	push	r28
    567e:	df 93       	push	r29
    5680:	08 2f       	mov	r16, r24
    5682:	80 e4       	ldi	r24, 0x40	; 64
    5684:	87 b9       	out	0x07, r24	; 7
    5686:	cd e1       	ldi	r28, 0x1D	; 29
    5688:	d9 e1       	ldi	r29, 0x19	; 25
    568a:	0f 2e       	mov	r0, r31
    568c:	f8 e2       	ldi	r31, 0x28	; 40
    568e:	ef 2e       	mov	r14, r31
    5690:	f1 2c       	mov	r15, r1
    5692:	f0 2d       	mov	r31, r0
    5694:	f9 82       	std	Y+1, r15	; 0x01
    5696:	e8 82       	st	Y, r14
    5698:	86 e0       	ldi	r24, 0x06	; 6
    569a:	8a 83       	std	Y+2, r24	; 0x02
    569c:	1b 82       	std	Y+3, r1	; 0x03
    569e:	14 e0       	ldi	r17, 0x04	; 4
    56a0:	1c 83       	std	Y+4, r17	; 0x04
    56a2:	80 e0       	ldi	r24, 0x00	; 0
    56a4:	09 df       	rcall	.-494    	; 0x54b8 <_turn_off>
    56a6:	80 e8       	ldi	r24, 0x80	; 128
    56a8:	87 b9       	out	0x07, r24	; 7
    56aa:	ff 82       	std	Y+7, r15	; 0x07
    56ac:	ee 82       	std	Y+6, r14	; 0x06
    56ae:	87 e0       	ldi	r24, 0x07	; 7
    56b0:	88 87       	std	Y+8, r24	; 0x08
    56b2:	19 86       	std	Y+9, r1	; 0x09
    56b4:	1a 87       	std	Y+10, r17	; 0x0a
    56b6:	81 e0       	ldi	r24, 0x01	; 1
    56b8:	ff de       	rcall	.-514    	; 0x54b8 <_turn_off>
    56ba:	80 e2       	ldi	r24, 0x20	; 32
    56bc:	83 bb       	out	0x13, r24	; 19
    56be:	84 e3       	ldi	r24, 0x34	; 52
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	9d 87       	std	Y+13, r25	; 0x0d
    56c4:	8c 87       	std	Y+12, r24	; 0x0c
    56c6:	85 e0       	ldi	r24, 0x05	; 5
    56c8:	8e 87       	std	Y+14, r24	; 0x0e
    56ca:	1f 86       	std	Y+15, r1	; 0x0f
    56cc:	18 8b       	std	Y+16, r17	; 0x10
    56ce:	82 e0       	ldi	r24, 0x02	; 2
    56d0:	f3 de       	rcall	.-538    	; 0x54b8 <_turn_off>
    56d2:	80 e1       	ldi	r24, 0x10	; 16
    56d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    56d8:	82 e0       	ldi	r24, 0x02	; 2
    56da:	91 e0       	ldi	r25, 0x01	; 1
    56dc:	9b 8b       	std	Y+19, r25	; 0x13
    56de:	8a 8b       	std	Y+18, r24	; 0x12
    56e0:	1c 8b       	std	Y+20, r17	; 0x14
    56e2:	1d 8a       	std	Y+21, r1	; 0x15
    56e4:	1e 8b       	std	Y+22, r17	; 0x16
    56e6:	83 e0       	ldi	r24, 0x03	; 3
    56e8:	e7 de       	rcall	.-562    	; 0x54b8 <_turn_off>
    56ea:	e1 2c       	mov	r14, r1
    56ec:	f1 2c       	mov	r15, r1
    56ee:	20 e0       	ldi	r18, 0x00	; 0
    56f0:	30 e0       	ldi	r19, 0x00	; 0
    56f2:	40 ec       	ldi	r20, 0xC0	; 192
    56f4:	50 e0       	ldi	r21, 0x00	; 0
    56f6:	61 e3       	ldi	r22, 0x31	; 49
    56f8:	79 e0       	ldi	r23, 0x09	; 9
    56fa:	84 ef       	ldi	r24, 0xF4	; 244
    56fc:	9a e2       	ldi	r25, 0x2A	; 42
    56fe:	0e 94 42 10 	call	0x2084	; 0x2084 <xTaskCreate>
    5702:	df 91       	pop	r29
    5704:	cf 91       	pop	r28
    5706:	1f 91       	pop	r17
    5708:	0f 91       	pop	r16
    570a:	ff 90       	pop	r15
    570c:	ef 90       	pop	r14
    570e:	08 95       	ret

00005710 <status_leds_slowBlink>:
    5710:	cf 93       	push	r28
    5712:	df 93       	push	r29
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	fc 01       	movw	r30, r24
    5718:	ee 0f       	add	r30, r30
    571a:	ff 1f       	adc	r31, r31
    571c:	df 01       	movw	r26, r30
    571e:	a8 0f       	add	r26, r24
    5720:	b9 1f       	adc	r27, r25
    5722:	aa 0f       	add	r26, r26
    5724:	bb 1f       	adc	r27, r27
    5726:	a3 5e       	subi	r26, 0xE3	; 227
    5728:	b6 4e       	sbci	r27, 0xE6	; 230
    572a:	cd 91       	ld	r28, X+
    572c:	dc 91       	ld	r29, X
    572e:	11 97       	sbiw	r26, 0x01	; 1
    5730:	48 81       	ld	r20, Y
    5732:	21 e0       	ldi	r18, 0x01	; 1
    5734:	30 e0       	ldi	r19, 0x00	; 0
    5736:	12 96       	adiw	r26, 0x02	; 2
    5738:	0c 90       	ld	r0, X
    573a:	12 97       	sbiw	r26, 0x02	; 2
    573c:	02 c0       	rjmp	.+4      	; 0x5742 <status_leds_slowBlink+0x32>
    573e:	22 0f       	add	r18, r18
    5740:	33 1f       	adc	r19, r19
    5742:	0a 94       	dec	r0
    5744:	e2 f7       	brpl	.-8      	; 0x573e <status_leds_slowBlink+0x2e>
    5746:	24 27       	eor	r18, r20
    5748:	28 83       	st	Y, r18
    574a:	fd 01       	movw	r30, r26
    574c:	81 e0       	ldi	r24, 0x01	; 1
    574e:	84 83       	std	Z+4, r24	; 0x04
    5750:	df 91       	pop	r29
    5752:	cf 91       	pop	r28
    5754:	08 95       	ret

00005756 <status_leds_fastBlink>:
    5756:	cf 93       	push	r28
    5758:	df 93       	push	r29
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	fc 01       	movw	r30, r24
    575e:	ee 0f       	add	r30, r30
    5760:	ff 1f       	adc	r31, r31
    5762:	df 01       	movw	r26, r30
    5764:	a8 0f       	add	r26, r24
    5766:	b9 1f       	adc	r27, r25
    5768:	aa 0f       	add	r26, r26
    576a:	bb 1f       	adc	r27, r27
    576c:	a3 5e       	subi	r26, 0xE3	; 227
    576e:	b6 4e       	sbci	r27, 0xE6	; 230
    5770:	cd 91       	ld	r28, X+
    5772:	dc 91       	ld	r29, X
    5774:	11 97       	sbiw	r26, 0x01	; 1
    5776:	48 81       	ld	r20, Y
    5778:	21 e0       	ldi	r18, 0x01	; 1
    577a:	30 e0       	ldi	r19, 0x00	; 0
    577c:	12 96       	adiw	r26, 0x02	; 2
    577e:	0c 90       	ld	r0, X
    5780:	12 97       	sbiw	r26, 0x02	; 2
    5782:	02 c0       	rjmp	.+4      	; 0x5788 <status_leds_fastBlink+0x32>
    5784:	22 0f       	add	r18, r18
    5786:	33 1f       	adc	r19, r19
    5788:	0a 94       	dec	r0
    578a:	e2 f7       	brpl	.-8      	; 0x5784 <status_leds_fastBlink+0x2e>
    578c:	24 27       	eor	r18, r20
    578e:	28 83       	st	Y, r18
    5790:	fd 01       	movw	r30, r26
    5792:	82 e0       	ldi	r24, 0x02	; 2
    5794:	84 83       	std	Z+4, r24	; 0x04
    5796:	df 91       	pop	r29
    5798:	cf 91       	pop	r28
    579a:	08 95       	ret

0000579c <status_leds_ledOn>:
    579c:	28 2f       	mov	r18, r24
    579e:	30 e0       	ldi	r19, 0x00	; 0
    57a0:	f9 01       	movw	r30, r18
    57a2:	ee 0f       	add	r30, r30
    57a4:	ff 1f       	adc	r31, r31
    57a6:	e2 0f       	add	r30, r18
    57a8:	f3 1f       	adc	r31, r19
    57aa:	ee 0f       	add	r30, r30
    57ac:	ff 1f       	adc	r31, r31
    57ae:	e3 5e       	subi	r30, 0xE3	; 227
    57b0:	f6 4e       	sbci	r31, 0xE6	; 230
    57b2:	93 e0       	ldi	r25, 0x03	; 3
    57b4:	94 83       	std	Z+4, r25	; 0x04
    57b6:	cc ce       	rjmp	.-616    	; 0x5550 <_turn_on>
    57b8:	08 95       	ret

000057ba <status_leds_ledOff>:
    57ba:	28 2f       	mov	r18, r24
    57bc:	30 e0       	ldi	r19, 0x00	; 0
    57be:	f9 01       	movw	r30, r18
    57c0:	ee 0f       	add	r30, r30
    57c2:	ff 1f       	adc	r31, r31
    57c4:	e2 0f       	add	r30, r18
    57c6:	f3 1f       	adc	r31, r19
    57c8:	ee 0f       	add	r30, r30
    57ca:	ff 1f       	adc	r31, r31
    57cc:	e3 5e       	subi	r30, 0xE3	; 227
    57ce:	f6 4e       	sbci	r31, 0xE6	; 230
    57d0:	94 e0       	ldi	r25, 0x04	; 4
    57d2:	94 83       	std	Z+4, r25	; 0x04
    57d4:	71 ce       	rjmp	.-798    	; 0x54b8 <_turn_off>
    57d6:	08 95       	ret

000057d8 <status_leds_longPuls>:
    57d8:	90 e0       	ldi	r25, 0x00	; 0
    57da:	fc 01       	movw	r30, r24
    57dc:	ee 0f       	add	r30, r30
    57de:	ff 1f       	adc	r31, r31
    57e0:	df 01       	movw	r26, r30
    57e2:	a8 0f       	add	r26, r24
    57e4:	b9 1f       	adc	r27, r25
    57e6:	aa 0f       	add	r26, r26
    57e8:	bb 1f       	adc	r27, r27
    57ea:	a3 5e       	subi	r26, 0xE3	; 227
    57ec:	b6 4e       	sbci	r27, 0xE6	; 230
    57ee:	26 e0       	ldi	r18, 0x06	; 6
    57f0:	15 96       	adiw	r26, 0x05	; 5
    57f2:	2c 93       	st	X, r18
    57f4:	15 97       	sbiw	r26, 0x05	; 5
    57f6:	fd 01       	movw	r30, r26
    57f8:	14 82       	std	Z+4, r1	; 0x04
    57fa:	08 95       	ret

000057fc <status_leds_shortPuls>:
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	fc 01       	movw	r30, r24
    5800:	ee 0f       	add	r30, r30
    5802:	ff 1f       	adc	r31, r31
    5804:	df 01       	movw	r26, r30
    5806:	a8 0f       	add	r26, r24
    5808:	b9 1f       	adc	r27, r25
    580a:	aa 0f       	add	r26, r26
    580c:	bb 1f       	adc	r27, r27
    580e:	a3 5e       	subi	r26, 0xE3	; 227
    5810:	b6 4e       	sbci	r27, 0xE6	; 230
    5812:	15 96       	adiw	r26, 0x05	; 5
    5814:	1c 92       	st	X, r1
    5816:	15 97       	sbiw	r26, 0x05	; 5
    5818:	fd 01       	movw	r30, r26
    581a:	14 82       	std	Z+4, r1	; 0x04
    581c:	08 95       	ret

0000581e <_initTwiInterface>:
    581e:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <_twiIsInitiated>
    5822:	81 11       	cpse	r24, r1
    5824:	0c c0       	rjmp	.+24     	; 0x583e <_initTwiInterface+0x20>
    5826:	8c e0       	ldi	r24, 0x0C	; 12
    5828:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    582c:	8f ef       	ldi	r24, 0xFF	; 255
    582e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5832:	84 e0       	ldi	r24, 0x04	; 4
    5834:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5838:	81 e0       	ldi	r24, 0x01	; 1
    583a:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <_twiIsInitiated>
    583e:	08 95       	ret

00005840 <twiCreate>:
    5840:	af 92       	push	r10
    5842:	bf 92       	push	r11
    5844:	cf 92       	push	r12
    5846:	df 92       	push	r13
    5848:	ef 92       	push	r14
    584a:	ff 92       	push	r15
    584c:	0f 93       	push	r16
    584e:	1f 93       	push	r17
    5850:	cf 93       	push	r28
    5852:	df 93       	push	r29
    5854:	a8 2e       	mov	r10, r24
    5856:	b6 2e       	mov	r11, r22
    5858:	69 01       	movw	r12, r18
    585a:	7a 01       	movw	r14, r20
    585c:	84 e0       	ldi	r24, 0x04	; 4
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	61 d7       	rcall	.+3778   	; 0x6724 <malloc>
    5862:	ec 01       	movw	r28, r24
    5864:	89 2b       	or	r24, r25
    5866:	61 f1       	breq	.+88     	; 0x58c0 <twiCreate+0x80>
    5868:	a8 82       	st	Y, r10
    586a:	81 e0       	ldi	r24, 0x01	; 1
    586c:	b8 12       	cpse	r11, r24
    586e:	12 c0       	rjmp	.+36     	; 0x5894 <twiCreate+0x54>
    5870:	c7 01       	movw	r24, r14
    5872:	b6 01       	movw	r22, r12
    5874:	20 ea       	ldi	r18, 0xA0	; 160
    5876:	36 e8       	ldi	r19, 0x86	; 134
    5878:	41 e0       	ldi	r20, 0x01	; 1
    587a:	50 e0       	ldi	r21, 0x00	; 0
    587c:	15 d7       	rcall	.+3626   	; 0x66a8 <__udivmodsi4>
    587e:	da 01       	movw	r26, r20
    5880:	c9 01       	movw	r24, r18
    5882:	40 97       	sbiw	r24, 0x10	; 16
    5884:	a1 09       	sbc	r26, r1
    5886:	b1 09       	sbc	r27, r1
    5888:	b6 95       	lsr	r27
    588a:	a7 95       	ror	r26
    588c:	97 95       	ror	r25
    588e:	87 95       	ror	r24
    5890:	89 83       	std	Y+1, r24	; 0x01
    5892:	11 c0       	rjmp	.+34     	; 0x58b6 <twiCreate+0x76>
    5894:	c7 01       	movw	r24, r14
    5896:	b6 01       	movw	r22, r12
    5898:	20 e8       	ldi	r18, 0x80	; 128
    589a:	3a e1       	ldi	r19, 0x1A	; 26
    589c:	46 e0       	ldi	r20, 0x06	; 6
    589e:	50 e0       	ldi	r21, 0x00	; 0
    58a0:	03 d7       	rcall	.+3590   	; 0x66a8 <__udivmodsi4>
    58a2:	da 01       	movw	r26, r20
    58a4:	c9 01       	movw	r24, r18
    58a6:	40 97       	sbiw	r24, 0x10	; 16
    58a8:	a1 09       	sbc	r26, r1
    58aa:	b1 09       	sbc	r27, r1
    58ac:	b6 95       	lsr	r27
    58ae:	a7 95       	ror	r26
    58b0:	97 95       	ror	r25
    58b2:	87 95       	ror	r24
    58b4:	89 83       	std	Y+1, r24	; 0x01
    58b6:	1b 83       	std	Y+3, r17	; 0x03
    58b8:	0a 83       	std	Y+2, r16	; 0x02
    58ba:	8c 2f       	mov	r24, r28
    58bc:	9d 2f       	mov	r25, r29
    58be:	02 c0       	rjmp	.+4      	; 0x58c4 <twiCreate+0x84>
    58c0:	80 e0       	ldi	r24, 0x00	; 0
    58c2:	90 e0       	ldi	r25, 0x00	; 0
    58c4:	df 91       	pop	r29
    58c6:	cf 91       	pop	r28
    58c8:	1f 91       	pop	r17
    58ca:	0f 91       	pop	r16
    58cc:	ff 90       	pop	r15
    58ce:	ef 90       	pop	r14
    58d0:	df 90       	pop	r13
    58d2:	cf 90       	pop	r12
    58d4:	bf 90       	pop	r11
    58d6:	af 90       	pop	r10
    58d8:	08 95       	ret

000058da <twiIsBusy>:
    58da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    58de:	81 70       	andi	r24, 0x01	; 1
    58e0:	08 95       	ret

000058e2 <twiTransmit>:
    58e2:	ff 92       	push	r15
    58e4:	0f 93       	push	r16
    58e6:	1f 93       	push	r17
    58e8:	cf 93       	push	r28
    58ea:	df 93       	push	r29
    58ec:	00 97       	sbiw	r24, 0x00	; 0
    58ee:	d1 f1       	breq	.+116    	; 0x5964 <twiTransmit+0x82>
    58f0:	4a 30       	cpi	r20, 0x0A	; 10
    58f2:	d0 f5       	brcc	.+116    	; 0x5968 <twiTransmit+0x86>
    58f4:	f4 2e       	mov	r15, r20
    58f6:	8b 01       	movw	r16, r22
    58f8:	ec 01       	movw	r28, r24
    58fa:	ef df       	rcall	.-34     	; 0x58da <twiIsBusy>
    58fc:	81 11       	cpse	r24, r1
    58fe:	36 c0       	rjmp	.+108    	; 0x596c <twiTransmit+0x8a>
    5900:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    5904:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    5908:	c8 17       	cp	r28, r24
    590a:	d9 07       	cpc	r29, r25
    590c:	41 f0       	breq	.+16     	; 0x591e <twiTransmit+0x3c>
    590e:	87 df       	rcall	.-242    	; 0x581e <_initTwiInterface>
    5910:	89 81       	ldd	r24, Y+1	; 0x01
    5912:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5916:	d0 93 37 19 	sts	0x1937, r29	; 0x801937 <_twiCurrentHandler+0x1>
    591a:	c0 93 36 19 	sts	0x1936, r28	; 0x801936 <_twiCurrentHandler>
    591e:	81 e0       	ldi	r24, 0x01	; 1
    5920:	8f 0d       	add	r24, r15
    5922:	80 93 38 19 	sts	0x1938, r24	; 0x801938 <_twiMessageLen>
    5926:	88 81       	ld	r24, Y
    5928:	88 0f       	add	r24, r24
    592a:	80 93 39 19 	sts	0x1939, r24	; 0x801939 <_twiMessageBuffer>
    592e:	ff 20       	and	r15, r15
    5930:	89 f0       	breq	.+34     	; 0x5954 <twiTransmit+0x72>
    5932:	f8 01       	movw	r30, r16
    5934:	aa e3       	ldi	r26, 0x3A	; 58
    5936:	b9 e1       	ldi	r27, 0x19	; 25
    5938:	4f ef       	ldi	r20, 0xFF	; 255
    593a:	4f 0d       	add	r20, r15
    593c:	64 2f       	mov	r22, r20
    593e:	70 e0       	ldi	r23, 0x00	; 0
    5940:	cb 01       	movw	r24, r22
    5942:	01 96       	adiw	r24, 0x01	; 1
    5944:	b8 01       	movw	r22, r16
    5946:	68 0f       	add	r22, r24
    5948:	79 1f       	adc	r23, r25
    594a:	81 91       	ld	r24, Z+
    594c:	8d 93       	st	X+, r24
    594e:	e6 17       	cp	r30, r22
    5950:	f7 07       	cpc	r31, r23
    5952:	d9 f7       	brne	.-10     	; 0x594a <twiTransmit+0x68>
    5954:	88 ef       	ldi	r24, 0xF8	; 248
    5956:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    595a:	85 ea       	ldi	r24, 0xA5	; 165
    595c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5960:	84 e0       	ldi	r24, 0x04	; 4
    5962:	05 c0       	rjmp	.+10     	; 0x596e <twiTransmit+0x8c>
    5964:	86 e0       	ldi	r24, 0x06	; 6
    5966:	03 c0       	rjmp	.+6      	; 0x596e <twiTransmit+0x8c>
    5968:	87 e0       	ldi	r24, 0x07	; 7
    596a:	01 c0       	rjmp	.+2      	; 0x596e <twiTransmit+0x8c>
    596c:	82 e0       	ldi	r24, 0x02	; 2
    596e:	df 91       	pop	r29
    5970:	cf 91       	pop	r28
    5972:	1f 91       	pop	r17
    5974:	0f 91       	pop	r16
    5976:	ff 90       	pop	r15
    5978:	08 95       	ret

0000597a <twiReceive>:
    597a:	1f 93       	push	r17
    597c:	cf 93       	push	r28
    597e:	df 93       	push	r29
    5980:	00 97       	sbiw	r24, 0x00	; 0
    5982:	29 f1       	breq	.+74     	; 0x59ce <twiReceive+0x54>
    5984:	6b 30       	cpi	r22, 0x0B	; 11
    5986:	28 f5       	brcc	.+74     	; 0x59d2 <twiReceive+0x58>
    5988:	16 2f       	mov	r17, r22
    598a:	ec 01       	movw	r28, r24
    598c:	a6 df       	rcall	.-180    	; 0x58da <twiIsBusy>
    598e:	81 11       	cpse	r24, r1
    5990:	22 c0       	rjmp	.+68     	; 0x59d6 <twiReceive+0x5c>
    5992:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    5996:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    599a:	c8 17       	cp	r28, r24
    599c:	d9 07       	cpc	r29, r25
    599e:	41 f0       	breq	.+16     	; 0x59b0 <twiReceive+0x36>
    59a0:	3e df       	rcall	.-388    	; 0x581e <_initTwiInterface>
    59a2:	89 81       	ldd	r24, Y+1	; 0x01
    59a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    59a8:	d0 93 37 19 	sts	0x1937, r29	; 0x801937 <_twiCurrentHandler+0x1>
    59ac:	c0 93 36 19 	sts	0x1936, r28	; 0x801936 <_twiCurrentHandler>
    59b0:	10 93 38 19 	sts	0x1938, r17	; 0x801938 <_twiMessageLen>
    59b4:	88 81       	ld	r24, Y
    59b6:	88 0f       	add	r24, r24
    59b8:	81 60       	ori	r24, 0x01	; 1
    59ba:	80 93 39 19 	sts	0x1939, r24	; 0x801939 <_twiMessageBuffer>
    59be:	88 ef       	ldi	r24, 0xF8	; 248
    59c0:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    59c4:	85 ea       	ldi	r24, 0xA5	; 165
    59c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    59ca:	85 e0       	ldi	r24, 0x05	; 5
    59cc:	05 c0       	rjmp	.+10     	; 0x59d8 <twiReceive+0x5e>
    59ce:	86 e0       	ldi	r24, 0x06	; 6
    59d0:	03 c0       	rjmp	.+6      	; 0x59d8 <twiReceive+0x5e>
    59d2:	87 e0       	ldi	r24, 0x07	; 7
    59d4:	01 c0       	rjmp	.+2      	; 0x59d8 <twiReceive+0x5e>
    59d6:	82 e0       	ldi	r24, 0x02	; 2
    59d8:	df 91       	pop	r29
    59da:	cf 91       	pop	r28
    59dc:	1f 91       	pop	r17
    59de:	08 95       	ret

000059e0 <__vector_39>:
    59e0:	1f 92       	push	r1
    59e2:	0f 92       	push	r0
    59e4:	0f b6       	in	r0, 0x3f	; 63
    59e6:	0f 92       	push	r0
    59e8:	11 24       	eor	r1, r1
    59ea:	0b b6       	in	r0, 0x3b	; 59
    59ec:	0f 92       	push	r0
    59ee:	2f 93       	push	r18
    59f0:	3f 93       	push	r19
    59f2:	4f 93       	push	r20
    59f4:	5f 93       	push	r21
    59f6:	6f 93       	push	r22
    59f8:	7f 93       	push	r23
    59fa:	8f 93       	push	r24
    59fc:	9f 93       	push	r25
    59fe:	af 93       	push	r26
    5a00:	bf 93       	push	r27
    5a02:	ef 93       	push	r30
    5a04:	ff 93       	push	r31
    5a06:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a0a:	8e 2f       	mov	r24, r30
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
    5a0e:	fc 01       	movw	r30, r24
    5a10:	38 97       	sbiw	r30, 0x08	; 8
    5a12:	e1 35       	cpi	r30, 0x51	; 81
    5a14:	f1 05       	cpc	r31, r1
    5a16:	08 f0       	brcs	.+2      	; 0x5a1a <__vector_39+0x3a>
    5a18:	75 c0       	rjmp	.+234    	; 0x5b04 <__vector_39+0x124>
    5a1a:	88 27       	eor	r24, r24
    5a1c:	e4 58       	subi	r30, 0x84	; 132
    5a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a20:	8f 4f       	sbci	r24, 0xFF	; 255
    5a22:	64 c6       	rjmp	.+3272   	; 0x66ec <__tablejump2__>
    5a24:	10 92 35 19 	sts	0x1935, r1	; 0x801935 <_index.1885>
    5a28:	e0 91 35 19 	lds	r30, 0x1935	; 0x801935 <_index.1885>
    5a2c:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <_twiMessageLen>
    5a30:	e8 17       	cp	r30, r24
    5a32:	70 f4       	brcc	.+28     	; 0x5a50 <__vector_39+0x70>
    5a34:	81 e0       	ldi	r24, 0x01	; 1
    5a36:	8e 0f       	add	r24, r30
    5a38:	80 93 35 19 	sts	0x1935, r24	; 0x801935 <_index.1885>
    5a3c:	f0 e0       	ldi	r31, 0x00	; 0
    5a3e:	e7 5c       	subi	r30, 0xC7	; 199
    5a40:	f6 4e       	sbci	r31, 0xE6	; 230
    5a42:	80 81       	ld	r24, Z
    5a44:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5a48:	85 e8       	ldi	r24, 0x85	; 133
    5a4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a4e:	72 c0       	rjmp	.+228    	; 0x5b34 <__vector_39+0x154>
    5a50:	84 e9       	ldi	r24, 0x94	; 148
    5a52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5a56:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    5a5a:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    5a5e:	dc 01       	movw	r26, r24
    5a60:	12 96       	adiw	r26, 0x02	; 2
    5a62:	ed 91       	ld	r30, X+
    5a64:	fc 91       	ld	r31, X
    5a66:	13 97       	sbiw	r26, 0x03	; 3
    5a68:	30 97       	sbiw	r30, 0x00	; 0
    5a6a:	09 f4       	brne	.+2      	; 0x5a6e <__vector_39+0x8e>
    5a6c:	63 c0       	rjmp	.+198    	; 0x5b34 <__vector_39+0x154>
    5a6e:	20 e0       	ldi	r18, 0x00	; 0
    5a70:	40 e0       	ldi	r20, 0x00	; 0
    5a72:	50 e0       	ldi	r21, 0x00	; 0
    5a74:	64 e0       	ldi	r22, 0x04	; 4
    5a76:	19 95       	eicall
    5a78:	5d c0       	rjmp	.+186    	; 0x5b34 <__vector_39+0x154>
    5a7a:	e0 91 35 19 	lds	r30, 0x1935	; 0x801935 <_index.1885>
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	8e 0f       	add	r24, r30
    5a82:	80 93 35 19 	sts	0x1935, r24	; 0x801935 <_index.1885>
    5a86:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5a8a:	f0 e0       	ldi	r31, 0x00	; 0
    5a8c:	e7 5c       	subi	r30, 0xC7	; 199
    5a8e:	f6 4e       	sbci	r31, 0xE6	; 230
    5a90:	80 83       	st	Z, r24
    5a92:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5a96:	80 34       	cpi	r24, 0x40	; 64
    5a98:	11 f4       	brne	.+4      	; 0x5a9e <__vector_39+0xbe>
    5a9a:	10 92 35 19 	sts	0x1935, r1	; 0x801935 <_index.1885>
    5a9e:	20 91 35 19 	lds	r18, 0x1935	; 0x801935 <_index.1885>
    5aa2:	30 e0       	ldi	r19, 0x00	; 0
    5aa4:	80 91 38 19 	lds	r24, 0x1938	; 0x801938 <_twiMessageLen>
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	01 97       	sbiw	r24, 0x01	; 1
    5aac:	28 17       	cp	r18, r24
    5aae:	39 07       	cpc	r19, r25
    5ab0:	24 f4       	brge	.+8      	; 0x5aba <__vector_39+0xda>
    5ab2:	85 ec       	ldi	r24, 0xC5	; 197
    5ab4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ab8:	3d c0       	rjmp	.+122    	; 0x5b34 <__vector_39+0x154>
    5aba:	85 e8       	ldi	r24, 0x85	; 133
    5abc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ac0:	39 c0       	rjmp	.+114    	; 0x5b34 <__vector_39+0x154>
    5ac2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5ac6:	e0 91 35 19 	lds	r30, 0x1935	; 0x801935 <_index.1885>
    5aca:	f0 e0       	ldi	r31, 0x00	; 0
    5acc:	e7 5c       	subi	r30, 0xC7	; 199
    5ace:	f6 4e       	sbci	r31, 0xE6	; 230
    5ad0:	80 83       	st	Z, r24
    5ad2:	84 e9       	ldi	r24, 0x94	; 148
    5ad4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ad8:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    5adc:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    5ae0:	dc 01       	movw	r26, r24
    5ae2:	12 96       	adiw	r26, 0x02	; 2
    5ae4:	ed 91       	ld	r30, X+
    5ae6:	fc 91       	ld	r31, X
    5ae8:	13 97       	sbiw	r26, 0x03	; 3
    5aea:	30 97       	sbiw	r30, 0x00	; 0
    5aec:	19 f1       	breq	.+70     	; 0x5b34 <__vector_39+0x154>
    5aee:	20 91 38 19 	lds	r18, 0x1938	; 0x801938 <_twiMessageLen>
    5af2:	49 e3       	ldi	r20, 0x39	; 57
    5af4:	59 e1       	ldi	r21, 0x19	; 25
    5af6:	65 e0       	ldi	r22, 0x05	; 5
    5af8:	19 95       	eicall
    5afa:	1c c0       	rjmp	.+56     	; 0x5b34 <__vector_39+0x154>
    5afc:	85 ea       	ldi	r24, 0xA5	; 165
    5afe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b02:	18 c0       	rjmp	.+48     	; 0x5b34 <__vector_39+0x154>
    5b04:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5b08:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b0c:	84 e0       	ldi	r24, 0x04	; 4
    5b0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b12:	80 91 36 19 	lds	r24, 0x1936	; 0x801936 <_twiCurrentHandler>
    5b16:	90 91 37 19 	lds	r25, 0x1937	; 0x801937 <_twiCurrentHandler+0x1>
    5b1a:	dc 01       	movw	r26, r24
    5b1c:	12 96       	adiw	r26, 0x02	; 2
    5b1e:	ed 91       	ld	r30, X+
    5b20:	fc 91       	ld	r31, X
    5b22:	13 97       	sbiw	r26, 0x03	; 3
    5b24:	30 97       	sbiw	r30, 0x00	; 0
    5b26:	31 f0       	breq	.+12     	; 0x5b34 <__vector_39+0x154>
    5b28:	20 e0       	ldi	r18, 0x00	; 0
    5b2a:	40 e0       	ldi	r20, 0x00	; 0
    5b2c:	50 e0       	ldi	r21, 0x00	; 0
    5b2e:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5b32:	19 95       	eicall
    5b34:	ff 91       	pop	r31
    5b36:	ef 91       	pop	r30
    5b38:	bf 91       	pop	r27
    5b3a:	af 91       	pop	r26
    5b3c:	9f 91       	pop	r25
    5b3e:	8f 91       	pop	r24
    5b40:	7f 91       	pop	r23
    5b42:	6f 91       	pop	r22
    5b44:	5f 91       	pop	r21
    5b46:	4f 91       	pop	r20
    5b48:	3f 91       	pop	r19
    5b4a:	2f 91       	pop	r18
    5b4c:	0f 90       	pop	r0
    5b4e:	0b be       	out	0x3b, r0	; 59
    5b50:	0f 90       	pop	r0
    5b52:	0f be       	out	0x3f, r0	; 63
    5b54:	0f 90       	pop	r0
    5b56:	1f 90       	pop	r1
    5b58:	18 95       	reti

00005b5a <fifo_init>:
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	41 11       	cpse	r20, r1
    5b5e:	01 c0       	rjmp	.+2      	; 0x5b62 <fifo_init+0x8>
    5b60:	02 d7       	rcall	.+3588   	; 0x6966 <abort>
    5b62:	84 2f       	mov	r24, r20
    5b64:	90 e0       	ldi	r25, 0x00	; 0
    5b66:	9c 01       	movw	r18, r24
    5b68:	21 50       	subi	r18, 0x01	; 1
    5b6a:	31 09       	sbc	r19, r1
    5b6c:	82 23       	and	r24, r18
    5b6e:	93 23       	and	r25, r19
    5b70:	89 2b       	or	r24, r25
    5b72:	09 f0       	breq	.+2      	; 0x5b76 <fifo_init+0x1c>
    5b74:	f8 d6       	rcall	.+3568   	; 0x6966 <abort>
    5b76:	41 38       	cpi	r20, 0x81	; 129
    5b78:	08 f0       	brcs	.+2      	; 0x5b7c <fifo_init+0x22>
    5b7a:	f5 d6       	rcall	.+3562   	; 0x6966 <abort>
    5b7c:	12 82       	std	Z+2, r1	; 0x02
    5b7e:	13 82       	std	Z+3, r1	; 0x03
    5b80:	44 83       	std	Z+4, r20	; 0x04
    5b82:	44 0f       	add	r20, r20
    5b84:	41 50       	subi	r20, 0x01	; 1
    5b86:	45 83       	std	Z+5, r20	; 0x05
    5b88:	71 83       	std	Z+1, r23	; 0x01
    5b8a:	60 83       	st	Z, r22
    5b8c:	80 e0       	ldi	r24, 0x00	; 0
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	08 95       	ret

00005b92 <vfprintf>:
    5b92:	2f 92       	push	r2
    5b94:	3f 92       	push	r3
    5b96:	4f 92       	push	r4
    5b98:	5f 92       	push	r5
    5b9a:	6f 92       	push	r6
    5b9c:	7f 92       	push	r7
    5b9e:	8f 92       	push	r8
    5ba0:	9f 92       	push	r9
    5ba2:	af 92       	push	r10
    5ba4:	bf 92       	push	r11
    5ba6:	cf 92       	push	r12
    5ba8:	df 92       	push	r13
    5baa:	ef 92       	push	r14
    5bac:	ff 92       	push	r15
    5bae:	0f 93       	push	r16
    5bb0:	1f 93       	push	r17
    5bb2:	cf 93       	push	r28
    5bb4:	df 93       	push	r29
    5bb6:	cd b7       	in	r28, 0x3d	; 61
    5bb8:	de b7       	in	r29, 0x3e	; 62
    5bba:	60 97       	sbiw	r28, 0x10	; 16
    5bbc:	0f b6       	in	r0, 0x3f	; 63
    5bbe:	f8 94       	cli
    5bc0:	de bf       	out	0x3e, r29	; 62
    5bc2:	0f be       	out	0x3f, r0	; 63
    5bc4:	cd bf       	out	0x3d, r28	; 61
    5bc6:	7c 01       	movw	r14, r24
    5bc8:	1b 01       	movw	r2, r22
    5bca:	6a 01       	movw	r12, r20
    5bcc:	fc 01       	movw	r30, r24
    5bce:	17 82       	std	Z+7, r1	; 0x07
    5bd0:	16 82       	std	Z+6, r1	; 0x06
    5bd2:	83 81       	ldd	r24, Z+3	; 0x03
    5bd4:	81 ff       	sbrs	r24, 1
    5bd6:	2a c3       	rjmp	.+1620   	; 0x622c <vfprintf+0x69a>
    5bd8:	9e 01       	movw	r18, r28
    5bda:	2f 5f       	subi	r18, 0xFF	; 255
    5bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    5bde:	39 01       	movw	r6, r18
    5be0:	f7 01       	movw	r30, r14
    5be2:	93 81       	ldd	r25, Z+3	; 0x03
    5be4:	f1 01       	movw	r30, r2
    5be6:	93 fd       	sbrc	r25, 3
    5be8:	85 91       	lpm	r24, Z+
    5bea:	93 ff       	sbrs	r25, 3
    5bec:	81 91       	ld	r24, Z+
    5bee:	1f 01       	movw	r2, r30
    5bf0:	88 23       	and	r24, r24
    5bf2:	09 f4       	brne	.+2      	; 0x5bf6 <vfprintf+0x64>
    5bf4:	17 c3       	rjmp	.+1582   	; 0x6224 <vfprintf+0x692>
    5bf6:	85 32       	cpi	r24, 0x25	; 37
    5bf8:	39 f4       	brne	.+14     	; 0x5c08 <vfprintf+0x76>
    5bfa:	93 fd       	sbrc	r25, 3
    5bfc:	85 91       	lpm	r24, Z+
    5bfe:	93 ff       	sbrs	r25, 3
    5c00:	81 91       	ld	r24, Z+
    5c02:	1f 01       	movw	r2, r30
    5c04:	85 32       	cpi	r24, 0x25	; 37
    5c06:	31 f4       	brne	.+12     	; 0x5c14 <vfprintf+0x82>
    5c08:	b7 01       	movw	r22, r14
    5c0a:	90 e0       	ldi	r25, 0x00	; 0
    5c0c:	fd d7       	rcall	.+4090   	; 0x6c08 <fputc>
    5c0e:	56 01       	movw	r10, r12
    5c10:	65 01       	movw	r12, r10
    5c12:	e6 cf       	rjmp	.-52     	; 0x5be0 <vfprintf+0x4e>
    5c14:	10 e0       	ldi	r17, 0x00	; 0
    5c16:	51 2c       	mov	r5, r1
    5c18:	91 2c       	mov	r9, r1
    5c1a:	ff e1       	ldi	r31, 0x1F	; 31
    5c1c:	f9 15       	cp	r31, r9
    5c1e:	d8 f0       	brcs	.+54     	; 0x5c56 <vfprintf+0xc4>
    5c20:	8b 32       	cpi	r24, 0x2B	; 43
    5c22:	79 f0       	breq	.+30     	; 0x5c42 <vfprintf+0xb0>
    5c24:	38 f4       	brcc	.+14     	; 0x5c34 <vfprintf+0xa2>
    5c26:	80 32       	cpi	r24, 0x20	; 32
    5c28:	79 f0       	breq	.+30     	; 0x5c48 <vfprintf+0xb6>
    5c2a:	83 32       	cpi	r24, 0x23	; 35
    5c2c:	a1 f4       	brne	.+40     	; 0x5c56 <vfprintf+0xc4>
    5c2e:	f9 2d       	mov	r31, r9
    5c30:	f0 61       	ori	r31, 0x10	; 16
    5c32:	2e c0       	rjmp	.+92     	; 0x5c90 <vfprintf+0xfe>
    5c34:	8d 32       	cpi	r24, 0x2D	; 45
    5c36:	61 f0       	breq	.+24     	; 0x5c50 <vfprintf+0xbe>
    5c38:	80 33       	cpi	r24, 0x30	; 48
    5c3a:	69 f4       	brne	.+26     	; 0x5c56 <vfprintf+0xc4>
    5c3c:	29 2d       	mov	r18, r9
    5c3e:	21 60       	ori	r18, 0x01	; 1
    5c40:	2d c0       	rjmp	.+90     	; 0x5c9c <vfprintf+0x10a>
    5c42:	39 2d       	mov	r19, r9
    5c44:	32 60       	ori	r19, 0x02	; 2
    5c46:	93 2e       	mov	r9, r19
    5c48:	89 2d       	mov	r24, r9
    5c4a:	84 60       	ori	r24, 0x04	; 4
    5c4c:	98 2e       	mov	r9, r24
    5c4e:	2a c0       	rjmp	.+84     	; 0x5ca4 <vfprintf+0x112>
    5c50:	e9 2d       	mov	r30, r9
    5c52:	e8 60       	ori	r30, 0x08	; 8
    5c54:	15 c0       	rjmp	.+42     	; 0x5c80 <vfprintf+0xee>
    5c56:	97 fc       	sbrc	r9, 7
    5c58:	2d c0       	rjmp	.+90     	; 0x5cb4 <vfprintf+0x122>
    5c5a:	20 ed       	ldi	r18, 0xD0	; 208
    5c5c:	28 0f       	add	r18, r24
    5c5e:	2a 30       	cpi	r18, 0x0A	; 10
    5c60:	88 f4       	brcc	.+34     	; 0x5c84 <vfprintf+0xf2>
    5c62:	96 fe       	sbrs	r9, 6
    5c64:	06 c0       	rjmp	.+12     	; 0x5c72 <vfprintf+0xe0>
    5c66:	3a e0       	ldi	r19, 0x0A	; 10
    5c68:	13 9f       	mul	r17, r19
    5c6a:	20 0d       	add	r18, r0
    5c6c:	11 24       	eor	r1, r1
    5c6e:	12 2f       	mov	r17, r18
    5c70:	19 c0       	rjmp	.+50     	; 0x5ca4 <vfprintf+0x112>
    5c72:	8a e0       	ldi	r24, 0x0A	; 10
    5c74:	58 9e       	mul	r5, r24
    5c76:	20 0d       	add	r18, r0
    5c78:	11 24       	eor	r1, r1
    5c7a:	52 2e       	mov	r5, r18
    5c7c:	e9 2d       	mov	r30, r9
    5c7e:	e0 62       	ori	r30, 0x20	; 32
    5c80:	9e 2e       	mov	r9, r30
    5c82:	10 c0       	rjmp	.+32     	; 0x5ca4 <vfprintf+0x112>
    5c84:	8e 32       	cpi	r24, 0x2E	; 46
    5c86:	31 f4       	brne	.+12     	; 0x5c94 <vfprintf+0x102>
    5c88:	96 fc       	sbrc	r9, 6
    5c8a:	cc c2       	rjmp	.+1432   	; 0x6224 <vfprintf+0x692>
    5c8c:	f9 2d       	mov	r31, r9
    5c8e:	f0 64       	ori	r31, 0x40	; 64
    5c90:	9f 2e       	mov	r9, r31
    5c92:	08 c0       	rjmp	.+16     	; 0x5ca4 <vfprintf+0x112>
    5c94:	8c 36       	cpi	r24, 0x6C	; 108
    5c96:	21 f4       	brne	.+8      	; 0x5ca0 <vfprintf+0x10e>
    5c98:	29 2d       	mov	r18, r9
    5c9a:	20 68       	ori	r18, 0x80	; 128
    5c9c:	92 2e       	mov	r9, r18
    5c9e:	02 c0       	rjmp	.+4      	; 0x5ca4 <vfprintf+0x112>
    5ca0:	88 36       	cpi	r24, 0x68	; 104
    5ca2:	41 f4       	brne	.+16     	; 0x5cb4 <vfprintf+0x122>
    5ca4:	f1 01       	movw	r30, r2
    5ca6:	93 fd       	sbrc	r25, 3
    5ca8:	85 91       	lpm	r24, Z+
    5caa:	93 ff       	sbrs	r25, 3
    5cac:	81 91       	ld	r24, Z+
    5cae:	1f 01       	movw	r2, r30
    5cb0:	81 11       	cpse	r24, r1
    5cb2:	b3 cf       	rjmp	.-154    	; 0x5c1a <vfprintf+0x88>
    5cb4:	9b eb       	ldi	r25, 0xBB	; 187
    5cb6:	98 0f       	add	r25, r24
    5cb8:	93 30       	cpi	r25, 0x03	; 3
    5cba:	20 f4       	brcc	.+8      	; 0x5cc4 <vfprintf+0x132>
    5cbc:	99 2d       	mov	r25, r9
    5cbe:	90 61       	ori	r25, 0x10	; 16
    5cc0:	80 5e       	subi	r24, 0xE0	; 224
    5cc2:	07 c0       	rjmp	.+14     	; 0x5cd2 <vfprintf+0x140>
    5cc4:	9b e9       	ldi	r25, 0x9B	; 155
    5cc6:	98 0f       	add	r25, r24
    5cc8:	93 30       	cpi	r25, 0x03	; 3
    5cca:	08 f0       	brcs	.+2      	; 0x5cce <vfprintf+0x13c>
    5ccc:	59 c1       	rjmp	.+690    	; 0x5f80 <vfprintf+0x3ee>
    5cce:	99 2d       	mov	r25, r9
    5cd0:	9f 7e       	andi	r25, 0xEF	; 239
    5cd2:	96 ff       	sbrs	r25, 6
    5cd4:	16 e0       	ldi	r17, 0x06	; 6
    5cd6:	9f 73       	andi	r25, 0x3F	; 63
    5cd8:	99 2e       	mov	r9, r25
    5cda:	85 36       	cpi	r24, 0x65	; 101
    5cdc:	19 f4       	brne	.+6      	; 0x5ce4 <vfprintf+0x152>
    5cde:	90 64       	ori	r25, 0x40	; 64
    5ce0:	99 2e       	mov	r9, r25
    5ce2:	08 c0       	rjmp	.+16     	; 0x5cf4 <vfprintf+0x162>
    5ce4:	86 36       	cpi	r24, 0x66	; 102
    5ce6:	21 f4       	brne	.+8      	; 0x5cf0 <vfprintf+0x15e>
    5ce8:	39 2f       	mov	r19, r25
    5cea:	30 68       	ori	r19, 0x80	; 128
    5cec:	93 2e       	mov	r9, r19
    5cee:	02 c0       	rjmp	.+4      	; 0x5cf4 <vfprintf+0x162>
    5cf0:	11 11       	cpse	r17, r1
    5cf2:	11 50       	subi	r17, 0x01	; 1
    5cf4:	97 fe       	sbrs	r9, 7
    5cf6:	07 c0       	rjmp	.+14     	; 0x5d06 <vfprintf+0x174>
    5cf8:	1c 33       	cpi	r17, 0x3C	; 60
    5cfa:	50 f4       	brcc	.+20     	; 0x5d10 <vfprintf+0x17e>
    5cfc:	44 24       	eor	r4, r4
    5cfe:	43 94       	inc	r4
    5d00:	41 0e       	add	r4, r17
    5d02:	27 e0       	ldi	r18, 0x07	; 7
    5d04:	0b c0       	rjmp	.+22     	; 0x5d1c <vfprintf+0x18a>
    5d06:	18 30       	cpi	r17, 0x08	; 8
    5d08:	38 f0       	brcs	.+14     	; 0x5d18 <vfprintf+0x186>
    5d0a:	27 e0       	ldi	r18, 0x07	; 7
    5d0c:	17 e0       	ldi	r17, 0x07	; 7
    5d0e:	05 c0       	rjmp	.+10     	; 0x5d1a <vfprintf+0x188>
    5d10:	27 e0       	ldi	r18, 0x07	; 7
    5d12:	9c e3       	ldi	r25, 0x3C	; 60
    5d14:	49 2e       	mov	r4, r25
    5d16:	02 c0       	rjmp	.+4      	; 0x5d1c <vfprintf+0x18a>
    5d18:	21 2f       	mov	r18, r17
    5d1a:	41 2c       	mov	r4, r1
    5d1c:	56 01       	movw	r10, r12
    5d1e:	84 e0       	ldi	r24, 0x04	; 4
    5d20:	a8 0e       	add	r10, r24
    5d22:	b1 1c       	adc	r11, r1
    5d24:	f6 01       	movw	r30, r12
    5d26:	60 81       	ld	r22, Z
    5d28:	71 81       	ldd	r23, Z+1	; 0x01
    5d2a:	82 81       	ldd	r24, Z+2	; 0x02
    5d2c:	93 81       	ldd	r25, Z+3	; 0x03
    5d2e:	04 2d       	mov	r16, r4
    5d30:	a3 01       	movw	r20, r6
    5d32:	1d d6       	rcall	.+3130   	; 0x696e <__ftoa_engine>
    5d34:	6c 01       	movw	r12, r24
    5d36:	f9 81       	ldd	r31, Y+1	; 0x01
    5d38:	fc 87       	std	Y+12, r31	; 0x0c
    5d3a:	f0 ff       	sbrs	r31, 0
    5d3c:	02 c0       	rjmp	.+4      	; 0x5d42 <vfprintf+0x1b0>
    5d3e:	f3 ff       	sbrs	r31, 3
    5d40:	06 c0       	rjmp	.+12     	; 0x5d4e <vfprintf+0x1bc>
    5d42:	91 fc       	sbrc	r9, 1
    5d44:	06 c0       	rjmp	.+12     	; 0x5d52 <vfprintf+0x1c0>
    5d46:	92 fe       	sbrs	r9, 2
    5d48:	06 c0       	rjmp	.+12     	; 0x5d56 <vfprintf+0x1c4>
    5d4a:	00 e2       	ldi	r16, 0x20	; 32
    5d4c:	05 c0       	rjmp	.+10     	; 0x5d58 <vfprintf+0x1c6>
    5d4e:	0d e2       	ldi	r16, 0x2D	; 45
    5d50:	03 c0       	rjmp	.+6      	; 0x5d58 <vfprintf+0x1c6>
    5d52:	0b e2       	ldi	r16, 0x2B	; 43
    5d54:	01 c0       	rjmp	.+2      	; 0x5d58 <vfprintf+0x1c6>
    5d56:	00 e0       	ldi	r16, 0x00	; 0
    5d58:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d5a:	8c 70       	andi	r24, 0x0C	; 12
    5d5c:	19 f0       	breq	.+6      	; 0x5d64 <vfprintf+0x1d2>
    5d5e:	01 11       	cpse	r16, r1
    5d60:	43 c2       	rjmp	.+1158   	; 0x61e8 <vfprintf+0x656>
    5d62:	80 c2       	rjmp	.+1280   	; 0x6264 <vfprintf+0x6d2>
    5d64:	97 fe       	sbrs	r9, 7
    5d66:	10 c0       	rjmp	.+32     	; 0x5d88 <vfprintf+0x1f6>
    5d68:	4c 0c       	add	r4, r12
    5d6a:	fc 85       	ldd	r31, Y+12	; 0x0c
    5d6c:	f4 ff       	sbrs	r31, 4
    5d6e:	04 c0       	rjmp	.+8      	; 0x5d78 <vfprintf+0x1e6>
    5d70:	8a 81       	ldd	r24, Y+2	; 0x02
    5d72:	81 33       	cpi	r24, 0x31	; 49
    5d74:	09 f4       	brne	.+2      	; 0x5d78 <vfprintf+0x1e6>
    5d76:	4a 94       	dec	r4
    5d78:	14 14       	cp	r1, r4
    5d7a:	74 f5       	brge	.+92     	; 0x5dd8 <vfprintf+0x246>
    5d7c:	28 e0       	ldi	r18, 0x08	; 8
    5d7e:	24 15       	cp	r18, r4
    5d80:	78 f5       	brcc	.+94     	; 0x5de0 <vfprintf+0x24e>
    5d82:	88 e0       	ldi	r24, 0x08	; 8
    5d84:	48 2e       	mov	r4, r24
    5d86:	2c c0       	rjmp	.+88     	; 0x5de0 <vfprintf+0x24e>
    5d88:	96 fc       	sbrc	r9, 6
    5d8a:	2a c0       	rjmp	.+84     	; 0x5de0 <vfprintf+0x24e>
    5d8c:	81 2f       	mov	r24, r17
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	8c 15       	cp	r24, r12
    5d92:	9d 05       	cpc	r25, r13
    5d94:	9c f0       	brlt	.+38     	; 0x5dbc <vfprintf+0x22a>
    5d96:	3c ef       	ldi	r19, 0xFC	; 252
    5d98:	c3 16       	cp	r12, r19
    5d9a:	3f ef       	ldi	r19, 0xFF	; 255
    5d9c:	d3 06       	cpc	r13, r19
    5d9e:	74 f0       	brlt	.+28     	; 0x5dbc <vfprintf+0x22a>
    5da0:	89 2d       	mov	r24, r9
    5da2:	80 68       	ori	r24, 0x80	; 128
    5da4:	98 2e       	mov	r9, r24
    5da6:	0a c0       	rjmp	.+20     	; 0x5dbc <vfprintf+0x22a>
    5da8:	e2 e0       	ldi	r30, 0x02	; 2
    5daa:	f0 e0       	ldi	r31, 0x00	; 0
    5dac:	ec 0f       	add	r30, r28
    5dae:	fd 1f       	adc	r31, r29
    5db0:	e1 0f       	add	r30, r17
    5db2:	f1 1d       	adc	r31, r1
    5db4:	80 81       	ld	r24, Z
    5db6:	80 33       	cpi	r24, 0x30	; 48
    5db8:	19 f4       	brne	.+6      	; 0x5dc0 <vfprintf+0x22e>
    5dba:	11 50       	subi	r17, 0x01	; 1
    5dbc:	11 11       	cpse	r17, r1
    5dbe:	f4 cf       	rjmp	.-24     	; 0x5da8 <vfprintf+0x216>
    5dc0:	97 fe       	sbrs	r9, 7
    5dc2:	0e c0       	rjmp	.+28     	; 0x5de0 <vfprintf+0x24e>
    5dc4:	44 24       	eor	r4, r4
    5dc6:	43 94       	inc	r4
    5dc8:	41 0e       	add	r4, r17
    5dca:	81 2f       	mov	r24, r17
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	c8 16       	cp	r12, r24
    5dd0:	d9 06       	cpc	r13, r25
    5dd2:	2c f4       	brge	.+10     	; 0x5dde <vfprintf+0x24c>
    5dd4:	1c 19       	sub	r17, r12
    5dd6:	04 c0       	rjmp	.+8      	; 0x5de0 <vfprintf+0x24e>
    5dd8:	44 24       	eor	r4, r4
    5dda:	43 94       	inc	r4
    5ddc:	01 c0       	rjmp	.+2      	; 0x5de0 <vfprintf+0x24e>
    5dde:	10 e0       	ldi	r17, 0x00	; 0
    5de0:	97 fe       	sbrs	r9, 7
    5de2:	06 c0       	rjmp	.+12     	; 0x5df0 <vfprintf+0x25e>
    5de4:	1c 14       	cp	r1, r12
    5de6:	1d 04       	cpc	r1, r13
    5de8:	34 f4       	brge	.+12     	; 0x5df6 <vfprintf+0x264>
    5dea:	c6 01       	movw	r24, r12
    5dec:	01 96       	adiw	r24, 0x01	; 1
    5dee:	05 c0       	rjmp	.+10     	; 0x5dfa <vfprintf+0x268>
    5df0:	85 e0       	ldi	r24, 0x05	; 5
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	02 c0       	rjmp	.+4      	; 0x5dfa <vfprintf+0x268>
    5df6:	81 e0       	ldi	r24, 0x01	; 1
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	01 11       	cpse	r16, r1
    5dfc:	01 96       	adiw	r24, 0x01	; 1
    5dfe:	11 23       	and	r17, r17
    5e00:	31 f0       	breq	.+12     	; 0x5e0e <vfprintf+0x27c>
    5e02:	21 2f       	mov	r18, r17
    5e04:	30 e0       	ldi	r19, 0x00	; 0
    5e06:	2f 5f       	subi	r18, 0xFF	; 255
    5e08:	3f 4f       	sbci	r19, 0xFF	; 255
    5e0a:	82 0f       	add	r24, r18
    5e0c:	93 1f       	adc	r25, r19
    5e0e:	25 2d       	mov	r18, r5
    5e10:	30 e0       	ldi	r19, 0x00	; 0
    5e12:	82 17       	cp	r24, r18
    5e14:	93 07       	cpc	r25, r19
    5e16:	14 f4       	brge	.+4      	; 0x5e1c <vfprintf+0x28a>
    5e18:	58 1a       	sub	r5, r24
    5e1a:	01 c0       	rjmp	.+2      	; 0x5e1e <vfprintf+0x28c>
    5e1c:	51 2c       	mov	r5, r1
    5e1e:	89 2d       	mov	r24, r9
    5e20:	89 70       	andi	r24, 0x09	; 9
    5e22:	41 f4       	brne	.+16     	; 0x5e34 <vfprintf+0x2a2>
    5e24:	55 20       	and	r5, r5
    5e26:	31 f0       	breq	.+12     	; 0x5e34 <vfprintf+0x2a2>
    5e28:	b7 01       	movw	r22, r14
    5e2a:	80 e2       	ldi	r24, 0x20	; 32
    5e2c:	90 e0       	ldi	r25, 0x00	; 0
    5e2e:	ec d6       	rcall	.+3544   	; 0x6c08 <fputc>
    5e30:	5a 94       	dec	r5
    5e32:	f8 cf       	rjmp	.-16     	; 0x5e24 <vfprintf+0x292>
    5e34:	00 23       	and	r16, r16
    5e36:	21 f0       	breq	.+8      	; 0x5e40 <vfprintf+0x2ae>
    5e38:	b7 01       	movw	r22, r14
    5e3a:	80 2f       	mov	r24, r16
    5e3c:	90 e0       	ldi	r25, 0x00	; 0
    5e3e:	e4 d6       	rcall	.+3528   	; 0x6c08 <fputc>
    5e40:	93 fc       	sbrc	r9, 3
    5e42:	08 c0       	rjmp	.+16     	; 0x5e54 <vfprintf+0x2c2>
    5e44:	55 20       	and	r5, r5
    5e46:	31 f0       	breq	.+12     	; 0x5e54 <vfprintf+0x2c2>
    5e48:	b7 01       	movw	r22, r14
    5e4a:	80 e3       	ldi	r24, 0x30	; 48
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	dc d6       	rcall	.+3512   	; 0x6c08 <fputc>
    5e50:	5a 94       	dec	r5
    5e52:	f8 cf       	rjmp	.-16     	; 0x5e44 <vfprintf+0x2b2>
    5e54:	97 fe       	sbrs	r9, 7
    5e56:	4a c0       	rjmp	.+148    	; 0x5eec <vfprintf+0x35a>
    5e58:	46 01       	movw	r8, r12
    5e5a:	d7 fe       	sbrs	r13, 7
    5e5c:	02 c0       	rjmp	.+4      	; 0x5e62 <vfprintf+0x2d0>
    5e5e:	81 2c       	mov	r8, r1
    5e60:	91 2c       	mov	r9, r1
    5e62:	c6 01       	movw	r24, r12
    5e64:	88 19       	sub	r24, r8
    5e66:	99 09       	sbc	r25, r9
    5e68:	f3 01       	movw	r30, r6
    5e6a:	e8 0f       	add	r30, r24
    5e6c:	f9 1f       	adc	r31, r25
    5e6e:	fe 87       	std	Y+14, r31	; 0x0e
    5e70:	ed 87       	std	Y+13, r30	; 0x0d
    5e72:	96 01       	movw	r18, r12
    5e74:	24 19       	sub	r18, r4
    5e76:	31 09       	sbc	r19, r1
    5e78:	38 8b       	std	Y+16, r19	; 0x10
    5e7a:	2f 87       	std	Y+15, r18	; 0x0f
    5e7c:	01 2f       	mov	r16, r17
    5e7e:	10 e0       	ldi	r17, 0x00	; 0
    5e80:	11 95       	neg	r17
    5e82:	01 95       	neg	r16
    5e84:	11 09       	sbc	r17, r1
    5e86:	3f ef       	ldi	r19, 0xFF	; 255
    5e88:	83 16       	cp	r8, r19
    5e8a:	93 06       	cpc	r9, r19
    5e8c:	21 f4       	brne	.+8      	; 0x5e96 <vfprintf+0x304>
    5e8e:	b7 01       	movw	r22, r14
    5e90:	8e e2       	ldi	r24, 0x2E	; 46
    5e92:	90 e0       	ldi	r25, 0x00	; 0
    5e94:	b9 d6       	rcall	.+3442   	; 0x6c08 <fputc>
    5e96:	c8 14       	cp	r12, r8
    5e98:	d9 04       	cpc	r13, r9
    5e9a:	4c f0       	brlt	.+18     	; 0x5eae <vfprintf+0x31c>
    5e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e9e:	98 89       	ldd	r25, Y+16	; 0x10
    5ea0:	88 15       	cp	r24, r8
    5ea2:	99 05       	cpc	r25, r9
    5ea4:	24 f4       	brge	.+8      	; 0x5eae <vfprintf+0x31c>
    5ea6:	ed 85       	ldd	r30, Y+13	; 0x0d
    5ea8:	fe 85       	ldd	r31, Y+14	; 0x0e
    5eaa:	81 81       	ldd	r24, Z+1	; 0x01
    5eac:	01 c0       	rjmp	.+2      	; 0x5eb0 <vfprintf+0x31e>
    5eae:	80 e3       	ldi	r24, 0x30	; 48
    5eb0:	f1 e0       	ldi	r31, 0x01	; 1
    5eb2:	8f 1a       	sub	r8, r31
    5eb4:	91 08       	sbc	r9, r1
    5eb6:	2d 85       	ldd	r18, Y+13	; 0x0d
    5eb8:	3e 85       	ldd	r19, Y+14	; 0x0e
    5eba:	2f 5f       	subi	r18, 0xFF	; 255
    5ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ebe:	3e 87       	std	Y+14, r19	; 0x0e
    5ec0:	2d 87       	std	Y+13, r18	; 0x0d
    5ec2:	80 16       	cp	r8, r16
    5ec4:	91 06       	cpc	r9, r17
    5ec6:	24 f0       	brlt	.+8      	; 0x5ed0 <vfprintf+0x33e>
    5ec8:	b7 01       	movw	r22, r14
    5eca:	90 e0       	ldi	r25, 0x00	; 0
    5ecc:	9d d6       	rcall	.+3386   	; 0x6c08 <fputc>
    5ece:	db cf       	rjmp	.-74     	; 0x5e86 <vfprintf+0x2f4>
    5ed0:	c8 14       	cp	r12, r8
    5ed2:	d9 04       	cpc	r13, r9
    5ed4:	41 f4       	brne	.+16     	; 0x5ee6 <vfprintf+0x354>
    5ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed8:	96 33       	cpi	r25, 0x36	; 54
    5eda:	20 f4       	brcc	.+8      	; 0x5ee4 <vfprintf+0x352>
    5edc:	95 33       	cpi	r25, 0x35	; 53
    5ede:	19 f4       	brne	.+6      	; 0x5ee6 <vfprintf+0x354>
    5ee0:	3c 85       	ldd	r19, Y+12	; 0x0c
    5ee2:	34 ff       	sbrs	r19, 4
    5ee4:	81 e3       	ldi	r24, 0x31	; 49
    5ee6:	b7 01       	movw	r22, r14
    5ee8:	90 e0       	ldi	r25, 0x00	; 0
    5eea:	48 c0       	rjmp	.+144    	; 0x5f7c <vfprintf+0x3ea>
    5eec:	8a 81       	ldd	r24, Y+2	; 0x02
    5eee:	81 33       	cpi	r24, 0x31	; 49
    5ef0:	19 f0       	breq	.+6      	; 0x5ef8 <vfprintf+0x366>
    5ef2:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ef4:	9f 7e       	andi	r25, 0xEF	; 239
    5ef6:	9c 87       	std	Y+12, r25	; 0x0c
    5ef8:	b7 01       	movw	r22, r14
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	85 d6       	rcall	.+3338   	; 0x6c08 <fputc>
    5efe:	11 11       	cpse	r17, r1
    5f00:	05 c0       	rjmp	.+10     	; 0x5f0c <vfprintf+0x37a>
    5f02:	94 fc       	sbrc	r9, 4
    5f04:	16 c0       	rjmp	.+44     	; 0x5f32 <vfprintf+0x3a0>
    5f06:	85 e6       	ldi	r24, 0x65	; 101
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	15 c0       	rjmp	.+42     	; 0x5f36 <vfprintf+0x3a4>
    5f0c:	b7 01       	movw	r22, r14
    5f0e:	8e e2       	ldi	r24, 0x2E	; 46
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	7a d6       	rcall	.+3316   	; 0x6c08 <fputc>
    5f14:	1e 5f       	subi	r17, 0xFE	; 254
    5f16:	82 e0       	ldi	r24, 0x02	; 2
    5f18:	01 e0       	ldi	r16, 0x01	; 1
    5f1a:	08 0f       	add	r16, r24
    5f1c:	f3 01       	movw	r30, r6
    5f1e:	e8 0f       	add	r30, r24
    5f20:	f1 1d       	adc	r31, r1
    5f22:	80 81       	ld	r24, Z
    5f24:	b7 01       	movw	r22, r14
    5f26:	90 e0       	ldi	r25, 0x00	; 0
    5f28:	6f d6       	rcall	.+3294   	; 0x6c08 <fputc>
    5f2a:	80 2f       	mov	r24, r16
    5f2c:	01 13       	cpse	r16, r17
    5f2e:	f4 cf       	rjmp	.-24     	; 0x5f18 <vfprintf+0x386>
    5f30:	e8 cf       	rjmp	.-48     	; 0x5f02 <vfprintf+0x370>
    5f32:	85 e4       	ldi	r24, 0x45	; 69
    5f34:	90 e0       	ldi	r25, 0x00	; 0
    5f36:	b7 01       	movw	r22, r14
    5f38:	67 d6       	rcall	.+3278   	; 0x6c08 <fputc>
    5f3a:	d7 fc       	sbrc	r13, 7
    5f3c:	06 c0       	rjmp	.+12     	; 0x5f4a <vfprintf+0x3b8>
    5f3e:	c1 14       	cp	r12, r1
    5f40:	d1 04       	cpc	r13, r1
    5f42:	41 f4       	brne	.+16     	; 0x5f54 <vfprintf+0x3c2>
    5f44:	ec 85       	ldd	r30, Y+12	; 0x0c
    5f46:	e4 ff       	sbrs	r30, 4
    5f48:	05 c0       	rjmp	.+10     	; 0x5f54 <vfprintf+0x3c2>
    5f4a:	d1 94       	neg	r13
    5f4c:	c1 94       	neg	r12
    5f4e:	d1 08       	sbc	r13, r1
    5f50:	8d e2       	ldi	r24, 0x2D	; 45
    5f52:	01 c0       	rjmp	.+2      	; 0x5f56 <vfprintf+0x3c4>
    5f54:	8b e2       	ldi	r24, 0x2B	; 43
    5f56:	b7 01       	movw	r22, r14
    5f58:	90 e0       	ldi	r25, 0x00	; 0
    5f5a:	56 d6       	rcall	.+3244   	; 0x6c08 <fputc>
    5f5c:	80 e3       	ldi	r24, 0x30	; 48
    5f5e:	2a e0       	ldi	r18, 0x0A	; 10
    5f60:	c2 16       	cp	r12, r18
    5f62:	d1 04       	cpc	r13, r1
    5f64:	2c f0       	brlt	.+10     	; 0x5f70 <vfprintf+0x3de>
    5f66:	8f 5f       	subi	r24, 0xFF	; 255
    5f68:	fa e0       	ldi	r31, 0x0A	; 10
    5f6a:	cf 1a       	sub	r12, r31
    5f6c:	d1 08       	sbc	r13, r1
    5f6e:	f7 cf       	rjmp	.-18     	; 0x5f5e <vfprintf+0x3cc>
    5f70:	b7 01       	movw	r22, r14
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	49 d6       	rcall	.+3218   	; 0x6c08 <fputc>
    5f76:	b7 01       	movw	r22, r14
    5f78:	c6 01       	movw	r24, r12
    5f7a:	c0 96       	adiw	r24, 0x30	; 48
    5f7c:	45 d6       	rcall	.+3210   	; 0x6c08 <fputc>
    5f7e:	49 c1       	rjmp	.+658    	; 0x6212 <vfprintf+0x680>
    5f80:	83 36       	cpi	r24, 0x63	; 99
    5f82:	31 f0       	breq	.+12     	; 0x5f90 <vfprintf+0x3fe>
    5f84:	83 37       	cpi	r24, 0x73	; 115
    5f86:	79 f0       	breq	.+30     	; 0x5fa6 <vfprintf+0x414>
    5f88:	83 35       	cpi	r24, 0x53	; 83
    5f8a:	09 f0       	breq	.+2      	; 0x5f8e <vfprintf+0x3fc>
    5f8c:	52 c0       	rjmp	.+164    	; 0x6032 <vfprintf+0x4a0>
    5f8e:	1f c0       	rjmp	.+62     	; 0x5fce <vfprintf+0x43c>
    5f90:	56 01       	movw	r10, r12
    5f92:	32 e0       	ldi	r19, 0x02	; 2
    5f94:	a3 0e       	add	r10, r19
    5f96:	b1 1c       	adc	r11, r1
    5f98:	f6 01       	movw	r30, r12
    5f9a:	80 81       	ld	r24, Z
    5f9c:	89 83       	std	Y+1, r24	; 0x01
    5f9e:	01 e0       	ldi	r16, 0x01	; 1
    5fa0:	10 e0       	ldi	r17, 0x00	; 0
    5fa2:	63 01       	movw	r12, r6
    5fa4:	11 c0       	rjmp	.+34     	; 0x5fc8 <vfprintf+0x436>
    5fa6:	56 01       	movw	r10, r12
    5fa8:	f2 e0       	ldi	r31, 0x02	; 2
    5faa:	af 0e       	add	r10, r31
    5fac:	b1 1c       	adc	r11, r1
    5fae:	f6 01       	movw	r30, r12
    5fb0:	c0 80       	ld	r12, Z
    5fb2:	d1 80       	ldd	r13, Z+1	; 0x01
    5fb4:	96 fe       	sbrs	r9, 6
    5fb6:	03 c0       	rjmp	.+6      	; 0x5fbe <vfprintf+0x42c>
    5fb8:	61 2f       	mov	r22, r17
    5fba:	70 e0       	ldi	r23, 0x00	; 0
    5fbc:	02 c0       	rjmp	.+4      	; 0x5fc2 <vfprintf+0x430>
    5fbe:	6f ef       	ldi	r22, 0xFF	; 255
    5fc0:	7f ef       	ldi	r23, 0xFF	; 255
    5fc2:	c6 01       	movw	r24, r12
    5fc4:	16 d6       	rcall	.+3116   	; 0x6bf2 <strnlen>
    5fc6:	8c 01       	movw	r16, r24
    5fc8:	f9 2d       	mov	r31, r9
    5fca:	ff 77       	andi	r31, 0x7F	; 127
    5fcc:	13 c0       	rjmp	.+38     	; 0x5ff4 <vfprintf+0x462>
    5fce:	56 01       	movw	r10, r12
    5fd0:	22 e0       	ldi	r18, 0x02	; 2
    5fd2:	a2 0e       	add	r10, r18
    5fd4:	b1 1c       	adc	r11, r1
    5fd6:	f6 01       	movw	r30, r12
    5fd8:	c0 80       	ld	r12, Z
    5fda:	d1 80       	ldd	r13, Z+1	; 0x01
    5fdc:	96 fe       	sbrs	r9, 6
    5fde:	03 c0       	rjmp	.+6      	; 0x5fe6 <vfprintf+0x454>
    5fe0:	61 2f       	mov	r22, r17
    5fe2:	70 e0       	ldi	r23, 0x00	; 0
    5fe4:	02 c0       	rjmp	.+4      	; 0x5fea <vfprintf+0x458>
    5fe6:	6f ef       	ldi	r22, 0xFF	; 255
    5fe8:	7f ef       	ldi	r23, 0xFF	; 255
    5fea:	c6 01       	movw	r24, r12
    5fec:	98 d5       	rcall	.+2864   	; 0x6b1e <strnlen_P>
    5fee:	8c 01       	movw	r16, r24
    5ff0:	f9 2d       	mov	r31, r9
    5ff2:	f0 68       	ori	r31, 0x80	; 128
    5ff4:	9f 2e       	mov	r9, r31
    5ff6:	f3 fd       	sbrc	r31, 3
    5ff8:	18 c0       	rjmp	.+48     	; 0x602a <vfprintf+0x498>
    5ffa:	85 2d       	mov	r24, r5
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	08 17       	cp	r16, r24
    6000:	19 07       	cpc	r17, r25
    6002:	98 f4       	brcc	.+38     	; 0x602a <vfprintf+0x498>
    6004:	b7 01       	movw	r22, r14
    6006:	80 e2       	ldi	r24, 0x20	; 32
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	fe d5       	rcall	.+3068   	; 0x6c08 <fputc>
    600c:	5a 94       	dec	r5
    600e:	f5 cf       	rjmp	.-22     	; 0x5ffa <vfprintf+0x468>
    6010:	f6 01       	movw	r30, r12
    6012:	97 fc       	sbrc	r9, 7
    6014:	85 91       	lpm	r24, Z+
    6016:	97 fe       	sbrs	r9, 7
    6018:	81 91       	ld	r24, Z+
    601a:	6f 01       	movw	r12, r30
    601c:	b7 01       	movw	r22, r14
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	f3 d5       	rcall	.+3046   	; 0x6c08 <fputc>
    6022:	51 10       	cpse	r5, r1
    6024:	5a 94       	dec	r5
    6026:	01 50       	subi	r16, 0x01	; 1
    6028:	11 09       	sbc	r17, r1
    602a:	01 15       	cp	r16, r1
    602c:	11 05       	cpc	r17, r1
    602e:	81 f7       	brne	.-32     	; 0x6010 <vfprintf+0x47e>
    6030:	f0 c0       	rjmp	.+480    	; 0x6212 <vfprintf+0x680>
    6032:	84 36       	cpi	r24, 0x64	; 100
    6034:	11 f0       	breq	.+4      	; 0x603a <vfprintf+0x4a8>
    6036:	89 36       	cpi	r24, 0x69	; 105
    6038:	59 f5       	brne	.+86     	; 0x6090 <vfprintf+0x4fe>
    603a:	56 01       	movw	r10, r12
    603c:	97 fe       	sbrs	r9, 7
    603e:	09 c0       	rjmp	.+18     	; 0x6052 <vfprintf+0x4c0>
    6040:	24 e0       	ldi	r18, 0x04	; 4
    6042:	a2 0e       	add	r10, r18
    6044:	b1 1c       	adc	r11, r1
    6046:	f6 01       	movw	r30, r12
    6048:	60 81       	ld	r22, Z
    604a:	71 81       	ldd	r23, Z+1	; 0x01
    604c:	82 81       	ldd	r24, Z+2	; 0x02
    604e:	93 81       	ldd	r25, Z+3	; 0x03
    6050:	0a c0       	rjmp	.+20     	; 0x6066 <vfprintf+0x4d4>
    6052:	f2 e0       	ldi	r31, 0x02	; 2
    6054:	af 0e       	add	r10, r31
    6056:	b1 1c       	adc	r11, r1
    6058:	f6 01       	movw	r30, r12
    605a:	60 81       	ld	r22, Z
    605c:	71 81       	ldd	r23, Z+1	; 0x01
    605e:	07 2e       	mov	r0, r23
    6060:	00 0c       	add	r0, r0
    6062:	88 0b       	sbc	r24, r24
    6064:	99 0b       	sbc	r25, r25
    6066:	f9 2d       	mov	r31, r9
    6068:	ff 76       	andi	r31, 0x6F	; 111
    606a:	9f 2e       	mov	r9, r31
    606c:	97 ff       	sbrs	r25, 7
    606e:	09 c0       	rjmp	.+18     	; 0x6082 <vfprintf+0x4f0>
    6070:	90 95       	com	r25
    6072:	80 95       	com	r24
    6074:	70 95       	com	r23
    6076:	61 95       	neg	r22
    6078:	7f 4f       	sbci	r23, 0xFF	; 255
    607a:	8f 4f       	sbci	r24, 0xFF	; 255
    607c:	9f 4f       	sbci	r25, 0xFF	; 255
    607e:	f0 68       	ori	r31, 0x80	; 128
    6080:	9f 2e       	mov	r9, r31
    6082:	2a e0       	ldi	r18, 0x0A	; 10
    6084:	30 e0       	ldi	r19, 0x00	; 0
    6086:	a3 01       	movw	r20, r6
    6088:	6e d6       	rcall	.+3292   	; 0x6d66 <__ultoa_invert>
    608a:	c8 2e       	mov	r12, r24
    608c:	c6 18       	sub	r12, r6
    608e:	3e c0       	rjmp	.+124    	; 0x610c <vfprintf+0x57a>
    6090:	09 2d       	mov	r16, r9
    6092:	85 37       	cpi	r24, 0x75	; 117
    6094:	21 f4       	brne	.+8      	; 0x609e <vfprintf+0x50c>
    6096:	0f 7e       	andi	r16, 0xEF	; 239
    6098:	2a e0       	ldi	r18, 0x0A	; 10
    609a:	30 e0       	ldi	r19, 0x00	; 0
    609c:	1d c0       	rjmp	.+58     	; 0x60d8 <vfprintf+0x546>
    609e:	09 7f       	andi	r16, 0xF9	; 249
    60a0:	8f 36       	cpi	r24, 0x6F	; 111
    60a2:	91 f0       	breq	.+36     	; 0x60c8 <vfprintf+0x536>
    60a4:	18 f4       	brcc	.+6      	; 0x60ac <vfprintf+0x51a>
    60a6:	88 35       	cpi	r24, 0x58	; 88
    60a8:	59 f0       	breq	.+22     	; 0x60c0 <vfprintf+0x52e>
    60aa:	bc c0       	rjmp	.+376    	; 0x6224 <vfprintf+0x692>
    60ac:	80 37       	cpi	r24, 0x70	; 112
    60ae:	19 f0       	breq	.+6      	; 0x60b6 <vfprintf+0x524>
    60b0:	88 37       	cpi	r24, 0x78	; 120
    60b2:	11 f0       	breq	.+4      	; 0x60b8 <vfprintf+0x526>
    60b4:	b7 c0       	rjmp	.+366    	; 0x6224 <vfprintf+0x692>
    60b6:	00 61       	ori	r16, 0x10	; 16
    60b8:	04 ff       	sbrs	r16, 4
    60ba:	09 c0       	rjmp	.+18     	; 0x60ce <vfprintf+0x53c>
    60bc:	04 60       	ori	r16, 0x04	; 4
    60be:	07 c0       	rjmp	.+14     	; 0x60ce <vfprintf+0x53c>
    60c0:	94 fe       	sbrs	r9, 4
    60c2:	08 c0       	rjmp	.+16     	; 0x60d4 <vfprintf+0x542>
    60c4:	06 60       	ori	r16, 0x06	; 6
    60c6:	06 c0       	rjmp	.+12     	; 0x60d4 <vfprintf+0x542>
    60c8:	28 e0       	ldi	r18, 0x08	; 8
    60ca:	30 e0       	ldi	r19, 0x00	; 0
    60cc:	05 c0       	rjmp	.+10     	; 0x60d8 <vfprintf+0x546>
    60ce:	20 e1       	ldi	r18, 0x10	; 16
    60d0:	30 e0       	ldi	r19, 0x00	; 0
    60d2:	02 c0       	rjmp	.+4      	; 0x60d8 <vfprintf+0x546>
    60d4:	20 e1       	ldi	r18, 0x10	; 16
    60d6:	32 e0       	ldi	r19, 0x02	; 2
    60d8:	56 01       	movw	r10, r12
    60da:	07 ff       	sbrs	r16, 7
    60dc:	09 c0       	rjmp	.+18     	; 0x60f0 <vfprintf+0x55e>
    60de:	84 e0       	ldi	r24, 0x04	; 4
    60e0:	a8 0e       	add	r10, r24
    60e2:	b1 1c       	adc	r11, r1
    60e4:	f6 01       	movw	r30, r12
    60e6:	60 81       	ld	r22, Z
    60e8:	71 81       	ldd	r23, Z+1	; 0x01
    60ea:	82 81       	ldd	r24, Z+2	; 0x02
    60ec:	93 81       	ldd	r25, Z+3	; 0x03
    60ee:	08 c0       	rjmp	.+16     	; 0x6100 <vfprintf+0x56e>
    60f0:	f2 e0       	ldi	r31, 0x02	; 2
    60f2:	af 0e       	add	r10, r31
    60f4:	b1 1c       	adc	r11, r1
    60f6:	f6 01       	movw	r30, r12
    60f8:	60 81       	ld	r22, Z
    60fa:	71 81       	ldd	r23, Z+1	; 0x01
    60fc:	80 e0       	ldi	r24, 0x00	; 0
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	a3 01       	movw	r20, r6
    6102:	31 d6       	rcall	.+3170   	; 0x6d66 <__ultoa_invert>
    6104:	c8 2e       	mov	r12, r24
    6106:	c6 18       	sub	r12, r6
    6108:	0f 77       	andi	r16, 0x7F	; 127
    610a:	90 2e       	mov	r9, r16
    610c:	96 fe       	sbrs	r9, 6
    610e:	0b c0       	rjmp	.+22     	; 0x6126 <vfprintf+0x594>
    6110:	09 2d       	mov	r16, r9
    6112:	0e 7f       	andi	r16, 0xFE	; 254
    6114:	c1 16       	cp	r12, r17
    6116:	50 f4       	brcc	.+20     	; 0x612c <vfprintf+0x59a>
    6118:	94 fe       	sbrs	r9, 4
    611a:	0a c0       	rjmp	.+20     	; 0x6130 <vfprintf+0x59e>
    611c:	92 fc       	sbrc	r9, 2
    611e:	08 c0       	rjmp	.+16     	; 0x6130 <vfprintf+0x59e>
    6120:	09 2d       	mov	r16, r9
    6122:	0e 7e       	andi	r16, 0xEE	; 238
    6124:	05 c0       	rjmp	.+10     	; 0x6130 <vfprintf+0x59e>
    6126:	dc 2c       	mov	r13, r12
    6128:	09 2d       	mov	r16, r9
    612a:	03 c0       	rjmp	.+6      	; 0x6132 <vfprintf+0x5a0>
    612c:	dc 2c       	mov	r13, r12
    612e:	01 c0       	rjmp	.+2      	; 0x6132 <vfprintf+0x5a0>
    6130:	d1 2e       	mov	r13, r17
    6132:	04 ff       	sbrs	r16, 4
    6134:	0d c0       	rjmp	.+26     	; 0x6150 <vfprintf+0x5be>
    6136:	fe 01       	movw	r30, r28
    6138:	ec 0d       	add	r30, r12
    613a:	f1 1d       	adc	r31, r1
    613c:	80 81       	ld	r24, Z
    613e:	80 33       	cpi	r24, 0x30	; 48
    6140:	11 f4       	brne	.+4      	; 0x6146 <vfprintf+0x5b4>
    6142:	09 7e       	andi	r16, 0xE9	; 233
    6144:	09 c0       	rjmp	.+18     	; 0x6158 <vfprintf+0x5c6>
    6146:	02 ff       	sbrs	r16, 2
    6148:	06 c0       	rjmp	.+12     	; 0x6156 <vfprintf+0x5c4>
    614a:	d3 94       	inc	r13
    614c:	d3 94       	inc	r13
    614e:	04 c0       	rjmp	.+8      	; 0x6158 <vfprintf+0x5c6>
    6150:	80 2f       	mov	r24, r16
    6152:	86 78       	andi	r24, 0x86	; 134
    6154:	09 f0       	breq	.+2      	; 0x6158 <vfprintf+0x5c6>
    6156:	d3 94       	inc	r13
    6158:	03 fd       	sbrc	r16, 3
    615a:	10 c0       	rjmp	.+32     	; 0x617c <vfprintf+0x5ea>
    615c:	00 ff       	sbrs	r16, 0
    615e:	06 c0       	rjmp	.+12     	; 0x616c <vfprintf+0x5da>
    6160:	1c 2d       	mov	r17, r12
    6162:	d5 14       	cp	r13, r5
    6164:	78 f4       	brcc	.+30     	; 0x6184 <vfprintf+0x5f2>
    6166:	15 0d       	add	r17, r5
    6168:	1d 19       	sub	r17, r13
    616a:	0c c0       	rjmp	.+24     	; 0x6184 <vfprintf+0x5f2>
    616c:	d5 14       	cp	r13, r5
    616e:	50 f4       	brcc	.+20     	; 0x6184 <vfprintf+0x5f2>
    6170:	b7 01       	movw	r22, r14
    6172:	80 e2       	ldi	r24, 0x20	; 32
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	48 d5       	rcall	.+2704   	; 0x6c08 <fputc>
    6178:	d3 94       	inc	r13
    617a:	f8 cf       	rjmp	.-16     	; 0x616c <vfprintf+0x5da>
    617c:	d5 14       	cp	r13, r5
    617e:	10 f4       	brcc	.+4      	; 0x6184 <vfprintf+0x5f2>
    6180:	5d 18       	sub	r5, r13
    6182:	01 c0       	rjmp	.+2      	; 0x6186 <vfprintf+0x5f4>
    6184:	51 2c       	mov	r5, r1
    6186:	04 ff       	sbrs	r16, 4
    6188:	0f c0       	rjmp	.+30     	; 0x61a8 <vfprintf+0x616>
    618a:	b7 01       	movw	r22, r14
    618c:	80 e3       	ldi	r24, 0x30	; 48
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	3b d5       	rcall	.+2678   	; 0x6c08 <fputc>
    6192:	02 ff       	sbrs	r16, 2
    6194:	16 c0       	rjmp	.+44     	; 0x61c2 <vfprintf+0x630>
    6196:	01 fd       	sbrc	r16, 1
    6198:	03 c0       	rjmp	.+6      	; 0x61a0 <vfprintf+0x60e>
    619a:	88 e7       	ldi	r24, 0x78	; 120
    619c:	90 e0       	ldi	r25, 0x00	; 0
    619e:	02 c0       	rjmp	.+4      	; 0x61a4 <vfprintf+0x612>
    61a0:	88 e5       	ldi	r24, 0x58	; 88
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	b7 01       	movw	r22, r14
    61a6:	0c c0       	rjmp	.+24     	; 0x61c0 <vfprintf+0x62e>
    61a8:	80 2f       	mov	r24, r16
    61aa:	86 78       	andi	r24, 0x86	; 134
    61ac:	51 f0       	breq	.+20     	; 0x61c2 <vfprintf+0x630>
    61ae:	01 ff       	sbrs	r16, 1
    61b0:	02 c0       	rjmp	.+4      	; 0x61b6 <vfprintf+0x624>
    61b2:	8b e2       	ldi	r24, 0x2B	; 43
    61b4:	01 c0       	rjmp	.+2      	; 0x61b8 <vfprintf+0x626>
    61b6:	80 e2       	ldi	r24, 0x20	; 32
    61b8:	07 fd       	sbrc	r16, 7
    61ba:	8d e2       	ldi	r24, 0x2D	; 45
    61bc:	b7 01       	movw	r22, r14
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	23 d5       	rcall	.+2630   	; 0x6c08 <fputc>
    61c2:	c1 16       	cp	r12, r17
    61c4:	30 f4       	brcc	.+12     	; 0x61d2 <vfprintf+0x640>
    61c6:	b7 01       	movw	r22, r14
    61c8:	80 e3       	ldi	r24, 0x30	; 48
    61ca:	90 e0       	ldi	r25, 0x00	; 0
    61cc:	1d d5       	rcall	.+2618   	; 0x6c08 <fputc>
    61ce:	11 50       	subi	r17, 0x01	; 1
    61d0:	f8 cf       	rjmp	.-16     	; 0x61c2 <vfprintf+0x630>
    61d2:	ca 94       	dec	r12
    61d4:	f3 01       	movw	r30, r6
    61d6:	ec 0d       	add	r30, r12
    61d8:	f1 1d       	adc	r31, r1
    61da:	80 81       	ld	r24, Z
    61dc:	b7 01       	movw	r22, r14
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	13 d5       	rcall	.+2598   	; 0x6c08 <fputc>
    61e2:	c1 10       	cpse	r12, r1
    61e4:	f6 cf       	rjmp	.-20     	; 0x61d2 <vfprintf+0x640>
    61e6:	15 c0       	rjmp	.+42     	; 0x6212 <vfprintf+0x680>
    61e8:	f4 e0       	ldi	r31, 0x04	; 4
    61ea:	f5 15       	cp	r31, r5
    61ec:	50 f5       	brcc	.+84     	; 0x6242 <vfprintf+0x6b0>
    61ee:	84 e0       	ldi	r24, 0x04	; 4
    61f0:	58 1a       	sub	r5, r24
    61f2:	93 fe       	sbrs	r9, 3
    61f4:	1e c0       	rjmp	.+60     	; 0x6232 <vfprintf+0x6a0>
    61f6:	01 11       	cpse	r16, r1
    61f8:	25 c0       	rjmp	.+74     	; 0x6244 <vfprintf+0x6b2>
    61fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    61fc:	23 ff       	sbrs	r18, 3
    61fe:	27 c0       	rjmp	.+78     	; 0x624e <vfprintf+0x6bc>
    6200:	0a e9       	ldi	r16, 0x9A	; 154
    6202:	11 e0       	ldi	r17, 0x01	; 1
    6204:	39 2d       	mov	r19, r9
    6206:	30 71       	andi	r19, 0x10	; 16
    6208:	93 2e       	mov	r9, r19
    620a:	f8 01       	movw	r30, r16
    620c:	84 91       	lpm	r24, Z
    620e:	81 11       	cpse	r24, r1
    6210:	21 c0       	rjmp	.+66     	; 0x6254 <vfprintf+0x6c2>
    6212:	55 20       	and	r5, r5
    6214:	09 f4       	brne	.+2      	; 0x6218 <vfprintf+0x686>
    6216:	fc cc       	rjmp	.-1544   	; 0x5c10 <vfprintf+0x7e>
    6218:	b7 01       	movw	r22, r14
    621a:	80 e2       	ldi	r24, 0x20	; 32
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	f4 d4       	rcall	.+2536   	; 0x6c08 <fputc>
    6220:	5a 94       	dec	r5
    6222:	f7 cf       	rjmp	.-18     	; 0x6212 <vfprintf+0x680>
    6224:	f7 01       	movw	r30, r14
    6226:	86 81       	ldd	r24, Z+6	; 0x06
    6228:	97 81       	ldd	r25, Z+7	; 0x07
    622a:	23 c0       	rjmp	.+70     	; 0x6272 <vfprintf+0x6e0>
    622c:	8f ef       	ldi	r24, 0xFF	; 255
    622e:	9f ef       	ldi	r25, 0xFF	; 255
    6230:	20 c0       	rjmp	.+64     	; 0x6272 <vfprintf+0x6e0>
    6232:	b7 01       	movw	r22, r14
    6234:	80 e2       	ldi	r24, 0x20	; 32
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	e7 d4       	rcall	.+2510   	; 0x6c08 <fputc>
    623a:	5a 94       	dec	r5
    623c:	51 10       	cpse	r5, r1
    623e:	f9 cf       	rjmp	.-14     	; 0x6232 <vfprintf+0x6a0>
    6240:	da cf       	rjmp	.-76     	; 0x61f6 <vfprintf+0x664>
    6242:	51 2c       	mov	r5, r1
    6244:	b7 01       	movw	r22, r14
    6246:	80 2f       	mov	r24, r16
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	de d4       	rcall	.+2492   	; 0x6c08 <fputc>
    624c:	d6 cf       	rjmp	.-84     	; 0x61fa <vfprintf+0x668>
    624e:	0e e9       	ldi	r16, 0x9E	; 158
    6250:	11 e0       	ldi	r17, 0x01	; 1
    6252:	d8 cf       	rjmp	.-80     	; 0x6204 <vfprintf+0x672>
    6254:	91 10       	cpse	r9, r1
    6256:	80 52       	subi	r24, 0x20	; 32
    6258:	b7 01       	movw	r22, r14
    625a:	90 e0       	ldi	r25, 0x00	; 0
    625c:	d5 d4       	rcall	.+2474   	; 0x6c08 <fputc>
    625e:	0f 5f       	subi	r16, 0xFF	; 255
    6260:	1f 4f       	sbci	r17, 0xFF	; 255
    6262:	d3 cf       	rjmp	.-90     	; 0x620a <vfprintf+0x678>
    6264:	23 e0       	ldi	r18, 0x03	; 3
    6266:	25 15       	cp	r18, r5
    6268:	10 f4       	brcc	.+4      	; 0x626e <vfprintf+0x6dc>
    626a:	83 e0       	ldi	r24, 0x03	; 3
    626c:	c1 cf       	rjmp	.-126    	; 0x61f0 <vfprintf+0x65e>
    626e:	51 2c       	mov	r5, r1
    6270:	c4 cf       	rjmp	.-120    	; 0x61fa <vfprintf+0x668>
    6272:	60 96       	adiw	r28, 0x10	; 16
    6274:	0f b6       	in	r0, 0x3f	; 63
    6276:	f8 94       	cli
    6278:	de bf       	out	0x3e, r29	; 62
    627a:	0f be       	out	0x3f, r0	; 63
    627c:	cd bf       	out	0x3d, r28	; 61
    627e:	df 91       	pop	r29
    6280:	cf 91       	pop	r28
    6282:	1f 91       	pop	r17
    6284:	0f 91       	pop	r16
    6286:	ff 90       	pop	r15
    6288:	ef 90       	pop	r14
    628a:	df 90       	pop	r13
    628c:	cf 90       	pop	r12
    628e:	bf 90       	pop	r11
    6290:	af 90       	pop	r10
    6292:	9f 90       	pop	r9
    6294:	8f 90       	pop	r8
    6296:	7f 90       	pop	r7
    6298:	6f 90       	pop	r6
    629a:	5f 90       	pop	r5
    629c:	4f 90       	pop	r4
    629e:	3f 90       	pop	r3
    62a0:	2f 90       	pop	r2
    62a2:	08 95       	ret

000062a4 <__subsf3>:
    62a4:	50 58       	subi	r21, 0x80	; 128

000062a6 <__addsf3>:
    62a6:	bb 27       	eor	r27, r27
    62a8:	aa 27       	eor	r26, r26
    62aa:	0e d0       	rcall	.+28     	; 0x62c8 <__addsf3x>
    62ac:	4d c1       	rjmp	.+666    	; 0x6548 <__fp_round>
    62ae:	3e d1       	rcall	.+636    	; 0x652c <__fp_pscA>
    62b0:	30 f0       	brcs	.+12     	; 0x62be <__addsf3+0x18>
    62b2:	43 d1       	rcall	.+646    	; 0x653a <__fp_pscB>
    62b4:	20 f0       	brcs	.+8      	; 0x62be <__addsf3+0x18>
    62b6:	31 f4       	brne	.+12     	; 0x62c4 <__addsf3+0x1e>
    62b8:	9f 3f       	cpi	r25, 0xFF	; 255
    62ba:	11 f4       	brne	.+4      	; 0x62c0 <__addsf3+0x1a>
    62bc:	1e f4       	brtc	.+6      	; 0x62c4 <__addsf3+0x1e>
    62be:	33 c1       	rjmp	.+614    	; 0x6526 <__fp_nan>
    62c0:	0e f4       	brtc	.+2      	; 0x62c4 <__addsf3+0x1e>
    62c2:	e0 95       	com	r30
    62c4:	e7 fb       	bst	r30, 7
    62c6:	29 c1       	rjmp	.+594    	; 0x651a <__fp_inf>

000062c8 <__addsf3x>:
    62c8:	e9 2f       	mov	r30, r25
    62ca:	4f d1       	rcall	.+670    	; 0x656a <__fp_split3>
    62cc:	80 f3       	brcs	.-32     	; 0x62ae <__addsf3+0x8>
    62ce:	ba 17       	cp	r27, r26
    62d0:	62 07       	cpc	r22, r18
    62d2:	73 07       	cpc	r23, r19
    62d4:	84 07       	cpc	r24, r20
    62d6:	95 07       	cpc	r25, r21
    62d8:	18 f0       	brcs	.+6      	; 0x62e0 <__addsf3x+0x18>
    62da:	71 f4       	brne	.+28     	; 0x62f8 <__addsf3x+0x30>
    62dc:	9e f5       	brtc	.+102    	; 0x6344 <__addsf3x+0x7c>
    62de:	67 c1       	rjmp	.+718    	; 0x65ae <__fp_zero>
    62e0:	0e f4       	brtc	.+2      	; 0x62e4 <__addsf3x+0x1c>
    62e2:	e0 95       	com	r30
    62e4:	0b 2e       	mov	r0, r27
    62e6:	ba 2f       	mov	r27, r26
    62e8:	a0 2d       	mov	r26, r0
    62ea:	0b 01       	movw	r0, r22
    62ec:	b9 01       	movw	r22, r18
    62ee:	90 01       	movw	r18, r0
    62f0:	0c 01       	movw	r0, r24
    62f2:	ca 01       	movw	r24, r20
    62f4:	a0 01       	movw	r20, r0
    62f6:	11 24       	eor	r1, r1
    62f8:	ff 27       	eor	r31, r31
    62fa:	59 1b       	sub	r21, r25
    62fc:	99 f0       	breq	.+38     	; 0x6324 <__addsf3x+0x5c>
    62fe:	59 3f       	cpi	r21, 0xF9	; 249
    6300:	50 f4       	brcc	.+20     	; 0x6316 <__addsf3x+0x4e>
    6302:	50 3e       	cpi	r21, 0xE0	; 224
    6304:	68 f1       	brcs	.+90     	; 0x6360 <__addsf3x+0x98>
    6306:	1a 16       	cp	r1, r26
    6308:	f0 40       	sbci	r31, 0x00	; 0
    630a:	a2 2f       	mov	r26, r18
    630c:	23 2f       	mov	r18, r19
    630e:	34 2f       	mov	r19, r20
    6310:	44 27       	eor	r20, r20
    6312:	58 5f       	subi	r21, 0xF8	; 248
    6314:	f3 cf       	rjmp	.-26     	; 0x62fc <__addsf3x+0x34>
    6316:	46 95       	lsr	r20
    6318:	37 95       	ror	r19
    631a:	27 95       	ror	r18
    631c:	a7 95       	ror	r26
    631e:	f0 40       	sbci	r31, 0x00	; 0
    6320:	53 95       	inc	r21
    6322:	c9 f7       	brne	.-14     	; 0x6316 <__addsf3x+0x4e>
    6324:	7e f4       	brtc	.+30     	; 0x6344 <__addsf3x+0x7c>
    6326:	1f 16       	cp	r1, r31
    6328:	ba 0b       	sbc	r27, r26
    632a:	62 0b       	sbc	r22, r18
    632c:	73 0b       	sbc	r23, r19
    632e:	84 0b       	sbc	r24, r20
    6330:	ba f0       	brmi	.+46     	; 0x6360 <__addsf3x+0x98>
    6332:	91 50       	subi	r25, 0x01	; 1
    6334:	a1 f0       	breq	.+40     	; 0x635e <__addsf3x+0x96>
    6336:	ff 0f       	add	r31, r31
    6338:	bb 1f       	adc	r27, r27
    633a:	66 1f       	adc	r22, r22
    633c:	77 1f       	adc	r23, r23
    633e:	88 1f       	adc	r24, r24
    6340:	c2 f7       	brpl	.-16     	; 0x6332 <__addsf3x+0x6a>
    6342:	0e c0       	rjmp	.+28     	; 0x6360 <__addsf3x+0x98>
    6344:	ba 0f       	add	r27, r26
    6346:	62 1f       	adc	r22, r18
    6348:	73 1f       	adc	r23, r19
    634a:	84 1f       	adc	r24, r20
    634c:	48 f4       	brcc	.+18     	; 0x6360 <__addsf3x+0x98>
    634e:	87 95       	ror	r24
    6350:	77 95       	ror	r23
    6352:	67 95       	ror	r22
    6354:	b7 95       	ror	r27
    6356:	f7 95       	ror	r31
    6358:	9e 3f       	cpi	r25, 0xFE	; 254
    635a:	08 f0       	brcs	.+2      	; 0x635e <__addsf3x+0x96>
    635c:	b3 cf       	rjmp	.-154    	; 0x62c4 <__addsf3+0x1e>
    635e:	93 95       	inc	r25
    6360:	88 0f       	add	r24, r24
    6362:	08 f0       	brcs	.+2      	; 0x6366 <__addsf3x+0x9e>
    6364:	99 27       	eor	r25, r25
    6366:	ee 0f       	add	r30, r30
    6368:	97 95       	ror	r25
    636a:	87 95       	ror	r24
    636c:	08 95       	ret

0000636e <__divsf3>:
    636e:	0c d0       	rcall	.+24     	; 0x6388 <__divsf3x>
    6370:	eb c0       	rjmp	.+470    	; 0x6548 <__fp_round>
    6372:	e3 d0       	rcall	.+454    	; 0x653a <__fp_pscB>
    6374:	40 f0       	brcs	.+16     	; 0x6386 <__divsf3+0x18>
    6376:	da d0       	rcall	.+436    	; 0x652c <__fp_pscA>
    6378:	30 f0       	brcs	.+12     	; 0x6386 <__divsf3+0x18>
    637a:	21 f4       	brne	.+8      	; 0x6384 <__divsf3+0x16>
    637c:	5f 3f       	cpi	r21, 0xFF	; 255
    637e:	19 f0       	breq	.+6      	; 0x6386 <__divsf3+0x18>
    6380:	cc c0       	rjmp	.+408    	; 0x651a <__fp_inf>
    6382:	51 11       	cpse	r21, r1
    6384:	15 c1       	rjmp	.+554    	; 0x65b0 <__fp_szero>
    6386:	cf c0       	rjmp	.+414    	; 0x6526 <__fp_nan>

00006388 <__divsf3x>:
    6388:	f0 d0       	rcall	.+480    	; 0x656a <__fp_split3>
    638a:	98 f3       	brcs	.-26     	; 0x6372 <__divsf3+0x4>

0000638c <__divsf3_pse>:
    638c:	99 23       	and	r25, r25
    638e:	c9 f3       	breq	.-14     	; 0x6382 <__divsf3+0x14>
    6390:	55 23       	and	r21, r21
    6392:	b1 f3       	breq	.-20     	; 0x6380 <__divsf3+0x12>
    6394:	95 1b       	sub	r25, r21
    6396:	55 0b       	sbc	r21, r21
    6398:	bb 27       	eor	r27, r27
    639a:	aa 27       	eor	r26, r26
    639c:	62 17       	cp	r22, r18
    639e:	73 07       	cpc	r23, r19
    63a0:	84 07       	cpc	r24, r20
    63a2:	38 f0       	brcs	.+14     	; 0x63b2 <__divsf3_pse+0x26>
    63a4:	9f 5f       	subi	r25, 0xFF	; 255
    63a6:	5f 4f       	sbci	r21, 0xFF	; 255
    63a8:	22 0f       	add	r18, r18
    63aa:	33 1f       	adc	r19, r19
    63ac:	44 1f       	adc	r20, r20
    63ae:	aa 1f       	adc	r26, r26
    63b0:	a9 f3       	breq	.-22     	; 0x639c <__divsf3_pse+0x10>
    63b2:	33 d0       	rcall	.+102    	; 0x641a <__divsf3_pse+0x8e>
    63b4:	0e 2e       	mov	r0, r30
    63b6:	3a f0       	brmi	.+14     	; 0x63c6 <__divsf3_pse+0x3a>
    63b8:	e0 e8       	ldi	r30, 0x80	; 128
    63ba:	30 d0       	rcall	.+96     	; 0x641c <__divsf3_pse+0x90>
    63bc:	91 50       	subi	r25, 0x01	; 1
    63be:	50 40       	sbci	r21, 0x00	; 0
    63c0:	e6 95       	lsr	r30
    63c2:	00 1c       	adc	r0, r0
    63c4:	ca f7       	brpl	.-14     	; 0x63b8 <__divsf3_pse+0x2c>
    63c6:	29 d0       	rcall	.+82     	; 0x641a <__divsf3_pse+0x8e>
    63c8:	fe 2f       	mov	r31, r30
    63ca:	27 d0       	rcall	.+78     	; 0x641a <__divsf3_pse+0x8e>
    63cc:	66 0f       	add	r22, r22
    63ce:	77 1f       	adc	r23, r23
    63d0:	88 1f       	adc	r24, r24
    63d2:	bb 1f       	adc	r27, r27
    63d4:	26 17       	cp	r18, r22
    63d6:	37 07       	cpc	r19, r23
    63d8:	48 07       	cpc	r20, r24
    63da:	ab 07       	cpc	r26, r27
    63dc:	b0 e8       	ldi	r27, 0x80	; 128
    63de:	09 f0       	breq	.+2      	; 0x63e2 <__divsf3_pse+0x56>
    63e0:	bb 0b       	sbc	r27, r27
    63e2:	80 2d       	mov	r24, r0
    63e4:	bf 01       	movw	r22, r30
    63e6:	ff 27       	eor	r31, r31
    63e8:	93 58       	subi	r25, 0x83	; 131
    63ea:	5f 4f       	sbci	r21, 0xFF	; 255
    63ec:	2a f0       	brmi	.+10     	; 0x63f8 <__divsf3_pse+0x6c>
    63ee:	9e 3f       	cpi	r25, 0xFE	; 254
    63f0:	51 05       	cpc	r21, r1
    63f2:	68 f0       	brcs	.+26     	; 0x640e <__divsf3_pse+0x82>
    63f4:	92 c0       	rjmp	.+292    	; 0x651a <__fp_inf>
    63f6:	dc c0       	rjmp	.+440    	; 0x65b0 <__fp_szero>
    63f8:	5f 3f       	cpi	r21, 0xFF	; 255
    63fa:	ec f3       	brlt	.-6      	; 0x63f6 <__divsf3_pse+0x6a>
    63fc:	98 3e       	cpi	r25, 0xE8	; 232
    63fe:	dc f3       	brlt	.-10     	; 0x63f6 <__divsf3_pse+0x6a>
    6400:	86 95       	lsr	r24
    6402:	77 95       	ror	r23
    6404:	67 95       	ror	r22
    6406:	b7 95       	ror	r27
    6408:	f7 95       	ror	r31
    640a:	9f 5f       	subi	r25, 0xFF	; 255
    640c:	c9 f7       	brne	.-14     	; 0x6400 <__divsf3_pse+0x74>
    640e:	88 0f       	add	r24, r24
    6410:	91 1d       	adc	r25, r1
    6412:	96 95       	lsr	r25
    6414:	87 95       	ror	r24
    6416:	97 f9       	bld	r25, 7
    6418:	08 95       	ret
    641a:	e1 e0       	ldi	r30, 0x01	; 1
    641c:	66 0f       	add	r22, r22
    641e:	77 1f       	adc	r23, r23
    6420:	88 1f       	adc	r24, r24
    6422:	bb 1f       	adc	r27, r27
    6424:	62 17       	cp	r22, r18
    6426:	73 07       	cpc	r23, r19
    6428:	84 07       	cpc	r24, r20
    642a:	ba 07       	cpc	r27, r26
    642c:	20 f0       	brcs	.+8      	; 0x6436 <__divsf3_pse+0xaa>
    642e:	62 1b       	sub	r22, r18
    6430:	73 0b       	sbc	r23, r19
    6432:	84 0b       	sbc	r24, r20
    6434:	ba 0b       	sbc	r27, r26
    6436:	ee 1f       	adc	r30, r30
    6438:	88 f7       	brcc	.-30     	; 0x641c <__divsf3_pse+0x90>
    643a:	e0 95       	com	r30
    643c:	08 95       	ret

0000643e <__fixsfsi>:
    643e:	04 d0       	rcall	.+8      	; 0x6448 <__fixunssfsi>
    6440:	68 94       	set
    6442:	b1 11       	cpse	r27, r1
    6444:	b5 c0       	rjmp	.+362    	; 0x65b0 <__fp_szero>
    6446:	08 95       	ret

00006448 <__fixunssfsi>:
    6448:	98 d0       	rcall	.+304    	; 0x657a <__fp_splitA>
    644a:	88 f0       	brcs	.+34     	; 0x646e <__fixunssfsi+0x26>
    644c:	9f 57       	subi	r25, 0x7F	; 127
    644e:	90 f0       	brcs	.+36     	; 0x6474 <__fixunssfsi+0x2c>
    6450:	b9 2f       	mov	r27, r25
    6452:	99 27       	eor	r25, r25
    6454:	b7 51       	subi	r27, 0x17	; 23
    6456:	a0 f0       	brcs	.+40     	; 0x6480 <__fixunssfsi+0x38>
    6458:	d1 f0       	breq	.+52     	; 0x648e <__fixunssfsi+0x46>
    645a:	66 0f       	add	r22, r22
    645c:	77 1f       	adc	r23, r23
    645e:	88 1f       	adc	r24, r24
    6460:	99 1f       	adc	r25, r25
    6462:	1a f0       	brmi	.+6      	; 0x646a <__fixunssfsi+0x22>
    6464:	ba 95       	dec	r27
    6466:	c9 f7       	brne	.-14     	; 0x645a <__fixunssfsi+0x12>
    6468:	12 c0       	rjmp	.+36     	; 0x648e <__fixunssfsi+0x46>
    646a:	b1 30       	cpi	r27, 0x01	; 1
    646c:	81 f0       	breq	.+32     	; 0x648e <__fixunssfsi+0x46>
    646e:	9f d0       	rcall	.+318    	; 0x65ae <__fp_zero>
    6470:	b1 e0       	ldi	r27, 0x01	; 1
    6472:	08 95       	ret
    6474:	9c c0       	rjmp	.+312    	; 0x65ae <__fp_zero>
    6476:	67 2f       	mov	r22, r23
    6478:	78 2f       	mov	r23, r24
    647a:	88 27       	eor	r24, r24
    647c:	b8 5f       	subi	r27, 0xF8	; 248
    647e:	39 f0       	breq	.+14     	; 0x648e <__fixunssfsi+0x46>
    6480:	b9 3f       	cpi	r27, 0xF9	; 249
    6482:	cc f3       	brlt	.-14     	; 0x6476 <__fixunssfsi+0x2e>
    6484:	86 95       	lsr	r24
    6486:	77 95       	ror	r23
    6488:	67 95       	ror	r22
    648a:	b3 95       	inc	r27
    648c:	d9 f7       	brne	.-10     	; 0x6484 <__fixunssfsi+0x3c>
    648e:	3e f4       	brtc	.+14     	; 0x649e <__fixunssfsi+0x56>
    6490:	90 95       	com	r25
    6492:	80 95       	com	r24
    6494:	70 95       	com	r23
    6496:	61 95       	neg	r22
    6498:	7f 4f       	sbci	r23, 0xFF	; 255
    649a:	8f 4f       	sbci	r24, 0xFF	; 255
    649c:	9f 4f       	sbci	r25, 0xFF	; 255
    649e:	08 95       	ret

000064a0 <__floatunsisf>:
    64a0:	e8 94       	clt
    64a2:	09 c0       	rjmp	.+18     	; 0x64b6 <__floatsisf+0x12>

000064a4 <__floatsisf>:
    64a4:	97 fb       	bst	r25, 7
    64a6:	3e f4       	brtc	.+14     	; 0x64b6 <__floatsisf+0x12>
    64a8:	90 95       	com	r25
    64aa:	80 95       	com	r24
    64ac:	70 95       	com	r23
    64ae:	61 95       	neg	r22
    64b0:	7f 4f       	sbci	r23, 0xFF	; 255
    64b2:	8f 4f       	sbci	r24, 0xFF	; 255
    64b4:	9f 4f       	sbci	r25, 0xFF	; 255
    64b6:	99 23       	and	r25, r25
    64b8:	a9 f0       	breq	.+42     	; 0x64e4 <__floatsisf+0x40>
    64ba:	f9 2f       	mov	r31, r25
    64bc:	96 e9       	ldi	r25, 0x96	; 150
    64be:	bb 27       	eor	r27, r27
    64c0:	93 95       	inc	r25
    64c2:	f6 95       	lsr	r31
    64c4:	87 95       	ror	r24
    64c6:	77 95       	ror	r23
    64c8:	67 95       	ror	r22
    64ca:	b7 95       	ror	r27
    64cc:	f1 11       	cpse	r31, r1
    64ce:	f8 cf       	rjmp	.-16     	; 0x64c0 <__floatsisf+0x1c>
    64d0:	fa f4       	brpl	.+62     	; 0x6510 <__floatsisf+0x6c>
    64d2:	bb 0f       	add	r27, r27
    64d4:	11 f4       	brne	.+4      	; 0x64da <__floatsisf+0x36>
    64d6:	60 ff       	sbrs	r22, 0
    64d8:	1b c0       	rjmp	.+54     	; 0x6510 <__floatsisf+0x6c>
    64da:	6f 5f       	subi	r22, 0xFF	; 255
    64dc:	7f 4f       	sbci	r23, 0xFF	; 255
    64de:	8f 4f       	sbci	r24, 0xFF	; 255
    64e0:	9f 4f       	sbci	r25, 0xFF	; 255
    64e2:	16 c0       	rjmp	.+44     	; 0x6510 <__floatsisf+0x6c>
    64e4:	88 23       	and	r24, r24
    64e6:	11 f0       	breq	.+4      	; 0x64ec <__floatsisf+0x48>
    64e8:	96 e9       	ldi	r25, 0x96	; 150
    64ea:	11 c0       	rjmp	.+34     	; 0x650e <__floatsisf+0x6a>
    64ec:	77 23       	and	r23, r23
    64ee:	21 f0       	breq	.+8      	; 0x64f8 <__floatsisf+0x54>
    64f0:	9e e8       	ldi	r25, 0x8E	; 142
    64f2:	87 2f       	mov	r24, r23
    64f4:	76 2f       	mov	r23, r22
    64f6:	05 c0       	rjmp	.+10     	; 0x6502 <__floatsisf+0x5e>
    64f8:	66 23       	and	r22, r22
    64fa:	71 f0       	breq	.+28     	; 0x6518 <__floatsisf+0x74>
    64fc:	96 e8       	ldi	r25, 0x86	; 134
    64fe:	86 2f       	mov	r24, r22
    6500:	70 e0       	ldi	r23, 0x00	; 0
    6502:	60 e0       	ldi	r22, 0x00	; 0
    6504:	2a f0       	brmi	.+10     	; 0x6510 <__floatsisf+0x6c>
    6506:	9a 95       	dec	r25
    6508:	66 0f       	add	r22, r22
    650a:	77 1f       	adc	r23, r23
    650c:	88 1f       	adc	r24, r24
    650e:	da f7       	brpl	.-10     	; 0x6506 <__floatsisf+0x62>
    6510:	88 0f       	add	r24, r24
    6512:	96 95       	lsr	r25
    6514:	87 95       	ror	r24
    6516:	97 f9       	bld	r25, 7
    6518:	08 95       	ret

0000651a <__fp_inf>:
    651a:	97 f9       	bld	r25, 7
    651c:	9f 67       	ori	r25, 0x7F	; 127
    651e:	80 e8       	ldi	r24, 0x80	; 128
    6520:	70 e0       	ldi	r23, 0x00	; 0
    6522:	60 e0       	ldi	r22, 0x00	; 0
    6524:	08 95       	ret

00006526 <__fp_nan>:
    6526:	9f ef       	ldi	r25, 0xFF	; 255
    6528:	80 ec       	ldi	r24, 0xC0	; 192
    652a:	08 95       	ret

0000652c <__fp_pscA>:
    652c:	00 24       	eor	r0, r0
    652e:	0a 94       	dec	r0
    6530:	16 16       	cp	r1, r22
    6532:	17 06       	cpc	r1, r23
    6534:	18 06       	cpc	r1, r24
    6536:	09 06       	cpc	r0, r25
    6538:	08 95       	ret

0000653a <__fp_pscB>:
    653a:	00 24       	eor	r0, r0
    653c:	0a 94       	dec	r0
    653e:	12 16       	cp	r1, r18
    6540:	13 06       	cpc	r1, r19
    6542:	14 06       	cpc	r1, r20
    6544:	05 06       	cpc	r0, r21
    6546:	08 95       	ret

00006548 <__fp_round>:
    6548:	09 2e       	mov	r0, r25
    654a:	03 94       	inc	r0
    654c:	00 0c       	add	r0, r0
    654e:	11 f4       	brne	.+4      	; 0x6554 <__fp_round+0xc>
    6550:	88 23       	and	r24, r24
    6552:	52 f0       	brmi	.+20     	; 0x6568 <__fp_round+0x20>
    6554:	bb 0f       	add	r27, r27
    6556:	40 f4       	brcc	.+16     	; 0x6568 <__fp_round+0x20>
    6558:	bf 2b       	or	r27, r31
    655a:	11 f4       	brne	.+4      	; 0x6560 <__fp_round+0x18>
    655c:	60 ff       	sbrs	r22, 0
    655e:	04 c0       	rjmp	.+8      	; 0x6568 <__fp_round+0x20>
    6560:	6f 5f       	subi	r22, 0xFF	; 255
    6562:	7f 4f       	sbci	r23, 0xFF	; 255
    6564:	8f 4f       	sbci	r24, 0xFF	; 255
    6566:	9f 4f       	sbci	r25, 0xFF	; 255
    6568:	08 95       	ret

0000656a <__fp_split3>:
    656a:	57 fd       	sbrc	r21, 7
    656c:	90 58       	subi	r25, 0x80	; 128
    656e:	44 0f       	add	r20, r20
    6570:	55 1f       	adc	r21, r21
    6572:	59 f0       	breq	.+22     	; 0x658a <__fp_splitA+0x10>
    6574:	5f 3f       	cpi	r21, 0xFF	; 255
    6576:	71 f0       	breq	.+28     	; 0x6594 <__fp_splitA+0x1a>
    6578:	47 95       	ror	r20

0000657a <__fp_splitA>:
    657a:	88 0f       	add	r24, r24
    657c:	97 fb       	bst	r25, 7
    657e:	99 1f       	adc	r25, r25
    6580:	61 f0       	breq	.+24     	; 0x659a <__fp_splitA+0x20>
    6582:	9f 3f       	cpi	r25, 0xFF	; 255
    6584:	79 f0       	breq	.+30     	; 0x65a4 <__fp_splitA+0x2a>
    6586:	87 95       	ror	r24
    6588:	08 95       	ret
    658a:	12 16       	cp	r1, r18
    658c:	13 06       	cpc	r1, r19
    658e:	14 06       	cpc	r1, r20
    6590:	55 1f       	adc	r21, r21
    6592:	f2 cf       	rjmp	.-28     	; 0x6578 <__fp_split3+0xe>
    6594:	46 95       	lsr	r20
    6596:	f1 df       	rcall	.-30     	; 0x657a <__fp_splitA>
    6598:	08 c0       	rjmp	.+16     	; 0x65aa <__fp_splitA+0x30>
    659a:	16 16       	cp	r1, r22
    659c:	17 06       	cpc	r1, r23
    659e:	18 06       	cpc	r1, r24
    65a0:	99 1f       	adc	r25, r25
    65a2:	f1 cf       	rjmp	.-30     	; 0x6586 <__fp_splitA+0xc>
    65a4:	86 95       	lsr	r24
    65a6:	71 05       	cpc	r23, r1
    65a8:	61 05       	cpc	r22, r1
    65aa:	08 94       	sec
    65ac:	08 95       	ret

000065ae <__fp_zero>:
    65ae:	e8 94       	clt

000065b0 <__fp_szero>:
    65b0:	bb 27       	eor	r27, r27
    65b2:	66 27       	eor	r22, r22
    65b4:	77 27       	eor	r23, r23
    65b6:	cb 01       	movw	r24, r22
    65b8:	97 f9       	bld	r25, 7
    65ba:	08 95       	ret

000065bc <__mulsf3>:
    65bc:	0b d0       	rcall	.+22     	; 0x65d4 <__mulsf3x>
    65be:	c4 cf       	rjmp	.-120    	; 0x6548 <__fp_round>
    65c0:	b5 df       	rcall	.-150    	; 0x652c <__fp_pscA>
    65c2:	28 f0       	brcs	.+10     	; 0x65ce <__mulsf3+0x12>
    65c4:	ba df       	rcall	.-140    	; 0x653a <__fp_pscB>
    65c6:	18 f0       	brcs	.+6      	; 0x65ce <__mulsf3+0x12>
    65c8:	95 23       	and	r25, r21
    65ca:	09 f0       	breq	.+2      	; 0x65ce <__mulsf3+0x12>
    65cc:	a6 cf       	rjmp	.-180    	; 0x651a <__fp_inf>
    65ce:	ab cf       	rjmp	.-170    	; 0x6526 <__fp_nan>
    65d0:	11 24       	eor	r1, r1
    65d2:	ee cf       	rjmp	.-36     	; 0x65b0 <__fp_szero>

000065d4 <__mulsf3x>:
    65d4:	ca df       	rcall	.-108    	; 0x656a <__fp_split3>
    65d6:	a0 f3       	brcs	.-24     	; 0x65c0 <__mulsf3+0x4>

000065d8 <__mulsf3_pse>:
    65d8:	95 9f       	mul	r25, r21
    65da:	d1 f3       	breq	.-12     	; 0x65d0 <__mulsf3+0x14>
    65dc:	95 0f       	add	r25, r21
    65de:	50 e0       	ldi	r21, 0x00	; 0
    65e0:	55 1f       	adc	r21, r21
    65e2:	62 9f       	mul	r22, r18
    65e4:	f0 01       	movw	r30, r0
    65e6:	72 9f       	mul	r23, r18
    65e8:	bb 27       	eor	r27, r27
    65ea:	f0 0d       	add	r31, r0
    65ec:	b1 1d       	adc	r27, r1
    65ee:	63 9f       	mul	r22, r19
    65f0:	aa 27       	eor	r26, r26
    65f2:	f0 0d       	add	r31, r0
    65f4:	b1 1d       	adc	r27, r1
    65f6:	aa 1f       	adc	r26, r26
    65f8:	64 9f       	mul	r22, r20
    65fa:	66 27       	eor	r22, r22
    65fc:	b0 0d       	add	r27, r0
    65fe:	a1 1d       	adc	r26, r1
    6600:	66 1f       	adc	r22, r22
    6602:	82 9f       	mul	r24, r18
    6604:	22 27       	eor	r18, r18
    6606:	b0 0d       	add	r27, r0
    6608:	a1 1d       	adc	r26, r1
    660a:	62 1f       	adc	r22, r18
    660c:	73 9f       	mul	r23, r19
    660e:	b0 0d       	add	r27, r0
    6610:	a1 1d       	adc	r26, r1
    6612:	62 1f       	adc	r22, r18
    6614:	83 9f       	mul	r24, r19
    6616:	a0 0d       	add	r26, r0
    6618:	61 1d       	adc	r22, r1
    661a:	22 1f       	adc	r18, r18
    661c:	74 9f       	mul	r23, r20
    661e:	33 27       	eor	r19, r19
    6620:	a0 0d       	add	r26, r0
    6622:	61 1d       	adc	r22, r1
    6624:	23 1f       	adc	r18, r19
    6626:	84 9f       	mul	r24, r20
    6628:	60 0d       	add	r22, r0
    662a:	21 1d       	adc	r18, r1
    662c:	82 2f       	mov	r24, r18
    662e:	76 2f       	mov	r23, r22
    6630:	6a 2f       	mov	r22, r26
    6632:	11 24       	eor	r1, r1
    6634:	9f 57       	subi	r25, 0x7F	; 127
    6636:	50 40       	sbci	r21, 0x00	; 0
    6638:	8a f0       	brmi	.+34     	; 0x665c <__mulsf3_pse+0x84>
    663a:	e1 f0       	breq	.+56     	; 0x6674 <__mulsf3_pse+0x9c>
    663c:	88 23       	and	r24, r24
    663e:	4a f0       	brmi	.+18     	; 0x6652 <__mulsf3_pse+0x7a>
    6640:	ee 0f       	add	r30, r30
    6642:	ff 1f       	adc	r31, r31
    6644:	bb 1f       	adc	r27, r27
    6646:	66 1f       	adc	r22, r22
    6648:	77 1f       	adc	r23, r23
    664a:	88 1f       	adc	r24, r24
    664c:	91 50       	subi	r25, 0x01	; 1
    664e:	50 40       	sbci	r21, 0x00	; 0
    6650:	a9 f7       	brne	.-22     	; 0x663c <__mulsf3_pse+0x64>
    6652:	9e 3f       	cpi	r25, 0xFE	; 254
    6654:	51 05       	cpc	r21, r1
    6656:	70 f0       	brcs	.+28     	; 0x6674 <__mulsf3_pse+0x9c>
    6658:	60 cf       	rjmp	.-320    	; 0x651a <__fp_inf>
    665a:	aa cf       	rjmp	.-172    	; 0x65b0 <__fp_szero>
    665c:	5f 3f       	cpi	r21, 0xFF	; 255
    665e:	ec f3       	brlt	.-6      	; 0x665a <__mulsf3_pse+0x82>
    6660:	98 3e       	cpi	r25, 0xE8	; 232
    6662:	dc f3       	brlt	.-10     	; 0x665a <__mulsf3_pse+0x82>
    6664:	86 95       	lsr	r24
    6666:	77 95       	ror	r23
    6668:	67 95       	ror	r22
    666a:	b7 95       	ror	r27
    666c:	f7 95       	ror	r31
    666e:	e7 95       	ror	r30
    6670:	9f 5f       	subi	r25, 0xFF	; 255
    6672:	c1 f7       	brne	.-16     	; 0x6664 <__mulsf3_pse+0x8c>
    6674:	fe 2b       	or	r31, r30
    6676:	88 0f       	add	r24, r24
    6678:	91 1d       	adc	r25, r1
    667a:	96 95       	lsr	r25
    667c:	87 95       	ror	r24
    667e:	97 f9       	bld	r25, 7
    6680:	08 95       	ret

00006682 <__divmodhi4>:
    6682:	97 fb       	bst	r25, 7
    6684:	07 2e       	mov	r0, r23
    6686:	16 f4       	brtc	.+4      	; 0x668c <__divmodhi4+0xa>
    6688:	00 94       	com	r0
    668a:	06 d0       	rcall	.+12     	; 0x6698 <__divmodhi4_neg1>
    668c:	77 fd       	sbrc	r23, 7
    668e:	08 d0       	rcall	.+16     	; 0x66a0 <__divmodhi4_neg2>
    6690:	35 d0       	rcall	.+106    	; 0x66fc <__udivmodhi4>
    6692:	07 fc       	sbrc	r0, 7
    6694:	05 d0       	rcall	.+10     	; 0x66a0 <__divmodhi4_neg2>
    6696:	3e f4       	brtc	.+14     	; 0x66a6 <__divmodhi4_exit>

00006698 <__divmodhi4_neg1>:
    6698:	90 95       	com	r25
    669a:	81 95       	neg	r24
    669c:	9f 4f       	sbci	r25, 0xFF	; 255
    669e:	08 95       	ret

000066a0 <__divmodhi4_neg2>:
    66a0:	70 95       	com	r23
    66a2:	61 95       	neg	r22
    66a4:	7f 4f       	sbci	r23, 0xFF	; 255

000066a6 <__divmodhi4_exit>:
    66a6:	08 95       	ret

000066a8 <__udivmodsi4>:
    66a8:	a1 e2       	ldi	r26, 0x21	; 33
    66aa:	1a 2e       	mov	r1, r26
    66ac:	aa 1b       	sub	r26, r26
    66ae:	bb 1b       	sub	r27, r27
    66b0:	fd 01       	movw	r30, r26
    66b2:	0d c0       	rjmp	.+26     	; 0x66ce <__udivmodsi4_ep>

000066b4 <__udivmodsi4_loop>:
    66b4:	aa 1f       	adc	r26, r26
    66b6:	bb 1f       	adc	r27, r27
    66b8:	ee 1f       	adc	r30, r30
    66ba:	ff 1f       	adc	r31, r31
    66bc:	a2 17       	cp	r26, r18
    66be:	b3 07       	cpc	r27, r19
    66c0:	e4 07       	cpc	r30, r20
    66c2:	f5 07       	cpc	r31, r21
    66c4:	20 f0       	brcs	.+8      	; 0x66ce <__udivmodsi4_ep>
    66c6:	a2 1b       	sub	r26, r18
    66c8:	b3 0b       	sbc	r27, r19
    66ca:	e4 0b       	sbc	r30, r20
    66cc:	f5 0b       	sbc	r31, r21

000066ce <__udivmodsi4_ep>:
    66ce:	66 1f       	adc	r22, r22
    66d0:	77 1f       	adc	r23, r23
    66d2:	88 1f       	adc	r24, r24
    66d4:	99 1f       	adc	r25, r25
    66d6:	1a 94       	dec	r1
    66d8:	69 f7       	brne	.-38     	; 0x66b4 <__udivmodsi4_loop>
    66da:	60 95       	com	r22
    66dc:	70 95       	com	r23
    66de:	80 95       	com	r24
    66e0:	90 95       	com	r25
    66e2:	9b 01       	movw	r18, r22
    66e4:	ac 01       	movw	r20, r24
    66e6:	bd 01       	movw	r22, r26
    66e8:	cf 01       	movw	r24, r30
    66ea:	08 95       	ret

000066ec <__tablejump2__>:
    66ec:	ee 0f       	add	r30, r30
    66ee:	ff 1f       	adc	r31, r31
    66f0:	88 1f       	adc	r24, r24
    66f2:	8b bf       	out	0x3b, r24	; 59
    66f4:	07 90       	elpm	r0, Z+
    66f6:	f6 91       	elpm	r31, Z
    66f8:	e0 2d       	mov	r30, r0
    66fa:	19 94       	eijmp

000066fc <__udivmodhi4>:
    66fc:	aa 1b       	sub	r26, r26
    66fe:	bb 1b       	sub	r27, r27
    6700:	51 e1       	ldi	r21, 0x11	; 17
    6702:	07 c0       	rjmp	.+14     	; 0x6712 <__udivmodhi4_ep>

00006704 <__udivmodhi4_loop>:
    6704:	aa 1f       	adc	r26, r26
    6706:	bb 1f       	adc	r27, r27
    6708:	a6 17       	cp	r26, r22
    670a:	b7 07       	cpc	r27, r23
    670c:	10 f0       	brcs	.+4      	; 0x6712 <__udivmodhi4_ep>
    670e:	a6 1b       	sub	r26, r22
    6710:	b7 0b       	sbc	r27, r23

00006712 <__udivmodhi4_ep>:
    6712:	88 1f       	adc	r24, r24
    6714:	99 1f       	adc	r25, r25
    6716:	5a 95       	dec	r21
    6718:	a9 f7       	brne	.-22     	; 0x6704 <__udivmodhi4_loop>
    671a:	80 95       	com	r24
    671c:	90 95       	com	r25
    671e:	bc 01       	movw	r22, r24
    6720:	cd 01       	movw	r24, r26
    6722:	08 95       	ret

00006724 <malloc>:
    6724:	0f 93       	push	r16
    6726:	1f 93       	push	r17
    6728:	cf 93       	push	r28
    672a:	df 93       	push	r29
    672c:	82 30       	cpi	r24, 0x02	; 2
    672e:	91 05       	cpc	r25, r1
    6730:	10 f4       	brcc	.+4      	; 0x6736 <malloc+0x12>
    6732:	82 e0       	ldi	r24, 0x02	; 2
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	e0 91 51 19 	lds	r30, 0x1951	; 0x801951 <__flp>
    673a:	f0 91 52 19 	lds	r31, 0x1952	; 0x801952 <__flp+0x1>
    673e:	20 e0       	ldi	r18, 0x00	; 0
    6740:	30 e0       	ldi	r19, 0x00	; 0
    6742:	a0 e0       	ldi	r26, 0x00	; 0
    6744:	b0 e0       	ldi	r27, 0x00	; 0
    6746:	30 97       	sbiw	r30, 0x00	; 0
    6748:	19 f1       	breq	.+70     	; 0x6790 <malloc+0x6c>
    674a:	40 81       	ld	r20, Z
    674c:	51 81       	ldd	r21, Z+1	; 0x01
    674e:	02 81       	ldd	r16, Z+2	; 0x02
    6750:	13 81       	ldd	r17, Z+3	; 0x03
    6752:	48 17       	cp	r20, r24
    6754:	59 07       	cpc	r21, r25
    6756:	c8 f0       	brcs	.+50     	; 0x678a <malloc+0x66>
    6758:	84 17       	cp	r24, r20
    675a:	95 07       	cpc	r25, r21
    675c:	69 f4       	brne	.+26     	; 0x6778 <malloc+0x54>
    675e:	10 97       	sbiw	r26, 0x00	; 0
    6760:	31 f0       	breq	.+12     	; 0x676e <malloc+0x4a>
    6762:	12 96       	adiw	r26, 0x02	; 2
    6764:	0c 93       	st	X, r16
    6766:	12 97       	sbiw	r26, 0x02	; 2
    6768:	13 96       	adiw	r26, 0x03	; 3
    676a:	1c 93       	st	X, r17
    676c:	27 c0       	rjmp	.+78     	; 0x67bc <malloc+0x98>
    676e:	00 93 51 19 	sts	0x1951, r16	; 0x801951 <__flp>
    6772:	10 93 52 19 	sts	0x1952, r17	; 0x801952 <__flp+0x1>
    6776:	22 c0       	rjmp	.+68     	; 0x67bc <malloc+0x98>
    6778:	21 15       	cp	r18, r1
    677a:	31 05       	cpc	r19, r1
    677c:	19 f0       	breq	.+6      	; 0x6784 <malloc+0x60>
    677e:	42 17       	cp	r20, r18
    6780:	53 07       	cpc	r21, r19
    6782:	18 f4       	brcc	.+6      	; 0x678a <malloc+0x66>
    6784:	9a 01       	movw	r18, r20
    6786:	bd 01       	movw	r22, r26
    6788:	ef 01       	movw	r28, r30
    678a:	df 01       	movw	r26, r30
    678c:	f8 01       	movw	r30, r16
    678e:	db cf       	rjmp	.-74     	; 0x6746 <malloc+0x22>
    6790:	21 15       	cp	r18, r1
    6792:	31 05       	cpc	r19, r1
    6794:	f9 f0       	breq	.+62     	; 0x67d4 <malloc+0xb0>
    6796:	28 1b       	sub	r18, r24
    6798:	39 0b       	sbc	r19, r25
    679a:	24 30       	cpi	r18, 0x04	; 4
    679c:	31 05       	cpc	r19, r1
    679e:	80 f4       	brcc	.+32     	; 0x67c0 <malloc+0x9c>
    67a0:	8a 81       	ldd	r24, Y+2	; 0x02
    67a2:	9b 81       	ldd	r25, Y+3	; 0x03
    67a4:	61 15       	cp	r22, r1
    67a6:	71 05       	cpc	r23, r1
    67a8:	21 f0       	breq	.+8      	; 0x67b2 <malloc+0x8e>
    67aa:	fb 01       	movw	r30, r22
    67ac:	93 83       	std	Z+3, r25	; 0x03
    67ae:	82 83       	std	Z+2, r24	; 0x02
    67b0:	04 c0       	rjmp	.+8      	; 0x67ba <malloc+0x96>
    67b2:	90 93 52 19 	sts	0x1952, r25	; 0x801952 <__flp+0x1>
    67b6:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <__flp>
    67ba:	fe 01       	movw	r30, r28
    67bc:	32 96       	adiw	r30, 0x02	; 2
    67be:	44 c0       	rjmp	.+136    	; 0x6848 <malloc+0x124>
    67c0:	fe 01       	movw	r30, r28
    67c2:	e2 0f       	add	r30, r18
    67c4:	f3 1f       	adc	r31, r19
    67c6:	81 93       	st	Z+, r24
    67c8:	91 93       	st	Z+, r25
    67ca:	22 50       	subi	r18, 0x02	; 2
    67cc:	31 09       	sbc	r19, r1
    67ce:	39 83       	std	Y+1, r19	; 0x01
    67d0:	28 83       	st	Y, r18
    67d2:	3a c0       	rjmp	.+116    	; 0x6848 <malloc+0x124>
    67d4:	20 91 4f 19 	lds	r18, 0x194F	; 0x80194f <__brkval>
    67d8:	30 91 50 19 	lds	r19, 0x1950	; 0x801950 <__brkval+0x1>
    67dc:	23 2b       	or	r18, r19
    67de:	41 f4       	brne	.+16     	; 0x67f0 <malloc+0xcc>
    67e0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    67e4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    67e8:	30 93 50 19 	sts	0x1950, r19	; 0x801950 <__brkval+0x1>
    67ec:	20 93 4f 19 	sts	0x194F, r18	; 0x80194f <__brkval>
    67f0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    67f4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    67f8:	21 15       	cp	r18, r1
    67fa:	31 05       	cpc	r19, r1
    67fc:	41 f4       	brne	.+16     	; 0x680e <malloc+0xea>
    67fe:	2d b7       	in	r18, 0x3d	; 61
    6800:	3e b7       	in	r19, 0x3e	; 62
    6802:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6806:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    680a:	24 1b       	sub	r18, r20
    680c:	35 0b       	sbc	r19, r21
    680e:	e0 91 4f 19 	lds	r30, 0x194F	; 0x80194f <__brkval>
    6812:	f0 91 50 19 	lds	r31, 0x1950	; 0x801950 <__brkval+0x1>
    6816:	e2 17       	cp	r30, r18
    6818:	f3 07       	cpc	r31, r19
    681a:	a0 f4       	brcc	.+40     	; 0x6844 <malloc+0x120>
    681c:	2e 1b       	sub	r18, r30
    681e:	3f 0b       	sbc	r19, r31
    6820:	28 17       	cp	r18, r24
    6822:	39 07       	cpc	r19, r25
    6824:	78 f0       	brcs	.+30     	; 0x6844 <malloc+0x120>
    6826:	ac 01       	movw	r20, r24
    6828:	4e 5f       	subi	r20, 0xFE	; 254
    682a:	5f 4f       	sbci	r21, 0xFF	; 255
    682c:	24 17       	cp	r18, r20
    682e:	35 07       	cpc	r19, r21
    6830:	48 f0       	brcs	.+18     	; 0x6844 <malloc+0x120>
    6832:	4e 0f       	add	r20, r30
    6834:	5f 1f       	adc	r21, r31
    6836:	50 93 50 19 	sts	0x1950, r21	; 0x801950 <__brkval+0x1>
    683a:	40 93 4f 19 	sts	0x194F, r20	; 0x80194f <__brkval>
    683e:	81 93       	st	Z+, r24
    6840:	91 93       	st	Z+, r25
    6842:	02 c0       	rjmp	.+4      	; 0x6848 <malloc+0x124>
    6844:	e0 e0       	ldi	r30, 0x00	; 0
    6846:	f0 e0       	ldi	r31, 0x00	; 0
    6848:	cf 01       	movw	r24, r30
    684a:	df 91       	pop	r29
    684c:	cf 91       	pop	r28
    684e:	1f 91       	pop	r17
    6850:	0f 91       	pop	r16
    6852:	08 95       	ret

00006854 <free>:
    6854:	cf 93       	push	r28
    6856:	df 93       	push	r29
    6858:	00 97       	sbiw	r24, 0x00	; 0
    685a:	09 f4       	brne	.+2      	; 0x685e <free+0xa>
    685c:	81 c0       	rjmp	.+258    	; 0x6960 <free+0x10c>
    685e:	fc 01       	movw	r30, r24
    6860:	32 97       	sbiw	r30, 0x02	; 2
    6862:	13 82       	std	Z+3, r1	; 0x03
    6864:	12 82       	std	Z+2, r1	; 0x02
    6866:	a0 91 51 19 	lds	r26, 0x1951	; 0x801951 <__flp>
    686a:	b0 91 52 19 	lds	r27, 0x1952	; 0x801952 <__flp+0x1>
    686e:	10 97       	sbiw	r26, 0x00	; 0
    6870:	81 f4       	brne	.+32     	; 0x6892 <free+0x3e>
    6872:	20 81       	ld	r18, Z
    6874:	31 81       	ldd	r19, Z+1	; 0x01
    6876:	82 0f       	add	r24, r18
    6878:	93 1f       	adc	r25, r19
    687a:	20 91 4f 19 	lds	r18, 0x194F	; 0x80194f <__brkval>
    687e:	30 91 50 19 	lds	r19, 0x1950	; 0x801950 <__brkval+0x1>
    6882:	28 17       	cp	r18, r24
    6884:	39 07       	cpc	r19, r25
    6886:	51 f5       	brne	.+84     	; 0x68dc <free+0x88>
    6888:	f0 93 50 19 	sts	0x1950, r31	; 0x801950 <__brkval+0x1>
    688c:	e0 93 4f 19 	sts	0x194F, r30	; 0x80194f <__brkval>
    6890:	67 c0       	rjmp	.+206    	; 0x6960 <free+0x10c>
    6892:	ed 01       	movw	r28, r26
    6894:	20 e0       	ldi	r18, 0x00	; 0
    6896:	30 e0       	ldi	r19, 0x00	; 0
    6898:	ce 17       	cp	r28, r30
    689a:	df 07       	cpc	r29, r31
    689c:	40 f4       	brcc	.+16     	; 0x68ae <free+0x5a>
    689e:	4a 81       	ldd	r20, Y+2	; 0x02
    68a0:	5b 81       	ldd	r21, Y+3	; 0x03
    68a2:	9e 01       	movw	r18, r28
    68a4:	41 15       	cp	r20, r1
    68a6:	51 05       	cpc	r21, r1
    68a8:	f1 f0       	breq	.+60     	; 0x68e6 <free+0x92>
    68aa:	ea 01       	movw	r28, r20
    68ac:	f5 cf       	rjmp	.-22     	; 0x6898 <free+0x44>
    68ae:	d3 83       	std	Z+3, r29	; 0x03
    68b0:	c2 83       	std	Z+2, r28	; 0x02
    68b2:	40 81       	ld	r20, Z
    68b4:	51 81       	ldd	r21, Z+1	; 0x01
    68b6:	84 0f       	add	r24, r20
    68b8:	95 1f       	adc	r25, r21
    68ba:	c8 17       	cp	r28, r24
    68bc:	d9 07       	cpc	r29, r25
    68be:	59 f4       	brne	.+22     	; 0x68d6 <free+0x82>
    68c0:	88 81       	ld	r24, Y
    68c2:	99 81       	ldd	r25, Y+1	; 0x01
    68c4:	84 0f       	add	r24, r20
    68c6:	95 1f       	adc	r25, r21
    68c8:	02 96       	adiw	r24, 0x02	; 2
    68ca:	91 83       	std	Z+1, r25	; 0x01
    68cc:	80 83       	st	Z, r24
    68ce:	8a 81       	ldd	r24, Y+2	; 0x02
    68d0:	9b 81       	ldd	r25, Y+3	; 0x03
    68d2:	93 83       	std	Z+3, r25	; 0x03
    68d4:	82 83       	std	Z+2, r24	; 0x02
    68d6:	21 15       	cp	r18, r1
    68d8:	31 05       	cpc	r19, r1
    68da:	29 f4       	brne	.+10     	; 0x68e6 <free+0x92>
    68dc:	f0 93 52 19 	sts	0x1952, r31	; 0x801952 <__flp+0x1>
    68e0:	e0 93 51 19 	sts	0x1951, r30	; 0x801951 <__flp>
    68e4:	3d c0       	rjmp	.+122    	; 0x6960 <free+0x10c>
    68e6:	e9 01       	movw	r28, r18
    68e8:	fb 83       	std	Y+3, r31	; 0x03
    68ea:	ea 83       	std	Y+2, r30	; 0x02
    68ec:	49 91       	ld	r20, Y+
    68ee:	59 91       	ld	r21, Y+
    68f0:	c4 0f       	add	r28, r20
    68f2:	d5 1f       	adc	r29, r21
    68f4:	ec 17       	cp	r30, r28
    68f6:	fd 07       	cpc	r31, r29
    68f8:	61 f4       	brne	.+24     	; 0x6912 <free+0xbe>
    68fa:	80 81       	ld	r24, Z
    68fc:	91 81       	ldd	r25, Z+1	; 0x01
    68fe:	84 0f       	add	r24, r20
    6900:	95 1f       	adc	r25, r21
    6902:	02 96       	adiw	r24, 0x02	; 2
    6904:	e9 01       	movw	r28, r18
    6906:	99 83       	std	Y+1, r25	; 0x01
    6908:	88 83       	st	Y, r24
    690a:	82 81       	ldd	r24, Z+2	; 0x02
    690c:	93 81       	ldd	r25, Z+3	; 0x03
    690e:	9b 83       	std	Y+3, r25	; 0x03
    6910:	8a 83       	std	Y+2, r24	; 0x02
    6912:	e0 e0       	ldi	r30, 0x00	; 0
    6914:	f0 e0       	ldi	r31, 0x00	; 0
    6916:	12 96       	adiw	r26, 0x02	; 2
    6918:	8d 91       	ld	r24, X+
    691a:	9c 91       	ld	r25, X
    691c:	13 97       	sbiw	r26, 0x03	; 3
    691e:	00 97       	sbiw	r24, 0x00	; 0
    6920:	19 f0       	breq	.+6      	; 0x6928 <free+0xd4>
    6922:	fd 01       	movw	r30, r26
    6924:	dc 01       	movw	r26, r24
    6926:	f7 cf       	rjmp	.-18     	; 0x6916 <free+0xc2>
    6928:	8d 91       	ld	r24, X+
    692a:	9c 91       	ld	r25, X
    692c:	11 97       	sbiw	r26, 0x01	; 1
    692e:	9d 01       	movw	r18, r26
    6930:	2e 5f       	subi	r18, 0xFE	; 254
    6932:	3f 4f       	sbci	r19, 0xFF	; 255
    6934:	82 0f       	add	r24, r18
    6936:	93 1f       	adc	r25, r19
    6938:	20 91 4f 19 	lds	r18, 0x194F	; 0x80194f <__brkval>
    693c:	30 91 50 19 	lds	r19, 0x1950	; 0x801950 <__brkval+0x1>
    6940:	28 17       	cp	r18, r24
    6942:	39 07       	cpc	r19, r25
    6944:	69 f4       	brne	.+26     	; 0x6960 <free+0x10c>
    6946:	30 97       	sbiw	r30, 0x00	; 0
    6948:	29 f4       	brne	.+10     	; 0x6954 <free+0x100>
    694a:	10 92 52 19 	sts	0x1952, r1	; 0x801952 <__flp+0x1>
    694e:	10 92 51 19 	sts	0x1951, r1	; 0x801951 <__flp>
    6952:	02 c0       	rjmp	.+4      	; 0x6958 <free+0x104>
    6954:	13 82       	std	Z+3, r1	; 0x03
    6956:	12 82       	std	Z+2, r1	; 0x02
    6958:	b0 93 50 19 	sts	0x1950, r27	; 0x801950 <__brkval+0x1>
    695c:	a0 93 4f 19 	sts	0x194F, r26	; 0x80194f <__brkval>
    6960:	df 91       	pop	r29
    6962:	cf 91       	pop	r28
    6964:	08 95       	ret

00006966 <abort>:
    6966:	81 e0       	ldi	r24, 0x01	; 1
    6968:	90 e0       	ldi	r25, 0x00	; 0
    696a:	f8 94       	cli
    696c:	5a c2       	rjmp	.+1204   	; 0x6e22 <_exit>

0000696e <__ftoa_engine>:
    696e:	28 30       	cpi	r18, 0x08	; 8
    6970:	08 f0       	brcs	.+2      	; 0x6974 <__ftoa_engine+0x6>
    6972:	27 e0       	ldi	r18, 0x07	; 7
    6974:	33 27       	eor	r19, r19
    6976:	da 01       	movw	r26, r20
    6978:	99 0f       	add	r25, r25
    697a:	31 1d       	adc	r19, r1
    697c:	87 fd       	sbrc	r24, 7
    697e:	91 60       	ori	r25, 0x01	; 1
    6980:	00 96       	adiw	r24, 0x00	; 0
    6982:	61 05       	cpc	r22, r1
    6984:	71 05       	cpc	r23, r1
    6986:	39 f4       	brne	.+14     	; 0x6996 <__ftoa_engine+0x28>
    6988:	32 60       	ori	r19, 0x02	; 2
    698a:	2e 5f       	subi	r18, 0xFE	; 254
    698c:	3d 93       	st	X+, r19
    698e:	30 e3       	ldi	r19, 0x30	; 48
    6990:	2a 95       	dec	r18
    6992:	e1 f7       	brne	.-8      	; 0x698c <__ftoa_engine+0x1e>
    6994:	08 95       	ret
    6996:	9f 3f       	cpi	r25, 0xFF	; 255
    6998:	30 f0       	brcs	.+12     	; 0x69a6 <__ftoa_engine+0x38>
    699a:	80 38       	cpi	r24, 0x80	; 128
    699c:	71 05       	cpc	r23, r1
    699e:	61 05       	cpc	r22, r1
    69a0:	09 f0       	breq	.+2      	; 0x69a4 <__ftoa_engine+0x36>
    69a2:	3c 5f       	subi	r19, 0xFC	; 252
    69a4:	3c 5f       	subi	r19, 0xFC	; 252
    69a6:	3d 93       	st	X+, r19
    69a8:	91 30       	cpi	r25, 0x01	; 1
    69aa:	08 f0       	brcs	.+2      	; 0x69ae <__ftoa_engine+0x40>
    69ac:	80 68       	ori	r24, 0x80	; 128
    69ae:	91 1d       	adc	r25, r1
    69b0:	df 93       	push	r29
    69b2:	cf 93       	push	r28
    69b4:	1f 93       	push	r17
    69b6:	0f 93       	push	r16
    69b8:	ff 92       	push	r15
    69ba:	ef 92       	push	r14
    69bc:	19 2f       	mov	r17, r25
    69be:	98 7f       	andi	r25, 0xF8	; 248
    69c0:	96 95       	lsr	r25
    69c2:	e9 2f       	mov	r30, r25
    69c4:	96 95       	lsr	r25
    69c6:	96 95       	lsr	r25
    69c8:	e9 0f       	add	r30, r25
    69ca:	ff 27       	eor	r31, r31
    69cc:	e4 50       	subi	r30, 0x04	; 4
    69ce:	fe 4f       	sbci	r31, 0xFE	; 254
    69d0:	99 27       	eor	r25, r25
    69d2:	33 27       	eor	r19, r19
    69d4:	ee 24       	eor	r14, r14
    69d6:	ff 24       	eor	r15, r15
    69d8:	a7 01       	movw	r20, r14
    69da:	e7 01       	movw	r28, r14
    69dc:	05 90       	lpm	r0, Z+
    69de:	08 94       	sec
    69e0:	07 94       	ror	r0
    69e2:	28 f4       	brcc	.+10     	; 0x69ee <__ftoa_engine+0x80>
    69e4:	36 0f       	add	r19, r22
    69e6:	e7 1e       	adc	r14, r23
    69e8:	f8 1e       	adc	r15, r24
    69ea:	49 1f       	adc	r20, r25
    69ec:	51 1d       	adc	r21, r1
    69ee:	66 0f       	add	r22, r22
    69f0:	77 1f       	adc	r23, r23
    69f2:	88 1f       	adc	r24, r24
    69f4:	99 1f       	adc	r25, r25
    69f6:	06 94       	lsr	r0
    69f8:	a1 f7       	brne	.-24     	; 0x69e2 <__ftoa_engine+0x74>
    69fa:	05 90       	lpm	r0, Z+
    69fc:	07 94       	ror	r0
    69fe:	28 f4       	brcc	.+10     	; 0x6a0a <__ftoa_engine+0x9c>
    6a00:	e7 0e       	add	r14, r23
    6a02:	f8 1e       	adc	r15, r24
    6a04:	49 1f       	adc	r20, r25
    6a06:	56 1f       	adc	r21, r22
    6a08:	c1 1d       	adc	r28, r1
    6a0a:	77 0f       	add	r23, r23
    6a0c:	88 1f       	adc	r24, r24
    6a0e:	99 1f       	adc	r25, r25
    6a10:	66 1f       	adc	r22, r22
    6a12:	06 94       	lsr	r0
    6a14:	a1 f7       	brne	.-24     	; 0x69fe <__ftoa_engine+0x90>
    6a16:	05 90       	lpm	r0, Z+
    6a18:	07 94       	ror	r0
    6a1a:	28 f4       	brcc	.+10     	; 0x6a26 <__ftoa_engine+0xb8>
    6a1c:	f8 0e       	add	r15, r24
    6a1e:	49 1f       	adc	r20, r25
    6a20:	56 1f       	adc	r21, r22
    6a22:	c7 1f       	adc	r28, r23
    6a24:	d1 1d       	adc	r29, r1
    6a26:	88 0f       	add	r24, r24
    6a28:	99 1f       	adc	r25, r25
    6a2a:	66 1f       	adc	r22, r22
    6a2c:	77 1f       	adc	r23, r23
    6a2e:	06 94       	lsr	r0
    6a30:	a1 f7       	brne	.-24     	; 0x6a1a <__ftoa_engine+0xac>
    6a32:	05 90       	lpm	r0, Z+
    6a34:	07 94       	ror	r0
    6a36:	20 f4       	brcc	.+8      	; 0x6a40 <__ftoa_engine+0xd2>
    6a38:	49 0f       	add	r20, r25
    6a3a:	56 1f       	adc	r21, r22
    6a3c:	c7 1f       	adc	r28, r23
    6a3e:	d8 1f       	adc	r29, r24
    6a40:	99 0f       	add	r25, r25
    6a42:	66 1f       	adc	r22, r22
    6a44:	77 1f       	adc	r23, r23
    6a46:	88 1f       	adc	r24, r24
    6a48:	06 94       	lsr	r0
    6a4a:	a9 f7       	brne	.-22     	; 0x6a36 <__ftoa_engine+0xc8>
    6a4c:	84 91       	lpm	r24, Z
    6a4e:	10 95       	com	r17
    6a50:	17 70       	andi	r17, 0x07	; 7
    6a52:	41 f0       	breq	.+16     	; 0x6a64 <__ftoa_engine+0xf6>
    6a54:	d6 95       	lsr	r29
    6a56:	c7 95       	ror	r28
    6a58:	57 95       	ror	r21
    6a5a:	47 95       	ror	r20
    6a5c:	f7 94       	ror	r15
    6a5e:	e7 94       	ror	r14
    6a60:	1a 95       	dec	r17
    6a62:	c1 f7       	brne	.-16     	; 0x6a54 <__ftoa_engine+0xe6>
    6a64:	e2 ea       	ldi	r30, 0xA2	; 162
    6a66:	f1 e0       	ldi	r31, 0x01	; 1
    6a68:	68 94       	set
    6a6a:	15 90       	lpm	r1, Z+
    6a6c:	15 91       	lpm	r17, Z+
    6a6e:	35 91       	lpm	r19, Z+
    6a70:	65 91       	lpm	r22, Z+
    6a72:	95 91       	lpm	r25, Z+
    6a74:	05 90       	lpm	r0, Z+
    6a76:	7f e2       	ldi	r23, 0x2F	; 47
    6a78:	73 95       	inc	r23
    6a7a:	e1 18       	sub	r14, r1
    6a7c:	f1 0a       	sbc	r15, r17
    6a7e:	43 0b       	sbc	r20, r19
    6a80:	56 0b       	sbc	r21, r22
    6a82:	c9 0b       	sbc	r28, r25
    6a84:	d0 09       	sbc	r29, r0
    6a86:	c0 f7       	brcc	.-16     	; 0x6a78 <__ftoa_engine+0x10a>
    6a88:	e1 0c       	add	r14, r1
    6a8a:	f1 1e       	adc	r15, r17
    6a8c:	43 1f       	adc	r20, r19
    6a8e:	56 1f       	adc	r21, r22
    6a90:	c9 1f       	adc	r28, r25
    6a92:	d0 1d       	adc	r29, r0
    6a94:	7e f4       	brtc	.+30     	; 0x6ab4 <__ftoa_engine+0x146>
    6a96:	70 33       	cpi	r23, 0x30	; 48
    6a98:	11 f4       	brne	.+4      	; 0x6a9e <__ftoa_engine+0x130>
    6a9a:	8a 95       	dec	r24
    6a9c:	e6 cf       	rjmp	.-52     	; 0x6a6a <__ftoa_engine+0xfc>
    6a9e:	e8 94       	clt
    6aa0:	01 50       	subi	r16, 0x01	; 1
    6aa2:	30 f0       	brcs	.+12     	; 0x6ab0 <__ftoa_engine+0x142>
    6aa4:	08 0f       	add	r16, r24
    6aa6:	0a f4       	brpl	.+2      	; 0x6aaa <__ftoa_engine+0x13c>
    6aa8:	00 27       	eor	r16, r16
    6aaa:	02 17       	cp	r16, r18
    6aac:	08 f4       	brcc	.+2      	; 0x6ab0 <__ftoa_engine+0x142>
    6aae:	20 2f       	mov	r18, r16
    6ab0:	23 95       	inc	r18
    6ab2:	02 2f       	mov	r16, r18
    6ab4:	7a 33       	cpi	r23, 0x3A	; 58
    6ab6:	28 f0       	brcs	.+10     	; 0x6ac2 <__ftoa_engine+0x154>
    6ab8:	79 e3       	ldi	r23, 0x39	; 57
    6aba:	7d 93       	st	X+, r23
    6abc:	2a 95       	dec	r18
    6abe:	e9 f7       	brne	.-6      	; 0x6aba <__ftoa_engine+0x14c>
    6ac0:	10 c0       	rjmp	.+32     	; 0x6ae2 <__ftoa_engine+0x174>
    6ac2:	7d 93       	st	X+, r23
    6ac4:	2a 95       	dec	r18
    6ac6:	89 f6       	brne	.-94     	; 0x6a6a <__ftoa_engine+0xfc>
    6ac8:	06 94       	lsr	r0
    6aca:	97 95       	ror	r25
    6acc:	67 95       	ror	r22
    6ace:	37 95       	ror	r19
    6ad0:	17 95       	ror	r17
    6ad2:	17 94       	ror	r1
    6ad4:	e1 18       	sub	r14, r1
    6ad6:	f1 0a       	sbc	r15, r17
    6ad8:	43 0b       	sbc	r20, r19
    6ada:	56 0b       	sbc	r21, r22
    6adc:	c9 0b       	sbc	r28, r25
    6ade:	d0 09       	sbc	r29, r0
    6ae0:	98 f0       	brcs	.+38     	; 0x6b08 <__ftoa_engine+0x19a>
    6ae2:	23 95       	inc	r18
    6ae4:	7e 91       	ld	r23, -X
    6ae6:	73 95       	inc	r23
    6ae8:	7a 33       	cpi	r23, 0x3A	; 58
    6aea:	08 f0       	brcs	.+2      	; 0x6aee <__ftoa_engine+0x180>
    6aec:	70 e3       	ldi	r23, 0x30	; 48
    6aee:	7c 93       	st	X, r23
    6af0:	20 13       	cpse	r18, r16
    6af2:	b8 f7       	brcc	.-18     	; 0x6ae2 <__ftoa_engine+0x174>
    6af4:	7e 91       	ld	r23, -X
    6af6:	70 61       	ori	r23, 0x10	; 16
    6af8:	7d 93       	st	X+, r23
    6afa:	30 f0       	brcs	.+12     	; 0x6b08 <__ftoa_engine+0x19a>
    6afc:	83 95       	inc	r24
    6afe:	71 e3       	ldi	r23, 0x31	; 49
    6b00:	7d 93       	st	X+, r23
    6b02:	70 e3       	ldi	r23, 0x30	; 48
    6b04:	2a 95       	dec	r18
    6b06:	e1 f7       	brne	.-8      	; 0x6b00 <__ftoa_engine+0x192>
    6b08:	11 24       	eor	r1, r1
    6b0a:	ef 90       	pop	r14
    6b0c:	ff 90       	pop	r15
    6b0e:	0f 91       	pop	r16
    6b10:	1f 91       	pop	r17
    6b12:	cf 91       	pop	r28
    6b14:	df 91       	pop	r29
    6b16:	99 27       	eor	r25, r25
    6b18:	87 fd       	sbrc	r24, 7
    6b1a:	90 95       	com	r25
    6b1c:	08 95       	ret

00006b1e <strnlen_P>:
    6b1e:	fc 01       	movw	r30, r24
    6b20:	05 90       	lpm	r0, Z+
    6b22:	61 50       	subi	r22, 0x01	; 1
    6b24:	70 40       	sbci	r23, 0x00	; 0
    6b26:	01 10       	cpse	r0, r1
    6b28:	d8 f7       	brcc	.-10     	; 0x6b20 <strnlen_P+0x2>
    6b2a:	80 95       	com	r24
    6b2c:	90 95       	com	r25
    6b2e:	8e 0f       	add	r24, r30
    6b30:	9f 1f       	adc	r25, r31
    6b32:	08 95       	ret

00006b34 <memcpy>:
    6b34:	fb 01       	movw	r30, r22
    6b36:	dc 01       	movw	r26, r24
    6b38:	02 c0       	rjmp	.+4      	; 0x6b3e <memcpy+0xa>
    6b3a:	01 90       	ld	r0, Z+
    6b3c:	0d 92       	st	X+, r0
    6b3e:	41 50       	subi	r20, 0x01	; 1
    6b40:	50 40       	sbci	r21, 0x00	; 0
    6b42:	d8 f7       	brcc	.-10     	; 0x6b3a <memcpy+0x6>
    6b44:	08 95       	ret

00006b46 <memset>:
    6b46:	dc 01       	movw	r26, r24
    6b48:	01 c0       	rjmp	.+2      	; 0x6b4c <memset+0x6>
    6b4a:	6d 93       	st	X+, r22
    6b4c:	41 50       	subi	r20, 0x01	; 1
    6b4e:	50 40       	sbci	r21, 0x00	; 0
    6b50:	e0 f7       	brcc	.-8      	; 0x6b4a <memset+0x4>
    6b52:	08 95       	ret

00006b54 <strcasestr>:
    6b54:	fb 01       	movw	r30, r22
    6b56:	51 91       	ld	r21, Z+
    6b58:	55 23       	and	r21, r21
    6b5a:	b1 f0       	breq	.+44     	; 0x6b88 <strcasestr+0x34>
    6b5c:	bf 01       	movw	r22, r30
    6b5e:	dc 01       	movw	r26, r24
    6b60:	05 2e       	mov	r0, r21
    6b62:	4d 91       	ld	r20, X+
    6b64:	44 23       	and	r20, r20
    6b66:	69 f0       	breq	.+26     	; 0x6b82 <strcasestr+0x2e>
    6b68:	10 d0       	rcall	.+32     	; 0x6b8a <strcasestr+0x36>
    6b6a:	d9 f7       	brne	.-10     	; 0x6b62 <strcasestr+0xe>
    6b6c:	cd 01       	movw	r24, r26
    6b6e:	01 90       	ld	r0, Z+
    6b70:	00 20       	and	r0, r0
    6b72:	49 f0       	breq	.+18     	; 0x6b86 <strcasestr+0x32>
    6b74:	4d 91       	ld	r20, X+
    6b76:	41 11       	cpse	r20, r1
    6b78:	08 d0       	rcall	.+16     	; 0x6b8a <strcasestr+0x36>
    6b7a:	c9 f3       	breq	.-14     	; 0x6b6e <strcasestr+0x1a>
    6b7c:	fb 01       	movw	r30, r22
    6b7e:	41 11       	cpse	r20, r1
    6b80:	ee cf       	rjmp	.-36     	; 0x6b5e <strcasestr+0xa>
    6b82:	81 e0       	ldi	r24, 0x01	; 1
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	01 97       	sbiw	r24, 0x01	; 1
    6b88:	08 95       	ret
    6b8a:	40 25       	eor	r20, r0
    6b8c:	39 f0       	breq	.+14     	; 0x6b9c <strcasestr+0x48>
    6b8e:	40 32       	cpi	r20, 0x20	; 32
    6b90:	29 f4       	brne	.+10     	; 0x6b9c <strcasestr+0x48>
    6b92:	40 29       	or	r20, r0
    6b94:	4b 57       	subi	r20, 0x7B	; 123
    6b96:	46 5e       	subi	r20, 0xE6	; 230
    6b98:	08 f0       	brcs	.+2      	; 0x6b9c <strcasestr+0x48>
    6b9a:	18 94       	sez
    6b9c:	08 95       	ret

00006b9e <strcat>:
    6b9e:	fb 01       	movw	r30, r22
    6ba0:	dc 01       	movw	r26, r24
    6ba2:	0d 90       	ld	r0, X+
    6ba4:	00 20       	and	r0, r0
    6ba6:	e9 f7       	brne	.-6      	; 0x6ba2 <strcat+0x4>
    6ba8:	11 97       	sbiw	r26, 0x01	; 1
    6baa:	01 90       	ld	r0, Z+
    6bac:	0d 92       	st	X+, r0
    6bae:	00 20       	and	r0, r0
    6bb0:	e1 f7       	brne	.-8      	; 0x6baa <strcat+0xc>
    6bb2:	08 95       	ret

00006bb4 <strcpy>:
    6bb4:	fb 01       	movw	r30, r22
    6bb6:	dc 01       	movw	r26, r24
    6bb8:	01 90       	ld	r0, Z+
    6bba:	0d 92       	st	X+, r0
    6bbc:	00 20       	and	r0, r0
    6bbe:	e1 f7       	brne	.-8      	; 0x6bb8 <strcpy+0x4>
    6bc0:	08 95       	ret

00006bc2 <strncasecmp>:
    6bc2:	fb 01       	movw	r30, r22
    6bc4:	dc 01       	movw	r26, r24
    6bc6:	41 50       	subi	r20, 0x01	; 1
    6bc8:	50 40       	sbci	r21, 0x00	; 0
    6bca:	88 f0       	brcs	.+34     	; 0x6bee <strncasecmp+0x2c>
    6bcc:	8d 91       	ld	r24, X+
    6bce:	81 34       	cpi	r24, 0x41	; 65
    6bd0:	1c f0       	brlt	.+6      	; 0x6bd8 <strncasecmp+0x16>
    6bd2:	8b 35       	cpi	r24, 0x5B	; 91
    6bd4:	0c f4       	brge	.+2      	; 0x6bd8 <strncasecmp+0x16>
    6bd6:	80 5e       	subi	r24, 0xE0	; 224
    6bd8:	61 91       	ld	r22, Z+
    6bda:	61 34       	cpi	r22, 0x41	; 65
    6bdc:	1c f0       	brlt	.+6      	; 0x6be4 <strncasecmp+0x22>
    6bde:	6b 35       	cpi	r22, 0x5B	; 91
    6be0:	0c f4       	brge	.+2      	; 0x6be4 <strncasecmp+0x22>
    6be2:	60 5e       	subi	r22, 0xE0	; 224
    6be4:	86 1b       	sub	r24, r22
    6be6:	61 11       	cpse	r22, r1
    6be8:	71 f3       	breq	.-36     	; 0x6bc6 <strncasecmp+0x4>
    6bea:	99 0b       	sbc	r25, r25
    6bec:	08 95       	ret
    6bee:	88 1b       	sub	r24, r24
    6bf0:	fc cf       	rjmp	.-8      	; 0x6bea <strncasecmp+0x28>

00006bf2 <strnlen>:
    6bf2:	fc 01       	movw	r30, r24
    6bf4:	61 50       	subi	r22, 0x01	; 1
    6bf6:	70 40       	sbci	r23, 0x00	; 0
    6bf8:	01 90       	ld	r0, Z+
    6bfa:	01 10       	cpse	r0, r1
    6bfc:	d8 f7       	brcc	.-10     	; 0x6bf4 <strnlen+0x2>
    6bfe:	80 95       	com	r24
    6c00:	90 95       	com	r25
    6c02:	8e 0f       	add	r24, r30
    6c04:	9f 1f       	adc	r25, r31
    6c06:	08 95       	ret

00006c08 <fputc>:
    6c08:	0f 93       	push	r16
    6c0a:	1f 93       	push	r17
    6c0c:	cf 93       	push	r28
    6c0e:	df 93       	push	r29
    6c10:	fb 01       	movw	r30, r22
    6c12:	23 81       	ldd	r18, Z+3	; 0x03
    6c14:	21 fd       	sbrc	r18, 1
    6c16:	03 c0       	rjmp	.+6      	; 0x6c1e <fputc+0x16>
    6c18:	8f ef       	ldi	r24, 0xFF	; 255
    6c1a:	9f ef       	ldi	r25, 0xFF	; 255
    6c1c:	2c c0       	rjmp	.+88     	; 0x6c76 <fputc+0x6e>
    6c1e:	22 ff       	sbrs	r18, 2
    6c20:	16 c0       	rjmp	.+44     	; 0x6c4e <fputc+0x46>
    6c22:	46 81       	ldd	r20, Z+6	; 0x06
    6c24:	57 81       	ldd	r21, Z+7	; 0x07
    6c26:	24 81       	ldd	r18, Z+4	; 0x04
    6c28:	35 81       	ldd	r19, Z+5	; 0x05
    6c2a:	42 17       	cp	r20, r18
    6c2c:	53 07       	cpc	r21, r19
    6c2e:	44 f4       	brge	.+16     	; 0x6c40 <fputc+0x38>
    6c30:	a0 81       	ld	r26, Z
    6c32:	b1 81       	ldd	r27, Z+1	; 0x01
    6c34:	9d 01       	movw	r18, r26
    6c36:	2f 5f       	subi	r18, 0xFF	; 255
    6c38:	3f 4f       	sbci	r19, 0xFF	; 255
    6c3a:	31 83       	std	Z+1, r19	; 0x01
    6c3c:	20 83       	st	Z, r18
    6c3e:	8c 93       	st	X, r24
    6c40:	26 81       	ldd	r18, Z+6	; 0x06
    6c42:	37 81       	ldd	r19, Z+7	; 0x07
    6c44:	2f 5f       	subi	r18, 0xFF	; 255
    6c46:	3f 4f       	sbci	r19, 0xFF	; 255
    6c48:	37 83       	std	Z+7, r19	; 0x07
    6c4a:	26 83       	std	Z+6, r18	; 0x06
    6c4c:	14 c0       	rjmp	.+40     	; 0x6c76 <fputc+0x6e>
    6c4e:	8b 01       	movw	r16, r22
    6c50:	ec 01       	movw	r28, r24
    6c52:	fb 01       	movw	r30, r22
    6c54:	00 84       	ldd	r0, Z+8	; 0x08
    6c56:	f1 85       	ldd	r31, Z+9	; 0x09
    6c58:	e0 2d       	mov	r30, r0
    6c5a:	19 95       	eicall
    6c5c:	89 2b       	or	r24, r25
    6c5e:	e1 f6       	brne	.-72     	; 0x6c18 <fputc+0x10>
    6c60:	d8 01       	movw	r26, r16
    6c62:	16 96       	adiw	r26, 0x06	; 6
    6c64:	8d 91       	ld	r24, X+
    6c66:	9c 91       	ld	r25, X
    6c68:	17 97       	sbiw	r26, 0x07	; 7
    6c6a:	01 96       	adiw	r24, 0x01	; 1
    6c6c:	17 96       	adiw	r26, 0x07	; 7
    6c6e:	9c 93       	st	X, r25
    6c70:	8e 93       	st	-X, r24
    6c72:	16 97       	sbiw	r26, 0x06	; 6
    6c74:	ce 01       	movw	r24, r28
    6c76:	df 91       	pop	r29
    6c78:	cf 91       	pop	r28
    6c7a:	1f 91       	pop	r17
    6c7c:	0f 91       	pop	r16
    6c7e:	08 95       	ret

00006c80 <printf>:
    6c80:	cf 93       	push	r28
    6c82:	df 93       	push	r29
    6c84:	cd b7       	in	r28, 0x3d	; 61
    6c86:	de b7       	in	r29, 0x3e	; 62
    6c88:	ae 01       	movw	r20, r28
    6c8a:	4a 5f       	subi	r20, 0xFA	; 250
    6c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    6c8e:	fa 01       	movw	r30, r20
    6c90:	61 91       	ld	r22, Z+
    6c92:	71 91       	ld	r23, Z+
    6c94:	af 01       	movw	r20, r30
    6c96:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <__iob+0x2>
    6c9a:	90 91 56 19 	lds	r25, 0x1956	; 0x801956 <__iob+0x3>
    6c9e:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <vfprintf>
    6ca2:	df 91       	pop	r29
    6ca4:	cf 91       	pop	r28
    6ca6:	08 95       	ret

00006ca8 <puts>:
    6ca8:	0f 93       	push	r16
    6caa:	1f 93       	push	r17
    6cac:	cf 93       	push	r28
    6cae:	df 93       	push	r29
    6cb0:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <__iob+0x2>
    6cb4:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <__iob+0x3>
    6cb8:	23 81       	ldd	r18, Z+3	; 0x03
    6cba:	21 ff       	sbrs	r18, 1
    6cbc:	1b c0       	rjmp	.+54     	; 0x6cf4 <puts+0x4c>
    6cbe:	8c 01       	movw	r16, r24
    6cc0:	d0 e0       	ldi	r29, 0x00	; 0
    6cc2:	c0 e0       	ldi	r28, 0x00	; 0
    6cc4:	f8 01       	movw	r30, r16
    6cc6:	81 91       	ld	r24, Z+
    6cc8:	8f 01       	movw	r16, r30
    6cca:	60 91 55 19 	lds	r22, 0x1955	; 0x801955 <__iob+0x2>
    6cce:	70 91 56 19 	lds	r23, 0x1956	; 0x801956 <__iob+0x3>
    6cd2:	db 01       	movw	r26, r22
    6cd4:	18 96       	adiw	r26, 0x08	; 8
    6cd6:	ed 91       	ld	r30, X+
    6cd8:	fc 91       	ld	r31, X
    6cda:	19 97       	sbiw	r26, 0x09	; 9
    6cdc:	88 23       	and	r24, r24
    6cde:	31 f0       	breq	.+12     	; 0x6cec <puts+0x44>
    6ce0:	19 95       	eicall
    6ce2:	89 2b       	or	r24, r25
    6ce4:	79 f3       	breq	.-34     	; 0x6cc4 <puts+0x1c>
    6ce6:	df ef       	ldi	r29, 0xFF	; 255
    6ce8:	cf ef       	ldi	r28, 0xFF	; 255
    6cea:	ec cf       	rjmp	.-40     	; 0x6cc4 <puts+0x1c>
    6cec:	8a e0       	ldi	r24, 0x0A	; 10
    6cee:	19 95       	eicall
    6cf0:	89 2b       	or	r24, r25
    6cf2:	19 f0       	breq	.+6      	; 0x6cfa <puts+0x52>
    6cf4:	8f ef       	ldi	r24, 0xFF	; 255
    6cf6:	9f ef       	ldi	r25, 0xFF	; 255
    6cf8:	02 c0       	rjmp	.+4      	; 0x6cfe <puts+0x56>
    6cfa:	8d 2f       	mov	r24, r29
    6cfc:	9c 2f       	mov	r25, r28
    6cfe:	df 91       	pop	r29
    6d00:	cf 91       	pop	r28
    6d02:	1f 91       	pop	r17
    6d04:	0f 91       	pop	r16
    6d06:	08 95       	ret

00006d08 <sprintf>:
    6d08:	0f 93       	push	r16
    6d0a:	1f 93       	push	r17
    6d0c:	cf 93       	push	r28
    6d0e:	df 93       	push	r29
    6d10:	cd b7       	in	r28, 0x3d	; 61
    6d12:	de b7       	in	r29, 0x3e	; 62
    6d14:	2e 97       	sbiw	r28, 0x0e	; 14
    6d16:	0f b6       	in	r0, 0x3f	; 63
    6d18:	f8 94       	cli
    6d1a:	de bf       	out	0x3e, r29	; 62
    6d1c:	0f be       	out	0x3f, r0	; 63
    6d1e:	cd bf       	out	0x3d, r28	; 61
    6d20:	0e 89       	ldd	r16, Y+22	; 0x16
    6d22:	1f 89       	ldd	r17, Y+23	; 0x17
    6d24:	86 e0       	ldi	r24, 0x06	; 6
    6d26:	8c 83       	std	Y+4, r24	; 0x04
    6d28:	1a 83       	std	Y+2, r17	; 0x02
    6d2a:	09 83       	std	Y+1, r16	; 0x01
    6d2c:	8f ef       	ldi	r24, 0xFF	; 255
    6d2e:	9f e7       	ldi	r25, 0x7F	; 127
    6d30:	9e 83       	std	Y+6, r25	; 0x06
    6d32:	8d 83       	std	Y+5, r24	; 0x05
    6d34:	ae 01       	movw	r20, r28
    6d36:	46 5e       	subi	r20, 0xE6	; 230
    6d38:	5f 4f       	sbci	r21, 0xFF	; 255
    6d3a:	68 8d       	ldd	r22, Y+24	; 0x18
    6d3c:	79 8d       	ldd	r23, Y+25	; 0x19
    6d3e:	ce 01       	movw	r24, r28
    6d40:	01 96       	adiw	r24, 0x01	; 1
    6d42:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <vfprintf>
    6d46:	ef 81       	ldd	r30, Y+7	; 0x07
    6d48:	f8 85       	ldd	r31, Y+8	; 0x08
    6d4a:	e0 0f       	add	r30, r16
    6d4c:	f1 1f       	adc	r31, r17
    6d4e:	10 82       	st	Z, r1
    6d50:	2e 96       	adiw	r28, 0x0e	; 14
    6d52:	0f b6       	in	r0, 0x3f	; 63
    6d54:	f8 94       	cli
    6d56:	de bf       	out	0x3e, r29	; 62
    6d58:	0f be       	out	0x3f, r0	; 63
    6d5a:	cd bf       	out	0x3d, r28	; 61
    6d5c:	df 91       	pop	r29
    6d5e:	cf 91       	pop	r28
    6d60:	1f 91       	pop	r17
    6d62:	0f 91       	pop	r16
    6d64:	08 95       	ret

00006d66 <__ultoa_invert>:
    6d66:	fa 01       	movw	r30, r20
    6d68:	aa 27       	eor	r26, r26
    6d6a:	28 30       	cpi	r18, 0x08	; 8
    6d6c:	51 f1       	breq	.+84     	; 0x6dc2 <__ultoa_invert+0x5c>
    6d6e:	20 31       	cpi	r18, 0x10	; 16
    6d70:	81 f1       	breq	.+96     	; 0x6dd2 <__ultoa_invert+0x6c>
    6d72:	e8 94       	clt
    6d74:	6f 93       	push	r22
    6d76:	6e 7f       	andi	r22, 0xFE	; 254
    6d78:	6e 5f       	subi	r22, 0xFE	; 254
    6d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d7c:	8f 4f       	sbci	r24, 0xFF	; 255
    6d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    6d80:	af 4f       	sbci	r26, 0xFF	; 255
    6d82:	b1 e0       	ldi	r27, 0x01	; 1
    6d84:	3e d0       	rcall	.+124    	; 0x6e02 <__ultoa_invert+0x9c>
    6d86:	b4 e0       	ldi	r27, 0x04	; 4
    6d88:	3c d0       	rcall	.+120    	; 0x6e02 <__ultoa_invert+0x9c>
    6d8a:	67 0f       	add	r22, r23
    6d8c:	78 1f       	adc	r23, r24
    6d8e:	89 1f       	adc	r24, r25
    6d90:	9a 1f       	adc	r25, r26
    6d92:	a1 1d       	adc	r26, r1
    6d94:	68 0f       	add	r22, r24
    6d96:	79 1f       	adc	r23, r25
    6d98:	8a 1f       	adc	r24, r26
    6d9a:	91 1d       	adc	r25, r1
    6d9c:	a1 1d       	adc	r26, r1
    6d9e:	6a 0f       	add	r22, r26
    6da0:	71 1d       	adc	r23, r1
    6da2:	81 1d       	adc	r24, r1
    6da4:	91 1d       	adc	r25, r1
    6da6:	a1 1d       	adc	r26, r1
    6da8:	20 d0       	rcall	.+64     	; 0x6dea <__ultoa_invert+0x84>
    6daa:	09 f4       	brne	.+2      	; 0x6dae <__ultoa_invert+0x48>
    6dac:	68 94       	set
    6dae:	3f 91       	pop	r19
    6db0:	2a e0       	ldi	r18, 0x0A	; 10
    6db2:	26 9f       	mul	r18, r22
    6db4:	11 24       	eor	r1, r1
    6db6:	30 19       	sub	r19, r0
    6db8:	30 5d       	subi	r19, 0xD0	; 208
    6dba:	31 93       	st	Z+, r19
    6dbc:	de f6       	brtc	.-74     	; 0x6d74 <__ultoa_invert+0xe>
    6dbe:	cf 01       	movw	r24, r30
    6dc0:	08 95       	ret
    6dc2:	46 2f       	mov	r20, r22
    6dc4:	47 70       	andi	r20, 0x07	; 7
    6dc6:	40 5d       	subi	r20, 0xD0	; 208
    6dc8:	41 93       	st	Z+, r20
    6dca:	b3 e0       	ldi	r27, 0x03	; 3
    6dcc:	0f d0       	rcall	.+30     	; 0x6dec <__ultoa_invert+0x86>
    6dce:	c9 f7       	brne	.-14     	; 0x6dc2 <__ultoa_invert+0x5c>
    6dd0:	f6 cf       	rjmp	.-20     	; 0x6dbe <__ultoa_invert+0x58>
    6dd2:	46 2f       	mov	r20, r22
    6dd4:	4f 70       	andi	r20, 0x0F	; 15
    6dd6:	40 5d       	subi	r20, 0xD0	; 208
    6dd8:	4a 33       	cpi	r20, 0x3A	; 58
    6dda:	18 f0       	brcs	.+6      	; 0x6de2 <__ultoa_invert+0x7c>
    6ddc:	49 5d       	subi	r20, 0xD9	; 217
    6dde:	31 fd       	sbrc	r19, 1
    6de0:	40 52       	subi	r20, 0x20	; 32
    6de2:	41 93       	st	Z+, r20
    6de4:	02 d0       	rcall	.+4      	; 0x6dea <__ultoa_invert+0x84>
    6de6:	a9 f7       	brne	.-22     	; 0x6dd2 <__ultoa_invert+0x6c>
    6de8:	ea cf       	rjmp	.-44     	; 0x6dbe <__ultoa_invert+0x58>
    6dea:	b4 e0       	ldi	r27, 0x04	; 4
    6dec:	a6 95       	lsr	r26
    6dee:	97 95       	ror	r25
    6df0:	87 95       	ror	r24
    6df2:	77 95       	ror	r23
    6df4:	67 95       	ror	r22
    6df6:	ba 95       	dec	r27
    6df8:	c9 f7       	brne	.-14     	; 0x6dec <__ultoa_invert+0x86>
    6dfa:	00 97       	sbiw	r24, 0x00	; 0
    6dfc:	61 05       	cpc	r22, r1
    6dfe:	71 05       	cpc	r23, r1
    6e00:	08 95       	ret
    6e02:	9b 01       	movw	r18, r22
    6e04:	ac 01       	movw	r20, r24
    6e06:	0a 2e       	mov	r0, r26
    6e08:	06 94       	lsr	r0
    6e0a:	57 95       	ror	r21
    6e0c:	47 95       	ror	r20
    6e0e:	37 95       	ror	r19
    6e10:	27 95       	ror	r18
    6e12:	ba 95       	dec	r27
    6e14:	c9 f7       	brne	.-14     	; 0x6e08 <__ultoa_invert+0xa2>
    6e16:	62 0f       	add	r22, r18
    6e18:	73 1f       	adc	r23, r19
    6e1a:	84 1f       	adc	r24, r20
    6e1c:	95 1f       	adc	r25, r21
    6e1e:	a0 1d       	adc	r26, r0
    6e20:	08 95       	ret

00006e22 <_exit>:
    6e22:	f8 94       	cli

00006e24 <__stop_program>:
    6e24:	ff cf       	rjmp	.-2      	; 0x6e24 <__stop_program>
